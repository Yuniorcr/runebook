<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ko" datatype="htmlbody" original="kotlin">
    <body>
      <group id="kotlin">
        <trans-unit id="837e53257b3eec566bea2e67012cd4dadfb5bb32" translate="yes" xml:space="preserve">
          <source>Targets and output kinds</source>
          <target state="translated">목표 및 출력 종류</target>
        </trans-unit>
        <trans-unit id="816c9fefceb8b2eba75d842698c8c325c361d2dc" translate="yes" xml:space="preserve">
          <source>Targets can be specified by setting a corresponding component property:</source>
          <target state="translated">해당 구성 요소 특성을 설정하여 대상을 지정할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="ccd64eb3b2ae68576bc374a9f76f6dafc19a16b7" translate="yes" xml:space="preserve">
          <source>Teaching Kotlin with EduTools plugin</source>
          <target state="translated">EduTools 플러그인으로 Kotlin 교육</target>
        </trans-unit>
        <trans-unit id="107721a9ab514d4563cc6535734a7356bb7e6b23" translate="yes" xml:space="preserve">
          <source>Technically, there is no difference between &lt;code&gt;struct&lt;/code&gt; and &lt;code&gt;union&lt;/code&gt; types on the Kotlin side. We should note, that &lt;code&gt;a&lt;/code&gt;, &lt;code&gt;b&lt;/code&gt;, and &lt;code&gt;c&lt;/code&gt; properties of &lt;code&gt;MyUnion&lt;/code&gt; class in Kotlin use the same memory location to read/write their value just like &lt;code&gt;union&lt;/code&gt; does in C language.</source>
          <target state="translated">기술적으로 Kotlin 측의 &lt;code&gt;struct&lt;/code&gt; 유형 과 &lt;code&gt;union&lt;/code&gt; 유형 에는 차이가 없습니다 . 우리는 것을주의해야한다 &lt;code&gt;a&lt;/code&gt; , &lt;code&gt;b&lt;/code&gt; 및 &lt;code&gt;c&lt;/code&gt; 속성 &lt;code&gt;MyUnion&lt;/code&gt; 의 코 틀린의 클래스는 읽기 /처럼 자신의 가치 쓰기 같은 메모리 위치를 사용 &lt;code&gt;union&lt;/code&gt; C 언어로 수행합니다.</target>
        </trans-unit>
        <trans-unit id="1d53818b29193f314641d3739f638d9be2e9e5f4" translate="yes" xml:space="preserve">
          <source>Templates are supported both inside raw strings and inside escaped strings. If you need to represent a literal &lt;code&gt;$&lt;/code&gt; character in a raw string (which doesn't support backslash escaping), you can use the following syntax:</source>
          <target state="translated">원시 문자열 내부와 이스케이프 된 문자열 내부 모두에서 템플릿이 지원됩니다. 백 슬래시 이스케이프를 지원하지 않는 원시 문자열에서 리터럴 &lt;code&gt;$&lt;/code&gt; 문자 를 나타내야하는 경우 다음 구문을 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="7ba8959df1020b7c25355f02aa80fc7a01cc8776" translate="yes" xml:space="preserve">
          <source>Terminal flow operators</source>
          <target state="translated">터미널 흐름 연산자</target>
        </trans-unit>
        <trans-unit id="8bc67143f47634cca6b14c4c30313696a3edee94" translate="yes" xml:space="preserve">
          <source>Terminal operators on flows are &lt;em&gt;suspending functions&lt;/em&gt; that start a collection of the flow. The &lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines.flow/collect.html&quot;&gt;collect&lt;/a&gt; operator is the most basic one, but there are other terminal operators, which can make it easier:</source>
          <target state="translated">흐름의 터미널 연산자는 흐름 수집을 시작하는 &lt;em&gt;기능&lt;/em&gt; 을 &lt;em&gt;일시 중단합니다&lt;/em&gt; . &lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines.flow/collect.html&quot;&gt;수집&lt;/a&gt; 운영자는 가장 기본적인 일이지만, 더 쉽게 만들 수있는 다른 터미널 운영이있다 :</target>
        </trans-unit>
        <trans-unit id="8761082f68b3e6705f4c38bb348056fcdd9cb6dd" translate="yes" xml:space="preserve">
          <source>Terminate the evaluation of the function.</source>
          <target state="translated">기능 평가를 종료하십시오.</target>
        </trans-unit>
        <trans-unit id="bd3961165a74d22116abf8cd7dfd89e1e128faab" translate="yes" xml:space="preserve">
          <source>Terminates the currently running process.</source>
          <target state="translated">현재 실행중인 프로세스를 종료합니다.</target>
        </trans-unit>
        <trans-unit id="4640b3677ae305cdd783f2fb2cb28eef6cd34e00" translate="yes" xml:space="preserve">
          <source>Ternary-operator &lt;code&gt;a ? b : c&lt;/code&gt;</source>
          <target state="translated">삼항 연산자 &lt;code&gt;a ? b : c&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="9c22a134e1f02cad64a3d132ad7049819fd878ba" translate="yes" xml:space="preserve">
          <source>Test code and resources shared between all platforms. Available in all multiplatform projects. Used in all test compilations of a project.</source>
          <target state="translated">모든 플랫폼간에 공유되는 테스트 코드 및 리소스. 모든 멀티 플랫폼 프로젝트에서 사용할 수 있습니다. 프로젝트의 모든 테스트 컴파일에 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="6f766a74653830a12657ec6c72f3933d6f2e1972" translate="yes" xml:space="preserve">
          <source>Test configuration</source>
          <target state="translated">테스트 구성</target>
        </trans-unit>
        <trans-unit id="372bbf00df55ec21b53da581f9b6998ed6e0bdac" translate="yes" xml:space="preserve">
          <source>Test executable</source>
          <target state="translated">테스트 실행 가능</target>
        </trans-unit>
        <trans-unit id="23b06cefd18a3e9e852e245b75fa172dce42b67c" translate="yes" xml:space="preserve">
          <source>Test executable.</source>
          <target state="translated">실행 파일을 테스트합니다.</target>
        </trans-unit>
        <trans-unit id="402aba565d558dcbcb7c225b6e1f4e58dbc667da" translate="yes" xml:space="preserve">
          <source>Test reports generation</source>
          <target state="translated">테스트 보고서 생성</target>
        </trans-unit>
        <trans-unit id="da5b6a7b5703c1c1698be24a1fa79fd7890fb1c1" translate="yes" xml:space="preserve">
          <source>Test run results in the console</source>
          <target state="translated">콘솔에서 테스트 실행 결과</target>
        </trans-unit>
        <trans-unit id="1c718df4c6a07f654ca88944cfa217c182c74b06" translate="yes" xml:space="preserve">
          <source>TestClock</source>
          <target state="translated">TestClock</target>
        </trans-unit>
        <trans-unit id="fa1d9bd08b7bbcce4cacba29ac0abb1d8ea26e62" translate="yes" xml:space="preserve">
          <source>TestTimeSource</source>
          <target state="translated">TestTimeSource</target>
        </trans-unit>
        <trans-unit id="0820b32b206b7352858e8903a838ed14319acdfd" translate="yes" xml:space="preserve">
          <source>Testing</source>
          <target state="translated">Testing</target>
        </trans-unit>
        <trans-unit id="d3b8064c2d7f14d3be517a2dd8d759b095d75329" translate="yes" xml:space="preserve">
          <source>Testing predicates</source>
          <target state="translated">테스트 술어</target>
        </trans-unit>
        <trans-unit id="c7dd4726947e8a4e69327ac444e2102f6d4c85c3" translate="yes" xml:space="preserve">
          <source>Tests are a safe place to add Kotlin to the codebase because they are not bundled with your application during packaging.</source>
          <target state="translated">테스트는 패키징 중에 애플리케이션과 함께 번들로 제공되지 않기 때문에 코드베이스에 Kotlin을 추가 할 수있는 안전한 장소입니다.</target>
        </trans-unit>
        <trans-unit id="082fdf5c87614574580fe601c26048e8b6285351" translate="yes" xml:space="preserve">
          <source>TexImageSource</source>
          <target state="translated">TexImageSource</target>
        </trans-unit>
        <trans-unit id="06d4a26dfeb6fe515c1bd30f6921c66e729ad5b4" translate="yes" xml:space="preserve">
          <source>TextMetrics</source>
          <target state="translated">TextMetrics</target>
        </trans-unit>
        <trans-unit id="0c0a3e3c79ed645faf27df5d40c7372e38f10e27" translate="yes" xml:space="preserve">
          <source>TextTrackCueList</source>
          <target state="translated">TextTrackCueList</target>
        </trans-unit>
        <trans-unit id="86fb1c4a335a80c40bdf3e5b1a2aadd5059a2ca7" translate="yes" xml:space="preserve">
          <source>TextTrackKind</source>
          <target state="translated">TextTrackKind</target>
        </trans-unit>
        <trans-unit id="12de6f114f3e1a86a095e86dfa5c8b68ba37ba4b" translate="yes" xml:space="preserve">
          <source>TextTrackMode</source>
          <target state="translated">TextTrackMode</target>
        </trans-unit>
        <trans-unit id="53e95fc8d87c0686b0db942c629a742b7440e7d3" translate="yes" xml:space="preserve">
          <source>Thanks to the hierarchical project structure, libraries can also provide common APIs for a subset of targets. Learn more about &lt;a href=&quot;mpp-share-on-platforms#share-code-in-libraries&quot;&gt;sharing code in libraries&lt;/a&gt;.</source>
          <target state="translated">계층 적 프로젝트 구조 덕분에 라이브러리는 대상 하위 집합에 대한 공통 API도 제공 할 수 있습니다. &lt;a href=&quot;mpp-share-on-platforms#share-code-in-libraries&quot;&gt;라이브러리에서 코드 공유에&lt;/a&gt; 대해 자세히 알아보십시오 .</target>
        </trans-unit>
        <trans-unit id="4455a59aa23e731930f0ed9b61b713623ec3ff4f" translate="yes" xml:space="preserve">
          <source>Thanks to the hierarchical project structure, libraries can also provide common APIs for a subset of targets. When a &lt;a href=&quot;mpp-publish-lib&quot;&gt;library is published&lt;/a&gt;, the API of its intermediate source sets is embedded into the library artifacts along with information about the project structure. When you use this library, the intermediate source sets of your project access only those APIs of the library which are available to the targets of each source set.</source>
          <target state="translated">계층 적 프로젝트 구조 덕분에 라이브러리는 대상 하위 집합에 대한 공통 API도 제공 할 수 있습니다. 때 &lt;a href=&quot;mpp-publish-lib&quot;&gt;라이브러리를 게시&lt;/a&gt; , 그 중간 소스 세트의 API 프로젝트 구조에 대한 정보와 함께 도서관 유물에 포함된다. 이 라이브러리를 사용할 때 프로젝트의 중간 소스 세트는 각 소스 세트의 대상에서 사용할 수있는 라이브러리의 API에만 액세스합니다.</target>
        </trans-unit>
        <trans-unit id="7878af5e1d970e3132e8a0a88487c501b01c97e2" translate="yes" xml:space="preserve">
          <source>That gives you a way to express queries via C#-like LINQ syntax, use lambdas to write much simpler code for asynchronous computations, and more. Read all the details &lt;a href=&quot;https://agrosner.gitbooks.io/dbflow/content/KotlinSupport.html&quot;&gt;here&lt;/a&gt;.</source>
          <target state="translated">이를 통해 C #과 같은 LINQ 구문을 통해 쿼리를 표현하고 람다를 사용하여 비동기 계산을위한 훨씬 간단한 코드 등을 작성할 수 있습니다. &lt;a href=&quot;https://agrosner.gitbooks.io/dbflow/content/KotlinSupport.html&quot;&gt;여기에서&lt;/a&gt; 모든 세부 사항을 읽으 십시오 .</target>
        </trans-unit>
        <trans-unit id="0edd9421fb5e5aa8cfee7f829a8302f1e02b82ec" translate="yes" xml:space="preserve">
          <source>That is because &lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/delay.html&quot;&gt;delay&lt;/a&gt; is a special &lt;em&gt;suspending function&lt;/em&gt; that does not block a thread, but &lt;em&gt;suspends&lt;/em&gt; coroutine and it can be only used from a coroutine.</source>
          <target state="translated">&lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/delay.html&quot;&gt;지연&lt;/a&gt; 은 스레드를 차단하지 않고 코 루틴을 &lt;em&gt;일시 중단하고&lt;/em&gt; 코 루틴에서만 사용할 수 있는 특수한 &lt;em&gt;일시 중단 함수&lt;/em&gt; 이기 때문 입니다.&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="710fe831c742e4f0eb7d410a5e7f34322dc9bdb8" translate="yes" xml:space="preserve">
          <source>That is because &lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/delay.html&quot;&gt;delay&lt;/a&gt; is a special &lt;em&gt;suspending function&lt;/em&gt; that does not block a thread, but &lt;em&gt;suspends&lt;/em&gt; the coroutine, and it can be only used from a coroutine.</source>
          <target state="translated">&lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/delay.html&quot;&gt;딜레이&lt;/a&gt; 는 스레드를 차단하지 않고 코 루틴을 &lt;em&gt;일시 중단&lt;/em&gt; 하는 특수한 &lt;em&gt;일시 중단 함수&lt;/em&gt; 이기 때문에 코 루틴에서만 사용할 수 있습니다.&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="5f1552ede00e5eac7ce32f87adbb1ebbd118c506" translate="yes" xml:space="preserve">
          <source>That is the common part. The code to generate the final message. It &lt;code&gt;expect&lt;/code&gt;s the platform to provide the platform name from the &lt;code&gt;expect fun platformName(): String&lt;/code&gt; function. We will use the &lt;code&gt;createApplicationScreenMessage&lt;/code&gt; from both Android and iOS applications.</source>
          <target state="translated">이것이 일반적인 부분입니다. 최종 메시지를 생성하는 코드입니다. 그것은 &lt;code&gt;expect&lt;/code&gt; (가)에서 플랫폼 이름 제공 할 수있는 플랫폼이야 &lt;code&gt;expect fun platformName(): String&lt;/code&gt; 함수를. Android 및 iOS 애플리케이션 모두 에서 &lt;code&gt;createApplicationScreenMessage&lt;/code&gt; 를 사용합니다 .</target>
        </trans-unit>
        <trans-unit id="2bc4829125d0242560af4ed1db4d6bbd3c58404a" translate="yes" xml:space="preserve">
          <source>That was easy, but maybe we'd want to do lazy-loading so that we won't spend time on extracting the fields that won't be used (especially if some of them contain a lot of data in a format that it is time-consuming to parse), and maybe we'd like support for default values. While we could implement that logic in a &lt;code&gt;get()&lt;/code&gt; block, it would need to be duplicated in every property. Alternatively, we could implement the logic in a separate &lt;code&gt;StringProperty&lt;/code&gt; class (note that this simple example is not thread-safe):</source>
          <target state="translated">쉬운 일이지만 사용하지 않을 필드를 추출하는 데 시간을 소비하지 않도록 지연 로딩을 원할 수도 있습니다 (특히 일부 필드에 많은 형식의 데이터가있는 경우) 구문 분석하는 데 시간이 오래 걸리고 기본값을 지원하고 싶을 수도 있습니다. &lt;code&gt;get()&lt;/code&gt; 블록 에서 해당 논리를 구현할 수 있지만 모든 속성에서 복제해야합니다. 또는 별도의 &lt;code&gt;StringProperty&lt;/code&gt; 클래스 에서 논리를 구현할 수 있습니다 (이 간단한 예제는 스레드로부터 안전하지 않습니다).</target>
        </trans-unit>
        <trans-unit id="7c754aa21a3405ebaf37834b83155abdf27ac763" translate="yes" xml:space="preserve">
          <source>That will force the Objc header to mark &lt;code&gt;myVal&lt;/code&gt; as non-null.</source>
          <target state="translated">그러면 Objc 헤더가 &lt;code&gt;myVal&lt;/code&gt; 을 null이 아닌 것으로 표시 합니다.</target>
        </trans-unit>
        <trans-unit id="ec91ab1097ba6574aef9c9b3b66e7a3cac24bd22" translate="yes" xml:space="preserve">
          <source>That will force the Objective-C header to mark &lt;code&gt;myVal&lt;/code&gt; as non-null.</source>
          <target state="translated">그러면 Objective-C 헤더가 &lt;code&gt;myVal&lt;/code&gt; 을 null이 아닌 것으로 표시 하게 됩니다.</target>
        </trans-unit>
        <trans-unit id="679e649b9b5fbcdbe531734cbf672d185a685015" translate="yes" xml:space="preserve">
          <source>That&amp;rsquo;s why if you wanted to use &lt;code&gt;break&lt;/code&gt; and &lt;code&gt;continue&lt;/code&gt; inside &lt;code&gt;when&lt;/code&gt; expressions in loops, you had to &lt;a href=&quot;returns#break-and-continue-labels&quot;&gt;label&lt;/a&gt; them, which became rather cumbersome.</source>
          <target state="translated">사용하기를 원한다면 왜의 그 &lt;code&gt;break&lt;/code&gt; 하고 &lt;code&gt;continue&lt;/code&gt; 내부 &lt;code&gt;when&lt;/code&gt; 루프의 표현, 당신은했다 &lt;a href=&quot;returns#break-and-continue-labels&quot;&gt;레이블&lt;/a&gt; 오히려 성가신되었다 그들.</target>
        </trans-unit>
        <trans-unit id="0f4622a697b62b60beae07bb6cb2be3136a91e3c" translate="yes" xml:space="preserve">
          <source>That's all! Note that &lt;code&gt;kapt&lt;/code&gt; takes care of your Java files as well, so you don't need to keep the &lt;code&gt;annotationProcessor&lt;/code&gt; dependency.</source>
          <target state="translated">그게 다야! 참고 &lt;code&gt;kapt&lt;/code&gt; 은 당신이 계속 필요가 없습니다뿐만 아니라, 자바 파일을 담당 &lt;code&gt;annotationProcessor&lt;/code&gt; 의 의존성을.</target>
        </trans-unit>
        <trans-unit id="24349cf6cc7cf7f9b384531cea8b8f5b11489c77" translate="yes" xml:space="preserve">
          <source>That's how you add the plugin in Gradle:</source>
          <target state="translated">Gradle에서 플러그인을 추가하는 방법입니다.</target>
        </trans-unit>
        <trans-unit id="a1ab5b0ae87620b6ed26788a9947060cc8e1a1d4" translate="yes" xml:space="preserve">
          <source>That's it, our library is now successfully published and any Kotlin project can depend on it, whether it is another common library, JVM, JS, or Native application.</source>
          <target state="translated">이제 라이브러리가 성공적으로 게시되었으며 다른 공통 라이브러리, JVM, JS 또는 네이티브 애플리케이션이든 상관없이 모든 Kotlin 프로젝트가 이에 의존 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="736d96c876d3629aa01920322b964b507fdb9a3c" translate="yes" xml:space="preserve">
          <source>That's it, we are good to go and write code under &lt;code&gt;src/main/kotlin&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;src/main/kotlin&lt;/code&gt; 아래에 코드를 작성하는 것이 좋습니다 .</target>
        </trans-unit>
        <trans-unit id="b79f3592a2bc46aa2f1d8a2fe0f2f1a3ad0a665d" translate="yes" xml:space="preserve">
          <source>That's why the actual signature of &lt;code&gt;addAll()&lt;/code&gt; is the following:</source>
          <target state="translated">그래서 &lt;code&gt;addAll()&lt;/code&gt; 의 실제 서명은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="5cebaf2e4c811fba9f733598c7e0ab2cbbdabb01" translate="yes" xml:space="preserve">
          <source>That's why we have the following migration plan instead:</source>
          <target state="translated">따라서 다음과 같은 마이그레이션 계획이 있습니다.</target>
        </trans-unit>
        <trans-unit id="ed972239c05a1ce2160c2bcfca2e4a8ef0e2db12" translate="yes" xml:space="preserve">
          <source>The &quot;ping&quot; coroutine is started first, so it is the first one to receive the ball. Even though &quot;ping&quot; coroutine immediately starts receiving the ball again after sending it back to the table, the ball gets received by the &quot;pong&quot; coroutine, because it was already waiting for it:</source>
          <target state="translated">&quot;핑&quot;코 루틴이 먼저 시작되므로 볼을 처음으로받습니다. &quot;핑&quot;코 루틴이 공을 테이블로 다시 보낸 후 즉시 다시 공을 받기 시작하지만, &quot;퐁&quot;코 루틴이 이미 공을 기다리고 있기 때문에 공을받습니다.</target>
        </trans-unit>
        <trans-unit id="c7440a8c30ab97822c9d77fe495203fe0ef8e721" translate="yes" xml:space="preserve">
          <source>The &amp;ldquo;manual&amp;rdquo; workaround is to store the values of sub-expressions with control flow in variables, instead of evaluating them directly inside the call arguments. It&amp;rsquo;s similar to &lt;code&gt;-Xnormalize-constructor-calls=enable&lt;/code&gt;.</source>
          <target state="translated">&quot;수동&quot;해결 방법은 제어 흐름이있는 하위 표현식의 값을 호출 인수 내에서 직접 평가하는 대신 변수로 저장하는 것입니다. &lt;code&gt;-Xnormalize-constructor-calls=enable&lt;/code&gt; 과 유사합니다 .</target>
        </trans-unit>
        <trans-unit id="b2dac38fb13b33ed15d5a221ea9b31acee5a3f83" translate="yes" xml:space="preserve">
          <source>The (complete) C data type.</source>
          <target state="translated">(완료된) C 데이터 유형입니다.</target>
        </trans-unit>
        <trans-unit id="d40e2aa06e1f3081a9ba55e866548f768b24f0de" translate="yes" xml:space="preserve">
          <source>The (possibly empty) sequence of immutable C values. It is self-contained and doesn't depend on native memory.</source>
          <target state="translated">불변의 C 값의 (비어있는) 순서. 자체 포함되어 있으며 기본 메모리에 의존하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="7b6a69c655f68801070a7ea7a1009ee4bf0a261f" translate="yes" xml:space="preserve">
          <source>The 64-bit Android Native target require a Linux or macOS host. The 32-bit Android Native target can be built on any supported host.</source>
          <target state="translated">64 비트 Android Native 대상에는 Linux 또는 macOS 호스트가 필요합니다. 지원되는 모든 호스트에서 32 비트 Android Native 대상을 빌드 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="d0dc19249da02268a7197420a7bf7e4b0dc580f6" translate="yes" xml:space="preserve">
          <source>The 64-bit target requires a Linux or macOS host.</source>
          <target state="translated">64 비트 대상에는 Linux 또는 macOS 호스트가 필요합니다.</target>
        </trans-unit>
        <trans-unit id="025e0471d3315a226930949e631a17bb911bf9c2" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#configuring-source-sets&quot;&gt;source sets&lt;/a&gt; and their &lt;a href=&quot;#adding-dependencies&quot;&gt;dependencies&lt;/a&gt; are then configured as follows:</source>
          <target state="translated">그런 다음 &lt;a href=&quot;#configuring-source-sets&quot;&gt;소스 세트&lt;/a&gt; 및 해당 &lt;a href=&quot;#adding-dependencies&quot;&gt;종속성&lt;/a&gt; 은 다음과 같이 구성됩니다.</target>
        </trans-unit>
        <trans-unit id="587688423378c35c59750f8053e3e7120acd7a77" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;-c-pointed/index&quot;&gt;CPointed&lt;/a&gt; without any specified interpretation.</source>
          <target state="translated">&lt;a href=&quot;-c-pointed/index&quot;&gt;CPointed&lt;/a&gt; 어떤 지정된 해석하지 않고.</target>
        </trans-unit>
        <trans-unit id="d6d7555b1e73df12c61cc2d2ea015a73f43aed2f" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../-c-pointed/index&quot;&gt;CPointed&lt;/a&gt; without any specified interpretation.</source>
          <target state="translated">&lt;a href=&quot;../-c-pointed/index&quot;&gt;CPointed&lt;/a&gt; 어떤 지정된 해석하지 않고.</target>
        </trans-unit>
        <trans-unit id="e54545b48334a1124feb75af3b7057b37b313a69" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../../api/latest/jvm/stdlib/kotlin.collections/minus-assign&quot;&gt;&lt;code&gt;minusAssign&lt;/code&gt;&lt;/a&gt; (&lt;code&gt;-=&lt;/code&gt;) operator is also available for mutable maps.</source>
          <target state="translated">&lt;a href=&quot;../../api/latest/jvm/stdlib/kotlin.collections/minus-assign&quot;&gt; &lt;code&gt;minusAssign&lt;/code&gt; &lt;/a&gt; ( &lt;code&gt;-=&lt;/code&gt; ) 연산자는 가변지도를 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="4ff365b4410b0b6619038682a29eefb850097313" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../../api/latest/jvm/stdlib/kotlin/-dsl-marker/index&quot;&gt;&lt;code&gt;@DslMarker&lt;/code&gt;&lt;/a&gt; annotation allows to restrict the use of receivers from outer scopes in a DSL context. Consider the canonical &lt;a href=&quot;type-safe-builders&quot;&gt;HTML builder example&lt;/a&gt;:</source>
          <target state="translated">&lt;a href=&quot;../../api/latest/jvm/stdlib/kotlin/-dsl-marker/index&quot;&gt; &lt;code&gt;@DslMarker&lt;/code&gt; 의&lt;/a&gt; 주석은 DSL 문맥에서 외부 범위에서 수신기의 사용을 제한 할 수 있습니다. 표준 &lt;a href=&quot;type-safe-builders&quot;&gt;HTML 빌더 예제를&lt;/a&gt; 고려하십시오 .</target>
        </trans-unit>
        <trans-unit id="0ed846a235f919618387ac6874100bd335e7cf20" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../../reference/native/c_interop&quot;&gt;C Interop documentation&lt;/a&gt; documentation covers more advanced scenarios of the interop.</source>
          <target state="translated">&lt;a href=&quot;../../reference/native/c_interop&quot;&gt;C Interop를 문서의&lt;/a&gt; 문서는 상호 운용성의 고급 시나리오를 다룹니다.</target>
        </trans-unit>
        <trans-unit id="1b6d8c3337d9451276257f3dd3c6b569bd207944" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../tutorials/httpservlets&quot;&gt;Creating Web Applications with Http Servlets&lt;/a&gt; and &lt;a href=&quot;../tutorials/spring-boot-restful&quot;&gt;Creating a RESTful Web Service with Spring Boot&lt;/a&gt; tutorials show you how you can build and run very small Web applications in Kotlin.</source>
          <target state="translated">&lt;a href=&quot;../tutorials/httpservlets&quot;&gt;HTTP를 서블릿과 웹 응용 프로그램 생성&lt;/a&gt; 및 &lt;a href=&quot;../tutorials/spring-boot-restful&quot;&gt;봄 부트와 RESTful 웹 서비스를 만들기&lt;/a&gt; 튜토리얼 구축하고 코 틀린에 아주 작은 웹 응용 프로그램을 실행할 수있는 방법을 보여줍니다.</target>
        </trans-unit>
        <trans-unit id="370b9ddcfe0daa7a4e64218bc3548eec2e892b70" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;building-mpp-with-gradle#adding-dependencies&quot;&gt;dependencies configuration&lt;/a&gt; has been changed; dependencies are now specified separately for each source root.</source>
          <target state="translated">&lt;a href=&quot;building-mpp-with-gradle#adding-dependencies&quot;&gt;종속성 구성이&lt;/a&gt; 변경되었다; 종속성은 이제 각 소스 루트에 대해 별도로 지정됩니다.</target>
        </trans-unit>
        <trans-unit id="674f31521000a6f54abe7364383ba3624d590692" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;create-temp-dir#kotlin.io%24createTempDir(kotlin.String,%20kotlin.String?,%20java.io.File?)/prefix&quot;&gt;prefix&lt;/a&gt; argument, if specified, must be at least three characters long. It is recommended that the prefix be a short, meaningful string such as &quot;job&quot; or &quot;mail&quot;.</source>
          <target state="translated">&lt;a href=&quot;create-temp-dir#kotlin.io%24createTempDir(kotlin.String,%20kotlin.String?,%20java.io.File?)/prefix&quot;&gt;접두사&lt;/a&gt; 인수가 지정된 경우, 긴 3 자 이상이어야합니다. 접두사는 &quot;job&quot;또는 &quot;mail&quot;과 같이 짧고 의미있는 문자열 인 것이 좋습니다.</target>
        </trans-unit>
        <trans-unit id="232e0eee7b10204645b3dd32191de6618efcf17f" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;create-temp-file#kotlin.io%24createTempFile(kotlin.String,%20kotlin.String?,%20java.io.File?)/prefix&quot;&gt;prefix&lt;/a&gt; argument, if specified, must be at least three characters long. It is recommended that the prefix be a short, meaningful string such as &quot;job&quot; or &quot;mail&quot;.</source>
          <target state="translated">&lt;a href=&quot;create-temp-file#kotlin.io%24createTempFile(kotlin.String,%20kotlin.String?,%20java.io.File?)/prefix&quot;&gt;접두사&lt;/a&gt; 인수가 지정된 경우, 긴 3 자 이상이어야합니다. 접두사는 &quot;job&quot;또는 &quot;mail&quot;과 같이 짧고 의미있는 문자열 인 것이 좋습니다.</target>
        </trans-unit>
        <trans-unit id="269230aa3731ce52c181b4cdd4ea09cfe0397b67" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;down-to#kotlin.ranges%24downTo%28kotlin.Int%2C+kotlin.Byte%29%2Fto&quot;&gt;to&lt;/a&gt; value should be less than or equal to &lt;code&gt;this&lt;/code&gt; value. If the &lt;a href=&quot;down-to#kotlin.ranges%24downTo%28kotlin.Int%2C+kotlin.Byte%29%2Fto&quot;&gt;to&lt;/a&gt; value is greater than &lt;code&gt;this&lt;/code&gt; value the returned progression is empty.</source>
          <target state="translated">&lt;a href=&quot;down-to#kotlin.ranges%24downTo%28kotlin.Int%2C+kotlin.Byte%29%2Fto&quot;&gt;에&lt;/a&gt; 값 미만 또는 동일해야 &lt;code&gt;this&lt;/code&gt; 값. 경우 &lt;a href=&quot;down-to#kotlin.ranges%24downTo%28kotlin.Int%2C+kotlin.Byte%29%2Fto&quot;&gt;에&lt;/a&gt; 값이보다 큰 경우 &lt;code&gt;this&lt;/code&gt; 값을 돌려 진행은 비어 있습니다.</target>
        </trans-unit>
        <trans-unit id="cedb826c5703fb7b6739f64d401e4c303edac3fd" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;down-to#kotlin.ranges%24downTo(kotlin.Int,%20kotlin.Byte)/to&quot;&gt;to&lt;/a&gt; value should be less than or equal to &lt;code&gt;this&lt;/code&gt; value. If the &lt;a href=&quot;down-to#kotlin.ranges%24downTo(kotlin.Int,%20kotlin.Byte)/to&quot;&gt;to&lt;/a&gt; value is greater than &lt;code&gt;this&lt;/code&gt; value the returned progression is empty.</source>
          <target state="translated">&lt;a href=&quot;down-to#kotlin.ranges%24downTo(kotlin.Int,%20kotlin.Byte)/to&quot;&gt;에&lt;/a&gt; 값 미만 또는 동일해야 &lt;code&gt;this&lt;/code&gt; 값. 경우 &lt;a href=&quot;down-to#kotlin.ranges%24downTo(kotlin.Int,%20kotlin.Byte)/to&quot;&gt;에&lt;/a&gt; 값이보다 큰 경우 &lt;code&gt;this&lt;/code&gt; 값을 돌려 진행은 비어 있습니다.</target>
        </trans-unit>
        <trans-unit id="742e049bae3776c4fe6fe85ca2d3d815ec2c3864" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;group-by-to#kotlin.sequences%24groupByTo%28kotlin.sequences.Sequence%28%28kotlin.sequences.groupByTo.T%29%29%2C+kotlin.sequences.groupByTo.M%2C+kotlin.Function1%28%28kotlin.sequences.groupByTo.T%2C+kotlin.sequences.groupByTo.K%29%29%29%2Fdestination&quot;&gt;destination&lt;/a&gt; map.</source>
          <target state="translated">&lt;a href=&quot;group-by-to#kotlin.sequences%24groupByTo%28kotlin.sequences.Sequence%28%28kotlin.sequences.groupByTo.T%29%29%2C+kotlin.sequences.groupByTo.M%2C+kotlin.Function1%28%28kotlin.sequences.groupByTo.T%2C+kotlin.sequences.groupByTo.K%29%29%29%2Fdestination&quot;&gt;대상&lt;/a&gt; 지도.</target>
        </trans-unit>
        <trans-unit id="c384276c1494f8a4d389142695a22613ee5962a0" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;group-by-to#kotlin.sequences%24groupByTo%28kotlin.sequences.Sequence%28%28kotlin.sequences.groupByTo.T%29%29%2C+kotlin.sequences.groupByTo.M%2C+kotlin.Function1%28%28kotlin.sequences.groupByTo.T%2C+kotlin.sequences.groupByTo.K%29%29%2C+kotlin.Function1%28%28kotlin.sequences.groupByTo.T%2C+kotlin.sequences.groupByTo.V%29%29%29%2Fdestination&quot;&gt;destination&lt;/a&gt; map.</source>
          <target state="translated">&lt;a href=&quot;group-by-to#kotlin.sequences%24groupByTo%28kotlin.sequences.Sequence%28%28kotlin.sequences.groupByTo.T%29%29%2C+kotlin.sequences.groupByTo.M%2C+kotlin.Function1%28%28kotlin.sequences.groupByTo.T%2C+kotlin.sequences.groupByTo.K%29%29%2C+kotlin.Function1%28%28kotlin.sequences.groupByTo.T%2C+kotlin.sequences.groupByTo.V%29%29%29%2Fdestination&quot;&gt;대상&lt;/a&gt; 지도.</target>
        </trans-unit>
        <trans-unit id="5d95b84298d2eab336155e81f552bfaa2e8cad8d" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;group-by-to#kotlin.sequences%24groupByTo(kotlin.sequences.Sequence((kotlin.sequences.groupByTo.T)),%20kotlin.sequences.groupByTo.M,%20kotlin.Function1((kotlin.sequences.groupByTo.T,%20kotlin.sequences.groupByTo.K)))/destination&quot;&gt;destination&lt;/a&gt; map.</source>
          <target state="translated">&lt;a href=&quot;group-by-to#kotlin.sequences%24groupByTo(kotlin.sequences.Sequence((kotlin.sequences.groupByTo.T)),%20kotlin.sequences.groupByTo.M,%20kotlin.Function1((kotlin.sequences.groupByTo.T,%20kotlin.sequences.groupByTo.K)))/destination&quot;&gt;대상&lt;/a&gt; 지도.</target>
        </trans-unit>
        <trans-unit id="30431003356faec04f84a3163d4307b1d6bea476" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;group-by-to#kotlin.sequences%24groupByTo(kotlin.sequences.Sequence((kotlin.sequences.groupByTo.T)),%20kotlin.sequences.groupByTo.M,%20kotlin.Function1((kotlin.sequences.groupByTo.T,%20kotlin.sequences.groupByTo.K)),%20kotlin.Function1((kotlin.sequences.groupByTo.T,%20kotlin.sequences.groupByTo.V)))/destination&quot;&gt;destination&lt;/a&gt; map.</source>
          <target state="translated">&lt;a href=&quot;group-by-to#kotlin.sequences%24groupByTo(kotlin.sequences.Sequence((kotlin.sequences.groupByTo.T)),%20kotlin.sequences.groupByTo.M,%20kotlin.Function1((kotlin.sequences.groupByTo.T,%20kotlin.sequences.groupByTo.K)),%20kotlin.Function1((kotlin.sequences.groupByTo.T,%20kotlin.sequences.groupByTo.V)))/destination&quot;&gt;대상&lt;/a&gt; 지도.</target>
        </trans-unit>
        <trans-unit id="b8579547a2da389c681d511e85d24ffda687a3b9" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;http://www.github.com/kotlin/kotlinx.html&quot;&gt;kotlinx.html library&lt;/a&gt; provides the ability to generate DOM elements using statically typed HTML builders (and besides JavaScript, it is even available on the JVM target!) To use the library, we need to include the corresponding repository and dependency to our &lt;code&gt;build.gradle.kts&lt;/code&gt; file:</source>
          <target state="translated">&lt;a href=&quot;http://www.github.com/kotlin/kotlinx.html&quot;&gt;kotlinx.html 라이브러리가&lt;/a&gt; 정적으로 입력 된 HTML 빌더를 사용하여 DOM 요소를 생성 할 수있는 기능을 제공합니다 (자바 스크립트 외에, 그것은 JVM의 대상도 볼 수 있습니다!) 라이브러리를 사용하려면, 우리는 우리의에 해당하는 저장소 및 의존성 포함 할 필요가 &lt;code&gt;build.gradle.kts&lt;/code&gt; 파일 :</target>
        </trans-unit>
        <trans-unit id="c60c5bfb4e99d5eeb15d99db1ac41367610d72e8" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;http://www.github.com/kotlin/kotlinx.html&quot;&gt;kotlinx.html library&lt;/a&gt; provides the ability to generate DOM using statically typed HTML builders. The library is available when targeting the JVM as well as JavaScript. To use the library we need to include the corresponding dependency. In the case of Gradle this would be</source>
          <target state="translated">&lt;a href=&quot;http://www.github.com/kotlin/kotlinx.html&quot;&gt;kotlinx.html 라이브러리는&lt;/a&gt; 정적으로 입력 된 HTML 빌더를 사용하여 DOM을 생성 할 수있는 기능을 제공합니다. 라이브러리는 JavaScript뿐만 아니라 JVM을 대상으로 할 때 사용할 수 있습니다. 라이브러리를 사용하려면 해당 종속성을 포함해야합니다. Gradle의 경우 이것은</target>
        </trans-unit>
        <trans-unit id="11ff0e8cd4fdb0fd27629f6a7e687a0b18080e1a" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;https://aalmiray.github.io/jsr-305/apidocs/javax/annotation/Nonnull.html&quot;&gt;&lt;code&gt;@Nonnull&lt;/code&gt;&lt;/a&gt; annotation defined in &lt;a href=&quot;https://jcp.org/en/jsr/detail?id=305&quot;&gt;JSR-305&lt;/a&gt; is supported for denoting nullability of Java types.</source>
          <target state="translated">&lt;a href=&quot;https://aalmiray.github.io/jsr-305/apidocs/javax/annotation/Nonnull.html&quot;&gt; &lt;code&gt;@Nonnull&lt;/code&gt; &lt;/a&gt; 에 정의 된 주석 &lt;a href=&quot;https://jcp.org/en/jsr/detail?id=305&quot;&gt;JSR-305은&lt;/a&gt; Java 유형의 Null 허용 여부를 나타내는 지원됩니다.</target>
        </trans-unit>
        <trans-unit id="a931a42af218b74ddfa5646228c068094e9e0035" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;https://developer.android.com/topic/libraries/data-binding/index.html&quot;&gt;Data Binding Library&lt;/a&gt; allows you to bind your application data to the layouts in a concise way.</source>
          <target state="translated">&lt;a href=&quot;https://developer.android.com/topic/libraries/data-binding/index.html&quot;&gt;데이터 바인딩 라이브러리&lt;/a&gt; 는 간결한 방식의 레이아웃에 응용 프로그램 데이터를 바인딩 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="a2b7c849d9b50965b814a88b2bb1cbbfb44ead82" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;https://en.wikipedia.org/wiki/Delegation_pattern&quot;&gt;Delegation pattern&lt;/a&gt; has proven to be a good alternative to implementation inheritance, and Kotlin supports it natively requiring zero boilerplate code. A class &lt;code&gt;Derived&lt;/code&gt; can implement an interface &lt;code&gt;Base&lt;/code&gt; by delegating all of its public members to a specified object:</source>
          <target state="translated">&lt;a href=&quot;https://en.wikipedia.org/wiki/Delegation_pattern&quot;&gt;위임 패턴을&lt;/a&gt; 구현 상속에 좋은 대안이 될 입증하고 있으며, 코 틀린은 기본적으로 제로 상용구 코드를 필요로 지원합니다. &lt;code&gt;Derived&lt;/code&gt; 클래스 는 모든 공용 멤버를 지정된 객체에 위임 하여 인터페이스 &lt;code&gt;Base&lt;/code&gt; 를 구현할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="89d682e482c895868a37ff624bc3eb18d04bf269" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;https://github.com/JetBrains/kotlin-native/blob/master/INTEROP.md&quot;&gt;C Interop documentation&lt;/a&gt; documentation covers more advanced scenarios of the interop</source>
          <target state="translated">&lt;a href=&quot;https://github.com/JetBrains/kotlin-native/blob/master/INTEROP.md&quot;&gt;C Interop를 문서의&lt;/a&gt; 문서는 상호 운용성의 고급 시나리오를 커버</target>
        </trans-unit>
        <trans-unit id="1238852d879c2d710110f6784edd1cb93433787e" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;https://github.com/JetBrains/kotlin-native/blob/master/INTEROP.md&quot;&gt;C Interop documentation&lt;/a&gt; documentation covers more advanced scenarios of the interop.</source>
          <target state="translated">&lt;a href=&quot;https://github.com/JetBrains/kotlin-native/blob/master/INTEROP.md&quot;&gt;C Interop를 문서의&lt;/a&gt; 문서는 상호 운용성의 고급 시나리오를 다룹니다.</target>
        </trans-unit>
        <trans-unit id="ad07c99f0aec0609e4c5ce0e6d68e85b21cca8ad" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;https://github.com/ilmat192/kotlin-native-serialization-sample&quot;&gt;example project&lt;/a&gt; for details.</source>
          <target state="translated">자세한 내용 은 &lt;a href=&quot;https://github.com/ilmat192/kotlin-native-serialization-sample&quot;&gt;예제 프로젝트&lt;/a&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="ed3b8b8f640f1bc7c5c2be4b375d8acbd62a9be8" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines.channels/-receive-channel/on-receive.html&quot;&gt;onReceive&lt;/a&gt; clause in &lt;code&gt;select&lt;/code&gt; fails when the channel is closed causing the corresponding &lt;code&gt;select&lt;/code&gt; to throw an exception. We can use &lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines.channels/on-receive-or-null.html&quot;&gt;onReceiveOrNull&lt;/a&gt; clause to perform a specific action when the channel is closed. The following example also shows that &lt;code&gt;select&lt;/code&gt; is an expression that returns the result of its selected clause:</source>
          <target state="translated">채널이 닫히면 &lt;code&gt;select&lt;/code&gt; 의 &lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines.channels/-receive-channel/on-receive.html&quot;&gt;onReceive&lt;/a&gt; 절이 실패하여 해당 &lt;code&gt;select&lt;/code&gt; 에서 예외가 발생합니다. 채널이 닫힐 때 &lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines.channels/on-receive-or-null.html&quot;&gt;onReceiveOrNull&lt;/a&gt; 절을 사용하여 특정 작업을 수행 할 수 있습니다 . 다음 예제는 또한 &lt;code&gt;select&lt;/code&gt; 가 선택된 절의 결과를 리턴하는 표현식임을 보여줍니다 .</target>
        </trans-unit>
        <trans-unit id="e1ea544c54d470acdd2e4b26e7994a2782ee6c91" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines.flow/catch.html&quot;&gt;catch&lt;/a&gt; intermediate operator, honoring exception transparency, catches only upstream exceptions (that is an exception from all the operators above &lt;code&gt;catch&lt;/code&gt;, but not below it). If the block in &lt;code&gt;collect { ... }&lt;/code&gt; (placed below &lt;code&gt;catch&lt;/code&gt;) throws an exception then it escapes:</source>
          <target state="translated">&lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines.flow/catch.html&quot;&gt;캐치&lt;/a&gt; 중간 운영자는, 예외 투명성을 기리는, (위의 모든 사업자 예외입니다 만 업스트림 예외를 캐치 &lt;code&gt;catch&lt;/code&gt; 하지만 그 아래). &lt;code&gt;collect { ... }&lt;/code&gt; ( &lt;code&gt;catch&lt;/code&gt; 아래 배치 ) 의 블록 이 예외를 발생 시키면 이스케이프됩니다.</target>
        </trans-unit>
        <trans-unit id="04a54154f282527f51deac9433d1d87ac3f8758a" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines.flow/launch-in.html&quot;&gt;launchIn&lt;/a&gt; terminal operator comes in handy here. By replacing &lt;code&gt;collect&lt;/code&gt; with &lt;code&gt;launchIn&lt;/code&gt; we can launch a collection of the flow in a separate coroutine, so that execution of further code immediately continues:</source>
          <target state="translated">&lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines.flow/launch-in.html&quot;&gt;launchIn&lt;/a&gt; 터미널 운영자는 여기에 유용합니다. &lt;code&gt;collect&lt;/code&gt; 를 &lt;code&gt;launchIn&lt;/code&gt; 으로 대체 하면 별도의 코 루틴에서 흐름 컬렉션을 시작할 수 있으므로 추가 코드 실행이 즉시 계속됩니다.</target>
        </trans-unit>
        <trans-unit id="07edc2d6744fd7b7c26ec24ddbddd2605821ced8" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines.flow/on-completion.html&quot;&gt;onCompletion&lt;/a&gt; operator, unlike &lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines.flow/catch.html&quot;&gt;catch&lt;/a&gt;, does not handle the exception. As we can see from the above example code, the exception still flows downstream. It will be delivered to further &lt;code&gt;onCompletion&lt;/code&gt; operators and can be handled with a &lt;code&gt;catch&lt;/code&gt; operator.</source>
          <target state="translated">&lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines.flow/on-completion.html&quot;&gt;onCompletion의&lt;/a&gt; 운영자는 달리 &lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines.flow/catch.html&quot;&gt;캐치는&lt;/a&gt; , 예외를 처리하지 않습니다. 위의 예제 코드에서 볼 수 있듯이 예외는 여전히 다운 스트림으로 흐릅니다. 추가 &lt;code&gt;onCompletion&lt;/code&gt; 연산자 에게 전달되며 &lt;code&gt;catch&lt;/code&gt; 연산자 로 처리 할 수 ​​있습니다 .</target>
        </trans-unit>
        <trans-unit id="7b2b6bd69393d0995b1d531e59de6e1690650085" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/-dispatchers/-unconfined.html&quot;&gt;Dispatchers.Unconfined&lt;/a&gt; coroutine dispatcher starts a coroutine in the caller thread, but only until the first suspension point. After suspension it resumes the coroutine in the thread that is fully determined by the suspending function that was invoked. The unconfined dispatcher is appropriate for coroutines which neither consume CPU time nor update any shared data (like UI) confined to a specific thread.</source>
          <target state="translated">&lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/-dispatchers/-unconfined.html&quot;&gt;Dispatchers.Unconfined&lt;/a&gt; 코 루틴 운영자 호출자 스레드 코 루틴을 시작하지만, 첫 번째 정지 지점까지. 일시 중단 후 호출 된 일시 중단 함수에 의해 완전히 결정된 스레드에서 코 루틴을 다시 시작합니다. 제한되지 않은 디스패처는 CPU 시간을 소비하거나 특정 스레드에 제한된 공유 데이터 (예 : UI)를 업데이트하지 않는 코 루틴에 적합합니다.</target>
        </trans-unit>
        <trans-unit id="567140fae1a9d885e6f93737a3b69b522b5149e8" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/-dispatchers/-unconfined.html&quot;&gt;Dispatchers.Unconfined&lt;/a&gt; coroutine dispatcher starts coroutine in the caller thread, but only until the first suspension point. After suspension it resumes in the thread that is fully determined by the suspending function that was invoked. Unconfined dispatcher is appropriate when coroutine does not consume CPU time nor updates any shared data (like UI) that is confined to a specific thread.</source>
          <target state="translated">는 &lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/-dispatchers/-unconfined.html&quot;&gt;Dispatchers.Unconfined&lt;/a&gt; 코 루틴 운영자 시작 호출자 스레드 코 루틴, 오직 첫 번째 정지 지점까지. 서스펜션 후 호출 된 일시 중단 기능에 의해 완전히 판별 된 스레드에서 재개됩니다. 제한되지 않은 디스패처는 코 루틴이 CPU 시간을 소비하지 않거나 특정 스레드에 국한된 공유 데이터 (예 : UI)를 업데이트하지 않는 경우에 적합합니다.</target>
        </trans-unit>
        <trans-unit id="2c62562cc26b6319588208cc31aa39bb7081cc62" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/-supervisor-job.html&quot;&gt;SupervisorJob&lt;/a&gt; can be used for these purposes. It is similar to a regular &lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/-job.html&quot;&gt;Job&lt;/a&gt; with the only exception that cancellation is propagated only downwards. This can easily be demonstrated using the following example:</source>
          <target state="translated">&lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/-supervisor-job.html&quot;&gt;SupervisorJob는&lt;/a&gt; 이러한 목적을 위해 이용 될 수있다. 취소가 아래쪽으로 만 전파된다는 점을 제외 하면 일반 &lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/-job.html&quot;&gt;작업&lt;/a&gt; 과 유사합니다 . 다음 예제를 사용하여 쉽게 설명 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="2fa4aa3d9338fab053ab6c6470a7bf2907d31359" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;https://kotlinlang.org/api/latest/kotlin.test/index.html&quot;&gt;&lt;code&gt;kotlin.test&lt;/code&gt; API&lt;/a&gt; is available for multiplatform tests. When you &lt;a href=&quot;mpp-create-lib&quot;&gt;create a multiplatform project&lt;/a&gt;, the Project Wizard automatically adds test dependencies to common and platform-specific source sets.</source>
          <target state="translated">&lt;a href=&quot;https://kotlinlang.org/api/latest/kotlin.test/index.html&quot;&gt; &lt;code&gt;kotlin.test&lt;/code&gt; API는&lt;/a&gt; 멀티 플랫폼 테스트를 사용할 수 있습니다. &lt;a href=&quot;mpp-create-lib&quot;&gt;다중 플랫폼 프로젝트&lt;/a&gt; 를 만들 때 프로젝트 마법사는 공통 및 플랫폼 별 소스 세트에 테스트 종속성을 자동으로 추가합니다.</target>
        </trans-unit>
        <trans-unit id="63c0508b2176acb0adebd9fcfe4c34e271e74623" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;https://kotlinlang.org/api/latest/kotlin.test/index.html&quot;&gt;&lt;code&gt;kotlin.test&lt;/code&gt; API&lt;/a&gt; is available for multiplatform tests. When you &lt;a href=&quot;mpp-create-lib&quot;&gt;create a multiplatform project&lt;/a&gt;, the Project Wizard automatically adds test dependencies to common and platform-specific source sets. If you didn&amp;rsquo;t use the Project Wizard to create your project, you can &lt;a href=&quot;using-gradle#set-dependencies-on-test-libraries&quot;&gt;add the dependencies manually&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;https://kotlinlang.org/api/latest/kotlin.test/index.html&quot;&gt; &lt;code&gt;kotlin.test&lt;/code&gt; API는&lt;/a&gt; 멀티 플랫폼 테스트를 사용할 수 있습니다. &lt;a href=&quot;mpp-create-lib&quot;&gt;다중 플랫폼 프로젝트&lt;/a&gt; 를 만들 때 프로젝트 마법사는 공통 및 플랫폼 별 소스 세트에 테스트 종속성을 자동으로 추가합니다. 프로젝트 마법사를 사용하여 프로젝트를 생성하지 않은 경우 &lt;a href=&quot;using-gradle#set-dependencies-on-test-libraries&quot;&gt;종속성을 수동으로 추가&lt;/a&gt; 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="fa80881a041c6af7b81990bc6442fd43157648c6" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;https://kotlinlang.org/api/latest/kotlin.test/index.html&quot;&gt;&lt;code&gt;kotlin.test&lt;/code&gt; API&lt;/a&gt; is available for testing different Kotlin projects.</source>
          <target state="translated">&lt;a href=&quot;https://kotlinlang.org/api/latest/kotlin.test/index.html&quot;&gt; &lt;code&gt;kotlin.test&lt;/code&gt; API는&lt;/a&gt; 다른 코 틀린 프로젝트를 테스트하는 데 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="97cb445124dce985503ca787c74149658f56ba41" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;https://kotlinlang.org/api/latest/kotlin.test/index.html&quot;&gt;&lt;code&gt;kotlin.test&lt;/code&gt; API&lt;/a&gt; is availble for multiplatform tests. Add the &lt;code&gt;kotlin-test-common&lt;/code&gt; and &lt;code&gt;kotlin-test-annotations-common&lt;/code&gt; dependencies to &lt;code&gt;commonTest&lt;/code&gt; to use the assertion functions like &lt;code&gt;kotlin.test.assertTrue(...)&lt;/code&gt;</source>
          <target state="translated">&lt;a href=&quot;https://kotlinlang.org/api/latest/kotlin.test/index.html&quot;&gt; &lt;code&gt;kotlin.test&lt;/code&gt; API는&lt;/a&gt; 멀티 플랫폼 테스트를위한 availble을합니다. &lt;code&gt;kotlin.test.assertTrue(...)&lt;/code&gt; 와 같은 어설 션 함수를 사용 하려면 &lt;code&gt;kotlin-test-common&lt;/code&gt; 및 &lt;code&gt;kotlin-test-annotations-common&lt;/code&gt; 종속성을 &lt;code&gt;commonTest&lt;/code&gt; 에 추가하십시오 .</target>
        </trans-unit>
        <trans-unit id="bf9a347ca7004344d61319e9e4d5bb8c2e75274c" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;https://ktor.io/&quot;&gt;Ktor framework&lt;/a&gt; is suitable for building asynchronous servers and clients in connected systems.</source>
          <target state="translated">&lt;a href=&quot;https://ktor.io/&quot;&gt;Ktor 프레임 워크는&lt;/a&gt; 연결된 시스템에서 비동기 서버와 클라이언트를 구축하기위한 적합합니다.</target>
        </trans-unit>
        <trans-unit id="0194a3aa4b12c9468ece4f08b6ba21815b0e08f0" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;index&quot;&gt;CPointed&lt;/a&gt; without any specified interpretation.</source>
          <target state="translated">&lt;a href=&quot;index&quot;&gt;CPointed&lt;/a&gt; 어떤 지정된 해석하지 않고.</target>
        </trans-unit>
        <trans-unit id="5516127ff85b6c7f18df858d84a44a3f3a5c0417" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;index&quot;&gt;DeepRecursiveFunction&lt;/a&gt; takes one parameter of type &lt;a href=&quot;index#T&quot;&gt;T&lt;/a&gt; and returns a result of type &lt;a href=&quot;index#R&quot;&gt;R&lt;/a&gt;. The block of code defines the body of a recursive function. In this block &lt;a href=&quot;../-deep-recursive-scope/call-recursive&quot;&gt;callRecursive&lt;/a&gt; function can be used to make a recursive call to the declared function. Other instances of &lt;a href=&quot;index&quot;&gt;DeepRecursiveFunction&lt;/a&gt; can be called in this scope with &lt;code&gt;callRecursive&lt;/code&gt; extension, too.</source>
          <target state="translated">&lt;a href=&quot;index&quot;&gt;DeepRecursiveFunction는&lt;/a&gt; 유형의 하나 개의 매개 변수 소요 &lt;a href=&quot;index#T&quot;&gt;T를&lt;/a&gt; 하고 형의 결과를 반환 &lt;a href=&quot;index#R&quot;&gt;R을&lt;/a&gt; . 코드 블록은 재귀 함수의 본문을 정의합니다. 이 블록에서 &lt;a href=&quot;../-deep-recursive-scope/call-recursive&quot;&gt;callRecursive&lt;/a&gt; 함수는 선언 된 함수에 대한 재귀 호출을 만드는 데 사용할 수 있습니다. &lt;a href=&quot;index&quot;&gt;DeepRecursiveFunction의&lt;/a&gt; 다른 인스턴스 도 &lt;code&gt;callRecursive&lt;/code&gt; 확장을 사용 하여이 범위에서 호출 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="ba1a7f3bddcefc94310813b31ca6383df0bda5ae" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;js-ir-compiler&quot;&gt;IR backend for Kotlin/JS&lt;/a&gt;, which currently has &lt;a href=&quot;evolution/components-stability&quot;&gt;Alpha&lt;/a&gt; stability, provides some new functionality specific to the Kotlin/JS target which is focused around the generated code size through dead code elimination, and improved interoperation with JavaScript and TypeScript, among others.</source>
          <target state="translated">&lt;a href=&quot;js-ir-compiler&quot;&gt;코 틀린 / JS에 대한 IR 백엔드&lt;/a&gt; 현재 가지고 &lt;a href=&quot;evolution/components-stability&quot;&gt;알파&lt;/a&gt; 안정성이 중에서도 JavaScript 및 타이프, 죽은 코드 제거, 향상된 연동을 통하여 생성 된 코드 사이즈의 주위 집중되는 코 틀린 / JS 대상에 새로운 기능의 특정을 제공한다.</target>
        </trans-unit>
        <trans-unit id="e2ef6f826701c72898d6d25192a84da10d181630" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;js-ir-compiler&quot;&gt;new Kotlin/JS IR compiler&lt;/a&gt; (currently with &lt;a href=&quot;evolution/components-stability&quot;&gt;Alpha&lt;/a&gt; stability) comes with a number of improvements over the current default compiler. For example, it improves the size of generated executables via dead code elimination and makes it smoother to interoperate with the JavaScript ecosystem and its tooling. By generating TypeScript declaration files (d.ts) from Kotlin code, the new compiler makes it easier to create &amp;ldquo;hybrid&amp;rdquo; applications that mix TypeScript and Kotlin code, and leverage code-sharing functionality using Kotlin Multiplatform.</source>
          <target state="translated">&lt;a href=&quot;js-ir-compiler&quot;&gt;새로운 코 틀린 / JS IR 컴파일러&lt;/a&gt; (현재와 &lt;a href=&quot;evolution/components-stability&quot;&gt;알파&lt;/a&gt; 안정성) 현재의 기본 컴파일러를 통해 개선의 번호와 함께 제공됩니다. 예를 들어, 데드 코드 제거를 통해 생성 된 실행 파일의 크기를 개선하고 JavaScript 에코 시스템 및 해당 도구와 원활하게 상호 운용 할 수 있습니다. Kotlin 코드에서 TypeScript 선언 파일 (d.ts)을 생성함으로써 새로운 컴파일러는 TypeScript와 Kotlin 코드를 혼합하는 '하이브리드'애플리케이션을 더 쉽게 만들고 Kotlin Multiplatform을 사용하여 코드 공유 기능을 활용할 수 있도록합니다.</target>
        </trans-unit>
        <trans-unit id="f1f6321a990fb305c59adcbabf8e3830cf1b87ed" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;lazy#kotlin%24lazy%28kotlin.Any%2C+kotlin.Function0%28%28kotlin.lazy.T%29%29%29%2Flock&quot;&gt;lock&lt;/a&gt; parameter is ignored.</source>
          <target state="translated">&lt;a href=&quot;lazy#kotlin%24lazy%28kotlin.Any%2C+kotlin.Function0%28%28kotlin.lazy.T%29%29%29%2Flock&quot;&gt;잠금&lt;/a&gt; 매개 변수는 무시됩니다.</target>
        </trans-unit>
        <trans-unit id="ad29d28adce666b3b0aa95e3d086ef2150c731fc" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;lazy#kotlin%24lazy%28kotlin.LazyThreadSafetyMode%2C+kotlin.Function0%28%28kotlin.lazy.T%29%29%29%2Fmode&quot;&gt;mode&lt;/a&gt; parameter is ignored.</source>
          <target state="translated">&lt;a href=&quot;lazy#kotlin%24lazy%28kotlin.LazyThreadSafetyMode%2C+kotlin.Function0%28%28kotlin.lazy.T%29%29%29%2Fmode&quot;&gt;모드&lt;/a&gt; 매개 변수는 무시됩니다.</target>
        </trans-unit>
        <trans-unit id="65e44082e85c986aa2e19f4034c1939c25816182" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;lazy#kotlin%24lazy(kotlin.Any?,%20kotlin.Function0((kotlin.lazy.T)))/lock&quot;&gt;lock&lt;/a&gt; parameter is ignored.</source>
          <target state="translated">&lt;a href=&quot;lazy#kotlin%24lazy(kotlin.Any?,%20kotlin.Function0((kotlin.lazy.T)))/lock&quot;&gt;잠금&lt;/a&gt; 매개 변수는 무시됩니다.</target>
        </trans-unit>
        <trans-unit id="acac99fbefec8adf034ebe09ae88ed968b1bfb59" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;lazy#kotlin%24lazy(kotlin.LazyThreadSafetyMode,%20kotlin.Function0((kotlin.lazy.T)))/mode&quot;&gt;mode&lt;/a&gt; parameter is ignored.</source>
          <target state="translated">&lt;a href=&quot;lazy#kotlin%24lazy(kotlin.LazyThreadSafetyMode,%20kotlin.Function0((kotlin.lazy.T)))/mode&quot;&gt;모드&lt;/a&gt; 매개 변수는 무시됩니다.</target>
        </trans-unit>
        <trans-unit id="65f4a08157a599a0434e41b121c5f82c757d8345" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;minus#kotlin.collections%24minus%28kotlin.collections.Iterable%28%28kotlin.collections.minus.T%29%29%2C+kotlin.Array%28%28kotlin.collections.minus.T%29%29%29%2Felements&quot;&gt;elements&lt;/a&gt; array may be converted to a &lt;a href=&quot;-hash-set/index#kotlin.collections.HashSet&quot;&gt;HashSet&lt;/a&gt; to speed up the operation, thus the elements are required to have a correct and stable implementation of &lt;code&gt;hashCode()&lt;/code&gt; that doesn't change between successive invocations.</source>
          <target state="translated">&lt;a href=&quot;minus#kotlin.collections%24minus%28kotlin.collections.Iterable%28%28kotlin.collections.minus.T%29%29%2C+kotlin.Array%28%28kotlin.collections.minus.T%29%29%29%2Felements&quot;&gt;소자&lt;/a&gt; 어레이는 전환 될 수있다 &lt;a href=&quot;-hash-set/index#kotlin.collections.HashSet&quot;&gt;HashSet에&lt;/a&gt; 따라서 소자의 정확하고 안정적인 구현이 요구되고, 동작 속도를 &lt;code&gt;hashCode()&lt;/code&gt; 연속 호출 사이에서 변경되지 않는다.</target>
        </trans-unit>
        <trans-unit id="e24be1e2b6e9366f0d91d73c1522fb4cc61453ad" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;minus#kotlin.collections%24minus%28kotlin.collections.Iterable%28%28kotlin.collections.minus.T%29%29%2C+kotlin.collections.Iterable%28%28kotlin.collections.minus.T%29%29%29%2Felements&quot;&gt;elements&lt;/a&gt; collection may be converted to a &lt;a href=&quot;-hash-set/index#kotlin.collections.HashSet&quot;&gt;HashSet&lt;/a&gt; to speed up the operation, thus the elements are required to have a correct and stable implementation of &lt;code&gt;hashCode()&lt;/code&gt; that doesn't change between successive invocations.</source>
          <target state="translated">&lt;a href=&quot;minus#kotlin.collections%24minus%28kotlin.collections.Iterable%28%28kotlin.collections.minus.T%29%29%2C+kotlin.collections.Iterable%28%28kotlin.collections.minus.T%29%29%29%2Felements&quot;&gt;요소&lt;/a&gt; 컬렉션은 전환 될 수있다 &lt;a href=&quot;-hash-set/index#kotlin.collections.HashSet&quot;&gt;HashSet에&lt;/a&gt; 따라서 소자의 정확하고 안정적인 구현이 요구되고, 동작 속도를 &lt;code&gt;hashCode()&lt;/code&gt; 연속 호출 사이에서 변경되지 않는다.</target>
        </trans-unit>
        <trans-unit id="88eac69a24417f0a5acd408bdb0ac168d5ab84f8" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;minus#kotlin.collections%24minus%28kotlin.collections.Iterable%28%28kotlin.collections.minus.T%29%29%2C+kotlin.sequences.Sequence%28%28kotlin.collections.minus.T%29%29%29%2Felements&quot;&gt;elements&lt;/a&gt; sequence may be converted to a &lt;a href=&quot;-hash-set/index#kotlin.collections.HashSet&quot;&gt;HashSet&lt;/a&gt; to speed up the operation, thus the elements are required to have a correct and stable implementation of &lt;code&gt;hashCode()&lt;/code&gt; that doesn't change between successive invocations.</source>
          <target state="translated">&lt;a href=&quot;minus#kotlin.collections%24minus%28kotlin.collections.Iterable%28%28kotlin.collections.minus.T%29%29%2C+kotlin.sequences.Sequence%28%28kotlin.collections.minus.T%29%29%29%2Felements&quot;&gt;요소&lt;/a&gt; 서열은 전환 될 수있다 &lt;a href=&quot;-hash-set/index#kotlin.collections.HashSet&quot;&gt;HashSet에&lt;/a&gt; 따라서 소자의 정확하고 안정적인 구현이 요구되고, 동작 속도를 &lt;code&gt;hashCode()&lt;/code&gt; 연속 호출 사이에서 변경되지 않는다.</target>
        </trans-unit>
        <trans-unit id="4fdc1e3b9cc58343e5c4eb08ebf24ea334f18ce1" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;minus#kotlin.collections%24minus%28kotlin.collections.Set%28%28kotlin.collections.minus.T%29%29%2C+kotlin.Array%28%28kotlin.collections.minus.T%29%29%29%2Felements&quot;&gt;elements&lt;/a&gt; array may be converted to a &lt;a href=&quot;-hash-set/index#kotlin.collections.HashSet&quot;&gt;HashSet&lt;/a&gt; to speed up the operation, thus the elements are required to have a correct and stable implementation of &lt;code&gt;hashCode()&lt;/code&gt; that doesn't change between successive invocations.</source>
          <target state="translated">&lt;a href=&quot;minus#kotlin.collections%24minus%28kotlin.collections.Set%28%28kotlin.collections.minus.T%29%29%2C+kotlin.Array%28%28kotlin.collections.minus.T%29%29%29%2Felements&quot;&gt;소자&lt;/a&gt; 어레이는 전환 될 수있다 &lt;a href=&quot;-hash-set/index#kotlin.collections.HashSet&quot;&gt;HashSet에&lt;/a&gt; 따라서 소자의 정확하고 안정적인 구현이 요구되고, 동작 속도를 &lt;code&gt;hashCode()&lt;/code&gt; 연속 호출 사이에서 변경되지 않는다.</target>
        </trans-unit>
        <trans-unit id="00e3673225dc7616b276e346639c286afc0812ee" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;minus#kotlin.collections%24minus%28kotlin.collections.Set%28%28kotlin.collections.minus.T%29%29%2C+kotlin.collections.Iterable%28%28kotlin.collections.minus.T%29%29%29%2Felements&quot;&gt;elements&lt;/a&gt; collection may be converted to a &lt;a href=&quot;-hash-set/index#kotlin.collections.HashSet&quot;&gt;HashSet&lt;/a&gt; to speed up the operation, thus the elements are required to have a correct and stable implementation of &lt;code&gt;hashCode()&lt;/code&gt; that doesn't change between successive invocations.</source>
          <target state="translated">&lt;a href=&quot;minus#kotlin.collections%24minus%28kotlin.collections.Set%28%28kotlin.collections.minus.T%29%29%2C+kotlin.collections.Iterable%28%28kotlin.collections.minus.T%29%29%29%2Felements&quot;&gt;요소&lt;/a&gt; 컬렉션은 전환 될 수있다 &lt;a href=&quot;-hash-set/index#kotlin.collections.HashSet&quot;&gt;HashSet에&lt;/a&gt; 따라서 소자의 정확하고 안정적인 구현이 요구되고, 동작 속도를 &lt;code&gt;hashCode()&lt;/code&gt; 연속 호출 사이에서 변경되지 않는다.</target>
        </trans-unit>
        <trans-unit id="9bfb6c345d49b612f19ff9859dc63476feb3110d" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;minus#kotlin.collections%24minus%28kotlin.collections.Set%28%28kotlin.collections.minus.T%29%29%2C+kotlin.sequences.Sequence%28%28kotlin.collections.minus.T%29%29%29%2Felements&quot;&gt;elements&lt;/a&gt; sequence may be converted to a &lt;a href=&quot;-hash-set/index#kotlin.collections.HashSet&quot;&gt;HashSet&lt;/a&gt; to speed up the operation, thus the elements are required to have a correct and stable implementation of &lt;code&gt;hashCode()&lt;/code&gt; that doesn't change between successive invocations.</source>
          <target state="translated">&lt;a href=&quot;minus#kotlin.collections%24minus%28kotlin.collections.Set%28%28kotlin.collections.minus.T%29%29%2C+kotlin.sequences.Sequence%28%28kotlin.collections.minus.T%29%29%29%2Felements&quot;&gt;요소&lt;/a&gt; 서열은 전환 될 수있다 &lt;a href=&quot;-hash-set/index#kotlin.collections.HashSet&quot;&gt;HashSet에&lt;/a&gt; 따라서 소자의 정확하고 안정적인 구현이 요구되고, 동작 속도를 &lt;code&gt;hashCode()&lt;/code&gt; 연속 호출 사이에서 변경되지 않는다.</target>
        </trans-unit>
        <trans-unit id="eef0f46e8880f391ca0f135eafed80d7953873e2" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;minus#kotlin.collections%24minus(kotlin.collections.Iterable((kotlin.collections.minus.T)),%20kotlin.Array((kotlin.collections.minus.T)))/elements&quot;&gt;elements&lt;/a&gt; array may be converted to a &lt;a href=&quot;-hash-set/index#kotlin.collections.HashSet&quot;&gt;HashSet&lt;/a&gt; to speed up the operation, thus the elements are required to have a correct and stable implementation of &lt;code&gt;hashCode()&lt;/code&gt; that doesn't change between successive invocations.</source>
          <target state="translated">&lt;a href=&quot;minus#kotlin.collections%24minus(kotlin.collections.Iterable((kotlin.collections.minus.T)),%20kotlin.Array((kotlin.collections.minus.T)))/elements&quot;&gt;소자&lt;/a&gt; 어레이는 전환 될 수있다 &lt;a href=&quot;-hash-set/index#kotlin.collections.HashSet&quot;&gt;HashSet에&lt;/a&gt; 따라서 소자의 정확하고 안정적인 구현이 요구되고, 동작 속도를 &lt;code&gt;hashCode()&lt;/code&gt; 연속 호출 사이에서 변경되지 않는다.</target>
        </trans-unit>
        <trans-unit id="a9357b4fe4ae7edffd3a4348a18308c871d282bd" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;minus#kotlin.collections%24minus(kotlin.collections.Iterable((kotlin.collections.minus.T)),%20kotlin.collections.Iterable((kotlin.collections.minus.T)))/elements&quot;&gt;elements&lt;/a&gt; collection may be converted to a &lt;a href=&quot;-hash-set/index#kotlin.collections.HashSet&quot;&gt;HashSet&lt;/a&gt; to speed up the operation, thus the elements are required to have a correct and stable implementation of &lt;code&gt;hashCode()&lt;/code&gt; that doesn't change between successive invocations.</source>
          <target state="translated">&lt;a href=&quot;minus#kotlin.collections%24minus(kotlin.collections.Iterable((kotlin.collections.minus.T)),%20kotlin.collections.Iterable((kotlin.collections.minus.T)))/elements&quot;&gt;요소&lt;/a&gt; 컬렉션은 전환 될 수있다 &lt;a href=&quot;-hash-set/index#kotlin.collections.HashSet&quot;&gt;HashSet에&lt;/a&gt; 따라서 소자의 정확하고 안정적인 구현이 요구되고, 동작 속도를 &lt;code&gt;hashCode()&lt;/code&gt; 연속 호출 사이에서 변경되지 않는다.</target>
        </trans-unit>
        <trans-unit id="2ef34bb84f8efe0f11198308dcadc0a798d086c0" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;minus#kotlin.collections%24minus(kotlin.collections.Iterable((kotlin.collections.minus.T)),%20kotlin.sequences.Sequence((kotlin.collections.minus.T)))/elements&quot;&gt;elements&lt;/a&gt; sequence may be converted to a &lt;a href=&quot;-hash-set/index#kotlin.collections.HashSet&quot;&gt;HashSet&lt;/a&gt; to speed up the operation, thus the elements are required to have a correct and stable implementation of &lt;code&gt;hashCode()&lt;/code&gt; that doesn't change between successive invocations.</source>
          <target state="translated">&lt;a href=&quot;minus#kotlin.collections%24minus(kotlin.collections.Iterable((kotlin.collections.minus.T)),%20kotlin.sequences.Sequence((kotlin.collections.minus.T)))/elements&quot;&gt;요소&lt;/a&gt; 서열은 전환 될 수있다 &lt;a href=&quot;-hash-set/index#kotlin.collections.HashSet&quot;&gt;HashSet에&lt;/a&gt; 따라서 소자의 정확하고 안정적인 구현이 요구되고, 동작 속도를 &lt;code&gt;hashCode()&lt;/code&gt; 연속 호출 사이에서 변경되지 않는다.</target>
        </trans-unit>
        <trans-unit id="dfb66f4d60f9919dee9be2f66e79310c49bfdeea" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;minus#kotlin.collections%24minus(kotlin.collections.Set((kotlin.collections.minus.T)),%20kotlin.Array((kotlin.collections.minus.T)))/elements&quot;&gt;elements&lt;/a&gt; array may be converted to a &lt;a href=&quot;-hash-set/index#kotlin.collections.HashSet&quot;&gt;HashSet&lt;/a&gt; to speed up the operation, thus the elements are required to have a correct and stable implementation of &lt;code&gt;hashCode()&lt;/code&gt; that doesn't change between successive invocations.</source>
          <target state="translated">&lt;a href=&quot;minus#kotlin.collections%24minus(kotlin.collections.Set((kotlin.collections.minus.T)),%20kotlin.Array((kotlin.collections.minus.T)))/elements&quot;&gt;소자&lt;/a&gt; 어레이는 전환 될 수있다 &lt;a href=&quot;-hash-set/index#kotlin.collections.HashSet&quot;&gt;HashSet에&lt;/a&gt; 따라서 소자의 정확하고 안정적인 구현이 요구되고, 동작 속도를 &lt;code&gt;hashCode()&lt;/code&gt; 연속 호출 사이에서 변경되지 않는다.</target>
        </trans-unit>
        <trans-unit id="c2358033aedf09646b3978114c88919df8cce73a" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;minus#kotlin.collections%24minus(kotlin.collections.Set((kotlin.collections.minus.T)),%20kotlin.collections.Iterable((kotlin.collections.minus.T)))/elements&quot;&gt;elements&lt;/a&gt; collection may be converted to a &lt;a href=&quot;-hash-set/index#kotlin.collections.HashSet&quot;&gt;HashSet&lt;/a&gt; to speed up the operation, thus the elements are required to have a correct and stable implementation of &lt;code&gt;hashCode()&lt;/code&gt; that doesn't change between successive invocations.</source>
          <target state="translated">&lt;a href=&quot;minus#kotlin.collections%24minus(kotlin.collections.Set((kotlin.collections.minus.T)),%20kotlin.collections.Iterable((kotlin.collections.minus.T)))/elements&quot;&gt;요소&lt;/a&gt; 컬렉션은 전환 될 수있다 &lt;a href=&quot;-hash-set/index#kotlin.collections.HashSet&quot;&gt;HashSet에&lt;/a&gt; 따라서 소자의 정확하고 안정적인 구현이 요구되고, 동작 속도를 &lt;code&gt;hashCode()&lt;/code&gt; 연속 호출 사이에서 변경되지 않는다.</target>
        </trans-unit>
        <trans-unit id="422371d5491a08f23ef3ac6338e4abe49c999f7b" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;minus#kotlin.collections%24minus(kotlin.collections.Set((kotlin.collections.minus.T)),%20kotlin.sequences.Sequence((kotlin.collections.minus.T)))/elements&quot;&gt;elements&lt;/a&gt; sequence may be converted to a &lt;a href=&quot;-hash-set/index#kotlin.collections.HashSet&quot;&gt;HashSet&lt;/a&gt; to speed up the operation, thus the elements are required to have a correct and stable implementation of &lt;code&gt;hashCode()&lt;/code&gt; that doesn't change between successive invocations.</source>
          <target state="translated">&lt;a href=&quot;minus#kotlin.collections%24minus(kotlin.collections.Set((kotlin.collections.minus.T)),%20kotlin.sequences.Sequence((kotlin.collections.minus.T)))/elements&quot;&gt;요소&lt;/a&gt; 서열은 전환 될 수있다 &lt;a href=&quot;-hash-set/index#kotlin.collections.HashSet&quot;&gt;HashSet에&lt;/a&gt; 따라서 소자의 정확하고 안정적인 구현이 요구되고, 동작 속도를 &lt;code&gt;hashCode()&lt;/code&gt; 연속 호출 사이에서 변경되지 않는다.</target>
        </trans-unit>
        <trans-unit id="150ad09de77efcf5d7cfbcf006b9f6b89c68e678" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;minus#kotlin.sequences%24minus%28kotlin.sequences.Sequence%28%28kotlin.sequences.minus.T%29%29%2C+kotlin.Array%28%28kotlin.sequences.minus.T%29%29%29%2Felements&quot;&gt;elements&lt;/a&gt; array may be converted to a &lt;a href=&quot;../kotlin.collections/-hash-set/index#kotlin.collections.HashSet&quot;&gt;HashSet&lt;/a&gt; to speed up the operation, thus the elements are required to have a correct and stable implementation of &lt;code&gt;hashCode()&lt;/code&gt; that doesn't change between successive invocations.</source>
          <target state="translated">&lt;a href=&quot;minus#kotlin.sequences%24minus%28kotlin.sequences.Sequence%28%28kotlin.sequences.minus.T%29%29%2C+kotlin.Array%28%28kotlin.sequences.minus.T%29%29%29%2Felements&quot;&gt;소자&lt;/a&gt; 어레이는 전환 될 수있다 &lt;a href=&quot;../kotlin.collections/-hash-set/index#kotlin.collections.HashSet&quot;&gt;HashSet에&lt;/a&gt; 따라서 소자의 정확하고 안정적인 구현이 요구되고, 동작 속도를 &lt;code&gt;hashCode()&lt;/code&gt; 연속 호출 사이에서 변경되지 않는다.</target>
        </trans-unit>
        <trans-unit id="16822a8d7e6589a06d4a74f594278b5199a4c0ac" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;minus#kotlin.sequences%24minus%28kotlin.sequences.Sequence%28%28kotlin.sequences.minus.T%29%29%2C+kotlin.collections.Iterable%28%28kotlin.sequences.minus.T%29%29%29%2Felements&quot;&gt;elements&lt;/a&gt; collection may be converted to a &lt;a href=&quot;../kotlin.collections/-hash-set/index#kotlin.collections.HashSet&quot;&gt;HashSet&lt;/a&gt; to speed up the operation, thus the elements are required to have a correct and stable implementation of &lt;code&gt;hashCode()&lt;/code&gt; that doesn't change between successive invocations.</source>
          <target state="translated">&lt;a href=&quot;minus#kotlin.sequences%24minus%28kotlin.sequences.Sequence%28%28kotlin.sequences.minus.T%29%29%2C+kotlin.collections.Iterable%28%28kotlin.sequences.minus.T%29%29%29%2Felements&quot;&gt;요소&lt;/a&gt; 컬렉션은 전환 될 수있다 &lt;a href=&quot;../kotlin.collections/-hash-set/index#kotlin.collections.HashSet&quot;&gt;HashSet에&lt;/a&gt; 따라서 소자의 정확하고 안정적인 구현이 요구되고, 동작 속도를 &lt;code&gt;hashCode()&lt;/code&gt; 연속 호출 사이에서 변경되지 않는다.</target>
        </trans-unit>
        <trans-unit id="7730285cb3f44afdb3b127e9800e2d48488fce25" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;minus#kotlin.sequences%24minus%28kotlin.sequences.Sequence%28%28kotlin.sequences.minus.T%29%29%2C+kotlin.sequences.Sequence%28%28kotlin.sequences.minus.T%29%29%29%2Felements&quot;&gt;elements&lt;/a&gt; sequence may be converted to a &lt;a href=&quot;../kotlin.collections/-hash-set/index#kotlin.collections.HashSet&quot;&gt;HashSet&lt;/a&gt; to speed up the operation, thus the elements are required to have a correct and stable implementation of &lt;code&gt;hashCode()&lt;/code&gt; that doesn't change between successive invocations.</source>
          <target state="translated">&lt;a href=&quot;minus#kotlin.sequences%24minus%28kotlin.sequences.Sequence%28%28kotlin.sequences.minus.T%29%29%2C+kotlin.sequences.Sequence%28%28kotlin.sequences.minus.T%29%29%29%2Felements&quot;&gt;요소&lt;/a&gt; 서열은 전환 될 수있다 &lt;a href=&quot;../kotlin.collections/-hash-set/index#kotlin.collections.HashSet&quot;&gt;HashSet에&lt;/a&gt; 따라서 소자의 정확하고 안정적인 구현이 요구되고, 동작 속도를 &lt;code&gt;hashCode()&lt;/code&gt; 연속 호출 사이에서 변경되지 않는다.</target>
        </trans-unit>
        <trans-unit id="62d283a260d21c033d8ae6f886e9418e4ce557c2" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;minus#kotlin.sequences%24minus(kotlin.sequences.Sequence((kotlin.sequences.minus.T)),%20kotlin.Array((kotlin.sequences.minus.T)))/elements&quot;&gt;elements&lt;/a&gt; array may be converted to a &lt;a href=&quot;../kotlin.collections/-hash-set/index#kotlin.collections.HashSet&quot;&gt;HashSet&lt;/a&gt; to speed up the operation, thus the elements are required to have a correct and stable implementation of &lt;code&gt;hashCode()&lt;/code&gt; that doesn't change between successive invocations.</source>
          <target state="translated">&lt;a href=&quot;minus#kotlin.sequences%24minus(kotlin.sequences.Sequence((kotlin.sequences.minus.T)),%20kotlin.Array((kotlin.sequences.minus.T)))/elements&quot;&gt;소자&lt;/a&gt; 어레이는 전환 될 수있다 &lt;a href=&quot;../kotlin.collections/-hash-set/index#kotlin.collections.HashSet&quot;&gt;HashSet에&lt;/a&gt; 따라서 소자의 정확하고 안정적인 구현이 요구되고, 동작 속도를 &lt;code&gt;hashCode()&lt;/code&gt; 연속 호출 사이에서 변경되지 않는다.</target>
        </trans-unit>
        <trans-unit id="c922bbe4f99fe85f64acb6a4c239e5a6014544af" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;minus#kotlin.sequences%24minus(kotlin.sequences.Sequence((kotlin.sequences.minus.T)),%20kotlin.collections.Iterable((kotlin.sequences.minus.T)))/elements&quot;&gt;elements&lt;/a&gt; collection may be converted to a &lt;a href=&quot;../kotlin.collections/-hash-set/index#kotlin.collections.HashSet&quot;&gt;HashSet&lt;/a&gt; to speed up the operation, thus the elements are required to have a correct and stable implementation of &lt;code&gt;hashCode()&lt;/code&gt; that doesn't change between successive invocations.</source>
          <target state="translated">&lt;a href=&quot;minus#kotlin.sequences%24minus(kotlin.sequences.Sequence((kotlin.sequences.minus.T)),%20kotlin.collections.Iterable((kotlin.sequences.minus.T)))/elements&quot;&gt;요소&lt;/a&gt; 컬렉션은 전환 될 수있다 &lt;a href=&quot;../kotlin.collections/-hash-set/index#kotlin.collections.HashSet&quot;&gt;HashSet에&lt;/a&gt; 따라서 소자의 정확하고 안정적인 구현이 요구되고, 동작 속도를 &lt;code&gt;hashCode()&lt;/code&gt; 연속 호출 사이에서 변경되지 않는다.</target>
        </trans-unit>
        <trans-unit id="0fac9986e030aa348ad259c660503117d0363441" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;minus#kotlin.sequences%24minus(kotlin.sequences.Sequence((kotlin.sequences.minus.T)),%20kotlin.sequences.Sequence((kotlin.sequences.minus.T)))/elements&quot;&gt;elements&lt;/a&gt; sequence may be converted to a &lt;a href=&quot;../kotlin.collections/-hash-set/index#kotlin.collections.HashSet&quot;&gt;HashSet&lt;/a&gt; to speed up the operation, thus the elements are required to have a correct and stable implementation of &lt;code&gt;hashCode()&lt;/code&gt; that doesn't change between successive invocations.</source>
          <target state="translated">&lt;a href=&quot;minus#kotlin.sequences%24minus(kotlin.sequences.Sequence((kotlin.sequences.minus.T)),%20kotlin.sequences.Sequence((kotlin.sequences.minus.T)))/elements&quot;&gt;요소&lt;/a&gt; 서열은 전환 될 수있다 &lt;a href=&quot;../kotlin.collections/-hash-set/index#kotlin.collections.HashSet&quot;&gt;HashSet에&lt;/a&gt; 따라서 소자의 정확하고 안정적인 구현이 요구되고, 동작 속도를 &lt;code&gt;hashCode()&lt;/code&gt; 연속 호출 사이에서 변경되지 않는다.</target>
        </trans-unit>
        <trans-unit id="da75dd93220ce18b06da9e4f3b66704a6a1b2c1c" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;mpp-dsl-reference#language-settings&quot;&gt;language settings&lt;/a&gt; of &lt;code&gt;jvmMain&lt;/code&gt; and &lt;code&gt;commonMain&lt;/code&gt; should be consistent.</source>
          <target state="translated">&lt;code&gt;jvmMain&lt;/code&gt; 및 &lt;code&gt;commonMain&lt;/code&gt; 의 &lt;a href=&quot;mpp-dsl-reference#language-settings&quot;&gt;언어 설정&lt;/a&gt; 은 일관성이 있어야합니다.</target>
        </trans-unit>
        <trans-unit id="6783ca375fba676e08fc3ee05e0ed3a5ef692c42" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;range#kotlin.text.MatchGroup%24range&quot;&gt;range&lt;/a&gt; property is available on JVM only.</source>
          <target state="translated">&lt;a href=&quot;range#kotlin.text.MatchGroup%24range&quot;&gt;범위&lt;/a&gt; 속성은 JVM에 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="42745a5a4bae1983528b804b1ebebed6b02c4c55" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;replace#kotlin.text%24replace%28kotlin.CharSequence%2C+kotlin.text.Regex%2C+kotlin.String%29%2Freplacement&quot;&gt;replacement&lt;/a&gt; can consist of any combination of literal text and $-substitutions. To treat the replacement string literally escape it with the &lt;a href=&quot;-regex/escape-replacement#kotlin.text.Regex.Companion%24escapeReplacement%28kotlin.String%29&quot;&gt;kotlin.text.Regex.Companion.escapeReplacement&lt;/a&gt; method.</source>
          <target state="translated">&lt;a href=&quot;replace#kotlin.text%24replace%28kotlin.CharSequence%2C+kotlin.text.Regex%2C+kotlin.String%29%2Freplacement&quot;&gt;대체&lt;/a&gt; 문자 텍스트와 $ -substitutions의 조합으로 구성 할 수 있습니다. 대체 문자열을 처리하려면 &lt;a href=&quot;-regex/escape-replacement#kotlin.text.Regex.Companion%24escapeReplacement%28kotlin.String%29&quot;&gt;kotlin.text.Regex.Companion.escapeReplacement&lt;/a&gt; 메소드 를 사용하여 대체 문자열을 이스케이프 처리하십시오 .</target>
        </trans-unit>
        <trans-unit id="72a4e8e47da1c3186370a03fc43faed555a6af40" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;replace#kotlin.text%24replace(kotlin.CharSequence,%20kotlin.text.Regex,%20kotlin.String)/replacement&quot;&gt;replacement&lt;/a&gt; can consist of any combination of literal text and $-substitutions. To treat the replacement string literally escape it with the &lt;a href=&quot;-regex/escape-replacement#kotlin.text.Regex.Companion%24escapeReplacement(kotlin.String)&quot;&gt;kotlin.text.Regex.Companion.escapeReplacement&lt;/a&gt; method.</source>
          <target state="translated">&lt;a href=&quot;replace#kotlin.text%24replace(kotlin.CharSequence,%20kotlin.text.Regex,%20kotlin.String)/replacement&quot;&gt;대체&lt;/a&gt; 문자 텍스트와 $ -substitutions의 조합으로 구성 할 수 있습니다. 대체 문자열을 문자 그대로 처리하려면 &lt;a href=&quot;-regex/escape-replacement#kotlin.text.Regex.Companion%24escapeReplacement(kotlin.String)&quot;&gt;kotlin.text.Regex.Companion.escapeReplacement&lt;/a&gt; 메소드로 이스케이프하십시오 .</target>
        </trans-unit>
        <trans-unit id="95e9b2afeb8d6a526b5a01ab6cb37a3b2fbd3c86" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;!!&lt;/code&gt; Operator</source>
          <target state="translated">&lt;code&gt;!!&lt;/code&gt; 운영자</target>
        </trans-unit>
        <trans-unit id="16f554cb9d6cac56c27af60060382d64762de72d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;-d&lt;/code&gt; option indicates the output path for generated class files, which may be either a directory or a &lt;em&gt;.jar&lt;/em&gt; file. The &lt;code&gt;-include-runtime&lt;/code&gt; option makes the resulting &lt;em&gt;.jar&lt;/em&gt; file self-contained and runnable by including the Kotlin runtime library in it. If you want to see all available options run</source>
          <target state="translated">&lt;code&gt;-d&lt;/code&gt; 옵션은 디렉토리 또는이 될 수 생성 된 클래스 파일의 출력 경로를 나타내는 &lt;em&gt;.JAR&lt;/em&gt; 파일을. &lt;code&gt;-include-runtime&lt;/code&gt; 옵션은 결과 수 &lt;em&gt;의 .jar&lt;/em&gt; 파일 자체에 포함 된과의 코 틀린 런타임 라이브러리를 포함하여 실행 가능합니다. 사용 가능한 모든 옵션을 보려면</target>
        </trans-unit>
        <trans-unit id="22f7ccf0243674cea2ac7171ac3600509d7e8e7d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;-d&lt;/code&gt; option indicates what we want the output of the compiler to be called and may be either a directory name for class files or a &lt;em&gt;.jar&lt;/em&gt; file name. The &lt;code&gt;-include-runtime&lt;/code&gt; option makes the resulting &lt;em&gt;.jar&lt;/em&gt; file self-contained and runnable by including the Kotlin runtime library in it. If you want to see all available options run</source>
          <target state="translated">&lt;code&gt;-d&lt;/code&gt; 옵션은 우리가 컴파일러의 출력을 호출하고, 클래스 파일에 대한 디렉토리 이름 또는이 될 수 있습니다 원하는 것을 나타냅니다 &lt;em&gt;의 .jar&lt;/em&gt; 파일 이름. &lt;code&gt;-include-runtime&lt;/code&gt; 옵션은 결과 수 &lt;em&gt;의 .jar&lt;/em&gt; 파일 자체에 포함 된과의 코 틀린 런타임 라이브러리를 포함하여 실행 가능합니다. 사용 가능한 모든 옵션을 보려면</target>
        </trans-unit>
        <trans-unit id="c711aceaf8b8e464d66e1fd318914f03bac4786f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;-meta-info&lt;/code&gt; option indicates that an additional JS file with binary meta-information about compiled kotlin code will be created.</source>
          <target state="translated">&lt;code&gt;-meta-info&lt;/code&gt; 옵션은 컴파일 코 틀린 코드에 대한 이진 메타 정보를 추가 JS 파일이 생성된다는 것을 나타냅니다.</target>
        </trans-unit>
        <trans-unit id="dc6b8236cb90f6f8fe4324f1a0dc0ef9b906294c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;.def&lt;/code&gt; file supports several options for adjusting the generated bindings.</source>
          <target state="translated">&lt;code&gt;.def&lt;/code&gt; 파일이 생성 된 바인딩을 조정하기위한 몇 가지 옵션을 지원합니다.</target>
        </trans-unit>
        <trans-unit id="73f8a4adb6a430053e582f21a1ecd992b4948729" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;.pointed&lt;/code&gt; property for &lt;code&gt;CPointer&amp;lt;T&amp;gt;&lt;/code&gt; returns the lvalue of type &lt;code&gt;T&lt;/code&gt;, pointed by this pointer. The reverse operation is &lt;code&gt;.ptr&lt;/code&gt;: it takes the lvalue and returns the pointer to it.</source>
          <target state="translated">&lt;code&gt;CPointer&amp;lt;T&amp;gt;&lt;/code&gt; 의 &lt;code&gt;.pointed&lt;/code&gt; 속성은 이 포인터가 가리키는 &lt;code&gt;T&lt;/code&gt; 유형의 lvalue를 반환합니다 . 역 연산은 &lt;code&gt;.ptr&lt;/code&gt; 입니다 . lvalue를 가져 와서 포인터를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="6d8b85d101ff4f2f1b24686adcfb710c9930ca1c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;==&lt;/code&gt; operation is special: it is translated to a complex expression that screens for &lt;code&gt;null&lt;/code&gt;'s. &lt;code&gt;null == null&lt;/code&gt; is always true, and &lt;code&gt;x == null&lt;/code&gt; for a non-null &lt;code&gt;x&lt;/code&gt; is always false and won't invoke &lt;code&gt;x.equals()&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;==&lt;/code&gt; 의 작업은 특별하다 : 그것은 복잡한 표현 그에 대한 화면으로 변환된다 &lt;code&gt;null&lt;/code&gt; '의. &lt;code&gt;null == null&lt;/code&gt; 항상 true이고, &lt;code&gt;x == null&lt;/code&gt; null이 아닌에 대한 &lt;code&gt;x&lt;/code&gt; 항상 false입니다하지 않습니다 호출 &lt;code&gt;x.equals()&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="6bbc4d74ec596791bf71057157cc072f9f40333d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;@BindView&lt;/code&gt; annotation is defined to be applied to the fields only, but the Kotlin compiler understands that and annotates the corresponding field under the hood when you apply the annotation to the whole property.</source>
          <target state="translated">&lt;code&gt;@BindView&lt;/code&gt; 의 주석 만 필드에 적용되는 정의하지만, 코 틀린 컴파일러는 그것을 이해하고 전체 속성에 주석을 적용 할 때 후드 아래에 해당 필드에 주석된다.</target>
        </trans-unit>
        <trans-unit id="570e8cdd4880694f653c6df8b5e52b836ca08b91" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;@JsExport&lt;/code&gt; annotation is available in the current default compiler backend and the new &lt;a href=&quot;js-ir-compiler&quot;&gt;IR compiler backend&lt;/a&gt;. If you are targeting the IR compiler backend, you &lt;strong&gt;must&lt;/strong&gt; use the &lt;code&gt;@JsExport&lt;/code&gt; annotation to make your functions visible from Kotlin in the first place.</source>
          <target state="translated">&lt;code&gt;@JsExport&lt;/code&gt; 의 주석은 현재 기본 컴파일러 백엔드 및 새로운에서 사용할 수 &lt;a href=&quot;js-ir-compiler&quot;&gt;IR 컴파일러 백엔드&lt;/a&gt; . 당신이 IR 컴파일러 백엔드를 대상으로하는 경우에, 당신은 &lt;strong&gt;해야한다&lt;/strong&gt; 사용 &lt;code&gt;@JsExport&lt;/code&gt; 의 처음에 코 틀린에서 볼 수 귀하의 기능을하게 주석을.</target>
        </trans-unit>
        <trans-unit id="027e903c95ee8bc2148123b05adc1c6430180f44" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;@JsExport&lt;/code&gt; annotation is currently marked as experimental. Its design may change in future versions.</source>
          <target state="translated">&lt;code&gt;@JsExport&lt;/code&gt; 의 주석은 현재 실험적으로 표시됩니다. 그 디자인은 향후 버전에서 변경 될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="1df3c0a179e9e6af77acfff08df64cc5248d7f9d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;@JvmDefault&lt;/code&gt; annotation is experimental in Kotlin 1.3. Its name and behavior may change, leading to future incompatibility.</source>
          <target state="translated">&lt;code&gt;@JvmDefault&lt;/code&gt; 의 주석 코 틀린 1.3 실험이다. 이름과 동작이 변경되어 나중에 호환되지 않을 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="23f0d6b7e361daa5f829cff80c17a1080ce0221f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;@UnderMigration&lt;/code&gt; annotation (provided in a separate artifact &lt;code&gt;kotlin-annotations-jvm&lt;/code&gt;) can be used by library maintainers to define the migration status for the nullability type qualifiers.</source>
          <target state="translated">&lt;code&gt;@UnderMigration&lt;/code&gt; 의 (별도의 이슈에 제공된 주석 &lt;code&gt;kotlin-annotations-jvm&lt;/code&gt; ) Null 허용 형 한정자에 대한 이전 상태를 정의하는 라이브러리 관리자들에 의해 사용될 수있다.</target>
        </trans-unit>
        <trans-unit id="08a8188662741e6b74d3c3abb87899999effc8e6" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ArrayDeque&lt;/code&gt; implementation uses a resizable array underneath: it stores the contents in a circular buffer, an &lt;code&gt;Array&lt;/code&gt;, and resizes this &lt;code&gt;Array&lt;/code&gt; only when it becomes full.</source>
          <target state="translated">&lt;code&gt;ArrayDeque&lt;/code&gt; 은 원형 버퍼의 내용 저장 : 크기 조정 구현 어레이 아래를 사용 &lt;code&gt;Array&lt;/code&gt; , 크기를 조정하고,이 &lt;code&gt;Array&lt;/code&gt; 은 완전하게 전용.</target>
        </trans-unit>
        <trans-unit id="bb1328f13d2922d7a316403f81e7c018a9247b4a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;CValuesRef&amp;lt;T&amp;gt;&lt;/code&gt; representation of pointer parameters is designed to support C array literals without explicit native memory allocation. To construct the immutable self-contained sequence of C values, the following methods are provided:</source>
          <target state="translated">포인터 매개 변수 의 &lt;code&gt;CValuesRef&amp;lt;T&amp;gt;&lt;/code&gt; 표현은 명시 적 기본 메모리 할당없이 C 배열 리터럴을 지원하도록 설계되었습니다. 불변의 자체 포함 된 C 값 시퀀스를 구성하기 위해 다음 방법이 제공됩니다.</target>
        </trans-unit>
        <trans-unit id="a1a03d0c25bc5cefc6e2a073c0dfa2fd3a424a42" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Closeable.use&lt;/code&gt; function calls &lt;code&gt;Throwable.addSuppressed&lt;/code&gt; when an exception is thrown during closing the resource after some other exception.</source>
          <target state="translated">&lt;code&gt;Closeable.use&lt;/code&gt; 의 함수 호출은 &lt;code&gt;Throwable.addSuppressed&lt;/code&gt; 예외가 다른 예외 후 자원을 닫는 동안 발생하는 경우.</target>
        </trans-unit>
        <trans-unit id="0485fe2409cde90ad04805af82cb812c3dd3149b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;INSTANCE&lt;/code&gt; field of a companion object more visible than the companion object class itself</source>
          <target state="translated">컴패니언 객체 클래스 자체보다 더 잘 보이는 컴패니언 객체 의 &lt;code&gt;INSTANCE&lt;/code&gt; 필드</target>
        </trans-unit>
        <trans-unit id="a0327626fcb95882f9434dd6a1485603acf809a0" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;MyStruct&lt;/code&gt; and &lt;code&gt;MyUnion&lt;/code&gt; classes have the pointer to the native memory underneath. The memory will be released when a &lt;code&gt;memScoped&lt;/code&gt; function ends, which is equal to the end of its &lt;code&gt;block&lt;/code&gt;. Be careful to make sure that a pointer is not used outside of the &lt;code&gt;memScoped&lt;/code&gt; call. We may use &lt;code&gt;Arena()&lt;/code&gt; or &lt;code&gt;nativeHeap&lt;/code&gt; for pointers that should be available longer, or are cached inside a C library.</source>
          <target state="translated">&lt;code&gt;MyStruct&lt;/code&gt; 및 &lt;code&gt;MyUnion&lt;/code&gt; 클래스는 기본 메모리 아래에 포인터를 가지고있다. 메모리는 &lt;code&gt;memScoped&lt;/code&gt; 함수가 종료 될 때 해제 되며 이는 &lt;code&gt;block&lt;/code&gt; 의 끝과 같습니다 . &lt;code&gt;memScoped&lt;/code&gt; 호출 외부에서 포인터를 사용하지 않도록주의하십시오 . 우리는 사용할 수 있습니다 &lt;code&gt;Arena()&lt;/code&gt; 또는 &lt;code&gt;nativeHeap&lt;/code&gt; 를 더 이상 사용할 수 있어야 또는 C 라이브러리 내부 캐시 대한 포인터.</target>
        </trans-unit>
        <trans-unit id="e163aa024140dbb6042ebda1a8af8dcaad09140b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Podspec&lt;/code&gt; file includes a path to an output framework and script phases that automate building this framework during the build process of an Xcode project.</source>
          <target state="translated">&lt;code&gt;Podspec&lt;/code&gt; 의 파일은 출력 프레임 워크와 자동화가 Xcode 프로젝트의 빌드 과정에서이 프레임 워크를 구축하는 것이 스크립트 단계의 경로가 포함되어 있습니다.</target>
        </trans-unit>
        <trans-unit id="e1e663158ad35ab7b0074a2786efe149637f58ae" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;SharedCode/build.gradle&lt;/code&gt; file uses the &lt;code&gt;kotlin-multiplatform&lt;/code&gt; plugin to implement what we need. In the file, we define several targets &lt;code&gt;common&lt;/code&gt;, &lt;code&gt;android&lt;/code&gt;, and &lt;code&gt;iOS&lt;/code&gt;. Each target has its own platform. The &lt;code&gt;common&lt;/code&gt; target contains the Kotlin common code which is included into every platform compilation. It is allowed to have &lt;code&gt;expect&lt;/code&gt; declarations. Other targets provide &lt;code&gt;actual&lt;/code&gt; implementations for all &lt;code&gt;expect&lt;/code&gt;-actions from the &lt;code&gt;common&lt;/code&gt; target. The more detailed explanation of the multiplatform projects can be found on the &lt;a href=&quot;../../reference/building-mpp-with-gradle&quot;&gt;Multiplatform Projects&lt;/a&gt; documentation page.</source>
          <target state="translated">&lt;code&gt;SharedCode/build.gradle&lt;/code&gt; 의 파일은 사용 &lt;code&gt;kotlin-multiplatform&lt;/code&gt; 우리가 필요로하는 것을 구현하는 플러그인. 이 파일에서는 &lt;code&gt;common&lt;/code&gt; , &lt;code&gt;android&lt;/code&gt; 및 &lt;code&gt;iOS&lt;/code&gt; 여러 대상을 정의 합니다. 각 대상에는 고유 한 플랫폼이 있습니다. &lt;code&gt;common&lt;/code&gt; 목표는 모든 플랫폼 컴파일에 포함되어있는 코 틀린 공통 코드가 포함되어 있습니다. 선언 을 &lt;code&gt;expect&lt;/code&gt; 수 있습니다 . 다른 목표 는 &lt;code&gt;common&lt;/code&gt; 목표 의 모든 &lt;code&gt;expect&lt;/code&gt; 조치에 대한 &lt;code&gt;actual&lt;/code&gt; 구현을 제공합니다 . 멀티 플랫폼 프로젝트에 대한 자세한 설명은 멀티 &lt;a href=&quot;../../reference/building-mpp-with-gradle&quot;&gt;플랫폼 프로젝트&lt;/a&gt; 문서 페이지 에서 찾을 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="ef805264d2ba0e69f1525612b2097c56c9b79a21" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;SharedCode&lt;/code&gt; build generates iOS frameworks for use with the Xcode project. All frameworks are in the &lt;code&gt;SharedCode/build/bin&lt;/code&gt; folder. It creates a &lt;em&gt;debug&lt;/em&gt; and &lt;em&gt;release&lt;/em&gt; version for every framework target. The frameworks are in the following paths:</source>
          <target state="translated">&lt;code&gt;SharedCode&lt;/code&gt; 의 빌드는 Xcode 프로젝트에 사용하기 위해 아이폰 OS 프레임 워크를 생성합니다. 모든 프레임 워크는 &lt;code&gt;SharedCode/build/bin&lt;/code&gt; 폴더에 있습니다. 모든 프레임 워크 대상에 대한 &lt;em&gt;디버그&lt;/em&gt; 및 &lt;em&gt;릴리스&lt;/em&gt; 버전을 작성합니다 . 프레임 워크는 다음 경로에 있습니다.</target>
        </trans-unit>
        <trans-unit id="49918eac55ef5c9d9df4be1f8508374502fa5919" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;SharedCode&lt;/code&gt; sub-project should generate several artifacts for us:</source>
          <target state="translated">&lt;code&gt;SharedCode&lt;/code&gt; 의 하위 프로젝트는 우리에게 여러 아티팩트를 생성한다 :</target>
        </trans-unit>
        <trans-unit id="738861947c8af30bd4668ff2083f0544a8963e87" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;String&lt;/code&gt; class represents character strings. All string literals in Kotlin programs, such as &lt;code&gt;&quot;abc&quot;&lt;/code&gt;, are implemented as instances of this class.</source>
          <target state="translated">&lt;code&gt;String&lt;/code&gt; 클래스는 캐릭터 라인을 나타냅니다. &lt;code&gt;&quot;abc&quot;&lt;/code&gt; 와 같은 Kotlin 프로그램의 모든 문자열 리터럴 은이 클래스의 인스턴스로 구현됩니다.</target>
        </trans-unit>
        <trans-unit id="1109231b443cf6e05eb0d002d1e6b58cba8574e8" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;TimeoutCancellationException&lt;/code&gt; that is thrown by &lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/with-timeout.html&quot;&gt;withTimeout&lt;/a&gt; is a subclass of &lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/-cancellation-exception/index.html&quot;&gt;CancellationException&lt;/a&gt;. We have not seen its stack trace printed on the console before. That is because inside a cancelled coroutine &lt;code&gt;CancellationException&lt;/code&gt; is considered to be a normal reason for coroutine completion. However, in this example we have used &lt;code&gt;withTimeout&lt;/code&gt; right inside the &lt;code&gt;main&lt;/code&gt; function.</source>
          <target state="translated">&lt;code&gt;TimeoutCancellationException&lt;/code&gt; 에 의해 발생합니다 &lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/with-timeout.html&quot;&gt;withTimeout는&lt;/a&gt; 의 서브 클래스입니다 &lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/-cancellation-exception/index.html&quot;&gt;CancellationException&lt;/a&gt; . 콘솔에 스택 추적이 인쇄 된 것을 본 적이 없습니다. 취소 된 코 루틴 내부 &lt;code&gt;CancellationException&lt;/code&gt; 이 코 루틴 완료의 일반적인 이유로 간주되기 때문입니다. 그러나이 예제 에서는 &lt;code&gt;main&lt;/code&gt; 함수 내에서 &lt;code&gt;withTimeout&lt;/code&gt; 을 사용 했습니다 .</target>
        </trans-unit>
        <trans-unit id="678b280d532baa9bcd8fba06428fcb263e6a4bcd" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Unit&lt;/code&gt; return type declaration is also optional. The above code is equivalent to:</source>
          <target state="translated">&lt;code&gt;Unit&lt;/code&gt; 반환 형식 선언은 선택 사항입니다. 위 코드는 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="34816ddf73a36acb83a22b27a235dceb2d40d5b2" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;android&lt;/code&gt; configuration inside &lt;code&gt;kotlin&lt;/code&gt; doesn&amp;rsquo;t replace the build configuration of any Android project. Learn more about writing build scripts for Android projects in &lt;a href=&quot;https://developer.android.com/studio/build&quot;&gt;Android developer documentation&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;android&lt;/code&gt; 구성 내부의 &lt;code&gt;kotlin&lt;/code&gt; 어떤 안드로이드 프로젝트의 빌드 구성을 대체하지 않습니다. &lt;a href=&quot;https://developer.android.com/studio/build&quot;&gt;Android 개발자 문서&lt;/a&gt; 에서 Android 프로젝트 용 빌드 스크립트 작성에 대해 자세히 알아보세요 .</target>
        </trans-unit>
        <trans-unit id="bb48ced54ff1266406f8ddf62204246a87b046d9" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;array.copyInto(targetArray, targetOffset, startIndex, endIndex)&lt;/code&gt; functions for the existing array types, including the unsigned arrays, make it easier to implement array-based containers in pure Kotlin.</source>
          <target state="translated">&lt;code&gt;array.copyInto(targetArray, targetOffset, startIndex, endIndex)&lt;/code&gt; 서명되지 않은 배열을 포함하여 기존 배열 유형에 대한 기능은 쉽게 순수 코 틀린에 배열 기반 컨테이너를 구현 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="dbbd4d6ccddd01ebd0440c3324ef34e660a0c4b5" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;build.gradle.kts&lt;/code&gt; file contains the project settings. Read more about these settings in the &lt;a href=&quot;../../reference/mpp-dsl-reference&quot;&gt;Kotlin Multiplatform Gradle DSL reference&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;build.gradle.kts&lt;/code&gt; 의 파일은 프로젝트 설정이 포함되어 있습니다. &lt;a href=&quot;../../reference/mpp-dsl-reference&quot;&gt;Kotlin Multiplatform Gradle DSL reference&lt;/a&gt; 에서 이러한 설정에 대해 자세히 알아보세요 .</target>
        </trans-unit>
        <trans-unit id="a6d3c63b724a00a7b22c190a90ba3fb846402424" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;catch&lt;/code&gt; blocks are tried in order until an exception type is found that matches the thrown exception (it doesn't need to be an exact match; the thrown exception's class can be a subclass of the declared one), and at most one &lt;code&gt;catch&lt;/code&gt; block will be executed. If no match is found, the exception bubbles out of the &lt;code&gt;try&lt;/code&gt;/&lt;code&gt;catch&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;catch&lt;/code&gt; 블록은 예외 유형이 일치가 발생한 예외 발견 될 때까지 순서대로 시도됩니다 (이 정확히 일치 할 필요는 없습니다; throw 된 예외의 클래스의 서브 클래스가 될 수있는 하나의 선언), 대부분 하나의 &lt;code&gt;catch&lt;/code&gt; 블록 실행됩니다. 일치하는 항목이 없으면 &lt;code&gt;try&lt;/code&gt; / &lt;code&gt;catch&lt;/code&gt; 에서 예외가 발생합니다 .</target>
        </trans-unit>
        <trans-unit id="e92d0fff45fa528ec76156e8cf1a8aac33dfa367" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;cocoapods&lt;/code&gt; block can include dependencies to Pods stored locally and Pods from the CocoaPods repository at the same time.</source>
          <target state="translated">&lt;code&gt;cocoapods&lt;/code&gt; 의 CocoaPods로부터 로컬 저장된 포드 포드에 의존성을 포함 할 수있다 블록 동시에 리포지터리.</target>
        </trans-unit>
        <trans-unit id="c0fef9a879817509a3ced8499c0b86da8348957d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;component1()&lt;/code&gt; and &lt;code&gt;component2()&lt;/code&gt; functions are another example of the &lt;em&gt;principle of conventions&lt;/em&gt; widely used in Kotlin (see operators like &lt;code&gt;+&lt;/code&gt; and &lt;code&gt;*&lt;/code&gt;, &lt;em&gt;for&lt;/em&gt;-loops etc.). Anything can be on the right-hand side of a destructuring declaration, as long as the required number of component functions can be called on it. And, of course, there can be &lt;code&gt;component3()&lt;/code&gt; and &lt;code&gt;component4()&lt;/code&gt; and so on.</source>
          <target state="translated">&lt;code&gt;component1()&lt;/code&gt; 및 &lt;code&gt;component2()&lt;/code&gt; 함수의 다른 예이다 &lt;em&gt;규칙의 원리&lt;/em&gt; (같은 연산자 참조 널리 코 틀린에 사용 &lt;code&gt;+&lt;/code&gt; 및 &lt;code&gt;*&lt;/code&gt; , &lt;em&gt;대&lt;/em&gt; -loops 등). 필요한 수의 구성 요소 함수를 호출 할 수있는 한, 어떤 것이라도 파괴 선언의 오른쪽에있을 수 있습니다. 물론 &lt;code&gt;component3()&lt;/code&gt; 및 &lt;code&gt;component4()&lt;/code&gt; 등 이있을 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="c908c6361f3f878795986cf1aacec3df19a47af2" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;componentN()&lt;/code&gt; operator functions are not called for the components that are skipped in this way.</source>
          <target state="translated">&lt;code&gt;componentN()&lt;/code&gt; 연산자 기능은 이러한 방식으로 스킵되는 성분을 요구하지 않는다.</target>
        </trans-unit>
        <trans-unit id="f1d847ef34570c9d2cfc5768433edcc66d201826" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;concurrent&lt;/code&gt; source set declares the function runBlocking and is compiled for the JVM and the native targets. Once the &lt;code&gt;kotlinx.coroutines&lt;/code&gt; library is updated and published with the hierarchical project structure, you can depend on it and call &lt;code&gt;runBlocking&lt;/code&gt; from a source set that is shared between the JVM and native targets since it matches the &amp;ldquo;targets signature&amp;rdquo; of the library&amp;rsquo;s &lt;code&gt;concurrent&lt;/code&gt; source set.</source>
          <target state="translated">&lt;code&gt;concurrent&lt;/code&gt; 소스 세트는 기능 runBlocking를 선언하고 JVM과 기본 대상에 대해 컴파일됩니다. 한 번 &lt;code&gt;kotlinx.coroutines&lt;/code&gt; 의 라이브러리가 업데이트 계층 프로젝트 구조와 함께 게시, 당신은에 의존하고 호출 할 수 있습니다 &lt;code&gt;runBlocking&lt;/code&gt; 는 도서관의 &quot;목표 서명&quot;과 일치하기 때문에 JVM과 기본 목표 사이에 공유되는 소스 세트에서 &lt;code&gt;concurrent&lt;/code&gt; 소스를 세트.</target>
        </trans-unit>
        <trans-unit id="a190a683fc1154d7857777d7aa926a36cf88408d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;dependencies&lt;/code&gt; block of the source set declaration contains the dependencies of this source set.</source>
          <target state="translated">소스 세트 선언 의 &lt;code&gt;dependencies&lt;/code&gt; 블록에는이 소스 세트의 종속성이 포함됩니다.</target>
        </trans-unit>
        <trans-unit id="e19e10048f6cfec5120bb685db8cc57ca3bf8154" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;document&lt;/code&gt; object also provides us a way to retrieve a specific element by ID, name, class name, tag name and so on. All returned elements are of type &lt;code&gt;Element?&lt;/code&gt;. To access their properties, we need to cast them to their appropriate type. For example, say we have an HTML page with an email &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; field:</source>
          <target state="translated">&lt;code&gt;document&lt;/code&gt; 객체는 우리에게 등 ID, 이름, 클래스 이름, 태그 이름하여 특정 요소를 검색 할 수있는 방법을 제공합니다. 반환 된 모든 요소는 &lt;code&gt;Element?&lt;/code&gt; 유형 입니까? . 속성에 액세스하려면 적절한 유형으로 캐스팅해야합니다. 예를 들어, 이메일 &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; 필드 가있는 HTML 페이지가 있다고 가정 합니다.</target>
        </trans-unit>
        <trans-unit id="7d4ca598e9322020fabb7ed0f0cf080beed5a640" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;dynamic&lt;/code&gt; type basically turns off Kotlin's type checker:</source>
          <target state="translated">&lt;code&gt;dynamic&lt;/code&gt; 유형은 기본적으로 코 틀린의 형태 검사기 해제합니다 :</target>
        </trans-unit>
        <trans-unit id="5ff5cd6bac575bb9563d72ab56d5d639d97b4c6c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;expect&lt;/code&gt;/&lt;code&gt;actual&lt;/code&gt; feature is currently in &lt;a href=&quot;evolution/components-stability&quot;&gt;Beta&lt;/a&gt;. All of the language and tooling features described in this document are subject to change in future Kotlin versions.</source>
          <target state="translated">는 &lt;code&gt;expect&lt;/code&gt; / &lt;code&gt;actual&lt;/code&gt; 기능은 현재 &lt;a href=&quot;evolution/components-stability&quot;&gt;베타&lt;/a&gt; . 이 문서에 설명 된 모든 언어 및 도구 기능은 향후 Kotlin 버전에서 변경 될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="51e19e38be808ad0fddd91d78f8820fc196fada7" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;external&lt;/code&gt; modifier</source>
          <target state="translated">&lt;code&gt;external&lt;/code&gt; 개질제</target>
        </trans-unit>
        <trans-unit id="6672d0616428f2de367eecabae3ac9b311e7f971" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;external&lt;/code&gt; modifier is only allowed on package-level declarations. You can't declare an &lt;code&gt;external&lt;/code&gt; member of a non-&lt;code&gt;external&lt;/code&gt; class.</source>
          <target state="translated">&lt;code&gt;external&lt;/code&gt; 수정은 패키지 수준의 선언에 허용됩니다. 당신은 선언 할 수 없습니다 &lt;code&gt;external&lt;/code&gt; 비의 멤버 &lt;code&gt;external&lt;/code&gt; 클래스를.</target>
        </trans-unit>
        <trans-unit id="3b6dae5981e61870a0a711096ca1cc69db0e7e4d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;field&lt;/code&gt; identifier can only be used in the accessors of the property.</source>
          <target state="translated">&lt;code&gt;field&lt;/code&gt; 식별자 만이 건물의 접근에 사용될 수있다.</target>
        </trans-unit>
        <trans-unit id="a8755ff22ac11729e9e1bb025cf0c2f08d13b24b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;finally&lt;/code&gt; block (if any) is executed at the end, no matter what the outcome is: either after the try block completes successfully, or after a catch block is executed (even if another exception is thrown by the catch block), or if no matching catch is found.</source>
          <target state="translated">은 &lt;code&gt;finally&lt;/code&gt; 끝에서 실행됩니다 (있는 경우) 차단, 아무리 결과가 무엇 : 중 하나를 성공적으로 try 블록이 완료된 후, 또는 catch 블록이 (다른 예외가 catch 블록에 의해 발생되는 경우에도) 실행 된 후, 또는 경우 일치하는 캐치를 찾을 수 없습니다.</target>
        </trans-unit>
        <trans-unit id="3a829cd24a40c00449e6558dda8fc041beb9c10a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;flow { ... }&lt;/code&gt; builder from the previous examples is the most basic one. There are other builders for easier declaration of flows:</source>
          <target state="translated">이전 예제 의 &lt;code&gt;flow { ... }&lt;/code&gt; 빌더가 가장 기본적인 것입니다. 흐름을보다 쉽게 ​​선언 할 수있는 다른 빌더가 있습니다.</target>
        </trans-unit>
        <trans-unit id="6e147b02bdfa0081a311ca1a27d8c44534b54856" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;head&lt;/code&gt; and &lt;code&gt;body&lt;/code&gt; functions in the &lt;code&gt;HTML&lt;/code&gt; class are defined similarly to &lt;code&gt;html&lt;/code&gt;. The only difference is that they add the built instances to the &lt;code&gt;children&lt;/code&gt; collection of the enclosing &lt;code&gt;HTML&lt;/code&gt; instance:</source>
          <target state="translated">&lt;code&gt;HTML&lt;/code&gt; 클래스 의 &lt;code&gt;head&lt;/code&gt; 및 &lt;code&gt;body&lt;/code&gt; 함수는 &lt;code&gt;html&lt;/code&gt; 과 유사하게 정의됩니다 . 유일한 차이점은 빌드 된 인스턴스를 둘러싸는 &lt;code&gt;HTML&lt;/code&gt; 인스턴스 의 &lt;code&gt;children&lt;/code&gt; 컬렉션에 추가한다는 것입니다 .</target>
        </trans-unit>
        <trans-unit id="770f5ab17d8a9531f1b79df0e83aa540310bf343" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;import&lt;/code&gt; keyword is not restricted to importing classes; you can also use it to import other declarations:</source>
          <target state="translated">&lt;code&gt;import&lt;/code&gt; 키워드는 클래스를 가져 오기에 제한되지 않는다; 다른 선언을 가져 오기 위해 사용할 수도 있습니다.</target>
        </trans-unit>
        <trans-unit id="41a9e375e0ec0d5188379910e6d4cc759d4c0ed4" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;inc()&lt;/code&gt; and &lt;code&gt;dec()&lt;/code&gt; functions must return a value, which will be assigned to the variable on which the &lt;code&gt;++&lt;/code&gt; or &lt;code&gt;--&lt;/code&gt; operation was used. They shouldn't mutate the object on which the &lt;code&gt;inc&lt;/code&gt; or &lt;code&gt;dec&lt;/code&gt; was invoked.</source>
          <target state="translated">&lt;code&gt;inc()&lt;/code&gt; 및 &lt;code&gt;dec()&lt;/code&gt; 함수가되는 변수에 할당 될 값을 반환해야 &lt;code&gt;++&lt;/code&gt; 또는 &lt;code&gt;--&lt;/code&gt; 연산이 사용되었다. &lt;code&gt;inc&lt;/code&gt; 또는 &lt;code&gt;dec&lt;/code&gt; 가 호출 된 객체를 변경해서는 안됩니다 .</target>
        </trans-unit>
        <trans-unit id="2a8bc7470da685195a735f122f1c7a64a5a63c8b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;inline&lt;/code&gt; modifier affects both the function itself and the lambdas passed to it: all of those will be inlined into the call site.</source>
          <target state="translated">&lt;code&gt;inline&lt;/code&gt; 함수 자체와 전달 된 람다 모두에 영향을 미칩니다 수정 : 그 모두는 호출 사이트에 인라인됩니다.</target>
        </trans-unit>
        <trans-unit id="4c1794e25137b28059a2347a21857b9a05912426" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;inline&lt;/code&gt; modifier can be used on accessors of properties that don't have a backing field. You can annotate individual property accessors:</source>
          <target state="translated">&lt;code&gt;inline&lt;/code&gt; 수정은 백업 필드가없는 속성의 접근에 사용할 수 있습니다. 개별 속성 접근 자에 주석을 달 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="2e8761b1965ac33697b654aacb6b2483099da851" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;internal&lt;/code&gt; visibility modifier means that the member is visible within the same module. More specifically, a module is a set of Kotlin files compiled together:</source>
          <target state="translated">&lt;code&gt;internal&lt;/code&gt; 멤버가 동일한 모듈 내 보이는 가시성 수정 방법. 보다 구체적으로, 모듈은 함께 컴파일 된 Kotlin 파일 세트입니다.</target>
        </trans-unit>
        <trans-unit id="5524830c2792b87628c40ec57ff6cb705892ec15" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;interop.def&lt;/code&gt; file is enough to compile and run the application or open it in an IDE. Now it is time to create project files, open the project in &lt;a href=&quot;https://jetbrains.com/idea&quot;&gt;IntelliJ IDEA&lt;/a&gt; and run it.</source>
          <target state="translated">&lt;code&gt;interop.def&lt;/code&gt; 파일을 컴파일하고 응용 프로그램을 실행하거나 IDE에서 엽니 충분하다. 이제 프로젝트 파일을 생성하고 &lt;a href=&quot;https://jetbrains.com/idea&quot;&gt;IntelliJ IDEA&lt;/a&gt; 에서 프로젝트를 열고 실행해야합니다.</target>
        </trans-unit>
        <trans-unit id="3d41e98e653300197d70c898b77f6a833b780263" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;js&lt;/code&gt; block describes the configuration of JavaScript targets. It can contain one of two blocks depending on the target execution environment:</source>
          <target state="translated">&lt;code&gt;js&lt;/code&gt; 블록은 자바 스크립트 목표의 구성을 설명합니다. 대상 실행 환경에 따라 다음 두 블록 중 하나를 포함 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="44ba6fd4ed404417523557c04ecd859c9b045fe5" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;kotlin-multiplatform&lt;/code&gt; plugin also uses configurations under the hood but it also provides a &lt;code&gt;dependencies&lt;/code&gt; block for each source set allowing configuring dependencies of this sources set:</source>
          <target state="translated">&lt;code&gt;kotlin-multiplatform&lt;/code&gt; 플러그인은 후드 아래 구성을 사용하지만 그것은 또한 제공 &lt;code&gt;dependencies&lt;/code&gt; 설정이 소스의 구성 종속성을 허용하는 각 소스 세트에 대한 차단 :</target>
        </trans-unit>
        <trans-unit id="a0c4005a1e5ac20d1958b1949f93981adc09fc37" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;kotlin-multiplatform&lt;/code&gt; plugin configures the project for creating an application or library to work on multiple platforms and prepares it for building on these platforms.</source>
          <target state="translated">&lt;code&gt;kotlin-multiplatform&lt;/code&gt; 여러 플랫폼에서 작동하는 응용 프로그램이나 라이브러리를 생성하고 이러한 플랫폼 구축을 위해 준비를위한 플러그인을 구성하는 프로젝트.</target>
        </trans-unit>
        <trans-unit id="d8e3eb99d26045b1aa72e09adfd01fc61c4fddee" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;kotlin-multiplatform&lt;/code&gt; plugin doesn't create any production binaries by default. The only binary available by default is a debug test executable that lets you run unit tests from the &lt;code&gt;test&lt;/code&gt; compilation.</source>
          <target state="translated">&lt;code&gt;kotlin-multiplatform&lt;/code&gt; 플러그인은 기본적으로 모든 생산 바이너리를 만들지 않습니다. 기본적으로 사용할 수있는 유일한 바이너리는 &lt;code&gt;test&lt;/code&gt; 컴파일 에서 단위 테스트를 실행할 수있는 디버그 테스트 실행 파일입니다 .</target>
        </trans-unit>
        <trans-unit id="b5c0011d2bfc5ebbff41042a726587af8e0320f2" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;kotlin-multiplatform&lt;/code&gt; plugin provides target shortcuts for creating structures for common combinations of targets.</source>
          <target state="translated">&lt;code&gt;kotlin-multiplatform&lt;/code&gt; 플러그인은 목표의 일반적인 조합에 대한 구조를 만들기위한 목표 단축키를 제공합니다.</target>
        </trans-unit>
        <trans-unit id="2df8274be5a77a61c0bfa9793c6436553cef29b9" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;kotlin-multiplatform&lt;/code&gt; plugin works with Gradle 6.0 or later.</source>
          <target state="translated">&lt;code&gt;kotlin-multiplatform&lt;/code&gt; 플러그인은 나중에 Gradle을 6.0와 함께 작동합니다.</target>
        </trans-unit>
        <trans-unit id="54c093aab8a4fd74ccc1151086a966b2ec216f25" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;kotlin.coroutines.experimental&lt;/code&gt; API was deprecated in favor of kotlin.coroutines in 1.3.0. In 1.4.0, we&amp;rsquo;re completing the deprecation cycle for &lt;code&gt;kotlin.coroutines.experimental&lt;/code&gt; by removing it from the standard library. For those who still use it on the JVM, we've provided a compatibility artifact &lt;code&gt;kotlin-coroutines-experimental-compat.jar&lt;/code&gt; with all the experimental coroutines APIs. We've published it to Maven, and we include it in the Kotlin distribution alongside the standard library.</source>
          <target state="translated">&lt;code&gt;kotlin.coroutines.experimental&lt;/code&gt; API는 1.3.0에 kotlin.coroutines의 찬성을 사용합니다. 1.4.0에서는 표준 라이브러리에서 제거하여 &lt;code&gt;kotlin.coroutines.experimental&lt;/code&gt; 에 대한 지원 중단주기를 완료하고 있습니다. 여전히 JVM에서 사용하는 사람들을 위해 모든 실험적 코 루틴 API와 함께 호환성 아티팩트 &lt;code&gt;kotlin-coroutines-experimental-compat.jar&lt;/code&gt; 를 제공했습니다. Maven에 게시했으며 표준 라이브러리와 함께 Kotlin 배포판에 포함합니다.</target>
        </trans-unit>
        <trans-unit id="fe74c7aeeab59f2c4b92f1e28239a8ff11eacd81" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;kotlin.js.experimental.generateKotlinExternals&lt;/code&gt; flag has been renamed to &lt;code&gt;kotlin.js.generate.externals&lt;/code&gt;. It controls the default behavior of Dukat for all specified npm dependencies.</source>
          <target state="translated">&lt;code&gt;kotlin.js.experimental.generateKotlinExternals&lt;/code&gt; 의 플래그로 이름이 바뀌 었습니다 &lt;code&gt;kotlin.js.generate.externals&lt;/code&gt; . 지정된 모든 npm 종속성에 대한 Dukat의 기본 동작을 제어합니다.</target>
        </trans-unit>
        <trans-unit id="c6dd2f719618738640e63840c7a2f909ec5d0617" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;kotlin.js&lt;/code&gt; Gradle plugin comes with an adjusted Gradle DSL, which provides a number of new configuration options and is more closely aligned to the DSL used by the &lt;code&gt;kotlin-multiplatform&lt;/code&gt; plugin. Some of the most impactful changes include:</source>
          <target state="translated">&lt;code&gt;kotlin.js&lt;/code&gt; Gradle을 플러그인은 새로운 구성 옵션을 제공하고 더 밀접가 사용하는 DSL에 정렬 조정 된 Gradle을 DSL, 함께 제공 &lt;code&gt;kotlin-multiplatform&lt;/code&gt; 플러그인. 가장 영향력있는 변경 사항은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="adb02342d7ce602f18e1bc8edea76f179234a358" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;kotlin.js&lt;/code&gt; file should be referenced first as it is used by our application</source>
          <target state="translated">&lt;code&gt;kotlin.js&lt;/code&gt; 이 우리의 응용 프로그램에서 사용되는 파일을 먼저 참조해야한다</target>
        </trans-unit>
        <trans-unit id="7fc3f10d75e3b45c926e4a682a79762335610161" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;kotlin.test&lt;/code&gt; library &amp;ndash; you should still use &lt;code&gt;test-common&lt;/code&gt; and &lt;code&gt;test-annotations-common&lt;/code&gt;. These dependencies will be addressed later.</source>
          <target state="translated">&lt;code&gt;kotlin.test&lt;/code&gt; 라이브러리 - 당신은 여전히 사용해야 &lt;code&gt;test-common&lt;/code&gt; 및 &lt;code&gt;test-annotations-common&lt;/code&gt; . 이러한 종속성은 나중에 해결 될 것입니다.</target>
        </trans-unit>
        <trans-unit id="d33f6d3213f1661b13836e07ebfe17d21d08c317" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;kotlin.text.Regex&lt;/code&gt; class has become &lt;code&gt;Serializable&lt;/code&gt; and can now be used in serializable hierarchies.</source>
          <target state="translated">&lt;code&gt;kotlin.text.Regex&lt;/code&gt; 의 클래스가되었다 &lt;code&gt;Serializable&lt;/code&gt; 지금 직렬화 계층에서 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="1ffc69ed46730f5c0cf459a733202302794ba475" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;languageSettings&lt;/code&gt; block of a source set defines certain aspects of project analysis and build. The following language settings are available:</source>
          <target state="translated">소스 세트 의 &lt;code&gt;languageSettings&lt;/code&gt; 블록은 프로젝트 분석 및 빌드의 특정 측면을 정의합니다. 다음 언어 설정을 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="4ac18e700523e48dabd941ad751d3aef964b3a3d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;last&lt;/code&gt; element of the progression is calculated this way:</source>
          <target state="translated">진행 의 &lt;code&gt;last&lt;/code&gt; 요소는 다음과 같이 계산됩니다.</target>
        </trans-unit>
        <trans-unit id="3bdd0dba3711de41e882257acdc9d6c6d0be76b9" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;lateinit&lt;/code&gt; modifier can now be used on top-level properties and local variables. The latter can be used, for example, when a lambda passed as a constructor argument to one object refers to another object which has to be defined later:</source>
          <target state="translated">&lt;code&gt;lateinit&lt;/code&gt; 개질제 해주기 최상위 특성 및 로컬 변수를 사용할 수있다. 후자는 예를 들어 한 객체에 생성자 인수로 전달 된 람다는 나중에 정의해야하는 다른 객체를 참조 할 때 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="43331c82f7829c2da5f8833182cec47167e9b99d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;libnative&lt;/code&gt; is used as the library name, the generated header file name prefix. It is also prefixes all declarations in the header file.</source>
          <target state="translated">&lt;code&gt;libnative&lt;/code&gt; 은 라이브러리 이름, 생성 된 헤더 파일 이름 접두어로 사용됩니다. 또한 헤더 파일의 모든 선언 앞에 붙습니다.</target>
        </trans-unit>
        <trans-unit id="bbfbe4356895f41e445e2fe6cf1eee9c6b52bcaf" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;libnative_ExportedSymbols&lt;/code&gt; structure contains several helper functions:</source>
          <target state="translated">&lt;code&gt;libnative_ExportedSymbols&lt;/code&gt; 의 구조는 여러 도우미 기능이 포함되어 있습니다</target>
        </trans-unit>
        <trans-unit id="31fcc81919bad97de24dff6463d9620cad90a047" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;log&lt;/code&gt; function prints the name of the thread in square brackets and you can see, that it is the &lt;code&gt;main&lt;/code&gt; thread, but the identifier of the currently executing coroutine is appended to it. This identifier is consecutively assigned to all created coroutines when debugging mode is turned on.</source>
          <target state="translated">&lt;code&gt;log&lt;/code&gt; 는 것을, 기능은 대괄호 스레드의 이름을 인쇄하고 당신이 볼 수있는 &lt;code&gt;main&lt;/code&gt; 스레드하지만, 현재 실행중인 코 루틴의 식별자가 추가됩니다. 이 식별자는 디버깅 모드가 켜져있을 때 생성 된 모든 코 루틴에 연속적으로 할당됩니다.</target>
        </trans-unit>
        <trans-unit id="d6f1794c043d2601c1f38c209a2b74f37608e11a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;log&lt;/code&gt; function prints the name of the thread in square brackets, and you can see that it is the &lt;code&gt;main&lt;/code&gt; thread with the identifier of the currently executing coroutine appended to it. This identifier is consecutively assigned to all created coroutines when the debugging mode is on.</source>
          <target state="translated">&lt;code&gt;log&lt;/code&gt; 기능은 대괄호 스레드의 이름을 인쇄, 당신은 그것이라고 볼 수 &lt;code&gt;main&lt;/code&gt; 가 추가 현재 실행중인 코 루틴의 식별자와 스레드. 이 식별자는 디버깅 모드가 켜져있을 때 생성 된 모든 코 루틴에 연속적으로 할당됩니다.</target>
        </trans-unit>
        <trans-unit id="efd29f0f3ce9a41a1abae4f8ce3153ceef6821bb" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;maxOf()&lt;/code&gt; and &lt;code&gt;minOf()&lt;/code&gt; top-level functions can accept a variable number of arguments (&lt;code&gt;vararg&lt;/code&gt;).</source>
          <target state="translated">&lt;code&gt;maxOf()&lt;/code&gt; 및 &lt;code&gt;minOf()&lt;/code&gt; 최상위 함수는 가변 인자 (받아 들일 수 &lt;code&gt;vararg&lt;/code&gt; ).</target>
        </trans-unit>
        <trans-unit id="3230b15e19fadbbe8582fc37fac536f21d903134" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;memoizedFoo&lt;/code&gt; variable will be computed on the first access only. If &lt;code&gt;someCondition&lt;/code&gt; fails, the variable won't be computed at all.</source>
          <target state="translated">&lt;code&gt;memoizedFoo&lt;/code&gt; 의 변수는 제 1 액세스에서만 연산한다. 경우 &lt;code&gt;someCondition&lt;/code&gt; 이 실패 변수는 전혀 계산되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="33d6683731510016eab36ef3fe8c81b5c054cb1c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;metaInfo&lt;/code&gt; option is useful, if you want to distribute the result of translation as a Kotlin/JavaScript library. If &lt;code&gt;metaInfo&lt;/code&gt; was set to &lt;code&gt;true&lt;/code&gt;, then during compilation additional JS file with binary metadata will be created. This file should be distributed together with the result of translation:</source>
          <target state="translated">&lt;code&gt;metaInfo&lt;/code&gt; 당신이 코 틀린 / 자바 스크립트 라이브러리로 변환의 결과를 배포 할 경우 옵션은 유용합니다. &lt;code&gt;metaInfo&lt;/code&gt; 가 &lt;code&gt;true&lt;/code&gt; 로 설정된 경우 컴파일 중에 이진 메타 데이터가있는 추가 JS 파일이 작성됩니다. 이 파일은 번역 결과와 함께 배포되어야합니다.</target>
        </trans-unit>
        <trans-unit id="0fa2960d546bdd59d27062cf01e83ddeac5f62dc" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;metadataJar&lt;/code&gt; task has been renamed to &lt;code&gt;allMetadataJar&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;metadataJar&lt;/code&gt; 의 작업은 이름이 변경되었습니다 &lt;code&gt;allMetadataJar&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="4390f99faa98784caca7663e0e8bb44da962235e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;min()&lt;/code&gt; and &lt;code&gt;max()&lt;/code&gt; functions have been renamed to &lt;code&gt;minOrNull()&lt;/code&gt; and &lt;code&gt;maxOrNull()&lt;/code&gt; to comply with the naming convention used across the Kotlin collections API. An &lt;code&gt;*OrNull&lt;/code&gt; suffix in the function name means that it returns &lt;code&gt;null&lt;/code&gt; if the receiver collection is empty. The same applies to &lt;code&gt;minBy()&lt;/code&gt;, &lt;code&gt;maxBy()&lt;/code&gt;, &lt;code&gt;minWith()&lt;/code&gt;, &lt;code&gt;maxWith()&lt;/code&gt; &amp;ndash; in 1.4, they have &lt;code&gt;*OrNull()&lt;/code&gt; synonyms.</source>
          <target state="translated">&lt;code&gt;min()&lt;/code&gt; 및 &lt;code&gt;max()&lt;/code&gt; 함수로 변경 한 &lt;code&gt;minOrNull()&lt;/code&gt; 및 &lt;code&gt;maxOrNull()&lt;/code&gt; 코 틀린 컬렉션 API를 통해 사용되는 명명 규칙을 준수한다. 함수 이름 의 &lt;code&gt;*OrNull&lt;/code&gt; 접미사 는 수신자 컬렉션이 비어있는 경우 &lt;code&gt;null&lt;/code&gt; 을 반환 함을 의미합니다 . &lt;code&gt;minBy()&lt;/code&gt; , &lt;code&gt;maxBy()&lt;/code&gt; , &lt;code&gt;minWith()&lt;/code&gt; , &lt;code&gt;maxWith()&lt;/code&gt; 에도 동일하게 적용됩니다 . 1.4에서는 &lt;code&gt;*OrNull()&lt;/code&gt; 동의어가 있습니다.</target>
        </trans-unit>
        <trans-unit id="ef6518091f136fea33cc33006301200c71352567" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;mod&lt;/code&gt; operator is now deprecated, and &lt;code&gt;rem&lt;/code&gt; is used instead. See &lt;a href=&quot;https://youtrack.jetbrains.com/issue/KT-14650&quot;&gt;this issue&lt;/a&gt; for motivation.</source>
          <target state="translated">이제 &lt;code&gt;mod&lt;/code&gt; 연산자가 더 이상 사용되지 않으며 대신 &lt;code&gt;rem&lt;/code&gt; 이 사용됩니다. 동기 부여에 대해서는 &lt;a href=&quot;https://youtrack.jetbrains.com/issue/KT-14650&quot;&gt;이 문제&lt;/a&gt; 를 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="395f8c5b0caa144ef95155d2b0990a640eff00ce" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;npm&lt;/code&gt; dependency function now takes a third parameter after the package name and version: &lt;code&gt;generateExternals&lt;/code&gt;. This allows you to individually control whether Dukat should generate declarations for a specific dependency, and it overrides the &lt;code&gt;generateKotlinExternals&lt;/code&gt; setting.</source>
          <target state="translated">&lt;code&gt;npm&lt;/code&gt; 종속 함수는 이제 패키지 이름 및 버전 후 세번째 파라미터를 취 &lt;code&gt;generateExternals&lt;/code&gt; 를 . 이를 통해 Dukat이 특정 종속성에 대한 선언을 생성해야하는지 여부를 개별적으로 제어 할 수 있으며 &lt;code&gt;generateKotlinExternals&lt;/code&gt; 설정을 재정의합니다 .</target>
        </trans-unit>
        <trans-unit id="a1311bbf1ab6f6fcda3f918295937e4c380353f2" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;npm&lt;/code&gt; dependency function takes a third parameter after the package name and version: &lt;code&gt;generateExternals&lt;/code&gt;. This allows you to control whether Dukat should generate declarations for a specific dependency:</source>
          <target state="translated">&lt;code&gt;npm&lt;/code&gt; 종속성 기능 패키지 이름 및 버전 후 세번째 파라미터를 취 &lt;code&gt;generateExternals&lt;/code&gt; 를 . 이를 통해 Dukat이 특정 종속성에 대한 선언을 생성해야하는지 여부를 제어 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="8110b7b8d3687de9aeddaa2e0ee4cc0fcd8589ef" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;provideDelegate&lt;/code&gt; method is called for each property during the creation of the &lt;code&gt;MyUI&lt;/code&gt; instance, and it performs the necessary validation right away.</source>
          <target state="translated">&lt;code&gt;provideDelegate&lt;/code&gt; 의 방법은 생성 동안 각 속성이라고 &lt;code&gt;MyUI&lt;/code&gt; 의 경우, 그것은 즉시 필요한 검증을 수행한다.</target>
        </trans-unit>
        <trans-unit id="553371a8f2ee3223a5555190c34ffafc9965ea1c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;provideDelegate&lt;/code&gt; method will be called for each property during the creation of a &lt;code&gt;MyUI&lt;/code&gt; instance, and it can perform the necessary validation right away.</source>
          <target state="translated">&lt;code&gt;provideDelegate&lt;/code&gt; 의 방법은 생성시 각 속성에 대해 호출됩니다 &lt;code&gt;MyUI&lt;/code&gt; 의 예, 그것은 바로 필요한 유효성 검사를 수행 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="8a67f1be603f5ede1bf9ae3c6e4bafaa7fb65414" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;simple&lt;/code&gt; function is no longer marked with &lt;code&gt;suspend&lt;/code&gt; modifier.</source>
          <target state="translated">&lt;code&gt;simple&lt;/code&gt; 기능은 더 이상 표시되지 않습니다 &lt;code&gt;suspend&lt;/code&gt; 수정.</target>
        </trans-unit>
        <trans-unit id="055a24c1add39a3120b70a8885c98dfa3f6a9dc9" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;sourceSets&lt;/code&gt; block describes source sets of the project. A source set contains Kotlin source files that participate in compilations together, along with their resources, dependencies, and language settings.</source>
          <target state="translated">&lt;code&gt;sourceSets&lt;/code&gt; 의 블록 프로젝트 소스 세트를 설명한다. 소스 세트에는 리소스, 종속성, 언어 설정과 함께 컴파일에 함께 참여하는 Kotlin 소스 파일이 포함됩니다.</target>
        </trans-unit>
        <trans-unit id="960e2214fe82d62eff0ebca52da442acae526b2f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;src&lt;/code&gt; directory contains Kotlin source files and resources. The &lt;code&gt;main.kt&lt;/code&gt; file contains sample code that will print &lt;code&gt;Hello World!&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;src&lt;/code&gt; 디렉토리는 코 틀린 소스 파일 및 자원이 포함되어 있습니다. &lt;code&gt;main.kt&lt;/code&gt; 파일을 인쇄 할 샘플 코드를 포함 &lt;code&gt;Hello World!&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="294599e3b76ed6d0958bb5ab779fa8816270584c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;src&lt;/code&gt; directory contains Kotlin source files and resources. The file &lt;code&gt;welcome.kt&lt;/code&gt; includes sample code that renders the web page you've just seen.</source>
          <target state="translated">&lt;code&gt;src&lt;/code&gt; 디렉토리는 코 틀린 소스 파일 및 자원이 포함되어 있습니다. &lt;code&gt;welcome.kt&lt;/code&gt; 파일 에는 방금 본 웹 페이지를 렌더링하는 샘플 코드가 포함되어 있습니다.</target>
        </trans-unit>
        <trans-unit id="1d129385cfbc790b4712464852ea4141749a2d3e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;src&lt;/code&gt; directory contains the Kotlin source files and resources. The file &lt;code&gt;main.kt&lt;/code&gt; includes sample code that prints &quot;Hello, Kotlin/Native!&quot; using the &lt;a href=&quot;../../../api/latest/jvm/stdlib/stdlib/kotlin.io/println&quot;&gt;&lt;code&gt;println()&lt;/code&gt;&lt;/a&gt; function.</source>
          <target state="translated">&lt;code&gt;src&lt;/code&gt; 디렉토리는 코 틀린 소스 파일 및 자원이 포함되어 있습니다. &lt;code&gt;main.kt&lt;/code&gt; 파일 에는 &quot;Hello, Kotlin / Native!&quot;를 인쇄하는 샘플 코드가 포함되어 있습니다. &lt;a href=&quot;../../../api/latest/jvm/stdlib/stdlib/kotlin.io/println&quot;&gt; &lt;code&gt;println()&lt;/code&gt; &lt;/a&gt; 함수를 사용합니다 .</target>
        </trans-unit>
        <trans-unit id="0175059e36e70f08c4728ad40eca881f9d258af1" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;stdlib&lt;/code&gt; library &amp;ndash; starting from Kotlin 1.4.0, &lt;a href=&quot;#dependency-on-the-standard-library-added-by-default&quot;&gt;the &lt;code&gt;stdlib&lt;/code&gt; dependency is added automatically&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;stdlib&lt;/code&gt; 라이브러리 - 코 틀린 1.4.0부터이 &lt;a href=&quot;#dependency-on-the-standard-library-added-by-default&quot;&gt; &lt;code&gt;stdlib&lt;/code&gt; &lt;/a&gt; 의존성이 자동으로 추가됩니다 .</target>
        </trans-unit>
        <trans-unit id="3ced8435cd27ad8472273c2b70edbb4e6fae0033" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;strict&lt;/code&gt;, &lt;code&gt;warn&lt;/code&gt; and &lt;code&gt;ignore&lt;/code&gt; values have the same meaning as those of &lt;code&gt;MigrationStatus&lt;/code&gt;, and only the &lt;code&gt;strict&lt;/code&gt; mode affects the types in the annotated declarations as they are seen in Kotlin.</source>
          <target state="translated">&lt;code&gt;strict&lt;/code&gt; , &lt;code&gt;warn&lt;/code&gt; 및 &lt;code&gt;ignore&lt;/code&gt; 값과 동일한 의미가 &lt;code&gt;MigrationStatus&lt;/code&gt; 을 , 만 &lt;code&gt;strict&lt;/code&gt; 모드가 코 틀린에 볼 수 있습니다로 주석 선언의 종류에 영향을 미칩니다.</target>
        </trans-unit>
        <trans-unit id="b73370969f5202ffabe72c59e5b9b17674a895a5" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;toast&lt;/code&gt; function is defined in the &lt;a href=&quot;https://github.com/Kotlin/anko&quot;&gt;Anko&lt;/a&gt; library.</source>
          <target state="translated">&lt;code&gt;toast&lt;/code&gt; 기능은에 정의되어 &lt;a href=&quot;https://github.com/Kotlin/anko&quot;&gt;안코의&lt;/a&gt; 라이브러리입니다.</target>
        </trans-unit>
        <trans-unit id="28d1165f482266ce4727ebc682f071fdd99069b9" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;typedef struct { .. } TYPE_NAME&lt;/code&gt; syntax is used in C language to declare a structure. &lt;a href=&quot;https://stackoverflow.com/questions/1675351/typedef-struct-vs-struct-definitions&quot;&gt;The thread&lt;/a&gt; provides more explanations of that pattern.</source>
          <target state="translated">&lt;code&gt;typedef struct { .. } TYPE_NAME&lt;/code&gt; 구문 구조를 선언하는 C 언어로 사용된다. &lt;a href=&quot;https://stackoverflow.com/questions/1675351/typedef-struct-vs-struct-definitions&quot;&gt;스레드&lt;/a&gt; 는 해당 패턴에 대한 자세한 설명을 제공합니다.</target>
        </trans-unit>
        <trans-unit id="98db59501bac8408cab0fac3a9f3341579e6d212" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;valueOf()&lt;/code&gt; method throws an &lt;code&gt;IllegalArgumentException&lt;/code&gt; if the specified name does not match any of the enum constants defined in the class.</source>
          <target state="translated">&lt;code&gt;valueOf()&lt;/code&gt; 메소드가 발생 &lt;code&gt;IllegalArgumentException&lt;/code&gt; 지정된 이름이 클래스에 정의 된 열거 형 상수 일치하지 않는 경우.</target>
        </trans-unit>
        <trans-unit id="3e338c07817ae57fb7dbab7add74e2021cf2d7f2" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;version&lt;/code&gt; should be literal in this block, and it cannot be applied from another build script.</source>
          <target state="translated">&lt;code&gt;version&lt;/code&gt; 이 블록에서 문자 그대로해야하고, 그것은 또 다른 빌드 스크립트에서 적용 할 수 없습니다.</target>
        </trans-unit>
        <trans-unit id="271e23dc79ae024533b3813b505d0f8c07b0807d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;while&lt;/code&gt; loop is similar to Python (but keep in mind that the condition must be an actual boolean expression, as there's no concept of truthy or falsy values).</source>
          <target state="translated">&lt;code&gt;while&lt;/code&gt; 루프 (truthy 또는 falsy 값의 개념이 없습니다로하지만, 조건이 실제 부울 식이어야 것을 명심) 파이썬과 유사하다.</target>
        </trans-unit>
        <trans-unit id="223ff8adc648a88f8fddcdbfcf941801bfcdb1cf" translate="yes" xml:space="preserve">
          <source>The &lt;em&gt;New Project&lt;/em&gt; wizard in IntelliJ IDEA can be used to start a new Kotlin/Native project with just one click. Check out the &lt;em&gt;Kotlin&lt;/em&gt; section and select the &lt;em&gt;Native | Gradle&lt;/em&gt; option to generate the project. For a better understanding and to explain what's happening, in this tutorial we'll create the project manually.</source>
          <target state="translated">IntelliJ IDEA 의 &lt;em&gt;새 프로젝트&lt;/em&gt; 마법사를 사용하면 한 번의 클릭으로 새로운 Kotlin / Native 프로젝트를 시작할 수 있습니다. &lt;em&gt;Kotlin&lt;/em&gt; 섹션을 확인 하고 &lt;em&gt;Native | &lt;/em&gt;프로젝트를 생성하는 &lt;em&gt;Gradle&lt;/em&gt; 옵션. 더 나은 이해와 진행 상황을 설명하기 위해이 자습서에서는 프로젝트를 수동으로 만듭니다.</target>
        </trans-unit>
        <trans-unit id="7d53f956418818285247311dbf9f12e622bd802b" translate="yes" xml:space="preserve">
          <source>The &lt;em&gt;by&lt;/em&gt;-clause in the supertype list for &lt;code&gt;Derived&lt;/code&gt; indicates that &lt;code&gt;b&lt;/code&gt; will be stored internally in objects of &lt;code&gt;Derived&lt;/code&gt; and the compiler will generate all the methods of &lt;code&gt;Base&lt;/code&gt; that forward to &lt;code&gt;b&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Derived&lt;/code&gt; 에 대한 수퍼 타입 ​​목록 의 &lt;em&gt;by-&lt;/em&gt; clause는 &lt;code&gt;b&lt;/code&gt; 가 &lt;code&gt;Derived&lt;/code&gt; 의 오브젝트에 내부적으로 저장 되고 컴파일러가 &lt;code&gt;b&lt;/code&gt; 로 전달하는 &lt;code&gt;Base&lt;/code&gt; 의 모든 메소드를 생성 함을 나타냅니다 .</target>
        </trans-unit>
        <trans-unit id="213b555bea1db5677fa1e760ddedf7cc9bc757bb" translate="yes" xml:space="preserve">
          <source>The &lt;em&gt;else&lt;/em&gt; branch is evaluated if none of the other branch conditions are satisfied. If &lt;em&gt;when&lt;/em&gt; is used as an expression, the &lt;em&gt;else&lt;/em&gt; branch is mandatory, unless the compiler can prove that all possible cases are covered with branch conditions (as, for example, with &lt;a href=&quot;enum-classes&quot;&gt;&lt;em&gt;enum&lt;/em&gt; class&lt;/a&gt; entries and &lt;a href=&quot;sealed-classes&quot;&gt;&lt;em&gt;sealed&lt;/em&gt; class&lt;/a&gt; subtypes).</source>
          <target state="translated">&lt;em&gt;또&lt;/em&gt; 다른 가지 조건 중 어느 것도 충족되지 않은 경우 분기 평가된다. &lt;em&gt;when&lt;/em&gt; 가 표현식으로 사용될 경우 컴파일러가 가능한 모든 케이스가 분기 조건 (예 : &lt;a href=&quot;enum-classes&quot;&gt;&lt;em&gt;enum&lt;/em&gt;&lt;/a&gt; 클래스 항목 및 &lt;a href=&quot;sealed-classes&quot;&gt;&lt;em&gt;봉인&lt;/em&gt;&lt;/a&gt; 클래스 하위 유형) 으로 덮여 있음을 증명할 수없는 경우 &lt;em&gt;else&lt;/em&gt; 분기는 필수 입니다.&lt;em&gt;&lt;/em&gt;&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="61bf16ef28ea6d5682c3a6e4f7b1d1fca409774d" translate="yes" xml:space="preserve">
          <source>The &lt;em&gt;is&lt;/em&gt; operator checks if an expression is an instance of a type. If an immutable local variable or property is checked for a specific type, there's no need to cast it explicitly:</source>
          <target state="translated">는 &lt;em&gt;인&lt;/em&gt; 표현이 유형의 인스턴스의 경우 운전자 검사한다. 변경 불가능한 로컬 변수 또는 속성이 특정 유형에 대해 검사 된 경우 명시 적으로 캐스트 할 필요가 없습니다.</target>
        </trans-unit>
        <trans-unit id="f6350fa23a8337c14451639e9dda41ba02fbc154" translate="yes" xml:space="preserve">
          <source>The &lt;em&gt;kotlin-maven-plugin&lt;/em&gt; compiles Kotlin sources and modules. Currently only Maven v3 is supported.</source>
          <target state="translated">&lt;em&gt;코 틀린-받는다는 - 플러그인&lt;/em&gt; 컴파일 코 틀린 소스와 모듈. 현재 Maven v3 만 지원됩니다.</target>
        </trans-unit>
        <trans-unit id="ac3430431502d340786bc5ac5f5a79619bd1b1b8" translate="yes" xml:space="preserve">
          <source>The &lt;em&gt;mapping&lt;/em&gt; transformation creates a collection from the results of a function on the elements of another collection. The basic mapping function is &lt;a href=&quot;../../api/latest/jvm/stdlib/kotlin.collections/map&quot;&gt;&lt;code&gt;map()&lt;/code&gt;&lt;/a&gt;. It applies the given lambda function to each subsequent element and returns the list of the lambda results. The order of results is the same as the original order of elements. To apply a transformation that additionally uses the element index as an argument, use &lt;a href=&quot;../../api/latest/jvm/stdlib/kotlin.collections/map-indexed&quot;&gt;&lt;code&gt;mapIndexed()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;em&gt;맵핑&lt;/em&gt; 변환은 다른 집합의 요소의 기능의 결과로부터 집합을 생성한다. 기본 매핑 함수는 &lt;a href=&quot;../../api/latest/jvm/stdlib/kotlin.collections/map&quot;&gt; &lt;code&gt;map()&lt;/code&gt; &lt;/a&gt; 입니다. 주어진 람다 함수를 각 후속 요소에 적용하고 람다 결과 목록을 반환합니다. 결과 순서는 원래 요소 순서와 같습니다. 요소 인덱스를 추가로 인수로 사용하는 변환을 적용하려면 &lt;a href=&quot;../../api/latest/jvm/stdlib/kotlin.collections/map-indexed&quot;&gt; &lt;code&gt;mapIndexed()&lt;/code&gt; &lt;/a&gt; 사용 하십시오 .</target>
        </trans-unit>
        <trans-unit id="7f10d769163cad6919d11542a05d27b21373fb57" translate="yes" xml:space="preserve">
          <source>The &lt;em&gt;no-arg&lt;/em&gt; compiler plugin generates an additional zero-argument constructor for classes with a specific annotation.</source>
          <target state="translated">는 &lt;em&gt;인수 없음의&lt;/em&gt; 컴파일러 플러그인은 특정 주석을 가진 클래스에 대한 추가 제로 인수 생성자를 생성하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="5691855d07c59433c1b89721a503fe2ada65d67c" translate="yes" xml:space="preserve">
          <source>The &lt;em&gt;override&lt;/em&gt; modifier is required for &lt;code&gt;Circle.draw()&lt;/code&gt;. If it were missing, the compiler would complain. If there is no &lt;em&gt;open&lt;/em&gt; modifier on a function, like &lt;code&gt;Shape.fill()&lt;/code&gt;, declaring a method with the same signature in a subclass is illegal, either with &lt;em&gt;override&lt;/em&gt; or without it. The &lt;em&gt;open&lt;/em&gt; modifier has no effect when added on members of a final class (i.e.. a class with no &lt;em&gt;open&lt;/em&gt; modifier).</source>
          <target state="translated">&lt;code&gt;Circle.draw()&lt;/code&gt; 에는 &lt;em&gt;재정의&lt;/em&gt; 수정자가 필요합니다 . 누락 된 경우 컴파일러가 불평합니다. &lt;code&gt;Shape.fill()&lt;/code&gt; 과 같은 함수에 &lt;em&gt;열린&lt;/em&gt; 수정자가 없는 경우 하위 클래스에서 동일한 서명을 가진 메서드를 선언하는 것은 &lt;em&gt;재정의를 사용&lt;/em&gt; 하거나 사용하지 않고 불법 입니다. &lt;em&gt;열린&lt;/em&gt; 최종 클래스 (예. 아니오 클래스의 멤버에 추가 할 때 수정이 적용되지 않습니다 &lt;em&gt;열어&lt;/em&gt; 수정).&lt;em&gt;&lt;/em&gt;&lt;em&gt;&lt;/em&gt;&lt;em&gt;&lt;/em&gt;&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="c23eadbd5827ce2bda3043305cafb8fee54b97d1" translate="yes" xml:space="preserve">
          <source>The &lt;em&gt;override&lt;/em&gt; modifier is required for &lt;code&gt;Derived.v()&lt;/code&gt;. If it were missing, the compiler would complain. If there is no &lt;em&gt;open&lt;/em&gt; modifier on a function, like &lt;code&gt;Base.nv()&lt;/code&gt;, declaring a method with the same signature in a subclass is illegal, either with &lt;em&gt;override&lt;/em&gt; or without it. The &lt;em&gt;open&lt;/em&gt; modifier has no effect when added on members of a final class (i.e.. a class with no &lt;em&gt;open&lt;/em&gt; modifier).</source>
          <target state="translated">&lt;em&gt;재정의&lt;/em&gt; 수정이 필요 &lt;code&gt;Derived.v()&lt;/code&gt; . 누락 된 경우 컴파일러가 불평합니다. 함수에 &lt;code&gt;Base.nv()&lt;/code&gt; 와 같은 &lt;em&gt;열린&lt;/em&gt; 수정자가 없는 경우 , 서브 클래스에서 동일한 서명을 가진 메소드를 &lt;em&gt;재정의&lt;/em&gt; 하거나 사용하지 않고 선언하는 것은 유효 하지 않습니다. &lt;em&gt;열린&lt;/em&gt; 최종 클래스 (즉. 아니오 클래스의 멤버에 추가 할 때 수정이 적용되지 않습니다 &lt;em&gt;열어&lt;/em&gt; 수정).&lt;em&gt;&lt;/em&gt;&lt;em&gt;&lt;/em&gt;&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="7a6efa4e40ec720cdbba584f5f17332e3c02e6f0" translate="yes" xml:space="preserve">
          <source>The &lt;em&gt;primitive data types&lt;/em&gt; are the most fundamental types in Kotlin; all other types are built up of these types and arrays thereof. Their representation is very efficient (both in terms of memory and CPU time), as they map to small byte groups that are directly manipulatable by the CPU.</source>
          <target state="translated">&lt;em&gt;기본 데이터 타입은&lt;/em&gt; 코 틀린 가장 기본적인 종류; 다른 모든 유형은 이러한 유형과 그 배열로 구성됩니다. CPU에서 직접 조작 할 수있는 작은 바이트 그룹에 매핑되므로 메모리 및 CPU 시간 측면에서 매우 효율적으로 표현됩니다.</target>
        </trans-unit>
        <trans-unit id="487cd135e968638b95e9f2832e5094575fc75a4e" translate="yes" xml:space="preserve">
          <source>The &lt;em&gt;return&lt;/em&gt;-expression returns from the nearest enclosing function, i.e. &lt;code&gt;foo&lt;/code&gt;. (Note that such non-local returns are supported only for lambda expressions passed to &lt;a href=&quot;inline-functions&quot;&gt;inline functions&lt;/a&gt;.) If we need to return from a lambda expression, we have to label it and qualify the &lt;em&gt;return&lt;/em&gt;:</source>
          <target state="translated">&lt;em&gt;반환&lt;/em&gt; 가장 가까운 바깥 쪽 함수의 -expression 반환, 즉 &lt;code&gt;foo&lt;/code&gt; 는 . (로컬이 아닌 리턴은 &lt;a href=&quot;inline-functions&quot;&gt;인라인 함수에&lt;/a&gt; 전달 된 람다 표현식에만 지원됩니다 .) 람다 표현식에서 리턴해야하는 경우 레이블을 지정하고 &lt;em&gt;리턴을 규정&lt;/em&gt; 해야합니다 .</target>
        </trans-unit>
        <trans-unit id="cafe8afb40f89fdcda59dc51de02a6061deac76b" translate="yes" xml:space="preserve">
          <source>The &lt;em&gt;sam-with-receiver&lt;/em&gt; compiler plugin makes the first parameter of the annotated Java &quot;single abstract method&quot; (SAM) interface method a receiver in Kotlin. This conversion only works when the SAM interface is passed as a Kotlin lambda, both for SAM adapters and SAM constructors (see the &lt;a href=&quot;java-interop#sam-conversions&quot;&gt;documentation&lt;/a&gt; for more details).</source>
          <target state="translated">&lt;em&gt;SAM-와 수신기&lt;/em&gt; 컴파일러 플러그인은 주석 자바 &quot;하나의 추상적 인 방법&quot;(SAM) 인터페이스 메서드의 첫 번째 매개 변수 코 틀린에 수신기를한다. 이 변환은 SAM 인터페이스가 SAM 어댑터 및 SAM 생성자 모두에 대해 Kotlin 람다로 전달 될 때만 작동합니다 (자세한 내용은 &lt;a href=&quot;java-interop#sam-conversions&quot;&gt;설명서&lt;/a&gt; 참조).</target>
        </trans-unit>
        <trans-unit id="2b5aab8f26eb6a59834e5185db5f935d540467ca" translate="yes" xml:space="preserve">
          <source>The &lt;em&gt;this&lt;/em&gt; keyword inside an extension function corresponds to the receiver object (the one that is passed before the dot). Now, we can call such a function on any &lt;code&gt;MutableList&amp;lt;Int&amp;gt;&lt;/code&gt;:</source>
          <target state="translated">확장 함수 내부 의 &lt;em&gt;this&lt;/em&gt; 키워드는 수신자 객체 (점 앞에 전달 된)에 해당합니다. 이제 모든 &lt;code&gt;MutableList&amp;lt;Int&amp;gt;&lt;/code&gt; 에서 이러한 함수를 호출 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="610610ce4b9c2a06c0d2c740b86b1595d612ed87" translate="yes" xml:space="preserve">
          <source>The &lt;em&gt;when&lt;/em&gt; expression replaces the switch statement in C-like languages. In the simplest form it looks like this</source>
          <target state="translated">&lt;em&gt;때&lt;/em&gt; 표현 언어 C - 같은 스위치 문을 대체합니다. 가장 간단한 형태는 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="e4593e8bf83aea9987066006e1b0abd71f9ad1e3" translate="yes" xml:space="preserve">
          <source>The &lt;strong&gt;Coroutines&lt;/strong&gt; tab contains information on running or suspended coroutines.</source>
          <target state="translated">&lt;strong&gt;코 루틴&lt;/strong&gt; 탭은 실행 중이거나 일시 중지 코 루틴에 대한 정보가 포함되어 있습니다.</target>
        </trans-unit>
        <trans-unit id="fc25df34385ceb3cf4562e5af15fbfdf26d8c120" translate="yes" xml:space="preserve">
          <source>The &lt;strong&gt;Coroutines&lt;/strong&gt; tab contains information on running or suspended coroutines. It shows that there are three coroutines. The first one has the &lt;strong&gt;RUNNING&lt;/strong&gt; status, and the other two have the &lt;strong&gt;CREATED&lt;/strong&gt; status.</source>
          <target state="translated">&lt;strong&gt;코 루틴&lt;/strong&gt; 탭은 실행 중이거나 일시 중지 코 루틴에 대한 정보가 포함되어 있습니다. 세 개의 코 루틴이 있음을 보여줍니다. 첫 번째는 &lt;strong&gt;RUNNING&lt;/strong&gt; 상태이고 다른 두 개는 &lt;strong&gt;CREATED&lt;/strong&gt; 상태입니다.</target>
        </trans-unit>
        <trans-unit id="788f812830f8a46ef15a78708bb404f883cce900" translate="yes" xml:space="preserve">
          <source>The &lt;strong&gt;Debug Tool Window&lt;/strong&gt; now contains a new &lt;strong&gt;Coroutines&lt;/strong&gt; tab. In this tab, you can find information about both currently running and suspended coroutines. The coroutines are grouped by the dispatcher they are running on.</source>
          <target state="translated">&lt;strong&gt;디버그 도구 창은&lt;/strong&gt; 이제 새로운 포함 &lt;strong&gt;코 루틴&lt;/strong&gt; 탭을 선택합니다. 이 탭에서 현재 실행중인 코 루틴과 일시 중단 된 코 루틴에 대한 정보를 찾을 수 있습니다. 코 루틴은 실행중인 디스패처별로 그룹화됩니다.</target>
        </trans-unit>
        <trans-unit id="5b6868e043da075558049d4d1c51d3e16f9899e6" translate="yes" xml:space="preserve">
          <source>The &lt;strong&gt;Debug&lt;/strong&gt; tool window appears.</source>
          <target state="translated">&lt;strong&gt;디버그&lt;/strong&gt; 도구 창이 나타납니다.</target>
        </trans-unit>
        <trans-unit id="48f0ab099248e8d585f6091eee52384ecaffb465" translate="yes" xml:space="preserve">
          <source>The &lt;strong&gt;Debug&lt;/strong&gt; tool window appears:</source>
          <target state="translated">&lt;strong&gt;디버그&lt;/strong&gt; 도구 창이 나타납니다 :</target>
        </trans-unit>
        <trans-unit id="4474dcb438fb0b1d5730dee1b01c00e81230dea0" translate="yes" xml:space="preserve">
          <source>The &lt;strong&gt;Debug&lt;/strong&gt; tool window contains the &lt;strong&gt;Coroutines&lt;/strong&gt; tab. In this tab, you can find information about both currently running and suspended coroutines. The coroutines are grouped by the dispatcher they are running on.</source>
          <target state="translated">&lt;strong&gt;디버그&lt;/strong&gt; 도구 창은 포함 &lt;strong&gt;코 루틴&lt;/strong&gt; 탭을 선택합니다. 이 탭에서 현재 실행중인 코 루틴과 일시 중단 된 코 루틴에 대한 정보를 찾을 수 있습니다. 코 루틴은 실행중인 디스패처별로 그룹화됩니다.</target>
        </trans-unit>
        <trans-unit id="0944c672efb8d3cb2c26dddcbfd14a013cec2059" translate="yes" xml:space="preserve">
          <source>The &lt;strong&gt;Frames&lt;/strong&gt; tab contains the call stack.</source>
          <target state="translated">&lt;strong&gt;프레임&lt;/strong&gt; 탭은 호출 스택이 포함되어 있습니다.</target>
        </trans-unit>
        <trans-unit id="7bf4380b0d9c396f248496156eecf62a4cafb8d3" translate="yes" xml:space="preserve">
          <source>The &lt;strong&gt;Variables&lt;/strong&gt; tab contains variables in the current context.</source>
          <target state="translated">&lt;strong&gt;변수&lt;/strong&gt; 탭은 현재 컨텍스트의 변수가 포함되어 있습니다.</target>
        </trans-unit>
        <trans-unit id="c4f79bc1fa7ad1d6857747747252bb7bc3cfc87c" translate="yes" xml:space="preserve">
          <source>The &lt;strong&gt;Variables&lt;/strong&gt; tab contains variables in the current context. It tells us that the flow is emitting the first value.</source>
          <target state="translated">&lt;strong&gt;변수&lt;/strong&gt; 탭은 현재 컨텍스트의 변수가 포함되어 있습니다. 흐름이 첫 번째 값을 방출하고 있음을 알려줍니다.</target>
        </trans-unit>
        <trans-unit id="64ff96f8d5986618b0177325f56f06db0b6ef27e" translate="yes" xml:space="preserve">
          <source>The &lt;strong&gt;cinterop&lt;/strong&gt; tool produces &lt;code&gt;.klib&lt;/code&gt; wrappers for native libraries as its main output. For example, using the simple &lt;code&gt;libgit2.def&lt;/code&gt; native library definition file provided in your Kotlin/Native distribution</source>
          <target state="translated">&lt;strong&gt;cinterop의&lt;/strong&gt; 도구 생산 &lt;code&gt;.klib&lt;/code&gt; 주요 출력으로 네이티브 라이브러리에 대해 래퍼를. 예를 들어 Kotlin / Native 배포에 제공된 간단한 &lt;code&gt;libgit2.def&lt;/code&gt; 기본 라이브러리 정의 파일 사용</target>
        </trans-unit>
        <trans-unit id="3afe66cbf747b6ceb2175d27e523f7de3f8680c5" translate="yes" xml:space="preserve">
          <source>The &lt;strong&gt;klib&lt;/strong&gt; library management utility allows you to inspect and install the libraries.</source>
          <target state="translated">&lt;strong&gt;klib의&lt;/strong&gt; 라이브러리 관리 유틸리티를 사용하면 검사하고 라이브러리를 설치할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="4754f312fedbc815f86ed89afbc9edf502f5ba2a" translate="yes" xml:space="preserve">
          <source>The &lt;strong&gt;out&lt;/strong&gt; modifier is called a &lt;strong&gt;variance annotation&lt;/strong&gt;, and since it is provided at the type parameter declaration site, we talk about &lt;strong&gt;declaration-site variance&lt;/strong&gt;. This is in contrast with Java's &lt;strong&gt;use-site variance&lt;/strong&gt; where wildcards in the type usages make the types covariant.</source>
          <target state="translated">&lt;strong&gt;아웃&lt;/strong&gt; 수정은이라고 &lt;strong&gt;분산 주석을&lt;/strong&gt; , 그리고 그것은 형식 매개 변수 선언 사이트에서 제공되기 때문에, 우리는 이야기 &lt;strong&gt;선언 사이트 분산&lt;/strong&gt; . 이는 유형 사용에서 와일드 카드가 유형을 공변량으로 만드는 Java의 &lt;strong&gt;사용 사이트 차이&lt;/strong&gt; 와 대조적입니다 .</target>
        </trans-unit>
        <trans-unit id="e4cdeee14d0ede31e2c00aaa982268d6ad103b09" translate="yes" xml:space="preserve">
          <source>The &lt;strong&gt;wildcard type argument&lt;/strong&gt;&lt;code&gt;? extends E&lt;/code&gt; indicates that this method accepts a collection of objects of &lt;code&gt;E&lt;/code&gt;&lt;em&gt;or some subtype of&lt;/em&gt;&lt;code&gt;E&lt;/code&gt;, not just &lt;code&gt;E&lt;/code&gt; itself. This means that we can safely &lt;strong&gt;read&lt;/strong&gt;&lt;code&gt;E&lt;/code&gt;'s from items (elements of this collection are instances of a subclass of E), but &lt;strong&gt;cannot write&lt;/strong&gt; to it since we do not know what objects comply to that unknown subtype of &lt;code&gt;E&lt;/code&gt;. In return for this limitation, we have the desired behaviour: &lt;code&gt;Collection&amp;lt;String&amp;gt;&lt;/code&gt;&lt;em&gt;is&lt;/em&gt; a subtype of &lt;code&gt;Collection&amp;lt;? extends Object&amp;gt;&lt;/code&gt;. In &quot;clever words&quot;, the wildcard with an &lt;strong&gt;extends&lt;/strong&gt;-bound (&lt;strong&gt;upper&lt;/strong&gt; bound) makes the type &lt;strong&gt;covariant&lt;/strong&gt;.</source>
          <target state="translated">&lt;strong&gt;와일드 카드 형식 인수 &lt;/strong&gt; &lt;code&gt;? extends E&lt;/code&gt; 이 방법의 개체의 컬렉션 받아들이는 것을 나타냅니다 &lt;code&gt;E&lt;/code&gt; &lt;em&gt;또는 일부 하위 유형 &lt;/em&gt; &lt;code&gt;E&lt;/code&gt; 를 , 그냥 &lt;code&gt;E&lt;/code&gt; 자체를. 즉 , 항목에서 &lt;code&gt;E&lt;/code&gt; 를 안전하게 &lt;strong&gt;읽을&lt;/strong&gt; 수 있지만 (이 컬렉션의 요소는 E의 하위 클래스 인스턴스 임) 알 수없는 &lt;code&gt;E&lt;/code&gt; 의 하위 유형을 준수하는 개체가 무엇인지 알 &lt;strong&gt;수 없으므로 쓸 수 없습니다&lt;/strong&gt; . 이 제한에 대한 대가로, 원하는 동작이 있습니다 : &lt;code&gt;Collection&amp;lt;String&amp;gt;&lt;/code&gt; &lt;em&gt;은 &lt;/em&gt; &lt;code&gt;Collection&amp;lt;? extends Object&amp;gt;&lt;/code&gt; 의 하위 유형 입니까? Object&amp;gt;를 확장합니다 . &quot;영리한 단어&quot;에서 &lt;strong&gt;확장&lt;/strong&gt; 범위가 있는 와일드 카드 ( &lt;strong&gt;위&lt;/strong&gt;&lt;strong&gt;&lt;/strong&gt;&lt;em&gt;&lt;/em&gt;&lt;strong&gt;&lt;/strong&gt;&lt;strong&gt;&lt;/strong&gt;bound) 유형을 &lt;strong&gt;공변량으로&lt;/strong&gt; 만듭니다 .</target>
        </trans-unit>
        <trans-unit id="1a90eeb87b3e982cfd1ef4a4b65cfd6c27586462" translate="yes" xml:space="preserve">
          <source>The Android world has many popular frameworks simplifying development. You can use the same frameworks if you develop in Kotlin, often as easily as you'd do that in Java. This tutorial provides examples and highlights the differences in settings.</source>
          <target state="translated">Android 세계에는 개발을 단순화하는 인기있는 프레임 워크가 많이 있습니다. Kotlin에서 개발하는 경우 Java에서와 마찬가지로 쉽게 동일한 프레임 워크를 사용할 수 있습니다. 이 학습서는 예제를 제공하고 설정의 차이점을 강조합니다.</target>
        </trans-unit>
        <trans-unit id="3430e3a872bb2996105b11f8b1c91c259c56b1b4" translate="yes" xml:space="preserve">
          <source>The Bintray plugin doesn&amp;rsquo;t support publishing Gradle module metadata, but there are a couple of ways to get around this issue:</source>
          <target state="translated">Bintray 플러그인은 Gradle 모듈 메타 데이터 게시를 지원하지 않지만이 문제를 해결할 수있는 몇 가지 방법이 있습니다.</target>
        </trans-unit>
        <trans-unit id="d41ba3261445c389f8874772f5879ab48af811af" translate="yes" xml:space="preserve">
          <source>The C data variable containing the pointer to &lt;code&gt;T&lt;/code&gt;.</source>
          <target state="translated">포인터 함유 C 데이터 변수 &lt;code&gt;T&lt;/code&gt; 를 .</target>
        </trans-unit>
        <trans-unit id="05360f394dd3e60e07e614be2588088eb89e3b72" translate="yes" xml:space="preserve">
          <source>The C data variable located in memory.</source>
          <target state="translated">메모리에있는 C 데이터 변수</target>
        </trans-unit>
        <trans-unit id="cf919179eecf4647d490ce563cdd6bff132af96d" translate="yes" xml:space="preserve">
          <source>The C function.</source>
          <target state="translated">C 함수.</target>
        </trans-unit>
        <trans-unit id="d36502dcbc1bebedd6773776218e3117a26820bc" translate="yes" xml:space="preserve">
          <source>The C primitive-typed variable located in memory.</source>
          <target state="translated">메모리에있는 C 기본 유형 변수입니다.</target>
        </trans-unit>
        <trans-unit id="639b72b8a51545cc688d8100df8871c5e14d7a1a" translate="yes" xml:space="preserve">
          <source>The C struct-typed variable located in memory.</source>
          <target state="translated">메모리에있는 C 구조체 유형 변수</target>
        </trans-unit>
        <trans-unit id="c4b0fbfe88d7c41e706fcbcc447e39c33c492192" translate="yes" xml:space="preserve">
          <source>The CocoaPods plugin also allows using CocoaPods libraries without manual configuring cinterop parameters (see the &lt;a href=&quot;../building-mpp-with-gradle#cinterop-support&quot;&gt;corresponding section&lt;/a&gt; of the multiplatform plugin documentation). The &lt;code&gt;cocoapods { ... }&lt;/code&gt; code block allows you to add dependencies on CocoaPods libraries.</source>
          <target state="translated">CocoaPods 플러그인을 사용하면 cinterop 매개 변수를 수동으로 구성하지 않고도 CocoaPods 라이브러리를 사용할 수 있습니다 ( 멀티 플랫폼 플러그인 문서 의 &lt;a href=&quot;../building-mpp-with-gradle#cinterop-support&quot;&gt;해당 섹션&lt;/a&gt; 참조 ). &lt;code&gt;cocoapods { ... }&lt;/code&gt; 코드 블록은 CocoaPods 라이브러리에 종속성을 추가 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="8779fd3a2cac48558378b86549bbda66333c4276" translate="yes" xml:space="preserve">
          <source>The CocoaPods support is implemented in a separate Gradle plugin: &lt;code&gt;org.jetbrains.kotlin.native.cocoapods&lt;/code&gt;.</source>
          <target state="translated">CocoaPods 지원은 별도의 Gradle 플러그인 &lt;code&gt;org.jetbrains.kotlin.native.cocoapods&lt;/code&gt; 에서 구현됩니다 .</target>
        </trans-unit>
        <trans-unit id="bd3aa1e3e57f3eb3ef63cd39980df09053647402" translate="yes" xml:space="preserve">
          <source>The Coroutine Debugger of the Kotlin plugin simplifies debugging coroutines in IntelliJ IDEA.</source>
          <target state="translated">Kotlin 플러그인의 코 루틴 디버거는 IntelliJ IDEA에서 코 루틴 디버깅을 단순화합니다.</target>
        </trans-unit>
        <trans-unit id="24a56079ca4afabfa7a909e10193add3dd7a492a" translate="yes" xml:space="preserve">
          <source>The DOM also provides us a way to retrieve a specific element by ID, name, class name, tag name and so on. All returned elements are of type &lt;code&gt;NodeList&lt;/code&gt;, and to access members we need to cast them to the specific type of element. The code below shows how we could access an input element on the page:</source>
          <target state="translated">DOM은 또한 ID, 이름, 클래스 이름, 태그 이름 등으로 특정 요소를 검색하는 방법을 제공합니다. 반환 된 모든 요소는 &lt;code&gt;NodeList&lt;/code&gt; 유형 이며 멤버에 액세스하려면 특정 유형의 요소로 캐스트해야합니다. 아래 코드는 페이지의 입력 요소에 액세스하는 방법을 보여줍니다.</target>
        </trans-unit>
        <trans-unit id="5e5d725eeffdb400057e1d8991c3e79a23a2a6af" translate="yes" xml:space="preserve">
          <source>The Dukat integration for Gradle has received minor naming and functionality changes with Kotlin 1.4.0.</source>
          <target state="translated">Gradle 용 Dukat 통합은 Kotlin 1.4.0에서 약간의 이름 지정 및 기능 변경을 받았습니다.</target>
        </trans-unit>
        <trans-unit id="325910eae4ee7077ed16505d94cb7161a53ff4ff" translate="yes" xml:space="preserve">
          <source>The Entry Point</source>
          <target state="translated">진입 점</target>
        </trans-unit>
        <trans-unit id="c1f2de3caa83760aa037581086bf37c054caebbb" translate="yes" xml:space="preserve">
          <source>The Gradle file is pretty much standard for Spring Boot. The only differences are the structure layout for source folders for Kotlin, the required Kotlin dependencies and the &lt;a href=&quot;../reference/compiler-plugins#kotlin-spring-compiler-plugi&quot;&gt;&lt;em&gt;kotlin-spring&lt;/em&gt;&lt;/a&gt; Gradle plugin (CGLIB proxies used for example for &lt;code&gt;@Configuration&lt;/code&gt; and &lt;code&gt;@Bean&lt;/code&gt; processing require &lt;code&gt;open&lt;/code&gt; classes).</source>
          <target state="translated">Gradle 파일은 Spring Boot의 표준입니다. 유일한 차이점은 Kotlin의 소스 폴더, 필요한 Kotlin 종속성 및 &lt;a href=&quot;../reference/compiler-plugins#kotlin-spring-compiler-plugi&quot;&gt;&lt;em&gt;kotlin-spring&lt;/em&gt;&lt;/a&gt; Gradle 플러그인 의 구조 레이아웃입니다 (예 : &lt;code&gt;@Configuration&lt;/code&gt; 및 &lt;code&gt;@Bean&lt;/code&gt; 처리에 사용되는 CGLIB 프록시 에는 &lt;code&gt;open&lt;/code&gt; 클래스가 필요함 ).</target>
        </trans-unit>
        <trans-unit id="af4ea41e06d67df72de18198c84923c5e721e071" translate="yes" xml:space="preserve">
          <source>The Gradle plugin provides a separate task that creates a universal framework for iOS targets from several regular ones. The example below shows how to use this task. Note that the fat framework must have the same base name as the initial frameworks.</source>
          <target state="translated">Gradle 플러그인은 여러 일반 대상에서 iOS 대상에 대한 범용 프레임 워크를 작성하는 별도의 태스크를 제공합니다. 아래 예는이 작업을 사용하는 방법을 보여줍니다. 팻 프레임 워크는 초기 프레임 워크와 기본 이름이 같아야합니다.</target>
        </trans-unit>
        <trans-unit id="9f74ca6bef3427e6249723da9d4ccaf98eb70bf4" translate="yes" xml:space="preserve">
          <source>The Groovy language is the first supported scripting language for Gradle, it leverages the power of dynamic typing and runtime features of the language. It is also possible to use Kotlin in Gradle scripts. Being a statically-typed language, it plays better with IDEs when it comes to compilation and error detection.</source>
          <target state="translated">Groovy 언어는 Gradle 용으로 지원되는 첫 번째 스크립팅 언어이며 동적 타이핑 및 언어의 런타임 기능을 활용합니다. Gradle 스크립트에서 Kotlin을 사용할 수도 있습니다. 정적으로 형식화 된 언어이기 때문에 컴파일 및 오류 감지와 관련하여 IDE에서 더 잘 작동합니다.</target>
        </trans-unit>
        <trans-unit id="efa31b56beb50cb747605ae05725fa853a4a4ec2" translate="yes" xml:space="preserve">
          <source>The IR backend &lt;strong&gt;does not make Kotlin declarations available to JavaScript&lt;/strong&gt; by default at all. To make Kotlin declarations visible to JavaScript, they &lt;strong&gt;must be&lt;/strong&gt; annotated with &lt;a href=&quot;js-to-kotlin-interop#jsexport-annotation&quot;&gt;&lt;code&gt;@JsExport&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">IR 백엔드 &lt;strong&gt;는&lt;/strong&gt; 기본적 &lt;strong&gt;으로 JavaScript에서 Kotlin 선언을 사용할 수 있도록하지 않습니다&lt;/strong&gt; . Kotlin 선언을 자바 스크립트에 표시하려면 &lt;a href=&quot;js-to-kotlin-interop#jsexport-annotation&quot;&gt; &lt;code&gt;@JsExport&lt;/code&gt; &lt;/a&gt;&lt;strong&gt; 로&lt;/strong&gt; 주석을 달아야 합니다.</target>
        </trans-unit>
        <trans-unit id="755fcf74e20f2d2ddd913b11ca69555b3cbd9313" translate="yes" xml:space="preserve">
          <source>The IR compiler backend also has some discrepancies in comparison to the default backend. When trying out the new backend, it's good to be mindful of these possible pitfalls.</source>
          <target state="translated">IR 컴파일러 백엔드에는 기본 백엔드와 비교하여 약간의 불일치가 있습니다. 새로운 백엔드를 시도 할 때 이러한 가능한 함정을 염두에 두는 것이 좋습니다.</target>
        </trans-unit>
        <trans-unit id="4151edd0fc4780c88357f0d2094d84de6aa64553" translate="yes" xml:space="preserve">
          <source>The IR compiler backend is available starting with Kotlin 1.4.0 through the Kotlin/JS Gradle plugin. To enable it in your project, pass a compiler type to the &lt;code&gt;js&lt;/code&gt; function in your Gradle build script:</source>
          <target state="translated">IR 컴파일러 백엔드는 Kotlin 1.4.0부터 Kotlin / JS Gradle 플러그인을 통해 사용할 수 있습니다. 프로젝트에서 활성화하려면 Gradle 빌드 스크립트 의 &lt;code&gt;js&lt;/code&gt; 함수에 컴파일러 유형을 전달합니다 .</target>
        </trans-unit>
        <trans-unit id="c9686505fe7f54579b832493ec5b1983b12000c6" translate="yes" xml:space="preserve">
          <source>The JS typed arrays support that translates Kotlin primitive arrays, such as &lt;code&gt;IntArray&lt;/code&gt;, &lt;code&gt;DoubleArray&lt;/code&gt;, into &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Typed_arrays&quot;&gt;JavaScript typed arrays&lt;/a&gt;, that was previously an opt-in feature, has been enabled by default.</source>
          <target state="translated">JS 유형 배열 지원은 &lt;code&gt;IntArray&lt;/code&gt; , &lt;code&gt;DoubleArray&lt;/code&gt; 와 같은 Kotlin 기본 배열 을 이전에 옵트 인 기능인 &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Typed_arrays&quot;&gt;JavaScript 유형 배열&lt;/a&gt; 로 변환 하는 기능을 기본적으로 활성화했습니다.</target>
        </trans-unit>
        <trans-unit id="37ed5aeb9956cf68199e058567f26ab71cd7268f" translate="yes" xml:space="preserve">
          <source>The JSR-305 checks can be configured by adding the &lt;code&gt;-Xjsr305&lt;/code&gt; compiler flag with the following options (and their combination):</source>
          <target state="translated">JSR-305 검사는 다음 옵션 (및 그 조합)과 함께 &lt;code&gt;-Xjsr305&lt;/code&gt; 컴파일러 플래그를 추가하여 구성 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="c894b80f33c243fce1a6e9a404bf349725ee326a" translate="yes" xml:space="preserve">
          <source>The Java source files are placed in the child directories of the Kotlin source roots. For example, the paths are:</source>
          <target state="translated">자바 소스 파일은 Kotlin 소스 루트의 하위 디렉토리에 있습니다. 예를 들어 경로는 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="51612587c1c419278f755138c2099bb90c306242" translate="yes" xml:space="preserve">
          <source>The Jupyter Notebook is an open-source web application that allows you to create and share documents (aka &quot;notebooks&quot;) that can contain code, visualizations, and markdown text. &lt;a href=&quot;https://github.com/Kotlin/kotlin-jupyter&quot;&gt;Kotlin-jupyter&lt;/a&gt; is an open source project that brings Kotlin support to Jupyter Notebook.</source>
          <target state="translated">Jupyter Notebook은 코드, 시각화 및 마크 다운 텍스트를 포함 할 수있는 문서 ( &quot;노트북&quot;이라고도 함)를 만들고 공유 할 수있는 오픈 소스 웹 애플리케이션입니다. &lt;a href=&quot;https://github.com/Kotlin/kotlin-jupyter&quot;&gt;Kotlin-jupyter&lt;/a&gt; 는 Jupyter Notebook에 Kotlin 지원을 제공하는 오픈 소스 프로젝트입니다.</target>
        </trans-unit>
        <trans-unit id="8614662835decc941fb88cef784012c8f902a438" translate="yes" xml:space="preserve">
          <source>The Kotlin Android Extensions plugin allows us to obtain the same experience we have with some of these libraries, without having to add any extra code.</source>
          <target state="translated">Kotlin Android Extensions 플러그인을 사용하면 추가 코드를 추가하지 않고도 이러한 라이브러리 중 일부와 동일한 경험을 얻을 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="3fa035c9f4f03b0b989b6313990e3a366a7fc07b" translate="yes" xml:space="preserve">
          <source>The Kotlin Gradle plugin 1.4.10 works with Gradle 5.4 and later. The &lt;code&gt;kotlin-multiplatform&lt;/code&gt; plugin requires Gradle 6.0 or later.</source>
          <target state="translated">Kotlin Gradle 플러그인 1.4.10은 Gradle 5.4 이상에서 작동합니다. &lt;code&gt;kotlin-multiplatform&lt;/code&gt; 플러그인은 Gradle을 6.0 이상이 필요합니다.</target>
        </trans-unit>
        <trans-unit id="b801cd7f041e6d90c21e7238c859980046339a8a" translate="yes" xml:space="preserve">
          <source>The Kotlin Gradle plugin supports incremental compilation. Incremental compilation tracks changes of source files between builds so only files affected by these changes would be compiled.</source>
          <target state="translated">Kotlin Gradle 플러그인은 증분 컴파일을 지원합니다. 증분 컴파일은 빌드 간의 소스 파일 변경을 추적하므로 이러한 변경의 영향을받는 파일 만 컴파일됩니다.</target>
        </trans-unit>
        <trans-unit id="11818c172874b525f41c4774ffd3a8d06183ee2a" translate="yes" xml:space="preserve">
          <source>The Kotlin Maven Plugin needs to be referenced to compile the sources:</source>
          <target state="translated">소스를 컴파일하려면 Kotlin Maven 플러그인을 참조해야합니다.</target>
        </trans-unit>
        <trans-unit id="07861e97fff4148e0e2dc19059a6eb8ea6818607" translate="yes" xml:space="preserve">
          <source>The Kotlin Multiplatform Gradle plugin is a tool for creating &lt;a href=&quot;multiplatform&quot;&gt;Kotlin multiplatform&lt;/a&gt; projects. Here we provide a reference of its contents; use it as a reminder when writing Gradle build scripts for Kotlin multiplatform projects. Learn the &lt;a href=&quot;mpp-intro&quot;&gt;concepts of Kotlin multiplatform projects, how to create and configure them&lt;/a&gt;.</source>
          <target state="translated">Kotlin 멀티 플랫폼 Gradle 플러그인은 &lt;a href=&quot;multiplatform&quot;&gt;Kotlin 멀티 플랫폼&lt;/a&gt; 프로젝트 를 만들기위한 도구입니다 . 여기서 우리는 그 내용에 대한 참조를 제공합니다. Kotlin 멀티 플랫폼 프로젝트 용 Gradle 빌드 스크립트를 작성할 때 알림으로 사용하세요. &lt;a href=&quot;mpp-intro&quot;&gt;Kotlin 멀티 플랫폼 프로젝트&lt;/a&gt; 의 개념, 생성 및 구성 방법을 알아 봅니다 .</target>
        </trans-unit>
        <trans-unit id="d8c1bd6ec83b1ddaba95f254c85ffd64b43ba2c8" translate="yes" xml:space="preserve">
          <source>The Kotlin Project Wizard will only show the build systems supported on the selected project template.</source>
          <target state="translated">Kotlin 프로젝트 마법사는 선택한 프로젝트 템플릿에서 지원되는 빌드 시스템 만 표시합니다.</target>
        </trans-unit>
        <trans-unit id="37663063036a12a6822fa57324a6d2a0ee490515" translate="yes" xml:space="preserve">
          <source>The Kotlin Scripting API now provides the ability to implement a compiled scripts cache, significantly speeding up subsequent executions of unchanged scripts. Our default advanced script implementation &lt;code&gt;kotlin-main-kts&lt;/code&gt; already has its own cache.</source>
          <target state="translated">Kotlin Scripting API는 이제 컴파일 된 스크립트 캐시를 구현하는 기능을 제공하여 변경되지 않은 스크립트의 후속 실행 속도를 크게 높입니다. 기본 고급 스크립트 구현 &lt;code&gt;kotlin-main-kts&lt;/code&gt; 에는 이미 자체 캐시가 있습니다.</target>
        </trans-unit>
        <trans-unit id="e701f1b663fc8e1d541e7d7bed4b022ef1cd48e3" translate="yes" xml:space="preserve">
          <source>The Kotlin Standard Library provides a comprehensive set of tools for managing &lt;em&gt;collections&lt;/em&gt; &amp;ndash; groups of a variable number of items (possibly zero) that share significance to the problem being solved and are operated upon commonly.</source>
          <target state="translated">코 틀린 표준 라이브러리 (Kotlin Standard Library)는 &lt;em&gt;수집&lt;/em&gt; 을 관리하기위한 포괄적 인 도구 세트를 제공 합니다.이 문제는 해결해야 할 문제의 중요성을 공유하고 일반적으로 운영되는 다양한 수의 항목 그룹 (아마도 0)입니다.</target>
        </trans-unit>
        <trans-unit id="8a031299bd7c193b637e92a822d8538f69af9b3a" translate="yes" xml:space="preserve">
          <source>The Kotlin Standard Library provides implementations for basic collection types: sets, lists, and maps. A pair of interfaces represent each collection type:</source>
          <target state="translated">Kotlin 표준 라이브러리는 기본 컬렉션 유형 (세트, 목록 및 맵)에 대한 구현을 제공합니다. 한 쌍의 인터페이스는 각 컬렉션 유형을 나타냅니다.</target>
        </trans-unit>
        <trans-unit id="3f614163c9f0e1a9b558eccd140b5d89bbaff4cb" translate="yes" xml:space="preserve">
          <source>The Kotlin Standard Library provides living essentials for everyday work with Kotlin. These include:</source>
          <target state="translated">Kotlin 표준 라이브러리는 Kotlin과 일상적인 작업에 필요한 생활 필수 요소를 제공합니다. 여기에는 다음이 포함됩니다.</target>
        </trans-unit>
        <trans-unit id="33a29a3734d935aaab60c852c81fd82eccf705fa" translate="yes" xml:space="preserve">
          <source>The Kotlin code is turned into very similar looking code in Swift. There are some small differences, though. In Kotlin any &lt;code&gt;object&lt;/code&gt; has only one instance. Kotlin &lt;code&gt;object Object&lt;/code&gt; now has a constructor in Swift, and we use the &lt;code&gt;Object()&lt;/code&gt; syntax to access the only instance of it. The instance is always the same in Swift, so that &lt;code&gt;Object() === Object()&lt;/code&gt; is true. Methods and property names are translated as-is. Kotlin &lt;code&gt;String&lt;/code&gt; is turned into Swift &lt;code&gt;String&lt;/code&gt; too. Swift hides &lt;code&gt;NSNumber*&lt;/code&gt; boxing from us too. We pass Swift closure to Kotlin and call a Kotlin lambda function from Swift too.</source>
          <target state="translated">코 틀린 코드는 스위프트에서 매우 유사한 코드로 바뀌었다. 그래도 약간의 차이가 있습니다. Kotlin에서는 모든 &lt;code&gt;object&lt;/code&gt; 인스턴스가 하나만 있습니다. Kotlin &lt;code&gt;object Object&lt;/code&gt; 이제 Swift에 생성자를 가지며 &lt;code&gt;Object()&lt;/code&gt; 구문을 사용하여 유일한 인스턴스에 액세스합니다. Swift에서 인스턴스는 항상 동일하므로 &lt;code&gt;Object() === Object()&lt;/code&gt; 가 true입니다. 메서드와 속성 이름은있는 그대로 번역됩니다. Kotlin &lt;code&gt;String&lt;/code&gt; 도 Swift &lt;code&gt;String&lt;/code&gt; 으로 바뀝니다 . Swift는 &lt;code&gt;NSNumber*&lt;/code&gt; 권투도 숨 깁니다 . 우리는 Swift 클로저를 Kotlin으로 전달하고 Swift에서도 Kotlin 람다 함수를 호출합니다.</target>
        </trans-unit>
        <trans-unit id="a82d7ab28c8dc762af0699f165239106b9d7ca89" translate="yes" xml:space="preserve">
          <source>The Kotlin collections package contains extension functions for popular operations on sets: finding intersections, merging, or subtracting collections from each other.</source>
          <target state="translated">Kotlin 컬렉션 패키지에는 교차로 찾기, 병합 또는 서로 빼기 모음의 인기있는 작업을위한 확장 기능이 포함되어 있습니다.</target>
        </trans-unit>
        <trans-unit id="5352e834912895fb7e864dc749c6a67a63a5c1bd" translate="yes" xml:space="preserve">
          <source>The Kotlin collections package provides functions for sorting collections in natural, custom, and even random orders. On this page, we'll describe sorting functions that apply to &lt;a href=&quot;collections-overview#collection-types&quot;&gt;read-only&lt;/a&gt; collections. These functions return their result as a new collection containing the elements of the original collection in the requested order. To learn about functions for sorting &lt;a href=&quot;collections-overview#collection-types&quot;&gt;mutable&lt;/a&gt; collections in place, see the &lt;a href=&quot;list-operations#sorting&quot;&gt;List Specific Operations&lt;/a&gt;.</source>
          <target state="translated">Kotlin 컬렉션 패키지는 컬렉션을 자연스럽고, 맞춤이며, 무작위 순서로 정렬하는 기능을 제공합니다. 이 페이지에서는 &lt;a href=&quot;collections-overview#collection-types&quot;&gt;읽기 전용&lt;/a&gt; 컬렉션에 적용되는 정렬 기능에 대해 설명합니다 . 이 함수는 요청 된 순서로 원래 컬렉션의 요소를 포함하는 새 컬렉션으로 결과를 반환합니다. &lt;a href=&quot;collections-overview#collection-types&quot;&gt;변경 가능한&lt;/a&gt; 콜렉션을 적절히 정렬하는 기능에 대해 배우려면 &lt;a href=&quot;list-operations#sorting&quot;&gt;목록 특정 조작을&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="606ec4093466ccf8ac7dfb28ac45fda128eb6073" translate="yes" xml:space="preserve">
          <source>The Kotlin compiler can now use information from type casts in type inference. If you&amp;rsquo;re calling a generic method that returns a type parameter &lt;code&gt;T&lt;/code&gt; and casting the return value to a specific type &lt;code&gt;Foo&lt;/code&gt;, the compiler now understands that &lt;code&gt;T&lt;/code&gt; for this call needs to be bound to the type &lt;code&gt;Foo&lt;/code&gt;.</source>
          <target state="translated">코 틀린 컴파일러는 이제 타입 추론에서 타입 캐스트의 정보를 사용할 수 있습니다. 형식 매개 변수 &lt;code&gt;T&lt;/code&gt; 를 반환 하고 반환 값을 특정 형식 &lt;code&gt;Foo&lt;/code&gt; 로 캐스팅 하는 제네릭 메서드를 호출하는 경우 이제 컴파일러 는이 호출의 &lt;code&gt;T&lt;/code&gt; 가 &lt;code&gt;Foo&lt;/code&gt; 형식에 바인딩되어야 함을 이해합니다 .</target>
        </trans-unit>
        <trans-unit id="3ccc8c3cdb40fba2c36169a3fed32ce41fa13cee" translate="yes" xml:space="preserve">
          <source>The Kotlin compiler does extensive static analysis to provide warnings and reduce boilerplate. One of the most notable features is smartcasts &amp;mdash; with the ability to perform a cast automatically based on the performed type checks:</source>
          <target state="translated">Kotlin 컴파일러는 광범위한 정적 분석을 수행하여 경고를 제공하고 상용구를 줄입니다. 가장 주목할만한 기능 중 하나는 스마트 캐스트입니다. 수행 된 유형 검사에 따라 자동으로 캐스트를 수행 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="f6f1144b886b2db71119224ec2036f74f6631c9a" translate="yes" xml:space="preserve">
          <source>The Kotlin compiler for JS compiles Kotlin source files into JavaScript code. The command-line tool for Kotlin to JS compilation is &lt;code&gt;kotlinc-js&lt;/code&gt;.</source>
          <target state="translated">JS 용 Kotlin 컴파일러는 Kotlin 소스 파일을 자바 스크립트 코드로 컴파일합니다. Kotlin에서 JS로 컴파일하기위한 명령 줄 도구는 &lt;code&gt;kotlinc-js&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="6565c92ec29ec823a2bafa138ea555e7d88f3c13" translate="yes" xml:space="preserve">
          <source>The Kotlin compiler for JVM compiles Kotlin source files into Java class files. The command-line tools for Kotlin to JVM compilation are &lt;code&gt;kotlinc&lt;/code&gt; and &lt;code&gt;kotlinc-jvm&lt;/code&gt;. You can also use them for executing Kotlin script files.</source>
          <target state="translated">JVM 용 Kotlin 컴파일러는 Kotlin 소스 파일을 자바 클래스 파일로 컴파일합니다. Kotlin에서 JVM으로 컴파일하기위한 명령 줄 도구는 &lt;code&gt;kotlinc&lt;/code&gt; 및 &lt;code&gt;kotlinc-jvm&lt;/code&gt; 입니다. Kotlin 스크립트 파일을 실행하는 데 사용할 수도 있습니다.</target>
        </trans-unit>
        <trans-unit id="9b9028d4b3725e4248715dfa8cff6060191e14fa" translate="yes" xml:space="preserve">
          <source>The Kotlin compiler provides all the necessary information about &lt;code&gt;prop&lt;/code&gt; in the arguments: the first argument &lt;code&gt;this&lt;/code&gt; refers to an instance of the outer class &lt;code&gt;C&lt;/code&gt; and &lt;code&gt;this::prop&lt;/code&gt; is a reflection object of the &lt;code&gt;KProperty&lt;/code&gt; type describing &lt;code&gt;prop&lt;/code&gt; itself.</source>
          <target state="translated">코 틀린 컴파일러에 대한 모든 필요한 정보를 제공 &lt;code&gt;prop&lt;/code&gt; 인수하여 : 첫번째 인수 &lt;code&gt;this&lt;/code&gt; 외부 클래스의 인스턴스를 지칭 &lt;code&gt;C&lt;/code&gt; 및 &lt;code&gt;this::prop&lt;/code&gt; 의 반사 목적 &lt;code&gt;KProperty&lt;/code&gt; 의 기술 유형 &lt;code&gt;prop&lt;/code&gt; 자체.</target>
        </trans-unit>
        <trans-unit id="d8f9b6bf737be7b0aa49748489bb11aedc0ed8e0" translate="yes" xml:space="preserve">
          <source>The Kotlin compiler tries to comply with the following goals:</source>
          <target state="translated">Kotlin 컴파일러는 다음 목표를 준수하려고합니다.</target>
        </trans-unit>
        <trans-unit id="84694c64245d13b803ebc2f9a85d6bc26cef8561" translate="yes" xml:space="preserve">
          <source>The Kotlin compiler will prefer using underlying types instead of wrappers to produce the most performant and optimized code. However, sometimes it is necessary to keep wrappers around. As a rule of thumb, inline classes are boxed whenever they are used as another type.</source>
          <target state="translated">Kotlin 컴파일러는 래퍼 대신 기본 형식을 사용하여 성능이 뛰어나고 최적화 된 코드를 생성하는 것을 선호합니다. 그러나 때때로 랩퍼를 유지해야합니다. 일반적으로 인라인 클래스는 다른 유형으로 사용될 때마다 상자로 표시됩니다.</target>
        </trans-unit>
        <trans-unit id="b1defae0fa9dbdfd545ce26ab8cc2b793d3d11fe" translate="yes" xml:space="preserve">
          <source>The Kotlin compiler will use this restriction to aggressively optimize runtime representation of inline classes and substitute their instances with the value of the underlying property where possible removing constructor calls, GC pressure, and enabling other optimizations:</source>
          <target state="translated">Kotlin 컴파일러는이 제한 사항을 사용하여 인라인 클래스의 런타임 표현을 적극적으로 최적화하고 생성자 호출, GC 압력을 제거하고 다른 최적화를 가능하게하는 기본 속성 값으로 인스턴스를 대체합니다.</target>
        </trans-unit>
        <trans-unit id="d850079f06081665ec514cb65c4f969e8d679814" translate="yes" xml:space="preserve">
          <source>The Kotlin language and toolset are divided into many components such as the compilers for the JVM, JS and Native targets, the Standard Library, various accompanying tools and so on. Many of these components were officially released as &lt;strong&gt;Stable&lt;/strong&gt; which means that they are evolved in the backward-compatible way following the &lt;a href=&quot;kotlin-evolution&quot;&gt;principles&lt;/a&gt; of &lt;em&gt;Comfortable Updates&lt;/em&gt; and &lt;em&gt;Keeping the Language Modern&lt;/em&gt;. Among such stable components are, for example, the Kotlin compiler for the JVM, the Standard Library, and Coroutines.</source>
          <target state="translated">Kotlin 언어 및 도구 세트는 JVM, JS 및 Native 대상 용 컴파일러, 표준 라이브러리, 다양한 부속 도구 등과 같은 여러 구성 요소로 나뉩니다. 이러한 구성 요소 중 많은 부분이 공식적으로 &lt;strong&gt;Stable로&lt;/strong&gt; 출시되었습니다. 즉 , &lt;em&gt;Comfortable Updates&lt;/em&gt; 및 &lt;em&gt;최신 언어 유지 &lt;/em&gt;&lt;a href=&quot;kotlin-evolution&quot;&gt;원칙&lt;/a&gt; 에 따라 이전 버전과 호환되는 방식으로 발전했습니다 . 이러한 안정적인 구성 요소 중에는 예를 들어 JVM 용 Kotlin 컴파일러, 표준 라이브러리 및 코 루틴이 있습니다.&lt;em&gt;&lt;/em&gt;&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="d4746f44c44c946d854825f5266310fd75bb7373" translate="yes" xml:space="preserve">
          <source>The Kotlin multiplatform plugin contains two specific functions for android targets. Two functions help you configure &lt;a href=&quot;https://developer.android.com/studio/build/build-variants&quot;&gt;build variants&lt;/a&gt;:</source>
          <target state="translated">Kotlin 멀티 플랫폼 플러그인에는 Android 타겟을위한 두 가지 특정 기능이 포함되어 있습니다. 두 가지 기능은 &lt;a href=&quot;https://developer.android.com/studio/build/build-variants&quot;&gt;빌드 변형&lt;/a&gt; 을 구성 하는 데 도움이됩니다 .</target>
        </trans-unit>
        <trans-unit id="421148b46361ca016988f110ea6a768864eebc2b" translate="yes" xml:space="preserve">
          <source>The Kotlin plugin also bundles a Java to Kotlin converter (&lt;em&gt;J2K&lt;/em&gt;) that automatically converts Java files to Kotlin. To use J2K on a file, click &lt;strong&gt;Convert Java File to Kotlin File&lt;/strong&gt; in its context menu or in the &lt;strong&gt;Code&lt;/strong&gt; menu of IntelliJ IDEA.</source>
          <target state="translated">Kotlin 플러그인은 Java 파일을 Kotlin으로 자동 변환 하는 Java to Kotlin 변환기 ( &lt;em&gt;J2K&lt;/em&gt; ) 도 번들로 제공합니다 . 파일에서 J2K를 사용하려면 컨텍스트 메뉴 또는 IntelliJ IDEA 의 &lt;strong&gt;코드&lt;/strong&gt; 메뉴 에서 &lt;strong&gt;Java 파일을 Kotlin 파일&lt;/strong&gt; 로 &lt;strong&gt;변환을&lt;/strong&gt; 클릭 &lt;strong&gt;하십시오&lt;/strong&gt; .&lt;strong&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="f2e3c8e9ac9f87a3c6a3c66f4442bdb2dd4de716" translate="yes" xml:space="preserve">
          <source>The Kotlin plugin for IntelliJ IDEA supports &lt;a href=&quot;https://www.jetbrains.com/help/idea/scratches.html&quot;&gt;&lt;em&gt;scratches&lt;/em&gt;&lt;/a&gt; and &lt;em&gt;worksheets.&lt;/em&gt;</source>
          <target state="translated">IntelliJ IDEA 용 Kotlin 플러그인은 &lt;a href=&quot;https://www.jetbrains.com/help/idea/scratches.html&quot;&gt;&lt;em&gt;스크래치&lt;/em&gt;&lt;/a&gt; 및 &lt;em&gt;워크 시트를&lt;/em&gt; 지원합니다 &lt;em&gt;.&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="8d656f515ef009525fec5de5fd6f927dce6dbed0" translate="yes" xml:space="preserve">
          <source>The Kotlin plugin supports &lt;a href=&quot;https://guides.gradle.org/using-build-cache/&quot;&gt;Gradle Build Cache&lt;/a&gt; (Gradle version 4.3 and above is required; caching is disabled with lower versions).</source>
          <target state="translated">Kotlin 플러그인은 &lt;a href=&quot;https://guides.gradle.org/using-build-cache/&quot;&gt;Gradle Build Cache를&lt;/a&gt; 지원합니다 (Gradle 버전 4.3 이상이 필요합니다. 캐싱은 하위 버전에서 비활성화 됨).</target>
        </trans-unit>
        <trans-unit id="bb12e098841b4fa9ff61972654d2907071becf6c" translate="yes" xml:space="preserve">
          <source>The Kotlin plugin supports &lt;a href=&quot;https://guides.gradle.org/using-build-cache/&quot;&gt;Gradle Build Cache&lt;/a&gt;.</source>
          <target state="translated">Kotlin 플러그인은 &lt;a href=&quot;https://guides.gradle.org/using-build-cache/&quot;&gt;Gradle 빌드 캐시를&lt;/a&gt; 지원합니다 .</target>
        </trans-unit>
        <trans-unit id="b34d5a1ffedf4d7025d37a83472c11c87599aa21" translate="yes" xml:space="preserve">
          <source>The Kotlin plugin&amp;rsquo;s migration tools help you migrate your projects from earlier versions of Kotlin to 1.4.0.</source>
          <target state="translated">Kotlin 플러그인의 마이그레이션 도구를 사용하면 이전 버전의 Kotlin에서 1.4.0으로 프로젝트를 마이그레이션 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="4e886321a88f27f1211fc7e6327218f1b649f0a9" translate="yes" xml:space="preserve">
          <source>The Kotlin sources are arranged into &lt;a href=&quot;#configuring-source-sets&quot;&gt;source sets&lt;/a&gt;. In addition to Kotlin source files and resources, each source set may have its own dependencies. Source sets form a hierarchy that is built with the &lt;em&gt;&quot;depends on&quot;&lt;/em&gt; relation. A source set by itself is platform agnostic, but it may contain platform-specific code and dependencies if it's only compiled for a single platform.</source>
          <target state="translated">Kotlin 소스는 &lt;a href=&quot;#configuring-source-sets&quot;&gt;소스 세트&lt;/a&gt; 로 정렬됩니다 . Kotlin 소스 파일 및 리소스 외에도 각 소스 세트에는 고유 한 종속성이있을 수 있습니다. 소스 세트는 &lt;em&gt;&quot;종속&quot;&lt;/em&gt; 관계로 빌드 된 계층을 형성합니다 . 소스 세트 자체는 플랫폼에 구애받지 않지만 단일 플랫폼 용으로 컴파일 된 경우에는 플랫폼 별 코드와 종속성이 포함될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="16279f302f8a88f25bf841c70c273ae22857462c" translate="yes" xml:space="preserve">
          <source>The Kotlin standard library &lt;code&gt;kotlin-stdlib&lt;/code&gt; targets Java 6 and above. There are extended versions of the standard library that add support for some of the features of JDK 7 and JDK 8. To use these versions, add one of the following dependencies instead of &lt;code&gt;kotlin-stdlib&lt;/code&gt;:</source>
          <target state="translated">Kotlin 표준 라이브러리 &lt;code&gt;kotlin-stdlib&lt;/code&gt; 는 Java 6 이상을 대상으로합니다. JDK 7 및 JDK 8의 일부 기능에 대한 지원을 추가하는 표준 라이브러리의 확장 버전이 있습니다.이 버전을 사용하려면 &lt;code&gt;kotlin-stdlib&lt;/code&gt; 대신 다음 종속성 중 하나를 추가하십시오 .</target>
        </trans-unit>
        <trans-unit id="e19faba3d18413b5a548d796d002602d1f6b7b0d" translate="yes" xml:space="preserve">
          <source>The Kotlin standard library contains extension functions for retrieving parts of a collection. These functions provide a variety of ways to select elements for the result collection: listing their positions explicitly, specifying the result size, and others.</source>
          <target state="translated">Kotlin 표준 라이브러리에는 콜렉션의 일부를 검색하기위한 확장 기능이 있습니다. 이 함수는 결과 수집을위한 요소를 선택하는 다양한 방법을 제공합니다. 위치를 명시 적으로 나열하고 결과 크기를 지정하는 등의 방법입니다.</target>
        </trans-unit>
        <trans-unit id="aee8a9e1bcfd6364e58b2c53a697014bcd222ec2" translate="yes" xml:space="preserve">
          <source>The Kotlin standard library contains several functions whose sole purpose is to execute a block of code within the context of an object. When you call such a function on an object with a &lt;a href=&quot;lambdas&quot;&gt;lambda expression&lt;/a&gt; provided, it forms a temporary scope. In this scope, you can access the object without its name. Such functions are called &lt;em&gt;scope functions&lt;/em&gt;. There are five of them: &lt;code&gt;let&lt;/code&gt;, &lt;code&gt;run&lt;/code&gt;, &lt;code&gt;with&lt;/code&gt;, &lt;code&gt;apply&lt;/code&gt;, and &lt;code&gt;also&lt;/code&gt;.</source>
          <target state="translated">Kotlin 표준 라이브러리에는 객체 컨텍스트 내에서 코드 블록을 실행하는 것이 유일한 목적인 여러 함수가 포함되어 있습니다. &lt;a href=&quot;lambdas&quot;&gt;람다식이&lt;/a&gt; 제공된 객체에서 이러한 함수를 호출 하면 임시 범위가 형성됩니다. 이 범위에서 이름없이 개체에 액세스 할 수 있습니다. 이러한 기능을 &lt;em&gt;범위 기능&lt;/em&gt; 이라고 &lt;em&gt;합니다&lt;/em&gt; . &lt;code&gt;let&lt;/code&gt; , &lt;code&gt;run&lt;/code&gt; , &lt;code&gt;with&lt;/code&gt; , &lt;code&gt;apply&lt;/code&gt; 및 &lt;code&gt;also&lt;/code&gt; 중 다섯 가지가 있습니다 .</target>
        </trans-unit>
        <trans-unit id="41ab82952f2d2fb6d715a1d54dee47f369b23a5d" translate="yes" xml:space="preserve">
          <source>The Kotlin standard library is available on &lt;a href=&quot;https://www.npmjs.com/&quot;&gt;npm&lt;/a&gt; and we can simply include it in our &lt;code&gt;package.json&lt;/code&gt; as a dependency.</source>
          <target state="translated">Kotlin 표준 라이브러리는 &lt;a href=&quot;https://www.npmjs.com/&quot;&gt;npm에서&lt;/a&gt; 사용할 수 있으며이를 &lt;code&gt;package.json&lt;/code&gt; 에 종속성으로 간단히 포함 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="aa008c18e28c0e852d10e5f6a39e59c2d9ab879a" translate="yes" xml:space="preserve">
          <source>The Kotlin standard library is now fully compatible with the Java 9 module system, which forbids split packages (multiple jar files declaring classes in the same package). In order to support that, new artifacts &lt;code&gt;kotlin-stdlib-jdk7&lt;/code&gt; and &lt;code&gt;kotlin-stdlib-jdk8&lt;/code&gt; are introduced, which replace the old &lt;code&gt;kotlin-stdlib-jre7&lt;/code&gt; and &lt;code&gt;kotlin-stdlib-jre8&lt;/code&gt;.</source>
          <target state="translated">Kotlin 표준 라이브러리는 이제 Java 9 모듈 시스템과 완전히 호환되므로 분할 패키지 (같은 패키지의 클래스를 선언하는 여러 jar 파일)를 금지합니다. 이를 지원하기 위해 새로운 &lt;code&gt;kotlin-stdlib-jdk7&lt;/code&gt; 및 &lt;code&gt;kotlin-stdlib-jdk8&lt;/code&gt; 이 도입되어 기존 &lt;code&gt;kotlin-stdlib-jre7&lt;/code&gt; 및 &lt;code&gt;kotlin-stdlib-jre8&lt;/code&gt; 을 대체 합니다.</target>
        </trans-unit>
        <trans-unit id="870dd777a08235fb630e1002ab11ba8d4d93e900" translate="yes" xml:space="preserve">
          <source>The Kotlin standard library offers a broad variety of functions for performing operations on collections. This includes simple operations, such as getting or adding elements, as well as more complex ones including search, sorting, filtering, transformations, and so on.</source>
          <target state="translated">Kotlin 표준 라이브러리는 컬렉션에서 작업을 수행하기위한 다양한 기능을 제공합니다. 여기에는 요소 가져 오기 또는 추가와 같은 간단한 작업뿐만 아니라 검색, 정렬, 필터링, 변환 등을 포함한보다 복잡한 작업이 포함됩니다.</target>
        </trans-unit>
        <trans-unit id="c6f95e4bf784ef0f9127ccc1a33b6b0fef24a280" translate="yes" xml:space="preserve">
          <source>The Kotlin standard library provides a mechanism for requiring and giving explicit consent for using certain elements of APIs. This mechanism lets library developers inform users of their APIs about specific conditions that require opt-in, for example, if an API is in the experimental state and is likely to change in the future.</source>
          <target state="translated">Kotlin 표준 라이브러리는 API의 특정 요소 사용에 대해 명시적인 동의를 요구하고 제공하는 메커니즘을 제공합니다. 이 메커니즘을 통해 라이브러리 개발자는 사용자에게 옵트 인이 필요한 특정 조건 (예 : API가 실험적 상태이고 향후 변경 될 가능성이있는 경우)에 대해 API에 알릴 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="7504a2da20208970eadd23d20d879fda0292513a" translate="yes" xml:space="preserve">
          <source>The Kotlin standard library provides a series of wrappers around the JavaScript API for interacting with documents. The main component we'd usually access is the variable &lt;code&gt;document&lt;/code&gt;. Given we have access to this, we can simply read and write to the corresponding properties. For instance, to set the background of the page we can do</source>
          <target state="translated">Kotlin 표준 라이브러리는 문서와 상호 작용하기 위해 JavaScript API를 중심으로 일련의 래퍼를 제공합니다. 우리가 일반적으로 액세스하는 주요 구성 요소는 변수 &lt;code&gt;document&lt;/code&gt; 입니다. 이에 액세스 할 수 있으면 해당 속성을 읽고 쓸 수 있습니다. 예를 들어 페이지의 배경을 설정하려면</target>
        </trans-unit>
        <trans-unit id="d4672fe3591cd8e490f322d7264f5d7b48dbb930" translate="yes" xml:space="preserve">
          <source>The Kotlin standard library provides a set of extension functions for collection &lt;em&gt;transformations&lt;/em&gt;. These functions build new collections from existing ones based on the transformation rules provided. In this page, we'll give an overview of the available collection transformation functions.</source>
          <target state="translated">Kotlin 표준 라이브러리는 콜렉션 &lt;em&gt;변환을&lt;/em&gt; 위한 확장 기능 세트를 제공합니다 . 이 함수는 제공된 변환 규칙을 기반으로 기존 컬렉션에서 새 컬렉션을 만듭니다. 이 페이지에서는 사용 가능한 컬렉션 변환 기능에 대한 개요를 제공합니다.</target>
        </trans-unit>
        <trans-unit id="0d403b1b6b6cec3fc85d2c8444ad4595fd15211b" translate="yes" xml:space="preserve">
          <source>The Kotlin standard library provides developers with a mechanism for creating and using &lt;em&gt;experimental&lt;/em&gt; APIs. This mechanism lets library authors inform users that certain components of their API, such as classes or functions, are unstable and are likely to change in the future. Such changes may require rewriting and recompiling the client code. To prevent potential compatibility issues, the compiler warns users of the experimental status of such APIs and may require them to give their explicit consent to use the API.</source>
          <target state="translated">Kotlin 표준 라이브러리는 개발자에게 &lt;em&gt;실험적인&lt;/em&gt; API 를 만들고 사용하기위한 메커니즘을 제공합니다 . 이 메커니즘을 통해 라이브러리 작성자는 클래스 또는 함수와 같은 API의 특정 구성 요소가 불안정하고 향후 변경 될 수 있음을 사용자에게 알릴 수 있습니다. 이러한 변경은 클라이언트 코드를 다시 작성하고 다시 컴파일해야 할 수도 있습니다. 잠재적 인 호환성 문제를 방지하기 위해 컴파일러는 사용자에게 이러한 API의 실험 상태를 경고하고 API 사용에 대한 명시 적 동의를 요구할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="25b12f54730219e6bd01543d34c7f6d86941696e" translate="yes" xml:space="preserve">
          <source>The Kotlin standard library provides extension functions for grouping collection elements. The basic function &lt;a href=&quot;../../api/latest/jvm/stdlib/kotlin.collections/group-by&quot;&gt;&lt;code&gt;groupBy()&lt;/code&gt;&lt;/a&gt; takes a lambda function and returns a &lt;code&gt;Map&lt;/code&gt;. In this map, each key is the lambda result and the corresponding value is the &lt;code&gt;List&lt;/code&gt; of elements on which this result is returned. This function can be used, for example, to group a list of &lt;code&gt;String&lt;/code&gt;s by their first letter.</source>
          <target state="translated">Kotlin 표준 라이브러리는 컬렉션 요소를 그룹화하기위한 확장 기능을 제공합니다. 기본 함수 &lt;a href=&quot;../../api/latest/jvm/stdlib/kotlin.collections/group-by&quot;&gt; &lt;code&gt;groupBy()&lt;/code&gt; &lt;/a&gt; 는 람다 함수를 사용하여 &lt;code&gt;Map&lt;/code&gt; 을 반환합니다 . 이 맵에서 각 키는 람다 결과이고 해당 값은 이 결과가 반환되는 요소 &lt;code&gt;List&lt;/code&gt; 입니다. 예를 들어,이 함수를 사용 하여 첫 번째 문자 로 &lt;code&gt;String&lt;/code&gt; 목록을 그룹화 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="d49763e3623bb841ba6b661af00bff69df48a815" translate="yes" xml:space="preserve">
          <source>The Kotlin standard library provides factory methods for several useful kinds of delegates.</source>
          <target state="translated">Kotlin 표준 라이브러리는 여러 유용한 종류의 델리게이트에 대한 팩토리 메소드를 제공합니다.</target>
        </trans-unit>
        <trans-unit id="d4752902cbbab973b31545d271408bf4e6b55c29" translate="yes" xml:space="preserve">
          <source>The Kotlin team offers a set of tools for Android development that goes beyond the standard language features:</source>
          <target state="translated">Kotlin 팀은 표준 언어 기능을 능가하는 Android 개발 도구 세트를 제공합니다.</target>
        </trans-unit>
        <trans-unit id="3835dcf5cfa983896474e2202e8aad1e87118beb" translate="yes" xml:space="preserve">
          <source>The Kotlin visibilities are mapped to Java in the following way:</source>
          <target state="translated">Kotlin 가시성은 다음과 같은 방식으로 Java에 맵핑됩니다.</target>
        </trans-unit>
        <trans-unit id="ed293f7536e6525a4d07d9691dc5108b394e4a3c" translate="yes" xml:space="preserve">
          <source>The Kotlin visibility modifiers map to Java in the following way:</source>
          <target state="translated">Kotlin 가시성 수정자는 다음과 같은 방식으로 자바에 매핑됩니다.</target>
        </trans-unit>
        <trans-unit id="faf7b14d1149068ab693cf1111e636b037d94b9d" translate="yes" xml:space="preserve">
          <source>The Kotlin/JS Gradle plugin allows us to run tests through a variety of test runners that can be specified via the Gradle configuration. In order to make test annotations and functionality available for the JavaScript target, let's add the correct platform artifact for &lt;a href=&quot;https://kotlinlang.org/api/latest/kotlin.test/index.html&quot;&gt;&lt;code&gt;kotlin.test&lt;/code&gt;&lt;/a&gt; in our &lt;code&gt;build.gradle.kts&lt;/code&gt;:</source>
          <target state="translated">Kotlin / JS Gradle 플러그인을 사용하면 Gradle 구성을 통해 지정할 수있는 다양한 테스트 실행기를 통해 테스트를 실행할 수 있습니다. JavaScript 타겟에서 테스트 주석과 기능을 사용할 수 있도록 &lt;a href=&quot;https://kotlinlang.org/api/latest/kotlin.test/index.html&quot;&gt; &lt;code&gt;kotlin.test&lt;/code&gt; &lt;/a&gt; 에 kotlin.test 에 대한 올바른 플랫폼 아티팩트를 추가 &lt;code&gt;build.gradle.kts&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="304763e06ef2ec917369271eeef52f0b832e41b7" translate="yes" xml:space="preserve">
          <source>The Kotlin/JS Gradle plugin also provides support for webpack's &lt;a href=&quot;https://webpack.js.org/loaders/css-loader/&quot;&gt;CSS&lt;/a&gt; and &lt;a href=&quot;https://webpack.js.org/loaders/style-loader/&quot;&gt;style&lt;/a&gt; loaders. While all options can be changed by directly modifying the &lt;a href=&quot;#configuring-webpack-bundling&quot;&gt;webpack configuration files&lt;/a&gt; that are used to build your project, the most commonly used settings are available directly from the &lt;code&gt;build.gradle(.kts)&lt;/code&gt; file.</source>
          <target state="translated">Kotlin / JS Gradle 플러그인은 웹팩의 &lt;a href=&quot;https://webpack.js.org/loaders/css-loader/&quot;&gt;CSS&lt;/a&gt; 및 &lt;a href=&quot;https://webpack.js.org/loaders/style-loader/&quot;&gt;스타일&lt;/a&gt; 로더에 대한 지원도 제공합니다 . 프로젝트를 빌드하는 데 사용되는 &lt;a href=&quot;#configuring-webpack-bundling&quot;&gt;웹팩 구성 파일&lt;/a&gt; 을 직접 수정하여 모든 옵션을 변경할 수 있지만 가장 일반적으로 사용되는 설정은 &lt;code&gt;build.gradle(.kts)&lt;/code&gt; 파일 에서 직접 사용할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="62014bfef74b6ee8391b097fe12cd8b778b7ef02" translate="yes" xml:space="preserve">
          <source>The Kotlin/JS Gradle plugin also supports dependency declarations for particular source sets in the &lt;code&gt;kotlin&lt;/code&gt; section of the build script.</source>
          <target state="translated">Kotlin / JS Gradle 플러그인 은 빌드 스크립트 의 &lt;code&gt;kotlin&lt;/code&gt; 섹션에있는 특정 소스 세트에 대한 종속성 선언도 지원합니다 .</target>
        </trans-unit>
        <trans-unit id="5668a0d5f0441481437bde850441d3299be017d6" translate="yes" xml:space="preserve">
          <source>The Kotlin/JS Gradle plugin automatically generates a Karma configuration file at build time which includes your settings from the &lt;a href=&quot;#configuring-test-task&quot;&gt;&lt;code&gt;kotlin.js.browser.testTask.useKarma&lt;/code&gt; block&lt;/a&gt; in your &lt;code&gt;build.gradle(.kts)&lt;/code&gt;. You can find the file at &lt;code&gt;build/js/packages/projectName-test/karma.conf.js&lt;/code&gt;. To make adjustments to the configuration used by Karma, place your additional configuration files inside a directory called &lt;code&gt;karma.config.d&lt;/code&gt; in the root of your project. All &lt;code&gt;.js&lt;/code&gt; configuration files in this directory will be picked up and are automatically merged into the generated &lt;code&gt;karma.conf.js&lt;/code&gt; at build time.</source>
          <target state="translated">Kotlin / JS Gradle 플러그인은 &lt;code&gt;build.gradle(.kts)&lt;/code&gt; 에 있는 &lt;a href=&quot;#configuring-test-task&quot;&gt; &lt;code&gt;kotlin.js.browser.testTask.useKarma&lt;/code&gt; 블록&lt;/a&gt; 의 설정을 포함하는 Karma 구성 파일을 빌드시 자동으로 생성합니다 . &lt;code&gt;build/js/packages/projectName-test/karma.conf.js&lt;/code&gt; 에서 파일을 찾을 수 있습니다 . Karma에서 사용하는 구성을 조정하려면 프로젝트 루트의 &lt;code&gt;karma.config.d&lt;/code&gt; 라는 디렉토리에 추가 구성 파일을 배치합니다 . 이 디렉토리의 모든 &lt;code&gt;.js&lt;/code&gt; 구성 파일이 선택 되고 빌드시 생성 된 &lt;code&gt;karma.conf.js&lt;/code&gt; 에 자동으로 병합됩니다 .</target>
        </trans-unit>
        <trans-unit id="b957eb65bb0cdee2cba530f32fe6ce613bbf8935" translate="yes" xml:space="preserve">
          <source>The Kotlin/JS Gradle plugin automatically generates a standard webpack configuration file at build time which you can find the at &lt;code&gt;build/js/packages/projectName/webpack.config.js&lt;/code&gt;.</source>
          <target state="translated">Kotlin / JS Gradle 플러그인은 &lt;code&gt;build/js/packages/projectName/webpack.config.js&lt;/code&gt; 에서 찾을 수있는 빌드시 표준 웹팩 구성 파일을 자동으로 생성합니다 .</target>
        </trans-unit>
        <trans-unit id="8f0e2d824767a90a80e919658aeb5cfe950e8eb7" translate="yes" xml:space="preserve">
          <source>The Kotlin/JS Gradle plugin automatically sets up a test infrastructure for projects. For browser projects, it downloads and installs the &lt;a href=&quot;https://karma-runner.github.io/&quot;&gt;Karma&lt;/a&gt; test runner with other required dependencies; for Node.js projects, the &lt;a href=&quot;https://mochajs.org/&quot;&gt;Mocha&lt;/a&gt; test framework is used.</source>
          <target state="translated">Kotlin / JS Gradle 플러그인은 프로젝트를위한 테스트 인프라를 자동으로 설정합니다. 브라우저 프로젝트의 경우 다른 필수 종속성과 함께 &lt;a href=&quot;https://karma-runner.github.io/&quot;&gt;Karma&lt;/a&gt; 테스트 실행기를 다운로드하고 설치합니다 . Node.js 프로젝트의 경우 &lt;a href=&quot;https://mochajs.org/&quot;&gt;Mocha&lt;/a&gt; 테스트 프레임 워크가 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="f818f7eac72c440d892f7b7bd134c99b2cf031b4" translate="yes" xml:space="preserve">
          <source>The Kotlin/JS Gradle plugin handles DCE automatically when you build a &lt;strong&gt;production bundle&lt;/strong&gt;, for example by using the &lt;code&gt;browserProductionWebpack&lt;/code&gt; task. &lt;strong&gt;Development bundling&lt;/strong&gt; tasks (like &lt;code&gt;browserDevelopmentWebpack&lt;/code&gt;) don't include DCE.</source>
          <target state="translated">Kotlin / JS Gradle 플러그인은 예를 들어 &lt;code&gt;browserProductionWebpack&lt;/code&gt; 작업 을 사용하여 &lt;strong&gt;프로덕션 번들&lt;/strong&gt; 을 빌드 할 때 DCE를 자동으로 처리합니다 . &lt;strong&gt;개발 번들링&lt;/strong&gt; 작업 (예 : &lt;code&gt;browserDevelopmentWebpack&lt;/code&gt; )에는 DCE가 포함되지 않습니다.&lt;strong&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="9e48978274145dccf82bae99c2dc2a30b0c91f68" translate="yes" xml:space="preserve">
          <source>The Kotlin/JS Gradle plugin includes a &lt;a href=&quot;https://wikipedia.org/wiki/Dead_code_elimination&quot;&gt;&lt;em&gt;dead code elimination&lt;/em&gt;&lt;/a&gt; (&lt;em&gt;DCE&lt;/em&gt;) tool. Dead code elimination is often also called &lt;em&gt;tree shaking&lt;/em&gt;. It reduces the size or the resulting JavaScript code by removing unused properties, functions, and classes.</source>
          <target state="translated">Kotlin / JS Gradle 플러그인에는 &lt;a href=&quot;https://wikipedia.org/wiki/Dead_code_elimination&quot;&gt;&lt;em&gt;데드 코드 제거&lt;/em&gt;&lt;/a&gt; ( &lt;em&gt;DCE&lt;/em&gt; ) 도구가 포함되어 있습니다. 데드 코드 제거는 종종 &lt;em&gt;트리 쉐이킹&lt;/em&gt; 이라고도 &lt;em&gt;합니다&lt;/em&gt; . 사용하지 않는 속성, 함수 및 클래스를 제거하여 크기 또는 결과 JavaScript 코드를 줄입니다.</target>
        </trans-unit>
        <trans-unit id="1e4e6f626348a11780378865bb1882ff761b2f81" translate="yes" xml:space="preserve">
          <source>The Kotlin/JS Gradle plugin lets you declare npm dependencies in the Gradle build script, analogous to how you would declare any other dependencies.</source>
          <target state="translated">Kotlin / JS Gradle 플러그인을 사용하면 다른 종속성을 선언하는 방법과 유사하게 Gradle 빌드 스크립트에서 npm 종속성을 선언 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="508d01630451556b268bd8387a2eb4afdba86b73" translate="yes" xml:space="preserve">
          <source>The Kotlin/JS Gradle plugin lets you manage aspects of your project in the &lt;code&gt;kotlin&lt;/code&gt; section of the build script.</source>
          <target state="translated">Kotlin / JS Gradle 플러그인을 사용하면 빌드 스크립트 의 &lt;code&gt;kotlin&lt;/code&gt; 섹션 에서 프로젝트의 측면을 관리 할 수 ​​있습니다 .</target>
        </trans-unit>
        <trans-unit id="920d568a492c6da10f65d95dc53b1b5f7eeec1d4" translate="yes" xml:space="preserve">
          <source>The Kotlin/JS Gradle plugin provides an integration with Dukat. When enabled, type-safe Kotlin external declarations are automatically generated for npm dependencies that provide TypeScript definitions. You have two different ways of selecting if and when Dukat should generate declarations: at build time, and manually via a Gradle task.</source>
          <target state="translated">Kotlin / JS Gradle 플러그인은 Dukat과의 통합을 제공합니다. 사용 설정하면 TypeScript 정의를 제공하는 npm 종속성에 대해 유형 안전 Kotlin 외부 선언이 자동으로 생성됩니다. Dukat이 선언을 생성해야하는지 여부와시기를 선택하는 방법에는 빌드시와 Gradle 작업을 통해 수동으로 두 가지 방법이 있습니다.</target>
        </trans-unit>
        <trans-unit id="2298bfb804f83ca6b163e47c1953371bd8caee55" translate="yes" xml:space="preserve">
          <source>The Kotlin/JS IR compiler backend is the main focus of innovation around Kotlin/JS, and paves the way forward for the technology.</source>
          <target state="translated">Kotlin / JS IR 컴파일러 백엔드는 Kotlin / JS를 중심으로 한 혁신의 주요 초점이며 기술 발전의 길을 열어줍니다.</target>
        </trans-unit>
        <trans-unit id="1cec2fbea4632d742da31ed6da87c6196fa5c821" translate="yes" xml:space="preserve">
          <source>The Kotlin/JS IR compiler is capable of generating TypeScript definitions from your Kotlin code. These definitions can be used by JavaScript tools and IDEs when working on hybrid apps to provide autocompletion, support static analyzers, and make it easier to include Kotlin code in JavaScript and TypeScript projects. Top-level declarations marked with &lt;a href=&quot;js-to-kotlin-interop#jsexport-annotation&quot;&gt;&lt;code&gt;@JsExport&lt;/code&gt;&lt;/a&gt; in a project that produces executable files (&lt;code&gt;binaries.executable()&lt;/code&gt;) will get a &lt;code&gt;.d.ts&lt;/code&gt; file generated, which contains the TypeScript definitions for the exported Kotlin declarations. In Kotlin 1.4, these declarations can be found in &lt;code&gt;build/js/packages/&amp;lt;package_name&amp;gt;/kotlin&lt;/code&gt; alongside the corresponding, un-webpacked JavaScript code.</source>
          <target state="translated">Kotlin / JS IR 컴파일러는 Kotlin 코드에서 TypeScript 정의를 생성 할 수 있습니다. 이러한 정의는 자동 완성 기능을 제공하고 정적 분석기를 지원하며 JavaScript 및 TypeScript 프로젝트에 Kotlin 코드를 더 쉽게 포함하기 위해 하이브리드 앱에서 작업 할 때 JavaScript 도구 및 IDE에서 사용할 수 있습니다. 실행 파일 ( &lt;code&gt;binaries.executable()&lt;/code&gt; ) 을 생성하는 프로젝트에서 &lt;a href=&quot;js-to-kotlin-interop#jsexport-annotation&quot;&gt; &lt;code&gt;@JsExport&lt;/code&gt; &lt;/a&gt; 로 표시된 최상위 선언 은 내 보낸 Kotlin 선언에 대한 TypeScript 정의를 포함 하는 &lt;code&gt;.d.ts&lt;/code&gt; 파일을 생성합니다. Kotlin 1.4에서 이러한 선언은 해당하는 웹 패킹되지 않은 자바 스크립트 코드와 함께 &lt;code&gt;build/js/packages/&amp;lt;package_name&amp;gt;/kotlin&lt;/code&gt; 에서 찾을 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="20de849afa381da2738f09b8692ae208333cafb4" translate="yes" xml:space="preserve">
          <source>The Kotlin/JS plugin automatically configures its tasks for working with the selected environment. This includes downloading and installing the required environment and dependencies for running and testing the application. This allows developers to build, run and test simple projects without additional configuration.</source>
          <target state="translated">Kotlin / JS 플러그인은 선택한 환경에서 작업하기위한 작업을 자동으로 구성합니다. 여기에는 애플리케이션 실행 및 테스트에 필요한 환경 및 종속성 다운로드 및 설치가 포함됩니다. 이를 통해 개발자는 추가 구성없이 간단한 프로젝트를 빌드, 실행 및 테스트 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="04a4825cc5cdc3fbcb7e1b3e4f6683662ea06196" translate="yes" xml:space="preserve">
          <source>The Kotlin/JS plugin provides a &lt;code&gt;run&lt;/code&gt; task that lets you run pure Kotlin/JS projects without additional configuration.</source>
          <target state="translated">Kotlin / JS 플러그인은 추가 구성없이 순수 Kotlin / JS 프로젝트를 실행할 수 있는 &lt;code&gt;run&lt;/code&gt; 작업을 제공 합니다.</target>
        </trans-unit>
        <trans-unit id="0c77da593f6fd563bf3d0e80c805c85eaf245285" translate="yes" xml:space="preserve">
          <source>The Kotlin/JS standard library allows us to access browser-specific functionality using the &lt;code&gt;kotlinx.browser&lt;/code&gt; package, which includes typical top-level objects such as &lt;code&gt;document&lt;/code&gt; and &lt;code&gt;window&lt;/code&gt;. The standard library provides typesafe wrappers for the functionality exposed by these objects wherever possible. As a fallback, the &lt;code&gt;dynamic&lt;/code&gt; type is used to provide interaction with functions that do not map well into the Kotlin type system.</source>
          <target state="translated">Kotlin / JS 표준 라이브러리를 사용하면 &lt;code&gt;document&lt;/code&gt; 및 &lt;code&gt;window&lt;/code&gt; 와 같은 일반적인 최상위 객체를 포함 하는 &lt;code&gt;kotlinx.browser&lt;/code&gt; 패키지를 사용하여 브라우저 별 기능에 액세스 할 수 있습니다 . 표준 라이브러리는 가능한 경우 이러한 개체에 의해 노출되는 기능에 대해 형식이 안전한 래퍼를 제공합니다. 대체로 &lt;code&gt;dynamic&lt;/code&gt; 유형은 Kotlin 유형 시스템에 잘 매핑되지 않는 함수와의 상호 작용을 제공하는 데 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="a6a4cdbdda50f56547bba9ba19fc399a6de3ee54" translate="yes" xml:space="preserve">
          <source>The Kotlin/Native compiler is available for macOS, Linux, and Windows. It is available as a command line tool and ships as part of the standard Kotlin distribution and can be downloaded from &lt;a href=&quot;https://github.com/JetBrains/kotlin/releases/tag/v1.4.10&quot;&gt;GitHub Releases&lt;/a&gt;. It supports different targets including iOS (arm32, arm64, simulator x86_64), Windows (mingw32 and x86_64), Linux (x86_64, arm64, MIPS), macOS (x86_64), Raspberry PI, STM32, WASM. For the full list of targets please see the &lt;a href=&quot;../../reference/native-overview&quot;&gt;Kotlin/Native overview&lt;/a&gt;.</source>
          <target state="translated">Kotlin / Native 컴파일러는 macOS, Linux, Windows에서 사용할 수 있습니다. 명령 줄 도구로 사용할 수 있으며 표준 Kotlin 배포의 일부로 제공되며 &lt;a href=&quot;https://github.com/JetBrains/kotlin/releases/tag/v1.4.10&quot;&gt;GitHub 릴리스&lt;/a&gt; 에서 다운로드 할 수 있습니다 . iOS (arm32, arm64, 시뮬레이터 x86_64), Windows (mingw32 및 x86_64), Linux (x86_64, arm64, MIPS), macOS (x86_64), Raspberry PI, STM32, WASM을 포함한 다양한 대상을 지원합니다. 전체 대상 목록은 &lt;a href=&quot;../../reference/native-overview&quot;&gt;Kotlin / Native 개요&lt;/a&gt; 를 참조하세요 .</target>
        </trans-unit>
        <trans-unit id="6d899757cb2398280c10acb19695bbcab979ce63" translate="yes" xml:space="preserve">
          <source>The Kotlin/Native compiler is available for macOS, Linux, and Windows. It supports different targets including iOS (arm32, arm64, simulator x86_64), Windows (mingw32 and x86_64), Linux (x86_64, arm64, MIPS), macOS (x86_64), Raspberry PI, SMT32, WASM. For the full list of targets we can refer to the &lt;a href=&quot;../../reference/native-overview&quot;&gt;Kotlin/Native overview&lt;/a&gt;. While cross-platform compilation is possible (i.e., using one platform to compile for another), in this first tutorial we are only compiling for the operating system we're running on.</source>
          <target state="translated">Kotlin / Native 컴파일러는 macOS, Linux 및 Windows에서 사용할 수 있습니다. iOS (arm32, arm64, 시뮬레이터 x86_64), Windows (mingw32 및 x86_64), Linux (x86_64, arm64, MIPS), macOS (x86_64), Raspberry PI, SMT32, WASM 등 다양한 대상을 지원합니다. 전체 대상 목록은 &lt;a href=&quot;../../reference/native-overview&quot;&gt;Kotlin / Native 개요를&lt;/a&gt; 참조하십시오 . 플랫폼 간 컴파일이 가능하지만 (예 : 한 플랫폼을 사용하여 다른 플랫폼을 위해 컴파일)이 첫 번째 자습서에서는 실행중인 운영 체제에 대해서만 컴파일하고 있습니다.</target>
        </trans-unit>
        <trans-unit id="81130cfc1e83adbcab9e6da86955c53516b100d6" translate="yes" xml:space="preserve">
          <source>The Language Committee makes final decisions on what incompatible changes will be made and what exact measures should be taken to make user updates comfortable. In doing so, it relies on a set of guidelines available &lt;a href=&quot;https://kotlinlang.org/foundation/language-committee-guidelines.html&quot;&gt;here&lt;/a&gt;.</source>
          <target state="translated">언어위원회는 호환되지 않는 변경 사항과 사용자 업데이트를 편하게하기 위해 어떤 조치를 취해야하는지에 대한 최종 결정을 내립니다. 이를 위해 &lt;a href=&quot;https://kotlinlang.org/foundation/language-committee-guidelines.html&quot;&gt;여기&lt;/a&gt; 에있는 일련의 지침에 의존 합니다 .</target>
        </trans-unit>
        <trans-unit id="ef80e6d685a55893a99e950f4ed7fce2a86a1387" translate="yes" xml:space="preserve">
          <source>The Maven coordinates can be altered and additional artifact files may be added to the publications within the &lt;code&gt;targets { ... }&lt;/code&gt; block or the &lt;code&gt;publishing { ... }&lt;/code&gt; DSL:</source>
          <target state="translated">Maven 좌표를 변경하고 &lt;code&gt;targets { ... }&lt;/code&gt; 블록 또는 &lt;code&gt;publishing { ... }&lt;/code&gt; DSL 내의 게시에 추가 아티팩트 파일을 추가 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="88e2042b128835939040b35b47b76d2e41113fdc" translate="yes" xml:space="preserve">
          <source>The Node.js target provided by Kotlin/JS enables you to create applications that &lt;strong&gt;run on a server&lt;/strong&gt; or get &lt;strong&gt;executed on serverless infrastructure&lt;/strong&gt;. You benefit from the same advantages as other applications executing in a JavaScript runtime, such as &lt;strong&gt;faster startup speed&lt;/strong&gt; and a &lt;strong&gt;reduced memory footprint&lt;/strong&gt;. With &lt;a href=&quot;https://github.com/Kotlin/kotlinx-nodejs&quot;&gt;&lt;code&gt;kotlinx-nodejs&lt;/code&gt;&lt;/a&gt;, you have typesafe access to the &lt;a href=&quot;https://nodejs.org/docs/latest/api/&quot;&gt;Node.js API&lt;/a&gt; directly from your Kotlin code.</source>
          <target state="translated">Kotlin / JS에서 제공하는 Node.js 타겟을 사용하면 &lt;strong&gt;서버에서 &lt;/strong&gt;&lt;strong&gt;실행&lt;/strong&gt; 되거나 &lt;strong&gt;서버리스 인프라에서 실행되는&lt;/strong&gt; 애플리케이션을 만들 수 있습니다 . &lt;strong&gt;더 빠른 시작 속도&lt;/strong&gt; 및 &lt;strong&gt;감소 된 메모리 공간&lt;/strong&gt; 과 같은 JavaScript 런타임에서 실행되는 다른 애플리케이션과 동일한 이점을 누릴 수 있습니다 . 함께 &lt;a href=&quot;https://github.com/Kotlin/kotlinx-nodejs&quot;&gt; &lt;code&gt;kotlinx-nodejs&lt;/code&gt; &lt;/a&gt; , 당신은 형태 보증 된 액세스가 &lt;a href=&quot;https://nodejs.org/docs/latest/api/&quot;&gt;Node.js를 API&lt;/a&gt; 당신의 코 틀린 코드에서 직접합니다.</target>
        </trans-unit>
        <trans-unit id="cc27fb0be25fb775df8eea4ef2ba6465502161d0" translate="yes" xml:space="preserve">
          <source>The Nothing type</source>
          <target state="translated">아무것도없는 타입</target>
        </trans-unit>
        <trans-unit id="8cc0334fa925283a3687c8c8309944d9801a3bf7" translate="yes" xml:space="preserve">
          <source>The REPL command line interface opens. You can enter any valid Kotlin code and see the result. Results are printed as variables with auto-generated names like &lt;code&gt;res*&lt;/code&gt;. You can later use such variables in the code you run in REPL.</source>
          <target state="translated">REPL 명령 행 인터페이스가 열립니다. 유효한 Kotlin 코드를 입력하고 결과를 볼 수 있습니다. 결과는 &lt;code&gt;res*&lt;/code&gt; 와 같이 자동 생성 된 이름을 가진 변수로 인쇄됩니다 . 나중에 REPL에서 실행하는 코드에서 이러한 변수를 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="8fd3a2d7df046fd886264d64f792856593ec9b52" translate="yes" xml:space="preserve">
          <source>The REPL command line interface will open. You can enter any valid Kotlin code and see the result. The results are printed as variables with auto-generated names like &lt;code&gt;res*&lt;/code&gt;. You can later use such variables in the code you run in REPL.</source>
          <target state="translated">REPL 명령 줄 인터페이스가 열립니다. 유효한 Kotlin 코드를 입력하고 결과를 볼 수 있습니다. 결과는 &lt;code&gt;res*&lt;/code&gt; 와 같이 자동 생성 된 이름을 가진 변수로 인쇄됩니다 . 나중에 REPL에서 실행하는 코드에서 이러한 변수를 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="2b7ee6e00ac4369b5da7230befe3c113bdc4222a" translate="yes" xml:space="preserve">
          <source>The above code compiles. However, it will produce a runtime error if the object is not properly initialised before use or if &lt;code&gt;callAnything()&lt;/code&gt; is not defined at runtime.</source>
          <target state="translated">위의 코드는 컴파일됩니다. 그러나 사용하기 전에 객체가 올바르게 초기화되지 않았거나 런타임에 &lt;code&gt;callAnything()&lt;/code&gt; 이 정의되어 있지 않으면 런타임 오류가 발생 합니다.</target>
        </trans-unit>
        <trans-unit id="f67cd69d25bde43de96336b3847aa293b8518b9e" translate="yes" xml:space="preserve">
          <source>The above code indicates that the function is defined externally. The &lt;code&gt;@JsName(&quot;$&quot;)&lt;/code&gt; annotation allows us to map the name at runtime to &lt;code&gt;$&lt;/code&gt;. For more details on external declarations, please refer to the &lt;a href=&quot;../../reference/js-interop#external-modifier&quot;&gt;JavaScript interop documentation&lt;/a&gt;.</source>
          <target state="translated">위의 코드는 함수가 외부에서 정의되었음을 나타냅니다. &lt;code&gt;@JsName(&quot;$&quot;)&lt;/code&gt; 주석은 우리가 런타임에 이름을 매핑 할 수 있습니다 &lt;code&gt;$&lt;/code&gt; . 외부 선언에 대한 자세한 내용은 &lt;a href=&quot;../../reference/js-interop#external-modifier&quot;&gt;JavaScript interop 설명서&lt;/a&gt; 를 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="5749a0f0fe8aac855f406af86fe841d365cd7cde" translate="yes" xml:space="preserve">
          <source>The above could also be a oneliner - and note that the compiler knows that because the &lt;code&gt;throw&lt;/code&gt; will prevent &lt;code&gt;y&lt;/code&gt; from coming into existence if &lt;code&gt;x&lt;/code&gt; is null, &lt;code&gt;y&lt;/code&gt; must be non-null if we reach the line below. Contrast this with &lt;code&gt;x?.importantFunction()&lt;/code&gt;, which is a no-op if &lt;code&gt;x&lt;/code&gt; is null.</source>
          <target state="translated">위의 내용은 oneliner 일 수도 있습니다. 컴파일러는 &lt;code&gt;x&lt;/code&gt; 가 null 인 경우 &lt;code&gt;throw&lt;/code&gt; 로 인해 &lt;code&gt;y&lt;/code&gt; 가 존재 하지 못하게 되므로 아래 줄에 도달하면 &lt;code&gt;y&lt;/code&gt; 가 null 이 아니어야합니다. 이것을 &lt;code&gt;x?.importantFunction()&lt;/code&gt; 과 대조하십시오 . &lt;code&gt;x&lt;/code&gt; 가 null 이면 no-op 입니다.</target>
        </trans-unit>
        <trans-unit id="a87217033eafba44229106ab25d3816102c24f78" translate="yes" xml:space="preserve">
          <source>The above is preferable to:</source>
          <target state="translated">위의 내용은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="83d32caa4c432fbb23e6f884577d8ac97faf56a2" translate="yes" xml:space="preserve">
          <source>The affected type parameter or type is &lt;em&gt;contravariant&lt;/em&gt;. Denoted by the &lt;code&gt;in&lt;/code&gt; modifier in the source code.</source>
          <target state="translated">영향을받는 유형 매개 변수 또는 유형은 &lt;em&gt;반 변형&lt;/em&gt; 입니다. 에 의해 표시 &lt;code&gt;in&lt;/code&gt; 소스 코드의 수정.</target>
        </trans-unit>
        <trans-unit id="c340d256f4b2e039e4cb98547a639c6b4f11b7ba" translate="yes" xml:space="preserve">
          <source>The affected type parameter or type is &lt;em&gt;covariant&lt;/em&gt;. Denoted by the &lt;code&gt;out&lt;/code&gt; modifier in the source code.</source>
          <target state="translated">영향을받는 유형 매개 변수 또는 유형은 &lt;em&gt;공변량&lt;/em&gt; 입니다. 에 의해 표시 &lt;code&gt;out&lt;/code&gt; 소스 코드의 수정.</target>
        </trans-unit>
        <trans-unit id="dff58c2fdf74d3cdbb35c54ab0e0155e83797493" translate="yes" xml:space="preserve">
          <source>The affected type parameter or type is &lt;em&gt;invariant&lt;/em&gt;, which means it has no variance applied to it.</source>
          <target state="translated">영향을받는 유형 매개 변수 또는 유형이 &lt;em&gt;변하지&lt;/em&gt; 않으므로 적용되는 분산이 없습니다.</target>
        </trans-unit>
        <trans-unit id="e638916d7acda84432e87e4a36d2e48c0c286bc5" translate="yes" xml:space="preserve">
          <source>The annotation also works for constructors, static methods, and so on. It can't be used on abstract methods, including methods defined in interfaces.</source>
          <target state="translated">주석은 생성자, 정적 메서드 등에서도 작동합니다. 인터페이스에 정의 된 메소드를 포함한 추상 메소드에는 사용할 수 없습니다.</target>
        </trans-unit>
        <trans-unit id="d402ed87eb5a9bdd2e6bcdd0889af9af5444c36e" translate="yes" xml:space="preserve">
          <source>The annotation being applied to one of overloads allows to resolve this ambiguity by analyzing what value is returned from the lambda function.</source>
          <target state="translated">오버로드 중 하나에 적용되는 주석을 사용하면 람다 함수에서 반환되는 값을 분석하여이 모호성을 해결할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="718f26b180ad67d2a1e20d6b7d4406049d2961a3" translate="yes" xml:space="preserve">
          <source>The annotation can be used on top-level external declarations (classes, properties, functions) and files. In case of file (which can't be &lt;code&gt;external&lt;/code&gt;) the following rule applies: all the declarations in the file must be &lt;code&gt;external&lt;/code&gt;. By applying &lt;code&gt;@JsModule(...)&lt;/code&gt; on a file you tell the compiler to import a JavaScript object that contain all the declarations from the file.</source>
          <target state="translated">주석은 최상위 외부 선언 (클래스, 속성, 함수) 및 파일에서 사용할 수 있습니다. 파일 ( &lt;code&gt;external&lt;/code&gt; 수 없음 )의 경우 다음 규칙이 적용됩니다. 파일의 모든 선언은 &lt;code&gt;external&lt;/code&gt; 이어야합니다 . 파일에 &lt;code&gt;@JsModule(...)&lt;/code&gt; 을 적용 하면 파일에서 모든 선언을 포함하는 JavaScript 객체를 가져 오도록 컴파일러에 지시합니다.</target>
        </trans-unit>
        <trans-unit id="ac7d8e089591134bac44995dadba571525f38003" translate="yes" xml:space="preserve">
          <source>The annotation has effect only in Kotlin/Native platform.</source>
          <target state="translated">주석은 Kotlin / Native 플랫폼에서만 효과가 있습니다.</target>
        </trans-unit>
        <trans-unit id="993a0bc9861bdf8ea351a5eb1dd7c588f24a97de" translate="yes" xml:space="preserve">
          <source>The annotations for marking and using experimental APIs (&lt;code&gt;@Experimental&lt;/code&gt; and &lt;code&gt;@UseExperimental&lt;/code&gt;) are &lt;em&gt;experimental&lt;/em&gt; in Kotlin 1.3. See details &lt;a href=&quot;#experimental-status-of-experimental-api-markers&quot;&gt;below&lt;/a&gt;.</source>
          <target state="translated">실험적 API ( &lt;code&gt;@Experimental&lt;/code&gt; 및 &lt;code&gt;@UseExperimental&lt;/code&gt; ) 를 표시하고 사용하기위한 주석은 Kotlin 1.3에서 &lt;em&gt;실험적&lt;/em&gt; 입니다. 세부 사항을 참조하십시오 &lt;a href=&quot;#experimental-status-of-experimental-api-markers&quot;&gt;아래를&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="ecb7079c4ed4f36ab04fb8b963913758bd291799" translate="yes" xml:space="preserve">
          <source>The anonymous function syntax allows you to specify the receiver type of a function literal directly. This can be useful if you need to declare a variable of a function type with receiver, and to use it later.</source>
          <target state="translated">익명 함수 구문을 사용하면 함수 리터럴의 수신자 유형을 직접 지정할 수 있습니다. 리시버로 함수 타입의 변수를 선언하고 나중에 사용해야 할 때 유용 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="e99a96b83211ab5edf0514b0e8d206e232457fc5" translate="yes" xml:space="preserve">
          <source>The application we're going to create will simply show &lt;code&gt;Kotlin Rocks on Android&lt;/code&gt; on Android and &lt;code&gt;Kotlin Rocks on iOS &amp;lt;version&amp;gt;&lt;/code&gt; on iOS. The idea is to share the code that generates this message.</source>
          <target state="translated">우리가 만들 응용 프로그램은 Android의 Android에서는 &lt;code&gt;Kotlin Rocks on iOS &amp;lt;version&amp;gt;&lt;/code&gt; 에서는 &lt;code&gt;Kotlin Rocks on Android&lt;/code&gt; 표시 합니다. 이 메시지를 생성하는 코드를 공유하는 것이 좋습니다.</target>
        </trans-unit>
        <trans-unit id="6689bd2ccf2821c30727df021f990e93b549d058" translate="yes" xml:space="preserve">
          <source>The application will print &quot;Hello Kotlin/Native&quot; on the standard output. In a working directory of choice, create a file named &lt;code&gt;hello.kt&lt;/code&gt; and enter the following contents:</source>
          <target state="translated">애플리케이션은 표준 출력에 &quot;Hello Kotlin / Native&quot;를 인쇄합니다. 선택한 작업 디렉토리에서 &lt;code&gt;hello.kt&lt;/code&gt; 라는 파일을 만들고 다음 내용을 입력합니다.</target>
        </trans-unit>
        <trans-unit id="c116b8d3b85f1f036748497d93f617762a69f1eb" translate="yes" xml:space="preserve">
          <source>The array literal syntax is constrained to annotation arguments.</source>
          <target state="translated">배열 리터럴 구문은 주석 인수로 제한됩니다.</target>
        </trans-unit>
        <trans-unit id="e6585b22e37432101f079b3e68122b140a6c8d0b" translate="yes" xml:space="preserve">
          <source>The arrow notation is right-associative, &lt;code&gt;(Int) -&amp;gt; (Int) -&amp;gt; Unit&lt;/code&gt; is equivalent to the previous example, but not to &lt;code&gt;((Int) -&amp;gt; (Int)) -&amp;gt; Unit&lt;/code&gt;.</source>
          <target state="translated">화살표 표기법은 오른쪽 연관이며, &lt;code&gt;(Int) -&amp;gt; (Int) -&amp;gt; Unit&lt;/code&gt; 은 이전 예제와 동일하지만 &lt;code&gt;((Int) -&amp;gt; (Int)) -&amp;gt; Unit&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="eff75fbb6c3dbfe907753b9474216f02d469cd66" translate="yes" xml:space="preserve">
          <source>The author strongly recommends that you use an IDE with Kotlin support, as the static typing allows an IDE to do reliable navigation and code completion. I recommend &lt;a href=&quot;https://www.jetbrains.com/idea/&quot;&gt;IntelliJ IDEA&lt;/a&gt;, which is built by the same company that created Kotlin. The Community Edition is free; see &lt;a href=&quot;../getting-started&quot;&gt;instructions for getting started&lt;/a&gt; (it comes bundled with Kotlin, and you can run your program from the IDE).</source>
          <target state="translated">정적 타이핑을 사용하면 IDE에서 안정적인 탐색 및 코드 완성을 수행 할 수 있으므로 저자는 Kotlin을 지원하는 IDE를 사용하는 것이 좋습니다. Kotlin을 만든 회사에서 만든 &lt;a href=&quot;https://www.jetbrains.com/idea/&quot;&gt;IntelliJ IDEA를&lt;/a&gt; 권장 합니다. Community Edition은 무료입니다. &lt;a href=&quot;../getting-started&quot;&gt;시작 지침을&lt;/a&gt; 참조하십시오 (Kotlin과 함께 제공되며 IDE에서 프로그램을 실행할 수 있습니다).</target>
        </trans-unit>
        <trans-unit id="b22a383945309e76147365f532a907cec46e842a" translate="yes" xml:space="preserve">
          <source>The automatically added standard library will be the same version of the Kotlin Gradle plugin, since they have the same versioning.</source>
          <target state="translated">자동으로 추가 된 표준 라이브러리는 버전 관리가 동일하므로 Kotlin Gradle 플러그인과 동일한 버전이됩니다.</target>
        </trans-unit>
        <trans-unit id="031b37e00f6cc7d0005e366d6305ce9ae5158eb7" translate="yes" xml:space="preserve">
          <source>The available options for persistence include direct JDBC access, JPA, as well as using NoSQL databases through their Java drivers. For JPA, the &lt;a href=&quot;compiler-plugins#jpa-support&quot;&gt;kotlin-jpa compiler plugin&lt;/a&gt; adapts Kotlin-compiled classes to the requirements of the framework.</source>
          <target state="translated">지속성에 사용 가능한 옵션에는 직접 JDBC 액세스, JPA 및 Java 드라이버를 통한 NoSQL 데이터베이스 사용이 포함됩니다. JPA의 경우, &lt;a href=&quot;compiler-plugins#jpa-support&quot;&gt;kotlin-jpa 컴파일러 플러그인&lt;/a&gt; 은 Kotlin으로 컴파일 된 클래스를 프레임 워크의 요구 사항에 맞게 조정합니다.</target>
        </trans-unit>
        <trans-unit id="f64d03b5ac4e40dff196fed46f6ad483b559e0ca" translate="yes" xml:space="preserve">
          <source>The base class for all errors and exceptions. Only instances of this class can be thrown or caught.</source>
          <target state="translated">모든 오류 및 예외의 기본 클래스입니다. 이 클래스의 인스턴스 만 던지거나 잡을 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="9567e5bd74f98cde043ce2604d36c00a7448fbca" translate="yes" xml:space="preserve">
          <source>The base exception class is &lt;code&gt;Throwable&lt;/code&gt; (but it is more common to extend its subclass &lt;code&gt;Exception&lt;/code&gt;), and there are a ton of built-in exception classes. If you don't find one that match your needs, you can create your own by inheriting from an existing exception class.</source>
          <target state="translated">기본 예외 클래스는 &lt;code&gt;Throwable&lt;/code&gt; 이지만 (하위 클래스 &lt;code&gt;Exception&lt;/code&gt; 확장하는 것이 더 일반적 임), 많은 내장 예외 클래스가 있습니다. 필요에 맞는 것을 찾지 못하면 기존 예외 클래스에서 상속하여 직접 만들 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="d9ecc0f2cf4982d26aff3dd399995b9e266ca38f" translate="yes" xml:space="preserve">
          <source>The basic association function &lt;a href=&quot;../../api/latest/jvm/stdlib/kotlin.collections/associate-with&quot;&gt;&lt;code&gt;associateWith()&lt;/code&gt;&lt;/a&gt; creates a &lt;code&gt;Map&lt;/code&gt; in which the elements of the original collection are keys, and values are produced from them by the given transformation function. If two elements are equal, only the last one remains in the map.</source>
          <target state="translated">기본 연관 함수 ( &lt;a href=&quot;../../api/latest/jvm/stdlib/kotlin.collections/associate-with&quot;&gt; &lt;code&gt;associateWith()&lt;/code&gt; &lt;/a&gt; 는 원래 컬렉션의 요소가 키이고 지정된 변환 함수에 의해 값이 생성되는 &lt;code&gt;Map&lt;/code&gt; 을 만듭니다 . 두 요소가 같으면 마지막 요소 만 맵에 남아 있습니다.</target>
        </trans-unit>
        <trans-unit id="8747487378c0fd48a48984cf8a26dd2308ffac09" translate="yes" xml:space="preserve">
          <source>The basic filtering function is &lt;a href=&quot;../../api/latest/jvm/stdlib/kotlin.collections/filter&quot;&gt;&lt;code&gt;filter()&lt;/code&gt;&lt;/a&gt;. When called with a predicate, &lt;code&gt;filter()&lt;/code&gt; returns the collection elements that match it. For both &lt;code&gt;List&lt;/code&gt; and &lt;code&gt;Set&lt;/code&gt;, the resulting collection is a &lt;code&gt;List&lt;/code&gt;, for &lt;code&gt;Map&lt;/code&gt; it's a &lt;code&gt;Map&lt;/code&gt; as well.</source>
          <target state="translated">기본 필터링 함수는 &lt;a href=&quot;../../api/latest/jvm/stdlib/kotlin.collections/filter&quot;&gt; &lt;code&gt;filter()&lt;/code&gt; &lt;/a&gt; 입니다. 술어와 함께 호출되면 &lt;code&gt;filter()&lt;/code&gt; 는 일치하는 콜렉션 요소를 리턴합니다. &lt;code&gt;List&lt;/code&gt; 및 &lt;code&gt;Set&lt;/code&gt; 모두 결과 컬렉션은 &lt;code&gt;List&lt;/code&gt; 이며 &lt;code&gt;Map&lt;/code&gt; 의 경우 &lt;code&gt;Map&lt;/code&gt; 이기도합니다.</target>
        </trans-unit>
        <trans-unit id="699437afba4c1eb6f2aa1a305318c9d9571a4fe8" translate="yes" xml:space="preserve">
          <source>The basic functions &lt;a href=&quot;../../api/latest/jvm/stdlib/kotlin.collections/sorted&quot;&gt;&lt;code&gt;sorted()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../../api/latest/jvm/stdlib/kotlin.collections/sorted-descending&quot;&gt;&lt;code&gt;sortedDescending()&lt;/code&gt;&lt;/a&gt; return elements of a collection sorted into ascending and descending sequence according to their natural order. These functions apply to collections of &lt;code&gt;Comparable&lt;/code&gt; elements.</source>
          <target state="translated">기본 함수 &lt;a href=&quot;../../api/latest/jvm/stdlib/kotlin.collections/sorted&quot;&gt; &lt;code&gt;sorted()&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;../../api/latest/jvm/stdlib/kotlin.collections/sorted-descending&quot;&gt; &lt;code&gt;sortedDescending()&lt;/code&gt; &lt;/a&gt; 은 자연 순서에 따라 오름차순 및 내림차순으로 정렬 된 컬렉션의 요소를 반환합니다. 이러한 기능은 &lt;code&gt;Comparable&lt;/code&gt; 요소의 모음에 적용됩니다 .</target>
        </trans-unit>
        <trans-unit id="70e38425dddb8d588d69bf3481934278ea9001d3" translate="yes" xml:space="preserve">
          <source>The basic operators have familiar names like &lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines.flow/map.html&quot;&gt;map&lt;/a&gt; and &lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines.flow/filter.html&quot;&gt;filter&lt;/a&gt;. The important difference to sequences is that blocks of code inside these operators can call suspending functions.</source>
          <target state="translated">기본 연산자는 &lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines.flow/map.html&quot;&gt;map&lt;/a&gt; 및 &lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines.flow/filter.html&quot;&gt;filter&lt;/a&gt; 와 같은 친숙한 이름을 가지고 있습니다 . 시퀀스의 중요한 차이점은 이러한 연산자 내부의 코드 블록이 일시 중단 함수를 호출 할 수 있다는 것입니다.</target>
        </trans-unit>
        <trans-unit id="176655605bee6eae4892bd4ec703e94408b0c3f3" translate="yes" xml:space="preserve">
          <source>The best place to start is &lt;a href=&quot;https://kotlinlang.org&quot;&gt;this website&lt;/a&gt;. From there you can download the compiler, &lt;a href=&quot;https://play.kotlinlang.org&quot;&gt;try it online&lt;/a&gt; as well as get access to resources, &lt;a href=&quot;index&quot;&gt;reference documentation&lt;/a&gt; and &lt;a href=&quot;../tutorials/index&quot;&gt;tutorials&lt;/a&gt;.</source>
          <target state="translated">시작하기 가장 좋은 곳은 &lt;a href=&quot;https://kotlinlang.org&quot;&gt;이 웹 사이트&lt;/a&gt; 입니다. 여기에서 컴파일러를 다운로드하고 &lt;a href=&quot;https://play.kotlinlang.org&quot;&gt;온라인&lt;/a&gt; 으로 시도 할 수있을 뿐만 아니라 리소스, &lt;a href=&quot;index&quot;&gt;참조 설명서&lt;/a&gt; 및 &lt;a href=&quot;../tutorials/index&quot;&gt;자습서에&lt;/a&gt; 액세스 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="a00b10508469a6652d6e476b8749625b68deb8ad" translate="yes" xml:space="preserve">
          <source>The best way to see what C data types are visible in Kotlin is to try it</source>
          <target state="translated">Kotlin에서 C 데이터 유형을 볼 수있는 가장 좋은 방법은 시도하는 것입니다.</target>
        </trans-unit>
        <trans-unit id="8cccc62dffea928c706df5dfd73f9995b0b8212a" translate="yes" xml:space="preserve">
          <source>The best way to understand the mapping between C and Kotlin languages is to try it out on a small example. We will create a small library headers for that. First, we need to create a &lt;code&gt;lib.h&lt;/code&gt; file with the following declaration of functions that deal with the C strings:</source>
          <target state="translated">C와 Kotlin 언어 간의 매핑을 이해하는 가장 좋은 방법은 간단한 예를 통해 시험해 보는 것입니다. 이를 위해 작은 라이브러리 헤더를 만들 것입니다. 먼저 C 문자열을 다루는 다음 함수 선언으로 &lt;code&gt;lib.h&lt;/code&gt; 파일 을 만들어야합니다 .</target>
        </trans-unit>
        <trans-unit id="ffd6c6681f86404c6d10fd90b4e30255a8c338ed" translate="yes" xml:space="preserve">
          <source>The best way to understand the mapping between Kotlin and C is to try a tiny example. We declare a function that accepts a function pointer as a parameter and another function that returns a function pointer.</source>
          <target state="translated">Kotlin과 C의 매핑을 이해하는 가장 좋은 방법은 작은 예를 시도하는 것입니다. 함수 포인터를 매개 변수로 받아들이는 함수와 함수 포인터를 반환하는 다른 함수를 선언합니다.</target>
        </trans-unit>
        <trans-unit id="6537550691113ba29bcd420ea4633f14458a70b1" translate="yes" xml:space="preserve">
          <source>The best way to understand the mapping between Kotlin and C is to try a tiny example. We will declare a struct and a union in the C language, to see how they are mapped into Kotlin.</source>
          <target state="translated">Kotlin과 C의 매핑을 이해하는 가장 좋은 방법은 작은 예를 시도하는 것입니다. 우리는 C 언어로 구조체와 공용체를 선언하여 코 틀린에 어떻게 매핑되는지 확인합니다.</target>
        </trans-unit>
        <trans-unit id="4232ac266b4561b99b9bc10fa2be9171a24a3226" translate="yes" xml:space="preserve">
          <source>The best way to understand these techniques is to try them out. Let's create a first tiny Kotlin library and use it from a C program.</source>
          <target state="translated">이러한 기술을 이해하는 가장 좋은 방법은 시험해 보는 것입니다. 첫 번째 작은 Kotlin 라이브러리를 만들어 C 프로그램에서 사용하겠습니다.</target>
        </trans-unit>
        <trans-unit id="eaa47ef7640a883ac2445b67958ca2668d316a2e" translate="yes" xml:space="preserve">
          <source>The best way to use the Kotlin/Native compiler is with a build system. It helps by downloading and caching the Kotlin/Native compiler binaries and libraries with transitive dependencies, and running the compiler and tests. It caches the compilation results too. A build system can also be used by an IDE to understand the project layout.</source>
          <target state="translated">Kotlin / Native 컴파일러를 사용하는 가장 좋은 방법은 빌드 시스템을 사용하는 것입니다. 전이 의존성이있는 Kotlin / Native 컴파일러 바이너리 및 라이브러리를 다운로드 및 캐싱하고 컴파일러 및 테스트를 실행하면 도움이됩니다. 컴파일 결과도 캐시합니다. IDE에서 빌드 시스템을 사용하여 프로젝트 레이아웃을 이해할 수도 있습니다.</target>
        </trans-unit>
        <trans-unit id="9af9e08ad353ac6ed57e0041c23dca829fbff7c4" translate="yes" xml:space="preserve">
          <source>The binaries DSL allows not only creating binaries but also accessing already created ones to configure them or get their properties (e.g. path to an output file). The &lt;code&gt;binaries&lt;/code&gt; collection implements the &lt;a href=&quot;https://docs.gradle.org/current/javadoc/org/gradle/api/DomainObjectSet.html&quot;&gt;&lt;code&gt;DomainObjectSet&lt;/code&gt;&lt;/a&gt; interface and provides methods like &lt;code&gt;all&lt;/code&gt; or &lt;code&gt;matching&lt;/code&gt; allowing configuring groups of elements.</source>
          <target state="translated">바이너리 DSL을 사용하면 바이너리를 생성 할뿐만 아니라 이미 생성 된 바이너리에 액세스하여이를 구성하거나 속성 (예 : 출력 파일 경로)을 얻을 수 있습니다. &lt;code&gt;binaries&lt;/code&gt; 컬렉션 구현 &lt;a href=&quot;https://docs.gradle.org/current/javadoc/org/gradle/api/DomainObjectSet.html&quot;&gt; &lt;code&gt;DomainObjectSet&lt;/code&gt; 의&lt;/a&gt; 인터페이스와 같은 방법을 제공하는 &lt;code&gt;all&lt;/code&gt; 또는 &lt;code&gt;matching&lt;/code&gt; 요소의 그룹을 구성 가능하게한다.</target>
        </trans-unit>
        <trans-unit id="bc8bcc38381183bfcc94707aa9b37df0e52f23b1" translate="yes" xml:space="preserve">
          <source>The binary files are created in the &lt;code&gt;build/bin/native/debugExecutable&lt;/code&gt; or &lt;code&gt;build/bin/native/releaseExecutable&lt;/code&gt; folders respectively. The file has a &lt;code&gt;.kexe&lt;/code&gt; extension on Linux and macOS and an &lt;code&gt;.exe&lt;/code&gt; extension on Windows. Use the following command to instruct the build to produce binaries:</source>
          <target state="translated">이진 파일은 각각 &lt;code&gt;build/bin/native/debugExecutable&lt;/code&gt; 또는 &lt;code&gt;build/bin/native/releaseExecutable&lt;/code&gt; 폴더에 생성됩니다. 파일은 Linux 및 macOS에서 확장자 가 &lt;code&gt;.kexe&lt;/code&gt; 이고 Windows에서 확장자 가 &lt;code&gt;.exe&lt;/code&gt; 입니다. 바이너리를 생성하도록 빌드에 지시하려면 다음 명령을 사용하십시오.</target>
        </trans-unit>
        <trans-unit id="54650137fcf92a797ec9822a89e0e51a3d74473c" translate="yes" xml:space="preserve">
          <source>The block after &lt;code&gt;tree(&quot;root&quot;)&lt;/code&gt; is the first function literal with receiver, which will be passed to &lt;code&gt;tree()&lt;/code&gt; as the &lt;code&gt;initialize&lt;/code&gt; parameter. According to the parameter list of &lt;code&gt;tree()&lt;/code&gt;, the receiver is of type &lt;code&gt;TreeNode&lt;/code&gt;, and therefore, &lt;code&gt;tree()&lt;/code&gt; can call &lt;code&gt;initialize()&lt;/code&gt; on &lt;code&gt;root&lt;/code&gt;. &lt;code&gt;root&lt;/code&gt; then becomes &lt;code&gt;this&lt;/code&gt; inside the scope of that lambda expression, so when we call &lt;code&gt;node(&quot;math&quot;)&lt;/code&gt;, it implicitly says &lt;code&gt;this.node(&quot;math&quot;)&lt;/code&gt;, where &lt;code&gt;this&lt;/code&gt; refers to the same &lt;code&gt;TreeNode&lt;/code&gt; as &lt;code&gt;root&lt;/code&gt;. The next block is passed to &lt;code&gt;TreeNode.node()&lt;/code&gt;, and is invoked on the first child of the &lt;code&gt;root&lt;/code&gt; node, namely &lt;code&gt;math&lt;/code&gt;, and inside it, &lt;code&gt;this&lt;/code&gt; will refer to &lt;code&gt;math&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;tree(&quot;root&quot;)&lt;/code&gt; 뒤의 블록 은 수신자가있는 첫 번째 함수 리터럴이며 &lt;code&gt;initialize&lt;/code&gt; 매개 변수 로 &lt;code&gt;tree()&lt;/code&gt; 전달됩니다 . &lt;code&gt;tree()&lt;/code&gt; 의 매개 변수 목록에 따르면 수신자는 &lt;code&gt;TreeNode&lt;/code&gt; 유형 이므로 &lt;code&gt;tree()&lt;/code&gt; 는 &lt;code&gt;root&lt;/code&gt; 에서 &lt;code&gt;initialize()&lt;/code&gt; 를 호출 할 수 있습니다 . &lt;code&gt;root&lt;/code&gt; 다음이된다 &lt;code&gt;this&lt;/code&gt; 그 람다 식의 범위 내에서, 그래서 우리는 호출 할 때 &lt;code&gt;node(&quot;math&quot;)&lt;/code&gt; , 그것은 암시 적으로 말한다 &lt;code&gt;this.node(&quot;math&quot;)&lt;/code&gt; , &lt;code&gt;this&lt;/code&gt; 같은를 의미 &lt;code&gt;TreeNode&lt;/code&gt; 를 같은 &lt;code&gt;root&lt;/code&gt; . 다음 블록에 전달됩니다 &lt;code&gt;TreeNode.node()&lt;/code&gt; 과의 첫 번째 자식에 호출 &lt;code&gt;root&lt;/code&gt; 노드, 즉 &lt;code&gt;math&lt;/code&gt; , 그리고 그 안에, &lt;code&gt;this&lt;/code&gt; 참조됩니다 &lt;code&gt;math&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="299004dba6c7ef441e08541633a7bed7d65922cd" translate="yes" xml:space="preserve">
          <source>The body can be a block.</source>
          <target state="translated">몸은 블록이 될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="d17dad4981064bd9e13820de989411c6afec8c62" translate="yes" xml:space="preserve">
          <source>The body of an object expression may access, and possibly modify, the local variables of the containing scope.</source>
          <target state="translated">객체 표현식의 본문은 포함하는 범위의 로컬 변수에 액세스하고 가능하면 수정할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="6eb082a62156761cbe45120602d0be4ff5a5d1b2" translate="yes" xml:space="preserve">
          <source>The box classes used for capturing mutable closure variables in lambdas no longer have volatile fields. This change improves performance, but can lead to new race conditions in some rare usage scenarios. If you're affected by this, you need to provide your own synchronization for accessing the variables.</source>
          <target state="translated">람다에서 가변 클로저 변수를 캡처하는 데 사용되는 박스 클래스에는 더 이상 휘발성 필드가 없습니다. 이 변경으로 성능이 향상되지만 드문 사용 시나리오에서 새로운 경쟁 조건이 발생할 수 있습니다. 이로 인해 영향을받는 경우 변수에 액세스하기위한 고유 한 동기화를 제공해야합니다.</target>
        </trans-unit>
        <trans-unit id="0bb1979f4fa500a54eb079957dc97f38da2dd0fd" translate="yes" xml:space="preserve">
          <source>The build generates the following files under the &lt;code&gt;build/bin/native/debugShared&lt;/code&gt; folder, depending on the host OS:</source>
          <target state="translated">빌드 는 호스트 OS에 따라 &lt;code&gt;build/bin/native/debugShared&lt;/code&gt; 폴더 아래에 다음 파일을 생성합니다 .</target>
        </trans-unit>
        <trans-unit id="8d7f1cfca83f4be43b98d7bc6f3dc13e77358eda" translate="yes" xml:space="preserve">
          <source>The call to &lt;code&gt;C().foo(1)&lt;/code&gt; will print &quot;extension&quot;.</source>
          <target state="translated">&lt;code&gt;C().foo(1)&lt;/code&gt; 대한 호출 은 &quot;extension&quot;을 인쇄합니다.</target>
        </trans-unit>
        <trans-unit id="5986952e4227de9affa4abe69a35c446c0bfc14d" translate="yes" xml:space="preserve">
          <source>The call to &lt;code&gt;execute&lt;/code&gt; uses a function passed as its second parameter to produce an object subgraph (i.e. set of mutually referring objects) which is then passed as a whole to that worker, it is then no longer available to the thread that initiated the request. This property is checked if the first parameter is &lt;code&gt;TransferMode.SAFE&lt;/code&gt; by graph traversal and is just assumed to be true, if it is &lt;code&gt;TransferMode.UNSAFE&lt;/code&gt;. The last parameter to &lt;code&gt;execute&lt;/code&gt; is a special Kotlin lambda, which is not allowed to capture any state, and is actually invoked in the target worker's context. Once processed, the result is transferred to whatever consumes it in the future, and it is attached to the object graph of that worker/thread.</source>
          <target state="translated">&lt;code&gt;execute&lt;/code&gt; 호출 은 두 번째 매개 변수로 전달 된 함수를 사용하여 오브젝트 서브 그래프 (즉, 상호 참조 오브젝트 세트)를 생성 한 다음 해당 워커에 전체적으로 전달하여 요청을 시작한 스레드에서 더 이상 사용할 수 없게합니다. 첫 번째 변수 인 경우이 속성 판정 &lt;code&gt;TransferMode.SAFE&lt;/code&gt; 이 그래프 순회로하고 있는지 바로 진정한 것으로 가정 &lt;code&gt;TransferMode.UNSAFE&lt;/code&gt; 이 . 마지막으로 &lt;code&gt;execute&lt;/code&gt; 매개 변수 는 특수한 Kotlin 람다로, 상태를 캡처 할 수 없으며 실제로 대상 작업자의 컨텍스트에서 호출됩니다. 일단 처리되면 결과는 나중에 소비되는 모든 항목으로 전송되고 해당 작업자 / 스레드의 개체 그래프에 첨부됩니다.</target>
        </trans-unit>
        <trans-unit id="cf4d64ccc981a36348dc5e3486734b7a527c1cd6" translate="yes" xml:space="preserve">
          <source>The callback which is called after the change of the property is made. The value of the property has already been changed when this callback is invoked.</source>
          <target state="translated">속성 변경 후 호출되는 콜백이 작성됩니다. 이 콜백이 호출 될 때 속성 값이 이미 변경되었습니다.</target>
        </trans-unit>
        <trans-unit id="f46a88a879fdbb85f0bd5182483f8be3f20e50d2" translate="yes" xml:space="preserve">
          <source>The callback which is called before a change to the property value is attempted. The value of the property hasn't been changed yet, when this callback is invoked. If the callback returns &lt;code&gt;true&lt;/code&gt; the value of the property is being set to the new value, and if the callback returns &lt;code&gt;false&lt;/code&gt; the new value is discarded and the property remains its old value.</source>
          <target state="translated">특성 값을 변경하기 전에 호출되는 콜백입니다. 이 콜백이 호출 될 때 속성 값이 아직 변경되지 않았습니다. 콜백이 &lt;code&gt;true&lt;/code&gt; 를 반환 하면 속성 값이 새 값으로 설정되고 콜백이 &lt;code&gt;false&lt;/code&gt; 를 반환 하면 새 값이 삭제되고 속성은 이전 값으로 유지됩니다.</target>
        </trans-unit>
        <trans-unit id="e3032cd7941afef1fb6a2120a573d1232d288d72" translate="yes" xml:space="preserve">
          <source>The calls that affect inference are either members of the receiver type of an annotated function parameter or extensions for that type. The extensions must be themselves annotated with &lt;code&gt;@BuilderInference&lt;/code&gt;.</source>
          <target state="translated">추론에 영향을 미치는 호출은 어노테이션이있는 함수 매개 변수의 수신자 유형 또는 해당 유형의 확장입니다. 확장명에는 반드시 &lt;code&gt;@BuilderInference&lt;/code&gt; 로 주석을 달아야 합니다.</target>
        </trans-unit>
        <trans-unit id="30fa4bb2f1f32f71119d427e541174a3d60dd7ed" translate="yes" xml:space="preserve">
          <source>The capacity is the maximum length this string builder can have before an allocation occurs.</source>
          <target state="translated">용량은 할당이 발생하기 전에이 문자열 작성기가 가질 수있는 최대 길이입니다.</target>
        </trans-unit>
        <trans-unit id="5833c1f716afd68e76f6ee63506f61a1ac4d8150" translate="yes" xml:space="preserve">
          <source>The changes in dependencies are &lt;a href=&quot;https://en.wikipedia.org/wiki/Application_binary_interface&quot;&gt;ABI&lt;/a&gt; compatible. For example, the only changes are in method bodies.</source>
          <target state="translated">종속성 변경은 &lt;a href=&quot;https://en.wikipedia.org/wiki/Application_binary_interface&quot;&gt;ABI&lt;/a&gt; 와 호환됩니다. 예를 들어, 메소드 본문에서만 변경 사항이 있습니다.</target>
        </trans-unit>
        <trans-unit id="ca6d3d47c03bc25dbb852207c0d849513ed5fbaf" translate="yes" xml:space="preserve">
          <source>The channels shown so far had no buffer. Unbuffered channels transfer elements when sender and receiver meet each other (aka rendezvous). If send is invoked first, then it is suspended until receive is invoked, if receive is invoked first, it is suspended until send is invoked.</source>
          <target state="translated">지금까지 표시된 채널에는 버퍼가 없습니다. 송신자와 수신자가 서로 만날 때 버퍼되지 않은 채널 전송 요소 (일명 랑데부). send가 먼저 호출되면 receive가 호출 될 때까지 일시 중단되고 receive가 먼저 호출되면 send가 호출 될 때까지 일시 중단됩니다.</target>
        </trans-unit>
        <trans-unit id="fa768c5c4432c77d50de790cda1c8c687dccf1cc" translate="yes" xml:space="preserve">
          <source>The character &quot; &amp;ndash; quotation mark</source>
          <target state="translated">문자 &quot;&amp;ndash; 인용 부호</target>
        </trans-unit>
        <trans-unit id="10c860623b3bfd4256ce034a4fa10ecca2e8d17c" translate="yes" xml:space="preserve">
          <source>The character $ &amp;ndash; dollar sign</source>
          <target state="translated">문자 $ &amp;ndash; 달러 기호</target>
        </trans-unit>
        <trans-unit id="bb0b9f77aa3a2b1b235948227a9bb6e95724f73c" translate="yes" xml:space="preserve">
          <source>The character &amp;Dagger;</source>
          <target state="translated">캐릭터 &amp;Dagger;</target>
        </trans-unit>
        <trans-unit id="97d065e0957f914068e24066c8bc53313cb9196a" translate="yes" xml:space="preserve">
          <source>The character &amp;Prime;</source>
          <target state="translated">캐릭터 &quot;</target>
        </trans-unit>
        <trans-unit id="697b0963155a10d5f080f157c0e1d9c9aacc9b21" translate="yes" xml:space="preserve">
          <source>The character &amp;amp; &amp;ndash; ampersand</source>
          <target state="translated">캐릭터 &amp;amp; &amp;ndash; 앰퍼샌드</target>
        </trans-unit>
        <trans-unit id="094872d2798a25e27adaff380803676c236be373" translate="yes" xml:space="preserve">
          <source>The character &amp;asymp;</source>
          <target state="translated">캐릭터 &amp;asymp;</target>
        </trans-unit>
        <trans-unit id="41d60c0526caa8463741bd966759bf19026cb739" translate="yes" xml:space="preserve">
          <source>The character &amp;bdquo;</source>
          <target state="translated">캐릭터 &quot;</target>
        </trans-unit>
        <trans-unit id="fff1f1e9d607e97e90b4bc028bb0cc7f10c48e01" translate="yes" xml:space="preserve">
          <source>The character &amp;bull;</source>
          <target state="translated">캐릭터 &amp;bull;</target>
        </trans-unit>
        <trans-unit id="143c3fcec665ebddc83c2753db67d88e2fbaf38a" translate="yes" xml:space="preserve">
          <source>The character &amp;cent;</source>
          <target state="translated">캐릭터 &amp;cent;</target>
        </trans-unit>
        <trans-unit id="ee171eaf967121aa215c85e62d2ec509ebb04257" translate="yes" xml:space="preserve">
          <source>The character &amp;copy;</source>
          <target state="translated">캐릭터 &amp;copy;</target>
        </trans-unit>
        <trans-unit id="314c38bf0716b200771c1a885fab69a9b65b99c6" translate="yes" xml:space="preserve">
          <source>The character &amp;dagger;</source>
          <target state="translated">캐릭터 &amp;dagger;</target>
        </trans-unit>
        <trans-unit id="6f9bd3084db43833f63880cca5d946309a97ca39" translate="yes" xml:space="preserve">
          <source>The character &amp;deg;</source>
          <target state="translated">문자 &amp;deg;</target>
        </trans-unit>
        <trans-unit id="0e423b28ce34d3cf18fda3a07cf0dfa515d8890e" translate="yes" xml:space="preserve">
          <source>The character &amp;euro;</source>
          <target state="translated">캐릭터 &amp;euro;</target>
        </trans-unit>
        <trans-unit id="b1449855c21d4fd06c0d5e74b5a2a7a14edf968a" translate="yes" xml:space="preserve">
          <source>The character &amp;frac12;</source>
          <target state="translated">캐릭터 &amp;frac12;</target>
        </trans-unit>
        <trans-unit id="1fa4a09afc8d4c4f53c306db471f300c4497957c" translate="yes" xml:space="preserve">
          <source>The character &amp;ge;</source>
          <target state="translated">문자 &amp;ge;</target>
        </trans-unit>
        <trans-unit id="3dfbeeaef1c98d8a22709ebef333428072939a42" translate="yes" xml:space="preserve">
          <source>The character &amp;gt; &amp;ndash; greater-than sign</source>
          <target state="translated">문자&amp;gt; &amp;ndash;보다 큼 부호</target>
        </trans-unit>
        <trans-unit id="6eb5e1e14a002081da7d716b380be22cde00b939" translate="yes" xml:space="preserve">
          <source>The character &amp;hellip;</source>
          <target state="translated">캐릭터 &amp;hellip;</target>
        </trans-unit>
        <trans-unit id="a01873a887462b6593c2f5f42a550b38052e578a" translate="yes" xml:space="preserve">
          <source>The character &amp;laquo;</source>
          <target state="translated">캐릭터 &quot;</target>
        </trans-unit>
        <trans-unit id="e667dca130564a78a41110f6cbd1264a713d8dd2" translate="yes" xml:space="preserve">
          <source>The character &amp;ldquo;</source>
          <target state="translated">캐릭터 &quot;</target>
        </trans-unit>
        <trans-unit id="950de0de2afce4fa96ad4f62ca4dab286d3d82a8" translate="yes" xml:space="preserve">
          <source>The character &amp;le;</source>
          <target state="translated">문자 &amp;le;</target>
        </trans-unit>
        <trans-unit id="9023ce61724bbabe84554211f1682a5b7d26a59b" translate="yes" xml:space="preserve">
          <source>The character &amp;lsquo;</source>
          <target state="translated">캐릭터 '</target>
        </trans-unit>
        <trans-unit id="e9f2776cd83195ab61d81c705eb53d1d3649fd0e" translate="yes" xml:space="preserve">
          <source>The character &amp;lt; &amp;ndash; less-than sign</source>
          <target state="translated">문자 &amp;lt;&amp;ndash;보다 작은 부호</target>
        </trans-unit>
        <trans-unit id="7e613a75a280526a06a5c3a8cccd7722979dfc79" translate="yes" xml:space="preserve">
          <source>The character &amp;mdash;</source>
          <target state="translated">캐릭터 -</target>
        </trans-unit>
        <trans-unit id="257dd2718c3d554488c288a2e9f88456100a73ef" translate="yes" xml:space="preserve">
          <source>The character &amp;middot;</source>
          <target state="translated">캐릭터 &amp;middot;</target>
        </trans-unit>
        <trans-unit id="b00154ce5f2758f6abb5e4356e419ba3e2aed105" translate="yes" xml:space="preserve">
          <source>The character &amp;ndash;</source>
          <target state="translated">캐릭터 -</target>
        </trans-unit>
        <trans-unit id="aad571a2b53620d99840a4d55bce3f5907371d75" translate="yes" xml:space="preserve">
          <source>The character &amp;ne;</source>
          <target state="translated">문자 &amp;ne;</target>
        </trans-unit>
        <trans-unit id="a360453c2e244288bd242eeb7641ad601e593f75" translate="yes" xml:space="preserve">
          <source>The character &amp;para;</source>
          <target state="translated">캐릭터 &amp;para;</target>
        </trans-unit>
        <trans-unit id="1c97c4311adda721fa170a84ab8496cb5535afa3" translate="yes" xml:space="preserve">
          <source>The character &amp;plusmn;</source>
          <target state="translated">문자 &amp;plusmn;</target>
        </trans-unit>
        <trans-unit id="55144636deb97ada56b2d29a7bb655a9f22ea932" translate="yes" xml:space="preserve">
          <source>The character &amp;pound;</source>
          <target state="translated">캐릭터 &amp;pound;</target>
        </trans-unit>
        <trans-unit id="09c581b6f45120a7ecac89f6de96696cea52b01c" translate="yes" xml:space="preserve">
          <source>The character &amp;prime;</source>
          <target state="translated">캐릭터 '</target>
        </trans-unit>
        <trans-unit id="c49eacef46814486b9678b461b5fad7053d65453" translate="yes" xml:space="preserve">
          <source>The character &amp;raquo;</source>
          <target state="translated">캐릭터 &quot;</target>
        </trans-unit>
        <trans-unit id="b94a5614ad8379d659840f63e74a095d51d6a7c0" translate="yes" xml:space="preserve">
          <source>The character &amp;rdquo;</source>
          <target state="translated">캐릭터 &quot;</target>
        </trans-unit>
        <trans-unit id="be87e8e3080722678155d4e087ea1bf466788605" translate="yes" xml:space="preserve">
          <source>The character &amp;reg;</source>
          <target state="translated">캐릭터 &amp;reg;</target>
        </trans-unit>
        <trans-unit id="e6daa833ce04c765a61d1650a1e4e3d75924ca44" translate="yes" xml:space="preserve">
          <source>The character &amp;rsquo;</source>
          <target state="translated">캐릭터 '</target>
        </trans-unit>
        <trans-unit id="43ad6d82b90d71d375e73e1b9402ca5934e45166" translate="yes" xml:space="preserve">
          <source>The character &amp;sbquo;</source>
          <target state="translated">캐릭터 ,</target>
        </trans-unit>
        <trans-unit id="4139cb770ca9a15c26a42368989f1dc39e1910da" translate="yes" xml:space="preserve">
          <source>The character &amp;sect;</source>
          <target state="translated">캐릭터 &amp;sect;</target>
        </trans-unit>
        <trans-unit id="98e7fc24f032b2c1437d0f55811d67ee1de7b88e" translate="yes" xml:space="preserve">
          <source>The character &amp;times;</source>
          <target state="translated">캐릭터 &amp;times;</target>
        </trans-unit>
        <trans-unit id="f6467d07a9719c1073ddb29614f3d2a5ac72dfb3" translate="yes" xml:space="preserve">
          <source>The character &amp;trade;</source>
          <target state="translated">캐릭터 &amp;trade;</target>
        </trans-unit>
        <trans-unit id="113ea2720e8bacc629e001c13c4a2b8a86d11787" translate="yes" xml:space="preserve">
          <source>The choice between the &lt;code&gt;IR&lt;/code&gt; and &lt;code&gt;LEGACY&lt;/code&gt; compilers was not yet available in Kotlin 1.3.xx. Because of this, you may encounter a Gradle error &lt;code&gt;Cannot choose between the following variants...&lt;/code&gt; if one of your dependencies (or any transitive dependency) was built using Kotlin 1.4+ but your project uses Kotlin 1.3.xx. A workaround is provided &lt;a href=&quot;https://youtrack.jetbrains.com/issue/KT-40226&quot;&gt;here&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;IR&lt;/code&gt; 및 &lt;code&gt;LEGACY&lt;/code&gt; 컴파일러 사이의 선택은 Kotlin 1.3.xx에서 아직 사용할 수 없습니다. 이로 인해 종속성 (또는 전이 종속성) 중 하나가 Kotlin 1.4 이상을 사용하여 빌드되었지만 프로젝트에서 Kotlin 1.3.xx를 사용 하는 경우 Gradle 오류 &lt;code&gt;Cannot choose between the following variants...&lt;/code&gt; 가 발생할 수 있습니다. &lt;a href=&quot;https://youtrack.jetbrains.com/issue/KT-40226&quot;&gt;여기에&lt;/a&gt; 해결 방법이 제공 됩니다 .</target>
        </trans-unit>
        <trans-unit id="1789ee1227acc918fbc63737b2058bf75be81287" translate="yes" xml:space="preserve">
          <source>The class can also declare &lt;strong&gt;secondary constructors&lt;/strong&gt;, which are prefixed with &lt;em&gt;constructor&lt;/em&gt;:</source>
          <target state="translated">클래스는 &lt;strong&gt;2 차 생성자를&lt;/strong&gt; 선언 할 수 있으며 , &lt;em&gt;생성자&lt;/em&gt; 앞에 접두사가 붙습니다 .</target>
        </trans-unit>
        <trans-unit id="bc78b13ff48b9fc50475495610ff41f558bf6256" translate="yes" xml:space="preserve">
          <source>The class declaration consists of the class name, the class header (specifying its type parameters, the primary constructor etc.) and the class body, surrounded by curly braces. Both the header and the body are optional; if the class has no body, curly braces can be omitted.</source>
          <target state="translated">클래스 선언은 클래스 이름, 클래스 헤더 (유형 매개 변수 지정, 기본 생성자 등) 및 중괄호로 묶인 클래스 본문으로 구성됩니다. 헤더와 본문은 모두 선택 사항입니다. 클래스에 본문이 없으면 중괄호를 생략 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="20fb66c6dd38ed7ad8f3ab7df8f07a3ccc7c3a1d" translate="yes" xml:space="preserve">
          <source>The class file with a kind not listed here is treated as a non-Kotlin file.</source>
          <target state="translated">여기에 나열되지 않은 종류의 클래스 파일은 코 틀린이 아닌 파일로 취급됩니다.</target>
        </trans-unit>
        <trans-unit id="8d923d6e9fe47217a8cbe28cd4bc0054618db9f2" translate="yes" xml:space="preserve">
          <source>The code above uses a &lt;a href=&quot;reflection#bound-class-references-since-11&quot;&gt;bound class reference&lt;/a&gt;, which is supported since Kotlin 1.1. You can also use the &lt;code&gt;javaClass&lt;/code&gt; extension property:</source>
          <target state="translated">위의 코드는 &lt;a href=&quot;reflection#bound-class-references-since-11&quot;&gt;바운드 클래스 참조를&lt;/a&gt; 사용하며 , Kotlin 1.1부터 지원됩니다. &lt;code&gt;javaClass&lt;/code&gt; 확장 등록 정보를 사용할 수도 있습니다 .</target>
        </trans-unit>
        <trans-unit id="732a1f0dd7bc7add2cc125d4681e9dd3eef05206" translate="yes" xml:space="preserve">
          <source>The code in object expressions can access variables from the enclosing scope.</source>
          <target state="translated">개체 식의 코드는 바깥 쪽 범위에서 변수에 액세스 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="2a037143482eba48d7a06126430f1e3e039ee172" translate="yes" xml:space="preserve">
          <source>The code in question is from the &lt;a href=&quot;https://curl.haxx.se/libcurl/c/simple.html&quot;&gt;simple&lt;/a&gt; example (comments removed for brevity)</source>
          <target state="translated">문제의 코드는 &lt;a href=&quot;https://curl.haxx.se/libcurl/c/simple.html&quot;&gt;간단한&lt;/a&gt; 예 에서 나온 것입니다.</target>
        </trans-unit>
        <trans-unit id="02b7f3091db5cc1f6df8785c890e5a0df1e43276" translate="yes" xml:space="preserve">
          <source>The code in the &lt;code&gt;hello.kt&lt;/code&gt; file may look like this:</source>
          <target state="translated">&lt;code&gt;hello.kt&lt;/code&gt; 파일 의 코드 는 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="8051836ca1f9bfcf8f55044dce46370d2274f4e3" translate="yes" xml:space="preserve">
          <source>The code in the final &lt;code&gt;hello.kt&lt;/code&gt; file may look like this:</source>
          <target state="translated">최종 &lt;code&gt;hello.kt&lt;/code&gt; 파일 의 코드 는 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="53a9cf6b4f40ef47e2031c236bc499f1385bb27e" translate="yes" xml:space="preserve">
          <source>The code is full of Objective-C attributes, which are intended to help the use of the framework from both Objective-C and Swift languages. &lt;code&gt;DemoClazz&lt;/code&gt;, &lt;code&gt;DemoInterface&lt;/code&gt;, and &lt;code&gt;DemoObject&lt;/code&gt; are created for &lt;code&gt;Clazz&lt;/code&gt;, &lt;code&gt;Interface&lt;/code&gt;, and &lt;code&gt;Object&lt;/code&gt; respectively. The &lt;code&gt;Interface&lt;/code&gt; is turned into &lt;code&gt;@protocol&lt;/code&gt;, both a &lt;code&gt;class&lt;/code&gt; and an &lt;code&gt;object&lt;/code&gt; are represented as &lt;code&gt;@interface&lt;/code&gt;. The &lt;code&gt;Demo&lt;/code&gt; prefix comes from the &lt;code&gt;-output&lt;/code&gt; parameter of the &lt;code&gt;kotlinc-native&lt;/code&gt; compiler and the framework name. We see here that the nullable return type &lt;code&gt;ULong?&lt;/code&gt; is turned into &lt;code&gt;DemoLong*&lt;/code&gt; in Objective-C.</source>
          <target state="translated">이 코드는 Objective-C 및 Swift 언어의 프레임 워크 사용을 돕기 위해 Objective-C 속성으로 가득합니다. &lt;code&gt;DemoClazz&lt;/code&gt; 는 , &lt;code&gt;DemoInterface&lt;/code&gt; 및 &lt;code&gt;DemoObject&lt;/code&gt; 가 만들어집니다 &lt;code&gt;Clazz&lt;/code&gt; , &lt;code&gt;Interface&lt;/code&gt; 및 &lt;code&gt;Object&lt;/code&gt; 각각. &lt;code&gt;Interface&lt;/code&gt; 로 전환되는 &lt;code&gt;@protocol&lt;/code&gt; 둘 다를, &lt;code&gt;class&lt;/code&gt; 및 &lt;code&gt;object&lt;/code&gt; 로 표현된다 &lt;code&gt;@interface&lt;/code&gt; . &lt;code&gt;Demo&lt;/code&gt; 접두사는에서 온다 &lt;code&gt;-output&lt;/code&gt; 의 매개 변수 &lt;code&gt;kotlinc-native&lt;/code&gt; 컴파일러와 프레임 워크의 이름입니다. 여기서는 nullable 반환 유형이 &lt;code&gt;ULong?&lt;/code&gt; Objective-C에서 &lt;code&gt;DemoLong*&lt;/code&gt; 으로 바뀝니다 .</target>
        </trans-unit>
        <trans-unit id="bb3f232ccbe55c8a64749007e2a52df82753b753" translate="yes" xml:space="preserve">
          <source>The code is still written as if we were writing synchronous code, top-down, without the need of any special syntax, beyond the use of a function called &lt;code&gt;launch&lt;/code&gt; which essentially kicks-off the coroutine (covered in other tutorials).</source>
          <target state="translated">코드는 우리가 동기식 코드를 작성하는 것처럼 작성됩니다. 특별한 구문이 필요하지 않고 본질적으로 코 루틴을 &lt;code&gt;launch&lt;/code&gt; 하는 함수 (다른 튜토리얼에서 다루어 짐)를 사용하는 것 외에도 특별한 구문이 필요하지 않습니다 .</target>
        </trans-unit>
        <trans-unit id="a467b8b9b7ee4d493e257af4cbf437bbbbde6f1c" translate="yes" xml:space="preserve">
          <source>The code or data pointed by the value of this variable.</source>
          <target state="translated">이 변수의 값이 가리키는 코드 또는 데이터입니다.</target>
        </trans-unit>
        <trans-unit id="02020b547b7971154705decbe3b4487f3a320a20" translate="yes" xml:space="preserve">
          <source>The code reads as follows. We have the &lt;code&gt;libnative_ExportedSymbols&lt;/code&gt; structure, which defines all the functions that Kotlin/Native and our library provides us. It uses nested anonymous structures heavily to mimic packages. The &lt;code&gt;libnative_&lt;/code&gt; prefix comes from the library name.</source>
          <target state="translated">코드는 다음과 같이 읽습니다. Kotlin / Native와 라이브러리가 제공하는 모든 함수를 정의 하는 &lt;code&gt;libnative_ExportedSymbols&lt;/code&gt; 구조가 있습니다. 패키지를 모방하기 위해 중첩 된 익명 구조를 많이 사용합니다. &lt;code&gt;libnative_&lt;/code&gt; 접두사는 라이브러리 이름에서 비롯됩니다.</target>
        </trans-unit>
        <trans-unit id="38d106af82f35f678ad2690b0baa41429ea7b73f" translate="yes" xml:space="preserve">
          <source>The code uses anonymous structure declarations. The code &lt;code&gt;struct { .. } foo&lt;/code&gt; declares a field in the outer struct of that anonymous structure type, the type with no name.</source>
          <target state="translated">이 코드는 익명 구조 선언을 사용합니다. 코드 &lt;code&gt;struct { .. } foo&lt;/code&gt; 는 익명 구조 유형의 외부 구조에서 이름이없는 유형의 필드를 선언합니다.</target>
        </trans-unit>
        <trans-unit id="5a75d5c9d164b0af6fa981261ed056bb33166b99" translate="yes" xml:space="preserve">
          <source>The collection interfaces and related functions are located in the kotlin.collections package. Let's get an overview of its contents.</source>
          <target state="translated">수집 인터페이스 및 관련 기능은 kotlin.collections 패키지에 있습니다. 내용에 대한 개요를 살펴 보겠습니다.</target>
        </trans-unit>
        <trans-unit id="a43a0f5851d135e378a655043e2edbc27114369a" translate="yes" xml:space="preserve">
          <source>The collection provide methods for convenient access to the both ends. It also implements &lt;a href=&quot;../-mutable-list/index#kotlin.collections.MutableList&quot;&gt;MutableList&lt;/a&gt; interface and supports efficient get/set operations by index.</source>
          <target state="translated">컬렉션은 양쪽 끝으로 편리하게 접근 할 수있는 방법을 제공합니다. ㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ 또한 &lt;a href=&quot;../-mutable-list/index#kotlin.collections.MutableList&quot;&gt;MutableList&lt;/a&gt; 인터페이스를 구현 하고 인덱스 별 효율적인 get / set 작업을 지원합니다.</target>
        </trans-unit>
        <trans-unit id="8eb00e1a99072f02da7c9734f0160d0f6d88090d" translate="yes" xml:space="preserve">
          <source>The command produces the &lt;code&gt;main.exe&lt;/code&gt; file, which we can run.</source>
          <target state="translated">이 명령은 우리가 실행할 수 있는 &lt;code&gt;main.exe&lt;/code&gt; 파일을 생성합니다 .</target>
        </trans-unit>
        <trans-unit id="c3c76c63d39731dfbcdc20b108a998ffa2cab356" translate="yes" xml:space="preserve">
          <source>The common base class of all enum classes. See the &lt;a href=&quot;../../../../../../docs/reference/enum-classes&quot;&gt;Kotlin language documentation&lt;/a&gt; for more information on enum classes.</source>
          <target state="translated">모든 열거 형 클래스의 공통 기본 클래스입니다. 열거 형 클래스에 대한 자세한 내용은 &lt;a href=&quot;../../../../../../docs/reference/enum-classes&quot;&gt;Kotlin 언어 설명서&lt;/a&gt; 를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="b0aedfb3fef921fc9d29c01593b4d03896cda204" translate="yes" xml:space="preserve">
          <source>The common base class of all enum classes. See the &lt;a href=&quot;../../../../../docs/reference/enum-classes&quot;&gt;Kotlin language documentation&lt;/a&gt; for more information on enum classes.</source>
          <target state="translated">모든 열거 형 클래스의 공통 기본 클래스입니다. 열거 형 클래스에 대한 자세한 내용은 &lt;a href=&quot;../../../../../docs/reference/enum-classes&quot;&gt;Kotlin 언어 설명서&lt;/a&gt; 를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="81167d80c8bd1494ae8b5c6e43cfe5f3d98e0f63" translate="yes" xml:space="preserve">
          <source>The common code is &lt;code&gt;&quot;Kotlin Rocks on ${platformName()}&quot;&lt;/code&gt;, where &lt;code&gt;platformName()&lt;/code&gt; is a function that is declared using the &lt;code&gt;expect&lt;/code&gt; keyword. The &lt;code&gt;actual&lt;/code&gt; implementation will be specific to the platform.</source>
          <target state="translated">공통 코드는 &lt;code&gt;&quot;Kotlin Rocks on ${platformName()}&quot;&lt;/code&gt; . 여기서 &lt;code&gt;platformName()&lt;/code&gt; 은 &lt;code&gt;expect&lt;/code&gt; 키워드를 사용하여 선언 된 함수입니다 . &lt;code&gt;actual&lt;/code&gt; 구현은 플랫폼에 특정한 될 것입니다.</target>
        </trans-unit>
        <trans-unit id="26e2504fa6bfc493ea02066bb2b03d45d4bc4811" translate="yes" xml:space="preserve">
          <source>The common source sets cannot include Java sources.</source>
          <target state="translated">공통 소스 세트는 Java 소스를 포함 할 수 없습니다.</target>
        </trans-unit>
        <trans-unit id="95ec79a350a2b7276da32a4ea5b29db260f72d85" translate="yes" xml:space="preserve">
          <source>The common supertype for all callable references is &lt;a href=&quot;../../api/latest/jvm/stdlib/kotlin.reflect/-k-callable/index&quot;&gt;&lt;code&gt;KCallable&amp;lt;out R&amp;gt;&lt;/code&gt;&lt;/a&gt;, where &lt;code&gt;R&lt;/code&gt; is the return value type, which is the property type for properties, and the constructed type for constructors.</source>
          <target state="translated">호출 가능한 모든 참조의 공통 수퍼 타입은 &lt;a href=&quot;../../api/latest/jvm/stdlib/kotlin.reflect/-k-callable/index&quot;&gt; &lt;code&gt;KCallable&amp;lt;out R&amp;gt;&lt;/code&gt; &lt;/a&gt; . 여기서 &lt;code&gt;R&lt;/code&gt; 은 리턴 값 유형입니다. 이는 특성의 특성 유형이고 생성자의 생성 된 유형입니다.</target>
        </trans-unit>
        <trans-unit id="b490df5b9d3260a0f0b5037a5c6848fe5e1088c0" translate="yes" xml:space="preserve">
          <source>The companion object &lt;a href=&quot;-default/index&quot;&gt;Random.Default&lt;/a&gt; is the default instance of &lt;a href=&quot;index&quot;&gt;Random&lt;/a&gt;.</source>
          <target state="translated">컴패니언 객체 &lt;a href=&quot;-default/index&quot;&gt;Random.Default&lt;/a&gt; 는 &lt;a href=&quot;index&quot;&gt;Random&lt;/a&gt; 의 기본 인스턴스입니다 .</target>
        </trans-unit>
        <trans-unit id="d53a914136005ae6f435321f1dcd61b723a192c1" translate="yes" xml:space="preserve">
          <source>The companion object is a singleton, and its members can be accessed directly via the name of the containing class (although you can also insert the name of the companion object if you want to be explicit about accessing the companion object):</source>
          <target state="translated">컴패니언 객체는 싱글 톤이며 포함하는 클래스의 이름을 통해 멤버에 직접 액세스 할 수 있습니다 (컴패니언 객체에 액세스하는 것에 대해 명시 적으로 나타내려면 컴패니언 객체의 이름을 삽입 할 수도 있음).</target>
        </trans-unit>
        <trans-unit id="4ea9b65371d26b1c5d91b2e2140d9de16a9201af" translate="yes" xml:space="preserve">
          <source>The compilation from which the binary is built. By default, &lt;code&gt;test&lt;/code&gt; binaries are based on the &lt;code&gt;test&lt;/code&gt; compilation while other binaries - on the &lt;code&gt;main&lt;/code&gt; compilation.</source>
          <target state="translated">바이너리가 빌드되는 컴파일입니다. 기본적으로 &lt;code&gt;test&lt;/code&gt; 바이너리는 &lt;code&gt;test&lt;/code&gt; 컴파일을 기반으로하고 다른 바이너리는 &lt;code&gt;main&lt;/code&gt; 컴파일을 기반으로합니다 .</target>
        </trans-unit>
        <trans-unit id="23856358de98bbdac052e0c621f22a36b386526e" translate="yes" xml:space="preserve">
          <source>The compilation output.</source>
          <target state="translated">컴파일 출력.</target>
        </trans-unit>
        <trans-unit id="b4197acd5de5439005535dfcd5acd86104f3b404" translate="yes" xml:space="preserve">
          <source>The compilation&amp;rsquo;s default source set.</source>
          <target state="translated">컴파일의 기본 소스 세트입니다.</target>
        </trans-unit>
        <trans-unit id="b0ac582b63206214b2f5383cb2acb40941a9f13a" translate="yes" xml:space="preserve">
          <source>The compilations created for an Android target by default are tied to &lt;a href=&quot;https://developer.android.com/studio/build/build-variants&quot;&gt;Android build variants&lt;/a&gt;: for each build variant, a Kotlin compilation is created under the same name.</source>
          <target state="translated">기본적으로 Android 타겟 용으로 생성 된 컴파일은 &lt;a href=&quot;https://developer.android.com/studio/build/build-variants&quot;&gt;Android 빌드 변형에&lt;/a&gt; 연결됩니다 . 각 빌드 변형에 대해 Kotlin 컴파일은 동일한 이름으로 생성됩니다.</target>
        </trans-unit>
        <trans-unit id="1e2216eb9ae725f1d6c56e917607f0c9488b74a1" translate="yes" xml:space="preserve">
          <source>The compiler automatically derives the following members from all properties declared in the primary constructor:</source>
          <target state="translated">컴파일러는 기본 생성자에 선언 된 모든 속성에서 다음 멤버를 자동으로 파생시킵니다.</target>
        </trans-unit>
        <trans-unit id="6577ea37c1117c7a1d89eaf0755007d75c98ca87" translate="yes" xml:space="preserve">
          <source>The compiler can infer the function types for variables if there is enough information:</source>
          <target state="translated">충분한 정보가있는 경우 컴파일러는 변수의 함수 유형을 유추 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="6c9d4888e9777e469bf8f8415875e00d70265bbb" translate="yes" xml:space="preserve">
          <source>The compiler ensures that every expected declaration has actual declarations in all platform modules that implement the corresponding common module, and reports an error if any actual declarations are missing. The IDE provides tools that help you create the missing actual declarations.</source>
          <target state="translated">컴파일러는 모든 예상 선언에 해당 공통 모듈을 구현하는 모든 플랫폼 모듈에서 실제 선언이 있는지 확인하고 실제 선언이 누락 된 경우 오류를보고합니다. IDE는 누락 된 실제 선언을 작성하는 데 도움이되는 도구를 제공합니다.</target>
        </trans-unit>
        <trans-unit id="1bc9fa0ea96f6adbeae3b32244221538e36f7db6" translate="yes" xml:space="preserve">
          <source>The compiler generates an executable called &lt;code&gt;a.out&lt;/code&gt;. We need to run it to see in action the Kotlin code being executed from C library. On Linux, we'll need to include &lt;code&gt;.&lt;/code&gt; into the &lt;code&gt;LD_LIBRARY_PATH&lt;/code&gt; to let the application know to load the &lt;code&gt;libnative.so&lt;/code&gt; library from the current folder.</source>
          <target state="translated">컴파일러는 &lt;code&gt;a.out&lt;/code&gt; 이라는 실행 파일을 생성합니다 . C 라이브러리에서 실행되는 Kotlin 코드를 실제로 보려면이를 실행해야합니다. Linux에서는을 포함해야합니다 &lt;code&gt;.&lt;/code&gt; &lt;code&gt;LD_LIBRARY_PATH&lt;/code&gt; 에 삽입하여 응용 프로그램 이 현재 폴더에서 &lt;code&gt;libnative.so&lt;/code&gt; 라이브러리 를로드하도록 알립니다 .</target>
        </trans-unit>
        <trans-unit id="9c32f1ebf038bdf8cbaba8702b89e98ca18e811a" translate="yes" xml:space="preserve">
          <source>The compiler is smart enough to know a cast to be safe if a negative check leads to a return:</source>
          <target state="translated">컴파일러는 음수 검사가 반환으로 이어질 경우 캐스트가 안전하다는 것을 알기에 충분히 똑똑합니다.</target>
        </trans-unit>
        <trans-unit id="6c760f17f753a0cd7195aa08e67eb2dc50e9752a" translate="yes" xml:space="preserve">
          <source>The compiler now inlines values of &lt;code&gt;const val&lt;/code&gt; properties into the locations where they are used.</source>
          <target state="translated">컴파일러는 &lt;code&gt;const val&lt;/code&gt; 속성의 값을 사용 된 위치에 인라인합니다 .</target>
        </trans-unit>
        <trans-unit id="4ba2b709c858d08263f181dafb3aabf655fd192d" translate="yes" xml:space="preserve">
          <source>The compiler now provides an option to treat all warnings as errors. Use &lt;code&gt;-Werror&lt;/code&gt; on the command line, or the following Gradle snippet:</source>
          <target state="translated">컴파일러는 이제 모든 경고를 오류로 처리하는 옵션을 제공합니다. 명령 행에서 &lt;code&gt;-Werror&lt;/code&gt; 를 사용 하거나 다음 Gradle 스 니펫을 사용하십시오.</target>
        </trans-unit>
        <trans-unit id="71411ab1eb04e1e2a8b1556ddf262cc1922d7424" translate="yes" xml:space="preserve">
          <source>The compiler performs the following steps for resolution of an operator in the &lt;em&gt;postfix&lt;/em&gt; form, e.g. &lt;code&gt;a++&lt;/code&gt;:</source>
          <target state="translated">컴파일러는 &lt;em&gt;접미사&lt;/em&gt; 형식으로 연산자를 해결하기 위해 다음과 같은 단계를 수행합니다 ( 예 : &lt;code&gt;a++&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="ade270e63280116ba329a9222cd68e987a0137a2" translate="yes" xml:space="preserve">
          <source>The compiler produces a warning for the cast in the last line. The cast cannot be fully checked at runtime and provides no guarantee that the values in the map are &lt;code&gt;Int&lt;/code&gt;.</source>
          <target state="translated">컴파일러는 마지막 행에서 캐스트에 대한 경고를 생성합니다. 캐스트는 런타임에 완전히 확인할 수 없으며 맵의 값이 &lt;code&gt;Int&lt;/code&gt; 라는 보장을 제공하지 않습니다 .</target>
        </trans-unit>
        <trans-unit id="c187f47b8c07f5d91c0556c45f360de519c42c3f" translate="yes" xml:space="preserve">
          <source>The compiler produces the code relevant for the target module system, for example, in case of CommonJS, it will import the declaration via the &lt;code&gt;require(...)&lt;/code&gt; function.</source>
          <target state="translated">컴파일러는 대상 모듈 시스템과 관련된 코드를 생성합니다. 예를 들어 CommonJS의 경우 &lt;code&gt;require(...)&lt;/code&gt; 함수 를 통해 선언을 가져옵니다 .</target>
        </trans-unit>
        <trans-unit id="8552578d258f1326cbba27a9248961d718afcda8" translate="yes" xml:space="preserve">
          <source>The compiler tracks the information about the check you performed, and allows the call to &lt;code&gt;length&lt;/code&gt; inside the &lt;em&gt;if&lt;/em&gt;. More complex conditions are supported as well:</source>
          <target state="translated">컴파일러는 수행 한 검사에 대한 정보를 추적 하고 &lt;em&gt;if&lt;/em&gt; 내에서 호출 &lt;code&gt;length&lt;/code&gt; 허용합니다 . 더 복잡한 조건도 지원됩니다.&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="6dbebb0d588955ecc95db38394b6245335aeaf4f" translate="yes" xml:space="preserve">
          <source>The compiler type can also be set in the &lt;code&gt;gradle.properties&lt;/code&gt; file, with the key &lt;code&gt;kotlin.js.compiler=ir&lt;/code&gt;. (This behaviour is overwritten by any settings in the &lt;code&gt;build.gradle(.kts)&lt;/code&gt;, however).</source>
          <target state="translated">컴파일러 유형은 &lt;code&gt;kotlin.js.compiler=ir&lt;/code&gt; 키 를 사용하여 &lt;code&gt;gradle.properties&lt;/code&gt; 파일 에서 설정할 수도 있습니다 . ( &lt;code&gt;build.gradle(.kts)&lt;/code&gt; 동작은 build.gradle (.kts) 의 모든 설정으로 덮어 쓰여집니다 ).</target>
        </trans-unit>
        <trans-unit id="9778744271ecf22c5df54071242110d274ebb382" translate="yes" xml:space="preserve">
          <source>The compiler will allow this function to be called as e.g. &lt;code&gt;test(&quot;a&quot;, &quot;b&quot;)&lt;/code&gt; or &lt;code&gt;test(&quot;a&quot;, null)&lt;/code&gt;, but not as &lt;code&gt;test(null, &quot;b&quot;)&lt;/code&gt; or &lt;code&gt;test(null, null)&lt;/code&gt;. Calling &lt;code&gt;test(a, b)&lt;/code&gt; is only allowed if the compiler can prove that &lt;code&gt;a&lt;/code&gt; cannot possibly be null. Inside of &lt;code&gt;test&lt;/code&gt;, the compiler will not allow you to do anything with &lt;code&gt;b&lt;/code&gt; that would result in an exception if &lt;code&gt;b&lt;/code&gt; should happen to be null - so you can do &lt;code&gt;a.length&lt;/code&gt;, but not &lt;code&gt;b.length&lt;/code&gt;. However, once you're inside a conditional where you have checked that &lt;code&gt;b&lt;/code&gt; is not null, you can do it:</source>
          <target state="translated">컴파일러는이 함수를 &lt;code&gt;test(&quot;a&quot;, &quot;b&quot;)&lt;/code&gt; 또는 &lt;code&gt;test(&quot;a&quot;, null)&lt;/code&gt; 로 호출 할 수 있지만 &lt;code&gt;test(null, &quot;b&quot;)&lt;/code&gt; 또는 &lt;code&gt;test(null, null)&lt;/code&gt; 로 호출 할 수 없습니다 . 컴파일러가 &lt;code&gt;a&lt;/code&gt; 가 null 일 수 없음을 증명할 수있는 경우에만 &lt;code&gt;test(a, b)&lt;/code&gt; 호출 이 허용됩니다 . &lt;code&gt;test&lt;/code&gt; 내 에서 컴파일러는 &lt;code&gt;b&lt;/code&gt; 를 사용 하여 b 를 수행 할 수 없도록합니다. &lt;code&gt;b&lt;/code&gt; 가 null이어야 하는 경우 예외 가 발생하므로 &lt;code&gt;a.length&lt;/code&gt; 는 할 수 있지만 &lt;code&gt;b.length&lt;/code&gt; 는 할 수 없습니다 . 그러나 &lt;code&gt;b&lt;/code&gt; 가 null이 아닌지 확인한 조건부 안에 들어가면 다음을 수행 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="d2b29d9a02116dffd597657f45323e8d260b605c" translate="yes" xml:space="preserve">
          <source>The compiler will generate something like this (except that &lt;code&gt;start&lt;/code&gt; won't collide with any other identifiers with the same name):</source>
          <target state="translated">컴파일러는 다음과 같은 것을 생성합니다 ( &lt;code&gt;start&lt;/code&gt; 이 동일한 이름을 가진 다른 식별자와 충돌하지 않는 경우 제외 ).</target>
        </trans-unit>
        <trans-unit id="93c0badc9698bd83e21fa61741e490ba8801596d" translate="yes" xml:space="preserve">
          <source>The compiler will not let you perform checks that can't possibly succeed because the declared type of the variable is a class that is on an unrelated branch of the class hierarchy from the class you're checking against - if the declared type of &lt;code&gt;x&lt;/code&gt; is &lt;code&gt;MotorVehicle&lt;/code&gt;, you can't check if &lt;code&gt;x&lt;/code&gt; is a &lt;code&gt;Person&lt;/code&gt;. If the right-hand side of &lt;code&gt;is&lt;/code&gt; is an interface, Kotlin will allow the type of the left-hand side to be any interface or open class, because it could be that some subclass thereof implements the interface.</source>
          <target state="translated">선언 된 변수 유형이 검사중인 클래스와 관련이없는 클래스 계층 구조의 분기에있는 클래스이므로 컴파일러는 성공할 수없는 검사를 수행 할 수 없습니다. 선언 된 &lt;code&gt;x&lt;/code&gt; 유형 이 &lt;code&gt;MotorVehicle&lt;/code&gt; , &lt;code&gt;x&lt;/code&gt; 가 &lt;code&gt;Person&lt;/code&gt; 인지 확인할 수 없습니다 . 오른쪽의 경우 &lt;code&gt;is&lt;/code&gt; 인터페이스는 그것이 몇몇 그 서브 클래스가 구현하는 인터페이스가 될 수 있기 때문에, 코 틀린는 좌측의 타입이 임의의 인터페이스 또는 개방 클래스 수 있도록한다.</target>
        </trans-unit>
        <trans-unit id="945c10a176528faf419fb001b8765fc6d7f48809" translate="yes" xml:space="preserve">
          <source>The complete list of options for the Gradle tasks is the following:</source>
          <target state="translated">Gradle 작업에 대한 전체 옵션 목록은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="6faca9aef8f0af27489fabb11e18668f0d73d512" translate="yes" xml:space="preserve">
          <source>The components used to setup Gradle publications.</source>
          <target state="translated">Gradle 게시를 설정하는 데 사용되는 구성 요소입니다.</target>
        </trans-unit>
        <trans-unit id="3c10c9a78955f70ea89c2ed5382b97613f6fd27c" translate="yes" xml:space="preserve">
          <source>The concurrent nature of &lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines.flow/flat-map-merge.html&quot;&gt;flatMapMerge&lt;/a&gt; is obvious:</source>
          <target state="translated">&lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines.flow/flat-map-merge.html&quot;&gt;flatMapMerge&lt;/a&gt; 의 동시 특성 은 분명합니다.</target>
        </trans-unit>
        <trans-unit id="4b9af24e6804c15099a6e15d86ca2e171e7f1be2" translate="yes" xml:space="preserve">
          <source>The consumer has to add the attribute to a single target where the ambiguity arises.</source>
          <target state="translated">소비자는 모호성이 발생하는 단일 대상에 속성을 추가해야합니다.</target>
        </trans-unit>
        <trans-unit id="cbc4e4912fffd8b8c15a7f1685ee311f7de94af5" translate="yes" xml:space="preserve">
          <source>The consumer may only need to add the attribute to a single target where the ambiguity arises.</source>
          <target state="translated">소비자는 모호성이 발생하는 단일 대상에 속성을 추가하기 만하면됩니다.</target>
        </trans-unit>
        <trans-unit id="2fa143f534ac2f4a54ee1e8593acf92219a64686" translate="yes" xml:space="preserve">
          <source>The contents of our &lt;code&gt;main.js&lt;/code&gt; would be:</source>
          <target state="translated">&lt;code&gt;main.js&lt;/code&gt; 의 내용 은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="ccc1b0f9d51d769d3aac8a2e95f9b22ce641f370" translate="yes" xml:space="preserve">
          <source>The context of the coroutine that corresponds to this continuation.</source>
          <target state="translated">이 연속에 해당하는 코 루틴의 맥락.</target>
        </trans-unit>
        <trans-unit id="347bd2f03e4af765cba7e04d72d0cecc9c6bb8cc" translate="yes" xml:space="preserve">
          <source>The contract description must be at the beginning of a function and have at least one effect.</source>
          <target state="translated">계약 설명은 기능의 시작 부분에 있어야하며 최소한 하나의 영향을 미칩니다.</target>
        </trans-unit>
        <trans-unit id="4954ad3fce80d9310d9ce43541aaf17e0123a4ea" translate="yes" xml:space="preserve">
          <source>The contravariant type parameter of a parameter of a function-typed return type (the user will call the returned function with something that can consume any &lt;code&gt;Fruit&lt;/code&gt;, so it's okay to return a function that expects to receive something that can handle &lt;code&gt;Apple&lt;/code&gt;)</source>
          <target state="translated">함수 타입의 리턴 타입 파라미터의 반 변형 타입 파라미터 (사용자는 &lt;code&gt;Fruit&lt;/code&gt; 를 소비 할 수있는 것으로 리턴 된 함수를 호출 하므로 &lt;code&gt;Apple&lt;/code&gt; 을 처리 할 수있는 무언가를받을 것으로 예상되는 함수를 반환해도됩니다 )</target>
        </trans-unit>
        <trans-unit id="fc9281a07f7c7bacfae7f8c712a66286fa4aa11c" translate="yes" xml:space="preserve">
          <source>The contravariant type parameter of a parameter type (the user is passing a consumer that can handle any &lt;code&gt;Fruit&lt;/code&gt;, and it will be given an &lt;code&gt;Apple&lt;/code&gt;)</source>
          <target state="translated">매개 변수 유형의 contravariant 유형 매개 변수 (사용자는 처리 할 수있는 소비자 통과 &lt;code&gt;Fruit&lt;/code&gt; 하고는 주어질 것이다 &lt;code&gt;Apple&lt;/code&gt; )</target>
        </trans-unit>
        <trans-unit id="3b2df0437d1139299375d04a6b3d749596fe34b3" translate="yes" xml:space="preserve">
          <source>The contravariant type parameter of the return type of a function-typed parameter (the user is passing a function that will return a consumer of any &lt;code&gt;Fruit&lt;/code&gt;, and the returned consumer will be given &lt;code&gt;Apple&lt;/code&gt; instances)</source>
          <target state="translated">함수 유형 매개 변수의 반환 유형에 대한 반 변형 유형 매개 변수 (사용자는 &lt;code&gt;Fruit&lt;/code&gt; 의 소비자를 반환하는 함수를 전달하고 반환 된 소비자 에게는 &lt;code&gt;Apple&lt;/code&gt; 인스턴스 가 제공됨 )</target>
        </trans-unit>
        <trans-unit id="3ed87fa7f81c4d406e21bd5206fb7068af42bc61" translate="yes" xml:space="preserve">
          <source>The convention that is followed is that each library gets its own definition file, usually named the same as the library. For more information on all the options available to &lt;code&gt;cinterop&lt;/code&gt;, see &lt;a href=&quot;../../reference/native/c_interop&quot;&gt;the Interop documentation&lt;/a&gt;</source>
          <target state="translated">따르는 규칙은 각 라이브러리가 일반적으로 라이브러리와 동일한 이름을 가진 자체 정의 파일을 얻는다는 것입니다. &lt;code&gt;cinterop&lt;/code&gt; 에 사용 가능한 모든 옵션에 대한 자세한 내용 &lt;a href=&quot;../../reference/native/c_interop&quot;&gt;은 Interop 설명서를&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="c72d89d38289079cb805c34b2308d4dfa8c2fd72" translate="yes" xml:space="preserve">
          <source>The coroutine context includes a &lt;em&gt;coroutine dispatcher&lt;/em&gt; (see &lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/-coroutine-dispatcher/index.html&quot;&gt;CoroutineDispatcher&lt;/a&gt;) that determines what thread or threads the corresponding coroutine uses for its execution. The coroutine dispatcher can confine coroutine execution to a specific thread, dispatch it to a thread pool, or let it run unconfined.</source>
          <target state="translated">코 루틴 컨텍스트에는 해당 코 루틴이 실행을 위해 사용하는 스레드를 결정 하는 &lt;em&gt;코 루틴 디스패처&lt;/em&gt; ( &lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/-coroutine-dispatcher/index.html&quot;&gt;CoroutineDispatcher&lt;/a&gt; 참조 )가 포함됩니다. 코 루틴 디스패처는 코 루틴 실행을 특정 스레드로 제한하거나 스레드 풀로 디스패치하거나 제한없이 실행되도록 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="d4ce8b1f45a5d6806ad09e59cc85adf7dc80106f" translate="yes" xml:space="preserve">
          <source>The coroutine context is a set of various elements. The main elements are the &lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/-job/index.html&quot;&gt;Job&lt;/a&gt; of the coroutine, which we've seen before, and its dispatcher, which is covered in this section.</source>
          <target state="translated">코 루틴 문맥은 다양한 요소의 집합입니다. 주요 요소는 이전에 본 코 루틴 &lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/-job/index.html&quot;&gt;작업&lt;/a&gt; 과이 섹션에서 다루는 디스패처입니다.</target>
        </trans-unit>
        <trans-unit id="09d67675b7aec2c1bf9665203e1b50714b4ffefe" translate="yes" xml:space="preserve">
          <source>The coroutine is started directly in the invoker's thread without going through the &lt;a href=&quot;../kotlin.coroutines/-continuation-interceptor/index&quot;&gt;ContinuationInterceptor&lt;/a&gt; that might be present in the completion's &lt;a href=&quot;../kotlin.coroutines/-coroutine-context/index&quot;&gt;CoroutineContext&lt;/a&gt;. It is the invoker's responsibility to ensure that a proper invocation context is established.</source>
          <target state="translated">코 루틴은 완료의 &lt;a href=&quot;../kotlin.coroutines/-coroutine-context/index&quot;&gt;CoroutineContext에&lt;/a&gt; 존재할 수있는 &lt;a href=&quot;../kotlin.coroutines/-continuation-interceptor/index&quot;&gt;ContinuationInterceptor&lt;/a&gt; 를 거치지 않고 호출자의 스레드에서 직접 시작됩니다 . 적절한 호출 컨텍스트가 설정되도록하는 것은 호출자의 책임입니다.</target>
        </trans-unit>
        <trans-unit id="5075509aaa121a034050446e85498c3f79064890" translate="yes" xml:space="preserve">
          <source>The coroutine's &lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/-job/index.html&quot;&gt;Job&lt;/a&gt; is part of its context, and can be retrieved from it using the &lt;code&gt;coroutineContext[Job]&lt;/code&gt; expression:</source>
          <target state="translated">코 루틴의 &lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/-job/index.html&quot;&gt;Job&lt;/a&gt; 은 컨텍스트의 일부이며 &lt;code&gt;coroutineContext[Job]&lt;/code&gt; 표현식을 사용하여 검색 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="3db3fa62931fade33326b38aff7867fe578bfdd9" translate="yes" xml:space="preserve">
          <source>The coroutine's &lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/-job/index.html&quot;&gt;Job&lt;/a&gt; is part of its context. The coroutine can retrieve it from its own context using &lt;code&gt;coroutineContext[Job]&lt;/code&gt; expression:</source>
          <target state="translated">코 루틴의 &lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/-job/index.html&quot;&gt;직업&lt;/a&gt; 은 그 맥락의 일부입니다. 코 루틴은 &lt;code&gt;coroutineContext[Job]&lt;/code&gt; 표현식을 사용하여 자체 컨텍스트에서이를 검색 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="5769f42ad3e1d523865b402b5e67bd28e7b20bad" translate="yes" xml:space="preserve">
          <source>The corresponding &lt;code&gt;sourceSets&lt;/code&gt; property should be updated if not using the default convention:</source>
          <target state="translated">기본 규칙을 사용하지 않는 경우 해당 &lt;code&gt;sourceSets&lt;/code&gt; 속성을 업데이트해야합니다.</target>
        </trans-unit>
        <trans-unit id="e1d461218111d234968b7db694b9b764401c60b6" translate="yes" xml:space="preserve">
          <source>The corresponding &lt;em&gt;sourceSets&lt;/em&gt; property should be updated if not using the default convention:</source>
          <target state="translated">기본 규칙을 사용하지 않는 경우 해당 &lt;em&gt;sourceSets&lt;/em&gt; 특성을 업데이트해야합니다.</target>
        </trans-unit>
        <trans-unit id="6d0089507419945c1de1f77807f154c6b9f1b477" translate="yes" xml:space="preserve">
          <source>The corresponding part in the Gradle build file looks as follows:</source>
          <target state="translated">Gradle 빌드 파일의 해당 부분은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="16c7a1a50f1d32fc204564f81e6d0304f7356ed7" translate="yes" xml:space="preserve">
          <source>The covariant type parameter of a read-only property type (the user is expecting a producer of &lt;code&gt;Fruit&lt;/code&gt;, and gets a producer of &lt;code&gt;Apple&lt;/code&gt;)</source>
          <target state="translated">읽기 전용 속성 유형의 공변량 유형 매개 변수 (사용자는 &lt;code&gt;Fruit&lt;/code&gt; 의 생산자를 기대하고 &lt;code&gt;Apple&lt;/code&gt; 의 생산자를 얻습니다 )</target>
        </trans-unit>
        <trans-unit id="7d1a94c8808bc3894d49e0ec4259312cbb359362" translate="yes" xml:space="preserve">
          <source>The covariant type parameter of a return type (the user is expecting that the returned value will produce a &lt;code&gt;Fruit&lt;/code&gt;, so it's okay if it really produces an &lt;code&gt;Apple&lt;/code&gt;)</source>
          <target state="translated">리턴 유형의 공변량 유형 매개 변수 (사용자는 리턴 된 값이 &lt;code&gt;Fruit&lt;/code&gt; 을 생성 할 것으로 예상 하므로 실제로 &lt;code&gt;Apple&lt;/code&gt; 을 생성해도 괜찮습니다 )</target>
        </trans-unit>
        <trans-unit id="ec6f1c24b0cd8b11d61e4f25576ab198b6bece55" translate="yes" xml:space="preserve">
          <source>The covariant type parameter of the parameter type of a function-typed parameter (the user is passing a function that can handle any &lt;code&gt;Fruit&lt;/code&gt; producer, and it will be given an &lt;code&gt;Apple&lt;/code&gt; producer)</source>
          <target state="translated">함수 형식의 매개 변수의 매개 변수 형식의 공변 형식 매개 변수 (사용자는 처리 할 수있는 기능을 전달하고 &lt;code&gt;Fruit&lt;/code&gt; 생산을하고는 주어질 것이다 &lt;code&gt;Apple&lt;/code&gt; 프로듀서)</target>
        </trans-unit>
        <trans-unit id="bc2c5c3395341afe0bbd48554537d9a1ac25a9db" translate="yes" xml:space="preserve">
          <source>The covariant type parameter of the return type of a function-typed return type (the user expects the returned function to return something that produces &lt;code&gt;Fruit&lt;/code&gt;, so it's okay if it really produces &lt;code&gt;Apple&lt;/code&gt;)</source>
          <target state="translated">함수 형식의 반환 형식의 반환 형식의 공변 형식 매개 변수 (사용자가 반환 된 함수가 생산 뭔가 복귀 할 것으로 예상 &lt;code&gt;Fruit&lt;/code&gt; 정말 생산하는 경우 괜찮아, 그래서 &lt;code&gt;Apple&lt;/code&gt; )</target>
        </trans-unit>
        <trans-unit id="a39f5e4ad2c9626d5a5f458b4068b5771d3c11f9" translate="yes" xml:space="preserve">
          <source>The created &lt;code&gt;StableRef&lt;/code&gt; should eventually be manually disposed using the &lt;code&gt;.dispose()&lt;/code&gt; method to prevent memory leaks:</source>
          <target state="translated">생성 된 &lt;code&gt;StableRef&lt;/code&gt; 는 결국 메모리 누수를 방지하기 위해 &lt;code&gt;.dispose()&lt;/code&gt; 메소드를 사용하여 수동으로 폐기해야합니다 .</target>
        </trans-unit>
        <trans-unit id="7dc376ddde1c64329f76a2fdf0f77fd2f42853b6" translate="yes" xml:space="preserve">
          <source>The created iOS application is ready to run on the iOS emulator or on the iOS device. The device run may require an Apple developer account and to issue a developer certificate. Xcode does its best to guide us through the process.</source>
          <target state="translated">작성된 iOS 애플리케이션은 iOS 에뮬레이터 또는 iOS 디바이스에서 실행할 수 있습니다. 장치를 실행하려면 Apple 개발자 계정이 필요하고 개발자 인증서를 발급해야합니다. Xcode는 프로세스를 안내하기 위해 최선을 다합니다.</target>
        </trans-unit>
        <trans-unit id="e20d095cd0f1efef77b1627ffafe7b1dfa3d28bf" translate="yes" xml:space="preserve">
          <source>The curly braces around a body can be omitted if the body is a oneliner. This is discouraged unless the body goes on the same line as the condition, because it makes it easy to make this mistake, especially when one is used to Python:</source>
          <target state="translated">바디가 원 라이너 인 경우 바디 주변의 중괄호는 생략 할 수 있습니다. 신체가 조건과 같은 줄에 있지 않으면, 특히 파이썬에 익숙 할 때이 실수를 쉽게 할 수 있기 때문에 권장하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="594d3acd0f3d50fec031602ce3f69e2de7031169" translate="yes" xml:space="preserve">
          <source>The current reading value can be advanced by the specified duration amount with the operator &lt;a href=&quot;plus-assign&quot;&gt;plusAssign&lt;/a&gt;:</source>
          <target state="translated">현재 판독 값은 연산자 &lt;a href=&quot;plus-assign&quot;&gt;plusAssign을&lt;/a&gt; 사용하여 지정된 기간만큼 앞당길 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="dcfce21884a60ba71ce3d59d9e2af53e74e2e10c" translate="yes" xml:space="preserve">
          <source>The currently released version is 1.3.41, published on July 4, 2019.</source>
          <target state="translated">현재 출시 된 버전은 1.3.41이며 2019 년 7 월 4 일에 게시되었습니다.</target>
        </trans-unit>
        <trans-unit id="b5744a90420458acc57f96347ae2c3cc6f2d50b3" translate="yes" xml:space="preserve">
          <source>The currently released version is 1.4.10, published on September 10, 2020.</source>
          <target state="translated">현재 출시 된 버전은 2020 년 9 월 10 일에 게시 된 1.4.10입니다.</target>
        </trans-unit>
        <trans-unit id="99a5ae4aba1310a5ec2c1c1ea8e6bbd89807b2b1" translate="yes" xml:space="preserve">
          <source>The declaration of the classifier used in this type. For example, in the type &lt;code&gt;List&amp;lt;String&amp;gt;&lt;/code&gt; the classifier would be the &lt;a href=&quot;../-k-class/index#kotlin.reflect.KClass&quot;&gt;KClass&lt;/a&gt; instance for &lt;a href=&quot;../../kotlin.collections/-list/index#kotlin.collections.List&quot;&gt;List&lt;/a&gt;.</source>
          <target state="translated">이 유형에 사용 된 분류기의 선언. 예를 들어, &lt;code&gt;List&amp;lt;String&amp;gt;&lt;/code&gt; 유형 에서 분류 &lt;a href=&quot;../-k-class/index#kotlin.reflect.KClass&quot;&gt;자는 &lt;/a&gt;&lt;a href=&quot;../../kotlin.collections/-list/index#kotlin.collections.List&quot;&gt;List&lt;/a&gt; 의 KClass 인스턴스가 됩니다.</target>
        </trans-unit>
        <trans-unit id="e4cb77989b70ae7af02cc584cc3eb602ad306980" translate="yes" xml:space="preserve">
          <source>The declarations in the new artifacts are visible under the same package names from the Kotlin point of view, but have different package names for Java. Therefore, switching to the new artifacts will not require any changes to your source code.</source>
          <target state="translated">새로운 아티팩트의 선언은 Kotlin 관점에서 동일한 패키지 이름으로 볼 수 있지만 Java의 패키지 이름은 다릅니다. 따라서 새 아티팩트로 전환하면 소스 코드를 변경할 필요가 없습니다.</target>
        </trans-unit>
        <trans-unit id="38a82a6bd4d8bda70773fac15ae91a2110030d1c" translate="yes" xml:space="preserve">
          <source>The default &lt;a href=&quot;https://www.joelonsoftware.com/2003/10/08/the-absolute-minimum-every-software-developer-absolutely-positively-must-know-about-unicode-and-character-sets-no-excuses/&quot;&gt;encoding&lt;/a&gt; is UTF-8, but you can specify it if you need something else:</source>
          <target state="translated">기본 &lt;a href=&quot;https://www.joelonsoftware.com/2003/10/08/the-absolute-minimum-every-software-developer-absolutely-positively-must-know-about-unicode-and-character-sets-no-excuses/&quot;&gt;인코딩&lt;/a&gt; 은 UTF-8이지만 다른 것이 필요한 경우 지정할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="7643db7f540eca7261e951018ad1bc000680e9fc" translate="yes" xml:space="preserve">
          <source>The default artifact IDs follow the pattern &lt;code&gt;&amp;lt;projectName&amp;gt;-&amp;lt;targetNameToLowerCase&amp;gt;&lt;/code&gt;, for example &lt;code&gt;sample-lib-nodejs&lt;/code&gt; for a target named &lt;code&gt;nodeJs&lt;/code&gt; in a project &lt;code&gt;sample-lib&lt;/code&gt;.</source>
          <target state="translated">기본 아티팩트 ID는 &lt;code&gt;&amp;lt;projectName&amp;gt;-&amp;lt;targetNameToLowerCase&amp;gt;&lt;/code&gt; 패턴을 따릅니다 ( 예 : 프로젝트 &lt;code&gt;sample-lib&lt;/code&gt; 에서 &lt;code&gt;nodeJs&lt;/code&gt; 라는 대상의 &lt;code&gt;sample-lib-nodejs&lt;/code&gt; ) .</target>
        </trans-unit>
        <trans-unit id="960beb3d459f57914f0b08a89c8e7a0ae2d213a2" translate="yes" xml:space="preserve">
          <source>The default dispatcher that is used when coroutines are launched in &lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/-global-scope/index.html&quot;&gt;GlobalScope&lt;/a&gt; is represented by &lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/-dispatchers/-default.html&quot;&gt;Dispatchers.Default&lt;/a&gt; and uses a shared background pool of threads, so &lt;code&gt;launch(Dispatchers.Default) { ... }&lt;/code&gt; uses the same dispatcher as &lt;code&gt;GlobalScope.launch { ... }&lt;/code&gt;.</source>
          <target state="translated">코 루틴이 &lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/-global-scope/index.html&quot;&gt;GlobalScope&lt;/a&gt; 에서 시작될 때 사용되는 기본 디스패처는 &lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/-dispatchers/-default.html&quot;&gt;Dispatchers.Default&lt;/a&gt; 로 표시되며 스레드의 공유 백그라운드 풀을 사용하므로 &lt;code&gt;launch(Dispatchers.Default) { ... }&lt;/code&gt; 는 &lt;code&gt;GlobalScope.launch { ... }&lt;/code&gt; 와 동일한 디스패처를 사용합니다 . .} .</target>
        </trans-unit>
        <trans-unit id="b76c41789282ed3ab00f219e4dbda9192589571a" translate="yes" xml:space="preserve">
          <source>The default dispatcher, that is used when coroutines are launched in &lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/-global-scope/index.html&quot;&gt;GlobalScope&lt;/a&gt;, is represented by &lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/-dispatchers/-default.html&quot;&gt;Dispatchers.Default&lt;/a&gt; and uses shared background pool of threads, so &lt;code&gt;launch(Dispatchers.Default) { ... }&lt;/code&gt; uses the same dispatcher as &lt;code&gt;GlobalScope.launch { ... }&lt;/code&gt;.</source>
          <target state="translated">코 루틴이 &lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/-global-scope/index.html&quot;&gt;GlobalScope&lt;/a&gt; 에서 시작될 때 사용되는 기본 디스패처는 &lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/-dispatchers/-default.html&quot;&gt;Dispatchers.Default&lt;/a&gt; 로 표시되며 공유 백그라운드 스레드 풀을 사용하므로 &lt;code&gt;launch(Dispatchers.Default) { ... }&lt;/code&gt; 는 &lt;code&gt;GlobalScope.launch { ... }&lt;/code&gt; 와 동일한 디스패처를 사용합니다 . ..} .</target>
        </trans-unit>
        <trans-unit id="034812e12bafb58c2506d45936895dac0de7b559" translate="yes" xml:space="preserve">
          <source>The default implementation is available for Java classes implementing the interface.</source>
          <target state="translated">기본 구현은 인터페이스를 구현하는 Java 클래스에 사용 가능합니다.</target>
        </trans-unit>
        <trans-unit id="eae7fdc4a8ba33e2f9213a2722bb2903c080bbc0" translate="yes" xml:space="preserve">
          <source>The default implementation of &lt;code&gt;Map&lt;/code&gt; &amp;ndash; &lt;a href=&quot;../../api/latest/jvm/stdlib/kotlin.collections/-linked-hash-map/index&quot;&gt;&lt;code&gt;LinkedHashMap&lt;/code&gt;&lt;/a&gt; &amp;ndash; preserves the order of elements insertion when iterating the map. In turn, an alternative implementation &amp;ndash; &lt;a href=&quot;../../api/latest/jvm/stdlib/kotlin.collections/-hash-map/index&quot;&gt;&lt;code&gt;HashMap&lt;/code&gt;&lt;/a&gt; &amp;ndash; says nothing about the elements order.</source>
          <target state="translated">&lt;code&gt;Map&lt;/code&gt; &amp;ndash; &lt;a href=&quot;../../api/latest/jvm/stdlib/kotlin.collections/-linked-hash-map/index&quot;&gt; &lt;code&gt;LinkedHashMap&lt;/code&gt; &lt;/a&gt; &amp;ndash; 의 기본 구현은 맵을 반복 할 때 요소 삽입 순서를 유지합니다. 또한 대체 구현 인 &lt;a href=&quot;../../api/latest/jvm/stdlib/kotlin.collections/-hash-map/index&quot;&gt; &lt;code&gt;HashMap&lt;/code&gt; &lt;/a&gt; 은 요소 순서에 대해 아무 것도 말하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="1d4f4ecafdd233f07d5e3f6afd06222be0312077" translate="yes" xml:space="preserve">
          <source>The default implementation of &lt;code&gt;Set&lt;/code&gt; &amp;ndash; &lt;a href=&quot;../../api/latest/jvm/stdlib/kotlin.collections/-linked-hash-set/index&quot;&gt;&lt;code&gt;LinkedHashSet&lt;/code&gt;&lt;/a&gt; &amp;ndash; preserves the order of elements insertion. Hence, the functions that rely on the order, such as &lt;code&gt;first()&lt;/code&gt; or &lt;code&gt;last()&lt;/code&gt;, return predictable results on such sets.</source>
          <target state="translated">&lt;code&gt;Set&lt;/code&gt; &amp;ndash; &lt;a href=&quot;../../api/latest/jvm/stdlib/kotlin.collections/-linked-hash-set/index&quot;&gt; &lt;code&gt;LinkedHashSet&lt;/code&gt; &lt;/a&gt; &amp;ndash; 의 기본 구현 은 요소 삽입 순서를 유지합니다. 따라서 순서에 의존하는 함수 &lt;code&gt;first()&lt;/code&gt; 예 : first () 또는 &lt;code&gt;last()&lt;/code&gt; 는 그러한 세트에서 예측 가능한 결과를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="bed0e18ec00404266f1579a08902984894034905" translate="yes" xml:space="preserve">
          <source>The default nullability is used when a type itself is not annotated by a nullability annotation, and the default is determined by the innermost enclosing element annotated with a type qualifier default annotation with the &lt;code&gt;ElementType&lt;/code&gt; matching the type usage.</source>
          <target state="translated">기본 null 허용 여부는 형식 자체에 Null 허용 주석이 표시되지 않은 경우에 사용되며 기본값은 형식 사용법 과 일치하는 &lt;code&gt;ElementType&lt;/code&gt; 을 가진 형식 한정자 기본 주석으로 주석이 달린 가장 안쪽의 둘러싸는 요소에 의해 결정됩니다 .</target>
        </trans-unit>
        <trans-unit id="9d69906046e2ddf59f421f52ac090513e9b9f2a3" translate="yes" xml:space="preserve">
          <source>The default random number generator.</source>
          <target state="translated">기본 난수 생성기입니다.</target>
        </trans-unit>
        <trans-unit id="f6a4b71f5aa6c02b362c62576dcc053e9373e5c3" translate="yes" xml:space="preserve">
          <source>The default source set &lt;code&gt;commonMain&lt;/code&gt; is added to each production (application or library) variant's compilation. The &lt;code&gt;commonTest&lt;/code&gt; source set is similarly added to the compilations of unit test and instrumented test variants.</source>
          <target state="translated">기본 소스 세트 &lt;code&gt;commonMain&lt;/code&gt; 이 각 프로덕션 (응용 프로그램 또는 라이브러리) 변형의 컴파일에 추가됩니다. &lt;code&gt;commonTest&lt;/code&gt; 소스 세트 마찬가지로 단위 테스트의 컴파일에 첨가하고, 계측 시험 변종.</target>
        </trans-unit>
        <trans-unit id="f9ef35e4ea1c850fbe5f46bb280445cc0cd754fc" translate="yes" xml:space="preserve">
          <source>The default source set &lt;code&gt;commonMain&lt;/code&gt; is added to each production (application or library) variant's compilation. The &lt;code&gt;commonTest&lt;/code&gt; source set is, similarly, added to the compilations of unit test and instrumented test variants.</source>
          <target state="translated">기본 소스 세트 &lt;code&gt;commonMain&lt;/code&gt; 이 각 프로덕션 (애플리케이션 또는 라이브러리) 변형의 컴파일에 추가됩니다. &lt;code&gt;commonTest&lt;/code&gt; 소스 세트는 유사하게, 부 검사의 컴파일에 첨가하고, 계측 시험 변종.</target>
        </trans-unit>
        <trans-unit id="c561b55e89597682ebf08bcc014c20773fedb83e" translate="yes" xml:space="preserve">
          <source>The default upper bound (if none specified) is &lt;code&gt;Any?&lt;/code&gt;. Only one upper bound can be specified inside the angle brackets. If the same type parameter needs more than one upper bound, we need a separate &lt;strong&gt;where&lt;/strong&gt;-clause:</source>
          <target state="translated">기본 상한 (지정되지 않은 경우)은 &lt;code&gt;Any?&lt;/code&gt; . 꺾쇠 괄호 안에 하나의 상한 만 지정할 수 있습니다. 동일한 유형 매개 변수에 둘 이상의 상한이 필요한 경우 별도의 &lt;strong&gt;where&lt;/strong&gt; -clause 가 필요합니다 .</target>
        </trans-unit>
        <trans-unit id="7b5f3fac0dd293e61c74032e957e6e608fec3b05" translate="yes" xml:space="preserve">
          <source>The default value is provided at the declaration of this parameter.</source>
          <target state="translated">이 값을 선언하면 기본값이 제공됩니다.</target>
        </trans-unit>
        <trans-unit id="44653ab72c57ae2dec40031a1386b4afc98b3166" translate="yes" xml:space="preserve">
          <source>The definitions part shows how Kotlin primitive types map into C primitive types. We discussed reverse mapping in the &lt;a href=&quot;mapping-primitive-data-types-from-c&quot;&gt;Mapping Primitive Data Types from C&lt;/a&gt; tutorial.</source>
          <target state="translated">정의 부분은 Kotlin 기본 유형이 C 기본 유형으로 맵핑되는 방법을 보여줍니다. &lt;a href=&quot;mapping-primitive-data-types-from-c&quot;&gt;C&lt;/a&gt; 자습서의 기본 데이터 형식 매핑에서 리버스 매핑에 대해 설명했습니다 .</target>
        </trans-unit>
        <trans-unit id="7879370b21d5da1f44f128551f264e026a0fb9ed" translate="yes" xml:space="preserve">
          <source>The delegate class may implement one of the interfaces &lt;code&gt;ReadOnlyProperty&lt;/code&gt; and &lt;code&gt;ReadWriteProperty&lt;/code&gt; containing the required &lt;code&gt;operator&lt;/code&gt; methods. These interfaces are declared in the Kotlin standard library:</source>
          <target state="translated">델리게이트 클래스는 필수 &lt;code&gt;operator&lt;/code&gt; 메소드를 포함하는 &lt;code&gt;ReadOnlyProperty&lt;/code&gt; 및 &lt;code&gt;ReadWriteProperty&lt;/code&gt; 인터페이스 중 하나를 구현할 수 있습니다 . 이러한 인터페이스는 Kotlin 표준 라이브러리에 선언되어 있습니다.</target>
        </trans-unit>
        <trans-unit id="42bebb3adac2ab3e00fbad0af368d0931c57bd77" translate="yes" xml:space="preserve">
          <source>The delegated property can be used like this to declare a property in &lt;code&gt;Person&lt;/code&gt; - note the use of &lt;code&gt;by&lt;/code&gt; instead of &lt;code&gt;=&lt;/code&gt;:</source>
          <target state="translated">위임 된 속성은 &lt;code&gt;Person&lt;/code&gt; 에서 속성을 선언하기 위해 이와 같이 사용될 수 있습니다 . &lt;code&gt;=&lt;/code&gt; 대신에 &lt;code&gt;by&lt;/code&gt; 를 사용하십시오 .</target>
        </trans-unit>
        <trans-unit id="898cc738a761dcd3be73120e07ea5697ac2725df" translate="yes" xml:space="preserve">
          <source>The dependencies configuration has been changed; dependencies are now specified separately for each source root.</source>
          <target state="translated">종속성 구성이 변경되었습니다. 종속성은 이제 각 소스 루트에 대해 별도로 지정됩니다.</target>
        </trans-unit>
        <trans-unit id="973f16e5337bff9eb9481252b3daeac2f25a5f4f" translate="yes" xml:space="preserve">
          <source>The dependencies declared in this way are added in the podspec file and downloaded during the execution of &lt;code&gt;pod install&lt;/code&gt;.</source>
          <target state="translated">이러한 방식으로 선언 된 종속성은 podspec 파일에 추가되고 &lt;code&gt;pod install&lt;/code&gt; 실행 중에 다운로드됩니다 .</target>
        </trans-unit>
        <trans-unit id="f8d4becb658791b12877a35c88070d8b306eefc4" translate="yes" xml:space="preserve">
          <source>The dependency on the Kotlin/JS &lt;a href=&quot;../../index&quot;&gt;standard library&lt;/a&gt; is mandatory for all Kotlin/JS projects, and as such is implicit &amp;ndash; no artifacts need to be added. If your project contains tests written in Kotlin, you should add a dependency on the &lt;a href=&quot;https://kotlinlang.org/api/latest/kotlin.test/index.html&quot;&gt;kotlin.test&lt;/a&gt; library:</source>
          <target state="translated">Kotlin / JS &lt;a href=&quot;../../index&quot;&gt;표준 라이브러리&lt;/a&gt; 에 대한 종속성 은 모든 Kotlin / JS 프로젝트에 필수이며 따라서 암시 적이므로 아티팩트를 추가 할 필요가 없습니다. 프로젝트에 Kotlin으로 작성된 테스트가 포함 된 경우 &lt;a href=&quot;https://kotlinlang.org/api/latest/kotlin.test/index.html&quot;&gt;kotlin.test&lt;/a&gt; 라이브러리 에 종속성을 추가해야합니다 .</target>
        </trans-unit>
        <trans-unit id="8e289438644482986fe5eb08aaf9b0616f49cac1" translate="yes" xml:space="preserve">
          <source>The described mechanism for marking and using experimental APIs is itself experimental in Kotlin 1.3. This means that in future releases it may be changed in ways that make it incompatible. To make the users of annotations &lt;code&gt;@Experimental&lt;/code&gt; and &lt;code&gt;UseExperimental&lt;/code&gt; aware of their experimental status, the compiler raises warnings when compiling the code with these annotations:</source>
          <target state="translated">실험적 API를 표시하고 사용하기위한 설명 된 메커니즘은 Kotlin 1.3에서 실험적입니다. 이는 향후 릴리스에서 호환되지 않는 방식으로 변경 될 수 있음을 의미합니다. &lt;code&gt;@Experimental&lt;/code&gt; 및 &lt;code&gt;UseExperimental&lt;/code&gt; 주석 사용자가 실험 상태를 인식 하도록하기 위해 컴파일러는 다음 주석으로 코드를 컴파일 할 때 경고를 발생시킵니다.</target>
        </trans-unit>
        <trans-unit id="cf37d613f63880e424569836a2ab82c0f6bbbfbf" translate="yes" xml:space="preserve">
          <source>The design of inline classes is experimental, meaning that this feature is &lt;em&gt;moving fast&lt;/em&gt; and no compatibility guarantees are given. When using inline classes in Kotlin 1.3+, a warning will be reported, indicating that this feature is experimental.</source>
          <target state="translated">인라인 클래스의 디자인은 실험적이며,이 기능은 &lt;em&gt;빠르게 움직이고&lt;/em&gt; 호환성이 보장되지 않습니다. Kotlin 1.3 이상에서 인라인 클래스를 사용하는 경우이 기능이 실험 중임을 나타내는 경고가보고됩니다.</target>
        </trans-unit>
        <trans-unit id="530e7472ee58bdd7a4958120705547c1d20c1ddf" translate="yes" xml:space="preserve">
          <source>The design of inline classes is in &lt;a href=&quot;evolution/components-stability&quot;&gt;Alpha&lt;/a&gt;, meaning that no compatibility guarantees are given for future versions. When using inline classes in Kotlin 1.3+, a warning will be reported, indicating that this feature has not been released as stable.</source>
          <target state="translated">인라인 클래스의 디자인은 &lt;a href=&quot;evolution/components-stability&quot;&gt;Alpha&lt;/a&gt; 이므로 향후 버전에 대한 호환성 보장이 제공되지 않습니다. Kotlin 1.3 이상에서 인라인 클래스를 사용하는 경우이 기능이 안정적으로 출시되지 않았 음을 나타내는 경고가보고됩니다.</target>
        </trans-unit>
        <trans-unit id="b65859994bf9d4a7fb5d934baaf88e39c3f04558" translate="yes" xml:space="preserve">
          <source>The design of unsigned types is experimental, meaning that this feature is moving fast and no compatibility guarantees are given. When using unsigned arithmetics in Kotlin 1.3+, warning will be reported, indicating that this feature is experimental. To remove warning, you have to opt-in for experimental usage of unsigned types.</source>
          <target state="translated">서명되지 않은 유형의 디자인은 실험적이므로이 기능은 빠르게 움직이고 호환성 보장이 제공되지 않습니다. Kotlin 1.3+에서 부호없는 산술을 사용하는 경우이 기능이 실험 중임을 나타내는 경고가보고됩니다. 경고를 제거하려면 서명되지 않은 유형의 실험적 사용을 선택해야합니다.</target>
        </trans-unit>
        <trans-unit id="a2b28866ac37f05ef8569c7d67a02f97e240cc06" translate="yes" xml:space="preserve">
          <source>The design of unsigned types is in &lt;a href=&quot;evolution/components-stability&quot;&gt;Beta&lt;/a&gt;, meaning that its compatibility is best-effort only and not guaranteed. When using unsigned arithmetics in Kotlin 1.3+, a warning will be reported, indicating that this feature has not been released as stable. To remove the warning, you have to opt in for usage of unsigned types.</source>
          <target state="translated">서명되지 않은 유형의 디자인은 &lt;a href=&quot;evolution/components-stability&quot;&gt;베타 버전&lt;/a&gt; 이므로 호환성이 최선일 뿐이며 보장되지는 않습니다. Kotlin 1.3 이상에서 서명되지 않은 산술을 사용하는 경우이 기능이 안정적으로 출시되지 않았 음을 나타내는 경고가보고됩니다. 경고를 제거하려면 서명되지 않은 유형의 사용을 선택해야합니다.</target>
        </trans-unit>
        <trans-unit id="d36ceebc2800fee53f2de43e79177a2ecfc6f529" translate="yes" xml:space="preserve">
          <source>The detailed description includes:</source>
          <target state="translated">자세한 설명은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="a0d2b5a6b59247ce3c2ac4eba75f43c56acf4c3d" translate="yes" xml:space="preserve">
          <source>The difference between the two functions is that &lt;code&gt;fold()&lt;/code&gt; takes an initial value and uses it as the accumulated value on the first step, whereas the first step of &lt;code&gt;reduce()&lt;/code&gt; uses the first and the second elements as operation arguments on the first step.</source>
          <target state="translated">두 함수의 차이점은 &lt;code&gt;fold()&lt;/code&gt; 는 초기 값을 가져 와서 첫 번째 단계에서 누적 된 값으로 사용하는 반면, &lt;code&gt;reduce()&lt;/code&gt; 의 첫 번째 단계 는 첫 번째 및 두 번째 요소를 첫 번째 단계에서 조작 인수로 사용한다는 것입니다.</target>
        </trans-unit>
        <trans-unit id="16d1b90dc650643e776a4004ab589d677449c331" translate="yes" xml:space="preserve">
          <source>The directories containing the source files to compile</source>
          <target state="translated">컴파일 할 소스 파일이 포함 된 디렉토리</target>
        </trans-unit>
        <trans-unit id="bc1f5875183536752507e833a15dca77307fd640" translate="yes" xml:space="preserve">
          <source>The duration equal to exactly 0 seconds.</source>
          <target state="translated">정확히 0 초와 같은 기간입니다.</target>
        </trans-unit>
        <trans-unit id="be55f901bba5940c95d9f3540300cd294e976f5e" translate="yes" xml:space="preserve">
          <source>The duration whose value is positive infinity. It is useful for representing timeouts that should never expire.</source>
          <target state="translated">값이 무한대 인 기간입니다. 만료되지 않아야하는 제한 시간을 나타내는 데 유용합니다.</target>
        </trans-unit>
        <trans-unit id="f28bb53a04db0fb8fa17ba4aa3c143de9bce62e3" translate="yes" xml:space="preserve">
          <source>The dynamic type is not supported in code targeting the JVM</source>
          <target state="translated">JVM을 대상으로하는 코드에서 동적 유형이 지원되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="52d4bb2170c55ab0a1a89bfce15477357b84c2db" translate="yes" xml:space="preserve">
          <source>The dynamic type is not supported in code targeting the JVM.</source>
          <target state="translated">JVM을 대상으로하는 코드에서는 동적 유형이 지원되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="c1e94b86df57391ab40db234f4362544f610c993" translate="yes" xml:space="preserve">
          <source>The easiest way to create a new application targeting JavaScript with Maven is to allow IntelliJ IDEA to configure the Maven project for us. Simply create a new Maven project in IntelliJ IDEA and once the project is created, add a new folder to host the Kotlin source code, removing the default Java one. The project should end up with the following structure</source>
          <target state="translated">Maven으로 JavaScript를 대상으로하는 새로운 응용 프로그램을 만드는 가장 쉬운 방법은 IntelliJ IDEA가 Maven 프로젝트를 구성 할 수 있도록하는 것입니다. IntelliJ IDEA에서 새 Maven 프로젝트를 작성하고 프로젝트가 작성되면 Kotlin 소스 코드를 호스팅 할 새 폴더를 추가하여 기본 Java 코드를 제거하십시오. 프로젝트는 다음과 같은 구조로 끝나야합니다</target>
        </trans-unit>
        <trans-unit id="2264c37021c9f341a22eceb595f57ba842a08e4c" translate="yes" xml:space="preserve">
          <source>The ecosystem of libraries for data-related tasks created by the Kotlin community is rapidly expanding. Here are some libraries that you may find useful:</source>
          <target state="translated">Kotlin 커뮤니티에서 만든 데이터 관련 작업을위한 라이브러리 생태계가 빠르게 확장되고 있습니다. 다음은 유용 할 수있는 몇 가지 라이브러리입니다.</target>
        </trans-unit>
        <trans-unit id="171e3cf4fb89f709d12d970ce788f0d3a1e1b68e" translate="yes" xml:space="preserve">
          <source>The effect of computing the expression is:</source>
          <target state="translated">식 계산의 효과는 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="f34518faf7eb53cd2d65e3f4a6ad482c7e319fc7" translate="yes" xml:space="preserve">
          <source>The elapsed time is measured with &lt;a href=&quot;-time-source/-monotonic/index&quot;&gt;TimeSource.Monotonic&lt;/a&gt;.</source>
          <target state="translated">경과 시간은 &lt;a href=&quot;-time-source/-monotonic/index&quot;&gt;TimeSource.Monotonic&lt;/a&gt; 으로 측정됩니다 .</target>
        </trans-unit>
        <trans-unit id="79352142c1434a6d005be885bafaf8c579f79bc5" translate="yes" xml:space="preserve">
          <source>The elapsed time is measured with the specified &lt;code&gt;this&lt;/code&gt;&lt;a href=&quot;-time-source/index&quot;&gt;TimeSource&lt;/a&gt; instance.</source>
          <target state="translated">경과 시간은 지정된 &lt;code&gt;this&lt;/code&gt; &lt;a href=&quot;-time-source/index&quot;&gt;TimeSource&lt;/a&gt; 인스턴스로 측정됩니다 .</target>
        </trans-unit>
        <trans-unit id="ff0a9ac30d7664a4e4282016eea87cab13969066" translate="yes" xml:space="preserve">
          <source>The element is initialized with the specified &lt;a href=&quot;append-element#kotlin.dom%24appendElement(org.w3c.dom.Element,%20kotlin.String,%20kotlin.Function1((org.w3c.dom.Element,%20kotlin.Unit)))/init&quot;&gt;init&lt;/a&gt; function.</source>
          <target state="translated">요소는 지정된 &lt;a href=&quot;append-element#kotlin.dom%24appendElement(org.w3c.dom.Element,%20kotlin.String,%20kotlin.Function1((org.w3c.dom.Element,%20kotlin.Unit)))/init&quot;&gt;init&lt;/a&gt; 함수로 초기화 됩니다.</target>
        </trans-unit>
        <trans-unit id="ce1f29bcecbea56cfc0df73010eb4304c4fe5856" translate="yes" xml:space="preserve">
          <source>The element is initialized with the specified &lt;a href=&quot;append-element#kotlinx.dom%24appendElement(org.w3c.dom.Element,%20kotlin.String,%20kotlin.Function1((org.w3c.dom.Element,%20kotlin.Unit)))/init&quot;&gt;init&lt;/a&gt; function.</source>
          <target state="translated">요소는 지정된 &lt;a href=&quot;append-element#kotlinx.dom%24appendElement(org.w3c.dom.Element,%20kotlin.String,%20kotlin.Function1((org.w3c.dom.Element,%20kotlin.Unit)))/init&quot;&gt;init&lt;/a&gt; 함수로 초기화 됩니다.</target>
        </trans-unit>
        <trans-unit id="d9a189a8bbd800a60d20579c11365537800d1c5b" translate="yes" xml:space="preserve">
          <source>The element is initialized with the specified &lt;a href=&quot;create-element#kotlin.dom%24createElement(org.w3c.dom.Document,%20kotlin.String,%20kotlin.Function1((org.w3c.dom.Element,%20kotlin.Unit)))/init&quot;&gt;init&lt;/a&gt; function.</source>
          <target state="translated">요소는 지정된 &lt;a href=&quot;create-element#kotlin.dom%24createElement(org.w3c.dom.Document,%20kotlin.String,%20kotlin.Function1((org.w3c.dom.Element,%20kotlin.Unit)))/init&quot;&gt;init&lt;/a&gt; 함수로 초기화 됩니다.</target>
        </trans-unit>
        <trans-unit id="e69844e5d432f0eaa41b42186566f5a77daafdeb" translate="yes" xml:space="preserve">
          <source>The element is initialized with the specified &lt;a href=&quot;create-element#kotlinx.dom%24createElement(org.w3c.dom.Document,%20kotlin.String,%20kotlin.Function1((org.w3c.dom.Element,%20kotlin.Unit)))/init&quot;&gt;init&lt;/a&gt; function.</source>
          <target state="translated">요소는 지정된 &lt;a href=&quot;create-element#kotlinx.dom%24createElement(org.w3c.dom.Document,%20kotlin.String,%20kotlin.Function1((org.w3c.dom.Element,%20kotlin.Unit)))/init&quot;&gt;init&lt;/a&gt; 함수로 초기화 됩니다.</target>
        </trans-unit>
        <trans-unit id="0a6537bfaccb8cddd8c481ef1fab76499f34a316" translate="yes" xml:space="preserve">
          <source>The element is initialized with the speicifed &lt;a href=&quot;append-element#kotlin.dom%24appendElement%28org.w3c.dom.Element%2C+kotlin.String%2C+kotlin.Function1%28%28org.w3c.dom.Element%2C+kotlin.Unit%29%29%29%2Finit&quot;&gt;init&lt;/a&gt; function.</source>
          <target state="translated">요소는 지정된 &lt;a href=&quot;append-element#kotlin.dom%24appendElement%28org.w3c.dom.Element%2C+kotlin.String%2C+kotlin.Function1%28%28org.w3c.dom.Element%2C+kotlin.Unit%29%29%29%2Finit&quot;&gt;초기화&lt;/a&gt; 기능으로 초기화 됩니다.</target>
        </trans-unit>
        <trans-unit id="3c970d5af5c7c3d91e3eb72687259d2ce93c168c" translate="yes" xml:space="preserve">
          <source>The element is initialized with the speicifed &lt;a href=&quot;create-element#kotlin.dom%24createElement%28org.w3c.dom.Document%2C+kotlin.String%2C+kotlin.Function1%28%28org.w3c.dom.Element%2C+kotlin.Unit%29%29%29%2Finit&quot;&gt;init&lt;/a&gt; function.</source>
          <target state="translated">요소는 지정된 &lt;a href=&quot;create-element#kotlin.dom%24createElement%28org.w3c.dom.Document%2C+kotlin.String%2C+kotlin.Function1%28%28org.w3c.dom.Element%2C+kotlin.Unit%29%29%29%2Finit&quot;&gt;초기화&lt;/a&gt; 기능으로 초기화 됩니다.</target>
        </trans-unit>
        <trans-unit id="4479436b9b0ce8aa0beac7c43130aa60627f658c" translate="yes" xml:space="preserve">
          <source>The elements are appended in the order they appear in the &lt;a href=&quot;../-mutable-list/add-all#kotlin.collections.MutableList%24addAll%28kotlin.collections.Collection%28%28kotlin.collections.MutableList.E%29%29%29%2Felements&quot;&gt;elements&lt;/a&gt; collection.</source>
          <target state="translated">요소는 &lt;a href=&quot;../-mutable-list/add-all#kotlin.collections.MutableList%24addAll%28kotlin.collections.Collection%28%28kotlin.collections.MutableList.E%29%29%29%2Felements&quot;&gt;요소&lt;/a&gt; 컬렉션에 나타나는 순서대로 추가됩니다 .</target>
        </trans-unit>
        <trans-unit id="544e4fbca97528fef2325c3afe55cace763538a4" translate="yes" xml:space="preserve">
          <source>The elements are appended in the order they appear in the &lt;a href=&quot;../-mutable-list/add-all#kotlin.collections.MutableList%24addAll(kotlin.collections.Collection((kotlin.collections.MutableList.E)))/elements&quot;&gt;elements&lt;/a&gt; collection.</source>
          <target state="translated">요소는 &lt;a href=&quot;../-mutable-list/add-all#kotlin.collections.MutableList%24addAll(kotlin.collections.Collection((kotlin.collections.MutableList.E)))/elements&quot;&gt;요소&lt;/a&gt; 컬렉션에 나타나는 순서대로 추가됩니다 .</target>
        </trans-unit>
        <trans-unit id="23022bf4214f0845c5b1a370815de8e19dc6515a" translate="yes" xml:space="preserve">
          <source>The elements are appended in the order they appear in the &lt;a href=&quot;add-all#kotlin.collections.MutableList%24addAll%28kotlin.collections.Collection%28%28kotlin.collections.MutableList.E%29%29%29%2Felements&quot;&gt;elements&lt;/a&gt; collection.</source>
          <target state="translated">요소는 &lt;a href=&quot;add-all#kotlin.collections.MutableList%24addAll%28kotlin.collections.Collection%28%28kotlin.collections.MutableList.E%29%29%29%2Felements&quot;&gt;요소&lt;/a&gt; 컬렉션에 나타나는 순서대로 추가됩니다 .</target>
        </trans-unit>
        <trans-unit id="82095a92897d87f6ce531db50ce0bc12db68723f" translate="yes" xml:space="preserve">
          <source>The elements are appended in the order they appear in the &lt;a href=&quot;add-all#kotlin.collections.MutableList%24addAll(kotlin.collections.Collection((kotlin.collections.MutableList.E)))/elements&quot;&gt;elements&lt;/a&gt; collection.</source>
          <target state="translated">요소는 &lt;a href=&quot;add-all#kotlin.collections.MutableList%24addAll(kotlin.collections.Collection((kotlin.collections.MutableList.E)))/elements&quot;&gt;요소&lt;/a&gt; 컬렉션에 나타나는 순서대로 추가됩니다 .</target>
        </trans-unit>
        <trans-unit id="daa9aa5d9ebd8b42b1bcdf3100554fd92ca03d09" translate="yes" xml:space="preserve">
          <source>The elements are compared for equality with the &lt;a href=&quot;../kotlin/-any/equals#kotlin.Any%24equals%28kotlin.Any%29&quot;&gt;equals&lt;/a&gt; function. For floating point numbers it means that &lt;code&gt;NaN&lt;/code&gt; is equal to itself and &lt;code&gt;-0.0&lt;/code&gt; is not equal to &lt;code&gt;0.0&lt;/code&gt;.</source>
          <target state="translated">요소는 &lt;a href=&quot;../kotlin/-any/equals#kotlin.Any%24equals%28kotlin.Any%29&quot;&gt;equals&lt;/a&gt; 함수 와 동일한 지 비교 됩니다. 부동 소수점 숫자의 경우 &lt;code&gt;NaN&lt;/code&gt; 이 자체와 같고 &lt;code&gt;-0.0&lt;/code&gt; 이 &lt;code&gt;0.0&lt;/code&gt; 과 같지 않음 을 의미합니다 .</target>
        </trans-unit>
        <trans-unit id="aad20466e5a76028e3397e50e8845f24663b34cf" translate="yes" xml:space="preserve">
          <source>The elements are compared for equality with the &lt;a href=&quot;../kotlin/-any/equals#kotlin.Any%24equals(kotlin.Any?)&quot;&gt;equals&lt;/a&gt; function. For floating point numbers it means that &lt;code&gt;NaN&lt;/code&gt; is equal to itself and &lt;code&gt;-0.0&lt;/code&gt; is not equal to &lt;code&gt;0.0&lt;/code&gt;.</source>
          <target state="translated">요소는 &lt;a href=&quot;../kotlin/-any/equals#kotlin.Any%24equals(kotlin.Any?)&quot;&gt;같음&lt;/a&gt; 함수를 사용하여 같은지 비교 됩니다. 부동 소수점 숫자의 경우 &lt;code&gt;NaN&lt;/code&gt; 이 자신과 같고 &lt;code&gt;-0.0&lt;/code&gt; 이 &lt;code&gt;0.0&lt;/code&gt; 과 같지 않음 을 의미합니다 .</target>
        </trans-unit>
        <trans-unit id="f7d4f10d9d6ff53cf3cb02a56dcf3900dc9233c7" translate="yes" xml:space="preserve">
          <source>The elements in the resulting list are in the same order as they were in the source array.</source>
          <target state="translated">결과 목록의 요소는 소스 배열의 순서와 동일합니다.</target>
        </trans-unit>
        <trans-unit id="4758b35da216c6ed38b8e3b01e9232e835ffdf62" translate="yes" xml:space="preserve">
          <source>The elements in the resulting list are in the same order as they were in the source collection.</source>
          <target state="translated">결과 목록의 요소는 소스 콜렉션에있는 순서와 동일합니다.</target>
        </trans-unit>
        <trans-unit id="925245d7080579f68b367dc0eefbb0c6350a2c59" translate="yes" xml:space="preserve">
          <source>The elements in the resulting sequence are in the same order as they were in the source sequence.</source>
          <target state="translated">결과 시퀀스의 요소는 소스 시퀀스와 동일한 순서입니다.</target>
        </trans-unit>
        <trans-unit id="62f13d9c86bbfcad668fdecca43def6919a28064" translate="yes" xml:space="preserve">
          <source>The elements of other types are compared for equality with the &lt;a href=&quot;../kotlin/-any/equals#kotlin.Any%24equals%28kotlin.Any%29&quot;&gt;equals&lt;/a&gt; function. For floating point numbers it means that &lt;code&gt;NaN&lt;/code&gt; is equal to itself and &lt;code&gt;-0.0&lt;/code&gt; is not equal to &lt;code&gt;0.0&lt;/code&gt;.</source>
          <target state="translated">다른 유형의 요소는 &lt;a href=&quot;../kotlin/-any/equals#kotlin.Any%24equals%28kotlin.Any%29&quot;&gt;equals&lt;/a&gt; 함수 와 동일한 지 비교 됩니다. 부동 소수점 숫자의 경우 &lt;code&gt;NaN&lt;/code&gt; 이 자체와 같고 &lt;code&gt;-0.0&lt;/code&gt; 이 &lt;code&gt;0.0&lt;/code&gt; 과 같지 않음 을 의미합니다 .</target>
        </trans-unit>
        <trans-unit id="410a7c8a1416b4dffdf86f7b2fb29d1be03e7884" translate="yes" xml:space="preserve">
          <source>The elements of other types are compared for equality with the &lt;a href=&quot;../kotlin/-any/equals#kotlin.Any%24equals(kotlin.Any?)&quot;&gt;equals&lt;/a&gt; function. For floating point numbers it means that &lt;code&gt;NaN&lt;/code&gt; is equal to itself and &lt;code&gt;-0.0&lt;/code&gt; is not equal to &lt;code&gt;0.0&lt;/code&gt;.</source>
          <target state="translated">다른 유형의 요소는 &lt;a href=&quot;../kotlin/-any/equals#kotlin.Any%24equals(kotlin.Any?)&quot;&gt;equals&lt;/a&gt; 함수를 사용하여 동일한 지 비교 됩니다. 부동 소수점 숫자의 경우 &lt;code&gt;NaN&lt;/code&gt; 이 자신과 같고 &lt;code&gt;-0.0&lt;/code&gt; 이 &lt;code&gt;0.0&lt;/code&gt; 과 같지 않음 을 의미합니다 .</target>
        </trans-unit>
        <trans-unit id="d2a1ff86475df89c5d0b4d977b7fdad8159958a2" translate="yes" xml:space="preserve">
          <source>The emitter can use a &lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines.flow/catch.html&quot;&gt;catch&lt;/a&gt; operator that preserves this exception transparency and allows encapsulation of its exception handling. The body of the &lt;code&gt;catch&lt;/code&gt; operator can analyze an exception and react to it in different ways depending on which exception was caught:</source>
          <target state="translated">이미 터는 이 예외 투명성을 유지하고 예외 처리의 캡슐화를 허용 하는 &lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines.flow/catch.html&quot;&gt;catch&lt;/a&gt; 연산자를 사용할 수 있습니다 . &lt;code&gt;catch&lt;/code&gt; 연산자 의 본문은 예외를 분석 하고 포착 된 예외에 따라 다른 방식으로 반응 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="bb685b2c6e5acf402eac7fe67da99cd138309729" translate="yes" xml:space="preserve">
          <source>The end index of the &lt;a href=&quot;remove-range#kotlin.text%24removeRange%28kotlin.CharSequence%2C+kotlin.ranges.IntRange%29%2Frange&quot;&gt;range&lt;/a&gt; is included in the removed part.</source>
          <target state="translated">&lt;a href=&quot;remove-range#kotlin.text%24removeRange%28kotlin.CharSequence%2C+kotlin.ranges.IntRange%29%2Frange&quot;&gt;범위&lt;/a&gt; 의 끝 인덱스가 제거 된 부품에 포함됩니다.</target>
        </trans-unit>
        <trans-unit id="11df9d3925f0418a6e38aed874d509daf4025048" translate="yes" xml:space="preserve">
          <source>The end index of the &lt;a href=&quot;remove-range#kotlin.text%24removeRange%28kotlin.String%2C+kotlin.ranges.IntRange%29%2Frange&quot;&gt;range&lt;/a&gt; is included in the removed part.</source>
          <target state="translated">&lt;a href=&quot;remove-range#kotlin.text%24removeRange%28kotlin.String%2C+kotlin.ranges.IntRange%29%2Frange&quot;&gt;범위&lt;/a&gt; 의 끝 인덱스가 제거 된 부품에 포함됩니다.</target>
        </trans-unit>
        <trans-unit id="67fcbb6ac3e2a5c62cd2e430c9777a067763d923" translate="yes" xml:space="preserve">
          <source>The end index of the &lt;a href=&quot;remove-range#kotlin.text%24removeRange(kotlin.CharSequence,%20kotlin.ranges.IntRange)/range&quot;&gt;range&lt;/a&gt; is included in the removed part.</source>
          <target state="translated">&lt;a href=&quot;remove-range#kotlin.text%24removeRange(kotlin.CharSequence,%20kotlin.ranges.IntRange)/range&quot;&gt;범위&lt;/a&gt; 의 끝 인덱스 는 제거 된 부분에 포함됩니다.</target>
        </trans-unit>
        <trans-unit id="7aa81f1705dd0f516aa78c926061ad0c0bdec167" translate="yes" xml:space="preserve">
          <source>The end index of the &lt;a href=&quot;remove-range#kotlin.text%24removeRange(kotlin.String,%20kotlin.ranges.IntRange)/range&quot;&gt;range&lt;/a&gt; is included in the removed part.</source>
          <target state="translated">&lt;a href=&quot;remove-range#kotlin.text%24removeRange(kotlin.String,%20kotlin.ranges.IntRange)/range&quot;&gt;범위&lt;/a&gt; 의 끝 인덱스 는 제거 된 부분에 포함됩니다.</target>
        </trans-unit>
        <trans-unit id="88ef0ef1c8adfc13f79b17d279153b4deca66c2a" translate="yes" xml:space="preserve">
          <source>The end index of the &lt;a href=&quot;replace-range#kotlin.text%24replaceRange%28kotlin.CharSequence%2C+kotlin.ranges.IntRange%2C+kotlin.CharSequence%29%2Frange&quot;&gt;range&lt;/a&gt; is included in the part to be replaced.</source>
          <target state="translated">&lt;a href=&quot;replace-range#kotlin.text%24replaceRange%28kotlin.CharSequence%2C+kotlin.ranges.IntRange%2C+kotlin.CharSequence%29%2Frange&quot;&gt;범위&lt;/a&gt; 의 최종 지수는 교체 할 부품에 포함됩니다.</target>
        </trans-unit>
        <trans-unit id="110043ac6542bd5ea84cfa58a2ba979b14417af8" translate="yes" xml:space="preserve">
          <source>The end index of the &lt;a href=&quot;replace-range#kotlin.text%24replaceRange%28kotlin.String%2C+kotlin.ranges.IntRange%2C+kotlin.CharSequence%29%2Frange&quot;&gt;range&lt;/a&gt; is included in the part to be replaced.</source>
          <target state="translated">&lt;a href=&quot;replace-range#kotlin.text%24replaceRange%28kotlin.String%2C+kotlin.ranges.IntRange%2C+kotlin.CharSequence%29%2Frange&quot;&gt;범위&lt;/a&gt; 의 최종 지수는 교체 할 부품에 포함됩니다.</target>
        </trans-unit>
        <trans-unit id="265808d7f064c65b3e4484a504c21278573abe5f" translate="yes" xml:space="preserve">
          <source>The end index of the &lt;a href=&quot;replace-range#kotlin.text%24replaceRange(kotlin.CharSequence,%20kotlin.ranges.IntRange,%20kotlin.CharSequence)/range&quot;&gt;range&lt;/a&gt; is included in the part to be replaced.</source>
          <target state="translated">&lt;a href=&quot;replace-range#kotlin.text%24replaceRange(kotlin.CharSequence,%20kotlin.ranges.IntRange,%20kotlin.CharSequence)/range&quot;&gt;범위&lt;/a&gt; 의 끝 인덱스는 교체 할 부품에 포함됩니다.</target>
        </trans-unit>
        <trans-unit id="2757b02f416ac5f1c57fe37f28ebb5f19a2beb88" translate="yes" xml:space="preserve">
          <source>The end index of the &lt;a href=&quot;replace-range#kotlin.text%24replaceRange(kotlin.String,%20kotlin.ranges.IntRange,%20kotlin.CharSequence)/range&quot;&gt;range&lt;/a&gt; is included in the part to be replaced.</source>
          <target state="translated">&lt;a href=&quot;replace-range#kotlin.text%24replaceRange(kotlin.String,%20kotlin.ranges.IntRange,%20kotlin.CharSequence)/range&quot;&gt;범위&lt;/a&gt; 의 끝 인덱스는 교체 할 부품에 포함됩니다.</target>
        </trans-unit>
        <trans-unit id="d2bb3fe28b22f0be53eb5ccfae4478026ce71334" translate="yes" xml:space="preserve">
          <source>The entity which has an associated native pointer. Subtypes are supposed to represent interpretations of the pointed data or code.</source>
          <target state="translated">연결된 기본 포인터가있는 엔터티입니다. 하위 유형은 지정된 데이터 또는 코드의 해석을 나타냅니다.</target>
        </trans-unit>
        <trans-unit id="3e04fcff376865a32dde7dae672ab9789090a9b8" translate="yes" xml:space="preserve">
          <source>The entry point function for executable binaries. By default, it's &lt;code&gt;main()&lt;/code&gt; in the root package.</source>
          <target state="translated">실행 가능한 바이너리의 진입 점 함수입니다. 기본적으로 루트 패키지 의 &lt;code&gt;main()&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="2c6bd81b6f529ef522b5222f238d9ced96f1bfdb" translate="yes" xml:space="preserve">
          <source>The enum constants also implement the &lt;a href=&quot;../../api/latest/jvm/stdlib/kotlin/-comparable/index&quot;&gt;Comparable&lt;/a&gt; interface, with the natural order being the order in which they are defined in the enum class.</source>
          <target state="translated">열거 형 상수는 또한 &lt;a href=&quot;../../api/latest/jvm/stdlib/kotlin/-comparable/index&quot;&gt;Comparable&lt;/a&gt; 인터페이스를 구현하며 자연 순서는 열거 형 클래스에 정의 된 순서입니다.</target>
        </trans-unit>
        <trans-unit id="1f86188b4a8b45564220a022aed934fe72f40d6e" translate="yes" xml:space="preserve">
          <source>The example above shows the difference: &lt;code&gt;fold()&lt;/code&gt; is used for calculating the sum of doubled elements. If you pass the same function to &lt;code&gt;reduce()&lt;/code&gt;, it will return another result because it uses the list's first and second elements as arguments on the first step, so the first element won't be doubled.</source>
          <target state="translated">위의 예는 차이점을 보여줍니다. &lt;code&gt;fold()&lt;/code&gt; 는 배가 된 요소의 합을 계산하는 데 사용됩니다. 동일한 함수를 &lt;code&gt;reduce()&lt;/code&gt; 에 전달하면 첫 번째 단계에서 목록의 첫 번째 요소와 두 번째 요소를 인수로 사용하므로 첫 번째 요소가 두 배가되지 않기 때문에 다른 결과가 반환됩니다.</target>
        </trans-unit>
        <trans-unit id="b596f3f6b2203ee7818d443ce1a3eb3a2049daee" translate="yes" xml:space="preserve">
          <source>The example above will work for Android libraries with no product flavors. For a library with product flavors, the variant names also contain the flavors, like &lt;code&gt;fooBarDebug&lt;/code&gt; or &lt;code&gt;fooBazRelease&lt;/code&gt;.</source>
          <target state="translated">위 예제는 제품 버전이없는 Android 라이브러리에서 작동합니다. 제품 플레이버가있는 라이브러리의 경우 변형 이름에도 &lt;code&gt;fooBarDebug&lt;/code&gt; 또는 &lt;code&gt;fooBazRelease&lt;/code&gt; 와 같은 플레이버가 포함 됩니다.</target>
        </trans-unit>
        <trans-unit id="2034baca1648e38acba659c7ed9ab52779def3a9" translate="yes" xml:space="preserve">
          <source>The example of using &lt;code&gt;convert&lt;/code&gt;:</source>
          <target state="translated">&lt;code&gt;convert&lt;/code&gt; 를 사용하는 예 :</target>
        </trans-unit>
        <trans-unit id="e3355465d3cb3b6a452d6af446afe351cd4d8a18" translate="yes" xml:space="preserve">
          <source>The example works for Android libraries without &lt;a href=&quot;https://developer.android.com/studio/build/build-variants#product-flavors&quot;&gt;product flavors&lt;/a&gt;. For a library with product flavors, the variant names also contain the flavors, like &lt;code&gt;fooBarDebug&lt;/code&gt; or &lt;code&gt;fooBazRelease&lt;/code&gt;.</source>
          <target state="translated">이 예제는 &lt;a href=&quot;https://developer.android.com/studio/build/build-variants#product-flavors&quot;&gt;제품 버전이&lt;/a&gt; 없는 Android 라이브러리에서 작동합니다 . 제품 버전이있는 라이브러리의 경우 변형 이름에는 &lt;code&gt;fooBarDebug&lt;/code&gt; 또는 &lt;code&gt;fooBazRelease&lt;/code&gt; 와 같은 버전도 포함 됩니다.</target>
        </trans-unit>
        <trans-unit id="de730ff080513a1697957b51012ee307f16f42d8" translate="yes" xml:space="preserve">
          <source>The exception refers to the &lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines.flow/flow-on.html&quot;&gt;flowOn&lt;/a&gt; function that shall be used to change the context of the flow emission. The correct way to change the context of a flow is shown in the example below, which also prints the names of the corresponding threads to show how it all works:</source>
          <target state="translated">예외는 흐름 방출의 컨텍스트를 변경하는 데 사용되는 &lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines.flow/flow-on.html&quot;&gt;flowOn&lt;/a&gt; 함수를 참조합니다 . 흐름의 컨텍스트를 변경하는 올바른 방법은 아래 예제에 나와 있습니다. 또한 해당 스레드의 이름을 인쇄하여 모든 작동 방식을 보여줍니다.</target>
        </trans-unit>
        <trans-unit id="18829b154c907ba2a13646994ee9e04f0d08452d" translate="yes" xml:space="preserve">
          <source>The exception thrown when a character encoding or decoding error occurs.</source>
          <target state="translated">문자 인코딩 또는 디코딩 오류가 발생하면 예외가 발생합니다.</target>
        </trans-unit>
        <trans-unit id="15573b104c4da364167fd1f5ed5ef94aba8df42c" translate="yes" xml:space="preserve">
          <source>The experimental marker for associated objects API.</source>
          <target state="translated">관련 개체 API의 실험용 마커입니다.</target>
        </trans-unit>
        <trans-unit id="6d95121d07b3626cf990aefa17a36910bfcf4f29" translate="yes" xml:space="preserve">
          <source>The experimental marker for type inference augmenting annotations.</source>
          <target state="translated">타입 추론 증강 주석에 대한 실험 마커.</target>
        </trans-unit>
        <trans-unit id="deb8aac7cf53fe1202db4a3293685d56f19ee1b3" translate="yes" xml:space="preserve">
          <source>The experimental multiplatform support API marker.</source>
          <target state="translated">실험적인 멀티 플랫폼 지원 API 마커.</target>
        </trans-unit>
        <trans-unit id="0428313ba384ac9c0b8833c120ad8f95ce4ede3d" translate="yes" xml:space="preserve">
          <source>The expression &lt;code&gt;::x&lt;/code&gt; evaluates to a property object of type &lt;code&gt;KProperty&amp;lt;Int&amp;gt;&lt;/code&gt;, which allows us to read its value using &lt;code&gt;get()&lt;/code&gt; or retrieve the property name using the &lt;code&gt;name&lt;/code&gt; property. For more information, please refer to the &lt;a href=&quot;../../api/latest/jvm/stdlib/kotlin.reflect/-k-property/index&quot;&gt;docs on the &lt;code&gt;KProperty&lt;/code&gt; class&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;::x&lt;/code&gt; 표현식 은 &lt;code&gt;KProperty&amp;lt;Int&amp;gt;&lt;/code&gt; 유형의 속성 객체로 평가 되므로 &lt;code&gt;get()&lt;/code&gt; 사용하여 값을 읽 거나 &lt;code&gt;name&lt;/code&gt; 속성을 사용하여 속성 이름을 검색 할 수 있습니다. 자세한 내용 &lt;a href=&quot;../../api/latest/jvm/stdlib/kotlin.reflect/-k-property/index&quot;&gt;은 &lt;code&gt;KProperty&lt;/code&gt; 클래스&lt;/a&gt; 의 문서 를 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="9763a942f3f5fe1ee65c354fc7379c3f68a833e5" translate="yes" xml:space="preserve">
          <source>The fall-through behavior inside &lt;code&gt;when&lt;/code&gt; is subject to further design.</source>
          <target state="translated">가을-을 통해 행동의 내부 &lt;code&gt;when&lt;/code&gt; 더 이상의 설계의 적용을받습니다.</target>
        </trans-unit>
        <trans-unit id="993743ac3189d9caa30dab313cb6712bc1755441" translate="yes" xml:space="preserve">
          <source>The fat framework must have the same base name as the initial frameworks.</source>
          <target state="translated">fat 프레임 워크는 초기 프레임 워크와 동일한 기본 이름을 가져야합니다.</target>
        </trans-unit>
        <trans-unit id="788ff064b8ecef1f248204a84772fdfe4508eee7" translate="yes" xml:space="preserve">
          <source>The file is missing the &lt;code&gt;extern &quot;C&quot;&lt;/code&gt; block, which is not needed for our example, but may be necessary if we use C++ and overloaded functions. The &lt;a href=&quot;https://stackoverflow.com/questions/1041866/what-is-the-effect-of-extern-c-in-c&quot;&gt;C++ compatibility&lt;/a&gt; thread contains more details on this.</source>
          <target state="translated">이 파일에는 &lt;code&gt;extern &quot;C&quot;&lt;/code&gt; 블록이 없습니다.이 예에서는 필요하지 않지만 C ++ 및 오버로드 된 함수를 사용하는 경우 필요할 수 있습니다. &lt;a href=&quot;https://stackoverflow.com/questions/1041866/what-is-the-effect-of-extern-c-in-c&quot;&gt;C ++ 호환성&lt;/a&gt; 실이에 대한 자세한 내용이 포함되어 있습니다.</target>
        </trans-unit>
        <trans-unit id="2828031dfb85b70cc7191c0b9ade03e3586cc60a" translate="yes" xml:space="preserve">
          <source>The file system locations for the Java sources are different from the &lt;code&gt;java&lt;/code&gt; plugin's defaults. The Java source files need to be placed in the sibling directories of the Kotlin source roots. For example, if the JVM target has the default name &lt;code&gt;jvm&lt;/code&gt;, the paths are:</source>
          <target state="translated">Java 소스의 파일 시스템 위치는 &lt;code&gt;java&lt;/code&gt; 플러그인의 기본값 과 다릅니다 . Java 소스 파일은 Kotlin 소스 루트의 형제 디렉토리에 있어야합니다. 예를 들어 JVM 대상의 기본 이름이 &lt;code&gt;jvm&lt;/code&gt; 인 경우 경로는 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="a63cb5acdae60d6976d603a52addbcfa0b41167c" translate="yes" xml:space="preserve">
          <source>The file we're mostly interested in is &lt;code&gt;ConsoleOutput.js&lt;/code&gt;</source>
          <target state="translated">우리가 주로 관심있는 파일은 &lt;code&gt;ConsoleOutput.js&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="b2c228ca59fbecd7257e251a141cb2c1718c2ba0" translate="yes" xml:space="preserve">
          <source>The final code in the &lt;code&gt;hello.kt&lt;/code&gt; file may look like that:</source>
          <target state="translated">&lt;code&gt;hello.kt&lt;/code&gt; 파일 의 최종 코드 는 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="994c32d45d717275b8093d1a6c05a756a3faeb93" translate="yes" xml:space="preserve">
          <source>The final code in the &lt;code&gt;hello.kt&lt;/code&gt; file may look like this:</source>
          <target state="translated">&lt;code&gt;hello.kt&lt;/code&gt; 파일 의 최종 코드 는 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="845eeef01520a4662cdfbe660097ba30ecf3f4fb" translate="yes" xml:space="preserve">
          <source>The final step is to define the actual compilation of the project, which uses the standard IntelliJ IDEA Runner Type</source>
          <target state="translated">마지막 단계는 표준 IntelliJ IDEA 러너 유형을 사용하는 프로젝트의 실제 컴파일을 정의하는 것입니다.</target>
        </trans-unit>
        <trans-unit id="64ebebb6a3a3dfec1d013df86e5fccb457a8633c" translate="yes" xml:space="preserve">
          <source>The final step is to make Xcode call our Gradle build to prepare the &lt;code&gt;SharedCode&lt;/code&gt; framework before each run. We open the &lt;em&gt;Build Phases&lt;/em&gt; tab and click &lt;code&gt;+&lt;/code&gt; to add the &lt;em&gt;New Run Script Phase&lt;/em&gt; and add the following code into it:</source>
          <target state="translated">마지막 단계는 Xcode에서 Gradle 빌드를 호출하여 각 실행 전에 &lt;code&gt;SharedCode&lt;/code&gt; 프레임 워크 를 준비하는 것 입니다. 우리는 열 &lt;em&gt;빌드 페이즈의&lt;/em&gt; 탭을 클릭 &lt;code&gt;+&lt;/code&gt; 추가하는 &lt;em&gt;새로운 스크립트 실행 단계를&lt;/em&gt; 하고 그것으로 다음 코드를 추가합니다 :</target>
        </trans-unit>
        <trans-unit id="18cac2860812daece2680c18729b8285d0c95c2d" translate="yes" xml:space="preserve">
          <source>The first &lt;code&gt;this&lt;/code&gt; refers to &lt;code&gt;maybeNull&lt;/code&gt;, the second one refers to the result of &lt;code&gt;firstFunction()&lt;/code&gt;, and &lt;code&gt;result&lt;/code&gt; will be the result of &lt;code&gt;secondFunction()&lt;/code&gt; (or null if &lt;code&gt;maybeNull&lt;/code&gt; or any of the intermediate results were null).</source>
          <target state="translated">먼저 &lt;code&gt;this&lt;/code&gt; 지칭 &lt;code&gt;maybeNull&lt;/code&gt; 는 , 상기 제 하나의 결과를 말한다 &lt;code&gt;firstFunction()&lt;/code&gt; 및 &lt;code&gt;result&lt;/code&gt; 의 결과 일 것이다 &lt;code&gt;secondFunction()&lt;/code&gt; IF (또는 널 &lt;code&gt;maybeNull&lt;/code&gt; 또는 중간 결과가 널 (NULL)이었다).</target>
        </trans-unit>
        <trans-unit id="4fdd8b62987d88f8c4db3a2a41e10fc4d1887b5c" translate="yes" xml:space="preserve">
          <source>The first argument in this example allows one to set a name prefix for the created binaries which is used to access them in the buildscript (see the &lt;a href=&quot;#accessing-binaries&quot;&gt;&quot;Accessing binaries&quot;&lt;/a&gt; section). Also this prefix is used as a default name for the binary file. For example on Windows the sample above produces files &lt;code&gt;foo.exe&lt;/code&gt; and &lt;code&gt;bar.exe&lt;/code&gt;.</source>
          <target state="translated">이 예제의 첫 번째 인수는 작성된 바이너리에 대한 이름 접두사를 빌드 스크립트에서 액세스하는 데 사용되는 이름 접두어를 설정할 수있게합니다 ( &lt;a href=&quot;#accessing-binaries&quot;&gt;&quot;바이너리 액세스&quot;&lt;/a&gt; 섹션 참조). 또한이 접두사는 이진 파일의 기본 이름으로 사용됩니다. 예를 들어 Windows에서 위의 샘플은 &lt;code&gt;foo.exe&lt;/code&gt; 및 &lt;code&gt;bar.exe&lt;/code&gt; 파일을 생성합니다 .</target>
        </trans-unit>
        <trans-unit id="ab7ad2adf8e4b67a975c2aa2a67b21c251d16be6" translate="yes" xml:space="preserve">
          <source>The first argument sets a name prefix, which is the default name for the binary file. For example, for Windows the code produces the files &lt;code&gt;foo.exe&lt;/code&gt; and &lt;code&gt;bar.exe&lt;/code&gt;. You can also use the name prefix to &lt;a href=&quot;#access-binaries&quot;&gt;access the binary in the build script&lt;/a&gt;.</source>
          <target state="translated">첫 번째 인수는 바이너리 파일의 기본 이름 인 이름 접두사를 설정합니다. 예를 들어 Windows의 경우 코드는 &lt;code&gt;foo.exe&lt;/code&gt; 및 &lt;code&gt;bar.exe&lt;/code&gt; 파일을 생성합니다 . 또한 이름 접두사를 &lt;a href=&quot;#access-binaries&quot;&gt;사용하여 빌드 스크립트의 바이너리에 액세스&lt;/a&gt; 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="2fc302c51d198c918ae55a3c30c065988889b3c8" translate="yes" xml:space="preserve">
          <source>The first call in the chain usually should have a line break before it, but it's OK to omit it if the code makes more sense that way.</source>
          <target state="translated">체인의 첫 번째 호출은 일반적으로 앞에 줄 바꿈이 있어야하지만 코드가 더 의미가있는 경우 생략하는 것이 좋습니다.</target>
        </trans-unit>
        <trans-unit id="7d42226ff723442296e308591a35f8828357046e" translate="yes" xml:space="preserve">
          <source>The first coroutine has the &lt;strong&gt;SUSPENDED&lt;/strong&gt; status &amp;ndash; it is waiting for the values so it can multiply them.</source>
          <target state="translated">첫 번째 코 루틴은 &lt;strong&gt;SUSPENDED&lt;/strong&gt; 상태입니다. 값을 곱할 수 있도록 대기 중입니다.</target>
        </trans-unit>
        <trans-unit id="b4e33fae8e821602ad4182a2f8cd98570f5752fb" translate="yes" xml:space="preserve">
          <source>The first element in the progression.</source>
          <target state="translated">진행의 첫 번째 요소.</target>
        </trans-unit>
        <trans-unit id="f74c962485a9f3f35870c553a197b5ef319d5a35" translate="yes" xml:space="preserve">
          <source>The first example mixes &lt;em&gt;non-blocking&lt;/em&gt;&lt;code&gt;delay(...)&lt;/code&gt; and &lt;em&gt;blocking&lt;/em&gt;&lt;code&gt;Thread.sleep(...)&lt;/code&gt; in the same code. It is easy to lose track of which one is blocking and which one is not. Let's be explicit about blocking using &lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/run-blocking.html&quot;&gt;runBlocking&lt;/a&gt; coroutine builder:</source>
          <target state="translated">첫 번째 예 는 동일한 코드에서 &lt;em&gt;비 차단 &lt;/em&gt; &lt;code&gt;delay(...)&lt;/code&gt; 과 &lt;em&gt;차단 &lt;/em&gt; &lt;code&gt;Thread.sleep(...)&lt;/code&gt; 을 혼합 합니다. 어느 것이 막히고 어떤 것이 막히지 않았는지 쉽게 잃을 수 있습니다. &lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/run-blocking.html&quot;&gt;runBlocking&lt;/a&gt; 코 루틴 빌더를 사용하여 차단하는 것에 대해 명시 적으로 설명하겠습니다 .</target>
        </trans-unit>
        <trans-unit id="1aa4bbc7c819801ad00e125d4e56e82f4c2f67c5" translate="yes" xml:space="preserve">
          <source>The first example mixes &lt;em&gt;non-blocking&lt;/em&gt;&lt;code&gt;delay(...)&lt;/code&gt; and &lt;em&gt;blocking&lt;/em&gt;&lt;code&gt;Thread.sleep(...)&lt;/code&gt; in the same code. It is easy to lose track of which one is blocking and which one is not. Let's be explicit about blocking using the &lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/run-blocking.html&quot;&gt;runBlocking&lt;/a&gt; coroutine builder:</source>
          <target state="translated">첫 번째 예제 는 동일한 코드에서 &lt;em&gt;non-blocking &lt;/em&gt; &lt;code&gt;delay(...)&lt;/code&gt; 와 &lt;em&gt;차단 &lt;/em&gt; &lt;code&gt;Thread.sleep(...)&lt;/code&gt; 을 혼합 합니다. 어느 쪽이 막고 있는지, 어느 쪽이 아닌지 추적하기 쉽습니다. &lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/run-blocking.html&quot;&gt;runBlocking&lt;/a&gt; 코 루틴 빌더를 사용하여 차단에 대해 명시 적으로 설명하겠습니다 .</target>
        </trans-unit>
        <trans-unit id="b2d66cf460f6f78061ad6d5f7262d3436e850f41" translate="yes" xml:space="preserve">
          <source>The first extension takes a &lt;code&gt;char *&lt;/code&gt; as a UTF-8 string and turns it into a String. The second function does the same but for wide UTF-16 strings.</source>
          <target state="translated">첫 번째 확장은 &lt;code&gt;char *&lt;/code&gt; 를 UTF-8 문자열로 사용하여 문자열로 바꿉니다. 두 번째 함수는 동일하지만 넓은 UTF-16 문자열에 대해 수행합니다.</target>
        </trans-unit>
        <trans-unit id="60455f009d759b3a711a0c86694ca0f8e3417539" translate="yes" xml:space="preserve">
          <source>The first four elements are added to the buffer and the sender suspends when trying to send the fifth one.</source>
          <target state="translated">처음 4 개의 요소가 버퍼에 추가되고 5 번째 요소를 보내려고하면 발신자가 일시 중단됩니다.</target>
        </trans-unit>
        <trans-unit id="ab32e32b6495f8ef1ecac2deb728551ecd768355" translate="yes" xml:space="preserve">
          <source>The first function is &lt;a href=&quot;../../api/latest/jvm/stdlib/kotlin.collections/flatten&quot;&gt;&lt;code&gt;flatten()&lt;/code&gt;&lt;/a&gt;. You can call it on a collection of collections, for example, a &lt;code&gt;List&lt;/code&gt; of &lt;code&gt;Set&lt;/code&gt;s. The function returns a single &lt;code&gt;List&lt;/code&gt; of all the elements of the nested collections.</source>
          <target state="translated">첫 번째 함수는 &lt;a href=&quot;../../api/latest/jvm/stdlib/kotlin.collections/flatten&quot;&gt; &lt;code&gt;flatten()&lt;/code&gt; &lt;/a&gt; 입니다. 컬렉션 모음 (예 : &lt;code&gt;List&lt;/code&gt; of &lt;code&gt;Set&lt;/code&gt; ) 에서 호출 할 수 있습니다 . 이 함수는 중첩 컬렉션의 모든 요소에 대한 단일 &lt;code&gt;List&lt;/code&gt; 를 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="bb9b81609c647210d6aacd108c4c1230b4870b5f" translate="yes" xml:space="preserve">
          <source>The first line of the input contains two integers &lt;code&gt;n&lt;/code&gt; and &lt;code&gt;k&lt;/code&gt;</source>
          <target state="translated">입력의 첫 번째 줄에는 두 개의 정수 &lt;code&gt;n&lt;/code&gt; 과 &lt;code&gt;k&lt;/code&gt; 가 있습니다.</target>
        </trans-unit>
        <trans-unit id="a973365d252e2f2156e9bff5ffce49da12fd36a5" translate="yes" xml:space="preserve">
          <source>The first list contains the first elements of each &lt;code&gt;Pair&lt;/code&gt; in the original list.</source>
          <target state="translated">첫 번째 목록에는 원본 목록에서 각 &lt;code&gt;Pair&lt;/code&gt; 의 첫 번째 요소가 포함 됩니다.</target>
        </trans-unit>
        <trans-unit id="79bda60284dc4aa80a7917505f3968fd9009f668" translate="yes" xml:space="preserve">
          <source>The first step of using an actor is to define a class of messages that an actor is going to process. Kotlin's &lt;a href=&quot;../sealed-classes&quot;&gt;sealed classes&lt;/a&gt; are well suited for that purpose. We define &lt;code&gt;CounterMsg&lt;/code&gt; sealed class with &lt;code&gt;IncCounter&lt;/code&gt; message to increment a counter and &lt;code&gt;GetCounter&lt;/code&gt; message to get its value. The later needs to send a response. A &lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/-completable-deferred/index.html&quot;&gt;CompletableDeferred&lt;/a&gt; communication primitive, that represents a single value that will be known (communicated) in the future, is used here for that purpose.</source>
          <target state="translated">액터를 사용하는 첫 번째 단계는 액터가 처리 할 메시지 클래스를 정의하는 것입니다. 코 틀린의 &lt;a href=&quot;../sealed-classes&quot;&gt;봉인 수업&lt;/a&gt; 은 그 목적에 적합합니다. 카운터를 증가시키기 위해 &lt;code&gt;IncCounter&lt;/code&gt; 메시지와 그 값을 얻기 위해 &lt;code&gt;GetCounter&lt;/code&gt; 메시지를 사용하여 &lt;code&gt;CounterMsg&lt;/code&gt; 밀봉 클래스를 정의 합니다. 나중에 응답을 보내야합니다. &lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/-completable-deferred/index.html&quot;&gt;CompletableDeferred의&lt;/a&gt; 미래에 공지 (전달) 될 단일 값을 나타내는 원시 통신은, 그 목적을 위해 여기에 사용된다.</target>
        </trans-unit>
        <trans-unit id="38481ec6d5c41bf35d07d09bc7535247f80dee43" translate="yes" xml:space="preserve">
          <source>The first thing we'll need is a Kotlin file called &lt;code&gt;src/nativeMain/kotlin/hello.kt&lt;/code&gt; with the &lt;code&gt;main&lt;/code&gt; function defined in it and then proceed to translate each line</source>
          <target state="translated">가장 먼저 필요한 것은 &lt;code&gt;src/nativeMain/kotlin/hello.kt&lt;/code&gt; 라는 Kotlin 파일 입니다. 여기에 &lt;code&gt;main&lt;/code&gt; 함수가 정의되어 있고 각 줄을 번역하십시오.</target>
        </trans-unit>
        <trans-unit id="804c8326e52e09959a1fbeb61a10298b8d1c200d" translate="yes" xml:space="preserve">
          <source>The following API elements have been moved to the common library:</source>
          <target state="translated">다음 API 요소가 공용 라이브러리로 이동되었습니다.</target>
        </trans-unit>
        <trans-unit id="6f6aa8f820f0284bd28697b0207de3b2578af79f" translate="yes" xml:space="preserve">
          <source>The following attributes are supported:</source>
          <target state="translated">다음과 같은 속성이 지원됩니다.</target>
        </trans-unit>
        <trans-unit id="d555f20ea9bbf2028964527e2711757cec45ebd4" translate="yes" xml:space="preserve">
          <source>The following code launches a long-running coroutine in &lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/-global-scope/index.html&quot;&gt;GlobalScope&lt;/a&gt; that prints &quot;I'm sleeping&quot; twice a second and then returns from the main function after some delay:</source>
          <target state="translated">다음 코드는 &lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/-global-scope/index.html&quot;&gt;GlobalScope&lt;/a&gt; 에서 오래 실행되는 코 루틴을 시작하여 1 초에 두 번 &quot;잠자고 있습니다&quot;를 인쇄 한 다음 약간의 지연 후에 기본 기능에서 돌아옵니다.</target>
        </trans-unit>
        <trans-unit id="ead88ea1dd6b3e545d54d2d74bc4d103e0cfff51" translate="yes" xml:space="preserve">
          <source>The following commands are available.</source>
          <target state="translated">다음과 같은 명령을 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="55be4cb42f91b956f18957a0a075265fb24672f6" translate="yes" xml:space="preserve">
          <source>The following example demonstrates this concept:</source>
          <target state="translated">다음 예제는이 개념을 보여줍니다.</target>
        </trans-unit>
        <trans-unit id="40d8cb89ac87b573a486f4f8fe49663dde1297b2" translate="yes" xml:space="preserve">
          <source>The following example prints the first ten prime numbers, running the whole pipeline in the context of the main thread. Since all the coroutines are launched in the scope of the main &lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/run-blocking.html&quot;&gt;runBlocking&lt;/a&gt; coroutine we don't have to keep an explicit list of all the coroutines we have started. We use &lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/kotlin.coroutines.-coroutine-context/cancel-children.html&quot;&gt;cancelChildren&lt;/a&gt; extension function to cancel all the children coroutines after we have printed the first ten prime numbers.</source>
          <target state="translated">다음 예제는 메인 스레드의 컨텍스트에서 전체 파이프 라인을 실행하는 처음 10 개의 소수를 인쇄합니다. 모든 코 루틴은 기본 &lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/run-blocking.html&quot;&gt;runBlocking&lt;/a&gt; 코 루틴 의 범위에서 시작되므로 시작한 모든 코 루틴의 목록을 명시 적으로 유지할 필요는 없습니다. 우리는 &lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/kotlin.coroutines.-coroutine-context/cancel-children.html&quot;&gt;cancelChildren&lt;/a&gt; 확장 기능을 사용 하여 처음 10 개의 소수를 인쇄 한 후 모든 자식 코 루틴을 취소합니다.</target>
        </trans-unit>
        <trans-unit id="9f818012b8152abe166a094d93ab2ca0ec79eab1" translate="yes" xml:space="preserve">
          <source>The following example shows how to use these settings.</source>
          <target state="translated">다음 예는 이러한 설정을 사용하는 방법을 보여줍니다.</target>
        </trans-unit>
        <trans-unit id="29c80399d536894a6ec94c527a731166260c49c2" translate="yes" xml:space="preserve">
          <source>The following example shows their use outside of coroutine:</source>
          <target state="translated">다음 예는 코 루틴 밖에서의 사용을 보여줍니다.</target>
        </trans-unit>
        <trans-unit id="b39c4c0b095563ff59ef483ec27836f8b662f2fa" translate="yes" xml:space="preserve">
          <source>The following examples show different possibilities of configuring the Gradle plugin:</source>
          <target state="translated">다음 예제는 Gradle 플러그인 구성의 다양한 가능성을 보여줍니다.</target>
        </trans-unit>
        <trans-unit id="e712d7790d39e907b7ee7e8cb60e61e0c86b31e2" translate="yes" xml:space="preserve">
          <source>The following identifiers are defined by the compiler in specific contexts and can be used as regular identifiers in other contexts:</source>
          <target state="translated">다음 식별자는 특정 컨텍스트에서 컴파일러에 의해 정의되며 다른 컨텍스트에서 일반 식별자로 사용될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="bf95dedf99c3841e1d5196a0ba2d969912347f7d" translate="yes" xml:space="preserve">
          <source>The following is an example interface of the JDK implemented by &lt;code&gt;StringBuilder&lt;/code&gt; class:</source>
          <target state="translated">다음은 &lt;code&gt;StringBuilder&lt;/code&gt; 클래스로 구현 된 JDK의 인터페이스 예입니다 .</target>
        </trans-unit>
        <trans-unit id="3270b513d23150d33c43f1294cdabc39fc329d50" translate="yes" xml:space="preserve">
          <source>The following options are common for all Kotlin compilers.</source>
          <target state="translated">다음 옵션은 모든 Kotlin 컴파일러에 공통입니다.</target>
        </trans-unit>
        <trans-unit id="8e29598dc88ea6b0ec70ab50aa2a4cfa741c6e7f" translate="yes" xml:space="preserve">
          <source>The following pipeline stage filters an incoming stream of numbers, removing all the numbers that are divisible by the given prime number:</source>
          <target state="translated">다음 파이프 라인 단계는 들어오는 숫자 스트림을 필터링하여 지정된 소수로 나눌 수있는 모든 숫자를 제거합니다.</target>
        </trans-unit>
        <trans-unit id="29b7ef083a5e449cb9ecea68dfa0ae64024fefca" translate="yes" xml:space="preserve">
          <source>The following podspec fields are required by CocoaPods:</source>
          <target state="translated">CocoaPod에는 다음 podspec 필드가 필요합니다.</target>
        </trans-unit>
        <trans-unit id="21b0584d86535ffda98821a37bb76687f7207959" translate="yes" xml:space="preserve">
          <source>The following sections explain in more detail the concepts mentioned so far.</source>
          <target state="translated">다음 섹션에서는 지금까지 언급 한 개념에 대해 자세히 설명합니다.</target>
        </trans-unit>
        <trans-unit id="74efddf743e09c3574933d597d99624d7eb3e501" translate="yes" xml:space="preserve">
          <source>The following snippet creates two executable binaries: debug and release.</source>
          <target state="translated">다음 코드 조각은 디버그 및 릴리스의 두 가지 실행 가능한 바이너리를 만듭니다.</target>
        </trans-unit>
        <trans-unit id="5472a88e6462dc9e30567cf6b7a816998c79c200" translate="yes" xml:space="preserve">
          <source>The following tokens act as keywords in modifier lists of declarations and can be used as identifiers in other contexts:</source>
          <target state="translated">다음 토큰은 수정 자 선언 목록에서 키워드 역할을하며 다른 컨텍스트에서 식별자로 사용될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="c62886b027ba800287b4be18a333a156fdeb309b" translate="yes" xml:space="preserve">
          <source>The following tokens act as keywords in the context when they are applicable and can be used as identifiers in other contexts:</source>
          <target state="translated">다음 토큰은 해당되는 경우 컨텍스트에서 키워드 역할을하며 다른 컨텍스트에서 식별자로 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="71c4c5ec356525034ad2f877a92ba2dfdfffc609" translate="yes" xml:space="preserve">
          <source>The following tokens are always interpreted as keywords and cannot be used as identifiers:</source>
          <target state="translated">다음 토큰은 항상 키워드로 해석되며 식별자로 사용할 수 없습니다.</target>
        </trans-unit>
        <trans-unit id="0493d41eaaff9f9930d4990e582a0014dff8b09e" translate="yes" xml:space="preserve">
          <source>The following workflow is expected when interacting with the native library.</source>
          <target state="translated">기본 라이브러리와 상호 작용할 때 다음과 같은 워크 플로우가 예상됩니다.</target>
        </trans-unit>
        <trans-unit id="41bde8cb095fdaa39e87c44d34bec8992402e368" translate="yes" xml:space="preserve">
          <source>The fractional part, if any, is rounded down towards zero. Returns zero if this &lt;code&gt;Double&lt;/code&gt; value is &lt;code&gt;NaN&lt;/code&gt;, &lt;a href=&quot;../-int/-m-i-n_-v-a-l-u-e#kotlin.Int.Companion%24MIN_VALUE&quot;&gt;Int.MIN_VALUE&lt;/a&gt; if it's less than &lt;code&gt;Int.MIN_VALUE&lt;/code&gt;, &lt;a href=&quot;../-int/-m-a-x_-v-a-l-u-e#kotlin.Int.Companion%24MAX_VALUE&quot;&gt;Int.MAX_VALUE&lt;/a&gt; if it's bigger than &lt;code&gt;Int.MAX_VALUE&lt;/code&gt;.</source>
          <target state="translated">분수 부분이있는 경우 0을 향해 내림됩니다. 반환이 경우 제로 &lt;code&gt;Double&lt;/code&gt; 값이 &lt;code&gt;NaN&lt;/code&gt; 의 , &lt;a href=&quot;../-int/-m-i-n_-v-a-l-u-e#kotlin.Int.Companion%24MIN_VALUE&quot;&gt;Int.MIN_VALUE&lt;/a&gt; 미만의 경우 &lt;code&gt;Int.MIN_VALUE&lt;/code&gt; , &lt;a href=&quot;../-int/-m-a-x_-v-a-l-u-e#kotlin.Int.Companion%24MAX_VALUE&quot;&gt;Int.MAX_VALUE&lt;/a&gt; 그것보다 더 큰 경우 &lt;code&gt;Int.MAX_VALUE&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="b7dbd577dd676bd08f82b2f5d51d9ac8e4bfc959" translate="yes" xml:space="preserve">
          <source>The fractional part, if any, is rounded down towards zero. Returns zero if this &lt;code&gt;Double&lt;/code&gt; value is &lt;code&gt;NaN&lt;/code&gt;, &lt;a href=&quot;../-long/-m-i-n_-v-a-l-u-e#kotlin.Long.Companion%24MIN_VALUE&quot;&gt;Long.MIN_VALUE&lt;/a&gt; if it's less than &lt;code&gt;Long.MIN_VALUE&lt;/code&gt;, &lt;a href=&quot;../-long/-m-a-x_-v-a-l-u-e#kotlin.Long.Companion%24MAX_VALUE&quot;&gt;Long.MAX_VALUE&lt;/a&gt; if it's bigger than &lt;code&gt;Long.MAX_VALUE&lt;/code&gt;.</source>
          <target state="translated">분수 부분이있는 경우 0을 향해 내림됩니다. 반환이 경우 제로 &lt;code&gt;Double&lt;/code&gt; 값이 &lt;code&gt;NaN&lt;/code&gt; 의 , &lt;a href=&quot;../-long/-m-i-n_-v-a-l-u-e#kotlin.Long.Companion%24MIN_VALUE&quot;&gt;Long.MIN_VALUE로부터&lt;/a&gt; 미만의 경우 &lt;code&gt;Long.MIN_VALUE&lt;/code&gt; 로부터 , &lt;a href=&quot;../-long/-m-a-x_-v-a-l-u-e#kotlin.Long.Companion%24MAX_VALUE&quot;&gt;로부터 Long.MAX_VALUE&lt;/a&gt; 그것보다 더 큰 경우 &lt;code&gt;Long.MAX_VALUE&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="7c24376936f310cfc6a2b02ee789c1ab9c4a079c" translate="yes" xml:space="preserve">
          <source>The fractional part, if any, is rounded down towards zero. Returns zero if this &lt;code&gt;Double&lt;/code&gt; value is negative or &lt;code&gt;NaN&lt;/code&gt;, &lt;a href=&quot;-u-int/-m-a-x_-v-a-l-u-e&quot;&gt;UInt.MAX_VALUE&lt;/a&gt; if it's bigger than &lt;code&gt;UInt.MAX_VALUE&lt;/code&gt;.</source>
          <target state="translated">분수 부분이있는 경우 0을 향해 내림됩니다. 이 &lt;code&gt;Double&lt;/code&gt; 값이 음수 이면 0을 반환하고 &lt;code&gt;NaN&lt;/code&gt; , &lt;a href=&quot;-u-int/-m-a-x_-v-a-l-u-e&quot;&gt;UInt.MAX_VALUE&lt;/a&gt; 보다 크면 &lt;code&gt;UInt.MAX_VALUE&lt;/code&gt; 를 반환 합니다.</target>
        </trans-unit>
        <trans-unit id="19ac86b4bcb26b195d587cd10aa019f5e68922bb" translate="yes" xml:space="preserve">
          <source>The fractional part, if any, is rounded down towards zero. Returns zero if this &lt;code&gt;Double&lt;/code&gt; value is negative or &lt;code&gt;NaN&lt;/code&gt;, &lt;a href=&quot;-u-long/-m-a-x_-v-a-l-u-e&quot;&gt;ULong.MAX_VALUE&lt;/a&gt; if it's bigger than &lt;code&gt;ULong.MAX_VALUE&lt;/code&gt;.</source>
          <target state="translated">분수 부분이있는 경우 0을 향해 내림됩니다. 이 &lt;code&gt;Double&lt;/code&gt; 값이 음수 이면 0을 반환하고 &lt;code&gt;NaN&lt;/code&gt; , &lt;a href=&quot;-u-long/-m-a-x_-v-a-l-u-e&quot;&gt;ULong.MAX_VALUE&lt;/a&gt; 보다 크면 &lt;code&gt;ULong.MAX_VALUE&lt;/code&gt; 를 반환 합니다.</target>
        </trans-unit>
        <trans-unit id="a03b953ac3fd08a46517db9b02880729ef0942e5" translate="yes" xml:space="preserve">
          <source>The fractional part, if any, is rounded down towards zero. Returns zero if this &lt;code&gt;Float&lt;/code&gt; value is &lt;code&gt;NaN&lt;/code&gt;, &lt;a href=&quot;../-int/-m-i-n_-v-a-l-u-e#kotlin.Int.Companion%24MIN_VALUE&quot;&gt;Int.MIN_VALUE&lt;/a&gt; if it's less than &lt;code&gt;Int.MIN_VALUE&lt;/code&gt;, &lt;a href=&quot;../-int/-m-a-x_-v-a-l-u-e#kotlin.Int.Companion%24MAX_VALUE&quot;&gt;Int.MAX_VALUE&lt;/a&gt; if it's bigger than &lt;code&gt;Int.MAX_VALUE&lt;/code&gt;.</source>
          <target state="translated">분수 부분이있는 경우 0을 향해 내림됩니다. 반환이 경우 제로 &lt;code&gt;Float&lt;/code&gt; 값이 &lt;code&gt;NaN&lt;/code&gt; 의 , &lt;a href=&quot;../-int/-m-i-n_-v-a-l-u-e#kotlin.Int.Companion%24MIN_VALUE&quot;&gt;Int.MIN_VALUE&lt;/a&gt; 그 이하의 경우 &lt;code&gt;Int.MIN_VALUE&lt;/code&gt; , &lt;a href=&quot;../-int/-m-a-x_-v-a-l-u-e#kotlin.Int.Companion%24MAX_VALUE&quot;&gt;Int.MAX_VALUE&lt;/a&gt; 그것보다 더 큰 경우 &lt;code&gt;Int.MAX_VALUE&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="f8f1f7669eb111859c7b969d69798041d2a9b37e" translate="yes" xml:space="preserve">
          <source>The fractional part, if any, is rounded down towards zero. Returns zero if this &lt;code&gt;Float&lt;/code&gt; value is &lt;code&gt;NaN&lt;/code&gt;, &lt;a href=&quot;../-long/-m-i-n_-v-a-l-u-e#kotlin.Long.Companion%24MIN_VALUE&quot;&gt;Long.MIN_VALUE&lt;/a&gt; if it's less than &lt;code&gt;Long.MIN_VALUE&lt;/code&gt;, &lt;a href=&quot;../-long/-m-a-x_-v-a-l-u-e#kotlin.Long.Companion%24MAX_VALUE&quot;&gt;Long.MAX_VALUE&lt;/a&gt; if it's bigger than &lt;code&gt;Long.MAX_VALUE&lt;/code&gt;.</source>
          <target state="translated">분수 부분이있는 경우 0을 향해 내림됩니다. 반환이 경우 제로 &lt;code&gt;Float&lt;/code&gt; 값이 &lt;code&gt;NaN&lt;/code&gt; 의 , &lt;a href=&quot;../-long/-m-i-n_-v-a-l-u-e#kotlin.Long.Companion%24MIN_VALUE&quot;&gt;Long.MIN_VALUE로부터&lt;/a&gt; 그 이하의 경우 &lt;code&gt;Long.MIN_VALUE&lt;/code&gt; 로부터 , &lt;a href=&quot;../-long/-m-a-x_-v-a-l-u-e#kotlin.Long.Companion%24MAX_VALUE&quot;&gt;로부터 Long.MAX_VALUE&lt;/a&gt; 그것보다 더 큰 경우 &lt;code&gt;Long.MAX_VALUE&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="43741e55696c4613d380e3f315ef0bfbfc2d96be" translate="yes" xml:space="preserve">
          <source>The fractional part, if any, is rounded down towards zero. Returns zero if this &lt;code&gt;Float&lt;/code&gt; value is negative or &lt;code&gt;NaN&lt;/code&gt;, &lt;a href=&quot;-u-int/-m-a-x_-v-a-l-u-e&quot;&gt;UInt.MAX_VALUE&lt;/a&gt; if it's bigger than &lt;code&gt;UInt.MAX_VALUE&lt;/code&gt;.</source>
          <target state="translated">분수 부분이있는 경우 0을 향해 내림됩니다. 이 &lt;code&gt;Float&lt;/code&gt; 값이 음수 이면 0 , &lt;code&gt;NaN&lt;/code&gt; , &lt;a href=&quot;-u-int/-m-a-x_-v-a-l-u-e&quot;&gt;UInt.MAX_VALUE&lt;/a&gt; 보다 크면 &lt;code&gt;UInt.MAX_VALUE&lt;/code&gt; 를 반환 합니다.</target>
        </trans-unit>
        <trans-unit id="3fd2c9a0fe0f333063fc214dadef0239e9bff9de" translate="yes" xml:space="preserve">
          <source>The fractional part, if any, is rounded down towards zero. Returns zero if this &lt;code&gt;Float&lt;/code&gt; value is negative or &lt;code&gt;NaN&lt;/code&gt;, &lt;a href=&quot;-u-long/-m-a-x_-v-a-l-u-e&quot;&gt;ULong.MAX_VALUE&lt;/a&gt; if it's bigger than &lt;code&gt;ULong.MAX_VALUE&lt;/code&gt;.</source>
          <target state="translated">분수 부분이있는 경우 0을 향해 내림됩니다. 이 &lt;code&gt;Float&lt;/code&gt; 값이 음수 이면 0을 반환하고 &lt;code&gt;NaN&lt;/code&gt; , &lt;a href=&quot;-u-long/-m-a-x_-v-a-l-u-e&quot;&gt;ULong.MAX_VALUE&lt;/a&gt; 보다 크면 &lt;code&gt;ULong.MAX_VALUE&lt;/code&gt; 를 반환 합니다.</target>
        </trans-unit>
        <trans-unit id="46d230bab2ec3e41d052e1e397afc7cc1e96642c" translate="yes" xml:space="preserve">
          <source>The fractional part, if any, is rounded down. Returns zero if this &lt;code&gt;Double&lt;/code&gt; value is &lt;code&gt;NaN&lt;/code&gt;, &lt;a href=&quot;../-int/-m-i-n_-v-a-l-u-e#kotlin.Int.Companion%24MIN_VALUE&quot;&gt;Int.MIN_VALUE&lt;/a&gt; if it's less than &lt;code&gt;Int.MIN_VALUE&lt;/code&gt;, &lt;a href=&quot;../-int/-m-a-x_-v-a-l-u-e#kotlin.Int.Companion%24MAX_VALUE&quot;&gt;Int.MAX_VALUE&lt;/a&gt; if it's bigger than &lt;code&gt;Int.MAX_VALUE&lt;/code&gt;.</source>
          <target state="translated">소수 부분은 반올림됩니다. 반환이 경우 제로 &lt;code&gt;Double&lt;/code&gt; 값이 &lt;code&gt;NaN&lt;/code&gt; 의 , &lt;a href=&quot;../-int/-m-i-n_-v-a-l-u-e#kotlin.Int.Companion%24MIN_VALUE&quot;&gt;Int.MIN_VALUE&lt;/a&gt; 미만의 경우 &lt;code&gt;Int.MIN_VALUE&lt;/code&gt; , &lt;a href=&quot;../-int/-m-a-x_-v-a-l-u-e#kotlin.Int.Companion%24MAX_VALUE&quot;&gt;Int.MAX_VALUE&lt;/a&gt; 그것보다 더 큰 경우 &lt;code&gt;Int.MAX_VALUE&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="c7c04cb487d62c119eaf78735ad59d58fbbea7f7" translate="yes" xml:space="preserve">
          <source>The fractional part, if any, is rounded down. Returns zero if this &lt;code&gt;Double&lt;/code&gt; value is &lt;code&gt;NaN&lt;/code&gt;, &lt;a href=&quot;../-long/-m-i-n_-v-a-l-u-e#kotlin.Long.Companion%24MIN_VALUE&quot;&gt;Long.MIN_VALUE&lt;/a&gt; if it's less than &lt;code&gt;Long.MIN_VALUE&lt;/code&gt;, &lt;a href=&quot;../-long/-m-a-x_-v-a-l-u-e#kotlin.Long.Companion%24MAX_VALUE&quot;&gt;Long.MAX_VALUE&lt;/a&gt; if it's bigger than &lt;code&gt;Long.MAX_VALUE&lt;/code&gt;.</source>
          <target state="translated">소수 부분은 반올림됩니다. 이 &lt;code&gt;Double&lt;/code&gt; 값이 &lt;code&gt;NaN&lt;/code&gt; 인 경우 0을 , &lt;a href=&quot;../-long/-m-i-n_-v-a-l-u-e#kotlin.Long.Companion%24MIN_VALUE&quot;&gt;Long.MIN_VALUE&lt;/a&gt; 보다 작은 경우 &lt;code&gt;Long.MIN_VALUE&lt;/code&gt; , &lt;a href=&quot;../-long/-m-a-x_-v-a-l-u-e#kotlin.Long.Companion%24MAX_VALUE&quot;&gt;Long.MAX_VALUE&lt;/a&gt; 보다 큰 경우 &lt;code&gt;Long.MAX_VALUE&lt;/code&gt; 를 리턴합니다 .</target>
        </trans-unit>
        <trans-unit id="986d603361e48796a38eb31b882249f0e0fb1907" translate="yes" xml:space="preserve">
          <source>The fractional part, if any, is rounded down. Returns zero if this &lt;code&gt;Double&lt;/code&gt; value is negative or &lt;code&gt;NaN&lt;/code&gt;, &lt;a href=&quot;-u-int/-m-a-x_-v-a-l-u-e&quot;&gt;UInt.MAX_VALUE&lt;/a&gt; if it's bigger than &lt;code&gt;UInt.MAX_VALUE&lt;/code&gt;.</source>
          <target state="translated">소수 부분은 반올림됩니다. 이 &lt;code&gt;Double&lt;/code&gt; 값이 음수 이면 0을 &lt;code&gt;NaN&lt;/code&gt; 하고 &lt;a href=&quot;-u-int/-m-a-x_-v-a-l-u-e&quot;&gt;UInt.MAX_VALUE&lt;/a&gt; 보다 큰 경우 &lt;code&gt;UInt.MAX_VALUE&lt;/code&gt; 를 반환 합니다.</target>
        </trans-unit>
        <trans-unit id="db89446a546caa08c045751959e85b9b42af6661" translate="yes" xml:space="preserve">
          <source>The fractional part, if any, is rounded down. Returns zero if this &lt;code&gt;Double&lt;/code&gt; value is negative or &lt;code&gt;NaN&lt;/code&gt;, &lt;a href=&quot;-u-long/-m-a-x_-v-a-l-u-e&quot;&gt;ULong.MAX_VALUE&lt;/a&gt; if it's bigger than &lt;code&gt;ULong.MAX_VALUE&lt;/code&gt;.</source>
          <target state="translated">소수 부분은 반올림됩니다. 이 &lt;code&gt;Double&lt;/code&gt; 값이 음수 이면 0을 &lt;code&gt;NaN&lt;/code&gt; 하고 &lt;a href=&quot;-u-long/-m-a-x_-v-a-l-u-e&quot;&gt;ULong.MAX_VALUE&lt;/a&gt; 보다 큰 경우 &lt;code&gt;ULong.MAX_VALUE&lt;/code&gt; 를 반환 합니다.</target>
        </trans-unit>
        <trans-unit id="6c0d7df43097a38a432b999c674eaa178ec96a50" translate="yes" xml:space="preserve">
          <source>The fractional part, if any, is rounded down. Returns zero if this &lt;code&gt;Float&lt;/code&gt; value is &lt;code&gt;NaN&lt;/code&gt;, &lt;a href=&quot;../-int/-m-i-n_-v-a-l-u-e#kotlin.Int.Companion%24MIN_VALUE&quot;&gt;Int.MIN_VALUE&lt;/a&gt; if it's less than &lt;code&gt;Int.MIN_VALUE&lt;/code&gt;, &lt;a href=&quot;../-int/-m-a-x_-v-a-l-u-e#kotlin.Int.Companion%24MAX_VALUE&quot;&gt;Int.MAX_VALUE&lt;/a&gt; if it's bigger than &lt;code&gt;Int.MAX_VALUE&lt;/code&gt;.</source>
          <target state="translated">소수 부분은 반올림됩니다. 반환이 경우 제로 &lt;code&gt;Float&lt;/code&gt; 값이 &lt;code&gt;NaN&lt;/code&gt; 의 , &lt;a href=&quot;../-int/-m-i-n_-v-a-l-u-e#kotlin.Int.Companion%24MIN_VALUE&quot;&gt;Int.MIN_VALUE&lt;/a&gt; 그 이하의 경우 &lt;code&gt;Int.MIN_VALUE&lt;/code&gt; , &lt;a href=&quot;../-int/-m-a-x_-v-a-l-u-e#kotlin.Int.Companion%24MAX_VALUE&quot;&gt;Int.MAX_VALUE&lt;/a&gt; 그것보다 더 큰 경우 &lt;code&gt;Int.MAX_VALUE&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="234cddb40ea7edc20ba16f302fd45e435a6a6dbf" translate="yes" xml:space="preserve">
          <source>The fractional part, if any, is rounded down. Returns zero if this &lt;code&gt;Float&lt;/code&gt; value is &lt;code&gt;NaN&lt;/code&gt;, &lt;a href=&quot;../-long/-m-i-n_-v-a-l-u-e#kotlin.Long.Companion%24MIN_VALUE&quot;&gt;Long.MIN_VALUE&lt;/a&gt; if it's less than &lt;code&gt;Long.MIN_VALUE&lt;/code&gt;, &lt;a href=&quot;../-long/-m-a-x_-v-a-l-u-e#kotlin.Long.Companion%24MAX_VALUE&quot;&gt;Long.MAX_VALUE&lt;/a&gt; if it's bigger than &lt;code&gt;Long.MAX_VALUE&lt;/code&gt;.</source>
          <target state="translated">소수 부분은 반올림됩니다. 반환이 경우 제로 &lt;code&gt;Float&lt;/code&gt; 값이 &lt;code&gt;NaN&lt;/code&gt; 의 , &lt;a href=&quot;../-long/-m-i-n_-v-a-l-u-e#kotlin.Long.Companion%24MIN_VALUE&quot;&gt;Long.MIN_VALUE로부터&lt;/a&gt; 그 이하의 경우 &lt;code&gt;Long.MIN_VALUE&lt;/code&gt; 로부터 , &lt;a href=&quot;../-long/-m-a-x_-v-a-l-u-e#kotlin.Long.Companion%24MAX_VALUE&quot;&gt;로부터 Long.MAX_VALUE&lt;/a&gt; 그것보다 더 큰 경우 &lt;code&gt;Long.MAX_VALUE&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="0a1bb43be34e6fb6de623932b67b670ae0006852" translate="yes" xml:space="preserve">
          <source>The fractional part, if any, is rounded down. Returns zero if this &lt;code&gt;Float&lt;/code&gt; value is negative or &lt;code&gt;NaN&lt;/code&gt;, &lt;a href=&quot;-u-int/-m-a-x_-v-a-l-u-e&quot;&gt;UInt.MAX_VALUE&lt;/a&gt; if it's bigger than &lt;code&gt;UInt.MAX_VALUE&lt;/code&gt;.</source>
          <target state="translated">소수 부분은 반올림됩니다. 이 &lt;code&gt;Float&lt;/code&gt; 값이 음수 인 경우 0을 &lt;code&gt;NaN&lt;/code&gt; 하고 &lt;a href=&quot;-u-int/-m-a-x_-v-a-l-u-e&quot;&gt;UInt.MAX_VALUE&lt;/a&gt; 보다 큰 경우 &lt;code&gt;UInt.MAX_VALUE&lt;/code&gt; 를 반환 합니다.</target>
        </trans-unit>
        <trans-unit id="1fdd0d739f0100ce802b95ab4a4c9b2532feeff0" translate="yes" xml:space="preserve">
          <source>The fractional part, if any, is rounded down. Returns zero if this &lt;code&gt;Float&lt;/code&gt; value is negative or &lt;code&gt;NaN&lt;/code&gt;, &lt;a href=&quot;-u-long/-m-a-x_-v-a-l-u-e&quot;&gt;ULong.MAX_VALUE&lt;/a&gt; if it's bigger than &lt;code&gt;ULong.MAX_VALUE&lt;/code&gt;.</source>
          <target state="translated">소수 부분은 반올림됩니다. 이 경우 0을 반환 &lt;code&gt;Float&lt;/code&gt; 값이 음수이거나 &lt;code&gt;NaN&lt;/code&gt; 의 , &lt;a href=&quot;-u-long/-m-a-x_-v-a-l-u-e&quot;&gt;ULong.MAX_VALUE&lt;/a&gt; 그것보다 더 큰 경우 &lt;code&gt;ULong.MAX_VALUE&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="ea6eb6722ce134e1e96c66df47559354876af311" translate="yes" xml:space="preserve">
          <source>The framework that we compiled with Kotlin/Native has helper attributes to make it easier to use with Swift. Let's convert the previous Objective-C example into Swift. As a result, we'll have the following code in &lt;code&gt;main.swift&lt;/code&gt;:</source>
          <target state="translated">우리가 Kotlin / Native로 컴파일 한 프레임 워크에는 Swift에서 더 쉽게 사용할 수 있도록 돕는 속성이 있습니다. 이전 Objective-C 예제를 Swift로 변환 해 봅시다. 결과적으로 &lt;code&gt;main.swift&lt;/code&gt; 에 다음 코드가 생깁니다 .</target>
        </trans-unit>
        <trans-unit id="229775820ba0ca0053d7b140e68dd9b3ed428ae4" translate="yes" xml:space="preserve">
          <source>The full build script for the sample project can be found &lt;a href=&quot;https://github.com/JetBrains/kotlin-examples/tree/master/gradle/kotlin-dagger/build.gradle&quot;&gt;here&lt;/a&gt;. You can also look at the converted code for &lt;a href=&quot;https://github.com/JetBrains/kotlin-examples/tree/master/gradle/android-dagger&quot;&gt;the Android sample&lt;/a&gt;.</source>
          <target state="translated">샘플 프로젝트의 전체 빌드 스크립트는 &lt;a href=&quot;https://github.com/JetBrains/kotlin-examples/tree/master/gradle/kotlin-dagger/build.gradle&quot;&gt;여기&lt;/a&gt; 에서 찾을 수 있습니다 . 당신은 또한 &lt;a href=&quot;https://github.com/JetBrains/kotlin-examples/tree/master/gradle/android-dagger&quot;&gt;안드로이드 샘플에&lt;/a&gt; 대한 변환 된 코드를 볼 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="e62bc4cb51ca1d1cddfe4e1d3d510caa93dee388" translate="yes" xml:space="preserve">
          <source>The full list of arguments that can be used is shown when you run &lt;code&gt;kotlinc -help&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;kotlinc -help&lt;/code&gt; 를 실행할 때 사용할 수있는 전체 인수 목록이 표시됩니다 .</target>
        </trans-unit>
        <trans-unit id="02b69f589be9184eaa6e08d9fb77b12e7b2d6da2" translate="yes" xml:space="preserve">
          <source>The full list of supported use-site targets is:</source>
          <target state="translated">지원되는 사용 사이트 대상의 전체 목록은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="58018a7c2f7cccce2f2841705c78d55576a7e56f" translate="yes" xml:space="preserve">
          <source>The full syntactic form of lambda expressions is as follows:</source>
          <target state="translated">람다 식의 전체 구문 형태는 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="1347221f9ac10fa3f9465e07c5ca87cc27e8a8e6" translate="yes" xml:space="preserve">
          <source>The full syntax for declaring a property is</source>
          <target state="translated">속성을 선언하는 전체 구문은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="905c760b34a0beb7b5d4d319c2f007dd8ebd0fd3" translate="yes" xml:space="preserve">
          <source>The full syntax of a read-only property declaration differs from a mutable one in two ways: it starts with &lt;code&gt;val&lt;/code&gt; instead of &lt;code&gt;var&lt;/code&gt; and does not allow a setter:</source>
          <target state="translated">읽기 전용 속성 선언의 전체 구문은 다음 두 가지 측면에서 변경 가능한 것과 다릅니다. &lt;code&gt;var&lt;/code&gt; 대신 &lt;code&gt;val&lt;/code&gt; 로 시작 하고 setter를 허용하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="776f7d695f882be224aebfaccabd52b1c0591bc5" translate="yes" xml:space="preserve">
          <source>The fully qualified dot-separated name of the class, or &lt;code&gt;null&lt;/code&gt; if the class is local or a class of an anonymous object.</source>
          <target state="translated">점으로 구분 된 클래스의 정규화 된 이름입니다 . 클래스가 로컬이거나 익명 개체의 클래스 인 경우 &lt;code&gt;null&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="0ee52f844a0963f3db9f0478ccd20b13916c48b9" translate="yes" xml:space="preserve">
          <source>The fully qualified dot-separated name of the class, or &lt;code&gt;null&lt;/code&gt; if the class is local or it is an anonymous object literal.</source>
          <target state="translated">정규화 된 점으로 구분 된 클래스 이름이거나 클래스가 로컬이거나 익명 객체 리터럴 인 경우 &lt;code&gt;null&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="9a3f03ea2de9956cfc95db69b9cc7f09e01c1b79" translate="yes" xml:space="preserve">
          <source>The fully qualified name of the Kotlin Multiplatform Gradle plugin is &lt;code&gt;org.jetbrains.kotlin.multiplatform&lt;/code&gt;. If you use the Kotlin Gradle DSL, you can apply the plugin with &lt;code&gt;kotlin(&amp;ldquo;multiplatform&amp;rdquo;)&lt;/code&gt;. The plugin versions match the Kotlin release versions. The most recent version is 1.4.10.</source>
          <target state="translated">Kotlin Multiplatform Gradle 플러그인의 정규화 된 이름은 &lt;code&gt;org.jetbrains.kotlin.multiplatform&lt;/code&gt; 입니다. Kotlin Gradle DSL을 사용하는 경우 &lt;code&gt;kotlin(&amp;ldquo;multiplatform&amp;rdquo;)&lt;/code&gt; 플러그인을 적용 할 수 있습니다 . 플러그인 버전은 Kotlin 출시 버전과 일치합니다. 최신 버전은 1.4.10입니다.</target>
        </trans-unit>
        <trans-unit id="f6c5b38e497b6843a07b1a8945d528e3c7606264" translate="yes" xml:space="preserve">
          <source>The function &lt;a href=&quot;-list#kotlin.collections%24List(kotlin.Int,%20kotlin.Function1((kotlin.Int,%20kotlin.collections.List.T)))/init&quot;&gt;init&lt;/a&gt; is called for each list element sequentially starting from the first one. It should return the value for a list element given its index.</source>
          <target state="translated">&lt;a href=&quot;-list#kotlin.collections%24List(kotlin.Int,%20kotlin.Function1((kotlin.Int,%20kotlin.collections.List.T)))/init&quot;&gt;init&lt;/a&gt; 함수 는 첫 번째 요소부터 순차적으로 각 목록 요소에 대해 호출됩니다. 인덱스가 주어진 목록 요소의 값을 반환해야합니다.</target>
        </trans-unit>
        <trans-unit id="7696926a08823163fe79a297a106aabaf3f3d399" translate="yes" xml:space="preserve">
          <source>The function &lt;a href=&quot;-mutable-list#kotlin.collections%24MutableList(kotlin.Int,%20kotlin.Function1((kotlin.Int,%20kotlin.collections.MutableList.T)))/init&quot;&gt;init&lt;/a&gt; is called for each list element sequentially starting from the first one. It should return the value for a list element given its index.</source>
          <target state="translated">&lt;a href=&quot;-mutable-list#kotlin.collections%24MutableList(kotlin.Int,%20kotlin.Function1((kotlin.Int,%20kotlin.collections.MutableList.T)))/init&quot;&gt;init&lt;/a&gt; 함수 는 첫 번째 요소부터 순차적으로 각 목록 요소에 대해 호출됩니다. 인덱스가 주어진 목록 요소의 값을 반환해야합니다.</target>
        </trans-unit>
        <trans-unit id="ed3c35965fc33462a41df8d6c5d69d9f13434071" translate="yes" xml:space="preserve">
          <source>The function &lt;a href=&quot;-u-byte-array#kotlin%24UByteArray(kotlin.Int,%20kotlin.Function1((kotlin.Int,%20kotlin.UByte)))/init&quot;&gt;init&lt;/a&gt; is called for each array element sequentially starting from the first one. It should return the value for an array element given its index.</source>
          <target state="translated">&lt;a href=&quot;-u-byte-array#kotlin%24UByteArray(kotlin.Int,%20kotlin.Function1((kotlin.Int,%20kotlin.UByte)))/init&quot;&gt;init&lt;/a&gt; 함수 는 첫 번째 요소부터 순차적으로 각 배열 요소에 대해 호출됩니다. 인덱스가 주어진 배열 요소의 값을 반환해야합니다.</target>
        </trans-unit>
        <trans-unit id="acfbb507b912e298abe7a785c884c806da178f93" translate="yes" xml:space="preserve">
          <source>The function &lt;a href=&quot;-u-int-array#kotlin%24UIntArray(kotlin.Int,%20kotlin.Function1((kotlin.Int,%20kotlin.UInt)))/init&quot;&gt;init&lt;/a&gt; is called for each array element sequentially starting from the first one. It should return the value for an array element given its index.</source>
          <target state="translated">&lt;a href=&quot;-u-int-array#kotlin%24UIntArray(kotlin.Int,%20kotlin.Function1((kotlin.Int,%20kotlin.UInt)))/init&quot;&gt;init&lt;/a&gt; 함수 는 첫 번째 요소부터 순차적으로 각 배열 요소에 대해 호출됩니다. 인덱스가 주어진 배열 요소의 값을 반환해야합니다.</target>
        </trans-unit>
        <trans-unit id="804f600305f25777086b4066f40ae2670855676b" translate="yes" xml:space="preserve">
          <source>The function &lt;a href=&quot;-u-long-array#kotlin%24ULongArray(kotlin.Int,%20kotlin.Function1((kotlin.Int,%20kotlin.ULong)))/init&quot;&gt;init&lt;/a&gt; is called for each array element sequentially starting from the first one. It should return the value for an array element given its index.</source>
          <target state="translated">&lt;a href=&quot;-u-long-array#kotlin%24ULongArray(kotlin.Int,%20kotlin.Function1((kotlin.Int,%20kotlin.ULong)))/init&quot;&gt;init&lt;/a&gt; 함수 는 첫 번째 요소부터 순차적으로 각 배열 요소에 대해 호출됩니다. 인덱스가 주어진 배열 요소의 값을 반환해야합니다.</target>
        </trans-unit>
        <trans-unit id="98c90b068891a2e0a90f241b535756a6f3e22982" translate="yes" xml:space="preserve">
          <source>The function &lt;a href=&quot;-u-short-array#kotlin%24UShortArray(kotlin.Int,%20kotlin.Function1((kotlin.Int,%20kotlin.UShort)))/init&quot;&gt;init&lt;/a&gt; is called for each array element sequentially starting from the first one. It should return the value for an array element given its index.</source>
          <target state="translated">&lt;a href=&quot;-u-short-array#kotlin%24UShortArray(kotlin.Int,%20kotlin.Function1((kotlin.Int,%20kotlin.UShort)))/init&quot;&gt;init&lt;/a&gt; 함수 는 첫 번째 요소부터 순차적으로 각 배열 요소에 대해 호출됩니다. 인덱스가 주어진 배열 요소의 값을 반환해야합니다.</target>
        </trans-unit>
        <trans-unit id="39a40c87789f813fc496dc5468cc91805583814e" translate="yes" xml:space="preserve">
          <source>The function &lt;code&gt;libnative_symbols&lt;/code&gt; allows us to open the way from the native code to the Kotlin/Native library. This is the entry point we use. The library name is used as a prefix for the function name.</source>
          <target state="translated">&lt;code&gt;libnative_symbols&lt;/code&gt; 함수를 사용하면 원시 코드에서 Kotlin / Native 라이브러리로가는 길을 열 수 있습니다. 이것이 우리가 사용하는 진입 점입니다. 라이브러리 이름은 함수 이름의 접두사로 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="ecf68a80d3d421d1a3dac0bf6a7b99795040c5e0" translate="yes" xml:space="preserve">
          <source>The function body is delimited by curly braces - indentation is generally not significant in Kotlin, but you should of course indent your code properly for the benefit of human readers.</source>
          <target state="translated">함수 본문은 중괄호로 구분됩니다. 들여 쓰기는 일반적으로 Kotlin에서 중요하지 않지만, 인간 독자의 이익을 위해 코드를 올바르게 들여 쓰기해야합니다.</target>
        </trans-unit>
        <trans-unit id="892b57cbc7486be03e2291de2837204f537e592b" translate="yes" xml:space="preserve">
          <source>The function does upgrade from read to write lock if needed, but this upgrade is not atomic as such upgrade is not supported by &lt;a href=&quot;http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/locks/ReentrantReadWriteLock.html&quot;&gt;ReentrantReadWriteLock&lt;/a&gt;. In order to do such upgrade this function first releases all read locks held by this thread, then acquires write lock, and after releasing it acquires read locks back again.</source>
          <target state="translated">이 기능은 필요한 경우 읽기에서 쓰기 잠금으로 업그레이드하지만 &lt;a href=&quot;http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/locks/ReentrantReadWriteLock.html&quot;&gt;ReentrantReadWriteLock&lt;/a&gt; 은 해당 업그레이드를 지원하지 않으므로이 업그레이드는 원 자성이 아닙니다 . 이러한 업그레이드를 수행하기 위해이 기능은 먼저이 스레드가 보유한 모든 읽기 잠금을 해제 한 다음 쓰기 잠금을 획득 한 후 해제 한 후 다시 읽기 잠금을 획득합니다.</target>
        </trans-unit>
        <trans-unit id="41eab38f14ba2d1160f8a85b6cc897eb549e21ad" translate="yes" xml:space="preserve">
          <source>The function does upgrade from read to write lock if needed, but this upgrade is not atomic as such upgrade is not supported by &lt;a href=&quot;https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/locks/ReentrantReadWriteLock.html&quot;&gt;ReentrantReadWriteLock&lt;/a&gt;. In order to do such upgrade this function first releases all read locks held by this thread, then acquires write lock, and after releasing it acquires read locks back again.</source>
          <target state="translated">이 함수는 필요한 경우 읽기에서 쓰기 잠금으로 업그레이드하지만 이러한 업그레이드는 &lt;a href=&quot;https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/locks/ReentrantReadWriteLock.html&quot;&gt;ReentrantReadWriteLock에서&lt;/a&gt; 지원되지 않으므로이 업그레이드는 원 자성이 아닙니다 . 이러한 업그레이드를 수행하기 위해이 함수는 먼저이 스레드가 보유한 모든 읽기 잠금을 해제 한 다음 쓰기 잠금을 획득하고 해제 한 후 다시 읽기 잠금을 획득합니다.</target>
        </trans-unit>
        <trans-unit id="11c5bbd79a2512e469db0fde4da38bfd3abb594c" translate="yes" xml:space="preserve">
          <source>The function init is called for each array element sequentially starting from the first one. It should return the value for an array element given its index.</source>
          <target state="translated">init 함수는 첫 번째 요소부터 순차적으로 각 배열 요소에 대해 호출됩니다. 인덱스가 주어진 배열 요소의 값을 반환해야합니다.</target>
        </trans-unit>
        <trans-unit id="47e9d14611b3a1f9114880a2ff853190d9e97c10" translate="yes" xml:space="preserve">
          <source>The function signature remains exactly the same. The only difference is &lt;code&gt;suspend&lt;/code&gt; being added to it. The return type however is the type we want to be returned.</source>
          <target state="translated">함수 서명은 정확히 동일하게 유지됩니다. 유일한 차이점은 &lt;code&gt;suspend&lt;/code&gt; 이 추가되는 것입니다. 그러나 반환 유형은 반환하려는 유형입니다.</target>
        </trans-unit>
        <trans-unit id="f6772ad37911fb29515e5ecad2f466bed6bdb7cd" translate="yes" xml:space="preserve">
          <source>The function type notation can optionally include names for the function parameters: &lt;code&gt;(x: Int, y: Int) -&amp;gt; Point&lt;/code&gt;. These names can be used for documenting the meaning of the parameters.</source>
          <target state="translated">함수 유형 표기법은 선택적으로 함수 매개 변수의 이름을 포함 할 수 있습니다 : &lt;code&gt;(x: Int, y: Int) -&amp;gt; Point&lt;/code&gt; . 이 이름은 매개 변수의 의미를 문서화하는 데 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="5f62a960bb01edb991f086fcecfa3233b3994fce" translate="yes" xml:space="preserve">
          <source>The functions include trigonometric, hyperbolic, exponentiation and power, logarithmic, rounding, sign and absolute value.</source>
          <target state="translated">함수에는 삼각법, 쌍곡선, 지수 및 거듭 제곱, 로그, 반올림, 부호 및 절대 값이 포함됩니다.</target>
        </trans-unit>
        <trans-unit id="332c4fb906dbcda140f018d0de201e8c1ce3d30d" translate="yes" xml:space="preserve">
          <source>The general rule is: when a type parameter &lt;code&gt;T&lt;/code&gt; of a class &lt;code&gt;C&lt;/code&gt; is declared &lt;strong&gt;out&lt;/strong&gt;, it may occur only in &lt;strong&gt;out&lt;/strong&gt;-position in the members of &lt;code&gt;C&lt;/code&gt;, but in return &lt;code&gt;C&amp;lt;Base&amp;gt;&lt;/code&gt; can safely be a supertype of &lt;code&gt;C&amp;lt;Derived&amp;gt;&lt;/code&gt;.</source>
          <target state="translated">일반적인 규칙은 다음과 같습니다 매개 변수 유형 때 &lt;code&gt;T&lt;/code&gt; 클래스의 &lt;code&gt;C&lt;/code&gt; 가 선언 &lt;strong&gt;밖으로&lt;/strong&gt; , 그것은 단지에서 발생할 수있는 &lt;strong&gt;아웃&lt;/strong&gt; 의 구성원의 &amp;alpha; 위치 &lt;code&gt;C&lt;/code&gt; ,하지만 반환에 &lt;code&gt;C&amp;lt;Base&amp;gt;&lt;/code&gt; 안전의 슈퍼 될 수있다 &lt;code&gt;C&amp;lt;Derived&amp;gt;&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="47a803852f9a44b2a9ede00ebab7d2f5f19ab5c5" translate="yes" xml:space="preserve">
          <source>The general rule:</source>
          <target state="translated">일반적인 규칙 :</target>
        </trans-unit>
        <trans-unit id="39d2229c00faf1c133ef862b873c7364c63bd099" translate="yes" xml:space="preserve">
          <source>The general solution that works both for threads and for coroutines is to use a thread-safe (aka synchronized, linearizable, or atomic) data structure that provides all the necessarily synchronization for the corresponding operations that needs to be performed on a shared state. In the case of a simple counter we can use &lt;code&gt;AtomicInteger&lt;/code&gt; class which has atomic &lt;code&gt;incrementAndGet&lt;/code&gt; operations:</source>
          <target state="translated">스레드와 코 루틴 모두에서 작동하는 일반적인 솔루션은 공유 상태에서 수행해야하는 해당 작업에 필요한 모든 동기화를 제공하는 스레드 안전 (일명 동기화, 선형화 또는 원자) 데이터 구조를 사용하는 것입니다. 간단한 카운터의 경우 &lt;code&gt;AtomicInteger&lt;/code&gt; 클래스를 사용하여 atomic &lt;code&gt;incrementAndGet&lt;/code&gt; 작업을 수행 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="4e700b89372f9cc694759aa68e2252618aa967c7" translate="yes" xml:space="preserve">
          <source>The general solution that works both for threads and for coroutines is to use a thread-safe (aka synchronized, linearizable, or atomic) data structure that provides all the necessary synchronization for the corresponding operations that needs to be performed on a shared state. In the case of a simple counter we can use &lt;code&gt;AtomicInteger&lt;/code&gt; class which has atomic &lt;code&gt;incrementAndGet&lt;/code&gt; operations:</source>
          <target state="translated">스레드와 코 루틴 모두에 대해 작동하는 일반적인 솔루션은 공유 상태에서 수행해야하는 해당 작업에 필요한 모든 동기화를 제공하는 스레드로부터 안전한 (동기화, 선형화 가능 또는 원자 적) 데이터 구조를 사용하는 것입니다. 간단한 카운터의 경우 원자 &lt;code&gt;incrementAndGet&lt;/code&gt; 연산 이있는 &lt;code&gt;AtomicInteger&lt;/code&gt; 클래스를 사용할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="fe194a34c4e181902ef2477861ca1a56a0c14e72" translate="yes" xml:space="preserve">
          <source>The generated constructor is synthetic so it can&amp;rsquo;t be directly called from Java or Kotlin, but it can be called using reflection.</source>
          <target state="translated">생성 된 생성자는 합성이므로 Java 또는 Kotlin에서 직접 호출 할 수 없지만 리플렉션을 사용하여 호출 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="f1c090136ed2d646f1aaf5e8051668e02cbe39d2" translate="yes" xml:space="preserve">
          <source>The generation of TypeScript declaration files is a feature exclusive to the IR compiler, and is in active development. If you run into any problems, please submit them to the Kotlin &lt;a href=&quot;https://youtrack.jetbrains.com/issues?q=%23%7BKJS:%20d.ts%20generation%7D&quot;&gt;issue tracker&lt;/a&gt; or vote for submitted issues that impact you.</source>
          <target state="translated">TypeScript 선언 파일 생성은 IR 컴파일러 전용 기능이며 현재 개발 중입니다. 문제가 발생하면 Kotlin &lt;a href=&quot;https://youtrack.jetbrains.com/issues?q=%23%7BKJS:%20d.ts%20generation%7D&quot;&gt;문제 추적기&lt;/a&gt; 에 제출하거나 제출 된 문제에 대해 투표 해주세요 .</target>
        </trans-unit>
        <trans-unit id="c09ea74ea1b03fd685bbe5f94354a8374db022b3" translate="yes" xml:space="preserve">
          <source>The getter of this property, used to obtain the value of the property.</source>
          <target state="translated">이 프로퍼티의 getter. 프로퍼티의 값을 취득하는데 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="5599725590a9016e21ca4310f17eb7b2b01a0483" translate="yes" xml:space="preserve">
          <source>The globs are applied to the header paths relative to the appropriate include path elements, e.g. &lt;code&gt;time.h&lt;/code&gt; or &lt;code&gt;curl/curl.h&lt;/code&gt;. So if the library is usually included with &lt;code&gt;#include &amp;lt;SomeLbrary/Header.h&amp;gt;&lt;/code&gt;, then it would probably be correct to filter headers with</source>
          <target state="translated">글로브는 적절한 포함 경로 요소, 예를 들어 &lt;code&gt;time.h&lt;/code&gt; 또는 &lt;code&gt;curl/curl.h&lt;/code&gt; 와 관련하여 헤더 경로에 적용됩니다 . 따라서 라이브러리가 일반적으로 &lt;code&gt;#include &amp;lt;SomeLbrary/Header.h&amp;gt;&lt;/code&gt; 에 포함되어 있으면 헤더를 필터링하는 것이 좋습니다.</target>
        </trans-unit>
        <trans-unit id="a57ffec5971f7b3f89d004ca095f66feb86eb296" translate="yes" xml:space="preserve">
          <source>The goal of the tutorial is to demonstrate Kotlin code re-use between Android and iOS. Let's start by manually creating the &lt;code&gt;SharedCode&lt;/code&gt; sub-project in our Gradle project. The source code from the &lt;code&gt;SharedCode&lt;/code&gt; project will be shared between platforms. We will create several new files in our project to implement that.</source>
          <target state="translated">이 튜토리얼의 목표는 Android와 iOS 간의 Kotlin 코드 재사용을 보여주는 것입니다. Gradle 프로젝트에서 &lt;code&gt;SharedCode&lt;/code&gt; 하위 프로젝트를 수동으로 생성하여 시작하겠습니다 . &lt;code&gt;SharedCode&lt;/code&gt; 프로젝트 의 소스 코드 는 플랫폼간에 공유됩니다. 이를 구현하기 위해 프로젝트에 여러 개의 새 파일을 작성합니다.</target>
        </trans-unit>
        <trans-unit id="bae5238fdeabbfa885f39de71e3a42ab3917db13" translate="yes" xml:space="preserve">
          <source>The good thing about common code is that it can be covered with common tests, which later are compiled and executed on &lt;em&gt;every&lt;/em&gt; platform.</source>
          <target state="translated">공통 코드의 좋은 점은 나중에 &lt;em&gt;모든&lt;/em&gt; 플랫폼 에서 컴파일되고 실행되는 공통 테스트로 다룰 수 있다는 것 입니다.</target>
        </trans-unit>
        <trans-unit id="068a964193217c327091688b8b7de38e4eb4f3e1" translate="yes" xml:space="preserve">
          <source>The header files merely contain function declarations for functionality that is defined at runtime. For instance, we could define a &lt;code&gt;jQuery&lt;/code&gt; function like so</source>
          <target state="translated">헤더 파일에는 런타임시 정의 된 기능에 대한 함수 선언 만 포함됩니다. 예를 들어, &lt;code&gt;jQuery&lt;/code&gt; 함수를 다음과 같이 정의 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="6ce2e166fe215303244aa3044be29e2844cbf2bc" translate="yes" xml:space="preserve">
          <source>The iOS simulator requires a framework compiled for the &lt;code&gt;ios_x64&lt;/code&gt; target, the &lt;code&gt;iOS_sim&lt;/code&gt; folder in our case.</source>
          <target state="translated">iOS 시뮬레이터에는 우리의 경우 &lt;code&gt;iOS_sim&lt;/code&gt; 폴더 인 &lt;code&gt;ios_x64&lt;/code&gt; 대상을 위해 컴파일 된 프레임 워크가 필요합니다 .</target>
        </trans-unit>
        <trans-unit id="31859b6cbcfb9892316b62d967e1f5ae2235d5ef" translate="yes" xml:space="preserve">
          <source>The idea behind Rx is to move towards what's called &lt;code&gt;observable streams&lt;/code&gt; where by we now think of data as streams (infinite amounts of data) and these streams can be observed. In practical terms, Rx is simply the &lt;a href=&quot;https://en.wikipedia.org/wiki/Observer_pattern&quot;&gt;Observer Pattern&lt;/a&gt; with a series of extensions which allow us to operate on the data.</source>
          <target state="translated">Rx의 기본 개념 은 데이터를 스트림 (무한량의 데이터)으로 생각하고이 스트림을 관찰 할 수있는 관찰 &lt;code&gt;observable streams&lt;/code&gt; 이동하는 것입니다. 실제로 Rx는 단순히 데이터를 조작 할 수있는 일련의 확장 기능을 가진 &lt;a href=&quot;https://en.wikipedia.org/wiki/Observer_pattern&quot;&gt;Observer 패턴&lt;/a&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="a752acd40500d4af1aa6897c4527c1276e603455" translate="yes" xml:space="preserve">
          <source>The idea behind futures or promises (there are also other terms these can be referred to depending on language/platform), is that when we make a call, we're promised that at some point it will return with an object called a Promise, which can then be operated on.</source>
          <target state="translated">선물이나 약속 뒤에있는 아이디어 (언어 / 플랫폼에 따라 다른 용어가있을 수도 있음)는 전화를 걸 때 언젠가 약속이라는 물건으로 돌아올 것이라고 약속합니다. 그런 다음 작동 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="0ec5a5ec78c5bbba1d9a9593b45aa36ac04ad75c" translate="yes" xml:space="preserve">
          <source>The idea is to make every platform show similar text: &lt;code&gt;Kotlin Rocks on Android&lt;/code&gt; and &lt;code&gt;Kotlin Rocks on iOS&lt;/code&gt;, depending on the platform. We will reuse the way we generate the message. Let's create the file (and missing directories) &lt;code&gt;SharedCode/src/commonMain/kotlin/common.kt&lt;/code&gt; with the following contents under the project root directory</source>
          <target state="translated">: 아이디어는 모든 플랫폼이 유사한 텍스트를 표시하는 것입니다 &lt;code&gt;Kotlin Rocks on Android&lt;/code&gt; 와 &lt;code&gt;Kotlin Rocks on iOS&lt;/code&gt; 플랫폼에 따라. 메시지 생성 방식을 재사용 할 것입니다. 프로젝트 루트 디렉토리 아래에 다음 내용으로 파일 (및 누락 된 디렉토리) &lt;code&gt;SharedCode/src/commonMain/kotlin/common.kt&lt;/code&gt; 를 작성해 봅시다</target>
        </trans-unit>
        <trans-unit id="82fd6cd237e491604315526b684dbfedf391a053" translate="yes" xml:space="preserve">
          <source>The implementation of the &lt;a href=&quot;-mutable-set/index#kotlin.collections.MutableSet&quot;&gt;MutableSet&lt;/a&gt; interface, backed by a &lt;a href=&quot;-hash-map/index#kotlin.collections.HashMap&quot;&gt;HashMap&lt;/a&gt; instance.</source>
          <target state="translated">&lt;a href=&quot;-hash-map/index#kotlin.collections.HashMap&quot;&gt;HashMap&lt;/a&gt; 인스턴스가 지원 하는 &lt;a href=&quot;-mutable-set/index#kotlin.collections.MutableSet&quot;&gt;MutableSet&lt;/a&gt; 인터페이스 의 구현입니다 .</target>
        </trans-unit>
        <trans-unit id="6ba732549bab36d600a33b057cb1445e14d3cdfc" translate="yes" xml:space="preserve">
          <source>The implementation of the &lt;a href=&quot;-mutable-set/index#kotlin.collections.MutableSet&quot;&gt;MutableSet&lt;/a&gt; interface, backed by a &lt;a href=&quot;-linked-hash-map/index#kotlin.collections.LinkedHashMap&quot;&gt;LinkedHashMap&lt;/a&gt; instance.</source>
          <target state="translated">&lt;a href=&quot;-linked-hash-map/index#kotlin.collections.LinkedHashMap&quot;&gt;LinkedHashMap&lt;/a&gt; 인스턴스가 지원 하는 &lt;a href=&quot;-mutable-set/index#kotlin.collections.MutableSet&quot;&gt;MutableSet&lt;/a&gt; 인터페이스 의 구현입니다 .</target>
        </trans-unit>
        <trans-unit id="e80ec37934bbec50821c43bd38cce1238a634038" translate="yes" xml:space="preserve">
          <source>The implementation of the &lt;a href=&quot;../-mutable-set/index#kotlin.collections.MutableSet&quot;&gt;MutableSet&lt;/a&gt; interface, backed by a &lt;a href=&quot;../-hash-map/index#kotlin.collections.HashMap&quot;&gt;HashMap&lt;/a&gt; instance.</source>
          <target state="translated">&lt;a href=&quot;../-hash-map/index#kotlin.collections.HashMap&quot;&gt;HashMap&lt;/a&gt; 인스턴스가 지원 하는 &lt;a href=&quot;../-mutable-set/index#kotlin.collections.MutableSet&quot;&gt;MutableSet&lt;/a&gt; 인터페이스 의 구현입니다 .</target>
        </trans-unit>
        <trans-unit id="9ab2ec2a4f2966a3555f9fce9c9ee7c196c5adc8" translate="yes" xml:space="preserve">
          <source>The implementation of the &lt;a href=&quot;../-mutable-set/index#kotlin.collections.MutableSet&quot;&gt;MutableSet&lt;/a&gt; interface, backed by a &lt;a href=&quot;../-linked-hash-map/index#kotlin.collections.LinkedHashMap&quot;&gt;LinkedHashMap&lt;/a&gt; instance.</source>
          <target state="translated">&lt;a href=&quot;../-linked-hash-map/index#kotlin.collections.LinkedHashMap&quot;&gt;LinkedHashMap&lt;/a&gt; 인스턴스가 지원 하는 &lt;a href=&quot;../-mutable-set/index#kotlin.collections.MutableSet&quot;&gt;MutableSet&lt;/a&gt; 인터페이스 의 구현입니다 .</target>
        </trans-unit>
        <trans-unit id="41ae2cd6b24e4bafa0efb17c582aa2f3dbd61174" translate="yes" xml:space="preserve">
          <source>The implementation of the &lt;a href=&quot;../../kotlin.collections/-mutable-set/index#kotlin.collections.MutableSet&quot;&gt;MutableSet&lt;/a&gt; interface, backed by a &lt;a href=&quot;../../kotlin.collections/-hash-map/index#kotlin.collections.HashMap&quot;&gt;HashMap&lt;/a&gt; instance.</source>
          <target state="translated">&lt;a href=&quot;../../kotlin.collections/-hash-map/index#kotlin.collections.HashMap&quot;&gt;HashMap&lt;/a&gt; 인스턴스가 지원 하는 &lt;a href=&quot;../../kotlin.collections/-mutable-set/index#kotlin.collections.MutableSet&quot;&gt;MutableSet&lt;/a&gt; 인터페이스 의 구현입니다 .</target>
        </trans-unit>
        <trans-unit id="b29deea1bb921913df3a5fadba5cd74a8f4acd5e" translate="yes" xml:space="preserve">
          <source>The implementation of the &lt;a href=&quot;../../kotlin.collections/-mutable-set/index#kotlin.collections.MutableSet&quot;&gt;MutableSet&lt;/a&gt; interface, backed by a &lt;a href=&quot;../../kotlin.collections/-linked-hash-map/index#kotlin.collections.LinkedHashMap&quot;&gt;LinkedHashMap&lt;/a&gt; instance.</source>
          <target state="translated">&lt;a href=&quot;../../kotlin.collections/-linked-hash-map/index#kotlin.collections.LinkedHashMap&quot;&gt;LinkedHashMap&lt;/a&gt; 인스턴스가 지원 하는 &lt;a href=&quot;../../kotlin.collections/-mutable-set/index#kotlin.collections.MutableSet&quot;&gt;MutableSet&lt;/a&gt; 인터페이스 의 구현입니다 .</target>
        </trans-unit>
        <trans-unit id="a6579034caa6bf530c44ba48e1557ccf3e4b94a3" translate="yes" xml:space="preserve">
          <source>The implementation of the &lt;a href=&quot;index#kotlin.collections.MutableSet&quot;&gt;MutableSet&lt;/a&gt; interface, backed by a &lt;a href=&quot;../-hash-map/index#kotlin.collections.HashMap&quot;&gt;HashMap&lt;/a&gt; instance.</source>
          <target state="translated">&lt;a href=&quot;../-hash-map/index#kotlin.collections.HashMap&quot;&gt;HashMap&lt;/a&gt; 인스턴스가 지원 하는 &lt;a href=&quot;index#kotlin.collections.MutableSet&quot;&gt;MutableSet&lt;/a&gt; 인터페이스 의 구현입니다 .</target>
        </trans-unit>
        <trans-unit id="a009a3a444f03e70f059b3c04a3a49cc825d720d" translate="yes" xml:space="preserve">
          <source>The implementation of the &lt;a href=&quot;index#kotlin.collections.MutableSet&quot;&gt;MutableSet&lt;/a&gt; interface, backed by a &lt;a href=&quot;../-linked-hash-map/index#kotlin.collections.LinkedHashMap&quot;&gt;LinkedHashMap&lt;/a&gt; instance.</source>
          <target state="translated">&lt;a href=&quot;../-linked-hash-map/index#kotlin.collections.LinkedHashMap&quot;&gt;LinkedHashMap&lt;/a&gt; 인스턴스가 지원 하는 &lt;a href=&quot;index#kotlin.collections.MutableSet&quot;&gt;MutableSet&lt;/a&gt; 인터페이스 의 구현입니다 .</target>
        </trans-unit>
        <trans-unit id="fa50aaadf0215e23e542746cdfa2658460833341" translate="yes" xml:space="preserve">
          <source>The implementor is required to implement &lt;a href=&quot;../-map/entries#kotlin.collections.Map%24entries&quot;&gt;entries&lt;/a&gt; property, which should return read-only set of map entries.</source>
          <target state="translated">구현자는 &lt;a href=&quot;../-map/entries#kotlin.collections.Map%24entries&quot;&gt;항목&lt;/a&gt; 속성 을 구현 해야하며, 읽기 전용 맵 항목 세트를 리턴해야합니다.</target>
        </trans-unit>
        <trans-unit id="0d9844010488cdb05175b5fbda28866913c16552" translate="yes" xml:space="preserve">
          <source>The implementor is required to implement &lt;a href=&quot;../-mutable-map/entries#kotlin.collections.MutableMap%24entries&quot;&gt;entries&lt;/a&gt; property, which should return mutable set of map entries, and &lt;a href=&quot;put#kotlin.collections.AbstractMutableMap%24put%28kotlin.collections.AbstractMutableMap.K%2C+kotlin.collections.AbstractMutableMap.V%29&quot;&gt;put&lt;/a&gt; function.</source>
          <target state="translated">구현자는 &lt;a href=&quot;../-mutable-map/entries#kotlin.collections.MutableMap%24entries&quot;&gt;항목&lt;/a&gt; 속성 을 구현 해야하며,이 속성은 변경 가능한 맵 항목 집합을 반환하고 함수를 &lt;a href=&quot;put#kotlin.collections.AbstractMutableMap%24put%28kotlin.collections.AbstractMutableMap.K%2C+kotlin.collections.AbstractMutableMap.V%29&quot;&gt;넣어야&lt;/a&gt; 합니다.</target>
        </trans-unit>
        <trans-unit id="4c2bcd3066d4911e1651a3eb4e73833cb38dc376" translate="yes" xml:space="preserve">
          <source>The implementor is required to implement &lt;a href=&quot;../-mutable-map/entries#kotlin.collections.MutableMap%24entries&quot;&gt;entries&lt;/a&gt; property, which should return mutable set of map entries, and &lt;a href=&quot;put#kotlin.collections.AbstractMutableMap%24put(kotlin.collections.AbstractMutableMap.K,%20kotlin.collections.AbstractMutableMap.V)&quot;&gt;put&lt;/a&gt; function.</source>
          <target state="translated">구현자는 변경 가능한 맵 항목 집합을 반환하고 함수를 &lt;a href=&quot;put#kotlin.collections.AbstractMutableMap%24put(kotlin.collections.AbstractMutableMap.K,%20kotlin.collections.AbstractMutableMap.V)&quot;&gt;넣어야&lt;/a&gt; 하는 &lt;a href=&quot;../-mutable-map/entries#kotlin.collections.MutableMap%24entries&quot;&gt;항목&lt;/a&gt; 속성 을 구현 해야 합니다.</target>
        </trans-unit>
        <trans-unit id="b072b8461d749216f126589f253d2136dcee5a49" translate="yes" xml:space="preserve">
          <source>The implementor is required to implement &lt;a href=&quot;entries&quot;&gt;entries&lt;/a&gt; property, which should return mutable set of map entries, and &lt;a href=&quot;put#kotlin.collections.AbstractMutableMap%24put%28kotlin.collections.AbstractMutableMap.K%2C+kotlin.collections.AbstractMutableMap.V%29&quot;&gt;put&lt;/a&gt; function.</source>
          <target state="translated">구현자는 &lt;a href=&quot;entries&quot;&gt;항목&lt;/a&gt; 속성 을 구현 해야하며,이 속성은 변경 가능한 맵 항목 집합을 반환하고 함수를 &lt;a href=&quot;put#kotlin.collections.AbstractMutableMap%24put%28kotlin.collections.AbstractMutableMap.K%2C+kotlin.collections.AbstractMutableMap.V%29&quot;&gt;넣어야&lt;/a&gt; 합니다.</target>
        </trans-unit>
        <trans-unit id="de6f180abcaad3c2e2c4cd19c5f847e641f85c21" translate="yes" xml:space="preserve">
          <source>The implementor is required to implement &lt;a href=&quot;entries&quot;&gt;entries&lt;/a&gt; property, which should return mutable set of map entries, and &lt;a href=&quot;put#kotlin.collections.AbstractMutableMap%24put(kotlin.collections.AbstractMutableMap.K,%20kotlin.collections.AbstractMutableMap.V)&quot;&gt;put&lt;/a&gt; function.</source>
          <target state="translated">구현자는 변경 가능한 맵 항목 집합을 반환하고 함수를 &lt;a href=&quot;put#kotlin.collections.AbstractMutableMap%24put(kotlin.collections.AbstractMutableMap.K,%20kotlin.collections.AbstractMutableMap.V)&quot;&gt;넣어야&lt;/a&gt; 하는 &lt;a href=&quot;entries&quot;&gt;항목&lt;/a&gt; 속성 을 구현 해야 합니다.</target>
        </trans-unit>
        <trans-unit id="b4d84ada0a069eb9728359000c31d5443cb7fe8c" translate="yes" xml:space="preserve">
          <source>The in-place sorting functions have similar names to the functions that apply to read-only lists, but without the &lt;code&gt;ed/d&lt;/code&gt; suffix:</source>
          <target state="translated">내부 정렬 기능은 읽기 전용 목록에 적용되지만 &lt;code&gt;ed/d&lt;/code&gt; 접미사가 없는 기능과 이름이 비슷합니다 .</target>
        </trans-unit>
        <trans-unit id="ad88781015ab91e944a6d24ed6740d21e1a613c0" translate="yes" xml:space="preserve">
          <source>The indentation in front of the accessors is due to convention; like elsewhere in Kotlin, it has no syntactic significance. The compiler can tell which accessors belong to which properties because the only legal place for an accessor is immediately after the property declaration (and there can be at most one getter and one setter) - so you can't split the property declaration and the accessor declarations. However, the order of the accessors doesn't matter.</source>
          <target state="translated">접근 자 앞의 들여 쓰기는 컨벤션 때문입니다. Kotlin의 다른 곳과 마찬가지로 구문상의 의미가 없습니다. 접근자는 접근자가 접근 할 수있는 유일한 법적 장소가 속성 선언 바로 뒤에 있기 때문에 어떤 접근자가 어떤 속성에 속하는지 알 수 있습니다 (최대 하나의 getter와 하나의 setter가있을 수 있음) 선언. 그러나 접근 자의 순서는 중요하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="a438c4c204700f052b62784ad094f3d42692c3e5" translate="yes" xml:space="preserve">
          <source>The inheritors are used in &lt;a href=&quot;-contract-builder/index&quot;&gt;ContractBuilder&lt;/a&gt; to describe the contract of a function.</source>
          <target state="translated">상속자는 함수의 계약을 설명하기 위해 &lt;a href=&quot;-contract-builder/index&quot;&gt;ContractBuilder&lt;/a&gt; 에서 사용됩니다 .</target>
        </trans-unit>
        <trans-unit id="927c0a69730a98787dc84c53359365aef174d24b" translate="yes" xml:space="preserve">
          <source>The initializer, getter and setter are optional. Property type is optional if it can be inferred from the initializer (or from the getter return type, as shown below).</source>
          <target state="translated">이니셜 라이저, 게터 및 세터는 선택 사항입니다. 이니셜 라이저 (또는 아래에 표시된 게터 리턴 유형)에서 유추 할 수있는 경우 특성 유형은 선택 사항입니다.</target>
        </trans-unit>
        <trans-unit id="df4b9318a341c1f296940189b67832418073c297" translate="yes" xml:space="preserve">
          <source>The inserted characters go in same order as in the &lt;a href=&quot;insert#kotlin.text.StringBuilder%24insert(kotlin.Int,%20kotlin.CharArray)/value&quot;&gt;value&lt;/a&gt; character array, starting at &lt;a href=&quot;insert#kotlin.text.StringBuilder%24insert(kotlin.Int,%20kotlin.CharArray)/index&quot;&gt;index&lt;/a&gt;.</source>
          <target state="translated">삽입 된 문자 는 &lt;a href=&quot;insert#kotlin.text.StringBuilder%24insert(kotlin.Int,%20kotlin.CharArray)/index&quot;&gt;index&lt;/a&gt; 에서 시작 하여 &lt;a href=&quot;insert#kotlin.text.StringBuilder%24insert(kotlin.Int,%20kotlin.CharArray)/value&quot;&gt;값&lt;/a&gt; 문자 배열 과 동일한 순서로 이동 합니다.</target>
        </trans-unit>
        <trans-unit id="86553ac24df6523f576ebfc95d6b9462d047690c" translate="yes" xml:space="preserve">
          <source>The inserted characters go in same order as in the &lt;a href=&quot;insert-range#kotlin.text%24insertRange(java.lang.StringBuilder,%20kotlin.Int,%20kotlin.CharArray,%20kotlin.Int,%20kotlin.Int)/value&quot;&gt;value&lt;/a&gt; array, starting at &lt;a href=&quot;insert-range#kotlin.text%24insertRange(java.lang.StringBuilder,%20kotlin.Int,%20kotlin.CharArray,%20kotlin.Int,%20kotlin.Int)/index&quot;&gt;index&lt;/a&gt;.</source>
          <target state="translated">삽입 된 문자 는 &lt;a href=&quot;insert-range#kotlin.text%24insertRange(java.lang.StringBuilder,%20kotlin.Int,%20kotlin.CharArray,%20kotlin.Int,%20kotlin.Int)/index&quot;&gt;index&lt;/a&gt; 에서 시작 하여 &lt;a href=&quot;insert-range#kotlin.text%24insertRange(java.lang.StringBuilder,%20kotlin.Int,%20kotlin.CharArray,%20kotlin.Int,%20kotlin.Int)/value&quot;&gt;값&lt;/a&gt; 배열 과 동일한 순서로 이동 합니다.</target>
        </trans-unit>
        <trans-unit id="b4ed7f7987791deb8f62b6e71d102280a076828a" translate="yes" xml:space="preserve">
          <source>The inserted characters go in same order as in the &lt;a href=&quot;insert-range#kotlin.text%24insertRange(kotlin.text.StringBuilder,%20kotlin.Int,%20kotlin.CharArray,%20kotlin.Int,%20kotlin.Int)/value&quot;&gt;value&lt;/a&gt; array, starting at &lt;a href=&quot;insert-range#kotlin.text%24insertRange(kotlin.text.StringBuilder,%20kotlin.Int,%20kotlin.CharArray,%20kotlin.Int,%20kotlin.Int)/index&quot;&gt;index&lt;/a&gt;.</source>
          <target state="translated">삽입 된 문자 는 &lt;a href=&quot;insert-range#kotlin.text%24insertRange(kotlin.text.StringBuilder,%20kotlin.Int,%20kotlin.CharArray,%20kotlin.Int,%20kotlin.Int)/index&quot;&gt;index&lt;/a&gt; 에서 시작 하여 &lt;a href=&quot;insert-range#kotlin.text%24insertRange(kotlin.text.StringBuilder,%20kotlin.Int,%20kotlin.CharArray,%20kotlin.Int,%20kotlin.Int)/value&quot;&gt;값&lt;/a&gt; 배열 과 동일한 순서로 이동 합니다.</target>
        </trans-unit>
        <trans-unit id="9543c40c6bce9ac3cd3001f546e3c43cece51c22" translate="yes" xml:space="preserve">
          <source>The inserted characters go in same order as in the &lt;a href=&quot;insert-range#kotlin.text.StringBuilder%24insertRange(kotlin.Int,%20kotlin.CharArray,%20kotlin.Int,%20kotlin.Int)/value&quot;&gt;value&lt;/a&gt; array, starting at &lt;a href=&quot;insert-range#kotlin.text.StringBuilder%24insertRange(kotlin.Int,%20kotlin.CharArray,%20kotlin.Int,%20kotlin.Int)/index&quot;&gt;index&lt;/a&gt;.</source>
          <target state="translated">삽입 된 문자 는 &lt;a href=&quot;insert-range#kotlin.text.StringBuilder%24insertRange(kotlin.Int,%20kotlin.CharArray,%20kotlin.Int,%20kotlin.Int)/index&quot;&gt;index&lt;/a&gt; 에서 시작 하여 &lt;a href=&quot;insert-range#kotlin.text.StringBuilder%24insertRange(kotlin.Int,%20kotlin.CharArray,%20kotlin.Int,%20kotlin.Int)/value&quot;&gt;값&lt;/a&gt; 배열 과 동일한 순서로 이동 합니다.</target>
        </trans-unit>
        <trans-unit id="e0709a2469b79f1b5658bea591319990543a447b" translate="yes" xml:space="preserve">
          <source>The inserted characters go in the same order as in the &lt;a href=&quot;insert#kotlin.text%24insert(kotlin.text.StringBuilder,%20kotlin.Int,%20kotlin.CharSequence?,%20kotlin.Int,%20kotlin.Int)/csq&quot;&gt;csq&lt;/a&gt; character sequence, starting at &lt;a href=&quot;insert#kotlin.text%24insert(kotlin.text.StringBuilder,%20kotlin.Int,%20kotlin.CharSequence?,%20kotlin.Int,%20kotlin.Int)/index&quot;&gt;index&lt;/a&gt;.</source>
          <target state="translated">삽입 된 문자 는 &lt;a href=&quot;insert#kotlin.text%24insert(kotlin.text.StringBuilder,%20kotlin.Int,%20kotlin.CharSequence?,%20kotlin.Int,%20kotlin.Int)/index&quot;&gt;index&lt;/a&gt; 에서 시작 하여 &lt;a href=&quot;insert#kotlin.text%24insert(kotlin.text.StringBuilder,%20kotlin.Int,%20kotlin.CharSequence?,%20kotlin.Int,%20kotlin.Int)/csq&quot;&gt;csq&lt;/a&gt; 문자 시퀀스 와 동일한 순서로 이동합니다 .</target>
        </trans-unit>
        <trans-unit id="1d6b868449af039ece3f79e19a7f1bdef4bb1a01" translate="yes" xml:space="preserve">
          <source>The inserted characters go in the same order as in the &lt;a href=&quot;insert#kotlin.text.StringBuilder%24insert(kotlin.Int,%20kotlin.CharSequence?)/value&quot;&gt;value&lt;/a&gt; character sequence, starting at &lt;a href=&quot;insert#kotlin.text.StringBuilder%24insert(kotlin.Int,%20kotlin.CharSequence?)/index&quot;&gt;index&lt;/a&gt;.</source>
          <target state="translated">삽입 된 문자 는 &lt;a href=&quot;insert#kotlin.text.StringBuilder%24insert(kotlin.Int,%20kotlin.CharSequence?)/index&quot;&gt;index&lt;/a&gt; 에서 시작 하는 &lt;a href=&quot;insert#kotlin.text.StringBuilder%24insert(kotlin.Int,%20kotlin.CharSequence?)/value&quot;&gt;값&lt;/a&gt; 문자 시퀀스 와 동일한 순서로 이동합니다 .</target>
        </trans-unit>
        <trans-unit id="3500adb125fdc73a499caef4e20aeda3f4dc5da2" translate="yes" xml:space="preserve">
          <source>The inserted characters go in the same order as in the &lt;a href=&quot;insert-range#kotlin.text%24insertRange(java.lang.StringBuilder,%20kotlin.Int,%20kotlin.CharSequence,%20kotlin.Int,%20kotlin.Int)/value&quot;&gt;value&lt;/a&gt; character sequence, starting at &lt;a href=&quot;insert-range#kotlin.text%24insertRange(java.lang.StringBuilder,%20kotlin.Int,%20kotlin.CharSequence,%20kotlin.Int,%20kotlin.Int)/index&quot;&gt;index&lt;/a&gt;.</source>
          <target state="translated">삽입 된 문자 는 &lt;a href=&quot;insert-range#kotlin.text%24insertRange(java.lang.StringBuilder,%20kotlin.Int,%20kotlin.CharSequence,%20kotlin.Int,%20kotlin.Int)/index&quot;&gt;index&lt;/a&gt; 에서 시작 하는 &lt;a href=&quot;insert-range#kotlin.text%24insertRange(java.lang.StringBuilder,%20kotlin.Int,%20kotlin.CharSequence,%20kotlin.Int,%20kotlin.Int)/value&quot;&gt;값&lt;/a&gt; 문자 시퀀스 와 동일한 순서로 이동합니다 .</target>
        </trans-unit>
        <trans-unit id="ad31007689802215e06527f3c3a293fa179e4c9d" translate="yes" xml:space="preserve">
          <source>The inserted characters go in the same order as in the &lt;a href=&quot;insert-range#kotlin.text%24insertRange(kotlin.text.StringBuilder,%20kotlin.Int,%20kotlin.CharSequence,%20kotlin.Int,%20kotlin.Int)/value&quot;&gt;value&lt;/a&gt; character sequence, starting at &lt;a href=&quot;insert-range#kotlin.text%24insertRange(kotlin.text.StringBuilder,%20kotlin.Int,%20kotlin.CharSequence,%20kotlin.Int,%20kotlin.Int)/index&quot;&gt;index&lt;/a&gt;.</source>
          <target state="translated">삽입 된 문자 는 &lt;a href=&quot;insert-range#kotlin.text%24insertRange(kotlin.text.StringBuilder,%20kotlin.Int,%20kotlin.CharSequence,%20kotlin.Int,%20kotlin.Int)/index&quot;&gt;index&lt;/a&gt; 에서 시작 하는 &lt;a href=&quot;insert-range#kotlin.text%24insertRange(kotlin.text.StringBuilder,%20kotlin.Int,%20kotlin.CharSequence,%20kotlin.Int,%20kotlin.Int)/value&quot;&gt;값&lt;/a&gt; 문자 시퀀스 와 동일한 순서로 이동합니다 .</target>
        </trans-unit>
        <trans-unit id="c2d836a76478983c6ee8310fe8b3dad06eee5f72" translate="yes" xml:space="preserve">
          <source>The inserted characters go in the same order as in the &lt;a href=&quot;insert-range#kotlin.text.StringBuilder%24insertRange(kotlin.Int,%20kotlin.CharSequence,%20kotlin.Int,%20kotlin.Int)/value&quot;&gt;value&lt;/a&gt; character sequence, starting at &lt;a href=&quot;insert-range#kotlin.text.StringBuilder%24insertRange(kotlin.Int,%20kotlin.CharSequence,%20kotlin.Int,%20kotlin.Int)/index&quot;&gt;index&lt;/a&gt;.</source>
          <target state="translated">삽입 된 문자 는 &lt;a href=&quot;insert-range#kotlin.text.StringBuilder%24insertRange(kotlin.Int,%20kotlin.CharSequence,%20kotlin.Int,%20kotlin.Int)/index&quot;&gt;index&lt;/a&gt; 에서 시작 하는 &lt;a href=&quot;insert-range#kotlin.text.StringBuilder%24insertRange(kotlin.Int,%20kotlin.CharSequence,%20kotlin.Int,%20kotlin.Int)/value&quot;&gt;값&lt;/a&gt; 문자 시퀀스 와 동일한 순서로 이동합니다 .</target>
        </trans-unit>
        <trans-unit id="73ab217fa7b8d452fbb508f24860b5983aed819b" translate="yes" xml:space="preserve">
          <source>The insertion order is preserved by maintaining a doubly-linked list of all of its entries.</source>
          <target state="translated">삽입 순서는 모든 항목의 이중 연결 목록을 유지하여 유지됩니다.</target>
        </trans-unit>
        <trans-unit id="d2ac540734122ad9d9f148278a049a69e4049649" translate="yes" xml:space="preserve">
          <source>The instance of the object declaration, or &lt;code&gt;null&lt;/code&gt; if this class is not an object declaration.</source>
          <target state="translated">객체 선언의 인스턴스. 이 클래스가 객체 선언이 아닌 경우는 &lt;code&gt;null&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="dc732f6df37635d53aa48535fdea446c3301e524" translate="yes" xml:space="preserve">
          <source>The instruction &lt;code&gt;binaries.executable()&lt;/code&gt; explicitly instructs the Kotlin compiler to emit executable &lt;code&gt;.js&lt;/code&gt; files. This is the default behavior when using the current Kotlin/JS compiler, but the instruction is explicitly required if you are working with the &lt;a href=&quot;js-ir-compiler&quot;&gt;Kotlin/JS IR compiler&lt;/a&gt;, or have set &lt;code&gt;kotlin.js.generate.executable.default=false&lt;/code&gt; in your &lt;code&gt;gradle.properties&lt;/code&gt;. In those cases, omitting &lt;code&gt;binaries.executable()&lt;/code&gt; will cause the compiler to only generate Kotlin-internal library files, which can be used from other projects, but not run on their own. (This is typically faster than creating executable files, and can be a possible optimization when dealing with non-leaf modules of your project.)</source>
          <target state="translated">명령의 &lt;code&gt;binaries.executable()&lt;/code&gt; 를 명시 적으로 실행 방출 할 수있는 코 틀린 컴파일러에 지시 &lt;code&gt;.js&lt;/code&gt; 파일을. 이것은 현재 Kotlin / JS 컴파일러를 사용할 때의 기본 동작이지만 &lt;a href=&quot;js-ir-compiler&quot;&gt;Kotlin / JS IR 컴파일러&lt;/a&gt; 로 작업하거나 &lt;code&gt;kotlin.js.generate.executable.default=false&lt;/code&gt; 에서 kotlin.js.generate.executable.default = false 를 설정 한 경우 명령이 명시 적으로 필요합니다 &lt;code&gt;gradle.properties&lt;/code&gt; . 이 경우 &lt;code&gt;binaries.executable()&lt;/code&gt; 을 생략 하면 컴파일러가 다른 프로젝트에서 사용할 수 있지만 자체적으로 실행되지 않는 Kotlin 내부 라이브러리 파일 만 생성합니다. (이것은 일반적으로 실행 파일을 만드는 것보다 빠르며 프로젝트의 리프가 아닌 모듈을 처리 할 때 가능한 최적화가 될 수 있습니다.)</target>
        </trans-unit>
        <trans-unit id="4e1a88c47519272f4d061661530035978afeff04" translate="yes" xml:space="preserve">
          <source>The interoperability tool analyses C headers and produces a &quot;natural&quot; mapping of the types, functions, and constants into the Kotlin world. The generated stubs can be imported into an IDE for the purpose of code completion and navigation.</source>
          <target state="translated">상호 운용성 도구는 C 헤더를 분석하고 유형, 함수 및 상수를 Kotlin 세계에 &quot;자연스럽게&quot;매핑합니다. 생성 된 스텁은 코드 완성 및 탐색을 위해 IDE로 가져올 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="3122fc76a98056291b979307819d62c01b024074" translate="yes" xml:space="preserve">
          <source>The introduction of the hierarchical project structure in multiplatform projects resulted in a couple of changes to the names of some Gradle tasks:</source>
          <target state="translated">멀티 플랫폼 프로젝트에 계층 적 프로젝트 구조가 도입됨에 따라 일부 Gradle 작업의 이름이 몇 가지 변경되었습니다.</target>
        </trans-unit>
        <trans-unit id="78163206f8e53ce50e1eec86f00b2814cc4b80d9" translate="yes" xml:space="preserve">
          <source>The kapt annotation processing tasks are &lt;a href=&quot;https://guides.gradle.org/using-build-cache/&quot;&gt;cached in Gradle&lt;/a&gt; by default. However, annotation processors run arbitrary code that may not necessarily transform the task inputs into the outputs, might access and modify the files that are not tracked by Gradle etc. If the annotation processors used in the build cannot be properly cached, it is possible to disable caching for kapt entirely by adding the following lines to the build script, in order to avoid false-positive cache hits for the kapt tasks:</source>
          <target state="translated">kapt 주석 처리 작업은 기본적으로 &lt;a href=&quot;https://guides.gradle.org/using-build-cache/&quot;&gt;Gradle&lt;/a&gt; 에 캐시됩니다 . 그러나 주석 프로세서는 작업 입력을 출력으로 변환 할 필요가없는 임의의 코드를 실행하고 Gradle 등에서 추적하지 않는 파일에 액세스하고 수정할 수 있습니다. 빌드에 사용 된 주석 프로세서를 제대로 캐시 할 수없는 경우 다음을 수행 할 수 있습니다. kapt 태스크에 대해 거짓 긍정 캐시 적중을 방지하기 위해 빌드 스크립트에 다음 행을 추가하여 kapt에 대한 캐싱을 완전히 비활성화하십시오.</target>
        </trans-unit>
        <trans-unit id="0c34ac28f0b47dc2a95569e5a72bbe09867d14d5" translate="yes" xml:space="preserve">
          <source>The kapt annotation processing tasks are not &lt;a href=&quot;https://guides.gradle.org/using-build-cache/&quot;&gt;cached in Gradle&lt;/a&gt; by default. Annotation processors run arbitrary code that may not necessarily transform the task inputs into the outputs, might access and modify the files that are not tracked by Gradle etc. To enable caching for kapt anyway, add the following lines to the build script:</source>
          <target state="translated">kapt 주석 처리 작업은 기본적으로 &lt;a href=&quot;https://guides.gradle.org/using-build-cache/&quot;&gt;Gradle&lt;/a&gt; 에 캐시 되지 않습니다 . 어노테이션 프로세서는 태스크 입력을 출력으로 변환 할 필요가없는 임의의 코드를 실행하고, Gradle 등에서 추적하지 않는 파일에 액세스하고 수정할 수 있습니다. 어쨌든 kapt에 대한 캐싱을 사용하려면 빌드 스크립트에 다음 행을 추가하십시오.</target>
        </trans-unit>
        <trans-unit id="519a57223d8acbf5b242fd0d7e39dc2141cafbbd" translate="yes" xml:space="preserve">
          <source>The key advantage of &lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines.flow/on-completion.html&quot;&gt;onCompletion&lt;/a&gt; is a nullable &lt;code&gt;Throwable&lt;/code&gt; parameter of the lambda that can be used to determine whether the flow collection was completed normally or exceptionally. In the following example the &lt;code&gt;simple&lt;/code&gt; flow throws an exception after emitting the number 1:</source>
          <target state="translated">&lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines.flow/on-completion.html&quot;&gt;onCompletion&lt;/a&gt; 의 주요 이점은 흐름 수집이 정상적으로 완료되었는지 예외적으로 완료되었는지 여부를 확인하는 데 사용할 수있는 람다 의 nullable &lt;code&gt;Throwable&lt;/code&gt; 매개 변수입니다. 다음 예제에서 &lt;code&gt;simple&lt;/code&gt; 흐름은 숫자 1을 내 보낸 후 예외를 발생시킵니다.</target>
        </trans-unit>
        <trans-unit id="0d265db62daefe24281a53daa642fa0260c64977" translate="yes" xml:space="preserve">
          <source>The key benefit of using sealed classes comes into play when you use them in a &lt;a href=&quot;control-flow#when-expression&quot;&gt;&lt;code&gt;when&lt;/code&gt; expression&lt;/a&gt;. If it's possible to verify that the statement covers all cases, you don't need to add an &lt;code&gt;else&lt;/code&gt; clause to the statement. However, this works only if you use &lt;code&gt;when&lt;/code&gt; as an expression (using the result) and not as a statement.</source>
          <target state="translated">봉인 된 클래스를 사용하는 경우의 주요 이점은 &lt;a href=&quot;control-flow#when-expression&quot;&gt; &lt;code&gt;when&lt;/code&gt; expression&lt;/a&gt; 에서 사용할 때 사용됩니다 . 명령문이 모든 경우에 적용되는지 확인할 수 있으면 &lt;code&gt;else&lt;/code&gt; 절을 명령문 에 추가 할 필요가 없습니다 . 그러나 이것은 명령문이 아닌 표현식 (결과 사용)으로 사용할 &lt;code&gt;when&lt;/code&gt; 작동 합니다.</target>
        </trans-unit>
        <trans-unit id="60878e19d1626a7113513294279d9306ebdfd3af" translate="yes" xml:space="preserve">
          <source>The key differences to the old model are:</source>
          <target state="translated">이전 모델과의 주요 차이점은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="ba83743a7b4886ce5d922ef71ed4bc654a53eba4" translate="yes" xml:space="preserve">
          <source>The key for each element is provided by the &lt;a href=&quot;-grouping/key-of&quot;&gt;Grouping.keyOf&lt;/a&gt; function.</source>
          <target state="translated">각 요소의 키는 &lt;a href=&quot;-grouping/key-of&quot;&gt;Grouping.keyOf&lt;/a&gt; 함수에 의해 제공됩니다 .</target>
        </trans-unit>
        <trans-unit id="c7780b4923a988af8ea0601856ae08a944187203" translate="yes" xml:space="preserve">
          <source>The key new feature in Kotlin 1.1 is &lt;em&gt;coroutines&lt;/em&gt;, bringing the support of &lt;code&gt;async&lt;/code&gt;/&lt;code&gt;await&lt;/code&gt;, &lt;code&gt;yield&lt;/code&gt; and similar programming patterns. The key feature of Kotlin's design is that the implementation of coroutine execution is part of the libraries, not the language, so you aren't bound to any specific programming paradigm or concurrency library.</source>
          <target state="translated">Kotlin 1.1의 주요 새로운 기능은 코 &lt;em&gt;루틴&lt;/em&gt; 으로 &lt;code&gt;async&lt;/code&gt; / &lt;code&gt;await&lt;/code&gt; , &lt;code&gt;yield&lt;/code&gt; 및 유사한 프로그래밍 패턴을 지원합니다. 코 틀린 디자인의 주요 특징은 코 루틴 실행의 구현이 언어가 아닌 라이브러리의 일부이므로 특정 프로그래밍 패러다임 또는 동시성 라이브러리에 구속되지 않는다는 것입니다.</target>
        </trans-unit>
        <trans-unit id="255ddce16ff2d3386fde18744e92b0919a0c3dcd" translate="yes" xml:space="preserve">
          <source>The key that defines &lt;em&gt;the&lt;/em&gt; context interceptor.</source>
          <target state="translated">컨텍스트 인터셉터 를 정의 &lt;em&gt;하는&lt;/em&gt; 키입니다 .</target>
        </trans-unit>
        <trans-unit id="f78236335bddfda90f254cf18135e3e283c652aa" translate="yes" xml:space="preserve">
          <source>The key to understanding why this trick works is rather simple: if you can only &lt;strong&gt;take&lt;/strong&gt; items from a collection, then using a collection of &lt;code&gt;String&lt;/code&gt;s and reading &lt;code&gt;Object&lt;/code&gt;s from it is fine. Conversely, if you can only &lt;em&gt;put&lt;/em&gt; items into the collection, it's OK to take a collection of &lt;code&gt;Object&lt;/code&gt;s and put &lt;code&gt;String&lt;/code&gt;s into it: in Java we have &lt;code&gt;List&amp;lt;? super String&amp;gt;&lt;/code&gt; a &lt;strong&gt;supertype&lt;/strong&gt; of &lt;code&gt;List&amp;lt;Object&amp;gt;&lt;/code&gt;.</source>
          <target state="translated">이 트릭이 작동하는 이유를 이해하는 열쇠는 다소 간단합니다. 컬렉션 에서만 항목을 &lt;strong&gt;가져올&lt;/strong&gt; 수 있다면 &lt;code&gt;String&lt;/code&gt; 컬렉션을 사용하고 &lt;code&gt;Object&lt;/code&gt; 에서 객체를 읽는 것이 좋습니다. 만 할 수 있다면 반대로 &lt;em&gt;넣어&lt;/em&gt; 컬렉션에 항목을, 그것의 확인 모음 취할 &lt;code&gt;Object&lt;/code&gt; 들 넣어 &lt;code&gt;String&lt;/code&gt; 그것으로들 : 자바 우리가 가지고있는 &lt;code&gt;List&amp;lt;? super String&amp;gt;&lt;/code&gt; &lt;strong&gt;슈퍼 타입&lt;/strong&gt; 의 &lt;code&gt;List&amp;lt;Object&amp;gt;&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="e72d25f147746520f953f90cd2e72b99d7c03c99" translate="yes" xml:space="preserve">
          <source>The kind of JS module generated by the compiler</source>
          <target state="translated">컴파일러가 생성 한 JS 모듈의 종류</target>
        </trans-unit>
        <trans-unit id="61cddbaa600cb4e80791b04fea34cfac2b911d59" translate="yes" xml:space="preserve">
          <source>The kind of JS module generated by the compiler:</source>
          <target state="translated">컴파일러에 의해 생성 된 JS 모듈의 종류 :</target>
        </trans-unit>
        <trans-unit id="d05fefa144a9bfaff0069cb495aef5fbbe9dc415" translate="yes" xml:space="preserve">
          <source>The language settings are checked for consistency between source sets depending on each other. Namely, if &lt;code&gt;foo&lt;/code&gt; depends on &lt;code&gt;bar&lt;/code&gt;:</source>
          <target state="translated">언어 설정은 서로에 따라 소스 세트 간의 일관성을 검사합니다. 즉, &lt;code&gt;foo&lt;/code&gt; 가 &lt;code&gt;bar&lt;/code&gt; 에 의존하는 경우 :</target>
        </trans-unit>
        <trans-unit id="7ae80735e57bee13b52032eac31a1a1787272a8f" translate="yes" xml:space="preserve">
          <source>The language settings for a source set can be specified as follows:</source>
          <target state="translated">소스 세트의 언어 설정은 다음과 같이 지정할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="fbaea25f697b924abdcdee8361823761cf7fe6eb" translate="yes" xml:space="preserve">
          <source>The language used to document Kotlin code (the equivalent of Java's JavaDoc) is called &lt;strong&gt;KDoc&lt;/strong&gt;. In its essence, KDoc combines JavaDoc's syntax for block tags (extended to support Kotlin's specific constructs) and Markdown for inline markup.</source>
          <target state="translated">Kotlin 코드 (Java의 JavaDoc에 해당)를 문서화하는 데 사용되는 언어를 &lt;strong&gt;KDoc&lt;/strong&gt; 이라고 &lt;strong&gt;합니다&lt;/strong&gt; . 본질적으로 KDoc은 블록 태그에 대한 JavaDoc의 구문 (Kotlin의 특정 구성을 지원하도록 확장)과 인라인 마크 업에 대한 Markdown을 결합합니다.</target>
        </trans-unit>
        <trans-unit id="6bd524ff724eae23548f42d94d576b7a82d79f24" translate="yes" xml:space="preserve">
          <source>The last element in the progression.</source>
          <target state="translated">진행의 마지막 요소.</target>
        </trans-unit>
        <trans-unit id="5ac343906b9635efc6bc3ea707e0886b7e34f40a" translate="yes" xml:space="preserve">
          <source>The last element of the progression is calculated to find the maximum value not greater than the end value for a positive step or the minimum value not less than the end value for a negative step such that &lt;code&gt;(last - first) % step == 0&lt;/code&gt;.</source>
          <target state="translated">진행의 마지막 요소는 음 단계되도록 덜 최종 값 이상의 포지티브 단계 또는 최소 값의 최종 값보다 크지 않은 최대 값을 찾기 위해 계산 &lt;code&gt;(last - first) % step == 0&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="01b3b5a6efe68e4716a891433d6bbbed0351ca8d" translate="yes" xml:space="preserve">
          <source>The last line is invoking the function itself and passing as argument &lt;code&gt;kotlin&lt;/code&gt;, which refers to the standard library. This can be obtained in one of two ways:</source>
          <target state="translated">마지막 줄은 함수 자체를 호출 하고 표준 라이브러리를 참조하는 &lt;code&gt;kotlin&lt;/code&gt; 인수로 전달 합니다. 이것은 두 가지 방법 중 하나로 얻을 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="538d53f2bc70104b650857f7bb5ca32765c9300b" translate="yes" xml:space="preserve">
          <source>The last list in the resulting list may have less elements than the given &lt;a href=&quot;chunked#kotlin.collections%24chunked%28kotlin.collections.Iterable%28%28kotlin.collections.chunked.T%29%29%2C+kotlin.Int%29%2Fsize&quot;&gt;size&lt;/a&gt;.</source>
          <target state="translated">결과 목록의 마지막 목록은 주어진 &lt;a href=&quot;chunked#kotlin.collections%24chunked%28kotlin.collections.Iterable%28%28kotlin.collections.chunked.T%29%29%2C+kotlin.Int%29%2Fsize&quot;&gt;크기&lt;/a&gt; 보다 적은 요소를 가질 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="ff4c16017113383cfa2553bc4b666ff8af31f35a" translate="yes" xml:space="preserve">
          <source>The last list in the resulting list may have less elements than the given &lt;a href=&quot;chunked#kotlin.collections%24chunked(kotlin.collections.Iterable((kotlin.collections.chunked.T)),%20kotlin.Int)/size&quot;&gt;size&lt;/a&gt;.</source>
          <target state="translated">결과 목록의 마지막 목록에는 주어진 &lt;a href=&quot;chunked#kotlin.collections%24chunked(kotlin.collections.Iterable((kotlin.collections.chunked.T)),%20kotlin.Int)/size&quot;&gt;크기&lt;/a&gt; 보다 적은 요소가있을 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="df81eba7c4b794145b48baa6539e2f2979a8d58f" translate="yes" xml:space="preserve">
          <source>The last list in the resulting sequence may have less elements than the given &lt;a href=&quot;chunked#kotlin.sequences%24chunked%28kotlin.sequences.Sequence%28%28kotlin.sequences.chunked.T%29%29%2C+kotlin.Int%29%2Fsize&quot;&gt;size&lt;/a&gt;.</source>
          <target state="translated">결과 시퀀스의 마지막 목록은 주어진 &lt;a href=&quot;chunked#kotlin.sequences%24chunked%28kotlin.sequences.Sequence%28%28kotlin.sequences.chunked.T%29%29%2C+kotlin.Int%29%2Fsize&quot;&gt;크기&lt;/a&gt; 보다 적은 요소를 가질 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="e4ef2ba5891ebf7ffa1b88944ac0282efb5fecf2" translate="yes" xml:space="preserve">
          <source>The last list in the resulting sequence may have less elements than the given &lt;a href=&quot;chunked#kotlin.sequences%24chunked(kotlin.sequences.Sequence((kotlin.sequences.chunked.T)),%20kotlin.Int)/size&quot;&gt;size&lt;/a&gt;.</source>
          <target state="translated">결과 시퀀스의 마지막 목록에는 주어진 &lt;a href=&quot;chunked#kotlin.sequences%24chunked(kotlin.sequences.Sequence((kotlin.sequences.chunked.T)),%20kotlin.Int)/size&quot;&gt;크기&lt;/a&gt; 보다 적은 요소가있을 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="19dcc0ec6fdfe1941cf804b7c1eaf5c5297a4c82" translate="yes" xml:space="preserve">
          <source>The last string in the resulting list may have less characters than the given &lt;a href=&quot;chunked#kotlin.text%24chunked%28kotlin.CharSequence%2C+kotlin.Int%29%2Fsize&quot;&gt;size&lt;/a&gt;.</source>
          <target state="translated">결과 목록의 마지막 문자열은 주어진 &lt;a href=&quot;chunked#kotlin.text%24chunked%28kotlin.CharSequence%2C+kotlin.Int%29%2Fsize&quot;&gt;크기&lt;/a&gt; 보다 적은 문자를 가질 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="01c80e09f206886b89d00be2fa9ab43305c32874" translate="yes" xml:space="preserve">
          <source>The last string in the resulting list may have less characters than the given &lt;a href=&quot;chunked#kotlin.text%24chunked(kotlin.CharSequence,%20kotlin.Int)/size&quot;&gt;size&lt;/a&gt;.</source>
          <target state="translated">결과 목록의 마지막 문자열은 주어진 &lt;a href=&quot;chunked#kotlin.text%24chunked(kotlin.CharSequence,%20kotlin.Int)/size&quot;&gt;크기&lt;/a&gt; 보다 적은 문자를 가질 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="5264566740d059c5fcc7247f9b4782bf04dc775d" translate="yes" xml:space="preserve">
          <source>The last string in the resulting sequence may have less characters than the given &lt;a href=&quot;chunked-sequence#kotlin.text%24chunkedSequence%28kotlin.CharSequence%2C+kotlin.Int%29%2Fsize&quot;&gt;size&lt;/a&gt;.</source>
          <target state="translated">결과 시퀀스의 마지막 문자열은 주어진 &lt;a href=&quot;chunked-sequence#kotlin.text%24chunkedSequence%28kotlin.CharSequence%2C+kotlin.Int%29%2Fsize&quot;&gt;크기&lt;/a&gt; 보다 적은 문자를 가질 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="7ebb5e898a1a9ea0d92ef57e7df9d364782eae89" translate="yes" xml:space="preserve">
          <source>The last string in the resulting sequence may have less characters than the given &lt;a href=&quot;chunked-sequence#kotlin.text%24chunkedSequence(kotlin.CharSequence,%20kotlin.Int)/size&quot;&gt;size&lt;/a&gt;.</source>
          <target state="translated">결과 시퀀스의 마지막 문자열은 주어진 &lt;a href=&quot;chunked-sequence#kotlin.text%24chunkedSequence(kotlin.CharSequence,%20kotlin.Int)/size&quot;&gt;크기&lt;/a&gt; 보다 적은 문자를 가질 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="34c76d76568703e916e3116e8326427af7debc51" translate="yes" xml:space="preserve">
          <source>The lastIndex is a read/write integer property of regular expressions that specifies the index at which to start the next match.</source>
          <target state="translated">lastIndex는 다음 일치를 시작할 인덱스를 지정하는 정규식의 읽기 / 쓰기 정수 속성입니다.</target>
        </trans-unit>
        <trans-unit id="9d0eba273c11a973f53f6330c745e78d9f5b9345" translate="yes" xml:space="preserve">
          <source>The latter is called &lt;strong&gt;contravariance&lt;/strong&gt;, and you can only call methods that take String as an argument on &lt;code&gt;List&amp;lt;? super String&amp;gt;&lt;/code&gt; (e.g., you can call &lt;code&gt;add(String)&lt;/code&gt; or &lt;code&gt;set(int, String)&lt;/code&gt;), while if you call something that returns &lt;code&gt;T&lt;/code&gt; in &lt;code&gt;List&amp;lt;T&amp;gt;&lt;/code&gt;, you don't get a &lt;code&gt;String&lt;/code&gt;, but an &lt;code&gt;Object&lt;/code&gt;.</source>
          <target state="translated">후자를 &quot; &lt;strong&gt;contravariance&quot;&lt;/strong&gt; 라고하며 , String을 인수로 사용하는 메소드 만 &lt;code&gt;List&amp;lt;? super String&amp;gt;&lt;/code&gt; (예를 들어, &lt;code&gt;add(String)&lt;/code&gt; 또는 &lt;code&gt;set(int, String)&lt;/code&gt; 을 호출 할 수 있음 ) 반면 &lt;code&gt;List&amp;lt;T&amp;gt;&lt;/code&gt; 에서 &lt;code&gt;T&lt;/code&gt; 를 반환하는 것을 호출 하면 &lt;code&gt;String&lt;/code&gt; 이 아니라 &lt;code&gt;Object&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="86eeb4f1664e3df8b781582839802549edf89327" translate="yes" xml:space="preserve">
          <source>The layout of a Kotlin multiplatform project is constructed out of the following building blocks:</source>
          <target state="translated">Kotlin 멀티 플랫폼 프로젝트의 레이아웃은 다음 빌딩 블록으로 구성됩니다.</target>
        </trans-unit>
        <trans-unit id="8ea7c30b630fce2ba1b463bc4ce8b2e978cfb463" translate="yes" xml:space="preserve">
          <source>The layout of kotlinx libraries has changed and now corresponds to the default layout, which we recommend using: The '&amp;ldquo;root&amp;rdquo; or &amp;ldquo;umbrella&amp;rdquo; library module now has a name without a suffix (for example,&lt;code&gt;kotlinx-coroutines-core&lt;/code&gt; instead of &lt;code&gt;kotlinx-coroutines-core-native&lt;/code&gt;). Publishing libraries with &lt;a href=&quot;https://docs.gradle.org/current/userguide/publishing_maven.html&quot;&gt;maven-publish Gradle plugin&lt;/a&gt; follows this layout by default.</source>
          <target state="translated">kotlinx 라이브러리의 레이아웃을 변경하고 지금 우리가 사용하는 것이 좋습니다 기본 레이아웃에 해당했다 : (예를 들어, 접미사없이 ' &quot;루트&quot;또는 &quot;우산&quot;라이브러리 모듈은 이제 이름이, &lt;code&gt;kotlinx-coroutines-core&lt;/code&gt; 대신 &lt;code&gt;kotlinx-coroutines-core-native&lt;/code&gt; ). &lt;a href=&quot;https://docs.gradle.org/current/userguide/publishing_maven.html&quot;&gt;maven-publish Gradle 플러그인을 사용&lt;/a&gt; 하여 라이브러리를 게시 하는 것은 기본적으로이 레이아웃을 따릅니다.</target>
        </trans-unit>
        <trans-unit id="dc4b69a6e38939f4509626db77c33dd8c679086f" translate="yes" xml:space="preserve">
          <source>The least significant 16 bits of the resulting &lt;code&gt;Int&lt;/code&gt; value are the same as the bits of this &lt;code&gt;Short&lt;/code&gt; value, whereas the most significant 16 bits are filled with the sign bit of this value.</source>
          <target state="translated">결과 &lt;code&gt;Int&lt;/code&gt; 값 의 최하위 16 비트는 이 &lt;code&gt;Short&lt;/code&gt; 값 의 비트와 동일 하지만 최상위 16 비트는이 값의 부호 비트로 채워집니다.</target>
        </trans-unit>
        <trans-unit id="4f0f34d38c4a4771a59f6d35fcaf5f32f9d5a113" translate="yes" xml:space="preserve">
          <source>The least significant 16 bits of the resulting &lt;code&gt;Int&lt;/code&gt; value are the same as the bits of this &lt;code&gt;UShort&lt;/code&gt; value, whereas the most significant 16 bits are filled with zeros.</source>
          <target state="translated">결과 &lt;code&gt;Int&lt;/code&gt; 값 의 최하위 16 비트는 이 &lt;code&gt;UShort&lt;/code&gt; 값 의 비트와 동일 하지만 최상위 16 비트는 0으로 채워집니다.</target>
        </trans-unit>
        <trans-unit id="db7d64a40964cbcc91041fe9c6abd3a6f883ba7c" translate="yes" xml:space="preserve">
          <source>The least significant 16 bits of the resulting &lt;code&gt;Long&lt;/code&gt; value are the same as the bits of this &lt;code&gt;Short&lt;/code&gt; value, whereas the most significant 48 bits are filled with the sign bit of this value.</source>
          <target state="translated">결과 &lt;code&gt;Long&lt;/code&gt; 값 의 최하위 16 비트는 이 &lt;code&gt;Short&lt;/code&gt; 값 의 비트와 동일 하지만 최상위 48 비트는이 값의 부호 비트로 채워집니다.</target>
        </trans-unit>
        <trans-unit id="96755580626f22c0780c08fafc24e52c9efd9ea9" translate="yes" xml:space="preserve">
          <source>The least significant 16 bits of the resulting &lt;code&gt;Long&lt;/code&gt; value are the same as the bits of this &lt;code&gt;UShort&lt;/code&gt; value, whereas the most significant 48 bits are filled with zeros.</source>
          <target state="translated">결과 &lt;code&gt;Long&lt;/code&gt; 값 의 최하위 16 비트는 이 &lt;code&gt;UShort&lt;/code&gt; 값 의 비트와 동일 하지만 최상위 48 비트는 0으로 채워집니다.</target>
        </trans-unit>
        <trans-unit id="805e1d578ae5895787cd7c80c9a6f84d9875cbdf" translate="yes" xml:space="preserve">
          <source>The least significant 16 bits of the resulting &lt;code&gt;UInt&lt;/code&gt; value are the same as the bits of this &lt;code&gt;Short&lt;/code&gt; value, whereas the most significant 16 bits are filled with the sign bit of this value.</source>
          <target state="translated">결과 &lt;code&gt;UInt&lt;/code&gt; 값 의 최하위 16 비트는 이 &lt;code&gt;Short&lt;/code&gt; 값 의 비트와 동일 하지만 최상위 16 비트는이 값의 부호 비트로 채워집니다.</target>
        </trans-unit>
        <trans-unit id="e2d7f90749fa8a275417e31e2a951b621f7bdd7e" translate="yes" xml:space="preserve">
          <source>The least significant 16 bits of the resulting &lt;code&gt;UInt&lt;/code&gt; value are the same as the bits of this &lt;code&gt;UShort&lt;/code&gt; value, whereas the most significant 16 bits are filled with zeros.</source>
          <target state="translated">결과 &lt;code&gt;UInt&lt;/code&gt; 값 의 최하위 16 비트는 이 &lt;code&gt;UShort&lt;/code&gt; 값 의 비트와 동일 하지만 최상위 16 비트는 0으로 채워집니다.</target>
        </trans-unit>
        <trans-unit id="382a5532019e821cafc1c9ca21454b43f1f91a60" translate="yes" xml:space="preserve">
          <source>The least significant 16 bits of the resulting &lt;code&gt;ULong&lt;/code&gt; value are the same as the bits of this &lt;code&gt;Short&lt;/code&gt; value, whereas the most significant 48 bits are filled with the sign bit of this value.</source>
          <target state="translated">결과 &lt;code&gt;ULong&lt;/code&gt; 값 의 최하위 16 비트는 이 &lt;code&gt;Short&lt;/code&gt; 값 의 비트와 동일 하지만 최상위 48 비트는이 값의 부호 비트로 채워집니다.</target>
        </trans-unit>
        <trans-unit id="98d7b8a419dc2e1a1e55aeb89fee5123de4a6b5e" translate="yes" xml:space="preserve">
          <source>The least significant 16 bits of the resulting &lt;code&gt;ULong&lt;/code&gt; value are the same as the bits of this &lt;code&gt;UShort&lt;/code&gt; value, whereas the most significant 48 bits are filled with zeros.</source>
          <target state="translated">결과 &lt;code&gt;ULong&lt;/code&gt; 값 의 최하위 16 비트는 이 &lt;code&gt;UShort&lt;/code&gt; 값 의 비트와 동일 하지만 최상위 48 비트는 0으로 채워집니다.</target>
        </trans-unit>
        <trans-unit id="b511f5bcb1b166f6a21672ecd3a364142d43ef6e" translate="yes" xml:space="preserve">
          <source>The least significant 32 bits of the resulting &lt;code&gt;Long&lt;/code&gt; value are the same as the bits of this &lt;code&gt;Int&lt;/code&gt; value, whereas the most significant 32 bits are filled with the sign bit of this value.</source>
          <target state="translated">결과 &lt;code&gt;Long&lt;/code&gt; 값 의 최하위 32 비트는 이 &lt;code&gt;Int&lt;/code&gt; 값 의 비트와 동일 하지만 최상위 32 비트는이 값의 부호 비트로 채워집니다.</target>
        </trans-unit>
        <trans-unit id="8552752324805690a09e930c3347d0b3b76fb45a" translate="yes" xml:space="preserve">
          <source>The least significant 32 bits of the resulting &lt;code&gt;Long&lt;/code&gt; value are the same as the bits of this &lt;code&gt;UInt&lt;/code&gt; value, whereas the most significant 32 bits are filled with zeros.</source>
          <target state="translated">결과 &lt;code&gt;Long&lt;/code&gt; 값 의 최하위 32 비트는 이 &lt;code&gt;UInt&lt;/code&gt; 값 의 비트와 동일 하지만 최상위 32 비트는 0으로 채워집니다.</target>
        </trans-unit>
        <trans-unit id="13513c5d8d4b778bf7d2d02871ec67b342f92eb3" translate="yes" xml:space="preserve">
          <source>The least significant 32 bits of the resulting &lt;code&gt;ULong&lt;/code&gt; value are the same as the bits of this &lt;code&gt;Int&lt;/code&gt; value, whereas the most significant 32 bits are filled with the sign bit of this value.</source>
          <target state="translated">결과 &lt;code&gt;ULong&lt;/code&gt; 값 의 최하위 32 비트는 이 &lt;code&gt;Int&lt;/code&gt; 값 의 비트와 동일 하지만 최상위 32 비트는이 값의 부호 비트로 채워집니다.</target>
        </trans-unit>
        <trans-unit id="098196788f072e1b90241673f7cd1c8d4ddc487e" translate="yes" xml:space="preserve">
          <source>The least significant 32 bits of the resulting &lt;code&gt;ULong&lt;/code&gt; value are the same as the bits of this &lt;code&gt;UInt&lt;/code&gt; value, whereas the most significant 32 bits are filled with zeros.</source>
          <target state="translated">결과 &lt;code&gt;ULong&lt;/code&gt; 값 의 최하위 32 비트는 이 &lt;code&gt;UInt&lt;/code&gt; 값 의 비트와 동일 하지만 최상위 32 비트는 0으로 채워집니다.</target>
        </trans-unit>
        <trans-unit id="1e95934eab4e475329950f2eb8e7a3a03516b89c" translate="yes" xml:space="preserve">
          <source>The least significant 8 bits of the resulting &lt;code&gt;Char&lt;/code&gt; code are the same as the bits of this &lt;code&gt;Byte&lt;/code&gt; value, whereas the most significant 8 bits are filled with the sign bit of this value.</source>
          <target state="translated">결과 &lt;code&gt;Char&lt;/code&gt; 코드 의 최하위 8 비트는 이 &lt;code&gt;Byte&lt;/code&gt; 값 의 비트와 동일 하지만 최상위 8 비트는이 값의 부호 비트로 채워집니다.</target>
        </trans-unit>
        <trans-unit id="1ccfa3d5b3f0d4c2cadb8ddee394a5e74b7f3fb0" translate="yes" xml:space="preserve">
          <source>The least significant 8 bits of the resulting &lt;code&gt;Int&lt;/code&gt; value are the same as the bits of this &lt;code&gt;Byte&lt;/code&gt; value, whereas the most significant 24 bits are filled with the sign bit of this value.</source>
          <target state="translated">결과 &lt;code&gt;Int&lt;/code&gt; 값 의 최하위 8 비트는 이 &lt;code&gt;Byte&lt;/code&gt; 값 의 비트와 동일 하지만 최상위 24 비트는이 값의 부호 비트로 채워집니다.</target>
        </trans-unit>
        <trans-unit id="682e9bb2df532a75f2a73fb4a8682c3fe53c3f6f" translate="yes" xml:space="preserve">
          <source>The least significant 8 bits of the resulting &lt;code&gt;Int&lt;/code&gt; value are the same as the bits of this &lt;code&gt;UByte&lt;/code&gt; value, whereas the most significant 24 bits are filled with zeros.</source>
          <target state="translated">결과 &lt;code&gt;Int&lt;/code&gt; 값 의 최하위 8 비트는 이 &lt;code&gt;UByte&lt;/code&gt; 값 의 비트와 동일 하지만 최상위 24 비트는 0으로 채워집니다.</target>
        </trans-unit>
        <trans-unit id="740b8988c3d828c3ba10680439510f32d7f08bd4" translate="yes" xml:space="preserve">
          <source>The least significant 8 bits of the resulting &lt;code&gt;Long&lt;/code&gt; value are the same as the bits of this &lt;code&gt;Byte&lt;/code&gt; value, whereas the most significant 56 bits are filled with the sign bit of this value.</source>
          <target state="translated">결과 &lt;code&gt;Long&lt;/code&gt; 값 의 최하위 8 비트는 이 &lt;code&gt;Byte&lt;/code&gt; 값 의 비트와 동일 하지만 최상위 56 비트는이 값의 부호 비트로 채워집니다.</target>
        </trans-unit>
        <trans-unit id="f2986e4bdb9623eb7b0be806904f6c45008e66a1" translate="yes" xml:space="preserve">
          <source>The least significant 8 bits of the resulting &lt;code&gt;Long&lt;/code&gt; value are the same as the bits of this &lt;code&gt;UByte&lt;/code&gt; value, whereas the most significant 56 bits are filled with zeros.</source>
          <target state="translated">결과 &lt;code&gt;Long&lt;/code&gt; 값 의 최하위 8 비트는 이 &lt;code&gt;UByte&lt;/code&gt; 값 의 비트와 동일 하지만 최상위 56 비트는 0으로 채워집니다.</target>
        </trans-unit>
        <trans-unit id="da411f42fa8b3bbe7fd6d9ed1a7edbedcead90c8" translate="yes" xml:space="preserve">
          <source>The least significant 8 bits of the resulting &lt;code&gt;Short&lt;/code&gt; value are the same as the bits of this &lt;code&gt;Byte&lt;/code&gt; value, whereas the most significant 8 bits are filled with the sign bit of this value.</source>
          <target state="translated">결과 &lt;code&gt;Short&lt;/code&gt; 값 의 최하위 8 비트는 이 &lt;code&gt;Byte&lt;/code&gt; 값 의 비트와 동일 하지만 최상위 8 비트는이 값의 부호 비트로 채워집니다.</target>
        </trans-unit>
        <trans-unit id="dbca88370b969aea0b645fa67d458151bf144ef3" translate="yes" xml:space="preserve">
          <source>The least significant 8 bits of the resulting &lt;code&gt;Short&lt;/code&gt; value are the same as the bits of this &lt;code&gt;UByte&lt;/code&gt; value, whereas the most significant 8 bits are filled with zeros.</source>
          <target state="translated">결과 &lt;code&gt;Short&lt;/code&gt; 값 의 최하위 8 비트는 이 &lt;code&gt;UByte&lt;/code&gt; 값 의 비트와 동일 하지만 최상위 8 비트는 0으로 채워집니다.</target>
        </trans-unit>
        <trans-unit id="0705f7403c9d4340ca48e777c703d467c71d6c8f" translate="yes" xml:space="preserve">
          <source>The least significant 8 bits of the resulting &lt;code&gt;UInt&lt;/code&gt; value are the same as the bits of this &lt;code&gt;Byte&lt;/code&gt; value, whereas the most significant 24 bits are filled with the sign bit of this value.</source>
          <target state="translated">결과 &lt;code&gt;UInt&lt;/code&gt; 값 의 최하위 8 비트는 이 &lt;code&gt;Byte&lt;/code&gt; 값 의 비트와 동일 하지만 최상위 24 비트는이 값의 부호 비트로 채워집니다.</target>
        </trans-unit>
        <trans-unit id="e35a3b71a791931b3596ab2bd1edb46d9365dda1" translate="yes" xml:space="preserve">
          <source>The least significant 8 bits of the resulting &lt;code&gt;UInt&lt;/code&gt; value are the same as the bits of this &lt;code&gt;UByte&lt;/code&gt; value, whereas the most significant 24 bits are filled with zeros.</source>
          <target state="translated">결과 &lt;code&gt;UInt&lt;/code&gt; 값 의 최하위 8 비트는 이 &lt;code&gt;UByte&lt;/code&gt; 값 의 비트와 동일 하지만 최상위 24 비트는 0으로 채워집니다.</target>
        </trans-unit>
        <trans-unit id="fbe359060636f5088c741be0b327d7d46254bbcd" translate="yes" xml:space="preserve">
          <source>The least significant 8 bits of the resulting &lt;code&gt;ULong&lt;/code&gt; value are the same as the bits of this &lt;code&gt;Byte&lt;/code&gt; value, whereas the most significant 56 bits are filled with the sign bit of this value.</source>
          <target state="translated">결과 &lt;code&gt;ULong&lt;/code&gt; 값 의 최하위 8 비트는 이 &lt;code&gt;Byte&lt;/code&gt; 값 의 비트와 동일 하지만 최상위 56 비트는이 값의 부호 비트로 채워집니다.</target>
        </trans-unit>
        <trans-unit id="9d9c37d2ab226e9ed58e44937eac9a5c2afe8841" translate="yes" xml:space="preserve">
          <source>The least significant 8 bits of the resulting &lt;code&gt;ULong&lt;/code&gt; value are the same as the bits of this &lt;code&gt;UByte&lt;/code&gt; value, whereas the most significant 56 bits are filled with zeros.</source>
          <target state="translated">결과 &lt;code&gt;ULong&lt;/code&gt; 값 의 최하위 8 비트는 이 &lt;code&gt;UByte&lt;/code&gt; 값 의 비트와 동일 하지만 최상위 56 비트는 0으로 채워집니다.</target>
        </trans-unit>
        <trans-unit id="573a497b93bab09d8947aa89f58fd5f36237628f" translate="yes" xml:space="preserve">
          <source>The least significant 8 bits of the resulting &lt;code&gt;UShort&lt;/code&gt; value are the same as the bits of this &lt;code&gt;Byte&lt;/code&gt; value, whereas the most significant 8 bits are filled with the sign bit of this value.</source>
          <target state="translated">결과 &lt;code&gt;UShort&lt;/code&gt; 값 의 최하위 8 비트는 이 &lt;code&gt;Byte&lt;/code&gt; 값 의 비트와 동일 하지만 최상위 8 비트는이 값의 부호 비트로 채워집니다.</target>
        </trans-unit>
        <trans-unit id="d49f6edce25857427bee05e2a6463c8f203f6aab" translate="yes" xml:space="preserve">
          <source>The least significant 8 bits of the resulting &lt;code&gt;UShort&lt;/code&gt; value are the same as the bits of this &lt;code&gt;UByte&lt;/code&gt; value, whereas the most significant 8 bits are filled with zeros.</source>
          <target state="translated">결과 &lt;code&gt;UShort&lt;/code&gt; 값 의 최하위 8 비트는 이 &lt;code&gt;UByte&lt;/code&gt; 값 의 비트와 동일 하지만 최상위 8 비트는 0으로 채워집니다.</target>
        </trans-unit>
        <trans-unit id="1511f8695777128c7450dc6f9cc52fbdbfc512c7" translate="yes" xml:space="preserve">
          <source>The less obvious cases that belong to the &quot;grey area&quot; include handling corner cases differently, throwing an exception of a different type than before, changing behavior observable only through reflection, changes in undocumented/undefined behavior, renaming binary artifacts, etc. Sometimes such changes are very important and affect migration experience dramatically, sometimes they are insignificant.</source>
          <target state="translated">&quot;회색 영역&quot;에 속하는 덜 명백한 경우에는 코너 케이스를 다르게 처리하고, 이전과 다른 유형의 예외를 던지거나, 리플렉션을 통해서만 관찰 가능한 동작 변경, 문서화되지 않은 / 정의되지 않은 동작의 변경, 이진 아티팩트 이름 바꾸기 등이 있습니다. 변경은 매우 중요하며 마이그레이션 환경에 큰 영향을 미치며 때로는 중요하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="dd894256ff253457e13d98fae75ab576481e876c" translate="yes" xml:space="preserve">
          <source>The library format</source>
          <target state="translated">라이브러리 형식</target>
        </trans-unit>
        <trans-unit id="c48fdef888f67d5a66f513cae58be8d045c058e0" translate="yes" xml:space="preserve">
          <source>The library has been created in the current directory:</source>
          <target state="translated">라이브러리는 현재 디렉토리에 작성되었습니다.</target>
        </trans-unit>
        <trans-unit id="cff219119dad603b83453d082db1d0aa5cce3800" translate="yes" xml:space="preserve">
          <source>The lines returned do not include terminating line separators.</source>
          <target state="translated">반환 된 줄에는 종료 줄 구분 기호가 포함되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="c55560496e55797a8f7e15a83a7eef3064d61d19" translate="yes" xml:space="preserve">
          <source>The list can be empty:</source>
          <target state="translated">목록은 비어있을 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="0ec3834f8762f850d976d74a3444d0d24d17d417" translate="yes" xml:space="preserve">
          <source>The list is expected to be sorted so that the signs of the &lt;a href=&quot;binary-search#kotlin.collections%24binarySearch(kotlin.collections.List((kotlin.collections.binarySearch.T)),%20kotlin.Int,%20kotlin.Int,%20kotlin.Function1((kotlin.collections.binarySearch.T,%20kotlin.Int)))/comparison&quot;&gt;comparison&lt;/a&gt; function's return values ascend on the list elements, i.e. negative values come before zero and zeroes come before positive values. Otherwise, the result is undefined.</source>
          <target state="translated">목록은 &lt;a href=&quot;binary-search#kotlin.collections%24binarySearch(kotlin.collections.List((kotlin.collections.binarySearch.T)),%20kotlin.Int,%20kotlin.Int,%20kotlin.Function1((kotlin.collections.binarySearch.T,%20kotlin.Int)))/comparison&quot;&gt;비교&lt;/a&gt; 함수의 반환 값의 부호가 목록 요소에서 오름차순 으로 정렬 됩니다. 즉, 음수 값은 0 이전에, 0은 양수 값 앞에 오도록합니다. 그렇지 않으면 결과가 정의되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="ecc031fda17a51efc3a0c6e7f3483a236bf69e52" translate="yes" xml:space="preserve">
          <source>The list of immediate supertypes of this class, in the order they are listed in the source code.</source>
          <target state="translated">이 클래스의 직속 슈퍼 타입 목록은 소스 코드에 나열된 순서대로 나열됩니다.</target>
        </trans-unit>
        <trans-unit id="37daaa29c5ab04c74e60f96a3c80a72671943c78" translate="yes" xml:space="preserve">
          <source>The list of possible time measurement units, in which a duration can be expressed.</source>
          <target state="translated">기간을 표현할 수있는 가능한 시간 측정 단위 목록입니다.</target>
        </trans-unit>
        <trans-unit id="e7cfcc4e5ebb2fa63d0c44bdcf02351c03c9e8d4" translate="yes" xml:space="preserve">
          <source>The list of the immediate subclasses if this class is a sealed class, or an empty list otherwise.</source>
          <target state="translated">이 클래스가 봉인 된 클래스 인 경우 직접 서브 클래스의 목록이거나 그렇지 않은 경우 빈 목록입니다.</target>
        </trans-unit>
        <trans-unit id="af028a3423820dfb61266857373312e6321072a9" translate="yes" xml:space="preserve">
          <source>The list of type parameters of this callable.</source>
          <target state="translated">이 호출 가능의 유형 매개 변수 목록입니다.</target>
        </trans-unit>
        <trans-unit id="3983145b3c17efebd4ca1c3dd6839e784929aaa8" translate="yes" xml:space="preserve">
          <source>The list of type parameters of this class. This list does &lt;em&gt;not&lt;/em&gt; include type parameters of outer classes.</source>
          <target state="translated">이 클래스의 타입 파라미터의리스트입니다. 이 목록에는 외부 클래스의 유형 매개 변수가 포함 되지 &lt;em&gt;않습니다&lt;/em&gt; .</target>
        </trans-unit>
        <trans-unit id="5e5604d93ac6b4b21b3fc3fde66a87e1782f115e" translate="yes" xml:space="preserve">
          <source>The list passed as a receiver to the &lt;a href=&quot;build-list#kotlin.collections%24buildList(kotlin.Function1((kotlin.collections.MutableList((kotlin.collections.buildList.E)),%20kotlin.Unit)))/builderAction&quot;&gt;builderAction&lt;/a&gt; is valid only inside that function. Using it outside of the function produces an unspecified behavior.</source>
          <target state="translated">&lt;a href=&quot;build-list#kotlin.collections%24buildList(kotlin.Function1((kotlin.collections.MutableList((kotlin.collections.buildList.E)),%20kotlin.Unit)))/builderAction&quot;&gt;builderAction에&lt;/a&gt; 수신자로 전달 된 목록은 해당 함수 내에서만 유효합니다. 함수 외부에서 사용하면 지정되지 않은 동작이 생성됩니다.</target>
        </trans-unit>
        <trans-unit id="58bea952dbde503be437ceaa0dd1f57601cd3546" translate="yes" xml:space="preserve">
          <source>The list passed as a receiver to the &lt;a href=&quot;build-list#kotlin.collections%24buildList(kotlin.Int,%20kotlin.Function1((kotlin.collections.MutableList((kotlin.collections.buildList.E)),%20kotlin.Unit)))/builderAction&quot;&gt;builderAction&lt;/a&gt; is valid only inside that function. Using it outside of the function produces an unspecified behavior.</source>
          <target state="translated">&lt;a href=&quot;build-list#kotlin.collections%24buildList(kotlin.Int,%20kotlin.Function1((kotlin.collections.MutableList((kotlin.collections.buildList.E)),%20kotlin.Unit)))/builderAction&quot;&gt;builderAction에&lt;/a&gt; 수신자로 전달 된 목록은 해당 함수 내에서만 유효합니다. 함수 외부에서 사용하면 지정되지 않은 동작이 생성됩니다.</target>
        </trans-unit>
        <trans-unit id="7dd6f3d5d8e8c83c9d11a7ed45e7362cc872b1a5" translate="yes" xml:space="preserve">
          <source>The locking in this example is fine-grained, so it pays the price. However, it is a good choice for some situations where you absolutely must modify some shared state periodically, but there is no natural thread that this state is confined to.</source>
          <target state="translated">이 예제의 잠금은 세밀하게 구성되어 있으므로 가격을 지불합니다. 그러나 일부 공유 상태를 주기적으로 절대적으로 수정해야하지만이 상태가 제한되는 자연스러운 스레드는없는 일부 상황에 적합합니다.</target>
        </trans-unit>
        <trans-unit id="993a245cc6dcc5a6d2356a7f7d1259d26b6ea137" translate="yes" xml:space="preserve">
          <source>The loop variable(s), if any, must be declared outside of the &lt;code&gt;while&lt;/code&gt; loop, and are therefore available for inspection afterwards, at which point they will contain the value(s) that made the loop condition false.</source>
          <target state="translated">루프 변수 (있는 경우)는 &lt;code&gt;while&lt;/code&gt; 루프 외부에서 선언해야하며 이후에 검사에 사용할 수 있으며이 시점에서 루프 조건을 거짓으로 만든 값이 포함됩니다.</target>
        </trans-unit>
        <trans-unit id="f10abe77e5b16e3b7aa73cabd19e9ac919e5868d" translate="yes" xml:space="preserve">
          <source>The main code is straightforward:</source>
          <target state="translated">기본 코드는 간단합니다.</target>
        </trans-unit>
        <trans-unit id="21b17843ae6bab256e1f2d7c26e40966048480db" translate="yes" xml:space="preserve">
          <source>The main code starts and connects the whole pipeline:</source>
          <target state="translated">기본 코드는 전체 파이프 라인을 시작하고 연결합니다.</target>
        </trans-unit>
        <trans-unit id="1415e580114f63d99c0e8622a1104c3c733c68ba" translate="yes" xml:space="preserve">
          <source>The main disadvantage of changing the code style in an existing project is that the blame/annotate VCS feature will point to irrelevant commits more often. While each VCS has some kind of way to deal with this problem (&lt;a href=&quot;https://www.jetbrains.com/help/idea/investigate-changes.html&quot;&gt;&quot;Annotate Previous Revision&quot;&lt;/a&gt; can be used in IntelliJ IDEA), it's important to decide if a new style is worth all the effort. The practice of separating reformatting commits from meaningful changes can help a lot with later investigations.</source>
          <target state="translated">기존 프로젝트에서 코드 스타일을 변경하는 주된 단점은 VCS 기능에 대한 책임 / 주석이 관련없는 커밋을 더 자주 지적한다는 것입니다. 각 VCS에는이 문제를 처리 할 수있는 방법이 있지만 ( &lt;a href=&quot;https://www.jetbrains.com/help/idea/investigate-changes.html&quot;&gt;&quot;&lt;/a&gt; IntelliJ IDEA에서 &quot;주석 수정 주석 &quot;을 사용할 수 있음) 새로운 스타일이 모든 노력에 가치가 있는지 여부를 결정하는 것이 중요합니다. 재 포맷 커밋을 의미있는 변경과 분리하면 나중에 조사 할 때 많은 도움이 될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="f0255c27371bb337a0275ae99c66e66aefbb2cf2" translate="yes" xml:space="preserve">
          <source>The main function just launches a coroutine to print results of &lt;code&gt;switchMapDeferreds&lt;/code&gt; and sends some test data to it:</source>
          <target state="translated">메인 함수는 코 루틴을 시작하여 &lt;code&gt;switchMapDeferreds&lt;/code&gt; 의 결과를 인쇄 하고 테스트 데이터를 보냅니다.</target>
        </trans-unit>
        <trans-unit id="3fc6ee8401f75644154b5d3dd20d9f0be0f58394" translate="yes" xml:space="preserve">
          <source>The main rules regarding expected and actual declarations are:</source>
          <target state="translated">예상 및 실제 선언과 관련된 주요 규칙은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="c0a11bc5688f898de97456dfcb543cf05d79b8a1" translate="yes" xml:space="preserve">
          <source>The main thread (that runs the &lt;code&gt;main()&lt;/code&gt; function) must wait until our coroutine completes, otherwise the program ends before &lt;code&gt;Hello&lt;/code&gt; is printed.</source>
          <target state="translated">메인 스레드 ( &lt;code&gt;main()&lt;/code&gt; 함수 를 실행하는 )는 코 루틴이 완료 될 때까지 기다려야합니다. 그렇지 않으면 &lt;code&gt;Hello&lt;/code&gt; 가 인쇄 되기 전에 프로그램이 종료됩니다 .</target>
        </trans-unit>
        <trans-unit id="42842e42bea5093cdb441dde49057dadae37db65" translate="yes" xml:space="preserve">
          <source>The map passed as a receiver to the &lt;a href=&quot;build-map#kotlin.collections%24buildMap(kotlin.Function1((kotlin.collections.MutableMap((kotlin.collections.buildMap.K,%20kotlin.collections.buildMap.V)),%20kotlin.Unit)))/builderAction&quot;&gt;builderAction&lt;/a&gt; is valid only inside that function. Using it outside of the function produces an unspecified behavior.</source>
          <target state="translated">&lt;a href=&quot;build-map#kotlin.collections%24buildMap(kotlin.Function1((kotlin.collections.MutableMap((kotlin.collections.buildMap.K,%20kotlin.collections.buildMap.V)),%20kotlin.Unit)))/builderAction&quot;&gt;builderAction에&lt;/a&gt; 수신자로 전달 된 맵은 해당 함수 내에서만 유효합니다. 함수 외부에서 사용하면 지정되지 않은 동작이 생성됩니다.</target>
        </trans-unit>
        <trans-unit id="a53f2c2933b5a52627852e1c168f9c0fc9ce94e1" translate="yes" xml:space="preserve">
          <source>The map passed as a receiver to the &lt;a href=&quot;build-map#kotlin.collections%24buildMap(kotlin.Int,%20kotlin.Function1((kotlin.collections.MutableMap((kotlin.collections.buildMap.K,%20kotlin.collections.buildMap.V)),%20kotlin.Unit)))/builderAction&quot;&gt;builderAction&lt;/a&gt; is valid only inside that function. Using it outside of the function produces an unspecified behavior.</source>
          <target state="translated">&lt;a href=&quot;build-map#kotlin.collections%24buildMap(kotlin.Int,%20kotlin.Function1((kotlin.collections.MutableMap((kotlin.collections.buildMap.K,%20kotlin.collections.buildMap.V)),%20kotlin.Unit)))/builderAction&quot;&gt;builderAction에&lt;/a&gt; 수신자로 전달 된 맵은 해당 함수 내에서만 유효합니다. 함수 외부에서 사용하면 지정되지 않은 동작이 생성됩니다.</target>
        </trans-unit>
        <trans-unit id="2c831066dd6087f2516b15d01bfb68e39b9bcf05" translate="yes" xml:space="preserve">
          <source>The maximum number of substrings to return. Zero by default means no limit is set.</source>
          <target state="translated">반환 할 최대 부분 문자열 수입니다. 기본적으로 0은 제한이 설정되지 않았 음을 의미합니다.</target>
        </trans-unit>
        <trans-unit id="4e76f165176d7e28c6b59c285a7ee8af5a71fc72" translate="yes" xml:space="preserve">
          <source>The maximum radix available for conversion to and from strings.</source>
          <target state="translated">문자열로 /에서 변환 할 수있는 최대 기수입니다.</target>
        </trans-unit>
        <trans-unit id="38f9246447f2685e9dd36b4c8d7e0bf7ff2fb023" translate="yes" xml:space="preserve">
          <source>The maximum value in the range (inclusive).</source>
          <target state="translated">범위 내 최대 값입니다 (포함).</target>
        </trans-unit>
        <trans-unit id="cc9397547e8b9fc8e2131246f8cce9b80a975147" translate="yes" xml:space="preserve">
          <source>The maximum value of a Unicode code point. Kotlin/Native specific.</source>
          <target state="translated">유니 코드 코드 포인트의 최대 값 코 틀린 / 네이티브 전용.</target>
        </trans-unit>
        <trans-unit id="af496c450bf387c2b7d7ee0dc32c766b9f1b66c1" translate="yes" xml:space="preserve">
          <source>The maximum value of a Unicode high-surrogate code unit.</source>
          <target state="translated">유니 코드 상위 대리 코드 단위의 최대 값입니다.</target>
        </trans-unit>
        <trans-unit id="68f9d655dde4db0c3b71fc09c97d0f87e103d52b" translate="yes" xml:space="preserve">
          <source>The maximum value of a Unicode low-surrogate code unit.</source>
          <target state="translated">유니 코드 낮은 대리 코드 단위의 최대 값입니다.</target>
        </trans-unit>
        <trans-unit id="0cb5887284a08dd04202e0863d133d8ed431392d" translate="yes" xml:space="preserve">
          <source>The maximum value of a Unicode surrogate code unit.</source>
          <target state="translated">유니 코드 대리 코드 단위의 최대 값입니다.</target>
        </trans-unit>
        <trans-unit id="ea009c16dc0030623058aff99eec7f7c7973366c" translate="yes" xml:space="preserve">
          <source>The maximum value of a character code unit.</source>
          <target state="translated">문자 코드 단위의 최대 값입니다.</target>
        </trans-unit>
        <trans-unit id="dce9edb79f3aca5450e6dfb555e231182e2c5340" translate="yes" xml:space="preserve">
          <source>The meaning of a visibility modifier depends on whether it's applied to a top-level declaration or to a declaration inside a class. For top-level declarations:</source>
          <target state="translated">가시성 수정 자의 의미는 최상위 선언에 적용되는지 또는 클래스 내부의 선언에 적용되는지에 따라 다릅니다. 최상위 선언의 경우 :</target>
        </trans-unit>
        <trans-unit id="2f5715d8d7aab68289e0b8a47e46f1764f30f76e" translate="yes" xml:space="preserve">
          <source>The message explaining the deprecation and recommending an alternative API to use.</source>
          <target state="translated">지원 중단을 설명하고 사용할 대체 API를 권장하는 메시지입니다.</target>
        </trans-unit>
        <trans-unit id="1d7af1b2ed876762350f57904a38e801662ebbf4" translate="yes" xml:space="preserve">
          <source>The meta-runner for Kotlin is available on &lt;a href=&quot;https://github.com/jonnyzzz/Kotlin.TeamCity&quot;&gt;GitHub&lt;/a&gt;. If using TeamCity 9 or above, we can now simply import that meta-runner from the TeamCity user interface</source>
          <target state="translated">Kotlin의 메타 러너는 &lt;a href=&quot;https://github.com/jonnyzzz/Kotlin.TeamCity&quot;&gt;GitHub에서&lt;/a&gt; 사용할 수 있습니다 . TeamCity 9 이상을 사용하는 경우 TeamCity 사용자 인터페이스에서 해당 메타 러너를 간단히 가져올 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="cbb5d37dc4d790a9dba2a103cd7fc2ea1af9db2f" translate="yes" xml:space="preserve">
          <source>The minimum radix available for conversion to and from strings.</source>
          <target state="translated">문자열로 /에서 변환 할 수있는 최소 기수입니다.</target>
        </trans-unit>
        <trans-unit id="3eb6b21e0f2a2eb117e5ca90292e6def24614862" translate="yes" xml:space="preserve">
          <source>The minimum value in the range.</source>
          <target state="translated">범위의 최소값입니다.</target>
        </trans-unit>
        <trans-unit id="480df25e783a3ddb0c5eabcc07d40b9a21fd328e" translate="yes" xml:space="preserve">
          <source>The minimum value of a Unicode code point. Kotlin/Native specific.</source>
          <target state="translated">유니 코드 코드 포인트의 최소값입니다. 코 틀린 / 네이티브 전용.</target>
        </trans-unit>
        <trans-unit id="c11b4b4a4cfd50662da801109ced72e7ef8083ad" translate="yes" xml:space="preserve">
          <source>The minimum value of a Unicode high-surrogate code unit.</source>
          <target state="translated">유니 코드 상위 대리 코드 단위의 최소값입니다.</target>
        </trans-unit>
        <trans-unit id="7a57e546e08f3cd66a3ed8cebd57f37a4137a78d" translate="yes" xml:space="preserve">
          <source>The minimum value of a Unicode low-surrogate code unit.</source>
          <target state="translated">유니 코드 낮은 대리 코드 단위의 최소값입니다.</target>
        </trans-unit>
        <trans-unit id="47b523f1a39e9c9f7bda17fc85b300ab3e0da311" translate="yes" xml:space="preserve">
          <source>The minimum value of a Unicode surrogate code unit.</source>
          <target state="translated">유니 코드 대리 코드 단위의 최소값입니다.</target>
        </trans-unit>
        <trans-unit id="e3fc4d1ab4988e695801daf57bd33d3f470c3668" translate="yes" xml:space="preserve">
          <source>The minimum value of a character code unit.</source>
          <target state="translated">문자 코드 단위의 최소값입니다.</target>
        </trans-unit>
        <trans-unit id="d80a9d6c0ddeb1216ece2df4cc2d7d63382408e4" translate="yes" xml:space="preserve">
          <source>The minimum value of a supplementary code point, &lt;code&gt;\u0x10000&lt;/code&gt;. Kotlin/Native specific.</source>
          <target state="translated">보조 코드 포인트의 최소값, &lt;code&gt;\u0x10000&lt;/code&gt; . 코 틀린 / 네이티브 전용.</target>
        </trans-unit>
        <trans-unit id="39042f06ab046e1bfc15de4ecf52d5a28eec3294" translate="yes" xml:space="preserve">
          <source>The modifier can be used on &lt;code&gt;var&lt;/code&gt; properties declared inside the body of a class (not in the primary constructor, and only when the property does not have a custom getter or setter) and, since Kotlin 1.2, for top-level properties and local variables. The type of the property or variable must be non-null, and it must not be a primitive type.</source>
          <target state="translated">이 수정자는 클래스 본문 내부에 선언 된 &lt;code&gt;var&lt;/code&gt; 속성 (기본 생성자가 아닌 속성에 사용자 지정 getter 또는 setter가없는 경우에만) 및 Kotlin 1.2부터 최상위 속성 및 로컬 변수에 사용할 수 있습니다. . 특성 또는 변수의 유형은 널이 아니어야하며 기본 유형이 아니어야합니다.</target>
        </trans-unit>
        <trans-unit id="bb919d11f95900a1425b0a32e4257389d1fc669f" translate="yes" xml:space="preserve">
          <source>The most &quot;natural&quot; placement is in the object &lt;code&gt;nativeHeap&lt;/code&gt;. It corresponds to allocating native memory with &lt;code&gt;malloc&lt;/code&gt; and provides an additional &lt;code&gt;.free()&lt;/code&gt; operation to free allocated memory:</source>
          <target state="translated">가장 자연스러운 위치는 &lt;code&gt;nativeHeap&lt;/code&gt; 객체에 있습니다 . &lt;code&gt;malloc&lt;/code&gt; 에 기본 메모리를 할당하는 것에 해당하며 할당 된 메모리를 해제하기 위해 추가 &lt;code&gt;.free()&lt;/code&gt; 작업을 제공합니다.</target>
        </trans-unit>
        <trans-unit id="0d14eba091c54d0c22e0562741651e98077e032c" translate="yes" xml:space="preserve">
          <source>The most basic reflection feature is getting the runtime reference to a Kotlin class. To obtain the reference to a statically known Kotlin class, you can use the &lt;em&gt;class literal&lt;/em&gt; syntax:</source>
          <target state="translated">가장 기본적인 리플렉션 기능은 Kotlin 클래스에 대한 런타임 참조를 얻는 것입니다. 정적으로 알려진 Kotlin 클래스에 대한 참조를 얻으려면 &lt;em&gt;클래스 리터럴&lt;/em&gt; 구문을 사용할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="ae0dbb4ff6b4fc6cc9b694111494978916ff6daf" translate="yes" xml:space="preserve">
          <source>The most basic usage of enum classes is implementing type-safe enums:</source>
          <target state="translated">열거 형 클래스의 가장 기본적인 사용법은 형식 안전 열거 형을 구현하는 것입니다.</target>
        </trans-unit>
        <trans-unit id="564a165b2993e039b868e117559d08b7cdc98e88" translate="yes" xml:space="preserve">
          <source>The most common kind of properties simply reads from (and maybe writes to) a backing field. On the other hand, with custom getters and setters one can implement any behaviour of a property. Somewhere in between, there are certain common patterns of how a property may work. A few examples: lazy values, reading from a map by a given key, accessing a database, notifying listener on access, etc.</source>
          <target state="translated">가장 일반적인 종류의 속성은 단순히 지원 필드에서 읽거나 쓸 수 있습니다. 반면에 커스텀 게터와 세터를 사용하면 속성의 모든 동작을 구현할 수 있습니다. 그 사이 어딘가에는 속성이 작동하는 방식에 대한 일반적인 패턴이 있습니다. 몇 가지 예 : 게으른 값, 주어진 키로 맵에서 읽기, 데이터베이스에 액세스, 리스너에게 액세스에 알리기 등</target>
        </trans-unit>
        <trans-unit id="d5cbdfb8e81de653dd867a75b87523ff1d242141" translate="yes" xml:space="preserve">
          <source>The most common type of constraint is an &lt;strong&gt;upper bound&lt;/strong&gt; that corresponds to Java's &lt;em&gt;extends&lt;/em&gt; keyword:</source>
          <target state="translated">가장 일반적인 제약 유형은 Java의 &lt;em&gt;extends&lt;/em&gt; 키워드에 해당 하는 &lt;strong&gt;상한&lt;/strong&gt; 입니다 .&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="368d747cfcb5fb4e353c85a7469dfacbb5453495" translate="yes" xml:space="preserve">
          <source>The most common way to create a collection is with the standard library functions &lt;a href=&quot;../../api/latest/jvm/stdlib/kotlin.collections/list-of&quot;&gt;&lt;code&gt;listOf&amp;lt;T&amp;gt;()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../../api/latest/jvm/stdlib/kotlin.collections/set-of&quot;&gt;&lt;code&gt;setOf&amp;lt;T&amp;gt;()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../../api/latest/jvm/stdlib/kotlin.collections/mutable-list-of&quot;&gt;&lt;code&gt;mutableListOf&amp;lt;T&amp;gt;()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../../api/latest/jvm/stdlib/kotlin.collections/mutable-set-of&quot;&gt;&lt;code&gt;mutableSetOf&amp;lt;T&amp;gt;()&lt;/code&gt;&lt;/a&gt;. If you provide a comma-separated list of collection elements as arguments, the compiler detects the element type automatically. When creating empty collections, specify the type explicitly.</source>
          <target state="translated">컬렉션을 만드는 가장 일반적인 방법은 표준 라이브러리 함수 &lt;a href=&quot;../../api/latest/jvm/stdlib/kotlin.collections/list-of&quot;&gt; &lt;code&gt;listOf&amp;lt;T&amp;gt;()&lt;/code&gt; &lt;/a&gt; , &lt;a href=&quot;../../api/latest/jvm/stdlib/kotlin.collections/set-of&quot;&gt; &lt;code&gt;setOf&amp;lt;T&amp;gt;()&lt;/code&gt; &lt;/a&gt; , &lt;a href=&quot;../../api/latest/jvm/stdlib/kotlin.collections/mutable-list-of&quot;&gt; &lt;code&gt;mutableListOf&amp;lt;T&amp;gt;()&lt;/code&gt; &lt;/a&gt; , &lt;a href=&quot;../../api/latest/jvm/stdlib/kotlin.collections/mutable-set-of&quot;&gt; &lt;code&gt;mutableSetOf&amp;lt;T&amp;gt;()&lt;/code&gt; &lt;/a&gt; 입니다. 쉼표로 구분 된 컬렉션 요소 목록을 인수로 제공하면 컴파일러는 요소 유형을 자동으로 감지합니다. 빈 모음을 만들 때는 유형을 명시 적으로 지정하십시오.</target>
        </trans-unit>
        <trans-unit id="8af07c08b76ea4e058b575d399481b358534d1dd" translate="yes" xml:space="preserve">
          <source>The most common webpack adjustments can be made directly via the &lt;code&gt;kotlin.js.browser.webpackTask&lt;/code&gt; configuration block in the Gradle build file.</source>
          <target state="translated">가장 일반적인 웹팩 조정은 Gradle 빌드 파일 의 &lt;code&gt;kotlin.js.browser.webpackTask&lt;/code&gt; 구성 블록을 통해 직접 수행 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="b853cf446ccffab0ecfd031a6ec9cd9f7555703c" translate="yes" xml:space="preserve">
          <source>The most notable change is in the continuation indentation policy. There's a nice idea to use the double indent for showing that a multi-line expression hasn't ended on the previous line. This is a very simple and general rule, but several Kotlin constructions look a bit awkward when they are formatted this way. In Kotlin Coding Conventions it's recommended to use a single indent in cases where the long continuation indent has been forced before</source>
          <target state="translated">가장 눈에 띄는 변화는 연속 들여 쓰기 정책입니다. 여러 줄로 된 표현식이 이전 줄에서 끝나지 않았 음을 보여주기 위해 이중 들여 쓰기를 사용하는 것이 좋습니다. 이것은 매우 간단하고 일반적인 규칙이지만 여러 Kotlin 구조는 이러한 방식으로 형식이 지정되면 약간 어색해 보입니다. Kotlin Coding Conventions에서는 이전에 긴 연속 들여 쓰기를 강요 한 경우 단일 들여 쓰기를 사용하는 것이 좋습니다.</target>
        </trans-unit>
        <trans-unit id="e8c58687aab400a3400843ec6513c56c72bdb694" translate="yes" xml:space="preserve">
          <source>The most obvious practical reason to cancel execution of a coroutine is because its execution time has exceeded some timeout. While you can manually track the reference to the corresponding &lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/-job/index.html&quot;&gt;Job&lt;/a&gt; and launch a separate coroutine to cancel the tracked one after delay, there is a ready to use &lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/with-timeout.html&quot;&gt;withTimeout&lt;/a&gt; function that does it. Look at the following example:</source>
          <target state="translated">코 루틴 실행을 취소하는 가장 확실한 실제 이유는 실행 시간이 시간 초과를 초과했기 때문입니다. 해당 &lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/-job/index.html&quot;&gt;작업에&lt;/a&gt; 대한 참조를 수동으로 추적하고 별도의 코 루틴을 실행하여 지연된 후 추적 된 것을 취소 할 수는 있지만이를 수행 할 수있는 &lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/with-timeout.html&quot;&gt;with timeout&lt;/a&gt; 기능이 있습니다. 다음 예를보십시오.</target>
        </trans-unit>
        <trans-unit id="d08f23af81c5dad7c4dca8d8027b602b0ab864b4" translate="yes" xml:space="preserve">
          <source>The most peculiar feature of &lt;code&gt;dynamic&lt;/code&gt; is that we are allowed to call &lt;strong&gt;any&lt;/strong&gt; property or function with any parameters on a &lt;code&gt;dynamic&lt;/code&gt; variable:</source>
          <target state="translated">의 가장 독특한 기능 &lt;code&gt;dynamic&lt;/code&gt; 우리가 전화를 허용한다는 것입니다 &lt;strong&gt;어떤&lt;/strong&gt; A의 매개 변수와 속성이나 기능 &lt;code&gt;dynamic&lt;/code&gt; 변수를 :</target>
        </trans-unit>
        <trans-unit id="6d6182bd9b2931240a569f7b50076d9f1ba63de8" translate="yes" xml:space="preserve">
          <source>The most precise time source available in the platform.</source>
          <target state="translated">플랫폼에서 사용할 수있는 가장 정확한 시간 소스입니다.</target>
        </trans-unit>
        <trans-unit id="3c05df95cb8e9db1a4f2601246ac944d5c8bd276" translate="yes" xml:space="preserve">
          <source>The multiplatform projects and multiplatform libraries are discussed in the &lt;a href=&quot;../../reference/multiplatform&quot;&gt;documentation&lt;/a&gt; too.</source>
          <target state="translated">멀티 플랫폼 프로젝트 및 멀티 플랫폼 라이브러리는 &lt;a href=&quot;../../reference/multiplatform&quot;&gt;문서&lt;/a&gt; 에서도 설명합니다 .</target>
        </trans-unit>
        <trans-unit id="6595e5fe1547363b463835d421622aad398ae9cc" translate="yes" xml:space="preserve">
          <source>The name contains the following parts (some of them may be empty):</source>
          <target state="translated">이름에는 다음과 같은 부분이 포함됩니다 (일부는 비어있을 수 있음).</target>
        </trans-unit>
        <trans-unit id="be2bbb4b7f64e74c76f66a7956619caeb8e3f0ff" translate="yes" xml:space="preserve">
          <source>The name deque is short for &quot;double ended queue&quot; and is usually pronounced &quot;deck&quot;.</source>
          <target state="translated">deque라는 이름은 &quot;double ended queue&quot;의 줄임말이며 일반적으로 &quot;deck&quot;으로 발음됩니다.</target>
        </trans-unit>
        <trans-unit id="705b141c8de1d697224950845ea5a1b7afb58d54" translate="yes" xml:space="preserve">
          <source>The name of a class is usually a noun or a noun phrase explaining what the class &lt;em&gt;is&lt;/em&gt;: &lt;code&gt;List&lt;/code&gt;, &lt;code&gt;PersonReader&lt;/code&gt;.</source>
          <target state="translated">클래스의 이름은 일반적으로 클래스가 무엇인지 설명하는 명사 또는 명사구 &lt;em&gt;입니다&lt;/em&gt; . &lt;code&gt;List&lt;/code&gt; , &lt;code&gt;PersonReader&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="2218455df585d83e3681475aae4631f54b57ae59" translate="yes" xml:space="preserve">
          <source>The name of a class used by itself (not as a qualifier to another name) acts as a reference to the companion object of the class (whether named or not):</source>
          <target state="translated">다른 이름의 한정자가 아닌 자체적으로 사용되는 클래스 이름은 클래스의 동반 객체에 대한 참조 역할을합니다 (이름 지정 여부에 관계없이).</target>
        </trans-unit>
        <trans-unit id="07fe46086dbe239fd375c49037bb37bff00ee0c4" translate="yes" xml:space="preserve">
          <source>The name of a method is usually a verb or a verb phrase saying what the method &lt;em&gt;does&lt;/em&gt;: &lt;code&gt;close&lt;/code&gt;, &lt;code&gt;readPersons&lt;/code&gt;. The name should also suggest if the method is mutating the object or returning a new one. For instance &lt;code&gt;sort&lt;/code&gt; is sorting a collection in place, while &lt;code&gt;sorted&lt;/code&gt; is returning a sorted copy of the collection.</source>
          <target state="translated">방법의 이름은 일반적으로 동사 또는 방법은 무엇을 말하는 동사 구문입니다 &lt;em&gt;않습니다&lt;/em&gt; : &lt;code&gt;close&lt;/code&gt; , &lt;code&gt;readPersons&lt;/code&gt; . 이름은 또한 메소드가 오브젝트를 변경하거나 새 오브젝트를 리턴하는지 제안해야합니다. 예를 들어 &lt;code&gt;sort&lt;/code&gt; 는 컬렉션을 제자리에 정렬하는 반면 &lt;code&gt;sorted&lt;/code&gt; 는 컬렉션의 정렬 된 복사본을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="07c434a5d635392f2cc52f562338d62b0cd9ae9a" translate="yes" xml:space="preserve">
          <source>The name of the companion object can be omitted, in which case the name &lt;code&gt;Companion&lt;/code&gt; will be used:</source>
          <target state="translated">컴패니언 객체의 이름은 생략 할 수 있으며,이 경우 &lt;code&gt;Companion&lt;/code&gt; 이름 이 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="ba35193d0490ae1490a81583acf93693abaa382e" translate="yes" xml:space="preserve">
          <source>The name of the file should describe what the code in the file does. Therefore, you should avoid using meaningless words such as &quot;Util&quot; in file names.</source>
          <target state="translated">파일 이름은 파일의 코드가 수행하는 작업을 설명해야합니다. 따라서 파일 이름에 &quot;Util&quot;과 같은 의미없는 단어를 사용하지 않아야합니다.</target>
        </trans-unit>
        <trans-unit id="3aecf5d5ce4130f99667312567cec868e0f727ee" translate="yes" xml:space="preserve">
          <source>The name of the generated Java class can be changed using the &lt;code&gt;@JvmName&lt;/code&gt; annotation:</source>
          <target state="translated">생성 된 Java 클래스의 이름은 &lt;code&gt;@JvmName&lt;/code&gt; 주석을 사용하여 변경할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="c5f1bfd2676f7023c48bd8f681608f158236c940" translate="yes" xml:space="preserve">
          <source>The name of the target (if specified) or the project</source>
          <target state="translated">대상 (지정된 경우) 또는 프로젝트의 이름</target>
        </trans-unit>
        <trans-unit id="7eeccd568a57bbe2529083f026a7111bc3da5193" translate="yes" xml:space="preserve">
          <source>The name of the task that builds the resulting artifacts of this target.</source>
          <target state="translated">이 대상의 결과 아티팩트를 빌드하는 태스크의 이름입니다.</target>
        </trans-unit>
        <trans-unit id="cbba3c187c456ab45b79f8154b1183097b8b2546" translate="yes" xml:space="preserve">
          <source>The name of this callable as it was declared in the source code. If the callable has no name, a special invented name is created. Nameless callables include:</source>
          <target state="translated">소스 코드에서 선언 된이 호출 가능의 이름입니다. 호출 가능한 이름이 없으면 특별한 발명 된 이름이 만들어집니다. 이름없는 콜 러블은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="688bb052b4a717479ab8663cafb721fc37d4378a" translate="yes" xml:space="preserve">
          <source>The name of this type parameter as it was declared in the source code.</source>
          <target state="translated">소스 코드에서 선언 된이 유형 매개 변수의 이름입니다.</target>
        </trans-unit>
        <trans-unit id="25f073ea1bd96da303a6eb4e8f3418d2fb774887" translate="yes" xml:space="preserve">
          <source>The names of Kotlin classes and interfaces are prefixed when imported to Objective-C. The prefix is derived from the framework name.</source>
          <target state="translated">Kotlin 클래스 및 인터페이스 이름은 Objective-C로 가져올 때 접두사가 붙습니다. 접두사는 프레임 워크 이름에서 파생됩니다.</target>
        </trans-unit>
        <trans-unit id="69675486a4053839ac9b38d8b7b0c3ec7c01c08b" translate="yes" xml:space="preserve">
          <source>The names of the tasks in Android Projects contain the &lt;a href=&quot;https://developer.android.com/studio/build/build-variants.html&quot;&gt;build variant&lt;/a&gt; names and follow the pattern &lt;code&gt;compile&amp;lt;BuildVariant&amp;gt;Kotlin&lt;/code&gt;, for example, &lt;code&gt;compileDebugKotlin&lt;/code&gt;, &lt;code&gt;compileReleaseUnitTestKotlin&lt;/code&gt;.</source>
          <target state="translated">Android 프로젝트의 태스크 이름에는 &lt;a href=&quot;https://developer.android.com/studio/build/build-variants.html&quot;&gt;빌드 변형&lt;/a&gt; 이름이 포함되어 있으며 &lt;code&gt;compile&amp;lt;BuildVariant&amp;gt;Kotlin&lt;/code&gt; 패턴 ( 예 : &lt;code&gt;compileDebugKotlin&lt;/code&gt; , &lt;code&gt;compileReleaseUnitTestKotlin&lt;/code&gt; )을 따릅니다 .</target>
        </trans-unit>
        <trans-unit id="b01e22b1729a53f5c38e9b03b567bbe208d510c5" translate="yes" xml:space="preserve">
          <source>The names of these tasks were created from the formula: &lt;code&gt;run[Debug|Release]Executable&amp;lt;target name&amp;gt;&lt;/code&gt;, where &lt;code&gt;target name&lt;/code&gt; is the capitalized target name that we specified in the &lt;code&gt;build.gradle.kts&lt;/code&gt;&lt;code&gt;build.gradle&lt;/code&gt; file out of our build, &lt;code&gt;&quot;native&quot;&lt;/code&gt; in our case. Let's run the task in the IDE. For that, let's open the Gradle Tool Window and find the task in the list:</source>
          <target state="translated">이러한 작업의 이름은 다음 공식에서 작성되었습니다. &lt;code&gt;run[Debug|Release]Executable&amp;lt;target name&amp;gt;&lt;/code&gt; 여기서 &lt;code&gt;target name&lt;/code&gt; 은 빌드 에서 &lt;code&gt;build.gradle.kts&lt;/code&gt; &lt;code&gt;build.gradle&lt;/code&gt; 파일에 지정한 대문자로 된 대상 이름입니다 . 우리의 경우 &lt;code&gt;&quot;native&quot;&lt;/code&gt; . IDE에서 작업을 실행 해 봅시다. 이를 위해 Gradle Tool 창을 열고 목록에서 작업을 찾으십시오.</target>
        </trans-unit>
        <trans-unit id="f0aa5ea5557fedda4c5d2598dc5dd22d0363ac01" translate="yes" xml:space="preserve">
          <source>The names should make it clear what the purpose of the entity is, so it's best to avoid using meaningless words (&lt;code&gt;Manager&lt;/code&gt;, &lt;code&gt;Wrapper&lt;/code&gt; etc.) in names.</source>
          <target state="translated">이름은 엔티티의 목적이 무엇인지 명확히해야하므로 이름에 의미없는 단어 ( &lt;code&gt;Manager&lt;/code&gt; , &lt;code&gt;Wrapper&lt;/code&gt; 등)를 사용하지 않는 것이 가장 좋습니다 .</target>
        </trans-unit>
        <trans-unit id="73a31785499746e1755c5fd02e03d5e8b58c34d0" translate="yes" xml:space="preserve">
          <source>The native memory can be allocated using the &lt;code&gt;NativePlacement&lt;/code&gt; interface, e.g.</source>
          <target state="translated">네이티브 메모리는 &lt;code&gt;NativePlacement&lt;/code&gt; 인터페이스를 사용하여 할당 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="6a4f133dcc400189b06f4d2207b53017de6347ac" translate="yes" xml:space="preserve">
          <source>The new &lt;code&gt;minOf()&lt;/code&gt; and &lt;code&gt;maxOf()&lt;/code&gt; extension functions return the minimum and the maximum value of the given selector function on the collection items.</source>
          <target state="translated">새로운 &lt;code&gt;minOf()&lt;/code&gt; 및 &lt;code&gt;maxOf()&lt;/code&gt; 확장 함수는 컬렉션 항목에 대해 지정된 선택기 함수의 최소값과 최대 값을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="6cfd2a99b5ee1770b48531a2d8ca774ab1bcb143" translate="yes" xml:space="preserve">
          <source>The new Kotlin Project Wizard is both simple and flexible:</source>
          <target state="translated">새로운 Kotlin 프로젝트 마법사는 간단하고 유연합니다.</target>
        </trans-unit>
        <trans-unit id="ac86d0e3a5fa4aec1c8749b2e4a7eed7297032b2" translate="yes" xml:space="preserve">
          <source>The new Kotlin compiler is going to be really fast; it will unify all the supported platforms and provide an API for compiler extensions. It's a long-term project, and we've already completed several steps in Kotlin 1.4.0:</source>
          <target state="translated">새로운 Kotlin 컴파일러는 정말 빠를 것입니다. 지원되는 모든 플랫폼을 통합하고 컴파일러 확장을위한 API를 제공합니다. 장기 프로젝트이며 Kotlin 1.4.0에서 이미 여러 단계를 완료했습니다.</target>
        </trans-unit>
        <trans-unit id="77d2be187e310c20f8b1c1ee15e1c6d7e97f9c01" translate="yes" xml:space="preserve">
          <source>The new algorithm fixes this issue, and you can pass a lambda instead of a SAM interface in any case, which is the way you&amp;rsquo;d naturally expect it to work.</source>
          <target state="translated">새로운 알고리즘은이 문제를 해결하며, 어떤 경우에도 SAM 인터페이스 대신 람다를 전달할 수 있습니다. 이는 자연스럽게 작동 할 것으로 예상되는 방식입니다.</target>
        </trans-unit>
        <trans-unit id="52a6cfa7e4d5ffdd8d860b7ad7120de82ac44b6c" translate="yes" xml:space="preserve">
          <source>The new experimental REPL API is now a part of the Kotlin Scripting API. There are also several implementations of it in the published artifacts, and some have advanced functionality, such as code completion. We use this API in the &lt;a href=&quot;https://blog.jetbrains.com/kotlin/2020/05/kotlin-kernel-for-jupyter-notebook-v0-8/&quot;&gt;Kotlin Jupyter kernel&lt;/a&gt; and now you can try it in your own custom shells and REPLs.</source>
          <target state="translated">새로운 실험용 REPL API는 이제 Kotlin Scripting API의 일부입니다. 게시 된 아티팩트에는 여러 가지 구현이 있으며 일부는 코드 완성과 같은 고급 기능을 가지고 있습니다. 우리는 &lt;a href=&quot;https://blog.jetbrains.com/kotlin/2020/05/kotlin-kernel-for-jupyter-notebook-v0-8/&quot;&gt;Kotlin Jupyter 커널&lt;/a&gt; 에서이 API를 사용 하며 이제 사용자 지정 셸 및 REPL에서이를 시도 할 수 있습니다. ㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ</target>
        </trans-unit>
        <trans-unit id="5055c5b1026a40b7ffc10fd81a86667db3798a42" translate="yes" xml:space="preserve">
          <source>The new inference algorithm infers types for many cases where the old algorithm required you to specify them explicitly. For instance, in the following example the type of the lambda parameter &lt;code&gt;it&lt;/code&gt; is correctly inferred to &lt;code&gt;String?&lt;/code&gt;:</source>
          <target state="translated">새로운 추론 알고리즘은 이전 알고리즘에서 명시 적으로 지정해야하는 많은 경우 유형을 추론합니다. 예를 들어, 다음 예제와 람다의 유형 매개 변수 &lt;code&gt;it&lt;/code&gt; 올바르게로 추정되는 &lt;code&gt;String?&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="672732f66c4b7f92d3ecbdaaf0ac7fbe6cc851d3" translate="yes" xml:space="preserve">
          <source>The new project opens. &lt;a href=&quot;mpp-discover-project&quot;&gt;Discover what it includes&lt;/a&gt;.</source>
          <target state="translated">새 프로젝트가 열립니다. &lt;a href=&quot;mpp-discover-project&quot;&gt;포함 된 내용을 알아보십시오&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="183994f4ebd6d698ee09d0ba15ca6b6ca68c9e19" translate="yes" xml:space="preserve">
          <source>The next lines are about providing linker and compiler options, which can vary depending on different target platforms. In our case, we are defining it for macOS (the &lt;code&gt;.osx&lt;/code&gt; suffix) and Linux (the &lt;code&gt;.linux&lt;/code&gt; suffix). Parameters without a suffix is also possible (e.g. &lt;code&gt;linkerOpts=&lt;/code&gt;) and will be applied to all platforms.</source>
          <target state="translated">다음 행은 링커 및 컴파일러 옵션을 제공하는 방법으로, 대상 플랫폼에 따라 달라질 수 있습니다. 우리의 경우, 우리는 맥 OS 위해를 정의합니다 ( &lt;code&gt;.osx&lt;/code&gt; 접미사)와 리눅스합니다 ( &lt;code&gt;.linux&lt;/code&gt; 접미사). 접미사가없는 매개 변수 (예 : &lt;code&gt;linkerOpts=&lt;/code&gt; ) 도 가능 하며 모든 플랫폼에 적용됩니다.</target>
        </trans-unit>
        <trans-unit id="5a6c6de321d2f0ef15a3d35472d5a5225a93083f" translate="yes" xml:space="preserve">
          <source>The next part of the &lt;code&gt;&amp;lt;Framework&amp;gt;/Headers/Demo.h&lt;/code&gt; contains number type mappings between Kotlin/Native and &lt;code&gt;NSNumber&lt;/code&gt;. We have the base class called &lt;code&gt;DemoNumber&lt;/code&gt; in Objective-C and &lt;code&gt;KotlinNumber&lt;/code&gt; in Swift. It extends &lt;code&gt;NSNumber&lt;/code&gt;. There are also child classes per Kotlin number type:</source>
          <target state="translated">&lt;code&gt;&amp;lt;Framework&amp;gt;/Headers/Demo.h&lt;/code&gt; 의 다음 부분 에는 Kotlin / Native와 &lt;code&gt;NSNumber&lt;/code&gt; 사이의 숫자 유형 매핑이 포함되어 있습니다 . Objective-C에 &lt;code&gt;DemoNumber&lt;/code&gt; 라는 기본 클래스 와 Swift에 &lt;code&gt;KotlinNumber&lt;/code&gt; 가 있습니다. &lt;code&gt;NSNumber&lt;/code&gt; 를 확장 합니다. Kotlin 숫자 유형마다 하위 클래스가 있습니다.</target>
        </trans-unit>
        <trans-unit id="cfe4a47831305057cc6388a57b9e77a3a7e3a7a8" translate="yes" xml:space="preserve">
          <source>The next part of the &lt;code&gt;libnative_api.h&lt;/code&gt; file contains definitions of the types that are used in the library:</source>
          <target state="translated">&lt;code&gt;libnative_api.h&lt;/code&gt; 파일 의 다음 부분 에는 라이브러리에서 사용되는 유형의 정의가 포함됩니다.</target>
        </trans-unit>
        <trans-unit id="dc72aec2231c401cec520bbf86ad2595019584f0" translate="yes" xml:space="preserve">
          <source>The next step is going to prompt us on the Kotlin runtime library. By default the plugin selects the one that is associated to the currently installed version. Unless we want to create a different one, we can click Finish at this point after entering the project name and location.</source>
          <target state="translated">다음 단계는 Kotlin 런타임 라이브러리에 대한 프롬프트입니다. 기본적으로 플러그인은 현재 설치된 버전과 관련된 플러그인을 선택합니다. 다른 것을 작성하지 않으려면 프로젝트 이름과 위치를 입력 한 후이 시점에서 Finish를 클릭하십시오.</target>
        </trans-unit>
        <trans-unit id="93716c2cabdff509bf9835ed635452819990ca4f" translate="yes" xml:space="preserve">
          <source>The next step is to call a C function pointer from a C pointer that we have from the &lt;code&gt;supply_fun()&lt;/code&gt; call:</source>
          <target state="translated">다음 단계는 &lt;code&gt;supply_fun()&lt;/code&gt; 호출 에서 가지고있는 C 포인터에서 C 함수 포인터를 호출하는 것입니다.</target>
        </trans-unit>
        <trans-unit id="4c075c67c98b72698b50bde83417679cfcaad540" translate="yes" xml:space="preserve">
          <source>The next step is to compile our application. We already covered the basics of compiling a Kotlin/Native application from the command line in the &lt;a href=&quot;basic-kotlin-native-app&quot;&gt;A Basic Kotlin/Native application&lt;/a&gt; tutorial. The only difference in this case is that the &lt;code&gt;cinterop&lt;/code&gt; generated part is implicitly included into the build: Let's call the following command:</source>
          <target state="translated">다음 단계는 애플리케이션을 컴파일하는 것입니다. 우리는 이미 &lt;a href=&quot;basic-kotlin-native-app&quot;&gt;기본 Kotlin / Native 애플리케이션&lt;/a&gt; 튜토리얼 의 커맨드 라인에서 Kotlin / Native 애플리케이션을 컴파일하는 기본 사항을 다루었습니다 . 이 경우의 유일한 차이점은 &lt;code&gt;cinterop&lt;/code&gt; 생성 파트가 빌드에 내재적으로 포함 된다는 것입니다 . 다음 명령을 호출하십시오.</target>
        </trans-unit>
        <trans-unit id="29eb1a88978e11cb19e6153185329a8fdd184b9c" translate="yes" xml:space="preserve">
          <source>The next step is to create Greeting Data class that has two properties: &lt;em&gt;id&lt;/em&gt; and a &lt;em&gt;content&lt;/em&gt;</source>
          <target state="translated">다음 단계는 &lt;em&gt;id&lt;/em&gt; 와 &lt;em&gt;content&lt;/em&gt; 라는 두 가지 속성이있는 Greeting Data 클래스를 만드는 것입니다.&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="f2ba2b214cfaccb2ec50010bfe1a0d121ee2cd4b" translate="yes" xml:space="preserve">
          <source>The next step is to create a Run Configuration in IntelliJ IDEA under Tomcat / Local which deploys the WAR and starts up Tomcat.</source>
          <target state="translated">다음 단계는 Tomcat / Local 아래 IntelliJ IDEA에서 Run Configuration을 생성하여 WAR을 배포하고 Tomcat을 시작하는 것입니다.</target>
        </trans-unit>
        <trans-unit id="27ce517e143c3dea9eb55849f860e4c5596ec3f9" translate="yes" xml:space="preserve">
          <source>The next step is to decide which modules to configure (if the project has more than one module) and whether you want to add the runtime library to the project or use those provided by the current Kotlin plugin.</source>
          <target state="translated">다음 단계는 구성 할 모듈 (프로젝트에 둘 이상의 모듈이있는 경우) 및 런타임 라이브러리를 프로젝트에 추가할지 또는 현재 Kotlin 플러그인에서 제공 한 모듈을 사용할지 여부를 결정하는 것입니다.</target>
        </trans-unit>
        <trans-unit id="22779d3ccc120e4892af96a829245aa095780550" translate="yes" xml:space="preserve">
          <source>The non-abstract subclasses should represent the (complete) C data type and thus specify size and alignment. Each such subclass must have a companion object which is a &lt;a href=&quot;-type/index&quot;&gt;Type&lt;/a&gt;.</source>
          <target state="translated">비추 상 서브 클래스는 (완전한) C 데이터 유형을 나타내므로 크기와 정렬을 지정해야합니다. 이러한 각 서브 클래스는 &lt;a href=&quot;-type/index&quot;&gt;Type 인&lt;/a&gt; 도우미 객체를 가져야합니다 .</target>
        </trans-unit>
        <trans-unit id="fc28129df689ae65c9fd83a31b9aa03dac9e8ced" translate="yes" xml:space="preserve">
          <source>The non-breaking space character</source>
          <target state="translated">비 공백 공백 문자</target>
        </trans-unit>
        <trans-unit id="e8f00eeeaaa301ab094d387f05d45fa33541dead" translate="yes" xml:space="preserve">
          <source>The nullable version &lt;code&gt;Nothing?&lt;/code&gt; will be used by the compiler when something is initialized with null and there is no other type information. In &lt;code&gt;val x = null&lt;/code&gt;, the type of &lt;code&gt;x&lt;/code&gt; will be &lt;code&gt;Nothing?&lt;/code&gt;. This type does not have the &quot;never returns normally&quot; semantics; instead, the compiler knows that the value will always be null.</source>
          <target state="translated">nullable 버전이 &lt;code&gt;Nothing?&lt;/code&gt; 무언가가 null로 초기화되고 다른 유형 정보가 없을 때 컴파일러가 사용합니다. 에서 &lt;code&gt;val x = null&lt;/code&gt; 의 종류 &lt;code&gt;x&lt;/code&gt; 것 &lt;code&gt;Nothing?&lt;/code&gt; . 이 유형에는 &quot;정상적으로 리턴하지 않음&quot;의미가 없습니다. 대신 컴파일러는 값이 항상 null임을 알고 있습니다.</target>
        </trans-unit>
        <trans-unit id="77363aca1573dd5dba20e28ad666c9c7fd83436a" translate="yes" xml:space="preserve">
          <source>The number is converted to a string and then the string is converted to a &lt;a href=&quot;http://docs.oracle.com/javase/8/docs/api/java/math/BigDecimal.html&quot;&gt;BigDecimal&lt;/a&gt;.</source>
          <target state="translated">숫자는 문자열로 변환 된 다음 문자열은 &lt;a href=&quot;http://docs.oracle.com/javase/8/docs/api/java/math/BigDecimal.html&quot;&gt;BigDecimal로 변환&lt;/a&gt; 됩니다.</target>
        </trans-unit>
        <trans-unit id="bbb7b619e5deab250c82714dad5c6223da422d99" translate="yes" xml:space="preserve">
          <source>The number is converted to a string and then the string is converted to a &lt;a href=&quot;https://docs.oracle.com/javase/8/docs/api/java/math/BigDecimal.html&quot;&gt;BigDecimal&lt;/a&gt;.</source>
          <target state="translated">숫자가 문자열로 변환 된 다음 문자열이 &lt;a href=&quot;https://docs.oracle.com/javase/8/docs/api/java/math/BigDecimal.html&quot;&gt;BigDecimal로 변환&lt;/a&gt; 됩니다.</target>
        </trans-unit>
        <trans-unit id="bc9979a04405cfcd09395aa075f56f352dfb5b1c" translate="yes" xml:space="preserve">
          <source>The number of bits used to represent a Char in a binary form.</source>
          <target state="translated">Char를 이진 형식으로 나타내는 데 사용되는 비트 수입니다.</target>
        </trans-unit>
        <trans-unit id="a5aabbd23fb87b74097e1ccd4055f0b183ecbf87" translate="yes" xml:space="preserve">
          <source>The number of bits used to represent an instance of Byte in a binary form.</source>
          <target state="translated">Byte 인스턴스를 이진 형식으로 나타내는 데 사용되는 비트 수입니다.</target>
        </trans-unit>
        <trans-unit id="fc5f8fcea457f48ba61aea0a6c6364e750d35bba" translate="yes" xml:space="preserve">
          <source>The number of bits used to represent an instance of Double in a binary form.</source>
          <target state="translated">이진 형식으로 Double 인스턴스를 나타내는 데 사용되는 비트 수입니다.</target>
        </trans-unit>
        <trans-unit id="3ac96a9235bc1077029c5934186d743a5b00c197" translate="yes" xml:space="preserve">
          <source>The number of bits used to represent an instance of Float in a binary form.</source>
          <target state="translated">이진 형식으로 Float 인스턴스를 나타내는 데 사용되는 비트 수입니다.</target>
        </trans-unit>
        <trans-unit id="0f9c3201d4f3bb80740106fd705fe9901bfc9490" translate="yes" xml:space="preserve">
          <source>The number of bits used to represent an instance of Int in a binary form.</source>
          <target state="translated">Int 인스턴스를 이진 형식으로 나타내는 데 사용되는 비트 수입니다.</target>
        </trans-unit>
        <trans-unit id="881c588a79332a9f90d40c26e737596c51909376" translate="yes" xml:space="preserve">
          <source>The number of bits used to represent an instance of Long in a binary form.</source>
          <target state="translated">Long 인스턴스를 이진 형식으로 나타내는 데 사용되는 비트 수입니다.</target>
        </trans-unit>
        <trans-unit id="3a2fa986a400a5de2289aa09e08c447c811e1ab0" translate="yes" xml:space="preserve">
          <source>The number of bits used to represent an instance of Short in a binary form.</source>
          <target state="translated">이진 형식으로 Short 인스턴스를 나타내는 데 사용되는 비트 수입니다.</target>
        </trans-unit>
        <trans-unit id="b557b6ad22e0d4a32e6ecf5e7c42a83086397f62" translate="yes" xml:space="preserve">
          <source>The number of bits used to represent an instance of UByte in a binary form.</source>
          <target state="translated">이진 형식으로 UByte 인스턴스를 나타내는 데 사용되는 비트 수입니다.</target>
        </trans-unit>
        <trans-unit id="04a46c8fcf471f6f7a2489fd5541b67d79b2dbba" translate="yes" xml:space="preserve">
          <source>The number of bits used to represent an instance of UInt in a binary form.</source>
          <target state="translated">이진 형식으로 UInt 인스턴스를 나타내는 데 사용되는 비트 수입니다.</target>
        </trans-unit>
        <trans-unit id="970f51f6cf41ca82dcda9c5384dd1584581a3241" translate="yes" xml:space="preserve">
          <source>The number of bits used to represent an instance of ULong in a binary form.</source>
          <target state="translated">ULong 인스턴스를 이진 형식으로 나타내는 데 사용되는 비트 수입니다.</target>
        </trans-unit>
        <trans-unit id="f405dad940dd8a9ba9986616021e6669d81ef332" translate="yes" xml:space="preserve">
          <source>The number of bits used to represent an instance of UShort in a binary form.</source>
          <target state="translated">UShort 인스턴스를 이진 형식으로 나타내는 데 사용되는 비트 수입니다.</target>
        </trans-unit>
        <trans-unit id="7fca3ee96d6d11e61b4e40ce8aef39bbd3166f00" translate="yes" xml:space="preserve">
          <source>The number of bytes used to represent a Char in a binary form.</source>
          <target state="translated">Char를 이진 형식으로 나타내는 데 사용되는 바이트 수입니다.</target>
        </trans-unit>
        <trans-unit id="d455af0205d71a29c80b7797e96f36f72c818b20" translate="yes" xml:space="preserve">
          <source>The number of bytes used to represent an instance of Byte in a binary form.</source>
          <target state="translated">바이트 인스턴스를 이진 형식으로 나타내는 데 사용되는 바이트 수입니다.</target>
        </trans-unit>
        <trans-unit id="cfb84d55b9d6ee08abf33db55d2a61462dded701" translate="yes" xml:space="preserve">
          <source>The number of bytes used to represent an instance of Double in a binary form.</source>
          <target state="translated">이진 형식으로 Double 인스턴스를 나타내는 데 사용되는 바이트 수입니다.</target>
        </trans-unit>
        <trans-unit id="080e5eee27bb967010b8c2b300a0c20e8300d7a1" translate="yes" xml:space="preserve">
          <source>The number of bytes used to represent an instance of Float in a binary form.</source>
          <target state="translated">이진 형식으로 Float 인스턴스를 나타내는 데 사용되는 바이트 수입니다.</target>
        </trans-unit>
        <trans-unit id="012737f61c97912b11277e0542ab793fcecbd8f6" translate="yes" xml:space="preserve">
          <source>The number of bytes used to represent an instance of Int in a binary form.</source>
          <target state="translated">Int 인스턴스를 이진 형식으로 나타내는 데 사용되는 바이트 수입니다.</target>
        </trans-unit>
        <trans-unit id="ac50dee558bf2179b63147e5d4abcf881946deb1" translate="yes" xml:space="preserve">
          <source>The number of bytes used to represent an instance of Long in a binary form.</source>
          <target state="translated">Long 인스턴스를 이진 형식으로 나타내는 데 사용되는 바이트 수입니다.</target>
        </trans-unit>
        <trans-unit id="d47711ab000d6ab309cdde940a4d6cc83958bbb7" translate="yes" xml:space="preserve">
          <source>The number of bytes used to represent an instance of Short in a binary form.</source>
          <target state="translated">이진 형식으로 Short 인스턴스를 나타내는 데 사용되는 바이트 수입니다.</target>
        </trans-unit>
        <trans-unit id="5da103d9bfe814cb16e570a63e8fffdec6abede9" translate="yes" xml:space="preserve">
          <source>The number of bytes used to represent an instance of UByte in a binary form.</source>
          <target state="translated">이진 형식으로 UByte 인스턴스를 나타내는 데 사용되는 바이트 수입니다.</target>
        </trans-unit>
        <trans-unit id="7aa018571731f4dfc20dc2f2b40bc661649fe4df" translate="yes" xml:space="preserve">
          <source>The number of bytes used to represent an instance of UInt in a binary form.</source>
          <target state="translated">이진 형식으로 UInt 인스턴스를 나타내는 데 사용되는 바이트 수입니다.</target>
        </trans-unit>
        <trans-unit id="c4d88684784d0b5692fee9bc8fbbdcbfde1bb159" translate="yes" xml:space="preserve">
          <source>The number of bytes used to represent an instance of ULong in a binary form.</source>
          <target state="translated">ULong 인스턴스를 이진 형식으로 나타내는 데 사용되는 바이트 수입니다.</target>
        </trans-unit>
        <trans-unit id="de97fd8a16a598b6d753acf6fc495d892600d39e" translate="yes" xml:space="preserve">
          <source>The number of bytes used to represent an instance of UShort in a binary form.</source>
          <target state="translated">UShort 인스턴스를 이진 형식으로 나타내는 데 사용되는 바이트 수입니다.</target>
        </trans-unit>
        <trans-unit id="802421b7bac6f95ce971296bce66f238a1ca7ee6" translate="yes" xml:space="preserve">
          <source>The official docs also have a very cool example with a &lt;a href=&quot;../../reference/type-safe-builders&quot;&gt; DSL for constructing HTML documents&lt;/a&gt;.</source>
          <target state="translated">공식 문서는 &lt;a href=&quot;../../reference/type-safe-builders&quot;&gt;HTML 문서를 구성하기위한 DSL&lt;/a&gt; 과 함께 아주 멋진 예를 가지고 있습니다 .</target>
        </trans-unit>
        <trans-unit id="3c525abb133dd243eb90f32e82df7ad93d5c1dde" translate="yes" xml:space="preserve">
          <source>The only operation provided by the time source is &lt;a href=&quot;mark-now&quot;&gt;markNow&lt;/a&gt;. It returns a &lt;a href=&quot;../-time-mark/index&quot;&gt;TimeMark&lt;/a&gt;, which can be used to query the elapsed time later.</source>
          <target state="translated">시간 소스에서 제공하는 유일한 작업은 &lt;a href=&quot;mark-now&quot;&gt;markNow&lt;/a&gt; 입니다. 나중에 경과 시간을 쿼리하는 데 사용할 수 있는 &lt;a href=&quot;../-time-mark/index&quot;&gt;TimeMark를&lt;/a&gt; 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="9824ffa4fbac1aa2ba4df2857cc7d27ae42fbdf3" translate="yes" xml:space="preserve">
          <source>The only target for which it is not available is &lt;a href=&quot;https://en.wikipedia.org/wiki/WebAssembly&quot;&gt;WebAssembly&lt;/a&gt;.</source>
          <target state="translated">사용할 수없는 대상은 &lt;a href=&quot;https://en.wikipedia.org/wiki/WebAssembly&quot;&gt;WebAssembly&lt;/a&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="20601b96604d0e7211b7510d021f94ac0577f4a7" translate="yes" xml:space="preserve">
          <source>The only thing left to do is compile our application (Build|Build Project), and once the JavaScript files have been generated, we can open the &lt;code&gt;index.html&lt;/code&gt; file in the browser and see the result in the console debug window.</source>
          <target state="translated">남은 것은 애플리케이션 (Build | Build Project)을 컴파일하는 것입니다. JavaScript 파일이 생성되면 브라우저에서 &lt;code&gt;index.html&lt;/code&gt; 파일을 열고 콘솔 디버그 창에서 결과를 볼 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="940b1bdb9d47159d1535cf808141916fc2b5f10e" translate="yes" xml:space="preserve">
          <source>The operation doesn't preserve copied file attributes such as creation/modification date, permissions, etc.</source>
          <target state="translated">작업은 생성 / 수정 날짜, 권한 등과 같은 복사 된 파일 속성을 유지하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="b9a452f893e9486c5fbe89e3c1a52b0da8c35684" translate="yes" xml:space="preserve">
          <source>The operation is &lt;em&gt;intermediate&lt;/em&gt; and &lt;em&gt;stateful&lt;/em&gt;.</source>
          <target state="translated">작업은 &lt;em&gt;중간 &lt;/em&gt;&lt;em&gt;상태&lt;/em&gt; 이며 &lt;em&gt;상태 저장&lt;/em&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="64f2d6f436a63697c12d9826dd0b449a2c8ece4d" translate="yes" xml:space="preserve">
          <source>The operation is &lt;em&gt;intermediate&lt;/em&gt; and &lt;em&gt;stateless&lt;/em&gt;.</source>
          <target state="translated">작업은 &lt;em&gt;중간 &lt;/em&gt;&lt;em&gt;상태&lt;/em&gt; 이며 &lt;em&gt;상태 비 저장&lt;/em&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="2f74c9f051d5d0a5178895ef9787aac4f50f4820" translate="yes" xml:space="preserve">
          <source>The operation is &lt;em&gt;intermediate&lt;/em&gt; for this sequence and &lt;em&gt;terminal&lt;/em&gt; and &lt;em&gt;stateful&lt;/em&gt; for the &lt;a href=&quot;minus#kotlin.sequences%24minus%28kotlin.sequences.Sequence%28%28kotlin.sequences.minus.T%29%29%2C+kotlin.sequences.Sequence%28%28kotlin.sequences.minus.T%29%29%29%2Felements&quot;&gt;elements&lt;/a&gt; sequence.</source>
          <target state="translated">동작은 &lt;em&gt;중간&lt;/em&gt; 이 순서 및 &lt;em&gt;단말기&lt;/em&gt; 및 &lt;em&gt;상태&lt;/em&gt; 용 &lt;a href=&quot;minus#kotlin.sequences%24minus%28kotlin.sequences.Sequence%28%28kotlin.sequences.minus.T%29%29%2C+kotlin.sequences.Sequence%28%28kotlin.sequences.minus.T%29%29%29%2Felements&quot;&gt;소자&lt;/a&gt; 시퀀스.</target>
        </trans-unit>
        <trans-unit id="790886232e90f42fd32ca4859b4baabd53b9cbd8" translate="yes" xml:space="preserve">
          <source>The operation is &lt;em&gt;intermediate&lt;/em&gt; for this sequence and &lt;em&gt;terminal&lt;/em&gt; and &lt;em&gt;stateful&lt;/em&gt; for the &lt;a href=&quot;minus#kotlin.sequences%24minus(kotlin.sequences.Sequence((kotlin.sequences.minus.T)),%20kotlin.sequences.Sequence((kotlin.sequences.minus.T)))/elements&quot;&gt;elements&lt;/a&gt; sequence.</source>
          <target state="translated">동작은 &lt;em&gt;중간&lt;/em&gt; 이 순서 및 &lt;em&gt;단말기&lt;/em&gt; 및 &lt;em&gt;상태&lt;/em&gt; 용 &lt;a href=&quot;minus#kotlin.sequences%24minus(kotlin.sequences.Sequence((kotlin.sequences.minus.T)),%20kotlin.sequences.Sequence((kotlin.sequences.minus.T)))/elements&quot;&gt;소자&lt;/a&gt; 시퀀스.</target>
        </trans-unit>
        <trans-unit id="f90173c5f7dc2e732f31878b5387f1009c2ad309" translate="yes" xml:space="preserve">
          <source>The operation is &lt;em&gt;terminal&lt;/em&gt;.</source>
          <target state="translated">작업은 &lt;em&gt;터미널&lt;/em&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="24cec715dc71cea63c8c77aa342afd935860c2d6" translate="yes" xml:space="preserve">
          <source>The operations on floating point numbers discussed in this section are:</source>
          <target state="translated">이 섹션에서 설명한 부동 소수점 숫자에 대한 작업은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="c81054e9fa59c990a7f0009d1471af7d0d80d085" translate="yes" xml:space="preserve">
          <source>The operator &lt;code&gt;plus&lt;/code&gt; provides a way to add key-value pair(s) to a read-only map producing a new map, however there was not a simple way to do the opposite: to remove a key from the map you have to resort to less straightforward ways to like &lt;code&gt;Map.filter()&lt;/code&gt; or &lt;code&gt;Map.filterKeys()&lt;/code&gt;. Now the operator &lt;code&gt;minus&lt;/code&gt; fills this gap. There are 4 overloads available: for removing a single key, a collection of keys, a sequence of keys and an array of keys.</source>
          <target state="translated">연산자 &lt;code&gt;plus&lt;/code&gt; 는 키-값 쌍을 읽기 전용 맵에 추가하여 새 맵을 생성하는 방법을 제공하지만 그 반대의 간단한 방법은 없었습니다. 맵에서 키를 제거하는 방법 &lt;code&gt;Map.filter()&lt;/code&gt; 또는 &lt;code&gt;Map.filterKeys()&lt;/code&gt; 와 같은 간단한 방법 . 이제 연산자 &lt;code&gt;minus&lt;/code&gt; 가이 간격을 채 웁니다. 단일 키, 키 모음, 일련의 키 및 키 배열을 제거하기위한 4 가지 오버로드가 있습니다.</target>
        </trans-unit>
        <trans-unit id="589b061bf341b244f13012e5b84b32bc9b5435d4" translate="yes" xml:space="preserve">
          <source>The opt-in requirement annotations &lt;code&gt;@RequiresOptIn&lt;/code&gt; and &lt;code&gt;@OptIn&lt;/code&gt; are &lt;a href=&quot;evolution/components-stability&quot;&gt;experimental&lt;/a&gt;. See the usage details &lt;a href=&quot;#experimental-status-of-the-opt-in-requirements&quot;&gt;below&lt;/a&gt;.</source>
          <target state="translated">옵트 인 요구 사항 주석 &lt;code&gt;@RequiresOptIn&lt;/code&gt; 및 &lt;code&gt;@OptIn&lt;/code&gt; 은 &lt;a href=&quot;evolution/components-stability&quot;&gt;실험적&lt;/a&gt; 입니다. &lt;a href=&quot;#experimental-status-of-the-opt-in-requirements&quot;&gt;아래&lt;/a&gt; 사용 세부 정보를 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="4a0d74a1654f94e426a64debf510f893991553be" translate="yes" xml:space="preserve">
          <source>The opt-in requirement mechanism is &lt;a href=&quot;evolution/components-stability&quot;&gt;experimental&lt;/a&gt; in Kotlin 1.3. This means that in future releases it may be changed in ways that make it incompatible.</source>
          <target state="translated">선택 요구 사항 메커니즘은 Kotlin 1.3에서 &lt;a href=&quot;evolution/components-stability&quot;&gt;실험적&lt;/a&gt; 입니다. 이는 향후 릴리스에서 호환되지 않는 방식으로 변경 될 수 있음을 의미합니다.</target>
        </trans-unit>
        <trans-unit id="a3dfe13bda3af06c0e25457985a11e6db0a3ea90" translate="yes" xml:space="preserve">
          <source>The order of elements is an important aspect of certain collection types. For example, two lists of the same elements are not equal if their elements are ordered differently.</source>
          <target state="translated">요소의 순서는 특정 컬렉션 유형의 중요한 측면입니다. 예를 들어, 요소가 다르게 정렬 된 경우 동일한 요소의 두 목록이 동일하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="97cb339b9434116a61ea466562966c5cfa7e6e7a" translate="yes" xml:space="preserve">
          <source>The order of operations execution is different as well: &lt;code&gt;Sequence&lt;/code&gt; performs all the processing steps one-by-one for every single element. In turn, &lt;code&gt;Iterable&lt;/code&gt; completes each step for the whole collection and then proceeds to the next step.</source>
          <target state="translated">작업 실행 순서도 다릅니다. &lt;code&gt;Sequence&lt;/code&gt; 는 모든 단일 요소에 대해 모든 처리 단계를 하나씩 수행합니다. 차례로, &lt;code&gt;Iterable&lt;/code&gt; 전체 컬렉션의 각 단계를 완료 한 후 다음 단계로 진행된다.</target>
        </trans-unit>
        <trans-unit id="812e3a1f04f0d82a55115416fefd4d8f871219e6" translate="yes" xml:space="preserve">
          <source>The original exception is handled by the parent only when all its children terminate, which is demonstrated by the following example.</source>
          <target state="translated">원래 예외는 모든 자식이 종료 될 때만 부모에 의해 처리됩니다. 이는 다음 예제에서 설명합니다.</target>
        </trans-unit>
        <trans-unit id="6bf2e73336e2395ab6cd6eb4e4d1c0edd8855b4e" translate="yes" xml:space="preserve">
          <source>The output here in this example is a good demonstration of how &lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines.flow/flat-map-latest.html&quot;&gt;flatMapLatest&lt;/a&gt; works:</source>
          <target state="translated">이 예제의 출력은 &lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines.flow/flat-map-latest.html&quot;&gt;flatMapLatest가&lt;/a&gt; 작동 하는 방식을 잘 보여줍니다 .</target>
        </trans-unit>
        <trans-unit id="b74ff8ee45b0b8f3cea227a5cb8b0ca2512e0fa1" translate="yes" xml:space="preserve">
          <source>The output is:</source>
          <target state="translated">출력은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="21b2e4b0974b9e68e9c52fc5e687c75f3f109501" translate="yes" xml:space="preserve">
          <source>The output it produces with &lt;code&gt;-Dkotlinx.coroutines.debug&lt;/code&gt; JVM option is similar to:</source>
          <target state="translated">&lt;code&gt;-Dkotlinx.coroutines.debug&lt;/code&gt; JVM 옵션으로 생성되는 출력 은 다음과 유사합니다.</target>
        </trans-unit>
        <trans-unit id="335f16bba6cd2578184d6190d9013ac4ec39e185" translate="yes" xml:space="preserve">
          <source>The output of a config script with &lt;code&gt;--libs&lt;/code&gt; will be passed as a &lt;code&gt;-linkedArgs&lt;/code&gt;&lt;code&gt;kotlinc&lt;/code&gt; flag value (quoted) when compiling.</source>
          <target state="translated">&lt;code&gt;--libs&lt;/code&gt; 를 사용하는 구성 스크립트의 출력은 컴파일 할 때 &lt;code&gt;-linkedArgs&lt;/code&gt; &lt;code&gt;kotlinc&lt;/code&gt; 플래그 값 (인용) 으로 전달됩니다 .</target>
        </trans-unit>
        <trans-unit id="3fc8d11bf9067241fdb9ed7a73ee99be1f2779ef" translate="yes" xml:space="preserve">
          <source>The output of the example is the same, even though we do not have &lt;code&gt;try/catch&lt;/code&gt; around the code anymore.</source>
          <target state="translated">더 이상 코드 주위에 &lt;code&gt;try/catch&lt;/code&gt; 가 없더라도 예제의 출력은 동일 합니다.</target>
        </trans-unit>
        <trans-unit id="0febc2ff48de2800dd49e2c0e7bf4ea28482b37f" translate="yes" xml:space="preserve">
          <source>The output of this code clearly shows that the execution of the &lt;code&gt;flow { ... }&lt;/code&gt; body in the &lt;code&gt;numbers()&lt;/code&gt; function stopped after emitting the second number:</source>
          <target state="translated">이 코드의 출력은 두 번째 숫자를 내 보낸 후 &lt;code&gt;numbers()&lt;/code&gt; 함수 에서 &lt;code&gt;flow { ... }&lt;/code&gt; 본문 의 실행이 중지 되었음을 명확하게 보여줍니다 .</target>
        </trans-unit>
        <trans-unit id="a335f7db5ad6c9bad17c284454dcaeefbd6be278" translate="yes" xml:space="preserve">
          <source>The output of this code is (with &lt;a href=&quot;https://github.com/Kotlin/kotlinx.coroutines/blob/master/docs/coroutine-context-and-dispatchers.md#debugging-coroutines-and-threads&quot;&gt;debug&lt;/a&gt;):</source>
          <target state="translated">이 코드의 출력은 (함께 &lt;a href=&quot;https://github.com/Kotlin/kotlinx.coroutines/blob/master/docs/coroutine-context-and-dispatchers.md#debugging-coroutines-and-threads&quot;&gt;디버그&lt;/a&gt; ) :</target>
        </trans-unit>
        <trans-unit id="d91d0dd8fa3a619861392f5c074fea2d8db4eaf2" translate="yes" xml:space="preserve">
          <source>The output of this code is:</source>
          <target state="translated">이 코드의 출력은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="647a971dfd3700d13cfdc057be9aa0bc71494501" translate="yes" xml:space="preserve">
          <source>The output of this code shows that the &lt;code&gt;filter()&lt;/code&gt; and &lt;code&gt;map()&lt;/code&gt; functions are called only when building the result list. So, you first see the line of text &lt;code&gt;&amp;ldquo;Lengths of..&amp;rdquo;&lt;/code&gt; and then the sequence processing starts. Note that for elements left after filtering, the map executes before filtering the next element. When the result size reaches 4, the processing stops because it's the largest possible size that &lt;code&gt;take(4)&lt;/code&gt; can return.</source>
          <target state="translated">이 코드의 결과는 &lt;code&gt;filter()&lt;/code&gt; 및 &lt;code&gt;map()&lt;/code&gt; 함수가 결과 목록을 작성할 때만 호출 됨을 보여줍니다 . 먼저, &lt;code&gt;&amp;ldquo;Lengths of..&amp;rdquo;&lt;/code&gt; 텍스트 줄이 나타난 다음 시퀀스 처리가 시작됩니다. 필터링 후 남은 요소의 경우 다음 요소를 필터링하기 전에 맵이 실행됩니다. 결과 크기가 4에 도달하면 &lt;code&gt;take(4)&lt;/code&gt; 가 리턴 할 수 있는 최대 크기이므로 처리가 중지됩니다 .</target>
        </trans-unit>
        <trans-unit id="4914ca42a65eab132541007ef394cf246de086f7" translate="yes" xml:space="preserve">
          <source>The output of this code with &lt;code&gt;-Dkotlinx.coroutines.debug&lt;/code&gt; JVM option is:</source>
          <target state="translated">&lt;code&gt;-Dkotlinx.coroutines.debug&lt;/code&gt; JVM 옵션 을 사용한 이 코드의 출력은 다음과 같습니다 .</target>
        </trans-unit>
        <trans-unit id="ef205ce911c3cb52ce12493307210d6d78d5dcb8" translate="yes" xml:space="preserve">
          <source>The output of this code with the &lt;code&gt;-Dkotlinx.coroutines.debug&lt;/code&gt; JVM option is:</source>
          <target state="translated">&lt;code&gt;-Dkotlinx.coroutines.debug&lt;/code&gt; JVM 옵션을 사용한이 코드의 출력은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="fdcf4102afb246d995583e41d5abf443dc9b24d6" translate="yes" xml:space="preserve">
          <source>The output of this example is:</source>
          <target state="translated">이 예제의 결과는 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="d7f56deac4aeaab1be47a9075fd39d0cd515a13f" translate="yes" xml:space="preserve">
          <source>The output of this is a blank page that prints &lt;code&gt;Hello JavaScript!&lt;/code&gt; to the console.</source>
          <target state="translated">이 결과는 &lt;code&gt;Hello JavaScript!&lt;/code&gt; 를 인쇄하는 빈 페이지입니다 ! 콘솔에.</target>
        </trans-unit>
        <trans-unit id="c7adcbeb9a00e6f9f8d55d348527ceb949cebeb0" translate="yes" xml:space="preserve">
          <source>The output should be:</source>
          <target state="translated">출력은 다음과 같아야합니다.</target>
        </trans-unit>
        <trans-unit id="0b8e02788f842ec131e59334f158260f8f72ffc7" translate="yes" xml:space="preserve">
          <source>The output will be similar to the the following one, albeit the processor ids that receive each specific integer may be different:</source>
          <target state="translated">각 특정 정수를받는 프로세서 ID는 다를 수 있지만 출력은 다음과 비슷합니다.</target>
        </trans-unit>
        <trans-unit id="dacb06aada01cf9353bf2a419b476781dd3c13a9" translate="yes" xml:space="preserve">
          <source>The overall effect is exactly as if the &lt;a href=&quot;append#kotlin.text.StringBuilder%24append(kotlin.Any?)/value&quot;&gt;value&lt;/a&gt; were converted to a string by the &lt;code&gt;value.toString()&lt;/code&gt; method, and then that string was appended to this string builder.</source>
          <target state="translated">전체적인 효과는 마치 &lt;code&gt;value.toString()&lt;/code&gt; 메서드에 의해 &lt;a href=&quot;append#kotlin.text.StringBuilder%24append(kotlin.Any?)/value&quot;&gt;값&lt;/a&gt; 이 문자열로 변환 된 다음 해당 문자열이이 문자열 작성기에 추가 된 것과 같습니다.</target>
        </trans-unit>
        <trans-unit id="2fa46c20aa677e08c4fbabd2c01f13037e7e1a67" translate="yes" xml:space="preserve">
          <source>The overall effect is exactly as if the &lt;a href=&quot;append#kotlin.text.StringBuilder%24append(kotlin.Boolean)/value&quot;&gt;value&lt;/a&gt; were converted to a string by the &lt;code&gt;value.toString()&lt;/code&gt; method, and then that string was appended to this string builder.</source>
          <target state="translated">전체적인 효과는 마치 &lt;code&gt;value.toString()&lt;/code&gt; 메서드에 의해 &lt;a href=&quot;append#kotlin.text.StringBuilder%24append(kotlin.Boolean)/value&quot;&gt;값&lt;/a&gt; 이 문자열로 변환 된 다음 해당 문자열이이 문자열 작성기에 추가 된 것과 같습니다.</target>
        </trans-unit>
        <trans-unit id="3d95d1d469be2176ebbc72a21468acef591255ad" translate="yes" xml:space="preserve">
          <source>The overall effect is exactly as if the &lt;a href=&quot;insert#kotlin.text.StringBuilder%24insert(kotlin.Int,%20kotlin.Any?)/value&quot;&gt;value&lt;/a&gt; were converted to a string by the &lt;code&gt;value.toString()&lt;/code&gt; method, and then that string was inserted into this string builder at the specified &lt;a href=&quot;insert#kotlin.text.StringBuilder%24insert(kotlin.Int,%20kotlin.Any?)/index&quot;&gt;index&lt;/a&gt;.</source>
          <target state="translated">전체적인 효과는 마치 &lt;code&gt;value.toString()&lt;/code&gt; 메서드에 의해 &lt;a href=&quot;insert#kotlin.text.StringBuilder%24insert(kotlin.Int,%20kotlin.Any?)/value&quot;&gt;값&lt;/a&gt; 이 문자열로 변환 된 다음 해당 문자열이 지정된 &lt;a href=&quot;insert#kotlin.text.StringBuilder%24insert(kotlin.Int,%20kotlin.Any?)/index&quot;&gt;index&lt;/a&gt; 에있는이 문자열 작성기에 삽입 된 것과 똑같습니다 .</target>
        </trans-unit>
        <trans-unit id="76acc76cfe7700de42074cf269fd6d05489f7e96" translate="yes" xml:space="preserve">
          <source>The overall effect is exactly as if the &lt;a href=&quot;insert#kotlin.text.StringBuilder%24insert(kotlin.Int,%20kotlin.Boolean)/value&quot;&gt;value&lt;/a&gt; were converted to a string by the &lt;code&gt;value.toString()&lt;/code&gt; method, and then that string was inserted into this string builder at the specified &lt;a href=&quot;insert#kotlin.text.StringBuilder%24insert(kotlin.Int,%20kotlin.Boolean)/index&quot;&gt;index&lt;/a&gt;.</source>
          <target state="translated">전체적인 효과는 마치 &lt;code&gt;value.toString()&lt;/code&gt; 메서드에 의해 &lt;a href=&quot;insert#kotlin.text.StringBuilder%24insert(kotlin.Int,%20kotlin.Boolean)/value&quot;&gt;값&lt;/a&gt; 이 문자열로 변환 된 다음 해당 문자열이 지정된 &lt;a href=&quot;insert#kotlin.text.StringBuilder%24insert(kotlin.Int,%20kotlin.Boolean)/index&quot;&gt;index&lt;/a&gt; 에있는이 문자열 작성기에 삽입 된 것과 똑같습니다 .</target>
        </trans-unit>
        <trans-unit id="b56500d82b30990e46ae5220b62e1c3f4e225003" translate="yes" xml:space="preserve">
          <source>The overriding constructor must have the same parameter names and types as the overridden one.</source>
          <target state="translated">재정의 생성자는 재정의 생성자와 동일한 매개 변수 이름과 유형을 가져야합니다.</target>
        </trans-unit>
        <trans-unit id="d0fd3de86e4826ba8c7cde26e87523bae54839bc" translate="yes" xml:space="preserve">
          <source>The packages from platform libraries are available by default. No special link flags need to be specified to use them. &lt;code&gt;Kotlin/Native&lt;/code&gt; compiler automatically detects which of the platform libraries have been accessed and automatically links the needed libraries.</source>
          <target state="translated">플랫폼 라이브러리의 패키지는 기본적으로 사용 가능합니다. 특별한 링크 플래그를 지정하지 않아도 사용할 수 있습니다. &lt;code&gt;Kotlin/Native&lt;/code&gt; 컴파일러는 액세스 한 플랫폼 라이브러리를 자동으로 감지하여 필요한 라이브러리를 자동으로 연결합니다.</target>
        </trans-unit>
        <trans-unit id="f9eac82235030e7e86a0bff236552f847d9867dd" translate="yes" xml:space="preserve">
          <source>The parameter is declared in a member function and one of the corresponding parameters in the super functions is optional.</source>
          <target state="translated">매개 변수는 멤버 함수에서 선언되며 수퍼 함수의 해당 매개 변수 중 하나는 선택 사항입니다.</target>
        </trans-unit>
        <trans-unit id="1a311c087dc5f415abb270981ad04ec98ba47164" translate="yes" xml:space="preserve">
          <source>The parameter must not &lt;a href=&quot;#variable-number-of-arguments-varargs&quot;&gt;accept variable number of arguments&lt;/a&gt; and must have no &lt;a href=&quot;#default-arguments&quot;&gt;default value&lt;/a&gt;.</source>
          <target state="translated">이 매개 변수는 &lt;a href=&quot;#variable-number-of-arguments-varargs&quot;&gt;가변 개수의 인수를 허용&lt;/a&gt; 하지 않아야하며 &lt;a href=&quot;#default-arguments&quot;&gt;기본값&lt;/a&gt; 이 없어야 합니다 .</target>
        </trans-unit>
        <trans-unit id="85604054f8838d2bde0848abdc31a44140b69283" translate="yes" xml:space="preserve">
          <source>The parameter of &lt;code&gt;@JsName&lt;/code&gt; is required to be a constant string literal which is a valid identifier. The compiler will report an error on any attempt to pass non-identifier string to &lt;code&gt;@JsName&lt;/code&gt;. The following example produces a compile-time error:</source>
          <target state="translated">&lt;code&gt;@JsName&lt;/code&gt; 의 매개 변수 는 유효한 식별자 인 상수 문자열 리터럴이어야합니다. 컴파일러는 식별자가 아닌 문자열을 &lt;code&gt;@JsName&lt;/code&gt; 에 전달하려는 시도에서 오류를보고합니다 . 다음 예제는 컴파일 타임 오류를 생성합니다.</target>
        </trans-unit>
        <trans-unit id="d09d94c8171c7316821713755fce66dc3c85e74a" translate="yes" xml:space="preserve">
          <source>The parameter of &lt;code&gt;js&lt;/code&gt; is required to be a string constant. So, the following code is incorrect:</source>
          <target state="translated">&lt;code&gt;js&lt;/code&gt; 의 매개 변수 는 문자열 상수 여야합니다. 따라서 다음 코드는 올바르지 않습니다.</target>
        </trans-unit>
        <trans-unit id="64419b25b7715086a3a5cdbe138547b81a0a98a1" translate="yes" xml:space="preserve">
          <source>The parameter type of a function-typed parameter (the user is passing a function that can handle any &lt;code&gt;Fruit&lt;/code&gt;, and it will be given an &lt;code&gt;Apple&lt;/code&gt;)</source>
          <target state="translated">함수 형식의 매개 변수의 매개 변수 유형 (사용자는 처리 할 수있는 기능을 전달하고 &lt;code&gt;Fruit&lt;/code&gt; 하고는 주어질 것이다 &lt;code&gt;Apple&lt;/code&gt; )</target>
        </trans-unit>
        <trans-unit id="6ef05f581070101fa2afecc255e98671537cdea0" translate="yes" xml:space="preserve">
          <source>The parameters and the return type are specified in the same way as for regular functions, except that the parameter types can be omitted if they can be inferred from context:</source>
          <target state="translated">매개 변수 및 리턴 유형은 컨텍스트에서 유추 할 수있는 경우 매개 변수 유형을 생략 할 수 있다는 점을 제외하고 일반 함수와 동일한 방식으로 지정됩니다.</target>
        </trans-unit>
        <trans-unit id="d2818a5f4b17e0f3d50df0846a19518863e09067" translate="yes" xml:space="preserve">
          <source>The parameters of &lt;code&gt;provideDelegate&lt;/code&gt; are the same as for &lt;code&gt;getValue&lt;/code&gt;:</source>
          <target state="translated">&lt;code&gt;provideDelegate&lt;/code&gt; 의 매개 변수는 &lt;code&gt;getValue&lt;/code&gt; 와 동일합니다 .</target>
        </trans-unit>
        <trans-unit id="87e2c98795ae2a97eb179a3bb9ccc1f2e2c982d8" translate="yes" xml:space="preserve">
          <source>The passed type must satisfy all conditions of the &lt;code&gt;where&lt;/code&gt; clause simultaneously. In the above example, the &lt;code&gt;T&lt;/code&gt; type must implement &lt;em&gt;both&lt;/em&gt;&lt;code&gt;CharSequence&lt;/code&gt; and &lt;code&gt;Comparable&lt;/code&gt;.</source>
          <target state="translated">전달 된 유형은 &lt;code&gt;where&lt;/code&gt; 절의 모든 조건을 동시에 만족해야합니다 . 위 예제에서 &lt;code&gt;T&lt;/code&gt; 유형은 &lt;code&gt;CharSequence&lt;/code&gt; 및 &lt;code&gt;Comparable&lt;/code&gt; 을&lt;em&gt;모두&lt;/em&gt; 구현해야합니다 .</target>
        </trans-unit>
        <trans-unit id="0f70942d020a14104380fd6e7920e316921b42c6" translate="yes" xml:space="preserve">
          <source>The path refers to the default output location that IntelliJ IDEA uses when we compile the application. Below we'll see how to change this.</source>
          <target state="translated">경로는 응용 프로그램을 컴파일 할 때 IntelliJ IDEA가 사용하는 기본 출력 위치를 나타냅니다. 아래에서이를 변경하는 방법을 살펴 보겠습니다.</target>
        </trans-unit>
        <trans-unit id="38dc6771af81ffcbac99f06b8c7fb1ebccf80f9d" translate="yes" xml:space="preserve">
          <source>The pattern string of this regular expression.</source>
          <target state="translated">이 정규식의 패턴 문자열입니다.</target>
        </trans-unit>
        <trans-unit id="1144f4eed1bc15fed420102b18cb1c4e49c25335" translate="yes" xml:space="preserve">
          <source>The pattern where a coroutine is producing a sequence of elements is quite common. This is a part of &lt;em&gt;producer-consumer&lt;/em&gt; pattern that is often found in concurrent code. You could abstract such a producer into a function that takes channel as its parameter, but this goes contrary to common sense that results must be returned from functions.</source>
          <target state="translated">코 루틴이 일련의 요소를 생성하는 패턴은 매우 일반적입니다. 이것은 종종 동시 코드에서 발견되는 &lt;em&gt;생산자-소비자&lt;/em&gt; 패턴 의 일부입니다 . 그러한 생산자를 채널을 매개 변수로 사용하는 함수로 추상화 할 수는 있지만 결과는 함수에서 반환되어야한다는 상식과 상반됩니다.</target>
        </trans-unit>
        <trans-unit id="0452bcbdd609690466ea082ea5af90749aa8dcc5" translate="yes" xml:space="preserve">
          <source>The placeholder &lt;code&gt;&amp;lt;...&amp;gt;&lt;/code&gt; should be replaced with one of the plugin names that can be found in further sections.</source>
          <target state="translated">플레이스 홀더 &lt;code&gt;&amp;lt;...&amp;gt;&lt;/code&gt; 는 추가 섹션에서 찾을 수있는 플러그인 이름 중 하나로 바꿔야합니다.</target>
        </trans-unit>
        <trans-unit id="02d885dcfef73f7197c98c6f94fc980ae42855f5" translate="yes" xml:space="preserve">
          <source>The plugin allows you to customize the pom generated for the publication with the &lt;code&gt;pom&lt;/code&gt; code block available for every component:</source>
          <target state="translated">플러그인을 사용하면 모든 컴포넌트에 사용 가능한 &lt;code&gt;pom&lt;/code&gt; 코드 블록을 사용 하여 발행물에 대해 생성 된 pom을 사용자 정의 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="73896d94724b0c15c533e7832f50fc2c5d439771" translate="yes" xml:space="preserve">
          <source>The plugin allows you to declare dependencies on files and other projects using traditional Gradle's mechanism of configurations. The plugin supports Kotlin multiplatform projects allowing you to declare the &lt;code&gt;expectedBy&lt;/code&gt; dependencies</source>
          <target state="translated">플러그인을 사용하면 전통적인 Gradle의 구성 메커니즘을 사용하여 파일 및 기타 프로젝트에 대한 종속성을 선언 할 수 있습니다. 이 플러그인은 Kotlin 멀티 플랫폼 프로젝트를 지원하므로 &lt;code&gt;expectedBy&lt;/code&gt; 종속성 을 선언 할 수 있습니다</target>
        </trans-unit>
        <trans-unit id="244b72be53e91483eb1922508647ced0bb4a9e3c" translate="yes" xml:space="preserve">
          <source>The plugin also provides useful testing features, for example:</source>
          <target state="translated">플러그인은 다음과 같은 유용한 테스트 기능도 제공합니다.</target>
        </trans-unit>
        <trans-unit id="e2b8c11954d8c4f9f34c307b3e3ea0e12583e5af" translate="yes" xml:space="preserve">
          <source>The plugin builds a test executable for all the targets specified for the &lt;code&gt;test&lt;/code&gt; component. If the current host platform is included in this list the test running tasks are also created. To run tests, execute the standard lifecycle &lt;code&gt;check&lt;/code&gt; task:</source>
          <target state="translated">플러그인은 &lt;code&gt;test&lt;/code&gt; 구성 요소에 지정된 모든 대상에 대해 테스트 실행 파일을 빌드합니다 . 현재 호스트 플랫폼이이 목록에 포함되어 있으면 테스트 실행 작업도 생성됩니다. 테스트를 실행하려면 표준 수명주기 &lt;code&gt;check&lt;/code&gt; 작업을 실행하십시오 .</target>
        </trans-unit>
        <trans-unit id="cbd612ac393a456f8773735c05ddbd5f91419396" translate="yes" xml:space="preserve">
          <source>The plugin creates a compilation task for each combination of the target, output kind, and build type. The tasks have the following naming convention:</source>
          <target state="translated">플러그인은 대상, 출력 종류 및 빌드 유형의 각 조합에 대한 컴파일 작업을 만듭니다. 작업에는 다음과 같은 명명 규칙이 있습니다.</target>
        </trans-unit>
        <trans-unit id="b7797d4ea1281347f08b98f3d1593b5740b623cc" translate="yes" xml:space="preserve">
          <source>The plugin is shipped with a customized version of the &lt;code&gt;kotlinx.serialization&lt;/code&gt; plugin. To use it you don't have to add new buildscript dependencies, just apply the plugins and add a dependency on the serialization library:</source>
          <target state="translated">플러그인은 사용자 정의 된 &lt;code&gt;kotlinx.serialization&lt;/code&gt; 플러그인 버전과 함께 제공됩니다 . 그것을 사용하려면 새로운 빌드 스크립트 의존성을 추가 할 필요가 없으며 플러그인을 적용하고 직렬화 라이브러리에 의존성을 추가하십시오.</target>
        </trans-unit>
        <trans-unit id="a5b5cad9084adc7ffa681b4e8b7b6b009920bbab" translate="yes" xml:space="preserve">
          <source>The plugin option format is: &lt;code&gt;-P plugin:&amp;lt;plugin id&amp;gt;:&amp;lt;key&amp;gt;=&amp;lt;value&amp;gt;&lt;/code&gt;. Options can be repeated.</source>
          <target state="translated">플러그인 옵션 형식은 &lt;code&gt;-P plugin:&amp;lt;plugin id&amp;gt;:&amp;lt;key&amp;gt;=&amp;lt;value&amp;gt;&lt;/code&gt; 입니다. 옵션을 반복 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="4b96dd9cca135b083ee411ceef82d46edf74c104" translate="yes" xml:space="preserve">
          <source>The plugin specifies the following annotations: &lt;a href=&quot;http://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/stereotype/Component.html&quot;&gt;&lt;code&gt;@Component&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/scheduling/annotation/Async.html&quot;&gt;&lt;code&gt;@Async&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;http://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/transaction/annotation/Transactional.html&quot;&gt;&lt;code&gt;@Transactional&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;http://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/cache/annotation/Cacheable.html&quot;&gt;&lt;code&gt;@Cacheable&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;https://docs.spring.io/spring-boot/docs/current/api/org/springframework/boot/test/context/SpringBootTest.html&quot;&gt;&lt;code&gt;@SpringBootTest&lt;/code&gt;&lt;/a&gt;. Thanks to meta-annotations support classes annotated with &lt;a href=&quot;https://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/context/annotation/Configuration.html&quot;&gt;&lt;code&gt;@Configuration&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/stereotype/Controller.html&quot;&gt;&lt;code&gt;@Controller&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/bind/annotation/RestController.html&quot;&gt;&lt;code&gt;@RestController&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/stereotype/Service.html&quot;&gt;&lt;code&gt;@Service&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/stereotype/Repository.html&quot;&gt;&lt;code&gt;@Repository&lt;/code&gt;&lt;/a&gt; are automatically opened since these annotations are meta-annotated with &lt;a href=&quot;http://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/stereotype/Component.html&quot;&gt;&lt;code&gt;@Component&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">플러그인은 &lt;a href=&quot;http://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/stereotype/Component.html&quot;&gt; &lt;code&gt;@Component&lt;/code&gt; &lt;/a&gt; , &lt;a href=&quot;http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/scheduling/annotation/Async.html&quot;&gt; &lt;code&gt;@Async&lt;/code&gt; &lt;/a&gt; , &lt;a href=&quot;http://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/transaction/annotation/Transactional.html&quot;&gt; &lt;code&gt;@Transactional&lt;/code&gt; &lt;/a&gt; , &lt;a href=&quot;http://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/cache/annotation/Cacheable.html&quot;&gt; &lt;code&gt;@Cacheable&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;https://docs.spring.io/spring-boot/docs/current/api/org/springframework/boot/test/context/SpringBootTest.html&quot;&gt; &lt;code&gt;@SpringBootTest&lt;/code&gt; &lt;/a&gt; 주석을 지정합니다 . 메타 주석 덕분에 &lt;a href=&quot;https://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/context/annotation/Configuration.html&quot;&gt; &lt;code&gt;@Configuration&lt;/code&gt; &lt;/a&gt; , &lt;a href=&quot;https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/stereotype/Controller.html&quot;&gt; &lt;code&gt;@Controller&lt;/code&gt; &lt;/a&gt; , &lt;a href=&quot;https://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/bind/annotation/RestController.html&quot;&gt; &lt;code&gt;@RestController&lt;/code&gt; &lt;/a&gt; , &lt;a href=&quot;https://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/stereotype/Service.html&quot;&gt; &lt;code&gt;@Service&lt;/code&gt; &lt;/a&gt; 또는 &lt;a href=&quot;https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/stereotype/Repository.html&quot;&gt; &lt;code&gt;@Repository&lt;/code&gt; &lt;/a&gt; 로 주석이 달린 클래스 가 주석이 &lt;a href=&quot;http://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/stereotype/Component.html&quot;&gt; &lt;code&gt;@Component&lt;/code&gt; &lt;/a&gt; 로 메타 주석이기 때문에 자동으로 열립니다 .</target>
        </trans-unit>
        <trans-unit id="422a0ed13a769b30fb09b25e92467921db8dd51b" translate="yes" xml:space="preserve">
          <source>The plugin uses the same notation as the compiler. By default, test component uses the same targets as specified for the main one.</source>
          <target state="translated">플러그인은 컴파일러와 동일한 표기법을 사용합니다. 기본적으로 테스트 구성 요소는 기본 구성 요소에 지정된 것과 동일한 대상을 사용합니다.</target>
        </trans-unit>
        <trans-unit id="1f3c2f2fca540697d8f63e00a5a21435f0484957" translate="yes" xml:space="preserve">
          <source>The podspec generated includes a path to an output framework and script phases which automate building this framework during a build process of an Xcode project. Some fields of the podspec file can be configured using the &lt;code&gt;kotlin.cocoapods { ... }&lt;/code&gt; code block.</source>
          <target state="translated">생성 된 podspec에는 출력 프레임 워크에 대한 경로와 Xcode 프로젝트의 빌드 프로세스 중에이 프레임 워크 빌드를 자동화하는 스크립트 단계가 포함됩니다. podlin 파일의 일부 필드는 &lt;code&gt;kotlin.cocoapods { ... }&lt;/code&gt; 코드 블록을 사용하여 구성 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="4f2f6c39a4cfc0d578583a59ccc054d34affa473" translate="yes" xml:space="preserve">
          <source>The pointer with an opaque type.</source>
          <target state="translated">불투명 한 타입의 포인터.</target>
        </trans-unit>
        <trans-unit id="cac38148225622f1c3ccca3dceed3d6a499e0217" translate="yes" xml:space="preserve">
          <source>The possible values of &lt;a href=&quot;returns#kotlin.contracts.ContractBuilder%24returns%28kotlin.Any%29%2Fvalue&quot;&gt;value&lt;/a&gt; are limited to &lt;code&gt;true&lt;/code&gt;, &lt;code&gt;false&lt;/code&gt; or &lt;code&gt;null&lt;/code&gt;.</source>
          <target state="translated">가능한 value &lt;a href=&quot;returns#kotlin.contracts.ContractBuilder%24returns%28kotlin.Any%29%2Fvalue&quot;&gt;값&lt;/a&gt; 은 &lt;code&gt;true&lt;/code&gt; , &lt;code&gt;false&lt;/code&gt; 또는 &lt;code&gt;null&lt;/code&gt; 로 제한됩니다 .</target>
        </trans-unit>
        <trans-unit id="ff2c8804ee232db23ae3d579f25ad98024549ce9" translate="yes" xml:space="preserve">
          <source>The possible values of &lt;a href=&quot;returns#kotlin.contracts.ContractBuilder%24returns(kotlin.Any?)/value&quot;&gt;value&lt;/a&gt; are limited to &lt;code&gt;true&lt;/code&gt;, &lt;code&gt;false&lt;/code&gt; or &lt;code&gt;null&lt;/code&gt;.</source>
          <target state="translated">가능한 value &lt;a href=&quot;returns#kotlin.contracts.ContractBuilder%24returns(kotlin.Any?)/value&quot;&gt;값&lt;/a&gt; 은 &lt;code&gt;true&lt;/code&gt; , &lt;code&gt;false&lt;/code&gt; 또는 &lt;code&gt;null&lt;/code&gt; 로 제한됩니다 .</target>
        </trans-unit>
        <trans-unit id="db453765e0a754bcf108983d99d14a9cceb4e257" translate="yes" xml:space="preserve">
          <source>The predicates in &lt;code&gt;filter()&lt;/code&gt; can only check the values of the elements. If you want to use element positions in the filter, use &lt;a href=&quot;../../api/latest/jvm/stdlib/kotlin.collections/filter-indexed&quot;&gt;&lt;code&gt;filterIndexed()&lt;/code&gt;&lt;/a&gt;. It takes a predicate with two arguments: the index and the value of an element.</source>
          <target state="translated">&lt;code&gt;filter()&lt;/code&gt; 의 술어 는 요소의 값만 확인할 수 있습니다. 필터에서 요소 위치를 사용하려면 &lt;a href=&quot;../../api/latest/jvm/stdlib/kotlin.collections/filter-indexed&quot;&gt; &lt;code&gt;filterIndexed()&lt;/code&gt; &lt;/a&gt; . 인덱스와 요소의 값이라는 두 개의 인수가있는 술어를 사용합니다.</target>
        </trans-unit>
        <trans-unit id="273bc9daf88463decafd479d30c651cc98374847" translate="yes" xml:space="preserve">
          <source>The prepared project sources can be directly downloaded from &lt;a href=&quot;https://github.com/kotlin/web-site-samples/archive/mpp-kn-app-groovy-macos.zip&quot;&gt;GitHub&lt;/a&gt;. &lt;a href=&quot;https://github.com/kotlin/web-site-samples/archive/mpp-kn-app-groovy-linux.zip&quot;&gt;GitHub&lt;/a&gt;. &lt;a href=&quot;https://github.com/kotlin/web-site-samples/archive/mpp-kn-app-groovy-windows.zip&quot;&gt;GitHub&lt;/a&gt;. &lt;a href=&quot;https://github.com/kotlin/web-site-samples/archive/mpp-kn-app-kotlin-macos.zip&quot;&gt;GitHub&lt;/a&gt;. &lt;a href=&quot;https://github.com/kotlin/web-site-samples/archive/mpp-kn-app-kotlin-linux.zip&quot;&gt;GitHub&lt;/a&gt;. &lt;a href=&quot;https://github.com/kotlin/web-site-samples/archive/mpp-kn-app-kotlin-windows.zip&quot;&gt;GitHub&lt;/a&gt;.</source>
          <target state="translated">준비된 프로젝트 소스는 &lt;a href=&quot;https://github.com/kotlin/web-site-samples/archive/mpp-kn-app-groovy-macos.zip&quot;&gt;GitHub&lt;/a&gt; 에서 직접 다운로드 할 수 있습니다 . &lt;a href=&quot;https://github.com/kotlin/web-site-samples/archive/mpp-kn-app-groovy-linux.zip&quot;&gt;GitHub의&lt;/a&gt; . &lt;a href=&quot;https://github.com/kotlin/web-site-samples/archive/mpp-kn-app-groovy-windows.zip&quot;&gt;GitHub의&lt;/a&gt; . &lt;a href=&quot;https://github.com/kotlin/web-site-samples/archive/mpp-kn-app-kotlin-macos.zip&quot;&gt;GitHub의&lt;/a&gt; . &lt;a href=&quot;https://github.com/kotlin/web-site-samples/archive/mpp-kn-app-kotlin-linux.zip&quot;&gt;GitHub의&lt;/a&gt; . &lt;a href=&quot;https://github.com/kotlin/web-site-samples/archive/mpp-kn-app-kotlin-windows.zip&quot;&gt;GitHub의&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="1cda211d823296d73d5059839d0f82ff49bb5da0" translate="yes" xml:space="preserve">
          <source>The prepared project sources can be directly downloaded from &lt;a href=&quot;https://github.com/kotlin/web-site-samples/archive/mpp-kn-framework-groovy-macos-mac.zip&quot;&gt;GitHub&lt;/a&gt;. &lt;a href=&quot;https://github.com/kotlin/web-site-samples/archive/mpp-kn-framework-kotlin-macos-mac.zip&quot;&gt;GitHub&lt;/a&gt;.</source>
          <target state="translated">준비된 프로젝트 소스는 &lt;a href=&quot;https://github.com/kotlin/web-site-samples/archive/mpp-kn-framework-groovy-macos-mac.zip&quot;&gt;GitHub&lt;/a&gt; 에서 직접 다운로드 할 수 있습니다 . &lt;a href=&quot;https://github.com/kotlin/web-site-samples/archive/mpp-kn-framework-kotlin-macos-mac.zip&quot;&gt;GitHub의&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="83fad008770a134699f224ecf517dfb249b17b87" translate="yes" xml:space="preserve">
          <source>The prepared project sources can be directly downloaded from &lt;a href=&quot;https://github.com/kotlin/web-site-samples/archive/mpp-kn-shared-lib-groovy-linux.zip&quot;&gt;GitHub&lt;/a&gt;. &lt;a href=&quot;https://github.com/kotlin/web-site-samples/archive/mpp-kn-shared-lib-groovy-macos.zip&quot;&gt;GitHub&lt;/a&gt;. &lt;a href=&quot;https://github.com/kotlin/web-site-samples/archive/mpp-kn-shared-lib-groovy-windows.zip&quot;&gt;GitHub&lt;/a&gt;. &lt;a href=&quot;https://github.com/kotlin/web-site-samples/archive/mpp-kn-shared-lib-kotlin-linux.zip&quot;&gt;GitHub&lt;/a&gt;. &lt;a href=&quot;https://github.com/kotlin/web-site-samples/archive/mpp-kn-shared-lib-kotlin-macos.zip&quot;&gt;GitHub&lt;/a&gt;. &lt;a href=&quot;https://github.com/kotlin/web-site-samples/archive/mpp-kn-shared-lib-kotlin-windows.zip&quot;&gt;GitHub&lt;/a&gt;.</source>
          <target state="translated">준비된 프로젝트 소스는 &lt;a href=&quot;https://github.com/kotlin/web-site-samples/archive/mpp-kn-shared-lib-groovy-linux.zip&quot;&gt;GitHub&lt;/a&gt; 에서 직접 다운로드 할 수 있습니다 . &lt;a href=&quot;https://github.com/kotlin/web-site-samples/archive/mpp-kn-shared-lib-groovy-macos.zip&quot;&gt;GitHub의&lt;/a&gt; . &lt;a href=&quot;https://github.com/kotlin/web-site-samples/archive/mpp-kn-shared-lib-groovy-windows.zip&quot;&gt;GitHub의&lt;/a&gt; . &lt;a href=&quot;https://github.com/kotlin/web-site-samples/archive/mpp-kn-shared-lib-kotlin-linux.zip&quot;&gt;GitHub의&lt;/a&gt; . &lt;a href=&quot;https://github.com/kotlin/web-site-samples/archive/mpp-kn-shared-lib-kotlin-macos.zip&quot;&gt;GitHub의&lt;/a&gt; . &lt;a href=&quot;https://github.com/kotlin/web-site-samples/archive/mpp-kn-shared-lib-kotlin-windows.zip&quot;&gt;GitHub의&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="47fbf2be0cf9555e26f724c9cc904699b4e6d2c6" translate="yes" xml:space="preserve">
          <source>The prepared project sources can be downloaded directly from &lt;a href=&quot;https://github.com/kotlin/web-site-samples/archive/mpp-kn-app-groovy-macos-c.zip&quot;&gt;GitHub&lt;/a&gt;. &lt;a href=&quot;https://github.com/kotlin/web-site-samples/archive/mpp-kn-app-groovy-linux-c.zip&quot;&gt;GitHub&lt;/a&gt;. &lt;a href=&quot;https://github.com/kotlin/web-site-samples/archive/mpp-kn-app-groovy-windows-c.zip&quot;&gt;GitHub&lt;/a&gt;. &lt;a href=&quot;https://github.com/kotlin/web-site-samples/archive/mpp-kn-app-kotlin-macos-c.zip&quot;&gt;GitHub&lt;/a&gt;. &lt;a href=&quot;https://github.com/kotlin/web-site-samples/archive/mpp-kn-app-kotlin-linux-c.zip&quot;&gt;GitHub&lt;/a&gt;. &lt;a href=&quot;https://github.com/kotlin/web-site-samples/archive/mpp-kn-app-kotlin-windows-c.zip&quot;&gt;GitHub&lt;/a&gt;.</source>
          <target state="translated">준비된 프로젝트 소스는 &lt;a href=&quot;https://github.com/kotlin/web-site-samples/archive/mpp-kn-app-groovy-macos-c.zip&quot;&gt;GitHub&lt;/a&gt; 에서 직접 다운로드 할 수 있습니다 . &lt;a href=&quot;https://github.com/kotlin/web-site-samples/archive/mpp-kn-app-groovy-linux-c.zip&quot;&gt;GitHub의&lt;/a&gt; . &lt;a href=&quot;https://github.com/kotlin/web-site-samples/archive/mpp-kn-app-groovy-windows-c.zip&quot;&gt;GitHub의&lt;/a&gt; . &lt;a href=&quot;https://github.com/kotlin/web-site-samples/archive/mpp-kn-app-kotlin-macos-c.zip&quot;&gt;GitHub의&lt;/a&gt; . &lt;a href=&quot;https://github.com/kotlin/web-site-samples/archive/mpp-kn-app-kotlin-linux-c.zip&quot;&gt;GitHub의&lt;/a&gt; . &lt;a href=&quot;https://github.com/kotlin/web-site-samples/archive/mpp-kn-app-kotlin-windows-c.zip&quot;&gt;GitHub의&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="0b884226386a575e859d8ba59646588a18cff524" translate="yes" xml:space="preserve">
          <source>The preset functions return an existing target if there is one. This can be used to configure an existing target:</source>
          <target state="translated">사전 설정 기능은 기존 대상이있는 경우 기존 대상을 반환합니다. 기존 대상을 구성하는 데 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="f937582ad7c69cc78cc53932b083402871787e1f" translate="yes" xml:space="preserve">
          <source>The preset that the target has been created from, if any.</source>
          <target state="translated">대상이 생성 된 사전 설정입니다 (있는 경우).</target>
        </trans-unit>
        <trans-unit id="6f567afc7fd70eca03211b1e8f8d586dfbb85441" translate="yes" xml:space="preserve">
          <source>The previous example actually catches any exception happening in the emitter or in any intermediate or terminal operators. For example, let's change the code so that emitted values are &lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines.flow/map.html&quot;&gt;mapped&lt;/a&gt; to strings, but the corresponding code produces an exception:</source>
          <target state="translated">이전 예제는 실제로 이미 터 또는 중간 또는 터미널 연산자에서 발생하는 모든 예외를 포착합니다. 예를 들어, 내 보낸 값이 문자열에 &lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines.flow/map.html&quot;&gt;매핑&lt;/a&gt; 되도록 코드를 변경해 보지만 해당 코드에서 예외가 발생합니다.</target>
        </trans-unit>
        <trans-unit id="6ce6cb1616a5b69df481f1e26b0c9482dd84113e" translate="yes" xml:space="preserve">
          <source>The previous example can be rewritten using an &lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines.flow/on-completion.html&quot;&gt;onCompletion&lt;/a&gt; operator and produces the same output:</source>
          <target state="translated">이전 예제는 &lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines.flow/on-completion.html&quot;&gt;onCompletion&lt;/a&gt; 연산자를 사용하여 다시 작성할 수 있으며 동일한 출력을 생성합니다.</target>
        </trans-unit>
        <trans-unit id="94b4a93f08efae43f49ccc9068c6ccc45a749339" translate="yes" xml:space="preserve">
          <source>The primary constructor cannot contain any code. Initialization code can be placed in &lt;strong&gt;initializer blocks&lt;/strong&gt;, which are prefixed with the &lt;em&gt;init&lt;/em&gt; keyword.</source>
          <target state="translated">기본 생성자는 코드를 포함 할 수 없습니다. 초기화 코드는 &lt;strong&gt;이니셜 라이저 블록에&lt;/strong&gt; 배치 될 수 있으며, &lt;strong&gt;초기화 블록&lt;/strong&gt; 은 &lt;em&gt;init&lt;/em&gt; 키워드 가 접두어로 붙습니다 .</target>
        </trans-unit>
        <trans-unit id="9fdf36149a4f79a1bb95fdb86a615c52def92e79" translate="yes" xml:space="preserve">
          <source>The primary constructor needs to have at least one parameter;</source>
          <target state="translated">기본 생성자에는 하나 이상의 매개 변수가 있어야합니다.</target>
        </trans-unit>
        <trans-unit id="da3ee8bb58d5e5b4db4f578cf06329f7adf39108" translate="yes" xml:space="preserve">
          <source>The principles of Keeping the Language Modern and Comfortable Updates suggest that incompatible changes are sometimes necessary, but they should be introduced carefully. Our goal is to make the users aware of upcoming changes well in advance to let them migrate their code comfortably.</source>
          <target state="translated">언어를 현대적이고 편안한 업데이트로 유지하는 원칙에 따르면 호환되지 않는 변경이 필요할 수도 있지만 신중하게 소개해야합니다. 우리의 목표는 사용자에게 향후 변경 사항을 미리 알리고 코드를 편안하게 마이그레이션 할 수 있도록하는 것입니다.</target>
        </trans-unit>
        <trans-unit id="8a9400005c3bca2486ac5d4f71c851ac612c4135" translate="yes" xml:space="preserve">
          <source>The problem</source>
          <target state="translated">문제</target>
        </trans-unit>
        <trans-unit id="9c66b2fe04efcfddbeb39708f916ac0b213e981b" translate="yes" xml:space="preserve">
          <source>The problem is that in Kotlin we can say &lt;code&gt;unboxBase(boxDerived(&quot;s&quot;))&lt;/code&gt;, but in Java that would be impossible, because in Java the class &lt;code&gt;Box&lt;/code&gt; is &lt;em&gt;invariant&lt;/em&gt; in its parameter &lt;code&gt;T&lt;/code&gt;, and thus &lt;code&gt;Box&amp;lt;Derived&amp;gt;&lt;/code&gt; is not a subtype of &lt;code&gt;Box&amp;lt;Base&amp;gt;&lt;/code&gt;. To make it work in Java we'd have to define &lt;code&gt;unboxBase&lt;/code&gt; as follows:</source>
          <target state="translated">문제는 코 틀린에 우리가 말할 수 있다는 것입니다 &lt;code&gt;unboxBase(boxDerived(&quot;s&quot;))&lt;/code&gt; 하지만, 자바 클래스 때문에 자바 즉, 불가능하다 &lt;code&gt;Box&lt;/code&gt; 입니다 &lt;em&gt;불변&lt;/em&gt; 의 매개 변수 &lt;code&gt;T&lt;/code&gt; 따라서, 그리고 &lt;code&gt;Box&amp;lt;Derived&amp;gt;&lt;/code&gt; 서브 타입 아니다 의 &lt;code&gt;Box&amp;lt;Base&amp;gt;&lt;/code&gt; . Java에서 작동하게하려면 다음과 같이 &lt;code&gt;unboxBase&lt;/code&gt; 를 정의 해야 합니다.</target>
        </trans-unit>
        <trans-unit id="d0d37636a32f4cdf2f104260760bfa7761da1ecf" translate="yes" xml:space="preserve">
          <source>The process of building and running the Kotlin application in Android Studio is exactly the same as with Java.</source>
          <target state="translated">Android Studio에서 Kotlin 애플리케이션을 빌드하고 실행하는 프로세스는 Java와 정확히 동일합니다.</target>
        </trans-unit>
        <trans-unit id="5333ca5a84bee1fa54c6c2c65a4ed24b1d5a7d39" translate="yes" xml:space="preserve">
          <source>The programming model and APIs remain the same. We can continue to use loops, exception handling, etc. and there's no need to learn a complete set of new APIs</source>
          <target state="translated">프로그래밍 모델과 API는 동일하게 유지됩니다. 루프, 예외 처리 등을 계속 사용할 수 있으며 완전한 새로운 API 세트를 배울 필요가 없습니다.</target>
        </trans-unit>
        <trans-unit id="cbc23b45ec695a38d5e9af2e658da812853cfa4f" translate="yes" xml:space="preserve">
          <source>The progression starts with the &lt;a href=&quot;from-closed-range#kotlin.ranges.CharProgression.Companion%24fromClosedRange%28kotlin.Char%2C+kotlin.Char%2C+kotlin.Int%29%2FrangeStart&quot;&gt;rangeStart&lt;/a&gt; value and goes toward the &lt;a href=&quot;from-closed-range#kotlin.ranges.CharProgression.Companion%24fromClosedRange%28kotlin.Char%2C+kotlin.Char%2C+kotlin.Int%29%2FrangeEnd&quot;&gt;rangeEnd&lt;/a&gt; value not excluding it, with the specified &lt;a href=&quot;from-closed-range#kotlin.ranges.CharProgression.Companion%24fromClosedRange%28kotlin.Char%2C+kotlin.Char%2C+kotlin.Int%29%2Fstep&quot;&gt;step&lt;/a&gt;. In order to go backwards the &lt;a href=&quot;from-closed-range#kotlin.ranges.CharProgression.Companion%24fromClosedRange%28kotlin.Char%2C+kotlin.Char%2C+kotlin.Int%29%2Fstep&quot;&gt;step&lt;/a&gt; must be negative.</source>
          <target state="translated">진행은 &lt;a href=&quot;from-closed-range#kotlin.ranges.CharProgression.Companion%24fromClosedRange%28kotlin.Char%2C+kotlin.Char%2C+kotlin.Int%29%2FrangeStart&quot;&gt;rangeStart&lt;/a&gt; 값으로 시작 하여 지정된 &lt;a href=&quot;from-closed-range#kotlin.ranges.CharProgression.Companion%24fromClosedRange%28kotlin.Char%2C+kotlin.Char%2C+kotlin.Int%29%2Fstep&quot;&gt;step을&lt;/a&gt; 제외 하고 &lt;a href=&quot;from-closed-range#kotlin.ranges.CharProgression.Companion%24fromClosedRange%28kotlin.Char%2C+kotlin.Char%2C+kotlin.Int%29%2FrangeEnd&quot;&gt;rangeEnd&lt;/a&gt; 값을 제외하고 진행 합니다. 뒤로 가려면 &lt;a href=&quot;from-closed-range#kotlin.ranges.CharProgression.Companion%24fromClosedRange%28kotlin.Char%2C+kotlin.Char%2C+kotlin.Int%29%2Fstep&quot;&gt;단계&lt;/a&gt; 가 음수 여야합니다.</target>
        </trans-unit>
        <trans-unit id="3cfecf27df2864c65a3a1ce3c515f4f228c95a52" translate="yes" xml:space="preserve">
          <source>The progression starts with the &lt;a href=&quot;from-closed-range#kotlin.ranges.CharProgression.Companion%24fromClosedRange(kotlin.Char,%20kotlin.Char,%20kotlin.Int)/rangeStart&quot;&gt;rangeStart&lt;/a&gt; value and goes toward the &lt;a href=&quot;from-closed-range#kotlin.ranges.CharProgression.Companion%24fromClosedRange(kotlin.Char,%20kotlin.Char,%20kotlin.Int)/rangeEnd&quot;&gt;rangeEnd&lt;/a&gt; value not excluding it, with the specified &lt;a href=&quot;from-closed-range#kotlin.ranges.CharProgression.Companion%24fromClosedRange(kotlin.Char,%20kotlin.Char,%20kotlin.Int)/step&quot;&gt;step&lt;/a&gt;. In order to go backwards the &lt;a href=&quot;from-closed-range#kotlin.ranges.CharProgression.Companion%24fromClosedRange(kotlin.Char,%20kotlin.Char,%20kotlin.Int)/step&quot;&gt;step&lt;/a&gt; must be negative.</source>
          <target state="translated">진행은 &lt;a href=&quot;from-closed-range#kotlin.ranges.CharProgression.Companion%24fromClosedRange(kotlin.Char,%20kotlin.Char,%20kotlin.Int)/rangeStart&quot;&gt;rangeStart&lt;/a&gt; 값으로 시작 하여 지정된 &lt;a href=&quot;from-closed-range#kotlin.ranges.CharProgression.Companion%24fromClosedRange(kotlin.Char,%20kotlin.Char,%20kotlin.Int)/step&quot;&gt;단계를&lt;/a&gt; 사용하여 rangeStart 값을 제외하지 않고 &lt;a href=&quot;from-closed-range#kotlin.ranges.CharProgression.Companion%24fromClosedRange(kotlin.Char,%20kotlin.Char,%20kotlin.Int)/rangeEnd&quot;&gt;rangeEnd&lt;/a&gt; 값 으로 이동합니다 . 뒤로 이동하려면 &lt;a href=&quot;from-closed-range#kotlin.ranges.CharProgression.Companion%24fromClosedRange(kotlin.Char,%20kotlin.Char,%20kotlin.Int)/step&quot;&gt;단계&lt;/a&gt; 가 음수 여야합니다.</target>
        </trans-unit>
        <trans-unit id="8d272fe15b8cfff505d8d535e47fe9213e3e4bb4" translate="yes" xml:space="preserve">
          <source>The progression starts with the &lt;a href=&quot;from-closed-range#kotlin.ranges.IntProgression.Companion%24fromClosedRange%28kotlin.Int%2C+kotlin.Int%2C+kotlin.Int%29%2FrangeStart&quot;&gt;rangeStart&lt;/a&gt; value and goes toward the &lt;a href=&quot;from-closed-range#kotlin.ranges.IntProgression.Companion%24fromClosedRange%28kotlin.Int%2C+kotlin.Int%2C+kotlin.Int%29%2FrangeEnd&quot;&gt;rangeEnd&lt;/a&gt; value not excluding it, with the specified &lt;a href=&quot;from-closed-range#kotlin.ranges.IntProgression.Companion%24fromClosedRange%28kotlin.Int%2C+kotlin.Int%2C+kotlin.Int%29%2Fstep&quot;&gt;step&lt;/a&gt;. In order to go backwards the &lt;a href=&quot;from-closed-range#kotlin.ranges.IntProgression.Companion%24fromClosedRange%28kotlin.Int%2C+kotlin.Int%2C+kotlin.Int%29%2Fstep&quot;&gt;step&lt;/a&gt; must be negative.</source>
          <target state="translated">진행은 &lt;a href=&quot;from-closed-range#kotlin.ranges.IntProgression.Companion%24fromClosedRange%28kotlin.Int%2C+kotlin.Int%2C+kotlin.Int%29%2FrangeStart&quot;&gt;rangeStart&lt;/a&gt; 값으로 시작 하여 지정된 &lt;a href=&quot;from-closed-range#kotlin.ranges.IntProgression.Companion%24fromClosedRange%28kotlin.Int%2C+kotlin.Int%2C+kotlin.Int%29%2Fstep&quot;&gt;step을&lt;/a&gt; 제외 하고 &lt;a href=&quot;from-closed-range#kotlin.ranges.IntProgression.Companion%24fromClosedRange%28kotlin.Int%2C+kotlin.Int%2C+kotlin.Int%29%2FrangeEnd&quot;&gt;rangeEnd&lt;/a&gt; 값을 제외하고 진행 합니다. 뒤로 가려면 &lt;a href=&quot;from-closed-range#kotlin.ranges.IntProgression.Companion%24fromClosedRange%28kotlin.Int%2C+kotlin.Int%2C+kotlin.Int%29%2Fstep&quot;&gt;단계&lt;/a&gt; 가 음수 여야합니다.</target>
        </trans-unit>
        <trans-unit id="2c4a6206c951ddbe8fde808b1243da3bfe938dbc" translate="yes" xml:space="preserve">
          <source>The progression starts with the &lt;a href=&quot;from-closed-range#kotlin.ranges.IntProgression.Companion%24fromClosedRange(kotlin.Int,%20kotlin.Int,%20kotlin.Int)/rangeStart&quot;&gt;rangeStart&lt;/a&gt; value and goes toward the &lt;a href=&quot;from-closed-range#kotlin.ranges.IntProgression.Companion%24fromClosedRange(kotlin.Int,%20kotlin.Int,%20kotlin.Int)/rangeEnd&quot;&gt;rangeEnd&lt;/a&gt; value not excluding it, with the specified &lt;a href=&quot;from-closed-range#kotlin.ranges.IntProgression.Companion%24fromClosedRange(kotlin.Int,%20kotlin.Int,%20kotlin.Int)/step&quot;&gt;step&lt;/a&gt;. In order to go backwards the &lt;a href=&quot;from-closed-range#kotlin.ranges.IntProgression.Companion%24fromClosedRange(kotlin.Int,%20kotlin.Int,%20kotlin.Int)/step&quot;&gt;step&lt;/a&gt; must be negative.</source>
          <target state="translated">진행은 &lt;a href=&quot;from-closed-range#kotlin.ranges.IntProgression.Companion%24fromClosedRange(kotlin.Int,%20kotlin.Int,%20kotlin.Int)/rangeStart&quot;&gt;rangeStart&lt;/a&gt; 값으로 시작 하여 지정된 &lt;a href=&quot;from-closed-range#kotlin.ranges.IntProgression.Companion%24fromClosedRange(kotlin.Int,%20kotlin.Int,%20kotlin.Int)/step&quot;&gt;단계를&lt;/a&gt; 사용하여 rangeStart 값을 제외하지 않고 &lt;a href=&quot;from-closed-range#kotlin.ranges.IntProgression.Companion%24fromClosedRange(kotlin.Int,%20kotlin.Int,%20kotlin.Int)/rangeEnd&quot;&gt;rangeEnd&lt;/a&gt; 값 으로 이동합니다 . 뒤로 이동하려면 &lt;a href=&quot;from-closed-range#kotlin.ranges.IntProgression.Companion%24fromClosedRange(kotlin.Int,%20kotlin.Int,%20kotlin.Int)/step&quot;&gt;단계&lt;/a&gt; 가 음수 여야합니다.</target>
        </trans-unit>
        <trans-unit id="84ee7e5946067792bd4d0c03b228099a9bd9d9cd" translate="yes" xml:space="preserve">
          <source>The progression starts with the &lt;a href=&quot;from-closed-range#kotlin.ranges.LongProgression.Companion%24fromClosedRange%28kotlin.Long%2C+kotlin.Long%2C+kotlin.Long%29%2FrangeStart&quot;&gt;rangeStart&lt;/a&gt; value and goes toward the &lt;a href=&quot;from-closed-range#kotlin.ranges.LongProgression.Companion%24fromClosedRange%28kotlin.Long%2C+kotlin.Long%2C+kotlin.Long%29%2FrangeEnd&quot;&gt;rangeEnd&lt;/a&gt; value not excluding it, with the specified &lt;a href=&quot;from-closed-range#kotlin.ranges.LongProgression.Companion%24fromClosedRange%28kotlin.Long%2C+kotlin.Long%2C+kotlin.Long%29%2Fstep&quot;&gt;step&lt;/a&gt;. In order to go backwards the &lt;a href=&quot;from-closed-range#kotlin.ranges.LongProgression.Companion%24fromClosedRange%28kotlin.Long%2C+kotlin.Long%2C+kotlin.Long%29%2Fstep&quot;&gt;step&lt;/a&gt; must be negative.</source>
          <target state="translated">진행은 &lt;a href=&quot;from-closed-range#kotlin.ranges.LongProgression.Companion%24fromClosedRange%28kotlin.Long%2C+kotlin.Long%2C+kotlin.Long%29%2FrangeStart&quot;&gt;rangeStart&lt;/a&gt; 값으로 시작 하여 지정된 &lt;a href=&quot;from-closed-range#kotlin.ranges.LongProgression.Companion%24fromClosedRange%28kotlin.Long%2C+kotlin.Long%2C+kotlin.Long%29%2Fstep&quot;&gt;step을&lt;/a&gt; 제외 하고 &lt;a href=&quot;from-closed-range#kotlin.ranges.LongProgression.Companion%24fromClosedRange%28kotlin.Long%2C+kotlin.Long%2C+kotlin.Long%29%2FrangeEnd&quot;&gt;rangeEnd&lt;/a&gt; 값을 제외하고 진행 합니다. 뒤로 가려면 &lt;a href=&quot;from-closed-range#kotlin.ranges.LongProgression.Companion%24fromClosedRange%28kotlin.Long%2C+kotlin.Long%2C+kotlin.Long%29%2Fstep&quot;&gt;단계&lt;/a&gt; 가 음수 여야합니다.</target>
        </trans-unit>
        <trans-unit id="d9d863d5adbc27747b9056e74161d14934d72f8c" translate="yes" xml:space="preserve">
          <source>The progression starts with the &lt;a href=&quot;from-closed-range#kotlin.ranges.LongProgression.Companion%24fromClosedRange(kotlin.Long,%20kotlin.Long,%20kotlin.Long)/rangeStart&quot;&gt;rangeStart&lt;/a&gt; value and goes toward the &lt;a href=&quot;from-closed-range#kotlin.ranges.LongProgression.Companion%24fromClosedRange(kotlin.Long,%20kotlin.Long,%20kotlin.Long)/rangeEnd&quot;&gt;rangeEnd&lt;/a&gt; value not excluding it, with the specified &lt;a href=&quot;from-closed-range#kotlin.ranges.LongProgression.Companion%24fromClosedRange(kotlin.Long,%20kotlin.Long,%20kotlin.Long)/step&quot;&gt;step&lt;/a&gt;. In order to go backwards the &lt;a href=&quot;from-closed-range#kotlin.ranges.LongProgression.Companion%24fromClosedRange(kotlin.Long,%20kotlin.Long,%20kotlin.Long)/step&quot;&gt;step&lt;/a&gt; must be negative.</source>
          <target state="translated">진행은 &lt;a href=&quot;from-closed-range#kotlin.ranges.LongProgression.Companion%24fromClosedRange(kotlin.Long,%20kotlin.Long,%20kotlin.Long)/rangeStart&quot;&gt;rangeStart&lt;/a&gt; 값으로 시작 하여 지정된 &lt;a href=&quot;from-closed-range#kotlin.ranges.LongProgression.Companion%24fromClosedRange(kotlin.Long,%20kotlin.Long,%20kotlin.Long)/step&quot;&gt;단계를&lt;/a&gt; 사용하여 rangeStart 값을 제외하지 않고 &lt;a href=&quot;from-closed-range#kotlin.ranges.LongProgression.Companion%24fromClosedRange(kotlin.Long,%20kotlin.Long,%20kotlin.Long)/rangeEnd&quot;&gt;rangeEnd&lt;/a&gt; 값 으로 이동합니다 . 뒤로 이동하려면 &lt;a href=&quot;from-closed-range#kotlin.ranges.LongProgression.Companion%24fromClosedRange(kotlin.Long,%20kotlin.Long,%20kotlin.Long)/step&quot;&gt;단계&lt;/a&gt; 가 음수 여야합니다.</target>
        </trans-unit>
        <trans-unit id="8d8b7627f24846e9a31abff3ae25964002a498bf" translate="yes" xml:space="preserve">
          <source>The progression starts with the &lt;a href=&quot;from-closed-range#kotlin.ranges.UIntProgression.Companion%24fromClosedRange%28kotlin.UInt%2C+kotlin.UInt%2C+kotlin.Int%29%2FrangeStart&quot;&gt;rangeStart&lt;/a&gt; value and goes toward the &lt;a href=&quot;from-closed-range#kotlin.ranges.UIntProgression.Companion%24fromClosedRange%28kotlin.UInt%2C+kotlin.UInt%2C+kotlin.Int%29%2FrangeEnd&quot;&gt;rangeEnd&lt;/a&gt; value not excluding it, with the specified &lt;a href=&quot;from-closed-range#kotlin.ranges.UIntProgression.Companion%24fromClosedRange%28kotlin.UInt%2C+kotlin.UInt%2C+kotlin.Int%29%2Fstep&quot;&gt;step&lt;/a&gt;. In order to go backwards the &lt;a href=&quot;from-closed-range#kotlin.ranges.UIntProgression.Companion%24fromClosedRange%28kotlin.UInt%2C+kotlin.UInt%2C+kotlin.Int%29%2Fstep&quot;&gt;step&lt;/a&gt; must be negative.</source>
          <target state="translated">진행은 &lt;a href=&quot;from-closed-range#kotlin.ranges.UIntProgression.Companion%24fromClosedRange%28kotlin.UInt%2C+kotlin.UInt%2C+kotlin.Int%29%2FrangeStart&quot;&gt;rangeStart&lt;/a&gt; 값으로 시작 하여 지정된 &lt;a href=&quot;from-closed-range#kotlin.ranges.UIntProgression.Companion%24fromClosedRange%28kotlin.UInt%2C+kotlin.UInt%2C+kotlin.Int%29%2Fstep&quot;&gt;step을&lt;/a&gt; 제외 하고 &lt;a href=&quot;from-closed-range#kotlin.ranges.UIntProgression.Companion%24fromClosedRange%28kotlin.UInt%2C+kotlin.UInt%2C+kotlin.Int%29%2FrangeEnd&quot;&gt;rangeEnd&lt;/a&gt; 값을 제외하고 진행 합니다. 뒤로 가려면 &lt;a href=&quot;from-closed-range#kotlin.ranges.UIntProgression.Companion%24fromClosedRange%28kotlin.UInt%2C+kotlin.UInt%2C+kotlin.Int%29%2Fstep&quot;&gt;단계&lt;/a&gt; 가 음수 여야합니다.</target>
        </trans-unit>
        <trans-unit id="890067d4bb4a41e1198a024fd7c7c538b8728df3" translate="yes" xml:space="preserve">
          <source>The progression starts with the &lt;a href=&quot;from-closed-range#kotlin.ranges.UIntProgression.Companion%24fromClosedRange(kotlin.UInt,%20kotlin.UInt,%20kotlin.Int)/rangeStart&quot;&gt;rangeStart&lt;/a&gt; value and goes toward the &lt;a href=&quot;from-closed-range#kotlin.ranges.UIntProgression.Companion%24fromClosedRange(kotlin.UInt,%20kotlin.UInt,%20kotlin.Int)/rangeEnd&quot;&gt;rangeEnd&lt;/a&gt; value not excluding it, with the specified &lt;a href=&quot;from-closed-range#kotlin.ranges.UIntProgression.Companion%24fromClosedRange(kotlin.UInt,%20kotlin.UInt,%20kotlin.Int)/step&quot;&gt;step&lt;/a&gt;. In order to go backwards the &lt;a href=&quot;from-closed-range#kotlin.ranges.UIntProgression.Companion%24fromClosedRange(kotlin.UInt,%20kotlin.UInt,%20kotlin.Int)/step&quot;&gt;step&lt;/a&gt; must be negative.</source>
          <target state="translated">진행은 &lt;a href=&quot;from-closed-range#kotlin.ranges.UIntProgression.Companion%24fromClosedRange(kotlin.UInt,%20kotlin.UInt,%20kotlin.Int)/rangeStart&quot;&gt;rangeStart&lt;/a&gt; 값으로 시작 하여 지정된 &lt;a href=&quot;from-closed-range#kotlin.ranges.UIntProgression.Companion%24fromClosedRange(kotlin.UInt,%20kotlin.UInt,%20kotlin.Int)/step&quot;&gt;단계를&lt;/a&gt; 사용하여 rangeStart 값을 제외하지 않고 &lt;a href=&quot;from-closed-range#kotlin.ranges.UIntProgression.Companion%24fromClosedRange(kotlin.UInt,%20kotlin.UInt,%20kotlin.Int)/rangeEnd&quot;&gt;rangeEnd&lt;/a&gt; 값 으로 이동합니다 . 뒤로 이동하려면 &lt;a href=&quot;from-closed-range#kotlin.ranges.UIntProgression.Companion%24fromClosedRange(kotlin.UInt,%20kotlin.UInt,%20kotlin.Int)/step&quot;&gt;단계&lt;/a&gt; 가 음수 여야합니다.</target>
        </trans-unit>
        <trans-unit id="bc7d38b12995812c4efea617bb206ec4460e9ccc" translate="yes" xml:space="preserve">
          <source>The progression starts with the &lt;a href=&quot;from-closed-range#kotlin.ranges.ULongProgression.Companion%24fromClosedRange%28kotlin.ULong%2C+kotlin.ULong%2C+kotlin.Long%29%2FrangeStart&quot;&gt;rangeStart&lt;/a&gt; value and goes toward the &lt;a href=&quot;from-closed-range#kotlin.ranges.ULongProgression.Companion%24fromClosedRange%28kotlin.ULong%2C+kotlin.ULong%2C+kotlin.Long%29%2FrangeEnd&quot;&gt;rangeEnd&lt;/a&gt; value not excluding it, with the specified &lt;a href=&quot;from-closed-range#kotlin.ranges.ULongProgression.Companion%24fromClosedRange%28kotlin.ULong%2C+kotlin.ULong%2C+kotlin.Long%29%2Fstep&quot;&gt;step&lt;/a&gt;. In order to go backwards the &lt;a href=&quot;from-closed-range#kotlin.ranges.ULongProgression.Companion%24fromClosedRange%28kotlin.ULong%2C+kotlin.ULong%2C+kotlin.Long%29%2Fstep&quot;&gt;step&lt;/a&gt; must be negative.</source>
          <target state="translated">진행은 &lt;a href=&quot;from-closed-range#kotlin.ranges.ULongProgression.Companion%24fromClosedRange%28kotlin.ULong%2C+kotlin.ULong%2C+kotlin.Long%29%2FrangeStart&quot;&gt;rangeStart&lt;/a&gt; 값으로 시작 하여 지정된 &lt;a href=&quot;from-closed-range#kotlin.ranges.ULongProgression.Companion%24fromClosedRange%28kotlin.ULong%2C+kotlin.ULong%2C+kotlin.Long%29%2Fstep&quot;&gt;step을&lt;/a&gt; 제외 하고 &lt;a href=&quot;from-closed-range#kotlin.ranges.ULongProgression.Companion%24fromClosedRange%28kotlin.ULong%2C+kotlin.ULong%2C+kotlin.Long%29%2FrangeEnd&quot;&gt;rangeEnd&lt;/a&gt; 값을 제외하고 진행 합니다. 뒤로 가려면 &lt;a href=&quot;from-closed-range#kotlin.ranges.ULongProgression.Companion%24fromClosedRange%28kotlin.ULong%2C+kotlin.ULong%2C+kotlin.Long%29%2Fstep&quot;&gt;단계&lt;/a&gt; 가 음수 여야합니다.</target>
        </trans-unit>
        <trans-unit id="cfd566a721eacfbba5c78dd8988340e1f6d111e0" translate="yes" xml:space="preserve">
          <source>The progression starts with the &lt;a href=&quot;from-closed-range#kotlin.ranges.ULongProgression.Companion%24fromClosedRange(kotlin.ULong,%20kotlin.ULong,%20kotlin.Long)/rangeStart&quot;&gt;rangeStart&lt;/a&gt; value and goes toward the &lt;a href=&quot;from-closed-range#kotlin.ranges.ULongProgression.Companion%24fromClosedRange(kotlin.ULong,%20kotlin.ULong,%20kotlin.Long)/rangeEnd&quot;&gt;rangeEnd&lt;/a&gt; value not excluding it, with the specified &lt;a href=&quot;from-closed-range#kotlin.ranges.ULongProgression.Companion%24fromClosedRange(kotlin.ULong,%20kotlin.ULong,%20kotlin.Long)/step&quot;&gt;step&lt;/a&gt;. In order to go backwards the &lt;a href=&quot;from-closed-range#kotlin.ranges.ULongProgression.Companion%24fromClosedRange(kotlin.ULong,%20kotlin.ULong,%20kotlin.Long)/step&quot;&gt;step&lt;/a&gt; must be negative.</source>
          <target state="translated">진행은 &lt;a href=&quot;from-closed-range#kotlin.ranges.ULongProgression.Companion%24fromClosedRange(kotlin.ULong,%20kotlin.ULong,%20kotlin.Long)/rangeStart&quot;&gt;rangeStart&lt;/a&gt; 값으로 시작 하여 지정된 &lt;a href=&quot;from-closed-range#kotlin.ranges.ULongProgression.Companion%24fromClosedRange(kotlin.ULong,%20kotlin.ULong,%20kotlin.Long)/step&quot;&gt;단계를&lt;/a&gt; 사용하여 rangeStart 값을 제외하지 않고 &lt;a href=&quot;from-closed-range#kotlin.ranges.ULongProgression.Companion%24fromClosedRange(kotlin.ULong,%20kotlin.ULong,%20kotlin.Long)/rangeEnd&quot;&gt;rangeEnd&lt;/a&gt; 값 으로 이동합니다 . 뒤로 이동하려면 &lt;a href=&quot;from-closed-range#kotlin.ranges.ULongProgression.Companion%24fromClosedRange(kotlin.ULong,%20kotlin.ULong,%20kotlin.Long)/step&quot;&gt;단계&lt;/a&gt; 가 음수 여야합니다.</target>
        </trans-unit>
        <trans-unit id="f35887cf67bb91d63b75657011139a4b8f31176b" translate="yes" xml:space="preserve">
          <source>The project file configures the C interop as an additional step of the build. Let's move the &lt;code&gt;interop.def&lt;/code&gt; file to the &lt;code&gt;src/nativeInterop/cinterop&lt;/code&gt; directory. Gradle recommends using conventions instead of configurations, for example, the source files are expected to be in the &lt;code&gt;src/nativeMain/kotlin&lt;/code&gt; folder. By default, all the symbols from C are imported to the &lt;code&gt;interop&lt;/code&gt; package, we may want to import the whole package in our &lt;code&gt;.kt&lt;/code&gt; files. Check out the &lt;a href=&quot;../../reference/building-mpp-with-gradle&quot;&gt;kotlin-multiplatform&lt;/a&gt; plugin documentation to learn about all the different ways you could configure it.</source>
          <target state="translated">프로젝트 파일은 C interop을 빌드의 추가 단계로 구성합니다. &lt;code&gt;interop.def&lt;/code&gt; 파일을 &lt;code&gt;src/nativeInterop/cinterop&lt;/code&gt; 디렉토리 로 이동하십시오 . Gradle은 구성 대신 규칙을 사용하는 것이 좋습니다. 예를 들어 소스 파일은 &lt;code&gt;src/nativeMain/kotlin&lt;/code&gt; 폴더에 있어야 합니다. 기본적으로 C의 모든 심볼을 &lt;code&gt;interop&lt;/code&gt; 패키지로 가져옵니다. 전체 패키지를 &lt;code&gt;.kt&lt;/code&gt; 파일 로 가져 오는 것이 좋습니다 . &lt;a href=&quot;../../reference/building-mpp-with-gradle&quot;&gt;kotlin-multiplatform&lt;/a&gt; 플러그인 문서를 확인하여 구성 할 수있는 모든 다른 방법에 대해 알아보십시오.</target>
        </trans-unit>
        <trans-unit id="c7f7aa55f08a335c3d3db3f646f14c719c538320" translate="yes" xml:space="preserve">
          <source>The project file configures the C interop as an additional step of the build. Let's move the &lt;code&gt;interop.def&lt;/code&gt; file to the &lt;code&gt;src/nativeInterop/cinterop&lt;/code&gt; directory. Gradle recommends using conventions instead of configurations, for example, the source files are expected to be in the &lt;code&gt;src/nativeMain/kotlin&lt;/code&gt; folder. By default, all the symbols from C are imported to the &lt;code&gt;interop&lt;/code&gt; package, we may want to import the whole package in our &lt;code&gt;.kt&lt;/code&gt; files. Check out the &lt;a href=&quot;../../reference/mpp-discover-project#multiplatform-plugin&quot;&gt;kotlin-multiplatform&lt;/a&gt; plugin documentation to learn about all the different ways you could configure it.</source>
          <target state="translated">프로젝트 파일은 빌드의 추가 단계로 C interop을 구성합니다. 하자가 이동 &lt;code&gt;interop.def&lt;/code&gt; 을 받는 파일을 &lt;code&gt;src/nativeInterop/cinterop&lt;/code&gt; 디렉토리. Gradle은 구성 대신 규칙을 사용할 것을 권장합니다. 예를 들어 소스 파일은 &lt;code&gt;src/nativeMain/kotlin&lt;/code&gt; 폴더에 있어야 합니다. 기본적으로 C의 모든 기호는 &lt;code&gt;interop&lt;/code&gt; 패키지로 가져 &lt;code&gt;.kt&lt;/code&gt; 파일 의 전체 패키지를 가져올 수 있습니다. 구성 할 수있는 모든 다양한 방법에 대해 알아 보려면 &lt;a href=&quot;../../reference/mpp-discover-project#multiplatform-plugin&quot;&gt;kotlin-multiplatform&lt;/a&gt; 플러그인 문서를 확인하세요 .</target>
        </trans-unit>
        <trans-unit id="f6e9497c74b4e34e5f47b553a66d8ecc4543bedd" translate="yes" xml:space="preserve">
          <source>The project includes the directory &lt;code&gt;src&lt;/code&gt; with Kotlin source sets, which are collections of Kotlin code files, along with their resources, dependencies, and language settings. A source set can be used in Kotlin compilations for one or more target platforms.</source>
          <target state="translated">프로젝트에는 리소스, 종속성, 언어 설정과 함께 Kotlin 코드 파일 모음 인 Kotlin 소스 세트가있는 &lt;code&gt;src&lt;/code&gt; 디렉토리가 포함되어 있습니다. 하나 이상의 대상 플랫폼에 대한 Kotlin 컴파일에서 소스 세트를 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="04a29f21fc01df00a35820fecf66f137da298242" translate="yes" xml:space="preserve">
          <source>The project is ready. The next step is to open it in IntelliJ IDEA. For advanced build scenarios, it is recommended to refer to the &lt;a href=&quot;../../reference/building-mpp-with-gradle#setting-up-a-multiplatform-project&quot;&gt;more detailed&lt;/a&gt; documentation.</source>
          <target state="translated">프로젝트가 준비되었습니다. 다음 단계는 IntelliJ IDEA에서 여는 것입니다. 고급 빌드 시나리오의 경우 &lt;a href=&quot;../../reference/building-mpp-with-gradle#setting-up-a-multiplatform-project&quot;&gt;자세한&lt;/a&gt; 문서 를 참조하는 것이 좋습니다 .</target>
        </trans-unit>
        <trans-unit id="b358195ade68af7da060ed2c5bd98eb5f625c0a9" translate="yes" xml:space="preserve">
          <source>The project source roots</source>
          <target state="translated">프로젝트 소스 루트</target>
        </trans-unit>
        <trans-unit id="6b692a2a5504099d52b9ee1d8cd9e82682b0438b" translate="yes" xml:space="preserve">
          <source>The project structure looks like this:</source>
          <target state="translated">프로젝트 구조는 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="85001da371d8ff3d4160eee8edd3719f9a8a82c8" translate="yes" xml:space="preserve">
          <source>The project's source files are unchanged.</source>
          <target state="translated">프로젝트의 소스 파일은 변경되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="fe6d1020447b5badd7227ed9268d67a33471daca" translate="yes" xml:space="preserve">
          <source>The property that can be used as a placeholder for statements and values that are defined in JavaScript.</source>
          <target state="translated">JavaScript로 정의 된 명령문 및 값의 플레이스 홀더로 사용할 수있는 특성입니다.</target>
        </trans-unit>
        <trans-unit id="fe5ea5ce74d05b50ab08ac3eaf5980cd10f01114" translate="yes" xml:space="preserve">
          <source>The property which this accessor is originated from.</source>
          <target state="translated">이 접근자가 시작된 속성입니다.</target>
        </trans-unit>
        <trans-unit id="f478ed7d5b12b6f5e34c37814b287211378258c6" translate="yes" xml:space="preserve">
          <source>The provisions of the &lt;a href=&quot;kotlin-evolution&quot;&gt;Kotlin evolution policy&lt;/a&gt; fully apply only to components that have reached Full Stability (FS). From that point on incompatible changes have to be approved by the Language Committee.</source>
          <target state="translated">&lt;a href=&quot;kotlin-evolution&quot;&gt;Kotlin 진화 정책&lt;/a&gt; 의 조항은 전체 안정성 (FS)에 도달 한 구성 요소에만 완전히 적용됩니다. 그 시점부터 언어위원회는 호환되지 않는 변경 사항을 승인해야합니다.</target>
        </trans-unit>
        <trans-unit id="10a03850a04015022f37051ccca3f8cdb619035d" translate="yes" xml:space="preserve">
          <source>The publication of this target is handled by the Kotlin plugin and doesn't require steps that are specific for the Java plugin.</source>
          <target state="translated">이 타겟의 게시는 Kotlin 플러그인에 의해 처리되며 자바 플러그인에 특정한 단계가 필요하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="4e0268d689de7d5f78e70c6cb1e82a66dc683856" translate="yes" xml:space="preserve">
          <source>The publication of this target is handled by the Kotlin plugin and doesn't require the steps that are specific to the Java plugin, such as manually creating a publication and configuring it as &lt;code&gt;from(components.java)&lt;/code&gt;.</source>
          <target state="translated">이 대상의 공개는 Kotlin 플러그인에 의해 처리되며 공개를 수동으로 작성하고 &lt;code&gt;from(components.java)&lt;/code&gt; 로 구성하는 것과 같이 Java 플러그인에 특정한 단계가 필요하지 않습니다 .</target>
        </trans-unit>
        <trans-unit id="38341133c8abc06ea8b313769f8407419006fee4" translate="yes" xml:space="preserve">
          <source>The purpose of this code is to write out some text in the console. In order to use this from the browser, load it, preferably from inside an HTML page:</source>
          <target state="translated">이 코드의 목적은 콘솔에서 일부 텍스트를 작성하는 것입니다. 브라우저에서 이것을 사용하려면 HTML 페이지 내부에서로드하십시오.</target>
        </trans-unit>
        <trans-unit id="dc84bc4a3671f7fd39fcbdb5d811a4f7dfb04fdc" translate="yes" xml:space="preserve">
          <source>The quickest way to try out C API mapping is to have all C declarations in the &lt;code&gt;interop.def&lt;/code&gt; file, without creating any &lt;code&gt;.h&lt;/code&gt; of &lt;code&gt;.c&lt;/code&gt; files at all. Then place the C declarations in a &lt;code&gt;.def&lt;/code&gt; file after the special &lt;code&gt;---&lt;/code&gt; separator line:</source>
          <target state="translated">C의 API 매핑을 시도하는 가장 빠른 방법은 모든 C 선언하는 것입니다 &lt;code&gt;interop.def&lt;/code&gt; 의 어떤 생성하지 않고, 파일을 &lt;code&gt;.h&lt;/code&gt; 의 &lt;code&gt;.c&lt;/code&gt; 인 모든에서 파일을. 그런 다음 특수 &lt;code&gt;---&lt;/code&gt; 구분 기호 줄 뒤에 &lt;code&gt;.def&lt;/code&gt; 파일 에 C 선언을 배치하십시오 .</target>
        </trans-unit>
        <trans-unit id="8b65082730419e0089fe0272610ec1d026b13069" translate="yes" xml:space="preserve">
          <source>The range of durations that can be expressed as a &lt;code&gt;Long&lt;/code&gt; number of milliseconds is approximately &amp;plusmn;292 million years.</source>
          <target state="translated">&lt;code&gt;Long&lt;/code&gt; 밀리 초 수로 표현할 수있는 기간의 범위 는 약 &amp;plusmn; 292 백만년입니다.</target>
        </trans-unit>
        <trans-unit id="a3be989e45ad02ac9e3f6bde822e680ef8bccdc5" translate="yes" xml:space="preserve">
          <source>The range of durations that can be expressed as a &lt;code&gt;Long&lt;/code&gt; number of nanoseconds is approximately &amp;plusmn;292 years.</source>
          <target state="translated">&lt;code&gt;Long&lt;/code&gt; 나노초 수로 표현할 수있는 기간의 범위 는 약 &amp;plusmn; 292 년입니다.</target>
        </trans-unit>
        <trans-unit id="086ba4582c0f9ff5d704a53067f7ea26f2bef36a" translate="yes" xml:space="preserve">
          <source>The range of indices in the input string where group was captured.</source>
          <target state="translated">그룹이 캡처 된 입력 문자열의 인덱스 범위입니다.</target>
        </trans-unit>
        <trans-unit id="d16563c64c4aedfc780b010fa9c5624f673175d2" translate="yes" xml:space="preserve">
          <source>The range of indices in the original string where match was captured.</source>
          <target state="translated">일치가 캡처 된 원래 문자열의 인덱스 범위입니다.</target>
        </trans-unit>
        <trans-unit id="199d1e88f27ba9b05b8adc73d8d822df0cadd36a" translate="yes" xml:space="preserve">
          <source>The read-only collection types are &lt;a href=&quot;generics#variance&quot;&gt;covariant&lt;/a&gt;. This means that, if a &lt;code&gt;Rectangle&lt;/code&gt; class inherits from &lt;code&gt;Shape&lt;/code&gt;, you can use a &lt;code&gt;List&amp;lt;Rectangle&amp;gt;&lt;/code&gt; anywhere the &lt;code&gt;List&amp;lt;Shape&amp;gt;&lt;/code&gt; is required. In other words, the collection types have the same subtyping relationship as the element types. Maps are covariant on the value type, but not on the key type.</source>
          <target state="translated">읽기 전용 콜렉션 유형은 &lt;a href=&quot;generics#variance&quot;&gt;공변량&lt;/a&gt; 입니다. 즉, &lt;code&gt;Rectangle&lt;/code&gt; 클래스가 &lt;code&gt;Shape&lt;/code&gt; 에서 상속되는 경우 &lt;code&gt;List&amp;lt;Shape&amp;gt;&lt;/code&gt; 이 필요한 곳이면 &lt;code&gt;List&amp;lt;Rectangle&amp;gt;&lt;/code&gt; 사용할 수 있습니다 . 즉, 컬렉션 유형은 요소 유형과 동일한 하위 유형 관계를 갖습니다. 지도는 값 유형에 대해 공변량이지만 키 유형에는 없습니다.</target>
        </trans-unit>
        <trans-unit id="2ddb83b3e5eaf3228b8ed04e27d5be844d1ede7b" translate="yes" xml:space="preserve">
          <source>The reason we're seeing the actual output is because the call &lt;code&gt;curl_easy_perform&lt;/code&gt; prints the result to the standard output. We could hide this using &lt;code&gt;curl_easy_setopt&lt;/code&gt;.</source>
          <target state="translated">실제 출력을 보는 이유는 &lt;code&gt;curl_easy_perform&lt;/code&gt; 호출 이 결과를 표준 출력에 인쇄 하기 때문 입니다. &lt;code&gt;curl_easy_setopt&lt;/code&gt; 를 사용하여 이것을 숨길 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="4670c1839cea0120059e336f30de1dda186179ab" translate="yes" xml:space="preserve">
          <source>The recommended way to use Kotlin/JS is via the &lt;code&gt;kotlin.js&lt;/code&gt; and &lt;code&gt;kotlin.multiplatform&lt;/code&gt; Gradle plugins. They provide a central and convenient way to set up and control Kotlin projects targeting JavaScript. This includes essential functionality such as controlling the bundling of your application, adding JavaScript dependencies directly from npm, and more. To get an overview of the available options, check out the &lt;a href=&quot;js-project-setup&quot;&gt;Kotlin/JS project setup&lt;/a&gt; documentation.</source>
          <target state="translated">Kotlin / JS를 사용하는 권장 방법은 &lt;code&gt;kotlin.js&lt;/code&gt; 및 &lt;code&gt;kotlin.multiplatform&lt;/code&gt; Gradle 플러그인을 사용하는 것입니다. JavaScript를 대상으로하는 Kotlin 프로젝트를 설정하고 제어하는 ​​중앙의 편리한 방법을 제공합니다. 여기에는 애플리케이션 번들링 제어, npm에서 직접 JavaScript 종속성 추가 등과 같은 필수 기능이 포함됩니다. 사용 가능한 옵션에 대한 개요를 보려면 &lt;a href=&quot;js-project-setup&quot;&gt;Kotlin / JS 프로젝트 설정&lt;/a&gt; 문서를 확인하세요 .</target>
        </trans-unit>
        <trans-unit id="58ca5ea2bf2b7e6112a4ed6c521b74a4fb8e1b96" translate="yes" xml:space="preserve">
          <source>The reference is a value of type &lt;a href=&quot;../../api/latest/jvm/stdlib/kotlin.reflect/-k-class/index&quot;&gt;KClass&lt;/a&gt;.</source>
          <target state="translated">참조는 &lt;a href=&quot;../../api/latest/jvm/stdlib/kotlin.reflect/-k-class/index&quot;&gt;KClass&lt;/a&gt; 유형의 값입니다 .</target>
        </trans-unit>
        <trans-unit id="cef50f619cc0308e3db26c3e7a3c98fcbdab204e" translate="yes" xml:space="preserve">
          <source>The referenced value or null if referred object is not frozen and current worker is different from the one created this.</source>
          <target state="translated">참조 된 개체가 고정되지 않고 현재 작업자가이 작업을 만든 작업자와 다른 경우 참조 된 값 또는 null입니다.</target>
        </trans-unit>
        <trans-unit id="6e2258bc637d2fb4dedf8b2c195ace128e99affc" translate="yes" xml:space="preserve">
          <source>The referenced value.</source>
          <target state="translated">참조 된 값입니다.</target>
        </trans-unit>
        <trans-unit id="225d32a1d2d879830740b8e0770ecbbb02de2cc7" translate="yes" xml:space="preserve">
          <source>The referenced value. Gets the value or sets the new value. If new value is not null, and &lt;code&gt;this&lt;/code&gt; is frozen - it must be frozen or permanent object.</source>
          <target state="translated">참조 된 값. 값을 가져 오거나 새 값을 설정합니다. 새 값이 null이 아닌 경우 및 &lt;code&gt;this&lt;/code&gt; 냉동 - 그것은 냉동 또는 고정 된 물체해야합니다.</target>
        </trans-unit>
        <trans-unit id="9e1c9e946585f6c5b784f91adc26c58c91e5a3c2" translate="yes" xml:space="preserve">
          <source>The referenced value. Gets the value or sets the new value. If new value is not null, it must be frozen or permanent object.</source>
          <target state="translated">참조 된 값. 값을 가져 오거나 새 값을 설정합니다. 새 값이 null이 아닌 경우 고정되거나 영구 객체 여야합니다.</target>
        </trans-unit>
        <trans-unit id="04f24df5fbabe6af37ab1161e95151a96c9196e9" translate="yes" xml:space="preserve">
          <source>The repositories where the library will be published are added via the &lt;code&gt;repositories&lt;/code&gt; block in the &lt;code&gt;publishing { ... }&lt;/code&gt; DSL, as explained in &lt;a href=&quot;https://docs.gradle.org/current/userguide/publishing_maven.html#publishing_maven:repositories&quot;&gt;Maven Publish Plugin. Repositories&lt;/a&gt;.</source>
          <target state="translated">라이브러리가 게시 될 &lt;code&gt;repositories&lt;/code&gt; 는 &lt;a href=&quot;https://docs.gradle.org/current/userguide/publishing_maven.html#publishing_maven:repositories&quot;&gt;Maven Publish Plugin에&lt;/a&gt; 설명 된대로 &lt;code&gt;publishing { ... }&lt;/code&gt; DSL 의 리포지토리 블록을 통해 추가됩니다 . 리포지토리 .</target>
        </trans-unit>
        <trans-unit id="7134518e595d73dac15fa3b58f87beedd8efb821" translate="yes" xml:space="preserve">
          <source>The required parameter to &lt;code&gt;launchIn&lt;/code&gt; must specify a &lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/-coroutine-scope/index.html&quot;&gt;CoroutineScope&lt;/a&gt; in which the coroutine to collect the flow is launched. In the above example this scope comes from the &lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/run-blocking.html&quot;&gt;runBlocking&lt;/a&gt; coroutine builder, so while the flow is running, this &lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/run-blocking.html&quot;&gt;runBlocking&lt;/a&gt; scope waits for completion of its child coroutine and keeps the main function from returning and terminating this example.</source>
          <target state="translated">&lt;code&gt;launchIn&lt;/code&gt; 에 필요한 매개 변수 는 흐름을 수집하기위한 코 루틴이 시작되는 &lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/-coroutine-scope/index.html&quot;&gt;CoroutineScope&lt;/a&gt; 를 지정해야합니다 . 위의 예에서이 범위는 &lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/run-blocking.html&quot;&gt;runBlocking&lt;/a&gt; 코 루틴 빌더 에서 가져 오므로 흐름이 실행되는 동안이 &lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/run-blocking.html&quot;&gt;runBlocking&lt;/a&gt; 범위는 하위 코 루틴이 완료 될 때까지 대기하고 주 함수가이 예를 반환하고 종료하지 않도록합니다.</target>
        </trans-unit>
        <trans-unit id="1dc4ec6519f1080b744ec876f36d60cd34eec96a" translate="yes" xml:space="preserve">
          <source>The resources are processed by the equivalent tasks of the compilations instead of &lt;code&gt;*ProcessResources&lt;/code&gt; tasks.</source>
          <target state="translated">리소스는 &lt;code&gt;*ProcessResources&lt;/code&gt; 작업 대신 컴파일의 동등한 작업에 의해 처리됩니다 .</target>
        </trans-unit>
        <trans-unit id="8655c9517fe5cb69af37ea62bb4854e761f59a65" translate="yes" xml:space="preserve">
          <source>The resources of &lt;code&gt;commonMain&lt;/code&gt; are always processed and copied along with the resources of &lt;code&gt;jvmMain&lt;/code&gt;.</source>
          <target state="translated">의 자원 &lt;code&gt;commonMain&lt;/code&gt; 는 항상 처리의 자원과 함께 복사됩니다 &lt;code&gt;jvmMain&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="7ffbb195d8e128e52d788e2edb39be54dd761c55" translate="yes" xml:space="preserve">
          <source>The rest of the procedure works in exactly the same way as in Java.</source>
          <target state="translated">나머지 절차는 Java에서와 동일한 방식으로 작동합니다.</target>
        </trans-unit>
        <trans-unit id="81a9c69ffb22a2342532cf8251cc7d0415b9dbb2" translate="yes" xml:space="preserve">
          <source>The result is an object which represents a reference to the property (the &quot;Platonic ideal&quot; property, not a property on a particular instance). There's a type hierarchy for property objects: the base interface is &lt;code&gt;KProperty&lt;/code&gt;, which lets you get metadata about the property, such as its name and type. If you want to use the property object to read or modify the property's value in an object, you need to use a subinterface that specifies what kind of property it is. Immutable properties typically are &lt;code&gt;KProperty1&amp;lt;R, V&amp;gt;&lt;/code&gt;, and mutable properties typically are &lt;code&gt;KMutableProperty1&amp;lt;R, V&amp;gt;&lt;/code&gt;. Both of these are generic interfaces, with &lt;code&gt;R&lt;/code&gt; being the receiver type (the type on which the property is declared, in this case &lt;code&gt;Person&lt;/code&gt;) and &lt;code&gt;V&lt;/code&gt; being the type of the property's value.</source>
          <target state="translated">결과는 속성 (특정 인스턴스의 속성이 아닌 &quot;Platonic ideal&quot;속성)에 대한 참조를 나타내는 객체입니다. 속성 객체에 대한 유형 계층이 있습니다. 기본 인터페이스는 &lt;code&gt;KProperty&lt;/code&gt; 이며, 속성 및 속성과 같은 속성에 대한 메타 데이터를 가져올 수 있습니다. 속성 개체를 사용하여 개체의 속성 값을 읽거나 수정하려면 속성의 종류를 지정하는 하위 인터페이스를 사용해야합니다. 불변 속성은 일반적으로 &lt;code&gt;KProperty1&amp;lt;R, V&amp;gt;&lt;/code&gt; 이며, 불변 속성은 일반적으로 &lt;code&gt;KMutableProperty1&amp;lt;R, V&amp;gt;&lt;/code&gt; 입니다. 둘 다 일반 인터페이스이며 &lt;code&gt;R&lt;/code&gt; 은 수신자 유형 (속성이 선언 된 유형 (이 경우 &lt;code&gt;Person&lt;/code&gt; ) 임)) 및 &lt;code&gt;V&lt;/code&gt; 는 속성 값의 유형입니다.</target>
        </trans-unit>
        <trans-unit id="1a8aae926c8fa4cd902ab72788ba84f110e52d36" translate="yes" xml:space="preserve">
          <source>The result is computed as &lt;code&gt;r = this - (q * divisor)&lt;/code&gt; where &lt;code&gt;q&lt;/code&gt; is the quotient of division rounded to the nearest integer, &lt;code&gt;q = round(this / other)&lt;/code&gt;.</source>
          <target state="translated">결과는 &lt;code&gt;r = this - (q * divisor)&lt;/code&gt; 로 계산됩니다. 여기서 &lt;code&gt;q&lt;/code&gt; 는 가장 가까운 정수로 반올림 한 몫의 정수입니다. &lt;code&gt;q = round(this / other)&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="8346187656aa601c46c1b882160101b5d70d1783" translate="yes" xml:space="preserve">
          <source>The result is going to be:</source>
          <target state="translated">결과는 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="f757614cb2200a5a31db5b9a50190e9f1a783287" translate="yes" xml:space="preserve">
          <source>The result is the same, but this code uses only non-blocking &lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/delay.html&quot;&gt;delay&lt;/a&gt;. The main thread invoking &lt;code&gt;runBlocking&lt;/code&gt;&lt;em&gt;blocks&lt;/em&gt; until the coroutine inside &lt;code&gt;runBlocking&lt;/code&gt; completes.</source>
          <target state="translated">결과는 동일하지만이 코드는 비 블로킹 &lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/delay.html&quot;&gt;지연&lt;/a&gt; 만 사용합니다 . 호출 메인 스레드 &lt;code&gt;runBlocking&lt;/code&gt; &lt;em&gt;블록&lt;/em&gt; 내부의 코 루틴까지 &lt;code&gt;runBlocking&lt;/code&gt; 의 완료.</target>
        </trans-unit>
        <trans-unit id="80513416e38e21b1cd6b19983bdbc1cd0f8dbc1d" translate="yes" xml:space="preserve">
          <source>The result of &lt;code&gt;minus&lt;/code&gt; contains the elements of the original collection &lt;em&gt;except&lt;/em&gt; the elements from the second operand. If it's an element, &lt;code&gt;minus&lt;/code&gt; removes its &lt;em&gt;first&lt;/em&gt; occurrence; if it's a collection, &lt;em&gt;all&lt;/em&gt; occurrences of its elements are removed.</source>
          <target state="translated">&lt;code&gt;minus&lt;/code&gt; 결과 에는 두 번째 피연산자의 요소를 &lt;em&gt;제외하고&lt;/em&gt; 원래 컬렉션 의 요소가 포함됩니다. 요소 인 경우 &lt;code&gt;minus&lt;/code&gt; 하면 &lt;em&gt;첫 번째&lt;/em&gt; 항목이 제거됩니다 . 이 콜렉션의 경우, &lt;em&gt;모든&lt;/em&gt; 요소의 발생이 제거됩니다.</target>
        </trans-unit>
        <trans-unit id="9f4386a5cc0897ae566404e34449e10c9271784f" translate="yes" xml:space="preserve">
          <source>The result of &lt;code&gt;plus&lt;/code&gt; contains the elements from the original collection &lt;em&gt;and&lt;/em&gt; from the second operand.</source>
          <target state="translated">&lt;code&gt;plus&lt;/code&gt; 결과 에는 원래 컬렉션 &lt;em&gt;과&lt;/em&gt; 두 번째 피연산자 의 요소가 포함 됩니다.</target>
        </trans-unit>
        <trans-unit id="ff8add7f5e14fd024c26ef191ab483a18b621fed" translate="yes" xml:space="preserve">
          <source>The result of the future computation. Blocks execution until the future is ready. Second attempt to get will result in an error.</source>
          <target state="translated">미래 계산의 결과. 미래가 준비 될 때까지 실행을 차단합니다. 두 번째로 시도하면 오류가 발생합니다.</target>
        </trans-unit>
        <trans-unit id="b0a33939298c1573b79334a09954b9afb450d438" translate="yes" xml:space="preserve">
          <source>The result of this code is quite interesting, so we'll analyze it in mode detail:</source>
          <target state="translated">이 코드의 결과는 매우 흥미 롭기 때문에 모드를 자세히 분석 할 것입니다.</target>
        </trans-unit>
        <trans-unit id="4a889b01b76fad01cdae52fa6c7d371792173b90" translate="yes" xml:space="preserve">
          <source>The result of this code is quite interesting, so we'll analyze it in more detail:</source>
          <target state="translated">이 코드의 결과는 매우 흥미 롭기 때문에 더 자세히 분석 할 것입니다.</target>
        </trans-unit>
        <trans-unit id="a92982b6e3242403fa82d0db42fdb4534028b312" translate="yes" xml:space="preserve">
          <source>The result of this code is:</source>
          <target state="translated">이 코드의 결과는 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="ee6868c39ff4d2539255b06db5a2381813300a75" translate="yes" xml:space="preserve">
          <source>The result of this code:</source>
          <target state="translated">이 코드의 결과는 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="4844d20ae5c2024023a55c2b6b3214cb6ce72593" translate="yes" xml:space="preserve">
          <source>The resulting &lt;a href=&quot;http://docs.oracle.com/javase/8/docs/api/java/util/SortedMap.html&quot;&gt;SortedMap&lt;/a&gt; determines the equality and order of keys according to their natural sorting order.</source>
          <target state="translated">결과 &lt;a href=&quot;http://docs.oracle.com/javase/8/docs/api/java/util/SortedMap.html&quot;&gt;SortedMap&lt;/a&gt; 은 자연 정렬 순서에 따라 키의 동등성과 순서를 결정합니다.</target>
        </trans-unit>
        <trans-unit id="e25355ad3b686053cc1bc487b49186167f01eccb" translate="yes" xml:space="preserve">
          <source>The resulting &lt;a href=&quot;https://docs.oracle.com/javase/8/docs/api/java/util/SortedMap.html&quot;&gt;SortedMap&lt;/a&gt; determines the equality and order of keys according to the sorting order provided by the given &lt;a href=&quot;sorted-map-of#kotlin.collections%24sortedMapOf(java.util.Comparator((kotlin.collections.sortedMapOf.K)),%20kotlin.Array((kotlin.Pair((kotlin.collections.sortedMapOf.K,%20kotlin.collections.sortedMapOf.V)))))/comparator&quot;&gt;comparator&lt;/a&gt;.</source>
          <target state="translated">결과 &lt;a href=&quot;https://docs.oracle.com/javase/8/docs/api/java/util/SortedMap.html&quot;&gt;SortedMap&lt;/a&gt; 은 주어진 &lt;a href=&quot;sorted-map-of#kotlin.collections%24sortedMapOf(java.util.Comparator((kotlin.collections.sortedMapOf.K)),%20kotlin.Array((kotlin.Pair((kotlin.collections.sortedMapOf.K,%20kotlin.collections.sortedMapOf.V)))))/comparator&quot;&gt;비교기가&lt;/a&gt; 제공하는 정렬 순서에 따라 키의 동일성과 순서를 결정합니다 .</target>
        </trans-unit>
        <trans-unit id="634514a1676e5366bef12944cb3543ffee02d086" translate="yes" xml:space="preserve">
          <source>The resulting &lt;a href=&quot;https://docs.oracle.com/javase/8/docs/api/java/util/SortedMap.html&quot;&gt;SortedMap&lt;/a&gt; determines the equality and order of keys according to their natural sorting order.</source>
          <target state="translated">결과 &lt;a href=&quot;https://docs.oracle.com/javase/8/docs/api/java/util/SortedMap.html&quot;&gt;SortedMap&lt;/a&gt; 은 자연스러운 정렬 순서에 따라 키의 동일성과 순서를 결정합니다.</target>
        </trans-unit>
        <trans-unit id="8f890bef6e41ea49023cd4e145c9ac8e02777347" translate="yes" xml:space="preserve">
          <source>The resulting &lt;code&gt;Byte&lt;/code&gt; value has the same binary representation as this &lt;code&gt;UByte&lt;/code&gt; value.</source>
          <target state="translated">결과 &lt;code&gt;Byte&lt;/code&gt; 값은이 &lt;code&gt;UByte&lt;/code&gt; 값 과 동일한 이진 표현을 갖습니다 .</target>
        </trans-unit>
        <trans-unit id="bcc21fce83c8a76fb70c4188dec066655dc99e5f" translate="yes" xml:space="preserve">
          <source>The resulting &lt;code&gt;Byte&lt;/code&gt; value is equal to &lt;code&gt;this.toInt().toByte()&lt;/code&gt;.</source>
          <target state="translated">결과 &lt;code&gt;Byte&lt;/code&gt; 값은 &lt;code&gt;this.toInt().toByte()&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="500fd389152dfac3d3a3bdf516db69049b6112d1" translate="yes" xml:space="preserve">
          <source>The resulting &lt;code&gt;Byte&lt;/code&gt; value is represented by the least significant 8 bits of this &lt;code&gt;Int&lt;/code&gt; value.</source>
          <target state="translated">결과 &lt;code&gt;Byte&lt;/code&gt; 값은이 &lt;code&gt;Int&lt;/code&gt; 값 의 최하위 8 비트로 표시됩니다 .</target>
        </trans-unit>
        <trans-unit id="f5d708d0dd756dc92bd87189470b9a3b0f187bad" translate="yes" xml:space="preserve">
          <source>The resulting &lt;code&gt;Byte&lt;/code&gt; value is represented by the least significant 8 bits of this &lt;code&gt;Long&lt;/code&gt; value.</source>
          <target state="translated">결과 &lt;code&gt;Byte&lt;/code&gt; 값은이 &lt;code&gt;Long&lt;/code&gt; 값 의 최하위 8 비트로 표시됩니다 .</target>
        </trans-unit>
        <trans-unit id="f1c617d1ad1ce5e0250376516d3fc7acee8c76a7" translate="yes" xml:space="preserve">
          <source>The resulting &lt;code&gt;Byte&lt;/code&gt; value is represented by the least significant 8 bits of this &lt;code&gt;Short&lt;/code&gt; value.</source>
          <target state="translated">결과 &lt;code&gt;Byte&lt;/code&gt; 값은이 &lt;code&gt;Short&lt;/code&gt; 값 의 최하위 8 비트로 표시됩니다 .</target>
        </trans-unit>
        <trans-unit id="3c0aa6565c5cc7948d96b6aa45e671f5d970085c" translate="yes" xml:space="preserve">
          <source>The resulting &lt;code&gt;Byte&lt;/code&gt; value is represented by the least significant 8 bits of this &lt;code&gt;UInt&lt;/code&gt; value. Note that the resulting &lt;code&gt;Byte&lt;/code&gt; value may be negative.</source>
          <target state="translated">결과 &lt;code&gt;Byte&lt;/code&gt; 값은이 &lt;code&gt;UInt&lt;/code&gt; 값 의 최하위 8 비트로 표시됩니다 . 결과 &lt;code&gt;Byte&lt;/code&gt; 값은 음수 일 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="dd46bb58530a520cf29001659a58a32130329b50" translate="yes" xml:space="preserve">
          <source>The resulting &lt;code&gt;Byte&lt;/code&gt; value is represented by the least significant 8 bits of this &lt;code&gt;ULong&lt;/code&gt; value. Note that the resulting &lt;code&gt;Byte&lt;/code&gt; value may be negative.</source>
          <target state="translated">결과 &lt;code&gt;Byte&lt;/code&gt; 값은이 &lt;code&gt;ULong&lt;/code&gt; 값 의 최하위 8 비트로 표시됩니다 . 결과 &lt;code&gt;Byte&lt;/code&gt; 값은 음수 일 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="f0796ad9fb92ce12d111b3b2e535fa3a4138ff67" translate="yes" xml:space="preserve">
          <source>The resulting &lt;code&gt;Byte&lt;/code&gt; value is represented by the least significant 8 bits of this &lt;code&gt;UShort&lt;/code&gt; value. Note that the resulting &lt;code&gt;Byte&lt;/code&gt; value may be negative.</source>
          <target state="translated">결과 &lt;code&gt;Byte&lt;/code&gt; 값은이 &lt;code&gt;UShort&lt;/code&gt; 값 의 최하위 8 비트로 표시됩니다 . 결과 &lt;code&gt;Byte&lt;/code&gt; 값은 음수 일 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="1dcececb10dcdcffc92e35f3fc84338088990b5d" translate="yes" xml:space="preserve">
          <source>The resulting &lt;code&gt;Char&lt;/code&gt; code is equal to this value reinterpreted as an unsigned number, i.e. it has the same binary representation as this &lt;code&gt;Short&lt;/code&gt;.</source>
          <target state="translated">결과 &lt;code&gt;Char&lt;/code&gt; 코드는 부호없는 숫자로 재 해석 된이 값과 같습니다. 즉,이 &lt;code&gt;Short&lt;/code&gt; 와 동일한 이진 표현이 있습니다.</target>
        </trans-unit>
        <trans-unit id="7d3990133293f18f718906ea26c50d316e7978f0" translate="yes" xml:space="preserve">
          <source>The resulting &lt;code&gt;Char&lt;/code&gt; code is represented by the least significant 16 bits of this &lt;code&gt;Int&lt;/code&gt; value.</source>
          <target state="translated">결과 &lt;code&gt;Char&lt;/code&gt; 코드는이 &lt;code&gt;Int&lt;/code&gt; 값 의 최하위 16 비트로 표시됩니다 .</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
