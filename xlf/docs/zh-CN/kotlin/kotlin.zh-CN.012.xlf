<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="zh-CN" datatype="htmlbody" original="kotlin">
    <body>
      <group id="kotlin">
        <trans-unit id="c581a0f87570ffe2c12e7b5509932023b8de8c00" translate="yes" xml:space="preserve">
          <source>As of Kotlin 1.4.0, the Kotlin/JS IR compiler has &lt;em&gt;&lt;a href=&quot;evolution/components-stability&quot;&gt;Alpha&lt;/a&gt;&lt;/em&gt; stability level. You are welcome to use the IR compiler backend, but all of the functionality, language and tooling features described in this document are subject to change in future Kotlin versions.</source>
          <target state="translated">从Kotlin 1.4.0开始，Kotlin / JS IR编译器具有&lt;em&gt;&lt;a href=&quot;evolution/components-stability&quot;&gt;Alpha&lt;/a&gt;&lt;/em&gt;稳定性级别。欢迎您使用IR编译器后端，但是本文档中描述的所有功能，语言和工具功能都可能在将来的Kotlin版本中更改。</target>
        </trans-unit>
        <trans-unit id="c4d37d69d9ec83cd91daa76881b54b8260ce4574" translate="yes" xml:space="preserve">
          <source>As of bitwise operations, there're no special characters for them, but just named functions that can be called in infix form, for example:</source>
          <target state="translated">至于位元操作,并没有特殊的字符,只是命名的函数,例如可以用infix形式调用。</target>
        </trans-unit>
        <trans-unit id="5aad44396dc052a94b214ded61040a7ce5438b38" translate="yes" xml:space="preserve">
          <source>As opposed to Python, omitting &lt;code&gt;return&lt;/code&gt; at the end of a function does not implicitly return null; if you want to return null, you must do so with &lt;code&gt;return null&lt;/code&gt;. If a function never needs to return anything, the function should have the return type &lt;code&gt;Unit&lt;/code&gt; (or not declare a return type at all, in which case the return type defaults to &lt;code&gt;Unit&lt;/code&gt;). In such a function, you may either have no &lt;code&gt;return&lt;/code&gt; statement at all, or say just &lt;code&gt;return&lt;/code&gt;. &lt;code&gt;Unit&lt;/code&gt; is both a singleton object (which &lt;code&gt;None&lt;/code&gt; in Python also happens to be) and the type of that object, and it represents &quot;this function never returns any information&quot; (rather than &quot;this function sometimes returns information, but this time, it didn't&quot;, which is more or less the semantics of returning null).</source>
          <target state="translated">与Python相反，在函数末尾省略 &lt;code&gt;return&lt;/code&gt; 不会隐式返回null；如果要返回null，则必须使用 &lt;code&gt;return null&lt;/code&gt; 。如果一个函数永远不需要返回任何东西，则该函数应该具有返回类型 &lt;code&gt;Unit&lt;/code&gt; （或者根本不声明返回类型，在这种情况下，返回类型默认为 &lt;code&gt;Unit&lt;/code&gt; ）。在这样的函数中，您可能根本没有 &lt;code&gt;return&lt;/code&gt; 语句，或者只说 &lt;code&gt;return&lt;/code&gt; 。 &lt;code&gt;Unit&lt;/code&gt; 都是单例对象（ &lt;code&gt;None&lt;/code&gt; 在Python中也恰好是该对象的类型），它表示&amp;ldquo;此函数从不返回任何信息&amp;rdquo;（而不是&amp;ldquo;此函数有时返回信息，但这次却不返回信息&amp;rdquo;），或多或少返回null的语义）。</target>
        </trans-unit>
        <trans-unit id="3acadd09fb55e1c866575baf09f2eec7cd88fe6e" translate="yes" xml:space="preserve">
          <source>As said above, Kotlin provides the ability &lt;a href=&quot;#invoking-a-function-type-instance&quot;&gt;to call an instance&lt;/a&gt; of a function type with receiver providing the &lt;em&gt;receiver object&lt;/em&gt;.</source>
          <target state="translated">如上所述，Kotlin提供了使用提供&lt;em&gt;接收方对象&lt;/em&gt;的&lt;em&gt;接收方&lt;/em&gt;&lt;a href=&quot;#invoking-a-function-type-instance&quot;&gt;来调用&lt;/a&gt;函数类型实例的功能。&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="af9463b7016217fafafd45036aa3aaf5a76afa2f" translate="yes" xml:space="preserve">
          <source>As said above, type erasure makes checking actual type arguments of a generic type instance impossible at runtime, and generic types in the code might be connected to each other not closely enough for the compiler to ensure type safety.</source>
          <target state="translated">如上所述,类型擦除使得在运行时无法检查通用类型实例的实际类型参数,而且代码中的通用类型之间的连接可能不够紧密,编译器无法保证类型安全。</target>
        </trans-unit>
        <trans-unit id="ef7d7e86bc8fa5fde32371e6a18f2f72af578c6d" translate="yes" xml:space="preserve">
          <source>As shown in the examples above, the ranges of integral types, such as &lt;code&gt;Int&lt;/code&gt;, &lt;code&gt;Long&lt;/code&gt;, and &lt;code&gt;Char&lt;/code&gt;, can be treated as &lt;a href=&quot;https://en.wikipedia.org/wiki/Arithmetic_progression&quot;&gt;arithmetic progressions&lt;/a&gt; of them. In Kotlin, these progressions are defined by special types: &lt;a href=&quot;../../api/latest/jvm/stdlib/kotlin.ranges/-int-progression/index&quot;&gt;&lt;code&gt;IntProgression&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../../api/latest/jvm/stdlib/kotlin.ranges/-long-progression/index&quot;&gt;&lt;code&gt;LongProgression&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;../../api/latest/jvm/stdlib/kotlin.ranges/-char-progression/index&quot;&gt;&lt;code&gt;CharProgression&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">如上面的示例所示，整数类型的范围（例如 &lt;code&gt;Int&lt;/code&gt; ， &lt;code&gt;Long&lt;/code&gt; 和 &lt;code&gt;Char&lt;/code&gt; ）可以视为它们的&lt;a href=&quot;https://en.wikipedia.org/wiki/Arithmetic_progression&quot;&gt;算术级数&lt;/a&gt;。在Kotlin中，这些进度由特殊类型定义：&lt;a href=&quot;../../api/latest/jvm/stdlib/kotlin.ranges/-int-progression/index&quot;&gt; &lt;code&gt;IntProgression&lt;/code&gt; &lt;/a&gt;，&lt;a href=&quot;../../api/latest/jvm/stdlib/kotlin.ranges/-long-progression/index&quot;&gt; &lt;code&gt;LongProgression&lt;/code&gt; &lt;/a&gt;和&lt;a href=&quot;../../api/latest/jvm/stdlib/kotlin.ranges/-char-progression/index&quot;&gt; &lt;code&gt;CharProgression&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="e702b315630e1178fe3212af7f23fa932d025965" translate="yes" xml:space="preserve">
          <source>As shown in this example, maven dependency also can be exported. But due to current limitations of Gradle metadata such a dependency should be either a platform one (e.g. &lt;code&gt;kotlinx-coroutines-core-native_debug_macos_x64&lt;/code&gt; instead of &lt;code&gt;kotlinx-coroutines-core-native&lt;/code&gt;) or be exported transitively (see below).</source>
          <target state="translated">如本例所示，还可以导出maven依赖项。但是由于Gradle元数据的当前限制，这种依赖性应该是平台依赖性（例如 &lt;code&gt;kotlinx-coroutines-core-native_debug_macos_x64&lt;/code&gt; 而不是 &lt;code&gt;kotlinx-coroutines-core-native&lt;/code&gt; ）或可导出地导出（请参见下文）。</target>
        </trans-unit>
        <trans-unit id="323a54219c5ee6f0cab7f91bcab32dc5c192e7e7" translate="yes" xml:space="preserve">
          <source>As soon as main invokes &lt;code&gt;job.cancel&lt;/code&gt;, we don't see any output from the other coroutine because it was cancelled. There is also a &lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/-job/index.html&quot;&gt;Job&lt;/a&gt; extension function &lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/cancel-and-join.html&quot;&gt;cancelAndJoin&lt;/a&gt; that combines &lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/-job/cancel.html&quot;&gt;cancel&lt;/a&gt; and &lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/-job/join.html&quot;&gt;join&lt;/a&gt; invocations.</source>
          <target state="translated">一旦main调用 &lt;code&gt;job.cancel&lt;/code&gt; ，我们就不会看到其他协程的任何输出，因为它已被取消。还有一个&lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/-job/index.html&quot;&gt;Job&lt;/a&gt;扩展功能&lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/cancel-and-join.html&quot;&gt;cancelAndJoin&lt;/a&gt;，它组合了&lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/-job/cancel.html&quot;&gt;cancel&lt;/a&gt;和&lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/-job/join.html&quot;&gt;join&lt;/a&gt;调用。</target>
        </trans-unit>
        <trans-unit id="1ec1557f8eee71518f9ad217e76da59d2f3a92f5" translate="yes" xml:space="preserve">
          <source>As the &lt;a href=&quot;collections-overview&quot;&gt;definition of list&lt;/a&gt; says, a list is an ordered collection. Hence, every element of a list has its position that you can use for referring. In addition to functions described on this page, lists offer a wider set of ways to retrieve and search for elements by indices. For more details, see &lt;a href=&quot;list-operations&quot;&gt;List Specific Operations&lt;/a&gt;.</source>
          <target state="translated">正如&lt;a href=&quot;collections-overview&quot;&gt;list&lt;/a&gt;的定义所言，列表是有序集合。因此，列表中的每个元素都有其位置可供您参考。除了此页面上描述的功能外，列表还提供了一组更广泛的方法来按索引检索和搜索元素。有关更多详细信息，请参见&lt;a href=&quot;list-operations&quot;&gt;列出特定操作&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="27ad261bc9c7d6cb765d0ea1438b3c8e987a6979" translate="yes" xml:space="preserve">
          <source>As the &lt;code&gt;commonTest&lt;/code&gt;&lt;a href=&quot;#default-project-layout&quot;&gt;default source set&lt;/a&gt; is added to all test compilations, tests and test tools that are needed on all target platforms may be placed there.</source>
          <target state="translated">在将 &lt;code&gt;commonTest&lt;/code&gt; &lt;a href=&quot;#default-project-layout&quot;&gt;默认源集&lt;/a&gt;添加到所有测试编译后，可能会将所有目标平台上所需的测试和测试工具放在此处。</target>
        </trans-unit>
        <trans-unit id="5edd040d6f4c8ad9b18d73f7926255fa6764d0b8" translate="yes" xml:space="preserve">
          <source>As the command line parameter, use &lt;code&gt;-Pkotlin.incremental&lt;/code&gt; or &lt;code&gt;-Pkotlin.incremental.js&lt;/code&gt; with the boolean value reflecting the usage of incremental compilation.</source>
          <target state="translated">作为命令行参数，使用 &lt;code&gt;-Pkotlin.incremental&lt;/code&gt; 或 &lt;code&gt;-Pkotlin.incremental.js&lt;/code&gt; ，其布尔值反映增量编译的用法。</target>
        </trans-unit>
        <trans-unit id="5a2f37014fdc09535abad4023c6b450a2b899b17" translate="yes" xml:space="preserve">
          <source>As the platforms are different, targets are built in different ways as well and have various platform-specific settings. The Gradle plugin bundles a number of presets for the supported platforms.</source>
          <target state="translated">由于平台不同,target的构建方式也不同,有各种针对平台的设置。Gradle插件为支持的平台捆绑了许多预设。</target>
        </trans-unit>
        <trans-unit id="c94dcb3870be9d6216468092f76cf2e236049a84" translate="yes" xml:space="preserve">
          <source>As the third parameter, specify the path to &lt;code&gt;Podspec&lt;/code&gt; of the local Pod using &lt;code&gt;project.file(..)&lt;/code&gt;.</source>
          <target state="translated">作为第三个参数，使用 &lt;code&gt;project.file(..)&lt;/code&gt; 指定本地Pod的 &lt;code&gt;Podspec&lt;/code&gt; 的路径。</target>
        </trans-unit>
        <trans-unit id="43e93e982fbf27b175ee52afaca49428156c5004" translate="yes" xml:space="preserve">
          <source>As this is key to understanding how Kotlin is moving forward, let's expand on these principles.</source>
          <target state="translated">因为这是理解Kotlin如何前进的关键,让我们来扩展一下这些原则。</target>
        </trans-unit>
        <trans-unit id="d8a6951b471083df17ec063563955cea5aec3f48" translate="yes" xml:space="preserve">
          <source>As we can see, we've eliminated the explicit variable declarations in the Kotlin version, but everything else is pretty much verbatim to the C version. All the calls we'd expect in the &lt;code&gt;libcurl&lt;/code&gt; library are available in their Kotlin equivalent.</source>
          <target state="translated">正如我们所看到的，我们已经消除了Kotlin版本中的显式变量声明，但是其他所有内容几乎都是C版本的。我们期望在 &lt;code&gt;libcurl&lt;/code&gt; 库中进行的所有调用都可以使用等效的Kotlin。</target>
        </trans-unit>
        <trans-unit id="9beef94ae067e63cbd9e59d894b27cdc816aa2f7" translate="yes" xml:space="preserve">
          <source>As we have studied before, cancellation is a bidirectional relationship propagating through the whole coroutines hierarchy. But what if unidirectional cancellation is required?</source>
          <target state="translated">正如我们之前所研究的那样,取消是一种双向关系,在整个coroutines层次结构中传播。但是如果需要单向取消呢?</target>
        </trans-unit>
        <trans-unit id="1713b2a9d43cfa6a9db5c2c80eb267dd2e28729e" translate="yes" xml:space="preserve">
          <source>As we have studied before, cancellation is a bidirectional relationship propagating through the whole hierarchy of coroutines. Let us take a look at the case when unidirectional cancellation is required.</source>
          <target state="translated">正如我们之前所研究的那样,取消是一种双向关系,在整个coroutine的层次结构中传播。让我们来看看需要单向取消的情况。</target>
        </trans-unit>
        <trans-unit id="b64b2981e63e1536aa67f1172fa99896be6284dc" translate="yes" xml:space="preserve">
          <source>As we mentioned above, Kotlin does not have checked exceptions. So, normally, the Java signatures of Kotlin functions do not declare exceptions thrown. Thus if we have a function in Kotlin like this:</source>
          <target state="translated">正如我们上面提到的,Kotlin没有检查异常。所以,通常情况下,Kotlin函数的Java签名不会声明抛出的异常。因此,如果我们在Kotlin中拥有一个这样的函数。</target>
        </trans-unit>
        <trans-unit id="08396bfca73f3c35212459154b28f8878108768a" translate="yes" xml:space="preserve">
          <source>As we mentioned before, we stick to making things explicit in Kotlin. And unlike Java, Kotlin requires explicit modifiers for overridable members (we call them &lt;em&gt;open&lt;/em&gt;) and for overrides:</source>
          <target state="translated">如前所述，我们坚持在Kotlin中使事情变得明确。与Java不同，Kotlin需要显式修饰符来覆盖可覆盖的成员（我们称它们为&lt;em&gt;open&lt;/em&gt;）和覆盖：</target>
        </trans-unit>
        <trans-unit id="df863543f29ddc3af4cf8577dbf69c3145ac20fd" translate="yes" xml:space="preserve">
          <source>As we mentioned before, we stick to making things explicit in Kotlin. So, Kotlin requires explicit modifiers for overridable members (we call them &lt;em&gt;open&lt;/em&gt;) and for overrides:</source>
          <target state="translated">正如我们之前提到的，我们坚持在Kotlin中使事情变得明确。因此，Kotlin要求对可覆盖成员（我们称它们为&lt;em&gt;open&lt;/em&gt;）和覆盖项进行显式修饰符：</target>
        </trans-unit>
        <trans-unit id="0253e410893c125101fd61e2b655187a42457a6c" translate="yes" xml:space="preserve">
          <source>As we said above, the &lt;code&gt;[]&lt;/code&gt; operation stands for calls to member functions &lt;code&gt;get()&lt;/code&gt; and &lt;code&gt;set()&lt;/code&gt;.</source>
          <target state="translated">如上所述， &lt;code&gt;[]&lt;/code&gt; 操作代表对成员函数 &lt;code&gt;get()&lt;/code&gt; 和 &lt;code&gt;set()&lt;/code&gt; 的调用。</target>
        </trans-unit>
        <trans-unit id="f6bc0d71d02feb935761c2fec09157ddb18fef0a" translate="yes" xml:space="preserve">
          <source>As with all-open, add the plugin JAR file to the compiler plugin classpath and specify annotations or presets:</source>
          <target state="translated">与all-open一样,将插件JAR文件添加到编译器插件classpath中,并指定注释或预设。</target>
        </trans-unit>
        <trans-unit id="e700fa017eccf7f4f99be1f93fd46c19e29e9465" translate="yes" xml:space="preserve">
          <source>As with all-open, add the plugin to the buildscript dependencies:</source>
          <target state="translated">和all-open一样,将插件添加到buildcript依赖中。</target>
        </trans-unit>
        <trans-unit id="0ddb289577a5748be89057d32163008e7c2b82ca" translate="yes" xml:space="preserve">
          <source>As with other function literals, if the function takes one parameter (other than the receiver object that it is invoked on), the single parameter is implicitly called &lt;code&gt;it&lt;/code&gt;, unless you declare another name. If it takes more than one parameter, you must declare their names.</source>
          <target state="translated">与其他函数文字一样，如果函数采用一个参数（调用该参数的接收方对象除外），则除非您声明其他名称，否则单个参数将隐式调用 &lt;code&gt;it&lt;/code&gt; 。如果使用多个参数，则必须声明其名称。</target>
        </trans-unit>
        <trans-unit id="b55d293aa5b5fcb60313adc4451f1ab3f4ccc0ab" translate="yes" xml:space="preserve">
          <source>As with the &lt;em&gt;kotlin-spring&lt;/em&gt; plugin wrapped on top of &lt;em&gt;all-open&lt;/em&gt;, &lt;em&gt;kotlin-jpa&lt;/em&gt; is wrapped on top of &lt;em&gt;no-arg&lt;/em&gt;. The plugin specifies &lt;a href=&quot;http://docs.oracle.com/javaee/7/api/javax/persistence/Entity.html&quot;&gt;&lt;code&gt;@Entity&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;http://docs.oracle.com/javaee/7/api/javax/persistence/Embeddable.html&quot;&gt;&lt;code&gt;@Embeddable&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;https://docs.oracle.com/javaee/7/api/javax/persistence/MappedSuperclass.html&quot;&gt;&lt;code&gt;@MappedSuperclass&lt;/code&gt;&lt;/a&gt;&lt;em&gt;no-arg&lt;/em&gt; annotations automatically.</source>
          <target state="translated">与将&lt;em&gt;kotlin-spring&lt;/em&gt;插件包装在&lt;em&gt;全开&lt;/em&gt;顶部一样，将&lt;em&gt;kotlin-jpa&lt;/em&gt;包装在&lt;em&gt;no-arg&lt;/em&gt;顶部。该插件指定&lt;a href=&quot;http://docs.oracle.com/javaee/7/api/javax/persistence/Entity.html&quot;&gt; &lt;code&gt;@Entity&lt;/code&gt; &lt;/a&gt;，&lt;a href=&quot;http://docs.oracle.com/javaee/7/api/javax/persistence/Embeddable.html&quot;&gt; &lt;code&gt;@Embeddable&lt;/code&gt; &lt;/a&gt;和&lt;a href=&quot;https://docs.oracle.com/javaee/7/api/javax/persistence/MappedSuperclass.html&quot;&gt; &lt;code&gt;@MappedSuperclass&lt;/code&gt; &lt;/a&gt;&lt;em&gt;无参数的&lt;/em&gt;自动标注。</target>
        </trans-unit>
        <trans-unit id="d8ffa4f1042498452019ff7aaab00b582389d588" translate="yes" xml:space="preserve">
          <source>As with the &lt;em&gt;kotlin-spring&lt;/em&gt; plugin wrapped on top of &lt;em&gt;all-open&lt;/em&gt;, &lt;em&gt;kotlin-jpa&lt;/em&gt; is wrapped on top of &lt;em&gt;no-arg&lt;/em&gt;. The plugin specifies &lt;a href=&quot;https://docs.oracle.com/javaee/7/api/javax/persistence/Entity.html&quot;&gt;&lt;code&gt;@Entity&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://docs.oracle.com/javaee/7/api/javax/persistence/Embeddable.html&quot;&gt;&lt;code&gt;@Embeddable&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;https://docs.oracle.com/javaee/7/api/javax/persistence/MappedSuperclass.html&quot;&gt;&lt;code&gt;@MappedSuperclass&lt;/code&gt;&lt;/a&gt;&lt;em&gt;no-arg&lt;/em&gt; annotations automatically.</source>
          <target state="translated">与将&lt;em&gt;kotlin-spring&lt;/em&gt;插件包装在&lt;em&gt;全开&lt;/em&gt;顶部一样，将&lt;em&gt;kotlin-jpa&lt;/em&gt;包装在&lt;em&gt;no-arg&lt;/em&gt;顶部。该插件指定&lt;a href=&quot;https://docs.oracle.com/javaee/7/api/javax/persistence/Entity.html&quot;&gt; &lt;code&gt;@Entity&lt;/code&gt; &lt;/a&gt;，&lt;a href=&quot;https://docs.oracle.com/javaee/7/api/javax/persistence/Embeddable.html&quot;&gt; &lt;code&gt;@Embeddable&lt;/code&gt; &lt;/a&gt;和&lt;a href=&quot;https://docs.oracle.com/javaee/7/api/javax/persistence/MappedSuperclass.html&quot;&gt; &lt;code&gt;@MappedSuperclass&lt;/code&gt; &lt;/a&gt;&lt;em&gt;无参数的&lt;/em&gt;自动标注。</target>
        </trans-unit>
        <trans-unit id="b3a2c907f41578ca82056398084f5bd35172b8f8" translate="yes" xml:space="preserve">
          <source>As with the &lt;em&gt;kotlin-spring&lt;/em&gt; plugin, &lt;em&gt;kotlin-jpa&lt;/em&gt; is a wrapped on top of &lt;em&gt;no-arg&lt;/em&gt;. The plugin specifies &lt;a href=&quot;http://docs.oracle.com/javaee/7/api/javax/persistence/Entity.html&quot;&gt;&lt;code&gt;@Entity&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;http://docs.oracle.com/javaee/7/api/javax/persistence/Embeddable.html&quot;&gt;&lt;code&gt;@Embeddable&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;https://docs.oracle.com/javaee/7/api/javax/persistence/MappedSuperclass.html&quot;&gt;&lt;code&gt;@MappedSuperclass&lt;/code&gt;&lt;/a&gt;&lt;em&gt;no-arg&lt;/em&gt; annotations automatically.</source>
          <target state="translated">与&lt;em&gt;kotlin-spring&lt;/em&gt;插件一样，&lt;em&gt;kotlin-jpa&lt;/em&gt;被包装在&lt;em&gt;no-arg&lt;/em&gt;之上。该插件指定&lt;a href=&quot;http://docs.oracle.com/javaee/7/api/javax/persistence/Entity.html&quot;&gt; &lt;code&gt;@Entity&lt;/code&gt; &lt;/a&gt;，&lt;a href=&quot;http://docs.oracle.com/javaee/7/api/javax/persistence/Embeddable.html&quot;&gt; &lt;code&gt;@Embeddable&lt;/code&gt; &lt;/a&gt;和&lt;a href=&quot;https://docs.oracle.com/javaee/7/api/javax/persistence/MappedSuperclass.html&quot;&gt; &lt;code&gt;@MappedSuperclass&lt;/code&gt; &lt;/a&gt;&lt;em&gt;无参数的&lt;/em&gt;自动标注。</target>
        </trans-unit>
        <trans-unit id="68d1e9ff2648dcea56d6c6f57453efa33c7feb3b" translate="yes" xml:space="preserve">
          <source>As you can see in this example, the annotated function appears to be a part of the &lt;code&gt;@ExperimentalDateTime&lt;/code&gt; experimental API. So, the described way of acceptance propagates the experimental status to the code that uses an experimental API; its clients will be required to accept it as well. To use multiple experimental APIs, annotate the declaration with all their markers.</source>
          <target state="translated">如本例所示，带注释的函数似乎是 &lt;code&gt;@ExperimentalDateTime&lt;/code&gt; 实验性API 的一部分。因此，所描述的接受方式将实验状态传播到使用实验API的代码；其客户也将被接受。要使用多个实验性API，请在声明中加上所有标记。</target>
        </trans-unit>
        <trans-unit id="de975c29a6a909138faf44d3f2cde3bfe62948e4" translate="yes" xml:space="preserve">
          <source>As you can see in this example, the annotated function appears to be a part of the &lt;code&gt;@MyDateTime&lt;/code&gt; API. So, such an opt-in propagates the opt-in requirement to the client code; its clients will see the same warning message and be required to consent as well. To use multiple APIs that require opt-in, mark the declaration with all their opt-in requirement annotations.</source>
          <target state="translated">如本例所示，带注释的函数似乎是 &lt;code&gt;@MyDateTime&lt;/code&gt; API的一部分。因此，这种选择加入会将选择加入的要求传播到客户端代码。其客户将看到相同的警告消息，并且也必须同意。要使用需要选择加入的多个API，请在声明中标记其所有选择加入要求注释。</target>
        </trans-unit>
        <trans-unit id="96ab440f7f6c78c46787713216e58c877b6cb628" translate="yes" xml:space="preserve">
          <source>As you can see, it prints:</source>
          <target state="translated">如你所见,它的打印。</target>
        </trans-unit>
        <trans-unit id="cc87d19acb232a1d83499d511bd23cda3c0080c6" translate="yes" xml:space="preserve">
          <source>As you can see, now this loop is cancelled. &lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/is-active.html&quot;&gt;isActive&lt;/a&gt; is an extension property available inside the coroutine via the &lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/-coroutine-scope/index.html&quot;&gt;CoroutineScope&lt;/a&gt; object.</source>
          <target state="translated">如您所见，现在此循环已取消。&lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/is-active.html&quot;&gt;isActive&lt;/a&gt;是通过&lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/-coroutine-scope/index.html&quot;&gt;CoroutineScope&lt;/a&gt;对象在协程内部可用的扩展属性。</target>
        </trans-unit>
        <trans-unit id="7352fb651c3772692a032dbe42546dd641670912" translate="yes" xml:space="preserve">
          <source>As you can see, only the first two coroutines had printed a message and the others were cancelled by a single invocation of &lt;code&gt;job.cancel()&lt;/code&gt; in &lt;code&gt;Activity.destroy()&lt;/code&gt;.</source>
          <target state="translated">正如你所看到的，只有前两个协程已打印的消息和其他由单一调用取消 &lt;code&gt;job.cancel()&lt;/code&gt; 在 &lt;code&gt;Activity.destroy()&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="c55419c015865a616e5464887b91f2221ed1c04e" translate="yes" xml:space="preserve">
          <source>As you can see, only the first two coroutines print a message and the others are cancelled by a single invocation of &lt;code&gt;job.cancel()&lt;/code&gt; in &lt;code&gt;Activity.destroy()&lt;/code&gt;.</source>
          <target state="translated">如您所见，只有前两个协程打印一条消息，而其他两个通过在 &lt;code&gt;Activity.destroy()&lt;/code&gt; 中的一次 &lt;code&gt;job.cancel()&lt;/code&gt; 调用而被取消。</target>
        </trans-unit>
        <trans-unit id="7ec300122f188ea460c04062665423ae0b013340" translate="yes" xml:space="preserve">
          <source>As you may expect, it prints:</source>
          <target state="translated">如你所料,它的打印。</target>
        </trans-unit>
        <trans-unit id="f7b66783a2aeaef0abd85ccec69670f515a360a3" translate="yes" xml:space="preserve">
          <source>As you see, Kotlin aims to create very concise and readable JavaScript allowing us to interact with it as needed. One question of course is why go to all this trouble to as opposed to just use &lt;code&gt;console.log()&lt;/code&gt;. Obviously this is a very simple example that shows the basics of how it works and we've focused on analysing the output. As application complexity grows, the benefits of using Kotlin and static typing start to become more apparent.</source>
          <target state="translated">如您所见，Kotlin旨在创建非常简洁易读的JavaScript，使我们能够根据需要进行交互。当然，一个问题是为什么要麻烦所有这些而不是只使用 &lt;code&gt;console.log()&lt;/code&gt; 。显然，这是一个非常简单的示例，它显示了其工作原理，并且我们专注于分析输出。随着应用程序复杂性的增长，使用Kotlin和静态类型化的好处开始变得越来越明显。</target>
        </trans-unit>
        <trans-unit id="421389931a4f34efe05c30826b90917d2975e478" translate="yes" xml:space="preserve">
          <source>As you see, in some aspects lists are very similar to arrays. However, there is one important difference: an array's size is defined upon initialization and is never changed; in turn, a list doesn't have a predefined size; a list's size can be changed as a result of write operations: adding, updating, or removing elements.</source>
          <target state="translated">正如你所看到的,在某些方面,列表与数组非常相似,但有一个重要的区别:数组的大小是在初始化时定义的,永远不会改变;反过来,列表没有一个预定义的大小;列表的大小可以由于写而改变。但是,有一个重要的区别:数组的大小是在初始化时定义的,永远不会改变;反过来,列表没有一个预定义的大小;列表的大小可以因为写操作而改变:添加、更新或删除元素。</target>
        </trans-unit>
        <trans-unit id="534a9766ff6c74faf4c9a1438ecab93f1ee3f946" translate="yes" xml:space="preserve">
          <source>Aside from the new API, we've made some optimizations that reduce the resulting bytecode size. These optimizations are described in &lt;a href=&quot;https://blog.jetbrains.com/kotlin/2019/12/what-to-expect-in-kotlin-1-4-and-beyond/#delegated-properties&quot;&gt;this blog post&lt;/a&gt;.</source>
          <target state="translated">除了新的API外，我们还进行了一些优化，以减少最终的字节码大小。这些优化在&lt;a href=&quot;https://blog.jetbrains.com/kotlin/2019/12/what-to-expect-in-kotlin-1-4-and-beyond/#delegated-properties&quot;&gt;本博客文章中&lt;/a&gt;进行了介绍。</target>
        </trans-unit>
        <trans-unit id="e3292c12a856a02722a46d87471ff4e6faefa104" translate="yes" xml:space="preserve">
          <source>AssertionError</source>
          <target state="translated">AssertionError</target>
        </trans-unit>
        <trans-unit id="afab27ed2b3bea84dc85860592e64030242b513a" translate="yes" xml:space="preserve">
          <source>Assign the result of &lt;code&gt;a.inc()&lt;/code&gt; to &lt;code&gt;a&lt;/code&gt;;</source>
          <target state="translated">分配的结果 &lt;code&gt;a.inc()&lt;/code&gt; 到 &lt;code&gt;a&lt;/code&gt; ;</target>
        </trans-unit>
        <trans-unit id="34d89e7d6622db7d49c6f03cc2b51debfd79dc46" translate="yes" xml:space="preserve">
          <source>Assign the result of &lt;code&gt;a0.inc()&lt;/code&gt; to &lt;code&gt;a&lt;/code&gt;;</source>
          <target state="translated">将 &lt;code&gt;a0.inc()&lt;/code&gt; 的结果分配给 &lt;code&gt;a&lt;/code&gt; ；</target>
        </trans-unit>
        <trans-unit id="bfc2ce14690efbfc3e5f03f1bd9d81c65e09d6d4" translate="yes" xml:space="preserve">
          <source>AssignedNodesOptions</source>
          <target state="translated">AssignedNodesOptions</target>
        </trans-unit>
        <trans-unit id="c3dff150477195e5af84d55a29e3417947cf6401" translate="yes" xml:space="preserve">
          <source>AssociatedObjectKey</source>
          <target state="translated">AssociatedObjectKey</target>
        </trans-unit>
        <trans-unit id="bc4637d011ec1e897c4f35d1c0564ca5d6270854" translate="yes" xml:space="preserve">
          <source>Associates the specified &lt;a href=&quot;../-mutable-map/put#kotlin.collections.MutableMap%24put%28kotlin.collections.MutableMap.K%2C+kotlin.collections.MutableMap.V%29%2Fvalue&quot;&gt;value&lt;/a&gt; with the specified &lt;a href=&quot;../-mutable-map/put#kotlin.collections.MutableMap%24put%28kotlin.collections.MutableMap.K%2C+kotlin.collections.MutableMap.V%29%2Fkey&quot;&gt;key&lt;/a&gt; in the map.</source>
          <target state="translated">将指定的&lt;a href=&quot;../-mutable-map/put#kotlin.collections.MutableMap%24put%28kotlin.collections.MutableMap.K%2C+kotlin.collections.MutableMap.V%29%2Fvalue&quot;&gt;值&lt;/a&gt;与映射中的指定&lt;a href=&quot;../-mutable-map/put#kotlin.collections.MutableMap%24put%28kotlin.collections.MutableMap.K%2C+kotlin.collections.MutableMap.V%29%2Fkey&quot;&gt;键相关&lt;/a&gt;联。</target>
        </trans-unit>
        <trans-unit id="039c6decd3896a4156afbd4bf6a0ebad01f7c4c8" translate="yes" xml:space="preserve">
          <source>Associates the specified &lt;a href=&quot;../-mutable-map/put#kotlin.collections.MutableMap%24put(kotlin.collections.MutableMap.K,%20kotlin.collections.MutableMap.V)/value&quot;&gt;value&lt;/a&gt; with the specified &lt;a href=&quot;../-mutable-map/put#kotlin.collections.MutableMap%24put(kotlin.collections.MutableMap.K,%20kotlin.collections.MutableMap.V)/key&quot;&gt;key&lt;/a&gt; in the map.</source>
          <target state="translated">将指定的&lt;a href=&quot;../-mutable-map/put#kotlin.collections.MutableMap%24put(kotlin.collections.MutableMap.K,%20kotlin.collections.MutableMap.V)/value&quot;&gt;值&lt;/a&gt;与映射中的指定&lt;a href=&quot;../-mutable-map/put#kotlin.collections.MutableMap%24put(kotlin.collections.MutableMap.K,%20kotlin.collections.MutableMap.V)/key&quot;&gt;键相关&lt;/a&gt;联。</target>
        </trans-unit>
        <trans-unit id="abf408e5ce9df9297b5724dfc0aa196f0ea492ef" translate="yes" xml:space="preserve">
          <source>Associates the specified &lt;a href=&quot;put#kotlin.collections.AbstractMutableMap%24put%28kotlin.collections.AbstractMutableMap.K%2C+kotlin.collections.AbstractMutableMap.V%29%2Fvalue&quot;&gt;value&lt;/a&gt; with the specified &lt;a href=&quot;put#kotlin.collections.AbstractMutableMap%24put%28kotlin.collections.AbstractMutableMap.K%2C+kotlin.collections.AbstractMutableMap.V%29%2Fkey&quot;&gt;key&lt;/a&gt; in the map.</source>
          <target state="translated">将指定的&lt;a href=&quot;put#kotlin.collections.AbstractMutableMap%24put%28kotlin.collections.AbstractMutableMap.K%2C+kotlin.collections.AbstractMutableMap.V%29%2Fvalue&quot;&gt;值&lt;/a&gt;与映射中的指定&lt;a href=&quot;put#kotlin.collections.AbstractMutableMap%24put%28kotlin.collections.AbstractMutableMap.K%2C+kotlin.collections.AbstractMutableMap.V%29%2Fkey&quot;&gt;键相关&lt;/a&gt;联。</target>
        </trans-unit>
        <trans-unit id="71f97c4356aa08d827089563a0021dca22efc19a" translate="yes" xml:space="preserve">
          <source>Associates the specified &lt;a href=&quot;put#kotlin.collections.AbstractMutableMap%24put(kotlin.collections.AbstractMutableMap.K,%20kotlin.collections.AbstractMutableMap.V)/value&quot;&gt;value&lt;/a&gt; with the specified &lt;a href=&quot;put#kotlin.collections.AbstractMutableMap%24put(kotlin.collections.AbstractMutableMap.K,%20kotlin.collections.AbstractMutableMap.V)/key&quot;&gt;key&lt;/a&gt; in the map.</source>
          <target state="translated">将指定的&lt;a href=&quot;put#kotlin.collections.AbstractMutableMap%24put(kotlin.collections.AbstractMutableMap.K,%20kotlin.collections.AbstractMutableMap.V)/value&quot;&gt;值&lt;/a&gt;与映射中的指定&lt;a href=&quot;put#kotlin.collections.AbstractMutableMap%24put(kotlin.collections.AbstractMutableMap.K,%20kotlin.collections.AbstractMutableMap.V)/key&quot;&gt;键相关&lt;/a&gt;联。</target>
        </trans-unit>
        <trans-unit id="4f6905f1353a5a56ec02146382ec893696f10bfb" translate="yes" xml:space="preserve">
          <source>Associates the specified &lt;a href=&quot;put#kotlin.collections.MutableMap%24put%28kotlin.collections.MutableMap.K%2C+kotlin.collections.MutableMap.V%29%2Fvalue&quot;&gt;value&lt;/a&gt; with the specified &lt;a href=&quot;put#kotlin.collections.MutableMap%24put%28kotlin.collections.MutableMap.K%2C+kotlin.collections.MutableMap.V%29%2Fkey&quot;&gt;key&lt;/a&gt; in the map.</source>
          <target state="translated">将指定的&lt;a href=&quot;put#kotlin.collections.MutableMap%24put%28kotlin.collections.MutableMap.K%2C+kotlin.collections.MutableMap.V%29%2Fvalue&quot;&gt;值&lt;/a&gt;与映射中的指定&lt;a href=&quot;put#kotlin.collections.MutableMap%24put%28kotlin.collections.MutableMap.K%2C+kotlin.collections.MutableMap.V%29%2Fkey&quot;&gt;键相关&lt;/a&gt;联。</target>
        </trans-unit>
        <trans-unit id="474780bfd61f09d7e1a6cde45d5c2a71f5f24780" translate="yes" xml:space="preserve">
          <source>Associates the specified &lt;a href=&quot;put#kotlin.collections.MutableMap%24put(kotlin.collections.MutableMap.K,%20kotlin.collections.MutableMap.V)/value&quot;&gt;value&lt;/a&gt; with the specified &lt;a href=&quot;put#kotlin.collections.MutableMap%24put(kotlin.collections.MutableMap.K,%20kotlin.collections.MutableMap.V)/key&quot;&gt;key&lt;/a&gt; in the map.</source>
          <target state="translated">将指定的&lt;a href=&quot;put#kotlin.collections.MutableMap%24put(kotlin.collections.MutableMap.K,%20kotlin.collections.MutableMap.V)/value&quot;&gt;值&lt;/a&gt;与映射中的指定&lt;a href=&quot;put#kotlin.collections.MutableMap%24put(kotlin.collections.MutableMap.K,%20kotlin.collections.MutableMap.V)/key&quot;&gt;键相关&lt;/a&gt;联。</target>
        </trans-unit>
        <trans-unit id="1948b8a73d1cd0190740c5b39d682043e8e45d4f" translate="yes" xml:space="preserve">
          <source>Association</source>
          <target state="translated">Association</target>
        </trans-unit>
        <trans-unit id="8395c0a0a207934d59566106bad22ec2ff5eb59e" translate="yes" xml:space="preserve">
          <source>Assume that we have two suspending functions defined elsewhere that do something useful like some kind of remote service call or computation. We just pretend they are useful, but actually each one just delays for a second for the purpose of this example:</source>
          <target state="translated">假设我们有两个在其他地方定义的暂停函数,它们做一些有用的事情,比如某种远程服务调用或计算。我们只是假装它们是有用的,但实际上每个函数都只是为了本例的目的而延迟了一秒钟。</target>
        </trans-unit>
        <trans-unit id="c3aa4978e4d58ec2c7d3b82f0965d81efb4db15b" translate="yes" xml:space="preserve">
          <source>Assume that you have a list of words. The code below filters the words longer than three characters and prints the lengths of first four such words.</source>
          <target state="translated">假设你有一个单词列表。下面的代码过滤了长度超过三个字符的单词,并打印出前四个这样的单词的长度。</target>
        </trans-unit>
        <trans-unit id="4cd21d8e175e3ac0a1b9fe05cc33f184247d0b3e" translate="yes" xml:space="preserve">
          <source>Assume the &lt;code&gt;main&lt;/code&gt; entry point to be provided by external libraries.</source>
          <target state="translated">假定要由外部库提供的 &lt;code&gt;main&lt;/code&gt; 入口点。</target>
        </trans-unit>
        <trans-unit id="79861cda45d1d1336e91c18e019c28d9b3291f82" translate="yes" xml:space="preserve">
          <source>Assuming we have the following project layout</source>
          <target state="translated">假设我们的项目布局如下</target>
        </trans-unit>
        <trans-unit id="d7a00b0d9f24fd10ce1bc320970a529790a5b81e" translate="yes" xml:space="preserve">
          <source>Async-style functions</source>
          <target state="translated">异步式函数</target>
        </trans-unit>
        <trans-unit id="5f0c15c7899512dbe26911df30eecdd90eaafd60" translate="yes" xml:space="preserve">
          <source>Async: returning a value from a coroutine</source>
          <target state="translated">异步:从一个coroutine返回一个值。</target>
        </trans-unit>
        <trans-unit id="4a98d707e385c86f0c101a642eb19f1b3d755a3e" translate="yes" xml:space="preserve">
          <source>Asynchronous Flow</source>
          <target state="translated">异步流</target>
        </trans-unit>
        <trans-unit id="8148eff566285bcd48743fb742f972c7a1dd962f" translate="yes" xml:space="preserve">
          <source>Asynchronous Programming</source>
          <target state="translated">异步编程</target>
        </trans-unit>
        <trans-unit id="bb7e30cd8cfe981829ae3dbd4f1b57e04eede4d9" translate="yes" xml:space="preserve">
          <source>Asynchronous Programming Techniques</source>
          <target state="translated">异步编程技术</target>
        </trans-unit>
        <trans-unit id="e2607ac70e77e7024a19441f977aa15dcc598da2" translate="yes" xml:space="preserve">
          <source>Asynchronous or non-blocking programming is the new reality. Whether we're creating server-side, desktop or mobile applications, it's important that we provide an experience that is not only fluid from the user's perspective, but scalable when needed.</source>
          <target state="translated">异步或非阻塞式编程是新的现实。无论我们是在创建服务器端、桌面还是移动应用,重要的是我们要提供一种体验,这种体验不仅从用户的角度来看是流畅的,而且在需要的时候是可扩展的。</target>
        </trans-unit>
        <trans-unit id="8c962fbddfbed98bc56b92b68db40e062e436b77" translate="yes" xml:space="preserve">
          <source>Asynchronous timeout and resources</source>
          <target state="translated">异步超时和资源</target>
        </trans-unit>
        <trans-unit id="c90a909b33ae5b355a043d0fe5cf66963c82e15f" translate="yes" xml:space="preserve">
          <source>At first sight, inline classes may appear to be very similar to &lt;a href=&quot;type-aliases&quot;&gt;type aliases&lt;/a&gt;. Indeed, both seem to introduce a new type and both will be represented as the underlying type at runtime.</source>
          <target state="translated">乍一看，内联类可能看起来与&lt;a href=&quot;type-aliases&quot;&gt;类型别名&lt;/a&gt;非常相似。实际上，两者似乎都引入了新类型，并且两者都将在运行时表示为基础类型。</target>
        </trans-unit>
        <trans-unit id="4c1c4f3d0549737a69f500db6e62443a19d51d14" translate="yes" xml:space="preserve">
          <source>At most one Java class (and as many Java interfaces as you like) can be a supertype for a class in Kotlin.</source>
          <target state="translated">在Kotlin中,最多可以有一个Java类(以及你喜欢的任何数量的Java接口)成为一个类的超级类型。</target>
        </trans-unit>
        <trans-unit id="3ca268b94cd98a6448db35d4377a0662bccdcb59" translate="yes" xml:space="preserve">
          <source>At the call site, inline accessors are inlined as regular inline functions.</source>
          <target state="translated">在调用现场,内联访问器作为常规内联函数进行内联。</target>
        </trans-unit>
        <trans-unit id="ee1f6327a5680b8affafb58ed8775299673d7bbf" translate="yes" xml:space="preserve">
          <source>At the call sites, which function to use is determined from the type of the arguments:</source>
          <target state="translated">在调用站点,根据参数的类型决定使用哪个函数。</target>
        </trans-unit>
        <trans-unit id="776e970e6527bb2e679d37cd7d85af476c65df75" translate="yes" xml:space="preserve">
          <source>At this point we can start writing Kotlin code. For this sample, we're going to write some code that will print a string out to the console window.</source>
          <target state="translated">此时我们可以开始编写Kotlin代码了。在这个示例中,我们将编写一些代码,将一个字符串打印出来到控制台窗口。</target>
        </trans-unit>
        <trans-unit id="4e8863167b77086ca7c7ae08d20e28d919c8bb33" translate="yes" xml:space="preserve">
          <source>At this point, we should be able to compile and run the Android application</source>
          <target state="translated">在这一点上,我们应该能够编译和运行Android应用程序。</target>
        </trans-unit>
        <trans-unit id="6242af7a693eecb27b33a26762af854b2d88d142" translate="yes" xml:space="preserve">
          <source>At this point, we should have a Gradle project that is ready to be opened in an IDE. IntelliJ IDEA (CLion, AppCode, or AndroidStudio) helps us to generate the &lt;a href=&quot;https://docs.gradle.org/current/userguide/gradle_wrapper.html&quot;&gt;Gradle Wrapper&lt;/a&gt; scripts for our project.</source>
          <target state="translated">此时，我们应该有一个准备在IDE中打开的Gradle项目。IntelliJ IDEA（CLion，AppCode或AndroidStudio）可帮助我们为项目生成&lt;a href=&quot;https://docs.gradle.org/current/userguide/gradle_wrapper.html&quot;&gt;Gradle Wrapper&lt;/a&gt;脚本。</target>
        </trans-unit>
        <trans-unit id="f92583dde928fd145b3d96c6ab04278084ac9ae1" translate="yes" xml:space="preserve">
          <source>At this time, JavaScript does not support the full Kotlin reflection API. The only supported part of the API is the &lt;code&gt;::class&lt;/code&gt; syntax which allows you to refer to the class of an instance, or the class corresponding to the given type. The value of a &lt;code&gt;::class&lt;/code&gt; expression is a stripped-down &lt;a href=&quot;../../api/latest/jvm/stdlib/kotlin.reflect/-k-class/index&quot;&gt;KClass&lt;/a&gt; implementation that only supports the &lt;a href=&quot;../../api/latest/jvm/stdlib/kotlin.reflect/-k-class/simple-name&quot;&gt;simpleName&lt;/a&gt; and &lt;a href=&quot;../../api/latest/jvm/stdlib/kotlin.reflect/-k-class/is-instance&quot;&gt;isInstance&lt;/a&gt; members.</source>
          <target state="translated">目前，JavaScript不支持完整的Kotlin反射API。 API唯一受支持的部分是 &lt;code&gt;::class&lt;/code&gt; 语法，该语法使您可以引用实例的类或与给定类型相对应的类。 &lt;code&gt;::class&lt;/code&gt; 表达式的值是精简的&lt;a href=&quot;../../api/latest/jvm/stdlib/kotlin.reflect/-k-class/index&quot;&gt;KClass&lt;/a&gt;实现，仅支持&lt;a href=&quot;../../api/latest/jvm/stdlib/kotlin.reflect/-k-class/simple-name&quot;&gt;simpleName&lt;/a&gt;和&lt;a href=&quot;../../api/latest/jvm/stdlib/kotlin.reflect/-k-class/is-instance&quot;&gt;isInstance&lt;/a&gt;成员。</target>
        </trans-unit>
        <trans-unit id="b1093ec23519e17835b710a2e546cfab3df5cdd9" translate="yes" xml:space="preserve">
          <source>Atomic Kotlin</source>
          <target state="translated">原子Kotlin</target>
        </trans-unit>
        <trans-unit id="7d3ac242b6d27572d34300c15efdc9401c78d30a" translate="yes" xml:space="preserve">
          <source>Atomic lazy initializer, could be used in frozen objects, freezes initializing lambda, so use very carefully. Also, as with other uses of an &lt;a href=&quot;-atomic-reference/index&quot;&gt;AtomicReference&lt;/a&gt; may potentially leak memory, so it is recommended to use &lt;code&gt;atomicLazy&lt;/code&gt; in cases of objects living forever, such as object signletons, or in cases where it's guaranteed not to have cyclical garbage.</source>
          <target state="translated">原子惰性初始化器可用于冻结对象中，冻结初始化lambda，因此请非常小心使用。另外，与&lt;a href=&quot;-atomic-reference/index&quot;&gt;AtomicReference的&lt;/a&gt;其他用法一样，它可能会泄漏内存，因此，在对象永久存在的情况下（例如对象签名）或在保证不具有周期性垃圾的情况下，建议使用 &lt;code&gt;atomicLazy&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="aa8f18c35a25de30768b4c0929995f133f360d46" translate="yes" xml:space="preserve">
          <source>Atomic primitives and references</source>
          <target state="translated">原子基元和引用</target>
        </trans-unit>
        <trans-unit id="3e3527d53d19dec4d8e1e33d95793431aa83f1ca" translate="yes" xml:space="preserve">
          <source>Atomic values and freezing: atomics &lt;a href=&quot;-atomic-int/index&quot;&gt;AtomicInt&lt;/a&gt;, &lt;a href=&quot;-atomic-long/index&quot;&gt;AtomicLong&lt;/a&gt;, &lt;a href=&quot;-atomic-native-ptr/index&quot;&gt;AtomicNativePtr&lt;/a&gt; and &lt;a href=&quot;-atomic-reference/index&quot;&gt;AtomicReference&lt;/a&gt; are unique types with regard to freezing. Namely, they provide mutating operations, while can participate in frozen subgraphs. So shared frozen objects can have fields of atomic types.</source>
          <target state="translated">原子值和冻结：就冻结而言，原子&lt;a href=&quot;-atomic-int/index&quot;&gt;AtomicInt&lt;/a&gt;，&lt;a href=&quot;-atomic-long/index&quot;&gt;AtomicLong&lt;/a&gt;，&lt;a href=&quot;-atomic-native-ptr/index&quot;&gt;AtomicNativePtr&lt;/a&gt;和&lt;a href=&quot;-atomic-reference/index&quot;&gt;AtomicReference&lt;/a&gt;是唯一的类型。即，它们提供变异操作，同时可以参与冻结的子图。因此，共享的冻结对象可以具有原子类型的字段。</target>
        </trans-unit>
        <trans-unit id="ff80b7bb0582527dccb6953af274f0c41a527a8d" translate="yes" xml:space="preserve">
          <source>Atomic values and freezing: atomics &lt;a href=&quot;../../kotlin.native.concurrent/-atomic-int/index&quot;&gt;AtomicInt&lt;/a&gt;, &lt;a href=&quot;../../kotlin.native.concurrent/-atomic-long/index&quot;&gt;AtomicLong&lt;/a&gt;, &lt;a href=&quot;../../kotlin.native.concurrent/-atomic-native-ptr/index&quot;&gt;AtomicNativePtr&lt;/a&gt; and &lt;a href=&quot;../../kotlin.native.concurrent/-atomic-reference/index&quot;&gt;AtomicReference&lt;/a&gt; are unique types with regard to freezing. Namely, they provide mutating operations, while can participate in frozen subgraphs. So shared frozen objects can have fields of atomic types.</source>
          <target state="translated">原子值和冻结：就冻结而言，原子&lt;a href=&quot;../../kotlin.native.concurrent/-atomic-int/index&quot;&gt;AtomicInt&lt;/a&gt;，&lt;a href=&quot;../../kotlin.native.concurrent/-atomic-long/index&quot;&gt;AtomicLong&lt;/a&gt;，&lt;a href=&quot;../../kotlin.native.concurrent/-atomic-native-ptr/index&quot;&gt;AtomicNativePtr&lt;/a&gt;和&lt;a href=&quot;../../kotlin.native.concurrent/-atomic-reference/index&quot;&gt;AtomicReference&lt;/a&gt;是唯一的类型。即，它们提供变异操作，同时可以参与冻结的子图。因此，共享的冻结对象可以具有原子类型的字段。</target>
        </trans-unit>
        <trans-unit id="f3220b8f47f19733bfedcab3d792dd6ebcbb2870" translate="yes" xml:space="preserve">
          <source>Atomic values and freezing: atomics &lt;a href=&quot;index&quot;&gt;AtomicInt&lt;/a&gt;, &lt;a href=&quot;../-atomic-long/index&quot;&gt;AtomicLong&lt;/a&gt;, &lt;a href=&quot;../-atomic-native-ptr/index&quot;&gt;AtomicNativePtr&lt;/a&gt; and &lt;a href=&quot;../-atomic-reference/index&quot;&gt;AtomicReference&lt;/a&gt; are unique types with regard to freezing. Namely, they provide mutating operations, while can participate in frozen subgraphs. So shared frozen objects can have fields of atomic types.</source>
          <target state="translated">原子值和冻结：就冻结而言，原子&lt;a href=&quot;index&quot;&gt;AtomicInt&lt;/a&gt;，&lt;a href=&quot;../-atomic-long/index&quot;&gt;AtomicLong&lt;/a&gt;，&lt;a href=&quot;../-atomic-native-ptr/index&quot;&gt;AtomicNativePtr&lt;/a&gt;和&lt;a href=&quot;../-atomic-reference/index&quot;&gt;AtomicReference&lt;/a&gt;是唯一的类型。即，它们提供变异操作，同时可以参与冻结的子图。因此，共享的冻结对象可以具有原子类型的字段。</target>
        </trans-unit>
        <trans-unit id="d29876e6e5c1007b7487d4800ff3326a46fdfe37" translate="yes" xml:space="preserve">
          <source>AtomicInt</source>
          <target state="translated">AtomicInt</target>
        </trans-unit>
        <trans-unit id="c6711287dc9369302489e77fcf65d42a31c0643c" translate="yes" xml:space="preserve">
          <source>AtomicLong</source>
          <target state="translated">AtomicLong</target>
        </trans-unit>
        <trans-unit id="b10e4647607e2f28f754fdbd9c0031e65869ad2c" translate="yes" xml:space="preserve">
          <source>AtomicNativePtr</source>
          <target state="translated">AtomicNativePtr</target>
        </trans-unit>
        <trans-unit id="cd0e6702ca5c371f1347949dd4a2eec403216573" translate="yes" xml:space="preserve">
          <source>AtomicReference</source>
          <target state="translated">AtomicReference</target>
        </trans-unit>
        <trans-unit id="6b9263c0c045b4b22f5e194c58e2e0998a48c054" translate="yes" xml:space="preserve">
          <source>Attaches previously detached object subgraph created by &lt;a href=&quot;-detached-object-graph/index&quot;&gt;DetachedObjectGraph&lt;/a&gt;. Please note, that once object graph is attached, the DetachedObjectGraph.stable pointer does not have sense anymore, and shall be discarded.</source>
          <target state="translated">附加由&lt;a href=&quot;-detached-object-graph/index&quot;&gt;DetachedObjectGraph&lt;/a&gt;创建的先前分离的对象子图。请注意，一旦附加了对象图，DetachedObjectGraph.stable指针将不再有意义，应将其丢弃。</target>
        </trans-unit>
        <trans-unit id="dc219046f9dd12cc6f54ad2da0d81941959336bb" translate="yes" xml:space="preserve">
          <source>Attaches previously detached object subgraph created by &lt;a href=&quot;-detached-object-graph/index&quot;&gt;DetachedObjectGraph&lt;/a&gt;. Please note, that once object graph is attached, the DetachedObjectGraph.stable pointer does not make sense anymore, and shall be discarded, so attach of one DetachedObjectGraph object can only happen once.</source>
          <target state="translated">附加由&lt;a href=&quot;-detached-object-graph/index&quot;&gt;DetachedObjectGraph&lt;/a&gt;创建的先前分离的对象子图。请注意，一旦附加了对象图，DetachedObjectGraph.stable指针将不再有意义，并且将被丢弃，因此一个DetachedObjectGraph对象的附加只能进行一次。</target>
        </trans-unit>
        <trans-unit id="85360aaf61fcc41844144d2a436522c4272bcaf6" translate="yes" xml:space="preserve">
          <source>Attaches previously detached object subgraph created by &lt;a href=&quot;index&quot;&gt;DetachedObjectGraph&lt;/a&gt;. Please note, that once object graph is attached, the DetachedObjectGraph.stable pointer does not have sense anymore, and shall be discarded.</source>
          <target state="translated">附加由&lt;a href=&quot;index&quot;&gt;DetachedObjectGraph&lt;/a&gt;创建的先前分离的对象子图。请注意，一旦附加了对象图，DetachedObjectGraph.stable指针将不再有意义，应将其丢弃。</target>
        </trans-unit>
        <trans-unit id="d464a203d18b4acdef1cb9b5e6d79361554aa421" translate="yes" xml:space="preserve">
          <source>Attaches previously detached object subgraph created by &lt;a href=&quot;index&quot;&gt;DetachedObjectGraph&lt;/a&gt;. Please note, that once object graph is attached, the DetachedObjectGraph.stable pointer does not make sense anymore, and shall be discarded, so attach of one DetachedObjectGraph object can only happen once.</source>
          <target state="translated">附加由&lt;a href=&quot;index&quot;&gt;DetachedObjectGraph&lt;/a&gt;创建的先前分离的对象子图。请注意，一旦附加了对象图，DetachedObjectGraph.stable指针将不再有意义，并且将被丢弃，因此一个DetachedObjectGraph对象的附加只能进行一次。</target>
        </trans-unit>
        <trans-unit id="3e04925abe583687ef35f1c1ca19b4070dadb97b" translate="yes" xml:space="preserve">
          <source>Attempts to access a member on a &lt;code&gt;null&lt;/code&gt; reference of a &lt;a href=&quot;java-interop#null-safety-and-platform-types&quot;&gt;platform type&lt;/a&gt;;</source>
          <target state="translated">尝试以&lt;a href=&quot;java-interop#null-safety-and-platform-types&quot;&gt;平台类型&lt;/a&gt;的 &lt;code&gt;null&lt;/code&gt; 引用访问成员;</target>
        </trans-unit>
        <trans-unit id="f38b115c0558078590578144f222487894baa182" translate="yes" xml:space="preserve">
          <source>Attempts to match the entire &lt;a href=&quot;match-entire#kotlin.text.Regex%24matchEntire%28kotlin.CharSequence%29%2Finput&quot;&gt;input&lt;/a&gt; CharSequence against the pattern.</source>
          <target state="translated">尝试使整个&lt;a href=&quot;match-entire#kotlin.text.Regex%24matchEntire%28kotlin.CharSequence%29%2Finput&quot;&gt;输入&lt;/a&gt; CharSequence与该模式匹配。</target>
        </trans-unit>
        <trans-unit id="3961ecca8671626370b3766776c20dc21550b18a" translate="yes" xml:space="preserve">
          <source>Attempts to match the entire &lt;a href=&quot;match-entire#kotlin.text.Regex%24matchEntire(kotlin.CharSequence)/input&quot;&gt;input&lt;/a&gt; CharSequence against the pattern.</source>
          <target state="translated">尝试将整个&lt;a href=&quot;match-entire#kotlin.text.Regex%24matchEntire(kotlin.CharSequence)/input&quot;&gt;输入&lt;/a&gt;CharSequence与该模式进行匹配。</target>
        </trans-unit>
        <trans-unit id="1e354738ed906b6023210a6af2ec10c3fd9cc557" translate="yes" xml:space="preserve">
          <source>Attempts to reduce storage used for this string builder.</source>
          <target state="translated">试图减少该字符串构建器使用的存储空间。</target>
        </trans-unit>
        <trans-unit id="0a3992a6a4aa368ee211c9a5ef66edcf44867dac" translate="yes" xml:space="preserve">
          <source>Attributes Common for JVM and JS</source>
          <target state="translated">JVM和JS的共同属性</target>
        </trans-unit>
        <trans-unit id="19e61d54f451b94d2a537e89732db95c83678a6f" translate="yes" xml:space="preserve">
          <source>Attributes Common for JVM, JS, and JS DCE</source>
          <target state="translated">JVM、JS和JS DCE的共同属性。</target>
        </trans-unit>
        <trans-unit id="df5c20aa22a21e846f82b7e3de20a361b9409ec8" translate="yes" xml:space="preserve">
          <source>Attributes Specific for JS</source>
          <target state="translated">JS特有的属性</target>
        </trans-unit>
        <trans-unit id="f2b02b6aea1831e52d168cd65816378536e73e3e" translate="yes" xml:space="preserve">
          <source>Attributes Specific for JVM</source>
          <target state="translated">JVM特有的属性</target>
        </trans-unit>
        <trans-unit id="bc7039e1aba846721ec623985d2d40d6de32dcac" translate="yes" xml:space="preserve">
          <source>Attributes common for JVM and JS</source>
          <target state="translated">JVM和JS的共同属性</target>
        </trans-unit>
        <trans-unit id="e487d31ee714c363147bda3038882243c57cd4e1" translate="yes" xml:space="preserve">
          <source>Attributes common for JVM, JS, and JS DCE</source>
          <target state="translated">JVM、JS和JS DCE的共同属性。</target>
        </trans-unit>
        <trans-unit id="3a04a6e86e3fe7f9d64d5f2e9b362b660d514689" translate="yes" xml:space="preserve">
          <source>Attributes common for kotlinc and kotlin2js</source>
          <target state="translated">kotlinc和kotlin2js的共同属性</target>
        </trans-unit>
        <trans-unit id="58a9f1cbcc06a3468059fe9cb6b0bd7ec18ece90" translate="yes" xml:space="preserve">
          <source>Attributes specific for JS</source>
          <target state="translated">JS的具体属性</target>
        </trans-unit>
        <trans-unit id="3e62e54f4e49fd8be02c1ea2299e7299a8d38dee" translate="yes" xml:space="preserve">
          <source>Attributes specific for JVM</source>
          <target state="translated">JVM特有的属性</target>
        </trans-unit>
        <trans-unit id="3d5b3075a05527543a3bd39690d4c8ec95539b60" translate="yes" xml:space="preserve">
          <source>Attributes used for &lt;a href=&quot;mpp-set-up-targets#distinguish-several-targets-for-one-platform&quot;&gt;disambiguating targets&lt;/a&gt; for a single platform.</source>
          <target state="translated">用于&lt;a href=&quot;mpp-set-up-targets#distinguish-several-targets-for-one-platform&quot;&gt;消除&lt;/a&gt;单个平台目标歧义的属性。</target>
        </trans-unit>
        <trans-unit id="4c30a80ce09bd22cb712da2e47c2b70c6a7dbc6d" translate="yes" xml:space="preserve">
          <source>AudioTrack</source>
          <target state="translated">AudioTrack</target>
        </trans-unit>
        <trans-unit id="6075948adfa60c73f74f563f8feb4a98403ab458" translate="yes" xml:space="preserve">
          <source>Augmented assignments</source>
          <target state="translated">增派任务</target>
        </trans-unit>
        <trans-unit id="2eacac2b65755fe774c70b80986db46b1c410b0a" translate="yes" xml:space="preserve">
          <source>Authoring libraries for the IR compiler with backwards compatibility</source>
          <target state="translated">具有向后兼容性的IR编译器编写库</target>
        </trans-unit>
        <trans-unit id="834e7a793c079da4161fe6e5f43f722449edfaff" translate="yes" xml:space="preserve">
          <source>Authors of existing projects may choose to explicitly declare using the old code style in a project (this way the project won't be affected by switching to the defaults in the future)</source>
          <target state="translated">现有项目的作者可以选择在项目中明确声明使用旧的代码风格(这样项目就不会因为将来切换到默认值而受到影响)</target>
        </trans-unit>
        <trans-unit id="698d12054509449dda459aba97ce14ac599bf62a" translate="yes" xml:space="preserve">
          <source>Authors of existing projects may choose to migrate to the Kotlin Coding Conventions</source>
          <target state="translated">现有项目的作者可以选择迁移到Kotlin编码约定中去</target>
        </trans-unit>
        <trans-unit id="5b21b0d1957d77cbce2fde42083342b94ff6d7b9" translate="yes" xml:space="preserve">
          <source>AutofreeScope</source>
          <target state="translated">AutofreeScope</target>
        </trans-unit>
        <trans-unit id="ed639df7587daa7f0e2a83a2efdab37263d53336" translate="yes" xml:space="preserve">
          <source>Automatic Configuration</source>
          <target state="translated">自动配置</target>
        </trans-unit>
        <trans-unit id="7dfb0b6ec5c8489060715d687318f1e8b5634fe0" translate="yes" xml:space="preserve">
          <source>Automatic generation of external declarations with Dukat</source>
          <target state="translated">使用Dukat自动生成外部声明。</target>
        </trans-unit>
        <trans-unit id="f7df104fa9dfba3548d0c4684bc5a40afaa99b57" translate="yes" xml:space="preserve">
          <source>Automatically assigned ids are good when coroutines log often and you just need to correlate log records coming from the same coroutine. However, when a coroutine is tied to the processing of a specific request or doing some specific background task, it is better to name it explicitly for debugging purposes. The &lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/-coroutine-name/index.html&quot;&gt;CoroutineName&lt;/a&gt; context element serves the same purpose as the thread name. It is included in the thread name that is executing this coroutine when the &lt;a href=&quot;#debugging-coroutines-and-threads&quot;&gt;debugging mode&lt;/a&gt; is turned on.</source>
          <target state="translated">当协同程序经常记录日志时，自动分配的ID很好，您只需要关联来自相同协同程序的日志记录即可。但是，当协程与特定请求的处理或执行某些特定的后台任务相关时，最好为调试目的明确命名它。该&lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/-coroutine-name/index.html&quot;&gt;CoroutineName&lt;/a&gt;上下文元素的作用相同的线程名。当打开&lt;a href=&quot;#debugging-coroutines-and-threads&quot;&gt;调试模式&lt;/a&gt;时，它包含在执行此协程的线程名称中。</target>
        </trans-unit>
        <trans-unit id="e62729f2b2555d5d8ac4915829fe367bb5ae7e91" translate="yes" xml:space="preserve">
          <source>Automatically assigned ids are good when coroutines log often and you just need to correlate log records coming from the same coroutine. However, when coroutine is tied to the processing of a specific request or doing some specific background task, it is better to name it explicitly for debugging purposes. &lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/-coroutine-name/index.html&quot;&gt;CoroutineName&lt;/a&gt; context element serves the same function as a thread name. It'll get displayed in the thread name that is executing this coroutine when &lt;a href=&quot;#debugging-coroutines-and-threads&quot;&gt;debugging mode&lt;/a&gt; is turned on.</source>
          <target state="translated">当协同程序经常记录日志时，自动分配的ID很好，您只需要关联来自相同协同程序的日志记录。但是，当协程与特定请求的处理或执行某些特定的后台任务相关时，最好为调试目的明确命名它。&lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/-coroutine-name/index.html&quot;&gt;CoroutineName&lt;/a&gt;上下文元素的功能与线程名称相同。当打开&lt;a href=&quot;#debugging-coroutines-and-threads&quot;&gt;调试模式&lt;/a&gt;时，它将显示在执行此协程的线程名称中。</target>
        </trans-unit>
        <trans-unit id="dedf9e0b9e549511e84f9a55d3b042ca74de957a" translate="yes" xml:space="preserve">
          <source>Availability by default</source>
          <target state="translated">默认的可用性</target>
        </trans-unit>
        <trans-unit id="7c0e3548596e9319d754a7ccf13706332d8c4cb9" translate="yes" xml:space="preserve">
          <source>Available at runtime but is not visible during compilation of any module.</source>
          <target state="translated">在运行时可用,但在编译任何模块时不可见。</target>
        </trans-unit>
        <trans-unit id="c8cc7ec782d977d65ce99353082a5bdf17f287b4" translate="yes" xml:space="preserve">
          <source>Available for</source>
          <target state="translated">可供</target>
        </trans-unit>
        <trans-unit id="19e5fd6a644635fee9a19be8333a112f913920e1" translate="yes" xml:space="preserve">
          <source>Available values are similar to Maven.</source>
          <target state="translated">可用值与Maven类似。</target>
        </trans-unit>
        <trans-unit id="925c5bacdb9d1f8779aa51c640f5ff726fe66e5b" translate="yes" xml:space="preserve">
          <source>Available values are: &lt;code&gt;plain&lt;/code&gt;, &lt;code&gt;amd&lt;/code&gt;, &lt;code&gt;commonjs&lt;/code&gt;, &lt;code&gt;umd&lt;/code&gt;.</source>
          <target state="translated">可用值包括： &lt;code&gt;plain&lt;/code&gt; ， &lt;code&gt;amd&lt;/code&gt; ， &lt;code&gt;commonjs&lt;/code&gt; ， &lt;code&gt;umd&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="14ae1302612f3a72a72bfd1d8a4999912d2ff46d" translate="yes" xml:space="preserve">
          <source>Available values are: &lt;code&gt;umd&lt;/code&gt; (default), &lt;code&gt;commonjs&lt;/code&gt;, &lt;code&gt;amd&lt;/code&gt;, &lt;code&gt;plain&lt;/code&gt;.</source>
          <target state="translated">可用值包括： &lt;code&gt;umd&lt;/code&gt; （默认）， &lt;code&gt;commonjs&lt;/code&gt; ， &lt;code&gt;amd&lt;/code&gt; ， &lt;code&gt;plain&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="163b0272f1313b7d3ab40d92011eb45565a061a9" translate="yes" xml:space="preserve">
          <source>Avoid using multiple labeled returns in a lambda. Consider restructuring the lambda so that it will have a single exit point. If that's not possible or not clear enough, consider converting the lambda into an anonymous function.</source>
          <target state="translated">避免在lambda中使用多个标签返回。考虑调整lambda的结构,使其只有一个退出点。如果这不可能或不够清晰,考虑将lambda转换为匿名函数。</target>
        </trans-unit>
        <trans-unit id="f61994132eb4d79c6aaf7ca511db5a42493392ec" translate="yes" xml:space="preserve">
          <source>Avoiding redundant constructs</source>
          <target state="translated">避免多余的结构</target>
        </trans-unit>
        <trans-unit id="d05fb01e0b399387c3a28586f5fd296e2670d6a3" translate="yes" xml:space="preserve">
          <source>BINARY</source>
          <target state="translated">BINARY</target>
        </trans-unit>
        <trans-unit id="40f11d3ad003725179d3a62fbf2b87b2339ec88d" translate="yes" xml:space="preserve">
          <source>BOTTOM_UP</source>
          <target state="translated">BOTTOM_UP</target>
        </trans-unit>
        <trans-unit id="ddfff385b1434a7625c985e9f1d31a3cd0752508" translate="yes" xml:space="preserve">
          <source>BOUNDARY_NEUTRAL</source>
          <target state="translated">BOUNDARY_NEUTRAL</target>
        </trans-unit>
        <trans-unit id="64dd60fe1a049fe6db3eb1369dec2e42bf428e21" translate="yes" xml:space="preserve">
          <source>Background</source>
          <target state="translated">Background</target>
        </trans-unit>
        <trans-unit id="1f8df48cbdf6e9bb3b2a296fc43fa4bd2dbc081a" translate="yes" xml:space="preserve">
          <source>Backing Fields</source>
          <target state="translated">支持领域</target>
        </trans-unit>
        <trans-unit id="ba9525e05855250ce336ac7c2b4ab8bd18b3201d" translate="yes" xml:space="preserve">
          <source>Backing Properties</source>
          <target state="translated">支持属性</target>
        </trans-unit>
        <trans-unit id="631fe8fd6cc851cadc4405bb7dd43652aea1c83c" translate="yes" xml:space="preserve">
          <source>BarProp</source>
          <target state="translated">BarProp</target>
        </trans-unit>
        <trans-unit id="69c20ffdfd0584cd6a1117171a685097ea27aca9" translate="yes" xml:space="preserve">
          <source>Base class for &lt;a href=&quot;-coroutine-context/-element/index&quot;&gt;CoroutineContext.Element&lt;/a&gt; implementations.</source>
          <target state="translated">&lt;a href=&quot;-coroutine-context/-element/index&quot;&gt;CoroutineContext.Element&lt;/a&gt;实现的基类。</target>
        </trans-unit>
        <trans-unit id="15d35858275d06dd03861a24397a3ce986f4354b" translate="yes" xml:space="preserve">
          <source>Base class for &lt;a href=&quot;-coroutine-context/-key&quot;&gt;CoroutineContext.Key&lt;/a&gt; associated with polymorphic &lt;a href=&quot;-coroutine-context/-element/index&quot;&gt;CoroutineContext.Element&lt;/a&gt; implementation. Polymorphic element implementation implies delegating its &lt;a href=&quot;-coroutine-context/-element/get&quot;&gt;get&lt;/a&gt; and &lt;a href=&quot;-coroutine-context/-element/minus-key&quot;&gt;minusKey&lt;/a&gt; to &lt;a href=&quot;get-polymorphic-element&quot;&gt;getPolymorphicElement&lt;/a&gt; and &lt;a href=&quot;minus-polymorphic-key&quot;&gt;minusPolymorphicKey&lt;/a&gt; respectively.</source>
          <target state="translated">与多态&lt;a href=&quot;-coroutine-context/-element/index&quot;&gt;CoroutineContext.Element&lt;/a&gt;实现相关联的&lt;a href=&quot;-coroutine-context/-key&quot;&gt;CoroutineContext.Key的&lt;/a&gt;基类。多态元素实现意味着分别将其&lt;a href=&quot;-coroutine-context/-element/get&quot;&gt;get&lt;/a&gt;和&lt;a href=&quot;-coroutine-context/-element/minus-key&quot;&gt;minusKey委派&lt;/a&gt;给&lt;a href=&quot;get-polymorphic-element&quot;&gt;getPolymorphicElement&lt;/a&gt;和&lt;a href=&quot;minus-polymorphic-key&quot;&gt;minusPolymorphicKey&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="7243152aff3a19217da0e810a6a6b21b0ed42228" translate="yes" xml:space="preserve">
          <source>Base class for &lt;a href=&quot;../-coroutine-context/-element/index&quot;&gt;CoroutineContext.Element&lt;/a&gt; implementations.</source>
          <target state="translated">&lt;a href=&quot;../-coroutine-context/-element/index&quot;&gt;CoroutineContext.Element&lt;/a&gt;实现的基类。</target>
        </trans-unit>
        <trans-unit id="8f2c4f77a0b39ce265b5ad1137ab61069fa375b2" translate="yes" xml:space="preserve">
          <source>Base class for &lt;a href=&quot;../-coroutine-context/-key&quot;&gt;CoroutineContext.Key&lt;/a&gt; associated with polymorphic &lt;a href=&quot;../-coroutine-context/-element/index&quot;&gt;CoroutineContext.Element&lt;/a&gt; implementation. Polymorphic element implementation implies delegating its &lt;a href=&quot;../-coroutine-context/-element/get&quot;&gt;get&lt;/a&gt; and &lt;a href=&quot;../-coroutine-context/-element/minus-key&quot;&gt;minusKey&lt;/a&gt; to &lt;a href=&quot;../get-polymorphic-element&quot;&gt;getPolymorphicElement&lt;/a&gt; and &lt;a href=&quot;../minus-polymorphic-key&quot;&gt;minusPolymorphicKey&lt;/a&gt; respectively.</source>
          <target state="translated">与多态&lt;a href=&quot;../-coroutine-context/-element/index&quot;&gt;CoroutineContext.Element&lt;/a&gt;实现相关联的&lt;a href=&quot;../-coroutine-context/-key&quot;&gt;CoroutineContext.Key的&lt;/a&gt;基类。多态元素实现意味着分别将其&lt;a href=&quot;../-coroutine-context/-element/get&quot;&gt;get&lt;/a&gt;和&lt;a href=&quot;../-coroutine-context/-element/minus-key&quot;&gt;minusKey委派&lt;/a&gt;给&lt;a href=&quot;../get-polymorphic-element&quot;&gt;getPolymorphicElement&lt;/a&gt;和&lt;a href=&quot;../minus-polymorphic-key&quot;&gt;minusPolymorphicKey&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="3dbb332a4302b9a6be036aad90c3597ea0d446a7" translate="yes" xml:space="preserve">
          <source>Base class for &lt;a href=&quot;../../kotlin.coroutines.experimental/-coroutine-context/-element/index&quot;&gt;CoroutineContext.Element&lt;/a&gt; implementations.</source>
          <target state="translated">&lt;a href=&quot;../../kotlin.coroutines.experimental/-coroutine-context/-element/index&quot;&gt;CoroutineContext.Element&lt;/a&gt;实现的基类。</target>
        </trans-unit>
        <trans-unit id="64721f5bd5bf9cb87511e3b2df6546bc5436e2d1" translate="yes" xml:space="preserve">
          <source>Base class for &lt;a href=&quot;../../kotlin.coroutines/-coroutine-context/-element/index&quot;&gt;CoroutineContext.Element&lt;/a&gt; implementations.</source>
          <target state="translated">&lt;a href=&quot;../../kotlin.coroutines/-coroutine-context/-element/index&quot;&gt;CoroutineContext.Element&lt;/a&gt;实现的基类。</target>
        </trans-unit>
        <trans-unit id="5c6c4d1fa1cea7d643033e0cc686085c0784ff70" translate="yes" xml:space="preserve">
          <source>Base class for &lt;a href=&quot;../../kotlin.coroutines/-coroutine-context/-key&quot;&gt;CoroutineContext.Key&lt;/a&gt; associated with polymorphic &lt;a href=&quot;../../kotlin.coroutines/-coroutine-context/-element/index&quot;&gt;CoroutineContext.Element&lt;/a&gt; implementation. Polymorphic element implementation implies delegating its &lt;a href=&quot;../../kotlin.coroutines/-coroutine-context/-element/get&quot;&gt;get&lt;/a&gt; and &lt;a href=&quot;../../kotlin.coroutines/-coroutine-context/-element/minus-key&quot;&gt;minusKey&lt;/a&gt; to &lt;a href=&quot;../../kotlin.coroutines/get-polymorphic-element&quot;&gt;getPolymorphicElement&lt;/a&gt; and &lt;a href=&quot;../../kotlin.coroutines/minus-polymorphic-key&quot;&gt;minusPolymorphicKey&lt;/a&gt; respectively.</source>
          <target state="translated">与多态&lt;a href=&quot;../../kotlin.coroutines/-coroutine-context/-element/index&quot;&gt;CoroutineContext.Element&lt;/a&gt;实现相关联的&lt;a href=&quot;../../kotlin.coroutines/-coroutine-context/-key&quot;&gt;CoroutineContext.Key的&lt;/a&gt;基类。多态元素实现意味着分别将其&lt;a href=&quot;../../kotlin.coroutines/-coroutine-context/-element/get&quot;&gt;get&lt;/a&gt;和&lt;a href=&quot;../../kotlin.coroutines/-coroutine-context/-element/minus-key&quot;&gt;minusKey委派&lt;/a&gt;给&lt;a href=&quot;../../kotlin.coroutines/get-polymorphic-element&quot;&gt;getPolymorphicElement&lt;/a&gt;和&lt;a href=&quot;../../kotlin.coroutines/minus-polymorphic-key&quot;&gt;minusPolymorphicKey&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="5734564e60f6d0468b2eba14396fc3fc48c4b1b3" translate="yes" xml:space="preserve">
          <source>Base interface implicitly implemented by all annotation interfaces. See &lt;a href=&quot;../../../../../../docs/reference/annotations&quot;&gt;Kotlin language documentation&lt;/a&gt; for more information on annotations.</source>
          <target state="translated">基本接口由所有注释接口隐式实现。有关注释的更多信息，请参阅&lt;a href=&quot;../../../../../../docs/reference/annotations&quot;&gt;Kotlin语言文档&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="7fe2c7954cd1b89a648a9cad253d4aec1376c4b5" translate="yes" xml:space="preserve">
          <source>Base interface implicitly implemented by all annotation interfaces. See &lt;a href=&quot;../../../../../docs/reference/annotations&quot;&gt;Kotlin language documentation&lt;/a&gt; for more information on annotations.</source>
          <target state="translated">基本接口由所有注释接口隐式实现。有关注释的更多信息，请参阅&lt;a href=&quot;../../../../../docs/reference/annotations&quot;&gt;Kotlin语言文档&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="53bc813f0de4922a17c2d0a20db15ada1d790b5c" translate="yes" xml:space="preserve">
          <source>Base interface that can be used for implementing property delegate providers.</source>
          <target state="translated">可用于实现属性委托提供者的基础接口。</target>
        </trans-unit>
        <trans-unit id="c59ba4cae5cc34265ab39cbd2c308fd7a43f2458" translate="yes" xml:space="preserve">
          <source>Base interface that can be used for implementing property delegates of read-only properties.</source>
          <target state="translated">可用于实现只读属性的属性委托的基础接口。</target>
        </trans-unit>
        <trans-unit id="e91c5343b8946f864e8b656029fb53550538fd16" translate="yes" xml:space="preserve">
          <source>Base interface that can be used for implementing property delegates of read-write properties.</source>
          <target state="translated">可用于实现读写属性的属性委托的基础接口。</target>
        </trans-unit>
        <trans-unit id="64373315f6e979efca96ab611c5eefc9e99553fc" translate="yes" xml:space="preserve">
          <source>Base of the natural logarithms, approximately 2.71828.</source>
          <target state="translated">自然对数的基数,约为2.71828。</target>
        </trans-unit>
        <trans-unit id="2afb88d7964181bbca0fa9e83d658a614510bacd" translate="yes" xml:space="preserve">
          <source>Basecamp's Android app is &lt;a href=&quot;https://m.signalvnoise.com/how-we-made-basecamp-3s-android-app-100-kotlin-35e4e1c0ef12&quot;&gt;100% Kotlin code&lt;/a&gt;, and they report a huge difference in programmer happiness and great improvements in work quality and speed.</source>
          <target state="translated">Basecamp的Android应用程序是&lt;a href=&quot;https://m.signalvnoise.com/how-we-made-basecamp-3s-android-app-100-kotlin-35e4e1c0ef12&quot;&gt;100％Kotlin代码&lt;/a&gt;，它们报告了程序员在幸福感上的巨大差异以及工作质量和速度的显着提高。</target>
        </trans-unit>
        <trans-unit id="15e10e999d9f45564ef18325b8fb75ba7dfdf012" translate="yes" xml:space="preserve">
          <source>Basic Syntax</source>
          <target state="translated">基本语法</target>
        </trans-unit>
        <trans-unit id="0683d71248dcbb6ef209d3946391b3451983e5b6" translate="yes" xml:space="preserve">
          <source>Basic Types</source>
          <target state="translated">基本类型</target>
        </trans-unit>
        <trans-unit id="095602bb1950fe3e722bc705ecbf84e81ffbfbce" translate="yes" xml:space="preserve">
          <source>Basic interop types</source>
          <target state="translated">基本互操作类型</target>
        </trans-unit>
        <trans-unit id="31c67e8a76b1546e5e885d2ff65b10a2ec9660ee" translate="yes" xml:space="preserve">
          <source>Basic lifecycle tasks like &lt;code&gt;assemble&lt;/code&gt;, &lt;code&gt;build&lt;/code&gt;, and &lt;code&gt;clean&lt;/code&gt; are also available.</source>
          <target state="translated">基本生命周期任务（例如 &lt;code&gt;assemble&lt;/code&gt; ， &lt;code&gt;build&lt;/code&gt; 和 &lt;code&gt;clean&lt;/code&gt; )也可用。</target>
        </trans-unit>
        <trans-unit id="bff9aacbc4e15b3e4592c41eb9ecf6abc207d35d" translate="yes" xml:space="preserve">
          <source>Basic primitives for creating and suspending coroutines: &lt;a href=&quot;-continuation/index&quot;&gt;Continuation&lt;/a&gt;, &lt;a href=&quot;-coroutine-context/index&quot;&gt;CoroutineContext&lt;/a&gt; interfaces, coroutine creation and suspension top-level functions.</source>
          <target state="translated">用于创建和暂停协程的基本原语：&lt;a href=&quot;-continuation/index&quot;&gt;Continuation&lt;/a&gt;，&lt;a href=&quot;-coroutine-context/index&quot;&gt;CoroutineContext&lt;/a&gt;接口，协程创建和暂停顶级功能。</target>
        </trans-unit>
        <trans-unit id="3c4f90d8acc9678c79d53f447d2f3f8d0cca60ff" translate="yes" xml:space="preserve">
          <source>Basic primitives for creating and suspending coroutines: &lt;a href=&quot;api/latest/jvm/stdlib/kotlin.coroutines/-continuation/index&quot;&gt;Continuation&lt;/a&gt;, &lt;a href=&quot;api/latest/jvm/stdlib/kotlin.coroutines/-coroutine-context/index&quot;&gt;CoroutineContext&lt;/a&gt; interfaces, coroutine creation and suspension top-level functions.</source>
          <target state="translated">用于创建和暂停协程的基本原语：&lt;a href=&quot;api/latest/jvm/stdlib/kotlin.coroutines/-continuation/index&quot;&gt;Continuation&lt;/a&gt;，&lt;a href=&quot;api/latest/jvm/stdlib/kotlin.coroutines/-coroutine-context/index&quot;&gt;CoroutineContext&lt;/a&gt;接口，协程创建和暂停顶级功能。</target>
        </trans-unit>
        <trans-unit id="ad5ff5967cd00f1b9a1ebc25862b124009e41b57" translate="yes" xml:space="preserve">
          <source>Basic terms</source>
          <target state="translated">基本术语</target>
        </trans-unit>
        <trans-unit id="6af1132d5b79ef2d86c138cc84ba1a7c1c491b45" translate="yes" xml:space="preserve">
          <source>Basically this step is limited to defining the Step Name and the version of Kotlin we need. Tags can be used.</source>
          <target state="translated">基本上这一步仅限于定义步骤名称和我们需要的Kotlin版本。可以使用标签。</target>
        </trans-unit>
        <trans-unit id="5f93bc71aa464c43e8bc2736eb59d1de19d1609c" translate="yes" xml:space="preserve">
          <source>Basically, these functions do the same: execute a block of code on an object. What's different is how this object becomes available inside the block and what is the result of the whole expression.</source>
          <target state="translated">基本上,这些函数的作用是一样的:在一个对象上执行一个代码块。不同的是这个对象如何在代码块里面变得可用,以及整个表达式的结果是什么。</target>
        </trans-unit>
        <trans-unit id="5fcebeefad3cdbbf8733aa928160dec7dc90c1a1" translate="yes" xml:space="preserve">
          <source>Basics</source>
          <target state="translated">Basics</target>
        </trans-unit>
        <trans-unit id="27757d2e54473d3cf22ab554f90a3e64a22141d2" translate="yes" xml:space="preserve">
          <source>Because &lt;code&gt;T&lt;/code&gt; is used as a parameter type, it can't be covariant, and because it's used as a return type, it can't be contravariant. But if we only want to use the &lt;code&gt;get()&lt;/code&gt; function, we can project it covariantly with &lt;code&gt;out&lt;/code&gt;:</source>
          <target state="translated">因为 &lt;code&gt;T&lt;/code&gt; 用作参数类型，所以它不能是协变的，并且因为它用作返回类型，所以它不能是协变的。但是，如果我们只想使用 &lt;code&gt;get()&lt;/code&gt; 函数，则可以与 &lt;code&gt;out&lt;/code&gt; 协变地投影它：</target>
        </trans-unit>
        <trans-unit id="044cdf122b67c1432337900e8cfe71d6eac81889" translate="yes" xml:space="preserve">
          <source>Because JavaScript modules are usually dynamically typed and Kotlin is a statically typed language, we need to provide a kind of adapter. In Kotlin, such adapters are called &lt;em&gt;external declarations&lt;/em&gt;. For the &lt;code&gt;is-sorted&lt;/code&gt; package which offers only one function, this declaration is small to write. Inside the source folder, create a new file called &lt;code&gt;is-sorted.kt&lt;/code&gt;, and fill it with these contents:</source>
          <target state="translated">因为JavaScript模块通常是动态类型的，而Kotlin是静态类型的语言，所以我们需要提供一种适配器。在Kotlin中，此类适配器称为&lt;em&gt;外部声明&lt;/em&gt;。对于仅提供一个功能的 &lt;code&gt;is-sorted&lt;/code&gt; 包，此声明的编写量很小。在源文件夹内，创建一个名为 &lt;code&gt;is-sorted.kt&lt;/code&gt; 的新文件，并用以下内容填充该文件：</target>
        </trans-unit>
        <trans-unit id="2249ad42743195fa21c675ff00b5c5fb81328557" translate="yes" xml:space="preserve">
          <source>Because inline classes may be represented both as the underlying value and as a wrapper, &lt;a href=&quot;equality#referential-equality&quot;&gt;referential equality&lt;/a&gt; is pointless for them and is therefore prohibited.</source>
          <target state="translated">因为内联类既可以表示为基础值，也可以表示为包装器，所以&lt;a href=&quot;equality#referential-equality&quot;&gt;引用相等&lt;/a&gt;对它们没有意义，因此被禁止。</target>
        </trans-unit>
        <trans-unit id="8ecc92fa6dcc83dc03cd63fb44c723b727cbd9ab" translate="yes" xml:space="preserve">
          <source>Because the JavaScript ecosystem has multiple ways of exposing functions in a package (for example through named or default exports), other npm packages might need a slightly altered structure for their external declarations.</source>
          <target state="translated">由于JavaScript生态系统有多种方式在一个包中暴露函数(例如通过命名或默认导出),其他npm包可能需要稍微改变其外部声明的结构。</target>
        </trans-unit>
        <trans-unit id="4ca6f154cfc4c63e383cfc7b5ba39283960d1b9e" translate="yes" xml:space="preserve">
          <source>Because the parameter of &lt;code&gt;js&lt;/code&gt; is parsed at compile time and translated to JavaScript code &quot;as-is&quot;, it is required to be a string constant. So, the following code is incorrect:</source>
          <target state="translated">由于 &lt;code&gt;js&lt;/code&gt; 的参数是在编译时进行解析并转换为JavaScript代码&amp;ldquo;按原样&amp;rdquo;的，因此它必须是字符串常量。因此，以下代码不正确：</target>
        </trans-unit>
        <trans-unit id="3b0d8a0e940588e3637555a402e45bcf798e5679" translate="yes" xml:space="preserve">
          <source>Because the scope functions are all quite similar in nature, it's important to understand the differences between them. There are two main differences between each scope function:</source>
          <target state="translated">因为范围函数的性质都很相似,所以了解它们之间的区别很重要。每个范围函数之间有两个主要的区别。</target>
        </trans-unit>
        <trans-unit id="819946568e5b0c80c753dc4720dc81fac4aa4556" translate="yes" xml:space="preserve">
          <source>Because the set of member functions of an object is constrained to be exactly the set of member functions that are declared at compile-time in the object's class and base classes, it's not possible to add new member functions to an object or to a class at runtime, so e.g. &lt;code&gt;p.leave = fun() { println(&quot;Bye!&quot;) }&lt;/code&gt; or anything of the sort won't compile.</source>
          <target state="translated">由于对象的成员函数集被限制为恰好是在编译时在对象的类和基类中声明的成员函数集，因此无法将新的成员函数添加到对象或类中运行时，例如 &lt;code&gt;p.leave = fun() { println(&quot;Bye!&quot;) }&lt;/code&gt; 或任何此类都不会编译。</target>
        </trans-unit>
        <trans-unit id="8e9ea512eb79ca2592dd1a0e0d03d975a2b307ee" translate="yes" xml:space="preserve">
          <source>Because the set of properties of an object is constrained to be exactly the set of properties that are declared at compile-time in the object's class, it's not possible to add new properties to an object or to a class at runtime, so e.g. &lt;code&gt;a.nationality = &quot;Norwegian&quot;&lt;/code&gt; won't compile.</source>
          <target state="translated">由于对象的属性集被限制为恰好是在对象类的编译时声明的属性集，因此无法在运行时向对象或类添加新属性 &lt;code&gt;a.nationality = &quot;Norwegian&quot;&lt;/code&gt; 将不会编译。</target>
        </trans-unit>
        <trans-unit id="ad87165569409ac8f63f0b14ac5e97d48b36791d" translate="yes" xml:space="preserve">
          <source>Before Kotlin 1.2, interface members overriding Java-default methods while targeting JVM 1.6 produced a warning on super calls: &lt;code&gt;Super calls to Java default methods are deprecated in JVM target 1.6. Recompile with '-jvm-target 1.8'&lt;/code&gt;. In Kotlin 1.2, there's an &lt;strong&gt;error&lt;/strong&gt; instead, thus requiring any such code to be compiled with JVM target 1.8.</source>
          <target state="translated">在Kotlin 1.2之前，针对JVM 1.6的接口成员在重写Java默认方法时会在超级调用上产生警告： &lt;code&gt;Super calls to Java default methods are deprecated in JVM target 1.6. Recompile with '-jvm-target 1.8'&lt;/code&gt; 。在Kotlin 1.2中，存在&lt;strong&gt;错误&lt;/strong&gt;，因此需要使用JVM target 1.8编译任何此类代码。</target>
        </trans-unit>
        <trans-unit id="5a8a2d7d28618a51955572ee58c4cbbd5b340841" translate="yes" xml:space="preserve">
          <source>Before Kotlin 1.4.0, you could apply SAM (Single Abstract Method) conversions only &lt;a href=&quot;java-interop#sam-conversions&quot;&gt;when working with Java methods and Java interfaces from Kotlin&lt;/a&gt;. From now on, you can use SAM conversions for Kotlin interfaces as well. To do so, mark a Kotlin interface explicitly as functional with the &lt;code&gt;fun&lt;/code&gt; modifier.</source>
          <target state="translated">在Kotlin 1.4.0之前，仅&lt;a href=&quot;java-interop#sam-conversions&quot;&gt;当使用Kotlin的Java方法和Java接口时，&lt;/a&gt;才可以应用SAM（单一抽象方法）转换。从现在开始，您还可以将SAM转换用于Kotlin接口。为此，请使用 &lt;code&gt;fun&lt;/code&gt; 修饰符将Kotlin接口明确标记为可正常使用。</target>
        </trans-unit>
        <trans-unit id="e306172d559087c1f5488fe960b3bc7709c9e7f1" translate="yes" xml:space="preserve">
          <source>Before explaining what coroutines are, let's briefly review some of the other solutions.</source>
          <target state="translated">在解释什么是coroutines之前,我们先简单回顾一下其他的一些解决方案。</target>
        </trans-unit>
        <trans-unit id="93e8eb7cb48937a7f7cda7db1b5cb495184a3434" translate="yes" xml:space="preserve">
          <source>Before reading this tutorial, please, look through &lt;a href=&quot;http://kotlinlang.org/docs/tutorials/javascript/getting-started-gradle/getting-started-with-gradle.html&quot;&gt;Kotlin and JavaScript for Gradle tutorial&lt;/a&gt;.</source>
          <target state="translated">在阅读本教程之前，请仔细阅读&lt;a href=&quot;http://kotlinlang.org/docs/tutorials/javascript/getting-started-gradle/getting-started-with-gradle.html&quot;&gt;Kotlin和Gradle的JavaScript教程&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="75adccbc8b940be9de2d4c0d6ecccaba4f5c3ad9" translate="yes" xml:space="preserve">
          <source>Before releasing stable versions, we usually publish a number of preview builds dubbed EAP (for &quot;Early Access Preview&quot;) that let us iterate faster and gather feedback from the community. EAPs of feature releases usually produce binaries that will be later rejected by the stable compiler to make sure that possible bugs in the binary format survive no longer than the preview period. Final Release Candidates normally do not bear this limitation.</source>
          <target state="translated">在发布稳定版本之前,我们通常会发布一些被称为EAP(&quot;Early Access Preview &quot;的意思)的预览版本,让我们更快地进行迭代,并收集社区的反馈。功能版本的EAP通常会产生一些二进制文件,这些文件随后会被稳定编译器拒绝,以确保二进制格式中可能存在的错误不会超过预览期。最终版本候选版本通常不受此限制。</target>
        </trans-unit>
        <trans-unit id="3196802ef9383aefb50bf46ff14ca8ad89f70568" translate="yes" xml:space="preserve">
          <source>Before starting, you&amp;rsquo;ll need to configure your build script so that you can use Kotlin serialization tools in your project:</source>
          <target state="translated">开始之前，您需要配置构建脚本，以便可以在项目中使用Kotlin序列化工具：</target>
        </trans-unit>
        <trans-unit id="f8753def1852fb24391129d524bf385a761d61d4" translate="yes" xml:space="preserve">
          <source>Begin with a small class or function with the annotations required for proper &lt;a href=&quot;../reference/java-interop&quot;&gt;interoperability with Java code&lt;/a&gt;.</source>
          <target state="translated">从一个小类或函数开始，并带有&lt;a href=&quot;../reference/java-interop&quot;&gt;与Java代码&lt;/a&gt;正确互操作性所需的注释。</target>
        </trans-unit>
        <trans-unit id="f41ba730918fd1fccf5221281196b863dfda5c8a" translate="yes" xml:space="preserve">
          <source>Behavioral: a change is said to be behavioral-incompatible if one and the same program demonstrates different behavior before and after applying the change</source>
          <target state="translated">行为:如果一个相同的程序在应用改变之前和之后表现出不同的行为,那么这种改变被认为是行为不兼容的。</target>
        </trans-unit>
        <trans-unit id="f11d6d5b20ea9cb8285979e255f9168d0d1694aa" translate="yes" xml:space="preserve">
          <source>Being a JVM language, Kotlin gives you great performance and an ability to leverage an entire ecosystem of tried and true Java libraries.</source>
          <target state="translated">作为一种JVM语言,Kotlin为您提供了强大的性能,并能够利用整个生态系统的真正的Java库。</target>
        </trans-unit>
        <trans-unit id="dde6c943c606c3f296f259d96add15cf4fd1cf01" translate="yes" xml:space="preserve">
          <source>Being a statically typed language, Kotlin still has to interoperate with untyped or loosely typed environments, such as the JavaScript ecosystem. To facilitate these use cases, the &lt;code&gt;dynamic&lt;/code&gt; type is available in the language:</source>
          <target state="translated">作为一种静态类型化语言，Kotlin仍必须与未类型化或松散类型的环境（例如JavaScript生态系统）进行互操作。为了简化这些用例，可以使用以下语言提供 &lt;code&gt;dynamic&lt;/code&gt; 类型：</target>
        </trans-unit>
        <trans-unit id="5fb9c683c2e184695c7bfd7451bb04214a1765b5" translate="yes" xml:space="preserve">
          <source>Being abstract is the only way to &quot;escape&quot; from having to implement the members of your interfaces, by offloading the work onto your subclasses - if a subclass wants to be concrete, it must implement all the &quot;missing&quot; members.</source>
          <target state="translated">抽象是 &quot;逃避 &quot;实现接口成员的唯一方法,通过将工作卸载到子类上--如果一个子类想要具体化,它必须实现所有 &quot;缺失 &quot;的成员。</target>
        </trans-unit>
        <trans-unit id="5e543936a5d76f10477f647e41b14d63cbeb8898" translate="yes" xml:space="preserve">
          <source>Below are descriptions of the standard library functions for write operations available on mutable maps.</source>
          <target state="translated">下面是对可变图上可用的写操作的标准库函数的描述。</target>
        </trans-unit>
        <trans-unit id="23c4bcd44ee8499dae4c538d99a1425ac42187bb" translate="yes" xml:space="preserve">
          <source>Below is a class that can be used for ordering versions that consist of the major and the minor part.</source>
          <target state="translated">下面是一个可用于订购由大部和小部组成的版本的类。</target>
        </trans-unit>
        <trans-unit id="01432299b2df31f0ad456d2e3dcfa35df72da82a" translate="yes" xml:space="preserve">
          <source>Below is a diagram of the Kotlin collection interfaces:</source>
          <target state="translated">下面是Kotlin集合接口图。</target>
        </trans-unit>
        <trans-unit id="c026f6562df5d012fc4b9945fc1f178ec6dd656c" translate="yes" xml:space="preserve">
          <source>Below is an example Counter class that starts at a given value and can be incremented using the overloaded &lt;code&gt;+&lt;/code&gt; operator:</source>
          <target state="translated">下面是一个示例Counter类，该类从给定值开始，可以使用重载 &lt;code&gt;+&lt;/code&gt; 运算符递增：</target>
        </trans-unit>
        <trans-unit id="edbdfb6203a38d292de6b0369ed2a2c9ea024b9a" translate="yes" xml:space="preserve">
          <source>Below please find explanations of how the modifiers apply to different types of declaring scopes.</source>
          <target state="translated">下面请看关于修饰符如何适用于不同类型的声明范围的解释。</target>
        </trans-unit>
        <trans-unit id="e718e4a6411058b2c976d01df8d5ee072a573bf8" translate="yes" xml:space="preserve">
          <source>Besides Gradle project features and improvements that are specific to &lt;a href=&quot;#kotlin-multiplatform&quot;&gt;Kotlin Multiplatform&lt;/a&gt;, &lt;a href=&quot;#kotlinjvm&quot;&gt;Kotlin/JVM&lt;/a&gt;, &lt;a href=&quot;#kotlinnative&quot;&gt;Kotlin/Native&lt;/a&gt;, and &lt;a href=&quot;#kotlinjs&quot;&gt;Kotlin/JS&lt;/a&gt;, there are several changes applicable to all Kotlin Gradle projects:</source>
          <target state="translated">除了特定于&lt;a href=&quot;#kotlin-multiplatform&quot;&gt;Kotlin Multiplatform&lt;/a&gt;，&lt;a href=&quot;#kotlinjvm&quot;&gt;Kotlin / JVM&lt;/a&gt;，&lt;a href=&quot;#kotlinnative&quot;&gt;Kotlin / Native&lt;/a&gt;和&lt;a href=&quot;#kotlinjs&quot;&gt;Kotlin / JS的&lt;/a&gt;Gradle项目功能和改进之外，还有一些适用于所有Kotlin Gradle项目的更改：</target>
        </trans-unit>
        <trans-unit id="a65fe305f30ed3d5d015c1d8ac222cdc8dd1b064" translate="yes" xml:space="preserve">
          <source>Besides calling &lt;code&gt;run&lt;/code&gt; on a receiver object, you can use it as a non-extension function. Non-extension &lt;code&gt;run&lt;/code&gt; lets you execute a block of several statements where an expression is required.</source>
          <target state="translated">除了在接收者对象上调用 &lt;code&gt;run&lt;/code&gt; 之外，还可以将其用作非扩展函数。非扩展 &lt;code&gt;run&lt;/code&gt; 使您可以在需要表达式的地方执行包含多个语句的块。</target>
        </trans-unit>
        <trans-unit id="4d8f399439321d69bb3aae1bdb5a53f11ee0da4c" translate="yes" xml:space="preserve">
          <source>Besides converting existing functionality to Kotlin, you can also enjoy the Kotlin specific support. For instance, you can declare tables as &lt;a href=&quot;../reference/data-classes&quot;&gt;data classes&lt;/a&gt;:</source>
          <target state="translated">除了将现有功能转换为Kotlin外，您还可以享受Kotlin特定的支持。例如，您可以将表声明为&lt;a href=&quot;../reference/data-classes&quot;&gt;数据类&lt;/a&gt;：</target>
        </trans-unit>
        <trans-unit id="aff7edb23562b9eda43db64cb9a6ca2f1085bf7c" translate="yes" xml:space="preserve">
          <source>Besides regular dependencies, there are three more types of dependencies that can be used from the Gradle DSL. To learn more about when each type of dependency can best be used, have a look at the official documentation linked from npm:</source>
          <target state="translated">除了常规的依赖关系,还有三种类型的依赖关系可以在Gradle DSL中使用。要了解更多关于每种类型的依赖在什么时候使用最好,请看一下npm的官方文档链接。</target>
        </trans-unit>
        <trans-unit id="f03b60f7e52b7ce49ed1e4f9fa511c452a2185bb" translate="yes" xml:space="preserve">
          <source>Beta</source>
          <target state="translated">Beta</target>
        </trans-unit>
        <trans-unit id="7926735646055aabbd4e967c6ef5b776640ea1e9" translate="yes" xml:space="preserve">
          <source>Beta status of unsigned integers</source>
          <target state="translated">无符号整数的Beta状态</target>
        </trans-unit>
        <trans-unit id="112397f331b5572dd703b4ebc9b4678c9fc92667" translate="yes" xml:space="preserve">
          <source>Better code generation</source>
          <target state="translated">更好的代码生成</target>
        </trans-unit>
        <trans-unit id="c86cf42b6d1521ddffec24df6c2f562e7e466850" translate="yes" xml:space="preserve">
          <source>Better inference for delegated properties</source>
          <target state="translated">更好地推断委托属性</target>
        </trans-unit>
        <trans-unit id="daf5f256962e0bce3abff7235d6469a618bc9f29" translate="yes" xml:space="preserve">
          <source>Beware that dividing an integer by an integer produces an integer (like in Python 2, but unlike Python 3). If you want a floating-point result, at least one of the operands needs to be a floating-point number (and recall that like in most languages, floating-point operations are generally imprecise):</source>
          <target state="translated">请注意,用整数除以整数会产生一个整数 (就像在 Python 2 中一样,但不像 Python 3)。如果你想要一个浮点结果,操作数中至少有一个需要是浮点数 (而且要记住,像在大多数语言中一样,浮点运算通常是不精确的)。</target>
        </trans-unit>
        <trans-unit id="9ee4e69876a3afeb1c1bb0bcf29fd55cda91de34" translate="yes" xml:space="preserve">
          <source>Beware using the annotated API especially if you're developing a library, since your library might become binary incompatible with the future versions of the standard library.</source>
          <target state="translated">特别是当你在开发一个库的时候,要小心使用注解的API,因为你的库可能会成为与未来版本的标准库不兼容的二进制库。</target>
        </trans-unit>
        <trans-unit id="f3c794f007343b969bc570c5dd057212ece700be" translate="yes" xml:space="preserve">
          <source>Binaries</source>
          <target state="translated">Binaries</target>
        </trans-unit>
        <trans-unit id="c66ee5bbf7e4118187340873748e37adbb358aa2" translate="yes" xml:space="preserve">
          <source>Binaries have a set of properties allowing one to configure them. The following options are available:</source>
          <target state="translated">二进制文件有一组属性,允许人们对其进行配置。以下是可用的选项:</target>
        </trans-unit>
        <trans-unit id="72a460c436692a1a8c70072c89565ca2220867ee" translate="yes" xml:space="preserve">
          <source>Binaries: &lt;code&gt;0b00001011&lt;/code&gt;</source>
          <target state="translated">二进制： &lt;code&gt;0b00001011&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="c098d684da3e34376aa8f819e499d4e82c11310f" translate="yes" xml:space="preserve">
          <source>Binary compatibility warnings</source>
          <target state="translated">二进制兼容性警告</target>
        </trans-unit>
        <trans-unit id="3bf343b36800fde304e974f199b2f7695ef2c754" translate="yes" xml:space="preserve">
          <source>Binary kind</source>
          <target state="translated">二进制种类</target>
        </trans-unit>
        <trans-unit id="b26f6c63a335a90adeeab8f4d5013e4f2efe2bec" translate="yes" xml:space="preserve">
          <source>Binary operations</source>
          <target state="translated">二进制操作</target>
        </trans-unit>
        <trans-unit id="f2a6d55277fe59460ac595b466dfa5b222b190df" translate="yes" xml:space="preserve">
          <source>Binary operators &lt;code&gt;+&lt;/code&gt;, &lt;code&gt;-&lt;/code&gt;, &lt;code&gt;*&lt;/code&gt;, &lt;code&gt;/&lt;/code&gt;, &lt;code&gt;%&lt;/code&gt; and infix functions &lt;code&gt;and&lt;/code&gt;, &lt;code&gt;or&lt;/code&gt;, &lt;code&gt;xor&lt;/code&gt;, &lt;code&gt;shl&lt;/code&gt;, &lt;code&gt;shr&lt;/code&gt;;</source>
          <target state="translated">二元运算符 &lt;code&gt;+&lt;/code&gt; ， &lt;code&gt;-&lt;/code&gt; ， &lt;code&gt;*&lt;/code&gt; ， &lt;code&gt;/&lt;/code&gt; ， &lt;code&gt;%&lt;/code&gt; 和缀功能 &lt;code&gt;and&lt;/code&gt; ， &lt;code&gt;or&lt;/code&gt; ， &lt;code&gt;xor&lt;/code&gt; ， &lt;code&gt;shl&lt;/code&gt; ， &lt;code&gt;shr&lt;/code&gt; ;</target>
        </trans-unit>
        <trans-unit id="20b00ae38326b542aedf0b482b6afe3e749095cb" translate="yes" xml:space="preserve">
          <source>Binary representation:</source>
          <target state="translated">二进制表示。</target>
        </trans-unit>
        <trans-unit id="3dfefc606c6b6cb785b2fc9edff50a1793a08ceb" translate="yes" xml:space="preserve">
          <source>Binary search in sorted lists</source>
          <target state="translated">排序列表中的二进制搜索</target>
        </trans-unit>
        <trans-unit id="effd37854dc15cf0fa524eebd650b9512c09f83b" translate="yes" xml:space="preserve">
          <source>Binary search with &lt;em&gt;comparison&lt;/em&gt; function lets you find elements without providing explicit search values. Instead, it takes a comparison function mapping elements to &lt;code&gt;Int&lt;/code&gt; values and searches for the element where the function returns zero. The list must be sorted in the ascending order according to the provided function; in other words, the return values of comparison must grow from one list element to the next one.</source>
          <target state="translated">具有&lt;em&gt;比较&lt;/em&gt;功能的二进制搜索使您无需提供明确的搜索值即可查找元素。相反，它使用一个比较函数将元素映射到 &lt;code&gt;Int&lt;/code&gt; 值，并搜索该函数返回零的元素。该列表必须根据提供的功能以升序排序；换句话说，比较的返回值必须从一个列表元素增长到下一个列表元素。</target>
        </trans-unit>
        <trans-unit id="db5f4be53358b6d2931c1b26250a31285c182825" translate="yes" xml:space="preserve">
          <source>Binary: two binary artifacts are said to be binary-compatible if interchanging them doesn't lead to loading or linkage errors</source>
          <target state="translated">二进制:如果两个二进制工件互换不会导致加载或链接错误,则称它们是二进制兼容的。</target>
        </trans-unit>
        <trans-unit id="ef29ec8d1db838c8e1a48ba8918f31da08b74947" translate="yes" xml:space="preserve">
          <source>BinaryType</source>
          <target state="translated">BinaryType</target>
        </trans-unit>
        <trans-unit id="132a07831ab659522a2e219295c928d9e3f5055c" translate="yes" xml:space="preserve">
          <source>Bit operations</source>
          <target state="translated">位操作</target>
        </trans-unit>
        <trans-unit id="2b237840996cac995b70318f64835abec7e9398b" translate="yes" xml:space="preserve">
          <source>Bit width</source>
          <target state="translated">位宽</target>
        </trans-unit>
        <trans-unit id="b4ef9f89df5e45033f2747be00f3790a8b4e3761" translate="yes" xml:space="preserve">
          <source>BitField</source>
          <target state="translated">BitField</target>
        </trans-unit>
        <trans-unit id="f8cd7716f7a5997d4efd153b8de6bda8ac575d3b" translate="yes" xml:space="preserve">
          <source>BitSet</source>
          <target state="translated">BitSet</target>
        </trans-unit>
        <trans-unit id="a36a25a1cccb68c7c87fcd879bbb216973e2de75" translate="yes" xml:space="preserve">
          <source>Bits</source>
          <target state="translated">Bits</target>
        </trans-unit>
        <trans-unit id="67445a8812f7cd259e3b6e21272d2fddff30a9e2" translate="yes" xml:space="preserve">
          <source>Bitwise operations</source>
          <target state="translated">位面操作</target>
        </trans-unit>
        <trans-unit id="c24315eb20cc1f5a565ec08f29abab31c0925f1a" translate="yes" xml:space="preserve">
          <source>Blob</source>
          <target state="translated">Blob</target>
        </trans-unit>
        <trans-unit id="e31b904ea0486cad654bda29fbbbc9b45336239c" translate="yes" xml:space="preserve">
          <source>BlobPropertyBag</source>
          <target state="translated">BlobPropertyBag</target>
        </trans-unit>
        <trans-unit id="70af3238de42da66beb5f354425347f373dca837" translate="yes" xml:space="preserve">
          <source>Block Tags</source>
          <target state="translated">区块标签</target>
        </trans-unit>
        <trans-unit id="8542f6a0cf58945d2439e86f2f6015e3ec4398b4" translate="yes" xml:space="preserve">
          <source>Block comments in Kotlin can be nested.</source>
          <target state="translated">Kotlin中的块状注释可以被嵌套。</target>
        </trans-unit>
        <trans-unit id="b16d07cec726bb8e19bba1a595f5b311f2f811e3" translate="yes" xml:space="preserve">
          <source>Block pointer type</source>
          <target state="translated">块状指针类型</target>
        </trans-unit>
        <trans-unit id="f3b461348854c06872102b7c71825cb31ea832d9" translate="yes" xml:space="preserve">
          <source>Blocks execution until the future is ready.</source>
          <target state="translated">阻止执行,直到未来准备好。</target>
        </trans-unit>
        <trans-unit id="0b9d2b2362bc33581ba11fddcb0cf0590ebd3a7a" translate="yes" xml:space="preserve">
          <source>Blog</source>
          <target state="translated">Blog</target>
        </trans-unit>
        <trans-unit id="718a7e8a582e982e452dd5700addba4ffc1cf40d" translate="yes" xml:space="preserve">
          <source>Body</source>
          <target state="translated">Body</target>
        </trans-unit>
        <trans-unit id="4a7fdd8c17425252332ea0e89a35722b72d83135" translate="yes" xml:space="preserve">
          <source>Books</source>
          <target state="translated">Books</target>
        </trans-unit>
        <trans-unit id="b76ff4906f33c2dd97ddd929b9662ba8cac6174c" translate="yes" xml:space="preserve">
          <source>Boolean</source>
          <target state="translated">Boolean</target>
        </trans-unit>
        <trans-unit id="bcac21aba714064e6b64ee7f175904786fbaa767" translate="yes" xml:space="preserve">
          <source>Boolean expressions are formed with &lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt; for logical AND, &lt;code&gt;||&lt;/code&gt; for logical OR, and &lt;code&gt;!&lt;/code&gt; for logical NOT. As in Python, &lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt; and &lt;code&gt;||&lt;/code&gt; are short-circuiting: they only evaluate the right-hand side if it's necessary to determine the outcome. Beware that the keywords &lt;code&gt;and&lt;/code&gt; and &lt;code&gt;or&lt;/code&gt; also exist, but they only perform &lt;em&gt;bitwise&lt;/em&gt; operations on integral values, and they do not short-circuit.</source>
          <target state="translated">布尔表达式由 &lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt; 组成，用于逻辑AND， &lt;code&gt;||&lt;/code&gt; 。用于逻辑OR，和 &lt;code&gt;!&lt;/code&gt; 对于逻辑非。与Python中一样， &lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt; 和 &lt;code&gt;||&lt;/code&gt; 是短路的：他们仅在需要确定结果时评估右侧。请注意，关键字 &lt;code&gt;and&lt;/code&gt; 和 &lt;code&gt;or&lt;/code&gt; 也存在，但是它们仅对整数值执行&lt;em&gt;按位&lt;/em&gt;运算，并且不会短路。</target>
        </trans-unit>
        <trans-unit id="61a088b0a156000801673ebe9758a3bc5e658a93" translate="yes" xml:space="preserve">
          <source>BooleanArray</source>
          <target state="translated">BooleanArray</target>
        </trans-unit>
        <trans-unit id="94ed6ad64eddcf16d738b1b685887dc56574c0f0" translate="yes" xml:space="preserve">
          <source>BooleanIterator</source>
          <target state="translated">BooleanIterator</target>
        </trans-unit>
        <trans-unit id="a07abf481bfcf1e7306014f6c27bb8804d578197" translate="yes" xml:space="preserve">
          <source>BooleanVar</source>
          <target state="translated">BooleanVar</target>
        </trans-unit>
        <trans-unit id="590cf12042dbc6ae4ccebcc55f169cf10900e4f8" translate="yes" xml:space="preserve">
          <source>BooleanVarOf</source>
          <target state="translated">BooleanVarOf</target>
        </trans-unit>
        <trans-unit id="0786cdff946e6084c50bb7df6cacd8ed965599fa" translate="yes" xml:space="preserve">
          <source>Booleans</source>
          <target state="translated">Booleans</target>
        </trans-unit>
        <trans-unit id="2b4e4ca9dd13df33b1f274e08ff704dbb23d3e35" translate="yes" xml:space="preserve">
          <source>Booleans are boxed if a nullable reference is needed.</source>
          <target state="translated">如果需要可空引用,则将布尔值装箱。</target>
        </trans-unit>
        <trans-unit id="6a192a826b5af31fd1aa88b2c770d9045a0a1def" translate="yes" xml:space="preserve">
          <source>Both &lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines.channels/-channel.html&quot;&gt;Channel()&lt;/a&gt; factory function and &lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines.channels/produce.html&quot;&gt;produce&lt;/a&gt; builder take an optional &lt;code&gt;capacity&lt;/code&gt; parameter to specify &lt;em&gt;buffer size&lt;/em&gt;. Buffer allows senders to send multiple elements before suspending, similar to the &lt;code&gt;BlockingQueue&lt;/code&gt; with a specified capacity, which blocks when buffer is full.</source>
          <target state="translated">两个&lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines.channels/-channel.html&quot;&gt;信道（）&lt;/a&gt;工厂函数和&lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines.channels/produce.html&quot;&gt;产生&lt;/a&gt;助洗剂采取可选的 &lt;code&gt;capacity&lt;/code&gt; 参数来指定&lt;em&gt;缓冲区大小&lt;/em&gt;。缓冲区允许发送方在挂起之前发送多个元素，类似于具有指定容量的 &lt;code&gt;BlockingQueue&lt;/code&gt; ，该缓冲区在缓冲区已满时会阻塞。</target>
        </trans-unit>
        <trans-unit id="56678bcd37fdbd67057a57fd3f8c1ac179f5ab13" translate="yes" xml:space="preserve">
          <source>Both &lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/-job/join.html&quot;&gt;join&lt;/a&gt; and &lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/cancel-and-join.html&quot;&gt;cancelAndJoin&lt;/a&gt; wait for all finalization actions to complete, so the example above produces the following output:</source>
          <target state="translated">无论&lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/-job/join.html&quot;&gt;加入&lt;/a&gt;和&lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/cancel-and-join.html&quot;&gt;cancelAndJoin&lt;/a&gt;等待所有的完成动作来完成的，所以上面的例子产生下面的输出：</target>
        </trans-unit>
        <trans-unit id="aaa3ae0941c1c63e8404db11c2c5822ea8776ac1" translate="yes" xml:space="preserve">
          <source>Both &lt;a href=&quot;windowed#kotlin.collections%24windowed%28kotlin.collections.Iterable%28%28kotlin.collections.windowed.T%29%29%2C+kotlin.Int%2C+kotlin.Int%2C+kotlin.Boolean%29%2Fsize&quot;&gt;size&lt;/a&gt; and &lt;a href=&quot;windowed#kotlin.collections%24windowed%28kotlin.collections.Iterable%28%28kotlin.collections.windowed.T%29%29%2C+kotlin.Int%2C+kotlin.Int%2C+kotlin.Boolean%29%2Fstep&quot;&gt;step&lt;/a&gt; must be positive and can be greater than the number of elements in this collection.</source>
          <target state="translated">两者&lt;a href=&quot;windowed#kotlin.collections%24windowed%28kotlin.collections.Iterable%28%28kotlin.collections.windowed.T%29%29%2C+kotlin.Int%2C+kotlin.Int%2C+kotlin.Boolean%29%2Fsize&quot;&gt;大小&lt;/a&gt;和&lt;a href=&quot;windowed#kotlin.collections%24windowed%28kotlin.collections.Iterable%28%28kotlin.collections.windowed.T%29%29%2C+kotlin.Int%2C+kotlin.Int%2C+kotlin.Boolean%29%2Fstep&quot;&gt;步骤&lt;/a&gt;必须为正并且可以比这个集合中的元素的数量。</target>
        </trans-unit>
        <trans-unit id="084d0f42a2f1fd2b3233b8ecf6d5d045540a6653" translate="yes" xml:space="preserve">
          <source>Both &lt;a href=&quot;windowed#kotlin.collections%24windowed%28kotlin.collections.Iterable%28%28kotlin.collections.windowed.T%29%29%2C+kotlin.Int%2C+kotlin.Int%2C+kotlin.Boolean%2C+kotlin.Function1%28%28kotlin.collections.List%28%28kotlin.collections.windowed.T%29%29%2C+kotlin.collections.windowed.R%29%29%29%2Fsize&quot;&gt;size&lt;/a&gt; and &lt;a href=&quot;windowed#kotlin.collections%24windowed%28kotlin.collections.Iterable%28%28kotlin.collections.windowed.T%29%29%2C+kotlin.Int%2C+kotlin.Int%2C+kotlin.Boolean%2C+kotlin.Function1%28%28kotlin.collections.List%28%28kotlin.collections.windowed.T%29%29%2C+kotlin.collections.windowed.R%29%29%29%2Fstep&quot;&gt;step&lt;/a&gt; must be positive and can be greater than the number of elements in this collection.</source>
          <target state="translated">两者&lt;a href=&quot;windowed#kotlin.collections%24windowed%28kotlin.collections.Iterable%28%28kotlin.collections.windowed.T%29%29%2C+kotlin.Int%2C+kotlin.Int%2C+kotlin.Boolean%2C+kotlin.Function1%28%28kotlin.collections.List%28%28kotlin.collections.windowed.T%29%29%2C+kotlin.collections.windowed.R%29%29%29%2Fsize&quot;&gt;大小&lt;/a&gt;和&lt;a href=&quot;windowed#kotlin.collections%24windowed%28kotlin.collections.Iterable%28%28kotlin.collections.windowed.T%29%29%2C+kotlin.Int%2C+kotlin.Int%2C+kotlin.Boolean%2C+kotlin.Function1%28%28kotlin.collections.List%28%28kotlin.collections.windowed.T%29%29%2C+kotlin.collections.windowed.R%29%29%29%2Fstep&quot;&gt;步骤&lt;/a&gt;必须为正并且可以比这个集合中的元素的数量。</target>
        </trans-unit>
        <trans-unit id="d0eabf144d8023ff8f6b640fc08ef1af59ff52b1" translate="yes" xml:space="preserve">
          <source>Both &lt;a href=&quot;windowed#kotlin.collections%24windowed(kotlin.collections.Iterable((kotlin.collections.windowed.T)),%20kotlin.Int,%20kotlin.Int,%20kotlin.Boolean)/size&quot;&gt;size&lt;/a&gt; and &lt;a href=&quot;windowed#kotlin.collections%24windowed(kotlin.collections.Iterable((kotlin.collections.windowed.T)),%20kotlin.Int,%20kotlin.Int,%20kotlin.Boolean)/step&quot;&gt;step&lt;/a&gt; must be positive and can be greater than the number of elements in this collection.</source>
          <target state="translated">两者&lt;a href=&quot;windowed#kotlin.collections%24windowed(kotlin.collections.Iterable((kotlin.collections.windowed.T)),%20kotlin.Int,%20kotlin.Int,%20kotlin.Boolean)/size&quot;&gt;大小&lt;/a&gt;和&lt;a href=&quot;windowed#kotlin.collections%24windowed(kotlin.collections.Iterable((kotlin.collections.windowed.T)),%20kotlin.Int,%20kotlin.Int,%20kotlin.Boolean)/step&quot;&gt;步骤&lt;/a&gt;必须为正并且可以比这个集合中的元素的数量。</target>
        </trans-unit>
        <trans-unit id="0af0ae49c545b72fd3e3d56d5a9cc60d73808bcf" translate="yes" xml:space="preserve">
          <source>Both &lt;a href=&quot;windowed#kotlin.collections%24windowed(kotlin.collections.Iterable((kotlin.collections.windowed.T)),%20kotlin.Int,%20kotlin.Int,%20kotlin.Boolean,%20kotlin.Function1((kotlin.collections.List((kotlin.collections.windowed.T)),%20kotlin.collections.windowed.R)))/size&quot;&gt;size&lt;/a&gt; and &lt;a href=&quot;windowed#kotlin.collections%24windowed(kotlin.collections.Iterable((kotlin.collections.windowed.T)),%20kotlin.Int,%20kotlin.Int,%20kotlin.Boolean,%20kotlin.Function1((kotlin.collections.List((kotlin.collections.windowed.T)),%20kotlin.collections.windowed.R)))/step&quot;&gt;step&lt;/a&gt; must be positive and can be greater than the number of elements in this collection.</source>
          <target state="translated">两者&lt;a href=&quot;windowed#kotlin.collections%24windowed(kotlin.collections.Iterable((kotlin.collections.windowed.T)),%20kotlin.Int,%20kotlin.Int,%20kotlin.Boolean,%20kotlin.Function1((kotlin.collections.List((kotlin.collections.windowed.T)),%20kotlin.collections.windowed.R)))/size&quot;&gt;大小&lt;/a&gt;和&lt;a href=&quot;windowed#kotlin.collections%24windowed(kotlin.collections.Iterable((kotlin.collections.windowed.T)),%20kotlin.Int,%20kotlin.Int,%20kotlin.Boolean,%20kotlin.Function1((kotlin.collections.List((kotlin.collections.windowed.T)),%20kotlin.collections.windowed.R)))/step&quot;&gt;步骤&lt;/a&gt;必须为正并且可以比这个集合中的元素的数量。</target>
        </trans-unit>
        <trans-unit id="f0718785d7a21f217dfdae0e623137151eb06714" translate="yes" xml:space="preserve">
          <source>Both &lt;a href=&quot;windowed#kotlin.sequences%24windowed%28kotlin.sequences.Sequence%28%28kotlin.sequences.windowed.T%29%29%2C+kotlin.Int%2C+kotlin.Int%2C+kotlin.Boolean%29%2Fsize&quot;&gt;size&lt;/a&gt; and &lt;a href=&quot;windowed#kotlin.sequences%24windowed%28kotlin.sequences.Sequence%28%28kotlin.sequences.windowed.T%29%29%2C+kotlin.Int%2C+kotlin.Int%2C+kotlin.Boolean%29%2Fstep&quot;&gt;step&lt;/a&gt; must be positive and can be greater than the number of elements in this sequence.</source>
          <target state="translated">两者&lt;a href=&quot;windowed#kotlin.sequences%24windowed%28kotlin.sequences.Sequence%28%28kotlin.sequences.windowed.T%29%29%2C+kotlin.Int%2C+kotlin.Int%2C+kotlin.Boolean%29%2Fsize&quot;&gt;大小&lt;/a&gt;和&lt;a href=&quot;windowed#kotlin.sequences%24windowed%28kotlin.sequences.Sequence%28%28kotlin.sequences.windowed.T%29%29%2C+kotlin.Int%2C+kotlin.Int%2C+kotlin.Boolean%29%2Fstep&quot;&gt;步骤&lt;/a&gt;必须为正并且可以比在此序列元件的数量更大。</target>
        </trans-unit>
        <trans-unit id="e153c00b80d52af9d9d30cb6047f86b6a26f5f37" translate="yes" xml:space="preserve">
          <source>Both &lt;a href=&quot;windowed#kotlin.sequences%24windowed%28kotlin.sequences.Sequence%28%28kotlin.sequences.windowed.T%29%29%2C+kotlin.Int%2C+kotlin.Int%2C+kotlin.Boolean%2C+kotlin.Function1%28%28kotlin.collections.List%28%28kotlin.sequences.windowed.T%29%29%2C+kotlin.sequences.windowed.R%29%29%29%2Fsize&quot;&gt;size&lt;/a&gt; and &lt;a href=&quot;windowed#kotlin.sequences%24windowed%28kotlin.sequences.Sequence%28%28kotlin.sequences.windowed.T%29%29%2C+kotlin.Int%2C+kotlin.Int%2C+kotlin.Boolean%2C+kotlin.Function1%28%28kotlin.collections.List%28%28kotlin.sequences.windowed.T%29%29%2C+kotlin.sequences.windowed.R%29%29%29%2Fstep&quot;&gt;step&lt;/a&gt; must be positive and can be greater than the number of elements in this sequence.</source>
          <target state="translated">两者&lt;a href=&quot;windowed#kotlin.sequences%24windowed%28kotlin.sequences.Sequence%28%28kotlin.sequences.windowed.T%29%29%2C+kotlin.Int%2C+kotlin.Int%2C+kotlin.Boolean%2C+kotlin.Function1%28%28kotlin.collections.List%28%28kotlin.sequences.windowed.T%29%29%2C+kotlin.sequences.windowed.R%29%29%29%2Fsize&quot;&gt;大小&lt;/a&gt;和&lt;a href=&quot;windowed#kotlin.sequences%24windowed%28kotlin.sequences.Sequence%28%28kotlin.sequences.windowed.T%29%29%2C+kotlin.Int%2C+kotlin.Int%2C+kotlin.Boolean%2C+kotlin.Function1%28%28kotlin.collections.List%28%28kotlin.sequences.windowed.T%29%29%2C+kotlin.sequences.windowed.R%29%29%29%2Fstep&quot;&gt;步骤&lt;/a&gt;必须为正并且可以比在此序列元件的数量更大。</target>
        </trans-unit>
        <trans-unit id="d8ad1650acfe57bcad1b2d605f5d9abb55199c3d" translate="yes" xml:space="preserve">
          <source>Both &lt;a href=&quot;windowed#kotlin.sequences%24windowed(kotlin.sequences.Sequence((kotlin.sequences.windowed.T)),%20kotlin.Int,%20kotlin.Int,%20kotlin.Boolean)/size&quot;&gt;size&lt;/a&gt; and &lt;a href=&quot;windowed#kotlin.sequences%24windowed(kotlin.sequences.Sequence((kotlin.sequences.windowed.T)),%20kotlin.Int,%20kotlin.Int,%20kotlin.Boolean)/step&quot;&gt;step&lt;/a&gt; must be positive and can be greater than the number of elements in this sequence.</source>
          <target state="translated">两者&lt;a href=&quot;windowed#kotlin.sequences%24windowed(kotlin.sequences.Sequence((kotlin.sequences.windowed.T)),%20kotlin.Int,%20kotlin.Int,%20kotlin.Boolean)/size&quot;&gt;大小&lt;/a&gt;和&lt;a href=&quot;windowed#kotlin.sequences%24windowed(kotlin.sequences.Sequence((kotlin.sequences.windowed.T)),%20kotlin.Int,%20kotlin.Int,%20kotlin.Boolean)/step&quot;&gt;步骤&lt;/a&gt;必须为正并且可以比在此序列元件的数量更大。</target>
        </trans-unit>
        <trans-unit id="9771f55b53bc744e427d88f270d79d362084e7f4" translate="yes" xml:space="preserve">
          <source>Both &lt;a href=&quot;windowed#kotlin.sequences%24windowed(kotlin.sequences.Sequence((kotlin.sequences.windowed.T)),%20kotlin.Int,%20kotlin.Int,%20kotlin.Boolean,%20kotlin.Function1((kotlin.collections.List((kotlin.sequences.windowed.T)),%20kotlin.sequences.windowed.R)))/size&quot;&gt;size&lt;/a&gt; and &lt;a href=&quot;windowed#kotlin.sequences%24windowed(kotlin.sequences.Sequence((kotlin.sequences.windowed.T)),%20kotlin.Int,%20kotlin.Int,%20kotlin.Boolean,%20kotlin.Function1((kotlin.collections.List((kotlin.sequences.windowed.T)),%20kotlin.sequences.windowed.R)))/step&quot;&gt;step&lt;/a&gt; must be positive and can be greater than the number of elements in this sequence.</source>
          <target state="translated">两者&lt;a href=&quot;windowed#kotlin.sequences%24windowed(kotlin.sequences.Sequence((kotlin.sequences.windowed.T)),%20kotlin.Int,%20kotlin.Int,%20kotlin.Boolean,%20kotlin.Function1((kotlin.collections.List((kotlin.sequences.windowed.T)),%20kotlin.sequences.windowed.R)))/size&quot;&gt;大小&lt;/a&gt;和&lt;a href=&quot;windowed#kotlin.sequences%24windowed(kotlin.sequences.Sequence((kotlin.sequences.windowed.T)),%20kotlin.Int,%20kotlin.Int,%20kotlin.Boolean,%20kotlin.Function1((kotlin.collections.List((kotlin.sequences.windowed.T)),%20kotlin.sequences.windowed.R)))/step&quot;&gt;步骤&lt;/a&gt;必须为正并且可以比在此序列元件的数量更大。</target>
        </trans-unit>
        <trans-unit id="67539940f5aa420fb9707f75cbc306cea0396d84" translate="yes" xml:space="preserve">
          <source>Both &lt;a href=&quot;windowed#kotlin.text%24windowed%28kotlin.CharSequence%2C+kotlin.Int%2C+kotlin.Int%2C+kotlin.Boolean%29%2Fsize&quot;&gt;size&lt;/a&gt; and &lt;a href=&quot;windowed#kotlin.text%24windowed%28kotlin.CharSequence%2C+kotlin.Int%2C+kotlin.Int%2C+kotlin.Boolean%29%2Fstep&quot;&gt;step&lt;/a&gt; must be positive and can be greater than the number of elements in this char sequence.</source>
          <target state="translated">两者&lt;a href=&quot;windowed#kotlin.text%24windowed%28kotlin.CharSequence%2C+kotlin.Int%2C+kotlin.Int%2C+kotlin.Boolean%29%2Fsize&quot;&gt;大小&lt;/a&gt;和&lt;a href=&quot;windowed#kotlin.text%24windowed%28kotlin.CharSequence%2C+kotlin.Int%2C+kotlin.Int%2C+kotlin.Boolean%29%2Fstep&quot;&gt;步骤&lt;/a&gt;必须为正并且可以比在此字符序列中的元素数目。</target>
        </trans-unit>
        <trans-unit id="cbced784a4e4808737c5eb9216375acd25dc2730" translate="yes" xml:space="preserve">
          <source>Both &lt;a href=&quot;windowed#kotlin.text%24windowed%28kotlin.CharSequence%2C+kotlin.Int%2C+kotlin.Int%2C+kotlin.Boolean%2C+kotlin.Function1%28%28kotlin.CharSequence%2C+kotlin.text.windowed.R%29%29%29%2Fsize&quot;&gt;size&lt;/a&gt; and &lt;a href=&quot;windowed#kotlin.text%24windowed%28kotlin.CharSequence%2C+kotlin.Int%2C+kotlin.Int%2C+kotlin.Boolean%2C+kotlin.Function1%28%28kotlin.CharSequence%2C+kotlin.text.windowed.R%29%29%29%2Fstep&quot;&gt;step&lt;/a&gt; must be positive and can be greater than the number of elements in this char sequence.</source>
          <target state="translated">两者&lt;a href=&quot;windowed#kotlin.text%24windowed%28kotlin.CharSequence%2C+kotlin.Int%2C+kotlin.Int%2C+kotlin.Boolean%2C+kotlin.Function1%28%28kotlin.CharSequence%2C+kotlin.text.windowed.R%29%29%29%2Fsize&quot;&gt;大小&lt;/a&gt;和&lt;a href=&quot;windowed#kotlin.text%24windowed%28kotlin.CharSequence%2C+kotlin.Int%2C+kotlin.Int%2C+kotlin.Boolean%2C+kotlin.Function1%28%28kotlin.CharSequence%2C+kotlin.text.windowed.R%29%29%29%2Fstep&quot;&gt;步骤&lt;/a&gt;必须为正并且可以比在此字符序列中的元素数目。</target>
        </trans-unit>
        <trans-unit id="ab8e90c6489475f86d0d05c87a6bcb381c210ecd" translate="yes" xml:space="preserve">
          <source>Both &lt;a href=&quot;windowed#kotlin.text%24windowed(kotlin.CharSequence,%20kotlin.Int,%20kotlin.Int,%20kotlin.Boolean)/size&quot;&gt;size&lt;/a&gt; and &lt;a href=&quot;windowed#kotlin.text%24windowed(kotlin.CharSequence,%20kotlin.Int,%20kotlin.Int,%20kotlin.Boolean)/step&quot;&gt;step&lt;/a&gt; must be positive and can be greater than the number of elements in this char sequence.</source>
          <target state="translated">两者&lt;a href=&quot;windowed#kotlin.text%24windowed(kotlin.CharSequence,%20kotlin.Int,%20kotlin.Int,%20kotlin.Boolean)/size&quot;&gt;大小&lt;/a&gt;和&lt;a href=&quot;windowed#kotlin.text%24windowed(kotlin.CharSequence,%20kotlin.Int,%20kotlin.Int,%20kotlin.Boolean)/step&quot;&gt;步骤&lt;/a&gt;必须为正并且可以比在此字符序列中的元素数目。</target>
        </trans-unit>
        <trans-unit id="f2bea8d6b0fb22780d4bd290339057a8cfec7f97" translate="yes" xml:space="preserve">
          <source>Both &lt;a href=&quot;windowed#kotlin.text%24windowed(kotlin.CharSequence,%20kotlin.Int,%20kotlin.Int,%20kotlin.Boolean,%20kotlin.Function1((kotlin.CharSequence,%20kotlin.text.windowed.R)))/size&quot;&gt;size&lt;/a&gt; and &lt;a href=&quot;windowed#kotlin.text%24windowed(kotlin.CharSequence,%20kotlin.Int,%20kotlin.Int,%20kotlin.Boolean,%20kotlin.Function1((kotlin.CharSequence,%20kotlin.text.windowed.R)))/step&quot;&gt;step&lt;/a&gt; must be positive and can be greater than the number of elements in this char sequence.</source>
          <target state="translated">两者&lt;a href=&quot;windowed#kotlin.text%24windowed(kotlin.CharSequence,%20kotlin.Int,%20kotlin.Int,%20kotlin.Boolean,%20kotlin.Function1((kotlin.CharSequence,%20kotlin.text.windowed.R)))/size&quot;&gt;大小&lt;/a&gt;和&lt;a href=&quot;windowed#kotlin.text%24windowed(kotlin.CharSequence,%20kotlin.Int,%20kotlin.Int,%20kotlin.Boolean,%20kotlin.Function1((kotlin.CharSequence,%20kotlin.text.windowed.R)))/step&quot;&gt;步骤&lt;/a&gt;必须为正并且可以比在此字符序列中的元素数目。</target>
        </trans-unit>
        <trans-unit id="36b84c2b0b283f28a914a68615f6871a6a9ceceb" translate="yes" xml:space="preserve">
          <source>Both &lt;a href=&quot;windowed-sequence#kotlin.text%24windowedSequence%28kotlin.CharSequence%2C+kotlin.Int%2C+kotlin.Int%2C+kotlin.Boolean%29%2Fsize&quot;&gt;size&lt;/a&gt; and &lt;a href=&quot;windowed-sequence#kotlin.text%24windowedSequence%28kotlin.CharSequence%2C+kotlin.Int%2C+kotlin.Int%2C+kotlin.Boolean%29%2Fstep&quot;&gt;step&lt;/a&gt; must be positive and can be greater than the number of elements in this char sequence.</source>
          <target state="translated">两者&lt;a href=&quot;windowed-sequence#kotlin.text%24windowedSequence%28kotlin.CharSequence%2C+kotlin.Int%2C+kotlin.Int%2C+kotlin.Boolean%29%2Fsize&quot;&gt;大小&lt;/a&gt;和&lt;a href=&quot;windowed-sequence#kotlin.text%24windowedSequence%28kotlin.CharSequence%2C+kotlin.Int%2C+kotlin.Int%2C+kotlin.Boolean%29%2Fstep&quot;&gt;步骤&lt;/a&gt;必须为正并且可以比在此字符序列中的元素数目。</target>
        </trans-unit>
        <trans-unit id="f6aa8dd9910fba9b4cf6489eeeb8c66c8fc69e23" translate="yes" xml:space="preserve">
          <source>Both &lt;a href=&quot;windowed-sequence#kotlin.text%24windowedSequence%28kotlin.CharSequence%2C+kotlin.Int%2C+kotlin.Int%2C+kotlin.Boolean%2C+kotlin.Function1%28%28kotlin.CharSequence%2C+kotlin.text.windowedSequence.R%29%29%29%2Fsize&quot;&gt;size&lt;/a&gt; and &lt;a href=&quot;windowed-sequence#kotlin.text%24windowedSequence%28kotlin.CharSequence%2C+kotlin.Int%2C+kotlin.Int%2C+kotlin.Boolean%2C+kotlin.Function1%28%28kotlin.CharSequence%2C+kotlin.text.windowedSequence.R%29%29%29%2Fstep&quot;&gt;step&lt;/a&gt; must be positive and can be greater than the number of elements in this char sequence.</source>
          <target state="translated">两者&lt;a href=&quot;windowed-sequence#kotlin.text%24windowedSequence%28kotlin.CharSequence%2C+kotlin.Int%2C+kotlin.Int%2C+kotlin.Boolean%2C+kotlin.Function1%28%28kotlin.CharSequence%2C+kotlin.text.windowedSequence.R%29%29%29%2Fsize&quot;&gt;大小&lt;/a&gt;和&lt;a href=&quot;windowed-sequence#kotlin.text%24windowedSequence%28kotlin.CharSequence%2C+kotlin.Int%2C+kotlin.Int%2C+kotlin.Boolean%2C+kotlin.Function1%28%28kotlin.CharSequence%2C+kotlin.text.windowedSequence.R%29%29%29%2Fstep&quot;&gt;步骤&lt;/a&gt;必须为正并且可以比在此字符序列中的元素数目。</target>
        </trans-unit>
        <trans-unit id="c7cf261e95866f81c07fa4adbc9f77d8c40e7b20" translate="yes" xml:space="preserve">
          <source>Both &lt;a href=&quot;windowed-sequence#kotlin.text%24windowedSequence(kotlin.CharSequence,%20kotlin.Int,%20kotlin.Int,%20kotlin.Boolean)/size&quot;&gt;size&lt;/a&gt; and &lt;a href=&quot;windowed-sequence#kotlin.text%24windowedSequence(kotlin.CharSequence,%20kotlin.Int,%20kotlin.Int,%20kotlin.Boolean)/step&quot;&gt;step&lt;/a&gt; must be positive and can be greater than the number of elements in this char sequence.</source>
          <target state="translated">两者&lt;a href=&quot;windowed-sequence#kotlin.text%24windowedSequence(kotlin.CharSequence,%20kotlin.Int,%20kotlin.Int,%20kotlin.Boolean)/size&quot;&gt;大小&lt;/a&gt;和&lt;a href=&quot;windowed-sequence#kotlin.text%24windowedSequence(kotlin.CharSequence,%20kotlin.Int,%20kotlin.Int,%20kotlin.Boolean)/step&quot;&gt;步骤&lt;/a&gt;必须为正并且可以比在此字符序列中的元素数目。</target>
        </trans-unit>
        <trans-unit id="b33be4081d9d9107c78f1754dc20fc1c874f3478" translate="yes" xml:space="preserve">
          <source>Both &lt;a href=&quot;windowed-sequence#kotlin.text%24windowedSequence(kotlin.CharSequence,%20kotlin.Int,%20kotlin.Int,%20kotlin.Boolean,%20kotlin.Function1((kotlin.CharSequence,%20kotlin.text.windowedSequence.R)))/size&quot;&gt;size&lt;/a&gt; and &lt;a href=&quot;windowed-sequence#kotlin.text%24windowedSequence(kotlin.CharSequence,%20kotlin.Int,%20kotlin.Int,%20kotlin.Boolean,%20kotlin.Function1((kotlin.CharSequence,%20kotlin.text.windowedSequence.R)))/step&quot;&gt;step&lt;/a&gt; must be positive and can be greater than the number of elements in this char sequence.</source>
          <target state="translated">两者&lt;a href=&quot;windowed-sequence#kotlin.text%24windowedSequence(kotlin.CharSequence,%20kotlin.Int,%20kotlin.Int,%20kotlin.Boolean,%20kotlin.Function1((kotlin.CharSequence,%20kotlin.text.windowedSequence.R)))/size&quot;&gt;大小&lt;/a&gt;和&lt;a href=&quot;windowed-sequence#kotlin.text%24windowedSequence(kotlin.CharSequence,%20kotlin.Int,%20kotlin.Int,%20kotlin.Boolean,%20kotlin.Function1((kotlin.CharSequence,%20kotlin.text.windowedSequence.R)))/step&quot;&gt;步骤&lt;/a&gt;必须为正并且可以比在此字符序列中的元素数目。</target>
        </trans-unit>
        <trans-unit id="7d76727e25cbd1b3d5a88f50e15fcb2295a169f3" translate="yes" xml:space="preserve">
          <source>Both &lt;code&gt;kotlin-platform-native&lt;/code&gt; and &lt;code&gt;kotlin-multiplatform&lt;/code&gt; plugins automatically set up artifact publication when the &lt;code&gt;maven-publish&lt;/code&gt; plugin is applied. See details about publication at the &lt;a href=&quot;../building-mpp-with-gradle#publishing-a-multiplatform-library&quot;&gt;corresponding page&lt;/a&gt;. Note that currently only Kotlin/Native libraries (&lt;code&gt;*.klib&lt;/code&gt;) can be published for native targets.</source>
          <target state="translated">无论 &lt;code&gt;kotlin-platform-native&lt;/code&gt; 和 &lt;code&gt;kotlin-multiplatform&lt;/code&gt; 的插件的时候自动设置神器出版 &lt;code&gt;maven-publish&lt;/code&gt; 应用插件。在&lt;a href=&quot;../building-mpp-with-gradle#publishing-a-multiplatform-library&quot;&gt;相应页面上&lt;/a&gt;查看有关发布的详细信息。请注意，当前只能为本地目标发布Kotlin / Native库（ &lt;code&gt;*.klib&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="f9fb92b17ca6c1036361cb0bc273b8d539a33467" translate="yes" xml:space="preserve">
          <source>Both &lt;code&gt;put()&lt;/code&gt; and &lt;code&gt;putAll()&lt;/code&gt; overwrite the values if the given keys already exist in the map. Thus, you can use them to update values of map entries.</source>
          <target state="translated">如果给定键已存在于映射中，则 &lt;code&gt;put()&lt;/code&gt; 和 &lt;code&gt;putAll()&lt;/code&gt; 都将覆盖值。因此，您可以使用它们来更新地图条目的值。</target>
        </trans-unit>
        <trans-unit id="48a0c772d877c93acd537f9dd2917a2d330472b6" translate="yes" xml:space="preserve">
          <source>Both &lt;code&gt;run()&lt;/code&gt; and &lt;code&gt;let()&lt;/code&gt; are also useful if you've got an expression that you need to use multiple times, but you don't care to come up with a variable name for it and make a null check:</source>
          <target state="translated">两者 &lt;code&gt;run()&lt;/code&gt; 和 &lt;code&gt;let()&lt;/code&gt; 也是有用的，如果你已经得到了你需要使用多次的表达，但你不在乎拿出了它一个变量名，使空校验：</target>
        </trans-unit>
        <trans-unit id="f117f717287c089c5644336542c588b36df80762" translate="yes" xml:space="preserve">
          <source>Both comparator and comparison binary search can be performed for list ranges as well.</source>
          <target state="translated">对列表范围也可以进行比较器和比较二元搜索。</target>
        </trans-unit>
        <trans-unit id="a526106bb7b07bc95406f9258d87ca517b94f4f7" translate="yes" xml:space="preserve">
          <source>Both files &lt;code&gt;sample-library.js&lt;/code&gt; and &lt;code&gt;sample-library.meta.js&lt;/code&gt; should be present in the latter case, because translated JavaScript file contains meta-information about inlining, which is needed by compiler.</source>
          <target state="translated">这两个文件 &lt;code&gt;sample-library.js&lt;/code&gt; 和 &lt;code&gt;sample-library.meta.js&lt;/code&gt; 应存在于后者的情况下，因为翻译JavaScript文件包含有关内联元信息，这是由编译器需要的。</target>
        </trans-unit>
        <trans-unit id="c369edaa82ba26ca01871646d635daa8f7504cc8" translate="yes" xml:space="preserve">
          <source>Both of these print &lt;code&gt;-2147483648&lt;/code&gt;, because only the lower 32 bits of the &quot;real&quot; result are stored.</source>
          <target state="translated">这两个命令都打印 &lt;code&gt;-2147483648&lt;/code&gt; ，因为仅存储了&amp;ldquo;真实&amp;rdquo;结果的低32位。</target>
        </trans-unit>
        <trans-unit id="8e964469a13a77088460de8cf5eddab2a6f999cc" translate="yes" xml:space="preserve">
          <source>Both scratches and worksheets use the compiled versions of connected modules. So, if you modify a module's source files, the changes will propagate to scratches and worksheets when you rebuild the module. To rebuild the module automatically before each run of a scratch or a worksheet, select &lt;strong&gt;Make before Run&lt;/strong&gt;.</source>
          <target state="translated">暂存器和工作表都使用连接模块的编译版本。因此，如果您修改模块的源文件，则在重建模块时，更改将传播到暂存器和工作表中。要在每次运行草稿或工作表之前自动重建模块，&lt;strong&gt;请&lt;/strong&gt;选择&lt;strong&gt;&amp;ldquo;运行前制作&amp;rdquo;&lt;/strong&gt;。</target>
        </trans-unit>
        <trans-unit id="26aa585d7dfdc3090a2d9026c66329ae2663ea8a" translate="yes" xml:space="preserve">
          <source>Bound Class References (since 1.1)</source>
          <target state="translated">绑定类引用(自1.1起)</target>
        </trans-unit>
        <trans-unit id="d7e744f9846b986738e0816b29c63f14509b6745" translate="yes" xml:space="preserve">
          <source>Bound Function and Property References (since 1.1)</source>
          <target state="translated">绑定函数和属性引用(从1.1开始)。</target>
        </trans-unit>
        <trans-unit id="7b85b6504bf90c388faf780dc0b4dcabde2e43d2" translate="yes" xml:space="preserve">
          <source>Bound callable references</source>
          <target state="translated">绑定的可调用引用</target>
        </trans-unit>
        <trans-unit id="85989aa9e94909d737a99ce977c8f0524b5f104a" translate="yes" xml:space="preserve">
          <source>Bound class references (since 1.1)</source>
          <target state="translated">绑定类引用(从1.1开始)</target>
        </trans-unit>
        <trans-unit id="c1d763c06ba5611d707eeed031c4378440dc7fb3" translate="yes" xml:space="preserve">
          <source>Bound constructor references</source>
          <target state="translated">绑定构造函数引用</target>
        </trans-unit>
        <trans-unit id="17f0a15462df276172e8f66e25419c48cd9fc071" translate="yes" xml:space="preserve">
          <source>Bound function and property references (since 1.1)</source>
          <target state="translated">绑定函数和属性引用(从1.1开始)</target>
        </trans-unit>
        <trans-unit id="4b8b36c5403b746449d2c849c47bd500e35ca37c" translate="yes" xml:space="preserve">
          <source>BoxQuadOptions</source>
          <target state="translated">BoxQuadOptions</target>
        </trans-unit>
        <trans-unit id="5d13f522e9c8eabab2db0fea870c35c9728f8962" translate="yes" xml:space="preserve">
          <source>Break and Continue Labels</source>
          <target state="translated">休息和继续标签</target>
        </trans-unit>
        <trans-unit id="d43675deb5ef1628dcb32f38b7fd8e07e8b0fe63" translate="yes" xml:space="preserve">
          <source>Break and continue in loops</source>
          <target state="translated">断裂并继续循环</target>
        </trans-unit>
        <trans-unit id="04af83c573ed28bad405a1a5e0302494812d756c" translate="yes" xml:space="preserve">
          <source>Breaking change: consistent behavior of x.equals(null) for platform types</source>
          <target state="translated">突破性变化:平台类型的x.equals(null)行为一致。</target>
        </trans-unit>
        <trans-unit id="95c82e98e38ccf406578979623b36433169e3065" translate="yes" xml:space="preserve">
          <source>Breaking change: fix for platform null escaping through an inlined extension receiver</source>
          <target state="translated">突破性变化:修复了通过内嵌式扩展接收器逃避平台空值的问题。</target>
        </trans-unit>
        <trans-unit id="0010a4c886f7138072d6a665dfc42b5efd885875" translate="yes" xml:space="preserve">
          <source>Breaking change: sound smart casts after try blocks</source>
          <target state="translated">突破性的改变:试块后的声音智能投稿</target>
        </trans-unit>
        <trans-unit id="21a8752f2df54d656b09cd2a499cb3a3403ec7ca" translate="yes" xml:space="preserve">
          <source>Breakpoints</source>
          <target state="translated">Breakpoints</target>
        </trans-unit>
        <trans-unit id="58a6acc8a3a172fc6d1c2687109f35019caa5d29" translate="yes" xml:space="preserve">
          <source>Bridging blocking and non-blocking worlds</source>
          <target state="translated">衔接阻塞和非阻塞的世界</target>
        </trans-unit>
        <trans-unit id="54a2cf5e634dbba0be2bf8a55f79252f5c790bdb" translate="yes" xml:space="preserve">
          <source>Browser</source>
          <target state="translated">Browser</target>
        </trans-unit>
        <trans-unit id="7475c559f920cf3e8c2289d36e877291196e4b98" translate="yes" xml:space="preserve">
          <source>Browser API and the DOM</source>
          <target state="translated">浏览器API和DOM</target>
        </trans-unit>
        <trans-unit id="0f0720a9ad7435d6e8488870e634845859b31b99" translate="yes" xml:space="preserve">
          <source>Browser for client-side scripting in browsers</source>
          <target state="translated">浏览器中客户端脚本的浏览器</target>
        </trans-unit>
        <trans-unit id="b2d0e321b1372a3d7d7a8f0627418b38b02bf979" translate="yes" xml:space="preserve">
          <source>Bruce Eckel says about checked exceptions:</source>
          <target state="translated">Bruce Eckel说,关于检查的例外。</target>
        </trans-unit>
        <trans-unit id="c65e509230cb6459a020ee1e8509f0e4b332c107" translate="yes" xml:space="preserve">
          <source>Bruce Eckel says in &lt;a href=&quot;http://www.mindview.net/Etc/Discussions/CheckedExceptions&quot;&gt;Does Java need Checked Exceptions?&lt;/a&gt;:</source>
          <target state="translated">Bruce Eckel在&lt;a href=&quot;http://www.mindview.net/Etc/Discussions/CheckedExceptions&quot;&gt;Java是否需要检查异常中说？&lt;/a&gt;：</target>
        </trans-unit>
        <trans-unit id="8f18995239d394ba2c3e058f972459a83f3ee77b" translate="yes" xml:space="preserve">
          <source>BufferDataSource</source>
          <target state="translated">BufferDataSource</target>
        </trans-unit>
        <trans-unit id="7c439368b22bd9105160b523a76b1a5ac5f2d39e" translate="yes" xml:space="preserve">
          <source>Buffered channels</source>
          <target state="translated">缓冲通道</target>
        </trans-unit>
        <trans-unit id="23dd82d623fb976c8b655f70d02fd824c2106844" translate="yes" xml:space="preserve">
          <source>Buffering</source>
          <target state="translated">Buffering</target>
        </trans-unit>
        <trans-unit id="a2b034739fd2e5a6c3bf82c41ca659443bdf5bf6" translate="yes" xml:space="preserve">
          <source>Build final native binaries</source>
          <target state="translated">建立最终的本地二进制文件</target>
        </trans-unit>
        <trans-unit id="8caa35ead5cecc9e1f6a05e08148fc823defe29b" translate="yes" xml:space="preserve">
          <source>Build the code by clicking &lt;strong&gt;Build Project&lt;/strong&gt;.</source>
          <target state="translated">通过单击&lt;strong&gt;Build Project&lt;/strong&gt;来&lt;strong&gt;构建&lt;/strong&gt;代码。</target>
        </trans-unit>
        <trans-unit id="96c01304c46a6b11e05e7adffcd1bcc3b5093805" translate="yes" xml:space="preserve">
          <source>Build universal frameworks</source>
          <target state="translated">建立通用框架</target>
        </trans-unit>
        <trans-unit id="4d7e3d8248b285fabf4d3ba1bb2e29ec395538fa" translate="yes" xml:space="preserve">
          <source>Builder for a &lt;a href=&quot;../../kotlin.sequences/-sequence/index&quot;&gt;Sequence&lt;/a&gt; or an &lt;a href=&quot;../../kotlin.collections/-iterator/index#kotlin.collections.Iterator&quot;&gt;Iterator&lt;/a&gt;, provides &lt;a href=&quot;../../kotlin.coroutines.experimental/-sequence-builder/yield&quot;&gt;yield&lt;/a&gt; and &lt;a href=&quot;../../kotlin.coroutines.experimental/-sequence-builder/yield-all&quot;&gt;yieldAll&lt;/a&gt; suspension functions.</source>
          <target state="translated">&lt;a href=&quot;../../kotlin.sequences/-sequence/index&quot;&gt;Sequence&lt;/a&gt;或&lt;a href=&quot;../../kotlin.collections/-iterator/index#kotlin.collections.Iterator&quot;&gt;Iterator的&lt;/a&gt;生成器，提供&lt;a href=&quot;../../kotlin.coroutines.experimental/-sequence-builder/yield&quot;&gt;yield&lt;/a&gt;和&lt;a href=&quot;../../kotlin.coroutines.experimental/-sequence-builder/yield-all&quot;&gt;yieldAll&lt;/a&gt;暂停函数。</target>
        </trans-unit>
        <trans-unit id="9afd64c1688d7dd0ee5eb541287de8d42f18fdac" translate="yes" xml:space="preserve">
          <source>Builder for a &lt;a href=&quot;../../kotlin.sequences/-sequence/index&quot;&gt;Sequence&lt;/a&gt; or an &lt;a href=&quot;../../kotlin.collections/-iterator/index#kotlin.collections.Iterator&quot;&gt;Iterator&lt;/a&gt;, provides &lt;a href=&quot;yield&quot;&gt;yield&lt;/a&gt; and &lt;a href=&quot;yield-all&quot;&gt;yieldAll&lt;/a&gt; suspension functions.</source>
          <target state="translated">&lt;a href=&quot;../../kotlin.sequences/-sequence/index&quot;&gt;Sequence&lt;/a&gt;或&lt;a href=&quot;../../kotlin.collections/-iterator/index#kotlin.collections.Iterator&quot;&gt;Iterator的&lt;/a&gt;生成器，提供&lt;a href=&quot;yield&quot;&gt;yield&lt;/a&gt;和&lt;a href=&quot;yield-all&quot;&gt;yieldAll&lt;/a&gt;暂停函数。</target>
        </trans-unit>
        <trans-unit id="026aff5308e9d22f7a4347477af6718bf43f8f8e" translate="yes" xml:space="preserve">
          <source>Builder for a &lt;a href=&quot;../kotlin.sequences/-sequence/index&quot;&gt;Sequence&lt;/a&gt; or an &lt;a href=&quot;../kotlin.collections/-iterator/index#kotlin.collections.Iterator&quot;&gt;Iterator&lt;/a&gt;, provides &lt;a href=&quot;-sequence-builder/yield&quot;&gt;yield&lt;/a&gt; and &lt;a href=&quot;-sequence-builder/yield-all&quot;&gt;yieldAll&lt;/a&gt; suspension functions.</source>
          <target state="translated">&lt;a href=&quot;../kotlin.sequences/-sequence/index&quot;&gt;Sequence&lt;/a&gt;或&lt;a href=&quot;../kotlin.collections/-iterator/index#kotlin.collections.Iterator&quot;&gt;Iterator的&lt;/a&gt;生成器，提供&lt;a href=&quot;-sequence-builder/yield&quot;&gt;yield&lt;/a&gt;和&lt;a href=&quot;-sequence-builder/yield-all&quot;&gt;yieldAll&lt;/a&gt;暂停函数。</target>
        </trans-unit>
        <trans-unit id="36be580e9634e896d771820f9a331961f506fb4f" translate="yes" xml:space="preserve">
          <source>Builder inference with non-nested recursive constraints</source>
          <target state="translated">具有非嵌套递归约束的生成器推理。</target>
        </trans-unit>
        <trans-unit id="74fa65e782a73e12d9efad27fd48f933ef1a66ba" translate="yes" xml:space="preserve">
          <source>Builder-style usage of methods that return &lt;code&gt;Unit&lt;/code&gt;</source>
          <target state="translated">返回 &lt;code&gt;Unit&lt;/code&gt; 的方法的生成器样式用法</target>
        </trans-unit>
        <trans-unit id="4f75eae01b3871647125ffb7e5f534fa945932c0" translate="yes" xml:space="preserve">
          <source>BuilderInference</source>
          <target state="translated">BuilderInference</target>
        </trans-unit>
        <trans-unit id="8e1df15ede6103768476e38443a4cea475658893" translate="yes" xml:space="preserve">
          <source>Building Kotlin Multiplatform Projects</source>
          <target state="translated">构建Kotlin多平台项目</target>
        </trans-unit>
        <trans-unit id="52a49620e7d4a68e1a7b4934e6a2535a838bcfba" translate="yes" xml:space="preserve">
          <source>Building Multiplatform Projects with Gradle</source>
          <target state="translated">用Gradle构建多平台项目</target>
        </trans-unit>
        <trans-unit id="29d2e0ac69bee3e3a9008eab80d76ad558d8182c" translate="yes" xml:space="preserve">
          <source>Building a target requires compiling Kotlin once or multiple times. Each Kotlin compilation of a target may serve a different purpose (e.g. production code, tests) and incorporate different &lt;a href=&quot;#configuring-source-sets&quot;&gt;source sets&lt;/a&gt;. The compilations of a target may be accessed in the DSL, for example, to get the tasks, configure &lt;a href=&quot;using-gradle#compiler-options&quot;&gt;the Kotlin compiler options&lt;/a&gt; or get the dependency files and compilation outputs:</source>
          <target state="translated">建立目标需要一次或多次编译Kotlin。目标的每个Kotlin编译可用于不同的目的（例如，生产代码，测试），并包含不同的&lt;a href=&quot;#configuring-source-sets&quot;&gt;源集&lt;/a&gt;。可以在DSL中访问目标的编译，例如，以获取任务，配置&lt;a href=&quot;using-gradle#compiler-options&quot;&gt;Kotlin编译器选项&lt;/a&gt;或获取依赖文件和编译输出：</target>
        </trans-unit>
        <trans-unit id="e49a7ea18a2e71986e311061334985bdf1840d33" translate="yes" xml:space="preserve">
          <source>Building and running the application</source>
          <target state="translated">建立和运行应用程序</target>
        </trans-unit>
        <trans-unit id="9d4aaba95715014b5a62cfbfad19c855e1d5d6de" translate="yes" xml:space="preserve">
          <source>Building channel producers</source>
          <target state="translated">建立渠道生产商</target>
        </trans-unit>
        <trans-unit id="df07ae53e27f81198e41d13111e7b0f893c0314e" translate="yes" xml:space="preserve">
          <source>Building each target involves compiling Kotlin sources once or multiple times. In other words, a target may have one or more &lt;a href=&quot;#configuring-compilations&quot;&gt;compilations&lt;/a&gt;. For example, one compilation for production sources, the other for tests.</source>
          <target state="translated">建立每个目标涉及一次或多次编译Kotlin源。换句话说，目标可能具有一个或多个&lt;a href=&quot;#configuring-compilations&quot;&gt;编译&lt;/a&gt;。例如，一个用于生产源的编译，另一个用于测试。</target>
        </trans-unit>
        <trans-unit id="b7c6bfdc6d8cd0cdba5e5c067b8cc97916e2d518" translate="yes" xml:space="preserve">
          <source>Building final native binaries</source>
          <target state="translated">建立最终的本地二进制文件</target>
        </trans-unit>
        <trans-unit id="5e709ee9ec70ae35cbab41086a9a6fc112fdc7fe" translate="yes" xml:space="preserve">
          <source>Building the project</source>
          <target state="translated">建设项目</target>
        </trans-unit>
        <trans-unit id="623b2701cf5e32e580a01afa293e0ee5cc7757cd" translate="yes" xml:space="preserve">
          <source>Building universal frameworks</source>
          <target state="translated">建立通用框架</target>
        </trans-unit>
        <trans-unit id="7dcb14b38faee04cddfaa60e935edb23af9abf88" translate="yes" xml:space="preserve">
          <source>Builds a &lt;a href=&quot;-sequence/index&quot;&gt;Sequence&lt;/a&gt; lazily yielding values one by one.</source>
          <target state="translated">延迟生成一个&lt;a href=&quot;-sequence/index&quot;&gt;序列，&lt;/a&gt;一个序列一个值地生成值。</target>
        </trans-unit>
        <trans-unit id="60c09d8d72282ae2ff6808742ac433ed965bbc49" translate="yes" xml:space="preserve">
          <source>Builds a &lt;a href=&quot;../kotlin.sequences/-sequence/index&quot;&gt;Sequence&lt;/a&gt; lazily yielding values one by one.</source>
          <target state="translated">延迟生成一个&lt;a href=&quot;../kotlin.sequences/-sequence/index&quot;&gt;序列，&lt;/a&gt;一个序列一个值地生成值。</target>
        </trans-unit>
        <trans-unit id="5c259a4879a1b60d577a4d4830ba75ce2a10c992" translate="yes" xml:space="preserve">
          <source>Builds a new read-only &lt;a href=&quot;-list/index#kotlin.collections.List&quot;&gt;List&lt;/a&gt; by populating a &lt;a href=&quot;-mutable-list/index#kotlin.collections.MutableList&quot;&gt;MutableList&lt;/a&gt; using the given &lt;a href=&quot;build-list#kotlin.collections%24buildList(kotlin.Function1((kotlin.collections.MutableList((kotlin.collections.buildList.E)),%20kotlin.Unit)))/builderAction&quot;&gt;builderAction&lt;/a&gt; and returning a read-only list with the same elements.</source>
          <target state="translated">构建一个新的只读&lt;a href=&quot;-list/index#kotlin.collections.List&quot;&gt;目录&lt;/a&gt;通过填充一个&lt;a href=&quot;-mutable-list/index#kotlin.collections.MutableList&quot;&gt;MutableList&lt;/a&gt;使用给定&lt;a href=&quot;build-list#kotlin.collections%24buildList(kotlin.Function1((kotlin.collections.MutableList((kotlin.collections.buildList.E)),%20kotlin.Unit)))/builderAction&quot;&gt;builderAction&lt;/a&gt;，并传回相同的元素一个只读列表。</target>
        </trans-unit>
        <trans-unit id="c310bceb0b05e6ecf3254a3a32180b92a7a1ffc4" translate="yes" xml:space="preserve">
          <source>Builds a new read-only &lt;a href=&quot;-list/index#kotlin.collections.List&quot;&gt;List&lt;/a&gt; by populating a &lt;a href=&quot;-mutable-list/index#kotlin.collections.MutableList&quot;&gt;MutableList&lt;/a&gt; using the given &lt;a href=&quot;build-list#kotlin.collections%24buildList(kotlin.Int,%20kotlin.Function1((kotlin.collections.MutableList((kotlin.collections.buildList.E)),%20kotlin.Unit)))/builderAction&quot;&gt;builderAction&lt;/a&gt; and returning a read-only list with the same elements.</source>
          <target state="translated">构建一个新的只读&lt;a href=&quot;-list/index#kotlin.collections.List&quot;&gt;目录&lt;/a&gt;通过填充一个&lt;a href=&quot;-mutable-list/index#kotlin.collections.MutableList&quot;&gt;MutableList&lt;/a&gt;使用给定&lt;a href=&quot;build-list#kotlin.collections%24buildList(kotlin.Int,%20kotlin.Function1((kotlin.collections.MutableList((kotlin.collections.buildList.E)),%20kotlin.Unit)))/builderAction&quot;&gt;builderAction&lt;/a&gt;，并传回相同的元素一个只读列表。</target>
        </trans-unit>
        <trans-unit id="9eda9f8a1ecf86e247a64f52482f39aefb83eff5" translate="yes" xml:space="preserve">
          <source>Builds a new read-only &lt;a href=&quot;-map/index#kotlin.collections.Map&quot;&gt;Map&lt;/a&gt; by populating a &lt;a href=&quot;-mutable-map/index#kotlin.collections.MutableMap&quot;&gt;MutableMap&lt;/a&gt; using the given &lt;a href=&quot;build-map#kotlin.collections%24buildMap(kotlin.Function1((kotlin.collections.MutableMap((kotlin.collections.buildMap.K,%20kotlin.collections.buildMap.V)),%20kotlin.Unit)))/builderAction&quot;&gt;builderAction&lt;/a&gt; and returning a read-only map with the same key-value pairs.</source>
          <target state="translated">构建一个新的只读&lt;a href=&quot;-map/index#kotlin.collections.Map&quot;&gt;地图&lt;/a&gt;通过填充一个&lt;a href=&quot;-mutable-map/index#kotlin.collections.MutableMap&quot;&gt;MutableMap&lt;/a&gt;使用给定&lt;a href=&quot;build-map#kotlin.collections%24buildMap(kotlin.Function1((kotlin.collections.MutableMap((kotlin.collections.buildMap.K,%20kotlin.collections.buildMap.V)),%20kotlin.Unit)))/builderAction&quot;&gt;builderAction&lt;/a&gt;并返回一个只读使用相同的键值对映射。</target>
        </trans-unit>
        <trans-unit id="20c8e454ff638ffa025dc9e2118942582c3a3a0d" translate="yes" xml:space="preserve">
          <source>Builds a new read-only &lt;a href=&quot;-map/index#kotlin.collections.Map&quot;&gt;Map&lt;/a&gt; by populating a &lt;a href=&quot;-mutable-map/index#kotlin.collections.MutableMap&quot;&gt;MutableMap&lt;/a&gt; using the given &lt;a href=&quot;build-map#kotlin.collections%24buildMap(kotlin.Int,%20kotlin.Function1((kotlin.collections.MutableMap((kotlin.collections.buildMap.K,%20kotlin.collections.buildMap.V)),%20kotlin.Unit)))/builderAction&quot;&gt;builderAction&lt;/a&gt; and returning a read-only map with the same key-value pairs.</source>
          <target state="translated">构建一个新的只读&lt;a href=&quot;-map/index#kotlin.collections.Map&quot;&gt;地图&lt;/a&gt;通过填充一个&lt;a href=&quot;-mutable-map/index#kotlin.collections.MutableMap&quot;&gt;MutableMap&lt;/a&gt;使用给定&lt;a href=&quot;build-map#kotlin.collections%24buildMap(kotlin.Int,%20kotlin.Function1((kotlin.collections.MutableMap((kotlin.collections.buildMap.K,%20kotlin.collections.buildMap.V)),%20kotlin.Unit)))/builderAction&quot;&gt;builderAction&lt;/a&gt;并返回一个只读使用相同的键值对映射。</target>
        </trans-unit>
        <trans-unit id="ee6309e22d6f84961af8f11bfaea49a7c4265dbb" translate="yes" xml:space="preserve">
          <source>Builds a new read-only &lt;a href=&quot;-set/index#kotlin.collections.Set&quot;&gt;Set&lt;/a&gt; by populating a &lt;a href=&quot;-mutable-set/index#kotlin.collections.MutableSet&quot;&gt;MutableSet&lt;/a&gt; using the given &lt;a href=&quot;build-set#kotlin.collections%24buildSet(kotlin.Function1((kotlin.collections.MutableSet((kotlin.collections.buildSet.E)),%20kotlin.Unit)))/builderAction&quot;&gt;builderAction&lt;/a&gt; and returning a read-only set with the same elements.</source>
          <target state="translated">构建一个新的只读&lt;a href=&quot;-set/index#kotlin.collections.Set&quot;&gt;设置&lt;/a&gt;由填充一个&lt;a href=&quot;-mutable-set/index#kotlin.collections.MutableSet&quot;&gt;MutableSet&lt;/a&gt;使用给定&lt;a href=&quot;build-set#kotlin.collections%24buildSet(kotlin.Function1((kotlin.collections.MutableSet((kotlin.collections.buildSet.E)),%20kotlin.Unit)))/builderAction&quot;&gt;builderAction&lt;/a&gt;并返回一个只读设定相同的元素。</target>
        </trans-unit>
        <trans-unit id="0d68481fd2f698e039bc90883900f4ba075c709b" translate="yes" xml:space="preserve">
          <source>Builds a new read-only &lt;a href=&quot;-set/index#kotlin.collections.Set&quot;&gt;Set&lt;/a&gt; by populating a &lt;a href=&quot;-mutable-set/index#kotlin.collections.MutableSet&quot;&gt;MutableSet&lt;/a&gt; using the given &lt;a href=&quot;build-set#kotlin.collections%24buildSet(kotlin.Int,%20kotlin.Function1((kotlin.collections.MutableSet((kotlin.collections.buildSet.E)),%20kotlin.Unit)))/builderAction&quot;&gt;builderAction&lt;/a&gt; and returning a read-only set with the same elements.</source>
          <target state="translated">构建一个新的只读&lt;a href=&quot;-set/index#kotlin.collections.Set&quot;&gt;设置&lt;/a&gt;由填充一个&lt;a href=&quot;-mutable-set/index#kotlin.collections.MutableSet&quot;&gt;MutableSet&lt;/a&gt;使用给定&lt;a href=&quot;build-set#kotlin.collections%24buildSet(kotlin.Int,%20kotlin.Function1((kotlin.collections.MutableSet((kotlin.collections.buildSet.E)),%20kotlin.Unit)))/builderAction&quot;&gt;builderAction&lt;/a&gt;并返回一个只读设定相同的元素。</target>
        </trans-unit>
        <trans-unit id="c3321f7c232f47c1e35280ba87c98d1999d1ccb0" translate="yes" xml:space="preserve">
          <source>Builds an &lt;a href=&quot;../kotlin.collections/-iterator/index#kotlin.collections.Iterator&quot;&gt;Iterator&lt;/a&gt; lazily yielding values one by one.</source>
          <target state="translated">延迟构建一个&lt;a href=&quot;../kotlin.collections/-iterator/index#kotlin.collections.Iterator&quot;&gt;Iterator迭代&lt;/a&gt;生成值。</target>
        </trans-unit>
        <trans-unit id="d5fa78f424d01a27d2f2abd602c868f2a2b0676c" translate="yes" xml:space="preserve">
          <source>Builds new string by populating newly created &lt;a href=&quot;-string-builder/index#kotlin.text.StringBuilder&quot;&gt;StringBuilder&lt;/a&gt; initialized with the given &lt;a href=&quot;build-string#kotlin.text%24buildString%28kotlin.Int%2C+kotlin.Function1%28%28kotlin.text.StringBuilder%2C+kotlin.Unit%29%29%29%2Fcapacity&quot;&gt;capacity&lt;/a&gt; using provided &lt;a href=&quot;build-string#kotlin.text%24buildString%28kotlin.Int%2C+kotlin.Function1%28%28kotlin.text.StringBuilder%2C+kotlin.Unit%29%29%29%2FbuilderAction&quot;&gt;builderAction&lt;/a&gt; and then converting it to &lt;a href=&quot;../kotlin/-string/index#kotlin.String&quot;&gt;String&lt;/a&gt;.</source>
          <target state="translated">通过使用提供的&lt;a href=&quot;build-string#kotlin.text%24buildString%28kotlin.Int%2C+kotlin.Function1%28%28kotlin.text.StringBuilder%2C+kotlin.Unit%29%29%29%2FbuilderAction&quot;&gt;builderAction填充&lt;/a&gt;以给定&lt;a href=&quot;build-string#kotlin.text%24buildString%28kotlin.Int%2C+kotlin.Function1%28%28kotlin.text.StringBuilder%2C+kotlin.Unit%29%29%29%2Fcapacity&quot;&gt;容量&lt;/a&gt;初始化的新创建的&lt;a href=&quot;-string-builder/index#kotlin.text.StringBuilder&quot;&gt;StringBuilder来&lt;/a&gt;构建新字符串，然后将其转换为&lt;a href=&quot;../kotlin/-string/index#kotlin.String&quot;&gt;String&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="5b36e9184915e981f4e153b45acf1a5010f63351" translate="yes" xml:space="preserve">
          <source>Builds new string by populating newly created &lt;a href=&quot;-string-builder/index#kotlin.text.StringBuilder&quot;&gt;StringBuilder&lt;/a&gt; initialized with the given &lt;a href=&quot;build-string#kotlin.text%24buildString(kotlin.Int,%20kotlin.Function1((kotlin.text.StringBuilder,%20kotlin.Unit)))/capacity&quot;&gt;capacity&lt;/a&gt; using provided &lt;a href=&quot;build-string#kotlin.text%24buildString(kotlin.Int,%20kotlin.Function1((kotlin.text.StringBuilder,%20kotlin.Unit)))/builderAction&quot;&gt;builderAction&lt;/a&gt; and then converting it to &lt;a href=&quot;../kotlin/-string/index#kotlin.String&quot;&gt;String&lt;/a&gt;.</source>
          <target state="translated">通过使用提供的&lt;a href=&quot;build-string#kotlin.text%24buildString(kotlin.Int,%20kotlin.Function1((kotlin.text.StringBuilder,%20kotlin.Unit)))/builderAction&quot;&gt;builderAction填充&lt;/a&gt;以给定&lt;a href=&quot;build-string#kotlin.text%24buildString(kotlin.Int,%20kotlin.Function1((kotlin.text.StringBuilder,%20kotlin.Unit)))/capacity&quot;&gt;容量&lt;/a&gt;初始化的，新创建的&lt;a href=&quot;-string-builder/index#kotlin.text.StringBuilder&quot;&gt;StringBuilder来&lt;/a&gt;构建新字符串，然后将其转换为&lt;a href=&quot;../kotlin/-string/index#kotlin.String&quot;&gt;String&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="2177c869da3da0786344d6fbb7b625c917d754f4" translate="yes" xml:space="preserve">
          <source>Builds new string by populating newly created &lt;a href=&quot;-string-builder/index#kotlin.text.StringBuilder&quot;&gt;StringBuilder&lt;/a&gt; using provided &lt;a href=&quot;build-string#kotlin.text%24buildString%28kotlin.Function1%28%28kotlin.text.StringBuilder%2C+kotlin.Unit%29%29%29%2FbuilderAction&quot;&gt;builderAction&lt;/a&gt; and then converting it to &lt;a href=&quot;../kotlin/-string/index#kotlin.String&quot;&gt;String&lt;/a&gt;.</source>
          <target state="translated">通过使用提供的&lt;a href=&quot;build-string#kotlin.text%24buildString%28kotlin.Function1%28%28kotlin.text.StringBuilder%2C+kotlin.Unit%29%29%29%2FbuilderAction&quot;&gt;builderAction&lt;/a&gt;填充新创建的&lt;a href=&quot;-string-builder/index#kotlin.text.StringBuilder&quot;&gt;StringBuilder&lt;/a&gt;并将其转换为&lt;a href=&quot;../kotlin/-string/index#kotlin.String&quot;&gt;String&lt;/a&gt;来构建新字符串。</target>
        </trans-unit>
        <trans-unit id="fde4fd7cc2f74c0e17a9b96c27d4db226471d02b" translate="yes" xml:space="preserve">
          <source>Builds new string by populating newly created &lt;a href=&quot;-string-builder/index#kotlin.text.StringBuilder&quot;&gt;StringBuilder&lt;/a&gt; using provided &lt;a href=&quot;build-string#kotlin.text%24buildString(kotlin.Function1((kotlin.text.StringBuilder,%20kotlin.Unit)))/builderAction&quot;&gt;builderAction&lt;/a&gt; and then converting it to &lt;a href=&quot;../kotlin/-string/index#kotlin.String&quot;&gt;String&lt;/a&gt;.</source>
          <target state="translated">通过使用提供的&lt;a href=&quot;build-string#kotlin.text%24buildString(kotlin.Function1((kotlin.text.StringBuilder,%20kotlin.Unit)))/builderAction&quot;&gt;builderAction&lt;/a&gt;填充新创建的&lt;a href=&quot;-string-builder/index#kotlin.text.StringBuilder&quot;&gt;StringBuilder&lt;/a&gt;并将其转换为&lt;a href=&quot;../kotlin/-string/index#kotlin.String&quot;&gt;String&lt;/a&gt;来构建新字符串。</target>
        </trans-unit>
        <trans-unit id="bed258e5dc6c32d5eff629fad90cc90960dc9445" translate="yes" xml:space="preserve">
          <source>Built-in operations on booleans include</source>
          <target state="translated">对booleans的内置操作包括</target>
        </trans-unit>
        <trans-unit id="47f3eaf9e71c91ab96d58774f250474e1243fc32" translate="yes" xml:space="preserve">
          <source>But as you remember, our API converts byte arrays to byte arrays in a different format and it is not easy to test byte arrays. So before we start writing a test, let's add the method &lt;code&gt;encodeToString&lt;/code&gt; with a default implementation to our &lt;code&gt;Base64Encoder&lt;/code&gt; interface:</source>
          <target state="translated">但是请记住，我们的API将字节数组转换为其他格式的字节数组，并且测试字节数组并不容易。因此，在开始编写测试之前，让我们将带有默认实现的 &lt;code&gt;encodeToString&lt;/code&gt; 方法添加到 &lt;code&gt;Base64Encoder&lt;/code&gt; 接口中：</target>
        </trans-unit>
        <trans-unit id="6ed1ed74378c3be12bd20a7ee1d2d62f25fc3101" translate="yes" xml:space="preserve">
          <source>But how can code of the emitter encapsulate its exception handling behavior?</source>
          <target state="translated">但发射器的代码如何封装其异常处理行为呢?</target>
        </trans-unit>
        <trans-unit id="46671e900bf9c5370c122e9fbedf49a147fc9abb" translate="yes" xml:space="preserve">
          <source>But if the function the lambda is passed to is inlined, the return can be inlined as well, so it is allowed:</source>
          <target state="translated">但是如果传递给lambda的函数是内联的,那么返回也可以是内联的,所以是允许的。</target>
        </trans-unit>
        <trans-unit id="469a3ab76d91dc23561b9c2dd2b6f73190861246" translate="yes" xml:space="preserve">
          <source>But if the parameters may be inferred, e.g. from the constructor arguments or by some other means, one is allowed to omit the type arguments:</source>
          <target state="translated">但如果参数可以推断,例如从构造函数参数或其他方法推断,则允许省略类型参数。</target>
        </trans-unit>
        <trans-unit id="371730e75c65ea86559a3bab20b4d1df590d8c70" translate="yes" xml:space="preserve">
          <source>But if you want to access the same property on &lt;code&gt;b&lt;/code&gt;, that would not be safe, and the compiler reports an error:</source>
          <target state="translated">但是，如果要访问 &lt;code&gt;b&lt;/code&gt; 上的相同属性，那将是不安全的，并且编译器将报告错误：</target>
        </trans-unit>
        <trans-unit id="7b329900d92968a004b1366936090f97eaaa4da2" translate="yes" xml:space="preserve">
          <source>But it appears that in many cases this kind of overhead can be eliminated by inlining the lambda expressions. The functions shown below are good examples of this situation. I.e., the &lt;code&gt;lock()&lt;/code&gt; function could be easily inlined at call-sites. Consider the following case:</source>
          <target state="translated">但是看来，在很多情况下，可以通过内联lambda表达式来消除这种开销。下面显示的功能就是这种情况的很好的例子。即，可以很容易地在调用站点内联 &lt;code&gt;lock()&lt;/code&gt; 函数。考虑以下情况：</target>
        </trans-unit>
        <trans-unit id="ca8031161b409294044618bf8d11e09390278df6" translate="yes" xml:space="preserve">
          <source>But the common code should somehow get an instance of this interface, for that purpose we define the factory object &lt;code&gt;Base64Factory&lt;/code&gt;:</source>
          <target state="translated">但是通用代码应该以某种方式获取此接口的实例，为此，我们定义了工厂对象 &lt;code&gt;Base64Factory&lt;/code&gt; ：</target>
        </trans-unit>
        <trans-unit id="64c68a296346ddc7d2235bc8b60a6da50952f9db" translate="yes" xml:space="preserve">
          <source>But then, we can't do the following simple thing (which is perfectly safe):</source>
          <target state="translated">但是,我们就不能做以下简单的事情(这是绝对安全的)。</target>
        </trans-unit>
        <trans-unit id="4dc3ec007507d68d7b3e046b2209be5fde0773f0" translate="yes" xml:space="preserve">
          <source>But then, we would not be able to do the following simple thing (which is perfectly safe):</source>
          <target state="translated">但这样一来,我们就不能做以下简单的事情了(这是绝对安全的)。</target>
        </trans-unit>
        <trans-unit id="56acdaddb3309bc89f33e780815c7e14ac3ea05a" translate="yes" xml:space="preserve">
          <source>But we don't want to implement all the possible methods inside the class &lt;code&gt;List&lt;/code&gt;, right? This is where extensions help us.</source>
          <target state="translated">但是我们不想在类 &lt;code&gt;List&lt;/code&gt; 中实现所有可能的方法，对吗？这是扩展帮助我们的地方。</target>
        </trans-unit>
        <trans-unit id="82da50346400079fe12e5635e4dd6673e78ddff1" translate="yes" xml:space="preserve">
          <source>But we still need to access that property, right? There are a few ways of doing that.</source>
          <target state="translated">但我们还是需要访问该财产,对吗?有几个方法可以做到这一点。</target>
        </trans-unit>
        <trans-unit id="7f69e49f3d3c341d43121910ff2da21d98a69781" translate="yes" xml:space="preserve">
          <source>But what if one does not want to print all exceptions to the console? &lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/-coroutine-exception-handler/index.html&quot;&gt;CoroutineExceptionHandler&lt;/a&gt; context element is used as generic &lt;code&gt;catch&lt;/code&gt; block of coroutine where custom logging or exception handling may take place. It is similar to using &lt;a href=&quot;https://docs.oracle.com/javase/8/docs/api/java/lang/Thread.html#setUncaughtExceptionHandler(java.lang.Thread.UncaughtExceptionHandler)&quot;&gt;&lt;code&gt;Thread.uncaughtExceptionHandler&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">但是，如果不想将所有异常打印到控制台怎么办？&lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/-coroutine-exception-handler/index.html&quot;&gt;CoroutineExceptionHandler&lt;/a&gt;上下文元素用作协程的通用 &lt;code&gt;catch&lt;/code&gt; 块，在协程中可能发生自定义日志记录或异常处理。它类似于使用&lt;a href=&quot;https://docs.oracle.com/javase/8/docs/api/java/lang/Thread.html#setUncaughtExceptionHandler(java.lang.Thread.UncaughtExceptionHandler)&quot;&gt; &lt;code&gt;Thread.uncaughtExceptionHandler&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="4eeab717fbea77a855529c94381a85de48f5c2b4" translate="yes" xml:space="preserve">
          <source>But what if the extracted function contains a coroutine builder which is invoked on the current scope? In this case &lt;code&gt;suspend&lt;/code&gt; modifier on the extracted function is not enough. Making &lt;code&gt;doWorld&lt;/code&gt; an extension method on &lt;code&gt;CoroutineScope&lt;/code&gt; is one of the solutions, but it may not always be applicable as it does not make API clearer. The idiomatic solution is to have either an explicit &lt;code&gt;CoroutineScope&lt;/code&gt; as a field in a class containing the target function or an implicit one when the outer class implements &lt;code&gt;CoroutineScope&lt;/code&gt;. As a last resort, &lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/-coroutine-scope.html&quot;&gt;CoroutineScope(coroutineContext)&lt;/a&gt; can be used, but such approach is structurally unsafe because you no longer have control on the scope of execution of this method. Only private APIs can use this builder.</source>
          <target state="translated">但是，如果提取的函数包含在当前范围内调用的协程生成器，该怎么办？在这种情况下，提取函数上的 &lt;code&gt;suspend&lt;/code&gt; 修饰符是不够的。制作 &lt;code&gt;doWorld&lt;/code&gt; 上的扩展方法 &lt;code&gt;CoroutineScope&lt;/code&gt; 是解决方案之一，但它并不总是适用的，因为它不会使API更加清晰。惯用的解决方案是在包含目标函数的类中具有显式的 &lt;code&gt;CoroutineScope&lt;/code&gt; 作为字段，或者在外部类实现 &lt;code&gt;CoroutineScope&lt;/code&gt; 时具有隐式字段。作为最后的手段，&lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/-coroutine-scope.html&quot;&gt;CoroutineScope（coroutineContext）&lt;/a&gt;可以使用，但是这种方法在结构上是不安全的，因为您不再可以控制此方法的执行范围。仅专用API可以使用此构建器。</target>
        </trans-unit>
        <trans-unit id="5719a29731535ebfb334e02c3962a1adab16839f" translate="yes" xml:space="preserve">
          <source>But what if the extracted function contains a coroutine builder which is invoked on the current scope? In this case, the &lt;code&gt;suspend&lt;/code&gt; modifier on the extracted function is not enough. Making &lt;code&gt;doWorld&lt;/code&gt; an extension method on &lt;code&gt;CoroutineScope&lt;/code&gt; is one of the solutions, but it may not always be applicable as it does not make the API clearer. The idiomatic solution is to have either an explicit &lt;code&gt;CoroutineScope&lt;/code&gt; as a field in a class containing the target function or an implicit one when the outer class implements &lt;code&gt;CoroutineScope&lt;/code&gt;. As a last resort, &lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/-coroutine-scope.html&quot;&gt;CoroutineScope(coroutineContext)&lt;/a&gt; can be used, but such an approach is structurally unsafe because you no longer have control on the scope of execution of this method. Only private APIs can use this builder.</source>
          <target state="translated">但是，如果提取的函数包含在当前范围内调用的协程生成器，该怎么办？在这种情况下，提取的函数上的 &lt;code&gt;suspend&lt;/code&gt; 修饰符是不够的。制作 &lt;code&gt;doWorld&lt;/code&gt; 上的扩展方法 &lt;code&gt;CoroutineScope&lt;/code&gt; 是解决方案之一，但它并不总是适用的，因为它不会使API更加清晰。惯用的解决方案是在包含目标函数的类中具有显式的 &lt;code&gt;CoroutineScope&lt;/code&gt; 作为字段，或者在外部类实现 &lt;code&gt;CoroutineScope&lt;/code&gt; 时具有隐式的CoroutineScope。作为最后的手段，&lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/-coroutine-scope.html&quot;&gt;CoroutineScope（coroutineContext）&lt;/a&gt;可以使用，但是这种方法在结构上是不安全的，因为您不再可以控制此方法的执行范围。仅专用API可以使用此构建器。</target>
        </trans-unit>
        <trans-unit id="e588e3dc3f065dd5013e3fcfeb790a6dae76b4d0" translate="yes" xml:space="preserve">
          <source>ButterKnife</source>
          <target state="translated">ButterKnife</target>
        </trans-unit>
        <trans-unit id="14e7f1820e780372578ba3c1c94e440889709ae8" translate="yes" xml:space="preserve">
          <source>By applying the &lt;code&gt;@JsExport&lt;/code&gt; annotation to a top-level declaration (like a class or function), you make the Kotlin declaration available from JavaScript. The annotation exports all nested declarations with the name given in Kotlin. It can also be applied on file-level using &lt;code&gt;@file:JsExport&lt;/code&gt;.</source>
          <target state="translated">通过将 &lt;code&gt;@JsExport&lt;/code&gt; 批注应用于顶级声明（如类或函数），可以从JavaScript使用Kotlin声明。注释会导出所有嵌套声明，并使用Kotlin中给出的名称。也可以使用 &lt;code&gt;@file:JsExport&lt;/code&gt; 将其应用于文件级别。</target>
        </trans-unit>
        <trans-unit id="853613b8787fa7e892ce3e6d557ec64b8e4335c5" translate="yes" xml:space="preserve">
          <source>By convention, all sources are located in the &lt;code&gt;src/&amp;lt;target name&amp;gt;[Main|Test]/kotlin&lt;/code&gt; folders, where &lt;code&gt;main&lt;/code&gt; is for the source code and &lt;code&gt;test&lt;/code&gt; is for tests. &lt;code&gt;&amp;lt;target name&amp;gt;&lt;/code&gt; corresponds to the target platform (in this case &lt;code&gt;native&lt;/code&gt;), as specified in the build file.</source>
          <target state="translated">按照惯例，所有源都位于 &lt;code&gt;src/&amp;lt;target name&amp;gt;[Main|Test]/kotlin&lt;/code&gt; 文件夹中，其中 &lt;code&gt;main&lt;/code&gt; 用于源代码，而 &lt;code&gt;test&lt;/code&gt; 用于测试。 &lt;code&gt;&amp;lt;target name&amp;gt;&lt;/code&gt; 对应于目标平台（在本例中为 &lt;code&gt;native&lt;/code&gt; ），如构建文件中所指定。</target>
        </trans-unit>
        <trans-unit id="e315ba231d7689497d0c36cdb66e0b22d571cb74" translate="yes" xml:space="preserve">
          <source>By convention, implementations that install themselves as &lt;em&gt;the&lt;/em&gt; interceptor in the context with the &lt;a href=&quot;-key&quot;&gt;Key&lt;/a&gt; shall also scan the context for other element that implement &lt;a href=&quot;index&quot;&gt;ContinuationInterceptor&lt;/a&gt; interface and use their &lt;a href=&quot;intercept-continuation&quot;&gt;interceptContinuation&lt;/a&gt; functions, too.</source>
          <target state="translated">按照惯例，使用&lt;a href=&quot;-key&quot;&gt;Key&lt;/a&gt;在上下文中安装为自身&lt;em&gt;的&lt;/em&gt;拦截器的实现也应在上下文中扫描实现&lt;a href=&quot;index&quot;&gt;ContinuationInterceptor&lt;/a&gt;接口并也使用其&lt;a href=&quot;intercept-continuation&quot;&gt;interceptContinuation&lt;/a&gt;功能的其他元素。</target>
        </trans-unit>
        <trans-unit id="5c4ed021fd2dcd1ae3268fe77ea2a26b45ead19f" translate="yes" xml:space="preserve">
          <source>By convention, the entry point of a Kotlin program is a function with a signature like &lt;code&gt;main(args: Array&amp;lt;String&amp;gt;)&lt;/code&gt;, where &lt;code&gt;args&lt;/code&gt; represent the command-line arguments passed to the program. However, not every application supports command-line arguments, so this parameter often ends up not being used.</source>
          <target state="translated">按照惯例，Kotlin程序的入口点是带有 &lt;code&gt;main(args: Array&amp;lt;String&amp;gt;)&lt;/code&gt; 类的签名的函数，其中 &lt;code&gt;args&lt;/code&gt; 表示传递给该程序的命令行参数。但是，并非每个应用程序都支持命令行参数，因此该参数通常最终不被使用。</target>
        </trans-unit>
        <trans-unit id="f6287d8db9dee67e36a09d069c69a41065a81f0d" translate="yes" xml:space="preserve">
          <source>By convention, the first paragraph of the documentation text (the block of text until the first blank line) is the summary description of the element, and the following text is the detailed description.</source>
          <target state="translated">按照惯例,文档文本的第一段(第一行空行之前的文字块)是对该元素的简要说明,下面的文字是详细说明。</target>
        </trans-unit>
        <trans-unit id="e4d0ee6a3d773cd5fe33a5e915a48f340e15ef2b" translate="yes" xml:space="preserve">
          <source>By convention, the name of the setter parameter is &lt;code&gt;value&lt;/code&gt;, but you can choose a different name if you prefer.</source>
          <target state="translated">按照约定，setter参数的名称为 &lt;code&gt;value&lt;/code&gt; ，但您可以根据需要选择其他名称。</target>
        </trans-unit>
        <trans-unit id="ec639bb3beaf521b7aa292f8ea79f78cf22ae6b7" translate="yes" xml:space="preserve">
          <source>By default &lt;code&gt;|&lt;/code&gt; is used as margin prefix, but you can choose another character and pass it as a parameter, like &lt;code&gt;trimMargin(&quot;&amp;gt;&quot;)&lt;/code&gt;.</source>
          <target state="translated">默认情况下 &lt;code&gt;|&lt;/code&gt; 用作边距前缀，但是您可以选择另一个字符并将其作为参数传递，例如 &lt;code&gt;trimMargin(&quot;&amp;gt;&quot;)&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="99dac0c6c6d5404e704f288b84d13a1aa08cf418" translate="yes" xml:space="preserve">
          <source>By default Kotlin/Native compiler produces &lt;code&gt;.dSYM&lt;/code&gt; for release (i.e. optimized) binaries on Darwin platforms. This can be disabled with &lt;code&gt;-Xadd-light-debug=disable&lt;/code&gt; compiler flag. At the same time this option is disabled by default for other platforms, to enable it use &lt;code&gt;-Xadd-light-debug=enable&lt;/code&gt;. To control option in Gradle, use</source>
          <target state="translated">默认情况下，Kotlin / Native编译器会生成 &lt;code&gt;.dSYM&lt;/code&gt; 以便在Darwin平台上发布（即优化）二进制文件。可以使用 &lt;code&gt;-Xadd-light-debug=disable&lt;/code&gt; 编译器标志来禁用它。同时，对于其他平台，默认情况下禁用此选项，请使用 &lt;code&gt;-Xadd-light-debug=enable&lt;/code&gt; 启用它。要控制Gradle中的选项，请使用</target>
        </trans-unit>
        <trans-unit id="2157f3807036d87ee534a7dc55f304b05c3393dc" translate="yes" xml:space="preserve">
          <source>By default the Kotlin/Native compiler doesn't allow calling a non-designated Objective-C initializer as a &lt;code&gt;super(...)&lt;/code&gt; constructor. This behaviour can be inconvenient if the designated initializers aren't marked properly in the Objective-C library. Adding a &lt;code&gt;disableDesignatedInitializerChecks = true&lt;/code&gt; to the &lt;code&gt;.def&lt;/code&gt; file for this library would disable these compiler checks.</source>
          <target state="translated">默认情况下，Kotlin / Native编译器不允许将未指定的Objective-C初始化程序调用为 &lt;code&gt;super(...)&lt;/code&gt; 构造函数。如果在Objective-C库中未正确标记指定的初始化程序，则此行为可能会带来不便。在此库的 &lt;code&gt;.def&lt;/code&gt; 文件中添加 &lt;code&gt;disableDesignatedInitializerChecks = true&lt;/code&gt; 将禁用这些编译器检查。</target>
        </trans-unit>
        <trans-unit id="3a8ae013521aa2113c5644b6f40df7e80be91d82" translate="yes" xml:space="preserve">
          <source>By default the plugin creates software components for the main and test source sets. You can access them via the &lt;code&gt;components&lt;/code&gt; container provided by Gradle or via the &lt;code&gt;component&lt;/code&gt; property of a corresponding source set:</source>
          <target state="translated">默认情况下，该插件为主要和测试源集创建软件组件。您可以通过Gradle提供的 &lt;code&gt;components&lt;/code&gt; 容器或相应源集的 &lt;code&gt;component&lt;/code&gt; 属性访问它们：</target>
        </trans-unit>
        <trans-unit id="d4dbe9f13a9e2b6944f1a197b2e0a3c54aaedc6f" translate="yes" xml:space="preserve">
          <source>By default the plugin downloads the Kotlin/Native compiler during the first run. If you have already downloaded the compiler manually you can specify the path to its root directory using &lt;code&gt;org.jetbrains.kotlin.native.home&lt;/code&gt; project property (e.g. in &lt;code&gt;gradle.properties&lt;/code&gt;).</source>
          <target state="translated">默认情况下，该插件会在首次运行时下载Kotlin / Native编译器。如果您已经手动下载了编译器，则可以使用 &lt;code&gt;org.jetbrains.kotlin.native.home&lt;/code&gt; 项目属性（例如，在 &lt;code&gt;gradle.properties&lt;/code&gt; 中）指定其根目录的路径。</target>
        </trans-unit>
        <trans-unit id="1664eb337c008b6bc6ba3557bac64a2dbe807510" translate="yes" xml:space="preserve">
          <source>By default the production sources are located in &lt;code&gt;src/main/kotlin&lt;/code&gt; and the test sources - in &lt;code&gt;src/test/kotlin&lt;/code&gt;.</source>
          <target state="translated">默认情况下，生产源位于 &lt;code&gt;src/main/kotlin&lt;/code&gt; 中，而测试源位于 &lt;code&gt;src/test/kotlin&lt;/code&gt; 中。</target>
        </trans-unit>
        <trans-unit id="76a5eff4cbb7d3b0eac8405bf73dd260a7e59b1d" translate="yes" xml:space="preserve">
          <source>By default, Android Extensions adds a hidden cache function and a storage field to each container (&lt;a href=&quot;https://developer.android.com/reference/android/app/Activity.html&quot;&gt;&lt;code&gt;Activity&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://developer.android.com/reference/android/support/v4/app/Fragment.html&quot;&gt;&lt;code&gt;Fragment&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://developer.android.com/reference/android/view/View.html&quot;&gt;&lt;code&gt;View&lt;/code&gt;&lt;/a&gt; or a &lt;code&gt;LayoutContainer&lt;/code&gt; implementation) written in Kotlin. The method is pretty small so it does not increase the size of APK much.</source>
          <target state="translated">默认情况下，Android扩展程序向以Kotlin编写的每个容器（&lt;a href=&quot;https://developer.android.com/reference/android/app/Activity.html&quot;&gt; &lt;code&gt;Activity&lt;/code&gt; &lt;/a&gt;，&lt;a href=&quot;https://developer.android.com/reference/android/support/v4/app/Fragment.html&quot;&gt; &lt;code&gt;Fragment&lt;/code&gt; &lt;/a&gt;，&lt;a href=&quot;https://developer.android.com/reference/android/view/View.html&quot;&gt; &lt;code&gt;View&lt;/code&gt; &lt;/a&gt;或 &lt;code&gt;LayoutContainer&lt;/code&gt; 实现）添加隐藏的缓存功能和存储字段。该方法很小，因此不会增加APK的大小。</target>
        </trans-unit>
        <trans-unit id="4d7bda9f81163a6a8962c92f55010d6ace9066d9" translate="yes" xml:space="preserve">
          <source>By default, Android Extensions plugin uses &lt;code&gt;HashMap&lt;/code&gt; as a backing storage, but you can switch to the &lt;code&gt;SparseArray&lt;/code&gt; implementation, or just switch off caching. The latter is especially useful when you use only the &lt;a href=&quot;#parcelable-implementations-generator&quot;&gt;Parcelable&lt;/a&gt; part of Android Extensions.</source>
          <target state="translated">默认情况下，Android Extensions插件使用 &lt;code&gt;HashMap&lt;/code&gt; 作为后备存储，但是您可以切换到 &lt;code&gt;SparseArray&lt;/code&gt; 实现，也可以关闭缓存。当您仅使用Android扩展的&lt;a href=&quot;#parcelable-implementations-generator&quot;&gt;Parcelable&lt;/a&gt;部分时，后者特别有用。</target>
        </trans-unit>
        <trans-unit id="f5c7e9870f7efc4c699314a7a24e7c0d58da9e16" translate="yes" xml:space="preserve">
          <source>By default, Gradle does not expand the JARs in the build process, so we need to add an additional step in our build to do so:</source>
          <target state="translated">默认情况下,Gradle在构建过程中不会扩展JAR,所以我们需要在构建过程中增加一个额外的步骤来扩展。</target>
        </trans-unit>
        <trans-unit id="b2d5deccfa850128fd02c305654ca46974c778f3" translate="yes" xml:space="preserve">
          <source>By default, Kotlin classes are final: they can&amp;rsquo;t be inherited. To make a class inheritable, mark it with the &lt;code&gt;open&lt;/code&gt; keyword.</source>
          <target state="translated">默认情况下，Kotlin类是最终的：它们不能被继承。要使一个类可继承，请用 &lt;code&gt;open&lt;/code&gt; 关键字标记它。</target>
        </trans-unit>
        <trans-unit id="70d6cd4ae689d623400a5c3981b0fd105ebdc2ed" translate="yes" xml:space="preserve">
          <source>By default, Kotlin compiles down to Java (so you have the entire Java Standard Library available to you, and interacting with Java libraries is a breeze), so you now have a Java Archive (&lt;code&gt;program.jar&lt;/code&gt;) which includes the Java libraries that are necessary to support the Kotlin features (thanks to &lt;code&gt;-include-runtime&lt;/code&gt;), and you can run it using an out-of-the-box Java runtime:</source>
          <target state="translated">默认情况下，Kotlin会编译为Java（因此您可以使用整个Java标准库，并且与Java库进行交互很容易），因此，您现在有了一个Java Archive（ &lt;code&gt;program.jar&lt;/code&gt; ），其中包括Java库。是支持Kotlin功能所必需的（感谢 &lt;code&gt;-include-runtime&lt;/code&gt; ），您可以使用现成的Java运行时来运行它：</target>
        </trans-unit>
        <trans-unit id="7afb6f2771c4fbfd0553debf12349bf3e35e83f0" translate="yes" xml:space="preserve">
          <source>By default, Kotlin runs on JVM and gives direct access to a rich and efficient collections library with general-purpose collections and data-structures like dynamically-sized arrays (&lt;code&gt;ArrayList&lt;/code&gt;), hash-based maps and sets (&lt;code&gt;HashMap&lt;/code&gt;/&lt;code&gt;HashSet&lt;/code&gt;), tree-based ordered maps and sets (&lt;code&gt;TreeMap&lt;/code&gt;/&lt;code&gt;TreeSet&lt;/code&gt;), etc. Using a hash-set of integers to track values that were already reached while applying function &lt;code&gt;f&lt;/code&gt;, the straightforward imperative version of a solution to the problem can be written as shown below:</source>
          <target state="translated">默认情况下，Kotlin在JVM上运行，可直接访问具有通用集合和数据结构（如动态大小的数组（ &lt;code&gt;ArrayList&lt;/code&gt; ），基于哈希的映射和集（ &lt;code&gt;HashMap&lt;/code&gt; / &lt;code&gt;HashSet&lt;/code&gt; ），树形结构）的丰富高效的集合库基于有序的映射和集合（ &lt;code&gt;TreeMap&lt;/code&gt; / &lt;code&gt;TreeSet&lt;/code&gt; ）等。使用整数哈希集来跟踪应用函数 &lt;code&gt;f&lt;/code&gt; 时已经达到的值，可以将解决方案的简单命令式编写如下：</target>
        </trans-unit>
        <trans-unit id="d92b23bfe8dd75221c0070051a895b75ef354d28" translate="yes" xml:space="preserve">
          <source>By default, a JVM target ignores Java sources and only compiles Kotlin source files.</source>
          <target state="translated">默认情况下,JVM目标忽略Java源文件,只编译Kotlin源文件。</target>
        </trans-unit>
        <trans-unit id="0d7b459f50f6b301332839edf04f6563052919e2" translate="yes" xml:space="preserve">
          <source>By default, a Kotlin/Native target is compiled down to a &lt;code&gt;*.klib&lt;/code&gt; library artifact, which can be consumed by Kotlin/Native itself as a dependency but cannot be executed or used as a native library.</source>
          <target state="translated">默认情况下，将Kotlin / Native目标编译为 &lt;code&gt;*.klib&lt;/code&gt; 库工件，Kotlin / Native本身可以将其作为依赖项使用，但不能执行或用作本机库。</target>
        </trans-unit>
        <trans-unit id="600c37294cf5ac736ca17273ccf4851a2f16d3e0" translate="yes" xml:space="preserve">
          <source>By default, a Kotlin/Native target is compiled down to a &lt;code&gt;*.klib&lt;/code&gt; library artifact, which can be consumed by Kotlin/Native itself as a dependency but cannot be executed or used as a native library. To declare final native binaries like executables or shared libraries a &lt;code&gt;binaries&lt;/code&gt; property of a native target is used. This property represents a collection of native binaries built for this target in addition to the default &lt;code&gt;*.klib&lt;/code&gt; artifact and provides a set of methods for declaring and configuring them.</source>
          <target state="translated">默认情况下，Kotlin / Native目标被编译为 &lt;code&gt;*.klib&lt;/code&gt; 库工件，Kotlin / Native本身可以将其作为依赖项使用，但不能执行或用作本机库。要声明最终的本机二进制文件（如可执行文件或共享库），请使用本机目标的 &lt;code&gt;binaries&lt;/code&gt; 属性。除了默认的 &lt;code&gt;*.klib&lt;/code&gt; 工件之外，此属性还代表为此目标构建的本机二进制文件的集合，并提供了一组声明和配置它们的方法。</target>
        </trans-unit>
        <trans-unit id="0818f89fe4783c774b6ab1d9e53a8860bf21f08c" translate="yes" xml:space="preserve">
          <source>By default, a sources JAR is added to each publication in addition to its main artifact. The sources JAR contains the sources used by the &lt;code&gt;main&lt;/code&gt; compilation of the target. If you also need to publish a documentation artifact (like a Javadoc JAR), you need to configure its build manually and add it as an artifact to the relevant publications, as shown below.</source>
          <target state="translated">默认情况下，除了其主要工件之外，还将源JAR添加到每个出版物。源JAR包含目标 &lt;code&gt;main&lt;/code&gt; 编译所使用的源。如果还需要发布文档工件（如Javadoc JAR），则需要手动配置其构建并将其作为工件添加到相关出版物中，如下所示。</target>
        </trans-unit>
        <trans-unit id="c8cb8e17403ff9cb715ea26c126be98970f587df" translate="yes" xml:space="preserve">
          <source>By default, an &lt;code&gt;external&lt;/code&gt; declaration is available regardless your target module system. However, by applying &lt;a href=&quot;../-js-module/index&quot;&gt;JsModule&lt;/a&gt; annotation you can make a declaration unavailable to &lt;em&gt;plain&lt;/em&gt; module system. Some JavaScript libraries are distributed both as a standalone downloadable piece of JavaScript and as a module available as an npm package. To tell the Kotlin compiler to accept both cases, you can augment &lt;a href=&quot;../-js-module/index&quot;&gt;JsModule&lt;/a&gt; with the &lt;code&gt;@JsNonModule&lt;/code&gt; annotation.</source>
          <target state="translated">默认情况下，无论您的目标模块系统如何，都可以使用 &lt;code&gt;external&lt;/code&gt; 声明。但是，通过应用&lt;a href=&quot;../-js-module/index&quot;&gt;JsModule&lt;/a&gt;批注，可以使声明对&lt;em&gt;普通&lt;/em&gt;模块系统不可用。一些JavaScript库既可以作为独立的JavaScript下载块，又可以作为npm软件包的模块来分发。要告诉Kotlin编译器接受两种情况，您可以使用 &lt;code&gt;@JsNonModule&lt;/code&gt; 批注来扩充&lt;a href=&quot;../-js-module/index&quot;&gt;JsModule&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="58c16e3eeeff5e380f1da54dc86032d6019e8115" translate="yes" xml:space="preserve">
          <source>By default, an Objective-C framework produced by Kotlin/Native supports only one platform. However, such frameworks can be merged into a single universal (fat) binary using the &lt;code&gt;lipo&lt;/code&gt; utility. Particularly, such an operation makes sense for 32-bit and 64-bit iOS frameworks. In this case the resulting universal framework can be used on both 32-bit and 64-bit devices.</source>
          <target state="translated">默认情况下，由Kotlin / Native生产的Objective-C框架仅支持一个平台。但是，可以使用 &lt;code&gt;lipo&lt;/code&gt; 实用程序将此类框架合并为单个通用（胖）二进制文件。特别是，这种操作对于32位和64位iOS框架是有意义的。在这种情况下，最终的通用框架可以在32位和64位设备上使用。</target>
        </trans-unit>
        <trans-unit id="6954510030cab406f5ca0ac87adc218509cca524" translate="yes" xml:space="preserve">
          <source>By default, an Objective-C framework produced by Kotlin/Native supports only one platform. However, you can merge such frameworks into a single universal (fat) binary using the &lt;a href=&quot;https://llvm.org/docs/CommandGuide/llvm-lipo.html&quot;&gt;&lt;code&gt;lipo&lt;/code&gt; tool&lt;/a&gt;. This operation especially makes sense for 32-bit and 64-bit iOS frameworks. In this case, you can use the resulting universal framework on both 32-bit and 64-bit devices.</source>
          <target state="translated">默认情况下，由Kotlin / Native生产的Objective-C框架仅支持一个平台。但是，您可以使用&lt;a href=&quot;https://llvm.org/docs/CommandGuide/llvm-lipo.html&quot;&gt; &lt;code&gt;lipo&lt;/code&gt; 工具&lt;/a&gt;将这样的框架合并为单个通用（胖）二进制文件。对于32位和64位iOS框架，此操作尤其有意义。在这种情况下，您可以在32位和64位设备上使用生成的通用框架。</target>
        </trans-unit>
        <trans-unit id="12308601a82ae7783306b8c48240a870f666e7e4" translate="yes" xml:space="preserve">
          <source>By default, each project contains two source sets, &lt;code&gt;commonMain&lt;/code&gt; and &lt;code&gt;commonTest&lt;/code&gt;, where one can place all the code that should be shared between all of the target platforms. These source sets are added to each production and test compilation, respectively.</source>
          <target state="translated">默认情况下，每个项目都包含两个源集 &lt;code&gt;commonMain&lt;/code&gt; 和 &lt;code&gt;commonTest&lt;/code&gt; ，其中可以放置应在所有目标平台之间共享的所有代码。这些源集分别添加到每个生产和测试编译中。</target>
        </trans-unit>
        <trans-unit id="a8ff5373098f1ac49033ea577ee0b1fe732c2dff" translate="yes" xml:space="preserve">
          <source>By default, each publication includes a sources JAR that contains the sources used by the main compilation of the target.</source>
          <target state="translated">默认情况下,每个出版物都包含一个sources JAR,其中包含目标的主编译所使用的sources。</target>
        </trans-unit>
        <trans-unit id="5b57d652a4688ee4db7e97bbfdf27f173a8187bc" translate="yes" xml:space="preserve">
          <source>By default, export works non-transitively. If a library &lt;code&gt;foo&lt;/code&gt; depending on library &lt;code&gt;bar&lt;/code&gt; is exported, only methods of &lt;code&gt;foo&lt;/code&gt; will be added in the output framework. This behaviour can by changed by the &lt;code&gt;transitiveExport&lt;/code&gt; flag.</source>
          <target state="translated">默认情况下，导出工作是非过渡性的。如果导出了依赖于库 &lt;code&gt;bar&lt;/code&gt; 的库 &lt;code&gt;foo&lt;/code&gt; ，则只会在输出框架中添加 &lt;code&gt;foo&lt;/code&gt; 方法。可以通过 &lt;code&gt;transitiveExport&lt;/code&gt; 标志更改此行为。</target>
        </trans-unit>
        <trans-unit id="803fc94a2756f72f98051d5b5c3271f81a715fc7" translate="yes" xml:space="preserve">
          <source>By default, export works non-transitively. This means that if you export the library &lt;code&gt;foo&lt;/code&gt; depending on the library &lt;code&gt;bar&lt;/code&gt;, only methods of &lt;code&gt;foo&lt;/code&gt; are added to the output framework.</source>
          <target state="translated">默认情况下，导出工作是非过渡性的。这意味着，如果您根据库 &lt;code&gt;bar&lt;/code&gt; 导出库 &lt;code&gt;foo&lt;/code&gt; ，则仅 &lt;code&gt;foo&lt;/code&gt; 方法会添加到输出框架中。</target>
        </trans-unit>
        <trans-unit id="f878eeb715782ef79a35a341bddc04ee6f954270" translate="yes" xml:space="preserve">
          <source>By default, no artifacts of an Android library are published. To publish artifacts produced by a set of &lt;a href=&quot;https://developer.android.com/studio/build/build-variants&quot;&gt;Android variants&lt;/a&gt;, specify the variant names in the Android target block as follows:</source>
          <target state="translated">默认情况下，不发布Android库的任何工件。要发布一组&lt;a href=&quot;https://developer.android.com/studio/build/build-variants&quot;&gt;Android变体&lt;/a&gt;产生的工件，请在Android目标块中指定变体名称，如下所示：</target>
        </trans-unit>
        <trans-unit id="55262dfc9b0478a3f2135f74843ca220b0bf1756" translate="yes" xml:space="preserve">
          <source>By default, no artifacts of an Android library are published. To publish artifacts produced by a set of &lt;a href=&quot;https://developer.android.com/studio/build/build-variants&quot;&gt;Android variants&lt;/a&gt;, specify the variant names in the Android target block:</source>
          <target state="translated">默认情况下，不发布Android库的任何工件。要发布由一组&lt;a href=&quot;https://developer.android.com/studio/build/build-variants&quot;&gt;Android变体&lt;/a&gt;产生的工件，请在Android目标块中指定变体名称：</target>
        </trans-unit>
        <trans-unit id="d160a62c12242059269fd4a6087d4bcf60e47cc6" translate="yes" xml:space="preserve">
          <source>By default, the JVM target ignores Java sources and compiles only Kotlin source files.</source>
          <target state="translated">默认情况下,JVM目标忽略Java源文件,只编译Kotlin源文件。</target>
        </trans-unit>
        <trans-unit id="b062ead1d5e30fda7c464836f72f0cccd9aaa11e" translate="yes" xml:space="preserve">
          <source>By default, the evaluation of lazy properties is &lt;strong&gt;synchronized&lt;/strong&gt;: the value is computed only in one thread, and all threads will see the same value. If the synchronization of initialization delegate is not required, so that multiple threads can execute it simultaneously, pass &lt;code&gt;LazyThreadSafetyMode.PUBLICATION&lt;/code&gt; as a parameter to the &lt;code&gt;lazy()&lt;/code&gt; function. And if you're sure that the initialization will always happen on a single thread, you can use &lt;code&gt;LazyThreadSafetyMode.NONE&lt;/code&gt; mode, which doesn't incur any thread-safety guarantees and the related overhead.</source>
          <target state="translated">默认情况下，惰性属性的求值是&lt;strong&gt;同步的&lt;/strong&gt;：仅在一个线程中计算该值，并且所有线程将看到相同的值。如果不需要同步初始化委托，以便多个线程可以同时执行它， &lt;code&gt;LazyThreadSafetyMode.PUBLICATION&lt;/code&gt; 作为参数传递给 &lt;code&gt;lazy()&lt;/code&gt; 函数。而且，如果您确定初始化总是在单个线程上进行，则可以使用 &lt;code&gt;LazyThreadSafetyMode.NONE&lt;/code&gt; 模式，该模式不会产生任何线程安全保证和相关的开销。</target>
        </trans-unit>
        <trans-unit id="cf91dc8457f024db77525d6ee952007811f3f798" translate="yes" xml:space="preserve">
          <source>By default, the evaluation of lazy properties is &lt;strong&gt;synchronized&lt;/strong&gt;: the value is computed only in one thread, and all threads will see the same value. If the synchronization of initialization delegate is not required, so that multiple threads can execute it simultaneously, pass &lt;code&gt;LazyThreadSafetyMode.PUBLICATION&lt;/code&gt; as a parameter to the &lt;code&gt;lazy()&lt;/code&gt; function. And if you're sure that the initialization will always happen on the same thread as the one where you use the property, you can use &lt;code&gt;LazyThreadSafetyMode.NONE&lt;/code&gt;: it doesn't incur any thread-safety guarantees and the related overhead.</source>
          <target state="translated">默认情况下，惰性属性的求值是&lt;strong&gt;同步的&lt;/strong&gt;：仅在一个线程中计算该值，并且所有线程都将看到相同的值。如果不需要同步初始化委托，以便多个线程可以同时执行它， &lt;code&gt;LazyThreadSafetyMode.PUBLICATION&lt;/code&gt; 作为参数传递给 &lt;code&gt;lazy()&lt;/code&gt; 函数。而且，如果您确定初始化将始终与使用该属性的线程在同一线程上进行，则可以使用 &lt;code&gt;LazyThreadSafetyMode.NONE&lt;/code&gt; ：它不会产生任何线程安全保证和相关的开销。</target>
        </trans-unit>
        <trans-unit id="4cad3f33251c0fac382894f115102f9a78d8c7fd" translate="yes" xml:space="preserve">
          <source>By default, the name of our project's generated artifact (which is created through webpack) that needs to be referenced is our project name (in this case, &lt;code&gt;jsTutorial&lt;/code&gt;). If you've named your project &lt;code&gt;followAlong&lt;/code&gt;, make sure to embed &lt;code&gt;followAlong.js&lt;/code&gt; instead of &lt;code&gt;jsTutorial.js&lt;/code&gt;</source>
          <target state="translated">默认情况下，需要引用的项目生成的工件（通过webpack创建）的名称是我们的项目名称（在本例中为 &lt;code&gt;jsTutorial&lt;/code&gt; ）。如果您已将项目命名为 &lt;code&gt;followAlong&lt;/code&gt; ，请确保嵌入 &lt;code&gt;followAlong.js&lt;/code&gt; 而不是 &lt;code&gt;jsTutorial.js&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="99ffd3726db932db781eb6b6cabe9bafcd306993" translate="yes" xml:space="preserve">
          <source>By default, the resulting set of JavaScript files (your application together with all dependencies) can be found at path &lt;code&gt;$BUILD_DIR/min/&lt;/code&gt;, where &lt;code&gt;$BUILD_DIR&lt;/code&gt; is the path to generated JavaScript (usually, &lt;code&gt;build/classes/main&lt;/code&gt;).</source>
          <target state="translated">默认情况下，可以在 &lt;code&gt;$BUILD_DIR/min/&lt;/code&gt; 路径下找到生成的JavaScript文件集（您的应用程序以及所有依赖项），其中 &lt;code&gt;$BUILD_DIR&lt;/code&gt; 是生成JavaScript的路径（通常是 &lt;code&gt;build/classes/main&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="d906672b11a894bcc610e303cb7a7f8f05911f0d" translate="yes" xml:space="preserve">
          <source>By default, the results of a Kotlin/JS project build reside in the &lt;code&gt;/build/distribution&lt;/code&gt; directory within the project root.</source>
          <target state="translated">默认情况下，Kotlin / JS项目构建的结果位于项目根目录下的 &lt;code&gt;/build/distribution&lt;/code&gt; 目录中。</target>
        </trans-unit>
        <trans-unit id="3522669245270d01ba6f55d619e4fa3c3901597e" translate="yes" xml:space="preserve">
          <source>By default, we support running tests for JVM, JS, Android, Linux, Windows, macOS as well as iOS, watchOS, and tvOS simulators. To run tests for other Kotlin/Native targets, you need to configure them manually in an appropriate environment, emulator, or test framework.</source>
          <target state="translated">默认情况下,我们支持为 JVM、JS、Android、Linux、Windows、macOS 以及 iOS、watchOS 和 tvOS 模拟器运行测试。如果要运行其他Kotlin/Native目标的测试,你需要在适当的环境、模拟器或测试框架中手动配置它们。</target>
        </trans-unit>
        <trans-unit id="480f0a18c9f3a940a2eced884a0c65112f353823" translate="yes" xml:space="preserve">
          <source>By default, your project will use Gradle with Kotlin DSL as the build system.</source>
          <target state="translated">默认情况下,你的项目将使用带有 Kotlin DSL 的 Gradle 作为构建系统。</target>
        </trans-unit>
        <trans-unit id="ca655af32f89427d3dcb596e88184ba8ba8d34f8" translate="yes" xml:space="preserve">
          <source>By default, your project will use the Gradle build system with Kotlin DSL.</source>
          <target state="translated">默认情况下,你的项目将使用带有Kotlin DSL的Gradle构建系统。</target>
        </trans-unit>
        <trans-unit id="aefff3dc0262a1a9c9d1ef5a002b1c76f5499d68" translate="yes" xml:space="preserve">
          <source>By defining the &lt;code&gt;provideDelegate&lt;/code&gt; operator you can extend the logic of creating the object to which the property implementation is delegated. If the object used on the right hand side of &lt;code&gt;by&lt;/code&gt; defines &lt;code&gt;provideDelegate&lt;/code&gt; as a member or extension function, that function will be called to create the property delegate instance.</source>
          <target state="translated">通过定义 &lt;code&gt;provideDelegate&lt;/code&gt; 运算符，您可以扩展创建将属性实现委派到的对象的逻辑。如果 &lt;code&gt;by&lt;/code&gt; 右侧使用的对象将 &lt;code&gt;provideDelegate&lt;/code&gt; 定义为成员或扩展函数，则将调用该函数以创建属性委托实例。</target>
        </trans-unit>
        <trans-unit id="be5a6408a04e9b0b6fb327f3e01d634a5ce56957" translate="yes" xml:space="preserve">
          <source>By defining the &lt;code&gt;provideDelegate&lt;/code&gt; operator you can extend the logic of creating the object to which the property implementation is delegated. If the object used on the right-hand side of &lt;code&gt;by&lt;/code&gt; defines &lt;code&gt;provideDelegate&lt;/code&gt; as a member or extension function, that function will be called to create the property delegate instance.</source>
          <target state="translated">通过定义 &lt;code&gt;provideDelegate&lt;/code&gt; 运算符，您可以扩展创建将属性实现委派到的对象的逻辑。如果 &lt;code&gt;by&lt;/code&gt; 右侧使用的对象将 &lt;code&gt;provideDelegate&lt;/code&gt; 定义为成员或扩展函数，则将调用该函数以创建属性委托实例。</target>
        </trans-unit>
        <trans-unit id="1fb1d719255d6f672063d1b0db5ce7d1726ec1fa" translate="yes" xml:space="preserve">
          <source>By enabling the hierarchical structure along with its ability to use platform-dependent libraries in shared source sets, you can eliminate the need to use certain workarounds to get IDE support for sharing source sets among several native targets, for example &lt;code&gt;iosArm64&lt;/code&gt; and &lt;code&gt;iosX64&lt;/code&gt;:</source>
          <target state="translated">通过启用分层结构及其在共享源集中使用平台相关库的功能，您可以消除使用某些变通办法的需要，以获取IDE支持以在多个本机目标之间共享源集，例如 &lt;code&gt;iosArm64&lt;/code&gt; 和 &lt;code&gt;iosX64&lt;/code&gt; ：</target>
        </trans-unit>
        <trans-unit id="e3f73b3d35aaab73880900007b9ac145145bcdc1" translate="yes" xml:space="preserve">
          <source>By leveraging Kotlin's SAM conversion, you can write the following equivalent code instead:</source>
          <target state="translated">通过利用Kotlin的SAM转换,你可以写下面的等价代码来代替。</target>
        </trans-unit>
        <trans-unit id="4f4baa18a6ce640a87ee1469d12a17abf8cd0644" translate="yes" xml:space="preserve">
          <source>By the convention, all sources are located in the &lt;code&gt;src/&amp;lt;target name&amp;gt;[Main|Test]/kotlin&lt;/code&gt; folders. It creates &lt;em&gt;main&lt;/em&gt; and &lt;em&gt;test&lt;/em&gt; source sets for every target. Let's place the &lt;code&gt;hello.kt&lt;/code&gt; we previously created into the &lt;em&gt;main&lt;/em&gt; source set folder, which is &lt;code&gt;src/nativeMain/kotlin&lt;/code&gt;. The &lt;code&gt;nativeMain&lt;/code&gt; folder comes from the &lt;code&gt;&quot;native&quot;&lt;/code&gt; target name, which we specified in the build script above.</source>
          <target state="translated">按照惯例，所有源都位于 &lt;code&gt;src/&amp;lt;target name&amp;gt;[Main|Test]/kotlin&lt;/code&gt; 文件夹中。它为每个目标创建&lt;em&gt;主要&lt;/em&gt;和&lt;em&gt;测试&lt;/em&gt;源集。让我们将之前创建的 &lt;code&gt;hello.kt&lt;/code&gt; 放入&lt;em&gt;主&lt;/em&gt;源代码设置文件夹 &lt;code&gt;src/nativeMain/kotlin&lt;/code&gt; 中。该 &lt;code&gt;nativeMain&lt;/code&gt; 文件夹来自于 &lt;code&gt;&quot;native&quot;&lt;/code&gt; 目标的名字，这是我们在上面构建脚本指定。</target>
        </trans-unit>
        <trans-unit id="a0dfab771ea3973b4c2124bbf544d87ad089f95d" translate="yes" xml:space="preserve">
          <source>By using an &lt;em&gt;object expression&lt;/em&gt;, you can now define an anonymous, unnamed class and at the same time create one instance of it, called an &lt;em&gt;anonymous object&lt;/em&gt;:</source>
          <target state="translated">通过使用&lt;em&gt;对象表达式&lt;/em&gt;，您现在可以定义一个匿名的未命名类，并同时创建它的一个实例，称为&lt;em&gt;匿名对象&lt;/em&gt;：</target>
        </trans-unit>
        <trans-unit id="448cce1bad11787a3aaaf6d4b14ff64be923694d" translate="yes" xml:space="preserve">
          <source>By using well-named functions as builders in combination with &lt;a href=&quot;lambdas#function-literals-with-receiver&quot;&gt;function literals with receiver&lt;/a&gt; it is possible to create type-safe, statically-typed builders in Kotlin.</source>
          <target state="translated">通过使用命名函数作为构建器，并结合带有&lt;a href=&quot;lambdas#function-literals-with-receiver&quot;&gt;接收器的函数文字，&lt;/a&gt;可以在Kotlin中创建类型安全，静态类型的构建器。</target>
        </trans-unit>
        <trans-unit id="7803ee252527503b67d1eeb0deb252622746cebd" translate="yes" xml:space="preserve">
          <source>Byte</source>
          <target state="translated">Byte</target>
        </trans-unit>
        <trans-unit id="8051f32f2b762ee221844914c1ad9edc1b014c6f" translate="yes" xml:space="preserve">
          <source>ByteArray</source>
          <target state="translated">ByteArray</target>
        </trans-unit>
        <trans-unit id="7ca4c3b5b837d26b47e13524a62d903214baaeb2" translate="yes" xml:space="preserve">
          <source>ByteIterator</source>
          <target state="translated">ByteIterator</target>
        </trans-unit>
        <trans-unit id="2e71678cd8d8c30b22ed7694dacffdc7ce8aac53" translate="yes" xml:space="preserve">
          <source>ByteVar</source>
          <target state="translated">ByteVar</target>
        </trans-unit>
        <trans-unit id="c3342bc2ee5e67573d8133bca38aac1e90aa9017" translate="yes" xml:space="preserve">
          <source>ByteVarOf</source>
          <target state="translated">ByteVarOf</target>
        </trans-unit>
        <trans-unit id="21abc86076158920e8e684ae35bd4456702276e8" translate="yes" xml:space="preserve">
          <source>Bytes are -128 through 127 due to Kotlin inheriting a bad design decision from Java. In order to get a traditional byte value between 0 and 255, keep the value as-is if it is positive, and add 256 if it is negative (so -128 is really 128, and -1 is really 255). See the section on &lt;a href=&quot;extension-functionsproperties&quot;&gt;extension functions&lt;/a&gt; for a neat workaround for this.</source>
          <target state="translated">由于Kotlin继承了Java的错误设计决定，因此字节数为-128至127。为了获得介于0到255之间的传统字节值，如果该值是正数，则将其保持原样；如果该值是负数，则将其添加为256（因此-128实际上是128，而-1是真正的255）。请参阅&lt;a href=&quot;extension-functionsproperties&quot;&gt;扩展功能&lt;/a&gt;部分，以获取解决方案。</target>
        </trans-unit>
        <trans-unit id="32096c2e0eff33d844ee6d675407ace18289357d" translate="yes" xml:space="preserve">
          <source>C</source>
          <target state="translated">C</target>
        </trans-unit>
        <trans-unit id="32b80dccfbc24b758f7138d1b71599f78bc68a2e" translate="yes" xml:space="preserve">
          <source>C Function Pointers in Kotlin</source>
          <target state="translated">Kotlin中的C函数指针</target>
        </trans-unit>
        <trans-unit id="b1f95093d989b07d82ccf10194388dd2a80f5a48" translate="yes" xml:space="preserve">
          <source>C Interop documentation</source>
          <target state="translated">C 互操作文件</target>
        </trans-unit>
        <trans-unit id="53cd5afff77d718a16da7a261addfd2e7a746175" translate="yes" xml:space="preserve">
          <source>C Type</source>
          <target state="translated">C型</target>
        </trans-unit>
        <trans-unit id="de0720287ff37b2cbfaaa0591ad328902d17057c" translate="yes" xml:space="preserve">
          <source>C compiler and linker options</source>
          <target state="translated">C编译器和链接器选项</target>
        </trans-unit>
        <trans-unit id="989fc820e5551195e144c9823e3208c797ab54ba" translate="yes" xml:space="preserve">
          <source>C data or code.</source>
          <target state="translated">C数据或代码。</target>
        </trans-unit>
        <trans-unit id="5c94a5c24eea74378442f31a2ec53ec9732a238c" translate="yes" xml:space="preserve">
          <source>C does not support objects either. People use function pointers to mimic object semantics. A function pointer is declared as follows &lt;code&gt;RETURN_TYPE (* FIELD_NAME)(PARAMETERS)&lt;/code&gt;. It is tricky to read, but we should be able to see function pointer fields in the structures above.</source>
          <target state="translated">C也不支持对象。人们使用函数指针来模仿对象语义。函数指针声明如下 &lt;code&gt;RETURN_TYPE (* FIELD_NAME)(PARAMETERS)&lt;/code&gt; 。阅读起来很棘手，但是我们应该能够在上面的结构中看到函数指针字段。</target>
        </trans-unit>
        <trans-unit id="1b6fc450a61cb16ec000b609a019e62ec3913527" translate="yes" xml:space="preserve">
          <source>C features</source>
          <target state="translated">C特征</target>
        </trans-unit>
        <trans-unit id="bd7caae6d13d723e3e15fbc66010f92e50b10c54" translate="yes" xml:space="preserve">
          <source>C interop</source>
          <target state="translated">C互访</target>
        </trans-unit>
        <trans-unit id="b21396dc1ca712c25b956b5bcc452b8d7baa7f60" translate="yes" xml:space="preserve">
          <source>C null pointer is represented as Kotlin's &lt;code&gt;null&lt;/code&gt;, and the pointer type &lt;code&gt;CPointer&amp;lt;T&amp;gt;&lt;/code&gt; is not nullable, but the &lt;code&gt;CPointer&amp;lt;T&amp;gt;?&lt;/code&gt; is. The values of this type support all the Kotlin operations related to handling &lt;code&gt;null&lt;/code&gt;, e.g. &lt;code&gt;?:&lt;/code&gt;, &lt;code&gt;?.&lt;/code&gt;, &lt;code&gt;!!&lt;/code&gt; etc.:</source>
          <target state="translated">C空指针表示为Kotlin的 &lt;code&gt;null&lt;/code&gt; ，并且指针类型 &lt;code&gt;CPointer&amp;lt;T&amp;gt;&lt;/code&gt; 不可为空，但 &lt;code&gt;CPointer&amp;lt;T&amp;gt;?&lt;/code&gt; 是。此类型的值支持与处理 &lt;code&gt;null&lt;/code&gt; 有关的所有Kotlin操作，例如 &lt;code&gt;?:&lt;/code&gt; ， &lt;code&gt;?.&lt;/code&gt; ， &lt;code&gt;!!&lt;/code&gt; 等等。：</target>
        </trans-unit>
        <trans-unit id="dc151d62ad65e920410dab6555446bf11db7ddfd" translate="yes" xml:space="preserve">
          <source>C pointer.</source>
          <target state="translated">C指针。</target>
        </trans-unit>
        <trans-unit id="e117456e95203a35d890ff7b3058eb710d5d7f86" translate="yes" xml:space="preserve">
          <source>C types are mapped in the way we would expect, note that &lt;code&gt;char&lt;/code&gt; type is mapped to &lt;code&gt;kotlin.Byte&lt;/code&gt; as it is usually an 8-bit signed value.</source>
          <target state="translated">C类型按照我们期望的方式映射，请注意 &lt;code&gt;char&lt;/code&gt; 类型映射到 &lt;code&gt;kotlin.Byte&lt;/code&gt; ,因为它通常是8位带符号的值。</target>
        </trans-unit>
        <trans-unit id="2917e6fd0f3e33b19006bdd7164bba9ab07aabe5" translate="yes" xml:space="preserve">
          <source>C, &lt;a href=&quot;native/objc_interop&quot;&gt;Swift, and Objective-C&lt;/a&gt; frameworks</source>
          <target state="translated">C，&lt;a href=&quot;native/objc_interop&quot;&gt;Swift和Objective-C&lt;/a&gt;框架</target>
        </trans-unit>
        <trans-unit id="1173dbb43313d07b70a93fae991af36789693f17" translate="yes" xml:space="preserve">
          <source>C:</source>
          <target state="translated">C:</target>
        </trans-unit>
        <trans-unit id="5587b0afcca208a7504cee0d2b70832d76010329" translate="yes" xml:space="preserve">
          <source>CANCELLED</source>
          <target state="translated">CANCELLED</target>
        </trans-unit>
        <trans-unit id="5cdc6fa477463d5f2868f0830b1453a306f2fa9f" translate="yes" xml:space="preserve">
          <source>CANON_EQ</source>
          <target state="translated">CANON_EQ</target>
        </trans-unit>
        <trans-unit id="05dff59689b060e392059bcb723a36e923fd7076" translate="yes" xml:space="preserve">
          <source>CASE_INSENSITIVE_ORDER</source>
          <target state="translated">CASE_INSENSITIVE_ORDER</target>
        </trans-unit>
        <trans-unit id="36b39d95fa7628fc8631aece6f093e7d75dfacd3" translate="yes" xml:space="preserve">
          <source>CArrayPointer</source>
          <target state="translated">CArrayPointer</target>
        </trans-unit>
        <trans-unit id="e4b88b5e5593a3b64f320de4f61462008b202dff" translate="yes" xml:space="preserve">
          <source>CArrayPointerVar</source>
          <target state="translated">CArrayPointerVar</target>
        </trans-unit>
        <trans-unit id="6042f4ccd2b35f8dec9caec98fc66b65acdc25f3" translate="yes" xml:space="preserve">
          <source>CCall</source>
          <target state="translated">CCall</target>
        </trans-unit>
        <trans-unit id="9eca1112729b385d925f7ae25bcbc3cfa491265b" translate="yes" xml:space="preserve">
          <source>CEnum</source>
          <target state="translated">CEnum</target>
        </trans-unit>
        <trans-unit id="b5455516170f19d109400c5956bbee35b500c4f2" translate="yes" xml:space="preserve">
          <source>CEnumEntryAlias</source>
          <target state="translated">CEnumEntryAlias</target>
        </trans-unit>
        <trans-unit id="97ed55287cc4662cda5b3b8fad77ea7ba3b0fe5e" translate="yes" xml:space="preserve">
          <source>CEnumVar</source>
          <target state="translated">CEnumVar</target>
        </trans-unit>
        <trans-unit id="8c0ccef330f1db9aa37890d372291089719b63f3" translate="yes" xml:space="preserve">
          <source>CEnumVarTypeSize</source>
          <target state="translated">CEnumVarTypeSize</target>
        </trans-unit>
        <trans-unit id="7877de4c10096f42fa8b542b38a0c8abfeff2993" translate="yes" xml:space="preserve">
          <source>CFunction</source>
          <target state="translated">CFunction</target>
        </trans-unit>
        <trans-unit id="de93d650439933a417e5398f479ee838df4cb4ca" translate="yes" xml:space="preserve">
          <source>CInterop support</source>
          <target state="translated">Cinterop支持</target>
        </trans-unit>
        <trans-unit id="7f6b300f54a9068bf063ea85746635fb73eebf11" translate="yes" xml:space="preserve">
          <source>CInterops</source>
          <target state="translated">CInterops</target>
        </trans-unit>
        <trans-unit id="bb95f17d9243e483e268617dbce738cf49527ccf" translate="yes" xml:space="preserve">
          <source>CLASS</source>
          <target state="translated">CLASS</target>
        </trans-unit>
        <trans-unit id="6f093241bd938f2c115d85f657fff3c48481dc1a" translate="yes" xml:space="preserve">
          <source>CName</source>
          <target state="translated">CName</target>
        </trans-unit>
        <trans-unit id="51a8d6928a4ece9bd6c2ffdeac4703a48f7264cc" translate="yes" xml:space="preserve">
          <source>COMBINING_SPACING_MARK</source>
          <target state="translated">COMBINING_SPACING_MARK</target>
        </trans-unit>
        <trans-unit id="05ea2aeebb1bcb2ad1032369d543dbd4fc81dbb5" translate="yes" xml:space="preserve">
          <source>COMMENTS</source>
          <target state="translated">COMMENTS</target>
        </trans-unit>
        <trans-unit id="a7a1e281255eb12f243d1fb22c16cfeb7bc92339" translate="yes" xml:space="preserve">
          <source>COMMON_NUMBER_SEPARATOR</source>
          <target state="translated">COMMON_NUMBER_SEPARATOR</target>
        </trans-unit>
        <trans-unit id="c52b56dab38211c04eda3b5b35db68636802626a" translate="yes" xml:space="preserve">
          <source>COMPUTED</source>
          <target state="translated">COMPUTED</target>
        </trans-unit>
        <trans-unit id="bdec3307bf74529afc89fcf1474e2489961239de" translate="yes" xml:space="preserve">
          <source>CONNECTOR_PUNCTUATION</source>
          <target state="translated">CONNECTOR_PUNCTUATION</target>
        </trans-unit>
        <trans-unit id="6ed66fd18a1b175704db533d3865fa2679863e6d" translate="yes" xml:space="preserve">
          <source>CONSTRUCTOR</source>
          <target state="translated">CONSTRUCTOR</target>
        </trans-unit>
        <trans-unit id="50978fadde69c77246ce999d9f431f618a6319de" translate="yes" xml:space="preserve">
          <source>CONTROL</source>
          <target state="translated">CONTROL</target>
        </trans-unit>
        <trans-unit id="8fc5c55e6034fd47125219962977975bff811433" translate="yes" xml:space="preserve">
          <source>COROUTINE_SUSPENDED</source>
          <target state="translated">COROUTINE_SUSPENDED</target>
        </trans-unit>
        <trans-unit id="12d1986fc613cfc336463178bd0f86eacc9cbec3" translate="yes" xml:space="preserve">
          <source>COpaque</source>
          <target state="translated">COpaque</target>
        </trans-unit>
        <trans-unit id="cd5d9c91d54b3f73460c195e4e84cb0b00e86b06" translate="yes" xml:space="preserve">
          <source>COpaquePointer</source>
          <target state="translated">COpaquePointer</target>
        </trans-unit>
        <trans-unit id="811c260ca26dab79423d1f8171bada67987007ff" translate="yes" xml:space="preserve">
          <source>COpaquePointerVar</source>
          <target state="translated">COpaquePointerVar</target>
        </trans-unit>
        <trans-unit id="397200d444a672cec5c5eef9dc97e880ce1e2e10" translate="yes" xml:space="preserve">
          <source>CPointed</source>
          <target state="translated">CPointed</target>
        </trans-unit>
        <trans-unit id="51b353fb033a73606eb39e50dc81f9d252aeb1f5" translate="yes" xml:space="preserve">
          <source>CPointer</source>
          <target state="translated">CPointer</target>
        </trans-unit>
        <trans-unit id="6700f1fe51b114e5e9c72c7a33e268ef1f8e7f70" translate="yes" xml:space="preserve">
          <source>CPointerVar</source>
          <target state="translated">CPointerVar</target>
        </trans-unit>
        <trans-unit id="e654c28678d1b6417437c0054f6dc4efab83dee4" translate="yes" xml:space="preserve">
          <source>CPointerVarOf</source>
          <target state="translated">CPointerVarOf</target>
        </trans-unit>
        <trans-unit id="1ac5a2a80e85c8edc6448983eac51d3f84788275" translate="yes" xml:space="preserve">
          <source>CPrimitiveVar</source>
          <target state="translated">CPrimitiveVar</target>
        </trans-unit>
        <trans-unit id="194e13da720a1f025685e5d677eba8a1aff3860a" translate="yes" xml:space="preserve">
          <source>CSS</source>
          <target state="translated">CSS</target>
        </trans-unit>
        <trans-unit id="4ede088fc94d65ce23fbc165eaec3b59039e24ed" translate="yes" xml:space="preserve">
          <source>CSSBoxType</source>
          <target state="translated">CSSBoxType</target>
        </trans-unit>
        <trans-unit id="6afd47d5b7f3283b8d6fd118a275b40e71737fbd" translate="yes" xml:space="preserve">
          <source>CSSRule</source>
          <target state="translated">CSSRule</target>
        </trans-unit>
        <trans-unit id="bbd7eff05e78b46aaddc0d7751b4d6b08b36df99" translate="yes" xml:space="preserve">
          <source>CSSRuleList</source>
          <target state="translated">CSSRuleList</target>
        </trans-unit>
        <trans-unit id="26b46bdb7c8c6ff7e33fbe0e36eb0872be8cd5fc" translate="yes" xml:space="preserve">
          <source>CSSStyleDeclaration</source>
          <target state="translated">CSSStyleDeclaration</target>
        </trans-unit>
        <trans-unit id="10fdabde5da32be8abb7d3568067d963d8ef529e" translate="yes" xml:space="preserve">
          <source>CString</source>
          <target state="translated">CString</target>
        </trans-unit>
        <trans-unit id="0f85a38172841ad31c3642b449845f7454ccd5c9" translate="yes" xml:space="preserve">
          <source>CStruct</source>
          <target state="translated">CStruct</target>
        </trans-unit>
        <trans-unit id="a5d88b1964f1a69d82c336a406f0c7e8b2a0458f" translate="yes" xml:space="preserve">
          <source>CStructVar</source>
          <target state="translated">CStructVar</target>
        </trans-unit>
        <trans-unit id="0eb9b33a40670abf39d39eecfb8c441213774695" translate="yes" xml:space="preserve">
          <source>CURRENCY_SYMBOL</source>
          <target state="translated">CURRENCY_SYMBOL</target>
        </trans-unit>
        <trans-unit id="e6303ccf1ceff324ad3a408b48244faf8b681b0a" translate="yes" xml:space="preserve">
          <source>CURRENT</source>
          <target state="translated">CURRENT</target>
        </trans-unit>
        <trans-unit id="04ae7b30c87d0340e26fda5fe5edc02b7d194589" translate="yes" xml:space="preserve">
          <source>CValue</source>
          <target state="translated">CValue</target>
        </trans-unit>
        <trans-unit id="33bc692b7f747be5f7df544e80eec98e4fe5fd4f" translate="yes" xml:space="preserve">
          <source>CValues</source>
          <target state="translated">CValues</target>
        </trans-unit>
        <trans-unit id="9b1b3ebea096ae4fd53f227491e30122cdb29201" translate="yes" xml:space="preserve">
          <source>CValuesRef</source>
          <target state="translated">CValuesRef</target>
        </trans-unit>
        <trans-unit id="c86e7f2f572ff3b939bce1942ef5b42273538c89" translate="yes" xml:space="preserve">
          <source>CVariable</source>
          <target state="translated">CVariable</target>
        </trans-unit>
        <trans-unit id="50338b3b242845e21a0ace9ae9684283d945fb52" translate="yes" xml:space="preserve">
          <source>Cache</source>
          <target state="translated">Cache</target>
        </trans-unit>
        <trans-unit id="7fab5893b3be679f8a5c05a77544ce77ef30648a" translate="yes" xml:space="preserve">
          <source>CacheBatchOperation</source>
          <target state="translated">CacheBatchOperation</target>
        </trans-unit>
        <trans-unit id="2e747bad89a09a29cc3a20eb8727ed9d9a9efd1f" translate="yes" xml:space="preserve">
          <source>CacheQueryOptions</source>
          <target state="translated">CacheQueryOptions</target>
        </trans-unit>
        <trans-unit id="403e16ddd46c6bceb2d1f1cd983fa06a75aa7c44" translate="yes" xml:space="preserve">
          <source>CacheStorage</source>
          <target state="translated">CacheStorage</target>
        </trans-unit>
        <trans-unit id="34db46b3147a9417752a73e6aa03523556aa3f74" translate="yes" xml:space="preserve">
          <source>Calculates the relative path for this file from &lt;a href=&quot;relative-to#kotlin.io%24relativeTo%28java.io.File%2C+java.io.File%29%2Fbase&quot;&gt;base&lt;/a&gt; file. Note that the &lt;a href=&quot;relative-to#kotlin.io%24relativeTo%28java.io.File%2C+java.io.File%29%2Fbase&quot;&gt;base&lt;/a&gt; file is treated as a directory. If this file matches the &lt;a href=&quot;relative-to#kotlin.io%24relativeTo%28java.io.File%2C+java.io.File%29%2Fbase&quot;&gt;base&lt;/a&gt; file, then a &lt;a href=&quot;http://docs.oracle.com/javase/8/docs/api/java/io/File.html&quot;&gt;File&lt;/a&gt; with empty path will be returned.</source>
          <target state="translated">从&lt;a href=&quot;relative-to#kotlin.io%24relativeTo%28java.io.File%2C+java.io.File%29%2Fbase&quot;&gt;基本&lt;/a&gt;文件计算此文件的相对路径。请注意，&lt;a href=&quot;relative-to#kotlin.io%24relativeTo%28java.io.File%2C+java.io.File%29%2Fbase&quot;&gt;基本&lt;/a&gt;文件被视为目录。如果此文件与&lt;a href=&quot;relative-to#kotlin.io%24relativeTo%28java.io.File%2C+java.io.File%29%2Fbase&quot;&gt;基本&lt;/a&gt;文件匹配，则将返回一个空路径的&lt;a href=&quot;http://docs.oracle.com/javase/8/docs/api/java/io/File.html&quot;&gt;文件&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="06bbcd199ba3b0b2621818db0667d1fa032314ee" translate="yes" xml:space="preserve">
          <source>Calculates the relative path for this file from &lt;a href=&quot;relative-to#kotlin.io%24relativeTo(java.io.File,%20java.io.File)/base&quot;&gt;base&lt;/a&gt; file. Note that the &lt;a href=&quot;relative-to#kotlin.io%24relativeTo(java.io.File,%20java.io.File)/base&quot;&gt;base&lt;/a&gt; file is treated as a directory. If this file matches the &lt;a href=&quot;relative-to#kotlin.io%24relativeTo(java.io.File,%20java.io.File)/base&quot;&gt;base&lt;/a&gt; file, then a &lt;a href=&quot;https://docs.oracle.com/javase/8/docs/api/java/io/File.html&quot;&gt;File&lt;/a&gt; with empty path will be returned.</source>
          <target state="translated">从&lt;a href=&quot;relative-to#kotlin.io%24relativeTo(java.io.File,%20java.io.File)/base&quot;&gt;基础&lt;/a&gt;文件计算此文件的相对路径。请注意，&lt;a href=&quot;relative-to#kotlin.io%24relativeTo(java.io.File,%20java.io.File)/base&quot;&gt;基本&lt;/a&gt;文件被视为目录。如果此文件与&lt;a href=&quot;relative-to#kotlin.io%24relativeTo(java.io.File,%20java.io.File)/base&quot;&gt;基本&lt;/a&gt;文件匹配，则将返回具有空路径的&lt;a href=&quot;https://docs.oracle.com/javase/8/docs/api/java/io/File.html&quot;&gt;文件&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="0b7d0c89204d227fe3ddb79ad5a1ca46cc60d22c" translate="yes" xml:space="preserve">
          <source>Calculates the relative path for this file from &lt;a href=&quot;relative-to-or-null#kotlin.io%24relativeToOrNull%28java.io.File%2C+java.io.File%29%2Fbase&quot;&gt;base&lt;/a&gt; file. Note that the &lt;a href=&quot;relative-to-or-null#kotlin.io%24relativeToOrNull%28java.io.File%2C+java.io.File%29%2Fbase&quot;&gt;base&lt;/a&gt; file is treated as a directory. If this file matches the &lt;a href=&quot;relative-to-or-null#kotlin.io%24relativeToOrNull%28java.io.File%2C+java.io.File%29%2Fbase&quot;&gt;base&lt;/a&gt; file, then a &lt;a href=&quot;http://docs.oracle.com/javase/8/docs/api/java/io/File.html&quot;&gt;File&lt;/a&gt; with empty path will be returned.</source>
          <target state="translated">从&lt;a href=&quot;relative-to-or-null#kotlin.io%24relativeToOrNull%28java.io.File%2C+java.io.File%29%2Fbase&quot;&gt;基本&lt;/a&gt;文件计算此文件的相对路径。请注意，&lt;a href=&quot;relative-to-or-null#kotlin.io%24relativeToOrNull%28java.io.File%2C+java.io.File%29%2Fbase&quot;&gt;基本&lt;/a&gt;文件被视为目录。如果此文件与&lt;a href=&quot;relative-to-or-null#kotlin.io%24relativeToOrNull%28java.io.File%2C+java.io.File%29%2Fbase&quot;&gt;基本&lt;/a&gt;文件匹配，则将返回一个空路径的&lt;a href=&quot;http://docs.oracle.com/javase/8/docs/api/java/io/File.html&quot;&gt;文件&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="150b56463f9b2a1c3c346b10d895c602dd9b5a34" translate="yes" xml:space="preserve">
          <source>Calculates the relative path for this file from &lt;a href=&quot;relative-to-or-null#kotlin.io%24relativeToOrNull(java.io.File,%20java.io.File)/base&quot;&gt;base&lt;/a&gt; file. Note that the &lt;a href=&quot;relative-to-or-null#kotlin.io%24relativeToOrNull(java.io.File,%20java.io.File)/base&quot;&gt;base&lt;/a&gt; file is treated as a directory. If this file matches the &lt;a href=&quot;relative-to-or-null#kotlin.io%24relativeToOrNull(java.io.File,%20java.io.File)/base&quot;&gt;base&lt;/a&gt; file, then a &lt;a href=&quot;https://docs.oracle.com/javase/8/docs/api/java/io/File.html&quot;&gt;File&lt;/a&gt; with empty path will be returned.</source>
          <target state="translated">从&lt;a href=&quot;relative-to-or-null#kotlin.io%24relativeToOrNull(java.io.File,%20java.io.File)/base&quot;&gt;基础&lt;/a&gt;文件计算此文件的相对路径。请注意，&lt;a href=&quot;relative-to-or-null#kotlin.io%24relativeToOrNull(java.io.File,%20java.io.File)/base&quot;&gt;基本&lt;/a&gt;文件被视为目录。如果此文件与&lt;a href=&quot;relative-to-or-null#kotlin.io%24relativeToOrNull(java.io.File,%20java.io.File)/base&quot;&gt;基本&lt;/a&gt;文件匹配，则将返回具有空路径的&lt;a href=&quot;https://docs.oracle.com/javase/8/docs/api/java/io/File.html&quot;&gt;文件&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="1db99d0e380dab5e2f3409e8414489a9a1c60607" translate="yes" xml:space="preserve">
          <source>Calculates the relative path for this file from &lt;a href=&quot;relative-to-or-self#kotlin.io%24relativeToOrSelf%28java.io.File%2C+java.io.File%29%2Fbase&quot;&gt;base&lt;/a&gt; file. Note that the &lt;a href=&quot;relative-to-or-self#kotlin.io%24relativeToOrSelf%28java.io.File%2C+java.io.File%29%2Fbase&quot;&gt;base&lt;/a&gt; file is treated as a directory. If this file matches the &lt;a href=&quot;relative-to-or-self#kotlin.io%24relativeToOrSelf%28java.io.File%2C+java.io.File%29%2Fbase&quot;&gt;base&lt;/a&gt; file, then a &lt;a href=&quot;http://docs.oracle.com/javase/8/docs/api/java/io/File.html&quot;&gt;File&lt;/a&gt; with empty path will be returned.</source>
          <target state="translated">从&lt;a href=&quot;relative-to-or-self#kotlin.io%24relativeToOrSelf%28java.io.File%2C+java.io.File%29%2Fbase&quot;&gt;基本&lt;/a&gt;文件计算此文件的相对路径。请注意，&lt;a href=&quot;relative-to-or-self#kotlin.io%24relativeToOrSelf%28java.io.File%2C+java.io.File%29%2Fbase&quot;&gt;基本&lt;/a&gt;文件被视为目录。如果此文件与&lt;a href=&quot;relative-to-or-self#kotlin.io%24relativeToOrSelf%28java.io.File%2C+java.io.File%29%2Fbase&quot;&gt;基本&lt;/a&gt;文件匹配，则将返回一个空路径的&lt;a href=&quot;http://docs.oracle.com/javase/8/docs/api/java/io/File.html&quot;&gt;文件&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="94364f792b1cf1ff342e0b31333a6522ce54fbb1" translate="yes" xml:space="preserve">
          <source>Calculates the relative path for this file from &lt;a href=&quot;relative-to-or-self#kotlin.io%24relativeToOrSelf(java.io.File,%20java.io.File)/base&quot;&gt;base&lt;/a&gt; file. Note that the &lt;a href=&quot;relative-to-or-self#kotlin.io%24relativeToOrSelf(java.io.File,%20java.io.File)/base&quot;&gt;base&lt;/a&gt; file is treated as a directory. If this file matches the &lt;a href=&quot;relative-to-or-self#kotlin.io%24relativeToOrSelf(java.io.File,%20java.io.File)/base&quot;&gt;base&lt;/a&gt; file, then a &lt;a href=&quot;https://docs.oracle.com/javase/8/docs/api/java/io/File.html&quot;&gt;File&lt;/a&gt; with empty path will be returned.</source>
          <target state="translated">从&lt;a href=&quot;relative-to-or-self#kotlin.io%24relativeToOrSelf(java.io.File,%20java.io.File)/base&quot;&gt;基础&lt;/a&gt;文件计算此文件的相对路径。请注意，&lt;a href=&quot;relative-to-or-self#kotlin.io%24relativeToOrSelf(java.io.File,%20java.io.File)/base&quot;&gt;基本&lt;/a&gt;文件被视为目录。如果此文件与&lt;a href=&quot;relative-to-or-self#kotlin.io%24relativeToOrSelf(java.io.File,%20java.io.File)/base&quot;&gt;基本&lt;/a&gt;文件匹配，则将返回具有空路径的&lt;a href=&quot;https://docs.oracle.com/javase/8/docs/api/java/io/File.html&quot;&gt;文件&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="58b40ce3a3c77f5f445a96771b2f292fe61e0a99" translate="yes" xml:space="preserve">
          <source>Calculates the relative path for this file from &lt;a href=&quot;to-relative-string#kotlin.io%24toRelativeString%28java.io.File%2C+java.io.File%29%2Fbase&quot;&gt;base&lt;/a&gt; file. Note that the &lt;a href=&quot;to-relative-string#kotlin.io%24toRelativeString%28java.io.File%2C+java.io.File%29%2Fbase&quot;&gt;base&lt;/a&gt; file is treated as a directory. If this file matches the &lt;a href=&quot;to-relative-string#kotlin.io%24toRelativeString%28java.io.File%2C+java.io.File%29%2Fbase&quot;&gt;base&lt;/a&gt; file, then an empty string will be returned.</source>
          <target state="translated">从&lt;a href=&quot;to-relative-string#kotlin.io%24toRelativeString%28java.io.File%2C+java.io.File%29%2Fbase&quot;&gt;基本&lt;/a&gt;文件计算此文件的相对路径。请注意，&lt;a href=&quot;to-relative-string#kotlin.io%24toRelativeString%28java.io.File%2C+java.io.File%29%2Fbase&quot;&gt;基本&lt;/a&gt;文件被视为目录。如果此文件与&lt;a href=&quot;to-relative-string#kotlin.io%24toRelativeString%28java.io.File%2C+java.io.File%29%2Fbase&quot;&gt;基本&lt;/a&gt;文件匹配，则将返回一个空字符串。</target>
        </trans-unit>
        <trans-unit id="1cf1bb02e2d297f5d8c6eed509ed4cd0c0ea77a5" translate="yes" xml:space="preserve">
          <source>Calculates the relative path for this file from &lt;a href=&quot;to-relative-string#kotlin.io%24toRelativeString(java.io.File,%20java.io.File)/base&quot;&gt;base&lt;/a&gt; file. Note that the &lt;a href=&quot;to-relative-string#kotlin.io%24toRelativeString(java.io.File,%20java.io.File)/base&quot;&gt;base&lt;/a&gt; file is treated as a directory. If this file matches the &lt;a href=&quot;to-relative-string#kotlin.io%24toRelativeString(java.io.File,%20java.io.File)/base&quot;&gt;base&lt;/a&gt; file, then an empty string will be returned.</source>
          <target state="translated">从&lt;a href=&quot;to-relative-string#kotlin.io%24toRelativeString(java.io.File,%20java.io.File)/base&quot;&gt;基础&lt;/a&gt;文件计算此文件的相对路径。请注意，&lt;a href=&quot;to-relative-string#kotlin.io%24toRelativeString(java.io.File,%20java.io.File)/base&quot;&gt;基本&lt;/a&gt;文件被视为目录。如果此文件与&lt;a href=&quot;to-relative-string#kotlin.io%24toRelativeString(java.io.File,%20java.io.File)/base&quot;&gt;基本&lt;/a&gt;文件匹配，则将返回一个空字符串。</target>
        </trans-unit>
        <trans-unit id="e4c23ba488daeba1fd770b81a98e5adb13047cfd" translate="yes" xml:space="preserve">
          <source>Calculates the remainder of dividing this value by the other value.</source>
          <target state="translated">计算这个值除以另一个值的余数。</target>
        </trans-unit>
        <trans-unit id="136010536931db298ba82e97cf15dfc07366afae" translate="yes" xml:space="preserve">
          <source>Call sites of any declaration annotated with that marker should opt in to the API either by using &lt;a href=&quot;../-opt-in/index&quot;&gt;OptIn&lt;/a&gt;, or by being annotated with that marker themselves, effectively causing further propagation of the opt-in requirement.</source>
          <target state="translated">使用该标记注释的任何声明的调用站点应通过使用&lt;a href=&quot;../-opt-in/index&quot;&gt;OptIn&lt;/a&gt;或通过使用该标记本身注释来选择加入API ，从而有效地导致选择加入需求的进一步传播。</target>
        </trans-unit>
        <trans-unit id="a475764779a5bd7a07bf3e88cacc4002108532f4" translate="yes" xml:space="preserve">
          <source>Callable reference improvements</source>
          <target state="translated">可调用参考的改进</target>
        </trans-unit>
        <trans-unit id="b02983a5c7bff13cbf34d935c1690e2b0833b943" translate="yes" xml:space="preserve">
          <source>Callable references</source>
          <target state="translated">可调用的引用</target>
        </trans-unit>
        <trans-unit id="2f97a910b181d4f0a302c43f82374fb48021ade9" translate="yes" xml:space="preserve">
          <source>Callable references to constructors are typed as one of the &lt;a href=&quot;../../api/latest/jvm/stdlib/kotlin.reflect/-k-function/index&quot;&gt;&lt;code&gt;KFunction&amp;lt;out R&amp;gt;&lt;/code&gt;&lt;/a&gt; subtypes , depending on the parameter count.</source>
          <target state="translated">根据参数计数，对构造函数的可调用引用的类型为&lt;a href=&quot;../../api/latest/jvm/stdlib/kotlin.reflect/-k-function/index&quot;&gt; &lt;code&gt;KFunction&amp;lt;out R&amp;gt;&lt;/code&gt; &lt;/a&gt;子类型之一。</target>
        </trans-unit>
        <trans-unit id="9fdc2cfe374fa5bde1e4e458854875e1709add1c" translate="yes" xml:space="preserve">
          <source>Callbacks</source>
          <target state="translated">Callbacks</target>
        </trans-unit>
        <trans-unit id="3b170cdb6d7fe5181c064cc641c4a8fbcb1cb38b" translate="yes" xml:space="preserve">
          <source>Callbacks are quite common in event-loop architectures such as JavaScript, but even there, generally people have moved away to using other approaches such as promises or reactive extensions.</source>
          <target state="translated">回调在JavaScript等事件循环架构中相当常见,但即使在那里,通常人们也已经不再使用其他方法,如承诺或反应式扩展。</target>
        </trans-unit>
        <trans-unit id="91f63fb778fbf778d23c69d5a31e985a9cacf308" translate="yes" xml:space="preserve">
          <source>Calling</source>
          <target state="translated">Calling</target>
        </trans-unit>
        <trans-unit id="82ed7e2b6c90eb6b1070acfea5700f43fe78f19f" translate="yes" xml:space="preserve">
          <source>Calling &lt;code&gt;x.equals(null)&lt;/code&gt; on a platform type that is mapped to a Java primitive (&lt;code&gt;Int!&lt;/code&gt;, &lt;code&gt;Boolean!&lt;/code&gt;, &lt;code&gt;Short&lt;/code&gt;!, &lt;code&gt;Long!&lt;/code&gt;, &lt;code&gt;Float!&lt;/code&gt;, &lt;code&gt;Double!&lt;/code&gt;, &lt;code&gt;Char!&lt;/code&gt;) incorrectly returned &lt;code&gt;true&lt;/code&gt; when &lt;code&gt;x&lt;/code&gt; was null. Starting with Kotlin 1.2, calling &lt;code&gt;x.equals(...)&lt;/code&gt; on a null value of a platform type &lt;strong&gt;throws an NPE&lt;/strong&gt; (but &lt;code&gt;x == ...&lt;/code&gt; does not).</source>
          <target state="translated">当 &lt;code&gt;x&lt;/code&gt; 为null 时，在映射到Java原语（ &lt;code&gt;Int!&lt;/code&gt; ， &lt;code&gt;Boolean!&lt;/code&gt; ， &lt;code&gt;Short&lt;/code&gt; ！， &lt;code&gt;Long!&lt;/code&gt; ， &lt;code&gt;Float!&lt;/code&gt; ， &lt;code&gt;Double!&lt;/code&gt; ， &lt;code&gt;Char!&lt;/code&gt; ）的平台类型上调用 &lt;code&gt;x.equals(null)&lt;/code&gt; 错误地返回 &lt;code&gt;true&lt;/code&gt; 。从Kotlin 1.2开始，在平台类型的null值上调用 &lt;code&gt;x.equals(...)&lt;/code&gt; &lt;strong&gt;会引发NPE&lt;/strong&gt;（但 &lt;code&gt;x == ...&lt;/code&gt; 不会）。&lt;strong&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="ce77bd198c4fdd31f75068333f1e9ca1ead7f67d" translate="yes" xml:space="preserve">
          <source>Calling C, Objective-C, or Swift from Kotlin/Native is easy. Take a look at the &lt;a href=&quot;../../reference/native/c_interop&quot;&gt;C Interop documentation&lt;/a&gt; or &lt;a href=&quot;../../reference/native/objc_interop&quot;&gt;Objective-C and Swift&lt;/a&gt; interop documentation or check out one of our tutorials.</source>
          <target state="translated">从Kotlin / Native调用C，Objective-C或Swift很容易。查看&lt;a href=&quot;../../reference/native/c_interop&quot;&gt;C Interop文档&lt;/a&gt;或&lt;a href=&quot;../../reference/native/objc_interop&quot;&gt;Objective-C和Swift&lt;/a&gt; interop文档，或查看我们的教程之一。</target>
        </trans-unit>
        <trans-unit id="e0ba673bd2bca89bc54ee880f294a9f9f2f226e8" translate="yes" xml:space="preserve">
          <source>Calling Java code from Kotlin</source>
          <target state="translated">从Kotlin调用Java代码</target>
        </trans-unit>
        <trans-unit id="55681c13b88d07dfffc602e02788732270fea423" translate="yes" xml:space="preserve">
          <source>Calling JavaScript from Kotlin</source>
          <target state="translated">从Kotlin调用JavaScript</target>
        </trans-unit>
        <trans-unit id="e2b579ea1f89a002387cd93af497b90a5db8539b" translate="yes" xml:space="preserve">
          <source>Calling Kotlin Code from Swift</source>
          <target state="translated">从Swift调用Kotlin代码</target>
        </trans-unit>
        <trans-unit id="ce488fd0d2766e3fc2ba951609bc6095995c87b2" translate="yes" xml:space="preserve">
          <source>Calling Kotlin from Java</source>
          <target state="translated">从Java调用Kotlin</target>
        </trans-unit>
        <trans-unit id="505017f99d543d9122c5b377a0db051dc35f2068" translate="yes" xml:space="preserve">
          <source>Calling Kotlin from JavaScript</source>
          <target state="translated">从JavaScript中调用Kotlin</target>
        </trans-unit>
        <trans-unit id="f134d5e9c204c2512c7e7ac6bc8abb68b3048346" translate="yes" xml:space="preserve">
          <source>Calling functions uses the traditional approach:</source>
          <target state="translated">调用函数采用传统的方法。</target>
        </trans-unit>
        <trans-unit id="4dcf024b98fbf79e6047b0b390a06b859f1d6c15" translate="yes" xml:space="preserve">
          <source>Calling member functions uses the dot notation:</source>
          <target state="translated">调用成员函数使用点符号。</target>
        </trans-unit>
        <trans-unit id="52de33d500d0af2ca694a6ba9379af06dbd7ef41" translate="yes" xml:space="preserve">
          <source>Calling multiple methods on an object instance (&lt;code&gt;with&lt;/code&gt;)</source>
          <target state="translated">在对象实例上调用多个方法（ &lt;code&gt;with&lt;/code&gt; ）</target>
        </trans-unit>
        <trans-unit id="23a5f1fe47d421160cd29eb81450feac6c544139" translate="yes" xml:space="preserve">
          <source>Calling the superclass implementation</source>
          <target state="translated">调用超类的实现</target>
        </trans-unit>
        <trans-unit id="49e8442ec63e1fb29a9465d7aac088d1059302a0" translate="yes" xml:space="preserve">
          <source>Calls a callable in the current suspend context. If the callable is not a suspend function, behaves as &lt;a href=&quot;../-k-callable/call&quot;&gt;KCallable.call&lt;/a&gt;. Otherwise, calls the suspend function with current continuation.</source>
          <target state="translated">在当前的挂起上下文中调用可调用对象。如果callable不是暂停函数，则其行为类似于&lt;a href=&quot;../-k-callable/call&quot;&gt;KCallable.call&lt;/a&gt;。否则，以当前继续调用suspend函数。</target>
        </trans-unit>
        <trans-unit id="3a4f744b1c6bac7023f7c3b3cb69de59f8fcc6a3" translate="yes" xml:space="preserve">
          <source>Calls a callable in the current suspend context. If the callable is not a suspend function, behaves as &lt;a href=&quot;../-k-callable/call#kotlin.reflect.KCallable%24call%28kotlin.Array%28%28kotlin.Any%29%29%29&quot;&gt;KCallable.call&lt;/a&gt;. Otherwise, calls the suspend function with current continuation.</source>
          <target state="translated">在当前的挂起上下文中调用可调用对象。如果callable不是暂停函数，则其行为类似于&lt;a href=&quot;../-k-callable/call#kotlin.reflect.KCallable%24call%28kotlin.Array%28%28kotlin.Any%29%29%29&quot;&gt;KCallable.call&lt;/a&gt;。否则，以当前连续性调用suspend函数。</target>
        </trans-unit>
        <trans-unit id="d68fe333acf2d5e03e614e522823b9d64e49fa24" translate="yes" xml:space="preserve">
          <source>Calls a callable in the current suspend context. If the callable is not a suspend function, behaves as &lt;a href=&quot;../-k-callable/call-by&quot;&gt;KCallable.callBy&lt;/a&gt;. Otherwise, calls the suspend function with current continuation.</source>
          <target state="translated">在当前的挂起上下文中调用可调用对象。如果callable不是暂停函数，则其行为类似于&lt;a href=&quot;../-k-callable/call-by&quot;&gt;KCallable.callBy&lt;/a&gt;。否则，以当前继续调用suspend函数。</target>
        </trans-unit>
        <trans-unit id="00132c78556027adc964bfa694608b367cfeda30" translate="yes" xml:space="preserve">
          <source>Calls a callable in the current suspend context. If the callable is not a suspend function, behaves as &lt;a href=&quot;../-k-callable/call-by#kotlin.reflect.KCallable%24callBy%28kotlin.collections.Map%28%28kotlin.reflect.KParameter%2C+kotlin.Any%29%29%29&quot;&gt;KCallable.callBy&lt;/a&gt;. Otherwise, calls the suspend function with current continuation.</source>
          <target state="translated">在当前的挂起上下文中调用可调用对象。如果callable不是暂停函数，则其行为类似于&lt;a href=&quot;../-k-callable/call-by#kotlin.reflect.KCallable%24callBy%28kotlin.collections.Map%28%28kotlin.reflect.KParameter%2C+kotlin.Any%29%29%29&quot;&gt;KCallable.callBy&lt;/a&gt;。否则，以当前连续性调用suspend函数。</target>
        </trans-unit>
        <trans-unit id="8f4300f049c1475df46042d7254c17d1beb9054d" translate="yes" xml:space="preserve">
          <source>Calls a callable in the current suspend context. If the callable is not a suspend function, behaves as &lt;a href=&quot;../kotlin.reflect/-k-callable/call&quot;&gt;KCallable.call&lt;/a&gt;. Otherwise, calls the suspend function with current continuation.</source>
          <target state="translated">在当前的挂起上下文中调用可调用对象。如果callable不是暂停函数，则其行为类似于&lt;a href=&quot;../kotlin.reflect/-k-callable/call&quot;&gt;KCallable.call&lt;/a&gt;。否则，以当前继续调用suspend函数。</target>
        </trans-unit>
        <trans-unit id="24bbbd79f6ee34dd23756da78c71e8b3fadd7434" translate="yes" xml:space="preserve">
          <source>Calls a callable in the current suspend context. If the callable is not a suspend function, behaves as &lt;a href=&quot;../kotlin.reflect/-k-callable/call#kotlin.reflect.KCallable%24call%28kotlin.Array%28%28kotlin.Any%29%29%29&quot;&gt;KCallable.call&lt;/a&gt;. Otherwise, calls the suspend function with current continuation.</source>
          <target state="translated">在当前的挂起上下文中调用可调用对象。如果callable不是暂停函数，则其行为类似于&lt;a href=&quot;../kotlin.reflect/-k-callable/call#kotlin.reflect.KCallable%24call%28kotlin.Array%28%28kotlin.Any%29%29%29&quot;&gt;KCallable.call&lt;/a&gt;。否则，以当前连续性调用suspend函数。</target>
        </trans-unit>
        <trans-unit id="af325880858eb6b1c7b61419993eb5f2c9b848ca" translate="yes" xml:space="preserve">
          <source>Calls a callable in the current suspend context. If the callable is not a suspend function, behaves as &lt;a href=&quot;../kotlin.reflect/-k-callable/call-by&quot;&gt;KCallable.callBy&lt;/a&gt;. Otherwise, calls the suspend function with current continuation.</source>
          <target state="translated">在当前的挂起上下文中调用可调用对象。如果callable不是暂停函数，则其行为类似于&lt;a href=&quot;../kotlin.reflect/-k-callable/call-by&quot;&gt;KCallable.callBy&lt;/a&gt;。否则，以当前继续调用suspend函数。</target>
        </trans-unit>
        <trans-unit id="bb25a28bd54b39c0b2369935d197104098befe35" translate="yes" xml:space="preserve">
          <source>Calls a callable in the current suspend context. If the callable is not a suspend function, behaves as &lt;a href=&quot;../kotlin.reflect/-k-callable/call-by#kotlin.reflect.KCallable%24callBy%28kotlin.collections.Map%28%28kotlin.reflect.KParameter%2C+kotlin.Any%29%29%29&quot;&gt;KCallable.callBy&lt;/a&gt;. Otherwise, calls the suspend function with current continuation.</source>
          <target state="translated">在当前的挂起上下文中调用可调用对象。如果callable不是暂停函数，则其行为类似于&lt;a href=&quot;../kotlin.reflect/-k-callable/call-by#kotlin.reflect.KCallable%24callBy%28kotlin.collections.Map%28%28kotlin.reflect.KParameter%2C+kotlin.Any%29%29%29&quot;&gt;KCallable.callBy&lt;/a&gt;。否则，以当前连续性调用suspend函数。</target>
        </trans-unit>
        <trans-unit id="9c6a42fed689c0990336b51915a5518ec6d56b46" translate="yes" xml:space="preserve">
          <source>Calls a callable in the current suspend context. If the callable is not a suspend function, behaves as &lt;a href=&quot;call&quot;&gt;KCallable.call&lt;/a&gt;. Otherwise, calls the suspend function with current continuation.</source>
          <target state="translated">在当前的挂起上下文中调用可调用对象。如果callable不是暂停函数，则其行为类似于&lt;a href=&quot;call&quot;&gt;KCallable.call&lt;/a&gt;。否则，以当前继续调用suspend函数。</target>
        </trans-unit>
        <trans-unit id="16e87770726bc687dad9595b8d0ae9c25c719694" translate="yes" xml:space="preserve">
          <source>Calls a callable in the current suspend context. If the callable is not a suspend function, behaves as &lt;a href=&quot;call#kotlin.reflect.KCallable%24call%28kotlin.Array%28%28kotlin.Any%29%29%29&quot;&gt;KCallable.call&lt;/a&gt;. Otherwise, calls the suspend function with current continuation.</source>
          <target state="translated">在当前的挂起上下文中调用可调用对象。如果callable不是暂停函数，则其行为类似于&lt;a href=&quot;call#kotlin.reflect.KCallable%24call%28kotlin.Array%28%28kotlin.Any%29%29%29&quot;&gt;KCallable.call&lt;/a&gt;。否则，以当前连续性调用suspend函数。</target>
        </trans-unit>
        <trans-unit id="a58f9bdb67a9b5620cf00e886532cbcfdb449acc" translate="yes" xml:space="preserve">
          <source>Calls a callable in the current suspend context. If the callable is not a suspend function, behaves as &lt;a href=&quot;call-by&quot;&gt;KCallable.callBy&lt;/a&gt;. Otherwise, calls the suspend function with current continuation.</source>
          <target state="translated">在当前的挂起上下文中调用可调用对象。如果callable不是暂停函数，则其行为类似于&lt;a href=&quot;call-by&quot;&gt;KCallable.callBy&lt;/a&gt;。否则，以当前继续调用suspend函数。</target>
        </trans-unit>
        <trans-unit id="5fc64dbbecd3710045a5d9ca426204b2601ce7e2" translate="yes" xml:space="preserve">
          <source>Calls a callable in the current suspend context. If the callable is not a suspend function, behaves as &lt;a href=&quot;call-by#kotlin.reflect.KCallable%24callBy%28kotlin.collections.Map%28%28kotlin.reflect.KParameter%2C+kotlin.Any%29%29%29&quot;&gt;KCallable.callBy&lt;/a&gt;. Otherwise, calls the suspend function with current continuation.</source>
          <target state="translated">在当前的挂起上下文中调用可调用对象。如果callable不是暂停函数，则其行为类似于&lt;a href=&quot;call-by#kotlin.reflect.KCallable%24callBy%28kotlin.collections.Map%28%28kotlin.reflect.KParameter%2C+kotlin.Any%29%29%29&quot;&gt;KCallable.callBy&lt;/a&gt;。否则，以当前连续性调用suspend函数。</target>
        </trans-unit>
        <trans-unit id="b4003362afd6410f2325ecf6e92e3ed0380c6d48" translate="yes" xml:space="preserve">
          <source>Calls of the function will be translated to an assignment of &lt;a href=&quot;set#kotlin.js.Json%24set%28kotlin.String%2C+kotlin.Any%29%2Fvalue&quot;&gt;value&lt;/a&gt; to the receiver indexed (with square brackets/index operation) with &lt;a href=&quot;set#kotlin.js.Json%24set%28kotlin.String%2C+kotlin.Any%29%2FpropertyName&quot;&gt;propertyName&lt;/a&gt;.</source>
          <target state="translated">该函数的调用将转换为使用&lt;a href=&quot;set#kotlin.js.Json%24set%28kotlin.String%2C+kotlin.Any%29%2FpropertyName&quot;&gt;propertyName&lt;/a&gt;索引的接收者的&lt;a href=&quot;set#kotlin.js.Json%24set%28kotlin.String%2C+kotlin.Any%29%2Fvalue&quot;&gt;值&lt;/a&gt;分配（使用方括号/索引操作）。</target>
        </trans-unit>
        <trans-unit id="45277522b9eeea26f4969e17974bd5fc6096a76a" translate="yes" xml:space="preserve">
          <source>Calls of the function will be translated to an assignment of &lt;a href=&quot;set#kotlin.js.Json%24set(kotlin.String,%20kotlin.Any?)/value&quot;&gt;value&lt;/a&gt; to the receiver indexed (with square brackets/index operation) with &lt;a href=&quot;set#kotlin.js.Json%24set(kotlin.String,%20kotlin.Any?)/propertyName&quot;&gt;propertyName&lt;/a&gt;.</source>
          <target state="translated">该函数的调用将转换为使用&lt;a href=&quot;set#kotlin.js.Json%24set(kotlin.String,%20kotlin.Any?)/propertyName&quot;&gt;propertyName&lt;/a&gt;索引（使用方括号/索引操作）索引的接收器的&lt;a href=&quot;set#kotlin.js.Json%24set(kotlin.String,%20kotlin.Any?)/value&quot;&gt;值&lt;/a&gt;分配。</target>
        </trans-unit>
        <trans-unit id="e1cb8690aabe43e450f25dd69e926af342fae97f" translate="yes" xml:space="preserve">
          <source>Calls the &lt;a href=&quot;../use-contents#kotlinx.cinterop%24useContents%28kotlinx.cinterop.CValue%28%28kotlinx.cinterop.useContents.T%29%29%2C+kotlin.Function1%28%28kotlinx.cinterop.useContents.T%2C+kotlinx.cinterop.useContents.R%29%29%29%2Fblock&quot;&gt;block&lt;/a&gt; with temporary copy if this value as receiver.</source>
          <target state="translated">如果此值为接收者，则调用具有临时副本的&lt;a href=&quot;../use-contents#kotlinx.cinterop%24useContents%28kotlinx.cinterop.CValue%28%28kotlinx.cinterop.useContents.T%29%29%2C+kotlin.Function1%28%28kotlinx.cinterop.useContents.T%2C+kotlinx.cinterop.useContents.R%29%29%29%2Fblock&quot;&gt;块&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="45183370c400997886f6171a671f1f8816539b27" translate="yes" xml:space="preserve">
          <source>Calls the &lt;a href=&quot;../use-contents#kotlinx.cinterop%24useContents(kotlinx.cinterop.CValue((kotlinx.cinterop.useContents.T)),%20kotlin.Function1((kotlinx.cinterop.useContents.T,%20kotlinx.cinterop.useContents.R)))/block&quot;&gt;block&lt;/a&gt; with temporary copy of this value as receiver.</source>
          <target state="translated">调用具有该值的临时副本的&lt;a href=&quot;../use-contents#kotlinx.cinterop%24useContents(kotlinx.cinterop.CValue((kotlinx.cinterop.useContents.T)),%20kotlin.Function1((kotlinx.cinterop.useContents.T,%20kotlinx.cinterop.useContents.R)))/block&quot;&gt;块&lt;/a&gt;作为接收器。</target>
        </trans-unit>
        <trans-unit id="94dbeffe712e1c2eb8705fe59d66bb4221e06dab" translate="yes" xml:space="preserve">
          <source>Calls the &lt;a href=&quot;use-contents#kotlinx.cinterop%24useContents%28kotlinx.cinterop.CValue%28%28kotlinx.cinterop.useContents.T%29%29%2C+kotlin.Function1%28%28kotlinx.cinterop.useContents.T%2C+kotlinx.cinterop.useContents.R%29%29%29%2Fblock&quot;&gt;block&lt;/a&gt; with temporary copy if this value as receiver.</source>
          <target state="translated">如果此值为接收者，则调用具有临时副本的&lt;a href=&quot;use-contents#kotlinx.cinterop%24useContents%28kotlinx.cinterop.CValue%28%28kotlinx.cinterop.useContents.T%29%29%2C+kotlin.Function1%28%28kotlinx.cinterop.useContents.T%2C+kotlinx.cinterop.useContents.R%29%29%29%2Fblock&quot;&gt;块&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="9852a8f33812c1134c8e6da645e1bdb807dcd40a" translate="yes" xml:space="preserve">
          <source>Calls the &lt;a href=&quot;use-contents#kotlinx.cinterop%24useContents(kotlinx.cinterop.CValue((kotlinx.cinterop.useContents.T)),%20kotlin.Function1((kotlinx.cinterop.useContents.T,%20kotlinx.cinterop.useContents.R)))/block&quot;&gt;block&lt;/a&gt; with temporary copy of this value as receiver.</source>
          <target state="translated">调用具有该值的临时副本的&lt;a href=&quot;use-contents#kotlinx.cinterop%24useContents(kotlinx.cinterop.CValue((kotlinx.cinterop.useContents.T)),%20kotlin.Function1((kotlinx.cinterop.useContents.T,%20kotlinx.cinterop.useContents.R)))/block&quot;&gt;块&lt;/a&gt;作为接收器。</target>
        </trans-unit>
        <trans-unit id="a9f7cbf9649ace2bd581cd617aa740588ac83868" translate="yes" xml:space="preserve">
          <source>Calls the &lt;a href=&quot;use-lines#kotlin.io%24useLines%28java.io.File%2C+java.nio.charset.Charset%2C+kotlin.Function1%28%28kotlin.sequences.Sequence%28%28kotlin.String%29%29%2C+kotlin.io.useLines.T%29%29%29%2Fblock&quot;&gt;block&lt;/a&gt; callback giving it a sequence of all the lines in this file and closes the reader once the processing is complete.</source>
          <target state="translated">调用&lt;a href=&quot;use-lines#kotlin.io%24useLines%28java.io.File%2C+java.nio.charset.Charset%2C+kotlin.Function1%28%28kotlin.sequences.Sequence%28%28kotlin.String%29%29%2C+kotlin.io.useLines.T%29%29%29%2Fblock&quot;&gt;块&lt;/a&gt;回调，使它获得此文件中所有行的序列，并在处理完成后关闭阅读器。</target>
        </trans-unit>
        <trans-unit id="5ade5306710622e3c8f930ff51884466e52db2fe" translate="yes" xml:space="preserve">
          <source>Calls the &lt;a href=&quot;use-lines#kotlin.io%24useLines%28java.io.Reader%2C+kotlin.Function1%28%28kotlin.sequences.Sequence%28%28kotlin.String%29%29%2C+kotlin.io.useLines.T%29%29%29%2Fblock&quot;&gt;block&lt;/a&gt; callback giving it a sequence of all the lines in this file and closes the reader once the processing is complete.</source>
          <target state="translated">调用&lt;a href=&quot;use-lines#kotlin.io%24useLines%28java.io.Reader%2C+kotlin.Function1%28%28kotlin.sequences.Sequence%28%28kotlin.String%29%29%2C+kotlin.io.useLines.T%29%29%29%2Fblock&quot;&gt;块&lt;/a&gt;回调，使它获得此文件中所有行的序列，并在处理完成后关闭阅读器。</target>
        </trans-unit>
        <trans-unit id="7641779d628967c9d3dca91996c711b5f4369b10" translate="yes" xml:space="preserve">
          <source>Calls the &lt;a href=&quot;use-lines#kotlin.io%24useLines(java.io.File,%20java.nio.charset.Charset,%20kotlin.Function1((kotlin.sequences.Sequence((kotlin.String)),%20kotlin.io.useLines.T)))/block&quot;&gt;block&lt;/a&gt; callback giving it a sequence of all the lines in this file and closes the reader once the processing is complete.</source>
          <target state="translated">调用&lt;a href=&quot;use-lines#kotlin.io%24useLines(java.io.File,%20java.nio.charset.Charset,%20kotlin.Function1((kotlin.sequences.Sequence((kotlin.String)),%20kotlin.io.useLines.T)))/block&quot;&gt;块&lt;/a&gt;回调，使它具有此文件中所有行的序列，并在处理完成后关闭阅读器。</target>
        </trans-unit>
        <trans-unit id="d2aba120e7c67b5bdfb5ca3d303cb48699ba0029" translate="yes" xml:space="preserve">
          <source>Calls the &lt;a href=&quot;use-lines#kotlin.io%24useLines(java.io.Reader,%20kotlin.Function1((kotlin.sequences.Sequence((kotlin.String)),%20kotlin.io.useLines.T)))/block&quot;&gt;block&lt;/a&gt; callback giving it a sequence of all the lines in this file and closes the reader once the processing is complete.</source>
          <target state="translated">调用&lt;a href=&quot;use-lines#kotlin.io%24useLines(java.io.Reader,%20kotlin.Function1((kotlin.sequences.Sequence((kotlin.String)),%20kotlin.io.useLines.T)))/block&quot;&gt;块&lt;/a&gt;回调，使它具有此文件中所有行的序列，并在处理完成后关闭阅读器。</target>
        </trans-unit>
        <trans-unit id="1889a6e188cd0f4fe350c88938dda5aa489e8804" translate="yes" xml:space="preserve">
          <source>Calls the specified function &lt;a href=&quot;../also#kotlin%24also%28kotlin.also.T%2C+kotlin.Function1%28%28kotlin.also.T%2C+kotlin.Unit%29%29%29%2Fblock&quot;&gt;block&lt;/a&gt; with &lt;code&gt;this&lt;/code&gt; value as its argument and returns &lt;code&gt;this&lt;/code&gt; value.</source>
          <target state="translated">以 &lt;code&gt;this&lt;/code&gt; 值作为参数调用指定的功能&lt;a href=&quot;../also#kotlin%24also%28kotlin.also.T%2C+kotlin.Function1%28%28kotlin.also.T%2C+kotlin.Unit%29%29%29%2Fblock&quot;&gt;块&lt;/a&gt;并返回 &lt;code&gt;this&lt;/code&gt; 值。</target>
        </trans-unit>
        <trans-unit id="ffc5f83062a65033fb3fb5428ed9549f186874ee" translate="yes" xml:space="preserve">
          <source>Calls the specified function &lt;a href=&quot;../also#kotlin%24also(kotlin.also.T,%20kotlin.Function1((kotlin.also.T,%20kotlin.Unit)))/block&quot;&gt;block&lt;/a&gt; with &lt;code&gt;this&lt;/code&gt; value as its argument and returns &lt;code&gt;this&lt;/code&gt; value.</source>
          <target state="translated">以 &lt;code&gt;this&lt;/code&gt; 值作为参数调用指定的功能&lt;a href=&quot;../also#kotlin%24also(kotlin.also.T,%20kotlin.Function1((kotlin.also.T,%20kotlin.Unit)))/block&quot;&gt;块&lt;/a&gt;并返回 &lt;code&gt;this&lt;/code&gt; 值。</target>
        </trans-unit>
        <trans-unit id="4ea4db9db43d6976110b20ce1acd16ddca65f35e" translate="yes" xml:space="preserve">
          <source>Calls the specified function &lt;a href=&quot;../apply#kotlin%24apply%28kotlin.apply.T%2C+kotlin.Function1%28%28kotlin.apply.T%2C+kotlin.Unit%29%29%29%2Fblock&quot;&gt;block&lt;/a&gt; with &lt;code&gt;this&lt;/code&gt; value as its receiver and returns &lt;code&gt;this&lt;/code&gt; value.</source>
          <target state="translated">以 &lt;code&gt;this&lt;/code&gt; 值作为接收者调用指定的功能&lt;a href=&quot;../apply#kotlin%24apply%28kotlin.apply.T%2C+kotlin.Function1%28%28kotlin.apply.T%2C+kotlin.Unit%29%29%29%2Fblock&quot;&gt;块&lt;/a&gt;并返回 &lt;code&gt;this&lt;/code&gt; 值。</target>
        </trans-unit>
        <trans-unit id="f8555420120834a4078dc80bcef4a4cd29ecef03" translate="yes" xml:space="preserve">
          <source>Calls the specified function &lt;a href=&quot;../apply#kotlin%24apply(kotlin.apply.T,%20kotlin.Function1((kotlin.apply.T,%20kotlin.Unit)))/block&quot;&gt;block&lt;/a&gt; with &lt;code&gt;this&lt;/code&gt; value as its receiver and returns &lt;code&gt;this&lt;/code&gt; value.</source>
          <target state="translated">调用具有 &lt;code&gt;this&lt;/code&gt; 值的指定功能&lt;a href=&quot;../apply#kotlin%24apply(kotlin.apply.T,%20kotlin.Function1((kotlin.apply.T,%20kotlin.Unit)))/block&quot;&gt;块&lt;/a&gt;作为其接收器，并返回 &lt;code&gt;this&lt;/code&gt; 值。</target>
        </trans-unit>
        <trans-unit id="078209b9459654f8c9167df0074bae80bf4694eb" translate="yes" xml:space="preserve">
          <source>Calls the specified function &lt;a href=&quot;../let#kotlin%24let%28kotlin.let.T%2C+kotlin.Function1%28%28kotlin.let.T%2C+kotlin.let.R%29%29%29%2Fblock&quot;&gt;block&lt;/a&gt; with &lt;code&gt;this&lt;/code&gt; value as its argument and returns its result.</source>
          <target state="translated">以 &lt;code&gt;this&lt;/code&gt; 值作为参数调用指定的功能&lt;a href=&quot;../let#kotlin%24let%28kotlin.let.T%2C+kotlin.Function1%28%28kotlin.let.T%2C+kotlin.let.R%29%29%29%2Fblock&quot;&gt;块&lt;/a&gt;并返回其结果。</target>
        </trans-unit>
        <trans-unit id="d94a1c1fb801d6754021c308c6a900c4670c1ca7" translate="yes" xml:space="preserve">
          <source>Calls the specified function &lt;a href=&quot;../let#kotlin%24let(kotlin.let.T,%20kotlin.Function1((kotlin.let.T,%20kotlin.let.R)))/block&quot;&gt;block&lt;/a&gt; with &lt;code&gt;this&lt;/code&gt; value as its argument and returns its result.</source>
          <target state="translated">以 &lt;code&gt;this&lt;/code&gt; 值作为参数调用指定的功能&lt;a href=&quot;../let#kotlin%24let(kotlin.let.T,%20kotlin.Function1((kotlin.let.T,%20kotlin.let.R)))/block&quot;&gt;块&lt;/a&gt;并返回其结果。</target>
        </trans-unit>
        <trans-unit id="413763cf663eeb76e4cbc6ba24b962a88418bb8c" translate="yes" xml:space="preserve">
          <source>Calls the specified function &lt;a href=&quot;../run#kotlin%24run%28kotlin.run.T%2C+kotlin.Function1%28%28kotlin.run.T%2C+kotlin.run.R%29%29%29%2Fblock&quot;&gt;block&lt;/a&gt; with &lt;code&gt;this&lt;/code&gt; value as its receiver and returns its result.</source>
          <target state="translated">使用 &lt;code&gt;this&lt;/code&gt; 值作为其接收者调用指定的功能&lt;a href=&quot;../run#kotlin%24run%28kotlin.run.T%2C+kotlin.Function1%28%28kotlin.run.T%2C+kotlin.run.R%29%29%29%2Fblock&quot;&gt;块&lt;/a&gt;并返回其结果。</target>
        </trans-unit>
        <trans-unit id="12a612c8e28140fc29ef9647026d723928878fe2" translate="yes" xml:space="preserve">
          <source>Calls the specified function &lt;a href=&quot;../run#kotlin%24run(kotlin.run.T,%20kotlin.Function1((kotlin.run.T,%20kotlin.run.R)))/block&quot;&gt;block&lt;/a&gt; with &lt;code&gt;this&lt;/code&gt; value as its receiver and returns its result.</source>
          <target state="translated">以 &lt;code&gt;this&lt;/code&gt; 值作为其接收者调用指定的功能&lt;a href=&quot;../run#kotlin%24run(kotlin.run.T,%20kotlin.Function1((kotlin.run.T,%20kotlin.run.R)))/block&quot;&gt;块&lt;/a&gt;并返回其结果。</target>
        </trans-unit>
        <trans-unit id="ea859f4a518fc3a1215d13efa61a759c166edce2" translate="yes" xml:space="preserve">
          <source>Calls the specified function &lt;a href=&quot;../run-catching#kotlin%24runCatching%28kotlin.runCatching.T%2C+kotlin.Function1%28%28kotlin.runCatching.T%2C+kotlin.runCatching.R%29%29%29%2Fblock&quot;&gt;block&lt;/a&gt; with &lt;code&gt;this&lt;/code&gt; value as its receiver and returns its encapsulated result if invocation was successful, catching and encapsulating any thrown exception as a failure.</source>
          <target state="translated">调用具有 &lt;code&gt;this&lt;/code&gt; 值的指定功能&lt;a href=&quot;../run-catching#kotlin%24runCatching%28kotlin.runCatching.T%2C+kotlin.Function1%28%28kotlin.runCatching.T%2C+kotlin.runCatching.R%29%29%29%2Fblock&quot;&gt;块&lt;/a&gt;作为其接收者，并在调用成功的情况下返回其封装结果，以捕获并封装任何抛出的异常为失败。</target>
        </trans-unit>
        <trans-unit id="6c950c8cad5ae4a1157f188f4b2bc9789a0e2a03" translate="yes" xml:space="preserve">
          <source>Calls the specified function &lt;a href=&quot;../run-catching#kotlin%24runCatching(kotlin.runCatching.T,%20kotlin.Function1((kotlin.runCatching.T,%20kotlin.runCatching.R)))/block&quot;&gt;block&lt;/a&gt; with &lt;code&gt;this&lt;/code&gt; value as its receiver and returns its encapsulated result if invocation was successful, catching any &lt;a href=&quot;../-throwable/index#kotlin.Throwable&quot;&gt;Throwable&lt;/a&gt; exception that was thrown from the &lt;a href=&quot;../run-catching#kotlin%24runCatching(kotlin.runCatching.T,%20kotlin.Function1((kotlin.runCatching.T,%20kotlin.runCatching.R)))/block&quot;&gt;block&lt;/a&gt; function execution and encapsulating it as a failure.</source>
          <target state="translated">调用指定的功能&lt;a href=&quot;../run-catching#kotlin%24runCatching(kotlin.runCatching.T,%20kotlin.Function1((kotlin.runCatching.T,%20kotlin.runCatching.R)))/block&quot;&gt;块&lt;/a&gt;与 &lt;code&gt;this&lt;/code&gt; 值作为它的接收器并返回其结果封装如果调用是成功的，捕捉任何&lt;a href=&quot;../-throwable/index#kotlin.Throwable&quot;&gt;的Throwable&lt;/a&gt;一个从抛出的异常&lt;a href=&quot;../run-catching#kotlin%24runCatching(kotlin.runCatching.T,%20kotlin.Function1((kotlin.runCatching.T,%20kotlin.runCatching.R)))/block&quot;&gt;块&lt;/a&gt;功能执行和包封它为失败。</target>
        </trans-unit>
        <trans-unit id="27c2788fee2c255105b9cd867f454b646391c644" translate="yes" xml:space="preserve">
          <source>Calls the specified function &lt;a href=&quot;also#kotlin%24also%28kotlin.also.T%2C+kotlin.Function1%28%28kotlin.also.T%2C+kotlin.Unit%29%29%29%2Fblock&quot;&gt;block&lt;/a&gt; with &lt;code&gt;this&lt;/code&gt; value as its argument and returns &lt;code&gt;this&lt;/code&gt; value.</source>
          <target state="translated">以 &lt;code&gt;this&lt;/code&gt; 值作为参数调用指定的功能&lt;a href=&quot;also#kotlin%24also%28kotlin.also.T%2C+kotlin.Function1%28%28kotlin.also.T%2C+kotlin.Unit%29%29%29%2Fblock&quot;&gt;块&lt;/a&gt;并返回 &lt;code&gt;this&lt;/code&gt; 值。</target>
        </trans-unit>
        <trans-unit id="c5cb87faa3b7d5deef0d5037fde19ccc9e576f83" translate="yes" xml:space="preserve">
          <source>Calls the specified function &lt;a href=&quot;also#kotlin%24also(kotlin.also.T,%20kotlin.Function1((kotlin.also.T,%20kotlin.Unit)))/block&quot;&gt;block&lt;/a&gt; with &lt;code&gt;this&lt;/code&gt; value as its argument and returns &lt;code&gt;this&lt;/code&gt; value.</source>
          <target state="translated">以 &lt;code&gt;this&lt;/code&gt; 值作为参数调用指定的功能&lt;a href=&quot;also#kotlin%24also(kotlin.also.T,%20kotlin.Function1((kotlin.also.T,%20kotlin.Unit)))/block&quot;&gt;块&lt;/a&gt;并返回 &lt;code&gt;this&lt;/code&gt; 值。</target>
        </trans-unit>
        <trans-unit id="96d8292022e87d6802505e7709d15b67e7a571b1" translate="yes" xml:space="preserve">
          <source>Calls the specified function &lt;a href=&quot;apply#kotlin%24apply%28kotlin.apply.T%2C+kotlin.Function1%28%28kotlin.apply.T%2C+kotlin.Unit%29%29%29%2Fblock&quot;&gt;block&lt;/a&gt; with &lt;code&gt;this&lt;/code&gt; value as its receiver and returns &lt;code&gt;this&lt;/code&gt; value.</source>
          <target state="translated">以 &lt;code&gt;this&lt;/code&gt; 值作为接收者调用指定的功能&lt;a href=&quot;apply#kotlin%24apply%28kotlin.apply.T%2C+kotlin.Function1%28%28kotlin.apply.T%2C+kotlin.Unit%29%29%29%2Fblock&quot;&gt;块&lt;/a&gt;并返回 &lt;code&gt;this&lt;/code&gt; 值。</target>
        </trans-unit>
        <trans-unit id="fe675097d84b997131f92033e3778ab8e56f6670" translate="yes" xml:space="preserve">
          <source>Calls the specified function &lt;a href=&quot;apply#kotlin%24apply(kotlin.apply.T,%20kotlin.Function1((kotlin.apply.T,%20kotlin.Unit)))/block&quot;&gt;block&lt;/a&gt; with &lt;code&gt;this&lt;/code&gt; value as its receiver and returns &lt;code&gt;this&lt;/code&gt; value.</source>
          <target state="translated">调用具有 &lt;code&gt;this&lt;/code&gt; 值的指定功能&lt;a href=&quot;apply#kotlin%24apply(kotlin.apply.T,%20kotlin.Function1((kotlin.apply.T,%20kotlin.Unit)))/block&quot;&gt;块&lt;/a&gt;作为其接收器，并返回 &lt;code&gt;this&lt;/code&gt; 值。</target>
        </trans-unit>
        <trans-unit id="45184693a76689b4b0ff8737b19972165c51ecf5" translate="yes" xml:space="preserve">
          <source>Calls the specified function &lt;a href=&quot;let#kotlin%24let%28kotlin.let.T%2C+kotlin.Function1%28%28kotlin.let.T%2C+kotlin.let.R%29%29%29%2Fblock&quot;&gt;block&lt;/a&gt; with &lt;code&gt;this&lt;/code&gt; value as its argument and returns its result.</source>
          <target state="translated">以 &lt;code&gt;this&lt;/code&gt; 值作为参数调用指定的功能&lt;a href=&quot;let#kotlin%24let%28kotlin.let.T%2C+kotlin.Function1%28%28kotlin.let.T%2C+kotlin.let.R%29%29%29%2Fblock&quot;&gt;块&lt;/a&gt;并返回其结果。</target>
        </trans-unit>
        <trans-unit id="2cd09c65e920473de74f37f791d2d6974af63c14" translate="yes" xml:space="preserve">
          <source>Calls the specified function &lt;a href=&quot;let#kotlin%24let(kotlin.let.T,%20kotlin.Function1((kotlin.let.T,%20kotlin.let.R)))/block&quot;&gt;block&lt;/a&gt; with &lt;code&gt;this&lt;/code&gt; value as its argument and returns its result.</source>
          <target state="translated">以 &lt;code&gt;this&lt;/code&gt; 值作为参数调用指定的功能&lt;a href=&quot;let#kotlin%24let(kotlin.let.T,%20kotlin.Function1((kotlin.let.T,%20kotlin.let.R)))/block&quot;&gt;块&lt;/a&gt;并返回其结果。</target>
        </trans-unit>
        <trans-unit id="61e00fb8b32476486f65ff02dfd2c83a03e55788" translate="yes" xml:space="preserve">
          <source>Calls the specified function &lt;a href=&quot;run#kotlin%24run%28kotlin.Function0%28%28kotlin.run.R%29%29%29%2Fblock&quot;&gt;block&lt;/a&gt; and returns its result.</source>
          <target state="translated">调用指定的功能&lt;a href=&quot;run#kotlin%24run%28kotlin.Function0%28%28kotlin.run.R%29%29%29%2Fblock&quot;&gt;块&lt;/a&gt;并返回其结果。</target>
        </trans-unit>
        <trans-unit id="2f6f3e400e3e582d57d57f03511dcc626eae7637" translate="yes" xml:space="preserve">
          <source>Calls the specified function &lt;a href=&quot;run#kotlin%24run%28kotlin.run.T%2C+kotlin.Function1%28%28kotlin.run.T%2C+kotlin.run.R%29%29%29%2Fblock&quot;&gt;block&lt;/a&gt; with &lt;code&gt;this&lt;/code&gt; value as its receiver and returns its result.</source>
          <target state="translated">使用 &lt;code&gt;this&lt;/code&gt; 值作为其接收者调用指定的功能&lt;a href=&quot;run#kotlin%24run%28kotlin.run.T%2C+kotlin.Function1%28%28kotlin.run.T%2C+kotlin.run.R%29%29%29%2Fblock&quot;&gt;块&lt;/a&gt;并返回其结果。</target>
        </trans-unit>
        <trans-unit id="a5abd3bf2547ca51ee2777f95feb3288a2bda079" translate="yes" xml:space="preserve">
          <source>Calls the specified function &lt;a href=&quot;run#kotlin%24run(kotlin.Function0((kotlin.run.R)))/block&quot;&gt;block&lt;/a&gt; and returns its result.</source>
          <target state="translated">调用指定的功能&lt;a href=&quot;run#kotlin%24run(kotlin.Function0((kotlin.run.R)))/block&quot;&gt;块&lt;/a&gt;并返回其结果。</target>
        </trans-unit>
        <trans-unit id="8514d9dfffba91d4b5b353f2e13b2edb91c15585" translate="yes" xml:space="preserve">
          <source>Calls the specified function &lt;a href=&quot;run#kotlin%24run(kotlin.run.T,%20kotlin.Function1((kotlin.run.T,%20kotlin.run.R)))/block&quot;&gt;block&lt;/a&gt; with &lt;code&gt;this&lt;/code&gt; value as its receiver and returns its result.</source>
          <target state="translated">以 &lt;code&gt;this&lt;/code&gt; 值作为其接收者调用指定的功能&lt;a href=&quot;run#kotlin%24run(kotlin.run.T,%20kotlin.Function1((kotlin.run.T,%20kotlin.run.R)))/block&quot;&gt;块&lt;/a&gt;并返回其结果。</target>
        </trans-unit>
        <trans-unit id="3b3fcd284f88793a9b63d88de44e6d5308af1e20" translate="yes" xml:space="preserve">
          <source>Calls the specified function &lt;a href=&quot;run-catching#kotlin%24runCatching%28kotlin.Function0%28%28kotlin.runCatching.R%29%29%29%2Fblock&quot;&gt;block&lt;/a&gt; and returns its encapsulated result if invocation was successful, catching and encapsulating any thrown exception as a failure.</source>
          <target state="translated">如果调用成功，则调用指定的功能&lt;a href=&quot;run-catching#kotlin%24runCatching%28kotlin.Function0%28%28kotlin.runCatching.R%29%29%29%2Fblock&quot;&gt;块&lt;/a&gt;并返回其封装结果，将所有引发的异常捕获并封装为失败。</target>
        </trans-unit>
        <trans-unit id="20026c2f1eb5224bc2c942ca5c2ec63f2a4a349d" translate="yes" xml:space="preserve">
          <source>Calls the specified function &lt;a href=&quot;run-catching#kotlin%24runCatching%28kotlin.runCatching.T%2C+kotlin.Function1%28%28kotlin.runCatching.T%2C+kotlin.runCatching.R%29%29%29%2Fblock&quot;&gt;block&lt;/a&gt; with &lt;code&gt;this&lt;/code&gt; value as its receiver and returns its encapsulated result if invocation was successful, catching and encapsulating any thrown exception as a failure.</source>
          <target state="translated">调用具有 &lt;code&gt;this&lt;/code&gt; 值的指定功能&lt;a href=&quot;run-catching#kotlin%24runCatching%28kotlin.runCatching.T%2C+kotlin.Function1%28%28kotlin.runCatching.T%2C+kotlin.runCatching.R%29%29%29%2Fblock&quot;&gt;块&lt;/a&gt;作为其接收者，并在调用成功的情况下返回其封装结果，以捕获并封装任何抛出的异常为失败。</target>
        </trans-unit>
        <trans-unit id="9e44496e77cdbedf1f9acc6231a02f20aaea70a5" translate="yes" xml:space="preserve">
          <source>Calls the specified function &lt;a href=&quot;run-catching#kotlin%24runCatching(kotlin.Function0((kotlin.runCatching.R)))/block&quot;&gt;block&lt;/a&gt; and returns its encapsulated result if invocation was successful, catching any &lt;a href=&quot;-throwable/index#kotlin.Throwable&quot;&gt;Throwable&lt;/a&gt; exception that was thrown from the &lt;a href=&quot;run-catching#kotlin%24runCatching(kotlin.Function0((kotlin.runCatching.R)))/block&quot;&gt;block&lt;/a&gt; function execution and encapsulating it as a failure.</source>
          <target state="translated">如果调用成功，则调用指定的功能&lt;a href=&quot;run-catching#kotlin%24runCatching(kotlin.Function0((kotlin.runCatching.R)))/block&quot;&gt;块&lt;/a&gt;并返回其封装的结果，捕获从&lt;a href=&quot;run-catching#kotlin%24runCatching(kotlin.Function0((kotlin.runCatching.R)))/block&quot;&gt;块&lt;/a&gt;函数执行中引发的任何&lt;a href=&quot;-throwable/index#kotlin.Throwable&quot;&gt;Throwable&lt;/a&gt;异常，并将其封装为失败。</target>
        </trans-unit>
        <trans-unit id="ed7300a67595764d318c95df0168542979bfaa75" translate="yes" xml:space="preserve">
          <source>Calls the specified function &lt;a href=&quot;run-catching#kotlin%24runCatching(kotlin.runCatching.T,%20kotlin.Function1((kotlin.runCatching.T,%20kotlin.runCatching.R)))/block&quot;&gt;block&lt;/a&gt; with &lt;code&gt;this&lt;/code&gt; value as its receiver and returns its encapsulated result if invocation was successful, catching any &lt;a href=&quot;-throwable/index#kotlin.Throwable&quot;&gt;Throwable&lt;/a&gt; exception that was thrown from the &lt;a href=&quot;run-catching#kotlin%24runCatching(kotlin.runCatching.T,%20kotlin.Function1((kotlin.runCatching.T,%20kotlin.runCatching.R)))/block&quot;&gt;block&lt;/a&gt; function execution and encapsulating it as a failure.</source>
          <target state="translated">调用指定的功能&lt;a href=&quot;run-catching#kotlin%24runCatching(kotlin.runCatching.T,%20kotlin.Function1((kotlin.runCatching.T,%20kotlin.runCatching.R)))/block&quot;&gt;块&lt;/a&gt;与 &lt;code&gt;this&lt;/code&gt; 值作为它的接收器并返回其结果封装如果调用是成功的，捕捉任何&lt;a href=&quot;-throwable/index#kotlin.Throwable&quot;&gt;的Throwable&lt;/a&gt;一个从抛出的异常&lt;a href=&quot;run-catching#kotlin%24runCatching(kotlin.runCatching.T,%20kotlin.Function1((kotlin.runCatching.T,%20kotlin.runCatching.R)))/block&quot;&gt;块&lt;/a&gt;功能执行和包封它为失败。</target>
        </trans-unit>
        <trans-unit id="784bc3faccb4d060019a3bd80a8875afbd2bb4a9" translate="yes" xml:space="preserve">
          <source>Calls the specified function &lt;a href=&quot;with#kotlin%24with%28kotlin.with.T%2C+kotlin.Function1%28%28kotlin.with.T%2C+kotlin.with.R%29%29%29%2Fblock&quot;&gt;block&lt;/a&gt; with the given &lt;a href=&quot;with#kotlin%24with%28kotlin.with.T%2C+kotlin.Function1%28%28kotlin.with.T%2C+kotlin.with.R%29%29%29%2Freceiver&quot;&gt;receiver&lt;/a&gt; as its receiver and returns its result.</source>
          <target state="translated">以给定的&lt;a href=&quot;with#kotlin%24with%28kotlin.with.T%2C+kotlin.Function1%28%28kotlin.with.T%2C+kotlin.with.R%29%29%29%2Freceiver&quot;&gt;接收者&lt;/a&gt;作为接收者调用指定的功能&lt;a href=&quot;with#kotlin%24with%28kotlin.with.T%2C+kotlin.Function1%28%28kotlin.with.T%2C+kotlin.with.R%29%29%29%2Fblock&quot;&gt;块&lt;/a&gt;，并返回其结果。</target>
        </trans-unit>
        <trans-unit id="5200d99ada72e1c325bc0c10302bd6c6c1f6ed11" translate="yes" xml:space="preserve">
          <source>Calls the specified function &lt;a href=&quot;with#kotlin%24with(kotlin.with.T,%20kotlin.Function1((kotlin.with.T,%20kotlin.with.R)))/block&quot;&gt;block&lt;/a&gt; with the given &lt;a href=&quot;with#kotlin%24with(kotlin.with.T,%20kotlin.Function1((kotlin.with.T,%20kotlin.with.R)))/receiver&quot;&gt;receiver&lt;/a&gt; as its receiver and returns its result.</source>
          <target state="translated">以给定的&lt;a href=&quot;with#kotlin%24with(kotlin.with.T,%20kotlin.Function1((kotlin.with.T,%20kotlin.with.R)))/receiver&quot;&gt;接收者&lt;/a&gt;作为接收者调用指定的功能&lt;a href=&quot;with#kotlin%24with(kotlin.with.T,%20kotlin.Function1((kotlin.with.T,%20kotlin.with.R)))/block&quot;&gt;块&lt;/a&gt;，并返回其结果。</target>
        </trans-unit>
        <trans-unit id="9f9c8aae32b643ccb905a50a88b964fcc563ff71" translate="yes" xml:space="preserve">
          <source>Calls this callable with the specified list of arguments and returns the result. Throws an exception if the number of specified arguments is not equal to the size of &lt;a href=&quot;../-k-callable/parameters&quot;&gt;parameters&lt;/a&gt;, or if their types do not match the types of the parameters.</source>
          <target state="translated">使用指定的参数列表调用此可调用对象并返回结果。如果指定参数的数量不等于&lt;a href=&quot;../-k-callable/parameters&quot;&gt;参数&lt;/a&gt;的大小，或者它们的类型与参数的类型不匹配，则引发异常。</target>
        </trans-unit>
        <trans-unit id="ddcef407507cfef2cb27a753812e5d889553da91" translate="yes" xml:space="preserve">
          <source>Calls this callable with the specified list of arguments and returns the result. Throws an exception if the number of specified arguments is not equal to the size of &lt;a href=&quot;parameters&quot;&gt;parameters&lt;/a&gt;, or if their types do not match the types of the parameters.</source>
          <target state="translated">使用指定的参数列表调用此可调用对象并返回结果。如果指定参数的数量不等于&lt;a href=&quot;parameters&quot;&gt;参数&lt;/a&gt;的大小，或者它们的类型与参数的类型不匹配，则引发异常。</target>
        </trans-unit>
        <trans-unit id="eb6c73d37b42595e7a7a81d2958c024f90c21195" translate="yes" xml:space="preserve">
          <source>Calls this callable with the specified list of arguments and returns the result. Throws an exception if the number of specified arguments is not equal to the size of &lt;a href=&quot;parameters#kotlin.reflect.KCallable%24parameters&quot;&gt;parameters&lt;/a&gt;, or if their types do not match the types of the parameters.</source>
          <target state="translated">使用指定的参数列表调用此可调用对象并返回结果。如果指定参数的数量不等于&lt;a href=&quot;parameters#kotlin.reflect.KCallable%24parameters&quot;&gt;参数&lt;/a&gt;的大小，或者它们的类型与参数的类型不匹配，则引发异常。</target>
        </trans-unit>
        <trans-unit id="8afb2db5cc87a799faf80833c9012f2a02d23010" translate="yes" xml:space="preserve">
          <source>Calls this callable with the specified mapping of parameters to arguments and returns the result. If a parameter is not found in the mapping and is not optional (as per &lt;a href=&quot;../-k-parameter/is-optional&quot;&gt;KParameter.isOptional&lt;/a&gt;), or its type does not match the type of the provided value, an exception is thrown.</source>
          <target state="translated">使用参数到参数的指定映射来调用此可调用对象并返回结果。如果在映射中找不到参数，并且该参数不是可选参数（根据&lt;a href=&quot;../-k-parameter/is-optional&quot;&gt;KParameter.isOptional&lt;/a&gt;），或者其类型与提供的值的类型不匹配，则会引发异常。</target>
        </trans-unit>
        <trans-unit id="6dce76d0ae19257aa86c427d1a3622b123e09781" translate="yes" xml:space="preserve">
          <source>Calls this callable with the specified mapping of parameters to arguments and returns the result. If a parameter is not found in the mapping and is not optional (as per &lt;a href=&quot;../-k-parameter/is-optional#kotlin.reflect.KParameter%24isOptional&quot;&gt;KParameter.isOptional&lt;/a&gt;), or its type does not match the type of the provided value, an exception is thrown.</source>
          <target state="translated">使用参数到参数的指定映射来调用此可调用对象并返回结果。如果在映射中找不到参数，并且该参数不是可选参数（根据&lt;a href=&quot;../-k-parameter/is-optional#kotlin.reflect.KParameter%24isOptional&quot;&gt;KParameter.isOptional&lt;/a&gt;），或者其类型与提供的值的类型不匹配，则会引发异常。</target>
        </trans-unit>
        <trans-unit id="658854a7f04bb269a4ab8b8fa7d0698e8a68d048" translate="yes" xml:space="preserve">
          <source>Calls to the function will be translated to indexing operation (square brackets) on the receiver with &lt;a href=&quot;get#kotlin.js.Json%24get%28kotlin.String%29%2FpropertyName&quot;&gt;propertyName&lt;/a&gt; as the argument.</source>
          <target state="translated">对该函数的调用将转换为接收器上带有&lt;a href=&quot;get#kotlin.js.Json%24get%28kotlin.String%29%2FpropertyName&quot;&gt;propertyName&lt;/a&gt;作为参数的索引操作（方括号）。</target>
        </trans-unit>
        <trans-unit id="4054b8674e66a28f5bcd000124d242189e7248a5" translate="yes" xml:space="preserve">
          <source>Calls to the function will be translated to indexing operation (square brackets) on the receiver with &lt;a href=&quot;get#kotlin.js.Json%24get(kotlin.String)/propertyName&quot;&gt;propertyName&lt;/a&gt; as the argument.</source>
          <target state="translated">对该函数的调用将转换为接收器上带有&lt;a href=&quot;get#kotlin.js.Json%24get(kotlin.String)/propertyName&quot;&gt;propertyName&lt;/a&gt;作为参数的索引操作（方括号）。</target>
        </trans-unit>
        <trans-unit id="5742a45c495453ef8905065dcf3c63d2eacbb105" translate="yes" xml:space="preserve">
          <source>CallsInPlace</source>
          <target state="translated">CallsInPlace</target>
        </trans-unit>
        <trans-unit id="95efde3ceee47a98cbb5b9bd821507624396f907" translate="yes" xml:space="preserve">
          <source>Can I use Kotlin for Android development?</source>
          <target state="translated">可以使用Kotlin进行Android开发吗?</target>
        </trans-unit>
        <trans-unit id="148f7ac58df24f13b1f6cc0a60796f4f33cd212c" translate="yes" xml:space="preserve">
          <source>Can I use Kotlin for desktop development?</source>
          <target state="translated">我可以使用Kotlin进行桌面开发吗?</target>
        </trans-unit>
        <trans-unit id="08f90b1cc445d8ce0dd63b8cd07c857dbc92b5d2" translate="yes" xml:space="preserve">
          <source>Can I use Kotlin for native development?</source>
          <target state="translated">我可以使用Kotlin进行本地开发吗?</target>
        </trans-unit>
        <trans-unit id="a52843acfecd2cf845ec7b9e2b53bc422496c48c" translate="yes" xml:space="preserve">
          <source>Can I use Kotlin for server-side development?</source>
          <target state="translated">可以使用Kotlin进行服务器端开发吗?</target>
        </trans-unit>
        <trans-unit id="533a1197857a6f927ea423c7b5a49a935adb8221" translate="yes" xml:space="preserve">
          <source>Can I use Kotlin for web development?</source>
          <target state="translated">我可以使用Kotlin进行Web开发吗?</target>
        </trans-unit>
        <trans-unit id="360a50f0c5f3ebe39197bdda61c8cfca5bc66d4c" translate="yes" xml:space="preserve">
          <source>Can be called from JavaScript like this:</source>
          <target state="translated">可以像这样从JavaScript中调用。</target>
        </trans-unit>
        <trans-unit id="e66b23e88be65c506d59a796243b08f90de6931b" translate="yes" xml:space="preserve">
          <source>Can be safely passed between workers, but &lt;a href=&quot;value&quot;&gt;value&lt;/a&gt; can only be accessed on the worker &lt;a href=&quot;index&quot;&gt;WorkerBoundReference&lt;/a&gt; was created on, unless the referred object is frozen too.</source>
          <target state="translated">可以在工作程序之间安全地传递，但是只能在创建工作&lt;a href=&quot;index&quot;&gt;程序&lt;/a&gt;的工作程序上访问&lt;a href=&quot;value&quot;&gt;值&lt;/a&gt;，除非所引用的对象也被冻结。</target>
        </trans-unit>
        <trans-unit id="2499f61f64f34b66ca45aa95905f2afd3ba979f4" translate="yes" xml:space="preserve">
          <source>Can be used as a function that takes 0 arguments and returns the value of the property type &lt;a href=&quot;-getter#R&quot;&gt;R&lt;/a&gt;.</source>
          <target state="translated">可以用作接受0个参数并返回属性类型&lt;a href=&quot;-getter#R&quot;&gt;R&lt;/a&gt;的值的函数。</target>
        </trans-unit>
        <trans-unit id="462dfa03a916d1dcf1056942e46780c805e410cc" translate="yes" xml:space="preserve">
          <source>Can be used as a function that takes 0 arguments and returns the value of the property type &lt;a href=&quot;-getter#V&quot;&gt;V&lt;/a&gt;.</source>
          <target state="translated">可以用作接受0个参数并返回属性类型&lt;a href=&quot;-getter#V&quot;&gt;V&lt;/a&gt;的值的函数。</target>
        </trans-unit>
        <trans-unit id="1e80567b1ef5fffe902f192fbecd0fbc3aacc59f" translate="yes" xml:space="preserve">
          <source>Can be used as a function that takes an argument of type &lt;a href=&quot;-getter#D&quot;&gt;D&lt;/a&gt; (the first receiver), an argument of type &lt;a href=&quot;-getter#E&quot;&gt;E&lt;/a&gt; (the second receiver) and returns the value of the property type &lt;a href=&quot;-getter#R&quot;&gt;R&lt;/a&gt;.</source>
          <target state="translated">可以用作接受&lt;a href=&quot;-getter#D&quot;&gt;D&lt;/a&gt;类型的参数（第一个接收方），&lt;a href=&quot;-getter#E&quot;&gt;E&lt;/a&gt;类型的参数（第二个接收方）并返回属性类型&lt;a href=&quot;-getter#R&quot;&gt;R&lt;/a&gt;的值的函数。</target>
        </trans-unit>
        <trans-unit id="9ca3802ad07f55ab1e95adbe2fb1ae42041c68ae" translate="yes" xml:space="preserve">
          <source>Can be used as a function that takes an argument of type &lt;a href=&quot;-getter#D&quot;&gt;D&lt;/a&gt; (the first receiver), an argument of type &lt;a href=&quot;-getter#E&quot;&gt;E&lt;/a&gt; (the second receiver) and returns the value of the property type &lt;a href=&quot;-getter#V&quot;&gt;V&lt;/a&gt;.</source>
          <target state="translated">可以用作接受&lt;a href=&quot;-getter#D&quot;&gt;D&lt;/a&gt;类型的参数（第一个接收方），&lt;a href=&quot;-getter#E&quot;&gt;E&lt;/a&gt;类型的参数（第二个接收方）并返回属性类型&lt;a href=&quot;-getter#V&quot;&gt;V&lt;/a&gt;的值的函数。</target>
        </trans-unit>
        <trans-unit id="9dbc541fe3c7dd68d1e4e23a374201f0ebf0aa5b" translate="yes" xml:space="preserve">
          <source>Can be used as a function that takes an argument of type &lt;a href=&quot;-getter#T&quot;&gt;T&lt;/a&gt; (the receiver) and returns the value of the property type &lt;a href=&quot;-getter#R&quot;&gt;R&lt;/a&gt;.</source>
          <target state="translated">可用作接受&lt;a href=&quot;-getter#T&quot;&gt;T&lt;/a&gt;类型的参数（接收方）并返回属性类型&lt;a href=&quot;-getter#R&quot;&gt;R&lt;/a&gt;的值的函数。</target>
        </trans-unit>
        <trans-unit id="beba68933be9fab0ec857b78311b31d55cf484f0" translate="yes" xml:space="preserve">
          <source>Can be used as a function that takes an argument of type &lt;a href=&quot;-getter#T&quot;&gt;T&lt;/a&gt; (the receiver) and returns the value of the property type &lt;a href=&quot;-getter#V&quot;&gt;V&lt;/a&gt;.</source>
          <target state="translated">可用作接受&lt;a href=&quot;-getter#T&quot;&gt;T&lt;/a&gt;类型的参数（接收方）并返回属性类型&lt;a href=&quot;-getter#V&quot;&gt;V&lt;/a&gt;的值的函数。</target>
        </trans-unit>
        <trans-unit id="eb03f6cacb746652107428acca7dacd8ec8429f8" translate="yes" xml:space="preserve">
          <source>Can be used as a function that takes an argument of type &lt;a href=&quot;-setter#D&quot;&gt;D&lt;/a&gt; (the first receiver), an argument of type &lt;a href=&quot;-setter#E&quot;&gt;E&lt;/a&gt; (the second receiver), and the new property value and returns &lt;a href=&quot;../../kotlin/-unit/index#kotlin.Unit&quot;&gt;Unit&lt;/a&gt;.</source>
          <target state="translated">可以用作接受&lt;a href=&quot;-setter#D&quot;&gt;D&lt;/a&gt;类型的参数（第一个接收方），&lt;a href=&quot;-setter#E&quot;&gt;E&lt;/a&gt;类型的参数（第二个接收方）和新属性值并返回&lt;a href=&quot;../../kotlin/-unit/index#kotlin.Unit&quot;&gt;Unit的&lt;/a&gt;函数。</target>
        </trans-unit>
        <trans-unit id="ae3115f15974deda92fe9f96be1fea591abfc2d5" translate="yes" xml:space="preserve">
          <source>Can be used as a function that takes new property value as an argument and returns &lt;a href=&quot;../../kotlin/-unit/index#kotlin.Unit&quot;&gt;Unit&lt;/a&gt;.</source>
          <target state="translated">可用作将新属性值作为参数并返回&lt;a href=&quot;../../kotlin/-unit/index#kotlin.Unit&quot;&gt;Unit&lt;/a&gt;的函数。</target>
        </trans-unit>
        <trans-unit id="2ca851a6bf9d692daa6259a9504e49f491303de2" translate="yes" xml:space="preserve">
          <source>Can be used as a function that takes the receiver and the new property value as arguments and returns &lt;a href=&quot;../../kotlin/-unit/index#kotlin.Unit&quot;&gt;Unit&lt;/a&gt;.</source>
          <target state="translated">可用作将接收者和新属性值作为参数并返回&lt;a href=&quot;../../kotlin/-unit/index#kotlin.Unit&quot;&gt;Unit的&lt;/a&gt;函数。</target>
        </trans-unit>
        <trans-unit id="7211c19d616b685daa3bee14cbe71c749d10e4e0" translate="yes" xml:space="preserve">
          <source>CanPlayTypeResult</source>
          <target state="translated">CanPlayTypeResult</target>
        </trans-unit>
        <trans-unit id="f311addd351f862eae7f810f286dddb63f875658" translate="yes" xml:space="preserve">
          <source>Cancellable suspending functions throw &lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/-cancellation-exception/index.html&quot;&gt;CancellationException&lt;/a&gt; on cancellation which can be handled in the usual way. For example, &lt;code&gt;try {...} finally {...}&lt;/code&gt; expression and Kotlin &lt;code&gt;use&lt;/code&gt; function execute their finalization actions normally when a coroutine is cancelled:</source>
          <target state="translated">可取消的挂起函数在取消时抛出&lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/-cancellation-exception/index.html&quot;&gt;CancellationException&lt;/a&gt;，可以用通常的方式处理。例如， &lt;code&gt;try {...} finally {...}&lt;/code&gt; 表达式，并且在取消协程时，Kotlin &lt;code&gt;use&lt;/code&gt; 函数通常会执行其终结操作：</target>
        </trans-unit>
        <trans-unit id="fe5ceba59e434540bf707325daf265a730010867" translate="yes" xml:space="preserve">
          <source>Cancellation and Timeouts</source>
          <target state="translated">取消和超时</target>
        </trans-unit>
        <trans-unit id="b910ee31a35d40d4412d731fa9087eb81dfa6d64" translate="yes" xml:space="preserve">
          <source>Cancellation and exceptions</source>
          <target state="translated">取消和例外情况</target>
        </trans-unit>
        <trans-unit id="bef7bb5e57e5a92b8be6213bc977ef4ea4184ce0" translate="yes" xml:space="preserve">
          <source>Cancellation and timeouts</source>
          <target state="translated">取消和超时</target>
        </trans-unit>
        <trans-unit id="e138f6c99c5aa83be543b10b0ca85c2c01e772b9" translate="yes" xml:space="preserve">
          <source>Cancellation exceptions are transparent and are unwrapped by default:</source>
          <target state="translated">取消异常是透明的,默认情况下是没有包装的。</target>
        </trans-unit>
        <trans-unit id="0e726cdbe302223fdfbec98285ec520b533b2180" translate="yes" xml:space="preserve">
          <source>Cancellation exceptions are transparent and unwrapped by default:</source>
          <target state="translated">取消异常是透明的,默认情况下是没有包装的。</target>
        </trans-unit>
        <trans-unit id="61d367778c32e9ef072df9163bc2b3e7c0641802" translate="yes" xml:space="preserve">
          <source>Cancellation is always propagated through coroutines hierarchy:</source>
          <target state="translated">取消总是通过coroutines层次结构传播。</target>
        </trans-unit>
        <trans-unit id="50c49fe010016b533aec86340ec9452f83af59c6" translate="yes" xml:space="preserve">
          <source>Cancellation is closely related to exceptions. Coroutines internally use &lt;code&gt;CancellationException&lt;/code&gt; for cancellation, these exceptions are ignored by all handlers, so they should be used only as the source of additional debug information, which can be obtained by &lt;code&gt;catch&lt;/code&gt; block. When a coroutine is cancelled using &lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/-job/cancel.html&quot;&gt;Job.cancel&lt;/a&gt;, it terminates, but it does not cancel its parent.</source>
          <target state="translated">取消与异常情况密切相关。协程在内部使用 &lt;code&gt;CancellationException&lt;/code&gt; 进行取消，所有处理程序都将忽略这些异常，因此它们应仅用作其他调试信息的源，可以通过 &lt;code&gt;catch&lt;/code&gt; 块获取这些信息。当使用&lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/-job/cancel.html&quot;&gt;Job.cancel&lt;/a&gt;取消协程时，协程终止，但不取消其父级。</target>
        </trans-unit>
        <trans-unit id="750aa75447df039f202611427dbb0083059a1aa1" translate="yes" xml:space="preserve">
          <source>Cancellation is cooperative</source>
          <target state="translated">取消是合作性的</target>
        </trans-unit>
        <trans-unit id="af14cd9b3ef3f2d110e66bdaac2d65cd831b9258" translate="yes" xml:space="preserve">
          <source>Cancellation is tightly bound with exceptions. Coroutines internally use &lt;code&gt;CancellationException&lt;/code&gt; for cancellation, these exceptions are ignored by all handlers, so they should be used only as the source of additional debug information, which can be obtained by &lt;code&gt;catch&lt;/code&gt; block. When a coroutine is cancelled using &lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/-job/cancel.html&quot;&gt;Job.cancel&lt;/a&gt; without a cause, it terminates, but it does not cancel its parent. Cancelling without cause is a mechanism for parent to cancel its children without cancelling itself.</source>
          <target state="translated">取消与例外紧密相关。协程在内部使用 &lt;code&gt;CancellationException&lt;/code&gt; 进行取消，所有处理程序都将忽略这些异常，因此它们仅应用作其他调试信息的源，可以通过 &lt;code&gt;catch&lt;/code&gt; 块获取这些信息。使用&lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/-job/cancel.html&quot;&gt;Job.cancel无缘无故&lt;/a&gt;取消协程时，协程终止，但不取消其父级。无故取消是父母取消其子女而不取消其自身的一种机制。</target>
        </trans-unit>
        <trans-unit id="8fe9cb2f4c068f9a53d28beb7e018a9bdfa65f1f" translate="yes" xml:space="preserve">
          <source>CancellationException</source>
          <target state="translated">CancellationException</target>
        </trans-unit>
        <trans-unit id="8f5bb7c3df9532ba67a3064437dfd961e456af82" translate="yes" xml:space="preserve">
          <source>Cancelling coroutine execution</source>
          <target state="translated">取消例程执行</target>
        </trans-unit>
        <trans-unit id="f4a22d2703e3410da551d71a6a9f534ae02e9d30" translate="yes" xml:space="preserve">
          <source>Cannot be used in an inline function, to avoid binary compatibility issues.</source>
          <target state="translated">不能在内联函数中使用,以避免二进制兼容性问题。</target>
        </trans-unit>
        <trans-unit id="5f8df748391820d506d96f090af9502a82b32c12" translate="yes" xml:space="preserve">
          <source>CanvasCompositing</source>
          <target state="translated">CanvasCompositing</target>
        </trans-unit>
        <trans-unit id="09942dc0221982f9890a721ea9f36de0a0e818a1" translate="yes" xml:space="preserve">
          <source>CanvasDirection</source>
          <target state="translated">CanvasDirection</target>
        </trans-unit>
        <trans-unit id="8003d7bd1cce03545167120ec47fae8bb4fd91bc" translate="yes" xml:space="preserve">
          <source>CanvasDrawImage</source>
          <target state="translated">CanvasDrawImage</target>
        </trans-unit>
        <trans-unit id="a7732c95e9547581d321c33e851ac915eb0c36fc" translate="yes" xml:space="preserve">
          <source>CanvasDrawPath</source>
          <target state="translated">CanvasDrawPath</target>
        </trans-unit>
        <trans-unit id="4cdc78c4d8f41c91bc82cadd87236babc0770643" translate="yes" xml:space="preserve">
          <source>CanvasFillRule</source>
          <target state="translated">CanvasFillRule</target>
        </trans-unit>
        <trans-unit id="47d85eb146ab47af64e67047d7b645121b5f2b8e" translate="yes" xml:space="preserve">
          <source>CanvasFillStrokeStyles</source>
          <target state="translated">CanvasFillStrokeStyles</target>
        </trans-unit>
        <trans-unit id="621b992ab00c21bac72e0f790c3f252cf5a61f87" translate="yes" xml:space="preserve">
          <source>CanvasFilters</source>
          <target state="translated">CanvasFilters</target>
        </trans-unit>
        <trans-unit id="d0160ae7ea0f13645922c9389a913a3bc5603942" translate="yes" xml:space="preserve">
          <source>CanvasGradient</source>
          <target state="translated">CanvasGradient</target>
        </trans-unit>
        <trans-unit id="f713d15048871df6207bfa21e089a2a692ef1053" translate="yes" xml:space="preserve">
          <source>CanvasHitRegion</source>
          <target state="translated">CanvasHitRegion</target>
        </trans-unit>
        <trans-unit id="8906f16f149f388a30a61d46fb6cec59ecccac6a" translate="yes" xml:space="preserve">
          <source>CanvasImageData</source>
          <target state="translated">CanvasImageData</target>
        </trans-unit>
        <trans-unit id="dff170cc018a3208226df1bb91e1d4672b08d3bd" translate="yes" xml:space="preserve">
          <source>CanvasImageSmoothing</source>
          <target state="translated">CanvasImageSmoothing</target>
        </trans-unit>
        <trans-unit id="4442be0dd384eafda26b362b05089ac6715c4e11" translate="yes" xml:space="preserve">
          <source>CanvasImageSource</source>
          <target state="translated">CanvasImageSource</target>
        </trans-unit>
        <trans-unit id="2bde5288ca2282e29c7d96d81e3a364f7aeca0c0" translate="yes" xml:space="preserve">
          <source>CanvasLineCap</source>
          <target state="translated">CanvasLineCap</target>
        </trans-unit>
        <trans-unit id="33f67d72895f7922cfe60454529fb14da6cb6065" translate="yes" xml:space="preserve">
          <source>CanvasLineJoin</source>
          <target state="translated">CanvasLineJoin</target>
        </trans-unit>
        <trans-unit id="9441f1e6fb843aa677da744a1a6205c97a2b8df5" translate="yes" xml:space="preserve">
          <source>CanvasPath</source>
          <target state="translated">CanvasPath</target>
        </trans-unit>
        <trans-unit id="2e69ad659a7d09f0fad96a6cd38fb311e9d69d40" translate="yes" xml:space="preserve">
          <source>CanvasPathDrawingStyles</source>
          <target state="translated">CanvasPathDrawingStyles</target>
        </trans-unit>
        <trans-unit id="216ebe743f70853d170a1e43971be0c6cfa00f5c" translate="yes" xml:space="preserve">
          <source>CanvasPattern</source>
          <target state="translated">CanvasPattern</target>
        </trans-unit>
        <trans-unit id="3d6c5455d9bd0b85606b3ec0266b9813b1897664" translate="yes" xml:space="preserve">
          <source>CanvasRect</source>
          <target state="translated">CanvasRect</target>
        </trans-unit>
        <trans-unit id="f70215f7e53a7e484dc4fde2bbe97c1b40d128c5" translate="yes" xml:space="preserve">
          <source>CanvasRenderingContext2D</source>
          <target state="translated">CanvasRenderingContext2D</target>
        </trans-unit>
        <trans-unit id="5e8eb1f25e845b2013b3cfae2b62f23783f07a41" translate="yes" xml:space="preserve">
          <source>CanvasRenderingContext2DSettings</source>
          <target state="translated">CanvasRenderingContext2DSettings</target>
        </trans-unit>
        <trans-unit id="d050c138d1cb0ac4e3c761bb874eb26de64c7578" translate="yes" xml:space="preserve">
          <source>CanvasShadowStyles</source>
          <target state="translated">CanvasShadowStyles</target>
        </trans-unit>
        <trans-unit id="b5dcc551f32fbcb66b28107f1a94f9404c7e21a8" translate="yes" xml:space="preserve">
          <source>CanvasState</source>
          <target state="translated">CanvasState</target>
        </trans-unit>
        <trans-unit id="d160f26dca4b3427d128c32e97fce1fcd3f5a667" translate="yes" xml:space="preserve">
          <source>CanvasText</source>
          <target state="translated">CanvasText</target>
        </trans-unit>
        <trans-unit id="ccd125296018ef8e9dfddc7e282e9e51504f9ab7" translate="yes" xml:space="preserve">
          <source>CanvasTextAlign</source>
          <target state="translated">CanvasTextAlign</target>
        </trans-unit>
        <trans-unit id="7454119991d0b51aaec0668356693b8452173d7c" translate="yes" xml:space="preserve">
          <source>CanvasTextBaseline</source>
          <target state="translated">CanvasTextBaseline</target>
        </trans-unit>
        <trans-unit id="bc3f1062e8215f9b7c927e44a40fdb603ee6b86d" translate="yes" xml:space="preserve">
          <source>CanvasTextDrawingStyles</source>
          <target state="translated">CanvasTextDrawingStyles</target>
        </trans-unit>
        <trans-unit id="7c4c59048c03e3b2409c317987dc831784584ec5" translate="yes" xml:space="preserve">
          <source>CanvasTransform</source>
          <target state="translated">CanvasTransform</target>
        </trans-unit>
        <trans-unit id="fa922e9c45ac10511c2e18fc1126b93ead7be130" translate="yes" xml:space="preserve">
          <source>CanvasUserInterface</source>
          <target state="translated">CanvasUserInterface</target>
        </trans-unit>
        <trans-unit id="ca09c54bff74a82bae543ebe259f7452ee8c5293" translate="yes" xml:space="preserve">
          <source>Capabilities</source>
          <target state="translated">Capabilities</target>
        </trans-unit>
        <trans-unit id="c1bbc81661c94e57ff41fa474b6205ffd488374e" translate="yes" xml:space="preserve">
          <source>Capturing &lt;code&gt;when&lt;/code&gt; subject in a variable</source>
          <target state="translated">在变量中捕获主题 &lt;code&gt;when&lt;/code&gt; 捕获</target>
        </trans-unit>
        <trans-unit id="dccd76a7be95de25448b988c15de0da9b509e4af" translate="yes" xml:space="preserve">
          <source>CaretPosition</source>
          <target state="translated">CaretPosition</target>
        </trans-unit>
        <trans-unit id="0afa595bc08d7c995d5d3fedf3540d8738e12b76" translate="yes" xml:space="preserve">
          <source>Carry on solving</source>
          <target state="translated">继续解决</target>
        </trans-unit>
        <trans-unit id="e0f540f92c7222f2992e0ffca4cb3124cdab0766" translate="yes" xml:space="preserve">
          <source>Casting</source>
          <target state="translated">Casting</target>
        </trans-unit>
        <trans-unit id="06a068efbf4ee6a1694ee9df6fe8df0a38390f0a" translate="yes" xml:space="preserve">
          <source>Casting a pointer (including &lt;code&gt;COpaquePointer&lt;/code&gt;) can be done with &lt;code&gt;.reinterpret&amp;lt;T&amp;gt;&lt;/code&gt;, e.g.:</source>
          <target state="translated">可以使用 &lt;code&gt;.reinterpret&amp;lt;T&amp;gt;&lt;/code&gt; 来 &lt;code&gt;COpaquePointer&lt;/code&gt; 转换指针（包括COpaquePointer），例如：</target>
        </trans-unit>
        <trans-unit id="afab4876a4ee3ad31a7923b8299c6fec530ae92d" translate="yes" xml:space="preserve">
          <source>Casting and type testing</source>
          <target state="translated">铸造和型式试验</target>
        </trans-unit>
        <trans-unit id="f861ab8adce922ca7f2432dc6c09aa64671bd8a9" translate="yes" xml:space="preserve">
          <source>Casting between mapped types</source>
          <target state="translated">在映射类型之间进行铸造</target>
        </trans-unit>
        <trans-unit id="caada6c6ec79dcc030dc939a9522d494bdcf2121" translate="yes" xml:space="preserve">
          <source>Casts the given &lt;a href=&quot;../../kotlin.reflect.full/cast#kotlin.reflect.full%24cast%28kotlin.reflect.KClass%28%28kotlin.reflect.full.cast.T%29%29%2C+kotlin.Any%29%2Fvalue&quot;&gt;value&lt;/a&gt; to the class represented by this &lt;a href=&quot;index#kotlin.reflect.KClass&quot;&gt;KClass&lt;/a&gt; object. Throws an exception if the value is &lt;code&gt;null&lt;/code&gt; or if it is not an instance of this class.</source>
          <target state="translated">将给定&lt;a href=&quot;../../kotlin.reflect.full/cast#kotlin.reflect.full%24cast%28kotlin.reflect.KClass%28%28kotlin.reflect.full.cast.T%29%29%2C+kotlin.Any%29%2Fvalue&quot;&gt;值&lt;/a&gt;&lt;a href=&quot;index#kotlin.reflect.KClass&quot;&gt;强制转换&lt;/a&gt;为此KClass对象表示的类。如果该值为 &lt;code&gt;null&lt;/code&gt; 或它不是此类的实例，则抛出异常。</target>
        </trans-unit>
        <trans-unit id="dd85863a99d7bbf5fd5743853dfc458d904cbf86" translate="yes" xml:space="preserve">
          <source>Casts the given &lt;a href=&quot;../../kotlin.reflect.full/cast#kotlin.reflect.full%24cast(kotlin.reflect.KClass((kotlin.reflect.full.cast.T)),%20kotlin.Any?)/value&quot;&gt;value&lt;/a&gt; to the class represented by this &lt;a href=&quot;index#kotlin.reflect.KClass&quot;&gt;KClass&lt;/a&gt; object. Throws an exception if the value is &lt;code&gt;null&lt;/code&gt; or if it is not an instance of this class.</source>
          <target state="translated">将给定&lt;a href=&quot;../../kotlin.reflect.full/cast#kotlin.reflect.full%24cast(kotlin.reflect.KClass((kotlin.reflect.full.cast.T)),%20kotlin.Any?)/value&quot;&gt;值&lt;/a&gt;&lt;a href=&quot;index#kotlin.reflect.KClass&quot;&gt;强制转换&lt;/a&gt;为此KClass对象表示的类。如果该值为 &lt;code&gt;null&lt;/code&gt; 或它不是此类的实例，则抛出异常。</target>
        </trans-unit>
        <trans-unit id="74705e4e7b829069cb479fae6235d3ffa245aae9" translate="yes" xml:space="preserve">
          <source>Casts the given &lt;a href=&quot;../../kotlin.reflect.full/safe-cast#kotlin.reflect.full%24safeCast%28kotlin.reflect.KClass%28%28kotlin.reflect.full.safeCast.T%29%29%2C+kotlin.Any%29%2Fvalue&quot;&gt;value&lt;/a&gt; to the class represented by this &lt;a href=&quot;index#kotlin.reflect.KClass&quot;&gt;KClass&lt;/a&gt; object. Returns &lt;code&gt;null&lt;/code&gt; if the value is &lt;code&gt;null&lt;/code&gt; or if it is not an instance of this class.</source>
          <target state="translated">将给定&lt;a href=&quot;../../kotlin.reflect.full/safe-cast#kotlin.reflect.full%24safeCast%28kotlin.reflect.KClass%28%28kotlin.reflect.full.safeCast.T%29%29%2C+kotlin.Any%29%2Fvalue&quot;&gt;值&lt;/a&gt;&lt;a href=&quot;index#kotlin.reflect.KClass&quot;&gt;强制转换&lt;/a&gt;为此KClass对象表示的类。如果该值为 &lt;code&gt;null&lt;/code&gt; 或它不是此类的实例，则返回 &lt;code&gt;null&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="a65a780dff7278e7485cb16d82c83a8674ad46a3" translate="yes" xml:space="preserve">
          <source>Casts the given &lt;a href=&quot;../../kotlin.reflect.full/safe-cast#kotlin.reflect.full%24safeCast(kotlin.reflect.KClass((kotlin.reflect.full.safeCast.T)),%20kotlin.Any?)/value&quot;&gt;value&lt;/a&gt; to the class represented by this &lt;a href=&quot;index#kotlin.reflect.KClass&quot;&gt;KClass&lt;/a&gt; object. Returns &lt;code&gt;null&lt;/code&gt; if the value is &lt;code&gt;null&lt;/code&gt; or if it is not an instance of this class.</source>
          <target state="translated">将给定&lt;a href=&quot;../../kotlin.reflect.full/safe-cast#kotlin.reflect.full%24safeCast(kotlin.reflect.KClass((kotlin.reflect.full.safeCast.T)),%20kotlin.Any?)/value&quot;&gt;值&lt;/a&gt;&lt;a href=&quot;index#kotlin.reflect.KClass&quot;&gt;强制转换&lt;/a&gt;为此KClass对象表示的类。如果该值为 &lt;code&gt;null&lt;/code&gt; 或它不是此类的实例，则返回 &lt;code&gt;null&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="2ef0ad51b05bc848cbb4440e9fb5228987c93b14" translate="yes" xml:space="preserve">
          <source>Casts the given &lt;a href=&quot;../cast#kotlin.reflect%24cast(kotlin.reflect.KClass((kotlin.reflect.cast.T)),%20kotlin.Any?)/value&quot;&gt;value&lt;/a&gt; to the class represented by this &lt;a href=&quot;index#kotlin.reflect.KClass&quot;&gt;KClass&lt;/a&gt; object. Throws an exception if the value is &lt;code&gt;null&lt;/code&gt; or if it is not an instance of this class.</source>
          <target state="translated">将给定&lt;a href=&quot;../cast#kotlin.reflect%24cast(kotlin.reflect.KClass((kotlin.reflect.cast.T)),%20kotlin.Any?)/value&quot;&gt;值&lt;/a&gt;&lt;a href=&quot;index#kotlin.reflect.KClass&quot;&gt;强制转换&lt;/a&gt;为此KClass对象表示的类。如果该值为 &lt;code&gt;null&lt;/code&gt; 或它不是此类的实例，则抛出异常。</target>
        </trans-unit>
        <trans-unit id="a84723f8e066188ff6d11965a76e9c3a3d0f8feb" translate="yes" xml:space="preserve">
          <source>Casts the given &lt;a href=&quot;../safe-cast#kotlin.reflect%24safeCast(kotlin.reflect.KClass((kotlin.reflect.safeCast.T)),%20kotlin.Any?)/value&quot;&gt;value&lt;/a&gt; to the class represented by this &lt;a href=&quot;index#kotlin.reflect.KClass&quot;&gt;KClass&lt;/a&gt; object. Returns &lt;code&gt;null&lt;/code&gt; if the value is &lt;code&gt;null&lt;/code&gt; or if it is not an instance of this class.</source>
          <target state="translated">将给定&lt;a href=&quot;../safe-cast#kotlin.reflect%24safeCast(kotlin.reflect.KClass((kotlin.reflect.safeCast.T)),%20kotlin.Any?)/value&quot;&gt;值&lt;/a&gt;&lt;a href=&quot;index#kotlin.reflect.KClass&quot;&gt;强制转换&lt;/a&gt;为此KClass对象表示的类。如果该值为 &lt;code&gt;null&lt;/code&gt; 或它不是此类的实例，则返回 &lt;code&gt;null&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="596c5ef4cec8865a3fd608ea6b9c65d9b61064fa" translate="yes" xml:space="preserve">
          <source>Casts the given &lt;a href=&quot;cast#kotlin.reflect%24cast(kotlin.reflect.KClass((kotlin.reflect.cast.T)),%20kotlin.Any?)/value&quot;&gt;value&lt;/a&gt; to the class represented by this &lt;a href=&quot;-k-class/index#kotlin.reflect.KClass&quot;&gt;KClass&lt;/a&gt; object. Throws an exception if the value is &lt;code&gt;null&lt;/code&gt; or if it is not an instance of this class.</source>
          <target state="translated">将给定&lt;a href=&quot;cast#kotlin.reflect%24cast(kotlin.reflect.KClass((kotlin.reflect.cast.T)),%20kotlin.Any?)/value&quot;&gt;值&lt;/a&gt;&lt;a href=&quot;-k-class/index#kotlin.reflect.KClass&quot;&gt;强制转换&lt;/a&gt;为此KClass对象表示的类。如果该值为 &lt;code&gt;null&lt;/code&gt; 或它不是此类的实例，则抛出异常。</target>
        </trans-unit>
        <trans-unit id="17806de484aeab3a47990b82b07a5ef37d5809dc" translate="yes" xml:space="preserve">
          <source>Casts the given &lt;a href=&quot;cast#kotlin.reflect.full%24cast%28kotlin.reflect.KClass%28%28kotlin.reflect.full.cast.T%29%29%2C+kotlin.Any%29%2Fvalue&quot;&gt;value&lt;/a&gt; to the class represented by this &lt;a href=&quot;../kotlin.reflect/-k-class/index#kotlin.reflect.KClass&quot;&gt;KClass&lt;/a&gt; object. Throws an exception if the value is &lt;code&gt;null&lt;/code&gt; or if it is not an instance of this class.</source>
          <target state="translated">将给定&lt;a href=&quot;cast#kotlin.reflect.full%24cast%28kotlin.reflect.KClass%28%28kotlin.reflect.full.cast.T%29%29%2C+kotlin.Any%29%2Fvalue&quot;&gt;值&lt;/a&gt;&lt;a href=&quot;../kotlin.reflect/-k-class/index#kotlin.reflect.KClass&quot;&gt;强制转换&lt;/a&gt;为此KClass对象表示的类。如果该值为 &lt;code&gt;null&lt;/code&gt; 或它不是此类的实例，则抛出异常。</target>
        </trans-unit>
        <trans-unit id="5c66e6c48d91abd62eee8af01bd34b324578314a" translate="yes" xml:space="preserve">
          <source>Casts the given &lt;a href=&quot;cast#kotlin.reflect.full%24cast(kotlin.reflect.KClass((kotlin.reflect.full.cast.T)),%20kotlin.Any?)/value&quot;&gt;value&lt;/a&gt; to the class represented by this &lt;a href=&quot;../kotlin.reflect/-k-class/index#kotlin.reflect.KClass&quot;&gt;KClass&lt;/a&gt; object. Throws an exception if the value is &lt;code&gt;null&lt;/code&gt; or if it is not an instance of this class.</source>
          <target state="translated">将给定&lt;a href=&quot;cast#kotlin.reflect.full%24cast(kotlin.reflect.KClass((kotlin.reflect.full.cast.T)),%20kotlin.Any?)/value&quot;&gt;值&lt;/a&gt;&lt;a href=&quot;../kotlin.reflect/-k-class/index#kotlin.reflect.KClass&quot;&gt;强制转换&lt;/a&gt;为此KClass对象表示的类。如果该值为 &lt;code&gt;null&lt;/code&gt; 或它不是此类的实例，则抛出异常。</target>
        </trans-unit>
        <trans-unit id="d2c5eea39f56aca06d4e9aabc0ef67e4836c97ee" translate="yes" xml:space="preserve">
          <source>Casts the given &lt;a href=&quot;safe-cast#kotlin.reflect%24safeCast(kotlin.reflect.KClass((kotlin.reflect.safeCast.T)),%20kotlin.Any?)/value&quot;&gt;value&lt;/a&gt; to the class represented by this &lt;a href=&quot;-k-class/index#kotlin.reflect.KClass&quot;&gt;KClass&lt;/a&gt; object. Returns &lt;code&gt;null&lt;/code&gt; if the value is &lt;code&gt;null&lt;/code&gt; or if it is not an instance of this class.</source>
          <target state="translated">将给定&lt;a href=&quot;safe-cast#kotlin.reflect%24safeCast(kotlin.reflect.KClass((kotlin.reflect.safeCast.T)),%20kotlin.Any?)/value&quot;&gt;值&lt;/a&gt;&lt;a href=&quot;-k-class/index#kotlin.reflect.KClass&quot;&gt;强制转换&lt;/a&gt;为此KClass对象表示的类。如果该值为 &lt;code&gt;null&lt;/code&gt; 或它不是此类的实例，则返回 &lt;code&gt;null&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="7f684f05770c5e5fe6227b88f6206195e8913c71" translate="yes" xml:space="preserve">
          <source>Casts the given &lt;a href=&quot;safe-cast#kotlin.reflect.full%24safeCast%28kotlin.reflect.KClass%28%28kotlin.reflect.full.safeCast.T%29%29%2C+kotlin.Any%29%2Fvalue&quot;&gt;value&lt;/a&gt; to the class represented by this &lt;a href=&quot;../kotlin.reflect/-k-class/index#kotlin.reflect.KClass&quot;&gt;KClass&lt;/a&gt; object. Returns &lt;code&gt;null&lt;/code&gt; if the value is &lt;code&gt;null&lt;/code&gt; or if it is not an instance of this class.</source>
          <target state="translated">将给定&lt;a href=&quot;safe-cast#kotlin.reflect.full%24safeCast%28kotlin.reflect.KClass%28%28kotlin.reflect.full.safeCast.T%29%29%2C+kotlin.Any%29%2Fvalue&quot;&gt;值&lt;/a&gt;&lt;a href=&quot;../kotlin.reflect/-k-class/index#kotlin.reflect.KClass&quot;&gt;强制转换&lt;/a&gt;为此KClass对象表示的类。如果该值为 &lt;code&gt;null&lt;/code&gt; 或它不是此类的实例，则返回 &lt;code&gt;null&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="17085f418a9e912754c58561f4d0bf75704f7eeb" translate="yes" xml:space="preserve">
          <source>Casts the given &lt;a href=&quot;safe-cast#kotlin.reflect.full%24safeCast(kotlin.reflect.KClass((kotlin.reflect.full.safeCast.T)),%20kotlin.Any?)/value&quot;&gt;value&lt;/a&gt; to the class represented by this &lt;a href=&quot;../kotlin.reflect/-k-class/index#kotlin.reflect.KClass&quot;&gt;KClass&lt;/a&gt; object. Returns &lt;code&gt;null&lt;/code&gt; if the value is &lt;code&gt;null&lt;/code&gt; or if it is not an instance of this class.</source>
          <target state="translated">将给定&lt;a href=&quot;safe-cast#kotlin.reflect.full%24safeCast(kotlin.reflect.KClass((kotlin.reflect.full.safeCast.T)),%20kotlin.Any?)/value&quot;&gt;值&lt;/a&gt;&lt;a href=&quot;../kotlin.reflect/-k-class/index#kotlin.reflect.KClass&quot;&gt;强制转换&lt;/a&gt;为此KClass对象表示的类。如果该值为 &lt;code&gt;null&lt;/code&gt; 或它不是此类的实例，则返回 &lt;code&gt;null&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="87de4f35b1f56e4f943d85acc8373fc7700f69c4" translate="yes" xml:space="preserve">
          <source>Catching declaratively</source>
          <target state="translated">捕捉宣言式的</target>
        </trans-unit>
        <trans-unit id="d29e8d9bd82b9b52fa52ca384e6870b38cfc1fc9" translate="yes" xml:space="preserve">
          <source>Category member</source>
          <target state="translated">类别成员</target>
        </trans-unit>
        <trans-unit id="7ee6423dbf5769ec42af73fdd93989bd70c02881" translate="yes" xml:space="preserve">
          <source>Category members</source>
          <target state="translated">类别成员</target>
        </trans-unit>
        <trans-unit id="0864fac858ae3e068420c0d0cce435ab4447175e" translate="yes" xml:space="preserve">
          <source>Central Processor Unit architecture.</source>
          <target state="translated">中央处理器单元架构。</target>
        </trans-unit>
        <trans-unit id="f794caffb7bfcc084f55b05d1ca3fa848124a5e9" translate="yes" xml:space="preserve">
          <source>Certified Training</source>
          <target state="translated">认证培训</target>
        </trans-unit>
        <trans-unit id="6f733b9e61cac0a722928e275d32ff698a66b2f1" translate="yes" xml:space="preserve">
          <source>Chained call wrapping</source>
          <target state="translated">链式呼叫包装</target>
        </trans-unit>
        <trans-unit id="3a4b881406e2ae26a9e2902309e8e6565af8fd5b" translate="yes" xml:space="preserve">
          <source>Change code in the &lt;code&gt;main()&lt;/code&gt; function:</source>
          <target state="translated">在 &lt;code&gt;main()&lt;/code&gt; 函数中更改代码：</target>
        </trans-unit>
        <trans-unit id="4e75040feac6ee4bb2569d89ac315665cd50741f" translate="yes" xml:space="preserve">
          <source>Change initialization order of default values for tail-recursive optimized functions</source>
          <target state="translated">改变尾部递归优化函数默认值的初始化顺序。</target>
        </trans-unit>
        <trans-unit id="e4dc9a376c1de3440705bee8130001f0839ed8f4" translate="yes" xml:space="preserve">
          <source>Change the code in the &lt;code&gt;main()&lt;/code&gt; function:</source>
          <target state="translated">更改 &lt;code&gt;main()&lt;/code&gt; 函数中的代码：</target>
        </trans-unit>
        <trans-unit id="8c8d9bafca395fd68d0583bf246beaa81a14eb4c" translate="yes" xml:space="preserve">
          <source>Change the code of &lt;code&gt;styledDiv&lt;/code&gt; to show your name backwards.</source>
          <target state="translated">更改 &lt;code&gt;styledDiv&lt;/code&gt; 的代码以向后显示您的姓名。</target>
        </trans-unit>
        <trans-unit id="05e60bcec0fc53366265012fa27c3b7a16dddc37" translate="yes" xml:space="preserve">
          <source>Changed behavior of signature-polymorphic calls to methods with a single vararg parameter to avoid wrapping the argument into another array</source>
          <target state="translated">改变了使用单一vararg参数对方法进行签名多态调用的行为,以避免将参数包装到另一个数组中。</target>
        </trans-unit>
        <trans-unit id="89047ec8287cdeae04e682f31396523718cf2fac" translate="yes" xml:space="preserve">
          <source>Changes in &lt;code&gt;both&lt;/code&gt; mode</source>
          <target state="translated">&lt;code&gt;both&lt;/code&gt; 模式的变化</target>
        </trans-unit>
        <trans-unit id="1e953b515f0be6159648a2b4236cb5ba2614361a" translate="yes" xml:space="preserve">
          <source>Changes related to Dukat</source>
          <target state="translated">与Dukat有关的变化</target>
        </trans-unit>
        <trans-unit id="efb8483fa34f64960a5c03c627be6fd44b8b91e6" translate="yes" xml:space="preserve">
          <source>Changes related to npm dependency management</source>
          <target state="translated">与npm依赖性管理相关的变更</target>
        </trans-unit>
        <trans-unit id="f17288305c81b777b41af9eb4f0f45dfe5818909" translate="yes" xml:space="preserve">
          <source>Changes related to the Kotlin/JS IR compiler</source>
          <target state="translated">与Kotlin/JS IR编译器相关的变更。</target>
        </trans-unit>
        <trans-unit id="408514ef0724e60f622a362d62d48e79d5764d84" translate="yes" xml:space="preserve">
          <source>Changes the interpretation of the pointed data or code.</source>
          <target state="translated">改变指向数据或代码的解释。</target>
        </trans-unit>
        <trans-unit id="ce4866daf3ad76485c588ff66ed11dee1d37a911" translate="yes" xml:space="preserve">
          <source>Changes the value associated with the key of this entry.</source>
          <target state="translated">改变与该条目的键相关的值。</target>
        </trans-unit>
        <trans-unit id="dc88027e6a741f779cd748b3363d72a9b962829a" translate="yes" xml:space="preserve">
          <source>Changing formatting in an existing project is a far more demanding task, and should probably be started with discussing all the caveats with the team.</source>
          <target state="translated">在现有项目中改变格式是一项要求更高的任务,可能应该先和团队讨论所有的注意事项。</target>
        </trans-unit>
        <trans-unit id="f608880dded647afc69260b9caee61cf457fbb6c" translate="yes" xml:space="preserve">
          <source>Changing private/internal APIs and other implementation details.</source>
          <target state="translated">更改私有/内部API和其他实施细节。</target>
        </trans-unit>
        <trans-unit id="82106f167628c6561286c36dfbc3393f7b40b4a7" translate="yes" xml:space="preserve">
          <source>Changing view caching strategy</source>
          <target state="translated">改变视图缓存策略</target>
        </trans-unit>
        <trans-unit id="393cd35fac39b9caaf9b9071bd6fedd830588212" translate="yes" xml:space="preserve">
          <source>Channel basics</source>
          <target state="translated">渠道基础知识</target>
        </trans-unit>
        <trans-unit id="18e03e2a37ba37df713f9665ef752fb8b40fc1e8" translate="yes" xml:space="preserve">
          <source>Channels</source>
          <target state="translated">Channels</target>
        </trans-unit>
        <trans-unit id="108ee9713a43e6c2693880416acf1ae998bc68ce" translate="yes" xml:space="preserve">
          <source>Channels (experimental)</source>
          <target state="translated">渠道(实验性)</target>
        </trans-unit>
        <trans-unit id="bf292fdd1f7874feb3dfc0dbb4202def57bef472" translate="yes" xml:space="preserve">
          <source>Channels are fair</source>
          <target state="translated">渠道是公平的</target>
        </trans-unit>
        <trans-unit id="0f9ba953e35135a3f8ec268817cc92f2557202a9" translate="yes" xml:space="preserve">
          <source>Char</source>
          <target state="translated">Char</target>
        </trans-unit>
        <trans-unit id="60bf8f54a68be267ea77345590ac5cd8abb74e72" translate="yes" xml:space="preserve">
          <source>Char sequences and strings in addition have an &lt;code&gt;ifBlank&lt;/code&gt; extension that does the same thing as &lt;code&gt;ifEmpty&lt;/code&gt;, but checks for a string being all whitespace instead of empty.</source>
          <target state="translated">Char序列和字符串还具有 &lt;code&gt;ifBlank&lt;/code&gt; 扩展名，该扩展名与 &lt;code&gt;ifEmpty&lt;/code&gt; 相同，但是将检查字符串是否全部为空格而不是空。</target>
        </trans-unit>
        <trans-unit id="96e256b8b38d7493b5984a01d0b76b7f5e161e6b" translate="yes" xml:space="preserve">
          <source>CharArray</source>
          <target state="translated">CharArray</target>
        </trans-unit>
        <trans-unit id="21662f73ab2c143506e074e7125d2912962bc742" translate="yes" xml:space="preserve">
          <source>CharCategory</source>
          <target state="translated">CharCategory</target>
        </trans-unit>
        <trans-unit id="8641be6480d061955a6a6512333655fc98b529c1" translate="yes" xml:space="preserve">
          <source>CharDirectionality</source>
          <target state="translated">CharDirectionality</target>
        </trans-unit>
        <trans-unit id="824cfd3af26160879c2ac3cf561cedcd0a7c7144" translate="yes" xml:space="preserve">
          <source>CharIterator</source>
          <target state="translated">CharIterator</target>
        </trans-unit>
        <trans-unit id="a70f42f3e09977366c4370d5cd2eee5b60b64955" translate="yes" xml:space="preserve">
          <source>CharProgression</source>
          <target state="translated">CharProgression</target>
        </trans-unit>
        <trans-unit id="6cb20d661b17f81e907c62549a515c0ae1a62ae3" translate="yes" xml:space="preserve">
          <source>CharRange</source>
          <target state="translated">CharRange</target>
        </trans-unit>
        <trans-unit id="ee352e16ffeb4d6a086bccab16f296b15acb8cc9" translate="yes" xml:space="preserve">
          <source>CharSequence</source>
          <target state="translated">CharSequence</target>
        </trans-unit>
        <trans-unit id="9a15e38982ff9afc3765678f3881aff1f68a57d8" translate="yes" xml:space="preserve">
          <source>CharSequence.groupingBy</source>
          <target state="translated">CharSequence.groupingBy</target>
        </trans-unit>
        <trans-unit id="97d0ead8789ade10e4a920bf34f6297222355263" translate="yes" xml:space="preserve">
          <source>Character literals go in single quotes: &lt;code&gt;'1'&lt;/code&gt;. Special characters can be escaped using a backslash. The following escape sequences are supported: &lt;code&gt;\t&lt;/code&gt;, &lt;code&gt;\b&lt;/code&gt;, &lt;code&gt;\n&lt;/code&gt;, &lt;code&gt;\r&lt;/code&gt;, &lt;code&gt;\'&lt;/code&gt;, &lt;code&gt;\&quot;&lt;/code&gt;, &lt;code&gt;\\&lt;/code&gt; and &lt;code&gt;\$&lt;/code&gt;. To encode any other character, use the Unicode escape sequence syntax: &lt;code&gt;'\uFF00'&lt;/code&gt;.</source>
          <target state="translated">字符文字用单引号引起来： &lt;code&gt;'1'&lt;/code&gt; 。特殊字符可以使用反斜杠转义。支持以下转义序列： &lt;code&gt;\t&lt;/code&gt; ， &lt;code&gt;\b&lt;/code&gt; ， &lt;code&gt;\n&lt;/code&gt; ， &lt;code&gt;\r&lt;/code&gt; ， &lt;code&gt;\'&lt;/code&gt; ， &lt;code&gt;\&quot;&lt;/code&gt; ， &lt;code&gt;\\&lt;/code&gt; 和 &lt;code&gt;\$&lt;/code&gt; 要编码任何其他字符，请使用Unicode转义序列语法： &lt;code&gt;'\uFF00'&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="2c42a0a3569b629a7af93ad1c987fd90967c0fca" translate="yes" xml:space="preserve">
          <source>Character.toTitleCase</source>
          <target state="translated">Character.toTitleCase</target>
        </trans-unit>
        <trans-unit id="fadd9e5c9325f42cc90e4dcfd5e60c57c2fbe46a" translate="yes" xml:space="preserve">
          <source>CharacterCodingException</source>
          <target state="translated">CharacterCodingException</target>
        </trans-unit>
        <trans-unit id="b6f59f08fd6d58c6725e21a9ec24e068148ec586" translate="yes" xml:space="preserve">
          <source>Characters</source>
          <target state="translated">Characters</target>
        </trans-unit>
        <trans-unit id="5bf45f96c6df26b4632980c61c8cdb78cca3a785" translate="yes" xml:space="preserve">
          <source>Characters are appended in order, starting at specified &lt;a href=&quot;append-range#kotlin.text%24appendRange(java.lang.StringBuilder,%20kotlin.CharArray,%20kotlin.Int,%20kotlin.Int)/startIndex&quot;&gt;startIndex&lt;/a&gt;.</source>
          <target state="translated">从指定的&lt;a href=&quot;append-range#kotlin.text%24appendRange(java.lang.StringBuilder,%20kotlin.CharArray,%20kotlin.Int,%20kotlin.Int)/startIndex&quot;&gt;startIndex&lt;/a&gt;开始，字符将按顺序追加。</target>
        </trans-unit>
        <trans-unit id="e9c2d8ccf17d46ee32ffd6555478a2a0d29174b4" translate="yes" xml:space="preserve">
          <source>Characters are appended in order, starting at specified &lt;a href=&quot;append-range#kotlin.text%24appendRange(kotlin.text.StringBuilder,%20kotlin.CharArray,%20kotlin.Int,%20kotlin.Int)/startIndex&quot;&gt;startIndex&lt;/a&gt;.</source>
          <target state="translated">从指定的&lt;a href=&quot;append-range#kotlin.text%24appendRange(kotlin.text.StringBuilder,%20kotlin.CharArray,%20kotlin.Int,%20kotlin.Int)/startIndex&quot;&gt;startIndex&lt;/a&gt;开始，字符将按顺序追加。</target>
        </trans-unit>
        <trans-unit id="aebd5119668faca0be1ed34e6635f5f07d62ef9e" translate="yes" xml:space="preserve">
          <source>Characters are appended in order, starting at specified &lt;a href=&quot;append-range#kotlin.text.StringBuilder%24appendRange(kotlin.CharArray,%20kotlin.Int,%20kotlin.Int)/startIndex&quot;&gt;startIndex&lt;/a&gt;.</source>
          <target state="translated">从指定的&lt;a href=&quot;append-range#kotlin.text.StringBuilder%24appendRange(kotlin.CharArray,%20kotlin.Int,%20kotlin.Int)/startIndex&quot;&gt;startIndex&lt;/a&gt;开始，字符将按顺序追加。</target>
        </trans-unit>
        <trans-unit id="d1e46233d431f9c51818e3cad5a41555704e7a02" translate="yes" xml:space="preserve">
          <source>Characters are appended in order, starting at the index 0.</source>
          <target state="translated">字符按顺序依次追加,从索引0开始。</target>
        </trans-unit>
        <trans-unit id="fadf7e4792cf64d3aad517d37493baa9735d2001" translate="yes" xml:space="preserve">
          <source>Characters are represented by the type &lt;code&gt;Char&lt;/code&gt;. They can not be treated directly as numbers</source>
          <target state="translated">字符由 &lt;code&gt;Char&lt;/code&gt; 类型表示。它们不能直接视为数字</target>
        </trans-unit>
        <trans-unit id="23621907080a3a764c144af18d2a2f9bab0a9bbf" translate="yes" xml:space="preserve">
          <source>Charsets</source>
          <target state="translated">Charsets</target>
        </trans-unit>
        <trans-unit id="2c9a8a19d661b6c61dde01e1d01b64f74e2cb6a1" translate="yes" xml:space="preserve">
          <source>Check for index overflow in operations on very long sequences</source>
          <target state="translated">在对很长的序列进行操作时,检查是否有索引溢出。</target>
        </trans-unit>
        <trans-unit id="6302726c69077b4ebc4c3c46eb49bb79de6c708d" translate="yes" xml:space="preserve">
          <source>Check if a number is out of range:</source>
          <target state="translated">检查数字是否超出范围。</target>
        </trans-unit>
        <trans-unit id="437dbbaade4ad3f4d69fe740f4906d71a2d5bd91" translate="yes" xml:space="preserve">
          <source>Check if a number is within a range using &lt;em&gt;in&lt;/em&gt; operator:</source>
          <target state="translated">使用&lt;em&gt;in&lt;/em&gt;运算符检查数字是否在范围内：</target>
        </trans-unit>
        <trans-unit id="6f1ff728312029597a3cdf34ffddcf123b633c0b" translate="yes" xml:space="preserve">
          <source>Check if byte order of the current platform is least significant byte (LSB) first, aka little endian.</source>
          <target state="translated">检查当前平台的字节顺序是否为最小意义字节(LSB)优先,也就是小恩迪安。</target>
        </trans-unit>
        <trans-unit id="002be62cf9683291e0190eaeea12582af2b85579" translate="yes" xml:space="preserve">
          <source>Check if current architecture allows unaligned access to wider than byte locations.</source>
          <target state="translated">检查当前架构是否允许不对齐地访问比字节宽的位置。</target>
        </trans-unit>
        <trans-unit id="d12264046294a607009128dce650e88cdebfb5ee" translate="yes" xml:space="preserve">
          <source>Check out Google's &lt;a href=&quot;https://developer.android.com/samples/index.html?language=kotlin&quot;&gt;sample projects written in Kotlin&lt;/a&gt;</source>
          <target state="translated">查看Google &lt;a href=&quot;https://developer.android.com/samples/index.html?language=kotlin&quot;&gt;用Kotlin编写&lt;/a&gt;的示例项目</target>
        </trans-unit>
        <trans-unit id="32f9c2b405a5dcb99423a9a7deeb9fd7abfa9155" translate="yes" xml:space="preserve">
          <source>Check out Google's &lt;a href=&quot;https://developer.android.com/samples/index.html?language=kotlin&quot;&gt;sample projects written in Kotlin&lt;/a&gt;.</source>
          <target state="translated">查看Google &lt;a href=&quot;https://developer.android.com/samples/index.html?language=kotlin&quot;&gt;用Kotlin编写&lt;/a&gt;的示例项目。</target>
        </trans-unit>
        <trans-unit id="dd5227f9f4a39f59e3876127ca9d153d17114301" translate="yes" xml:space="preserve">
          <source>Check out Kotlin kernel's &lt;a href=&quot;https://github.com/Kotlin/kotlin-jupyter&quot;&gt;GitHub repo&lt;/a&gt; for installation instructions, documentation, and examples.</source>
          <target state="translated">查看Kotlin内核的&lt;a href=&quot;https://github.com/Kotlin/kotlin-jupyter&quot;&gt;GitHub存储库&lt;/a&gt;以获取安装说明，文档和示例。</target>
        </trans-unit>
        <trans-unit id="828f18a3be03d9146dec69ac49c4bd19ead986fc" translate="yes" xml:space="preserve">
          <source>Check out these community resources for more information:</source>
          <target state="translated">查看这些社区资源,了解更多信息。</target>
        </trans-unit>
        <trans-unit id="eaab21c120a02f8f271c9ce55ca3512ab2f45c52" translate="yes" xml:space="preserve">
          <source>Check task names</source>
          <target state="translated">检查任务名称</target>
        </trans-unit>
        <trans-unit id="c5e5903252d787f2e42789ac3746244fca14626d" translate="yes" xml:space="preserve">
          <source>Check that the provided name is not &lt;code&gt;null&lt;/code&gt; with the &lt;a href=&quot;../../reference/null-safety#safe-calls&quot;&gt;safe call operator &lt;code&gt;?.&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">使用&lt;a href=&quot;../../reference/null-safety#safe-calls&quot;&gt;安全呼叫运算符&lt;/a&gt; &lt;code&gt;?.&lt;/code&gt; 检查提供的名称是否不为 &lt;code&gt;null&lt;/code&gt; 。。</target>
        </trans-unit>
        <trans-unit id="c7661384a3c3bb6e9a4e804c90aab56c34668852" translate="yes" xml:space="preserve">
          <source>Check the article on &lt;a href=&quot;js-modules&quot;&gt;JavaScript Modules&lt;/a&gt; for more information on the topic of JavaScript module systems.</source>
          <target state="translated">查看有关&lt;a href=&quot;js-modules&quot;&gt;JavaScript模块&lt;/a&gt;的文章，以获取有关JavaScript模块系统主题的更多信息。</target>
        </trans-unit>
        <trans-unit id="75ea8b1321f2ff23323e36e9007412f9ea7cb89d" translate="yes" xml:space="preserve">
          <source>Check the state of each coroutine.</source>
          <target state="translated">检查每个coroutine的状态。</target>
        </trans-unit>
        <trans-unit id="bdd6123137de702f436047140d71c49115801465" translate="yes" xml:space="preserve">
          <source>Check uploading to Bintray</source>
          <target state="translated">检查上传至Bintray</target>
        </trans-unit>
        <trans-unit id="35422006e8d54d6f2507a81fb7e5e2f61dc9a1c2" translate="yes" xml:space="preserve">
          <source>Checked Exceptions</source>
          <target state="translated">已检查的例外情况</target>
        </trans-unit>
        <trans-unit id="98a9a776f2f953ab47ef42b85ea71e9ed6294243" translate="yes" xml:space="preserve">
          <source>Checked exceptions</source>
          <target state="translated">已检查的例外情况</target>
        </trans-unit>
        <trans-unit id="2ec920cf6ce1fcceef744b1c29c435b940c5e602" translate="yes" xml:space="preserve">
          <source>Checking element presence in a collection.</source>
          <target state="translated">检查元素在集合中的存在。</target>
        </trans-unit>
        <trans-unit id="bb584694ea104d07fd8e3e713d92e78671008e54" translate="yes" xml:space="preserve">
          <source>Checking existence</source>
          <target state="translated">检查是否存在</target>
        </trans-unit>
        <trans-unit id="982a79cfb4460f5939ed66b600c478a6fae01222" translate="yes" xml:space="preserve">
          <source>Checking for &lt;em&gt;null&lt;/em&gt; in conditions</source>
          <target state="translated">检查条件是否为&lt;em&gt;空&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="1cb7384b892c58af751e12a8ef40d8881cb78d9e" translate="yes" xml:space="preserve">
          <source>Checking if a collection contains an object using &lt;em&gt;in&lt;/em&gt; operator:</source>
          <target state="translated">使用&lt;em&gt;in&lt;/em&gt;运算符检查集合是否包含对象：</target>
        </trans-unit>
        <trans-unit id="235091c4a32de30040c5d6e2f8c341a72de7afe8" translate="yes" xml:space="preserve">
          <source>Checking whether a lateinit var is initialized</source>
          <target state="translated">检查 lateinit var 是否被初始化</target>
        </trans-unit>
        <trans-unit id="336ccf337bda950aa1251870eec811ff97defc2c" translate="yes" xml:space="preserve">
          <source>Checking whether a lateinit var is initialized (since 1.2)</source>
          <target state="translated">检查 lateinit var 是否被初始化(从 1.2 开始)。</target>
        </trans-unit>
        <trans-unit id="8307a11bdb066aa396828f11f29d2218a40cc7b1" translate="yes" xml:space="preserve">
          <source>Checks if all elements in the specified collection are contained in this collection.</source>
          <target state="translated">检查指定集合中的所有元素是否都包含在这个集合中。</target>
        </trans-unit>
        <trans-unit id="aadab33726938c4885c5b9db839a1f312e4be197" translate="yes" xml:space="preserve">
          <source>Checks if array can contain element of type &lt;a href=&quot;../../kotlin.jvm/is-array-of#T&quot;&gt;T&lt;/a&gt;.</source>
          <target state="translated">检查数组是否可以包含类型&lt;a href=&quot;../../kotlin.jvm/is-array-of#T&quot;&gt;T的&lt;/a&gt;元素。</target>
        </trans-unit>
        <trans-unit id="0a8cd7e5d1bb6108e937a6ba52d06771ed507424" translate="yes" xml:space="preserve">
          <source>Checks if array can contain element of type &lt;a href=&quot;is-array-of#T&quot;&gt;T&lt;/a&gt;.</source>
          <target state="translated">检查数组是否可以包含类型&lt;a href=&quot;is-array-of#T&quot;&gt;T的&lt;/a&gt;元素。</target>
        </trans-unit>
        <trans-unit id="1306a9d3f7c4c4e6912b118b0ddf002407e419eb" translate="yes" xml:space="preserve">
          <source>Checks if given object is null or frozen or permanent (i.e. instantiated at compile-time).</source>
          <target state="translated">检查给定对象是否为null或冻结或永久(即在编译时实例化)。</target>
        </trans-unit>
        <trans-unit id="98b70cdece60c84edab0266cf8f6296652ba19f7" translate="yes" xml:space="preserve">
          <source>Checks if the codepoint specified is a supplementary codepoint or not.</source>
          <target state="translated">检查指定的代码点是否为补充代码点。</target>
        </trans-unit>
        <trans-unit id="2a36d0e4973d0f3959414858b0a9dfbc86f01816" translate="yes" xml:space="preserve">
          <source>Checks if the map contains the given key.</source>
          <target state="translated">检查地图是否包含给定的密钥。</target>
        </trans-unit>
        <trans-unit id="061db2f7932872d8018e195128e8af7749c72a09" translate="yes" xml:space="preserve">
          <source>Checks if the progression is empty.</source>
          <target state="translated">检查进度是否为空。</target>
        </trans-unit>
        <trans-unit id="49a5b83beb19902a752e95a6b222e822bb90faea" translate="yes" xml:space="preserve">
          <source>Checks if the specified &lt;a href=&quot;../contains#kotlin.ranges%24contains%28kotlin.ranges.ClosedRange%28%28kotlin.Int%29%29%2C+kotlin.Byte%29%2Fvalue&quot;&gt;value&lt;/a&gt; belongs to this range.</source>
          <target state="translated">检查指定的&lt;a href=&quot;../contains#kotlin.ranges%24contains%28kotlin.ranges.ClosedRange%28%28kotlin.Int%29%29%2C+kotlin.Byte%29%2Fvalue&quot;&gt;值是否&lt;/a&gt;属于此范围。</target>
        </trans-unit>
        <trans-unit id="93f5d1fa7ff37cab0ef52a384e6db4cc89e48d23" translate="yes" xml:space="preserve">
          <source>Checks if the specified &lt;a href=&quot;../contains#kotlin.ranges%24contains%28kotlin.ranges.ClosedRange%28%28kotlin.Long%29%29%2C+kotlin.Byte%29%2Fvalue&quot;&gt;value&lt;/a&gt; belongs to this range.</source>
          <target state="translated">检查指定的&lt;a href=&quot;../contains#kotlin.ranges%24contains%28kotlin.ranges.ClosedRange%28%28kotlin.Long%29%29%2C+kotlin.Byte%29%2Fvalue&quot;&gt;值是否&lt;/a&gt;属于此范围。</target>
        </trans-unit>
        <trans-unit id="840e9154a8b92175f0142e2b663a2e04299744eb" translate="yes" xml:space="preserve">
          <source>Checks if the specified &lt;a href=&quot;../contains#kotlin.ranges%24contains%28kotlin.ranges.UIntRange%2C+kotlin.UByte%29%2Fvalue&quot;&gt;value&lt;/a&gt; belongs to this range.</source>
          <target state="translated">检查指定的&lt;a href=&quot;../contains#kotlin.ranges%24contains%28kotlin.ranges.UIntRange%2C+kotlin.UByte%29%2Fvalue&quot;&gt;值是否&lt;/a&gt;属于此范围。</target>
        </trans-unit>
        <trans-unit id="d574ee7a2ac4727abd755f0c8adda4f55a25d2ed" translate="yes" xml:space="preserve">
          <source>Checks if the specified &lt;a href=&quot;../contains#kotlin.ranges%24contains%28kotlin.ranges.ULongRange%2C+kotlin.UByte%29%2Fvalue&quot;&gt;value&lt;/a&gt; belongs to this range.</source>
          <target state="translated">检查指定的&lt;a href=&quot;../contains#kotlin.ranges%24contains%28kotlin.ranges.ULongRange%2C+kotlin.UByte%29%2Fvalue&quot;&gt;值是否&lt;/a&gt;属于此范围。</target>
        </trans-unit>
        <trans-unit id="1936ccf64ca123181f93507a9feb0eebbe57ba0a" translate="yes" xml:space="preserve">
          <source>Checks if the specified &lt;a href=&quot;../contains#kotlin.ranges%24contains(kotlin.ranges.ClosedRange((kotlin.Int)),%20kotlin.Byte)/value&quot;&gt;value&lt;/a&gt; belongs to this range.</source>
          <target state="translated">检查指定的&lt;a href=&quot;../contains#kotlin.ranges%24contains(kotlin.ranges.ClosedRange((kotlin.Int)),%20kotlin.Byte)/value&quot;&gt;值是否&lt;/a&gt;属于此范围。</target>
        </trans-unit>
        <trans-unit id="40c6193935caffa8266610ec4c295ab9ce877dd9" translate="yes" xml:space="preserve">
          <source>Checks if the specified &lt;a href=&quot;../contains#kotlin.ranges%24contains(kotlin.ranges.ClosedRange((kotlin.Long)),%20kotlin.Byte)/value&quot;&gt;value&lt;/a&gt; belongs to this range.</source>
          <target state="translated">检查指定的&lt;a href=&quot;../contains#kotlin.ranges%24contains(kotlin.ranges.ClosedRange((kotlin.Long)),%20kotlin.Byte)/value&quot;&gt;值是否&lt;/a&gt;属于此范围。</target>
        </trans-unit>
        <trans-unit id="f7f90822a2ae202417ab2157576d03082c497813" translate="yes" xml:space="preserve">
          <source>Checks if the specified &lt;a href=&quot;../contains#kotlin.ranges%24contains(kotlin.ranges.UIntRange,%20kotlin.UByte)/value&quot;&gt;value&lt;/a&gt; belongs to this range.</source>
          <target state="translated">检查指定的&lt;a href=&quot;../contains#kotlin.ranges%24contains(kotlin.ranges.UIntRange,%20kotlin.UByte)/value&quot;&gt;值是否&lt;/a&gt;属于此范围。</target>
        </trans-unit>
        <trans-unit id="8676dcdaeb183d186eb71dfdb2616faaa6f1a300" translate="yes" xml:space="preserve">
          <source>Checks if the specified &lt;a href=&quot;../contains#kotlin.ranges%24contains(kotlin.ranges.ULongRange,%20kotlin.UByte)/value&quot;&gt;value&lt;/a&gt; belongs to this range.</source>
          <target state="translated">检查指定的&lt;a href=&quot;../contains#kotlin.ranges%24contains(kotlin.ranges.ULongRange,%20kotlin.UByte)/value&quot;&gt;值是否&lt;/a&gt;属于此范围。</target>
        </trans-unit>
        <trans-unit id="c859b6673ae95dd6316ba57dbb605098f36c2242" translate="yes" xml:space="preserve">
          <source>Checks if the specified &lt;a href=&quot;contains#kotlin.ranges%24contains%28kotlin.ranges.ClosedRange%28%28kotlin.Int%29%29%2C+kotlin.Byte%29%2Fvalue&quot;&gt;value&lt;/a&gt; belongs to this range.</source>
          <target state="translated">检查指定的&lt;a href=&quot;contains#kotlin.ranges%24contains%28kotlin.ranges.ClosedRange%28%28kotlin.Int%29%29%2C+kotlin.Byte%29%2Fvalue&quot;&gt;值是否&lt;/a&gt;属于此范围。</target>
        </trans-unit>
        <trans-unit id="3139767385b45f78f12bc1a4beeeb8dbf90719eb" translate="yes" xml:space="preserve">
          <source>Checks if the specified &lt;a href=&quot;contains#kotlin.ranges%24contains(kotlin.ranges.ClosedRange((kotlin.Int)),%20kotlin.Byte)/value&quot;&gt;value&lt;/a&gt; belongs to this range.</source>
          <target state="translated">检查指定的&lt;a href=&quot;contains#kotlin.ranges%24contains(kotlin.ranges.ClosedRange((kotlin.Int)),%20kotlin.Byte)/value&quot;&gt;值是否&lt;/a&gt;属于此范围。</target>
        </trans-unit>
        <trans-unit id="6c4dc375b6189bd0d351b922264efc91169d72cb" translate="yes" xml:space="preserve">
          <source>Checks if the specified element is contained in this collection.</source>
          <target state="translated">检查指定的元素是否包含在这个集合中。</target>
        </trans-unit>
        <trans-unit id="c2fcf22dd09b57d45aca55b0d4ee03697fcd22eb" translate="yes" xml:space="preserve">
          <source>Checks that the return type of the function is a subtype of &lt;code&gt;T&lt;/code&gt;.</source>
          <target state="translated">检查函数的返回类型是否为 &lt;code&gt;T&lt;/code&gt; 的子类型。</target>
        </trans-unit>
        <trans-unit id="e6db6a0fc051275ddea53d61be2db2cbb1e810ff" translate="yes" xml:space="preserve">
          <source>Checks whether the range is empty.</source>
          <target state="translated">检查范围是否为空。</target>
        </trans-unit>
        <trans-unit id="784e01fd13af02a1546d65c30ddd520a4574740f" translate="yes" xml:space="preserve">
          <source>Checks whether the specified &lt;a href=&quot;../-closed-range/contains#kotlin.ranges.ClosedRange%24contains%28kotlin.ranges.ClosedRange.T%29%2Fvalue&quot;&gt;value&lt;/a&gt; belongs to the range.</source>
          <target state="translated">检查指定的&lt;a href=&quot;../-closed-range/contains#kotlin.ranges.ClosedRange%24contains%28kotlin.ranges.ClosedRange.T%29%2Fvalue&quot;&gt;值&lt;/a&gt;是否属于该范围。</target>
        </trans-unit>
        <trans-unit id="241a53048d89b8ec3653ae4a83dda4a4ea670a6f" translate="yes" xml:space="preserve">
          <source>Checks whether the specified &lt;a href=&quot;../-closed-range/contains#kotlin.ranges.ClosedRange%24contains(kotlin.ranges.ClosedRange.T)/value&quot;&gt;value&lt;/a&gt; belongs to the range.</source>
          <target state="translated">检查指定的&lt;a href=&quot;../-closed-range/contains#kotlin.ranges.ClosedRange%24contains(kotlin.ranges.ClosedRange.T)/value&quot;&gt;值&lt;/a&gt;是否属于该范围。</target>
        </trans-unit>
        <trans-unit id="377c8052c944d388ce9354706e2c9908f6cf58ae" translate="yes" xml:space="preserve">
          <source>Checks whether the specified &lt;a href=&quot;contains#kotlin.ranges.ClosedRange%24contains%28kotlin.ranges.ClosedRange.T%29%2Fvalue&quot;&gt;value&lt;/a&gt; belongs to the range.</source>
          <target state="translated">检查指定的&lt;a href=&quot;contains#kotlin.ranges.ClosedRange%24contains%28kotlin.ranges.ClosedRange.T%29%2Fvalue&quot;&gt;值&lt;/a&gt;是否属于该范围。</target>
        </trans-unit>
        <trans-unit id="78f8836bb253c6aaf309fd570c0d32734c368193" translate="yes" xml:space="preserve">
          <source>Checks whether the specified &lt;a href=&quot;contains#kotlin.ranges.ClosedRange%24contains(kotlin.ranges.ClosedRange.T)/value&quot;&gt;value&lt;/a&gt; belongs to the range.</source>
          <target state="translated">检查指定的&lt;a href=&quot;contains#kotlin.ranges.ClosedRange%24contains(kotlin.ranges.ClosedRange.T)/value&quot;&gt;值&lt;/a&gt;是否属于该范围。</target>
        </trans-unit>
        <trans-unit id="2d5a064f6bf5628b993a4a964a494b2ae945a7be" translate="yes" xml:space="preserve">
          <source>ChildNode</source>
          <target state="translated">ChildNode</target>
        </trans-unit>
        <trans-unit id="9ec69fceb9f11fc0aaaa5e9578e4b5c3b1f361a3" translate="yes" xml:space="preserve">
          <source>Children of a coroutine</source>
          <target state="translated">冠状动脉的子女</target>
        </trans-unit>
        <trans-unit id="95dad7bbea504a28a666919c3c19bd3b56992309" translate="yes" xml:space="preserve">
          <source>Choose the dependency type based on your requirements.</source>
          <target state="translated">根据你的要求选择依赖类型。</target>
        </trans-unit>
        <trans-unit id="7d19ab649c36f1e71753479734bc6ffb281cd6ce" translate="yes" xml:space="preserve">
          <source>Choosing &lt;code&gt;both&lt;/code&gt; as the compiler option (so that it will compile with both the legacy and the IR backend) means that some Gradle tasks are renamed to explicitly mark them as only affecting the legacy compilation. &lt;code&gt;compileKotlinJs&lt;/code&gt; is renamed to &lt;code&gt;compileKotlinJsLegacy&lt;/code&gt;, and &lt;code&gt;compileTestKotlinJs&lt;/code&gt; is renamed to &lt;code&gt;compileTestKotlinJsLegacy&lt;/code&gt;.</source>
          <target state="translated">选择 &lt;code&gt;both&lt;/code&gt; 作为编译器选项（以便它可以同时使用旧版和IR后端进行编译）意味着将重命名某些Gradle任务以将其明确标记为仅影响旧版编译。 &lt;code&gt;compileKotlinJs&lt;/code&gt; 重命名为 &lt;code&gt;compileKotlinJsLegacy&lt;/code&gt; ， &lt;code&gt;compileTestKotlinJs&lt;/code&gt; 重命名为 &lt;code&gt;compileTestKotlinJsLegacy&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="a86e600d651c7ed0e3f6d688622e1903715232e5" translate="yes" xml:space="preserve">
          <source>Choosing execution environment</source>
          <target state="translated">选择执行环境</target>
        </trans-unit>
        <trans-unit id="d1e180228c6e398b7ec6347f14f06e411633dcab" translate="yes" xml:space="preserve">
          <source>Choosing good names</source>
          <target state="translated">选择好名字</target>
        </trans-unit>
        <trans-unit id="cb81b0ea51edd864a4d2b387a6128e8b39289c1e" translate="yes" xml:space="preserve">
          <source>Choosing the Target Module System</source>
          <target state="translated">选择目标模块系统</target>
        </trans-unit>
        <trans-unit id="2d613e8cf4995ed4ea2074ffd09bb1edb2455897" translate="yes" xml:space="preserve">
          <source>Choosing the target module system</source>
          <target state="translated">选择目标模块系统</target>
        </trans-unit>
        <trans-unit id="5294f3f6bd2303c17ec8c28def8c442c8afaed73" translate="yes" xml:space="preserve">
          <source>Choosing the target module system depends on your build environment:</source>
          <target state="translated">选择目标模块系统取决于你的构建环境。</target>
        </trans-unit>
        <trans-unit id="c2ada962c434eb1e78be70a26abac72b811941cd" translate="yes" xml:space="preserve">
          <source>Chunked</source>
          <target state="translated">Chunked</target>
        </trans-unit>
        <trans-unit id="355280bf7ee296c7cbd6b8ec30d87ef4a17e006a" translate="yes" xml:space="preserve">
          <source>Cinterop support</source>
          <target state="translated">Cinterop支持</target>
        </trans-unit>
        <trans-unit id="963761801811c1bddaf2ec3c548b8a79c76cd5e4" translate="yes" xml:space="preserve">
          <source>Circular source set dependencies are prohibited.</source>
          <target state="translated">禁止循环源集依赖。</target>
        </trans-unit>
        <trans-unit id="24af4805460c6f81aecd55c0ccffcd29ad1751bd" translate="yes" xml:space="preserve">
          <source>Class &lt;code&gt;AtomicReference&lt;/code&gt; can be used to publish the changed frozen state to other threads, and so build patterns like shared caches.</source>
          <target state="translated">&lt;code&gt;AtomicReference&lt;/code&gt; 类可用于将更改后的冻结状态发布到其他线程，从而建立共享缓存等模式。</target>
        </trans-unit>
        <trans-unit id="26bc7eebf3d4e8cbe2b3a4171a8561966d397df1" translate="yes" xml:space="preserve">
          <source>Class Members</source>
          <target state="translated">班级成员</target>
        </trans-unit>
        <trans-unit id="de49d28923a369a4e8cc170c1f2aa1974a3997d6" translate="yes" xml:space="preserve">
          <source>Class References</source>
          <target state="translated">类别参考</target>
        </trans-unit>
        <trans-unit id="c06db6cb3409adf188ef08be3ccbdf1d0eca2e4d" translate="yes" xml:space="preserve">
          <source>Class WeakReference encapsulates weak reference to an object, which could be used to either retrieve a strong reference to an object, or return null, if object was already destoyed by the memory manager.</source>
          <target state="translated">类WeakReference封装了对对象的弱引用,它可以用来检索对对象的强引用,或者返回null,如果对象已经被内存管理器销毁。</target>
        </trans-unit>
        <trans-unit id="e33345267f09a62cf04123d57a323a6bc3dd322d" translate="yes" xml:space="preserve">
          <source>Class WeakReference encapsulates weak reference to an object, which could be used to either retrieve a strong reference to an object, or return null, if object was already destroyed by the memory manager.</source>
          <target state="translated">类WeakReference封装了对对象的弱引用,它可以用来检索对对象的强引用,或者如果对象已经被内存管理器销毁,则返回null。</target>
        </trans-unit>
        <trans-unit id="fa2cedf469d8336cd94fb0abbb0fd3104c6d13c2" translate="yes" xml:space="preserve">
          <source>Class header formatting</source>
          <target state="translated">类头格式化</target>
        </trans-unit>
        <trans-unit id="3ca3662aaab3db7d7016712be4125f7cc47ad840" translate="yes" xml:space="preserve">
          <source>Class layout</source>
          <target state="translated">班级布局</target>
        </trans-unit>
        <trans-unit id="b847528b6f48fd68c33ba29cde1c7e26adff1eeb" translate="yes" xml:space="preserve">
          <source>Class members</source>
          <target state="translated">班子成员</target>
        </trans-unit>
        <trans-unit id="786c2c4cb21f1d18bde33c506a002d2c6a2d4d53" translate="yes" xml:space="preserve">
          <source>Class method or property</source>
          <target state="translated">类方法或属性</target>
        </trans-unit>
        <trans-unit id="94d1096d6809cce30c8f55717f3794c953475dff" translate="yes" xml:space="preserve">
          <source>Class names should use &lt;code&gt;UpperCamelCase&lt;/code&gt;, just like in Python.</source>
          <target state="translated">类名应该使用 &lt;code&gt;UpperCamelCase&lt;/code&gt; ，就像在Python中一样。</target>
        </trans-unit>
        <trans-unit id="418f8d9fce3be7b19c0c8839c37326b2373f07e8" translate="yes" xml:space="preserve">
          <source>Class properties and parameters</source>
          <target state="translated">类属性和参数</target>
        </trans-unit>
        <trans-unit id="c9305cbcea295abc2f1a4bfcfed9c05191571c10" translate="yes" xml:space="preserve">
          <source>Class references</source>
          <target state="translated">类别参考</target>
        </trans-unit>
        <trans-unit id="739a5b9e91e2f2089f57793db0dfdcb96d4b25d5" translate="yes" xml:space="preserve">
          <source>Class representing abstract computation, whose result may become available in the future.</source>
          <target state="translated">代表抽象计算的类,其结果可能会在未来变得可用。</target>
        </trans-unit>
        <trans-unit id="3b4694a905056b637efc568c69caf57fafd23e49" translate="yes" xml:space="preserve">
          <source>Class representing worker.</source>
          <target state="translated">代表工人的类。</target>
        </trans-unit>
        <trans-unit id="300a654eb5f94bcc3ea07a759e8fca72358640a2" translate="yes" xml:space="preserve">
          <source>Class, interface or object, annotation class is also included</source>
          <target state="translated">类、接口或对象、注解类也包括在内。</target>
        </trans-unit>
        <trans-unit id="658f652cff731988820e41112c49edab3550929f" translate="yes" xml:space="preserve">
          <source>ClassCastException</source>
          <target state="translated">ClassCastException</target>
        </trans-unit>
        <trans-unit id="ed1846afee3be21521286932b99e2aeae9e6414a" translate="yes" xml:space="preserve">
          <source>Classes</source>
          <target state="translated">Classes</target>
        </trans-unit>
        <trans-unit id="a1cf3fc64b992150c2877b0a249fcfe3b1ca8ca9" translate="yes" xml:space="preserve">
          <source>Classes and Inheritance</source>
          <target state="translated">类和继承</target>
        </trans-unit>
        <trans-unit id="40203bad124f05ed8e987740b6dd6f0b6724a055" translate="yes" xml:space="preserve">
          <source>Classes and Interfaces</source>
          <target state="translated">类和接口</target>
        </trans-unit>
        <trans-unit id="2902dddfe7eeba1a427ea8221c30e536b01ee124" translate="yes" xml:space="preserve">
          <source>Classes and Objects from Kotlin</source>
          <target state="translated">Kotlin的类和对象</target>
        </trans-unit>
        <trans-unit id="62ee3141d89c1d38f5b87e9404fe625db2c24e84" translate="yes" xml:space="preserve">
          <source>Classes and interfaces marked with this annotation are restricted when used as receivers for extension &lt;code&gt;suspend&lt;/code&gt; functions. These &lt;code&gt;suspend&lt;/code&gt; extensions can only invoke other member or extension &lt;code&gt;suspend&lt;/code&gt; functions on this particular receiver and are restricted from calling arbitrary suspension functions.</source>
          <target state="translated">当用作扩展 &lt;code&gt;suspend&lt;/code&gt; 函数的接收器时，带有此注释的类和接口将受到限制。这些 &lt;code&gt;suspend&lt;/code&gt; 扩展只能在此特定接收器上调用其他成员或扩展 &lt;code&gt;suspend&lt;/code&gt; 功能，并且被限制不能调用任意挂起功能。</target>
        </trans-unit>
        <trans-unit id="9c91f6b9044a0f2b2db400d30e36f06c843be5ac" translate="yes" xml:space="preserve">
          <source>Classes and interfaces marked with this annotation are restricted when used as receivers for extension &lt;code&gt;suspend&lt;/code&gt; functions. These &lt;code&gt;suspend&lt;/code&gt; extensions can only invoke other member or extension &lt;code&gt;suspend&lt;/code&gt; functions on this particular receiver only and are restricted from calling arbitrary suspension functions.</source>
          <target state="translated">当用作扩展 &lt;code&gt;suspend&lt;/code&gt; 函数的接收器时，带有此注释的类和接口将受到限制。这些 &lt;code&gt;suspend&lt;/code&gt; 扩展只能在此特定接收方上调用其他成员或扩展 &lt;code&gt;suspend&lt;/code&gt; 函数，并且被限制不能调用任意挂起函数。</target>
        </trans-unit>
        <trans-unit id="6ea81b6f99457a55c5e36d73a36d9cdc43d87c81" translate="yes" xml:space="preserve">
          <source>Classes are declared with the &lt;code&gt;class&lt;/code&gt; keyword. A basic class without any properties or functions of its own looks like this:</source>
          <target state="translated">用 &lt;code&gt;class&lt;/code&gt; 关键字声明类。没有任何属性或功能的基本类如下所示：</target>
        </trans-unit>
        <trans-unit id="f0b20f200e8aa6bec8b3b657884db2f548fa3c4f" translate="yes" xml:space="preserve">
          <source>Classes can be nested in other classes:</source>
          <target state="translated">类可以嵌套在其他类中。</target>
        </trans-unit>
        <trans-unit id="9e459e3dc5d0120109463a734b201906c6c7bea8" translate="yes" xml:space="preserve">
          <source>Classes can contain:</source>
          <target state="translated">类可以包含:</target>
        </trans-unit>
        <trans-unit id="f2b13ee61eb4f3131fd5ffd4139739484bc15d76" translate="yes" xml:space="preserve">
          <source>Classes in Kotlin are declared using the keyword &lt;em&gt;class&lt;/em&gt;:</source>
          <target state="translated">Kotlin中的&lt;em&gt;类&lt;/em&gt;使用关键字&lt;em&gt;class&lt;/em&gt;声明：</target>
        </trans-unit>
        <trans-unit id="aaa6d27710227b6755bbf2bf6817120e049c2431" translate="yes" xml:space="preserve">
          <source>Classes that don't declare a superclass implicitly inherit from &lt;code&gt;Any&lt;/code&gt;. The subclass must invoke one of the constructors of the base class, passing either parameters from its own constructor or constant values:</source>
          <target state="translated">未声明超类的类隐式继承自 &lt;code&gt;Any&lt;/code&gt; 。子类必须调用基类的构造函数之一，并传递其自身构造函数的参数或常量值：</target>
        </trans-unit>
        <trans-unit id="9f74da2d6fcc5b1e3989105668661996b416739b" translate="yes" xml:space="preserve">
          <source>Classes that inherit from this interface can be represented as a sequence of elements that can be iterated over and that supports removing elements during iteration.</source>
          <target state="translated">从这个接口继承的类可以表示为一个可以迭代的元素序列,并且支持在迭代过程中删除元素。</target>
        </trans-unit>
        <trans-unit id="218c90a3c100273875eb842b2e06a420616a00bf" translate="yes" xml:space="preserve">
          <source>Classes that inherit from this interface can be represented as a sequence of elements that can be iterated over.</source>
          <target state="translated">从这个接口继承的类可以表示为一个可以迭代的元素序列。</target>
        </trans-unit>
        <trans-unit id="95d246c21ff1953254e36cf43d1e6189b1f2b589" translate="yes" xml:space="preserve">
          <source>Classes which inherit from this interface have a defined total ordering between their instances.</source>
          <target state="translated">继承自该接口的类,其实例之间有一个确定的总排序。</target>
        </trans-unit>
        <trans-unit id="c05bb6d369456665cb374adb88d5a5189bfc260d" translate="yes" xml:space="preserve">
          <source>Classes with a few primary constructor parameters can be written in a single line:</source>
          <target state="translated">有几个主构造函数参数的类可以用一行写。</target>
        </trans-unit>
        <trans-unit id="690d1266f3666bd04ed2310538c65ab6bbd96b89" translate="yes" xml:space="preserve">
          <source>Classes with longer headers should be formatted so that each primary constructor parameter is in a separate line with indentation. Also, the closing parenthesis should be on a new line. If we use inheritance, then the superclass constructor call or list of implemented interfaces should be located on the same line as the parenthesis:</source>
          <target state="translated">对于头部较长的类,应将其格式化,使每个主要的构造函数参数都在单独的一行中,并有缩进。另外,结尾的小括号应该在新的一行。如果我们使用了继承,那么超类的构造函数调用或实现的接口列表应该与括号位于同一行。</target>
        </trans-unit>
        <trans-unit id="9ae3fa38ad86b1ad08d69c23b619b3f413fb2638" translate="yes" xml:space="preserve">
          <source>Classes, objects, interfaces, constructors, functions, properties and their setters can have &lt;em&gt;visibility modifiers&lt;/em&gt;. (Getters always have the same visibility as the property.) There are four visibility modifiers in Kotlin: &lt;code&gt;private&lt;/code&gt;, &lt;code&gt;protected&lt;/code&gt;, &lt;code&gt;internal&lt;/code&gt; and &lt;code&gt;public&lt;/code&gt;. The default visibility, used if there is no explicit modifier, is &lt;code&gt;public&lt;/code&gt;.</source>
          <target state="translated">类，对象，接口，构造函数，函数，属性及其设置器可以具有&lt;em&gt;可见性修饰符&lt;/em&gt;。（Getter始终与该属性具有相同的可见性。）Kotlin中有四个可见性修饰符： &lt;code&gt;private&lt;/code&gt; ， &lt;code&gt;protected&lt;/code&gt; ， &lt;code&gt;internal&lt;/code&gt; 和 &lt;code&gt;public&lt;/code&gt; 。如果没有显式修饰符，则默认可见性为 &lt;code&gt;public&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="5e5e844f4cc4472e8f387eb40fc372d9985361c9" translate="yes" xml:space="preserve">
          <source>Classification of sequences</source>
          <target state="translated">序列的分类</target>
        </trans-unit>
        <trans-unit id="30ca825b8bb5323b328e648a5d08ad44aff90650" translate="yes" xml:space="preserve">
          <source>Clears reference to an object.</source>
          <target state="translated">清除对对象的引用。</target>
        </trans-unit>
        <trans-unit id="e8cf7637501db2656de0d7f42ee9a9c03c8b0b6b" translate="yes" xml:space="preserve">
          <source>Clears the bit specified</source>
          <target state="translated">清除指定的位</target>
        </trans-unit>
        <trans-unit id="e0bcce62a3890dcc5973393a9163d78794eaca02" translate="yes" xml:space="preserve">
          <source>Clears the bits with indices between &lt;a href=&quot;clear#kotlin.native.BitSet%24clear%28kotlin.Int%2C+kotlin.Int%29%2Ffrom&quot;&gt;from&lt;/a&gt; (inclusive) and &lt;a href=&quot;clear#kotlin.native.BitSet%24clear%28kotlin.Int%2C+kotlin.Int%29%2Fto&quot;&gt;to&lt;/a&gt; (exclusive) to the specified value.</source>
          <target state="translated">清除索引介于（&lt;a href=&quot;clear#kotlin.native.BitSet%24clear%28kotlin.Int%2C+kotlin.Int%29%2Ffrom&quot;&gt;从）&lt;/a&gt;（包括）&lt;a href=&quot;clear#kotlin.native.BitSet%24clear%28kotlin.Int%2C+kotlin.Int%29%2Fto&quot;&gt;到&lt;/a&gt;（从）到指定值之间的位。</target>
        </trans-unit>
        <trans-unit id="b68a01e37c95acc52cd4015d8d64aac3f1589882" translate="yes" xml:space="preserve">
          <source>Clears the bits with indices between &lt;a href=&quot;clear#kotlin.native.BitSet%24clear(kotlin.Int,%20kotlin.Int)/from&quot;&gt;from&lt;/a&gt; (inclusive) and &lt;a href=&quot;clear#kotlin.native.BitSet%24clear(kotlin.Int,%20kotlin.Int)/to&quot;&gt;to&lt;/a&gt; (exclusive) to the specified value.</source>
          <target state="translated">清除索引&lt;a href=&quot;clear#kotlin.native.BitSet%24clear(kotlin.Int,%20kotlin.Int)/from&quot;&gt;从&lt;/a&gt;（包含）&lt;a href=&quot;clear#kotlin.native.BitSet%24clear(kotlin.Int,%20kotlin.Int)/to&quot;&gt;到&lt;/a&gt;（至）（不包含）到指定值的位。</target>
        </trans-unit>
        <trans-unit id="dc80672ef521efc0ef0a17410004a7d69a140be2" translate="yes" xml:space="preserve">
          <source>Clears the content of this string builder making it empty and returns this instance.</source>
          <target state="translated">清除这个字符串生成器的内容,使其为空,并返回这个实例。</target>
        </trans-unit>
        <trans-unit id="d3d88a2c683fad64bf6150df6c700de5ce103013" translate="yes" xml:space="preserve">
          <source>Clears the content of this string builder making it empty.</source>
          <target state="translated">清除这个字符串生成器的内容,使其为空。</target>
        </trans-unit>
        <trans-unit id="2d13337dc8859ed87029585721e2ef11de61d590" translate="yes" xml:space="preserve">
          <source>Click &lt;strong&gt;Finish&lt;/strong&gt;.</source>
          <target state="translated">点击&lt;strong&gt;完成&lt;/strong&gt;。</target>
        </trans-unit>
        <trans-unit id="b3d9df2ae5ec674d48a2d08fb71c71060e9c1997" translate="yes" xml:space="preserve">
          <source>Click &lt;strong&gt;Next&lt;/strong&gt;, and on the next screen click &lt;strong&gt;Finish&lt;/strong&gt;.</source>
          <target state="translated">单击&amp;ldquo;&lt;strong&gt;下一步&amp;rdquo;&lt;/strong&gt;，然后在下一个屏幕上单击&amp;ldquo;&lt;strong&gt;完成&amp;rdquo;&lt;/strong&gt;。</target>
        </trans-unit>
        <trans-unit id="5a907eabe68ccd173cd42bcd6494cdd0ccd78aef" translate="yes" xml:space="preserve">
          <source>Click &lt;strong&gt;Next&lt;/strong&gt;.</source>
          <target state="translated">单击&lt;strong&gt;下一步&lt;/strong&gt;。</target>
        </trans-unit>
        <trans-unit id="8545475c874d8cd5b229885080e6baa529daf756" translate="yes" xml:space="preserve">
          <source>Click &lt;strong&gt;OK&lt;/strong&gt; and here it is - your first Kotlin application for Android!</source>
          <target state="translated">单击&amp;ldquo; &lt;strong&gt;确定&amp;rdquo;&lt;/strong&gt;，这是您的第一个Android Kotlin应用程序！</target>
        </trans-unit>
        <trans-unit id="1bdd79b12628d8c4ec4226ff4207341dcb869ab8" translate="yes" xml:space="preserve">
          <source>Client</source>
          <target state="translated">Client</target>
        </trans-unit>
        <trans-unit id="c1ea43cc96b64c5b96e79af93399cf2b2084812b" translate="yes" xml:space="preserve">
          <source>Client &amp;mdash; Server</source>
          <target state="translated">客户端服务器</target>
        </trans-unit>
        <trans-unit id="3fefa8efc704dac1aaa32805e84422b049df0608" translate="yes" xml:space="preserve">
          <source>ClientQueryOptions</source>
          <target state="translated">ClientQueryOptions</target>
        </trans-unit>
        <trans-unit id="9308fa63d3b0d3f3953d6e8e033c4592e38c818c" translate="yes" xml:space="preserve">
          <source>ClientType</source>
          <target state="translated">ClientType</target>
        </trans-unit>
        <trans-unit id="28e22fe3dde53ce03b40861a4b22d205384bde66" translate="yes" xml:space="preserve">
          <source>Clients</source>
          <target state="translated">Clients</target>
        </trans-unit>
        <trans-unit id="3396ad3f61374789385264c17071d7920175b6b1" translate="yes" xml:space="preserve">
          <source>ClipboardEventInit</source>
          <target state="translated">ClipboardEventInit</target>
        </trans-unit>
        <trans-unit id="7297463a65daf3d1857f64c228deede347eddfef" translate="yes" xml:space="preserve">
          <source>ClipboardPermissionDescriptor</source>
          <target state="translated">ClipboardPermissionDescriptor</target>
        </trans-unit>
        <trans-unit id="04f6b3ea183eb9d70981161c4424a6cf525afd9f" translate="yes" xml:space="preserve">
          <source>Clock</source>
          <target state="translated">Clock</target>
        </trans-unit>
        <trans-unit id="352d68254a8dbdb5da50710c490a135fa2be0836" translate="yes" xml:space="preserve">
          <source>ClockMark</source>
          <target state="translated">ClockMark</target>
        </trans-unit>
        <trans-unit id="08901cb8f603fc4f56658ce59e856a8614c55bdc" translate="yes" xml:space="preserve">
          <source>CloseEventInit</source>
          <target state="translated">CloseEventInit</target>
        </trans-unit>
        <trans-unit id="5ef941e8317f9d6c1e61e23ae9571a727029b15a" translate="yes" xml:space="preserve">
          <source>Closeable.use calls Throwable.addSuppressed if available</source>
          <target state="translated">Closeable.use在可用的情况下调用Throwable.addSuppressed。</target>
        </trans-unit>
        <trans-unit id="5f1cfa5cccae266b661cf8d2e35cc3c9d6e700b9" translate="yes" xml:space="preserve">
          <source>ClosedFloatingPointRange</source>
          <target state="translated">ClosedFloatingPointRange</target>
        </trans-unit>
        <trans-unit id="e66ecb14f1e746c18112f64a72b8a97e74cd4009" translate="yes" xml:space="preserve">
          <source>ClosedRange</source>
          <target state="translated">ClosedRange</target>
        </trans-unit>
        <trans-unit id="60f8608476be28a4d9c3959f564fb6a26fd97ed9" translate="yes" xml:space="preserve">
          <source>Closing and iteration over channels</source>
          <target state="translated">渠道的关闭和迭代</target>
        </trans-unit>
        <trans-unit id="c63970fda29c5fc3fd5dcabe22511adc7684e67b" translate="yes" xml:space="preserve">
          <source>Closing resources with &lt;code&gt;finally&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;finally&lt;/code&gt; 关闭资源</target>
        </trans-unit>
        <trans-unit id="16b1546bfaf51b2730baa3cec8823ad69c6d520a" translate="yes" xml:space="preserve">
          <source>Closures</source>
          <target state="translated">Closures</target>
        </trans-unit>
        <trans-unit id="c48b7f655c90336133e0abdd77691431a8d756f1" translate="yes" xml:space="preserve">
          <source>CocoaPods Gradle plugin</source>
          <target state="translated">CocoaPods Gradle插件</target>
        </trans-unit>
        <trans-unit id="382d31f023c9bcb43b5ca7cc209986730794a619" translate="yes" xml:space="preserve">
          <source>CocoaPods integration</source>
          <target state="translated">CocoaPods整合</target>
        </trans-unit>
        <trans-unit id="0dc8282d7dc85c3178e5dfcd39b944dec26eb309" translate="yes" xml:space="preserve">
          <source>Code Style Migration Guide</source>
          <target state="translated">代码风格迁移指南</target>
        </trans-unit>
        <trans-unit id="6e1900956b7af4b3e764d0a9f1dd39862b2c3f3b" translate="yes" xml:space="preserve">
          <source>Code Style Support in IDE</source>
          <target state="translated">IDE中的代码风格支持</target>
        </trans-unit>
        <trans-unit id="95e2d4250e833bf800e26c20065cb31fb2944abe" translate="yes" xml:space="preserve">
          <source>Code and resources shared between all platforms. Available in all multiplatform projects. Used in all main &lt;a href=&quot;#compilations&quot;&gt;compilations&lt;/a&gt; of a project.</source>
          <target state="translated">所有平台之间共享的代码和资源。在所有多平台项目中均可用。用于项目的所有主要&lt;a href=&quot;#compilations&quot;&gt;编译&lt;/a&gt;中。</target>
        </trans-unit>
        <trans-unit id="689c8941933ed63c6b5bfe3e4d2d29363a21c8a4" translate="yes" xml:space="preserve">
          <source>Code in a derived class can call its superclass functions and property accessors implementations using the &lt;em&gt;super&lt;/em&gt; keyword:</source>
          <target state="translated">派生类中的代码可以使用&lt;em&gt;super&lt;/em&gt;关键字调用其超类函数和属性访问器实现：</target>
        </trans-unit>
        <trans-unit id="38b65f1911f810ba636b568c85967cb342529e39" translate="yes" xml:space="preserve">
          <source>Code inside the &lt;code&gt;flow { ... }&lt;/code&gt; builder block can suspend.</source>
          <target state="translated">里面的代码 &lt;code&gt;flow { ... }&lt;/code&gt; 构建块可以暂停。</target>
        </trans-unit>
        <trans-unit id="b3feff91aa301fd63071554d4ba07806826f957f" translate="yes" xml:space="preserve">
          <source>Code inspections have different &lt;a href=&quot;https://www.jetbrains.com/help/idea/configuring-inspection-severities.html&quot;&gt;severity levels&lt;/a&gt;, to help you decide which suggestions to accept and which to ignore.</source>
          <target state="translated">代码检查具有不同的&lt;a href=&quot;https://www.jetbrains.com/help/idea/configuring-inspection-severities.html&quot;&gt;严重性级别&lt;/a&gt;，以帮助您决定接受哪些建议和忽略哪些建议。</target>
        </trans-unit>
        <trans-unit id="c53e7a06868b09a2cee74089e3be8ad4e179e690" translate="yes" xml:space="preserve">
          <source>Code that compiled and ran fine is now rejected with an error (at compile or link time). This includes removing language constructs and adding new restrictions.</source>
          <target state="translated">编译后运行良好的代码现在会以错误的方式被拒绝(在编译或链接时)。这包括删除语言结构和添加新的限制。</target>
        </trans-unit>
        <trans-unit id="c855547cc4fe33e6d42489a2a61ab56ad1445b95" translate="yes" xml:space="preserve">
          <source>Code that executed normally is now throwing an exception.</source>
          <target state="translated">正常执行的代码现在会抛出一个异常。</target>
        </trans-unit>
        <trans-unit id="f13c6d40584dcb243a09754125c5488f70e52a2c" translate="yes" xml:space="preserve">
          <source>Coding Conventions</source>
          <target state="translated">编码约定</target>
        </trans-unit>
        <trans-unit id="c7c34570bc4ae5cf6513807cb1a8f5f2ea1eee4d" translate="yes" xml:space="preserve">
          <source>Coding conventions for libraries</source>
          <target state="translated">图书馆的编码惯例</target>
        </trans-unit>
        <trans-unit id="bc3f46835837837b710b897deab33cc13b00336b" translate="yes" xml:space="preserve">
          <source>Collect the emitted values using the &lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines.flow/collect.html&quot;&gt;&lt;code&gt;collect()&lt;/code&gt;&lt;/a&gt; function.</source>
          <target state="translated">使用&lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines.flow/collect.html&quot;&gt; &lt;code&gt;collect()&lt;/code&gt; &lt;/a&gt;函数收集发射的值。</target>
        </trans-unit>
        <trans-unit id="30c54a96f8011b39819ba18bcb53fcbb092d650d" translate="yes" xml:space="preserve">
          <source>Collection</source>
          <target state="translated">Collection</target>
        </trans-unit>
        <trans-unit id="14fdd8dcac971a994b5411211d8e00576a06662c" translate="yes" xml:space="preserve">
          <source>Collection Aggregate Operations</source>
          <target state="translated">收集汇总业务</target>
        </trans-unit>
        <trans-unit id="4e0f5b0c66d1cd223759fde27b79982e1f6f14dc" translate="yes" xml:space="preserve">
          <source>Collection Operations Overview</source>
          <target state="translated">收集业务概述</target>
        </trans-unit>
        <trans-unit id="7df1eea5196a0f78eea81a1917411e169fb69417" translate="yes" xml:space="preserve">
          <source>Collection Ordering</source>
          <target state="translated">收藏品订购</target>
        </trans-unit>
        <trans-unit id="810938020ce0fa623bf8b6b80bc93b6eae4e2c5b" translate="yes" xml:space="preserve">
          <source>Collection Transformations</source>
          <target state="translated">收藏品转换</target>
        </trans-unit>
        <trans-unit id="397b4f490c84193b00e7ba069ff81641961e9bcd" translate="yes" xml:space="preserve">
          <source>Collection Write Operations</source>
          <target state="translated">集合写操作</target>
        </trans-unit>
        <trans-unit id="08d04ca5f235fcd82d2eb75492e8dd111912d256" translate="yes" xml:space="preserve">
          <source>Collection copying functions, such as &lt;a href=&quot;../../api/latest/jvm/stdlib/kotlin.collections/to-list&quot;&gt;&lt;code&gt;toList()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../../api/latest/jvm/stdlib/kotlin.collections/to-mutable-list&quot;&gt;&lt;code&gt;toMutableList()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../../api/latest/jvm/stdlib/kotlin.collections/to-set&quot;&gt;&lt;code&gt;toSet()&lt;/code&gt;&lt;/a&gt; and others, create a snapshot of a collection at a specific moment. Their result is a new collection of the same elements. If you add or remove elements from the original collection, this won't affect the copies. Copies may be changed independently of the source as well.</source>
          <target state="translated">集合复制功能（例如&lt;a href=&quot;../../api/latest/jvm/stdlib/kotlin.collections/to-list&quot;&gt; &lt;code&gt;toList()&lt;/code&gt; &lt;/a&gt;，&lt;a href=&quot;../../api/latest/jvm/stdlib/kotlin.collections/to-mutable-list&quot;&gt; &lt;code&gt;toMutableList()&lt;/code&gt; &lt;/a&gt;，&lt;a href=&quot;../../api/latest/jvm/stdlib/kotlin.collections/to-set&quot;&gt; &lt;code&gt;toSet()&lt;/code&gt; &lt;/a&gt;等）会在特定时刻创建集合的快照。他们的结果是相同元素的新集合。如果您在原始集合中添加或删除元素，则不会影响副本。副本也可以独立于来源进行更改。</target>
        </trans-unit>
        <trans-unit id="b885525d98efe4aee3e905ef193585e65cdccdb1" translate="yes" xml:space="preserve">
          <source>Collection initialization can be used for restricting mutability. For example, if you create a &lt;code&gt;List&lt;/code&gt; reference to a &lt;code&gt;MutableList&lt;/code&gt;, the compiler will produce errors if you try to modify the collection through this reference.</source>
          <target state="translated">集合初始化可用于限制可变性。例如，如果创建对 &lt;code&gt;MutableList&lt;/code&gt; 的 &lt;code&gt;List&lt;/code&gt; 引用，则尝试通过该引用修改集合时，编译器将产生错误。</target>
        </trans-unit>
        <trans-unit id="4b32fbc1fca98bb132d9d320bd041ce9437c6dea" translate="yes" xml:space="preserve">
          <source>Collection literals (in annotations)</source>
          <target state="translated">收藏品字数(注释)</target>
        </trans-unit>
        <trans-unit id="607dce0c5a77851f8dc9139664dff9aeab212d24" translate="yes" xml:space="preserve">
          <source>Collection of a flow always happens in the context of the calling coroutine. For example, if there is a &lt;code&gt;simple&lt;/code&gt; flow, then the following code runs in the context specified by the author of this code, regardless of the implementation details of the &lt;code&gt;simple&lt;/code&gt; flow:</source>
          <target state="translated">流的收集总是发生在调用协程的上下文中。例如，如果有一个 &lt;code&gt;simple&lt;/code&gt; 流程，那么以下代码将在此代码的作者指定的上下文中运行，而不管该 &lt;code&gt;simple&lt;/code&gt; 流程的实现细节如何：</target>
        </trans-unit>
        <trans-unit id="7548e7d8a359f6eeb2acd80c812527da65246c55" translate="yes" xml:space="preserve">
          <source>Collection of annotations that allow to store constant values.</source>
          <target state="translated">允许存储常量值的注释集合。</target>
        </trans-unit>
        <trans-unit id="5313594c5a68a7bb87bfac9c6cddfb55726f67a0" translate="yes" xml:space="preserve">
          <source>Collection operations are declared in the standard library in two ways: &lt;a href=&quot;classes#class-members&quot;&gt;member functions&lt;/a&gt; of collection interfaces and &lt;a href=&quot;extensions#extension-functions&quot;&gt;extension functions&lt;/a&gt;.</source>
          <target state="translated">收集操作以两种方式在标准库中声明：收集接口的&lt;a href=&quot;classes#class-members&quot;&gt;成员函数&lt;/a&gt;和&lt;a href=&quot;extensions#extension-functions&quot;&gt;扩展函数&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="61d234098bb8881e194b33a0de7bd841e182dae0" translate="yes" xml:space="preserve">
          <source>Collection types</source>
          <target state="translated">收藏类型</target>
        </trans-unit>
        <trans-unit id="b784d66b099cfb0b75f9ec4453e5611fa5ec36fa" translate="yes" xml:space="preserve">
          <source>Collection types may be read-only or mutable in Kotlin, so Java's collections are mapped as follows (all Kotlin types in this table reside in the package &lt;code&gt;kotlin.collections&lt;/code&gt;):</source>
          <target state="translated">集合类型在Kotlin中可能是只读的或可变的，因此Java的集合按以下方式映射（此表中的所有Kotlin类型都位于package &lt;code&gt;kotlin.collections&lt;/code&gt; 中）：</target>
        </trans-unit>
        <trans-unit id="11f6cf75e8309dffe6f8bd94de9f9c6144ea6aed" translate="yes" xml:space="preserve">
          <source>Collection types, such as &lt;a href=&quot;-iterable/index#kotlin.collections.Iterable&quot;&gt;Iterable&lt;/a&gt;, &lt;a href=&quot;-collection/index#kotlin.collections.Collection&quot;&gt;Collection&lt;/a&gt;, &lt;a href=&quot;-list/index#kotlin.collections.List&quot;&gt;List&lt;/a&gt;, &lt;a href=&quot;-set/index#kotlin.collections.Set&quot;&gt;Set&lt;/a&gt;, &lt;a href=&quot;-map/index#kotlin.collections.Map&quot;&gt;Map&lt;/a&gt; and related top-level and extension functions.</source>
          <target state="translated">集合类型，例如&lt;a href=&quot;-iterable/index#kotlin.collections.Iterable&quot;&gt;Iterable&lt;/a&gt;，&lt;a href=&quot;-collection/index#kotlin.collections.Collection&quot;&gt;Collection&lt;/a&gt;，&lt;a href=&quot;-list/index#kotlin.collections.List&quot;&gt;List&lt;/a&gt;，&lt;a href=&quot;-set/index#kotlin.collections.Set&quot;&gt;Set&lt;/a&gt;，&lt;a href=&quot;-map/index#kotlin.collections.Map&quot;&gt;Map&lt;/a&gt;和相关的顶级和扩展功能。</target>
        </trans-unit>
        <trans-unit id="20db58b5028ac6359ceed98ae317efd3933eac12" translate="yes" xml:space="preserve">
          <source>Collection types, such as &lt;a href=&quot;api/latest/jvm/stdlib/kotlin.collections/-iterable/index#kotlin.collections.Iterable&quot;&gt;Iterable&lt;/a&gt;, &lt;a href=&quot;api/latest/jvm/stdlib/kotlin.collections/-collection/index#kotlin.collections.Collection&quot;&gt;Collection&lt;/a&gt;, &lt;a href=&quot;api/latest/jvm/stdlib/kotlin.collections/-list/index#kotlin.collections.List&quot;&gt;List&lt;/a&gt;, &lt;a href=&quot;api/latest/jvm/stdlib/kotlin.collections/-set/index#kotlin.collections.Set&quot;&gt;Set&lt;/a&gt;, &lt;a href=&quot;api/latest/jvm/stdlib/kotlin.collections/-map/index#kotlin.collections.Map&quot;&gt;Map&lt;/a&gt; and related top-level and extension functions.</source>
          <target state="translated">集合类型，例如&lt;a href=&quot;api/latest/jvm/stdlib/kotlin.collections/-iterable/index#kotlin.collections.Iterable&quot;&gt;Iterable&lt;/a&gt;，&lt;a href=&quot;api/latest/jvm/stdlib/kotlin.collections/-collection/index#kotlin.collections.Collection&quot;&gt;Collection&lt;/a&gt;，&lt;a href=&quot;api/latest/jvm/stdlib/kotlin.collections/-list/index#kotlin.collections.List&quot;&gt;List&lt;/a&gt;，&lt;a href=&quot;api/latest/jvm/stdlib/kotlin.collections/-set/index#kotlin.collections.Set&quot;&gt;Set&lt;/a&gt;，&lt;a href=&quot;api/latest/jvm/stdlib/kotlin.collections/-map/index#kotlin.collections.Map&quot;&gt;Map&lt;/a&gt;和相关的顶级和扩展功能。</target>
        </trans-unit>
        <trans-unit id="4bbb632f02fd69807705c0179999c17d35c93b0f" translate="yes" xml:space="preserve">
          <source>Collections</source>
          <target state="translated">Collections</target>
        </trans-unit>
        <trans-unit id="0479b59b3b214f741c9ee3783198a1f41ae247af" translate="yes" xml:space="preserve">
          <source>Collections are a common concept for most programming languages, so if you're familiar with, for example, Java or Python collections, you can skip this introduction and proceed to the detailed sections.</source>
          <target state="translated">对于大多数编程语言来说,集合是一个常见的概念,所以如果你熟悉,例如Java或Python集合,你可以跳过这个介绍,进入详细的章节。</target>
        </trans-unit>
        <trans-unit id="8635b37eb9f58186e764d3c5e9b5b97675011777" translate="yes" xml:space="preserve">
          <source>Collections can be created in result of various operations on other collections. For example, &lt;a href=&quot;collection-filtering&quot;&gt;filtering&lt;/a&gt; a list creates a new list of elements that match the filter:</source>
          <target state="translated">可以根据其他集合的各种操作来创建集合。例如，&lt;a href=&quot;collection-filtering&quot;&gt;过滤&lt;/a&gt;列表将创建与过滤器匹配的元素的新列表：</target>
        </trans-unit>
        <trans-unit id="ca034ff377a02843d71c95bb3a5df11322dddf18" translate="yes" xml:space="preserve">
          <source>Collections of Nullable Type</source>
          <target state="translated">可空类型的集合</target>
        </trans-unit>
        <trans-unit id="d085afa2c1e8ea27cf07a0cd0405069bc5a67554" translate="yes" xml:space="preserve">
          <source>Collections, maps, object arrays, char sequences, and sequences now have an &lt;code&gt;ifEmpty&lt;/code&gt; function, which allows specifying a fallback value that will be used instead of the receiver if it is empty:</source>
          <target state="translated">集合，映射，对象数组，char序列和序列现在具有 &lt;code&gt;ifEmpty&lt;/code&gt; 函数，该函数允许指定一个后备值，如果该值是空的，它将代替接收者使用：</target>
        </trans-unit>
        <trans-unit id="01178594f1857a805ef4f0dd96a2eb02ccc63b6f" translate="yes" xml:space="preserve">
          <source>Collector try and catch</source>
          <target state="translated">收藏家尝试和捕捉</target>
        </trans-unit>
        <trans-unit id="ac30df75efbedb8442edcd22700caca733d79868" translate="yes" xml:space="preserve">
          <source>Colon</source>
          <target state="translated">Colon</target>
        </trans-unit>
        <trans-unit id="84d20491bee1cca222700aa29435b8f60c127a70" translate="yes" xml:space="preserve">
          <source>ColorSpaceConversion</source>
          <target state="translated">ColorSpaceConversion</target>
        </trans-unit>
        <trans-unit id="30d04e0fa9775766030300ce1babf8c3dc0c01f4" translate="yes" xml:space="preserve">
          <source>Combine</source>
          <target state="translated">Combine</target>
        </trans-unit>
        <trans-unit id="c7bfda196f4ddae8fef69a2e01292a44c62d2275" translate="yes" xml:space="preserve">
          <source>Combined, these mechanisms allow natural race-free programming with code reuse across platforms in MPP projects.</source>
          <target state="translated">这些机制结合起来,可以在MPP项目中实现自然的无种族编程与代码跨平台重用。</target>
        </trans-unit>
        <trans-unit id="c48542a2c62cc4bc2dfea820e7587114391d017f" translate="yes" xml:space="preserve">
          <source>Combined, these mechanisms allow natural race-freeze programming with code reuse across platforms in MPP projects.</source>
          <target state="translated">这些机制结合起来,可以在MPP项目中实现自然的种族冻结编程与代码跨平台重用。</target>
        </trans-unit>
        <trans-unit id="94a0b08038ced447ca0da39b325b928ab58d97f6" translate="yes" xml:space="preserve">
          <source>Combines this comparator and the given &lt;a href=&quot;../../kotlin.comparisons/then#kotlin.comparisons%24then%28kotlin.Comparator%28%28kotlin.comparisons.then.T%29%29%2C+kotlin.Comparator%28%28kotlin.comparisons.then.T%29%29%29%2Fcomparator&quot;&gt;comparator&lt;/a&gt; such that the latter is applied only when the former considered values equal.</source>
          <target state="translated">组合此比较器和给定的&lt;a href=&quot;../../kotlin.comparisons/then#kotlin.comparisons%24then%28kotlin.Comparator%28%28kotlin.comparisons.then.T%29%29%2C+kotlin.Comparator%28%28kotlin.comparisons.then.T%29%29%29%2Fcomparator&quot;&gt;比较器&lt;/a&gt;，以便仅当前者认为值相等时才应用后者。</target>
        </trans-unit>
        <trans-unit id="f4ded846e966c56bbdc7aa091cefd2533d52d055" translate="yes" xml:space="preserve">
          <source>Combines this comparator and the given &lt;a href=&quot;../../kotlin.comparisons/then#kotlin.comparisons%24then(kotlin.Comparator((kotlin.comparisons.then.T)),%20kotlin.Comparator((kotlin.comparisons.then.T)))/comparator&quot;&gt;comparator&lt;/a&gt; such that the latter is applied only when the former considered values equal.</source>
          <target state="translated">组合此比较器和给定的&lt;a href=&quot;../../kotlin.comparisons/then#kotlin.comparisons%24then(kotlin.Comparator((kotlin.comparisons.then.T)),%20kotlin.Comparator((kotlin.comparisons.then.T)))/comparator&quot;&gt;比较器&lt;/a&gt;，以便仅当前者认为值相等时才应用后者。</target>
        </trans-unit>
        <trans-unit id="aa944040dfe0fb45014966e84a517fc243499d68" translate="yes" xml:space="preserve">
          <source>Combines this comparator and the given &lt;a href=&quot;../../kotlin.comparisons/then-descending#kotlin.comparisons%24thenDescending%28kotlin.Comparator%28%28kotlin.comparisons.thenDescending.T%29%29%2C+kotlin.Comparator%28%28kotlin.comparisons.thenDescending.T%29%29%29%2Fcomparator&quot;&gt;comparator&lt;/a&gt; such that the latter is applied only when the former considered values equal.</source>
          <target state="translated">组合此比较器和给定的&lt;a href=&quot;../../kotlin.comparisons/then-descending#kotlin.comparisons%24thenDescending%28kotlin.Comparator%28%28kotlin.comparisons.thenDescending.T%29%29%2C+kotlin.Comparator%28%28kotlin.comparisons.thenDescending.T%29%29%29%2Fcomparator&quot;&gt;比较器&lt;/a&gt;，以便仅当前者认为值相等时才应用后者。</target>
        </trans-unit>
        <trans-unit id="d5df0607bfc7d07081d98f2232ec69dbb07df2bf" translate="yes" xml:space="preserve">
          <source>Combines this comparator and the given &lt;a href=&quot;../../kotlin.comparisons/then-descending#kotlin.comparisons%24thenDescending(kotlin.Comparator((kotlin.comparisons.thenDescending.T)),%20kotlin.Comparator((kotlin.comparisons.thenDescending.T)))/comparator&quot;&gt;comparator&lt;/a&gt; such that the latter is applied only when the former considered values equal.</source>
          <target state="translated">组合此比较器和给定的&lt;a href=&quot;../../kotlin.comparisons/then-descending#kotlin.comparisons%24thenDescending(kotlin.Comparator((kotlin.comparisons.thenDescending.T)),%20kotlin.Comparator((kotlin.comparisons.thenDescending.T)))/comparator&quot;&gt;比较器&lt;/a&gt;，以便仅当前者认为值相等时才应用后者。</target>
        </trans-unit>
        <trans-unit id="3182280e76b1e0ba69eeec6ebc5b81c116f7140b" translate="yes" xml:space="preserve">
          <source>Combines this comparator and the given &lt;a href=&quot;then#kotlin.comparisons%24then%28kotlin.Comparator%28%28kotlin.comparisons.then.T%29%29%2C+kotlin.Comparator%28%28kotlin.comparisons.then.T%29%29%29%2Fcomparator&quot;&gt;comparator&lt;/a&gt; such that the latter is applied only when the former considered values equal.</source>
          <target state="translated">组合此比较器和给定的&lt;a href=&quot;then#kotlin.comparisons%24then%28kotlin.Comparator%28%28kotlin.comparisons.then.T%29%29%2C+kotlin.Comparator%28%28kotlin.comparisons.then.T%29%29%29%2Fcomparator&quot;&gt;比较器&lt;/a&gt;，以便仅当前者认为值相等时才应用后者。</target>
        </trans-unit>
        <trans-unit id="9d495df0f105ee355d124d99d113a730ad352880" translate="yes" xml:space="preserve">
          <source>Combines this comparator and the given &lt;a href=&quot;then#kotlin.comparisons%24then(kotlin.Comparator((kotlin.comparisons.then.T)),%20kotlin.Comparator((kotlin.comparisons.then.T)))/comparator&quot;&gt;comparator&lt;/a&gt; such that the latter is applied only when the former considered values equal.</source>
          <target state="translated">组合此比较器和给定的&lt;a href=&quot;then#kotlin.comparisons%24then(kotlin.Comparator((kotlin.comparisons.then.T)),%20kotlin.Comparator((kotlin.comparisons.then.T)))/comparator&quot;&gt;比较器&lt;/a&gt;，以便仅当前者认为值相等时才应用后者。</target>
        </trans-unit>
        <trans-unit id="c9d4be5d9d7dd44f3d11fc44a518f6dc297db260" translate="yes" xml:space="preserve">
          <source>Combines this comparator and the given &lt;a href=&quot;then-descending#kotlin.comparisons%24thenDescending%28kotlin.Comparator%28%28kotlin.comparisons.thenDescending.T%29%29%2C+kotlin.Comparator%28%28kotlin.comparisons.thenDescending.T%29%29%29%2Fcomparator&quot;&gt;comparator&lt;/a&gt; such that the latter is applied only when the former considered values equal.</source>
          <target state="translated">组合此比较器和给定的&lt;a href=&quot;then-descending#kotlin.comparisons%24thenDescending%28kotlin.Comparator%28%28kotlin.comparisons.thenDescending.T%29%29%2C+kotlin.Comparator%28%28kotlin.comparisons.thenDescending.T%29%29%29%2Fcomparator&quot;&gt;比较器&lt;/a&gt;，以便仅当前者认为值相等时才应用后者。</target>
        </trans-unit>
        <trans-unit id="5ccbc9d8e07be78cc0f15a1badca7482d8313eac" translate="yes" xml:space="preserve">
          <source>Combines this comparator and the given &lt;a href=&quot;then-descending#kotlin.comparisons%24thenDescending(kotlin.Comparator((kotlin.comparisons.thenDescending.T)),%20kotlin.Comparator((kotlin.comparisons.thenDescending.T)))/comparator&quot;&gt;comparator&lt;/a&gt; such that the latter is applied only when the former considered values equal.</source>
          <target state="translated">组合此比较器和给定的&lt;a href=&quot;then-descending#kotlin.comparisons%24thenDescending(kotlin.Comparator((kotlin.comparisons.thenDescending.T)),%20kotlin.Comparator((kotlin.comparisons.thenDescending.T)))/comparator&quot;&gt;比较器&lt;/a&gt;，以便仅当前者认为值相等时才应用后者。</target>
        </trans-unit>
        <trans-unit id="655832d3fde30ed3652945719ee23489155c6d76" translate="yes" xml:space="preserve">
          <source>Combining context elements</source>
          <target state="translated">结合上下文元素</target>
        </trans-unit>
        <trans-unit id="a678820233b37a0386d0e5144dbf7eca5694adea" translate="yes" xml:space="preserve">
          <source>Command line keys accepted by the compiler are also a kind of public API, and they are subject to the same considerations. Supported flags (those that don't have the &quot;-X&quot; or &quot;-XX&quot; prefix) can be added only in feature releases and should be properly deprecated before removing them. The &quot;-X&quot; and &quot;-XX&quot; flags are experimental and can be added and removed at any time.</source>
          <target state="translated">编译器接受的命令行密钥也是一种公共API,它们也要受到同样的考虑。支持的标志(那些没有&quot;-X &quot;或&quot;-XX &quot;前缀的标志)只能在功能发布中添加,在删除它们之前应该适当地废弃。&quot;-X &quot;和&quot;-XX &quot;标志是试验性的,可以随时添加和删除。</target>
        </trans-unit>
        <trans-unit id="fce06e20e5f7f74aacccab40b59b75a56c8f7305" translate="yes" xml:space="preserve">
          <source>Comments</source>
          <target state="translated">Comments</target>
        </trans-unit>
        <trans-unit id="4252d4d3d86dacf947a846c649f1acc677e6bde8" translate="yes" xml:space="preserve">
          <source>Comments are initiated with &lt;code&gt;//&lt;/code&gt; and last until the end of the line. Block comments start with &lt;code&gt;/*&lt;/code&gt; and end with &lt;code&gt;*/&lt;/code&gt;.</source>
          <target state="translated">注释以 &lt;code&gt;//&lt;/code&gt; 开头,并一直持续到行尾。块注释以 &lt;code&gt;/*&lt;/code&gt; 开头，以 &lt;code&gt;*/&lt;/code&gt; 结束。</target>
        </trans-unit>
        <trans-unit id="0e642e061623271094dc7ea7c52704294acbde8e" translate="yes" xml:space="preserve">
          <source>Common code can rely on a set of libraries that cover everyday tasks such as &lt;a href=&quot;http://ktor.io/clients/http-client/multiplatform.html&quot;&gt;HTTP&lt;/a&gt;, &lt;a href=&quot;https://github.com/Kotlin/kotlinx.serialization&quot;&gt;serialization&lt;/a&gt;, and &lt;a href=&quot;https://github.com/Kotlin/kotlinx.coroutines&quot;&gt;managing coroutines&lt;/a&gt;. Also, an extensive standard library is available on all platforms.</source>
          <target state="translated">通用代码可以依靠一组涵盖日常任务的库，例如&lt;a href=&quot;http://ktor.io/clients/http-client/multiplatform.html&quot;&gt;HTTP&lt;/a&gt;，&lt;a href=&quot;https://github.com/Kotlin/kotlinx.serialization&quot;&gt;序列化&lt;/a&gt;和&lt;a href=&quot;https://github.com/Kotlin/kotlinx.coroutines&quot;&gt;管理协程&lt;/a&gt;。此外，所有平台上都提供了广泛的标准库。</target>
        </trans-unit>
        <trans-unit id="7c5c47656459f60f0feb2f4e1b5c3e54f10a0bec" translate="yes" xml:space="preserve">
          <source>Common exception processing API</source>
          <target state="translated">常见的异常处理API</target>
        </trans-unit>
        <trans-unit id="eacd29e150bf7f4b19b8fab3eb797604a6c1b6f2" translate="yes" xml:space="preserve">
          <source>Common operations</source>
          <target state="translated">共同业务</target>
        </trans-unit>
        <trans-unit id="e4d860d70b0968a7d424f45eff863ac62b72ef78" translate="yes" xml:space="preserve">
          <source>Common operations are available for both &lt;a href=&quot;collections-overview#collection-types&quot;&gt;read-only and mutable collections&lt;/a&gt;. Common operations fall into these groups:</source>
          <target state="translated">通用操作可用于&lt;a href=&quot;collections-overview#collection-types&quot;&gt;只读和可变集合&lt;/a&gt;。常见操作分为以下几类：</target>
        </trans-unit>
        <trans-unit id="3d7376e670dd5b4d233ded9240542489681eaa53" translate="yes" xml:space="preserve">
          <source>Common options</source>
          <target state="translated">通用选项</target>
        </trans-unit>
        <trans-unit id="b40c16c809d9f085eed9e9310288c4891fccf0d2" translate="yes" xml:space="preserve">
          <source>Common part</source>
          <target state="translated">通用部件</target>
        </trans-unit>
        <trans-unit id="330e83daddac4ff84e2b44a0b55bc7b1aba95130" translate="yes" xml:space="preserve">
          <source>Common supertype calculation with non-proper type and flexible one leads to incorrect results</source>
          <target state="translated">普通的超类型计算与非特殊类型和灵活类型的计算导致了错误的结果。</target>
        </trans-unit>
        <trans-unit id="1e3fbd778f529cdfc6164142e4e619271f0a6312" translate="yes" xml:space="preserve">
          <source>Common target configuration</source>
          <target state="translated">通用目标配置</target>
        </trans-unit>
        <trans-unit id="bfd58ee3a270f3a931009900e1008d549bbd7453" translate="yes" xml:space="preserve">
          <source>Community</source>
          <target state="translated">Community</target>
        </trans-unit>
        <trans-unit id="dcd05a800dce1c0a95f1b07835a587a1fa065ad4" translate="yes" xml:space="preserve">
          <source>Community Resources</source>
          <target state="translated">社区资源</target>
        </trans-unit>
        <trans-unit id="dc7a4ca91615d001457aed95dcc1d27922425da6" translate="yes" xml:space="preserve">
          <source>Companion</source>
          <target state="translated">Companion</target>
        </trans-unit>
        <trans-unit id="76a9034ecffd7cb1dff04cfc41816a3e9b5f342f" translate="yes" xml:space="preserve">
          <source>Companion Object Extension Functions</source>
          <target state="translated">伴侣对象扩展功能</target>
        </trans-unit>
        <trans-unit id="d19ba530b1f6d42ff6d0697705f54d0607d522fb" translate="yes" xml:space="preserve">
          <source>Companion Object Extensions</source>
          <target state="translated">伴侣对象扩展</target>
        </trans-unit>
        <trans-unit id="c87b5c0cdaaf86742b62731a09a76f2906230aa1" translate="yes" xml:space="preserve">
          <source>Companion Object Functions</source>
          <target state="translated">伴侣对象功能</target>
        </trans-unit>
        <trans-unit id="35085e4e1da1c965bcb73671fc6cd5c4f3c137f0" translate="yes" xml:space="preserve">
          <source>Companion Object Properties</source>
          <target state="translated">伴侣对象属性</target>
        </trans-unit>
        <trans-unit id="9ccecc23410a1a5c9603c9f119fb36ba0d3a90c6" translate="yes" xml:space="preserve">
          <source>Companion Objects</source>
          <target state="translated">伴侣对象</target>
        </trans-unit>
        <trans-unit id="3e9e294591e17be498c2998b9dcdd5d9948d5b40" translate="yes" xml:space="preserve">
          <source>Companion object</source>
          <target state="translated">伴随物</target>
        </trans-unit>
        <trans-unit id="db9f5302d7578c7b0b299e25c0dbce75c111a3fd" translate="yes" xml:space="preserve">
          <source>Companion object extensions</source>
          <target state="translated">配套对象扩展</target>
        </trans-unit>
        <trans-unit id="876a320a63980b4dbb6c30fb84d4a4bcffe205aa" translate="yes" xml:space="preserve">
          <source>Companion objects</source>
          <target state="translated">伴侣对象</target>
        </trans-unit>
        <trans-unit id="ef74a191950a837cb2f7a2546b6adc5ee933766b" translate="yes" xml:space="preserve">
          <source>Companion objects and their members can only be accessed via the containing class name, not via instances of the containing class. Kotlin does not support class-level functions that also can be overridden in subclasses (like &lt;code&gt;@classmethod&lt;/code&gt; in Python). If you try to redeclare a companion object in a subclass, you'll just shadow the one from the base class. If you need an overridable &quot;class-level&quot; function, make it an ordinary open function in which you do not access any instance members - you can override it in subclasses, and when you call it via an object instance, the override in the object's class will be called. It is possible, but inconvenient, to call functions via a class reference in Kotlin, so we won't cover that here.</source>
          <target state="translated">伴侣对象及其成员只能通过包含的类名称访问，而不能通过包含的类的实例访问。 Kotlin不支持类级别的函数，这些类级别的函数也可以在子类中重写（例如Python中的 &lt;code&gt;@classmethod&lt;/code&gt; ）。如果尝试在子类中重新声明一个伴随对象，则只将其从基类中隐藏起来即可。如果您需要一个可覆盖的&amp;ldquo;类级&amp;rdquo;函数，请将其设为普通的开放函数，在该函数中您不访问任何实例成员-您可以在子类中覆盖它，并且当您通过对象实例调用它时，该对象的覆盖将被覆盖类将被调用。通过Kotlin中的类引用来调用函数是可能的，但很不方便，因此在此不做介绍。</target>
        </trans-unit>
        <trans-unit id="eadfd3f2fff5b46637c267d52d54cd4bbd4cc506" translate="yes" xml:space="preserve">
          <source>Comparable</source>
          <target state="translated">Comparable</target>
        </trans-unit>
        <trans-unit id="bd5dc2ff43c21afc00e56a2f75cce397b8506026" translate="yes" xml:space="preserve">
          <source>Comparator</source>
          <target state="translated">Comparator</target>
        </trans-unit>
        <trans-unit id="a3a836144d10521d89db63993e5f03ccdb20e02b" translate="yes" xml:space="preserve">
          <source>Comparator binary search</source>
          <target state="translated">比较器二元搜索</target>
        </trans-unit>
        <trans-unit id="1b61c50cc69d4a3899d2e5255c211dd339b0f329" translate="yes" xml:space="preserve">
          <source>Compare the types of bound and the corresponding unbound references. Bound callable reference has its receiver &quot;attached&quot; to it, so the type of the receiver is no longer a parameter:</source>
          <target state="translated">比较绑定和对应的非绑定引用的类型。绑定的可调用引用有它的接收器 &quot;附加 &quot;在上面,所以接收器的类型不再是一个参数。</target>
        </trans-unit>
        <trans-unit id="3a0f7e5fa5fa9afa8cee3b2620aba881e90696fe" translate="yes" xml:space="preserve">
          <source>Compared to publishing a plain Kotlin/JVM or Java project, there is no need to create publications manually via the &lt;code&gt;publishing { ... }&lt;/code&gt; DSL. The publications are automatically created for each of the targets that can be built on the current host, except for the Android target, which needs an additional step to configure publishing, see &lt;a href=&quot;#publishing-android-libraries&quot;&gt;Publishing Android libraries&lt;/a&gt;.</source>
          <target state="translated">与发布普通的Kotlin / JVM或Java项目相比，不需要通过 &lt;code&gt;publishing { ... }&lt;/code&gt; DSL 手动创建发布。将为可在当前主机上构建的每个目标自动创建发布，但Android目标除外，Android目标需要额外的步骤来配置发布，请参阅&lt;a href=&quot;#publishing-android-libraries&quot;&gt;发布Android库&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="64852406255a9a4113e2f4981e16599f3cbd0bde" translate="yes" xml:space="preserve">
          <source>Compares its two arguments for order. Returns zero if the arguments are equal, a negative number if the first argument is less than the second, or a positive number if the first argument is greater than the second.</source>
          <target state="translated">比较两个参数的顺序。如果参数相等,则返回0;如果第一个参数小于第二个参数,则返回负数;如果第一个参数大于第二个参数,则返回正数。</target>
        </trans-unit>
        <trans-unit id="90c5ea08e5923926d850965758a29907d554080d" translate="yes" xml:space="preserve">
          <source>Compares this list with another list instance with the ordered structural equality.</source>
          <target state="translated">将这个列表与另一个列表实例进行有序的结构平等的比较。</target>
        </trans-unit>
        <trans-unit id="950ffca5dd347a5c64e4906fa2cb58f36f144d25" translate="yes" xml:space="preserve">
          <source>Compares this list with other list instance with the ordered structural equality.</source>
          <target state="translated">将此列表与其他列表实例进行有序的结构平等比较。</target>
        </trans-unit>
        <trans-unit id="554350438c48966aa52d911e0f5e0fb4bd143c4b" translate="yes" xml:space="preserve">
          <source>Compares this map with other instance with the ordered structural equality.</source>
          <target state="translated">将此图与其他实例进行有序的结构平等比较。</target>
        </trans-unit>
        <trans-unit id="fad1ea1a98575ba2e457b4fe384ad3fa1869af18" translate="yes" xml:space="preserve">
          <source>Compares this object with the specified object for order. Returns zero if this object is equal to the specified &lt;a href=&quot;../-comparable/compare-to#kotlin.Comparable%24compareTo%28kotlin.Comparable.T%29%2Fother&quot;&gt;other&lt;/a&gt; object, a negative number if it's less than &lt;a href=&quot;../-comparable/compare-to#kotlin.Comparable%24compareTo%28kotlin.Comparable.T%29%2Fother&quot;&gt;other&lt;/a&gt;, or a positive number if it's greater than &lt;a href=&quot;../-comparable/compare-to#kotlin.Comparable%24compareTo%28kotlin.Comparable.T%29%2Fother&quot;&gt;other&lt;/a&gt;.</source>
          <target state="translated">将此对象与指定对象进行比较。如果此对象是等于指定返回零&lt;a href=&quot;../-comparable/compare-to#kotlin.Comparable%24compareTo%28kotlin.Comparable.T%29%2Fother&quot;&gt;其他&lt;/a&gt;目的，如果它是小于一个负数&lt;a href=&quot;../-comparable/compare-to#kotlin.Comparable%24compareTo%28kotlin.Comparable.T%29%2Fother&quot;&gt;其他&lt;/a&gt;，或者如果它的大于一个正数&lt;a href=&quot;../-comparable/compare-to#kotlin.Comparable%24compareTo%28kotlin.Comparable.T%29%2Fother&quot;&gt;其他&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="3190d62f4d131740bed2429e35fbc6ae47243c94" translate="yes" xml:space="preserve">
          <source>Compares this object with the specified object for order. Returns zero if this object is equal to the specified &lt;a href=&quot;../-comparable/compare-to#kotlin.Comparable%24compareTo(kotlin.Comparable.T)/other&quot;&gt;other&lt;/a&gt; object, a negative number if it's less than &lt;a href=&quot;../-comparable/compare-to#kotlin.Comparable%24compareTo(kotlin.Comparable.T)/other&quot;&gt;other&lt;/a&gt;, or a positive number if it's greater than &lt;a href=&quot;../-comparable/compare-to#kotlin.Comparable%24compareTo(kotlin.Comparable.T)/other&quot;&gt;other&lt;/a&gt;.</source>
          <target state="translated">将此对象与指定对象进行比较。如果此对象是等于指定返回零&lt;a href=&quot;../-comparable/compare-to#kotlin.Comparable%24compareTo(kotlin.Comparable.T)/other&quot;&gt;其他&lt;/a&gt;目的，如果它是小于一个负数&lt;a href=&quot;../-comparable/compare-to#kotlin.Comparable%24compareTo(kotlin.Comparable.T)/other&quot;&gt;其他&lt;/a&gt;，或者如果它的大于一个正数&lt;a href=&quot;../-comparable/compare-to#kotlin.Comparable%24compareTo(kotlin.Comparable.T)/other&quot;&gt;其他&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="5e62d9fb41d6ea3aab1f9658eba34bea551e1eee" translate="yes" xml:space="preserve">
          <source>Compares this object with the specified object for order. Returns zero if this object is equal to the specified &lt;a href=&quot;compare-to#kotlin.Comparable%24compareTo%28kotlin.Comparable.T%29%2Fother&quot;&gt;other&lt;/a&gt; object, a negative number if it's less than &lt;a href=&quot;compare-to#kotlin.Comparable%24compareTo%28kotlin.Comparable.T%29%2Fother&quot;&gt;other&lt;/a&gt;, or a positive number if it's greater than &lt;a href=&quot;compare-to#kotlin.Comparable%24compareTo%28kotlin.Comparable.T%29%2Fother&quot;&gt;other&lt;/a&gt;.</source>
          <target state="translated">将此对象与指定对象进行比较。如果此对象是等于指定返回零&lt;a href=&quot;compare-to#kotlin.Comparable%24compareTo%28kotlin.Comparable.T%29%2Fother&quot;&gt;其他&lt;/a&gt;目的，如果它是小于一个负数&lt;a href=&quot;compare-to#kotlin.Comparable%24compareTo%28kotlin.Comparable.T%29%2Fother&quot;&gt;其他&lt;/a&gt;，或者如果它的大于一个正数&lt;a href=&quot;compare-to#kotlin.Comparable%24compareTo%28kotlin.Comparable.T%29%2Fother&quot;&gt;其他&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="d66583657cf1725802888b3a5f1571777b852fdf" translate="yes" xml:space="preserve">
          <source>Compares this object with the specified object for order. Returns zero if this object is equal to the specified &lt;a href=&quot;compare-to#kotlin.Comparable%24compareTo(kotlin.Comparable.T)/other&quot;&gt;other&lt;/a&gt; object, a negative number if it's less than &lt;a href=&quot;compare-to#kotlin.Comparable%24compareTo(kotlin.Comparable.T)/other&quot;&gt;other&lt;/a&gt;, or a positive number if it's greater than &lt;a href=&quot;compare-to#kotlin.Comparable%24compareTo(kotlin.Comparable.T)/other&quot;&gt;other&lt;/a&gt;.</source>
          <target state="translated">将此对象与指定对象进行比较。如果此对象是等于指定返回零&lt;a href=&quot;compare-to#kotlin.Comparable%24compareTo(kotlin.Comparable.T)/other&quot;&gt;其他&lt;/a&gt;目的，如果它是小于一个负数&lt;a href=&quot;compare-to#kotlin.Comparable%24compareTo(kotlin.Comparable.T)/other&quot;&gt;其他&lt;/a&gt;，或者如果它的大于一个正数&lt;a href=&quot;compare-to#kotlin.Comparable%24compareTo(kotlin.Comparable.T)/other&quot;&gt;其他&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="4b5c37294f97a14ae629288d725d46e480de8ba0" translate="yes" xml:space="preserve">
          <source>Compares this set with another set instance with the unordered structural equality.</source>
          <target state="translated">将这个集合与另一个集合实例进行无序结构平等的比较。</target>
        </trans-unit>
        <trans-unit id="b1d4a384eb36feb8cf6fa29323cb0a2d21427812" translate="yes" xml:space="preserve">
          <source>Compares this set with other set instance with the unordered structural equality.</source>
          <target state="translated">将此集合与其他集合实例进行无序结构平等比较。</target>
        </trans-unit>
        <trans-unit id="0902f9812b6489157b65ec558bae4edb57728b49" translate="yes" xml:space="preserve">
          <source>Compares this value with the specified value for order.</source>
          <target state="translated">将此值与订单的指定值进行比较。</target>
        </trans-unit>
        <trans-unit id="f81e03368adc7d7de8bbaf5d665e6612de25e329" translate="yes" xml:space="preserve">
          <source>Compares this value with the specified value for order. Returns zero if this value is equal to the specified other value, a negative number if it's less than other, or a positive number if it's greater than other.</source>
          <target state="translated">将此值与指定的订单值进行比较,如果此值等于指定的其他值,则返回0;如果小于其他值,则返回负数;如果大于其他值,则返回正数。如果这个值等于指定的其他值,则返回0;如果小于其他值,则返回负数;如果大于其他值,则返回正数。</target>
        </trans-unit>
        <trans-unit id="0a662e45ba9016359694e1a7e66831bc977f9c5a" translate="yes" xml:space="preserve">
          <source>Compares two nullable &lt;a href=&quot;../kotlin/-comparable/index#kotlin.Comparable&quot;&gt;Comparable&lt;/a&gt; values. Null is considered less than any value.</source>
          <target state="translated">比较两个可为null的&lt;a href=&quot;../kotlin/-comparable/index#kotlin.Comparable&quot;&gt;Comparable&lt;/a&gt;值。空值被认为小于任何值。</target>
        </trans-unit>
        <trans-unit id="7f648bb84bfe559e5adececde2ace1dcea302ece" translate="yes" xml:space="preserve">
          <source>Compares two strings lexicographically, optionally ignoring case differences.</source>
          <target state="translated">对两个字符串进行词法上的比较,可以忽略大小写的差异。</target>
        </trans-unit>
        <trans-unit id="9f25fd793181363d5737ac8ecae01b8fe3b0b8a8" translate="yes" xml:space="preserve">
          <source>Compares two values of range domain type and returns true if first is less than or equal to second.</source>
          <target state="translated">比较范围域类型的两个值,如果第一个小于或等于第二个,则返回true。</target>
        </trans-unit>
        <trans-unit id="4c5c61a1bffaec58b4b1260a6d8a25b5edf748b8" translate="yes" xml:space="preserve">
          <source>Compares two values using the specified &lt;a href=&quot;compare-values-by#kotlin.comparisons%24compareValuesBy%28kotlin.comparisons.compareValuesBy.T%2C+kotlin.comparisons.compareValuesBy.T%2C+kotlin.Comparator%28%28kotlin.comparisons.compareValuesBy.K%29%29%2C+kotlin.Function1%28%28kotlin.comparisons.compareValuesBy.T%2C+kotlin.comparisons.compareValuesBy.K%29%29%29%2Fselector&quot;&gt;selector&lt;/a&gt; function to calculate the result of the comparison. The function is applied to the given values &lt;a href=&quot;compare-values-by#kotlin.comparisons%24compareValuesBy%28kotlin.comparisons.compareValuesBy.T%2C+kotlin.comparisons.compareValuesBy.T%2C+kotlin.Comparator%28%28kotlin.comparisons.compareValuesBy.K%29%29%2C+kotlin.Function1%28%28kotlin.comparisons.compareValuesBy.T%2C+kotlin.comparisons.compareValuesBy.K%29%29%29%2Fa&quot;&gt;a&lt;/a&gt; and &lt;a href=&quot;compare-values-by#kotlin.comparisons%24compareValuesBy%28kotlin.comparisons.compareValuesBy.T%2C+kotlin.comparisons.compareValuesBy.T%2C+kotlin.Comparator%28%28kotlin.comparisons.compareValuesBy.K%29%29%2C+kotlin.Function1%28%28kotlin.comparisons.compareValuesBy.T%2C+kotlin.comparisons.compareValuesBy.K%29%29%29%2Fb&quot;&gt;b&lt;/a&gt; and return objects of type K which are then being compared with the given &lt;a href=&quot;compare-values-by#kotlin.comparisons%24compareValuesBy%28kotlin.comparisons.compareValuesBy.T%2C+kotlin.comparisons.compareValuesBy.T%2C+kotlin.Comparator%28%28kotlin.comparisons.compareValuesBy.K%29%29%2C+kotlin.Function1%28%28kotlin.comparisons.compareValuesBy.T%2C+kotlin.comparisons.compareValuesBy.K%29%29%29%2Fcomparator&quot;&gt;comparator&lt;/a&gt;.</source>
          <target state="translated">使用指定的&lt;a href=&quot;compare-values-by#kotlin.comparisons%24compareValuesBy%28kotlin.comparisons.compareValuesBy.T%2C+kotlin.comparisons.compareValuesBy.T%2C+kotlin.Comparator%28%28kotlin.comparisons.compareValuesBy.K%29%29%2C+kotlin.Function1%28%28kotlin.comparisons.compareValuesBy.T%2C+kotlin.comparisons.compareValuesBy.K%29%29%29%2Fselector&quot;&gt;选择器&lt;/a&gt;功能比较两个值以计算比较结果。该函数将应用于给定的值&lt;a href=&quot;compare-values-by#kotlin.comparisons%24compareValuesBy%28kotlin.comparisons.compareValuesBy.T%2C+kotlin.comparisons.compareValuesBy.T%2C+kotlin.Comparator%28%28kotlin.comparisons.compareValuesBy.K%29%29%2C+kotlin.Function1%28%28kotlin.comparisons.compareValuesBy.T%2C+kotlin.comparisons.compareValuesBy.K%29%29%29%2Fa&quot;&gt;a&lt;/a&gt;和&lt;a href=&quot;compare-values-by#kotlin.comparisons%24compareValuesBy%28kotlin.comparisons.compareValuesBy.T%2C+kotlin.comparisons.compareValuesBy.T%2C+kotlin.Comparator%28%28kotlin.comparisons.compareValuesBy.K%29%29%2C+kotlin.Function1%28%28kotlin.comparisons.compareValuesBy.T%2C+kotlin.comparisons.compareValuesBy.K%29%29%29%2Fb&quot;&gt;b&lt;/a&gt;以及类型为K的返回对象，然后将其与给定的&lt;a href=&quot;compare-values-by#kotlin.comparisons%24compareValuesBy%28kotlin.comparisons.compareValuesBy.T%2C+kotlin.comparisons.compareValuesBy.T%2C+kotlin.Comparator%28%28kotlin.comparisons.compareValuesBy.K%29%29%2C+kotlin.Function1%28%28kotlin.comparisons.compareValuesBy.T%2C+kotlin.comparisons.compareValuesBy.K%29%29%29%2Fcomparator&quot;&gt;比较器进行比较&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="157ca1b58611e00213cf38840de0b28de263312a" translate="yes" xml:space="preserve">
          <source>Compares two values using the specified &lt;a href=&quot;compare-values-by#kotlin.comparisons%24compareValuesBy%28kotlin.comparisons.compareValuesBy.T%2C+kotlin.comparisons.compareValuesBy.T%2C+kotlin.Function1%28%28kotlin.comparisons.compareValuesBy.T%2C+kotlin.Comparable%28%28kotlin.Any%29%29%29%29%29%2Fselector&quot;&gt;selector&lt;/a&gt; function to calculate the result of the comparison. The function is applied to the given values &lt;a href=&quot;compare-values-by#kotlin.comparisons%24compareValuesBy%28kotlin.comparisons.compareValuesBy.T%2C+kotlin.comparisons.compareValuesBy.T%2C+kotlin.Function1%28%28kotlin.comparisons.compareValuesBy.T%2C+kotlin.Comparable%28%28kotlin.Any%29%29%29%29%29%2Fa&quot;&gt;a&lt;/a&gt; and &lt;a href=&quot;compare-values-by#kotlin.comparisons%24compareValuesBy%28kotlin.comparisons.compareValuesBy.T%2C+kotlin.comparisons.compareValuesBy.T%2C+kotlin.Function1%28%28kotlin.comparisons.compareValuesBy.T%2C+kotlin.Comparable%28%28kotlin.Any%29%29%29%29%29%2Fb&quot;&gt;b&lt;/a&gt; and return &lt;a href=&quot;../kotlin/-comparable/index#kotlin.Comparable&quot;&gt;Comparable&lt;/a&gt; objects. The result of comparison of these &lt;a href=&quot;../kotlin/-comparable/index#kotlin.Comparable&quot;&gt;Comparable&lt;/a&gt; instances is returned.</source>
          <target state="translated">使用指定的&lt;a href=&quot;compare-values-by#kotlin.comparisons%24compareValuesBy%28kotlin.comparisons.compareValuesBy.T%2C+kotlin.comparisons.compareValuesBy.T%2C+kotlin.Function1%28%28kotlin.comparisons.compareValuesBy.T%2C+kotlin.Comparable%28%28kotlin.Any%29%29%29%29%29%2Fselector&quot;&gt;选择器&lt;/a&gt;功能比较两个值以计算比较结果。该函数将应用于给定的值&lt;a href=&quot;compare-values-by#kotlin.comparisons%24compareValuesBy%28kotlin.comparisons.compareValuesBy.T%2C+kotlin.comparisons.compareValuesBy.T%2C+kotlin.Function1%28%28kotlin.comparisons.compareValuesBy.T%2C+kotlin.Comparable%28%28kotlin.Any%29%29%29%29%29%2Fa&quot;&gt;a&lt;/a&gt;和&lt;a href=&quot;compare-values-by#kotlin.comparisons%24compareValuesBy%28kotlin.comparisons.compareValuesBy.T%2C+kotlin.comparisons.compareValuesBy.T%2C+kotlin.Function1%28%28kotlin.comparisons.compareValuesBy.T%2C+kotlin.Comparable%28%28kotlin.Any%29%29%29%29%29%2Fb&quot;&gt;b&lt;/a&gt;并返回&lt;a href=&quot;../kotlin/-comparable/index#kotlin.Comparable&quot;&gt;Comparable&lt;/a&gt;对象。返回这些&lt;a href=&quot;../kotlin/-comparable/index#kotlin.Comparable&quot;&gt;Comparable&lt;/a&gt;实例的比较结果。</target>
        </trans-unit>
        <trans-unit id="37483468d1d0abbd548c19ce4f9a366c705b1b9d" translate="yes" xml:space="preserve">
          <source>Compares two values using the specified &lt;a href=&quot;compare-values-by#kotlin.comparisons%24compareValuesBy(kotlin.comparisons.compareValuesBy.T,%20kotlin.comparisons.compareValuesBy.T,%20kotlin.Comparator((kotlin.comparisons.compareValuesBy.K)),%20kotlin.Function1((kotlin.comparisons.compareValuesBy.T,%20kotlin.comparisons.compareValuesBy.K)))/selector&quot;&gt;selector&lt;/a&gt; function to calculate the result of the comparison. The function is applied to the given values &lt;a href=&quot;compare-values-by#kotlin.comparisons%24compareValuesBy(kotlin.comparisons.compareValuesBy.T,%20kotlin.comparisons.compareValuesBy.T,%20kotlin.Comparator((kotlin.comparisons.compareValuesBy.K)),%20kotlin.Function1((kotlin.comparisons.compareValuesBy.T,%20kotlin.comparisons.compareValuesBy.K)))/a&quot;&gt;a&lt;/a&gt; and &lt;a href=&quot;compare-values-by#kotlin.comparisons%24compareValuesBy(kotlin.comparisons.compareValuesBy.T,%20kotlin.comparisons.compareValuesBy.T,%20kotlin.Comparator((kotlin.comparisons.compareValuesBy.K)),%20kotlin.Function1((kotlin.comparisons.compareValuesBy.T,%20kotlin.comparisons.compareValuesBy.K)))/b&quot;&gt;b&lt;/a&gt; and return objects of type K which are then being compared with the given &lt;a href=&quot;compare-values-by#kotlin.comparisons%24compareValuesBy(kotlin.comparisons.compareValuesBy.T,%20kotlin.comparisons.compareValuesBy.T,%20kotlin.Comparator((kotlin.comparisons.compareValuesBy.K)),%20kotlin.Function1((kotlin.comparisons.compareValuesBy.T,%20kotlin.comparisons.compareValuesBy.K)))/comparator&quot;&gt;comparator&lt;/a&gt;.</source>
          <target state="translated">使用指定的&lt;a href=&quot;compare-values-by#kotlin.comparisons%24compareValuesBy(kotlin.comparisons.compareValuesBy.T,%20kotlin.comparisons.compareValuesBy.T,%20kotlin.Comparator((kotlin.comparisons.compareValuesBy.K)),%20kotlin.Function1((kotlin.comparisons.compareValuesBy.T,%20kotlin.comparisons.compareValuesBy.K)))/selector&quot;&gt;选择器&lt;/a&gt;功能比较两个值以计算比较结果。该函数将应用于给定的值&lt;a href=&quot;compare-values-by#kotlin.comparisons%24compareValuesBy(kotlin.comparisons.compareValuesBy.T,%20kotlin.comparisons.compareValuesBy.T,%20kotlin.Comparator((kotlin.comparisons.compareValuesBy.K)),%20kotlin.Function1((kotlin.comparisons.compareValuesBy.T,%20kotlin.comparisons.compareValuesBy.K)))/a&quot;&gt;a&lt;/a&gt;和&lt;a href=&quot;compare-values-by#kotlin.comparisons%24compareValuesBy(kotlin.comparisons.compareValuesBy.T,%20kotlin.comparisons.compareValuesBy.T,%20kotlin.Comparator((kotlin.comparisons.compareValuesBy.K)),%20kotlin.Function1((kotlin.comparisons.compareValuesBy.T,%20kotlin.comparisons.compareValuesBy.K)))/b&quot;&gt;b&lt;/a&gt;以及类型为K的返回对象，然后将其与给定的&lt;a href=&quot;compare-values-by#kotlin.comparisons%24compareValuesBy(kotlin.comparisons.compareValuesBy.T,%20kotlin.comparisons.compareValuesBy.T,%20kotlin.Comparator((kotlin.comparisons.compareValuesBy.K)),%20kotlin.Function1((kotlin.comparisons.compareValuesBy.T,%20kotlin.comparisons.compareValuesBy.K)))/comparator&quot;&gt;比较器进行比较&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="fa8ff08d38091c1115590e83835880e44f71aa75" translate="yes" xml:space="preserve">
          <source>Compares two values using the specified &lt;a href=&quot;compare-values-by#kotlin.comparisons%24compareValuesBy(kotlin.comparisons.compareValuesBy.T,%20kotlin.comparisons.compareValuesBy.T,%20kotlin.Function1((kotlin.comparisons.compareValuesBy.T,%20kotlin.Comparable?((kotlin.Any?)))))/selector&quot;&gt;selector&lt;/a&gt; function to calculate the result of the comparison. The function is applied to the given values &lt;a href=&quot;compare-values-by#kotlin.comparisons%24compareValuesBy(kotlin.comparisons.compareValuesBy.T,%20kotlin.comparisons.compareValuesBy.T,%20kotlin.Function1((kotlin.comparisons.compareValuesBy.T,%20kotlin.Comparable?((kotlin.Any?)))))/a&quot;&gt;a&lt;/a&gt; and &lt;a href=&quot;compare-values-by#kotlin.comparisons%24compareValuesBy(kotlin.comparisons.compareValuesBy.T,%20kotlin.comparisons.compareValuesBy.T,%20kotlin.Function1((kotlin.comparisons.compareValuesBy.T,%20kotlin.Comparable?((kotlin.Any?)))))/b&quot;&gt;b&lt;/a&gt; and return &lt;a href=&quot;../kotlin/-comparable/index#kotlin.Comparable&quot;&gt;Comparable&lt;/a&gt; objects. The result of comparison of these &lt;a href=&quot;../kotlin/-comparable/index#kotlin.Comparable&quot;&gt;Comparable&lt;/a&gt; instances is returned.</source>
          <target state="translated">使用指定的&lt;a href=&quot;compare-values-by#kotlin.comparisons%24compareValuesBy(kotlin.comparisons.compareValuesBy.T,%20kotlin.comparisons.compareValuesBy.T,%20kotlin.Function1((kotlin.comparisons.compareValuesBy.T,%20kotlin.Comparable?((kotlin.Any?)))))/selector&quot;&gt;选择器&lt;/a&gt;功能比较两个值以计算比较结果。该函数将应用于给定的值&lt;a href=&quot;compare-values-by#kotlin.comparisons%24compareValuesBy(kotlin.comparisons.compareValuesBy.T,%20kotlin.comparisons.compareValuesBy.T,%20kotlin.Function1((kotlin.comparisons.compareValuesBy.T,%20kotlin.Comparable?((kotlin.Any?)))))/a&quot;&gt;a&lt;/a&gt;和&lt;a href=&quot;compare-values-by#kotlin.comparisons%24compareValuesBy(kotlin.comparisons.compareValuesBy.T,%20kotlin.comparisons.compareValuesBy.T,%20kotlin.Function1((kotlin.comparisons.compareValuesBy.T,%20kotlin.Comparable?((kotlin.Any?)))))/b&quot;&gt;b&lt;/a&gt;并返回&lt;a href=&quot;../kotlin/-comparable/index#kotlin.Comparable&quot;&gt;Comparable&lt;/a&gt;对象。返回这些&lt;a href=&quot;../kotlin/-comparable/index#kotlin.Comparable&quot;&gt;Comparable&lt;/a&gt;实例的比较结果。</target>
        </trans-unit>
        <trans-unit id="37750917f27b0d713270a6193d01e2df7708d622" translate="yes" xml:space="preserve">
          <source>Compares two values using the specified functions &lt;a href=&quot;compare-values-by#kotlin.comparisons%24compareValuesBy%28kotlin.comparisons.compareValuesBy.T%2C+kotlin.comparisons.compareValuesBy.T%2C+kotlin.Array%28%28kotlin.Function1%28%28kotlin.comparisons.compareValuesBy.T%2C+kotlin.Comparable%28%28kotlin.Any%29%29%29%29%29%29%29%2Fselectors&quot;&gt;selectors&lt;/a&gt; to calculate the result of the comparison. The functions are called sequentially, receive the given values &lt;a href=&quot;compare-values-by#kotlin.comparisons%24compareValuesBy%28kotlin.comparisons.compareValuesBy.T%2C+kotlin.comparisons.compareValuesBy.T%2C+kotlin.Array%28%28kotlin.Function1%28%28kotlin.comparisons.compareValuesBy.T%2C+kotlin.Comparable%28%28kotlin.Any%29%29%29%29%29%29%29%2Fa&quot;&gt;a&lt;/a&gt; and &lt;a href=&quot;compare-values-by#kotlin.comparisons%24compareValuesBy%28kotlin.comparisons.compareValuesBy.T%2C+kotlin.comparisons.compareValuesBy.T%2C+kotlin.Array%28%28kotlin.Function1%28%28kotlin.comparisons.compareValuesBy.T%2C+kotlin.Comparable%28%28kotlin.Any%29%29%29%29%29%29%29%2Fb&quot;&gt;b&lt;/a&gt; and return &lt;a href=&quot;../kotlin/-comparable/index#kotlin.Comparable&quot;&gt;Comparable&lt;/a&gt; objects. As soon as the &lt;a href=&quot;../kotlin/-comparable/index#kotlin.Comparable&quot;&gt;Comparable&lt;/a&gt; instances returned by a function for &lt;a href=&quot;compare-values-by#kotlin.comparisons%24compareValuesBy%28kotlin.comparisons.compareValuesBy.T%2C+kotlin.comparisons.compareValuesBy.T%2C+kotlin.Array%28%28kotlin.Function1%28%28kotlin.comparisons.compareValuesBy.T%2C+kotlin.Comparable%28%28kotlin.Any%29%29%29%29%29%29%29%2Fa&quot;&gt;a&lt;/a&gt; and &lt;a href=&quot;compare-values-by#kotlin.comparisons%24compareValuesBy%28kotlin.comparisons.compareValuesBy.T%2C+kotlin.comparisons.compareValuesBy.T%2C+kotlin.Array%28%28kotlin.Function1%28%28kotlin.comparisons.compareValuesBy.T%2C+kotlin.Comparable%28%28kotlin.Any%29%29%29%29%29%29%29%2Fb&quot;&gt;b&lt;/a&gt; values do not compare as equal, the result of that comparison is returned.</source>
          <target state="translated">使用指定的函数&lt;a href=&quot;compare-values-by#kotlin.comparisons%24compareValuesBy%28kotlin.comparisons.compareValuesBy.T%2C+kotlin.comparisons.compareValuesBy.T%2C+kotlin.Array%28%28kotlin.Function1%28%28kotlin.comparisons.compareValuesBy.T%2C+kotlin.Comparable%28%28kotlin.Any%29%29%29%29%29%29%29%2Fselectors&quot;&gt;选择器&lt;/a&gt;比较两个值，以计算比较结果。这些函数被顺序调用，接收给定的值&lt;a href=&quot;compare-values-by#kotlin.comparisons%24compareValuesBy%28kotlin.comparisons.compareValuesBy.T%2C+kotlin.comparisons.compareValuesBy.T%2C+kotlin.Array%28%28kotlin.Function1%28%28kotlin.comparisons.compareValuesBy.T%2C+kotlin.Comparable%28%28kotlin.Any%29%29%29%29%29%29%29%2Fa&quot;&gt;a&lt;/a&gt;和&lt;a href=&quot;compare-values-by#kotlin.comparisons%24compareValuesBy%28kotlin.comparisons.compareValuesBy.T%2C+kotlin.comparisons.compareValuesBy.T%2C+kotlin.Array%28%28kotlin.Function1%28%28kotlin.comparisons.compareValuesBy.T%2C+kotlin.Comparable%28%28kotlin.Any%29%29%29%29%29%29%29%2Fb&quot;&gt;b&lt;/a&gt;并返回&lt;a href=&quot;../kotlin/-comparable/index#kotlin.Comparable&quot;&gt;Comparable&lt;/a&gt;对象。一旦函数针对&lt;a href=&quot;compare-values-by#kotlin.comparisons%24compareValuesBy%28kotlin.comparisons.compareValuesBy.T%2C+kotlin.comparisons.compareValuesBy.T%2C+kotlin.Array%28%28kotlin.Function1%28%28kotlin.comparisons.compareValuesBy.T%2C+kotlin.Comparable%28%28kotlin.Any%29%29%29%29%29%29%29%2Fa&quot;&gt;a&lt;/a&gt;和&lt;a href=&quot;compare-values-by#kotlin.comparisons%24compareValuesBy%28kotlin.comparisons.compareValuesBy.T%2C+kotlin.comparisons.compareValuesBy.T%2C+kotlin.Array%28%28kotlin.Function1%28%28kotlin.comparisons.compareValuesBy.T%2C+kotlin.Comparable%28%28kotlin.Any%29%29%29%29%29%29%29%2Fb&quot;&gt;b&lt;/a&gt;值返回的&lt;a href=&quot;../kotlin/-comparable/index#kotlin.Comparable&quot;&gt;Comparable&lt;/a&gt;实例不相等，则返回该比较的结果。</target>
        </trans-unit>
        <trans-unit id="d183853cdfa5f8cb9c81042f165476b1d4725c93" translate="yes" xml:space="preserve">
          <source>Compares two values using the specified functions &lt;a href=&quot;compare-values-by#kotlin.comparisons%24compareValuesBy(kotlin.comparisons.compareValuesBy.T,%20kotlin.comparisons.compareValuesBy.T,%20kotlin.Array((kotlin.Function1((kotlin.comparisons.compareValuesBy.T,%20kotlin.Comparable?((kotlin.Any?)))))))/selectors&quot;&gt;selectors&lt;/a&gt; to calculate the result of the comparison. The functions are called sequentially, receive the given values &lt;a href=&quot;compare-values-by#kotlin.comparisons%24compareValuesBy(kotlin.comparisons.compareValuesBy.T,%20kotlin.comparisons.compareValuesBy.T,%20kotlin.Array((kotlin.Function1((kotlin.comparisons.compareValuesBy.T,%20kotlin.Comparable?((kotlin.Any?)))))))/a&quot;&gt;a&lt;/a&gt; and &lt;a href=&quot;compare-values-by#kotlin.comparisons%24compareValuesBy(kotlin.comparisons.compareValuesBy.T,%20kotlin.comparisons.compareValuesBy.T,%20kotlin.Array((kotlin.Function1((kotlin.comparisons.compareValuesBy.T,%20kotlin.Comparable?((kotlin.Any?)))))))/b&quot;&gt;b&lt;/a&gt; and return &lt;a href=&quot;../kotlin/-comparable/index#kotlin.Comparable&quot;&gt;Comparable&lt;/a&gt; objects. As soon as the &lt;a href=&quot;../kotlin/-comparable/index#kotlin.Comparable&quot;&gt;Comparable&lt;/a&gt; instances returned by a function for &lt;a href=&quot;compare-values-by#kotlin.comparisons%24compareValuesBy(kotlin.comparisons.compareValuesBy.T,%20kotlin.comparisons.compareValuesBy.T,%20kotlin.Array((kotlin.Function1((kotlin.comparisons.compareValuesBy.T,%20kotlin.Comparable?((kotlin.Any?)))))))/a&quot;&gt;a&lt;/a&gt; and &lt;a href=&quot;compare-values-by#kotlin.comparisons%24compareValuesBy(kotlin.comparisons.compareValuesBy.T,%20kotlin.comparisons.compareValuesBy.T,%20kotlin.Array((kotlin.Function1((kotlin.comparisons.compareValuesBy.T,%20kotlin.Comparable?((kotlin.Any?)))))))/b&quot;&gt;b&lt;/a&gt; values do not compare as equal, the result of that comparison is returned.</source>
          <target state="translated">使用指定的函数&lt;a href=&quot;compare-values-by#kotlin.comparisons%24compareValuesBy(kotlin.comparisons.compareValuesBy.T,%20kotlin.comparisons.compareValuesBy.T,%20kotlin.Array((kotlin.Function1((kotlin.comparisons.compareValuesBy.T,%20kotlin.Comparable?((kotlin.Any?)))))))/selectors&quot;&gt;选择器&lt;/a&gt;比较两个值，以计算比较结果。这些函数被顺序调用，接收给定的值&lt;a href=&quot;compare-values-by#kotlin.comparisons%24compareValuesBy(kotlin.comparisons.compareValuesBy.T,%20kotlin.comparisons.compareValuesBy.T,%20kotlin.Array((kotlin.Function1((kotlin.comparisons.compareValuesBy.T,%20kotlin.Comparable?((kotlin.Any?)))))))/a&quot;&gt;a&lt;/a&gt;和&lt;a href=&quot;compare-values-by#kotlin.comparisons%24compareValuesBy(kotlin.comparisons.compareValuesBy.T,%20kotlin.comparisons.compareValuesBy.T,%20kotlin.Array((kotlin.Function1((kotlin.comparisons.compareValuesBy.T,%20kotlin.Comparable?((kotlin.Any?)))))))/b&quot;&gt;b&lt;/a&gt;并返回&lt;a href=&quot;../kotlin/-comparable/index#kotlin.Comparable&quot;&gt;Comparable&lt;/a&gt;对象。一旦函数针对&lt;a href=&quot;compare-values-by#kotlin.comparisons%24compareValuesBy(kotlin.comparisons.compareValuesBy.T,%20kotlin.comparisons.compareValuesBy.T,%20kotlin.Array((kotlin.Function1((kotlin.comparisons.compareValuesBy.T,%20kotlin.Comparable?((kotlin.Any?)))))))/a&quot;&gt;a&lt;/a&gt;和&lt;a href=&quot;compare-values-by#kotlin.comparisons%24compareValuesBy(kotlin.comparisons.compareValuesBy.T,%20kotlin.comparisons.compareValuesBy.T,%20kotlin.Array((kotlin.Function1((kotlin.comparisons.compareValuesBy.T,%20kotlin.Comparable?((kotlin.Any?)))))))/b&quot;&gt;b&lt;/a&gt;值返回的&lt;a href=&quot;../kotlin/-comparable/index#kotlin.Comparable&quot;&gt;Comparable&lt;/a&gt;实例不进行相等比较，则将返回该比较的结果。</target>
        </trans-unit>
        <trans-unit id="9f19ef02e93e90774153bbd6ed5b2351ab977c73" translate="yes" xml:space="preserve">
          <source>Compares value with &lt;a href=&quot;compare-and-set#kotlin.native.concurrent.AtomicInt%24compareAndSet%28kotlin.Int%2C+kotlin.Int%29%2Fexpected&quot;&gt;expected&lt;/a&gt; and replaces it with &lt;a href=&quot;compare-and-set#kotlin.native.concurrent.AtomicInt%24compareAndSet%28kotlin.Int%2C+kotlin.Int%29%2Fnew&quot;&gt;new&lt;/a&gt; value if values matches.</source>
          <target state="translated">将值与&lt;a href=&quot;compare-and-set#kotlin.native.concurrent.AtomicInt%24compareAndSet%28kotlin.Int%2C+kotlin.Int%29%2Fexpected&quot;&gt;期望值进行&lt;/a&gt;比较，如果值匹配，则将其替换为&lt;a href=&quot;compare-and-set#kotlin.native.concurrent.AtomicInt%24compareAndSet%28kotlin.Int%2C+kotlin.Int%29%2Fnew&quot;&gt;新&lt;/a&gt;值。</target>
        </trans-unit>
        <trans-unit id="122c2094c70640e3a29b525f5d56c4b7da23db5b" translate="yes" xml:space="preserve">
          <source>Compares value with &lt;a href=&quot;compare-and-set#kotlin.native.concurrent.AtomicInt%24compareAndSet(kotlin.Int,%20kotlin.Int)/expected&quot;&gt;expected&lt;/a&gt; and replaces it with &lt;a href=&quot;compare-and-set#kotlin.native.concurrent.AtomicInt%24compareAndSet(kotlin.Int,%20kotlin.Int)/new&quot;&gt;new&lt;/a&gt; value if values matches.</source>
          <target state="translated">将值与&lt;a href=&quot;compare-and-set#kotlin.native.concurrent.AtomicInt%24compareAndSet(kotlin.Int,%20kotlin.Int)/expected&quot;&gt;期望值进行&lt;/a&gt;比较，如果值匹配，则将其替换为&lt;a href=&quot;compare-and-set#kotlin.native.concurrent.AtomicInt%24compareAndSet(kotlin.Int,%20kotlin.Int)/new&quot;&gt;新&lt;/a&gt;值。</target>
        </trans-unit>
        <trans-unit id="114b395416b339651ce422a30a320138360279a3" translate="yes" xml:space="preserve">
          <source>Compares value with &lt;a href=&quot;compare-and-set#kotlin.native.concurrent.AtomicLong%24compareAndSet%28kotlin.Long%2C+kotlin.Long%29%2Fexpected&quot;&gt;expected&lt;/a&gt; and replaces it with &lt;a href=&quot;compare-and-set#kotlin.native.concurrent.AtomicLong%24compareAndSet%28kotlin.Long%2C+kotlin.Long%29%2Fnew&quot;&gt;new&lt;/a&gt; value if values matches.</source>
          <target state="translated">将值与&lt;a href=&quot;compare-and-set#kotlin.native.concurrent.AtomicLong%24compareAndSet%28kotlin.Long%2C+kotlin.Long%29%2Fexpected&quot;&gt;期望值进行&lt;/a&gt;比较，如果值匹配，则将其替换为&lt;a href=&quot;compare-and-set#kotlin.native.concurrent.AtomicLong%24compareAndSet%28kotlin.Long%2C+kotlin.Long%29%2Fnew&quot;&gt;新&lt;/a&gt;值。</target>
        </trans-unit>
        <trans-unit id="08fae007809725847c717758daed28aac6881680" translate="yes" xml:space="preserve">
          <source>Compares value with &lt;a href=&quot;compare-and-set#kotlin.native.concurrent.AtomicLong%24compareAndSet(kotlin.Long,%20kotlin.Long)/expected&quot;&gt;expected&lt;/a&gt; and replaces it with &lt;a href=&quot;compare-and-set#kotlin.native.concurrent.AtomicLong%24compareAndSet(kotlin.Long,%20kotlin.Long)/new&quot;&gt;new&lt;/a&gt; value if values matches.</source>
          <target state="translated">将值与&lt;a href=&quot;compare-and-set#kotlin.native.concurrent.AtomicLong%24compareAndSet(kotlin.Long,%20kotlin.Long)/expected&quot;&gt;期望值进行&lt;/a&gt;比较，如果值匹配，则将其替换为&lt;a href=&quot;compare-and-set#kotlin.native.concurrent.AtomicLong%24compareAndSet(kotlin.Long,%20kotlin.Long)/new&quot;&gt;新&lt;/a&gt;值。</target>
        </trans-unit>
        <trans-unit id="33e79c385d1ecca7b6f773750807dda8a0dad45b" translate="yes" xml:space="preserve">
          <source>Compares value with &lt;a href=&quot;compare-and-set#kotlin.native.concurrent.AtomicNativePtr%24compareAndSet%28kotlin.native.internal.NativePtr%2C+kotlin.native.internal.NativePtr%29%2Fexpected&quot;&gt;expected&lt;/a&gt; and replaces it with &lt;a href=&quot;compare-and-set#kotlin.native.concurrent.AtomicNativePtr%24compareAndSet%28kotlin.native.internal.NativePtr%2C+kotlin.native.internal.NativePtr%29%2Fnew&quot;&gt;new&lt;/a&gt; value if values matches.</source>
          <target state="translated">将值与&lt;a href=&quot;compare-and-set#kotlin.native.concurrent.AtomicNativePtr%24compareAndSet%28kotlin.native.internal.NativePtr%2C+kotlin.native.internal.NativePtr%29%2Fexpected&quot;&gt;期望值进行&lt;/a&gt;比较，如果值匹配，则将其替换为&lt;a href=&quot;compare-and-set#kotlin.native.concurrent.AtomicNativePtr%24compareAndSet%28kotlin.native.internal.NativePtr%2C+kotlin.native.internal.NativePtr%29%2Fnew&quot;&gt;新&lt;/a&gt;值。</target>
        </trans-unit>
        <trans-unit id="641671a7e930f79d93f8b81544c884e5de8e5be9" translate="yes" xml:space="preserve">
          <source>Compares value with &lt;a href=&quot;compare-and-set#kotlin.native.concurrent.AtomicNativePtr%24compareAndSet(kotlin.native.internal.NativePtr,%20kotlin.native.internal.NativePtr)/expected&quot;&gt;expected&lt;/a&gt; and replaces it with &lt;a href=&quot;compare-and-set#kotlin.native.concurrent.AtomicNativePtr%24compareAndSet(kotlin.native.internal.NativePtr,%20kotlin.native.internal.NativePtr)/new&quot;&gt;new&lt;/a&gt; value if values matches.</source>
          <target state="translated">将值与&lt;a href=&quot;compare-and-set#kotlin.native.concurrent.AtomicNativePtr%24compareAndSet(kotlin.native.internal.NativePtr,%20kotlin.native.internal.NativePtr)/expected&quot;&gt;期望值进行&lt;/a&gt;比较，如果值匹配，则将其替换为&lt;a href=&quot;compare-and-set#kotlin.native.concurrent.AtomicNativePtr%24compareAndSet(kotlin.native.internal.NativePtr,%20kotlin.native.internal.NativePtr)/new&quot;&gt;新&lt;/a&gt;值。</target>
        </trans-unit>
        <trans-unit id="aad19e0b08b9c2212fcd34b07492441394b43397" translate="yes" xml:space="preserve">
          <source>Compares value with &lt;a href=&quot;compare-and-set#kotlin.native.concurrent.AtomicReference%24compareAndSet%28kotlin.native.concurrent.AtomicReference.T%2C+kotlin.native.concurrent.AtomicReference.T%29%2Fexpected&quot;&gt;expected&lt;/a&gt; and replaces it with &lt;a href=&quot;compare-and-set#kotlin.native.concurrent.AtomicReference%24compareAndSet%28kotlin.native.concurrent.AtomicReference.T%2C+kotlin.native.concurrent.AtomicReference.T%29%2Fnew&quot;&gt;new&lt;/a&gt; value if values matches. Note that comparison is identity-based, not value-based.</source>
          <target state="translated">将值与&lt;a href=&quot;compare-and-set#kotlin.native.concurrent.AtomicReference%24compareAndSet%28kotlin.native.concurrent.AtomicReference.T%2C+kotlin.native.concurrent.AtomicReference.T%29%2Fexpected&quot;&gt;期望值进行&lt;/a&gt;比较，如果值匹配，则将其替换为&lt;a href=&quot;compare-and-set#kotlin.native.concurrent.AtomicReference%24compareAndSet%28kotlin.native.concurrent.AtomicReference.T%2C+kotlin.native.concurrent.AtomicReference.T%29%2Fnew&quot;&gt;新&lt;/a&gt;值。请注意，比较是基于身份的，而不是基于价值的。</target>
        </trans-unit>
        <trans-unit id="634e611a605af54462634d7b1cb590e3d8cd51dc" translate="yes" xml:space="preserve">
          <source>Compares value with &lt;a href=&quot;compare-and-set#kotlin.native.concurrent.AtomicReference%24compareAndSet(kotlin.native.concurrent.AtomicReference.T,%20kotlin.native.concurrent.AtomicReference.T)/expected&quot;&gt;expected&lt;/a&gt; and replaces it with &lt;a href=&quot;compare-and-set#kotlin.native.concurrent.AtomicReference%24compareAndSet(kotlin.native.concurrent.AtomicReference.T,%20kotlin.native.concurrent.AtomicReference.T)/new&quot;&gt;new&lt;/a&gt; value if values matches. Note that comparison is identity-based, not value-based.</source>
          <target state="translated">将值与&lt;a href=&quot;compare-and-set#kotlin.native.concurrent.AtomicReference%24compareAndSet(kotlin.native.concurrent.AtomicReference.T,%20kotlin.native.concurrent.AtomicReference.T)/expected&quot;&gt;期望值进行&lt;/a&gt;比较，如果值匹配，则将其替换为&lt;a href=&quot;compare-and-set#kotlin.native.concurrent.AtomicReference%24compareAndSet(kotlin.native.concurrent.AtomicReference.T,%20kotlin.native.concurrent.AtomicReference.T)/new&quot;&gt;新&lt;/a&gt;值。请注意，比较是基于身份的，而不是基于价值的。</target>
        </trans-unit>
        <trans-unit id="2a7c89f946d53823e11aac953b3de81b713a012b" translate="yes" xml:space="preserve">
          <source>Compares value with &lt;a href=&quot;compare-and-set#kotlin.native.concurrent.FreezableAtomicReference%24compareAndSet%28kotlin.native.concurrent.FreezableAtomicReference.T%2C+kotlin.native.concurrent.FreezableAtomicReference.T%29%2Fexpected&quot;&gt;expected&lt;/a&gt; and replaces it with &lt;a href=&quot;compare-and-set#kotlin.native.concurrent.FreezableAtomicReference%24compareAndSet%28kotlin.native.concurrent.FreezableAtomicReference.T%2C+kotlin.native.concurrent.FreezableAtomicReference.T%29%2Fnew&quot;&gt;new&lt;/a&gt; value if values matches. Note that comparison is identity-based, not value-based.</source>
          <target state="translated">将值与&lt;a href=&quot;compare-and-set#kotlin.native.concurrent.FreezableAtomicReference%24compareAndSet%28kotlin.native.concurrent.FreezableAtomicReference.T%2C+kotlin.native.concurrent.FreezableAtomicReference.T%29%2Fexpected&quot;&gt;期望值进行&lt;/a&gt;比较，如果值匹配，则将其替换为&lt;a href=&quot;compare-and-set#kotlin.native.concurrent.FreezableAtomicReference%24compareAndSet%28kotlin.native.concurrent.FreezableAtomicReference.T%2C+kotlin.native.concurrent.FreezableAtomicReference.T%29%2Fnew&quot;&gt;新&lt;/a&gt;值。请注意，比较是基于身份的，而不是基于价值的。</target>
        </trans-unit>
        <trans-unit id="55d02c9019a7783e00ea094b354c70b751af8100" translate="yes" xml:space="preserve">
          <source>Compares value with &lt;a href=&quot;compare-and-set#kotlin.native.concurrent.FreezableAtomicReference%24compareAndSet(kotlin.native.concurrent.FreezableAtomicReference.T,%20kotlin.native.concurrent.FreezableAtomicReference.T)/expected&quot;&gt;expected&lt;/a&gt; and replaces it with &lt;a href=&quot;compare-and-set#kotlin.native.concurrent.FreezableAtomicReference%24compareAndSet(kotlin.native.concurrent.FreezableAtomicReference.T,%20kotlin.native.concurrent.FreezableAtomicReference.T)/new&quot;&gt;new&lt;/a&gt; value if values matches. Note that comparison is identity-based, not value-based.</source>
          <target state="translated">将值与&lt;a href=&quot;compare-and-set#kotlin.native.concurrent.FreezableAtomicReference%24compareAndSet(kotlin.native.concurrent.FreezableAtomicReference.T,%20kotlin.native.concurrent.FreezableAtomicReference.T)/expected&quot;&gt;期望值进行&lt;/a&gt;比较，如果值匹配，则将其替换为&lt;a href=&quot;compare-and-set#kotlin.native.concurrent.FreezableAtomicReference%24compareAndSet(kotlin.native.concurrent.FreezableAtomicReference.T,%20kotlin.native.concurrent.FreezableAtomicReference.T)/new&quot;&gt;新&lt;/a&gt;值。请注意，比较是基于身份的，而不是基于价值的。</target>
        </trans-unit>
        <trans-unit id="1602dbc0e7bd66fd4e6309d2ad105c28e4ed0d94" translate="yes" xml:space="preserve">
          <source>Compares value with &lt;a href=&quot;compare-and-swap#kotlin.native.concurrent.AtomicInt%24compareAndSwap%28kotlin.Int%2C+kotlin.Int%29%2Fexpected&quot;&gt;expected&lt;/a&gt; and replaces it with &lt;a href=&quot;compare-and-swap#kotlin.native.concurrent.AtomicInt%24compareAndSwap%28kotlin.Int%2C+kotlin.Int%29%2Fnew&quot;&gt;new&lt;/a&gt; value if values matches.</source>
          <target state="translated">将值与&lt;a href=&quot;compare-and-swap#kotlin.native.concurrent.AtomicInt%24compareAndSwap%28kotlin.Int%2C+kotlin.Int%29%2Fexpected&quot;&gt;期望值进行&lt;/a&gt;比较，如果值匹配，则将其替换为&lt;a href=&quot;compare-and-swap#kotlin.native.concurrent.AtomicInt%24compareAndSwap%28kotlin.Int%2C+kotlin.Int%29%2Fnew&quot;&gt;新&lt;/a&gt;值。</target>
        </trans-unit>
        <trans-unit id="ffaa182e5dad63cc785ffa110f53012280e9cbf0" translate="yes" xml:space="preserve">
          <source>Compares value with &lt;a href=&quot;compare-and-swap#kotlin.native.concurrent.AtomicInt%24compareAndSwap(kotlin.Int,%20kotlin.Int)/expected&quot;&gt;expected&lt;/a&gt; and replaces it with &lt;a href=&quot;compare-and-swap#kotlin.native.concurrent.AtomicInt%24compareAndSwap(kotlin.Int,%20kotlin.Int)/new&quot;&gt;new&lt;/a&gt; value if values matches.</source>
          <target state="translated">将值与&lt;a href=&quot;compare-and-swap#kotlin.native.concurrent.AtomicInt%24compareAndSwap(kotlin.Int,%20kotlin.Int)/expected&quot;&gt;期望值进行&lt;/a&gt;比较，如果值匹配，则将其替换为&lt;a href=&quot;compare-and-swap#kotlin.native.concurrent.AtomicInt%24compareAndSwap(kotlin.Int,%20kotlin.Int)/new&quot;&gt;新&lt;/a&gt;值。</target>
        </trans-unit>
        <trans-unit id="4961582100958d9c1a4fbb8b107deca301459a31" translate="yes" xml:space="preserve">
          <source>Compares value with &lt;a href=&quot;compare-and-swap#kotlin.native.concurrent.AtomicLong%24compareAndSwap%28kotlin.Long%2C+kotlin.Long%29%2Fexpected&quot;&gt;expected&lt;/a&gt; and replaces it with &lt;a href=&quot;compare-and-swap#kotlin.native.concurrent.AtomicLong%24compareAndSwap%28kotlin.Long%2C+kotlin.Long%29%2Fnew&quot;&gt;new&lt;/a&gt; value if values matches.</source>
          <target state="translated">将值与&lt;a href=&quot;compare-and-swap#kotlin.native.concurrent.AtomicLong%24compareAndSwap%28kotlin.Long%2C+kotlin.Long%29%2Fexpected&quot;&gt;期望值进行&lt;/a&gt;比较，如果值匹配，则将其替换为&lt;a href=&quot;compare-and-swap#kotlin.native.concurrent.AtomicLong%24compareAndSwap%28kotlin.Long%2C+kotlin.Long%29%2Fnew&quot;&gt;新&lt;/a&gt;值。</target>
        </trans-unit>
        <trans-unit id="ae5592f9d27f36f934260b5d0a2dac2a166bee1c" translate="yes" xml:space="preserve">
          <source>Compares value with &lt;a href=&quot;compare-and-swap#kotlin.native.concurrent.AtomicLong%24compareAndSwap(kotlin.Long,%20kotlin.Long)/expected&quot;&gt;expected&lt;/a&gt; and replaces it with &lt;a href=&quot;compare-and-swap#kotlin.native.concurrent.AtomicLong%24compareAndSwap(kotlin.Long,%20kotlin.Long)/new&quot;&gt;new&lt;/a&gt; value if values matches.</source>
          <target state="translated">将值与&lt;a href=&quot;compare-and-swap#kotlin.native.concurrent.AtomicLong%24compareAndSwap(kotlin.Long,%20kotlin.Long)/expected&quot;&gt;期望值进行&lt;/a&gt;比较，如果值匹配，则将其替换为&lt;a href=&quot;compare-and-swap#kotlin.native.concurrent.AtomicLong%24compareAndSwap(kotlin.Long,%20kotlin.Long)/new&quot;&gt;新&lt;/a&gt;值。</target>
        </trans-unit>
        <trans-unit id="3baa24475bea429cad0046c9c8bdc489c993284c" translate="yes" xml:space="preserve">
          <source>Compares value with &lt;a href=&quot;compare-and-swap#kotlin.native.concurrent.AtomicNativePtr%24compareAndSwap%28kotlin.native.internal.NativePtr%2C+kotlin.native.internal.NativePtr%29%2Fexpected&quot;&gt;expected&lt;/a&gt; and replaces it with &lt;a href=&quot;compare-and-swap#kotlin.native.concurrent.AtomicNativePtr%24compareAndSwap%28kotlin.native.internal.NativePtr%2C+kotlin.native.internal.NativePtr%29%2Fnew&quot;&gt;new&lt;/a&gt; value if values matches. If &lt;a href=&quot;compare-and-swap#kotlin.native.concurrent.AtomicNativePtr%24compareAndSwap%28kotlin.native.internal.NativePtr%2C+kotlin.native.internal.NativePtr%29%2Fnew&quot;&gt;new&lt;/a&gt; value is not null, it must be frozen or permanent object.</source>
          <target state="translated">将值与&lt;a href=&quot;compare-and-swap#kotlin.native.concurrent.AtomicNativePtr%24compareAndSwap%28kotlin.native.internal.NativePtr%2C+kotlin.native.internal.NativePtr%29%2Fexpected&quot;&gt;期望值进行&lt;/a&gt;比较，如果值匹配，则将其替换为&lt;a href=&quot;compare-and-swap#kotlin.native.concurrent.AtomicNativePtr%24compareAndSwap%28kotlin.native.internal.NativePtr%2C+kotlin.native.internal.NativePtr%29%2Fnew&quot;&gt;新&lt;/a&gt;值。如果&lt;a href=&quot;compare-and-swap#kotlin.native.concurrent.AtomicNativePtr%24compareAndSwap%28kotlin.native.internal.NativePtr%2C+kotlin.native.internal.NativePtr%29%2Fnew&quot;&gt;新&lt;/a&gt;值不为null，则它必须是冻结的或永久对象。</target>
        </trans-unit>
        <trans-unit id="e463cd6317ab4b95b19892c38cdaa4d8f63ca8b9" translate="yes" xml:space="preserve">
          <source>Compares value with &lt;a href=&quot;compare-and-swap#kotlin.native.concurrent.AtomicNativePtr%24compareAndSwap(kotlin.native.internal.NativePtr,%20kotlin.native.internal.NativePtr)/expected&quot;&gt;expected&lt;/a&gt; and replaces it with &lt;a href=&quot;compare-and-swap#kotlin.native.concurrent.AtomicNativePtr%24compareAndSwap(kotlin.native.internal.NativePtr,%20kotlin.native.internal.NativePtr)/new&quot;&gt;new&lt;/a&gt; value if values matches. If &lt;a href=&quot;compare-and-swap#kotlin.native.concurrent.AtomicNativePtr%24compareAndSwap(kotlin.native.internal.NativePtr,%20kotlin.native.internal.NativePtr)/new&quot;&gt;new&lt;/a&gt; value is not null, it must be frozen or permanent object.</source>
          <target state="translated">将值与&lt;a href=&quot;compare-and-swap#kotlin.native.concurrent.AtomicNativePtr%24compareAndSwap(kotlin.native.internal.NativePtr,%20kotlin.native.internal.NativePtr)/expected&quot;&gt;期望值进行&lt;/a&gt;比较，如果值匹配，则将其替换为&lt;a href=&quot;compare-and-swap#kotlin.native.concurrent.AtomicNativePtr%24compareAndSwap(kotlin.native.internal.NativePtr,%20kotlin.native.internal.NativePtr)/new&quot;&gt;新&lt;/a&gt;值。如果&lt;a href=&quot;compare-and-swap#kotlin.native.concurrent.AtomicNativePtr%24compareAndSwap(kotlin.native.internal.NativePtr,%20kotlin.native.internal.NativePtr)/new&quot;&gt;新&lt;/a&gt;值不为null，则它必须是冻结的或永久对象。</target>
        </trans-unit>
        <trans-unit id="484ef8b88aa051d852de31e7d69a2ffe4361bc12" translate="yes" xml:space="preserve">
          <source>Compares value with &lt;a href=&quot;compare-and-swap#kotlin.native.concurrent.AtomicReference%24compareAndSwap%28kotlin.native.concurrent.AtomicReference.T%2C+kotlin.native.concurrent.AtomicReference.T%29%2Fexpected&quot;&gt;expected&lt;/a&gt; and replaces it with &lt;a href=&quot;compare-and-swap#kotlin.native.concurrent.AtomicReference%24compareAndSwap%28kotlin.native.concurrent.AtomicReference.T%2C+kotlin.native.concurrent.AtomicReference.T%29%2Fnew&quot;&gt;new&lt;/a&gt; value if values matches. Note that comparison is identity-based, not value-based. If &lt;a href=&quot;compare-and-swap#kotlin.native.concurrent.AtomicReference%24compareAndSwap%28kotlin.native.concurrent.AtomicReference.T%2C+kotlin.native.concurrent.AtomicReference.T%29%2Fnew&quot;&gt;new&lt;/a&gt; value is not null, it must be frozen or permanent object.</source>
          <target state="translated">将值与&lt;a href=&quot;compare-and-swap#kotlin.native.concurrent.AtomicReference%24compareAndSwap%28kotlin.native.concurrent.AtomicReference.T%2C+kotlin.native.concurrent.AtomicReference.T%29%2Fexpected&quot;&gt;期望值进行&lt;/a&gt;比较，如果值匹配，则将其替换为&lt;a href=&quot;compare-and-swap#kotlin.native.concurrent.AtomicReference%24compareAndSwap%28kotlin.native.concurrent.AtomicReference.T%2C+kotlin.native.concurrent.AtomicReference.T%29%2Fnew&quot;&gt;新&lt;/a&gt;值。请注意，比较是基于身份的，而不是基于价值的。如果&lt;a href=&quot;compare-and-swap#kotlin.native.concurrent.AtomicReference%24compareAndSwap%28kotlin.native.concurrent.AtomicReference.T%2C+kotlin.native.concurrent.AtomicReference.T%29%2Fnew&quot;&gt;新&lt;/a&gt;值不为null，则它必须是冻结的或永久对象。</target>
        </trans-unit>
        <trans-unit id="5f0d52e19d5f1b64fd9492dbea6f32f574826f3a" translate="yes" xml:space="preserve">
          <source>Compares value with &lt;a href=&quot;compare-and-swap#kotlin.native.concurrent.AtomicReference%24compareAndSwap(kotlin.native.concurrent.AtomicReference.T,%20kotlin.native.concurrent.AtomicReference.T)/expected&quot;&gt;expected&lt;/a&gt; and replaces it with &lt;a href=&quot;compare-and-swap#kotlin.native.concurrent.AtomicReference%24compareAndSwap(kotlin.native.concurrent.AtomicReference.T,%20kotlin.native.concurrent.AtomicReference.T)/new&quot;&gt;new&lt;/a&gt; value if values matches. Note that comparison is identity-based, not value-based. If &lt;a href=&quot;compare-and-swap#kotlin.native.concurrent.AtomicReference%24compareAndSwap(kotlin.native.concurrent.AtomicReference.T,%20kotlin.native.concurrent.AtomicReference.T)/new&quot;&gt;new&lt;/a&gt; value is not null, it must be frozen or permanent object.</source>
          <target state="translated">将值与&lt;a href=&quot;compare-and-swap#kotlin.native.concurrent.AtomicReference%24compareAndSwap(kotlin.native.concurrent.AtomicReference.T,%20kotlin.native.concurrent.AtomicReference.T)/expected&quot;&gt;期望值进行&lt;/a&gt;比较，如果值匹配，则将其替换为&lt;a href=&quot;compare-and-swap#kotlin.native.concurrent.AtomicReference%24compareAndSwap(kotlin.native.concurrent.AtomicReference.T,%20kotlin.native.concurrent.AtomicReference.T)/new&quot;&gt;新&lt;/a&gt;值。请注意，比较是基于身份的，而不是基于价值的。如果&lt;a href=&quot;compare-and-swap#kotlin.native.concurrent.AtomicReference%24compareAndSwap(kotlin.native.concurrent.AtomicReference.T,%20kotlin.native.concurrent.AtomicReference.T)/new&quot;&gt;新&lt;/a&gt;值不为null，则它必须是冻结的或永久对象。</target>
        </trans-unit>
        <trans-unit id="21c447a9330973c5bdffcbc899b7cdb768d02c0d" translate="yes" xml:space="preserve">
          <source>Compares value with &lt;a href=&quot;compare-and-swap#kotlin.native.concurrent.FreezableAtomicReference%24compareAndSwap%28kotlin.native.concurrent.FreezableAtomicReference.T%2C+kotlin.native.concurrent.FreezableAtomicReference.T%29%2Fexpected&quot;&gt;expected&lt;/a&gt; and replaces it with &lt;a href=&quot;compare-and-swap#kotlin.native.concurrent.FreezableAtomicReference%24compareAndSwap%28kotlin.native.concurrent.FreezableAtomicReference.T%2C+kotlin.native.concurrent.FreezableAtomicReference.T%29%2Fnew&quot;&gt;new&lt;/a&gt; value if values matches. If &lt;a href=&quot;compare-and-swap#kotlin.native.concurrent.FreezableAtomicReference%24compareAndSwap%28kotlin.native.concurrent.FreezableAtomicReference.T%2C+kotlin.native.concurrent.FreezableAtomicReference.T%29%2Fnew&quot;&gt;new&lt;/a&gt; value is not null and object is frozen, it must be frozen or permanent object.</source>
          <target state="translated">将值与&lt;a href=&quot;compare-and-swap#kotlin.native.concurrent.FreezableAtomicReference%24compareAndSwap%28kotlin.native.concurrent.FreezableAtomicReference.T%2C+kotlin.native.concurrent.FreezableAtomicReference.T%29%2Fexpected&quot;&gt;期望值进行&lt;/a&gt;比较，如果值匹配，则将其替换为&lt;a href=&quot;compare-and-swap#kotlin.native.concurrent.FreezableAtomicReference%24compareAndSwap%28kotlin.native.concurrent.FreezableAtomicReference.T%2C+kotlin.native.concurrent.FreezableAtomicReference.T%29%2Fnew&quot;&gt;新&lt;/a&gt;值。如果&lt;a href=&quot;compare-and-swap#kotlin.native.concurrent.FreezableAtomicReference%24compareAndSwap%28kotlin.native.concurrent.FreezableAtomicReference.T%2C+kotlin.native.concurrent.FreezableAtomicReference.T%29%2Fnew&quot;&gt;新&lt;/a&gt;值不为null且对象被冻结，则必须将其冻结或永久对象。</target>
        </trans-unit>
        <trans-unit id="3166ae600cbed70025a084c9ac73393f6ff9ef73" translate="yes" xml:space="preserve">
          <source>Compares value with &lt;a href=&quot;compare-and-swap#kotlin.native.concurrent.FreezableAtomicReference%24compareAndSwap(kotlin.native.concurrent.FreezableAtomicReference.T,%20kotlin.native.concurrent.FreezableAtomicReference.T)/expected&quot;&gt;expected&lt;/a&gt; and replaces it with &lt;a href=&quot;compare-and-swap#kotlin.native.concurrent.FreezableAtomicReference%24compareAndSwap(kotlin.native.concurrent.FreezableAtomicReference.T,%20kotlin.native.concurrent.FreezableAtomicReference.T)/new&quot;&gt;new&lt;/a&gt; value if values matches. If &lt;a href=&quot;compare-and-swap#kotlin.native.concurrent.FreezableAtomicReference%24compareAndSwap(kotlin.native.concurrent.FreezableAtomicReference.T,%20kotlin.native.concurrent.FreezableAtomicReference.T)/new&quot;&gt;new&lt;/a&gt; value is not null and object is frozen, it must be frozen or permanent object.</source>
          <target state="translated">将值与&lt;a href=&quot;compare-and-swap#kotlin.native.concurrent.FreezableAtomicReference%24compareAndSwap(kotlin.native.concurrent.FreezableAtomicReference.T,%20kotlin.native.concurrent.FreezableAtomicReference.T)/expected&quot;&gt;期望值进行&lt;/a&gt;比较，如果值匹配，则将其替换为&lt;a href=&quot;compare-and-swap#kotlin.native.concurrent.FreezableAtomicReference%24compareAndSwap(kotlin.native.concurrent.FreezableAtomicReference.T,%20kotlin.native.concurrent.FreezableAtomicReference.T)/new&quot;&gt;新&lt;/a&gt;值。如果&lt;a href=&quot;compare-and-swap#kotlin.native.concurrent.FreezableAtomicReference%24compareAndSwap(kotlin.native.concurrent.FreezableAtomicReference.T,%20kotlin.native.concurrent.FreezableAtomicReference.T)/new&quot;&gt;新&lt;/a&gt;值不为null且对象被冻结，则它必须是冻结的或永久对象。</target>
        </trans-unit>
        <trans-unit id="80878568dcf8cdef0c0a05309f6c5b18c8821730" translate="yes" xml:space="preserve">
          <source>Comparing floating-point values in array/list operations &lt;code&gt;contains&lt;/code&gt;, &lt;code&gt;indexOf&lt;/code&gt;, &lt;code&gt;lastIndexOf&lt;/code&gt;: IEEE 754 or total order</source>
          <target state="translated">比较数组/列表操作 &lt;code&gt;contains&lt;/code&gt; 浮点值包含， &lt;code&gt;indexOf&lt;/code&gt; ， &lt;code&gt;lastIndexOf&lt;/code&gt; ：IEEE 754或总顺序</target>
        </trans-unit>
        <trans-unit id="394e41048cbe310173033e7ae5f2b5a2434d911f" translate="yes" xml:space="preserve">
          <source>Comparison binary search</source>
          <target state="translated">二进制搜索比较</target>
        </trans-unit>
        <trans-unit id="9461d4c9f916ad7df5538225ed552fb6e7e3284b" translate="yes" xml:space="preserve">
          <source>Comparison operators</source>
          <target state="translated">比较运算符</target>
        </trans-unit>
        <trans-unit id="43a1257c94c3625af3a4820651e77bb7e5919b78" translate="yes" xml:space="preserve">
          <source>Comparison operators: &lt;code&gt;a &amp;lt; b&lt;/code&gt;, &lt;code&gt;a &amp;gt; b&lt;/code&gt;, &lt;code&gt;a &amp;lt;= b&lt;/code&gt;, &lt;code&gt;a &amp;gt;= b&lt;/code&gt;</source>
          <target state="translated">比较运算符： &lt;code&gt;a &amp;lt; b&lt;/code&gt; ， &lt;code&gt;a &amp;gt; b&lt;/code&gt; ， &lt;code&gt;a &amp;lt;= b&lt;/code&gt; ， &lt;code&gt;a &amp;gt;= b&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="c19d6a85cde6ffb47c0be3358e50362db268d22f" translate="yes" xml:space="preserve">
          <source>Comparison to Java Programming Language</source>
          <target state="translated">与Java编程语言的比较</target>
        </trans-unit>
        <trans-unit id="e46ee00fde40e955c86abe019a61121e06d653c9" translate="yes" xml:space="preserve">
          <source>Comparisons</source>
          <target state="translated">Comparisons</target>
        </trans-unit>
        <trans-unit id="3d10a17bbcafa253a2f547a4d3cdc2dcd9e8e67a" translate="yes" xml:space="preserve">
          <source>Compatibility Guide for Kotlin 1.3</source>
          <target state="translated">Kotlin 1.3 兼容性指南</target>
        </trans-unit>
        <trans-unit id="c2085d01ad17cb0b63a6b887e6bb19cea5d153da" translate="yes" xml:space="preserve">
          <source>Compatibility Guide for Kotlin 1.4</source>
          <target state="translated">Kotlin 1.4 兼容性指南</target>
        </trans-unit>
        <trans-unit id="ab158d92aa769c36330930aefe33be777405f096" translate="yes" xml:space="preserve">
          <source>Compatibility Modes</source>
          <target state="translated">兼容性模式</target>
        </trans-unit>
        <trans-unit id="b2517b7bfbaa93708ea0797f6a1a981a224cee59" translate="yes" xml:space="preserve">
          <source>Compatibility Tools</source>
          <target state="translated">兼容性工具</target>
        </trans-unit>
        <trans-unit id="34b34cfc79cdf5ed37d2daa31e31fa83771c6d05" translate="yes" xml:space="preserve">
          <source>Compatibility flags</source>
          <target state="translated">兼容性标志</target>
        </trans-unit>
        <trans-unit id="24b1a563df927b79ff52059a6fe7f4f07f083c4d" translate="yes" xml:space="preserve">
          <source>Compatibility mode for default methods</source>
          <target state="translated">默认方法的兼容性模式</target>
        </trans-unit>
        <trans-unit id="062a933f528dc14867f471c4122370c1ec7c48ea" translate="yes" xml:space="preserve">
          <source>Competitive Programming</source>
          <target state="translated">竞争性编程</target>
        </trans-unit>
        <trans-unit id="4cef16aaddc5beb3a0a8c8c6dcb42ac7aa8951c6" translate="yes" xml:space="preserve">
          <source>Competitive programming and Kotlin</source>
          <target state="translated">竞争性编程和Kotlin</target>
        </trans-unit>
        <trans-unit id="779435d938b5f4d4c99c8c653840aaa0d1d27f91" translate="yes" xml:space="preserve">
          <source>Competitive programming problems often have input like this:</source>
          <target state="translated">竞争性编程问题经常有这样的输入。</target>
        </trans-unit>
        <trans-unit id="e178d49b71d4ecab26f50049569e812934ed37d9" translate="yes" xml:space="preserve">
          <source>Compilation class path</source>
          <target state="translated">编译类路径</target>
        </trans-unit>
        <trans-unit id="1c0c507276bf46861806ab317f7cdd44980f2759" translate="yes" xml:space="preserve">
          <source>Compilation class path reference</source>
          <target state="translated">编译类路径参考</target>
        </trans-unit>
        <trans-unit id="b58f06eef6df06da595c826427b93cb6862f54b2" translate="yes" xml:space="preserve">
          <source>Compilation for Android</source>
          <target state="translated">安卓版编译</target>
        </trans-unit>
        <trans-unit id="d3be870260c0ea62d6c3e124ac53fc657c77c590" translate="yes" xml:space="preserve">
          <source>Compilation for production sources.</source>
          <target state="translated">编制为生产源。</target>
        </trans-unit>
        <trans-unit id="a4901a44835928e7cdebf0fb6e714edeaf154fbc" translate="yes" xml:space="preserve">
          <source>Compilation for tests.</source>
          <target state="translated">编制测试用。</target>
        </trans-unit>
        <trans-unit id="6d16c0407463669d4bc5c4636710756946dc69bc" translate="yes" xml:space="preserve">
          <source>Compilation of the source set hierarchy</source>
          <target state="translated">汇编源集层次结构</target>
        </trans-unit>
        <trans-unit id="6f1bcfe5654cd53d1d14d6e8c4be0684b2f1f833" translate="yes" xml:space="preserve">
          <source>Compilation parameters</source>
          <target state="translated">汇编参数</target>
        </trans-unit>
        <trans-unit id="f68b1d2759976ea8c34dc57780ddb466c7a03a88" translate="yes" xml:space="preserve">
          <source>Compilations</source>
          <target state="translated">Compilations</target>
        </trans-unit>
        <trans-unit id="ad873024a72e87749444bf639fc9df742a1707a3" translate="yes" xml:space="preserve">
          <source>Compile a Kotlin code to a dynamic library</source>
          <target state="translated">将Kotlin代码编译成动态库。</target>
        </trans-unit>
        <trans-unit id="aca9e2814a2bbcc689598a15313b80870bd9b42e" translate="yes" xml:space="preserve">
          <source>Compile and run the example on &lt;a href=&quot;#compiling-and-running-the-example-on-linux-and-macos&quot;&gt;Linux and Mac&lt;/a&gt; and &lt;a href=&quot;#compiling-and-running-the-example-on-windows&quot;&gt;Windows&lt;/a&gt;</source>
          <target state="translated">在&lt;a href=&quot;#compiling-and-running-the-example-on-linux-and-macos&quot;&gt;Linux，Mac&lt;/a&gt;和&lt;a href=&quot;#compiling-and-running-the-example-on-windows&quot;&gt;Windows&lt;/a&gt;上编译并运行示例</target>
        </trans-unit>
        <trans-unit id="72064d4a180ef02a39354f66176c84fb0548cba8" translate="yes" xml:space="preserve">
          <source>Compile avoidance for kapt (since 1.3.20)</source>
          <target state="translated">避免编译kapt(自1.3.20起)</target>
        </trans-unit>
        <trans-unit id="637ca42cdaeb5f5233631b33ebd2c16f708a9c4b" translate="yes" xml:space="preserve">
          <source>Compile tasks</source>
          <target state="translated">汇编任务</target>
        </trans-unit>
        <trans-unit id="2c768f7a37e574458b6ee2aa2ab089f36687acb2" translate="yes" xml:space="preserve">
          <source>Compile the annotation class declaration to JVM bytecode target version 1.8+. You can specify it with &lt;code&gt;-jvm-target=1.8&lt;/code&gt; compiler option.</source>
          <target state="translated">将注释类声明编译为JVM字节码目标版本1.8+。您可以使用 &lt;code&gt;-jvm-target=1.8&lt;/code&gt; 编译器选项来指定它。</target>
        </trans-unit>
        <trans-unit id="1157490bdeb22d1be81765a13a1f71421f68d521" translate="yes" xml:space="preserve">
          <source>Compile the application using the Kotlin compiler</source>
          <target state="translated">使用Kotlin编译器编译应用程序。</target>
        </trans-unit>
        <trans-unit id="03c89825c055435c615019680918f9ab6b1189e7" translate="yes" xml:space="preserve">
          <source>Compile the application using the Kotlin compiler:</source>
          <target state="translated">使用Kotlin编译器编译应用程序。</target>
        </trans-unit>
        <trans-unit id="921b146c0daa1b58d05333210fa642b42a817c43" translate="yes" xml:space="preserve">
          <source>Compile the client:</source>
          <target state="translated">编制客户端。</target>
        </trans-unit>
        <trans-unit id="389cd3c1446277e674969f02ab46cba74928fdfe" translate="yes" xml:space="preserve">
          <source>Compile the code that uses the annotation to JVM bytecode target version 1.8+ (&lt;code&gt;-jvm-target=1.8&lt;/code&gt;) and add the &lt;code&gt;-Xemit-jvm-type-annotations&lt;/code&gt; compiler option.</source>
          <target state="translated">将使用注释的代码编译到JVM字节码目标版本1.8+（- &lt;code&gt;-jvm-target=1.8&lt;/code&gt; ），并添加 &lt;code&gt;-Xemit-jvm-type-annotations&lt;/code&gt; 编译器选项。</target>
        </trans-unit>
        <trans-unit id="85980ca368c439d612a62feeb3c22d4520a3c93a" translate="yes" xml:space="preserve">
          <source>Compile the library using the JS compiler</source>
          <target state="translated">使用JS编译器编译库</target>
        </trans-unit>
        <trans-unit id="9455252385aecb94fba3d661915044a88e56d259" translate="yes" xml:space="preserve">
          <source>Compile with library:</source>
          <target state="translated">用库编译。</target>
        </trans-unit>
        <trans-unit id="d41acf091a6275283d4f6ccefb9d2a937d4b6b4a" translate="yes" xml:space="preserve">
          <source>Compile-Time Constants</source>
          <target state="translated">编译时间常数</target>
        </trans-unit>
        <trans-unit id="45e8f6255c13fb9a7dc368edbfb05a6cf3dba131" translate="yes" xml:space="preserve">
          <source>Compile-time dependency files (classpath) of the compilation.</source>
          <target state="translated">编译时依赖文件(classpath)的编译。</target>
        </trans-unit>
        <trans-unit id="6859c12396afd4e34b1e74dd8971983ccd5dfa77" translate="yes" xml:space="preserve">
          <source>Compiled module exposes declarations that are marked with this annotation without name mangling.</source>
          <target state="translated">编译后的模块会公开带有该注解的声明,而不会出现名称混乱的情况。</target>
        </trans-unit>
        <trans-unit id="c71bcef809f379ec55fc71d790cc965f078efdbd" translate="yes" xml:space="preserve">
          <source>Compiled scripts cache</source>
          <target state="translated">编译后的脚本缓存</target>
        </trans-unit>
        <trans-unit id="4c9d1f2132e2efb7dc57350eb68c7776e6e8330e" translate="yes" xml:space="preserve">
          <source>Compiler Keys</source>
          <target state="translated">编译器键</target>
        </trans-unit>
        <trans-unit id="f05a88eb5583088cfb5f3af23ae435a9c43d6850" translate="yes" xml:space="preserve">
          <source>Compiler Options</source>
          <target state="translated">编译器选项</target>
        </trans-unit>
        <trans-unit id="32539aebe8fbe50447702941623db72d336f1492" translate="yes" xml:space="preserve">
          <source>Compiler Plugin API</source>
          <target state="translated">编译器插件API</target>
        </trans-unit>
        <trans-unit id="a5def276d735f3ae52349ff4e9c00146dd7a2bd9" translate="yes" xml:space="preserve">
          <source>Compiler Plugins</source>
          <target state="translated">编译器插件</target>
        </trans-unit>
        <trans-unit id="bc8b5071c8c3c33bba65f749d70114d9c5d960fa" translate="yes" xml:space="preserve">
          <source>Compiler arguments with delimiter characters must be passed in double quotes on Windows</source>
          <target state="translated">在Windows上,带有定界符的编译器参数必须用双引号传递。</target>
        </trans-unit>
        <trans-unit id="99453b01ed9668395db52137ac95533f2bf523b4" translate="yes" xml:space="preserve">
          <source>Compiler configuration</source>
          <target state="translated">编译器配置</target>
        </trans-unit>
        <trans-unit id="c8d36c73ee25d65a59259585e736e00c1c87f0a3" translate="yes" xml:space="preserve">
          <source>Compiler options</source>
          <target state="translated">编译器选项</target>
        </trans-unit>
        <trans-unit id="58286f40afa05dca408af3341cf6346fedc80e7f" translate="yes" xml:space="preserve">
          <source>Compiler options applied to the compilation. For the list of available options, see &lt;a href=&quot;using-gradle#compiler-options&quot;&gt;Compiler options&lt;/a&gt;.</source>
          <target state="translated">编译器选项适用于编译。有关可用选项的列表，请参见&lt;a href=&quot;using-gradle#compiler-options&quot;&gt;编译器选项&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="16b09e47f86fe203e52b566517a38889f340853a" translate="yes" xml:space="preserve">
          <source>Compilers are complicated software and despite the best effort of their developers they have bugs. The bugs that cause the compiler itself to fail or report spurious errors or generate obviously failing code, though annoying and often embarrassing, are easy to fix, because the fixes do not constitute incompatible changes. Other bugs may cause the compiler to generate incorrect code that does not fail: e.g. by missing some errors in the source or simply generating wrong instructions. Fixes of such bugs are technically incompatible changes (some code used to compile fine, but now it won't any more), but we are inclined to fixing them as soon as possible to prevent the bad code patterns from spreading across user code. In our opinion, this serves the principle of Comfortable Updates, because fewer users have a chance of encountering the issue. Of course, this applies only to bugs that are found soon after appearing in a released version.</source>
          <target state="translated">编译器是一种复杂的软件,尽管其开发者做出了最大的努力,但还是会出现错误。导致编译器本身失败或报告虚假的错误或生成明显失败的代码的错误,虽然很烦人,而且经常令人尴尬,但很容易修复,因为这些修复并不构成不兼容的变化。其他的bug可能会导致编译器生成不失败的错误代码:例如在源码中遗漏了一些错误,或者只是生成了错误的指令。对这类bug的修复从技术上讲是不兼容的变化(有些代码以前编译得很好,但现在不能再编译了),但我们倾向于尽快修复它们,以防止不良代码模式在用户代码中蔓延。在我们看来,这样做符合 &quot;舒适更新 &quot;的原则,因为更少的用户有机会遇到这个问题。当然,这只适用于在发布的版本中出现不久后发现的bug。</target>
        </trans-unit>
        <trans-unit id="97ea09b312879ce9df1eea948b56934aea9cfd0a" translate="yes" xml:space="preserve">
          <source>Compiling Kotlin and Java sources</source>
          <target state="translated">编译Kotlin和Java源代码</target>
        </trans-unit>
        <trans-unit id="a5b70db1805f14583c6ebf2c8b0592b48de0d271" translate="yes" xml:space="preserve">
          <source>Compiling Kotlin only source code</source>
          <target state="translated">只编译Kotlin源代码</target>
        </trans-unit>
        <trans-unit id="53c9b57582db6dd7965be7474f98a3648d5b3eac" translate="yes" xml:space="preserve">
          <source>Compiling Kotlin/Native code and use it from Objective-C and Swift</source>
          <target state="translated">编译Kotlin/Native代码,并从Objective-C和Swift中使用它。</target>
        </trans-unit>
        <trans-unit id="24c58b06b20f55df8f5651941f526a6d22d3c2a6" translate="yes" xml:space="preserve">
          <source>Compiling Kotlin/Native code to a dynamic library</source>
          <target state="translated">将Kotlin/Native代码编译成动态库。</target>
        </trans-unit>
        <trans-unit id="18b869d52ab1ba843901fab8ea31519950c8b6b2" translate="yes" xml:space="preserve">
          <source>Compiling a library</source>
          <target state="translated">编译一个图书馆</target>
        </trans-unit>
        <trans-unit id="90c6e7f353327a035e627969004330ddc56355a6" translate="yes" xml:space="preserve">
          <source>Compiling and Linking the library</source>
          <target state="translated">编译和链接库</target>
        </trans-unit>
        <trans-unit id="9643908ac0d886939542952f3d3c8b6a519953e8" translate="yes" xml:space="preserve">
          <source>Compiling and Running the Example on Linux and macOS</source>
          <target state="translated">在Linux和macOS上编译和运行示例</target>
        </trans-unit>
        <trans-unit id="61bd878fa415faec28c9e1d212393df9d1902a99" translate="yes" xml:space="preserve">
          <source>Compiling and Running the Example on Windows</source>
          <target state="translated">在Windows上编译和运行示例</target>
        </trans-unit>
        <trans-unit id="611121f8b32170211272449e4fe516c23dddd7a0" translate="yes" xml:space="preserve">
          <source>Compiling and running</source>
          <target state="translated">编译和运行</target>
        </trans-unit>
        <trans-unit id="76090c31043c794bd01d750fcccacffc090b28f7" translate="yes" xml:space="preserve">
          <source>Compiling the code from the console</source>
          <target state="translated">从控制台编译代码</target>
        </trans-unit>
        <trans-unit id="521ffb94c78fdf8a3052cd297cb2675a73929150" translate="yes" xml:space="preserve">
          <source>Complete list of elements and attributes are listed below:</source>
          <target state="translated">完整的元素和属性列表如下:</target>
        </trans-unit>
        <trans-unit id="21cfd8379bc4634b181519a0d820ba8172a94742" translate="yes" xml:space="preserve">
          <source>Complete the initial configuration, and when you add a new dependency to &lt;code&gt;cocoapods&lt;/code&gt;, just re-import the project in IntelliJ IDEA. The new dependency will be added automatically. No additional steps are required.</source>
          <target state="translated">完成初始配置，然后将新依赖项添加到 &lt;code&gt;cocoapods&lt;/code&gt; 时，只需将项目重新导入IntelliJ IDEA中即可。新的依赖项将自动添加。无需其他步骤。</target>
        </trans-unit>
        <trans-unit id="aec451d085d4fe32991339a518bc16961757e7c2" translate="yes" xml:space="preserve">
          <source>Components allow you to specify:</source>
          <target state="translated">组件允许你指定。</target>
        </trans-unit>
        <trans-unit id="61a74e7ecbd3269e28edf0496ebb545abe2190a4" translate="yes" xml:space="preserve">
          <source>Composing Suspending Functions</source>
          <target state="translated">组成悬浮功能</target>
        </trans-unit>
        <trans-unit id="acdb98958243be31e6bc491cc2789c3e62835935" translate="yes" xml:space="preserve">
          <source>Composing multiple flows</source>
          <target state="translated">组成多个流程</target>
        </trans-unit>
        <trans-unit id="de3b78b60e965433479e052daac10341513ebaf0" translate="yes" xml:space="preserve">
          <source>Composing suspending functions</source>
          <target state="translated">组成悬浮功能</target>
        </trans-unit>
        <trans-unit id="aafa0c5cb88d6c36a279448a6ec0d00a0fb47e80" translate="yes" xml:space="preserve">
          <source>CompositionEventInit</source>
          <target state="translated">CompositionEventInit</target>
        </trans-unit>
        <trans-unit id="ed2ff637c10fb1755e29c0eb2376d67d8e5a91b4" translate="yes" xml:space="preserve">
          <source>Comprehensions</source>
          <target state="translated">Comprehensions</target>
        </trans-unit>
        <trans-unit id="fe16b2e419247b3bfe896053f1be0ce886d4de58" translate="yes" xml:space="preserve">
          <source>Computation thrown an exception.</source>
          <target state="translated">计算产生异常。</target>
        </trans-unit>
        <trans-unit id="58754a33960f46b4b39aacc990f1c3553c4b3a27" translate="yes" xml:space="preserve">
          <source>Compute stable wrt potential object relocations by the memory manager identity hash code.</source>
          <target state="translated">通过内存管理器身份哈希码,计算稳定的与潜在对象重新定位有关的数据。</target>
        </trans-unit>
        <trans-unit id="759dc563afcf1b09a8658d09f86d8312b1c74439" translate="yes" xml:space="preserve">
          <source>Computes &lt;code&gt;exp(x) - 1&lt;/code&gt;.</source>
          <target state="translated">计算 &lt;code&gt;exp(x) - 1&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="ce188344a4a89cc27976c0691ae9673e3d851731" translate="yes" xml:space="preserve">
          <source>Computes &lt;code&gt;ln(a + 1)&lt;/code&gt;.</source>
          <target state="translated">计算 &lt;code&gt;ln(a + 1)&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="efd0d084b6901fa01fab237c8ae6254fe11544ba" translate="yes" xml:space="preserve">
          <source>Computes &lt;code&gt;ln(x + 1)&lt;/code&gt;.</source>
          <target state="translated">计算 &lt;code&gt;ln(x + 1)&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="479831737fe42b4ea79afaf5ab097fe283559461" translate="yes" xml:space="preserve">
          <source>Computes &lt;code&gt;sqrt(x^2 + y^2)&lt;/code&gt; without intermediate overflow or underflow.</source>
          <target state="translated">计算 &lt;code&gt;sqrt(x^2 + y^2)&lt;/code&gt; 而不会出现中间上溢或下溢。</target>
        </trans-unit>
        <trans-unit id="5be0681c128c3a53870b319fc23d03276a8e7b4e" translate="yes" xml:space="preserve">
          <source>Computes Euler's number &lt;code&gt;e&lt;/code&gt; raised to the power of the value &lt;a href=&quot;exp#kotlin.math%24exp%28kotlin.Double%29%2Fx&quot;&gt;x&lt;/a&gt;.</source>
          <target state="translated">计算增加到值&lt;a href=&quot;exp#kotlin.math%24exp%28kotlin.Double%29%2Fx&quot;&gt;x&lt;/a&gt;的幂的欧拉数 &lt;code&gt;e&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="ff565ce1378d4b4e77be485afca24a6593e21665" translate="yes" xml:space="preserve">
          <source>Computes Euler's number &lt;code&gt;e&lt;/code&gt; raised to the power of the value &lt;a href=&quot;exp#kotlin.math%24exp(kotlin.Double)/x&quot;&gt;x&lt;/a&gt;.</source>
          <target state="translated">计算增加到值&lt;a href=&quot;exp#kotlin.math%24exp(kotlin.Double)/x&quot;&gt;x&lt;/a&gt;的幂的欧拉数 &lt;code&gt;e&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="d9ad220e09ce10c0b1d3278a7b9bc5abbed8425e" translate="yes" xml:space="preserve">
          <source>Computes the arc cosine of the value &lt;a href=&quot;acos#kotlin.math%24acos%28kotlin.Double%29%2Fx&quot;&gt;x&lt;/a&gt;; the returned value is an angle in the range from &lt;code&gt;0.0&lt;/code&gt; to &lt;code&gt;PI&lt;/code&gt; radians.</source>
          <target state="translated">计算值&lt;a href=&quot;acos#kotlin.math%24acos%28kotlin.Double%29%2Fx&quot;&gt;x的反&lt;/a&gt;余弦值；返回值是一个角度，范围是 &lt;code&gt;0.0&lt;/code&gt; 到 &lt;code&gt;PI&lt;/code&gt; 弧度。</target>
        </trans-unit>
        <trans-unit id="3ef2e10512a29d32338572f93ad63c9728db8f9b" translate="yes" xml:space="preserve">
          <source>Computes the arc cosine of the value &lt;a href=&quot;acos#kotlin.math%24acos(kotlin.Double)/x&quot;&gt;x&lt;/a&gt;; the returned value is an angle in the range from &lt;code&gt;0.0&lt;/code&gt; to &lt;code&gt;PI&lt;/code&gt; radians.</source>
          <target state="translated">计算值&lt;a href=&quot;acos#kotlin.math%24acos(kotlin.Double)/x&quot;&gt;x的反&lt;/a&gt;余弦值；返回值是一个角度，范围是 &lt;code&gt;0.0&lt;/code&gt; 到 &lt;code&gt;PI&lt;/code&gt; 弧度。</target>
        </trans-unit>
        <trans-unit id="74694339d27a3650962ff09b8800075ae45ad99f" translate="yes" xml:space="preserve">
          <source>Computes the arc sine of the value &lt;a href=&quot;asin#kotlin.math%24asin%28kotlin.Double%29%2Fx&quot;&gt;x&lt;/a&gt;; the returned value is an angle in the range from &lt;code&gt;-PI/2&lt;/code&gt; to &lt;code&gt;PI/2&lt;/code&gt; radians.</source>
          <target state="translated">计算值&lt;a href=&quot;asin#kotlin.math%24asin%28kotlin.Double%29%2Fx&quot;&gt;x的&lt;/a&gt;反正弦值；返回值是 &lt;code&gt;-PI/2&lt;/code&gt; 至 &lt;code&gt;PI/2&lt;/code&gt; 弧度范围内的角度。</target>
        </trans-unit>
        <trans-unit id="817e3000088c3f6197c39f1d89424b0d7031505a" translate="yes" xml:space="preserve">
          <source>Computes the arc sine of the value &lt;a href=&quot;asin#kotlin.math%24asin(kotlin.Double)/x&quot;&gt;x&lt;/a&gt;; the returned value is an angle in the range from &lt;code&gt;-PI/2&lt;/code&gt; to &lt;code&gt;PI/2&lt;/code&gt; radians.</source>
          <target state="translated">计算值&lt;a href=&quot;asin#kotlin.math%24asin(kotlin.Double)/x&quot;&gt;x的&lt;/a&gt;反正弦值；返回值是 &lt;code&gt;-PI/2&lt;/code&gt; 至 &lt;code&gt;PI/2&lt;/code&gt; 弧度范围内的角度。</target>
        </trans-unit>
        <trans-unit id="532ea78bf6018eae31bf9aaaf81b513fcdc6c52c" translate="yes" xml:space="preserve">
          <source>Computes the arc tangent of the value &lt;a href=&quot;atan#kotlin.math%24atan%28kotlin.Double%29%2Fx&quot;&gt;x&lt;/a&gt;; the returned value is an angle in the range from &lt;code&gt;-PI/2&lt;/code&gt; to &lt;code&gt;PI/2&lt;/code&gt; radians.</source>
          <target state="translated">计算值&lt;a href=&quot;atan#kotlin.math%24atan%28kotlin.Double%29%2Fx&quot;&gt;x的&lt;/a&gt;反正切；返回的值是 &lt;code&gt;-PI/2&lt;/code&gt; 至 &lt;code&gt;PI/2&lt;/code&gt; 弧度范围内的角度。</target>
        </trans-unit>
        <trans-unit id="e82e5d15947d86a41fc39817b97e993fb6d7f7ba" translate="yes" xml:space="preserve">
          <source>Computes the arc tangent of the value &lt;a href=&quot;atan#kotlin.math%24atan(kotlin.Double)/x&quot;&gt;x&lt;/a&gt;; the returned value is an angle in the range from &lt;code&gt;-PI/2&lt;/code&gt; to &lt;code&gt;PI/2&lt;/code&gt; radians.</source>
          <target state="translated">计算值&lt;a href=&quot;atan#kotlin.math%24atan(kotlin.Double)/x&quot;&gt;x的&lt;/a&gt;反正切；返回值是 &lt;code&gt;-PI/2&lt;/code&gt; 至 &lt;code&gt;PI/2&lt;/code&gt; 弧度范围内的角度。</target>
        </trans-unit>
        <trans-unit id="69aac902ae4280ae453dec3182b654f73bbda9ad" translate="yes" xml:space="preserve">
          <source>Computes the binary logarithm (base 2) of the value &lt;a href=&quot;log2#kotlin.math%24log2%28kotlin.Double%29%2Fx&quot;&gt;x&lt;/a&gt;.</source>
          <target state="translated">计算值&lt;a href=&quot;log2#kotlin.math%24log2%28kotlin.Double%29%2Fx&quot;&gt;x&lt;/a&gt;的二进制对数（以2为底）。</target>
        </trans-unit>
        <trans-unit id="85e5083b205858b8d6554074c5f24c2c0d243aa2" translate="yes" xml:space="preserve">
          <source>Computes the binary logarithm (base 2) of the value &lt;a href=&quot;log2#kotlin.math%24log2(kotlin.Double)/x&quot;&gt;x&lt;/a&gt;.</source>
          <target state="translated">计算值&lt;a href=&quot;log2#kotlin.math%24log2(kotlin.Double)/x&quot;&gt;x&lt;/a&gt;的二进制对数（以2为底）。</target>
        </trans-unit>
        <trans-unit id="042db05e19a1f7f2f3a0240c225fe5c20d2af1c7" translate="yes" xml:space="preserve">
          <source>Computes the common logarithm (base 10) of the value &lt;a href=&quot;log10#kotlin.math%24log10%28kotlin.Double%29%2Fx&quot;&gt;x&lt;/a&gt;.</source>
          <target state="translated">计算值&lt;a href=&quot;log10#kotlin.math%24log10%28kotlin.Double%29%2Fx&quot;&gt;x的&lt;/a&gt;对数（以10为底）。</target>
        </trans-unit>
        <trans-unit id="358cd53c9a53727494d1deec1d2bf4f91c153ed4" translate="yes" xml:space="preserve">
          <source>Computes the common logarithm (base 10) of the value &lt;a href=&quot;log10#kotlin.math%24log10(kotlin.Double)/x&quot;&gt;x&lt;/a&gt;.</source>
          <target state="translated">计算值&lt;a href=&quot;log10#kotlin.math%24log10(kotlin.Double)/x&quot;&gt;x的&lt;/a&gt;对数（以10为底）。</target>
        </trans-unit>
        <trans-unit id="801aeaf1ab4a7cad800d25e50ccf0797533b391d" translate="yes" xml:space="preserve">
          <source>Computes the cosine of the angle &lt;a href=&quot;cos#kotlin.math%24cos%28kotlin.Double%29%2Fx&quot;&gt;x&lt;/a&gt; given in radians.</source>
          <target state="translated">计算以弧度为单位的角度&lt;a href=&quot;cos#kotlin.math%24cos%28kotlin.Double%29%2Fx&quot;&gt;x&lt;/a&gt;的余弦值。</target>
        </trans-unit>
        <trans-unit id="75967952ccf7290b36f64f520e62146f8d0e2355" translate="yes" xml:space="preserve">
          <source>Computes the cosine of the angle &lt;a href=&quot;cos#kotlin.math%24cos(kotlin.Double)/x&quot;&gt;x&lt;/a&gt; given in radians.</source>
          <target state="translated">计算以弧度为单位的角度&lt;a href=&quot;cos#kotlin.math%24cos(kotlin.Double)/x&quot;&gt;x&lt;/a&gt;的余弦值。</target>
        </trans-unit>
        <trans-unit id="af38d2adb7c5da916d562ba5ee7c65306c711eb7" translate="yes" xml:space="preserve">
          <source>Computes the hyperbolic cosine of the value &lt;a href=&quot;cosh#kotlin.math%24cosh%28kotlin.Double%29%2Fx&quot;&gt;x&lt;/a&gt;.</source>
          <target state="translated">计算值&lt;a href=&quot;cosh#kotlin.math%24cosh%28kotlin.Double%29%2Fx&quot;&gt;x&lt;/a&gt;的双曲余弦值。</target>
        </trans-unit>
        <trans-unit id="8d3d2706ff20a1ee67e304247843292649cbffc1" translate="yes" xml:space="preserve">
          <source>Computes the hyperbolic cosine of the value &lt;a href=&quot;cosh#kotlin.math%24cosh(kotlin.Double)/x&quot;&gt;x&lt;/a&gt;.</source>
          <target state="translated">计算值&lt;a href=&quot;cosh#kotlin.math%24cosh(kotlin.Double)/x&quot;&gt;x&lt;/a&gt;的双曲余弦值。</target>
        </trans-unit>
        <trans-unit id="16aaad9c9ae20d5e9d990484d6b0f9f0afca7da2" translate="yes" xml:space="preserve">
          <source>Computes the hyperbolic sine of the value &lt;a href=&quot;sinh#kotlin.math%24sinh%28kotlin.Double%29%2Fx&quot;&gt;x&lt;/a&gt;.</source>
          <target state="translated">计算值&lt;a href=&quot;sinh#kotlin.math%24sinh%28kotlin.Double%29%2Fx&quot;&gt;x&lt;/a&gt;的双曲正弦值。</target>
        </trans-unit>
        <trans-unit id="78b628807a6fecfe918e09dfd809510ec5d17f64" translate="yes" xml:space="preserve">
          <source>Computes the hyperbolic sine of the value &lt;a href=&quot;sinh#kotlin.math%24sinh(kotlin.Double)/x&quot;&gt;x&lt;/a&gt;.</source>
          <target state="translated">计算值&lt;a href=&quot;sinh#kotlin.math%24sinh(kotlin.Double)/x&quot;&gt;x&lt;/a&gt;的双曲正弦值。</target>
        </trans-unit>
        <trans-unit id="c20d0295e4a248227a3e536953ecd22b74af4ef1" translate="yes" xml:space="preserve">
          <source>Computes the hyperbolic tangent of the value &lt;a href=&quot;tanh#kotlin.math%24tanh%28kotlin.Double%29%2Fx&quot;&gt;x&lt;/a&gt;.</source>
          <target state="translated">计算值&lt;a href=&quot;tanh#kotlin.math%24tanh%28kotlin.Double%29%2Fx&quot;&gt;x&lt;/a&gt;的双曲正切值。</target>
        </trans-unit>
        <trans-unit id="50d64ffe4ed447458cc4f0117c28215b5f1f8bb6" translate="yes" xml:space="preserve">
          <source>Computes the hyperbolic tangent of the value &lt;a href=&quot;tanh#kotlin.math%24tanh(kotlin.Double)/x&quot;&gt;x&lt;/a&gt;.</source>
          <target state="translated">计算值&lt;a href=&quot;tanh#kotlin.math%24tanh(kotlin.Double)/x&quot;&gt;x&lt;/a&gt;的双曲正切。</target>
        </trans-unit>
        <trans-unit id="f936970b16e260f28ce47fac9ff5ba6c59c3ffe0" translate="yes" xml:space="preserve">
          <source>Computes the inverse hyperbolic cosine of the value &lt;a href=&quot;acosh#kotlin.math%24acosh%28kotlin.Double%29%2Fx&quot;&gt;x&lt;/a&gt;.</source>
          <target state="translated">计算值&lt;a href=&quot;acosh#kotlin.math%24acosh%28kotlin.Double%29%2Fx&quot;&gt;x&lt;/a&gt;的反双曲余弦值。</target>
        </trans-unit>
        <trans-unit id="148b6be4512caf33be7bd4a871031518ddd7c89e" translate="yes" xml:space="preserve">
          <source>Computes the inverse hyperbolic cosine of the value &lt;a href=&quot;acosh#kotlin.math%24acosh(kotlin.Double)/x&quot;&gt;x&lt;/a&gt;.</source>
          <target state="translated">计算值&lt;a href=&quot;acosh#kotlin.math%24acosh(kotlin.Double)/x&quot;&gt;x&lt;/a&gt;的反双曲余弦值。</target>
        </trans-unit>
        <trans-unit id="05dc7149a198d3bba80945f453fa01e84950b7d2" translate="yes" xml:space="preserve">
          <source>Computes the inverse hyperbolic sine of the value &lt;a href=&quot;asinh#kotlin.math%24asinh%28kotlin.Double%29%2Fx&quot;&gt;x&lt;/a&gt;.</source>
          <target state="translated">计算值&lt;a href=&quot;asinh#kotlin.math%24asinh%28kotlin.Double%29%2Fx&quot;&gt;x&lt;/a&gt;的反双曲正弦值。</target>
        </trans-unit>
        <trans-unit id="816d411034193e38cd91b9245d1ea6c543c03667" translate="yes" xml:space="preserve">
          <source>Computes the inverse hyperbolic sine of the value &lt;a href=&quot;asinh#kotlin.math%24asinh(kotlin.Double)/x&quot;&gt;x&lt;/a&gt;.</source>
          <target state="translated">计算值&lt;a href=&quot;asinh#kotlin.math%24asinh(kotlin.Double)/x&quot;&gt;x&lt;/a&gt;的反双曲正弦值。</target>
        </trans-unit>
        <trans-unit id="0f04076888fda0550126c88212efd0073c87ccbf" translate="yes" xml:space="preserve">
          <source>Computes the inverse hyperbolic tangent of the value &lt;a href=&quot;atanh#kotlin.math%24atanh%28kotlin.Double%29%2Fx&quot;&gt;x&lt;/a&gt;.</source>
          <target state="translated">计算值&lt;a href=&quot;atanh#kotlin.math%24atanh%28kotlin.Double%29%2Fx&quot;&gt;x&lt;/a&gt;的反双曲正切值。</target>
        </trans-unit>
        <trans-unit id="d48b27a27275e22603476c644267ad61d506f7d1" translate="yes" xml:space="preserve">
          <source>Computes the inverse hyperbolic tangent of the value &lt;a href=&quot;atanh#kotlin.math%24atanh(kotlin.Double)/x&quot;&gt;x&lt;/a&gt;.</source>
          <target state="translated">计算值&lt;a href=&quot;atanh#kotlin.math%24atanh(kotlin.Double)/x&quot;&gt;x&lt;/a&gt;的反双曲正切值。</target>
        </trans-unit>
        <trans-unit id="78d9c99b5e12f4a5453810f3fc45aa422fcd4ced" translate="yes" xml:space="preserve">
          <source>Computes the logarithm of the value &lt;a href=&quot;log#kotlin.math%24log%28kotlin.Double%2C+kotlin.Double%29%2Fx&quot;&gt;x&lt;/a&gt; to the given &lt;a href=&quot;log#kotlin.math%24log%28kotlin.Double%2C+kotlin.Double%29%2Fbase&quot;&gt;base&lt;/a&gt;.</source>
          <target state="translated">将&lt;a href=&quot;log#kotlin.math%24log%28kotlin.Double%2C+kotlin.Double%29%2Fx&quot;&gt;x&lt;/a&gt;的对数计算为给定的&lt;a href=&quot;log#kotlin.math%24log%28kotlin.Double%2C+kotlin.Double%29%2Fbase&quot;&gt;底数&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="9e24082c0bf6e60132029df213269f9cbe8eee03" translate="yes" xml:space="preserve">
          <source>Computes the logarithm of the value &lt;a href=&quot;log#kotlin.math%24log(kotlin.Double,%20kotlin.Double)/x&quot;&gt;x&lt;/a&gt; to the given &lt;a href=&quot;log#kotlin.math%24log(kotlin.Double,%20kotlin.Double)/base&quot;&gt;base&lt;/a&gt;.</source>
          <target state="translated">将&lt;a href=&quot;log#kotlin.math%24log(kotlin.Double,%20kotlin.Double)/x&quot;&gt;x&lt;/a&gt;的对数计算为给定的&lt;a href=&quot;log#kotlin.math%24log(kotlin.Double,%20kotlin.Double)/base&quot;&gt;底数&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="bbdf88dc8eaa810b9f221e162c0ae164bfccc030" translate="yes" xml:space="preserve">
          <source>Computes the natural logarithm (base &lt;code&gt;E&lt;/code&gt;) of the value &lt;a href=&quot;ln#kotlin.math%24ln%28kotlin.Double%29%2Fx&quot;&gt;x&lt;/a&gt;.</source>
          <target state="translated">计算值&lt;a href=&quot;ln#kotlin.math%24ln%28kotlin.Double%29%2Fx&quot;&gt;x&lt;/a&gt;的自然对数（以 &lt;code&gt;E&lt;/code&gt; 为底）。</target>
        </trans-unit>
        <trans-unit id="c4083bc3cb7a7cd79e81e5c9139a5dc48a7261a4" translate="yes" xml:space="preserve">
          <source>Computes the natural logarithm (base &lt;code&gt;E&lt;/code&gt;) of the value &lt;a href=&quot;ln#kotlin.math%24ln(kotlin.Double)/x&quot;&gt;x&lt;/a&gt;.</source>
          <target state="translated">计算值&lt;a href=&quot;ln#kotlin.math%24ln(kotlin.Double)/x&quot;&gt;x&lt;/a&gt;的自然对数（以 &lt;code&gt;E&lt;/code&gt; 为底）。</target>
        </trans-unit>
        <trans-unit id="3658b7ea17138ddaaaa32aa6ade2835c3de87bc8" translate="yes" xml:space="preserve">
          <source>Computes the next item in the iterator.</source>
          <target state="translated">计算迭代器中的下一个项目。</target>
        </trans-unit>
        <trans-unit id="b4a8f06d6424ce207fe2dbeb1673df11b4b022bd" translate="yes" xml:space="preserve">
          <source>Computes the positive square root of the value &lt;a href=&quot;sqrt#kotlin.math%24sqrt%28kotlin.Double%29%2Fx&quot;&gt;x&lt;/a&gt;.</source>
          <target state="translated">计算值&lt;a href=&quot;sqrt#kotlin.math%24sqrt%28kotlin.Double%29%2Fx&quot;&gt;x&lt;/a&gt;的正平方根。</target>
        </trans-unit>
        <trans-unit id="9472eb21955f9b4592952edb9bf8ae5f60c43778" translate="yes" xml:space="preserve">
          <source>Computes the positive square root of the value &lt;a href=&quot;sqrt#kotlin.math%24sqrt(kotlin.Double)/x&quot;&gt;x&lt;/a&gt;.</source>
          <target state="translated">计算值&lt;a href=&quot;sqrt#kotlin.math%24sqrt(kotlin.Double)/x&quot;&gt;x&lt;/a&gt;的正平方根。</target>
        </trans-unit>
        <trans-unit id="227fc806bb5cb8f94d8306fcd123a47201cc098d" translate="yes" xml:space="preserve">
          <source>Computes the remainder of division of this value by the &lt;a href=&quot;-i-e-e-erem#kotlin.math%24IEEErem%28kotlin.Double%2C+kotlin.Double%29%2Fdivisor&quot;&gt;divisor&lt;/a&gt; value according to the IEEE 754 standard.</source>
          <target state="translated">根据IEEE 754标准，计算该值除以&lt;a href=&quot;-i-e-e-erem#kotlin.math%24IEEErem%28kotlin.Double%2C+kotlin.Double%29%2Fdivisor&quot;&gt;除数&lt;/a&gt;的余数。</target>
        </trans-unit>
        <trans-unit id="7f507c0eb9b4a99edc49474bb0338c726700d1d3" translate="yes" xml:space="preserve">
          <source>Computes the remainder of division of this value by the &lt;a href=&quot;-i-e-e-erem#kotlin.math%24IEEErem(kotlin.Double,%20kotlin.Double)/divisor&quot;&gt;divisor&lt;/a&gt; value according to the IEEE 754 standard.</source>
          <target state="translated">根据IEEE 754标准，计算该值除以&lt;a href=&quot;-i-e-e-erem#kotlin.math%24IEEErem(kotlin.Double,%20kotlin.Double)/divisor&quot;&gt;除数&lt;/a&gt;的余数。</target>
        </trans-unit>
        <trans-unit id="7929cca41305f1b4a016af478fa8a663f57598a1" translate="yes" xml:space="preserve">
          <source>Computes the sine of the angle &lt;a href=&quot;sin#kotlin.math%24sin%28kotlin.Double%29%2Fx&quot;&gt;x&lt;/a&gt; given in radians.</source>
          <target state="translated">计算以弧度为单位的角度&lt;a href=&quot;sin#kotlin.math%24sin%28kotlin.Double%29%2Fx&quot;&gt;x&lt;/a&gt;的正弦值。</target>
        </trans-unit>
        <trans-unit id="105341cda1f54797ab2e70680187e6360edec2cd" translate="yes" xml:space="preserve">
          <source>Computes the sine of the angle &lt;a href=&quot;sin#kotlin.math%24sin(kotlin.Double)/x&quot;&gt;x&lt;/a&gt; given in radians.</source>
          <target state="translated">计算以弧度为单位的角度&lt;a href=&quot;sin#kotlin.math%24sin(kotlin.Double)/x&quot;&gt;x&lt;/a&gt;的正弦值。</target>
        </trans-unit>
        <trans-unit id="8f3573cd1d7c804fefd68285e96e557316e005d0" translate="yes" xml:space="preserve">
          <source>Computes the tangent of the angle &lt;a href=&quot;tan#kotlin.math%24tan%28kotlin.Double%29%2Fx&quot;&gt;x&lt;/a&gt; given in radians.</source>
          <target state="translated">计算以弧度为单位的角度&lt;a href=&quot;tan#kotlin.math%24tan%28kotlin.Double%29%2Fx&quot;&gt;x&lt;/a&gt;的切线。</target>
        </trans-unit>
        <trans-unit id="3b9576488a97ba2e0d8923cbc9cc0de66a90a149" translate="yes" xml:space="preserve">
          <source>Computes the tangent of the angle &lt;a href=&quot;tan#kotlin.math%24tan(kotlin.Double)/x&quot;&gt;x&lt;/a&gt; given in radians.</source>
          <target state="translated">计算以弧度为单位的角度&lt;a href=&quot;tan#kotlin.math%24tan(kotlin.Double)/x&quot;&gt;x&lt;/a&gt;的切线。</target>
        </trans-unit>
        <trans-unit id="1aba6cf12cb1df84a02458cf394b58671b7b321d" translate="yes" xml:space="preserve">
          <source>Concatenates characters in this &lt;a href=&quot;../kotlin/-char-array/index#kotlin.CharArray&quot;&gt;CharArray&lt;/a&gt; into a String.</source>
          <target state="translated">将此&lt;a href=&quot;../kotlin/-char-array/index#kotlin.CharArray&quot;&gt;CharArray中的&lt;/a&gt;字符连接成一个字符串。</target>
        </trans-unit>
        <trans-unit id="1302f45c5af73878c717281df472074f24772f6b" translate="yes" xml:space="preserve">
          <source>Concatenates characters in this &lt;a href=&quot;../kotlin/-char-array/index#kotlin.CharArray&quot;&gt;CharArray&lt;/a&gt; or its subrange into a String.</source>
          <target state="translated">将此&lt;a href=&quot;../kotlin/-char-array/index#kotlin.CharArray&quot;&gt;CharArray&lt;/a&gt;或其子范围中的字符连接成一个String。</target>
        </trans-unit>
        <trans-unit id="c78b957e6dcc9382fde9640b35614817fc42c4a2" translate="yes" xml:space="preserve">
          <source>Concatenates this Char and a String.</source>
          <target state="translated">将这个Char和一个字符串连接起来。</target>
        </trans-unit>
        <trans-unit id="df062526a2314e0bee167c57d603eadf84e209c3" translate="yes" xml:space="preserve">
          <source>Concatenates this string with the string representation of the given &lt;a href=&quot;plus#kotlin%24plus%28kotlin.String%2C+kotlin.Any%29%2Fother&quot;&gt;other&lt;/a&gt; object. If either the receiver or the &lt;a href=&quot;plus#kotlin%24plus%28kotlin.String%2C+kotlin.Any%29%2Fother&quot;&gt;other&lt;/a&gt; object are null, they are represented as the string &quot;null&quot;.</source>
          <target state="translated">将字符串与给定&lt;a href=&quot;plus#kotlin%24plus%28kotlin.String%2C+kotlin.Any%29%2Fother&quot;&gt;其他&lt;/a&gt;对象的字符串表示形式连接在一起。如果接收者或&lt;a href=&quot;plus#kotlin%24plus%28kotlin.String%2C+kotlin.Any%29%2Fother&quot;&gt;另一个&lt;/a&gt;对象为null，则将它们表示为字符串&amp;ldquo; null&amp;rdquo;。</target>
        </trans-unit>
        <trans-unit id="2ff85894052ad1bdb1158c8198936601e0ba0f35" translate="yes" xml:space="preserve">
          <source>Concatenates this string with the string representation of the given &lt;a href=&quot;plus#kotlin%24plus(kotlin.String?,%20kotlin.Any?)/other&quot;&gt;other&lt;/a&gt; object. If either the receiver or the &lt;a href=&quot;plus#kotlin%24plus(kotlin.String?,%20kotlin.Any?)/other&quot;&gt;other&lt;/a&gt; object are null, they are represented as the string &quot;null&quot;.</source>
          <target state="translated">将字符串与给定&lt;a href=&quot;plus#kotlin%24plus(kotlin.String?,%20kotlin.Any?)/other&quot;&gt;其他&lt;/a&gt;对象的字符串表示形式连接在一起。如果接收者或&lt;a href=&quot;plus#kotlin%24plus(kotlin.String?,%20kotlin.Any?)/other&quot;&gt;另一个&lt;/a&gt;对象为null，则将它们表示为字符串&amp;ldquo; null&amp;rdquo;。</target>
        </trans-unit>
        <trans-unit id="fb9925476ea0dd2145e51293904563c663a79655" translate="yes" xml:space="preserve">
          <source>Concatenating mode is implemented by &lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines.flow/flat-map-concat.html&quot;&gt;flatMapConcat&lt;/a&gt; and &lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines.flow/flatten-concat.html&quot;&gt;flattenConcat&lt;/a&gt; operators. They are the most direct analogues of the corresponding sequence operators. They wait for the inner flow to complete before starting to collect the next one as the following example shows:</source>
          <target state="translated">串联模式由&lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines.flow/flat-map-concat.html&quot;&gt;flatMapConcat&lt;/a&gt;和&lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines.flow/flatten-concat.html&quot;&gt;flattenConcat&lt;/a&gt;运算符实现。它们是相应序列运算符的最直接类似物。他们等待内部流程完成，然后开始收集下一个示例，如以下示例所示：</target>
        </trans-unit>
        <trans-unit id="8f444b9d5448ea57d949c47888a5c267129a7f51" translate="yes" xml:space="preserve">
          <source>Conceptually, &lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/async.html&quot;&gt;async&lt;/a&gt; is just like &lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/launch.html&quot;&gt;launch&lt;/a&gt;. It starts a separate coroutine which is a light-weight thread that works concurrently with all the other coroutines. The difference is that &lt;code&gt;launch&lt;/code&gt; returns a &lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/-job/index.html&quot;&gt;Job&lt;/a&gt; and does not carry any resulting value, while &lt;code&gt;async&lt;/code&gt; returns a &lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/-deferred/index.html&quot;&gt;Deferred&lt;/a&gt; &amp;mdash; a light-weight non-blocking future that represents a promise to provide a result later. You can use &lt;code&gt;.await()&lt;/code&gt; on a deferred value to get its eventual result, but &lt;code&gt;Deferred&lt;/code&gt; is also a &lt;code&gt;Job&lt;/code&gt;, so you can cancel it if needed.</source>
          <target state="translated">从概念上讲，&lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/async.html&quot;&gt;异步&lt;/a&gt;就像&lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/launch.html&quot;&gt;启动&lt;/a&gt;。它启动一个单独的协程，这是一个轻量级线程，可与所有其他协程同时工作。区别在于， &lt;code&gt;launch&lt;/code&gt; 返回&lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/-job/index.html&quot;&gt;Job&lt;/a&gt;，并且不会携带任何结果值，而 &lt;code&gt;async&lt;/code&gt; 返回&lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/-deferred/index.html&quot;&gt;Deferred（延迟）&lt;/a&gt;，这是一种轻量，无阻塞的未来，表示希望在以后提供结果。您可以对延迟值使用 &lt;code&gt;.await()&lt;/code&gt; 以获得最终结果，但是 &lt;code&gt;Deferred&lt;/code&gt; 也是 &lt;code&gt;Job&lt;/code&gt; ，因此可以在需要时取消它。</target>
        </trans-unit>
        <trans-unit id="741286a78a486044c8e70baf53ce8b42a09e5cfa" translate="yes" xml:space="preserve">
          <source>Conceptually, &lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/async.html&quot;&gt;async&lt;/a&gt; is just like &lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/launch.html&quot;&gt;launch&lt;/a&gt;. It starts a separate coroutine which is a light-weight thread that works concurrently with all the other coroutines. The difference is that &lt;code&gt;launch&lt;/code&gt; returns a &lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/-job/index.html&quot;&gt;Job&lt;/a&gt; and does not carry any resulting value, while &lt;code&gt;async&lt;/code&gt; returns a &lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/-deferred/index.html&quot;&gt;Deferred&lt;/a&gt; &amp;ndash; a light-weight non-blocking future that represents a promise to provide a result later. You can use &lt;code&gt;.await()&lt;/code&gt; on a deferred value to get its eventual result, but &lt;code&gt;Deferred&lt;/code&gt; is also a &lt;code&gt;Job&lt;/code&gt;, so you can cancel it if needed.</source>
          <target state="translated">从概念上讲，&lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/async.html&quot;&gt;异步&lt;/a&gt;就像&lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/launch.html&quot;&gt;启动&lt;/a&gt;。它启动一个单独的协程，这是一个轻量级线程，可与所有其他协程同时工作。区别在于， &lt;code&gt;launch&lt;/code&gt; 返回&lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/-job/index.html&quot;&gt;Job&lt;/a&gt;，并且不会携带任何结果值，而 &lt;code&gt;async&lt;/code&gt; 返回&lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/-deferred/index.html&quot;&gt;Deferred（延迟）&lt;/a&gt;，这是一种轻量，无阻塞的未来，表示希望在以后提供结果。您可以对延迟值使用 &lt;code&gt;.await()&lt;/code&gt; 以获得最终结果，但是 &lt;code&gt;Deferred&lt;/code&gt; 也是 &lt;code&gt;Job&lt;/code&gt; ，因此可以根据需要取消它。</target>
        </trans-unit>
        <trans-unit id="04d6dddfd7d6fccb9f9797c14c7ae51504c95b2c" translate="yes" xml:space="preserve">
          <source>Conceptually, a &lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines.channels/-send-channel/close.html&quot;&gt;close&lt;/a&gt; is like sending a special close token to the channel. The iteration stops as soon as this close token is received, so there is a guarantee that all previously sent elements before the close are received:</source>
          <target state="translated">从概念上讲，&lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines.channels/-send-channel/close.html&quot;&gt;关闭&lt;/a&gt;就像向通道发送特殊的关闭令牌。一旦收到此关闭令牌，迭代就会停止，因此可以保证在关闭之前收到所有先前发送的元素：</target>
        </trans-unit>
        <trans-unit id="0434df6a9465ae13aa06669a7769d87fb8625d68" translate="yes" xml:space="preserve">
          <source>Concrete type constructors</source>
          <target state="translated">混凝土类型构造器</target>
        </trans-unit>
        <trans-unit id="17e44d30708beb60414b171dd076a3db769f9d9e" translate="yes" xml:space="preserve">
          <source>Concurrency in Kotlin/Native</source>
          <target state="translated">Kotlin/Native中的并发性</target>
        </trans-unit>
        <trans-unit id="0f9c420abbf1f3f22ec98382c17954b9c2cc5972" translate="yes" xml:space="preserve">
          <source>Concurrent getOrPut, that is safe for concurrent maps.</source>
          <target state="translated">并发getOrPut,那是安全的并发地图。</target>
        </trans-unit>
        <trans-unit id="6d2e2eb8e58b21b66ed060a6e67917b441e9c1ac" translate="yes" xml:space="preserve">
          <source>Concurrent using async</source>
          <target state="translated">并发使用异步</target>
        </trans-unit>
        <trans-unit id="8c17ec700e8098781c5f019ea1f3a9c2803b50da" translate="yes" xml:space="preserve">
          <source>ConcurrentModificationException</source>
          <target state="translated">ConcurrentModificationException</target>
        </trans-unit>
        <trans-unit id="e428c12fd355944b5e6b7023bd80dd3c17b5aee5" translate="yes" xml:space="preserve">
          <source>Conditional expressions</source>
          <target state="translated">条件表达式</target>
        </trans-unit>
        <trans-unit id="e0b601d01602ccee0b95b13b09aba26c6be9c141" translate="yes" xml:space="preserve">
          <source>ConditionalEffect</source>
          <target state="translated">ConditionalEffect</target>
        </trans-unit>
        <trans-unit id="d6a56385d0729f6ff4bf27671cc845cb6f2cfde5" translate="yes" xml:space="preserve">
          <source>Conditionals</source>
          <target state="translated">Conditionals</target>
        </trans-unit>
        <trans-unit id="11c643274f03187b89a33e99682e1cfe14e02c3a" translate="yes" xml:space="preserve">
          <source>Configuration of &lt;a href=&quot;#binaries&quot;&gt;binaries&lt;/a&gt; to produce.</source>
          <target state="translated">配置要生成的&lt;a href=&quot;#binaries&quot;&gt;二进制文件&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="41ee2206f3ccc325441111ed1c7b37ef9b0dfab1" translate="yes" xml:space="preserve">
          <source>Configuration of &lt;a href=&quot;#cinterops&quot;&gt;interop with C libraries&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;#cinterops&quot;&gt;与C库互操作的&lt;/a&gt;配置。</target>
        </trans-unit>
        <trans-unit id="76174a215ddd15204db430482df071ee5ebe1e24" translate="yes" xml:space="preserve">
          <source>Configuration of &lt;a href=&quot;javascript-dce&quot;&gt;Dead Code Elimination&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;javascript-dce&quot;&gt;消除死码的&lt;/a&gt;配置。</target>
        </trans-unit>
        <trans-unit id="4b9f1d81c78ffbfad234d5994f6dacfa6f1cac25" translate="yes" xml:space="preserve">
          <source>Configuration of a target can include two parts:</source>
          <target state="translated">目标的配置可以包括两部分:</target>
        </trans-unit>
        <trans-unit id="962c23935e2fb336e8df68bfe34992f75f3b95bc" translate="yes" xml:space="preserve">
          <source>Configuration of project bundling with &lt;a href=&quot;https://webpack.js.org/&quot;&gt;Webpack&lt;/a&gt;.</source>
          <target state="translated">使用&lt;a href=&quot;https://webpack.js.org/&quot;&gt;Webpack&lt;/a&gt;进行项目捆绑的配置。</target>
        </trans-unit>
        <trans-unit id="746aaf3f5e42fcbc85a6ebe76a7f66df2faf7d69" translate="yes" xml:space="preserve">
          <source>Configuration of project running.</source>
          <target state="translated">项目运行的配置。</target>
        </trans-unit>
        <trans-unit id="6f8efa8ecc028ee460e87bf6c21677d39f6e480f" translate="yes" xml:space="preserve">
          <source>Configuration of test execution.</source>
          <target state="translated">测试执行的配置。</target>
        </trans-unit>
        <trans-unit id="da5930dacfc0e77711a530435834e4fadac95089" translate="yes" xml:space="preserve">
          <source>Configuration of the Node.js target.</source>
          <target state="translated">Node.js目标的配置。</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
