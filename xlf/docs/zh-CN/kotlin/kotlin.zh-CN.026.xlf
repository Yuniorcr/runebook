<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="zh-CN" datatype="htmlbody" original="kotlin">
    <body>
      <group id="kotlin">
        <trans-unit id="695467c9d75f99ef2a19dd30fa7e04f16b3ffed5" translate="yes" xml:space="preserve">
          <source>Target-specific sources for a compilation. &lt;em&gt;&amp;lt;targetName&amp;gt;&lt;/em&gt; is the name of a predefined target and &lt;em&gt;&amp;lt;compilationName&amp;gt;&lt;/em&gt; is the name of a compilation for this target. Examples: &lt;code&gt;jsTest&lt;/code&gt;, &lt;code&gt;jvmMain&lt;/code&gt;.</source>
          <target state="translated">特定于目标的编译源。&lt;em&gt;&amp;lt;targetName&amp;gt;&lt;/em&gt;是预定义目标的名称，而&lt;em&gt;&amp;lt;compilationName&amp;gt;&lt;/em&gt;是此目标的编译的名称。示例： &lt;code&gt;jsTest&lt;/code&gt; ， &lt;code&gt;jvmMain&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="fbb726beab60fbd5d494b96dfab27818ba4ef792" translate="yes" xml:space="preserve">
          <source>Targeting Android</source>
          <target state="translated">针对Android</target>
        </trans-unit>
        <trans-unit id="61435c5519fdf6e83f5be2de5ba7d3189d1e59db" translate="yes" xml:space="preserve">
          <source>Targeting JVM with Kotlin and Java source</source>
          <target state="translated">用Kotlin和Java源码瞄准JVM。</target>
        </trans-unit>
        <trans-unit id="eed4cc7b25a381102c782f5eee23b1557b5da0f0" translate="yes" xml:space="preserve">
          <source>Targeting JVM with Kotlin-only source</source>
          <target state="translated">用仅有Kotlin的源码瞄准JVM</target>
        </trans-unit>
        <trans-unit id="6be3f820f9efacb8a325c313968a6aa3ca133310" translate="yes" xml:space="preserve">
          <source>Targeting JVM with Kotlin-only source and multiple roots</source>
          <target state="translated">针对只使用Kotlin的源码和多个根的JVM。</target>
        </trans-unit>
        <trans-unit id="2426095a82998267d53648372ee8cb2c93e603c9" translate="yes" xml:space="preserve">
          <source>Targeting JavaScript</source>
          <target state="translated">针对JavaScript</target>
        </trans-unit>
        <trans-unit id="7e517a21f1ce2b40c420e67981cb82c90d901d12" translate="yes" xml:space="preserve">
          <source>Targeting JavaScript with Prefix, PostFix and sourcemap options</source>
          <target state="translated">使用前缀、后缀和源码图选项来定位JavaScript。</target>
        </trans-unit>
        <trans-unit id="af5e0c13bd0213a07d67ab13adf84941ec88763a" translate="yes" xml:space="preserve">
          <source>Targeting JavaScript with single source folder</source>
          <target state="translated">以单一源文件夹为目标的JavaScript</target>
        </trans-unit>
        <trans-unit id="f36e6891c319487c20f8187b941dcf72379e553c" translate="yes" xml:space="preserve">
          <source>Targeting JavaScript with single source folder and metaInfo option</source>
          <target state="translated">使用单一源文件夹和metaInfo选项锁定JavaScript。</target>
        </trans-unit>
        <trans-unit id="51aaaf1ce12316c97c4129484dcd06dd799fd74b" translate="yes" xml:space="preserve">
          <source>Targeting multiple platforms</source>
          <target state="translated">针对多个平台</target>
        </trans-unit>
        <trans-unit id="9057192fad6052cc02e53869d22c36d08b376824" translate="yes" xml:space="preserve">
          <source>Targeting the JVM</source>
          <target state="translated">针对JVM</target>
        </trans-unit>
        <trans-unit id="e9c6bdd75b92fb92b0ec52b948e6ab977d88c1c8" translate="yes" xml:space="preserve">
          <source>Targeting the browser</source>
          <target state="translated">针对浏览器</target>
        </trans-unit>
        <trans-unit id="d35260a00f655f27edcc35a7eb16da44a4f671a6" translate="yes" xml:space="preserve">
          <source>Targets</source>
          <target state="translated">Targets</target>
        </trans-unit>
        <trans-unit id="52408046d668e5c8da292f381cd0a5534e2e8a07" translate="yes" xml:space="preserve">
          <source>Targets (e.g. Linux/x64 or iOS/arm64 etc)</source>
          <target state="translated">目标(如Linux/x64或iOS/arm64等)</target>
        </trans-unit>
        <trans-unit id="837e53257b3eec566bea2e67012cd4dadfb5bb32" translate="yes" xml:space="preserve">
          <source>Targets and output kinds</source>
          <target state="translated">目标和产出种类</target>
        </trans-unit>
        <trans-unit id="816c9fefceb8b2eba75d842698c8c325c361d2dc" translate="yes" xml:space="preserve">
          <source>Targets can be specified by setting a corresponding component property:</source>
          <target state="translated">可以通过设置相应的组件属性来指定目标。</target>
        </trans-unit>
        <trans-unit id="ccd64eb3b2ae68576bc374a9f76f6dafc19a16b7" translate="yes" xml:space="preserve">
          <source>Teaching Kotlin with EduTools plugin</source>
          <target state="translated">使用EduTools插件教学Kotlin。</target>
        </trans-unit>
        <trans-unit id="107721a9ab514d4563cc6535734a7356bb7e6b23" translate="yes" xml:space="preserve">
          <source>Technically, there is no difference between &lt;code&gt;struct&lt;/code&gt; and &lt;code&gt;union&lt;/code&gt; types on the Kotlin side. We should note, that &lt;code&gt;a&lt;/code&gt;, &lt;code&gt;b&lt;/code&gt;, and &lt;code&gt;c&lt;/code&gt; properties of &lt;code&gt;MyUnion&lt;/code&gt; class in Kotlin use the same memory location to read/write their value just like &lt;code&gt;union&lt;/code&gt; does in C language.</source>
          <target state="translated">从技术上讲，在Kotlin方面， &lt;code&gt;struct&lt;/code&gt; 和 &lt;code&gt;union&lt;/code&gt; 类型之间没有区别。我们应该注意，Kotlin 中 &lt;code&gt;MyUnion&lt;/code&gt; 类的 &lt;code&gt;a&lt;/code&gt; ， &lt;code&gt;b&lt;/code&gt; 和 &lt;code&gt;c&lt;/code&gt; 属性使用相同的内存位置来读取/写入它们的值，就像 &lt;code&gt;union&lt;/code&gt; 在C语言中一样。</target>
        </trans-unit>
        <trans-unit id="1d53818b29193f314641d3739f638d9be2e9e5f4" translate="yes" xml:space="preserve">
          <source>Templates are supported both inside raw strings and inside escaped strings. If you need to represent a literal &lt;code&gt;$&lt;/code&gt; character in a raw string (which doesn't support backslash escaping), you can use the following syntax:</source>
          <target state="translated">原始字符串和转义字符串中均支持模板。如果需要在原始字符串中表示原义的 &lt;code&gt;$&lt;/code&gt; 字符（不支持反斜杠转义），则可以使用以下语法：</target>
        </trans-unit>
        <trans-unit id="7ba8959df1020b7c25355f02aa80fc7a01cc8776" translate="yes" xml:space="preserve">
          <source>Terminal flow operators</source>
          <target state="translated">终端流量操作员</target>
        </trans-unit>
        <trans-unit id="8bc67143f47634cca6b14c4c30313696a3edee94" translate="yes" xml:space="preserve">
          <source>Terminal operators on flows are &lt;em&gt;suspending functions&lt;/em&gt; that start a collection of the flow. The &lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines.flow/collect.html&quot;&gt;collect&lt;/a&gt; operator is the most basic one, but there are other terminal operators, which can make it easier:</source>
          <target state="translated">流上的终端操作员正在&lt;em&gt;挂起函数&lt;/em&gt;，这些&lt;em&gt;函数&lt;/em&gt;开始收集流。在&lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines.flow/collect.html&quot;&gt;收集&lt;/a&gt;操作是最基本的一个，但也有其他码头运营商，它可以更容易：</target>
        </trans-unit>
        <trans-unit id="8761082f68b3e6705f4c38bb348056fcdd9cb6dd" translate="yes" xml:space="preserve">
          <source>Terminate the evaluation of the function.</source>
          <target state="translated">终止函数的评估。</target>
        </trans-unit>
        <trans-unit id="bd3961165a74d22116abf8cd7dfd89e1e128faab" translate="yes" xml:space="preserve">
          <source>Terminates the currently running process.</source>
          <target state="translated">终止当前正在运行的进程。</target>
        </trans-unit>
        <trans-unit id="4640b3677ae305cdd783f2fb2cb28eef6cd34e00" translate="yes" xml:space="preserve">
          <source>Ternary-operator &lt;code&gt;a ? b : c&lt;/code&gt;</source>
          <target state="translated">三元运算符 &lt;code&gt;a ? b : c&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="9c22a134e1f02cad64a3d132ad7049819fd878ba" translate="yes" xml:space="preserve">
          <source>Test code and resources shared between all platforms. Available in all multiplatform projects. Used in all test compilations of a project.</source>
          <target state="translated">所有平台之间共享测试代码和资源。在所有多平台项目中都可以使用。在一个项目的所有测试编译中使用。</target>
        </trans-unit>
        <trans-unit id="6f766a74653830a12657ec6c72f3933d6f2e1972" translate="yes" xml:space="preserve">
          <source>Test configuration</source>
          <target state="translated">测试配置</target>
        </trans-unit>
        <trans-unit id="372bbf00df55ec21b53da581f9b6998ed6e0bdac" translate="yes" xml:space="preserve">
          <source>Test executable</source>
          <target state="translated">测试可执行文件</target>
        </trans-unit>
        <trans-unit id="23b06cefd18a3e9e852e245b75fa172dce42b67c" translate="yes" xml:space="preserve">
          <source>Test executable.</source>
          <target state="translated">测试可执行文件。</target>
        </trans-unit>
        <trans-unit id="402aba565d558dcbcb7c225b6e1f4e58dbc667da" translate="yes" xml:space="preserve">
          <source>Test reports generation</source>
          <target state="translated">测试报告的生成</target>
        </trans-unit>
        <trans-unit id="da5b6a7b5703c1c1698be24a1fa79fd7890fb1c1" translate="yes" xml:space="preserve">
          <source>Test run results in the console</source>
          <target state="translated">控制台中的测试运行结果</target>
        </trans-unit>
        <trans-unit id="1c718df4c6a07f654ca88944cfa217c182c74b06" translate="yes" xml:space="preserve">
          <source>TestClock</source>
          <target state="translated">TestClock</target>
        </trans-unit>
        <trans-unit id="fa1d9bd08b7bbcce4cacba29ac0abb1d8ea26e62" translate="yes" xml:space="preserve">
          <source>TestTimeSource</source>
          <target state="translated">TestTimeSource</target>
        </trans-unit>
        <trans-unit id="0820b32b206b7352858e8903a838ed14319acdfd" translate="yes" xml:space="preserve">
          <source>Testing</source>
          <target state="translated">Testing</target>
        </trans-unit>
        <trans-unit id="d3b8064c2d7f14d3be517a2dd8d759b095d75329" translate="yes" xml:space="preserve">
          <source>Testing predicates</source>
          <target state="translated">测试谓词</target>
        </trans-unit>
        <trans-unit id="c7dd4726947e8a4e69327ac444e2102f6d4c85c3" translate="yes" xml:space="preserve">
          <source>Tests are a safe place to add Kotlin to the codebase because they are not bundled with your application during packaging.</source>
          <target state="translated">测试是一个安全的地方,可以将Kotlin添加到代码库中,因为在打包过程中,它们不会与你的应用程序捆绑在一起。</target>
        </trans-unit>
        <trans-unit id="082fdf5c87614574580fe601c26048e8b6285351" translate="yes" xml:space="preserve">
          <source>TexImageSource</source>
          <target state="translated">TexImageSource</target>
        </trans-unit>
        <trans-unit id="06d4a26dfeb6fe515c1bd30f6921c66e729ad5b4" translate="yes" xml:space="preserve">
          <source>TextMetrics</source>
          <target state="translated">TextMetrics</target>
        </trans-unit>
        <trans-unit id="0c0a3e3c79ed645faf27df5d40c7372e38f10e27" translate="yes" xml:space="preserve">
          <source>TextTrackCueList</source>
          <target state="translated">TextTrackCueList</target>
        </trans-unit>
        <trans-unit id="86fb1c4a335a80c40bdf3e5b1a2aadd5059a2ca7" translate="yes" xml:space="preserve">
          <source>TextTrackKind</source>
          <target state="translated">TextTrackKind</target>
        </trans-unit>
        <trans-unit id="12de6f114f3e1a86a095e86dfa5c8b68ba37ba4b" translate="yes" xml:space="preserve">
          <source>TextTrackMode</source>
          <target state="translated">TextTrackMode</target>
        </trans-unit>
        <trans-unit id="53e95fc8d87c0686b0db942c629a742b7440e7d3" translate="yes" xml:space="preserve">
          <source>Thanks to the hierarchical project structure, libraries can also provide common APIs for a subset of targets. Learn more about &lt;a href=&quot;mpp-share-on-platforms#share-code-in-libraries&quot;&gt;sharing code in libraries&lt;/a&gt;.</source>
          <target state="translated">归功于分层项目结构，库还可以为目标子集提供通用API。了解有关&lt;a href=&quot;mpp-share-on-platforms#share-code-in-libraries&quot;&gt;在库中共享代码的&lt;/a&gt;更多信息。</target>
        </trans-unit>
        <trans-unit id="4455a59aa23e731930f0ed9b61b713623ec3ff4f" translate="yes" xml:space="preserve">
          <source>Thanks to the hierarchical project structure, libraries can also provide common APIs for a subset of targets. When a &lt;a href=&quot;mpp-publish-lib&quot;&gt;library is published&lt;/a&gt;, the API of its intermediate source sets is embedded into the library artifacts along with information about the project structure. When you use this library, the intermediate source sets of your project access only those APIs of the library which are available to the targets of each source set.</source>
          <target state="translated">归功于分层项目结构，库还可以为目标子集提供通用API。当一个&lt;a href=&quot;mpp-publish-lib&quot;&gt;库被公布&lt;/a&gt;，其中间源集的API被嵌入到与有关项目的结构信息一起库的伪影。当您使用此库时，项目的中间源集仅访问库中那些可用于每个源集目标的API。</target>
        </trans-unit>
        <trans-unit id="7878af5e1d970e3132e8a0a88487c501b01c97e2" translate="yes" xml:space="preserve">
          <source>That gives you a way to express queries via C#-like LINQ syntax, use lambdas to write much simpler code for asynchronous computations, and more. Read all the details &lt;a href=&quot;https://agrosner.gitbooks.io/dbflow/content/KotlinSupport.html&quot;&gt;here&lt;/a&gt;.</source>
          <target state="translated">这为您提供了一种通过类似于C＃的LINQ语法表达查询，使用lambda编写用于异步计算的简单得多的代码等方法。在&lt;a href=&quot;https://agrosner.gitbooks.io/dbflow/content/KotlinSupport.html&quot;&gt;这里&lt;/a&gt;阅读所有详细信息。</target>
        </trans-unit>
        <trans-unit id="0edd9421fb5e5aa8cfee7f829a8302f1e02b82ec" translate="yes" xml:space="preserve">
          <source>That is because &lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/delay.html&quot;&gt;delay&lt;/a&gt; is a special &lt;em&gt;suspending function&lt;/em&gt; that does not block a thread, but &lt;em&gt;suspends&lt;/em&gt; coroutine and it can be only used from a coroutine.</source>
          <target state="translated">那是因为&lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/delay.html&quot;&gt;delay&lt;/a&gt;是一个特殊的&lt;em&gt;挂起函数&lt;/em&gt;，它不会阻塞线程，而是&lt;em&gt;挂起&lt;/em&gt;协程，并且只能在协程中使用。</target>
        </trans-unit>
        <trans-unit id="710fe831c742e4f0eb7d410a5e7f34322dc9bdb8" translate="yes" xml:space="preserve">
          <source>That is because &lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/delay.html&quot;&gt;delay&lt;/a&gt; is a special &lt;em&gt;suspending function&lt;/em&gt; that does not block a thread, but &lt;em&gt;suspends&lt;/em&gt; the coroutine, and it can be only used from a coroutine.</source>
          <target state="translated">这是因为&lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/delay.html&quot;&gt;delay&lt;/a&gt;是一个特殊的&lt;em&gt;挂起函数&lt;/em&gt;，它不会阻塞线程，而是&lt;em&gt;挂起&lt;/em&gt;协程，并且只能在协程中使用。</target>
        </trans-unit>
        <trans-unit id="5f1552ede00e5eac7ce32f87adbb1ebbd118c506" translate="yes" xml:space="preserve">
          <source>That is the common part. The code to generate the final message. It &lt;code&gt;expect&lt;/code&gt;s the platform to provide the platform name from the &lt;code&gt;expect fun platformName(): String&lt;/code&gt; function. We will use the &lt;code&gt;createApplicationScreenMessage&lt;/code&gt; from both Android and iOS applications.</source>
          <target state="translated">那是普通的部分。生成最终消息的代码。它 &lt;code&gt;expect&lt;/code&gt; 平台从 &lt;code&gt;expect fun platformName(): String&lt;/code&gt; 的平台名称（）：String函数提供平台名称。我们将同时使用Android和iOS应用程序中的 &lt;code&gt;createApplicationScreenMessage&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="2bc4829125d0242560af4ed1db4d6bbd3c58404a" translate="yes" xml:space="preserve">
          <source>That was easy, but maybe we'd want to do lazy-loading so that we won't spend time on extracting the fields that won't be used (especially if some of them contain a lot of data in a format that it is time-consuming to parse), and maybe we'd like support for default values. While we could implement that logic in a &lt;code&gt;get()&lt;/code&gt; block, it would need to be duplicated in every property. Alternatively, we could implement the logic in a separate &lt;code&gt;StringProperty&lt;/code&gt; class (note that this simple example is not thread-safe):</source>
          <target state="translated">这很容易，但是也许我们想进行延迟加载，这样我们就不会花时间来提取不会使用的字段（特别是如果其中一些包含很多数据的格式是解析非常耗时），也许我们希望支持默认值。尽管我们可以在 &lt;code&gt;get()&lt;/code&gt; 块中实现该逻辑，但需要在每个属性中复制该逻辑。另外，我们可以在单独的 &lt;code&gt;StringProperty&lt;/code&gt; 类中实现逻辑（请注意，此简单示例不是线程安全的）：</target>
        </trans-unit>
        <trans-unit id="7c754aa21a3405ebaf37834b83155abdf27ac763" translate="yes" xml:space="preserve">
          <source>That will force the Objc header to mark &lt;code&gt;myVal&lt;/code&gt; as non-null.</source>
          <target state="translated">这将强制Objc标头将 &lt;code&gt;myVal&lt;/code&gt; 标记为非null。</target>
        </trans-unit>
        <trans-unit id="ec91ab1097ba6574aef9c9b3b66e7a3cac24bd22" translate="yes" xml:space="preserve">
          <source>That will force the Objective-C header to mark &lt;code&gt;myVal&lt;/code&gt; as non-null.</source>
          <target state="translated">这将迫使Objective-C标头将 &lt;code&gt;myVal&lt;/code&gt; 标记为非null。</target>
        </trans-unit>
        <trans-unit id="679e649b9b5fbcdbe531734cbf672d185a685015" translate="yes" xml:space="preserve">
          <source>That&amp;rsquo;s why if you wanted to use &lt;code&gt;break&lt;/code&gt; and &lt;code&gt;continue&lt;/code&gt; inside &lt;code&gt;when&lt;/code&gt; expressions in loops, you had to &lt;a href=&quot;returns#break-and-continue-labels&quot;&gt;label&lt;/a&gt; them, which became rather cumbersome.</source>
          <target state="translated">这就是为什么如果要在循环中使用表达式 &lt;code&gt;when&lt;/code&gt; 使用 &lt;code&gt;break&lt;/code&gt; 并在内部 &lt;code&gt;continue&lt;/code&gt; ，则必须&lt;a href=&quot;returns#break-and-continue-labels&quot;&gt;标记&lt;/a&gt;它们，这变得相当麻烦。</target>
        </trans-unit>
        <trans-unit id="0f4622a697b62b60beae07bb6cb2be3136a91e3c" translate="yes" xml:space="preserve">
          <source>That's all! Note that &lt;code&gt;kapt&lt;/code&gt; takes care of your Java files as well, so you don't need to keep the &lt;code&gt;annotationProcessor&lt;/code&gt; dependency.</source>
          <target state="translated">就这样！请注意， &lt;code&gt;kapt&lt;/code&gt; 还可以处理您的Java文件，因此您无需保留 &lt;code&gt;annotationProcessor&lt;/code&gt; 处理器依赖项。</target>
        </trans-unit>
        <trans-unit id="24349cf6cc7cf7f9b384531cea8b8f5b11489c77" translate="yes" xml:space="preserve">
          <source>That's how you add the plugin in Gradle:</source>
          <target state="translated">这就是你在Gradle中添加插件的方法。</target>
        </trans-unit>
        <trans-unit id="a1ab5b0ae87620b6ed26788a9947060cc8e1a1d4" translate="yes" xml:space="preserve">
          <source>That's it, our library is now successfully published and any Kotlin project can depend on it, whether it is another common library, JVM, JS, or Native application.</source>
          <target state="translated">就这样,我们的库已经成功发布了,任何Kotlin项目都可以依赖它,不管是其他通用库、JVM、JS还是Native应用。</target>
        </trans-unit>
        <trans-unit id="736d96c876d3629aa01920322b964b507fdb9a3c" translate="yes" xml:space="preserve">
          <source>That's it, we are good to go and write code under &lt;code&gt;src/main/kotlin&lt;/code&gt;.</source>
          <target state="translated">就是这样，我们很高兴在 &lt;code&gt;src/main/kotlin&lt;/code&gt; 下编写代码。</target>
        </trans-unit>
        <trans-unit id="b79f3592a2bc46aa2f1d8a2fe0f2f1a3ad0a665d" translate="yes" xml:space="preserve">
          <source>That's why the actual signature of &lt;code&gt;addAll()&lt;/code&gt; is the following:</source>
          <target state="translated">这就是为什么 &lt;code&gt;addAll()&lt;/code&gt; 的实际签名如下：</target>
        </trans-unit>
        <trans-unit id="5cebaf2e4c811fba9f733598c7e0ab2cbbdabb01" translate="yes" xml:space="preserve">
          <source>That's why we have the following migration plan instead:</source>
          <target state="translated">所以我们有以下的迁移计划代替。</target>
        </trans-unit>
        <trans-unit id="ed972239c05a1ce2160c2bcfca2e4a8ef0e2db12" translate="yes" xml:space="preserve">
          <source>The &quot;ping&quot; coroutine is started first, so it is the first one to receive the ball. Even though &quot;ping&quot; coroutine immediately starts receiving the ball again after sending it back to the table, the ball gets received by the &quot;pong&quot; coroutine, because it was already waiting for it:</source>
          <target state="translated">ping &quot;coroutine首先被启动,所以它是第一个接收球的。尽管 &quot;ping &quot;程序在将球送回桌面后又立即开始接收球,但由于 &quot;pong &quot;程序已经在等待,所以球被 &quot;pong &quot;程序接收。</target>
        </trans-unit>
        <trans-unit id="c7440a8c30ab97822c9d77fe495203fe0ef8e721" translate="yes" xml:space="preserve">
          <source>The &amp;ldquo;manual&amp;rdquo; workaround is to store the values of sub-expressions with control flow in variables, instead of evaluating them directly inside the call arguments. It&amp;rsquo;s similar to &lt;code&gt;-Xnormalize-constructor-calls=enable&lt;/code&gt;.</source>
          <target state="translated">&amp;ldquo;手动&amp;rdquo;解决方法是将具有控制流的子表达式的值存储在变量中，而不是直接在调用参数中对其求值。它类似于 &lt;code&gt;-Xnormalize-constructor-calls=enable&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="b2dac38fb13b33ed15d5a221ea9b31acee5a3f83" translate="yes" xml:space="preserve">
          <source>The (complete) C data type.</source>
          <target state="translated">(完整的)C数据类型。</target>
        </trans-unit>
        <trans-unit id="d40e2aa06e1f3081a9ba55e866548f768b24f0de" translate="yes" xml:space="preserve">
          <source>The (possibly empty) sequence of immutable C values. It is self-contained and doesn't depend on native memory.</source>
          <target state="translated">不可变的C值序列(可能是空的)。它是自足的,不依赖于本地内存。</target>
        </trans-unit>
        <trans-unit id="7b6a69c655f68801070a7ea7a1009ee4bf0a261f" translate="yes" xml:space="preserve">
          <source>The 64-bit Android Native target require a Linux or macOS host. The 32-bit Android Native target can be built on any supported host.</source>
          <target state="translated">64位Android Native目标需要Linux或macOS主机。32位Android Native目标可以在任何支持的主机上构建。</target>
        </trans-unit>
        <trans-unit id="d0dc19249da02268a7197420a7bf7e4b0dc580f6" translate="yes" xml:space="preserve">
          <source>The 64-bit target requires a Linux or macOS host.</source>
          <target state="translated">64位目标需要Linux或macOS主机。</target>
        </trans-unit>
        <trans-unit id="025e0471d3315a226930949e631a17bb911bf9c2" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#configuring-source-sets&quot;&gt;source sets&lt;/a&gt; and their &lt;a href=&quot;#adding-dependencies&quot;&gt;dependencies&lt;/a&gt; are then configured as follows:</source>
          <target state="translated">在&lt;a href=&quot;#configuring-source-sets&quot;&gt;源集&lt;/a&gt;和它们的&lt;a href=&quot;#adding-dependencies&quot;&gt;依赖关系&lt;/a&gt;，然后配置如下：</target>
        </trans-unit>
        <trans-unit id="587688423378c35c59750f8053e3e7120acd7a77" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;-c-pointed/index&quot;&gt;CPointed&lt;/a&gt; without any specified interpretation.</source>
          <target state="translated">没有指定解释的&lt;a href=&quot;-c-pointed/index&quot;&gt;CPointed&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="d6d7555b1e73df12c61cc2d2ea015a73f43aed2f" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../-c-pointed/index&quot;&gt;CPointed&lt;/a&gt; without any specified interpretation.</source>
          <target state="translated">没有指定解释的&lt;a href=&quot;../-c-pointed/index&quot;&gt;CPointed&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="e54545b48334a1124feb75af3b7057b37b313a69" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../../api/latest/jvm/stdlib/kotlin.collections/minus-assign&quot;&gt;&lt;code&gt;minusAssign&lt;/code&gt;&lt;/a&gt; (&lt;code&gt;-=&lt;/code&gt;) operator is also available for mutable maps.</source>
          <target state="translated">该&lt;a href=&quot;../../api/latest/jvm/stdlib/kotlin.collections/minus-assign&quot;&gt; &lt;code&gt;minusAssign&lt;/code&gt; &lt;/a&gt;（ &lt;code&gt;-=&lt;/code&gt; ）运算符也可用于可变地图。</target>
        </trans-unit>
        <trans-unit id="4ff365b4410b0b6619038682a29eefb850097313" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../../api/latest/jvm/stdlib/kotlin/-dsl-marker/index&quot;&gt;&lt;code&gt;@DslMarker&lt;/code&gt;&lt;/a&gt; annotation allows to restrict the use of receivers from outer scopes in a DSL context. Consider the canonical &lt;a href=&quot;type-safe-builders&quot;&gt;HTML builder example&lt;/a&gt;:</source>
          <target state="translated">所述&lt;a href=&quot;../../api/latest/jvm/stdlib/kotlin/-dsl-marker/index&quot;&gt; &lt;code&gt;@DslMarker&lt;/code&gt; &lt;/a&gt;注释允许限制在DSL背景下使用的接收器从外部范围。考虑规范的&lt;a href=&quot;type-safe-builders&quot;&gt;HTML构建器示例&lt;/a&gt;：</target>
        </trans-unit>
        <trans-unit id="0ed846a235f919618387ac6874100bd335e7cf20" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../../reference/native/c_interop&quot;&gt;C Interop documentation&lt;/a&gt; documentation covers more advanced scenarios of the interop.</source>
          <target state="translated">该&lt;a href=&quot;../../reference/native/c_interop&quot;&gt;&amp;ccedil;互操作性文档&lt;/a&gt;文件覆盖互操作的更高级的情景。</target>
        </trans-unit>
        <trans-unit id="1b6d8c3337d9451276257f3dd3c6b569bd207944" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../tutorials/httpservlets&quot;&gt;Creating Web Applications with Http Servlets&lt;/a&gt; and &lt;a href=&quot;../tutorials/spring-boot-restful&quot;&gt;Creating a RESTful Web Service with Spring Boot&lt;/a&gt; tutorials show you how you can build and run very small Web applications in Kotlin.</source>
          <target state="translated">在&lt;a href=&quot;../tutorials/httpservlets&quot;&gt;创建Web应用程序使用HTTP Servlet的&lt;/a&gt;，并&lt;a href=&quot;../tutorials/spring-boot-restful&quot;&gt;与Spring启动创建一个RESTful Web服务&lt;/a&gt;教程向您展示如何构建和运行科特林非常小的Web应用程序。</target>
        </trans-unit>
        <trans-unit id="370b9ddcfe0daa7a4e64218bc3548eec2e892b70" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;building-mpp-with-gradle#adding-dependencies&quot;&gt;dependencies configuration&lt;/a&gt; has been changed; dependencies are now specified separately for each source root.</source>
          <target state="translated">的&lt;a href=&quot;building-mpp-with-gradle#adding-dependencies&quot;&gt;依赖关系的配置&lt;/a&gt;已经被改变; 现在分别为每个源根指定依赖项。</target>
        </trans-unit>
        <trans-unit id="674f31521000a6f54abe7364383ba3624d590692" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;create-temp-dir#kotlin.io%24createTempDir(kotlin.String,%20kotlin.String?,%20java.io.File?)/prefix&quot;&gt;prefix&lt;/a&gt; argument, if specified, must be at least three characters long. It is recommended that the prefix be a short, meaningful string such as &quot;job&quot; or &quot;mail&quot;.</source>
          <target state="translated">该&lt;a href=&quot;create-temp-dir#kotlin.io%24createTempDir(kotlin.String,%20kotlin.String?,%20java.io.File?)/prefix&quot;&gt;前缀&lt;/a&gt;的说法，如果指定的长度必须至少有三个字符。建议前缀是短而有意义的字符串，例如&amp;ldquo; job&amp;rdquo;或&amp;ldquo; mail&amp;rdquo;。</target>
        </trans-unit>
        <trans-unit id="232e0eee7b10204645b3dd32191de6618efcf17f" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;create-temp-file#kotlin.io%24createTempFile(kotlin.String,%20kotlin.String?,%20java.io.File?)/prefix&quot;&gt;prefix&lt;/a&gt; argument, if specified, must be at least three characters long. It is recommended that the prefix be a short, meaningful string such as &quot;job&quot; or &quot;mail&quot;.</source>
          <target state="translated">该&lt;a href=&quot;create-temp-file#kotlin.io%24createTempFile(kotlin.String,%20kotlin.String?,%20java.io.File?)/prefix&quot;&gt;前缀&lt;/a&gt;的说法，如果指定的长度必须至少有三个字符。建议前缀是短而有意义的字符串，例如&amp;ldquo; job&amp;rdquo;或&amp;ldquo; mail&amp;rdquo;。</target>
        </trans-unit>
        <trans-unit id="269230aa3731ce52c181b4cdd4ea09cfe0397b67" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;down-to#kotlin.ranges%24downTo%28kotlin.Int%2C+kotlin.Byte%29%2Fto&quot;&gt;to&lt;/a&gt; value should be less than or equal to &lt;code&gt;this&lt;/code&gt; value. If the &lt;a href=&quot;down-to#kotlin.ranges%24downTo%28kotlin.Int%2C+kotlin.Byte%29%2Fto&quot;&gt;to&lt;/a&gt; value is greater than &lt;code&gt;this&lt;/code&gt; value the returned progression is empty.</source>
          <target state="translated">的&lt;a href=&quot;down-to#kotlin.ranges%24downTo%28kotlin.Int%2C+kotlin.Byte%29%2Fto&quot;&gt;到&lt;/a&gt;的值应小于或等于 &lt;code&gt;this&lt;/code&gt; 值。如果&lt;a href=&quot;down-to#kotlin.ranges%24downTo%28kotlin.Int%2C+kotlin.Byte%29%2Fto&quot;&gt;to&lt;/a&gt;值大 &lt;code&gt;this&lt;/code&gt; 值，则返回的进度为空。</target>
        </trans-unit>
        <trans-unit id="cedb826c5703fb7b6739f64d401e4c303edac3fd" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;down-to#kotlin.ranges%24downTo(kotlin.Int,%20kotlin.Byte)/to&quot;&gt;to&lt;/a&gt; value should be less than or equal to &lt;code&gt;this&lt;/code&gt; value. If the &lt;a href=&quot;down-to#kotlin.ranges%24downTo(kotlin.Int,%20kotlin.Byte)/to&quot;&gt;to&lt;/a&gt; value is greater than &lt;code&gt;this&lt;/code&gt; value the returned progression is empty.</source>
          <target state="translated">的&lt;a href=&quot;down-to#kotlin.ranges%24downTo(kotlin.Int,%20kotlin.Byte)/to&quot;&gt;到&lt;/a&gt;的值应小于或等于 &lt;code&gt;this&lt;/code&gt; 值。如果&lt;a href=&quot;down-to#kotlin.ranges%24downTo(kotlin.Int,%20kotlin.Byte)/to&quot;&gt;to&lt;/a&gt;值大 &lt;code&gt;this&lt;/code&gt; 值，则返回的级数为空。</target>
        </trans-unit>
        <trans-unit id="742e049bae3776c4fe6fe85ca2d3d815ec2c3864" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;group-by-to#kotlin.sequences%24groupByTo%28kotlin.sequences.Sequence%28%28kotlin.sequences.groupByTo.T%29%29%2C+kotlin.sequences.groupByTo.M%2C+kotlin.Function1%28%28kotlin.sequences.groupByTo.T%2C+kotlin.sequences.groupByTo.K%29%29%29%2Fdestination&quot;&gt;destination&lt;/a&gt; map.</source>
          <target state="translated">该&lt;a href=&quot;group-by-to#kotlin.sequences%24groupByTo%28kotlin.sequences.Sequence%28%28kotlin.sequences.groupByTo.T%29%29%2C+kotlin.sequences.groupByTo.M%2C+kotlin.Function1%28%28kotlin.sequences.groupByTo.T%2C+kotlin.sequences.groupByTo.K%29%29%29%2Fdestination&quot;&gt;目的地&lt;/a&gt;的地图。</target>
        </trans-unit>
        <trans-unit id="c384276c1494f8a4d389142695a22613ee5962a0" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;group-by-to#kotlin.sequences%24groupByTo%28kotlin.sequences.Sequence%28%28kotlin.sequences.groupByTo.T%29%29%2C+kotlin.sequences.groupByTo.M%2C+kotlin.Function1%28%28kotlin.sequences.groupByTo.T%2C+kotlin.sequences.groupByTo.K%29%29%2C+kotlin.Function1%28%28kotlin.sequences.groupByTo.T%2C+kotlin.sequences.groupByTo.V%29%29%29%2Fdestination&quot;&gt;destination&lt;/a&gt; map.</source>
          <target state="translated">该&lt;a href=&quot;group-by-to#kotlin.sequences%24groupByTo%28kotlin.sequences.Sequence%28%28kotlin.sequences.groupByTo.T%29%29%2C+kotlin.sequences.groupByTo.M%2C+kotlin.Function1%28%28kotlin.sequences.groupByTo.T%2C+kotlin.sequences.groupByTo.K%29%29%2C+kotlin.Function1%28%28kotlin.sequences.groupByTo.T%2C+kotlin.sequences.groupByTo.V%29%29%29%2Fdestination&quot;&gt;目的地&lt;/a&gt;的地图。</target>
        </trans-unit>
        <trans-unit id="5d95b84298d2eab336155e81f552bfaa2e8cad8d" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;group-by-to#kotlin.sequences%24groupByTo(kotlin.sequences.Sequence((kotlin.sequences.groupByTo.T)),%20kotlin.sequences.groupByTo.M,%20kotlin.Function1((kotlin.sequences.groupByTo.T,%20kotlin.sequences.groupByTo.K)))/destination&quot;&gt;destination&lt;/a&gt; map.</source>
          <target state="translated">该&lt;a href=&quot;group-by-to#kotlin.sequences%24groupByTo(kotlin.sequences.Sequence((kotlin.sequences.groupByTo.T)),%20kotlin.sequences.groupByTo.M,%20kotlin.Function1((kotlin.sequences.groupByTo.T,%20kotlin.sequences.groupByTo.K)))/destination&quot;&gt;目的地&lt;/a&gt;的地图。</target>
        </trans-unit>
        <trans-unit id="30431003356faec04f84a3163d4307b1d6bea476" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;group-by-to#kotlin.sequences%24groupByTo(kotlin.sequences.Sequence((kotlin.sequences.groupByTo.T)),%20kotlin.sequences.groupByTo.M,%20kotlin.Function1((kotlin.sequences.groupByTo.T,%20kotlin.sequences.groupByTo.K)),%20kotlin.Function1((kotlin.sequences.groupByTo.T,%20kotlin.sequences.groupByTo.V)))/destination&quot;&gt;destination&lt;/a&gt; map.</source>
          <target state="translated">该&lt;a href=&quot;group-by-to#kotlin.sequences%24groupByTo(kotlin.sequences.Sequence((kotlin.sequences.groupByTo.T)),%20kotlin.sequences.groupByTo.M,%20kotlin.Function1((kotlin.sequences.groupByTo.T,%20kotlin.sequences.groupByTo.K)),%20kotlin.Function1((kotlin.sequences.groupByTo.T,%20kotlin.sequences.groupByTo.V)))/destination&quot;&gt;目的地&lt;/a&gt;的地图。</target>
        </trans-unit>
        <trans-unit id="b8579547a2da389c681d511e85d24ffda687a3b9" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;http://www.github.com/kotlin/kotlinx.html&quot;&gt;kotlinx.html library&lt;/a&gt; provides the ability to generate DOM elements using statically typed HTML builders (and besides JavaScript, it is even available on the JVM target!) To use the library, we need to include the corresponding repository and dependency to our &lt;code&gt;build.gradle.kts&lt;/code&gt; file:</source>
          <target state="translated">该&lt;a href=&quot;http://www.github.com/kotlin/kotlinx.html&quot;&gt;kotlinx.html库&lt;/a&gt;提供了使用静态类型的HTML建设者产生DOM元素的能力（以及另外的JavaScript，它甚至在JVM上的目标可用！）要使用库，我们需要包括相应的信息库，并依赖于我们的 &lt;code&gt;build.gradle.kts&lt;/code&gt; 文件：</target>
        </trans-unit>
        <trans-unit id="c60c5bfb4e99d5eeb15d99db1ac41367610d72e8" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;http://www.github.com/kotlin/kotlinx.html&quot;&gt;kotlinx.html library&lt;/a&gt; provides the ability to generate DOM using statically typed HTML builders. The library is available when targeting the JVM as well as JavaScript. To use the library we need to include the corresponding dependency. In the case of Gradle this would be</source>
          <target state="translated">该&lt;a href=&quot;http://www.github.com/kotlin/kotlinx.html&quot;&gt;kotlinx.html库&lt;/a&gt;提供了使用静态类型的HTML建设者产生DOM的能力。针对JVM和JavaScript时，该库可用。要使用该库，我们需要包括相应的依赖项。在Gradle的情况下，这将是</target>
        </trans-unit>
        <trans-unit id="11ff0e8cd4fdb0fd27629f6a7e687a0b18080e1a" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;https://aalmiray.github.io/jsr-305/apidocs/javax/annotation/Nonnull.html&quot;&gt;&lt;code&gt;@Nonnull&lt;/code&gt;&lt;/a&gt; annotation defined in &lt;a href=&quot;https://jcp.org/en/jsr/detail?id=305&quot;&gt;JSR-305&lt;/a&gt; is supported for denoting nullability of Java types.</source>
          <target state="translated">支持&lt;a href=&quot;https://jcp.org/en/jsr/detail?id=305&quot;&gt;JSR-305中&lt;/a&gt;定义的&lt;a href=&quot;https://aalmiray.github.io/jsr-305/apidocs/javax/annotation/Nonnull.html&quot;&gt; &lt;code&gt;@Nonnull&lt;/code&gt; &lt;/a&gt;批注，以表示Java类型的可空性。</target>
        </trans-unit>
        <trans-unit id="a931a42af218b74ddfa5646228c068094e9e0035" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;https://developer.android.com/topic/libraries/data-binding/index.html&quot;&gt;Data Binding Library&lt;/a&gt; allows you to bind your application data to the layouts in a concise way.</source>
          <target state="translated">将&lt;a href=&quot;https://developer.android.com/topic/libraries/data-binding/index.html&quot;&gt;数据绑定库&lt;/a&gt;允许您将应用程序数据绑定到一个简洁的方式布局。</target>
        </trans-unit>
        <trans-unit id="a2b7c849d9b50965b814a88b2bb1cbbfb44ead82" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;https://en.wikipedia.org/wiki/Delegation_pattern&quot;&gt;Delegation pattern&lt;/a&gt; has proven to be a good alternative to implementation inheritance, and Kotlin supports it natively requiring zero boilerplate code. A class &lt;code&gt;Derived&lt;/code&gt; can implement an interface &lt;code&gt;Base&lt;/code&gt; by delegating all of its public members to a specified object:</source>
          <target state="translated">该&lt;a href=&quot;https://en.wikipedia.org/wiki/Delegation_pattern&quot;&gt;代表团模式&lt;/a&gt;已被证明是一个很好的选择，以实现继承，而科特林支持它本身不需要进行任何样板代码。 &lt;code&gt;Derived&lt;/code&gt; 类可以通过将其所有公共成员委托给指定的对象来实现 &lt;code&gt;Base&lt;/code&gt; 接口：</target>
        </trans-unit>
        <trans-unit id="89d682e482c895868a37ff624bc3eb18d04bf269" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;https://github.com/JetBrains/kotlin-native/blob/master/INTEROP.md&quot;&gt;C Interop documentation&lt;/a&gt; documentation covers more advanced scenarios of the interop</source>
          <target state="translated">该&lt;a href=&quot;https://github.com/JetBrains/kotlin-native/blob/master/INTEROP.md&quot;&gt;&amp;ccedil;互操作性文档&lt;/a&gt;文件覆盖互操作的更高级的方案</target>
        </trans-unit>
        <trans-unit id="1238852d879c2d710110f6784edd1cb93433787e" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;https://github.com/JetBrains/kotlin-native/blob/master/INTEROP.md&quot;&gt;C Interop documentation&lt;/a&gt; documentation covers more advanced scenarios of the interop.</source>
          <target state="translated">该&lt;a href=&quot;https://github.com/JetBrains/kotlin-native/blob/master/INTEROP.md&quot;&gt;&amp;ccedil;互操作性文档&lt;/a&gt;文件覆盖互操作的更高级的情景。</target>
        </trans-unit>
        <trans-unit id="ad07c99f0aec0609e4c5ce0e6d68e85b21cca8ad" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;https://github.com/ilmat192/kotlin-native-serialization-sample&quot;&gt;example project&lt;/a&gt; for details.</source>
          <target state="translated">有关&lt;a href=&quot;https://github.com/ilmat192/kotlin-native-serialization-sample&quot;&gt;示例项目&lt;/a&gt;的详细信息。</target>
        </trans-unit>
        <trans-unit id="ed3b8b8f640f1bc7c5c2be4b375d8acbd62a9be8" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines.channels/-receive-channel/on-receive.html&quot;&gt;onReceive&lt;/a&gt; clause in &lt;code&gt;select&lt;/code&gt; fails when the channel is closed causing the corresponding &lt;code&gt;select&lt;/code&gt; to throw an exception. We can use &lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines.channels/on-receive-or-null.html&quot;&gt;onReceiveOrNull&lt;/a&gt; clause to perform a specific action when the channel is closed. The following example also shows that &lt;code&gt;select&lt;/code&gt; is an expression that returns the result of its selected clause:</source>
          <target state="translated">当通道关闭时， &lt;code&gt;select&lt;/code&gt; 中的&lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines.channels/-receive-channel/on-receive.html&quot;&gt;onReceive&lt;/a&gt;子句失败，导致相应的 &lt;code&gt;select&lt;/code&gt; 引发异常。当通道关闭时，我们可以使用&lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines.channels/on-receive-or-null.html&quot;&gt;onReceiveOrNull&lt;/a&gt;子句执行特定的操作。以下示例还显示 &lt;code&gt;select&lt;/code&gt; 是一个返回其selected子句结果的表达式：</target>
        </trans-unit>
        <trans-unit id="e1ea544c54d470acdd2e4b26e7994a2782ee6c91" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines.flow/catch.html&quot;&gt;catch&lt;/a&gt; intermediate operator, honoring exception transparency, catches only upstream exceptions (that is an exception from all the operators above &lt;code&gt;catch&lt;/code&gt;, but not below it). If the block in &lt;code&gt;collect { ... }&lt;/code&gt; (placed below &lt;code&gt;catch&lt;/code&gt;) throws an exception then it escapes:</source>
          <target state="translated">遵循异常透明性的&lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines.flow/catch.html&quot;&gt;catch&lt;/a&gt;中间运算符仅捕获上游异常（这是 &lt;code&gt;catch&lt;/code&gt; 之上而不是其之下的所有运算符的异常）。如果 &lt;code&gt;collect { ... }&lt;/code&gt; 的块（放置在 &lt;code&gt;catch&lt;/code&gt; 下方）抛出异常，则它会逸出：</target>
        </trans-unit>
        <trans-unit id="04a54154f282527f51deac9433d1d87ac3f8758a" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines.flow/launch-in.html&quot;&gt;launchIn&lt;/a&gt; terminal operator comes in handy here. By replacing &lt;code&gt;collect&lt;/code&gt; with &lt;code&gt;launchIn&lt;/code&gt; we can launch a collection of the flow in a separate coroutine, so that execution of further code immediately continues:</source>
          <target state="translated">该&lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines.flow/launch-in.html&quot;&gt;launchIn&lt;/a&gt;码头运营商就派上用场了这里。通过用 &lt;code&gt;launchIn&lt;/code&gt; 替换 &lt;code&gt;collect&lt;/code&gt; ，我们可以在单独的协程中启动流的集合，以便立即继续执行其他代码：</target>
        </trans-unit>
        <trans-unit id="07edc2d6744fd7b7c26ec24ddbddd2605821ced8" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines.flow/on-completion.html&quot;&gt;onCompletion&lt;/a&gt; operator, unlike &lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines.flow/catch.html&quot;&gt;catch&lt;/a&gt;, does not handle the exception. As we can see from the above example code, the exception still flows downstream. It will be delivered to further &lt;code&gt;onCompletion&lt;/code&gt; operators and can be handled with a &lt;code&gt;catch&lt;/code&gt; operator.</source>
          <target state="translated">该&lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines.flow/on-completion.html&quot;&gt;onCompletion&lt;/a&gt;操作，不像&lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines.flow/catch.html&quot;&gt;抓&lt;/a&gt;，不处理异常。从上面的示例代码可以看出，异常仍然向下游流动。它将被交付给其他 &lt;code&gt;onCompletion&lt;/code&gt; 运算符，并且可以由 &lt;code&gt;catch&lt;/code&gt; 运算符处理。</target>
        </trans-unit>
        <trans-unit id="7b2b6bd69393d0995b1d531e59de6e1690650085" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/-dispatchers/-unconfined.html&quot;&gt;Dispatchers.Unconfined&lt;/a&gt; coroutine dispatcher starts a coroutine in the caller thread, but only until the first suspension point. After suspension it resumes the coroutine in the thread that is fully determined by the suspending function that was invoked. The unconfined dispatcher is appropriate for coroutines which neither consume CPU time nor update any shared data (like UI) confined to a specific thread.</source>
          <target state="translated">该&lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/-dispatchers/-unconfined.html&quot;&gt;Dispatchers.Unconfined&lt;/a&gt;协程调度员开始在调用线程协同程序，但直到第一个悬挂点。挂起后，它将在线程中恢复协程，该协程完全由所调用的挂起函数确定。无限制调度程序适用于既不占用CPU时间也不更新受限于特定线程的任何共享数据（如UI）的协程。</target>
        </trans-unit>
        <trans-unit id="567140fae1a9d885e6f93737a3b69b522b5149e8" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/-dispatchers/-unconfined.html&quot;&gt;Dispatchers.Unconfined&lt;/a&gt; coroutine dispatcher starts coroutine in the caller thread, but only until the first suspension point. After suspension it resumes in the thread that is fully determined by the suspending function that was invoked. Unconfined dispatcher is appropriate when coroutine does not consume CPU time nor updates any shared data (like UI) that is confined to a specific thread.</source>
          <target state="translated">该&lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/-dispatchers/-unconfined.html&quot;&gt;Dispatchers.Unconfined&lt;/a&gt;协程调度员开始协程在调用线程，但直到第一个悬挂点。挂起后，它会在由调用的挂起函数完全确定的线程中恢复。当协程既不占用CPU时间也不更新限于特定线程的任何共享数据（如UI）时，无限制调度程序是合适的。</target>
        </trans-unit>
        <trans-unit id="2c62562cc26b6319588208cc31aa39bb7081cc62" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/-supervisor-job.html&quot;&gt;SupervisorJob&lt;/a&gt; can be used for these purposes. It is similar to a regular &lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/-job.html&quot;&gt;Job&lt;/a&gt; with the only exception that cancellation is propagated only downwards. This can easily be demonstrated using the following example:</source>
          <target state="translated">该&lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/-supervisor-job.html&quot;&gt;SupervisorJob&lt;/a&gt;可以用于这些目的。它与常规&lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/-job.html&quot;&gt;Job&lt;/a&gt;相似，唯一的区别是取消仅向下传播。使用以下示例可以很容易地证明这一点：</target>
        </trans-unit>
        <trans-unit id="2fa4aa3d9338fab053ab6c6470a7bf2907d31359" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;https://kotlinlang.org/api/latest/kotlin.test/index.html&quot;&gt;&lt;code&gt;kotlin.test&lt;/code&gt; API&lt;/a&gt; is available for multiplatform tests. When you &lt;a href=&quot;mpp-create-lib&quot;&gt;create a multiplatform project&lt;/a&gt;, the Project Wizard automatically adds test dependencies to common and platform-specific source sets.</source>
          <target state="translated">该&lt;a href=&quot;https://kotlinlang.org/api/latest/kotlin.test/index.html&quot;&gt; &lt;code&gt;kotlin.test&lt;/code&gt; API&lt;/a&gt;可用于多平台的测试。当你&lt;a href=&quot;mpp-create-lib&quot;&gt;创建一个多项目&lt;/a&gt;，项目向导会自动添加测试依赖于通用和特定于平台的源集。</target>
        </trans-unit>
        <trans-unit id="63c0508b2176acb0adebd9fcfe4c34e271e74623" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;https://kotlinlang.org/api/latest/kotlin.test/index.html&quot;&gt;&lt;code&gt;kotlin.test&lt;/code&gt; API&lt;/a&gt; is available for multiplatform tests. When you &lt;a href=&quot;mpp-create-lib&quot;&gt;create a multiplatform project&lt;/a&gt;, the Project Wizard automatically adds test dependencies to common and platform-specific source sets. If you didn&amp;rsquo;t use the Project Wizard to create your project, you can &lt;a href=&quot;using-gradle#set-dependencies-on-test-libraries&quot;&gt;add the dependencies manually&lt;/a&gt;.</source>
          <target state="translated">该&lt;a href=&quot;https://kotlinlang.org/api/latest/kotlin.test/index.html&quot;&gt; &lt;code&gt;kotlin.test&lt;/code&gt; API&lt;/a&gt;可用于多平台的测试。当你&lt;a href=&quot;mpp-create-lib&quot;&gt;创建一个多项目&lt;/a&gt;，项目向导会自动添加测试依赖于通用和特定于平台的源集。如果您没有使用项目向导来创建项目，则可以&lt;a href=&quot;using-gradle#set-dependencies-on-test-libraries&quot;&gt;手动添加依赖项&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="fa80881a041c6af7b81990bc6442fd43157648c6" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;https://kotlinlang.org/api/latest/kotlin.test/index.html&quot;&gt;&lt;code&gt;kotlin.test&lt;/code&gt; API&lt;/a&gt; is available for testing different Kotlin projects.</source>
          <target state="translated">该&lt;a href=&quot;https://kotlinlang.org/api/latest/kotlin.test/index.html&quot;&gt; &lt;code&gt;kotlin.test&lt;/code&gt; API&lt;/a&gt;可用于测试不同的科特林项目。</target>
        </trans-unit>
        <trans-unit id="97cb445124dce985503ca787c74149658f56ba41" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;https://kotlinlang.org/api/latest/kotlin.test/index.html&quot;&gt;&lt;code&gt;kotlin.test&lt;/code&gt; API&lt;/a&gt; is availble for multiplatform tests. Add the &lt;code&gt;kotlin-test-common&lt;/code&gt; and &lt;code&gt;kotlin-test-annotations-common&lt;/code&gt; dependencies to &lt;code&gt;commonTest&lt;/code&gt; to use the assertion functions like &lt;code&gt;kotlin.test.assertTrue(...)&lt;/code&gt;</source>
          <target state="translated">该&lt;a href=&quot;https://kotlinlang.org/api/latest/kotlin.test/index.html&quot;&gt; &lt;code&gt;kotlin.test&lt;/code&gt; API&lt;/a&gt;是availble的多平台测试。将 &lt;code&gt;kotlin-test-common&lt;/code&gt; 和 &lt;code&gt;kotlin-test-annotations-common&lt;/code&gt; 依赖项添加到 &lt;code&gt;commonTest&lt;/code&gt; 以使用诸如 &lt;code&gt;kotlin.test.assertTrue(...)&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="bf9a347ca7004344d61319e9e4d5bb8c2e75274c" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;https://ktor.io/&quot;&gt;Ktor framework&lt;/a&gt; is suitable for building asynchronous servers and clients in connected systems.</source>
          <target state="translated">所述&lt;a href=&quot;https://ktor.io/&quot;&gt;Ktor框架&lt;/a&gt;是适用于连接系统构建异步服务器和客户端。</target>
        </trans-unit>
        <trans-unit id="bd60e1891ba1036ecf9e26ec057707e455f43ca4" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;https://www.github.com/kotlin/kotlinx.html&quot;&gt;kotlinx.html library&lt;/a&gt; provides the ability to generate DOM elements using statically typed HTML builders (and besides JavaScript, it is even available on the JVM target!) To use the library, we need to include the corresponding repository and dependency to our &lt;code&gt;build.gradle.kts&lt;/code&gt; file:</source>
          <target state="translated">该&lt;a href=&quot;https://www.github.com/kotlin/kotlinx.html&quot;&gt;kotlinx.html库&lt;/a&gt;提供了使用静态类型的HTML建设者产生DOM元素的能力（以及另外的JavaScript，它甚至在JVM上的目标可用！）要使用库，我们需要包括相应的信息库，并依赖于我们的 &lt;code&gt;build.gradle.kts&lt;/code&gt; 文件：</target>
        </trans-unit>
        <trans-unit id="0194a3aa4b12c9468ece4f08b6ba21815b0e08f0" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;index&quot;&gt;CPointed&lt;/a&gt; without any specified interpretation.</source>
          <target state="translated">没有指定解释的&lt;a href=&quot;index&quot;&gt;CPointed&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="5516127ff85b6c7f18df858d84a44a3f3a5c0417" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;index&quot;&gt;DeepRecursiveFunction&lt;/a&gt; takes one parameter of type &lt;a href=&quot;index#T&quot;&gt;T&lt;/a&gt; and returns a result of type &lt;a href=&quot;index#R&quot;&gt;R&lt;/a&gt;. The block of code defines the body of a recursive function. In this block &lt;a href=&quot;../-deep-recursive-scope/call-recursive&quot;&gt;callRecursive&lt;/a&gt; function can be used to make a recursive call to the declared function. Other instances of &lt;a href=&quot;index&quot;&gt;DeepRecursiveFunction&lt;/a&gt; can be called in this scope with &lt;code&gt;callRecursive&lt;/code&gt; extension, too.</source>
          <target state="translated">所述&lt;a href=&quot;index&quot;&gt;DeepRecursiveFunction&lt;/a&gt;采用类型的一个参数&lt;a href=&quot;index#T&quot;&gt;Ť&lt;/a&gt;并返回类型的结果&lt;a href=&quot;index#R&quot;&gt;- [R &lt;/a&gt;。代码块定义了递归函数的主体。在此块中，可以使用&lt;a href=&quot;../-deep-recursive-scope/call-recursive&quot;&gt;callRecursive&lt;/a&gt;函数对声明的函数进行递归调用。&lt;a href=&quot;index&quot;&gt;DeepRecursiveFunction的&lt;/a&gt;其他实例也可以在此范围内使用 &lt;code&gt;callRecursive&lt;/code&gt; 扩展进行调用。</target>
        </trans-unit>
        <trans-unit id="ba1a7f3bddcefc94310813b31ca6383df0bda5ae" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;js-ir-compiler&quot;&gt;IR backend for Kotlin/JS&lt;/a&gt;, which currently has &lt;a href=&quot;evolution/components-stability&quot;&gt;Alpha&lt;/a&gt; stability, provides some new functionality specific to the Kotlin/JS target which is focused around the generated code size through dead code elimination, and improved interoperation with JavaScript and TypeScript, among others.</source>
          <target state="translated">目前具有&lt;a href=&quot;evolution/components-stability&quot;&gt;Alpha&lt;/a&gt;稳定性的&lt;a href=&quot;js-ir-compiler&quot;&gt;Kotlin / JS&lt;/a&gt;的IR后端提供了一些特定于Kotlin / JS目标的新功能，该功能主要通过消除无效代码以及改善与JavaScript和TypeScript的互操作性来围绕生成的代码大小。</target>
        </trans-unit>
        <trans-unit id="e2ef6f826701c72898d6d25192a84da10d181630" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;js-ir-compiler&quot;&gt;new Kotlin/JS IR compiler&lt;/a&gt; (currently with &lt;a href=&quot;evolution/components-stability&quot;&gt;Alpha&lt;/a&gt; stability) comes with a number of improvements over the current default compiler. For example, it improves the size of generated executables via dead code elimination and makes it smoother to interoperate with the JavaScript ecosystem and its tooling. By generating TypeScript declaration files (d.ts) from Kotlin code, the new compiler makes it easier to create &amp;ldquo;hybrid&amp;rdquo; applications that mix TypeScript and Kotlin code, and leverage code-sharing functionality using Kotlin Multiplatform.</source>
          <target state="translated">在&lt;a href=&quot;js-ir-compiler&quot;&gt;新的科特林/ JS IR编译器&lt;/a&gt;（目前&lt;a href=&quot;evolution/components-stability&quot;&gt;阿尔法&lt;/a&gt;稳定性）配备了许多优于当前默认的编译器的改进。例如，它通过消除死代码来提高生成的可执行文件的大小，并使与JavaScript生态系统及其工具的互操作更加流畅。通过从Kotlin代码生成TypeScript声明文件（d.ts），新的编译器使创建混合TypeScript和Kotlin代码的&amp;ldquo;混合&amp;rdquo;应用程序变得更加容易，并利用Kotlin Multiplatform利用代码共享功能。</target>
        </trans-unit>
        <trans-unit id="f1f6321a990fb305c59adcbabf8e3830cf1b87ed" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;lazy#kotlin%24lazy%28kotlin.Any%2C+kotlin.Function0%28%28kotlin.lazy.T%29%29%29%2Flock&quot;&gt;lock&lt;/a&gt; parameter is ignored.</source>
          <target state="translated">该&lt;a href=&quot;lazy#kotlin%24lazy%28kotlin.Any%2C+kotlin.Function0%28%28kotlin.lazy.T%29%29%29%2Flock&quot;&gt;锁&lt;/a&gt;参数被忽略。</target>
        </trans-unit>
        <trans-unit id="ad29d28adce666b3b0aa95e3d086ef2150c731fc" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;lazy#kotlin%24lazy%28kotlin.LazyThreadSafetyMode%2C+kotlin.Function0%28%28kotlin.lazy.T%29%29%29%2Fmode&quot;&gt;mode&lt;/a&gt; parameter is ignored.</source>
          <target state="translated">该&lt;a href=&quot;lazy#kotlin%24lazy%28kotlin.LazyThreadSafetyMode%2C+kotlin.Function0%28%28kotlin.lazy.T%29%29%29%2Fmode&quot;&gt;模式&lt;/a&gt;参数被忽略。</target>
        </trans-unit>
        <trans-unit id="65e44082e85c986aa2e19f4034c1939c25816182" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;lazy#kotlin%24lazy(kotlin.Any?,%20kotlin.Function0((kotlin.lazy.T)))/lock&quot;&gt;lock&lt;/a&gt; parameter is ignored.</source>
          <target state="translated">该&lt;a href=&quot;lazy#kotlin%24lazy(kotlin.Any?,%20kotlin.Function0((kotlin.lazy.T)))/lock&quot;&gt;锁&lt;/a&gt;参数被忽略。</target>
        </trans-unit>
        <trans-unit id="acac99fbefec8adf034ebe09ae88ed968b1bfb59" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;lazy#kotlin%24lazy(kotlin.LazyThreadSafetyMode,%20kotlin.Function0((kotlin.lazy.T)))/mode&quot;&gt;mode&lt;/a&gt; parameter is ignored.</source>
          <target state="translated">该&lt;a href=&quot;lazy#kotlin%24lazy(kotlin.LazyThreadSafetyMode,%20kotlin.Function0((kotlin.lazy.T)))/mode&quot;&gt;模式&lt;/a&gt;参数被忽略。</target>
        </trans-unit>
        <trans-unit id="65f4a08157a599a0434e41b121c5f82c757d8345" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;minus#kotlin.collections%24minus%28kotlin.collections.Iterable%28%28kotlin.collections.minus.T%29%29%2C+kotlin.Array%28%28kotlin.collections.minus.T%29%29%29%2Felements&quot;&gt;elements&lt;/a&gt; array may be converted to a &lt;a href=&quot;-hash-set/index#kotlin.collections.HashSet&quot;&gt;HashSet&lt;/a&gt; to speed up the operation, thus the elements are required to have a correct and stable implementation of &lt;code&gt;hashCode()&lt;/code&gt; that doesn't change between successive invocations.</source>
          <target state="translated">该&lt;a href=&quot;minus#kotlin.collections%24minus%28kotlin.collections.Iterable%28%28kotlin.collections.minus.T%29%29%2C+kotlin.Array%28%28kotlin.collections.minus.T%29%29%29%2Felements&quot;&gt;元件&lt;/a&gt;阵列可以被转换为一个&lt;a href=&quot;-hash-set/index#kotlin.collections.HashSet&quot;&gt;HashSet的&lt;/a&gt;加快操作，从而这些元件需要具有正确和稳定执行 &lt;code&gt;hashCode()&lt;/code&gt; 不连续调用之间发生变化。</target>
        </trans-unit>
        <trans-unit id="e24be1e2b6e9366f0d91d73c1522fb4cc61453ad" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;minus#kotlin.collections%24minus%28kotlin.collections.Iterable%28%28kotlin.collections.minus.T%29%29%2C+kotlin.collections.Iterable%28%28kotlin.collections.minus.T%29%29%29%2Felements&quot;&gt;elements&lt;/a&gt; collection may be converted to a &lt;a href=&quot;-hash-set/index#kotlin.collections.HashSet&quot;&gt;HashSet&lt;/a&gt; to speed up the operation, thus the elements are required to have a correct and stable implementation of &lt;code&gt;hashCode()&lt;/code&gt; that doesn't change between successive invocations.</source>
          <target state="translated">所述&lt;a href=&quot;minus#kotlin.collections%24minus%28kotlin.collections.Iterable%28%28kotlin.collections.minus.T%29%29%2C+kotlin.collections.Iterable%28%28kotlin.collections.minus.T%29%29%29%2Felements&quot;&gt;元件&lt;/a&gt;集合可被转换成&lt;a href=&quot;-hash-set/index#kotlin.collections.HashSet&quot;&gt;的HashSet&lt;/a&gt;加快操作，从而这些元件需要具有正确和稳定执行 &lt;code&gt;hashCode()&lt;/code&gt; 不连续调用之间发生变化。</target>
        </trans-unit>
        <trans-unit id="88eac69a24417f0a5acd408bdb0ac168d5ab84f8" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;minus#kotlin.collections%24minus%28kotlin.collections.Iterable%28%28kotlin.collections.minus.T%29%29%2C+kotlin.sequences.Sequence%28%28kotlin.collections.minus.T%29%29%29%2Felements&quot;&gt;elements&lt;/a&gt; sequence may be converted to a &lt;a href=&quot;-hash-set/index#kotlin.collections.HashSet&quot;&gt;HashSet&lt;/a&gt; to speed up the operation, thus the elements are required to have a correct and stable implementation of &lt;code&gt;hashCode()&lt;/code&gt; that doesn't change between successive invocations.</source>
          <target state="translated">所述&lt;a href=&quot;minus#kotlin.collections%24minus%28kotlin.collections.Iterable%28%28kotlin.collections.minus.T%29%29%2C+kotlin.sequences.Sequence%28%28kotlin.collections.minus.T%29%29%29%2Felements&quot;&gt;元件&lt;/a&gt;序列可以被转换为一个&lt;a href=&quot;-hash-set/index#kotlin.collections.HashSet&quot;&gt;HashSet的&lt;/a&gt;加快操作，从而这些元件需要具有正确和稳定执行 &lt;code&gt;hashCode()&lt;/code&gt; 不连续调用之间发生变化。</target>
        </trans-unit>
        <trans-unit id="4fdc1e3b9cc58343e5c4eb08ebf24ea334f18ce1" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;minus#kotlin.collections%24minus%28kotlin.collections.Set%28%28kotlin.collections.minus.T%29%29%2C+kotlin.Array%28%28kotlin.collections.minus.T%29%29%29%2Felements&quot;&gt;elements&lt;/a&gt; array may be converted to a &lt;a href=&quot;-hash-set/index#kotlin.collections.HashSet&quot;&gt;HashSet&lt;/a&gt; to speed up the operation, thus the elements are required to have a correct and stable implementation of &lt;code&gt;hashCode()&lt;/code&gt; that doesn't change between successive invocations.</source>
          <target state="translated">该&lt;a href=&quot;minus#kotlin.collections%24minus%28kotlin.collections.Set%28%28kotlin.collections.minus.T%29%29%2C+kotlin.Array%28%28kotlin.collections.minus.T%29%29%29%2Felements&quot;&gt;元件&lt;/a&gt;阵列可以被转换为一个&lt;a href=&quot;-hash-set/index#kotlin.collections.HashSet&quot;&gt;HashSet的&lt;/a&gt;加快操作，从而这些元件需要具有正确和稳定执行 &lt;code&gt;hashCode()&lt;/code&gt; 不连续调用之间发生变化。</target>
        </trans-unit>
        <trans-unit id="00e3673225dc7616b276e346639c286afc0812ee" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;minus#kotlin.collections%24minus%28kotlin.collections.Set%28%28kotlin.collections.minus.T%29%29%2C+kotlin.collections.Iterable%28%28kotlin.collections.minus.T%29%29%29%2Felements&quot;&gt;elements&lt;/a&gt; collection may be converted to a &lt;a href=&quot;-hash-set/index#kotlin.collections.HashSet&quot;&gt;HashSet&lt;/a&gt; to speed up the operation, thus the elements are required to have a correct and stable implementation of &lt;code&gt;hashCode()&lt;/code&gt; that doesn't change between successive invocations.</source>
          <target state="translated">所述&lt;a href=&quot;minus#kotlin.collections%24minus%28kotlin.collections.Set%28%28kotlin.collections.minus.T%29%29%2C+kotlin.collections.Iterable%28%28kotlin.collections.minus.T%29%29%29%2Felements&quot;&gt;元件&lt;/a&gt;集合可被转换成&lt;a href=&quot;-hash-set/index#kotlin.collections.HashSet&quot;&gt;的HashSet&lt;/a&gt;加快操作，从而这些元件需要具有正确和稳定执行 &lt;code&gt;hashCode()&lt;/code&gt; 不连续调用之间发生变化。</target>
        </trans-unit>
        <trans-unit id="9bfb6c345d49b612f19ff9859dc63476feb3110d" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;minus#kotlin.collections%24minus%28kotlin.collections.Set%28%28kotlin.collections.minus.T%29%29%2C+kotlin.sequences.Sequence%28%28kotlin.collections.minus.T%29%29%29%2Felements&quot;&gt;elements&lt;/a&gt; sequence may be converted to a &lt;a href=&quot;-hash-set/index#kotlin.collections.HashSet&quot;&gt;HashSet&lt;/a&gt; to speed up the operation, thus the elements are required to have a correct and stable implementation of &lt;code&gt;hashCode()&lt;/code&gt; that doesn't change between successive invocations.</source>
          <target state="translated">所述&lt;a href=&quot;minus#kotlin.collections%24minus%28kotlin.collections.Set%28%28kotlin.collections.minus.T%29%29%2C+kotlin.sequences.Sequence%28%28kotlin.collections.minus.T%29%29%29%2Felements&quot;&gt;元件&lt;/a&gt;序列可以被转换为一个&lt;a href=&quot;-hash-set/index#kotlin.collections.HashSet&quot;&gt;HashSet的&lt;/a&gt;加快操作，从而这些元件需要具有正确和稳定执行 &lt;code&gt;hashCode()&lt;/code&gt; 不连续调用之间发生变化。</target>
        </trans-unit>
        <trans-unit id="eef0f46e8880f391ca0f135eafed80d7953873e2" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;minus#kotlin.collections%24minus(kotlin.collections.Iterable((kotlin.collections.minus.T)),%20kotlin.Array((kotlin.collections.minus.T)))/elements&quot;&gt;elements&lt;/a&gt; array may be converted to a &lt;a href=&quot;-hash-set/index#kotlin.collections.HashSet&quot;&gt;HashSet&lt;/a&gt; to speed up the operation, thus the elements are required to have a correct and stable implementation of &lt;code&gt;hashCode()&lt;/code&gt; that doesn't change between successive invocations.</source>
          <target state="translated">该&lt;a href=&quot;minus#kotlin.collections%24minus(kotlin.collections.Iterable((kotlin.collections.minus.T)),%20kotlin.Array((kotlin.collections.minus.T)))/elements&quot;&gt;元件&lt;/a&gt;阵列可以被转换为一个&lt;a href=&quot;-hash-set/index#kotlin.collections.HashSet&quot;&gt;HashSet的&lt;/a&gt;加快操作，从而这些元件需要具有正确和稳定执行 &lt;code&gt;hashCode()&lt;/code&gt; 不连续调用之间发生变化。</target>
        </trans-unit>
        <trans-unit id="a9357b4fe4ae7edffd3a4348a18308c871d282bd" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;minus#kotlin.collections%24minus(kotlin.collections.Iterable((kotlin.collections.minus.T)),%20kotlin.collections.Iterable((kotlin.collections.minus.T)))/elements&quot;&gt;elements&lt;/a&gt; collection may be converted to a &lt;a href=&quot;-hash-set/index#kotlin.collections.HashSet&quot;&gt;HashSet&lt;/a&gt; to speed up the operation, thus the elements are required to have a correct and stable implementation of &lt;code&gt;hashCode()&lt;/code&gt; that doesn't change between successive invocations.</source>
          <target state="translated">所述&lt;a href=&quot;minus#kotlin.collections%24minus(kotlin.collections.Iterable((kotlin.collections.minus.T)),%20kotlin.collections.Iterable((kotlin.collections.minus.T)))/elements&quot;&gt;元件&lt;/a&gt;集合可被转换成&lt;a href=&quot;-hash-set/index#kotlin.collections.HashSet&quot;&gt;的HashSet&lt;/a&gt;加快操作，从而这些元件需要具有正确和稳定执行 &lt;code&gt;hashCode()&lt;/code&gt; 不连续调用之间发生变化。</target>
        </trans-unit>
        <trans-unit id="2ef34bb84f8efe0f11198308dcadc0a798d086c0" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;minus#kotlin.collections%24minus(kotlin.collections.Iterable((kotlin.collections.minus.T)),%20kotlin.sequences.Sequence((kotlin.collections.minus.T)))/elements&quot;&gt;elements&lt;/a&gt; sequence may be converted to a &lt;a href=&quot;-hash-set/index#kotlin.collections.HashSet&quot;&gt;HashSet&lt;/a&gt; to speed up the operation, thus the elements are required to have a correct and stable implementation of &lt;code&gt;hashCode()&lt;/code&gt; that doesn't change between successive invocations.</source>
          <target state="translated">所述&lt;a href=&quot;minus#kotlin.collections%24minus(kotlin.collections.Iterable((kotlin.collections.minus.T)),%20kotlin.sequences.Sequence((kotlin.collections.minus.T)))/elements&quot;&gt;元件&lt;/a&gt;序列可以被转换为一个&lt;a href=&quot;-hash-set/index#kotlin.collections.HashSet&quot;&gt;HashSet的&lt;/a&gt;加快操作，从而这些元件需要具有正确和稳定执行 &lt;code&gt;hashCode()&lt;/code&gt; 不连续调用之间发生变化。</target>
        </trans-unit>
        <trans-unit id="dfb66f4d60f9919dee9be2f66e79310c49bfdeea" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;minus#kotlin.collections%24minus(kotlin.collections.Set((kotlin.collections.minus.T)),%20kotlin.Array((kotlin.collections.minus.T)))/elements&quot;&gt;elements&lt;/a&gt; array may be converted to a &lt;a href=&quot;-hash-set/index#kotlin.collections.HashSet&quot;&gt;HashSet&lt;/a&gt; to speed up the operation, thus the elements are required to have a correct and stable implementation of &lt;code&gt;hashCode()&lt;/code&gt; that doesn't change between successive invocations.</source>
          <target state="translated">该&lt;a href=&quot;minus#kotlin.collections%24minus(kotlin.collections.Set((kotlin.collections.minus.T)),%20kotlin.Array((kotlin.collections.minus.T)))/elements&quot;&gt;元件&lt;/a&gt;阵列可以被转换为一个&lt;a href=&quot;-hash-set/index#kotlin.collections.HashSet&quot;&gt;HashSet的&lt;/a&gt;加快操作，从而这些元件需要具有正确和稳定执行 &lt;code&gt;hashCode()&lt;/code&gt; 不连续调用之间发生变化。</target>
        </trans-unit>
        <trans-unit id="c2358033aedf09646b3978114c88919df8cce73a" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;minus#kotlin.collections%24minus(kotlin.collections.Set((kotlin.collections.minus.T)),%20kotlin.collections.Iterable((kotlin.collections.minus.T)))/elements&quot;&gt;elements&lt;/a&gt; collection may be converted to a &lt;a href=&quot;-hash-set/index#kotlin.collections.HashSet&quot;&gt;HashSet&lt;/a&gt; to speed up the operation, thus the elements are required to have a correct and stable implementation of &lt;code&gt;hashCode()&lt;/code&gt; that doesn't change between successive invocations.</source>
          <target state="translated">所述&lt;a href=&quot;minus#kotlin.collections%24minus(kotlin.collections.Set((kotlin.collections.minus.T)),%20kotlin.collections.Iterable((kotlin.collections.minus.T)))/elements&quot;&gt;元件&lt;/a&gt;集合可被转换成&lt;a href=&quot;-hash-set/index#kotlin.collections.HashSet&quot;&gt;的HashSet&lt;/a&gt;加快操作，从而这些元件需要具有正确和稳定执行 &lt;code&gt;hashCode()&lt;/code&gt; 不连续调用之间发生变化。</target>
        </trans-unit>
        <trans-unit id="422371d5491a08f23ef3ac6338e4abe49c999f7b" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;minus#kotlin.collections%24minus(kotlin.collections.Set((kotlin.collections.minus.T)),%20kotlin.sequences.Sequence((kotlin.collections.minus.T)))/elements&quot;&gt;elements&lt;/a&gt; sequence may be converted to a &lt;a href=&quot;-hash-set/index#kotlin.collections.HashSet&quot;&gt;HashSet&lt;/a&gt; to speed up the operation, thus the elements are required to have a correct and stable implementation of &lt;code&gt;hashCode()&lt;/code&gt; that doesn't change between successive invocations.</source>
          <target state="translated">所述&lt;a href=&quot;minus#kotlin.collections%24minus(kotlin.collections.Set((kotlin.collections.minus.T)),%20kotlin.sequences.Sequence((kotlin.collections.minus.T)))/elements&quot;&gt;元件&lt;/a&gt;序列可以被转换为一个&lt;a href=&quot;-hash-set/index#kotlin.collections.HashSet&quot;&gt;HashSet的&lt;/a&gt;加快操作，从而这些元件需要具有正确和稳定执行 &lt;code&gt;hashCode()&lt;/code&gt; 不连续调用之间发生变化。</target>
        </trans-unit>
        <trans-unit id="150ad09de77efcf5d7cfbcf006b9f6b89c68e678" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;minus#kotlin.sequences%24minus%28kotlin.sequences.Sequence%28%28kotlin.sequences.minus.T%29%29%2C+kotlin.Array%28%28kotlin.sequences.minus.T%29%29%29%2Felements&quot;&gt;elements&lt;/a&gt; array may be converted to a &lt;a href=&quot;../kotlin.collections/-hash-set/index#kotlin.collections.HashSet&quot;&gt;HashSet&lt;/a&gt; to speed up the operation, thus the elements are required to have a correct and stable implementation of &lt;code&gt;hashCode()&lt;/code&gt; that doesn't change between successive invocations.</source>
          <target state="translated">该&lt;a href=&quot;minus#kotlin.sequences%24minus%28kotlin.sequences.Sequence%28%28kotlin.sequences.minus.T%29%29%2C+kotlin.Array%28%28kotlin.sequences.minus.T%29%29%29%2Felements&quot;&gt;元件&lt;/a&gt;阵列可以被转换为一个&lt;a href=&quot;../kotlin.collections/-hash-set/index#kotlin.collections.HashSet&quot;&gt;HashSet的&lt;/a&gt;加快操作，从而这些元件需要具有正确和稳定执行 &lt;code&gt;hashCode()&lt;/code&gt; 不连续调用之间发生变化。</target>
        </trans-unit>
        <trans-unit id="16822a8d7e6589a06d4a74f594278b5199a4c0ac" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;minus#kotlin.sequences%24minus%28kotlin.sequences.Sequence%28%28kotlin.sequences.minus.T%29%29%2C+kotlin.collections.Iterable%28%28kotlin.sequences.minus.T%29%29%29%2Felements&quot;&gt;elements&lt;/a&gt; collection may be converted to a &lt;a href=&quot;../kotlin.collections/-hash-set/index#kotlin.collections.HashSet&quot;&gt;HashSet&lt;/a&gt; to speed up the operation, thus the elements are required to have a correct and stable implementation of &lt;code&gt;hashCode()&lt;/code&gt; that doesn't change between successive invocations.</source>
          <target state="translated">所述&lt;a href=&quot;minus#kotlin.sequences%24minus%28kotlin.sequences.Sequence%28%28kotlin.sequences.minus.T%29%29%2C+kotlin.collections.Iterable%28%28kotlin.sequences.minus.T%29%29%29%2Felements&quot;&gt;元件&lt;/a&gt;集合可被转换成&lt;a href=&quot;../kotlin.collections/-hash-set/index#kotlin.collections.HashSet&quot;&gt;的HashSet&lt;/a&gt;加快操作，从而这些元件需要具有正确和稳定执行 &lt;code&gt;hashCode()&lt;/code&gt; 不连续调用之间发生变化。</target>
        </trans-unit>
        <trans-unit id="7730285cb3f44afdb3b127e9800e2d48488fce25" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;minus#kotlin.sequences%24minus%28kotlin.sequences.Sequence%28%28kotlin.sequences.minus.T%29%29%2C+kotlin.sequences.Sequence%28%28kotlin.sequences.minus.T%29%29%29%2Felements&quot;&gt;elements&lt;/a&gt; sequence may be converted to a &lt;a href=&quot;../kotlin.collections/-hash-set/index#kotlin.collections.HashSet&quot;&gt;HashSet&lt;/a&gt; to speed up the operation, thus the elements are required to have a correct and stable implementation of &lt;code&gt;hashCode()&lt;/code&gt; that doesn't change between successive invocations.</source>
          <target state="translated">所述&lt;a href=&quot;minus#kotlin.sequences%24minus%28kotlin.sequences.Sequence%28%28kotlin.sequences.minus.T%29%29%2C+kotlin.sequences.Sequence%28%28kotlin.sequences.minus.T%29%29%29%2Felements&quot;&gt;元件&lt;/a&gt;序列可以被转换为一个&lt;a href=&quot;../kotlin.collections/-hash-set/index#kotlin.collections.HashSet&quot;&gt;HashSet的&lt;/a&gt;加快操作，从而这些元件需要具有正确和稳定执行 &lt;code&gt;hashCode()&lt;/code&gt; 不连续调用之间发生变化。</target>
        </trans-unit>
        <trans-unit id="62d283a260d21c033d8ae6f886e9418e4ce557c2" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;minus#kotlin.sequences%24minus(kotlin.sequences.Sequence((kotlin.sequences.minus.T)),%20kotlin.Array((kotlin.sequences.minus.T)))/elements&quot;&gt;elements&lt;/a&gt; array may be converted to a &lt;a href=&quot;../kotlin.collections/-hash-set/index#kotlin.collections.HashSet&quot;&gt;HashSet&lt;/a&gt; to speed up the operation, thus the elements are required to have a correct and stable implementation of &lt;code&gt;hashCode()&lt;/code&gt; that doesn't change between successive invocations.</source>
          <target state="translated">该&lt;a href=&quot;minus#kotlin.sequences%24minus(kotlin.sequences.Sequence((kotlin.sequences.minus.T)),%20kotlin.Array((kotlin.sequences.minus.T)))/elements&quot;&gt;元件&lt;/a&gt;阵列可以被转换为一个&lt;a href=&quot;../kotlin.collections/-hash-set/index#kotlin.collections.HashSet&quot;&gt;HashSet的&lt;/a&gt;加快操作，从而这些元件需要具有正确和稳定执行 &lt;code&gt;hashCode()&lt;/code&gt; 不连续调用之间发生变化。</target>
        </trans-unit>
        <trans-unit id="c922bbe4f99fe85f64acb6a4c239e5a6014544af" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;minus#kotlin.sequences%24minus(kotlin.sequences.Sequence((kotlin.sequences.minus.T)),%20kotlin.collections.Iterable((kotlin.sequences.minus.T)))/elements&quot;&gt;elements&lt;/a&gt; collection may be converted to a &lt;a href=&quot;../kotlin.collections/-hash-set/index#kotlin.collections.HashSet&quot;&gt;HashSet&lt;/a&gt; to speed up the operation, thus the elements are required to have a correct and stable implementation of &lt;code&gt;hashCode()&lt;/code&gt; that doesn't change between successive invocations.</source>
          <target state="translated">所述&lt;a href=&quot;minus#kotlin.sequences%24minus(kotlin.sequences.Sequence((kotlin.sequences.minus.T)),%20kotlin.collections.Iterable((kotlin.sequences.minus.T)))/elements&quot;&gt;元件&lt;/a&gt;集合可被转换成&lt;a href=&quot;../kotlin.collections/-hash-set/index#kotlin.collections.HashSet&quot;&gt;的HashSet&lt;/a&gt;加快操作，从而这些元件需要具有正确和稳定执行 &lt;code&gt;hashCode()&lt;/code&gt; 不连续调用之间发生变化。</target>
        </trans-unit>
        <trans-unit id="0fac9986e030aa348ad259c660503117d0363441" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;minus#kotlin.sequences%24minus(kotlin.sequences.Sequence((kotlin.sequences.minus.T)),%20kotlin.sequences.Sequence((kotlin.sequences.minus.T)))/elements&quot;&gt;elements&lt;/a&gt; sequence may be converted to a &lt;a href=&quot;../kotlin.collections/-hash-set/index#kotlin.collections.HashSet&quot;&gt;HashSet&lt;/a&gt; to speed up the operation, thus the elements are required to have a correct and stable implementation of &lt;code&gt;hashCode()&lt;/code&gt; that doesn't change between successive invocations.</source>
          <target state="translated">所述&lt;a href=&quot;minus#kotlin.sequences%24minus(kotlin.sequences.Sequence((kotlin.sequences.minus.T)),%20kotlin.sequences.Sequence((kotlin.sequences.minus.T)))/elements&quot;&gt;元件&lt;/a&gt;序列可以被转换为一个&lt;a href=&quot;../kotlin.collections/-hash-set/index#kotlin.collections.HashSet&quot;&gt;HashSet的&lt;/a&gt;加快操作，从而这些元件需要具有正确和稳定执行 &lt;code&gt;hashCode()&lt;/code&gt; 不连续调用之间发生变化。</target>
        </trans-unit>
        <trans-unit id="da75dd93220ce18b06da9e4f3b66704a6a1b2c1c" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;mpp-dsl-reference#language-settings&quot;&gt;language settings&lt;/a&gt; of &lt;code&gt;jvmMain&lt;/code&gt; and &lt;code&gt;commonMain&lt;/code&gt; should be consistent.</source>
          <target state="translated">该&lt;a href=&quot;mpp-dsl-reference#language-settings&quot;&gt;语言设置&lt;/a&gt;的 &lt;code&gt;jvmMain&lt;/code&gt; 和 &lt;code&gt;commonMain&lt;/code&gt; 应该是一致的。</target>
        </trans-unit>
        <trans-unit id="6783ca375fba676e08fc3ee05e0ed3a5ef692c42" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;range#kotlin.text.MatchGroup%24range&quot;&gt;range&lt;/a&gt; property is available on JVM only.</source>
          <target state="translated">该&lt;a href=&quot;range#kotlin.text.MatchGroup%24range&quot;&gt;范围&lt;/a&gt;属性可用只JVM。</target>
        </trans-unit>
        <trans-unit id="42745a5a4bae1983528b804b1ebebed6b02c4c55" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;replace#kotlin.text%24replace%28kotlin.CharSequence%2C+kotlin.text.Regex%2C+kotlin.String%29%2Freplacement&quot;&gt;replacement&lt;/a&gt; can consist of any combination of literal text and $-substitutions. To treat the replacement string literally escape it with the &lt;a href=&quot;-regex/escape-replacement#kotlin.text.Regex.Companion%24escapeReplacement%28kotlin.String%29&quot;&gt;kotlin.text.Regex.Companion.escapeReplacement&lt;/a&gt; method.</source>
          <target state="translated">该&lt;a href=&quot;replace#kotlin.text%24replace%28kotlin.CharSequence%2C+kotlin.text.Regex%2C+kotlin.String%29%2Freplacement&quot;&gt;置换&lt;/a&gt;可以由文字文本和$ -substitutions的任意组合。要处理替换字符串，请使用&lt;a href=&quot;-regex/escape-replacement#kotlin.text.Regex.Companion%24escapeReplacement%28kotlin.String%29&quot;&gt;kotlin.text.Regex.Companion.escapeReplacement&lt;/a&gt;方法从字面上对其进行转义。</target>
        </trans-unit>
        <trans-unit id="72a4e8e47da1c3186370a03fc43faed555a6af40" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;replace#kotlin.text%24replace(kotlin.CharSequence,%20kotlin.text.Regex,%20kotlin.String)/replacement&quot;&gt;replacement&lt;/a&gt; can consist of any combination of literal text and $-substitutions. To treat the replacement string literally escape it with the &lt;a href=&quot;-regex/escape-replacement#kotlin.text.Regex.Companion%24escapeReplacement(kotlin.String)&quot;&gt;kotlin.text.Regex.Companion.escapeReplacement&lt;/a&gt; method.</source>
          <target state="translated">该&lt;a href=&quot;replace#kotlin.text%24replace(kotlin.CharSequence,%20kotlin.text.Regex,%20kotlin.String)/replacement&quot;&gt;置换&lt;/a&gt;可以由文字文本和$ -substitutions的任意组合。要处理替换字符串，请使用&lt;a href=&quot;-regex/escape-replacement#kotlin.text.Regex.Companion%24escapeReplacement(kotlin.String)&quot;&gt;kotlin.text.Regex.Companion.escapeReplacement&lt;/a&gt;方法从字面上对其进行转义。</target>
        </trans-unit>
        <trans-unit id="95e9b2afeb8d6a526b5a01ab6cb37a3b2fbd3c86" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;!!&lt;/code&gt; Operator</source>
          <target state="translated">该 &lt;code&gt;!!&lt;/code&gt; 操作员</target>
        </trans-unit>
        <trans-unit id="16f554cb9d6cac56c27af60060382d64762de72d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;-d&lt;/code&gt; option indicates the output path for generated class files, which may be either a directory or a &lt;em&gt;.jar&lt;/em&gt; file. The &lt;code&gt;-include-runtime&lt;/code&gt; option makes the resulting &lt;em&gt;.jar&lt;/em&gt; file self-contained and runnable by including the Kotlin runtime library in it. If you want to see all available options run</source>
          <target state="translated">所述 &lt;code&gt;-d&lt;/code&gt; 选项指示用于生成的类文件的输出路径，其可以是一个目录或一个&lt;em&gt;的.jar&lt;/em&gt;文件。该 &lt;code&gt;-include-runtime&lt;/code&gt; 选项会使产生&lt;em&gt;的.jar&lt;/em&gt;文件自包含的，通过在它的科特林运行时库运行的。如果要查看所有可用选项的运行</target>
        </trans-unit>
        <trans-unit id="22f7ccf0243674cea2ac7171ac3600509d7e8e7d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;-d&lt;/code&gt; option indicates what we want the output of the compiler to be called and may be either a directory name for class files or a &lt;em&gt;.jar&lt;/em&gt; file name. The &lt;code&gt;-include-runtime&lt;/code&gt; option makes the resulting &lt;em&gt;.jar&lt;/em&gt; file self-contained and runnable by including the Kotlin runtime library in it. If you want to see all available options run</source>
          <target state="translated">该 &lt;code&gt;-d&lt;/code&gt; 选项指示我们想要的编译器的输出被调用，可以是类文件目录名或&lt;em&gt;的.jar&lt;/em&gt;文件名。该 &lt;code&gt;-include-runtime&lt;/code&gt; 选项会使产生&lt;em&gt;的.jar&lt;/em&gt;文件自包含的，通过在它的科特林运行时库运行的。如果要查看所有可用选项的运行</target>
        </trans-unit>
        <trans-unit id="c711aceaf8b8e464d66e1fd318914f03bac4786f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;-meta-info&lt;/code&gt; option indicates that an additional JS file with binary meta-information about compiled kotlin code will be created.</source>
          <target state="translated">该 &lt;code&gt;-meta-info&lt;/code&gt; 选项表示与有关编译科特林代码的二进制元信息附加JS文件将被创建。</target>
        </trans-unit>
        <trans-unit id="dc6b8236cb90f6f8fe4324f1a0dc0ef9b906294c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;.def&lt;/code&gt; file supports several options for adjusting the generated bindings.</source>
          <target state="translated">该 &lt;code&gt;.def&lt;/code&gt; 文件支持，用于调整产生的绑定几个选项。</target>
        </trans-unit>
        <trans-unit id="73f8a4adb6a430053e582f21a1ecd992b4948729" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;.pointed&lt;/code&gt; property for &lt;code&gt;CPointer&amp;lt;T&amp;gt;&lt;/code&gt; returns the lvalue of type &lt;code&gt;T&lt;/code&gt;, pointed by this pointer. The reverse operation is &lt;code&gt;.ptr&lt;/code&gt;: it takes the lvalue and returns the pointer to it.</source>
          <target state="translated">&lt;code&gt;CPointer&amp;lt;T&amp;gt;&lt;/code&gt; 的 &lt;code&gt;.pointed&lt;/code&gt; 属性返回此指针指向的 &lt;code&gt;T&lt;/code&gt; 类型的左值。反向操作是 &lt;code&gt;.ptr&lt;/code&gt; ：它接受左值并返回指向它的指针。</target>
        </trans-unit>
        <trans-unit id="6d8b85d101ff4f2f1b24686adcfb710c9930ca1c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;==&lt;/code&gt; operation is special: it is translated to a complex expression that screens for &lt;code&gt;null&lt;/code&gt;'s. &lt;code&gt;null == null&lt;/code&gt; is always true, and &lt;code&gt;x == null&lt;/code&gt; for a non-null &lt;code&gt;x&lt;/code&gt; is always false and won't invoke &lt;code&gt;x.equals()&lt;/code&gt;.</source>
          <target state="translated">在 &lt;code&gt;==&lt;/code&gt; 操作是特殊的：它被翻译成一个复杂的表达式，对屏幕 &lt;code&gt;null&lt;/code&gt; 的。 &lt;code&gt;null == null&lt;/code&gt; 始终是真实的，和 &lt;code&gt;x == null&lt;/code&gt; 的非空 &lt;code&gt;x&lt;/code&gt; 永远是假的，不会调用 &lt;code&gt;x.equals()&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="6bbc4d74ec596791bf71057157cc072f9f40333d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;@BindView&lt;/code&gt; annotation is defined to be applied to the fields only, but the Kotlin compiler understands that and annotates the corresponding field under the hood when you apply the annotation to the whole property.</source>
          <target state="translated">该 &lt;code&gt;@BindView&lt;/code&gt; 注释被定义为仅应用于领域，但科特林编译器明白，当你应用注释到整个财产引擎盖下标注相应的领域。</target>
        </trans-unit>
        <trans-unit id="570e8cdd4880694f653c6df8b5e52b836ca08b91" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;@JsExport&lt;/code&gt; annotation is available in the current default compiler backend and the new &lt;a href=&quot;js-ir-compiler&quot;&gt;IR compiler backend&lt;/a&gt;. If you are targeting the IR compiler backend, you &lt;strong&gt;must&lt;/strong&gt; use the &lt;code&gt;@JsExport&lt;/code&gt; annotation to make your functions visible from Kotlin in the first place.</source>
          <target state="translated">该 &lt;code&gt;@JsExport&lt;/code&gt; 注释是在当前默认的编译器的后端和新的可用&lt;a href=&quot;js-ir-compiler&quot;&gt;IR的编译器后端&lt;/a&gt;。如果您以IR编译器后端为目标，则&lt;strong&gt;必须&lt;/strong&gt;使用 &lt;code&gt;@JsExport&lt;/code&gt; 批注使函数首先在Kotlin中可见。</target>
        </trans-unit>
        <trans-unit id="027e903c95ee8bc2148123b05adc1c6430180f44" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;@JsExport&lt;/code&gt; annotation is currently marked as experimental. Its design may change in future versions.</source>
          <target state="translated">该 &lt;code&gt;@JsExport&lt;/code&gt; 注解当前被标记为实验。其设计可能会在将来的版本中更改。</target>
        </trans-unit>
        <trans-unit id="1df3c0a179e9e6af77acfff08df64cc5248d7f9d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;@JvmDefault&lt;/code&gt; annotation is experimental in Kotlin 1.3. Its name and behavior may change, leading to future incompatibility.</source>
          <target state="translated">该 &lt;code&gt;@JvmDefault&lt;/code&gt; 注释是在科特林1.3实验。它的名称和行为可能会更改，导致将来不兼容。</target>
        </trans-unit>
        <trans-unit id="23f0d6b7e361daa5f829cff80c17a1080ce0221f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;@UnderMigration&lt;/code&gt; annotation (provided in a separate artifact &lt;code&gt;kotlin-annotations-jvm&lt;/code&gt;) can be used by library maintainers to define the migration status for the nullability type qualifiers.</source>
          <target state="translated">所述 &lt;code&gt;@UnderMigration&lt;/code&gt; 注释（在一个单独的工件提供 &lt;code&gt;kotlin-annotations-jvm&lt;/code&gt; ）可通过库的维护者可以用来定义为空性类型限定的迁移状态。</target>
        </trans-unit>
        <trans-unit id="08a8188662741e6b74d3c3abb87899999effc8e6" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ArrayDeque&lt;/code&gt; implementation uses a resizable array underneath: it stores the contents in a circular buffer, an &lt;code&gt;Array&lt;/code&gt;, and resizes this &lt;code&gt;Array&lt;/code&gt; only when it becomes full.</source>
          <target state="translated">所述 &lt;code&gt;ArrayDeque&lt;/code&gt; 实现使用一个可调整大小的阵列之下：它存储在循环缓冲器中，一个内容 &lt;code&gt;Array&lt;/code&gt; ，并调整该 &lt;code&gt;Array&lt;/code&gt; ，只有当它变满。</target>
        </trans-unit>
        <trans-unit id="bb1328f13d2922d7a316403f81e7c018a9247b4a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;CValuesRef&amp;lt;T&amp;gt;&lt;/code&gt; representation of pointer parameters is designed to support C array literals without explicit native memory allocation. To construct the immutable self-contained sequence of C values, the following methods are provided:</source>
          <target state="translated">指针参数的 &lt;code&gt;CValuesRef&amp;lt;T&amp;gt;&lt;/code&gt; 表示旨在支持C数组文字，而无需显式的本机内存分配。为了构造C值的不变自包含序列，提供了以下方法：</target>
        </trans-unit>
        <trans-unit id="a1a03d0c25bc5cefc6e2a073c0dfa2fd3a424a42" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Closeable.use&lt;/code&gt; function calls &lt;code&gt;Throwable.addSuppressed&lt;/code&gt; when an exception is thrown during closing the resource after some other exception.</source>
          <target state="translated">当在其他一些异常之后关闭资源的过程中引发异常时， &lt;code&gt;Closeable.use&lt;/code&gt; 函数将调用 &lt;code&gt;Throwable.addSuppressed&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="0485fe2409cde90ad04805af82cb812c3dd3149b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;INSTANCE&lt;/code&gt; field of a companion object more visible than the companion object class itself</source>
          <target state="translated">伴随对象的 &lt;code&gt;INSTANCE&lt;/code&gt; 字段比伴随对象类本身更可见</target>
        </trans-unit>
        <trans-unit id="a0327626fcb95882f9434dd6a1485603acf809a0" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;MyStruct&lt;/code&gt; and &lt;code&gt;MyUnion&lt;/code&gt; classes have the pointer to the native memory underneath. The memory will be released when a &lt;code&gt;memScoped&lt;/code&gt; function ends, which is equal to the end of its &lt;code&gt;block&lt;/code&gt;. Be careful to make sure that a pointer is not used outside of the &lt;code&gt;memScoped&lt;/code&gt; call. We may use &lt;code&gt;Arena()&lt;/code&gt; or &lt;code&gt;nativeHeap&lt;/code&gt; for pointers that should be available longer, or are cached inside a C library.</source>
          <target state="translated">该 &lt;code&gt;MyStruct&lt;/code&gt; 和 &lt;code&gt;MyUnion&lt;/code&gt; 类具有指向本机内存下方。当 &lt;code&gt;memScoped&lt;/code&gt; 函数结束（等于其 &lt;code&gt;block&lt;/code&gt; 的结束）时，将释放内存。注意确保在 &lt;code&gt;memScoped&lt;/code&gt; 调用之外未使用指针。我们可能使用 &lt;code&gt;Arena()&lt;/code&gt; 或 &lt;code&gt;nativeHeap&lt;/code&gt; 来指定应该更长或更长时间使用的指针，或者将其缓存在C库中。</target>
        </trans-unit>
        <trans-unit id="e163aa024140dbb6042ebda1a8af8dcaad09140b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Podspec&lt;/code&gt; file includes a path to an output framework and script phases that automate building this framework during the build process of an Xcode project.</source>
          <target state="translated">该 &lt;code&gt;Podspec&lt;/code&gt; 文件包括到输出的框架和脚本阶段是自动构建过程中的Xcode项目的构建过程这一框架的路径。</target>
        </trans-unit>
        <trans-unit id="e1e663158ad35ab7b0074a2786efe149637f58ae" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;SharedCode/build.gradle&lt;/code&gt; file uses the &lt;code&gt;kotlin-multiplatform&lt;/code&gt; plugin to implement what we need. In the file, we define several targets &lt;code&gt;common&lt;/code&gt;, &lt;code&gt;android&lt;/code&gt;, and &lt;code&gt;iOS&lt;/code&gt;. Each target has its own platform. The &lt;code&gt;common&lt;/code&gt; target contains the Kotlin common code which is included into every platform compilation. It is allowed to have &lt;code&gt;expect&lt;/code&gt; declarations. Other targets provide &lt;code&gt;actual&lt;/code&gt; implementations for all &lt;code&gt;expect&lt;/code&gt;-actions from the &lt;code&gt;common&lt;/code&gt; target. The more detailed explanation of the multiplatform projects can be found on the &lt;a href=&quot;../../reference/building-mpp-with-gradle&quot;&gt;Multiplatform Projects&lt;/a&gt; documentation page.</source>
          <target state="translated">该 &lt;code&gt;SharedCode/build.gradle&lt;/code&gt; 文件使用 &lt;code&gt;kotlin-multiplatform&lt;/code&gt; 的插件来实现我们所需要的。在文件中，我们定义了几个目标 &lt;code&gt;common&lt;/code&gt; ， &lt;code&gt;android&lt;/code&gt; 和 &lt;code&gt;iOS&lt;/code&gt; 。每个目标都有其自己的平台。该 &lt;code&gt;common&lt;/code&gt; 目标包含其中包括到每一个平台编译的科特林通用代码。允许有 &lt;code&gt;expect&lt;/code&gt; 声明。其他目标为 &lt;code&gt;common&lt;/code&gt; 目标中的所有 &lt;code&gt;expect&lt;/code&gt; 操作提供了 &lt;code&gt;actual&lt;/code&gt; 实现。可以在&amp;ldquo; &lt;a href=&quot;../../reference/building-mpp-with-gradle&quot;&gt;多平台项目&amp;rdquo;&lt;/a&gt;文档页面上找到有关多平台项目的更详细的说明。</target>
        </trans-unit>
        <trans-unit id="ef805264d2ba0e69f1525612b2097c56c9b79a21" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;SharedCode&lt;/code&gt; build generates iOS frameworks for use with the Xcode project. All frameworks are in the &lt;code&gt;SharedCode/build/bin&lt;/code&gt; folder. It creates a &lt;em&gt;debug&lt;/em&gt; and &lt;em&gt;release&lt;/em&gt; version for every framework target. The frameworks are in the following paths:</source>
          <target state="translated">该 &lt;code&gt;SharedCode&lt;/code&gt; 构建生成与Xcode项目使用的iOS框架。所有框架都位于 &lt;code&gt;SharedCode/build/bin&lt;/code&gt; 文件夹中。它为每个框架目标创建一个&lt;em&gt;调试&lt;/em&gt;和&lt;em&gt;发布&lt;/em&gt;版本。这些框架的路径如下：</target>
        </trans-unit>
        <trans-unit id="49918eac55ef5c9d9df4be1f8508374502fa5919" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;SharedCode&lt;/code&gt; sub-project should generate several artifacts for us:</source>
          <target state="translated">该 &lt;code&gt;SharedCode&lt;/code&gt; 分项目应该为我们生成多个工件：</target>
        </trans-unit>
        <trans-unit id="738861947c8af30bd4668ff2083f0544a8963e87" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;String&lt;/code&gt; class represents character strings. All string literals in Kotlin programs, such as &lt;code&gt;&quot;abc&quot;&lt;/code&gt;, are implemented as instances of this class.</source>
          <target state="translated">该 &lt;code&gt;String&lt;/code&gt; 类代表字符串。Kotlin程序中的所有字符串文字（例如 &lt;code&gt;&quot;abc&quot;&lt;/code&gt; ）都实现为此类的实例。</target>
        </trans-unit>
        <trans-unit id="1109231b443cf6e05eb0d002d1e6b58cba8574e8" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;TimeoutCancellationException&lt;/code&gt; that is thrown by &lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/with-timeout.html&quot;&gt;withTimeout&lt;/a&gt; is a subclass of &lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/-cancellation-exception/index.html&quot;&gt;CancellationException&lt;/a&gt;. We have not seen its stack trace printed on the console before. That is because inside a cancelled coroutine &lt;code&gt;CancellationException&lt;/code&gt; is considered to be a normal reason for coroutine completion. However, in this example we have used &lt;code&gt;withTimeout&lt;/code&gt; right inside the &lt;code&gt;main&lt;/code&gt; function.</source>
          <target state="translated">该 &lt;code&gt;TimeoutCancellationException&lt;/code&gt; 由抛出&lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/with-timeout.html&quot;&gt;withTimeout&lt;/a&gt;是的子类&lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/-cancellation-exception/index.html&quot;&gt;CancellationException&lt;/a&gt;。我们之前从未在控制台上看到过它的堆栈跟踪记录。那是因为在一个被取消的协程中， &lt;code&gt;CancellationException&lt;/code&gt; 被认为是协程完成的正常原因。但是，在此示例中，我们在 &lt;code&gt;main&lt;/code&gt; 函数内部使用了 &lt;code&gt;withTimeout&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="678b280d532baa9bcd8fba06428fcb263e6a4bcd" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Unit&lt;/code&gt; return type declaration is also optional. The above code is equivalent to:</source>
          <target state="translated">该 &lt;code&gt;Unit&lt;/code&gt; 返回类型声明也是可选的。上面的代码等效于：</target>
        </trans-unit>
        <trans-unit id="34816ddf73a36acb83a22b27a235dceb2d40d5b2" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;android&lt;/code&gt; configuration inside &lt;code&gt;kotlin&lt;/code&gt; doesn&amp;rsquo;t replace the build configuration of any Android project. Learn more about writing build scripts for Android projects in &lt;a href=&quot;https://developer.android.com/studio/build&quot;&gt;Android developer documentation&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;kotlin&lt;/code&gt; 内的 &lt;code&gt;android&lt;/code&gt; 配置不会替代任何Android项目的构建配置。在&lt;a href=&quot;https://developer.android.com/studio/build&quot;&gt;Android开发人员文档中&lt;/a&gt;了解有关为Android项目编写构建脚本的更多信息。</target>
        </trans-unit>
        <trans-unit id="bb48ced54ff1266406f8ddf62204246a87b046d9" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;array.copyInto(targetArray, targetOffset, startIndex, endIndex)&lt;/code&gt; functions for the existing array types, including the unsigned arrays, make it easier to implement array-based containers in pure Kotlin.</source>
          <target state="translated">现有数组类型（包括无符号数组 &lt;code&gt;array.copyInto(targetArray, targetOffset, startIndex, endIndex)&lt;/code&gt; 的array.copyInto（targetArray，targetOffset，startIndex，endIndex）函数使在纯Kotlin中实现基于数组的容器更加容易。</target>
        </trans-unit>
        <trans-unit id="dbbd4d6ccddd01ebd0440c3324ef34e660a0c4b5" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;build.gradle.kts&lt;/code&gt; file contains the project settings. Read more about these settings in the &lt;a href=&quot;../../reference/mpp-dsl-reference&quot;&gt;Kotlin Multiplatform Gradle DSL reference&lt;/a&gt;.</source>
          <target state="translated">该 &lt;code&gt;build.gradle.kts&lt;/code&gt; 文件中包含的项目设置。在&lt;a href=&quot;../../reference/mpp-dsl-reference&quot;&gt;Kotlin Multiplatform Gradle DSL参考中&lt;/a&gt;阅读有关这些设置的更多信息。</target>
        </trans-unit>
        <trans-unit id="a6d3c63b724a00a7b22c190a90ba3fb846402424" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;catch&lt;/code&gt; blocks are tried in order until an exception type is found that matches the thrown exception (it doesn't need to be an exact match; the thrown exception's class can be a subclass of the declared one), and at most one &lt;code&gt;catch&lt;/code&gt; block will be executed. If no match is found, the exception bubbles out of the &lt;code&gt;try&lt;/code&gt;/&lt;code&gt;catch&lt;/code&gt;.</source>
          <target state="translated">该 &lt;code&gt;catch&lt;/code&gt; 块依次尝试，直到一个异常类型中找到了相匹配的抛出异常（它并不需要精确匹配;抛出的异常的类可以是的一个子类声明的一个），并且最多一个 &lt;code&gt;catch&lt;/code&gt; 块将被执行。如果找不到匹配项，则异常从 &lt;code&gt;try&lt;/code&gt; / &lt;code&gt;catch&lt;/code&gt; 冒泡。</target>
        </trans-unit>
        <trans-unit id="e92d0fff45fa528ec76156e8cf1a8aac33dfa367" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;cocoapods&lt;/code&gt; block can include dependencies to Pods stored locally and Pods from the CocoaPods repository at the same time.</source>
          <target state="translated">所述 &lt;code&gt;cocoapods&lt;/code&gt; 块可以包括依赖于来自本地的CocoaPods和豆荚存储吊舱存储库在同一时间。</target>
        </trans-unit>
        <trans-unit id="c0fef9a879817509a3ced8499c0b86da8348957d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;component1()&lt;/code&gt; and &lt;code&gt;component2()&lt;/code&gt; functions are another example of the &lt;em&gt;principle of conventions&lt;/em&gt; widely used in Kotlin (see operators like &lt;code&gt;+&lt;/code&gt; and &lt;code&gt;*&lt;/code&gt;, &lt;em&gt;for&lt;/em&gt;-loops etc.). Anything can be on the right-hand side of a destructuring declaration, as long as the required number of component functions can be called on it. And, of course, there can be &lt;code&gt;component3()&lt;/code&gt; and &lt;code&gt;component4()&lt;/code&gt; and so on.</source>
          <target state="translated">所述 &lt;code&gt;component1()&lt;/code&gt; 和 &lt;code&gt;component2()&lt;/code&gt; 函数是的另一示例&lt;em&gt;约定的原则&lt;/em&gt;（参见等运营商广泛应用于科特林 &lt;code&gt;+&lt;/code&gt; 和 &lt;code&gt;*&lt;/code&gt; ，&lt;em&gt;为&lt;/em&gt; -loops等）。只要可以在其上调用所需数量的组件函数，任何内容都可以在解构声明的右侧。而且，当然可以有 &lt;code&gt;component3()&lt;/code&gt; 和 &lt;code&gt;component4()&lt;/code&gt; 等等。</target>
        </trans-unit>
        <trans-unit id="c908c6361f3f878795986cf1aacec3df19a47af2" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;componentN()&lt;/code&gt; operator functions are not called for the components that are skipped in this way.</source>
          <target state="translated">对于以这种方式跳过的组件，不会调用 &lt;code&gt;componentN()&lt;/code&gt; 运算符。</target>
        </trans-unit>
        <trans-unit id="f1d847ef34570c9d2cfc5768433edcc66d201826" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;concurrent&lt;/code&gt; source set declares the function runBlocking and is compiled for the JVM and the native targets. Once the &lt;code&gt;kotlinx.coroutines&lt;/code&gt; library is updated and published with the hierarchical project structure, you can depend on it and call &lt;code&gt;runBlocking&lt;/code&gt; from a source set that is shared between the JVM and native targets since it matches the &amp;ldquo;targets signature&amp;rdquo; of the library&amp;rsquo;s &lt;code&gt;concurrent&lt;/code&gt; source set.</source>
          <target state="translated">该 &lt;code&gt;concurrent&lt;/code&gt; 源集合声明函数runBlocking和编译为JVM和本地目标。一旦使用分层项目结构更新并发布了 &lt;code&gt;kotlinx.coroutines&lt;/code&gt; 库，您就可以依赖它并从JVM和本机目标之间共享的源集中调用 &lt;code&gt;runBlocking&lt;/code&gt; ，因为它与库的 &lt;code&gt;concurrent&lt;/code&gt; 源的&amp;ldquo;目标签名&amp;rdquo;相匹配放。</target>
        </trans-unit>
        <trans-unit id="a190a683fc1154d7857777d7aa926a36cf88408d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;dependencies&lt;/code&gt; block of the source set declaration contains the dependencies of this source set.</source>
          <target state="translated">该 &lt;code&gt;dependencies&lt;/code&gt; 源组声明块包含此源集的依赖关系。</target>
        </trans-unit>
        <trans-unit id="e19e10048f6cfec5120bb685db8cc57ca3bf8154" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;document&lt;/code&gt; object also provides us a way to retrieve a specific element by ID, name, class name, tag name and so on. All returned elements are of type &lt;code&gt;Element?&lt;/code&gt;. To access their properties, we need to cast them to their appropriate type. For example, say we have an HTML page with an email &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; field:</source>
          <target state="translated">该 &lt;code&gt;document&lt;/code&gt; 对象还为我们提供了一种方法来检索ID，姓名，班级名称，标签名称等特定元素。所有返回的元素都是 &lt;code&gt;Element?&lt;/code&gt; 类型？。要访问它们的属性，我们需要将它们强制转换为适当的类型。例如，假设我们有一个带有电子邮件 &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; 字段的HTML页面：</target>
        </trans-unit>
        <trans-unit id="7d4ca598e9322020fabb7ed0f0cf080beed5a640" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;dynamic&lt;/code&gt; type basically turns off Kotlin's type checker:</source>
          <target state="translated">该 &lt;code&gt;dynamic&lt;/code&gt; 类型基本上关闭科特林的类型检查：</target>
        </trans-unit>
        <trans-unit id="5ff5cd6bac575bb9563d72ab56d5d639d97b4c6c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;expect&lt;/code&gt;/&lt;code&gt;actual&lt;/code&gt; feature is currently in &lt;a href=&quot;evolution/components-stability&quot;&gt;Beta&lt;/a&gt;. All of the language and tooling features described in this document are subject to change in future Kotlin versions.</source>
          <target state="translated">该 &lt;code&gt;expect&lt;/code&gt; / &lt;code&gt;actual&lt;/code&gt; 目前的功能是&lt;a href=&quot;evolution/components-stability&quot;&gt;测试版&lt;/a&gt;。本文档中描述的所有语言和工具功能都可能在将来的Kotlin版本中进行更改。</target>
        </trans-unit>
        <trans-unit id="51e19e38be808ad0fddd91d78f8820fc196fada7" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;external&lt;/code&gt; modifier</source>
          <target state="translated">在 &lt;code&gt;external&lt;/code&gt; 修改</target>
        </trans-unit>
        <trans-unit id="6672d0616428f2de367eecabae3ac9b311e7f971" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;external&lt;/code&gt; modifier is only allowed on package-level declarations. You can't declare an &lt;code&gt;external&lt;/code&gt; member of a non-&lt;code&gt;external&lt;/code&gt; class.</source>
          <target state="translated">仅在包级声明中才允许使用 &lt;code&gt;external&lt;/code&gt; 修饰符。您不能声明非 &lt;code&gt;external&lt;/code&gt; 类的 &lt;code&gt;external&lt;/code&gt; 成员。</target>
        </trans-unit>
        <trans-unit id="3b6dae5981e61870a0a711096ca1cc69db0e7e4d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;field&lt;/code&gt; identifier can only be used in the accessors of the property.</source>
          <target state="translated">该 &lt;code&gt;field&lt;/code&gt; 识别符只能在属性的访问中使用。</target>
        </trans-unit>
        <trans-unit id="a8755ff22ac11729e9e1bb025cf0c2f08d13b24b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;finally&lt;/code&gt; block (if any) is executed at the end, no matter what the outcome is: either after the try block completes successfully, or after a catch block is executed (even if another exception is thrown by the catch block), or if no matching catch is found.</source>
          <target state="translated">在 &lt;code&gt;finally&lt;/code&gt; 块（如果有的话），结束时执行，不管结局是什么：要么成功try块完成后，或在catch块被执行（即使另一个异常是由catch块抛出），或者如果找不到匹配的捕获。</target>
        </trans-unit>
        <trans-unit id="3a829cd24a40c00449e6558dda8fc041beb9c10a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;flow { ... }&lt;/code&gt; builder from the previous examples is the most basic one. There are other builders for easier declaration of flows:</source>
          <target state="translated">前面示例中的 &lt;code&gt;flow { ... }&lt;/code&gt; 构建器是最基本的。还有其他构建器可以更轻松地声明流：</target>
        </trans-unit>
        <trans-unit id="6e147b02bdfa0081a311ca1a27d8c44534b54856" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;head&lt;/code&gt; and &lt;code&gt;body&lt;/code&gt; functions in the &lt;code&gt;HTML&lt;/code&gt; class are defined similarly to &lt;code&gt;html&lt;/code&gt;. The only difference is that they add the built instances to the &lt;code&gt;children&lt;/code&gt; collection of the enclosing &lt;code&gt;HTML&lt;/code&gt; instance:</source>
          <target state="translated">&lt;code&gt;HTML&lt;/code&gt; 类中的 &lt;code&gt;head&lt;/code&gt; 和 &lt;code&gt;body&lt;/code&gt; 函数的定义类似于 &lt;code&gt;html&lt;/code&gt; 。唯一的区别是，它们将构建的实例添加到封闭的 &lt;code&gt;HTML&lt;/code&gt; 实例的 &lt;code&gt;children&lt;/code&gt; 集合中：</target>
        </trans-unit>
        <trans-unit id="770f5ab17d8a9531f1b79df0e83aa540310bf343" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;import&lt;/code&gt; keyword is not restricted to importing classes; you can also use it to import other declarations:</source>
          <target state="translated">该 &lt;code&gt;import&lt;/code&gt; 关键词不限于进口类; 您还可以使用它导入其他声明：</target>
        </trans-unit>
        <trans-unit id="41a9e375e0ec0d5188379910e6d4cc759d4c0ed4" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;inc()&lt;/code&gt; and &lt;code&gt;dec()&lt;/code&gt; functions must return a value, which will be assigned to the variable on which the &lt;code&gt;++&lt;/code&gt; or &lt;code&gt;--&lt;/code&gt; operation was used. They shouldn't mutate the object on which the &lt;code&gt;inc&lt;/code&gt; or &lt;code&gt;dec&lt;/code&gt; was invoked.</source>
          <target state="translated">在 &lt;code&gt;inc()&lt;/code&gt; 和 &lt;code&gt;dec()&lt;/code&gt; 函数必须返回一个值，该值将被分配到其上的可变 &lt;code&gt;++&lt;/code&gt; 或 &lt;code&gt;--&lt;/code&gt; 使用操作。他们不应该对调用 &lt;code&gt;inc&lt;/code&gt; 或 &lt;code&gt;dec&lt;/code&gt; 的对象进行突变。</target>
        </trans-unit>
        <trans-unit id="2a8bc7470da685195a735f122f1c7a64a5a63c8b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;inline&lt;/code&gt; modifier affects both the function itself and the lambdas passed to it: all of those will be inlined into the call site.</source>
          <target state="translated">该 &lt;code&gt;inline&lt;/code&gt; 修改会影响本身的功能，并传递给它的lambda表达式：所有这些都将被联到调用点。</target>
        </trans-unit>
        <trans-unit id="4c1794e25137b28059a2347a21857b9a05912426" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;inline&lt;/code&gt; modifier can be used on accessors of properties that don't have a backing field. You can annotate individual property accessors:</source>
          <target state="translated">该 &lt;code&gt;inline&lt;/code&gt; 修改可以在不具有支持字段属性访问器使用。您可以注释单个属性访问器：</target>
        </trans-unit>
        <trans-unit id="2e8761b1965ac33697b654aacb6b2483099da851" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;internal&lt;/code&gt; visibility modifier means that the member is visible within the same module. More specifically, a module is a set of Kotlin files compiled together:</source>
          <target state="translated">的 &lt;code&gt;internal&lt;/code&gt; 可见性改性剂的装置，该构件是在同一模块内可见。更具体地说，模块是一起编译的一组Kotlin文件：</target>
        </trans-unit>
        <trans-unit id="5524830c2792b87628c40ec57ff6cb705892ec15" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;interop.def&lt;/code&gt; file is enough to compile and run the application or open it in an IDE. Now it is time to create project files, open the project in &lt;a href=&quot;https://jetbrains.com/idea&quot;&gt;IntelliJ IDEA&lt;/a&gt; and run it.</source>
          <target state="translated">该 &lt;code&gt;interop.def&lt;/code&gt; 文件足以编译和运行应用程序或在IDE中打开它。现在是时候创建项目文件，在&lt;a href=&quot;https://jetbrains.com/idea&quot;&gt;IntelliJ IDEA中&lt;/a&gt;打开项目并运行它了。</target>
        </trans-unit>
        <trans-unit id="3d41e98e653300197d70c898b77f6a833b780263" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;js&lt;/code&gt; block describes the configuration of JavaScript targets. It can contain one of two blocks depending on the target execution environment:</source>
          <target state="translated">该 &lt;code&gt;js&lt;/code&gt; 块描述的JavaScript的目标配置。它可以包含两个块之一，具体取决于目标执行环境：</target>
        </trans-unit>
        <trans-unit id="44ba6fd4ed404417523557c04ecd859c9b045fe5" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;kotlin-multiplatform&lt;/code&gt; plugin also uses configurations under the hood but it also provides a &lt;code&gt;dependencies&lt;/code&gt; block for each source set allowing configuring dependencies of this sources set:</source>
          <target state="translated">所述 &lt;code&gt;kotlin-multiplatform&lt;/code&gt; 插件还使用配置引擎盖下，但它也提供了一种 &lt;code&gt;dependencies&lt;/code&gt; 块为每个源组允许这个源设置的配置的依赖关系：</target>
        </trans-unit>
        <trans-unit id="a0c4005a1e5ac20d1958b1949f93981adc09fc37" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;kotlin-multiplatform&lt;/code&gt; plugin configures the project for creating an application or library to work on multiple platforms and prepares it for building on these platforms.</source>
          <target state="translated">在 &lt;code&gt;kotlin-multiplatform&lt;/code&gt; 的插件配置项目，产生在多个平台上的应用程序或库工作并准备将其构建在这些平台上。</target>
        </trans-unit>
        <trans-unit id="d8e3eb99d26045b1aa72e09adfd01fc61c4fddee" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;kotlin-multiplatform&lt;/code&gt; plugin doesn't create any production binaries by default. The only binary available by default is a debug test executable that lets you run unit tests from the &lt;code&gt;test&lt;/code&gt; compilation.</source>
          <target state="translated">默认情况下， &lt;code&gt;kotlin-multiplatform&lt;/code&gt; 插件不会创建任何生产二进制文件。默认情况下，唯一可用的二进制文件是调试测试可执行文件，使您可以从 &lt;code&gt;test&lt;/code&gt; 编译中运行单元测试。</target>
        </trans-unit>
        <trans-unit id="b5c0011d2bfc5ebbff41042a726587af8e0320f2" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;kotlin-multiplatform&lt;/code&gt; plugin provides target shortcuts for creating structures for common combinations of targets.</source>
          <target state="translated">在 &lt;code&gt;kotlin-multiplatform&lt;/code&gt; 插件提供目标的快捷方式创建的目标，共同的组合结构。</target>
        </trans-unit>
        <trans-unit id="2df8274be5a77a61c0bfa9793c6436553cef29b9" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;kotlin-multiplatform&lt;/code&gt; plugin works with Gradle 6.0 or later.</source>
          <target state="translated">在 &lt;code&gt;kotlin-multiplatform&lt;/code&gt; 插件可用于摇篮6.0或更高版本。</target>
        </trans-unit>
        <trans-unit id="54c093aab8a4fd74ccc1151086a966b2ec216f25" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;kotlin.coroutines.experimental&lt;/code&gt; API was deprecated in favor of kotlin.coroutines in 1.3.0. In 1.4.0, we&amp;rsquo;re completing the deprecation cycle for &lt;code&gt;kotlin.coroutines.experimental&lt;/code&gt; by removing it from the standard library. For those who still use it on the JVM, we've provided a compatibility artifact &lt;code&gt;kotlin-coroutines-experimental-compat.jar&lt;/code&gt; with all the experimental coroutines APIs. We've published it to Maven, and we include it in the Kotlin distribution alongside the standard library.</source>
          <target state="translated">该 &lt;code&gt;kotlin.coroutines.experimental&lt;/code&gt; API被弃用，取而代之的kotlin.coroutines的1.3.0。在1.4.0中，我们通过从标准库中删除 &lt;code&gt;kotlin.coroutines.experimental&lt;/code&gt; 的弃用周期来完成它。对于仍在JVM上使用它的用户，我们提供了与所有实验协同程序API兼容的工件 &lt;code&gt;kotlin-coroutines-experimental-compat.jar&lt;/code&gt; 。我们已经将其发布到Maven，并将其与标准库一起包含在Kotlin发行版中。</target>
        </trans-unit>
        <trans-unit id="fe74c7aeeab59f2c4b92f1e28239a8ff11eacd81" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;kotlin.js.experimental.generateKotlinExternals&lt;/code&gt; flag has been renamed to &lt;code&gt;kotlin.js.generate.externals&lt;/code&gt;. It controls the default behavior of Dukat for all specified npm dependencies.</source>
          <target state="translated">该 &lt;code&gt;kotlin.js.experimental.generateKotlinExternals&lt;/code&gt; 标志已更名为 &lt;code&gt;kotlin.js.generate.externals&lt;/code&gt; 。它控制所有指定的npm依赖项的Dukat默认行为。</target>
        </trans-unit>
        <trans-unit id="c6dd2f719618738640e63840c7a2f909ec5d0617" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;kotlin.js&lt;/code&gt; Gradle plugin comes with an adjusted Gradle DSL, which provides a number of new configuration options and is more closely aligned to the DSL used by the &lt;code&gt;kotlin-multiplatform&lt;/code&gt; plugin. Some of the most impactful changes include:</source>
          <target state="translated">所述 &lt;code&gt;kotlin.js&lt;/code&gt; 摇篮插件带有一个调整摇篮DSL，它提供了一些新的配置选项和更紧密地对齐以由所使用的DSL &lt;code&gt;kotlin-multiplatform&lt;/code&gt; 插件。一些最有影响力的更改包括：</target>
        </trans-unit>
        <trans-unit id="adb02342d7ce602f18e1bc8edea76f179234a358" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;kotlin.js&lt;/code&gt; file should be referenced first as it is used by our application</source>
          <target state="translated">该 &lt;code&gt;kotlin.js&lt;/code&gt; 因为它是使用我们的应用程序文件，应首先引用</target>
        </trans-unit>
        <trans-unit id="7fc3f10d75e3b45c926e4a682a79762335610161" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;kotlin.test&lt;/code&gt; library &amp;ndash; you should still use &lt;code&gt;test-common&lt;/code&gt; and &lt;code&gt;test-annotations-common&lt;/code&gt;. These dependencies will be addressed later.</source>
          <target state="translated">该 &lt;code&gt;kotlin.test&lt;/code&gt; 库-你还是应该使用 &lt;code&gt;test-common&lt;/code&gt; 和 &lt;code&gt;test-annotations-common&lt;/code&gt; 。这些依赖关系将在以后解决。</target>
        </trans-unit>
        <trans-unit id="d33f6d3213f1661b13836e07ebfe17d21d08c317" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;kotlin.text.Regex&lt;/code&gt; class has become &lt;code&gt;Serializable&lt;/code&gt; and can now be used in serializable hierarchies.</source>
          <target state="translated">该 &lt;code&gt;kotlin.text.Regex&lt;/code&gt; 类成为 &lt;code&gt;Serializable&lt;/code&gt; 现在可以在序列化的层次结构中使用。</target>
        </trans-unit>
        <trans-unit id="1ffc69ed46730f5c0cf459a733202302794ba475" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;languageSettings&lt;/code&gt; block of a source set defines certain aspects of project analysis and build. The following language settings are available:</source>
          <target state="translated">源集的 &lt;code&gt;languageSettings&lt;/code&gt; 块定义了项目分析和构建的某些方面。提供以下语言设置：</target>
        </trans-unit>
        <trans-unit id="4ac18e700523e48dabd941ad751d3aef964b3a3d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;last&lt;/code&gt; element of the progression is calculated this way:</source>
          <target state="translated">进度的 &lt;code&gt;last&lt;/code&gt; 元素是这样计算的：</target>
        </trans-unit>
        <trans-unit id="3bdd0dba3711de41e882257acdc9d6c6d0be76b9" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;lateinit&lt;/code&gt; modifier can now be used on top-level properties and local variables. The latter can be used, for example, when a lambda passed as a constructor argument to one object refers to another object which has to be defined later:</source>
          <target state="translated">该 &lt;code&gt;lateinit&lt;/code&gt; 修饰符现在可以在顶级性能和使用的局部变量。例如，当作为构造函数参数传递给一个对象的lambda引用另一个必须稍后定义的对象时，可以使用后者：</target>
        </trans-unit>
        <trans-unit id="43331c82f7829c2da5f8833182cec47167e9b99d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;libnative&lt;/code&gt; is used as the library name, the generated header file name prefix. It is also prefixes all declarations in the header file.</source>
          <target state="translated">所述 &lt;code&gt;libnative&lt;/code&gt; 用作库名，生成的头文件名称前缀。它也是头文件中所有声明的前缀。</target>
        </trans-unit>
        <trans-unit id="bbfbe4356895f41e445e2fe6cf1eee9c6b52bcaf" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;libnative_ExportedSymbols&lt;/code&gt; structure contains several helper functions:</source>
          <target state="translated">该 &lt;code&gt;libnative_ExportedSymbols&lt;/code&gt; 结构包含几个辅助函数：</target>
        </trans-unit>
        <trans-unit id="31fcc81919bad97de24dff6463d9620cad90a047" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;log&lt;/code&gt; function prints the name of the thread in square brackets and you can see, that it is the &lt;code&gt;main&lt;/code&gt; thread, but the identifier of the currently executing coroutine is appended to it. This identifier is consecutively assigned to all created coroutines when debugging mode is turned on.</source>
          <target state="translated">该 &lt;code&gt;log&lt;/code&gt; 函数打印在方括号中的线程的名称，你可以看到，它是 &lt;code&gt;main&lt;/code&gt; 线程，但当前正在执行的协同程序的标识追加到它。打开调试模式后，会将该标识符连续分配给所有创建的协程。</target>
        </trans-unit>
        <trans-unit id="d6f1794c043d2601c1f38c209a2b74f37608e11a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;log&lt;/code&gt; function prints the name of the thread in square brackets, and you can see that it is the &lt;code&gt;main&lt;/code&gt; thread with the identifier of the currently executing coroutine appended to it. This identifier is consecutively assigned to all created coroutines when the debugging mode is on.</source>
          <target state="translated">该 &lt;code&gt;log&lt;/code&gt; 函数打印在方括号中的线程的名称，你可以看到它是 &lt;code&gt;main&lt;/code&gt; 用附加到它当前正在执行的协同程序的标识线。调试模式打开时，此标识符将连续分配给所有创建的协程。</target>
        </trans-unit>
        <trans-unit id="efd29f0f3ce9a41a1abae4f8ce3153ceef6821bb" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;maxOf()&lt;/code&gt; and &lt;code&gt;minOf()&lt;/code&gt; top-level functions can accept a variable number of arguments (&lt;code&gt;vararg&lt;/code&gt;).</source>
          <target state="translated">所述 &lt;code&gt;maxOf()&lt;/code&gt; 和 &lt;code&gt;minOf()&lt;/code&gt; 顶层功能可以接受可变数量的参数（ &lt;code&gt;vararg&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="3230b15e19fadbbe8582fc37fac536f21d903134" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;memoizedFoo&lt;/code&gt; variable will be computed on the first access only. If &lt;code&gt;someCondition&lt;/code&gt; fails, the variable won't be computed at all.</source>
          <target state="translated">该 &lt;code&gt;memoizedFoo&lt;/code&gt; 变量将只在第一次访问来计算。如果 &lt;code&gt;someCondition&lt;/code&gt; 失败，则根本不会计算该变量。</target>
        </trans-unit>
        <trans-unit id="33d6683731510016eab36ef3fe8c81b5c054cb1c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;metaInfo&lt;/code&gt; option is useful, if you want to distribute the result of translation as a Kotlin/JavaScript library. If &lt;code&gt;metaInfo&lt;/code&gt; was set to &lt;code&gt;true&lt;/code&gt;, then during compilation additional JS file with binary metadata will be created. This file should be distributed together with the result of translation:</source>
          <target state="translated">该 &lt;code&gt;metaInfo&lt;/code&gt; 选项是有用的，如果你要分发翻译为科特林/ JavaScript库的结果。如果 &lt;code&gt;metaInfo&lt;/code&gt; 设置为 &lt;code&gt;true&lt;/code&gt; ，那么在编译期间将创建带有二进制元数据的附加JS文件。该文件应与翻译结果一起分发：</target>
        </trans-unit>
        <trans-unit id="0fa2960d546bdd59d27062cf01e83ddeac5f62dc" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;metadataJar&lt;/code&gt; task has been renamed to &lt;code&gt;allMetadataJar&lt;/code&gt;</source>
          <target state="translated">该 &lt;code&gt;metadataJar&lt;/code&gt; 任务已更名为 &lt;code&gt;allMetadataJar&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="4390f99faa98784caca7663e0e8bb44da962235e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;min()&lt;/code&gt; and &lt;code&gt;max()&lt;/code&gt; functions have been renamed to &lt;code&gt;minOrNull()&lt;/code&gt; and &lt;code&gt;maxOrNull()&lt;/code&gt; to comply with the naming convention used across the Kotlin collections API. An &lt;code&gt;*OrNull&lt;/code&gt; suffix in the function name means that it returns &lt;code&gt;null&lt;/code&gt; if the receiver collection is empty. The same applies to &lt;code&gt;minBy()&lt;/code&gt;, &lt;code&gt;maxBy()&lt;/code&gt;, &lt;code&gt;minWith()&lt;/code&gt;, &lt;code&gt;maxWith()&lt;/code&gt; &amp;ndash; in 1.4, they have &lt;code&gt;*OrNull()&lt;/code&gt; synonyms.</source>
          <target state="translated">在 &lt;code&gt;min()&lt;/code&gt; 和 &lt;code&gt;max()&lt;/code&gt; 函数已被更名为 &lt;code&gt;minOrNull()&lt;/code&gt; 和 &lt;code&gt;maxOrNull()&lt;/code&gt; ，以符合整个科特林集合API使用的命名约定。函数名称中的 &lt;code&gt;*OrNull&lt;/code&gt; 后缀表示如果接收者集合为空，则返回 &lt;code&gt;null&lt;/code&gt; 。同样适用于 &lt;code&gt;minBy()&lt;/code&gt; ， &lt;code&gt;maxBy()&lt;/code&gt; ， &lt;code&gt;minWith()&lt;/code&gt; ， &lt;code&gt;maxWith()&lt;/code&gt; &amp;ndash;在1.4中，它们具有 &lt;code&gt;*OrNull()&lt;/code&gt; 同义词。</target>
        </trans-unit>
        <trans-unit id="ef6518091f136fea33cc33006301200c71352567" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;mod&lt;/code&gt; operator is now deprecated, and &lt;code&gt;rem&lt;/code&gt; is used instead. See &lt;a href=&quot;https://youtrack.jetbrains.com/issue/KT-14650&quot;&gt;this issue&lt;/a&gt; for motivation.</source>
          <target state="translated">该 &lt;code&gt;mod&lt;/code&gt; 运营商现在已经过时，而 &lt;code&gt;rem&lt;/code&gt; 来代替。看到&lt;a href=&quot;https://youtrack.jetbrains.com/issue/KT-14650&quot;&gt;这个问题&lt;/a&gt;的动机。</target>
        </trans-unit>
        <trans-unit id="395f8c5b0caa144ef95155d2b0990a640eff00ce" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;npm&lt;/code&gt; dependency function now takes a third parameter after the package name and version: &lt;code&gt;generateExternals&lt;/code&gt;. This allows you to individually control whether Dukat should generate declarations for a specific dependency, and it overrides the &lt;code&gt;generateKotlinExternals&lt;/code&gt; setting.</source>
          <target state="translated">现在， &lt;code&gt;npm&lt;/code&gt; 依赖项函数在包名称和版本之后采用第三个参数： &lt;code&gt;generateExternals&lt;/code&gt; 。这使您可以单独控制Dukat是否应为特定的依赖项生成声明，并且它覆盖了 &lt;code&gt;generateKotlinExternals&lt;/code&gt; 设置。</target>
        </trans-unit>
        <trans-unit id="a1311bbf1ab6f6fcda3f918295937e4c380353f2" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;npm&lt;/code&gt; dependency function takes a third parameter after the package name and version: &lt;code&gt;generateExternals&lt;/code&gt;. This allows you to control whether Dukat should generate declarations for a specific dependency:</source>
          <target state="translated">在 &lt;code&gt;npm&lt;/code&gt; 依赖函数将包名称和版本之后的第三个参数： &lt;code&gt;generateExternals&lt;/code&gt; 。这使您可以控制Dukat是否应为特定的依赖项生成声明：</target>
        </trans-unit>
        <trans-unit id="8110b7b8d3687de9aeddaa2e0ee4cc0fcd8589ef" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;provideDelegate&lt;/code&gt; method is called for each property during the creation of the &lt;code&gt;MyUI&lt;/code&gt; instance, and it performs the necessary validation right away.</source>
          <target state="translated">该 &lt;code&gt;provideDelegate&lt;/code&gt; 方法被调用为创作过程中每个属性 &lt;code&gt;MyUI&lt;/code&gt; 实例中，并执行必要的验证的时候了。</target>
        </trans-unit>
        <trans-unit id="553371a8f2ee3223a5555190c34ffafc9965ea1c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;provideDelegate&lt;/code&gt; method will be called for each property during the creation of a &lt;code&gt;MyUI&lt;/code&gt; instance, and it can perform the necessary validation right away.</source>
          <target state="translated">该 &lt;code&gt;provideDelegate&lt;/code&gt; 方法将被调用为创建的过程中每个属性 &lt;code&gt;MyUI&lt;/code&gt; 实例，它可以执行必要的验证的时候了。</target>
        </trans-unit>
        <trans-unit id="8a67f1be603f5ede1bf9ae3c6e4bafaa7fb65414" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;simple&lt;/code&gt; function is no longer marked with &lt;code&gt;suspend&lt;/code&gt; modifier.</source>
          <target state="translated">在 &lt;code&gt;simple&lt;/code&gt; 功能不再标有 &lt;code&gt;suspend&lt;/code&gt; 修改。</target>
        </trans-unit>
        <trans-unit id="055a24c1add39a3120b70a8885c98dfa3f6a9dc9" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;sourceSets&lt;/code&gt; block describes source sets of the project. A source set contains Kotlin source files that participate in compilations together, along with their resources, dependencies, and language settings.</source>
          <target state="translated">该 &lt;code&gt;sourceSets&lt;/code&gt; 块描述源台项目。源集包含一起参与编译的Kotlin源文件，以及它们的资源，依赖项和语言设置。</target>
        </trans-unit>
        <trans-unit id="960e2214fe82d62eff0ebca52da442acae526b2f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;src&lt;/code&gt; directory contains Kotlin source files and resources. The &lt;code&gt;main.kt&lt;/code&gt; file contains sample code that will print &lt;code&gt;Hello World!&lt;/code&gt;.</source>
          <target state="translated">该 &lt;code&gt;src&lt;/code&gt; 目录包含科特林源文件和资源。该 &lt;code&gt;main.kt&lt;/code&gt; 文件包含示例代码，将打印 &lt;code&gt;Hello World!&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="294599e3b76ed6d0958bb5ab779fa8816270584c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;src&lt;/code&gt; directory contains Kotlin source files and resources. The file &lt;code&gt;welcome.kt&lt;/code&gt; includes sample code that renders the web page you've just seen.</source>
          <target state="translated">该 &lt;code&gt;src&lt;/code&gt; 目录包含科特林源文件和资源。文件 &lt;code&gt;welcome.kt&lt;/code&gt; 包含用于呈现您刚刚看到的网页的示例代码。</target>
        </trans-unit>
        <trans-unit id="1d129385cfbc790b4712464852ea4141749a2d3e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;src&lt;/code&gt; directory contains the Kotlin source files and resources. The file &lt;code&gt;main.kt&lt;/code&gt; includes sample code that prints &quot;Hello, Kotlin/Native!&quot; using the &lt;a href=&quot;../../../api/latest/jvm/stdlib/stdlib/kotlin.io/println&quot;&gt;&lt;code&gt;println()&lt;/code&gt;&lt;/a&gt; function.</source>
          <target state="translated">该 &lt;code&gt;src&lt;/code&gt; 目录包含了科特林源文件和资源。文件 &lt;code&gt;main.kt&lt;/code&gt; 包含打印&amp;ldquo; Hello，Kotlin / Native！&amp;rdquo;的示例代码。使用&lt;a href=&quot;../../../api/latest/jvm/stdlib/stdlib/kotlin.io/println&quot;&gt; &lt;code&gt;println()&lt;/code&gt; &lt;/a&gt;函数。</target>
        </trans-unit>
        <trans-unit id="0175059e36e70f08c4728ad40eca881f9d258af1" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;stdlib&lt;/code&gt; library &amp;ndash; starting from Kotlin 1.4.0, &lt;a href=&quot;#dependency-on-the-standard-library-added-by-default&quot;&gt;the &lt;code&gt;stdlib&lt;/code&gt; dependency is added automatically&lt;/a&gt;.</source>
          <target state="translated">该 &lt;code&gt;stdlib&lt;/code&gt; 库-从科特林1.4.0开始，&lt;a href=&quot;#dependency-on-the-standard-library-added-by-default&quot;&gt;该 &lt;code&gt;stdlib&lt;/code&gt; 依赖自动添加&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="3ced8435cd27ad8472273c2b70edbb4e6fae0033" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;strict&lt;/code&gt;, &lt;code&gt;warn&lt;/code&gt; and &lt;code&gt;ignore&lt;/code&gt; values have the same meaning as those of &lt;code&gt;MigrationStatus&lt;/code&gt;, and only the &lt;code&gt;strict&lt;/code&gt; mode affects the types in the annotated declarations as they are seen in Kotlin.</source>
          <target state="translated">在 &lt;code&gt;strict&lt;/code&gt; ， &lt;code&gt;warn&lt;/code&gt; 和 &lt;code&gt;ignore&lt;/code&gt; 值的意思是那些相同的 &lt;code&gt;MigrationStatus&lt;/code&gt; ，只有 &lt;code&gt;strict&lt;/code&gt; 模式影响了注释声明的类型，因为他们在科特林被看见。</target>
        </trans-unit>
        <trans-unit id="b73370969f5202ffabe72c59e5b9b17674a895a5" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;toast&lt;/code&gt; function is defined in the &lt;a href=&quot;https://github.com/Kotlin/anko&quot;&gt;Anko&lt;/a&gt; library.</source>
          <target state="translated">该 &lt;code&gt;toast&lt;/code&gt; 功能在定义&lt;a href=&quot;https://github.com/Kotlin/anko&quot;&gt;安口&lt;/a&gt;库。</target>
        </trans-unit>
        <trans-unit id="28d1165f482266ce4727ebc682f071fdd99069b9" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;typedef struct { .. } TYPE_NAME&lt;/code&gt; syntax is used in C language to declare a structure. &lt;a href=&quot;https://stackoverflow.com/questions/1675351/typedef-struct-vs-struct-definitions&quot;&gt;The thread&lt;/a&gt; provides more explanations of that pattern.</source>
          <target state="translated">的 &lt;code&gt;typedef struct { .. } TYPE_NAME&lt;/code&gt; 语法在C语言用于声明的结构。&lt;a href=&quot;https://stackoverflow.com/questions/1675351/typedef-struct-vs-struct-definitions&quot;&gt;该线程&lt;/a&gt;提供了对该模式的更多解释。</target>
        </trans-unit>
        <trans-unit id="98db59501bac8408cab0fac3a9f3341579e6d212" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;valueOf()&lt;/code&gt; method throws an &lt;code&gt;IllegalArgumentException&lt;/code&gt; if the specified name does not match any of the enum constants defined in the class.</source>
          <target state="translated">所述 &lt;code&gt;valueOf()&lt;/code&gt; 方法抛出 &lt;code&gt;IllegalArgumentException&lt;/code&gt; 如果指定的名称不匹配任何在该类中定义的枚举常数。</target>
        </trans-unit>
        <trans-unit id="3e338c07817ae57fb7dbab7add74e2021cf2d7f2" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;version&lt;/code&gt; should be literal in this block, and it cannot be applied from another build script.</source>
          <target state="translated">该 &lt;code&gt;version&lt;/code&gt; 在此块中应为原义，并且不能从其他构建脚本中应用。</target>
        </trans-unit>
        <trans-unit id="271e23dc79ae024533b3813b505d0f8c07b0807d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;while&lt;/code&gt; loop is similar to Python (but keep in mind that the condition must be an actual boolean expression, as there's no concept of truthy or falsy values).</source>
          <target state="translated">的 &lt;code&gt;while&lt;/code&gt; 循环类似于Python的（但请记住，条件必须是实际的布尔表达式，因为没有truthy或falsy值的概念）。</target>
        </trans-unit>
        <trans-unit id="223ff8adc648a88f8fddcdbfcf941801bfcdb1cf" translate="yes" xml:space="preserve">
          <source>The &lt;em&gt;New Project&lt;/em&gt; wizard in IntelliJ IDEA can be used to start a new Kotlin/Native project with just one click. Check out the &lt;em&gt;Kotlin&lt;/em&gt; section and select the &lt;em&gt;Native | Gradle&lt;/em&gt; option to generate the project. For a better understanding and to explain what's happening, in this tutorial we'll create the project manually.</source>
          <target state="translated">IntelliJ IDEA中的&amp;ldquo; &lt;em&gt;新建项目&amp;rdquo;&lt;/em&gt;向导可用于一键启动新的Kotlin / Native项目。&lt;em&gt;签&lt;/em&gt;出&lt;em&gt;Kotlin&lt;/em&gt;部分，然后选择&lt;em&gt;Native | Gradle&lt;/em&gt;选项生成项目。为了更好地理解和解释正在发生的事情，在本教程中，我们将手动创建项目。</target>
        </trans-unit>
        <trans-unit id="7d53f956418818285247311dbf9f12e622bd802b" translate="yes" xml:space="preserve">
          <source>The &lt;em&gt;by&lt;/em&gt;-clause in the supertype list for &lt;code&gt;Derived&lt;/code&gt; indicates that &lt;code&gt;b&lt;/code&gt; will be stored internally in objects of &lt;code&gt;Derived&lt;/code&gt; and the compiler will generate all the methods of &lt;code&gt;Base&lt;/code&gt; that forward to &lt;code&gt;b&lt;/code&gt;.</source>
          <target state="translated">在&lt;em&gt;通过&lt;/em&gt;在超类列表-clause &lt;code&gt;Derived&lt;/code&gt; 表明， &lt;code&gt;b&lt;/code&gt; 将在内部在对象存储 &lt;code&gt;Derived&lt;/code&gt; ，编译器将生成所有的方法 &lt;code&gt;Base&lt;/code&gt; 是期待 &lt;code&gt;b&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="213b555bea1db5677fa1e760ddedf7cc9bc757bb" translate="yes" xml:space="preserve">
          <source>The &lt;em&gt;else&lt;/em&gt; branch is evaluated if none of the other branch conditions are satisfied. If &lt;em&gt;when&lt;/em&gt; is used as an expression, the &lt;em&gt;else&lt;/em&gt; branch is mandatory, unless the compiler can prove that all possible cases are covered with branch conditions (as, for example, with &lt;a href=&quot;enum-classes&quot;&gt;&lt;em&gt;enum&lt;/em&gt; class&lt;/a&gt; entries and &lt;a href=&quot;sealed-classes&quot;&gt;&lt;em&gt;sealed&lt;/em&gt; class&lt;/a&gt; subtypes).</source>
          <target state="translated">在&lt;em&gt;别人&lt;/em&gt;如果没有其他满足分支条件分支评估。如果将&lt;em&gt;when&lt;/em&gt;用作表达式，则&lt;em&gt;else&lt;/em&gt;分支是必需的，除非编译器可以证明所有可能的情况都被分支条件覆盖（例如，&lt;a href=&quot;enum-classes&quot;&gt;&lt;em&gt;枚举&lt;/em&gt;类&lt;/a&gt;条目和&lt;a href=&quot;sealed-classes&quot;&gt;&lt;em&gt;密封&lt;/em&gt;类&lt;/a&gt;子类型）。</target>
        </trans-unit>
        <trans-unit id="61bf16ef28ea6d5682c3a6e4f7b1d1fca409774d" translate="yes" xml:space="preserve">
          <source>The &lt;em&gt;is&lt;/em&gt; operator checks if an expression is an instance of a type. If an immutable local variable or property is checked for a specific type, there's no need to cast it explicitly:</source>
          <target state="translated">的&lt;em&gt;是&lt;/em&gt;操作者检查是否一个表达式是一个类型的一个实例。如果检查了不可变的局部变量或属性是否具有特定类型，则无需显式进行强制转换：</target>
        </trans-unit>
        <trans-unit id="f6350fa23a8337c14451639e9dda41ba02fbc154" translate="yes" xml:space="preserve">
          <source>The &lt;em&gt;kotlin-maven-plugin&lt;/em&gt; compiles Kotlin sources and modules. Currently only Maven v3 is supported.</source>
          <target state="translated">所述&lt;em&gt;科特林-行家-插件&lt;/em&gt;编译科特林源和模块。当前仅支持Maven v3。</target>
        </trans-unit>
        <trans-unit id="ac3430431502d340786bc5ac5f5a79619bd1b1b8" translate="yes" xml:space="preserve">
          <source>The &lt;em&gt;mapping&lt;/em&gt; transformation creates a collection from the results of a function on the elements of another collection. The basic mapping function is &lt;a href=&quot;../../api/latest/jvm/stdlib/kotlin.collections/map&quot;&gt;&lt;code&gt;map()&lt;/code&gt;&lt;/a&gt;. It applies the given lambda function to each subsequent element and returns the list of the lambda results. The order of results is the same as the original order of elements. To apply a transformation that additionally uses the element index as an argument, use &lt;a href=&quot;../../api/latest/jvm/stdlib/kotlin.collections/map-indexed&quot;&gt;&lt;code&gt;mapIndexed()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">的&lt;em&gt;映射&lt;/em&gt;转换创建从在另一集合中的元素的函数的结果的集合。基本的映射函数是&lt;a href=&quot;../../api/latest/jvm/stdlib/kotlin.collections/map&quot;&gt; &lt;code&gt;map()&lt;/code&gt; &lt;/a&gt;。它将给定的lambda函数应用于每个后续元素，并返回lambda结果的列表。结果的顺序与元素的原始顺序相同。要应用额外使用元素索引作为参数的转换，请使用&lt;a href=&quot;../../api/latest/jvm/stdlib/kotlin.collections/map-indexed&quot;&gt; &lt;code&gt;mapIndexed()&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="7f10d769163cad6919d11542a05d27b21373fb57" translate="yes" xml:space="preserve">
          <source>The &lt;em&gt;no-arg&lt;/em&gt; compiler plugin generates an additional zero-argument constructor for classes with a specific annotation.</source>
          <target state="translated">在&lt;em&gt;无参数&lt;/em&gt;编译器插件生成用于与特定注解类的附加无参数构造。</target>
        </trans-unit>
        <trans-unit id="5691855d07c59433c1b89721a503fe2ada65d67c" translate="yes" xml:space="preserve">
          <source>The &lt;em&gt;override&lt;/em&gt; modifier is required for &lt;code&gt;Circle.draw()&lt;/code&gt;. If it were missing, the compiler would complain. If there is no &lt;em&gt;open&lt;/em&gt; modifier on a function, like &lt;code&gt;Shape.fill()&lt;/code&gt;, declaring a method with the same signature in a subclass is illegal, either with &lt;em&gt;override&lt;/em&gt; or without it. The &lt;em&gt;open&lt;/em&gt; modifier has no effect when added on members of a final class (i.e.. a class with no &lt;em&gt;open&lt;/em&gt; modifier).</source>
          <target state="translated">对于 &lt;code&gt;Circle.draw()&lt;/code&gt; ,必须使用&lt;em&gt;override&lt;/em&gt;修饰符。如果丢失，编译器会抱怨。如果像 &lt;code&gt;Shape.fill()&lt;/code&gt; 这样的函数没有&lt;em&gt;打开&lt;/em&gt;修饰符，则在子类中声明具有相同签名的方法是非法的，无论是否&lt;em&gt;重写&lt;/em&gt;。当将&lt;em&gt;open&lt;/em&gt;修饰符添加到最后一个类的成员（即没有&lt;em&gt;open&lt;/em&gt;修饰符的类）上时，该修饰符无效。&lt;em&gt;&lt;/em&gt;&lt;em&gt;&lt;/em&gt;&lt;em&gt;&lt;/em&gt;&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="c23eadbd5827ce2bda3043305cafb8fee54b97d1" translate="yes" xml:space="preserve">
          <source>The &lt;em&gt;override&lt;/em&gt; modifier is required for &lt;code&gt;Derived.v()&lt;/code&gt;. If it were missing, the compiler would complain. If there is no &lt;em&gt;open&lt;/em&gt; modifier on a function, like &lt;code&gt;Base.nv()&lt;/code&gt;, declaring a method with the same signature in a subclass is illegal, either with &lt;em&gt;override&lt;/em&gt; or without it. The &lt;em&gt;open&lt;/em&gt; modifier has no effect when added on members of a final class (i.e.. a class with no &lt;em&gt;open&lt;/em&gt; modifier).</source>
          <target state="translated">对于 &lt;code&gt;Derived.v()&lt;/code&gt; ,必须使用&lt;em&gt;override&lt;/em&gt;修饰符。如果丢失，编译器会抱怨。如果在诸如 &lt;code&gt;Base.nv()&lt;/code&gt; 之类的函数上没有&lt;em&gt;open&lt;/em&gt;修饰符，则在子类中声明具有相同签名的方法是非法的，无论是否&lt;em&gt;重写&lt;/em&gt;。当将&lt;em&gt;open&lt;/em&gt;修饰符添加到最终类的成员（即，没有&lt;em&gt;open&lt;/em&gt;修饰符的类）的成员上时，则无效。&lt;em&gt;&lt;/em&gt;&lt;em&gt;&lt;/em&gt;&lt;em&gt;&lt;/em&gt;&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="7a6efa4e40ec720cdbba584f5f17332e3c02e6f0" translate="yes" xml:space="preserve">
          <source>The &lt;em&gt;primitive data types&lt;/em&gt; are the most fundamental types in Kotlin; all other types are built up of these types and arrays thereof. Their representation is very efficient (both in terms of memory and CPU time), as they map to small byte groups that are directly manipulatable by the CPU.</source>
          <target state="translated">在&lt;em&gt;基本数据类型&lt;/em&gt;都在科特林最根本的类型; 所有其他类型均由这些类型及其数组组成。它们的表示非常有效（在内存和CPU时间方面），因为它们映射到可由CPU直接操作的小字节组。</target>
        </trans-unit>
        <trans-unit id="487cd135e968638b95e9f2832e5094575fc75a4e" translate="yes" xml:space="preserve">
          <source>The &lt;em&gt;return&lt;/em&gt;-expression returns from the nearest enclosing function, i.e. &lt;code&gt;foo&lt;/code&gt;. (Note that such non-local returns are supported only for lambda expressions passed to &lt;a href=&quot;inline-functions&quot;&gt;inline functions&lt;/a&gt;.) If we need to return from a lambda expression, we have to label it and qualify the &lt;em&gt;return&lt;/em&gt;:</source>
          <target state="translated">在&lt;em&gt;返回&lt;/em&gt;从最近的封闭功能-expression的回报，即 &lt;code&gt;foo&lt;/code&gt; 。（请注意，只有传递给&lt;a href=&quot;inline-functions&quot;&gt;内联函数的&lt;/a&gt; lambda表达式才支持此类非本地返回。）如果需要从lambda表达式返回，则必须对其进行标记并限定&lt;em&gt;返回值&lt;/em&gt;：</target>
        </trans-unit>
        <trans-unit id="cafe8afb40f89fdcda59dc51de02a6061deac76b" translate="yes" xml:space="preserve">
          <source>The &lt;em&gt;sam-with-receiver&lt;/em&gt; compiler plugin makes the first parameter of the annotated Java &quot;single abstract method&quot; (SAM) interface method a receiver in Kotlin. This conversion only works when the SAM interface is passed as a Kotlin lambda, both for SAM adapters and SAM constructors (see the &lt;a href=&quot;java-interop#sam-conversions&quot;&gt;documentation&lt;/a&gt; for more details).</source>
          <target state="translated">所述&lt;em&gt;SAM-与接收器&lt;/em&gt;编译器插件使得注释的Java&amp;ldquo;一个抽象方法&amp;rdquo;（SAM）接口方法的第一个参数在科特林的接收器。仅当SAM适配器和SAM构造函数将SAM接口作为Kotlin lambda传递时，此转换才有效（请参阅&lt;a href=&quot;java-interop#sam-conversions&quot;&gt;文档&lt;/a&gt;以获取更多详细信息）。</target>
        </trans-unit>
        <trans-unit id="2b5aab8f26eb6a59834e5185db5f935d540467ca" translate="yes" xml:space="preserve">
          <source>The &lt;em&gt;this&lt;/em&gt; keyword inside an extension function corresponds to the receiver object (the one that is passed before the dot). Now, we can call such a function on any &lt;code&gt;MutableList&amp;lt;Int&amp;gt;&lt;/code&gt;:</source>
          <target state="translated">扩展函数中的&lt;em&gt;this&lt;/em&gt;关键字对应于接收器对象（在点之前传递的对象）。现在，我们可以在任何 &lt;code&gt;MutableList&amp;lt;Int&amp;gt;&lt;/code&gt; 上调用这样的函数：</target>
        </trans-unit>
        <trans-unit id="610610ce4b9c2a06c0d2c740b86b1595d612ed87" translate="yes" xml:space="preserve">
          <source>The &lt;em&gt;when&lt;/em&gt; expression replaces the switch statement in C-like languages. In the simplest form it looks like this</source>
          <target state="translated">在&lt;em&gt;当&lt;/em&gt;表达式替换C的语言switch语句。以最简单的形式看起来像这样</target>
        </trans-unit>
        <trans-unit id="e4593e8bf83aea9987066006e1b0abd71f9ad1e3" translate="yes" xml:space="preserve">
          <source>The &lt;strong&gt;Coroutines&lt;/strong&gt; tab contains information on running or suspended coroutines.</source>
          <target state="translated">该&lt;strong&gt;协同程序&lt;/strong&gt;选项卡包含运行或挂起的协同程序的信息。</target>
        </trans-unit>
        <trans-unit id="fc25df34385ceb3cf4562e5af15fbfdf26d8c120" translate="yes" xml:space="preserve">
          <source>The &lt;strong&gt;Coroutines&lt;/strong&gt; tab contains information on running or suspended coroutines. It shows that there are three coroutines. The first one has the &lt;strong&gt;RUNNING&lt;/strong&gt; status, and the other two have the &lt;strong&gt;CREATED&lt;/strong&gt; status.</source>
          <target state="translated">该&lt;strong&gt;协同程序&lt;/strong&gt;选项卡包含运行或挂起的协同程序的信息。它表明有三个协程。第一个处于&amp;ldquo;&lt;strong&gt;运行中&amp;rdquo;&lt;/strong&gt;状态，其他两个处于&amp;ldquo;已&lt;strong&gt;创建&amp;rdquo;&lt;/strong&gt;状态。</target>
        </trans-unit>
        <trans-unit id="788f812830f8a46ef15a78708bb404f883cce900" translate="yes" xml:space="preserve">
          <source>The &lt;strong&gt;Debug Tool Window&lt;/strong&gt; now contains a new &lt;strong&gt;Coroutines&lt;/strong&gt; tab. In this tab, you can find information about both currently running and suspended coroutines. The coroutines are grouped by the dispatcher they are running on.</source>
          <target state="translated">在&lt;strong&gt;调试工具窗口&lt;/strong&gt;现在包含一个新的&lt;strong&gt;协同程序&lt;/strong&gt;选项卡。在此标签中，您可以找到有关当前正在运行和已暂停的协程的信息。协程由运行它们的调度程序分组。</target>
        </trans-unit>
        <trans-unit id="5b6868e043da075558049d4d1c51d3e16f9899e6" translate="yes" xml:space="preserve">
          <source>The &lt;strong&gt;Debug&lt;/strong&gt; tool window appears.</source>
          <target state="translated">出现&amp;ldquo;&lt;strong&gt;调试&lt;/strong&gt;工具&amp;rdquo;窗口。</target>
        </trans-unit>
        <trans-unit id="48f0ab099248e8d585f6091eee52384ecaffb465" translate="yes" xml:space="preserve">
          <source>The &lt;strong&gt;Debug&lt;/strong&gt; tool window appears:</source>
          <target state="translated">出现&amp;ldquo;&lt;strong&gt;调试&lt;/strong&gt;工具&amp;rdquo;窗口：</target>
        </trans-unit>
        <trans-unit id="4474dcb438fb0b1d5730dee1b01c00e81230dea0" translate="yes" xml:space="preserve">
          <source>The &lt;strong&gt;Debug&lt;/strong&gt; tool window contains the &lt;strong&gt;Coroutines&lt;/strong&gt; tab. In this tab, you can find information about both currently running and suspended coroutines. The coroutines are grouped by the dispatcher they are running on.</source>
          <target state="translated">在&lt;strong&gt;调试&lt;/strong&gt;工具窗口中包含了&lt;strong&gt;协同程序&lt;/strong&gt;选项卡。在此标签中，您可以找到有关当前正在运行和已暂停的协程的信息。协程由运行它们的调度程序分组。</target>
        </trans-unit>
        <trans-unit id="0944c672efb8d3cb2c26dddcbfd14a013cec2059" translate="yes" xml:space="preserve">
          <source>The &lt;strong&gt;Frames&lt;/strong&gt; tab contains the call stack.</source>
          <target state="translated">该&lt;strong&gt;框架&lt;/strong&gt;选项卡包含调用堆栈。</target>
        </trans-unit>
        <trans-unit id="7bf4380b0d9c396f248496156eecf62a4cafb8d3" translate="yes" xml:space="preserve">
          <source>The &lt;strong&gt;Variables&lt;/strong&gt; tab contains variables in the current context.</source>
          <target state="translated">该&lt;strong&gt;变量&lt;/strong&gt;选项卡包含在当前的环境变量。</target>
        </trans-unit>
        <trans-unit id="c4f79bc1fa7ad1d6857747747252bb7bc3cfc87c" translate="yes" xml:space="preserve">
          <source>The &lt;strong&gt;Variables&lt;/strong&gt; tab contains variables in the current context. It tells us that the flow is emitting the first value.</source>
          <target state="translated">该&lt;strong&gt;变量&lt;/strong&gt;选项卡包含在当前的环境变量。它告诉我们流正在发出第一个值。</target>
        </trans-unit>
        <trans-unit id="64ff96f8d5986618b0177325f56f06db0b6ef27e" translate="yes" xml:space="preserve">
          <source>The &lt;strong&gt;cinterop&lt;/strong&gt; tool produces &lt;code&gt;.klib&lt;/code&gt; wrappers for native libraries as its main output. For example, using the simple &lt;code&gt;libgit2.def&lt;/code&gt; native library definition file provided in your Kotlin/Native distribution</source>
          <target state="translated">该&lt;strong&gt;cinterop&lt;/strong&gt;工具产生 &lt;code&gt;.klib&lt;/code&gt; 的本地库作为其主输出包装。例如，使用Kotlin / Native发行版中提供的简单 &lt;code&gt;libgit2.def&lt;/code&gt; 本机库定义文件</target>
        </trans-unit>
        <trans-unit id="3afe66cbf747b6ceb2175d27e523f7de3f8680c5" translate="yes" xml:space="preserve">
          <source>The &lt;strong&gt;klib&lt;/strong&gt; library management utility allows you to inspect and install the libraries.</source>
          <target state="translated">该&lt;strong&gt;klib&lt;/strong&gt;库管理工具允许你检查和安装库。</target>
        </trans-unit>
        <trans-unit id="4754f312fedbc815f86ed89afbc9edf502f5ba2a" translate="yes" xml:space="preserve">
          <source>The &lt;strong&gt;out&lt;/strong&gt; modifier is called a &lt;strong&gt;variance annotation&lt;/strong&gt;, and since it is provided at the type parameter declaration site, we talk about &lt;strong&gt;declaration-site variance&lt;/strong&gt;. This is in contrast with Java's &lt;strong&gt;use-site variance&lt;/strong&gt; where wildcards in the type usages make the types covariant.</source>
          <target state="translated">该&lt;strong&gt;出&lt;/strong&gt;修饰符被称为&lt;strong&gt;方差注释&lt;/strong&gt;，并且由于它是在类型参数声明的网站提供的，我们谈论&lt;strong&gt;的声明站点变化&lt;/strong&gt;。这与Java的&lt;strong&gt;使用站点差异&lt;/strong&gt;相反，在Java中，&lt;strong&gt;使用&lt;/strong&gt;类型中的通配符使类型成为协变。</target>
        </trans-unit>
        <trans-unit id="e4cdeee14d0ede31e2c00aaa982268d6ad103b09" translate="yes" xml:space="preserve">
          <source>The &lt;strong&gt;wildcard type argument&lt;/strong&gt;&lt;code&gt;? extends E&lt;/code&gt; indicates that this method accepts a collection of objects of &lt;code&gt;E&lt;/code&gt;&lt;em&gt;or some subtype of&lt;/em&gt;&lt;code&gt;E&lt;/code&gt;, not just &lt;code&gt;E&lt;/code&gt; itself. This means that we can safely &lt;strong&gt;read&lt;/strong&gt;&lt;code&gt;E&lt;/code&gt;'s from items (elements of this collection are instances of a subclass of E), but &lt;strong&gt;cannot write&lt;/strong&gt; to it since we do not know what objects comply to that unknown subtype of &lt;code&gt;E&lt;/code&gt;. In return for this limitation, we have the desired behaviour: &lt;code&gt;Collection&amp;lt;String&amp;gt;&lt;/code&gt;&lt;em&gt;is&lt;/em&gt; a subtype of &lt;code&gt;Collection&amp;lt;? extends Object&amp;gt;&lt;/code&gt;. In &quot;clever words&quot;, the wildcard with an &lt;strong&gt;extends&lt;/strong&gt;-bound (&lt;strong&gt;upper&lt;/strong&gt; bound) makes the type &lt;strong&gt;covariant&lt;/strong&gt;.</source>
          <target state="translated">该&lt;strong&gt;通配符类型参数&lt;/strong&gt; &lt;code&gt;? extends E&lt;/code&gt; 表明，该方法接受对象的集合 &lt;code&gt;E&lt;/code&gt; &lt;em&gt;或某些亚型&lt;/em&gt; &lt;code&gt;E&lt;/code&gt; ，不只是 &lt;code&gt;E&lt;/code&gt; 本身。这意味着我们可以从项目中安全地&lt;strong&gt;读取&lt;/strong&gt; &lt;code&gt;E&lt;/code&gt; （此集合的元素是E的子类的实例），但是由于我们不知道哪些对象符合该 &lt;code&gt;E&lt;/code&gt; 的未知子类型，&lt;strong&gt;因此无法对其进行写入&lt;/strong&gt;。作为此限制的回报，我们具有所需的行为： &lt;code&gt;Collection&amp;lt;String&amp;gt;&lt;/code&gt; &lt;em&gt;是&lt;/em&gt; &lt;code&gt;Collection&amp;lt;? extends Object&amp;gt;&lt;/code&gt; 的子类型。扩展Object&amp;gt;。在&amp;ldquo;聪明话&amp;rdquo;，用一个通配符&lt;strong&gt;延伸&lt;/strong&gt;结合的（&lt;strong&gt;上&lt;/strong&gt;&lt;em&gt;&lt;/em&gt;&lt;strong&gt;&lt;/strong&gt;&lt;strong&gt;&lt;/strong&gt;bound）使类型为&lt;strong&gt;covariant&lt;/strong&gt;。</target>
        </trans-unit>
        <trans-unit id="1a90eeb87b3e982cfd1ef4a4b65cfd6c27586462" translate="yes" xml:space="preserve">
          <source>The Android world has many popular frameworks simplifying development. You can use the same frameworks if you develop in Kotlin, often as easily as you'd do that in Java. This tutorial provides examples and highlights the differences in settings.</source>
          <target state="translated">Android世界有许多流行的框架简化了开发。如果你用Kotlin开发,可以使用同样的框架,往往就像在Java中开发一样简单。本教程提供了一些例子,并强调了设置的差异。</target>
        </trans-unit>
        <trans-unit id="3430e3a872bb2996105b11f8b1c91c259c56b1b4" translate="yes" xml:space="preserve">
          <source>The Bintray plugin doesn&amp;rsquo;t support publishing Gradle module metadata, but there are a couple of ways to get around this issue:</source>
          <target state="translated">Bintray插件不支持发布Gradle模块元数据，但是有两种方法可以解决此问题：</target>
        </trans-unit>
        <trans-unit id="d41ba3261445c389f8874772f5879ab48af811af" translate="yes" xml:space="preserve">
          <source>The C data variable containing the pointer to &lt;code&gt;T&lt;/code&gt;.</source>
          <target state="translated">包含指向 &lt;code&gt;T&lt;/code&gt; 的指针的C数据变量。</target>
        </trans-unit>
        <trans-unit id="05360f394dd3e60e07e614be2588088eb89e3b72" translate="yes" xml:space="preserve">
          <source>The C data variable located in memory.</source>
          <target state="translated">位于内存中的C数据变量。</target>
        </trans-unit>
        <trans-unit id="cf919179eecf4647d490ce563cdd6bff132af96d" translate="yes" xml:space="preserve">
          <source>The C function.</source>
          <target state="translated">C功能。</target>
        </trans-unit>
        <trans-unit id="d36502dcbc1bebedd6773776218e3117a26820bc" translate="yes" xml:space="preserve">
          <source>The C primitive-typed variable located in memory.</source>
          <target state="translated">位于内存中的C基元类型的变量。</target>
        </trans-unit>
        <trans-unit id="639b72b8a51545cc688d8100df8871c5e14d7a1a" translate="yes" xml:space="preserve">
          <source>The C struct-typed variable located in memory.</source>
          <target state="translated">位于内存中的C结构类型的变量。</target>
        </trans-unit>
        <trans-unit id="c4b0fbfe88d7c41e706fcbcc447e39c33c492192" translate="yes" xml:space="preserve">
          <source>The CocoaPods plugin also allows using CocoaPods libraries without manual configuring cinterop parameters (see the &lt;a href=&quot;../building-mpp-with-gradle#cinterop-support&quot;&gt;corresponding section&lt;/a&gt; of the multiplatform plugin documentation). The &lt;code&gt;cocoapods { ... }&lt;/code&gt; code block allows you to add dependencies on CocoaPods libraries.</source>
          <target state="translated">CocoaPods插件还允许使用CocoaPods库，而无需手动配置cinterop参数（请参阅多平台插件文档的&lt;a href=&quot;../building-mpp-with-gradle#cinterop-support&quot;&gt;相应部分&lt;/a&gt;）。该 &lt;code&gt;cocoapods { ... }&lt;/code&gt; 代码块可以让你在的CocoaPods库添加依赖。</target>
        </trans-unit>
        <trans-unit id="8779fd3a2cac48558378b86549bbda66333c4276" translate="yes" xml:space="preserve">
          <source>The CocoaPods support is implemented in a separate Gradle plugin: &lt;code&gt;org.jetbrains.kotlin.native.cocoapods&lt;/code&gt;.</source>
          <target state="translated">CocoaPods支持在单独的Gradle插件中实现： &lt;code&gt;org.jetbrains.kotlin.native.cocoapods&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="bd3aa1e3e57f3eb3ef63cd39980df09053647402" translate="yes" xml:space="preserve">
          <source>The Coroutine Debugger of the Kotlin plugin simplifies debugging coroutines in IntelliJ IDEA.</source>
          <target state="translated">Kotlin插件的Coroutine调试器简化了在IntelliJ IDEA中调试coroutine的工作。</target>
        </trans-unit>
        <trans-unit id="24a56079ca4afabfa7a909e10193add3dd7a492a" translate="yes" xml:space="preserve">
          <source>The DOM also provides us a way to retrieve a specific element by ID, name, class name, tag name and so on. All returned elements are of type &lt;code&gt;NodeList&lt;/code&gt;, and to access members we need to cast them to the specific type of element. The code below shows how we could access an input element on the page:</source>
          <target state="translated">DOM还为我们提供了一种通过ID，名称，类名称，标签名称等检索特定元素的方法。返回的所有元素均为 &lt;code&gt;NodeList&lt;/code&gt; 类型，要访问成员，我们需要将其强制转换为特定类型的元素。下面的代码显示了如何访问页面上的输入元素：</target>
        </trans-unit>
        <trans-unit id="5e5d725eeffdb400057e1d8991c3e79a23a2a6af" translate="yes" xml:space="preserve">
          <source>The Dukat integration for Gradle has received minor naming and functionality changes with Kotlin 1.4.0.</source>
          <target state="translated">在Kotlin 1.4.0中,Gradle的Dukat集成在命名和功能上有了细微的变化。</target>
        </trans-unit>
        <trans-unit id="325910eae4ee7077ed16505d94cb7161a53ff4ff" translate="yes" xml:space="preserve">
          <source>The Entry Point</source>
          <target state="translated">进入点</target>
        </trans-unit>
        <trans-unit id="c1f2de3caa83760aa037581086bf37c054caebbb" translate="yes" xml:space="preserve">
          <source>The Gradle file is pretty much standard for Spring Boot. The only differences are the structure layout for source folders for Kotlin, the required Kotlin dependencies and the &lt;a href=&quot;../reference/compiler-plugins#kotlin-spring-compiler-plugi&quot;&gt;&lt;em&gt;kotlin-spring&lt;/em&gt;&lt;/a&gt; Gradle plugin (CGLIB proxies used for example for &lt;code&gt;@Configuration&lt;/code&gt; and &lt;code&gt;@Bean&lt;/code&gt; processing require &lt;code&gt;open&lt;/code&gt; classes).</source>
          <target state="translated">对于Spring Boot，Gradle文件几乎是标准的。唯一的区别是Kotlin的源文件夹的结构布局，所需的Kotlin依赖关系和&lt;a href=&quot;../reference/compiler-plugins#kotlin-spring-compiler-plugi&quot;&gt;&lt;em&gt;kotlin-spring&lt;/em&gt;&lt;/a&gt; Gradle插件（用于 &lt;code&gt;@Configuration&lt;/code&gt; 和 &lt;code&gt;@Bean&lt;/code&gt; 处理的CGLIB代理需要 &lt;code&gt;open&lt;/code&gt; 类）。</target>
        </trans-unit>
        <trans-unit id="af4ea41e06d67df72de18198c84923c5e721e071" translate="yes" xml:space="preserve">
          <source>The Gradle plugin provides a separate task that creates a universal framework for iOS targets from several regular ones. The example below shows how to use this task. Note that the fat framework must have the same base name as the initial frameworks.</source>
          <target state="translated">Gradle插件提供了一个单独的任务,它可以从几个常规的目标创建一个iOS目标的通用框架。下面的例子展示了如何使用这个任务。需要注意的是,胖子框架必须与初始框架的基名相同。</target>
        </trans-unit>
        <trans-unit id="9f74ca6bef3427e6249723da9d4ccaf98eb70bf4" translate="yes" xml:space="preserve">
          <source>The Groovy language is the first supported scripting language for Gradle, it leverages the power of dynamic typing and runtime features of the language. It is also possible to use Kotlin in Gradle scripts. Being a statically-typed language, it plays better with IDEs when it comes to compilation and error detection.</source>
          <target state="translated">Groovy语言是Gradle第一个支持的脚本语言,它利用了该语言的动态类型和运行时特性的力量。在Gradle脚本中也可以使用Kotlin。作为一种静态类型的语言,在编译和错误检测方面,它与IDE玩得更好。</target>
        </trans-unit>
        <trans-unit id="efa31b56beb50cb747605ae05725fa853a4a4ec2" translate="yes" xml:space="preserve">
          <source>The IR backend &lt;strong&gt;does not make Kotlin declarations available to JavaScript&lt;/strong&gt; by default at all. To make Kotlin declarations visible to JavaScript, they &lt;strong&gt;must be&lt;/strong&gt; annotated with &lt;a href=&quot;js-to-kotlin-interop#jsexport-annotation&quot;&gt;&lt;code&gt;@JsExport&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">默认情况下，IR后端&lt;strong&gt;根本不会使Kotlin声明可用于JavaScript&lt;/strong&gt;。要使Kotlin声明对JavaScript可见，&lt;strong&gt;必须&lt;/strong&gt;使用&lt;a href=&quot;js-to-kotlin-interop#jsexport-annotation&quot;&gt; &lt;code&gt;@JsExport&lt;/code&gt; 对其&lt;/a&gt;&lt;strong&gt;进行&lt;/strong&gt;注释。</target>
        </trans-unit>
        <trans-unit id="755fcf74e20f2d2ddd913b11ca69555b3cbd9313" translate="yes" xml:space="preserve">
          <source>The IR compiler backend also has some discrepancies in comparison to the default backend. When trying out the new backend, it's good to be mindful of these possible pitfalls.</source>
          <target state="translated">IR编译器后端与默认后端相比也有一些差异。在试用新的后端时,最好注意这些可能的陷阱。</target>
        </trans-unit>
        <trans-unit id="4151edd0fc4780c88357f0d2094d84de6aa64553" translate="yes" xml:space="preserve">
          <source>The IR compiler backend is available starting with Kotlin 1.4.0 through the Kotlin/JS Gradle plugin. To enable it in your project, pass a compiler type to the &lt;code&gt;js&lt;/code&gt; function in your Gradle build script:</source>
          <target state="translated">从Kotlin 1.4.0开始，可以通过Kotlin / JS Gradle插件使用IR编译器后端。要在您的项目中启用它，请将编译器类型传递给Gradle构建脚本中的 &lt;code&gt;js&lt;/code&gt; 函数：</target>
        </trans-unit>
        <trans-unit id="c9686505fe7f54579b832493ec5b1983b12000c6" translate="yes" xml:space="preserve">
          <source>The JS typed arrays support that translates Kotlin primitive arrays, such as &lt;code&gt;IntArray&lt;/code&gt;, &lt;code&gt;DoubleArray&lt;/code&gt;, into &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Typed_arrays&quot;&gt;JavaScript typed arrays&lt;/a&gt;, that was previously an opt-in feature, has been enabled by default.</source>
          <target state="translated">JS类型的数组支持可将Kotlin基本数组（例如 &lt;code&gt;IntArray&lt;/code&gt; ， &lt;code&gt;DoubleArray&lt;/code&gt; ）转换为&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Typed_arrays&quot;&gt;JavaScript类型的数组&lt;/a&gt;（以前是选择加入功能），默认情况下已启用。</target>
        </trans-unit>
        <trans-unit id="37ed5aeb9956cf68199e058567f26ab71cd7268f" translate="yes" xml:space="preserve">
          <source>The JSR-305 checks can be configured by adding the &lt;code&gt;-Xjsr305&lt;/code&gt; compiler flag with the following options (and their combination):</source>
          <target state="translated">可以通过添加 &lt;code&gt;-Xjsr305&lt;/code&gt; 编译器标志以及以下选项（及其组合）来配置JSR-305检查：</target>
        </trans-unit>
        <trans-unit id="c894b80f33c243fce1a6e9a404bf349725ee326a" translate="yes" xml:space="preserve">
          <source>The Java source files are placed in the child directories of the Kotlin source roots. For example, the paths are:</source>
          <target state="translated">Java源文件放在Kotlin源根的子目录中。例如,其路径为:</target>
        </trans-unit>
        <trans-unit id="51612587c1c419278f755138c2099bb90c306242" translate="yes" xml:space="preserve">
          <source>The Jupyter Notebook is an open-source web application that allows you to create and share documents (aka &quot;notebooks&quot;) that can contain code, visualizations, and markdown text. &lt;a href=&quot;https://github.com/Kotlin/kotlin-jupyter&quot;&gt;Kotlin-jupyter&lt;/a&gt; is an open source project that brings Kotlin support to Jupyter Notebook.</source>
          <target state="translated">Jupyter Notebook是一个开源Web应用程序，它使您可以创建和共享可以包含代码，可视化效果和减价文本的文档（也称为&amp;ldquo;笔记本&amp;rdquo;）。&lt;a href=&quot;https://github.com/Kotlin/kotlin-jupyter&quot;&gt;Kotlin-jupyter&lt;/a&gt;是一个开源项目，将Kotlin支持引入Jupyter Notebook。</target>
        </trans-unit>
        <trans-unit id="8614662835decc941fb88cef784012c8f902a438" translate="yes" xml:space="preserve">
          <source>The Kotlin Android Extensions plugin allows us to obtain the same experience we have with some of these libraries, without having to add any extra code.</source>
          <target state="translated">Kotlin Android Extensions插件可以让我们获得与其中一些库相同的体验,而无需添加任何额外的代码。</target>
        </trans-unit>
        <trans-unit id="3fa035c9f4f03b0b989b6313990e3a366a7fc07b" translate="yes" xml:space="preserve">
          <source>The Kotlin Gradle plugin 1.4.10 works with Gradle 5.4 and later. The &lt;code&gt;kotlin-multiplatform&lt;/code&gt; plugin requires Gradle 6.0 or later.</source>
          <target state="translated">Kotlin Gradle插件1.4.10与Gradle 5.4及更高版本一起使用。在 &lt;code&gt;kotlin-multiplatform&lt;/code&gt; 插件需要摇篮6.0或更高版本。</target>
        </trans-unit>
        <trans-unit id="b801cd7f041e6d90c21e7238c859980046339a8a" translate="yes" xml:space="preserve">
          <source>The Kotlin Gradle plugin supports incremental compilation. Incremental compilation tracks changes of source files between builds so only files affected by these changes would be compiled.</source>
          <target state="translated">Kotlin Gradle插件支持增量编译。增量编译可以跟踪两次构建之间源文件的变化,因此只有受这些变化影响的文件才会被编译。</target>
        </trans-unit>
        <trans-unit id="11818c172874b525f41c4774ffd3a8d06183ee2a" translate="yes" xml:space="preserve">
          <source>The Kotlin Maven Plugin needs to be referenced to compile the sources:</source>
          <target state="translated">需要引用Kotlin Maven插件来编译源代码。</target>
        </trans-unit>
        <trans-unit id="07861e97fff4148e0e2dc19059a6eb8ea6818607" translate="yes" xml:space="preserve">
          <source>The Kotlin Multiplatform Gradle plugin is a tool for creating &lt;a href=&quot;multiplatform&quot;&gt;Kotlin multiplatform&lt;/a&gt; projects. Here we provide a reference of its contents; use it as a reminder when writing Gradle build scripts for Kotlin multiplatform projects. Learn the &lt;a href=&quot;mpp-intro&quot;&gt;concepts of Kotlin multiplatform projects, how to create and configure them&lt;/a&gt;.</source>
          <target state="translated">Kotlin Multiplatform Gradle插件是用于创建&lt;a href=&quot;multiplatform&quot;&gt;Kotlin多平台&lt;/a&gt;项目的工具。这里我们提供其内容的参考；在为Kotlin多平台项目编写Gradle构建脚本时，可将其用作提醒。了解&lt;a href=&quot;mpp-intro&quot;&gt;Kotlin跨平台项目&lt;/a&gt;的概念，以及如何创建和配置它们。</target>
        </trans-unit>
        <trans-unit id="d8c1bd6ec83b1ddaba95f254c85ffd64b43ba2c8" translate="yes" xml:space="preserve">
          <source>The Kotlin Project Wizard will only show the build systems supported on the selected project template.</source>
          <target state="translated">Kotlin项目向导将只显示所选项目模板上支持的构建系统。</target>
        </trans-unit>
        <trans-unit id="37663063036a12a6822fa57324a6d2a0ee490515" translate="yes" xml:space="preserve">
          <source>The Kotlin Scripting API now provides the ability to implement a compiled scripts cache, significantly speeding up subsequent executions of unchanged scripts. Our default advanced script implementation &lt;code&gt;kotlin-main-kts&lt;/code&gt; already has its own cache.</source>
          <target state="translated">Kotlin脚本API现在提供了实现已编译脚本缓存的功能，从而大大加快了未更改脚本的后续执行速度。我们的默认高级脚本实现 &lt;code&gt;kotlin-main-kts&lt;/code&gt; 已经拥有自己的缓存。</target>
        </trans-unit>
        <trans-unit id="e701f1b663fc8e1d541e7d7bed4b022ef1cd48e3" translate="yes" xml:space="preserve">
          <source>The Kotlin Standard Library provides a comprehensive set of tools for managing &lt;em&gt;collections&lt;/em&gt; &amp;ndash; groups of a variable number of items (possibly zero) that share significance to the problem being solved and are operated upon commonly.</source>
          <target state="translated">Kotlin标准库提供了一套全面的工具来管理&lt;em&gt;馆藏&lt;/em&gt; -数量可变的项目组（可能为零），这些项目对已解决的问题具有重要意义并可以共同操作。</target>
        </trans-unit>
        <trans-unit id="8a031299bd7c193b637e92a822d8538f69af9b3a" translate="yes" xml:space="preserve">
          <source>The Kotlin Standard Library provides implementations for basic collection types: sets, lists, and maps. A pair of interfaces represent each collection type:</source>
          <target state="translated">Kotlin标准库提供了基本集合类型的实现:集合、列表和地图。一对接口代表了每种集合类型。</target>
        </trans-unit>
        <trans-unit id="3f614163c9f0e1a9b558eccd140b5d89bbaff4cb" translate="yes" xml:space="preserve">
          <source>The Kotlin Standard Library provides living essentials for everyday work with Kotlin. These include:</source>
          <target state="translated">Kotlin标准库提供了使用Kotlin进行日常工作的生活必需品。其中包括:</target>
        </trans-unit>
        <trans-unit id="33a29a3734d935aaab60c852c81fd82eccf705fa" translate="yes" xml:space="preserve">
          <source>The Kotlin code is turned into very similar looking code in Swift. There are some small differences, though. In Kotlin any &lt;code&gt;object&lt;/code&gt; has only one instance. Kotlin &lt;code&gt;object Object&lt;/code&gt; now has a constructor in Swift, and we use the &lt;code&gt;Object()&lt;/code&gt; syntax to access the only instance of it. The instance is always the same in Swift, so that &lt;code&gt;Object() === Object()&lt;/code&gt; is true. Methods and property names are translated as-is. Kotlin &lt;code&gt;String&lt;/code&gt; is turned into Swift &lt;code&gt;String&lt;/code&gt; too. Swift hides &lt;code&gt;NSNumber*&lt;/code&gt; boxing from us too. We pass Swift closure to Kotlin and call a Kotlin lambda function from Swift too.</source>
          <target state="translated">在Swift中，Kotlin代码变成了非常相似的代码。不过，还是有一些细微的差别。在Kotlin中，任何 &lt;code&gt;object&lt;/code&gt; 只有一个实例。 Kotlin &lt;code&gt;object Object&lt;/code&gt; 现在在Swift中具有一个构造函数，我们使用 &lt;code&gt;Object()&lt;/code&gt; 语法访问它的唯一实例。实例在Swift中始终是相同的，因此 &lt;code&gt;Object() === Object()&lt;/code&gt; 为true。方法和属性名称按原样翻译。 Kotlin &lt;code&gt;String&lt;/code&gt; 也变成了Swift &lt;code&gt;String&lt;/code&gt; 。 Swift 也向我们隐藏了 &lt;code&gt;NSNumber*&lt;/code&gt; 拳击。我们将Swift闭包传递给Kotlin，也从Swift调用Kotlin lambda函数。</target>
        </trans-unit>
        <trans-unit id="a82d7ab28c8dc762af0699f165239106b9d7ca89" translate="yes" xml:space="preserve">
          <source>The Kotlin collections package contains extension functions for popular operations on sets: finding intersections, merging, or subtracting collections from each other.</source>
          <target state="translated">Kotlin集合包包含了对集合的常用操作的扩展函数:寻找交集、合并或相互减去集合。</target>
        </trans-unit>
        <trans-unit id="5352e834912895fb7e864dc749c6a67a63a5c1bd" translate="yes" xml:space="preserve">
          <source>The Kotlin collections package provides functions for sorting collections in natural, custom, and even random orders. On this page, we'll describe sorting functions that apply to &lt;a href=&quot;collections-overview#collection-types&quot;&gt;read-only&lt;/a&gt; collections. These functions return their result as a new collection containing the elements of the original collection in the requested order. To learn about functions for sorting &lt;a href=&quot;collections-overview#collection-types&quot;&gt;mutable&lt;/a&gt; collections in place, see the &lt;a href=&quot;list-operations#sorting&quot;&gt;List Specific Operations&lt;/a&gt;.</source>
          <target state="translated">Kotlin集合包提供了用于以自然，自定义甚至随机顺序对集合进行排序的功能。在此页面上，我们将描述适用于&lt;a href=&quot;collections-overview#collection-types&quot;&gt;只读&lt;/a&gt;集合的排序功能。这些函数将其结果作为一个新集合返回，该新集合按请求的顺序包含原始集合的元素。要了解就地对&lt;a href=&quot;collections-overview#collection-types&quot;&gt;可变&lt;/a&gt;集合进行排序的功能，请参阅&amp;ldquo; &lt;a href=&quot;list-operations#sorting&quot;&gt;特定&lt;/a&gt;于列表的操作&amp;rdquo;。</target>
        </trans-unit>
        <trans-unit id="606ec4093466ccf8ac7dfb28ac45fda128eb6073" translate="yes" xml:space="preserve">
          <source>The Kotlin compiler can now use information from type casts in type inference. If you&amp;rsquo;re calling a generic method that returns a type parameter &lt;code&gt;T&lt;/code&gt; and casting the return value to a specific type &lt;code&gt;Foo&lt;/code&gt;, the compiler now understands that &lt;code&gt;T&lt;/code&gt; for this call needs to be bound to the type &lt;code&gt;Foo&lt;/code&gt;.</source>
          <target state="translated">Kotlin编译器现在可以在类型推断中使用来自类型转换的信息。如果您正在调用一个返回类型参数 &lt;code&gt;T&lt;/code&gt; 的泛型方法，并将返回值转换为特定的 &lt;code&gt;Foo&lt;/code&gt; 类型，则编译器现在可以理解，此调用的 &lt;code&gt;T&lt;/code&gt; 必须绑定到 &lt;code&gt;Foo&lt;/code&gt; 类型。</target>
        </trans-unit>
        <trans-unit id="3ccc8c3cdb40fba2c36169a3fed32ce41fa13cee" translate="yes" xml:space="preserve">
          <source>The Kotlin compiler does extensive static analysis to provide warnings and reduce boilerplate. One of the most notable features is smartcasts &amp;mdash; with the ability to perform a cast automatically based on the performed type checks:</source>
          <target state="translated">Kotlin编译器会进行大量的静态分析，以提供警告并减少样板。最著名的功能之一是智能广播-具有根据执行的类型检查自动执行强制转换的功能：</target>
        </trans-unit>
        <trans-unit id="f6f1144b886b2db71119224ec2036f74f6631c9a" translate="yes" xml:space="preserve">
          <source>The Kotlin compiler for JS compiles Kotlin source files into JavaScript code. The command-line tool for Kotlin to JS compilation is &lt;code&gt;kotlinc-js&lt;/code&gt;.</source>
          <target state="translated">JS的Kotlin编译器将Kotlin源文件编译为JavaScript代码。Kotlin到JS编译的命令行工具是 &lt;code&gt;kotlinc-js&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="6565c92ec29ec823a2bafa138ea555e7d88f3c13" translate="yes" xml:space="preserve">
          <source>The Kotlin compiler for JVM compiles Kotlin source files into Java class files. The command-line tools for Kotlin to JVM compilation are &lt;code&gt;kotlinc&lt;/code&gt; and &lt;code&gt;kotlinc-jvm&lt;/code&gt;. You can also use them for executing Kotlin script files.</source>
          <target state="translated">用于JVM的Kotlin编译器将Kotlin源文件编译为Java类文件。用于Kotlin到JVM编译的命令行工具是 &lt;code&gt;kotlinc&lt;/code&gt; 和 &lt;code&gt;kotlinc-jvm&lt;/code&gt; 。您也可以使用它们来执行Kotlin脚本文件。</target>
        </trans-unit>
        <trans-unit id="9b9028d4b3725e4248715dfa8cff6060191e14fa" translate="yes" xml:space="preserve">
          <source>The Kotlin compiler provides all the necessary information about &lt;code&gt;prop&lt;/code&gt; in the arguments: the first argument &lt;code&gt;this&lt;/code&gt; refers to an instance of the outer class &lt;code&gt;C&lt;/code&gt; and &lt;code&gt;this::prop&lt;/code&gt; is a reflection object of the &lt;code&gt;KProperty&lt;/code&gt; type describing &lt;code&gt;prop&lt;/code&gt; itself.</source>
          <target state="translated">所述编译器科特林提供了有关所有必要的信息 &lt;code&gt;prop&lt;/code&gt; 中的参数：第一个参数 &lt;code&gt;this&lt;/code&gt; 指外类的一个实例 &lt;code&gt;C&lt;/code&gt; 和 &lt;code&gt;this::prop&lt;/code&gt; 是的反射对象 &lt;code&gt;KProperty&lt;/code&gt; 类型描述 &lt;code&gt;prop&lt;/code&gt; 本身。</target>
        </trans-unit>
        <trans-unit id="d8f9b6bf737be7b0aa49748489bb11aedc0ed8e0" translate="yes" xml:space="preserve">
          <source>The Kotlin compiler tries to comply with the following goals:</source>
          <target state="translated">Kotlin编译器试图遵守以下目标。</target>
        </trans-unit>
        <trans-unit id="84694c64245d13b803ebc2f9a85d6bc26cef8561" translate="yes" xml:space="preserve">
          <source>The Kotlin compiler will prefer using underlying types instead of wrappers to produce the most performant and optimized code. However, sometimes it is necessary to keep wrappers around. As a rule of thumb, inline classes are boxed whenever they are used as another type.</source>
          <target state="translated">Kotlin编译器会更倾向于使用底层类型而不是包装器,以产生性能最强、最优化的代码。然而,有时有必要保留包装器。作为一个经验法则,只要内联类被用作另一种类型,就会被装箱。</target>
        </trans-unit>
        <trans-unit id="b1defae0fa9dbdfd545ce26ab8cc2b793d3d11fe" translate="yes" xml:space="preserve">
          <source>The Kotlin compiler will use this restriction to aggressively optimize runtime representation of inline classes and substitute their instances with the value of the underlying property where possible removing constructor calls, GC pressure, and enabling other optimizations:</source>
          <target state="translated">Kotlin编译器将利用这一限制来积极优化内联类的运行时表示,并在可能的情况下用底层属性的值来替代它们的实例,消除构造函数调用、GC压力,并实现其他优化。</target>
        </trans-unit>
        <trans-unit id="d850079f06081665ec514cb65c4f969e8d679814" translate="yes" xml:space="preserve">
          <source>The Kotlin language and toolset are divided into many components such as the compilers for the JVM, JS and Native targets, the Standard Library, various accompanying tools and so on. Many of these components were officially released as &lt;strong&gt;Stable&lt;/strong&gt; which means that they are evolved in the backward-compatible way following the &lt;a href=&quot;kotlin-evolution&quot;&gt;principles&lt;/a&gt; of &lt;em&gt;Comfortable Updates&lt;/em&gt; and &lt;em&gt;Keeping the Language Modern&lt;/em&gt;. Among such stable components are, for example, the Kotlin compiler for the JVM, the Standard Library, and Coroutines.</source>
          <target state="translated">Kotlin语言和工具集分为许多组件，例如JVM，JS和Native目标的编译器，标准库，各种随附工具等。这些组件中的许多组件已正式发布为&lt;strong&gt;稳定版&lt;/strong&gt;，这意味着它们将按照向后兼容的方式&lt;a href=&quot;kotlin-evolution&quot;&gt;遵循&lt;/a&gt;&amp;ldquo;&lt;em&gt;舒适更新&lt;/em&gt;和&lt;em&gt;保持语言现代性&amp;rdquo;&lt;/em&gt;的原则进行发展。在这样的稳定​​组件中，例如有用于JVM的Kotlin编译器，标准库和协程。</target>
        </trans-unit>
        <trans-unit id="d4746f44c44c946d854825f5266310fd75bb7373" translate="yes" xml:space="preserve">
          <source>The Kotlin multiplatform plugin contains two specific functions for android targets. Two functions help you configure &lt;a href=&quot;https://developer.android.com/studio/build/build-variants&quot;&gt;build variants&lt;/a&gt;:</source>
          <target state="translated">Kotlin多平台插件包含两个针对android目标的特定功能。有两个功能可帮助您配置&lt;a href=&quot;https://developer.android.com/studio/build/build-variants&quot;&gt;构建变体&lt;/a&gt;：</target>
        </trans-unit>
        <trans-unit id="421148b46361ca016988f110ea6a768864eebc2b" translate="yes" xml:space="preserve">
          <source>The Kotlin plugin also bundles a Java to Kotlin converter (&lt;em&gt;J2K&lt;/em&gt;) that automatically converts Java files to Kotlin. To use J2K on a file, click &lt;strong&gt;Convert Java File to Kotlin File&lt;/strong&gt; in its context menu or in the &lt;strong&gt;Code&lt;/strong&gt; menu of IntelliJ IDEA.</source>
          <target state="translated">Kotlin插件还捆绑了Java到Kotlin转换器（&lt;em&gt;J2K&lt;/em&gt;），该转换器可自动将Java文件转换为Kotlin。要在文件上使用J2K，请在其上下文菜单或IntelliJ IDEA 的&lt;strong&gt;&amp;ldquo;代码&amp;rdquo;&lt;/strong&gt;菜单中单击&amp;ldquo; &lt;strong&gt;将Java文件转换为Kotlin文件&lt;/strong&gt;&lt;strong&gt;&amp;rdquo;&lt;/strong&gt;。</target>
        </trans-unit>
        <trans-unit id="f2e3c8e9ac9f87a3c6a3c66f4442bdb2dd4de716" translate="yes" xml:space="preserve">
          <source>The Kotlin plugin for IntelliJ IDEA supports &lt;a href=&quot;https://www.jetbrains.com/help/idea/scratches.html&quot;&gt;&lt;em&gt;scratches&lt;/em&gt;&lt;/a&gt; and &lt;em&gt;worksheets.&lt;/em&gt;</source>
          <target state="translated">IntelliJ IDEA的Kotlin插件支持&lt;a href=&quot;https://www.jetbrains.com/help/idea/scratches.html&quot;&gt;&lt;em&gt;暂存&lt;/em&gt;&lt;/a&gt;和&lt;em&gt;工作表。&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="8d656f515ef009525fec5de5fd6f927dce6dbed0" translate="yes" xml:space="preserve">
          <source>The Kotlin plugin supports &lt;a href=&quot;https://guides.gradle.org/using-build-cache/&quot;&gt;Gradle Build Cache&lt;/a&gt; (Gradle version 4.3 and above is required; caching is disabled with lower versions).</source>
          <target state="translated">Kotlin插件支持&lt;a href=&quot;https://guides.gradle.org/using-build-cache/&quot;&gt;Gradle Build Cache&lt;/a&gt;（需要版本4.3及更高版本；缓存在较低版本中被禁用）。</target>
        </trans-unit>
        <trans-unit id="bb12e098841b4fa9ff61972654d2907071becf6c" translate="yes" xml:space="preserve">
          <source>The Kotlin plugin supports &lt;a href=&quot;https://guides.gradle.org/using-build-cache/&quot;&gt;Gradle Build Cache&lt;/a&gt;.</source>
          <target state="translated">Kotlin插件支持&lt;a href=&quot;https://guides.gradle.org/using-build-cache/&quot;&gt;Gradle Build Cache&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="b34d5a1ffedf4d7025d37a83472c11c87599aa21" translate="yes" xml:space="preserve">
          <source>The Kotlin plugin&amp;rsquo;s migration tools help you migrate your projects from earlier versions of Kotlin to 1.4.0.</source>
          <target state="translated">Kotlin插件的迁移工具可帮助您将项目从Kotlin的早期版本迁移到1.4.0。</target>
        </trans-unit>
        <trans-unit id="4e886321a88f27f1211fc7e6327218f1b649f0a9" translate="yes" xml:space="preserve">
          <source>The Kotlin sources are arranged into &lt;a href=&quot;#configuring-source-sets&quot;&gt;source sets&lt;/a&gt;. In addition to Kotlin source files and resources, each source set may have its own dependencies. Source sets form a hierarchy that is built with the &lt;em&gt;&quot;depends on&quot;&lt;/em&gt; relation. A source set by itself is platform agnostic, but it may contain platform-specific code and dependencies if it's only compiled for a single platform.</source>
          <target state="translated">Kotlin源被整理成&lt;a href=&quot;#configuring-source-sets&quot;&gt;源集&lt;/a&gt;。除了Kotlin源文件和资源外，每个源集可能都有其自己的依赖性。源集形成使用&lt;em&gt;&amp;ldquo;依赖&amp;rdquo;&lt;/em&gt;关系构建的层次结构。源集本身与平台无关，但如果仅针对单个平台进行编译，则它可能包含特定于平台的代码和依赖项。</target>
        </trans-unit>
        <trans-unit id="16279f302f8a88f25bf841c70c273ae22857462c" translate="yes" xml:space="preserve">
          <source>The Kotlin standard library &lt;code&gt;kotlin-stdlib&lt;/code&gt; targets Java 6 and above. There are extended versions of the standard library that add support for some of the features of JDK 7 and JDK 8. To use these versions, add one of the following dependencies instead of &lt;code&gt;kotlin-stdlib&lt;/code&gt;:</source>
          <target state="translated">Kotlin标准库 &lt;code&gt;kotlin-stdlib&lt;/code&gt; 针对Java 6及更高版本。标准库的扩展版本增加了对JDK 7和JDK 8某些功能的支持。要使用这些版本，请添加以下依赖项之一而不是 &lt;code&gt;kotlin-stdlib&lt;/code&gt; ：</target>
        </trans-unit>
        <trans-unit id="e19faba3d18413b5a548d796d002602d1f6b7b0d" translate="yes" xml:space="preserve">
          <source>The Kotlin standard library contains extension functions for retrieving parts of a collection. These functions provide a variety of ways to select elements for the result collection: listing their positions explicitly, specifying the result size, and others.</source>
          <target state="translated">Kotlin标准库中包含了用于检索集合的部分内容的扩展函数,这些函数提供了为结果集合选择元素的各种方法:明确列出位置,指定结果大小等。这些函数提供了为结果集合选择元素的多种方法:显式列出它们的位置、指定结果大小等。</target>
        </trans-unit>
        <trans-unit id="aee8a9e1bcfd6364e58b2c53a697014bcd222ec2" translate="yes" xml:space="preserve">
          <source>The Kotlin standard library contains several functions whose sole purpose is to execute a block of code within the context of an object. When you call such a function on an object with a &lt;a href=&quot;lambdas&quot;&gt;lambda expression&lt;/a&gt; provided, it forms a temporary scope. In this scope, you can access the object without its name. Such functions are called &lt;em&gt;scope functions&lt;/em&gt;. There are five of them: &lt;code&gt;let&lt;/code&gt;, &lt;code&gt;run&lt;/code&gt;, &lt;code&gt;with&lt;/code&gt;, &lt;code&gt;apply&lt;/code&gt;, and &lt;code&gt;also&lt;/code&gt;.</source>
          <target state="translated">Kotlin标准库包含几个函数，其唯一目的是在对象的上下文中执行代码块。当您在提供了&lt;a href=&quot;lambdas&quot;&gt;lambda表达式&lt;/a&gt;的对象上调用此类函数时，它将形成一个临时作用域。在此作用域中，您可以访问没有其名称的对象。这种功能称为&lt;em&gt;范围功能&lt;/em&gt;。其中有五个： &lt;code&gt;let&lt;/code&gt; ， &lt;code&gt;run&lt;/code&gt; ， &lt;code&gt;with&lt;/code&gt; ， &lt;code&gt;apply&lt;/code&gt; 和 &lt;code&gt;also&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="41ab82952f2d2fb6d715a1d54dee47f369b23a5d" translate="yes" xml:space="preserve">
          <source>The Kotlin standard library is available on &lt;a href=&quot;https://www.npmjs.com/&quot;&gt;npm&lt;/a&gt; and we can simply include it in our &lt;code&gt;package.json&lt;/code&gt; as a dependency.</source>
          <target state="translated">Kotlin标准库在&lt;a href=&quot;https://www.npmjs.com/&quot;&gt;npm&lt;/a&gt;上可用，我们可以简单地将其作为依赖项包含在 &lt;code&gt;package.json&lt;/code&gt; 中。</target>
        </trans-unit>
        <trans-unit id="aa008c18e28c0e852d10e5f6a39e59c2d9ab879a" translate="yes" xml:space="preserve">
          <source>The Kotlin standard library is now fully compatible with the Java 9 module system, which forbids split packages (multiple jar files declaring classes in the same package). In order to support that, new artifacts &lt;code&gt;kotlin-stdlib-jdk7&lt;/code&gt; and &lt;code&gt;kotlin-stdlib-jdk8&lt;/code&gt; are introduced, which replace the old &lt;code&gt;kotlin-stdlib-jre7&lt;/code&gt; and &lt;code&gt;kotlin-stdlib-jre8&lt;/code&gt;.</source>
          <target state="translated">Kotlin标准库现在与Java 9模块系统完全兼容，该系统禁止拆分软件包（多个jar文件在同一软件包中声明类）。为了支持这一点， &lt;code&gt;kotlin-stdlib-jdk7&lt;/code&gt; 新的工件kotlin-stdlib-jdk7和 &lt;code&gt;kotlin-stdlib-jdk8&lt;/code&gt; ，它们替代了旧的 &lt;code&gt;kotlin-stdlib-jre7&lt;/code&gt; 和 &lt;code&gt;kotlin-stdlib-jre8&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="870dd777a08235fb630e1002ab11ba8d4d93e900" translate="yes" xml:space="preserve">
          <source>The Kotlin standard library offers a broad variety of functions for performing operations on collections. This includes simple operations, such as getting or adding elements, as well as more complex ones including search, sorting, filtering, transformations, and so on.</source>
          <target state="translated">Kotlin标准库提供了各种各样的函数,用于对集合进行操作。这包括简单的操作,如获取或添加元素,以及更复杂的操作,包括搜索、排序、过滤、转换等。</target>
        </trans-unit>
        <trans-unit id="c6f95e4bf784ef0f9127ccc1a33b6b0fef24a280" translate="yes" xml:space="preserve">
          <source>The Kotlin standard library provides a mechanism for requiring and giving explicit consent for using certain elements of APIs. This mechanism lets library developers inform users of their APIs about specific conditions that require opt-in, for example, if an API is in the experimental state and is likely to change in the future.</source>
          <target state="translated">Kotlin标准库提供了一种机制,用于要求和明确同意使用API的某些元素。这种机制让库开发者可以告知用户他们的API需要选择加入的特定条件,例如,如果一个API处于实验状态,并且在未来可能会改变。</target>
        </trans-unit>
        <trans-unit id="7504a2da20208970eadd23d20d879fda0292513a" translate="yes" xml:space="preserve">
          <source>The Kotlin standard library provides a series of wrappers around the JavaScript API for interacting with documents. The main component we'd usually access is the variable &lt;code&gt;document&lt;/code&gt;. Given we have access to this, we can simply read and write to the corresponding properties. For instance, to set the background of the page we can do</source>
          <target state="translated">Kotlin标准库围绕JavaScript API提供了一系列包装器，用于与文档进行交互。我们通常访问的主要组件是变量 &lt;code&gt;document&lt;/code&gt; 。有了我们可以访问的权限，我们可以简单地读取和写入相应的属性。例如，要设置页面背景，我们可以</target>
        </trans-unit>
        <trans-unit id="d4672fe3591cd8e490f322d7264f5d7b48dbb930" translate="yes" xml:space="preserve">
          <source>The Kotlin standard library provides a set of extension functions for collection &lt;em&gt;transformations&lt;/em&gt;. These functions build new collections from existing ones based on the transformation rules provided. In this page, we'll give an overview of the available collection transformation functions.</source>
          <target state="translated">Kotlin标准库提供了一组用于集合&lt;em&gt;转换&lt;/em&gt;的扩展功能。这些函数根据提供的转换规则从现有集合中构建新集合。在此页面中，我们将概述可用的集合转换功能。</target>
        </trans-unit>
        <trans-unit id="0d403b1b6b6cec3fc85d2c8444ad4595fd15211b" translate="yes" xml:space="preserve">
          <source>The Kotlin standard library provides developers with a mechanism for creating and using &lt;em&gt;experimental&lt;/em&gt; APIs. This mechanism lets library authors inform users that certain components of their API, such as classes or functions, are unstable and are likely to change in the future. Such changes may require rewriting and recompiling the client code. To prevent potential compatibility issues, the compiler warns users of the experimental status of such APIs and may require them to give their explicit consent to use the API.</source>
          <target state="translated">Kotlin标准库为开发人员提供了创建和使用&lt;em&gt;实验性&lt;/em&gt; API 的机制。通过这种机制，库作者可以通知用户其API的某些组件（例如类或函数）是不稳定的，并且将来可能会更改。此类更改可能需要重写并重新编译客户端代码。为避免潜在的兼容性问题，编译器会警告用户此类API的实验状态，并可能要求他们明确表示同意使用该API。</target>
        </trans-unit>
        <trans-unit id="25b12f54730219e6bd01543d34c7f6d86941696e" translate="yes" xml:space="preserve">
          <source>The Kotlin standard library provides extension functions for grouping collection elements. The basic function &lt;a href=&quot;../../api/latest/jvm/stdlib/kotlin.collections/group-by&quot;&gt;&lt;code&gt;groupBy()&lt;/code&gt;&lt;/a&gt; takes a lambda function and returns a &lt;code&gt;Map&lt;/code&gt;. In this map, each key is the lambda result and the corresponding value is the &lt;code&gt;List&lt;/code&gt; of elements on which this result is returned. This function can be used, for example, to group a list of &lt;code&gt;String&lt;/code&gt;s by their first letter.</source>
          <target state="translated">Kotlin标准库提供了用于对集合元素进行分组的扩展功能。基本函数&lt;a href=&quot;../../api/latest/jvm/stdlib/kotlin.collections/group-by&quot;&gt; &lt;code&gt;groupBy()&lt;/code&gt; &lt;/a&gt;使用lambda函数并返回 &lt;code&gt;Map&lt;/code&gt; 。在此映射中，每个键都是lambda结果，而对应的值是返回此结果的元素 &lt;code&gt;List&lt;/code&gt; 。例如，可以使用此函数将 &lt;code&gt;String&lt;/code&gt; 列表按首字母分组。</target>
        </trans-unit>
        <trans-unit id="d49763e3623bb841ba6b661af00bff69df48a815" translate="yes" xml:space="preserve">
          <source>The Kotlin standard library provides factory methods for several useful kinds of delegates.</source>
          <target state="translated">Kotlin标准库为几种有用的代表提供了工厂方法。</target>
        </trans-unit>
        <trans-unit id="d4752902cbbab973b31545d271408bf4e6b55c29" translate="yes" xml:space="preserve">
          <source>The Kotlin team offers a set of tools for Android development that goes beyond the standard language features:</source>
          <target state="translated">Kotlin团队为Android开发提供了一套超越标准语言功能的工具。</target>
        </trans-unit>
        <trans-unit id="3835dcf5cfa983896474e2202e8aad1e87118beb" translate="yes" xml:space="preserve">
          <source>The Kotlin visibilities are mapped to Java in the following way:</source>
          <target state="translated">Kotlin的可视性以如下方式映射到Java。</target>
        </trans-unit>
        <trans-unit id="ed293f7536e6525a4d07d9691dc5108b394e4a3c" translate="yes" xml:space="preserve">
          <source>The Kotlin visibility modifiers map to Java in the following way:</source>
          <target state="translated">Kotlin的可见性修饰符以如下方式映射到Java。</target>
        </trans-unit>
        <trans-unit id="faf7b14d1149068ab693cf1111e636b037d94b9d" translate="yes" xml:space="preserve">
          <source>The Kotlin/JS Gradle plugin allows us to run tests through a variety of test runners that can be specified via the Gradle configuration. In order to make test annotations and functionality available for the JavaScript target, let's add the correct platform artifact for &lt;a href=&quot;https://kotlinlang.org/api/latest/kotlin.test/index.html&quot;&gt;&lt;code&gt;kotlin.test&lt;/code&gt;&lt;/a&gt; in our &lt;code&gt;build.gradle.kts&lt;/code&gt;:</source>
          <target state="translated">Kotlin / JS Gradle插件使我们可以通过可以通过Gradle配置指定的各种测试运行程序来运行测试。为了使测试的注释和功能可用于JavaScript的目标，让我们添加了正确的平台神器为&lt;a href=&quot;https://kotlinlang.org/api/latest/kotlin.test/index.html&quot;&gt; &lt;code&gt;kotlin.test&lt;/code&gt; &lt;/a&gt;我们 &lt;code&gt;build.gradle.kts&lt;/code&gt; ：</target>
        </trans-unit>
        <trans-unit id="304763e06ef2ec917369271eeef52f0b832e41b7" translate="yes" xml:space="preserve">
          <source>The Kotlin/JS Gradle plugin also provides support for webpack's &lt;a href=&quot;https://webpack.js.org/loaders/css-loader/&quot;&gt;CSS&lt;/a&gt; and &lt;a href=&quot;https://webpack.js.org/loaders/style-loader/&quot;&gt;style&lt;/a&gt; loaders. While all options can be changed by directly modifying the &lt;a href=&quot;#configuring-webpack-bundling&quot;&gt;webpack configuration files&lt;/a&gt; that are used to build your project, the most commonly used settings are available directly from the &lt;code&gt;build.gradle(.kts)&lt;/code&gt; file.</source>
          <target state="translated">Kotlin / JS Gradle插件还支持webpack的&lt;a href=&quot;https://webpack.js.org/loaders/css-loader/&quot;&gt;CSS&lt;/a&gt;和&lt;a href=&quot;https://webpack.js.org/loaders/style-loader/&quot;&gt;样式&lt;/a&gt;加载器。尽管可以通过直接修改用于构建项目的&lt;a href=&quot;#configuring-webpack-bundling&quot;&gt;Webpack配置文件&lt;/a&gt;来更改所有选项，但最常用的设置可以直接从 &lt;code&gt;build.gradle(.kts)&lt;/code&gt; 文件获得。</target>
        </trans-unit>
        <trans-unit id="62014bfef74b6ee8391b097fe12cd8b778b7ef02" translate="yes" xml:space="preserve">
          <source>The Kotlin/JS Gradle plugin also supports dependency declarations for particular source sets in the &lt;code&gt;kotlin&lt;/code&gt; section of the build script.</source>
          <target state="translated">Kotlin / JS Gradle插件还支持构建脚本的 &lt;code&gt;kotlin&lt;/code&gt; 部分中特定源集的依赖项声明。</target>
        </trans-unit>
        <trans-unit id="5668a0d5f0441481437bde850441d3299be017d6" translate="yes" xml:space="preserve">
          <source>The Kotlin/JS Gradle plugin automatically generates a Karma configuration file at build time which includes your settings from the &lt;a href=&quot;#configuring-test-task&quot;&gt;&lt;code&gt;kotlin.js.browser.testTask.useKarma&lt;/code&gt; block&lt;/a&gt; in your &lt;code&gt;build.gradle(.kts)&lt;/code&gt;. You can find the file at &lt;code&gt;build/js/packages/projectName-test/karma.conf.js&lt;/code&gt;. To make adjustments to the configuration used by Karma, place your additional configuration files inside a directory called &lt;code&gt;karma.config.d&lt;/code&gt; in the root of your project. All &lt;code&gt;.js&lt;/code&gt; configuration files in this directory will be picked up and are automatically merged into the generated &lt;code&gt;karma.conf.js&lt;/code&gt; at build time.</source>
          <target state="translated">Kotlin / JS Gradle插件会在构建时自动生成一个Karma配置文件，其中包括来自 &lt;code&gt;build.gradle(.kts)&lt;/code&gt; 中&lt;a href=&quot;#configuring-test-task&quot;&gt; &lt;code&gt;kotlin.js.browser.testTask.useKarma&lt;/code&gt; 块&lt;/a&gt;中的设置。您可以在 &lt;code&gt;build/js/packages/projectName-test/karma.conf.js&lt;/code&gt; 中找到该文件。要调整Karma使用的配置，请将其他配置文件放在项目根目录中的 &lt;code&gt;karma.config.d&lt;/code&gt; 目录中。此目录中的所有 &lt;code&gt;.js&lt;/code&gt; 配置文件都将被拾取，并在构建时自动合并到生成的 &lt;code&gt;karma.conf.js&lt;/code&gt; 中。</target>
        </trans-unit>
        <trans-unit id="b957eb65bb0cdee2cba530f32fe6ce613bbf8935" translate="yes" xml:space="preserve">
          <source>The Kotlin/JS Gradle plugin automatically generates a standard webpack configuration file at build time which you can find the at &lt;code&gt;build/js/packages/projectName/webpack.config.js&lt;/code&gt;.</source>
          <target state="translated">Kotlin / JS Gradle插件会在构建时自动生成一个标准的webpack配置文件，您可以在 &lt;code&gt;build/js/packages/projectName/webpack.config.js&lt;/code&gt; 中找到该文件。</target>
        </trans-unit>
        <trans-unit id="8f0e2d824767a90a80e919658aeb5cfe950e8eb7" translate="yes" xml:space="preserve">
          <source>The Kotlin/JS Gradle plugin automatically sets up a test infrastructure for projects. For browser projects, it downloads and installs the &lt;a href=&quot;https://karma-runner.github.io/&quot;&gt;Karma&lt;/a&gt; test runner with other required dependencies; for Node.js projects, the &lt;a href=&quot;https://mochajs.org/&quot;&gt;Mocha&lt;/a&gt; test framework is used.</source>
          <target state="translated">Kotlin / JS Gradle插件会自动为项目设置测试基础架构。对于浏览器项目，它将下载并安装具有其他必需依赖项的&lt;a href=&quot;https://karma-runner.github.io/&quot;&gt;Karma&lt;/a&gt;测试运行程序；对于Node.js项目，使用&lt;a href=&quot;https://mochajs.org/&quot;&gt;Mocha&lt;/a&gt;测试框架。</target>
        </trans-unit>
        <trans-unit id="f818f7eac72c440d892f7b7bd134c99b2cf031b4" translate="yes" xml:space="preserve">
          <source>The Kotlin/JS Gradle plugin handles DCE automatically when you build a &lt;strong&gt;production bundle&lt;/strong&gt;, for example by using the &lt;code&gt;browserProductionWebpack&lt;/code&gt; task. &lt;strong&gt;Development bundling&lt;/strong&gt; tasks (like &lt;code&gt;browserDevelopmentWebpack&lt;/code&gt;) don't include DCE.</source>
          <target state="translated">Kotlin / JS Gradle插件在构建&lt;strong&gt;产品包&lt;/strong&gt;时会自动处理DCE ，例如通过使用 &lt;code&gt;browserProductionWebpack&lt;/code&gt; 任务。&lt;strong&gt;开发捆绑&lt;/strong&gt;任务（如 &lt;code&gt;browserDevelopmentWebpack&lt;/code&gt; ）不包括DCE。</target>
        </trans-unit>
        <trans-unit id="9e48978274145dccf82bae99c2dc2a30b0c91f68" translate="yes" xml:space="preserve">
          <source>The Kotlin/JS Gradle plugin includes a &lt;a href=&quot;https://wikipedia.org/wiki/Dead_code_elimination&quot;&gt;&lt;em&gt;dead code elimination&lt;/em&gt;&lt;/a&gt; (&lt;em&gt;DCE&lt;/em&gt;) tool. Dead code elimination is often also called &lt;em&gt;tree shaking&lt;/em&gt;. It reduces the size or the resulting JavaScript code by removing unused properties, functions, and classes.</source>
          <target state="translated">Kotlin / JS Gradle插件包括一个无效&lt;a href=&quot;https://wikipedia.org/wiki/Dead_code_elimination&quot;&gt;&lt;em&gt;代码消除&lt;/em&gt;&lt;/a&gt;（&lt;em&gt;DCE&lt;/em&gt;）工具。消除死代码通常也称为&lt;em&gt;摇树&lt;/em&gt;。通过删除未使用的属性，函数和类，它减小了大小或生成的JavaScript代码。</target>
        </trans-unit>
        <trans-unit id="1e4e6f626348a11780378865bb1882ff761b2f81" translate="yes" xml:space="preserve">
          <source>The Kotlin/JS Gradle plugin lets you declare npm dependencies in the Gradle build script, analogous to how you would declare any other dependencies.</source>
          <target state="translated">Kotlin/JS Gradle插件可以让你在Gradle构建脚本中声明npm依赖关系,类似于你声明其他依赖关系的方式。</target>
        </trans-unit>
        <trans-unit id="508d01630451556b268bd8387a2eb4afdba86b73" translate="yes" xml:space="preserve">
          <source>The Kotlin/JS Gradle plugin lets you manage aspects of your project in the &lt;code&gt;kotlin&lt;/code&gt; section of the build script.</source>
          <target state="translated">Kotlin / JS Gradle插件可让您在构建脚本的 &lt;code&gt;kotlin&lt;/code&gt; 部分中管理项目的各个方面。</target>
        </trans-unit>
        <trans-unit id="920d568a492c6da10f65d95dc53b1b5f7eeec1d4" translate="yes" xml:space="preserve">
          <source>The Kotlin/JS Gradle plugin provides an integration with Dukat. When enabled, type-safe Kotlin external declarations are automatically generated for npm dependencies that provide TypeScript definitions. You have two different ways of selecting if and when Dukat should generate declarations: at build time, and manually via a Gradle task.</source>
          <target state="translated">Kotlin/JS Gradle插件提供了与Dukat的集成。当启用时,类型安全的Kotlin外部声明会自动为提供TypeScript定义的npm依赖项生成。你有两种不同的方式来选择Dukat是否以及何时应该生成声明:在构建时和通过Gradle任务手动生成。</target>
        </trans-unit>
        <trans-unit id="2298bfb804f83ca6b163e47c1953371bd8caee55" translate="yes" xml:space="preserve">
          <source>The Kotlin/JS IR compiler backend is the main focus of innovation around Kotlin/JS, and paves the way forward for the technology.</source>
          <target state="translated">Kotlin/JS红外编译器后台是围绕Kotlin/JS创新的重点,也为技术的发展铺平了道路。</target>
        </trans-unit>
        <trans-unit id="1cec2fbea4632d742da31ed6da87c6196fa5c821" translate="yes" xml:space="preserve">
          <source>The Kotlin/JS IR compiler is capable of generating TypeScript definitions from your Kotlin code. These definitions can be used by JavaScript tools and IDEs when working on hybrid apps to provide autocompletion, support static analyzers, and make it easier to include Kotlin code in JavaScript and TypeScript projects. Top-level declarations marked with &lt;a href=&quot;js-to-kotlin-interop#jsexport-annotation&quot;&gt;&lt;code&gt;@JsExport&lt;/code&gt;&lt;/a&gt; in a project that produces executable files (&lt;code&gt;binaries.executable()&lt;/code&gt;) will get a &lt;code&gt;.d.ts&lt;/code&gt; file generated, which contains the TypeScript definitions for the exported Kotlin declarations. In Kotlin 1.4, these declarations can be found in &lt;code&gt;build/js/packages/&amp;lt;package_name&amp;gt;/kotlin&lt;/code&gt; alongside the corresponding, un-webpacked JavaScript code.</source>
          <target state="translated">Kotlin / JS IR编译器能够从您的Kotlin代码生成TypeScript定义。当在混合应用程序上工作时，JavaScript工具和IDE可以使用这些定义来提供自动完成功能，支持静态分析器，并使其更容易在JavaScript和TypeScript项目中包含Kotlin代码。在生成可执行文件（ &lt;code&gt;binaries.executable()&lt;/code&gt; ）的项目中标记为&lt;a href=&quot;js-to-kotlin-interop#jsexport-annotation&quot;&gt; &lt;code&gt;@JsExport&lt;/code&gt; 的&lt;/a&gt;顶级声明将生成一个生成的 &lt;code&gt;.d.ts&lt;/code&gt; 文件，其中包含导出的Kotlin声明的TypeScript定义。在Kotlin 1.4中，可以在 &lt;code&gt;build/js/packages/&amp;lt;package_name&amp;gt;/kotlin&lt;/code&gt; 中找到这些声明以及相应的未打包Web的JavaScript代码。</target>
        </trans-unit>
        <trans-unit id="20de849afa381da2738f09b8692ae208333cafb4" translate="yes" xml:space="preserve">
          <source>The Kotlin/JS plugin automatically configures its tasks for working with the selected environment. This includes downloading and installing the required environment and dependencies for running and testing the application. This allows developers to build, run and test simple projects without additional configuration.</source>
          <target state="translated">Kotlin/JS插件会自动配置其任务,以便与选定的环境一起工作。这包括下载和安装运行和测试应用程序所需的环境和依赖项。这使得开发人员无需额外的配置就可以构建、运行和测试简单的项目。</target>
        </trans-unit>
        <trans-unit id="04a4825cc5cdc3fbcb7e1b3e4f6683662ea06196" translate="yes" xml:space="preserve">
          <source>The Kotlin/JS plugin provides a &lt;code&gt;run&lt;/code&gt; task that lets you run pure Kotlin/JS projects without additional configuration.</source>
          <target state="translated">Kotlin / JS插件提供了一个 &lt;code&gt;run&lt;/code&gt; 任务，使您无需额外配置即可运行纯Kotlin / JS项目。</target>
        </trans-unit>
        <trans-unit id="0c77da593f6fd563bf3d0e80c805c85eaf245285" translate="yes" xml:space="preserve">
          <source>The Kotlin/JS standard library allows us to access browser-specific functionality using the &lt;code&gt;kotlinx.browser&lt;/code&gt; package, which includes typical top-level objects such as &lt;code&gt;document&lt;/code&gt; and &lt;code&gt;window&lt;/code&gt;. The standard library provides typesafe wrappers for the functionality exposed by these objects wherever possible. As a fallback, the &lt;code&gt;dynamic&lt;/code&gt; type is used to provide interaction with functions that do not map well into the Kotlin type system.</source>
          <target state="translated">Kotlin / JS标准库允许我们使用 &lt;code&gt;kotlinx.browser&lt;/code&gt; 软件包访问特定于浏览器的功能，该软件包包括典型的顶级对象，例如 &lt;code&gt;document&lt;/code&gt; 和 &lt;code&gt;window&lt;/code&gt; 。标准库尽可能为这些对象提供的功能提供类型安全的包装。作为后备， &lt;code&gt;dynamic&lt;/code&gt; 类型用于提供与不能很好地映射到Kotlin类型系统中的功能的交互。</target>
        </trans-unit>
        <trans-unit id="a6a4cdbdda50f56547bba9ba19fc399a6de3ee54" translate="yes" xml:space="preserve">
          <source>The Kotlin/Native compiler is available for macOS, Linux, and Windows. It is available as a command line tool and ships as part of the standard Kotlin distribution and can be downloaded from &lt;a href=&quot;https://github.com/JetBrains/kotlin/releases/tag/v1.4.10&quot;&gt;GitHub Releases&lt;/a&gt;. It supports different targets including iOS (arm32, arm64, simulator x86_64), Windows (mingw32 and x86_64), Linux (x86_64, arm64, MIPS), macOS (x86_64), Raspberry PI, STM32, WASM. For the full list of targets please see the &lt;a href=&quot;../../reference/native-overview&quot;&gt;Kotlin/Native overview&lt;/a&gt;.</source>
          <target state="translated">Kotlin / Native编译器可用于macOS，Linux和Windows。它可以作为命令行工具使用，也可以作为标准Kotlin发行版的一部分提供，可以从&lt;a href=&quot;https://github.com/JetBrains/kotlin/releases/tag/v1.4.10&quot;&gt;GitHub Releases&lt;/a&gt;下载。它支持不同的目标，包括iOS（arm32，arm64，模拟器x86_64），Windows（mingw32和x86_64），Linux（x86_64，arm64，MIPS），macOS（x86_64），Raspberry PI，STM32，WASM。有关目标的完整列表，请参见&lt;a href=&quot;../../reference/native-overview&quot;&gt;Kotlin / Native概述&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="6d899757cb2398280c10acb19695bbcab979ce63" translate="yes" xml:space="preserve">
          <source>The Kotlin/Native compiler is available for macOS, Linux, and Windows. It supports different targets including iOS (arm32, arm64, simulator x86_64), Windows (mingw32 and x86_64), Linux (x86_64, arm64, MIPS), macOS (x86_64), Raspberry PI, SMT32, WASM. For the full list of targets we can refer to the &lt;a href=&quot;../../reference/native-overview&quot;&gt;Kotlin/Native overview&lt;/a&gt;. While cross-platform compilation is possible (i.e., using one platform to compile for another), in this first tutorial we are only compiling for the operating system we're running on.</source>
          <target state="translated">Kotlin / Native编译器可用于macOS，Linux和Windows。它支持不同的目标，包括iOS（arm32，arm64，模拟器x86_64），Windows（mingw32和x86_64），Linux（x86_64，arm64，MIPS），macOS（x86_64），Raspberry PI，SMT32，WASM。有关目标的完整列表，请参阅&lt;a href=&quot;../../reference/native-overview&quot;&gt;Kotlin / Native概述&lt;/a&gt;。尽管可以进行跨平台编译（即，使用一个平台编译另一个平台），但在本教程的第一个教程中，我们仅针对正在运行的操作系统进行编译。</target>
        </trans-unit>
        <trans-unit id="81130cfc1e83adbcab9e6da86955c53516b100d6" translate="yes" xml:space="preserve">
          <source>The Language Committee makes final decisions on what incompatible changes will be made and what exact measures should be taken to make user updates comfortable. In doing so, it relies on a set of guidelines available &lt;a href=&quot;https://kotlinlang.org/foundation/language-committee-guidelines.html&quot;&gt;here&lt;/a&gt;.</source>
          <target state="translated">语言委员会对将进行哪些不兼容的更改以及应采取什么确切的措施使用户感到满意做出最终决定。为此，它依赖于&lt;a href=&quot;https://kotlinlang.org/foundation/language-committee-guidelines.html&quot;&gt;此处&lt;/a&gt;提供的一组准则。</target>
        </trans-unit>
        <trans-unit id="ef80e6d685a55893a99e950f4ed7fce2a86a1387" translate="yes" xml:space="preserve">
          <source>The Maven coordinates can be altered and additional artifact files may be added to the publications within the &lt;code&gt;targets { ... }&lt;/code&gt; block or the &lt;code&gt;publishing { ... }&lt;/code&gt; DSL:</source>
          <target state="translated">可以更改Maven坐标，并且可以将其他工件文件添加到 &lt;code&gt;targets { ... }&lt;/code&gt; 块或 &lt;code&gt;publishing { ... }&lt;/code&gt; DSL内的发布中：</target>
        </trans-unit>
        <trans-unit id="88e2042b128835939040b35b47b76d2e41113fdc" translate="yes" xml:space="preserve">
          <source>The Node.js target provided by Kotlin/JS enables you to create applications that &lt;strong&gt;run on a server&lt;/strong&gt; or get &lt;strong&gt;executed on serverless infrastructure&lt;/strong&gt;. You benefit from the same advantages as other applications executing in a JavaScript runtime, such as &lt;strong&gt;faster startup speed&lt;/strong&gt; and a &lt;strong&gt;reduced memory footprint&lt;/strong&gt;. With &lt;a href=&quot;https://github.com/Kotlin/kotlinx-nodejs&quot;&gt;&lt;code&gt;kotlinx-nodejs&lt;/code&gt;&lt;/a&gt;, you have typesafe access to the &lt;a href=&quot;https://nodejs.org/docs/latest/api/&quot;&gt;Node.js API&lt;/a&gt; directly from your Kotlin code.</source>
          <target state="translated">Kotlin / JS提供的Node.js目标使您可以创建&lt;strong&gt;在服务器&lt;/strong&gt;上&lt;strong&gt;运行&lt;/strong&gt;或&lt;strong&gt;在无服务器基础结构上执行的&lt;/strong&gt;应用程序。您可以享受与其他在JavaScript运行时中执行的应用程序相同的优势，例如&lt;strong&gt;更快的启动速度&lt;/strong&gt;和&lt;strong&gt;减少的内存占用&lt;/strong&gt;。使用&lt;a href=&quot;https://github.com/Kotlin/kotlinx-nodejs&quot;&gt; &lt;code&gt;kotlinx-nodejs&lt;/code&gt; &lt;/a&gt;，您可以直接从Kotlin代码中对&lt;a href=&quot;https://nodejs.org/docs/latest/api/&quot;&gt;Node.js API&lt;/a&gt;进行类型安全的访问。</target>
        </trans-unit>
        <trans-unit id="cc27fb0be25fb775df8eea4ef2ba6465502161d0" translate="yes" xml:space="preserve">
          <source>The Nothing type</source>
          <target state="translated">虚无型</target>
        </trans-unit>
        <trans-unit id="8cc0334fa925283a3687c8c8309944d9801a3bf7" translate="yes" xml:space="preserve">
          <source>The REPL command line interface opens. You can enter any valid Kotlin code and see the result. Results are printed as variables with auto-generated names like &lt;code&gt;res*&lt;/code&gt;. You can later use such variables in the code you run in REPL.</source>
          <target state="translated">REPL命令行界面打开。您可以输入任何有效的Kotlin代码并查看结果。结果将打印为具有自动生成的名称（如 &lt;code&gt;res*&lt;/code&gt; 变量。您以后可以在REPL中运行的代码中使用此类变量。</target>
        </trans-unit>
        <trans-unit id="8fd3a2d7df046fd886264d64f792856593ec9b52" translate="yes" xml:space="preserve">
          <source>The REPL command line interface will open. You can enter any valid Kotlin code and see the result. The results are printed as variables with auto-generated names like &lt;code&gt;res*&lt;/code&gt;. You can later use such variables in the code you run in REPL.</source>
          <target state="translated">REPL命令行界面将打开。您可以输入任何有效的Kotlin代码并查看结果。结果将打印为具有自动生成的名称（如 &lt;code&gt;res*&lt;/code&gt; 变量。您以后可以在REPL中运行的代码中使用此类变量。</target>
        </trans-unit>
        <trans-unit id="2b7ee6e00ac4369b5da7230befe3c113bdc4222a" translate="yes" xml:space="preserve">
          <source>The above code compiles. However, it will produce a runtime error if the object is not properly initialised before use or if &lt;code&gt;callAnything()&lt;/code&gt; is not defined at runtime.</source>
          <target state="translated">上面的代码进行编译。但是，如果在使用前未正确初始化对象或在运行时未定义 &lt;code&gt;callAnything()&lt;/code&gt; ，它将产生运行时错误。</target>
        </trans-unit>
        <trans-unit id="f67cd69d25bde43de96336b3847aa293b8518b9e" translate="yes" xml:space="preserve">
          <source>The above code indicates that the function is defined externally. The &lt;code&gt;@JsName(&quot;$&quot;)&lt;/code&gt; annotation allows us to map the name at runtime to &lt;code&gt;$&lt;/code&gt;. For more details on external declarations, please refer to the &lt;a href=&quot;../../reference/js-interop#external-modifier&quot;&gt;JavaScript interop documentation&lt;/a&gt;.</source>
          <target state="translated">上面的代码表明该函数是在外部定义的。该 &lt;code&gt;@JsName(&quot;$&quot;)&lt;/code&gt; 注释可以让我们的名字在运行时映射 &lt;code&gt;$&lt;/code&gt; 。有关外部声明的更多详细信息，请参考&lt;a href=&quot;../../reference/js-interop#external-modifier&quot;&gt;JavaScript interop文档&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="5749a0f0fe8aac855f406af86fe841d365cd7cde" translate="yes" xml:space="preserve">
          <source>The above could also be a oneliner - and note that the compiler knows that because the &lt;code&gt;throw&lt;/code&gt; will prevent &lt;code&gt;y&lt;/code&gt; from coming into existence if &lt;code&gt;x&lt;/code&gt; is null, &lt;code&gt;y&lt;/code&gt; must be non-null if we reach the line below. Contrast this with &lt;code&gt;x?.importantFunction()&lt;/code&gt;, which is a no-op if &lt;code&gt;x&lt;/code&gt; is null.</source>
          <target state="translated">上面的内容也可能是一个单行代码-并且请注意，编译器知道，因为如果 &lt;code&gt;x&lt;/code&gt; 为null，则 &lt;code&gt;throw&lt;/code&gt; 将阻止 &lt;code&gt;y&lt;/code&gt; 的存在，因此，如果我们到达下面的行，则 &lt;code&gt;y&lt;/code&gt; 必须为非null。将此与 &lt;code&gt;x?.importantFunction()&lt;/code&gt; 进行对比，如果 &lt;code&gt;x&lt;/code&gt; 为null，则为空。</target>
        </trans-unit>
        <trans-unit id="a87217033eafba44229106ab25d3816102c24f78" translate="yes" xml:space="preserve">
          <source>The above is preferable to:</source>
          <target state="translated">以上是优于。</target>
        </trans-unit>
        <trans-unit id="83d32caa4c432fbb23e6f884577d8ac97faf56a2" translate="yes" xml:space="preserve">
          <source>The affected type parameter or type is &lt;em&gt;contravariant&lt;/em&gt;. Denoted by the &lt;code&gt;in&lt;/code&gt; modifier in the source code.</source>
          <target state="translated">受影响的类型参数或类型是&lt;em&gt;反变的&lt;/em&gt;。由源代码中的 &lt;code&gt;in&lt;/code&gt; 修饰符表示。</target>
        </trans-unit>
        <trans-unit id="c340d256f4b2e039e4cb98547a639c6b4f11b7ba" translate="yes" xml:space="preserve">
          <source>The affected type parameter or type is &lt;em&gt;covariant&lt;/em&gt;. Denoted by the &lt;code&gt;out&lt;/code&gt; modifier in the source code.</source>
          <target state="translated">受影响的类型参数或类型为&lt;em&gt;covariant&lt;/em&gt;。在源代码中由 &lt;code&gt;out&lt;/code&gt; 修饰符表示。</target>
        </trans-unit>
        <trans-unit id="dff58c2fdf74d3cdbb35c54ab0e0155e83797493" translate="yes" xml:space="preserve">
          <source>The affected type parameter or type is &lt;em&gt;invariant&lt;/em&gt;, which means it has no variance applied to it.</source>
          <target state="translated">受影响的类型参数或类型是&lt;em&gt;invariant&lt;/em&gt;，这意味着它没有应用任何变化。</target>
        </trans-unit>
        <trans-unit id="e638916d7acda84432e87e4a36d2e48c0c286bc5" translate="yes" xml:space="preserve">
          <source>The annotation also works for constructors, static methods, and so on. It can't be used on abstract methods, including methods defined in interfaces.</source>
          <target state="translated">该注解也适用于构造函数、静态方法等。它不能用于抽象方法,包括定义在接口中的方法。</target>
        </trans-unit>
        <trans-unit id="d402ed87eb5a9bdd2e6bcdd0889af9af5444c36e" translate="yes" xml:space="preserve">
          <source>The annotation being applied to one of overloads allows to resolve this ambiguity by analyzing what value is returned from the lambda function.</source>
          <target state="translated">应用于重载之一的注解允许通过分析从lambda函数返回的值来解决这种模糊性。</target>
        </trans-unit>
        <trans-unit id="718f26b180ad67d2a1e20d6b7d4406049d2961a3" translate="yes" xml:space="preserve">
          <source>The annotation can be used on top-level external declarations (classes, properties, functions) and files. In case of file (which can't be &lt;code&gt;external&lt;/code&gt;) the following rule applies: all the declarations in the file must be &lt;code&gt;external&lt;/code&gt;. By applying &lt;code&gt;@JsModule(...)&lt;/code&gt; on a file you tell the compiler to import a JavaScript object that contain all the declarations from the file.</source>
          <target state="translated">注释可以用于顶级外部声明（类，属性，函数）和文件。如果是file（不能是 &lt;code&gt;external&lt;/code&gt; ），则遵循以下规则：文件中的所有声明都必须是 &lt;code&gt;external&lt;/code&gt; 。通过在文件上应用 &lt;code&gt;@JsModule(...)&lt;/code&gt; ，您可以告诉编译器导入一个JavaScript对象，该对象包含文件中的所有声明。</target>
        </trans-unit>
        <trans-unit id="ac7d8e089591134bac44995dadba571525f38003" translate="yes" xml:space="preserve">
          <source>The annotation has effect only in Kotlin/Native platform.</source>
          <target state="translated">该注解只在Kotlin/Native平台上有效。</target>
        </trans-unit>
        <trans-unit id="993a0bc9861bdf8ea351a5eb1dd7c588f24a97de" translate="yes" xml:space="preserve">
          <source>The annotations for marking and using experimental APIs (&lt;code&gt;@Experimental&lt;/code&gt; and &lt;code&gt;@UseExperimental&lt;/code&gt;) are &lt;em&gt;experimental&lt;/em&gt; in Kotlin 1.3. See details &lt;a href=&quot;#experimental-status-of-experimental-api-markers&quot;&gt;below&lt;/a&gt;.</source>
          <target state="translated">标记和使用实验性API的注释（ &lt;code&gt;@Experimental&lt;/code&gt; 和 &lt;code&gt;@UseExperimental&lt;/code&gt; ）在Kotlin 1.3中是&lt;em&gt;实验性的&lt;/em&gt;。请参阅&lt;a href=&quot;#experimental-status-of-experimental-api-markers&quot;&gt;下面的&lt;/a&gt;详细信息。</target>
        </trans-unit>
        <trans-unit id="ecb7079c4ed4f36ab04fb8b963913758bd291799" translate="yes" xml:space="preserve">
          <source>The anonymous function syntax allows you to specify the receiver type of a function literal directly. This can be useful if you need to declare a variable of a function type with receiver, and to use it later.</source>
          <target state="translated">匿名函数语法允许你直接指定一个函数文字的接收器类型。如果你需要声明一个带有接收器的函数类型的变量,并在以后使用它,这可能会很有用。</target>
        </trans-unit>
        <trans-unit id="e99a96b83211ab5edf0514b0e8d206e232457fc5" translate="yes" xml:space="preserve">
          <source>The application we're going to create will simply show &lt;code&gt;Kotlin Rocks on Android&lt;/code&gt; on Android and &lt;code&gt;Kotlin Rocks on iOS &amp;lt;version&amp;gt;&lt;/code&gt; on iOS. The idea is to share the code that generates this message.</source>
          <target state="translated">我们将要创建的应用程序将仅 &lt;code&gt;Kotlin Rocks on Android&lt;/code&gt; 上的Android 上显示Kotlin Rocks， &lt;code&gt;Kotlin Rocks on iOS &amp;lt;version&amp;gt;&lt;/code&gt; 上仅显示Kotlin Rocks。想法是共享生成此消息的代码。</target>
        </trans-unit>
        <trans-unit id="6689bd2ccf2821c30727df021f990e93b549d058" translate="yes" xml:space="preserve">
          <source>The application will print &quot;Hello Kotlin/Native&quot; on the standard output. In a working directory of choice, create a file named &lt;code&gt;hello.kt&lt;/code&gt; and enter the following contents:</source>
          <target state="translated">该应用程序将在标准输出上打印&amp;ldquo; Hello Kotlin / Native&amp;rdquo;。在选择的工作目录中，创建一个名为 &lt;code&gt;hello.kt&lt;/code&gt; 的文件，然后输入以下内容：</target>
        </trans-unit>
        <trans-unit id="c116b8d3b85f1f036748497d93f617762a69f1eb" translate="yes" xml:space="preserve">
          <source>The array literal syntax is constrained to annotation arguments.</source>
          <target state="translated">数组文字语法受制于注释参数。</target>
        </trans-unit>
        <trans-unit id="e6585b22e37432101f079b3e68122b140a6c8d0b" translate="yes" xml:space="preserve">
          <source>The arrow notation is right-associative, &lt;code&gt;(Int) -&amp;gt; (Int) -&amp;gt; Unit&lt;/code&gt; is equivalent to the previous example, but not to &lt;code&gt;((Int) -&amp;gt; (Int)) -&amp;gt; Unit&lt;/code&gt;.</source>
          <target state="translated">箭头表示法是右关联的， &lt;code&gt;(Int) -&amp;gt; (Int) -&amp;gt; Unit&lt;/code&gt; 等效于前面的示例，但不等于 &lt;code&gt;((Int) -&amp;gt; (Int)) -&amp;gt; Unit&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="eff75fbb6c3dbfe907753b9474216f02d469cd66" translate="yes" xml:space="preserve">
          <source>The author strongly recommends that you use an IDE with Kotlin support, as the static typing allows an IDE to do reliable navigation and code completion. I recommend &lt;a href=&quot;https://www.jetbrains.com/idea/&quot;&gt;IntelliJ IDEA&lt;/a&gt;, which is built by the same company that created Kotlin. The Community Edition is free; see &lt;a href=&quot;../getting-started&quot;&gt;instructions for getting started&lt;/a&gt; (it comes bundled with Kotlin, and you can run your program from the IDE).</source>
          <target state="translated">作者强烈建议您使用具有Kotlin支持的IDE，因为静态类型可以使IDE进行可靠的导航和代码完成。我推荐&lt;a href=&quot;https://www.jetbrains.com/idea/&quot;&gt;IntelliJ IDEA&lt;/a&gt;，它是由创建Kotlin的同一家公司构建的。社区版是免费的；请参阅&lt;a href=&quot;../getting-started&quot;&gt;入门说明&lt;/a&gt;（它与Kotlin捆绑在一起，您可以从IDE中运行程序）。</target>
        </trans-unit>
        <trans-unit id="b22a383945309e76147365f532a907cec46e842a" translate="yes" xml:space="preserve">
          <source>The automatically added standard library will be the same version of the Kotlin Gradle plugin, since they have the same versioning.</source>
          <target state="translated">自动添加的标准库将与Kotlin Gradle插件的版本相同,因为它们有相同的版本。</target>
        </trans-unit>
        <trans-unit id="031b37e00f6cc7d0005e366d6305ce9ae5158eb7" translate="yes" xml:space="preserve">
          <source>The available options for persistence include direct JDBC access, JPA, as well as using NoSQL databases through their Java drivers. For JPA, the &lt;a href=&quot;compiler-plugins#jpa-support&quot;&gt;kotlin-jpa compiler plugin&lt;/a&gt; adapts Kotlin-compiled classes to the requirements of the framework.</source>
          <target state="translated">持久性的可用选项包括直接JDBC访问，JPA以及通过其Java驱动程序使用NoSQL数据库。对于JPA，&lt;a href=&quot;compiler-plugins#jpa-support&quot;&gt;kotlin-jpa编译器插件使&lt;/a&gt; Kotlin编译的类适应框架的要求。</target>
        </trans-unit>
        <trans-unit id="f64d03b5ac4e40dff196fed46f6ad483b559e0ca" translate="yes" xml:space="preserve">
          <source>The base class for all errors and exceptions. Only instances of this class can be thrown or caught.</source>
          <target state="translated">所有错误和异常的基类。只有该类的实例可以被抛出或捕获。</target>
        </trans-unit>
        <trans-unit id="9567e5bd74f98cde043ce2604d36c00a7448fbca" translate="yes" xml:space="preserve">
          <source>The base exception class is &lt;code&gt;Throwable&lt;/code&gt; (but it is more common to extend its subclass &lt;code&gt;Exception&lt;/code&gt;), and there are a ton of built-in exception classes. If you don't find one that match your needs, you can create your own by inheriting from an existing exception class.</source>
          <target state="translated">基本异常类是 &lt;code&gt;Throwable&lt;/code&gt; （但更常见的是扩展其子类 &lt;code&gt;Exception&lt;/code&gt; ），并且有大量的内置异常类。如果找不到满足您需求的类，则可以通过从现有异常类继承来创建自己的类。</target>
        </trans-unit>
        <trans-unit id="d9ecc0f2cf4982d26aff3dd399995b9e266ca38f" translate="yes" xml:space="preserve">
          <source>The basic association function &lt;a href=&quot;../../api/latest/jvm/stdlib/kotlin.collections/associate-with&quot;&gt;&lt;code&gt;associateWith()&lt;/code&gt;&lt;/a&gt; creates a &lt;code&gt;Map&lt;/code&gt; in which the elements of the original collection are keys, and values are produced from them by the given transformation function. If two elements are equal, only the last one remains in the map.</source>
          <target state="translated">基本的关联函数&lt;a href=&quot;../../api/latest/jvm/stdlib/kotlin.collections/associate-with&quot;&gt; &lt;code&gt;associateWith()&lt;/code&gt; &lt;/a&gt;创建一个 &lt;code&gt;Map&lt;/code&gt; ，其中原始集合的元素是键，并通过给定的转换函数从中产生值。如果两个元素相等，则仅最后一个保留在地图中。</target>
        </trans-unit>
        <trans-unit id="8747487378c0fd48a48984cf8a26dd2308ffac09" translate="yes" xml:space="preserve">
          <source>The basic filtering function is &lt;a href=&quot;../../api/latest/jvm/stdlib/kotlin.collections/filter&quot;&gt;&lt;code&gt;filter()&lt;/code&gt;&lt;/a&gt;. When called with a predicate, &lt;code&gt;filter()&lt;/code&gt; returns the collection elements that match it. For both &lt;code&gt;List&lt;/code&gt; and &lt;code&gt;Set&lt;/code&gt;, the resulting collection is a &lt;code&gt;List&lt;/code&gt;, for &lt;code&gt;Map&lt;/code&gt; it's a &lt;code&gt;Map&lt;/code&gt; as well.</source>
          <target state="translated">基本的过滤功能是&lt;a href=&quot;../../api/latest/jvm/stdlib/kotlin.collections/filter&quot;&gt; &lt;code&gt;filter()&lt;/code&gt; &lt;/a&gt;。使用谓词调用时， &lt;code&gt;filter()&lt;/code&gt; 返回与其匹配的集合元素。对于 &lt;code&gt;List&lt;/code&gt; 和 &lt;code&gt;Set&lt;/code&gt; ，结果集合都是 &lt;code&gt;List&lt;/code&gt; ，对于 &lt;code&gt;Map&lt;/code&gt; 来说，它也是 &lt;code&gt;Map&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="699437afba4c1eb6f2aa1a305318c9d9571a4fe8" translate="yes" xml:space="preserve">
          <source>The basic functions &lt;a href=&quot;../../api/latest/jvm/stdlib/kotlin.collections/sorted&quot;&gt;&lt;code&gt;sorted()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../../api/latest/jvm/stdlib/kotlin.collections/sorted-descending&quot;&gt;&lt;code&gt;sortedDescending()&lt;/code&gt;&lt;/a&gt; return elements of a collection sorted into ascending and descending sequence according to their natural order. These functions apply to collections of &lt;code&gt;Comparable&lt;/code&gt; elements.</source>
          <target state="translated">基本函数&lt;a href=&quot;../../api/latest/jvm/stdlib/kotlin.collections/sorted&quot;&gt; &lt;code&gt;sorted()&lt;/code&gt; &lt;/a&gt;和&lt;a href=&quot;../../api/latest/jvm/stdlib/kotlin.collections/sorted-descending&quot;&gt; &lt;code&gt;sortedDescending()&lt;/code&gt; &lt;/a&gt;返回集合的元素，这些元素根据其自然顺序按升序和降序排序。这些功能适用于可 &lt;code&gt;Comparable&lt;/code&gt; 元素的集合。</target>
        </trans-unit>
        <trans-unit id="70e38425dddb8d588d69bf3481934278ea9001d3" translate="yes" xml:space="preserve">
          <source>The basic operators have familiar names like &lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines.flow/map.html&quot;&gt;map&lt;/a&gt; and &lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines.flow/filter.html&quot;&gt;filter&lt;/a&gt;. The important difference to sequences is that blocks of code inside these operators can call suspending functions.</source>
          <target state="translated">基本运算符的名称很熟悉，例如&lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines.flow/map.html&quot;&gt;map&lt;/a&gt;和&lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines.flow/filter.html&quot;&gt;filter&lt;/a&gt;。序列的重要区别是这些运算符中的代码块可以调用挂起函数。</target>
        </trans-unit>
        <trans-unit id="176655605bee6eae4892bd4ec703e94408b0c3f3" translate="yes" xml:space="preserve">
          <source>The best place to start is &lt;a href=&quot;https://kotlinlang.org&quot;&gt;this website&lt;/a&gt;. From there you can download the compiler, &lt;a href=&quot;https://play.kotlinlang.org&quot;&gt;try it online&lt;/a&gt; as well as get access to resources, &lt;a href=&quot;index&quot;&gt;reference documentation&lt;/a&gt; and &lt;a href=&quot;../tutorials/index&quot;&gt;tutorials&lt;/a&gt;.</source>
          <target state="translated">最好的起点是&lt;a href=&quot;https://kotlinlang.org&quot;&gt;这个网站&lt;/a&gt;。您可以从那里下载编译器，&lt;a href=&quot;https://play.kotlinlang.org&quot;&gt;在线试用它&lt;/a&gt;，还可以访问资源，&lt;a href=&quot;index&quot;&gt;参考文档&lt;/a&gt;和&lt;a href=&quot;../tutorials/index&quot;&gt;教程&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="a00b10508469a6652d6e476b8749625b68deb8ad" translate="yes" xml:space="preserve">
          <source>The best way to see what C data types are visible in Kotlin is to try it</source>
          <target state="translated">查看Kotlin中可见的C数据类型的最好方法是尝试一下</target>
        </trans-unit>
        <trans-unit id="8cccc62dffea928c706df5dfd73f9995b0b8212a" translate="yes" xml:space="preserve">
          <source>The best way to understand the mapping between C and Kotlin languages is to try it out on a small example. We will create a small library headers for that. First, we need to create a &lt;code&gt;lib.h&lt;/code&gt; file with the following declaration of functions that deal with the C strings:</source>
          <target state="translated">理解C语言和Kotlin语言之间映射的最好方法是在一个小例子中尝试一下。我们将为此创建一个小的库头。首先，我们需要创建一个 &lt;code&gt;lib.h&lt;/code&gt; 文件，其中包含以下处理C字符串的函数声明：</target>
        </trans-unit>
        <trans-unit id="ffd6c6681f86404c6d10fd90b4e30255a8c338ed" translate="yes" xml:space="preserve">
          <source>The best way to understand the mapping between Kotlin and C is to try a tiny example. We declare a function that accepts a function pointer as a parameter and another function that returns a function pointer.</source>
          <target state="translated">理解Kotlin和C语言之间的映射的最好方法是尝试一个小小的例子。我们声明一个接受函数指针作为参数的函数和另一个返回函数指针的函数。</target>
        </trans-unit>
        <trans-unit id="6537550691113ba29bcd420ea4633f14458a70b1" translate="yes" xml:space="preserve">
          <source>The best way to understand the mapping between Kotlin and C is to try a tiny example. We will declare a struct and a union in the C language, to see how they are mapped into Kotlin.</source>
          <target state="translated">理解Kotlin和C语言之间映射的最好方法是尝试一个小小的例子。我们将在C语言中声明一个结构和一个联合体,看看它们是如何映射到Kotlin中的。</target>
        </trans-unit>
        <trans-unit id="4232ac266b4561b99b9bc10fa2be9171a24a3226" translate="yes" xml:space="preserve">
          <source>The best way to understand these techniques is to try them out. Let's create a first tiny Kotlin library and use it from a C program.</source>
          <target state="translated">理解这些技术的最好方法就是尝试一下。让我们创建第一个小小的Kotlin库,并从C程序中使用它。</target>
        </trans-unit>
        <trans-unit id="eaa47ef7640a883ac2445b67958ca2668d316a2e" translate="yes" xml:space="preserve">
          <source>The best way to use the Kotlin/Native compiler is with a build system. It helps by downloading and caching the Kotlin/Native compiler binaries and libraries with transitive dependencies, and running the compiler and tests. It caches the compilation results too. A build system can also be used by an IDE to understand the project layout.</source>
          <target state="translated">使用Kotlin/Native编译器的最佳方式是使用构建系统。它通过下载和缓存 Kotlin/Native 编译器的二进制文件和具有过渡性依赖关系的库,并运行编译器和测试来提供帮助。它也会缓存编译结果。集成开发环境也可以使用构建系统来了解项目布局。</target>
        </trans-unit>
        <trans-unit id="9af9e08ad353ac6ed57e0041c23dca829fbff7c4" translate="yes" xml:space="preserve">
          <source>The binaries DSL allows not only creating binaries but also accessing already created ones to configure them or get their properties (e.g. path to an output file). The &lt;code&gt;binaries&lt;/code&gt; collection implements the &lt;a href=&quot;https://docs.gradle.org/current/javadoc/org/gradle/api/DomainObjectSet.html&quot;&gt;&lt;code&gt;DomainObjectSet&lt;/code&gt;&lt;/a&gt; interface and provides methods like &lt;code&gt;all&lt;/code&gt; or &lt;code&gt;matching&lt;/code&gt; allowing configuring groups of elements.</source>
          <target state="translated">二进制DSL不仅允许创建二进制文件，还可以访问已创建的二进制文件以配置它们或获取其属性（例如，输出文件的路径）。所述 &lt;code&gt;binaries&lt;/code&gt; 集合实现的&lt;a href=&quot;https://docs.gradle.org/current/javadoc/org/gradle/api/DomainObjectSet.html&quot;&gt; &lt;code&gt;DomainObjectSet&lt;/code&gt; &lt;/a&gt;接口，并提供类似的方法 &lt;code&gt;all&lt;/code&gt; 或 &lt;code&gt;matching&lt;/code&gt; 允许配置一组元素。</target>
        </trans-unit>
        <trans-unit id="bc8bcc38381183bfcc94707aa9b37df0e52f23b1" translate="yes" xml:space="preserve">
          <source>The binary files are created in the &lt;code&gt;build/bin/native/debugExecutable&lt;/code&gt; or &lt;code&gt;build/bin/native/releaseExecutable&lt;/code&gt; folders respectively. The file has a &lt;code&gt;.kexe&lt;/code&gt; extension on Linux and macOS and an &lt;code&gt;.exe&lt;/code&gt; extension on Windows. Use the following command to instruct the build to produce binaries:</source>
          <target state="translated">二进制文件分别在 &lt;code&gt;build/bin/native/debugExecutable&lt;/code&gt; 或 &lt;code&gt;build/bin/native/releaseExecutable&lt;/code&gt; 文件夹中创建。该文件在Linux和macOS上具有 &lt;code&gt;.kexe&lt;/code&gt; 扩展名，在Windows上具有 &lt;code&gt;.exe&lt;/code&gt; 扩展名。使用以下命令来指导生成二进制文件：</target>
        </trans-unit>
        <trans-unit id="54650137fcf92a797ec9822a89e0e51a3d74473c" translate="yes" xml:space="preserve">
          <source>The block after &lt;code&gt;tree(&quot;root&quot;)&lt;/code&gt; is the first function literal with receiver, which will be passed to &lt;code&gt;tree()&lt;/code&gt; as the &lt;code&gt;initialize&lt;/code&gt; parameter. According to the parameter list of &lt;code&gt;tree()&lt;/code&gt;, the receiver is of type &lt;code&gt;TreeNode&lt;/code&gt;, and therefore, &lt;code&gt;tree()&lt;/code&gt; can call &lt;code&gt;initialize()&lt;/code&gt; on &lt;code&gt;root&lt;/code&gt;. &lt;code&gt;root&lt;/code&gt; then becomes &lt;code&gt;this&lt;/code&gt; inside the scope of that lambda expression, so when we call &lt;code&gt;node(&quot;math&quot;)&lt;/code&gt;, it implicitly says &lt;code&gt;this.node(&quot;math&quot;)&lt;/code&gt;, where &lt;code&gt;this&lt;/code&gt; refers to the same &lt;code&gt;TreeNode&lt;/code&gt; as &lt;code&gt;root&lt;/code&gt;. The next block is passed to &lt;code&gt;TreeNode.node()&lt;/code&gt;, and is invoked on the first child of the &lt;code&gt;root&lt;/code&gt; node, namely &lt;code&gt;math&lt;/code&gt;, and inside it, &lt;code&gt;this&lt;/code&gt; will refer to &lt;code&gt;math&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;tree(&quot;root&quot;)&lt;/code&gt; 之后的块是具有接收器的第一个函数文字，它将作为 &lt;code&gt;initialize&lt;/code&gt; 参数传递给 &lt;code&gt;tree()&lt;/code&gt; 。根据 &lt;code&gt;tree()&lt;/code&gt; 的参数列表，接收方的类型为 &lt;code&gt;TreeNode&lt;/code&gt; ，因此 &lt;code&gt;tree()&lt;/code&gt; 可以在 &lt;code&gt;root&lt;/code&gt; 上调用 &lt;code&gt;initialize()&lt;/code&gt; 。 &lt;code&gt;root&lt;/code&gt; 然后变成 &lt;code&gt;this&lt;/code&gt; 该lambda表达式的范围内，因此，当我们称之为 &lt;code&gt;node(&quot;math&quot;)&lt;/code&gt; ，它隐含说 &lt;code&gt;this.node(&quot;math&quot;)&lt;/code&gt; ，其中， &lt;code&gt;this&lt;/code&gt; 指的是相同的 &lt;code&gt;TreeNode&lt;/code&gt; 为 &lt;code&gt;root&lt;/code&gt; 。下一个块传递给 &lt;code&gt;TreeNode.node()&lt;/code&gt; ，并在 &lt;code&gt;root&lt;/code&gt; 的第一个子节点 &lt;code&gt;math&lt;/code&gt; 上调用，在其内部， &lt;code&gt;this&lt;/code&gt; 将引用 &lt;code&gt;math&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="299004dba6c7ef441e08541633a7bed7d65922cd" translate="yes" xml:space="preserve">
          <source>The body can be a block.</source>
          <target state="translated">身体可以是块。</target>
        </trans-unit>
        <trans-unit id="d17dad4981064bd9e13820de989411c6afec8c62" translate="yes" xml:space="preserve">
          <source>The body of an object expression may access, and possibly modify, the local variables of the containing scope.</source>
          <target state="translated">对象表达式的主体可以访问并可能修改包含作用域的局部变量。</target>
        </trans-unit>
        <trans-unit id="6eb082a62156761cbe45120602d0be4ff5a5d1b2" translate="yes" xml:space="preserve">
          <source>The box classes used for capturing mutable closure variables in lambdas no longer have volatile fields. This change improves performance, but can lead to new race conditions in some rare usage scenarios. If you're affected by this, you need to provide your own synchronization for accessing the variables.</source>
          <target state="translated">用于捕获lambdas中的可突变闭合变量的盒子类不再具有易失性字段。这一变化提高了性能,但在一些罕见的使用场景中会导致新的竞赛条件。如果你受此影响,你需要提供自己的同步来访问变量。</target>
        </trans-unit>
        <trans-unit id="0bb1979f4fa500a54eb079957dc97f38da2dd0fd" translate="yes" xml:space="preserve">
          <source>The build generates the following files under the &lt;code&gt;build/bin/native/debugShared&lt;/code&gt; folder, depending on the host OS:</source>
          <target state="translated">根据主机操作系统，内部 &lt;code&gt;build/bin/native/debugShared&lt;/code&gt; 在build / bin / native / debugShared文件夹下生成以下文件：</target>
        </trans-unit>
        <trans-unit id="8d7f1cfca83f4be43b98d7bc6f3dc13e77358eda" translate="yes" xml:space="preserve">
          <source>The call to &lt;code&gt;C().foo(1)&lt;/code&gt; will print &quot;extension&quot;.</source>
          <target state="translated">对 &lt;code&gt;C().foo(1)&lt;/code&gt; 的调用将显示&amp;ldquo;扩展名&amp;rdquo;。</target>
        </trans-unit>
        <trans-unit id="5986952e4227de9affa4abe69a35c446c0bfc14d" translate="yes" xml:space="preserve">
          <source>The call to &lt;code&gt;execute&lt;/code&gt; uses a function passed as its second parameter to produce an object subgraph (i.e. set of mutually referring objects) which is then passed as a whole to that worker, it is then no longer available to the thread that initiated the request. This property is checked if the first parameter is &lt;code&gt;TransferMode.SAFE&lt;/code&gt; by graph traversal and is just assumed to be true, if it is &lt;code&gt;TransferMode.UNSAFE&lt;/code&gt;. The last parameter to &lt;code&gt;execute&lt;/code&gt; is a special Kotlin lambda, which is not allowed to capture any state, and is actually invoked in the target worker's context. Once processed, the result is transferred to whatever consumes it in the future, and it is attached to the object graph of that worker/thread.</source>
          <target state="translated">&lt;code&gt;execute&lt;/code&gt; 调用使用作为其第二个参数传递的函数来生成对象子图（即相互引用的对象集），然后将该对象子图作为一个整体传递给该工作程序，然后该线程不再可用于发起请求的线程。如果通过图形遍历检查第一个参数是否为 &lt;code&gt;TransferMode.SAFE&lt;/code&gt; ，并且如果它为 &lt;code&gt;TransferMode.UNSAFE&lt;/code&gt; ，则假定该属性为true 。要 &lt;code&gt;execute&lt;/code&gt; 的最后一个参数是特殊的Kotlin lambda，它不允许捕获任何状态，并且实际上是在目标工作程序的上下文中调用的。处理后，结果将转移到将来消耗它的任何对象，并将其附加到该工作程序/线程的对象图。</target>
        </trans-unit>
        <trans-unit id="cf4d64ccc981a36348dc5e3486734b7a527c1cd6" translate="yes" xml:space="preserve">
          <source>The callback which is called after the change of the property is made. The value of the property has already been changed when this callback is invoked.</source>
          <target state="translated">属性改变后调用的回调。当这个回调被调用时,属性的值已经被改变。</target>
        </trans-unit>
        <trans-unit id="f46a88a879fdbb85f0bd5182483f8be3f20e50d2" translate="yes" xml:space="preserve">
          <source>The callback which is called before a change to the property value is attempted. The value of the property hasn't been changed yet, when this callback is invoked. If the callback returns &lt;code&gt;true&lt;/code&gt; the value of the property is being set to the new value, and if the callback returns &lt;code&gt;false&lt;/code&gt; the new value is discarded and the property remains its old value.</source>
          <target state="translated">尝试更改属性值之前调用的回调。调用此回调时，属性的值尚未更改。如果回调返回 &lt;code&gt;true&lt;/code&gt; ，则将属性的值设置为新值，如果回调返回 &lt;code&gt;false&lt;/code&gt; ，则丢弃新值，并且该属性保留其旧值。</target>
        </trans-unit>
        <trans-unit id="e3032cd7941afef1fb6a2120a573d1232d288d72" translate="yes" xml:space="preserve">
          <source>The calls that affect inference are either members of the receiver type of an annotated function parameter or extensions for that type. The extensions must be themselves annotated with &lt;code&gt;@BuilderInference&lt;/code&gt;.</source>
          <target state="translated">影响推理的调用是带注释的函数参数的接收器类型的成员或该类型的扩展。扩展本身必须使用 &lt;code&gt;@BuilderInference&lt;/code&gt; 进行注释。</target>
        </trans-unit>
        <trans-unit id="30fa4bb2f1f32f71119d427e541174a3d60dd7ed" translate="yes" xml:space="preserve">
          <source>The capacity is the maximum length this string builder can have before an allocation occurs.</source>
          <target state="translated">容量是指这个字符串生成器在发生分配之前可以拥有的最大长度。</target>
        </trans-unit>
        <trans-unit id="5833c1f716afd68e76f6ee63506f61a1ac4d8150" translate="yes" xml:space="preserve">
          <source>The changes in dependencies are &lt;a href=&quot;https://en.wikipedia.org/wiki/Application_binary_interface&quot;&gt;ABI&lt;/a&gt; compatible. For example, the only changes are in method bodies.</source>
          <target state="translated">依赖项的更改与&lt;a href=&quot;https://en.wikipedia.org/wiki/Application_binary_interface&quot;&gt;ABI&lt;/a&gt;兼容。例如，唯一的变化是方法主体。</target>
        </trans-unit>
        <trans-unit id="ca6d3d47c03bc25dbb852207c0d849513ed5fbaf" translate="yes" xml:space="preserve">
          <source>The channels shown so far had no buffer. Unbuffered channels transfer elements when sender and receiver meet each other (aka rendezvous). If send is invoked first, then it is suspended until receive is invoked, if receive is invoked first, it is suspended until send is invoked.</source>
          <target state="translated">目前显示的信道没有缓冲区。无缓冲的通道在发送方和接收方相遇(也就是会合)时传输元素。如果先调用send,则暂停直至调用receive,如果先调用receive,则暂停直至调用send。</target>
        </trans-unit>
        <trans-unit id="fa768c5c4432c77d50de790cda1c8c687dccf1cc" translate="yes" xml:space="preserve">
          <source>The character &quot; &amp;ndash; quotation mark</source>
          <target state="translated">字符&amp;ldquo; &amp;ndash;引号</target>
        </trans-unit>
        <trans-unit id="10c860623b3bfd4256ce034a4fa10ecca2e8d17c" translate="yes" xml:space="preserve">
          <source>The character $ &amp;ndash; dollar sign</source>
          <target state="translated">字符$ &amp;ndash;美元符号</target>
        </trans-unit>
        <trans-unit id="bb0b9f77aa3a2b1b235948227a9bb6e95724f73c" translate="yes" xml:space="preserve">
          <source>The character &amp;Dagger;</source>
          <target state="translated">人物 &amp;Dagger;</target>
        </trans-unit>
        <trans-unit id="97d065e0957f914068e24066c8bc53313cb9196a" translate="yes" xml:space="preserve">
          <source>The character &amp;Prime;</source>
          <target state="translated">人物 &amp;rdquo;</target>
        </trans-unit>
        <trans-unit id="697b0963155a10d5f080f157c0e1d9c9aacc9b21" translate="yes" xml:space="preserve">
          <source>The character &amp;amp; &amp;ndash; ampersand</source>
          <target state="translated">字符＆&amp;ndash;和号</target>
        </trans-unit>
        <trans-unit id="094872d2798a25e27adaff380803676c236be373" translate="yes" xml:space="preserve">
          <source>The character &amp;asymp;</source>
          <target state="translated">字符&amp;asymp;</target>
        </trans-unit>
        <trans-unit id="41d60c0526caa8463741bd966759bf19026cb739" translate="yes" xml:space="preserve">
          <source>The character &amp;bdquo;</source>
          <target state="translated">人物 &amp;rdquo;</target>
        </trans-unit>
        <trans-unit id="fff1f1e9d607e97e90b4bc028bb0cc7f10c48e01" translate="yes" xml:space="preserve">
          <source>The character &amp;bull;</source>
          <target state="translated">人物 &amp;bull;</target>
        </trans-unit>
        <trans-unit id="143c3fcec665ebddc83c2753db67d88e2fbaf38a" translate="yes" xml:space="preserve">
          <source>The character &amp;cent;</source>
          <target state="translated">字符&amp;cent;</target>
        </trans-unit>
        <trans-unit id="ee171eaf967121aa215c85e62d2ec509ebb04257" translate="yes" xml:space="preserve">
          <source>The character &amp;copy;</source>
          <target state="translated">字符&amp;copy;</target>
        </trans-unit>
        <trans-unit id="314c38bf0716b200771c1a885fab69a9b65b99c6" translate="yes" xml:space="preserve">
          <source>The character &amp;dagger;</source>
          <target state="translated">人物 &amp;dagger;</target>
        </trans-unit>
        <trans-unit id="6f9bd3084db43833f63880cca5d946309a97ca39" translate="yes" xml:space="preserve">
          <source>The character &amp;deg;</source>
          <target state="translated">字符&amp;deg;</target>
        </trans-unit>
        <trans-unit id="0e423b28ce34d3cf18fda3a07cf0dfa515d8890e" translate="yes" xml:space="preserve">
          <source>The character &amp;euro;</source>
          <target state="translated">角色&amp;euro;</target>
        </trans-unit>
        <trans-unit id="b1449855c21d4fd06c0d5e74b5a2a7a14edf968a" translate="yes" xml:space="preserve">
          <source>The character &amp;frac12;</source>
          <target state="translated">字符&amp;frac12;</target>
        </trans-unit>
        <trans-unit id="1fa4a09afc8d4c4f53c306db471f300c4497957c" translate="yes" xml:space="preserve">
          <source>The character &amp;ge;</source>
          <target state="translated">字符&amp;ge;</target>
        </trans-unit>
        <trans-unit id="3dfbeeaef1c98d8a22709ebef333428072939a42" translate="yes" xml:space="preserve">
          <source>The character &amp;gt; &amp;ndash; greater-than sign</source>
          <target state="translated">字符&amp;gt; &amp;ndash;大于号</target>
        </trans-unit>
        <trans-unit id="6eb5e1e14a002081da7d716b380be22cde00b939" translate="yes" xml:space="preserve">
          <source>The character &amp;hellip;</source>
          <target state="translated">人物 &amp;hellip;</target>
        </trans-unit>
        <trans-unit id="a01873a887462b6593c2f5f42a550b38052e578a" translate="yes" xml:space="preserve">
          <source>The character &amp;laquo;</source>
          <target state="translated">人物 &amp;rdquo;</target>
        </trans-unit>
        <trans-unit id="e667dca130564a78a41110f6cbd1264a713d8dd2" translate="yes" xml:space="preserve">
          <source>The character &amp;ldquo;</source>
          <target state="translated">人物 &amp;rdquo;</target>
        </trans-unit>
        <trans-unit id="950de0de2afce4fa96ad4f62ca4dab286d3d82a8" translate="yes" xml:space="preserve">
          <source>The character &amp;le;</source>
          <target state="translated">字符&amp;le;</target>
        </trans-unit>
        <trans-unit id="9023ce61724bbabe84554211f1682a5b7d26a59b" translate="yes" xml:space="preserve">
          <source>The character &amp;lsquo;</source>
          <target state="translated">人物 '</target>
        </trans-unit>
        <trans-unit id="e9f2776cd83195ab61d81c705eb53d1d3649fd0e" translate="yes" xml:space="preserve">
          <source>The character &amp;lt; &amp;ndash; less-than sign</source>
          <target state="translated">字符&amp;lt;&amp;ndash;小于号</target>
        </trans-unit>
        <trans-unit id="7e613a75a280526a06a5c3a8cccd7722979dfc79" translate="yes" xml:space="preserve">
          <source>The character &amp;mdash;</source>
          <target state="translated">人物 -</target>
        </trans-unit>
        <trans-unit id="257dd2718c3d554488c288a2e9f88456100a73ef" translate="yes" xml:space="preserve">
          <source>The character &amp;middot;</source>
          <target state="translated">人物 &amp;middot;</target>
        </trans-unit>
        <trans-unit id="b00154ce5f2758f6abb5e4356e419ba3e2aed105" translate="yes" xml:space="preserve">
          <source>The character &amp;ndash;</source>
          <target state="translated">人物 -</target>
        </trans-unit>
        <trans-unit id="aad571a2b53620d99840a4d55bce3f5907371d75" translate="yes" xml:space="preserve">
          <source>The character &amp;ne;</source>
          <target state="translated">字符&amp;ne;</target>
        </trans-unit>
        <trans-unit id="a360453c2e244288bd242eeb7641ad601e593f75" translate="yes" xml:space="preserve">
          <source>The character &amp;para;</source>
          <target state="translated">人物 &amp;para;</target>
        </trans-unit>
        <trans-unit id="1c97c4311adda721fa170a84ab8496cb5535afa3" translate="yes" xml:space="preserve">
          <source>The character &amp;plusmn;</source>
          <target state="translated">字符&amp;plusmn;</target>
        </trans-unit>
        <trans-unit id="55144636deb97ada56b2d29a7bb655a9f22ea932" translate="yes" xml:space="preserve">
          <source>The character &amp;pound;</source>
          <target state="translated">角色&amp;pound;</target>
        </trans-unit>
        <trans-unit id="09c581b6f45120a7ecac89f6de96696cea52b01c" translate="yes" xml:space="preserve">
          <source>The character &amp;prime;</source>
          <target state="translated">人物 '</target>
        </trans-unit>
        <trans-unit id="c49eacef46814486b9678b461b5fad7053d65453" translate="yes" xml:space="preserve">
          <source>The character &amp;raquo;</source>
          <target state="translated">人物 &amp;rdquo;</target>
        </trans-unit>
        <trans-unit id="b94a5614ad8379d659840f63e74a095d51d6a7c0" translate="yes" xml:space="preserve">
          <source>The character &amp;rdquo;</source>
          <target state="translated">人物 &amp;rdquo;</target>
        </trans-unit>
        <trans-unit id="be87e8e3080722678155d4e087ea1bf466788605" translate="yes" xml:space="preserve">
          <source>The character &amp;reg;</source>
          <target state="translated">人物&amp;reg;</target>
        </trans-unit>
        <trans-unit id="e6daa833ce04c765a61d1650a1e4e3d75924ca44" translate="yes" xml:space="preserve">
          <source>The character &amp;rsquo;</source>
          <target state="translated">人物 '</target>
        </trans-unit>
        <trans-unit id="43ad6d82b90d71d375e73e1b9402ca5934e45166" translate="yes" xml:space="preserve">
          <source>The character &amp;sbquo;</source>
          <target state="translated">人物 ，</target>
        </trans-unit>
        <trans-unit id="4139cb770ca9a15c26a42368989f1dc39e1910da" translate="yes" xml:space="preserve">
          <source>The character &amp;sect;</source>
          <target state="translated">人物 &amp;sect;</target>
        </trans-unit>
        <trans-unit id="98e7fc24f032b2c1437d0f55811d67ee1de7b88e" translate="yes" xml:space="preserve">
          <source>The character &amp;times;</source>
          <target state="translated">角色&amp;times;</target>
        </trans-unit>
        <trans-unit id="f6467d07a9719c1073ddb29614f3d2a5ac72dfb3" translate="yes" xml:space="preserve">
          <source>The character &amp;trade;</source>
          <target state="translated">人物&amp;trade;</target>
        </trans-unit>
        <trans-unit id="113ea2720e8bacc629e001c13c4a2b8a86d11787" translate="yes" xml:space="preserve">
          <source>The choice between the &lt;code&gt;IR&lt;/code&gt; and &lt;code&gt;LEGACY&lt;/code&gt; compilers was not yet available in Kotlin 1.3.xx. Because of this, you may encounter a Gradle error &lt;code&gt;Cannot choose between the following variants...&lt;/code&gt; if one of your dependencies (or any transitive dependency) was built using Kotlin 1.4+ but your project uses Kotlin 1.3.xx. A workaround is provided &lt;a href=&quot;https://youtrack.jetbrains.com/issue/KT-40226&quot;&gt;here&lt;/a&gt;.</source>
          <target state="translated">Kotlin 1.3.xx中尚未提供 &lt;code&gt;IR&lt;/code&gt; 和 &lt;code&gt;LEGACY&lt;/code&gt; 编译器之间的选择。因此，您可能会遇到Gradle错误 &lt;code&gt;Cannot choose between the following variants...&lt;/code&gt; 如果您的某个依赖项（或任何传递性依赖项）是使用Kotlin 1.4+构建的，而您的项目使用Kotlin1.3.xx。&lt;a href=&quot;https://youtrack.jetbrains.com/issue/KT-40226&quot;&gt;这里&lt;/a&gt;提供了一种解决方法。</target>
        </trans-unit>
        <trans-unit id="1789ee1227acc918fbc63737b2058bf75be81287" translate="yes" xml:space="preserve">
          <source>The class can also declare &lt;strong&gt;secondary constructors&lt;/strong&gt;, which are prefixed with &lt;em&gt;constructor&lt;/em&gt;:</source>
          <target state="translated">该类还可以声明&lt;strong&gt;辅助构造函数&lt;/strong&gt;，它们以&lt;em&gt;构造函数&lt;/em&gt;为前缀：</target>
        </trans-unit>
        <trans-unit id="bc78b13ff48b9fc50475495610ff41f558bf6256" translate="yes" xml:space="preserve">
          <source>The class declaration consists of the class name, the class header (specifying its type parameters, the primary constructor etc.) and the class body, surrounded by curly braces. Both the header and the body are optional; if the class has no body, curly braces can be omitted.</source>
          <target state="translated">类声明由类名、类头(指定类型参数、主要构造函数等)和类主体组成,用大括号包围。头和主体都是可选的;如果类没有主体,大括号可以省略。</target>
        </trans-unit>
        <trans-unit id="20fb66c6dd38ed7ad8f3ab7df8f07a3ccc7c3a1d" translate="yes" xml:space="preserve">
          <source>The class file with a kind not listed here is treated as a non-Kotlin file.</source>
          <target state="translated">这里没有列出的类文件将作为非Kotlin文件处理。</target>
        </trans-unit>
        <trans-unit id="8d923d6e9fe47217a8cbe28cd4bc0054618db9f2" translate="yes" xml:space="preserve">
          <source>The code above uses a &lt;a href=&quot;reflection#bound-class-references-since-11&quot;&gt;bound class reference&lt;/a&gt;, which is supported since Kotlin 1.1. You can also use the &lt;code&gt;javaClass&lt;/code&gt; extension property:</source>
          <target state="translated">上面的代码使用了&lt;a href=&quot;reflection#bound-class-references-since-11&quot;&gt;绑定类引用&lt;/a&gt;，从Kotlin 1.1开始就支持该引用。您还可以使用 &lt;code&gt;javaClass&lt;/code&gt; 扩展属性：</target>
        </trans-unit>
        <trans-unit id="732a1f0dd7bc7add2cc125d4681e9dd3eef05206" translate="yes" xml:space="preserve">
          <source>The code in object expressions can access variables from the enclosing scope.</source>
          <target state="translated">对象表达式中的代码可以从包围的范围中访问变量。</target>
        </trans-unit>
        <trans-unit id="2a037143482eba48d7a06126430f1e3e039ee172" translate="yes" xml:space="preserve">
          <source>The code in question is from the &lt;a href=&quot;https://curl.haxx.se/libcurl/c/simple.html&quot;&gt;simple&lt;/a&gt; example (comments removed for brevity)</source>
          <target state="translated">有问题的代码来自&lt;a href=&quot;https://curl.haxx.se/libcurl/c/simple.html&quot;&gt;简单的&lt;/a&gt;示例（为简洁起见删除了注释）</target>
        </trans-unit>
        <trans-unit id="02b7f3091db5cc1f6df8785c890e5a0df1e43276" translate="yes" xml:space="preserve">
          <source>The code in the &lt;code&gt;hello.kt&lt;/code&gt; file may look like this:</source>
          <target state="translated">&lt;code&gt;hello.kt&lt;/code&gt; 文件中的代码可能如下所示：</target>
        </trans-unit>
        <trans-unit id="8051836ca1f9bfcf8f55044dce46370d2274f4e3" translate="yes" xml:space="preserve">
          <source>The code in the final &lt;code&gt;hello.kt&lt;/code&gt; file may look like this:</source>
          <target state="translated">最终的 &lt;code&gt;hello.kt&lt;/code&gt; 文件中的代码可能如下所示：</target>
        </trans-unit>
        <trans-unit id="53a9cf6b4f40ef47e2031c236bc499f1385bb27e" translate="yes" xml:space="preserve">
          <source>The code is full of Objective-C attributes, which are intended to help the use of the framework from both Objective-C and Swift languages. &lt;code&gt;DemoClazz&lt;/code&gt;, &lt;code&gt;DemoInterface&lt;/code&gt;, and &lt;code&gt;DemoObject&lt;/code&gt; are created for &lt;code&gt;Clazz&lt;/code&gt;, &lt;code&gt;Interface&lt;/code&gt;, and &lt;code&gt;Object&lt;/code&gt; respectively. The &lt;code&gt;Interface&lt;/code&gt; is turned into &lt;code&gt;@protocol&lt;/code&gt;, both a &lt;code&gt;class&lt;/code&gt; and an &lt;code&gt;object&lt;/code&gt; are represented as &lt;code&gt;@interface&lt;/code&gt;. The &lt;code&gt;Demo&lt;/code&gt; prefix comes from the &lt;code&gt;-output&lt;/code&gt; parameter of the &lt;code&gt;kotlinc-native&lt;/code&gt; compiler and the framework name. We see here that the nullable return type &lt;code&gt;ULong?&lt;/code&gt; is turned into &lt;code&gt;DemoLong*&lt;/code&gt; in Objective-C.</source>
          <target state="translated">该代码充满了Objective-C属性，旨在帮助使用Objective-C和Swift语言的框架。 &lt;code&gt;DemoClazz&lt;/code&gt; ， &lt;code&gt;DemoInterface&lt;/code&gt; 和 &lt;code&gt;DemoObject&lt;/code&gt; 的是为创建 &lt;code&gt;Clazz&lt;/code&gt; ， &lt;code&gt;Interface&lt;/code&gt; ，和 &lt;code&gt;Object&lt;/code&gt; 分别。的 &lt;code&gt;Interface&lt;/code&gt; 变成 &lt;code&gt;@protocol&lt;/code&gt; ，既是一个 &lt;code&gt;class&lt;/code&gt; 和 &lt;code&gt;object&lt;/code&gt; 被表示为 &lt;code&gt;@interface&lt;/code&gt; 。该 &lt;code&gt;Demo&lt;/code&gt; 前缀来自 &lt;code&gt;-output&lt;/code&gt; 的参数 &lt;code&gt;kotlinc-native&lt;/code&gt; 编译器和框架的名字。我们在这里看到可以为null的返回类型 &lt;code&gt;ULong?&lt;/code&gt; 在Objective-C中变成了 &lt;code&gt;DemoLong*&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="bb3f232ccbe55c8a64749007e2a52df82753b753" translate="yes" xml:space="preserve">
          <source>The code is still written as if we were writing synchronous code, top-down, without the need of any special syntax, beyond the use of a function called &lt;code&gt;launch&lt;/code&gt; which essentially kicks-off the coroutine (covered in other tutorials).</source>
          <target state="translated">仍然使用自上而下的方式编写代码，而不需要任何特殊的语法，除了使用称为 &lt;code&gt;launch&lt;/code&gt; 的函数之外，该函数实质上启动了协程（在其他教程中已发现）。</target>
        </trans-unit>
        <trans-unit id="a467b8b9b7ee4d493e257af4cbf437bbbbde6f1c" translate="yes" xml:space="preserve">
          <source>The code or data pointed by the value of this variable.</source>
          <target state="translated">该变量的值所指向的代码或数据。</target>
        </trans-unit>
        <trans-unit id="02020b547b7971154705decbe3b4487f3a320a20" translate="yes" xml:space="preserve">
          <source>The code reads as follows. We have the &lt;code&gt;libnative_ExportedSymbols&lt;/code&gt; structure, which defines all the functions that Kotlin/Native and our library provides us. It uses nested anonymous structures heavily to mimic packages. The &lt;code&gt;libnative_&lt;/code&gt; prefix comes from the library name.</source>
          <target state="translated">代码如下。我们具有 &lt;code&gt;libnative_ExportedSymbols&lt;/code&gt; 结构，该结构定义Kotlin / Native和我们的库为我们提供的所有功能。它大量使用嵌套的匿名结构来模仿程序包。该 &lt;code&gt;libnative_&lt;/code&gt; 前缀来自库名。</target>
        </trans-unit>
        <trans-unit id="38d106af82f35f678ad2690b0baa41429ea7b73f" translate="yes" xml:space="preserve">
          <source>The code uses anonymous structure declarations. The code &lt;code&gt;struct { .. } foo&lt;/code&gt; declares a field in the outer struct of that anonymous structure type, the type with no name.</source>
          <target state="translated">该代码使用匿名结构声明。代码 &lt;code&gt;struct { .. } foo&lt;/code&gt; 在该匿名结构类型（没有名称的类型）的外部结构中声明了一个字段。</target>
        </trans-unit>
        <trans-unit id="5a75d5c9d164b0af6fa981261ed056bb33166b99" translate="yes" xml:space="preserve">
          <source>The collection interfaces and related functions are located in the kotlin.collections package. Let's get an overview of its contents.</source>
          <target state="translated">集合接口和相关函数位于kotlin.collection包中。我们先来了解一下它的内容。</target>
        </trans-unit>
        <trans-unit id="a43a0f5851d135e378a655043e2edbc27114369a" translate="yes" xml:space="preserve">
          <source>The collection provide methods for convenient access to the both ends. It also implements &lt;a href=&quot;../-mutable-list/index#kotlin.collections.MutableList&quot;&gt;MutableList&lt;/a&gt; interface and supports efficient get/set operations by index.</source>
          <target state="translated">该集合提供了方便访问两端的方法。它还实现了&lt;a href=&quot;../-mutable-list/index#kotlin.collections.MutableList&quot;&gt;MutableList&lt;/a&gt;接口，并支持通过索引进行有效的get / set操作。</target>
        </trans-unit>
        <trans-unit id="8eb00e1a99072f02da7c9734f0160d0f6d88090d" translate="yes" xml:space="preserve">
          <source>The command produces the &lt;code&gt;main.exe&lt;/code&gt; file, which we can run.</source>
          <target state="translated">该命令将生成 &lt;code&gt;main.exe&lt;/code&gt; 文件，我们可以运行该文件。</target>
        </trans-unit>
        <trans-unit id="c3c76c63d39731dfbcdc20b108a998ffa2cab356" translate="yes" xml:space="preserve">
          <source>The common base class of all enum classes. See the &lt;a href=&quot;../../../../../../docs/reference/enum-classes&quot;&gt;Kotlin language documentation&lt;/a&gt; for more information on enum classes.</source>
          <target state="translated">所有枚举类的公共基类。有关枚举类的更多信息，请参见&lt;a href=&quot;../../../../../../docs/reference/enum-classes&quot;&gt;Kotlin语言文档&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="b0aedfb3fef921fc9d29c01593b4d03896cda204" translate="yes" xml:space="preserve">
          <source>The common base class of all enum classes. See the &lt;a href=&quot;../../../../../docs/reference/enum-classes&quot;&gt;Kotlin language documentation&lt;/a&gt; for more information on enum classes.</source>
          <target state="translated">所有枚举类的公共基类。有关枚举类的更多信息，请参见&lt;a href=&quot;../../../../../docs/reference/enum-classes&quot;&gt;Kotlin语言文档&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="81167d80c8bd1494ae8b5c6e43cfe5f3d98e0f63" translate="yes" xml:space="preserve">
          <source>The common code is &lt;code&gt;&quot;Kotlin Rocks on ${platformName()}&quot;&lt;/code&gt;, where &lt;code&gt;platformName()&lt;/code&gt; is a function that is declared using the &lt;code&gt;expect&lt;/code&gt; keyword. The &lt;code&gt;actual&lt;/code&gt; implementation will be specific to the platform.</source>
          <target state="translated">通用代码是 &lt;code&gt;&quot;Kotlin Rocks on ${platformName()}&quot;&lt;/code&gt; ，其中 &lt;code&gt;platformName()&lt;/code&gt; 是使用 &lt;code&gt;expect&lt;/code&gt; 关键字声明的函数。在 &lt;code&gt;actual&lt;/code&gt; 实施将是特定于平台。</target>
        </trans-unit>
        <trans-unit id="26e2504fa6bfc493ea02066bb2b03d45d4bc4811" translate="yes" xml:space="preserve">
          <source>The common source sets cannot include Java sources.</source>
          <target state="translated">通用源集不能包含Java源。</target>
        </trans-unit>
        <trans-unit id="95ec79a350a2b7276da32a4ea5b29db260f72d85" translate="yes" xml:space="preserve">
          <source>The common supertype for all callable references is &lt;a href=&quot;../../api/latest/jvm/stdlib/kotlin.reflect/-k-callable/index&quot;&gt;&lt;code&gt;KCallable&amp;lt;out R&amp;gt;&lt;/code&gt;&lt;/a&gt;, where &lt;code&gt;R&lt;/code&gt; is the return value type, which is the property type for properties, and the constructed type for constructors.</source>
          <target state="translated">所有可调用引用的通用超类型是&lt;a href=&quot;../../api/latest/jvm/stdlib/kotlin.reflect/-k-callable/index&quot;&gt; &lt;code&gt;KCallable&amp;lt;out R&amp;gt;&lt;/code&gt; &lt;/a&gt;，其中 &lt;code&gt;R&lt;/code&gt; 是返回值类型，它是属性的属性类型，而构造函数是构造类型。</target>
        </trans-unit>
        <trans-unit id="b490df5b9d3260a0f0b5037a5c6848fe5e1088c0" translate="yes" xml:space="preserve">
          <source>The companion object &lt;a href=&quot;-default/index&quot;&gt;Random.Default&lt;/a&gt; is the default instance of &lt;a href=&quot;index&quot;&gt;Random&lt;/a&gt;.</source>
          <target state="translated">伴随对象&lt;a href=&quot;-default/index&quot;&gt;Random.Default&lt;/a&gt;是&lt;a href=&quot;index&quot;&gt;Random&lt;/a&gt;的默认实例。</target>
        </trans-unit>
        <trans-unit id="d53a914136005ae6f435321f1dcd61b723a192c1" translate="yes" xml:space="preserve">
          <source>The companion object is a singleton, and its members can be accessed directly via the name of the containing class (although you can also insert the name of the companion object if you want to be explicit about accessing the companion object):</source>
          <target state="translated">同伴对象是一个单子,它的成员可以直接通过包含类的名称来访问(不过如果你想明确访问同伴对象,也可以插入同伴对象的名称)。</target>
        </trans-unit>
        <trans-unit id="4ea9b65371d26b1c5d91b2e2140d9de16a9201af" translate="yes" xml:space="preserve">
          <source>The compilation from which the binary is built. By default, &lt;code&gt;test&lt;/code&gt; binaries are based on the &lt;code&gt;test&lt;/code&gt; compilation while other binaries - on the &lt;code&gt;main&lt;/code&gt; compilation.</source>
          <target state="translated">从中构建二进制文件的编译。默认情况下， &lt;code&gt;test&lt;/code&gt; 二进制文件基于 &lt;code&gt;test&lt;/code&gt; 编译，而其他二进制文件则基于 &lt;code&gt;main&lt;/code&gt; 编译。</target>
        </trans-unit>
        <trans-unit id="23856358de98bbdac052e0c621f22a36b386526e" translate="yes" xml:space="preserve">
          <source>The compilation output.</source>
          <target state="translated">编译输出。</target>
        </trans-unit>
        <trans-unit id="b4197acd5de5439005535dfcd5acd86104f3b404" translate="yes" xml:space="preserve">
          <source>The compilation&amp;rsquo;s default source set.</source>
          <target state="translated">编译的默认源集。</target>
        </trans-unit>
        <trans-unit id="b0ac582b63206214b2f5383cb2acb40941a9f13a" translate="yes" xml:space="preserve">
          <source>The compilations created for an Android target by default are tied to &lt;a href=&quot;https://developer.android.com/studio/build/build-variants&quot;&gt;Android build variants&lt;/a&gt;: for each build variant, a Kotlin compilation is created under the same name.</source>
          <target state="translated">默认情况下，为Android目标创建的编译与&lt;a href=&quot;https://developer.android.com/studio/build/build-variants&quot;&gt;Android构建变体相关联&lt;/a&gt;：对于每个构建变体，均以相同的名称创建Kotlin编译。</target>
        </trans-unit>
        <trans-unit id="1e2216eb9ae725f1d6c56e917607f0c9488b74a1" translate="yes" xml:space="preserve">
          <source>The compiler automatically derives the following members from all properties declared in the primary constructor:</source>
          <target state="translated">编译器会自动从主构造函数中声明的所有属性中导出以下成员。</target>
        </trans-unit>
        <trans-unit id="6577ea37c1117c7a1d89eaf0755007d75c98ca87" translate="yes" xml:space="preserve">
          <source>The compiler can infer the function types for variables if there is enough information:</source>
          <target state="translated">如果有足够的信息,编译器可以推断出变量的函数类型。</target>
        </trans-unit>
        <trans-unit id="6c9d4888e9777e469bf8f8415875e00d70265bbb" translate="yes" xml:space="preserve">
          <source>The compiler ensures that every expected declaration has actual declarations in all platform modules that implement the corresponding common module, and reports an error if any actual declarations are missing. The IDE provides tools that help you create the missing actual declarations.</source>
          <target state="translated">编译器确保每个预期的声明在所有实现相应通用模块的平台模块中都有实际的声明,如果缺少任何实际声明,编译器会报错。集成开发环境提供的工具可以帮助你创建缺失的实际声明。</target>
        </trans-unit>
        <trans-unit id="1bc9fa0ea96f6adbeae3b32244221538e36f7db6" translate="yes" xml:space="preserve">
          <source>The compiler generates an executable called &lt;code&gt;a.out&lt;/code&gt;. We need to run it to see in action the Kotlin code being executed from C library. On Linux, we'll need to include &lt;code&gt;.&lt;/code&gt; into the &lt;code&gt;LD_LIBRARY_PATH&lt;/code&gt; to let the application know to load the &lt;code&gt;libnative.so&lt;/code&gt; library from the current folder.</source>
          <target state="translated">编译器生成一个称为 &lt;code&gt;a.out&lt;/code&gt; 的可执行文件。我们需要运行它以查看从C库执行的Kotlin代码的作用。在Linux上，我们需要包含 &lt;code&gt;.&lt;/code&gt; 进入 &lt;code&gt;LD_LIBRARY_PATH&lt;/code&gt; ，让应用程序知道从当前文件夹中加载 &lt;code&gt;libnative.so&lt;/code&gt; 库。</target>
        </trans-unit>
        <trans-unit id="9c32f1ebf038bdf8cbaba8702b89e98ca18e811a" translate="yes" xml:space="preserve">
          <source>The compiler is smart enough to know a cast to be safe if a negative check leads to a return:</source>
          <target state="translated">编译器很聪明,它知道如果负检查导致返回,那么投掷是安全的。</target>
        </trans-unit>
        <trans-unit id="6c760f17f753a0cd7195aa08e67eb2dc50e9752a" translate="yes" xml:space="preserve">
          <source>The compiler now inlines values of &lt;code&gt;const val&lt;/code&gt; properties into the locations where they are used.</source>
          <target state="translated">现在，编译器将 &lt;code&gt;const val&lt;/code&gt; 属性的值内联到使用它们的位置。</target>
        </trans-unit>
        <trans-unit id="4ba2b709c858d08263f181dafb3aabf655fd192d" translate="yes" xml:space="preserve">
          <source>The compiler now provides an option to treat all warnings as errors. Use &lt;code&gt;-Werror&lt;/code&gt; on the command line, or the following Gradle snippet:</source>
          <target state="translated">编译器现在提供了将所有警告视为错误的选项。在命令行上或以下Gradle片段中使用 &lt;code&gt;-Werror&lt;/code&gt; ：</target>
        </trans-unit>
        <trans-unit id="71411ab1eb04e1e2a8b1556ddf262cc1922d7424" translate="yes" xml:space="preserve">
          <source>The compiler performs the following steps for resolution of an operator in the &lt;em&gt;postfix&lt;/em&gt; form, e.g. &lt;code&gt;a++&lt;/code&gt;:</source>
          <target state="translated">编译器执行以下步骤来解析&lt;em&gt;后缀&lt;/em&gt;形式的运算符，例如 &lt;code&gt;a++&lt;/code&gt; ：</target>
        </trans-unit>
        <trans-unit id="ade270e63280116ba329a9222cd68e987a0137a2" translate="yes" xml:space="preserve">
          <source>The compiler produces a warning for the cast in the last line. The cast cannot be fully checked at runtime and provides no guarantee that the values in the map are &lt;code&gt;Int&lt;/code&gt;.</source>
          <target state="translated">编译器在最后一行为转换产生警告。在运行时无法完全检查强制类型转换，也不保证映射中的值为 &lt;code&gt;Int&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="c187f47b8c07f5d91c0556c45f360de519c42c3f" translate="yes" xml:space="preserve">
          <source>The compiler produces the code relevant for the target module system, for example, in case of CommonJS, it will import the declaration via the &lt;code&gt;require(...)&lt;/code&gt; function.</source>
          <target state="translated">编译器生成与目标模块系统相关的代码，例如，对于CommonJS，它将通过 &lt;code&gt;require(...)&lt;/code&gt; 函数导入声明。</target>
        </trans-unit>
        <trans-unit id="8552578d258f1326cbba27a9248961d718afcda8" translate="yes" xml:space="preserve">
          <source>The compiler tracks the information about the check you performed, and allows the call to &lt;code&gt;length&lt;/code&gt; inside the &lt;em&gt;if&lt;/em&gt;. More complex conditions are supported as well:</source>
          <target state="translated">编译器跟踪有关您执行的检查的信息，并允许在&lt;em&gt;if&lt;/em&gt;内调用 &lt;code&gt;length&lt;/code&gt; 。还支持更复杂的条件：&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="6dbebb0d588955ecc95db38394b6245335aeaf4f" translate="yes" xml:space="preserve">
          <source>The compiler type can also be set in the &lt;code&gt;gradle.properties&lt;/code&gt; file, with the key &lt;code&gt;kotlin.js.compiler=ir&lt;/code&gt;. (This behaviour is overwritten by any settings in the &lt;code&gt;build.gradle(.kts)&lt;/code&gt;, however).</source>
          <target state="translated">还可以使用键 &lt;code&gt;kotlin.js.compiler=ir&lt;/code&gt; 在 &lt;code&gt;gradle.properties&lt;/code&gt; 文件中设置编译器类型。（但是， &lt;code&gt;build.gradle(.kts)&lt;/code&gt; 中的任何设置都会覆盖此行为）。</target>
        </trans-unit>
        <trans-unit id="9778744271ecf22c5df54071242110d274ebb382" translate="yes" xml:space="preserve">
          <source>The compiler will allow this function to be called as e.g. &lt;code&gt;test(&quot;a&quot;, &quot;b&quot;)&lt;/code&gt; or &lt;code&gt;test(&quot;a&quot;, null)&lt;/code&gt;, but not as &lt;code&gt;test(null, &quot;b&quot;)&lt;/code&gt; or &lt;code&gt;test(null, null)&lt;/code&gt;. Calling &lt;code&gt;test(a, b)&lt;/code&gt; is only allowed if the compiler can prove that &lt;code&gt;a&lt;/code&gt; cannot possibly be null. Inside of &lt;code&gt;test&lt;/code&gt;, the compiler will not allow you to do anything with &lt;code&gt;b&lt;/code&gt; that would result in an exception if &lt;code&gt;b&lt;/code&gt; should happen to be null - so you can do &lt;code&gt;a.length&lt;/code&gt;, but not &lt;code&gt;b.length&lt;/code&gt;. However, once you're inside a conditional where you have checked that &lt;code&gt;b&lt;/code&gt; is not null, you can do it:</source>
          <target state="translated">编译器将允许将此函数调用为例如 &lt;code&gt;test(&quot;a&quot;, &quot;b&quot;)&lt;/code&gt; 或 &lt;code&gt;test(&quot;a&quot;, null)&lt;/code&gt; ，而不是称为 &lt;code&gt;test(null, &quot;b&quot;)&lt;/code&gt; 或 &lt;code&gt;test(null, null)&lt;/code&gt; 。仅当编译器可以证明 &lt;code&gt;a&lt;/code&gt; 不可能为null时，才允许调用 &lt;code&gt;test(a, b)&lt;/code&gt; 。在 &lt;code&gt;test&lt;/code&gt; ，如果 &lt;code&gt;b&lt;/code&gt; 恰好为null ，则编译器将不允许您对 &lt;code&gt;b&lt;/code&gt; 进行任何操作，否则会导致异常-因此您可以执行 &lt;code&gt;a.length&lt;/code&gt; ，但不能执行 &lt;code&gt;b.length&lt;/code&gt; 。但是，一旦您处于检查 &lt;code&gt;b&lt;/code&gt; 不为null的条件内，就可以执行以下操作：</target>
        </trans-unit>
        <trans-unit id="d2b29d9a02116dffd597657f45323e8d260b605c" translate="yes" xml:space="preserve">
          <source>The compiler will generate something like this (except that &lt;code&gt;start&lt;/code&gt; won't collide with any other identifiers with the same name):</source>
          <target state="translated">编译器将生成类似以下内容的代码（除了 &lt;code&gt;start&lt;/code&gt; 不会与任何其他同名标识符冲突）：</target>
        </trans-unit>
        <trans-unit id="93c0badc9698bd83e21fa61741e490ba8801596d" translate="yes" xml:space="preserve">
          <source>The compiler will not let you perform checks that can't possibly succeed because the declared type of the variable is a class that is on an unrelated branch of the class hierarchy from the class you're checking against - if the declared type of &lt;code&gt;x&lt;/code&gt; is &lt;code&gt;MotorVehicle&lt;/code&gt;, you can't check if &lt;code&gt;x&lt;/code&gt; is a &lt;code&gt;Person&lt;/code&gt;. If the right-hand side of &lt;code&gt;is&lt;/code&gt; is an interface, Kotlin will allow the type of the left-hand side to be any interface or open class, because it could be that some subclass thereof implements the interface.</source>
          <target state="translated">编译器不会让您执行无法成功执行的检查，因为变量的声明类型是要检查的类的类层次结构的不相关分支上的类-如果 &lt;code&gt;x&lt;/code&gt; 的声明类型为 &lt;code&gt;MotorVehicle&lt;/code&gt; ，您不能检查 &lt;code&gt;x&lt;/code&gt; 是否是 &lt;code&gt;Person&lt;/code&gt; 。如果的右边 &lt;code&gt;is&lt;/code&gt; 是一个接口，科特林将使左侧的类型是任何接口或公开课，因为它可能是一些子类及其实现的接口。</target>
        </trans-unit>
        <trans-unit id="945c10a176528faf419fb001b8765fc6d7f48809" translate="yes" xml:space="preserve">
          <source>The complete list of options for the Gradle tasks is the following:</source>
          <target state="translated">Gradle任务的完整选项列表如下。</target>
        </trans-unit>
        <trans-unit id="6faca9aef8f0af27489fabb11e18668f0d73d512" translate="yes" xml:space="preserve">
          <source>The components used to setup Gradle publications.</source>
          <target state="translated">用于设置Gradle出版物的组件。</target>
        </trans-unit>
        <trans-unit id="3c10c9a78955f70ea89c2ed5382b97613f6fd27c" translate="yes" xml:space="preserve">
          <source>The concurrent nature of &lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines.flow/flat-map-merge.html&quot;&gt;flatMapMerge&lt;/a&gt; is obvious:</source>
          <target state="translated">&lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines.flow/flat-map-merge.html&quot;&gt;flatMapMerge&lt;/a&gt;的并发本质是显而易见的：</target>
        </trans-unit>
        <trans-unit id="4b9af24e6804c15099a6e15d86ca2e171e7f1be2" translate="yes" xml:space="preserve">
          <source>The consumer has to add the attribute to a single target where the ambiguity arises.</source>
          <target state="translated">消费者要在产生歧义的地方将属性添加到单个目标上。</target>
        </trans-unit>
        <trans-unit id="cbc4e4912fffd8b8c15a7f1685ee311f7de94af5" translate="yes" xml:space="preserve">
          <source>The consumer may only need to add the attribute to a single target where the ambiguity arises.</source>
          <target state="translated">消费者可能只需要将属性添加到一个出现歧义的目标上。</target>
        </trans-unit>
        <trans-unit id="2fa143f534ac2f4a54ee1e8593acf92219a64686" translate="yes" xml:space="preserve">
          <source>The contents of our &lt;code&gt;main.js&lt;/code&gt; would be:</source>
          <target state="translated">我们的 &lt;code&gt;main.js&lt;/code&gt; 的内容为：</target>
        </trans-unit>
        <trans-unit id="ccc1b0f9d51d769d3aac8a2e95f9b22ce641f370" translate="yes" xml:space="preserve">
          <source>The context of the coroutine that corresponds to this continuation.</source>
          <target state="translated">与该延续对应的coroutine的上下文。</target>
        </trans-unit>
        <trans-unit id="347bd2f03e4af765cba7e04d72d0cecc9c6bb8cc" translate="yes" xml:space="preserve">
          <source>The contract description must be at the beginning of a function and have at least one effect.</source>
          <target state="translated">合同说明必须在一个功能的开头,并且至少有一个效果。</target>
        </trans-unit>
        <trans-unit id="4954ad3fce80d9310d9ce43541aaf17e0123a4ea" translate="yes" xml:space="preserve">
          <source>The contravariant type parameter of a parameter of a function-typed return type (the user will call the returned function with something that can consume any &lt;code&gt;Fruit&lt;/code&gt;, so it's okay to return a function that expects to receive something that can handle &lt;code&gt;Apple&lt;/code&gt;)</source>
          <target state="translated">函数类型返回类型的参数的变量类型参数（用户将使用可能消耗任何 &lt;code&gt;Fruit&lt;/code&gt; 的东西来调用返回的函数，因此可以返回希望接收到可以处理 &lt;code&gt;Apple&lt;/code&gt; 的函数的函数是可以的）</target>
        </trans-unit>
        <trans-unit id="fc9281a07f7c7bacfae7f8c712a66286fa4aa11c" translate="yes" xml:space="preserve">
          <source>The contravariant type parameter of a parameter type (the user is passing a consumer that can handle any &lt;code&gt;Fruit&lt;/code&gt;, and it will be given an &lt;code&gt;Apple&lt;/code&gt;)</source>
          <target state="translated">参数类型的反类型参数（用户正在传递可以处理任何 &lt;code&gt;Fruit&lt;/code&gt; 的使用者，并且它将获得 &lt;code&gt;Apple&lt;/code&gt; ）</target>
        </trans-unit>
        <trans-unit id="3b2df0437d1139299375d04a6b3d749596fe34b3" translate="yes" xml:space="preserve">
          <source>The contravariant type parameter of the return type of a function-typed parameter (the user is passing a function that will return a consumer of any &lt;code&gt;Fruit&lt;/code&gt;, and the returned consumer will be given &lt;code&gt;Apple&lt;/code&gt; instances)</source>
          <target state="translated">函数类型参数的返回类型的反类型参数（用户传递的函数将返回任何 &lt;code&gt;Fruit&lt;/code&gt; 的使用者，并且将为返回的使用者提供 &lt;code&gt;Apple&lt;/code&gt; 实例）</target>
        </trans-unit>
        <trans-unit id="3ed87fa7f81c4d406e21bd5206fb7068af42bc61" translate="yes" xml:space="preserve">
          <source>The convention that is followed is that each library gets its own definition file, usually named the same as the library. For more information on all the options available to &lt;code&gt;cinterop&lt;/code&gt;, see &lt;a href=&quot;../../reference/native/c_interop&quot;&gt;the Interop documentation&lt;/a&gt;</source>
          <target state="translated">遵循的约定是，每个库都有其自己的定义文件，通常与该库命名相同。有关 &lt;code&gt;cinterop&lt;/code&gt; 所有可用选项的更多信息，请参见&lt;a href=&quot;../../reference/native/c_interop&quot;&gt;Interop文档。&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="c72d89d38289079cb805c34b2308d4dfa8c2fd72" translate="yes" xml:space="preserve">
          <source>The coroutine context includes a &lt;em&gt;coroutine dispatcher&lt;/em&gt; (see &lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/-coroutine-dispatcher/index.html&quot;&gt;CoroutineDispatcher&lt;/a&gt;) that determines what thread or threads the corresponding coroutine uses for its execution. The coroutine dispatcher can confine coroutine execution to a specific thread, dispatch it to a thread pool, or let it run unconfined.</source>
          <target state="translated">协程上下文包括一个&lt;em&gt;协程调度程序&lt;/em&gt;（请参阅&lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/-coroutine-dispatcher/index.html&quot;&gt;CoroutineDispatcher&lt;/a&gt;），该&lt;em&gt;调度程序&lt;/em&gt;确定相应的协程用于执行哪个线程或多个线程。协程分派器可以将协程执行限制在特定线程中，将其分派到线程池，或者让它不受限制地运行。</target>
        </trans-unit>
        <trans-unit id="d4ce8b1f45a5d6806ad09e59cc85adf7dc80106f" translate="yes" xml:space="preserve">
          <source>The coroutine context is a set of various elements. The main elements are the &lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/-job/index.html&quot;&gt;Job&lt;/a&gt; of the coroutine, which we've seen before, and its dispatcher, which is covered in this section.</source>
          <target state="translated">协程上下文是一组各种元素。主要元素是协同程序的&lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/-job/index.html&quot;&gt;工作&lt;/a&gt;（我们之前已经看到过）及其派遣程序，本节将对此进行介绍。</target>
        </trans-unit>
        <trans-unit id="09d67675b7aec2c1bf9665203e1b50714b4ffefe" translate="yes" xml:space="preserve">
          <source>The coroutine is started directly in the invoker's thread without going through the &lt;a href=&quot;../kotlin.coroutines/-continuation-interceptor/index&quot;&gt;ContinuationInterceptor&lt;/a&gt; that might be present in the completion's &lt;a href=&quot;../kotlin.coroutines/-coroutine-context/index&quot;&gt;CoroutineContext&lt;/a&gt;. It is the invoker's responsibility to ensure that a proper invocation context is established.</source>
          <target state="translated">协程直接在调用者的线程中启动，而无需经过&lt;a href=&quot;../kotlin.coroutines/-continuation-interceptor/index&quot;&gt;ContinuationInterceptor&lt;/a&gt;，而ContinuationInterceptor可能存在于完成的&lt;a href=&quot;../kotlin.coroutines/-coroutine-context/index&quot;&gt;CoroutineContext中&lt;/a&gt;。调用者有责任确保建立正确的调用上下文。</target>
        </trans-unit>
        <trans-unit id="5075509aaa121a034050446e85498c3f79064890" translate="yes" xml:space="preserve">
          <source>The coroutine's &lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/-job/index.html&quot;&gt;Job&lt;/a&gt; is part of its context, and can be retrieved from it using the &lt;code&gt;coroutineContext[Job]&lt;/code&gt; expression:</source>
          <target state="translated">协程的&lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/-job/index.html&quot;&gt;Job&lt;/a&gt;是其上下文的一部分，可以使用 &lt;code&gt;coroutineContext[Job]&lt;/code&gt; 表达式从其检索：</target>
        </trans-unit>
        <trans-unit id="3db3fa62931fade33326b38aff7867fe578bfdd9" translate="yes" xml:space="preserve">
          <source>The coroutine's &lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/-job/index.html&quot;&gt;Job&lt;/a&gt; is part of its context. The coroutine can retrieve it from its own context using &lt;code&gt;coroutineContext[Job]&lt;/code&gt; expression:</source>
          <target state="translated">协程的&lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/-job/index.html&quot;&gt;工作&lt;/a&gt;是其背景的一部分。协程可以使用 &lt;code&gt;coroutineContext[Job]&lt;/code&gt; 表达式从自己的上下文中检索它：</target>
        </trans-unit>
        <trans-unit id="5769f42ad3e1d523865b402b5e67bd28e7b20bad" translate="yes" xml:space="preserve">
          <source>The corresponding &lt;code&gt;sourceSets&lt;/code&gt; property should be updated if not using the default convention:</source>
          <target state="translated">如果不使用默认约定，则应更新相应的 &lt;code&gt;sourceSets&lt;/code&gt; 属性：</target>
        </trans-unit>
        <trans-unit id="e1d461218111d234968b7db694b9b764401c60b6" translate="yes" xml:space="preserve">
          <source>The corresponding &lt;em&gt;sourceSets&lt;/em&gt; property should be updated if not using the default convention:</source>
          <target state="translated">如果不使用默认约定，则应更新相应的&lt;em&gt;sourceSets&lt;/em&gt;属性：</target>
        </trans-unit>
        <trans-unit id="6d0089507419945c1de1f77807f154c6b9f1b477" translate="yes" xml:space="preserve">
          <source>The corresponding part in the Gradle build file looks as follows:</source>
          <target state="translated">Gradle构建文件中对应的部分如下。</target>
        </trans-unit>
        <trans-unit id="16c7a1a50f1d32fc204564f81e6d0304f7356ed7" translate="yes" xml:space="preserve">
          <source>The covariant type parameter of a read-only property type (the user is expecting a producer of &lt;code&gt;Fruit&lt;/code&gt;, and gets a producer of &lt;code&gt;Apple&lt;/code&gt;)</source>
          <target state="translated">只读属性类型的协变量类型参数（用户期望得到 &lt;code&gt;Fruit&lt;/code&gt; 的生产者，而得到 &lt;code&gt;Apple&lt;/code&gt; 的生产者）</target>
        </trans-unit>
        <trans-unit id="7d1a94c8808bc3894d49e0ec4259312cbb359362" translate="yes" xml:space="preserve">
          <source>The covariant type parameter of a return type (the user is expecting that the returned value will produce a &lt;code&gt;Fruit&lt;/code&gt;, so it's okay if it really produces an &lt;code&gt;Apple&lt;/code&gt;)</source>
          <target state="translated">返回类型的协变量类型参数（用户期望返回的值将产生 &lt;code&gt;Fruit&lt;/code&gt; ，因此，如果它确实产生 &lt;code&gt;Apple&lt;/code&gt; 没关系）</target>
        </trans-unit>
        <trans-unit id="ec6f1c24b0cd8b11d61e4f25576ab198b6bece55" translate="yes" xml:space="preserve">
          <source>The covariant type parameter of the parameter type of a function-typed parameter (the user is passing a function that can handle any &lt;code&gt;Fruit&lt;/code&gt; producer, and it will be given an &lt;code&gt;Apple&lt;/code&gt; producer)</source>
          <target state="translated">函数类型参数的参数类型的协变类型参数（用户正在传递可以处理任何 &lt;code&gt;Fruit&lt;/code&gt; 生产者的函数，并且它将获得 &lt;code&gt;Apple&lt;/code&gt; 生产者）</target>
        </trans-unit>
        <trans-unit id="bc2c5c3395341afe0bbd48554537d9a1ac25a9db" translate="yes" xml:space="preserve">
          <source>The covariant type parameter of the return type of a function-typed return type (the user expects the returned function to return something that produces &lt;code&gt;Fruit&lt;/code&gt;, so it's okay if it really produces &lt;code&gt;Apple&lt;/code&gt;)</source>
          <target state="translated">函数类型的返回类型的返回类型的协变量类型参数（用户希望返回的函数返回产生 &lt;code&gt;Fruit&lt;/code&gt; 的东西，因此，如果它确实产生 &lt;code&gt;Apple&lt;/code&gt; 是可以的）</target>
        </trans-unit>
        <trans-unit id="a39f5e4ad2c9626d5a5f458b4068b5771d3c11f9" translate="yes" xml:space="preserve">
          <source>The created &lt;code&gt;StableRef&lt;/code&gt; should eventually be manually disposed using the &lt;code&gt;.dispose()&lt;/code&gt; method to prevent memory leaks:</source>
          <target state="translated">最终应使用 &lt;code&gt;.dispose()&lt;/code&gt; 方法手动处理创建的 &lt;code&gt;StableRef&lt;/code&gt; ,以防止内存泄漏：</target>
        </trans-unit>
        <trans-unit id="7dc376ddde1c64329f76a2fdf0f77fd2f42853b6" translate="yes" xml:space="preserve">
          <source>The created iOS application is ready to run on the iOS emulator or on the iOS device. The device run may require an Apple developer account and to issue a developer certificate. Xcode does its best to guide us through the process.</source>
          <target state="translated">创建的iOS应用已经准备好在iOS模拟器或iOS设备上运行。设备运行可能需要一个Apple开发者账号,并且要颁发开发者证书。Xcode会尽力引导我们完成这个过程。</target>
        </trans-unit>
        <trans-unit id="e20d095cd0f1efef77b1627ffafe7b1dfa3d28bf" translate="yes" xml:space="preserve">
          <source>The curly braces around a body can be omitted if the body is a oneliner. This is discouraged unless the body goes on the same line as the condition, because it makes it easy to make this mistake, especially when one is used to Python:</source>
          <target state="translated">如果 body 是 oneliner,可以省略 body 周围的大括号。除非主体与条件在同一条线上,否则不鼓励这样做,因为这很容易犯这个错误,特别是当人们习惯于使用 Python 时。</target>
        </trans-unit>
        <trans-unit id="594d3acd0f3d50fec031602ce3f69e2de7031169" translate="yes" xml:space="preserve">
          <source>The current reading value can be advanced by the specified duration amount with the operator &lt;a href=&quot;plus-assign&quot;&gt;plusAssign&lt;/a&gt;:</source>
          <target state="translated">可以使用操作员&lt;a href=&quot;plus-assign&quot;&gt;plusAssign&lt;/a&gt;将当前读数值提前指定的持续时间：</target>
        </trans-unit>
        <trans-unit id="dcfce21884a60ba71ce3d59d9e2af53e74e2e10c" translate="yes" xml:space="preserve">
          <source>The currently released version is 1.3.41, published on July 4, 2019.</source>
          <target state="translated">目前发布的版本为1.3.41,发布时间为2019年7月4日。</target>
        </trans-unit>
        <trans-unit id="b5744a90420458acc57f96347ae2c3cc6f2d50b3" translate="yes" xml:space="preserve">
          <source>The currently released version is 1.4.10, published on September 10, 2020.</source>
          <target state="translated">目前发布的版本为1.4.10,发布时间为2020年9月10日。</target>
        </trans-unit>
        <trans-unit id="99a5ae4aba1310a5ec2c1c1ea8e6bbd89807b2b1" translate="yes" xml:space="preserve">
          <source>The declaration of the classifier used in this type. For example, in the type &lt;code&gt;List&amp;lt;String&amp;gt;&lt;/code&gt; the classifier would be the &lt;a href=&quot;../-k-class/index#kotlin.reflect.KClass&quot;&gt;KClass&lt;/a&gt; instance for &lt;a href=&quot;../../kotlin.collections/-list/index#kotlin.collections.List&quot;&gt;List&lt;/a&gt;.</source>
          <target state="translated">此类型中使用的分类器的声明。例如，在类型 &lt;code&gt;List&amp;lt;String&amp;gt;&lt;/code&gt; ，分类器将是&lt;a href=&quot;../../kotlin.collections/-list/index#kotlin.collections.List&quot;&gt;List&lt;/a&gt;的&lt;a href=&quot;../-k-class/index#kotlin.reflect.KClass&quot;&gt;KClass&lt;/a&gt;实例。</target>
        </trans-unit>
        <trans-unit id="e4cb77989b70ae7af02cc584cc3eb602ad306980" translate="yes" xml:space="preserve">
          <source>The declarations in the new artifacts are visible under the same package names from the Kotlin point of view, but have different package names for Java. Therefore, switching to the new artifacts will not require any changes to your source code.</source>
          <target state="translated">从Kotlin的角度来看,新工件中的声明在相同的包名下是可见的,但对于Java来说,包名不同。因此,切换到新的工件将不需要对您的源代码进行任何更改。</target>
        </trans-unit>
        <trans-unit id="38a82a6bd4d8bda70773fac15ae91a2110030d1c" translate="yes" xml:space="preserve">
          <source>The default &lt;a href=&quot;https://www.joelonsoftware.com/2003/10/08/the-absolute-minimum-every-software-developer-absolutely-positively-must-know-about-unicode-and-character-sets-no-excuses/&quot;&gt;encoding&lt;/a&gt; is UTF-8, but you can specify it if you need something else:</source>
          <target state="translated">默认&lt;a href=&quot;https://www.joelonsoftware.com/2003/10/08/the-absolute-minimum-every-software-developer-absolutely-positively-must-know-about-unicode-and-character-sets-no-excuses/&quot;&gt;编码&lt;/a&gt;为UTF-8，但如果需要其他内容，则可以指定它：</target>
        </trans-unit>
        <trans-unit id="7643db7f540eca7261e951018ad1bc000680e9fc" translate="yes" xml:space="preserve">
          <source>The default artifact IDs follow the pattern &lt;code&gt;&amp;lt;projectName&amp;gt;-&amp;lt;targetNameToLowerCase&amp;gt;&lt;/code&gt;, for example &lt;code&gt;sample-lib-nodejs&lt;/code&gt; for a target named &lt;code&gt;nodeJs&lt;/code&gt; in a project &lt;code&gt;sample-lib&lt;/code&gt;.</source>
          <target state="translated">默认工件ID遵循 &lt;code&gt;&amp;lt;projectName&amp;gt;-&amp;lt;targetNameToLowerCase&amp;gt;&lt;/code&gt; 模式，例如，对于project &lt;code&gt;sample-lib&lt;/code&gt; 中名为 &lt;code&gt;nodeJs&lt;/code&gt; 的目标，使用 &lt;code&gt;sample-lib-nodejs&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="960beb3d459f57914f0b08a89c8e7a0ae2d213a2" translate="yes" xml:space="preserve">
          <source>The default dispatcher that is used when coroutines are launched in &lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/-global-scope/index.html&quot;&gt;GlobalScope&lt;/a&gt; is represented by &lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/-dispatchers/-default.html&quot;&gt;Dispatchers.Default&lt;/a&gt; and uses a shared background pool of threads, so &lt;code&gt;launch(Dispatchers.Default) { ... }&lt;/code&gt; uses the same dispatcher as &lt;code&gt;GlobalScope.launch { ... }&lt;/code&gt;.</source>
          <target state="translated">在&lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/-global-scope/index.html&quot;&gt;GlobalScope&lt;/a&gt;中启动协程时使用的默认调度程序由&lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/-dispatchers/-default.html&quot;&gt;Dispatchers.Default&lt;/a&gt;表示，并使用共享的后台线程池，因此 &lt;code&gt;launch(Dispatchers.Default) { ... }&lt;/code&gt; 与 &lt;code&gt;GlobalScope.launch { ... }&lt;/code&gt; 使用相同的调度程序。 }。</target>
        </trans-unit>
        <trans-unit id="b76c41789282ed3ab00f219e4dbda9192589571a" translate="yes" xml:space="preserve">
          <source>The default dispatcher, that is used when coroutines are launched in &lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/-global-scope/index.html&quot;&gt;GlobalScope&lt;/a&gt;, is represented by &lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/-dispatchers/-default.html&quot;&gt;Dispatchers.Default&lt;/a&gt; and uses shared background pool of threads, so &lt;code&gt;launch(Dispatchers.Default) { ... }&lt;/code&gt; uses the same dispatcher as &lt;code&gt;GlobalScope.launch { ... }&lt;/code&gt;.</source>
          <target state="translated">默认调度程序是在&lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/-dispatchers/-default.html&quot;&gt;Dispatchers.Default中&lt;/a&gt;表示的，它是在&lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/-global-scope/index.html&quot;&gt;GlobalScope&lt;/a&gt;中启动协程时使用的，并使用共享的后台线程池，因此 &lt;code&gt;launch(Dispatchers.Default) { ... }&lt;/code&gt; 与 &lt;code&gt;GlobalScope.launch { ... }&lt;/code&gt; 使用相同的调度程序。 ..}。</target>
        </trans-unit>
        <trans-unit id="034812e12bafb58c2506d45936895dac0de7b559" translate="yes" xml:space="preserve">
          <source>The default implementation is available for Java classes implementing the interface.</source>
          <target state="translated">实现该接口的Java类可以使用默认实现。</target>
        </trans-unit>
        <trans-unit id="eae7fdc4a8ba33e2f9213a2722bb2903c080bbc0" translate="yes" xml:space="preserve">
          <source>The default implementation of &lt;code&gt;Map&lt;/code&gt; &amp;ndash; &lt;a href=&quot;../../api/latest/jvm/stdlib/kotlin.collections/-linked-hash-map/index&quot;&gt;&lt;code&gt;LinkedHashMap&lt;/code&gt;&lt;/a&gt; &amp;ndash; preserves the order of elements insertion when iterating the map. In turn, an alternative implementation &amp;ndash; &lt;a href=&quot;../../api/latest/jvm/stdlib/kotlin.collections/-hash-map/index&quot;&gt;&lt;code&gt;HashMap&lt;/code&gt;&lt;/a&gt; &amp;ndash; says nothing about the elements order.</source>
          <target state="translated">默认的实现 &lt;code&gt;Map&lt;/code&gt; - &lt;a href=&quot;../../api/latest/jvm/stdlib/kotlin.collections/-linked-hash-map/index&quot;&gt; &lt;code&gt;LinkedHashMap&lt;/code&gt; 的&lt;/a&gt; -保留元素插入时迭代地图的顺序。反过来，另一个实现&lt;a href=&quot;../../api/latest/jvm/stdlib/kotlin.collections/-hash-map/index&quot;&gt; &lt;code&gt;HashMap&lt;/code&gt; &lt;/a&gt;则没有说明元素顺序。</target>
        </trans-unit>
        <trans-unit id="1d4f4ecafdd233f07d5e3f6afd06222be0312077" translate="yes" xml:space="preserve">
          <source>The default implementation of &lt;code&gt;Set&lt;/code&gt; &amp;ndash; &lt;a href=&quot;../../api/latest/jvm/stdlib/kotlin.collections/-linked-hash-set/index&quot;&gt;&lt;code&gt;LinkedHashSet&lt;/code&gt;&lt;/a&gt; &amp;ndash; preserves the order of elements insertion. Hence, the functions that rely on the order, such as &lt;code&gt;first()&lt;/code&gt; or &lt;code&gt;last()&lt;/code&gt;, return predictable results on such sets.</source>
          <target state="translated">&lt;code&gt;Set&lt;/code&gt; 的默认实现&amp;ndash; &lt;a href=&quot;../../api/latest/jvm/stdlib/kotlin.collections/-linked-hash-set/index&quot;&gt; &lt;code&gt;LinkedHashSet&lt;/code&gt; &lt;/a&gt; &amp;ndash;保留元素插入的顺序。因此，依赖顺序的函数 &lt;code&gt;first()&lt;/code&gt; 例如first（）或 &lt;code&gt;last()&lt;/code&gt; )在此类集合上返回可预测的结果。</target>
        </trans-unit>
        <trans-unit id="bed0e18ec00404266f1579a08902984894034905" translate="yes" xml:space="preserve">
          <source>The default nullability is used when a type itself is not annotated by a nullability annotation, and the default is determined by the innermost enclosing element annotated with a type qualifier default annotation with the &lt;code&gt;ElementType&lt;/code&gt; matching the type usage.</source>
          <target state="translated">当类型本身未由可空性注释注释时，将使用默认可空性，并且默认值是由最里面的封闭元素确定的，该元素由类型限定符默认注释进行注释，且 &lt;code&gt;ElementType&lt;/code&gt; 与类型用法匹配。</target>
        </trans-unit>
        <trans-unit id="9d69906046e2ddf59f421f52ac090513e9b9f2a3" translate="yes" xml:space="preserve">
          <source>The default random number generator.</source>
          <target state="translated">默认的随机数发生器。</target>
        </trans-unit>
        <trans-unit id="f6a4b71f5aa6c02b362c62576dcc053e9373e5c3" translate="yes" xml:space="preserve">
          <source>The default source set &lt;code&gt;commonMain&lt;/code&gt; is added to each production (application or library) variant's compilation. The &lt;code&gt;commonTest&lt;/code&gt; source set is similarly added to the compilations of unit test and instrumented test variants.</source>
          <target state="translated">默认的源集 &lt;code&gt;commonMain&lt;/code&gt; 被添加到每个生产（应用程序或库）变体的编译中。同样，将 &lt;code&gt;commonTest&lt;/code&gt; 源集添加到单元测试和有仪器的测试变体的编译中。</target>
        </trans-unit>
        <trans-unit id="f9ef35e4ea1c850fbe5f46bb280445cc0cd754fc" translate="yes" xml:space="preserve">
          <source>The default source set &lt;code&gt;commonMain&lt;/code&gt; is added to each production (application or library) variant's compilation. The &lt;code&gt;commonTest&lt;/code&gt; source set is, similarly, added to the compilations of unit test and instrumented test variants.</source>
          <target state="translated">默认的源集 &lt;code&gt;commonMain&lt;/code&gt; 被添加到每个生产（应用程序或库）变体的编译中。同样，将 &lt;code&gt;commonTest&lt;/code&gt; 源集添加到单元测试和检测测试变量的编译中。</target>
        </trans-unit>
        <trans-unit id="c561b55e89597682ebf08bcc014c20773fedb83e" translate="yes" xml:space="preserve">
          <source>The default upper bound (if none specified) is &lt;code&gt;Any?&lt;/code&gt;. Only one upper bound can be specified inside the angle brackets. If the same type parameter needs more than one upper bound, we need a separate &lt;strong&gt;where&lt;/strong&gt;-clause:</source>
          <target state="translated">默认上限（如果未指定）是 &lt;code&gt;Any?&lt;/code&gt; 。尖括号内只能指定一个上限。如果相同类型的参数需要一个以上的上限，则需要在&lt;strong&gt;其中使用&lt;/strong&gt; -clause：</target>
        </trans-unit>
        <trans-unit id="7b5f3fac0dd293e61c74032e957e6e608fec3b05" translate="yes" xml:space="preserve">
          <source>The default value is provided at the declaration of this parameter.</source>
          <target state="translated">默认值在该参数声明时提供。</target>
        </trans-unit>
        <trans-unit id="44653ab72c57ae2dec40031a1386b4afc98b3166" translate="yes" xml:space="preserve">
          <source>The definitions part shows how Kotlin primitive types map into C primitive types. We discussed reverse mapping in the &lt;a href=&quot;mapping-primitive-data-types-from-c&quot;&gt;Mapping Primitive Data Types from C&lt;/a&gt; tutorial.</source>
          <target state="translated">定义部分显示Kotlin基本类型如何映射为C基本类型。我们在&lt;a href=&quot;mapping-primitive-data-types-from-c&quot;&gt;C语言&lt;/a&gt;教程的&amp;ldquo; 映射原始数据类型&amp;rdquo;中讨论了反向映射。</target>
        </trans-unit>
        <trans-unit id="7879370b21d5da1f44f128551f264e026a0fb9ed" translate="yes" xml:space="preserve">
          <source>The delegate class may implement one of the interfaces &lt;code&gt;ReadOnlyProperty&lt;/code&gt; and &lt;code&gt;ReadWriteProperty&lt;/code&gt; containing the required &lt;code&gt;operator&lt;/code&gt; methods. These interfaces are declared in the Kotlin standard library:</source>
          <target state="translated">委托类可以实现包含所需 &lt;code&gt;operator&lt;/code&gt; 方法的接口 &lt;code&gt;ReadOnlyProperty&lt;/code&gt; 和 &lt;code&gt;ReadWriteProperty&lt;/code&gt; 之一。这些接口在Kotlin标准库中声明：</target>
        </trans-unit>
        <trans-unit id="42bebb3adac2ab3e00fbad0af368d0931c57bd77" translate="yes" xml:space="preserve">
          <source>The delegated property can be used like this to declare a property in &lt;code&gt;Person&lt;/code&gt; - note the use of &lt;code&gt;by&lt;/code&gt; instead of &lt;code&gt;=&lt;/code&gt;:</source>
          <target state="translated">可以像这样使用委派的属性在 &lt;code&gt;Person&lt;/code&gt; 中声明一个属性-注意使用 &lt;code&gt;by&lt;/code&gt; 代替 &lt;code&gt;=&lt;/code&gt; ：</target>
        </trans-unit>
        <trans-unit id="898cc738a761dcd3be73120e07ea5697ac2725df" translate="yes" xml:space="preserve">
          <source>The dependencies configuration has been changed; dependencies are now specified separately for each source root.</source>
          <target state="translated">依赖关系配置已经改变;现在,每个源根的依赖关系被单独指定。</target>
        </trans-unit>
        <trans-unit id="973f16e5337bff9eb9481252b3daeac2f25a5f4f" translate="yes" xml:space="preserve">
          <source>The dependencies declared in this way are added in the podspec file and downloaded during the execution of &lt;code&gt;pod install&lt;/code&gt;.</source>
          <target state="translated">以这种方式声明的依赖项将添加到podspec文件中，并在执行 &lt;code&gt;pod install&lt;/code&gt; 期间下载。</target>
        </trans-unit>
        <trans-unit id="f8d4becb658791b12877a35c88070d8b306eefc4" translate="yes" xml:space="preserve">
          <source>The dependency on the Kotlin/JS &lt;a href=&quot;../../index&quot;&gt;standard library&lt;/a&gt; is mandatory for all Kotlin/JS projects, and as such is implicit &amp;ndash; no artifacts need to be added. If your project contains tests written in Kotlin, you should add a dependency on the &lt;a href=&quot;https://kotlinlang.org/api/latest/kotlin.test/index.html&quot;&gt;kotlin.test&lt;/a&gt; library:</source>
          <target state="translated">对Kotlin / JS&lt;a href=&quot;../../index&quot;&gt;标准库&lt;/a&gt;的依赖对于所有Kotlin / JS项目都是必需的，因此是隐式的&amp;ndash;无需添加任何工件。如果您的项目包含用Kotlin编写的测试，则应在&lt;a href=&quot;https://kotlinlang.org/api/latest/kotlin.test/index.html&quot;&gt;kotlin.test&lt;/a&gt;库上添加一个依赖项：</target>
        </trans-unit>
        <trans-unit id="8e289438644482986fe5eb08aaf9b0616f49cac1" translate="yes" xml:space="preserve">
          <source>The described mechanism for marking and using experimental APIs is itself experimental in Kotlin 1.3. This means that in future releases it may be changed in ways that make it incompatible. To make the users of annotations &lt;code&gt;@Experimental&lt;/code&gt; and &lt;code&gt;UseExperimental&lt;/code&gt; aware of their experimental status, the compiler raises warnings when compiling the code with these annotations:</source>
          <target state="translated">标记和使用实验性API的机制本身在Kotlin 1.3中是实验性的。这意味着在将来的版本中，可能会以使其不兼容的方式进行更改。为了使注释 &lt;code&gt;@Experimental&lt;/code&gt; 和 &lt;code&gt;UseExperimental&lt;/code&gt; 的用户了解他们的实验状态，编译器在使用这些注释编译代码时会发出警告：</target>
        </trans-unit>
        <trans-unit id="cf37d613f63880e424569836a2ab82c0f6bbbfbf" translate="yes" xml:space="preserve">
          <source>The design of inline classes is experimental, meaning that this feature is &lt;em&gt;moving fast&lt;/em&gt; and no compatibility guarantees are given. When using inline classes in Kotlin 1.3+, a warning will be reported, indicating that this feature is experimental.</source>
          <target state="translated">内联类的设计是实验性的，这意味着此功能&lt;em&gt;正在快速发展，&lt;/em&gt;并且不提供兼容性保证。在Kotlin 1.3+中使用内联类时，将报告警告，表明此功能是实验性的。</target>
        </trans-unit>
        <trans-unit id="530e7472ee58bdd7a4958120705547c1d20c1ddf" translate="yes" xml:space="preserve">
          <source>The design of inline classes is in &lt;a href=&quot;evolution/components-stability&quot;&gt;Alpha&lt;/a&gt;, meaning that no compatibility guarantees are given for future versions. When using inline classes in Kotlin 1.3+, a warning will be reported, indicating that this feature has not been released as stable.</source>
          <target state="translated">内联类的设计在&lt;a href=&quot;evolution/components-stability&quot;&gt;Alpha中&lt;/a&gt;，这意味着将来的版本不提供兼容性保证。在Kotlin 1.3+中使用内联类时，将报告警告，指示此功能尚未稳定发布。</target>
        </trans-unit>
        <trans-unit id="b65859994bf9d4a7fb5d934baaf88e39c3f04558" translate="yes" xml:space="preserve">
          <source>The design of unsigned types is experimental, meaning that this feature is moving fast and no compatibility guarantees are given. When using unsigned arithmetics in Kotlin 1.3+, warning will be reported, indicating that this feature is experimental. To remove warning, you have to opt-in for experimental usage of unsigned types.</source>
          <target state="translated">无符号类型的设计是实验性的,这意味着这个功能正在快速发展,而且不保证兼容性。当在Kotlin 1.3+中使用无符号算术时,会报告警告,表明这个功能是实验性的。要删除警告,你必须选择加入无符号类型的实验性使用。</target>
        </trans-unit>
        <trans-unit id="a2b28866ac37f05ef8569c7d67a02f97e240cc06" translate="yes" xml:space="preserve">
          <source>The design of unsigned types is in &lt;a href=&quot;evolution/components-stability&quot;&gt;Beta&lt;/a&gt;, meaning that its compatibility is best-effort only and not guaranteed. When using unsigned arithmetics in Kotlin 1.3+, a warning will be reported, indicating that this feature has not been released as stable. To remove the warning, you have to opt in for usage of unsigned types.</source>
          <target state="translated">无符号类型的设计在&lt;a href=&quot;evolution/components-stability&quot;&gt;Beta中&lt;/a&gt;，这意味着其兼容性仅是尽力而为，不能保证。在Kotlin 1.3+中使用无符号算术时，将报告警告，指示此功能尚未稳定发布。要删除警告，您必须选择使用无符号类型。</target>
        </trans-unit>
        <trans-unit id="d36ceebc2800fee53f2de43e79177a2ecfc6f529" translate="yes" xml:space="preserve">
          <source>The detailed description includes:</source>
          <target state="translated">详细说明包括:</target>
        </trans-unit>
        <trans-unit id="a0d2b5a6b59247ce3c2ac4eba75f43c56acf4c3d" translate="yes" xml:space="preserve">
          <source>The difference between the two functions is that &lt;code&gt;fold()&lt;/code&gt; takes an initial value and uses it as the accumulated value on the first step, whereas the first step of &lt;code&gt;reduce()&lt;/code&gt; uses the first and the second elements as operation arguments on the first step.</source>
          <target state="translated">这两个函数的区别在于， &lt;code&gt;fold()&lt;/code&gt; 取一个初始值并将其用作第一步的累加值，而 &lt;code&gt;reduce()&lt;/code&gt; 的第一步则将第一和第二个元素用作第一步的操作参数。</target>
        </trans-unit>
        <trans-unit id="16d1b90dc650643e776a4004ab589d677449c331" translate="yes" xml:space="preserve">
          <source>The directories containing the source files to compile</source>
          <target state="translated">包含要编译的源文件的目录。</target>
        </trans-unit>
        <trans-unit id="bc1f5875183536752507e833a15dca77307fd640" translate="yes" xml:space="preserve">
          <source>The duration equal to exactly 0 seconds.</source>
          <target state="translated">持续时间正好等于0秒。</target>
        </trans-unit>
        <trans-unit id="be55f901bba5940c95d9f3540300cd294e976f5e" translate="yes" xml:space="preserve">
          <source>The duration whose value is positive infinity. It is useful for representing timeouts that should never expire.</source>
          <target state="translated">其值为正无穷大的持续时间。用于表示永远不会过期的超时。</target>
        </trans-unit>
        <trans-unit id="f28bb53a04db0fb8fa17ba4aa3c143de9bce62e3" translate="yes" xml:space="preserve">
          <source>The dynamic type is not supported in code targeting the JVM</source>
          <target state="translated">在以JVM为目标的代码中不支持动态类型。</target>
        </trans-unit>
        <trans-unit id="52d4bb2170c55ab0a1a89bfce15477357b84c2db" translate="yes" xml:space="preserve">
          <source>The dynamic type is not supported in code targeting the JVM.</source>
          <target state="translated">在针对JVM的代码中不支持动态类型。</target>
        </trans-unit>
        <trans-unit id="c1e94b86df57391ab40db234f4362544f610c993" translate="yes" xml:space="preserve">
          <source>The easiest way to create a new application targeting JavaScript with Maven is to allow IntelliJ IDEA to configure the Maven project for us. Simply create a new Maven project in IntelliJ IDEA and once the project is created, add a new folder to host the Kotlin source code, removing the default Java one. The project should end up with the following structure</source>
          <target state="translated">用Maven创建一个针对JavaScript的新应用,最简单的方法就是让IntelliJ IDEA为我们配置Maven项目。只需在IntelliJ IDEA中创建一个新的Maven项目,项目创建完成后,添加一个新的文件夹来存放Kotlin源代码,删除默认的Java文件夹。项目最终应该是如下结构</target>
        </trans-unit>
        <trans-unit id="2264c37021c9f341a22eceb595f57ba842a08e4c" translate="yes" xml:space="preserve">
          <source>The ecosystem of libraries for data-related tasks created by the Kotlin community is rapidly expanding. Here are some libraries that you may find useful:</source>
          <target state="translated">Kotlin社区为数据相关任务创建的库的生态系统正在迅速扩大。这里有一些你可能会觉得有用的库。</target>
        </trans-unit>
        <trans-unit id="171e3cf4fb89f709d12d970ce788f0d3a1e1b68e" translate="yes" xml:space="preserve">
          <source>The effect of computing the expression is:</source>
          <target state="translated">计算表达的效果是:。</target>
        </trans-unit>
        <trans-unit id="f34518faf7eb53cd2d65e3f4a6ad482c7e319fc7" translate="yes" xml:space="preserve">
          <source>The elapsed time is measured with &lt;a href=&quot;-time-source/-monotonic/index&quot;&gt;TimeSource.Monotonic&lt;/a&gt;.</source>
          <target state="translated">经过的时间通过&lt;a href=&quot;-time-source/-monotonic/index&quot;&gt;TimeSource.Monotonic进行&lt;/a&gt;测量。</target>
        </trans-unit>
        <trans-unit id="79352142c1434a6d005be885bafaf8c579f79bc5" translate="yes" xml:space="preserve">
          <source>The elapsed time is measured with the specified &lt;code&gt;this&lt;/code&gt;&lt;a href=&quot;-time-source/index&quot;&gt;TimeSource&lt;/a&gt; instance.</source>
          <target state="translated">用指定的 &lt;code&gt;this&lt;/code&gt; &lt;a href=&quot;-time-source/index&quot;&gt;TimeSource&lt;/a&gt;实例测量经过的时间。</target>
        </trans-unit>
        <trans-unit id="ff0a9ac30d7664a4e4282016eea87cab13969066" translate="yes" xml:space="preserve">
          <source>The element is initialized with the specified &lt;a href=&quot;append-element#kotlin.dom%24appendElement(org.w3c.dom.Element,%20kotlin.String,%20kotlin.Function1((org.w3c.dom.Element,%20kotlin.Unit)))/init&quot;&gt;init&lt;/a&gt; function.</source>
          <target state="translated">元素使用指定的&lt;a href=&quot;append-element#kotlin.dom%24appendElement(org.w3c.dom.Element,%20kotlin.String,%20kotlin.Function1((org.w3c.dom.Element,%20kotlin.Unit)))/init&quot;&gt;init&lt;/a&gt;函数初始化。</target>
        </trans-unit>
        <trans-unit id="ce1f29bcecbea56cfc0df73010eb4304c4fe5856" translate="yes" xml:space="preserve">
          <source>The element is initialized with the specified &lt;a href=&quot;append-element#kotlinx.dom%24appendElement(org.w3c.dom.Element,%20kotlin.String,%20kotlin.Function1((org.w3c.dom.Element,%20kotlin.Unit)))/init&quot;&gt;init&lt;/a&gt; function.</source>
          <target state="translated">元素使用指定的&lt;a href=&quot;append-element#kotlinx.dom%24appendElement(org.w3c.dom.Element,%20kotlin.String,%20kotlin.Function1((org.w3c.dom.Element,%20kotlin.Unit)))/init&quot;&gt;init&lt;/a&gt;函数初始化。</target>
        </trans-unit>
        <trans-unit id="d9a189a8bbd800a60d20579c11365537800d1c5b" translate="yes" xml:space="preserve">
          <source>The element is initialized with the specified &lt;a href=&quot;create-element#kotlin.dom%24createElement(org.w3c.dom.Document,%20kotlin.String,%20kotlin.Function1((org.w3c.dom.Element,%20kotlin.Unit)))/init&quot;&gt;init&lt;/a&gt; function.</source>
          <target state="translated">元素使用指定的&lt;a href=&quot;create-element#kotlin.dom%24createElement(org.w3c.dom.Document,%20kotlin.String,%20kotlin.Function1((org.w3c.dom.Element,%20kotlin.Unit)))/init&quot;&gt;init&lt;/a&gt;函数初始化。</target>
        </trans-unit>
        <trans-unit id="e69844e5d432f0eaa41b42186566f5a77daafdeb" translate="yes" xml:space="preserve">
          <source>The element is initialized with the specified &lt;a href=&quot;create-element#kotlinx.dom%24createElement(org.w3c.dom.Document,%20kotlin.String,%20kotlin.Function1((org.w3c.dom.Element,%20kotlin.Unit)))/init&quot;&gt;init&lt;/a&gt; function.</source>
          <target state="translated">元素使用指定的&lt;a href=&quot;create-element#kotlinx.dom%24createElement(org.w3c.dom.Document,%20kotlin.String,%20kotlin.Function1((org.w3c.dom.Element,%20kotlin.Unit)))/init&quot;&gt;init&lt;/a&gt;函数初始化。</target>
        </trans-unit>
        <trans-unit id="0a6537bfaccb8cddd8c481ef1fab76499f34a316" translate="yes" xml:space="preserve">
          <source>The element is initialized with the speicifed &lt;a href=&quot;append-element#kotlin.dom%24appendElement%28org.w3c.dom.Element%2C+kotlin.String%2C+kotlin.Function1%28%28org.w3c.dom.Element%2C+kotlin.Unit%29%29%29%2Finit&quot;&gt;init&lt;/a&gt; function.</source>
          <target state="translated">元素使用指定的&lt;a href=&quot;append-element#kotlin.dom%24appendElement%28org.w3c.dom.Element%2C+kotlin.String%2C+kotlin.Function1%28%28org.w3c.dom.Element%2C+kotlin.Unit%29%29%29%2Finit&quot;&gt;init&lt;/a&gt;函数初始化。</target>
        </trans-unit>
        <trans-unit id="3c970d5af5c7c3d91e3eb72687259d2ce93c168c" translate="yes" xml:space="preserve">
          <source>The element is initialized with the speicifed &lt;a href=&quot;create-element#kotlin.dom%24createElement%28org.w3c.dom.Document%2C+kotlin.String%2C+kotlin.Function1%28%28org.w3c.dom.Element%2C+kotlin.Unit%29%29%29%2Finit&quot;&gt;init&lt;/a&gt; function.</source>
          <target state="translated">元素使用指定的&lt;a href=&quot;create-element#kotlin.dom%24createElement%28org.w3c.dom.Document%2C+kotlin.String%2C+kotlin.Function1%28%28org.w3c.dom.Element%2C+kotlin.Unit%29%29%29%2Finit&quot;&gt;init&lt;/a&gt;函数初始化。</target>
        </trans-unit>
        <trans-unit id="4479436b9b0ce8aa0beac7c43130aa60627f658c" translate="yes" xml:space="preserve">
          <source>The elements are appended in the order they appear in the &lt;a href=&quot;../-mutable-list/add-all#kotlin.collections.MutableList%24addAll%28kotlin.collections.Collection%28%28kotlin.collections.MutableList.E%29%29%29%2Felements&quot;&gt;elements&lt;/a&gt; collection.</source>
          <target state="translated">元素以它们在&lt;a href=&quot;../-mutable-list/add-all#kotlin.collections.MutableList%24addAll%28kotlin.collections.Collection%28%28kotlin.collections.MutableList.E%29%29%29%2Felements&quot;&gt;元素&lt;/a&gt;集合中出现的顺序追加。</target>
        </trans-unit>
        <trans-unit id="544e4fbca97528fef2325c3afe55cace763538a4" translate="yes" xml:space="preserve">
          <source>The elements are appended in the order they appear in the &lt;a href=&quot;../-mutable-list/add-all#kotlin.collections.MutableList%24addAll(kotlin.collections.Collection((kotlin.collections.MutableList.E)))/elements&quot;&gt;elements&lt;/a&gt; collection.</source>
          <target state="translated">元素以它们在&lt;a href=&quot;../-mutable-list/add-all#kotlin.collections.MutableList%24addAll(kotlin.collections.Collection((kotlin.collections.MutableList.E)))/elements&quot;&gt;元素&lt;/a&gt;集合中出现的顺序追加。</target>
        </trans-unit>
        <trans-unit id="23022bf4214f0845c5b1a370815de8e19dc6515a" translate="yes" xml:space="preserve">
          <source>The elements are appended in the order they appear in the &lt;a href=&quot;add-all#kotlin.collections.MutableList%24addAll%28kotlin.collections.Collection%28%28kotlin.collections.MutableList.E%29%29%29%2Felements&quot;&gt;elements&lt;/a&gt; collection.</source>
          <target state="translated">元素以它们在&lt;a href=&quot;add-all#kotlin.collections.MutableList%24addAll%28kotlin.collections.Collection%28%28kotlin.collections.MutableList.E%29%29%29%2Felements&quot;&gt;元素&lt;/a&gt;集合中出现的顺序追加。</target>
        </trans-unit>
        <trans-unit id="82095a92897d87f6ce531db50ce0bc12db68723f" translate="yes" xml:space="preserve">
          <source>The elements are appended in the order they appear in the &lt;a href=&quot;add-all#kotlin.collections.MutableList%24addAll(kotlin.collections.Collection((kotlin.collections.MutableList.E)))/elements&quot;&gt;elements&lt;/a&gt; collection.</source>
          <target state="translated">元素以它们在&lt;a href=&quot;add-all#kotlin.collections.MutableList%24addAll(kotlin.collections.Collection((kotlin.collections.MutableList.E)))/elements&quot;&gt;元素&lt;/a&gt;集合中出现的顺序追加。</target>
        </trans-unit>
        <trans-unit id="daa9aa5d9ebd8b42b1bcdf3100554fd92ca03d09" translate="yes" xml:space="preserve">
          <source>The elements are compared for equality with the &lt;a href=&quot;../kotlin/-any/equals#kotlin.Any%24equals%28kotlin.Any%29&quot;&gt;equals&lt;/a&gt; function. For floating point numbers it means that &lt;code&gt;NaN&lt;/code&gt; is equal to itself and &lt;code&gt;-0.0&lt;/code&gt; is not equal to &lt;code&gt;0.0&lt;/code&gt;.</source>
          <target state="translated">将元素与&lt;a href=&quot;../kotlin/-any/equals#kotlin.Any%24equals%28kotlin.Any%29&quot;&gt;equals&lt;/a&gt;函数进行相等性比较。对于浮点数，这意味着 &lt;code&gt;NaN&lt;/code&gt; 等于其自身，并且 &lt;code&gt;-0.0&lt;/code&gt; 不等于 &lt;code&gt;0.0&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="aad20466e5a76028e3397e50e8845f24663b34cf" translate="yes" xml:space="preserve">
          <source>The elements are compared for equality with the &lt;a href=&quot;../kotlin/-any/equals#kotlin.Any%24equals(kotlin.Any?)&quot;&gt;equals&lt;/a&gt; function. For floating point numbers it means that &lt;code&gt;NaN&lt;/code&gt; is equal to itself and &lt;code&gt;-0.0&lt;/code&gt; is not equal to &lt;code&gt;0.0&lt;/code&gt;.</source>
          <target state="translated">将元素与&lt;a href=&quot;../kotlin/-any/equals#kotlin.Any%24equals(kotlin.Any?)&quot;&gt;equals&lt;/a&gt;函数进行相等性比较。对于浮点数，这意味着 &lt;code&gt;NaN&lt;/code&gt; 等于其自身，并且 &lt;code&gt;-0.0&lt;/code&gt; 不等于 &lt;code&gt;0.0&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="f7d4f10d9d6ff53cf3cb02a56dcf3900dc9233c7" translate="yes" xml:space="preserve">
          <source>The elements in the resulting list are in the same order as they were in the source array.</source>
          <target state="translated">结果列表中的元素与源数组中的元素顺序相同。</target>
        </trans-unit>
        <trans-unit id="4758b35da216c6ed38b8e3b01e9232e835ffdf62" translate="yes" xml:space="preserve">
          <source>The elements in the resulting list are in the same order as they were in the source collection.</source>
          <target state="translated">结果列表中的元素与源集合中的顺序相同。</target>
        </trans-unit>
        <trans-unit id="925245d7080579f68b367dc0eefbb0c6350a2c59" translate="yes" xml:space="preserve">
          <source>The elements in the resulting sequence are in the same order as they were in the source sequence.</source>
          <target state="translated">结果序列中的元素与源序列中的元素顺序相同。</target>
        </trans-unit>
        <trans-unit id="62f13d9c86bbfcad668fdecca43def6919a28064" translate="yes" xml:space="preserve">
          <source>The elements of other types are compared for equality with the &lt;a href=&quot;../kotlin/-any/equals#kotlin.Any%24equals%28kotlin.Any%29&quot;&gt;equals&lt;/a&gt; function. For floating point numbers it means that &lt;code&gt;NaN&lt;/code&gt; is equal to itself and &lt;code&gt;-0.0&lt;/code&gt; is not equal to &lt;code&gt;0.0&lt;/code&gt;.</source>
          <target state="translated">将其他类型的元素与&lt;a href=&quot;../kotlin/-any/equals#kotlin.Any%24equals%28kotlin.Any%29&quot;&gt;equals&lt;/a&gt;函数进行相等性比较。对于浮点数，这意味着 &lt;code&gt;NaN&lt;/code&gt; 等于其自身，并且 &lt;code&gt;-0.0&lt;/code&gt; 不等于 &lt;code&gt;0.0&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="410a7c8a1416b4dffdf86f7b2fb29d1be03e7884" translate="yes" xml:space="preserve">
          <source>The elements of other types are compared for equality with the &lt;a href=&quot;../kotlin/-any/equals#kotlin.Any%24equals(kotlin.Any?)&quot;&gt;equals&lt;/a&gt; function. For floating point numbers it means that &lt;code&gt;NaN&lt;/code&gt; is equal to itself and &lt;code&gt;-0.0&lt;/code&gt; is not equal to &lt;code&gt;0.0&lt;/code&gt;.</source>
          <target state="translated">将其他类型的元素与&lt;a href=&quot;../kotlin/-any/equals#kotlin.Any%24equals(kotlin.Any?)&quot;&gt;equals&lt;/a&gt;函数进行相等性比较。对于浮点数，这意味着 &lt;code&gt;NaN&lt;/code&gt; 等于其自身，并且 &lt;code&gt;-0.0&lt;/code&gt; 不等于 &lt;code&gt;0.0&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="d2a1ff86475df89c5d0b4d977b7fdad8159958a2" translate="yes" xml:space="preserve">
          <source>The emitter can use a &lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines.flow/catch.html&quot;&gt;catch&lt;/a&gt; operator that preserves this exception transparency and allows encapsulation of its exception handling. The body of the &lt;code&gt;catch&lt;/code&gt; operator can analyze an exception and react to it in different ways depending on which exception was caught:</source>
          <target state="translated">发射器可以使用&lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines.flow/catch.html&quot;&gt;catch&lt;/a&gt;运算符，该运算符保留此异常透明性并允许对其异常处理进行封装。 &lt;code&gt;catch&lt;/code&gt; 运算符的主体可以分析异常，并根据捕获到的异常以不同的方式对异常作出反应：</target>
        </trans-unit>
        <trans-unit id="bb685b2c6e5acf402eac7fe67da99cd138309729" translate="yes" xml:space="preserve">
          <source>The end index of the &lt;a href=&quot;remove-range#kotlin.text%24removeRange%28kotlin.CharSequence%2C+kotlin.ranges.IntRange%29%2Frange&quot;&gt;range&lt;/a&gt; is included in the removed part.</source>
          <target state="translated">该&lt;a href=&quot;remove-range#kotlin.text%24removeRange%28kotlin.CharSequence%2C+kotlin.ranges.IntRange%29%2Frange&quot;&gt;范围&lt;/a&gt;的结束索引包含在已删除的部分中。</target>
        </trans-unit>
        <trans-unit id="11df9d3925f0418a6e38aed874d509daf4025048" translate="yes" xml:space="preserve">
          <source>The end index of the &lt;a href=&quot;remove-range#kotlin.text%24removeRange%28kotlin.String%2C+kotlin.ranges.IntRange%29%2Frange&quot;&gt;range&lt;/a&gt; is included in the removed part.</source>
          <target state="translated">该&lt;a href=&quot;remove-range#kotlin.text%24removeRange%28kotlin.String%2C+kotlin.ranges.IntRange%29%2Frange&quot;&gt;范围&lt;/a&gt;的结束索引包含在已删除的部分中。</target>
        </trans-unit>
        <trans-unit id="67fcbb6ac3e2a5c62cd2e430c9777a067763d923" translate="yes" xml:space="preserve">
          <source>The end index of the &lt;a href=&quot;remove-range#kotlin.text%24removeRange(kotlin.CharSequence,%20kotlin.ranges.IntRange)/range&quot;&gt;range&lt;/a&gt; is included in the removed part.</source>
          <target state="translated">该&lt;a href=&quot;remove-range#kotlin.text%24removeRange(kotlin.CharSequence,%20kotlin.ranges.IntRange)/range&quot;&gt;范围&lt;/a&gt;的结束索引包含在已删除的部分中。</target>
        </trans-unit>
        <trans-unit id="7aa81f1705dd0f516aa78c926061ad0c0bdec167" translate="yes" xml:space="preserve">
          <source>The end index of the &lt;a href=&quot;remove-range#kotlin.text%24removeRange(kotlin.String,%20kotlin.ranges.IntRange)/range&quot;&gt;range&lt;/a&gt; is included in the removed part.</source>
          <target state="translated">该&lt;a href=&quot;remove-range#kotlin.text%24removeRange(kotlin.String,%20kotlin.ranges.IntRange)/range&quot;&gt;范围&lt;/a&gt;的结束索引包含在已删除的部分中。</target>
        </trans-unit>
        <trans-unit id="88ef0ef1c8adfc13f79b17d279153b4deca66c2a" translate="yes" xml:space="preserve">
          <source>The end index of the &lt;a href=&quot;replace-range#kotlin.text%24replaceRange%28kotlin.CharSequence%2C+kotlin.ranges.IntRange%2C+kotlin.CharSequence%29%2Frange&quot;&gt;range&lt;/a&gt; is included in the part to be replaced.</source>
          <target state="translated">&lt;a href=&quot;replace-range#kotlin.text%24replaceRange%28kotlin.CharSequence%2C+kotlin.ranges.IntRange%2C+kotlin.CharSequence%29%2Frange&quot;&gt;范围&lt;/a&gt;的结束索引包含在要替换的零件中。</target>
        </trans-unit>
        <trans-unit id="110043ac6542bd5ea84cfa58a2ba979b14417af8" translate="yes" xml:space="preserve">
          <source>The end index of the &lt;a href=&quot;replace-range#kotlin.text%24replaceRange%28kotlin.String%2C+kotlin.ranges.IntRange%2C+kotlin.CharSequence%29%2Frange&quot;&gt;range&lt;/a&gt; is included in the part to be replaced.</source>
          <target state="translated">&lt;a href=&quot;replace-range#kotlin.text%24replaceRange%28kotlin.String%2C+kotlin.ranges.IntRange%2C+kotlin.CharSequence%29%2Frange&quot;&gt;范围&lt;/a&gt;的结束索引包含在要替换的零件中。</target>
        </trans-unit>
        <trans-unit id="265808d7f064c65b3e4484a504c21278573abe5f" translate="yes" xml:space="preserve">
          <source>The end index of the &lt;a href=&quot;replace-range#kotlin.text%24replaceRange(kotlin.CharSequence,%20kotlin.ranges.IntRange,%20kotlin.CharSequence)/range&quot;&gt;range&lt;/a&gt; is included in the part to be replaced.</source>
          <target state="translated">&lt;a href=&quot;replace-range#kotlin.text%24replaceRange(kotlin.CharSequence,%20kotlin.ranges.IntRange,%20kotlin.CharSequence)/range&quot;&gt;范围&lt;/a&gt;的结束索引包含在要替换的零件中。</target>
        </trans-unit>
        <trans-unit id="2757b02f416ac5f1c57fe37f28ebb5f19a2beb88" translate="yes" xml:space="preserve">
          <source>The end index of the &lt;a href=&quot;replace-range#kotlin.text%24replaceRange(kotlin.String,%20kotlin.ranges.IntRange,%20kotlin.CharSequence)/range&quot;&gt;range&lt;/a&gt; is included in the part to be replaced.</source>
          <target state="translated">&lt;a href=&quot;replace-range#kotlin.text%24replaceRange(kotlin.String,%20kotlin.ranges.IntRange,%20kotlin.CharSequence)/range&quot;&gt;范围&lt;/a&gt;的结束索引包含在要替换的零件中。</target>
        </trans-unit>
        <trans-unit id="d2bb3fe28b22f0be53eb5ccfae4478026ce71334" translate="yes" xml:space="preserve">
          <source>The entity which has an associated native pointer. Subtypes are supposed to represent interpretations of the pointed data or code.</source>
          <target state="translated">有关联的本机指针的实体。子类型应该代表对指向的数据或代码的解释。</target>
        </trans-unit>
        <trans-unit id="3e04fcff376865a32dde7dae672ab9789090a9b8" translate="yes" xml:space="preserve">
          <source>The entry point function for executable binaries. By default, it's &lt;code&gt;main()&lt;/code&gt; in the root package.</source>
          <target state="translated">可执行二进制文件的入口点功能。默认情况下，它是根包中的 &lt;code&gt;main()&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="2c6bd81b6f529ef522b5222f238d9ced96f1bfdb" translate="yes" xml:space="preserve">
          <source>The enum constants also implement the &lt;a href=&quot;../../api/latest/jvm/stdlib/kotlin/-comparable/index&quot;&gt;Comparable&lt;/a&gt; interface, with the natural order being the order in which they are defined in the enum class.</source>
          <target state="translated">枚举常量还实现&lt;a href=&quot;../../api/latest/jvm/stdlib/kotlin/-comparable/index&quot;&gt;Comparable&lt;/a&gt;接口，自然顺序是在enum类中定义它们的顺序。</target>
        </trans-unit>
        <trans-unit id="1f86188b4a8b45564220a022aed934fe72f40d6e" translate="yes" xml:space="preserve">
          <source>The example above shows the difference: &lt;code&gt;fold()&lt;/code&gt; is used for calculating the sum of doubled elements. If you pass the same function to &lt;code&gt;reduce()&lt;/code&gt;, it will return another result because it uses the list's first and second elements as arguments on the first step, so the first element won't be doubled.</source>
          <target state="translated">上面的示例显示了区别： &lt;code&gt;fold()&lt;/code&gt; 用于计算加倍元素的总和。如果将相同的函数传递给 &lt;code&gt;reduce()&lt;/code&gt; ，它将返回另一个结果，因为在第一步中它将列表的第一个和第二个元素用作参数，因此第一个元素不会被加倍。</target>
        </trans-unit>
        <trans-unit id="b596f3f6b2203ee7818d443ce1a3eb3a2049daee" translate="yes" xml:space="preserve">
          <source>The example above will work for Android libraries with no product flavors. For a library with product flavors, the variant names also contain the flavors, like &lt;code&gt;fooBarDebug&lt;/code&gt; or &lt;code&gt;fooBazRelease&lt;/code&gt;.</source>
          <target state="translated">上面的示例适用于没有产品口味的Android库。对于具有产品 &lt;code&gt;fooBarDebug&lt;/code&gt; 的库，变量名称也包含样式，例如fooBarDebug或 &lt;code&gt;fooBazRelease&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="2034baca1648e38acba659c7ed9ab52779def3a9" translate="yes" xml:space="preserve">
          <source>The example of using &lt;code&gt;convert&lt;/code&gt;:</source>
          <target state="translated">使用 &lt;code&gt;convert&lt;/code&gt; 的示例：</target>
        </trans-unit>
        <trans-unit id="e3355465d3cb3b6a452d6af446afe351cd4d8a18" translate="yes" xml:space="preserve">
          <source>The example works for Android libraries without &lt;a href=&quot;https://developer.android.com/studio/build/build-variants#product-flavors&quot;&gt;product flavors&lt;/a&gt;. For a library with product flavors, the variant names also contain the flavors, like &lt;code&gt;fooBarDebug&lt;/code&gt; or &lt;code&gt;fooBazRelease&lt;/code&gt;.</source>
          <target state="translated">该示例适用于没有&lt;a href=&quot;https://developer.android.com/studio/build/build-variants#product-flavors&quot;&gt;产品风格的&lt;/a&gt;Android库。对于具有产品 &lt;code&gt;fooBarDebug&lt;/code&gt; 的库，变量名称也包含样式，例如fooBarDebug或 &lt;code&gt;fooBazRelease&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="de730ff080513a1697957b51012ee307f16f42d8" translate="yes" xml:space="preserve">
          <source>The exception refers to the &lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines.flow/flow-on.html&quot;&gt;flowOn&lt;/a&gt; function that shall be used to change the context of the flow emission. The correct way to change the context of a flow is shown in the example below, which also prints the names of the corresponding threads to show how it all works:</source>
          <target state="translated">例外是指&lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines.flow/flow-on.html&quot;&gt;flowOn&lt;/a&gt;函数，该函数应用于更改流发射的上下文。下面的示例显示了更改流上下文的正确方法，该示例还打印了相应线程的名称以显示其全部工作方式：</target>
        </trans-unit>
        <trans-unit id="18829b154c907ba2a13646994ee9e04f0d08452d" translate="yes" xml:space="preserve">
          <source>The exception thrown when a character encoding or decoding error occurs.</source>
          <target state="translated">发生字符编码或解码错误时产生的异常。</target>
        </trans-unit>
        <trans-unit id="15573b104c4da364167fd1f5ed5ef94aba8df42c" translate="yes" xml:space="preserve">
          <source>The experimental marker for associated objects API.</source>
          <target state="translated">关联对象API的实验标记。</target>
        </trans-unit>
        <trans-unit id="6d95121d07b3626cf990aefa17a36910bfcf4f29" translate="yes" xml:space="preserve">
          <source>The experimental marker for type inference augmenting annotations.</source>
          <target state="translated">类型推理增强注释的实验标记。</target>
        </trans-unit>
        <trans-unit id="deb8aac7cf53fe1202db4a3293685d56f19ee1b3" translate="yes" xml:space="preserve">
          <source>The experimental multiplatform support API marker.</source>
          <target state="translated">实验性的多平台支持API标记。</target>
        </trans-unit>
        <trans-unit id="0428313ba384ac9c0b8833c120ad8f95ce4ede3d" translate="yes" xml:space="preserve">
          <source>The expression &lt;code&gt;::x&lt;/code&gt; evaluates to a property object of type &lt;code&gt;KProperty&amp;lt;Int&amp;gt;&lt;/code&gt;, which allows us to read its value using &lt;code&gt;get()&lt;/code&gt; or retrieve the property name using the &lt;code&gt;name&lt;/code&gt; property. For more information, please refer to the &lt;a href=&quot;../../api/latest/jvm/stdlib/kotlin.reflect/-k-property/index&quot;&gt;docs on the &lt;code&gt;KProperty&lt;/code&gt; class&lt;/a&gt;.</source>
          <target state="translated">表达式 &lt;code&gt;::x&lt;/code&gt; 的计算结果为 &lt;code&gt;KProperty&amp;lt;Int&amp;gt;&lt;/code&gt; 类型的属性对象，该属性对象使我们可以使用 &lt;code&gt;get()&lt;/code&gt; 读取其值或使用 &lt;code&gt;name&lt;/code&gt; 属性检索属性名称。有关更多信息，请参考&lt;a href=&quot;../../api/latest/jvm/stdlib/kotlin.reflect/-k-property/index&quot;&gt; &lt;code&gt;KProperty&lt;/code&gt; &lt;/a&gt;类上的文档。</target>
        </trans-unit>
        <trans-unit id="9763a942f3f5fe1ee65c354fc7379c3f68a833e5" translate="yes" xml:space="preserve">
          <source>The fall-through behavior inside &lt;code&gt;when&lt;/code&gt; is subject to further design.</source>
          <target state="translated">&lt;code&gt;when&lt;/code&gt; 内的掉线行为有待进一步设计。</target>
        </trans-unit>
        <trans-unit id="993743ac3189d9caa30dab313cb6712bc1755441" translate="yes" xml:space="preserve">
          <source>The fat framework must have the same base name as the initial frameworks.</source>
          <target state="translated">胖子框架必须和初始框架有相同的基名。</target>
        </trans-unit>
        <trans-unit id="788ff064b8ecef1f248204a84772fdfe4508eee7" translate="yes" xml:space="preserve">
          <source>The file is missing the &lt;code&gt;extern &quot;C&quot;&lt;/code&gt; block, which is not needed for our example, but may be necessary if we use C++ and overloaded functions. The &lt;a href=&quot;https://stackoverflow.com/questions/1041866/what-is-the-effect-of-extern-c-in-c&quot;&gt;C++ compatibility&lt;/a&gt; thread contains more details on this.</source>
          <target state="translated">该文件缺少 &lt;code&gt;extern &quot;C&quot;&lt;/code&gt; 块，这对于我们的示例不是必需的，但是如果我们使用C ++和重载函数，则可能是必需的。在&lt;a href=&quot;https://stackoverflow.com/questions/1041866/what-is-the-effect-of-extern-c-in-c&quot;&gt;C ++的兼容性&lt;/a&gt;线包含更多细节。</target>
        </trans-unit>
        <trans-unit id="2828031dfb85b70cc7191c0b9ade03e3586cc60a" translate="yes" xml:space="preserve">
          <source>The file system locations for the Java sources are different from the &lt;code&gt;java&lt;/code&gt; plugin's defaults. The Java source files need to be placed in the sibling directories of the Kotlin source roots. For example, if the JVM target has the default name &lt;code&gt;jvm&lt;/code&gt;, the paths are:</source>
          <target state="translated">对于Java源文件系统中的位置是从不同 &lt;code&gt;java&lt;/code&gt; 插件的默认设置。Java源文件需要放置在Kotlin源根目录的同级目录中。例如，如果JVM目标具有默认名称 &lt;code&gt;jvm&lt;/code&gt; ，则路径为：</target>
        </trans-unit>
        <trans-unit id="a63cb5acdae60d6976d603a52addbcfa0b41167c" translate="yes" xml:space="preserve">
          <source>The file we're mostly interested in is &lt;code&gt;ConsoleOutput.js&lt;/code&gt;</source>
          <target state="translated">我们最感兴趣的文件是 &lt;code&gt;ConsoleOutput.js&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="b2c228ca59fbecd7257e251a141cb2c1718c2ba0" translate="yes" xml:space="preserve">
          <source>The final code in the &lt;code&gt;hello.kt&lt;/code&gt; file may look like that:</source>
          <target state="translated">&lt;code&gt;hello.kt&lt;/code&gt; 文件中的最终代码如下所示：</target>
        </trans-unit>
        <trans-unit id="994c32d45d717275b8093d1a6c05a756a3faeb93" translate="yes" xml:space="preserve">
          <source>The final code in the &lt;code&gt;hello.kt&lt;/code&gt; file may look like this:</source>
          <target state="translated">&lt;code&gt;hello.kt&lt;/code&gt; 文件中的最终代码如下所示：</target>
        </trans-unit>
        <trans-unit id="845eeef01520a4662cdfbe660097ba30ecf3f4fb" translate="yes" xml:space="preserve">
          <source>The final step is to define the actual compilation of the project, which uses the standard IntelliJ IDEA Runner Type</source>
          <target state="translated">最后一步是定义项目的实际编译,它使用标准的IntelliJ IDEA Runner Type</target>
        </trans-unit>
        <trans-unit id="64ebebb6a3a3dfec1d013df86e5fccb457a8633c" translate="yes" xml:space="preserve">
          <source>The final step is to make Xcode call our Gradle build to prepare the &lt;code&gt;SharedCode&lt;/code&gt; framework before each run. We open the &lt;em&gt;Build Phases&lt;/em&gt; tab and click &lt;code&gt;+&lt;/code&gt; to add the &lt;em&gt;New Run Script Phase&lt;/em&gt; and add the following code into it:</source>
          <target state="translated">最后一步是使Xcode调用我们的Gradle构建，以在每次运行之前准备 &lt;code&gt;SharedCode&lt;/code&gt; 框架。我们打开&lt;em&gt;Build Phases&lt;/em&gt;选项卡，然后单击 &lt;code&gt;+&lt;/code&gt; 添加&lt;em&gt;New Run Script Phase&lt;/em&gt;并将以下代码添加到其中：</target>
        </trans-unit>
        <trans-unit id="18cac2860812daece2680c18729b8285d0c95c2d" translate="yes" xml:space="preserve">
          <source>The first &lt;code&gt;this&lt;/code&gt; refers to &lt;code&gt;maybeNull&lt;/code&gt;, the second one refers to the result of &lt;code&gt;firstFunction()&lt;/code&gt;, and &lt;code&gt;result&lt;/code&gt; will be the result of &lt;code&gt;secondFunction()&lt;/code&gt; (or null if &lt;code&gt;maybeNull&lt;/code&gt; or any of the intermediate results were null).</source>
          <target state="translated">第一 &lt;code&gt;this&lt;/code&gt; 是指 &lt;code&gt;maybeNull&lt;/code&gt; ，第二个指的结果 &lt;code&gt;firstFunction()&lt;/code&gt; ，并且 &lt;code&gt;result&lt;/code&gt; 将是的结果 &lt;code&gt;secondFunction()&lt;/code&gt; (或空如果 &lt;code&gt;maybeNull&lt;/code&gt; 或任何中间结果均为零）。</target>
        </trans-unit>
        <trans-unit id="4fdd8b62987d88f8c4db3a2a41e10fc4d1887b5c" translate="yes" xml:space="preserve">
          <source>The first argument in this example allows one to set a name prefix for the created binaries which is used to access them in the buildscript (see the &lt;a href=&quot;#accessing-binaries&quot;&gt;&quot;Accessing binaries&quot;&lt;/a&gt; section). Also this prefix is used as a default name for the binary file. For example on Windows the sample above produces files &lt;code&gt;foo.exe&lt;/code&gt; and &lt;code&gt;bar.exe&lt;/code&gt;.</source>
          <target state="translated">在此示例中，第一个参数允许为已创建的二进制文件设置名称前缀，该名称前缀用于在构建脚本中访问它们（请参见&lt;a href=&quot;#accessing-binaries&quot;&gt;&amp;ldquo;访问二进制文件&amp;rdquo;&lt;/a&gt;部分）。此前缀也用作二进制文件的默认名称。例如，在Windows上，以上示例生成文件 &lt;code&gt;foo.exe&lt;/code&gt; 和 &lt;code&gt;bar.exe&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="ab7ad2adf8e4b67a975c2aa2a67b21c251d16be6" translate="yes" xml:space="preserve">
          <source>The first argument sets a name prefix, which is the default name for the binary file. For example, for Windows the code produces the files &lt;code&gt;foo.exe&lt;/code&gt; and &lt;code&gt;bar.exe&lt;/code&gt;. You can also use the name prefix to &lt;a href=&quot;#access-binaries&quot;&gt;access the binary in the build script&lt;/a&gt;.</source>
          <target state="translated">第一个参数设置名称前缀，这是二进制文件的默认名称。例如，对于Windows，代码生成文件 &lt;code&gt;foo.exe&lt;/code&gt; 和 &lt;code&gt;bar.exe&lt;/code&gt; 。您还可以使用名称前缀&lt;a href=&quot;#access-binaries&quot;&gt;访问构建脚本中的二进制文件&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="2fc302c51d198c918ae55a3c30c065988889b3c8" translate="yes" xml:space="preserve">
          <source>The first call in the chain usually should have a line break before it, but it's OK to omit it if the code makes more sense that way.</source>
          <target state="translated">链中的第一个调用通常应该在它之前有一个换行符,但如果这样代码更合理,省略它也是可以的。</target>
        </trans-unit>
        <trans-unit id="7d42226ff723442296e308591a35f8828357046e" translate="yes" xml:space="preserve">
          <source>The first coroutine has the &lt;strong&gt;SUSPENDED&lt;/strong&gt; status &amp;ndash; it is waiting for the values so it can multiply them.</source>
          <target state="translated">第一个协程具有&lt;strong&gt;SUSPENDED&lt;/strong&gt;状态-它正在等待值，以便可以将它们相乘。</target>
        </trans-unit>
        <trans-unit id="b4e33fae8e821602ad4182a2f8cd98570f5752fb" translate="yes" xml:space="preserve">
          <source>The first element in the progression.</source>
          <target state="translated">进阶的第一个要素。</target>
        </trans-unit>
        <trans-unit id="f74c962485a9f3f35870c553a197b5ef319d5a35" translate="yes" xml:space="preserve">
          <source>The first example mixes &lt;em&gt;non-blocking&lt;/em&gt;&lt;code&gt;delay(...)&lt;/code&gt; and &lt;em&gt;blocking&lt;/em&gt;&lt;code&gt;Thread.sleep(...)&lt;/code&gt; in the same code. It is easy to lose track of which one is blocking and which one is not. Let's be explicit about blocking using &lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/run-blocking.html&quot;&gt;runBlocking&lt;/a&gt; coroutine builder:</source>
          <target state="translated">第一个示例在同一代码中混合了&lt;em&gt;非阻塞&lt;/em&gt; &lt;code&gt;delay(...)&lt;/code&gt; 和&lt;em&gt;阻塞&lt;/em&gt; &lt;code&gt;Thread.sleep(...)&lt;/code&gt; 。很容易忘记哪个阻塞了，哪个没有阻塞。让我们明确地使用&lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/run-blocking.html&quot;&gt;runBlocking&lt;/a&gt;协程生成器进行阻止：</target>
        </trans-unit>
        <trans-unit id="1aa4bbc7c819801ad00e125d4e56e82f4c2f67c5" translate="yes" xml:space="preserve">
          <source>The first example mixes &lt;em&gt;non-blocking&lt;/em&gt;&lt;code&gt;delay(...)&lt;/code&gt; and &lt;em&gt;blocking&lt;/em&gt;&lt;code&gt;Thread.sleep(...)&lt;/code&gt; in the same code. It is easy to lose track of which one is blocking and which one is not. Let's be explicit about blocking using the &lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/run-blocking.html&quot;&gt;runBlocking&lt;/a&gt; coroutine builder:</source>
          <target state="translated">第一个示例在同一代码中混合了&lt;em&gt;非阻塞&lt;/em&gt; &lt;code&gt;delay(...)&lt;/code&gt; 和&lt;em&gt;阻塞&lt;/em&gt; &lt;code&gt;Thread.sleep(...)&lt;/code&gt; 。很容易忘记哪个阻塞了，哪个没有阻塞。让我们明确地使用&lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/run-blocking.html&quot;&gt;runBlocking&lt;/a&gt;协程生成器进行阻止：</target>
        </trans-unit>
        <trans-unit id="b2d66cf460f6f78061ad6d5f7262d3436e850f41" translate="yes" xml:space="preserve">
          <source>The first extension takes a &lt;code&gt;char *&lt;/code&gt; as a UTF-8 string and turns it into a String. The second function does the same but for wide UTF-16 strings.</source>
          <target state="translated">The first extension takes a &lt;code&gt;char *&lt;/code&gt; as a UTF-8 string and turns it into a String. The second function does the same but for wide UTF-16 strings.</target>
        </trans-unit>
        <trans-unit id="60455f009d759b3a711a0c86694ca0f8e3417539" translate="yes" xml:space="preserve">
          <source>The first four elements are added to the buffer and the sender suspends when trying to send the fifth one.</source>
          <target state="translated">前四个元素被添加到缓冲区,当试图发送第五个元素时,发送方暂停。</target>
        </trans-unit>
        <trans-unit id="ab32e32b6495f8ef1ecac2deb728551ecd768355" translate="yes" xml:space="preserve">
          <source>The first function is &lt;a href=&quot;../../api/latest/jvm/stdlib/kotlin.collections/flatten&quot;&gt;&lt;code&gt;flatten()&lt;/code&gt;&lt;/a&gt;. You can call it on a collection of collections, for example, a &lt;code&gt;List&lt;/code&gt; of &lt;code&gt;Set&lt;/code&gt;s. The function returns a single &lt;code&gt;List&lt;/code&gt; of all the elements of the nested collections.</source>
          <target state="translated">第一个函数是&lt;a href=&quot;../../api/latest/jvm/stdlib/kotlin.collections/flatten&quot;&gt; &lt;code&gt;flatten()&lt;/code&gt; &lt;/a&gt;。你可以把它在集合的集合，例如，一个 &lt;code&gt;List&lt;/code&gt; 的 &lt;code&gt;Set&lt;/code&gt; 秒。该函数返回嵌套集合的所有元素的单个 &lt;code&gt;List&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="bb9b81609c647210d6aacd108c4c1230b4870b5f" translate="yes" xml:space="preserve">
          <source>The first line of the input contains two integers &lt;code&gt;n&lt;/code&gt; and &lt;code&gt;k&lt;/code&gt;</source>
          <target state="translated">输入的第一行包含两个整数 &lt;code&gt;n&lt;/code&gt; 和 &lt;code&gt;k&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="a973365d252e2f2156e9bff5ffce49da12fd36a5" translate="yes" xml:space="preserve">
          <source>The first list contains the first elements of each &lt;code&gt;Pair&lt;/code&gt; in the original list.</source>
          <target state="translated">第一个列表包含原始列表中每个 &lt;code&gt;Pair&lt;/code&gt; 的第一个元素。</target>
        </trans-unit>
        <trans-unit id="79bda60284dc4aa80a7917505f3968fd9009f668" translate="yes" xml:space="preserve">
          <source>The first step of using an actor is to define a class of messages that an actor is going to process. Kotlin's &lt;a href=&quot;../sealed-classes&quot;&gt;sealed classes&lt;/a&gt; are well suited for that purpose. We define &lt;code&gt;CounterMsg&lt;/code&gt; sealed class with &lt;code&gt;IncCounter&lt;/code&gt; message to increment a counter and &lt;code&gt;GetCounter&lt;/code&gt; message to get its value. The later needs to send a response. A &lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/-completable-deferred/index.html&quot;&gt;CompletableDeferred&lt;/a&gt; communication primitive, that represents a single value that will be known (communicated) in the future, is used here for that purpose.</source>
          <target state="translated">使用actor的第一步是定义actor将要处理的一类消息。Kotlin的&lt;a href=&quot;../sealed-classes&quot;&gt;密封课程&lt;/a&gt;非常适合该目的。我们定义 &lt;code&gt;CounterMsg&lt;/code&gt; 密封类 &lt;code&gt;IncCounter&lt;/code&gt; 消息，计数器加 &lt;code&gt;GetCounter&lt;/code&gt; 消息得到其价值。稍后需要发送响应。甲&lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/-completable-deferred/index.html&quot;&gt;CompletableDeferred&lt;/a&gt;通信原码，即表示将在将来已知的（传送）一个单一的值，在这里用于该目的。</target>
        </trans-unit>
        <trans-unit id="38481ec6d5c41bf35d07d09bc7535247f80dee43" translate="yes" xml:space="preserve">
          <source>The first thing we'll need is a Kotlin file called &lt;code&gt;src/nativeMain/kotlin/hello.kt&lt;/code&gt; with the &lt;code&gt;main&lt;/code&gt; function defined in it and then proceed to translate each line</source>
          <target state="translated">我们需要的第一件事是一个名为 &lt;code&gt;src/nativeMain/kotlin/hello.kt&lt;/code&gt; 的Kotlin文件，其中定义了 &lt;code&gt;main&lt;/code&gt; 函数，然后继续翻译每一行</target>
        </trans-unit>
        <trans-unit id="804c8326e52e09959a1fbeb61a10298b8d1c200d" translate="yes" xml:space="preserve">
          <source>The following API elements have been moved to the common library:</source>
          <target state="translated">以下API元素已被移至通用库。</target>
        </trans-unit>
        <trans-unit id="6f6aa8f820f0284bd28697b0207de3b2578af79f" translate="yes" xml:space="preserve">
          <source>The following attributes are supported:</source>
          <target state="translated">支持以下属性:</target>
        </trans-unit>
        <trans-unit id="d555f20ea9bbf2028964527e2711757cec45ebd4" translate="yes" xml:space="preserve">
          <source>The following code launches a long-running coroutine in &lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/-global-scope/index.html&quot;&gt;GlobalScope&lt;/a&gt; that prints &quot;I'm sleeping&quot; twice a second and then returns from the main function after some delay:</source>
          <target state="translated">下面的代码在&lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/-global-scope/index.html&quot;&gt;GlobalScope&lt;/a&gt;中启动一个长时间运行的协程，该协程每秒显示两次&amp;ldquo;我在睡觉&amp;rdquo;，然后在延迟一段时间后从主函数返回：</target>
        </trans-unit>
        <trans-unit id="ead88ea1dd6b3e545d54d2d74bc4d103e0cfff51" translate="yes" xml:space="preserve">
          <source>The following commands are available.</source>
          <target state="translated">可使用以下命令:</target>
        </trans-unit>
        <trans-unit id="55be4cb42f91b956f18957a0a075265fb24672f6" translate="yes" xml:space="preserve">
          <source>The following example demonstrates this concept:</source>
          <target state="translated">下面的例子说明了这个概念。</target>
        </trans-unit>
        <trans-unit id="40d8cb89ac87b573a486f4f8fe49663dde1297b2" translate="yes" xml:space="preserve">
          <source>The following example prints the first ten prime numbers, running the whole pipeline in the context of the main thread. Since all the coroutines are launched in the scope of the main &lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/run-blocking.html&quot;&gt;runBlocking&lt;/a&gt; coroutine we don't have to keep an explicit list of all the coroutines we have started. We use &lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/kotlin.coroutines.-coroutine-context/cancel-children.html&quot;&gt;cancelChildren&lt;/a&gt; extension function to cancel all the children coroutines after we have printed the first ten prime numbers.</source>
          <target state="translated">下面的示例显示前十个质数，并在主线程的上下文中运行整个管道。由于所有协程都是在主&lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/run-blocking.html&quot;&gt;runBlocking&lt;/a&gt;协程的范围内启动的，因此我们不必保留已启动的所有协程的明确列表。在打印前十个质数后，我们使用&lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/kotlin.coroutines.-coroutine-context/cancel-children.html&quot;&gt;cancelChildren&lt;/a&gt;扩展功能来取消所有子协程。</target>
        </trans-unit>
        <trans-unit id="9f818012b8152abe166a094d93ab2ca0ec79eab1" translate="yes" xml:space="preserve">
          <source>The following example shows how to use these settings.</source>
          <target state="translated">下面的例子显示了如何使用这些设置。</target>
        </trans-unit>
        <trans-unit id="29c80399d536894a6ec94c527a731166260c49c2" translate="yes" xml:space="preserve">
          <source>The following example shows their use outside of coroutine:</source>
          <target state="translated">下面的例子显示了它们在coroutine之外的使用。</target>
        </trans-unit>
        <trans-unit id="b39c4c0b095563ff59ef483ec27836f8b662f2fa" translate="yes" xml:space="preserve">
          <source>The following examples show different possibilities of configuring the Gradle plugin:</source>
          <target state="translated">下面的例子展示了配置Gradle插件的不同可能性。</target>
        </trans-unit>
        <trans-unit id="e712d7790d39e907b7ee7e8cb60e61e0c86b31e2" translate="yes" xml:space="preserve">
          <source>The following identifiers are defined by the compiler in specific contexts and can be used as regular identifiers in other contexts:</source>
          <target state="translated">以下标识符由编译器在特定上下文中定义,并可在其他上下文中作为常规标识符使用。</target>
        </trans-unit>
        <trans-unit id="bf95dedf99c3841e1d5196a0ba2d969912347f7d" translate="yes" xml:space="preserve">
          <source>The following is an example interface of the JDK implemented by &lt;code&gt;StringBuilder&lt;/code&gt; class:</source>
          <target state="translated">以下是 &lt;code&gt;StringBuilder&lt;/code&gt; 类实现的JDK的示例接口：</target>
        </trans-unit>
        <trans-unit id="3270b513d23150d33c43f1294cdabc39fc329d50" translate="yes" xml:space="preserve">
          <source>The following options are common for all Kotlin compilers.</source>
          <target state="translated">以下选项是所有Kotlin编译器通用的。</target>
        </trans-unit>
        <trans-unit id="8e29598dc88ea6b0ec70ab50aa2a4cfa741c6e7f" translate="yes" xml:space="preserve">
          <source>The following pipeline stage filters an incoming stream of numbers, removing all the numbers that are divisible by the given prime number:</source>
          <target state="translated">下面的流水线阶段过滤输入的数字流,去除所有被给定质数除以的数字。</target>
        </trans-unit>
        <trans-unit id="29b7ef083a5e449cb9ecea68dfa0ae64024fefca" translate="yes" xml:space="preserve">
          <source>The following podspec fields are required by CocoaPods:</source>
          <target state="translated">CocoaPods需要以下podspec字段。</target>
        </trans-unit>
        <trans-unit id="21b0584d86535ffda98821a37bb76687f7207959" translate="yes" xml:space="preserve">
          <source>The following sections explain in more detail the concepts mentioned so far.</source>
          <target state="translated">以下各节将更详细地解释迄今为止所提到的概念。</target>
        </trans-unit>
        <trans-unit id="74efddf743e09c3574933d597d99624d7eb3e501" translate="yes" xml:space="preserve">
          <source>The following snippet creates two executable binaries: debug and release.</source>
          <target state="translated">以下代码段创建了两个可执行的二进制文件:debug和release。</target>
        </trans-unit>
        <trans-unit id="5472a88e6462dc9e30567cf6b7a816998c79c200" translate="yes" xml:space="preserve">
          <source>The following tokens act as keywords in modifier lists of declarations and can be used as identifiers in other contexts:</source>
          <target state="translated">以下标记在声明的修饰列表中充当关键字,并可在其他情况下作为标识符使用。</target>
        </trans-unit>
        <trans-unit id="c62886b027ba800287b4be18a333a156fdeb309b" translate="yes" xml:space="preserve">
          <source>The following tokens act as keywords in the context when they are applicable and can be used as identifiers in other contexts:</source>
          <target state="translated">以下标记在适用时作为上下文中的关键词,在其他上下文中可作为标识符使用。</target>
        </trans-unit>
        <trans-unit id="71c4c5ec356525034ad2f877a92ba2dfdfffc609" translate="yes" xml:space="preserve">
          <source>The following tokens are always interpreted as keywords and cannot be used as identifiers:</source>
          <target state="translated">以下标记总是被解释为关键字,不能作为标识符使用。</target>
        </trans-unit>
        <trans-unit id="0493d41eaaff9f9930d4990e582a0014dff8b09e" translate="yes" xml:space="preserve">
          <source>The following workflow is expected when interacting with the native library.</source>
          <target state="translated">在与本地库交互时,预计会有以下工作流程。</target>
        </trans-unit>
        <trans-unit id="41bde8cb095fdaa39e87c44d34bec8992402e368" translate="yes" xml:space="preserve">
          <source>The fractional part, if any, is rounded down towards zero. Returns zero if this &lt;code&gt;Double&lt;/code&gt; value is &lt;code&gt;NaN&lt;/code&gt;, &lt;a href=&quot;../-int/-m-i-n_-v-a-l-u-e#kotlin.Int.Companion%24MIN_VALUE&quot;&gt;Int.MIN_VALUE&lt;/a&gt; if it's less than &lt;code&gt;Int.MIN_VALUE&lt;/code&gt;, &lt;a href=&quot;../-int/-m-a-x_-v-a-l-u-e#kotlin.Int.Companion%24MAX_VALUE&quot;&gt;Int.MAX_VALUE&lt;/a&gt; if it's bigger than &lt;code&gt;Int.MAX_VALUE&lt;/code&gt;.</source>
          <target state="translated">小数部分（如果有的话）会四舍五入为零。返回零，如果这 &lt;code&gt;Double&lt;/code&gt; 价值 &lt;code&gt;NaN&lt;/code&gt; ，&lt;a href=&quot;../-int/-m-i-n_-v-a-l-u-e#kotlin.Int.Companion%24MIN_VALUE&quot;&gt;Int.MIN_VALUE&lt;/a&gt;如果是小于 &lt;code&gt;Int.MIN_VALUE&lt;/code&gt; ，&lt;a href=&quot;../-int/-m-a-x_-v-a-l-u-e#kotlin.Int.Companion%24MAX_VALUE&quot;&gt;int.MAX_VALUE的&lt;/a&gt;，如果它比大 &lt;code&gt;Int.MAX_VALUE&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="b7dbd577dd676bd08f82b2f5d51d9ac8e4bfc959" translate="yes" xml:space="preserve">
          <source>The fractional part, if any, is rounded down towards zero. Returns zero if this &lt;code&gt;Double&lt;/code&gt; value is &lt;code&gt;NaN&lt;/code&gt;, &lt;a href=&quot;../-long/-m-i-n_-v-a-l-u-e#kotlin.Long.Companion%24MIN_VALUE&quot;&gt;Long.MIN_VALUE&lt;/a&gt; if it's less than &lt;code&gt;Long.MIN_VALUE&lt;/code&gt;, &lt;a href=&quot;../-long/-m-a-x_-v-a-l-u-e#kotlin.Long.Companion%24MAX_VALUE&quot;&gt;Long.MAX_VALUE&lt;/a&gt; if it's bigger than &lt;code&gt;Long.MAX_VALUE&lt;/code&gt;.</source>
          <target state="translated">小数部分（如果有的话）会四舍五入为零。返回零，如果这 &lt;code&gt;Double&lt;/code&gt; 价值 &lt;code&gt;NaN&lt;/code&gt; ，&lt;a href=&quot;../-long/-m-i-n_-v-a-l-u-e#kotlin.Long.Companion%24MIN_VALUE&quot;&gt;Long.MIN_VALUE&lt;/a&gt;，如果是小于 &lt;code&gt;Long.MIN_VALUE&lt;/code&gt; ，&lt;a href=&quot;../-long/-m-a-x_-v-a-l-u-e#kotlin.Long.Companion%24MAX_VALUE&quot;&gt;Long.MAX_VALUE&lt;/a&gt;如果它比大 &lt;code&gt;Long.MAX_VALUE&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="7c24376936f310cfc6a2b02ee789c1ab9c4a079c" translate="yes" xml:space="preserve">
          <source>The fractional part, if any, is rounded down towards zero. Returns zero if this &lt;code&gt;Double&lt;/code&gt; value is negative or &lt;code&gt;NaN&lt;/code&gt;, &lt;a href=&quot;-u-int/-m-a-x_-v-a-l-u-e&quot;&gt;UInt.MAX_VALUE&lt;/a&gt; if it's bigger than &lt;code&gt;UInt.MAX_VALUE&lt;/code&gt;.</source>
          <target state="translated">小数部分（如果有的话）会四舍五入为零。如果此 &lt;code&gt;Double&lt;/code&gt; 值是负数或 &lt;code&gt;NaN&lt;/code&gt; ，则返回零；如果&lt;a href=&quot;-u-int/-m-a-x_-v-a-l-u-e&quot;&gt;UInt.MAX_VALUE&lt;/a&gt;大于 &lt;code&gt;UInt.MAX_VALUE&lt;/code&gt; ，则返回零。</target>
        </trans-unit>
        <trans-unit id="19ac86b4bcb26b195d587cd10aa019f5e68922bb" translate="yes" xml:space="preserve">
          <source>The fractional part, if any, is rounded down towards zero. Returns zero if this &lt;code&gt;Double&lt;/code&gt; value is negative or &lt;code&gt;NaN&lt;/code&gt;, &lt;a href=&quot;-u-long/-m-a-x_-v-a-l-u-e&quot;&gt;ULong.MAX_VALUE&lt;/a&gt; if it's bigger than &lt;code&gt;ULong.MAX_VALUE&lt;/code&gt;.</source>
          <target state="translated">小数部分（如果有的话）会四舍五入为零。如果此 &lt;code&gt;Double&lt;/code&gt; 值是负数或 &lt;code&gt;NaN&lt;/code&gt; ，则返回零&lt;a href=&quot;-u-long/-m-a-x_-v-a-l-u-e&quot;&gt;；&lt;/a&gt;如果它大于 &lt;code&gt;ULong.MAX_VALUE&lt;/code&gt; ，则返回ULong.MAX_VALUE。</target>
        </trans-unit>
        <trans-unit id="a03b953ac3fd08a46517db9b02880729ef0942e5" translate="yes" xml:space="preserve">
          <source>The fractional part, if any, is rounded down towards zero. Returns zero if this &lt;code&gt;Float&lt;/code&gt; value is &lt;code&gt;NaN&lt;/code&gt;, &lt;a href=&quot;../-int/-m-i-n_-v-a-l-u-e#kotlin.Int.Companion%24MIN_VALUE&quot;&gt;Int.MIN_VALUE&lt;/a&gt; if it's less than &lt;code&gt;Int.MIN_VALUE&lt;/code&gt;, &lt;a href=&quot;../-int/-m-a-x_-v-a-l-u-e#kotlin.Int.Companion%24MAX_VALUE&quot;&gt;Int.MAX_VALUE&lt;/a&gt; if it's bigger than &lt;code&gt;Int.MAX_VALUE&lt;/code&gt;.</source>
          <target state="translated">小数部分（如果有的话）会四舍五入为零。返回零，如果这个 &lt;code&gt;Float&lt;/code&gt; 值为 &lt;code&gt;NaN&lt;/code&gt; 的，&lt;a href=&quot;../-int/-m-i-n_-v-a-l-u-e#kotlin.Int.Companion%24MIN_VALUE&quot;&gt;Int.MIN_VALUE&lt;/a&gt;如果是小于 &lt;code&gt;Int.MIN_VALUE&lt;/code&gt; ，&lt;a href=&quot;../-int/-m-a-x_-v-a-l-u-e#kotlin.Int.Companion%24MAX_VALUE&quot;&gt;int.MAX_VALUE的&lt;/a&gt;，如果它比大 &lt;code&gt;Int.MAX_VALUE&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="f8f1f7669eb111859c7b969d69798041d2a9b37e" translate="yes" xml:space="preserve">
          <source>The fractional part, if any, is rounded down towards zero. Returns zero if this &lt;code&gt;Float&lt;/code&gt; value is &lt;code&gt;NaN&lt;/code&gt;, &lt;a href=&quot;../-long/-m-i-n_-v-a-l-u-e#kotlin.Long.Companion%24MIN_VALUE&quot;&gt;Long.MIN_VALUE&lt;/a&gt; if it's less than &lt;code&gt;Long.MIN_VALUE&lt;/code&gt;, &lt;a href=&quot;../-long/-m-a-x_-v-a-l-u-e#kotlin.Long.Companion%24MAX_VALUE&quot;&gt;Long.MAX_VALUE&lt;/a&gt; if it's bigger than &lt;code&gt;Long.MAX_VALUE&lt;/code&gt;.</source>
          <target state="translated">小数部分（如果有的话）会四舍五入为零。返回零，如果这个 &lt;code&gt;Float&lt;/code&gt; 值为 &lt;code&gt;NaN&lt;/code&gt; 的，&lt;a href=&quot;../-long/-m-i-n_-v-a-l-u-e#kotlin.Long.Companion%24MIN_VALUE&quot;&gt;Long.MIN_VALUE&lt;/a&gt;，如果是小于 &lt;code&gt;Long.MIN_VALUE&lt;/code&gt; ，&lt;a href=&quot;../-long/-m-a-x_-v-a-l-u-e#kotlin.Long.Companion%24MAX_VALUE&quot;&gt;Long.MAX_VALUE&lt;/a&gt;如果它比大 &lt;code&gt;Long.MAX_VALUE&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="43741e55696c4613d380e3f315ef0bfbfc2d96be" translate="yes" xml:space="preserve">
          <source>The fractional part, if any, is rounded down towards zero. Returns zero if this &lt;code&gt;Float&lt;/code&gt; value is negative or &lt;code&gt;NaN&lt;/code&gt;, &lt;a href=&quot;-u-int/-m-a-x_-v-a-l-u-e&quot;&gt;UInt.MAX_VALUE&lt;/a&gt; if it's bigger than &lt;code&gt;UInt.MAX_VALUE&lt;/code&gt;.</source>
          <target state="translated">小数部分（如果有的话）会四舍五入为零。如果此 &lt;code&gt;Float&lt;/code&gt; 值为负或 &lt;code&gt;NaN&lt;/code&gt; ，则返回零&lt;a href=&quot;-u-int/-m-a-x_-v-a-l-u-e&quot;&gt;；&lt;/a&gt;如果它大于 &lt;code&gt;UInt.MAX_VALUE&lt;/code&gt; ，则返回UInt.MAX_VALUE。</target>
        </trans-unit>
        <trans-unit id="3fd2c9a0fe0f333063fc214dadef0239e9bff9de" translate="yes" xml:space="preserve">
          <source>The fractional part, if any, is rounded down towards zero. Returns zero if this &lt;code&gt;Float&lt;/code&gt; value is negative or &lt;code&gt;NaN&lt;/code&gt;, &lt;a href=&quot;-u-long/-m-a-x_-v-a-l-u-e&quot;&gt;ULong.MAX_VALUE&lt;/a&gt; if it's bigger than &lt;code&gt;ULong.MAX_VALUE&lt;/code&gt;.</source>
          <target state="translated">小数部分（如果有的话）会四舍五入为零。如果此 &lt;code&gt;Float&lt;/code&gt; 值为负数或 &lt;code&gt;NaN&lt;/code&gt; ，则返回零&lt;a href=&quot;-u-long/-m-a-x_-v-a-l-u-e&quot;&gt;；&lt;/a&gt;如果它大于 &lt;code&gt;ULong.MAX_VALUE&lt;/code&gt; ，则返回ULong.MAX_VALUE。</target>
        </trans-unit>
        <trans-unit id="46d230bab2ec3e41d052e1e397afc7cc1e96642c" translate="yes" xml:space="preserve">
          <source>The fractional part, if any, is rounded down. Returns zero if this &lt;code&gt;Double&lt;/code&gt; value is &lt;code&gt;NaN&lt;/code&gt;, &lt;a href=&quot;../-int/-m-i-n_-v-a-l-u-e#kotlin.Int.Companion%24MIN_VALUE&quot;&gt;Int.MIN_VALUE&lt;/a&gt; if it's less than &lt;code&gt;Int.MIN_VALUE&lt;/code&gt;, &lt;a href=&quot;../-int/-m-a-x_-v-a-l-u-e#kotlin.Int.Companion%24MAX_VALUE&quot;&gt;Int.MAX_VALUE&lt;/a&gt; if it's bigger than &lt;code&gt;Int.MAX_VALUE&lt;/code&gt;.</source>
          <target state="translated">小数部分（如果有）四舍五入。返回零，如果这 &lt;code&gt;Double&lt;/code&gt; 价值 &lt;code&gt;NaN&lt;/code&gt; ，&lt;a href=&quot;../-int/-m-i-n_-v-a-l-u-e#kotlin.Int.Companion%24MIN_VALUE&quot;&gt;Int.MIN_VALUE&lt;/a&gt;如果是小于 &lt;code&gt;Int.MIN_VALUE&lt;/code&gt; ，&lt;a href=&quot;../-int/-m-a-x_-v-a-l-u-e#kotlin.Int.Companion%24MAX_VALUE&quot;&gt;int.MAX_VALUE的&lt;/a&gt;，如果它比大 &lt;code&gt;Int.MAX_VALUE&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="c7c04cb487d62c119eaf78735ad59d58fbbea7f7" translate="yes" xml:space="preserve">
          <source>The fractional part, if any, is rounded down. Returns zero if this &lt;code&gt;Double&lt;/code&gt; value is &lt;code&gt;NaN&lt;/code&gt;, &lt;a href=&quot;../-long/-m-i-n_-v-a-l-u-e#kotlin.Long.Companion%24MIN_VALUE&quot;&gt;Long.MIN_VALUE&lt;/a&gt; if it's less than &lt;code&gt;Long.MIN_VALUE&lt;/code&gt;, &lt;a href=&quot;../-long/-m-a-x_-v-a-l-u-e#kotlin.Long.Companion%24MAX_VALUE&quot;&gt;Long.MAX_VALUE&lt;/a&gt; if it's bigger than &lt;code&gt;Long.MAX_VALUE&lt;/code&gt;.</source>
          <target state="translated">小数部分（如果有）四舍五入。返回零，如果这 &lt;code&gt;Double&lt;/code&gt; 价值 &lt;code&gt;NaN&lt;/code&gt; ，&lt;a href=&quot;../-long/-m-i-n_-v-a-l-u-e#kotlin.Long.Companion%24MIN_VALUE&quot;&gt;Long.MIN_VALUE&lt;/a&gt;，如果是小于 &lt;code&gt;Long.MIN_VALUE&lt;/code&gt; ，&lt;a href=&quot;../-long/-m-a-x_-v-a-l-u-e#kotlin.Long.Companion%24MAX_VALUE&quot;&gt;Long.MAX_VALUE&lt;/a&gt;如果它比大 &lt;code&gt;Long.MAX_VALUE&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="986d603361e48796a38eb31b882249f0e0fb1907" translate="yes" xml:space="preserve">
          <source>The fractional part, if any, is rounded down. Returns zero if this &lt;code&gt;Double&lt;/code&gt; value is negative or &lt;code&gt;NaN&lt;/code&gt;, &lt;a href=&quot;-u-int/-m-a-x_-v-a-l-u-e&quot;&gt;UInt.MAX_VALUE&lt;/a&gt; if it's bigger than &lt;code&gt;UInt.MAX_VALUE&lt;/code&gt;.</source>
          <target state="translated">小数部分（如果有）四舍五入。如果此 &lt;code&gt;Double&lt;/code&gt; 值是负数或 &lt;code&gt;NaN&lt;/code&gt; ，则返回零；如果&lt;a href=&quot;-u-int/-m-a-x_-v-a-l-u-e&quot;&gt;UInt.MAX_VALUE&lt;/a&gt;大于 &lt;code&gt;UInt.MAX_VALUE&lt;/code&gt; ，则返回零。</target>
        </trans-unit>
        <trans-unit id="db89446a546caa08c045751959e85b9b42af6661" translate="yes" xml:space="preserve">
          <source>The fractional part, if any, is rounded down. Returns zero if this &lt;code&gt;Double&lt;/code&gt; value is negative or &lt;code&gt;NaN&lt;/code&gt;, &lt;a href=&quot;-u-long/-m-a-x_-v-a-l-u-e&quot;&gt;ULong.MAX_VALUE&lt;/a&gt; if it's bigger than &lt;code&gt;ULong.MAX_VALUE&lt;/code&gt;.</source>
          <target state="translated">小数部分（如果有）四舍五入。如果此 &lt;code&gt;Double&lt;/code&gt; 值是负数或 &lt;code&gt;NaN&lt;/code&gt; ，则返回零&lt;a href=&quot;-u-long/-m-a-x_-v-a-l-u-e&quot;&gt;；&lt;/a&gt;如果它大于 &lt;code&gt;ULong.MAX_VALUE&lt;/code&gt; ，则返回ULong.MAX_VALUE。</target>
        </trans-unit>
        <trans-unit id="6c0d7df43097a38a432b999c674eaa178ec96a50" translate="yes" xml:space="preserve">
          <source>The fractional part, if any, is rounded down. Returns zero if this &lt;code&gt;Float&lt;/code&gt; value is &lt;code&gt;NaN&lt;/code&gt;, &lt;a href=&quot;../-int/-m-i-n_-v-a-l-u-e#kotlin.Int.Companion%24MIN_VALUE&quot;&gt;Int.MIN_VALUE&lt;/a&gt; if it's less than &lt;code&gt;Int.MIN_VALUE&lt;/code&gt;, &lt;a href=&quot;../-int/-m-a-x_-v-a-l-u-e#kotlin.Int.Companion%24MAX_VALUE&quot;&gt;Int.MAX_VALUE&lt;/a&gt; if it's bigger than &lt;code&gt;Int.MAX_VALUE&lt;/code&gt;.</source>
          <target state="translated">小数部分（如果有）四舍五入。返回零，如果这个 &lt;code&gt;Float&lt;/code&gt; 值为 &lt;code&gt;NaN&lt;/code&gt; 的，&lt;a href=&quot;../-int/-m-i-n_-v-a-l-u-e#kotlin.Int.Companion%24MIN_VALUE&quot;&gt;Int.MIN_VALUE&lt;/a&gt;如果是小于 &lt;code&gt;Int.MIN_VALUE&lt;/code&gt; ，&lt;a href=&quot;../-int/-m-a-x_-v-a-l-u-e#kotlin.Int.Companion%24MAX_VALUE&quot;&gt;int.MAX_VALUE的&lt;/a&gt;，如果它比大 &lt;code&gt;Int.MAX_VALUE&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="234cddb40ea7edc20ba16f302fd45e435a6a6dbf" translate="yes" xml:space="preserve">
          <source>The fractional part, if any, is rounded down. Returns zero if this &lt;code&gt;Float&lt;/code&gt; value is &lt;code&gt;NaN&lt;/code&gt;, &lt;a href=&quot;../-long/-m-i-n_-v-a-l-u-e#kotlin.Long.Companion%24MIN_VALUE&quot;&gt;Long.MIN_VALUE&lt;/a&gt; if it's less than &lt;code&gt;Long.MIN_VALUE&lt;/code&gt;, &lt;a href=&quot;../-long/-m-a-x_-v-a-l-u-e#kotlin.Long.Companion%24MAX_VALUE&quot;&gt;Long.MAX_VALUE&lt;/a&gt; if it's bigger than &lt;code&gt;Long.MAX_VALUE&lt;/code&gt;.</source>
          <target state="translated">小数部分（如果有）四舍五入。返回零，如果这个 &lt;code&gt;Float&lt;/code&gt; 值为 &lt;code&gt;NaN&lt;/code&gt; 的，&lt;a href=&quot;../-long/-m-i-n_-v-a-l-u-e#kotlin.Long.Companion%24MIN_VALUE&quot;&gt;Long.MIN_VALUE&lt;/a&gt;，如果是小于 &lt;code&gt;Long.MIN_VALUE&lt;/code&gt; ，&lt;a href=&quot;../-long/-m-a-x_-v-a-l-u-e#kotlin.Long.Companion%24MAX_VALUE&quot;&gt;Long.MAX_VALUE&lt;/a&gt;如果它比大 &lt;code&gt;Long.MAX_VALUE&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="0a1bb43be34e6fb6de623932b67b670ae0006852" translate="yes" xml:space="preserve">
          <source>The fractional part, if any, is rounded down. Returns zero if this &lt;code&gt;Float&lt;/code&gt; value is negative or &lt;code&gt;NaN&lt;/code&gt;, &lt;a href=&quot;-u-int/-m-a-x_-v-a-l-u-e&quot;&gt;UInt.MAX_VALUE&lt;/a&gt; if it's bigger than &lt;code&gt;UInt.MAX_VALUE&lt;/code&gt;.</source>
          <target state="translated">小数部分（如果有）四舍五入。如果此 &lt;code&gt;Float&lt;/code&gt; 值为负或 &lt;code&gt;NaN&lt;/code&gt; ，则返回零&lt;a href=&quot;-u-int/-m-a-x_-v-a-l-u-e&quot;&gt;；&lt;/a&gt;如果它大于 &lt;code&gt;UInt.MAX_VALUE&lt;/code&gt; ，则返回UInt.MAX_VALUE。</target>
        </trans-unit>
        <trans-unit id="1fdd0d739f0100ce802b95ab4a4c9b2532feeff0" translate="yes" xml:space="preserve">
          <source>The fractional part, if any, is rounded down. Returns zero if this &lt;code&gt;Float&lt;/code&gt; value is negative or &lt;code&gt;NaN&lt;/code&gt;, &lt;a href=&quot;-u-long/-m-a-x_-v-a-l-u-e&quot;&gt;ULong.MAX_VALUE&lt;/a&gt; if it's bigger than &lt;code&gt;ULong.MAX_VALUE&lt;/code&gt;.</source>
          <target state="translated">小数部分（如果有）四舍五入。如果此 &lt;code&gt;Float&lt;/code&gt; 值为负或 &lt;code&gt;NaN&lt;/code&gt; ，则返回零&lt;a href=&quot;-u-long/-m-a-x_-v-a-l-u-e&quot;&gt;；&lt;/a&gt;如果其大于 &lt;code&gt;ULong.MAX_VALUE&lt;/code&gt; ，则返回ULong.MAX_VALUE。</target>
        </trans-unit>
        <trans-unit id="ea6eb6722ce134e1e96c66df47559354876af311" translate="yes" xml:space="preserve">
          <source>The framework that we compiled with Kotlin/Native has helper attributes to make it easier to use with Swift. Let's convert the previous Objective-C example into Swift. As a result, we'll have the following code in &lt;code&gt;main.swift&lt;/code&gt;:</source>
          <target state="translated">我们使用Kotlin / Native编译的框架具有helper属性，可以更轻松地与Swift一起使用。让我们将之前的Objective-C示例转换为Swift。结果，我们将在 &lt;code&gt;main.swift&lt;/code&gt; 中包含以下代码：</target>
        </trans-unit>
        <trans-unit id="229775820ba0ca0053d7b140e68dd9b3ed428ae4" translate="yes" xml:space="preserve">
          <source>The full build script for the sample project can be found &lt;a href=&quot;https://github.com/JetBrains/kotlin-examples/tree/master/gradle/kotlin-dagger/build.gradle&quot;&gt;here&lt;/a&gt;. You can also look at the converted code for &lt;a href=&quot;https://github.com/JetBrains/kotlin-examples/tree/master/gradle/android-dagger&quot;&gt;the Android sample&lt;/a&gt;.</source>
          <target state="translated">示例项目的完整构建脚本可以在&lt;a href=&quot;https://github.com/JetBrains/kotlin-examples/tree/master/gradle/kotlin-dagger/build.gradle&quot;&gt;此处&lt;/a&gt;找到。您还可以查看&lt;a href=&quot;https://github.com/JetBrains/kotlin-examples/tree/master/gradle/android-dagger&quot;&gt;Android示例&lt;/a&gt;的转换后代码。</target>
        </trans-unit>
        <trans-unit id="e62bc4cb51ca1d1cddfe4e1d3d510caa93dee388" translate="yes" xml:space="preserve">
          <source>The full list of arguments that can be used is shown when you run &lt;code&gt;kotlinc -help&lt;/code&gt;.</source>
          <target state="translated">运行 &lt;code&gt;kotlinc -help&lt;/code&gt; 时会显示可以使用的参数的完整列表。</target>
        </trans-unit>
        <trans-unit id="02b69f589be9184eaa6e08d9fb77b12e7b2d6da2" translate="yes" xml:space="preserve">
          <source>The full list of supported use-site targets is:</source>
          <target state="translated">支持的使用网站目标的完整清单是:</target>
        </trans-unit>
        <trans-unit id="58018a7c2f7cccce2f2841705c78d55576a7e56f" translate="yes" xml:space="preserve">
          <source>The full syntactic form of lambda expressions is as follows:</source>
          <target state="translated">lambda表达式的完整语法形式如下。</target>
        </trans-unit>
        <trans-unit id="1347221f9ac10fa3f9465e07c5ca87cc27e8a8e6" translate="yes" xml:space="preserve">
          <source>The full syntax for declaring a property is</source>
          <target state="translated">声明一个属性的完整语法是</target>
        </trans-unit>
        <trans-unit id="905c760b34a0beb7b5d4d319c2f007dd8ebd0fd3" translate="yes" xml:space="preserve">
          <source>The full syntax of a read-only property declaration differs from a mutable one in two ways: it starts with &lt;code&gt;val&lt;/code&gt; instead of &lt;code&gt;var&lt;/code&gt; and does not allow a setter:</source>
          <target state="translated">只读属性声明的完整语法在两个方面不同于可变的声明：它以 &lt;code&gt;val&lt;/code&gt; 而不是 &lt;code&gt;var&lt;/code&gt; 开头，并且不允许使用setter：</target>
        </trans-unit>
        <trans-unit id="776f7d695f882be224aebfaccabd52b1c0591bc5" translate="yes" xml:space="preserve">
          <source>The fully qualified dot-separated name of the class, or &lt;code&gt;null&lt;/code&gt; if the class is local or a class of an anonymous object.</source>
          <target state="translated">类的完全限定的点名分隔 &lt;code&gt;null&lt;/code&gt; 如果该类是本地的或一个匿名对象的类，则为null。</target>
        </trans-unit>
        <trans-unit id="0ee52f844a0963f3db9f0478ccd20b13916c48b9" translate="yes" xml:space="preserve">
          <source>The fully qualified dot-separated name of the class, or &lt;code&gt;null&lt;/code&gt; if the class is local or it is an anonymous object literal.</source>
          <target state="translated">类的完全限定的点名分隔 &lt;code&gt;null&lt;/code&gt; 如果类是本地类，或者它是一个匿名对象文字，则为null。</target>
        </trans-unit>
        <trans-unit id="9a3f03ea2de9956cfc95db69b9cc7f09e01c1b79" translate="yes" xml:space="preserve">
          <source>The fully qualified name of the Kotlin Multiplatform Gradle plugin is &lt;code&gt;org.jetbrains.kotlin.multiplatform&lt;/code&gt;. If you use the Kotlin Gradle DSL, you can apply the plugin with &lt;code&gt;kotlin(&amp;ldquo;multiplatform&amp;rdquo;)&lt;/code&gt;. The plugin versions match the Kotlin release versions. The most recent version is 1.4.10.</source>
          <target state="translated">Kotlin Multiplatform Gradle插件的标准名称是 &lt;code&gt;org.jetbrains.kotlin.multiplatform&lt;/code&gt; 。如果您使用Kotlin Gradle DSL，则可以将插件与 &lt;code&gt;kotlin(&amp;ldquo;multiplatform&amp;rdquo;)&lt;/code&gt; 。插件版本与Kotlin发行版本匹配。最新版本是1.4.10。</target>
        </trans-unit>
        <trans-unit id="f6c5b38e497b6843a07b1a8945d528e3c7606264" translate="yes" xml:space="preserve">
          <source>The function &lt;a href=&quot;-list#kotlin.collections%24List(kotlin.Int,%20kotlin.Function1((kotlin.Int,%20kotlin.collections.List.T)))/init&quot;&gt;init&lt;/a&gt; is called for each list element sequentially starting from the first one. It should return the value for a list element given its index.</source>
          <target state="translated">从第一个列表元素开始依次为每个列表元素调用函数&lt;a href=&quot;-list#kotlin.collections%24List(kotlin.Int,%20kotlin.Function1((kotlin.Int,%20kotlin.collections.List.T)))/init&quot;&gt;init&lt;/a&gt;。它应该返回给定索引的列表元素的值。</target>
        </trans-unit>
        <trans-unit id="7696926a08823163fe79a297a106aabaf3f3d399" translate="yes" xml:space="preserve">
          <source>The function &lt;a href=&quot;-mutable-list#kotlin.collections%24MutableList(kotlin.Int,%20kotlin.Function1((kotlin.Int,%20kotlin.collections.MutableList.T)))/init&quot;&gt;init&lt;/a&gt; is called for each list element sequentially starting from the first one. It should return the value for a list element given its index.</source>
          <target state="translated">从第一个列表元素开始依次为每个列表元素调用函数&lt;a href=&quot;-mutable-list#kotlin.collections%24MutableList(kotlin.Int,%20kotlin.Function1((kotlin.Int,%20kotlin.collections.MutableList.T)))/init&quot;&gt;init&lt;/a&gt;。它应该返回给定索引的列表元素的值。</target>
        </trans-unit>
        <trans-unit id="ed3c35965fc33462a41df8d6c5d69d9f13434071" translate="yes" xml:space="preserve">
          <source>The function &lt;a href=&quot;-u-byte-array#kotlin%24UByteArray(kotlin.Int,%20kotlin.Function1((kotlin.Int,%20kotlin.UByte)))/init&quot;&gt;init&lt;/a&gt; is called for each array element sequentially starting from the first one. It should return the value for an array element given its index.</source>
          <target state="translated">从第一个数组元素开始，依次为每个数组元素调用函数&lt;a href=&quot;-u-byte-array#kotlin%24UByteArray(kotlin.Int,%20kotlin.Function1((kotlin.Int,%20kotlin.UByte)))/init&quot;&gt;init&lt;/a&gt;。它应返回给定索引的数组元素的值。</target>
        </trans-unit>
        <trans-unit id="acfbb507b912e298abe7a785c884c806da178f93" translate="yes" xml:space="preserve">
          <source>The function &lt;a href=&quot;-u-int-array#kotlin%24UIntArray(kotlin.Int,%20kotlin.Function1((kotlin.Int,%20kotlin.UInt)))/init&quot;&gt;init&lt;/a&gt; is called for each array element sequentially starting from the first one. It should return the value for an array element given its index.</source>
          <target state="translated">从第一个数组元素开始，依次为每个数组元素调用函数&lt;a href=&quot;-u-int-array#kotlin%24UIntArray(kotlin.Int,%20kotlin.Function1((kotlin.Int,%20kotlin.UInt)))/init&quot;&gt;init&lt;/a&gt;。它应返回给定索引的数组元素的值。</target>
        </trans-unit>
        <trans-unit id="804f600305f25777086b4066f40ae2670855676b" translate="yes" xml:space="preserve">
          <source>The function &lt;a href=&quot;-u-long-array#kotlin%24ULongArray(kotlin.Int,%20kotlin.Function1((kotlin.Int,%20kotlin.ULong)))/init&quot;&gt;init&lt;/a&gt; is called for each array element sequentially starting from the first one. It should return the value for an array element given its index.</source>
          <target state="translated">从第一个数组元素开始，依次为每个数组元素调用函数&lt;a href=&quot;-u-long-array#kotlin%24ULongArray(kotlin.Int,%20kotlin.Function1((kotlin.Int,%20kotlin.ULong)))/init&quot;&gt;init&lt;/a&gt;。它应返回给定索引的数组元素的值。</target>
        </trans-unit>
        <trans-unit id="98c90b068891a2e0a90f241b535756a6f3e22982" translate="yes" xml:space="preserve">
          <source>The function &lt;a href=&quot;-u-short-array#kotlin%24UShortArray(kotlin.Int,%20kotlin.Function1((kotlin.Int,%20kotlin.UShort)))/init&quot;&gt;init&lt;/a&gt; is called for each array element sequentially starting from the first one. It should return the value for an array element given its index.</source>
          <target state="translated">从第一个数组元素开始，依次为每个数组元素调用函数&lt;a href=&quot;-u-short-array#kotlin%24UShortArray(kotlin.Int,%20kotlin.Function1((kotlin.Int,%20kotlin.UShort)))/init&quot;&gt;init&lt;/a&gt;。它应返回给定索引的数组元素的值。</target>
        </trans-unit>
        <trans-unit id="39a40c87789f813fc496dc5468cc91805583814e" translate="yes" xml:space="preserve">
          <source>The function &lt;code&gt;libnative_symbols&lt;/code&gt; allows us to open the way from the native code to the Kotlin/Native library. This is the entry point we use. The library name is used as a prefix for the function name.</source>
          <target state="translated">函数 &lt;code&gt;libnative_symbols&lt;/code&gt; 允许我们打开从本机代码到Kotlin / Native库的方式。这是我们使用的切入点。库名称用作函数名称的前缀。</target>
        </trans-unit>
        <trans-unit id="ecf68a80d3d421d1a3dac0bf6a7b99795040c5e0" translate="yes" xml:space="preserve">
          <source>The function body is delimited by curly braces - indentation is generally not significant in Kotlin, but you should of course indent your code properly for the benefit of human readers.</source>
          <target state="translated">函数体以大括号为界--在Kotlin中,缩进一般并不重要,但为了人类读者的利益,你当然应该适当缩进你的代码。</target>
        </trans-unit>
        <trans-unit id="892b57cbc7486be03e2291de2837204f537e592b" translate="yes" xml:space="preserve">
          <source>The function does upgrade from read to write lock if needed, but this upgrade is not atomic as such upgrade is not supported by &lt;a href=&quot;http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/locks/ReentrantReadWriteLock.html&quot;&gt;ReentrantReadWriteLock&lt;/a&gt;. In order to do such upgrade this function first releases all read locks held by this thread, then acquires write lock, and after releasing it acquires read locks back again.</source>
          <target state="translated">如果需要，该函数会从读取锁定升级到写入锁定，但是此升级不是原子升级，因为&lt;a href=&quot;http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/locks/ReentrantReadWriteLock.html&quot;&gt;ReentrantReadWriteLock&lt;/a&gt;不支持这种升级。为了进行此类升级，此功能首先释放该线程持有的所有读取锁定，然后获取写入锁定，释放后再返回获取读取锁定。</target>
        </trans-unit>
        <trans-unit id="41eab38f14ba2d1160f8a85b6cc897eb549e21ad" translate="yes" xml:space="preserve">
          <source>The function does upgrade from read to write lock if needed, but this upgrade is not atomic as such upgrade is not supported by &lt;a href=&quot;https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/locks/ReentrantReadWriteLock.html&quot;&gt;ReentrantReadWriteLock&lt;/a&gt;. In order to do such upgrade this function first releases all read locks held by this thread, then acquires write lock, and after releasing it acquires read locks back again.</source>
          <target state="translated">如果需要，该函数会从读取锁定升级到写入锁定，但是此升级不是原子升级，因为&lt;a href=&quot;https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/locks/ReentrantReadWriteLock.html&quot;&gt;ReentrantReadWriteLock&lt;/a&gt;不支持这种升级。为了进行此类升级，此功能首先释放该线程持有的所有读取锁定，然后获取写入锁定，释放后再返回获取读取锁定。</target>
        </trans-unit>
        <trans-unit id="11c5bbd79a2512e469db0fde4da38bfd3abb594c" translate="yes" xml:space="preserve">
          <source>The function init is called for each array element sequentially starting from the first one. It should return the value for an array element given its index.</source>
          <target state="translated">函数init从第一个数组元素开始依次调用。它应该返回一个给定索引的数组元素的值。</target>
        </trans-unit>
        <trans-unit id="47e9d14611b3a1f9114880a2ff853190d9e97c10" translate="yes" xml:space="preserve">
          <source>The function signature remains exactly the same. The only difference is &lt;code&gt;suspend&lt;/code&gt; being added to it. The return type however is the type we want to be returned.</source>
          <target state="translated">功能签名保持完全相同。唯一的区别是将 &lt;code&gt;suspend&lt;/code&gt; 添加到其中。但是，返回类型是我们要返回的类型。</target>
        </trans-unit>
        <trans-unit id="f6772ad37911fb29515e5ecad2f466bed6bdb7cd" translate="yes" xml:space="preserve">
          <source>The function type notation can optionally include names for the function parameters: &lt;code&gt;(x: Int, y: Int) -&amp;gt; Point&lt;/code&gt;. These names can be used for documenting the meaning of the parameters.</source>
          <target state="translated">函数类型表示法可以选择包含函数参数的名称： &lt;code&gt;(x: Int, y: Int) -&amp;gt; Point&lt;/code&gt; 。这些名称可用于记录参数的含义。</target>
        </trans-unit>
        <trans-unit id="5f62a960bb01edb991f086fcecfa3233b3994fce" translate="yes" xml:space="preserve">
          <source>The functions include trigonometric, hyperbolic, exponentiation and power, logarithmic, rounding, sign and absolute value.</source>
          <target state="translated">函数包括三角函数、双曲函数、指数和幂函数、对数函数、四舍五入函数、符号函数和绝对值函数。</target>
        </trans-unit>
        <trans-unit id="332c4fb906dbcda140f018d0de201e8c1ce3d30d" translate="yes" xml:space="preserve">
          <source>The general rule is: when a type parameter &lt;code&gt;T&lt;/code&gt; of a class &lt;code&gt;C&lt;/code&gt; is declared &lt;strong&gt;out&lt;/strong&gt;, it may occur only in &lt;strong&gt;out&lt;/strong&gt;-position in the members of &lt;code&gt;C&lt;/code&gt;, but in return &lt;code&gt;C&amp;lt;Base&amp;gt;&lt;/code&gt; can safely be a supertype of &lt;code&gt;C&amp;lt;Derived&amp;gt;&lt;/code&gt;.</source>
          <target state="translated">一般规则是：当声明类 &lt;code&gt;C&lt;/code&gt; 的类型参数 &lt;code&gt;T&lt;/code&gt; &lt;strong&gt;时&lt;/strong&gt;，它只能出现在 &lt;code&gt;C&lt;/code&gt; 成员的&lt;strong&gt;外部&lt;/strong&gt;位置，但作为回报， &lt;code&gt;C&amp;lt;Base&amp;gt;&lt;/code&gt; 可以安全地成为 &lt;code&gt;C&amp;lt;Derived&amp;gt;&lt;/code&gt; 的超类型。&lt;strong&gt;&lt;/strong&gt;&lt;strong&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="47a803852f9a44b2a9ede00ebab7d2f5f19ab5c5" translate="yes" xml:space="preserve">
          <source>The general rule:</source>
          <target state="translated">一般规则:</target>
        </trans-unit>
        <trans-unit id="39d2229c00faf1c133ef862b873c7364c63bd099" translate="yes" xml:space="preserve">
          <source>The general solution that works both for threads and for coroutines is to use a thread-safe (aka synchronized, linearizable, or atomic) data structure that provides all the necessarily synchronization for the corresponding operations that needs to be performed on a shared state. In the case of a simple counter we can use &lt;code&gt;AtomicInteger&lt;/code&gt; class which has atomic &lt;code&gt;incrementAndGet&lt;/code&gt; operations:</source>
          <target state="translated">适用于线程和协程的通用解决方案是使用线程安全（又名同步，线性化或原子）数据结构，该结构为需要在共享状态下执行的相应操作提供所有必需的同步。在简单计数器的情况下，我们可以使用 &lt;code&gt;AtomicInteger&lt;/code&gt; 类，该类具有原子的 &lt;code&gt;incrementAndGet&lt;/code&gt; 操作：</target>
        </trans-unit>
        <trans-unit id="4e700b89372f9cc694759aa68e2252618aa967c7" translate="yes" xml:space="preserve">
          <source>The general solution that works both for threads and for coroutines is to use a thread-safe (aka synchronized, linearizable, or atomic) data structure that provides all the necessary synchronization for the corresponding operations that needs to be performed on a shared state. In the case of a simple counter we can use &lt;code&gt;AtomicInteger&lt;/code&gt; class which has atomic &lt;code&gt;incrementAndGet&lt;/code&gt; operations:</source>
          <target state="translated">适用于线程和协程的通用解决方案是使用线程安全（又名同步，线性化或原子）数据结构，该结构为共享状态上需要执行的相应操作提供所有必需的同步。对于简单的计数器，我们可以使用 &lt;code&gt;AtomicInteger&lt;/code&gt; 类，该类具有原子的 &lt;code&gt;incrementAndGet&lt;/code&gt; 操作：</target>
        </trans-unit>
        <trans-unit id="fe194a34c4e181902ef2477861ca1a56a0c14e72" translate="yes" xml:space="preserve">
          <source>The generated constructor is synthetic so it can&amp;rsquo;t be directly called from Java or Kotlin, but it can be called using reflection.</source>
          <target state="translated">生成的构造函数是合成的，因此无法直接从Java或Kotlin调用，但可以使用反射调用。</target>
        </trans-unit>
        <trans-unit id="f1c090136ed2d646f1aaf5e8051668e02cbe39d2" translate="yes" xml:space="preserve">
          <source>The generation of TypeScript declaration files is a feature exclusive to the IR compiler, and is in active development. If you run into any problems, please submit them to the Kotlin &lt;a href=&quot;https://youtrack.jetbrains.com/issues?q=%23%7BKJS:%20d.ts%20generation%7D&quot;&gt;issue tracker&lt;/a&gt; or vote for submitted issues that impact you.</source>
          <target state="translated">TypeScript声明文件的生成是IR编译器独有的功能，并且正在积极开发中。如果您遇到任何问题，请将其提交给Kotlin&lt;a href=&quot;https://youtrack.jetbrains.com/issues?q=%23%7BKJS:%20d.ts%20generation%7D&quot;&gt;问题跟踪器，&lt;/a&gt;或对影响您的已提交问题进行投票。</target>
        </trans-unit>
        <trans-unit id="c09ea74ea1b03fd685bbe5f94354a8374db022b3" translate="yes" xml:space="preserve">
          <source>The getter of this property, used to obtain the value of the property.</source>
          <target state="translated">该属性的获取者,用于获取该属性的价值。</target>
        </trans-unit>
        <trans-unit id="5599725590a9016e21ca4310f17eb7b2b01a0483" translate="yes" xml:space="preserve">
          <source>The globs are applied to the header paths relative to the appropriate include path elements, e.g. &lt;code&gt;time.h&lt;/code&gt; or &lt;code&gt;curl/curl.h&lt;/code&gt;. So if the library is usually included with &lt;code&gt;#include &amp;lt;SomeLbrary/Header.h&amp;gt;&lt;/code&gt;, then it would probably be correct to filter headers with</source>
          <target state="translated">相对于适当的包含路径元素（例如 &lt;code&gt;time.h&lt;/code&gt; 或 &lt;code&gt;curl/curl.h&lt;/code&gt; )，将这些小球应用于标头路径。因此，如果该库通常包含在 &lt;code&gt;#include &amp;lt;SomeLbrary/Header.h&amp;gt;&lt;/code&gt; 中，则使用以下方法过滤标头可能是正确的</target>
        </trans-unit>
        <trans-unit id="a57ffec5971f7b3f89d004ca095f66feb86eb296" translate="yes" xml:space="preserve">
          <source>The goal of the tutorial is to demonstrate Kotlin code re-use between Android and iOS. Let's start by manually creating the &lt;code&gt;SharedCode&lt;/code&gt; sub-project in our Gradle project. The source code from the &lt;code&gt;SharedCode&lt;/code&gt; project will be shared between platforms. We will create several new files in our project to implement that.</source>
          <target state="translated">本教程的目的是演示Android和iOS之间Kotlin代码的重用。让我们从在Gradle项目中手动创建 &lt;code&gt;SharedCode&lt;/code&gt; 子项目开始。 &lt;code&gt;SharedCode&lt;/code&gt; 项目的源代码将在平台之间共享。我们将在项目中创建几个新文件来实现该目的。</target>
        </trans-unit>
        <trans-unit id="bae5238fdeabbfa885f39de71e3a42ab3917db13" translate="yes" xml:space="preserve">
          <source>The good thing about common code is that it can be covered with common tests, which later are compiled and executed on &lt;em&gt;every&lt;/em&gt; platform.</source>
          <target state="translated">通用代码的好处是它可以被通用测试所覆盖，这些通用测试随后将在&lt;em&gt;每个&lt;/em&gt;平台上编译和执行。</target>
        </trans-unit>
        <trans-unit id="068a964193217c327091688b8b7de38e4eb4f3e1" translate="yes" xml:space="preserve">
          <source>The header files merely contain function declarations for functionality that is defined at runtime. For instance, we could define a &lt;code&gt;jQuery&lt;/code&gt; function like so</source>
          <target state="translated">头文件仅包含在运行时定义的功能的功能声明。例如，我们可以像这样定义一个 &lt;code&gt;jQuery&lt;/code&gt; 函数</target>
        </trans-unit>
        <trans-unit id="6ce2e166fe215303244aa3044be29e2844cbf2bc" translate="yes" xml:space="preserve">
          <source>The iOS simulator requires a framework compiled for the &lt;code&gt;ios_x64&lt;/code&gt; target, the &lt;code&gt;iOS_sim&lt;/code&gt; folder in our case.</source>
          <target state="translated">iOS模拟器需要为 &lt;code&gt;ios_x64&lt;/code&gt; 目标（在本例中为 &lt;code&gt;iOS_sim&lt;/code&gt; 文件夹）编译的框架。</target>
        </trans-unit>
        <trans-unit id="31859b6cbcfb9892316b62d967e1f5ae2235d5ef" translate="yes" xml:space="preserve">
          <source>The idea behind Rx is to move towards what's called &lt;code&gt;observable streams&lt;/code&gt; where by we now think of data as streams (infinite amounts of data) and these streams can be observed. In practical terms, Rx is simply the &lt;a href=&quot;https://en.wikipedia.org/wiki/Observer_pattern&quot;&gt;Observer Pattern&lt;/a&gt; with a series of extensions which allow us to operate on the data.</source>
          <target state="translated">Rx背后的想法是朝着所谓的 &lt;code&gt;observable streams&lt;/code&gt; 移动，在这里我们现在将数据视为流（无限量的数据），并且可以观察到这些流。实际上，Rx只是&lt;a href=&quot;https://en.wikipedia.org/wiki/Observer_pattern&quot;&gt;观察者模式&lt;/a&gt;，具有一系列扩展，可让我们对数据进行操作。</target>
        </trans-unit>
        <trans-unit id="a752acd40500d4af1aa6897c4527c1276e603455" translate="yes" xml:space="preserve">
          <source>The idea behind futures or promises (there are also other terms these can be referred to depending on language/platform), is that when we make a call, we're promised that at some point it will return with an object called a Promise, which can then be operated on.</source>
          <target state="translated">期货或承诺(根据语言/平台的不同,也有其他的术语)背后的想法是,当我们进行调用时,我们被承诺在某一时刻它将返回一个称为承诺的对象,然后可以对其进行操作。</target>
        </trans-unit>
        <trans-unit id="0ec5a5ec78c5bbba1d9a9593b45aa36ac04ad75c" translate="yes" xml:space="preserve">
          <source>The idea is to make every platform show similar text: &lt;code&gt;Kotlin Rocks on Android&lt;/code&gt; and &lt;code&gt;Kotlin Rocks on iOS&lt;/code&gt;, depending on the platform. We will reuse the way we generate the message. Let's create the file (and missing directories) &lt;code&gt;SharedCode/src/commonMain/kotlin/common.kt&lt;/code&gt; with the following contents under the project root directory</source>
          <target state="translated">我们的想法是让每一个平台显示出类似的文字： &lt;code&gt;Kotlin Rocks on Android&lt;/code&gt; 和 &lt;code&gt;Kotlin Rocks on iOS&lt;/code&gt; ，根据不同的平台上。我们将重用我们生成消息的方式。让我们在项目根目录下 &lt;code&gt;SharedCode/src/commonMain/kotlin/common.kt&lt;/code&gt; 具有以下内容的文件（和缺少目录）SharedCode / src / commonMain / kotlin / common.kt</target>
        </trans-unit>
        <trans-unit id="82fd6cd237e491604315526b684dbfedf391a053" translate="yes" xml:space="preserve">
          <source>The implementation of the &lt;a href=&quot;-mutable-set/index#kotlin.collections.MutableSet&quot;&gt;MutableSet&lt;/a&gt; interface, backed by a &lt;a href=&quot;-hash-map/index#kotlin.collections.HashMap&quot;&gt;HashMap&lt;/a&gt; instance.</source>
          <target state="translated">由&lt;a href=&quot;-hash-map/index#kotlin.collections.HashMap&quot;&gt;HashMap&lt;/a&gt;实例支持的&lt;a href=&quot;-mutable-set/index#kotlin.collections.MutableSet&quot;&gt;MutableSet&lt;/a&gt;接口的实现。</target>
        </trans-unit>
        <trans-unit id="6ba732549bab36d600a33b057cb1445e14d3cdfc" translate="yes" xml:space="preserve">
          <source>The implementation of the &lt;a href=&quot;-mutable-set/index#kotlin.collections.MutableSet&quot;&gt;MutableSet&lt;/a&gt; interface, backed by a &lt;a href=&quot;-linked-hash-map/index#kotlin.collections.LinkedHashMap&quot;&gt;LinkedHashMap&lt;/a&gt; instance.</source>
          <target state="translated">由&lt;a href=&quot;-linked-hash-map/index#kotlin.collections.LinkedHashMap&quot;&gt;LinkedHashMap&lt;/a&gt;实例支持的&lt;a href=&quot;-mutable-set/index#kotlin.collections.MutableSet&quot;&gt;MutableSet&lt;/a&gt;接口的实现。</target>
        </trans-unit>
        <trans-unit id="e80ec37934bbec50821c43bd38cce1238a634038" translate="yes" xml:space="preserve">
          <source>The implementation of the &lt;a href=&quot;../-mutable-set/index#kotlin.collections.MutableSet&quot;&gt;MutableSet&lt;/a&gt; interface, backed by a &lt;a href=&quot;../-hash-map/index#kotlin.collections.HashMap&quot;&gt;HashMap&lt;/a&gt; instance.</source>
          <target state="translated">由&lt;a href=&quot;../-hash-map/index#kotlin.collections.HashMap&quot;&gt;HashMap&lt;/a&gt;实例支持的&lt;a href=&quot;../-mutable-set/index#kotlin.collections.MutableSet&quot;&gt;MutableSet&lt;/a&gt;接口的实现。</target>
        </trans-unit>
        <trans-unit id="9ab2ec2a4f2966a3555f9fce9c9ee7c196c5adc8" translate="yes" xml:space="preserve">
          <source>The implementation of the &lt;a href=&quot;../-mutable-set/index#kotlin.collections.MutableSet&quot;&gt;MutableSet&lt;/a&gt; interface, backed by a &lt;a href=&quot;../-linked-hash-map/index#kotlin.collections.LinkedHashMap&quot;&gt;LinkedHashMap&lt;/a&gt; instance.</source>
          <target state="translated">由&lt;a href=&quot;../-linked-hash-map/index#kotlin.collections.LinkedHashMap&quot;&gt;LinkedHashMap&lt;/a&gt;实例支持的&lt;a href=&quot;../-mutable-set/index#kotlin.collections.MutableSet&quot;&gt;MutableSet&lt;/a&gt;接口的实现。</target>
        </trans-unit>
        <trans-unit id="41ae2cd6b24e4bafa0efb17c582aa2f3dbd61174" translate="yes" xml:space="preserve">
          <source>The implementation of the &lt;a href=&quot;../../kotlin.collections/-mutable-set/index#kotlin.collections.MutableSet&quot;&gt;MutableSet&lt;/a&gt; interface, backed by a &lt;a href=&quot;../../kotlin.collections/-hash-map/index#kotlin.collections.HashMap&quot;&gt;HashMap&lt;/a&gt; instance.</source>
          <target state="translated">由&lt;a href=&quot;../../kotlin.collections/-hash-map/index#kotlin.collections.HashMap&quot;&gt;HashMap&lt;/a&gt;实例支持的&lt;a href=&quot;../../kotlin.collections/-mutable-set/index#kotlin.collections.MutableSet&quot;&gt;MutableSet&lt;/a&gt;接口的实现。</target>
        </trans-unit>
        <trans-unit id="b29deea1bb921913df3a5fadba5cd74a8f4acd5e" translate="yes" xml:space="preserve">
          <source>The implementation of the &lt;a href=&quot;../../kotlin.collections/-mutable-set/index#kotlin.collections.MutableSet&quot;&gt;MutableSet&lt;/a&gt; interface, backed by a &lt;a href=&quot;../../kotlin.collections/-linked-hash-map/index#kotlin.collections.LinkedHashMap&quot;&gt;LinkedHashMap&lt;/a&gt; instance.</source>
          <target state="translated">由&lt;a href=&quot;../../kotlin.collections/-linked-hash-map/index#kotlin.collections.LinkedHashMap&quot;&gt;LinkedHashMap&lt;/a&gt;实例支持的&lt;a href=&quot;../../kotlin.collections/-mutable-set/index#kotlin.collections.MutableSet&quot;&gt;MutableSet&lt;/a&gt;接口的实现。</target>
        </trans-unit>
        <trans-unit id="a6579034caa6bf530c44ba48e1557ccf3e4b94a3" translate="yes" xml:space="preserve">
          <source>The implementation of the &lt;a href=&quot;index#kotlin.collections.MutableSet&quot;&gt;MutableSet&lt;/a&gt; interface, backed by a &lt;a href=&quot;../-hash-map/index#kotlin.collections.HashMap&quot;&gt;HashMap&lt;/a&gt; instance.</source>
          <target state="translated">由&lt;a href=&quot;../-hash-map/index#kotlin.collections.HashMap&quot;&gt;HashMap&lt;/a&gt;实例支持的&lt;a href=&quot;index#kotlin.collections.MutableSet&quot;&gt;MutableSet&lt;/a&gt;接口的实现。</target>
        </trans-unit>
        <trans-unit id="a009a3a444f03e70f059b3c04a3a49cc825d720d" translate="yes" xml:space="preserve">
          <source>The implementation of the &lt;a href=&quot;index#kotlin.collections.MutableSet&quot;&gt;MutableSet&lt;/a&gt; interface, backed by a &lt;a href=&quot;../-linked-hash-map/index#kotlin.collections.LinkedHashMap&quot;&gt;LinkedHashMap&lt;/a&gt; instance.</source>
          <target state="translated">由&lt;a href=&quot;../-linked-hash-map/index#kotlin.collections.LinkedHashMap&quot;&gt;LinkedHashMap&lt;/a&gt;实例支持的&lt;a href=&quot;index#kotlin.collections.MutableSet&quot;&gt;MutableSet&lt;/a&gt;接口的实现。</target>
        </trans-unit>
        <trans-unit id="fa50aaadf0215e23e542746cdfa2658460833341" translate="yes" xml:space="preserve">
          <source>The implementor is required to implement &lt;a href=&quot;../-map/entries#kotlin.collections.Map%24entries&quot;&gt;entries&lt;/a&gt; property, which should return read-only set of map entries.</source>
          <target state="translated">实现者需要实现&lt;a href=&quot;../-map/entries#kotlin.collections.Map%24entries&quot;&gt;entrys&lt;/a&gt;属性，该属性应返回映射条目的只读集。</target>
        </trans-unit>
        <trans-unit id="0d9844010488cdb05175b5fbda28866913c16552" translate="yes" xml:space="preserve">
          <source>The implementor is required to implement &lt;a href=&quot;../-mutable-map/entries#kotlin.collections.MutableMap%24entries&quot;&gt;entries&lt;/a&gt; property, which should return mutable set of map entries, and &lt;a href=&quot;put#kotlin.collections.AbstractMutableMap%24put%28kotlin.collections.AbstractMutableMap.K%2C+kotlin.collections.AbstractMutableMap.V%29&quot;&gt;put&lt;/a&gt; function.</source>
          <target state="translated">需要实现者实现&lt;a href=&quot;../-mutable-map/entries#kotlin.collections.MutableMap%24entries&quot;&gt;entrys&lt;/a&gt;属性，该属性应返回可变的映射条目集，并&lt;a href=&quot;put#kotlin.collections.AbstractMutableMap%24put%28kotlin.collections.AbstractMutableMap.K%2C+kotlin.collections.AbstractMutableMap.V%29&quot;&gt;放置put&lt;/a&gt;函数。</target>
        </trans-unit>
        <trans-unit id="4c2bcd3066d4911e1651a3eb4e73833cb38dc376" translate="yes" xml:space="preserve">
          <source>The implementor is required to implement &lt;a href=&quot;../-mutable-map/entries#kotlin.collections.MutableMap%24entries&quot;&gt;entries&lt;/a&gt; property, which should return mutable set of map entries, and &lt;a href=&quot;put#kotlin.collections.AbstractMutableMap%24put(kotlin.collections.AbstractMutableMap.K,%20kotlin.collections.AbstractMutableMap.V)&quot;&gt;put&lt;/a&gt; function.</source>
          <target state="translated">要求实现者实现&lt;a href=&quot;../-mutable-map/entries#kotlin.collections.MutableMap%24entries&quot;&gt;entrys&lt;/a&gt;属性，该属性应返回可变的map条目集和&lt;a href=&quot;put#kotlin.collections.AbstractMutableMap%24put(kotlin.collections.AbstractMutableMap.K,%20kotlin.collections.AbstractMutableMap.V)&quot;&gt;put&lt;/a&gt;函数。</target>
        </trans-unit>
        <trans-unit id="b072b8461d749216f126589f253d2136dcee5a49" translate="yes" xml:space="preserve">
          <source>The implementor is required to implement &lt;a href=&quot;entries&quot;&gt;entries&lt;/a&gt; property, which should return mutable set of map entries, and &lt;a href=&quot;put#kotlin.collections.AbstractMutableMap%24put%28kotlin.collections.AbstractMutableMap.K%2C+kotlin.collections.AbstractMutableMap.V%29&quot;&gt;put&lt;/a&gt; function.</source>
          <target state="translated">需要实现者实现&lt;a href=&quot;entries&quot;&gt;entrys&lt;/a&gt;属性，该属性应返回可变的映射条目集，并&lt;a href=&quot;put#kotlin.collections.AbstractMutableMap%24put%28kotlin.collections.AbstractMutableMap.K%2C+kotlin.collections.AbstractMutableMap.V%29&quot;&gt;放置put&lt;/a&gt;函数。</target>
        </trans-unit>
        <trans-unit id="de6f180abcaad3c2e2c4cd19c5f847e641f85c21" translate="yes" xml:space="preserve">
          <source>The implementor is required to implement &lt;a href=&quot;entries&quot;&gt;entries&lt;/a&gt; property, which should return mutable set of map entries, and &lt;a href=&quot;put#kotlin.collections.AbstractMutableMap%24put(kotlin.collections.AbstractMutableMap.K,%20kotlin.collections.AbstractMutableMap.V)&quot;&gt;put&lt;/a&gt; function.</source>
          <target state="translated">要求实现者实现&lt;a href=&quot;entries&quot;&gt;entrys&lt;/a&gt;属性，该属性应返回可变的map条目集和&lt;a href=&quot;put#kotlin.collections.AbstractMutableMap%24put(kotlin.collections.AbstractMutableMap.K,%20kotlin.collections.AbstractMutableMap.V)&quot;&gt;put&lt;/a&gt;函数。</target>
        </trans-unit>
        <trans-unit id="b4d84ada0a069eb9728359000c31d5443cb7fe8c" translate="yes" xml:space="preserve">
          <source>The in-place sorting functions have similar names to the functions that apply to read-only lists, but without the &lt;code&gt;ed/d&lt;/code&gt; suffix:</source>
          <target state="translated">就地排序功能与应用于只读列表的功能具有相似的名称，但没有 &lt;code&gt;ed/d&lt;/code&gt; 后缀：</target>
        </trans-unit>
        <trans-unit id="ad88781015ab91e944a6d24ed6740d21e1a613c0" translate="yes" xml:space="preserve">
          <source>The indentation in front of the accessors is due to convention; like elsewhere in Kotlin, it has no syntactic significance. The compiler can tell which accessors belong to which properties because the only legal place for an accessor is immediately after the property declaration (and there can be at most one getter and one setter) - so you can't split the property declaration and the accessor declarations. However, the order of the accessors doesn't matter.</source>
          <target state="translated">访问器前面的缩进是由于惯例,就像 Kotlin 的其他地方一样,它没有语法意义。编译器可以知道哪些访问器属于哪些属性,因为访问器的唯一合法位置是紧接在属性声明之后(最多只能有一个getter和一个setter)--所以你不能把属性声明和访问器声明分开。然而,访问器的顺序并不重要。</target>
        </trans-unit>
        <trans-unit id="a438c4c204700f052b62784ad094f3d42692c3e5" translate="yes" xml:space="preserve">
          <source>The inheritors are used in &lt;a href=&quot;-contract-builder/index&quot;&gt;ContractBuilder&lt;/a&gt; to describe the contract of a function.</source>
          <target state="translated">在&lt;a href=&quot;-contract-builder/index&quot;&gt;ContractBuilder中&lt;/a&gt;，继承程序用于描述函数的约定。</target>
        </trans-unit>
        <trans-unit id="927c0a69730a98787dc84c53359365aef174d24b" translate="yes" xml:space="preserve">
          <source>The initializer, getter and setter are optional. Property type is optional if it can be inferred from the initializer (or from the getter return type, as shown below).</source>
          <target state="translated">初始化器、getter和setter是可选的。如果可以从初始化器中推断出属性类型(或从getter返回类型中推断出属性类型,如下图所示),则属性类型是可选的。</target>
        </trans-unit>
        <trans-unit id="df4b9318a341c1f296940189b67832418073c297" translate="yes" xml:space="preserve">
          <source>The inserted characters go in same order as in the &lt;a href=&quot;insert#kotlin.text.StringBuilder%24insert(kotlin.Int,%20kotlin.CharArray)/value&quot;&gt;value&lt;/a&gt; character array, starting at &lt;a href=&quot;insert#kotlin.text.StringBuilder%24insert(kotlin.Int,%20kotlin.CharArray)/index&quot;&gt;index&lt;/a&gt;.</source>
          <target state="translated">插入的字符与&lt;a href=&quot;insert#kotlin.text.StringBuilder%24insert(kotlin.Int,%20kotlin.CharArray)/value&quot;&gt;值&lt;/a&gt;字符数组中的顺序相同，从&lt;a href=&quot;insert#kotlin.text.StringBuilder%24insert(kotlin.Int,%20kotlin.CharArray)/index&quot;&gt;index&lt;/a&gt;开始。</target>
        </trans-unit>
        <trans-unit id="86553ac24df6523f576ebfc95d6b9462d047690c" translate="yes" xml:space="preserve">
          <source>The inserted characters go in same order as in the &lt;a href=&quot;insert-range#kotlin.text%24insertRange(java.lang.StringBuilder,%20kotlin.Int,%20kotlin.CharArray,%20kotlin.Int,%20kotlin.Int)/value&quot;&gt;value&lt;/a&gt; array, starting at &lt;a href=&quot;insert-range#kotlin.text%24insertRange(java.lang.StringBuilder,%20kotlin.Int,%20kotlin.CharArray,%20kotlin.Int,%20kotlin.Int)/index&quot;&gt;index&lt;/a&gt;.</source>
          <target state="translated">插入的字符与&lt;a href=&quot;insert-range#kotlin.text%24insertRange(java.lang.StringBuilder,%20kotlin.Int,%20kotlin.CharArray,%20kotlin.Int,%20kotlin.Int)/value&quot;&gt;value&lt;/a&gt;数组中的顺序相同，从&lt;a href=&quot;insert-range#kotlin.text%24insertRange(java.lang.StringBuilder,%20kotlin.Int,%20kotlin.CharArray,%20kotlin.Int,%20kotlin.Int)/index&quot;&gt;index&lt;/a&gt;开始。</target>
        </trans-unit>
        <trans-unit id="b4ed7f7987791deb8f62b6e71d102280a076828a" translate="yes" xml:space="preserve">
          <source>The inserted characters go in same order as in the &lt;a href=&quot;insert-range#kotlin.text%24insertRange(kotlin.text.StringBuilder,%20kotlin.Int,%20kotlin.CharArray,%20kotlin.Int,%20kotlin.Int)/value&quot;&gt;value&lt;/a&gt; array, starting at &lt;a href=&quot;insert-range#kotlin.text%24insertRange(kotlin.text.StringBuilder,%20kotlin.Int,%20kotlin.CharArray,%20kotlin.Int,%20kotlin.Int)/index&quot;&gt;index&lt;/a&gt;.</source>
          <target state="translated">插入的字符与&lt;a href=&quot;insert-range#kotlin.text%24insertRange(kotlin.text.StringBuilder,%20kotlin.Int,%20kotlin.CharArray,%20kotlin.Int,%20kotlin.Int)/value&quot;&gt;value&lt;/a&gt;数组中的顺序相同，从&lt;a href=&quot;insert-range#kotlin.text%24insertRange(kotlin.text.StringBuilder,%20kotlin.Int,%20kotlin.CharArray,%20kotlin.Int,%20kotlin.Int)/index&quot;&gt;index&lt;/a&gt;开始。</target>
        </trans-unit>
        <trans-unit id="9543c40c6bce9ac3cd3001f546e3c43cece51c22" translate="yes" xml:space="preserve">
          <source>The inserted characters go in same order as in the &lt;a href=&quot;insert-range#kotlin.text.StringBuilder%24insertRange(kotlin.Int,%20kotlin.CharArray,%20kotlin.Int,%20kotlin.Int)/value&quot;&gt;value&lt;/a&gt; array, starting at &lt;a href=&quot;insert-range#kotlin.text.StringBuilder%24insertRange(kotlin.Int,%20kotlin.CharArray,%20kotlin.Int,%20kotlin.Int)/index&quot;&gt;index&lt;/a&gt;.</source>
          <target state="translated">插入的字符与&lt;a href=&quot;insert-range#kotlin.text.StringBuilder%24insertRange(kotlin.Int,%20kotlin.CharArray,%20kotlin.Int,%20kotlin.Int)/value&quot;&gt;value&lt;/a&gt;数组中的顺序相同，从&lt;a href=&quot;insert-range#kotlin.text.StringBuilder%24insertRange(kotlin.Int,%20kotlin.CharArray,%20kotlin.Int,%20kotlin.Int)/index&quot;&gt;index&lt;/a&gt;开始。</target>
        </trans-unit>
        <trans-unit id="e0709a2469b79f1b5658bea591319990543a447b" translate="yes" xml:space="preserve">
          <source>The inserted characters go in the same order as in the &lt;a href=&quot;insert#kotlin.text%24insert(kotlin.text.StringBuilder,%20kotlin.Int,%20kotlin.CharSequence?,%20kotlin.Int,%20kotlin.Int)/csq&quot;&gt;csq&lt;/a&gt; character sequence, starting at &lt;a href=&quot;insert#kotlin.text%24insert(kotlin.text.StringBuilder,%20kotlin.Int,%20kotlin.CharSequence?,%20kotlin.Int,%20kotlin.Int)/index&quot;&gt;index&lt;/a&gt;.</source>
          <target state="translated">插入的字符与&lt;a href=&quot;insert#kotlin.text%24insert(kotlin.text.StringBuilder,%20kotlin.Int,%20kotlin.CharSequence?,%20kotlin.Int,%20kotlin.Int)/csq&quot;&gt;csq&lt;/a&gt;字符序列的顺序相同，从&lt;a href=&quot;insert#kotlin.text%24insert(kotlin.text.StringBuilder,%20kotlin.Int,%20kotlin.CharSequence?,%20kotlin.Int,%20kotlin.Int)/index&quot;&gt;index&lt;/a&gt;开始。</target>
        </trans-unit>
        <trans-unit id="1d6b868449af039ece3f79e19a7f1bdef4bb1a01" translate="yes" xml:space="preserve">
          <source>The inserted characters go in the same order as in the &lt;a href=&quot;insert#kotlin.text.StringBuilder%24insert(kotlin.Int,%20kotlin.CharSequence?)/value&quot;&gt;value&lt;/a&gt; character sequence, starting at &lt;a href=&quot;insert#kotlin.text.StringBuilder%24insert(kotlin.Int,%20kotlin.CharSequence?)/index&quot;&gt;index&lt;/a&gt;.</source>
          <target state="translated">插入的字符与&lt;a href=&quot;insert#kotlin.text.StringBuilder%24insert(kotlin.Int,%20kotlin.CharSequence?)/value&quot;&gt;值&lt;/a&gt;字符序列的顺序相同，从&lt;a href=&quot;insert#kotlin.text.StringBuilder%24insert(kotlin.Int,%20kotlin.CharSequence?)/index&quot;&gt;index&lt;/a&gt;开始。</target>
        </trans-unit>
        <trans-unit id="3500adb125fdc73a499caef4e20aeda3f4dc5da2" translate="yes" xml:space="preserve">
          <source>The inserted characters go in the same order as in the &lt;a href=&quot;insert-range#kotlin.text%24insertRange(java.lang.StringBuilder,%20kotlin.Int,%20kotlin.CharSequence,%20kotlin.Int,%20kotlin.Int)/value&quot;&gt;value&lt;/a&gt; character sequence, starting at &lt;a href=&quot;insert-range#kotlin.text%24insertRange(java.lang.StringBuilder,%20kotlin.Int,%20kotlin.CharSequence,%20kotlin.Int,%20kotlin.Int)/index&quot;&gt;index&lt;/a&gt;.</source>
          <target state="translated">插入的字符与&lt;a href=&quot;insert-range#kotlin.text%24insertRange(java.lang.StringBuilder,%20kotlin.Int,%20kotlin.CharSequence,%20kotlin.Int,%20kotlin.Int)/value&quot;&gt;值&lt;/a&gt;字符序列的顺序相同，从&lt;a href=&quot;insert-range#kotlin.text%24insertRange(java.lang.StringBuilder,%20kotlin.Int,%20kotlin.CharSequence,%20kotlin.Int,%20kotlin.Int)/index&quot;&gt;index&lt;/a&gt;开始。</target>
        </trans-unit>
        <trans-unit id="ad31007689802215e06527f3c3a293fa179e4c9d" translate="yes" xml:space="preserve">
          <source>The inserted characters go in the same order as in the &lt;a href=&quot;insert-range#kotlin.text%24insertRange(kotlin.text.StringBuilder,%20kotlin.Int,%20kotlin.CharSequence,%20kotlin.Int,%20kotlin.Int)/value&quot;&gt;value&lt;/a&gt; character sequence, starting at &lt;a href=&quot;insert-range#kotlin.text%24insertRange(kotlin.text.StringBuilder,%20kotlin.Int,%20kotlin.CharSequence,%20kotlin.Int,%20kotlin.Int)/index&quot;&gt;index&lt;/a&gt;.</source>
          <target state="translated">插入的字符与&lt;a href=&quot;insert-range#kotlin.text%24insertRange(kotlin.text.StringBuilder,%20kotlin.Int,%20kotlin.CharSequence,%20kotlin.Int,%20kotlin.Int)/value&quot;&gt;值&lt;/a&gt;字符序列的顺序相同，从&lt;a href=&quot;insert-range#kotlin.text%24insertRange(kotlin.text.StringBuilder,%20kotlin.Int,%20kotlin.CharSequence,%20kotlin.Int,%20kotlin.Int)/index&quot;&gt;index&lt;/a&gt;开始。</target>
        </trans-unit>
        <trans-unit id="c2d836a76478983c6ee8310fe8b3dad06eee5f72" translate="yes" xml:space="preserve">
          <source>The inserted characters go in the same order as in the &lt;a href=&quot;insert-range#kotlin.text.StringBuilder%24insertRange(kotlin.Int,%20kotlin.CharSequence,%20kotlin.Int,%20kotlin.Int)/value&quot;&gt;value&lt;/a&gt; character sequence, starting at &lt;a href=&quot;insert-range#kotlin.text.StringBuilder%24insertRange(kotlin.Int,%20kotlin.CharSequence,%20kotlin.Int,%20kotlin.Int)/index&quot;&gt;index&lt;/a&gt;.</source>
          <target state="translated">插入的字符与&lt;a href=&quot;insert-range#kotlin.text.StringBuilder%24insertRange(kotlin.Int,%20kotlin.CharSequence,%20kotlin.Int,%20kotlin.Int)/value&quot;&gt;值&lt;/a&gt;字符序列的顺序相同，从&lt;a href=&quot;insert-range#kotlin.text.StringBuilder%24insertRange(kotlin.Int,%20kotlin.CharSequence,%20kotlin.Int,%20kotlin.Int)/index&quot;&gt;index&lt;/a&gt;开始。</target>
        </trans-unit>
        <trans-unit id="73ab217fa7b8d452fbb508f24860b5983aed819b" translate="yes" xml:space="preserve">
          <source>The insertion order is preserved by maintaining a doubly-linked list of all of its entries.</source>
          <target state="translated">通过对其所有条目保持一个双链接的列表来保留插入顺序。</target>
        </trans-unit>
        <trans-unit id="d2ac540734122ad9d9f148278a049a69e4049649" translate="yes" xml:space="preserve">
          <source>The instance of the object declaration, or &lt;code&gt;null&lt;/code&gt; if this class is not an object declaration.</source>
          <target state="translated">对象声明的实例；如果此类不是对象声明，则为 &lt;code&gt;null&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="dc732f6df37635d53aa48535fdea446c3301e524" translate="yes" xml:space="preserve">
          <source>The instruction &lt;code&gt;binaries.executable()&lt;/code&gt; explicitly instructs the Kotlin compiler to emit executable &lt;code&gt;.js&lt;/code&gt; files. This is the default behavior when using the current Kotlin/JS compiler, but the instruction is explicitly required if you are working with the &lt;a href=&quot;js-ir-compiler&quot;&gt;Kotlin/JS IR compiler&lt;/a&gt;, or have set &lt;code&gt;kotlin.js.generate.executable.default=false&lt;/code&gt; in your &lt;code&gt;gradle.properties&lt;/code&gt;. In those cases, omitting &lt;code&gt;binaries.executable()&lt;/code&gt; will cause the compiler to only generate Kotlin-internal library files, which can be used from other projects, but not run on their own. (This is typically faster than creating executable files, and can be a possible optimization when dealing with non-leaf modules of your project.)</source>
          <target state="translated">指令 &lt;code&gt;binaries.executable()&lt;/code&gt; 明确指示Kotlin编译器发出可执行的 &lt;code&gt;.js&lt;/code&gt; 文件。这是使用当前Kotlin / JS编译器时的默认行为，但是如果您使用&lt;a href=&quot;js-ir-compiler&quot;&gt;Kotlin / JS IR编译器&lt;/a&gt;，或者已在 &lt;code&gt;kotlin.js.generate.executable.default=false&lt;/code&gt; 设置kotlin.js.generate.executable.default = false，则该指令是明确要求的 &lt;code&gt;gradle.properties&lt;/code&gt; 。在这些情况下，省略 &lt;code&gt;binaries.executable()&lt;/code&gt; 将导致编译器仅生成Kotlin内部库文件，该文件可从其他项目中使用，但不能单独运行。 （这通常比创建可执行文件快，并且在处理项目的非叶子模块时可能是一种优化）。</target>
        </trans-unit>
        <trans-unit id="4e1a88c47519272f4d061661530035978afeff04" translate="yes" xml:space="preserve">
          <source>The interoperability tool analyses C headers and produces a &quot;natural&quot; mapping of the types, functions, and constants into the Kotlin world. The generated stubs can be imported into an IDE for the purpose of code completion and navigation.</source>
          <target state="translated">互操作性工具分析C头文件,并生成类型、函数和常量到Kotlin世界的 &quot;自然 &quot;映射。生成的存根可以导入到IDE中,用于完成代码和导航。</target>
        </trans-unit>
        <trans-unit id="3122fc76a98056291b979307819d62c01b024074" translate="yes" xml:space="preserve">
          <source>The introduction of the hierarchical project structure in multiplatform projects resulted in a couple of changes to the names of some Gradle tasks:</source>
          <target state="translated">在多平台项目中引入分级项目结构,导致一些Gradle任务的名称发生了一些变化。</target>
        </trans-unit>
        <trans-unit id="78163206f8e53ce50e1eec86f00b2814cc4b80d9" translate="yes" xml:space="preserve">
          <source>The kapt annotation processing tasks are &lt;a href=&quot;https://guides.gradle.org/using-build-cache/&quot;&gt;cached in Gradle&lt;/a&gt; by default. However, annotation processors run arbitrary code that may not necessarily transform the task inputs into the outputs, might access and modify the files that are not tracked by Gradle etc. If the annotation processors used in the build cannot be properly cached, it is possible to disable caching for kapt entirely by adding the following lines to the build script, in order to avoid false-positive cache hits for the kapt tasks:</source>
          <target state="translated">默认情况下，kapt批注处理任务&lt;a href=&quot;https://guides.gradle.org/using-build-cache/&quot;&gt;缓存在Gradle中&lt;/a&gt;。但是，注释处理器运行任意代码，这些代码不一定会将任务输入转换为输出，可能会访问和修改Gradle等未跟踪的文件。如果无法正确缓存构建中使用的注释处理器，则可以通过将以下行添加到构建脚本中来完全禁用对kapt的缓存，以避免对kapt任务造成假阳性的缓存命中：</target>
        </trans-unit>
        <trans-unit id="0c34ac28f0b47dc2a95569e5a72bbe09867d14d5" translate="yes" xml:space="preserve">
          <source>The kapt annotation processing tasks are not &lt;a href=&quot;https://guides.gradle.org/using-build-cache/&quot;&gt;cached in Gradle&lt;/a&gt; by default. Annotation processors run arbitrary code that may not necessarily transform the task inputs into the outputs, might access and modify the files that are not tracked by Gradle etc. To enable caching for kapt anyway, add the following lines to the build script:</source>
          <target state="translated">默认情况下，kapt注释处理任务不会&lt;a href=&quot;https://guides.gradle.org/using-build-cache/&quot;&gt;缓存在Gradle中&lt;/a&gt;。注释处理器运行任意代码，这些代码不一定会将任务输入转换为输出，可能会访问和修改Gradle等未跟踪的文件。无论如何要为kapt启用缓存，请在构建脚本中添加以下几行：</target>
        </trans-unit>
        <trans-unit id="519a57223d8acbf5b242fd0d7e39dc2141cafbbd" translate="yes" xml:space="preserve">
          <source>The key advantage of &lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines.flow/on-completion.html&quot;&gt;onCompletion&lt;/a&gt; is a nullable &lt;code&gt;Throwable&lt;/code&gt; parameter of the lambda that can be used to determine whether the flow collection was completed normally or exceptionally. In the following example the &lt;code&gt;simple&lt;/code&gt; flow throws an exception after emitting the number 1:</source>
          <target state="translated">&lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines.flow/on-completion.html&quot;&gt;onCompletion&lt;/a&gt;的主要优点是lambda的可为空的 &lt;code&gt;Throwable&lt;/code&gt; 参数，可用于确定流收集是正常完成还是异常完成。在以下示例中， &lt;code&gt;simple&lt;/code&gt; 流程在发出数字1之后引发异常：</target>
        </trans-unit>
        <trans-unit id="0d265db62daefe24281a53daa642fa0260c64977" translate="yes" xml:space="preserve">
          <source>The key benefit of using sealed classes comes into play when you use them in a &lt;a href=&quot;control-flow#when-expression&quot;&gt;&lt;code&gt;when&lt;/code&gt; expression&lt;/a&gt;. If it's possible to verify that the statement covers all cases, you don't need to add an &lt;code&gt;else&lt;/code&gt; clause to the statement. However, this works only if you use &lt;code&gt;when&lt;/code&gt; as an expression (using the result) and not as a statement.</source>
          <target state="translated">当在&lt;a href=&quot;control-flow#when-expression&quot;&gt; &lt;code&gt;when&lt;/code&gt; 表达式&lt;/a&gt;中使用密封类时，使用密封类的主要好处就发挥了作用。如果可以验证该语句是否涵盖所有情况，则无需在该语句中添加 &lt;code&gt;else&lt;/code&gt; 子句。但是，仅当您将 &lt;code&gt;when&lt;/code&gt; 用作表达式（使用结果）而不用作语句时，此方法才有效。</target>
        </trans-unit>
        <trans-unit id="60878e19d1626a7113513294279d9306ebdfd3af" translate="yes" xml:space="preserve">
          <source>The key differences to the old model are:</source>
          <target state="translated">与老款的主要区别是:</target>
        </trans-unit>
        <trans-unit id="ba83743a7b4886ce5d922ef71ed4bc654a53eba4" translate="yes" xml:space="preserve">
          <source>The key for each element is provided by the &lt;a href=&quot;-grouping/key-of&quot;&gt;Grouping.keyOf&lt;/a&gt; function.</source>
          <target state="translated">每个元素的键由&lt;a href=&quot;-grouping/key-of&quot;&gt;Grouping.keyOf&lt;/a&gt;函数提供。</target>
        </trans-unit>
        <trans-unit id="c7780b4923a988af8ea0601856ae08a944187203" translate="yes" xml:space="preserve">
          <source>The key new feature in Kotlin 1.1 is &lt;em&gt;coroutines&lt;/em&gt;, bringing the support of &lt;code&gt;async&lt;/code&gt;/&lt;code&gt;await&lt;/code&gt;, &lt;code&gt;yield&lt;/code&gt; and similar programming patterns. The key feature of Kotlin's design is that the implementation of coroutine execution is part of the libraries, not the language, so you aren't bound to any specific programming paradigm or concurrency library.</source>
          <target state="translated">Kotlin 1.1中的关键新功能是&lt;em&gt;协程&lt;/em&gt;，带来了对 &lt;code&gt;async&lt;/code&gt; / &lt;code&gt;await&lt;/code&gt; ， &lt;code&gt;yield&lt;/code&gt; 和类似编程模式的支持。Kotlin设计的关键特征是协程执行的实现是库的一部分，而不是语言的一部分，因此您不必受限于任何特定的编程范例或并发库。</target>
        </trans-unit>
        <trans-unit id="255ddce16ff2d3386fde18744e92b0919a0c3dcd" translate="yes" xml:space="preserve">
          <source>The key that defines &lt;em&gt;the&lt;/em&gt; context interceptor.</source>
          <target state="translated">定义键&lt;em&gt;的&lt;/em&gt;情况下拦截。</target>
        </trans-unit>
        <trans-unit id="f78236335bddfda90f254cf18135e3e283c652aa" translate="yes" xml:space="preserve">
          <source>The key to understanding why this trick works is rather simple: if you can only &lt;strong&gt;take&lt;/strong&gt; items from a collection, then using a collection of &lt;code&gt;String&lt;/code&gt;s and reading &lt;code&gt;Object&lt;/code&gt;s from it is fine. Conversely, if you can only &lt;em&gt;put&lt;/em&gt; items into the collection, it's OK to take a collection of &lt;code&gt;Object&lt;/code&gt;s and put &lt;code&gt;String&lt;/code&gt;s into it: in Java we have &lt;code&gt;List&amp;lt;? super String&amp;gt;&lt;/code&gt; a &lt;strong&gt;supertype&lt;/strong&gt; of &lt;code&gt;List&amp;lt;Object&amp;gt;&lt;/code&gt;.</source>
          <target state="translated">理解此技巧为何有效的关键非常简单：如果您只能从一个集合中&lt;strong&gt;获取&lt;/strong&gt;项目，则可以使用 &lt;code&gt;String&lt;/code&gt; 的集合并从中读取 &lt;code&gt;Object&lt;/code&gt; 。相反，如果您只能&lt;em&gt;将&lt;/em&gt;项目放入集合，则可以将 &lt;code&gt;Object&lt;/code&gt; 的集合放入 &lt;code&gt;String&lt;/code&gt; ：在Java中，我们具有 &lt;code&gt;List&amp;lt;? super String&amp;gt;&lt;/code&gt; 一个&lt;strong&gt;超类型&lt;/strong&gt;的 &lt;code&gt;List&amp;lt;Object&amp;gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="e72d25f147746520f953f90cd2e72b99d7c03c99" translate="yes" xml:space="preserve">
          <source>The kind of JS module generated by the compiler</source>
          <target state="translated">编译器生成的JS模块的种类。</target>
        </trans-unit>
        <trans-unit id="61cddbaa600cb4e80791b04fea34cfac2b911d59" translate="yes" xml:space="preserve">
          <source>The kind of JS module generated by the compiler:</source>
          <target state="translated">编译器生成的JS模块的种类。</target>
        </trans-unit>
        <trans-unit id="d05fefa144a9bfaff0069cb495aef5fbbe9dc415" translate="yes" xml:space="preserve">
          <source>The language settings are checked for consistency between source sets depending on each other. Namely, if &lt;code&gt;foo&lt;/code&gt; depends on &lt;code&gt;bar&lt;/code&gt;:</source>
          <target state="translated">检查语言设置是否相互依赖，以确保源集之间的一致性。即，如果 &lt;code&gt;foo&lt;/code&gt; 取决于 &lt;code&gt;bar&lt;/code&gt; ：</target>
        </trans-unit>
        <trans-unit id="7ae80735e57bee13b52032eac31a1a1787272a8f" translate="yes" xml:space="preserve">
          <source>The language settings for a source set can be specified as follows:</source>
          <target state="translated">源集的语言设置可指定如下。</target>
        </trans-unit>
        <trans-unit id="fbaea25f697b924abdcdee8361823761cf7fe6eb" translate="yes" xml:space="preserve">
          <source>The language used to document Kotlin code (the equivalent of Java's JavaDoc) is called &lt;strong&gt;KDoc&lt;/strong&gt;. In its essence, KDoc combines JavaDoc's syntax for block tags (extended to support Kotlin's specific constructs) and Markdown for inline markup.</source>
          <target state="translated">用于记录Kotlin代码的语言（与Java的JavaDoc等效）称为&lt;strong&gt;KDoc&lt;/strong&gt;。本质上，KDoc结合了JavaDoc的块标记语法（扩展以支持Kotlin的特定构造）和Markdown的内联标记。</target>
        </trans-unit>
        <trans-unit id="6bd524ff724eae23548f42d94d576b7a82d79f24" translate="yes" xml:space="preserve">
          <source>The last element in the progression.</source>
          <target state="translated">进展中的最后一个元素。</target>
        </trans-unit>
        <trans-unit id="5ac343906b9635efc6bc3ea707e0886b7e34f40a" translate="yes" xml:space="preserve">
          <source>The last element of the progression is calculated to find the maximum value not greater than the end value for a positive step or the minimum value not less than the end value for a negative step such that &lt;code&gt;(last - first) % step == 0&lt;/code&gt;.</source>
          <target state="translated">计算该级数的最后一个元素，以找到正步长的最大值不大于最终值或负步长的最小值不小于最终值，以使 &lt;code&gt;(last - first) % step == 0&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="01b3b5a6efe68e4716a891433d6bbbed0351ca8d" translate="yes" xml:space="preserve">
          <source>The last line is invoking the function itself and passing as argument &lt;code&gt;kotlin&lt;/code&gt;, which refers to the standard library. This can be obtained in one of two ways:</source>
          <target state="translated">最后一行是调用函数本身并作为参数 &lt;code&gt;kotlin&lt;/code&gt; 传递，该参数引用标准库。可以通过以下两种方式之一来获得：</target>
        </trans-unit>
        <trans-unit id="538d53f2bc70104b650857f7bb5ca32765c9300b" translate="yes" xml:space="preserve">
          <source>The last list in the resulting list may have less elements than the given &lt;a href=&quot;chunked#kotlin.collections%24chunked%28kotlin.collections.Iterable%28%28kotlin.collections.chunked.T%29%29%2C+kotlin.Int%29%2Fsize&quot;&gt;size&lt;/a&gt;.</source>
          <target state="translated">结果列表中的最后一个列表的元素数可能少于给定的&lt;a href=&quot;chunked#kotlin.collections%24chunked%28kotlin.collections.Iterable%28%28kotlin.collections.chunked.T%29%29%2C+kotlin.Int%29%2Fsize&quot;&gt;大小&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="ff4c16017113383cfa2553bc4b666ff8af31f35a" translate="yes" xml:space="preserve">
          <source>The last list in the resulting list may have less elements than the given &lt;a href=&quot;chunked#kotlin.collections%24chunked(kotlin.collections.Iterable((kotlin.collections.chunked.T)),%20kotlin.Int)/size&quot;&gt;size&lt;/a&gt;.</source>
          <target state="translated">结果列表中的最后一个列表可能包含的元素少于给定&lt;a href=&quot;chunked#kotlin.collections%24chunked(kotlin.collections.Iterable((kotlin.collections.chunked.T)),%20kotlin.Int)/size&quot;&gt;大小的&lt;/a&gt;元素。</target>
        </trans-unit>
        <trans-unit id="df81eba7c4b794145b48baa6539e2f2979a8d58f" translate="yes" xml:space="preserve">
          <source>The last list in the resulting sequence may have less elements than the given &lt;a href=&quot;chunked#kotlin.sequences%24chunked%28kotlin.sequences.Sequence%28%28kotlin.sequences.chunked.T%29%29%2C+kotlin.Int%29%2Fsize&quot;&gt;size&lt;/a&gt;.</source>
          <target state="translated">结果序列中的最后一个列表可能包含的元素少于给定&lt;a href=&quot;chunked#kotlin.sequences%24chunked%28kotlin.sequences.Sequence%28%28kotlin.sequences.chunked.T%29%29%2C+kotlin.Int%29%2Fsize&quot;&gt;大小的&lt;/a&gt;元素。</target>
        </trans-unit>
        <trans-unit id="e4ef2ba5891ebf7ffa1b88944ac0282efb5fecf2" translate="yes" xml:space="preserve">
          <source>The last list in the resulting sequence may have less elements than the given &lt;a href=&quot;chunked#kotlin.sequences%24chunked(kotlin.sequences.Sequence((kotlin.sequences.chunked.T)),%20kotlin.Int)/size&quot;&gt;size&lt;/a&gt;.</source>
          <target state="translated">结果序列中的最后一个列表可能包含的元素少于给定&lt;a href=&quot;chunked#kotlin.sequences%24chunked(kotlin.sequences.Sequence((kotlin.sequences.chunked.T)),%20kotlin.Int)/size&quot;&gt;大小的&lt;/a&gt;元素。</target>
        </trans-unit>
        <trans-unit id="19dcc0ec6fdfe1941cf804b7c1eaf5c5297a4c82" translate="yes" xml:space="preserve">
          <source>The last string in the resulting list may have less characters than the given &lt;a href=&quot;chunked#kotlin.text%24chunked%28kotlin.CharSequence%2C+kotlin.Int%29%2Fsize&quot;&gt;size&lt;/a&gt;.</source>
          <target state="translated">结果列表中的最后一个字符串的字符数可能少于给定的&lt;a href=&quot;chunked#kotlin.text%24chunked%28kotlin.CharSequence%2C+kotlin.Int%29%2Fsize&quot;&gt;大小&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="01c80e09f206886b89d00be2fa9ab43305c32874" translate="yes" xml:space="preserve">
          <source>The last string in the resulting list may have less characters than the given &lt;a href=&quot;chunked#kotlin.text%24chunked(kotlin.CharSequence,%20kotlin.Int)/size&quot;&gt;size&lt;/a&gt;.</source>
          <target state="translated">结果列表中的最后一个字符串的字符数可能少于给定的&lt;a href=&quot;chunked#kotlin.text%24chunked(kotlin.CharSequence,%20kotlin.Int)/size&quot;&gt;大小&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="5264566740d059c5fcc7247f9b4782bf04dc775d" translate="yes" xml:space="preserve">
          <source>The last string in the resulting sequence may have less characters than the given &lt;a href=&quot;chunked-sequence#kotlin.text%24chunkedSequence%28kotlin.CharSequence%2C+kotlin.Int%29%2Fsize&quot;&gt;size&lt;/a&gt;.</source>
          <target state="translated">结果序列中的最后一个字符串的字符数可能少于给定的&lt;a href=&quot;chunked-sequence#kotlin.text%24chunkedSequence%28kotlin.CharSequence%2C+kotlin.Int%29%2Fsize&quot;&gt;大小&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="7ebb5e898a1a9ea0d92ef57e7df9d364782eae89" translate="yes" xml:space="preserve">
          <source>The last string in the resulting sequence may have less characters than the given &lt;a href=&quot;chunked-sequence#kotlin.text%24chunkedSequence(kotlin.CharSequence,%20kotlin.Int)/size&quot;&gt;size&lt;/a&gt;.</source>
          <target state="translated">结果序列中的最后一个字符串的字符数可能少于给定的&lt;a href=&quot;chunked-sequence#kotlin.text%24chunkedSequence(kotlin.CharSequence,%20kotlin.Int)/size&quot;&gt;大小&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="34c76d76568703e916e3116e8326427af7debc51" translate="yes" xml:space="preserve">
          <source>The lastIndex is a read/write integer property of regular expressions that specifies the index at which to start the next match.</source>
          <target state="translated">lastIndex是正则表达式的一个读/写整数属性,指定了开始下一次匹配的索引。</target>
        </trans-unit>
        <trans-unit id="9d0eba273c11a973f53f6330c745e78d9f5b9345" translate="yes" xml:space="preserve">
          <source>The latter is called &lt;strong&gt;contravariance&lt;/strong&gt;, and you can only call methods that take String as an argument on &lt;code&gt;List&amp;lt;? super String&amp;gt;&lt;/code&gt; (e.g., you can call &lt;code&gt;add(String)&lt;/code&gt; or &lt;code&gt;set(int, String)&lt;/code&gt;), while if you call something that returns &lt;code&gt;T&lt;/code&gt; in &lt;code&gt;List&amp;lt;T&amp;gt;&lt;/code&gt;, you don't get a &lt;code&gt;String&lt;/code&gt;, but an &lt;code&gt;Object&lt;/code&gt;.</source>
          <target state="translated">后者称为&lt;strong&gt;convarivariance&lt;/strong&gt;，您只能调用将String作为 &lt;code&gt;List&amp;lt;? super String&amp;gt;&lt;/code&gt; 上的参数的方法。超级String&amp;gt;（例如，您可以调用 &lt;code&gt;add(String)&lt;/code&gt; 或 &lt;code&gt;set(int, String)&lt;/code&gt; ），而如果您调用在 &lt;code&gt;List&amp;lt;T&amp;gt;&lt;/code&gt; 中返回 &lt;code&gt;T&lt;/code&gt; 的 &lt;code&gt;Object&lt;/code&gt; ，则不会得到 &lt;code&gt;String&lt;/code&gt; ，而是Object。</target>
        </trans-unit>
        <trans-unit id="86eeb4f1664e3df8b781582839802549edf89327" translate="yes" xml:space="preserve">
          <source>The layout of a Kotlin multiplatform project is constructed out of the following building blocks:</source>
          <target state="translated">Kotlin多平台项目的布局是由以下构件构成的。</target>
        </trans-unit>
        <trans-unit id="8ea7c30b630fce2ba1b463bc4ce8b2e978cfb463" translate="yes" xml:space="preserve">
          <source>The layout of kotlinx libraries has changed and now corresponds to the default layout, which we recommend using: The '&amp;ldquo;root&amp;rdquo; or &amp;ldquo;umbrella&amp;rdquo; library module now has a name without a suffix (for example,&lt;code&gt;kotlinx-coroutines-core&lt;/code&gt; instead of &lt;code&gt;kotlinx-coroutines-core-native&lt;/code&gt;). Publishing libraries with &lt;a href=&quot;https://docs.gradle.org/current/userguide/publishing_maven.html&quot;&gt;maven-publish Gradle plugin&lt;/a&gt; follows this layout by default.</source>
          <target state="translated">kotlinx库的布局已更改，现在与默认布局相对应，我们建议使用以下默认布局：&amp;ldquo; root&amp;rdquo;或&amp;ldquo; umbrella&amp;rdquo;库模块现在具有不带后缀的名称（例如， &lt;code&gt;kotlinx-coroutines-core&lt;/code&gt; 代替 &lt;code&gt;kotlinx-coroutines-core-native&lt;/code&gt; ）。使用&lt;a href=&quot;https://docs.gradle.org/current/userguide/publishing_maven.html&quot;&gt;maven-publish Gradle插件&lt;/a&gt;发布库默认情况下遵循此布局。</target>
        </trans-unit>
        <trans-unit id="dc4b69a6e38939f4509626db77c33dd8c679086f" translate="yes" xml:space="preserve">
          <source>The least significant 16 bits of the resulting &lt;code&gt;Int&lt;/code&gt; value are the same as the bits of this &lt;code&gt;Short&lt;/code&gt; value, whereas the most significant 16 bits are filled with the sign bit of this value.</source>
          <target state="translated">结果 &lt;code&gt;Int&lt;/code&gt; 值的最低16位与该 &lt;code&gt;Short&lt;/code&gt; 值的位相同，而最高16位用该值的符号位填充。</target>
        </trans-unit>
        <trans-unit id="4f0f34d38c4a4771a59f6d35fcaf5f32f9d5a113" translate="yes" xml:space="preserve">
          <source>The least significant 16 bits of the resulting &lt;code&gt;Int&lt;/code&gt; value are the same as the bits of this &lt;code&gt;UShort&lt;/code&gt; value, whereas the most significant 16 bits are filled with zeros.</source>
          <target state="translated">结果 &lt;code&gt;Int&lt;/code&gt; 值的最低16位与此 &lt;code&gt;UShort&lt;/code&gt; 值的位相同，而最高16位用零填充。</target>
        </trans-unit>
        <trans-unit id="db7d64a40964cbcc91041fe9c6abd3a6f883ba7c" translate="yes" xml:space="preserve">
          <source>The least significant 16 bits of the resulting &lt;code&gt;Long&lt;/code&gt; value are the same as the bits of this &lt;code&gt;Short&lt;/code&gt; value, whereas the most significant 48 bits are filled with the sign bit of this value.</source>
          <target state="translated">结果 &lt;code&gt;Long&lt;/code&gt; 值的最低有效16位与此 &lt;code&gt;Short&lt;/code&gt; 值的相同，而最高48位则用此值的符号位填充。</target>
        </trans-unit>
        <trans-unit id="96755580626f22c0780c08fafc24e52c9efd9ea9" translate="yes" xml:space="preserve">
          <source>The least significant 16 bits of the resulting &lt;code&gt;Long&lt;/code&gt; value are the same as the bits of this &lt;code&gt;UShort&lt;/code&gt; value, whereas the most significant 48 bits are filled with zeros.</source>
          <target state="translated">结果 &lt;code&gt;Long&lt;/code&gt; 值的最低有效16位与此 &lt;code&gt;UShort&lt;/code&gt; 值的位相同，而最高有效48位用零填充。</target>
        </trans-unit>
        <trans-unit id="805e1d578ae5895787cd7c80c9a6f84d9875cbdf" translate="yes" xml:space="preserve">
          <source>The least significant 16 bits of the resulting &lt;code&gt;UInt&lt;/code&gt; value are the same as the bits of this &lt;code&gt;Short&lt;/code&gt; value, whereas the most significant 16 bits are filled with the sign bit of this value.</source>
          <target state="translated">所得的 &lt;code&gt;UInt&lt;/code&gt; 值的最低有效16位与该 &lt;code&gt;Short&lt;/code&gt; 值的位相同，而最高有效的16位用该值的符号位填充。</target>
        </trans-unit>
        <trans-unit id="e2d7f90749fa8a275417e31e2a951b621f7bdd7e" translate="yes" xml:space="preserve">
          <source>The least significant 16 bits of the resulting &lt;code&gt;UInt&lt;/code&gt; value are the same as the bits of this &lt;code&gt;UShort&lt;/code&gt; value, whereas the most significant 16 bits are filled with zeros.</source>
          <target state="translated">所得 &lt;code&gt;UInt&lt;/code&gt; 值的最低有效16位与此 &lt;code&gt;UShort&lt;/code&gt; 值的位相同，而最高有效16位用零填充。</target>
        </trans-unit>
        <trans-unit id="382a5532019e821cafc1c9ca21454b43f1f91a60" translate="yes" xml:space="preserve">
          <source>The least significant 16 bits of the resulting &lt;code&gt;ULong&lt;/code&gt; value are the same as the bits of this &lt;code&gt;Short&lt;/code&gt; value, whereas the most significant 48 bits are filled with the sign bit of this value.</source>
          <target state="translated">得到的 &lt;code&gt;ULong&lt;/code&gt; 值的最低有效16位与该 &lt;code&gt;Short&lt;/code&gt; 值的位相同，而最高有效48位用该值的符号位填充。</target>
        </trans-unit>
        <trans-unit id="98d7b8a419dc2e1a1e55aeb89fee5123de4a6b5e" translate="yes" xml:space="preserve">
          <source>The least significant 16 bits of the resulting &lt;code&gt;ULong&lt;/code&gt; value are the same as the bits of this &lt;code&gt;UShort&lt;/code&gt; value, whereas the most significant 48 bits are filled with zeros.</source>
          <target state="translated">得到的 &lt;code&gt;ULong&lt;/code&gt; 值的最低有效16位与此 &lt;code&gt;UShort&lt;/code&gt; 值的位相同，而最高有效的48位用零填充。</target>
        </trans-unit>
        <trans-unit id="b511f5bcb1b166f6a21672ecd3a364142d43ef6e" translate="yes" xml:space="preserve">
          <source>The least significant 32 bits of the resulting &lt;code&gt;Long&lt;/code&gt; value are the same as the bits of this &lt;code&gt;Int&lt;/code&gt; value, whereas the most significant 32 bits are filled with the sign bit of this value.</source>
          <target state="translated">结果 &lt;code&gt;Long&lt;/code&gt; 值的最低有效32位与此 &lt;code&gt;Int&lt;/code&gt; 值的位相同，而最高有效32位则用此值的符号位填充。</target>
        </trans-unit>
        <trans-unit id="8552752324805690a09e930c3347d0b3b76fb45a" translate="yes" xml:space="preserve">
          <source>The least significant 32 bits of the resulting &lt;code&gt;Long&lt;/code&gt; value are the same as the bits of this &lt;code&gt;UInt&lt;/code&gt; value, whereas the most significant 32 bits are filled with zeros.</source>
          <target state="translated">得到的 &lt;code&gt;Long&lt;/code&gt; 值的最低有效32位与此 &lt;code&gt;UInt&lt;/code&gt; 值的位相同，而最高有效32位用零填充。</target>
        </trans-unit>
        <trans-unit id="13513c5d8d4b778bf7d2d02871ec67b342f92eb3" translate="yes" xml:space="preserve">
          <source>The least significant 32 bits of the resulting &lt;code&gt;ULong&lt;/code&gt; value are the same as the bits of this &lt;code&gt;Int&lt;/code&gt; value, whereas the most significant 32 bits are filled with the sign bit of this value.</source>
          <target state="translated">得到的 &lt;code&gt;ULong&lt;/code&gt; 值的最低有效32位与此 &lt;code&gt;Int&lt;/code&gt; 值的位相同，而最高有效32位则用该值的符号位填充。</target>
        </trans-unit>
        <trans-unit id="098196788f072e1b90241673f7cd1c8d4ddc487e" translate="yes" xml:space="preserve">
          <source>The least significant 32 bits of the resulting &lt;code&gt;ULong&lt;/code&gt; value are the same as the bits of this &lt;code&gt;UInt&lt;/code&gt; value, whereas the most significant 32 bits are filled with zeros.</source>
          <target state="translated">得到的 &lt;code&gt;ULong&lt;/code&gt; 值的最低有效32位与此 &lt;code&gt;UInt&lt;/code&gt; 值的位相同，而最高有效32位用零填充。</target>
        </trans-unit>
        <trans-unit id="1e95934eab4e475329950f2eb8e7a3a03516b89c" translate="yes" xml:space="preserve">
          <source>The least significant 8 bits of the resulting &lt;code&gt;Char&lt;/code&gt; code are the same as the bits of this &lt;code&gt;Byte&lt;/code&gt; value, whereas the most significant 8 bits are filled with the sign bit of this value.</source>
          <target state="translated">所得 &lt;code&gt;Char&lt;/code&gt; 代码的最低有效8位与此 &lt;code&gt;Byte&lt;/code&gt; 值的位相同，而最高有效8位用此值的符号位填充。</target>
        </trans-unit>
        <trans-unit id="1ccfa3d5b3f0d4c2cadb8ddee394a5e74b7f3fb0" translate="yes" xml:space="preserve">
          <source>The least significant 8 bits of the resulting &lt;code&gt;Int&lt;/code&gt; value are the same as the bits of this &lt;code&gt;Byte&lt;/code&gt; value, whereas the most significant 24 bits are filled with the sign bit of this value.</source>
          <target state="translated">结果 &lt;code&gt;Int&lt;/code&gt; 值的最低有效8位与此 &lt;code&gt;Byte&lt;/code&gt; 值的位相同，而最高有效的24位则用此值的符号位填充。</target>
        </trans-unit>
        <trans-unit id="682e9bb2df532a75f2a73fb4a8682c3fe53c3f6f" translate="yes" xml:space="preserve">
          <source>The least significant 8 bits of the resulting &lt;code&gt;Int&lt;/code&gt; value are the same as the bits of this &lt;code&gt;UByte&lt;/code&gt; value, whereas the most significant 24 bits are filled with zeros.</source>
          <target state="translated">结果 &lt;code&gt;Int&lt;/code&gt; 值的最低有效8位与此 &lt;code&gt;UByte&lt;/code&gt; 值的位相同，而最高有效的24位用零填充。</target>
        </trans-unit>
        <trans-unit id="740b8988c3d828c3ba10680439510f32d7f08bd4" translate="yes" xml:space="preserve">
          <source>The least significant 8 bits of the resulting &lt;code&gt;Long&lt;/code&gt; value are the same as the bits of this &lt;code&gt;Byte&lt;/code&gt; value, whereas the most significant 56 bits are filled with the sign bit of this value.</source>
          <target state="translated">结果 &lt;code&gt;Long&lt;/code&gt; 值的最低有效8位与此 &lt;code&gt;Byte&lt;/code&gt; 值的位相同，而最高有效56位用此值的符号位填充。</target>
        </trans-unit>
        <trans-unit id="f2986e4bdb9623eb7b0be806904f6c45008e66a1" translate="yes" xml:space="preserve">
          <source>The least significant 8 bits of the resulting &lt;code&gt;Long&lt;/code&gt; value are the same as the bits of this &lt;code&gt;UByte&lt;/code&gt; value, whereas the most significant 56 bits are filled with zeros.</source>
          <target state="translated">结果 &lt;code&gt;Long&lt;/code&gt; 值的最低有效8位与此 &lt;code&gt;UByte&lt;/code&gt; 值的位相同，而最高有效56位用零填充。</target>
        </trans-unit>
        <trans-unit id="da411f42fa8b3bbe7fd6d9ed1a7edbedcead90c8" translate="yes" xml:space="preserve">
          <source>The least significant 8 bits of the resulting &lt;code&gt;Short&lt;/code&gt; value are the same as the bits of this &lt;code&gt;Byte&lt;/code&gt; value, whereas the most significant 8 bits are filled with the sign bit of this value.</source>
          <target state="translated">结果的 &lt;code&gt;Short&lt;/code&gt; 值的最低有效8位与此 &lt;code&gt;Byte&lt;/code&gt; 值的位相同，而最高有效8位则用此值的符号位填充。</target>
        </trans-unit>
        <trans-unit id="dbca88370b969aea0b645fa67d458151bf144ef3" translate="yes" xml:space="preserve">
          <source>The least significant 8 bits of the resulting &lt;code&gt;Short&lt;/code&gt; value are the same as the bits of this &lt;code&gt;UByte&lt;/code&gt; value, whereas the most significant 8 bits are filled with zeros.</source>
          <target state="translated">结果的 &lt;code&gt;Short&lt;/code&gt; 值的最低有效8位与此 &lt;code&gt;UByte&lt;/code&gt; 值的位相同，而最高有效8位用零填充。</target>
        </trans-unit>
        <trans-unit id="0705f7403c9d4340ca48e777c703d467c71d6c8f" translate="yes" xml:space="preserve">
          <source>The least significant 8 bits of the resulting &lt;code&gt;UInt&lt;/code&gt; value are the same as the bits of this &lt;code&gt;Byte&lt;/code&gt; value, whereas the most significant 24 bits are filled with the sign bit of this value.</source>
          <target state="translated">结果 &lt;code&gt;UInt&lt;/code&gt; 值的最低有效8位与该 &lt;code&gt;Byte&lt;/code&gt; 值的位相同，而最高有效的24位用该值的符号位填充。</target>
        </trans-unit>
        <trans-unit id="e35a3b71a791931b3596ab2bd1edb46d9365dda1" translate="yes" xml:space="preserve">
          <source>The least significant 8 bits of the resulting &lt;code&gt;UInt&lt;/code&gt; value are the same as the bits of this &lt;code&gt;UByte&lt;/code&gt; value, whereas the most significant 24 bits are filled with zeros.</source>
          <target state="translated">结果 &lt;code&gt;UInt&lt;/code&gt; 值的最低有效8位与此 &lt;code&gt;UByte&lt;/code&gt; 值的位相同，而最高有效的24位用零填充。</target>
        </trans-unit>
        <trans-unit id="fbe359060636f5088c741be0b327d7d46254bbcd" translate="yes" xml:space="preserve">
          <source>The least significant 8 bits of the resulting &lt;code&gt;ULong&lt;/code&gt; value are the same as the bits of this &lt;code&gt;Byte&lt;/code&gt; value, whereas the most significant 56 bits are filled with the sign bit of this value.</source>
          <target state="translated">得到的 &lt;code&gt;ULong&lt;/code&gt; 值的最低有效8位与该 &lt;code&gt;Byte&lt;/code&gt; 值的位相同，而最高有效56位用该值的符号位填充。</target>
        </trans-unit>
        <trans-unit id="9d9c37d2ab226e9ed58e44937eac9a5c2afe8841" translate="yes" xml:space="preserve">
          <source>The least significant 8 bits of the resulting &lt;code&gt;ULong&lt;/code&gt; value are the same as the bits of this &lt;code&gt;UByte&lt;/code&gt; value, whereas the most significant 56 bits are filled with zeros.</source>
          <target state="translated">得到的 &lt;code&gt;ULong&lt;/code&gt; 值的最低有效8位与此 &lt;code&gt;UByte&lt;/code&gt; 值的位相同，而最高有效56位用零填充。</target>
        </trans-unit>
        <trans-unit id="573a497b93bab09d8947aa89f58fd5f36237628f" translate="yes" xml:space="preserve">
          <source>The least significant 8 bits of the resulting &lt;code&gt;UShort&lt;/code&gt; value are the same as the bits of this &lt;code&gt;Byte&lt;/code&gt; value, whereas the most significant 8 bits are filled with the sign bit of this value.</source>
          <target state="translated">结果 &lt;code&gt;UShort&lt;/code&gt; 值的最低有效8位与此 &lt;code&gt;Byte&lt;/code&gt; 值的位相同，而最高有效的8位则用该值的符号位填充。</target>
        </trans-unit>
        <trans-unit id="d49f6edce25857427bee05e2a6463c8f203f6aab" translate="yes" xml:space="preserve">
          <source>The least significant 8 bits of the resulting &lt;code&gt;UShort&lt;/code&gt; value are the same as the bits of this &lt;code&gt;UByte&lt;/code&gt; value, whereas the most significant 8 bits are filled with zeros.</source>
          <target state="translated">所得的 &lt;code&gt;UShort&lt;/code&gt; 值的最低有效8位与此 &lt;code&gt;UByte&lt;/code&gt; 值的位相同，而最高有效8位用零填充。</target>
        </trans-unit>
        <trans-unit id="1511f8695777128c7450dc6f9cc52fbdbfc512c7" translate="yes" xml:space="preserve">
          <source>The less obvious cases that belong to the &quot;grey area&quot; include handling corner cases differently, throwing an exception of a different type than before, changing behavior observable only through reflection, changes in undocumented/undefined behavior, renaming binary artifacts, etc. Sometimes such changes are very important and affect migration experience dramatically, sometimes they are insignificant.</source>
          <target state="translated">属于 &quot;灰色地带 &quot;的不太明显的情况包括:以不同的方式处理转角情况、抛出与之前不同类型的异常、改变只有通过反射才能观察到的行为、改变未记录/未定义的行为、重命名二进制工件等。有时这样的改变非常重要,会极大地影响迁移体验,有时则微不足道。</target>
        </trans-unit>
        <trans-unit id="dd894256ff253457e13d98fae75ab576481e876c" translate="yes" xml:space="preserve">
          <source>The library format</source>
          <target state="translated">图书馆格式</target>
        </trans-unit>
        <trans-unit id="c48fdef888f67d5a66f513cae58be8d045c058e0" translate="yes" xml:space="preserve">
          <source>The library has been created in the current directory:</source>
          <target state="translated">库已经在当前目录下创建。</target>
        </trans-unit>
        <trans-unit id="cff219119dad603b83453d082db1d0aa5cce3800" translate="yes" xml:space="preserve">
          <source>The lines returned do not include terminating line separators.</source>
          <target state="translated">返回的行数不包括终止行的分隔符。</target>
        </trans-unit>
        <trans-unit id="c55560496e55797a8f7e15a83a7eef3064d61d19" translate="yes" xml:space="preserve">
          <source>The list can be empty:</source>
          <target state="translated">列表可以是空的。</target>
        </trans-unit>
        <trans-unit id="0ec3834f8762f850d976d74a3444d0d24d17d417" translate="yes" xml:space="preserve">
          <source>The list is expected to be sorted so that the signs of the &lt;a href=&quot;binary-search#kotlin.collections%24binarySearch(kotlin.collections.List((kotlin.collections.binarySearch.T)),%20kotlin.Int,%20kotlin.Int,%20kotlin.Function1((kotlin.collections.binarySearch.T,%20kotlin.Int)))/comparison&quot;&gt;comparison&lt;/a&gt; function's return values ascend on the list elements, i.e. negative values come before zero and zeroes come before positive values. Otherwise, the result is undefined.</source>
          <target state="translated">期望对列表进行排序，以便&lt;a href=&quot;binary-search#kotlin.collections%24binarySearch(kotlin.collections.List((kotlin.collections.binarySearch.T)),%20kotlin.Int,%20kotlin.Int,%20kotlin.Function1((kotlin.collections.binarySearch.T,%20kotlin.Int)))/comparison&quot;&gt;比较&lt;/a&gt;函数的返回值的符号在列表元素上上升，即，负值在零之前，零在正值之前。否则，结果是不确定的。</target>
        </trans-unit>
        <trans-unit id="ecc031fda17a51efc3a0c6e7f3483a236bf69e52" translate="yes" xml:space="preserve">
          <source>The list of immediate supertypes of this class, in the order they are listed in the source code.</source>
          <target state="translated">该类的直属超类型列表,按照源代码中的顺序排列。</target>
        </trans-unit>
        <trans-unit id="37daaa29c5ab04c74e60f96a3c80a72671943c78" translate="yes" xml:space="preserve">
          <source>The list of possible time measurement units, in which a duration can be expressed.</source>
          <target state="translated">可能的时间测量单位列表,可以用它来表示持续时间。</target>
        </trans-unit>
        <trans-unit id="e7cfcc4e5ebb2fa63d0c44bdcf02351c03c9e8d4" translate="yes" xml:space="preserve">
          <source>The list of the immediate subclasses if this class is a sealed class, or an empty list otherwise.</source>
          <target state="translated">如果这个类是一个密封的类,则直接子类的列表,否则为空列表。</target>
        </trans-unit>
        <trans-unit id="af028a3423820dfb61266857373312e6321072a9" translate="yes" xml:space="preserve">
          <source>The list of type parameters of this callable.</source>
          <target state="translated">该callable的类型参数列表。</target>
        </trans-unit>
        <trans-unit id="3983145b3c17efebd4ca1c3dd6839e784929aaa8" translate="yes" xml:space="preserve">
          <source>The list of type parameters of this class. This list does &lt;em&gt;not&lt;/em&gt; include type parameters of outer classes.</source>
          <target state="translated">此类的类型参数的列表。这份名单并&lt;em&gt;没有&lt;/em&gt;包括外部类的类型参数。</target>
        </trans-unit>
        <trans-unit id="5e5604d93ac6b4b21b3fc3fde66a87e1782f115e" translate="yes" xml:space="preserve">
          <source>The list passed as a receiver to the &lt;a href=&quot;build-list#kotlin.collections%24buildList(kotlin.Function1((kotlin.collections.MutableList((kotlin.collections.buildList.E)),%20kotlin.Unit)))/builderAction&quot;&gt;builderAction&lt;/a&gt; is valid only inside that function. Using it outside of the function produces an unspecified behavior.</source>
          <target state="translated">作为接收者传递给&lt;a href=&quot;build-list#kotlin.collections%24buildList(kotlin.Function1((kotlin.collections.MutableList((kotlin.collections.buildList.E)),%20kotlin.Unit)))/builderAction&quot;&gt;builderAction&lt;/a&gt;的列表仅在该函数内部有效。在函数外部使用它会产生未指定的行为。</target>
        </trans-unit>
        <trans-unit id="58bea952dbde503be437ceaa0dd1f57601cd3546" translate="yes" xml:space="preserve">
          <source>The list passed as a receiver to the &lt;a href=&quot;build-list#kotlin.collections%24buildList(kotlin.Int,%20kotlin.Function1((kotlin.collections.MutableList((kotlin.collections.buildList.E)),%20kotlin.Unit)))/builderAction&quot;&gt;builderAction&lt;/a&gt; is valid only inside that function. Using it outside of the function produces an unspecified behavior.</source>
          <target state="translated">作为接收者传递给&lt;a href=&quot;build-list#kotlin.collections%24buildList(kotlin.Int,%20kotlin.Function1((kotlin.collections.MutableList((kotlin.collections.buildList.E)),%20kotlin.Unit)))/builderAction&quot;&gt;builderAction&lt;/a&gt;的列表仅在该函数内部有效。在函数外部使用它会产生未指定的行为。</target>
        </trans-unit>
        <trans-unit id="7dd6f3d5d8e8c83c9d11a7ed45e7362cc872b1a5" translate="yes" xml:space="preserve">
          <source>The locking in this example is fine-grained, so it pays the price. However, it is a good choice for some situations where you absolutely must modify some shared state periodically, but there is no natural thread that this state is confined to.</source>
          <target state="translated">这个例子中的锁是细粒度的,所以它要付出代价。然而,对于某些情况来说,它是一个很好的选择,在这些情况下,你绝对必须周期性地修改一些共享状态,但没有一个自然线程可以限制这个状态。</target>
        </trans-unit>
        <trans-unit id="993a245cc6dcc5a6d2356a7f7d1259d26b6ea137" translate="yes" xml:space="preserve">
          <source>The loop variable(s), if any, must be declared outside of the &lt;code&gt;while&lt;/code&gt; loop, and are therefore available for inspection afterwards, at which point they will contain the value(s) that made the loop condition false.</source>
          <target state="translated">循环变量（如果有）必须在 &lt;code&gt;while&lt;/code&gt; 循环外声明，因此可以在以后检查，此时它们将包含使循环条件为假的值。</target>
        </trans-unit>
        <trans-unit id="f10abe77e5b16e3b7aa73cabd19e9ac919e5868d" translate="yes" xml:space="preserve">
          <source>The main code is straightforward:</source>
          <target state="translated">主代码简单明了。</target>
        </trans-unit>
        <trans-unit id="21b17843ae6bab256e1f2d7c26e40966048480db" translate="yes" xml:space="preserve">
          <source>The main code starts and connects the whole pipeline:</source>
          <target state="translated">主代码启动并连接整个管道。</target>
        </trans-unit>
        <trans-unit id="1415e580114f63d99c0e8622a1104c3c733c68ba" translate="yes" xml:space="preserve">
          <source>The main disadvantage of changing the code style in an existing project is that the blame/annotate VCS feature will point to irrelevant commits more often. While each VCS has some kind of way to deal with this problem (&lt;a href=&quot;https://www.jetbrains.com/help/idea/investigate-changes.html&quot;&gt;&quot;Annotate Previous Revision&quot;&lt;/a&gt; can be used in IntelliJ IDEA), it's important to decide if a new style is worth all the effort. The practice of separating reformatting commits from meaningful changes can help a lot with later investigations.</source>
          <target state="translated">更改现有项目中的代码样式的主要缺点是，怪怪/注释VCS功能将更频繁地指向无关的提交。尽管每个VCS都有某种方法可以解决此问题（IntelliJ IDEA中可以使用&lt;a href=&quot;https://www.jetbrains.com/help/idea/investigate-changes.html&quot;&gt;&amp;ldquo;注释以前的​​修订版&amp;rdquo;&lt;/a&gt;），但重要的是确定新样式是否值得所有努力。将重新格式化提交与有意义的更改分开的做法可为以后的调查提供很大帮助。</target>
        </trans-unit>
        <trans-unit id="f0255c27371bb337a0275ae99c66e66aefbb2cf2" translate="yes" xml:space="preserve">
          <source>The main function just launches a coroutine to print results of &lt;code&gt;switchMapDeferreds&lt;/code&gt; and sends some test data to it:</source>
          <target state="translated">主要功能只是启动协程以打印 &lt;code&gt;switchMapDeferreds&lt;/code&gt; 的结果并将一些测试数据发送给它：</target>
        </trans-unit>
        <trans-unit id="3fc6ee8401f75644154b5d3dd20d9f0be0f58394" translate="yes" xml:space="preserve">
          <source>The main rules regarding expected and actual declarations are:</source>
          <target state="translated">关于预期申报和实际申报的主要规则是:</target>
        </trans-unit>
        <trans-unit id="c0a11bc5688f898de97456dfcb543cf05d79b8a1" translate="yes" xml:space="preserve">
          <source>The main thread (that runs the &lt;code&gt;main()&lt;/code&gt; function) must wait until our coroutine completes, otherwise the program ends before &lt;code&gt;Hello&lt;/code&gt; is printed.</source>
          <target state="translated">主线程（运行 &lt;code&gt;main()&lt;/code&gt; 函数）必须等待我们的协程完成，否则程序将在打印 &lt;code&gt;Hello&lt;/code&gt; 之前结束。</target>
        </trans-unit>
        <trans-unit id="42842e42bea5093cdb441dde49057dadae37db65" translate="yes" xml:space="preserve">
          <source>The map passed as a receiver to the &lt;a href=&quot;build-map#kotlin.collections%24buildMap(kotlin.Function1((kotlin.collections.MutableMap((kotlin.collections.buildMap.K,%20kotlin.collections.buildMap.V)),%20kotlin.Unit)))/builderAction&quot;&gt;builderAction&lt;/a&gt; is valid only inside that function. Using it outside of the function produces an unspecified behavior.</source>
          <target state="translated">作为接收器传递给&lt;a href=&quot;build-map#kotlin.collections%24buildMap(kotlin.Function1((kotlin.collections.MutableMap((kotlin.collections.buildMap.K,%20kotlin.collections.buildMap.V)),%20kotlin.Unit)))/builderAction&quot;&gt;builderAction&lt;/a&gt;的映射仅在该函数内部有效。在函数外部使用它会产生未指定的行为。</target>
        </trans-unit>
        <trans-unit id="a53f2c2933b5a52627852e1c168f9c0fc9ce94e1" translate="yes" xml:space="preserve">
          <source>The map passed as a receiver to the &lt;a href=&quot;build-map#kotlin.collections%24buildMap(kotlin.Int,%20kotlin.Function1((kotlin.collections.MutableMap((kotlin.collections.buildMap.K,%20kotlin.collections.buildMap.V)),%20kotlin.Unit)))/builderAction&quot;&gt;builderAction&lt;/a&gt; is valid only inside that function. Using it outside of the function produces an unspecified behavior.</source>
          <target state="translated">作为接收器传递给&lt;a href=&quot;build-map#kotlin.collections%24buildMap(kotlin.Int,%20kotlin.Function1((kotlin.collections.MutableMap((kotlin.collections.buildMap.K,%20kotlin.collections.buildMap.V)),%20kotlin.Unit)))/builderAction&quot;&gt;builderAction&lt;/a&gt;的映射仅在该函数内部有效。在函数外部使用它会产生未指定的行为。</target>
        </trans-unit>
        <trans-unit id="2c831066dd6087f2516b15d01bfb68e39b9bcf05" translate="yes" xml:space="preserve">
          <source>The maximum number of substrings to return. Zero by default means no limit is set.</source>
          <target state="translated">要返回的子串的最大数量。默认为零,表示没有设置限制。</target>
        </trans-unit>
        <trans-unit id="4e76f165176d7e28c6b59c285a7ee8af5a71fc72" translate="yes" xml:space="preserve">
          <source>The maximum radix available for conversion to and from strings.</source>
          <target state="translated">字符串转换的最大半径。</target>
        </trans-unit>
        <trans-unit id="38f9246447f2685e9dd36b4c8d7e0bf7ff2fb023" translate="yes" xml:space="preserve">
          <source>The maximum value in the range (inclusive).</source>
          <target state="translated">范围内的最大值(含)。</target>
        </trans-unit>
        <trans-unit id="cc9397547e8b9fc8e2131246f8cce9b80a975147" translate="yes" xml:space="preserve">
          <source>The maximum value of a Unicode code point. Kotlin/Native specific.</source>
          <target state="translated">Unicode码点的最大值。Kotlin/Native特有的。</target>
        </trans-unit>
        <trans-unit id="af496c450bf387c2b7d7ee0dc32c766b9f1b66c1" translate="yes" xml:space="preserve">
          <source>The maximum value of a Unicode high-surrogate code unit.</source>
          <target state="translated">Unicode高代码单位的最大值。</target>
        </trans-unit>
        <trans-unit id="68f9d655dde4db0c3b71fc09c97d0f87e103d52b" translate="yes" xml:space="preserve">
          <source>The maximum value of a Unicode low-surrogate code unit.</source>
          <target state="translated">Unicode低代码单位的最大值。</target>
        </trans-unit>
        <trans-unit id="0cb5887284a08dd04202e0863d133d8ed431392d" translate="yes" xml:space="preserve">
          <source>The maximum value of a Unicode surrogate code unit.</source>
          <target state="translated">Unicode代用码单位的最大值。</target>
        </trans-unit>
        <trans-unit id="ea009c16dc0030623058aff99eec7f7c7973366c" translate="yes" xml:space="preserve">
          <source>The maximum value of a character code unit.</source>
          <target state="translated">一个字符代码单位的最大值。</target>
        </trans-unit>
        <trans-unit id="dce9edb79f3aca5450e6dfb555e231182e2c5340" translate="yes" xml:space="preserve">
          <source>The meaning of a visibility modifier depends on whether it's applied to a top-level declaration or to a declaration inside a class. For top-level declarations:</source>
          <target state="translated">可见性修饰符的含义取决于它是应用于顶层声明还是应用于类中的声明。对于顶层声明。</target>
        </trans-unit>
        <trans-unit id="2f5715d8d7aab68289e0b8a47e46f1764f30f76e" translate="yes" xml:space="preserve">
          <source>The message explaining the deprecation and recommending an alternative API to use.</source>
          <target state="translated">解释弃用的信息,并推荐使用其他API。</target>
        </trans-unit>
        <trans-unit id="1d7af1b2ed876762350f57904a38e801662ebbf4" translate="yes" xml:space="preserve">
          <source>The meta-runner for Kotlin is available on &lt;a href=&quot;https://github.com/jonnyzzz/Kotlin.TeamCity&quot;&gt;GitHub&lt;/a&gt;. If using TeamCity 9 or above, we can now simply import that meta-runner from the TeamCity user interface</source>
          <target state="translated">&lt;a href=&quot;https://github.com/jonnyzzz/Kotlin.TeamCity&quot;&gt;GitHub上&lt;/a&gt;提供了Kotlin的元运行器。如果使用TeamCity 9或更高版本，我们现在可以简单地从TeamCity用户界面导入该元运行器</target>
        </trans-unit>
        <trans-unit id="cbb5d37dc4d790a9dba2a103cd7fc2ea1af9db2f" translate="yes" xml:space="preserve">
          <source>The minimum radix available for conversion to and from strings.</source>
          <target state="translated">可用于转换为字符串和从字符串转换的最小半径。</target>
        </trans-unit>
        <trans-unit id="3eb6b21e0f2a2eb117e5ca90292e6def24614862" translate="yes" xml:space="preserve">
          <source>The minimum value in the range.</source>
          <target state="translated">范围内的最小值。</target>
        </trans-unit>
        <trans-unit id="480df25e783a3ddb0c5eabcc07d40b9a21fd328e" translate="yes" xml:space="preserve">
          <source>The minimum value of a Unicode code point. Kotlin/Native specific.</source>
          <target state="translated">Unicode码点的最小值。Kotlin/Native特有的。</target>
        </trans-unit>
        <trans-unit id="c11b4b4a4cfd50662da801109ced72e7ef8083ad" translate="yes" xml:space="preserve">
          <source>The minimum value of a Unicode high-surrogate code unit.</source>
          <target state="translated">Unicode高代码单位的最小值。</target>
        </trans-unit>
        <trans-unit id="7a57e546e08f3cd66a3ed8cebd57f37a4137a78d" translate="yes" xml:space="preserve">
          <source>The minimum value of a Unicode low-surrogate code unit.</source>
          <target state="translated">Unicode低代码单位的最小值。</target>
        </trans-unit>
        <trans-unit id="47b523f1a39e9c9f7bda17fc85b300ab3e0da311" translate="yes" xml:space="preserve">
          <source>The minimum value of a Unicode surrogate code unit.</source>
          <target state="translated">Unicode代用码单位的最小值。</target>
        </trans-unit>
        <trans-unit id="e3fc4d1ab4988e695801daf57bd33d3f470c3668" translate="yes" xml:space="preserve">
          <source>The minimum value of a character code unit.</source>
          <target state="translated">一个字符代码单位的最小值。</target>
        </trans-unit>
        <trans-unit id="d80a9d6c0ddeb1216ece2df4cc2d7d63382408e4" translate="yes" xml:space="preserve">
          <source>The minimum value of a supplementary code point, &lt;code&gt;\u0x10000&lt;/code&gt;. Kotlin/Native specific.</source>
          <target state="translated">补充代码点的最小值 &lt;code&gt;\u0x10000&lt;/code&gt; 。Kotlin /本机特定。</target>
        </trans-unit>
        <trans-unit id="39042f06ab046e1bfc15de4ecf52d5a28eec3294" translate="yes" xml:space="preserve">
          <source>The modifier can be used on &lt;code&gt;var&lt;/code&gt; properties declared inside the body of a class (not in the primary constructor, and only when the property does not have a custom getter or setter) and, since Kotlin 1.2, for top-level properties and local variables. The type of the property or variable must be non-null, and it must not be a primitive type.</source>
          <target state="translated">修饰符可用于在类主体内声明的 &lt;code&gt;var&lt;/code&gt; 属性（不适用于主构造函数，并且仅在该属性没有自定义getter或setter时），并且自Kotlin 1.2起，用于顶级属性和局部变量。属性或变量的类型必须为非null，并且不能为原始类型。</target>
        </trans-unit>
        <trans-unit id="bb919d11f95900a1425b0a32e4257389d1fc669f" translate="yes" xml:space="preserve">
          <source>The most &quot;natural&quot; placement is in the object &lt;code&gt;nativeHeap&lt;/code&gt;. It corresponds to allocating native memory with &lt;code&gt;malloc&lt;/code&gt; and provides an additional &lt;code&gt;.free()&lt;/code&gt; operation to free allocated memory:</source>
          <target state="translated">最&amp;ldquo;自然&amp;rdquo;的放置在对象 &lt;code&gt;nativeHeap&lt;/code&gt; 中。它对应于使用 &lt;code&gt;malloc&lt;/code&gt; 分配本机内存，并提供了附加的 &lt;code&gt;.free()&lt;/code&gt; 操作来释放已分配的内存：</target>
        </trans-unit>
        <trans-unit id="0d14eba091c54d0c22e0562741651e98077e032c" translate="yes" xml:space="preserve">
          <source>The most basic reflection feature is getting the runtime reference to a Kotlin class. To obtain the reference to a statically known Kotlin class, you can use the &lt;em&gt;class literal&lt;/em&gt; syntax:</source>
          <target state="translated">最基本的反射功能是获取对Kotlin类的运行时引用。要获取对静态已知的Kotlin类的引用，可以使用&lt;em&gt;类文字&lt;/em&gt;语法：</target>
        </trans-unit>
        <trans-unit id="ae0dbb4ff6b4fc6cc9b694111494978916ff6daf" translate="yes" xml:space="preserve">
          <source>The most basic usage of enum classes is implementing type-safe enums:</source>
          <target state="translated">枚举类最基本的用法是实现类型安全的枚举。</target>
        </trans-unit>
        <trans-unit id="564a165b2993e039b868e117559d08b7cdc98e88" translate="yes" xml:space="preserve">
          <source>The most common kind of properties simply reads from (and maybe writes to) a backing field. On the other hand, with custom getters and setters one can implement any behaviour of a property. Somewhere in between, there are certain common patterns of how a property may work. A few examples: lazy values, reading from a map by a given key, accessing a database, notifying listener on access, etc.</source>
          <target state="translated">最常见的属性只是简单地从一个后备字段读取(也许还可以写入)。另一方面,通过自定义的getter和setter,可以实现属性的任何行为。在这两者之间,有一些常见的属性工作模式。几个例子:懒惰值、通过给定的键从地图中读取、访问数据库、在访问时通知监听器等等。</target>
        </trans-unit>
        <trans-unit id="d5cbdfb8e81de653dd867a75b87523ff1d242141" translate="yes" xml:space="preserve">
          <source>The most common type of constraint is an &lt;strong&gt;upper bound&lt;/strong&gt; that corresponds to Java's &lt;em&gt;extends&lt;/em&gt; keyword:</source>
          <target state="translated">最常见的约束类型是与Java的&lt;em&gt;extends&lt;/em&gt;关键字相对应的&lt;strong&gt;上限&lt;/strong&gt;：&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="368d747cfcb5fb4e353c85a7469dfacbb5453495" translate="yes" xml:space="preserve">
          <source>The most common way to create a collection is with the standard library functions &lt;a href=&quot;../../api/latest/jvm/stdlib/kotlin.collections/list-of&quot;&gt;&lt;code&gt;listOf&amp;lt;T&amp;gt;()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../../api/latest/jvm/stdlib/kotlin.collections/set-of&quot;&gt;&lt;code&gt;setOf&amp;lt;T&amp;gt;()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../../api/latest/jvm/stdlib/kotlin.collections/mutable-list-of&quot;&gt;&lt;code&gt;mutableListOf&amp;lt;T&amp;gt;()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../../api/latest/jvm/stdlib/kotlin.collections/mutable-set-of&quot;&gt;&lt;code&gt;mutableSetOf&amp;lt;T&amp;gt;()&lt;/code&gt;&lt;/a&gt;. If you provide a comma-separated list of collection elements as arguments, the compiler detects the element type automatically. When creating empty collections, specify the type explicitly.</source>
          <target state="translated">创建集合的最常见方法是使用标准库函数&lt;a href=&quot;../../api/latest/jvm/stdlib/kotlin.collections/list-of&quot;&gt; &lt;code&gt;listOf&amp;lt;T&amp;gt;()&lt;/code&gt; &lt;/a&gt;，&lt;a href=&quot;../../api/latest/jvm/stdlib/kotlin.collections/set-of&quot;&gt; &lt;code&gt;setOf&amp;lt;T&amp;gt;()&lt;/code&gt; &lt;/a&gt;，&lt;a href=&quot;../../api/latest/jvm/stdlib/kotlin.collections/mutable-list-of&quot;&gt; &lt;code&gt;mutableListOf&amp;lt;T&amp;gt;()&lt;/code&gt; &lt;/a&gt;，&lt;a href=&quot;../../api/latest/jvm/stdlib/kotlin.collections/mutable-set-of&quot;&gt; &lt;code&gt;mutableSetOf&amp;lt;T&amp;gt;()&lt;/code&gt; &lt;/a&gt;。如果提供逗号分隔的集合元素列表作为参数，则编译器将自动检测元素类型。创建空集合时，请明确指定类型。</target>
        </trans-unit>
        <trans-unit id="8af07c08b76ea4e058b575d399481b358534d1dd" translate="yes" xml:space="preserve">
          <source>The most common webpack adjustments can be made directly via the &lt;code&gt;kotlin.js.browser.webpackTask&lt;/code&gt; configuration block in the Gradle build file.</source>
          <target state="translated">最常见的Webpack调整可以直接通过Gradle构建文件中的 &lt;code&gt;kotlin.js.browser.webpackTask&lt;/code&gt; 配置块进行。</target>
        </trans-unit>
        <trans-unit id="b853cf446ccffab0ecfd031a6ec9cd9f7555703c" translate="yes" xml:space="preserve">
          <source>The most notable change is in the continuation indentation policy. There's a nice idea to use the double indent for showing that a multi-line expression hasn't ended on the previous line. This is a very simple and general rule, but several Kotlin constructions look a bit awkward when they are formatted this way. In Kotlin Coding Conventions it's recommended to use a single indent in cases where the long continuation indent has been forced before</source>
          <target state="translated">最显著的变化是延续缩进政策。有一个很好的想法,就是使用双缩进来显示多行表达式没有在前一行结束。这是一个非常简单和通用的规则,但有几个Kotlin结构在采用这种格式时看起来有点尴尬。在 Kotlin 编码规范中,建议在长的延续缩进之前被强制缩进的情况下,使用单缩进。</target>
        </trans-unit>
        <trans-unit id="e8c58687aab400a3400843ec6513c56c72bdb694" translate="yes" xml:space="preserve">
          <source>The most obvious practical reason to cancel execution of a coroutine is because its execution time has exceeded some timeout. While you can manually track the reference to the corresponding &lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/-job/index.html&quot;&gt;Job&lt;/a&gt; and launch a separate coroutine to cancel the tracked one after delay, there is a ready to use &lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/with-timeout.html&quot;&gt;withTimeout&lt;/a&gt; function that does it. Look at the following example:</source>
          <target state="translated">取消协程执行的最明显的实际原因是因为协程的执行时间已超过某个超时。虽然您可以手动跟踪对相应&lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/-job/index.html&quot;&gt;Job&lt;/a&gt;的引用并启动一个单独的协程以在延迟后取消所跟踪的协程，但是可以使用&lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/with-timeout.html&quot;&gt;withTimeout&lt;/a&gt;函数来执行此操作。看下面的例子：</target>
        </trans-unit>
        <trans-unit id="d08f23af81c5dad7c4dca8d8027b602b0ab864b4" translate="yes" xml:space="preserve">
          <source>The most peculiar feature of &lt;code&gt;dynamic&lt;/code&gt; is that we are allowed to call &lt;strong&gt;any&lt;/strong&gt; property or function with any parameters on a &lt;code&gt;dynamic&lt;/code&gt; variable:</source>
          <target state="translated">&lt;code&gt;dynamic&lt;/code&gt; 的最独特的功能是允许我们使用 &lt;code&gt;dynamic&lt;/code&gt; 变量上的任何参数调用&lt;strong&gt;任何&lt;/strong&gt;属性或函数：</target>
        </trans-unit>
        <trans-unit id="6d6182bd9b2931240a569f7b50076d9f1ba63de8" translate="yes" xml:space="preserve">
          <source>The most precise time source available in the platform.</source>
          <target state="translated">平台中最精确的时间源。</target>
        </trans-unit>
        <trans-unit id="3c05df95cb8e9db1a4f2601246ac944d5c8bd276" translate="yes" xml:space="preserve">
          <source>The multiplatform projects and multiplatform libraries are discussed in the &lt;a href=&quot;../../reference/multiplatform&quot;&gt;documentation&lt;/a&gt; too.</source>
          <target state="translated">&lt;a href=&quot;../../reference/multiplatform&quot;&gt;文档中&lt;/a&gt;还讨论了多平台项目和多平台库。</target>
        </trans-unit>
        <trans-unit id="6595e5fe1547363b463835d421622aad398ae9cc" translate="yes" xml:space="preserve">
          <source>The name contains the following parts (some of them may be empty):</source>
          <target state="translated">该名称包含以下部分(其中一些可能是空的):</target>
        </trans-unit>
        <trans-unit id="be2bbb4b7f64e74c76f66a7956619caeb8e3f0ff" translate="yes" xml:space="preserve">
          <source>The name deque is short for &quot;double ended queue&quot; and is usually pronounced &quot;deck&quot;.</source>
          <target state="translated">deque是 &quot;双端队列 &quot;的简称,通常读作 &quot;甲板&quot;。</target>
        </trans-unit>
        <trans-unit id="705b141c8de1d697224950845ea5a1b7afb58d54" translate="yes" xml:space="preserve">
          <source>The name of a class is usually a noun or a noun phrase explaining what the class &lt;em&gt;is&lt;/em&gt;: &lt;code&gt;List&lt;/code&gt;, &lt;code&gt;PersonReader&lt;/code&gt;.</source>
          <target state="translated">一个类的名称通常是一个名词或名词短语，用以解释该类&lt;em&gt;是&lt;/em&gt;什么： &lt;code&gt;List&lt;/code&gt; ， &lt;code&gt;PersonReader&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="2218455df585d83e3681475aae4631f54b57ae59" translate="yes" xml:space="preserve">
          <source>The name of a class used by itself (not as a qualifier to another name) acts as a reference to the companion object of the class (whether named or not):</source>
          <target state="translated">一个类的名字本身使用(不是作为另一个名字的限定词),作为对该类的同伴对象(无论是否命名)的引用。</target>
        </trans-unit>
        <trans-unit id="07fe46086dbe239fd375c49037bb37bff00ee0c4" translate="yes" xml:space="preserve">
          <source>The name of a method is usually a verb or a verb phrase saying what the method &lt;em&gt;does&lt;/em&gt;: &lt;code&gt;close&lt;/code&gt;, &lt;code&gt;readPersons&lt;/code&gt;. The name should also suggest if the method is mutating the object or returning a new one. For instance &lt;code&gt;sort&lt;/code&gt; is sorting a collection in place, while &lt;code&gt;sorted&lt;/code&gt; is returning a sorted copy of the collection.</source>
          <target state="translated">方法的名称通常是动词或动词短语，表示方法的&lt;em&gt;作用&lt;/em&gt;： &lt;code&gt;close&lt;/code&gt; ， &lt;code&gt;readPersons&lt;/code&gt; 。该名称还应该建议该方法是在改变对象还是返回一个新对象。例如 &lt;code&gt;sort&lt;/code&gt; 是对集合进行 &lt;code&gt;sorted&lt;/code&gt; ，而sorted返回集合的排序副本。</target>
        </trans-unit>
        <trans-unit id="07c434a5d635392f2cc52f562338d62b0cd9ae9a" translate="yes" xml:space="preserve">
          <source>The name of the companion object can be omitted, in which case the name &lt;code&gt;Companion&lt;/code&gt; will be used:</source>
          <target state="translated">可以省略伴随对象的名称，在这种情况下，将使用名称 &lt;code&gt;Companion&lt;/code&gt; ：</target>
        </trans-unit>
        <trans-unit id="ba35193d0490ae1490a81583acf93693abaa382e" translate="yes" xml:space="preserve">
          <source>The name of the file should describe what the code in the file does. Therefore, you should avoid using meaningless words such as &quot;Util&quot; in file names.</source>
          <target state="translated">文件的名称应该描述文件中的代码的作用。因此,你应该避免在文件名中使用 &quot;Util &quot;等无意义的词语。</target>
        </trans-unit>
        <trans-unit id="3aecf5d5ce4130f99667312567cec868e0f727ee" translate="yes" xml:space="preserve">
          <source>The name of the generated Java class can be changed using the &lt;code&gt;@JvmName&lt;/code&gt; annotation:</source>
          <target state="translated">可以使用 &lt;code&gt;@JvmName&lt;/code&gt; 批注来更改生成的Java类的名称：</target>
        </trans-unit>
        <trans-unit id="c5f1bfd2676f7023c48bd8f681608f158236c940" translate="yes" xml:space="preserve">
          <source>The name of the target (if specified) or the project</source>
          <target state="translated">目标名称(如果指定)或项目名称</target>
        </trans-unit>
        <trans-unit id="7eeccd568a57bbe2529083f026a7111bc3da5193" translate="yes" xml:space="preserve">
          <source>The name of the task that builds the resulting artifacts of this target.</source>
          <target state="translated">构建该目标的结果工件的任务名称。</target>
        </trans-unit>
        <trans-unit id="cbba3c187c456ab45b79f8154b1183097b8b2546" translate="yes" xml:space="preserve">
          <source>The name of this callable as it was declared in the source code. If the callable has no name, a special invented name is created. Nameless callables include:</source>
          <target state="translated">这个可调用的名称,因为它是在源代码中声明的。如果该可调用项没有名称,则会创建一个特殊的发明名称。无名可调用包括:</target>
        </trans-unit>
        <trans-unit id="688bb052b4a717479ab8663cafb721fc37d4378a" translate="yes" xml:space="preserve">
          <source>The name of this type parameter as it was declared in the source code.</source>
          <target state="translated">源代码中声明的该类型参数的名称。</target>
        </trans-unit>
        <trans-unit id="25f073ea1bd96da303a6eb4e8f3418d2fb774887" translate="yes" xml:space="preserve">
          <source>The names of Kotlin classes and interfaces are prefixed when imported to Objective-C. The prefix is derived from the framework name.</source>
          <target state="translated">Kotlin类和接口的名称在导入到Objective-C时是有前缀的。这个前缀是由框架名称衍生出来的。</target>
        </trans-unit>
        <trans-unit id="69675486a4053839ac9b38d8b7b0c3ec7c01c08b" translate="yes" xml:space="preserve">
          <source>The names of the tasks in Android Projects contain the &lt;a href=&quot;https://developer.android.com/studio/build/build-variants.html&quot;&gt;build variant&lt;/a&gt; names and follow the pattern &lt;code&gt;compile&amp;lt;BuildVariant&amp;gt;Kotlin&lt;/code&gt;, for example, &lt;code&gt;compileDebugKotlin&lt;/code&gt;, &lt;code&gt;compileReleaseUnitTestKotlin&lt;/code&gt;.</source>
          <target state="translated">Android项目中的任务名称包含&lt;a href=&quot;https://developer.android.com/studio/build/build-variants.html&quot;&gt;构建变体&lt;/a&gt;名称，并遵循模式 &lt;code&gt;compile&amp;lt;BuildVariant&amp;gt;Kotlin&lt;/code&gt; ，例如 &lt;code&gt;compileDebugKotlin&lt;/code&gt; ， &lt;code&gt;compileReleaseUnitTestKotlin&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="b01e22b1729a53f5c38e9b03b567bbe208d510c5" translate="yes" xml:space="preserve">
          <source>The names of these tasks were created from the formula: &lt;code&gt;run[Debug|Release]Executable&amp;lt;target name&amp;gt;&lt;/code&gt;, where &lt;code&gt;target name&lt;/code&gt; is the capitalized target name that we specified in the &lt;code&gt;build.gradle.kts&lt;/code&gt;&lt;code&gt;build.gradle&lt;/code&gt; file out of our build, &lt;code&gt;&quot;native&quot;&lt;/code&gt; in our case. Let's run the task in the IDE. For that, let's open the Gradle Tool Window and find the task in the list:</source>
          <target state="translated">这些任务的名称是根据以下公式创建的： &lt;code&gt;run[Debug|Release]Executable&amp;lt;target name&amp;gt;&lt;/code&gt; ，其中 &lt;code&gt;target name&lt;/code&gt; 是我们在 &lt;code&gt;build.gradle.kts&lt;/code&gt; &lt;code&gt;build.gradle&lt;/code&gt; 文件中从构建中指定的大写目标名称，在我们的案例中为 &lt;code&gt;&quot;native&quot;&lt;/code&gt; 。让我们在IDE中运行任务。为此，让我们打开Gradle Tool窗口并在列表中找到任务：</target>
        </trans-unit>
        <trans-unit id="f0aa5ea5557fedda4c5d2598dc5dd22d0363ac01" translate="yes" xml:space="preserve">
          <source>The names should make it clear what the purpose of the entity is, so it's best to avoid using meaningless words (&lt;code&gt;Manager&lt;/code&gt;, &lt;code&gt;Wrapper&lt;/code&gt; etc.) in names.</source>
          <target state="translated">名称应清楚说明实体的用途，因此最好避免在名称中使用无意义的词（ &lt;code&gt;Manager&lt;/code&gt; ， &lt;code&gt;Wrapper&lt;/code&gt; 等）。</target>
        </trans-unit>
        <trans-unit id="73a31785499746e1755c5fd02e03d5e8b58c34d0" translate="yes" xml:space="preserve">
          <source>The native memory can be allocated using the &lt;code&gt;NativePlacement&lt;/code&gt; interface, e.g.</source>
          <target state="translated">可以使用 &lt;code&gt;NativePlacement&lt;/code&gt; 接口来分配本机内存，例如</target>
        </trans-unit>
        <trans-unit id="6a4f133dcc400189b06f4d2207b53017de6347ac" translate="yes" xml:space="preserve">
          <source>The new &lt;code&gt;minOf()&lt;/code&gt; and &lt;code&gt;maxOf()&lt;/code&gt; extension functions return the minimum and the maximum value of the given selector function on the collection items.</source>
          <target state="translated">新的 &lt;code&gt;minOf()&lt;/code&gt; 和 &lt;code&gt;maxOf()&lt;/code&gt; 扩展函数返回集合项上给定选择器函数的最小值和最大值。</target>
        </trans-unit>
        <trans-unit id="6cfd2a99b5ee1770b48531a2d8ca774ab1bcb143" translate="yes" xml:space="preserve">
          <source>The new Kotlin Project Wizard is both simple and flexible:</source>
          <target state="translated">新的Kotlin项目向导既简单又灵活。</target>
        </trans-unit>
        <trans-unit id="ac86d0e3a5fa4aec1c8749b2e4a7eed7297032b2" translate="yes" xml:space="preserve">
          <source>The new Kotlin compiler is going to be really fast; it will unify all the supported platforms and provide an API for compiler extensions. It's a long-term project, and we've already completed several steps in Kotlin 1.4.0:</source>
          <target state="translated">新的Kotlin编译器将会非常快;它将统一所有支持的平台,并为编译器扩展提供API。这是一个长期项目,我们已经在Kotlin 1.4.0中完成了几个步骤。</target>
        </trans-unit>
        <trans-unit id="77d2be187e310c20f8b1c1ee15e1c6d7e97f9c01" translate="yes" xml:space="preserve">
          <source>The new algorithm fixes this issue, and you can pass a lambda instead of a SAM interface in any case, which is the way you&amp;rsquo;d naturally expect it to work.</source>
          <target state="translated">新算法解决了这个问题，在任何情况下都可以传递lambda而不是SAM接口，这是您自然希望它起作用的方式。</target>
        </trans-unit>
        <trans-unit id="52a6cfa7e4d5ffdd8d860b7ad7120de82ac44b6c" translate="yes" xml:space="preserve">
          <source>The new experimental REPL API is now a part of the Kotlin Scripting API. There are also several implementations of it in the published artifacts, and some have advanced functionality, such as code completion. We use this API in the &lt;a href=&quot;https://blog.jetbrains.com/kotlin/2020/05/kotlin-kernel-for-jupyter-notebook-v0-8/&quot;&gt;Kotlin Jupyter kernel&lt;/a&gt; and now you can try it in your own custom shells and REPLs.</source>
          <target state="translated">新的实验性REPL API现在是Kotlin脚本API的一部分。在已发布的工件中也有几种实现，有些具有高级功能，例如代码完成。我们在&lt;a href=&quot;https://blog.jetbrains.com/kotlin/2020/05/kotlin-kernel-for-jupyter-notebook-v0-8/&quot;&gt;Kotlin Jupyter内核中&lt;/a&gt;使用了此API，现在您可以在自己的自定义外壳程序和REPL中进行尝试。</target>
        </trans-unit>
        <trans-unit id="5055c5b1026a40b7ffc10fd81a86667db3798a42" translate="yes" xml:space="preserve">
          <source>The new inference algorithm infers types for many cases where the old algorithm required you to specify them explicitly. For instance, in the following example the type of the lambda parameter &lt;code&gt;it&lt;/code&gt; is correctly inferred to &lt;code&gt;String?&lt;/code&gt;:</source>
          <target state="translated">在许多情况下，新算法会推断出类型，在这些情况下，旧算法需要您明确指定它们。例如，在下面的例子中的&amp;lambda;的类型参数 &lt;code&gt;it&lt;/code&gt; 被正确地推断为 &lt;code&gt;String?&lt;/code&gt; ：</target>
        </trans-unit>
        <trans-unit id="672732f66c4b7f92d3ecbdaaf0ac7fbe6cc851d3" translate="yes" xml:space="preserve">
          <source>The new project opens. &lt;a href=&quot;mpp-discover-project&quot;&gt;Discover what it includes&lt;/a&gt;.</source>
          <target state="translated">新项目打开。&lt;a href=&quot;mpp-discover-project&quot;&gt;发现它包含的内容&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="183994f4ebd6d698ee09d0ba15ca6b6ca68c9e19" translate="yes" xml:space="preserve">
          <source>The next lines are about providing linker and compiler options, which can vary depending on different target platforms. In our case, we are defining it for macOS (the &lt;code&gt;.osx&lt;/code&gt; suffix) and Linux (the &lt;code&gt;.linux&lt;/code&gt; suffix). Parameters without a suffix is also possible (e.g. &lt;code&gt;linkerOpts=&lt;/code&gt;) and will be applied to all platforms.</source>
          <target state="translated">接下来的几行是关于提供链接器和编译器选项的，这些选项可能会因不同的目标平台而异。在我们的例子中，我们定义它为MacOS（在 &lt;code&gt;.osx&lt;/code&gt; 后缀）和Linux（在 &lt;code&gt;.linux&lt;/code&gt; 后缀）。也可以不带后缀的参数（例如， &lt;code&gt;linkerOpts=&lt;/code&gt; ），并将这些参数应用于所有平台。</target>
        </trans-unit>
        <trans-unit id="5a6c6de321d2f0ef15a3d35472d5a5225a93083f" translate="yes" xml:space="preserve">
          <source>The next part of the &lt;code&gt;&amp;lt;Framework&amp;gt;/Headers/Demo.h&lt;/code&gt; contains number type mappings between Kotlin/Native and &lt;code&gt;NSNumber&lt;/code&gt;. We have the base class called &lt;code&gt;DemoNumber&lt;/code&gt; in Objective-C and &lt;code&gt;KotlinNumber&lt;/code&gt; in Swift. It extends &lt;code&gt;NSNumber&lt;/code&gt;. There are also child classes per Kotlin number type:</source>
          <target state="translated">&lt;code&gt;&amp;lt;Framework&amp;gt;/Headers/Demo.h&lt;/code&gt; 的下一部分包含Kotlin / Native和 &lt;code&gt;NSNumber&lt;/code&gt; 之间的数字类型映射。我们有一个叫做基类 &lt;code&gt;DemoNumber&lt;/code&gt; 在Objective-C和 &lt;code&gt;KotlinNumber&lt;/code&gt; 斯威夫特。它扩展了 &lt;code&gt;NSNumber&lt;/code&gt; 。每个Kotlin数字类型也有子类：</target>
        </trans-unit>
        <trans-unit id="cfe4a47831305057cc6388a57b9e77a3a7e3a7a8" translate="yes" xml:space="preserve">
          <source>The next part of the &lt;code&gt;libnative_api.h&lt;/code&gt; file contains definitions of the types that are used in the library:</source>
          <target state="translated">&lt;code&gt;libnative_api.h&lt;/code&gt; 文件的下一部分包含该库中使用的类型的定义：</target>
        </trans-unit>
        <trans-unit id="dc72aec2231c401cec520bbf86ad2595019584f0" translate="yes" xml:space="preserve">
          <source>The next step is going to prompt us on the Kotlin runtime library. By default the plugin selects the one that is associated to the currently installed version. Unless we want to create a different one, we can click Finish at this point after entering the project name and location.</source>
          <target state="translated">下一步会提示我们选择Kotlin运行时库。默认情况下,插件会选择与当前安装的版本相关联的那个库。除非我们想创建一个不同的,否则我们可以在此时输入项目名称和位置后点击完成。</target>
        </trans-unit>
        <trans-unit id="93716c2cabdff509bf9835ed635452819990ca4f" translate="yes" xml:space="preserve">
          <source>The next step is to call a C function pointer from a C pointer that we have from the &lt;code&gt;supply_fun()&lt;/code&gt; call:</source>
          <target state="translated">下一步是从 &lt;code&gt;supply_fun()&lt;/code&gt; 调用中的C指针中调用C函数指针：</target>
        </trans-unit>
        <trans-unit id="4c075c67c98b72698b50bde83417679cfcaad540" translate="yes" xml:space="preserve">
          <source>The next step is to compile our application. We already covered the basics of compiling a Kotlin/Native application from the command line in the &lt;a href=&quot;basic-kotlin-native-app&quot;&gt;A Basic Kotlin/Native application&lt;/a&gt; tutorial. The only difference in this case is that the &lt;code&gt;cinterop&lt;/code&gt; generated part is implicitly included into the build: Let's call the following command:</source>
          <target state="translated">下一步是编译我们的应用程序。我们已经在&lt;a href=&quot;basic-kotlin-native-app&quot;&gt;A Basic Kotlin / Native应用程序&lt;/a&gt;教程的命令行中介绍了编译Kotlin / Native应用程序的基础知识。在这种情况下，唯一的区别是 &lt;code&gt;cinterop&lt;/code&gt; 生成的部分隐式包含在构建中：让我们调用以下命令：</target>
        </trans-unit>
        <trans-unit id="29eb1a88978e11cb19e6153185329a8fdd184b9c" translate="yes" xml:space="preserve">
          <source>The next step is to create Greeting Data class that has two properties: &lt;em&gt;id&lt;/em&gt; and a &lt;em&gt;content&lt;/em&gt;</source>
          <target state="translated">下一步是创建具有两个属性的Greeting Data类：&lt;em&gt;id&lt;/em&gt;和&lt;em&gt;content&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="f2ba2b214cfaccb2ec50010bfe1a0d121ee2cd4b" translate="yes" xml:space="preserve">
          <source>The next step is to create a Run Configuration in IntelliJ IDEA under Tomcat / Local which deploys the WAR and starts up Tomcat.</source>
          <target state="translated">下一步是在Tomcat/Local下的IntelliJ IDEA中创建一个运行配置,部署WAR并启动Tomcat。</target>
        </trans-unit>
        <trans-unit id="27ce517e143c3dea9eb55849f860e4c5596ec3f9" translate="yes" xml:space="preserve">
          <source>The next step is to decide which modules to configure (if the project has more than one module) and whether you want to add the runtime library to the project or use those provided by the current Kotlin plugin.</source>
          <target state="translated">下一步是决定要配置哪些模块(如果项目有多个模块的话),以及是将运行时库添加到项目中,还是使用当前Kotlin插件提供的模块。</target>
        </trans-unit>
        <trans-unit id="22779d3ccc120e4892af96a829245aa095780550" translate="yes" xml:space="preserve">
          <source>The non-abstract subclasses should represent the (complete) C data type and thus specify size and alignment. Each such subclass must have a companion object which is a &lt;a href=&quot;-type/index&quot;&gt;Type&lt;/a&gt;.</source>
          <target state="translated">非抽象子类应表示（完整的）C数据类型，从而指定大小和对齐方式。每个此类子类都必须具有一个&lt;a href=&quot;-type/index&quot;&gt;Type&lt;/a&gt;伴随对象。</target>
        </trans-unit>
        <trans-unit id="fc28129df689ae65c9fd83a31b9aa03dac9e8ced" translate="yes" xml:space="preserve">
          <source>The non-breaking space character</source>
          <target state="translated">不断裂的空间特征</target>
        </trans-unit>
        <trans-unit id="e8f00eeeaaa301ab094d387f05d45fa33541dead" translate="yes" xml:space="preserve">
          <source>The nullable version &lt;code&gt;Nothing?&lt;/code&gt; will be used by the compiler when something is initialized with null and there is no other type information. In &lt;code&gt;val x = null&lt;/code&gt;, the type of &lt;code&gt;x&lt;/code&gt; will be &lt;code&gt;Nothing?&lt;/code&gt;. This type does not have the &quot;never returns normally&quot; semantics; instead, the compiler knows that the value will always be null.</source>
          <target state="translated">可空版本 &lt;code&gt;Nothing?&lt;/code&gt; 当使用null初始化某些东西并且没有其他类型信息时，编译器将使用。在 &lt;code&gt;val x = null&lt;/code&gt; ，类型 &lt;code&gt;x&lt;/code&gt; 将是 &lt;code&gt;Nothing?&lt;/code&gt; 。此类型不具有&amp;ldquo;从不返回正常&amp;rdquo;语义；相反，编译器知道该值将始终为null。</target>
        </trans-unit>
        <trans-unit id="77363aca1573dd5dba20e28ad666c9c7fd83436a" translate="yes" xml:space="preserve">
          <source>The number is converted to a string and then the string is converted to a &lt;a href=&quot;http://docs.oracle.com/javase/8/docs/api/java/math/BigDecimal.html&quot;&gt;BigDecimal&lt;/a&gt;.</source>
          <target state="translated">将数字转换为字符串，然后将字符串转换为&lt;a href=&quot;http://docs.oracle.com/javase/8/docs/api/java/math/BigDecimal.html&quot;&gt;BigDecimal&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="bbb7b619e5deab250c82714dad5c6223da422d99" translate="yes" xml:space="preserve">
          <source>The number is converted to a string and then the string is converted to a &lt;a href=&quot;https://docs.oracle.com/javase/8/docs/api/java/math/BigDecimal.html&quot;&gt;BigDecimal&lt;/a&gt;.</source>
          <target state="translated">将数字转换为字符串，然后将字符串转换为&lt;a href=&quot;https://docs.oracle.com/javase/8/docs/api/java/math/BigDecimal.html&quot;&gt;BigDecimal&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="bc9979a04405cfcd09395aa075f56f352dfb5b1c" translate="yes" xml:space="preserve">
          <source>The number of bits used to represent a Char in a binary form.</source>
          <target state="translated">用来表示二进制形式的Char的位数。</target>
        </trans-unit>
        <trans-unit id="a5aabbd23fb87b74097e1ccd4055f0b183ecbf87" translate="yes" xml:space="preserve">
          <source>The number of bits used to represent an instance of Byte in a binary form.</source>
          <target state="translated">用来表示二进制形式的Byte实例的位数。</target>
        </trans-unit>
        <trans-unit id="fc5f8fcea457f48ba61aea0a6c6364e750d35bba" translate="yes" xml:space="preserve">
          <source>The number of bits used to represent an instance of Double in a binary form.</source>
          <target state="translated">用来表示二进制形式的Double实例的位数。</target>
        </trans-unit>
        <trans-unit id="3ac96a9235bc1077029c5934186d743a5b00c197" translate="yes" xml:space="preserve">
          <source>The number of bits used to represent an instance of Float in a binary form.</source>
          <target state="translated">用来表示二进制形式的Float实例的位数。</target>
        </trans-unit>
        <trans-unit id="0f9c3201d4f3bb80740106fd705fe9901bfc9490" translate="yes" xml:space="preserve">
          <source>The number of bits used to represent an instance of Int in a binary form.</source>
          <target state="translated">用来表示二进制形式的Int实例的位数。</target>
        </trans-unit>
        <trans-unit id="881c588a79332a9f90d40c26e737596c51909376" translate="yes" xml:space="preserve">
          <source>The number of bits used to represent an instance of Long in a binary form.</source>
          <target state="translated">用二进制形式表示Long实例的位数。</target>
        </trans-unit>
        <trans-unit id="3a2fa986a400a5de2289aa09e08c447c811e1ab0" translate="yes" xml:space="preserve">
          <source>The number of bits used to represent an instance of Short in a binary form.</source>
          <target state="translated">用来表示二进制形式的Short实例的位数。</target>
        </trans-unit>
        <trans-unit id="b557b6ad22e0d4a32e6ecf5e7c42a83086397f62" translate="yes" xml:space="preserve">
          <source>The number of bits used to represent an instance of UByte in a binary form.</source>
          <target state="translated">用来表示一个二进制形式的UByte实例的位数。</target>
        </trans-unit>
        <trans-unit id="04a46c8fcf471f6f7a2489fd5541b67d79b2dbba" translate="yes" xml:space="preserve">
          <source>The number of bits used to represent an instance of UInt in a binary form.</source>
          <target state="translated">用来表示二进制形式的UInt实例的位数。</target>
        </trans-unit>
        <trans-unit id="970f51f6cf41ca82dcda9c5384dd1584581a3241" translate="yes" xml:space="preserve">
          <source>The number of bits used to represent an instance of ULong in a binary form.</source>
          <target state="translated">用来表示一个二进制形式的ULong实例的位数。</target>
        </trans-unit>
        <trans-unit id="f405dad940dd8a9ba9986616021e6669d81ef332" translate="yes" xml:space="preserve">
          <source>The number of bits used to represent an instance of UShort in a binary form.</source>
          <target state="translated">用来表示二进制形式的UShort实例的位数。</target>
        </trans-unit>
        <trans-unit id="7fca3ee96d6d11e61b4e40ce8aef39bbd3166f00" translate="yes" xml:space="preserve">
          <source>The number of bytes used to represent a Char in a binary form.</source>
          <target state="translated">用来表示二进制形式的Char的字节数。</target>
        </trans-unit>
        <trans-unit id="d455af0205d71a29c80b7797e96f36f72c818b20" translate="yes" xml:space="preserve">
          <source>The number of bytes used to represent an instance of Byte in a binary form.</source>
          <target state="translated">用来表示二进制形式的Byte实例的字节数。</target>
        </trans-unit>
        <trans-unit id="cfb84d55b9d6ee08abf33db55d2a61462dded701" translate="yes" xml:space="preserve">
          <source>The number of bytes used to represent an instance of Double in a binary form.</source>
          <target state="translated">用来表示一个二进制形式的Double实例的字节数。</target>
        </trans-unit>
        <trans-unit id="080e5eee27bb967010b8c2b300a0c20e8300d7a1" translate="yes" xml:space="preserve">
          <source>The number of bytes used to represent an instance of Float in a binary form.</source>
          <target state="translated">用来表示二进制形式的Float实例的字节数。</target>
        </trans-unit>
        <trans-unit id="012737f61c97912b11277e0542ab793fcecbd8f6" translate="yes" xml:space="preserve">
          <source>The number of bytes used to represent an instance of Int in a binary form.</source>
          <target state="translated">用来表示二进制形式的Int实例的字节数。</target>
        </trans-unit>
        <trans-unit id="ac50dee558bf2179b63147e5d4abcf881946deb1" translate="yes" xml:space="preserve">
          <source>The number of bytes used to represent an instance of Long in a binary form.</source>
          <target state="translated">用二进制形式表示Long实例的字节数。</target>
        </trans-unit>
        <trans-unit id="d47711ab000d6ab309cdde940a4d6cc83958bbb7" translate="yes" xml:space="preserve">
          <source>The number of bytes used to represent an instance of Short in a binary form.</source>
          <target state="translated">用来表示二进制形式的Short实例的字节数。</target>
        </trans-unit>
        <trans-unit id="5da103d9bfe814cb16e570a63e8fffdec6abede9" translate="yes" xml:space="preserve">
          <source>The number of bytes used to represent an instance of UByte in a binary form.</source>
          <target state="translated">用来表示二进制形式的UByte实例的字节数。</target>
        </trans-unit>
        <trans-unit id="7aa018571731f4dfc20dc2f2b40bc661649fe4df" translate="yes" xml:space="preserve">
          <source>The number of bytes used to represent an instance of UInt in a binary form.</source>
          <target state="translated">用来表示二进制形式的UInt实例的字节数。</target>
        </trans-unit>
        <trans-unit id="c4d88684784d0b5692fee9bc8fbbdcbfde1bb159" translate="yes" xml:space="preserve">
          <source>The number of bytes used to represent an instance of ULong in a binary form.</source>
          <target state="translated">用来表示一个二进制形式的ULong实例的字节数。</target>
        </trans-unit>
        <trans-unit id="de97fd8a16a598b6d753acf6fc495d892600d39e" translate="yes" xml:space="preserve">
          <source>The number of bytes used to represent an instance of UShort in a binary form.</source>
          <target state="translated">用来表示二进制形式的UShort实例的字节数。</target>
        </trans-unit>
        <trans-unit id="802421b7bac6f95ce971296bce66f238a1ca7ee6" translate="yes" xml:space="preserve">
          <source>The official docs also have a very cool example with a &lt;a href=&quot;../../reference/type-safe-builders&quot;&gt; DSL for constructing HTML documents&lt;/a&gt;.</source>
          <target state="translated">官方文档中还有一个非常酷的示例，其中包含&lt;a href=&quot;../../reference/type-safe-builders&quot;&gt;用于构造HTML文档&lt;/a&gt;的DSL。</target>
        </trans-unit>
        <trans-unit id="3c525abb133dd243eb90f32e82df7ad93d5c1dde" translate="yes" xml:space="preserve">
          <source>The only operation provided by the time source is &lt;a href=&quot;mark-now&quot;&gt;markNow&lt;/a&gt;. It returns a &lt;a href=&quot;../-time-mark/index&quot;&gt;TimeMark&lt;/a&gt;, which can be used to query the elapsed time later.</source>
          <target state="translated">时间源提供的唯一操作是&lt;a href=&quot;mark-now&quot;&gt;markNow&lt;/a&gt;。它返回一个&lt;a href=&quot;../-time-mark/index&quot;&gt;TimeMark&lt;/a&gt;，可用于稍后查询经过的时间。</target>
        </trans-unit>
        <trans-unit id="9824ffa4fbac1aa2ba4df2857cc7d27ae42fbdf3" translate="yes" xml:space="preserve">
          <source>The only target for which it is not available is &lt;a href=&quot;https://en.wikipedia.org/wiki/WebAssembly&quot;&gt;WebAssembly&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;https://en.wikipedia.org/wiki/WebAssembly&quot;&gt;WebAssembly&lt;/a&gt;是唯一无法使用的目标。</target>
        </trans-unit>
        <trans-unit id="20601b96604d0e7211b7510d021f94ac0577f4a7" translate="yes" xml:space="preserve">
          <source>The only thing left to do is compile our application (Build|Build Project), and once the JavaScript files have been generated, we can open the &lt;code&gt;index.html&lt;/code&gt; file in the browser and see the result in the console debug window.</source>
          <target state="translated">剩下要做的就是编译我们的应用程序（Build | Build Project），并且一旦生成了JavaScript文件，我们就可以在浏览器中打开 &lt;code&gt;index.html&lt;/code&gt; 文件，并在控制台调试窗口中查看结果。</target>
        </trans-unit>
        <trans-unit id="940b1bdb9d47159d1535cf808141916fc2b5f10e" translate="yes" xml:space="preserve">
          <source>The operation doesn't preserve copied file attributes such as creation/modification date, permissions, etc.</source>
          <target state="translated">该操作不保留复制的文件属性,如创建/修改日期、权限等。</target>
        </trans-unit>
        <trans-unit id="b9a452f893e9486c5fbe89e3c1a52b0da8c35684" translate="yes" xml:space="preserve">
          <source>The operation is &lt;em&gt;intermediate&lt;/em&gt; and &lt;em&gt;stateful&lt;/em&gt;.</source>
          <target state="translated">操作&lt;em&gt;中间&lt;/em&gt;和&lt;em&gt;有状态&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="64f2d6f436a63697c12d9826dd0b449a2c8ece4d" translate="yes" xml:space="preserve">
          <source>The operation is &lt;em&gt;intermediate&lt;/em&gt; and &lt;em&gt;stateless&lt;/em&gt;.</source>
          <target state="translated">该操作是&lt;em&gt;中间&lt;/em&gt;且&lt;em&gt;无状态的&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="2f74c9f051d5d0a5178895ef9787aac4f50f4820" translate="yes" xml:space="preserve">
          <source>The operation is &lt;em&gt;intermediate&lt;/em&gt; for this sequence and &lt;em&gt;terminal&lt;/em&gt; and &lt;em&gt;stateful&lt;/em&gt; for the &lt;a href=&quot;minus#kotlin.sequences%24minus%28kotlin.sequences.Sequence%28%28kotlin.sequences.minus.T%29%29%2C+kotlin.sequences.Sequence%28%28kotlin.sequences.minus.T%29%29%29%2Felements&quot;&gt;elements&lt;/a&gt; sequence.</source>
          <target state="translated">操作是&lt;em&gt;中间&lt;/em&gt;此序列和&lt;em&gt;终端&lt;/em&gt;和&lt;em&gt;有状态&lt;/em&gt;的&lt;a href=&quot;minus#kotlin.sequences%24minus%28kotlin.sequences.Sequence%28%28kotlin.sequences.minus.T%29%29%2C+kotlin.sequences.Sequence%28%28kotlin.sequences.minus.T%29%29%29%2Felements&quot;&gt;元素&lt;/a&gt;序列。</target>
        </trans-unit>
        <trans-unit id="790886232e90f42fd32ca4859b4baabd53b9cbd8" translate="yes" xml:space="preserve">
          <source>The operation is &lt;em&gt;intermediate&lt;/em&gt; for this sequence and &lt;em&gt;terminal&lt;/em&gt; and &lt;em&gt;stateful&lt;/em&gt; for the &lt;a href=&quot;minus#kotlin.sequences%24minus(kotlin.sequences.Sequence((kotlin.sequences.minus.T)),%20kotlin.sequences.Sequence((kotlin.sequences.minus.T)))/elements&quot;&gt;elements&lt;/a&gt; sequence.</source>
          <target state="translated">操作是&lt;em&gt;中间&lt;/em&gt;此序列和&lt;em&gt;终端&lt;/em&gt;和&lt;em&gt;有状态&lt;/em&gt;的&lt;a href=&quot;minus#kotlin.sequences%24minus(kotlin.sequences.Sequence((kotlin.sequences.minus.T)),%20kotlin.sequences.Sequence((kotlin.sequences.minus.T)))/elements&quot;&gt;元素&lt;/a&gt;序列。</target>
        </trans-unit>
        <trans-unit id="f90173c5f7dc2e732f31878b5387f1009c2ad309" translate="yes" xml:space="preserve">
          <source>The operation is &lt;em&gt;terminal&lt;/em&gt;.</source>
          <target state="translated">操作是&lt;em&gt;终端&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="24cec715dc71cea63c8c77aa342afd935860c2d6" translate="yes" xml:space="preserve">
          <source>The operations on floating point numbers discussed in this section are:</source>
          <target state="translated">本节讨论的浮点数的操作有:。</target>
        </trans-unit>
        <trans-unit id="c81054e9fa59c990a7f0009d1471af7d0d80d085" translate="yes" xml:space="preserve">
          <source>The operator &lt;code&gt;plus&lt;/code&gt; provides a way to add key-value pair(s) to a read-only map producing a new map, however there was not a simple way to do the opposite: to remove a key from the map you have to resort to less straightforward ways to like &lt;code&gt;Map.filter()&lt;/code&gt; or &lt;code&gt;Map.filterKeys()&lt;/code&gt;. Now the operator &lt;code&gt;minus&lt;/code&gt; fills this gap. There are 4 overloads available: for removing a single key, a collection of keys, a sequence of keys and an array of keys.</source>
          <target state="translated">运算符 &lt;code&gt;plus&lt;/code&gt; 提供了一种将键值对添加到生成新图的只读图的方法，但是，没有相反的简单方法：从图上删除键不太喜欢 &lt;code&gt;Map.filter()&lt;/code&gt; 或 &lt;code&gt;Map.filterKeys()&lt;/code&gt; 的简单方法。现在，操作员 &lt;code&gt;minus&lt;/code&gt; 填补了这个空白。有4种重载可用：用于删除单个键，键集合，键序列和键数组。</target>
        </trans-unit>
        <trans-unit id="589b061bf341b244f13012e5b84b32bc9b5435d4" translate="yes" xml:space="preserve">
          <source>The opt-in requirement annotations &lt;code&gt;@RequiresOptIn&lt;/code&gt; and &lt;code&gt;@OptIn&lt;/code&gt; are &lt;a href=&quot;evolution/components-stability&quot;&gt;experimental&lt;/a&gt;. See the usage details &lt;a href=&quot;#experimental-status-of-the-opt-in-requirements&quot;&gt;below&lt;/a&gt;.</source>
          <target state="translated">选择加入的需求注释 &lt;code&gt;@RequiresOptIn&lt;/code&gt; 和 &lt;code&gt;@OptIn&lt;/code&gt; 是&lt;a href=&quot;evolution/components-stability&quot;&gt;实验性的&lt;/a&gt;。请参阅&lt;a href=&quot;#experimental-status-of-the-opt-in-requirements&quot;&gt;下面&lt;/a&gt;的用法详细信息。</target>
        </trans-unit>
        <trans-unit id="4a0d74a1654f94e426a64debf510f893991553be" translate="yes" xml:space="preserve">
          <source>The opt-in requirement mechanism is &lt;a href=&quot;evolution/components-stability&quot;&gt;experimental&lt;/a&gt; in Kotlin 1.3. This means that in future releases it may be changed in ways that make it incompatible.</source>
          <target state="translated">选择加入的需求机制在Kotlin 1.3中是&lt;a href=&quot;evolution/components-stability&quot;&gt;实验性的&lt;/a&gt;。这意味着在将来的发行版中，可能会以使其不兼容的方式对其进行更改。</target>
        </trans-unit>
        <trans-unit id="a3dfe13bda3af06c0e25457985a11e6db0a3ea90" translate="yes" xml:space="preserve">
          <source>The order of elements is an important aspect of certain collection types. For example, two lists of the same elements are not equal if their elements are ordered differently.</source>
          <target state="translated">元素的顺序是某些集合类型的一个重要方面。例如,由相同元素组成的两个列表,如果其元素的顺序不同,则不相等。</target>
        </trans-unit>
        <trans-unit id="97cb339b9434116a61ea466562966c5cfa7e6e7a" translate="yes" xml:space="preserve">
          <source>The order of operations execution is different as well: &lt;code&gt;Sequence&lt;/code&gt; performs all the processing steps one-by-one for every single element. In turn, &lt;code&gt;Iterable&lt;/code&gt; completes each step for the whole collection and then proceeds to the next step.</source>
          <target state="translated">操作执行的顺序也不同： &lt;code&gt;Sequence&lt;/code&gt; 对每个元素逐一执行所有处理步骤。反过来， &lt;code&gt;Iterable&lt;/code&gt; 完成整个集合的每个步骤，然后进行下一步。</target>
        </trans-unit>
        <trans-unit id="812e3a1f04f0d82a55115416fefd4d8f871219e6" translate="yes" xml:space="preserve">
          <source>The original exception is handled by the parent only when all its children terminate, which is demonstrated by the following example.</source>
          <target state="translated">只有当其所有的子代都终止时,父代才会对原异常进行处理,下面的例子就证明了这一点。</target>
        </trans-unit>
        <trans-unit id="6bf2e73336e2395ab6cd6eb4e4d1c0edd8855b4e" translate="yes" xml:space="preserve">
          <source>The output here in this example is a good demonstration of how &lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines.flow/flat-map-latest.html&quot;&gt;flatMapLatest&lt;/a&gt; works:</source>
          <target state="translated">此示例中的输出很好地演示了&lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines.flow/flat-map-latest.html&quot;&gt;flatMapLatest的&lt;/a&gt;工作方式：</target>
        </trans-unit>
        <trans-unit id="b74ff8ee45b0b8f3cea227a5cb8b0ca2512e0fa1" translate="yes" xml:space="preserve">
          <source>The output is:</source>
          <target state="translated">产出是:</target>
        </trans-unit>
        <trans-unit id="21b2e4b0974b9e68e9c52fc5e687c75f3f109501" translate="yes" xml:space="preserve">
          <source>The output it produces with &lt;code&gt;-Dkotlinx.coroutines.debug&lt;/code&gt; JVM option is similar to:</source>
          <target state="translated">它使用 &lt;code&gt;-Dkotlinx.coroutines.debug&lt;/code&gt; JVM选项生成的输出类似于：</target>
        </trans-unit>
        <trans-unit id="335f16bba6cd2578184d6190d9013ac4ec39e185" translate="yes" xml:space="preserve">
          <source>The output of a config script with &lt;code&gt;--libs&lt;/code&gt; will be passed as a &lt;code&gt;-linkedArgs&lt;/code&gt;&lt;code&gt;kotlinc&lt;/code&gt; flag value (quoted) when compiling.</source>
          <target state="translated">带有 &lt;code&gt;--libs&lt;/code&gt; 的配置脚本的输出将在编译时作为 &lt;code&gt;-linkedArgs&lt;/code&gt; &lt;code&gt;kotlinc&lt;/code&gt; 标志值（引用）传递。</target>
        </trans-unit>
        <trans-unit id="3fc8d11bf9067241fdb9ed7a73ee99be1f2779ef" translate="yes" xml:space="preserve">
          <source>The output of the example is the same, even though we do not have &lt;code&gt;try/catch&lt;/code&gt; around the code anymore.</source>
          <target state="translated">即使我们不再需要 &lt;code&gt;try/catch&lt;/code&gt; 代码，示例的输出也相同。</target>
        </trans-unit>
        <trans-unit id="0febc2ff48de2800dd49e2c0e7bf4ea28482b37f" translate="yes" xml:space="preserve">
          <source>The output of this code clearly shows that the execution of the &lt;code&gt;flow { ... }&lt;/code&gt; body in the &lt;code&gt;numbers()&lt;/code&gt; function stopped after emitting the second number:</source>
          <target state="translated">此代码的输出清楚地表明，在发出第二个数字之后， &lt;code&gt;numbers()&lt;/code&gt; 函数中的 &lt;code&gt;flow { ... }&lt;/code&gt; 主体的执行停止了：</target>
        </trans-unit>
        <trans-unit id="a335f7db5ad6c9bad17c284454dcaeefbd6be278" translate="yes" xml:space="preserve">
          <source>The output of this code is (with &lt;a href=&quot;https://github.com/Kotlin/kotlinx.coroutines/blob/master/docs/coroutine-context-and-dispatchers.md#debugging-coroutines-and-threads&quot;&gt;debug&lt;/a&gt;):</source>
          <target state="translated">此代码的输出是（带&lt;a href=&quot;https://github.com/Kotlin/kotlinx.coroutines/blob/master/docs/coroutine-context-and-dispatchers.md#debugging-coroutines-and-threads&quot;&gt;debug&lt;/a&gt;）：</target>
        </trans-unit>
        <trans-unit id="d91d0dd8fa3a619861392f5c074fea2d8db4eaf2" translate="yes" xml:space="preserve">
          <source>The output of this code is:</source>
          <target state="translated">该代码的输出是:</target>
        </trans-unit>
        <trans-unit id="647a971dfd3700d13cfdc057be9aa0bc71494501" translate="yes" xml:space="preserve">
          <source>The output of this code shows that the &lt;code&gt;filter()&lt;/code&gt; and &lt;code&gt;map()&lt;/code&gt; functions are called only when building the result list. So, you first see the line of text &lt;code&gt;&amp;ldquo;Lengths of..&amp;rdquo;&lt;/code&gt; and then the sequence processing starts. Note that for elements left after filtering, the map executes before filtering the next element. When the result size reaches 4, the processing stops because it's the largest possible size that &lt;code&gt;take(4)&lt;/code&gt; can return.</source>
          <target state="translated">此代码的输出显示仅在构建结果列表时才调用 &lt;code&gt;filter()&lt;/code&gt; 和 &lt;code&gt;map()&lt;/code&gt; 函数。因此，您首先看到文本行 &lt;code&gt;&amp;ldquo;Lengths of..&amp;rdquo;&lt;/code&gt; ，然后开始进行序列处理。请注意，对于过滤后剩余的元素，映射将在过滤下一个元素之前执行。当结果大小达到4时，处理将停止，因为它是 &lt;code&gt;take(4)&lt;/code&gt; 可以返回的最大大小。</target>
        </trans-unit>
        <trans-unit id="4914ca42a65eab132541007ef394cf246de086f7" translate="yes" xml:space="preserve">
          <source>The output of this code with &lt;code&gt;-Dkotlinx.coroutines.debug&lt;/code&gt; JVM option is:</source>
          <target state="translated">使用 &lt;code&gt;-Dkotlinx.coroutines.debug&lt;/code&gt; JVM选项的此代码的输出为：</target>
        </trans-unit>
        <trans-unit id="ef205ce911c3cb52ce12493307210d6d78d5dcb8" translate="yes" xml:space="preserve">
          <source>The output of this code with the &lt;code&gt;-Dkotlinx.coroutines.debug&lt;/code&gt; JVM option is:</source>
          <target state="translated">带有 &lt;code&gt;-Dkotlinx.coroutines.debug&lt;/code&gt; JVM选项的此代码的输出为：</target>
        </trans-unit>
        <trans-unit id="fdcf4102afb246d995583e41d5abf443dc9b24d6" translate="yes" xml:space="preserve">
          <source>The output of this example is:</source>
          <target state="translated">这个例子的输出是:</target>
        </trans-unit>
        <trans-unit id="d7f56deac4aeaab1be47a9075fd39d0cd515a13f" translate="yes" xml:space="preserve">
          <source>The output of this is a blank page that prints &lt;code&gt;Hello JavaScript!&lt;/code&gt; to the console.</source>
          <target state="translated">输出为空白页，其中打印 &lt;code&gt;Hello JavaScript!&lt;/code&gt; 到控制台。</target>
        </trans-unit>
        <trans-unit id="c7adcbeb9a00e6f9f8d55d348527ceb949cebeb0" translate="yes" xml:space="preserve">
          <source>The output should be:</source>
          <target state="translated">输出应该是:</target>
        </trans-unit>
        <trans-unit id="0b8e02788f842ec131e59334f158260f8f72ffc7" translate="yes" xml:space="preserve">
          <source>The output will be similar to the the following one, albeit the processor ids that receive each specific integer may be different:</source>
          <target state="translated">尽管接收每个特定整数的处理器ID可能不同,但输出将与下面的类似。</target>
        </trans-unit>
        <trans-unit id="dacb06aada01cf9353bf2a419b476781dd3c13a9" translate="yes" xml:space="preserve">
          <source>The overall effect is exactly as if the &lt;a href=&quot;append#kotlin.text.StringBuilder%24append(kotlin.Any?)/value&quot;&gt;value&lt;/a&gt; were converted to a string by the &lt;code&gt;value.toString()&lt;/code&gt; method, and then that string was appended to this string builder.</source>
          <target state="translated">总体效果就好像是通过 &lt;code&gt;value.toString()&lt;/code&gt; 方法将&lt;a href=&quot;append#kotlin.text.StringBuilder%24append(kotlin.Any?)/value&quot;&gt;值&lt;/a&gt;转换为字符串，然后将该字符串附加到此字符串生成器一样。</target>
        </trans-unit>
        <trans-unit id="2fa46c20aa677e08c4fbabd2c01f13037e7e1a67" translate="yes" xml:space="preserve">
          <source>The overall effect is exactly as if the &lt;a href=&quot;append#kotlin.text.StringBuilder%24append(kotlin.Boolean)/value&quot;&gt;value&lt;/a&gt; were converted to a string by the &lt;code&gt;value.toString()&lt;/code&gt; method, and then that string was appended to this string builder.</source>
          <target state="translated">总体效果就好像是通过 &lt;code&gt;value.toString()&lt;/code&gt; 方法将&lt;a href=&quot;append#kotlin.text.StringBuilder%24append(kotlin.Boolean)/value&quot;&gt;值&lt;/a&gt;转换为字符串，然后将该字符串附加到此字符串生成器一样。</target>
        </trans-unit>
        <trans-unit id="3d95d1d469be2176ebbc72a21468acef591255ad" translate="yes" xml:space="preserve">
          <source>The overall effect is exactly as if the &lt;a href=&quot;insert#kotlin.text.StringBuilder%24insert(kotlin.Int,%20kotlin.Any?)/value&quot;&gt;value&lt;/a&gt; were converted to a string by the &lt;code&gt;value.toString()&lt;/code&gt; method, and then that string was inserted into this string builder at the specified &lt;a href=&quot;insert#kotlin.text.StringBuilder%24insert(kotlin.Int,%20kotlin.Any?)/index&quot;&gt;index&lt;/a&gt;.</source>
          <target state="translated">总体效果就好像是通过 &lt;code&gt;value.toString()&lt;/code&gt; 方法将&lt;a href=&quot;insert#kotlin.text.StringBuilder%24insert(kotlin.Int,%20kotlin.Any?)/value&quot;&gt;值&lt;/a&gt;转换为字符串，然后将该字符串在指定的&lt;a href=&quot;insert#kotlin.text.StringBuilder%24insert(kotlin.Int,%20kotlin.Any?)/index&quot;&gt;index&lt;/a&gt;处插入到此字符串构建器中一样。</target>
        </trans-unit>
        <trans-unit id="76acc76cfe7700de42074cf269fd6d05489f7e96" translate="yes" xml:space="preserve">
          <source>The overall effect is exactly as if the &lt;a href=&quot;insert#kotlin.text.StringBuilder%24insert(kotlin.Int,%20kotlin.Boolean)/value&quot;&gt;value&lt;/a&gt; were converted to a string by the &lt;code&gt;value.toString()&lt;/code&gt; method, and then that string was inserted into this string builder at the specified &lt;a href=&quot;insert#kotlin.text.StringBuilder%24insert(kotlin.Int,%20kotlin.Boolean)/index&quot;&gt;index&lt;/a&gt;.</source>
          <target state="translated">总体效果就好像是通过 &lt;code&gt;value.toString()&lt;/code&gt; 方法将&lt;a href=&quot;insert#kotlin.text.StringBuilder%24insert(kotlin.Int,%20kotlin.Boolean)/value&quot;&gt;值&lt;/a&gt;转换为字符串，然后将该字符串在指定的&lt;a href=&quot;insert#kotlin.text.StringBuilder%24insert(kotlin.Int,%20kotlin.Boolean)/index&quot;&gt;index&lt;/a&gt;处插入到此字符串构建器中一样。</target>
        </trans-unit>
        <trans-unit id="b56500d82b30990e46ae5220b62e1c3f4e225003" translate="yes" xml:space="preserve">
          <source>The overriding constructor must have the same parameter names and types as the overridden one.</source>
          <target state="translated">覆盖的构造函数必须与被覆盖的构造函数具有相同的参数名称和类型。</target>
        </trans-unit>
        <trans-unit id="d0fd3de86e4826ba8c7cde26e87523bae54839bc" translate="yes" xml:space="preserve">
          <source>The packages from platform libraries are available by default. No special link flags need to be specified to use them. &lt;code&gt;Kotlin/Native&lt;/code&gt; compiler automatically detects which of the platform libraries have been accessed and automatically links the needed libraries.</source>
          <target state="translated">默认情况下，平台库中的软件包可用。无需指定特殊的链接标志即可使用它们。 &lt;code&gt;Kotlin/Native&lt;/code&gt; 编译器会自动检测已访问了哪些平台库，并自动链接所需的库。</target>
        </trans-unit>
        <trans-unit id="f9eac82235030e7e86a0bff236552f847d9867dd" translate="yes" xml:space="preserve">
          <source>The parameter is declared in a member function and one of the corresponding parameters in the super functions is optional.</source>
          <target state="translated">该参数在成员函数中声明,在超级函数中对应的参数之一是可选的。</target>
        </trans-unit>
        <trans-unit id="1a311c087dc5f415abb270981ad04ec98ba47164" translate="yes" xml:space="preserve">
          <source>The parameter must not &lt;a href=&quot;#variable-number-of-arguments-varargs&quot;&gt;accept variable number of arguments&lt;/a&gt; and must have no &lt;a href=&quot;#default-arguments&quot;&gt;default value&lt;/a&gt;.</source>
          <target state="translated">该参数不能&lt;a href=&quot;#variable-number-of-arguments-varargs&quot;&gt;接受可变数量的参数，&lt;/a&gt;并且必须没有&lt;a href=&quot;#default-arguments&quot;&gt;默认值&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="85604054f8838d2bde0848abdc31a44140b69283" translate="yes" xml:space="preserve">
          <source>The parameter of &lt;code&gt;@JsName&lt;/code&gt; is required to be a constant string literal which is a valid identifier. The compiler will report an error on any attempt to pass non-identifier string to &lt;code&gt;@JsName&lt;/code&gt;. The following example produces a compile-time error:</source>
          <target state="translated">&lt;code&gt;@JsName&lt;/code&gt; 的参数必须是常量字符串文字，它是有效的标识符。尝试将非标识符字符串传递给 &lt;code&gt;@JsName&lt;/code&gt; 时，编译器将报告错误。下面的示例产生一个编译时错误：</target>
        </trans-unit>
        <trans-unit id="d09d94c8171c7316821713755fce66dc3c85e74a" translate="yes" xml:space="preserve">
          <source>The parameter of &lt;code&gt;js&lt;/code&gt; is required to be a string constant. So, the following code is incorrect:</source>
          <target state="translated">&lt;code&gt;js&lt;/code&gt; 的参数必须为字符串常量。因此，以下代码不正确：</target>
        </trans-unit>
        <trans-unit id="64419b25b7715086a3a5cdbe138547b81a0a98a1" translate="yes" xml:space="preserve">
          <source>The parameter type of a function-typed parameter (the user is passing a function that can handle any &lt;code&gt;Fruit&lt;/code&gt;, and it will be given an &lt;code&gt;Apple&lt;/code&gt;)</source>
          <target state="translated">函数类型参数的参数类型（用户正在传递可以处理任何 &lt;code&gt;Fruit&lt;/code&gt; 的函数，并且它将获得 &lt;code&gt;Apple&lt;/code&gt; ）</target>
        </trans-unit>
        <trans-unit id="6ef05f581070101fa2afecc255e98671537cdea0" translate="yes" xml:space="preserve">
          <source>The parameters and the return type are specified in the same way as for regular functions, except that the parameter types can be omitted if they can be inferred from context:</source>
          <target state="translated">参数和返回类型的指定方式与普通函数相同,只是如果可以从上下文中推断出参数类型,则可以省略。</target>
        </trans-unit>
        <trans-unit id="d2818a5f4b17e0f3d50df0846a19518863e09067" translate="yes" xml:space="preserve">
          <source>The parameters of &lt;code&gt;provideDelegate&lt;/code&gt; are the same as for &lt;code&gt;getValue&lt;/code&gt;:</source>
          <target state="translated">&lt;code&gt;provideDelegate&lt;/code&gt; 的参数与 &lt;code&gt;getValue&lt;/code&gt; 相同：</target>
        </trans-unit>
        <trans-unit id="87e2c98795ae2a97eb179a3bb9ccc1f2e2c982d8" translate="yes" xml:space="preserve">
          <source>The passed type must satisfy all conditions of the &lt;code&gt;where&lt;/code&gt; clause simultaneously. In the above example, the &lt;code&gt;T&lt;/code&gt; type must implement &lt;em&gt;both&lt;/em&gt;&lt;code&gt;CharSequence&lt;/code&gt; and &lt;code&gt;Comparable&lt;/code&gt;.</source>
          <target state="translated">传递的类型必须同时满足 &lt;code&gt;where&lt;/code&gt; 子句的所有条件。在上面的例子中， &lt;code&gt;T&lt;/code&gt; 类型必须实现&lt;em&gt;两者&lt;/em&gt; &lt;code&gt;CharSequence&lt;/code&gt; 和 &lt;code&gt;Comparable&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="0f70942d020a14104380fd6e7920e316921b42c6" translate="yes" xml:space="preserve">
          <source>The path refers to the default output location that IntelliJ IDEA uses when we compile the application. Below we'll see how to change this.</source>
          <target state="translated">这个路径指的是IntelliJ IDEA在我们编译应用程序时使用的默认输出位置。下面我们就来看看如何改变这个位置。</target>
        </trans-unit>
        <trans-unit id="38dc6771af81ffcbac99f06b8c7fb1ebccf80f9d" translate="yes" xml:space="preserve">
          <source>The pattern string of this regular expression.</source>
          <target state="translated">该正则表达式的模式字符串。</target>
        </trans-unit>
        <trans-unit id="1144f4eed1bc15fed420102b18cb1c4e49c25335" translate="yes" xml:space="preserve">
          <source>The pattern where a coroutine is producing a sequence of elements is quite common. This is a part of &lt;em&gt;producer-consumer&lt;/em&gt; pattern that is often found in concurrent code. You could abstract such a producer into a function that takes channel as its parameter, but this goes contrary to common sense that results must be returned from functions.</source>
          <target state="translated">协程产生一系列元素的模式非常普遍。这是通常在并发代码中发现的&lt;em&gt;生产者-消费者&lt;/em&gt;模式的一部分。您可以将这样的生产者抽象为以channel为参数的函数，但这与必须从函数返回结果的常识相反。</target>
        </trans-unit>
        <trans-unit id="0452bcbdd609690466ea082ea5af90749aa8dcc5" translate="yes" xml:space="preserve">
          <source>The placeholder &lt;code&gt;&amp;lt;...&amp;gt;&lt;/code&gt; should be replaced with one of the plugin names that can be found in further sections.</source>
          <target state="translated">占位符 &lt;code&gt;&amp;lt;...&amp;gt;&lt;/code&gt; 应该替换为可以在后续章节中找到的插件名称之一。</target>
        </trans-unit>
        <trans-unit id="02d885dcfef73f7197c98c6f94fc980ae42855f5" translate="yes" xml:space="preserve">
          <source>The plugin allows you to customize the pom generated for the publication with the &lt;code&gt;pom&lt;/code&gt; code block available for every component:</source>
          <target state="translated">该插件允许您使用每个组件可用的 &lt;code&gt;pom&lt;/code&gt; 代码块来自定义为发布生成的pom：</target>
        </trans-unit>
        <trans-unit id="73896d94724b0c15c533e7832f50fc2c5d439771" translate="yes" xml:space="preserve">
          <source>The plugin allows you to declare dependencies on files and other projects using traditional Gradle's mechanism of configurations. The plugin supports Kotlin multiplatform projects allowing you to declare the &lt;code&gt;expectedBy&lt;/code&gt; dependencies</source>
          <target state="translated">该插件使您可以使用传统的Gradle配置机制声明对文件和其他项目的依赖性。该插件支持科特林多项目让你申报 &lt;code&gt;expectedBy&lt;/code&gt; 依赖</target>
        </trans-unit>
        <trans-unit id="244b72be53e91483eb1922508647ced0bb4a9e3c" translate="yes" xml:space="preserve">
          <source>The plugin also provides useful testing features, for example:</source>
          <target state="translated">例如,该插件还提供了有用的测试功能。</target>
        </trans-unit>
        <trans-unit id="e2b8c11954d8c4f9f34c307b3e3ea0e12583e5af" translate="yes" xml:space="preserve">
          <source>The plugin builds a test executable for all the targets specified for the &lt;code&gt;test&lt;/code&gt; component. If the current host platform is included in this list the test running tasks are also created. To run tests, execute the standard lifecycle &lt;code&gt;check&lt;/code&gt; task:</source>
          <target state="translated">该插件为为 &lt;code&gt;test&lt;/code&gt; 组件指定的所有目标构建测试可执行文件。如果此列表中包含当前主机平台，则还将创建测试运行任务。要运行测试，请执行标准的生命周期 &lt;code&gt;check&lt;/code&gt; 任务：</target>
        </trans-unit>
        <trans-unit id="cbd612ac393a456f8773735c05ddbd5f91419396" translate="yes" xml:space="preserve">
          <source>The plugin creates a compilation task for each combination of the target, output kind, and build type. The tasks have the following naming convention:</source>
          <target state="translated">该插件为目标、输出类型和构建类型的每个组合创建一个编译任务。任务的命名约定如下。</target>
        </trans-unit>
        <trans-unit id="b7797d4ea1281347f08b98f3d1593b5740b623cc" translate="yes" xml:space="preserve">
          <source>The plugin is shipped with a customized version of the &lt;code&gt;kotlinx.serialization&lt;/code&gt; plugin. To use it you don't have to add new buildscript dependencies, just apply the plugins and add a dependency on the serialization library:</source>
          <target state="translated">该插件随附了 &lt;code&gt;kotlinx.serialization&lt;/code&gt; 插件的自定义版本。要使用它，您不必添加新的buildscript依赖项，只需应用插件并在序列化库上添加依赖项即可：</target>
        </trans-unit>
        <trans-unit id="a5b5cad9084adc7ffa681b4e8b7b6b009920bbab" translate="yes" xml:space="preserve">
          <source>The plugin option format is: &lt;code&gt;-P plugin:&amp;lt;plugin id&amp;gt;:&amp;lt;key&amp;gt;=&amp;lt;value&amp;gt;&lt;/code&gt;. Options can be repeated.</source>
          <target state="translated">插件选项格式为 &lt;code&gt;-P plugin:&amp;lt;plugin id&amp;gt;:&amp;lt;key&amp;gt;=&amp;lt;value&amp;gt;&lt;/code&gt; 。选项可以重复。</target>
        </trans-unit>
        <trans-unit id="4b96dd9cca135b083ee411ceef82d46edf74c104" translate="yes" xml:space="preserve">
          <source>The plugin specifies the following annotations: &lt;a href=&quot;http://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/stereotype/Component.html&quot;&gt;&lt;code&gt;@Component&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/scheduling/annotation/Async.html&quot;&gt;&lt;code&gt;@Async&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;http://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/transaction/annotation/Transactional.html&quot;&gt;&lt;code&gt;@Transactional&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;http://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/cache/annotation/Cacheable.html&quot;&gt;&lt;code&gt;@Cacheable&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;https://docs.spring.io/spring-boot/docs/current/api/org/springframework/boot/test/context/SpringBootTest.html&quot;&gt;&lt;code&gt;@SpringBootTest&lt;/code&gt;&lt;/a&gt;. Thanks to meta-annotations support classes annotated with &lt;a href=&quot;https://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/context/annotation/Configuration.html&quot;&gt;&lt;code&gt;@Configuration&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/stereotype/Controller.html&quot;&gt;&lt;code&gt;@Controller&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/bind/annotation/RestController.html&quot;&gt;&lt;code&gt;@RestController&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/stereotype/Service.html&quot;&gt;&lt;code&gt;@Service&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/stereotype/Repository.html&quot;&gt;&lt;code&gt;@Repository&lt;/code&gt;&lt;/a&gt; are automatically opened since these annotations are meta-annotated with &lt;a href=&quot;http://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/stereotype/Component.html&quot;&gt;&lt;code&gt;@Component&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">该插件指定了以下注释：&lt;a href=&quot;http://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/stereotype/Component.html&quot;&gt; &lt;code&gt;@Component&lt;/code&gt; &lt;/a&gt;，&lt;a href=&quot;http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/scheduling/annotation/Async.html&quot;&gt; &lt;code&gt;@Async&lt;/code&gt; &lt;/a&gt;，&lt;a href=&quot;http://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/transaction/annotation/Transactional.html&quot;&gt; &lt;code&gt;@Transactional&lt;/code&gt; &lt;/a&gt;，&lt;a href=&quot;http://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/cache/annotation/Cacheable.html&quot;&gt; &lt;code&gt;@Cacheable&lt;/code&gt; &lt;/a&gt;和&lt;a href=&quot;https://docs.spring.io/spring-boot/docs/current/api/org/springframework/boot/test/context/SpringBootTest.html&quot;&gt; &lt;code&gt;@SpringBootTest&lt;/code&gt; &lt;/a&gt;。由于元注释支持与注解的类&lt;a href=&quot;https://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/context/annotation/Configuration.html&quot;&gt; &lt;code&gt;@Configuration&lt;/code&gt; &lt;/a&gt;，&lt;a href=&quot;https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/stereotype/Controller.html&quot;&gt; &lt;code&gt;@Controller&lt;/code&gt; &lt;/a&gt;，&lt;a href=&quot;https://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/bind/annotation/RestController.html&quot;&gt; &lt;code&gt;@RestController&lt;/code&gt; &lt;/a&gt;，&lt;a href=&quot;https://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/stereotype/Service.html&quot;&gt; &lt;code&gt;@Service&lt;/code&gt; &lt;/a&gt;或&lt;a href=&quot;https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/stereotype/Repository.html&quot;&gt; &lt;code&gt;@Repository&lt;/code&gt; &lt;/a&gt;会自动打开，因为这些注释是元注解为&lt;a href=&quot;http://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/stereotype/Component.html&quot;&gt; &lt;code&gt;@Component&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="0dfd81b7e1e9f7d39d94072265d5f11849366557" translate="yes" xml:space="preserve">
          <source>The plugin specifies the following annotations: &lt;a href=&quot;https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/stereotype/Component.html&quot;&gt;&lt;code&gt;@Component&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/scheduling/annotation/Async.html&quot;&gt;&lt;code&gt;@Async&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/transaction/annotation/Transactional.html&quot;&gt;&lt;code&gt;@Transactional&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/cache/annotation/Cacheable.html&quot;&gt;&lt;code&gt;@Cacheable&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;https://docs.spring.io/spring-boot/docs/current/api/org/springframework/boot/test/context/SpringBootTest.html&quot;&gt;&lt;code&gt;@SpringBootTest&lt;/code&gt;&lt;/a&gt;. Thanks to meta-annotations support classes annotated with &lt;a href=&quot;https://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/context/annotation/Configuration.html&quot;&gt;&lt;code&gt;@Configuration&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/stereotype/Controller.html&quot;&gt;&lt;code&gt;@Controller&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/bind/annotation/RestController.html&quot;&gt;&lt;code&gt;@RestController&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/stereotype/Service.html&quot;&gt;&lt;code&gt;@Service&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/stereotype/Repository.html&quot;&gt;&lt;code&gt;@Repository&lt;/code&gt;&lt;/a&gt; are automatically opened since these annotations are meta-annotated with &lt;a href=&quot;https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/stereotype/Component.html&quot;&gt;&lt;code&gt;@Component&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">该插件指定了以下注释：&lt;a href=&quot;https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/stereotype/Component.html&quot;&gt; &lt;code&gt;@Component&lt;/code&gt; &lt;/a&gt;，&lt;a href=&quot;https://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/scheduling/annotation/Async.html&quot;&gt; &lt;code&gt;@Async&lt;/code&gt; &lt;/a&gt;，&lt;a href=&quot;https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/transaction/annotation/Transactional.html&quot;&gt; &lt;code&gt;@Transactional&lt;/code&gt; &lt;/a&gt;，&lt;a href=&quot;https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/cache/annotation/Cacheable.html&quot;&gt; &lt;code&gt;@Cacheable&lt;/code&gt; &lt;/a&gt;和&lt;a href=&quot;https://docs.spring.io/spring-boot/docs/current/api/org/springframework/boot/test/context/SpringBootTest.html&quot;&gt; &lt;code&gt;@SpringBootTest&lt;/code&gt; &lt;/a&gt;。由于元注释支持与注解的类&lt;a href=&quot;https://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/context/annotation/Configuration.html&quot;&gt; &lt;code&gt;@Configuration&lt;/code&gt; &lt;/a&gt;，&lt;a href=&quot;https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/stereotype/Controller.html&quot;&gt; &lt;code&gt;@Controller&lt;/code&gt; &lt;/a&gt;，&lt;a href=&quot;https://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/bind/annotation/RestController.html&quot;&gt; &lt;code&gt;@RestController&lt;/code&gt; &lt;/a&gt;，&lt;a href=&quot;https://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/stereotype/Service.html&quot;&gt; &lt;code&gt;@Service&lt;/code&gt; &lt;/a&gt;或&lt;a href=&quot;https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/stereotype/Repository.html&quot;&gt; &lt;code&gt;@Repository&lt;/code&gt; &lt;/a&gt;会自动打开，因为这些注释是元注解为&lt;a href=&quot;https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/stereotype/Component.html&quot;&gt; &lt;code&gt;@Component&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="422a0ed13a769b30fb09b25e92467921db8dd51b" translate="yes" xml:space="preserve">
          <source>The plugin uses the same notation as the compiler. By default, test component uses the same targets as specified for the main one.</source>
          <target state="translated">插件使用与编译器相同的符号。默认情况下,测试组件使用与主测试组件相同的目标。</target>
        </trans-unit>
        <trans-unit id="1f3c2f2fca540697d8f63e00a5a21435f0484957" translate="yes" xml:space="preserve">
          <source>The podspec generated includes a path to an output framework and script phases which automate building this framework during a build process of an Xcode project. Some fields of the podspec file can be configured using the &lt;code&gt;kotlin.cocoapods { ... }&lt;/code&gt; code block.</source>
          <target state="translated">生成的podspec包括输出框架的路径和脚本阶段，这些阶段在Xcode项目的构建过程中自动构建该框架。可以使用 &lt;code&gt;kotlin.cocoapods { ... }&lt;/code&gt; 代码块来配置podspec文件的某些字段。</target>
        </trans-unit>
        <trans-unit id="4f2f6c39a4cfc0d578583a59ccc054d34affa473" translate="yes" xml:space="preserve">
          <source>The pointer with an opaque type.</source>
          <target state="translated">具有不透明类型的指针。</target>
        </trans-unit>
        <trans-unit id="cac38148225622f1c3ccca3dceed3d6a499e0217" translate="yes" xml:space="preserve">
          <source>The possible values of &lt;a href=&quot;returns#kotlin.contracts.ContractBuilder%24returns%28kotlin.Any%29%2Fvalue&quot;&gt;value&lt;/a&gt; are limited to &lt;code&gt;true&lt;/code&gt;, &lt;code&gt;false&lt;/code&gt; or &lt;code&gt;null&lt;/code&gt;.</source>
          <target state="translated">&lt;a href=&quot;returns#kotlin.contracts.ContractBuilder%24returns%28kotlin.Any%29%2Fvalue&quot;&gt;value&lt;/a&gt;的可能值限制为 &lt;code&gt;true&lt;/code&gt; ， &lt;code&gt;false&lt;/code&gt; 或 &lt;code&gt;null&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="ff2c8804ee232db23ae3d579f25ad98024549ce9" translate="yes" xml:space="preserve">
          <source>The possible values of &lt;a href=&quot;returns#kotlin.contracts.ContractBuilder%24returns(kotlin.Any?)/value&quot;&gt;value&lt;/a&gt; are limited to &lt;code&gt;true&lt;/code&gt;, &lt;code&gt;false&lt;/code&gt; or &lt;code&gt;null&lt;/code&gt;.</source>
          <target state="translated">&lt;a href=&quot;returns#kotlin.contracts.ContractBuilder%24returns(kotlin.Any?)/value&quot;&gt;value&lt;/a&gt;的可能值限制为 &lt;code&gt;true&lt;/code&gt; ， &lt;code&gt;false&lt;/code&gt; 或 &lt;code&gt;null&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="db453765e0a754bcf108983d99d14a9cceb4e257" translate="yes" xml:space="preserve">
          <source>The predicates in &lt;code&gt;filter()&lt;/code&gt; can only check the values of the elements. If you want to use element positions in the filter, use &lt;a href=&quot;../../api/latest/jvm/stdlib/kotlin.collections/filter-indexed&quot;&gt;&lt;code&gt;filterIndexed()&lt;/code&gt;&lt;/a&gt;. It takes a predicate with two arguments: the index and the value of an element.</source>
          <target state="translated">&lt;code&gt;filter()&lt;/code&gt; 中的谓词只能检查元素的值。如果要在过滤器中使用元素位置，请使用&lt;a href=&quot;../../api/latest/jvm/stdlib/kotlin.collections/filter-indexed&quot;&gt; &lt;code&gt;filterIndexed()&lt;/code&gt; &lt;/a&gt;。它带有两个参数的谓词：索引和元素的值。</target>
        </trans-unit>
        <trans-unit id="273bc9daf88463decafd479d30c651cc98374847" translate="yes" xml:space="preserve">
          <source>The prepared project sources can be directly downloaded from &lt;a href=&quot;https://github.com/kotlin/web-site-samples/archive/mpp-kn-app-groovy-macos.zip&quot;&gt;GitHub&lt;/a&gt;. &lt;a href=&quot;https://github.com/kotlin/web-site-samples/archive/mpp-kn-app-groovy-linux.zip&quot;&gt;GitHub&lt;/a&gt;. &lt;a href=&quot;https://github.com/kotlin/web-site-samples/archive/mpp-kn-app-groovy-windows.zip&quot;&gt;GitHub&lt;/a&gt;. &lt;a href=&quot;https://github.com/kotlin/web-site-samples/archive/mpp-kn-app-kotlin-macos.zip&quot;&gt;GitHub&lt;/a&gt;. &lt;a href=&quot;https://github.com/kotlin/web-site-samples/archive/mpp-kn-app-kotlin-linux.zip&quot;&gt;GitHub&lt;/a&gt;. &lt;a href=&quot;https://github.com/kotlin/web-site-samples/archive/mpp-kn-app-kotlin-windows.zip&quot;&gt;GitHub&lt;/a&gt;.</source>
          <target state="translated">准备好的项目源代码可以直接从&lt;a href=&quot;https://github.com/kotlin/web-site-samples/archive/mpp-kn-app-groovy-macos.zip&quot;&gt;GitHub&lt;/a&gt;下载。&lt;a href=&quot;https://github.com/kotlin/web-site-samples/archive/mpp-kn-app-groovy-linux.zip&quot;&gt;GitHub上&lt;/a&gt;。&lt;a href=&quot;https://github.com/kotlin/web-site-samples/archive/mpp-kn-app-groovy-windows.zip&quot;&gt;GitHub上&lt;/a&gt;。&lt;a href=&quot;https://github.com/kotlin/web-site-samples/archive/mpp-kn-app-kotlin-macos.zip&quot;&gt;GitHub上&lt;/a&gt;。&lt;a href=&quot;https://github.com/kotlin/web-site-samples/archive/mpp-kn-app-kotlin-linux.zip&quot;&gt;GitHub上&lt;/a&gt;。&lt;a href=&quot;https://github.com/kotlin/web-site-samples/archive/mpp-kn-app-kotlin-windows.zip&quot;&gt;GitHub上&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="1cda211d823296d73d5059839d0f82ff49bb5da0" translate="yes" xml:space="preserve">
          <source>The prepared project sources can be directly downloaded from &lt;a href=&quot;https://github.com/kotlin/web-site-samples/archive/mpp-kn-framework-groovy-macos-mac.zip&quot;&gt;GitHub&lt;/a&gt;. &lt;a href=&quot;https://github.com/kotlin/web-site-samples/archive/mpp-kn-framework-kotlin-macos-mac.zip&quot;&gt;GitHub&lt;/a&gt;.</source>
          <target state="translated">准备好的项目源代码可以直接从&lt;a href=&quot;https://github.com/kotlin/web-site-samples/archive/mpp-kn-framework-groovy-macos-mac.zip&quot;&gt;GitHub&lt;/a&gt;下载。&lt;a href=&quot;https://github.com/kotlin/web-site-samples/archive/mpp-kn-framework-kotlin-macos-mac.zip&quot;&gt;GitHub上&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="83fad008770a134699f224ecf517dfb249b17b87" translate="yes" xml:space="preserve">
          <source>The prepared project sources can be directly downloaded from &lt;a href=&quot;https://github.com/kotlin/web-site-samples/archive/mpp-kn-shared-lib-groovy-linux.zip&quot;&gt;GitHub&lt;/a&gt;. &lt;a href=&quot;https://github.com/kotlin/web-site-samples/archive/mpp-kn-shared-lib-groovy-macos.zip&quot;&gt;GitHub&lt;/a&gt;. &lt;a href=&quot;https://github.com/kotlin/web-site-samples/archive/mpp-kn-shared-lib-groovy-windows.zip&quot;&gt;GitHub&lt;/a&gt;. &lt;a href=&quot;https://github.com/kotlin/web-site-samples/archive/mpp-kn-shared-lib-kotlin-linux.zip&quot;&gt;GitHub&lt;/a&gt;. &lt;a href=&quot;https://github.com/kotlin/web-site-samples/archive/mpp-kn-shared-lib-kotlin-macos.zip&quot;&gt;GitHub&lt;/a&gt;. &lt;a href=&quot;https://github.com/kotlin/web-site-samples/archive/mpp-kn-shared-lib-kotlin-windows.zip&quot;&gt;GitHub&lt;/a&gt;.</source>
          <target state="translated">准备好的项目源代码可以直接从&lt;a href=&quot;https://github.com/kotlin/web-site-samples/archive/mpp-kn-shared-lib-groovy-linux.zip&quot;&gt;GitHub&lt;/a&gt;下载。&lt;a href=&quot;https://github.com/kotlin/web-site-samples/archive/mpp-kn-shared-lib-groovy-macos.zip&quot;&gt;GitHub上&lt;/a&gt;。&lt;a href=&quot;https://github.com/kotlin/web-site-samples/archive/mpp-kn-shared-lib-groovy-windows.zip&quot;&gt;GitHub上&lt;/a&gt;。&lt;a href=&quot;https://github.com/kotlin/web-site-samples/archive/mpp-kn-shared-lib-kotlin-linux.zip&quot;&gt;GitHub上&lt;/a&gt;。&lt;a href=&quot;https://github.com/kotlin/web-site-samples/archive/mpp-kn-shared-lib-kotlin-macos.zip&quot;&gt;GitHub上&lt;/a&gt;。&lt;a href=&quot;https://github.com/kotlin/web-site-samples/archive/mpp-kn-shared-lib-kotlin-windows.zip&quot;&gt;GitHub上&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="47fbf2be0cf9555e26f724c9cc904699b4e6d2c6" translate="yes" xml:space="preserve">
          <source>The prepared project sources can be downloaded directly from &lt;a href=&quot;https://github.com/kotlin/web-site-samples/archive/mpp-kn-app-groovy-macos-c.zip&quot;&gt;GitHub&lt;/a&gt;. &lt;a href=&quot;https://github.com/kotlin/web-site-samples/archive/mpp-kn-app-groovy-linux-c.zip&quot;&gt;GitHub&lt;/a&gt;. &lt;a href=&quot;https://github.com/kotlin/web-site-samples/archive/mpp-kn-app-groovy-windows-c.zip&quot;&gt;GitHub&lt;/a&gt;. &lt;a href=&quot;https://github.com/kotlin/web-site-samples/archive/mpp-kn-app-kotlin-macos-c.zip&quot;&gt;GitHub&lt;/a&gt;. &lt;a href=&quot;https://github.com/kotlin/web-site-samples/archive/mpp-kn-app-kotlin-linux-c.zip&quot;&gt;GitHub&lt;/a&gt;. &lt;a href=&quot;https://github.com/kotlin/web-site-samples/archive/mpp-kn-app-kotlin-windows-c.zip&quot;&gt;GitHub&lt;/a&gt;.</source>
          <target state="translated">准备好的项目源可以直接从&lt;a href=&quot;https://github.com/kotlin/web-site-samples/archive/mpp-kn-app-groovy-macos-c.zip&quot;&gt;GitHub&lt;/a&gt;下载。&lt;a href=&quot;https://github.com/kotlin/web-site-samples/archive/mpp-kn-app-groovy-linux-c.zip&quot;&gt;GitHub上&lt;/a&gt;。&lt;a href=&quot;https://github.com/kotlin/web-site-samples/archive/mpp-kn-app-groovy-windows-c.zip&quot;&gt;GitHub上&lt;/a&gt;。&lt;a href=&quot;https://github.com/kotlin/web-site-samples/archive/mpp-kn-app-kotlin-macos-c.zip&quot;&gt;GitHub上&lt;/a&gt;。&lt;a href=&quot;https://github.com/kotlin/web-site-samples/archive/mpp-kn-app-kotlin-linux-c.zip&quot;&gt;GitHub上&lt;/a&gt;。&lt;a href=&quot;https://github.com/kotlin/web-site-samples/archive/mpp-kn-app-kotlin-windows-c.zip&quot;&gt;GitHub上&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="0b884226386a575e859d8ba59646588a18cff524" translate="yes" xml:space="preserve">
          <source>The preset functions return an existing target if there is one. This can be used to configure an existing target:</source>
          <target state="translated">预设功能返回一个现有的目标(如果有)。这可以用来配置一个现有的目标。</target>
        </trans-unit>
        <trans-unit id="f937582ad7c69cc78cc53932b083402871787e1f" translate="yes" xml:space="preserve">
          <source>The preset that the target has been created from, if any.</source>
          <target state="translated">目标创建的预设(如有)。</target>
        </trans-unit>
        <trans-unit id="6f567afc7fd70eca03211b1e8f8d586dfbb85441" translate="yes" xml:space="preserve">
          <source>The previous example actually catches any exception happening in the emitter or in any intermediate or terminal operators. For example, let's change the code so that emitted values are &lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines.flow/map.html&quot;&gt;mapped&lt;/a&gt; to strings, but the corresponding code produces an exception:</source>
          <target state="translated">前面的示例实际上捕获了在发射器或任何中间或终端运算符中发生的任何异常。例如，让我们更改代码，以便将发出的值&lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines.flow/map.html&quot;&gt;映射&lt;/a&gt;到字符串，但是相应的代码会产生异常：</target>
        </trans-unit>
        <trans-unit id="6ce6cb1616a5b69df481f1e26b0c9482dd84113e" translate="yes" xml:space="preserve">
          <source>The previous example can be rewritten using an &lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines.flow/on-completion.html&quot;&gt;onCompletion&lt;/a&gt; operator and produces the same output:</source>
          <target state="translated">可以使用&lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines.flow/on-completion.html&quot;&gt;onCompletion&lt;/a&gt;运算符重写前面的示例，并产生相同的输出：</target>
        </trans-unit>
        <trans-unit id="94b4a93f08efae43f49ccc9068c6ccc45a749339" translate="yes" xml:space="preserve">
          <source>The primary constructor cannot contain any code. Initialization code can be placed in &lt;strong&gt;initializer blocks&lt;/strong&gt;, which are prefixed with the &lt;em&gt;init&lt;/em&gt; keyword.</source>
          <target state="translated">主构造函数不能包含任何代码。可以将初始化代码放在&lt;strong&gt;初始化器块中&lt;/strong&gt;，这些&lt;strong&gt;块&lt;/strong&gt;以&lt;em&gt;init&lt;/em&gt;关键字为前缀。</target>
        </trans-unit>
        <trans-unit id="9fdf36149a4f79a1bb95fdb86a615c52def92e79" translate="yes" xml:space="preserve">
          <source>The primary constructor needs to have at least one parameter;</source>
          <target state="translated">主构造函数需要有至少一个参数。</target>
        </trans-unit>
        <trans-unit id="da3ee8bb58d5e5b4db4f578cf06329f7adf39108" translate="yes" xml:space="preserve">
          <source>The principles of Keeping the Language Modern and Comfortable Updates suggest that incompatible changes are sometimes necessary, but they should be introduced carefully. Our goal is to make the users aware of upcoming changes well in advance to let them migrate their code comfortably.</source>
          <target state="translated">保持语言的现代性和舒适更新的原则表明,不兼容的变化有时是必要的,但应该谨慎引入。我们的目标是让用户提前意识到即将到来的变化,让他们舒适地迁移他们的代码。</target>
        </trans-unit>
        <trans-unit id="8a9400005c3bca2486ac5d4f71c851ac612c4135" translate="yes" xml:space="preserve">
          <source>The problem</source>
          <target state="translated">问题</target>
        </trans-unit>
        <trans-unit id="9c66b2fe04efcfddbeb39708f916ac0b213e981b" translate="yes" xml:space="preserve">
          <source>The problem is that in Kotlin we can say &lt;code&gt;unboxBase(boxDerived(&quot;s&quot;))&lt;/code&gt;, but in Java that would be impossible, because in Java the class &lt;code&gt;Box&lt;/code&gt; is &lt;em&gt;invariant&lt;/em&gt; in its parameter &lt;code&gt;T&lt;/code&gt;, and thus &lt;code&gt;Box&amp;lt;Derived&amp;gt;&lt;/code&gt; is not a subtype of &lt;code&gt;Box&amp;lt;Base&amp;gt;&lt;/code&gt;. To make it work in Java we'd have to define &lt;code&gt;unboxBase&lt;/code&gt; as follows:</source>
          <target state="translated">问题是在Kotlin中我们可以说 &lt;code&gt;unboxBase(boxDerived(&quot;s&quot;))&lt;/code&gt; ，但是在Java中这是不可能的，因为在Java中，类 &lt;code&gt;Box&lt;/code&gt; 的参数 &lt;code&gt;T&lt;/code&gt; 是&lt;em&gt;不变的&lt;/em&gt;，因此 &lt;code&gt;Box&amp;lt;Derived&amp;gt;&lt;/code&gt; 不是子类型。的 &lt;code&gt;Box&amp;lt;Base&amp;gt;&lt;/code&gt; 。为了使其在Java中工作，我们必须定义 &lt;code&gt;unboxBase&lt;/code&gt; ，如下所示：</target>
        </trans-unit>
        <trans-unit id="d0d37636a32f4cdf2f104260760bfa7761da1ecf" translate="yes" xml:space="preserve">
          <source>The process of building and running the Kotlin application in Android Studio is exactly the same as with Java.</source>
          <target state="translated">在Android Studio中构建和运行Kotlin应用程序的过程与使用Java完全相同。</target>
        </trans-unit>
        <trans-unit id="5333ca5a84bee1fa54c6c2c65a4ed24b1d5a7d39" translate="yes" xml:space="preserve">
          <source>The programming model and APIs remain the same. We can continue to use loops, exception handling, etc. and there's no need to learn a complete set of new APIs</source>
          <target state="translated">编程模型和API保持不变。我们可以继续使用循环、异常处理等,不需要学习一套完整的新的API</target>
        </trans-unit>
        <trans-unit id="cbc23b45ec695a38d5e9af2e658da812853cfa4f" translate="yes" xml:space="preserve">
          <source>The progression starts with the &lt;a href=&quot;from-closed-range#kotlin.ranges.CharProgression.Companion%24fromClosedRange%28kotlin.Char%2C+kotlin.Char%2C+kotlin.Int%29%2FrangeStart&quot;&gt;rangeStart&lt;/a&gt; value and goes toward the &lt;a href=&quot;from-closed-range#kotlin.ranges.CharProgression.Companion%24fromClosedRange%28kotlin.Char%2C+kotlin.Char%2C+kotlin.Int%29%2FrangeEnd&quot;&gt;rangeEnd&lt;/a&gt; value not excluding it, with the specified &lt;a href=&quot;from-closed-range#kotlin.ranges.CharProgression.Companion%24fromClosedRange%28kotlin.Char%2C+kotlin.Char%2C+kotlin.Int%29%2Fstep&quot;&gt;step&lt;/a&gt;. In order to go backwards the &lt;a href=&quot;from-closed-range#kotlin.ranges.CharProgression.Companion%24fromClosedRange%28kotlin.Char%2C+kotlin.Char%2C+kotlin.Int%29%2Fstep&quot;&gt;step&lt;/a&gt; must be negative.</source>
          <target state="translated">进度以&lt;a href=&quot;from-closed-range#kotlin.ranges.CharProgression.Companion%24fromClosedRange%28kotlin.Char%2C+kotlin.Char%2C+kotlin.Int%29%2FrangeStart&quot;&gt;rangeStart&lt;/a&gt;值开始，并以指定的&lt;a href=&quot;from-closed-range#kotlin.ranges.CharProgression.Companion%24fromClosedRange%28kotlin.Char%2C+kotlin.Char%2C+kotlin.Int%29%2Fstep&quot;&gt;step&lt;/a&gt;朝向不排除它的&lt;a href=&quot;from-closed-range#kotlin.ranges.CharProgression.Companion%24fromClosedRange%28kotlin.Char%2C+kotlin.Char%2C+kotlin.Int%29%2FrangeEnd&quot;&gt;rangeEnd&lt;/a&gt;值。为了后退，&lt;a href=&quot;from-closed-range#kotlin.ranges.CharProgression.Companion%24fromClosedRange%28kotlin.Char%2C+kotlin.Char%2C+kotlin.Int%29%2Fstep&quot;&gt;步数&lt;/a&gt;必须为负。</target>
        </trans-unit>
        <trans-unit id="3cfecf27df2864c65a3a1ce3c515f4f228c95a52" translate="yes" xml:space="preserve">
          <source>The progression starts with the &lt;a href=&quot;from-closed-range#kotlin.ranges.CharProgression.Companion%24fromClosedRange(kotlin.Char,%20kotlin.Char,%20kotlin.Int)/rangeStart&quot;&gt;rangeStart&lt;/a&gt; value and goes toward the &lt;a href=&quot;from-closed-range#kotlin.ranges.CharProgression.Companion%24fromClosedRange(kotlin.Char,%20kotlin.Char,%20kotlin.Int)/rangeEnd&quot;&gt;rangeEnd&lt;/a&gt; value not excluding it, with the specified &lt;a href=&quot;from-closed-range#kotlin.ranges.CharProgression.Companion%24fromClosedRange(kotlin.Char,%20kotlin.Char,%20kotlin.Int)/step&quot;&gt;step&lt;/a&gt;. In order to go backwards the &lt;a href=&quot;from-closed-range#kotlin.ranges.CharProgression.Companion%24fromClosedRange(kotlin.Char,%20kotlin.Char,%20kotlin.Int)/step&quot;&gt;step&lt;/a&gt; must be negative.</source>
          <target state="translated">进度从&lt;a href=&quot;from-closed-range#kotlin.ranges.CharProgression.Companion%24fromClosedRange(kotlin.Char,%20kotlin.Char,%20kotlin.Int)/rangeStart&quot;&gt;rangeStart&lt;/a&gt;值开始，并以指定的&lt;a href=&quot;from-closed-range#kotlin.ranges.CharProgression.Companion%24fromClosedRange(kotlin.Char,%20kotlin.Char,%20kotlin.Int)/step&quot;&gt;step&lt;/a&gt;朝不排除它的&lt;a href=&quot;from-closed-range#kotlin.ranges.CharProgression.Companion%24fromClosedRange(kotlin.Char,%20kotlin.Char,%20kotlin.Int)/rangeEnd&quot;&gt;rangeEnd&lt;/a&gt;值发展。为了倒退，该&lt;a href=&quot;from-closed-range#kotlin.ranges.CharProgression.Companion%24fromClosedRange(kotlin.Char,%20kotlin.Char,%20kotlin.Int)/step&quot;&gt;步骤&lt;/a&gt;必须为负。</target>
        </trans-unit>
        <trans-unit id="8d272fe15b8cfff505d8d535e47fe9213e3e4bb4" translate="yes" xml:space="preserve">
          <source>The progression starts with the &lt;a href=&quot;from-closed-range#kotlin.ranges.IntProgression.Companion%24fromClosedRange%28kotlin.Int%2C+kotlin.Int%2C+kotlin.Int%29%2FrangeStart&quot;&gt;rangeStart&lt;/a&gt; value and goes toward the &lt;a href=&quot;from-closed-range#kotlin.ranges.IntProgression.Companion%24fromClosedRange%28kotlin.Int%2C+kotlin.Int%2C+kotlin.Int%29%2FrangeEnd&quot;&gt;rangeEnd&lt;/a&gt; value not excluding it, with the specified &lt;a href=&quot;from-closed-range#kotlin.ranges.IntProgression.Companion%24fromClosedRange%28kotlin.Int%2C+kotlin.Int%2C+kotlin.Int%29%2Fstep&quot;&gt;step&lt;/a&gt;. In order to go backwards the &lt;a href=&quot;from-closed-range#kotlin.ranges.IntProgression.Companion%24fromClosedRange%28kotlin.Int%2C+kotlin.Int%2C+kotlin.Int%29%2Fstep&quot;&gt;step&lt;/a&gt; must be negative.</source>
          <target state="translated">进度以&lt;a href=&quot;from-closed-range#kotlin.ranges.IntProgression.Companion%24fromClosedRange%28kotlin.Int%2C+kotlin.Int%2C+kotlin.Int%29%2FrangeStart&quot;&gt;rangeStart&lt;/a&gt;值开始，并以指定的&lt;a href=&quot;from-closed-range#kotlin.ranges.IntProgression.Companion%24fromClosedRange%28kotlin.Int%2C+kotlin.Int%2C+kotlin.Int%29%2Fstep&quot;&gt;step&lt;/a&gt;朝向不排除它的&lt;a href=&quot;from-closed-range#kotlin.ranges.IntProgression.Companion%24fromClosedRange%28kotlin.Int%2C+kotlin.Int%2C+kotlin.Int%29%2FrangeEnd&quot;&gt;rangeEnd&lt;/a&gt;值。为了后退，&lt;a href=&quot;from-closed-range#kotlin.ranges.IntProgression.Companion%24fromClosedRange%28kotlin.Int%2C+kotlin.Int%2C+kotlin.Int%29%2Fstep&quot;&gt;步数&lt;/a&gt;必须为负。</target>
        </trans-unit>
        <trans-unit id="2c4a6206c951ddbe8fde808b1243da3bfe938dbc" translate="yes" xml:space="preserve">
          <source>The progression starts with the &lt;a href=&quot;from-closed-range#kotlin.ranges.IntProgression.Companion%24fromClosedRange(kotlin.Int,%20kotlin.Int,%20kotlin.Int)/rangeStart&quot;&gt;rangeStart&lt;/a&gt; value and goes toward the &lt;a href=&quot;from-closed-range#kotlin.ranges.IntProgression.Companion%24fromClosedRange(kotlin.Int,%20kotlin.Int,%20kotlin.Int)/rangeEnd&quot;&gt;rangeEnd&lt;/a&gt; value not excluding it, with the specified &lt;a href=&quot;from-closed-range#kotlin.ranges.IntProgression.Companion%24fromClosedRange(kotlin.Int,%20kotlin.Int,%20kotlin.Int)/step&quot;&gt;step&lt;/a&gt;. In order to go backwards the &lt;a href=&quot;from-closed-range#kotlin.ranges.IntProgression.Companion%24fromClosedRange(kotlin.Int,%20kotlin.Int,%20kotlin.Int)/step&quot;&gt;step&lt;/a&gt; must be negative.</source>
          <target state="translated">进度从&lt;a href=&quot;from-closed-range#kotlin.ranges.IntProgression.Companion%24fromClosedRange(kotlin.Int,%20kotlin.Int,%20kotlin.Int)/rangeStart&quot;&gt;rangeStart&lt;/a&gt;值开始，并以指定的&lt;a href=&quot;from-closed-range#kotlin.ranges.IntProgression.Companion%24fromClosedRange(kotlin.Int,%20kotlin.Int,%20kotlin.Int)/step&quot;&gt;step&lt;/a&gt;朝不排除它的&lt;a href=&quot;from-closed-range#kotlin.ranges.IntProgression.Companion%24fromClosedRange(kotlin.Int,%20kotlin.Int,%20kotlin.Int)/rangeEnd&quot;&gt;rangeEnd&lt;/a&gt;值发展。为了倒退，该&lt;a href=&quot;from-closed-range#kotlin.ranges.IntProgression.Companion%24fromClosedRange(kotlin.Int,%20kotlin.Int,%20kotlin.Int)/step&quot;&gt;步骤&lt;/a&gt;必须为负。</target>
        </trans-unit>
        <trans-unit id="84ee7e5946067792bd4d0c03b228099a9bd9d9cd" translate="yes" xml:space="preserve">
          <source>The progression starts with the &lt;a href=&quot;from-closed-range#kotlin.ranges.LongProgression.Companion%24fromClosedRange%28kotlin.Long%2C+kotlin.Long%2C+kotlin.Long%29%2FrangeStart&quot;&gt;rangeStart&lt;/a&gt; value and goes toward the &lt;a href=&quot;from-closed-range#kotlin.ranges.LongProgression.Companion%24fromClosedRange%28kotlin.Long%2C+kotlin.Long%2C+kotlin.Long%29%2FrangeEnd&quot;&gt;rangeEnd&lt;/a&gt; value not excluding it, with the specified &lt;a href=&quot;from-closed-range#kotlin.ranges.LongProgression.Companion%24fromClosedRange%28kotlin.Long%2C+kotlin.Long%2C+kotlin.Long%29%2Fstep&quot;&gt;step&lt;/a&gt;. In order to go backwards the &lt;a href=&quot;from-closed-range#kotlin.ranges.LongProgression.Companion%24fromClosedRange%28kotlin.Long%2C+kotlin.Long%2C+kotlin.Long%29%2Fstep&quot;&gt;step&lt;/a&gt; must be negative.</source>
          <target state="translated">进度以&lt;a href=&quot;from-closed-range#kotlin.ranges.LongProgression.Companion%24fromClosedRange%28kotlin.Long%2C+kotlin.Long%2C+kotlin.Long%29%2FrangeStart&quot;&gt;rangeStart&lt;/a&gt;值开始，并以指定的&lt;a href=&quot;from-closed-range#kotlin.ranges.LongProgression.Companion%24fromClosedRange%28kotlin.Long%2C+kotlin.Long%2C+kotlin.Long%29%2Fstep&quot;&gt;step&lt;/a&gt;朝向不排除它的&lt;a href=&quot;from-closed-range#kotlin.ranges.LongProgression.Companion%24fromClosedRange%28kotlin.Long%2C+kotlin.Long%2C+kotlin.Long%29%2FrangeEnd&quot;&gt;rangeEnd&lt;/a&gt;值。为了后退，&lt;a href=&quot;from-closed-range#kotlin.ranges.LongProgression.Companion%24fromClosedRange%28kotlin.Long%2C+kotlin.Long%2C+kotlin.Long%29%2Fstep&quot;&gt;步数&lt;/a&gt;必须为负。</target>
        </trans-unit>
        <trans-unit id="d9d863d5adbc27747b9056e74161d14934d72f8c" translate="yes" xml:space="preserve">
          <source>The progression starts with the &lt;a href=&quot;from-closed-range#kotlin.ranges.LongProgression.Companion%24fromClosedRange(kotlin.Long,%20kotlin.Long,%20kotlin.Long)/rangeStart&quot;&gt;rangeStart&lt;/a&gt; value and goes toward the &lt;a href=&quot;from-closed-range#kotlin.ranges.LongProgression.Companion%24fromClosedRange(kotlin.Long,%20kotlin.Long,%20kotlin.Long)/rangeEnd&quot;&gt;rangeEnd&lt;/a&gt; value not excluding it, with the specified &lt;a href=&quot;from-closed-range#kotlin.ranges.LongProgression.Companion%24fromClosedRange(kotlin.Long,%20kotlin.Long,%20kotlin.Long)/step&quot;&gt;step&lt;/a&gt;. In order to go backwards the &lt;a href=&quot;from-closed-range#kotlin.ranges.LongProgression.Companion%24fromClosedRange(kotlin.Long,%20kotlin.Long,%20kotlin.Long)/step&quot;&gt;step&lt;/a&gt; must be negative.</source>
          <target state="translated">进度从&lt;a href=&quot;from-closed-range#kotlin.ranges.LongProgression.Companion%24fromClosedRange(kotlin.Long,%20kotlin.Long,%20kotlin.Long)/rangeStart&quot;&gt;rangeStart&lt;/a&gt;值开始，并以指定的&lt;a href=&quot;from-closed-range#kotlin.ranges.LongProgression.Companion%24fromClosedRange(kotlin.Long,%20kotlin.Long,%20kotlin.Long)/step&quot;&gt;step&lt;/a&gt;朝不排除它的&lt;a href=&quot;from-closed-range#kotlin.ranges.LongProgression.Companion%24fromClosedRange(kotlin.Long,%20kotlin.Long,%20kotlin.Long)/rangeEnd&quot;&gt;rangeEnd&lt;/a&gt;值发展。为了倒退，该&lt;a href=&quot;from-closed-range#kotlin.ranges.LongProgression.Companion%24fromClosedRange(kotlin.Long,%20kotlin.Long,%20kotlin.Long)/step&quot;&gt;步骤&lt;/a&gt;必须为负。</target>
        </trans-unit>
        <trans-unit id="8d8b7627f24846e9a31abff3ae25964002a498bf" translate="yes" xml:space="preserve">
          <source>The progression starts with the &lt;a href=&quot;from-closed-range#kotlin.ranges.UIntProgression.Companion%24fromClosedRange%28kotlin.UInt%2C+kotlin.UInt%2C+kotlin.Int%29%2FrangeStart&quot;&gt;rangeStart&lt;/a&gt; value and goes toward the &lt;a href=&quot;from-closed-range#kotlin.ranges.UIntProgression.Companion%24fromClosedRange%28kotlin.UInt%2C+kotlin.UInt%2C+kotlin.Int%29%2FrangeEnd&quot;&gt;rangeEnd&lt;/a&gt; value not excluding it, with the specified &lt;a href=&quot;from-closed-range#kotlin.ranges.UIntProgression.Companion%24fromClosedRange%28kotlin.UInt%2C+kotlin.UInt%2C+kotlin.Int%29%2Fstep&quot;&gt;step&lt;/a&gt;. In order to go backwards the &lt;a href=&quot;from-closed-range#kotlin.ranges.UIntProgression.Companion%24fromClosedRange%28kotlin.UInt%2C+kotlin.UInt%2C+kotlin.Int%29%2Fstep&quot;&gt;step&lt;/a&gt; must be negative.</source>
          <target state="translated">进度以&lt;a href=&quot;from-closed-range#kotlin.ranges.UIntProgression.Companion%24fromClosedRange%28kotlin.UInt%2C+kotlin.UInt%2C+kotlin.Int%29%2FrangeStart&quot;&gt;rangeStart&lt;/a&gt;值开始，并以指定的&lt;a href=&quot;from-closed-range#kotlin.ranges.UIntProgression.Companion%24fromClosedRange%28kotlin.UInt%2C+kotlin.UInt%2C+kotlin.Int%29%2Fstep&quot;&gt;step&lt;/a&gt;朝向不排除它的&lt;a href=&quot;from-closed-range#kotlin.ranges.UIntProgression.Companion%24fromClosedRange%28kotlin.UInt%2C+kotlin.UInt%2C+kotlin.Int%29%2FrangeEnd&quot;&gt;rangeEnd&lt;/a&gt;值。为了后退，&lt;a href=&quot;from-closed-range#kotlin.ranges.UIntProgression.Companion%24fromClosedRange%28kotlin.UInt%2C+kotlin.UInt%2C+kotlin.Int%29%2Fstep&quot;&gt;步数&lt;/a&gt;必须为负。</target>
        </trans-unit>
        <trans-unit id="890067d4bb4a41e1198a024fd7c7c538b8728df3" translate="yes" xml:space="preserve">
          <source>The progression starts with the &lt;a href=&quot;from-closed-range#kotlin.ranges.UIntProgression.Companion%24fromClosedRange(kotlin.UInt,%20kotlin.UInt,%20kotlin.Int)/rangeStart&quot;&gt;rangeStart&lt;/a&gt; value and goes toward the &lt;a href=&quot;from-closed-range#kotlin.ranges.UIntProgression.Companion%24fromClosedRange(kotlin.UInt,%20kotlin.UInt,%20kotlin.Int)/rangeEnd&quot;&gt;rangeEnd&lt;/a&gt; value not excluding it, with the specified &lt;a href=&quot;from-closed-range#kotlin.ranges.UIntProgression.Companion%24fromClosedRange(kotlin.UInt,%20kotlin.UInt,%20kotlin.Int)/step&quot;&gt;step&lt;/a&gt;. In order to go backwards the &lt;a href=&quot;from-closed-range#kotlin.ranges.UIntProgression.Companion%24fromClosedRange(kotlin.UInt,%20kotlin.UInt,%20kotlin.Int)/step&quot;&gt;step&lt;/a&gt; must be negative.</source>
          <target state="translated">进度从&lt;a href=&quot;from-closed-range#kotlin.ranges.UIntProgression.Companion%24fromClosedRange(kotlin.UInt,%20kotlin.UInt,%20kotlin.Int)/rangeStart&quot;&gt;rangeStart&lt;/a&gt;值开始，并以指定的&lt;a href=&quot;from-closed-range#kotlin.ranges.UIntProgression.Companion%24fromClosedRange(kotlin.UInt,%20kotlin.UInt,%20kotlin.Int)/step&quot;&gt;step&lt;/a&gt;朝不排除它的&lt;a href=&quot;from-closed-range#kotlin.ranges.UIntProgression.Companion%24fromClosedRange(kotlin.UInt,%20kotlin.UInt,%20kotlin.Int)/rangeEnd&quot;&gt;rangeEnd&lt;/a&gt;值发展。为了倒退，该&lt;a href=&quot;from-closed-range#kotlin.ranges.UIntProgression.Companion%24fromClosedRange(kotlin.UInt,%20kotlin.UInt,%20kotlin.Int)/step&quot;&gt;步骤&lt;/a&gt;必须为负。</target>
        </trans-unit>
        <trans-unit id="bc7d38b12995812c4efea617bb206ec4460e9ccc" translate="yes" xml:space="preserve">
          <source>The progression starts with the &lt;a href=&quot;from-closed-range#kotlin.ranges.ULongProgression.Companion%24fromClosedRange%28kotlin.ULong%2C+kotlin.ULong%2C+kotlin.Long%29%2FrangeStart&quot;&gt;rangeStart&lt;/a&gt; value and goes toward the &lt;a href=&quot;from-closed-range#kotlin.ranges.ULongProgression.Companion%24fromClosedRange%28kotlin.ULong%2C+kotlin.ULong%2C+kotlin.Long%29%2FrangeEnd&quot;&gt;rangeEnd&lt;/a&gt; value not excluding it, with the specified &lt;a href=&quot;from-closed-range#kotlin.ranges.ULongProgression.Companion%24fromClosedRange%28kotlin.ULong%2C+kotlin.ULong%2C+kotlin.Long%29%2Fstep&quot;&gt;step&lt;/a&gt;. In order to go backwards the &lt;a href=&quot;from-closed-range#kotlin.ranges.ULongProgression.Companion%24fromClosedRange%28kotlin.ULong%2C+kotlin.ULong%2C+kotlin.Long%29%2Fstep&quot;&gt;step&lt;/a&gt; must be negative.</source>
          <target state="translated">进度以&lt;a href=&quot;from-closed-range#kotlin.ranges.ULongProgression.Companion%24fromClosedRange%28kotlin.ULong%2C+kotlin.ULong%2C+kotlin.Long%29%2FrangeStart&quot;&gt;rangeStart&lt;/a&gt;值开始，并以指定的&lt;a href=&quot;from-closed-range#kotlin.ranges.ULongProgression.Companion%24fromClosedRange%28kotlin.ULong%2C+kotlin.ULong%2C+kotlin.Long%29%2Fstep&quot;&gt;step&lt;/a&gt;朝向不排除它的&lt;a href=&quot;from-closed-range#kotlin.ranges.ULongProgression.Companion%24fromClosedRange%28kotlin.ULong%2C+kotlin.ULong%2C+kotlin.Long%29%2FrangeEnd&quot;&gt;rangeEnd&lt;/a&gt;值。为了后退，&lt;a href=&quot;from-closed-range#kotlin.ranges.ULongProgression.Companion%24fromClosedRange%28kotlin.ULong%2C+kotlin.ULong%2C+kotlin.Long%29%2Fstep&quot;&gt;步数&lt;/a&gt;必须为负。</target>
        </trans-unit>
        <trans-unit id="cfd566a721eacfbba5c78dd8988340e1f6d111e0" translate="yes" xml:space="preserve">
          <source>The progression starts with the &lt;a href=&quot;from-closed-range#kotlin.ranges.ULongProgression.Companion%24fromClosedRange(kotlin.ULong,%20kotlin.ULong,%20kotlin.Long)/rangeStart&quot;&gt;rangeStart&lt;/a&gt; value and goes toward the &lt;a href=&quot;from-closed-range#kotlin.ranges.ULongProgression.Companion%24fromClosedRange(kotlin.ULong,%20kotlin.ULong,%20kotlin.Long)/rangeEnd&quot;&gt;rangeEnd&lt;/a&gt; value not excluding it, with the specified &lt;a href=&quot;from-closed-range#kotlin.ranges.ULongProgression.Companion%24fromClosedRange(kotlin.ULong,%20kotlin.ULong,%20kotlin.Long)/step&quot;&gt;step&lt;/a&gt;. In order to go backwards the &lt;a href=&quot;from-closed-range#kotlin.ranges.ULongProgression.Companion%24fromClosedRange(kotlin.ULong,%20kotlin.ULong,%20kotlin.Long)/step&quot;&gt;step&lt;/a&gt; must be negative.</source>
          <target state="translated">进度从&lt;a href=&quot;from-closed-range#kotlin.ranges.ULongProgression.Companion%24fromClosedRange(kotlin.ULong,%20kotlin.ULong,%20kotlin.Long)/rangeStart&quot;&gt;rangeStart&lt;/a&gt;值开始，并以指定的&lt;a href=&quot;from-closed-range#kotlin.ranges.ULongProgression.Companion%24fromClosedRange(kotlin.ULong,%20kotlin.ULong,%20kotlin.Long)/step&quot;&gt;step&lt;/a&gt;朝不排除它的&lt;a href=&quot;from-closed-range#kotlin.ranges.ULongProgression.Companion%24fromClosedRange(kotlin.ULong,%20kotlin.ULong,%20kotlin.Long)/rangeEnd&quot;&gt;rangeEnd&lt;/a&gt;值发展。为了倒退，该&lt;a href=&quot;from-closed-range#kotlin.ranges.ULongProgression.Companion%24fromClosedRange(kotlin.ULong,%20kotlin.ULong,%20kotlin.Long)/step&quot;&gt;步骤&lt;/a&gt;必须为负。</target>
        </trans-unit>
        <trans-unit id="f35887cf67bb91d63b75657011139a4b8f31176b" translate="yes" xml:space="preserve">
          <source>The project file configures the C interop as an additional step of the build. Let's move the &lt;code&gt;interop.def&lt;/code&gt; file to the &lt;code&gt;src/nativeInterop/cinterop&lt;/code&gt; directory. Gradle recommends using conventions instead of configurations, for example, the source files are expected to be in the &lt;code&gt;src/nativeMain/kotlin&lt;/code&gt; folder. By default, all the symbols from C are imported to the &lt;code&gt;interop&lt;/code&gt; package, we may want to import the whole package in our &lt;code&gt;.kt&lt;/code&gt; files. Check out the &lt;a href=&quot;../../reference/building-mpp-with-gradle&quot;&gt;kotlin-multiplatform&lt;/a&gt; plugin documentation to learn about all the different ways you could configure it.</source>
          <target state="translated">项目文件将C互操作配置为构建的附加步骤。让我们将 &lt;code&gt;interop.def&lt;/code&gt; 文件移动到 &lt;code&gt;src/nativeInterop/cinterop&lt;/code&gt; 目录。 Gradle建议使用约定而不是配置，例如，源文件应位于 &lt;code&gt;src/nativeMain/kotlin&lt;/code&gt; 文件夹中。默认情况下，所有来自C的符号都导入到 &lt;code&gt;interop&lt;/code&gt; 包中，我们可能希望将整个包导入到我们的 &lt;code&gt;.kt&lt;/code&gt; 文件中。查看&lt;a href=&quot;../../reference/building-mpp-with-gradle&quot;&gt;kotlin-multiplatform&lt;/a&gt;插件文档，以了解配置它的所有不同方式。</target>
        </trans-unit>
        <trans-unit id="c7f7aa55f08a335c3d3db3f646f14c719c538320" translate="yes" xml:space="preserve">
          <source>The project file configures the C interop as an additional step of the build. Let's move the &lt;code&gt;interop.def&lt;/code&gt; file to the &lt;code&gt;src/nativeInterop/cinterop&lt;/code&gt; directory. Gradle recommends using conventions instead of configurations, for example, the source files are expected to be in the &lt;code&gt;src/nativeMain/kotlin&lt;/code&gt; folder. By default, all the symbols from C are imported to the &lt;code&gt;interop&lt;/code&gt; package, we may want to import the whole package in our &lt;code&gt;.kt&lt;/code&gt; files. Check out the &lt;a href=&quot;../../reference/mpp-discover-project#multiplatform-plugin&quot;&gt;kotlin-multiplatform&lt;/a&gt; plugin documentation to learn about all the different ways you could configure it.</source>
          <target state="translated">项目文件将C互操作配置为构建的附加步骤。让我们将 &lt;code&gt;interop.def&lt;/code&gt; 文件移动到 &lt;code&gt;src/nativeInterop/cinterop&lt;/code&gt; 目录。 Gradle建议使用约定而不是配置，例如，源文件应位于 &lt;code&gt;src/nativeMain/kotlin&lt;/code&gt; 文件夹中。默认情况下，来自C的所有符号都导入到 &lt;code&gt;interop&lt;/code&gt; 包中，我们可能希望将整个包导入到我们的 &lt;code&gt;.kt&lt;/code&gt; 文件中。查看&lt;a href=&quot;../../reference/mpp-discover-project#multiplatform-plugin&quot;&gt;kotlin-multiplatform&lt;/a&gt;插件文档以了解配置它的所有不同方式。</target>
        </trans-unit>
        <trans-unit id="f6e9497c74b4e34e5f47b553a66d8ecc4543bedd" translate="yes" xml:space="preserve">
          <source>The project includes the directory &lt;code&gt;src&lt;/code&gt; with Kotlin source sets, which are collections of Kotlin code files, along with their resources, dependencies, and language settings. A source set can be used in Kotlin compilations for one or more target platforms.</source>
          <target state="translated">该项目包括带有Kotlin源集的 &lt;code&gt;src&lt;/code&gt; 目录，这些源集是Kotlin代码文件的集合，以及它们的资源，依赖关系和语言设置。可以在Kotlin编译中为一个或多个目标平台使用源集。</target>
        </trans-unit>
        <trans-unit id="04a29f21fc01df00a35820fecf66f137da298242" translate="yes" xml:space="preserve">
          <source>The project is ready. The next step is to open it in IntelliJ IDEA. For advanced build scenarios, it is recommended to refer to the &lt;a href=&quot;../../reference/building-mpp-with-gradle#setting-up-a-multiplatform-project&quot;&gt;more detailed&lt;/a&gt; documentation.</source>
          <target state="translated">项目准备就绪。下一步是在IntelliJ IDEA中打开它。对于高级构建方案，建议参考&lt;a href=&quot;../../reference/building-mpp-with-gradle#setting-up-a-multiplatform-project&quot;&gt;更详细的&lt;/a&gt;文档。</target>
        </trans-unit>
        <trans-unit id="b358195ade68af7da060ed2c5bd98eb5f625c0a9" translate="yes" xml:space="preserve">
          <source>The project source roots</source>
          <target state="translated">项目源根</target>
        </trans-unit>
        <trans-unit id="6b692a2a5504099d52b9ee1d8cd9e82682b0438b" translate="yes" xml:space="preserve">
          <source>The project structure looks like this:</source>
          <target state="translated">项目结构是这样的。</target>
        </trans-unit>
        <trans-unit id="85001da371d8ff3d4160eee8edd3719f9a8a82c8" translate="yes" xml:space="preserve">
          <source>The project's source files are unchanged.</source>
          <target state="translated">项目的源文件没有变化。</target>
        </trans-unit>
        <trans-unit id="fe6d1020447b5badd7227ed9268d67a33471daca" translate="yes" xml:space="preserve">
          <source>The property that can be used as a placeholder for statements and values that are defined in JavaScript.</source>
          <target state="translated">可用作JavaScript中定义的语句和值的占位符的属性。</target>
        </trans-unit>
        <trans-unit id="fe5ea5ce74d05b50ab08ac3eaf5980cd10f01114" translate="yes" xml:space="preserve">
          <source>The property which this accessor is originated from.</source>
          <target state="translated">这个配件的来源的属性。</target>
        </trans-unit>
        <trans-unit id="f478ed7d5b12b6f5e34c37814b287211378258c6" translate="yes" xml:space="preserve">
          <source>The provisions of the &lt;a href=&quot;kotlin-evolution&quot;&gt;Kotlin evolution policy&lt;/a&gt; fully apply only to components that have reached Full Stability (FS). From that point on incompatible changes have to be approved by the Language Committee.</source>
          <target state="translated">&lt;a href=&quot;kotlin-evolution&quot;&gt;Kotlin进化政策&lt;/a&gt;的规定完全仅适用于已达到完全稳定性（FS）的组件。从那时起，不兼容的更改必须由语言委员会批准。</target>
        </trans-unit>
        <trans-unit id="10a03850a04015022f37051ccca3f8cdb619035d" translate="yes" xml:space="preserve">
          <source>The publication of this target is handled by the Kotlin plugin and doesn't require steps that are specific for the Java plugin.</source>
          <target state="translated">这个目标的发布是由Kotlin插件处理的,不需要专门针对Java插件的步骤。</target>
        </trans-unit>
        <trans-unit id="4e0268d689de7d5f78e70c6cb1e82a66dc683856" translate="yes" xml:space="preserve">
          <source>The publication of this target is handled by the Kotlin plugin and doesn't require the steps that are specific to the Java plugin, such as manually creating a publication and configuring it as &lt;code&gt;from(components.java)&lt;/code&gt;.</source>
          <target state="translated">该目标的发布由Kotlin插件处理，不需要特定于Java插件的步骤，例如手动创建发布并将其配置为 &lt;code&gt;from(components.java)&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="38341133c8abc06ea8b313769f8407419006fee4" translate="yes" xml:space="preserve">
          <source>The purpose of this code is to write out some text in the console. In order to use this from the browser, load it, preferably from inside an HTML page:</source>
          <target state="translated">这段代码的目的是在控制台中写出一些文本。为了在浏览器中使用,最好从HTML页面中加载它。</target>
        </trans-unit>
        <trans-unit id="dc84bc4a3671f7fd39fcbdb5d811a4f7dfb04fdc" translate="yes" xml:space="preserve">
          <source>The quickest way to try out C API mapping is to have all C declarations in the &lt;code&gt;interop.def&lt;/code&gt; file, without creating any &lt;code&gt;.h&lt;/code&gt; of &lt;code&gt;.c&lt;/code&gt; files at all. Then place the C declarations in a &lt;code&gt;.def&lt;/code&gt; file after the special &lt;code&gt;---&lt;/code&gt; separator line:</source>
          <target state="translated">尝试C API映射的最快的方法是在所有的C声明 &lt;code&gt;interop.def&lt;/code&gt; 文件，而不会产生任何 &lt;code&gt;.h&lt;/code&gt; 的 &lt;code&gt;.c&lt;/code&gt; 的所有文件。然后将C声明放在特殊的 &lt;code&gt;---&lt;/code&gt; 分隔符行之后的 &lt;code&gt;.def&lt;/code&gt; 文件中：</target>
        </trans-unit>
        <trans-unit id="8b65082730419e0089fe0272610ec1d026b13069" translate="yes" xml:space="preserve">
          <source>The range of durations that can be expressed as a &lt;code&gt;Long&lt;/code&gt; number of milliseconds is approximately &amp;plusmn;292 million years.</source>
          <target state="translated">可以表示为 &lt;code&gt;Long&lt;/code&gt; 毫秒数的持续时间范围约为&amp;plusmn;292百万年。</target>
        </trans-unit>
        <trans-unit id="a3be989e45ad02ac9e3f6bde822e680ef8bccdc5" translate="yes" xml:space="preserve">
          <source>The range of durations that can be expressed as a &lt;code&gt;Long&lt;/code&gt; number of nanoseconds is approximately &amp;plusmn;292 years.</source>
          <target state="translated">可以表示为 &lt;code&gt;Long&lt;/code&gt; 纳秒数的持续时间范围约为&amp;plusmn;292年。</target>
        </trans-unit>
        <trans-unit id="086ba4582c0f9ff5d704a53067f7ea26f2bef36a" translate="yes" xml:space="preserve">
          <source>The range of indices in the input string where group was captured.</source>
          <target state="translated">输入字符串中捕获组的索引范围。</target>
        </trans-unit>
        <trans-unit id="d16563c64c4aedfc780b010fa9c5624f673175d2" translate="yes" xml:space="preserve">
          <source>The range of indices in the original string where match was captured.</source>
          <target state="translated">匹配的原始字符串中的索引范围。</target>
        </trans-unit>
        <trans-unit id="199d1e88f27ba9b05b8adc73d8d822df0cadd36a" translate="yes" xml:space="preserve">
          <source>The read-only collection types are &lt;a href=&quot;generics#variance&quot;&gt;covariant&lt;/a&gt;. This means that, if a &lt;code&gt;Rectangle&lt;/code&gt; class inherits from &lt;code&gt;Shape&lt;/code&gt;, you can use a &lt;code&gt;List&amp;lt;Rectangle&amp;gt;&lt;/code&gt; anywhere the &lt;code&gt;List&amp;lt;Shape&amp;gt;&lt;/code&gt; is required. In other words, the collection types have the same subtyping relationship as the element types. Maps are covariant on the value type, but not on the key type.</source>
          <target state="translated">只读的集合类型是&lt;a href=&quot;generics#variance&quot;&gt;covariant&lt;/a&gt;。这意味着，如果一个 &lt;code&gt;Rectangle&lt;/code&gt; 从类继承 &lt;code&gt;Shape&lt;/code&gt; ，你可以使用一个 &lt;code&gt;List&amp;lt;Rectangle&amp;gt;&lt;/code&gt; 的任何位置 &lt;code&gt;List&amp;lt;Shape&amp;gt;&lt;/code&gt; 是必需的。换句话说，集合类型与元素类型具有相同的子类型关系。映射在值类型上是协变的，但在键类型上不是。</target>
        </trans-unit>
        <trans-unit id="2ddb83b3e5eaf3228b8ed04e27d5be844d1ede7b" translate="yes" xml:space="preserve">
          <source>The reason we're seeing the actual output is because the call &lt;code&gt;curl_easy_perform&lt;/code&gt; prints the result to the standard output. We could hide this using &lt;code&gt;curl_easy_setopt&lt;/code&gt;.</source>
          <target state="translated">我们看到实际输出的原因是因为调用 &lt;code&gt;curl_easy_perform&lt;/code&gt; 将结果打印到标准输出。我们可以使用 &lt;code&gt;curl_easy_setopt&lt;/code&gt; 隐藏它。</target>
        </trans-unit>
        <trans-unit id="4670c1839cea0120059e336f30de1dda186179ab" translate="yes" xml:space="preserve">
          <source>The recommended way to use Kotlin/JS is via the &lt;code&gt;kotlin.js&lt;/code&gt; and &lt;code&gt;kotlin.multiplatform&lt;/code&gt; Gradle plugins. They provide a central and convenient way to set up and control Kotlin projects targeting JavaScript. This includes essential functionality such as controlling the bundling of your application, adding JavaScript dependencies directly from npm, and more. To get an overview of the available options, check out the &lt;a href=&quot;js-project-setup&quot;&gt;Kotlin/JS project setup&lt;/a&gt; documentation.</source>
          <target state="translated">建议使用Kotlin / JS的方法是通过 &lt;code&gt;kotlin.js&lt;/code&gt; 和 &lt;code&gt;kotlin.multiplatform&lt;/code&gt; Gradle插件。它们提供了一种集中和便捷的方式来设置和控制针对JavaScript的Kotlin项目。这包括基本功能，例如控制应用程序的捆绑，直接从npm添加JavaScript依赖项等等。要获得可用选项的概述，请查看&lt;a href=&quot;js-project-setup&quot;&gt;Kotlin / JS项目设置&lt;/a&gt;文档。</target>
        </trans-unit>
        <trans-unit id="58ca5ea2bf2b7e6112a4ed6c521b74a4fb8e1b96" translate="yes" xml:space="preserve">
          <source>The reference is a value of type &lt;a href=&quot;../../api/latest/jvm/stdlib/kotlin.reflect/-k-class/index&quot;&gt;KClass&lt;/a&gt;.</source>
          <target state="translated">引用是类型&lt;a href=&quot;../../api/latest/jvm/stdlib/kotlin.reflect/-k-class/index&quot;&gt;KClass&lt;/a&gt;的值。</target>
        </trans-unit>
        <trans-unit id="cef50f619cc0308e3db26c3e7a3c98fcbdab204e" translate="yes" xml:space="preserve">
          <source>The referenced value or null if referred object is not frozen and current worker is different from the one created this.</source>
          <target state="translated">引用的值,如果引用的对象没有被冻结,且当前的工作者与创建此对象的工作者不同,则引用的值为空。</target>
        </trans-unit>
        <trans-unit id="6e2258bc637d2fb4dedf8b2c195ace128e99affc" translate="yes" xml:space="preserve">
          <source>The referenced value.</source>
          <target state="translated">参考值。</target>
        </trans-unit>
        <trans-unit id="225d32a1d2d879830740b8e0770ecbbb02de2cc7" translate="yes" xml:space="preserve">
          <source>The referenced value. Gets the value or sets the new value. If new value is not null, and &lt;code&gt;this&lt;/code&gt; is frozen - it must be frozen or permanent object.</source>
          <target state="translated">参考值。获取值或设置新值。如果新的值不为空，而 &lt;code&gt;this&lt;/code&gt; 是冷冻-它必须是冷冻或永久的对象。</target>
        </trans-unit>
        <trans-unit id="9e1c9e946585f6c5b784f91adc26c58c91e5a3c2" translate="yes" xml:space="preserve">
          <source>The referenced value. Gets the value or sets the new value. If new value is not null, it must be frozen or permanent object.</source>
          <target state="translated">引用的值。获取值或设置新值。如果新值不是null,则必须是冻结或永久对象。</target>
        </trans-unit>
        <trans-unit id="04f24df5fbabe6af37ab1161e95151a96c9196e9" translate="yes" xml:space="preserve">
          <source>The repositories where the library will be published are added via the &lt;code&gt;repositories&lt;/code&gt; block in the &lt;code&gt;publishing { ... }&lt;/code&gt; DSL, as explained in &lt;a href=&quot;https://docs.gradle.org/current/userguide/publishing_maven.html#publishing_maven:repositories&quot;&gt;Maven Publish Plugin. Repositories&lt;/a&gt;.</source>
          <target state="translated">如&lt;a href=&quot;https://docs.gradle.org/current/userguide/publishing_maven.html#publishing_maven:repositories&quot;&gt;Maven Publish Plugin&lt;/a&gt;中所述，将通过 &lt;code&gt;publishing { ... }&lt;/code&gt; DSL中的 &lt;code&gt;repositories&lt;/code&gt; 块添加将要发布库的存储库。仓库。</target>
        </trans-unit>
        <trans-unit id="7134518e595d73dac15fa3b58f87beedd8efb821" translate="yes" xml:space="preserve">
          <source>The required parameter to &lt;code&gt;launchIn&lt;/code&gt; must specify a &lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/-coroutine-scope/index.html&quot;&gt;CoroutineScope&lt;/a&gt; in which the coroutine to collect the flow is launched. In the above example this scope comes from the &lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/run-blocking.html&quot;&gt;runBlocking&lt;/a&gt; coroutine builder, so while the flow is running, this &lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/run-blocking.html&quot;&gt;runBlocking&lt;/a&gt; scope waits for completion of its child coroutine and keeps the main function from returning and terminating this example.</source>
          <target state="translated">&lt;code&gt;launchIn&lt;/code&gt; 的必需参数必须指定一个&lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/-coroutine-scope/index.html&quot;&gt;CoroutineScope，&lt;/a&gt;在其中启动用于收集流的协程。在上面的示例中，此作用域来自&lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/run-blocking.html&quot;&gt;runBlocking&lt;/a&gt;协程构建器，因此，在运行流程时，此&lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/run-blocking.html&quot;&gt;runBlocking&lt;/a&gt;范围等待其子协程完成，并防止main函数返回并终止此示例。</target>
        </trans-unit>
        <trans-unit id="1dc4ec6519f1080b744ec876f36d60cd34eec96a" translate="yes" xml:space="preserve">
          <source>The resources are processed by the equivalent tasks of the compilations instead of &lt;code&gt;*ProcessResources&lt;/code&gt; tasks.</source>
          <target state="translated">资源由编译的等效任务处理，而不是由 &lt;code&gt;*ProcessResources&lt;/code&gt; 任务处理。</target>
        </trans-unit>
        <trans-unit id="8655c9517fe5cb69af37ea62bb4854e761f59a65" translate="yes" xml:space="preserve">
          <source>The resources of &lt;code&gt;commonMain&lt;/code&gt; are always processed and copied along with the resources of &lt;code&gt;jvmMain&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;commonMain&lt;/code&gt; 的资源总是与 &lt;code&gt;jvmMain&lt;/code&gt; 的资源一起处理和复制。</target>
        </trans-unit>
        <trans-unit id="7ffbb195d8e128e52d788e2edb39be54dd761c55" translate="yes" xml:space="preserve">
          <source>The rest of the procedure works in exactly the same way as in Java.</source>
          <target state="translated">存储过程的其余部分与Java中的工作方式完全相同。</target>
        </trans-unit>
        <trans-unit id="81a9c69ffb22a2342532cf8251cc7d0415b9dbb2" translate="yes" xml:space="preserve">
          <source>The result is an object which represents a reference to the property (the &quot;Platonic ideal&quot; property, not a property on a particular instance). There's a type hierarchy for property objects: the base interface is &lt;code&gt;KProperty&lt;/code&gt;, which lets you get metadata about the property, such as its name and type. If you want to use the property object to read or modify the property's value in an object, you need to use a subinterface that specifies what kind of property it is. Immutable properties typically are &lt;code&gt;KProperty1&amp;lt;R, V&amp;gt;&lt;/code&gt;, and mutable properties typically are &lt;code&gt;KMutableProperty1&amp;lt;R, V&amp;gt;&lt;/code&gt;. Both of these are generic interfaces, with &lt;code&gt;R&lt;/code&gt; being the receiver type (the type on which the property is declared, in this case &lt;code&gt;Person&lt;/code&gt;) and &lt;code&gt;V&lt;/code&gt; being the type of the property's value.</source>
          <target state="translated">结果是一个对象，该对象表示对该属性的引用（&amp;ldquo;柏拉图理想&amp;rdquo;属性，而不是特定实例上的属性）。属性对象有一个类型层次结构：基本接口是 &lt;code&gt;KProperty&lt;/code&gt; ，它使您可以获取有关属性的元数据，例如名称和类型。如果要使用属性对象读取或修改对象中属性的值，则需要使用一个子接口来指定它是什么类型的属性。不变属性通常是 &lt;code&gt;KProperty1&amp;lt;R, V&amp;gt;&lt;/code&gt; ，可变属性通常是 &lt;code&gt;KMutableProperty1&amp;lt;R, V&amp;gt;&lt;/code&gt; 。这两个都是通用接口，其中 &lt;code&gt;R&lt;/code&gt; 是接收方类型（在该属性上声明属性的类型，在这种情况下为 &lt;code&gt;Person&lt;/code&gt; ），而 &lt;code&gt;V&lt;/code&gt; 是属性值的类型。</target>
        </trans-unit>
        <trans-unit id="1a8aae926c8fa4cd902ab72788ba84f110e52d36" translate="yes" xml:space="preserve">
          <source>The result is computed as &lt;code&gt;r = this - (q * divisor)&lt;/code&gt; where &lt;code&gt;q&lt;/code&gt; is the quotient of division rounded to the nearest integer, &lt;code&gt;q = round(this / other)&lt;/code&gt;.</source>
          <target state="translated">计算结果为 &lt;code&gt;r = this - (q * divisor)&lt;/code&gt; ，其中 &lt;code&gt;q&lt;/code&gt; 是四舍五入到最接近整数的除法商， &lt;code&gt;q = round(this / other)&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="8346187656aa601c46c1b882160101b5d70d1783" translate="yes" xml:space="preserve">
          <source>The result is going to be:</source>
          <target state="translated">结果是要。</target>
        </trans-unit>
        <trans-unit id="f757614cb2200a5a31db5b9a50190e9f1a783287" translate="yes" xml:space="preserve">
          <source>The result is the same, but this code uses only non-blocking &lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/delay.html&quot;&gt;delay&lt;/a&gt;. The main thread invoking &lt;code&gt;runBlocking&lt;/code&gt;&lt;em&gt;blocks&lt;/em&gt; until the coroutine inside &lt;code&gt;runBlocking&lt;/code&gt; completes.</source>
          <target state="translated">结果是相同的，但是此代码仅使用非阻塞&lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/delay.html&quot;&gt;延迟&lt;/a&gt;。主线程调用 &lt;code&gt;runBlocking&lt;/code&gt; &lt;em&gt;块&lt;/em&gt;，直到内部的协同程序 &lt;code&gt;runBlocking&lt;/code&gt; 完成。</target>
        </trans-unit>
        <trans-unit id="80513416e38e21b1cd6b19983bdbc1cd0f8dbc1d" translate="yes" xml:space="preserve">
          <source>The result of &lt;code&gt;minus&lt;/code&gt; contains the elements of the original collection &lt;em&gt;except&lt;/em&gt; the elements from the second operand. If it's an element, &lt;code&gt;minus&lt;/code&gt; removes its &lt;em&gt;first&lt;/em&gt; occurrence; if it's a collection, &lt;em&gt;all&lt;/em&gt; occurrences of its elements are removed.</source>
          <target state="translated">&lt;code&gt;minus&lt;/code&gt; 的结果包含原始集合的元素，但第二个操作数中的元素&lt;em&gt;除外&lt;/em&gt;。如果它是一个元素， &lt;code&gt;minus&lt;/code&gt; 会删除它的&lt;em&gt;第一个&lt;/em&gt;匹配项。如果是集合，则删除&lt;em&gt;所有&lt;/em&gt;出现的元素。</target>
        </trans-unit>
        <trans-unit id="9f4386a5cc0897ae566404e34449e10c9271784f" translate="yes" xml:space="preserve">
          <source>The result of &lt;code&gt;plus&lt;/code&gt; contains the elements from the original collection &lt;em&gt;and&lt;/em&gt; from the second operand.</source>
          <target state="translated">&lt;code&gt;plus&lt;/code&gt; 的结果包含原始集合&lt;em&gt;和&lt;/em&gt;第二个操作数中的元素。</target>
        </trans-unit>
        <trans-unit id="ff8add7f5e14fd024c26ef191ab483a18b621fed" translate="yes" xml:space="preserve">
          <source>The result of the future computation. Blocks execution until the future is ready. Second attempt to get will result in an error.</source>
          <target state="translated">未来计算的结果。阻止执行,直到未来的计算准备好。第二次尝试获取将导致错误。</target>
        </trans-unit>
        <trans-unit id="b0a33939298c1573b79334a09954b9afb450d438" translate="yes" xml:space="preserve">
          <source>The result of this code is quite interesting, so we'll analyze it in mode detail:</source>
          <target state="translated">这段代码的结果是相当有趣的,所以我们将详细分析它的模式。</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
