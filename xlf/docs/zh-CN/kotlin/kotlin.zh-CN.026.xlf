<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="zh-CN" datatype="htmlbody" original="kotlin">
    <body>
      <group id="kotlin">
        <trans-unit id="fca14a2211b4e71b478b08b4747bfb20c5dc2a24" translate="yes" xml:space="preserve">
          <source>We continue to explore more C language types and their representation in Kotlin/Native in our other tutorials:</source>
          <target state="translated">我们将在其他教程中继续探索更多的C语言类型及其在Kotlin/Native中的表现形式。</target>
        </trans-unit>
        <trans-unit id="51b6f004886664d749f4d2984398143458f52375" translate="yes" xml:space="preserve">
          <source>We could call this using default arguments:</source>
          <target state="translated">我们可以使用默认参数来调用它。</target>
        </trans-unit>
        <trans-unit id="8ae10259ccef551da0909b6299a0fa1b0a4f1215" translate="yes" xml:space="preserve">
          <source>We could do a similar thing with contravariant projection by using &lt;code&gt;in&lt;/code&gt;:</source>
          <target state="translated">通过使用 &lt;code&gt;in&lt;/code&gt; ,我们可以对逆投影做类似的事情：</target>
        </trans-unit>
        <trans-unit id="39a9864b239884664ddf63f83dbaeb179ea24a10" translate="yes" xml:space="preserve">
          <source>We could use the same means of synchronization that are applicable to threads (a &lt;code&gt;CountDownLatch&lt;/code&gt; is what crosses my mind in this case), but let's take a safer and cleaner path.</source>
          <target state="translated">我们可以使用适用于线程的相同同步方式（在这种情况下， &lt;code&gt;CountDownLatch&lt;/code&gt; 是我想到的），但是让我们走一条更安全，更清洁的道路。</target>
        </trans-unit>
        <trans-unit id="d12b57fa3f5ee09d20d2af80c6064fa21722785e" translate="yes" xml:space="preserve">
          <source>We covered the basics of setting up an IDE compatible project with Gradle in the &lt;a href=&quot;basic-kotlin-native-app#create-gradle-project&quot;&gt;A Basic Kotlin/Native Application&lt;/a&gt; tutorial. Please check it out if you are looking for detailed first steps and instructions on how to start a new Kotlin/Native project and open it in IntelliJ IDEA. In this tutorial, we'll look at the advanced C interop related usages of Kotlin/Native and &lt;a href=&quot;../../reference/building-mpp-with-gradle&quot;&gt;multiplatform&lt;/a&gt; builds with Gradle.</source>
          <target state="translated">我们在&lt;a href=&quot;basic-kotlin-native-app#create-gradle-project&quot;&gt;A Basic Kotlin / Native Application&lt;/a&gt;教程中介绍了使用Gradle设置与IDE兼容的项目的基础知识。如果您正在寻找有关如何启动新的Kotlin / Native项目并在IntelliJ IDEA中打开它的详细的第一步和说明，请进行检查。在本教程中，我们将研究Kotlin / Native的高级C互操作相关用法以及Gradle的&lt;a href=&quot;../../reference/building-mpp-with-gradle&quot;&gt;多平台&lt;/a&gt;构建。</target>
        </trans-unit>
        <trans-unit id="34c7674c59bff58842f8120c227b39dfc459b5e2" translate="yes" xml:space="preserve">
          <source>We covered the basics of setting up an IDE compatible project with Gradle in the &lt;a href=&quot;using-gradle&quot;&gt;A Basic Kotlin/Native Application&lt;/a&gt; tutorial. Please check it out if you are looking for detailed first steps and instructions on how to start a new Kotlin/Native project and open it in IntelliJ IDEA. In this tutorial, we'll look at the advanced C interop related usages of Kotlin/Native and &lt;a href=&quot;../../reference/mpp-discover-project#multiplatform-plugin&quot;&gt;multiplatform&lt;/a&gt; builds with Gradle.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6b1e2f897849388e9b5afd5f5e40ff3ed5d9341c" translate="yes" xml:space="preserve">
          <source>We create &lt;code&gt;build.gradle&lt;/code&gt;&lt;code&gt;build.gradle.kts&lt;/code&gt; Gradle build file with the following contents:</source>
          <target state="translated">我们使用以下内容创建 &lt;code&gt;build.gradle&lt;/code&gt; &lt;code&gt;build.gradle.kts&lt;/code&gt; Gradle构建文件：</target>
        </trans-unit>
        <trans-unit id="d792e0e9b2d61d7c507d6ac3c55fb78219ae3d1b" translate="yes" xml:space="preserve">
          <source>We create a &lt;code&gt;lib.h&lt;/code&gt; file to see how C functions are mapped into Kotlin:</source>
          <target state="translated">我们创建一个 &lt;code&gt;lib.h&lt;/code&gt; 文件来查看如何将C函数映射到Kotlin中：</target>
        </trans-unit>
        <trans-unit id="b48d0f7550a4bac04ad5285d58e805e5af18955b" translate="yes" xml:space="preserve">
          <source>We create a similar implementation file (and missing directories) for the iOS target in the &lt;code&gt;SharedCode/src/iosMain/kotlin/actual.kt&lt;/code&gt;:</source>
          <target state="translated">我们在 &lt;code&gt;SharedCode/src/iosMain/kotlin/actual.kt&lt;/code&gt; 中为iOS目标创建一个类似的实现文件（和缺少的目录）：</target>
        </trans-unit>
        <trans-unit id="785942d151a588aee24ed9a38ee1d8176b8dc181" translate="yes" xml:space="preserve">
          <source>We create the &lt;code&gt;hello.kt&lt;/code&gt; file with the library contents:</source>
          <target state="translated">我们使用库内容创建 &lt;code&gt;hello.kt&lt;/code&gt; 文件：</target>
        </trans-unit>
        <trans-unit id="fcb050d7cd97c1f800f9df98029b55284f1e77b7" translate="yes" xml:space="preserve">
          <source>We decided to productize this idea, but it hasn't reached the final shape yet.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a6ed76b8d0d9018634906744837677e15921589b" translate="yes" xml:space="preserve">
          <source>We declare the generic type parameter before the function name for it to be available in the receiver type expression. See &lt;a href=&quot;generics&quot;&gt;Generic functions&lt;/a&gt;.</source>
          <target state="translated">我们在函数名称之前声明通用类型参数，以使其在接收器类型表达式中可用。请参见&lt;a href=&quot;generics&quot;&gt;通用函数&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="e038eb8a21b3199cc32241632b06a3909918bfe9" translate="yes" xml:space="preserve">
          <source>We don't have to annotate the &lt;code&gt;HTML&lt;/code&gt; or &lt;code&gt;Head&lt;/code&gt; classes with &lt;code&gt;@HtmlTagMarker&lt;/code&gt; because their superclass is already annotated:</source>
          <target state="translated">我们不必使用 &lt;code&gt;@HtmlTagMarker&lt;/code&gt; 注释 &lt;code&gt;HTML&lt;/code&gt; 或 &lt;code&gt;Head&lt;/code&gt; 类，因为它们的超类已经被注释了：</target>
        </trans-unit>
        <trans-unit id="8e3df53e494bf93b03698e74de62415d2b98fbd8" translate="yes" xml:space="preserve">
          <source>We evolve the Kotlin Standard Library (kotlin-stdlib) for stable platforms according to the principles stated above. Changes to the contracts for its API undergo the same procedures as changes in the language itself.</source>
          <target state="translated">我们根据上述原则为稳定的平台发展Kotlin标准库(kotlin-stdlib)。对其API合同的修改与语言本身的修改经过同样的程序。</target>
        </trans-unit>
        <trans-unit id="a2535fe7404df5a6eb12c3a3917ab80b4135dbff" translate="yes" xml:space="preserve">
          <source>We frequently create classes whose main purpose is to hold data. In such a class some standard functionality and utility functions are often mechanically derivable from the data. In Kotlin, this is called a &lt;em&gt;data class&lt;/em&gt; and is marked as &lt;code&gt;data&lt;/code&gt;:</source>
          <target state="translated">我们经常创建主要目的是保存数据的类。在此类中，通常可以从数据中机械地得出一些标准功能和实用功能。在Kotlin中，这称为&lt;em&gt;数据类&lt;/em&gt;，并标记为 &lt;code&gt;data&lt;/code&gt; ：</target>
        </trans-unit>
        <trans-unit id="1094efa9f8fd00ffe04a3c7c86c1ceab68f5986d" translate="yes" xml:space="preserve">
          <source>We make sure to document precisely which subcomponents are not stable. We also do our best to warn users where possible and ask to opt in explicitly to avoid accidental usages of features that have not been released as stable.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a128ace07ce2a614969d8901fa6d436be396c723" translate="yes" xml:space="preserve">
          <source>We manage a lifecycle of our coroutines by creating an instance of &lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/-coroutine-scope/index.html&quot;&gt;CoroutineScope&lt;/a&gt; that is tied to the lifecycle of our activity. &lt;code&gt;CoroutineScope&lt;/code&gt; instance can be created by &lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/-coroutine-scope.html&quot;&gt;CoroutineScope()&lt;/a&gt; or &lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/-main-scope.html&quot;&gt;MainScope()&lt;/a&gt; factory functions. The former creates a general-purpose scope, while the latter creates scope for UI applications and uses &lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/-dispatchers/-main.html&quot;&gt;Dispatchers.Main&lt;/a&gt; as default dispatcher:</source>
          <target state="translated">我们通过创建与活动的生命周期相关联的&lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/-coroutine-scope/index.html&quot;&gt;CoroutineScope&lt;/a&gt;实例来管理协程的生命周期。可以通过&lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/-coroutine-scope.html&quot;&gt;CoroutineScope（）&lt;/a&gt;或&lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/-main-scope.html&quot;&gt;MainScope（）&lt;/a&gt;工厂函数创建 &lt;code&gt;CoroutineScope&lt;/code&gt; 实例。前者创建通用作用域，而后者创建UI应用程序的作用域，并使用&lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/-dispatchers/-main.html&quot;&gt;Dispatchers.Main&lt;/a&gt;作为默认调度程序：</target>
        </trans-unit>
        <trans-unit id="ccd2d1dce53a36cd421422934713d352fc3aea2f" translate="yes" xml:space="preserve">
          <source>We manage the lifecycles of our coroutines by creating an instance of &lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/-coroutine-scope/index.html&quot;&gt;CoroutineScope&lt;/a&gt; tied to the lifecycle of our activity. A &lt;code&gt;CoroutineScope&lt;/code&gt; instance can be created by the &lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/-coroutine-scope.html&quot;&gt;CoroutineScope()&lt;/a&gt; or &lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/-main-scope.html&quot;&gt;MainScope()&lt;/a&gt; factory functions. The former creates a general-purpose scope, while the latter creates a scope for UI applications and uses &lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/-dispatchers/-main.html&quot;&gt;Dispatchers.Main&lt;/a&gt; as the default dispatcher:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b2f8eb551efabdb4e2888f30edf606cbdfff7bc8" translate="yes" xml:space="preserve">
          <source>We may find the whole sources from that tutorial on &lt;a href=&quot;https://github.com/JetBrains/kotlin-examples/tree/master/tutorials/mpp-iOS-Android&quot;&gt;GitHub&lt;/a&gt;.</source>
          <target state="translated">我们可以在&lt;a href=&quot;https://github.com/JetBrains/kotlin-examples/tree/master/tutorials/mpp-iOS-Android&quot;&gt;GitHub上&lt;/a&gt;找到该教程的全部资源。</target>
        </trans-unit>
        <trans-unit id="990e3fee35a9a6ae47d7273521920489a64503a8" translate="yes" xml:space="preserve">
          <source>We may include all declarations directly into the &lt;code&gt;.def&lt;/code&gt; file after a &lt;code&gt;---&lt;/code&gt; separator. It can be helpful to include macros or other C defines into the code generated by the &lt;code&gt;cinterop&lt;/code&gt; tool. Method bodies are compiled and fully included into the binary too. Let's use that feature to have a runnable example without a need for a C compiler. To implement that, we need to add implementations to the C functions from the &lt;code&gt;lib.h&lt;/code&gt; file, and place these functions into a &lt;code&gt;.def&lt;/code&gt; file. We will have the following &lt;code&gt;interop.def&lt;/code&gt; result:</source>
          <target state="translated">我们可能在 &lt;code&gt;---&lt;/code&gt; 分隔符之后将所有声明直接包含在 &lt;code&gt;.def&lt;/code&gt; 文件中。在 &lt;code&gt;cinterop&lt;/code&gt; 工具生成的代码中包含宏或其他C定义可能会有所帮助。方法体被编译并完全包含在二进制文件中。让我们使用该功能创建一个可运行的示例，而无需C编译器。为此，我们需要从 &lt;code&gt;lib.h&lt;/code&gt; 文件向C函数添加实现，并将这些函数放入 &lt;code&gt;.def&lt;/code&gt; 文件中。我们将得到以下 &lt;code&gt;interop.def&lt;/code&gt; 结果：</target>
        </trans-unit>
        <trans-unit id="bb703fd0c61569a76d50c3b521794196aa1b8db0" translate="yes" xml:space="preserve">
          <source>We need to assign the &lt;code&gt;id&lt;/code&gt; to the &lt;code&gt;TextView&lt;/code&gt; control of our activity to access it from the code. Let's patch the &lt;code&gt;app/src/main/res/layout/activity_main.xml&lt;/code&gt; file (the name may be different if we changed it in the new project wizard) and add several more attributes to the &lt;code&gt;&amp;lt;TextView&amp;gt;&lt;/code&gt; element:</source>
          <target state="translated">我们需要将 &lt;code&gt;id&lt;/code&gt; 分配给活动的 &lt;code&gt;TextView&lt;/code&gt; 控件，以便从代码中访问它。让我们修补 &lt;code&gt;app/src/main/res/layout/activity_main.xml&lt;/code&gt; 文件（如果在新项目向导中更改了名称，则名称可能会有所不同），并向 &lt;code&gt;&amp;lt;TextView&amp;gt;&lt;/code&gt; 元素添加更多属性：</target>
        </trans-unit>
        <trans-unit id="6b59ffea87e48a8dddabef126cfdaa1e77887d03" translate="yes" xml:space="preserve">
          <source>We need to configure an Xcode project to use our framework. The configuration depends on the target platform.</source>
          <target state="translated">我们需要配置一个Xcode项目来使用我们的框架。配置取决于目标平台。</target>
        </trans-unit>
        <trans-unit id="8c3349f607cc5a810a187a7d773102a89d925fbd" translate="yes" xml:space="preserve">
          <source>We need to have a Kotlin compiler on our machines. The &lt;a href=&quot;basic-kotlin-native-app#obtaining-the-compiler&quot;&gt;A Basic Kotlin Application&lt;/a&gt; tutorial contains more explanations for that step. Let's assume, we have a console, where the &lt;code&gt;kotlinc-native&lt;/code&gt;, &lt;code&gt;cinterop&lt;/code&gt;, and &lt;code&gt;klib&lt;/code&gt; commands are available.</source>
          <target state="translated">我们需要在机器上安装Kotlin编译器。《&lt;a href=&quot;basic-kotlin-native-app#obtaining-the-compiler&quot;&gt;基本Kotlin应用程序&lt;/a&gt;教程》包含有关该步骤的更多说明。假设我们有一个控制台，可以使用 &lt;code&gt;kotlinc-native&lt;/code&gt; ， &lt;code&gt;cinterop&lt;/code&gt; 和 &lt;code&gt;klib&lt;/code&gt; 命令。</target>
        </trans-unit>
        <trans-unit id="027177ad8c50f7e3918b01a86e99731d536a90cd" translate="yes" xml:space="preserve">
          <source>We need to have a Kotlin compiler on our machines. The &lt;a href=&quot;basic-kotlin-native-app#obtaining-the-compiler&quot;&gt;A Basic Kotlin Application&lt;/a&gt; tutorial covers that step in details. Let's assume that we have a console, where the &lt;code&gt;kotlinc-native&lt;/code&gt;, &lt;code&gt;cinterop&lt;/code&gt;, and &lt;code&gt;klib&lt;/code&gt; commands are available.</source>
          <target state="translated">我们需要在机器上安装Kotlin编译器。在&lt;a href=&quot;basic-kotlin-native-app#obtaining-the-compiler&quot;&gt;一个基本的科特林应用&lt;/a&gt;教程涵盖了详细的一步。假设我们有一个控制台，可以使用 &lt;code&gt;kotlinc-native&lt;/code&gt; ， &lt;code&gt;cinterop&lt;/code&gt; 和 &lt;code&gt;klib&lt;/code&gt; 命令。</target>
        </trans-unit>
        <trans-unit id="3c043e1a723b8be73d20799e39d49b6268885069" translate="yes" xml:space="preserve">
          <source>We need to have a Kotlin compiler on our machines. The &lt;a href=&quot;basic-kotlin-native-app#obtaining-the-compiler&quot;&gt;A Basic Kotlin Application&lt;/a&gt; tutorial explains the steps in detail. Let's assume we have a console, where the &lt;code&gt;kotlinc-native&lt;/code&gt;, &lt;code&gt;cinterop&lt;/code&gt;, and &lt;code&gt;klib&lt;/code&gt; commands are available.</source>
          <target state="translated">我们需要在机器上安装Kotlin编译器。在&lt;a href=&quot;basic-kotlin-native-app#obtaining-the-compiler&quot;&gt;一个基本的科特林应用&lt;/a&gt;教程将详细介绍的步骤。假设我们有一个控制台，可以使用 &lt;code&gt;kotlinc-native&lt;/code&gt; ， &lt;code&gt;cinterop&lt;/code&gt; 和 &lt;code&gt;klib&lt;/code&gt; 命令。</target>
        </trans-unit>
        <trans-unit id="ab5784dabb9482fdb660b478b956f2503674f995" translate="yes" xml:space="preserve">
          <source>We need to refresh the Gradle Project settings to apply these changes. Click on the &lt;code&gt;Sync Now&lt;/code&gt; link or use the &lt;em&gt;Gradle&lt;/em&gt; tool window and click the refresh action from the context menu on the root Gradle project.</source>
          <target state="translated">我们需要刷新Gradle Project设置以应用这些更改。单击 &lt;code&gt;Sync Now&lt;/code&gt; 链接，或使用&lt;em&gt;Gradle&lt;/em&gt;工具窗口，然后从Gradle根项目的上下文菜单中单击刷新操作。</target>
        </trans-unit>
        <trans-unit id="e0a25a2206a6fb40af56c49d12ab94e8fd653881" translate="yes" xml:space="preserve">
          <source>We need to supply the right Framework out of those four depending on the selected target in the Xcode project. It depends on the target configuration selected in Xcode. Also, we'd like to make Xcode compile the Framework for us before the build. We need to include the additional task to the end of the &lt;code&gt;SharedCode/build.gradle&lt;/code&gt; Gradle file:</source>
          <target state="translated">我们需要根据Xcode项目中选定的目标提供这四个框架中的正确框架。这取决于在Xcode中选择的目标配置。另外，我们希望在构建之前让Xcode为我们编译Framework。我们需要将其他任务添加到 &lt;code&gt;SharedCode/build.gradle&lt;/code&gt; Gradle文件的末尾：</target>
        </trans-unit>
        <trans-unit id="27d58e7d45f1a7f3fbb5989a56fe0b4132ca9bca" translate="yes" xml:space="preserve">
          <source>We now define the &lt;em&gt;GreetingController&lt;/em&gt; which serves requests of the form &lt;em&gt;/greeting?name={value}&lt;/em&gt; and returns a JSON object representing an instance of &lt;em&gt;Greeting&lt;/em&gt;</source>
          <target state="translated">现在，我们定义&lt;em&gt;GreetingController&lt;/em&gt;，该请求为&lt;em&gt;/ greeting？name = {value}&lt;/em&gt;形式的请求，并返回表示&lt;em&gt;Greeting&lt;/em&gt;实例的JSON对象&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="5172c1ac8d2fad040b4dc376d3d08d8d24a279b3" translate="yes" xml:space="preserve">
          <source>We now have a local variable &lt;code&gt;number&lt;/code&gt; whose value is 42 and whose type is &lt;code&gt;Int&lt;/code&gt; (because that's the type of the literal &lt;code&gt;42&lt;/code&gt;), and another local variable &lt;code&gt;message&lt;/code&gt; whose value is &lt;code&gt;&quot;Hello&quot;&lt;/code&gt; and whose type is &lt;code&gt;String&lt;/code&gt;. Subsequent usages of the variable must use only the name, not &lt;code&gt;var&lt;/code&gt;:</source>
          <target state="translated">现在，我们有了一个本地变量 &lt;code&gt;number&lt;/code&gt; 其值为42，类型为 &lt;code&gt;Int&lt;/code&gt; （因为这是文字 &lt;code&gt;42&lt;/code&gt; 的类型），还有另一个本地变量 &lt;code&gt;message&lt;/code&gt; 其值为 &lt;code&gt;&quot;Hello&quot;&lt;/code&gt; ，类型为 &lt;code&gt;String&lt;/code&gt; 。变量的后续用法必须仅使用名称，而不使用 &lt;code&gt;var&lt;/code&gt; ：</target>
        </trans-unit>
        <trans-unit id="dfb0f090289673dd1e3bce3bdb08b454f3c07da9" translate="yes" xml:space="preserve">
          <source>We now need an HTML page to load the code, so we'll create a file called &lt;code&gt;index.html&lt;/code&gt;. If you want more information on how Kotlin compiles to JavaScript and the output generated, check out the &lt;a href=&quot;../kotlin-to-javascript/kotlin-to-javascript&quot;&gt;Kotlin to JavaScript&lt;/a&gt; tutorial.</source>
          <target state="translated">现在，我们需要一个HTML页面来加载代码，因此我们将创建一个名为 &lt;code&gt;index.html&lt;/code&gt; 的文件。如果您想了解有关Kotlin如何编译为JavaScript以及生成的输出的更多信息，请查看&lt;a href=&quot;../kotlin-to-javascript/kotlin-to-javascript&quot;&gt;Kotlin to JavaScript&lt;/a&gt;教程。</target>
        </trans-unit>
        <trans-unit id="8ae2c927826795d420c34c1b15ddab31d41644c0" translate="yes" xml:space="preserve">
          <source>We observed that annotating your code almost hasn't changed when you switched to Kotlin. Now let's see what changes should be made to the build script.</source>
          <target state="translated">我们观察到,当你切换到Kotlin时,注释你的代码几乎没有改变。现在让我们看看应该对构建脚本做哪些修改。</target>
        </trans-unit>
        <trans-unit id="8ffa6d76c8e1bf7a1c5dd4d42cd1a6d0515ef81b" translate="yes" xml:space="preserve">
          <source>We open Xcode and select &lt;em&gt;Create a new Xcode project&lt;/em&gt; option. In the dialog, we choose the iOS target and select the &lt;em&gt;Single View App&lt;/em&gt;. Fill the next page with defaults, and use the &lt;code&gt;KotlinIOS&lt;/code&gt; (or something else) as the &lt;em&gt;Product Name&lt;/em&gt;. Let's select Swift as the language (it is possible to use Objective-C too). We should instruct Xcode to place the project into the &lt;code&gt;native&lt;/code&gt; folder under our project, later we will use relative paths in the configuration files.</source>
          <target state="translated">我们打开Xcode并选择&lt;em&gt;Create a new Xcode project&lt;/em&gt;选项。在对话框中，我们选择iOS目标，然后选择&lt;em&gt;Single View App&lt;/em&gt;。使用默认值填充下一页，并使用 &lt;code&gt;KotlinIOS&lt;/code&gt; （或其他&lt;em&gt;名称&lt;/em&gt;）作为&lt;em&gt;产品名称&lt;/em&gt;。让我们选择Swift作为语言（也可以使用Objective-C）。我们应该指示Xcode将项目放入项目下的 &lt;code&gt;native&lt;/code&gt; 文件夹中，稍后我们将在配置文件中使用相对路径。</target>
        </trans-unit>
        <trans-unit id="a2530cc820c7c771c8fc29995c153d4bf24643ea" translate="yes" xml:space="preserve">
          <source>We provide &lt;em&gt;all-open&lt;/em&gt; plugin support both for Gradle and Maven with the complete IDE integration.</source>
          <target state="translated">我们通过完整的IDE集成为Gradle和Maven 提供&lt;em&gt;全开放式&lt;/em&gt;插件支持。</target>
        </trans-unit>
        <trans-unit id="8737e3b3a5c293a6cb9372838dbc9870d668570a" translate="yes" xml:space="preserve">
          <source>We provide the -language-version and -api-version flags that make a new version emulate the behaviour of an old one, for compatibility purposes. Normally, at least one previous version is supported. This effectively leaves a time span of two full feature release cycles for migration (which usually amounts to about two years). Using an older kotlin-stdlib or kotlin-reflect with a newer compiler without specifying compatibility flags is not recommended, and the compiler will report a &lt;a href=&quot;compatibility-modes&quot;&gt;warning&lt;/a&gt; when this happens.</source>
          <target state="translated">我们提供-language-version和-api-version标志，这些标志使新版本模仿旧版本的行为，以实现兼容性。通常，至少支持一个以前的版本。这实际上为迁移留出了两个完整功能发布周期的时间跨度（通常大约为两年）。不建议在未指定兼容性标志的情况下将较旧的kotlin-stdlib或kotlin-reflect与较新的编译器一起使用，并且当发生这种情况时，编译器将报告&lt;a href=&quot;compatibility-modes&quot;&gt;警告&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="e91c098e8aab839aef30caa8d584e2cae0663d0e" translate="yes" xml:space="preserve">
          <source>We qualified the type parameter with the &lt;code&gt;reified&lt;/code&gt; modifier, now it&amp;rsquo;s accessible inside the function, almost as if it were a normal class. Since the function is inlined, no reflection is needed, normal operators like &lt;code&gt;!is&lt;/code&gt; and &lt;code&gt;as&lt;/code&gt; are working now. Also, we can call it as mentioned above: &lt;code&gt;myTree.findParentOfType&amp;lt;MyTreeNodeType&amp;gt;()&lt;/code&gt;.</source>
          <target state="translated">我们使用 &lt;code&gt;reified&lt;/code&gt; 修饰符对类型参数进行了限定，现在可以在函数内部访问它了，几乎就像是普通类一样。由于内联函数，不需要反射，正常的运营商如 &lt;code&gt;!is&lt;/code&gt; 和 &lt;code&gt;as&lt;/code&gt; 现在正在工作。同样，我们可以如上所述调用它： &lt;code&gt;myTree.findParentOfType&amp;lt;MyTreeNodeType&amp;gt;()&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="7840bc09de48b5cc97bf23a9db5d15e17420d9fa" translate="yes" xml:space="preserve">
          <source>We recommend &lt;code&gt;with&lt;/code&gt; for calling functions on the context object without providing the lambda result. In the code, &lt;code&gt;with&lt;/code&gt; can be read as &amp;ldquo;&lt;em&gt;with this object, do the following.&lt;/em&gt;&amp;rdquo;</source>
          <target state="translated">我们建议 &lt;code&gt;with&lt;/code&gt; 调用上下文对象上，而无须提供拉姆达结果。在代码中， &lt;code&gt;with&lt;/code&gt; &lt;em&gt;此对象&lt;/em&gt;可以读为&amp;ldquo; &lt;em&gt;，请执行以下操作。&lt;/em&gt;&amp;rdquo;</target>
        </trans-unit>
        <trans-unit id="55acd20cd8a96e52ff245292bd60de85bd57b76c" translate="yes" xml:space="preserve">
          <source>We see from these definitions that the Kotlin object &lt;code&gt;Object&lt;/code&gt; is mapped into &lt;code&gt;libnative_kref_example_Object&lt;/code&gt;, and &lt;code&gt;Clazz&lt;/code&gt; is mapped into &lt;code&gt;libnative_kref_example_Clazz&lt;/code&gt;. Both structs contain nothing but the &lt;code&gt;pinned&lt;/code&gt; field with a pointer, the field type &lt;code&gt;libnative_KNativePtr&lt;/code&gt; is defined as &lt;code&gt;void*&lt;/code&gt; above.</source>
          <target state="translated">我们从这些定义的科特林对象看 &lt;code&gt;Object&lt;/code&gt; 映射到 &lt;code&gt;libnative_kref_example_Object&lt;/code&gt; ，并 &lt;code&gt;Clazz&lt;/code&gt; 被映射到 &lt;code&gt;libnative_kref_example_Clazz&lt;/code&gt; 。这两个结构 &lt;code&gt;libnative_KNativePtr&lt;/code&gt; 包含带有指针的 &lt;code&gt;pinned&lt;/code&gt; 字段，字段类型libnative_KNativePtr在上面被定义为 &lt;code&gt;void*&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="e6899aab23e93f36bbb67e40e2a50b9ebcd2d51b" translate="yes" xml:space="preserve">
          <source>We see that &lt;code&gt;cinterop&lt;/code&gt; generated wrapper types for our &lt;code&gt;struct&lt;/code&gt; and &lt;code&gt;union&lt;/code&gt; types. For &lt;code&gt;MyStruct&lt;/code&gt; and &lt;code&gt;MyUnion&lt;/code&gt; type declarations in C, we have the Kotlin classes &lt;code&gt;MyStruct&lt;/code&gt; and &lt;code&gt;MyUnion&lt;/code&gt; generated respectively. The wrappers inherit from the &lt;code&gt;CStructVar&lt;/code&gt; base class and declare all fields as Kotlin properties. It uses &lt;code&gt;CValue&amp;lt;T&amp;gt;&lt;/code&gt; to represent a by-value structure parameter and &lt;code&gt;CValuesRef&amp;lt;T&amp;gt;?&lt;/code&gt; to represent passing a pointer to a structure or a union.</source>
          <target state="translated">我们看到 &lt;code&gt;cinterop&lt;/code&gt; 为我们的 &lt;code&gt;struct&lt;/code&gt; 和 &lt;code&gt;union&lt;/code&gt; 类型生成了包装器类型。对于C中的 &lt;code&gt;MyStruct&lt;/code&gt; 和 &lt;code&gt;MyUnion&lt;/code&gt; 类型声明，我们分别生成了Kotlin类 &lt;code&gt;MyStruct&lt;/code&gt; 和 &lt;code&gt;MyUnion&lt;/code&gt; 。包装器继承自 &lt;code&gt;CStructVar&lt;/code&gt; 基类，并将所有字段声明为Kotlin属性。它使用 &lt;code&gt;CValue&amp;lt;T&amp;gt;&lt;/code&gt; 表示按值结构参数，而 &lt;code&gt;CValuesRef&amp;lt;T&amp;gt;?&lt;/code&gt; 表示传递指向结构或联合的指针。</target>
        </trans-unit>
        <trans-unit id="f057034bf9d5d678ae656c6371649fbb0395e9c1" translate="yes" xml:space="preserve">
          <source>We see that Kotlin &lt;code&gt;String&lt;/code&gt; and Objective-C &lt;code&gt;NSString*&lt;/code&gt; are mapped transparently. Similarly, &lt;code&gt;Unit&lt;/code&gt; type from Kotlin is mapped to &lt;code&gt;void&lt;/code&gt;. We see primitive types are mapped directly. Non-nullable primitive types are mapped transparently. Nullable primitive types are mapped into &lt;code&gt;Kotlin&amp;lt;TYPE&amp;gt;*&lt;/code&gt; types, as shown in the table &lt;a href=&quot;#kotlin-numbers-and-nsnumber&quot;&gt;above&lt;/a&gt;. Both higher order functions &lt;code&gt;acceptFunF&lt;/code&gt; and &lt;code&gt;supplyFun&lt;/code&gt; are included, and accept Objective-C blocks.</source>
          <target state="translated">我们看到Kotlin &lt;code&gt;String&lt;/code&gt; 和Objective-C &lt;code&gt;NSString*&lt;/code&gt; 是透明映射的。同样，来自Kotlin的 &lt;code&gt;Unit&lt;/code&gt; 类型被映射为 &lt;code&gt;void&lt;/code&gt; 。我们看到原始类型被直接映射。不可空的原始类型被透明地映射。可空基元类型映射为 &lt;code&gt;Kotlin&amp;lt;TYPE&amp;gt;*&lt;/code&gt; 类型，如上表&lt;a href=&quot;#kotlin-numbers-and-nsnumber&quot;&gt;所示&lt;/a&gt;。包含了两个更高阶的函数 &lt;code&gt;acceptFunF&lt;/code&gt; 和 &lt;code&gt;supplyFun&lt;/code&gt; ，并接受Objective-C块。</target>
        </trans-unit>
        <trans-unit id="35a16af72746a4a3a02afc71cbee1736ad51d23a" translate="yes" xml:space="preserve">
          <source>We see that our function typedef from C has been turned into Kotlin &lt;code&gt;typealias&lt;/code&gt;. It uses &lt;code&gt;CPointer&amp;lt;..&amp;gt;&lt;/code&gt; type to represent the pointer parameters, and &lt;code&gt;CFunction&amp;lt;(Int)-&amp;gt;Int&amp;gt;&lt;/code&gt; to represent the function signature. There is an &lt;code&gt;invoke&lt;/code&gt; operator extension function available for all &lt;code&gt;CPointer&amp;lt;CFunction&amp;lt;..&amp;gt;&lt;/code&gt; types, so that it is possible to call it as we would call any other function in Kotlin.</source>
          <target state="translated">我们看到，来自C的函数typedef已变成Kotlin &lt;code&gt;typealias&lt;/code&gt; 。它使用 &lt;code&gt;CPointer&amp;lt;..&amp;gt;&lt;/code&gt; 类型表示指针参数，并使用 &lt;code&gt;CFunction&amp;lt;(Int)-&amp;gt;Int&amp;gt;&lt;/code&gt; 表示函数签名。所有 &lt;code&gt;CPointer&amp;lt;CFunction&amp;lt;..&amp;gt;&lt;/code&gt; 类型都有一个 &lt;code&gt;invoke&lt;/code&gt; operator扩展函数，因此可以像调用Kotlin中的任何其他函数一样调用它。</target>
        </trans-unit>
        <trans-unit id="c2878a9c7f0b432f6ca797d421e5946bffba2e7e" translate="yes" xml:space="preserve">
          <source>We should drag the created build phase to the top of the list</source>
          <target state="translated">我们应该将创建的构建阶段拖到列表的顶部</target>
        </trans-unit>
        <trans-unit id="96dd80304356c421140b6cec43e73736a5d2cf73" translate="yes" xml:space="preserve">
          <source>We simply take every coroutine and await its result here, then all results are added together by the standard library function &lt;code&gt;sumBy()&lt;/code&gt;. But the compiler rightfully complains:</source>
          <target state="translated">我们只需要 &lt;code&gt;sumBy()&lt;/code&gt; 每个协程，然后在这里等待其结果，然后将所有结果通过标准库函数sumBy（）进行加法运算。但是编译器正确地抱怨：</target>
        </trans-unit>
        <trans-unit id="256672724470d83204a91011d31c7585e8e896c2" translate="yes" xml:space="preserve">
          <source>We simply take every coroutine and await its result here, then all results are added together by the standard library function &lt;code&gt;sumOf()&lt;/code&gt;. But the compiler rightfully complains:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7d4baf88fc00c2c6a8043a4496a26dfca6b633d7" translate="yes" xml:space="preserve">
          <source>We start with a very simple action that increments a shared mutable variable using multi-threaded &lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/-dispatchers/-default.html&quot;&gt;Dispatchers.Default&lt;/a&gt;.</source>
          <target state="translated">我们从一个非常简单的动作开始，该动作使用多线程&lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/-dispatchers/-default.html&quot;&gt;Dispatchers.Default&lt;/a&gt;增加一个共享的可变变量。</target>
        </trans-unit>
        <trans-unit id="d6e2ee50e438c21fd164031d81fcec588a999b4f" translate="yes" xml:space="preserve">
          <source>We still have concurrent execution of both operations as evident from the output of the above main function:</source>
          <target state="translated">从上述主函数的输出中可以看出,我们仍然可以并发执行这两种操作。</target>
        </trans-unit>
        <trans-unit id="d309cfebc83a39f58f865d0bd1891f05f3570150" translate="yes" xml:space="preserve">
          <source>We still have concurrent execution of both operations, as evident from the output of the above &lt;code&gt;main&lt;/code&gt; function:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c7c80eca3836dfb2ec346ec74a1498c04b650629" translate="yes" xml:space="preserve">
          <source>We suggest you try the method &lt;a href=&quot;../java.io.-file/use-lines&quot;&gt;useLines&lt;/a&gt; instead which closes the stream when the processing is complete.</source>
          <target state="translated">建议您尝试使用&lt;a href=&quot;../java.io.-file/use-lines&quot;&gt;useLines&lt;/a&gt;方法，该方法将在处理完成后关闭流。</target>
        </trans-unit>
        <trans-unit id="d00e20f64ce7aa51453973eb86f6197d3fb8aac0" translate="yes" xml:space="preserve">
          <source>We use a normal sequential invocation, because the code in the coroutine, just like in the regular code, is &lt;em&gt;sequential&lt;/em&gt; by default. The following example demonstrates it by measuring the total time it takes to execute both suspending functions:</source>
          <target state="translated">我们使用普通的顺序调用，因为协程中的代码与常规代码中的代码一样，默认情况下是&lt;em&gt;顺序&lt;/em&gt;的。下面的示例通过测量执行两个挂起功能所需的总时间来演示此过程：</target>
        </trans-unit>
        <trans-unit id="aadde77016fbc4d33f0abaca395b0e32828abddd" translate="yes" xml:space="preserve">
          <source>We use the &lt;code&gt;import SharedCode&lt;/code&gt; to import our Framework, which we compiled with Kotlin/Native from Kotlin code. Next, we call the Kotlin function from it as &lt;code&gt;CommonKt.createApplicationScreenMessage()&lt;/code&gt;. Follow the &lt;a href=&quot;apple-framework&quot;&gt;Kotlin/Native as an Apple Framework&lt;/a&gt; tutorial for more details on the Kotlin/Native to Swift (or Objective-C) interop.</source>
          <target state="translated">我们使用 &lt;code&gt;import SharedCode&lt;/code&gt; 导入我们的框架，我们使用Kotlin / Native从Kotlin代码编译了该框架。接下来，我们从中将Kotlin函数称为 &lt;code&gt;CommonKt.createApplicationScreenMessage()&lt;/code&gt; 。遵循&lt;a href=&quot;apple-framework&quot;&gt;Kotlin / Native作为Apple Framework&lt;/a&gt;教程，以获取有关Kotlin / Native到Swift（或Objective-C）互操作的更多详细信息。</target>
        </trans-unit>
        <trans-unit id="085b9979a689e14ecd3808ec279a6c3ad33ba2ea" translate="yes" xml:space="preserve">
          <source>We use the &lt;code&gt;staticCFunction{..}&lt;/code&gt; helper function from Kotlin/Native to wrap a Kotlin lambda function into a C function pointer. It only allows having unbound and non-capturing lambda functions. For example, it is not able to use a local variable from the function. We may only use globally visible declarations. Throwing exceptions from a &lt;code&gt;staticCFunction{..}&lt;/code&gt; will end up in non-deterministic side-effects. It is vital to make sure that we are not throwing any sudden exceptions from it.</source>
          <target state="translated">我们使用Kotlin / Native 的 &lt;code&gt;staticCFunction{..}&lt;/code&gt; 辅助函数将Kotlin lambda函数包装到C函数指针中。它仅允许具有未绑定和不捕获的lambda函数。例如，它不能使用该函数中的局部变量。我们只能使用全局可见的声明。从 &lt;code&gt;staticCFunction{..}&lt;/code&gt; 异常将导致不确定的副作用。重要的是要确保我们不会引发任何突然的异常情况。</target>
        </trans-unit>
        <trans-unit id="6d750a9144d219b73169d8ec8ee3282a5ce16530" translate="yes" xml:space="preserve">
          <source>We use the condition in the Gradle script to select the target platform for the framework. It is either &lt;code&gt;iOS arm64&lt;/code&gt; or &lt;code&gt;iOS x86_64&lt;/code&gt; depending on environment variables.</source>
          <target state="translated">我们使用Gradle脚本中的条件为框架选择目标平台。根据环境变量，它可以是 &lt;code&gt;iOS arm64&lt;/code&gt; 或 &lt;code&gt;iOS x86_64&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="87ead7e377be828bc8f924111dcab22679cf1455" translate="yes" xml:space="preserve">
          <source>We use the extension property &lt;code&gt;ptr&lt;/code&gt; which comes from &lt;code&gt;memScoped&lt;/code&gt; lambda receiver type to turn &lt;code&gt;MyStruct&lt;/code&gt; and &lt;code&gt;MyUnion&lt;/code&gt; instances into native pointers. Those pointers are only valid inside the &lt;code&gt;memScoped&lt;/code&gt; block.</source>
          <target state="translated">我们使用来自 &lt;code&gt;memScoped&lt;/code&gt; lambda接收器类型的扩展属性 &lt;code&gt;ptr&lt;/code&gt; 将 &lt;code&gt;MyStruct&lt;/code&gt; 和 &lt;code&gt;MyUnion&lt;/code&gt; 实例转换为本机指针。这些指针仅在 &lt;code&gt;memScoped&lt;/code&gt; 块内部有效。</target>
        </trans-unit>
        <trans-unit id="3d19fb9c3674e9e7d03350ce663d175de7004c2d" translate="yes" xml:space="preserve">
          <source>We will be using &lt;a href=&quot;https://developer.android.com/studio/&quot;&gt;Android Studio&lt;/a&gt; for the Android part of the tutorial. It is also possible to use &lt;a href=&quot;https://jetbrains.com/idea&quot;&gt;IntelliJ IDEA&lt;/a&gt; Community or Ultimate edition.</source>
          <target state="translated">我们将在本教程的Android部分使用&lt;a href=&quot;https://developer.android.com/studio/&quot;&gt;Android Studio&lt;/a&gt;。也可以使用&lt;a href=&quot;https://jetbrains.com/idea&quot;&gt;IntelliJ IDEA&lt;/a&gt;社区版或Ultimate版。</target>
        </trans-unit>
        <trans-unit id="495de00f60f65274c47ffb67586fe526a49cb4f3" translate="yes" xml:space="preserve">
          <source>We will be using IntelliJ IDEA Community Edition for the example. You need to make sure you have the latest version of the Kotlin plugin installed, 1.3.x or newer. We select &lt;em&gt;File | New | Project&lt;/em&gt;, select &lt;em&gt;Kotlin | Kotlin (Multiplatform Library)&lt;/em&gt; and configure the project in the way we want.</source>
          <target state="translated">我们将使用IntelliJ IDEA Community Edition作为示例。您需要确保已安装最新版本的Kotlin插件1.3.x或更高版本。我们选择&lt;em&gt;文件|新增|项目&lt;/em&gt;，选择&lt;em&gt;Kotlin | Kotlin（多平台库）&lt;/em&gt;并按照我们想要的方式配置项目。</target>
        </trans-unit>
        <trans-unit id="240e26cd69c673ca5063d1fec6c288458947715f" translate="yes" xml:space="preserve">
          <source>We will be using IntelliJ IDEA Community Edition for this tutorial, though using Ultimate edition is possible as well. The Kotlin plugin 1.3.x or higher should be installed in the IDE. This can be verified via the &lt;em&gt;Language &amp;amp; Frameworks | Kotlin Updates&lt;/em&gt; section in the &lt;em&gt;Settings&lt;/em&gt; (or &lt;em&gt;Preferences&lt;/em&gt;) of the IDE. Native part of this project is written using Mac OS X, but don't worry if you are using another platform, the platform affects only directory names in this particular tutorial.</source>
          <target state="translated">本教程将使用IntelliJ IDEA社区版，但也可以使用Ultimate版。应该在IDE中安装Kotlin插件1.3.x或更高版本。可以通过&lt;em&gt;语言和框架&lt;/em&gt;进行验证&lt;em&gt;。&lt;/em&gt;IDE 的&lt;em&gt;&amp;ldquo;设置&amp;rdquo;&lt;/em&gt;（或&lt;em&gt;&amp;ldquo;首选项&amp;rdquo;&lt;/em&gt;）中的&lt;em&gt;&amp;ldquo; &lt;/em&gt;&lt;em&gt;Kotlin更新&amp;rdquo;&lt;/em&gt;部分。该项目的本机部分是使用Mac OS X编写的，但是如果您使用的是其他平台，请不要担心，该平台仅影响此特定教程中的目录名称。</target>
        </trans-unit>
        <trans-unit id="a5df86530b0f4b4eea42ee317054bed9ca2a9e03" translate="yes" xml:space="preserve">
          <source>We will be using the &lt;code&gt;x64 Native Tools Command Prompt &amp;lt;VERSION&amp;gt;&lt;/code&gt; console. We'll see the shortcut to open the console in the start menu. It comes with a Microsoft Visual Studio package.</source>
          <target state="translated">我们将使用 &lt;code&gt;x64 Native Tools Command Prompt &amp;lt;VERSION&amp;gt;&lt;/code&gt; 控制台。我们将在开始菜单中看到打开控制台的快捷方式。它带有Microsoft Visual Studio软件包。</target>
        </trans-unit>
        <trans-unit id="356ae5746574838fa3924ac6e010e44bd7dc600e" translate="yes" xml:space="preserve">
          <source>We will continue exploring more C language types and their representation in Kotlin/Native in next tutorials:</source>
          <target state="translated">我们将在接下来的教程中继续探索更多的C语言类型及其在Kotlin/Native中的表现形式。</target>
        </trans-unit>
        <trans-unit id="d5797487ddb0eb41e5d2e9c68ced4d766fd86f98" translate="yes" xml:space="preserve">
          <source>We will continue to explore more complicated C language types and their representation in Kotlin/Native in the next tutorials:</source>
          <target state="translated">我们将在接下来的教程中继续探索更复杂的C语言类型及其在Kotlin/Native中的表示。</target>
        </trans-unit>
        <trans-unit id="23c2f2e6b1a14ab9c7e2d8312c7379c2ecdd3c02" translate="yes" xml:space="preserve">
          <source>We will create a simple Kotlin/JavaScript library.</source>
          <target state="translated">我们将创建一个简单的Kotlin/JavaScript库。</target>
        </trans-unit>
        <trans-unit id="194f5ab4f85b03618fc04358b4a842a9d1306f59" translate="yes" xml:space="preserve">
          <source>We will then see something similar to this:</source>
          <target state="translated">我们就会看到类似这样的情况。</target>
        </trans-unit>
        <trans-unit id="3a29960a39a18059d04b2735de83331640c538de" translate="yes" xml:space="preserve">
          <source>We would like to emphasize that extension functions are dispatched &lt;strong&gt;statically&lt;/strong&gt;, i.e. they are not virtual by receiver type. This means that the extension function being called is determined by the type of the expression on which the function is invoked, not by the type of the result of evaluating that expression at runtime. For example:</source>
          <target state="translated">我们要强调的是，扩展功能是&lt;strong&gt;静态&lt;/strong&gt;分配的，即，它们不是由接收者类型虚拟的。这意味着被调用的扩展函数是由在其上调用该函数的表达式的类型确定的，而不是由在运行时对该表达式求值的结果的类型确定的。例如：</target>
        </trans-unit>
        <trans-unit id="b83946b87080a81db62683de18b3b00c28f7ba2c" translate="yes" xml:space="preserve">
          <source>We wouldn't know if this function would be invoked on only activities from our sources or on plain Java activities also. Because of this, we don&amp;rsquo;t use caching there, even if &lt;code&gt;MyActivity&lt;/code&gt; instance from the previous example is passed as a receiver.</source>
          <target state="translated">我们不知道是否仅在源代码中的活动或纯Java活动中调用此函数。因此，即使将上一个示例中的 &lt;code&gt;MyActivity&lt;/code&gt; 实例作为接收者进行传递，我们也不会在此处使用缓存。</target>
        </trans-unit>
        <trans-unit id="64fbc9430739427e8ecff708c04a32c1ecf8e64f" translate="yes" xml:space="preserve">
          <source>We&amp;rsquo;ve added a new API to &lt;code&gt;kotlin-reflect&lt;/code&gt; that can be used to enumerate all the direct subtypes of a &lt;code&gt;sealed&lt;/code&gt; class, namely &lt;code&gt;KClass.sealedSubclasses&lt;/code&gt;.</source>
          <target state="translated">我们在 &lt;code&gt;kotlin-reflect&lt;/code&gt; 中添加了一个新API ，可用于枚举 &lt;code&gt;sealed&lt;/code&gt; 类的所有直接子类型，即 &lt;code&gt;KClass.sealedSubclasses&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="280290f99293d030e512b76f98e946df19f3aa24" translate="yes" xml:space="preserve">
          <source>We'd start solving it by creating a Kotlin source file with an arbitrary name. &lt;code&gt;A.kt&lt;/code&gt; will do well. First, we need to implement a function specified in the problem statement as:</source>
          <target state="translated">我们将通过使用任意名称创建Kotlin源文件来开始解决它。 &lt;code&gt;A.kt&lt;/code&gt; 会做的很好。首先，我们需要将问题语句中指定的功能实现为：</target>
        </trans-unit>
        <trans-unit id="48dd517a499e14c158e9fa4782184f8188502e0f" translate="yes" xml:space="preserve">
          <source>We'll be using IntelliJ IDEA (Ultimate or Community edition). To learn how to start a new Kotlin project in IntelliJ IDEA, see the &lt;a href=&quot;getting-started&quot;&gt;Getting Started with IntellJ IDEA&lt;/a&gt; tutorial. If you are using build tools, please see the corresponding entry under &lt;a href=&quot;build-tools&quot;&gt;Build Tools&lt;/a&gt;.</source>
          <target state="translated">我们将使用IntelliJ IDEA（最终版或社区版）。要了解如何在IntelliJ IDEA中启动新的Kotlin项目，请参阅&lt;a href=&quot;getting-started&quot;&gt;IntellJ IDEA入门&lt;/a&gt;教程。如果您使用的是构建工具，请参见&amp;ldquo; &lt;a href=&quot;build-tools&quot;&gt;构建工具&amp;rdquo;&lt;/a&gt;下的相应条目。</target>
        </trans-unit>
        <trans-unit id="13befb7a01cdbb85144f68b9efce98f561e6a626" translate="yes" xml:space="preserve">
          <source>We'll be using IntelliJ IDEA (Ultimate or Community edition). To learn how to start a new Kotlin project in IntelliJ IDEA, see the &lt;a href=&quot;jvm-get-started&quot;&gt;Getting Started with IntellJ IDEA&lt;/a&gt; tutorial. If you are using build tools, please see the corresponding entry under &lt;a href=&quot;build-tools&quot;&gt;Build Tools&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1f7aa73d697a63f1be8df9974161860c77d7f65f" translate="yes" xml:space="preserve">
          <source>We'll create a new Android project via &lt;em&gt;Start New Android Project&lt;/em&gt; item. If using IntelliJ IDEA, we need to select &lt;em&gt;Android&lt;/em&gt; in the left panel of the &lt;em&gt;New Project&lt;/em&gt; wizard.</source>
          <target state="translated">我们将通过&amp;ldquo; &lt;em&gt;开始新的Android项目&amp;rdquo;&lt;/em&gt;项创建一个新的Android项目。如果使用IntelliJ IDEA，我们需要在&lt;em&gt;New Project&lt;/em&gt;向导的左侧面板中选择&lt;em&gt;Android&lt;/em&gt;。&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="adbf109def75db2c462938914849c5eb6eed73eb" translate="yes" xml:space="preserve">
          <source>We'll learn how to:</source>
          <target state="translated">我们将学习如何。</target>
        </trans-unit>
        <trans-unit id="65dfa3289b9a70c638718585acaabd5931d1b082" translate="yes" xml:space="preserve">
          <source>We'll look at &lt;a href=&quot;android-frameworks#dagger&quot;&gt;Dagger&lt;/a&gt;, &lt;a href=&quot;android-frameworks#butterknife&quot;&gt;Butterknife&lt;/a&gt;, &lt;a href=&quot;android-frameworks#data-binding&quot;&gt;Data Binding&lt;/a&gt; and &lt;a href=&quot;android-frameworks#dbflow&quot;&gt;DBFlow&lt;/a&gt; (other frameworks can be set up similarly). All these frameworks work through annotation processing: you annotate the code to have the boiler-plate code generated for you. Annotations allow to hide all the verbosity and keep your code simple, and if you need to understand what actually happens at runtime, you can look at the generated code. Note that all these frameworks generate source code in Java, not Kotlin.</source>
          <target state="translated">我们将看看&lt;a href=&quot;android-frameworks#dagger&quot;&gt;Dagger&lt;/a&gt;，&lt;a href=&quot;android-frameworks#butterknife&quot;&gt;Butterknife&lt;/a&gt;，&lt;a href=&quot;android-frameworks#data-binding&quot;&gt;Data Binding&lt;/a&gt;和&lt;a href=&quot;android-frameworks#dbflow&quot;&gt;DBFlow&lt;/a&gt;（其他框架可以类似地设置）。所有这些框架都通过注释处理工作：对代码进行注释，以为您生成样板代码。注释可以隐藏所有的详细信息，并使代码保持简单，如果您需要了解运行时实际发生的情况，则可以查看生成的代码。请注意，所有这些框架均使用Java而非Kotlin生成源代码。</target>
        </trans-unit>
        <trans-unit id="c7ac9f8cb4bffee3deae462c300ad8acc7b22566" translate="yes" xml:space="preserve">
          <source>We'll use the following &lt;code&gt;build.gradle&lt;/code&gt;&lt;code&gt;build.gradle.kts&lt;/code&gt; Gradle build file with the following contents:</source>
          <target state="translated">我们将使用以下 &lt;code&gt;build.gradle&lt;/code&gt; &lt;code&gt;build.gradle.kts&lt;/code&gt; Gradle构建文件，其内容如下：</target>
        </trans-unit>
        <trans-unit id="35e9daf2777de53728fdd63d8121926825802dd9" translate="yes" xml:space="preserve">
          <source>We're allowed to pass a &lt;code&gt;Car&lt;/code&gt; to &lt;code&gt;boast()&lt;/code&gt; because &lt;code&gt;Car&lt;/code&gt; is a subclass of &lt;code&gt;MotorVehicle&lt;/code&gt;. We're allowed to pass a &lt;code&gt;Car&lt;/code&gt; to &lt;code&gt;ride()&lt;/code&gt; because &lt;code&gt;Car&lt;/code&gt; implements &lt;code&gt;Driveable&lt;/code&gt; (thanks to being a subclass &lt;code&gt;MotorVehicle&lt;/code&gt;). Inside &lt;code&gt;boast()&lt;/code&gt;, we're only allowed to access the members of the declared parameter type &lt;code&gt;MotorVehicle&lt;/code&gt;, even if we're in a situation where we know that it's really a &lt;code&gt;Car&lt;/code&gt; (because there could be other callers that pass a non-&lt;code&gt;Car&lt;/code&gt;). Inside &lt;code&gt;ride()&lt;/code&gt;, we're only allowed to access the members of the declared parameter type &lt;code&gt;Driveable&lt;/code&gt;. This ensures that every member lookup is safe - the compiler only allows you to pass objects that are guaranteed to have the necessary members. The downside is that you will sometimes be forced to declare &quot;unnecessary&quot; interfaces or wrapper classes in order to make a function accept instances of different classes.</source>
          <target state="translated">我们允许一个通过 &lt;code&gt;Car&lt;/code&gt; 来 &lt;code&gt;boast()&lt;/code&gt; ，因为 &lt;code&gt;Car&lt;/code&gt; 是一个子类 &lt;code&gt;MotorVehicle&lt;/code&gt; 。我们可以将 &lt;code&gt;Car&lt;/code&gt; 传递给 &lt;code&gt;ride()&lt;/code&gt; ,因为 &lt;code&gt;Car&lt;/code&gt; 实现了 &lt;code&gt;Driveable&lt;/code&gt; （由于是 &lt;code&gt;MotorVehicle&lt;/code&gt; 的子类）。在 &lt;code&gt;boast()&lt;/code&gt; 内部，即使我们处在已知它确实是 &lt;code&gt;Car&lt;/code&gt; 的情况下，也只允许访问声明的参数类型 &lt;code&gt;MotorVehicle&lt;/code&gt; 的成员（因为可能有其他调用者传递非 &lt;code&gt;Car&lt;/code&gt; 的信息)）。内 &lt;code&gt;ride()&lt;/code&gt; ，我们只允许访问声明的参数类型 &lt;code&gt;Driveable&lt;/code&gt; 的成员。这样可以确保每个成员查找都是安全的-编译器仅允许您传递保证具有必需成员的对象。缺点是有时会迫使您声明&amp;ldquo;不必要的&amp;rdquo;接口或包装器类，以使函数接受不同类的实例。</target>
        </trans-unit>
        <trans-unit id="a12f1bb4ce7d202790746259d8059bc20b4c1c93" translate="yes" xml:space="preserve">
          <source>We're going to see how to set up TeamCity to build our Kotlin project. For more information and basics of TeamCity please check the &lt;a href=&quot;https://www.jetbrains.com/teamcity/documentation/&quot;&gt;Documentation page&lt;/a&gt; which contains information about installation, basic configuration, etc.</source>
          <target state="translated">我们将看到如何设置TeamCity来构建我们的Kotlin项目。有关TeamCity的更多信息和基础，请查看&amp;ldquo; &lt;a href=&quot;https://www.jetbrains.com/teamcity/documentation/&quot;&gt;文档&amp;rdquo;页面&lt;/a&gt;，其中包含有关安装，基本配置等的信息。</target>
        </trans-unit>
        <trans-unit id="dfe8cb673d9e8e417b1ac641d5d52b9b44cf3e8b" translate="yes" xml:space="preserve">
          <source>We're not going to cover the &lt;a href=&quot;../../reference/control-flow#when-expression&quot;&gt;&lt;code&gt;when&lt;/code&gt; expression&lt;/a&gt; in depth here since it doesn't have a close equivalent in Python, but check it out - it's pretty nifty, as it lets you compare one expression against many kinds of expressions in a very compact way (but it's not a full functional-programming-style pattern matcher). For example:</source>
          <target state="translated">我们不会在这里深入介绍&lt;a href=&quot;../../reference/control-flow#when-expression&quot;&gt; &lt;code&gt;when&lt;/code&gt; 表达式&lt;/a&gt;，因为它在Python中没有非常接近的等效表达式，但是请检查一下-这非常漂亮，因为它使您可以非常紧凑地比较一个表达式与多种表达式方式（但这不是完整的功能编程风格的模式匹配器）。例如：</target>
        </trans-unit>
        <trans-unit id="7a6d4821c53a1c0b88e02c8ce15a60335e60fc0a" translate="yes" xml:space="preserve">
          <source>We've converted the ButterKnife &lt;a href=&quot;https://github.com/JakeWharton/butterknife/tree/master/sample/app/src/main/java/com/example&quot;&gt;sample&lt;/a&gt; to Kotlin. The resulting code can be found &lt;a href=&quot;https://github.com/JetBrains/kotlin-examples/tree/master/gradle/android-butterknife&quot;&gt;here&lt;/a&gt;.</source>
          <target state="translated">我们已经将ButterKnife &lt;a href=&quot;https://github.com/JakeWharton/butterknife/tree/master/sample/app/src/main/java/com/example&quot;&gt;样本&lt;/a&gt;转换为Kotlin。结果代码可以在&lt;a href=&quot;https://github.com/JetBrains/kotlin-examples/tree/master/gradle/android-butterknife&quot;&gt;这里&lt;/a&gt;找到。</target>
        </trans-unit>
        <trans-unit id="61c686dd7fee7d596ed3150966a1df858b5684ea" translate="yes" xml:space="preserve">
          <source>We've now seen all the definitions and it is time to fix the code. Let's run the &lt;code&gt;runDebugExecutableNative&lt;/code&gt; Gradle task &lt;a href=&quot;basic-kotlin-native-app#run-in-ide&quot;&gt;in the IDE&lt;/a&gt; or use the following command to run the code:</source>
          <target state="translated">现在，我们已经看到了所有定义，现在是修复代码的时候了。让我们&lt;a href=&quot;basic-kotlin-native-app#run-in-ide&quot;&gt;在IDE中&lt;/a&gt;运行 &lt;code&gt;runDebugExecutableNative&lt;/code&gt; Gradle任务，或使用以下命令运行代码：</target>
        </trans-unit>
        <trans-unit id="7303eeb28a81c2ad71ddaf7a7ef26c96a5d46db5" translate="yes" xml:space="preserve">
          <source>We've now seen all the definitions and it is time to fix the code. Let's run the &lt;code&gt;runDebugExecutableNative&lt;/code&gt; Gradle task &lt;a href=&quot;using-intellij-idea&quot;&gt;in the IDE&lt;/a&gt; or use the following command to run the code:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8159d531b6661d9ca1d3ee3cd78cdb26173e7e20" translate="yes" xml:space="preserve">
          <source>We've seen all definitions and it is the time to fix the code. Let's run the &lt;code&gt;runDebugExecutableNative&lt;/code&gt; Gradle task &lt;a href=&quot;basic-kotlin-native-app#run-in-ide&quot;&gt;in IDE&lt;/a&gt; or use the following command to run the code:</source>
          <target state="translated">我们已经看到了所有定义，现在是修复代码的时候了。让我们&lt;a href=&quot;basic-kotlin-native-app#run-in-ide&quot;&gt;在IDE中&lt;/a&gt;运行 &lt;code&gt;runDebugExecutableNative&lt;/code&gt; Gradle任务，或使用以下命令运行代码：</target>
        </trans-unit>
        <trans-unit id="5060dcbe8547bb3d7e1fb6bf0d1175fce384646a" translate="yes" xml:space="preserve">
          <source>We've seen all definitions and it is the time to fix the code. Let's run the &lt;code&gt;runDebugExecutableNative&lt;/code&gt; Gradle task &lt;a href=&quot;using-intellij-idea&quot;&gt;in IDE&lt;/a&gt; or use the following command to run the code:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d875c328d56b6ba3de658fff30f901e7a7dadd62" translate="yes" xml:space="preserve">
          <source>We've seen all definitions and it is time to fix and run the code. Let's run the &lt;code&gt;runDebugExecutableNative&lt;/code&gt; Gradle task &lt;a href=&quot;basic-kotlin-native-app#run-in-ide&quot;&gt;in the IDE&lt;/a&gt; or use the following command to run the code:</source>
          <target state="translated">我们已经看到了所有定义，现在是修复和运行代码的时候了。让我们&lt;a href=&quot;basic-kotlin-native-app#run-in-ide&quot;&gt;在IDE中&lt;/a&gt;运行 &lt;code&gt;runDebugExecutableNative&lt;/code&gt; Gradle任务，或使用以下命令运行代码：</target>
        </trans-unit>
        <trans-unit id="6a79043503070152826fab6d2dc8528967704ffa" translate="yes" xml:space="preserve">
          <source>We've seen all definitions and it is time to fix and run the code. Let's run the &lt;code&gt;runDebugExecutableNative&lt;/code&gt; Gradle task &lt;a href=&quot;using-intellij-idea&quot;&gt;in the IDE&lt;/a&gt; or use the following command to run the code:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a792d756a38347597c27360412bb8f8fa517b753" translate="yes" xml:space="preserve">
          <source>Weak bidirectional character type &quot;AN&quot; in the Unicode specification.</source>
          <target state="translated">Unicode规范中的弱双向字符类型 &quot;AN&quot;。</target>
        </trans-unit>
        <trans-unit id="24dbecca4697c39dcb12d83d3e21e053a4fbf4ac" translate="yes" xml:space="preserve">
          <source>Weak bidirectional character type &quot;BN&quot; in the Unicode specification.</source>
          <target state="translated">Unicode规范中的弱双向字符类型 &quot;BN&quot;。</target>
        </trans-unit>
        <trans-unit id="b592dbfa74287749b5b330052c7e3f462ec0a974" translate="yes" xml:space="preserve">
          <source>Weak bidirectional character type &quot;CS&quot; in the Unicode specification.</source>
          <target state="translated">Unicode规范中的弱双向字符类型 &quot;CS&quot;。</target>
        </trans-unit>
        <trans-unit id="d484194528c4965d5cfe46ac4072c437b4f7364f" translate="yes" xml:space="preserve">
          <source>Weak bidirectional character type &quot;EN&quot; in the Unicode specification.</source>
          <target state="translated">Unicode规范中的弱双向字符类型 &quot;EN&quot;。</target>
        </trans-unit>
        <trans-unit id="73f96fcc50384aeb2e177d07991c8003c66a6753" translate="yes" xml:space="preserve">
          <source>Weak bidirectional character type &quot;ES&quot; in the Unicode specification.</source>
          <target state="translated">Unicode规范中的弱双向字符类型 &quot;ES&quot;。</target>
        </trans-unit>
        <trans-unit id="818ef5444e8d72a94e14f04b5d6b122d1830655b" translate="yes" xml:space="preserve">
          <source>Weak bidirectional character type &quot;ET&quot; in the Unicode specification.</source>
          <target state="translated">Unicode规范中的弱双向字符类型 &quot;ET&quot;。</target>
        </trans-unit>
        <trans-unit id="34c6763955af9013896491090181dbcd5a8dd74c" translate="yes" xml:space="preserve">
          <source>Weak bidirectional character type &quot;NSM&quot; in the Unicode specification.</source>
          <target state="translated">Unicode规范中的弱双向字符类型 &quot;NSM&quot;。</target>
        </trans-unit>
        <trans-unit id="956c2a4c465d4b08d54fa1ddb34419c1810351ef" translate="yes" xml:space="preserve">
          <source>Weak bidirectional character type &quot;PDF&quot; in the Unicode specification.</source>
          <target state="translated">Unicode规范中的弱双向字符类型 &quot;PDF&quot;。</target>
        </trans-unit>
        <trans-unit id="5ea903ebda4f9f28f642d78e916dc09051395c95" translate="yes" xml:space="preserve">
          <source>WeakReference</source>
          <target state="translated">WeakReference</target>
        </trans-unit>
        <trans-unit id="10cf3089a5d1b6f0fd308ab8ea55feb903fcea98" translate="yes" xml:space="preserve">
          <source>WebAssembly (wasm32)</source>
          <target state="translated">WebAssembly (wasm32)</target>
        </trans-unit>
        <trans-unit id="54a290ccb466e5479f81f8b2a84a8c409c89300b" translate="yes" xml:space="preserve">
          <source>WebGLActiveInfo</source>
          <target state="translated">WebGLActiveInfo</target>
        </trans-unit>
        <trans-unit id="e6b73caf842064140299b1ca0b4460e6e2d7b8db" translate="yes" xml:space="preserve">
          <source>WebGLContextAttributes</source>
          <target state="translated">WebGLContextAttributes</target>
        </trans-unit>
        <trans-unit id="4270da2ffdc4cd7b0f031d7be5d3da6756d9f418" translate="yes" xml:space="preserve">
          <source>WebGLContextEventInit</source>
          <target state="translated">WebGLContextEventInit</target>
        </trans-unit>
        <trans-unit id="40e776dc5c04c24ed694e56559baff72c6650985" translate="yes" xml:space="preserve">
          <source>WebGLObject</source>
          <target state="translated">WebGLObject</target>
        </trans-unit>
        <trans-unit id="21ae6cd2acfef9ca69acf1201e1d6a74d9cbc06a" translate="yes" xml:space="preserve">
          <source>WebGLRenderingContext</source>
          <target state="translated">WebGLRenderingContext</target>
        </trans-unit>
        <trans-unit id="4801b56eb1b5d686e9a1febe6821b4d7326421a2" translate="yes" xml:space="preserve">
          <source>WebGLRenderingContextBase</source>
          <target state="translated">WebGLRenderingContextBase</target>
        </trans-unit>
        <trans-unit id="5484abb27b9c8304c0334e77ca1817b8faf244f4" translate="yes" xml:space="preserve">
          <source>WebGLShaderPrecisionFormat</source>
          <target state="translated">WebGLShaderPrecisionFormat</target>
        </trans-unit>
        <trans-unit id="598b5bbd37e1ce6914df736dcaf0620916e3e37e" translate="yes" xml:space="preserve">
          <source>WebGLUniformLocation</source>
          <target state="translated">WebGLUniformLocation</target>
        </trans-unit>
        <trans-unit id="3a3301048780c886766fd5f9fc46f7ed9edce741" translate="yes" xml:space="preserve">
          <source>Webpack provides two different &quot;flavors&quot; of CommonJS, &lt;code&gt;commonjs&lt;/code&gt; and &lt;code&gt;commonjs2&lt;/code&gt;, which affect the way your declarations are made available. While in most cases, you probably want &lt;code&gt;commonjs2&lt;/code&gt;, which adds the &lt;code&gt;module.exports&lt;/code&gt; syntax to the generated library, you can also opt for the &quot;pure&quot; &lt;code&gt;commonjs&lt;/code&gt; option, which implements the CommonJS specification exactly. To learn more about the difference between &lt;code&gt;commonjs&lt;/code&gt; and &lt;code&gt;commonjs2&lt;/code&gt;, check &lt;a href=&quot;https://github.com/webpack/webpack/issues/1114&quot;&gt;here&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ee12f5d174e362fdee2c3d0937fed7a0a0418b29" translate="yes" xml:space="preserve">
          <source>What IDEs support Kotlin?</source>
          <target state="translated">哪些IDE支持Kotlin?</target>
        </trans-unit>
        <trans-unit id="f19e03186b38de86427a604326b5e20ce36b16e0" translate="yes" xml:space="preserve">
          <source>What Java has that Kotlin does not</source>
          <target state="translated">Java有哪些Kotlin没有的东西</target>
        </trans-unit>
        <trans-unit id="7c25e3810f499ecbecfd573d100c2992ec85dfee" translate="yes" xml:space="preserve">
          <source>What Kotlin has that Java does not</source>
          <target state="translated">Kotlin拥有Java没有的东西</target>
        </trans-unit>
        <trans-unit id="a0618cd665f03aa3f49f142cd97a9d8c33d6f6d0" translate="yes" xml:space="preserve">
          <source>What advantages does Kotlin give me over the Java programming language?</source>
          <target state="translated">与Java编程语言相比,Kotlin给我带来了哪些优势?</target>
        </trans-unit>
        <trans-unit id="2ec574e0a3bc1f92310ec6597730108793dbab22" translate="yes" xml:space="preserve">
          <source>What are we building?</source>
          <target state="translated">我们在建造什么?</target>
        </trans-unit>
        <trans-unit id="54d0e194d6d22dc2c5cc598434a07c74290a1df0" translate="yes" xml:space="preserve">
          <source>What build tools support Kotlin?</source>
          <target state="translated">哪些构建工具支持Kotlin?</target>
        </trans-unit>
        <trans-unit id="b663cb1b85b44f2ed22f76f75c249fd71cd30ee5" translate="yes" xml:space="preserve">
          <source>What can I use Kotlin for?</source>
          <target state="translated">我可以用Kotlin做什么?</target>
        </trans-unit>
        <trans-unit id="1c253aa8f7093e6c010267944ec10ed903d9b3d6" translate="yes" xml:space="preserve">
          <source>What companies are using Kotlin?</source>
          <target state="translated">哪些公司在使用Kotlin?</target>
        </trans-unit>
        <trans-unit id="05e8ab4ca375bf042d9384276202b934420c2059" translate="yes" xml:space="preserve">
          <source>What do we do if need to invoke them &lt;em&gt;sequentially&lt;/em&gt; &amp;ndash; first &lt;code&gt;doSomethingUsefulOne&lt;/code&gt;&lt;em&gt;and then&lt;/em&gt;&lt;code&gt;doSomethingUsefulTwo&lt;/code&gt; and compute the sum of their results? In practice we do this if we use the results of the first function to make a decision on whether we need to invoke the second one or to decide on how to invoke it.</source>
          <target state="translated">如果需要&lt;em&gt;顺序&lt;/em&gt;调用它们，我们该怎么办&amp;ndash;首先执行 &lt;code&gt;doSomethingUsefulOne&lt;/code&gt; &lt;em&gt;，然后执行&lt;/em&gt; &lt;code&gt;doSomethingUsefulTwo&lt;/code&gt; ，&lt;em&gt;然后&lt;/em&gt;计算其结果的总和？在实践中，如果我们使用第一个函数的结果来决定是否需要调用第二个函数或决定如何调用第二个函数，就可以这样做。</target>
        </trans-unit>
        <trans-unit id="ec5e65d31d420634cb6bd22727661d2a91c1e71b" translate="yes" xml:space="preserve">
          <source>What do we do if we need them to be invoked &lt;em&gt;sequentially&lt;/em&gt; &amp;mdash; first &lt;code&gt;doSomethingUsefulOne&lt;/code&gt;&lt;em&gt;and then&lt;/em&gt;&lt;code&gt;doSomethingUsefulTwo&lt;/code&gt;, and compute the sum of their results? In practice we do this if we use the result of the first function to make a decision on whether we need to invoke the second one or to decide on how to invoke it.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e75dc4fbbde8bc3398e1fc23b66dca3f704f50fe" translate="yes" xml:space="preserve">
          <source>What does Kotlin compile down to?</source>
          <target state="translated">Kotlin编译成什么?</target>
        </trans-unit>
        <trans-unit id="cbc1b72459c6cd091c4b5fc250725f50ac98c379" translate="yes" xml:space="preserve">
          <source>What does it print at the end? It is highly unlikely to ever print &quot;Counter = 100000&quot;, because a hundred coroutines increment the &lt;code&gt;counter&lt;/code&gt; concurrently from multiple threads without any synchronization.</source>
          <target state="translated">最后显示什么？几乎不可能打印&amp;ldquo; Counter = 100000&amp;rdquo;，因为一百个协程从多个线程同时增加了 &lt;code&gt;counter&lt;/code&gt; ，而没有任何同步。</target>
        </trans-unit>
        <trans-unit id="18807a12b7e25a451e442847837857201bfc7505" translate="yes" xml:space="preserve">
          <source>What does this signature say? It says that every time I append a string to something (a &lt;code&gt;StringBuilder&lt;/code&gt;, some kind of a log, a console, etc.) I have to catch those &lt;code&gt;IOExceptions&lt;/code&gt;. Why? Because it might be performing IO (&lt;code&gt;Writer&lt;/code&gt; also implements &lt;code&gt;Appendable&lt;/code&gt;)&amp;hellip; So it results in this kind of code all over the place:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7f65d1bc84288a4305aabbbfaad8cd7fe25a6b3d" translate="yes" xml:space="preserve">
          <source>What does this signature say? It says that every time I append a string to something (a &lt;code&gt;StringBuilder&lt;/code&gt;, some kind of a log, a console, etc.) I have to catch those &lt;code&gt;IOExceptions&lt;/code&gt;. Why? Because it might be performing IO (&lt;code&gt;Writer&lt;/code&gt; also implements &lt;code&gt;Appendable&lt;/code&gt;)&amp;hellip; So it results into this kind of code all over the place:</source>
          <target state="translated">这个签名怎么说？它说每次我将字符串附加到某个东西（ &lt;code&gt;StringBuilder&lt;/code&gt; ，某种日志，控制台等）时，都必须捕获那些 &lt;code&gt;IOExceptions&lt;/code&gt; 。为什么？因为它可能正在执行IO（ &lt;code&gt;Writer&lt;/code&gt; 也实现了 &lt;code&gt;Appendable&lt;/code&gt; ）&amp;hellip;&amp;hellip;所以它到处都是这种代码：</target>
        </trans-unit>
        <trans-unit id="683b8d36e158b49d7282ac38785e02d0ec00e146" translate="yes" xml:space="preserve">
          <source>What happens if multiple children of a coroutine throw an exception? The general rule is &quot;the first exception wins&quot;, so the first thrown exception is exposed to the handler. But that may cause lost exceptions, for example if coroutine throws an exception in its &lt;code&gt;finally&lt;/code&gt; block. So, additional exceptions are suppressed.</source>
          <target state="translated">如果协程的多个子级抛出异常会怎样？一般规则是&amp;ldquo;第一个异常获胜&amp;rdquo;，因此第一个引发的异常向处理程序公开。但这可能会导致丢失的异常，例如，协程在其 &lt;code&gt;finally&lt;/code&gt; 块中抛出异常。因此，抑制了其他异常。</target>
        </trans-unit>
        <trans-unit id="365b6a79e0879610a6d21849bc8cc5cf6d51d197" translate="yes" xml:space="preserve">
          <source>What has happened here is called &lt;strong&gt;type projection&lt;/strong&gt;: we said that &lt;code&gt;from&lt;/code&gt; is not simply an array, but a restricted (&lt;strong&gt;projected&lt;/strong&gt;) one: we can only call those methods that return the type parameter &lt;code&gt;T&lt;/code&gt;, in this case it means that we can only call &lt;code&gt;get()&lt;/code&gt;. This is our approach to &lt;strong&gt;use-site variance&lt;/strong&gt;, and corresponds to Java's &lt;code&gt;Array&amp;lt;? extends Object&amp;gt;&lt;/code&gt;, but in a slightly simpler way.</source>
          <target state="translated">这里发生的事情称为&lt;strong&gt;类型投影&lt;/strong&gt;：我们说 &lt;code&gt;from&lt;/code&gt; 不是简单的数组，而是受限制的（&lt;strong&gt;投影&lt;/strong&gt;）数组：我们只能调用那些返回类型参数 &lt;code&gt;T&lt;/code&gt; 的方法，在这种情况下，这意味着我们只能调用 &lt;code&gt;get()&lt;/code&gt; 。这是我们&lt;strong&gt;使用地点差异的方法&lt;/strong&gt;，并且与Java的 &lt;code&gt;Array&amp;lt;? extends Object&amp;gt;&lt;/code&gt; 相对应。扩展Object&amp;gt;，但以一种稍微简单的方式。</target>
        </trans-unit>
        <trans-unit id="77aa02de8be96f4d1a2d486916d80f88707bf2e0" translate="yes" xml:space="preserve">
          <source>What if there are no dependencies between invocation of &lt;code&gt;doSomethingUsefulOne&lt;/code&gt; and &lt;code&gt;doSomethingUsefulTwo&lt;/code&gt; and we want to get the answer faster, by doing both &lt;em&gt;concurrently&lt;/em&gt;? This is where &lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/async.html&quot;&gt;async&lt;/a&gt; comes to help.</source>
          <target state="translated">如果在 &lt;code&gt;doSomethingUsefulOne&lt;/code&gt; 和 &lt;code&gt;doSomethingUsefulTwo&lt;/code&gt; 的调用之间没有依赖关系并且我们希望通过&lt;em&gt;同时&lt;/em&gt;执行这两者来更快地得到答案，该怎么办？这是&lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/async.html&quot;&gt;异步&lt;/a&gt;帮助的地方。</target>
        </trans-unit>
        <trans-unit id="6a9d26c1d8e7803f441abc75ddaa9a3cb6ee5810" translate="yes" xml:space="preserve">
          <source>What if there are no dependencies between invocations of &lt;code&gt;doSomethingUsefulOne&lt;/code&gt; and &lt;code&gt;doSomethingUsefulTwo&lt;/code&gt; and we want to get the answer faster, by doing both &lt;em&gt;concurrently&lt;/em&gt;? This is where &lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/async.html&quot;&gt;async&lt;/a&gt; comes to help.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e3c61df73a1cd1792c66d92381a767d6d084db44" translate="yes" xml:space="preserve">
          <source>What is Kotlin?</source>
          <target state="translated">什么是Kotlin?</target>
        </trans-unit>
        <trans-unit id="9c97b9a8111f68ce8c52dfe8c2a3959e4d0cfd92" translate="yes" xml:space="preserve">
          <source>What is the current version of Kotlin?</source>
          <target state="translated">目前Kotlin的版本是什么?</target>
        </trans-unit>
        <trans-unit id="72b9dc537736b5c80161df96b96d566c2340d8ed" translate="yes" xml:space="preserve">
          <source>What types do we have in the C language? Let's first list all of them. I have used the &lt;a href=&quot;https://en.wikipedia.org/wiki/C_data_types&quot;&gt;C data types&lt;/a&gt; article from Wikipedia as a basis. There are following types in the C programming language:</source>
          <target state="translated">我们使用C语言有哪些类型？让我们首先列出所有这些。我以Wikipedia 的&lt;a href=&quot;https://en.wikipedia.org/wiki/C_data_types&quot;&gt;C数据类型&lt;/a&gt;文章为基础。C编程语言中有以下几种类型：</target>
        </trans-unit>
        <trans-unit id="b3a3d061e51769639781e9a3b9954e0ba115ec4b" translate="yes" xml:space="preserve">
          <source>What we actually want is simply pass a type to this function, i.e. call it like this:</source>
          <target state="translated">其实我们想要的是简单地传递一个类型给这个函数,即这样调用它。</target>
        </trans-unit>
        <trans-unit id="a50c7ef1f0fafc2256df6585bc99119f3c512a67" translate="yes" xml:space="preserve">
          <source>What&amp;#x27;s New in Kotlin 1.1</source>
          <target state="translated">Kotlin 1.1的新增功能</target>
        </trans-unit>
        <trans-unit id="9a4d9d06c26d113727033d8ae4c1b63e386642d5" translate="yes" xml:space="preserve">
          <source>What&amp;#x27;s New in Kotlin 1.2</source>
          <target state="translated">Kotlin 1.2的新功能</target>
        </trans-unit>
        <trans-unit id="293419c5954282d33701ae5e04016a88fddb332a" translate="yes" xml:space="preserve">
          <source>What&amp;#x27;s New in Kotlin 1.3</source>
          <target state="translated">Kotlin 1.3的新功能</target>
        </trans-unit>
        <trans-unit id="9389cd373bffcc015f87751d1dc27567fa32b8ba" translate="yes" xml:space="preserve">
          <source>What's New in Kotlin 1.1</source>
          <target state="translated">Kotlin 1.1中的新内容</target>
        </trans-unit>
        <trans-unit id="39982142e8f2af3375fc2ff57e8c12a82c314d40" translate="yes" xml:space="preserve">
          <source>What's New in Kotlin 1.2</source>
          <target state="translated">Kotlin 1.2中的新内容</target>
        </trans-unit>
        <trans-unit id="215e0c6f310ade62568bdc051de3a2c9b6801880" translate="yes" xml:space="preserve">
          <source>What's New in Kotlin 1.3</source>
          <target state="translated">Kotlin 1.3中的新内容</target>
        </trans-unit>
        <trans-unit id="3d4b36bc57457b9920995102b0eb6da42363fb68" translate="yes" xml:space="preserve">
          <source>What's next?</source>
          <target state="translated">下一步是什么?</target>
        </trans-unit>
        <trans-unit id="18389155bba5ed3245c0f065f5a1c5b22a9f917a" translate="yes" xml:space="preserve">
          <source>Whatever way you choose to solve koans, you can see the solution for each task: in the online version click on &quot;Show answer&quot;, inside EduTools plugin choose &quot;Peek solution&quot;. We recommend checking the solution after you implement the task to compare your solution with the proposed one. Make sure you don't cheat!</source>
          <target state="translated">无论你选择何种方式解考,都可以看到每个任务的解决方案:在在线版中点击 &quot;显示答案&quot;,在EduTools插件里面选择 &quot;窥视解决方案&quot;。我们建议在你实现任务后检查解决方案,以比较你的解决方案与建议的解决方案。确保你不作弊!</target>
        </trans-unit>
        <trans-unit id="00a0667e561fb370ec041d741f3ea97adc25dc28" translate="yes" xml:space="preserve">
          <source>WheelEventInit</source>
          <target state="translated">WheelEventInit</target>
        </trans-unit>
        <trans-unit id="e3117f509259d5d29ab1ad441436b902cca8f031" translate="yes" xml:space="preserve">
          <source>When &lt;a href=&quot;copy-to#kotlin.io%24copyTo%28java.io.File%2C+java.io.File%2C+kotlin.Boolean%2C+kotlin.Int%29%2Foverwrite&quot;&gt;overwrite&lt;/a&gt; is &lt;code&gt;true&lt;/code&gt; and &lt;a href=&quot;copy-to#kotlin.io%24copyTo%28java.io.File%2C+java.io.File%2C+kotlin.Boolean%2C+kotlin.Int%29%2Ftarget&quot;&gt;target&lt;/a&gt; is a directory, it is replaced only if it is empty.</source>
          <target state="translated">如果&lt;a href=&quot;copy-to#kotlin.io%24copyTo%28java.io.File%2C+java.io.File%2C+kotlin.Boolean%2C+kotlin.Int%29%2Foverwrite&quot;&gt;覆盖&lt;/a&gt;为 &lt;code&gt;true&lt;/code&gt; ,并且&lt;a href=&quot;copy-to#kotlin.io%24copyTo%28java.io.File%2C+java.io.File%2C+kotlin.Boolean%2C+kotlin.Int%29%2Ftarget&quot;&gt;target&lt;/a&gt;为目录，则仅当它为空时才替换它。</target>
        </trans-unit>
        <trans-unit id="f0d8a684192ba53b6aed7c801b9b7ef648714954" translate="yes" xml:space="preserve">
          <source>When &lt;a href=&quot;copy-to#kotlin.io%24copyTo(java.io.File,%20java.io.File,%20kotlin.Boolean,%20kotlin.Int)/overwrite&quot;&gt;overwrite&lt;/a&gt; is &lt;code&gt;true&lt;/code&gt; and &lt;a href=&quot;copy-to#kotlin.io%24copyTo(java.io.File,%20java.io.File,%20kotlin.Boolean,%20kotlin.Int)/target&quot;&gt;target&lt;/a&gt; is a directory, it is replaced only if it is empty.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9f50fe0838c0d3908e85b9819f34dd2e3eeee8c8" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;launch { ... }&lt;/code&gt; is used without parameters, it inherits the context (and thus dispatcher) from the &lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/-coroutine-scope/index.html&quot;&gt;CoroutineScope&lt;/a&gt; it is being launched from. In this case, it inherits the context of the main &lt;code&gt;runBlocking&lt;/code&gt; coroutine which runs in the &lt;code&gt;main&lt;/code&gt; thread.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="44dcaec5d16f5bf398df957b0d47d8f09a80f320" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;launch { ... }&lt;/code&gt; is used without parameters, it inherits the context (and thus dispatcher) from the &lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/-coroutine-scope/index.html&quot;&gt;CoroutineScope&lt;/a&gt; that it is being launched from. In this case, it inherits the context of the main &lt;code&gt;runBlocking&lt;/code&gt; coroutine which runs in the &lt;code&gt;main&lt;/code&gt; thread.</source>
          <target state="translated">如果在没有参数的情况下使用 &lt;code&gt;launch { ... }&lt;/code&gt; ，它将从要启动的&lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/-coroutine-scope/index.html&quot;&gt;CoroutineScope&lt;/a&gt;继承上下文（并因此继承调度程序）。在这种情况下，它继承了在 &lt;code&gt;main&lt;/code&gt; 线程中运行的主 &lt;code&gt;runBlocking&lt;/code&gt; 协程的上下文。</target>
        </trans-unit>
        <trans-unit id="a67ed24b676d6021025f2b0f67bd9c35fd94aa47" translate="yes" xml:space="preserve">
          <source>When Expression</source>
          <target state="translated">表达式时</target>
        </trans-unit>
        <trans-unit id="e8a56a195bc479e7e07a6420a30ef594182bfdc7" translate="yes" xml:space="preserve">
          <source>When Java types are imported into Kotlin, all the references of the type &lt;code&gt;java.lang.Object&lt;/code&gt; are turned into &lt;code&gt;Any&lt;/code&gt;. Since &lt;code&gt;Any&lt;/code&gt; is not platform-specific, it only declares &lt;code&gt;toString()&lt;/code&gt;, &lt;code&gt;hashCode()&lt;/code&gt; and &lt;code&gt;equals()&lt;/code&gt; as its members, so to make other members of &lt;code&gt;java.lang.Object&lt;/code&gt; available, Kotlin uses &lt;a href=&quot;extensions&quot;&gt;extension functions&lt;/a&gt;.</source>
          <target state="translated">将Java类型导入Kotlin后，所有类型为 &lt;code&gt;java.lang.Object&lt;/code&gt; 的引用都将转换为 &lt;code&gt;Any&lt;/code&gt; 。由于 &lt;code&gt;Any&lt;/code&gt; 不是特定于平台的，因此它仅声明 &lt;code&gt;toString()&lt;/code&gt; ， &lt;code&gt;hashCode()&lt;/code&gt; 和 &lt;code&gt;equals()&lt;/code&gt; 作为其成员，因此为了使 &lt;code&gt;java.lang.Object&lt;/code&gt; 的其他成员可用，Kotlin使用了&lt;a href=&quot;extensions&quot;&gt;扩展功能&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="de657bff6abe90a927125239467dfc7f66aa4d06" translate="yes" xml:space="preserve">
          <source>When Kotlin classes make use of &lt;a href=&quot;generics#declaration-site-variance&quot;&gt;declaration-site variance&lt;/a&gt;, there are two options of how their usages are seen from the Java code. Let's say we have the following class and two functions that use it:</source>
          <target state="translated">当Kotlin类使用&lt;a href=&quot;generics#declaration-site-variance&quot;&gt;声明位置方差时&lt;/a&gt;，有两种方法可以从Java代码中看到它们的用法。假设我们有以下类和两个使用它的函数：</target>
        </trans-unit>
        <trans-unit id="8df342c27a1154aea786d8fd951c9e3bea894932" translate="yes" xml:space="preserve">
          <source>When Kotlin function called from Swift/Objective-C code throws an exception which is an instance of one of the &lt;code&gt;@Throws&lt;/code&gt;-specified classes or their subclasses, it is propagated as &lt;code&gt;NSError&lt;/code&gt;. Other Kotlin exceptions reaching Swift/Objective-C are considered unhandled and cause program termination.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="32316c9a35a40c6afef037fd3a597555044f54d5" translate="yes" xml:space="preserve">
          <source>When a C function takes or returns a struct / union &lt;code&gt;T&lt;/code&gt; by value, the corresponding argument type or return type is represented as &lt;code&gt;CValue&amp;lt;T&amp;gt;&lt;/code&gt;.</source>
          <target state="translated">当C函数通过值获取或返回struct / union &lt;code&gt;T&lt;/code&gt; 时，相应的参数类型或返回类型表示为 &lt;code&gt;CValue&amp;lt;T&amp;gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="dbdcfd2e9efefb419f2bd9e89cb02a695c22cf07" translate="yes" xml:space="preserve">
          <source>When a big team is migrating onto a new version, it may appear in a &quot;inconsistent state&quot; at some point, when some developers have already updated, and others haven't. To prevent the former from writing and committing code that others may not be able to compile, we provide the following command line switches (also available in the IDE and &lt;a href=&quot;../using-gradle#compiler-options&quot;&gt;Gradle&lt;/a&gt;/&lt;a href=&quot;../using-maven#specifying-compiler-options&quot;&gt;Maven&lt;/a&gt;):</source>
          <target state="translated">当一个大团队迁移到新版本时，某些开发人员已经更新而其他开发人员没有更新时，它有时可能会处于&amp;ldquo;不一致状态&amp;rdquo;。为了防止前者编写和提交其他人可能无法编译的代码，我们提供了以下命令行开关（在IDE和&lt;a href=&quot;../using-gradle#compiler-options&quot;&gt;Gradle&lt;/a&gt; / &lt;a href=&quot;../using-maven#specifying-compiler-options&quot;&gt;Maven中&lt;/a&gt;也可用）：</target>
        </trans-unit>
        <trans-unit id="18b8e63399abd55d3bbbdde25d3e2fcb80bd3160" translate="yes" xml:space="preserve">
          <source>When a coroutine is launched in the &lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/-coroutine-scope/index.html&quot;&gt;CoroutineScope&lt;/a&gt; of another coroutine, it inherits its context via &lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/-coroutine-scope/coroutine-context.html&quot;&gt;CoroutineScope.coroutineContext&lt;/a&gt; and the &lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/-job/index.html&quot;&gt;Job&lt;/a&gt; of the new coroutine becomes a &lt;em&gt;child&lt;/em&gt; of the parent coroutine's job. When the parent coroutine is cancelled, all its children are recursively cancelled, too.</source>
          <target state="translated">当协程在推出&lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/-coroutine-scope/index.html&quot;&gt;CoroutineScope&lt;/a&gt;另一个协程，它通过继承它的上下文&lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/-coroutine-scope/coroutine-context.html&quot;&gt;CoroutineScope.coroutineContext&lt;/a&gt;和&lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/-job/index.html&quot;&gt;招聘&lt;/a&gt;新协程成为&lt;em&gt;孩子&lt;/em&gt;的家长协程的工作。当父协程被取消时，其所有子进程也将被递归取消。</target>
        </trans-unit>
        <trans-unit id="8b40f9ca947a81bd12ef472c030664610317efac" translate="yes" xml:space="preserve">
          <source>When a data class derived from a type that already had the &lt;code&gt;copy&lt;/code&gt; function with the same signature, the &lt;code&gt;copy&lt;/code&gt; implementation generated for the data class used the defaults from the supertype, leading to counter-intuitive behavior, or failed at runtime if there were no default parameters in the supertype.</source>
          <target state="translated">当从已经具有具有相同签名的 &lt;code&gt;copy&lt;/code&gt; 功能的类型派生的数据类时，为该数据类生成的 &lt;code&gt;copy&lt;/code&gt; 实现使用超类型的默认值，从而导致违反直觉的行为，如果没有默认值，则在运行时失败超型中的参数。</target>
        </trans-unit>
        <trans-unit id="e1f3667f48b1b3a74567f895c3f805750be29c9e" translate="yes" xml:space="preserve">
          <source>When a declaration has &lt;code&gt;@JsModule&lt;/code&gt;, you can't use it from Kotlin code when you don't compile it to a JavaScript module. Usually, developers distribute their libraries both as JavaScript modules and downloadable &lt;code&gt;.js&lt;/code&gt; files that you can copy to project's static resources and include via &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; element. To tell Kotlin that it's ok to use a &lt;code&gt;@JsModule&lt;/code&gt; declaration from non-module environment, you should put &lt;code&gt;@JsNonModule&lt;/code&gt; declaration. For example, given JavaScript code:</source>
          <target state="translated">当声明具有 &lt;code&gt;@JsModule&lt;/code&gt; 时，如果不将其编译为JavaScript模块，则不能在Kotlin代码中使用它。通常，开发人员以JavaScript模块和可下载的 &lt;code&gt;.js&lt;/code&gt; 文件的形式分发其库，您可以将其复制到项目的静态资源中，并通过 &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; 元素包括在内。要告诉Kotlin 在非模块环境中使用 &lt;code&gt;@JsModule&lt;/code&gt; 声明是可以的，您应该放置 &lt;code&gt;@JsNonModule&lt;/code&gt; 声明。例如，给定的JavaScript代码：</target>
        </trans-unit>
        <trans-unit id="cdc056f54b314225b42eb84b111e0f374e0f43fb" translate="yes" xml:space="preserve">
          <source>When a declaration is marked as &lt;code&gt;@JsModule&lt;/code&gt;, you can't use it from Kotlin code when you don't compile it to a JavaScript module. Usually, developers distribute their libraries both as JavaScript modules and downloadable &lt;code&gt;.js&lt;/code&gt; files that you can copy to your project's static resources and include via a &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; tag. To tell Kotlin that it's okay to use a &lt;code&gt;@JsModule&lt;/code&gt; declaration from a non-module environment, add the &lt;code&gt;@JsNonModule&lt;/code&gt; annotation. For example, consider the following JavaScript code:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="06eb4fdaeb1116ee0773fa0c7742573f91abd273" translate="yes" xml:space="preserve">
          <source>When a function is called with both positional and named arguments, all the positional arguments should be placed before the first named one. For example, the call &lt;code&gt;f(1, y = 2)&lt;/code&gt; is allowed, but &lt;code&gt;f(x = 1, 2)&lt;/code&gt; is not.</source>
          <target state="translated">当同时使用位置参数和命名参数调用函数时，所有位置参数应放在第一个命名参数之前。例如，允许调用 &lt;code&gt;f(1, y = 2)&lt;/code&gt; ，但不允许 &lt;code&gt;f(x = 1, 2)&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="c39ba3c630d6c34d1a8dfc3a61b0e9ace62da655" translate="yes" xml:space="preserve">
          <source>When a function of an external base class is overloaded by signature, you can't override it in a derived class.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f0551e05b4cdcabc413ed022b08af90ba98955ec" translate="yes" xml:space="preserve">
          <source>When a function of external base class is overloaded by signature, you can't override it in a derived class.</source>
          <target state="translated">当外部基类的函数被签名重载时,你不能在派生类中重载它。</target>
        </trans-unit>
        <trans-unit id="1cc5a0d8a7f78114a2ac1e09f9cb178d1a485871" translate="yes" xml:space="preserve">
          <source>When a function returns a single expression, the curly braces can be omitted and the body is specified after a &lt;strong&gt;=&lt;/strong&gt; symbol:</source>
          <target state="translated">当函数返回单个表达式时，可以省略花括号，并在&lt;strong&gt;=&lt;/strong&gt;符号后指定主体：</target>
        </trans-unit>
        <trans-unit id="4d60c7b0c4e08585362731f2e3c9cea8a0422110" translate="yes" xml:space="preserve">
          <source>When a variable is assigned from a safe call expression and checked for null, the smart cast is now applied to the safe call receiver as well:</source>
          <target state="translated">当一个变量从安全调用表达式中赋值并被检查为空时,智能投射现在也被应用到安全调用接收器。</target>
        </trans-unit>
        <trans-unit id="75ac04198276b2032c15af24079f880bbc7d4548" translate="yes" xml:space="preserve">
          <source>When an abstract class implements one or more interfaces, it is not required to provide definitions of the members of its interfaces (but it can if it wants to). It must still &lt;em&gt;declare&lt;/em&gt; such members, using &lt;code&gt;abstract override&lt;/code&gt; and not providing any body for the function or property:</source>
          <target state="translated">当抽象类实现一个或多个接口时，不需要提供其接口成员的定义（但如果需要，可以提供）。它仍必须使用 &lt;code&gt;abstract override&lt;/code&gt; 并且不为函数或属性提供任何主体来&lt;em&gt;声明&lt;/em&gt;此类成员：</target>
        </trans-unit>
        <trans-unit id="78ca79aa88621d9e1ad1b6380be2be6eed3fd311" translate="yes" xml:space="preserve">
          <source>When an equality check operands are statically known to be &lt;code&gt;Float&lt;/code&gt; or &lt;code&gt;Double&lt;/code&gt; (nullable or not), the check follows the IEEE 754 Standard for Floating-Point Arithmetic.</source>
          <target state="translated">当相等检查操作数静态已知为 &lt;code&gt;Float&lt;/code&gt; 或 &lt;code&gt;Double&lt;/code&gt; （可为空或不可为null）时，检查将遵循IEEE 754浮点算法标准。</target>
        </trans-unit>
        <trans-unit id="a72bfaeeae8d98102d2bd16c961c912a01957df4" translate="yes" xml:space="preserve">
          <source>When an inline function is &lt;code&gt;public&lt;/code&gt; or &lt;code&gt;protected&lt;/code&gt; and is not a part of a &lt;code&gt;private&lt;/code&gt; or &lt;code&gt;internal&lt;/code&gt; declaration, it is considered a &lt;a href=&quot;visibility-modifiers#modules&quot;&gt;module&lt;/a&gt;'s public API. It can be called in other modules and is inlined at such call sites as well.</source>
          <target state="translated">当内联函数是 &lt;code&gt;public&lt;/code&gt; 或 &lt;code&gt;protected&lt;/code&gt; 并且不是 &lt;code&gt;private&lt;/code&gt; 或 &lt;code&gt;internal&lt;/code&gt; 声明的一部分时，它将被视为&lt;a href=&quot;visibility-modifiers#modules&quot;&gt;模块&lt;/a&gt;的公共API。可以在其他模块中调用它，也可以在此类调用位置内联。</target>
        </trans-unit>
        <trans-unit id="a8b8b82c3468010f3b6d8941f07253746e1af976" translate="yes" xml:space="preserve">
          <source>When an instance of a subclass is constructed, the superclass &quot;part&quot; is constructed first (via the superclass constructor). This means that during execution of the constructor of an open class, it could be that the object being constructed is an instance of a subclass, in which case the subclass-specific properties have not been initialized yet. For that reason, calling an open function from a constructor is risky: it might be overridden in the subclass, and if it is accessing subclass-specific properties, those won't be initialized yet.</source>
          <target state="translated">当一个子类的实例被构造时,超类 &quot;部分 &quot;首先被构造(通过超类构造函数)。这意味着在执行一个开放类的构造函数时,可能被构造的对象是一个子类的实例,在这种情况下,子类的特定属性还没有被初始化。因此,从构造函数中调用一个开放函数是有风险的:它可能会在子类中被覆盖,如果它正在访问子类的特定属性,这些属性还没有被初始化。</target>
        </trans-unit>
        <trans-unit id="5b0f246d38c7c57581718b09879ae1a9f3dd0cfb" translate="yes" xml:space="preserve">
          <source>When applied to a class or a member with internal visibility allows to use it from public inline functions and makes it effectively public.</source>
          <target state="translated">当应用于一个类或一个具有内部可见性的成员时,允许从公共内联函数中使用它,并使其有效地公开。</target>
        </trans-unit>
        <trans-unit id="b2719f8cfa129fbdd0adc701d2dba400cfb7a4df" translate="yes" xml:space="preserve">
          <source>When applied to annotation class X specifies that X defines a DSL language</source>
          <target state="translated">当应用于注解类X时,说明X定义了一种DSL语言。</target>
        </trans-unit>
        <trans-unit id="4383cdeb336d893261a8fd71ba6fa7f60d10ca1e" translate="yes" xml:space="preserve">
          <source>When applied, the CocoaPods plugin does the following:</source>
          <target state="translated">当应用时,CocoaPods插件会进行以下操作。</target>
        </trans-unit>
        <trans-unit id="d3cb13a5dd74d5989c8544a9bd856469cfe20ca8" translate="yes" xml:space="preserve">
          <source>When both &lt;code&gt;excludeDependentModules&lt;/code&gt; and &lt;code&gt;headerFilter&lt;/code&gt; are used, they are applied as an intersection.</source>
          <target state="translated">当同时使用 &lt;code&gt;excludeDependentModules&lt;/code&gt; 和 &lt;code&gt;headerFilter&lt;/code&gt; 时，它们将作为交集应用。</target>
        </trans-unit>
        <trans-unit id="c05de934df0888bf3a4ea0106e90f35a575c92fc" translate="yes" xml:space="preserve">
          <source>When building an Objective-C framework, it is often necessary to pack not just the classes of the current project, but also the classes of some of its dependencies. The Binaries DSL allows one to specify which dependencies will be exported in the framework using the &lt;code&gt;export&lt;/code&gt; method. Note that only API dependencies of a corresponding source set can be exported.</source>
          <target state="translated">在构建Objective-C框架时，通常不仅要打包当前项目的类，还要打包其某些依赖项的类。 Binaries DSL允许使用 &lt;code&gt;export&lt;/code&gt; 方法指定将在框架中导出哪些依赖项。请注意，只能导出相应源集的API依赖项。</target>
        </trans-unit>
        <trans-unit id="6c939554f4725c1c653be2725d54eb9e654761fc" translate="yes" xml:space="preserve">
          <source>When building from Xcode, you can use CocoaPods libraries without writing .def files manually and setting cinterop tool parameters. In this case, all required parameters can be obtained from the Xcode project configured by CocoaPods.</source>
          <target state="translated">当从Xcode中构建时,您可以使用CocoaPods库,而无需手动编写.def文件和设置cinterop工具参数。在这种情况下,所有需要的参数都可以从CocoaPods配置的Xcode项目中获得。</target>
        </trans-unit>
        <trans-unit id="c700148c224a841d5e4fb27c316b7b0f072a2aee" translate="yes" xml:space="preserve">
          <source>When called on an object with a predicate provided, &lt;code&gt;takeIf&lt;/code&gt; returns this object if it matches the predicate. Otherwise, it returns &lt;code&gt;null&lt;/code&gt;. So, &lt;code&gt;takeIf&lt;/code&gt; is a filtering function for a single object. In turn, &lt;code&gt;takeUnless&lt;/code&gt; returns the object if it doesn't match the predicate and &lt;code&gt;null&lt;/code&gt; if it does. The object is available as a lambda argument (&lt;code&gt;it&lt;/code&gt;).</source>
          <target state="translated">在提供谓词的对象上调用时， &lt;code&gt;takeIf&lt;/code&gt; 返回与谓词匹配的对象。否则，它返回 &lt;code&gt;null&lt;/code&gt; 。因此， &lt;code&gt;takeIf&lt;/code&gt; 是单个对象的过滤功能。反过来，如果 &lt;code&gt;takeUnless&lt;/code&gt; 与谓词不匹配，则返回该对象；如果与谓词不匹配，则返回 &lt;code&gt;null&lt;/code&gt; 。该对象可用作lambda参数（ &lt;code&gt;it&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="70ae5c844919498cf5a44f8ce155a9c7029cae97" translate="yes" xml:space="preserve">
          <source>When called on lists, &lt;code&gt;addAll()&lt;/code&gt; adds new elements in the same order as they go in the argument. You can also call &lt;code&gt;addAll()&lt;/code&gt; specifying an element position as the first argument. The first element of the argument collection will be inserted at this position. Other elements of the argument collection will follow it, shifting the receiver elements to the end.</source>
          <target state="translated">在列表上调用时， &lt;code&gt;addAll()&lt;/code&gt; 会按照与参数中添加元素相同的顺序添加新元素。您还可以调用 &lt;code&gt;addAll()&lt;/code&gt; ,将元素位置指定为第一个参数。参数集合的第一个元素将插入到此位置。参数集合的其他元素将紧随其后，将接收器元素移到末尾。</target>
        </trans-unit>
        <trans-unit id="4503c0345f7f96c5163267795a01f8ff6d6296b7" translate="yes" xml:space="preserve">
          <source>When called with the default arguments, the functions return the result similar to calling &lt;code&gt;toString()&lt;/code&gt; on the collection: a &lt;code&gt;String&lt;/code&gt; of elements' string representations separated by commas with spaces.</source>
          <target state="translated">当使用默认参数调用，该函数返回类似调用结果 &lt;code&gt;toString()&lt;/code&gt; 的集合：一个 &lt;code&gt;String&lt;/code&gt; 元素的字符串表示的分离用空格逗号。</target>
        </trans-unit>
        <trans-unit id="4f800ac9ce646dbfd1c595ccbbdab36f597cb7a9" translate="yes" xml:space="preserve">
          <source>When called with the key present in the map, operators overwrite the values of the corresponding entries.</source>
          <target state="translated">当调用地图中存在的键时,运算符会覆盖相应条目的值。</target>
        </trans-unit>
        <trans-unit id="0e3f5ee2c33fac5afe961b2bc4ee6475eb75da8a" translate="yes" xml:space="preserve">
          <source>When calling Kotlin functions from Java, nobody prevents us from passing &lt;em&gt;null&lt;/em&gt; as a non-null parameter. That's why Kotlin generates runtime checks for all public functions that expect non-nulls. This way we get a &lt;code&gt;NullPointerException&lt;/code&gt; in the Java code immediately.</source>
          <target state="translated">从Java调用Kotlin函数时，没有人阻止我们将&lt;em&gt;null&lt;/em&gt;作为非null参数传递。这就是Kotlin为所有期望非null的公共函数生成运行时检查的原因。这样，我们立即在Java代码中获得了 &lt;code&gt;NullPointerException&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="5bf4931382d70d2a150fc1284b61bdc2c9c96f9a" translate="yes" xml:space="preserve">
          <source>When calling a function, you can name one or more of its arguments. This may be helpful when a function has a large number of arguments, and it's difficult to associate a value with an argument, especially if it's a boolean or &lt;code&gt;null&lt;/code&gt; value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="afccfc52da19240ad334120985339616ba8ee626" translate="yes" xml:space="preserve">
          <source>When calling functions written in Kotlin on values of &lt;code&gt;dynamic&lt;/code&gt; type, keep in mind the name mangling performed by the Kotlin to JavaScript compiler. You may need to use the &lt;a href=&quot;js-to-kotlin-interop#jsname-annotation&quot;&gt;@JsName annotation&lt;/a&gt; or the &lt;a href=&quot;js-to-kotlin-interop#jsexport-annotation&quot;&gt;@JsExport annotation&lt;/a&gt; to assign well-defined names to the functions that you want to call.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a66c232a7677f7941a6400aa2f6dc79238791bec" translate="yes" xml:space="preserve">
          <source>When calling functions written in Kotlin on values of &lt;code&gt;dynamic&lt;/code&gt; type, keep in mind the name mangling performed by the Kotlin to JavaScript compiler. You may need to use the &lt;a href=&quot;js-to-kotlin-interop#jsname-annotation&quot;&gt;@JsName annotation&lt;/a&gt; to assign well-defined names to the functions that you need to call.</source>
          <target state="translated">当对 &lt;code&gt;dynamic&lt;/code&gt; 类型的值调用用Kotlin编写的函数时，请记住由Kotlin到JavaScript编译器执行的名称修改。您可能需要使用&lt;a href=&quot;js-to-kotlin-interop#jsname-annotation&quot;&gt;@JsName批注&lt;/a&gt;为需要调用的函数分配定义明确的名称。</target>
        </trans-unit>
        <trans-unit id="f401901149779f5935d80aef38d169d9b80565b3" translate="yes" xml:space="preserve">
          <source>When calling this function, you don&amp;rsquo;t have to name all its arguments:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a144ef75b391ae884d7e13a94311bf67580a2244" translate="yes" xml:space="preserve">
          <source>When chaining other functions after &lt;code&gt;takeIf&lt;/code&gt; and &lt;code&gt;takeUnless&lt;/code&gt;, don't forget to perform the null check or the safe call (&lt;code&gt;?.&lt;/code&gt;) because their return value is nullable.</source>
          <target state="translated">在 &lt;code&gt;takeIf&lt;/code&gt; 和 &lt;code&gt;takeUnless&lt;/code&gt; 之后链接其他函数时，请不要忘记执行null检查或安全调用（ &lt;code&gt;?.&lt;/code&gt; ），因为它们的返回值是可为空的。</target>
        </trans-unit>
        <trans-unit id="c0a48c6031f8ea84f7db041425c7fe40478df5e8" translate="yes" xml:space="preserve">
          <source>When compiling (we'll use this term interchangeably with &lt;a href=&quot;https://en.wiktionary.org/wiki/transpile&quot;&gt;transpiling&lt;/a&gt;) to JavaScript, Kotlin outputs two main files:</source>
          <target state="translated">当编译为JavaScript 时（我们将这个术语与&lt;a href=&quot;https://en.wiktionary.org/wiki/transpile&quot;&gt;transpiling&lt;/a&gt;互换使用），Kotlin输出两个主要文件：</target>
        </trans-unit>
        <trans-unit id="8c097f144946019495809506583d55bf5b42ced5" translate="yes" xml:space="preserve">
          <source>When compiling to JVM byte codes, the compiler optimizes access to arrays so that there's no overhead introduced:</source>
          <target state="translated">当编译成JVM字节码时,编译器会优化对数组的访问,这样就不会引入任何开销。</target>
        </trans-unit>
        <trans-unit id="d5652ef4fdb2127a183b6f70658b4242e9138b50" translate="yes" xml:space="preserve">
          <source>When compiling to Objective-C/Swift framework, methods having or inheriting this annotation are represented as &lt;code&gt;NSError*&lt;/code&gt;-producing methods in Objective-C and as &lt;code&gt;throws&lt;/code&gt; methods in Swift. When such a method called through framework API throws an exception, it is either propagated as &lt;code&gt;NSError&lt;/code&gt; or considered unhandled (if exception &lt;code&gt;is&lt;/code&gt;&lt;a href=&quot;../../kotlin/-error/index#kotlin.Error&quot;&gt;kotlin.Error&lt;/a&gt; or &lt;a href=&quot;../../kotlin/-runtime-exception/index#kotlin.RuntimeException&quot;&gt;kotlin.RuntimeException&lt;/a&gt;). In any case exception is not checked to be instance of one of the &lt;a href=&quot;exception-classes&quot;&gt;exceptionClasses&lt;/a&gt;.</source>
          <target state="translated">当编译到Objective-C / Swift框架时，具有或继承此批注的方法在Objective-C 中表示为 &lt;code&gt;NSError*&lt;/code&gt; 方法，而在Swift中表示为 &lt;code&gt;throws&lt;/code&gt; 方法。当通过框架API调用的此类方法引发异常时，该异常将作为 &lt;code&gt;NSError&lt;/code&gt; 传播或被视为未处理（如果异常 &lt;code&gt;is&lt;/code&gt; &lt;a href=&quot;../../kotlin/-error/index#kotlin.Error&quot;&gt;kotlin.Error&lt;/a&gt;或&lt;a href=&quot;../../kotlin/-runtime-exception/index#kotlin.RuntimeException&quot;&gt;kotlin.RuntimeException&lt;/a&gt;）。在任何情况下，都不会将异常检查为&lt;a href=&quot;exception-classes&quot;&gt;exceptionClasses&lt;/a&gt;之一的实例。</target>
        </trans-unit>
        <trans-unit id="6587d9ea4d853cd6df9a3004ea764022f98d9281" translate="yes" xml:space="preserve">
          <source>When compiling to Objective-C/Swift framework, non-&lt;code&gt;suspend&lt;/code&gt; functions having or inheriting &lt;code&gt;@Throws&lt;/code&gt; annotation are represented as &lt;code&gt;NSError*&lt;/code&gt;-producing methods in Objective-C and as &lt;code&gt;throws&lt;/code&gt; methods in Swift. Representations for &lt;code&gt;suspend&lt;/code&gt; functions always have &lt;code&gt;NSError*&lt;/code&gt;/&lt;code&gt;Error&lt;/code&gt; parameter in completion handler.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b96c28145bcb8f6ff8815136a3e9f396b218615b" translate="yes" xml:space="preserve">
          <source>When compiling, the compiler always outputs the kotlin.js file. The easiest way to reference this without having to refer to paths, is to set the output library folder for the compiler options to &lt;code&gt;node_modules&lt;/code&gt;. This way, Node will automatically pick it up as it does an exhaustive search for files under these folders</source>
          <target state="translated">编译时，编译器始终输出kotlin.js文件。无需引用路径即可引用此方法的最简单方法是将编译器选项的输出库文件夹设置为 &lt;code&gt;node_modules&lt;/code&gt; 。这样，Node会在对这些文件夹下的文件进行彻底搜索时自动将其选中</target>
        </trans-unit>
        <trans-unit id="5b6df5ad94ece159e4d2e7854f633a08ec2ced8b" translate="yes" xml:space="preserve">
          <source>When creating a new application or module that targets JavaScript, we need to select &lt;code&gt;Kotlin - JavaScript&lt;/code&gt; as the target</source>
          <target state="translated">创建针对JavaScript的新应用程序或模块时，我们需要选择 &lt;code&gt;Kotlin - JavaScript&lt;/code&gt; 作为目标</target>
        </trans-unit>
        <trans-unit id="03565eec78cb8bfb0c999a9b15ff0e6c755df92b" translate="yes" xml:space="preserve">
          <source>When declaring parameter names in a multiline lambda, put the names on the first line, followed by the arrow and the newline:</source>
          <target state="translated">当在多行lambda中声明参数名称时,将名称放在第一行,然后是箭头和换行。</target>
        </trans-unit>
        <trans-unit id="16ca0ed2cf53ba99dfc24939c39b34cc8182bea3" translate="yes" xml:space="preserve">
          <source>When given a &lt;code&gt;-library foo&lt;/code&gt; flag, the compiler searches the &lt;code&gt;foo&lt;/code&gt; library in the following order:</source>
          <target state="translated">当给定 &lt;code&gt;-library foo&lt;/code&gt; 标志时，编译器按以下顺序搜索 &lt;code&gt;foo&lt;/code&gt; 库：</target>
        </trans-unit>
        <trans-unit id="dd5a17a3b22c6470172a587dc5be67c1d1df4d62" translate="yes" xml:space="preserve">
          <source>When given the above snippet the &lt;code&gt;cinterop&lt;/code&gt; tool will search &lt;code&gt;libfoo.a&lt;/code&gt; in &lt;code&gt;/opt/local/lib&lt;/code&gt; and &lt;code&gt;/usr/local/opt/curl/lib&lt;/code&gt;, and if it is found include the library binary into &lt;code&gt;klib&lt;/code&gt;.</source>
          <target state="translated">当给出以上代码片段时， &lt;code&gt;cinterop&lt;/code&gt; 工具将在 &lt;code&gt;/opt/local/lib&lt;/code&gt; 和 &lt;code&gt;/usr/local/opt/curl/lib&lt;/code&gt; 中搜索 &lt;code&gt;libfoo.a&lt;/code&gt; ，如果找到，则将二进制库包含到 &lt;code&gt;klib&lt;/code&gt; 中。</target>
        </trans-unit>
        <trans-unit id="010f9a9f094ca37e15156897e51ac67f748d0305" translate="yes" xml:space="preserve">
          <source>When implementing an interface, keep the implementing members in the same order as members of the interface (if necessary, interspersed with additional private methods used for the implementation)</source>
          <target state="translated">在实现一个接口时,要保持实现成员与接口成员的顺序相同(如果有必要,可以穿插一些用于实现的额外私有方法</target>
        </trans-unit>
        <trans-unit id="0d8190bf6bb340fcc1bfe9465dd44a27ec0f22ba" translate="yes" xml:space="preserve">
          <source>When installed for the first time, EduTools plugin asks if you're a Learner or an Educator. Please choose &lt;strong&gt;Educator&lt;/strong&gt; to enable course creation functionality:</source>
          <target state="translated">首次安装时，EduTools插件会询问您是学习者还是教育者。请选择&lt;strong&gt;教育者&lt;/strong&gt;以启用课程创建功能：</target>
        </trans-unit>
        <trans-unit id="8932a8146c0a90dc2dd58707de728ef7a12acaa8" translate="yes" xml:space="preserve">
          <source>When installed for the first time, the EduTools plugin asks if you're a Learner or an Educator. Please choose &lt;strong&gt;Learner&lt;/strong&gt;:</source>
          <target state="translated">首次安装时，EduTools插件会询问您是学习者还是教育者。请选择&lt;strong&gt;学习者&lt;/strong&gt;：</target>
        </trans-unit>
        <trans-unit id="10a5b3cb7bba7c274d069162e0ee74e696f381e7" translate="yes" xml:space="preserve">
          <source>When library headers are imported to a C program with the &lt;code&gt;#include&lt;/code&gt; directive, all of the headers included by these headers are also included in the program. So all header dependencies are included in generated stubs as well.</source>
          <target state="translated">使用 &lt;code&gt;#include&lt;/code&gt; 指令将库标头导入C程序时，这些标头包含的所有标头也将包含在程序中。因此，所有标头依赖性也都包含在生成的存根中。</target>
        </trans-unit>
        <trans-unit id="3922383306a8a09a6b0e8b2eb8f9a1db1f1ab0db" translate="yes" xml:space="preserve">
          <source>When list elements aren't &lt;code&gt;Comparable&lt;/code&gt;, you should provide a &lt;a href=&quot;../../api/latest/jvm/stdlib/kotlin/-comparator&quot;&gt;&lt;code&gt;Comparator&lt;/code&gt;&lt;/a&gt; to use in the binary search. The list must be sorted in ascending order according to this &lt;code&gt;Comparator&lt;/code&gt;. Let's have a look at an example:</source>
          <target state="translated">当列表元素不可 &lt;code&gt;Comparable&lt;/code&gt; ，您应该提供一个&lt;a href=&quot;../../api/latest/jvm/stdlib/kotlin/-comparator&quot;&gt; &lt;code&gt;Comparator&lt;/code&gt; &lt;/a&gt;以在二进制搜索中使用。该列表必须根据此 &lt;code&gt;Comparator&lt;/code&gt; 以升序排序。让我们看一个例子：</target>
        </trans-unit>
        <trans-unit id="eb20fed2a040f5bec7d775d79d512be41c67a260" translate="yes" xml:space="preserve">
          <source>When making a choice between a complex expression using multiple higher-order functions and a loop, understand the cost of the operations being performed in each case and keep performance considerations in mind.</source>
          <target state="translated">当在使用多个高阶函数的复杂表达式和循环之间做出选择时,要了解每种情况下执行操作的成本,并牢记性能考虑。</target>
        </trans-unit>
        <trans-unit id="34a85c247b6ac08983d01a72671ac866f48daed6" translate="yes" xml:space="preserve">
          <source>When multiple children of a coroutine fail with an exception, the general rule is &quot;the first exception wins&quot;, so the first exception gets handled. All additional exceptions that happen after the first one are attached to the first exception as suppressed ones.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2970ac1e3a2dbc090d5bfcbffc924f278b84baec" translate="yes" xml:space="preserve">
          <source>When returning a value, the parser gives preference to the qualified return, i.e.</source>
          <target state="translated">当返回一个值时,解析器会优先考虑限定的返回值,也就是</target>
        </trans-unit>
        <trans-unit id="6b57a6650ec36adfcbda42de47e0a60e863df953" translate="yes" xml:space="preserve">
          <source>When somebody calls the function &lt;code&gt;getDate()&lt;/code&gt;, they won't be informed about the experimental API used in its body.</source>
          <target state="translated">当有人调用函数 &lt;code&gt;getDate()&lt;/code&gt; 时，不会通知他们体内使用的实验性API。</target>
        </trans-unit>
        <trans-unit id="6e6f8bdf23dc342f6366d0ca972d7d991572a9e7" translate="yes" xml:space="preserve">
          <source>When supported by the platform adds the specified exception to the list of exceptions that were suppressed in order to deliver this exception.</source>
          <target state="translated">当平台支持时,将指定的异常添加到为了传递这个异常而被抑制的异常列表中。</target>
        </trans-unit>
        <trans-unit id="6393b31c82857a557e8af4f2a0be0aaf5d58b5c5" translate="yes" xml:space="preserve">
          <source>When supported by the platform, adds the specified exception to the list of exceptions that were suppressed in order to deliver this exception.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3c40217c2fbf96f7f32af012e76efee928b75c4a" translate="yes" xml:space="preserve">
          <source>When targeting JavaScript, a different plugin should be applied:</source>
          <target state="translated">当针对JavaScript时,应该应用不同的插件。</target>
        </trans-unit>
        <trans-unit id="6febffb6e2904e4bbf90391b0727f1dbf05ee0c1" translate="yes" xml:space="preserve">
          <source>When targeting JavaScript, the tasks are called &lt;code&gt;compileKotlin2Js&lt;/code&gt; and &lt;code&gt;compileTestKotlin2Js&lt;/code&gt; respectively, and &lt;code&gt;compile&amp;lt;Name&amp;gt;Kotlin2Js&lt;/code&gt; for custom source sets.</source>
          <target state="translated">以JavaScript为目标时，这些任务分别称为 &lt;code&gt;compileKotlin2Js&lt;/code&gt; 和 &lt;code&gt;compileTestKotlin2Js&lt;/code&gt; ，以及用于自定义源集的 &lt;code&gt;compile&amp;lt;Name&amp;gt;Kotlin2Js&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="fb89dbb9f04dc9361c7746b53e92457b21476e1a" translate="yes" xml:space="preserve">
          <source>When targeting JavaScript, the tasks are called &lt;code&gt;compileKotlinJs&lt;/code&gt; and &lt;code&gt;compileTestKotlinJs&lt;/code&gt; respectively, and &lt;code&gt;compile&amp;lt;Name&amp;gt;KotlinJs&lt;/code&gt; for custom source sets.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8307ea9f68fd265bde506b102ae1144dc569ce2b" translate="yes" xml:space="preserve">
          <source>When targeting only JavaScript, use the &lt;code&gt;kotlin-js&lt;/code&gt; plugin. &lt;a href=&quot;js-project-setup&quot;&gt;Learn more&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3700a9140aca950bb22b2b6e73a90e60e275240a" translate="yes" xml:space="preserve">
          <source>When targeting the JVM, Kotlin produces Java compatible bytecode. When targeting JavaScript, Kotlin transpiles to ES5.1 and generates code which is compatible with module systems including AMD and CommonJS. When targeting native, Kotlin will produce platform-specific code (via LLVM).</source>
          <target state="translated">当以JVM为目标时,Kotlin生成与Java兼容的字节码。当以JavaScript为目标时,Kotlin会移植到ES5.1,并生成与包括AMD和CommonJS在内的模块系统兼容的代码。当针对原生的时候,Kotlin会生成平台特定的代码(通过LLVM)。</target>
        </trans-unit>
        <trans-unit id="2fd9751d3f79fd88ae2a197e9ec6c24a47840b01" translate="yes" xml:space="preserve">
          <source>When targeting the JVM, the tasks are called &lt;code&gt;compileKotlin&lt;/code&gt; for production code and &lt;code&gt;compileTestKotlin&lt;/code&gt; for test code. The tasks for custom source sets are called accordingly to the &lt;code&gt;compile&amp;lt;Name&amp;gt;Kotlin&lt;/code&gt; pattern.</source>
          <target state="translated">当针对JVM，任务被称为 &lt;code&gt;compileKotlin&lt;/code&gt; 生产代码和 &lt;code&gt;compileTestKotlin&lt;/code&gt; 测试代码。自定义源集的任务将根据 &lt;code&gt;compile&amp;lt;Name&amp;gt;Kotlin&lt;/code&gt; 模式进行调用。</target>
        </trans-unit>
        <trans-unit id="f18755d5fafc0688db03f9113e5e8aba876e9f17" translate="yes" xml:space="preserve">
          <source>When the argument type is final, there's usually no point in generating the wildcard, so &lt;code&gt;Box&amp;lt;String&amp;gt;&lt;/code&gt; is always &lt;code&gt;Box&amp;lt;String&amp;gt;&lt;/code&gt;, no matter what position it takes.</source>
          <target state="translated">当参数类型为final时，生成通配符通常没有意义，因此 &lt;code&gt;Box&amp;lt;String&amp;gt;&lt;/code&gt; 始终为 &lt;code&gt;Box&amp;lt;String&amp;gt;&lt;/code&gt; ，无论它处于什么位置。</target>
        </trans-unit>
        <trans-unit id="4260e7c630e27226c5f3f5f47519e7ba6fce2dbf" translate="yes" xml:space="preserve">
          <source>When the operands &lt;code&gt;a&lt;/code&gt; and &lt;code&gt;b&lt;/code&gt; are statically known to be &lt;code&gt;Float&lt;/code&gt; or &lt;code&gt;Double&lt;/code&gt; or their nullable counterparts (the type is declared or inferred or is a result of a &lt;a href=&quot;typecasts#smart-casts&quot;&gt;smart cast&lt;/a&gt;), the operations on the numbers and the range that they form follow the IEEE 754 Standard for Floating-Point Arithmetic.</source>
          <target state="translated">当将操作数 &lt;code&gt;a&lt;/code&gt; 和 &lt;code&gt;b&lt;/code&gt; 静态已知为 &lt;code&gt;Float&lt;/code&gt; 或 &lt;code&gt;Double&lt;/code&gt; 或它们的可为空的对应对象（类型已声明或推断或是&lt;a href=&quot;typecasts#smart-casts&quot;&gt;智能强制转换&lt;/a&gt;的结果）时，对数字和它们形成的范围的运算遵循IEEE 754浮点算法的标准。</target>
        </trans-unit>
        <trans-unit id="50fe39e80afdb0bafe5609ac0ee60d49bbca274d" translate="yes" xml:space="preserve">
          <source>When the original &lt;a href=&quot;intercept-continuation#kotlin.coroutines.ContinuationInterceptor%24interceptContinuation%28kotlin.coroutines.Continuation%28%28kotlin.coroutines.ContinuationInterceptor.interceptContinuation.T%29%29%29%2Fcontinuation&quot;&gt;continuation&lt;/a&gt; completes, coroutine framework invokes &lt;a href=&quot;release-intercepted-continuation&quot;&gt;releaseInterceptedContinuation&lt;/a&gt; with the resulting continuation if it was intercepted, that is if &lt;code&gt;interceptContinuation&lt;/code&gt; had previously returned a different continuation instance.</source>
          <target state="translated">当原始&lt;a href=&quot;intercept-continuation#kotlin.coroutines.ContinuationInterceptor%24interceptContinuation%28kotlin.coroutines.Continuation%28%28kotlin.coroutines.ContinuationInterceptor.interceptContinuation.T%29%29%29%2Fcontinuation&quot;&gt;延续&lt;/a&gt;完成时，协程框架会调用&lt;a href=&quot;release-intercepted-continuation&quot;&gt;releaseInterceptedContinuation&lt;/a&gt;，如果结果被截获（即， &lt;code&gt;interceptContinuation&lt;/code&gt; 先前已返回不同的延续实例），则产生的延续。</target>
        </trans-unit>
        <trans-unit id="41195e5948b5d9d14accce4fb777d5a5399f88d7" translate="yes" xml:space="preserve">
          <source>When the original &lt;a href=&quot;intercept-continuation#kotlin.coroutines.ContinuationInterceptor%24interceptContinuation(kotlin.coroutines.Continuation((kotlin.coroutines.ContinuationInterceptor.interceptContinuation.T)))/continuation&quot;&gt;continuation&lt;/a&gt; completes, coroutine framework invokes &lt;a href=&quot;release-intercepted-continuation&quot;&gt;releaseInterceptedContinuation&lt;/a&gt; with the resulting continuation if it was intercepted, that is if &lt;code&gt;interceptContinuation&lt;/code&gt; had previously returned a different continuation instance.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aee129400c7cdc16a95ec0912c8a4fd0a5a9f195" translate="yes" xml:space="preserve">
          <source>When the processing of an &lt;code&gt;Iterable&lt;/code&gt; includes multiple steps, they are executed eagerly: each processing step completes and returns its result &amp;ndash; an intermediate collection. The following step executes on this collection. In turn, multi-step processing of sequences is executed lazily when possible: actual computing happens only when the result of the whole processing chain is requested.</source>
          <target state="translated">当 &lt;code&gt;Iterable&lt;/code&gt; 的处理包括多个步骤时，它们将急切地执行：每个处理步骤完成并返回其结果&amp;ndash;中间集合。在此集合上执行以下步骤。反过来，在可能的情况下延迟执行序列的多步处理：只有在请求整个处理链的结果时才进行实际计算。</target>
        </trans-unit>
        <trans-unit id="45bf077d097fcdb663238684f69205850ecd18da" translate="yes" xml:space="preserve">
          <source>When the project consists of exclusively Kotlin source code, the easiest way to compile the project is to use the &lt;em&gt;kotlinc&lt;/em&gt; task:</source>
          <target state="translated">如果项目仅包含Kotlin源代码，则编译项目的最简单方法是使用&lt;em&gt;kotlinc&lt;/em&gt;任务：</target>
        </trans-unit>
        <trans-unit id="de3a7fefd9c0e4fdceeb9aa1f2016defc2704512" translate="yes" xml:space="preserve">
          <source>When this annotation is placed on a generic function parameter of a function, it enables to infer the type arguments of that generic function from the lambda body passed to that parameter.</source>
          <target state="translated">当这个注解被放置在一个函数的通用函数参数上时,它能够从传递给该参数的lambda体推断出该通用函数的类型参数。</target>
        </trans-unit>
        <trans-unit id="4048f5f513aab453351704d3921c71dee68c7768" translate="yes" xml:space="preserve">
          <source>When this char sequence starts with and ends with the given &lt;a href=&quot;../../kotlin.text/remove-surrounding#kotlin.text%24removeSurrounding%28kotlin.CharSequence%2C+kotlin.CharSequence%29%2Fdelimiter&quot;&gt;delimiter&lt;/a&gt;, returns a new char sequence having this &lt;a href=&quot;../../kotlin.text/remove-surrounding#kotlin.text%24removeSurrounding%28kotlin.CharSequence%2C+kotlin.CharSequence%29%2Fdelimiter&quot;&gt;delimiter&lt;/a&gt; removed both from the start and end. Otherwise returns a new char sequence with the same characters.</source>
          <target state="translated">当此char序列以给定的&lt;a href=&quot;../../kotlin.text/remove-surrounding#kotlin.text%24removeSurrounding%28kotlin.CharSequence%2C+kotlin.CharSequence%29%2Fdelimiter&quot;&gt;定界符&lt;/a&gt;开头和结尾时，返回一个新的char序列，该&lt;a href=&quot;../../kotlin.text/remove-surrounding#kotlin.text%24removeSurrounding%28kotlin.CharSequence%2C+kotlin.CharSequence%29%2Fdelimiter&quot;&gt;定界符&lt;/a&gt;从开始和结束处都删除了。否则返回具有相同字符的新char序列。</target>
        </trans-unit>
        <trans-unit id="71738510e58b58513693f2e894d632554b8f850d" translate="yes" xml:space="preserve">
          <source>When this char sequence starts with and ends with the given &lt;a href=&quot;../../kotlin.text/remove-surrounding#kotlin.text%24removeSurrounding(kotlin.CharSequence,%20kotlin.CharSequence)/delimiter&quot;&gt;delimiter&lt;/a&gt;, returns a new char sequence having this &lt;a href=&quot;../../kotlin.text/remove-surrounding#kotlin.text%24removeSurrounding(kotlin.CharSequence,%20kotlin.CharSequence)/delimiter&quot;&gt;delimiter&lt;/a&gt; removed both from the start and end. Otherwise returns a new char sequence with the same characters.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="662d6d4b8c6d089b2ede0be25f7514459a1a7dc8" translate="yes" xml:space="preserve">
          <source>When this char sequence starts with and ends with the given &lt;a href=&quot;../remove-surrounding#kotlin.text%24removeSurrounding%28kotlin.CharSequence%2C+kotlin.CharSequence%29%2Fdelimiter&quot;&gt;delimiter&lt;/a&gt;, returns a new char sequence having this &lt;a href=&quot;../remove-surrounding#kotlin.text%24removeSurrounding%28kotlin.CharSequence%2C+kotlin.CharSequence%29%2Fdelimiter&quot;&gt;delimiter&lt;/a&gt; removed both from the start and end. Otherwise returns a new char sequence with the same characters.</source>
          <target state="translated">当此char序列以给定的&lt;a href=&quot;../remove-surrounding#kotlin.text%24removeSurrounding%28kotlin.CharSequence%2C+kotlin.CharSequence%29%2Fdelimiter&quot;&gt;定界符&lt;/a&gt;开头和结尾时，返回一个新的char序列，该&lt;a href=&quot;../remove-surrounding#kotlin.text%24removeSurrounding%28kotlin.CharSequence%2C+kotlin.CharSequence%29%2Fdelimiter&quot;&gt;定界符&lt;/a&gt;从开始和结束处都删除了。否则返回具有相同字符的新char序列。</target>
        </trans-unit>
        <trans-unit id="7019a5ff21fc052821e44fe7b2517fb2a7e50ce1" translate="yes" xml:space="preserve">
          <source>When this char sequence starts with and ends with the given &lt;a href=&quot;../remove-surrounding#kotlin.text%24removeSurrounding(kotlin.CharSequence,%20kotlin.CharSequence)/delimiter&quot;&gt;delimiter&lt;/a&gt;, returns a new char sequence having this &lt;a href=&quot;../remove-surrounding#kotlin.text%24removeSurrounding(kotlin.CharSequence,%20kotlin.CharSequence)/delimiter&quot;&gt;delimiter&lt;/a&gt; removed both from the start and end. Otherwise returns a new char sequence with the same characters.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f0f3cdbdc4358626eb141b88edd210afb71fcf1c" translate="yes" xml:space="preserve">
          <source>When this char sequence starts with and ends with the given &lt;a href=&quot;remove-surrounding#kotlin.text%24removeSurrounding%28kotlin.CharSequence%2C+kotlin.CharSequence%29%2Fdelimiter&quot;&gt;delimiter&lt;/a&gt;, returns a new char sequence having this &lt;a href=&quot;remove-surrounding#kotlin.text%24removeSurrounding%28kotlin.CharSequence%2C+kotlin.CharSequence%29%2Fdelimiter&quot;&gt;delimiter&lt;/a&gt; removed both from the start and end. Otherwise returns a new char sequence with the same characters.</source>
          <target state="translated">当此char序列以给定的&lt;a href=&quot;remove-surrounding#kotlin.text%24removeSurrounding%28kotlin.CharSequence%2C+kotlin.CharSequence%29%2Fdelimiter&quot;&gt;定界符&lt;/a&gt;开头和结尾时，返回一个新的char序列，该&lt;a href=&quot;remove-surrounding#kotlin.text%24removeSurrounding%28kotlin.CharSequence%2C+kotlin.CharSequence%29%2Fdelimiter&quot;&gt;定界符&lt;/a&gt;从开始和结束处都删除了。否则返回具有相同字符的新char序列。</target>
        </trans-unit>
        <trans-unit id="1343302e14e8f4c4b12b4a77e8795e48eee2bf82" translate="yes" xml:space="preserve">
          <source>When this char sequence starts with and ends with the given &lt;a href=&quot;remove-surrounding#kotlin.text%24removeSurrounding(kotlin.CharSequence,%20kotlin.CharSequence)/delimiter&quot;&gt;delimiter&lt;/a&gt;, returns a new char sequence having this &lt;a href=&quot;remove-surrounding#kotlin.text%24removeSurrounding(kotlin.CharSequence,%20kotlin.CharSequence)/delimiter&quot;&gt;delimiter&lt;/a&gt; removed both from the start and end. Otherwise returns a new char sequence with the same characters.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="451a99a6d4be3b4584fd97e74744059ae797634b" translate="yes" xml:space="preserve">
          <source>When this char sequence starts with the given &lt;a href=&quot;../../kotlin.text/remove-surrounding#kotlin.text%24removeSurrounding%28kotlin.CharSequence%2C+kotlin.CharSequence%2C+kotlin.CharSequence%29%2Fprefix&quot;&gt;prefix&lt;/a&gt; and ends with the given &lt;a href=&quot;../../kotlin.text/remove-surrounding#kotlin.text%24removeSurrounding%28kotlin.CharSequence%2C+kotlin.CharSequence%2C+kotlin.CharSequence%29%2Fsuffix&quot;&gt;suffix&lt;/a&gt;, returns a new char sequence having both the given &lt;a href=&quot;../../kotlin.text/remove-surrounding#kotlin.text%24removeSurrounding%28kotlin.CharSequence%2C+kotlin.CharSequence%2C+kotlin.CharSequence%29%2Fprefix&quot;&gt;prefix&lt;/a&gt; and &lt;a href=&quot;../../kotlin.text/remove-surrounding#kotlin.text%24removeSurrounding%28kotlin.CharSequence%2C+kotlin.CharSequence%2C+kotlin.CharSequence%29%2Fsuffix&quot;&gt;suffix&lt;/a&gt; removed. Otherwise returns a new char sequence with the same characters.</source>
          <target state="translated">当此char序列以给定&lt;a href=&quot;../../kotlin.text/remove-surrounding#kotlin.text%24removeSurrounding%28kotlin.CharSequence%2C+kotlin.CharSequence%2C+kotlin.CharSequence%29%2Fprefix&quot;&gt;前缀&lt;/a&gt;开头并以给定&lt;a href=&quot;../../kotlin.text/remove-surrounding#kotlin.text%24removeSurrounding%28kotlin.CharSequence%2C+kotlin.CharSequence%2C+kotlin.CharSequence%29%2Fsuffix&quot;&gt;后缀&lt;/a&gt;结尾时，返回一个新的char序列，该序列同时删除了给定&lt;a href=&quot;../../kotlin.text/remove-surrounding#kotlin.text%24removeSurrounding%28kotlin.CharSequence%2C+kotlin.CharSequence%2C+kotlin.CharSequence%29%2Fprefix&quot;&gt;前缀&lt;/a&gt;和&lt;a href=&quot;../../kotlin.text/remove-surrounding#kotlin.text%24removeSurrounding%28kotlin.CharSequence%2C+kotlin.CharSequence%2C+kotlin.CharSequence%29%2Fsuffix&quot;&gt;后缀&lt;/a&gt;。否则返回具有相同字符的新char序列。</target>
        </trans-unit>
        <trans-unit id="21ec09c18e0e164102ac5fa7a001d480731fe38a" translate="yes" xml:space="preserve">
          <source>When this char sequence starts with the given &lt;a href=&quot;../../kotlin.text/remove-surrounding#kotlin.text%24removeSurrounding(kotlin.CharSequence,%20kotlin.CharSequence,%20kotlin.CharSequence)/prefix&quot;&gt;prefix&lt;/a&gt; and ends with the given &lt;a href=&quot;../../kotlin.text/remove-surrounding#kotlin.text%24removeSurrounding(kotlin.CharSequence,%20kotlin.CharSequence,%20kotlin.CharSequence)/suffix&quot;&gt;suffix&lt;/a&gt;, returns a new char sequence having both the given &lt;a href=&quot;../../kotlin.text/remove-surrounding#kotlin.text%24removeSurrounding(kotlin.CharSequence,%20kotlin.CharSequence,%20kotlin.CharSequence)/prefix&quot;&gt;prefix&lt;/a&gt; and &lt;a href=&quot;../../kotlin.text/remove-surrounding#kotlin.text%24removeSurrounding(kotlin.CharSequence,%20kotlin.CharSequence,%20kotlin.CharSequence)/suffix&quot;&gt;suffix&lt;/a&gt; removed. Otherwise returns a new char sequence with the same characters.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="474027059649f995528fdc9848631cfc13badca6" translate="yes" xml:space="preserve">
          <source>When this char sequence starts with the given &lt;a href=&quot;../remove-surrounding#kotlin.text%24removeSurrounding%28kotlin.CharSequence%2C+kotlin.CharSequence%2C+kotlin.CharSequence%29%2Fprefix&quot;&gt;prefix&lt;/a&gt; and ends with the given &lt;a href=&quot;../remove-surrounding#kotlin.text%24removeSurrounding%28kotlin.CharSequence%2C+kotlin.CharSequence%2C+kotlin.CharSequence%29%2Fsuffix&quot;&gt;suffix&lt;/a&gt;, returns a new char sequence having both the given &lt;a href=&quot;../remove-surrounding#kotlin.text%24removeSurrounding%28kotlin.CharSequence%2C+kotlin.CharSequence%2C+kotlin.CharSequence%29%2Fprefix&quot;&gt;prefix&lt;/a&gt; and &lt;a href=&quot;../remove-surrounding#kotlin.text%24removeSurrounding%28kotlin.CharSequence%2C+kotlin.CharSequence%2C+kotlin.CharSequence%29%2Fsuffix&quot;&gt;suffix&lt;/a&gt; removed. Otherwise returns a new char sequence with the same characters.</source>
          <target state="translated">当此char序列以给定&lt;a href=&quot;../remove-surrounding#kotlin.text%24removeSurrounding%28kotlin.CharSequence%2C+kotlin.CharSequence%2C+kotlin.CharSequence%29%2Fprefix&quot;&gt;前缀&lt;/a&gt;开头并以给定&lt;a href=&quot;../remove-surrounding#kotlin.text%24removeSurrounding%28kotlin.CharSequence%2C+kotlin.CharSequence%2C+kotlin.CharSequence%29%2Fsuffix&quot;&gt;后缀&lt;/a&gt;结尾时，返回一个新的char序列，该序列同时删除了给定&lt;a href=&quot;../remove-surrounding#kotlin.text%24removeSurrounding%28kotlin.CharSequence%2C+kotlin.CharSequence%2C+kotlin.CharSequence%29%2Fprefix&quot;&gt;前缀&lt;/a&gt;和&lt;a href=&quot;../remove-surrounding#kotlin.text%24removeSurrounding%28kotlin.CharSequence%2C+kotlin.CharSequence%2C+kotlin.CharSequence%29%2Fsuffix&quot;&gt;后缀&lt;/a&gt;。否则返回具有相同字符的新char序列。</target>
        </trans-unit>
        <trans-unit id="e1059589b0f168a1d76360357b34244200d2d5f4" translate="yes" xml:space="preserve">
          <source>When this char sequence starts with the given &lt;a href=&quot;../remove-surrounding#kotlin.text%24removeSurrounding(kotlin.CharSequence,%20kotlin.CharSequence,%20kotlin.CharSequence)/prefix&quot;&gt;prefix&lt;/a&gt; and ends with the given &lt;a href=&quot;../remove-surrounding#kotlin.text%24removeSurrounding(kotlin.CharSequence,%20kotlin.CharSequence,%20kotlin.CharSequence)/suffix&quot;&gt;suffix&lt;/a&gt;, returns a new char sequence having both the given &lt;a href=&quot;../remove-surrounding#kotlin.text%24removeSurrounding(kotlin.CharSequence,%20kotlin.CharSequence,%20kotlin.CharSequence)/prefix&quot;&gt;prefix&lt;/a&gt; and &lt;a href=&quot;../remove-surrounding#kotlin.text%24removeSurrounding(kotlin.CharSequence,%20kotlin.CharSequence,%20kotlin.CharSequence)/suffix&quot;&gt;suffix&lt;/a&gt; removed. Otherwise returns a new char sequence with the same characters.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b4f20b674cd62de8c48c773a81ba6fdddb62b434" translate="yes" xml:space="preserve">
          <source>When this char sequence starts with the given &lt;a href=&quot;remove-surrounding#kotlin.text%24removeSurrounding%28kotlin.CharSequence%2C+kotlin.CharSequence%2C+kotlin.CharSequence%29%2Fprefix&quot;&gt;prefix&lt;/a&gt; and ends with the given &lt;a href=&quot;remove-surrounding#kotlin.text%24removeSurrounding%28kotlin.CharSequence%2C+kotlin.CharSequence%2C+kotlin.CharSequence%29%2Fsuffix&quot;&gt;suffix&lt;/a&gt;, returns a new char sequence having both the given &lt;a href=&quot;remove-surrounding#kotlin.text%24removeSurrounding%28kotlin.CharSequence%2C+kotlin.CharSequence%2C+kotlin.CharSequence%29%2Fprefix&quot;&gt;prefix&lt;/a&gt; and &lt;a href=&quot;remove-surrounding#kotlin.text%24removeSurrounding%28kotlin.CharSequence%2C+kotlin.CharSequence%2C+kotlin.CharSequence%29%2Fsuffix&quot;&gt;suffix&lt;/a&gt; removed. Otherwise returns a new char sequence with the same characters.</source>
          <target state="translated">当此char序列以给定&lt;a href=&quot;remove-surrounding#kotlin.text%24removeSurrounding%28kotlin.CharSequence%2C+kotlin.CharSequence%2C+kotlin.CharSequence%29%2Fprefix&quot;&gt;前缀&lt;/a&gt;开头并以给定&lt;a href=&quot;remove-surrounding#kotlin.text%24removeSurrounding%28kotlin.CharSequence%2C+kotlin.CharSequence%2C+kotlin.CharSequence%29%2Fsuffix&quot;&gt;后缀&lt;/a&gt;结尾时，返回一个新的char序列，该序列同时删除了给定&lt;a href=&quot;remove-surrounding#kotlin.text%24removeSurrounding%28kotlin.CharSequence%2C+kotlin.CharSequence%2C+kotlin.CharSequence%29%2Fprefix&quot;&gt;前缀&lt;/a&gt;和&lt;a href=&quot;remove-surrounding#kotlin.text%24removeSurrounding%28kotlin.CharSequence%2C+kotlin.CharSequence%2C+kotlin.CharSequence%29%2Fsuffix&quot;&gt;后缀&lt;/a&gt;。否则返回具有相同字符的新char序列。</target>
        </trans-unit>
        <trans-unit id="cdb86094485044abedbde00e051a13f9d6e30f2e" translate="yes" xml:space="preserve">
          <source>When this char sequence starts with the given &lt;a href=&quot;remove-surrounding#kotlin.text%24removeSurrounding(kotlin.CharSequence,%20kotlin.CharSequence,%20kotlin.CharSequence)/prefix&quot;&gt;prefix&lt;/a&gt; and ends with the given &lt;a href=&quot;remove-surrounding#kotlin.text%24removeSurrounding(kotlin.CharSequence,%20kotlin.CharSequence,%20kotlin.CharSequence)/suffix&quot;&gt;suffix&lt;/a&gt;, returns a new char sequence having both the given &lt;a href=&quot;remove-surrounding#kotlin.text%24removeSurrounding(kotlin.CharSequence,%20kotlin.CharSequence,%20kotlin.CharSequence)/prefix&quot;&gt;prefix&lt;/a&gt; and &lt;a href=&quot;remove-surrounding#kotlin.text%24removeSurrounding(kotlin.CharSequence,%20kotlin.CharSequence,%20kotlin.CharSequence)/suffix&quot;&gt;suffix&lt;/a&gt; removed. Otherwise returns a new char sequence with the same characters.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="81b6ffb12763bc2138c97cf448035b6d9b90a8a2" translate="yes" xml:space="preserve">
          <source>When this map already has an implicit default value provided with a former call to &lt;a href=&quot;with-default&quot;&gt;withDefault&lt;/a&gt;, it is being replaced by this call.</source>
          <target state="translated">如果此映射已经具有一个隐含的默认值，该默认值由先前对&lt;a href=&quot;with-default&quot;&gt;withDefault的&lt;/a&gt;调用提供，则它将被该调用替换。</target>
        </trans-unit>
        <trans-unit id="4cb6af1ae576c542ddecdff3ea4125d59a9ee8e7" translate="yes" xml:space="preserve">
          <source>When to use</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d17ab536e904cdcbae105ffd675f6f9b2f2e25d6" translate="yes" xml:space="preserve">
          <source>When transforming maps, you have two options: transform keys leaving values unchanged and vice versa. To apply a given transformation to keys, use &lt;a href=&quot;../../api/latest/jvm/stdlib/kotlin.collections/map-keys&quot;&gt;&lt;code&gt;mapKeys()&lt;/code&gt;&lt;/a&gt;; in turn, &lt;a href=&quot;../../api/latest/jvm/stdlib/kotlin.collections/map-values&quot;&gt;&lt;code&gt;mapValues()&lt;/code&gt;&lt;/a&gt; transforms values. Both functions use the transformations that take a map entry as an argument, so you can operate both its key and value.</source>
          <target state="translated">变换地图时，有两个选择：变换键，使值保持不变，反之亦然。要将给定的转换应用于键，请使用&lt;a href=&quot;../../api/latest/jvm/stdlib/kotlin.collections/map-keys&quot;&gt; &lt;code&gt;mapKeys()&lt;/code&gt; &lt;/a&gt;；反过来，&lt;a href=&quot;../../api/latest/jvm/stdlib/kotlin.collections/map-values&quot;&gt; &lt;code&gt;mapValues()&lt;/code&gt; &lt;/a&gt;转换值。这两个函数都使用将映射条目作为参数的转换，因此您可以操作其键和值。</target>
        </trans-unit>
        <trans-unit id="3c33f3916421868809be7997c01c86f79f8dba67" translate="yes" xml:space="preserve">
          <source>When using &lt;a href=&quot;https://github.com/gradle/kotlin-dsl&quot;&gt;Gradle Kotlin DSL&lt;/a&gt;, apply the Kotlin plugins using the &lt;code&gt;plugins { ... }&lt;/code&gt; block. If you apply them with &lt;code&gt;apply { plugin(...) }&lt;/code&gt; instead, you may encounter unresolved references to the extensions generated by Gradle Kotlin DSL. To resolve that, you can comment out the erroneous usages, run the Gradle task &lt;code&gt;kotlinDslAccessorsSnapshot&lt;/code&gt;, then uncomment the usages back and rerun the build or reimport the project into the IDE.</source>
          <target state="translated">使用&lt;a href=&quot;https://github.com/gradle/kotlin-dsl&quot;&gt;Gradle Kotlin DSL时&lt;/a&gt;，请使用 &lt;code&gt;plugins { ... }&lt;/code&gt; 块来应用Kotlin插件。如果改为使用 &lt;code&gt;apply { plugin(...) }&lt;/code&gt; 来应用它们，则可能会遇到未解析的对Gradle Kotlin DSL生成的扩展的引用。要解决此问题，您可以注释掉错误的用法，运行Gradle任务 &lt;code&gt;kotlinDslAccessorsSnapshot&lt;/code&gt; ，然后取消注释用法，然后重新运行构建或将项目重新导入到IDE中。</target>
        </trans-unit>
        <trans-unit id="969e0f1eba169f04310601e387fff4607230faf4" translate="yes" xml:space="preserve">
          <source>When using AMD, we set the compiler option to use AMD. Once we do that, we can then reference any modules that we've defined as if they were regular AMD ones.</source>
          <target state="translated">当使用AMD时,我们将编译器选项设置为使用AMD。一旦我们这样做,我们就可以引用我们定义的任何模块,就像它们是普通的AMD模块一样。</target>
        </trans-unit>
        <trans-unit id="53fe6e4bace8d3f91a163b97ab403728f060528c" translate="yes" xml:space="preserve">
          <source>When using DSLs, one might have come across the problem that too many functions can be called in the context. We can call methods of every available implicit receiver inside a lambda and therefore get an inconsistent result, like the tag &lt;code&gt;head&lt;/code&gt; inside another &lt;code&gt;head&lt;/code&gt;:</source>
          <target state="translated">使用DSL时，可能会遇到一个问题，即在上下文中可以调用太多功能。我们可以将拉姆达内所有可用的隐式接收器的方法，因此得到不一致的结果，像标签 &lt;code&gt;head&lt;/code&gt; 另一内部 &lt;code&gt;head&lt;/code&gt; ：</target>
        </trans-unit>
        <trans-unit id="fac3c8199ff8ff114bd0a9de76148fcb9a8c3dbd" translate="yes" xml:space="preserve">
          <source>When using UMD or CommonJS, for example, your callsite could look like this:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7c361123f4c7cb5fe21faa0f281e0ce914b368c3" translate="yes" xml:space="preserve">
          <source>When using a generic type where you have star-projected one or more of its type parameters, you can:</source>
          <target state="translated">当使用一个通用类型时,你已经对它的一个或多个类型参数进行了星形预测,你可以。</target>
        </trans-unit>
        <trans-unit id="7db42a19309e043040b1f118ec7a9ccf3b7c095b" translate="yes" xml:space="preserve">
          <source>When using an acronym as part of a declaration name, capitalize it if it consists of two letters (&lt;code&gt;IOStream&lt;/code&gt;); capitalize only the first letter if it is longer (&lt;code&gt;XmlFormatter&lt;/code&gt;, &lt;code&gt;HttpInputStream&lt;/code&gt;).</source>
          <target state="translated">在声明名称中使用首字母缩写词时，如果首字母缩写词由两个字母（ &lt;code&gt;IOStream&lt;/code&gt; ）组成，则将其大写。如果首字母较长则大写（ &lt;code&gt;XmlFormatter&lt;/code&gt; ， &lt;code&gt;HttpInputStream&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="c3685d4fda3e975e4ad59872db610504afb8dcbd" translate="yes" xml:space="preserve">
          <source>When using if/else as an expression, the &lt;code&gt;else&lt;/code&gt; part is mandatory (but there can also be &lt;code&gt;else if&lt;/code&gt; parts). If the body that ends up being evaluated contains more than one line, it's the result of the last line that becomes the result of the &lt;code&gt;if&lt;/code&gt;/&lt;code&gt;else&lt;/code&gt;.</source>
          <target state="translated">使用if / else作为表达式时， &lt;code&gt;else&lt;/code&gt; 部分是必需的（但是 &lt;code&gt;else if&lt;/code&gt; 部分也可以存在else）。如果最终被评估的主体包含多行，则最后一行的结果成为 &lt;code&gt;if&lt;/code&gt; / &lt;code&gt;else&lt;/code&gt; 的结果。</target>
        </trans-unit>
        <trans-unit id="c13d37c9e596a2177cf34971de8b2f9ef301b366" translate="yes" xml:space="preserve">
          <source>When using such &lt;code&gt;klib&lt;/code&gt; in your program, the library is linked automatically.</source>
          <target state="translated">在程序中使用此类 &lt;code&gt;klib&lt;/code&gt; 时，该库将自动链接。</target>
        </trans-unit>
        <trans-unit id="0acd4ad721ee61253910c4ba13a8be0c94889bbe" translate="yes" xml:space="preserve">
          <source>When we call a &lt;code&gt;vararg&lt;/code&gt;-function, we can pass arguments one-by-one, e.g. &lt;code&gt;asList(1, 2, 3)&lt;/code&gt;, or, if we already have an array and want to pass its contents to the function, we use the &lt;strong&gt;spread&lt;/strong&gt; operator (prefix the array with &lt;code&gt;*&lt;/code&gt;):</source>
          <target state="translated">当我们把一个 &lt;code&gt;vararg&lt;/code&gt; -function，我们可以通过一个参数接一个，例如 &lt;code&gt;asList(1, 2, 3)&lt;/code&gt; ，或者，如果我们已经有一个阵列，并希望将其内容传递给该函数，我们使用&lt;strong&gt;扩散&lt;/strong&gt;运算符（在数组前面加上 &lt;code&gt;*&lt;/code&gt; ）：</target>
        </trans-unit>
        <trans-unit id="79dc6e08abcd7d48d398a4ca21168dbf49b9bdf0" translate="yes" xml:space="preserve">
          <source>When we call methods on variables of platform types, Kotlin does not issue nullability errors at compile time, but the call may fail at runtime, because of a null-pointer exception or an assertion that Kotlin generates to prevent nulls from propagating:</source>
          <target state="translated">当我们在平台类型的变量上调用方法时,Kotlin在编译时不会发出空性错误,但在运行时可能会因为空指针异常或Kotlin产生的防止空值传播的断言而导致调用失败。</target>
        </trans-unit>
        <trans-unit id="ad1fe34b679899f7dee6782797e3bf361c2fe90a" translate="yes" xml:space="preserve">
          <source>When we declare many types in our supertype list, it may appear that we inherit more than one implementation of the same method. For example</source>
          <target state="translated">当我们在超类型列表中声明许多类型时,可能会出现我们继承了同一方法的多个实现。例如</target>
        </trans-unit>
        <trans-unit id="08c1783813dd9fc626a089b7cae223c9d065db16" translate="yes" xml:space="preserve">
          <source>When we have a named function declared like this:</source>
          <target state="translated">当我们有一个命名的函数这样声明时。</target>
        </trans-unit>
        <trans-unit id="61f9a57deb03c55b45ac7741559138e62485b782" translate="yes" xml:space="preserve">
          <source>When we have a nullable reference &lt;code&gt;b&lt;/code&gt;, we can say &quot;if &lt;code&gt;b&lt;/code&gt; is not null, use it, otherwise use some non-null value&quot;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fbc0820779d8db91f205b3ecbf7db0ccf41073a0" translate="yes" xml:space="preserve">
          <source>When we have a nullable reference &lt;code&gt;r&lt;/code&gt;, we can say &quot;if &lt;code&gt;r&lt;/code&gt; is not null, use it, otherwise use some non-null value &lt;code&gt;x&lt;/code&gt;&quot;:</source>
          <target state="translated">当我们有一个可为空的引用 &lt;code&gt;r&lt;/code&gt; 时，我们可以说&amp;ldquo;如果 &lt;code&gt;r&lt;/code&gt; 不为null，则使用它，否则使用一些非null值 &lt;code&gt;x&lt;/code&gt; &amp;rdquo;：</target>
        </trans-unit>
        <trans-unit id="5732d17582b0ef91e5bb01d205646ae68f3db2fc" translate="yes" xml:space="preserve">
          <source>When we pass a lambda to a dynamic call, all of its parameters by default have the type &lt;code&gt;dynamic&lt;/code&gt;:</source>
          <target state="translated">当我们将lambda传递给动态调用时，默认情况下，其所有参数的类型均为 &lt;code&gt;dynamic&lt;/code&gt; ：</target>
        </trans-unit>
        <trans-unit id="0be162a260a9be965f47e4e14ba8852bd8d1fa24" translate="yes" xml:space="preserve">
          <source>When we read from &lt;code&gt;p&lt;/code&gt; that delegates to an instance of &lt;code&gt;Delegate&lt;/code&gt;, the &lt;code&gt;getValue()&lt;/code&gt; function from &lt;code&gt;Delegate&lt;/code&gt; is called, so that its first parameter is the object we read &lt;code&gt;p&lt;/code&gt; from and the second parameter holds a description of &lt;code&gt;p&lt;/code&gt; itself (e.g. you can take its name). For example:</source>
          <target state="translated">当我们读出 &lt;code&gt;p&lt;/code&gt; 委托给的一个实例 &lt;code&gt;Delegate&lt;/code&gt; 的 &lt;code&gt;getValue()&lt;/code&gt; 从函数 &lt;code&gt;Delegate&lt;/code&gt; 被调用，所以它的第一个参数是对象，我们读到 &lt;code&gt;p&lt;/code&gt; 从第二个参数持有的描述 &lt;code&gt;p&lt;/code&gt; 本身（例如，你可以采取其名称）。例如：</target>
        </trans-unit>
        <trans-unit id="ad6c6017c96852fa45cd533d083255cb214a9f4c" translate="yes" xml:space="preserve">
          <source>When wrapping chained calls, put the &lt;code&gt;.&lt;/code&gt; character or the &lt;code&gt;?.&lt;/code&gt; operator on the next line, with a single indent:</source>
          <target state="translated">当包装链接的呼叫时，请放入 &lt;code&gt;.&lt;/code&gt; 字符或 &lt;code&gt;?.&lt;/code&gt; 下一行的运算符，带有一个缩进：</target>
        </trans-unit>
        <trans-unit id="9f05d7113cc0860bca9dd1b2c8b1f2efc8346629" translate="yes" xml:space="preserve">
          <source>When writing Kotlin code, an object may need to be converted from a Kotlin type to the equivalent Swift/Objective-C type (or vice versa). In this case a plain old Kotlin cast can be used, e.g.</source>
          <target state="translated">当编写Kotlin代码时,可能需要将一个对象从Kotlin类型转换为等价的Swift/Objective-C类型(反之亦然)。在这种情况下,可以使用普通的Kotlin类型,例如</target>
        </trans-unit>
        <trans-unit id="9cafd8bf742afb2fbc35d3c6537af8b35836e156" translate="yes" xml:space="preserve">
          <source>When writing libraries, it's recommended to follow an additional set of rules to ensure API stability:</source>
          <target state="translated">在编写库的时候,建议多遵循一套规则,以保证API的稳定性。</target>
        </trans-unit>
        <trans-unit id="d741918b948509f4aba6408fd1ef9e8a1136bd6e" translate="yes" xml:space="preserve">
          <source>When writing native applications, oftentimes we need to access certain functionality that is not included in the Kotlin standard library, such as making HTTP requests, reading and writing from disk, etc.</source>
          <target state="translated">在编写本地应用程序时,很多时候我们需要访问某些Kotlin标准库中没有包含的功能,比如进行HTTP请求、从磁盘读写等。</target>
        </trans-unit>
        <trans-unit id="f3156a4be9cfb99131296400d8e473f56e52183c" translate="yes" xml:space="preserve">
          <source>When you are ready, verify the task with the &lt;strong&gt;Check&lt;/strong&gt; icon at the top of &lt;strong&gt;Task Description&lt;/strong&gt; panel. If you passed, there will be the &lt;strong&gt;Congratulations!&lt;/strong&gt; message:</source>
          <target state="translated">准备就绪后，&lt;strong&gt;请使用&lt;/strong&gt; &amp;ldquo; &lt;strong&gt;任务描述&amp;rdquo;&lt;/strong&gt;面板顶部的&amp;ldquo; &lt;strong&gt;检查&amp;rdquo;&lt;/strong&gt;图标来验证任务。如果您通过了，那就&lt;strong&gt;恭喜您！&lt;/strong&gt;信息：</target>
        </trans-unit>
        <trans-unit id="598dab40b3272c1fb9a453390cd6e6de1808ea5d" translate="yes" xml:space="preserve">
          <source>When you call a member function on &lt;code&gt;this&lt;/code&gt;, you can skip the &lt;code&gt;this.&lt;/code&gt; part. If you have a non-member function with the same name, use this with caution, because in some cases it can be called instead:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bd4f91db759426c5c027f930c965bc523e90edeb" translate="yes" xml:space="preserve">
          <source>When you call this function, the compiler will know that the execution doesn't continue beyond the call:</source>
          <target state="translated">当你调用这个函数时,编译器就会知道在调用之后不会继续执行。</target>
        </trans-unit>
        <trans-unit id="ebc718bb513c3e899345e0a1f6bade26496caf51" translate="yes" xml:space="preserve">
          <source>When you choose the JavaScript target, any Kotlin code that is part of the project as well as the standard library that ships with Kotlin is transpiled to JavaScript. However, this excludes the JDK and any JVM or Java framework or library used. Any file that is not Kotlin will be ignored during compilation.</source>
          <target state="translated">当您选择JavaScript目标时,任何作为项目一部分的Kotlin代码以及Kotlin附带的标准库都会被移植到JavaScript中。但是,这不包括JDK和任何JVM或使用的Java框架或库。任何非Kotlin的文件都将在编译过程中被忽略。</target>
        </trans-unit>
        <trans-unit id="61cb3b5bb55f1ec33f90df7914d7d8c5178a623a" translate="yes" xml:space="preserve">
          <source>When you compile a multiplatform project for a specific platform, the code for both the common and platform-specific parts is generated.</source>
          <target state="translated">当你为特定平台编译多平台项目时,会同时生成通用部分和特定平台部分的代码。</target>
        </trans-unit>
        <trans-unit id="487f53e65f3e40a392960d7ffe8fb70d789db81a" translate="yes" xml:space="preserve">
          <source>When you create a progression implicitly by iterating a range, this progression's &lt;code&gt;first&lt;/code&gt; and &lt;code&gt;last&lt;/code&gt; elements are the range's endpoints, and the &lt;code&gt;step&lt;/code&gt; is 1.</source>
          <target state="translated">通过迭代范围隐式创建进度时，此进度的 &lt;code&gt;first&lt;/code&gt; 和 &lt;code&gt;last&lt;/code&gt; 元素是范围的端点， &lt;code&gt;step&lt;/code&gt; 为1。</target>
        </trans-unit>
        <trans-unit id="51bafee0f48839d4b74895eeb5d22b3bc95f6844" translate="yes" xml:space="preserve">
          <source>When you create own implementations of collection interfaces, you must implement their member functions. To make the creation of new implementations easier, use the skeletal implementations of collection interfaces from the standard library: &lt;a href=&quot;../../api/latest/jvm/stdlib/kotlin.collections/-abstract-collection/index&quot;&gt;&lt;code&gt;AbstractCollection&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../../api/latest/jvm/stdlib/kotlin.collections/-abstract-list/index&quot;&gt;&lt;code&gt;AbstractList&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../../api/latest/jvm/stdlib/kotlin.collections/-abstract-set/index&quot;&gt;&lt;code&gt;AbstractSet&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../../api/latest/jvm/stdlib/kotlin.collections/-abstract-map/index&quot;&gt;&lt;code&gt;AbstractMap&lt;/code&gt;&lt;/a&gt;, and their mutable counterparts.</source>
          <target state="translated">创建自己的集合接口实现时，必须实现其成员函数。为了使新实现的创建更加容易，请使用标准库中Collection接口的骨架实现：&lt;a href=&quot;../../api/latest/jvm/stdlib/kotlin.collections/-abstract-collection/index&quot;&gt; &lt;code&gt;AbstractCollection&lt;/code&gt; &lt;/a&gt;，&lt;a href=&quot;../../api/latest/jvm/stdlib/kotlin.collections/-abstract-list/index&quot;&gt; &lt;code&gt;AbstractList&lt;/code&gt; &lt;/a&gt;，&lt;a href=&quot;../../api/latest/jvm/stdlib/kotlin.collections/-abstract-set/index&quot;&gt; &lt;code&gt;AbstractSet&lt;/code&gt; &lt;/a&gt;，&lt;a href=&quot;../../api/latest/jvm/stdlib/kotlin.collections/-abstract-map/index&quot;&gt; &lt;code&gt;AbstractMap&lt;/code&gt; &lt;/a&gt;及其可变对象。</target>
        </trans-unit>
        <trans-unit id="de5ca0060f568734c25c44dc064e42505647a415" translate="yes" xml:space="preserve">
          <source>When you create your own implementations of collection interfaces, you must implement their member functions. To make the creation of new implementations easier, use the skeletal implementations of collection interfaces from the standard library: &lt;a href=&quot;../../api/latest/jvm/stdlib/kotlin.collections/-abstract-collection/index&quot;&gt;&lt;code&gt;AbstractCollection&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../../api/latest/jvm/stdlib/kotlin.collections/-abstract-list/index&quot;&gt;&lt;code&gt;AbstractList&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../../api/latest/jvm/stdlib/kotlin.collections/-abstract-set/index&quot;&gt;&lt;code&gt;AbstractSet&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../../api/latest/jvm/stdlib/kotlin.collections/-abstract-map/index&quot;&gt;&lt;code&gt;AbstractMap&lt;/code&gt;&lt;/a&gt;, and their mutable counterparts.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dc3c8353ca1e574cdd5fef24454fb4fda2fc3277" translate="yes" xml:space="preserve">
          <source>When you have a &lt;code&gt;List&lt;/code&gt; of &lt;code&gt;Pair&lt;/code&gt;s, you can do the reverse transformation &amp;ndash; &lt;em&gt;unzipping&lt;/em&gt; &amp;ndash; that builds two lists from these pairs:</source>
          <target state="translated">当你有一个 &lt;code&gt;List&lt;/code&gt; 的 &lt;code&gt;Pair&lt;/code&gt; S，你可以做反向转变- &lt;em&gt;解压&lt;/em&gt; -即建立从这些对两个列表：</target>
        </trans-unit>
        <trans-unit id="5c27d02fe0802eb2c5dc736c355913900c0370a9" translate="yes" xml:space="preserve">
          <source>When you have a variable or parameter of function type (sometimes called a &lt;em&gt;function reference&lt;/em&gt;), you can call it as if it were an ordinary function, and that will cause the referenced function to be called:</source>
          <target state="translated">当您具有函数类型的变量或参数（有时称为&lt;em&gt;函数引用&lt;/em&gt;）时，可以像调用普通函数一样对其进行调用，这将导致引用的函数被调用：</target>
        </trans-unit>
        <trans-unit id="e1aaa92f5ddb308d5297a444696d8b7457b69a72" translate="yes" xml:space="preserve">
          <source>When you have finished creating your course, it's a good idea to view your course from a learner's perspective and test it. Right-click on the course view and go to &lt;strong&gt;Course Creator -&amp;gt; Create Course Preview&lt;/strong&gt; to open your course in learner mode:</source>
          <target state="translated">完成课程创建后，最好从学习者的角度查看课程并进行测试。右键单击课程视图，然后转到&amp;ldquo; &lt;strong&gt;课程创建者&amp;rdquo;-&amp;gt;&amp;ldquo;创建课程预览&amp;rdquo;&lt;/strong&gt;以学习者模式打开课程：</target>
        </trans-unit>
        <trans-unit id="a3250cc79c522d1ac623227bb111869e351b8f95" translate="yes" xml:space="preserve">
          <source>When you run this code, you'll see that the &lt;code&gt;filter()&lt;/code&gt; and &lt;code&gt;map()&lt;/code&gt; functions are executed in the same order as they appear in the code. First, you see &lt;code&gt;filter:&lt;/code&gt; for all elements, then &lt;code&gt;length:&lt;/code&gt; for the elements left after filtering, and then the output of the two last lines. This is how the list processing goes:</source>
          <target state="translated">运行此代码时，您会看到 &lt;code&gt;filter()&lt;/code&gt; 和 &lt;code&gt;map()&lt;/code&gt; 函数的执行顺序与代码中出现的顺序相同。首先，看到 &lt;code&gt;filter:&lt;/code&gt; 对于所有元素，然后是 &lt;code&gt;length:&lt;/code&gt; 对于过滤后剩余的元素，然后是最后两行的输出。列表处理如下：</target>
        </trans-unit>
        <trans-unit id="05ad4ed8cb6fd5863366c2a4f1abcdd6e5010b48" translate="yes" xml:space="preserve">
          <source>When you see &lt;code&gt;also&lt;/code&gt; in the code, you can read it as &amp;ldquo;&lt;em&gt;and also do the following with the object.&lt;/em&gt;&amp;rdquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6928284bef91c96791612dd21e00cae5d64a5053" translate="yes" xml:space="preserve">
          <source>When you see &lt;code&gt;also&lt;/code&gt; in the code, you can read it as &amp;ldquo;&lt;em&gt;and also do the following&lt;/em&gt;&amp;rdquo;.</source>
          <target state="translated">当您 &lt;code&gt;also&lt;/code&gt; 代码中看到时，可以将其读取为&amp;ldquo;，&lt;em&gt;然后执行以下操作&lt;/em&gt; &amp;rdquo;。</target>
        </trans-unit>
        <trans-unit id="8d24e43a2e1296ae8492ad2425aad4e306037e84" translate="yes" xml:space="preserve">
          <source>When you switch to Kotlin, your xml layout files don't change at all. For instance, you use &lt;code&gt;variable&lt;/code&gt; within &lt;code&gt;data&lt;/code&gt; to describe a variable that may be used within the layout. You can declare a variable of a Kotlin type:</source>
          <target state="translated">当您切换到Kotlin时，您的xml布局文件完全不变。例如，您在 &lt;code&gt;data&lt;/code&gt; 使用 &lt;code&gt;variable&lt;/code&gt; 来描述可在布局中使用的变量。您可以声明Kotlin类型的变量：</target>
        </trans-unit>
        <trans-unit id="1239262e94d3c7df345c600c729ad2ad431b78a5" translate="yes" xml:space="preserve">
          <source>When you take an interface or an open class as a parameter, you generally don't know the real type of the parameter at runtime, since it could be an instance of a subclass or of any class that implements the interface. It is possible to check what the exact type is, but like in Python, you should generally avoid it and instead design your class hierarchy such that you can do what you need by proper overriding of functions or properties.</source>
          <target state="translated">当你把一个接口或一个开放类作为参数时,你一般在运行时不知道参数的真实类型,因为它可能是一个子类或任何实现该接口的类的实例。检查确切的类型是什么是可能的,但就像在Python中一样,你一般应该避免这样做,而应该设计你的类层次结构,使你可以通过适当地覆盖函数或属性来完成你需要的事情。</target>
        </trans-unit>
        <trans-unit id="9a7fe00cf3644a358da554d74666746417284178" translate="yes" xml:space="preserve">
          <source>When you use an arithmetic operator on two integers of different types, the result is &quot;upgraded&quot; to the widest type. Note that the result might still overflow.</source>
          <target state="translated">当你对两个不同类型的整数使用算术运算符时,结果会被 &quot;升级 &quot;为最宽的类型。请注意,结果可能仍然会溢出。</target>
        </trans-unit>
        <trans-unit id="3c62a163cbef716d256d43a2d19d876bb12a78c5" translate="yes" xml:space="preserve">
          <source>When you use an experimental API in the code intended for third-party use (a library), you can mark your API as experimental as well. To do this, annotate your declaration with the &lt;em&gt;experimental marker annotation&lt;/em&gt; of the API used in its body. This enables you to use the API elements annotated with this marker.</source>
          <target state="translated">在供第三方使用的代码（库）中使用实验性API时，您也可以将API标记为实验性。为此，请在声明中使用主体中使用的API 的&lt;em&gt;实验性标记注释&lt;/em&gt;。这使您可以使用带有此标记注释的API元素。</target>
        </trans-unit>
        <trans-unit id="06b65a21854b89868579d67b03180df54f3544a9" translate="yes" xml:space="preserve">
          <source>When you use named arguments in a function call, you can freely change the order they are listed in, and if you want to use their default values you can just leave them out altogether.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="48d4e3a5ba4e31277cb9f0e61d2e54f709bf8961" translate="yes" xml:space="preserve">
          <source>When you're annotating a property or a primary constructor parameter, there are multiple Java elements which are generated from the corresponding Kotlin element, and therefore multiple possible locations for the annotation in the generated Java bytecode. To specify how exactly the annotation should be generated, use the following syntax:</source>
          <target state="translated">当您要对一个属性或主构造参数进行注释时,会有多个Java元素从相应的Kotlin元素中生成,因此在生成的Java字节码中,注释可能有多个位置。要指定注解的具体生成方式,请使用以下语法。</target>
        </trans-unit>
        <trans-unit id="89ad1e4f32412313aa6f0bd650dfc39dcb173e7f" translate="yes" xml:space="preserve">
          <source>Whenever it is invoked on the same object more than once, the &lt;code&gt;hashCode&lt;/code&gt; method must consistently return the same integer, provided no information used in &lt;code&gt;equals&lt;/code&gt; comparisons on the object is modified.</source>
          <target state="translated">只要在同一对象上多次调用它， &lt;code&gt;hashCode&lt;/code&gt; 方法就必须一致地返回相同的整数，只要不修改该对象的 &lt;code&gt;equals&lt;/code&gt; 比较中使用的信息即可。</target>
        </trans-unit>
        <trans-unit id="55d78075233bceac802e1984993c3d3b3088601f" translate="yes" xml:space="preserve">
          <source>Whenever you create an instance of this class, you must specify an actual type in place of &lt;code&gt;T&lt;/code&gt;, unless the compiler can infer it from the constructor parameters: &lt;code&gt;TreeNode(&quot;foo&quot;)&lt;/code&gt; or &lt;code&gt;TreeNode&amp;lt;String&amp;gt;(null)&lt;/code&gt;. Every use of this instance will act as if it were an instance of a class that looks like this:</source>
          <target state="translated">每当创建此类的实例时，都必须指定实际的类型来代替 &lt;code&gt;T&lt;/code&gt; ，除非编译器可以从构造函数参数 &lt;code&gt;TreeNode(&quot;foo&quot;)&lt;/code&gt; 或 &lt;code&gt;TreeNode&amp;lt;String&amp;gt;(null)&lt;/code&gt; 推断出它。每次使用此实例都会像看起来像是一个类的实例一样：</target>
        </trans-unit>
        <trans-unit id="8ca39f6f0f111844ff04d02c9f4bf0efee656845" translate="yes" xml:space="preserve">
          <source>Whenever you use an arithmetic operator on two integers of the same type (or when you use a unary operator like negation), &lt;em&gt;there is no automatic &quot;upgrading&quot; if the result doesn't fit in the type of the operands!&lt;/em&gt; Try this:</source>
          <target state="translated">每当您对相同类型的两个整数使用算术运算符时（或使用诸如否定之类的一元运算符）时，&lt;em&gt;如果结果不适合操作数的类型，则不会自动进行&amp;ldquo;升级&amp;rdquo;！&lt;/em&gt;试试这个：</target>
        </trans-unit>
        <trans-unit id="b65896c2c2c1091be4cf3076a04d4d7b1bc8f223" translate="yes" xml:space="preserve">
          <source>Whenever you want a variable that can only take on a limited number of values where the only feature of each value is that it's distinct from all the other values, you can create an &lt;em&gt;enum class&lt;/em&gt;:</source>
          <target state="translated">每当您想要一个只能包含有限数量的值的变量，并且每个值的唯一特征是与所有其他值都不同时，可以创建一个&lt;em&gt;枚举类&lt;/em&gt;：</target>
        </trans-unit>
        <trans-unit id="b72a1d211e3475b177a16c0ad833aad00f45de47" translate="yes" xml:space="preserve">
          <source>Where &lt;code&gt;__TYPE__&lt;/code&gt; is one of the simple type names and &lt;code&gt;__CTYPE__&lt;/code&gt; is the related Objective-C type, e.g. &lt;code&gt;initWithChar(char)&lt;/code&gt;.</source>
          <target state="translated">其中 &lt;code&gt;__TYPE__&lt;/code&gt; 是简单类型名称之一，而 &lt;code&gt;__CTYPE__&lt;/code&gt; 是相关的Objective-C类型，例如 &lt;code&gt;initWithChar(char)&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="279ee64e67a8a3e973e45233e8ce0a407cbaf608" translate="yes" xml:space="preserve">
          <source>Where &lt;code&gt;declarationToKeep&lt;/code&gt; has the following syntax:</source>
          <target state="translated">其中 &lt;code&gt;declarationToKeep&lt;/code&gt; 具有以下语法：</target>
        </trans-unit>
        <trans-unit id="eb06827a60ce404697c981082d7a9ff58779079e" translate="yes" xml:space="preserve">
          <source>Where can I get an HD Kotlin logo?</source>
          <target state="translated">哪里可以得到高清Kotlin标志?</target>
        </trans-unit>
        <trans-unit id="00d532d7604042ff0388fc0d8b327eb21555113f" translate="yes" xml:space="preserve">
          <source>Where can I learn more about Kotlin?</source>
          <target state="translated">哪里可以了解更多关于Kotlin的信息?</target>
        </trans-unit>
        <trans-unit id="60dc3003b0157a1bb3a0084a1e562958004b1c24" translate="yes" xml:space="preserve">
          <source>Whether a main function should be called</source>
          <target state="translated">是否应该调用主函数</target>
        </trans-unit>
        <trans-unit id="350fceb3b43601161521c9570f080755bec5203a" translate="yes" xml:space="preserve">
          <source>Whether metadata file with binary descriptors should be generated</source>
          <target state="translated">是否应该生成带有二进制描述符的元数据文件。</target>
        </trans-unit>
        <trans-unit id="b1689158ae06f88b863b7fd9b887d675c25f4bd4" translate="yes" xml:space="preserve">
          <source>Whether sourcemap file should be generated</source>
          <target state="translated">是否要生成源码图文件</target>
        </trans-unit>
        <trans-unit id="c668af734b8bab593fb373580041499369e8214b" translate="yes" xml:space="preserve">
          <source>Which versions of JVM does Kotlin target?</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="02402c88e9d606c5d9042e0b0c12d1739344aeb9" translate="yes" xml:space="preserve">
          <source>While Kotlin annotations look like Python decorators, they are far less flexible: they can generally only be used for metadata. They are pure data-containing classes, and do not contain any executable code. Some built-in annotations have an effect on the compilation process (such as &lt;code&gt;@JvmStatic&lt;/code&gt;), but custom annotations are only useful for providing metadata that can be inspected at runtime by the reflection system. We won't delve deeply into annotations here, but here is an example. The annotations on the annotation declaration itself specify what constructs the annotation may be applied to and whether it is available for runtime inspection.</source>
          <target state="translated">尽管Kotlin批注看起来像Python装饰器，但它们的灵活性要差得多：它们通常只能用于元数据。它们是纯数据类，不包含任何可执行代码。某些内置注释会影响编译过程（例如 &lt;code&gt;@JvmStatic&lt;/code&gt; ），但是自定义注释仅可用于提供可由反射系统在运行时检查的元数据。我们不会在这里深入研究批注，但这是一个示例。注释声明本身上的注释指定注释可以应用于哪些构造以及是否可用于运行时检查。</target>
        </trans-unit>
        <trans-unit id="a68a67a970d91d390715c4a5723442211582200e" translate="yes" xml:space="preserve">
          <source>While Loops</source>
          <target state="translated">While Loops</target>
        </trans-unit>
        <trans-unit id="405a10cf31f596bca1e965bfbd41f2ec04a34af9" translate="yes" xml:space="preserve">
          <source>While compilation from the console seems to be easy and clear, we should notice, that it does not scale well for bigger projects with hundreds of files and libraries. In addition to this, the command line approach does not explain to an IDE how to open such a project, where the sources are located, what dependencies are used, or how the dependencies are downloaded and so on.</source>
          <target state="translated">虽然从控制台编译似乎很容易,也很清晰,但我们应该注意到,对于有数百个文件和库的大型项目来说,它并不能很好地扩展。除此之外,命令行的方法并不能向IDE解释如何打开这样的项目,源码在哪里,使用了哪些依赖关系,或者如何下载依赖关系等等。</target>
        </trans-unit>
        <trans-unit id="6ce105800554de67a92cb5eed4d6aabf562edfb9" translate="yes" xml:space="preserve">
          <source>While doing so was not useful in this particular example, one could get interesting effects by adding an unprojected parameter type &lt;code&gt;via: Bowl&amp;lt;T&amp;gt;&lt;/code&gt;, in which case the generic type parameter of &lt;code&gt;via&lt;/code&gt; would be forced to be &quot;in-between&quot; those of &lt;code&gt;from&lt;/code&gt; and &lt;code&gt;to&lt;/code&gt;.</source>
          <target state="translated">尽管在此特定示例中这样做没有用，但可以通过添加一个未投影的参数类型 &lt;code&gt;via: Bowl&amp;lt;T&amp;gt;&lt;/code&gt; 来获得有趣的效果：Bowl &amp;lt;T&amp;gt;，在这种情况下， &lt;code&gt;via&lt;/code&gt; 的通用类型参数将被强制介于以下两者之间： &lt;code&gt;from&lt;/code&gt; 和 &lt;code&gt;to&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="74f25352205ca76e991ebde88bff4a464449ff37" translate="yes" xml:space="preserve">
          <source>While it is possible in Kotlin to dynamically create new classes at runtime or to add members to a class, it's tricky and slow, and generally discouraged. However, it is easy to dynamically inspect an object to see e.g. what properties and functions it contains and which annotations exist on them. This is called &lt;em&gt;reflection&lt;/em&gt;, and it's not very performant, so avoid it unless you really need it.</source>
          <target state="translated">尽管在Kotlin中可以在运行时动态创建新类或将成员添加到类中，但这既棘手又缓慢，并且通常不鼓励这样做。但是，可以很容易地动态检查对象以查看例如对象包含的属性和功能以及对象上存在的注释。这被称为&lt;em&gt;反射&lt;/em&gt;，它不是很有效，因此除非真正需要它，否则请避免使用它。</target>
        </trans-unit>
        <trans-unit id="00ebcc3032e38c0f9dbd212c37ea7b7605032b6f" translate="yes" xml:space="preserve">
          <source>While it is possible to use the command line, either directly or by combining it with a script file (i.e., sh or bat file), we should notice, that it does not scale well for big projects that have hundreds of files and libraries. It is then better to use the Kotlin/Native compiler with a build system, as it helps to download and cache the Kotlin/Native compiler binaries and libraries with transitive dependencies and run the compiler and tests. Kotlin/Native can use the &lt;a href=&quot;https://gradle.org&quot;&gt;Gradle&lt;/a&gt; build system through the &lt;a href=&quot;../../reference/building-mpp-with-gradle&quot;&gt;kotlin-multiplatform&lt;/a&gt; plugin.</source>
          <target state="translated">尽管可以直接使用命令行，也可以将其与脚本文件（即sh或bat文件）结合使用，但我们应该注意到，对于具有数百个文件和库的大型项目，它的伸缩性不佳。然后最好将Kotlin / Native编译器与构建系统一起使用，因为它有助于下载和缓存具有传递依赖项的Kotlin / Native编译器二进制文件和库，并运行编译器和测试。 Kotlin / Native可以通过&lt;a href=&quot;../../reference/building-mpp-with-gradle&quot;&gt;kotlin-multiplatform&lt;/a&gt;插件使用&lt;a href=&quot;https://gradle.org&quot;&gt;Gradle&lt;/a&gt;构建系统。</target>
        </trans-unit>
        <trans-unit id="ccb7cdd4315f54dc22cc954a705304d8025d4496" translate="yes" xml:space="preserve">
          <source>While it is possible to use the command line, either directly or by combining it with a script file (i.e., sh or bat file), we should notice, that it does not scale well for big projects that have hundreds of files and libraries. It is then better to use the Kotlin/Native compiler with a build system, as it helps to download and cache the Kotlin/Native compiler binaries and libraries with transitive dependencies and run the compiler and tests. Kotlin/Native can use the &lt;a href=&quot;https://gradle.org&quot;&gt;Gradle&lt;/a&gt; build system through the &lt;a href=&quot;../../reference/mpp-discover-project#multiplatform-plugin&quot;&gt;kotlin-multiplatform&lt;/a&gt; plugin.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4688c1c9cfee712dab9268862c4aa04c7274850f" translate="yes" xml:space="preserve">
          <source>While it was already possible to extract this variable just before &lt;code&gt;when&lt;/code&gt; , &lt;code&gt;val&lt;/code&gt; in &lt;code&gt;when&lt;/code&gt; has its scope properly restricted to the body of &lt;code&gt;when&lt;/code&gt;, and so preventing namespace pollution. See the full documentation on &lt;code&gt;when&lt;/code&gt;&lt;a href=&quot;control-flow#when-expression&quot;&gt;here&lt;/a&gt;.</source>
          <target state="translated">虽然它已经可能只是之前提取该变量 &lt;code&gt;when&lt;/code&gt; ， &lt;code&gt;val&lt;/code&gt; 在 &lt;code&gt;when&lt;/code&gt; 有适当的范围仅限于身体 &lt;code&gt;when&lt;/code&gt; ，所以防止命名空间污染请 &lt;code&gt;when&lt;/code&gt; &lt;a href=&quot;control-flow#when-expression&quot;&gt;此处&lt;/a&gt;查看完整的文档。</target>
        </trans-unit>
        <trans-unit id="edf1dfe40b0f0a7f06896b58374c31b6b8d9a056" translate="yes" xml:space="preserve">
          <source>While most of the language changes were already announced through other channels, like update changelogs or compiler warnings, this document summarizes them all, providing a complete reference for migration from Kotlin 1.2 to Kotlin 1.3</source>
          <target state="translated">虽然大部分的语言变化已经通过其他渠道公布了,比如更新变更日志或编译器警告,但本文档总结了所有这些变化,为从Kotlin 1.2迁移到Kotlin 1.3提供了完整的参考。</target>
        </trans-unit>
        <trans-unit id="399ba37d2ce977b9a644dbef3594c75ca535f65a" translate="yes" xml:space="preserve">
          <source>While the above solution works well for situations in which we have a corresponding header file (be this something we've defined ourselves or converted from a TypeScript header), often times we need to work with some library that does not have a header. For instance, let's say we want to use a jQuery plugin, that allows us to convert an HTML table to a nice looking navigable grid.</source>
          <target state="translated">虽然上面的解决方案对于我们有相应的头文件(无论是我们自己定义的文件还是从TypeScript头文件转换而来的文件)的情况很好,但很多时候我们需要使用一些没有头文件的库。比如说,我们想使用一个jQuery插件,它可以让我们将一个HTML表格转换为一个漂亮的可导航网格。</target>
        </trans-unit>
        <trans-unit id="7193542d5cd6b24f8c9a4e41a255c37b1a878838" translate="yes" xml:space="preserve">
          <source>While the converter is not fool-proof, it does a pretty decent job of converting most boilerplate code from Java to Kotlin. Some manual tweaking however is sometimes required.</source>
          <target state="translated">虽然转换器不是万无一失的,但它在将大多数模板代码从Java转换到Kotlin方面做得相当不错。然而,有时需要进行一些手动调整。</target>
        </trans-unit>
        <trans-unit id="d3c9392710d351a08ea5a20fd29014ffdd0dc8f8" translate="yes" xml:space="preserve">
          <source>While the dots suggest that packages are nested inside each other, that's not actually the case from a language standpoint. While it's a good idea to organize your code such that the &quot;subpackages&quot; of &lt;code&gt;content&lt;/code&gt;, such as &lt;code&gt;content.exercises&lt;/code&gt; and &lt;code&gt;content.articles&lt;/code&gt;, both contain content-related code, these three packages are unrelated from a language standpoint. However, if you use &lt;em&gt;modules&lt;/em&gt; (as defined by your build system), it is typically the case that all &quot;subpackages&quot; go in the same module, in which case symbols with &lt;a href=&quot;visibility-modifiers&quot;&gt;&lt;code&gt;internal&lt;/code&gt; visibility&lt;/a&gt; are visible throughout the subpackages.</source>
          <target state="translated">尽管这些点表明程序包彼此嵌套，但从语言角度来看，实际上并非如此。虽然最好组织代码以使 &lt;code&gt;content&lt;/code&gt; 的&amp;ldquo;子包&amp;rdquo;（例如 &lt;code&gt;content.exercises&lt;/code&gt; 和 &lt;code&gt;content.articles&lt;/code&gt; ）都包含与内容相关的代码，但是从语言角度来看，这三个包是无关的。但是，如果使用&lt;em&gt;模块&lt;/em&gt;（由构建系统定义），则通常所有&amp;ldquo;子包&amp;rdquo;都位于同一模块中，在这种情况下，具有&lt;a href=&quot;visibility-modifiers&quot;&gt; &lt;code&gt;internal&lt;/code&gt; 可见性的&lt;/a&gt;符号在整个子包中都是可见的。</target>
        </trans-unit>
        <trans-unit id="6f4289b089753c293140e137503818ca7bef2f53" translate="yes" xml:space="preserve">
          <source>While the output of the compiler does not have any dependencies or virtual machine requirements, the compiler itself and the Gradle build system require a Java 1.8 or 11 runtime. Check out the &lt;a href=&quot;https://jdk.java.net/11/&quot;&gt;https://jdk.java.net/11&lt;/a&gt; or another resource for the best JRE, OpenJDK, or JDK distribution.</source>
          <target state="translated">尽管编译器的输出没有任何依赖关系或虚拟机要求，但编译器本身和Gradle构建系统需要Java 1.8或11运行时。请查看&lt;a href=&quot;https://jdk.java.net/11/&quot;&gt;https://jdk.java.net/11&lt;/a&gt;或其他资源，以获得最佳的JRE，OpenJDK或JDK发行版。</target>
        </trans-unit>
        <trans-unit id="34d621226a511f26c66770b36d29a5c867fde780" translate="yes" xml:space="preserve">
          <source>While this example happened to use the same expression, that is not necessary - overloaded functions can do completely different things if need be (although your code can get confusing if you make functions that have very different behavior be overloads of each other).</source>
          <target state="translated">虽然这个例子碰巧使用了相同的表达式,但这是没有必要的--如果需要的话,重载函数可以做完全不同的事情(尽管如果你让行为非常不同的函数成为彼此的重载,你的代码会变得混乱)。</target>
        </trans-unit>
        <trans-unit id="79482c24120b8d210f4051a8c238d3feb29fa237" translate="yes" xml:space="preserve">
          <source>Who develops Kotlin?</source>
          <target state="translated">谁开发了Kotlin?</target>
        </trans-unit>
        <trans-unit id="6b8ca7e4bd278a327d17a1ff62cc87137c652d74" translate="yes" xml:space="preserve">
          <source>Why Kotlin/Native?</source>
          <target state="translated">为什么选择Kotlin/Native?</target>
        </trans-unit>
        <trans-unit id="5327cb3e3f7820311f240e8254b2120a882043dc" translate="yes" xml:space="preserve">
          <source>Why not just add required manifest options to all Kotlin libraries</source>
          <target state="translated">为什么不在所有的Kotlin库中添加必要的manifest选项呢?</target>
        </trans-unit>
        <trans-unit id="dc289721e21b7419371258307342fbd161fffe25" translate="yes" xml:space="preserve">
          <source>Wildcard-types</source>
          <target state="translated">Wildcard-types</target>
        </trans-unit>
        <trans-unit id="1a6e732a37845c36fcda3afa6f1ba0d920b0ebca" translate="yes" xml:space="preserve">
          <source>WindowEventHandlers</source>
          <target state="translated">WindowEventHandlers</target>
        </trans-unit>
        <trans-unit id="0be6c8c411ba30d8cffb7e90ca7acef58e77aa71" translate="yes" xml:space="preserve">
          <source>WindowLocalStorage</source>
          <target state="translated">WindowLocalStorage</target>
        </trans-unit>
        <trans-unit id="4695cae95157eec4a2f36b8710914191b7160a60" translate="yes" xml:space="preserve">
          <source>WindowOrWorkerGlobalScope</source>
          <target state="translated">WindowOrWorkerGlobalScope</target>
        </trans-unit>
        <trans-unit id="837e70bad69f4bf6bd4622325d1fb73918d9e99b" translate="yes" xml:space="preserve">
          <source>WindowSessionStorage</source>
          <target state="translated">WindowSessionStorage</target>
        </trans-unit>
        <trans-unit id="7d22ecce0385c959845f551d5a3b5ab183398dfa" translate="yes" xml:space="preserve">
          <source>Windowed</source>
          <target state="translated">Windowed</target>
        </trans-unit>
        <trans-unit id="628596087f96fc1704310fa20e91f817ad0907ae" translate="yes" xml:space="preserve">
          <source>Windows (mingw x86_64, x86)</source>
          <target state="translated">Windows (mingw x86_64,x86)</target>
        </trans-unit>
        <trans-unit id="3501a24aebe2c74160390742479cffed6294f769" translate="yes" xml:space="preserve">
          <source>Windows targets require a Windows host;</source>
          <target state="translated">Windows目标需要一个Windows主机。</target>
        </trans-unit>
        <trans-unit id="ce9d44e441b23e1629b147f917e9518ae0913959" translate="yes" xml:space="preserve">
          <source>Windows: &lt;code&gt;libnative_api.h&lt;/code&gt;, &lt;code&gt;libnative_symbols.def&lt;/code&gt; and &lt;code&gt;libnative.dll&lt;/code&gt;</source>
          <target state="translated">Windows： &lt;code&gt;libnative_api.h&lt;/code&gt; ， &lt;code&gt;libnative_symbols.def&lt;/code&gt; 和 &lt;code&gt;libnative.dll&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="e1a374d672ab75b4235e338c90ddfcf6afbecca5" translate="yes" xml:space="preserve">
          <source>With &lt;a href=&quot;https://plugins.jetbrains.com/plugin/10081-edutools&quot;&gt;EduTools&lt;/a&gt; plugin you can learn and teach Kotlin through code practicing tasks. It is available both in &lt;a href=&quot;https://developer.android.com/studio&quot;&gt;Android Studio&lt;/a&gt; and &lt;a href=&quot;https://www.jetbrains.com/idea/&quot;&gt;IntelliJ IDEA&lt;/a&gt;. This tutorial describes course creation for an educator. If you want to use EduTools plugin for learning, read &lt;a href=&quot;edu-tools-learner&quot;&gt;&quot;Learning Kotlin with EduTools plugin&quot;&lt;/a&gt;.</source>
          <target state="translated">使用&lt;a href=&quot;https://plugins.jetbrains.com/plugin/10081-edutools&quot;&gt;EduTools&lt;/a&gt;插件，您可以通过代码练习任务来学习和教导Kotlin。它在&lt;a href=&quot;https://developer.android.com/studio&quot;&gt;Android Studio&lt;/a&gt;和&lt;a href=&quot;https://www.jetbrains.com/idea/&quot;&gt;IntelliJ IDEA中&lt;/a&gt;都可用。本教程描述了为教育者创建课程的过程。如果要使用EduTools插件进行学习，请阅读&lt;a href=&quot;edu-tools-learner&quot;&gt;&amp;ldquo;&lt;/a&gt;使用EduTools插件学习Kotlin&amp;rdquo;。</target>
        </trans-unit>
        <trans-unit id="d7e4afdf3ca90295d086cf8bfcf9a9049903e7a2" translate="yes" xml:space="preserve">
          <source>With &lt;a href=&quot;https://plugins.jetbrains.com/plugin/10081-edutools&quot;&gt;EduTools&lt;/a&gt; plugin you can learn and teach Kotlin through code practicing tasks. It is available both in &lt;a href=&quot;https://developer.android.com/studio&quot;&gt;Android Studio&lt;/a&gt; and &lt;a href=&quot;https://www.jetbrains.com/idea/&quot;&gt;IntelliJ IDEA&lt;/a&gt;. This tutorial describes the interactive learning. If you want to use the EduTools plugin for teaching, read &lt;a href=&quot;edu-tools-educator&quot;&gt;&quot;Teaching Kotlin with EduTools plugin&quot;&lt;/a&gt;.</source>
          <target state="translated">使用&lt;a href=&quot;https://plugins.jetbrains.com/plugin/10081-edutools&quot;&gt;EduTools&lt;/a&gt;插件，您可以通过代码练习任务来学习和教导Kotlin。它在&lt;a href=&quot;https://developer.android.com/studio&quot;&gt;Android Studio&lt;/a&gt;和&lt;a href=&quot;https://www.jetbrains.com/idea/&quot;&gt;IntelliJ IDEA中&lt;/a&gt;都可用。本教程描述了交互式学习。如果要使用EduTools插件进行教学，请阅读&lt;a href=&quot;edu-tools-educator&quot;&gt;&amp;ldquo;使用EduTools插件教Kotlin&amp;rdquo;&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="91c32707acceb3a92d660aaa2664e3b3b359ee59" translate="yes" xml:space="preserve">
          <source>With &lt;code&gt;let&lt;/code&gt;, you can rewrite it:</source>
          <target state="translated">使用 &lt;code&gt;let&lt;/code&gt; ，您可以重写它：</target>
        </trans-unit>
        <trans-unit id="af688b954f4540e476c35b0f74f11c5204100c85" translate="yes" xml:space="preserve">
          <source>With &lt;code&gt;lisa&lt;/code&gt; and &lt;code&gt;anne&lt;/code&gt; from the infix example, you can now do:</source>
          <target state="translated">使用infix示例中的 &lt;code&gt;lisa&lt;/code&gt; 和 &lt;code&gt;anne&lt;/code&gt; ，现在可以执行以下操作：</target>
        </trans-unit>
        <trans-unit id="c2bc622686f7933d6457fe256aa33e7162dce61a" translate="yes" xml:space="preserve">
          <source>With Gradle Kotlin DSL, configure source sets with &lt;code&gt;java.sourceSets { ... }&lt;/code&gt; instead.</source>
          <target state="translated">使用Gradle Kotlin DSL，改为使用 &lt;code&gt;java.sourceSets { ... }&lt;/code&gt; 配置源集。</target>
        </trans-unit>
        <trans-unit id="bf21fbd8ac94a33fdcdb64a0972b9b5c1c2c5132" translate="yes" xml:space="preserve">
          <source>With Gradle metadata enabled, an additional 'root' publication named &lt;code&gt;kotlinMultiplatform&lt;/code&gt; is added to the project's publications. The default artifact ID of this publication matches the project name without any additional suffix. To configure this publication, access it via the &lt;code&gt;publishing { ... }&lt;/code&gt; DSL of the &lt;code&gt;maven-publish&lt;/code&gt; plugin:</source>
          <target state="translated">启用Gradle元数据后， &lt;code&gt;kotlinMultiplatform&lt;/code&gt; 名为kotlinMultiplatform的其他&amp;ldquo;根&amp;rdquo;出版物添加到项目的出版物中。该出版物的默认工件ID与项目名称匹配，没有任何其他后缀。要配置此发布，请通过 &lt;code&gt;maven-publish&lt;/code&gt; 插件的 &lt;code&gt;publishing { ... }&lt;/code&gt; DSL 访问它：</target>
        </trans-unit>
        <trans-unit id="cfc45b937026fd4fbaf26509635a71da2f380172" translate="yes" xml:space="preserve">
          <source>With Kotlin 1.3, it is possible to mark members of a &lt;code&gt;companion&lt;/code&gt; object of interfaces with annotations &lt;code&gt;@JvmStatic&lt;/code&gt; and &lt;code&gt;@JvmField&lt;/code&gt;. In the classfile, such members will be lifted to the corresponding interface and marked as &lt;code&gt;static&lt;/code&gt;.</source>
          <target state="translated">使用Kotlin 1.3，可以使用注解 &lt;code&gt;@JvmStatic&lt;/code&gt; 和 &lt;code&gt;@JvmField&lt;/code&gt; 标记接口的 &lt;code&gt;companion&lt;/code&gt; 对象的成员。在类文件中，此类成员将被提升到相应的接口并标记为 &lt;code&gt;static&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="5b6d7af5fe3aafc8094b8a2cfd86e6ef8192a99f" translate="yes" xml:space="preserve">
          <source>With Kotlin &lt;a href=&quot;../../reference/multiplatform&quot;&gt;multiplatform&lt;/a&gt; projects, it is possible to share the same Kotlin code between all the supported platforms. Check out the tutorial on &lt;a href=&quot;mpp-ios-android&quot;&gt;sharing Kotlin code between iOS and Android&lt;/a&gt; or have a look at how to build your own &lt;a href=&quot;../multiplatform-library&quot;&gt;multiplatform library&lt;/a&gt;.</source>
          <target state="translated">使用Kotlin &lt;a href=&quot;../../reference/multiplatform&quot;&gt;多平台&lt;/a&gt;项目，可以在所有受支持的平台之间共享相同的Kotlin代码。查看有关&lt;a href=&quot;mpp-ios-android&quot;&gt;在iOS和Android之间共享Kotlin代码&lt;/a&gt;的教程，或者看看如何构建自己的&lt;a href=&quot;../multiplatform-library&quot;&gt;多平台库&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="ec7fe3c48a3cadc6919466836bffd195ba2a63be" translate="yes" xml:space="preserve">
          <source>With Kotlin Multiplatform libraries, you can reuse the multiplatform logic in common and platform-specific code. Common code can rely on a set of libraries that cover everyday tasks such as &lt;a href=&quot;http://ktor.io/clients/http-client/multiplatform.html&quot;&gt;HTTP&lt;/a&gt;, &lt;a href=&quot;https://github.com/Kotlin/kotlinx.serialization&quot;&gt;serialization&lt;/a&gt;, and &lt;a href=&quot;https://github.com/Kotlin/kotlinx.coroutines&quot;&gt;managing coroutines&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="adbab2d42979bafe508a0df0d9f59300200f67c7" translate="yes" xml:space="preserve">
          <source>With Kotlin Multiplatform, spend less time on writing and maintaining the same code for &lt;a href=&quot;mpp-supported-platforms&quot;&gt;different platforms&lt;/a&gt; &amp;ndash; just share it using the mechanisms Kotlin provides:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3962fde44c4aec537b82dcd2abfc22db4cc626fa" translate="yes" xml:space="preserve">
          <source>With a value of 1, walker visits only the origin directory and all its immediate children, with a value of 2 also grandchildren, etc.</source>
          <target state="translated">值为1时,行者只访问原籍目录及其所有直系子弟,值为2时,还访问孙辈等。</target>
        </trans-unit>
        <trans-unit id="ef51393788d21d74c116e9c29eea336ed0a6d471" translate="yes" xml:space="preserve">
          <source>With callbacks, the idea is to pass one function as a parameter to another function, and have this one invoked once the process has completed.</source>
          <target state="translated">对于回调,我们的想法是将一个函数作为参数传递给另一个函数,一旦进程完成,这个函数就会被调用。</target>
        </trans-unit>
        <trans-unit id="016040b5eae4bf27f5a939a1b5c8156662185437" translate="yes" xml:space="preserve">
          <source>With collections and functions, polymorphism becomes more complicated - see the section on &lt;a href=&quot;generics&quot;&gt;generics&lt;/a&gt;.</source>
          <target state="translated">使用集合和函数，多态会变得更加复杂-请参见有关&lt;a href=&quot;generics&quot;&gt;泛型&lt;/a&gt;的部分。</target>
        </trans-unit>
        <trans-unit id="c1dcb9e12e7f211f30c8a5176d8ae68de49c58b9" translate="yes" xml:space="preserve">
          <source>With either version of the import, you can now simply do:</source>
          <target state="translated">无论是哪个版本的导入,你现在都可以简单地做到。</target>
        </trans-unit>
        <trans-unit id="fe95a6fd3800d1f0d89afcda519d105e6e6110b2" translate="yes" xml:space="preserve">
          <source>With function literals, local functions and object expression, functions can be nested in Kotlin. Qualified &lt;em&gt;return&lt;/em&gt;s allow us to return from an outer function. The most important use case is returning from a lambda expression. Recall that when we write this:</source>
          <target state="translated">使用函数文字，局部函数和对象表达式，可以将函数嵌套在Kotlin中。合格的&lt;em&gt;return&lt;/em&gt;允许我们从外部函数返回。最重要的用例是从lambda表达式返回。回想一下，当我们编写此代码时：</target>
        </trans-unit>
        <trans-unit id="eb6ed75ff29820dbdcda23941139d4c1d4ba7dd2" translate="yes" xml:space="preserve">
          <source>With named arguments we can make the code much more readable:</source>
          <target state="translated">通过命名参数,我们可以使代码更易读。</target>
        </trans-unit>
        <trans-unit id="3450c7c71d6bf1ddf49a4323aca70311d456d430" translate="yes" xml:space="preserve">
          <source>With that, our project should now build and produce the corresponding artifacts.</source>
          <target state="translated">有了这些,我们的项目现在应该构建并产生相应的工件。</target>
        </trans-unit>
        <trans-unit id="355ad4d87e7870b0c272b188aa3ef65d4dc920f9" translate="yes" xml:space="preserve">
          <source>With the &lt;a href=&quot;https://plugins.jetbrains.com/plugin/10081-edutools&quot;&gt;EduTools plugin&lt;/a&gt;, available both in &lt;a href=&quot;https://developer.android.com/studio&quot;&gt;Android Studio&lt;/a&gt; and &lt;a href=&quot;https://www.jetbrains.com/idea/&quot;&gt;IntelliJ IDEA&lt;/a&gt;, you can learn Kotlin through code practicing tasks.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="36b14af153f14d3f9734df37394a46678fa4ba5c" translate="yes" xml:space="preserve">
          <source>With the &lt;a href=&quot;https://plugins.jetbrains.com/plugin/10081-edutools&quot;&gt;EduTools plugin&lt;/a&gt;, available both in &lt;a href=&quot;https://developer.android.com/studio&quot;&gt;Android Studio&lt;/a&gt; and &lt;a href=&quot;https://www.jetbrains.com/idea/&quot;&gt;IntelliJ IDEA&lt;/a&gt;, you can teach Kotlin through code practicing tasks. Take a look at the &lt;a href=&quot;https://www.jetbrains.com/help/education/educator-start-guide.html?section=Kotlin&quot;&gt;Educator Start Guide&lt;/a&gt; to learn how to create a simple Kotlin course that includes a set of programming tasks and integrated tests.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f5382fb55641e05a034b3ea5d0c0d4be768aee31" translate="yes" xml:space="preserve">
          <source>With the &lt;code&gt;PropertyDelegateProvider&lt;/code&gt; interface from the standard library, you can create delegate providers without creating new classes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7f45b301e2a74f1dd5893d4a531ceba47efa69ee" translate="yes" xml:space="preserve">
          <source>With the &lt;code&gt;kotlin-multiplatform&lt;/code&gt; plugin &lt;strong&gt;source&lt;/strong&gt;&lt;strong&gt;sets&lt;/strong&gt; are also used to group sources but source files for different platforms are located in different source sets. For each declared target two source sets are created: &lt;code&gt;&amp;lt;target-name&amp;gt;Main&lt;/code&gt; and &lt;code&gt;&amp;lt;target-name&amp;gt;Test&lt;/code&gt; containing product and test sources for this platform. Common for all platforms sources are located in &lt;code&gt;commonMain&lt;/code&gt; and &lt;code&gt;commonTest&lt;/code&gt; source sets created by default. More information about source sets can be found &lt;a href=&quot;../building-mpp-with-gradle#configuring-source-sets&quot;&gt;here&lt;/a&gt;.</source>
          <target state="translated">使用 &lt;code&gt;kotlin-multiplatform&lt;/code&gt; 插件时，&lt;strong&gt;源&lt;/strong&gt;&lt;strong&gt;集&lt;/strong&gt;也用于对源进行分组，但是不同平台的源文件位于不同的源集中。对于每个声明的目标，将创建两个源集： &lt;code&gt;&amp;lt;target-name&amp;gt;Main&lt;/code&gt; 和 &lt;code&gt;&amp;lt;target-name&amp;gt;Test&lt;/code&gt; ,其中包含此平台的产品和测试源。所有平台的通用源均位于默认创建的 &lt;code&gt;commonMain&lt;/code&gt; 和 &lt;code&gt;commonTest&lt;/code&gt; 源集中。有关源集的更多信息，请参见&lt;a href=&quot;../building-mpp-with-gradle#configuring-source-sets&quot;&gt;此处&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="c5d94234e74f15ed4145669bdb5e37f9dfb14ae3" translate="yes" xml:space="preserve">
          <source>With the &lt;code&gt;kotlin-multiplatform&lt;/code&gt; plugin a compilation always produces a &lt;code&gt;*.klib&lt;/code&gt; file. A separate &lt;code&gt;binaries&lt;/code&gt; block is used to configure what final native binaries should be produced by each target. Each binary can be configured independently including linker options, executable entry point etc.</source>
          <target state="translated">使用 &lt;code&gt;kotlin-multiplatform&lt;/code&gt; 插件，编译始终会生成 &lt;code&gt;*.klib&lt;/code&gt; 文件。一个单独的 &lt;code&gt;binaries&lt;/code&gt; 块用于配置每个目标应生成哪些最终本机二进制文件。每个二进制文件都可以独立配置，包括链接器选项，可执行入口点等。</target>
        </trans-unit>
        <trans-unit id="c6cb3a91147cfe093062a0839b721e658dabc4bd" translate="yes" xml:space="preserve">
          <source>With the &lt;code&gt;kotlin-multiplatform&lt;/code&gt; plugin interops are configured as a part of a compilation (see details &lt;a href=&quot;../building-mpp-with-gradle#cinterop-support&quot;&gt;here&lt;/a&gt;). The rest of an interop configuration is the same as for the &lt;code&gt;kotlin-platform-native&lt;/code&gt; plugin.</source>
          <target state="translated">使用 &lt;code&gt;kotlin-multiplatform&lt;/code&gt; 插件，互操作被配置为编译的一部分（请参阅&lt;a href=&quot;../building-mpp-with-gradle#cinterop-support&quot;&gt;此处的&lt;/a&gt;详细信息）。互操作配置的其余部分与 &lt;code&gt;kotlin-platform-native&lt;/code&gt; 插件相同。</target>
        </trans-unit>
        <trans-unit id="1706d3b6b7ce15bdbf71dc7c9e04a857f530061f" translate="yes" xml:space="preserve">
          <source>With the &lt;code&gt;kotlin-multiplatform&lt;/code&gt; plugin target platforms can be added into a project using special methods available in the &lt;code&gt;kotlin&lt;/code&gt; extension. Each method adds into a project one &lt;strong&gt;target&lt;/strong&gt; which can be accessed using the &lt;code&gt;targets&lt;/code&gt; property. Each target can be configured independently including output kinds, additional compiler options etc. See details about targets at the &lt;a href=&quot;../building-mpp-with-gradle#setting-up-targets&quot;&gt;corresponding page&lt;/a&gt;.</source>
          <target state="translated">使用 &lt;code&gt;kotlin-multiplatform&lt;/code&gt; 插件，可以使用 &lt;code&gt;kotlin&lt;/code&gt; 扩展中提供的特殊方法将目标平台添加到项目中。每种方法都将一个&lt;strong&gt;目标&lt;/strong&gt;添加到项目中，可以使用 &lt;code&gt;targets&lt;/code&gt; 属性对其进行访问。可以独立配置每个目标，包括输出种类，其他编译器选项等。有关目标的详细信息，请参见&lt;a href=&quot;../building-mpp-with-gradle#setting-up-targets&quot;&gt;相应页面&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="71022b4d02eeeda0e92ce39399dff9342c3334b7" translate="yes" xml:space="preserve">
          <source>With the &lt;code&gt;kotlin-platform-native&lt;/code&gt; plugin a set of target platforms is specified as a list in properties of the main component:</source>
          <target state="translated">使用 &lt;code&gt;kotlin-platform-native&lt;/code&gt; 插件，可以在主要组件的属性中将一组目标平台指定为列表：</target>
        </trans-unit>
        <trans-unit id="6a03f6034b00496a7bad530da3196155a72cc860" translate="yes" xml:space="preserve">
          <source>With the &lt;code&gt;kotlin-platform-native&lt;/code&gt; plugin dependencies are configured in a traditional for Gradle way by grouping them into configurations using the project &lt;code&gt;dependencies&lt;/code&gt; block:</source>
          <target state="translated">使用 &lt;code&gt;kotlin-platform-native&lt;/code&gt; 插件，可以通过使用项目 &lt;code&gt;dependencies&lt;/code&gt; 块将它们分组为配置，从而以传统的Gradle方式配置依赖项：</target>
        </trans-unit>
        <trans-unit id="e33e92feed8df1d895d9a97b45aacf36671d526c" translate="yes" xml:space="preserve">
          <source>With the &lt;code&gt;kotlin-platform-native&lt;/code&gt; plugin interop with a native library can be declared in component dependencies:</source>
          <target state="translated">使用 &lt;code&gt;kotlin-platform-native&lt;/code&gt; 插件，可以在组件依赖项中声明与本机库的互操作：</target>
        </trans-unit>
        <trans-unit id="a97bf25e776050662c47b29cee8cd98d22ea2c1d" translate="yes" xml:space="preserve">
          <source>With the &lt;code&gt;kotlin-platform-native&lt;/code&gt; plugin output kinds are specified as a list in properties of a component:</source>
          <target state="translated">使用 &lt;code&gt;kotlin-platform-native&lt;/code&gt; 插件时，输出类型被指定为组件属性中的列表：</target>
        </trans-unit>
        <trans-unit id="32e186967f7559f8d4cf421fcfd2faf96d838898" translate="yes" xml:space="preserve">
          <source>With the &lt;code&gt;kotlin-platform-native&lt;/code&gt; plugin source sets are used to separate test and product sources. Also you can specify different sources for different platforms in the same source set:</source>
          <target state="translated">借助 &lt;code&gt;kotlin-platform-native&lt;/code&gt; 插件，源集用于分离测试和产品源。您也可以在同一源集中为不同平台指定不同的源：</target>
        </trans-unit>
        <trans-unit id="7fa674450fbd80d59d43844df0d5a16d3f6b263d" translate="yes" xml:space="preserve">
          <source>With the coroutine debugger, you can:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a5c6c878f4a74b6cd56b16a6f707da3f34b03dce" translate="yes" xml:space="preserve">
          <source>With the help of IntelliJ IDEA's &lt;em&gt;Goto Declaration&lt;/em&gt; or compiler errors we see the following declarations for our C functions:</source>
          <target state="translated">借助IntelliJ IDEA的&lt;em&gt;Goto声明&lt;/em&gt;或编译器错误，我们为C函数看到了以下声明：</target>
        </trans-unit>
        <trans-unit id="cf252d7abb4fe418f54b8621d262b977ba904b60" translate="yes" xml:space="preserve">
          <source>With the help of IntelliJ IDEA's &lt;em&gt;Goto Declaration&lt;/em&gt; or compiler errors we see the following generated API for our C functions, &lt;code&gt;struct&lt;/code&gt;, and &lt;code&gt;union&lt;/code&gt;:</source>
          <target state="translated">借助IntelliJ IDEA的&lt;em&gt;Goto声明&lt;/em&gt;或编译器错误，我们看到了为C函数 &lt;code&gt;struct&lt;/code&gt; 和 &lt;code&gt;union&lt;/code&gt; 生成的以下API ：</target>
        </trans-unit>
        <trans-unit id="874119f71c620e91c1bb9c2e75fd174caab63b63" translate="yes" xml:space="preserve">
          <source>With the help of IntelliJ IDEA's &lt;em&gt;Goto Declaration&lt;/em&gt; or compiler errors we see the following generated API for our C functions:</source>
          <target state="translated">借助IntelliJ IDEA的&lt;em&gt;Goto声明&lt;/em&gt;或编译器错误，我们看到了为C函数生成的以下API：</target>
        </trans-unit>
        <trans-unit id="55c0b9fe68cd1e4b20ebebcee0ed1689356c0a07" translate="yes" xml:space="preserve">
          <source>With these helpers, the part of code for reading input becomes simpler, closely following the input specification in the problem statement line by line:</source>
          <target state="translated">有了这些助手,读取输入的部分代码就变得简单了,紧紧地按照问题语句中的输入规范一行一行地编写。</target>
        </trans-unit>
        <trans-unit id="a228c17a745863a462bf780050c335cd1bf004e4" translate="yes" xml:space="preserve">
          <source>With these two interfaces, we can make a more versatile fruit bowl. The bowl itself needs to both produce and consume its generic type, so it can neither be covariant nor contravariant, but it can implement our covariant and contravariant interfaces:</source>
          <target state="translated">有了这两个接口,我们就可以做出一个更通用的果碗。果碗本身既要生产也要消耗它的通用类型,所以它既不能是共变的,也不能是反变的,但是它可以实现我们的共变和反变接口。</target>
        </trans-unit>
        <trans-unit id="4a7d204c839bbeda2e10e199023fa5b9c64dcb76" translate="yes" xml:space="preserve">
          <source>With this external declaration, you can call &lt;code&gt;myFunWithOptionalArgs&lt;/code&gt; with one required argument and two optional arguments, where the default values are calculated by the JavaScript implementation of &lt;code&gt;myFunWithOptionalArgs&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="72d67501a892da363116927ae13a84e4aecbce70" translate="yes" xml:space="preserve">
          <source>With this mechanism, a common source set defines an &lt;em&gt;expected declaration&lt;/em&gt;, and platform source sets must provide the &lt;em&gt;actual declaration&lt;/em&gt; that corresponds to the expected declaration. This works for most Kotlin declarations, such as functions, classes, interfaces, enumerations, properties, and annotations.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f9928576b159a395a58ce4f2d7b6c66f40874468" translate="yes" xml:space="preserve">
          <source>With this, we can then access any of the functionality defined inside &lt;code&gt;customerBL&lt;/code&gt;.</source>
          <target state="translated">这样，我们便可以访问 &lt;code&gt;customerBL&lt;/code&gt; 内部定义的任何功能。</target>
        </trans-unit>
        <trans-unit id="8dacc9ec11c6c308f4e37da6d574002e02a0ff3a" translate="yes" xml:space="preserve">
          <source>Without the curly braces, only the first line is a part of the body. Indentation in Kotlin matters only for human readers, so the second print is outside the if and will always be executed.</source>
          <target state="translated">没有大括号,只有第一行是正文的一部分。Kotlin中的缩进只对人类读者重要,所以第二行打印在if之外,并且会一直执行。</target>
        </trans-unit>
        <trans-unit id="d2ecf10500acdd56e5aa15cdc3d632f4d1b83484" translate="yes" xml:space="preserve">
          <source>Without this ability to intercept the binding between the property and its delegate, to achieve the same functionality you'd have to pass the property name explicitly, which isn't very convenient:</source>
          <target state="translated">如果没有这个能力来截取属性和它的委托人之间的绑定,要实现同样的功能,你就必须显式传递属性名,这不是很方便。</target>
        </trans-unit>
        <trans-unit id="99edd8c8e615e373739d2cdd38a8942b8a573113" translate="yes" xml:space="preserve">
          <source>Worker</source>
          <target state="translated">Worker</target>
        </trans-unit>
        <trans-unit id="a502b8bb9786901c6dc61e82d98c92b4b73ae927" translate="yes" xml:space="preserve">
          <source>WorkerBoundReference</source>
          <target state="translated">WorkerBoundReference</target>
        </trans-unit>
        <trans-unit id="74a0d635bad8cb921832f022e80f37a47e5b135d" translate="yes" xml:space="preserve">
          <source>WorkerLocation</source>
          <target state="translated">WorkerLocation</target>
        </trans-unit>
        <trans-unit id="315e6d0000af41369aa07e54a100988d3fd17dee" translate="yes" xml:space="preserve">
          <source>WorkerNavigator</source>
          <target state="translated">WorkerNavigator</target>
        </trans-unit>
        <trans-unit id="2c80abf6e395bd6f326cb30a261f19ee445cba02" translate="yes" xml:space="preserve">
          <source>WorkerOptions</source>
          <target state="translated">WorkerOptions</target>
        </trans-unit>
        <trans-unit id="87bb291b389446f9344ad088d8d62a7a62a19eca" translate="yes" xml:space="preserve">
          <source>WorkerType</source>
          <target state="translated">WorkerType</target>
        </trans-unit>
        <trans-unit id="b6ef3acd0f91c0c6e2a6bad2692c8aa84dfc4c73" translate="yes" xml:space="preserve">
          <source>Workers</source>
          <target state="translated">Workers</target>
        </trans-unit>
        <trans-unit id="4854bbfffb40975ef729e9def93b58f75765479a" translate="yes" xml:space="preserve">
          <source>Workers with message passing</source>
          <target state="translated">有信息传递的工人</target>
        </trans-unit>
        <trans-unit id="d7a484140f5f9f7f5427e1f2c44dbfc1d3ad9eea" translate="yes" xml:space="preserve">
          <source>Workflow</source>
          <target state="translated">Workflow</target>
        </trans-unit>
        <trans-unit id="7323cd213254c74db3a887f36bfadb481e7d4c0e" translate="yes" xml:space="preserve">
          <source>Working on all platforms is an explicit goal for Kotlin, but we see it as a premise to a much more important goal: sharing code between platforms. With support for JVM, Android, JavaScript, iOS, Linux, Windows, Mac and even embedded systems like STM32, Kotlin can handle any and all components of a modern application. And this brings the invaluable benefit of reuse for code and expertise, saving the effort for tasks more challenging than implementing everything twice or multiple times.</source>
          <target state="translated">在所有平台上工作是Kotlin的一个明确目标,但我们认为这是实现一个更重要目标的前提:平台之间共享代码。由于支持JVM、Android、JavaScript、iOS、Linux、Windows、Mac甚至是STM32等嵌入式系统,Kotlin可以处理现代应用程序的任何和所有组件。而这带来了代码和专业技术重用的宝贵好处,省去了比两次或多次实现所有东西更具挑战性的任务。</target>
        </trans-unit>
        <trans-unit id="f538870f3ed8ccb71b1f28d4023b06274de86076" translate="yes" xml:space="preserve">
          <source>Working with Build Tools</source>
          <target state="translated">使用构建工具</target>
        </trans-unit>
        <trans-unit id="4c5d22ef62b4e454bd0bf1e1374aa13390ad7ed1" translate="yes" xml:space="preserve">
          <source>Working with C strings</source>
          <target state="translated">使用C弦</target>
        </trans-unit>
        <trans-unit id="9ac89fee8e06569c4ebc756f83cddf2bbd9a8ca8" translate="yes" xml:space="preserve">
          <source>Working with Enum Constants</source>
          <target state="translated">使用Enum常量</target>
        </trans-unit>
        <trans-unit id="1f8482b2bf142fad82a2f635e71a135183f56a5d" translate="yes" xml:space="preserve">
          <source>Working with JavaScript</source>
          <target state="translated">使用JavaScript</target>
        </trans-unit>
        <trans-unit id="8fc3285c1f9933f649e39499a1f3946c5619cf72" translate="yes" xml:space="preserve">
          <source>Working with Kotlin and JavaScript Modules</source>
          <target state="translated">使用Kotlin和JavaScript模块</target>
        </trans-unit>
        <trans-unit id="9a49aac8293420ff01c5e9c031ff773d05799074" translate="yes" xml:space="preserve">
          <source>Working with nulls</source>
          <target state="translated">处理空值</target>
        </trans-unit>
        <trans-unit id="e5c0c5bddfae833279acedcc9a537af19daf0f06" translate="yes" xml:space="preserve">
          <source>Working with tasks</source>
          <target state="translated">工作任务</target>
        </trans-unit>
        <trans-unit id="7d46e00971b365b4ef3386294882d7496a7f75ed" translate="yes" xml:space="preserve">
          <source>Working with the Command Line Compiler</source>
          <target state="translated">使用命令行编译器</target>
        </trans-unit>
        <trans-unit id="f2a7db7b02d37c7f54b499213bb3a991f17a1744" translate="yes" xml:space="preserve">
          <source>Working with the strings</source>
          <target state="translated">弦的工作</target>
        </trans-unit>
        <trans-unit id="075cb3c4378fe512dd51ed618315bfebed19ab49" translate="yes" xml:space="preserve">
          <source>Worksheets automatically get access to classes and functions from the module where they reside.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="298b3785e2ae406d29010843be91172dd4b7a909" translate="yes" xml:space="preserve">
          <source>Wraps the specified &lt;a href=&quot;timer-task#kotlin.concurrent%24timerTask%28kotlin.Function1%28%28java.util.TimerTask%2C+kotlin.Unit%29%29%29%2Faction&quot;&gt;action&lt;/a&gt; in a &lt;a href=&quot;http://docs.oracle.com/javase/8/docs/api/java/util/TimerTask.html&quot;&gt;TimerTask&lt;/a&gt;.</source>
          <target state="translated">将指定的&lt;a href=&quot;timer-task#kotlin.concurrent%24timerTask%28kotlin.Function1%28%28java.util.TimerTask%2C+kotlin.Unit%29%29%29%2Faction&quot;&gt;动作&lt;/a&gt;包装在&lt;a href=&quot;http://docs.oracle.com/javase/8/docs/api/java/util/TimerTask.html&quot;&gt;TimerTask中&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="bc7e6a2c63b3a339c10a75fe3c57e0e79aab2702" translate="yes" xml:space="preserve">
          <source>Wraps the specified &lt;a href=&quot;timer-task#kotlin.concurrent%24timerTask(kotlin.Function1((java.util.TimerTask,%20kotlin.Unit)))/action&quot;&gt;action&lt;/a&gt; in a &lt;a href=&quot;https://docs.oracle.com/javase/8/docs/api/java/util/TimerTask.html&quot;&gt;TimerTask&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2525837a1ad8d7e8a649a7a5e6c45999c5553523" translate="yes" xml:space="preserve">
          <source>Write &lt;strong&gt;full, type-safe React applications with Kotlin/JS&lt;/strong&gt; using the &lt;a href=&quot;https://github.com/JetBrains/kotlin-wrappers&quot;&gt;&lt;code&gt;kotlin-wrappers&lt;/code&gt;&lt;/a&gt; provided by JetBrains, which provide convenient abstractions and deep integrations for one of the most popular JavaScript frameworks. &lt;code&gt;kotlin-wrappers&lt;/code&gt; also provides support for a select number of adjacent technologies like &lt;code&gt;react-redux&lt;/code&gt;, &lt;code&gt;react-router&lt;/code&gt;, or &lt;code&gt;styled-components&lt;/code&gt;. Interoperability with the JavaScript ecosystem also means that you can also use third-party React components and component libraries.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ff7df02929ed6ce55a8f16204596caaf82c53075" translate="yes" xml:space="preserve">
          <source>Write operations</source>
          <target state="translated">写操作</target>
        </trans-unit>
        <trans-unit id="16f06037425e5570c7fb6c4cb0b8e9b025bb037c" translate="yes" xml:space="preserve">
          <source>Write the application</source>
          <target state="translated">编写应用程序</target>
        </trans-unit>
        <trans-unit id="5c829704c2a3eee8b986648971ed06cb5f976567" translate="yes" xml:space="preserve">
          <source>Write your code in the scratch and click &lt;strong&gt;Run&lt;/strong&gt;. The execution results will appear opposite the lines of your code.</source>
          <target state="translated">从头开始编写代码，然后单击&lt;strong&gt;&amp;ldquo;运行&amp;rdquo;&lt;/strong&gt;。执行结果将出现在代码行的对面。</target>
        </trans-unit>
        <trans-unit id="d5a79e41535865d72222565d75328e9ec50eab15" translate="yes" xml:space="preserve">
          <source>Writeable Objective-C properties overriding read-only properties of the superclass are represented as &lt;code&gt;setFoo()&lt;/code&gt; method for the property &lt;code&gt;foo&lt;/code&gt;. Same goes for a protocol's read-only properties that are implemented as mutable.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b96451968bc66bdb3ac0027e8c45718ed0567089" translate="yes" xml:space="preserve">
          <source>Writing output in Kotlin is usually straightforward with &lt;a href=&quot;../../api/latest/jvm/stdlib/kotlin.io/println&quot;&gt;println(&amp;hellip;)&lt;/a&gt; calls and using Kotlin's &lt;a href=&quot;../reference/basic-types#string-templates&quot;&gt;string templates&lt;/a&gt;. However, care must be taken when output contains on order of 10&lt;sup&gt;5&lt;/sup&gt; lines or more. Issuing so many &lt;code&gt;println&lt;/code&gt; calls is too slow, since the output in Kotlin is automatically flushed after each line. A faster way to write many lines from an array or a list is using &lt;a href=&quot;../../api/latest/jvm/stdlib/kotlin.collections/join-to-string&quot;&gt;joinToString()&lt;/a&gt; function with &lt;code&gt;&quot;\n&quot;&lt;/code&gt; as the separator, like this:</source>
          <target state="translated">通常，通过&lt;a href=&quot;../../api/latest/jvm/stdlib/kotlin.io/println&quot;&gt;println（...）&lt;/a&gt;调用和使用Kotlin的&lt;a href=&quot;../reference/basic-types#string-templates&quot;&gt;字符串模板&lt;/a&gt;，可以很容易地在Kotlin中编写输出。但是，当输出包含10 &lt;sup&gt;5&lt;/sup&gt;行或更多行时，必须小心。发出这么多 &lt;code&gt;println&lt;/code&gt; 调用太慢了，因为Kotlin中的输出在每一行之后都会自动刷新。从数组或列表写很多行的更快方法是使用&lt;a href=&quot;../../api/latest/jvm/stdlib/kotlin.collections/join-to-string&quot;&gt;joinToString（）&lt;/a&gt;函数，以 &lt;code&gt;&quot;\n&quot;&lt;/code&gt; 作为分隔符，如下所示：</target>
        </trans-unit>
        <trans-unit id="ab2816d4bb9622be7220e5163963f6a9c487ee4d" translate="yes" xml:space="preserve">
          <source>Writing tests</source>
          <target state="translated">编写测试</target>
        </trans-unit>
        <trans-unit id="9ef22deec2645bc05aadf8f135a7bff939813776" translate="yes" xml:space="preserve">
          <source>Written common tests which are executed on every platform.</source>
          <target state="translated">编写通用测试,在每个平台上执行。</target>
        </trans-unit>
        <trans-unit id="8bc69ef99140607442e7db36f023118fd57bd0f0" translate="yes" xml:space="preserve">
          <source>X64</source>
          <target state="translated">X64</target>
        </trans-unit>
        <trans-unit id="c5b176396b5ad771a343d5324e35e073e54c2249" translate="yes" xml:space="preserve">
          <source>X86</source>
          <target state="translated">X86</target>
        </trans-unit>
        <trans-unit id="5fff9cda50156cd056976ef35552984685930eca" translate="yes" xml:space="preserve">
          <source>XMLHttpRequestResponseType</source>
          <target state="translated">XMLHttpRequestResponseType</target>
        </trans-unit>
        <trans-unit id="36819db18efcb8496bc5a919d2b1549693e0dfdd" translate="yes" xml:space="preserve">
          <source>XMLSerializer</source>
          <target state="translated">XMLSerializer</target>
        </trans-unit>
        <trans-unit id="1c63b87d580535129b13b917078f7e9138c16556" translate="yes" xml:space="preserve">
          <source>Xcode and Framework Dependencies</source>
          <target state="translated">Xcode和框架依赖性</target>
        </trans-unit>
        <trans-unit id="732d08a53b0b27c00ea6c38c4e10dc1ae027367a" translate="yes" xml:space="preserve">
          <source>Xcode for MacOS Target</source>
          <target state="translated">Xcode for MacOS Target</target>
        </trans-unit>
        <trans-unit id="3a7ca3b71d6353cbeb0a7191c9ae7d613e2072fe" translate="yes" xml:space="preserve">
          <source>Xcode for iOS Targets</source>
          <target state="translated">Xcode for iOS Targets</target>
        </trans-unit>
        <trans-unit id="10b6ea98a131afdfd6c5823985ffcb4d7db24754" translate="yes" xml:space="preserve">
          <source>Yan Zhulanow</source>
          <target state="translated">颜竹兰</target>
        </trans-unit>
        <trans-unit id="5397e0583f14f6c88de06b1ef28f460a1fb5b0ae" translate="yes" xml:space="preserve">
          <source>Yes</source>
          <target state="translated">Yes</target>
        </trans-unit>
        <trans-unit id="c6b7a6f0d9b6f5b060d650b3d18fe5423f38f5f8" translate="yes" xml:space="preserve">
          <source>Yes. In addition to using for backend web, you can also use Kotlin/JS for client-side web. Kotlin can use definitions from &lt;a href=&quot;http://definitelytyped.org&quot;&gt;DefinitelyTyped&lt;/a&gt; to get static typing for common JavaScript libraries, and it is compatible with existing module systems such as AMD and CommonJS. For more information check out &lt;a href=&quot;js-overview&quot;&gt;the resource on client-side development&lt;/a&gt;.</source>
          <target state="translated">是。除了用于后端Web，您还可以将Kotlin / JS用于客户端Web。Kotlin可以使用&lt;a href=&quot;http://definitelytyped.org&quot;&gt;DefinitelyTyped中的&lt;/a&gt;定义来获取通用JavaScript库的静态类型，并且与现有的模块系统（例如AMD和CommonJS）兼容。有关更多信息，请查看&lt;a href=&quot;js-overview&quot;&gt;客户端开发资源&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="24ef19bd981996fb3975b390fdf4e389e302f664" translate="yes" xml:space="preserve">
          <source>Yes. Kotlin has a very vibrant community. Kotlin developers hang out on the &lt;a href=&quot;http://discuss.kotlinlang.org&quot;&gt;Kotlin forums&lt;/a&gt;, &lt;a href=&quot;http://stackoverflow.com/questions/tagged/kotlin&quot;&gt;StackOverflow&lt;/a&gt; and more actively on the &lt;a href=&quot;http://slack.kotlinlang.org&quot;&gt;Kotlin Slack&lt;/a&gt; (with close to 20000 members as of October 2018).</source>
          <target state="translated">是。Kotlin有一个非常活跃的社区。Kotlin开发人员在&lt;a href=&quot;http://discuss.kotlinlang.org&quot;&gt;Kotlin论坛&lt;/a&gt;，&lt;a href=&quot;http://stackoverflow.com/questions/tagged/kotlin&quot;&gt;StackOverflow&lt;/a&gt;上闲逛，并更积极地在&lt;a href=&quot;http://slack.kotlinlang.org&quot;&gt;Kotlin Slack&lt;/a&gt;上闲逛（截至2018年10月，成员接近20000）。</target>
        </trans-unit>
        <trans-unit id="eff3e318f84c4cc9d6e232c833a673793a1fdf5a" translate="yes" xml:space="preserve">
          <source>Yes. Kotlin has a very vibrant community. Kotlin developers hang out on the &lt;a href=&quot;http://discuss.kotlinlang.org&quot;&gt;Kotlin forums&lt;/a&gt;, &lt;a href=&quot;http://stackoverflow.com/questions/tagged/kotlin&quot;&gt;StackOverflow&lt;/a&gt; and more actively on the &lt;a href=&quot;http://slack.kotlinlang.org&quot;&gt;Kotlin Slack&lt;/a&gt; (with close to 30000 members as of April 2020).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9c3a4c2db5e8dd0d2cb7f40d618381241d23fdb5" translate="yes" xml:space="preserve">
          <source>Yes. Kotlin is 100% compatible with the JVM and as such you can use any existing frameworks such as Spring Boot, vert.x or JSF. In addition there are specific frameworks written in Kotlin such as &lt;a href=&quot;http://github.com/kotlin/ktor&quot;&gt;Ktor&lt;/a&gt;. For more information check out &lt;a href=&quot;server-overview&quot;&gt;the resource on server-side development&lt;/a&gt;.</source>
          <target state="translated">是。Kotlin与JVM 100％兼容，因此，您可以使用任何现有框架，例如Spring Boot，vert.x或JSF。此外，还有用Kotlin编写的特定框架，例如&lt;a href=&quot;http://github.com/kotlin/ktor&quot;&gt;Ktor&lt;/a&gt;。有关更多信息，请查看&lt;a href=&quot;server-overview&quot;&gt;服务器端开发资源&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="394e7e23081bdb6d99bfe5b20e776940a0eddfc7" translate="yes" xml:space="preserve">
          <source>Yes. Kotlin is 100% interoperable with the Java programming language and major emphasis has been placed on making sure that your existing codebase can interact properly with Kotlin. You can easily call Kotlin code from Java and Java code from Kotlin. This makes adoption much easier and lower-risk. There&amp;rsquo;s also an automated Java-to-Kotlin converter built into the IDE that simplifies migration of existing code.</source>
          <target state="translated">是。Kotlin可与Java编程语言实现100％的互操作性，并且主要重点在于确保您现有的代码库可以与Kotlin正确交互。您可以轻松地从Java调用Kotlin代码，并从Kotlin调用Java代码。这使采用更加容易，风险更低。IDE中还内置了一个自动化的Java到Kotlin转换器，可简化现有代码的迁移。</target>
        </trans-unit>
        <trans-unit id="4a17fa4b35c62003c3a9f7533fe6e9c37272164c" translate="yes" xml:space="preserve">
          <source>Yes. Kotlin is free, has been free and will remain free. It is developed under the Apache 2.0 license and the source code is available &lt;a href=&quot;https://github.com/jetbrains/kotlin&quot;&gt;on GitHub&lt;/a&gt;.</source>
          <target state="translated">是。Kotlin是免费的，已经免费，并将继续免费。它是根据Apache 2.0许可开发的，其源代码可&lt;a href=&quot;https://github.com/jetbrains/kotlin&quot;&gt;在GitHub上获得&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="94a7986414ee52d128b983f272b2ad70c6da6d23" translate="yes" xml:space="preserve">
          <source>Yes. Kotlin is supported as a first-class language on Android. There are hundreds of applications already using Kotlin for Android, such as Basecamp, Pinterest and more. For more information check out &lt;a href=&quot;android-overview&quot;&gt;the resource on Android development&lt;/a&gt;.</source>
          <target state="translated">是。Kotlin是Android上的一流语言。已经有数百种应用程序已经在Android上使用Kotlin，例如Basecamp，Pinterest等。有关更多信息，请查看&lt;a href=&quot;android-overview&quot;&gt;有关Android开发的资源&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="274a0b95b655ed64a6efffee34c2a68aaf45a096" translate="yes" xml:space="preserve">
          <source>Yes. Kotlin/Native is available as a part of Kotlin project. It compiles Kotlin to native code that can run without a VM. It is still in beta, but you can already try it on popular desktop and mobile platforms and even some IoT devices. For more information, check out the &lt;a href=&quot;native-overview&quot;&gt;Kotlin/Native documentation&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="28cb538590ffcbd4b0b44f9f9e65a37e67d87b7d" translate="yes" xml:space="preserve">
          <source>Yes. The most active Kotlin account is &lt;a href=&quot;https://twitter.com/kotlin&quot;&gt;on Twitter&lt;/a&gt;.</source>
          <target state="translated">是。最活跃的Kotlin帐户&lt;a href=&quot;https://twitter.com/kotlin&quot;&gt;在Twitter上&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="dca77782c9a250224765e2008d4c84fd762a0d93" translate="yes" xml:space="preserve">
          <source>Yes. The official annual &lt;a href=&quot;https://kotlinconf.com/&quot;&gt;KotlinConf&lt;/a&gt; is hosted by JetBrains. It has taken place in San-Francisco in &lt;a href=&quot;https://kotlinconf.com/2017/&quot;&gt;2017&lt;/a&gt; and in Amsterdam in 2018. Kotlin is also being covered in different conferences worldwide. You can find a list of &lt;a href=&quot;https://kotlinlang.org/community/talks.html?time=upcoming&quot;&gt;upcoming talks on the web site&lt;/a&gt;.</source>
          <target state="translated">是。官方年度&lt;a href=&quot;https://kotlinconf.com/&quot;&gt;KotlinConf&lt;/a&gt;由JetBrains主办。它于&lt;a href=&quot;https://kotlinconf.com/2017/&quot;&gt;2017年&lt;/a&gt;在旧金山和2018 年在阿姆斯特丹举行。科特林还在全球不同的会议上得到报道。您可以&lt;a href=&quot;https://kotlinlang.org/community/talks.html?time=upcoming&quot;&gt;在网站上&lt;/a&gt;找到即将进行的演讲的列表。</target>
        </trans-unit>
        <trans-unit id="8c278e2f4da0bfe99800e689c9bf58dc3c9371bf" translate="yes" xml:space="preserve">
          <source>Yes. The official annual &lt;a href=&quot;https://kotlinconf.com/&quot;&gt;KotlinConf&lt;/a&gt; is hosted by JetBrains. It took place in San-Francisco in &lt;a href=&quot;https://kotlinconf.com/2017/&quot;&gt;2017&lt;/a&gt;, Amsterdam in &lt;a href=&quot;https://kotlinconf.com/2018/&quot;&gt;2018&lt;/a&gt;, and Copenhagen in &lt;a href=&quot;https://kotlinconf.com/2019/&quot;&gt;2019&lt;/a&gt;. Kotlin is also being covered in different conferences worldwide. You can find a list of &lt;a href=&quot;https://kotlinlang.org/community/talks.html?time=upcoming&quot;&gt;upcoming talks on the web site&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="acc7e1273f0c7c021fb0eb154bd30f632b5979c1" translate="yes" xml:space="preserve">
          <source>Yes. There are many User Groups and Meetups now focused exclusively around Kotlin. You can find &lt;a href=&quot;https://kotlinlang.org/user-groups/user-group-list.html&quot;&gt;a list on the web site&lt;/a&gt;. In addition there are community organised &lt;a href=&quot;https://kotlinlang.org/community/events.html&quot;&gt;Kotlin Nights&lt;/a&gt; events around the world.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="245f2a5591a9c4d3569894353e1f2cf56a21fb18" translate="yes" xml:space="preserve">
          <source>Yes. There are many User Groups and Meetups now focused exclusively around Kotlin. You can find &lt;a href=&quot;https://kotlinlang.org/user-groups/user-group-list.html&quot;&gt;a list on the web site&lt;/a&gt;. In addition there are community organised &lt;a href=&quot;https://kotlinlang.org/community/kotlin-nights.html&quot;&gt;Kotlin Nights&lt;/a&gt; events around the world.</source>
          <target state="translated">是。现在有许多专门针对Kotlin的用户组和聚会。您可以&lt;a href=&quot;https://kotlinlang.org/user-groups/user-group-list.html&quot;&gt;在网站上&lt;/a&gt;找到列表。此外，世界各地都有社区举办的&lt;a href=&quot;https://kotlinlang.org/community/kotlin-nights.html&quot;&gt;Kotlin Nights&lt;/a&gt;活动。</target>
        </trans-unit>
        <trans-unit id="26bf688303ceb780f3d0c7dbc40853123225c437" translate="yes" xml:space="preserve">
          <source>Yes. You can use any Java UI framework such as JavaFx, Swing or other. In addition there are Kotlin specific frameworks such as &lt;a href=&quot;https://github.com/edvin/tornadofx&quot;&gt;TornadoFX&lt;/a&gt;.</source>
          <target state="translated">是。您可以使用任何Java UI框架，例如JavaFx，Swing或其他。此外，还有Kotlin特定的框架，例如&lt;a href=&quot;https://github.com/edvin/tornadofx&quot;&gt;TornadoFX&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="6d46727d9cbc5b42400b7033c423aa9ae8e2e2c7" translate="yes" xml:space="preserve">
          <source>Yet another version is &lt;code&gt;with()&lt;/code&gt;, which you can also use to avoid coming up with a variable name for an expression, but only if you know that its result will be non-null:</source>
          <target state="translated">还有一个版本是 &lt;code&gt;with()&lt;/code&gt; ，您也可以使用它来避免为表达式提供变量名，但前提是您知道其结果将为非null：</target>
        </trans-unit>
        <trans-unit id="6645373aa19d277d4be38cd447e02f606199d919" translate="yes" xml:space="preserve">
          <source>Yields a collections of values to the &lt;a href=&quot;../../kotlin.collections/-iterator/index#kotlin.collections.Iterator&quot;&gt;Iterator&lt;/a&gt; being built and suspends until all these values are iterated and the next one is requested.</source>
          <target state="translated">将值的集合产生给正在构建的&lt;a href=&quot;../../kotlin.collections/-iterator/index#kotlin.collections.Iterator&quot;&gt;Iterator&lt;/a&gt;，并将其挂起，直到对所有这些值进行迭代并请求下一个值为止。</target>
        </trans-unit>
        <trans-unit id="dea7ede9ec104387fb1609c7bda3174d6b55a932" translate="yes" xml:space="preserve">
          <source>Yields a collections of values to the &lt;a href=&quot;../../kotlin.collections/-iterator/index#kotlin.collections.Iterator&quot;&gt;Iterator&lt;/a&gt; being built.</source>
          <target state="translated">将值的集合产生给正在构建的&lt;a href=&quot;../../kotlin.collections/-iterator/index#kotlin.collections.Iterator&quot;&gt;Iterator&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="5bb64263f34a1036737ff6affb76d9c6aca92b5e" translate="yes" xml:space="preserve">
          <source>Yields a value to the &lt;a href=&quot;../../kotlin.collections/-iterator/index#kotlin.collections.Iterator&quot;&gt;Iterator&lt;/a&gt; being built and suspends until the next value is requested.</source>
          <target state="translated">为正在构建的&lt;a href=&quot;../../kotlin.collections/-iterator/index#kotlin.collections.Iterator&quot;&gt;Iterator&lt;/a&gt;产生一个值，并暂停直到请求下一个值。</target>
        </trans-unit>
        <trans-unit id="ecaa73b411ba3d85fb72c340d0006f2cb62ea630" translate="yes" xml:space="preserve">
          <source>Yields a value to the &lt;a href=&quot;../../kotlin.collections/-iterator/index#kotlin.collections.Iterator&quot;&gt;Iterator&lt;/a&gt; being built.</source>
          <target state="translated">为正在构建的&lt;a href=&quot;../../kotlin.collections/-iterator/index#kotlin.collections.Iterator&quot;&gt;Iterator&lt;/a&gt;产生一个值。</target>
        </trans-unit>
        <trans-unit id="05fdedd2dc5a0d174b59f8e50970bf9a2634ba23" translate="yes" xml:space="preserve">
          <source>Yields all values from the &lt;code&gt;iterator&lt;/code&gt; to the &lt;a href=&quot;../../kotlin.collections/-iterator/index#kotlin.collections.Iterator&quot;&gt;Iterator&lt;/a&gt; being built and suspends until all these values are iterated and the next one is requested.</source>
          <target state="translated">从收益率的所有值 &lt;code&gt;iterator&lt;/code&gt; 到&lt;a href=&quot;../../kotlin.collections/-iterator/index#kotlin.collections.Iterator&quot;&gt;迭代器&lt;/a&gt;正在兴建并中止，直到所有这些值迭代和下一个请求。</target>
        </trans-unit>
        <trans-unit id="d5b7d32bb963fafb74937e16dd39bc1436006180" translate="yes" xml:space="preserve">
          <source>Yields all values from the &lt;code&gt;iterator&lt;/code&gt; to the &lt;a href=&quot;../../kotlin.collections/-iterator/index#kotlin.collections.Iterator&quot;&gt;Iterator&lt;/a&gt; being built.</source>
          <target state="translated">产量从所有值 &lt;code&gt;iterator&lt;/code&gt; 到&lt;a href=&quot;../../kotlin.collections/-iterator/index#kotlin.collections.Iterator&quot;&gt;迭代器&lt;/a&gt;正在兴建。</target>
        </trans-unit>
        <trans-unit id="212c4574faa5981056973317a8194c4f7193f00f" translate="yes" xml:space="preserve">
          <source>Yields potentially infinite sequence of values to the &lt;a href=&quot;../../kotlin.collections/-iterator/index#kotlin.collections.Iterator&quot;&gt;Iterator&lt;/a&gt; being built and suspends until all these values are iterated and the next one is requested.</source>
          <target state="translated">将可能无限的值序列产生给正在构建的&lt;a href=&quot;../../kotlin.collections/-iterator/index#kotlin.collections.Iterator&quot;&gt;Iterator&lt;/a&gt;并暂停，直到所有这些值都被迭代并请求下一个值为止。</target>
        </trans-unit>
        <trans-unit id="cbe0f5f8c7f37c7f0116dd89dfbe4311362f100e" translate="yes" xml:space="preserve">
          <source>Yields potentially infinite sequence of values to the &lt;a href=&quot;../../kotlin.collections/-iterator/index#kotlin.collections.Iterator&quot;&gt;Iterator&lt;/a&gt; being built.</source>
          <target state="translated">将可能无限的值序列产生给正在构建的&lt;a href=&quot;../../kotlin.collections/-iterator/index#kotlin.collections.Iterator&quot;&gt;Iterator&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="ac334ed8ed56d40bbf0b004222da8a5cfbbfd85a" translate="yes" xml:space="preserve">
          <source>You &lt;em&gt;catch&lt;/em&gt; it with &lt;code&gt;try&lt;/code&gt;/&lt;code&gt;catch&lt;/code&gt; (which corresponds to &lt;code&gt;try&lt;/code&gt;/&lt;code&gt;except&lt;/code&gt; in Python):</source>
          <target state="translated">你&lt;em&gt;赶上&lt;/em&gt;它 &lt;code&gt;try&lt;/code&gt; / &lt;code&gt;catch&lt;/code&gt; （相当于 &lt;code&gt;try&lt;/code&gt; / &lt;code&gt;except&lt;/code&gt; 在Python）：</target>
        </trans-unit>
        <trans-unit id="20636499bb6197906e978100ce69432c0dbbf03f" translate="yes" xml:space="preserve">
          <source>You also can get the plugin from a Bintray repository. In addition to releases, this repo contains old and development versions of the plugin which are not available at the plugin portal. To get the plugin from the Bintray repo, include the following snippet in your build script:</source>
          <target state="translated">你也可以从Bintray仓库中获得该插件。除了发布版本,这个仓库还包含了插件的旧版本和开发版本,这些版本在插件门户上是不可用的。要从Bintray仓库中获取插件,请在你的构建脚本中加入以下代码。</target>
        </trans-unit>
        <trans-unit id="0bd59105ffa9efa21fb641f8c45d6c9ac73339d5" translate="yes" xml:space="preserve">
          <source>You also need to change the standard library dependency:</source>
          <target state="translated">你还需要改变标准库的依赖性。</target>
        </trans-unit>
        <trans-unit id="dd7185b5af3c9b502ebe182035feee9fe5ae4238" translate="yes" xml:space="preserve">
          <source>You are using a shared library which provides much more functions than you actually need. For example, standard library (&lt;code&gt;kotlin.js&lt;/code&gt;) contains functions for manipulating lists, arrays, char sequences, adapters for DOM, etc, which together gives about 1.3 mb file. A simple &quot;Hello, world&quot; application only requires console routines, which is only few kilobytes for the entire file.</source>
          <target state="translated">您正在使用共享库，该库提供的功能远远超出实际需要。例如，标准库（ &lt;code&gt;kotlin.js&lt;/code&gt; ）包含用于操作列表，数组，char序列，DOM适配器等的函数，它们总共提供了约1.3 mb的文件。一个简单的&amp;ldquo; Hello，world&amp;rdquo;应用程序仅需要控制台例程，整个程序只有几千字节。</target>
        </trans-unit>
        <trans-unit id="b8b4afbb85cff2cc0020a27f512803eb4412e431" translate="yes" xml:space="preserve">
          <source>You are writing a JavaScript library in Kotlin. The compiler produces mangled names for functions with parameters, which is unnatural for usual JavaScript developer. You can put &lt;code&gt;@JsName(...)&lt;/code&gt; on functions you want to be available from JavaScript.</source>
          <target state="translated">您正在用Kotlin编写JavaScript库。编译器会为带有参数的函数生成错误的名称，这对于通常的JavaScript开发人员而言是不自然的。您可以将 &lt;code&gt;@JsName(...)&lt;/code&gt; 放在要从JavaScript使用的函数上。</target>
        </trans-unit>
        <trans-unit id="ced0770441d0915c8fa664292551f8ce4944dcdf" translate="yes" xml:space="preserve">
          <source>You can &lt;a href=&quot;collection-filtering&quot;&gt;filter&lt;/a&gt; maps with the &lt;a href=&quot;../../api/latest/jvm/stdlib/kotlin.collections/filter&quot;&gt;&lt;code&gt;filter()&lt;/code&gt;&lt;/a&gt; function as well as other collections. When calling &lt;code&gt;filter()&lt;/code&gt; on a map, pass to it a predicate with a &lt;code&gt;Pair&lt;/code&gt; as an argument. This enables you to use both the key and the value in the filtering predicate.</source>
          <target state="translated">您可以使用&lt;a href=&quot;../../api/latest/jvm/stdlib/kotlin.collections/filter&quot;&gt; &lt;code&gt;filter()&lt;/code&gt; &lt;/a&gt;函数以及其他集合来&lt;a href=&quot;collection-filtering&quot;&gt;过滤&lt;/a&gt;地图。在地图上调用 &lt;code&gt;filter()&lt;/code&gt; 时，将以 &lt;code&gt;Pair&lt;/code&gt; 作为参数的谓词传递给它。这使您可以同时使用过滤谓词中的键和值。</target>
        </trans-unit>
        <trans-unit id="e2e820083848cc9c7893f4e761376a7b0f3da495" translate="yes" xml:space="preserve">
          <source>You can achieve the same result by replacing &lt;code&gt;GlobalScope.launch { ... }&lt;/code&gt; with &lt;code&gt;thread { ... }&lt;/code&gt;, and &lt;code&gt;delay(...)&lt;/code&gt; with &lt;code&gt;Thread.sleep(...)&lt;/code&gt;. Try it (don't forget to import &lt;code&gt;kotlin.concurrent.thread&lt;/code&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d1a23fe5d1d1e3de8d1267cdf9c63fb6bfb3657e" translate="yes" xml:space="preserve">
          <source>You can achieve the same result replacing &lt;code&gt;GlobalScope.launch { ... }&lt;/code&gt; with &lt;code&gt;thread { ... }&lt;/code&gt; and &lt;code&gt;delay(...)&lt;/code&gt; with &lt;code&gt;Thread.sleep(...)&lt;/code&gt;. Try it.</source>
          <target state="translated">您可以通过用 &lt;code&gt;thread { ... }&lt;/code&gt; 替换 &lt;code&gt;GlobalScope.launch { ... }&lt;/code&gt; }和用 &lt;code&gt;Thread.sleep(...)&lt;/code&gt; 替换 &lt;code&gt;delay(...)&lt;/code&gt; 来获得相同的结果。试试吧。</target>
        </trans-unit>
        <trans-unit id="3fd88375bd9e2c5b29ff9f3b08642ce7f7c017ff" translate="yes" xml:space="preserve">
          <source>You can add dependencies between a Kotlin project and Pod libraries &lt;a href=&quot;#add-a-dependency-on-a-pod-library-from-the-cocoapods-repository&quot;&gt;stored in the CocoaPods repository&lt;/a&gt; and &lt;a href=&quot;#add-a-dependency-on-a-pod-library-stored-locally&quot;&gt;stored locally&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="51d0ee73e90bc91209e1143bf1f6f915646c4f0e" translate="yes" xml:space="preserve">
          <source>You can add dependencies between:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="21454e9c251b213f70afb9f37d911faebff85725" translate="yes" xml:space="preserve">
          <source>You can add local dependencies on subspecs as well.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f49897e744e728ec20d12fac4cd3875a577907cf" translate="yes" xml:space="preserve">
          <source>You can also add dependencies between a Kotlin Pod and multiple Xcode projects. However, in this case you need to add a dependency by calling &lt;code&gt;pod install&lt;/code&gt; manually for each Xcode project. In other cases, it's done automatically.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="168bdb5a3d0877f2176a248baedeba05daed06ea" translate="yes" xml:space="preserve">
          <source>You can also add dependencies on subspecs. {:.note} &amp;gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d1a895a76bcd4f509dec7a0fd73ea28f4e99e2fe" translate="yes" xml:space="preserve">
          <source>You can also add elements using the in-place version of the &lt;a href=&quot;collection-plus-minus&quot;&gt;&lt;code&gt;plus&lt;/code&gt; operator&lt;/a&gt; - &lt;a href=&quot;../../api/latest/jvm/stdlib/kotlin.collections/plus-assign&quot;&gt;&lt;code&gt;plusAssign&lt;/code&gt;&lt;/a&gt; (&lt;code&gt;+=&lt;/code&gt;) When applied to a mutable collection, &lt;code&gt;+=&lt;/code&gt; appends the second operand (an element or another collection) to the end of the collection.</source>
          <target state="translated">也可以使用就地版本的添加元素&lt;a href=&quot;collection-plus-minus&quot;&gt; &lt;code&gt;plus&lt;/code&gt; 算子&lt;/a&gt; - &lt;a href=&quot;../../api/latest/jvm/stdlib/kotlin.collections/plus-assign&quot;&gt; &lt;code&gt;plusAssign&lt;/code&gt; &lt;/a&gt;（ &lt;code&gt;+=&lt;/code&gt; ）当施加到可变集合， &lt;code&gt;+=&lt;/code&gt; 追加第二操作数（元素或另一个集合）到集合的末尾。</target>
        </trans-unit>
        <trans-unit id="1579ab1f702efb6978b9fa8cb8a57432117ebf84" translate="yes" xml:space="preserve">
          <source>You can also add new entries to maps using the shorthand operator form. There are two ways:</source>
          <target state="translated">您也可以使用速记运算符形式向地图添加新条目。有两种方式。</target>
        </trans-unit>
        <trans-unit id="adb889488eca1142a852ebbb14e0d834dba4b9c0" translate="yes" xml:space="preserve">
          <source>You can also annotate an entire property, which marks both of its accessors as inline:</source>
          <target state="translated">你也可以对整个属性进行注释,将它的两个访问器都标记为内联。</target>
        </trans-unit>
        <trans-unit id="477575bcb670c8439b1fc52bd518e44ccc2ddf70" translate="yes" xml:space="preserve">
          <source>You can also annotate property accessors:</source>
          <target state="translated">你也可以对属性访问器进行注释。</target>
        </trans-unit>
        <trans-unit id="f30e63cc3e4c4de61df6778a57b26bb1dfe528da" translate="yes" xml:space="preserve">
          <source>You can also apply a transformation for the returned chunks right away. To do this, provide the transformation as a lambda function when calling &lt;code&gt;chunked()&lt;/code&gt;. The lambda argument is a chunk of the collection. When &lt;code&gt;chunked()&lt;/code&gt; is called with a transformation, the chunks are short-living &lt;code&gt;List&lt;/code&gt;s that should be consumed right in that lambda.</source>
          <target state="translated">您还可以立即对返回的块应用转换。为此，请在调用 &lt;code&gt;chunked()&lt;/code&gt; 时将转换作为lambda函数提供。lambda参数是集合的一部分。当通过转换调用 &lt;code&gt;chunked()&lt;/code&gt; 时，这些块是应在该lambda中立即使用的短寿命 &lt;code&gt;List&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="87eeb187e68c5f9473b80d0e63a9192e7b1d8796" translate="yes" xml:space="preserve">
          <source>You can also apply operations that take element indices as parameters. For this purpose, use functions &lt;a href=&quot;../../api/latest/jvm/stdlib/kotlin.collections/reduce-indexed&quot;&gt;&lt;code&gt;reduceIndexed()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../../api/latest/jvm/stdlib/kotlin.collections/fold-indexed&quot;&gt;&lt;code&gt;foldIndexed()&lt;/code&gt;&lt;/a&gt; passing element index as the first argument of the operation.</source>
          <target state="translated">您还可以应用将元素索引作为参数的操作。为此，使用函数&lt;a href=&quot;../../api/latest/jvm/stdlib/kotlin.collections/reduce-indexed&quot;&gt; &lt;code&gt;reduceIndexed()&lt;/code&gt; &lt;/a&gt;和&lt;a href=&quot;../../api/latest/jvm/stdlib/kotlin.collections/fold-indexed&quot;&gt; &lt;code&gt;foldIndexed()&lt;/code&gt; &lt;/a&gt;传递元素索引作为操作的第一个参数。</target>
        </trans-unit>
        <trans-unit id="6d71d6f7a2f235cf3ce1a4d8edf316e19e2e9bf7" translate="yes" xml:space="preserve">
          <source>You can also call &lt;code&gt;groupBy()&lt;/code&gt; with a second lambda argument &amp;ndash; a value transformation function. In the result map of &lt;code&gt;groupBy()&lt;/code&gt; with two lambdas, the keys produced by &lt;code&gt;keySelector&lt;/code&gt; function are mapped to the results of the value transformation function instead of the original elements.</source>
          <target state="translated">您还可以使用第二个lambda参数（值转换函数 &lt;code&gt;groupBy()&lt;/code&gt; 调用groupBy（）。在具有两个lambda 的 &lt;code&gt;groupBy()&lt;/code&gt; 的结果图中，由 &lt;code&gt;keySelector&lt;/code&gt; 函数生成的键被映射到值转换函数的结果，而不是原始元素。</target>
        </trans-unit>
        <trans-unit id="d6ac39eb3039023d51fc93537a1642524f6dac92" translate="yes" xml:space="preserve">
          <source>You can also call &lt;code&gt;zip()&lt;/code&gt; with a transformation function that takes two parameters: the receiver element and the argument element. In this case, the result &lt;code&gt;List&lt;/code&gt; contains the return values of the transformation function called on pairs of the receiver and the argument elements with the same positions.</source>
          <target state="translated">您也可以使用带有两个参数的转换函数来调用 &lt;code&gt;zip()&lt;/code&gt; ：接收器元素和参数元素。在这种情况下，结果 &lt;code&gt;List&lt;/code&gt; 包含在具有相同位置的接收器对和自变量元素对上调用的转换函数的返回值。</target>
        </trans-unit>
        <trans-unit id="06eddb42c9d5d39acddb3dc075d1e5535447aa7c" translate="yes" xml:space="preserve">
          <source>You can also configure methods as listeners, using ButterKnife annotations:</source>
          <target state="translated">你也可以使用ButterKnife注解将方法配置为监听器。</target>
        </trans-unit>
        <trans-unit id="9854f94b3be3057e487d0c38a88479319254e4d7" translate="yes" xml:space="preserve">
          <source>You can also create a range with the &lt;code&gt;..&lt;/code&gt; operator - but beware that unlike Python's &lt;code&gt;range()&lt;/code&gt;, it &lt;em&gt;includes&lt;/em&gt; its endpoint:</source>
          <target state="translated">您还可以使用 &lt;code&gt;..&lt;/code&gt; 运算符创建范围-但要注意，与Python的 &lt;code&gt;range()&lt;/code&gt; 不同，它&lt;em&gt;包含&lt;/em&gt;其端点：</target>
        </trans-unit>
        <trans-unit id="b01ffb71985befae27400d94f54d18868e1d008e" translate="yes" xml:space="preserve">
          <source>You can also create properties that don't actually have a backing field, but just reference another property:</source>
          <target state="translated">你也可以创建实际上没有后置字段的属性,而只是引用另一个属性。</target>
        </trans-unit>
        <trans-unit id="c9876dea255568f0e9f5817ed679358dffc4d305" translate="yes" xml:space="preserve">
          <source>You can also get a reference to a top-level property by just prefixing the property name with &lt;code&gt;::&lt;/code&gt; (e.g. &lt;code&gt;::foo&lt;/code&gt;), and its type will be &lt;code&gt;KProperty0&amp;lt;V&amp;gt;&lt;/code&gt; or &lt;code&gt;KMutableProperty0&amp;lt;V&amp;gt;&lt;/code&gt;.</source>
          <target state="translated">您还可以通过在属性名称前加上 &lt;code&gt;::&lt;/code&gt; :（例如 &lt;code&gt;::foo&lt;/code&gt; ）来获得对顶级属性的引用，其类型将为 &lt;code&gt;KProperty0&amp;lt;V&amp;gt;&lt;/code&gt; 或 &lt;code&gt;KMutableProperty0&amp;lt;V&amp;gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="cd738fa7f281a55ddbbe638aa35ad90cd0ffea2e" translate="yes" xml:space="preserve">
          <source>You can also give a function type an alternative name by using &lt;a href=&quot;type-aliases&quot;&gt;a type alias&lt;/a&gt;:</source>
          <target state="translated">您还可以通过使用&lt;a href=&quot;type-aliases&quot;&gt;类型别名&lt;/a&gt;为函数类型提供备用名称：</target>
        </trans-unit>
        <trans-unit id="9adcc759cc78f4446ab3576eac4b1cf6e582a715" translate="yes" xml:space="preserve">
          <source>You can also join &lt;a href=&quot;https://kotlinlang.slack.com/archives/C0B8L3U69&quot;&gt;#javascript&lt;/a&gt; channel in the official &lt;a href=&quot;https://surveys.jetbrains.com/s3/kotlin-slack-sign-up&quot;&gt;Kotlin Slack&lt;/a&gt; and chat with the community and the team.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="74404a834bf0e74cd0e4122118cbbb2c71b4c293" translate="yes" xml:space="preserve">
          <source>You can also mark the entire property as &lt;code&gt;inline&lt;/code&gt; - then the modifier is applied to both accessors.</source>
          <target state="translated">您也可以将整个属性标记为 &lt;code&gt;inline&lt;/code&gt; -然后将修饰符应用于两个访问器。</target>
        </trans-unit>
        <trans-unit id="a69cb31647703eccb51f230a5b88b00de025b9d6" translate="yes" xml:space="preserve">
          <source>You can also open the Kotlin runtime configuration manually from &lt;strong&gt;Tools | Kotlin | Configure Kotlin in Project&lt;/strong&gt;.</source>
          <target state="translated">您也可以从&amp;ldquo; &lt;strong&gt;工具&amp;rdquo; |&amp;ldquo;&lt;/strong&gt;手动&amp;rdquo;打开Kotlin运行时配置&lt;strong&gt;。&lt;/strong&gt;&lt;strong&gt;科特林| &lt;/strong&gt;&lt;strong&gt;在Project中配置Kotlin&lt;/strong&gt;。</target>
        </trans-unit>
        <trans-unit id="cef97ca53a3adcc1e56d72ff09576acc7a561b8f" translate="yes" xml:space="preserve">
          <source>You can also override a &lt;code&gt;val&lt;/code&gt; property with a &lt;code&gt;var&lt;/code&gt; property, but not vice versa. This is allowed because a &lt;code&gt;val&lt;/code&gt; property essentially declares a &lt;code&gt;get&lt;/code&gt; method, and overriding it as a &lt;code&gt;var&lt;/code&gt; additionally declares a &lt;code&gt;set&lt;/code&gt; method in the derived class.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="543ab3c4f9a33042aa74e4d9fa902bff3c643714" translate="yes" xml:space="preserve">
          <source>You can also override a &lt;code&gt;val&lt;/code&gt; property with a &lt;code&gt;var&lt;/code&gt; property, but not vice versa. This is allowed because a &lt;code&gt;val&lt;/code&gt; property essentially declares a getter method, and overriding it as a &lt;code&gt;var&lt;/code&gt; additionally declares a setter method in the derived class.</source>
          <target state="translated">您也可以使用 &lt;code&gt;var&lt;/code&gt; 属性覆盖 &lt;code&gt;val&lt;/code&gt; 属性，反之亦然。这是允许的，因为 &lt;code&gt;val&lt;/code&gt; 属性本质上声明了一个getter方法，而将其覆盖为 &lt;code&gt;var&lt;/code&gt; 时，在派生类中另外声明了一个setter方法。</target>
        </trans-unit>
        <trans-unit id="3dbab914e9e2a4fe151632f660311ed513d1aa3c" translate="yes" xml:space="preserve">
          <source>You can also reference a member property directly on an object, in which case you get a member function reference that is already bound to its receiver, so that you don't need the receiver type in the signature. Here's an example of both approaches:</source>
          <target state="translated">你也可以直接引用对象上的成员属性,在这种情况下,你得到的成员函数引用已经绑定到它的接收器上,所以你不需要在签名中写上接收器类型。下面是这两种方法的一个例子。</target>
        </trans-unit>
        <trans-unit id="215e6014bf6ec41103d16f2d278bf6634f19962f" translate="yes" xml:space="preserve">
          <source>You can also remove entries from a mutable map by their keys or values. To do this, call &lt;code&gt;remove()&lt;/code&gt; on the map's keys or values providing the key or the value of an entry. When called on values, &lt;code&gt;remove()&lt;/code&gt; removes only the first entry with the given value.</source>
          <target state="translated">您还可以通过键或值从可变映射中删除条目。为此，请在地图的键或提供键或条目值的值上调用 &lt;code&gt;remove()&lt;/code&gt; 。在值上调用时， &lt;code&gt;remove()&lt;/code&gt; 仅删除具有给定值的第一个条目。</target>
        </trans-unit>
        <trans-unit id="cc06ea6d4b9b58dc8ef4177aedfae035788a2330" translate="yes" xml:space="preserve">
          <source>You can also specify an index range to search in: in this case, the function searches only between two provided indices.</source>
          <target state="translated">你也可以指定一个要搜索的索引范围:在这种情况下,函数只在提供的两个索引之间搜索。</target>
        </trans-unit>
        <trans-unit id="a298d024f26e002e396a26eea69c8b9df1b40247" translate="yes" xml:space="preserve">
          <source>You can also specify the name of the module being compiled as the &lt;code&gt;moduleName&lt;/code&gt; attribute:</source>
          <target state="translated">您还可以将要编译的模块的名称指定为 &lt;code&gt;moduleName&lt;/code&gt; 属性：</target>
        </trans-unit>
        <trans-unit id="aaffcf2e7604a7174a9dca3a9bdb61e147c77730" translate="yes" xml:space="preserve">
          <source>You can also use &lt;code&gt;as&lt;/code&gt; to cast to a nullable type. The difference between this and the previous &lt;code&gt;as?&lt;/code&gt; cast is that this one will fail if &lt;code&gt;x&lt;/code&gt; is a non-null instance of another type than &lt;code&gt;Person&lt;/code&gt;:</source>
          <target state="translated">您还可以使用 &lt;code&gt;as&lt;/code&gt; 强制转换为可为null的类型。这和以前 &lt;code&gt;as?&lt;/code&gt; 区别？如果 &lt;code&gt;x&lt;/code&gt; 是 &lt;code&gt;Person&lt;/code&gt; 以外的其他类型的非null实例，则强制转换失败：</target>
        </trans-unit>
        <trans-unit id="8c3464ac1404ed2e38a3e5c4a687460c4848e47d" translate="yes" xml:space="preserve">
          <source>You can also use predicates to define the number of elements for taking or dropping. There are four functions similar to the ones described above:</source>
          <target state="translated">你也可以使用谓词来定义取或舍的元素数量。有四个函数与上述函数类似。</target>
        </trans-unit>
        <trans-unit id="061472843b7d351b73c9ba2a9154644f13c942ac" translate="yes" xml:space="preserve">
          <source>You can also use qualified names in the links. Note that, unlike JavaDoc, qualified names always use the dot character to separate the components, even before a method name:</source>
          <target state="translated">你也可以在链接中使用限定名。请注意,与JavaDoc不同的是,限定名总是使用点号来分隔组件,甚至是在方法名之前。</target>
        </trans-unit>
        <trans-unit id="d1e5a6eb3c7515c3ebb20654865be10f6160d3f1" translate="yes" xml:space="preserve">
          <source>You can also use the &lt;code&gt;kotlin&lt;/code&gt; script to run binaries produced by the Kotlin compiler:</source>
          <target state="translated">您还可以使用 &lt;code&gt;kotlin&lt;/code&gt; 脚本来运行Kotlin编译器生成的二进制文件：</target>
        </trans-unit>
        <trans-unit id="122dcfb555b3c43bd275a0557785754f761978a7" translate="yes" xml:space="preserve">
          <source>You can always write your own library providing a common API and implementing it differently on every platform.</source>
          <target state="translated">你可以随时编写自己的库,提供一个通用的API,并在每个平台上以不同的方式实现它。</target>
        </trans-unit>
        <trans-unit id="43ada5583998cbabe417a283a42826c326118a44" translate="yes" xml:space="preserve">
          <source>You can attach the plugin by providing the path to its JAR file using the &lt;code&gt;Xplugin&lt;/code&gt; kotlinc option:</source>
          <target state="translated">您可以使用 &lt;code&gt;Xplugin&lt;/code&gt; kotlinc选项通过提供其JAR文件的路径来附加插件：</target>
        </trans-unit>
        <trans-unit id="45fd1d031ca2916e040c2fa7f5d1560599c72070" translate="yes" xml:space="preserve">
          <source>You can bind a listener to run an action when a specific event happens:</source>
          <target state="translated">您可以绑定一个监听器,以便在特定事件发生时运行一个动作。</target>
        </trans-unit>
        <trans-unit id="6d24aee85b2d05426abbc889ca1665a7bac05d58" translate="yes" xml:space="preserve">
          <source>You can browse the converted &lt;a href=&quot;https://github.com/JetBrains/kotlin-examples/tree/master/gradle/android-dbflow&quot;&gt;sample application&lt;/a&gt;.</source>
          <target state="translated">您可以浏览转换后的&lt;a href=&quot;https://github.com/JetBrains/kotlin-examples/tree/master/gradle/android-dbflow&quot;&gt;示例应用程序&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="119e02c115bb496d963aeca4e26bb853a72fa1a0" translate="yes" xml:space="preserve">
          <source>You can call a variadic function with one array (but not a list or any other iterable) that contains all the variadic arguments, by &lt;em&gt;spreading&lt;/em&gt; it with the &lt;code&gt;*&lt;/code&gt; operator (same syntax as Python):</source>
          <target state="translated">您可以通过使用 &lt;code&gt;*&lt;/code&gt; 运算符（与Python相同的语法）进行&lt;em&gt;扩展&lt;/em&gt;，使用包含所有可变参数的一个数组（而不是列表或任何其他可迭代对象）来调用可变参数函数：</target>
        </trans-unit>
        <trans-unit id="174aa71bd42d85212bb93925c278e6e822b6c906" translate="yes" xml:space="preserve">
          <source>You can change the caching strategy globally or per container. This also requires switching on the &lt;a href=&quot;#enabling-experimental-features&quot;&gt;experimental mode&lt;/a&gt;.</source>
          <target state="translated">您可以全局或按容器更改缓存策略。这也需要打开&lt;a href=&quot;#enabling-experimental-features&quot;&gt;实验模式&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="f63a12896fc2a9819448369bf1f2eb61e4acbca5" translate="yes" xml:space="preserve">
          <source>You can compile your Kotlin projects to JavaScript modules for various popular module systems. We currently support the following configurations for JavaScript modules:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ab9c36b5ddec92d68530baf5655376c6d587e87e" translate="yes" xml:space="preserve">
          <source>You can concatenate strings using the &lt;code&gt;+&lt;/code&gt; operator. This also works for concatenating strings with values of other types, as long as the first element in the expression is a string:</source>
          <target state="translated">您可以使用 &lt;code&gt;+&lt;/code&gt; 运算符连接字符串。只要表达式中的第一个元素是字符串，这也可用于将字符串与其他类型的值连接起来：</target>
        </trans-unit>
        <trans-unit id="bd2aaeebf04fd016dd4b88eaaddf89115872468a" translate="yes" xml:space="preserve">
          <source>You can control the increment with &lt;code&gt;step&lt;/code&gt;:</source>
          <target state="translated">您可以通过以下 &lt;code&gt;step&lt;/code&gt; 控制增量：</target>
        </trans-unit>
        <trans-unit id="ddfded7f1474ad5091070fdce96610e7a72ff566" translate="yes" xml:space="preserve">
          <source>You can create a new multiplatform project in the IDE by selecting one of the multiplatform project templates in the New Project dialog under the &quot;Kotlin&quot; section.</source>
          <target state="translated">你可以在IDE中创建一个新的多平台项目,方法是在 &quot;Kotlin &quot;部分下的 &quot;新建项目 &quot;对话框中选择一个多平台项目模板。</target>
        </trans-unit>
        <trans-unit id="98d1378ca1f526733a85698a32d391a8a0727bda" translate="yes" xml:space="preserve">
          <source>You can create delegates as anonymous objects without creating new classes using the interfaces &lt;code&gt;ReadOnlyProperty&lt;/code&gt; and &lt;code&gt;ReadWriteProperty&lt;/code&gt; from the Kotlin standard library. They provide the required methods: &lt;code&gt;getValue()&lt;/code&gt; is declared in &lt;code&gt;ReadOnlyProperty&lt;/code&gt;; &lt;code&gt;ReadWriteProperty&lt;/code&gt; extends it and adds &lt;code&gt;setValue()&lt;/code&gt;. Thus, you can pass a &lt;code&gt;ReadWriteProperty&lt;/code&gt; whenever a &lt;code&gt;ReadOnlyProperty&lt;/code&gt; is expected.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d2c95ed2af5b3d950c38152129afcaf03041a554" translate="yes" xml:space="preserve">
          <source>You can declare local variables as delegated properties. For instance, you can make a local variable lazy:</source>
          <target state="translated">你可以将局部变量声明为委托属性。例如,你可以让一个局部变量变得懒惰。</target>
        </trans-unit>
        <trans-unit id="da365b8ea88f3ecefef0f71a19ad5bac59582573" translate="yes" xml:space="preserve">
          <source>You can declare properties in interfaces. A property declared in an interface can either be abstract, or it can provide implementations for accessors. Properties declared in interfaces can't have backing fields, and therefore accessors declared in interfaces can't reference them.</source>
          <target state="translated">你可以在接口中声明属性。在接口中声明的属性可以是抽象的,也可以为访问者提供实现。在接口中声明的属性不能有后备字段,因此在接口中声明的访问者不能引用它们。</target>
        </trans-unit>
        <trans-unit id="2dc0facb64d375d7c12335b57efc8e15a15a3d57" translate="yes" xml:space="preserve">
          <source>You can designate a one-parameter member function or &lt;a href=&quot;extension-functionsproperties&quot;&gt;extension function&lt;/a&gt; for use as an infix operator, which can be useful if you're designing a DSL. The left operand will become &lt;code&gt;this&lt;/code&gt;, and the right operand will become the parameter. If you do this inside a &lt;code&gt;Person&lt;/code&gt; class that has got a &lt;code&gt;name&lt;/code&gt; property:</source>
          <target state="translated">您可以指定一个单参数成员函数或&lt;a href=&quot;extension-functionsproperties&quot;&gt;扩展函数&lt;/a&gt;以用作中缀运算符，这在设计DSL时很有用。左操作数将成为 &lt;code&gt;this&lt;/code&gt; ，而右操作数将成为参数。如果在具有 &lt;code&gt;name&lt;/code&gt; 属性的 &lt;code&gt;Person&lt;/code&gt; 类中执行此操作：</target>
        </trans-unit>
        <trans-unit id="a51b330a0d31c28f24bb34789cd60447658bdbac" translate="yes" xml:space="preserve">
          <source>You can do string interpolation with &lt;code&gt;$&lt;/code&gt;, and use curly braces for expressions:</source>
          <target state="translated">您可以使用 &lt;code&gt;$&lt;/code&gt; 进行字符串插值，并对表达式使用大括号：</target>
        </trans-unit>
        <trans-unit id="2676c0c594f8f762012b9a1cc82627600997fba1" translate="yes" xml:space="preserve">
          <source>You can easily extend JavaScript classes as if they were Kotlin classes. Just define an &lt;code&gt;external open&lt;/code&gt; class and extend it by a non-&lt;code&gt;external&lt;/code&gt; class. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="14cf0cd2f79ac876b33edfcde686a695fa7f4dd8" translate="yes" xml:space="preserve">
          <source>You can easily extend JavaScript classes as they were Kotlin classes. Just define an &lt;code&gt;external&lt;/code&gt; class and extend it by non-&lt;code&gt;external&lt;/code&gt; class. For example:</source>
          <target state="translated">您可以像Kotlin类一样轻松扩展JavaScript类。只需定义一个 &lt;code&gt;external&lt;/code&gt; 类并通过非 &lt;code&gt;external&lt;/code&gt; 类对其进行扩展。例如：</target>
        </trans-unit>
        <trans-unit id="2e3cc2b854dd8c8b5f8d721e5d8aeb0e2d4a1c82" translate="yes" xml:space="preserve">
          <source>You can enter the name without the &lt;strong&gt;.kt&lt;/strong&gt; extension. Eclipse will add it automatically.</source>
          <target state="translated">您可以输入不带&lt;strong&gt;.kt&lt;/strong&gt;扩展名的名称。Eclipse将自动添加它。</target>
        </trans-unit>
        <trans-unit id="b547c56bdabc1a2ed049f71133cea17e4efbb17f" translate="yes" xml:space="preserve">
          <source>You can find a complete sample project showing the use of Kotlin, Maven and Dagger in the &lt;a href=&quot;https://github.com/JetBrains/kotlin-examples/tree/master/maven/dagger-maven-example&quot;&gt;Kotlin examples repository&lt;/a&gt;.</source>
          <target state="translated">您可以在&lt;a href=&quot;https://github.com/JetBrains/kotlin-examples/tree/master/maven/dagger-maven-example&quot;&gt;Kotlin示例存储库中&lt;/a&gt;找到一个完整的示例项目，其中显示了Kotlin，Maven和Dagger的用法。</target>
        </trans-unit>
        <trans-unit id="b818b22946bf5779a33eba24384933cbaa67bbfa" translate="yes" xml:space="preserve">
          <source>You can find a sample project &lt;a href=&quot;https://github.com/Kotlin/kotlin-with-cocoapods-sample&quot;&gt;here&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d68b6cd5317576034f1a384ac6c9a489e198d6e4" translate="yes" xml:space="preserve">
          <source>You can find a sample project &lt;a href=&quot;https://github.com/Kotlin/multitarget-xcode-with-kotlin-cocoapods-sample&quot;&gt;here&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="48fa38ae5b4c2dfde58b4810d79092c01260633e" translate="yes" xml:space="preserve">
          <source>You can find an example project &lt;a href=&quot;https://github.com/JetBrains/kotlin-examples/tree/master/gradle/android-databinding&quot;&gt;here&lt;/a&gt;.</source>
          <target state="translated">您可以&lt;a href=&quot;https://github.com/JetBrains/kotlin-examples/tree/master/gradle/android-databinding&quot;&gt;在此处&lt;/a&gt;找到示例项目。</target>
        </trans-unit>
        <trans-unit id="ddbd7e0ea74b2e0ab17f7760ef7bbb97244a6706" translate="yes" xml:space="preserve">
          <source>You can find the complete sample in the &lt;a href=&quot;https://github.com/JetBrains/kotlin-examples/tree/master/gradle/kotlin-code-generation&quot;&gt;kotlin-examples&lt;/a&gt; Github repository.</source>
          <target state="translated">您可以在&lt;a href=&quot;https://github.com/JetBrains/kotlin-examples/tree/master/gradle/kotlin-code-generation&quot;&gt;kotlin-examples&lt;/a&gt; Github存储库中找到完整的示例。</target>
        </trans-unit>
        <trans-unit id="1e7e7bc8e734b7c2c5fd901f4c24a00930756202" translate="yes" xml:space="preserve">
          <source>You can find the full list in the &lt;a href=&quot;https://github.com/JetBrains/kotlin/blob/master/core/compiler.common.jvm/src/org/jetbrains/kotlin/load/java/JvmAnnotationNames.kt&quot;&gt;Kotlin compiler source code&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c2f9f0b2ef164a4a49704ff24d04568c7bf180c4" translate="yes" xml:space="preserve">
          <source>You can find the full list in the &lt;a href=&quot;https://github.com/JetBrains/kotlin/blob/master/core/descriptors.jvm/src/org/jetbrains/kotlin/load/java/JvmAnnotationNames.kt&quot;&gt;Kotlin compiler source code&lt;/a&gt;.</source>
          <target state="translated">您可以在&lt;a href=&quot;https://github.com/JetBrains/kotlin/blob/master/core/descriptors.jvm/src/org/jetbrains/kotlin/load/java/JvmAnnotationNames.kt&quot;&gt;Kotlin编译器源代码中&lt;/a&gt;找到完整列表。</target>
        </trans-unit>
        <trans-unit id="a3da459de16a2b0b14d75a8dc46a8b9ba69c6e61" translate="yes" xml:space="preserve">
          <source>You can generate separate documentation files in HTML format from KDoc by using a tool called &lt;a href=&quot;https://github.com/Kotlin/dokka/blob/master/README.md&quot;&gt;Dokka&lt;/a&gt;.</source>
          <target state="translated">您可以使用名为&lt;a href=&quot;https://github.com/Kotlin/dokka/blob/master/README.md&quot;&gt;Dokka&lt;/a&gt;的工具从KDoc生成HTML格式的单独文档文件。</target>
        </trans-unit>
        <trans-unit id="7f9b510f84fc577507c905ac3f8a66f73202ea19" translate="yes" xml:space="preserve">
          <source>You can get a reference to an top-level function by prefixing the function name with &lt;code&gt;::&lt;/code&gt; (e.g. &lt;code&gt;::foo&lt;/code&gt;).</source>
          <target state="translated">您可以通过在函数名称前加上 &lt;code&gt;::&lt;/code&gt; :（例如 &lt;code&gt;::foo&lt;/code&gt; ）来获得对顶级函数的引用。</target>
        </trans-unit>
        <trans-unit id="fb5040e4ce0c6be83ae6a507dd2ae4caffae8262" translate="yes" xml:space="preserve">
          <source>You can get full code &lt;a href=&quot;https://github.com/kotlin/kotlinx.coroutines/blob/master/kotlinx-coroutines-core/jvm/test/guide/example-basic-01.kt&quot;&gt;here&lt;/a&gt;.</source>
          <target state="translated">您可以&lt;a href=&quot;https://github.com/kotlin/kotlinx.coroutines/blob/master/kotlinx-coroutines-core/jvm/test/guide/example-basic-01.kt&quot;&gt;在此处&lt;/a&gt;获取完整的代码。</target>
        </trans-unit>
        <trans-unit id="289355ac82905323bc3e6db14275c8e1d64bc9dd" translate="yes" xml:space="preserve">
          <source>You can get full code &lt;a href=&quot;https://github.com/kotlin/kotlinx.coroutines/blob/master/kotlinx-coroutines-core/jvm/test/guide/example-basic-02.kt&quot;&gt;here&lt;/a&gt;.</source>
          <target state="translated">您可以&lt;a href=&quot;https://github.com/kotlin/kotlinx.coroutines/blob/master/kotlinx-coroutines-core/jvm/test/guide/example-basic-02.kt&quot;&gt;在此处&lt;/a&gt;获取完整的代码。</target>
        </trans-unit>
        <trans-unit id="d9db0ec8ed7e5a137d78fcbcf78b00ffef15bb73" translate="yes" xml:space="preserve">
          <source>You can get full code &lt;a href=&quot;https://github.com/kotlin/kotlinx.coroutines/blob/master/kotlinx-coroutines-core/jvm/test/guide/example-basic-02b.kt&quot;&gt;here&lt;/a&gt;.</source>
          <target state="translated">您可以&lt;a href=&quot;https://github.com/kotlin/kotlinx.coroutines/blob/master/kotlinx-coroutines-core/jvm/test/guide/example-basic-02b.kt&quot;&gt;在此处&lt;/a&gt;获取完整的代码。</target>
        </trans-unit>
        <trans-unit id="7504e90bc78ac8e1e827d94755d029f2a70e9ec7" translate="yes" xml:space="preserve">
          <source>You can get full code &lt;a href=&quot;https://github.com/kotlin/kotlinx.coroutines/blob/master/kotlinx-coroutines-core/jvm/test/guide/example-basic-03.kt&quot;&gt;here&lt;/a&gt;.</source>
          <target state="translated">您可以&lt;a href=&quot;https://github.com/kotlin/kotlinx.coroutines/blob/master/kotlinx-coroutines-core/jvm/test/guide/example-basic-03.kt&quot;&gt;在此处&lt;/a&gt;获取完整的代码。</target>
        </trans-unit>
        <trans-unit id="15972c4d1d5ace70f0796e80b6752bc455b74214" translate="yes" xml:space="preserve">
          <source>You can get full code &lt;a href=&quot;https://github.com/kotlin/kotlinx.coroutines/blob/master/kotlinx-coroutines-core/jvm/test/guide/example-basic-03s.kt&quot;&gt;here&lt;/a&gt;.</source>
          <target state="translated">您可以&lt;a href=&quot;https://github.com/kotlin/kotlinx.coroutines/blob/master/kotlinx-coroutines-core/jvm/test/guide/example-basic-03s.kt&quot;&gt;在此处&lt;/a&gt;获取完整的代码。</target>
        </trans-unit>
        <trans-unit id="04b5fdbc2edde73bf9b29b7002e9ec1bda302370" translate="yes" xml:space="preserve">
          <source>You can get full code &lt;a href=&quot;https://github.com/kotlin/kotlinx.coroutines/blob/master/kotlinx-coroutines-core/jvm/test/guide/example-basic-04.kt&quot;&gt;here&lt;/a&gt;.</source>
          <target state="translated">您可以&lt;a href=&quot;https://github.com/kotlin/kotlinx.coroutines/blob/master/kotlinx-coroutines-core/jvm/test/guide/example-basic-04.kt&quot;&gt;在此处&lt;/a&gt;获取完整的代码。</target>
        </trans-unit>
        <trans-unit id="3f0ae3242c00a4efbd3629df19a7651a0d5d3b7c" translate="yes" xml:space="preserve">
          <source>You can get full code &lt;a href=&quot;https://github.com/kotlin/kotlinx.coroutines/blob/master/kotlinx-coroutines-core/jvm/test/guide/example-basic-05.kt&quot;&gt;here&lt;/a&gt;.</source>
          <target state="translated">您可以&lt;a href=&quot;https://github.com/kotlin/kotlinx.coroutines/blob/master/kotlinx-coroutines-core/jvm/test/guide/example-basic-05.kt&quot;&gt;在此处&lt;/a&gt;获取完整的代码。</target>
        </trans-unit>
        <trans-unit id="6c9950637fb883f830cd4d5d6bfe89d8b885f156" translate="yes" xml:space="preserve">
          <source>You can get full code &lt;a href=&quot;https://github.com/kotlin/kotlinx.coroutines/blob/master/kotlinx-coroutines-core/jvm/test/guide/example-basic-06.kt&quot;&gt;here&lt;/a&gt;.</source>
          <target state="translated">您可以&lt;a href=&quot;https://github.com/kotlin/kotlinx.coroutines/blob/master/kotlinx-coroutines-core/jvm/test/guide/example-basic-06.kt&quot;&gt;在此处&lt;/a&gt;获取完整的代码。</target>
        </trans-unit>
        <trans-unit id="f55faf309e3a411237bfe68b3501a7a0f4822814" translate="yes" xml:space="preserve">
          <source>You can get full code &lt;a href=&quot;https://github.com/kotlin/kotlinx.coroutines/blob/master/kotlinx-coroutines-core/jvm/test/guide/example-basic-07.kt&quot;&gt;here&lt;/a&gt;.</source>
          <target state="translated">您可以&lt;a href=&quot;https://github.com/kotlin/kotlinx.coroutines/blob/master/kotlinx-coroutines-core/jvm/test/guide/example-basic-07.kt&quot;&gt;在此处&lt;/a&gt;获取完整的代码。</target>
        </trans-unit>
        <trans-unit id="65d366eaa04a18211e7d291c47b7c4e8f1c6cb48" translate="yes" xml:space="preserve">
          <source>You can get full code &lt;a href=&quot;https://github.com/kotlin/kotlinx.coroutines/blob/master/kotlinx-coroutines-core/jvm/test/guide/example-cancel-01.kt&quot;&gt;here&lt;/a&gt;.</source>
          <target state="translated">您可以&lt;a href=&quot;https://github.com/kotlin/kotlinx.coroutines/blob/master/kotlinx-coroutines-core/jvm/test/guide/example-cancel-01.kt&quot;&gt;在此处&lt;/a&gt;获取完整的代码。</target>
        </trans-unit>
        <trans-unit id="bebe513b9446165c131af295b2af0ba33d89f2ae" translate="yes" xml:space="preserve">
          <source>You can get full code &lt;a href=&quot;https://github.com/kotlin/kotlinx.coroutines/blob/master/kotlinx-coroutines-core/jvm/test/guide/example-cancel-02.kt&quot;&gt;here&lt;/a&gt;.</source>
          <target state="translated">您可以&lt;a href=&quot;https://github.com/kotlin/kotlinx.coroutines/blob/master/kotlinx-coroutines-core/jvm/test/guide/example-cancel-02.kt&quot;&gt;在此处&lt;/a&gt;获取完整的代码。</target>
        </trans-unit>
        <trans-unit id="e2ad2a825e6ebc94668813805795391a0d24021a" translate="yes" xml:space="preserve">
          <source>You can get full code &lt;a href=&quot;https://github.com/kotlin/kotlinx.coroutines/blob/master/kotlinx-coroutines-core/jvm/test/guide/example-cancel-03.kt&quot;&gt;here&lt;/a&gt;.</source>
          <target state="translated">您可以&lt;a href=&quot;https://github.com/kotlin/kotlinx.coroutines/blob/master/kotlinx-coroutines-core/jvm/test/guide/example-cancel-03.kt&quot;&gt;在此处&lt;/a&gt;获取完整的代码。</target>
        </trans-unit>
        <trans-unit id="f04345eabdd82d4839be11bdd0967ee09b654924" translate="yes" xml:space="preserve">
          <source>You can get full code &lt;a href=&quot;https://github.com/kotlin/kotlinx.coroutines/blob/master/kotlinx-coroutines-core/jvm/test/guide/example-cancel-04.kt&quot;&gt;here&lt;/a&gt;.</source>
          <target state="translated">您可以&lt;a href=&quot;https://github.com/kotlin/kotlinx.coroutines/blob/master/kotlinx-coroutines-core/jvm/test/guide/example-cancel-04.kt&quot;&gt;在此处&lt;/a&gt;获取完整的代码。</target>
        </trans-unit>
        <trans-unit id="a4c5a82139aba5235c807c89158bcd15ed7d9b6d" translate="yes" xml:space="preserve">
          <source>You can get full code &lt;a href=&quot;https://github.com/kotlin/kotlinx.coroutines/blob/master/kotlinx-coroutines-core/jvm/test/guide/example-cancel-05.kt&quot;&gt;here&lt;/a&gt;.</source>
          <target state="translated">您可以&lt;a href=&quot;https://github.com/kotlin/kotlinx.coroutines/blob/master/kotlinx-coroutines-core/jvm/test/guide/example-cancel-05.kt&quot;&gt;在此处&lt;/a&gt;获取完整的代码。</target>
        </trans-unit>
        <trans-unit id="bb367370fd9d8d021b7ee5cfc2c62d2dbc56f27d" translate="yes" xml:space="preserve">
          <source>You can get full code &lt;a href=&quot;https://github.com/kotlin/kotlinx.coroutines/blob/master/kotlinx-coroutines-core/jvm/test/guide/example-cancel-06.kt&quot;&gt;here&lt;/a&gt;.</source>
          <target state="translated">您可以&lt;a href=&quot;https://github.com/kotlin/kotlinx.coroutines/blob/master/kotlinx-coroutines-core/jvm/test/guide/example-cancel-06.kt&quot;&gt;在此处&lt;/a&gt;获取完整的代码。</target>
        </trans-unit>
        <trans-unit id="79cd2934b9969a22d58de02b2e44b63d4d08e5d5" translate="yes" xml:space="preserve">
          <source>You can get full code &lt;a href=&quot;https://github.com/kotlin/kotlinx.coroutines/blob/master/kotlinx-coroutines-core/jvm/test/guide/example-cancel-07.kt&quot;&gt;here&lt;/a&gt;.</source>
          <target state="translated">您可以&lt;a href=&quot;https://github.com/kotlin/kotlinx.coroutines/blob/master/kotlinx-coroutines-core/jvm/test/guide/example-cancel-07.kt&quot;&gt;在此处&lt;/a&gt;获取完整的代码。</target>
        </trans-unit>
        <trans-unit id="931cd04e1a1bd650054424994fe70842bb76150c" translate="yes" xml:space="preserve">
          <source>You can get full code &lt;a href=&quot;https://github.com/kotlin/kotlinx.coroutines/blob/master/kotlinx-coroutines-core/jvm/test/guide/example-channel-01.kt&quot;&gt;here&lt;/a&gt;.</source>
          <target state="translated">您可以&lt;a href=&quot;https://github.com/kotlin/kotlinx.coroutines/blob/master/kotlinx-coroutines-core/jvm/test/guide/example-channel-01.kt&quot;&gt;在此处&lt;/a&gt;获取完整的代码。</target>
        </trans-unit>
        <trans-unit id="86075ccf397503ed7f3e3fb202d844e5d305af29" translate="yes" xml:space="preserve">
          <source>You can get full code &lt;a href=&quot;https://github.com/kotlin/kotlinx.coroutines/blob/master/kotlinx-coroutines-core/jvm/test/guide/example-channel-02.kt&quot;&gt;here&lt;/a&gt;.</source>
          <target state="translated">您可以&lt;a href=&quot;https://github.com/kotlin/kotlinx.coroutines/blob/master/kotlinx-coroutines-core/jvm/test/guide/example-channel-02.kt&quot;&gt;在此处&lt;/a&gt;获取完整的代码。</target>
        </trans-unit>
        <trans-unit id="9004cc2196e24855c295db89987e20e9a2296995" translate="yes" xml:space="preserve">
          <source>You can get full code &lt;a href=&quot;https://github.com/kotlin/kotlinx.coroutines/blob/master/kotlinx-coroutines-core/jvm/test/guide/example-channel-03.kt&quot;&gt;here&lt;/a&gt;.</source>
          <target state="translated">您可以&lt;a href=&quot;https://github.com/kotlin/kotlinx.coroutines/blob/master/kotlinx-coroutines-core/jvm/test/guide/example-channel-03.kt&quot;&gt;在此处&lt;/a&gt;获取完整的代码。</target>
        </trans-unit>
        <trans-unit id="dcbdfc8d24a674cf4f51e958ccadce1c01a4e184" translate="yes" xml:space="preserve">
          <source>You can get full code &lt;a href=&quot;https://github.com/kotlin/kotlinx.coroutines/blob/master/kotlinx-coroutines-core/jvm/test/guide/example-channel-04.kt&quot;&gt;here&lt;/a&gt;.</source>
          <target state="translated">您可以&lt;a href=&quot;https://github.com/kotlin/kotlinx.coroutines/blob/master/kotlinx-coroutines-core/jvm/test/guide/example-channel-04.kt&quot;&gt;在此处&lt;/a&gt;获取完整的代码。</target>
        </trans-unit>
        <trans-unit id="4258ca4466310c4f7a93cfa3d8290d62ff54c989" translate="yes" xml:space="preserve">
          <source>You can get full code &lt;a href=&quot;https://github.com/kotlin/kotlinx.coroutines/blob/master/kotlinx-coroutines-core/jvm/test/guide/example-channel-05.kt&quot;&gt;here&lt;/a&gt;.</source>
          <target state="translated">您可以&lt;a href=&quot;https://github.com/kotlin/kotlinx.coroutines/blob/master/kotlinx-coroutines-core/jvm/test/guide/example-channel-05.kt&quot;&gt;在此处&lt;/a&gt;获取完整的代码。</target>
        </trans-unit>
        <trans-unit id="58d30d3e14f9f916a5805cf5d2405f1e91b9643c" translate="yes" xml:space="preserve">
          <source>You can get full code &lt;a href=&quot;https://github.com/kotlin/kotlinx.coroutines/blob/master/kotlinx-coroutines-core/jvm/test/guide/example-channel-06.kt&quot;&gt;here&lt;/a&gt;.</source>
          <target state="translated">您可以&lt;a href=&quot;https://github.com/kotlin/kotlinx.coroutines/blob/master/kotlinx-coroutines-core/jvm/test/guide/example-channel-06.kt&quot;&gt;在此处&lt;/a&gt;获取完整的代码。</target>
        </trans-unit>
        <trans-unit id="733ba55f623fbbcc2955de0dcaa16c6bd63329e5" translate="yes" xml:space="preserve">
          <source>You can get full code &lt;a href=&quot;https://github.com/kotlin/kotlinx.coroutines/blob/master/kotlinx-coroutines-core/jvm/test/guide/example-channel-07.kt&quot;&gt;here&lt;/a&gt;.</source>
          <target state="translated">您可以&lt;a href=&quot;https://github.com/kotlin/kotlinx.coroutines/blob/master/kotlinx-coroutines-core/jvm/test/guide/example-channel-07.kt&quot;&gt;在此处&lt;/a&gt;获取完整的代码。</target>
        </trans-unit>
        <trans-unit id="ab503781dfb2b075e187982b4c6c57b5798c884c" translate="yes" xml:space="preserve">
          <source>You can get full code &lt;a href=&quot;https://github.com/kotlin/kotlinx.coroutines/blob/master/kotlinx-coroutines-core/jvm/test/guide/example-channel-08.kt&quot;&gt;here&lt;/a&gt;.</source>
          <target state="translated">您可以&lt;a href=&quot;https://github.com/kotlin/kotlinx.coroutines/blob/master/kotlinx-coroutines-core/jvm/test/guide/example-channel-08.kt&quot;&gt;在此处&lt;/a&gt;获取完整的代码。</target>
        </trans-unit>
        <trans-unit id="93e7e6948b6c4bfbb1840683463325f59ccdbdf2" translate="yes" xml:space="preserve">
          <source>You can get full code &lt;a href=&quot;https://github.com/kotlin/kotlinx.coroutines/blob/master/kotlinx-coroutines-core/jvm/test/guide/example-channel-09.kt&quot;&gt;here&lt;/a&gt;.</source>
          <target state="translated">您可以&lt;a href=&quot;https://github.com/kotlin/kotlinx.coroutines/blob/master/kotlinx-coroutines-core/jvm/test/guide/example-channel-09.kt&quot;&gt;在此处&lt;/a&gt;获取完整的代码。</target>
        </trans-unit>
        <trans-unit id="e3af3574d4e2c3f58ae7faace27ec421581768c6" translate="yes" xml:space="preserve">
          <source>You can get full code &lt;a href=&quot;https://github.com/kotlin/kotlinx.coroutines/blob/master/kotlinx-coroutines-core/jvm/test/guide/example-channel-10.kt&quot;&gt;here&lt;/a&gt;.</source>
          <target state="translated">您可以&lt;a href=&quot;https://github.com/kotlin/kotlinx.coroutines/blob/master/kotlinx-coroutines-core/jvm/test/guide/example-channel-10.kt&quot;&gt;在此处&lt;/a&gt;获取完整的代码。</target>
        </trans-unit>
        <trans-unit id="6e0b622d2be41ac6b3d2addd5637784e10365774" translate="yes" xml:space="preserve">
          <source>You can get full code &lt;a href=&quot;https://github.com/kotlin/kotlinx.coroutines/blob/master/kotlinx-coroutines-core/jvm/test/guide/example-compose-01.kt&quot;&gt;here&lt;/a&gt;.</source>
          <target state="translated">您可以&lt;a href=&quot;https://github.com/kotlin/kotlinx.coroutines/blob/master/kotlinx-coroutines-core/jvm/test/guide/example-compose-01.kt&quot;&gt;在此处&lt;/a&gt;获取完整的代码。</target>
        </trans-unit>
        <trans-unit id="5ea3c2251bfa3f5fc98f1871b382da40839f1467" translate="yes" xml:space="preserve">
          <source>You can get full code &lt;a href=&quot;https://github.com/kotlin/kotlinx.coroutines/blob/master/kotlinx-coroutines-core/jvm/test/guide/example-compose-02.kt&quot;&gt;here&lt;/a&gt;.</source>
          <target state="translated">您可以&lt;a href=&quot;https://github.com/kotlin/kotlinx.coroutines/blob/master/kotlinx-coroutines-core/jvm/test/guide/example-compose-02.kt&quot;&gt;在此处&lt;/a&gt;获取完整的代码。</target>
        </trans-unit>
        <trans-unit id="697f41135445d2667267ee098075b43b678f3741" translate="yes" xml:space="preserve">
          <source>You can get full code &lt;a href=&quot;https://github.com/kotlin/kotlinx.coroutines/blob/master/kotlinx-coroutines-core/jvm/test/guide/example-compose-03.kt&quot;&gt;here&lt;/a&gt;.</source>
          <target state="translated">您可以&lt;a href=&quot;https://github.com/kotlin/kotlinx.coroutines/blob/master/kotlinx-coroutines-core/jvm/test/guide/example-compose-03.kt&quot;&gt;在此处&lt;/a&gt;获取完整的代码。</target>
        </trans-unit>
        <trans-unit id="a44dffc51236c2396c82567902d4df845e94ab6b" translate="yes" xml:space="preserve">
          <source>You can get full code &lt;a href=&quot;https://github.com/kotlin/kotlinx.coroutines/blob/master/kotlinx-coroutines-core/jvm/test/guide/example-compose-04.kt&quot;&gt;here&lt;/a&gt;.</source>
          <target state="translated">您可以&lt;a href=&quot;https://github.com/kotlin/kotlinx.coroutines/blob/master/kotlinx-coroutines-core/jvm/test/guide/example-compose-04.kt&quot;&gt;在此处&lt;/a&gt;获取完整的代码。</target>
        </trans-unit>
        <trans-unit id="d894537aaa21998eec1c6f7420524bb0cd5fdcf7" translate="yes" xml:space="preserve">
          <source>You can get full code &lt;a href=&quot;https://github.com/kotlin/kotlinx.coroutines/blob/master/kotlinx-coroutines-core/jvm/test/guide/example-compose-05.kt&quot;&gt;here&lt;/a&gt;.</source>
          <target state="translated">您可以&lt;a href=&quot;https://github.com/kotlin/kotlinx.coroutines/blob/master/kotlinx-coroutines-core/jvm/test/guide/example-compose-05.kt&quot;&gt;在此处&lt;/a&gt;获取完整的代码。</target>
        </trans-unit>
        <trans-unit id="cc40524ffb9a4d180e44ab29e010fd8b66a072ca" translate="yes" xml:space="preserve">
          <source>You can get full code &lt;a href=&quot;https://github.com/kotlin/kotlinx.coroutines/blob/master/kotlinx-coroutines-core/jvm/test/guide/example-compose-06.kt&quot;&gt;here&lt;/a&gt;.</source>
          <target state="translated">您可以&lt;a href=&quot;https://github.com/kotlin/kotlinx.coroutines/blob/master/kotlinx-coroutines-core/jvm/test/guide/example-compose-06.kt&quot;&gt;在此处&lt;/a&gt;获取完整的代码。</target>
        </trans-unit>
        <trans-unit id="7a2a8f22198166e8ee35c46ec0078e14c2f3b4dc" translate="yes" xml:space="preserve">
          <source>You can get full code &lt;a href=&quot;https://github.com/kotlin/kotlinx.coroutines/blob/master/kotlinx-coroutines-core/jvm/test/guide/example-context-01.kt&quot;&gt;here&lt;/a&gt;.</source>
          <target state="translated">您可以&lt;a href=&quot;https://github.com/kotlin/kotlinx.coroutines/blob/master/kotlinx-coroutines-core/jvm/test/guide/example-context-01.kt&quot;&gt;在此处&lt;/a&gt;获取完整的代码。</target>
        </trans-unit>
        <trans-unit id="56ddad5b70ea0625ccb412757dab2ad0d123bc90" translate="yes" xml:space="preserve">
          <source>You can get full code &lt;a href=&quot;https://github.com/kotlin/kotlinx.coroutines/blob/master/kotlinx-coroutines-core/jvm/test/guide/example-context-02.kt&quot;&gt;here&lt;/a&gt;.</source>
          <target state="translated">您可以&lt;a href=&quot;https://github.com/kotlin/kotlinx.coroutines/blob/master/kotlinx-coroutines-core/jvm/test/guide/example-context-02.kt&quot;&gt;在此处&lt;/a&gt;获取完整的代码。</target>
        </trans-unit>
        <trans-unit id="a868e726502149255f9b6280395e564d56e71080" translate="yes" xml:space="preserve">
          <source>You can get full code &lt;a href=&quot;https://github.com/kotlin/kotlinx.coroutines/blob/master/kotlinx-coroutines-core/jvm/test/guide/example-context-03.kt&quot;&gt;here&lt;/a&gt;.</source>
          <target state="translated">您可以&lt;a href=&quot;https://github.com/kotlin/kotlinx.coroutines/blob/master/kotlinx-coroutines-core/jvm/test/guide/example-context-03.kt&quot;&gt;在此处&lt;/a&gt;获取完整的代码。</target>
        </trans-unit>
        <trans-unit id="f313c7ae1388c6deed6a540c0e882cb797e0dcce" translate="yes" xml:space="preserve">
          <source>You can get full code &lt;a href=&quot;https://github.com/kotlin/kotlinx.coroutines/blob/master/kotlinx-coroutines-core/jvm/test/guide/example-context-04.kt&quot;&gt;here&lt;/a&gt;.</source>
          <target state="translated">您可以&lt;a href=&quot;https://github.com/kotlin/kotlinx.coroutines/blob/master/kotlinx-coroutines-core/jvm/test/guide/example-context-04.kt&quot;&gt;在此处&lt;/a&gt;获取完整的代码。</target>
        </trans-unit>
        <trans-unit id="4d4c8f44daaf04fe503d9aad322b490c0054a75e" translate="yes" xml:space="preserve">
          <source>You can get full code &lt;a href=&quot;https://github.com/kotlin/kotlinx.coroutines/blob/master/kotlinx-coroutines-core/jvm/test/guide/example-context-05.kt&quot;&gt;here&lt;/a&gt;.</source>
          <target state="translated">您可以&lt;a href=&quot;https://github.com/kotlin/kotlinx.coroutines/blob/master/kotlinx-coroutines-core/jvm/test/guide/example-context-05.kt&quot;&gt;在此处&lt;/a&gt;获取完整的代码。</target>
        </trans-unit>
        <trans-unit id="f2a60d15d60bd984b3b0707b47db30db57236195" translate="yes" xml:space="preserve">
          <source>You can get full code &lt;a href=&quot;https://github.com/kotlin/kotlinx.coroutines/blob/master/kotlinx-coroutines-core/jvm/test/guide/example-context-06.kt&quot;&gt;here&lt;/a&gt;.</source>
          <target state="translated">您可以&lt;a href=&quot;https://github.com/kotlin/kotlinx.coroutines/blob/master/kotlinx-coroutines-core/jvm/test/guide/example-context-06.kt&quot;&gt;在此处&lt;/a&gt;获取完整的代码。</target>
        </trans-unit>
        <trans-unit id="823af7ecfd5e4ebaf0e75d7495144df7b2140395" translate="yes" xml:space="preserve">
          <source>You can get full code &lt;a href=&quot;https://github.com/kotlin/kotlinx.coroutines/blob/master/kotlinx-coroutines-core/jvm/test/guide/example-context-07.kt&quot;&gt;here&lt;/a&gt;.</source>
          <target state="translated">您可以&lt;a href=&quot;https://github.com/kotlin/kotlinx.coroutines/blob/master/kotlinx-coroutines-core/jvm/test/guide/example-context-07.kt&quot;&gt;在此处&lt;/a&gt;获取完整的代码。</target>
        </trans-unit>
        <trans-unit id="65f8f02babc44676f8deecc327d1b96484bbaf0d" translate="yes" xml:space="preserve">
          <source>You can get full code &lt;a href=&quot;https://github.com/kotlin/kotlinx.coroutines/blob/master/kotlinx-coroutines-core/jvm/test/guide/example-context-08.kt&quot;&gt;here&lt;/a&gt;.</source>
          <target state="translated">您可以&lt;a href=&quot;https://github.com/kotlin/kotlinx.coroutines/blob/master/kotlinx-coroutines-core/jvm/test/guide/example-context-08.kt&quot;&gt;在此处&lt;/a&gt;获取完整的代码。</target>
        </trans-unit>
        <trans-unit id="1b14d62f21fc211d5cd7a6e4a6ee166168031016" translate="yes" xml:space="preserve">
          <source>You can get full code &lt;a href=&quot;https://github.com/kotlin/kotlinx.coroutines/blob/master/kotlinx-coroutines-core/jvm/test/guide/example-context-09.kt&quot;&gt;here&lt;/a&gt;.</source>
          <target state="translated">您可以&lt;a href=&quot;https://github.com/kotlin/kotlinx.coroutines/blob/master/kotlinx-coroutines-core/jvm/test/guide/example-context-09.kt&quot;&gt;在此处&lt;/a&gt;获取完整的代码。</target>
        </trans-unit>
        <trans-unit id="5ee5b8b31d3dd8c558553e54c7c554318cd77d66" translate="yes" xml:space="preserve">
          <source>You can get full code &lt;a href=&quot;https://github.com/kotlin/kotlinx.coroutines/blob/master/kotlinx-coroutines-core/jvm/test/guide/example-context-10.kt&quot;&gt;here&lt;/a&gt;.</source>
          <target state="translated">您可以&lt;a href=&quot;https://github.com/kotlin/kotlinx.coroutines/blob/master/kotlinx-coroutines-core/jvm/test/guide/example-context-10.kt&quot;&gt;在此处&lt;/a&gt;获取完整的代码。</target>
        </trans-unit>
        <trans-unit id="5f834208b5d5274705abd7b8034880364254f5b2" translate="yes" xml:space="preserve">
          <source>You can get full code &lt;a href=&quot;https://github.com/kotlin/kotlinx.coroutines/blob/master/kotlinx-coroutines-core/jvm/test/guide/example-context-11.kt&quot;&gt;here&lt;/a&gt;.</source>
          <target state="translated">您可以&lt;a href=&quot;https://github.com/kotlin/kotlinx.coroutines/blob/master/kotlinx-coroutines-core/jvm/test/guide/example-context-11.kt&quot;&gt;在此处&lt;/a&gt;获取完整的代码。</target>
        </trans-unit>
        <trans-unit id="405b1a590a8ffccb67b9dff1a0e773fff7fa112a" translate="yes" xml:space="preserve">
          <source>You can get full code &lt;a href=&quot;https://github.com/kotlin/kotlinx.coroutines/blob/master/kotlinx-coroutines-core/jvm/test/guide/example-exceptions-01.kt&quot;&gt;here&lt;/a&gt;.</source>
          <target state="translated">您可以&lt;a href=&quot;https://github.com/kotlin/kotlinx.coroutines/blob/master/kotlinx-coroutines-core/jvm/test/guide/example-exceptions-01.kt&quot;&gt;在此处&lt;/a&gt;获取完整的代码。</target>
        </trans-unit>
        <trans-unit id="035157e8b8ddfc1b1e7b82c110a358d6381147fd" translate="yes" xml:space="preserve">
          <source>You can get full code &lt;a href=&quot;https://github.com/kotlin/kotlinx.coroutines/blob/master/kotlinx-coroutines-core/jvm/test/guide/example-exceptions-02.kt&quot;&gt;here&lt;/a&gt;.</source>
          <target state="translated">您可以&lt;a href=&quot;https://github.com/kotlin/kotlinx.coroutines/blob/master/kotlinx-coroutines-core/jvm/test/guide/example-exceptions-02.kt&quot;&gt;在此处&lt;/a&gt;获取完整的代码。</target>
        </trans-unit>
        <trans-unit id="0cc75839b30dbaf4cce06930dc98de3511f2ea2f" translate="yes" xml:space="preserve">
          <source>You can get full code &lt;a href=&quot;https://github.com/kotlin/kotlinx.coroutines/blob/master/kotlinx-coroutines-core/jvm/test/guide/example-exceptions-03.kt&quot;&gt;here&lt;/a&gt;.</source>
          <target state="translated">您可以&lt;a href=&quot;https://github.com/kotlin/kotlinx.coroutines/blob/master/kotlinx-coroutines-core/jvm/test/guide/example-exceptions-03.kt&quot;&gt;在此处&lt;/a&gt;获取完整的代码。</target>
        </trans-unit>
        <trans-unit id="9ca7105123ca361a99b83ad5ac18a03001881620" translate="yes" xml:space="preserve">
          <source>You can get full code &lt;a href=&quot;https://github.com/kotlin/kotlinx.coroutines/blob/master/kotlinx-coroutines-core/jvm/test/guide/example-exceptions-04.kt&quot;&gt;here&lt;/a&gt;.</source>
          <target state="translated">您可以&lt;a href=&quot;https://github.com/kotlin/kotlinx.coroutines/blob/master/kotlinx-coroutines-core/jvm/test/guide/example-exceptions-04.kt&quot;&gt;在此处&lt;/a&gt;获取完整的代码。</target>
        </trans-unit>
        <trans-unit id="ec0723216ecf6b0869056e95bb649ea2944b83ee" translate="yes" xml:space="preserve">
          <source>You can get full code &lt;a href=&quot;https://github.com/kotlin/kotlinx.coroutines/blob/master/kotlinx-coroutines-core/jvm/test/guide/example-exceptions-05.kt&quot;&gt;here&lt;/a&gt;.</source>
          <target state="translated">您可以&lt;a href=&quot;https://github.com/kotlin/kotlinx.coroutines/blob/master/kotlinx-coroutines-core/jvm/test/guide/example-exceptions-05.kt&quot;&gt;在此处&lt;/a&gt;获取完整的代码。</target>
        </trans-unit>
        <trans-unit id="a78cb96342f637d31897c41d8e3056fc80c67794" translate="yes" xml:space="preserve">
          <source>You can get full code &lt;a href=&quot;https://github.com/kotlin/kotlinx.coroutines/blob/master/kotlinx-coroutines-core/jvm/test/guide/example-exceptions-06.kt&quot;&gt;here&lt;/a&gt;.</source>
          <target state="translated">您可以&lt;a href=&quot;https://github.com/kotlin/kotlinx.coroutines/blob/master/kotlinx-coroutines-core/jvm/test/guide/example-exceptions-06.kt&quot;&gt;在此处&lt;/a&gt;获取完整的代码。</target>
        </trans-unit>
        <trans-unit id="8f4db3f38dc0cb1f94bc57f6a1c7461389a3a9d2" translate="yes" xml:space="preserve">
          <source>You can get full code &lt;a href=&quot;https://github.com/kotlin/kotlinx.coroutines/blob/master/kotlinx-coroutines-core/jvm/test/guide/example-select-01.kt&quot;&gt;here&lt;/a&gt;.</source>
          <target state="translated">您可以&lt;a href=&quot;https://github.com/kotlin/kotlinx.coroutines/blob/master/kotlinx-coroutines-core/jvm/test/guide/example-select-01.kt&quot;&gt;在此处&lt;/a&gt;获取完整的代码。</target>
        </trans-unit>
        <trans-unit id="2e72757191d8dfad283a049294c51a1bf11bb4ff" translate="yes" xml:space="preserve">
          <source>You can get full code &lt;a href=&quot;https://github.com/kotlin/kotlinx.coroutines/blob/master/kotlinx-coroutines-core/jvm/test/guide/example-select-02.kt&quot;&gt;here&lt;/a&gt;.</source>
          <target state="translated">您可以&lt;a href=&quot;https://github.com/kotlin/kotlinx.coroutines/blob/master/kotlinx-coroutines-core/jvm/test/guide/example-select-02.kt&quot;&gt;在此处&lt;/a&gt;获取完整的代码。</target>
        </trans-unit>
        <trans-unit id="cb646283732f943a4b9110ae6fc4bb981587cb4a" translate="yes" xml:space="preserve">
          <source>You can get full code &lt;a href=&quot;https://github.com/kotlin/kotlinx.coroutines/blob/master/kotlinx-coroutines-core/jvm/test/guide/example-select-03.kt&quot;&gt;here&lt;/a&gt;.</source>
          <target state="translated">您可以&lt;a href=&quot;https://github.com/kotlin/kotlinx.coroutines/blob/master/kotlinx-coroutines-core/jvm/test/guide/example-select-03.kt&quot;&gt;在此处&lt;/a&gt;获取完整的代码。</target>
        </trans-unit>
        <trans-unit id="e5b7b3810bc06ce9bfde1b5abfd161185487c6e1" translate="yes" xml:space="preserve">
          <source>You can get full code &lt;a href=&quot;https://github.com/kotlin/kotlinx.coroutines/blob/master/kotlinx-coroutines-core/jvm/test/guide/example-select-04.kt&quot;&gt;here&lt;/a&gt;.</source>
          <target state="translated">您可以&lt;a href=&quot;https://github.com/kotlin/kotlinx.coroutines/blob/master/kotlinx-coroutines-core/jvm/test/guide/example-select-04.kt&quot;&gt;在此处&lt;/a&gt;获取完整的代码。</target>
        </trans-unit>
        <trans-unit id="1207ecc526b7dbeb9423163dc31ee095118fa672" translate="yes" xml:space="preserve">
          <source>You can get full code &lt;a href=&quot;https://github.com/kotlin/kotlinx.coroutines/blob/master/kotlinx-coroutines-core/jvm/test/guide/example-select-05.kt&quot;&gt;here&lt;/a&gt;.</source>
          <target state="translated">您可以&lt;a href=&quot;https://github.com/kotlin/kotlinx.coroutines/blob/master/kotlinx-coroutines-core/jvm/test/guide/example-select-05.kt&quot;&gt;在此处&lt;/a&gt;获取完整的代码。</target>
        </trans-unit>
        <trans-unit id="bf434cd562f83b4e4940c7e5ef332c435df1f374" translate="yes" xml:space="preserve">
          <source>You can get full code &lt;a href=&quot;https://github.com/kotlin/kotlinx.coroutines/blob/master/kotlinx-coroutines-core/jvm/test/guide/example-supervision-01.kt&quot;&gt;here&lt;/a&gt;.</source>
          <target state="translated">您可以&lt;a href=&quot;https://github.com/kotlin/kotlinx.coroutines/blob/master/kotlinx-coroutines-core/jvm/test/guide/example-supervision-01.kt&quot;&gt;在此处&lt;/a&gt;获取完整的代码。</target>
        </trans-unit>
        <trans-unit id="f8005d743ef79714402c0344a853b42e7a9cc0bd" translate="yes" xml:space="preserve">
          <source>You can get full code &lt;a href=&quot;https://github.com/kotlin/kotlinx.coroutines/blob/master/kotlinx-coroutines-core/jvm/test/guide/example-supervision-02.kt&quot;&gt;here&lt;/a&gt;.</source>
          <target state="translated">您可以&lt;a href=&quot;https://github.com/kotlin/kotlinx.coroutines/blob/master/kotlinx-coroutines-core/jvm/test/guide/example-supervision-02.kt&quot;&gt;在此处&lt;/a&gt;获取完整的代码。</target>
        </trans-unit>
        <trans-unit id="849ec96d14f78ed438c468ea90a9b6cef732f4c6" translate="yes" xml:space="preserve">
          <source>You can get full code &lt;a href=&quot;https://github.com/kotlin/kotlinx.coroutines/blob/master/kotlinx-coroutines-core/jvm/test/guide/example-supervision-03.kt&quot;&gt;here&lt;/a&gt;.</source>
          <target state="translated">您可以&lt;a href=&quot;https://github.com/kotlin/kotlinx.coroutines/blob/master/kotlinx-coroutines-core/jvm/test/guide/example-supervision-03.kt&quot;&gt;在此处&lt;/a&gt;获取完整的代码。</target>
        </trans-unit>
        <trans-unit id="05c31c98507194a943d2ef674985b9ae59d05c31" translate="yes" xml:space="preserve">
          <source>You can get full code &lt;a href=&quot;https://github.com/kotlin/kotlinx.coroutines/blob/master/kotlinx-coroutines-core/jvm/test/guide/example-sync-01.kt&quot;&gt;here&lt;/a&gt;.</source>
          <target state="translated">您可以&lt;a href=&quot;https://github.com/kotlin/kotlinx.coroutines/blob/master/kotlinx-coroutines-core/jvm/test/guide/example-sync-01.kt&quot;&gt;在此处&lt;/a&gt;获取完整的代码。</target>
        </trans-unit>
        <trans-unit id="da118e754a1abfb45b4360bf16326bfbba640497" translate="yes" xml:space="preserve">
          <source>You can get full code &lt;a href=&quot;https://github.com/kotlin/kotlinx.coroutines/blob/master/kotlinx-coroutines-core/jvm/test/guide/example-sync-02.kt&quot;&gt;here&lt;/a&gt;.</source>
          <target state="translated">您可以&lt;a href=&quot;https://github.com/kotlin/kotlinx.coroutines/blob/master/kotlinx-coroutines-core/jvm/test/guide/example-sync-02.kt&quot;&gt;在此处&lt;/a&gt;获取完整的代码。</target>
        </trans-unit>
        <trans-unit id="fe057c8759f0a19bd1e4d5fce3c901ceff6a466b" translate="yes" xml:space="preserve">
          <source>You can get full code &lt;a href=&quot;https://github.com/kotlin/kotlinx.coroutines/blob/master/kotlinx-coroutines-core/jvm/test/guide/example-sync-03.kt&quot;&gt;here&lt;/a&gt;.</source>
          <target state="translated">您可以&lt;a href=&quot;https://github.com/kotlin/kotlinx.coroutines/blob/master/kotlinx-coroutines-core/jvm/test/guide/example-sync-03.kt&quot;&gt;在此处&lt;/a&gt;获取完整的代码。</target>
        </trans-unit>
        <trans-unit id="6ff8f734ac32e0143e71db015aa04ecabddcf9d4" translate="yes" xml:space="preserve">
          <source>You can get full code &lt;a href=&quot;https://github.com/kotlin/kotlinx.coroutines/blob/master/kotlinx-coroutines-core/jvm/test/guide/example-sync-04.kt&quot;&gt;here&lt;/a&gt;.</source>
          <target state="translated">您可以&lt;a href=&quot;https://github.com/kotlin/kotlinx.coroutines/blob/master/kotlinx-coroutines-core/jvm/test/guide/example-sync-04.kt&quot;&gt;在此处&lt;/a&gt;获取完整的代码。</target>
        </trans-unit>
        <trans-unit id="ccc382ea609f0ce68e6e549ac970e39f01e5aa3a" translate="yes" xml:space="preserve">
          <source>You can get full code &lt;a href=&quot;https://github.com/kotlin/kotlinx.coroutines/blob/master/kotlinx-coroutines-core/jvm/test/guide/example-sync-05.kt&quot;&gt;here&lt;/a&gt;.</source>
          <target state="translated">您可以&lt;a href=&quot;https://github.com/kotlin/kotlinx.coroutines/blob/master/kotlinx-coroutines-core/jvm/test/guide/example-sync-05.kt&quot;&gt;在此处&lt;/a&gt;获取完整的代码。</target>
        </trans-unit>
        <trans-unit id="88f618b0cb771a17ed61b1a95bd63c480f17e88e" translate="yes" xml:space="preserve">
          <source>You can get full code &lt;a href=&quot;https://github.com/kotlin/kotlinx.coroutines/blob/master/kotlinx-coroutines-core/jvm/test/guide/example-sync-06.kt&quot;&gt;here&lt;/a&gt;.</source>
          <target state="translated">您可以&lt;a href=&quot;https://github.com/kotlin/kotlinx.coroutines/blob/master/kotlinx-coroutines-core/jvm/test/guide/example-sync-06.kt&quot;&gt;在此处&lt;/a&gt;获取完整的代码。</target>
        </trans-unit>
        <trans-unit id="eeac2031d2d5441de9d25546c1ee8acfe2107eef" translate="yes" xml:space="preserve">
          <source>You can get full code &lt;a href=&quot;https://github.com/kotlin/kotlinx.coroutines/blob/master/kotlinx-coroutines-core/jvm/test/guide/example-sync-07.kt&quot;&gt;here&lt;/a&gt;.</source>
          <target state="translated">您可以&lt;a href=&quot;https://github.com/kotlin/kotlinx.coroutines/blob/master/kotlinx-coroutines-core/jvm/test/guide/example-sync-07.kt&quot;&gt;在此处&lt;/a&gt;获取完整的代码。</target>
        </trans-unit>
        <trans-unit id="19734a701a0ce26ddd6513a731d4957a073d1d46" translate="yes" xml:space="preserve">
          <source>You can get reference to its &lt;code&gt;name&lt;/code&gt; property like this:</source>
          <target state="translated">您可以这样引用其 &lt;code&gt;name&lt;/code&gt; 属性：</target>
        </trans-unit>
        <trans-unit id="a76fdbd686f7e9cdf69758f71d6a118ceb73d47a" translate="yes" xml:space="preserve">
          <source>You can get the full code &lt;a href=&quot;https://github.com/kotlin/kotlinx.coroutines/blob/master/kotlinx-coroutines-core/jvm/test/guide/example-basic-01.kt&quot;&gt;here&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f81c574993fbc6e4290c77aea2a1b0ba0ba51573" translate="yes" xml:space="preserve">
          <source>You can get the full code &lt;a href=&quot;https://github.com/kotlin/kotlinx.coroutines/blob/master/kotlinx-coroutines-core/jvm/test/guide/example-basic-02.kt&quot;&gt;here&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="94af07133bc9071d2e6b5c4ce1e018fd4ce88c85" translate="yes" xml:space="preserve">
          <source>You can get the full code &lt;a href=&quot;https://github.com/kotlin/kotlinx.coroutines/blob/master/kotlinx-coroutines-core/jvm/test/guide/example-basic-03.kt&quot;&gt;here&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e496abd555065de94d667aee39a7b000334407c4" translate="yes" xml:space="preserve">
          <source>You can get the full code &lt;a href=&quot;https://github.com/kotlin/kotlinx.coroutines/blob/master/kotlinx-coroutines-core/jvm/test/guide/example-basic-04.kt&quot;&gt;here&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a89c7a8c2384cf22d4fd5ca0804b3718fe59aa67" translate="yes" xml:space="preserve">
          <source>You can get the full code &lt;a href=&quot;https://github.com/kotlin/kotlinx.coroutines/blob/master/kotlinx-coroutines-core/jvm/test/guide/example-basic-05.kt&quot;&gt;here&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="caa58b003cc673652e0373777b14793e09cbd168" translate="yes" xml:space="preserve">
          <source>You can get the full code &lt;a href=&quot;https://github.com/kotlin/kotlinx.coroutines/blob/master/kotlinx-coroutines-core/jvm/test/guide/example-basic-06.kt&quot;&gt;here&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ae9e9f0cc2fc58001324c7e9b86d33967383654a" translate="yes" xml:space="preserve">
          <source>You can get the full code &lt;a href=&quot;https://github.com/kotlin/kotlinx.coroutines/blob/master/kotlinx-coroutines-core/jvm/test/guide/example-basic-07.kt&quot;&gt;here&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cbca22da6ef8654b16885b9b4b6e0f999527e88a" translate="yes" xml:space="preserve">
          <source>You can get the full code &lt;a href=&quot;https://github.com/kotlin/kotlinx.coroutines/blob/master/kotlinx-coroutines-core/jvm/test/guide/example-basic-08.kt&quot;&gt;here&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="db8cc3536110fc609135c5f7f61a61c18021aeda" translate="yes" xml:space="preserve">
          <source>You can get the full code &lt;a href=&quot;https://github.com/kotlin/kotlinx.coroutines/blob/master/kotlinx-coroutines-core/jvm/test/guide/example-basic-09.kt&quot;&gt;here&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2011fc3c096333305a18269f51841dc30e6ea03a" translate="yes" xml:space="preserve">
          <source>You can get the full code &lt;a href=&quot;https://github.com/kotlin/kotlinx.coroutines/blob/master/kotlinx-coroutines-core/jvm/test/guide/example-cancel-01.kt&quot;&gt;here&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7b5a1bb104e4c48f0823e19173d24038bcfd0160" translate="yes" xml:space="preserve">
          <source>You can get the full code &lt;a href=&quot;https://github.com/kotlin/kotlinx.coroutines/blob/master/kotlinx-coroutines-core/jvm/test/guide/example-cancel-02.kt&quot;&gt;here&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dd06b839c1db433ba194b1abab0c87d5190645f7" translate="yes" xml:space="preserve">
          <source>You can get the full code &lt;a href=&quot;https://github.com/kotlin/kotlinx.coroutines/blob/master/kotlinx-coroutines-core/jvm/test/guide/example-cancel-03.kt&quot;&gt;here&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6bdeb9c10a9bfcb31f066f6b659e899c8c3dfad3" translate="yes" xml:space="preserve">
          <source>You can get the full code &lt;a href=&quot;https://github.com/kotlin/kotlinx.coroutines/blob/master/kotlinx-coroutines-core/jvm/test/guide/example-cancel-04.kt&quot;&gt;here&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b6bc2a11de64299a77cd93498247840f4dee2807" translate="yes" xml:space="preserve">
          <source>You can get the full code &lt;a href=&quot;https://github.com/kotlin/kotlinx.coroutines/blob/master/kotlinx-coroutines-core/jvm/test/guide/example-cancel-05.kt&quot;&gt;here&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0a5ce88801212e4ef037029a3ac6968e3d20ac96" translate="yes" xml:space="preserve">
          <source>You can get the full code &lt;a href=&quot;https://github.com/kotlin/kotlinx.coroutines/blob/master/kotlinx-coroutines-core/jvm/test/guide/example-cancel-06.kt&quot;&gt;here&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f5294a8e438c0cb5c21f0aae2a3b9f850284e512" translate="yes" xml:space="preserve">
          <source>You can get the full code &lt;a href=&quot;https://github.com/kotlin/kotlinx.coroutines/blob/master/kotlinx-coroutines-core/jvm/test/guide/example-cancel-07.kt&quot;&gt;here&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2ad7908c0bf0000d7cda89cfe829b621becd4a94" translate="yes" xml:space="preserve">
          <source>You can get the full code &lt;a href=&quot;https://github.com/kotlin/kotlinx.coroutines/blob/master/kotlinx-coroutines-core/jvm/test/guide/example-cancel-08.kt&quot;&gt;here&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="211e13f2a6d660103d746246715465e46ce60479" translate="yes" xml:space="preserve">
          <source>You can get the full code &lt;a href=&quot;https://github.com/kotlin/kotlinx.coroutines/blob/master/kotlinx-coroutines-core/jvm/test/guide/example-cancel-09.kt&quot;&gt;here&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bf4bca4e1ee52bb4dfc9789e264c0de0d56291ff" translate="yes" xml:space="preserve">
          <source>You can get the full code &lt;a href=&quot;https://github.com/kotlin/kotlinx.coroutines/blob/master/kotlinx-coroutines-core/jvm/test/guide/example-channel-01.kt&quot;&gt;here&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d49c5e793488db959770746c7b4a124c288e8abb" translate="yes" xml:space="preserve">
          <source>You can get the full code &lt;a href=&quot;https://github.com/kotlin/kotlinx.coroutines/blob/master/kotlinx-coroutines-core/jvm/test/guide/example-channel-02.kt&quot;&gt;here&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7282999bffa848b173d8501dd299ad893529d4e9" translate="yes" xml:space="preserve">
          <source>You can get the full code &lt;a href=&quot;https://github.com/kotlin/kotlinx.coroutines/blob/master/kotlinx-coroutines-core/jvm/test/guide/example-channel-03.kt&quot;&gt;here&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1df7a979d8055c65dcb842e68aa83bf1498ef17c" translate="yes" xml:space="preserve">
          <source>You can get the full code &lt;a href=&quot;https://github.com/kotlin/kotlinx.coroutines/blob/master/kotlinx-coroutines-core/jvm/test/guide/example-channel-04.kt&quot;&gt;here&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="681ee2654eb899faef9835ed4f7462393db29d57" translate="yes" xml:space="preserve">
          <source>You can get the full code &lt;a href=&quot;https://github.com/kotlin/kotlinx.coroutines/blob/master/kotlinx-coroutines-core/jvm/test/guide/example-channel-05.kt&quot;&gt;here&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="82a2ee3bb81466731e3b1b8e70c00d2a9e4fe639" translate="yes" xml:space="preserve">
          <source>You can get the full code &lt;a href=&quot;https://github.com/kotlin/kotlinx.coroutines/blob/master/kotlinx-coroutines-core/jvm/test/guide/example-channel-06.kt&quot;&gt;here&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2ae4d7b4269f15269cf4bd18bc149088c90345db" translate="yes" xml:space="preserve">
          <source>You can get the full code &lt;a href=&quot;https://github.com/kotlin/kotlinx.coroutines/blob/master/kotlinx-coroutines-core/jvm/test/guide/example-channel-07.kt&quot;&gt;here&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="06a86784eb51b3689a9606d56fcbd5850d6e7eb1" translate="yes" xml:space="preserve">
          <source>You can get the full code &lt;a href=&quot;https://github.com/kotlin/kotlinx.coroutines/blob/master/kotlinx-coroutines-core/jvm/test/guide/example-channel-08.kt&quot;&gt;here&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="37ed86796d35f9463986715bc461588673bce25e" translate="yes" xml:space="preserve">
          <source>You can get the full code &lt;a href=&quot;https://github.com/kotlin/kotlinx.coroutines/blob/master/kotlinx-coroutines-core/jvm/test/guide/example-channel-09.kt&quot;&gt;here&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b03f75d1ba17b38464611e736f0d4b3a2896b6b8" translate="yes" xml:space="preserve">
          <source>You can get the full code &lt;a href=&quot;https://github.com/kotlin/kotlinx.coroutines/blob/master/kotlinx-coroutines-core/jvm/test/guide/example-channel-10.kt&quot;&gt;here&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6394ee7a6269a4f3faabd166139774539ffe0d17" translate="yes" xml:space="preserve">
          <source>You can get the full code &lt;a href=&quot;https://github.com/kotlin/kotlinx.coroutines/blob/master/kotlinx-coroutines-core/jvm/test/guide/example-compose-01.kt&quot;&gt;here&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="41c97957dd735ef154a0331d52a6c013fa78d6aa" translate="yes" xml:space="preserve">
          <source>You can get the full code &lt;a href=&quot;https://github.com/kotlin/kotlinx.coroutines/blob/master/kotlinx-coroutines-core/jvm/test/guide/example-compose-02.kt&quot;&gt;here&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="93a96592496247d941339ace976aec49bdfec49a" translate="yes" xml:space="preserve">
          <source>You can get the full code &lt;a href=&quot;https://github.com/kotlin/kotlinx.coroutines/blob/master/kotlinx-coroutines-core/jvm/test/guide/example-compose-03.kt&quot;&gt;here&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fae23c9c8de49427da4fc17874848304fa057260" translate="yes" xml:space="preserve">
          <source>You can get the full code &lt;a href=&quot;https://github.com/kotlin/kotlinx.coroutines/blob/master/kotlinx-coroutines-core/jvm/test/guide/example-compose-04.kt&quot;&gt;here&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="784f00bda666b479e35ec8ff8b5649f08a4bc213" translate="yes" xml:space="preserve">
          <source>You can get the full code &lt;a href=&quot;https://github.com/kotlin/kotlinx.coroutines/blob/master/kotlinx-coroutines-core/jvm/test/guide/example-compose-05.kt&quot;&gt;here&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="26d039426fc794412798cccf343380a882dd20c2" translate="yes" xml:space="preserve">
          <source>You can get the full code &lt;a href=&quot;https://github.com/kotlin/kotlinx.coroutines/blob/master/kotlinx-coroutines-core/jvm/test/guide/example-compose-06.kt&quot;&gt;here&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a25bcde91750fcbffffaa1cb26972d8e8683def8" translate="yes" xml:space="preserve">
          <source>You can get the full code &lt;a href=&quot;https://github.com/kotlin/kotlinx.coroutines/blob/master/kotlinx-coroutines-core/jvm/test/guide/example-context-01.kt&quot;&gt;here&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="73686bde31670f2d5f001b75e93440ac0ec59cbc" translate="yes" xml:space="preserve">
          <source>You can get the full code &lt;a href=&quot;https://github.com/kotlin/kotlinx.coroutines/blob/master/kotlinx-coroutines-core/jvm/test/guide/example-context-02.kt&quot;&gt;here&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="93ff4cc29a43327eee3fa201e71bbeb50f2ce07c" translate="yes" xml:space="preserve">
          <source>You can get the full code &lt;a href=&quot;https://github.com/kotlin/kotlinx.coroutines/blob/master/kotlinx-coroutines-core/jvm/test/guide/example-context-03.kt&quot;&gt;here&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3c7a2121d9c8c566db6b24f5d1bb944fc7cea45c" translate="yes" xml:space="preserve">
          <source>You can get the full code &lt;a href=&quot;https://github.com/kotlin/kotlinx.coroutines/blob/master/kotlinx-coroutines-core/jvm/test/guide/example-context-04.kt&quot;&gt;here&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="812e99ce30640e9075b9483ceab45f956fd8fbe4" translate="yes" xml:space="preserve">
          <source>You can get the full code &lt;a href=&quot;https://github.com/kotlin/kotlinx.coroutines/blob/master/kotlinx-coroutines-core/jvm/test/guide/example-context-05.kt&quot;&gt;here&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9890b783e28c0ff5e874e08a5097eee1cbf8136c" translate="yes" xml:space="preserve">
          <source>You can get the full code &lt;a href=&quot;https://github.com/kotlin/kotlinx.coroutines/blob/master/kotlinx-coroutines-core/jvm/test/guide/example-context-06.kt&quot;&gt;here&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="94367c90540f84886d9d9dab99acf0da1d0c4c3c" translate="yes" xml:space="preserve">
          <source>You can get the full code &lt;a href=&quot;https://github.com/kotlin/kotlinx.coroutines/blob/master/kotlinx-coroutines-core/jvm/test/guide/example-context-07.kt&quot;&gt;here&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eb1efed6b1e723c9886325207ef8849bbaf02818" translate="yes" xml:space="preserve">
          <source>You can get the full code &lt;a href=&quot;https://github.com/kotlin/kotlinx.coroutines/blob/master/kotlinx-coroutines-core/jvm/test/guide/example-context-08.kt&quot;&gt;here&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7b9e588430d9c2cc5b59bc9ad91a0bd2909cb9ea" translate="yes" xml:space="preserve">
          <source>You can get the full code &lt;a href=&quot;https://github.com/kotlin/kotlinx.coroutines/blob/master/kotlinx-coroutines-core/jvm/test/guide/example-context-09.kt&quot;&gt;here&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eb6387568470f1d61f7b009e95cc74e6ba99ed32" translate="yes" xml:space="preserve">
          <source>You can get the full code &lt;a href=&quot;https://github.com/kotlin/kotlinx.coroutines/blob/master/kotlinx-coroutines-core/jvm/test/guide/example-context-10.kt&quot;&gt;here&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0ea5d54217aed853b0644d485e5417b74387b46f" translate="yes" xml:space="preserve">
          <source>You can get the full code &lt;a href=&quot;https://github.com/kotlin/kotlinx.coroutines/blob/master/kotlinx-coroutines-core/jvm/test/guide/example-context-11.kt&quot;&gt;here&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dbe9058c96c19bf0be111f29074f2633080b5dd3" translate="yes" xml:space="preserve">
          <source>You can get the full code &lt;a href=&quot;https://github.com/kotlin/kotlinx.coroutines/blob/master/kotlinx-coroutines-core/jvm/test/guide/example-exceptions-01.kt&quot;&gt;here&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a13dc61f87c3b0b882f9e334d42e6f5f9e64f346" translate="yes" xml:space="preserve">
          <source>You can get the full code &lt;a href=&quot;https://github.com/kotlin/kotlinx.coroutines/blob/master/kotlinx-coroutines-core/jvm/test/guide/example-exceptions-02.kt&quot;&gt;here&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ecb83ed93f3f12cd8023cf05ffe21c090bc91188" translate="yes" xml:space="preserve">
          <source>You can get the full code &lt;a href=&quot;https://github.com/kotlin/kotlinx.coroutines/blob/master/kotlinx-coroutines-core/jvm/test/guide/example-exceptions-03.kt&quot;&gt;here&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8f99e0d1e006eafd562a9fa2be6a8dd64ada13dd" translate="yes" xml:space="preserve">
          <source>You can get the full code &lt;a href=&quot;https://github.com/kotlin/kotlinx.coroutines/blob/master/kotlinx-coroutines-core/jvm/test/guide/example-exceptions-04.kt&quot;&gt;here&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="46fabd4ed1a822431cd52765c14e71cce44c9579" translate="yes" xml:space="preserve">
          <source>You can get the full code &lt;a href=&quot;https://github.com/kotlin/kotlinx.coroutines/blob/master/kotlinx-coroutines-core/jvm/test/guide/example-exceptions-05.kt&quot;&gt;here&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9c638e06f7ce08295a876dc2eb791263022004f5" translate="yes" xml:space="preserve">
          <source>You can get the full code &lt;a href=&quot;https://github.com/kotlin/kotlinx.coroutines/blob/master/kotlinx-coroutines-core/jvm/test/guide/example-exceptions-06.kt&quot;&gt;here&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="de48df51c6c1d7786a71a18b71b4bbba308e649f" translate="yes" xml:space="preserve">
          <source>You can get the full code &lt;a href=&quot;https://github.com/kotlin/kotlinx.coroutines/blob/master/kotlinx-coroutines-core/jvm/test/guide/example-select-01.kt&quot;&gt;here&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8a1e89564beb4c80678f62353d794be6615e3613" translate="yes" xml:space="preserve">
          <source>You can get the full code &lt;a href=&quot;https://github.com/kotlin/kotlinx.coroutines/blob/master/kotlinx-coroutines-core/jvm/test/guide/example-select-02.kt&quot;&gt;here&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d344e42f486ed9ac4efce1d653935a63ab83ebd1" translate="yes" xml:space="preserve">
          <source>You can get the full code &lt;a href=&quot;https://github.com/kotlin/kotlinx.coroutines/blob/master/kotlinx-coroutines-core/jvm/test/guide/example-select-03.kt&quot;&gt;here&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cb75e7a42ba6b956d6fadf13f881f55b0f715192" translate="yes" xml:space="preserve">
          <source>You can get the full code &lt;a href=&quot;https://github.com/kotlin/kotlinx.coroutines/blob/master/kotlinx-coroutines-core/jvm/test/guide/example-select-04.kt&quot;&gt;here&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d08da7c966e1599fb8e7dc75624cccfc78d17860" translate="yes" xml:space="preserve">
          <source>You can get the full code &lt;a href=&quot;https://github.com/kotlin/kotlinx.coroutines/blob/master/kotlinx-coroutines-core/jvm/test/guide/example-select-05.kt&quot;&gt;here&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4bc2cc50ce457da29396ea0d3d33f66429e76a23" translate="yes" xml:space="preserve">
          <source>You can get the full code &lt;a href=&quot;https://github.com/kotlin/kotlinx.coroutines/blob/master/kotlinx-coroutines-core/jvm/test/guide/example-supervision-01.kt&quot;&gt;here&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6c2adf76667c6f0fb9a8e32876513ca26e9ff917" translate="yes" xml:space="preserve">
          <source>You can get the full code &lt;a href=&quot;https://github.com/kotlin/kotlinx.coroutines/blob/master/kotlinx-coroutines-core/jvm/test/guide/example-supervision-02.kt&quot;&gt;here&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="77dbe086c55eddb778161200a3bf363beacf7291" translate="yes" xml:space="preserve">
          <source>You can get the full code &lt;a href=&quot;https://github.com/kotlin/kotlinx.coroutines/blob/master/kotlinx-coroutines-core/jvm/test/guide/example-supervision-03.kt&quot;&gt;here&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="47c84a8625ffae31b463d9e185bd472cd1fa1c3f" translate="yes" xml:space="preserve">
          <source>You can get the full code &lt;a href=&quot;https://github.com/kotlin/kotlinx.coroutines/blob/master/kotlinx-coroutines-core/jvm/test/guide/example-sync-01.kt&quot;&gt;here&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b8f928a05fe7a01def414611e515a1b206e28f5a" translate="yes" xml:space="preserve">
          <source>You can get the full code &lt;a href=&quot;https://github.com/kotlin/kotlinx.coroutines/blob/master/kotlinx-coroutines-core/jvm/test/guide/example-sync-02.kt&quot;&gt;here&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bb469b7d343f50c50ba4ed96df1b98d3bb483bd9" translate="yes" xml:space="preserve">
          <source>You can get the full code &lt;a href=&quot;https://github.com/kotlin/kotlinx.coroutines/blob/master/kotlinx-coroutines-core/jvm/test/guide/example-sync-03.kt&quot;&gt;here&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="82cc964f15c6b887f224b4606b2b08b5f4ef7498" translate="yes" xml:space="preserve">
          <source>You can get the full code &lt;a href=&quot;https://github.com/kotlin/kotlinx.coroutines/blob/master/kotlinx-coroutines-core/jvm/test/guide/example-sync-04.kt&quot;&gt;here&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="12d338a3ac143c5520de1239b84de0bd600784b6" translate="yes" xml:space="preserve">
          <source>You can get the full code &lt;a href=&quot;https://github.com/kotlin/kotlinx.coroutines/blob/master/kotlinx-coroutines-core/jvm/test/guide/example-sync-05.kt&quot;&gt;here&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="19ec75dcda21ea09192d67f044614b2f3ee88459" translate="yes" xml:space="preserve">
          <source>You can get the full code &lt;a href=&quot;https://github.com/kotlin/kotlinx.coroutines/blob/master/kotlinx-coroutines-core/jvm/test/guide/example-sync-06.kt&quot;&gt;here&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4f5161508758d5c523bebc177366be7047bb670c" translate="yes" xml:space="preserve">
          <source>You can get the full code &lt;a href=&quot;https://github.com/kotlin/kotlinx.coroutines/blob/master/kotlinx-coroutines-core/jvm/test/guide/example-sync-07.kt&quot;&gt;here&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1ca4e90c659377b1f8ac8a4b48d3ff66d9036928" translate="yes" xml:space="preserve">
          <source>You can get the reference to a class of a specific object with the same &lt;code&gt;::class&lt;/code&gt; syntax by using the object as a receiver:</source>
          <target state="translated">通过将对象用作接收者，可以使用 &lt;code&gt;::class&lt;/code&gt; 语法获取对特定对象类的引用：</target>
        </trans-unit>
        <trans-unit id="83ce5924a4cb77a6210ebd37693fdc10e92e7301" translate="yes" xml:space="preserve">
          <source>You can get the size/length of a collection &lt;code&gt;c&lt;/code&gt; with &lt;code&gt;c.size&lt;/code&gt; (except for string objects, where you for legacy Java reasons must use &lt;code&gt;s.length&lt;/code&gt; instead).</source>
          <target state="translated">您可以使用 &lt;code&gt;c.size&lt;/code&gt; 获取集合 &lt;code&gt;c&lt;/code&gt; 的大小/长度（字符串对象除外，由于传统Java的原因，您必须使用 &lt;code&gt;s.length&lt;/code&gt; 代替）。</target>
        </trans-unit>
        <trans-unit id="fa16f7442b79f32a2e9a2e80895ba7c2e1dcd589" translate="yes" xml:space="preserve">
          <source>You can have new names for inner and nested classes:</source>
          <target state="translated">你可以为内部类和嵌套类起新的名字。</target>
        </trans-unit>
        <trans-unit id="bc9c20b2fda9a8d15545332a2ff6e1d40410b9c1" translate="yes" xml:space="preserve">
          <source>You can inline some JavaScript code into your Kotlin code using the &lt;a href=&quot;../../api/latest/jvm/stdlib/kotlin.js/js&quot;&gt;&lt;code&gt;js(&quot;...&quot;)&lt;/code&gt;&lt;/a&gt; function. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4f53a8d23cba7d9bd1275e4d37f76d00800886a3" translate="yes" xml:space="preserve">
          <source>You can inline some JavaScript code into your Kotlin code using the &lt;a href=&quot;../../api/latest/jvm/stdlib/kotlin.js/js&quot;&gt;js(&quot;&amp;hellip;&quot;)&lt;/a&gt; function. For example:</source>
          <target state="translated">您可以使用&lt;a href=&quot;../../api/latest/jvm/stdlib/kotlin.js/js&quot;&gt;js（&amp;ldquo; ...&amp;rdquo;）&lt;/a&gt;函数将一些JavaScript代码内联到Kotlin代码中。例如：</target>
        </trans-unit>
        <trans-unit id="f47796d4b0fb532ca1bc556bac27b46887679240" translate="yes" xml:space="preserve">
          <source>You can iterate over a map in several different ways, depending on whether you want the keys, the values, or both:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0b0c8e8b13d40f2c58ec894753da0831f964ab17" translate="yes" xml:space="preserve">
          <source>You can manage Pod dependencies directly in IntelliJ IDEA and enjoy all the additional features such as code highlighting and completion. You can build the whole Kotlin project with Gradle and not ever have to switch to Xcode. Use Xcode only when you need to write Swift/Objective-C code or run your application on a simulator or device.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a25da8f2a9aa9d800da31acb5dadbc2f52f9d6b6" translate="yes" xml:space="preserve">
          <source>You can now check whether a lateinit var has been initialized using &lt;code&gt;isInitialized&lt;/code&gt; on the property reference:</source>
          <target state="translated">现在，您可以使用属性参考上的 &lt;code&gt;isInitialized&lt;/code&gt; 检查lateinit var是否已初始化：</target>
        </trans-unit>
        <trans-unit id="54766d5d66f97aaff7dc379143fdd1ab648fb893" translate="yes" xml:space="preserve">
          <source>You can now consume the Java сlass from Kotlin or vice versa without any further actions.</source>
          <target state="translated">现在,您可以从Kotlin中消耗Java сlass,反之亦然,无需任何进一步的操作。</target>
        </trans-unit>
        <trans-unit id="dae752ea380d04735dfaf15ed2f82c8bcd6c4fbd" translate="yes" xml:space="preserve">
          <source>You can now describe declarations which should be imported from JavaScript modules more precisely. If you add the &lt;code&gt;@JsModule(&quot;&amp;lt;module-name&amp;gt;&quot;)&lt;/code&gt; annotation on an external declaration it will be properly imported to a module system (either CommonJS or AMD) during the compilation. For example, with CommonJS the declaration will be imported via &lt;code&gt;require(...)&lt;/code&gt; function. Additionally, if you want to import a declaration either as a module or as a global JavaScript object, you can use the &lt;code&gt;@JsNonModule&lt;/code&gt; annotation.</source>
          <target state="translated">现在，您可以描述应从JavaScript模块更精确地导入的声明。如果在外部声明上添加 &lt;code&gt;@JsModule(&quot;&amp;lt;module-name&amp;gt;&quot;)&lt;/code&gt; 批注，它将在编译期间正确导入到模块系统（CommonJS或AMD）。例如，对于CommonJS，声明将通过 &lt;code&gt;require(...)&lt;/code&gt; 函数导入。此外，如果要将声明作为模块或作为全局JavaScript对象导入，则可以使用 &lt;code&gt;@JsNonModule&lt;/code&gt; 批注。</target>
        </trans-unit>
        <trans-unit id="5e29c74e4a2a8ef54240764f7edbbe3ee0c38e34" translate="yes" xml:space="preserve">
          <source>You can now mark property accessors with the &lt;code&gt;inline&lt;/code&gt; modifier if the properties don't have a backing field. Such accessors are compiled in the same way as &lt;a href=&quot;inline-functions&quot;&gt;inline functions&lt;/a&gt;.</source>
          <target state="translated">现在，如果属性没有后备字段，则可以使用 &lt;code&gt;inline&lt;/code&gt; 修饰符标记属性访问器。此类访问器的编译方式与&lt;a href=&quot;inline-functions&quot;&gt;内联函数&lt;/a&gt;相同。</target>
        </trans-unit>
        <trans-unit id="731c21c9266361cc04bba584e1b813d21461bb53" translate="yes" xml:space="preserve">
          <source>You can now use the &lt;a href=&quot;delegated-properties&quot;&gt;delegated property&lt;/a&gt; syntax with local variables. One possible use is defining a lazily evaluated local variable:</source>
          <target state="translated">现在，您可以将&lt;a href=&quot;delegated-properties&quot;&gt;委托属性&lt;/a&gt;语法与局部变量一起使用。一种可能的用途是定义一个惰性计算的局部变量：</target>
        </trans-unit>
        <trans-unit id="2d2debd7bdb710fb4b3a520a0a14978615f28fb9" translate="yes" xml:space="preserve">
          <source>You can now use the &lt;a href=&quot;multi-declarations&quot;&gt;destructuring declaration&lt;/a&gt; syntax to unpack the arguments passed to a lambda. Here's an example:</source>
          <target state="translated">现在，您可以使用&lt;a href=&quot;multi-declarations&quot;&gt;解构声明&lt;/a&gt;语法来解压缩传递给lambda的参数。这是一个例子：</target>
        </trans-unit>
        <trans-unit id="ecb49bad6212d472340febef9c4a92c2dc37fdc2" translate="yes" xml:space="preserve">
          <source>You can now use the &lt;code&gt;::&lt;/code&gt; operator to get a &lt;a href=&quot;reflection#function-references&quot;&gt;member reference&lt;/a&gt; pointing to a method or property of a specific object instance. Previously this could only be expressed with a lambda. Here's an example:</source>
          <target state="translated">现在，您可以使用 &lt;code&gt;::&lt;/code&gt; 运算符来获取指向特定对象实例的方法或属性的&lt;a href=&quot;reflection#function-references&quot;&gt;成员引用&lt;/a&gt;。以前只能用lambda表示。这是一个例子：</target>
        </trans-unit>
        <trans-unit id="4ceea1bc16cd15000fe1af05ee40d4a687405be5" translate="yes" xml:space="preserve">
          <source>You can pass a &lt;a href=&quot;#variable-number-of-arguments-varargs&quot;&gt;variable number of arguments (&lt;code&gt;vararg&lt;/code&gt;)&lt;/a&gt; with names using the &lt;code&gt;spread&lt;/code&gt; operator:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b847d0da651df7d068d98a219a497acc5b29966c" translate="yes" xml:space="preserve">
          <source>You can play with &lt;a href=&quot;https://play.kotlinlang.org/koans&quot;&gt;Koans online&lt;/a&gt;.</source>
          <target state="translated">您可以&lt;a href=&quot;https://play.kotlinlang.org/koans&quot;&gt;在线&lt;/a&gt;玩Koans。</target>
        </trans-unit>
        <trans-unit id="0f9b2799acc934043b5a12499acb26bb13304416" translate="yes" xml:space="preserve">
          <source>You can project a type with &lt;strong&gt;in&lt;/strong&gt; as well:</source>
          <target state="translated">您也可以使用&lt;strong&gt;in&lt;/strong&gt;投射类型：</target>
        </trans-unit>
        <trans-unit id="d0a18810b807899fc87347674789ae25b08a8358" translate="yes" xml:space="preserve">
          <source>You can provide different aliases for function types:</source>
          <target state="translated">你可以为函数类型提供不同的别名。</target>
        </trans-unit>
        <trans-unit id="2ac995756fb4e6ea0b39f2996ee45ae6f8c9a51b" translate="yes" xml:space="preserve">
          <source>You can read more about debugging facilities in the documentation for &lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/new-coroutine-context.html&quot;&gt;newCoroutineContext&lt;/a&gt; function.</source>
          <target state="translated">您可以在&lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/new-coroutine-context.html&quot;&gt;newCoroutineContext&lt;/a&gt;函数的文档中阅读有关调试功能的更多信息。</target>
        </trans-unit>
        <trans-unit id="2f87c72b40bcba9466f0aa96e194f1acd6171e91" translate="yes" xml:space="preserve">
          <source>You can refer to an instance method of a particular object:</source>
          <target state="translated">你可以引用一个特定对象的实例方法。</target>
        </trans-unit>
        <trans-unit id="5ff80c89cfeb733bb184d40dfed14def09cc94ad" translate="yes" xml:space="preserve">
          <source>You can remove leading whitespace with &lt;a href=&quot;../../api/latest/jvm/stdlib/kotlin.text/trim-margin&quot;&gt;&lt;code&gt;trimMargin()&lt;/code&gt;&lt;/a&gt; function:</source>
          <target state="translated">您可以使用&lt;a href=&quot;../../api/latest/jvm/stdlib/kotlin.text/trim-margin&quot;&gt; &lt;code&gt;trimMargin()&lt;/code&gt; &lt;/a&gt;函数删除开头的空格：</target>
        </trans-unit>
        <trans-unit id="57882cb74d776bc5fbc33f0c06b3fd9ea47ae4fa" translate="yes" xml:space="preserve">
          <source>You can restrict the types that can be used for a generic type parameter, by specifying that it must be an instance of a specific type or of a subclass thereof. If you've got a class or interface called &lt;code&gt;Vehicle&lt;/code&gt;, you can do:</source>
          <target state="translated">通过指定必须是特定类型或其子类的实例，可以限制可用于通用类型参数的类型。如果您有一个名为 &lt;code&gt;Vehicle&lt;/code&gt; 的类或接口，则可以执行以下操作：</target>
        </trans-unit>
        <trans-unit id="789020964fbfabd177e25bb41fd30d8a78fe24ad" translate="yes" xml:space="preserve">
          <source>You can retrieve all possible ranges of the collection elements of a given size. The function for getting them is called &lt;a href=&quot;../../api/latest/jvm/stdlib/kotlin.collections/windowed&quot;&gt;&lt;code&gt;windowed()&lt;/code&gt;&lt;/a&gt;: it returns a list of element ranges that you would see if you were looking at the collection through a sliding window of the given size. Unlike &lt;code&gt;chunked()&lt;/code&gt;, &lt;code&gt;windowed()&lt;/code&gt; returns element ranges (&lt;em&gt;windows&lt;/em&gt;) starting from &lt;em&gt;each&lt;/em&gt; collection element. All the windows are returned as elements of a single &lt;code&gt;List&lt;/code&gt;.</source>
          <target state="translated">您可以检索给定大小的收集元素的所有可能范围。获取它们的函数称为&lt;a href=&quot;../../api/latest/jvm/stdlib/kotlin.collections/windowed&quot;&gt; &lt;code&gt;windowed()&lt;/code&gt; &lt;/a&gt;：它返回元素范围的列表，如果您正在通过给定大小的滑动窗口查看集合，将会看到这些范围。与 &lt;code&gt;chunked()&lt;/code&gt; 不同， &lt;code&gt;windowed()&lt;/code&gt; 返回从&lt;em&gt;每个&lt;/em&gt; collection元素开始的元素范围（&lt;em&gt;windows&lt;/em&gt;）。所有窗口都作为单个 &lt;code&gt;List&lt;/code&gt; 的元素返回。&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="6748314d7eef0a810faa12036433f144a6967ecd" translate="yes" xml:space="preserve">
          <source>You can retrieve the collection in the reversed order using the &lt;a href=&quot;../../api/latest/jvm/stdlib/kotlin.collections/reversed&quot;&gt;&lt;code&gt;reversed()&lt;/code&gt;&lt;/a&gt; function.</source>
          <target state="translated">您可以使用&lt;a href=&quot;../../api/latest/jvm/stdlib/kotlin.collections/reversed&quot;&gt; &lt;code&gt;reversed()&lt;/code&gt; &lt;/a&gt;函数以相反的顺序检索集合。</target>
        </trans-unit>
        <trans-unit id="0ebe55f9564d5e3ad7a74adc929dc591d4502a37" translate="yes" xml:space="preserve">
          <source>You can run and see that it prints three lines and terminates:</source>
          <target state="translated">你可以运行,看到它打印出三行字就终止了。</target>
        </trans-unit>
        <trans-unit id="3899a5e7f5d4504a18c48d8a47079578d26a1217" translate="yes" xml:space="preserve">
          <source>You can share your learning materials publicly or privately with your students or co-workers on &lt;a href=&quot;https://stepik.org/&quot;&gt;Stepik&lt;/a&gt;, a learning management and MOOC platform. Or you can save your course as an archive file.</source>
          <target state="translated">您可以在学习管理和MOOC平台&lt;a href=&quot;https://stepik.org/&quot;&gt;Stepik&lt;/a&gt;上与学生或同事公开或私下共享学习资料。或者，您可以将课程另存为存档文件。</target>
        </trans-unit>
        <trans-unit id="fe3fa0ef816d4ce0761831d438c956e302f11467" translate="yes" xml:space="preserve">
          <source>You can simply distribute two JS files, &lt;code&gt;sample-library.js&lt;/code&gt; and &lt;code&gt;sample-library.meta.js&lt;/code&gt;. The former file contains translated JavaScript code, the latter file contains some meta-information about Kotlin code, which is needed by compiler.</source>
          <target state="translated">您可以简单地分发两个JS文件 &lt;code&gt;sample-library.js&lt;/code&gt; 和 &lt;code&gt;sample-library.meta.js&lt;/code&gt; 。前一个文件包含已翻译的JavaScript代码，后一个文件包含一些有关Kotlin代码的元信息，编译器需要这些信息。</target>
        </trans-unit>
        <trans-unit id="9802ac6f09d28b3393604c88088a4755169899f0" translate="yes" xml:space="preserve">
          <source>You can skip all arguments with default values:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ca3e35674130ecc1b7284fff81c3f8b8d2f6e75b" translate="yes" xml:space="preserve">
          <source>You can skip some arguments with default values. However, after the first skipped argument, you must name all subsequent arguments:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9a70114b280771bfb0e542769ce612067e9f2042" translate="yes" xml:space="preserve">
          <source>You can solve the tasks right inside IntelliJ IDEA or Android Studio by &lt;a href=&quot;https://www.jetbrains.com/help/education/install-edutools-plugin.html&quot;&gt;installing the EduTools plugin&lt;/a&gt; and &lt;a href=&quot;https://www.jetbrains.com/help/education/learner-start-guide.html?section=Kotlin%20Koans&quot;&gt;choosing Kotlin Koans course&lt;/a&gt;.</source>
          <target state="translated">您可以通过&lt;a href=&quot;https://www.jetbrains.com/help/education/install-edutools-plugin.html&quot;&gt;安装EduTools插件&lt;/a&gt;并&lt;a href=&quot;https://www.jetbrains.com/help/education/learner-start-guide.html?section=Kotlin%20Koans&quot;&gt;选择Kotlin Koans课程&lt;/a&gt;来解决IntelliJ IDEA或Android Studio内部的任务。</target>
        </trans-unit>
        <trans-unit id="bbe78124b1333b52b02931bdbaa673cb561f22ab" translate="yes" xml:space="preserve">
          <source>You can specify all-open annotations directly, using the &lt;code&gt;annotation&lt;/code&gt; plugin option, or enable the &quot;preset&quot;. The only preset available now for all-open is &lt;code&gt;spring&lt;/code&gt;.</source>
          <target state="translated">您可以使用 &lt;code&gt;annotation&lt;/code&gt; 插件选项直接指定全开注释，或启用&amp;ldquo;预设&amp;rdquo;。现在，全开唯一可用的预设是 &lt;code&gt;spring&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="7416a7c10099b29e76cc99c3e549a1054543d7c3" translate="yes" xml:space="preserve">
          <source>You can specify the type for the whole destructured parameter or for a specific component separately:</source>
          <target state="translated">您可以为整个解构参数或为特定组件分别指定类型。</target>
        </trans-unit>
        <trans-unit id="0633e65106ef7169029e57bed473202743744981" translate="yes" xml:space="preserve">
          <source>You can then create an instance of this class in a way that looks similar to Python, as if the class were a function (but this is just syntactic sugar - unlike Python, classes in Kotlin aren't really functions):</source>
          <target state="translated">然后,你可以以一种类似于Python的方式创建这个类的实例,就像这个类是一个函数一样(但这只是语法糖--与Python不同,Kotlin中的类不是真正的函数)。</target>
        </trans-unit>
        <trans-unit id="1e547a35ed713e9c8b9e49c90fb3cf2b6f5f0a68" translate="yes" xml:space="preserve">
          <source>You can then set the `KONAN_HOME` env variable to the generated `dist` folder in the git repository.</source>
          <target state="translated">然后你可以将`KONAN_HOME`env变量设置为git仓库中生成的`dist`文件夹。</target>
        </trans-unit>
        <trans-unit id="ccd9500cae6bd4a4f06bc298d420ccf8008a9fc0" translate="yes" xml:space="preserve">
          <source>You can use &lt;a href=&quot;https://kotlinlang.org/lp/mobile/&quot;&gt;Kotlin Multiplatform Mobile (KMM)&lt;/a&gt; to create multiplatform mobile applications with code shared between Android and iOS.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a5febffcbd27e0bfeb6dfce6d095ec23ee8186a5" translate="yes" xml:space="preserve">
          <source>You can use a &lt;a href=&quot;coding-conventions#trailing-commas&quot;&gt;trailing comma&lt;/a&gt; when you declare class properties:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6e29d0a03a21f3d0a0a32f4c42d96da6209cd788" translate="yes" xml:space="preserve">
          <source>You can use a &lt;a href=&quot;coding-conventions#trailing-commas&quot;&gt;trailing comma&lt;/a&gt; when you declare function parameters:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5a56286d617c39a79010145fd236059551e9d2c9" translate="yes" xml:space="preserve">
          <source>You can use a Kotlin Multiplatform project with native targets as a CocoaPods dependency (Kotlin Pod). You can include such a dependency in the Podfile of the Xcode project by its name and path to the project directory containing the generated Podspec. This dependency will be automatically built (and rebuilt) along with this project. Such an approach simplifies importing to Xcode by removing a need to write the corresponding Gradle tasks and Xcode build steps manually.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="876452eafe63d003438a007f9bfa87db834c622f" translate="yes" xml:space="preserve">
          <source>You can use interfaces to express this concept in statically typed Kotlin:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0ab66a95c7e7438fc7cd3a432ce354e9488d354e" translate="yes" xml:space="preserve">
          <source>You can use shorthand for a dependency on a Kotlin module, for example, kotlin(&quot;test&quot;) for &quot;org.jetbrains.kotlin:kotlin-test&quot;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="23d004a67942f457544cc50dda56e14265bcec61" translate="yes" xml:space="preserve">
          <source>You can use the destructuring declarations syntax for lambda parameters. If a lambda has a parameter of the &lt;code&gt;Pair&lt;/code&gt; type (or &lt;code&gt;Map.Entry&lt;/code&gt;, or any other type that has the appropriate &lt;code&gt;componentN&lt;/code&gt; functions), you can introduce several new parameters instead of one by putting them in parentheses:</source>
          <target state="translated">您可以对lambda参数使用解构声明语法。如果lambda具有 &lt;code&gt;Pair&lt;/code&gt; 类型的参数（或 &lt;code&gt;Map.Entry&lt;/code&gt; 或具有适当 &lt;code&gt;componentN&lt;/code&gt; 函数的任何其他类型），则可以通过在括号中引入几个新参数来代替一个：</target>
        </trans-unit>
        <trans-unit id="facd6d40eb3f5564626d77aed93f4d7d3b04da04" translate="yes" xml:space="preserve">
          <source>You can use these declarations in your application like this:</source>
          <target state="translated">你可以在你的应用程序中像这样使用这些声明。</target>
        </trans-unit>
        <trans-unit id="7a1afc08c8a0b8d39d787e322fba33a21d586609" translate="yes" xml:space="preserve">
          <source>You can use this for creating instances of SAM interfaces:</source>
          <target state="translated">您可以使用它来创建SAM接口的实例。</target>
        </trans-unit>
        <trans-unit id="ba1f6362f79761437c8552b587d3323476eb24dd" translate="yes" xml:space="preserve">
          <source>You can use this function for huge files.</source>
          <target state="translated">你可以使用这个功能来处理巨大的文件。</target>
        </trans-unit>
        <trans-unit id="a2655719e1444a54d71751742c8066c44b2c42f4" translate="yes" xml:space="preserve">
          <source>You can use underscores to make number constants more readable:</source>
          <target state="translated">你可以使用下划线来使数字常数更易读。</target>
        </trans-unit>
        <trans-unit id="9a2d5af3d5d920600db45ce7403b1bbc2d4143bf" translate="yes" xml:space="preserve">
          <source>You can write your custom tests using EduTools testing framework to automatically verify the learner's solution. Every task has a &lt;code&gt;Tests.kt&lt;/code&gt; file already filled in with a test template that you will need to modify:</source>
          <target state="translated">您可以使用EduTools测试框架编写自定义测试，以自动验证学习者的解决方案。每个任务都有一个 &lt;code&gt;Tests.kt&lt;/code&gt; 文件，该文件已经填充了您需要修改的测试模板：</target>
        </trans-unit>
        <trans-unit id="0b76a989e0326042cd6ca07e425888cc3592b0ef" translate="yes" xml:space="preserve">
          <source>You can't override a function with default arguments.</source>
          <target state="translated">你不能用默认参数覆盖一个函数。</target>
        </trans-unit>
        <trans-unit id="bd1d4c1d4d4bd7a8c7ec8e7cf6cca11032b78ede" translate="yes" xml:space="preserve">
          <source>You could also &lt;strong&gt;share business logic between your web interface and mobile apps&lt;/strong&gt; for Android and iOS, and avoid duplicating commonly used functionality like providing abstractions around REST API endpoints, user authentication, or your domain models.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ac91b17cf6089c6783b65faf12362194a2bd6d1a" translate="yes" xml:space="preserve">
          <source>You could describe it from Kotlin as follows:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1192cca4ed39c2b80b09c21cde4372aab2020231" translate="yes" xml:space="preserve">
          <source>You could have said &lt;code&gt;${this.name}&lt;/code&gt;, but that's redundant and generally discouraged. Oneliner functions can be declared with an &lt;code&gt;=&lt;/code&gt;:</source>
          <target state="translated">您可能已经说过 &lt;code&gt;${this.name}&lt;/code&gt; ，但这是多余的，通常不建议使用。可以使用 &lt;code&gt;=&lt;/code&gt; 声明Oneliner函数：</target>
        </trans-unit>
        <trans-unit id="e67a1051e5024516f72dbdcff59af1daa5ee2c3c" translate="yes" xml:space="preserve">
          <source>You don't have to write your whole application in Kotlin/JS, either &amp;ndash; you can also &lt;strong&gt;generate libraries from your Kotlin code&lt;/strong&gt; that can be consumed as modules from any code base written in JavaScript or TypeScript, regardless of other frameworks or technologies used. This approach of &lt;strong&gt;creating hybrid applications&lt;/strong&gt; allows you to leverage the competencies that you and your team might already have around web development, while helping you &lt;strong&gt;reduce the amount of duplicated work&lt;/strong&gt;, and making it easier to keep your web target consistent with other targets of your application.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a43eb2d8768ac5031fa984ae424d3f7c70dba636" translate="yes" xml:space="preserve">
          <source>You enable the library using the same configuration as in Java:</source>
          <target state="translated">您可以使用与Java中相同的配置来启用该库。</target>
        </trans-unit>
        <trans-unit id="8c5b9dd560be06ac6111cb55eef0859721717b5b" translate="yes" xml:space="preserve">
          <source>You may use the Gradle plugin to build &lt;em&gt;Kotlin/Native&lt;/em&gt; projects. Builds of the plugin are &lt;a href=&quot;https://plugins.gradle.org/plugin/org.jetbrains.kotlin.platform.native&quot;&gt;available&lt;/a&gt; at the Gradle plugin portal, so you can apply it using Gradle plugin DSL:</source>
          <target state="translated">您可以使用Gradle插件构建&lt;em&gt;Kotlin / Native&lt;/em&gt;项目。&lt;a href=&quot;https://plugins.gradle.org/plugin/org.jetbrains.kotlin.platform.native&quot;&gt;可以&lt;/a&gt;在Gradle插件门户上找到该插件的版本，因此您可以使用Gradle插件DSL应用它：</target>
        </trans-unit>
        <trans-unit id="7b93d76ae603f78021ce86cac8be9e4dcecceb84" translate="yes" xml:space="preserve">
          <source>You may use this function on huge files.</source>
          <target state="translated">您可以在大型文件上使用此功能。</target>
        </trans-unit>
        <trans-unit id="26741d0eb2f430b13eb338fb534b1d58b417b964" translate="yes" xml:space="preserve">
          <source>You may want to compile Kotlin to JavaScript in the following scenarios:</source>
          <target state="translated">在以下情况下,你可能需要将Kotlin编译成JavaScript。</target>
        </trans-unit>
        <trans-unit id="6b21c94af91224b474e097b0c6083e60a97489de" translate="yes" xml:space="preserve">
          <source>You obtain the reference to an exact class of an object, for instance &lt;code&gt;GoodWidget&lt;/code&gt; or &lt;code&gt;BadWidget&lt;/code&gt;, despite the type of the receiver expression (&lt;code&gt;Widget&lt;/code&gt;).</source>
          <target state="translated">尽管接收方表达式（ &lt;code&gt;Widget&lt;/code&gt; ）的类型 &lt;code&gt;BadWidget&lt;/code&gt; ，但您仍获得对对象的确切类（例如 &lt;code&gt;GoodWidget&lt;/code&gt; 或BadWidget）的引用。</target>
        </trans-unit>
        <trans-unit id="e9d1097215c7ce79f8eea707d8c49c4f618bc709" translate="yes" xml:space="preserve">
          <source>You should declare it like this in Kotlin:</source>
          <target state="translated">你应该在Kotlin中这样声明。</target>
        </trans-unit>
        <trans-unit id="ba5ac69fce378c46fdc793e82851d4f52cbab648" translate="yes" xml:space="preserve">
          <source>You should have the &lt;code&gt;curl&lt;/code&gt; library binaries on Windows to make the sample work. You may build &lt;code&gt;curl&lt;/code&gt; from &lt;a href=&quot;https://curl.haxx.se/download.html&quot;&gt;sources&lt;/a&gt; on Windows (you'll need Visual Studio or Windows SDK Commandline tools), for more details, see the &lt;a href=&quot;https://jonnyzzz.com/blog/2018/10/29/kn-libcurl-windows/&quot;&gt;related blog post&lt;/a&gt;. Alternatively, you may also want to consider a &lt;a href=&quot;https://www.msys2.org/&quot;&gt;MinGW/MSYS2&lt;/a&gt;&lt;code&gt;curl&lt;/code&gt; binary.</source>
          <target state="translated">您应该在Windows上具有 &lt;code&gt;curl&lt;/code&gt; 库二进制文件才能使示例工作。您可以从Windows上的&lt;a href=&quot;https://curl.haxx.se/download.html&quot;&gt;源&lt;/a&gt;构建 &lt;code&gt;curl&lt;/code&gt; （您将需要Visual Studio或Windows SDK Commandline工具），有关更多详细信息，请参见&lt;a href=&quot;https://jonnyzzz.com/blog/2018/10/29/kn-libcurl-windows/&quot;&gt;相关的博客文章&lt;/a&gt;。或者，您可能还需要考虑&lt;a href=&quot;https://www.msys2.org/&quot;&gt;MinGW / MSYS2 &lt;/a&gt; &lt;code&gt;curl&lt;/code&gt; 二进制文件。</target>
        </trans-unit>
        <trans-unit id="d2c16cfd868158d17c8a943cc0fe8583db109224" translate="yes" xml:space="preserve">
          <source>You use &lt;code&gt;ButterKnife&lt;/code&gt; with Kotlin in the same way as you use it with Java. Let's see first the changes in the Gradle build script, and then highlight some of the differences in the code.</source>
          <target state="translated">将 &lt;code&gt;ButterKnife&lt;/code&gt; 与Kotlin一起使用的方式与与Java一起使用的方式相同。我们首先来看一下Gradle构建脚本中的更改，然后重点介绍代码中的一些差异。</target>
        </trans-unit>
        <trans-unit id="3766e71e623980c3885401351e9207e799d15efc" translate="yes" xml:space="preserve">
          <source>You use the &lt;code&gt;@{}&lt;/code&gt; syntax for writing expressions, which can now refer Kotlin &lt;a href=&quot;../reference/properties&quot;&gt;properties&lt;/a&gt;:</source>
          <target state="translated">您使用 &lt;code&gt;@{}&lt;/code&gt; 语法编写表达式，现在可以引用Kotlin &lt;a href=&quot;../reference/properties&quot;&gt;属性&lt;/a&gt;：</target>
        </trans-unit>
        <trans-unit id="7371a5eb40e8898444843c355b1f44f0b507ad58" translate="yes" xml:space="preserve">
          <source>You will see the following result:</source>
          <target state="translated">你会看到以下结果。</target>
        </trans-unit>
        <trans-unit id="0118c0fbc8648cd3beb9e0293fd3f787a8fa6a4d" translate="yes" xml:space="preserve">
          <source>Your first coroutine</source>
          <target state="translated">您的第一个coroutine</target>
        </trans-unit>
        <trans-unit id="064165739c6cf301db05217984d7500f088d1114" translate="yes" xml:space="preserve">
          <source>Your first coroutine with Kotlin</source>
          <target state="translated">你的第一个使用Kotlin的coroutine</target>
        </trans-unit>
        <trans-unit id="c66f81aee47f8cf3c5b0a673bd5e10d082523708" translate="yes" xml:space="preserve">
          <source>Your second option is the safe call operator, written &lt;code&gt;?.&lt;/code&gt;:</source>
          <target state="translated">您的第二个选择是安全呼叫接线员，写成 &lt;code&gt;?.&lt;/code&gt; ：</target>
        </trans-unit>
        <trans-unit id="7b93081b4ec78bda06922bbc837b7a1c49e2d4cd" translate="yes" xml:space="preserve">
          <source>Zero shows that the objects are equal.</source>
          <target state="translated">零表明对象是相等的。</target>
        </trans-unit>
        <trans-unit id="281d4deef155f3f504d99a312a022a397d572373" translate="yes" xml:space="preserve">
          <source>Zipping</source>
          <target state="translated">Zipping</target>
        </trans-unit>
        <trans-unit id="db0ab1ea3b89573c3806bcc4be61b05ee7dfc9db" translate="yes" xml:space="preserve">
          <source>a &lt;a href=&quot;#lambda-expressions-and-anonymous-functions&quot;&gt;lambda expression&lt;/a&gt;: &lt;code&gt;{ a, b -&amp;gt; a + b }&lt;/code&gt;,</source>
          <target state="translated">一个&lt;a href=&quot;#lambda-expressions-and-anonymous-functions&quot;&gt;lambda表达式&lt;/a&gt;： &lt;code&gt;{ a, b -&amp;gt; a + b }&lt;/code&gt; ，</target>
        </trans-unit>
        <trans-unit id="d5fdde91811b69b04ede32d835a02536728560c3" translate="yes" xml:space="preserve">
          <source>a &lt;a href=&quot;reflection#constructor-references&quot;&gt;constructor&lt;/a&gt;: &lt;code&gt;::Regex&lt;/code&gt;</source>
          <target state="translated">一个&lt;a href=&quot;reflection#constructor-references&quot;&gt;构造函数&lt;/a&gt;： &lt;code&gt;::Regex&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="3be8c6cb619e66b7398f6c57a357792c88952e03" translate="yes" xml:space="preserve">
          <source>a Gradle source set (with the exception that the &lt;code&gt;test&lt;/code&gt; source set can access the internal declarations of &lt;code&gt;main&lt;/code&gt;);</source>
          <target state="translated">Gradle源集（ &lt;code&gt;test&lt;/code&gt; 源集可以访问 &lt;code&gt;main&lt;/code&gt; 的内部声明除外）；</target>
        </trans-unit>
        <trans-unit id="6ea4172f05fe4c59558e323ef1e65baba446fc35" translate="yes" xml:space="preserve">
          <source>a Maven project;</source>
          <target state="translated">Maven项目。</target>
        </trans-unit>
        <trans-unit id="3cef41f069ab7f0be06801bac69c1eb253bf07ce" translate="yes" xml:space="preserve">
          <source>a combination of the above with the help of logic operators (&lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt;, &lt;code&gt;||&lt;/code&gt;, &lt;code&gt;!&lt;/code&gt;).</source>
          <target state="translated">上述与逻辑运算符的帮助下组合（ &lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt; ， &lt;code&gt;||&lt;/code&gt; ， &lt;code&gt;!&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="c216f9ceb0d2c025a8045de346af1e1ed342ea19" translate="yes" xml:space="preserve">
          <source>a companion object is initialized when the corresponding class is loaded (resolved), matching the semantics of a Java static initializer.</source>
          <target state="translated">当相应的类被加载(解析)时,一个同伴对象被初始化,与Java静态初始化器的语义相匹配。</target>
        </trans-unit>
        <trans-unit id="5763b5bf1ff8e2f4d89a930f47fa97efef000a76" translate="yes" xml:space="preserve">
          <source>a compilation per &lt;a href=&quot;https://developer.android.com/studio/build/build-variants&quot;&gt;Android build variant&lt;/a&gt;, for Android targets;</source>
          <target state="translated">针对Android目标的每个&lt;a href=&quot;https://developer.android.com/studio/build/build-variants&quot;&gt;Android构建变体&lt;/a&gt;的编译；</target>
        </trans-unit>
        <trans-unit id="cfa67951d1da3973eab1458e918a2e45dac85b91" translate="yes" xml:space="preserve">
          <source>a function that is invoked on each element with the following parameters:</source>
          <target state="translated">对每个元素调用的函数,参数如下:</target>
        </trans-unit>
        <trans-unit id="ec405522ff527497ff17775c820e65265640a333" translate="yes" xml:space="preserve">
          <source>a function that provides an initial value of accumulator for each group. It's invoked with parameters:</source>
          <target state="translated">一个为每组提供累加器初始值的函数。它是通过参数调用的。</target>
        </trans-unit>
        <trans-unit id="6a29df4a3e564aaf01a307c63d14b0eb7f37752a" translate="yes" xml:space="preserve">
          <source>a member or an extension property of another class</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c8364c11f30755e5de625497fd4c46fd19c6c665" translate="yes" xml:space="preserve">
          <source>a member or an extension property of the same class</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b8c5262916f1b8fb83979fdfeffc171cb9ddf6ee" translate="yes" xml:space="preserve">
          <source>a product executable</source>
          <target state="translated">可执行产品</target>
        </trans-unit>
        <trans-unit id="1eb5fec2744a5df7613a55d7fd97938d085b6455" translate="yes" xml:space="preserve">
          <source>a set of files compiled with one invocation of the &lt;code&gt;&amp;lt;kotlinc&amp;gt;&lt;/code&gt; Ant task.</source>
          <target state="translated">通过调用 &lt;code&gt;&amp;lt;kotlinc&amp;gt;&lt;/code&gt; Ant任务编译的一组文件。</target>
        </trans-unit>
        <trans-unit id="ac635be4ff6768ba4f0e6821a42e6c26cbee7aea" translate="yes" xml:space="preserve">
          <source>a shared native library</source>
          <target state="translated">共享库</target>
        </trans-unit>
        <trans-unit id="5203164bee4f705b722f4678f3ba0818f9183a28" translate="yes" xml:space="preserve">
          <source>a stable API may include experimental classes or functions;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f6c668749f80dbe624db92b5624533dc7bed0652" translate="yes" xml:space="preserve">
          <source>a stable command-line tool may have experimental options.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e38aa2f4cc17009da31a45d6655103b1dbbb91ee" translate="yes" xml:space="preserve">
          <source>a stable compiler may have an experimental feature;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="701a65cb432dba43dbb98d8a177f9f52b2dd4e36" translate="yes" xml:space="preserve">
          <source>a static library or &lt;a href=&quot;../tutorials/native/dynamic-libraries&quot;&gt;dynamic&lt;/a&gt; library with C headers for C/C++ projects</source>
          <target state="translated">具有C / C ++项目的C标头的静态库或&lt;a href=&quot;../tutorials/native/dynamic-libraries&quot;&gt;动态&lt;/a&gt;库</target>
        </trans-unit>
        <trans-unit id="0c6ad2d0dc561335290a4e742ce75b5d5eb677bc" translate="yes" xml:space="preserve">
          <source>a static native library</source>
          <target state="translated">静态本地库</target>
        </trans-unit>
        <trans-unit id="87b718bcbf2c59c9593a70b0056793afd5f5b6bc" translate="yes" xml:space="preserve">
          <source>a test executable</source>
          <target state="translated">试行本</target>
        </trans-unit>
        <trans-unit id="be4719b22e9ab0eec8b76ed66944edf9cae5f9ba" translate="yes" xml:space="preserve">
          <source>a top-level property</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0a1ad7c981433eb18f5bb4beb412f4b822f36e18" translate="yes" xml:space="preserve">
          <source>a top-level, local, member, or extension &lt;a href=&quot;reflection#function-references&quot;&gt;function&lt;/a&gt;: &lt;code&gt;::isOdd&lt;/code&gt;, &lt;code&gt;String::toInt&lt;/code&gt;,</source>
          <target state="translated">顶层，局部，构件，或扩展&lt;a href=&quot;reflection#function-references&quot;&gt;功能&lt;/a&gt;： &lt;code&gt;::isOdd&lt;/code&gt; ， &lt;code&gt;String::toInt&lt;/code&gt; ，</target>
        </trans-unit>
        <trans-unit id="8a55b2b451f366e6acdc077667b33fceb5f746aa" translate="yes" xml:space="preserve">
          <source>a top-level, member, or extension &lt;a href=&quot;reflection#property-references&quot;&gt;property&lt;/a&gt;: &lt;code&gt;List&amp;lt;Int&amp;gt;::size&lt;/code&gt;,</source>
          <target state="translated">顶级，成员或扩展&lt;a href=&quot;reflection#property-references&quot;&gt;属性&lt;/a&gt;： &lt;code&gt;List&amp;lt;Int&amp;gt;::size&lt;/code&gt; ，</target>
        </trans-unit>
        <trans-unit id="e0a4bd2f03d342add0da0301667dca1acef11783" translate="yes" xml:space="preserve">
          <source>a value of this type can be assigned to any variable or passed anywhere as a parameter;</source>
          <target state="translated">这种类型的值可以分配给任何变量或作为参数传递到任何地方。</target>
        </trans-unit>
        <trans-unit id="82451b41fd7878180b6aa2b54e369cbec4e8032c" translate="yes" xml:space="preserve">
          <source>abs</source>
          <target state="translated">abs</target>
        </trans-unit>
        <trans-unit id="a38e6be0a8275f0f8f8df385b4d9e29da1b09865" translate="yes" xml:space="preserve">
          <source>absoluteValue</source>
          <target state="translated">absoluteValue</target>
        </trans-unit>
        <trans-unit id="328f0742cf74e8ffdb253376b1803615055e215b" translate="yes" xml:space="preserve">
          <source>acos</source>
          <target state="translated">acos</target>
        </trans-unit>
        <trans-unit id="5df0277ec86f188e0c797c5782ceb42dc25bb36a" translate="yes" xml:space="preserve">
          <source>acosh</source>
          <target state="translated">acosh</target>
        </trans-unit>
        <trans-unit id="58d1bbce297de3c304a9fefc3b483181872a5c6b" translate="yes" xml:space="preserve">
          <source>add</source>
          <target state="translated">add</target>
        </trans-unit>
        <trans-unit id="318a91f914a1780bb1e7755e8919d76e20093be8" translate="yes" xml:space="preserve">
          <source>addAll</source>
          <target state="translated">addAll</target>
        </trans-unit>
        <trans-unit id="7cf2f8276fd01514c07bc807e1405777d71c37f4" translate="yes" xml:space="preserve">
          <source>addAndGet</source>
          <target state="translated">addAndGet</target>
        </trans-unit>
        <trans-unit id="4606cae7f1920e3c492cfaeabdc8c17954ded6e2" translate="yes" xml:space="preserve">
          <source>addClass</source>
          <target state="translated">addClass</target>
        </trans-unit>
        <trans-unit id="f179eaa645f7985474cc04b5e60426c65c05a493" translate="yes" xml:space="preserve">
          <source>addSuppressed</source>
          <target state="translated">addSuppressed</target>
        </trans-unit>
        <trans-unit id="c6c47d546ffe4e4d136cefd2422498568e06e672" translate="yes" xml:space="preserve">
          <source>added Kotlin multiplatform sub-project</source>
          <target state="translated">增加了Kotlin多平台子项目。</target>
        </trans-unit>
        <trans-unit id="15bb255576365959d15d1ba0f61d1742186e35ec" translate="yes" xml:space="preserve">
          <source>addressOf</source>
          <target state="translated">addressOf</target>
        </trans-unit>
        <trans-unit id="4a29d6a8dff5ab62bcf1df299be3ef1791b0652f" translate="yes" xml:space="preserve">
          <source>after the &lt;code&gt;object&lt;/code&gt; keyword.</source>
          <target state="translated">在 &lt;code&gt;object&lt;/code&gt; 关键字之后。</target>
        </trans-unit>
        <trans-unit id="a185ad3d25566e49abd2d52b23a900eef246c09a" translate="yes" xml:space="preserve">
          <source>afterChange</source>
          <target state="translated">afterChange</target>
        </trans-unit>
        <trans-unit id="e1ffb566107019d0965a193140bb5793546fb17e" translate="yes" xml:space="preserve">
          <source>aggregate</source>
          <target state="translated">aggregate</target>
        </trans-unit>
        <trans-unit id="1ee63dc77b3b7de9b8dca82c119914b383c98f8e" translate="yes" xml:space="preserve">
          <source>aggregateTo</source>
          <target state="translated">aggregateTo</target>
        </trans-unit>
        <trans-unit id="ae21c64a87f6bb0b8e16e55c48be4cc638d7bd3f" translate="yes" xml:space="preserve">
          <source>align</source>
          <target state="translated">align</target>
        </trans-unit>
        <trans-unit id="d01b6dc7e5c1dc550fefdbeec9b9ad81a8e5fa49" translate="yes" xml:space="preserve">
          <source>alignOf</source>
          <target state="translated">alignOf</target>
        </trans-unit>
        <trans-unit id="d87c448044defb778f33158d8ccf94a20531d600" translate="yes" xml:space="preserve">
          <source>all</source>
          <target state="translated">all</target>
        </trans-unit>
        <trans-unit id="53d4f3afda088ae08570675b500e19665f2556ab" translate="yes" xml:space="preserve">
          <source>all &lt;code&gt;Serializable&lt;/code&gt; (yes, &lt;code&gt;Date&lt;/code&gt; is supported too) and &lt;code&gt;Parcelable&lt;/code&gt; implementations;</source>
          <target state="translated">所有可 &lt;code&gt;Serializable&lt;/code&gt; （是的， &lt;code&gt;Date&lt;/code&gt; 也受支持）和可 &lt;code&gt;Parcelable&lt;/code&gt; 实现；</target>
        </trans-unit>
        <trans-unit id="57460a43b0a54e64b9d561a505866b6fe427cdc0" translate="yes" xml:space="preserve">
          <source>all native targets</source>
          <target state="translated">所有本地目标</target>
        </trans-unit>
        <trans-unit id="567d31b25403e303e02a9d0cd7c6bca266f8406e" translate="yes" xml:space="preserve">
          <source>all native targets except &lt;code&gt;wasm32&lt;/code&gt;</source>
          <target state="translated">除 &lt;code&gt;wasm32&lt;/code&gt; 外的所有本机目标</target>
        </trans-unit>
        <trans-unit id="1b1cd4d3ac4bba77f6172f8f43f91ab71b7b2ff9" translate="yes" xml:space="preserve">
          <source>allSuperclasses</source>
          <target state="translated">allSuperclasses</target>
        </trans-unit>
        <trans-unit id="18b9e6caabcba945a991e0cd3d7c862214846c56" translate="yes" xml:space="preserve">
          <source>allSupertypes</source>
          <target state="translated">allSupertypes</target>
        </trans-unit>
        <trans-unit id="acaab3b723a4d70b19f7b4e34895a97f703f7ab8" translate="yes" xml:space="preserve">
          <source>alloc</source>
          <target state="translated">alloc</target>
        </trans-unit>
        <trans-unit id="3ffbdb1287c0ec908e798069f7b5b6cd647d2dd3" translate="yes" xml:space="preserve">
          <source>allocArray</source>
          <target state="translated">allocArray</target>
        </trans-unit>
        <trans-unit id="13f640b0f3927286e812e84309afe8b28790adaf" translate="yes" xml:space="preserve">
          <source>allocArrayOf</source>
          <target state="translated">allocArrayOf</target>
        </trans-unit>
        <trans-unit id="68b6999bea7ec23dab1df9d25c9d8d43490d4501" translate="yes" xml:space="preserve">
          <source>allocArrayOfPointersTo</source>
          <target state="translated">allocArrayOfPointersTo</target>
        </trans-unit>
        <trans-unit id="3e675f64256a7074b1cd6ed0b61e9f712b2d1c3b" translate="yes" xml:space="preserve">
          <source>allocPointerTo</source>
          <target state="translated">allocPointerTo</target>
        </trans-unit>
        <trans-unit id="b27fc7658a1c0a12e498b8ef2d8c58cf474a3988" translate="yes" xml:space="preserve">
          <source>allocateArena</source>
          <target state="translated">allocateArena</target>
        </trans-unit>
        <trans-unit id="3f035f4821b920000c4dc57b8a573b78cd240fe5" translate="yes" xml:space="preserve">
          <source>allowedTargets</source>
          <target state="translated">allowedTargets</target>
        </trans-unit>
        <trans-unit id="e41321b88a98b2528581510ee2783da5a594399e" translate="yes" xml:space="preserve">
          <source>allowing a variable number of arguments to be passed to the function:</source>
          <target state="translated">允许传递给函数的参数数量可变。</target>
        </trans-unit>
        <trans-unit id="15613c9daf7be7fcb772872dcb7b03a4e457705b" translate="yes" xml:space="preserve">
          <source>almostEqual</source>
          <target state="translated">almostEqual</target>
        </trans-unit>
        <trans-unit id="09706c418809f1f4cfda992435ca1438eddaaeed" translate="yes" xml:space="preserve">
          <source>also</source>
          <target state="translated">also</target>
        </trans-unit>
        <trans-unit id="14c0a47f154cbfb352fb525cf3adf02f2ba7fb02" translate="yes" xml:space="preserve">
          <source>also(), takeIf() and takeUnless()</source>
          <target state="translated">also()、takeIf()和takeUnless()</target>
        </trans-unit>
        <trans-unit id="1ea0b794e1acd33fc0e733b79c72bf9252569c11" translate="yes" xml:space="preserve">
          <source>amd</source>
          <target state="translated">amd</target>
        </trans-unit>
        <trans-unit id="65f59ec6b1ecd6170d5044474043cca9560a8071" translate="yes" xml:space="preserve">
          <source>amp</source>
          <target state="translated">amp</target>
        </trans-unit>
        <trans-unit id="748306aa1450ae801d48f09bbe9f30d902ac2696" translate="yes" xml:space="preserve">
          <source>an &lt;a href=&quot;#anonymous-functions&quot;&gt;anonymous function&lt;/a&gt;: &lt;code&gt;fun(s: String): Int { return s.toIntOrNull() ?: 0 }&lt;/code&gt;</source>
          <target state="translated">一个&lt;a href=&quot;#anonymous-functions&quot;&gt;匿名函数&lt;/a&gt;： &lt;code&gt;fun(s: String): Int { return s.toIntOrNull() ?: 0 }&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="7c2bfe77e768cc843bc33835f60f4705da91fc6a" translate="yes" xml:space="preserve">
          <source>an &lt;a href=&quot;../tutorials/native/apple-framework&quot;&gt;Apple framework&lt;/a&gt; for Swift and Objective-C projects</source>
          <target state="translated">一个用于Swift和Objective-C项目的&lt;a href=&quot;../tutorials/native/apple-framework&quot;&gt;Apple框架&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="098eb6a40c78dac1cc64803040ad60dce3785241" translate="yes" xml:space="preserve">
          <source>an IntelliJ IDEA module;</source>
          <target state="translated">一个IntelliJ IDEA模块。</target>
        </trans-unit>
        <trans-unit id="2b31d36cd498faa4713070b8daf870772d8a8963" translate="yes" xml:space="preserve">
          <source>an Objective-C framework</source>
          <target state="translated">一个Objective-C框架</target>
        </trans-unit>
        <trans-unit id="acdec22f38192426233167a7509f5e1ce2912740" translate="yes" xml:space="preserve">
          <source>an executable for many &lt;a href=&quot;#target-platforms&quot;&gt;platforms&lt;/a&gt;</source>
          <target state="translated">许多&lt;a href=&quot;#target-platforms&quot;&gt;平台&lt;/a&gt;的可执行文件</target>
        </trans-unit>
        <trans-unit id="291bf94ec0c80baf0c0420518e8a22aa64da17ed" translate="yes" xml:space="preserve">
          <source>an implicit receiver may &lt;em&gt;belong to a DSL @X&lt;/em&gt; if marked with a corresponding DSL marker annotation</source>
          <target state="translated">如果用相应的DSL标记注释标记，则隐式接收器可能&lt;em&gt;属于DSL @X&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="cffa50a32cb13a240d705317bcec65dd1f31b6ad" translate="yes" xml:space="preserve">
          <source>and</source>
          <target state="translated">and</target>
        </trans-unit>
        <trans-unit id="777d98d7103bfb49eb493b2de98200165f430e0f" translate="yes" xml:space="preserve">
          <source>and &lt;code&gt;@Test&lt;/code&gt;/&lt;code&gt;@Ignore&lt;/code&gt;/&lt;code&gt;@BeforeTest&lt;/code&gt;/&lt;code&gt;@AfterTest&lt;/code&gt; annotations in the common tests.</source>
          <target state="translated">和通用测试中的 &lt;code&gt;@Test&lt;/code&gt; / &lt;code&gt;@Ignore&lt;/code&gt; / &lt;code&gt;@BeforeTest&lt;/code&gt; / &lt;code&gt;@AfterTest&lt;/code&gt; 批注。</target>
        </trans-unit>
        <trans-unit id="8621fe68c40fa5805eb8859391e6e6e8fc33f3f7" translate="yes" xml:space="preserve">
          <source>and call them like this:</source>
          <target state="translated">并这样称呼他们。</target>
        </trans-unit>
        <trans-unit id="592751918d30cbc057657d8fce04b9434ed048dc" translate="yes" xml:space="preserve">
          <source>and can be called like</source>
          <target state="translated">可谓</target>
        </trans-unit>
        <trans-unit id="2d31babf72302bfb29bfe1c901b1534e2d630175" translate="yes" xml:space="preserve">
          <source>and if we do not need all arguments:</source>
          <target state="translated">而如果我们不需要所有的论证。</target>
        </trans-unit>
        <trans-unit id="64323b21a780fd8756eab4b3d9fc208d8fab2bae" translate="yes" xml:space="preserve">
          <source>and so, C headers on Linux will be analyzed with &lt;code&gt;-DBAR=bar -DFOO=foo1&lt;/code&gt; and on macOS with &lt;code&gt;-DBAR=bar -DFOO=foo2&lt;/code&gt;. Note that any definition file option can have both common and the platform-specific part.</source>
          <target state="translated">因此，将在Linux上使用 &lt;code&gt;-DBAR=bar -DFOO=foo1&lt;/code&gt; 分析C头，在macOS上使用 &lt;code&gt;-DBAR=bar -DFOO=foo2&lt;/code&gt; 进行分析。请注意，任何定义文件选项都可以具有通用部分和特定于平台的部分。</target>
        </trans-unit>
        <trans-unit id="6b17ec45624ae824bb7f0b363eed2cf7c4375821" translate="yes" xml:space="preserve">
          <source>and use it like</source>
          <target state="translated">用之</target>
        </trans-unit>
        <trans-unit id="607cd50b5f31073f72a143721418f64264c6b5d1" translate="yes" xml:space="preserve">
          <source>andNot</source>
          <target state="translated">andNot</target>
        </trans-unit>
        <trans-unit id="e4bbe5b7a4c1eb55652965aee885dd59bd2ee7f4" translate="yes" xml:space="preserve">
          <source>android</source>
          <target state="translated">android</target>
        </trans-unit>
        <trans-unit id="a9e5f9afd9cad2a64404b10f028dccdce2a16c1b" translate="yes" xml:space="preserve">
          <source>annotationClass</source>
          <target state="translated">annotationClass</target>
        </trans-unit>
        <trans-unit id="516d70777b5ffab32d73d264205e523acd04b40b" translate="yes" xml:space="preserve">
          <source>annotations</source>
          <target state="translated">annotations</target>
        </trans-unit>
        <trans-unit id="c5fe0200d1c7a5139bd18fd22268c4ca8bf45e90" translate="yes" xml:space="preserve">
          <source>any</source>
          <target state="translated">any</target>
        </trans-unit>
        <trans-unit id="3ce55e2bcdc6298789158358ce12f5f130cd9f67" translate="yes" xml:space="preserve">
          <source>any value can be assigned to a variable of type &lt;code&gt;dynamic&lt;/code&gt; or passed to a function that takes &lt;code&gt;dynamic&lt;/code&gt; as a parameter;</source>
          <target state="translated">任何值都可以分配给 &lt;code&gt;dynamic&lt;/code&gt; 类型的变量，也可以传递给以 &lt;code&gt;dynamic&lt;/code&gt; 为参数的函数；</target>
        </trans-unit>
        <trans-unit id="9ef26354a9cd113d5bb9e77251a6442203f1d937" translate="yes" xml:space="preserve">
          <source>apiVersion</source>
          <target state="translated">apiVersion</target>
        </trans-unit>
        <trans-unit id="db43bff34c78044870bc6b1ae2aa16902bb1bb8a" translate="yes" xml:space="preserve">
          <source>append</source>
          <target state="translated">append</target>
        </trans-unit>
        <trans-unit id="ab507f18acd407483a52f31652781818fbd14a1d" translate="yes" xml:space="preserve">
          <source>appendBytes</source>
          <target state="translated">appendBytes</target>
        </trans-unit>
        <trans-unit id="8817c05daf950ac138029a01716d816fe0899ed0" translate="yes" xml:space="preserve">
          <source>appendElement</source>
          <target state="translated">appendElement</target>
        </trans-unit>
        <trans-unit id="e1a2744c01610741f085816bb428eaf6f4e656db" translate="yes" xml:space="preserve">
          <source>appendLine</source>
          <target state="translated">appendLine</target>
        </trans-unit>
        <trans-unit id="ca324b92ff833ea88bc7fc47a1e26991c317f869" translate="yes" xml:space="preserve">
          <source>appendRange</source>
          <target state="translated">appendRange</target>
        </trans-unit>
        <trans-unit id="fb40f92769d2885e61f2ec793aab2cbe9c78ab13" translate="yes" xml:space="preserve">
          <source>appendText</source>
          <target state="translated">appendText</target>
        </trans-unit>
        <trans-unit id="be7d0f89ba62b578f1cd8a48d2181c321e1082e5" translate="yes" xml:space="preserve">
          <source>appendln</source>
          <target state="translated">appendln</target>
        </trans-unit>
        <trans-unit id="69f45da1683c501696ebfa086d25192af3807dc6" translate="yes" xml:space="preserve">
          <source>apply</source>
          <target state="translated">apply</target>
        </trans-unit>
        <trans-unit id="bbcfcdbce6005afa669d007b07c4e2fceb8d0c73" translate="yes" xml:space="preserve">
          <source>arena</source>
          <target state="translated">arena</target>
        </trans-unit>
        <trans-unit id="3030e728f154bf51419109efb93b6b8aeec9a976" translate="yes" xml:space="preserve">
          <source>args</source>
          <target state="translated">args</target>
        </trans-unit>
        <trans-unit id="536f158f6dfd529865dcb865a97bb16804e34d70" translate="yes" xml:space="preserve">
          <source>arguments</source>
          <target state="translated">arguments</target>
        </trans-unit>
        <trans-unit id="27e05c3c9e9a43c137fb422319f51eaa31dcc788" translate="yes" xml:space="preserve">
          <source>arrayListOf</source>
          <target state="translated">arrayListOf</target>
        </trans-unit>
        <trans-unit id="d905653b11628ddf35a4db09cf63c6574a0e9940" translate="yes" xml:space="preserve">
          <source>arrayMemberAt</source>
          <target state="translated">arrayMemberAt</target>
        </trans-unit>
        <trans-unit id="d8a74eaf1f377128625372aadc89b0669d9f016f" translate="yes" xml:space="preserve">
          <source>arrayOf</source>
          <target state="translated">arrayOf</target>
        </trans-unit>
        <trans-unit id="5e442a70649256130331363d00bfd867f2f6aea4" translate="yes" xml:space="preserve">
          <source>arrayOfNulls</source>
          <target state="translated">arrayOfNulls</target>
        </trans-unit>
        <trans-unit id="d81d34d583e9aa76ad36fe1f7e1e22b278d662c1" translate="yes" xml:space="preserve">
          <source>arrays of all supported types;</source>
          <target state="translated">所有支持类型的数组。</target>
        </trans-unit>
        <trans-unit id="df83c488b2d2ab26dfa91c758f2512331d2125ef" translate="yes" xml:space="preserve">
          <source>arrays of the types listed above.</source>
          <target state="translated">上述类型的数组。</target>
        </trans-unit>
        <trans-unit id="1e5dcbb59b753cb1d46e234d8f6180285b8b86ad" translate="yes" xml:space="preserve">
          <source>artifact</source>
          <target state="translated">artifact</target>
        </trans-unit>
        <trans-unit id="ab720ee98d9979365e6a8fec7ce7fe39869af028" translate="yes" xml:space="preserve">
          <source>asArray</source>
          <target state="translated">asArray</target>
        </trans-unit>
        <trans-unit id="ef0d38e37d9b220dc38ac4d15047b9036e9f4b91" translate="yes" xml:space="preserve">
          <source>asByteArray</source>
          <target state="translated">asByteArray</target>
        </trans-unit>
        <trans-unit id="63eff28c1a1ef6a95d1e74370241d047e28d8cec" translate="yes" xml:space="preserve">
          <source>asCPointer</source>
          <target state="translated">asCPointer</target>
        </trans-unit>
        <trans-unit id="0e45d74f5614bb4a8e5f43564721408fa2dbb920" translate="yes" xml:space="preserve">
          <source>asDynamic</source>
          <target state="translated">asDynamic</target>
        </trans-unit>
        <trans-unit id="ce4b96eeed706b5367897aa5c5db2ff4ac736473" translate="yes" xml:space="preserve">
          <source>asIntArray</source>
          <target state="translated">asIntArray</target>
        </trans-unit>
        <trans-unit id="9e99ac38b58f4fa10bff54bbd222e78f6186d5ea" translate="yes" xml:space="preserve">
          <source>asIterable</source>
          <target state="translated">asIterable</target>
        </trans-unit>
        <trans-unit id="e71ae9e4ad515fde472ef89600713d9b76e680ca" translate="yes" xml:space="preserve">
          <source>asJavaRandom</source>
          <target state="translated">asJavaRandom</target>
        </trans-unit>
        <trans-unit id="f1cac092fd189aaf298d324c5a51e6a304478bb5" translate="yes" xml:space="preserve">
          <source>asKotlinRandom</source>
          <target state="translated">asKotlinRandom</target>
        </trans-unit>
        <trans-unit id="bf8a7232abf480c007dce7dbe6292b237efac880" translate="yes" xml:space="preserve">
          <source>asList</source>
          <target state="translated">asList</target>
        </trans-unit>
        <trans-unit id="64d0ee06c1d2274bedfc91565b8bf7403feb5afb" translate="yes" xml:space="preserve">
          <source>asLongArray</source>
          <target state="translated">asLongArray</target>
        </trans-unit>
        <trans-unit id="6c018f8eec18a67d5543953d61fe034eba1c8abc" translate="yes" xml:space="preserve">
          <source>asReversed</source>
          <target state="translated">asReversed</target>
        </trans-unit>
        <trans-unit id="069859eec86c870993e1df280ba0be8034e2e99f" translate="yes" xml:space="preserve">
          <source>asSequence</source>
          <target state="translated">asSequence</target>
        </trans-unit>
        <trans-unit id="5163452393a2a9f6743708da2f93c906a5d10221" translate="yes" xml:space="preserve">
          <source>asShortArray</source>
          <target state="translated">asShortArray</target>
        </trans-unit>
        <trans-unit id="73a17f5408a2d36a1032555fdc776cd55c1d9b33" translate="yes" xml:space="preserve">
          <source>asStableRef</source>
          <target state="translated">asStableRef</target>
        </trans-unit>
        <trans-unit id="8f4eed36381ae3f17c2960a90a50a18032e4e196" translate="yes" xml:space="preserve">
          <source>asStream</source>
          <target state="translated">asStream</target>
        </trans-unit>
        <trans-unit id="a52b52e2966b5afbea285b61914693557858b0ed" translate="yes" xml:space="preserve">
          <source>asUByteArray</source>
          <target state="translated">asUByteArray</target>
        </trans-unit>
        <trans-unit id="24e8a6d61fdac5969805611913e94d1ec94f0621" translate="yes" xml:space="preserve">
          <source>asUCPointer</source>
          <target state="translated">asUCPointer</target>
        </trans-unit>
        <trans-unit id="3f59c8d09b7970397cde7f0a5949a76f692ac260" translate="yes" xml:space="preserve">
          <source>asUIntArray</source>
          <target state="translated">asUIntArray</target>
        </trans-unit>
        <trans-unit id="65a04210d4df3081c28459dfa1e8063e25fc0ad1" translate="yes" xml:space="preserve">
          <source>asULongArray</source>
          <target state="translated">asULongArray</target>
        </trans-unit>
        <trans-unit id="2ea87750bd9d24f78f0f21e53e669643cbd720c8" translate="yes" xml:space="preserve">
          <source>asUShortArray</source>
          <target state="translated">asUShortArray</target>
        </trans-unit>
        <trans-unit id="f6b3e9a1435d3f432e7a6b9003583871fcb26de3" translate="yes" xml:space="preserve">
          <source>asin</source>
          <target state="translated">asin</target>
        </trans-unit>
        <trans-unit id="d7d3dd685f3472024a78ef2982b478006acd6afc" translate="yes" xml:space="preserve">
          <source>asinh</source>
          <target state="translated">asinh</target>
        </trans-unit>
        <trans-unit id="64b5daad5073849378993ba34e058d7008293097" translate="yes" xml:space="preserve">
          <source>assert</source>
          <target state="translated">assert</target>
        </trans-unit>
        <trans-unit id="3ef74078d06ba61e79bd2aa5816e90a3035fcea9" translate="yes" xml:space="preserve">
          <source>assignment operator</source>
          <target state="translated">指派运算符</target>
        </trans-unit>
        <trans-unit id="b87ccad5eb57f5753cdd2cbb350d6eeb79e86ff3" translate="yes" xml:space="preserve">
          <source>assignments: &lt;code&gt;+=&lt;/code&gt;, &lt;code&gt;-=&lt;/code&gt;, &lt;code&gt;*=&lt;/code&gt;, &lt;code&gt;/=&lt;/code&gt;, &lt;code&gt;%=&lt;/code&gt;</source>
          <target state="translated">分配： &lt;code&gt;+=&lt;/code&gt; ， &lt;code&gt;-=&lt;/code&gt; ， &lt;code&gt;*=&lt;/code&gt; ， &lt;code&gt;/=&lt;/code&gt; ， &lt;code&gt;%=&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="adb833ac38f3ed04b28b2dd15e3f056a47ce6992" translate="yes" xml:space="preserve">
          <source>associate</source>
          <target state="translated">associate</target>
        </trans-unit>
        <trans-unit id="492383d75e076a97169f3cfd2d198345b36e7f06" translate="yes" xml:space="preserve">
          <source>associateBy</source>
          <target state="translated">associateBy</target>
        </trans-unit>
        <trans-unit id="3152cc7371b60856160675b6472dfcd66413a76a" translate="yes" xml:space="preserve">
          <source>associateByTo</source>
          <target state="translated">associateByTo</target>
        </trans-unit>
        <trans-unit id="785bdd622117fac8406a5fdff91816c3cfd43f56" translate="yes" xml:space="preserve">
          <source>associateTo</source>
          <target state="translated">associateTo</target>
        </trans-unit>
        <trans-unit id="26d8a5e60bd406adec4d3eac45cbceed5a92aa6d" translate="yes" xml:space="preserve">
          <source>associateWith</source>
          <target state="translated">associateWith</target>
        </trans-unit>
        <trans-unit id="eeb3b727083a766bc8dd1adbdd70c07e5e664a54" translate="yes" xml:space="preserve">
          <source>associateWithTo</source>
          <target state="translated">associateWithTo</target>
        </trans-unit>
        <trans-unit id="f077504d04fa1bc96b042497b434fd33fabdf43d" translate="yes" xml:space="preserve">
          <source>atan</source>
          <target state="translated">atan</target>
        </trans-unit>
        <trans-unit id="b1a7357ef61ecd1781b4633dc3e33a383686041c" translate="yes" xml:space="preserve">
          <source>atan2</source>
          <target state="translated">atan2</target>
        </trans-unit>
        <trans-unit id="7684baa497f7669edce3de05984655b59aa5aa40" translate="yes" xml:space="preserve">
          <source>atanh</source>
          <target state="translated">atanh</target>
        </trans-unit>
        <trans-unit id="a305609015560ef1d1dc15883dd1254dec4d7db5" translate="yes" xml:space="preserve">
          <source>atomicLazy</source>
          <target state="translated">atomicLazy</target>
        </trans-unit>
        <trans-unit id="13ce071f68958ab463698853189d6361000db5c2" translate="yes" xml:space="preserve">
          <source>attach</source>
          <target state="translated">attach</target>
        </trans-unit>
        <trans-unit id="4c0911b8920f82dac2fb09c903722d1748201846" translate="yes" xml:space="preserve">
          <source>autoreleasepool</source>
          <target state="translated">autoreleasepool</target>
        </trans-unit>
        <trans-unit id="93a8018f99fa5bd70a93649584b1721492478520" translate="yes" xml:space="preserve">
          <source>average</source>
          <target state="translated">average</target>
        </trans-unit>
        <trans-unit id="1ac5f1ddd4769fb1faec2d5930ca9560e42d074e" translate="yes" xml:space="preserve">
          <source>backing</source>
          <target state="translated">backing</target>
        </trans-unit>
        <trans-unit id="c27535d68e3c4f9ec840201de0e324dd07d2e12f" translate="yes" xml:space="preserve">
          <source>basic types &lt;code&gt;char, int, float, double&lt;/code&gt; with modifiers &lt;code&gt;signed, unsigned, short, long&lt;/code&gt;</source>
          <target state="translated">基本类型 &lt;code&gt;char, int, float, double&lt;/code&gt; 带修饰符的 &lt;code&gt;signed, unsigned, short, long&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="6b104e0469474942ad8dcc6f899d7f77ebcce516" translate="yes" xml:space="preserve">
          <source>beforeChange</source>
          <target state="translated">beforeChange</target>
        </trans-unit>
        <trans-unit id="82c462b28f73e21ac4148b976c1776086427c38d" translate="yes" xml:space="preserve">
          <source>binary: &lt;code&gt;+&lt;/code&gt;, &lt;code&gt;-&lt;/code&gt;, &lt;code&gt;*&lt;/code&gt;, &lt;code&gt;/&lt;/code&gt;, &lt;code&gt;%&lt;/code&gt;, &lt;code&gt;&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;&lt;/code&gt;&lt;code&gt;&amp;gt;=&lt;/code&gt;, &lt;code&gt;&amp;lt;=&lt;/code&gt;, &lt;code&gt;==&lt;/code&gt;, &lt;code&gt;!=&lt;/code&gt;, &lt;code&gt;===&lt;/code&gt;, &lt;code&gt;!==&lt;/code&gt;, &lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt;, &lt;code&gt;||&lt;/code&gt;</source>
          <target state="translated">二进制： &lt;code&gt;+&lt;/code&gt; ， &lt;code&gt;-&lt;/code&gt; ， &lt;code&gt;*&lt;/code&gt; ， &lt;code&gt;/&lt;/code&gt; ， &lt;code&gt;%&lt;/code&gt; ， &lt;code&gt;&amp;gt;&lt;/code&gt; ， &lt;code&gt;&amp;lt;&lt;/code&gt; &lt;code&gt;&amp;gt;=&lt;/code&gt; ， &lt;code&gt;&amp;lt;=&lt;/code&gt; ， &lt;code&gt;==&lt;/code&gt; ， &lt;code&gt;!=&lt;/code&gt; ， &lt;code&gt;===&lt;/code&gt; ， &lt;code&gt;!==&lt;/code&gt; ， &lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt; ， &lt;code&gt;||&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="5f3cc4f367307176acea5002ccd595adcc519713" translate="yes" xml:space="preserve">
          <source>binaryName</source>
          <target state="translated">binaryName</target>
        </trans-unit>
        <trans-unit id="8042cb28bbb155697d8bb072f5ebd04f15aec9af" translate="yes" xml:space="preserve">
          <source>binarySearch</source>
          <target state="translated">binarySearch</target>
        </trans-unit>
        <trans-unit id="fc684d6edaa261e7e93ae290b1b10c84c3966f6d" translate="yes" xml:space="preserve">
          <source>binarySearchBy</source>
          <target state="translated">binarySearchBy</target>
        </trans-unit>
        <trans-unit id="b96c0e32d06874a40880ecad50556875bc80bc20" translate="yes" xml:space="preserve">
          <source>bitness</source>
          <target state="translated">bitness</target>
        </trans-unit>
        <trans-unit id="6e400cdec276ecd73a93c1c1130666ba128189b4" translate="yes" xml:space="preserve">
          <source>bitsToDouble</source>
          <target state="translated">bitsToDouble</target>
        </trans-unit>
        <trans-unit id="331a21cc944fd678c3acad54bbf0c1d7bf7aa638" translate="yes" xml:space="preserve">
          <source>bitsToFloat</source>
          <target state="translated">bitsToFloat</target>
        </trans-unit>
        <trans-unit id="a8f74cbe00ea111142071a1b1632fc9272a6449e" translate="yes" xml:space="preserve">
          <source>boolean type (from &lt;a href=&quot;https://en.wikipedia.org/wiki/C99&quot;&gt;C99&lt;/a&gt;)</source>
          <target state="translated">布尔类型（来自&lt;a href=&quot;https://en.wikipedia.org/wiki/C99&quot;&gt;C99&lt;/a&gt;）</target>
        </trans-unit>
        <trans-unit id="efda1de9a727d41ac33cf706893615562374cde4" translate="yes" xml:space="preserve">
          <source>booleanArrayOf</source>
          <target state="translated">booleanArrayOf</target>
        </trans-unit>
        <trans-unit id="a2b74db4ba5c68786e827e2f19becde24dbb23a7" translate="yes" xml:space="preserve">
          <source>breakpoints</source>
          <target state="translated">breakpoints</target>
        </trans-unit>
        <trans-unit id="97094b0292daec2b844f838ca27bfa054b317e5f" translate="yes" xml:space="preserve">
          <source>buffered</source>
          <target state="translated">buffered</target>
        </trans-unit>
        <trans-unit id="65f3a29e2ec07894b86d02f9237a18668ce416f7" translate="yes" xml:space="preserve">
          <source>bufferedReader</source>
          <target state="translated">bufferedReader</target>
        </trans-unit>
        <trans-unit id="6652136a505b1608bd606c74496ad160f0eb93ef" translate="yes" xml:space="preserve">
          <source>bufferedWriter</source>
          <target state="translated">bufferedWriter</target>
        </trans-unit>
        <trans-unit id="b2e637c95692cb6101d2099baa5f2137a8310baf" translate="yes" xml:space="preserve">
          <source>buildIterator</source>
          <target state="translated">buildIterator</target>
        </trans-unit>
        <trans-unit id="f6731caed6dbedff8cbd4c482cf50a8df12d4a69" translate="yes" xml:space="preserve">
          <source>buildList</source>
          <target state="translated">buildList</target>
        </trans-unit>
        <trans-unit id="c076490c450304c8d2663264e3ee23de0c8da121" translate="yes" xml:space="preserve">
          <source>buildMap</source>
          <target state="translated">buildMap</target>
        </trans-unit>
        <trans-unit id="c80efcfaa3b886f53022fa4b31e3d8985b4df0ef" translate="yes" xml:space="preserve">
          <source>buildSequence</source>
          <target state="translated">buildSequence</target>
        </trans-unit>
        <trans-unit id="8aac1ffdbff0c0e5254986786438c17a67adf1d3" translate="yes" xml:space="preserve">
          <source>buildSet</source>
          <target state="translated">buildSet</target>
        </trans-unit>
        <trans-unit id="2236a0ed8fdc573b8dfb79fcffdad5c8ad0b6b14" translate="yes" xml:space="preserve">
          <source>buildString</source>
          <target state="translated">buildString</target>
        </trans-unit>
        <trans-unit id="472da2b94e9fa87badd16a55e1eaec4f53ffc52a" translate="yes" xml:space="preserve">
          <source>bullet</source>
          <target state="translated">bullet</target>
        </trans-unit>
        <trans-unit id="e3cd898db74123f7a92f0efee2dd1b607210b957" translate="yes" xml:space="preserve">
          <source>by address</source>
          <target state="translated">按地址</target>
        </trans-unit>
        <trans-unit id="b79a491dbfb9830afe7abc05c4a0383fc55937dc" translate="yes" xml:space="preserve">
          <source>by location</source>
          <target state="translated">按地点</target>
        </trans-unit>
        <trans-unit id="9afe250079b26fa35758d4273f10ce01c57f019a" translate="yes" xml:space="preserve">
          <source>by location (filename, line number)</source>
          <target state="translated">按位置(文件名,行号)排列</target>
        </trans-unit>
        <trans-unit id="2c5bb516b1987dabf813c98e4515eda07d81aaa5" translate="yes" xml:space="preserve">
          <source>by name</source>
          <target state="translated">按名称</target>
        </trans-unit>
        <trans-unit id="2b91e636819fa057b859040dd689ad0f95d1256a" translate="yes" xml:space="preserve">
          <source>by name &lt;strong&gt;unusable&lt;/strong&gt;, because &lt;code&gt;:&lt;/code&gt; is a separator for the breakpoint by location</source>
          <target state="translated">按名称&lt;strong&gt;不可用&lt;/strong&gt;，因为 &lt;code&gt;:&lt;/code&gt; 是按位置分隔断点的分隔符</target>
        </trans-unit>
        <trans-unit id="4e9f386e8b7bff0657ab06522bb098c64369a162" translate="yes" xml:space="preserve">
          <source>by regex</source>
          <target state="translated">通过重新编排</target>
        </trans-unit>
        <trans-unit id="f53dc6133390c7038078f9cdd6e54cb3e717a2cd" translate="yes" xml:space="preserve">
          <source>by regex, you might find it useful for debugging generated artifacts, like lambda etc. (where used &lt;code&gt;#&lt;/code&gt; symbol in name).</source>
          <target state="translated">通过regex，您可能会发现它对于调试生成的工件（例如lambda等）（在名称中使用 &lt;code&gt;#&lt;/code&gt; 符号）很有用。</target>
        </trans-unit>
        <trans-unit id="a688a18c2666a0402207cb7faf3711f300c05bd5" translate="yes" xml:space="preserve">
          <source>byteArrayOf</source>
          <target state="translated">byteArrayOf</target>
        </trans-unit>
        <trans-unit id="fada3e8fa24032b1fe199c05642ad9d793539270" translate="yes" xml:space="preserve">
          <source>byteInputStream</source>
          <target state="translated">byteInputStream</target>
        </trans-unit>
        <trans-unit id="f06b14ef7a2dba0a332a19a33e72a8608e7ab4f9" translate="yes" xml:space="preserve">
          <source>bytecodeVersion</source>
          <target state="translated">bytecodeVersion</target>
        </trans-unit>
        <trans-unit id="f0a282e1924b81444a3d90d4c441e8bb928d5420" translate="yes" xml:space="preserve">
          <source>cValue</source>
          <target state="translated">cValue</target>
        </trans-unit>
        <trans-unit id="a28e5d29c939781fec2f0cda6ee292448031a94c" translate="yes" xml:space="preserve">
          <source>cValuesOf</source>
          <target state="translated">cValuesOf</target>
        </trans-unit>
        <trans-unit id="bc8d8647b02deea0ab3e715c220d041ee78cc19d" translate="yes" xml:space="preserve">
          <source>call</source>
          <target state="translated">call</target>
        </trans-unit>
        <trans-unit id="445dd281e571b2e2e32bfd24d8dedc854d8b5873" translate="yes" xml:space="preserve">
          <source>callBy</source>
          <target state="translated">callBy</target>
        </trans-unit>
        <trans-unit id="ac868ba9d50bf1ba5b416c6800e295946ffe3cfc" translate="yes" xml:space="preserve">
          <source>callContinuation0</source>
          <target state="translated">callContinuation0</target>
        </trans-unit>
        <trans-unit id="baedbd4b456d84bd0c5687b440fbe6e170e10d64" translate="yes" xml:space="preserve">
          <source>callContinuation1</source>
          <target state="translated">callContinuation1</target>
        </trans-unit>
        <trans-unit id="dc6d8c28a181004ee0794076360f01827e4ecc3d" translate="yes" xml:space="preserve">
          <source>callContinuation2</source>
          <target state="translated">callContinuation2</target>
        </trans-unit>
        <trans-unit id="0c478a0e0cdf9a20b20ffaa77dabaf7737891fd2" translate="yes" xml:space="preserve">
          <source>callSuspend</source>
          <target state="translated">callSuspend</target>
        </trans-unit>
        <trans-unit id="4c1f31c6dc33f805508fdab71fb21f28f5b5d2d9" translate="yes" xml:space="preserve">
          <source>callSuspendBy</source>
          <target state="translated">callSuspendBy</target>
        </trans-unit>
        <trans-unit id="9f0cb59e27afa5e4b4e6dcbdc78e6afb456b8d1f" translate="yes" xml:space="preserve">
          <source>calls another constructor of the same class from a secondary constructor</source>
          <target state="translated">从二级构造函数中调用同一类的另一个构造函数。</target>
        </trans-unit>
        <trans-unit id="90a529f5a8fd36a258cbc559cd2156a88c93765a" translate="yes" xml:space="preserve">
          <source>calls the superclass constructor from a secondary constructor</source>
          <target state="translated">从二级构造函数中调用超类构造函数。</target>
        </trans-unit>
        <trans-unit id="16b85c5f0ab4177d285025257b578591066f42be" translate="yes" xml:space="preserve">
          <source>callsInPlace</source>
          <target state="translated">callsInPlace</target>
        </trans-unit>
        <trans-unit id="1ff2eacfe3b53a49b113d9fa808b0fc018f58deb" translate="yes" xml:space="preserve">
          <source>can be called from Swift like</source>
          <target state="translated">可以从Swift中调用,比如</target>
        </trans-unit>
        <trans-unit id="46b1abcacdec284ac44f1a3179dc30be061b8cc1" translate="yes" xml:space="preserve">
          <source>can be described like this:</source>
          <target state="translated">可以这样描述。</target>
        </trans-unit>
        <trans-unit id="8b552f57e1040585a906ef8259c0b2356703bcd1" translate="yes" xml:space="preserve">
          <source>canAccessUnaligned</source>
          <target state="translated">canAccessUnaligned</target>
        </trans-unit>
        <trans-unit id="7cb1f56d3fbe09e809244fc8e13671cd876e3860" translate="yes" xml:space="preserve">
          <source>capacity</source>
          <target state="translated">capacity</target>
        </trans-unit>
        <trans-unit id="d01a341706c2a5c67a30eb227bba3d0fd7ace906" translate="yes" xml:space="preserve">
          <source>capitalize</source>
          <target state="translated">capitalize</target>
        </trans-unit>
        <trans-unit id="39aa12e6d633fbb40d65f75a3c76898807ac424e" translate="yes" xml:space="preserve">
          <source>cast</source>
          <target state="translated">cast</target>
        </trans-unit>
        <trans-unit id="9ebad64e5d2b9542779537fce0354f34c099e7ff" translate="yes" xml:space="preserve">
          <source>catch</source>
          <target state="translated">catch</target>
        </trans-unit>
        <trans-unit id="5ccbf9c9c5fc1bc34df8238a97094968f38f5165" translate="yes" xml:space="preserve">
          <source>category</source>
          <target state="translated">category</target>
        </trans-unit>
        <trans-unit id="ccadf5de3d738fbe992636fbe8daf8e3fae6b80c" translate="yes" xml:space="preserve">
          <source>cause</source>
          <target state="translated">cause</target>
        </trans-unit>
        <trans-unit id="613af80c25dfbc9ef75ce605280571b9a518d632" translate="yes" xml:space="preserve">
          <source>ceil</source>
          <target state="translated">ceil</target>
        </trans-unit>
        <trans-unit id="db9149cb38bcd8be8c1fef9f64d475c1e757fd06" translate="yes" xml:space="preserve">
          <source>cent</source>
          <target state="translated">cent</target>
        </trans-unit>
        <trans-unit id="71fafc4e2fc1e47e234762a96b80512b6b5534c2" translate="yes" xml:space="preserve">
          <source>char</source>
          <target state="translated">char</target>
        </trans-unit>
        <trans-unit id="c86952a91f0ea0ff04844cf9012341bc55975c9b" translate="yes" xml:space="preserve">
          <source>charArrayOf</source>
          <target state="translated">charArrayOf</target>
        </trans-unit>
        <trans-unit id="dcb16d9aacb079fe42fbde349c3319de8033ddd1" translate="yes" xml:space="preserve">
          <source>charset</source>
          <target state="translated">charset</target>
        </trans-unit>
        <trans-unit id="d56d985300d4b52eb6e189be006f44f8d23c5ec9" translate="yes" xml:space="preserve">
          <source>check</source>
          <target state="translated">check</target>
        </trans-unit>
        <trans-unit id="f11710b4dae8a8c399758907e308ad07b0c0f22c" translate="yes" xml:space="preserve">
          <source>checkNotNull</source>
          <target state="translated">checkNotNull</target>
        </trans-unit>
        <trans-unit id="f77e1c7312a0e2d01717ade80605f0a5c28e7ade" translate="yes" xml:space="preserve">
          <source>checks that &lt;a href=&quot;typecasts#is-and-is-operators&quot;&gt;a value does NOT have a certain type&lt;/a&gt;</source>
          <target state="translated">检查&lt;a href=&quot;typecasts#is-and-is-operators&quot;&gt;值是否没有某种类型&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="151dfd4e5075c8c3c5b69d8ccfc88c9a8179609e" translate="yes" xml:space="preserve">
          <source>checks that &lt;a href=&quot;typecasts#is-and-is-operators&quot;&gt;a value has a certain type&lt;/a&gt;</source>
          <target state="translated">检查&lt;a href=&quot;typecasts#is-and-is-operators&quot;&gt;值是否具有特定类型&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="7db2323af37e1841807c6590cd0597b920564b93" translate="yes" xml:space="preserve">
          <source>chunked</source>
          <target state="translated">chunked</target>
        </trans-unit>
        <trans-unit id="9458c755bafb5ff2e67b664e7cb4fd1bc41079a9" translate="yes" xml:space="preserve">
          <source>chunkedSequence</source>
          <target state="translated">chunkedSequence</target>
        </trans-unit>
        <trans-unit id="fe893c1b1c6674860acbe35e00a0ed423dd0c10f" translate="yes" xml:space="preserve">
          <source>cinterop tool specifics</source>
          <target state="translated">cinterop工具细节</target>
        </trans-unit>
        <trans-unit id="81599da666db16a57e907a1dc7c525c9f9e66c83" translate="yes" xml:space="preserve">
          <source>classes (&lt;code&gt;Foo::class&lt;/code&gt;);</source>
          <target state="translated">classes（ &lt;code&gt;Foo::class&lt;/code&gt; ）;</target>
        </trans-unit>
        <trans-unit id="49061e96f40a33a23aa888e4a796825e63255147" translate="yes" xml:space="preserve">
          <source>classifier</source>
          <target state="translated">classifier</target>
        </trans-unit>
        <trans-unit id="168cbb2ea52b9e34d271accecfa7d7951e948a99" translate="yes" xml:space="preserve">
          <source>clear</source>
          <target state="translated">clear</target>
        </trans-unit>
        <trans-unit id="5e0072329d5085c5bc5c23c2fa873dd42900958b" translate="yes" xml:space="preserve">
          <source>clone</source>
          <target state="translated">clone</target>
        </trans-unit>
        <trans-unit id="7625372a2bd40da1707415eeb0c551cc7947066c" translate="yes" xml:space="preserve">
          <source>clone()</source>
          <target state="translated">clone()</target>
        </trans-unit>
        <trans-unit id="e6fb06210fafc02fd7479ddbed2d042cc3a5155e" translate="yes" xml:space="preserve">
          <source>code</source>
          <target state="translated">code</target>
        </trans-unit>
        <trans-unit id="158cd4c0aed856c3d404e1e0c995469cfa3e1f25" translate="yes" xml:space="preserve">
          <source>codePointAt</source>
          <target state="translated">codePointAt</target>
        </trans-unit>
        <trans-unit id="021cc3c427d434371c889a3536bd9264e4077386" translate="yes" xml:space="preserve">
          <source>codePointBefore</source>
          <target state="translated">codePointBefore</target>
        </trans-unit>
        <trans-unit id="31fa06fe9b225f5f842aa30f406945b612019e54" translate="yes" xml:space="preserve">
          <source>codePointCount</source>
          <target state="translated">codePointCount</target>
        </trans-unit>
        <trans-unit id="531ae9a98e89350e1c370cd5218408b100ffc4a8" translate="yes" xml:space="preserve">
          <source>coerceAtLeast</source>
          <target state="translated">coerceAtLeast</target>
        </trans-unit>
        <trans-unit id="8d5c45b96d9c0f958bd81774e66d79544915e3c4" translate="yes" xml:space="preserve">
          <source>coerceAtMost</source>
          <target state="translated">coerceAtMost</target>
        </trans-unit>
        <trans-unit id="fd7345d22350d5e6779b421d4b123616f247f574" translate="yes" xml:space="preserve">
          <source>coerceIn</source>
          <target state="translated">coerceIn</target>
        </trans-unit>
        <trans-unit id="0d9fd4710f4fde778f18def239264968f33eaa96" translate="yes" xml:space="preserve">
          <source>collections of all supported types: &lt;code&gt;List&lt;/code&gt; (mapped to &lt;code&gt;ArrayList&lt;/code&gt;), &lt;code&gt;Set&lt;/code&gt; (mapped to &lt;code&gt;LinkedHashSet&lt;/code&gt;), &lt;code&gt;Map&lt;/code&gt; (mapped to &lt;code&gt;LinkedHashMap&lt;/code&gt;);</source>
          <target state="translated">所有受支持类型的集合： &lt;code&gt;List&lt;/code&gt; （映射到 &lt;code&gt;ArrayList&lt;/code&gt; ）， &lt;code&gt;Set&lt;/code&gt; （映射到 &lt;code&gt;LinkedHashSet&lt;/code&gt; ）， &lt;code&gt;Map&lt;/code&gt; （映射到 &lt;code&gt;LinkedHashMap&lt;/code&gt; ）；</target>
        </trans-unit>
        <trans-unit id="94c8c21d08740f5da9eaa38d1f175c592692f0d1" translate="yes" xml:space="preserve">
          <source>common</source>
          <target state="translated">common</target>
        </trans-unit>
        <trans-unit id="7294570a98a0a3137cbf69e1ae7998f079404e1f" translate="yes" xml:space="preserve">
          <source>commonPrefixWith</source>
          <target state="translated">commonPrefixWith</target>
        </trans-unit>
        <trans-unit id="93f0a100090742f94b5bc606ae89cb3d1f26333b" translate="yes" xml:space="preserve">
          <source>commonSuffixWith</source>
          <target state="translated">commonSuffixWith</target>
        </trans-unit>
        <trans-unit id="f53207eefc4e801059d4386695738682735acaeb" translate="yes" xml:space="preserve">
          <source>commonjs</source>
          <target state="translated">commonjs</target>
        </trans-unit>
        <trans-unit id="628db33c85725e19cac7696f478b404f6c50bddf" translate="yes" xml:space="preserve">
          <source>companionObject</source>
          <target state="translated">companionObject</target>
        </trans-unit>
        <trans-unit id="3035f80fd987cdfec5402d4be5c0f4a2b40c011b" translate="yes" xml:space="preserve">
          <source>companionObjectInstance</source>
          <target state="translated">companionObjectInstance</target>
        </trans-unit>
        <trans-unit id="b64ca250f492e3f0444ad32b68be5f60a163bede" translate="yes" xml:space="preserve">
          <source>compare</source>
          <target state="translated">compare</target>
        </trans-unit>
        <trans-unit id="eb5ddbb25f237dd25401f991b0c65126bfcc865d" translate="yes" xml:space="preserve">
          <source>compareAndSet</source>
          <target state="translated">compareAndSet</target>
        </trans-unit>
        <trans-unit id="03a6e40fc9569e683aff9a6506b60195d3f2c12e" translate="yes" xml:space="preserve">
          <source>compareAndSwap</source>
          <target state="translated">compareAndSwap</target>
        </trans-unit>
        <trans-unit id="a63703c14ffcd35500bed3089b2e0687df85ada7" translate="yes" xml:space="preserve">
          <source>compareBy</source>
          <target state="translated">compareBy</target>
        </trans-unit>
        <trans-unit id="b6db914ffb94fe1893134888655baad4f6b9fd21" translate="yes" xml:space="preserve">
          <source>compareByDescending</source>
          <target state="translated">compareByDescending</target>
        </trans-unit>
        <trans-unit id="77097d5bfead84fc1058447e53f202c5ce54013e" translate="yes" xml:space="preserve">
          <source>compareTo</source>
          <target state="translated">compareTo</target>
        </trans-unit>
        <trans-unit id="f0d8fc33a240c7993378c53a3b9466a9362146af" translate="yes" xml:space="preserve">
          <source>compareValues</source>
          <target state="translated">compareValues</target>
        </trans-unit>
        <trans-unit id="5e3bc1006b2e4de06f0d54f96f9e66982ecb8c88" translate="yes" xml:space="preserve">
          <source>compareValuesBy</source>
          <target state="translated">compareValuesBy</target>
        </trans-unit>
        <trans-unit id="e026fe2f4131d8c5feabb63611b964871733f25b" translate="yes" xml:space="preserve">
          <source>compiled for all platforms</source>
          <target state="translated">为所有平台编译</target>
        </trans-unit>
        <trans-unit id="562a717296ca0dd2014669605429392ed62dbb07" translate="yes" xml:space="preserve">
          <source>compiled it to Android Jar</source>
          <target state="translated">将其编译成Android Jar</target>
        </trans-unit>
        <trans-unit id="d510b1eb36fdf7503e41930966ccd925b9c65bfb" translate="yes" xml:space="preserve">
          <source>compiled it to iOS Framework</source>
          <target state="translated">将其编译成iOS框架</target>
        </trans-unit>
        <trans-unit id="d8c796c39dd98d7588e4cb134c5c585563c5b656" translate="yes" xml:space="preserve">
          <source>compilerPlugins</source>
          <target state="translated">compilerPlugins</target>
        </trans-unit>
        <trans-unit id="59913969497da18e499f9043f2c32f5e3215bdc6" translate="yes" xml:space="preserve">
          <source>component1</source>
          <target state="translated">component1</target>
        </trans-unit>
        <trans-unit id="54ac2124e7ef0796441f50c3c712489f7bdaa6d6" translate="yes" xml:space="preserve">
          <source>component1 corresponds to the value of the first group, component2 &amp;mdash; of the second, and so on.</source>
          <target state="translated">component1对应于第一组的值，component2-第二组的值，依此类推。</target>
        </trans-unit>
        <trans-unit id="83765039b4251fcb697ad1a387b77f2f2f6e7a5e" translate="yes" xml:space="preserve">
          <source>component10</source>
          <target state="translated">component10</target>
        </trans-unit>
        <trans-unit id="4e1774e796024f5311d0200933d91134930e5df5" translate="yes" xml:space="preserve">
          <source>component2</source>
          <target state="translated">component2</target>
        </trans-unit>
        <trans-unit id="a17e8d97920a0948ef3167449a05b07ff6c6fa1f" translate="yes" xml:space="preserve">
          <source>component3</source>
          <target state="translated">component3</target>
        </trans-unit>
        <trans-unit id="b8feab9806375754e69c10231ada337fb6d42c87" translate="yes" xml:space="preserve">
          <source>component4</source>
          <target state="translated">component4</target>
        </trans-unit>
        <trans-unit id="0bba58902df716eba70c0f535f7e0a473e1e4d06" translate="yes" xml:space="preserve">
          <source>component5</source>
          <target state="translated">component5</target>
        </trans-unit>
        <trans-unit id="9e5c0cfce1c8ce2bb3107ce9ec32a1615ac3fcc2" translate="yes" xml:space="preserve">
          <source>component6</source>
          <target state="translated">component6</target>
        </trans-unit>
        <trans-unit id="7d792ba5416fd0a0d388a05a0f299e6f4608bb30" translate="yes" xml:space="preserve">
          <source>component7</source>
          <target state="translated">component7</target>
        </trans-unit>
        <trans-unit id="b48a6af65a889e820d8ac2d288429627f23783eb" translate="yes" xml:space="preserve">
          <source>component8</source>
          <target state="translated">component8</target>
        </trans-unit>
        <trans-unit id="ef75a94902a3e58e52673c3bd1093fc7fff23d9e" translate="yes" xml:space="preserve">
          <source>component9</source>
          <target state="translated">component9</target>
        </trans-unit>
        <trans-unit id="76123f93eb74a368e334fed0c0c68c9a2b0e48f2" translate="yes" xml:space="preserve">
          <source>computeNext</source>
          <target state="translated">computeNext</target>
        </trans-unit>
        <trans-unit id="49ba358c3272c2db40fc6ab2c103669678628b68" translate="yes" xml:space="preserve">
          <source>concat</source>
          <target state="translated">concat</target>
        </trans-unit>
        <trans-unit id="6957686ec711e8a3f8573ceb732e5f560cc9234b" translate="yes" xml:space="preserve">
          <source>concatToString</source>
          <target state="translated">concatToString</target>
        </trans-unit>
        <trans-unit id="e2346381bb8eb382eb8b3877a9d3838996c5ca2d" translate="yes" xml:space="preserve">
          <source>console</source>
          <target state="translated">console</target>
        </trans-unit>
        <trans-unit id="b78f13cf32ca4265dde3b815eb714d396c030088" translate="yes" xml:space="preserve">
          <source>constrainOnce</source>
          <target state="translated">constrainOnce</target>
        </trans-unit>
        <trans-unit id="8be62a6135807cf051939508ab5eb49bbbfd3ec9" translate="yes" xml:space="preserve">
          <source>constructors</source>
          <target state="translated">constructors</target>
        </trans-unit>
        <trans-unit id="d5ef77d58ae5369cbbe90014845216878b9590eb" translate="yes" xml:space="preserve">
          <source>constructors have the name &quot;&quot;,</source>
          <target state="translated">构造函数的名称为&quot;&quot;。</target>
        </trans-unit>
        <trans-unit id="4bbe204fd0282132c68b4dd4d9ab41a1c2b3d23b" translate="yes" xml:space="preserve">
          <source>consume</source>
          <target state="translated">consume</target>
        </trans-unit>
        <trans-unit id="caeb909ae4ff4ee25a0ff0d476946ed256f2aee1" translate="yes" xml:space="preserve">
          <source>contains</source>
          <target state="translated">contains</target>
        </trans-unit>
        <trans-unit id="fb64fd53b867873009338f11857a4d9b2ae9d5fe" translate="yes" xml:space="preserve">
          <source>containsAll</source>
          <target state="translated">containsAll</target>
        </trans-unit>
        <trans-unit id="d60f0013704a48405ea3eaaf4cba6811e8b77bae" translate="yes" xml:space="preserve">
          <source>containsKey</source>
          <target state="translated">containsKey</target>
        </trans-unit>
        <trans-unit id="0a43087424e3471efb5e254e9be62d6808ae379b" translate="yes" xml:space="preserve">
          <source>containsMatchIn</source>
          <target state="translated">containsMatchIn</target>
        </trans-unit>
        <trans-unit id="dcf3e8a7e8013b219edf7ce7101bd04c1cc29909" translate="yes" xml:space="preserve">
          <source>containsValue</source>
          <target state="translated">containsValue</target>
        </trans-unit>
        <trans-unit id="e4f8a9806acc36efea951353cab26b689a1900d4" translate="yes" xml:space="preserve">
          <source>contentDeepEquals</source>
          <target state="translated">contentDeepEquals</target>
        </trans-unit>
        <trans-unit id="87edaa47f9d833b395dff5e38f58c229c67973f2" translate="yes" xml:space="preserve">
          <source>contentDeepHashCode</source>
          <target state="translated">contentDeepHashCode</target>
        </trans-unit>
        <trans-unit id="65ed72edf433c2ff3b838b82337c87961500c066" translate="yes" xml:space="preserve">
          <source>contentDeepToString</source>
          <target state="translated">contentDeepToString</target>
        </trans-unit>
        <trans-unit id="3815d14dcd198d4f3d67969d875bacb9bbaba9bf" translate="yes" xml:space="preserve">
          <source>contentEquals</source>
          <target state="translated">contentEquals</target>
        </trans-unit>
        <trans-unit id="cf0f66ecd093a788ab25343b12bf10217d3e7001" translate="yes" xml:space="preserve">
          <source>contentHashCode</source>
          <target state="translated">contentHashCode</target>
        </trans-unit>
        <trans-unit id="939dedc61fc7fa759ef7c80666c09e86af3a76c7" translate="yes" xml:space="preserve">
          <source>contentToString</source>
          <target state="translated">contentToString</target>
        </trans-unit>
        <trans-unit id="ec2727b3b71f07635f726026bef44352ec89e452" translate="yes" xml:space="preserve">
          <source>context</source>
          <target state="translated">context</target>
        </trans-unit>
        <trans-unit id="d61ceadbdb0081cce7a2c1f65558bd2243ecc161" translate="yes" xml:space="preserve">
          <source>contract</source>
          <target state="translated">contract</target>
        </trans-unit>
        <trans-unit id="35bf0b48f1ec558d7e19ba7fb494e6b0c3371521" translate="yes" xml:space="preserve">
          <source>contravariant</source>
          <target state="translated">contravariant</target>
        </trans-unit>
        <trans-unit id="20a70aaf7e25faabeb80d477937f0a1a2d3ba60d" translate="yes" xml:space="preserve">
          <source>convert</source>
          <target state="translated">convert</target>
        </trans-unit>
        <trans-unit id="f84e2e2dadd87384fb55f25886926b777e8378f1" translate="yes" xml:space="preserve">
          <source>copy</source>
          <target state="translated">copy</target>
        </trans-unit>
        <trans-unit id="f5318ecbb9c7ad77d9e9e08583ba4eb2634ff444" translate="yes" xml:space="preserve">
          <source>copyInto</source>
          <target state="translated">copyInto</target>
        </trans-unit>
        <trans-unit id="5d3b12970ed02e2beb8121a30f59f831b7eeb9e1" translate="yes" xml:space="preserve">
          <source>copyOf</source>
          <target state="translated">copyOf</target>
        </trans-unit>
        <trans-unit id="187a223af2436f5accfab307efd68c0ad7e67a55" translate="yes" xml:space="preserve">
          <source>copyOfRange</source>
          <target state="translated">copyOfRange</target>
        </trans-unit>
        <trans-unit id="6d7fbd6f61662ff99976d5ebea080585150e5116" translate="yes" xml:space="preserve">
          <source>copyRecursively</source>
          <target state="translated">copyRecursively</target>
        </trans-unit>
        <trans-unit id="4b8555b7f56f28cfe3f2499d5f3694f91471136c" translate="yes" xml:space="preserve">
          <source>copyTo</source>
          <target state="translated">copyTo</target>
        </trans-unit>
        <trans-unit id="521307ddb67a4abc14248801dae5e5989aca76c1" translate="yes" xml:space="preserve">
          <source>copyright</source>
          <target state="translated">copyright</target>
        </trans-unit>
        <trans-unit id="fc1d9a95d2d75e17bad45cefb49a1ccfd1dd1346" translate="yes" xml:space="preserve">
          <source>coroutineContext</source>
          <target state="translated">coroutineContext</target>
        </trans-unit>
        <trans-unit id="a0a8c3c09319543eaec593eea24c4bc8cfafaebe" translate="yes" xml:space="preserve">
          <source>corresponds to</source>
          <target state="translated">相当于</target>
        </trans-unit>
        <trans-unit id="5bcc2c4d81811ed80bdd75460668f2bc84ab2137" translate="yes" xml:space="preserve">
          <source>cos</source>
          <target state="translated">cos</target>
        </trans-unit>
        <trans-unit id="a2feafc74f88dca754a5ba43c50a85d79a767e72" translate="yes" xml:space="preserve">
          <source>cosh</source>
          <target state="translated">cosh</target>
        </trans-unit>
        <trans-unit id="ee9f38e186ba06f57b7b74d7e626b94e13ce2556" translate="yes" xml:space="preserve">
          <source>count</source>
          <target state="translated">count</target>
        </trans-unit>
        <trans-unit id="483e9a3efce7475531c4c311752ad734c4cb77eb" translate="yes" xml:space="preserve">
          <source>countLeadingZeroBits</source>
          <target state="translated">countLeadingZeroBits</target>
        </trans-unit>
        <trans-unit id="9f18d0fa7725009c1a56be03881661691af16b1e" translate="yes" xml:space="preserve">
          <source>countOneBits</source>
          <target state="translated">countOneBits</target>
        </trans-unit>
        <trans-unit id="50cb2d7607aeed8d8482d19492dc4498314a2e1d" translate="yes" xml:space="preserve">
          <source>countTrailingZeroBits</source>
          <target state="translated">countTrailingZeroBits</target>
        </trans-unit>
        <trans-unit id="6b629844c06459311586806d8c11d02e760a1908" translate="yes" xml:space="preserve">
          <source>covariant</source>
          <target state="translated">covariant</target>
        </trans-unit>
        <trans-unit id="4a6e1f8b8bc254e7f0a66560bf8c5bab9a89abf2" translate="yes" xml:space="preserve">
          <source>cpuArchitecture</source>
          <target state="translated">cpuArchitecture</target>
        </trans-unit>
        <trans-unit id="9b7c68a918b17eb053809b198d7c9abfc142f30a" translate="yes" xml:space="preserve">
          <source>create</source>
          <target state="translated">create</target>
        </trans-unit>
        <trans-unit id="8052493bf425ff9cb0dcb7bb392ac15aa0e6919a" translate="yes" xml:space="preserve">
          <source>create a &lt;code&gt;.def&lt;/code&gt; file describing what to include into bindings</source>
          <target state="translated">创建一个 &lt;code&gt;.def&lt;/code&gt; 文件，描述要包含在绑定中的内容</target>
        </trans-unit>
        <trans-unit id="1240085bf871c5fbbca12170a7e6157aa7ee5bbe" translate="yes" xml:space="preserve">
          <source>createCoroutine</source>
          <target state="translated">createCoroutine</target>
        </trans-unit>
        <trans-unit id="395971bc5eb7a8670239aa8b126314f15b7176ea" translate="yes" xml:space="preserve">
          <source>createCoroutineUnchecked</source>
          <target state="translated">createCoroutineUnchecked</target>
        </trans-unit>
        <trans-unit id="a831ea02209fd7328db1d98f85ff928e0488ab7b" translate="yes" xml:space="preserve">
          <source>createCoroutineUnintercepted</source>
          <target state="translated">createCoroutineUnintercepted</target>
        </trans-unit>
        <trans-unit id="039816608a65a18a7c7cd094f048a091abb0d577" translate="yes" xml:space="preserve">
          <source>createElement</source>
          <target state="translated">createElement</target>
        </trans-unit>
        <trans-unit id="1c4baeae507924e226e6906f777b3b0a7bf6dbcc" translate="yes" xml:space="preserve">
          <source>createEntrySet</source>
          <target state="translated">createEntrySet</target>
        </trans-unit>
        <trans-unit id="c38e762cbc8eb8256394bfc82c4e377d4d81efae" translate="yes" xml:space="preserve">
          <source>createInstance</source>
          <target state="translated">createInstance</target>
        </trans-unit>
        <trans-unit id="b7df17c58e8f7ff8a43e782945ba31eefca2f2b6" translate="yes" xml:space="preserve">
          <source>createKotlinObjectHolder</source>
          <target state="translated">createKotlinObjectHolder</target>
        </trans-unit>
        <trans-unit id="90b963dc1a1c617c26467d259a400c9c22dc6017" translate="yes" xml:space="preserve">
          <source>createTempDir</source>
          <target state="translated">createTempDir</target>
        </trans-unit>
        <trans-unit id="3bb4c9fc7ba625c74b034449318e900f8f32698b" translate="yes" xml:space="preserve">
          <source>createTempFile</source>
          <target state="translated">createTempFile</target>
        </trans-unit>
        <trans-unit id="e05d920f8dff0149daaa8dfecb2362024c16dfa5" translate="yes" xml:space="preserve">
          <source>createType</source>
          <target state="translated">createType</target>
        </trans-unit>
        <trans-unit id="9556fbef974ec7fce10079902cc1f1c4668d20c6" translate="yes" xml:space="preserve">
          <source>createValues</source>
          <target state="translated">createValues</target>
        </trans-unit>
        <trans-unit id="352661edf2894ad07524ca49eafc64558df6daaf" translate="yes" xml:space="preserve">
          <source>created an Android application in Android Studio</source>
          <target state="translated">在Android Studio中创建了一个Android应用程序</target>
        </trans-unit>
        <trans-unit id="198db4b578734a2ea3f631f51ebf0d4d11193e63" translate="yes" xml:space="preserve">
          <source>created an iOS application in Xcode</source>
          <target state="translated">在Xcode中创建了一个iOS应用程序</target>
        </trans-unit>
        <trans-unit id="f24676ba5aa57f33965d5e587266a91d4dd6ff95" translate="yes" xml:space="preserve">
          <source>creates an empty bit set with the specified &lt;a href=&quot;size&quot;&gt;size&lt;/a&gt;</source>
          <target state="translated">创建具有指定&lt;a href=&quot;size&quot;&gt;大小&lt;/a&gt;的空位集</target>
        </trans-unit>
        <trans-unit id="83d681f72f36cebd22958b2427e6ae9322e18f7a" translate="yes" xml:space="preserve">
          <source>cstr</source>
          <target state="translated">cstr</target>
        </trans-unit>
        <trans-unit id="f8a52365911cc3041fbc901b5260e788670f653a" translate="yes" xml:space="preserve">
          <source>curl on Windows</source>
          <target state="translated">curl在Windows上</target>
        </trans-unit>
        <trans-unit id="405ab5d2b930fe3725b3cb1ace051f9fd3d6d7af" translate="yes" xml:space="preserve">
          <source>current</source>
          <target state="translated">current</target>
        </trans-unit>
        <trans-unit id="72433145c0b1dd80d7b55d0147b9c7ec326ac340" translate="yes" xml:space="preserve">
          <source>currentArena</source>
          <target state="translated">currentArena</target>
        </trans-unit>
        <trans-unit id="c22092c96ea0f59ef19d1bdf7a374b5847f5bf41" translate="yes" xml:space="preserve">
          <source>custom classes implementing standard Kotlin collection interfaces (&lt;code&gt;List&lt;/code&gt;, &lt;code&gt;Map&lt;/code&gt;, &lt;code&gt;Set&lt;/code&gt;) and other special classes</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0a1b328a0bb8adbdab98e35620e4899f96a30589" translate="yes" xml:space="preserve">
          <source>dagger</source>
          <target state="translated">dagger</target>
        </trans-unit>
        <trans-unit id="cbcc2ff6a0894e6e7f9a1a6a6a36b68fb36aa151" translate="yes" xml:space="preserve">
          <source>data1</source>
          <target state="translated">data1</target>
        </trans-unit>
        <trans-unit id="4c64312d5aa547e7c43b39f451fd0be214b550d6" translate="yes" xml:space="preserve">
          <source>data2</source>
          <target state="translated">data2</target>
        </trans-unit>
        <trans-unit id="9d1820b67126ffcf75339fde65217ad4baf88a50" translate="yes" xml:space="preserve">
          <source>dateLocaleOptions</source>
          <target state="translated">dateLocaleOptions</target>
        </trans-unit>
        <trans-unit id="a2620cbc10f5198dd03e3f5a1569eb5dcf9a6a87" translate="yes" xml:space="preserve">
          <source>day</source>
          <target state="translated">day</target>
        </trans-unit>
        <trans-unit id="5548ae4f34cbb6e30414532924e2088d915b460f" translate="yes" xml:space="preserve">
          <source>days</source>
          <target state="translated">days</target>
        </trans-unit>
        <trans-unit id="c9c5049da5ba9f656ab57a883812fbbf0b60107e" translate="yes" xml:space="preserve">
          <source>dec</source>
          <target state="translated">dec</target>
        </trans-unit>
        <trans-unit id="07fa5f94cbe34720cda46245df1c0423adc4e264" translate="yes" xml:space="preserve">
          <source>decapitalize</source>
          <target state="translated">decapitalize</target>
        </trans-unit>
        <trans-unit id="03d9b17c21a04a6c2b43efe8b114d9107b2e7299" translate="yes" xml:space="preserve">
          <source>declaredFunctions</source>
          <target state="translated">declaredFunctions</target>
        </trans-unit>
        <trans-unit id="a66ac98e5591be09c895a0a5f52d513337580c95" translate="yes" xml:space="preserve">
          <source>declaredMemberExtensionFunctions</source>
          <target state="translated">declaredMemberExtensionFunctions</target>
        </trans-unit>
        <trans-unit id="93f284926c89fb8a7d028cdac61f74d9da14be5f" translate="yes" xml:space="preserve">
          <source>declaredMemberExtensionProperties</source>
          <target state="translated">declaredMemberExtensionProperties</target>
        </trans-unit>
        <trans-unit id="bc30b3cbc87c8ef2ad83c31a61332d836501ab67" translate="yes" xml:space="preserve">
          <source>declaredMemberFunctions</source>
          <target state="translated">declaredMemberFunctions</target>
        </trans-unit>
        <trans-unit id="02e2fcf45ea807ee5b4f7c3ab215dba75d07e2ff" translate="yes" xml:space="preserve">
          <source>declaredMemberProperties</source>
          <target state="translated">declaredMemberProperties</target>
        </trans-unit>
        <trans-unit id="840b270898adde52a3ede9e63dc411f57bc24cf0" translate="yes" xml:space="preserve">
          <source>declaredMembers</source>
          <target state="translated">declaredMembers</target>
        </trans-unit>
        <trans-unit id="fab3293c9bf6669c97f3f9c49f8e58a0c17037d9" translate="yes" xml:space="preserve">
          <source>declares the &lt;a href=&quot;properties#getters-and-setters&quot;&gt;getter of a property&lt;/a&gt;</source>
          <target state="translated">声明&lt;a href=&quot;properties#getters-and-setters&quot;&gt;属性的获取者&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="d447f8e5b662e7cdcf19c9f1b09b6b3efd0b2a4a" translate="yes" xml:space="preserve">
          <source>declares the &lt;a href=&quot;properties#getters-and-setters&quot;&gt;setter of a property&lt;/a&gt;</source>
          <target state="translated">宣告&lt;a href=&quot;properties#getters-and-setters&quot;&gt;财产&lt;/a&gt;的设定者</target>
        </trans-unit>
        <trans-unit id="a973ff7abba5bd1dc72f24a68a9d5c3e68cc8ab7" translate="yes" xml:space="preserve">
          <source>decodeToString</source>
          <target state="translated">decodeToString</target>
        </trans-unit>
        <trans-unit id="cb8747153bde6524fb1a852e80cdd561013db583" translate="yes" xml:space="preserve">
          <source>decrement</source>
          <target state="translated">decrement</target>
        </trans-unit>
        <trans-unit id="b051d85fecfccd804af4dd658698ba2ed010636d" translate="yes" xml:space="preserve">
          <source>defaultType</source>
          <target state="translated">defaultType</target>
        </trans-unit>
        <trans-unit id="d2cc99410cb345cd3bd028ee0fa777efb912e110" translate="yes" xml:space="preserve">
          <source>defer</source>
          <target state="translated">defer</target>
        </trans-unit>
        <trans-unit id="84ef3bdf580245dd51f572de5786958c3accd8ad" translate="yes" xml:space="preserve">
          <source>definedExternally</source>
          <target state="translated">definedExternally</target>
        </trans-unit>
        <trans-unit id="7955b936c48c9e75940ab4eb9d965657ef4fbc91" translate="yes" xml:space="preserve">
          <source>degree</source>
          <target state="translated">degree</target>
        </trans-unit>
        <trans-unit id="a5c3d2245faa455972a0767d66affe0212c3e048" translate="yes" xml:space="preserve">
          <source>deinitRuntimeIfNeeded</source>
          <target state="translated">deinitRuntimeIfNeeded</target>
        </trans-unit>
        <trans-unit id="eb5645dc52a104d4a688356df10512890f1fdd32" translate="yes" xml:space="preserve">
          <source>delegates the implementation of accessors for a property to another object</source>
          <target state="translated">将一个属性的存取器委托给另一个对象来实现。</target>
        </trans-unit>
        <trans-unit id="cf3671d5e8d6bd073f88cee20eadbcc683e290f0" translate="yes" xml:space="preserve">
          <source>delegates the implementation of an interface to another object</source>
          <target state="translated">将一个接口的实现委托给另一个对象。</target>
        </trans-unit>
        <trans-unit id="5a5ecfe6db57773e77aaacb83bd9dda4c230a08f" translate="yes" xml:space="preserve">
          <source>deleteAt</source>
          <target state="translated">deleteAt</target>
        </trans-unit>
        <trans-unit id="35601b9158a523d2645b3250299d9b3b690456fb" translate="yes" xml:space="preserve">
          <source>deleteCharAt</source>
          <target state="translated">deleteCharAt</target>
        </trans-unit>
        <trans-unit id="ce2a22f4b41e2ae3c4bd6c1105f018acba783ce6" translate="yes" xml:space="preserve">
          <source>deleteRange</source>
          <target state="translated">deleteRange</target>
        </trans-unit>
        <trans-unit id="d82b2a2764f70a9493056c685e5bf673cf0a642d" translate="yes" xml:space="preserve">
          <source>deleteRecursively</source>
          <target state="translated">deleteRecursively</target>
        </trans-unit>
        <trans-unit id="03b951fe91e3e7354a2393c2a07c9cae1c7eac7d" translate="yes" xml:space="preserve">
          <source>designated</source>
          <target state="translated">designated</target>
        </trans-unit>
        <trans-unit id="87e075b0e7dafb91ae3327bee04d23d1ca6a2231" translate="yes" xml:space="preserve">
          <source>destructured</source>
          <target state="translated">destructured</target>
        </trans-unit>
        <trans-unit id="7ee737c83ee689c96ef37d3a029068c390ebc8f8" translate="yes" xml:space="preserve">
          <source>dir</source>
          <target state="translated">dir</target>
        </trans-unit>
        <trans-unit id="ea8b9806e8e77887cc3c72b4aadd4eb003fec56b" translate="yes" xml:space="preserve">
          <source>directionality</source>
          <target state="translated">directionality</target>
        </trans-unit>
        <trans-unit id="d38626a856365c923733f74c0a626686693bcb9e" translate="yes" xml:space="preserve">
          <source>dispose</source>
          <target state="translated">dispose</target>
        </trans-unit>
        <trans-unit id="21a08d6787a0d64238e8d57c9b087a45f1a70665" translate="yes" xml:space="preserve">
          <source>distinct</source>
          <target state="translated">distinct</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
