<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="zh-CN" datatype="htmlbody" original="kotlin">
    <body>
      <group id="kotlin">
        <trans-unit id="bc555107bc3ab29b699e3ac57e1fb75bce2155ce" translate="yes" xml:space="preserve">
          <source>Kotlin/JS is also compatible with the most common module systems: UMD, CommonJS, and AMD. Being able to &lt;a href=&quot;../tutorials/javascript/working-with-modules/working-with-modules&quot;&gt;produce and consume modules&lt;/a&gt; means that you can interact with the JavaScript ecosystem in a structured manner.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="73e221948b2977f48bf5440d552a61a97802b3f2" translate="yes" xml:space="preserve">
          <source>Kotlin/JS provides the ability to transpile your Kotlin code, the Kotlin standard library, and any compatible dependencies to JavaScript. The current implementation of Kotlin/JS targets &lt;a href=&quot;https://www.ecma-international.org/ecma-262/5.1/&quot;&gt;ES5&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e161bf22c4b5c5951be23fef6f0ff257426ebe17" translate="yes" xml:space="preserve">
          <source>Kotlin/JS, Today and Tomorrow</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="44cbff389316ebfe00ceb67daf169189d44ae420" translate="yes" xml:space="preserve">
          <source>Kotlin/JVM</source>
          <target state="translated">Kotlin/JVM</target>
        </trans-unit>
        <trans-unit id="629649c3a6fde50e4105c70afe705d63afa55224" translate="yes" xml:space="preserve">
          <source>Kotlin/JVM (IR-based)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="59ce5e2461e87e30bf83a0eb1faafe214139a6af" translate="yes" xml:space="preserve">
          <source>Kotlin/Native</source>
          <target state="translated">Kotlin/Native</target>
        </trans-unit>
        <trans-unit id="ba24fc19201f933494d7dd5a5c0dfc8e159aaf9b" translate="yes" xml:space="preserve">
          <source>Kotlin/Native &lt;a href=&quot;native/platform_libs&quot;&gt;libraries&lt;/a&gt; help to share Kotlin code between projects. POSIX, gzip, OpenGL, Metal, Foundation, and many other popular libraries and Apple frameworks are pre-imported and included as Kotlin/Native libraries into the compiler package.</source>
          <target state="translated">Kotlin / Native &lt;a href=&quot;native/platform_libs&quot;&gt;库&lt;/a&gt;有助于在项目之间共享Kotlin代码。预先导入POSIX，gzip，OpenGL，Metal，Foundation和许多其他流行的库和Apple框架，并将它们作为Kotlin / Native库包含在编译器软件包中。</target>
        </trans-unit>
        <trans-unit id="87f61b22867c181628a95e8886f5b445415a504e" translate="yes" xml:space="preserve">
          <source>Kotlin/Native Gradle plugin</source>
          <target state="translated">Kotlin/Native Gradle插件</target>
        </trans-unit>
        <trans-unit id="c83dbff85c7c1cfb09790c18b941a770c8cb6d04" translate="yes" xml:space="preserve">
          <source>Kotlin/Native Runtime</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="df149e18227e20b3ab9482b52698611b0a6fc13c" translate="yes" xml:space="preserve">
          <source>Kotlin/Native Runtime Declarations</source>
          <target state="translated">Kotlin/Native Runtime声明</target>
        </trans-unit>
        <trans-unit id="491c504edd0672427d971480838eef4206234894" translate="yes" xml:space="preserve">
          <source>Kotlin/Native also has tight integration with Apple technologies. The &lt;a href=&quot;apple-framework&quot;&gt;Kotlin/Native as an Apple Framework&lt;/a&gt; tutorial explains how to compile Kotlin code into a framework for Swift and Objective-C.</source>
          <target state="translated">Kotlin / Native还与Apple技术紧密集成。&lt;a href=&quot;apple-framework&quot;&gt;作为苹果框架&lt;/a&gt;的Kotlin / Native教程说明了如何将Kotlin代码编译为Swift和Objective-C的框架。</target>
        </trans-unit>
        <trans-unit id="1d512deb7d342683898c6350ed1a11736984886b" translate="yes" xml:space="preserve">
          <source>Kotlin/Native also has tight integration with Objective-C and Swift. It is covered in the &lt;a href=&quot;apple-framework&quot;&gt;Kotlin/Native as an Apple Framework&lt;/a&gt; tutorial.</source>
          <target state="translated">Kotlin / Native还与Objective-C和Swift紧密集成。&lt;a href=&quot;apple-framework&quot;&gt;作为苹果框架&lt;/a&gt;教程，在Kotlin / Native中进行了介绍。</target>
        </trans-unit>
        <trans-unit id="08982dde24268c672ff4e00ffc1e0aa78c3c7edf" translate="yes" xml:space="preserve">
          <source>Kotlin/Native as a Dynamic Library</source>
          <target state="translated">作为动态库的Kotlin/Native</target>
        </trans-unit>
        <trans-unit id="9337f3778507f31504f20c46b400d4ffe737a776" translate="yes" xml:space="preserve">
          <source>Kotlin/Native as an Apple Framework</source>
          <target state="translated">作为苹果框架的Kotlin/Native</target>
        </trans-unit>
        <trans-unit id="5920643ed2bd803efde8c74d41d4425c7caa2ab6" translate="yes" xml:space="preserve">
          <source>Kotlin/Native can be used for many &lt;a href=&quot;basic-kotlin-native-app&quot;&gt;targets&lt;/a&gt; and applications, including, but not limited to macOS, Windows, Linux, and &lt;a href=&quot;mpp-ios-android&quot;&gt;iOS&lt;/a&gt;.</source>
          <target state="translated">Kotlin / Native可用于许多&lt;a href=&quot;basic-kotlin-native-app&quot;&gt;目标&lt;/a&gt;和应用程序，包括但不限于macOS，Windows，Linux和&lt;a href=&quot;mpp-ios-android&quot;&gt;iOS&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="5a86ebad61bd5c0feb7bd99b7af759453735031a" translate="yes" xml:space="preserve">
          <source>Kotlin/Native comes with the &lt;code&gt;cinterop&lt;/code&gt; tool, the tool generates bindings between the C language and Kotlin. It uses a &lt;code&gt;.def&lt;/code&gt; file to specify a C library to import. More details are discussed in the &lt;a href=&quot;../../reference/native/c_interop&quot;&gt;Interop with C Libraries&lt;/a&gt; tutorial.</source>
          <target state="translated">Kotlin / Native附带了 &lt;code&gt;cinterop&lt;/code&gt; 工具，该工具在C语言和Kotlin之间生成绑定。它使用 &lt;code&gt;.def&lt;/code&gt; 文件指定要导入的C库。&amp;ldquo; &lt;a href=&quot;../../reference/native/c_interop&quot;&gt;Interop with C Libraries&amp;rdquo;&lt;/a&gt;教程中讨论了更多详细信息。</target>
        </trans-unit>
        <trans-unit id="c8a9d6995d5deeb05943192825e878fac0954ca5" translate="yes" xml:space="preserve">
          <source>Kotlin/Native comes with the &lt;code&gt;cinterop&lt;/code&gt; tool; the tool generates bindings between the C language and Kotlin. It uses a &lt;code&gt;.def&lt;/code&gt; file to specify a C library to import. More details on this are in the &lt;a href=&quot;../../reference/native/c_interop&quot;&gt;Interop with C Libraries&lt;/a&gt; tutorial.</source>
          <target state="translated">Kotlin / Native带有 &lt;code&gt;cinterop&lt;/code&gt; 工具。该工具在C语言和Kotlin之间生成绑定。它使用 &lt;code&gt;.def&lt;/code&gt; 文件指定要导入的C库。有关此问题的更多详细信息，请参见《&lt;a href=&quot;../../reference/native/c_interop&quot;&gt;Interop with C Libraries》&lt;/a&gt;教程。</target>
        </trans-unit>
        <trans-unit id="f608852356bc7f03f212743cacdba0d3e22a135a" translate="yes" xml:space="preserve">
          <source>Kotlin/Native comes with the &lt;code&gt;cinterop&lt;/code&gt; tool; the tool generates bindings between the C language and Kotlin. It uses a &lt;code&gt;.def&lt;/code&gt; file to specify a C library to import. More details on this are in the &lt;a href=&quot;../../reference/native/c_interop&quot;&gt;Interop with C Libraries&lt;/a&gt; tutorial. The quickest way to try out C API mapping is to have all C declarations in the &lt;code&gt;interop.def&lt;/code&gt; file, without creating any &lt;code&gt;.h&lt;/code&gt; of &lt;code&gt;.c&lt;/code&gt; files at all. Then place the C declarations in a &lt;code&gt;interop.def&lt;/code&gt; file after the special &lt;code&gt;---&lt;/code&gt; separator line:</source>
          <target state="translated">Kotlin / Native带有 &lt;code&gt;cinterop&lt;/code&gt; 工具。该工具在C语言和Kotlin之间生成绑定。它使用 &lt;code&gt;.def&lt;/code&gt; 文件指定要导入的C库。有关此问题的更多详细信息，请参见《&lt;a href=&quot;../../reference/native/c_interop&quot;&gt;Interop with C Libraries》&lt;/a&gt;教程。尝试C API映射的最快的方法是在所有的C声明 &lt;code&gt;interop.def&lt;/code&gt; 文件，而不会产生任何 &lt;code&gt;.h&lt;/code&gt; 的 &lt;code&gt;.c&lt;/code&gt; 的所有文件。然后将C声明放在特殊的 &lt;code&gt;---&lt;/code&gt; 分隔线之后的 &lt;code&gt;interop.def&lt;/code&gt; 文件中：</target>
        </trans-unit>
        <trans-unit id="02527cf62d35559073254c9faa21884b055d8fe5" translate="yes" xml:space="preserve">
          <source>Kotlin/Native compiler can produce a dynamic library out of the Kotlin code we have. A dynamic library often comes with a header file, a &lt;code&gt;.h&lt;/code&gt; file, which we will use to call compiled code from C.</source>
          <target state="translated">Kotlin / Native编译器可以从我们拥有的Kotlin代码中生成一个动态库。动态库通常带有一个头文件（ &lt;code&gt;.h&lt;/code&gt; 文件），我们将使用它从C调用编译后的代码。</target>
        </trans-unit>
        <trans-unit id="aa4881e31bc09168e1508d74717ea87e97808663" translate="yes" xml:space="preserve">
          <source>Kotlin/Native compiler can produce a framework for macOS and iOS out of the Kotlin code. The created framework contains all declarations and binaries needed to use it with Objective-C and Swift. The best way to understand the techniques is to try it for ourselves. Let's create a tiny Kotlin library first and use it from an Objective-C program.</source>
          <target state="translated">Kotlin/Native编译器可以用Kotlin代码生成一个适用于macOS和iOS的框架。所创建的框架包含了使用Objective-C和Swift所需的所有声明和二进制文件。理解这些技术的最好方法是自己尝试。让我们先创建一个小小的Kotlin库,并从一个Objective-C程序中使用它。</target>
        </trans-unit>
        <trans-unit id="4e70e70db2bb73d6cf1636bc883f8b53e7b6e7cb" translate="yes" xml:space="preserve">
          <source>Kotlin/Native for Native</source>
          <target state="translated">Kotlin/Native for Native</target>
        </trans-unit>
        <trans-unit id="7c2c0a3630334c277a8dc79b0ff364b848f6cdc2" translate="yes" xml:space="preserve">
          <source>Kotlin/Native has bidirectional interop with Objective-C and Swift languages. Kotlin objects integrate with Objective-C/Swift reference counting. Unused Kotlin objects are automatically removed. The &lt;a href=&quot;https://github.com/JetBrains/kotlin-native/blob/master/OBJC_INTEROP.md&quot;&gt;Objective-C Interop&lt;/a&gt; article contains more information on the interop implementation details. Of course, it is possible to import an existing framework and use it from Kotlin. Kotlin/Native comes with a good set of pre-imported system frameworks.</source>
          <target state="translated">Kotlin / Native具有与Objective-C和Swift语言的双向互操作。Kotlin对象与Objective-C / Swift参考计数集成在一起。未使用的Kotlin对象将自动删除。在&lt;a href=&quot;https://github.com/JetBrains/kotlin-native/blob/master/OBJC_INTEROP.md&quot;&gt;Objective-C的互操作性&lt;/a&gt;文章包含有关互操作性的实施细则的更多信息。当然，可以导入现有框架并从Kotlin使用它。Kotlin / Native带有一整套预导入的系统框架。</target>
        </trans-unit>
        <trans-unit id="fb79704d30655deeda4430e028a0903e865692a2" translate="yes" xml:space="preserve">
          <source>Kotlin/Native has garbage collection, but it does not help us deal with Kotlin objects from the C language. Kotlin/Native has interop with Objective-C and Swift and integrates with their reference counters. The &lt;a href=&quot;../../reference/native/objc_interop&quot;&gt;Objective-C Interop&lt;/a&gt; documentation article contains more details on it. Also, there is the tutorial &lt;a href=&quot;apple-framework&quot;&gt;Kotlin/Native as an Apple Framework&lt;/a&gt;.</source>
          <target state="translated">Kotlin / Native具有垃圾回收，但是它不能帮助我们处理C语言中的Kotlin对象。Kotlin / Native与Objective-C和Swift互操作，并与它们的参考计数器集成。在&lt;a href=&quot;../../reference/native/objc_interop&quot;&gt;Objective-C的互操作性&lt;/a&gt;文档文章包含有关它的更多细节。另外，还有教程&lt;a href=&quot;apple-framework&quot;&gt;Kotlin / Native作为Apple Framework&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="c4bedc3bea01878b4fcc1d82e743d0490ea2316b" translate="yes" xml:space="preserve">
          <source>Kotlin/Native implements strict mutability checks, ensuring the important invariant that the object is either immutable or accessible from the single thread at that moment in time (&lt;code&gt;mutable XOR global&lt;/code&gt;).</source>
          <target state="translated">Kotlin / Native执行严格的可变性检查，以确保重要的不变性，即该对象在该时刻是不变的或可以从单个线程访问（ &lt;code&gt;mutable XOR global&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="36a59900f037725e245ca430f51e42774fdb92b1" translate="yes" xml:space="preserve">
          <source>Kotlin/Native interop with Swift and Objective-C is covered in the &lt;a href=&quot;../../reference/native/objc_interop&quot;&gt;documentation&lt;/a&gt; article. Also, the same topic is covered in the &lt;a href=&quot;apple-framework&quot;&gt;Kotlin/Native as an Apple Framework&lt;/a&gt; tutorial.</source>
          <target state="translated">&lt;a href=&quot;../../reference/native/objc_interop&quot;&gt;文档&lt;/a&gt;文章涵盖了与Swift和Objective-C的Kotlin / Native互操作。另外，&lt;a href=&quot;apple-framework&quot;&gt;Kotlin / Native作为Apple Framework&lt;/a&gt;教程涵盖了相同的主题。</target>
        </trans-unit>
        <trans-unit id="9fbae7a065c905b4b51aef1c8da31351fd4627d4" translate="yes" xml:space="preserve">
          <source>Kotlin/Native interoperability</source>
          <target state="translated">Kotlin/Native互操作性</target>
        </trans-unit>
        <trans-unit id="1610b5a5d3e7a47921adb6d92cccbad92bdc99b6" translate="yes" xml:space="preserve">
          <source>Kotlin/Native interoperability with Swift/Objective-C</source>
          <target state="translated">Kotlin/Native与Swift/Objective-C的互操作性。</target>
        </trans-unit>
        <trans-unit id="d8be23859d14973d71698ea0e5cefbc7c40946a7" translate="yes" xml:space="preserve">
          <source>Kotlin/Native is a technology for compiling Kotlin code to native binaries, which can run without a virtual machine. It is an &lt;a href=&quot;https://llvm.org/&quot;&gt;LLVM&lt;/a&gt; based backend for the Kotlin compiler and native implementation of the Kotlin standard library.</source>
          <target state="translated">Kotlin / Native是一种将Kotlin代码编译为本地二进制文件的技术，该二进制文件无需虚拟机即可运行。它是Kotlin编译器和Kotlin标准库的本机实现的基于&lt;a href=&quot;https://llvm.org/&quot;&gt;LLVM&lt;/a&gt;的后端。</target>
        </trans-unit>
        <trans-unit id="f0c84f3b6f232babbc963e394f0dc8678a4ccc49" translate="yes" xml:space="preserve">
          <source>Kotlin/Native is currently &lt;a href=&quot;https://blog.jetbrains.com/kotlin/tag/native/&quot;&gt;in the works&lt;/a&gt;. It compiles Kotlin to native code that can run without a VM. There is a Technology Preview released but it is not production-ready yet, and doesn&amp;rsquo;t yet target all the platforms that we plan to support for 1.0. For more information check out the &lt;a href=&quot;https://blog.jetbrains.com/kotlin/2017/04/kotlinnative-tech-preview-kotlin-without-a-vm/&quot;&gt;blog post announcing Kotlin/Native&lt;/a&gt;.</source>
          <target state="translated">Kotlin / Native目前正在开发&lt;a href=&quot;https://blog.jetbrains.com/kotlin/tag/native/&quot;&gt;中&lt;/a&gt;。它将Kotlin编译为无需VM即可运行的本机代码。已发布了技术预览版，但尚未投入生产，并且尚未针对我们计划支持1.0的所有平台。有关更多信息，请查看&lt;a href=&quot;https://blog.jetbrains.com/kotlin/2017/04/kotlinnative-tech-preview-kotlin-without-a-vm/&quot;&gt;发布Kotlin / Native&lt;/a&gt;的博客文章。</target>
        </trans-unit>
        <trans-unit id="2e6e839c9eb016aad26e87b63395598581d37d86" translate="yes" xml:space="preserve">
          <source>Kotlin/Native is primarily designed to allow compilation for platforms where &lt;em&gt;virtual machines&lt;/em&gt; are not desirable or possible, for example, embedded devices or iOS. It solves the situations when a developer needs to produce a self-contained program that does not require an additional runtime or virtual machine.</source>
          <target state="translated">Kotlin / Native的主要目的是允许对不需要或不可能使用&lt;em&gt;虚拟机的&lt;/em&gt;平台进行编译，例如嵌入式设备或iOS。它解决了开发人员需要生成不需要额外运行时或虚拟机的自包含程序的情况。</target>
        </trans-unit>
        <trans-unit id="0a635a513919c15b75bf38827975739bea97d9aa" translate="yes" xml:space="preserve">
          <source>Kotlin/Native libraries</source>
          <target state="translated">Kotlin/Native库</target>
        </trans-unit>
        <trans-unit id="e52aa2cf9fdcb60b58b2f9cbee9d5268ded14cfd" translate="yes" xml:space="preserve">
          <source>Kotlin/Native libraries are zip files containing a predefined directory structure, with the following layout:</source>
          <target state="translated">Kotlin/Native库是包含预定义目录结构的zip文件,其布局如下。</target>
        </trans-unit>
        <trans-unit id="0c6f4cb92f825877d15d4e0409193ad150464dfb" translate="yes" xml:space="preserve">
          <source>Kotlin/Native plugin requires a newer version of Gradle, let's patch the &lt;code&gt;gradle/wrapper/gradle-wrapper.properties&lt;/code&gt; and use the following &lt;code&gt;distrubutionUrl&lt;/code&gt;:</source>
          <target state="translated">科特林/本地插件需要摇篮的新版本，让我们在补丁 &lt;code&gt;gradle/wrapper/gradle-wrapper.properties&lt;/code&gt; 并使用以下 &lt;code&gt;distrubutionUrl&lt;/code&gt; ：</target>
        </trans-unit>
        <trans-unit id="bc9ab4e314800dbff8307a948abe9a382ccbda9f" translate="yes" xml:space="preserve">
          <source>Kotlin/Native provides bi-directional interoperability with Objective-C/Swift. Objective-C frameworks and libraries can be used in Kotlin code. Kotlin modules can be used in Swift/Objective-C code too. Besides that, Kotlin/Native has &lt;a href=&quot;https://github.com/JetBrains/kotlin-native/blob/master/INTEROP.md&quot;&gt;C Interop&lt;/a&gt;. There is also the &lt;a href=&quot;dynamic-libraries&quot;&gt;Kotlin/Native as a Dynamic Library&lt;/a&gt; tutorial for more information.</source>
          <target state="translated">Kotlin / Native提供了与Objective-C / Swift的双向互操作性。可以在Kotlin代码中使用Objective-C框架和库。Kotlin模块也可以在Swift / Objective-C代码中使用。除此之外，Kotlin / Native具有&lt;a href=&quot;https://github.com/JetBrains/kotlin-native/blob/master/INTEROP.md&quot;&gt;C Interop&lt;/a&gt;。还有&lt;a href=&quot;dynamic-libraries&quot;&gt;Kotlin / Native作为动态库的&lt;/a&gt;教程，以获取更多信息。</target>
        </trans-unit>
        <trans-unit id="c6b2dc69e2661f2073dd575f2affbfbd48e1816c" translate="yes" xml:space="preserve">
          <source>Kotlin/Native provides bidirectional interoperability with Objective-C. Objective-C frameworks and libraries can be used in Kotlin code if properly imported to the build (system frameworks are imported by default). See e.g. &quot;Using cinterop&quot; in &lt;a href=&quot;gradle_plugin#using-cinterop&quot;&gt;Gradle plugin documentation&lt;/a&gt;. A Swift library can be used in Kotlin code if its API is exported to Objective-C with &lt;code&gt;@objc&lt;/code&gt;. Pure Swift modules are not yet supported.</source>
          <target state="translated">Kotlin / Native提供与Objective-C的双向互操作性。如果正确导入到构建中，则可以在Kotlin代码中使用Objective-C框架和库（默认情况下会导入系统框架）。请参阅例如&lt;a href=&quot;gradle_plugin#using-cinterop&quot;&gt;Gradle插件文档中的&lt;/a&gt; &amp;ldquo;使用cinterop&amp;rdquo; 。如果Swift库的API已通过 &lt;code&gt;@objc&lt;/code&gt; 导出到Objective-C，则可以在Kotlin代码中使用它。尚不支持Pure Swift模块。</target>
        </trans-unit>
        <trans-unit id="70a326aefb047308c0a09cf46a7be9e9cca8e58e" translate="yes" xml:space="preserve">
          <source>Kotlin/Native provides integration with the &lt;a href=&quot;https://cocoapods.org/&quot;&gt;CocoaPods dependency manager&lt;/a&gt;. You can add dependencies on Pod libraries stored in the CocoaPods repository or locally as well as use a multiplatform project with native targets as a CocoaPods dependency (Kotlin Pod).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b1c01f6b8c6b07e3bae6f070059599f6036610db" translate="yes" xml:space="preserve">
          <source>Kotlin/Native provides us with the ability to consume standard C libraries, opening up an entire ecosystem of functionality that exists for pretty much anything we could need. In fact, Kotlin/Native already ships with a set of prebuilt &lt;a href=&quot;https://github.com/JetBrains/kotlin-native/blob/master/PLATFORM_LIBS.md&quot;&gt;platform libraries&lt;/a&gt; which provide some additional common functionality to that of the standard library.</source>
          <target state="translated">Kotlin / Native为我们提供了使用标准C库的能力，从而开放了一个完整的功能生态系统，该功能生态系统几乎可以满足我们所需的所有需求。实际上，Kotlin / Native已经附带了一组预构建的&lt;a href=&quot;https://github.com/JetBrains/kotlin-native/blob/master/PLATFORM_LIBS.md&quot;&gt;平台库&lt;/a&gt;，这些库提供了标准库所提供的一些其他通用功能。</target>
        </trans-unit>
        <trans-unit id="d5389b5d85aa38736c73eb5aa9a313b033cc4d19" translate="yes" xml:space="preserve">
          <source>Kotlin/Native runtime doesn't encourage a classical thread-oriented concurrency model with mutually exclusive code blocks and conditional variables, as this model is known to be error-prone and unreliable. Instead, we suggest a collection of alternative approaches, allowing you to use hardware concurrency and implement blocking IO. Those approaches are as follows, and they will be elaborated on in further sections:</source>
          <target state="translated">Kotlin/Native运行时并不鼓励采用经典的面向线程的并发模型,该模型具有相互排斥的代码块和条件变量,因为这种模型众所周知容易出错且不可靠。相反,我们建议了一系列替代方法,允许你使用硬件并发并实现阻塞IO。这些方法如下,将在后面的章节中详细介绍。</target>
        </trans-unit>
        <trans-unit id="ac06a1726ed52d913d8c1eb5dbb2c82e723e185d" translate="yes" xml:space="preserve">
          <source>Kotlin/Native sources and examples</source>
          <target state="translated">Kotlin/本地资源和例子</target>
        </trans-unit>
        <trans-unit id="c4fa13c8ae49679dc61a192fdfe13c1f15f778dd" translate="yes" xml:space="preserve">
          <source>Kotlin/Native sources and examples (.tgz)</source>
          <target state="translated">Kotlin/Native sources and examples (.tgz)</target>
        </trans-unit>
        <trans-unit id="950455929874daa5e49199f24231f9f317130873" translate="yes" xml:space="preserve">
          <source>Kotlin/Native sources and examples (.zip)</source>
          <target state="translated">Kotlin/Native sources and examples (.zip)</target>
        </trans-unit>
        <trans-unit id="5729c05577d9982b3fa36c76507104ea69c51357" translate="yes" xml:space="preserve">
          <source>Kotlin/Native standard library provides primitives for safe working with concurrently mutable data, namely &lt;code&gt;AtomicInt&lt;/code&gt;, &lt;code&gt;AtomicLong&lt;/code&gt;, &lt;code&gt;AtomicNativePtr&lt;/code&gt;, &lt;code&gt;AtomicReference&lt;/code&gt; and &lt;code&gt;FreezableAtomicReference&lt;/code&gt; in the package &lt;code&gt;kotlin.native.concurrent&lt;/code&gt;. Atomic primitives allows concurrency-safe update operations, such as increment, decrement and compare-and-swap, along with value setters and getters. Atomic primitives are considered always frozen by the runtime, and while their fields can be updated with the regular &lt;code&gt;field.value += 1&lt;/code&gt;, it is not concurrency safe. Value must be be changed using dedicated operations, so it is possible to perform concurrent-safe global counters and similar data structures.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="120d75c1b3c3fba55f52d619ebc338f3dea2b2f3" translate="yes" xml:space="preserve">
          <source>Kotlin/Native supports C interop too. Check out the &lt;a href=&quot;dynamic-libraries&quot;&gt;Kotlin/Native as a Dynamic Library&lt;/a&gt; tutorial for that, or have a look at the &lt;a href=&quot;../../reference/native/c_interop&quot;&gt;C Interop&lt;/a&gt; documentation article</source>
          <target state="translated">Kotlin / Native也支持C互操作。查看有关&lt;a href=&quot;dynamic-libraries&quot;&gt;Kotlin / Native作为动态库的&lt;/a&gt;教程，或者查看&lt;a href=&quot;../../reference/native/c_interop&quot;&gt;C Interop&lt;/a&gt;文档文章</target>
        </trans-unit>
        <trans-unit id="8011eb11da7ebe065e7322454c19657ef14fbebd" translate="yes" xml:space="preserve">
          <source>Kotlin/Native supports the following platforms:</source>
          <target state="translated">Kotlin/Native支持以下平台。</target>
        </trans-unit>
        <trans-unit id="ab1b874667f8863029a4700ab21570b44d78ad0e" translate="yes" xml:space="preserve">
          <source>Kotlin/Native supports two-way interoperability with the Native world. On the one hand, the compiler creates:</source>
          <target state="translated">Kotlin/Native支持与Native世界的双向互通。一方面,编译器创建。</target>
        </trans-unit>
        <trans-unit id="6804afabbebdb0087394548cd2a9146eb760288b" translate="yes" xml:space="preserve">
          <source>Kotlin/Native target presets (see the &lt;a href=&quot;#using-kotlinnative-targets&quot;&gt;notes&lt;/a&gt; below):</source>
          <target state="translated">Kotlin /本机目标预设（请参阅以下&lt;a href=&quot;#using-kotlinnative-targets&quot;&gt;注释&lt;/a&gt;）：</target>
        </trans-unit>
        <trans-unit id="48119a00acf039b3da2d7a8a891256a947a47f3e" translate="yes" xml:space="preserve">
          <source>Kotlin/Native targets do not require additional test dependencies, and the &lt;code&gt;kotlin.test&lt;/code&gt; API implementations are built-in.</source>
          <target state="translated">Kotlin / Native目标不需要其他测试依赖项，并且内置了 &lt;code&gt;kotlin.test&lt;/code&gt; API实现。</target>
        </trans-unit>
        <trans-unit id="5a2754b26e3f7ed0f09f6ac7ae0bd6b529fb311d" translate="yes" xml:space="preserve">
          <source>Kotlin/Native uses the &lt;a href=&quot;https://gradle.org&quot;&gt;Gradle&lt;/a&gt; build system through the &lt;a href=&quot;../../reference/building-mpp-with-gradle&quot;&gt;kotlin-multiplatform&lt;/a&gt; plugin. We'll look at how to configure a Gradle build below. For some corner cases, a Kotlin/Native compiler can still be obtained manually (not recommended) from the &lt;a href=&quot;https://github.com/JetBrains/kotlin/releases&quot;&gt;Kotlin releases page on GitHub&lt;/a&gt;. In the tutorial, we are focusing on using the Gradle builds.</source>
          <target state="translated">Kotlin / Native 通过&lt;a href=&quot;../../reference/building-mpp-with-gradle&quot;&gt;kotlin-multiplatform&lt;/a&gt;插件使用&lt;a href=&quot;https://gradle.org&quot;&gt;Gradle&lt;/a&gt;构建系统。我们将在下面查看如何配置Gradle构建。对于某些极端情况，仍然可以从&lt;a href=&quot;https://github.com/JetBrains/kotlin/releases&quot;&gt;GitHub上&lt;/a&gt;的Kotlin版本页面手动（不推荐）获得Kotlin / Native编译器。在本教程中，我们专注于使用Gradle构建。</target>
        </trans-unit>
        <trans-unit id="8a3c5258f5b49cfb85ed7f0dcaee614a131a77c3" translate="yes" xml:space="preserve">
          <source>Kotlin:</source>
          <target state="translated">Kotlin:</target>
        </trans-unit>
        <trans-unit id="b43ff6724657fd16732a9b1a55f67abda3312ad7" translate="yes" xml:space="preserve">
          <source>KotlinConf Spinner app</source>
          <target state="translated">KotlinConf Spinner应用</target>
        </trans-unit>
        <trans-unit id="b1cd61d796dd3aa3454e388dffcf47f0812af913" translate="yes" xml:space="preserve">
          <source>KotlinConf app</source>
          <target state="translated">KotlinConf应用程序</target>
        </trans-unit>
        <trans-unit id="6047c8afd00f076fe5dfb352137d01b27268ea83" translate="yes" xml:space="preserve">
          <source>KotlinNullPointerException</source>
          <target state="translated">KotlinNullPointerException</target>
        </trans-unit>
        <trans-unit id="ee7e86f4510f7d7092cbe3960fdb6815985528a4" translate="yes" xml:space="preserve">
          <source>KotlinReflectionNotSupportedError</source>
          <target state="translated">KotlinReflectionNotSupportedError</target>
        </trans-unit>
        <trans-unit id="4b1b0c248352273cdb7b000d38d1c480106dbb58" translate="yes" xml:space="preserve">
          <source>KotlinVersion</source>
          <target state="translated">KotlinVersion</target>
        </trans-unit>
        <trans-unit id="399d4d156e1a5773fbf3b4b0cfd04b6e517c9fca" translate="yes" xml:space="preserve">
          <source>KtFunction</source>
          <target state="translated">KtFunction</target>
        </trans-unit>
        <trans-unit id="57da6543f61562be137bdbd9c9e157724aeffda4" translate="yes" xml:space="preserve">
          <source>LEFT_TO_RIGHT</source>
          <target state="translated">LEFT_TO_RIGHT</target>
        </trans-unit>
        <trans-unit id="a75ecccfbf31bd489981a90341d7e832ee10f3c8" translate="yes" xml:space="preserve">
          <source>LEFT_TO_RIGHT_EMBEDDING</source>
          <target state="translated">LEFT_TO_RIGHT_EMBEDDING</target>
        </trans-unit>
        <trans-unit id="51859752bb5b0316e072d757734043db04448fc4" translate="yes" xml:space="preserve">
          <source>LEFT_TO_RIGHT_OVERRIDE</source>
          <target state="translated">LEFT_TO_RIGHT_OVERRIDE</target>
        </trans-unit>
        <trans-unit id="758213c577cf41a86fde124f3b88be88d415048d" translate="yes" xml:space="preserve">
          <source>LETTER_NUMBER</source>
          <target state="translated">LETTER_NUMBER</target>
        </trans-unit>
        <trans-unit id="e8e9a4d54a1399696ec25a431fcc0c615fbc2e7a" translate="yes" xml:space="preserve">
          <source>LINE_SEPARATOR</source>
          <target state="translated">LINE_SEPARATOR</target>
        </trans-unit>
        <trans-unit id="e84f54372586b1a789f2b6cf056c7a1173be8141" translate="yes" xml:space="preserve">
          <source>LINUX</source>
          <target state="translated">LINUX</target>
        </trans-unit>
        <trans-unit id="7ec99800d18c128a406891a50a13ae7030c97a75" translate="yes" xml:space="preserve">
          <source>LITERAL</source>
          <target state="translated">LITERAL</target>
        </trans-unit>
        <trans-unit id="e893e5d306bb8ac993e8000a6af037f4725105be" translate="yes" xml:space="preserve">
          <source>LOCAL_VARIABLE</source>
          <target state="translated">LOCAL_VARIABLE</target>
        </trans-unit>
        <trans-unit id="99de6ad7c4876501b047c66fac1fc218394c8386" translate="yes" xml:space="preserve">
          <source>LOWERCASE_LETTER</source>
          <target state="translated">LOWERCASE_LETTER</target>
        </trans-unit>
        <trans-unit id="ebb1178c70d79da7a0d8f3efa343b4f1b5b8c8bd" translate="yes" xml:space="preserve">
          <source>Lambda Expressions and Anonymous Functions</source>
          <target state="translated">Lambda表达式和匿名函数</target>
        </trans-unit>
        <trans-unit id="41d636c884bc5c4615a06b36835ca61116f4c96a" translate="yes" xml:space="preserve">
          <source>Lambda expression syntax</source>
          <target state="translated">Lambda表达式语法</target>
        </trans-unit>
        <trans-unit id="0b86dab2bd78e474cfa2ccedae83439dde48687c" translate="yes" xml:space="preserve">
          <source>Lambda expressions and anonymous functions are 'function literals', i.e. functions that are not declared, but passed immediately as an expression. Consider the following example:</source>
          <target state="translated">Lambda表达式和匿名函数都是 &quot;函数字面&quot;,即没有声明,而是作为表达式立即传递的函数。请看下面的例子。</target>
        </trans-unit>
        <trans-unit id="5688b8dc62f61bfb17ef962f1f3970299059391c" translate="yes" xml:space="preserve">
          <source>Lambda expressions and anonymous functions are collectively called &lt;em&gt;function literals&lt;/em&gt;.</source>
          <target state="translated">Lambda表达式和匿名函数统称为&lt;em&gt;函数文字&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="7575b2907cada2fd0b97a753d13dd1b9c1b841f5" translate="yes" xml:space="preserve">
          <source>Lambda expressions can be used as function literals with receiver when the receiver type can be inferred from context. One of the most important examples of their usage is &lt;a href=&quot;type-safe-builders&quot;&gt;type-safe builders&lt;/a&gt;:</source>
          <target state="translated">当可以从上下文推断接收器类型时，Lambda表达式可用作接收器的函数文字。&lt;a href=&quot;type-safe-builders&quot;&gt;类型安全的构建器&lt;/a&gt;是最重要的用法之一：</target>
        </trans-unit>
        <trans-unit id="ad3d3ff2619991da585042e4417d2462b7beccf2" translate="yes" xml:space="preserve">
          <source>Lambda formatting</source>
          <target state="translated">兰姆达格式化</target>
        </trans-unit>
        <trans-unit id="13d6fc1369e9172c884961d85e8a1601ad741c0d" translate="yes" xml:space="preserve">
          <source>Lambda parameters</source>
          <target state="translated">兰姆达参数</target>
        </trans-unit>
        <trans-unit id="b220e56144b93a1600b71766a84e029644f0540d" translate="yes" xml:space="preserve">
          <source>Lambda result</source>
          <target state="translated">Lambda结果</target>
        </trans-unit>
        <trans-unit id="ba9dfe5041cd205445df5b843e8a9dc628256415" translate="yes" xml:space="preserve">
          <source>Lambdas</source>
          <target state="translated">Lambdas</target>
        </trans-unit>
        <trans-unit id="49ddf0eb799de42693040dadaac202ba4004f236" translate="yes" xml:space="preserve">
          <source>Language settings</source>
          <target state="translated">语言设置</target>
        </trans-unit>
        <trans-unit id="1ff5129754f331271a9a3fac5165d942c8cc5ff1" translate="yes" xml:space="preserve">
          <source>Language settings of a source set affect how the sources are analyzed in the IDE. Due to the current limitations, in a Gradle build, only the language settings of the compilation's default source set are used and are applied to all of the sources participating in the compilation.</source>
          <target state="translated">源集的语言设置会影响IDE中对源的分析。由于目前的限制,在Gradle构建中,只使用编译的默认源集的语言设置,并应用于所有参与编译的源。</target>
        </trans-unit>
        <trans-unit id="d6774da675388cdd08014c6406478bff14597287" translate="yes" xml:space="preserve">
          <source>Late-Initialized Properties and Variables</source>
          <target state="translated">后期初始化属性和变量</target>
        </trans-unit>
        <trans-unit id="99322069c074a7f591d86eb26eeac43fa69f34bd" translate="yes" xml:space="preserve">
          <source>Lateinit</source>
          <target state="translated">Lateinit</target>
        </trans-unit>
        <trans-unit id="f84a3ef3e20f72377a42e84bdb45e09bb7b7843f" translate="yes" xml:space="preserve">
          <source>Lateinit top-level properties and local variables</source>
          <target state="translated">Lateinit顶层属性和局部变量</target>
        </trans-unit>
        <trans-unit id="b3bb9d6cae3f462e729059bd666f0ea34bc0ea80" translate="yes" xml:space="preserve">
          <source>Lazily started async</source>
          <target state="translated">懒惰地启动异步</target>
        </trans-unit>
        <trans-unit id="84e98cf97551805d46a1030b73cb47aa40988008" translate="yes" xml:space="preserve">
          <source>Lazy</source>
          <target state="translated">Lazy</target>
        </trans-unit>
        <trans-unit id="be5e08be6cf0006ff0c341fef7d3f6b41fb802ed" translate="yes" xml:space="preserve">
          <source>Lazy property</source>
          <target state="translated">懒惰财产</target>
        </trans-unit>
        <trans-unit id="54579fdbee70b6cb28a03b9cca5ce503dbf0fab9" translate="yes" xml:space="preserve">
          <source>LazyThreadSafetyMode</source>
          <target state="translated">LazyThreadSafetyMode</target>
        </trans-unit>
        <trans-unit id="aca4dc328f8e03ba7e98c1efbf5068f7d83287c3" translate="yes" xml:space="preserve">
          <source>Learn Kotlin</source>
          <target state="translated">学习盆地</target>
        </trans-unit>
        <trans-unit id="802c13534d20e4859719f8999764811676dc2ecd" translate="yes" xml:space="preserve">
          <source>Learn more about coroutines debugging in the &lt;a href=&quot;../../tutorials/coroutines/debug-coroutines-with-idea&quot;&gt;tutorial&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b28b1c4866b45b6c232187eb0f49c55bd90b8a14" translate="yes" xml:space="preserve">
          <source>Learning Kotlin</source>
          <target state="translated">学习Kotlin</target>
        </trans-unit>
        <trans-unit id="23f50e0c99ce18545a5c0af46eb7b9685859fd37" translate="yes" xml:space="preserve">
          <source>Learning Kotlin with EduTools plugin</source>
          <target state="translated">用EduTools插件学习Kotlin。</target>
        </trans-unit>
        <trans-unit id="e19a030656541f97ece0fe153ca0f1966796261d" translate="yes" xml:space="preserve">
          <source>Leave other options with their default values and click &lt;strong&gt;Finish&lt;/strong&gt;.</source>
          <target state="translated">将其他选项保留为默认值，然后单击&amp;ldquo; &lt;strong&gt;完成&amp;rdquo;&lt;/strong&gt;。</target>
        </trans-unit>
        <trans-unit id="b8d43e4d61d6a5ac38163dd5c6fce699c5294311" translate="yes" xml:space="preserve">
          <source>Let us have two producers of strings: &lt;code&gt;fizz&lt;/code&gt; and &lt;code&gt;buzz&lt;/code&gt;. The &lt;code&gt;fizz&lt;/code&gt; produces &quot;Fizz&quot; string every 300 ms:</source>
          <target state="translated">让我们有两个字符串生成器： &lt;code&gt;fizz&lt;/code&gt; 和 &lt;code&gt;buzz&lt;/code&gt; 。该 &lt;code&gt;fizz&lt;/code&gt; 产生的&amp;ldquo;嘶嘶声&amp;rdquo;串每300毫秒：</target>
        </trans-unit>
        <trans-unit id="d5d7818bcabda3185325fd62a8d08d65a192e5b3" translate="yes" xml:space="preserve">
          <source>Let us launch a hundred coroutines all doing the same action a thousand times. We'll also measure their completion time for further comparisons:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="97c13d20ca41b326b3be0985ea83f77551576d93" translate="yes" xml:space="preserve">
          <source>Let us launch a hundred coroutines all doing the same action thousand times. We'll also measure their completion time for further comparisons:</source>
          <target state="translated">让我们启动一百个coroutine,所有的coroutine都做同样的动作一千次。我们还将测量它们的完成时间,以便进一步比较。</target>
        </trans-unit>
        <trans-unit id="00337a32763192378fa8ed88a3475bc09950f868" translate="yes" xml:space="preserve">
          <source>Let us put our knowledge about contexts, children and jobs together. Assume that our application has an object with a lifecycle, but that object is not a coroutine. For example, we are writing an Android application and launch various coroutines in the context of an Android activity to perform asynchronous operations to fetch and update data, do animations, etc. All of these coroutines must be cancelled when activity is destroyed to avoid memory leaks. We, of course, can manipulate contexts and jobs manually to tie activity's and coroutines lifecycles, but &lt;code&gt;kotlinx.coroutines&lt;/code&gt; provides an abstraction that encapsulates that: &lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/-coroutine-scope/index.html&quot;&gt;CoroutineScope&lt;/a&gt;. You should be already familiar with coroutine scope as all coroutine builders are declared as extensions on it.</source>
          <target state="translated">让我们将有关环境，孩子和工作的知识放在一起。假设我们的应用程序有一个具有生命周期的对象，但是该对象不是协程。例如，我们正在编写一个Android应用程序，并在Android活动的上下文中启动各种协程，以执行异步操作以获取和更新数据，制作动画等。在销毁活动时必须取消所有这些协程，以避免内存泄漏。当然，我们可以手动操作上下文和作业来绑定活动和协同程序的生命周期，但是 &lt;code&gt;kotlinx.coroutines&lt;/code&gt; 提供了一个抽象，该抽象封装了以下内容：&lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/-coroutine-scope/index.html&quot;&gt;CoroutineScope&lt;/a&gt;。您应该已经熟悉协程范围，因为所有协程构建器都声明为它的扩展。</target>
        </trans-unit>
        <trans-unit id="0f1725d0b230accb8eeb7b1ecce985617d4f3a5c" translate="yes" xml:space="preserve">
          <source>Let us put our knowledge about contexts, children and jobs together. Assume that our application has an object with a lifecycle, but that object is not a coroutine. For example, we are writing an Android application and launch various coroutines in the context of an Android activity to perform asynchronous operations to fetch and update data, do animations, etc. All of these coroutines must be cancelled when the activity is destroyed to avoid memory leaks. We, of course, can manipulate contexts and jobs manually to tie the lifecycles of the activity and its coroutines, but &lt;code&gt;kotlinx.coroutines&lt;/code&gt; provides an abstraction encapsulating that: &lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/-coroutine-scope/index.html&quot;&gt;CoroutineScope&lt;/a&gt;. You should be already familiar with the coroutine scope as all coroutine builders are declared as extensions on it.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f17004be77e3f7094989ac66ca7a6fcece2d7637" translate="yes" xml:space="preserve">
          <source>Let us run it all seven times:</source>
          <target state="translated">让我们把它都跑七遍。</target>
        </trans-unit>
        <trans-unit id="887399487cb35f46c356a942974d9aca65f7d75b" translate="yes" xml:space="preserve">
          <source>Let us start a dozen of them with a random delay.</source>
          <target state="translated">我们先来一打,随机延迟。</target>
        </trans-unit>
        <trans-unit id="413db7e1244403c1e2eef1bc015d6f2b29e5c10d" translate="yes" xml:space="preserve">
          <source>Let us take &lt;a href=&quot;#concurrent-using-async&quot;&gt;Concurrent using async&lt;/a&gt; example and extract a function that concurrently performs &lt;code&gt;doSomethingUsefulOne&lt;/code&gt; and &lt;code&gt;doSomethingUsefulTwo&lt;/code&gt; and returns the sum of their results. Because &lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/async.html&quot;&gt;async&lt;/a&gt; coroutines builder is defined as extension on &lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/coroutine-scope.html&quot;&gt;CoroutineScope&lt;/a&gt; we need to have it in the scope and that is what &lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/coroutine-scope.html&quot;&gt;coroutineScope&lt;/a&gt; function provides:</source>
          <target state="translated">让我们以&lt;a href=&quot;#concurrent-using-async&quot;&gt;异步&lt;/a&gt;示例为例，并提取一个函数，该函数同时执行 &lt;code&gt;doSomethingUsefulOne&lt;/code&gt; 和 &lt;code&gt;doSomethingUsefulTwo&lt;/code&gt; 并返回其结果的总和。由于&lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/async.html&quot;&gt;异步&lt;/a&gt;协&lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/coroutine-scope.html&quot;&gt;程生成&lt;/a&gt;器定义为在CoroutineScope上的扩展，因此我们需要将其包含在范围内，这就是&lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/coroutine-scope.html&quot;&gt;coroutineScope&lt;/a&gt;函数提供的功能：</target>
        </trans-unit>
        <trans-unit id="bcdef397c512533845238594a2c065ab9f9b9332" translate="yes" xml:space="preserve">
          <source>Let us take the &lt;a href=&quot;#concurrent-using-async&quot;&gt;Concurrent using async&lt;/a&gt; example and extract a function that concurrently performs &lt;code&gt;doSomethingUsefulOne&lt;/code&gt; and &lt;code&gt;doSomethingUsefulTwo&lt;/code&gt; and returns the sum of their results. Because the &lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/async.html&quot;&gt;async&lt;/a&gt; coroutine builder is defined as an extension on &lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/-coroutine-scope/index.html&quot;&gt;CoroutineScope&lt;/a&gt;, we need to have it in the scope and that is what the &lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/coroutine-scope.html&quot;&gt;coroutineScope&lt;/a&gt; function provides:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4952c7e38d872a3739e9ba60b2855b8019e8b9ca" translate="yes" xml:space="preserve">
          <source>Let us write a channel producer function that consumes a channel of deferred string values, waits for each received deferred value, but only until the next deferred value comes over or the channel is closed. This example puts together &lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines.channels/on-receive-or-null.html&quot;&gt;onReceiveOrNull&lt;/a&gt; and &lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/-deferred/on-await.html&quot;&gt;onAwait&lt;/a&gt; clauses in the same &lt;code&gt;select&lt;/code&gt;:</source>
          <target state="translated">让我们编写一个使用通道生成器的函数，该函数使用一个延迟字符串值的通道，等待每个接收到的延迟值，但仅等到下一个延迟值结束或关闭通道为止。此示例将&lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines.channels/on-receive-or-null.html&quot;&gt;onReceiveOrNull&lt;/a&gt;和&lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/-deferred/on-await.html&quot;&gt;onAwait&lt;/a&gt;子句放在同一 &lt;code&gt;select&lt;/code&gt; 中：</target>
        </trans-unit>
        <trans-unit id="4731fc0f08644e9fc8c26a8f5800aec92b69f2ee" translate="yes" xml:space="preserve">
          <source>Let us write an example of producer of integers that sends its values to a &lt;code&gt;side&lt;/code&gt; channel when the consumers on its primary channel cannot keep up with it:</source>
          <target state="translated">让我们写一个整数生成器的例子，当主通道上的使用者无法跟上它的值时，它将其值发送到 &lt;code&gt;side&lt;/code&gt; 通道：</target>
        </trans-unit>
        <trans-unit id="9ad40ae1c76d7921aa80d947aae7e4174122ffe9" translate="yes" xml:space="preserve">
          <source>Let's also make sure that our coroutines actually run in parallel. If we add a 1-second &lt;code&gt;delay()&lt;/code&gt; to each of the &lt;code&gt;async&lt;/code&gt;'s, the resulting program won't run for 1'000'000 seconds (over 11,5 days):</source>
          <target state="translated">我们还要确保协程实际上是并行运行的。如果我们为每个 &lt;code&gt;async&lt;/code&gt; 添加一个1秒的 &lt;code&gt;delay()&lt;/code&gt; ，则生成的程序将不会运行1'000'000秒（超过11,5天）：</target>
        </trans-unit>
        <trans-unit id="d5f68d829cd771ce134770e031cf5bf3966ac35a" translate="yes" xml:space="preserve">
          <source>Let's assume in the code above that &lt;code&gt;preparePost&lt;/code&gt; is a long-running process and consequently would block the user interface. What we can do is launch it in a separate thread. This would then allow us to avoid the UI from blocking. This is a very common technique, but has a series of drawbacks:</source>
          <target state="translated">让我们假设上面的代码中 &lt;code&gt;preparePost&lt;/code&gt; 是一个长期运行的过程，因此将阻塞用户界面。我们可以做的是在一个单独的线程中启动它。然后，这将使我们避免UI阻塞。这是一种非常常见的技术，但是有一系列缺点：</target>
        </trans-unit>
        <trans-unit id="0b36e6d9aeacb6946bbe6f44c31eebe2f8d34c7f" translate="yes" xml:space="preserve">
          <source>Let's call the framework from Objective-C. For that we create the &lt;code&gt;main.m&lt;/code&gt; file with the following content:</source>
          <target state="translated">让我们从Objective-C调用框架。为此，我们创建具有以下内容的 &lt;code&gt;main.m&lt;/code&gt; 文件：</target>
        </trans-unit>
        <trans-unit id="de2db89a9bd54d886863702055b65232c802ea65" translate="yes" xml:space="preserve">
          <source>Let's check out the C API of our Kotlin library.`</source>
          <target state="translated">让我们来看看我们Kotlin库的C API.`。</target>
        </trans-unit>
        <trans-unit id="ccdc7274b76228eb418fb01b25e4e0b2b1a04fe1" translate="yes" xml:space="preserve">
          <source>Let's click on the &lt;code&gt;App&lt;/code&gt; run configuration to get our project running either on a real Android Device or on the emulator.</source>
          <target state="translated">让我们单击&amp;ldquo; &lt;code&gt;App&lt;/code&gt; 运行&amp;rdquo;配置，以使我们的项目在真实的Android设备或仿真器上运行。</target>
        </trans-unit>
        <trans-unit id="1f650b1ab54a0b4e48ce9f7def949cc9e4127516" translate="yes" xml:space="preserve">
          <source>Let's click the &lt;em&gt;Run&lt;/em&gt; button in Xcode, and we'll see our application running</source>
          <target state="translated">让我们单击Xcode中的&lt;em&gt;Run&lt;/em&gt;按钮，我们将看到我们的应用程序正在运行</target>
        </trans-unit>
        <trans-unit id="735664d189535b1add7a525bb222b33a786f953e" translate="yes" xml:space="preserve">
          <source>Let's create a &lt;code&gt;src/nativeMain/kotlin/hello.kt&lt;/code&gt; stub file with the following content to see how C primitive type declarations are visible from Kotlin:</source>
          <target state="translated">让我们用以下内容创建一个 &lt;code&gt;src/nativeMain/kotlin/hello.kt&lt;/code&gt; 存根文件，以了解如何从Kotlin中看到C基本类型声明：</target>
        </trans-unit>
        <trans-unit id="10159fd0817061a10325f96cf0c251b77597ee1f" translate="yes" xml:space="preserve">
          <source>Let's create a &lt;code&gt;src/nativeMain/kotlin/hello.kt&lt;/code&gt; stub file with the following content to see how our C declarations are visible from Kotlin:</source>
          <target state="translated">让我们创建一个 &lt;code&gt;src/nativeMain/kotlin/hello.kt&lt;/code&gt; 存根文件，其中包含以下内容，以了解如何从Kotlin中看到我们的C声明：</target>
        </trans-unit>
        <trans-unit id="a7acdfe9286fc908f1acf3c36443211f26fc104a" translate="yes" xml:space="preserve">
          <source>Let's create a million coroutines again, keeping their &lt;code&gt;Deferred&lt;/code&gt; objects. Now there's no need in the atomic counter, as we can just return the numbers to be added from our coroutines:</source>
          <target state="translated">让我们再次创建一百万个协程，保留其 &lt;code&gt;Deferred&lt;/code&gt; 对象。现在不再需要原子计数器，因为我们可以返回要从协程中添加的数字：</target>
        </trans-unit>
        <trans-unit id="996aed5293f16fb62ea0b0ffc195f181e0ae218e" translate="yes" xml:space="preserve">
          <source>Let's create the class &lt;code&gt;Base64Test&lt;/code&gt; in &lt;code&gt;commonTest/kotlin/jetbrains/base64&lt;/code&gt; folder and write the basic tests for Base64.</source>
          <target state="translated">让我们在 &lt;code&gt;commonTest/kotlin/jetbrains/base64&lt;/code&gt; 文件夹中创建 &lt;code&gt;Base64Test&lt;/code&gt; 类，并编写Base64的基本测试。</target>
        </trans-unit>
        <trans-unit id="bbdbbcfe4f2f14866b323983f8f8272c8a107004" translate="yes" xml:space="preserve">
          <source>Let's denote a function f(x) in such a way: we add 1 to x, then, while there is at least one trailing zero in the resulting number, we remove that zero.</source>
          <target state="translated">让我们用这样的方式来表示一个函数f(x):我们将1加到x上,然后,当所得数中至少有一个尾数为零时,我们去掉这个零。</target>
        </trans-unit>
        <trans-unit id="b41c2ae19915325ca1208b1c0d9b4b01df9a8df1" translate="yes" xml:space="preserve">
          <source>Let's dig a little into what it means. The biggest merit of coroutines is that they can &lt;em&gt;suspend&lt;/em&gt; without blocking a thread. The compiler has to emit some special code to make this possible, so we have to mark functions that &lt;em&gt;may suspend&lt;/em&gt; explicitly in the code. We use the &lt;code&gt;suspend&lt;/code&gt; modifier for it:</source>
          <target state="translated">让我们深入了解它的含义。协程的最大优点是它们可以&lt;em&gt;挂起&lt;/em&gt;而不会阻塞线程。编译器必须发出一些特殊的代码才能使其实现，因此我们必须标记&lt;em&gt;可能&lt;/em&gt;在代码中显式&lt;em&gt;挂起的&lt;/em&gt;函数。我们使用 &lt;code&gt;suspend&lt;/code&gt; 修饰符：</target>
        </trans-unit>
        <trans-unit id="b909fa7b179bbce71ededd8361a6bf68ecb8e547" translate="yes" xml:space="preserve">
          <source>Let's extract the block of code inside &lt;code&gt;launch { ... }&lt;/code&gt; into a separate function. When you perform &quot;Extract function&quot; refactoring on this code you get a new function with &lt;code&gt;suspend&lt;/code&gt; modifier. That is your first &lt;em&gt;suspending function&lt;/em&gt;. Suspending functions can be used inside coroutines just like regular functions, but their additional feature is that they can, in turn, use other suspending functions, like &lt;code&gt;delay&lt;/code&gt; in this example, to &lt;em&gt;suspend&lt;/em&gt; execution of a coroutine.</source>
          <target state="translated">让我们将 &lt;code&gt;launch { ... }&lt;/code&gt; 的代码块提取到一个单独的函数中。在此代码上执行&amp;ldquo;提取函数&amp;rdquo;重构时，您将获得带有 &lt;code&gt;suspend&lt;/code&gt; 修饰符的新函数。那是您的第一个&lt;em&gt;暂停功能&lt;/em&gt;。暂停函数可以像常规函数一样在协程内部使用，但是它们的附加功能是它们可以依次使用其他暂停函数（如本例中的 &lt;code&gt;delay&lt;/code&gt; )来&lt;em&gt;暂停&lt;/em&gt;协程的执行。</target>
        </trans-unit>
        <trans-unit id="61bad05f01a2e90a1664c7ea21ea22130405aa4e" translate="yes" xml:space="preserve">
          <source>Let's extract the block of code inside &lt;code&gt;launch { ... }&lt;/code&gt; into a separate function. When you perform &quot;Extract function&quot; refactoring on this code, you get a new function with the &lt;code&gt;suspend&lt;/code&gt; modifier. This is your first &lt;em&gt;suspending function&lt;/em&gt;. Suspending functions can be used inside coroutines just like regular functions, but their additional feature is that they can, in turn, use other suspending functions (like &lt;code&gt;delay&lt;/code&gt; in this example) to &lt;em&gt;suspend&lt;/em&gt; execution of a coroutine.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e7122eef62315ddd178e19521346dcd7b3d4f4ef" translate="yes" xml:space="preserve">
          <source>Let's first create a project folder. All the paths in this tutorial will be relative to this folder. Sometimes the missing directories will have to be created before new files are added.</source>
          <target state="translated">首先让我们创建一个项目文件夹。本教程中的所有路径都是相对于这个文件夹的。有时,在添加新文件之前,必须先创建缺少的目录。</target>
        </trans-unit>
        <trans-unit id="8cb38e1408559447345a86b525296d1eabcbbd05" translate="yes" xml:space="preserve">
          <source>Let's get straight to the point - type this into a file with the extension &lt;code&gt;.kt&lt;/code&gt;:</source>
          <target state="translated">让我们直接讲一点，将其输入扩展名为 &lt;code&gt;.kt&lt;/code&gt; 的文件中：</target>
        </trans-unit>
        <trans-unit id="bd86f7e49e4cf62602c569422996655dedc19452" translate="yes" xml:space="preserve">
          <source>Let's include the dependency from the &lt;code&gt;SharedCode&lt;/code&gt; project to the Android project. We need to patch the &lt;code&gt;app/build.gradle&lt;/code&gt; file and include the following line into the &lt;code&gt;dependencies { .. }&lt;/code&gt; block:</source>
          <target state="translated">让我们包括从 &lt;code&gt;SharedCode&lt;/code&gt; 项目到Android项目的依赖关系。我们需要修补 &lt;code&gt;app/build.gradle&lt;/code&gt; 文件，并将以下行添加到 &lt;code&gt;dependencies { .. }&lt;/code&gt; 块中：</target>
        </trans-unit>
        <trans-unit id="3031affd63f3a34c70e027c9fb0083b3841cbbd1" translate="yes" xml:space="preserve">
          <source>Let's look at &lt;code&gt;async&lt;/code&gt;/&lt;code&gt;await&lt;/code&gt; which is implemented in an external library, &lt;a href=&quot;https://github.com/kotlin/kotlinx.coroutines&quot;&gt;kotlinx.coroutines&lt;/a&gt;:</source>
          <target state="translated">让我们看一下在外部库&lt;a href=&quot;https://github.com/kotlin/kotlinx.coroutines&quot;&gt;kotlinx.coroutines中&lt;/a&gt;实现的 &lt;code&gt;async&lt;/code&gt; / &lt;code&gt;await&lt;/code&gt; ：</target>
        </trans-unit>
        <trans-unit id="957a84aa6afafd513ebe49ba72fc204fd5a6b335" translate="yes" xml:space="preserve">
          <source>Let's look at a full program that uses &lt;code&gt;launch&lt;/code&gt;:</source>
          <target state="translated">让我们看一个使用 &lt;code&gt;launch&lt;/code&gt; 的完整程序：</target>
        </trans-unit>
        <trans-unit id="4e571fdb95d6ede65232f8b540598b12acfcf120" translate="yes" xml:space="preserve">
          <source>Let's look over it to spot what has changed. In Java you annotated the field, binding it with the corresponding view:</source>
          <target state="translated">让我们来看看它,发现有什么变化。在Java中,你对字段进行了注释,将其与相应的视图进行了绑定。</target>
        </trans-unit>
        <trans-unit id="1fb40ced67af4648c46e396667df192d29c4d5c8" translate="yes" xml:space="preserve">
          <source>Let's make sure we can run the application on the iPhone emulator or device.</source>
          <target state="translated">让我们确保可以在iPhone模拟器或设备上运行应用程序。</target>
        </trans-unit>
        <trans-unit id="4c1369d1fff2907e87dbe0e51a95a4a2b1d68308" translate="yes" xml:space="preserve">
          <source>Let's move the sources file into the &lt;code&gt;src/nativeMain/kotlin&lt;/code&gt; folder under the project. That is the default path, where sources are located, when the &lt;a href=&quot;../../reference/building-mpp-with-gradle&quot;&gt;kotlin-multiplatform&lt;/a&gt; plugin is used. We use the following block to instruct configure the project to generate a dynamic or shared library for us:</source>
          <target state="translated">让我们将源文件移动到项目下的 &lt;code&gt;src/nativeMain/kotlin&lt;/code&gt; 文件夹中。这是使用&lt;a href=&quot;../../reference/building-mpp-with-gradle&quot;&gt;kotlin-multiplatform&lt;/a&gt;插件时源所在的默认路径。我们使用以下块来指示配置项目以为我们生成动态或共享库：</target>
        </trans-unit>
        <trans-unit id="254d91019bfe0a24fa67828566bb23aeecf078e8" translate="yes" xml:space="preserve">
          <source>Let's move the sources file into the &lt;code&gt;src/nativeMain/kotlin&lt;/code&gt; folder under the project. That is the default path, where sources are located, when the &lt;a href=&quot;../../reference/mpp-discover-project&quot;&gt;kotlin-multiplatform&lt;/a&gt; plugin is used. We use the following block to instruct configure the project to generate a dynamic or shared library for us:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="684a72371b803184f7a1d16df5fdf49dd7a6a0de" translate="yes" xml:space="preserve">
          <source>Let's move the sources file into the &lt;code&gt;src/nativeMain/kotlin&lt;/code&gt; folder under the project. This is the default path, for where sources are located, when the &lt;a href=&quot;../../reference/building-mpp-with-gradle&quot;&gt;kotlin-multiplatform&lt;/a&gt; plugin is used. We use the following block to instruct and configure the project to generate a dynamic or shared library for us:</source>
          <target state="translated">让我们将源文件移动到项目下的 &lt;code&gt;src/nativeMain/kotlin&lt;/code&gt; 文件夹中。这是使用&lt;a href=&quot;../../reference/building-mpp-with-gradle&quot;&gt;kotlin-multiplatform&lt;/a&gt;插件时源所在位置的默认路径。我们使用以下块来指导和配置项目以为我们生成动态或共享库：</target>
        </trans-unit>
        <trans-unit id="034d9c3c346b06a98e0db9b883376985d9d3fdc3" translate="yes" xml:space="preserve">
          <source>Let's move the sources file into the &lt;code&gt;src/nativeMain/kotlin&lt;/code&gt; folder under the project. This is the default path, for where sources are located, when the &lt;a href=&quot;../../reference/mpp-discover-project&quot;&gt;kotlin-multiplatform&lt;/a&gt; plugin is used. We use the following block to instruct and configure the project to generate a dynamic or shared library for us:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a942f64f48ea1ece8880513eaa81ddefeb619b0a" translate="yes" xml:space="preserve">
          <source>Let's replace &lt;code&gt;testSolution()&lt;/code&gt; function content with the following:</source>
          <target state="translated">让我们用以下内容替换 &lt;code&gt;testSolution()&lt;/code&gt; 函数的内容：</target>
        </trans-unit>
        <trans-unit id="4a173594d073c26a036c43463ffde9097189a153" translate="yes" xml:space="preserve">
          <source>Let's run a lot of them</source>
          <target state="translated">我们多跑几趟吧</target>
        </trans-unit>
        <trans-unit id="4b01757c4af3890b2686d482b6ad16159167a6f9" translate="yes" xml:space="preserve">
          <source>Let's run the &lt;code&gt;linkNative&lt;/code&gt; Gradle task to build the library &lt;a href=&quot;basic-kotlin-native-app#run-in-ide&quot;&gt;in the IDE&lt;/a&gt; or by calling the following console command:</source>
          <target state="translated">让我们运行 &lt;code&gt;linkNative&lt;/code&gt; Gradle任务以&lt;a href=&quot;basic-kotlin-native-app#run-in-ide&quot;&gt;在IDE中&lt;/a&gt;或通过调用以下控制台命令来构建库：</target>
        </trans-unit>
        <trans-unit id="106249141867c6b57bd6484ccdc821cb560f7f5d" translate="yes" xml:space="preserve">
          <source>Let's run the &lt;code&gt;linkNative&lt;/code&gt; Gradle task to build the library &lt;a href=&quot;using-intellij-idea&quot;&gt;in the IDE&lt;/a&gt; or by calling the following console command:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0027507ed05fb5770a6709f41c759d4f8b675c55" translate="yes" xml:space="preserve">
          <source>Let's run the &lt;code&gt;linkNative&lt;/code&gt; Gradle task to build the library in the IDE or by calling the following console command:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ced335cd9fa401cb82913f0326e2577c06919225" translate="yes" xml:space="preserve">
          <source>Let's say that you're writing a simple ORM. Your database library represents a row as instances of a class &lt;code&gt;Entity&lt;/code&gt;, with functions like &lt;code&gt;getString(&quot;name&quot;)&lt;/code&gt; and &lt;code&gt;getLong(&quot;age&quot;)&lt;/code&gt; for getting typed values from the given columns. We could create a typed wrapper class like this:</source>
          <target state="translated">假设您正在编写一个简单的ORM。您的数据库库将一行表示为 &lt;code&gt;Entity&lt;/code&gt; 类的实例，并具有诸如 &lt;code&gt;getString(&quot;name&quot;)&lt;/code&gt; 和 &lt;code&gt;getLong(&quot;age&quot;)&lt;/code&gt; 类的函数，用于从给定列中获取键入的值。我们可以创建一个类型化的包装类，如下所示：</target>
        </trans-unit>
        <trans-unit id="a18f6d560df8733728d2795ff272c64a409b9516" translate="yes" xml:space="preserve">
          <source>Let's say we need to return two things from a function. For example, a result object and a status of some sort. A compact way of doing this in Kotlin is to declare a &lt;a href=&quot;data-classes&quot;&gt;&lt;em&gt;data class&lt;/em&gt;&lt;/a&gt; and return its instance:</source>
          <target state="translated">假设我们需要从一个函数返回两件事。例如，结果对象和某种状态。在Kotlin中执行此操作的一种紧凑方法是声明一个&lt;a href=&quot;data-classes&quot;&gt;&lt;em&gt;数据类&lt;/em&gt;&lt;/a&gt;并返回其实例：</target>
        </trans-unit>
        <trans-unit id="8eba6223ee182cc016df2825ffe27a1806c3d5dd" translate="yes" xml:space="preserve">
          <source>Let's see how &lt;code&gt;class&lt;/code&gt; and &lt;code&gt;object&lt;/code&gt; are mapped to Objective-C and Swift. The generated &lt;code&gt;&amp;lt;Framework&amp;gt;/Headers/Demo.h&lt;/code&gt; file contains the exact definitions for &lt;code&gt;Class&lt;/code&gt;, &lt;code&gt;Interface&lt;/code&gt;, and &lt;code&gt;Object&lt;/code&gt;:</source>
          <target state="translated">让我们看看如何将 &lt;code&gt;class&lt;/code&gt; 和 &lt;code&gt;object&lt;/code&gt; 映射到Objective-C和Swift。生成的 &lt;code&gt;&amp;lt;Framework&amp;gt;/Headers/Demo.h&lt;/code&gt; 文件包含有关 &lt;code&gt;Class&lt;/code&gt; ， &lt;code&gt;Interface&lt;/code&gt; 和 &lt;code&gt;Object&lt;/code&gt; 的确切定义：</target>
        </trans-unit>
        <trans-unit id="2abb7f43d07915bd385a08f6f8eca1904f202535" translate="yes" xml:space="preserve">
          <source>Let's see now &lt;code&gt;CValue&amp;lt;T&amp;gt;&lt;/code&gt; is turned to a pointer first:</source>
          <target state="translated">让我们现在看 &lt;code&gt;CValue&amp;lt;T&amp;gt;&lt;/code&gt; 首先转向一个指针：</target>
        </trans-unit>
        <trans-unit id="0da8a1853bc3aa9296a82e748b06afcd60c8ff39" translate="yes" xml:space="preserve">
          <source>Let's summarize what we have in the table:</source>
          <target state="translated">我们来总结一下表中的内容。</target>
        </trans-unit>
        <trans-unit id="29489a663f002abc7aabbc10da61ddf3922c9137" translate="yes" xml:space="preserve">
          <source>Let's switch back to the Android Studio and execute the &lt;code&gt;build&lt;/code&gt; target of the &lt;code&gt;SharedCode&lt;/code&gt; project from the &lt;em&gt;Gradle&lt;/em&gt; tool window. The task looks for environment variables set by the Xcode build and copies the right variant of the framework into the &lt;code&gt;SharedCode/build/xcode-frameworks&lt;/code&gt; folder. We then include the framework from that folder into the build</source>
          <target state="translated">让我们切换回Android Studio，并从&lt;em&gt;Gradle&lt;/em&gt;工具窗口执行 &lt;code&gt;SharedCode&lt;/code&gt; 项目的 &lt;code&gt;build&lt;/code&gt; 目标。该任务将查找Xcode构建设置的环境变量，并将框架的正确变体复制到 &lt;code&gt;SharedCode/build/xcode-frameworks&lt;/code&gt; 文件夹中。然后，我们将该文件夹中的框架包含到构建中&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="aa5c06386e1b74a742a7f7576c52eff2fd2031ee" translate="yes" xml:space="preserve">
          <source>Let's take a look at Kotlin runtime declarations first:</source>
          <target state="translated">我们先来看看Kotlin运行时的声明。</target>
        </trans-unit>
        <trans-unit id="0d3a04db62b13c25688a0e50c618e3bec15eb02a" translate="yes" xml:space="preserve">
          <source>Let's take a look at a concrete example.</source>
          <target state="translated">我们来看一个具体的例子。</target>
        </trans-unit>
        <trans-unit id="d83be9a947c4ef371bac95dfdb52ba3f51a09f86" translate="yes" xml:space="preserve">
          <source>Let's take a look at the &lt;code&gt;kotlin.root.example&lt;/code&gt; field, it mimics the package structure of our Kotlin code with a &lt;code&gt;kotlin.root.&lt;/code&gt; prefix.</source>
          <target state="translated">让我们看一下 &lt;code&gt;kotlin.root.example&lt;/code&gt; 字段，它使用kotlin.root模拟我们的Kotlin代码的包结构 &lt;code&gt;kotlin.root.&lt;/code&gt; 字首。</target>
        </trans-unit>
        <trans-unit id="7a1c41eab269c88a145c3bcd2eacac0f706a1202" translate="yes" xml:space="preserve">
          <source>Let's take a look at the difference between &lt;code&gt;Iterable&lt;/code&gt; and &lt;code&gt;Sequence&lt;/code&gt; with an example.</source>
          <target state="translated">让我们看一个示例，了解 &lt;code&gt;Iterable&lt;/code&gt; 和 &lt;code&gt;Sequence&lt;/code&gt; 之间的区别。</target>
        </trans-unit>
        <trans-unit id="683ff410a92468b732cdb32c98685fb25b7caa78" translate="yes" xml:space="preserve">
          <source>Let's take a look at the generated functions that take our &lt;code&gt;MyStruct&lt;/code&gt; and &lt;code&gt;MyUnion&lt;/code&gt; as parameters. We see that by-value parameters are represented as &lt;code&gt;kotlinx.cinterop.CValue&amp;lt;T&amp;gt;&lt;/code&gt;. And for typed pointer parameters we see &lt;code&gt;kotlinx.cinterop.CValuesRef&amp;lt;T&amp;gt;&lt;/code&gt;. Kotlin provides us with an API to deal with both types easily, let's try it and see.</source>
          <target state="translated">让我们看一下以 &lt;code&gt;MyStruct&lt;/code&gt; 和 &lt;code&gt;MyUnion&lt;/code&gt; 作为参数的生成函数。我们看到按值参数表示为 &lt;code&gt;kotlinx.cinterop.CValue&amp;lt;T&amp;gt;&lt;/code&gt; 。对于类型化的指针参数，我们看到 &lt;code&gt;kotlinx.cinterop.CValuesRef&amp;lt;T&amp;gt;&lt;/code&gt; 。Kotlin为我们提供了一个API，可以轻松处理这两种类型，让我们尝试一下。</target>
        </trans-unit>
        <trans-unit id="640f277dd088f13964789f8075c590d21d6b9dfc" translate="yes" xml:space="preserve">
          <source>Let's take pipelines to the extreme with an example that generates prime numbers using a pipeline of coroutines. We start with an infinite sequence of numbers.</source>
          <target state="translated">让我们用一个使用coroutine流水线生成素数的例子,把流水线发挥到极致。我们从一个无限的数字序列开始。</target>
        </trans-unit>
        <trans-unit id="3a85f4e1e0328af1a77f3960a6412ca2106e30f9" translate="yes" xml:space="preserve">
          <source>Let's try the same with coroutines:</source>
          <target state="translated">让我们试试同样的coroutines。</target>
        </trans-unit>
        <trans-unit id="7edcd7d839fe1e0dfdcd3a0fe161ec6c231e6fb0" translate="yes" xml:space="preserve">
          <source>Let's try to use the API from Kotlin. Let's call &lt;code&gt;pass_string&lt;/code&gt; first:</source>
          <target state="translated">让我们尝试使用Kotlin的API。让我们先调用 &lt;code&gt;pass_string&lt;/code&gt; ：</target>
        </trans-unit>
        <trans-unit id="0627f0965e7ec33cbf1e065c2d05108d4f888350" translate="yes" xml:space="preserve">
          <source>Let's update the Gradle scripts now to implement that and configure our IDE.</source>
          <target state="translated">现在让我们更新Gradle脚本来实现,并配置我们的IDE。</target>
        </trans-unit>
        <trans-unit id="cd1102ed7118f5a51e4a3d98942ad07717eaabd4" translate="yes" xml:space="preserve">
          <source>Let's use it with channel &lt;code&gt;a&lt;/code&gt; that produces &quot;Hello&quot; string four times and channel &lt;code&gt;b&lt;/code&gt; that produces &quot;World&quot; four times:</source>
          <target state="translated">让我们用它来与通道 &lt;code&gt;a&lt;/code&gt; 产生&amp;ldquo;你好&amp;rdquo;字符串四次，通道 &lt;code&gt;b&lt;/code&gt; 产生的&amp;ldquo;世界&amp;rdquo;四次：</target>
        </trans-unit>
        <trans-unit id="9dbe6646e8e9a0c1dd5558c986bbdc08c0c317a1" translate="yes" xml:space="preserve">
          <source>Let's walk through the interfaces and their implementations.</source>
          <target state="translated">让我们来看看这些接口和它们的实现。</target>
        </trans-unit>
        <trans-unit id="83d65fd8bdf3a04f906b52d7b1ba67e299c6332e" translate="yes" xml:space="preserve">
          <source>Let's walk through the mechanisms of implementing type-safe builders in Kotlin. First of all, we need to define the model we want to build, in this case we need to model HTML tags. It is easily done with a bunch of classes. For example, &lt;code&gt;HTML&lt;/code&gt; is a class that describes the &lt;code&gt;&amp;lt;html&amp;gt;&lt;/code&gt; tag, i.e. it defines children like &lt;code&gt;&amp;lt;head&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;body&amp;gt;&lt;/code&gt;. (See its declaration &lt;a href=&quot;#full-definition-of-the-comexamplehtml-package&quot;&gt;below&lt;/a&gt;.)</source>
          <target state="translated">让我们逐步了解一下在Kotlin中实现类型安全构建器的机制。首先，我们需要定义要构建的模型，在这种情况下，我们需要对HTML标签建模。通过一堆类很容易做到。例如， &lt;code&gt;HTML&lt;/code&gt; 是描述 &lt;code&gt;&amp;lt;html&amp;gt;&lt;/code&gt; 标记的类，即，它定义了诸如 &lt;code&gt;&amp;lt;head&amp;gt;&lt;/code&gt; 和 &lt;code&gt;&amp;lt;body&amp;gt;&lt;/code&gt; 之类的子代。 （请参阅&lt;a href=&quot;#full-definition-of-the-comexamplehtml-package&quot;&gt;下面&lt;/a&gt;的声明。）</target>
        </trans-unit>
        <trans-unit id="7c7f5d049fad2569721d446c4a811f9bd5da5393" translate="yes" xml:space="preserve">
          <source>Level</source>
          <target state="translated">Level</target>
        </trans-unit>
        <trans-unit id="27c968e6692b41bf6e1a241b870dc41ff1a51b17" translate="yes" xml:space="preserve">
          <source>Libraries</source>
          <target state="translated">Libraries</target>
        </trans-unit>
        <trans-unit id="00f72e56b5ae78fda32dcd4978d25a113af870e2" translate="yes" xml:space="preserve">
          <source>Library authors can use the @Deprecated and &lt;a href=&quot;../opt-in-requirements&quot;&gt;@RequiresOptIn&lt;/a&gt; annotations to control the evolution of their API surface. Note that @Deprecated(level=HIDDEN) can be used to preserve binary compatibility even for declarations removed from the API.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="74fbbbbc56ff7a0c7c22c830abedb5e3565e5058" translate="yes" xml:space="preserve">
          <source>Library authors can use the @Deprecated and @Experimental annotations to control the evolution of their API surface. Note that @Deprecated(level=HIDDEN) can be used to preserve binary compatibility even for declarations removed from the API.</source>
          <target state="translated">库作者可以使用 @Deprecated 和 @Experimental 注解来控制他们的 API 表面的演变。请注意,@Deprecated(level=HIDDEN)可以用来保持二进制的兼容性,即使是从API中删除的声明。</target>
        </trans-unit>
        <trans-unit id="0405ca8057bdd26aa8a71ed5b78eaef11cd20a80" translate="yes" xml:space="preserve">
          <source>Library code should always specify return types of public/protected functions and properties explicitly thus never relying on type inference for public API. Subtle changes in type inference may cause return types to change inadvertently, leading to binary compatibility issues.</source>
          <target state="translated">库代码应该始终明确指定公共/保护函数和属性的返回类型,从而永远不依赖公共API的类型推理。类型推理中的细微变化可能会导致返回类型在无意中改变,从而导致二进制兼容性问题。</target>
        </trans-unit>
        <trans-unit id="2fc01b5cc1b2ec00feddd7cb533ccfb023b55321" translate="yes" xml:space="preserve">
          <source>Library search sequence</source>
          <target state="translated">图书馆搜索序列</target>
        </trans-unit>
        <trans-unit id="141acdd651d31f900ce141517e6e5b768c6f9865" translate="yes" xml:space="preserve">
          <source>Library support for the Kotlin annotation facility.</source>
          <target state="translated">对Kotlin注释设施的库支持。</target>
        </trans-unit>
        <trans-unit id="ec793eb7fd1d6c9106d97e622f4fcbf89e666960" translate="yes" xml:space="preserve">
          <source>Licensed under the Apache License, Version 2.0.</source>
          <target state="translated">根据Apache许可证,2.0版本授权。</target>
        </trans-unit>
        <trans-unit id="8ca0dc8586d3cb640a4422d4f36e3b18f79a2fc2" translate="yes" xml:space="preserve">
          <source>Like Java's, Kotlin's generics are not retained at runtime, i.e. objects do not carry information about actual type arguments passed to their constructors, i.e. &lt;code&gt;ArrayList&amp;lt;Integer&amp;gt;()&lt;/code&gt; is indistinguishable from &lt;code&gt;ArrayList&amp;lt;Character&amp;gt;()&lt;/code&gt;. This makes it impossible to perform &lt;em&gt;is&lt;/em&gt;-checks that take generics into account. Kotlin only allows &lt;em&gt;is&lt;/em&gt;-checks for star-projected generic types:</source>
          <target state="translated">像Java一样，Kotlin的泛型在运行时不会保留，即对象不携带传递给其构造函数的有关实际类型参数的信息，即 &lt;code&gt;ArrayList&amp;lt;Integer&amp;gt;()&lt;/code&gt; 与 &lt;code&gt;ArrayList&amp;lt;Character&amp;gt;()&lt;/code&gt; 是无法区分的。这使得无法进行&lt;em&gt;是&lt;/em&gt;该采取泛型考虑-checks。Kotlin仅允许&lt;em&gt;is&lt;/em&gt; -checks进行星型投影的泛型类型：</target>
        </trans-unit>
        <trans-unit id="134fca0c09908f36860692b90dc834d35d2666e9" translate="yes" xml:space="preserve">
          <source>Like in Python, functions in Kotlin are first-class values - they can be assigned to variables and passed around as parameters. The type a function is a &lt;em&gt;function type&lt;/em&gt;, which is indicated with a parenthesized parameter type list and an arrow to the return type. Consider this function:</source>
          <target state="translated">像Python中一样，Kotlin中的函数是一等值-它们可以分配给变量并作为参数传递。&lt;em&gt;函数的类型&lt;/em&gt;是&lt;em&gt;函数类型&lt;/em&gt;，用括号括起来的参数类型列表和返回类型的箭头指示。考虑以下功能：</target>
        </trans-unit>
        <trans-unit id="4ddd56354c9749dcb1f4e69de6ab93bcbbe060ca" translate="yes" xml:space="preserve">
          <source>Like in Python, statements may be terminated by a semicolon, but it's discouraged. There is no line continuation character; instead, a line is automatically joined with one or more of the subsequent lines if that's the only way to make the code parse correctly. In practice, that means that a statement continues on the next line if we're inside an open parenthesis (like in Python), or if the line ends with a &quot;dangling operator&quot; (unlike in Python) or the following line doesn't parse unless it's joined to the previous one (also unlike in Python). Note that this is pretty much &lt;a href=&quot;https://stackoverflow.com/questions/2846283/what-are-the-rules-for-javascripts-automatic-semicolon-insertion-asi#2846298&quot;&gt;the opposite of JavaScript&lt;/a&gt;, which generally will keep joining lines as long as the resulting code still parses. Thus, the following is two expressions in Kotlin and in Python (because &lt;code&gt;+&lt;/code&gt; can be unary, so the second line parses on its own), but one in JavaScript:</source>
          <target state="translated">像在Python中一样，语句可以用分号终止，但不建议使用。没有换行符；相反，如果这是使代码正确解析的唯一方法，则该行会自动与一个或多个后续行合并在一起。在实践中，这意味着如果我们在开放括号内（如在Python中），或者该行以&amp;ldquo;悬挂运算符&amp;rdquo;结尾（与Python不同），则语句在下一行继续执行解析，除非它与上一个连接（也不同于Python）。请注意，这几乎&lt;a href=&quot;https://stackoverflow.com/questions/2846283/what-are-the-rules-for-javascripts-automatic-semicolon-insertion-asi#2846298&quot;&gt;与JavaScript相反&lt;/a&gt;，后者通常会保持连接行，只要结果代码仍可解析。因此，以下是Kotlin和Python中的两个表达式（因为 &lt;code&gt;+&lt;/code&gt; 可以是一元的，因此第二行自行解析），但是在JavaScript中是：</target>
        </trans-unit>
        <trans-unit id="36d262d6365f0d350e9446c742577b066fb40895" translate="yes" xml:space="preserve">
          <source>Like in Python, you can write &lt;em&gt;lambda expressions&lt;/em&gt;: unnamed function declarations with a very compact syntax, which evaluate to callable function objects. In Kotlin, lambdas can contain multiple statements, which make them useful for &lt;a href=&quot;functional-programming#receivers&quot;&gt;more complex tasks&lt;/a&gt; than the single-expression lambdas of Python. The last statement must be an expression, whose result will become the return value of the lambda (unless &lt;code&gt;Unit&lt;/code&gt; is the return type of the variable/parameter that the lambda expression is assigned to, in which case the lambda has no return value). A lambda expression is enclosed in curly braces, and begins by listing its parameter names and possibly their types (unless the types can be inferred from context):</source>
          <target state="translated">像在Python中一样，您可以编写&lt;em&gt;lambda表达式&lt;/em&gt;：具有非常紧凑的语法的未命名函数声明，其结果可调用函数对象。在Kotlin中，lambda可以包含多个语句，这使得它们比Python的单表达式lambda &lt;a href=&quot;functional-programming#receivers&quot;&gt;更为&lt;/a&gt;有用。最后一条语句必须是一个表达式，其结果将成为lambda的返回值（除非 &lt;code&gt;Unit&lt;/code&gt; 是为lambda表达式指定的变量/参数的返回类型，在这种情况下，lambda没有返回值）。Lambda表达式用花​​括号括起来，并从列出其参数名称以及可能的类型开始（除非可以从上下文中推断类型）：</target>
        </trans-unit>
        <trans-unit id="4ee83e74db24116986fa00ee2921b9703634e255" translate="yes" xml:space="preserve">
          <source>Like numbers, characters are boxed when a nullable reference is needed. Identity is not preserved by the boxing operation.</source>
          <target state="translated">和数字一样,当需要可空引用时,字符会被装箱。框选操作不保留身份。</target>
        </trans-unit>
        <trans-unit id="dc3b674f534270e494afa035103eb57b636704df" translate="yes" xml:space="preserve">
          <source>Likewise, if a multiplatform library is published in the experimental &lt;a href=&quot;#experimental-metadata-publishing-mode&quot;&gt;Gradle metadata publishing mode&lt;/a&gt; and the project is set up to consume the metadata as well, then it is enough to specify a dependency only once, for the common source set. Otherwise, each platform-specific source set should be provided with a corresponding platform module of the library, in addition to the common module, as shown above.</source>
          <target state="translated">同样，如果以实验性&lt;a href=&quot;#experimental-metadata-publishing-mode&quot;&gt;Gradle元数据发布模式&lt;/a&gt;发布多平台库，并且该项目也设置为使用元数据，则对于公共源集仅指定一次依赖项就足够了。否则，除了公共模块外，每个平台特定的源集还应提供库的相应平台模块，如上所示。</target>
        </trans-unit>
        <trans-unit id="a7c04c64ed3f2a9374590c76c50d3b7f1b18e3da" translate="yes" xml:space="preserve">
          <source>Limitations</source>
          <target state="translated">Limitations</target>
        </trans-unit>
        <trans-unit id="f8233d6f380a149df94d518228f2e14afd396052" translate="yes" xml:space="preserve">
          <source>Linear search</source>
          <target state="translated">线性搜索</target>
        </trans-unit>
        <trans-unit id="b867f8dc43342a216856620ba5a0d8c96b534757" translate="yes" xml:space="preserve">
          <source>Link the library into the application</source>
          <target state="translated">将库链接到应用程序中</target>
        </trans-unit>
        <trans-unit id="0084b300581a4369f50268c2c401f96431ea7f31" translate="yes" xml:space="preserve">
          <source>LinkStyle</source>
          <target state="translated">LinkStyle</target>
        </trans-unit>
        <trans-unit id="07410b317023eeb58eba0c065fa4e8416575a68f" translate="yes" xml:space="preserve">
          <source>LinkedHashMap</source>
          <target state="translated">LinkedHashMap</target>
        </trans-unit>
        <trans-unit id="9e6a957a7c69081b233af13d7e01702499988584" translate="yes" xml:space="preserve">
          <source>LinkedHashSet</source>
          <target state="translated">LinkedHashSet</target>
        </trans-unit>
        <trans-unit id="778915b1ca69b860077b72be4fd2810162ac2e59" translate="yes" xml:space="preserve">
          <source>Linking to Elements</source>
          <target state="translated">链接到元素</target>
        </trans-unit>
        <trans-unit id="ff0484f6287dafcb08eb0a886ac73a7153824af7" translate="yes" xml:space="preserve">
          <source>Linux (x86_64, arm32, MIPS, MIPS little endian, Raspberry Pi)</source>
          <target state="translated">Linux (x86_64,arm32,MIPS,MIPS little endian,Raspberry Pi)</target>
        </trans-unit>
        <trans-unit id="c8306ed1ec95ef01523eab6c3a95dbeb9f6511fb" translate="yes" xml:space="preserve">
          <source>Linux (x86_64, arm32, arm64, MIPS, MIPS little endian)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="430e92ad771f5c7d80b45e64d2d47aa39cd97e1b" translate="yes" xml:space="preserve">
          <source>Linux MIPS targets (&lt;code&gt;linuxMips32&lt;/code&gt; and &lt;code&gt;linuxMipsel32&lt;/code&gt;) require a Linux host. Other Linux targets can be built on any supported host;</source>
          <target state="translated">Linux MIPS目标（ &lt;code&gt;linuxMips32&lt;/code&gt; 和 &lt;code&gt;linuxMipsel32&lt;/code&gt; ）需要Linux主机。可以在任何受支持的主机上构建其他Linux目标。</target>
        </trans-unit>
        <trans-unit id="bfb299cccd6e6b52b05aad6a92f9e230c0c907cf" translate="yes" xml:space="preserve">
          <source>Linux: &lt;code&gt;libnative_api.h&lt;/code&gt; and &lt;code&gt;libnative.so&lt;/code&gt;</source>
          <target state="translated">Linux： &lt;code&gt;libnative_api.h&lt;/code&gt; 和 &lt;code&gt;libnative.so&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="a1fffaaafb7cc996685bceb829c053cc4f7de43d" translate="yes" xml:space="preserve">
          <source>List</source>
          <target state="translated">List</target>
        </trans-unit>
        <trans-unit id="1cf922153258f477bc71540c57fe2b01a501cd22" translate="yes" xml:space="preserve">
          <source>List Specific Operations</source>
          <target state="translated">列出具体操作</target>
        </trans-unit>
        <trans-unit id="a159771f6ea4355d13f8450d01c0373e1562c782" translate="yes" xml:space="preserve">
          <source>List elements (including nulls) can duplicate: a list can contain any number of equal objects or occurrences of a single object. Two lists are considered equal if they have the same sizes and &lt;a href=&quot;equality#structural-equality&quot;&gt;structurally equal&lt;/a&gt; elements at the same positions.</source>
          <target state="translated">列表元素（包括null）可以重复：列表可以包含任意数量的相等对象或单个对象的出现。如果两个列表的大小相同且元素在相同位置上的&lt;a href=&quot;equality#structural-equality&quot;&gt;结构相同，&lt;/a&gt;则认为两个列表相等。</target>
        </trans-unit>
        <trans-unit id="06c25d6b7dd57683933b41c5deaf09d2d0ac5990" translate="yes" xml:space="preserve">
          <source>List iterators</source>
          <target state="translated">列表迭代器</target>
        </trans-unit>
        <trans-unit id="18c411381841a95d683318d92c209a2833825015" translate="yes" xml:space="preserve">
          <source>List write operations</source>
          <target state="translated">列表写操作</target>
        </trans-unit>
        <trans-unit id="7c5f57edf1aaa5196cbc6ba79770c80aef15f3e5" translate="yes" xml:space="preserve">
          <source>List.listIterator</source>
          <target state="translated">List.listIterator</target>
        </trans-unit>
        <trans-unit id="48fb7de1e7f4ec62a77ab4aa73ec82916ebe8c3e" translate="yes" xml:space="preserve">
          <source>ListIterator</source>
          <target state="translated">ListIterator</target>
        </trans-unit>
        <trans-unit id="a204aa282b7f9617db30e92246b8efaf427d19cd" translate="yes" xml:space="preserve">
          <source>Lists also offer a function to replace an element at a given position - &lt;a href=&quot;../../api/latest/jvm/stdlib/kotlin.collections/-mutable-list/set&quot;&gt;&lt;code&gt;set()&lt;/code&gt;&lt;/a&gt; and its operator form &lt;code&gt;[]&lt;/code&gt;. &lt;code&gt;set()&lt;/code&gt; doesn't change the indexes of other elements.</source>
          <target state="translated">列表还提供了替换给定位置的元素的功能-set &lt;a href=&quot;../../api/latest/jvm/stdlib/kotlin.collections/-mutable-list/set&quot;&gt; &lt;code&gt;set()&lt;/code&gt; &lt;/a&gt;及其操作符形式 &lt;code&gt;[]&lt;/code&gt; 。 &lt;code&gt;set()&lt;/code&gt; 不会更改其他元素的索引。</target>
        </trans-unit>
        <trans-unit id="d5a0dae9f70ca77cfff82765784d806c80043676" translate="yes" xml:space="preserve">
          <source>Lists and maps also provide operations for updating elements. They are described in &lt;a href=&quot;list-operations&quot;&gt;List Specific Operations&lt;/a&gt; and &lt;a href=&quot;map-operations&quot;&gt;Map Specific Operations&lt;/a&gt;. For sets, updating doesn't make sense since it's actually removing an element and adding another one.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="290d0482de491a9f1d45c4e717b747b40f336dfe" translate="yes" xml:space="preserve">
          <source>Lists and sets also provide operations for updating elements. They are described in &lt;a href=&quot;list-operations&quot;&gt;List Specific Operations&lt;/a&gt; and &lt;a href=&quot;map-operations&quot;&gt;Map Specific Operations&lt;/a&gt;. For sets, updating doesn't make sense since it's actually removing an element and adding another one.</source>
          <target state="translated">列表和集合还提供用于更新元素的操作。它们在&amp;ldquo; &lt;a href=&quot;list-operations&quot;&gt;列表特定操作&amp;rdquo;&lt;/a&gt;和&amp;ldquo; &lt;a href=&quot;map-operations&quot;&gt;地图特定操作&amp;rdquo;中&lt;/a&gt;进行了描述。对于集合，更新是没有意义的，因为它实际上是在删除一个元素并添加另一个元素。</target>
        </trans-unit>
        <trans-unit id="f70b0e65f09114560be2730b53b6dbbae2e2bd80" translate="yes" xml:space="preserve">
          <source>Lists support all common operations for element retrieval: &lt;code&gt;elementAt()&lt;/code&gt;, &lt;code&gt;first()&lt;/code&gt;, &lt;code&gt;last()&lt;/code&gt;, and others listed in &lt;a href=&quot;collection-elements&quot;&gt;Retrieving Single Elements&lt;/a&gt;. What is specific for lists is index access to the elements, so the simplest way to read an element is retrieving it by index. That is done with the &lt;a href=&quot;../../api/latest/jvm/stdlib/kotlin.collections/-list/get&quot;&gt;&lt;code&gt;get()&lt;/code&gt;&lt;/a&gt; function with the index passed in the argument or the shorthand &lt;code&gt;[index]&lt;/code&gt; syntax.</source>
          <target state="translated">列表支持元素检索的所有常用操作： &lt;code&gt;elementAt()&lt;/code&gt; ， &lt;code&gt;first()&lt;/code&gt; ， &lt;code&gt;last()&lt;/code&gt; 以及&amp;ldquo; &lt;a href=&quot;collection-elements&quot;&gt;检索单个元素&amp;rdquo;中&lt;/a&gt;列出的其他操作。列表特有的是对元素的索引访问，因此读取元素的最简单方法是按索引检索它。这是通过使用&lt;a href=&quot;../../api/latest/jvm/stdlib/kotlin.collections/-list/get&quot;&gt; &lt;code&gt;get()&lt;/code&gt; &lt;/a&gt;函数以及在参数或速记 &lt;code&gt;[index]&lt;/code&gt; 语法中传递的索引来完成的。</target>
        </trans-unit>
        <trans-unit id="1b8cc7b0ac11bf88cf97ed5fc81444ae44893988" translate="yes" xml:space="preserve">
          <source>Literal Constants</source>
          <target state="translated">字面常数</target>
        </trans-unit>
        <trans-unit id="4da0019bff16f0b757af8c7d691632f05ab7ce73" translate="yes" xml:space="preserve">
          <source>Literal constants</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c7ba7dcf662374aafe652b03d75cb8f6024519d9" translate="yes" xml:space="preserve">
          <source>Literals</source>
          <target state="translated">Literals</target>
        </trans-unit>
        <trans-unit id="a354c605a19a501459267f5d2d15e3813a2622ea" translate="yes" xml:space="preserve">
          <source>Local Delegated Properties (since 1.1)</source>
          <target state="translated">本地委派属性(从1.1开始)。</target>
        </trans-unit>
        <trans-unit id="f5689c7ad8ad393161f3aa4e09dcfcbe8dae0b7c" translate="yes" xml:space="preserve">
          <source>Local Functions</source>
          <target state="translated">本地功能</target>
        </trans-unit>
        <trans-unit id="d7250510c8081d4daaa6df727eb914db9c33da3c" translate="yes" xml:space="preserve">
          <source>Local annotation classes</source>
          <target state="translated">本地注释类</target>
        </trans-unit>
        <trans-unit id="69ebd822a58983be422bb598dba3c478ccd777d9" translate="yes" xml:space="preserve">
          <source>Local declarations</source>
          <target state="translated">当地声明</target>
        </trans-unit>
        <trans-unit id="a1899e5981d8e839cbbac5a4b6b87631ee259818" translate="yes" xml:space="preserve">
          <source>Local delegated properties</source>
          <target state="translated">本地委托属性</target>
        </trans-unit>
        <trans-unit id="bcdcbb7562bc0be9df365ffa539169787154eb55" translate="yes" xml:space="preserve">
          <source>Local function can access local variables of outer functions (i.e. the closure), so in the case above, the &lt;em&gt;visited&lt;/em&gt; can be a local variable:</source>
          <target state="translated">局部函数可以访问外部函数（即闭包）的局部变量，因此在上述情况下，被&lt;em&gt;访问对象&lt;/em&gt;可以是局部变量：</target>
        </trans-unit>
        <trans-unit id="c81d1a5213298e456992ce397aa51ab435e7f9b2" translate="yes" xml:space="preserve">
          <source>Local functions</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7a8cbb48d88b807f7bfba9d309d29524b5f02383" translate="yes" xml:space="preserve">
          <source>Local variable</source>
          <target state="translated">本地变量</target>
        </trans-unit>
        <trans-unit id="e41667e2ac3ba5cde0fdffb1b6bacda9d66718d9" translate="yes" xml:space="preserve">
          <source>Local variables are typically declared and initialized at the same time, in which case the type of the variable is &lt;em&gt;inferred&lt;/em&gt; to be the type of the expression you initialize it with:</source>
          <target state="translated">局部变量通常是在同一时间声明和初始化的，在这种情况下，可以将变量的类型&lt;em&gt;推断&lt;/em&gt;为您使用其初始化的表达式的类型：</target>
        </trans-unit>
        <trans-unit id="ac8a58b4422a8352e1dd6a3c1ee5296717d9a865" translate="yes" xml:space="preserve">
          <source>Local variables, functions and classes can not have visibility modifiers.</source>
          <target state="translated">局部变量、函数和类不能有可见性修饰符。</target>
        </trans-unit>
        <trans-unit id="a78aea5b0abb85e3e611fbf1ec8a29dd64f3f7a3" translate="yes" xml:space="preserve">
          <source>LocaleOptions</source>
          <target state="translated">LocaleOptions</target>
        </trans-unit>
        <trans-unit id="d219c68101f532de10add2cf42fb9dbeca73d3be" translate="yes" xml:space="preserve">
          <source>Location</source>
          <target state="translated">Location</target>
        </trans-unit>
        <trans-unit id="4a56ee9bffd6aa6b4bd69f9a8fcf34ef4736447e" translate="yes" xml:space="preserve">
          <source>Locks are used to ensure that only a single thread can initialize the &lt;a href=&quot;../-lazy/index&quot;&gt;Lazy&lt;/a&gt; instance.</source>
          <target state="translated">锁用于确保只有一个线程可以初始化&lt;a href=&quot;../-lazy/index&quot;&gt;Lazy&lt;/a&gt;实例。</target>
        </trans-unit>
        <trans-unit id="0003a9c1d32ac7d8fddd983e062e51e3d0daa934" translate="yes" xml:space="preserve">
          <source>Logarithms: &lt;code&gt;log&lt;/code&gt;, &lt;code&gt;log2&lt;/code&gt;, &lt;code&gt;log10&lt;/code&gt;, &lt;code&gt;ln&lt;/code&gt;, &lt;code&gt;ln1p&lt;/code&gt;;</source>
          <target state="translated">对数： &lt;code&gt;log&lt;/code&gt; ， &lt;code&gt;log2&lt;/code&gt; ， &lt;code&gt;log10&lt;/code&gt; ， &lt;code&gt;ln&lt;/code&gt; ， &lt;code&gt;ln1p&lt;/code&gt; ；</target>
        </trans-unit>
        <trans-unit id="3496a775372b202cf19086b7723a8ba07a1c1c15" translate="yes" xml:space="preserve">
          <source>Logos can be downloaded &lt;a href=&quot;https://resources.jetbrains.com/storage/products/kotlin/docs/kotlin_logos.zip&quot;&gt;here&lt;/a&gt;. When using the logos, please follow simple rules in the &lt;code&gt;guidelines.pdf&lt;/code&gt; inside the archive and &lt;a href=&quot;https://kotlinlang.org/foundation/guidelines.html&quot;&gt;Kotlin brand usage guidelines&lt;/a&gt;.</source>
          <target state="translated">徽标可以在&lt;a href=&quot;https://resources.jetbrains.com/storage/products/kotlin/docs/kotlin_logos.zip&quot;&gt;此处&lt;/a&gt;下载。使用徽标时，请遵循存档中的 &lt;code&gt;guidelines.pdf&lt;/code&gt; 和&lt;a href=&quot;https://kotlinlang.org/foundation/guidelines.html&quot;&gt;Kotlin品牌使用指南&lt;/a&gt;中的简单规则。</target>
        </trans-unit>
        <trans-unit id="3171584f38872fa4d8f17811d91544f7756eaffd" translate="yes" xml:space="preserve">
          <source>Lombok (&lt;code&gt;lombok.NonNull&lt;/code&gt;).</source>
          <target state="translated">龙目岛（ &lt;code&gt;lombok.NonNull&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="11eda67f9b15a760342f8e98a3fc78d8d3ea9945" translate="yes" xml:space="preserve">
          <source>Long</source>
          <target state="translated">Long</target>
        </trans-unit>
        <trans-unit id="28da0e058738129fbcd7e6f45b76bc71f8a53660" translate="yes" xml:space="preserve">
          <source>LongArray</source>
          <target state="translated">LongArray</target>
        </trans-unit>
        <trans-unit id="4fccaadf63b5fc52428c158f51d57e23e947d24e" translate="yes" xml:space="preserve">
          <source>LongIterator</source>
          <target state="translated">LongIterator</target>
        </trans-unit>
        <trans-unit id="5845d554e07454310db9770fb728d9756ce6dae1" translate="yes" xml:space="preserve">
          <source>LongProgression</source>
          <target state="translated">LongProgression</target>
        </trans-unit>
        <trans-unit id="4fb8ec4ef48e7913a58002b0e63b73c29bff9f39" translate="yes" xml:space="preserve">
          <source>LongRange</source>
          <target state="translated">LongRange</target>
        </trans-unit>
        <trans-unit id="0b1c8c87dc520b4e01071e91d1f6a9ceb7e0e408" translate="yes" xml:space="preserve">
          <source>LongVar</source>
          <target state="translated">LongVar</target>
        </trans-unit>
        <trans-unit id="181cf892b1895d898b9744877c740407129f49dc" translate="yes" xml:space="preserve">
          <source>LongVarOf</source>
          <target state="translated">LongVarOf</target>
        </trans-unit>
        <trans-unit id="fd6299f672ee9cc3b8def57411eb0d0d9a44147d" translate="yes" xml:space="preserve">
          <source>Longs are tagged by a capital &lt;code&gt;L&lt;/code&gt;: &lt;code&gt;123L&lt;/code&gt;</source>
          <target state="translated">多头以大写 &lt;code&gt;L&lt;/code&gt; 标记： &lt;code&gt;123L&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="3e38e907fc0523189431e466a50de278a09267fc" translate="yes" xml:space="preserve">
          <source>Looking for more APIs? It is easy to create a &lt;a href=&quot;../multiplatform-library&quot;&gt;multiplatform library&lt;/a&gt; and share it!</source>
          <target state="translated">寻找更多API？创建一个&lt;a href=&quot;../multiplatform-library&quot;&gt;多平台库&lt;/a&gt;并共享它很容易！</target>
        </trans-unit>
        <trans-unit id="0c661eae6b65f74e27c40369060777e2f1a666bd" translate="yes" xml:space="preserve">
          <source>Looks up a function &lt;code&gt;inc()&lt;/code&gt; with the &lt;code&gt;operator&lt;/code&gt; modifier and no parameters, applicable to the receiver of type &lt;code&gt;T&lt;/code&gt;;</source>
          <target state="translated">查找具有 &lt;code&gt;operator&lt;/code&gt; 修饰符且没有参数的函数 &lt;code&gt;inc()&lt;/code&gt; ，适用于 &lt;code&gt;T&lt;/code&gt; 类型的接收器；</target>
        </trans-unit>
        <trans-unit id="06f3cb08bca38254cb72407f33d24848ac5110e5" translate="yes" xml:space="preserve">
          <source>Looks up a function &lt;code&gt;unaryPlus()&lt;/code&gt; with the &lt;code&gt;operator&lt;/code&gt; modifier and no parameters for the receiver &lt;code&gt;T&lt;/code&gt;, i.e. a member function or an extension function;</source>
          <target state="translated">&lt;code&gt;unaryPlus()&lt;/code&gt; 带有 &lt;code&gt;operator&lt;/code&gt; 修饰符且没有用于接收方 &lt;code&gt;T&lt;/code&gt; 的参数的函数unaryPlus（），即成员函数或扩展函数；</target>
        </trans-unit>
        <trans-unit id="02720f9d38bf4f35e84ed5228689898bee176418" translate="yes" xml:space="preserve">
          <source>Loops</source>
          <target state="translated">Loops</target>
        </trans-unit>
        <trans-unit id="4c2bd8b7625ef46e049dcc97f3e97069511fe26a" translate="yes" xml:space="preserve">
          <source>Loops on ranges</source>
          <target state="translated">循环的范围</target>
        </trans-unit>
        <trans-unit id="60369ad7d8b48a14f3d191172cf41bcfb71741f2" translate="yes" xml:space="preserve">
          <source>Low-level building blocks for libraries that provide coroutine-based APIs.</source>
          <target state="translated">提供基于coroutine的API的库的低级构件。</target>
        </trans-unit>
        <trans-unit id="33c64772edef0388f14ce1b4adb0c6c1bb1aa8e4" translate="yes" xml:space="preserve">
          <source>Luckily, Kotlin has got &lt;em&gt;reified type parameters&lt;/em&gt;, which alleviates some of these problems. By writing &lt;code&gt;reified&lt;/code&gt; in front of a generic type parameter, it does become available at runtime, and you'll get to write &lt;code&gt;T::class&lt;/code&gt; to get the &lt;a href=&quot;member-references-and-reflection#obtaining-member-references-from-a-class-reference&quot;&gt;class metadata&lt;/a&gt;. You can only do this in inline functions (because an inline function will be compiled into its callsite, where the type information &lt;em&gt;is&lt;/em&gt; available at runtime), but it still goes a long way. For example, you can make an inline wrapper function for a big function that has got a less elegant signature.</source>
          <target state="translated">幸运的是，Kotlin得到了改进的&lt;em&gt;类型参数&lt;/em&gt;，从而减轻了其中的一些问题。通过在通用类型参数前面编写 &lt;code&gt;reified&lt;/code&gt; ，它在运行时确实可以使用，您将可以编写 &lt;code&gt;T::class&lt;/code&gt; 来获取&lt;a href=&quot;member-references-and-reflection#obtaining-member-references-from-a-class-reference&quot;&gt;类元数据&lt;/a&gt;。你只能做到这一点的内联函数（因为inline函数会被编译成它的调用点，其中类型信息&lt;em&gt;是&lt;/em&gt;可以在运行时），但它仍然很长的路要走。例如，您可以为具有不太雅致的签名的大型函数制作一个内联包装函数。</target>
        </trans-unit>
        <trans-unit id="2dc6e5580de3bf07607e19a673cd1f05b259b2bd" translate="yes" xml:space="preserve">
          <source>MACOSX</source>
          <target state="translated">MACOSX</target>
        </trans-unit>
        <trans-unit id="c8341a27b6d81ce4872ef2e5c74c71c1fa656185" translate="yes" xml:space="preserve">
          <source>MATH_SYMBOL</source>
          <target state="translated">MATH_SYMBOL</target>
        </trans-unit>
        <trans-unit id="ccd2cb474249294edd8d61576efe0ac7d7c17d4c" translate="yes" xml:space="preserve">
          <source>MAX_CODE_POINT</source>
          <target state="translated">MAX_CODE_POINT</target>
        </trans-unit>
        <trans-unit id="1a9fd1b3912908145111964e328d77ecf366fc06" translate="yes" xml:space="preserve">
          <source>MAX_COMPONENT_VALUE</source>
          <target state="translated">MAX_COMPONENT_VALUE</target>
        </trans-unit>
        <trans-unit id="6a3f20e248cb8672ba053480b2e5604ed15471fb" translate="yes" xml:space="preserve">
          <source>MAX_HIGH_SURROGATE</source>
          <target state="translated">MAX_HIGH_SURROGATE</target>
        </trans-unit>
        <trans-unit id="93b95c89e3f09a5c822039fdb274e4e9543f7b4d" translate="yes" xml:space="preserve">
          <source>MAX_LOW_SURROGATE</source>
          <target state="translated">MAX_LOW_SURROGATE</target>
        </trans-unit>
        <trans-unit id="723df4d178ea35581b90fb4dff97fa4d9e1295a6" translate="yes" xml:space="preserve">
          <source>MAX_RADIX</source>
          <target state="translated">MAX_RADIX</target>
        </trans-unit>
        <trans-unit id="e1273ad446270c0c9cf3fd5cad44848e8250ffba" translate="yes" xml:space="preserve">
          <source>MAX_SURROGATE</source>
          <target state="translated">MAX_SURROGATE</target>
        </trans-unit>
        <trans-unit id="24fdbf54e8bc77709b6bd7478c1804e90d84d0ca" translate="yes" xml:space="preserve">
          <source>MAX_VALUE</source>
          <target state="translated">MAX_VALUE</target>
        </trans-unit>
        <trans-unit id="030147a88935a9397a9625c627fb1af71a30209e" translate="yes" xml:space="preserve">
          <source>MF</source>
          <target state="translated">MF</target>
        </trans-unit>
        <trans-unit id="c93eded712b6299da78db6d4eb86c71d455d7389" translate="yes" xml:space="preserve">
          <source>MIN_CODE_POINT</source>
          <target state="translated">MIN_CODE_POINT</target>
        </trans-unit>
        <trans-unit id="a8865ad11853a6b46e09f6d1cdddfd073f7d4851" translate="yes" xml:space="preserve">
          <source>MIN_HIGH_SURROGATE</source>
          <target state="translated">MIN_HIGH_SURROGATE</target>
        </trans-unit>
        <trans-unit id="bd2ef64ddf3863a50e14b7b72bf632b54603d300" translate="yes" xml:space="preserve">
          <source>MIN_LOW_SURROGATE</source>
          <target state="translated">MIN_LOW_SURROGATE</target>
        </trans-unit>
        <trans-unit id="91631ed7ebe4f66d93a855f168fd993a18bbb9ae" translate="yes" xml:space="preserve">
          <source>MIN_RADIX</source>
          <target state="translated">MIN_RADIX</target>
        </trans-unit>
        <trans-unit id="ff3ed914be4d85796f20ffe750d11ae41f0c093d" translate="yes" xml:space="preserve">
          <source>MIN_SUPPLEMENTARY_CODE_POINT</source>
          <target state="translated">MIN_SUPPLEMENTARY_CODE_POINT</target>
        </trans-unit>
        <trans-unit id="5aa1c9c7ed6ef1169c3e694d2e0558e797993672" translate="yes" xml:space="preserve">
          <source>MIN_SURROGATE</source>
          <target state="translated">MIN_SURROGATE</target>
        </trans-unit>
        <trans-unit id="ac7a7603646aca67877b81e10b36687c24f7d10a" translate="yes" xml:space="preserve">
          <source>MIN_VALUE</source>
          <target state="translated">MIN_VALUE</target>
        </trans-unit>
        <trans-unit id="9028a909c025cf9d16590fd055950504b793f600" translate="yes" xml:space="preserve">
          <source>MIPS32</source>
          <target state="translated">MIPS32</target>
        </trans-unit>
        <trans-unit id="ac1d1ed5dec64feab585fa1220864d5680a5811e" translate="yes" xml:space="preserve">
          <source>MIPSEL32</source>
          <target state="translated">MIPSEL32</target>
        </trans-unit>
        <trans-unit id="7b5afc2e6529ad3bd8e57a7791978e690003bcdd" translate="yes" xml:space="preserve">
          <source>MODIFIER_LETTER</source>
          <target state="translated">MODIFIER_LETTER</target>
        </trans-unit>
        <trans-unit id="8f6a3829c268c3a50caa5a3744901aba89c88358" translate="yes" xml:space="preserve">
          <source>MODIFIER_SYMBOL</source>
          <target state="translated">MODIFIER_SYMBOL</target>
        </trans-unit>
        <trans-unit id="84757851065b4eb5ddf781037790225276f37d3e" translate="yes" xml:space="preserve">
          <source>MULTILINE</source>
          <target state="translated">MULTILINE</target>
        </trans-unit>
        <trans-unit id="37a6f811775e72996553c62c5ef2ab8e4e658bea" translate="yes" xml:space="preserve">
          <source>MacOS (x86_64)</source>
          <target state="translated">MacOS (x86_64)</target>
        </trans-unit>
        <trans-unit id="07a4d61f0acbbb95318a8a2d2e1f3a3b76934273" translate="yes" xml:space="preserve">
          <source>MacPorts</source>
          <target state="translated">MacPorts</target>
        </trans-unit>
        <trans-unit id="899bd694d29ace1be956ab35177075021977560b" translate="yes" xml:space="preserve">
          <source>Macros</source>
          <target state="translated">Macros</target>
        </trans-unit>
        <trans-unit id="c22d87ecdb73737e3e9e79d9b2b16c5c79a06654" translate="yes" xml:space="preserve">
          <source>Make sure its return type is &lt;code&gt;Unit&lt;/code&gt;, and report an error otherwise,</source>
          <target state="translated">确保其返回类型为 &lt;code&gt;Unit&lt;/code&gt; ，否则报告错误，</target>
        </trans-unit>
        <trans-unit id="2fba991ad8d6b5e98b20f4c1f0a7d640d19bbf4f" translate="yes" xml:space="preserve">
          <source>Make sure that you have CocoaPods &lt;a href=&quot;https://guides.cocoapods.org/using/getting-started.html#installation&quot;&gt;installed&lt;/a&gt;. We recommend using CocoaPods 1.6.1 or later.</source>
          <target state="translated">确保已&lt;a href=&quot;https://guides.cocoapods.org/using/getting-started.html#installation&quot;&gt;安装&lt;/a&gt; CocoaPods 。我们建议使用CocoaPods 1.6.1或更高版本。</target>
        </trans-unit>
        <trans-unit id="872ea4c8c9e3e67462cf45519bbed3ec439a01dd" translate="yes" xml:space="preserve">
          <source>Make sure that you load the &lt;code&gt;kotlin.js&lt;/code&gt; runtime first, and then your application.</source>
          <target state="translated">确保首先加载 &lt;code&gt;kotlin.js&lt;/code&gt; 运行时，然后加载您的应用程序。</target>
        </trans-unit>
        <trans-unit id="eb5ad277768300cd65b74ec021eb800da7b06237" translate="yes" xml:space="preserve">
          <source>Make updating to new versions comfortable for the users.</source>
          <target state="translated">让用户舒适地更新到新版本。</target>
        </trans-unit>
        <trans-unit id="f677748d219b353836ae9469d4c8eb0bcdf46ffb" translate="yes" xml:space="preserve">
          <source>Makes Kotlin method in Objective-C class accessible through Objective-C dispatch to be used as action sent by control in UIKit or AppKit.</source>
          <target state="translated">使得Objective-C类中的Kotlin方法可以通过Objective-C dispatch访问,作为UIKit或AppKit中的控件发送的动作使用。</target>
        </trans-unit>
        <trans-unit id="09f808d1435cc07cd95f3ecbee1a2efed0c87454" translate="yes" xml:space="preserve">
          <source>Makes Kotlin property in Objective-C class settable through Objective-C dispatch to be used as IB outlet.</source>
          <target state="translated">使得Objective-C类中的Kotlin属性可以通过Objective-C dispatch来设置,作为IB出口使用。</target>
        </trans-unit>
        <trans-unit id="79cbb2384899cfe766ce2633e3ff22d2f36982b6" translate="yes" xml:space="preserve">
          <source>Makes Kotlin subclass of Objective-C class visible for runtime lookup after Kotlin &lt;code&gt;main&lt;/code&gt; function gets invoked.</source>
          <target state="translated">在调用Kotlin &lt;code&gt;main&lt;/code&gt; 函数后，使Objective-C类的Kotlin子类可见，以便在运行时查找。</target>
        </trans-unit>
        <trans-unit id="34b5071a9847a34a44b37d8ab94597a0b604b867" translate="yes" xml:space="preserve">
          <source>Makes the annotated annotation class an associated object key.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c05c0a0b46c6d81aa3deae4e473b3f5b195d9dae" translate="yes" xml:space="preserve">
          <source>Makes top level function available from C/C++ code with the given name.</source>
          <target state="translated">使得C/C++代码中给定名称的顶级函数可用。</target>
        </trans-unit>
        <trans-unit id="3dc9b78fb75740d031749aa0e1f6c2f20915be09" translate="yes" xml:space="preserve">
          <source>Making computation code cancellable</source>
          <target state="translated">使计算代码可以取消</target>
        </trans-unit>
        <trans-unit id="d26e8b17246e39f5acbd44ce84cfe44e4708e7bc" translate="yes" xml:space="preserve">
          <source>Making frequent null checks is annoying, so if you have to allow for the possibility of nulls, there are several very useful operators in Kotlin to ease working with values that might be null, as described below.</source>
          <target state="translated">频繁地进行null检查是很烦人的,所以如果你必须允许null的可能性,Kotlin中有几个非常有用的操作符来方便处理可能是null的值,如下所述。</target>
        </trans-unit>
        <trans-unit id="f35727fd1febb5955e04a96a85cfbf28b11e18a0" translate="yes" xml:space="preserve">
          <source>Malformed byte sequences are replaced by the replacement char &lt;code&gt;\uFFFD&lt;/code&gt;.</source>
          <target state="translated">格式不正确的字节序列由替换char &lt;code&gt;\uFFFD&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="b2aee73bd2e79677bed872d3980e254bec42f2c5" translate="yes" xml:space="preserve">
          <source>Managing dependencies</source>
          <target state="translated">管理依赖性</target>
        </trans-unit>
        <trans-unit id="f45216dfe5658802d5da85dd6691495f1dd5ee41" translate="yes" xml:space="preserve">
          <source>Managing sources</source>
          <target state="translated">管理来源</target>
        </trans-unit>
        <trans-unit id="b0426429a44f47228605bdec162f6e1798c46d34" translate="yes" xml:space="preserve">
          <source>Managing targets</source>
          <target state="translated">管理目标</target>
        </trans-unit>
        <trans-unit id="dc1586db5c7b55a74cd10223f2e3a7fe8bf95caa" translate="yes" xml:space="preserve">
          <source>Mangling</source>
          <target state="translated">Mangling</target>
        </trans-unit>
        <trans-unit id="76f58e9ae1ecc3bcd5734ccddd0e7976cd032c5b" translate="yes" xml:space="preserve">
          <source>Manual Configuration</source>
          <target state="translated">手动配置</target>
        </trans-unit>
        <trans-unit id="724adbdc3ff0031b5c79ad867a79546b920a65f6" translate="yes" xml:space="preserve">
          <source>Manual Install</source>
          <target state="translated">手动安装</target>
        </trans-unit>
        <trans-unit id="65a73e4ea7721ba692baf916576f5d262d09eb6e" translate="yes" xml:space="preserve">
          <source>Many modern IDEs support Kotlin and help in writing idiomatic Kotlin code:</source>
          <target state="translated">许多现代IDE都支持Kotlin,并帮助编写习惯性的Kotlin代码。</target>
        </trans-unit>
        <trans-unit id="564f728d4accd1cab1faa6abd0808aa411a7afbc" translate="yes" xml:space="preserve">
          <source>Many of the options can also be configured through properties:</source>
          <target state="translated">许多选项也可以通过属性进行配置。</target>
        </trans-unit>
        <trans-unit id="fe81b734a40201fad1b163bd75e5e8866ba447fc" translate="yes" xml:space="preserve">
          <source>Many startups and Fortune 500 companies have already developed Android applications using Kotlin &amp;ndash; see the list at &lt;a href=&quot;https://developer.android.com/kotlin&quot;&gt;the Google website for Kotlin developers&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ab478f3efc840eebab919dff1b9512286f70c10c" translate="yes" xml:space="preserve">
          <source>Map</source>
          <target state="translated">Map</target>
        </trans-unit>
        <trans-unit id="1a3e682ff2754ef0b1db9651d934d18042efd51a" translate="yes" xml:space="preserve">
          <source>Map Specific Operations</source>
          <target state="translated">地图具体操作</target>
        </trans-unit>
        <trans-unit id="8a55ba4dc9c56793f4d86eafccdf893ff4dfc510" translate="yes" xml:space="preserve">
          <source>Map nullable value if not null</source>
          <target state="translated">如果不是空值,则映射空值</target>
        </trans-unit>
        <trans-unit id="154baeb185088267d2e04dd13fb49c8faf1731b4" translate="yes" xml:space="preserve">
          <source>Map write operations</source>
          <target state="translated">地图写入操作</target>
        </trans-unit>
        <trans-unit id="7c78455b5524d54dd5717439fdd75a3564e3b05c" translate="yes" xml:space="preserve">
          <source>Map.getValue()</source>
          <target state="translated">Map.getValue()</target>
        </trans-unit>
        <trans-unit id="ab6d914f12b0209ae12f1eaa021fab679f71fbd9" translate="yes" xml:space="preserve">
          <source>Map.minus(key)</source>
          <target state="translated">Map.minus(key)</target>
        </trans-unit>
        <trans-unit id="a1e3b9de38695948c83390c6219ada2b49d0eb03" translate="yes" xml:space="preserve">
          <source>Map.toMap() and Map.toMutableMap()</source>
          <target state="translated">Map.toMap()和Map.toMutableMap()</target>
        </trans-unit>
        <trans-unit id="f5503e0acfd60752001069a9088cb22064b114de" translate="yes" xml:space="preserve">
          <source>Mapped types</source>
          <target state="translated">映射类型</target>
        </trans-unit>
        <trans-unit id="def2eba59562958fa4a005f8070d692ef8502312" translate="yes" xml:space="preserve">
          <source>Mapping</source>
          <target state="translated">Mapping</target>
        </trans-unit>
        <trans-unit id="ae3c45c6220c54a755f63c613acc1f9b440f728e" translate="yes" xml:space="preserve">
          <source>Mapping Function Pointer Types from C</source>
          <target state="translated">从C语言映射函数指针类型</target>
        </trans-unit>
        <trans-unit id="3629da3c88dfc6308c1eb31a6616f2493b1b3a4a" translate="yes" xml:space="preserve">
          <source>Mapping Function Pointers from C</source>
          <target state="translated">从C语言映射函数指针</target>
        </trans-unit>
        <trans-unit id="1ab023f41f65f5d65722a6148006ad3ade089fb2" translate="yes" xml:space="preserve">
          <source>Mapping Primitive Data Types from C</source>
          <target state="translated">从C语言映射原始数据类型</target>
        </trans-unit>
        <trans-unit id="d6b4467553c4b4c986cbd21872e97a3c8e8ea762" translate="yes" xml:space="preserve">
          <source>Mapping Strings from C</source>
          <target state="translated">从C语言映射字符串</target>
        </trans-unit>
        <trans-unit id="76a029f685d2ba76aaeecfdb2224f273ebee328a" translate="yes" xml:space="preserve">
          <source>Mapping Struct and Union C types</source>
          <target state="translated">映射结构和联盟C类型</target>
        </trans-unit>
        <trans-unit id="565e074c9f98132ef0f9b4a1395ca391399b5fc8" translate="yes" xml:space="preserve">
          <source>Mapping Struct and Union Types from C</source>
          <target state="translated">从C语言映射结构和联合类型</target>
        </trans-unit>
        <trans-unit id="1cbcdd98d1b5744757244f463b7f939b4869f3e4" translate="yes" xml:space="preserve">
          <source>Mappings</source>
          <target state="translated">Mappings</target>
        </trans-unit>
        <trans-unit id="4811d5bdec38d0b9bed7265f0e3355c78194b1ff" translate="yes" xml:space="preserve">
          <source>Marker interface indicating that the &lt;a href=&quot;-list/index#kotlin.collections.List&quot;&gt;List&lt;/a&gt; implementation supports fast indexed access.</source>
          <target state="translated">标记接口，指示&lt;a href=&quot;-list/index#kotlin.collections.List&quot;&gt;List&lt;/a&gt;实现支持快速索引访问。</target>
        </trans-unit>
        <trans-unit id="79f92c6a2f9b55de94523a0137df26f32b271fc3" translate="yes" xml:space="preserve">
          <source>Marker interface indicating that the &lt;a href=&quot;../../kotlin.collections/-list/index#kotlin.collections.List&quot;&gt;List&lt;/a&gt; implementation supports fast indexed access.</source>
          <target state="translated">标记接口，指示&lt;a href=&quot;../../kotlin.collections/-list/index#kotlin.collections.List&quot;&gt;List&lt;/a&gt;实现支持快速索引访问。</target>
        </trans-unit>
        <trans-unit id="deb9ed7bb61b8698d73e57af565358059241e0bd" translate="yes" xml:space="preserve">
          <source>Marking API elements</source>
          <target state="translated">标记API元素</target>
        </trans-unit>
        <trans-unit id="39acae63028d11938c7d9a75f3ad9099e5f79972" translate="yes" xml:space="preserve">
          <source>Marking experimental API</source>
          <target state="translated">标记实验性API</target>
        </trans-unit>
        <trans-unit id="72ca39cc361248a73db4aa376ff098d3162e32bf" translate="yes" xml:space="preserve">
          <source>Marking rules: an implicit receiver is considered marked with @Ann if</source>
          <target state="translated">标记规则:如果一个隐含的接收器被认为是用@Ann标记的,如果</target>
        </trans-unit>
        <trans-unit id="d4db1b9cfb765a0420560d33f4c49a590513a4d0" translate="yes" xml:space="preserve">
          <source>Marks a top level property with a backing field as immutable. It is possible to share the value of such property between multiple threads, but it becomes deeply frozen, so no changes can be made to its state or the state of objects it refers to.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a224cc22214be0edab83e29fa79b9dd2dd10f50f" translate="yes" xml:space="preserve">
          <source>Marks a top level property with a backing field or an object as thread local. The object remains mutable and it is possible to change its state, but every thread will have a distinct copy of this object, so changes in one thread are not reflected in another.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="33d0711db8fea3ba5bf0ebfba79cfe0cf8264458" translate="yes" xml:space="preserve">
          <source>Marks a top level variable with a backing field or an object as immutable. It is possible to share such object between multiple threads, but it becomes deeply frozen, so no changes can be made to its state or the state of objects it refers to.</source>
          <target state="translated">将一个带有支持字段的顶层变量或对象标记为不可更改。可以在多个线程之间共享这样的对象,但它会被深度冻结,所以不能改变它的状态或它所引用的对象的状态。</target>
        </trans-unit>
        <trans-unit id="9c86911fdb83bb1e6cafe3509aa437cd672c34a9" translate="yes" xml:space="preserve">
          <source>Marks a top level variable with a backing field or an object as thread local. The object remains mutable and it is possible to change its state, but every thread will have a distinct copy of this object, so changes in one thread are not reflected in another.</source>
          <target state="translated">将一个带有支持字段的顶层变量或对象标记为线程本地。该对象仍然是可变的,并且可以改变它的状态,但是每个线程都有一个不同的对象副本,所以一个线程的变化不会反映在另一个线程中。</target>
        </trans-unit>
        <trans-unit id="6ec4d266890af2cb0a6aa9e1810055ba658008f8" translate="yes" xml:space="preserve">
          <source>Marks an expected annotation class that it isn't required to have actual counterparts in all platforms.</source>
          <target state="translated">标志着一个预期的注解类,它不需要在所有的平台上都有实际的对应物。</target>
        </trans-unit>
        <trans-unit id="5c6f17834ff35593c5226191e98557d99d755e77" translate="yes" xml:space="preserve">
          <source>Marks coroutine context element that intercepts coroutine continuations. The coroutines framework uses &lt;a href=&quot;-continuation-interceptor/-key&quot;&gt;ContinuationInterceptor.Key&lt;/a&gt; to retrieve the interceptor and intercepts all coroutine continuations with &lt;a href=&quot;-continuation-interceptor/intercept-continuation&quot;&gt;interceptContinuation&lt;/a&gt; invocations.</source>
          <target state="translated">标记拦截协程连续的协程上下文元素。协程框架使用&lt;a href=&quot;-continuation-interceptor/-key&quot;&gt;ContinuationInterceptor.Key&lt;/a&gt;来检索拦截器，并使用&lt;a href=&quot;-continuation-interceptor/intercept-continuation&quot;&gt;interceptContinuation&lt;/a&gt;调用来拦截所有协程连续。</target>
        </trans-unit>
        <trans-unit id="292a3151e7a72885408caf9ee437ad5d8673be4a" translate="yes" xml:space="preserve">
          <source>Marks coroutine context element that intercepts coroutine continuations. The coroutines framework uses &lt;a href=&quot;-key&quot;&gt;ContinuationInterceptor.Key&lt;/a&gt; to retrieve the interceptor and intercepts all coroutine continuations with &lt;a href=&quot;intercept-continuation&quot;&gt;interceptContinuation&lt;/a&gt; invocations.</source>
          <target state="translated">标记拦截协程连续的协程上下文元素。协程框架使用&lt;a href=&quot;-key&quot;&gt;ContinuationInterceptor.Key&lt;/a&gt;来检索拦截器，并使用&lt;a href=&quot;intercept-continuation&quot;&gt;interceptContinuation&lt;/a&gt;调用来拦截所有协程连续。</target>
        </trans-unit>
        <trans-unit id="5be31e799227d8931dded0eeace958d0a3e43418" translate="yes" xml:space="preserve">
          <source>Marks coroutine context element that intercepts coroutine continuations. The coroutines framework uses &lt;a href=&quot;../../kotlin.coroutines.experimental/-continuation-interceptor/-key&quot;&gt;ContinuationInterceptor.Key&lt;/a&gt; to retrieve the interceptor and intercepts all coroutine continuations with &lt;a href=&quot;../../kotlin.coroutines.experimental/-continuation-interceptor/intercept-continuation&quot;&gt;interceptContinuation&lt;/a&gt; invocations.</source>
          <target state="translated">标记拦截协程连续的协程上下文元素。协程框架使用&lt;a href=&quot;../../kotlin.coroutines.experimental/-continuation-interceptor/-key&quot;&gt;ContinuationInterceptor.Key&lt;/a&gt;来检索拦截器，并使用&lt;a href=&quot;../../kotlin.coroutines.experimental/-continuation-interceptor/intercept-continuation&quot;&gt;interceptContinuation&lt;/a&gt;调用来拦截所有协程连续。</target>
        </trans-unit>
        <trans-unit id="589152c67b668bc3a0e5e851927c4f25196aa066" translate="yes" xml:space="preserve">
          <source>Marks coroutine context element that intercepts coroutine continuations. The coroutines framework uses &lt;a href=&quot;../../kotlin.coroutines/-continuation-interceptor/-key&quot;&gt;ContinuationInterceptor.Key&lt;/a&gt; to retrieve the interceptor and intercepts all coroutine continuations with &lt;a href=&quot;../../kotlin.coroutines/-continuation-interceptor/intercept-continuation&quot;&gt;interceptContinuation&lt;/a&gt; invocations.</source>
          <target state="translated">标记拦截协程连续的协程上下文元素。协程框架使用&lt;a href=&quot;../../kotlin.coroutines/-continuation-interceptor/-key&quot;&gt;ContinuationInterceptor.Key&lt;/a&gt;来检索拦截器，并使用&lt;a href=&quot;../../kotlin.coroutines/-continuation-interceptor/intercept-continuation&quot;&gt;interceptContinuation&lt;/a&gt;调用来拦截所有协程连续。</target>
        </trans-unit>
        <trans-unit id="e74d580f7febe5c2f5fce47ebee5f4b2a5e537e3" translate="yes" xml:space="preserve">
          <source>Marks experimental JS export annotations.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2df77c28828a089a19fdffaa1789ccacc76664f7" translate="yes" xml:space="preserve">
          <source>Marks the API that is dependent on the experimental unsigned types, including those types themselves.</source>
          <target state="translated">标志着依赖于实验性无符号类型的API,包括这些类型本身。</target>
        </trans-unit>
        <trans-unit id="73273d6a95cad7e50a139041438fbf00005e8089" translate="yes" xml:space="preserve">
          <source>Marks the JVM backing field of the annotated property as &lt;code&gt;transient&lt;/code&gt;, meaning that it is not part of the default serialized form of the object.</source>
          <target state="translated">将带注释的属性的JVM支持字段标记为 &lt;code&gt;transient&lt;/code&gt; ，这意味着它不是对象的默认序列化形式的一部分。</target>
        </trans-unit>
        <trans-unit id="fd02a709ebd5dfcba6e63db7078d9717fce347a3" translate="yes" xml:space="preserve">
          <source>Marks the JVM backing field of the annotated property as &lt;code&gt;volatile&lt;/code&gt;, meaning that writes to this field are immediately made visible to other threads.</source>
          <target state="translated">将带注释的属性的JVM支持字段标记为 &lt;code&gt;volatile&lt;/code&gt; ，这意味着对该字段的写入将立即变为对其他线程可见。</target>
        </trans-unit>
        <trans-unit id="1c403a59019182391a8ff7eb648d56329fc1e05f" translate="yes" xml:space="preserve">
          <source>Marks the JVM method generated from the annotated function as &lt;code&gt;strictfp&lt;/code&gt;, meaning that the precision of floating point operations performed inside the method needs to be restricted in order to achieve better portability.</source>
          <target state="translated">将从带注释的函数生成的JVM方法标记为 &lt;code&gt;strictfp&lt;/code&gt; ，这意味着需要限制在该方法内部执行的浮点操作的精度，以实现更好的可移植性。</target>
        </trans-unit>
        <trans-unit id="58ecb1a8fc60ff73e8fc37346fd83ecb47a77bf8" translate="yes" xml:space="preserve">
          <source>Marks the JVM method generated from the annotated function as &lt;code&gt;synchronized&lt;/code&gt;, meaning that the method will be protected from concurrent execution by multiple threads by the monitor of the instance (or, for static methods, the class) on which the method is defined.</source>
          <target state="translated">将从带注释的函数生成的JVM方法标记为 &lt;code&gt;synchronized&lt;/code&gt; ，这意味着将通过定义该方法的实例（对于静态方法，为类）的监视器来防止该方法被多个线程并发执行。</target>
        </trans-unit>
        <trans-unit id="fb96fdd73420dc05c701eb6e0838bd95d38438a9" translate="yes" xml:space="preserve">
          <source>Marks the annotated declaration as deprecated.</source>
          <target state="translated">将注释的声明标记为废弃的。</target>
        </trans-unit>
        <trans-unit id="7d98c397e94ce7053df95bf37d1da503360432a5" translate="yes" xml:space="preserve">
          <source>Marks the annotated declaration as deprecated. In contrast to &lt;a href=&quot;-deprecated/index#kotlin.Deprecated&quot;&gt;Deprecated&lt;/a&gt;, severity of the reported diagnostic is not a constant value, but differs depending on the API version of the usage (the value of the &lt;code&gt;-api-version&lt;/code&gt; argument when compiling the module where the usage is located). If the API version is greater or equal than &lt;a href=&quot;-deprecated-since-kotlin/hidden-since#kotlin.DeprecatedSinceKotlin%24hiddenSince&quot;&gt;hiddenSince&lt;/a&gt;, the declaration will not be accessible from the code (as if it was deprecated with level &lt;a href=&quot;-deprecation-level/-h-i-d-d-e-n#kotlin.DeprecationLevel.HIDDEN&quot;&gt;DeprecationLevel.HIDDEN&lt;/a&gt;), otherwise if the API version is greater or equal than &lt;a href=&quot;-deprecated-since-kotlin/error-since#kotlin.DeprecatedSinceKotlin%24errorSince&quot;&gt;errorSince&lt;/a&gt;, the usage will be marked as an error (as with &lt;a href=&quot;-deprecation-level/-e-r-r-o-r#kotlin.DeprecationLevel.ERROR&quot;&gt;DeprecationLevel.ERROR&lt;/a&gt;), otherwise if the API version is greater or equal than &lt;a href=&quot;-deprecated-since-kotlin/warning-since#kotlin.DeprecatedSinceKotlin%24warningSince&quot;&gt;warningSince&lt;/a&gt;, the usage will be marked as a warning (as with &lt;a href=&quot;-deprecation-level/-w-a-r-n-i-n-g#kotlin.DeprecationLevel.WARNING&quot;&gt;DeprecationLevel.WARNING&lt;/a&gt;), otherwise the annotation is ignored.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="80f9c066c4fb389bf5a2648a88b9da8d8a5af0b6" translate="yes" xml:space="preserve">
          <source>Marks the annotated declaration as deprecated. In contrast to &lt;a href=&quot;../-deprecated/index#kotlin.Deprecated&quot;&gt;Deprecated&lt;/a&gt;, severity of the reported diagnostic is not a constant value, but differs depending on the API version of the usage (the value of the &lt;code&gt;-api-version&lt;/code&gt; argument when compiling the module where the usage is located). If the API version is greater or equal than &lt;a href=&quot;../-deprecated-since-kotlin/hidden-since#kotlin.DeprecatedSinceKotlin%24hiddenSince&quot;&gt;hiddenSince&lt;/a&gt;, the declaration will not be accessible from the code (as if it was deprecated with level &lt;a href=&quot;../-deprecation-level/-h-i-d-d-e-n#kotlin.DeprecationLevel.HIDDEN&quot;&gt;DeprecationLevel.HIDDEN&lt;/a&gt;), otherwise if the API version is greater or equal than &lt;a href=&quot;../-deprecated-since-kotlin/error-since#kotlin.DeprecatedSinceKotlin%24errorSince&quot;&gt;errorSince&lt;/a&gt;, the usage will be marked as an error (as with &lt;a href=&quot;../-deprecation-level/-e-r-r-o-r#kotlin.DeprecationLevel.ERROR&quot;&gt;DeprecationLevel.ERROR&lt;/a&gt;), otherwise if the API version is greater or equal than &lt;a href=&quot;../-deprecated-since-kotlin/warning-since#kotlin.DeprecatedSinceKotlin%24warningSince&quot;&gt;warningSince&lt;/a&gt;, the usage will be marked as a warning (as with &lt;a href=&quot;../-deprecation-level/-w-a-r-n-i-n-g#kotlin.DeprecationLevel.WARNING&quot;&gt;DeprecationLevel.WARNING&lt;/a&gt;), otherwise the annotation is ignored.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="849bb03707fb20c75be09bfab7269367951a2e2c" translate="yes" xml:space="preserve">
          <source>MatchGroup</source>
          <target state="translated">MatchGroup</target>
        </trans-unit>
        <trans-unit id="dca62bbed6a25edcb571ec2b8d04d93aa72d3b21" translate="yes" xml:space="preserve">
          <source>MatchGroupCollection</source>
          <target state="translated">MatchGroupCollection</target>
        </trans-unit>
        <trans-unit id="40ee7a3cd8703b1f6d5c39fe97ef7bdbddff913a" translate="yes" xml:space="preserve">
          <source>MatchNamedGroupCollection</source>
          <target state="translated">MatchNamedGroupCollection</target>
        </trans-unit>
        <trans-unit id="e5e10479d7e48ed2ed4d8e1de8fc8b3e40fd01eb" translate="yes" xml:space="preserve">
          <source>MatchResult</source>
          <target state="translated">MatchResult</target>
        </trans-unit>
        <trans-unit id="3edf0df49942da6d11a1a217e4d3af4a5a8e64f2" translate="yes" xml:space="preserve">
          <source>Math</source>
          <target state="translated">Math</target>
        </trans-unit>
        <trans-unit id="386de788c6f8f526adcdfcc95893611a4f0f2a05" translate="yes" xml:space="preserve">
          <source>Math operations in kotlin-stdlib</source>
          <target state="translated">kotlin-stdlib中的数学运算</target>
        </trans-unit>
        <trans-unit id="0ada0ff6418289ab78ea96388455f7b6c8654ca4" translate="yes" xml:space="preserve">
          <source>Mathematical functions and constants.</source>
          <target state="translated">数学函数和常数。</target>
        </trans-unit>
        <trans-unit id="6af37177e65c1a71744a7cb984d51ba2f07f5140" translate="yes" xml:space="preserve">
          <source>Maven</source>
          <target state="translated">Maven</target>
        </trans-unit>
        <trans-unit id="b522db69b358e8fce0593518fbe3b0d7db36d2d4" translate="yes" xml:space="preserve">
          <source>Maven configuration</source>
          <target state="translated">Maven配置</target>
        </trans-unit>
        <trans-unit id="71edee9db1ff5b8ff75c1bfdc3477115c9cadb2f" translate="yes" xml:space="preserve">
          <source>Max value</source>
          <target state="translated">最大值</target>
        </trans-unit>
        <trans-unit id="6f26174801b4fb329b7b4754a956851117212509" translate="yes" xml:space="preserve">
          <source>Maximum value a version component can have, a constant value 255.</source>
          <target state="translated">一个版本组件所能拥有的最大值,恒定值为255。</target>
        </trans-unit>
        <trans-unit id="258389887a049fd789e8d5c0611eb448fb932cc4" translate="yes" xml:space="preserve">
          <source>MediaDeviceInfo</source>
          <target state="translated">MediaDeviceInfo</target>
        </trans-unit>
        <trans-unit id="6134c6977e97c143c3e4282792a6fe2d4e4a8d3d" translate="yes" xml:space="preserve">
          <source>MediaDeviceKind</source>
          <target state="translated">MediaDeviceKind</target>
        </trans-unit>
        <trans-unit id="42773779c7725a712497e1de443b3526292ee7c5" translate="yes" xml:space="preserve">
          <source>MediaEncryptedEventInit</source>
          <target state="translated">MediaEncryptedEventInit</target>
        </trans-unit>
        <trans-unit id="5e9d9c4423f0ac299fce82e9517c3425a061ddb4" translate="yes" xml:space="preserve">
          <source>MediaError</source>
          <target state="translated">MediaError</target>
        </trans-unit>
        <trans-unit id="edc3252539f2977307059639af16d93b62f83e89" translate="yes" xml:space="preserve">
          <source>MediaKeyMessageEventInit</source>
          <target state="translated">MediaKeyMessageEventInit</target>
        </trans-unit>
        <trans-unit id="0f9940df0a60e74d9f81259c874d8fc5cf90b250" translate="yes" xml:space="preserve">
          <source>MediaKeyMessageType</source>
          <target state="translated">MediaKeyMessageType</target>
        </trans-unit>
        <trans-unit id="f6d29b82c487515b0ed4941f8440be7338b9cdd9" translate="yes" xml:space="preserve">
          <source>MediaKeySessionType</source>
          <target state="translated">MediaKeySessionType</target>
        </trans-unit>
        <trans-unit id="6a72b850014dcb01724de3815824e738f2a289e8" translate="yes" xml:space="preserve">
          <source>MediaKeyStatus</source>
          <target state="translated">MediaKeyStatus</target>
        </trans-unit>
        <trans-unit id="06b28afbee38c4e57833221839b448745bf0272f" translate="yes" xml:space="preserve">
          <source>MediaKeyStatusMap</source>
          <target state="translated">MediaKeyStatusMap</target>
        </trans-unit>
        <trans-unit id="334845d31e06fd797025ffec6b0e947ced1eee27" translate="yes" xml:space="preserve">
          <source>MediaKeySystemAccess</source>
          <target state="translated">MediaKeySystemAccess</target>
        </trans-unit>
        <trans-unit id="13b324678ad4a42d1cf13183ec5703ba89067f0a" translate="yes" xml:space="preserve">
          <source>MediaKeySystemConfiguration</source>
          <target state="translated">MediaKeySystemConfiguration</target>
        </trans-unit>
        <trans-unit id="261d7bee8c2a3f2851483973000c454b56a6d2f7" translate="yes" xml:space="preserve">
          <source>MediaKeySystemMediaCapability</source>
          <target state="translated">MediaKeySystemMediaCapability</target>
        </trans-unit>
        <trans-unit id="04bf6109f69f0241e714dae0a1bff955d8bb5503" translate="yes" xml:space="preserve">
          <source>MediaKeys</source>
          <target state="translated">MediaKeys</target>
        </trans-unit>
        <trans-unit id="0204337f58a70624acab6d8767bba63e305a6319" translate="yes" xml:space="preserve">
          <source>MediaKeysRequirement</source>
          <target state="translated">MediaKeysRequirement</target>
        </trans-unit>
        <trans-unit id="f30d349fe509ab2452d9ff5db776c749eb21115d" translate="yes" xml:space="preserve">
          <source>MediaList</source>
          <target state="translated">MediaList</target>
        </trans-unit>
        <trans-unit id="fb2396dadb0919fa005cf6b516e3b748e938e528" translate="yes" xml:space="preserve">
          <source>MediaProvider</source>
          <target state="translated">MediaProvider</target>
        </trans-unit>
        <trans-unit id="5264b922a464ea5a9f88144f8b72f9626c1db269" translate="yes" xml:space="preserve">
          <source>MediaQueryListEventInit</source>
          <target state="translated">MediaQueryListEventInit</target>
        </trans-unit>
        <trans-unit id="70dcd56d399d2e12aa2533dd163497d5ff6362fd" translate="yes" xml:space="preserve">
          <source>MediaStreamConstraints</source>
          <target state="translated">MediaStreamConstraints</target>
        </trans-unit>
        <trans-unit id="c74168a0d6b99bbcdaff6005366c94dc042ddd9e" translate="yes" xml:space="preserve">
          <source>MediaStreamTrackEventInit</source>
          <target state="translated">MediaStreamTrackEventInit</target>
        </trans-unit>
        <trans-unit id="f6268479064052c02a6fe8b1b48bf8011df3d770" translate="yes" xml:space="preserve">
          <source>MediaStreamTrackState</source>
          <target state="translated">MediaStreamTrackState</target>
        </trans-unit>
        <trans-unit id="10f95ad72ba533133d954c473a07f3f67fdac829" translate="yes" xml:space="preserve">
          <source>MediaTrackCapabilities</source>
          <target state="translated">MediaTrackCapabilities</target>
        </trans-unit>
        <trans-unit id="bb47b7b2d8ef429be15b6e0dad452a4f8b48f974" translate="yes" xml:space="preserve">
          <source>MediaTrackConstraintSet</source>
          <target state="translated">MediaTrackConstraintSet</target>
        </trans-unit>
        <trans-unit id="8054e6c6485f93790f303ed390e1cba5c2743911" translate="yes" xml:space="preserve">
          <source>MediaTrackConstraints</source>
          <target state="translated">MediaTrackConstraints</target>
        </trans-unit>
        <trans-unit id="43ae2bb87ab91212c29f9b3badd22fa54472dcc6" translate="yes" xml:space="preserve">
          <source>MediaTrackSettings</source>
          <target state="translated">MediaTrackSettings</target>
        </trans-unit>
        <trans-unit id="7e941f3e34c1287f6e0e3fa6973fe4daf92e6bf1" translate="yes" xml:space="preserve">
          <source>MediaTrackSupportedConstraints</source>
          <target state="translated">MediaTrackSupportedConstraints</target>
        </trans-unit>
        <trans-unit id="0821090b6a2b08e3c2088bad74f0cd7597a2e61c" translate="yes" xml:space="preserve">
          <source>MemScope</source>
          <target state="translated">MemScope</target>
        </trans-unit>
        <trans-unit id="13754495aca84346deb594b0d23bc4d086989ee4" translate="yes" xml:space="preserve">
          <source>Member Functions</source>
          <target state="translated">会员功能</target>
        </trans-unit>
        <trans-unit id="2675e87b859fb2d5772f0ea8bf6c203afefdde62" translate="yes" xml:space="preserve">
          <source>Member function names should use &lt;code&gt;lowerCamelCase&lt;/code&gt; instead of &lt;code&gt;snake_case&lt;/code&gt;.</source>
          <target state="translated">成员函数名称应使用 &lt;code&gt;lowerCamelCase&lt;/code&gt; 而不是 &lt;code&gt;snake_case&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="b217f7514e4e69fd38aa7c54a821e91e41f619c3" translate="yes" xml:space="preserve">
          <source>Member functions</source>
          <target state="translated">成员职能</target>
        </trans-unit>
        <trans-unit id="d58072c4501a38b0ae1c8099bd6324750503224c" translate="yes" xml:space="preserve">
          <source>Member functions are called with dot notation:</source>
          <target state="translated">成员函数用点符号调用。</target>
        </trans-unit>
        <trans-unit id="90302bd1ef8edadba09a04d671c6ada71d5d8a46" translate="yes" xml:space="preserve">
          <source>Member functions define operations that are essential for a collection type. For example, &lt;a href=&quot;../../api/latest/jvm/stdlib/kotlin.collections/-collection/index&quot;&gt;&lt;code&gt;Collection&lt;/code&gt;&lt;/a&gt; contains the function &lt;a href=&quot;../../api/latest/jvm/stdlib/kotlin.collections/-collection/is-empty&quot;&gt;&lt;code&gt;isEmpty()&lt;/code&gt;&lt;/a&gt; for checking its emptiness; &lt;a href=&quot;../../api/latest/jvm/stdlib/kotlin.collections/-list/index&quot;&gt;&lt;code&gt;List&lt;/code&gt;&lt;/a&gt; contains &lt;a href=&quot;../../api/latest/jvm/stdlib/kotlin.collections/-list/get&quot;&gt;&lt;code&gt;get()&lt;/code&gt;&lt;/a&gt; for index access to elements, and so on.</source>
          <target state="translated">成员函数定义对于集合类型必不可少的操作。例如，&lt;a href=&quot;../../api/latest/jvm/stdlib/kotlin.collections/-collection/index&quot;&gt; &lt;code&gt;Collection&lt;/code&gt; &lt;/a&gt;包含函数&lt;a href=&quot;../../api/latest/jvm/stdlib/kotlin.collections/-collection/is-empty&quot;&gt; &lt;code&gt;isEmpty()&lt;/code&gt; &lt;/a&gt;来检查其空度；&lt;a href=&quot;../../api/latest/jvm/stdlib/kotlin.collections/-list/index&quot;&gt; &lt;code&gt;List&lt;/code&gt; &lt;/a&gt;包含用于对元素进行索引访问的&lt;a href=&quot;../../api/latest/jvm/stdlib/kotlin.collections/-list/get&quot;&gt; &lt;code&gt;get()&lt;/code&gt; &lt;/a&gt;，依此类推。</target>
        </trans-unit>
        <trans-unit id="a569ddca50a19b2205ceb3e1f59db2a7ba968aef" translate="yes" xml:space="preserve">
          <source>Member properties and member functions inside a generic class may for the most part use the class' generic type parameters as if they were ordinary types, without having to redeclare them. It is also possible to make functions that take more generic parameters than the class does, and to make generic functions inside nongeneric classes, and to make generic top-level functions (which is what we'll do in the next example). Note the different placement of the generic type parameter in generic function declarations:</source>
          <target state="translated">通用类内部的成员属性和成员函数在大多数情况下可以像使用普通类型一样使用类的通用类型参数,而不必重新声明它们。也可以制作比类更多的泛型参数的函数,也可以在非泛型类内部制作泛型函数,还可以制作泛型顶层函数(这就是我们在下一个例子中要做的)。注意通用函数声明中通用类型参数的位置不同。</target>
        </trans-unit>
        <trans-unit id="74971806b05c2768bdffa67bcc7b89b958d7edea" translate="yes" xml:space="preserve">
          <source>Member references and reflection</source>
          <target state="translated">成员参考和思考</target>
        </trans-unit>
        <trans-unit id="10aac04b8647c134bc4873cf9a0d33a0bd4048e1" translate="yes" xml:space="preserve">
          <source>MemberAt</source>
          <target state="translated">MemberAt</target>
        </trans-unit>
        <trans-unit id="1cb449c1126609b4b41e1d87f65f0d7cd19b49b9" translate="yes" xml:space="preserve">
          <source>Members</source>
          <target state="translated">Members</target>
        </trans-unit>
        <trans-unit id="2fd5b3fb4a679664c9a47a448257d9fa802a22f3" translate="yes" xml:space="preserve">
          <source>Members of Objective-C categories and Swift extensions are imported to Kotlin as extensions. That's why these declarations can't be overridden in Kotlin. And the extension initializers aren't available as Kotlin constructors.</source>
          <target state="translated">Objective-C类别的成员和Swift扩展是作为扩展导入到Kotlin的。这就是为什么这些声明在Kotlin中不能被重写的原因。而且扩展初始化器也不能作为Kotlin构造函数使用。</target>
        </trans-unit>
        <trans-unit id="c590aa47cb148126a7aed2e0252e6e56de2e1fb5" translate="yes" xml:space="preserve">
          <source>Members of the companion object can be called by using simply the class name as the qualifier:</source>
          <target state="translated">Companion对象的成员可以简单地使用类名作为限定符来调用。</target>
        </trans-unit>
        <trans-unit id="b61b70edbe3a97caa2ecb5ac100b7aca209a1cba" translate="yes" xml:space="preserve">
          <source>Memory allocation</source>
          <target state="translated">内存分配</target>
        </trans-unit>
        <trans-unit id="0c2ee25c3007f8df17e0050402341b2f4ae697bc" translate="yes" xml:space="preserve">
          <source>Memory model binary was compiled with.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e73a4635af37ee3ef43681ca08ff16f60452ecfe" translate="yes" xml:space="preserve">
          <source>Memory model.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="69164a09919e64cc770d2e92a315c7be5fe9ce87" translate="yes" xml:space="preserve">
          <source>MemoryModel</source>
          <target state="translated">MemoryModel</target>
        </trans-unit>
        <trans-unit id="2a2bb3d6a7f5790d759cba72823f3811d734fe09" translate="yes" xml:space="preserve">
          <source>MessageChannel</source>
          <target state="translated">MessageChannel</target>
        </trans-unit>
        <trans-unit id="ccca7aad0aa3bbb87c9ea30bfca4cd685ee282a6" translate="yes" xml:space="preserve">
          <source>MessageEventInit</source>
          <target state="translated">MessageEventInit</target>
        </trans-unit>
        <trans-unit id="da50feb28afa8ee6b84decde6712247ff2db1356" translate="yes" xml:space="preserve">
          <source>Metacharacters or escape sequences in the input sequence will be given no special meaning.</source>
          <target state="translated">输入序列中的元字符或转义序列不会被赋予特殊意义。</target>
        </trans-unit>
        <trans-unit id="251edc0eb5a820646bda4e103f0f007fd55321f3" translate="yes" xml:space="preserve">
          <source>Metadata</source>
          <target state="translated">Metadata</target>
        </trans-unit>
        <trans-unit id="00c97618202a4d85cdcf254062dd76c688bb9937" translate="yes" xml:space="preserve">
          <source>Metadata in a custom format. The format may be different (or even absent) for different kinds.</source>
          <target state="translated">元数据采用自定义格式。不同种类的元数据的格式可能不同(甚至没有)。</target>
        </trans-unit>
        <trans-unit id="88306943fea7e76f9cd57cae0ea6d8b32d2e8434" translate="yes" xml:space="preserve">
          <source>Method</source>
          <target state="translated">Method</target>
        </trans-unit>
        <trans-unit id="6ef376dbda2a9dfd9fe8fb9172d6ea36380a325e" translate="yes" xml:space="preserve">
          <source>Method call formatting</source>
          <target state="translated">方法调用格式化</target>
        </trans-unit>
        <trans-unit id="3643c572e5a5065b656aa6b5fce445bafca060de" translate="yes" xml:space="preserve">
          <source>Method declarations</source>
          <target state="translated">方法声明</target>
        </trans-unit>
        <trans-unit id="6c23f25a80838dd8e19f20f6fec8854933be69db" translate="yes" xml:space="preserve">
          <source>Method names translation</source>
          <target state="translated">方法名称翻译</target>
        </trans-unit>
        <trans-unit id="88533fb91c329fcc07daac7abd293e3d2ef386bf" translate="yes" xml:space="preserve">
          <source>Methods &lt;code&gt;wait()&lt;/code&gt; and &lt;code&gt;notify()&lt;/code&gt; are not available on references of type &lt;code&gt;Any&lt;/code&gt;. Their usage is generally discouraged in favor of &lt;code&gt;java.util.concurrent&lt;/code&gt;. If you really need to call these methods, you can cast to &lt;code&gt;java.lang.Object&lt;/code&gt;:</source>
          <target state="translated">方法 &lt;code&gt;wait()&lt;/code&gt; 和 &lt;code&gt;notify()&lt;/code&gt; 在类型 &lt;code&gt;Any&lt;/code&gt; 的引用上不可用。通常不建议使用它们，而推荐使用 &lt;code&gt;java.util.concurrent&lt;/code&gt; 。如果确实需要调用这些方法，则可以强制转换为 &lt;code&gt;java.lang.Object&lt;/code&gt; ：</target>
        </trans-unit>
        <trans-unit id="04764bae2f3b42e32503d658246fd786e62d1716" translate="yes" xml:space="preserve">
          <source>Methods defined in &lt;code&gt;MyList&amp;lt;T&amp;gt;&lt;/code&gt; use &lt;code&gt;T&lt;/code&gt; as platform, i.e. it's possible to perform unsafe operation in Kotlin:</source>
          <target state="translated">&lt;code&gt;MyList&amp;lt;T&amp;gt;&lt;/code&gt; 定义的方法使用 &lt;code&gt;T&lt;/code&gt; 作为平台，即可以在Kotlin中执行不安全的操作：</target>
        </trans-unit>
        <trans-unit id="2362d4b5d61680189ee786359c95c772832ea599" translate="yes" xml:space="preserve">
          <source>Methods defined in &lt;code&gt;MyPureList&amp;lt;T&amp;gt;&lt;/code&gt; overriding methods in &lt;code&gt;MutableList&lt;/code&gt; use &lt;code&gt;T&lt;/code&gt; as non-platform types:</source>
          <target state="translated">在定义的方法 &lt;code&gt;MyPureList&amp;lt;T&amp;gt;&lt;/code&gt; 在覆盖方法 &lt;code&gt;MutableList&lt;/code&gt; 使用 &lt;code&gt;T&lt;/code&gt; 非平台类型：</target>
        </trans-unit>
        <trans-unit id="1643049f5673b4e1c5eb74d112c9611cf055d3c5" translate="yes" xml:space="preserve">
          <source>Methods returning void</source>
          <target state="translated">方法返回void</target>
        </trans-unit>
        <trans-unit id="a8027f1188b3014c0f8995cd7120023b72397d3d" translate="yes" xml:space="preserve">
          <source>Methods that follow the Java conventions for getters and setters (no-argument methods with names starting with &lt;code&gt;get&lt;/code&gt; and single-argument methods with names starting with &lt;code&gt;set&lt;/code&gt;) are represented as properties in Kotlin. &lt;code&gt;Boolean&lt;/code&gt; accessor methods (where the name of the getter starts with &lt;code&gt;is&lt;/code&gt; and the name of the setter starts with &lt;code&gt;set&lt;/code&gt;) are represented as properties which have the same name as the getter method.</source>
          <target state="translated">遵循Java的getter和setter约定的方法（名称以 &lt;code&gt;get&lt;/code&gt; 开头的无参数方法和名称以 &lt;code&gt;set&lt;/code&gt; 开头的单参数方法）在Kotlin中表示为属性。 &lt;code&gt;Boolean&lt;/code&gt; 访问器方法（getter的名称以 &lt;code&gt;is&lt;/code&gt; 开头，setter的名称以 &lt;code&gt;set&lt;/code&gt; 开头）表示为与getter方法具有相同名称的属性。</target>
        </trans-unit>
        <trans-unit id="a23dee2288fafb96e4e3f4b56c185b2062a8905b" translate="yes" xml:space="preserve">
          <source>Micronaut also has a lot of well-detailed &lt;a href=&quot;https://guides.micronaut.io/tags/kotlin.html&quot;&gt;guides&lt;/a&gt;, showing how you can build microservices in Kotlin.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2474109210e0ea672543f6c977728ae54b8f124d" translate="yes" xml:space="preserve">
          <source>Migrate the code with the help of the tooling</source>
          <target state="translated">在工具的帮助下迁移代码。</target>
        </trans-unit>
        <trans-unit id="708b9cf32b4bb9e8e85c01bf95c0ef78c92becb6" translate="yes" xml:space="preserve">
          <source>Migrating from Java</source>
          <target state="translated">从Java迁移</target>
        </trans-unit>
        <trans-unit id="b9d3a9e9670f7240a77d83260fefdcb2501bc774" translate="yes" xml:space="preserve">
          <source>Migrating to Kotlin</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f44d82dafb548c8ad9d6490ef0e69cd3d1ba217d" translate="yes" xml:space="preserve">
          <source>Migration to a new code style</source>
          <target state="translated">迁移到新的代码风格</target>
        </trans-unit>
        <trans-unit id="d0a1c8e409ae53cb281e66770ad717b9178d43ce" translate="yes" xml:space="preserve">
          <source>Migration to a new code style discussion</source>
          <target state="translated">迁移到新的代码风格的讨论</target>
        </trans-unit>
        <trans-unit id="1bd7ccbde8d3077fec1f549017e747393223a900" translate="yes" xml:space="preserve">
          <source>MimeType</source>
          <target state="translated">MimeType</target>
        </trans-unit>
        <trans-unit id="ed52d3a5f9993b67e83d292332a8f9a1d86ebf44" translate="yes" xml:space="preserve">
          <source>MimeTypeArray</source>
          <target state="translated">MimeTypeArray</target>
        </trans-unit>
        <trans-unit id="98f205e04abca4bbe7595051d07e6eb3a4abe953" translate="yes" xml:space="preserve">
          <source>Min value</source>
          <target state="translated">最小值</target>
        </trans-unit>
        <trans-unit id="222d1f694d764125a7a7a5786d11a04234b0be8d" translate="yes" xml:space="preserve">
          <source>Missing errors in class constructor&amp;rsquo;s &lt;code&gt;@get:&lt;/code&gt; annotations</source>
          <target state="translated">类构造函数的 &lt;code&gt;@get:&lt;/code&gt; 注释中缺少错误</target>
        </trans-unit>
        <trans-unit id="47e4750870ece5e5c348eda89bdc8e3fbb4c6cff" translate="yes" xml:space="preserve">
          <source>Missing getter-targeted annotations on annotation constructor parameters</source>
          <target state="translated">缺少了注解构造函数参数上的getter-targeted annotations。</target>
        </trans-unit>
        <trans-unit id="52b91c038ffc21a08d48959a44ba1c6fddb114f2" translate="yes" xml:space="preserve">
          <source>Mixed Java and Kotlin</source>
          <target state="translated">混合的Java和Kotlin</target>
        </trans-unit>
        <trans-unit id="86c40367cc1e1c53a8c10c73ada1f29fd66c1405" translate="yes" xml:space="preserve">
          <source>Mixing Java and Kotlin in one project</source>
          <target state="translated">在一个项目中混合使用Java和Kotlin。</target>
        </trans-unit>
        <trans-unit id="404ab93e44ed76b5232ab6931dd26299f542e43d" translate="yes" xml:space="preserve">
          <source>Modern debuggers provide several ways to set a breakpoint, see below for a tool-by-tool breakdown:</source>
          <target state="translated">现代调试器提供了几种设置断点的方法,请看下面的工具分解。</target>
        </trans-unit>
        <trans-unit id="5ba6ee64964304bc6c3c5424baba2b34cd73ea5d" translate="yes" xml:space="preserve">
          <source>Modifier Keywords</source>
          <target state="translated">修饰语关键词</target>
        </trans-unit>
        <trans-unit id="3a7ea294bf33134dce4b142b8b7182de29b978b2" translate="yes" xml:space="preserve">
          <source>Modifiers</source>
          <target state="translated">Modifiers</target>
        </trans-unit>
        <trans-unit id="42cd86d0e702bd27bcb835a0b162fb95197132a2" translate="yes" xml:space="preserve">
          <source>Modifies the value of the property.</source>
          <target state="translated">修改财产的价值。</target>
        </trans-unit>
        <trans-unit id="723a9a05eb17a0ec38db3b56d4b0ea18be0358a6" translate="yes" xml:space="preserve">
          <source>Module and Package Documentation</source>
          <target state="translated">模块和包装文件</target>
        </trans-unit>
        <trans-unit id="ed8def074470e81fe96b7cdd8aac08ec3fff3bc6" translate="yes" xml:space="preserve">
          <source>Module system used by the Kotlin Standard Library</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ec446b6ebb15f053c4868dce62c242283cf04673" translate="yes" xml:space="preserve">
          <source>Module-wide markers</source>
          <target state="translated">全模块标记</target>
        </trans-unit>
        <trans-unit id="738fa33a16ad3f30c737fafc42459e4a03f30470" translate="yes" xml:space="preserve">
          <source>Module-wide use</source>
          <target state="translated">全模块使用</target>
        </trans-unit>
        <trans-unit id="04e9462c0ff02bb9032b92abd45881a3c7e15fb7" translate="yes" xml:space="preserve">
          <source>Modules</source>
          <target state="translated">Modules</target>
        </trans-unit>
        <trans-unit id="d62ac0bf808c354dcb97b6778e8aaae4635a7c9f" translate="yes" xml:space="preserve">
          <source>More details and advanced use-cases are presented in the</source>
          <target state="translated">更多的细节和先进的使用案例将被介绍在以下内容中</target>
        </trans-unit>
        <trans-unit id="91aa2ec21d9f2bac781876761e04b45d52ef74fe" translate="yes" xml:space="preserve">
          <source>More documentation on the types mapping can be found in the &lt;a href=&quot;../../reference/native/objc_interop&quot;&gt;Objective-C Interop&lt;/a&gt; article.</source>
          <target state="translated">有关类型映射的更多文档可以在&lt;a href=&quot;../../reference/native/objc_interop&quot;&gt;Objective-C Interop&lt;/a&gt;文章中找到。</target>
        </trans-unit>
        <trans-unit id="b5c09addc98121bf0f9aad66c228b38f1430aecf" translate="yes" xml:space="preserve">
          <source>More information about all other types mapping details can be found in the &lt;a href=&quot;../../reference/native/objc_interop&quot;&gt;Objective-C Interop&lt;/a&gt; documentation article</source>
          <target state="translated">有关所有其他类型映射详细信息的更多信息，请参见&lt;a href=&quot;../../reference/native/objc_interop&quot;&gt;Objective-C Interop&lt;/a&gt;文档文章。</target>
        </trans-unit>
        <trans-unit id="b061f32f9ec8d43b64e344ed5485c4d9f7caf378" translate="yes" xml:space="preserve">
          <source>More tips and tricks</source>
          <target state="translated">更多提示和技巧</target>
        </trans-unit>
        <trans-unit id="e9792383929cbb7b1909aa88012c0f218c0c51f8" translate="yes" xml:space="preserve">
          <source>Most built-in types are comparable:</source>
          <target state="translated">大多数内置类型都是可以比较的。</target>
        </trans-unit>
        <trans-unit id="f9f0f6eb5ddb49db8f8ae5d8eb9cab0176d9ace5" translate="yes" xml:space="preserve">
          <source>Most of the functionality of signed types are supported for unsigned counterparts too:</source>
          <target state="translated">符号类型的大部分功能也支持无符号类型。</target>
        </trans-unit>
        <trans-unit id="cb91c080f7b68ae6a8bbb2b702b1059a13b12c96" translate="yes" xml:space="preserve">
          <source>Most of the operators that are recognized by Kotlin's syntax have predefined textual names and are available for implementation in your classes, just like you can do with Python's double-underscore operator names. For example, the binary &lt;code&gt;+&lt;/code&gt; operator is called &lt;code&gt;plus&lt;/code&gt;. Similarly to the infix example, if you do this inside a &lt;code&gt;Person&lt;/code&gt; class that has got a &lt;code&gt;name&lt;/code&gt; property:</source>
          <target state="translated">Kotlin语法可以识别的大多数运算符都有预定义的文本名称，可以在您的类中实现，就像您可以使用Python的双下划线运算符名称一样。例如，二进制 &lt;code&gt;+&lt;/code&gt; 运算符称为 &lt;code&gt;plus&lt;/code&gt; 。与infix示例类似，如果在具有 &lt;code&gt;name&lt;/code&gt; 属性的 &lt;code&gt;Person&lt;/code&gt; 类中执行此操作：</target>
        </trans-unit>
        <trans-unit id="ef0792097f4b2ac5841fae23eda77fe48d6f36a5" translate="yes" xml:space="preserve">
          <source>Most of the time we define extensions on the top level - directly under packages:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3edbae2a158aaf025c7463b2890fdba1f30e0552" translate="yes" xml:space="preserve">
          <source>Most of the time we define extensions on the top level, i.e. directly under packages:</source>
          <target state="translated">大多数情况下,我们在顶层定义扩展,即直接在包下定义。</target>
        </trans-unit>
        <trans-unit id="d6a06199cc127e571d3588aef63c79108675eabc" translate="yes" xml:space="preserve">
          <source>Motivation</source>
          <target state="translated">Motivation</target>
        </trans-unit>
        <trans-unit id="e5f579f208747beb161cf00d47a3a0c086f81dbe" translate="yes" xml:space="preserve">
          <source>MouseEventInit</source>
          <target state="translated">MouseEventInit</target>
        </trans-unit>
        <trans-unit id="19754c53e87ae21affdf187e21540a29ec7c1fa2" translate="yes" xml:space="preserve">
          <source>Much like we reference an input element, we can access other elements on the page, casting them to the appropriate types.</source>
          <target state="translated">就像我们引用一个输入元素一样,我们可以访问页面上的其他元素,将它们转换为适当的类型。</target>
        </trans-unit>
        <trans-unit id="85e61eaa48d6be8dae51bf80212b85c25bd2b301" translate="yes" xml:space="preserve">
          <source>Much the same way as regular properties, the properties declared in the primary constructor can be mutable (&lt;em&gt;var&lt;/em&gt;) or read-only (&lt;em&gt;val&lt;/em&gt;).</source>
          <target state="translated">与常规属性几乎相同，在主构造函数中声明的属性可以是可变的（&lt;em&gt;var&lt;/em&gt;）或只读的（&lt;em&gt;val&lt;/em&gt;）。</target>
        </trans-unit>
        <trans-unit id="bf10a69dc3111e2f0b70a7a3b5fcde0eb5de58f0" translate="yes" xml:space="preserve">
          <source>Multiplatform &lt;code&gt;Random&lt;/code&gt;</source>
          <target state="translated">多平台 &lt;code&gt;Random&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="4d27d69385dad1ecc38485d70b593ff3be6501e1" translate="yes" xml:space="preserve">
          <source>Multiplatform Gradle Project</source>
          <target state="translated">多平台Gradle项目</target>
        </trans-unit>
        <trans-unit id="b476304566bdb2c8284f4c5fabc7060e30563d1f" translate="yes" xml:space="preserve">
          <source>Multiplatform Kotlin Library</source>
          <target state="translated">多平台Kotlin库</target>
        </trans-unit>
        <trans-unit id="594342484b7fa8723561cd74a56adf5ed5eecd56" translate="yes" xml:space="preserve">
          <source>Multiplatform Kotlin library</source>
          <target state="translated">多平台Kotlin库</target>
        </trans-unit>
        <trans-unit id="abdd2b4ca66085ea36500996c307f3c54d5bee0a" translate="yes" xml:space="preserve">
          <source>Multiplatform Libraries</source>
          <target state="translated">多平台图书馆</target>
        </trans-unit>
        <trans-unit id="49bdb75dde412727c37ad9cfdc25f84b9800e1ee" translate="yes" xml:space="preserve">
          <source>Multiplatform Programming</source>
          <target state="translated">多平台编程</target>
        </trans-unit>
        <trans-unit id="8831ff8afbd886576a6d26e7a38c2a2945370e5f" translate="yes" xml:space="preserve">
          <source>Multiplatform Project: iOS and Android</source>
          <target state="translated">多平台项目:iOS和Android</target>
        </trans-unit>
        <trans-unit id="5cff52171a748c24fbdfa2675a9193d1e17c8b90" translate="yes" xml:space="preserve">
          <source>Multiplatform Projects</source>
          <target state="translated">多平台项目</target>
        </trans-unit>
        <trans-unit id="30ece0cd52430a4d7a64233600e1721dbcbbe2bf" translate="yes" xml:space="preserve">
          <source>Multiplatform Projects (experimental)</source>
          <target state="translated">多平台项目(试验性)</target>
        </trans-unit>
        <trans-unit id="0198731e127deda4e2a86e65a7c2c819b3c35ae8" translate="yes" xml:space="preserve">
          <source>Multiplatform documentation</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8f424e82581dd0443f6b1cfe8761404b9445347c" translate="yes" xml:space="preserve">
          <source>Multiplatform programming</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dce33eff96bb2026a847a2a553a328f131ebdfe5" translate="yes" xml:space="preserve">
          <source>Multiplatform projects</source>
          <target state="translated">多平台项目</target>
        </trans-unit>
        <trans-unit id="48104e942ea0eb10a48e224f17bd6af63a0f01ad" translate="yes" xml:space="preserve">
          <source>Multiplatform projects are a new &lt;strong&gt;experimental&lt;/strong&gt; feature in Kotlin 1.2, allowing you to reuse code between target platforms supported by Kotlin &amp;ndash; JVM, JavaScript and (in the future) Native. In a multiplatform project, you have three kinds of modules:</source>
          <target state="translated">多平台项目是Kotlin 1.2 中的一项新的&lt;strong&gt;实验性&lt;/strong&gt;功能，可让您在Kotlin支持的目标平台（JVM，JavaScript和（将来）本机）之间重用代码。在多平台项目中，您具有三种模块：</target>
        </trans-unit>
        <trans-unit id="56c55ee3ca3b8c8dc0a5fe577d6b3cbe7b6bf668" translate="yes" xml:space="preserve">
          <source>Multiplatform projects are an experimental feature in Kotlin 1.2 and 1.3. All of the language and tooling features described in this document are subject to change in future Kotlin versions.</source>
          <target state="translated">多平台项目是Kotlin 1.2和1.3中的一个实验性功能。本文档中描述的所有语言和工具特性在未来的Kotlin版本中可能会发生变化。</target>
        </trans-unit>
        <trans-unit id="7e1b4e8641ccf9f8084108431aa99a93d1fa43a8" translate="yes" xml:space="preserve">
          <source>Multiplatform projects are in &lt;a href=&quot;evolution/components-stability&quot;&gt;Alpha&lt;/a&gt;. Language features and tooling may change in future Kotlin versions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a47f8ee1f56229364d475a5b4995314b84d9fc4e" translate="yes" xml:space="preserve">
          <source>Multiple coroutines may receive from the same channel, distributing work between themselves. Let us start with a producer coroutine that is periodically producing integers (ten numbers per second):</source>
          <target state="translated">多个coroutine可以从同一个通道接收,在它们之间分配工作。让我们从一个周期性产生整数(每秒十个数字)的生产者coroutine开始。</target>
        </trans-unit>
        <trans-unit id="264744e655406950142eec2a53dc539eed8a5fd7" translate="yes" xml:space="preserve">
          <source>Multiple coroutines may send to the same channel. For example, let us have a channel of strings, and a suspending function that repeatedly sends a specified string to this channel with a specified delay:</source>
          <target state="translated">多个coroutine可以向同一个通道发送。例如,让我们有一个字符串的通道,以及一个暂停函数,以指定的延迟反复向这个通道发送指定的字符串。</target>
        </trans-unit>
        <trans-unit id="9d79d3118202ae1d668fb56014f9cb20b36159e5" translate="yes" xml:space="preserve">
          <source>Multiplies this value by the other value.</source>
          <target state="translated">将此值乘以另一个值。</target>
        </trans-unit>
        <trans-unit id="f342e79f479c63b3a6f1a4035901daea4fbf30b9" translate="yes" xml:space="preserve">
          <source>MustBeDocumented</source>
          <target state="translated">MustBeDocumented</target>
        </trans-unit>
        <trans-unit id="07b00606431523d4ebea7077981984b607d973e8" translate="yes" xml:space="preserve">
          <source>Mutable closure variables</source>
          <target state="translated">可变封闭变量</target>
        </trans-unit>
        <trans-unit id="e427611262df2a9a50ee135e0fceaecfa0c80c7f" translate="yes" xml:space="preserve">
          <source>Mutable concurrently accessible data buffer. Could be accessed from several workers simulteniously.</source>
          <target state="translated">可变的并发访问数据缓冲区。可由多个工作者同时访问。</target>
        </trans-unit>
        <trans-unit id="46fb0a3dd2497d28351f3b643be68bf38c4dcf04" translate="yes" xml:space="preserve">
          <source>Mutable iterators</source>
          <target state="translated">可变迭代器</target>
        </trans-unit>
        <trans-unit id="9b7b2307fe92cd7c012fa39281f7b175b249dd6e" translate="yes" xml:space="preserve">
          <source>MutableCollection</source>
          <target state="translated">MutableCollection</target>
        </trans-unit>
        <trans-unit id="42724994b4f6f408170a142d4bb3a6bfa7198849" translate="yes" xml:space="preserve">
          <source>MutableCollection.iterator</source>
          <target state="translated">MutableCollection.iterator</target>
        </trans-unit>
        <trans-unit id="1a5033d42eefb58adbea823fa5255b0aed1d662e" translate="yes" xml:space="preserve">
          <source>MutableData</source>
          <target state="translated">MutableData</target>
        </trans-unit>
        <trans-unit id="5e9e097c14385f745d368faabbd3854a67b05b46" translate="yes" xml:space="preserve">
          <source>MutableEntry</source>
          <target state="translated">MutableEntry</target>
        </trans-unit>
        <trans-unit id="8a4f4102af09300cf876f9a6460618caaa96575a" translate="yes" xml:space="preserve">
          <source>MutableIterable</source>
          <target state="translated">MutableIterable</target>
        </trans-unit>
        <trans-unit id="a652e5941b9ff793ccc9e659b88bf1a8f5227c3a" translate="yes" xml:space="preserve">
          <source>MutableIterator</source>
          <target state="translated">MutableIterator</target>
        </trans-unit>
        <trans-unit id="49e02d16b11d601b6e4902190c5bca350a9202fc" translate="yes" xml:space="preserve">
          <source>MutableList</source>
          <target state="translated">MutableList</target>
        </trans-unit>
        <trans-unit id="4c650d57f6075cf5940d694638ac9e4ec8e77bc6" translate="yes" xml:space="preserve">
          <source>MutableListIterator</source>
          <target state="translated">MutableListIterator</target>
        </trans-unit>
        <trans-unit id="f20ff48f1ceb7119a78b4b13a251cf2c7628b7ac" translate="yes" xml:space="preserve">
          <source>MutableMap</source>
          <target state="translated">MutableMap</target>
        </trans-unit>
        <trans-unit id="c0a289c1f11c0248072d86bca1271c7246850c9c" translate="yes" xml:space="preserve">
          <source>MutableSet</source>
          <target state="translated">MutableSet</target>
        </trans-unit>
        <trans-unit id="0b5d551add97f7ca81d05d95c5a9f114421d02ad" translate="yes" xml:space="preserve">
          <source>Mutating the backing field of a read-only property by assigning &lt;code&gt;field = ...&lt;/code&gt; in the custom getter has been deprecated, with a warning in Kotlin 1.2 and an error in Kotlin 1.3.</source>
          <target state="translated">通过在自定义getter中分配 &lt;code&gt;field = ...&lt;/code&gt; 来更改只读属性的后备字段已被弃用，在Kotlin 1.2中有警告，在Kotlin 1.3中有错误。</target>
        </trans-unit>
        <trans-unit id="d9e09542ba7562ba06b3618d585343bb16717cc0" translate="yes" xml:space="preserve">
          <source>MutationObserver</source>
          <target state="translated">MutationObserver</target>
        </trans-unit>
        <trans-unit id="bf760ce86085d0556b58a1fb2886ad6300cf25c9" translate="yes" xml:space="preserve">
          <source>MutationObserverInit</source>
          <target state="translated">MutationObserverInit</target>
        </trans-unit>
        <trans-unit id="902e161ec72b34937173fb6ae6f1167c6c4b933a" translate="yes" xml:space="preserve">
          <source>MutationRecord</source>
          <target state="translated">MutationRecord</target>
        </trans-unit>
        <trans-unit id="bd89464f515bc7c1945f885ef807721ee91c256b" translate="yes" xml:space="preserve">
          <source>Mutual exclusion</source>
          <target state="translated">相互排斥</target>
        </trans-unit>
        <trans-unit id="f2a0cc7430b6ab201c123d93595f5409656e44aa" translate="yes" xml:space="preserve">
          <source>Mutual exclusion solution to the problem is to protect all modifications of the shared state with a &lt;em&gt;critical section&lt;/em&gt; that is never executed concurrently. In a blocking world you'd typically use &lt;code&gt;synchronized&lt;/code&gt; or &lt;code&gt;ReentrantLock&lt;/code&gt; for that. Coroutine's alternative is called &lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines.sync/-mutex/index.html&quot;&gt;Mutex&lt;/a&gt;. It has &lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines.sync/-mutex/lock.html&quot;&gt;lock&lt;/a&gt; and &lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines.sync/-mutex/unlock.html&quot;&gt;unlock&lt;/a&gt; functions to delimit a critical section. The key difference is that &lt;code&gt;Mutex.lock()&lt;/code&gt; is a suspending function. It does not block a thread.</source>
          <target state="translated">解决该问题的互斥解决方案是使用永远不会同时执行的&lt;em&gt;关键部分&lt;/em&gt;来保护共享状态的所有修改。在阻止世界你通常使用 &lt;code&gt;synchronized&lt;/code&gt; 或 &lt;code&gt;ReentrantLock&lt;/code&gt; 的了点。协程的替代品称为&lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines.sync/-mutex/index.html&quot;&gt;Mutex&lt;/a&gt;。它具有&lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines.sync/-mutex/lock.html&quot;&gt;锁定&lt;/a&gt;和&lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines.sync/-mutex/unlock.html&quot;&gt;解锁&lt;/a&gt;功能来界定关键部分。关键区别在于 &lt;code&gt;Mutex.lock()&lt;/code&gt; 是一个暂停函数。它不会阻塞线程。</target>
        </trans-unit>
        <trans-unit id="e6a87480ef216b736cda78776d20937ae965a5a1" translate="yes" xml:space="preserve">
          <source>My first coroutine</source>
          <target state="translated">我的第一个coroutine</target>
        </trans-unit>
        <trans-unit id="08d2e98e6754af941484848930ccbaddfefe13d6" translate="yes" xml:space="preserve">
          <source>N/A</source>
          <target state="translated">N/A</target>
        </trans-unit>
        <trans-unit id="ac5af3d78fb9a248a0c8878049fa45cb722c5609" translate="yes" xml:space="preserve">
          <source>NEGATIVE_INFINITY</source>
          <target state="translated">NEGATIVE_INFINITY</target>
        </trans-unit>
        <trans-unit id="0654a028e5aea48c8fbb09871b8f397a186c883b" translate="yes" xml:space="preserve">
          <source>NONE</source>
          <target state="translated">NONE</target>
        </trans-unit>
        <trans-unit id="19b5db1284eda5fe55423cf6ff666bbd91d48790" translate="yes" xml:space="preserve">
          <source>NONSPACING_MARK</source>
          <target state="translated">NONSPACING_MARK</target>
        </trans-unit>
        <trans-unit id="a711913b07f219db3720165b1cc42ba33ab84d07" translate="yes" xml:space="preserve">
          <source>NON_SPACING_MARK</source>
          <target state="translated">NON_SPACING_MARK</target>
        </trans-unit>
        <trans-unit id="b12d9f3adce16f3c42e185c9323b0f2c05d0d02a" translate="yes" xml:space="preserve">
          <source>NOTE: Octal literals are not supported.</source>
          <target state="translated">注意:不支持八进制字样。</target>
        </trans-unit>
        <trans-unit id="c820cc676951d2a6935d55d3c748ef2d4229e0ef" translate="yes" xml:space="preserve">
          <source>NSArray</source>
          <target state="translated">NSArray</target>
        </trans-unit>
        <trans-unit id="850a25e67ede967c8226916d9435ee3fa9fe30c0" translate="yes" xml:space="preserve">
          <source>NSDictionary</source>
          <target state="translated">NSDictionary</target>
        </trans-unit>
        <trans-unit id="88142d93bc155af7430eda23b521adf5177befb3" translate="yes" xml:space="preserve">
          <source>NSMutableArray</source>
          <target state="translated">NSMutableArray</target>
        </trans-unit>
        <trans-unit id="093cc39541f1d88e9c8d7815809e04abdc468222" translate="yes" xml:space="preserve">
          <source>NSMutableDictionary</source>
          <target state="translated">NSMutableDictionary</target>
        </trans-unit>
        <trans-unit id="6f353d0803276b29f669e8e00d5912e0735d118f" translate="yes" xml:space="preserve">
          <source>NSMutableString</source>
          <target state="translated">NSMutableString</target>
        </trans-unit>
        <trans-unit id="21b6f3d1ecc982003af64b405b1aec1eeffcbd63" translate="yes" xml:space="preserve">
          <source>NSNumber</source>
          <target state="translated">NSNumber</target>
        </trans-unit>
        <trans-unit id="6049050154f9c68876906ec983b62a8beb7bfd87" translate="yes" xml:space="preserve">
          <source>NSSet</source>
          <target state="translated">NSSet</target>
        </trans-unit>
        <trans-unit id="f7fd9c68f804acda665d2ab082217bb1583318f2" translate="yes" xml:space="preserve">
          <source>NaN</source>
          <target state="translated">NaN</target>
        </trans-unit>
        <trans-unit id="709a23220f2c3d64d1e1d6d18c4d5280f8d82fca" translate="yes" xml:space="preserve">
          <source>Name</source>
          <target state="translated">Name</target>
        </trans-unit>
        <trans-unit id="ed2a70884b6ea61a0ea998c7fe86ebc6c43c39e1" translate="yes" xml:space="preserve">
          <source>Name of the module being compiled</source>
          <target state="translated">正在编译的模块名称</target>
        </trans-unit>
        <trans-unit id="bd9b36517a10ed825bfe97b96fd841ffbfd62dda" translate="yes" xml:space="preserve">
          <source>Name of the worker, as specified in &lt;a href=&quot;start&quot;&gt;Worker.start&lt;/a&gt; or &quot;worker $id&quot; by default,</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4efab9c724a7839dff5f1e0118b1a9b242fe8997" translate="yes" xml:space="preserve">
          <source>Name of this parameter as it was declared in the source code, or &lt;code&gt;null&lt;/code&gt; if the parameter has no name or its name is not available at runtime. Examples of nameless parameters include &lt;code&gt;this&lt;/code&gt; instance for member functions, extension receiver for extension functions or properties, parameters of Java methods compiled without the debug information, and others.</source>
          <target state="translated">在源代码中声明的此参数的名称；如果该参数没有名称或在运行时不可用，则为 &lt;code&gt;null&lt;/code&gt; 。无名参数的示例包括成员函数的 &lt;code&gt;this&lt;/code&gt; 实例，扩展函数或属性的扩展接收器，不带调试信息而编译的Java方法的参数以及其他。</target>
        </trans-unit>
        <trans-unit id="9e0268761f1a46defda13527e24a738481491b83" translate="yes" xml:space="preserve">
          <source>Name translation</source>
          <target state="translated">名称翻译</target>
        </trans-unit>
        <trans-unit id="80a1546459fb296b75e903b673f8cc0ad0b7638a" translate="yes" xml:space="preserve">
          <source>Named Arguments</source>
          <target state="translated">已命名参数</target>
        </trans-unit>
        <trans-unit id="f2ab34573e168918bf72dc73ec10c4b5b1ba3f14" translate="yes" xml:space="preserve">
          <source>Named arguments</source>
          <target state="translated">已命名的参数</target>
        </trans-unit>
        <trans-unit id="7eee412e511b81f184e8fdcdd0d16df4490ee091" translate="yes" xml:space="preserve">
          <source>NamedNodeMap</source>
          <target state="translated">NamedNodeMap</target>
        </trans-unit>
        <trans-unit id="89ed0927522265d199caf008b2d935b4dc13e4ec" translate="yes" xml:space="preserve">
          <source>Namely, &lt;code&gt;Grouping&lt;/code&gt; supports the following operations:</source>
          <target state="translated">即， &lt;code&gt;Grouping&lt;/code&gt; 支持以下操作：</target>
        </trans-unit>
        <trans-unit id="ce7873d11ca1350ea35c4e7edcc86d0f3faedfbb" translate="yes" xml:space="preserve">
          <source>Names for backing properties</source>
          <target state="translated">支持属性的名称</target>
        </trans-unit>
        <trans-unit id="d5e90b6eaa5ac7d68bfe0de19720901740a9662f" translate="yes" xml:space="preserve">
          <source>Names for test methods</source>
          <target state="translated">试验方法的名称</target>
        </trans-unit>
        <trans-unit id="1bbe1b5bbc9b48ae056a0ba828b7773769b4e6a7" translate="yes" xml:space="preserve">
          <source>Names in links are resolved using the same rules as if the name was used inside the element being documented. In particular, this means that if you have imported a name into the current file, you don't need to fully qualify it when you use it in a KDoc comment.</source>
          <target state="translated">链接中的名称的解析规则与该名称在被记录的元素中使用的规则相同。特别是,这意味着如果你已经将一个名字导入到当前文件中,当你在KDoc注释中使用它时,你不需要对它进行完全限定。</target>
        </trans-unit>
        <trans-unit id="c5380f68245bbc672ad92afb09b8fb6715ad3ca6" translate="yes" xml:space="preserve">
          <source>Names of classes and objects start with an upper case letter and use camel humps:</source>
          <target state="translated">类和对象的名称以大写字母开头,使用驼峰。</target>
        </trans-unit>
        <trans-unit id="3b4a6dab1202620b73c1005110fe77d753a54e9f" translate="yes" xml:space="preserve">
          <source>Names of classes and objects start with an upper case letter and use the camel case:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fc15464a07c43531a73eacebb7c301c643be9755" translate="yes" xml:space="preserve">
          <source>Names of constants (properties marked with &lt;code&gt;const&lt;/code&gt;, or top-level or object &lt;code&gt;val&lt;/code&gt; properties with no custom &lt;code&gt;get&lt;/code&gt; function that hold deeply immutable data) should use uppercase underscore-separated names:</source>
          <target state="translated">常量名称（用 &lt;code&gt;const&lt;/code&gt; 标记的属性，或没有自定义 &lt;code&gt;get&lt;/code&gt; 函数的顶级或对象 &lt;code&gt;val&lt;/code&gt; 属性，这些属性不保存深度​​不可变的数据）应使用大写的下划线分隔名称：</target>
        </trans-unit>
        <trans-unit id="ed152e23d368497078b7ae5dc12a67a09aef9537" translate="yes" xml:space="preserve">
          <source>Names of functions, properties and local variables start with a lower case letter and use camel humps and no underscores:</source>
          <target state="translated">函数、属性和局部变量的名称以小写字母开头,使用驼峰,不使用下划线。</target>
        </trans-unit>
        <trans-unit id="1e715a573269457e03280d22e2a0d8e880e4fdae" translate="yes" xml:space="preserve">
          <source>Names of functions, properties and local variables start with a lower case letter and use the camel case and no underscores:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2fe2ff19a7f565c3d30edceae570abf2351b799b" translate="yes" xml:space="preserve">
          <source>Names of packages are always lower case and do not use underscores (&lt;code&gt;org.example.myproject&lt;/code&gt;). Using multi-word names is generally discouraged, but if you do need to use multiple words, you can either simply concatenate them together or use camel humps (&lt;code&gt;org.example.myProject&lt;/code&gt;).</source>
          <target state="translated">软件包名称始终为小写，并且不使用下划线（ &lt;code&gt;org.example.myproject&lt;/code&gt; ）。通常不建议使用多个单词的名称，但是如果您确实需要使用多个单词，则可以将它们简单地串联在一起，也可以使用驼峰（ &lt;code&gt;org.example.myProject&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="d506a4b97208834d8b60a4f447f3486fac1cf5be" translate="yes" xml:space="preserve">
          <source>Names of packages are always lower case and do not use underscores (&lt;code&gt;org.example.project&lt;/code&gt;). Using multi-word names is generally discouraged, but if you do need to use multiple words, you can either simply concatenate them together or use the camel case (&lt;code&gt;org.example.myProject&lt;/code&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7f7adf5dd484e8eda6819e4b4ab1a277a17337ee" translate="yes" xml:space="preserve">
          <source>Names of properties holding references to singleton objects can use the same naming style as &lt;code&gt;object&lt;/code&gt; declarations:</source>
          <target state="translated">持有对单例对象的引用的属性名称可以使用与 &lt;code&gt;object&lt;/code&gt; 声明相同的命名方式：</target>
        </trans-unit>
        <trans-unit id="ae79cc54e87e697302be7b45dcff0dc1ad4a5a71" translate="yes" xml:space="preserve">
          <source>Names of top-level or object properties which hold objects with behavior or mutable data should use camel-case names:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2dd1c430f56a1096d7535c6bff1f0b002bb217ee" translate="yes" xml:space="preserve">
          <source>Names of top-level or object properties which hold objects with behavior or mutable data should use regular camel-hump names:</source>
          <target state="translated">持有具有行为或可变数据的对象的顶层或对象属性的名称应使用常规的驼峰名称。</target>
        </trans-unit>
        <trans-unit id="a821637ed465037f50fb45146c7157533ce303ab" translate="yes" xml:space="preserve">
          <source>Naming coroutines for debugging</source>
          <target state="translated">命名用于调试的例程</target>
        </trans-unit>
        <trans-unit id="b8f89bc873847bc6acb441471008e2ef77f271a2" translate="yes" xml:space="preserve">
          <source>Naming rules</source>
          <target state="translated">命名规则</target>
        </trans-unit>
        <trans-unit id="4fc6e7f740abb8af896ebedebf941a3f8d7076b5" translate="yes" xml:space="preserve">
          <source>Native</source>
          <target state="translated">Native</target>
        </trans-unit>
        <trans-unit id="712b0ca62af66efef9be01024a01163935118cd1" translate="yes" xml:space="preserve">
          <source>NativeFreeablePlacement</source>
          <target state="translated">NativeFreeablePlacement</target>
        </trans-unit>
        <trans-unit id="8c2ed68939229f0bed6cd8b6f2cb9306658a5c17" translate="yes" xml:space="preserve">
          <source>NativePlacement</source>
          <target state="translated">NativePlacement</target>
        </trans-unit>
        <trans-unit id="f6500269f9c3fb94b4438bc913d694314febde22" translate="yes" xml:space="preserve">
          <source>NativePointed</source>
          <target state="translated">NativePointed</target>
        </trans-unit>
        <trans-unit id="82e059ceb59aa7b7713c457045493d8d28dcc3f4" translate="yes" xml:space="preserve">
          <source>NativePtr</source>
          <target state="translated">NativePtr</target>
        </trans-unit>
        <trans-unit id="f504a9f397b7b30ca39f0ef1407b932940292f78" translate="yes" xml:space="preserve">
          <source>Natural order</source>
          <target state="translated">自然秩序</target>
        </trans-unit>
        <trans-unit id="c8e6f949b8ada118fdafbdc6ee8783d697f007cb" translate="yes" xml:space="preserve">
          <source>Navigator</source>
          <target state="translated">Navigator</target>
        </trans-unit>
        <trans-unit id="e7b5edc7e8cb311a0b039335c594c9a957eb3175" translate="yes" xml:space="preserve">
          <source>NavigatorConcurrentHardware</source>
          <target state="translated">NavigatorConcurrentHardware</target>
        </trans-unit>
        <trans-unit id="c539be135337dd03c6301959fad0ce1bee475889" translate="yes" xml:space="preserve">
          <source>NavigatorContentUtils</source>
          <target state="translated">NavigatorContentUtils</target>
        </trans-unit>
        <trans-unit id="00b43738cf147df0c752dcea119b953d47ded336" translate="yes" xml:space="preserve">
          <source>NavigatorCookies</source>
          <target state="translated">NavigatorCookies</target>
        </trans-unit>
        <trans-unit id="ca09397d83fa076ca8fa71c95007223165d66fb5" translate="yes" xml:space="preserve">
          <source>NavigatorID</source>
          <target state="translated">NavigatorID</target>
        </trans-unit>
        <trans-unit id="1c556456dba6623478e38282faadace5b5f02feb" translate="yes" xml:space="preserve">
          <source>NavigatorLanguage</source>
          <target state="translated">NavigatorLanguage</target>
        </trans-unit>
        <trans-unit id="b3ab2a10f83370ceafad9f996d8048d28d1a1363" translate="yes" xml:space="preserve">
          <source>NavigatorOnLine</source>
          <target state="translated">NavigatorOnLine</target>
        </trans-unit>
        <trans-unit id="e94d6507f620430ae9754053564c70782f33c7c9" translate="yes" xml:space="preserve">
          <source>NavigatorPlugins</source>
          <target state="translated">NavigatorPlugins</target>
        </trans-unit>
        <trans-unit id="e7f4b2c609e0e06e378710e78e2e3f9dbec6df11" translate="yes" xml:space="preserve">
          <source>Negative values show that it's less than the argument.</source>
          <target state="translated">负值表明它比论点少。</target>
        </trans-unit>
        <trans-unit id="789280e01339d5a915f0345cf138b9b4fb941c8e" translate="yes" xml:space="preserve">
          <source>Nested and Inner Classes</source>
          <target state="translated">嵌套类和内部类</target>
        </trans-unit>
        <trans-unit id="ee69ace2d0864bd815e214e20536f1f61364fc0f" translate="yes" xml:space="preserve">
          <source>Nested classifiers in enum entries</source>
          <target state="translated">嵌套在枚举条目中的分类器</target>
        </trans-unit>
        <trans-unit id="40c58381d790a3e7eec655ca2a16667d8a074dd3" translate="yes" xml:space="preserve">
          <source>Nested declarations in annotation classes</source>
          <target state="translated">注释类中的嵌套声明</target>
        </trans-unit>
        <trans-unit id="d053911ed6d5cc20ee675fd6a4520e78c20b1efb" translate="yes" xml:space="preserve">
          <source>Neutral bidirectional character type &quot;B&quot; in the Unicode specification.</source>
          <target state="translated">Unicode规范中的中性双向字符类型 &quot;B&quot;。</target>
        </trans-unit>
        <trans-unit id="8fd58ea9d9361ae87799e3e0adb497216a8850cd" translate="yes" xml:space="preserve">
          <source>Neutral bidirectional character type &quot;ON&quot; in the Unicode specification.</source>
          <target state="translated">Unicode规范中的中性双向字符类型 &quot;ON&quot;。</target>
        </trans-unit>
        <trans-unit id="cc8492cfce3dced2f8758c8c41b89e84144de788" translate="yes" xml:space="preserve">
          <source>Neutral bidirectional character type &quot;S&quot; in the Unicode specification.</source>
          <target state="translated">Unicode规范中的中性双向字符类型 &quot;S&quot;。</target>
        </trans-unit>
        <trans-unit id="61ee633fcd6ff884b460c34fd4f698e42b8d1f57" translate="yes" xml:space="preserve">
          <source>Neutral bidirectional character type &quot;WS&quot; in the Unicode specification.</source>
          <target state="translated">Unicode规范中的中性双向字符类型 &quot;WS&quot;。</target>
        </trans-unit>
        <trans-unit id="9ac5f98640f23386ec33233fa4af214ae29bb68c" translate="yes" xml:space="preserve">
          <source>Never equal to null: for any non-null value &lt;code&gt;x&lt;/code&gt;, &lt;code&gt;x.equals(null)&lt;/code&gt; should return false.</source>
          <target state="translated">永不等于null：对于任何非null值 &lt;code&gt;x&lt;/code&gt; ， &lt;code&gt;x.equals(null)&lt;/code&gt; 应该返回false。</target>
        </trans-unit>
        <trans-unit id="c8ca579cfa2a0bc063bd07e3a4d9c7f65e8e3087" translate="yes" xml:space="preserve">
          <source>Never put a space after &lt;code&gt;(&lt;/code&gt;, &lt;code&gt;[&lt;/code&gt;, or before &lt;code&gt;]&lt;/code&gt;, &lt;code&gt;)&lt;/code&gt;.</source>
          <target state="translated">永远不要把后面输入一个空格 &lt;code&gt;(&lt;/code&gt; ， &lt;code&gt;[&lt;/code&gt; ，或之前 &lt;code&gt;]&lt;/code&gt; ， &lt;code&gt;)&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="9294e60ab9df0dbecb3a72a47335eee294748f65" translate="yes" xml:space="preserve">
          <source>Never put a space around &lt;code&gt;.&lt;/code&gt; or &lt;code&gt;?.&lt;/code&gt;: &lt;code&gt;foo.bar().filter { it &amp;gt; 2 }.joinToString()&lt;/code&gt;, &lt;code&gt;foo?.bar()&lt;/code&gt;</source>
          <target state="translated">切勿在周围留出空间 &lt;code&gt;.&lt;/code&gt; 或 &lt;code&gt;?.&lt;/code&gt; ： &lt;code&gt;foo.bar().filter { it &amp;gt; 2 }.joinToString()&lt;/code&gt; ， &lt;code&gt;foo?.bar()&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="989c5da0440d6ef3c75ca61d82d832246ce632de" translate="yes" xml:space="preserve">
          <source>New Kotlin/JS IR compiler</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="845d99d67846936e2a2ecffc0c1f73a93b077848" translate="yes" xml:space="preserve">
          <source>New extensions for &lt;code&gt;Iterable&amp;lt;T&amp;gt;&lt;/code&gt;, &lt;code&gt;Sequence&amp;lt;T&amp;gt;&lt;/code&gt;, and &lt;code&gt;CharSequence&lt;/code&gt; cover such use cases as buffering or batch processing (&lt;code&gt;chunked&lt;/code&gt;), sliding window and computing sliding average (&lt;code&gt;windowed&lt;/code&gt;) , and processing pairs of subsequent items (&lt;code&gt;zipWithNext&lt;/code&gt;):</source>
          <target state="translated">&lt;code&gt;Iterable&amp;lt;T&amp;gt;&lt;/code&gt; ， &lt;code&gt;Sequence&amp;lt;T&amp;gt;&lt;/code&gt; 和 &lt;code&gt;CharSequence&lt;/code&gt; 的新扩展涵盖了以下用例：缓冲或批处理（ &lt;code&gt;chunked&lt;/code&gt; ），滑动窗口和计算滑动平均值（ &lt;code&gt;windowed&lt;/code&gt; ），以及处理成对的后续项（ &lt;code&gt;zipWithNext&lt;/code&gt; ）：</target>
        </trans-unit>
        <trans-unit id="e22e233ab95d5952f18b874d9870e1b80280d15d" translate="yes" xml:space="preserve">
          <source>New functions were added for converting &lt;code&gt;Double&lt;/code&gt; and &lt;code&gt;Float&lt;/code&gt; to and from their bit representations:</source>
          <target state="translated">添加了用于将 &lt;code&gt;Double&lt;/code&gt; 和 &lt;code&gt;Float&lt;/code&gt; 与它们的位表示形式相互转换的新功能：</target>
        </trans-unit>
        <trans-unit id="1c41e8d2c414e76e3966946fcc4d1e55e43e96ed" translate="yes" xml:space="preserve">
          <source>New to Kotlin? Take a look at the &lt;a href=&quot;../tutorials/getting-started&quot;&gt;Getting Started&lt;/a&gt; page.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="28dcc6d65c266a50c3f667c9e5ea8aa135aa58a6" translate="yes" xml:space="preserve">
          <source>New to Kotlin? Take a look at the &lt;a href=&quot;basic-syntax&quot;&gt;Getting Started&lt;/a&gt; page.</source>
          <target state="translated">Kotlin的新手？查看&lt;a href=&quot;basic-syntax&quot;&gt;入门&lt;/a&gt;页面。</target>
        </trans-unit>
        <trans-unit id="e9559254cbe41a97686cb7a5c40de455ecdf8ee6" translate="yes" xml:space="preserve">
          <source>New to Kotlin? Visit &lt;a href=&quot;../tutorials/getting-started&quot;&gt;Getting started with Kotlin&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3f170caead65df254d786032a409a6f6d204bca6" translate="yes" xml:space="preserve">
          <source>Next Steps</source>
          <target state="translated">下一步工作</target>
        </trans-unit>
        <trans-unit id="5079a9846101e11db84a1abb592a9473e268055f" translate="yes" xml:space="preserve">
          <source>Next open a new terminal and install Kotlin with:</source>
          <target state="translated">接下来打开一个新的终端,安装Kotlin与。</target>
        </trans-unit>
        <trans-unit id="2f460c75911314c0c9543c3367959a31445cb463" translate="yes" xml:space="preserve">
          <source>Next, let's include the following line of code into the &lt;code&gt;MainActivity&lt;/code&gt; class from the &lt;code&gt;/app/src/main/java/&amp;lt;package&amp;gt;/MainActivity.kt&lt;/code&gt; file, to the end of the &lt;code&gt;onCreate&lt;/code&gt; method:</source>
          <target state="translated">接下来，让我们从 &lt;code&gt;/app/src/main/java/&amp;lt;package&amp;gt;/MainActivity.kt&lt;/code&gt; 文件到 &lt;code&gt;onCreate&lt;/code&gt; 方法的末尾，将以下代码行包含到 &lt;code&gt;MainActivity&lt;/code&gt; 类中：</target>
        </trans-unit>
        <trans-unit id="61e1f7fc790c5246a6e519f4f67f422c4a517358" translate="yes" xml:space="preserve">
          <source>Next, we need to create the &lt;code&gt;SharedCode/build.gradle&lt;/code&gt; file with the following content:</source>
          <target state="translated">接下来，我们需要创建具有以下内容的 &lt;code&gt;SharedCode/build.gradle&lt;/code&gt; 文件：</target>
        </trans-unit>
        <trans-unit id="fba44f74cfbe24d927a6f2e32c74f105a6d9ca00" translate="yes" xml:space="preserve">
          <source>Next: Annotations &amp;rarr;</source>
          <target state="translated">下一页：注释&amp;rarr;</target>
        </trans-unit>
        <trans-unit id="00ef744e43f0f9ea134186c2ef008876b94cfb5d" translate="yes" xml:space="preserve">
          <source>Next: Classes &amp;rarr;</source>
          <target state="translated">下一页：课程&amp;rarr;</target>
        </trans-unit>
        <trans-unit id="c8735b85302131b9db681cecd1fb40aa277a0558" translate="yes" xml:space="preserve">
          <source>Next: Collections &amp;rarr;</source>
          <target state="translated">下一页：集合&amp;rarr;</target>
        </trans-unit>
        <trans-unit id="07999039cc4614cf9d9c83d8a64e7926f8829364" translate="yes" xml:space="preserve">
          <source>Next: Compiling and running &amp;rarr;</source>
          <target state="translated">下一页：编译并运行&amp;rarr;</target>
        </trans-unit>
        <trans-unit id="f20d28acc929c74946791930cf9c56d2978b64a8" translate="yes" xml:space="preserve">
          <source>Next: Conditionals &amp;rarr;</source>
          <target state="translated">下一个：条件&amp;rarr;</target>
        </trans-unit>
        <trans-unit id="840074b0ba8fd90b4e90aa33d45718551b373169" translate="yes" xml:space="preserve">
          <source>Next: Declaring variables &amp;rarr;</source>
          <target state="translated">下一页：声明变量&amp;rarr;</target>
        </trans-unit>
        <trans-unit id="cce5126b0175141ca7a8267a7936ebe65fe68d5f" translate="yes" xml:space="preserve">
          <source>Next: Documentation &amp;rarr;</source>
          <target state="translated">下一页：文档&amp;rarr;</target>
        </trans-unit>
        <trans-unit id="fa55701df6604b3cecc0d604af09a04554d557b6" translate="yes" xml:space="preserve">
          <source>Next: Exceptions &amp;rarr;</source>
          <target state="translated">下一页：例外&amp;rarr;</target>
        </trans-unit>
        <trans-unit id="6b6aa34eef4e603a14fc427c78ce11728dd25836" translate="yes" xml:space="preserve">
          <source>Next: Extension functions/properties &amp;rarr;</source>
          <target state="translated">下一页：扩展功能/属性&amp;rarr;</target>
        </trans-unit>
        <trans-unit id="085547cea36d9036af28992fd35c78130fafdd20" translate="yes" xml:space="preserve">
          <source>Next: File I/O &amp;rarr;</source>
          <target state="translated">下一页：文件I / O&amp;rarr;</target>
        </trans-unit>
        <trans-unit id="1ad7d1fc04a3f8f5bb3171b2738d368b2e7962ea" translate="yes" xml:space="preserve">
          <source>Next: Functional programming &amp;rarr;</source>
          <target state="translated">下一页：函数式编程&amp;rarr;</target>
        </trans-unit>
        <trans-unit id="4ca230bdec76005c5c8ecf036e517045996d632a" translate="yes" xml:space="preserve">
          <source>Next: Functions &amp;rarr;</source>
          <target state="translated">下一页：功能&amp;rarr;</target>
        </trans-unit>
        <trans-unit id="ee174e846c5088dfbb38266ba627304b28a4e778" translate="yes" xml:space="preserve">
          <source>Next: Generics &amp;rarr;</source>
          <target state="translated">下一页：泛型&amp;rarr;</target>
        </trans-unit>
        <trans-unit id="1fc3a42a52feb37755a354083cafdc34a3336119" translate="yes" xml:space="preserve">
          <source>Next: Hello World &amp;rarr;</source>
          <target state="translated">下一个：Hello World&amp;rarr;</target>
        </trans-unit>
        <trans-unit id="3e18f658842ac7800584f5830d0086c6615ba81e" translate="yes" xml:space="preserve">
          <source>Next: Inheritance &amp;rarr;</source>
          <target state="translated">下一页：继承&amp;rarr;</target>
        </trans-unit>
        <trans-unit id="e300f7cf6a03c09bab1b47c326855a60fe6e07fb" translate="yes" xml:space="preserve">
          <source>Next: Loops &amp;rarr;</source>
          <target state="translated">下一页：循环&amp;rarr;</target>
        </trans-unit>
        <trans-unit id="42aae1e29d68a1d88913d08cee33e89180a579d7" translate="yes" xml:space="preserve">
          <source>Next: Member references and reflection &amp;rarr;</source>
          <target state="translated">下一页：成员参考和反思&amp;rarr;</target>
        </trans-unit>
        <trans-unit id="47130dd2717d7971c3c94623669be8f3f6e6f3ff" translate="yes" xml:space="preserve">
          <source>Next: Null safety &amp;rarr;</source>
          <target state="translated">下一页：空安全&amp;rarr;</target>
        </trans-unit>
        <trans-unit id="86e91a1d2169b2b6d5f0e4158807082816cf024d" translate="yes" xml:space="preserve">
          <source>Next: Objects and companion objects &amp;rarr;</source>
          <target state="translated">下一页：对象和伴随对象&amp;rarr;</target>
        </trans-unit>
        <trans-unit id="6bfa5e253a9933523c52548db5718fffcec08ff4" translate="yes" xml:space="preserve">
          <source>Next: Packages and imports &amp;rarr;</source>
          <target state="translated">下一页：包装和进口&amp;rarr;</target>
        </trans-unit>
        <trans-unit id="61b315e1a975491d53d3e93505ae2e73a35eccf9" translate="yes" xml:space="preserve">
          <source>Next: Primitive data types and their limitations &amp;rarr;</source>
          <target state="translated">Next：原始数据类型及其局限性&amp;rarr;</target>
        </trans-unit>
        <trans-unit id="a8e3f58e4df0923f458764df8d805bc1daaebc52" translate="yes" xml:space="preserve">
          <source>Next: Scoped resource usage &amp;rarr;</source>
          <target state="translated">Next：范围资源使用&amp;rarr;</target>
        </trans-unit>
        <trans-unit id="d22ef24051b74c0f8f3a98dbd34b162df22e8d8a" translate="yes" xml:space="preserve">
          <source>Next: Strings &amp;rarr;</source>
          <target state="translated">下一页：字符串&amp;rarr;</target>
        </trans-unit>
        <trans-unit id="df94caa7ffe6e8dba6f94ac077da12da6df4dd88" translate="yes" xml:space="preserve">
          <source>Next: Visibility modifiers &amp;rarr;</source>
          <target state="translated">下一页：可见性修改器&amp;rarr;</target>
        </trans-unit>
        <trans-unit id="dd6dd817ee9557c6ebd9ce223abe7e65e35724c3" translate="yes" xml:space="preserve">
          <source>Nice utility functions</source>
          <target state="translated">漂亮的实用功能</target>
        </trans-unit>
        <trans-unit id="816c52fd2bdd94a63cd0944823a6c0aa9384c103" translate="yes" xml:space="preserve">
          <source>No</source>
          <target state="translated">No</target>
        </trans-unit>
        <trans-unit id="fc6d6d07a9da4b1cf8d3f863c9932b05d0b9d378" translate="yes" xml:space="preserve">
          <source>No &lt;code&gt;EXPRESSION&lt;/code&gt; and &lt;code&gt;FILE&lt;/code&gt; among &lt;a href=&quot;../../api/latest/jvm/stdlib/kotlin.annotation/-annotation-target/index&quot;&gt;targets&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;../../api/latest/jvm/stdlib/kotlin.annotation/-annotation-target/index&quot;&gt;目标&lt;/a&gt;之间没有 &lt;code&gt;EXPRESSION&lt;/code&gt; 和 &lt;code&gt;FILE&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="d50a5c00dba30dbb17216b740546f411fd49910a" translate="yes" xml:space="preserve">
          <source>No custom getter</source>
          <target state="translated">没有自定义获取器</target>
        </trans-unit>
        <trans-unit id="c2792086f80dff691fc70c60e9944bd70ee578bb" translate="yes" xml:space="preserve">
          <source>No locks are used to synchronize an access to the &lt;a href=&quot;../-lazy/index&quot;&gt;Lazy&lt;/a&gt; instance value; if the instance is accessed from multiple threads, its behavior is undefined.</source>
          <target state="translated">不使用锁来同步对&lt;a href=&quot;../-lazy/index&quot;&gt;Lazy&lt;/a&gt;实例值的访问。如果从多个线程访问该实例，则其行为是不确定的。</target>
        </trans-unit>
        <trans-unit id="1576fb8454236b0d4fa99182ffbcc64b6805f9d7" translate="yes" xml:space="preserve">
          <source>No need to mark the Application class as &lt;em&gt;open&lt;/em&gt; since we are using the &lt;em&gt;kotlin-spring&lt;/em&gt; Gradle plugin which does that automatically.</source>
          <target state="translated">无需将Application类标记为已&lt;em&gt;打开，&lt;/em&gt;因为我们使用的是自动完成功能的&lt;em&gt;kotlin-spring&lt;/em&gt; Gradle插件。</target>
        </trans-unit>
        <trans-unit id="1ea178000db803133ca4ed5bf0f26cf40a2ac141" translate="yes" xml:space="preserve">
          <source>No parameters.</source>
          <target state="translated">没有参数。</target>
        </trans-unit>
        <trans-unit id="a39dbb3db1c73d98fb6e9bf0a6cc7fe2780640aa" translate="yes" xml:space="preserve">
          <source>No raw types</source>
          <target state="translated">无原始类型</target>
        </trans-unit>
        <trans-unit id="4512f94421443be3bb6fe68bb037823683ccfd0a" translate="yes" xml:space="preserve">
          <source>No-arg compiler plugin</source>
          <target state="translated">无参数编译器插件</target>
        </trans-unit>
        <trans-unit id="ec11a5bdeaa38cafa1809cd0b1418fa7f8f3cfef" translate="yes" xml:space="preserve">
          <source>No. Kotlin lets you choose between generating Java 6 and Java 8 compatible bytecode. More optimal byte code may be generated for higher versions of the platform.</source>
          <target state="translated">Kotlin允许您选择生成Java 6和Java 8兼容的字节码。对于更高版本的平台,可能会生成更优化的字节码。</target>
        </trans-unit>
        <trans-unit id="ce3234172e6888dbe6cf68e5d69aca93bdbdb6aa" translate="yes" xml:space="preserve">
          <source>No: called without the context object</source>
          <target state="translated">否:在没有上下文对象的情况下调用</target>
        </trans-unit>
        <trans-unit id="44924246111ca028f4b377861fa8b1a56b2f8f3f" translate="yes" xml:space="preserve">
          <source>No: takes the context object as an argument.</source>
          <target state="translated">否:将上下文对象作为参数。</target>
        </trans-unit>
        <trans-unit id="23a71e363ee25bc12526201fd5e1559555edeab5" translate="yes" xml:space="preserve">
          <source>NoSuchElementException</source>
          <target state="translated">NoSuchElementException</target>
        </trans-unit>
        <trans-unit id="9a296716d89fec45e837ec162f0a3cdfae0666f6" translate="yes" xml:space="preserve">
          <source>NoSuchFileException</source>
          <target state="translated">NoSuchFileException</target>
        </trans-unit>
        <trans-unit id="8e965431f22047ddfc939473709e81428fafe4f0" translate="yes" xml:space="preserve">
          <source>NoSuchPropertyException</source>
          <target state="translated">NoSuchPropertyException</target>
        </trans-unit>
        <trans-unit id="dd82911bf9c2f7cf6fe3c3a3a0486e6fd4980949" translate="yes" xml:space="preserve">
          <source>NoWhenBranchMatchedException</source>
          <target state="translated">NoWhenBranchMatchedException</target>
        </trans-unit>
        <trans-unit id="6d1452836a5e358d27de613d82985d8f206e4345" translate="yes" xml:space="preserve">
          <source>NodeFilter</source>
          <target state="translated">NodeFilter</target>
        </trans-unit>
        <trans-unit id="749f705e68c34826a7cc3dffa5cbbe3e73f820de" translate="yes" xml:space="preserve">
          <source>NodeIterator</source>
          <target state="translated">NodeIterator</target>
        </trans-unit>
        <trans-unit id="05a2a8746fe10231011b4d6850be527a41c1c732" translate="yes" xml:space="preserve">
          <source>NodeList</source>
          <target state="translated">NodeList</target>
        </trans-unit>
        <trans-unit id="683af661ab161f85e9822c648db026a9cf30dda6" translate="yes" xml:space="preserve">
          <source>Non-constant vararg annotation parameters</source>
          <target state="translated">非常数的vararg注释参数</target>
        </trans-unit>
        <trans-unit id="dc9767217a1c7b0bf421fbdc439c549407505217" translate="yes" xml:space="preserve">
          <source>Non-existent type correction</source>
          <target state="translated">不存在的类型校正</target>
        </trans-unit>
        <trans-unit id="fe155a80a88ca53a5855fdd7ccb55154dece22f7" translate="yes" xml:space="preserve">
          <source>Non-external classes can't be extended by external classes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4faaccd91d30b37f731dad2f02cd8a91e9099b87" translate="yes" xml:space="preserve">
          <source>Non-local returns</source>
          <target state="translated">非本地回返</target>
        </trans-unit>
        <trans-unit id="92dc2c3bbe1e4d97caf60f89e03fd837acb72669" translate="yes" xml:space="preserve">
          <source>Non-private fields</source>
          <target state="translated">非私人领域</target>
        </trans-unit>
        <trans-unit id="f8f526d37ae54edc0292fa3b9fb52e0ef28cf4f3" translate="yes" xml:space="preserve">
          <source>Non-propagating use</source>
          <target state="translated">非繁殖性使用</target>
        </trans-unit>
        <trans-unit id="806c74a6dd444e7b581fe8d0651c3b583f7e4a35" translate="yes" xml:space="preserve">
          <source>NonDocumentTypeChildNode</source>
          <target state="translated">NonDocumentTypeChildNode</target>
        </trans-unit>
        <trans-unit id="928c9a9956e3637b60b5e9617db297b95e7290fd" translate="yes" xml:space="preserve">
          <source>NonElementParentNode</source>
          <target state="translated">NonElementParentNode</target>
        </trans-unit>
        <trans-unit id="d75dfc52cb45227dc75a26a76fe24ef6aeb82f70" translate="yes" xml:space="preserve">
          <source>Normal functions (not marked as inline) cannot have reified parameters. A type that does not have a run-time representation (e.g. a non-reified type parameter or a fictitious type like &lt;code&gt;Nothing&lt;/code&gt;) cannot be used as an argument for a reified type parameter.</source>
          <target state="translated">普通功能（未标记为内联）不能具有统一的参数。没有运行时表示形式的类型（例如，未归类的类型参数或虚构的类型，如 &lt;code&gt;Nothing&lt;/code&gt; ）不能用作归一化类型参数的参数。</target>
        </trans-unit>
        <trans-unit id="49a45a50e6244c47619f28727155a0cbe41bd131" translate="yes" xml:space="preserve">
          <source>Normal methods can be overridden using the &lt;code&gt;override&lt;/code&gt; Kotlin keyword. In this case the overriding method must have the same parameter names as the overridden one.</source>
          <target state="translated">普通方法可以使用 &lt;code&gt;override&lt;/code&gt; Kotlin关键字来覆盖。在这种情况下，覆盖方法必须具有与被覆盖方法相同的参数名称。</target>
        </trans-unit>
        <trans-unit id="a916e7bdcd294dc74af71b748cdce7d82df98e31" translate="yes" xml:space="preserve">
          <source>Normally, if you write a Kotlin function with default parameter values, it will be visible in Java only as a full signature, with all parameters present. If you wish to expose multiple overloads to Java callers, you can use the &lt;a href=&quot;../../api/latest/jvm/stdlib/kotlin.jvm/-jvm-overloads/index&quot;&gt;&lt;code&gt;@JvmOverloads&lt;/code&gt;&lt;/a&gt; annotation.</source>
          <target state="translated">通常，如果您使用默认参数值编写Kotlin函数，则该函数在Java中仅作为具有所有参数存在的完整签名可见。如果希望向Java调用者公开多个重载，则可以使用&lt;a href=&quot;../../api/latest/jvm/stdlib/kotlin.jvm/-jvm-overloads/index&quot;&gt; &lt;code&gt;@JvmOverloads&lt;/code&gt; &lt;/a&gt;批注。</target>
        </trans-unit>
        <trans-unit id="6a89db40e0b8cfbd047b44012190c470a3ee8af7" translate="yes" xml:space="preserve">
          <source>Normally, properties declared as having a non-null type must be initialized in the constructor. However, fairly often this is not convenient. For example, properties can be initialized through dependency injection, or in the setup method of a unit test. In this case, you cannot supply a non-null initializer in the constructor, but you still want to avoid null checks when referencing the property inside the body of a class.</source>
          <target state="translated">通常,声明为非空类型的属性必须在构造函数中初始化。然而,这并不方便。例如,属性可以通过依赖注入或在单元测试的setup方法中进行初始化。在这种情况下,你不能在构造函数中提供一个非空的初始化器,但你仍然希望在类的主体中引用属性时避免空检查。</target>
        </trans-unit>
        <trans-unit id="a967d31a488ea79d5210d74fd176b0b854f6d231" translate="yes" xml:space="preserve">
          <source>Not only classes can have type parameters. Functions can, too. Type parameters are placed &lt;strong&gt;before&lt;/strong&gt; the name of the function:</source>
          <target state="translated">不仅类可以具有类型参数。功能也可以。类型参数放置&lt;strong&gt;在&lt;/strong&gt;函数名称&lt;strong&gt;之前&lt;/strong&gt;：</target>
        </trans-unit>
        <trans-unit id="2efce3f5aa2c271d194d1082031602e01c017249" translate="yes" xml:space="preserve">
          <source>Not use any members that take a star-projected type as a parameter</source>
          <target state="translated">不使用任何以星形投影类型为参数的成员。</target>
        </trans-unit>
        <trans-unit id="68b62df2b207d9543eb97cef507795cf7a5eb731" translate="yes" xml:space="preserve">
          <source>Not-null assertion operator</source>
          <target state="translated">非空断言运算符</target>
        </trans-unit>
        <trans-unit id="8850b3bd61499741c05bd500ea7929ed489941ca" translate="yes" xml:space="preserve">
          <source>NotImplementedError</source>
          <target state="translated">NotImplementedError</target>
        </trans-unit>
        <trans-unit id="0525b1fa9e28d14aa40cc8644228138fdab333ad" translate="yes" xml:space="preserve">
          <source>Notation for Platform Types</source>
          <target state="translated">平台类型的符号</target>
        </trans-unit>
        <trans-unit id="346c210a245c6f4ac5e207e281e87f32eaf27522" translate="yes" xml:space="preserve">
          <source>Note how &lt;a href=&quot;../reference/properties#late-initialized-properties-and-variables&quot;&gt;the lateinit modifier&lt;/a&gt; allows to declare a non-null type initialized after the object is created (after the constructor call). Without &lt;code&gt;lateinit&lt;/code&gt; you'd have to declare a &lt;a href=&quot;../reference/null-safety&quot;&gt;nullable type&lt;/a&gt; and add additional nullability checks.</source>
          <target state="translated">请注意&lt;a href=&quot;../reference/properties#late-initialized-properties-and-variables&quot;&gt;，lateinit修饰符&lt;/a&gt;如何允许声明在创建对象后（构造函数调用之后）初始化的非null类型。如果没有 &lt;code&gt;lateinit&lt;/code&gt; ，则必须声明&lt;a href=&quot;../reference/null-safety&quot;&gt;可&lt;/a&gt;为空的类型并添加其他可为空性检查。</target>
        </trans-unit>
        <trans-unit id="8d92da0b04ba642342db49ac8931c42f19e47f68" translate="yes" xml:space="preserve">
          <source>Note how both the first &lt;code&gt;async&lt;/code&gt; and the awaiting parent are cancelled on failure of one of the children (namely, &lt;code&gt;two&lt;/code&gt;):</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ece9aff9cfec4f422a4dd193e67bb220717aeb47" translate="yes" xml:space="preserve">
          <source>Note how easily one may forget the corresponding context element and then still safely access thread local. To avoid such situations, it is recommended to use &lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/java.lang.-thread-local/ensure-present.html&quot;&gt;ensurePresent&lt;/a&gt; method and fail-fast on improper usages.</source>
          <target state="translated">请注意，忘记相应的上下文元素然后仍然安全地访问本地线程是多么容易。为避免此类情况，建议使用&lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/java.lang.-thread-local/ensure-present.html&quot;&gt;surePresent&lt;/a&gt;方法，并在使用不当时进行快速失败。</target>
        </trans-unit>
        <trans-unit id="27e144234fbe29431367eab42a112f44ba9e6e90" translate="yes" xml:space="preserve">
          <source>Note on visibility</source>
          <target state="translated">关于能见度的说明</target>
        </trans-unit>
        <trans-unit id="f7e11b4556b13f0f82fdc5bafcd108c64e182fe4" translate="yes" xml:space="preserve">
          <source>Note that &lt;a href=&quot;android-plugin&quot;&gt;Kotlin Android Extensions&lt;/a&gt; plugin (automatically bundled into the Kotlin plugin in Android Studio) solves the same issue: replacing &lt;code&gt;findViewById&lt;/code&gt; with a concise and straightforward code. Consider using it unless you're already using ButterKnife and don't want to migrate.</source>
          <target state="translated">请注意，&lt;a href=&quot;android-plugin&quot;&gt;Kotlin Android扩展&lt;/a&gt;插件（自动捆绑到Android Studio中的Kotlin插件中）解决了相同的问题：用简洁明了的代码替换 &lt;code&gt;findViewById&lt;/code&gt; 。考虑使用它，除非您已经在使用ButterKnife并且不想迁移。</target>
        </trans-unit>
        <trans-unit id="b10bef8aca468769cab7ca0f31c1ca35bfeef062" translate="yes" xml:space="preserve">
          <source>Note that &lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines.channels/on-receive-or-null.html&quot;&gt;onReceiveOrNull&lt;/a&gt; is an extension function defined only for channels with non-nullable elements so that there is no accidental confusion between a closed channel and a null value.</source>
          <target state="translated">请注意，&lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines.channels/on-receive-or-null.html&quot;&gt;onReceiveOrNull&lt;/a&gt;是仅为具有不可为null的元素的通道定义的扩展函数，因此在关闭的通道和null值之间不会出现意外的混淆。</target>
        </trans-unit>
        <trans-unit id="23cd4a64981ce83f9769929d7af16453dd2385a0" translate="yes" xml:space="preserve">
          <source>Note that &lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines.channels/ticker.html&quot;&gt;ticker&lt;/a&gt; is aware of possible consumer pauses and, by default, adjusts next produced element delay if a pause occurs, trying to maintain a fixed rate of produced elements.</source>
          <target state="translated">请注意，&lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines.channels/ticker.html&quot;&gt;行情自动收录器&lt;/a&gt;会注意可能的使用者停顿，并且默认情况下会在发生停顿时调整下一个生产要素延迟，以尝试维持固定的生产要素比率。</target>
        </trans-unit>
        <trans-unit id="e4f574aa6b81a2a53d14300616da27a08406bc5d" translate="yes" xml:space="preserve">
          <source>Note that &lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/is-active.html&quot;&gt;isActive&lt;/a&gt; in &lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/-coroutine-scope/index.html&quot;&gt;CoroutineScope&lt;/a&gt; is just a convenient shortcut for &lt;code&gt;coroutineContext[Job]?.isActive == true&lt;/code&gt;.</source>
          <target state="translated">需要注意的是&lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/is-active.html&quot;&gt;isActive&lt;/a&gt;在&lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/-coroutine-scope/index.html&quot;&gt;CoroutineScope&lt;/a&gt;仅仅是一个方便的快捷 &lt;code&gt;coroutineContext[Job]?.isActive == true&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="643f0957c5be70b41f4b5877b3662ee68c79f859" translate="yes" xml:space="preserve">
          <source>Note that &lt;code&gt;-&lt;/code&gt; is an &lt;em&gt;invalid&lt;/em&gt; symbol in Java, meaning that it's impossible to call functions which accept inline classes from Java.</source>
          <target state="translated">请注意， &lt;code&gt;-&lt;/code&gt; 是Java中的&lt;em&gt;无效&lt;/em&gt;符号，这意味着无法调用接受Java中内联类的函数。</target>
        </trans-unit>
        <trans-unit id="326418c4e5742c7d5633cf6eb21a36a9bd5007fa" translate="yes" xml:space="preserve">
          <source>Note that &lt;code&gt;associate()&lt;/code&gt; produces short-living &lt;code&gt;Pair&lt;/code&gt; objects which may affect the performance. Thus, &lt;code&gt;associate()&lt;/code&gt; should be used when the performance isn't critical or it's more preferable than other options.</source>
          <target state="translated">请注意， &lt;code&gt;associate()&lt;/code&gt; 会生成短暂的 &lt;code&gt;Pair&lt;/code&gt; 对象，这可能会影响性能。因此，当性能不是很关键或比其他选项更可取时，应使用 &lt;code&gt;associate()&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="4712744d1c59fe11b666d701399f2acdde076310" translate="yes" xml:space="preserve">
          <source>Note that &lt;code&gt;external&lt;/code&gt; modifier is inherited by nested declarations, i.e. in &lt;code&gt;Node&lt;/code&gt; class we do not put &lt;code&gt;external&lt;/code&gt; before member functions and properties.</source>
          <target state="translated">需要注意的是 &lt;code&gt;external&lt;/code&gt; 改性剂由嵌套的声明，即在继承了 &lt;code&gt;Node&lt;/code&gt; 类我们不把 &lt;code&gt;external&lt;/code&gt; 前成员的功能和属性。</target>
        </trans-unit>
        <trans-unit id="7c2abf53e89201db42a6d7da34bd24e5d79ffb90" translate="yes" xml:space="preserve">
          <source>Note that &lt;code&gt;jQuery&lt;/code&gt; needs to be included in the corresponding HTML:</source>
          <target state="translated">注意， &lt;code&gt;jQuery&lt;/code&gt; 需要包含在相应的HTML中：</target>
        </trans-unit>
        <trans-unit id="a130b307700ca7edccdf73fda8c49be967259f51" translate="yes" xml:space="preserve">
          <source>Note that &lt;em&gt;null&lt;/em&gt; cannot be cast to &lt;code&gt;String&lt;/code&gt; as this type is not &lt;a href=&quot;null-safety&quot;&gt;nullable&lt;/a&gt;, i.e. if &lt;code&gt;y&lt;/code&gt; is null, the code above throws an exception. In order to match Java cast semantics we have to have nullable type at cast right hand side, like:</source>
          <target state="translated">注意，不能将&lt;em&gt;null&lt;/em&gt;强制转换为 &lt;code&gt;String&lt;/code&gt; ,因为此类型不可为&lt;a href=&quot;null-safety&quot;&gt;null&lt;/a&gt;，即，如果 &lt;code&gt;y&lt;/code&gt; 为null，则上面的代码将引发异常。为了匹配Java Cast语义，我们必须在Cast右侧具有可为null的类型，例如：</target>
        </trans-unit>
        <trans-unit id="50af001ffdcccd71b90632cabd329ef39ee390e5" translate="yes" xml:space="preserve">
          <source>Note that &lt;em&gt;null&lt;/em&gt; cannot be cast to &lt;code&gt;String&lt;/code&gt; as this type is not &lt;a href=&quot;null-safety&quot;&gt;nullable&lt;/a&gt;, i.e. if &lt;code&gt;y&lt;/code&gt; is null, the code above throws an exception. To make such code correct for null values, use the nullable type on the right hand side of the cast:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3b25bca041a3db971a025c2e5df5df075febfd74" translate="yes" xml:space="preserve">
          <source>Note that KDoc does not have any syntax for resolving overloaded members in links. Since the Kotlin documentation generation tool puts the documentation for all overloads of a function on the same page, identifying a specific overloaded function is not required for the link to work.</source>
          <target state="translated">请注意,KDoc没有任何语法来解析链接中的重载成员。由于 Kotlin 文档生成工具将一个函数的所有重载的文档放在同一页上,所以不需要识别一个特定的重载函数,链接就可以使用。</target>
        </trans-unit>
        <trans-unit id="378fb47127c89ebfae61cf028d6a1d9ec0aaa851" translate="yes" xml:space="preserve">
          <source>Note that Kapt does not support multiple rounds for the generated Kotlin files.</source>
          <target state="translated">需要注意的是,Kapt不支持多轮生成的Kotlin文件。</target>
        </trans-unit>
        <trans-unit id="f3383898decca7a9f7b6deb5d495a2e5e68df372" translate="yes" xml:space="preserve">
          <source>Note that Kotlin compiler does not apply such mangling to &lt;code&gt;external&lt;/code&gt; declarations, so you don't have to use &lt;code&gt;@JsName&lt;/code&gt; on them. Another case worth noticing is inheriting non-external classes from external classes. In this case any overridden functions won't be mangled as well.</source>
          <target state="translated">请注意，Kotlin编译器不会将此类处理应用于 &lt;code&gt;external&lt;/code&gt; 声明，因此您不必在其上使用 &lt;code&gt;@JsName&lt;/code&gt; 。另一个值得注意的情况是从外部类继承非外部类。在这种情况下，任何覆盖的函数也不会被破坏。</target>
        </trans-unit>
        <trans-unit id="123a11d8fa5ed53f8ac07b91892dff993cf556e9" translate="yes" xml:space="preserve">
          <source>Note that Kotlin does not have a &lt;em&gt;new&lt;/em&gt; keyword.</source>
          <target state="translated">请注意，Kotlin没有&lt;em&gt;新&lt;/em&gt;关键字。</target>
        </trans-unit>
        <trans-unit id="24cefba751ca3442834b1d28297766c4dedb14f5" translate="yes" xml:space="preserve">
          <source>Note that SAM conversions only work for interfaces, not for abstract classes, even if those also have just a single abstract method.</source>
          <target state="translated">请注意,SAM转换只适用于接口,而不适用于抽象类,即使这些抽象类也只有一个抽象方法。</target>
        </trans-unit>
        <trans-unit id="50497e29cee31d617bb240dff5362b9731a558da" translate="yes" xml:space="preserve">
          <source>Note that a &lt;code&gt;for&lt;/code&gt; loop always implicitly declares a new read-only variable (in this example, &lt;code&gt;name&lt;/code&gt;) - if the outer scope already contains a variable with the same name, it will be shadowed by the unrelated loop variable. For the same reason, the final value of the loop variable is not accessible after the loop.</source>
          <target state="translated">请注意， &lt;code&gt;for&lt;/code&gt; 循环始终隐式声明一个新的只读变量（在此示例中为 &lt;code&gt;name&lt;/code&gt; ）-如果外部作用域已经包含一个具有相同名称的变量，则该变量将被不相关的循环变量遮盖。出于同样的原因，循环变量的最终值在循环后不可访问。</target>
        </trans-unit>
        <trans-unit id="f345c0305c039a5c5d92b2679df3ab69307a3616" translate="yes" xml:space="preserve">
          <source>Note that a Kotlin class reference is not the same as a Java class reference. To obtain a Java class reference, use the &lt;code&gt;.java&lt;/code&gt; property on a &lt;code&gt;KClass&lt;/code&gt; instance.</source>
          <target state="translated">请注意，Kotlin类引用与Java类引用不同。要获取Java类引用，请在 &lt;code&gt;KClass&lt;/code&gt; 实例上使用 &lt;code&gt;.java&lt;/code&gt; 属性。</target>
        </trans-unit>
        <trans-unit id="0206a8d998dc749c92f53c56e6d927b2e3bb8c96" translate="yes" xml:space="preserve">
          <source>Note that a boxed primitive type used as a type parameter is mapped to a platform type: for example, &lt;code&gt;List&amp;lt;java.lang.Integer&amp;gt;&lt;/code&gt; becomes a &lt;code&gt;List&amp;lt;Int!&amp;gt;&lt;/code&gt; in Kotlin.</source>
          <target state="translated">请注意，将用作类型参数的装箱原始类型映射到平台类型：例如， &lt;code&gt;List&amp;lt;java.lang.Integer&amp;gt;&lt;/code&gt; &lt;code&gt;List&amp;lt;Int!&amp;gt;&lt;/code&gt; 在Kotlin中成为List &amp;lt;Int！&amp;gt;。</target>
        </trans-unit>
        <trans-unit id="cda0f8a2d7cf131c070c968ead3e02616cc75710" translate="yes" xml:space="preserve">
          <source>Note that a file marked with the &lt;code&gt;@JsQualifier(...)&lt;/code&gt; annotation can't contain non-&lt;code&gt;external&lt;/code&gt; declarations.</source>
          <target state="translated">请注意，标有 &lt;code&gt;@JsQualifier(...)&lt;/code&gt; 批注的文件不能包含非 &lt;code&gt;external&lt;/code&gt; 声明。</target>
        </trans-unit>
        <trans-unit id="406525d21e4a3c81c722c7741ff866f95a0130cf" translate="yes" xml:space="preserve">
          <source>Note that a function type with no receiver is inferred by default, even if a variable is initialized with a reference to an extension function. To alter that, specify the variable type explicitly.</source>
          <target state="translated">请注意,默认情况下,即使一个变量是通过引用扩展函数来初始化的,也会推断出一个没有接收器的函数类型。要改变这种情况,请明确地指定变量类型。</target>
        </trans-unit>
        <trans-unit id="b53df8b9afb9e806e949a0d6af036fa85a8a9db9" translate="yes" xml:space="preserve">
          <source>Note that a module referenced by a dependency declared for &lt;code&gt;commonMain&lt;/code&gt; or &lt;code&gt;commonTest&lt;/code&gt; source set must be published using the &lt;code&gt;kotlin-multiplatform&lt;/code&gt; plugin. If you want to use libraries published by the &lt;code&gt;kotlin-platform-native&lt;/code&gt; plugin, you need to declare a separate source set for common native sources.</source>
          <target state="translated">请注意，必须使用 &lt;code&gt;kotlin-multiplatform&lt;/code&gt; 插件发布由为 &lt;code&gt;commonMain&lt;/code&gt; 或 &lt;code&gt;commonTest&lt;/code&gt; 源集声明的依赖项引用的模块。如果要使用由 &lt;code&gt;kotlin-platform-native&lt;/code&gt; 插件发布的库，则需要为常见的本地源声明一个单独的源集。</target>
        </trans-unit>
        <trans-unit id="07dbd163eca990505b14bc6390f514e8f9d894c6" translate="yes" xml:space="preserve">
          <source>Note that a read-only variable is not a constant per se: it can be initialized with the value of a variable (so its value doesn't need to be known at compile-time), and if it is declared inside a construct that is repeatedly invoked (such as a function or a loop), it can take on a different value on each invocation. Also, while the read-only variable may not be reassigned while it is in scope, it can still refer to an object which is in itself mutable (such as a list).</source>
          <target state="translated">需要注意的是,只读变量本身并不是一个常量:它可以用一个变量的值来初始化(所以它的值不需要在编译时就知道),如果它被声明在一个被反复调用的构造中(比如一个函数或一个循环),那么它可以在每次调用时取一个不同的值。另外,虽然只读变量在作用域内时可能不会被重新分配,但它仍然可以引用一个本身是可变的对象(如列表)。</target>
        </trans-unit>
        <trans-unit id="89edad7d707ce970adc3246bd03659328accf5e4" translate="yes" xml:space="preserve">
          <source>Note that all classes in this tutorial are in the &lt;code&gt;org.jetbrains.kotlin.demo&lt;/code&gt; package.</source>
          <target state="translated">请注意，本教程中的所有类都在 &lt;code&gt;org.jetbrains.kotlin.demo&lt;/code&gt; 包中。</target>
        </trans-unit>
        <trans-unit id="e339722ad427ded0a06508490a0f24fc47b54f2b" translate="yes" xml:space="preserve">
          <source>Note that altering a mutable collection doesn't require it to be a &lt;a href=&quot;basic-syntax#defining-variables&quot;&gt;&lt;code&gt;var&lt;/code&gt;&lt;/a&gt;: write operations modify the same mutable collection object, so the reference doesn't change. Although, if you try to reassign a &lt;code&gt;val&lt;/code&gt; collection, you'll get a compilation error.</source>
          <target state="translated">请注意，更改可变集合并不需要将其更改为&lt;a href=&quot;basic-syntax#defining-variables&quot;&gt; &lt;code&gt;var&lt;/code&gt; &lt;/a&gt;：写操作会修改同一可变集合对象，因此引用不会更改。但是，如果尝试重新分配 &lt;code&gt;val&lt;/code&gt; 集合，则会收到编译错误。</target>
        </trans-unit>
        <trans-unit id="402c9cc77c78831d6ef7a6f5b12edeefd76b9797" translate="yes" xml:space="preserve">
          <source>Note that an &lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines.channels/actor.html&quot;&gt;actor&lt;/a&gt; coroutine builder is a dual of &lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines.channels/produce.html&quot;&gt;produce&lt;/a&gt; coroutine builder. An actor is associated with the channel that it receives messages from, while a producer is associated with the channel that it sends elements to.</source>
          <target state="translated">请注意，&lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines.channels/actor.html&quot;&gt;演员&lt;/a&gt;协程构建器是&lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines.channels/produce.html&quot;&gt;生产&lt;/a&gt;协程构建器的对偶。参与者与它从中接收消息的通道相关联，而生产者与它向其发送元素的通道相关联。</target>
        </trans-unit>
        <trans-unit id="3f7eda5be515629fb292c86295db20e329d1452f" translate="yes" xml:space="preserve">
          <source>Note that an order of &lt;a href=&quot;compare-by-descending#kotlin.comparisons%24compareByDescending%28kotlin.Comparator%28%28kotlin.comparisons.compareByDescending.K%29%29%2C+kotlin.Function1%28%28kotlin.comparisons.compareByDescending.T%2C+kotlin.comparisons.compareByDescending.K%29%29%29%2Fcomparator&quot;&gt;comparator&lt;/a&gt; is reversed by this wrapper.</source>
          <target state="translated">请注意，此包装程序颠倒了&lt;a href=&quot;compare-by-descending#kotlin.comparisons%24compareByDescending%28kotlin.Comparator%28%28kotlin.comparisons.compareByDescending.K%29%29%2C+kotlin.Function1%28%28kotlin.comparisons.compareByDescending.T%2C+kotlin.comparisons.compareByDescending.K%29%29%29%2Fcomparator&quot;&gt;比较器&lt;/a&gt;的顺序。</target>
        </trans-unit>
        <trans-unit id="5d17efed58ea9f37046b141c69cdea45b1227096" translate="yes" xml:space="preserve">
          <source>Note that an order of &lt;a href=&quot;compare-by-descending#kotlin.comparisons%24compareByDescending(kotlin.Comparator((kotlin.comparisons.compareByDescending.K)),%20kotlin.Function1((kotlin.comparisons.compareByDescending.T,%20kotlin.comparisons.compareByDescending.K)))/comparator&quot;&gt;comparator&lt;/a&gt; is reversed by this wrapper.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e5cfcc2bcacb2464eb49e0f0ddd2d5c9c0f5de73" translate="yes" xml:space="preserve">
          <source>Note that anonymous function parameters are always passed inside the parentheses. The shorthand syntax allowing to leave the function outside the parentheses works only for lambda expressions.</source>
          <target state="translated">注意,匿名函数参数总是在括号内传递。允许将函数留在括号外的速记语法只适用于lambda表达式。</target>
        </trans-unit>
        <trans-unit id="9217d029286f8cd07e91756805e90b92b90c8d04" translate="yes" xml:space="preserve">
          <source>Note that anonymous objects can be used as types only in local and private declarations. If you use an anonymous object as a return type of a public function or the type of a public property, the actual type of that function or property will be the declared supertype of the anonymous object, or &lt;code&gt;Any&lt;/code&gt; if you didn't declare any supertype. Members added in the anonymous object will not be accessible.</source>
          <target state="translated">请注意，匿名对象只能在本地和私有声明中用作类型。如果您使用匿名对象作为公共函数的返回类型或公共属性的类型，则该函数或属性的实际类型将是匿名对象的声明的超类型，或者如果您未声明任何超类型，则为 &lt;code&gt;Any&lt;/code&gt; 。添加到匿名对象中的成员将不可访问。</target>
        </trans-unit>
        <trans-unit id="58e17f85bfcb71bf347b7f266c8bad279b3e8c99" translate="yes" xml:space="preserve">
          <source>Note that another regular expression constructed from the same pattern string may have different &lt;a href=&quot;options#kotlin.text.Regex%24options&quot;&gt;options&lt;/a&gt; and may match strings differently.</source>
          <target state="translated">请注意，从同一模式字符串构造的另一个正则表达式可能具有不同的&lt;a href=&quot;options#kotlin.text.Regex%24options&quot;&gt;选项，&lt;/a&gt;并且可能以不同的方式匹配字符串。</target>
        </trans-unit>
        <trans-unit id="0e1195c36b54acff13f3bf0d0c44bfdb9ba62965" translate="yes" xml:space="preserve">
          <source>Note that blank lines do not affect the detected indent level.</source>
          <target state="translated">请注意,空行不影响检测到的缩进水平。</target>
        </trans-unit>
        <trans-unit id="901eb90b706fa87b74726ae4ca585fc8ee1df3bd" translate="yes" xml:space="preserve">
          <source>Note that both the target platform and the name matter: if a target was created as &lt;code&gt;jvm('jvm6')&lt;/code&gt;, using &lt;code&gt;jvm()&lt;/code&gt; will create a separate target (with the default name &lt;code&gt;jvm&lt;/code&gt;). If the preset function used to create the target under that name was different, an error is reported.</source>
          <target state="translated">请注意，目标平台和名称都很重要：如果将目标创建为 &lt;code&gt;jvm('jvm6')&lt;/code&gt; ，则使用 &lt;code&gt;jvm()&lt;/code&gt; 将创建一个单独的目标（默认名称为 &lt;code&gt;jvm&lt;/code&gt; ）。如果用于创建该名称下的目标的预设功能不同，则会报告错误。</target>
        </trans-unit>
        <trans-unit id="20a8a158a1c056ad5cea3eaeda038189df025fb8" translate="yes" xml:space="preserve">
          <source>Note that boxing of numbers does not necessarily preserve identity:</source>
          <target state="translated">请注意,数字的方框不一定能保持身份。</target>
        </trans-unit>
        <trans-unit id="18f0c3bd108e4fca3d9b4ad0c92853cb37af67e8" translate="yes" xml:space="preserve">
          <source>Note that cancelling a producer coroutine closes its channel, thus eventually terminating iteration over the channel that processor coroutines are doing.</source>
          <target state="translated">请注意,取消一个生产者coroutine会关闭它的通道,从而最终终止在处理器coroutine正在做的通道上的迭代。</target>
        </trans-unit>
        <trans-unit id="a4257481b27fd911ec2dc62a1694406a02635294" translate="yes" xml:space="preserve">
          <source>Note that changing type from unsigned type to signed counterpart (and vice versa) is a &lt;em&gt;binary incompatible&lt;/em&gt; change</source>
          <target state="translated">请注意，将类型从无符号类型更改为带符号的对应类型（反之亦然）是&lt;em&gt;二进制不兼容的&lt;/em&gt;更改</target>
        </trans-unit>
        <trans-unit id="fb531691886575d5d0b4f4f27624c19223bae127" translate="yes" xml:space="preserve">
          <source>Note that characters are not numbers in Kotlin.</source>
          <target state="translated">注意,在Kotlin中,字符不是数字。</target>
        </trans-unit>
        <trans-unit id="224781b538ad44d496b4eb9848adbb611bc7607f" translate="yes" xml:space="preserve">
          <source>Note that classes which extend subclasses of a sealed class (indirect inheritors) can be placed anywhere, not necessarily in the same file.</source>
          <target state="translated">请注意,扩展密封类的子类(间接继承者)的类可以放在任何地方,不一定要放在同一个文件中。</target>
        </trans-unit>
        <trans-unit id="4b347074d3d760a0df60b87ff4401c3b2a375933" translate="yes" xml:space="preserve">
          <source>Note that code in initializer blocks effectively becomes part of the primary constructor. Delegation to the primary constructor happens as the first statement of a secondary constructor, so the code in all initializer blocks and property initializers is executed before the secondary constructor body. Even if the class has no primary constructor, the delegation still happens implicitly, and the initializer blocks are still executed:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b01c476864e020a6b3bdf6a577c404757a04f763" translate="yes" xml:space="preserve">
          <source>Note that code in initializer blocks effectively becomes part of the primary constructor. Delegation to the primary constructor happens as the first statement of a secondary constructor, so the code in all initializer blocks is executed before the secondary constructor body. Even if the class has no primary constructor, the delegation still happens implicitly, and the initializer blocks are still executed:</source>
          <target state="translated">请注意,初始化块中的代码实际上成为主构造函数的一部分。委托给主构造函数的行为发生在辅助构造函数的第一条语句中,所以所有初始化块中的代码在辅助构造函数主体之前被执行。即使类中没有主构造函数,委托仍然隐式发生,初始化块仍然会被执行。</target>
        </trans-unit>
        <trans-unit id="40662d03b687698fb7e2efe397dfb49179bd8a28" translate="yes" xml:space="preserve">
          <source>Note that coroutines are currently considered an &lt;strong&gt;experimental feature&lt;/strong&gt;, meaning that the Kotlin team is not committing to supporting the backwards compatibility of this feature after the final 1.1 release.</source>
          <target state="translated">请注意，协程目前被视为&lt;strong&gt;实验性功能&lt;/strong&gt;，这意味着Kotlin团队在最终的1.1版本之后不再致力于支持该功能的向后兼容性。</target>
        </trans-unit>
        <trans-unit id="abdd0e9fc4f6072582fff7f11143b17405eee64f" translate="yes" xml:space="preserve">
          <source>Note that despite the fact that the right-hand side of &lt;em&gt;as?&lt;/em&gt; is a non-null type &lt;code&gt;String&lt;/code&gt; the result of the cast is nullable.</source>
          <target state="translated">请注意，尽管事实如此&lt;em&gt;？&lt;/em&gt;是非null类型的 &lt;code&gt;String&lt;/code&gt; 强制转换的结果为可为空。</target>
        </trans-unit>
        <trans-unit id="d2338fe045f1f2d5efa433b2cf56bf15940234fd" translate="yes" xml:space="preserve">
          <source>Note that division between integers always returns an integer. Any fractional part is discarded. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="984acf59abb99e6edf5501246d83e1bc7951b21e" translate="yes" xml:space="preserve">
          <source>Note that even if &lt;a href=&quot;is-marked-nullable#kotlin.reflect.KType%24isMarkedNullable&quot;&gt;isMarkedNullable&lt;/a&gt; is false, values of the type can still be &lt;code&gt;null&lt;/code&gt;. This may happen if it is a type of the type parameter with a nullable upper bound:</source>
          <target state="translated">请注意，即使&lt;a href=&quot;is-marked-nullable#kotlin.reflect.KType%24isMarkedNullable&quot;&gt;isMarkedNullable&lt;/a&gt;为false，该类型的值仍可以为 &lt;code&gt;null&lt;/code&gt; 。如果它是类型参数的类型且具有可为空的上限，则可能会发生这种情况：</target>
        </trans-unit>
        <trans-unit id="f9717ca7605239239d9b446b8d8baf568533a62a" translate="yes" xml:space="preserve">
          <source>Note that even if you initialize a variable with a reference to an extension function, the inferred function type will have no receiver (it will have an additional parameter accepting a receiver object). To have a function type with receiver instead, specify the type explicitly:</source>
          <target state="translated">请注意,即使你用一个扩展函数的引用来初始化一个变量,推断出的函数类型将没有接收器(它将有一个接受接收器对象的附加参数)。如果要拥有一个带有接收器的函数类型,请明确地指定类型。</target>
        </trans-unit>
        <trans-unit id="e1859932d9a0b691a9fc9411f62e5506be7f8a66" translate="yes" xml:space="preserve">
          <source>Note that even though this is a read-only property due to declaring it with &lt;code&gt;val&lt;/code&gt; (in which case you may not provide a setter), its value can still change since it reads from a mutable property - you just can't assign to the property. Also, note that the property type is inferred from the return value of the getter.</source>
          <target state="translated">请注意，尽管由于使用 &lt;code&gt;val&lt;/code&gt; 声明了它是一个只读属性（在这种情况下，您可能没有提供设置器），但它的值仍然可以更改，因为它是从可变属性中读取的-您无法将其分配给属性。另外，请注意，从getter的返回值推断出属性类型。</target>
        </trans-unit>
        <trans-unit id="fd6bde9af50a41c1d5f97ea7b48311cc0527806c" translate="yes" xml:space="preserve">
          <source>Note that exceptions are somewhat discouraged in Kotlin except when interacting with Java code. Instead of throwing exceptions in your own code, consider using special return types like &lt;a href=&quot;https://arrow-kt.io/docs/datatypes/option/&quot;&gt;Option&lt;/a&gt; or &lt;a href=&quot;https://arrow-kt.io/docs/datatypes/either/&quot;&gt;Either&lt;/a&gt; from the &lt;a href=&quot;https://arrow-kt.io/&quot;&gt;Arrow library&lt;/a&gt;.</source>
          <target state="translated">请注意，除了与Java代码进行交互时，在Kotlin中不建议使用异常。可以考虑使用特殊的返回类型，例如&lt;a href=&quot;https://arrow-kt.io/docs/datatypes/option/&quot;&gt;Option&lt;/a&gt;或&lt;a href=&quot;https://arrow-kt.io/&quot;&gt;Arrow库中的&lt;/a&gt;&lt;a href=&quot;https://arrow-kt.io/docs/datatypes/either/&quot;&gt;Either&lt;/a&gt;，而不是在自己的代码中引发异常。</target>
        </trans-unit>
        <trans-unit id="33e073ab069310793fb905b91ca3476dc4caf23c" translate="yes" xml:space="preserve">
          <source>Note that expected declarations are not restricted to interfaces and interface members. In this example, the expected class has a constructor and can be created directly from common code. You can apply the &lt;code&gt;expect&lt;/code&gt; modifier to other declarations as well, including top-level declarations and annotations:</source>
          <target state="translated">请注意，预期的声明不限于接口和接口成员。在此示例中，期望的类具有构造函数，可以直接从通用代码创建。您还可以将 &lt;code&gt;expect&lt;/code&gt; 修饰符应用于其他声明，包括顶级声明和注释：</target>
        </trans-unit>
        <trans-unit id="45215a2c612cfc18ca0212e4816f62d8f14fe5b3" translate="yes" xml:space="preserve">
          <source>Note that extensions can be defined with a nullable receiver type. Such extensions can be called on an object variable even if its value is null, and can check for &lt;code&gt;this == null&lt;/code&gt; inside the body. This is what allows you to call toString() in Kotlin without checking for null: the check happens inside the extension function.</source>
          <target state="translated">请注意，可以使用可为空的接收器类型定义扩展。即使对象变量的值为null，也可以在对象变量上调用此类扩展，并且可以在主体内检查 &lt;code&gt;this == null&lt;/code&gt; 。这就是您可以在Kotlin中调用toString（）而无需检查是否为null的情况：检查是在扩展函数内部进行的。</target>
        </trans-unit>
        <trans-unit id="519b88833afa591c638bec3f6bbeb8adf1aa4ab7" translate="yes" xml:space="preserve">
          <source>Note that for a top level &lt;strong&gt;extension&lt;/strong&gt; property, the delegate is the same for all extension receivers, so the actual &lt;a href=&quot;get-delegate#kotlin.reflect.KProperty1%24getDelegate%28kotlin.reflect.KProperty1.T%29%2Freceiver&quot;&gt;receiver&lt;/a&gt; instance passed in is not going to make any difference, it must only be a value of &lt;a href=&quot;index#T&quot;&gt;T&lt;/a&gt;.</source>
          <target state="translated">请注意，对于顶级&lt;strong&gt;扩展&lt;/strong&gt;属性，所有扩展接收者的委托都是相同的，因此传入的实际&lt;a href=&quot;get-delegate#kotlin.reflect.KProperty1%24getDelegate%28kotlin.reflect.KProperty1.T%29%2Freceiver&quot;&gt;接收者&lt;/a&gt;实例不会有任何区别，它只能是&lt;a href=&quot;index#T&quot;&gt;T&lt;/a&gt;的值。</target>
        </trans-unit>
        <trans-unit id="d2defd349af6dc7f8207169257d4b38f3d3fe54d" translate="yes" xml:space="preserve">
          <source>Note that for a top level &lt;strong&gt;extension&lt;/strong&gt; property, the delegate is the same for all extension receivers, so the actual &lt;a href=&quot;get-delegate#kotlin.reflect.KProperty1%24getDelegate(kotlin.reflect.KProperty1.T)/receiver&quot;&gt;receiver&lt;/a&gt; instance passed in is not going to make any difference, it must only be a value of &lt;a href=&quot;index#T&quot;&gt;T&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c0ed19157d69e7092350d01754dff2c913099ef4" translate="yes" xml:space="preserve">
          <source>Note that for the IDE to correctly analyze the dependencies of the common sources, the common source sets need to have corresponding dependencies on the Kotlin metadata packages in addition to the platform-specific artifact dependencies of the platform-specific source sets. Usually, an artifact with a suffix &lt;code&gt;-common&lt;/code&gt; (as in &lt;code&gt;kotlin-stdlib-common&lt;/code&gt;) or &lt;code&gt;-metadata&lt;/code&gt; is required when using a published library (unless it is published with Gradle metadata, as described below).</source>
          <target state="translated">请注意，为了使IDE能够正确分析公共源的依赖关系，除了特定于平台的源集的特定于平台的工件依赖关系之外，公共源集还必须具有对应于Kotlin元数据包的依赖关系。通常，在使用已发布的库时（除非它与Gradle元数据一起发布，如下所述），需要后缀为 &lt;code&gt;-common&lt;/code&gt; （如 &lt;code&gt;kotlin-stdlib-common&lt;/code&gt; ）或 &lt;code&gt;-metadata&lt;/code&gt; 的工件。</target>
        </trans-unit>
        <trans-unit id="ef903749bbe41c983b27f632974567077577929e" translate="yes" xml:space="preserve">
          <source>Note that for the purpose of this tutorial, we've done a line by line literal translation. Obviously we could write this in a more Kotlin idiomatic way.</source>
          <target state="translated">请注意,为了本教程的目的,我们做了一行一行的字面翻译。很明显,我们可以用更习惯的Kotlin方式来写。</target>
        </trans-unit>
        <trans-unit id="2712e3816fc9fe0e5aede4e3fca67cc623f69a68" translate="yes" xml:space="preserve">
          <source>Note that if a class has got a primary constructor, it is no longer possible to create an instance of it without supplying any parameters (unless one of the secondary constructors is parameterless).</source>
          <target state="translated">需要注意的是,如果一个类有一个主构造函数,那么就不可能在不提供任何参数的情况下创建它的实例(除非其中一个二级构造函数是无参数的)。</target>
        </trans-unit>
        <trans-unit id="3b1296c9d04a31b1fde17dffa086ef1b8acdb6c3" translate="yes" xml:space="preserve">
          <source>Note that if a library consumer defines variants that are missing in the library, they need to provide &lt;a href=&quot;https://developer.android.com/studio/build/dependencies#resolve_matching_errors&quot;&gt;matching fallbacks&lt;/a&gt;. For example, if a library does not have or does not publish a &lt;code&gt;staging&lt;/code&gt; build type, it will be necessary to provide a fallback for the consumers who have such a build type, specifying at least one of the build types that the library publishes:</source>
          <target state="translated">请注意，如果库使用者定义了库中缺少的变体，则他们需要提供&lt;a href=&quot;https://developer.android.com/studio/build/dependencies#resolve_matching_errors&quot;&gt;匹配的后备&lt;/a&gt;。例如，如果库不具有或不发布 &lt;code&gt;staging&lt;/code&gt; 构建类型，则必须为具有这种构建类型的使用者提供备用，至少指定该库发布的一种构建类型：</target>
        </trans-unit>
        <trans-unit id="6c82c92fd55806c5e9d8d4f7e9db855fd43d5a7a" translate="yes" xml:space="preserve">
          <source>Note that if an inline function has no inlinable function parameters and no &lt;a href=&quot;#reified-type-parameters&quot;&gt;reified type parameters&lt;/a&gt;, the compiler will issue a warning, since inlining such functions is very unlikely to be beneficial (you can suppress the warning if you are sure the inlining is needed using the annotation &lt;code&gt;@Suppress(&quot;NOTHING_TO_INLINE&quot;)&lt;/code&gt;).</source>
          <target state="translated">请注意，如果内联函数没有可插入函数参数且没有&lt;a href=&quot;#reified-type-parameters&quot;&gt;类型化参数&lt;/a&gt;，则编译器将发出警告，因为内联此类函数不太可能是有益的（如果可以确定使用此内联函数，则可以取消该警告。注释 &lt;code&gt;@Suppress(&quot;NOTHING_TO_INLINE&quot;)&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="ac1401dfe931b50e5500ce4b2ebac5d2aaf6e00c" translate="yes" xml:space="preserve">
          <source>Note that if an interface with &lt;code&gt;@JvmDefault&lt;/code&gt; methods is used as a &lt;a href=&quot;delegation&quot;&gt;delegate&lt;/a&gt;, the default method implementations are called even if the actual delegate type provides its own implementations.</source>
          <target state="translated">请注意，如果将具有 &lt;code&gt;@JvmDefault&lt;/code&gt; 方法的接口用作&lt;a href=&quot;delegation&quot;&gt;委托&lt;/a&gt;，则即使实际的委托类型提供了自己的实现，也会调用默认方法实现。</target>
        </trans-unit>
        <trans-unit id="5c363669dd6ed31274f54972ddb75e1fa04284aa" translate="yes" xml:space="preserve">
          <source>Note that if the &lt;code&gt;comparator&lt;/code&gt; considers any two keys of this map equal, only the value associated with the last of them gets into the resulting map.</source>
          <target state="translated">注意，如果 &lt;code&gt;comparator&lt;/code&gt; 认为此映射的任何两个键相等，则只有与它们最后一个键关联的值才进入结果映射。</target>
        </trans-unit>
        <trans-unit id="169507f367051a5b585a09223134ff4c0faab6be" translate="yes" xml:space="preserve">
          <source>Note that if the natural sorting order of keys considers any two keys of this map equal (this could happen if the equality of keys according to &lt;a href=&quot;../kotlin/-comparable/compare-to#kotlin.Comparable%24compareTo%28kotlin.Comparable.T%29&quot;&gt;Comparable.compareTo&lt;/a&gt; is inconsistent with the equality according to &lt;a href=&quot;../kotlin/-any/equals#kotlin.Any%24equals%28kotlin.Any%29&quot;&gt;Any.equals&lt;/a&gt;), only the value associated with the last of them gets into the resulting map.</source>
          <target state="translated">请注意，如果键的自然排序顺序认为此映射的任何两个键相等（如果根据&lt;a href=&quot;../kotlin/-comparable/compare-to#kotlin.Comparable%24compareTo%28kotlin.Comparable.T%29&quot;&gt;Comparable.compareTo&lt;/a&gt;的键的相等性与根据&lt;a href=&quot;../kotlin/-any/equals#kotlin.Any%24equals%28kotlin.Any%29&quot;&gt;Any.equals&lt;/a&gt;的相等性不一致，则可能发生这种情况）他们进入结果地图。</target>
        </trans-unit>
        <trans-unit id="e0314127afde0714d8e6361a9b85bacb2fcd7ce9" translate="yes" xml:space="preserve">
          <source>Note that if the natural sorting order of keys considers any two keys of this map equal (this could happen if the equality of keys according to &lt;a href=&quot;../kotlin/-comparable/compare-to#kotlin.Comparable%24compareTo(kotlin.Comparable.T)&quot;&gt;Comparable.compareTo&lt;/a&gt; is inconsistent with the equality according to &lt;a href=&quot;../kotlin/-any/equals#kotlin.Any%24equals(kotlin.Any?)&quot;&gt;Any.equals&lt;/a&gt;), only the value associated with the last of them gets into the resulting map.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fdeead972a4f0dc85a954b4ef35d091c4109a874" translate="yes" xml:space="preserve">
          <source>Note that if the type of the result is known from the context, the type argument can be omitted as usual due to the type inference.</source>
          <target state="translated">需要注意的是,如果从上下文中知道结果的类型,由于类型推理,类型参数可以像往常一样省略。</target>
        </trans-unit>
        <trans-unit id="3df7a58b11ae9c7f677f019b7e29ec36da986c3e" translate="yes" xml:space="preserve">
          <source>Note that if this function fails, then partial copying may have taken place.</source>
          <target state="translated">请注意,如果该函数失败,那么可能已经进行了部分复制。</target>
        </trans-unit>
        <trans-unit id="e537ff121d99004384d6b13ae0784e74c296eabf" translate="yes" xml:space="preserve">
          <source>Note that if we have called &lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/-deferred/await.html&quot;&gt;await&lt;/a&gt; in &lt;code&gt;println&lt;/code&gt; and omitted &lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/-job/start.html&quot;&gt;start&lt;/a&gt; on individual coroutines, then we would have got the sequential behaviour as &lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/-deferred/await.html&quot;&gt;await&lt;/a&gt; starts the coroutine execution and waits for the execution to finish, which is not the intended use-case for laziness. The use-case for &lt;code&gt;async(start = CoroutineStart.LAZY)&lt;/code&gt; is a replacement for the standard &lt;code&gt;lazy&lt;/code&gt; function in cases when computation of the value involves suspending functions.</source>
          <target state="translated">请注意，如果我们在 &lt;code&gt;println&lt;/code&gt; 中调用了&lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/-deferred/await.html&quot;&gt;await&lt;/a&gt;并且在各个协程上省略了&lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/-job/start.html&quot;&gt;start&lt;/a&gt;，那么当&lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/-deferred/await.html&quot;&gt;await&lt;/a&gt;启动协程执行并等待执行完成时，我们将获得顺序行为，这不是懒惰的预期用例。在值的计算涉及暂停​​函数的情况下， &lt;code&gt;async(start = CoroutineStart.LAZY)&lt;/code&gt; 的用例代替了标准 &lt;code&gt;lazy&lt;/code&gt; 函数。</target>
        </trans-unit>
        <trans-unit id="ca8da6b3b0810e7069d1865b81c075dccb66b2c6" translate="yes" xml:space="preserve">
          <source>Note that if we just call &lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/-deferred/await.html&quot;&gt;await&lt;/a&gt; in &lt;code&gt;println&lt;/code&gt; without first calling &lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/-job/start.html&quot;&gt;start&lt;/a&gt; on individual coroutines, this will lead to sequential behavior, since &lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/-deferred/await.html&quot;&gt;await&lt;/a&gt; starts the coroutine execution and waits for its finish, which is not the intended use-case for laziness. The use-case for &lt;code&gt;async(start = CoroutineStart.LAZY)&lt;/code&gt; is a replacement for the standard &lt;code&gt;lazy&lt;/code&gt; function in cases when computation of the value involves suspending functions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1e82a73f61c52b17d7e3c65e8e99e11241b677f8" translate="yes" xml:space="preserve">
          <source>Note that if you are using multi-project build, you should apply plugin to the main project that is an entry point to your application.</source>
          <target state="translated">需要注意的是,如果你使用的是多项目构建,你应该将插件应用到主项目上,因为主项目是你的应用的入口。</target>
        </trans-unit>
        <trans-unit id="e39d91f028c6c4bc3b768c071107ff617a7a7685" translate="yes" xml:space="preserve">
          <source>Note that if you use the project template generated by the &lt;a href=&quot;http://start.spring.io/#!language=kotlin&quot;&gt;start.spring.io&lt;/a&gt; service, the &lt;code&gt;kotlin-spring&lt;/code&gt; plugin will be enabled by default.</source>
          <target state="translated">请注意，如果您使用由&lt;a href=&quot;http://start.spring.io/#!language=kotlin&quot;&gt;start.spring.io&lt;/a&gt;服务生成的项目模板，则默认情况下将启用 &lt;code&gt;kotlin-spring&lt;/code&gt; 插件。</target>
        </trans-unit>
        <trans-unit id="261071b80b92f5599125de0c5212f010938aeec4" translate="yes" xml:space="preserve">
          <source>Note that if your function has parameters, its name will be mangled, so the mangled name should be used in the keep directive.</source>
          <target state="translated">请注意,如果你的函数有参数,它的名字会被打乱,所以在keep指令中应该使用打乱的名字。</target>
        </trans-unit>
        <trans-unit id="6917f47d5bafd263295f3acf8a1ef7ab9d827116" translate="yes" xml:space="preserve">
          <source>Note that in Kotlin, outer class does not see private members of its inner classes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="659e4fb54490f44ab2332ce79f12e2c6749032d5" translate="yes" xml:space="preserve">
          <source>Note that in Kotlin/JS &lt;a href=&quot;../set#kotlin.text%24set(kotlin.text.StringBuilder,%20kotlin.Int,%20kotlin.Char)&quot;&gt;set&lt;/a&gt; operator function has non-constant execution time complexity. Therefore, increasing length of this string builder and then updating each character by index may slow down your program.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4c99e0a3c39d8997895800da0e15222c8aa2ad3b" translate="yes" xml:space="preserve">
          <source>Note that in Kotlin/JS Float range is wider than &quot;single format&quot; bit layout can represent, so some Float values may overflow, underflow or loose their accuracy after conversion to bits and back.</source>
          <target state="translated">需要注意的是,在Kotlin/JS中,Float的范围比 &quot;单一格式 &quot;的位布局所能代表的范围更宽,所以有些Float值在转换为位后再返回时,可能会溢出、少溢或失去精度。</target>
        </trans-unit>
        <trans-unit id="88d47ad6334c013775aba391a38df6074a6dc3f4" translate="yes" xml:space="preserve">
          <source>Note that in competitive programming it is customary to give variables shorter names than it is typical in industrial programming practice, since the code is to be written just once and not supported thereafter. However, these names are usually still mnemonic &amp;mdash; &lt;code&gt;a&lt;/code&gt; for arrays, &lt;code&gt;i&lt;/code&gt;, &lt;code&gt;j&lt;/code&gt;, etc for indices, &lt;code&gt;r&lt;/code&gt;, and &lt;code&gt;c&lt;/code&gt; for row and column numbers in tables, &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt; for coordinates, etc. It is easier to keep the same names for input data as it is given in the problem statement. However, more complex problems require more code which leads to using longer self-explanatory variable and function names.</source>
          <target state="translated">请注意，在竞争性编程中，通常给变量起一个比工业编程实践中所用的名称更短的名称，这是因为该代码仅被编写一次，此后不被支持。然而，这些名字都是平时还是记忆- &lt;code&gt;a&lt;/code&gt; 数组， &lt;code&gt;i&lt;/code&gt; ， &lt;code&gt;j&lt;/code&gt; 等为指标， &lt;code&gt;r&lt;/code&gt; ，和 &lt;code&gt;c&lt;/code&gt; 为在表中，行数和列数 &lt;code&gt;x&lt;/code&gt; 和 &lt;code&gt;y&lt;/code&gt; 为坐标等更容易保持相同的名字输入问题陈述中给出的数据。但是，更复杂的问题需要更多代码，从而导致使用更长的不言自明的变量和函数名称。</target>
        </trans-unit>
        <trans-unit id="24fc67264648157b787a9e1d8a1aee247379a870" translate="yes" xml:space="preserve">
          <source>Note that in many cases there's no need to use custom interoperability library creation mechanisms described below, as for APIs available on the platform standardized bindings called &lt;a href=&quot;platform_libs&quot;&gt;platform libraries&lt;/a&gt; could be used. For example, POSIX on Linux/macOS platforms, Win32 on Windows platform, or Apple frameworks on macOS/iOS are available this way.</source>
          <target state="translated">请注意，在许多情况下，不需要使用下面描述的自定义互操作性库创建机制，因为可以使用&lt;a href=&quot;platform_libs&quot;&gt;平台&lt;/a&gt;上可用的API，可以使用称为平台库的标准化绑定。例如，以这种方式可以使用Linux / macOS平台上的POSIX，Windows平台上的Win32或macOS / iOS上的Apple框架。</target>
        </trans-unit>
        <trans-unit id="4c3031faf8b33ed043c9d69fe73ae60488938a50" translate="yes" xml:space="preserve">
          <source>Note that in most cases using &lt;a href=&quot;#string-templates&quot;&gt;string templates&lt;/a&gt; or raw strings is preferable to string concatenation.</source>
          <target state="translated">请注意，在大多数情况下，使用&lt;a href=&quot;#string-templates&quot;&gt;字符串模板&lt;/a&gt;或原始字符串比使用字符串连接更好。</target>
        </trans-unit>
        <trans-unit id="8d1e2fa9797125ae266c1521c6c52af5e4d67c8b" translate="yes" xml:space="preserve">
          <source>Note that in this case the parameter should be added to each subsequent build, and any build with disabled incremental compilation invalidates incremental caches.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6addd273834de7f83ab126536995cca9dd6643b2" translate="yes" xml:space="preserve">
          <source>Note that incremental annotation processing requires &lt;a href=&quot;using-gradle#incremental-compilation&quot;&gt;incremental compilation&lt;/a&gt; to be enabled as well.</source>
          <target state="translated">请注意，增量注释处理还需要启用&lt;a href=&quot;using-gradle#incremental-compilation&quot;&gt;增量编译&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="6b7588c134bcd5e8f4a5da82d120b4047c151b76" translate="yes" xml:space="preserve">
          <source>Note that infix functions always require both the receiver and the parameter to be specified. When you're calling a method on the current receiver using the infix notation, you need to use &lt;code&gt;this&lt;/code&gt; explicitly; unlike regular method calls, it cannot be omitted. This is required to ensure unambiguous parsing.</source>
          <target state="translated">请注意，中缀函数始终都需要同时指定接收方和参数。当您使用后缀符号在当前接收方上调用方法时，您需要显式使用 &lt;code&gt;this&lt;/code&gt; 。与常规方法调用不同，它不能被忽略。这是确保明确解析所必需的。</target>
        </trans-unit>
        <trans-unit id="ad1d05af6c1aa655f7d3f68b893652c8d8011b1f" translate="yes" xml:space="preserve">
          <source>Note that instead of declaring lambdas in xml like in the following example, you can can bind actions directly in the code:</source>
          <target state="translated">请注意,你可以直接在代码中绑定动作,而不是像下面的例子那样在xml中声明lambdas。</target>
        </trans-unit>
        <trans-unit id="5d76391f0c3ceb2cfa6bd1897bb1920148848dd2" translate="yes" xml:space="preserve">
          <source>Note that invoking &lt;code&gt;js()&lt;/code&gt; returns a result of type &lt;a href=&quot;dynamic-type&quot;&gt;&lt;code&gt;dynamic&lt;/code&gt;&lt;/a&gt;, which provides no type safety at compile time.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2de64757cb014df0ce60c045d22eb608329bdbb9" translate="yes" xml:space="preserve">
          <source>Note that it is not recommended to call either &lt;a href=&quot;../kotlin.coroutines.experimental/-continuation/resume&quot;&gt;Continuation.resume&lt;/a&gt; nor &lt;a href=&quot;../kotlin.coroutines.experimental/-continuation/resume-with-exception&quot;&gt;Continuation.resumeWithException&lt;/a&gt; functions synchronously in the same stackframe where suspension function is run. Use &lt;a href=&quot;../kotlin.coroutines.experimental/suspend-coroutine&quot;&gt;suspendCoroutine&lt;/a&gt; as a safer way to obtain current continuation instance.</source>
          <target state="translated">请注意，不建议在运行暂停功能的同一堆栈帧中同步调用&lt;a href=&quot;../kotlin.coroutines.experimental/-continuation/resume&quot;&gt;Continuation.resume&lt;/a&gt;或&lt;a href=&quot;../kotlin.coroutines.experimental/-continuation/resume-with-exception&quot;&gt;Continuation.resumeWithException&lt;/a&gt;函数。使用&lt;a href=&quot;../kotlin.coroutines.experimental/suspend-coroutine&quot;&gt;suspendCoroutine&lt;/a&gt;作为获取当前延续实例的更安全方法。</target>
        </trans-unit>
        <trans-unit id="9d6ffb0207257e6147b3a7dc3f05f4b2eb90ba26" translate="yes" xml:space="preserve">
          <source>Note that it is not recommended to call either &lt;a href=&quot;../kotlin.coroutines/resume&quot;&gt;Continuation.resume&lt;/a&gt; nor &lt;a href=&quot;../kotlin.coroutines/resume-with-exception&quot;&gt;Continuation.resumeWithException&lt;/a&gt; functions synchronously in the same stackframe where suspension function is run. Use &lt;a href=&quot;../kotlin.coroutines/suspend-coroutine&quot;&gt;suspendCoroutine&lt;/a&gt; as a safer way to obtain current continuation instance.</source>
          <target state="translated">请注意，不建议在运行暂停功能的同一堆栈帧中同步调用&lt;a href=&quot;../kotlin.coroutines/resume&quot;&gt;Continuation.resume&lt;/a&gt;或&lt;a href=&quot;../kotlin.coroutines/resume-with-exception&quot;&gt;Continuation.resumeWithException&lt;/a&gt;函数。使用&lt;a href=&quot;../kotlin.coroutines/suspend-coroutine&quot;&gt;suspendCoroutine&lt;/a&gt;作为获取当前延续实例的更安全方法。</target>
        </trans-unit>
        <trans-unit id="ef6ff08c8afdc4c88bfce216a4201b44bef8d337" translate="yes" xml:space="preserve">
          <source>Note that it's still possible to call the members of the outer receiver, but to do that you have to specify this receiver explicitly:</source>
          <target state="translated">请注意,仍然可以调用外部接收器的成员,但要做到这一点,你必须明确指定这个接收器。</target>
        </trans-unit>
        <trans-unit id="1a8a5665bc44d5cdbf2531c3d2423dcbe7d87681" translate="yes" xml:space="preserve">
          <source>Note that parameters of the primary constructor can be used in the initializer blocks. They can also be used in property initializers declared in the class body:</source>
          <target state="translated">注意,主构造函数的参数可以在初始化块中使用。它们也可以在类体中声明的属性初始化器中使用。</target>
        </trans-unit>
        <trans-unit id="88ac6b28b3a3b8435f7eba9f01321df2f731f34d" translate="yes" xml:space="preserve">
          <source>Note that right after the &quot;Task from coroutine scope&quot; message (while waiting for nested launch) &quot;Task from runBlocking&quot; is executed and printed &amp;mdash; even though the &lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/coroutine-scope.html&quot;&gt;coroutineScope&lt;/a&gt; is not completed yet.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c0c4053dbcf27c46808a2ab0e8b3303b9f7cbf9a" translate="yes" xml:space="preserve">
          <source>Note that set operations are supported by &lt;code&gt;List&lt;/code&gt; as well. However, the result of set operations on lists is still a &lt;code&gt;Set&lt;/code&gt;, so all the duplicate elements are removed.</source>
          <target state="translated">请注意， &lt;code&gt;List&lt;/code&gt; 也支持set操作。但是，对列表进行set操作的结果仍然是 &lt;code&gt;Set&lt;/code&gt; ，因此将删除所有重复元素。</target>
        </trans-unit>
        <trans-unit id="205ca8f88f3bcbd4d7774a26be00ee48e66a2ebf" translate="yes" xml:space="preserve">
          <source>Note that since Kotlin 1.1 you can declare a delegated property inside a function or code block, it shouldn't necessarily be a member of a class. Below you can find &lt;a href=&quot;delegated-properties#local-delegated-properties&quot;&gt;an example&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ecba1bd96686456eab8e7e25340f9f56c1cd293b" translate="yes" xml:space="preserve">
          <source>Note that since Kotlin 1.1 you can declare a delegated property inside a function or code block, it shouldn't necessarily be a member of a class. Below you can find &lt;a href=&quot;delegated-properties#local-delegated-properties-since-11&quot;&gt;the example&lt;/a&gt;.</source>
          <target state="translated">请注意，由于Kotlin 1.1可以在函数或代码块内声明一个委托属性，因此它不一定是类的成员。在下面可以找到&lt;a href=&quot;delegated-properties#local-delegated-properties-since-11&quot;&gt;示例&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="8f27fe847dccbaf44c3e83c0485bdf6be308f0d6" translate="yes" xml:space="preserve">
          <source>Note that smart casts do not work when the compiler cannot guarantee that the variable cannot change between the check and the usage. More specifically, smart casts are applicable according to the following rules:</source>
          <target state="translated">需要注意的是,当编译器不能保证变量在检查和使用之间不能发生变化时,智能投掷就不能工作。更具体地说,智能投掷是根据以下规则适用的。</target>
        </trans-unit>
        <trans-unit id="8d16f91fe350efdfdab6da644c90340156b7ba22" translate="yes" xml:space="preserve">
          <source>Note that some Java visibilities such as package-private and protected (which also gives access to items from the same package) cannot be represented in Kotlin, so there's no &lt;a href=&quot;index&quot;&gt;KVisibility&lt;/a&gt; value corresponding to them.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1c295c01c9e6a32796148120ae2cf2ae77c47235" translate="yes" xml:space="preserve">
          <source>Note that some Java visibilities such as package-private and protected (which also gives access to items from the same package) cannot be represented in Kotlin, so there's no &lt;a href=&quot;index#kotlin.reflect.KVisibility&quot;&gt;KVisibility&lt;/a&gt; value corresponding to them.</source>
          <target state="translated">请注意，某些Java可见性（例如package-private和protected（也允许访问同一包中的项目））无法在Kotlin中表示，因此没有&lt;a href=&quot;index#kotlin.reflect.KVisibility&quot;&gt;与之&lt;/a&gt;相对应的KVisibility值。</target>
        </trans-unit>
        <trans-unit id="a13526efa441f113eff7267561f09b5212747a9d" translate="yes" xml:space="preserve">
          <source>Note that some inline functions may call the lambdas passed to them as parameters not directly from the function body, but from another execution context, such as a local object or a nested function. In such cases, non-local control flow is also not allowed in the lambdas. To indicate that, the lambda parameter needs to be marked with the &lt;code&gt;crossinline&lt;/code&gt; modifier:</source>
          <target state="translated">请注意，某些内联函数可能不直接从函数主体而是从另一个执行上下文（例如本地对象或嵌套函数）调用作为参数传递给它们的lambda。在这种情况下，lambda中也不允许非本地控制流。为了表明这一点，需要用 &lt;code&gt;crossinline&lt;/code&gt; 修饰符标记lambda参数：</target>
        </trans-unit>
        <trans-unit id="c7e376b19704536e280b87471b9d2f1935ff22e7" translate="yes" xml:space="preserve">
          <source>Note that some of the Kotlin/Native targets require an &lt;a href=&quot;#using-kotlinnative-targets&quot;&gt;appropriate host machine&lt;/a&gt; to build on.</source>
          <target state="translated">请注意，某些Kotlin / Native目标需要&lt;a href=&quot;#using-kotlinnative-targets&quot;&gt;适当的主机&lt;/a&gt;才能构建。</target>
        </trans-unit>
        <trans-unit id="36013172d7bed76a773c2a3e7f523422dd3a224f" translate="yes" xml:space="preserve">
          <source>Note that sometimes channels may produce executions that look unfair due to the nature of the executor that is being used. See &lt;a href=&quot;https://github.com/Kotlin/kotlinx.coroutines/issues/111&quot;&gt;this issue&lt;/a&gt; for details.</source>
          <target state="translated">请注意，由于使用的执行程序的性质，有时通道可能会产生看起来不公平的执行。有关详细信息，请参&lt;a href=&quot;https://github.com/Kotlin/kotlinx.coroutines/issues/111&quot;&gt;见此问题&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="1c3b5c2f9f97ede3b692c00928df156ad477b585" translate="yes" xml:space="preserve">
          <source>Note that the &lt;a href=&quot;../-string/index#kotlin.String&quot;&gt;String&lt;/a&gt; implementation of this interface in Kotlin/JS has unspecified behavior if the &lt;a href=&quot;get#kotlin.CharSequence%24get%28kotlin.Int%29%2Findex&quot;&gt;index&lt;/a&gt; is out of its bounds.</source>
          <target state="translated">请注意，如果&lt;a href=&quot;get#kotlin.CharSequence%24get%28kotlin.Int%29%2Findex&quot;&gt;索引&lt;/a&gt;超出其范围，则Kotlin / JS中此接口的&lt;a href=&quot;../-string/index#kotlin.String&quot;&gt;String&lt;/a&gt;实现将具有未指定的行为。</target>
        </trans-unit>
        <trans-unit id="459ff0aa9d321691761e4a91e298d7fd73dfd1d5" translate="yes" xml:space="preserve">
          <source>Note that the &lt;a href=&quot;../-string/index#kotlin.String&quot;&gt;String&lt;/a&gt; implementation of this interface in Kotlin/JS has unspecified behavior if the &lt;a href=&quot;get#kotlin.CharSequence%24get(kotlin.Int)/index&quot;&gt;index&lt;/a&gt; is out of its bounds.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="656f0ee95d7b273c3b267aed0322b60e181f19cb" translate="yes" xml:space="preserve">
          <source>Note that the &lt;a href=&quot;../../kotlin/-string/index#kotlin.String&quot;&gt;String&lt;/a&gt; implementation of this interface in Kotlin/JS has unspecified behavior if the &lt;a href=&quot;../../kotlin/-char-sequence/get#kotlin.CharSequence%24get%28kotlin.Int%29%2Findex&quot;&gt;index&lt;/a&gt; is out of its bounds.</source>
          <target state="translated">请注意，如果&lt;a href=&quot;../../kotlin/-char-sequence/get#kotlin.CharSequence%24get%28kotlin.Int%29%2Findex&quot;&gt;索引&lt;/a&gt;超出其范围，则Kotlin / JS中此接口的&lt;a href=&quot;../../kotlin/-string/index#kotlin.String&quot;&gt;String&lt;/a&gt;实现将具有未指定的行为。</target>
        </trans-unit>
        <trans-unit id="86d97d17b217564ee55541f4e63de5ad16ee2c54" translate="yes" xml:space="preserve">
          <source>Note that the &lt;code&gt;@DslMarker&lt;/code&gt; annotation is available only since Kotlin 1.1.</source>
          <target state="translated">请注意，仅自Kotlin 1.1起， &lt;code&gt;@DslMarker&lt;/code&gt; 批注才可用。</target>
        </trans-unit>
        <trans-unit id="e7b3f809dbbb0b87e0e79d9712336f436e1ff493" translate="yes" xml:space="preserve">
          <source>Note that the &lt;code&gt;componentN()&lt;/code&gt; functions need to be marked with the &lt;code&gt;operator&lt;/code&gt; keyword to allow using them in a destructuring declaration.</source>
          <target state="translated">请注意， &lt;code&gt;componentN()&lt;/code&gt; 函数需要用 &lt;code&gt;operator&lt;/code&gt; 关键字标记，以允许在解构声明中使用它们。</target>
        </trans-unit>
        <trans-unit id="4929a13b1b30f84a327018335edc5ac7a8c0ec7a" translate="yes" xml:space="preserve">
          <source>Note that the &lt;code&gt;external&lt;/code&gt; modifier is inherited by nested declarations. This is why in the example &lt;code&gt;Node&lt;/code&gt; class, we do not need to add the &lt;code&gt;external&lt;/code&gt; modifier before member functions and properties.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d942ddfab9f982a7bff6988ad53e1b8f734657f3" translate="yes" xml:space="preserve">
          <source>Note that the &lt;code&gt;kotlin-multiplaform&lt;/code&gt; plugin doesn't create any production binaries by default. The only binary available by default is a debug executable allowing one to run tests from the &lt;code&gt;test&lt;/code&gt; compilation.</source>
          <target state="translated">请注意，默认情况下， &lt;code&gt;kotlin-multiplaform&lt;/code&gt; 插件不会创建任何生产二进制文件。默认情况下，唯一可用的二进制文件是调试可执行文件，它允许从 &lt;code&gt;test&lt;/code&gt; 编译中运行测试。</target>
        </trans-unit>
        <trans-unit id="c656240136213ce9805ea2877dde6b34a8442c1b" translate="yes" xml:space="preserve">
          <source>Note that the &lt;code&gt;provideDelegate&lt;/code&gt; method affects only the creation of the auxiliary property and doesn't affect the code generated for getter or setter.</source>
          <target state="translated">请注意， &lt;code&gt;provideDelegate&lt;/code&gt; 方法仅影响辅助属性的创建，而不影响为getter或setter生成的代码。</target>
        </trans-unit>
        <trans-unit id="eaabc3c1b973d9e58d5da5690136b6ca64e5f983" translate="yes" xml:space="preserve">
          <source>Note that the &lt;code&gt;rem&lt;/code&gt; operator is supported since Kotlin 1.1. Kotlin 1.0 uses the &lt;code&gt;mod&lt;/code&gt; operator, which is deprecated in Kotlin 1.1.</source>
          <target state="translated">请注意，自Kotlin 1.1开始，支持 &lt;code&gt;rem&lt;/code&gt; 运算符。Kotlin 1.0使用 &lt;code&gt;mod&lt;/code&gt; 运算符，在Kotlin 1.1中已弃用。</target>
        </trans-unit>
        <trans-unit id="72e01dcbd71cc06e15070eae50092b4b7e9eed02" translate="yes" xml:space="preserve">
          <source>Note that the &lt;code&gt;to&lt;/code&gt; notation creates a short-living &lt;code&gt;Pair&lt;/code&gt; object, so it's recommended that you use it only if performance isn't critical. To avoid excessive memory usage, use alternative ways. For example, you can create a mutable map and populate it using the write operations. The &lt;a href=&quot;scope-functions#apply&quot;&gt;&lt;code&gt;apply()&lt;/code&gt;&lt;/a&gt; function can help to keep the initialization fluent here.</source>
          <target state="translated">请注意， &lt;code&gt;to&lt;/code&gt; 符号会创建一个短暂的 &lt;code&gt;Pair&lt;/code&gt; 对象，因此建议仅在性能不是很关键的情况下才使用它。为避免过多的内存使用，请使用其他方法。例如，您可以创建一个可变映射并使用写操作填充它。该&lt;a href=&quot;scope-functions#apply&quot;&gt; &lt;code&gt;apply()&lt;/code&gt; &lt;/a&gt;函数可以帮助留住初始化流畅。</target>
        </trans-unit>
        <trans-unit id="14f09727b2d752324269a0d82ae94535e1c1e4e5" translate="yes" xml:space="preserve">
          <source>Note that the String implementation of this interface in Kotlin/JS has unspecified behavior if the &lt;a href=&quot;../../kotlin/-char-sequence/get#kotlin.CharSequence%24get(kotlin.Int)/index&quot;&gt;index&lt;/a&gt; is out of its bounds.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ae0cdfd1c642695da1e12ec7f632f89942b6add0" translate="yes" xml:space="preserve">
          <source>Note that the char sequence passed to the &lt;a href=&quot;chunked#kotlin.text%24chunked%28kotlin.CharSequence%2C+kotlin.Int%2C+kotlin.Function1%28%28kotlin.CharSequence%2C+kotlin.text.chunked.R%29%29%29%2Ftransform&quot;&gt;transform&lt;/a&gt; function is ephemeral and is valid only inside that function. You should not store it or allow it to escape in some way, unless you made a snapshot of it. The last char sequence may have less characters than the given &lt;a href=&quot;chunked#kotlin.text%24chunked%28kotlin.CharSequence%2C+kotlin.Int%2C+kotlin.Function1%28%28kotlin.CharSequence%2C+kotlin.text.chunked.R%29%29%29%2Fsize&quot;&gt;size&lt;/a&gt;.</source>
          <target state="translated">请注意，传递给&lt;a href=&quot;chunked#kotlin.text%24chunked%28kotlin.CharSequence%2C+kotlin.Int%2C+kotlin.Function1%28%28kotlin.CharSequence%2C+kotlin.text.chunked.R%29%29%29%2Ftransform&quot;&gt;转换&lt;/a&gt;函数的char序列是短暂的，并且仅在该函数内部有效。除非您对其进行快照，否则不应存储它或以某种方式使其逃逸。最后一个字符序列的字符数可能少于给定的&lt;a href=&quot;chunked#kotlin.text%24chunked%28kotlin.CharSequence%2C+kotlin.Int%2C+kotlin.Function1%28%28kotlin.CharSequence%2C+kotlin.text.chunked.R%29%29%29%2Fsize&quot;&gt;大小&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="cd01abddf25872ce916797664b86dae36d2cc1ac" translate="yes" xml:space="preserve">
          <source>Note that the char sequence passed to the &lt;a href=&quot;chunked#kotlin.text%24chunked(kotlin.CharSequence,%20kotlin.Int,%20kotlin.Function1((kotlin.CharSequence,%20kotlin.text.chunked.R)))/transform&quot;&gt;transform&lt;/a&gt; function is ephemeral and is valid only inside that function. You should not store it or allow it to escape in some way, unless you made a snapshot of it. The last char sequence may have less characters than the given &lt;a href=&quot;chunked#kotlin.text%24chunked(kotlin.CharSequence,%20kotlin.Int,%20kotlin.Function1((kotlin.CharSequence,%20kotlin.text.chunked.R)))/size&quot;&gt;size&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="691b0c57806763a4b2bdecce9c41e605803c5ebe" translate="yes" xml:space="preserve">
          <source>Note that the char sequence passed to the &lt;a href=&quot;chunked-sequence#kotlin.text%24chunkedSequence%28kotlin.CharSequence%2C+kotlin.Int%2C+kotlin.Function1%28%28kotlin.CharSequence%2C+kotlin.text.chunkedSequence.R%29%29%29%2Ftransform&quot;&gt;transform&lt;/a&gt; function is ephemeral and is valid only inside that function. You should not store it or allow it to escape in some way, unless you made a snapshot of it. The last char sequence may have less characters than the given &lt;a href=&quot;chunked-sequence#kotlin.text%24chunkedSequence%28kotlin.CharSequence%2C+kotlin.Int%2C+kotlin.Function1%28%28kotlin.CharSequence%2C+kotlin.text.chunkedSequence.R%29%29%29%2Fsize&quot;&gt;size&lt;/a&gt;.</source>
          <target state="translated">请注意，传递给&lt;a href=&quot;chunked-sequence#kotlin.text%24chunkedSequence%28kotlin.CharSequence%2C+kotlin.Int%2C+kotlin.Function1%28%28kotlin.CharSequence%2C+kotlin.text.chunkedSequence.R%29%29%29%2Ftransform&quot;&gt;转换&lt;/a&gt;函数的char序列是短暂的，并且仅在该函数内部有效。除非您对其进行快照，否则不应存储它或以某种方式使其逃逸。最后一个字符序列的字符数可能少于给定的&lt;a href=&quot;chunked-sequence#kotlin.text%24chunkedSequence%28kotlin.CharSequence%2C+kotlin.Int%2C+kotlin.Function1%28%28kotlin.CharSequence%2C+kotlin.text.chunkedSequence.R%29%29%29%2Fsize&quot;&gt;大小&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="66c2ad296d8e177430bc0fa68ba7b9eb97117778" translate="yes" xml:space="preserve">
          <source>Note that the char sequence passed to the &lt;a href=&quot;chunked-sequence#kotlin.text%24chunkedSequence(kotlin.CharSequence,%20kotlin.Int,%20kotlin.Function1((kotlin.CharSequence,%20kotlin.text.chunkedSequence.R)))/transform&quot;&gt;transform&lt;/a&gt; function is ephemeral and is valid only inside that function. You should not store it or allow it to escape in some way, unless you made a snapshot of it. The last char sequence may have less characters than the given &lt;a href=&quot;chunked-sequence#kotlin.text%24chunkedSequence(kotlin.CharSequence,%20kotlin.Int,%20kotlin.Function1((kotlin.CharSequence,%20kotlin.text.chunkedSequence.R)))/size&quot;&gt;size&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1754418c79853b8c6ec574fcc023dbf40a7d737e" translate="yes" xml:space="preserve">
          <source>Note that the char sequence passed to the &lt;a href=&quot;windowed#kotlin.text%24windowed%28kotlin.CharSequence%2C+kotlin.Int%2C+kotlin.Int%2C+kotlin.Boolean%2C+kotlin.Function1%28%28kotlin.CharSequence%2C+kotlin.text.windowed.R%29%29%29%2Ftransform&quot;&gt;transform&lt;/a&gt; function is ephemeral and is valid only inside that function. You should not store it or allow it to escape in some way, unless you made a snapshot of it. Several last char sequences may have less characters than the given &lt;a href=&quot;windowed#kotlin.text%24windowed%28kotlin.CharSequence%2C+kotlin.Int%2C+kotlin.Int%2C+kotlin.Boolean%2C+kotlin.Function1%28%28kotlin.CharSequence%2C+kotlin.text.windowed.R%29%29%29%2Fsize&quot;&gt;size&lt;/a&gt;.</source>
          <target state="translated">请注意，传递给&lt;a href=&quot;windowed#kotlin.text%24windowed%28kotlin.CharSequence%2C+kotlin.Int%2C+kotlin.Int%2C+kotlin.Boolean%2C+kotlin.Function1%28%28kotlin.CharSequence%2C+kotlin.text.windowed.R%29%29%29%2Ftransform&quot;&gt;转换&lt;/a&gt;函数的char序列是短暂的，并且仅在该函数内部有效。除非您对其进行快照，否则不应存储它或以某种方式使其逃逸。最后几个char序列的字符数可能少于给定的&lt;a href=&quot;windowed#kotlin.text%24windowed%28kotlin.CharSequence%2C+kotlin.Int%2C+kotlin.Int%2C+kotlin.Boolean%2C+kotlin.Function1%28%28kotlin.CharSequence%2C+kotlin.text.windowed.R%29%29%29%2Fsize&quot;&gt;大小&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="8a3008d758022d0b209de4899387968b8ac78ed4" translate="yes" xml:space="preserve">
          <source>Note that the char sequence passed to the &lt;a href=&quot;windowed#kotlin.text%24windowed(kotlin.CharSequence,%20kotlin.Int,%20kotlin.Int,%20kotlin.Boolean,%20kotlin.Function1((kotlin.CharSequence,%20kotlin.text.windowed.R)))/transform&quot;&gt;transform&lt;/a&gt; function is ephemeral and is valid only inside that function. You should not store it or allow it to escape in some way, unless you made a snapshot of it. Several last char sequences may have less characters than the given &lt;a href=&quot;windowed#kotlin.text%24windowed(kotlin.CharSequence,%20kotlin.Int,%20kotlin.Int,%20kotlin.Boolean,%20kotlin.Function1((kotlin.CharSequence,%20kotlin.text.windowed.R)))/size&quot;&gt;size&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="266d21f640d721c4dd41a4ded8abb4f2b56ec11c" translate="yes" xml:space="preserve">
          <source>Note that the char sequence passed to the &lt;a href=&quot;windowed-sequence#kotlin.text%24windowedSequence%28kotlin.CharSequence%2C+kotlin.Int%2C+kotlin.Int%2C+kotlin.Boolean%2C+kotlin.Function1%28%28kotlin.CharSequence%2C+kotlin.text.windowedSequence.R%29%29%29%2Ftransform&quot;&gt;transform&lt;/a&gt; function is ephemeral and is valid only inside that function. You should not store it or allow it to escape in some way, unless you made a snapshot of it. Several last char sequences may have less characters than the given &lt;a href=&quot;windowed-sequence#kotlin.text%24windowedSequence%28kotlin.CharSequence%2C+kotlin.Int%2C+kotlin.Int%2C+kotlin.Boolean%2C+kotlin.Function1%28%28kotlin.CharSequence%2C+kotlin.text.windowedSequence.R%29%29%29%2Fsize&quot;&gt;size&lt;/a&gt;.</source>
          <target state="translated">请注意，传递给&lt;a href=&quot;windowed-sequence#kotlin.text%24windowedSequence%28kotlin.CharSequence%2C+kotlin.Int%2C+kotlin.Int%2C+kotlin.Boolean%2C+kotlin.Function1%28%28kotlin.CharSequence%2C+kotlin.text.windowedSequence.R%29%29%29%2Ftransform&quot;&gt;转换&lt;/a&gt;函数的char序列是短暂的，并且仅在该函数内部有效。除非您对其进行快照，否则不应存储它或以某种方式使其逃逸。最后几个char序列的字符数可能少于给定的&lt;a href=&quot;windowed-sequence#kotlin.text%24windowedSequence%28kotlin.CharSequence%2C+kotlin.Int%2C+kotlin.Int%2C+kotlin.Boolean%2C+kotlin.Function1%28%28kotlin.CharSequence%2C+kotlin.text.windowedSequence.R%29%29%29%2Fsize&quot;&gt;大小&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="e51326b0cfaf636fb6a7d19970d3f5dc2bf4c4ac" translate="yes" xml:space="preserve">
          <source>Note that the char sequence passed to the &lt;a href=&quot;windowed-sequence#kotlin.text%24windowedSequence(kotlin.CharSequence,%20kotlin.Int,%20kotlin.Int,%20kotlin.Boolean,%20kotlin.Function1((kotlin.CharSequence,%20kotlin.text.windowedSequence.R)))/transform&quot;&gt;transform&lt;/a&gt; function is ephemeral and is valid only inside that function. You should not store it or allow it to escape in some way, unless you made a snapshot of it. Several last char sequences may have less characters than the given &lt;a href=&quot;windowed-sequence#kotlin.text%24windowedSequence(kotlin.CharSequence,%20kotlin.Int,%20kotlin.Int,%20kotlin.Boolean,%20kotlin.Function1((kotlin.CharSequence,%20kotlin.text.windowedSequence.R)))/size&quot;&gt;size&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eeca19ffbd81bf7218d5ce25611e87d001f58db2" translate="yes" xml:space="preserve">
          <source>Note that the compiler only uses the properties defined inside the primary constructor for the automatically generated functions. To exclude a property from the generated implementations, declare it inside the class body:</source>
          <target state="translated">请注意,编译器只对自动生成的函数使用主构造函数内部定义的属性。要从生成的实现中排除一个属性,请在类体中声明它。</target>
        </trans-unit>
        <trans-unit id="29a5989520a2bf8fd601f2d782fa7b5f4d18221d" translate="yes" xml:space="preserve">
          <source>Note that the content of &lt;code&gt;platform.posix&lt;/code&gt; is NOT identical on different platforms, in the same way as different &lt;code&gt;POSIX&lt;/code&gt; implementations are a little different.</source>
          <target state="translated">请注意，在不同的平台上， &lt;code&gt;platform.posix&lt;/code&gt; 的内容并不相同，因为不同的 &lt;code&gt;POSIX&lt;/code&gt; 实现略有不同。</target>
        </trans-unit>
        <trans-unit id="6e0ba2d2cb4d8f4a9dbc1b85a017969941095acd" translate="yes" xml:space="preserve">
          <source>Note that the databinding expression language uses the same syntax for referring to properties as Kotlin: &lt;code&gt;data.imageUrl&lt;/code&gt;. In Kotlin you can write &lt;code&gt;v.prop&lt;/code&gt; instead of &lt;code&gt;v.getProp()&lt;/code&gt; even if &lt;code&gt;getProp()&lt;/code&gt; is a Java method. Similarly, instead of calling a setter directly, you may use an assignment:</source>
          <target state="translated">请注意，数据绑定表达语言使用与Kotlin相同的语法来引用属性： &lt;code&gt;data.imageUrl&lt;/code&gt; 。在Kotlin中，即使 &lt;code&gt;getProp()&lt;/code&gt; 是Java方法，也可以编写 &lt;code&gt;v.prop&lt;/code&gt; 而不是 &lt;code&gt;v.getProp()&lt;/code&gt; 。同样，您可以使用分配来代替直接调用设置器：</target>
        </trans-unit>
        <trans-unit id="e38cb3723f44256fc4af27d394f0da73badd7310" translate="yes" xml:space="preserve">
          <source>Note that the first build isn't incremental in any case.</source>
          <target state="translated">注意,第一次构建无论如何都不是增量的。</target>
        </trans-unit>
        <trans-unit id="3539b1a59eaf5408904eb51b677999543b8a5f8e" translate="yes" xml:space="preserve">
          <source>Note that the list passed to the &lt;a href=&quot;chunked#kotlin.collections%24chunked%28kotlin.collections.Iterable%28%28kotlin.collections.chunked.T%29%29%2C+kotlin.Int%2C+kotlin.Function1%28%28kotlin.collections.List%28%28kotlin.collections.chunked.T%29%29%2C+kotlin.collections.chunked.R%29%29%29%2Ftransform&quot;&gt;transform&lt;/a&gt; function is ephemeral and is valid only inside that function. You should not store it or allow it to escape in some way, unless you made a snapshot of it. The last list may have less elements than the given &lt;a href=&quot;chunked#kotlin.collections%24chunked%28kotlin.collections.Iterable%28%28kotlin.collections.chunked.T%29%29%2C+kotlin.Int%2C+kotlin.Function1%28%28kotlin.collections.List%28%28kotlin.collections.chunked.T%29%29%2C+kotlin.collections.chunked.R%29%29%29%2Fsize&quot;&gt;size&lt;/a&gt;.</source>
          <target state="translated">请注意，传递给&lt;a href=&quot;chunked#kotlin.collections%24chunked%28kotlin.collections.Iterable%28%28kotlin.collections.chunked.T%29%29%2C+kotlin.Int%2C+kotlin.Function1%28%28kotlin.collections.List%28%28kotlin.collections.chunked.T%29%29%2C+kotlin.collections.chunked.R%29%29%29%2Ftransform&quot;&gt;transform&lt;/a&gt;函数的列表是临时列表，仅在该函数内部有效。除非您对其进行快照，否则不应存储它或以某种方式使其逃逸。最后一个列表的元素数可能少于给定的&lt;a href=&quot;chunked#kotlin.collections%24chunked%28kotlin.collections.Iterable%28%28kotlin.collections.chunked.T%29%29%2C+kotlin.Int%2C+kotlin.Function1%28%28kotlin.collections.List%28%28kotlin.collections.chunked.T%29%29%2C+kotlin.collections.chunked.R%29%29%29%2Fsize&quot;&gt;大小&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="36bd5508df864c7458e1fccd9c81158cc477d507" translate="yes" xml:space="preserve">
          <source>Note that the list passed to the &lt;a href=&quot;chunked#kotlin.collections%24chunked(kotlin.collections.Iterable((kotlin.collections.chunked.T)),%20kotlin.Int,%20kotlin.Function1((kotlin.collections.List((kotlin.collections.chunked.T)),%20kotlin.collections.chunked.R)))/transform&quot;&gt;transform&lt;/a&gt; function is ephemeral and is valid only inside that function. You should not store it or allow it to escape in some way, unless you made a snapshot of it. The last list may have less elements than the given &lt;a href=&quot;chunked#kotlin.collections%24chunked(kotlin.collections.Iterable((kotlin.collections.chunked.T)),%20kotlin.Int,%20kotlin.Function1((kotlin.collections.List((kotlin.collections.chunked.T)),%20kotlin.collections.chunked.R)))/size&quot;&gt;size&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7d6ec3f60ea3d3f0e1450f4fd127d92b3dabc464" translate="yes" xml:space="preserve">
          <source>Note that the list passed to the &lt;a href=&quot;chunked#kotlin.sequences%24chunked%28kotlin.sequences.Sequence%28%28kotlin.sequences.chunked.T%29%29%2C+kotlin.Int%2C+kotlin.Function1%28%28kotlin.collections.List%28%28kotlin.sequences.chunked.T%29%29%2C+kotlin.sequences.chunked.R%29%29%29%2Ftransform&quot;&gt;transform&lt;/a&gt; function is ephemeral and is valid only inside that function. You should not store it or allow it to escape in some way, unless you made a snapshot of it. The last list may have less elements than the given &lt;a href=&quot;chunked#kotlin.sequences%24chunked%28kotlin.sequences.Sequence%28%28kotlin.sequences.chunked.T%29%29%2C+kotlin.Int%2C+kotlin.Function1%28%28kotlin.collections.List%28%28kotlin.sequences.chunked.T%29%29%2C+kotlin.sequences.chunked.R%29%29%29%2Fsize&quot;&gt;size&lt;/a&gt;.</source>
          <target state="translated">请注意，传递给&lt;a href=&quot;chunked#kotlin.sequences%24chunked%28kotlin.sequences.Sequence%28%28kotlin.sequences.chunked.T%29%29%2C+kotlin.Int%2C+kotlin.Function1%28%28kotlin.collections.List%28%28kotlin.sequences.chunked.T%29%29%2C+kotlin.sequences.chunked.R%29%29%29%2Ftransform&quot;&gt;transform&lt;/a&gt;函数的列表是临时列表，仅在该函数内部有效。除非您对其进行快照，否则不应存储它或以某种方式使其逃逸。最后一个列表的元素数可能少于给定的&lt;a href=&quot;chunked#kotlin.sequences%24chunked%28kotlin.sequences.Sequence%28%28kotlin.sequences.chunked.T%29%29%2C+kotlin.Int%2C+kotlin.Function1%28%28kotlin.collections.List%28%28kotlin.sequences.chunked.T%29%29%2C+kotlin.sequences.chunked.R%29%29%29%2Fsize&quot;&gt;大小&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="b4dd0c4a7944c546ed18e9237812f399b9a75bb2" translate="yes" xml:space="preserve">
          <source>Note that the list passed to the &lt;a href=&quot;chunked#kotlin.sequences%24chunked(kotlin.sequences.Sequence((kotlin.sequences.chunked.T)),%20kotlin.Int,%20kotlin.Function1((kotlin.collections.List((kotlin.sequences.chunked.T)),%20kotlin.sequences.chunked.R)))/transform&quot;&gt;transform&lt;/a&gt; function is ephemeral and is valid only inside that function. You should not store it or allow it to escape in some way, unless you made a snapshot of it. The last list may have less elements than the given &lt;a href=&quot;chunked#kotlin.sequences%24chunked(kotlin.sequences.Sequence((kotlin.sequences.chunked.T)),%20kotlin.Int,%20kotlin.Function1((kotlin.collections.List((kotlin.sequences.chunked.T)),%20kotlin.sequences.chunked.R)))/size&quot;&gt;size&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a0c9e1743347f1aa8d11316573c39fab1f4d2b86" translate="yes" xml:space="preserve">
          <source>Note that the list passed to the &lt;a href=&quot;windowed#kotlin.collections%24windowed%28kotlin.collections.Iterable%28%28kotlin.collections.windowed.T%29%29%2C+kotlin.Int%2C+kotlin.Int%2C+kotlin.Boolean%2C+kotlin.Function1%28%28kotlin.collections.List%28%28kotlin.collections.windowed.T%29%29%2C+kotlin.collections.windowed.R%29%29%29%2Ftransform&quot;&gt;transform&lt;/a&gt; function is ephemeral and is valid only inside that function. You should not store it or allow it to escape in some way, unless you made a snapshot of it. Several last lists may have less elements than the given &lt;a href=&quot;windowed#kotlin.collections%24windowed%28kotlin.collections.Iterable%28%28kotlin.collections.windowed.T%29%29%2C+kotlin.Int%2C+kotlin.Int%2C+kotlin.Boolean%2C+kotlin.Function1%28%28kotlin.collections.List%28%28kotlin.collections.windowed.T%29%29%2C+kotlin.collections.windowed.R%29%29%29%2Fsize&quot;&gt;size&lt;/a&gt;.</source>
          <target state="translated">请注意，传递给&lt;a href=&quot;windowed#kotlin.collections%24windowed%28kotlin.collections.Iterable%28%28kotlin.collections.windowed.T%29%29%2C+kotlin.Int%2C+kotlin.Int%2C+kotlin.Boolean%2C+kotlin.Function1%28%28kotlin.collections.List%28%28kotlin.collections.windowed.T%29%29%2C+kotlin.collections.windowed.R%29%29%29%2Ftransform&quot;&gt;transform&lt;/a&gt;函数的列表是临时列表，仅在该函数内部有效。除非您对其进行快照，否则不应存储它或以某种方式使其逃逸。最后几个列表的元素可能少于给定的&lt;a href=&quot;windowed#kotlin.collections%24windowed%28kotlin.collections.Iterable%28%28kotlin.collections.windowed.T%29%29%2C+kotlin.Int%2C+kotlin.Int%2C+kotlin.Boolean%2C+kotlin.Function1%28%28kotlin.collections.List%28%28kotlin.collections.windowed.T%29%29%2C+kotlin.collections.windowed.R%29%29%29%2Fsize&quot;&gt;大小&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="fccc14666a62fb388999ea11066179edff1c4d5e" translate="yes" xml:space="preserve">
          <source>Note that the list passed to the &lt;a href=&quot;windowed#kotlin.collections%24windowed(kotlin.collections.Iterable((kotlin.collections.windowed.T)),%20kotlin.Int,%20kotlin.Int,%20kotlin.Boolean,%20kotlin.Function1((kotlin.collections.List((kotlin.collections.windowed.T)),%20kotlin.collections.windowed.R)))/transform&quot;&gt;transform&lt;/a&gt; function is ephemeral and is valid only inside that function. You should not store it or allow it to escape in some way, unless you made a snapshot of it. Several last lists may have less elements than the given &lt;a href=&quot;windowed#kotlin.collections%24windowed(kotlin.collections.Iterable((kotlin.collections.windowed.T)),%20kotlin.Int,%20kotlin.Int,%20kotlin.Boolean,%20kotlin.Function1((kotlin.collections.List((kotlin.collections.windowed.T)),%20kotlin.collections.windowed.R)))/size&quot;&gt;size&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b9a01e230c14a996ac73932af98798f763d520bb" translate="yes" xml:space="preserve">
          <source>Note that the list passed to the &lt;a href=&quot;windowed#kotlin.sequences%24windowed%28kotlin.sequences.Sequence%28%28kotlin.sequences.windowed.T%29%29%2C+kotlin.Int%2C+kotlin.Int%2C+kotlin.Boolean%2C+kotlin.Function1%28%28kotlin.collections.List%28%28kotlin.sequences.windowed.T%29%29%2C+kotlin.sequences.windowed.R%29%29%29%2Ftransform&quot;&gt;transform&lt;/a&gt; function is ephemeral and is valid only inside that function. You should not store it or allow it to escape in some way, unless you made a snapshot of it. Several last lists may have less elements than the given &lt;a href=&quot;windowed#kotlin.sequences%24windowed%28kotlin.sequences.Sequence%28%28kotlin.sequences.windowed.T%29%29%2C+kotlin.Int%2C+kotlin.Int%2C+kotlin.Boolean%2C+kotlin.Function1%28%28kotlin.collections.List%28%28kotlin.sequences.windowed.T%29%29%2C+kotlin.sequences.windowed.R%29%29%29%2Fsize&quot;&gt;size&lt;/a&gt;.</source>
          <target state="translated">请注意，传递给&lt;a href=&quot;windowed#kotlin.sequences%24windowed%28kotlin.sequences.Sequence%28%28kotlin.sequences.windowed.T%29%29%2C+kotlin.Int%2C+kotlin.Int%2C+kotlin.Boolean%2C+kotlin.Function1%28%28kotlin.collections.List%28%28kotlin.sequences.windowed.T%29%29%2C+kotlin.sequences.windowed.R%29%29%29%2Ftransform&quot;&gt;transform&lt;/a&gt;函数的列表是临时列表，仅在该函数内部有效。除非您对其进行快照，否则不应存储它或以某种方式使其逃逸。最后几个列表的元素可能少于给定的&lt;a href=&quot;windowed#kotlin.sequences%24windowed%28kotlin.sequences.Sequence%28%28kotlin.sequences.windowed.T%29%29%2C+kotlin.Int%2C+kotlin.Int%2C+kotlin.Boolean%2C+kotlin.Function1%28%28kotlin.collections.List%28%28kotlin.sequences.windowed.T%29%29%2C+kotlin.sequences.windowed.R%29%29%29%2Fsize&quot;&gt;大小&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="01be197fd2cc3bdf986de65122c65771b937478d" translate="yes" xml:space="preserve">
          <source>Note that the list passed to the &lt;a href=&quot;windowed#kotlin.sequences%24windowed(kotlin.sequences.Sequence((kotlin.sequences.windowed.T)),%20kotlin.Int,%20kotlin.Int,%20kotlin.Boolean,%20kotlin.Function1((kotlin.collections.List((kotlin.sequences.windowed.T)),%20kotlin.sequences.windowed.R)))/transform&quot;&gt;transform&lt;/a&gt; function is ephemeral and is valid only inside that function. You should not store it or allow it to escape in some way, unless you made a snapshot of it. Several last lists may have less elements than the given &lt;a href=&quot;windowed#kotlin.sequences%24windowed(kotlin.sequences.Sequence((kotlin.sequences.windowed.T)),%20kotlin.Int,%20kotlin.Int,%20kotlin.Boolean,%20kotlin.Function1((kotlin.collections.List((kotlin.sequences.windowed.T)),%20kotlin.sequences.windowed.R)))/size&quot;&gt;size&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d6259e89a9a4c0b547dbd66ff1bea24b671ef991" translate="yes" xml:space="preserve">
          <source>Note that the module metadata published by Gradle 5.3 and above cannot be read by Gradle versions older than 5.3.</source>
          <target state="translated">请注意,Gradle 5.3及以上版本发布的模块元数据不能被5.3以上的Gradle版本读取。</target>
        </trans-unit>
        <trans-unit id="289248f23bcb06f8e447242c0fc575e0c1a20430" translate="yes" xml:space="preserve">
          <source>Note that the named argument syntax cannot be used when calling Java functions, because Java bytecode does not always preserve names of function parameters.</source>
          <target state="translated">请注意,在调用Java函数时不能使用命名参数语法,因为Java字节码并不总是保存函数参数的名称。</target>
        </trans-unit>
        <trans-unit id="7b39b5b0c66187e76139e4031731bcf6a323f589" translate="yes" xml:space="preserve">
          <source>Note that the operation is not guaranteed to be atomic if the map is being modified concurrently.</source>
          <target state="translated">请注意,如果地图被并发修改,则不能保证操作是原子的。</target>
        </trans-unit>
        <trans-unit id="f1adf6c7e534562475c3f5e5643436265ce9a453" translate="yes" xml:space="preserve">
          <source>Note that the opposite reversed translation is not implemented yet: Swift/Objective-C error-throwing methods aren't imported to Kotlin as exception-throwing.</source>
          <target state="translated">请注意,目前还没有实现相反的反向翻译。Swift/Objective-C的错误抛出方法并没有作为异常抛出方法导入到Kotlin中。</target>
        </trans-unit>
        <trans-unit id="13e4f5805154eec53798d94ef883500f35ad56a4" translate="yes" xml:space="preserve">
          <source>Note that the other uses of curly braces in Kotlin, such as in function and class definitions and after &lt;code&gt;if&lt;/code&gt;/&lt;code&gt;else&lt;/code&gt;/&lt;code&gt;for&lt;/code&gt;/&lt;code&gt;while&lt;/code&gt; statements, are not lambda expressions (so it is &lt;em&gt;not&lt;/em&gt; the case that &lt;code&gt;if&lt;/code&gt; is a function that conditionally executes a lambda function).</source>
          <target state="translated">请注意，Kotlin中花括号的其他用法（例如在函数和类定义中以及 &lt;code&gt;if&lt;/code&gt; / &lt;code&gt;else&lt;/code&gt; / &lt;code&gt;for&lt;/code&gt; / &lt;code&gt;while&lt;/code&gt; 语句之后）不是lambda表达式（因此， &lt;code&gt;if&lt;/code&gt; 是有条件地执行lambda的函数的情况&lt;em&gt;并非&lt;/em&gt;如此）功能）。</target>
        </trans-unit>
        <trans-unit id="29cdb0fff079bd2313b913b84a243b2ced642967" translate="yes" xml:space="preserve">
          <source>Note that the returned instance uses itself to synchronize on. Do not synchronize from external code on the returned instance as it may cause accidental deadlock. Also this behavior can be changed in the future.</source>
          <target state="translated">注意,返回的实例使用自己来同步。不要从外部代码在返回的实例上进行同步,因为这可能会导致意外的死锁。另外这个行为可以在将来改变。</target>
        </trans-unit>
        <trans-unit id="ab68d93b5c9158ca99b7d3217cfebeb0bc1dbe0f" translate="yes" xml:space="preserve">
          <source>Note that the reverse operation may produce new surrogate pairs that were unpaired low-surrogates and high-surrogates before the operation. For example, reversing &lt;code&gt;&quot;\uDC00\uD800&quot;&lt;/code&gt; produces &lt;code&gt;&quot;\uD800\uDC00&quot;&lt;/code&gt; which is a valid surrogate pair.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="99bb4d1e09ed7e1f3f7c48bd69bd7281f7032077" translate="yes" xml:space="preserve">
          <source>Note that the source sequence and the array being added are iterated only when an &lt;code&gt;iterator&lt;/code&gt; is requested from the resulting sequence. Changing any of them between successive calls to &lt;code&gt;iterator&lt;/code&gt; may affect the result.</source>
          <target state="translated">请注意，仅当从结果序列中请求 &lt;code&gt;iterator&lt;/code&gt; 时，才对源序列和要添加的数组进行迭代。在连续调用 &lt;code&gt;iterator&lt;/code&gt; 之间更改它们中的任何一个都可能影响结果。</target>
        </trans-unit>
        <trans-unit id="4bc2850950af5238d132e57cd0616b073acff952" translate="yes" xml:space="preserve">
          <source>Note that the source sequence and the array being subtracted are iterated only when an &lt;code&gt;iterator&lt;/code&gt; is requested from the resulting sequence. Changing any of them between successive calls to &lt;code&gt;iterator&lt;/code&gt; may affect the result.</source>
          <target state="translated">注意，仅当从结果序列中请求 &lt;code&gt;iterator&lt;/code&gt; 时，才迭代源序列和要减去的数组。在连续调用 &lt;code&gt;iterator&lt;/code&gt; 之间更改它们中的任何一个都可能影响结果。</target>
        </trans-unit>
        <trans-unit id="8cd8b63a074395eb7bac096117fd2d1a65ca128f" translate="yes" xml:space="preserve">
          <source>Note that the source sequence and the collection being added are iterated only when an &lt;code&gt;iterator&lt;/code&gt; is requested from the resulting sequence. Changing any of them between successive calls to &lt;code&gt;iterator&lt;/code&gt; may affect the result.</source>
          <target state="translated">请注意，仅当从结果序列中请求 &lt;code&gt;iterator&lt;/code&gt; 时，才对源序列和要添加的集合进行迭代。在连续调用 &lt;code&gt;iterator&lt;/code&gt; 之间更改它们中的任何一个都可能影响结果。</target>
        </trans-unit>
        <trans-unit id="230e838a21a0d86d33ae636264aea12d232d60bc" translate="yes" xml:space="preserve">
          <source>Note that the source sequence and the collection being subtracted are iterated only when an &lt;code&gt;iterator&lt;/code&gt; is requested from the resulting sequence. Changing any of them between successive calls to &lt;code&gt;iterator&lt;/code&gt; may affect the result.</source>
          <target state="translated">请注意，仅当从结果序列中请求 &lt;code&gt;iterator&lt;/code&gt; 时，才对源序列和要减去的集合进行迭代。在连续调用 &lt;code&gt;iterator&lt;/code&gt; 之间更改它们中的任何一个都可能影响结果。</target>
        </trans-unit>
        <trans-unit id="1d7a2c8875e7a4328f4bc1cb1a337451636c5765" translate="yes" xml:space="preserve">
          <source>Note that the source sequence and the sequence being added are iterated only when an &lt;code&gt;iterator&lt;/code&gt; is requested from the resulting sequence. Changing any of them between successive calls to &lt;code&gt;iterator&lt;/code&gt; may affect the result.</source>
          <target state="translated">注意，仅当从结果序列中请求 &lt;code&gt;iterator&lt;/code&gt; 时，才对源序列和要添加的序列进行迭代。在连续调用 &lt;code&gt;iterator&lt;/code&gt; 之间更改它们中的任何一个都可能影响结果。</target>
        </trans-unit>
        <trans-unit id="9b6c8e7b439f69f32239265aaaa738e3fcea0362" translate="yes" xml:space="preserve">
          <source>Note that the source sequence and the sequence being subtracted are iterated only when an &lt;code&gt;iterator&lt;/code&gt; is requested from the resulting sequence. Changing any of them between successive calls to &lt;code&gt;iterator&lt;/code&gt; may affect the result.</source>
          <target state="translated">注意，仅当从结果序列中请求 &lt;code&gt;iterator&lt;/code&gt; 时，才迭代源序列和要减去的序列。在连续调用 &lt;code&gt;iterator&lt;/code&gt; 之间更改它们中的任何一个都可能影响结果。</target>
        </trans-unit>
        <trans-unit id="0f3815a86501d3751673db13b1bc40b17a55063d" translate="yes" xml:space="preserve">
          <source>Note that the syntax &lt;code&gt;this::prop&lt;/code&gt; to refer a &lt;a href=&quot;reflection#bound-function-and-property-references-since-11&quot;&gt;bound callable reference&lt;/a&gt; in the code directly has only been available since Kotlin 1.1.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="be4783ce40fed5c138c67544445542f050cb0f80" translate="yes" xml:space="preserve">
          <source>Note that the syntax &lt;code&gt;this::prop&lt;/code&gt; to refer a &lt;a href=&quot;reflection#bound-function-and-property-references-since-11&quot;&gt;bound callable reference&lt;/a&gt; in the code directly is available only since Kotlin 1.1.</source>
          <target state="translated">请注意，仅从Kotlin 1.1开始， &lt;code&gt;this::prop&lt;/code&gt; 语法即可直接在代码中&lt;a href=&quot;reflection#bound-function-and-property-references-since-11&quot;&gt;引用绑定的可调用引用&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="2949a431bbdf8be1e322b0911e16815ddc68d4b3" translate="yes" xml:space="preserve">
          <source>Note that the terms &quot;subclass&quot; and &quot;superclass&quot; can span multiple levels of inheritance - &lt;code&gt;Car&lt;/code&gt; is a subclass of &lt;code&gt;Any&lt;/code&gt;, and &lt;code&gt;Any&lt;/code&gt; is the superclass of everything. If we want to restrict ourselves to one level of inheritance, we will say &quot;direct subclass&quot; or &quot;direct superclass&quot;.</source>
          <target state="translated">请注意，术语&amp;ldquo;子类&amp;rdquo;和&amp;ldquo;超类&amp;rdquo;可以跨越多个继承级别 &lt;code&gt;Car&lt;/code&gt; 是 &lt;code&gt;Any&lt;/code&gt; 的子类，而 &lt;code&gt;Any&lt;/code&gt; 是一切的超类。如果我们想将自己限制在一个继承级别，我们将说&amp;ldquo;直接子类&amp;rdquo;或&amp;ldquo;直接超类&amp;rdquo;。</target>
        </trans-unit>
        <trans-unit id="6f04df739b130f057070e51840257477306e9abb" translate="yes" xml:space="preserve">
          <source>Note that the trailing newline of each line is stripped. You can also call &lt;code&gt;readLines()&lt;/code&gt; on a file object to get a list of all the lines, or &lt;code&gt;useLines()&lt;/code&gt; to supply a function that will be called on every line. If you simply want the entire file contents as one string or byte array, call &lt;code&gt;readText()&lt;/code&gt; or &lt;code&gt;readBytes()&lt;/code&gt;, respectively.</source>
          <target state="translated">请注意，每行的尾随换行符均已删除。您还可以在文件对象上调用 &lt;code&gt;readLines()&lt;/code&gt; 以获取所有行的列表，或使用 &lt;code&gt;useLines()&lt;/code&gt; 提供将在每一行上调用的函数。如果您只是希望将整个文件内容作为一个字符串或字节数组，请分别调用 &lt;code&gt;readText()&lt;/code&gt; 或 &lt;code&gt;readBytes()&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="3233b123410bb0637d15ef36074b9c50ad6be8ca" translate="yes" xml:space="preserve">
          <source>Note that the type of a property must be explicitly specified. As opposed to Python, declaring a property directly inside the class does not create a class-level property, but an instance-level one: every instance of &lt;code&gt;Person&lt;/code&gt; will have &lt;em&gt;its own&lt;/em&gt;&lt;code&gt;name&lt;/code&gt; and &lt;code&gt;age&lt;/code&gt;. Their values will start out in every instance as &lt;code&gt;&quot;Anne&quot;&lt;/code&gt; and &lt;code&gt;32&lt;/code&gt;, respectively, but the value in each instance can be modified independently of the others:</source>
          <target state="translated">请注意，必须明确指定属性的类型。与Python相反，在类内部直接声明属性不会创建类级别的属性，而是创建实例级别的属性： &lt;code&gt;Person&lt;/code&gt; 的每个实例都有&lt;em&gt;其自己的&lt;/em&gt; &lt;code&gt;name&lt;/code&gt; 和 &lt;code&gt;age&lt;/code&gt; 。它们的值将在每个实例中分别以 &lt;code&gt;&quot;Anne&quot;&lt;/code&gt; 和 &lt;code&gt;32&lt;/code&gt; 开头，但是每个实例中的值可以独立于其他实例进行修改：</target>
        </trans-unit>
        <trans-unit id="f7f16b8fd146ff06d4c86373cb61d32bd374065c" translate="yes" xml:space="preserve">
          <source>Note that the type systems of TypeScript and Kotlin do not match exactly, so you may need to edit the generated headers in case you encounter difficulties with using the APIs from Kotlin.</source>
          <target state="translated">注意TypeScript和Kotlin的类型系统并不完全匹配,所以你可能需要编辑生成的头文件,以防你在使用Kotlin的API时遇到困难。</target>
        </trans-unit>
        <trans-unit id="b0f31d7eb5e41ba2d64378a5f837d7e8fe985ed7" translate="yes" xml:space="preserve">
          <source>Note that the use of local returns in previous three examples is similar to the use of &lt;em&gt;continue&lt;/em&gt; in regular loops. There is no direct equivalent for &lt;em&gt;break&lt;/em&gt;, but it can be simulated by adding another nesting lambda and non-locally returning from it:</source>
          <target state="translated">请注意，在前三个示例中使用局部返回类似于在常规循环中使用&lt;em&gt;continue&lt;/em&gt;。没有&lt;em&gt;break的&lt;/em&gt;直接等效项，但是可以通过添加另一个嵌套lambda并从其非本地返回来模拟它：</target>
        </trans-unit>
        <trans-unit id="3f8c27f5e2c38c0c780333a188295d27c17547ca" translate="yes" xml:space="preserve">
          <source>Note that there are some cases in which the Kotlin compiler does not apply mangling:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c4baab91a6183da58c03d16fdff1a5962cf6d45a" translate="yes" xml:space="preserve">
          <source>Note that there must be no space between &lt;code&gt;continue&lt;/code&gt;/&lt;code&gt;break&lt;/code&gt; and &lt;code&gt;@&lt;/code&gt;.</source>
          <target state="translated">注意， &lt;code&gt;continue&lt;/code&gt; / &lt;code&gt;break&lt;/code&gt; 和 &lt;code&gt;@&lt;/code&gt; 之间不能有空格。</target>
        </trans-unit>
        <trans-unit id="9d4ed672615deb4b3ea8e8cf90856dae61208644" translate="yes" xml:space="preserve">
          <source>Note that there's no point in optimizing your code when comparing to &lt;code&gt;null&lt;/code&gt; explicitly: &lt;code&gt;a == null&lt;/code&gt; will be automatically translated to &lt;code&gt;a === null&lt;/code&gt;.</source>
          <target state="translated">请注意，在显式比较 &lt;code&gt;null&lt;/code&gt; 时，没有必要优化代码： &lt;code&gt;a == null&lt;/code&gt; 将自动转换为 &lt;code&gt;a === null&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="29bbb70efdb2913fbd8c12ace3a60040ce02ee39" translate="yes" xml:space="preserve">
          <source>Note that these &lt;code&gt;xxxAsync&lt;/code&gt; functions are &lt;strong&gt;not&lt;/strong&gt;&lt;em&gt;suspending&lt;/em&gt; functions. They can be used from anywhere. However, their use always implies asynchronous (here meaning &lt;em&gt;concurrent&lt;/em&gt;) execution of their action with the invoking code.</source>
          <target state="translated">请注意，这些 &lt;code&gt;xxxAsync&lt;/code&gt; 函数&lt;strong&gt;不是&lt;/strong&gt;&lt;em&gt;暂停&lt;/em&gt;函数。它们可以在任何地方使用。但是，它们的使用始终意味着它们与调用代码的动作异步（此处是&lt;em&gt;并发&lt;/em&gt;）执行。</target>
        </trans-unit>
        <trans-unit id="d091dbc112d0275a030bcbf9509f2a82ef36aedb" translate="yes" xml:space="preserve">
          <source>Note that this Comparator does not take locale into account, and will result in an unsatisfactory ordering for certain locales.</source>
          <target state="translated">请注意,此比较器不考虑地域因素,会导致某些地域的订购不满意。</target>
        </trans-unit>
        <trans-unit id="bf9957e9675cc2706846aa1653497d6600b98d94" translate="yes" xml:space="preserve">
          <source>Note that this example also uses &lt;code&gt;use&lt;/code&gt; function from the Kotlin standard library to release threads that are created with &lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/new-single-thread-context.html&quot;&gt;newSingleThreadContext&lt;/a&gt; when they are no longer needed.</source>
          <target state="translated">请注意，此示例还使用Kotlin标准库中的 &lt;code&gt;use&lt;/code&gt; 函数来释放不再需要使用&lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/new-single-thread-context.html&quot;&gt;newSingleThreadContext&lt;/a&gt;创建的线程。</target>
        </trans-unit>
        <trans-unit id="75aded832e4b3dd5a16b56a1e23cf328870005d2" translate="yes" xml:space="preserve">
          <source>Note that this example also uses the &lt;code&gt;use&lt;/code&gt; function from the Kotlin standard library to release threads created with &lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/new-single-thread-context.html&quot;&gt;newSingleThreadContext&lt;/a&gt; when they are no longer needed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ec685b693941d4e96b2af1eef69e4363925a8b20" translate="yes" xml:space="preserve">
          <source>Note that this mechanism currently only works on Java version 1.7+. The JS and Native restrictions are temporary and will be lifted in the future.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f0cc5e3b07875e2d5bb6712ec59bb2224c29a52e" translate="yes" xml:space="preserve">
          <source>Note that this only works where &lt;code&gt;b&lt;/code&gt; is immutable (i.e. a local variable which is not modified between the check and the usage or a member &lt;em&gt;val&lt;/em&gt; which has a backing field and is not overridable), because otherwise it might happen that &lt;code&gt;b&lt;/code&gt; changes to &lt;em&gt;null&lt;/em&gt; after the check.</source>
          <target state="translated">请注意，这仅在 &lt;code&gt;b&lt;/code&gt; 是不可变的情况下有效（即，在检查和用法之间未修改的局部变量，或者具有后备字段且不可覆盖的成员&lt;em&gt;val&lt;/em&gt;），因为否则，可能会发生 &lt;code&gt;b&lt;/code&gt; 之后将b更改为&lt;em&gt;null的情况&lt;/em&gt;。支票。</target>
        </trans-unit>
        <trans-unit id="02cb3aecbee6ce81505199ced32233815d499b61" translate="yes" xml:space="preserve">
          <source>Note that this part of the &lt;code&gt;.def&lt;/code&gt; file is treated as part of the header file, so functions with the body should be declared as &lt;code&gt;static&lt;/code&gt;. The declarations are parsed after including the files from the &lt;code&gt;headers&lt;/code&gt; list.</source>
          <target state="translated">请注意， &lt;code&gt;.def&lt;/code&gt; 文件的这一部分被视为头文件的一部分，因此带有主体的函数应声明为 &lt;code&gt;static&lt;/code&gt; 。包括 &lt;code&gt;headers&lt;/code&gt; 列表中的文件后，将解析声明。</target>
        </trans-unit>
        <trans-unit id="632fe2c8e3130a19688049106ee9e7cf2e3fa004" translate="yes" xml:space="preserve">
          <source>Note that this way of applying the Kotlin/JS plugin requires adding the following code to Gradle settings file (&lt;code&gt;settings.gradle&lt;/code&gt;):</source>
          <target state="translated">请注意，这种应用Kotlin / JS插件的方法需要将以下代码添加到Gradle设置文件（ &lt;code&gt;settings.gradle&lt;/code&gt; ）：</target>
        </trans-unit>
        <trans-unit id="3e08e867fd041797206da0cee5969714ae5576c9" translate="yes" xml:space="preserve">
          <source>Note that unlike some other languages, there are no implicit widening conversions for numbers in Kotlin. For example, a function with a &lt;code&gt;Double&lt;/code&gt; parameter can be called only on &lt;code&gt;Double&lt;/code&gt; values, but not &lt;code&gt;Float&lt;/code&gt;, &lt;code&gt;Int&lt;/code&gt;, or other numeric values.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5d89b0ac97e4e72ec3a56a39219f1c2ad6cf8c5b" translate="yes" xml:space="preserve">
          <source>Note that we do not use &lt;code&gt;val&lt;/code&gt; in front of &lt;code&gt;maxSpeed&lt;/code&gt; in &lt;code&gt;Car&lt;/code&gt; - doing so would have introduced a distinct property in &lt;code&gt;Car&lt;/code&gt; that would have &lt;em&gt;shadowed&lt;/em&gt; the one inherited from &lt;code&gt;MotorVehicle&lt;/code&gt;. As written, it's just a constructor parameter that we pass on to the superconstructor.</source>
          <target state="translated">请注意，我们不使用 &lt;code&gt;val&lt;/code&gt; 前面 &lt;code&gt;maxSpeed&lt;/code&gt; 在 &lt;code&gt;Car&lt;/code&gt; -这样做会相继推出的独特性质 &lt;code&gt;Car&lt;/code&gt; ，将有&lt;em&gt;阴影&lt;/em&gt;继承自一个 &lt;code&gt;MotorVehicle&lt;/code&gt; 。如所写，它只是一个构造函数参数，我们将其传递给超级构造函数。</target>
        </trans-unit>
        <trans-unit id="32efdf9e14f64cdc5ac4ce116b4cf7f1f66b160c" translate="yes" xml:space="preserve">
          <source>Note that when the LazyThreadSafetyMode.SYNCHRONIZED mode is specified the returned instance uses itself to synchronize on. Do not synchronize from external code on the returned instance as it may cause accidental deadlock. Also this behavior can be changed in the future.</source>
          <target state="translated">请注意,当指定LazyThreadSafetyMode.SYNCHRONIZED模式时,返回的实例使用自己来同步。不要在返回的实例上从外部代码进行同步,因为这可能会导致意外的死锁。同时这个行为可以在将来被改变。</target>
        </trans-unit>
        <trans-unit id="d89d8b71e027e7e428c09aada677d55add6a81f5" translate="yes" xml:space="preserve">
          <source>Note that while &lt;code&gt;File()&lt;/code&gt; does create a &quot;file object&quot;, it doesn't actually open the file - the file object is just a reference to the file path; opening the file is a separate action. The preceding functions open and close the file automatically, whereas other functions separately open and close the file. For example, if you're parsing binary data and you don't want to read the entire file at once, you must create an &lt;em&gt;input stream&lt;/em&gt; (for binary data) or an &lt;em&gt;input stream reader&lt;/em&gt; (for strings) - the example below will read 16 bytes:</source>
          <target state="translated">注意，虽然 &lt;code&gt;File()&lt;/code&gt; 确实创建了一个&amp;ldquo;文件对象&amp;rdquo;，但实际上并没有打开文件-文件对象只是对文件路径的引用；打开文件是一个单独的操作。前面的功能自动打开和关闭文件，而其他功能分别打开和关闭文件。例如，如果您要解析二进制数据，并且不想一次读取整个文件，则必须创建一个&lt;em&gt;输入流&lt;/em&gt;（用于二进制数据）或一个&lt;em&gt;输入流读取器&lt;/em&gt;（用于字符串）-下面的示例将读取16个字节：</target>
        </trans-unit>
        <trans-unit id="14f5320c56ff81654d679ede920646b9dc75066a" translate="yes" xml:space="preserve">
          <source>Note that with Gradle Kotlin DSL, you should get the task from the project's &lt;code&gt;tasks&lt;/code&gt; first.</source>
          <target state="translated">请注意，使用Gradle Kotlin DSL，您应该首先从项目的 &lt;code&gt;tasks&lt;/code&gt; 获取任务。</target>
        </trans-unit>
        <trans-unit id="c40d9fcf3b6b2afa85b538678b5ccf141165484f" translate="yes" xml:space="preserve">
          <source>Note that you can build the same pipeline using &lt;a href=&quot;../../../api/latest/jvm/stdlib/kotlin.sequences/iterator&quot;&gt;&lt;code&gt;iterator&lt;/code&gt;&lt;/a&gt; coroutine builder from the standard library. Replace &lt;code&gt;produce&lt;/code&gt; with &lt;code&gt;iterator&lt;/code&gt;, &lt;code&gt;send&lt;/code&gt; with &lt;code&gt;yield&lt;/code&gt;, &lt;code&gt;receive&lt;/code&gt; with &lt;code&gt;next&lt;/code&gt;, &lt;code&gt;ReceiveChannel&lt;/code&gt; with &lt;code&gt;Iterator&lt;/code&gt;, and get rid of the coroutine scope. You will not need &lt;code&gt;runBlocking&lt;/code&gt; either. However, the benefit of a pipeline that uses channels as shown above is that it can actually use multiple CPU cores if you run it in &lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/-dispatchers/-default.html&quot;&gt;Dispatchers.Default&lt;/a&gt; context.</source>
          <target state="translated">请注意，您可以使用标准库中的&lt;a href=&quot;../../../api/latest/jvm/stdlib/kotlin.sequences/iterator&quot;&gt; &lt;code&gt;iterator&lt;/code&gt; &lt;/a&gt;协程生成器来构建相同的管道。将 &lt;code&gt;produce&lt;/code&gt; 替换为 &lt;code&gt;iterator&lt;/code&gt; ，使用 &lt;code&gt;yield&lt;/code&gt; &lt;code&gt;send&lt;/code&gt; ，使用 &lt;code&gt;next&lt;/code&gt; &lt;code&gt;receive&lt;/code&gt; ，使用 &lt;code&gt;Iterator&lt;/code&gt; 接收 &lt;code&gt;ReceiveChannel&lt;/code&gt; ，并摆脱协程范围。您也不需要 &lt;code&gt;runBlocking&lt;/code&gt; 。但是，使用如上所述通道的管道的好处是，如果在&lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/-dispatchers/-default.html&quot;&gt;Dispatchers.Default&lt;/a&gt;上下文中运行它，则它实际上可以使用多个CPU内核。</target>
        </trans-unit>
        <trans-unit id="fb9e894663a37dff3bfdff25d326ba2089261968" translate="yes" xml:space="preserve">
          <source>Note that you can open folders in the Source tab and see sources of libraries you are using in your project, including Kotlin standard library (&lt;code&gt;kotlin.js&lt;/code&gt;). This, however, requires that libraries are compiled with source maps enabled, as well as sources embedded into source maps. So the good practice is: if you share a library for Kotlin/JS, please, include source map into distribution.</source>
          <target state="translated">请注意，您可以在&amp;ldquo;源&amp;rdquo;选项卡中打开文件夹，并查看项目中正在使用的库的源，包括Kotlin标准库（ &lt;code&gt;kotlin.js&lt;/code&gt; ）。但是，这需要在启用源映射以及嵌入源映射中的源的情况下编译库。因此，好的做法是：如果您共享Kotlin / JS的库，请在发行版中包含源地图。</target>
        </trans-unit>
        <trans-unit id="f3d310ef82c3c4cf7ec6ba7c31c24dfd55f8f136" translate="yes" xml:space="preserve">
          <source>Note that you can use the &lt;em&gt;override&lt;/em&gt; keyword as part of the property declaration in a primary constructor.</source>
          <target state="translated">请注意，可以在主要构造函数中将&lt;em&gt;override&lt;/em&gt;关键字用作属性声明的一部分。</target>
        </trans-unit>
        <trans-unit id="49136291f4ccdd63f93ac650ad3552f2ac330a1e" translate="yes" xml:space="preserve">
          <source>Note that you can't extend a non-external class by external classes.</source>
          <target state="translated">注意,不能通过外部类来扩展非外部类。</target>
        </trans-unit>
        <trans-unit id="3e28231afdd7ac958845e417ade6744d2f5c90c1" translate="yes" xml:space="preserve">
          <source>Note that you need to turn on the &lt;a href=&quot;#enabling-experimental-features&quot;&gt;experimental flag&lt;/a&gt; to use &lt;code&gt;LayoutContainer&lt;/code&gt;.</source>
          <target state="translated">请注意，您需要打开&lt;a href=&quot;#enabling-experimental-features&quot;&gt;实验性标志&lt;/a&gt;才能使用 &lt;code&gt;LayoutContainer&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="7606870a12c3125873b69f0dbf82ae21f8b6f6b5" translate="yes" xml:space="preserve">
          <source>Note that, as described in &lt;a href=&quot;classes#secondary-constructors&quot;&gt;Secondary Constructors&lt;/a&gt;, if a class has default values for all constructor parameters, a public no-argument constructor will be generated for it. This works even if the &lt;code&gt;@JvmOverloads&lt;/code&gt; annotation is not specified.</source>
          <target state="translated">请注意，如&amp;ldquo; &lt;a href=&quot;classes#secondary-constructors&quot;&gt;辅助构造函数&amp;rdquo;中所述&lt;/a&gt;，如果类具有所有构造函数参数的默认值，则将为其生成一个公共的无参数构造函数。即使未指定 &lt;code&gt;@JvmOverloads&lt;/code&gt; 批注，此方法也有效。</target>
        </trans-unit>
        <trans-unit id="bcfd3d4bc13c4d196d89ced424f8f78ed6df819a" translate="yes" xml:space="preserve">
          <source>Note that, even though the members of companion objects look like static members in other languages, at runtime those are still instance members of real objects, and can, for example, implement interfaces:</source>
          <target state="translated">请注意,即使同伴对象的成员在其他语言中看起来像静态成员,但在运行时,这些仍然是真实对象的实例成员,例如,可以实现接口。</target>
        </trans-unit>
        <trans-unit id="63673aeff981591d75550c2f1b2c84d22a058b57" translate="yes" xml:space="preserve">
          <source>Note that, if the Java class only has a setter, it will not be visible as a property in Kotlin, because Kotlin does not support set-only properties at this time.</source>
          <target state="translated">需要注意的是,如果Java类只有一个setter,那么它在Kotlin中是不可见的属性,因为Kotlin目前还不支持只设置属性。</target>
        </trans-unit>
        <trans-unit id="4ff451e50da6bbf10519c4f38e0ec36c818d0c89" translate="yes" xml:space="preserve">
          <source>Note that, since &lt;em&gt;throw&lt;/em&gt; and &lt;em&gt;return&lt;/em&gt; are expressions in Kotlin, they can also be used on the right hand side of the elvis operator. This can be very handy, for example, for checking function arguments:</source>
          <target state="translated">请注意，由于&lt;em&gt;throw&lt;/em&gt;和&lt;em&gt;return&lt;/em&gt;是Kotlin中的表达式，因此它们也可以在elvis运算符的右侧使用。例如，这对于检查函数参数非常方便：</target>
        </trans-unit>
        <trans-unit id="ff2652dcfc51e4dc3d549eb0a81df9a68d2667cc" translate="yes" xml:space="preserve">
          <source>Note that, since extensions do not actually insert members into classes, there's no efficient way for an extension property to have a &lt;a href=&quot;properties#backing-fields&quot;&gt;backing field&lt;/a&gt;. This is why &lt;strong&gt;initializers are not allowed for extension properties&lt;/strong&gt;. Their behavior can only be defined by explicitly providing getters/setters.</source>
          <target state="translated">请注意，由于扩展实际上并未将成员插入类，因此，扩展属性没有有效的方法来拥有&lt;a href=&quot;properties#backing-fields&quot;&gt;backing field&lt;/a&gt;。这就是为什么&lt;strong&gt;扩展属性不允许使用初始化程序&lt;/strong&gt;。它们的行为只能通过显式提供getter / setter来定义。</target>
        </trans-unit>
        <trans-unit id="410e3cbb9102efe17f7c84d061da15f92debf764" translate="yes" xml:space="preserve">
          <source>Note the &lt;code&gt;@NotNull&lt;/code&gt; annotations on &lt;code&gt;String&lt;/code&gt; type arguments. Without them, we get platform types in the type arguments:</source>
          <target state="translated">注意 &lt;code&gt;@NotNull&lt;/code&gt; 上标注 &lt;code&gt;String&lt;/code&gt; 类型的参数。没有它们，我们将在类型参数中获得平台类型：</target>
        </trans-unit>
        <trans-unit id="c5849a883ad401340758801d94c3c8fe5489e593" translate="yes" xml:space="preserve">
          <source>Note the difference between declaring two parameters and declaring a destructuring pair instead of a parameter:</source>
          <target state="translated">注意声明两个参数和声明一个解构对代替参数的区别。</target>
        </trans-unit>
        <trans-unit id="fe84360ef08152f70a600e469dd1daf46f251b07" translate="yes" xml:space="preserve">
          <source>Note the use of &lt;code&gt;private&lt;/code&gt;&lt;a href=&quot;../reference/visibility-modifiers&quot;&gt;visibility modifier&lt;/a&gt; here. While the concept of visibility modifier is not relevant for competitive programming at all, it allows you to place multiple solution files based on the same template without getting an error for conflicting public declarations in the same package.</source>
          <target state="translated">请注意此处使用 &lt;code&gt;private&lt;/code&gt; &lt;a href=&quot;../reference/visibility-modifiers&quot;&gt;可见性修饰符&lt;/a&gt;。尽管可见性修饰符的概念根本与竞争性编程无关，但是它允许您基于同一模板放置多个解决方案文件，而不会因同一包中的公共声明冲突而出错。</target>
        </trans-unit>
        <trans-unit id="32363778a2d483af8b5e294fa0d257703c3636de" translate="yes" xml:space="preserve">
          <source>Note the use of Kotlin's &lt;a href=&quot;../reference/null-safety#the--operator&quot;&gt;null-assertion operator&lt;/a&gt;&lt;code&gt;!!&lt;/code&gt; after the &lt;a href=&quot;../../api/latest/jvm/stdlib/kotlin.io/read-line&quot;&gt;readLine()&lt;/a&gt; function call. Kotlin's &lt;code&gt;readLine()&lt;/code&gt; function is defined to return a &lt;a href=&quot;../reference/null-safety#nullable-types-and-non-null-types&quot;&gt;nullable type&lt;/a&gt;&lt;code&gt;String?&lt;/code&gt; and returns &lt;code&gt;null&lt;/code&gt; on the end of the input, which explicitly forces the developer to handle the case of missing input.</source>
          <target state="translated">注意Kotlin的&lt;a href=&quot;../reference/null-safety#the--operator&quot;&gt;null断言运算符的使用&lt;/a&gt; &lt;code&gt;!!&lt;/code&gt; 在&lt;a href=&quot;../../api/latest/jvm/stdlib/kotlin.io/read-line&quot;&gt;readLine（）&lt;/a&gt;函数调用之后。Kotlin的 &lt;code&gt;readLine()&lt;/code&gt; 函数定义为返回&lt;a href=&quot;../reference/null-safety#nullable-types-and-non-null-types&quot;&gt;可&lt;/a&gt;为null的 &lt;code&gt;String?&lt;/code&gt; 类型吗？并在输入末尾返回 &lt;code&gt;null&lt;/code&gt; ，这将显式强制开发人员处理缺少输入的情况。</target>
        </trans-unit>
        <trans-unit id="ac2f2aad869d626d4d52fe790ab55573fcf5e8e3" translate="yes" xml:space="preserve">
          <source>Note, Kotlin/Native object references do not support multi-threaded access. Hosting the returned &lt;code&gt;libnative_ExportedSymbols*&lt;/code&gt; pointer per thread might be necessary.</source>
          <target state="translated">注意，Kotlin / Native对象引用不支持多线程访问。每个线程可能需要托管返回的 &lt;code&gt;libnative_ExportedSymbols*&lt;/code&gt; 指针。</target>
        </trans-unit>
        <trans-unit id="2b78a1550dcdacf66568124ca1b7e49361c24581" translate="yes" xml:space="preserve">
          <source>Note, here we use the &lt;code&gt;$SRCROOT/../..&lt;/code&gt; as the path to the root of our Gradle project. It can depend on the way the Xcode project was created. Also, we use the generated &lt;code&gt;SharedCode/build/xcode-frameworks/gradlew&lt;/code&gt; script, the &lt;code&gt;packForXCode&lt;/code&gt; task generates it. We assumed that the Gradle build is executed at least once, before opening the Xcode project on a fresh machine</source>
          <target state="translated">注意，这里我们使用 &lt;code&gt;$SRCROOT/../..&lt;/code&gt; 作为Gradle项目根目录的路径。它可能取决于Xcode项目的创建方式。另外，我们使用生成的 &lt;code&gt;SharedCode/build/xcode-frameworks/gradlew&lt;/code&gt; 脚本， &lt;code&gt;packForXCode&lt;/code&gt; 任务将生成它。我们假设在新机器上打开Xcode项目之前，至少要执行一次Gradle构建</target>
        </trans-unit>
        <trans-unit id="e681d434ce2d0ba5fe65e1c3eb9e64a72c2114ad" translate="yes" xml:space="preserve">
          <source>Note, how both first &lt;code&gt;async&lt;/code&gt; and awaiting parent are cancelled on the one child failure:</source>
          <target state="translated">请注意，如何在一个子故障上取消第一个 &lt;code&gt;async&lt;/code&gt; 父对象和正在等待的父对象：</target>
        </trans-unit>
        <trans-unit id="fa14e718dbed55afbde738f5e7d1fbd2fe0275f6" translate="yes" xml:space="preserve">
          <source>Note, however, that members overridden in this way do not get called from the members of the delegate object, which can only access its own implementations of the interface members:</source>
          <target state="translated">但请注意,以这种方式重写的成员不会从委托对象的成员那里得到调用,委托对象只能访问自己实现的接口成员。</target>
        </trans-unit>
        <trans-unit id="63c0fd4e85cb25d5c9ec03f575f81a0e9dd952a9" translate="yes" xml:space="preserve">
          <source>Note, that Android has first-party support for coroutine scope in all entities with the lifecycle. See &lt;a href=&quot;https://developer.android.com/topic/libraries/architecture/coroutines#lifecyclescope&quot;&gt;the corresponding documentation&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9016aa7ea4f2b1fc5592a3d2b46f69f0ff3c825e" translate="yes" xml:space="preserve">
          <source>Note, that an exception thrown by &lt;a href=&quot;recover#kotlin%24recover%28kotlin.Result%28%28kotlin.recover.T%29%29%2C+kotlin.Function1%28%28kotlin.Throwable%2C+kotlin.recover.R%29%29%29%2Ftransform&quot;&gt;transform&lt;/a&gt; function is rethrown by this function. See &lt;a href=&quot;recover-catching&quot;&gt;recoverCatching&lt;/a&gt; for an alternative that encapsulates exceptions.</source>
          <target state="translated">请注意，&lt;a href=&quot;recover#kotlin%24recover%28kotlin.Result%28%28kotlin.recover.T%29%29%2C+kotlin.Function1%28%28kotlin.Throwable%2C+kotlin.recover.R%29%29%29%2Ftransform&quot;&gt;转换&lt;/a&gt;函数引发的异常被该函数抛出。有关封装异常的替代方法，请参见&lt;a href=&quot;recover-catching&quot;&gt;recoveryCatching&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="ab4261a565eea01ddcb4378ad59c0c58898851cf" translate="yes" xml:space="preserve">
          <source>Note, that for some cases cycle collection need to be done to ensure that dead cycles do not affect reachability of passed object graph.</source>
          <target state="translated">注意,在某些情况下,需要进行循环收集,以确保死循环不影响传递对象图的可到达性。</target>
        </trans-unit>
        <trans-unit id="cb746582c1d18af800034f12e0c2fb36cf93a443" translate="yes" xml:space="preserve">
          <source>Note, that incrementing and decrementing &lt;code&gt;acquired&lt;/code&gt; counter here from 100K coroutines is completely safe, since it always happens from the same main thread. More on that will be explained in the next chapter on coroutine context.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b6259b2eebc86f15dafec32912cdde080c4e1580" translate="yes" xml:space="preserve">
          <source>Note, that the generated bindings are generally platform-specific, so if you are developing for multiple targets, the bindings need to be regenerated.</source>
          <target state="translated">需要注意的是,生成的绑定一般都是特定于平台的,所以如果你是为多个目标开发,需要重新生成绑定。</target>
        </trans-unit>
        <trans-unit id="7b7682c3f874c25b43973c6dea774be8a4df50c1" translate="yes" xml:space="preserve">
          <source>Note, that this function rethrows any &lt;a href=&quot;-throwable/index#kotlin.Throwable&quot;&gt;Throwable&lt;/a&gt; exception thrown by &lt;a href=&quot;recover#kotlin%24recover(kotlin.Result((kotlin.recover.T)),%20kotlin.Function1((kotlin.Throwable,%20kotlin.recover.R)))/transform&quot;&gt;transform&lt;/a&gt; function. See &lt;a href=&quot;recover-catching&quot;&gt;recoverCatching&lt;/a&gt; for an alternative that encapsulates exceptions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fe80340489c5eb8bbb1e5235c463cea51b0d96bc" translate="yes" xml:space="preserve">
          <source>Note, the task may not work &lt;a href=&quot;https://github.com/gradle/gradle/issues/6330&quot;&gt;correctly&lt;/a&gt; if you use Gradle older than 4.10. In this tutorial we have already &lt;a href=&quot;#gradle-upgrade&quot;&gt;upgraded it to 4.7&lt;/a&gt;.</source>
          <target state="translated">请注意，任务可能无法正常工作&lt;a href=&quot;https://github.com/gradle/gradle/issues/6330&quot;&gt;正常&lt;/a&gt;，如果你使用比4.10摇篮老。在本教程中，我们已经&lt;a href=&quot;#gradle-upgrade&quot;&gt;将其升级到4.7&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="cdfb7f6c960fbbb54ec2a22474d762eebb5eb578" translate="yes" xml:space="preserve">
          <source>Note, the way Kotlin/Native exports symbols is subject to change without notice.</source>
          <target state="translated">注意,Kotlin/Native导出符号的方式可能会发生变化,恕不另行通知。</target>
        </trans-unit>
        <trans-unit id="a421385920384e5f4a176ab3c70967301467e475" translate="yes" xml:space="preserve">
          <source>Note, this mechanism currently works only on Java version 1.7+. Limitation on JS and Native is temporary and will be fixed in the future.</source>
          <target state="translated">注意,这个机制目前只适用于Java 1.7以上版本。对JS和Native的限制是暂时的,将来会被修正。</target>
        </trans-unit>
        <trans-unit id="12618a61ea26af57372d00837c08269ccff8b13d" translate="yes" xml:space="preserve">
          <source>Note, we use the extension property &lt;code&gt;ptr&lt;/code&gt; which comes from a &lt;code&gt;memScoped&lt;/code&gt; lambda receiver type, to turn &lt;code&gt;MyStruct&lt;/code&gt; and &lt;code&gt;MyUnion&lt;/code&gt; instances into native pointers.</source>
          <target state="translated">注意，我们使用来自 &lt;code&gt;memScoped&lt;/code&gt; lambda接收器类型的扩展属性 &lt;code&gt;ptr&lt;/code&gt; ，将 &lt;code&gt;MyStruct&lt;/code&gt; 和 &lt;code&gt;MyUnion&lt;/code&gt; 实例转换为本机指针。</target>
        </trans-unit>
        <trans-unit id="928235a3ea58117b013d6814e6ae398b8d106eb5" translate="yes" xml:space="preserve">
          <source>Note: &lt;a href=&quot;implies#kotlin.contracts.SimpleEffect%24implies%28kotlin.Boolean%29%2FbooleanExpression&quot;&gt;booleanExpression&lt;/a&gt; can accept only a subset of boolean expressions, where a function parameter or receiver (&lt;code&gt;this&lt;/code&gt;) undergoes</source>
          <target state="translated">注意：&lt;a href=&quot;implies#kotlin.contracts.SimpleEffect%24implies%28kotlin.Boolean%29%2FbooleanExpression&quot;&gt;booleanExpression&lt;/a&gt;只能接受布尔表达式的子集，其中函数参数或接收者（ &lt;code&gt;this&lt;/code&gt; ）接受</target>
        </trans-unit>
        <trans-unit id="154a86bc22d004fb84d8a8a0b6c888692235178f" translate="yes" xml:space="preserve">
          <source>Note: &lt;a href=&quot;implies#kotlin.contracts.SimpleEffect%24implies(kotlin.Boolean)/booleanExpression&quot;&gt;booleanExpression&lt;/a&gt; can accept only a subset of boolean expressions, where a function parameter or receiver (&lt;code&gt;this&lt;/code&gt;) undergoes</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6981f24296bbc00cf0e0f8db9ec6624b3daecbcc" translate="yes" xml:space="preserve">
          <source>Note: &lt;code&gt;Any&lt;/code&gt; is not &lt;code&gt;java.lang.Object&lt;/code&gt;; in particular, it does not have any members other than &lt;code&gt;equals()&lt;/code&gt;, &lt;code&gt;hashCode()&lt;/code&gt; and &lt;code&gt;toString()&lt;/code&gt;. Please consult the &lt;a href=&quot;java-interop#object-methods&quot;&gt;Java interoperability&lt;/a&gt; section for more details.</source>
          <target state="translated">注意： &lt;code&gt;Any&lt;/code&gt; 不是 &lt;code&gt;java.lang.Object&lt;/code&gt; ; 特别是，除了 &lt;code&gt;equals()&lt;/code&gt; ， &lt;code&gt;hashCode()&lt;/code&gt; 和 &lt;code&gt;toString()&lt;/code&gt; 之外，它没有其他成员。请查阅&lt;a href=&quot;java-interop#object-methods&quot;&gt;Java互操作性&lt;/a&gt;部分以获取更多详细信息。</target>
        </trans-unit>
        <trans-unit id="7cea38b31131e5f3bc473b1806a7dadc1df3f76c" translate="yes" xml:space="preserve">
          <source>Note: Before 1.3.40, both test and product executables were represented by the same binary type. Thus to access the default test binary created by the plugin, the following line was used:</source>
          <target state="translated">注:在1.3.40之前,测试和产品的可执行文件都用相同的二进制类型来表示。因此,要访问由插件创建的默认测试二进制文件,需要使用以下一行。</target>
        </trans-unit>
        <trans-unit id="fb3a30630df8eec859177fc75c5dd700ee60baec" translate="yes" xml:space="preserve">
          <source>Note: For Spring you can use the &lt;code&gt;kotlin-spring&lt;/code&gt; compiler plugin (&lt;a href=&quot;compiler-plugins#spring-support&quot;&gt;see below&lt;/a&gt;).</source>
          <target state="translated">注意：对于Spring，您可以使用 &lt;code&gt;kotlin-spring&lt;/code&gt; 编译器插件（&lt;a href=&quot;compiler-plugins#spring-support&quot;&gt;请参见下文&lt;/a&gt;）。</target>
        </trans-unit>
        <trans-unit id="d6a0dc39a4a138257b96c621b751cc052081b76a" translate="yes" xml:space="preserve">
          <source>Note: This above code will work properly only on JDK7+ that supports &lt;code&gt;suppressed&lt;/code&gt; exceptions</source>
          <target state="translated">注意：以上代码仅在支持 &lt;code&gt;suppressed&lt;/code&gt; 异常的JDK7 +上才能正常工作</target>
        </trans-unit>
        <trans-unit id="484cdded81040d7cac731a5df3e0b2162661d2db" translate="yes" xml:space="preserve">
          <source>Note: creating a source set does not link it to any target. Some source sets are &lt;a href=&quot;#default-project-layout&quot;&gt;predefined&lt;/a&gt; and thus compiled by default. However, custom source sets always need to be explicitly directed to the compilations. See: &lt;a href=&quot;#connecting-source-sets&quot;&gt;Connecting source sets&lt;/a&gt;.</source>
          <target state="translated">注意：创建源集不会将其链接到任何目标。一些源集是&lt;a href=&quot;#default-project-layout&quot;&gt;预定义的&lt;/a&gt;，因此默认情况下会进行编译。但是，始终需要将定制源集明确地定向到编译。请参阅：&lt;a href=&quot;#connecting-source-sets&quot;&gt;连接源集&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="3d3cb30c99fb08c5217d1cecd77b25e0a37cf168" translate="yes" xml:space="preserve">
          <source>Note: due to the current technical limitations, the IDE does not correctly recognize these annotations on type arguments in compiled Java libraries that are used as dependencies.</source>
          <target state="translated">注意:由于目前的技术限制,IDE不能正确识别编译后的Java库中作为依赖关系的类型参数的这些注释。</target>
        </trans-unit>
        <trans-unit id="43526e690a06b94dffa5d82ef9ea46b38220defe" translate="yes" xml:space="preserve">
          <source>Note: runtime lookup can be forced even when the class is referenced statically from Objective-C source code by adding &lt;code&gt;__attribute__((objc_runtime_visible))&lt;/code&gt; to its &lt;code&gt;@interface&lt;/code&gt;.</source>
          <target state="translated">注意：即使从Objective-C源代码静态引用了该类，也可以通过在其 &lt;code&gt;@interface&lt;/code&gt; 上添加 &lt;code&gt;__attribute__((objc_runtime_visible))&lt;/code&gt; 来强制运行时查找。</target>
        </trans-unit>
        <trans-unit id="961c619d9fb3964975b4b9e69245c681552524a7" translate="yes" xml:space="preserve">
          <source>Note: static and shared libraries has suffixes &lt;code&gt;static&lt;/code&gt; and &lt;code&gt;shared&lt;/code&gt; respectively, e.g. &lt;code&gt;fooDebugStatic&lt;/code&gt; or &lt;code&gt;barReleaseShared&lt;/code&gt;</source>
          <target state="translated">注意：静态库和共享库分别具有 &lt;code&gt;static&lt;/code&gt; 和 &lt;code&gt;shared&lt;/code&gt; 后缀，例如 &lt;code&gt;fooDebugStatic&lt;/code&gt; 或 &lt;code&gt;barReleaseShared&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="0ba0ca9c0ff727e2f159f9a318e2b4838c970baa" translate="yes" xml:space="preserve">
          <source>Note: the &lt;code&gt;lib&lt;/code&gt; directory which contains &lt;code&gt;kotlin.js&lt;/code&gt; and other library files is only created in IntelliJ IDEA-based projects and is controlled by the &lt;em&gt;Copy library runtime files&lt;/em&gt; flag in the Kotlin &lt;a href=&quot;https://www.jetbrains.com/help/idea/facets.html&quot;&gt;facet settings&lt;/a&gt;. In a Maven or Gradle build (including multiplatform projects), no library files are copied by default to the compilation output directory. See the corresponding tutorials for the instructions on how to achieve the same with those build systems.</source>
          <target state="translated">注意：包含 &lt;code&gt;kotlin.js&lt;/code&gt; 和其他库文件的 &lt;code&gt;lib&lt;/code&gt; 目录仅在基于IntelliJ IDEA的项目中创建，并由Kotlin &lt;a href=&quot;https://www.jetbrains.com/help/idea/facets.html&quot;&gt;构面设置中&lt;/a&gt;的&lt;em&gt;复制库运行时文件&lt;/em&gt;标志控制。在Maven或Gradle构建（包括多平台项目）中，默认情况下不会将任何库文件复制到编译输出目录。请参阅相应的教程，以获取有关如何使用这些构建系统实现相同操作的说明。&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="7a0e64e270b153ff90968e1ff6456ea22567f491" translate="yes" xml:space="preserve">
          <source>Note: the built-in JSR-305 annotations &lt;a href=&quot;https://aalmiray.github.io/jsr-305/apidocs/javax/annotation/Nonnull.html&quot;&gt;&lt;code&gt;@Nonnull&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://aalmiray.github.io/jsr-305/apidocs/javax/annotation/Nullable.html&quot;&gt;&lt;code&gt;@Nullable&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;https://aalmiray.github.io/jsr-305/apidocs/javax/annotation/CheckForNull.html&quot;&gt;&lt;code&gt;@CheckForNull&lt;/code&gt;&lt;/a&gt; are always enabled and affect the types of the annotated declarations in Kotlin, regardless of compiler configuration with the &lt;code&gt;-Xjsr305&lt;/code&gt; flag.</source>
          <target state="translated">注意：内置的JSR-305注释&lt;a href=&quot;https://aalmiray.github.io/jsr-305/apidocs/javax/annotation/Nonnull.html&quot;&gt; &lt;code&gt;@Nonnull&lt;/code&gt; &lt;/a&gt;，&lt;a href=&quot;https://aalmiray.github.io/jsr-305/apidocs/javax/annotation/Nullable.html&quot;&gt; &lt;code&gt;@Nullable&lt;/code&gt; &lt;/a&gt;和&lt;a href=&quot;https://aalmiray.github.io/jsr-305/apidocs/javax/annotation/CheckForNull.html&quot;&gt; &lt;code&gt;@CheckForNull&lt;/code&gt; &lt;/a&gt;始终启用，并且会影响Kotlin中带注释的声明的类型，而不管带有 &lt;code&gt;-Xjsr305&lt;/code&gt; 标志的编译器配置如何。</target>
        </trans-unit>
        <trans-unit id="70ea34d1da722222e140a53cf5465f6882b21617" translate="yes" xml:space="preserve">
          <source>Note: the migration status of a nullability annotation is not inherited by its type qualifier nicknames but is applied to its usages in default type qualifiers.</source>
          <target state="translated">注意:无效性注解的迁移状态不由其类型限定符昵称继承,而是应用于其在默认类型限定符中的用法。</target>
        </trans-unit>
        <trans-unit id="c0edc7da32b33f24605529da7af1e0f20a415a52" translate="yes" xml:space="preserve">
          <source>Note: the static members of these Java types are not directly accessible on the &lt;a href=&quot;object-declarations#companion-objects&quot;&gt;companion objects&lt;/a&gt; of the Kotlin types. To call them, use the full qualified names of the Java types, e.g. &lt;code&gt;java.lang.Integer.toHexString(foo)&lt;/code&gt;.</source>
          <target state="translated">注意：这些Java类型的静态成员不能在Kotlin类型的&lt;a href=&quot;object-declarations#companion-objects&quot;&gt;伴随对象&lt;/a&gt;上直接访问。要调用它们，请使用Java类型的全限定名，例如 &lt;code&gt;java.lang.Integer.toHexString(foo)&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="58d630dc0f3f2c164372b5befca4a458dbf430dc" translate="yes" xml:space="preserve">
          <source>Note: the types in this example only take place with the strict mode enabled, otherwise, the platform types remain. See the &lt;a href=&quot;#undermigration-annotation-since-1160&quot;&gt;&lt;code&gt;@UnderMigration&lt;/code&gt; annotation&lt;/a&gt; and &lt;a href=&quot;#compiler-configuration&quot;&gt;Compiler configuration&lt;/a&gt; sections.</source>
          <target state="translated">注意：此示例中的类型仅在启用严格模式的情况下发生，否则，平台类型将保留。请参阅&lt;a href=&quot;#undermigration-annotation-since-1160&quot;&gt; &lt;code&gt;@UnderMigration&lt;/code&gt; 批注&lt;/a&gt;和&lt;a href=&quot;#compiler-configuration&quot;&gt;编译器配置&lt;/a&gt;部分。</target>
        </trans-unit>
        <trans-unit id="1897db2fc3536b91b9cf29ef737cb27b1a12735f" translate="yes" xml:space="preserve">
          <source>Note: this annotation is experimental, see &lt;a href=&quot;../-experimental-multiplatform/index&quot;&gt;ExperimentalMultiplatform&lt;/a&gt; on how to opt-in for it.</source>
          <target state="translated">注意：此注释是实验性的，有关如何选择加入的信息，请参见&lt;a href=&quot;../-experimental-multiplatform/index&quot;&gt;ExperimentMultiplatform&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="0b4255d1b07a5ecec5778c495ae7e465e074b5b4" translate="yes" xml:space="preserve">
          <source>Note: this annotation is experimental, see &lt;a href=&quot;../../kotlin.experimental/-experimental-type-inference/index&quot;&gt;ExperimentalTypeInference&lt;/a&gt; on how to opt-in for it.</source>
          <target state="translated">注意：此注释是实验性的，有关如何选择加入的信息，请参见&lt;a href=&quot;../../kotlin.experimental/-experimental-type-inference/index&quot;&gt;ExperimentalTypeInference&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="357bf8828e4f466867f5aa8f9b5bb6f1a07b487b" translate="yes" xml:space="preserve">
          <source>Note: to use a visible top-level declaration from another package, you should still &lt;a href=&quot;packages#imports&quot;&gt;import&lt;/a&gt; it.</source>
          <target state="translated">注意：要使用另一个包中可见的顶级声明，您仍应&lt;a href=&quot;packages#imports&quot;&gt;导入&lt;/a&gt;它。</target>
        </trans-unit>
        <trans-unit id="4f0d56c46129caef4c0e06f3c8334481a847bd34" translate="yes" xml:space="preserve">
          <source>Note: unlike Java, arrays in Kotlin are invariant. This means that Kotlin does not let us assign an &lt;code&gt;Array&amp;lt;String&amp;gt;&lt;/code&gt; to an &lt;code&gt;Array&amp;lt;Any&amp;gt;&lt;/code&gt;, which prevents a possible runtime failure (but you can use &lt;code&gt;Array&amp;lt;out Any&amp;gt;&lt;/code&gt;, see &lt;a href=&quot;generics#type-projections&quot;&gt;Type Projections&lt;/a&gt;).</source>
          <target state="translated">注意：与Java不同，Kotlin中的数组是不变的。这意味着，科特林没有让我们分配一个 &lt;code&gt;Array&amp;lt;String&amp;gt;&lt;/code&gt; 到一个 &lt;code&gt;Array&amp;lt;Any&amp;gt;&lt;/code&gt; ，以防止可能的运行时故障（但你可以使用 &lt;code&gt;Array&amp;lt;out Any&amp;gt;&lt;/code&gt; ，见&lt;a href=&quot;generics#type-projections&quot;&gt;式投影&lt;/a&gt;）。</target>
        </trans-unit>
        <trans-unit id="70440046a3dc2e079f23ee1c57dfa76669b732aa" translate="yes" xml:space="preserve">
          <source>Notes</source>
          <target state="translated">Notes</target>
        </trans-unit>
        <trans-unit id="4481948392a8846400c954e77f58d76cdaa73963" translate="yes" xml:space="preserve">
          <source>Nothing</source>
          <target state="translated">Nothing</target>
        </trans-unit>
        <trans-unit id="79090fccdb94d09e1c560c62dc8ff6d888bc7489" translate="yes" xml:space="preserve">
          <source>Nothing has no instances. You can use Nothing to represent &quot;a value that never exists&quot;: for example, if a function has the return type of Nothing, it means that it never returns (always throws an exception).</source>
          <target state="translated">Nothing没有实例。你可以用Nothing来表示 &quot;一个永远不存在的值&quot;:例如,如果一个函数的返回类型是Nothing,它意味着它永远不会返回(总是抛出异常)。</target>
        </trans-unit>
        <trans-unit id="a531e5857d96a6fe172e33a54636fa2c5e7837a4" translate="yes" xml:space="preserve">
          <source>Notice that the implementation on &lt;em&gt;every&lt;/em&gt; platform can encode byte arrays to a string. If we want we can provide a more efficient implementation for this method, for example, let's specialize it on the JVM:</source>
          <target state="translated">注意，&lt;em&gt;每个&lt;/em&gt;平台上的实现&lt;em&gt;都&lt;/em&gt;可以将字节数组编码为字符串。例如，如果我们想要为这种方法提供更有效的实现，那么让我们在JVM上对其进行专门化：</target>
        </trans-unit>
        <trans-unit id="ac46cd6bf2ec7e9d90f5e3709af6c843ffd8a6af" translate="yes" xml:space="preserve">
          <source>NotificationAction</source>
          <target state="translated">NotificationAction</target>
        </trans-unit>
        <trans-unit id="f541255e0e0d091ef01be7d639674756d30f41bc" translate="yes" xml:space="preserve">
          <source>NotificationDirection</source>
          <target state="translated">NotificationDirection</target>
        </trans-unit>
        <trans-unit id="596349e0f504aa4e6ec1f31115a62914042449e8" translate="yes" xml:space="preserve">
          <source>NotificationEventInit</source>
          <target state="translated">NotificationEventInit</target>
        </trans-unit>
        <trans-unit id="2a1a4c24d8e083b47b4ff678b4cd0997219c060e" translate="yes" xml:space="preserve">
          <source>NotificationOptions</source>
          <target state="translated">NotificationOptions</target>
        </trans-unit>
        <trans-unit id="93c639dc73db96edc66ede2299276f652971fac6" translate="yes" xml:space="preserve">
          <source>NotificationPermission</source>
          <target state="translated">NotificationPermission</target>
        </trans-unit>
        <trans-unit id="94e838061a82a5ce0b113db3557cf9f9730866ea" translate="yes" xml:space="preserve">
          <source>Now check it with the command &lt;code&gt;./gradlew publishToMavenLocal&lt;/code&gt; and you should see a successful build. That's it, our library is now successfully published and any Kotlin project can depend on it, whether it is another common library, JVM, JS, or Native application.</source>
          <target state="translated">现在，使用命令 &lt;code&gt;./gradlew publishToMavenLocal&lt;/code&gt; 检查它，您应该会看到构建成功。就是这样，我们的库现已成功发布，并且任何Kotlin项目都可以依赖它，无论它是另一个通用库，JVM，JS还是本机应用程序。</target>
        </trans-unit>
        <trans-unit id="4c6fdd021c50c395969a31c37923d25d734b30ed" translate="yes" xml:space="preserve">
          <source>Now compile the program linking with the library we have just created:</source>
          <target state="translated">现在编译与我们刚才创建的库链接的程序。</target>
        </trans-unit>
        <trans-unit id="7fd938355a267ec17f411c8d98d04708e4180da6" translate="yes" xml:space="preserve">
          <source>Now it is time to provide an &lt;code&gt;actual&lt;/code&gt; implementation of &lt;code&gt;Base64Factory&lt;/code&gt; for every platform.</source>
          <target state="translated">现在该为每个平台提供 &lt;code&gt;Base64Factory&lt;/code&gt; 的 &lt;code&gt;actual&lt;/code&gt; 实现了。</target>
        </trans-unit>
        <trans-unit id="ef159996af2b9215562c38a942c2f8905195f55d" translate="yes" xml:space="preserve">
          <source>Now it is time to refresh the Gradle project again in Android Studio. Click &lt;em&gt;Sync Now&lt;/em&gt; on the yellow stripe or use the &lt;em&gt;Gradle&lt;/em&gt; tool window and click the &lt;code&gt;Refresh&lt;/code&gt; action in the context menu on the root Gradle project. The &lt;code&gt;:SharedCode&lt;/code&gt; project should be recognized by the IDE now.</source>
          <target state="translated">现在是时候再次在Android Studio中刷新Gradle项目了。单击黄色条纹上的&lt;em&gt;立即同步&lt;/em&gt;或使用&lt;em&gt;Gradle&lt;/em&gt;工具窗口，然后在Gradle根项目的上下文菜单中单击 &lt;code&gt;Refresh&lt;/code&gt; 操作。该 &lt;code&gt;:SharedCode&lt;/code&gt; 项目应该由IDE可以立即识别。</target>
        </trans-unit>
        <trans-unit id="9eb8c10ce256de217fd7408c5d0fa2be1c81f16b" translate="yes" xml:space="preserve">
          <source>Now it is time to see how to use &lt;code&gt;cValue&lt;/code&gt; and pass by-value parameters:</source>
          <target state="translated">现在该看一下如何使用 &lt;code&gt;cValue&lt;/code&gt; 和传递按值参数了：</target>
        </trans-unit>
        <trans-unit id="f62049422e34abdef8fb40e736ddaa894413b1d4" translate="yes" xml:space="preserve">
          <source>Now it prints something sensible: &lt;code&gt;1784293664&lt;/code&gt;, because all coroutines complete.</source>
          <target state="translated">现在，它会打印出一些有意义的内容： &lt;code&gt;1784293664&lt;/code&gt; ，因为所有协同程序都已完成。</target>
        </trans-unit>
        <trans-unit id="144f2d2ebae18220179fd1c455d34a68896fdfc7" translate="yes" xml:space="preserve">
          <source>Now it prints something sensible: &lt;code&gt;500000500000&lt;/code&gt;, because all coroutines complete.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9c3c5f110103dcae6c7a1c5048ae4801a489102c" translate="yes" xml:space="preserve">
          <source>Now it's time to add the task description. Click the &lt;strong&gt;Edit&lt;/strong&gt; icon at the top of &lt;strong&gt;Task Description&lt;/strong&gt; panel to switch to the editing mode:</source>
          <target state="translated">现在是时候添加任务描述了。单击&amp;ldquo; &lt;strong&gt;任务描述&amp;rdquo;&lt;/strong&gt;面板顶部的&amp;ldquo; &lt;strong&gt;编辑&amp;rdquo;&lt;/strong&gt;图标以切换到编辑模式：&lt;strong&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="f21a6f3ded0ce3ad0d37be7f610a6bcde3237278" translate="yes" xml:space="preserve">
          <source>Now let us launch five processors and let them work for almost a second. See what happens:</source>
          <target state="translated">现在让我们启动五个处理器,让它们工作近一秒钟。看看会发生什么。</target>
        </trans-unit>
        <trans-unit id="3a85707fc6ed973d97aee272da025f72a2062245" translate="yes" xml:space="preserve">
          <source>Now let's check out the contents of the library:</source>
          <target state="translated">现在我们来看看图书馆的内容。</target>
        </trans-unit>
        <trans-unit id="06f1756ff063bdd720deb57bebdc098cbb1f3682" translate="yes" xml:space="preserve">
          <source>Now let's open the project in IntelliJ IDEA. For that we click on the File | Open&amp;hellip; and select our &lt;code&gt;build.gradle.kts&lt;/code&gt;&lt;code&gt;build.gradle&lt;/code&gt; project file.</source>
          <target state="translated">现在，让我们在IntelliJ IDEA中打开项目。为此，我们单击文件| 打开&amp;hellip;，然后选择我们的 &lt;code&gt;build.gradle.kts&lt;/code&gt; &lt;code&gt;build.gradle&lt;/code&gt; 项目文件。</target>
        </trans-unit>
        <trans-unit id="62863dbb3bcee301c0e208573e6e92993330cf1e" translate="yes" xml:space="preserve">
          <source>Now let's see how it works in practice:</source>
          <target state="translated">现在让我们来看看它在实践中是如何工作的。</target>
        </trans-unit>
        <trans-unit id="316006c9bf1b6b4efc24b9287e973de18a0cd5b2" translate="yes" xml:space="preserve">
          <source>Now let's write the same with sequences:</source>
          <target state="translated">现在我们用序列来写同样的内容。</target>
        </trans-unit>
        <trans-unit id="a94f1a0ca142aa8eb48c8af48afa3350f83b1400" translate="yes" xml:space="preserve">
          <source>Now need to create an empty &lt;code&gt;settings.gradle.kts&lt;/code&gt;&lt;code&gt;settings.gradle&lt;/code&gt; file in the project root directory.</source>
          <target state="translated">现在需要在项目根目录中创建一个空的 &lt;code&gt;settings.gradle.kts&lt;/code&gt; &lt;code&gt;settings.gradle&lt;/code&gt; 文件。</target>
        </trans-unit>
        <trans-unit id="6c9080cd76ec0143ae2c7fdafc332586543b3c8a" translate="yes" xml:space="preserve">
          <source>Now the application is ready to run. The easiest way is to click the green &lt;strong&gt;Run&lt;/strong&gt; icon in the gutter and select &lt;strong&gt;Run 'AppKt'&lt;/strong&gt;.</source>
          <target state="translated">现在，该应用程序可以运行了。最简单的方法是单击装订线中的绿色&lt;strong&gt;&amp;ldquo;运行&amp;rdquo;&lt;/strong&gt;图标，然后选择&lt;strong&gt;&amp;ldquo;运行'AppKt'&amp;rdquo;&lt;/strong&gt;。</target>
        </trans-unit>
        <trans-unit id="a4dea9f6780cb4b1fb116abe461c884b2fc3e6f5" translate="yes" xml:space="preserve">
          <source>Now the classic &lt;code&gt;maven-publish&lt;/code&gt; Gradle &lt;a href=&quot;https://docs.gradle.org/current/userguide/publishing_maven.html&quot;&gt;plugin&lt;/a&gt; can be used. Don't forget to specify the group and version of your library along with the plugin in &lt;code&gt;build.gradle&lt;/code&gt;:</source>
          <target state="translated">现在可以使用经典的 &lt;code&gt;maven-publish&lt;/code&gt; Gradle &lt;a href=&quot;https://docs.gradle.org/current/userguide/publishing_maven.html&quot;&gt;插件&lt;/a&gt;。不要忘记在 &lt;code&gt;build.gradle&lt;/code&gt; 中指定库的组和版本以及插件：</target>
        </trans-unit>
        <trans-unit id="c36da2f63965003675ecd4f90e9e76c88deea8db" translate="yes" xml:space="preserve">
          <source>Now the main function awaits for the first of them to complete and counts the number of deferred values that are still active. Note that we've used here the fact that &lt;code&gt;select&lt;/code&gt; expression is a Kotlin DSL, so we can provide clauses for it using an arbitrary code. In this case we iterate over a list of deferred values to provide &lt;code&gt;onAwait&lt;/code&gt; clause for each deferred value.</source>
          <target state="translated">现在，主要功能等待第一个完成，并计算仍处于活动状态的递延值的数量。请注意，这里我们使用了 &lt;code&gt;select&lt;/code&gt; 表达式是Kotlin DSL 的事实，因此我们可以使用任意代码为其提供子句。在这种情况下，我们迭代一系列递延值以为每个递延值提供 &lt;code&gt;onAwait&lt;/code&gt; 子句。</target>
        </trans-unit>
        <trans-unit id="fafa6b7e1e97bd8d0310f07c3ffc916e9bc52c4e" translate="yes" xml:space="preserve">
          <source>Now the result is still the same, but the code of the main coroutine is not tied to the duration of the background job in any way. Much better.</source>
          <target state="translated">现在结果还是一样,但主程序的代码与后台作业的持续时间没有任何联系。好多了。</target>
        </trans-unit>
        <trans-unit id="68e76914b57b2c484d2fcdeac9dacb63ea15843e" translate="yes" xml:space="preserve">
          <source>Now we are ready to &lt;a href=&quot;basic-kotlin-native-app#open-in-ide&quot;&gt;open the project in IntelliJ IDEA&lt;/a&gt; and to see how to fix the example project. While doing that, we'll examine how C functions are mapped into Kotlin/Native declarations.</source>
          <target state="translated">现在，我们准备&lt;a href=&quot;basic-kotlin-native-app#open-in-ide&quot;&gt;在IntelliJ IDEA中打开项目，&lt;/a&gt;并查看如何修复示例项目。在此过程中，我们将研究如何将C函数映射到Kotlin / Native声明中。</target>
        </trans-unit>
        <trans-unit id="0cc37329b152a7d48d832f02d3782a3273c9a922" translate="yes" xml:space="preserve">
          <source>Now we are ready to &lt;a href=&quot;basic-kotlin-native-app#open-in-ide&quot;&gt;open the project in IntelliJ IDEA&lt;/a&gt; and to see how to fix the example project. While doing that, we'll examine how C primitive types are mapped into Kotlin/Native.</source>
          <target state="translated">现在，我们准备&lt;a href=&quot;basic-kotlin-native-app#open-in-ide&quot;&gt;在IntelliJ IDEA中打开项目，&lt;/a&gt;并查看如何修复示例项目。在此过程中，我们将研究如何将C基本类型映射到Kotlin / Native中。</target>
        </trans-unit>
        <trans-unit id="280651c06a20fde5cc37b475316ca2430a0a1d40" translate="yes" xml:space="preserve">
          <source>Now we are ready to &lt;a href=&quot;basic-kotlin-native-app#open-in-ide&quot;&gt;open the project in IntelliJ IDEA&lt;/a&gt; and to see how to fix the example project. While doing this, we'll examine how C functions are mapped into Kotlin/Native declarations.</source>
          <target state="translated">现在，我们准备&lt;a href=&quot;basic-kotlin-native-app#open-in-ide&quot;&gt;在IntelliJ IDEA中打开项目，&lt;/a&gt;并查看如何修复示例项目。在此过程中，我们将研究如何将C函数映射到Kotlin / Native声明中。</target>
        </trans-unit>
        <trans-unit id="323fc12d5da11d2d2fc025d2cb42257bb510df5c" translate="yes" xml:space="preserve">
          <source>Now we are ready to &lt;a href=&quot;using-intellij-idea&quot;&gt;open the project in IntelliJ IDEA&lt;/a&gt; and to see how to fix the example project. While doing that, we'll examine how C functions are mapped into Kotlin/Native declarations.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b20c24d185e4d030be0d0a6f1a94b265b8692d27" translate="yes" xml:space="preserve">
          <source>Now we are ready to &lt;a href=&quot;using-intellij-idea&quot;&gt;open the project in IntelliJ IDEA&lt;/a&gt; and to see how to fix the example project. While doing that, we'll examine how C primitive types are mapped into Kotlin/Native.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3c161d0d7217a9d942a7808aa2fde773f92818a9" translate="yes" xml:space="preserve">
          <source>Now we are ready to &lt;a href=&quot;using-intellij-idea&quot;&gt;open the project in IntelliJ IDEA&lt;/a&gt; and to see how to fix the example project. While doing this, we'll examine how C functions are mapped into Kotlin/Native declarations.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8514872c5f66d71d839c86ef7b8ede3a7f8b037f" translate="yes" xml:space="preserve">
          <source>Now we are ready to compile our &lt;code&gt;main.c&lt;/code&gt; into an executable. We include the generated &lt;code&gt;libnative.lib&lt;/code&gt; into the build command and start:</source>
          <target state="translated">现在，我们准备将 &lt;code&gt;main.c&lt;/code&gt; 编译为可执行文件。我们将生成的 &lt;code&gt;libnative.lib&lt;/code&gt; 包含在build命令中并开始：</target>
        </trans-unit>
        <trans-unit id="bd615a740472938a27e61f3e5ad1d8c088398a62" translate="yes" xml:space="preserve">
          <source>Now we build our pipeline by starting a stream of numbers from 2, taking a prime number from the current channel, and launching new pipeline stage for each prime number found:</source>
          <target state="translated">现在,我们从2开始建立我们的管道,从当前通道中抽取一个质数,每找到一个质数就启动新的管道阶段。</target>
        </trans-unit>
        <trans-unit id="b09d5a8ac24e62ac515e5408d015b6449705f5ff" translate="yes" xml:space="preserve">
          <source>Now we have implementations on all the platforms and it is time to move to testing of our library.</source>
          <target state="translated">现在我们已经在所有的平台上实现了,是时候转向测试我们的库了。</target>
        </trans-unit>
        <trans-unit id="6fc43d604b99f2dfefc014ae5ff71405690d454a" translate="yes" xml:space="preserve">
          <source>Now we have learned how to use C declarations in our code, we are ready to try it out on a real example. Let's fix our code and see how it runs by calling the &lt;code&gt;runDebugExecutableNative&lt;/code&gt; Gradle task &lt;a href=&quot;basic-kotlin-native-app#run-in-ide&quot;&gt;in the IDE&lt;/a&gt; or by using the following console command:</source>
          <target state="translated">现在，我们已经学习了如何在代码中使用C声明，我们准备在一个实际示例中对其进行尝试。让我们通过&lt;a href=&quot;basic-kotlin-native-app#run-in-ide&quot;&gt;在IDE中&lt;/a&gt;调用 &lt;code&gt;runDebugExecutableNative&lt;/code&gt; Gradle任务或使用以下控制台命令来修复代码并查看其运行方式：</target>
        </trans-unit>
        <trans-unit id="50d459965bcc6d81fd4d90553a544db8ca2bdb40" translate="yes" xml:space="preserve">
          <source>Now we have learned how to use C declarations in our code, we are ready to try it out on a real example. Let's fix our code and see how it runs by calling the &lt;code&gt;runDebugExecutableNative&lt;/code&gt; Gradle task &lt;a href=&quot;using-intellij-idea&quot;&gt;in the IDE&lt;/a&gt; or by using the following console command:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dcdaca8bf7117a3b069ebd97d9d500bbee893084" translate="yes" xml:space="preserve">
          <source>Now we have our library and Kotlin stubs, we can consume them from our application. To keep things simple, in this tutorial we're going to convert one of the simplest &lt;code&gt;libcurl&lt;/code&gt; examples over to Kotlin.</source>
          <target state="translated">现在我们有了我们的库和Kotlin存根，我们可以从我们的应用程序中使用它们。为了使事情简单，在本教程中，我们将把最简单的 &lt;code&gt;libcurl&lt;/code&gt; 示例之一转换为Kotlin。</target>
        </trans-unit>
        <trans-unit id="56a410308bdaa182b925a6dff7fc3ba66711f037" translate="yes" xml:space="preserve">
          <source>Now we have the &lt;code&gt;TextView&lt;/code&gt; that will show us the text created by the shared code function &lt;code&gt;createApplicationScreenMessage()&lt;/code&gt;. It shows &lt;code&gt;Kotlin Rocks on Android&lt;/code&gt;. Let's see how it works.</source>
          <target state="translated">现在，我们有了 &lt;code&gt;TextView&lt;/code&gt; ，它将向我们显示由共享代码函数 &lt;code&gt;createApplicationScreenMessage()&lt;/code&gt; 创建的文本。它显示 &lt;code&gt;Kotlin Rocks on Android&lt;/code&gt; 。让我们看看它是如何工作的。</target>
        </trans-unit>
        <trans-unit id="ff70a609caee6a29932d7e21240cf4b92c28370c" translate="yes" xml:space="preserve">
          <source>Now we need to define the classes and interfaces we want to implement. Create the file &lt;code&gt;Base64.kt&lt;/code&gt; in the &lt;code&gt;commonMain/kotlin/jetbrains/base64&lt;/code&gt; folder. Core primitive will be the &lt;code&gt;Base64Encoder&lt;/code&gt; interface which knows how to convert bytes to bytes in &lt;code&gt;Base64&lt;/code&gt; format:</source>
          <target state="translated">现在，我们需要定义要实现的类和接口。在 &lt;code&gt;commonMain/kotlin/jetbrains/base64&lt;/code&gt; 文件夹中创建文件 &lt;code&gt;Base64.kt&lt;/code&gt; 。核心原语将是 &lt;code&gt;Base64Encoder&lt;/code&gt; 接口，该接口知道如何将字节转换为 &lt;code&gt;Base64&lt;/code&gt; 格式的字节：</target>
        </trans-unit>
        <trans-unit id="6ca6511b451c4bb08b2161576b6d00b309bd636f" translate="yes" xml:space="preserve">
          <source>Now we need to explain to Xcode, where to look for frameworks. We need to add the &lt;em&gt;relative&lt;/em&gt; path &lt;code&gt;$(SRCROOT)/../../SharedCode/build/xcode-frameworks&lt;/code&gt; into the &lt;em&gt;Search Paths | Framework Search Paths&lt;/em&gt; section. Open the &lt;em&gt;Build Settings&lt;/em&gt; tab again, pick the &lt;em&gt;All&lt;/em&gt; sub-tab below, and type the &lt;em&gt;Framework Search Paths&lt;/em&gt; into the search field to easily find the option. Xcode will then show the substituted path in the UI for it.</source>
          <target state="translated">现在我们需要向Xcode解释在哪里寻找框架。我们需要在&lt;em&gt;搜索路径|&lt;/em&gt;添加&lt;em&gt;相对&lt;/em&gt;路径 &lt;code&gt;$(SRCROOT)/../../SharedCode/build/xcode-frameworks&lt;/code&gt; &lt;em&gt;。框架搜索路径&lt;/em&gt;部分。再次打开&amp;ldquo; &lt;em&gt;构建设置&amp;rdquo;&lt;/em&gt;选项卡，选择下面的&amp;ldquo; &lt;em&gt;所有&amp;rdquo;&lt;/em&gt;子选项卡，然后在搜索字段中键入&amp;ldquo; &lt;em&gt;框架搜索路径&lt;/em&gt; &amp;rdquo;以轻松找到该选项。Xcode将在UI中显示它的替换路径。</target>
        </trans-unit>
        <trans-unit id="bbdba5d4735168e3785e68f7843040b781bf6309" translate="yes" xml:space="preserve">
          <source>Now when we call &lt;code&gt;workload()&lt;/code&gt; from a coroutine, the compiler knows that it may suspend and will prepare accordingly:</source>
          <target state="translated">现在，当我们从协程调用 &lt;code&gt;workload()&lt;/code&gt; 时，编译器知道它可能会挂起，并将相应地进行准备：</target>
        </trans-unit>
        <trans-unit id="1d24cd9e38cbefb079dd50a49d7d7f03311c7bf3" translate="yes" xml:space="preserve">
          <source>Now you are ready to create a new Kotlin project.</source>
          <target state="translated">现在你已经准备好创建一个新的Kotlin项目了。</target>
        </trans-unit>
        <trans-unit id="290dbe288d985515eeabffa880759f9b6702dbd0" translate="yes" xml:space="preserve">
          <source>Now you can declare a dependency on a Kotlin/Native library in the traditional &lt;code&gt;group:artifact:version&lt;/code&gt; notation:</source>
          <target state="translated">现在，您可以使用传统的 &lt;code&gt;group:artifact:version&lt;/code&gt; 表示法声明对Kotlin / Native库的依赖项：</target>
        </trans-unit>
        <trans-unit id="21f7ffde9424834101062b3a3b4388e5becd0386" translate="yes" xml:space="preserve">
          <source>Now you can publish the artifacts with the standard Gradle &lt;code&gt;publish&lt;/code&gt; task:</source>
          <target state="translated">现在，您可以使用标准的Gradle &lt;code&gt;publish&lt;/code&gt; 任务来发布工件：</target>
        </trans-unit>
        <trans-unit id="1f0e0a97af9c78bc7052cbc7558b0c5721564a3e" translate="yes" xml:space="preserve">
          <source>Now you can use this class from JavaScript in the following way:</source>
          <target state="translated">现在你可以通过以下方式从JavaScript中使用这个类。</target>
        </trans-unit>
        <trans-unit id="d5043215278e17616ae1356fe9712ab2361ec4d2" translate="yes" xml:space="preserve">
          <source>Now you have the new project created with the following folder structure:</source>
          <target state="translated">现在你已经创建了新的项目,其文件夹结构如下。</target>
        </trans-unit>
        <trans-unit id="3e24bac49840414b90995c5cbd33ee7b86539a1d" translate="yes" xml:space="preserve">
          <source>Now you're ready to start learning. Read the first task description and the exercise code. You will find a placeholder in the exercise code which you need to complete to solve the task:</source>
          <target state="translated">现在你可以开始学习了。阅读第一个任务描述和练习代码。你会在练习代码中找到一个占位符,你需要完成这个占位符来解决任务。</target>
        </trans-unit>
        <trans-unit id="5cb44051b734fae4af55ffe5224978dec7c87251" translate="yes" xml:space="preserve">
          <source>Now, &lt;code&gt;callStatic()&lt;/code&gt; is static in Java, while &lt;code&gt;callNonStatic()&lt;/code&gt; is not:</source>
          <target state="translated">现在，在Java中， &lt;code&gt;callStatic()&lt;/code&gt; 是静态的，而 &lt;code&gt;callNonStatic()&lt;/code&gt; 不是：</target>
        </trans-unit>
        <trans-unit id="a13d0fb128d24db7d3bb5f2f36926ba1c128f4f2" translate="yes" xml:space="preserve">
          <source>Now, &lt;em&gt;this&lt;/em&gt; can be omitted, as usual, and we get something that looks very much like a builder already:</source>
          <target state="translated">现在，&lt;em&gt;这个&lt;/em&gt;可以忽略，像往常一样，和我们得到的东西看起来非常像一个制造商已经：</target>
        </trans-unit>
        <trans-unit id="f0a82c0a40d22072db820930c190224b73ea978f" translate="yes" xml:space="preserve">
          <source>Now, all is left is to write the main function that reads the input and implements the rest of the algorithm that the problem statement asks for &amp;mdash; to compute the number of different integers that are produced while repeatedly applying function &lt;code&gt;f&lt;/code&gt; to the initial number &lt;code&gt;n&lt;/code&gt; that is given in the standard input.</source>
          <target state="translated">现在，所有剩下的工作就是写的主要功能是读取输入和实现算法的其余部分，问题语句请求-计算被同时反复应用功能产生不同的整数数量 &lt;code&gt;f&lt;/code&gt; 初始数量 &lt;code&gt;n&lt;/code&gt; 说在标准输入中给出。</target>
        </trans-unit>
        <trans-unit id="fb6047e18f4bc8d11bc30e4fd65fb8d503da1662" translate="yes" xml:space="preserve">
          <source>Now, if you call a method or access a property on &lt;code&gt;a&lt;/code&gt;, it's guaranteed not to cause an NPE, so you can safely say:</source>
          <target state="translated">现在，如果你调用一个方法或访问属性上 &lt;code&gt;a&lt;/code&gt; ，它保证不会造成NPE，所以你可以放心地说：</target>
        </trans-unit>
        <trans-unit id="20f3d5cd33eec60a8a8002b141a9b28a6b9b7682" translate="yes" xml:space="preserve">
          <source>Now, if you do:</source>
          <target state="translated">现在,如果你这样做。</target>
        </trans-unit>
        <trans-unit id="f71ccd18f05da02b03c8a2c32b3e5cdf31e2366b" translate="yes" xml:space="preserve">
          <source>Now, if you open DevTools, you should see both JavaScript and Kotlin files in Sources tab, as shown in the picture below.</source>
          <target state="translated">现在,如果你打开DevTools,你应该在Sources选项卡中看到JavaScript和Kotlin文件,如下图所示。</target>
        </trans-unit>
        <trans-unit id="a83d9e77f9456d18d8a05fd327f1e236de7060bd" translate="yes" xml:space="preserve">
          <source>Now, if you rebuild the project, you should see both &lt;code&gt;.js&lt;/code&gt; and &lt;code&gt;.js.map&lt;/code&gt; files generated.</source>
          <target state="translated">现在，如果您重建项目，则应该同时看到 &lt;code&gt;.js&lt;/code&gt; 和 &lt;code&gt;.js.map&lt;/code&gt; 文件。</target>
        </trans-unit>
        <trans-unit id="76f6cc5aafdabd68e55d4250b74b32cd977c308a" translate="yes" xml:space="preserve">
          <source>Now, it returns only from the lambda expression. Oftentimes it is more convenient to use implicit labels: such a label has the same name as the function to which the lambda is passed.</source>
          <target state="translated">现在,它只从lambda表达式中返回。通常情况下,使用隐式标签更方便:这样的标签与传递lambda的函数名称相同。</target>
        </trans-unit>
        <trans-unit id="94f815aeffcc5ac17241b513b6e20a9f1cdaea31" translate="yes" xml:space="preserve">
          <source>Now, let us see what happens if we launch a couple of coroutines sending strings (in this example we launch them in the context of the main thread as main coroutine's children):</source>
          <target state="translated">现在,让我们看看,如果我们启动几个发送字符串的coroutine(在这个例子中,我们在主线程的上下文中作为main coroutine的子线程启动它们)会发生什么。</target>
        </trans-unit>
        <trans-unit id="71d025254fd20926043d356611276f9c88403338" translate="yes" xml:space="preserve">
          <source>Now, let's make sure that coroutines are really cheaper than threads. How about starting a million of them? Let's try starting a million threads first:</source>
          <target state="translated">现在,让我们确认一下,coroutines真的比线程便宜。要不要启动一百万个线程?我们先试着启动一百万条线程吧。</target>
        </trans-unit>
        <trans-unit id="16dd7a2ec4c182b0f69f31fe9543eb28189fc230" translate="yes" xml:space="preserve">
          <source>Now, let's recall why we can say something like this in the code:</source>
          <target state="translated">现在,让我们回顾一下为什么我们可以在代码中说这样的话。</target>
        </trans-unit>
        <trans-unit id="544d487017d11ee4001cb80b112987fd1c122959" translate="yes" xml:space="preserve">
          <source>Now, let's say we want to extract our &lt;em&gt;workload&lt;/em&gt; (which is &quot;wait 1 second and return a number&quot;) into a separate function:</source>
          <target state="translated">现在，假设我们要将&lt;em&gt;工作量&lt;/em&gt;（即&amp;ldquo;等待1秒并返回数字&amp;rdquo;）提取到单独的函数中：</target>
        </trans-unit>
        <trans-unit id="c750281f584acadba2af58cffcc8c1305b106c0d" translate="yes" xml:space="preserve">
          <source>Now, the type parameter of &lt;code&gt;to&lt;/code&gt; must be a supertype of that of &lt;code&gt;from&lt;/code&gt;. This time, we're losing the ability to call &lt;code&gt;get()&lt;/code&gt; on &lt;code&gt;to&lt;/code&gt;.</source>
          <target state="translated">现在， &lt;code&gt;to&lt;/code&gt; 的类型参数必须是 &lt;code&gt;from&lt;/code&gt; 的类型参数的超类型。这一次，我们正在失去的能力来调用 &lt;code&gt;get()&lt;/code&gt; 方法上 &lt;code&gt;to&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="66aa36fc01590becc140967b82e52fb54836cefb" translate="yes" xml:space="preserve">
          <source>Now, try that with threads. What would happen? (Most likely your code will produce some sort of out-of-memory error)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="43de32521253364ea5d09558750dd9502168f58f" translate="yes" xml:space="preserve">
          <source>Now, we can launch coroutines in the scope of this &lt;code&gt;Activity&lt;/code&gt; using the defined &lt;code&gt;scope&lt;/code&gt;. For the demo, we launch ten coroutines that delay for a different time:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="841ea7e84248eb13447bb49e5c5c6dbc24123f33" translate="yes" xml:space="preserve">
          <source>Now, we can launch coroutines in the scope of this &lt;code&gt;Activity&lt;/code&gt; without having to explicitly specify their context. For the demo, we launch ten coroutines that delay for a different time:</source>
          <target state="translated">现在，我们可以在此 &lt;code&gt;Activity&lt;/code&gt; 的范围内启动协程，而不必显式指定它们的上下文。对于该演示，我们启动了十个协程，它们会在不同的时间延迟：</target>
        </trans-unit>
        <trans-unit id="b7b794f9844126d9635b31ec7a7259faff61ea34" translate="yes" xml:space="preserve">
          <source>Now, we can qualify a &lt;em&gt;break&lt;/em&gt; or a &lt;em&gt;continue&lt;/em&gt; with a label:</source>
          <target state="translated">现在，我们可以使用标签限定&lt;em&gt;休息&lt;/em&gt;或&lt;em&gt;继续&lt;/em&gt;：</target>
        </trans-unit>
        <trans-unit id="4009ace22d0b31f5461708301ff321a7b41e34f1" translate="yes" xml:space="preserve">
          <source>Now, we need to create the implementation file (and missing directories) for Android in the &lt;code&gt;SharedCode/src/androidMain/kotlin/actual.kt&lt;/code&gt;:</source>
          <target state="translated">现在，我们需要在 &lt;code&gt;SharedCode/src/androidMain/kotlin/actual.kt&lt;/code&gt; 中为Android创建实现文件（和缺少的目录）：</target>
        </trans-unit>
        <trans-unit id="cc32792e1ffb6994d09d3ccc5850fcde297ab5b1" translate="yes" xml:space="preserve">
          <source>Now, whenever anyone reads &lt;code&gt;p.name&lt;/code&gt;, &lt;code&gt;getValue()&lt;/code&gt; will be invoked with &lt;code&gt;p&lt;/code&gt; as &lt;code&gt;thisRef&lt;/code&gt; and metadata about the &lt;code&gt;name&lt;/code&gt; property as &lt;code&gt;property&lt;/code&gt;. Since &lt;code&gt;thisRef&lt;/code&gt; is a &lt;code&gt;DbModel&lt;/code&gt;, this delegated property can only be used inside &lt;code&gt;DbModel&lt;/code&gt; and its subclasses.</source>
          <target state="translated">现在，只要有人读取 &lt;code&gt;p.name&lt;/code&gt; ，就会以 &lt;code&gt;p&lt;/code&gt; 作为 &lt;code&gt;thisRef&lt;/code&gt; 和有关 &lt;code&gt;name&lt;/code&gt; 属性的元数据作为 &lt;code&gt;property&lt;/code&gt; 来调用 &lt;code&gt;getValue()&lt;/code&gt; 。由于 &lt;code&gt;thisRef&lt;/code&gt; 是 &lt;code&gt;DbModel&lt;/code&gt; ，因此只能在 &lt;code&gt;DbModel&lt;/code&gt; 及其子类内部使用此委托属性。</target>
        </trans-unit>
        <trans-unit id="1ddfae4b18596b2854071f83733087767ffb2d01" translate="yes" xml:space="preserve">
          <source>Now, you can do:</source>
          <target state="translated">现在,你可以做。</target>
        </trans-unit>
        <trans-unit id="c62d757ce7f75d3f121e4c4fec1867b7958bd009" translate="yes" xml:space="preserve">
          <source>Now, you can no longer say &lt;code&gt;val mv = MotorVehicle(100, 4)&lt;/code&gt;.</source>
          <target state="translated">现在，您不再可以说 &lt;code&gt;val mv = MotorVehicle(100, 4)&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="6c97d282b328adc12f3e5a556471451c0554c8b2" translate="yes" xml:space="preserve">
          <source>Now, you can say &lt;code&gt;loadFromDb&amp;lt;Exercise&amp;gt;(&quot;x01234567&quot;)&lt;/code&gt; to load an object from the &lt;code&gt;Exercise&lt;/code&gt; database table.</source>
          <target state="translated">现在，您可以说 &lt;code&gt;loadFromDb&amp;lt;Exercise&amp;gt;(&quot;x01234567&quot;)&lt;/code&gt; 从 &lt;code&gt;Exercise&lt;/code&gt; 数据库表中加载对象。</target>
        </trans-unit>
        <trans-unit id="93baa80c955acf188a4912f62d9bfabe1e89cde4" translate="yes" xml:space="preserve">
          <source>Now, you can treat a bowl of &lt;code&gt;T&lt;/code&gt; as a producer of any superclass of &lt;code&gt;T&lt;/code&gt;, and as a consumer of any subclass of &lt;code&gt;T&lt;/code&gt;:</source>
          <target state="translated">现在，你可以把一碗 &lt;code&gt;T&lt;/code&gt; 作为任何超的生产者 &lt;code&gt;T&lt;/code&gt; ，并作为的任何子类的消费 &lt;code&gt;T&lt;/code&gt; ：</target>
        </trans-unit>
        <trans-unit id="cb06774e37de315de0f5603f0b4fd0176b0b42a0" translate="yes" xml:space="preserve">
          <source>Now, you may not create a &lt;code&gt;TreeNode&lt;/code&gt; of a type that is not a subclass/implementor of &lt;code&gt;Vehicle&lt;/code&gt;. Inside the class, whenever you've got a value of type &lt;code&gt;T&lt;/code&gt;, you may access all the public members of &lt;code&gt;Vehicle&lt;/code&gt; on it.</source>
          <target state="translated">现在，您可能无法创建不是 &lt;code&gt;Vehicle&lt;/code&gt; 的子类/实现的类型的 &lt;code&gt;TreeNode&lt;/code&gt; 。在类内部，只要您拥有类型 &lt;code&gt;T&lt;/code&gt; 的值，就可以访问其上 &lt;code&gt;Vehicle&lt;/code&gt; 的所有公共成员。</target>
        </trans-unit>
        <trans-unit id="e66b62de2c45ca7a1dafaa470efed27db40c8abf" translate="yes" xml:space="preserve">
          <source>Null Safety</source>
          <target state="translated">空心安全</target>
        </trans-unit>
        <trans-unit id="961437d22902a2f7dfd53365cc313f4a8b919ec9" translate="yes" xml:space="preserve">
          <source>Null references are &lt;a href=&quot;null-safety&quot;&gt;controlled by the type system&lt;/a&gt;.</source>
          <target state="translated">空引用&lt;a href=&quot;null-safety&quot;&gt;由类型系统控制&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="a2b2542f64eaa222fbfda6a1a4f6d0850cf59a88" translate="yes" xml:space="preserve">
          <source>Null safety</source>
          <target state="translated">空心安全</target>
        </trans-unit>
        <trans-unit id="39f94d225bc04bec959b32c61b7c0b099f1b3de4" translate="yes" xml:space="preserve">
          <source>Null safety is enforced as usual, so a variable of type &lt;code&gt;ContentKind&lt;/code&gt; can not be null, unlike in Java.</source>
          <target state="translated">空安全性照常执行，因此与Java不同， &lt;code&gt;ContentKind&lt;/code&gt; 类型的变量不能为空。</target>
        </trans-unit>
        <trans-unit id="c768f27b8cd368aac53b3bf7b3466119f4aeaaad" translate="yes" xml:space="preserve">
          <source>Null-Safety and Platform Types</source>
          <target state="translated">空心安全和平台类型</target>
        </trans-unit>
        <trans-unit id="7b2e605360643dd896eff359d1535b4e4db34c3d" translate="yes" xml:space="preserve">
          <source>Null-safety</source>
          <target state="translated">Null-safety</target>
        </trans-unit>
        <trans-unit id="e96a81e5fc6aa1615fc78a379fdad68b748bc26c" translate="yes" xml:space="preserve">
          <source>NullPointerException</source>
          <target state="translated">NullPointerException</target>
        </trans-unit>
        <trans-unit id="7cfd44db910fd8b20253bc74265b31aeaf45384c" translate="yes" xml:space="preserve">
          <source>Nullability</source>
          <target state="translated">Nullability</target>
        </trans-unit>
        <trans-unit id="13c99d5e49300b52aefe21f12764921df1d1f93f" translate="yes" xml:space="preserve">
          <source>Nullability annotations</source>
          <target state="translated">无效性注释</target>
        </trans-unit>
        <trans-unit id="e5e6784edcd14305d294e06ecb03d642a0a57873" translate="yes" xml:space="preserve">
          <source>Nullability assertions on access to Java types annotated with &lt;code&gt;@NotNull&lt;/code&gt;</source>
          <target state="translated">使用 &lt;code&gt;@NotNull&lt;/code&gt; 注释的访问Java类型的可空性声明</target>
        </trans-unit>
        <trans-unit id="1e5389deab4b42bc503c62cbba549bbb26b00be1" translate="yes" xml:space="preserve">
          <source>Nullable Receiver</source>
          <target state="translated">可空心接收机</target>
        </trans-unit>
        <trans-unit id="29ff5a1131fe0933e804809fec54eb9e91bf1512" translate="yes" xml:space="preserve">
          <source>Nullable receiver</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ea692fde5fad8fec43d27ab3923928d9c3e4f762" translate="yes" xml:space="preserve">
          <source>Nullable types and Non-Null Types</source>
          <target state="translated">可空类型和非空类型</target>
        </trans-unit>
        <trans-unit id="eda4c49c3f8e3f49857bedaeb7bb3c5e705b11d9" translate="yes" xml:space="preserve">
          <source>Nullable values and &lt;em&gt;null&lt;/em&gt; checks</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b7baa1d40c4ea29afc9098732bffee2a861a6c44" translate="yes" xml:space="preserve">
          <source>Number</source>
          <target state="translated">Number</target>
        </trans-unit>
        <trans-unit id="2e1ee95668fd5f69d1925d4acd4d52b859469b82" translate="yes" xml:space="preserve">
          <source>NumberFormatException</source>
          <target state="translated">NumberFormatException</target>
        </trans-unit>
        <trans-unit id="7e53821f70ae16079c4a6a64c52a91fae645bc5f" translate="yes" xml:space="preserve">
          <source>Numbers</source>
          <target state="translated">Numbers</target>
        </trans-unit>
        <trans-unit id="b7b3deb2440db7b27508e61ad6b6526ba91d78a1" translate="yes" xml:space="preserve">
          <source>Numbers are compared with the ends of this range according to IEEE-754.</source>
          <target state="translated">根据IEEE-754,数字与这个范围的两端进行比较。</target>
        </trans-unit>
        <trans-unit id="b1c2afbaeee52797fa3a437d9c480e4a05cf0193" translate="yes" xml:space="preserve">
          <source>Numeric types use the traditional numerical order: &lt;code&gt;1&lt;/code&gt; is greater than &lt;code&gt;0&lt;/code&gt;; &lt;code&gt;-3.4f&lt;/code&gt; is greater than &lt;code&gt;-5f&lt;/code&gt;, an so on.</source>
          <target state="translated">数值类型使用传统的数值顺序： &lt;code&gt;1&lt;/code&gt; 大于 &lt;code&gt;0&lt;/code&gt; ； &lt;code&gt;-3.4f&lt;/code&gt; 大于 &lt;code&gt;-5f&lt;/code&gt; ，依此类推。</target>
        </trans-unit>
        <trans-unit id="aadf9b6283ac66e1e51fce7a8cfe42781b4ea431" translate="yes" xml:space="preserve">
          <source>Numeric types use the traditional numerical order: &lt;code&gt;1&lt;/code&gt; is greater than &lt;code&gt;0&lt;/code&gt;; &lt;code&gt;-3.4f&lt;/code&gt; is greater than &lt;code&gt;-5f&lt;/code&gt;, and so on.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="132a0e722f57154d901e124e4cb8e8bc570f7174" translate="yes" xml:space="preserve">
          <source>Numerous use cases are covered by just the default source sets and don't require custom source sets.</source>
          <target state="translated">众多用例仅由默认源集覆盖,不需要自定义源集。</target>
        </trans-unit>
        <trans-unit id="f5bd86a2929ff840c45d76159d984c1239906a9d" translate="yes" xml:space="preserve">
          <source>OSGi</source>
          <target state="translated">OSGi</target>
        </trans-unit>
        <trans-unit id="802bfbdcec1e0873ee0e4b3f43f68d3022244543" translate="yes" xml:space="preserve">
          <source>OTHER_LETTER</source>
          <target state="translated">OTHER_LETTER</target>
        </trans-unit>
        <trans-unit id="c526c1a55d3a7d1197fc54064f8aa775a085df54" translate="yes" xml:space="preserve">
          <source>OTHER_NEUTRALS</source>
          <target state="translated">OTHER_NEUTRALS</target>
        </trans-unit>
        <trans-unit id="0528be3a553ee55304545e3df532c16619f9a75f" translate="yes" xml:space="preserve">
          <source>OTHER_NUMBER</source>
          <target state="translated">OTHER_NUMBER</target>
        </trans-unit>
        <trans-unit id="a79f18b5ad7c3bc6ad0e1685c0b9f1d91e9ea75c" translate="yes" xml:space="preserve">
          <source>OTHER_PUNCTUATION</source>
          <target state="translated">OTHER_PUNCTUATION</target>
        </trans-unit>
        <trans-unit id="5dcd7535199ae15a813d866ef04e762cfaa07f6c" translate="yes" xml:space="preserve">
          <source>OTHER_SYMBOL</source>
          <target state="translated">OTHER_SYMBOL</target>
        </trans-unit>
        <trans-unit id="5d84eb9e92dc661a577d3adfba33f1d74c56b13f" translate="yes" xml:space="preserve">
          <source>OUT</source>
          <target state="translated">OUT</target>
        </trans-unit>
        <trans-unit id="91920f1b8433472c27ea07aeaf636cc60ba181dc" translate="yes" xml:space="preserve">
          <source>ObjCAction</source>
          <target state="translated">ObjCAction</target>
        </trans-unit>
        <trans-unit id="e75d1b861d64404390b1044e805e449a8200ca83" translate="yes" xml:space="preserve">
          <source>ObjCBlockVar</source>
          <target state="translated">ObjCBlockVar</target>
        </trans-unit>
        <trans-unit id="e9af1c5fc6d5face32a12e24e19f7721bddde5b0" translate="yes" xml:space="preserve">
          <source>ObjCClass</source>
          <target state="translated">ObjCClass</target>
        </trans-unit>
        <trans-unit id="f25e8c7f51c9fbd76d5d3f0065c1777ea9957679" translate="yes" xml:space="preserve">
          <source>ObjCClassOf</source>
          <target state="translated">ObjCClassOf</target>
        </trans-unit>
        <trans-unit id="f6a51cb987439b8eee022689cce7766c56796d55" translate="yes" xml:space="preserve">
          <source>ObjCConstructor</source>
          <target state="translated">ObjCConstructor</target>
        </trans-unit>
        <trans-unit id="174b16a8130fefe11ed27381abeeb2de5f620114" translate="yes" xml:space="preserve">
          <source>ObjCFactory</source>
          <target state="translated">ObjCFactory</target>
        </trans-unit>
        <trans-unit id="b26295bcadcc4d23542076fe5cb26969093b0b48" translate="yes" xml:space="preserve">
          <source>ObjCMethod</source>
          <target state="translated">ObjCMethod</target>
        </trans-unit>
        <trans-unit id="07d9267ddaf9a5ade080cb2ba3e61a2c1db5834c" translate="yes" xml:space="preserve">
          <source>ObjCNotImplementedVar</source>
          <target state="translated">ObjCNotImplementedVar</target>
        </trans-unit>
        <trans-unit id="88fce822e198e83b3ad7f5c732a4ec9995f176b3" translate="yes" xml:space="preserve">
          <source>ObjCObject</source>
          <target state="translated">ObjCObject</target>
        </trans-unit>
        <trans-unit id="c3946e9e7a5b7a873393f4068d626ccc17017e1d" translate="yes" xml:space="preserve">
          <source>ObjCObjectBase</source>
          <target state="translated">ObjCObjectBase</target>
        </trans-unit>
        <trans-unit id="f2b935ffe4e074cda5d9854c568bff792bd27525" translate="yes" xml:space="preserve">
          <source>ObjCObjectBaseMeta</source>
          <target state="translated">ObjCObjectBaseMeta</target>
        </trans-unit>
        <trans-unit id="968b48c24c631a6e3656fa344166e2e696dac30a" translate="yes" xml:space="preserve">
          <source>ObjCObjectMeta</source>
          <target state="translated">ObjCObjectMeta</target>
        </trans-unit>
        <trans-unit id="877c2fba97f85ebcbe0815d3dd7f9aa9abf27eb2" translate="yes" xml:space="preserve">
          <source>ObjCObjectVar</source>
          <target state="translated">ObjCObjectVar</target>
        </trans-unit>
        <trans-unit id="380d9e7d32a5ea9a8f4a45d77367a2bd6224641f" translate="yes" xml:space="preserve">
          <source>ObjCOutlet</source>
          <target state="translated">ObjCOutlet</target>
        </trans-unit>
        <trans-unit id="6ad1a2f860c17b61aedf856b4ee3682acdaa8417" translate="yes" xml:space="preserve">
          <source>ObjCProtocol</source>
          <target state="translated">ObjCProtocol</target>
        </trans-unit>
        <trans-unit id="7ddeec08c37b0e1684597f07f64a856e9d5996d5" translate="yes" xml:space="preserve">
          <source>ObjCStringVarOf</source>
          <target state="translated">ObjCStringVarOf</target>
        </trans-unit>
        <trans-unit id="2883f191bc5ebfdc16c0813eff659b35363ea69b" translate="yes" xml:space="preserve">
          <source>Object</source>
          <target state="translated">Object</target>
        </trans-unit>
        <trans-unit id="9cf5c3411eb513b108884e51c19ba17172ea9665" translate="yes" xml:space="preserve">
          <source>Object Declarations</source>
          <target state="translated">对象声明</target>
        </trans-unit>
        <trans-unit id="7c97f9bd791112ffa2e31c34e5efe261bd493bd5" translate="yes" xml:space="preserve">
          <source>Object Expressions and Declarations</source>
          <target state="translated">对象表达式和声明</target>
        </trans-unit>
        <trans-unit id="f0e2a5cc2614159a14f8d24f77aff8cedbb91395" translate="yes" xml:space="preserve">
          <source>Object Methods</source>
          <target state="translated">对象方法</target>
        </trans-unit>
        <trans-unit id="da5029a017fab6364fe3776821fcb6e385dc5dee" translate="yes" xml:space="preserve">
          <source>Object Transfer Basics.</source>
          <target state="translated">对象转移基础知识。</target>
        </trans-unit>
        <trans-unit id="720b937cd9168a2afdad295cde0f6e29e57ba3f8" translate="yes" xml:space="preserve">
          <source>Object configuration and computing the result: &lt;code&gt;run&lt;/code&gt;</source>
          <target state="translated">对象配置和计算结果： &lt;code&gt;run&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="1602dbe04f927f110613a2ff025fac15d0ab85e1" translate="yes" xml:space="preserve">
          <source>Object configuration: &lt;code&gt;apply&lt;/code&gt;</source>
          <target state="translated">对象配置： &lt;code&gt;apply&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="b3d1d8d22ba8224cd8039f6fb03638fcc7cc89d7" translate="yes" xml:space="preserve">
          <source>Object declaration's initialization is thread-safe and done at first access.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a447624065dc9ff0a50d2837d5bc597740342d7d" translate="yes" xml:space="preserve">
          <source>Object declaration's initialization is thread-safe.</source>
          <target state="translated">对象声明的初始化是线程安全的。</target>
        </trans-unit>
        <trans-unit id="628c7c8804cdd6233ca4db93a682c55cf0920e38" translate="yes" xml:space="preserve">
          <source>Object declarations</source>
          <target state="translated">对象声明</target>
        </trans-unit>
        <trans-unit id="cae8f3bd29605b55880171db0511493e6eb7c132" translate="yes" xml:space="preserve">
          <source>Object describing the current platform program executes upon.</source>
          <target state="translated">描述当前程序执行平台的对象。</target>
        </trans-unit>
        <trans-unit id="652916453e90e519555e6ab21189e4862e16ddc5" translate="yes" xml:space="preserve">
          <source>Object expressions</source>
          <target state="translated">对象表达式</target>
        </trans-unit>
        <trans-unit id="a5005a7247de5e6b7399fc2c0fe58f85332088cd" translate="yes" xml:space="preserve">
          <source>Object pinning</source>
          <target state="translated">锁定对象</target>
        </trans-unit>
        <trans-unit id="bd34180a1517f8541977dbe1575129ec09ee4ed0" translate="yes" xml:space="preserve">
          <source>Object reference</source>
          <target state="translated">对象参考</target>
        </trans-unit>
        <trans-unit id="c74457d6502afea678cde0191acb0c28174b3019" translate="yes" xml:space="preserve">
          <source>Object subgraph detachment</source>
          <target state="translated">对象子图分离</target>
        </trans-unit>
        <trans-unit id="9e612181ece96085e9c01a6c4c75420948e3db15" translate="yes" xml:space="preserve">
          <source>Object subgraph freezing</source>
          <target state="translated">对象子图冻结</target>
        </trans-unit>
        <trans-unit id="f714255fe9b4b0abd289766d10b307beefd8bdca" translate="yes" xml:space="preserve">
          <source>Object subgraph ownership transfer</source>
          <target state="translated">对象子图所有权转移</target>
        </trans-unit>
        <trans-unit id="f7e1ff28ab70fc23071798b8c0343f8a27fa8277" translate="yes" xml:space="preserve">
          <source>Object transfer and freezing</source>
          <target state="translated">对象转移和冻结</target>
        </trans-unit>
        <trans-unit id="9cf4af30df052d80876381f9ec0e05811ecd3d08" translate="yes" xml:space="preserve">
          <source>Objective-C</source>
          <target state="translated">Objective-C</target>
        </trans-unit>
        <trans-unit id="f624b8a4ac060c545ced78fe5b569d299005d811" translate="yes" xml:space="preserve">
          <source>Objective-C allows generics to be declared covariant or contravariant. Swift has no support for variance. Generic classes coming from Objective-C can be force-cast as needed.</source>
          <target state="translated">Objective-C 允许声明属变量或反变量。Swift不支持变量。来自Objective-C的泛型类可以根据需要进行强投。</target>
        </trans-unit>
        <trans-unit id="c34ace6f5a2b6e2147c689be6867500eabe88ca9" translate="yes" xml:space="preserve">
          <source>Objective-C and Swift use reference counting. Kotlin/Native has its own garbage collection too. Kotlin/Native garbage collection is integrated with Objective-C/Swift reference counting. We do not need to use anything special to control the lifetime of Kotlin/Native instances from Swift or Objective-C.</source>
          <target state="translated">Objective-C和Swift使用引用计数。Kotlin/Native也有自己的垃圾收集。Kotlin/Native的垃圾收集与Objective-C/Swift的引用计数集成在一起。我们不需要使用任何特殊的东西来控制来自Swift或Objective-C的Kotlin/Native实例的寿命。</target>
        </trans-unit>
        <trans-unit id="81b529433016c0d2c2b79263ff487c0612e2136f" translate="yes" xml:space="preserve">
          <source>Objective-C classes and protocols</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="42d9bdb0193a26ed15d57450ee6f73bec2393ce7" translate="yes" xml:space="preserve">
          <source>Objective-C classes are imported into Kotlin with their original names. Protocols are imported as interfaces with &lt;code&gt;Protocol&lt;/code&gt; name suffix, i.e. &lt;code&gt;@protocol Foo&lt;/code&gt; -&amp;gt; &lt;code&gt;interface FooProtocol&lt;/code&gt;. These classes and interfaces are placed into a package &lt;a href=&quot;#usage&quot;&gt;specified in build configuration&lt;/a&gt; (&lt;code&gt;platform.*&lt;/code&gt; packages for preconfigured system frameworks).</source>
          <target state="translated">使用原始名称将Objective-C类导入Kotlin。协议被导入为带有 &lt;code&gt;Protocol&lt;/code&gt; 名称后缀的接口，即 &lt;code&gt;@protocol Foo&lt;/code&gt; - &amp;gt; &lt;code&gt;interface FooProtocol&lt;/code&gt; 。将这些类和接口放入&lt;a href=&quot;#usage&quot;&gt;构建配置中指定&lt;/a&gt;的程序包（用于预配置系统框架的 &lt;code&gt;platform.*&lt;/code&gt; 程序包）中。</target>
        </trans-unit>
        <trans-unit id="e28ecca8c4c63098937f693b564f06106597a69f" translate="yes" xml:space="preserve">
          <source>Objective-C generics do not support all features of either Kotlin or Swift, so there will be some information lost in the translation.</source>
          <target state="translated">Objective-C的泛型并不支持Kotlin或Swift的所有功能,所以在翻译中会丢失一些信息。</target>
        </trans-unit>
        <trans-unit id="edc50c4e6d2116d2eefbad12ba8e08e873a18c54" translate="yes" xml:space="preserve">
          <source>Objective-C supports &quot;lightweight generics&quot; defined on classes, with a relatively limited feature set. Swift can import generics defined on classes to help provide additional type information to the compiler.</source>
          <target state="translated">Objective-C支持定义在类上的 &quot;轻量级泛型&quot;,其功能集相对有限。Swift可以导入定义在类上的泛型,以帮助向编译器提供额外的类型信息。</target>
        </trans-unit>
        <trans-unit id="872324a80a8df1d396c94677f04ea994d1ae3329" translate="yes" xml:space="preserve">
          <source>Objects and companion objects</source>
          <target state="translated">物体和伴生物体</target>
        </trans-unit>
        <trans-unit id="baa64e9ea92fa8d9f0990d9b1a5bc22ee025b445" translate="yes" xml:space="preserve">
          <source>Objects can be passed between threads in one of two possible modes.</source>
          <target state="translated">对象可以通过两种可能的模式之一在线程之间传递。</target>
        </trans-unit>
        <trans-unit id="c92258fa87a7fd87bfb0eac39b2cad3876c1531d" translate="yes" xml:space="preserve">
          <source>Observable</source>
          <target state="translated">Observable</target>
        </trans-unit>
        <trans-unit id="53d6bf00994a7a961b92ecd0048f0ecd77a13ddf" translate="yes" xml:space="preserve">
          <source>ObservableProperty</source>
          <target state="translated">ObservableProperty</target>
        </trans-unit>
        <trans-unit id="1145800f1de30eba6d1df3a4fd2cc70c1f07f939" translate="yes" xml:space="preserve">
          <source>Obtain the Kotlin/Native compiler</source>
          <target state="translated">获取Kotlin/Native编译器。</target>
        </trans-unit>
        <trans-unit id="cdf71ecbbe212f441c04603a28909072a535e232" translate="yes" xml:space="preserve">
          <source>Obtaining member references from a class reference</source>
          <target state="translated">从类引用中获取成员引用</target>
        </trans-unit>
        <trans-unit id="df8298dcee7334200280003820f9875dbf3c187b" translate="yes" xml:space="preserve">
          <source>Obtaining the Compiler</source>
          <target state="translated">获取编译器</target>
        </trans-unit>
        <trans-unit id="b10db2a36e46741d4da85b74ece4b6f72fb9bfd8" translate="yes" xml:space="preserve">
          <source>Obtains a &lt;code&gt;KClass&lt;/code&gt; instance for the given constructor reference.</source>
          <target state="translated">获取给定构造函数引用的 &lt;code&gt;KClass&lt;/code&gt; 实例。</target>
        </trans-unit>
        <trans-unit id="9910159f8fee624aa4548124f031d4745a86c889" translate="yes" xml:space="preserve">
          <source>Obtains a constructor reference for the given &lt;code&gt;KClass&lt;/code&gt;.</source>
          <target state="translated">获取给定 &lt;code&gt;KClass&lt;/code&gt; 的构造方法引用。</target>
        </trans-unit>
        <trans-unit id="0219b4a8ea1da937bc70be9c1ab95184f21fc8c4" translate="yes" xml:space="preserve">
          <source>Obtains the current continuation instance inside suspend functions and either suspends currently running coroutine or returns result immediately without suspension.</source>
          <target state="translated">在suspend函数中获取当前的continuation实例,并暂停当前正在运行的coroutine或立即返回结果,不暂停。</target>
        </trans-unit>
        <trans-unit id="646fc575bcb6c35847d73d3b2dd2cc5db56f01df" translate="yes" xml:space="preserve">
          <source>Obtains the current continuation instance inside suspend functions and suspends currently running coroutine.</source>
          <target state="translated">在suspend函数中获取当前的continuation实例,并暂停当前运行的coroutine。</target>
        </trans-unit>
        <trans-unit id="dedd1425a40b177d169a6eb17080f5f8210d2fe7" translate="yes" xml:space="preserve">
          <source>Obtains the current continuation instance inside suspend functions and suspends the currently running coroutine.</source>
          <target state="translated">在suspend函数中获取当前的continuation实例,并暂停当前运行的coroutine。</target>
        </trans-unit>
        <trans-unit id="0e481b647fccdeaa073311d1f3e53a76a5713079" translate="yes" xml:space="preserve">
          <source>Of course, there are use cases, where we need to pass a struct as a value to one call, and then, to pass the same struct as a reference to another call. This is possible in Kotlin/Native too. A &lt;code&gt;NativePlacement&lt;/code&gt; will be needed here.</source>
          <target state="translated">当然，在某些用例中，我们需要将一个结构作为值传递给一个调用，然后再将相同的结构作为引用传递给另一个调用。Kotlin / Native中也可以这样做。这里需要一个 &lt;code&gt;NativePlacement&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="31883564163ba418ee2d22f8e75f951da14db61c" translate="yes" xml:space="preserve">
          <source>Of course, this function makes sense for any &lt;code&gt;MutableList&amp;lt;T&amp;gt;&lt;/code&gt;, and we can make it generic:</source>
          <target state="translated">当然，此函数对任何 &lt;code&gt;MutableList&amp;lt;T&amp;gt;&lt;/code&gt; 意义，我们可以使其泛型：</target>
        </trans-unit>
        <trans-unit id="a8b4afe53634485a00aaaa6addcb6e74df14c763" translate="yes" xml:space="preserve">
          <source>Of course, this is not a complete list of how you can use Kotlin/JS to your advantage, but merely a selection of cherry-picked cases. We invite you to experiment with combinations of these use cases, and find out what works best for your project.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="01fad7001a3bd3884c94e7702bc3df04daa71091" translate="yes" xml:space="preserve">
          <source>Of course, you can use both &lt;code&gt;kotlin-allopen&lt;/code&gt; and &lt;code&gt;kotlin-spring&lt;/code&gt; in the same project.</source>
          <target state="translated">当然，您可以在同一项目中同时使用 &lt;code&gt;kotlin-allopen&lt;/code&gt; 和 &lt;code&gt;kotlin-spring&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="42c11258f0fc4616029dfe363fc90cedc10dac00" translate="yes" xml:space="preserve">
          <source>Often C APIs allow passing some user data to callbacks. Such data is usually provided by the user when configuring the callback. It is passed to some C function (or written to the struct) as e.g. &lt;code&gt;void*&lt;/code&gt;. However, references to Kotlin objects can't be directly passed to C. So they require wrapping before configuring the callback and then unwrapping in the callback itself, to safely swim from Kotlin to Kotlin through the C world. Such wrapping is possible with &lt;code&gt;StableRef&lt;/code&gt; class.</source>
          <target state="translated">C API通常允许将一些用户数据传递给回调。此类数据通常由用户在配置回调时提供。它被传递给某些C函数（或写入结构），例如 &lt;code&gt;void*&lt;/code&gt; 。但是，不能将对Kotlin对象的引用直接传递给C。因此，它们需要在配置回调之前进行包装，然后在回调本身中展开，以安全地通过C世界从Kotlin游到Kotlin。使用 &lt;code&gt;StableRef&lt;/code&gt; 类可以进行此类包装。</target>
        </trans-unit>
        <trans-unit id="242f4c07d8050ddde5e50538c080e4ec4486413c" translate="yes" xml:space="preserve">
          <source>Often it's necessary to specify target-specific linker options for a Kotlin/Native binary using an interop. It can be done using the &lt;code&gt;target&lt;/code&gt; script block:</source>
          <target state="translated">通常有必要使用互操作为Kotlin / Native二进制文件指定特定于目标的链接器选项。可以使用 &lt;code&gt;target&lt;/code&gt; 脚本块来完成：</target>
        </trans-unit>
        <trans-unit id="954df0a6263002ad270cb3cbc1c777c4a6fac8a1" translate="yes" xml:space="preserve">
          <source>Often it's necessary to specify target-specific linker options for a binary which uses a native library. It can by done using the &lt;code&gt;linkerOpts&lt;/code&gt; property of the binary. See the &lt;a href=&quot;#configuring-binaries&quot;&gt;Configuring binaries&lt;/a&gt; section for details.</source>
          <target state="translated">通常，必须为使用本机库的二进制文件指定特定于目标的链接器选项。可以通过使用二进制文件的 &lt;code&gt;linkerOpts&lt;/code&gt; 属性来完成。有关详细信息，请参见&lt;a href=&quot;#configuring-binaries&quot;&gt;配置二进制文件&lt;/a&gt;部分。</target>
        </trans-unit>
        <trans-unit id="17450dcb9110eb38f3fe2d512c09098b5921aef0" translate="yes" xml:space="preserve">
          <source>Older compilers reject binaries that rely on new features (e.g. a 1.0 compiler rejects binaries that use coroutines).</source>
          <target state="translated">旧的编译器拒绝接受依赖新特性的二进制文件(例如,1.0的编译器拒绝使用coroutines的二进制文件)。</target>
        </trans-unit>
        <trans-unit id="622d524446394c09abc4f2559c91821dbd352982" translate="yes" xml:space="preserve">
          <source>Omit semicolons whenever possible.</source>
          <target state="translated">尽可能地省略分号。</target>
        </trans-unit>
        <trans-unit id="902eb259efe55ed5caa3e21ba3397c994cd51091" translate="yes" xml:space="preserve">
          <source>On Apple platforms &lt;code&gt;objc&lt;/code&gt; library is provided for interoperability with &lt;a href=&quot;https://en.wikipedia.org/wiki/Objective-C&quot;&gt;Objective-C&lt;/a&gt;.</source>
          <target state="translated">在Apple平台上，提供 &lt;code&gt;objc&lt;/code&gt; 库是为了与&lt;a href=&quot;https://en.wikipedia.org/wiki/Objective-C&quot;&gt;Objective-C&lt;/a&gt;互操作。</target>
        </trans-unit>
        <trans-unit id="3a12a3cf1289b0209f29a4a3a5bf9dabfcdb8788" translate="yes" xml:space="preserve">
          <source>On GitHub</source>
          <target state="translated">在GitHub上</target>
        </trans-unit>
        <trans-unit id="c0ab16d7d10cfcca8fa016bc8b366c04e76c5016" translate="yes" xml:space="preserve">
          <source>On JVM it is possible to redefine global exception handler for all coroutines by registering &lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/-coroutine-exception-handler/index.html&quot;&gt;CoroutineExceptionHandler&lt;/a&gt; via &lt;a href=&quot;https://docs.oracle.com/javase/8/docs/api/java/util/ServiceLoader.html&quot;&gt;&lt;code&gt;ServiceLoader&lt;/code&gt;&lt;/a&gt;. Global exception handler is similar to &lt;a href=&quot;https://docs.oracle.com/javase/8/docs/api/java/lang/Thread.html#setDefaultUncaughtExceptionHandler(java.lang.Thread.UncaughtExceptionHandler)&quot;&gt;&lt;code&gt;Thread.defaultUncaughtExceptionHandler&lt;/code&gt;&lt;/a&gt; which is used when no more specific handlers are registered. On Android, &lt;code&gt;uncaughtExceptionPreHandler&lt;/code&gt; is installed as a global coroutine exception handler.</source>
          <target state="translated">在JVM上，可以通过&lt;a href=&quot;https://docs.oracle.com/javase/8/docs/api/java/util/ServiceLoader.html&quot;&gt; &lt;code&gt;ServiceLoader&lt;/code&gt; &lt;/a&gt;注册&lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/-coroutine-exception-handler/index.html&quot;&gt;CoroutineExceptionHandler&lt;/a&gt;来为所有协程重新定义全局异常处理程序。全局异常处理程序与&lt;a href=&quot;https://docs.oracle.com/javase/8/docs/api/java/lang/Thread.html#setDefaultUncaughtExceptionHandler(java.lang.Thread.UncaughtExceptionHandler)&quot;&gt; &lt;code&gt;Thread.defaultUncaughtExceptionHandler&lt;/code&gt; &lt;/a&gt;相似，在没有其他特定的处理程序注册时使用。在Android上， &lt;code&gt;uncaughtExceptionPreHandler&lt;/code&gt; 被安装为全局协程异常处理程序。</target>
        </trans-unit>
        <trans-unit id="52a2cc9b4e5cfa91fe617932ce29f7d004cf9460" translate="yes" xml:space="preserve">
          <source>On JVM the returned generator is NOT thread-safe. Do not invoke it from multiple threads without proper synchronization.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d634a94c081c286c31c7efa035cd25a12a05ea49" translate="yes" xml:space="preserve">
          <source>On JVM this generator is thread-safe, its methods can be invoked from multiple threads.</source>
          <target state="translated">在JVM上,这个生成器是线程安全的,它的方法可以从多个线程中调用。</target>
        </trans-unit>
        <trans-unit id="82b7124cbe78a1bd0ee0229af53226a5b9d9303c" translate="yes" xml:space="preserve">
          <source>On Linux we call a similar command:</source>
          <target state="translated">在Linux上,我们调用一个类似的命令。</target>
        </trans-unit>
        <trans-unit id="debaeb12f7add41593464f7eef76b63e195de057" translate="yes" xml:space="preserve">
          <source>On Windows, Dynamic libraries are included either via a generated static library wrapper or with manual code, which deals with the &lt;a href=&quot;https://docs.microsoft.com/en-gb/windows/win32/api/libloaderapi/nf-libloaderapi-loadlibrarya&quot;&gt;LoadLibrary&lt;/a&gt; or similar Win32API functions. We will follow the first option and generate the static wrapper library for the &lt;code&gt;libnative.dll&lt;/code&gt; on our own.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f32995a2978fac4fc27ca1ef6f69f7fd0261ff6b" translate="yes" xml:space="preserve">
          <source>On Windows, Dynamic libraries are included either via a generated static library wrapper or with manual code, which deals with the &lt;a href=&quot;https://msdn.microsoft.com/en-us/library/windows/desktop/ms684175.aspx&quot;&gt;LoadLibrary&lt;/a&gt; or similar Win32API functions. We will follow the first option and generate the static wrapper library for the &lt;code&gt;libnative.dll&lt;/code&gt; on our own.</source>
          <target state="translated">在Windows上，动态库是通过生成的静态库包装器或通过涉及&lt;a href=&quot;https://msdn.microsoft.com/en-us/library/windows/desktop/ms684175.aspx&quot;&gt;LoadLibrary&lt;/a&gt;或类似Win32API函数的手动代码来包含的。我们将遵循第一个选项，并为我们自己生成 &lt;code&gt;libnative.dll&lt;/code&gt; 的静态包装器库。</target>
        </trans-unit>
        <trans-unit id="215b62ee2a4bb5fa218d3c640f454cdd3fd9a459" translate="yes" xml:space="preserve">
          <source>On a &lt;code&gt;dynamic&lt;/code&gt; variable, you can call &lt;strong&gt;any&lt;/strong&gt; property or function, with any parameters:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d7653dc191105be976f3e4142a119bd4841c071b" translate="yes" xml:space="preserve">
          <source>On compiling, Gradle will produce the output of our application, which is by default placed under the &lt;code&gt;build/classes/main&lt;/code&gt; directory. This can be overridden using &lt;a href=&quot;#configuring-compiler-options&quot;&gt;the compiler options&lt;/a&gt;.</source>
          <target state="translated">编译时，Gradle将产生我们应用程序的输出，默认情况下将其放置在 &lt;code&gt;build/classes/main&lt;/code&gt; 目录下。可以使用&lt;a href=&quot;#configuring-compiler-options&quot;&gt;编译器选项&lt;/a&gt;将其覆盖。</target>
        </trans-unit>
        <trans-unit id="c14acaa8726202e56fd6764b8d4c4f4bf976a344" translate="yes" xml:space="preserve">
          <source>On compiling, Maven will produce the following output</source>
          <target state="translated">编译时,Maven会产生如下输出</target>
        </trans-unit>
        <trans-unit id="605e2cebf9185d39a487f4db48ecd6fb230665c8" translate="yes" xml:space="preserve">
          <source>On empty collections, &lt;code&gt;random()&lt;/code&gt; throws an exception. To receive &lt;code&gt;null&lt;/code&gt; instead, use &lt;a href=&quot;../../api/latest/jvm/stdlib/kotlin.collections/random-or-null&quot;&gt;&lt;code&gt;randomOrNull()&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2882a4f2583407f0619da2020ec98bec3d44466d" translate="yes" xml:space="preserve">
          <source>On macOS 10.13 with Xcode, we compile the C code and link it with the dynamic library with the following command:</source>
          <target state="translated">在macOS 10.13的Xcode中,我们用下面的命令编译C代码并与动态库链接。</target>
        </trans-unit>
        <trans-unit id="29573262d66dff209bb25d8ca0d7651c0e4d12be" translate="yes" xml:space="preserve">
          <source>On the JVM platform, standard library contains extensions for reflection classes that provide a mapping to and from Java reflection objects (see package &lt;code&gt;kotlin.reflect.jvm&lt;/code&gt;). For example, to find a backing field or a Java method that serves as a getter for a Kotlin property, you can say something like this:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b99e2927eb300e8d0d8fcf2adae0bb05f7e1dd48" translate="yes" xml:space="preserve">
          <source>On the JVM platform, the runtime component required for using the reflection features is distributed as a separate artifact &lt;code&gt;kotlin-reflect.jar&lt;/code&gt; in the Kotlin compiler distribution. This is done to reduce the required size of the runtime library for applications that do not use reflection features.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fb4ddd201d36fd87940a13588d6e11985482252b" translate="yes" xml:space="preserve">
          <source>On the JVM side, the main build tools include &lt;a href=&quot;using-gradle&quot;&gt;Gradle&lt;/a&gt;, &lt;a href=&quot;using-maven&quot;&gt;Maven&lt;/a&gt;, &lt;a href=&quot;using-ant&quot;&gt;Ant&lt;/a&gt;, and &lt;a href=&quot;http://beust.com/kobalt/home/index.html&quot;&gt;Kobalt&lt;/a&gt;. There are also some build tools available that target client-side JavaScript.</source>
          <target state="translated">在JVM方面，主要的构建工具包括&lt;a href=&quot;using-gradle&quot;&gt;Gradle&lt;/a&gt;，&lt;a href=&quot;using-maven&quot;&gt;Maven&lt;/a&gt;，&lt;a href=&quot;using-ant&quot;&gt;Ant&lt;/a&gt;和&lt;a href=&quot;http://beust.com/kobalt/home/index.html&quot;&gt;Kobalt&lt;/a&gt;。还有一些针对客户端JavaScript的构建工具。</target>
        </trans-unit>
        <trans-unit id="8a846654c5fb7b58771a6c8aa68e2bb8f0431b17" translate="yes" xml:space="preserve">
          <source>On the JVM, if the generated class needs to have a parameterless constructor, default values for all properties have to be specified (see &lt;a href=&quot;classes#constructors&quot;&gt;Constructors&lt;/a&gt;).</source>
          <target state="translated">在JVM上，如果生成的类需要具有无参数的构造函数，则必须指定所有属性的默认值（请参见&lt;a href=&quot;classes#constructors&quot;&gt;Constructors&lt;/a&gt;）。</target>
        </trans-unit>
        <trans-unit id="22f3441381be355a57b0344800020b03a2e7fba9" translate="yes" xml:space="preserve">
          <source>On the JVM, non-nullable values of this type are represented as values of the primitive type &lt;code&gt;char&lt;/code&gt;.</source>
          <target state="translated">在JVM上，此类型的非空值表示为基本类型 &lt;code&gt;char&lt;/code&gt; 的值。</target>
        </trans-unit>
        <trans-unit id="c36ad8bfe3e9b420b17609f7d80f8fe5d46e556b" translate="yes" xml:space="preserve">
          <source>On the JVM, one could provide an implementation that writes the log to the standard output:</source>
          <target state="translated">在JVM上,可以提供一个将日志写入标准输出的实现。</target>
        </trans-unit>
        <trans-unit id="37c721a8e1ab899d231ec42baf253266e008d200" translate="yes" xml:space="preserve">
          <source>On the JVM, the &lt;a href=&quot;basic-types#arrays&quot;&gt;array types&lt;/a&gt; (&lt;code&gt;Array&amp;lt;Foo&amp;gt;&lt;/code&gt;) retain the information about the erased type of their elements, and the type casts to an array type are partially checked: the nullability and actual type arguments of the elements type are still erased. For example, the cast &lt;code&gt;foo as Array&amp;lt;List&amp;lt;String&amp;gt;?&amp;gt;&lt;/code&gt; will succeed if &lt;code&gt;foo&lt;/code&gt; is an array holding any &lt;code&gt;List&amp;lt;*&amp;gt;&lt;/code&gt;, nullable or not.</source>
          <target state="translated">在JVM上，&lt;a href=&quot;basic-types#arrays&quot;&gt;数组类型&lt;/a&gt;（ &lt;code&gt;Array&amp;lt;Foo&amp;gt;&lt;/code&gt; ）保留有关其元素的擦除类型的信息，并且部分检查了转换为数组类型的类型：仍会擦除元素类型的可空性和实际类型参数。例如，如果 &lt;code&gt;foo&lt;/code&gt; 是一个包含任何 &lt;code&gt;List&amp;lt;*&amp;gt;&lt;/code&gt; 的数组，则该铸造 &lt;code&gt;foo as Array&amp;lt;List&amp;lt;String&amp;gt;?&amp;gt;&lt;/code&gt; 将成功，无论是否为null。</target>
        </trans-unit>
        <trans-unit id="5506431e2bb120557c874e7652f1a65950568290" translate="yes" xml:space="preserve">
          <source>On the Java platform, numbers are physically stored as JVM primitive types, unless we need a nullable number reference (e.g. &lt;code&gt;Int?&lt;/code&gt;) or generics are involved. In the latter cases numbers are boxed.</source>
          <target state="translated">在Java平台上，除非我们需要可为空的数字引用（例如 &lt;code&gt;Int?&lt;/code&gt; ）或涉及泛型，否则数字实际上是作为JVM基本类型存储的。在后一种情况下，数字用方框括起来。</target>
        </trans-unit>
        <trans-unit id="fc1cc156e617b185ed0f40e773e41bff1f85a104" translate="yes" xml:space="preserve">
          <source>On the Java platform, standard library contains extensions for reflection classes that provide a mapping to and from Java reflection objects (see package &lt;code&gt;kotlin.reflect.jvm&lt;/code&gt;). For example, to find a backing field or a Java method that serves as a getter for a Kotlin property, you can say something like this:</source>
          <target state="translated">在Java平台上，标准库包含反射类的扩展，这些反射类提供了与Java反射对象之间的映射（请参见package &lt;code&gt;kotlin.reflect.jvm&lt;/code&gt; ）。例如，要查找用作Kotlin属性的获取程序的后备字段或Java方法，您可以这样说：</target>
        </trans-unit>
        <trans-unit id="2a19f51c47052a4b52d4d3a45688012ff83885d4" translate="yes" xml:space="preserve">
          <source>On the Java platform, the runtime component required for using the reflection features is distributed as a separate JAR file (&lt;code&gt;kotlin-reflect.jar&lt;/code&gt;). This is done to reduce the required size of the runtime library for applications that do not use reflection features. If you do use reflection, please make sure that the .jar file is added to the classpath of your project.</source>
          <target state="translated">在Java平台上，使用反射功能所需的运行时组件作为单独的JAR文件（ &lt;code&gt;kotlin-reflect.jar&lt;/code&gt; ）分发。这样做是为了减少不使用反射功能的应用程序所需的运行时库大小。如果确实使用反射，请确保将.jar文件添加到项目的类路径中。</target>
        </trans-unit>
        <trans-unit id="5d535cc279349339edec2b28152e5485a7cce0a0" translate="yes" xml:space="preserve">
          <source>On the JavaScript platform this code will be compiled &quot;as is&quot;: &lt;code&gt;dyn.whatever(1)&lt;/code&gt; in Kotlin becomes &lt;code&gt;dyn.whatever(1)&lt;/code&gt; in the generated JavaScript code.</source>
          <target state="translated">上JavaScript的平台这个代码将被编译&amp;ldquo;原样&amp;rdquo;： &lt;code&gt;dyn.whatever(1)&lt;/code&gt; 中变为科特林 &lt;code&gt;dyn.whatever(1)&lt;/code&gt; 在生成的JavaScript代码。</target>
        </trans-unit>
        <trans-unit id="5b66a81be58a9639896f5746359a7ffeeb1b2933" translate="yes" xml:space="preserve">
          <source>On the JavaScript platform, only class references are currently supported. &lt;a href=&quot;js-reflection&quot;&gt;Learn more about reflection in Kotlin/JS&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7710454ff099464789e309cce04c505a88cd2a29" translate="yes" xml:space="preserve">
          <source>On the generic Native platform we don't have the luxury to use someone else's implementation, so we will have to write one ourselves. I won't explain the implementation details here, but it's pretty straightforward and follows Base64 format description without any optimizations:</source>
          <target state="translated">在通用的Native平台上,我们不方便使用别人的实现,所以我们只能自己写一个。在这里我就不解释实现细节了,但它很直接,遵循Base64格式描述,不做任何优化。</target>
        </trans-unit>
        <trans-unit id="dc341284a94c1ff306b2072d23ec90c8ced7deca" translate="yes" xml:space="preserve">
          <source>On the one hand, to achieve this, the compiler has to provide certain ABI stability guarantees under the constraints of separate compilation. This is why every change in the language is examined from the point of view of binary compatibility.</source>
          <target state="translated">一方面,为了实现这一目标,编译器必须在单独编译的约束下提供一定的ABI稳定性保证。这也是为什么语言的每一次变化都要从二进制兼容性的角度来考察。</target>
        </trans-unit>
        <trans-unit id="000c75f582537e6c16176741f98b45d2d110bbb3" translate="yes" xml:space="preserve">
          <source>On the other hand, Kotlin/Native supports interoperability to use existing libraries directly from Kotlin/Native:</source>
          <target state="translated">另一方面,Kotlin/Native支持互操作性,可以直接使用Kotlin/Native的现有库。</target>
        </trans-unit>
        <trans-unit id="60f0f1b25c5dff1f04424f892492e20e71e1b66d" translate="yes" xml:space="preserve">
          <source>On the other hand, a lot depends on the library authors being careful about which changes are safe to make. Thus it's very important that library authors understand how source changes affect compatibility and follow certain best practices to keep both APIs and ABIs of their libraries stable. Here are some assumptions that we make when considering language changes from the library evolution standpoint:</source>
          <target state="translated">另一方面,这在很大程度上取决于库作者对哪些更改是安全的。因此,库作者了解源码变化如何影响兼容性,并遵循一定的最佳实践以保持其库的API和ABI的稳定是非常重要的。下面是我们从库进化的角度考虑语言变化时的一些假设。</target>
        </trans-unit>
        <trans-unit id="24a6b58cfe3e05a456f0e657a9154e03adab1e36" translate="yes" xml:space="preserve">
          <source>On the other hand, if we don't need wildcards where they are generated, we can use &lt;code&gt;@JvmSuppressWildcards&lt;/code&gt;:</source>
          <target state="translated">另一方面，如果不需要在生成通配符的位置使用通配符，则可以使用 &lt;code&gt;@JvmSuppressWildcards&lt;/code&gt; ：</target>
        </trans-unit>
        <trans-unit id="9fe83b5bff0a5d4a34dc3a1fd60b88652cfd8998" translate="yes" xml:space="preserve">
          <source>On the other hand, infix function call's precedence is higher than that of the boolean operators &lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt; and &lt;code&gt;||&lt;/code&gt;, &lt;code&gt;is&lt;/code&gt;- and &lt;code&gt;in&lt;/code&gt;-checks, and some other operators. These expressions are equivalent as well:</source>
          <target state="translated">另一方面，infix函数调用的优先级高于布尔运算符 &lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt; 和 &lt;code&gt;||&lt;/code&gt; 的优先级。， &lt;code&gt;is&lt;/code&gt; -和 &lt;code&gt;in&lt;/code&gt; -checks，以及其他一些运营商。这些表达式也等效：</target>
        </trans-unit>
        <trans-unit id="4b4a432df45f297429fbc3cee76b5f8d7f65a8e2" translate="yes" xml:space="preserve">
          <source>On the other hand, it preserves equality:</source>
          <target state="translated">另一方面,它维护了平等。</target>
        </trans-unit>
        <trans-unit id="7e3c3918cd7bead7b21ab07c18b704638f85c9a4" translate="yes" xml:space="preserve">
          <source>On the other hand, the platform libs in the distribution are merely just wrappers and bindings to the native libraries. That means the native libraries themselves (&lt;code&gt;.so&lt;/code&gt;, &lt;code&gt;.a&lt;/code&gt;, &lt;code&gt;.dylib&lt;/code&gt;, &lt;code&gt;.dll&lt;/code&gt; etc) should be installed on the machine.</source>
          <target state="translated">另一方面，发行版中的平台库仅仅是包装程序和对本机库的绑定。这意味着本机库本身（ &lt;code&gt;.so&lt;/code&gt; ， &lt;code&gt;.a&lt;/code&gt; ， &lt;code&gt;.dylib&lt;/code&gt; ， &lt;code&gt;.dll&lt;/code&gt; 等）应安装在计算机上。</target>
        </trans-unit>
        <trans-unit id="a4bdeb370dbf1cefb8a423a42914a31fcb4ec6d9" translate="yes" xml:space="preserve">
          <source>On the other side, by default, a dispatcher for the outer &lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/-coroutine-scope/index.html&quot;&gt;CoroutineScope&lt;/a&gt; is inherited. The default dispatcher for &lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/run-blocking.html&quot;&gt;runBlocking&lt;/a&gt; coroutine, in particular, is confined to the invoker thread, so inheriting it has the effect of confining execution to this thread with a predictable FIFO scheduling.</source>
          <target state="translated">另一方面，默认情况下，将继承外部&lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/-coroutine-scope/index.html&quot;&gt;CoroutineScope&lt;/a&gt;的调度程序。特别是，针对&lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/run-blocking.html&quot;&gt;runBlocking&lt;/a&gt;协程的默认调度程序仅限于调用程序线程，因此继承它具有通过可预测的FIFO调度将执行限制在此线程中的作用。</target>
        </trans-unit>
        <trans-unit id="425d42a58936f61d420710d94f729d1304fe83b3" translate="yes" xml:space="preserve">
          <source>On the other side, the dispatcher is inherited from the outer &lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/-coroutine-scope/index.html&quot;&gt;CoroutineScope&lt;/a&gt; by default. The default dispatcher for the &lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/run-blocking.html&quot;&gt;runBlocking&lt;/a&gt; coroutine, in particular, is confined to the invoker thread, so inheriting it has the effect of confining execution to this thread with predictable FIFO scheduling.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="40268462bf212f39b8385da7e84960f17dde7ce2" translate="yes" xml:space="preserve">
          <source>On this page, you'll learn how the modifiers apply to different types of declaring scopes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0097b825a22364e0ed5d52b543c2c2d7417ac42f" translate="yes" xml:space="preserve">
          <source>OnErrorAction</source>
          <target state="translated">OnErrorAction</target>
        </trans-unit>
        <trans-unit id="af3390fd9bdb1b1f1af829e06104c3364aeb4907" translate="yes" xml:space="preserve">
          <source>Once a worker is started with the &lt;code&gt;Worker.start&lt;/code&gt; function call, it can be addressed with its own unique integer worker id. Other workers, or non-worker concurrency primitives, such as OS threads, can send a message to the worker with the &lt;code&gt;execute&lt;/code&gt; call.</source>
          <target state="translated">一旦使用 &lt;code&gt;Worker.start&lt;/code&gt; 函数调用启动了工作程序，就可以使用其自己的唯一整数工作程序ID对其进行寻址。其他工作程序或非工作程序并发原语（例如OS线程）可以通过 &lt;code&gt;execute&lt;/code&gt; 调用向工作程序发送消息。</target>
        </trans-unit>
        <trans-unit id="df99b41ffc8e8869530eb6fc788d462a8f350ad0" translate="yes" xml:space="preserve">
          <source>Once that's done, we simply right-click on our &lt;code&gt;index.html&lt;/code&gt; file and select the Debug option. This launches Chrome and then stops at the breakpoint defined in our code inside IntelliJ IDEA, from where we can evaluate expressions, step through code, etc.</source>
          <target state="translated">完成后，我们只需右键单击 &lt;code&gt;index.html&lt;/code&gt; 文件并选择Debug选项。这将启动Chrome，然后在IntelliJ IDEA中的代码中定义的断点处停止，我们可以在其中评估表达式，逐步执行代码等。</target>
        </trans-unit>
        <trans-unit id="3775c8ff21ba04eef02e13e8e82e7fea59a82c9d" translate="yes" xml:space="preserve">
          <source>Once the IDE has finished creating the new project, we should be left with the following layout</source>
          <target state="translated">一旦IDE完成了新项目的创建,我们应该会留下以下布局。</target>
        </trans-unit>
        <trans-unit id="d9769c12f9ad9598db953dee152f3b5b5ad3daf0" translate="yes" xml:space="preserve">
          <source>Once the code is ready, select a fragment you want a learner to fill in, invoke &lt;strong&gt;Add Answer Placeholder&lt;/strong&gt; command from the right-click menu and add the placeholder text and some hints to help the learner find the right solution:</source>
          <target state="translated">代码准备就绪后，选择要学习者填写的片段，从右键单击菜单中调用&amp;ldquo; &lt;strong&gt;添加答案占位符&amp;rdquo;&lt;/strong&gt;命令，并添加占位符文本和一些提示以帮助学习者找到正确的解决方案：</target>
        </trans-unit>
        <trans-unit id="46c1b63ed4fbeaebfc1fd631405807b64e959941" translate="yes" xml:space="preserve">
          <source>Once the dependency is included, we can access the different interfaces provided to generate DOM. The code below will add a new &lt;code&gt;span&lt;/code&gt; tag with the text &lt;code&gt;Hello&lt;/code&gt; inside a &lt;code&gt;div&lt;/code&gt; on the &lt;code&gt;window.load&lt;/code&gt; event.</source>
          <target state="translated">包含依赖性后，我们可以访问提供的不同接口来生成DOM。下面的代码将在 &lt;code&gt;window.load&lt;/code&gt; 事件的 &lt;code&gt;div&lt;/code&gt; 中添加一个带有文本 &lt;code&gt;Hello&lt;/code&gt; 的新 &lt;code&gt;span&lt;/code&gt; 标签。</target>
        </trans-unit>
        <trans-unit id="5f0142e56236eba7d0f9779ea0961db259aa8e0d" translate="yes" xml:space="preserve">
          <source>Once the file is created, add the &lt;code&gt;main&lt;/code&gt; function which is the entry point to a Kotlin application. IntelliJ IDEA offers a template to do this quickly. Just type &lt;em&gt;main&lt;/em&gt; and press tab.</source>
          <target state="translated">创建文件后，将 &lt;code&gt;main&lt;/code&gt; 函数添加到Kotlin应用程序的入口。IntelliJ IDEA提供了一个模板来快速完成此任务。只需键入&lt;em&gt;main&lt;/em&gt;并按tab。</target>
        </trans-unit>
        <trans-unit id="c73312381dcc07c6b7a625ba7ed9e57ac7440a0f" translate="yes" xml:space="preserve">
          <source>Once the plugin is installed and Eclipse is restarted, make sure the plugin is installed correctly: open the &lt;strong&gt;Kotlin perspective&lt;/strong&gt; in the menu &lt;strong&gt;Window | Open Perspective | Other&amp;hellip;&lt;/strong&gt;</source>
          <target state="translated">一旦安装了插件并重新启动Eclipse，请确保正确安装了插件：在菜单&lt;strong&gt;窗口|窗口中&lt;/strong&gt;打开&lt;strong&gt;Kotlin透视图&lt;/strong&gt;。&lt;strong&gt;开放视角 其他&amp;hellip;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="ea14fe002f3a94c4720dab1f2d5b5523e7e10653" translate="yes" xml:space="preserve">
          <source>Once we do that, we can start the app by running the following command</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0796366ca4be24e6c9cb8aea2efb2652251fe7de" translate="yes" xml:space="preserve">
          <source>Once we do that, we can then invoke the corresponding extensions, which are properties named after the views in the XML file. For example, for this view:</source>
          <target state="translated">做到这一点后,我们就可以调用相应的扩展,这些扩展是以XML文件中的视图命名的属性。例如,对于这个视图。</target>
        </trans-unit>
        <trans-unit id="1c271397461aeb676abb2a2efff251e0af0e8c64" translate="yes" xml:space="preserve">
          <source>Once we have the build script defined with the correct dependencies, we can now create a controller</source>
          <target state="translated">一旦我们用正确的依赖关系定义了构建脚本,我们现在就可以创建一个控制器。</target>
        </trans-unit>
        <trans-unit id="a08b600d20b04c79c7a79b722bf898a01cce7fce" translate="yes" xml:space="preserve">
          <source>Once we have the definition file ready, we can create project files and open the project in an IDE.</source>
          <target state="translated">当我们准备好定义文件后,我们就可以创建项目文件,并在IDE中打开项目。</target>
        </trans-unit>
        <trans-unit id="d8045dca300b9f4677fd2c5dc7702ace1a03cfe2" translate="yes" xml:space="preserve">
          <source>Once we have the file generated, we can simply include it in our project and use it:</source>
          <target state="translated">一旦我们生成了文件,我们可以简单地将其包含在我们的项目中并使用它。</target>
        </trans-unit>
        <trans-unit id="bd56b1bd7445724ec0021ec14943c2a384d08186" translate="yes" xml:space="preserve">
          <source>Once we run the application (using this previous run configuration), and on successful deployment, we should be able to navigate to the browser with the correct url and see the response:</source>
          <target state="translated">一旦我们运行应用程序(使用之前的这个运行配置),在成功部署后,我们应该能够用正确的url导航到浏览器并看到响应。</target>
        </trans-unit>
        <trans-unit id="1b6604db47f0dce985d7de59d4f23c0c4c5c9cca" translate="yes" xml:space="preserve">
          <source>Once you complete the steps, Android Studio creates a project. The project already contains all the code and resources for building an application that can run on your Android device or an emulator.</source>
          <target state="translated">一旦你完成这些步骤,Android Studio就会创建一个项目。该项目已经包含了所有的代码和资源,用于构建一个可以在Android设备或模拟器上运行的应用程序。</target>
        </trans-unit>
        <trans-unit id="07c62572d32f4ddef7a4fab02344f0c5993a4073" translate="yes" xml:space="preserve">
          <source>Once you have IntelliJ IDEA installed, it's time to create your first Kotlin application.</source>
          <target state="translated">一旦安装了IntelliJ IDEA,就可以创建第一个Kotlin应用程序了。</target>
        </trans-unit>
        <trans-unit id="57c7fbdcf305fcf640a6242dec4553b583c17b02" translate="yes" xml:space="preserve">
          <source>Once you have a source file, add the &lt;code&gt;main&lt;/code&gt; function - the entry point to a Kotlin application. You can simply type &lt;code&gt;main&lt;/code&gt; and invoke code completion by hitting &lt;code&gt;Ctrl + Space&lt;/code&gt;.</source>
          <target state="translated">获得源文件后，添加 &lt;code&gt;main&lt;/code&gt; 功能-Kotlin应用程序的入口点。您可以简单地键入 &lt;code&gt;main&lt;/code&gt; 并通过 &lt;code&gt;Ctrl + Space&lt;/code&gt; 调用代码完成。</target>
        </trans-unit>
        <trans-unit id="5e85f75a1aece4509c955931a0b0a7c85d0dc463" translate="yes" xml:space="preserve">
          <source>Once you have finished writing your code in a scratch or a worksheet, click &lt;strong&gt;Run&lt;/strong&gt;. The execution results will appear in the lines opposite your code.</source>
          <target state="new"/>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
