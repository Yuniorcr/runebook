<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="zh-CN" datatype="htmlbody" original="ember">
    <body>
      <group id="ember">
        <trans-unit id="222ee7852900322bdc3b9e28c3052875024db7e1" translate="yes" xml:space="preserve">
          <source>Defined in &lt;a href=&quot;https://github.com/emberjs/ember.js/tree/v3.25.1/packages/@ember/-internals/runtime/lib/system/core_object.js#L538&quot;&gt; packages/@ember/-internals/runtime/lib/system/core_object.js:538 &lt;/a&gt;</source>
          <target state="translated">在&lt;a href=&quot;https://github.com/emberjs/ember.js/tree/v3.25.1/packages/@ember/-internals/runtime/lib/system/core_object.js#L538&quot;&gt;package/@ember/-internals/runtime/lib/system/core_object.js：538中&lt;/a&gt;定义</target>
        </trans-unit>
        <trans-unit id="50e25b13114ddf60f29666bb11ec65af5fc0a5dd" translate="yes" xml:space="preserve">
          <source>Defined in &lt;a href=&quot;https://github.com/emberjs/ember.js/tree/v3.25.1/packages/@ember/-internals/runtime/lib/system/core_object.js#L546&quot;&gt; packages/@ember/-internals/runtime/lib/system/core_object.js:546 &lt;/a&gt;</source>
          <target state="translated">定义于&lt;a href=&quot;https://github.com/emberjs/ember.js/tree/v3.25.1/packages/@ember/-internals/runtime/lib/system/core_object.js#L546&quot;&gt;package/@ember/-internals/runtime/lib/system/core_object.js：546&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="e7e0644e238514cfa0e1dea412eac13535ec7247" translate="yes" xml:space="preserve">
          <source>Defined in &lt;a href=&quot;https://github.com/emberjs/ember.js/tree/v3.25.1/packages/@ember/-internals/runtime/lib/system/core_object.js#L596&quot;&gt; packages/@ember/-internals/runtime/lib/system/core_object.js:596 &lt;/a&gt;</source>
          <target state="translated">在&lt;a href=&quot;https://github.com/emberjs/ember.js/tree/v3.25.1/packages/@ember/-internals/runtime/lib/system/core_object.js#L596&quot;&gt;package/@ember/-internals/runtime/lib/system/core_object.js：596中&lt;/a&gt;定义</target>
        </trans-unit>
        <trans-unit id="971eca05e1ad30d64badfcdaace61543b34e0097" translate="yes" xml:space="preserve">
          <source>Defined in &lt;a href=&quot;https://github.com/emberjs/ember.js/tree/v3.25.1/packages/@ember/-internals/runtime/lib/system/core_object.js#L756&quot;&gt; packages/@ember/-internals/runtime/lib/system/core_object.js:756 &lt;/a&gt;</source>
          <target state="translated">定义于&lt;a href=&quot;https://github.com/emberjs/ember.js/tree/v3.25.1/packages/@ember/-internals/runtime/lib/system/core_object.js#L756&quot;&gt;包/@ember/-internals/runtime/lib/system/core_object.js:756&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="8f419692b56000ba1fac31b24e9f07a2ddd9b49b" translate="yes" xml:space="preserve">
          <source>Defined in &lt;a href=&quot;https://github.com/emberjs/ember.js/tree/v3.25.1/packages/@ember/-internals/runtime/lib/system/core_object.js#L810&quot;&gt; packages/@ember/-internals/runtime/lib/system/core_object.js:810 &lt;/a&gt;</source>
          <target state="translated">定义于&lt;a href=&quot;https://github.com/emberjs/ember.js/tree/v3.25.1/packages/@ember/-internals/runtime/lib/system/core_object.js#L810&quot;&gt;包/@ember/-internals/runtime/lib/system/core_object.js:810中&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="0acaebcce1646df1b08198adcc56680b8b2c2e6f" translate="yes" xml:space="preserve">
          <source>Defined in &lt;a href=&quot;https://github.com/emberjs/ember.js/tree/v3.25.1/packages/@ember/-internals/runtime/lib/type-of.js#L24&quot;&gt; packages/@ember/-internals/runtime/lib/type-of.js:24 &lt;/a&gt;</source>
          <target state="translated">定义于&lt;a href=&quot;https://github.com/emberjs/ember.js/tree/v3.25.1/packages/@ember/-internals/runtime/lib/type-of.js#L24&quot;&gt;packages/@ember/-internals/runtime/lib/type-of.js：24&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="b8e78739233ca746def816ab7ce75058349e7a4b" translate="yes" xml:space="preserve">
          <source>Defined in &lt;a href=&quot;https://github.com/emberjs/ember.js/tree/v3.25.1/packages/@ember/-internals/utils/lib/guid.ts#L86&quot;&gt; packages/@ember/-internals/utils/lib/guid.ts:86 &lt;/a&gt;</source>
          <target state="translated">定义于&lt;a href=&quot;https://github.com/emberjs/ember.js/tree/v3.25.1/packages/@ember/-internals/utils/lib/guid.ts#L86&quot;&gt;packages/@ember/-internals/utils/lib/guid.ts：86&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="932da0f7af64f30734430d45c1551a9a8e06b4e5" translate="yes" xml:space="preserve">
          <source>Defined in &lt;a href=&quot;https://github.com/emberjs/ember.js/tree/v3.25.1/packages/@ember/-internals/utils/lib/invoke.ts#L29&quot;&gt; packages/@ember/-internals/utils/lib/invoke.ts:29 &lt;/a&gt;</source>
          <target state="translated">定义于&lt;a href=&quot;https://github.com/emberjs/ember.js/tree/v3.25.1/packages/@ember/-internals/utils/lib/invoke.ts#L29&quot;&gt;packages/@ember/-internals/utils/lib/invoke.ts：29&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="32185e4d4a694e9347bf5105a2561ea11c0c5d37" translate="yes" xml:space="preserve">
          <source>Defined in &lt;a href=&quot;https://github.com/emberjs/ember.js/tree/v3.25.1/packages/@ember/application/instance.js#L365&quot;&gt; packages/@ember/application/instance.js:365 &lt;/a&gt;</source>
          <target state="translated">定义于&lt;a href=&quot;https://github.com/emberjs/ember.js/tree/v3.25.1/packages/@ember/application/instance.js#L365&quot;&gt;packages/@ember/application/instance.js：365&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="77a4c81d13697c4bce388f63dcef565d8fbf0026" translate="yes" xml:space="preserve">
          <source>Defined in &lt;a href=&quot;https://github.com/emberjs/ember.js/tree/v3.25.1/packages/@ember/application/instance.js#L401&quot;&gt; packages/@ember/application/instance.js:401 &lt;/a&gt;</source>
          <target state="translated">定义于&lt;a href=&quot;https://github.com/emberjs/ember.js/tree/v3.25.1/packages/@ember/application/instance.js#L401&quot;&gt;packages/@ember/application/instance.js：401&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="2a2f9e0f8d66a29a1e4fc0ed8bc4b024c66f9757" translate="yes" xml:space="preserve">
          <source>Defined in &lt;a href=&quot;https://github.com/emberjs/ember.js/tree/v3.25.1/packages/@ember/application/instance.js#L424&quot;&gt; packages/@ember/application/instance.js:424 &lt;/a&gt;</source>
          <target state="translated">定义于&lt;a href=&quot;https://github.com/emberjs/ember.js/tree/v3.25.1/packages/@ember/application/instance.js#L424&quot;&gt;packages/@ember/application/instance.js：424&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="ea87fd740914a0e01daa8570e6c46b107dab8869" translate="yes" xml:space="preserve">
          <source>Defined in &lt;a href=&quot;https://github.com/emberjs/ember.js/tree/v3.25.1/packages/@ember/application/instance.js#L451&quot;&gt; packages/@ember/application/instance.js:451 &lt;/a&gt;</source>
          <target state="translated">定义于&lt;a href=&quot;https://github.com/emberjs/ember.js/tree/v3.25.1/packages/@ember/application/instance.js#L451&quot;&gt;packages/@ember/application/instance.js：451&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="5caa1dc7cd957e464585a4a491eb5c006609b136" translate="yes" xml:space="preserve">
          <source>Defined in &lt;a href=&quot;https://github.com/emberjs/ember.js/tree/v3.25.1/packages/@ember/application/instance.js#L476&quot;&gt; packages/@ember/application/instance.js:476 &lt;/a&gt;</source>
          <target state="translated">定义于&lt;a href=&quot;https://github.com/emberjs/ember.js/tree/v3.25.1/packages/@ember/application/instance.js#L476&quot;&gt;packages/@ember/application/instance.js：476&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="4ddd58dcd269626f01f3876f9a315e70b7a9c141" translate="yes" xml:space="preserve">
          <source>Defined in &lt;a href=&quot;https://github.com/emberjs/ember.js/tree/v3.25.1/packages/@ember/application/lib/application.js#L192&quot;&gt; packages/@ember/application/lib/application.js:192 &lt;/a&gt;</source>
          <target state="translated">定义于&lt;a href=&quot;https://github.com/emberjs/ember.js/tree/v3.25.1/packages/@ember/application/lib/application.js#L192&quot;&gt;packages/@ember/application/lib/application.js：192&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="1ab1fe2d28a54ddce5b1b6a0b48cc6cea6f37246" translate="yes" xml:space="preserve">
          <source>Defined in &lt;a href=&quot;https://github.com/emberjs/ember.js/tree/v3.25.1/packages/@ember/application/lib/application.js#L217&quot;&gt; packages/@ember/application/lib/application.js:217 &lt;/a&gt;</source>
          <target state="translated">定义于&lt;a href=&quot;https://github.com/emberjs/ember.js/tree/v3.25.1/packages/@ember/application/lib/application.js#L217&quot;&gt;packages/@ember/application/lib/application.js：217&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="11488f12fbc53a0ba39a17c2cf6cd603b5cd5ddf" translate="yes" xml:space="preserve">
          <source>Defined in &lt;a href=&quot;https://github.com/emberjs/ember.js/tree/v3.25.1/packages/@ember/application/lib/application.js#L234&quot;&gt; packages/@ember/application/lib/application.js:234 &lt;/a&gt;</source>
          <target state="translated">定义于&lt;a href=&quot;https://github.com/emberjs/ember.js/tree/v3.25.1/packages/@ember/application/lib/application.js#L234&quot;&gt;packages/@ember/application/lib/application.js：234&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="eac276e0cdc034e54a7972ea8bda217681934838" translate="yes" xml:space="preserve">
          <source>Defined in &lt;a href=&quot;https://github.com/emberjs/ember.js/tree/v3.25.1/packages/@ember/application/lib/application.js#L391&quot;&gt; packages/@ember/application/lib/application.js:391 &lt;/a&gt;</source>
          <target state="translated">定义于&lt;a href=&quot;https://github.com/emberjs/ember.js/tree/v3.25.1/packages/@ember/application/lib/application.js#L391&quot;&gt;packages/@ember/application/lib/application.js：391&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="52923eb6a758ced2b960977fb06a2c962fdef578" translate="yes" xml:space="preserve">
          <source>Defined in &lt;a href=&quot;https://github.com/emberjs/ember.js/tree/v3.25.1/packages/@ember/application/lib/application.js#L552&quot;&gt; packages/@ember/application/lib/application.js:552 &lt;/a&gt;</source>
          <target state="translated">定义于&lt;a href=&quot;https://github.com/emberjs/ember.js/tree/v3.25.1/packages/@ember/application/lib/application.js#L552&quot;&gt;packages/@ember/application/lib/application.js：552&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="88e59faa46792530719e13f48dd72cd00b565767" translate="yes" xml:space="preserve">
          <source>Defined in &lt;a href=&quot;https://github.com/emberjs/ember.js/tree/v3.25.1/packages/@ember/application/lib/application.js#L603&quot;&gt; packages/@ember/application/lib/application.js:603 &lt;/a&gt;</source>
          <target state="translated">定义于&lt;a href=&quot;https://github.com/emberjs/ember.js/tree/v3.25.1/packages/@ember/application/lib/application.js#L603&quot;&gt;packages/@ember/application/lib/application.js：603&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="e0e052814738dfff88923b5a2d7ea36ecb41d404" translate="yes" xml:space="preserve">
          <source>Defined in &lt;a href=&quot;https://github.com/emberjs/ember.js/tree/v3.25.1/packages/@ember/application/lib/application.js#L640&quot;&gt; packages/@ember/application/lib/application.js:640 &lt;/a&gt;</source>
          <target state="translated">定义于&lt;a href=&quot;https://github.com/emberjs/ember.js/tree/v3.25.1/packages/@ember/application/lib/application.js#L640&quot;&gt;packages/@ember/application/lib/application.js：640&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="164ede628d84844a195c2f8e3043c02c6198a8fb" translate="yes" xml:space="preserve">
          <source>Defined in &lt;a href=&quot;https://github.com/emberjs/ember.js/tree/v3.25.1/packages/@ember/application/lib/application.js#L717&quot;&gt; packages/@ember/application/lib/application.js:717 &lt;/a&gt;</source>
          <target state="translated">定义于&lt;a href=&quot;https://github.com/emberjs/ember.js/tree/v3.25.1/packages/@ember/application/lib/application.js#L717&quot;&gt;packages/@ember/application/lib/application.js：717&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="b05e0bc67fabba8ad8556baf5dc8d56070ebd97a" translate="yes" xml:space="preserve">
          <source>Defined in &lt;a href=&quot;https://github.com/emberjs/ember.js/tree/v3.25.1/packages/@ember/application/lib/application.js#L875&quot;&gt; packages/@ember/application/lib/application.js:875 &lt;/a&gt;</source>
          <target state="translated">定义于&lt;a href=&quot;https://github.com/emberjs/ember.js/tree/v3.25.1/packages/@ember/application/lib/application.js#L875&quot;&gt;packages/@ember/application/lib/application.js：875&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="b603e7f4691faac1123748841f26bb8230ab47c7" translate="yes" xml:space="preserve">
          <source>Defined in &lt;a href=&quot;https://github.com/emberjs/ember.js/tree/v3.25.1/packages/@ember/application/lib/application.js#L902&quot;&gt; packages/@ember/application/lib/application.js:902 &lt;/a&gt;</source>
          <target state="translated">定义于&lt;a href=&quot;https://github.com/emberjs/ember.js/tree/v3.25.1/packages/@ember/application/lib/application.js#L902&quot;&gt;packages/@ember/application/lib/application.js：902&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="1f61f159766fb5ade36bd1a8490fa34c1518cf6d" translate="yes" xml:space="preserve">
          <source>Defined in &lt;a href=&quot;https://github.com/emberjs/ember.js/tree/v3.25.1/packages/@ember/controller/index.js#L17&quot;&gt; packages/@ember/controller/index.js:17 &lt;/a&gt;</source>
          <target state="translated">定义于&lt;a href=&quot;https://github.com/emberjs/ember.js/tree/v3.25.1/packages/@ember/controller/index.js#L17&quot;&gt;packages/@ember/controller/index.js：17&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="dc15f875b476b5ecab18ab1ca49d09162c3d1300" translate="yes" xml:space="preserve">
          <source>Defined in &lt;a href=&quot;https://github.com/emberjs/ember.js/tree/v3.25.1/packages/@ember/debug/index.ts#L131&quot;&gt; packages/@ember/debug/index.ts:131 &lt;/a&gt;</source>
          <target state="translated">定义于&lt;a href=&quot;https://github.com/emberjs/ember.js/tree/v3.25.1/packages/@ember/debug/index.ts#L131&quot;&gt;packages/@ember/debug/index.ts：131&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="ca4a58d729225fffd98adccef1bc47df81d6013c" translate="yes" xml:space="preserve">
          <source>Defined in &lt;a href=&quot;https://github.com/emberjs/ember.js/tree/v3.25.1/packages/@ember/debug/index.ts#L171&quot;&gt; packages/@ember/debug/index.ts:171 &lt;/a&gt;</source>
          <target state="translated">定义于&lt;a href=&quot;https://github.com/emberjs/ember.js/tree/v3.25.1/packages/@ember/debug/index.ts#L171&quot;&gt;packages/@ember/debug/index.ts：171&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="bbed33fa2d88969a7d9a49b922c9bf114a4ca438" translate="yes" xml:space="preserve">
          <source>Defined in &lt;a href=&quot;https://github.com/emberjs/ember.js/tree/v3.25.1/packages/@ember/debug/index.ts#L262&quot;&gt; packages/@ember/debug/index.ts:262 &lt;/a&gt;</source>
          <target state="translated">定义于&lt;a href=&quot;https://github.com/emberjs/ember.js/tree/v3.25.1/packages/@ember/debug/index.ts#L262&quot;&gt;packages/@ember/debug/index.ts：262&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="d55ebdaab8c464c076354db036f1b022cc164702" translate="yes" xml:space="preserve">
          <source>Defined in &lt;a href=&quot;https://github.com/emberjs/ember.js/tree/v3.25.1/packages/@ember/debug/lib/deprecate.ts#L177&quot;&gt; packages/@ember/debug/lib/deprecate.ts:177 &lt;/a&gt;</source>
          <target state="translated">定义于&lt;a href=&quot;https://github.com/emberjs/ember.js/tree/v3.25.1/packages/@ember/debug/lib/deprecate.ts#L177&quot;&gt;packages/@ember/debug/lib/deprecate.ts：177&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="c58d23f059b3f8caddac2141651de741cb6a05ff" translate="yes" xml:space="preserve">
          <source>Defined in &lt;a href=&quot;https://github.com/emberjs/ember.js/tree/v3.25.1/packages/@ember/debug/lib/deprecate.ts#L30&quot;&gt; packages/@ember/debug/lib/deprecate.ts:30 &lt;/a&gt;</source>
          <target state="translated">定义于&lt;a href=&quot;https://github.com/emberjs/ember.js/tree/v3.25.1/packages/@ember/debug/lib/deprecate.ts#L30&quot;&gt;packages/@ember/debug/lib/deprecate.ts：30&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="3910afd07f55e3b895060dc0687332c7fc19fc03" translate="yes" xml:space="preserve">
          <source>Defined in &lt;a href=&quot;https://github.com/emberjs/ember.js/tree/v3.25.1/packages/@ember/debug/lib/warn.ts#L23&quot;&gt; packages/@ember/debug/lib/warn.ts:23 &lt;/a&gt;</source>
          <target state="translated">定义于&lt;a href=&quot;https://github.com/emberjs/ember.js/tree/v3.25.1/packages/@ember/debug/lib/warn.ts#L23&quot;&gt;packages/@ember/debug/lib/warn.ts：23&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="91b86c56295e0a507e541fcb564d08bfa7d1fa07" translate="yes" xml:space="preserve">
          <source>Defined in &lt;a href=&quot;https://github.com/emberjs/ember.js/tree/v3.25.1/packages/@ember/debug/lib/warn.ts#L70&quot;&gt; packages/@ember/debug/lib/warn.ts:70 &lt;/a&gt;</source>
          <target state="translated">定义于&lt;a href=&quot;https://github.com/emberjs/ember.js/tree/v3.25.1/packages/@ember/debug/lib/warn.ts#L70&quot;&gt;packages/@ember/debug/lib/warn.ts：70&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="b8810595c3d745b336a01023a84d1abdd2477217" translate="yes" xml:space="preserve">
          <source>Defined in &lt;a href=&quot;https://github.com/emberjs/ember.js/tree/v3.25.1/packages/@ember/destroyable/index.ts#L102&quot;&gt; packages/@ember/destroyable/index.ts:102 &lt;/a&gt;</source>
          <target state="translated">定义于&lt;a href=&quot;https://github.com/emberjs/ember.js/tree/v3.25.1/packages/@ember/destroyable/index.ts#L102&quot;&gt;packages/@ember/destroyable/index.ts：102&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="25462e3d2ef024281702b6cedce44deecd2d5549" translate="yes" xml:space="preserve">
          <source>Defined in &lt;a href=&quot;https://github.com/emberjs/ember.js/tree/v3.25.1/packages/@ember/destroyable/index.ts#L137&quot;&gt; packages/@ember/destroyable/index.ts:137 &lt;/a&gt;</source>
          <target state="translated">定义于&lt;a href=&quot;https://github.com/emberjs/ember.js/tree/v3.25.1/packages/@ember/destroyable/index.ts#L137&quot;&gt;packages/@ember/destroyable/index.ts：137&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="e292b33bb81b9374107b4e6a8006fc904d20ee26" translate="yes" xml:space="preserve">
          <source>Defined in &lt;a href=&quot;https://github.com/emberjs/ember.js/tree/v3.25.1/packages/@ember/destroyable/index.ts#L151&quot;&gt; packages/@ember/destroyable/index.ts:151 &lt;/a&gt;</source>
          <target state="translated">定义于&lt;a href=&quot;https://github.com/emberjs/ember.js/tree/v3.25.1/packages/@ember/destroyable/index.ts#L151&quot;&gt;packages/@ember/destroyable/index.ts：151&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="37be063d0e1813e62d9d0c54cdb6c9196fbbf662" translate="yes" xml:space="preserve">
          <source>Defined in &lt;a href=&quot;https://github.com/emberjs/ember.js/tree/v3.25.1/packages/@ember/destroyable/index.ts#L163&quot;&gt; packages/@ember/destroyable/index.ts:163 &lt;/a&gt;</source>
          <target state="translated">定义于&lt;a href=&quot;https://github.com/emberjs/ember.js/tree/v3.25.1/packages/@ember/destroyable/index.ts#L163&quot;&gt;packages/@ember/destroyable/index.ts：163&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="bc880a4eafe9d814f9977ca02e879292aa7c275d" translate="yes" xml:space="preserve">
          <source>Defined in &lt;a href=&quot;https://github.com/emberjs/ember.js/tree/v3.25.1/packages/@ember/destroyable/index.ts#L222&quot;&gt; packages/@ember/destroyable/index.ts:222 &lt;/a&gt;</source>
          <target state="translated">定义于&lt;a href=&quot;https://github.com/emberjs/ember.js/tree/v3.25.1/packages/@ember/destroyable/index.ts#L222&quot;&gt;packages/@ember/destroyable/index.ts：222&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="45b6ed032491369531ef10e4a42c599686395ed7" translate="yes" xml:space="preserve">
          <source>Defined in &lt;a href=&quot;https://github.com/emberjs/ember.js/tree/v3.25.1/packages/@ember/destroyable/index.ts#L31&quot;&gt; packages/@ember/destroyable/index.ts:31 &lt;/a&gt;</source>
          <target state="translated">定义于&lt;a href=&quot;https://github.com/emberjs/ember.js/tree/v3.25.1/packages/@ember/destroyable/index.ts#L31&quot;&gt;packages/@ember/destroyable/index.ts：31&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="62ac07182d83e0dd91707776b595655b4c8bd180" translate="yes" xml:space="preserve">
          <source>Defined in &lt;a href=&quot;https://github.com/emberjs/ember.js/tree/v3.25.1/packages/@ember/destroyable/index.ts#L57&quot;&gt; packages/@ember/destroyable/index.ts:57 &lt;/a&gt;</source>
          <target state="translated">定义于&lt;a href=&quot;https://github.com/emberjs/ember.js/tree/v3.25.1/packages/@ember/destroyable/index.ts#L57&quot;&gt;packages/@ember/destroyable/index.ts：57&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="ba0bd50b0b18a5e7512619468a0d8c4a6d9da358" translate="yes" xml:space="preserve">
          <source>Defined in &lt;a href=&quot;https://github.com/emberjs/ember.js/tree/v3.25.1/packages/@ember/destroyable/index.ts#L79&quot;&gt; packages/@ember/destroyable/index.ts:79 &lt;/a&gt;</source>
          <target state="translated">定义于&lt;a href=&quot;https://github.com/emberjs/ember.js/tree/v3.25.1/packages/@ember/destroyable/index.ts#L79&quot;&gt;包/@ember/destroyable/index.ts:79&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="9a7663e26440ea94c7527e36e1d3e74eee64fd41" translate="yes" xml:space="preserve">
          <source>Defined in &lt;a href=&quot;https://github.com/emberjs/ember.js/tree/v3.25.1/packages/@ember/engine/index.js#L159&quot;&gt; packages/@ember/engine/index.js:159 &lt;/a&gt;</source>
          <target state="translated">定义于&lt;a href=&quot;https://github.com/emberjs/ember.js/tree/v3.25.1/packages/@ember/engine/index.js#L159&quot;&gt;packages/@ember/engine/index.js：159&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="2c686fcb2e21202532906d062b318cee35d65d82" translate="yes" xml:space="preserve">
          <source>Defined in &lt;a href=&quot;https://github.com/emberjs/ember.js/tree/v3.25.1/packages/@ember/engine/index.js#L306&quot;&gt; packages/@ember/engine/index.js:306 &lt;/a&gt;</source>
          <target state="translated">定义于&lt;a href=&quot;https://github.com/emberjs/ember.js/tree/v3.25.1/packages/@ember/engine/index.js#L306&quot;&gt;packages/@ember/engine/index.js：306&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="416bb670552274cd2bc0234e7b91f29423fcfccd" translate="yes" xml:space="preserve">
          <source>Defined in &lt;a href=&quot;https://github.com/emberjs/ember.js/tree/v3.25.1/packages/@ember/engine/index.js#L429&quot;&gt; packages/@ember/engine/index.js:429 &lt;/a&gt;</source>
          <target state="translated">定义于&lt;a href=&quot;https://github.com/emberjs/ember.js/tree/v3.25.1/packages/@ember/engine/index.js#L429&quot;&gt;packages/@ember/engine/index.js：429&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="70966ab0cad5866300087cac202adc5651e5533c" translate="yes" xml:space="preserve">
          <source>Defined in &lt;a href=&quot;https://github.com/emberjs/ember.js/tree/v3.25.1/packages/@ember/engine/index.js#L75&quot;&gt; packages/@ember/engine/index.js:75 &lt;/a&gt;</source>
          <target state="translated">定义于&lt;a href=&quot;https://github.com/emberjs/ember.js/tree/v3.25.1/packages/@ember/engine/index.js#L75&quot;&gt;packages/@ember/engine/index.js：75&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="60e1e32bc05e16fe69436cae9022f2c3582a6578" translate="yes" xml:space="preserve">
          <source>Defined in &lt;a href=&quot;https://github.com/emberjs/ember.js/tree/v3.25.1/packages/@ember/engine/instance.js#L124&quot;&gt; packages/@ember/engine/instance.js:124 &lt;/a&gt;</source>
          <target state="translated">定义于&lt;a href=&quot;https://github.com/emberjs/ember.js/tree/v3.25.1/packages/@ember/engine/instance.js#L124&quot;&gt;packages/@ember/engine/instance.js：124&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="0f9aede6108e4dd41d99290c5c5e7646c19f4b6c" translate="yes" xml:space="preserve">
          <source>Defined in &lt;a href=&quot;https://github.com/emberjs/ember.js/tree/v3.25.1/packages/@ember/engine/instance.js#L62&quot;&gt; packages/@ember/engine/instance.js:62 &lt;/a&gt;</source>
          <target state="translated">定义于&lt;a href=&quot;https://github.com/emberjs/ember.js/tree/v3.25.1/packages/@ember/engine/instance.js#L62&quot;&gt;packages/@ember/engine/instance.js：62&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="6e438cab064c5b9161912f9090805313e0aecc7e" translate="yes" xml:space="preserve">
          <source>Defined in &lt;a href=&quot;https://github.com/emberjs/ember.js/tree/v3.25.1/packages/@ember/helper/index.ts#L251&quot;&gt; packages/@ember/helper/index.ts:251 &lt;/a&gt;</source>
          <target state="translated">定义于&lt;a href=&quot;https://github.com/emberjs/ember.js/tree/v3.25.1/packages/@ember/helper/index.ts#L251&quot;&gt;packages/@ember/helper/index.ts：251&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="cae4ec68819df5d5377e18610935d8d05f1d3c43" translate="yes" xml:space="preserve">
          <source>Defined in &lt;a href=&quot;https://github.com/emberjs/ember.js/tree/v3.25.1/packages/@ember/helper/index.ts#L5&quot;&gt; packages/@ember/helper/index.ts:5 &lt;/a&gt;</source>
          <target state="translated">定义于&lt;a href=&quot;https://github.com/emberjs/ember.js/tree/v3.25.1/packages/@ember/helper/index.ts#L5&quot;&gt;packages/@ember/helper/index.ts：5&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="e63d9273511ffa789ef00cb37f1268028966b6ee" translate="yes" xml:space="preserve">
          <source>Defined in &lt;a href=&quot;https://github.com/emberjs/ember.js/tree/v3.25.1/packages/@ember/helper/index.ts#L58&quot;&gt; packages/@ember/helper/index.ts:58 &lt;/a&gt;</source>
          <target state="translated">定义于&lt;a href=&quot;https://github.com/emberjs/ember.js/tree/v3.25.1/packages/@ember/helper/index.ts#L58&quot;&gt;packages/@ember/helper/index.ts：58&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="2030aa0f8317caac0811c4fb2a38875684da1f2b" translate="yes" xml:space="preserve">
          <source>Defined in &lt;a href=&quot;https://github.com/emberjs/ember.js/tree/v3.25.1/packages/@ember/object/compat.ts#L39&quot;&gt; packages/@ember/object/compat.ts:39 &lt;/a&gt;</source>
          <target state="translated">定义于&lt;a href=&quot;https://github.com/emberjs/ember.js/tree/v3.25.1/packages/@ember/object/compat.ts#L39&quot;&gt;packages/@ember/object/compat.ts：39&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="08fbe0aa00f4f0b63aa8a5f8504f6d2baad20f02" translate="yes" xml:space="preserve">
          <source>Defined in &lt;a href=&quot;https://github.com/emberjs/ember.js/tree/v3.25.1/packages/@ember/object/index.js#L5&quot;&gt; packages/@ember/object/index.js:5 &lt;/a&gt;</source>
          <target state="translated">定义于&lt;a href=&quot;https://github.com/emberjs/ember.js/tree/v3.25.1/packages/@ember/object/index.js#L5&quot;&gt;packages/@ember/object/index.js：5&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="50e9e86c19362c53727a1cb1a0c65418d2d9636e" translate="yes" xml:space="preserve">
          <source>Defined in &lt;a href=&quot;https://github.com/emberjs/ember.js/tree/v3.25.1/packages/@ember/object/lib/computed/computed_macros.js#L1063&quot;&gt; packages/@ember/object/lib/computed/computed_macros.js:1063 &lt;/a&gt;</source>
          <target state="translated">定义于&lt;a href=&quot;https://github.com/emberjs/ember.js/tree/v3.25.1/packages/@ember/object/lib/computed/computed_macros.js#L1063&quot;&gt;packages/@ember/object/lib/computed/computed_macros.js：1063&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="58eb90067067dabe49bf5b6fd75a6345f43b0296" translate="yes" xml:space="preserve">
          <source>Defined in &lt;a href=&quot;https://github.com/emberjs/ember.js/tree/v3.25.1/packages/@ember/object/lib/computed/computed_macros.js#L1076&quot;&gt; packages/@ember/object/lib/computed/computed_macros.js:1076 &lt;/a&gt;</source>
          <target state="translated">定义于&lt;a href=&quot;https://github.com/emberjs/ember.js/tree/v3.25.1/packages/@ember/object/lib/computed/computed_macros.js#L1076&quot;&gt;packages/@ember/object/lib/computed/computed_macros.js：1076&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="b0baca9ad2f3d4fd24e951cd9b04cd57fd6622cc" translate="yes" xml:space="preserve">
          <source>Defined in &lt;a href=&quot;https://github.com/emberjs/ember.js/tree/v3.25.1/packages/@ember/object/lib/computed/computed_macros.js#L1152&quot;&gt; packages/@ember/object/lib/computed/computed_macros.js:1152 &lt;/a&gt;</source>
          <target state="translated">定义于&lt;a href=&quot;https://github.com/emberjs/ember.js/tree/v3.25.1/packages/@ember/object/lib/computed/computed_macros.js#L1152&quot;&gt;packages/@ember/object/lib/computed/computed_macros.js：1152&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="b29e360791d3424283aa46800a56a1fb46cfdfca" translate="yes" xml:space="preserve">
          <source>Defined in &lt;a href=&quot;https://github.com/emberjs/ember.js/tree/v3.25.1/packages/@ember/object/lib/computed/computed_macros.js#L131&quot;&gt; packages/@ember/object/lib/computed/computed_macros.js:131 &lt;/a&gt;</source>
          <target state="translated">定义于&lt;a href=&quot;https://github.com/emberjs/ember.js/tree/v3.25.1/packages/@ember/object/lib/computed/computed_macros.js#L131&quot;&gt;packages/@ember/object/lib/computed/computed_macros.js：131&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="f3cd30d960073724608bda447e627f37efca9d63" translate="yes" xml:space="preserve">
          <source>Defined in &lt;a href=&quot;https://github.com/emberjs/ember.js/tree/v3.25.1/packages/@ember/object/lib/computed/computed_macros.js#L196&quot;&gt; packages/@ember/object/lib/computed/computed_macros.js:196 &lt;/a&gt;</source>
          <target state="translated">定义于&lt;a href=&quot;https://github.com/emberjs/ember.js/tree/v3.25.1/packages/@ember/object/lib/computed/computed_macros.js#L196&quot;&gt;packages/@ember/object/lib/computed/computed_macros.js：196&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="a5f299a881c4912359ba477ff6e3c000813996b5" translate="yes" xml:space="preserve">
          <source>Defined in &lt;a href=&quot;https://github.com/emberjs/ember.js/tree/v3.25.1/packages/@ember/object/lib/computed/computed_macros.js#L260&quot;&gt; packages/@ember/object/lib/computed/computed_macros.js:260 &lt;/a&gt;</source>
          <target state="translated">定义于&lt;a href=&quot;https://github.com/emberjs/ember.js/tree/v3.25.1/packages/@ember/object/lib/computed/computed_macros.js#L260&quot;&gt;packages/@ember/object/lib/computed/computed_macros.js：260&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="15753b0293cce0b4d1ec7641b7584f0391ecd960" translate="yes" xml:space="preserve">
          <source>Defined in &lt;a href=&quot;https://github.com/emberjs/ember.js/tree/v3.25.1/packages/@ember/object/lib/computed/computed_macros.js#L321&quot;&gt; packages/@ember/object/lib/computed/computed_macros.js:321 &lt;/a&gt;</source>
          <target state="translated">定义于&lt;a href=&quot;https://github.com/emberjs/ember.js/tree/v3.25.1/packages/@ember/object/lib/computed/computed_macros.js#L321&quot;&gt;packages/@ember/object/lib/computed/computed_macros.js：321&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="d2f7378861e4f4e1f27e63a3df891fdd2ee0b524" translate="yes" xml:space="preserve">
          <source>Defined in &lt;a href=&quot;https://github.com/emberjs/ember.js/tree/v3.25.1/packages/@ember/object/lib/computed/computed_macros.js#L394&quot;&gt; packages/@ember/object/lib/computed/computed_macros.js:394 &lt;/a&gt;</source>
          <target state="translated">定义于&lt;a href=&quot;https://github.com/emberjs/ember.js/tree/v3.25.1/packages/@ember/object/lib/computed/computed_macros.js#L394&quot;&gt;packages/@ember/object/lib/computed/computed_macros.js：394&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="43ed7a9234582a4d05021464963e24404e69705b" translate="yes" xml:space="preserve">
          <source>Defined in &lt;a href=&quot;https://github.com/emberjs/ember.js/tree/v3.25.1/packages/@ember/object/lib/computed/computed_macros.js#L462&quot;&gt; packages/@ember/object/lib/computed/computed_macros.js:462 &lt;/a&gt;</source>
          <target state="translated">定义于&lt;a href=&quot;https://github.com/emberjs/ember.js/tree/v3.25.1/packages/@ember/object/lib/computed/computed_macros.js#L462&quot;&gt;packages/@ember/object/lib/computed/computed_macros.js：462&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="280944a6247f6587e5dfc872acc4add45a383624" translate="yes" xml:space="preserve">
          <source>Defined in &lt;a href=&quot;https://github.com/emberjs/ember.js/tree/v3.25.1/packages/@ember/object/lib/computed/computed_macros.js#L528&quot;&gt; packages/@ember/object/lib/computed/computed_macros.js:528 &lt;/a&gt;</source>
          <target state="translated">定义于&lt;a href=&quot;https://github.com/emberjs/ember.js/tree/v3.25.1/packages/@ember/object/lib/computed/computed_macros.js#L528&quot;&gt;packages/@ember/object/lib/computed/computed_macros.js：528&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="a0b9486466b87a6abe447601034edceb500fb89c" translate="yes" xml:space="preserve">
          <source>Defined in &lt;a href=&quot;https://github.com/emberjs/ember.js/tree/v3.25.1/packages/@ember/object/lib/computed/computed_macros.js#L594&quot;&gt; packages/@ember/object/lib/computed/computed_macros.js:594 &lt;/a&gt;</source>
          <target state="translated">定义于&lt;a href=&quot;https://github.com/emberjs/ember.js/tree/v3.25.1/packages/@ember/object/lib/computed/computed_macros.js#L594&quot;&gt;packages/@ember/object/lib/computed/computed_macros.js：594&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="9c1ebef5ceb75f520baef8d20b4e5f9f9753e33c" translate="yes" xml:space="preserve">
          <source>Defined in &lt;a href=&quot;https://github.com/emberjs/ember.js/tree/v3.25.1/packages/@ember/object/lib/computed/computed_macros.js#L63&quot;&gt; packages/@ember/object/lib/computed/computed_macros.js:63 &lt;/a&gt;</source>
          <target state="translated">定义于&lt;a href=&quot;https://github.com/emberjs/ember.js/tree/v3.25.1/packages/@ember/object/lib/computed/computed_macros.js#L63&quot;&gt;packages/@ember/object/lib/computed/computed_macros.js：63&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="3b6ccc218b6c2d933f841f7f3a8b1ab3a1f22270" translate="yes" xml:space="preserve">
          <source>Defined in &lt;a href=&quot;https://github.com/emberjs/ember.js/tree/v3.25.1/packages/@ember/object/lib/computed/computed_macros.js#L660&quot;&gt; packages/@ember/object/lib/computed/computed_macros.js:660 &lt;/a&gt;</source>
          <target state="translated">定义于&lt;a href=&quot;https://github.com/emberjs/ember.js/tree/v3.25.1/packages/@ember/object/lib/computed/computed_macros.js#L660&quot;&gt;packages/@ember/object/lib/computed/computed_macros.js：660&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="188ee1cd81a35172e911f8e94924d626c99972a0" translate="yes" xml:space="preserve">
          <source>Defined in &lt;a href=&quot;https://github.com/emberjs/ember.js/tree/v3.25.1/packages/@ember/object/lib/computed/computed_macros.js#L726&quot;&gt; packages/@ember/object/lib/computed/computed_macros.js:726 &lt;/a&gt;</source>
          <target state="translated">定义于&lt;a href=&quot;https://github.com/emberjs/ember.js/tree/v3.25.1/packages/@ember/object/lib/computed/computed_macros.js#L726&quot;&gt;packages/@ember/object/lib/computed/computed_macros.js：726&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="24d25b9aa1309e74118f1f46f48e670342e3d8b9" translate="yes" xml:space="preserve">
          <source>Defined in &lt;a href=&quot;https://github.com/emberjs/ember.js/tree/v3.25.1/packages/@ember/object/lib/computed/computed_macros.js#L792&quot;&gt; packages/@ember/object/lib/computed/computed_macros.js:792 &lt;/a&gt;</source>
          <target state="translated">定义于&lt;a href=&quot;https://github.com/emberjs/ember.js/tree/v3.25.1/packages/@ember/object/lib/computed/computed_macros.js#L792&quot;&gt;packages/@ember/object/lib/computed/computed_macros.js：792&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="1d50f0d034d3087babcdcae52926182ed6b8721c" translate="yes" xml:space="preserve">
          <source>Defined in &lt;a href=&quot;https://github.com/emberjs/ember.js/tree/v3.25.1/packages/@ember/object/lib/computed/computed_macros.js#L866&quot;&gt; packages/@ember/object/lib/computed/computed_macros.js:866 &lt;/a&gt;</source>
          <target state="translated">定义于&lt;a href=&quot;https://github.com/emberjs/ember.js/tree/v3.25.1/packages/@ember/object/lib/computed/computed_macros.js#L866&quot;&gt;packages/@ember/object/lib/computed/computed_macros.js：866&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="2a55bd1a44c7fee750d470df37b9c9df78b12fbe" translate="yes" xml:space="preserve">
          <source>Defined in &lt;a href=&quot;https://github.com/emberjs/ember.js/tree/v3.25.1/packages/@ember/object/lib/computed/computed_macros.js#L934&quot;&gt; packages/@ember/object/lib/computed/computed_macros.js:934 &lt;/a&gt;</source>
          <target state="translated">定义于&lt;a href=&quot;https://github.com/emberjs/ember.js/tree/v3.25.1/packages/@ember/object/lib/computed/computed_macros.js#L934&quot;&gt;packages/@ember/object/lib/computed/computed_macros.js：934&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="8ae89a432a98f001b3f6c951b51c3e770405055a" translate="yes" xml:space="preserve">
          <source>Defined in &lt;a href=&quot;https://github.com/emberjs/ember.js/tree/v3.25.1/packages/@ember/object/lib/computed/computed_macros.js#L990&quot;&gt; packages/@ember/object/lib/computed/computed_macros.js:990 &lt;/a&gt;</source>
          <target state="translated">定义于&lt;a href=&quot;https://github.com/emberjs/ember.js/tree/v3.25.1/packages/@ember/object/lib/computed/computed_macros.js#L990&quot;&gt;packages/@ember/object/lib/computed/computed_macros.js：990&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="e1c640b8232e999385e309dea99a114f14553695" translate="yes" xml:space="preserve">
          <source>Defined in &lt;a href=&quot;https://github.com/emberjs/ember.js/tree/v3.25.1/packages/@ember/object/lib/computed/reduce_computed_macros.js#L1001&quot;&gt; packages/@ember/object/lib/computed/reduce_computed_macros.js:1001 &lt;/a&gt;</source>
          <target state="translated">定义于&lt;a href=&quot;https://github.com/emberjs/ember.js/tree/v3.25.1/packages/@ember/object/lib/computed/reduce_computed_macros.js#L1001&quot;&gt;包/@ember/object/lib/computed/reduce_computed_macros.js:1001&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="7944ff1f8d2db92eb63a87ce8ffe96a54bc62c03" translate="yes" xml:space="preserve">
          <source>Defined in &lt;a href=&quot;https://github.com/emberjs/ember.js/tree/v3.25.1/packages/@ember/object/lib/computed/reduce_computed_macros.js#L1093&quot;&gt; packages/@ember/object/lib/computed/reduce_computed_macros.js:1093 &lt;/a&gt;</source>
          <target state="translated">定义于&lt;a href=&quot;https://github.com/emberjs/ember.js/tree/v3.25.1/packages/@ember/object/lib/computed/reduce_computed_macros.js#L1093&quot;&gt;包/@ember/object/lib/computed/reduce_computed_macros.js:1093&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="5ce31892e6f24ade978bc139dc79524af1e3e16b" translate="yes" xml:space="preserve">
          <source>Defined in &lt;a href=&quot;https://github.com/emberjs/ember.js/tree/v3.25.1/packages/@ember/object/lib/computed/reduce_computed_macros.js#L110&quot;&gt; packages/@ember/object/lib/computed/reduce_computed_macros.js:110 &lt;/a&gt;</source>
          <target state="translated">定义于&lt;a href=&quot;https://github.com/emberjs/ember.js/tree/v3.25.1/packages/@ember/object/lib/computed/reduce_computed_macros.js#L110&quot;&gt;包/@ember/object/lib/computed/reduce_computed_macros.js:110&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="64bbd90625dadbe7ed15b51434017fe3087744aa" translate="yes" xml:space="preserve">
          <source>Defined in &lt;a href=&quot;https://github.com/emberjs/ember.js/tree/v3.25.1/packages/@ember/object/lib/computed/reduce_computed_macros.js#L1188&quot;&gt; packages/@ember/object/lib/computed/reduce_computed_macros.js:1188 &lt;/a&gt;</source>
          <target state="translated">定义于&lt;a href=&quot;https://github.com/emberjs/ember.js/tree/v3.25.1/packages/@ember/object/lib/computed/reduce_computed_macros.js#L1188&quot;&gt;packages/@ember/object/lib/computed/reduce_computed_macros.js：1188&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="484bffa8c589fbe91d9deaf2557c1d28bbf62822" translate="yes" xml:space="preserve">
          <source>Defined in &lt;a href=&quot;https://github.com/emberjs/ember.js/tree/v3.25.1/packages/@ember/object/lib/computed/reduce_computed_macros.js#L1258&quot;&gt; packages/@ember/object/lib/computed/reduce_computed_macros.js:1258 &lt;/a&gt;</source>
          <target state="translated">定义于&lt;a href=&quot;https://github.com/emberjs/ember.js/tree/v3.25.1/packages/@ember/object/lib/computed/reduce_computed_macros.js#L1258&quot;&gt;包/@ember/object/lib/computed/reduce_computed_macros.js:1258&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="bab0da5d9eff17436ebea992392c35d7f939587e" translate="yes" xml:space="preserve">
          <source>Defined in &lt;a href=&quot;https://github.com/emberjs/ember.js/tree/v3.25.1/packages/@ember/object/lib/computed/reduce_computed_macros.js#L210&quot;&gt; packages/@ember/object/lib/computed/reduce_computed_macros.js:210 &lt;/a&gt;</source>
          <target state="translated">定义于&lt;a href=&quot;https://github.com/emberjs/ember.js/tree/v3.25.1/packages/@ember/object/lib/computed/reduce_computed_macros.js#L210&quot;&gt;packages/@ember/object/lib/computed/reduce_computed_macros.js：210&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="23db8699295d4e36742e4f429ab34322f470e6d7" translate="yes" xml:space="preserve">
          <source>Defined in &lt;a href=&quot;https://github.com/emberjs/ember.js/tree/v3.25.1/packages/@ember/object/lib/computed/reduce_computed_macros.js#L309&quot;&gt; packages/@ember/object/lib/computed/reduce_computed_macros.js:309 &lt;/a&gt;</source>
          <target state="translated">定义于&lt;a href=&quot;https://github.com/emberjs/ember.js/tree/v3.25.1/packages/@ember/object/lib/computed/reduce_computed_macros.js#L309&quot;&gt;packages/@ember/object/lib/computed/reduce_computed_macros.js：309&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="adea0c3837ceed0ed2d2daf5a5815b350dc83ba8" translate="yes" xml:space="preserve">
          <source>Defined in &lt;a href=&quot;https://github.com/emberjs/ember.js/tree/v3.25.1/packages/@ember/object/lib/computed/reduce_computed_macros.js#L429&quot;&gt; packages/@ember/object/lib/computed/reduce_computed_macros.js:429 &lt;/a&gt;</source>
          <target state="translated">定义于&lt;a href=&quot;https://github.com/emberjs/ember.js/tree/v3.25.1/packages/@ember/object/lib/computed/reduce_computed_macros.js#L429&quot;&gt;packages/@ember/object/lib/computed/reduce_computed_macros.js：429&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="4e0d62dfb78c5fc67ec11564e7df6883c3145226" translate="yes" xml:space="preserve">
          <source>Defined in &lt;a href=&quot;https://github.com/emberjs/ember.js/tree/v3.25.1/packages/@ember/object/lib/computed/reduce_computed_macros.js#L531&quot;&gt; packages/@ember/object/lib/computed/reduce_computed_macros.js:531 &lt;/a&gt;</source>
          <target state="translated">定义于&lt;a href=&quot;https://github.com/emberjs/ember.js/tree/v3.25.1/packages/@ember/object/lib/computed/reduce_computed_macros.js#L531&quot;&gt;包/@ember/object/lib/computed/reduce_computed_macros.js:531&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="a7248705a407cc95da44a8e6e444523bd97e2aa4" translate="yes" xml:space="preserve">
          <source>Defined in &lt;a href=&quot;https://github.com/emberjs/ember.js/tree/v3.25.1/packages/@ember/object/lib/computed/reduce_computed_macros.js#L56&quot;&gt; packages/@ember/object/lib/computed/reduce_computed_macros.js:56 &lt;/a&gt;</source>
          <target state="translated">定义于&lt;a href=&quot;https://github.com/emberjs/ember.js/tree/v3.25.1/packages/@ember/object/lib/computed/reduce_computed_macros.js#L56&quot;&gt;packages/@ember/object/lib/computed/reduce_computed_macros.js：56&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="50032d8dc705bef89a66c9d7475f2af0c822f60e" translate="yes" xml:space="preserve">
          <source>Defined in &lt;a href=&quot;https://github.com/emberjs/ember.js/tree/v3.25.1/packages/@ember/object/lib/computed/reduce_computed_macros.js#L685&quot;&gt; packages/@ember/object/lib/computed/reduce_computed_macros.js:685 &lt;/a&gt;</source>
          <target state="translated">定义于&lt;a href=&quot;https://github.com/emberjs/ember.js/tree/v3.25.1/packages/@ember/object/lib/computed/reduce_computed_macros.js#L685&quot;&gt;packages/@ember/object/lib/computed/reduce_computed_macros.js：685&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="3799ade00dd69c0251ffb8153b5b5d86a4d04dd3" translate="yes" xml:space="preserve">
          <source>Defined in &lt;a href=&quot;https://github.com/emberjs/ember.js/tree/v3.25.1/packages/@ember/object/lib/computed/reduce_computed_macros.js#L762&quot;&gt; packages/@ember/object/lib/computed/reduce_computed_macros.js:762 &lt;/a&gt;</source>
          <target state="translated">定义于&lt;a href=&quot;https://github.com/emberjs/ember.js/tree/v3.25.1/packages/@ember/object/lib/computed/reduce_computed_macros.js#L762&quot;&gt;packages/@ember/object/lib/computed/reduce_computed_macros.js：762&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="cae7a9bec06b63965c81dc3e7bdac5191959c29e" translate="yes" xml:space="preserve">
          <source>Defined in &lt;a href=&quot;https://github.com/emberjs/ember.js/tree/v3.25.1/packages/@ember/object/lib/computed/reduce_computed_macros.js#L850&quot;&gt; packages/@ember/object/lib/computed/reduce_computed_macros.js:850 &lt;/a&gt;</source>
          <target state="translated">定义于&lt;a href=&quot;https://github.com/emberjs/ember.js/tree/v3.25.1/packages/@ember/object/lib/computed/reduce_computed_macros.js#L850&quot;&gt;包/@ember/object/lib/computed/reduce_computed_macros.js:850&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="1311650822dd030a808357402af330d16adca1e1" translate="yes" xml:space="preserve">
          <source>Defined in &lt;a href=&quot;https://github.com/emberjs/ember.js/tree/v3.25.1/packages/@ember/object/lib/computed/reduce_computed_macros.js#L926&quot;&gt; packages/@ember/object/lib/computed/reduce_computed_macros.js:926 &lt;/a&gt;</source>
          <target state="translated">定义于&lt;a href=&quot;https://github.com/emberjs/ember.js/tree/v3.25.1/packages/@ember/object/lib/computed/reduce_computed_macros.js#L926&quot;&gt;packages/@ember/object/lib/computed/reduce_computed_macros.js：926&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="4083f69e18b0475aaa0b436926143ad76176a0a6" translate="yes" xml:space="preserve">
          <source>Defined in &lt;a href=&quot;https://github.com/emberjs/ember.js/tree/v3.25.1/packages/@ember/polyfills/lib/assign.ts#L9&quot;&gt; packages/@ember/polyfills/lib/assign.ts:9 &lt;/a&gt;</source>
          <target state="translated">定义于&lt;a href=&quot;https://github.com/emberjs/ember.js/tree/v3.25.1/packages/@ember/polyfills/lib/assign.ts#L9&quot;&gt;packages/@ember/polyfills/lib/assign.ts：9&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="bc294b2bf37270d70e0097e3f8e508b4a2111dac" translate="yes" xml:space="preserve">
          <source>Defined in &lt;a href=&quot;https://github.com/emberjs/ember.js/tree/v3.25.1/packages/@ember/polyfills/lib/merge.ts#L9&quot;&gt; packages/@ember/polyfills/lib/merge.ts:9 &lt;/a&gt;</source>
          <target state="translated">在&lt;a href=&quot;https://github.com/emberjs/ember.js/tree/v3.25.1/packages/@ember/polyfills/lib/merge.ts#L9&quot;&gt;packages/@ember/polyfills/lib/merge.ts：9中&lt;/a&gt;定义</target>
        </trans-unit>
        <trans-unit id="e79e226c0dcfb0d78d81b8cd51cf4721efc5fef3" translate="yes" xml:space="preserve">
          <source>Defined in &lt;a href=&quot;https://github.com/emberjs/ember.js/tree/v3.25.1/packages/@ember/runloop/index.js#L109&quot;&gt; packages/@ember/runloop/index.js:109 &lt;/a&gt;</source>
          <target state="translated">定义于&lt;a href=&quot;https://github.com/emberjs/ember.js/tree/v3.25.1/packages/@ember/runloop/index.js#L109&quot;&gt;packages/@ember/runloop/index.js：109&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="7f89dd56c3c9baccc925b087fd7bab2e632edbc8" translate="yes" xml:space="preserve">
          <source>Defined in &lt;a href=&quot;https://github.com/emberjs/ember.js/tree/v3.25.1/packages/@ember/runloop/index.js#L157&quot;&gt; packages/@ember/runloop/index.js:157 &lt;/a&gt;</source>
          <target state="translated">定义于&lt;a href=&quot;https://github.com/emberjs/ember.js/tree/v3.25.1/packages/@ember/runloop/index.js#L157&quot;&gt;packages/@ember/runloop/index.js：157&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="5f442f66edab43521d10e949beb1c287d8ef4e38" translate="yes" xml:space="preserve">
          <source>Defined in &lt;a href=&quot;https://github.com/emberjs/ember.js/tree/v3.25.1/packages/@ember/runloop/index.js#L244&quot;&gt; packages/@ember/runloop/index.js:244 &lt;/a&gt;</source>
          <target state="translated">定义于&lt;a href=&quot;https://github.com/emberjs/ember.js/tree/v3.25.1/packages/@ember/runloop/index.js#L244&quot;&gt;packages/@ember/runloop/index.js：244&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="db17d72dcca975d089996e1d4dbd0739e6307cf7" translate="yes" xml:space="preserve">
          <source>Defined in &lt;a href=&quot;https://github.com/emberjs/ember.js/tree/v3.25.1/packages/@ember/runloop/index.js#L267&quot;&gt; packages/@ember/runloop/index.js:267 &lt;/a&gt;</source>
          <target state="translated">定义于&lt;a href=&quot;https://github.com/emberjs/ember.js/tree/v3.25.1/packages/@ember/runloop/index.js#L267&quot;&gt;packages/@ember/runloop/index.js：267&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="1268adaa495fba64445a2da95cb614a3128941fe" translate="yes" xml:space="preserve">
          <source>Defined in &lt;a href=&quot;https://github.com/emberjs/ember.js/tree/v3.25.1/packages/@ember/runloop/index.js#L290&quot;&gt; packages/@ember/runloop/index.js:290 &lt;/a&gt;</source>
          <target state="translated">定义于&lt;a href=&quot;https://github.com/emberjs/ember.js/tree/v3.25.1/packages/@ember/runloop/index.js#L290&quot;&gt;packages/@ember/runloop/index.js：290&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="02005acdb1c39b1a3401d644bbc0fcf64d6a9144" translate="yes" xml:space="preserve">
          <source>Defined in &lt;a href=&quot;https://github.com/emberjs/ember.js/tree/v3.25.1/packages/@ember/runloop/index.js#L345&quot;&gt; packages/@ember/runloop/index.js:345 &lt;/a&gt;</source>
          <target state="translated">定义于&lt;a href=&quot;https://github.com/emberjs/ember.js/tree/v3.25.1/packages/@ember/runloop/index.js#L345&quot;&gt;packages/@ember/runloop/index.js：345&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="ba1fa91c2627bab86273835c986514a9b3a9dded" translate="yes" xml:space="preserve">
          <source>Defined in &lt;a href=&quot;https://github.com/emberjs/ember.js/tree/v3.25.1/packages/@ember/runloop/index.js#L379&quot;&gt; packages/@ember/runloop/index.js:379 &lt;/a&gt;</source>
          <target state="translated">定义于&lt;a href=&quot;https://github.com/emberjs/ember.js/tree/v3.25.1/packages/@ember/runloop/index.js#L379&quot;&gt;packages/@ember/runloop/index.js：379&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="10b790ccc09be999ad9dd1febd94a12c4dae27ce" translate="yes" xml:space="preserve">
          <source>Defined in &lt;a href=&quot;https://github.com/emberjs/ember.js/tree/v3.25.1/packages/@ember/runloop/index.js#L399&quot;&gt; packages/@ember/runloop/index.js:399 &lt;/a&gt;</source>
          <target state="translated">定义于&lt;a href=&quot;https://github.com/emberjs/ember.js/tree/v3.25.1/packages/@ember/runloop/index.js#L399&quot;&gt;packages/@ember/runloop/index.js：399&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="99f299dbdf059b85d46613903bcc2a09c3242835" translate="yes" xml:space="preserve">
          <source>Defined in &lt;a href=&quot;https://github.com/emberjs/ember.js/tree/v3.25.1/packages/@ember/runloop/index.js#L475&quot;&gt; packages/@ember/runloop/index.js:475 &lt;/a&gt;</source>
          <target state="translated">定义于&lt;a href=&quot;https://github.com/emberjs/ember.js/tree/v3.25.1/packages/@ember/runloop/index.js#L475&quot;&gt;packages/@ember/runloop/index.js：475&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="2e1df6d743dd34748fb381e1e8174d072792dbdc" translate="yes" xml:space="preserve">
          <source>Defined in &lt;a href=&quot;https://github.com/emberjs/ember.js/tree/v3.25.1/packages/@ember/runloop/index.js#L550&quot;&gt; packages/@ember/runloop/index.js:550 &lt;/a&gt;</source>
          <target state="translated">定义于&lt;a href=&quot;https://github.com/emberjs/ember.js/tree/v3.25.1/packages/@ember/runloop/index.js#L550&quot;&gt;packages/@ember/runloop/index.js：550&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="3996b202ec81b98f91465a7fa1f09e0f3b573e85" translate="yes" xml:space="preserve">
          <source>Defined in &lt;a href=&quot;https://github.com/emberjs/ember.js/tree/v3.25.1/packages/@ember/runloop/index.js#L621&quot;&gt; packages/@ember/runloop/index.js:621 &lt;/a&gt;</source>
          <target state="translated">定义于&lt;a href=&quot;https://github.com/emberjs/ember.js/tree/v3.25.1/packages/@ember/runloop/index.js#L621&quot;&gt;packages/@ember/runloop/index.js：621&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="cfe8c06978e61dfa03d8bb08303e675f5702cfc6" translate="yes" xml:space="preserve">
          <source>Defined in &lt;a href=&quot;https://github.com/emberjs/ember.js/tree/v3.25.1/packages/@ember/runloop/index.js#L699&quot;&gt; packages/@ember/runloop/index.js:699 &lt;/a&gt;</source>
          <target state="translated">定义于&lt;a href=&quot;https://github.com/emberjs/ember.js/tree/v3.25.1/packages/@ember/runloop/index.js#L699&quot;&gt;packages/@ember/runloop/index.js：699&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="f6ddf43fb029c35575c362452aab50132df82455" translate="yes" xml:space="preserve">
          <source>Defined in &lt;a href=&quot;https://github.com/emberjs/ember.js/tree/v3.25.1/packages/@ember/runloop/index.js#L74&quot;&gt; packages/@ember/runloop/index.js:74 &lt;/a&gt;</source>
          <target state="translated">定义于&lt;a href=&quot;https://github.com/emberjs/ember.js/tree/v3.25.1/packages/@ember/runloop/index.js#L74&quot;&gt;packages/@ember/runloop/index.js：74&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="51d35981ab14f239a1d6cbf32aeff19d4d2fc193" translate="yes" xml:space="preserve">
          <source>Defined in &lt;a href=&quot;https://github.com/emberjs/ember.js/tree/v3.25.1/packages/@ember/service/index.js#L9&quot;&gt; packages/@ember/service/index.js:9 &lt;/a&gt;</source>
          <target state="translated">定义于&lt;a href=&quot;https://github.com/emberjs/ember.js/tree/v3.25.1/packages/@ember/service/index.js#L9&quot;&gt;packages/@ember/service/index.js：9&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="c078e738568af36a941a163c85b49cfa406f0d0b" translate="yes" xml:space="preserve">
          <source>Defined in &lt;a href=&quot;https://github.com/emberjs/ember.js/tree/v3.25.1/packages/@ember/string/index.ts#L138&quot;&gt; packages/@ember/string/index.ts:138 &lt;/a&gt;</source>
          <target state="translated">定义于&lt;a href=&quot;https://github.com/emberjs/ember.js/tree/v3.25.1/packages/@ember/string/index.ts#L138&quot;&gt;packages/@ember/string/index.ts：138&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="459565d4029840c5840bafd10f379f81ab19cf04" translate="yes" xml:space="preserve">
          <source>Defined in &lt;a href=&quot;https://github.com/emberjs/ember.js/tree/v3.25.1/packages/@ember/string/index.ts#L164&quot;&gt; packages/@ember/string/index.ts:164 &lt;/a&gt;</source>
          <target state="translated">定义于&lt;a href=&quot;https://github.com/emberjs/ember.js/tree/v3.25.1/packages/@ember/string/index.ts#L164&quot;&gt;packages/@ember/string/index.ts：164&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="bb860ebedfda364ab37f0a6d09f56d94efdb1e24" translate="yes" xml:space="preserve">
          <source>Defined in &lt;a href=&quot;https://github.com/emberjs/ember.js/tree/v3.25.1/packages/@ember/string/index.ts#L185&quot;&gt; packages/@ember/string/index.ts:185 &lt;/a&gt;</source>
          <target state="translated">定义于&lt;a href=&quot;https://github.com/emberjs/ember.js/tree/v3.25.1/packages/@ember/string/index.ts#L185&quot;&gt;packages/@ember/string/index.ts：185&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="24b37474a69ec6bd2ba70a7d69ebcfc048c539c2" translate="yes" xml:space="preserve">
          <source>Defined in &lt;a href=&quot;https://github.com/emberjs/ember.js/tree/v3.25.1/packages/@ember/string/index.ts#L207&quot;&gt; packages/@ember/string/index.ts:207 &lt;/a&gt;</source>
          <target state="translated">定义于&lt;a href=&quot;https://github.com/emberjs/ember.js/tree/v3.25.1/packages/@ember/string/index.ts#L207&quot;&gt;packages/@ember/string/index.ts：207&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="7564240e7b8bd5c9fcb3d9c6f25505488daee697" translate="yes" xml:space="preserve">
          <source>Defined in &lt;a href=&quot;https://github.com/emberjs/ember.js/tree/v3.25.1/packages/@ember/string/index.ts#L230&quot;&gt; packages/@ember/string/index.ts:230 &lt;/a&gt;</source>
          <target state="translated">定义于&lt;a href=&quot;https://github.com/emberjs/ember.js/tree/v3.25.1/packages/@ember/string/index.ts#L230&quot;&gt;packages/@ember/string/index.ts：230&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="a340da53a3331df4e907d9ac5708926c3958a580" translate="yes" xml:space="preserve">
          <source>Defined in &lt;a href=&quot;https://github.com/emberjs/ember.js/tree/v3.25.1/packages/@ember/string/index.ts#L252&quot;&gt; packages/@ember/string/index.ts:252 &lt;/a&gt;</source>
          <target state="translated">定义于&lt;a href=&quot;https://github.com/emberjs/ember.js/tree/v3.25.1/packages/@ember/string/index.ts#L252&quot;&gt;packages/@ember/string/index.ts：252&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="a825c5b77bfb200bbf122e237888f51b93fa688e" translate="yes" xml:space="preserve">
          <source>Defined in &lt;a href=&quot;https://github.com/emberjs/ember.js/tree/v3.25.1/packages/@ember/string/index.ts#L275&quot;&gt; packages/@ember/string/index.ts:275 &lt;/a&gt;</source>
          <target state="translated">定义于&lt;a href=&quot;https://github.com/emberjs/ember.js/tree/v3.25.1/packages/@ember/string/index.ts#L275&quot;&gt;packages/@ember/string/index.ts：275&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="12fbb636be90865f89dbdda94599844b9b6f155b" translate="yes" xml:space="preserve">
          <source>Defined in &lt;a href=&quot;https://github.com/emberjs/ember.js/tree/v3.25.1/packages/ember-testing/lib/adapters/adapter.js#L19&quot;&gt; packages/ember-testing/lib/adapters/adapter.js:19 &lt;/a&gt;</source>
          <target state="translated">定义于&lt;a href=&quot;https://github.com/emberjs/ember.js/tree/v3.25.1/packages/ember-testing/lib/adapters/adapter.js#L19&quot;&gt;包/ember-testing/lib/adapters/adapter.js:19&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="bc161b5ccd8e47ba6d6f1e57f60c441ac51fc4e6" translate="yes" xml:space="preserve">
          <source>Defined in &lt;a href=&quot;https://github.com/emberjs/ember.js/tree/v3.25.1/packages/ember-testing/lib/adapters/adapter.js#L30&quot;&gt; packages/ember-testing/lib/adapters/adapter.js:30 &lt;/a&gt;</source>
          <target state="translated">定义于&lt;a href=&quot;https://github.com/emberjs/ember.js/tree/v3.25.1/packages/ember-testing/lib/adapters/adapter.js#L30&quot;&gt;包/ember-testing/lib/adapters/adapter.js:30&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="9f2eedb9cc66254c67d37c5aa149256343931c28" translate="yes" xml:space="preserve">
          <source>Defined in &lt;a href=&quot;https://github.com/emberjs/ember.js/tree/v3.25.1/packages/ember-testing/lib/adapters/adapter.js#L38&quot;&gt; packages/ember-testing/lib/adapters/adapter.js:38 &lt;/a&gt;</source>
          <target state="translated">定义于&lt;a href=&quot;https://github.com/emberjs/ember.js/tree/v3.25.1/packages/ember-testing/lib/adapters/adapter.js#L38&quot;&gt;包/ember-testing/lib/adapters/adapter.js:38&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="3ea05bdff26bbaa70153cd2b0fbfe3340abb4091" translate="yes" xml:space="preserve">
          <source>Defined in &lt;a href=&quot;https://github.com/emberjs/ember.js/tree/v3.25.1/packages/ember-testing/lib/test.js#L45&quot;&gt; packages/ember-testing/lib/test.js:45 &lt;/a&gt;</source>
          <target state="translated">定义于&lt;a href=&quot;https://github.com/emberjs/ember.js/tree/v3.25.1/packages/ember-testing/lib/test.js#L45&quot;&gt;packages / ember-testing / lib / test.js：45&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="885e5663a31466d08095b89a636cfb91cda85ef8" translate="yes" xml:space="preserve">
          <source>Defined in &lt;a href=&quot;https://github.com/emberjs/ember.js/tree/v3.25.1/packages/ember-testing/lib/test/helpers.js#L105&quot;&gt; packages/ember-testing/lib/test/helpers.js:105 &lt;/a&gt;</source>
          <target state="translated">定义在&lt;a href=&quot;https://github.com/emberjs/ember.js/tree/v3.25.1/packages/ember-testing/lib/test/helpers.js#L105&quot;&gt;packages / ember-testing / lib / test / helpers.js：105中&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="5dc2976232d36400357b221e5bfa4d3e1076137b" translate="yes" xml:space="preserve">
          <source>Defined in &lt;a href=&quot;https://github.com/emberjs/ember.js/tree/v3.25.1/packages/ember-testing/lib/test/helpers.js#L8&quot;&gt; packages/ember-testing/lib/test/helpers.js:8 &lt;/a&gt;</source>
          <target state="translated">定义在&lt;a href=&quot;https://github.com/emberjs/ember.js/tree/v3.25.1/packages/ember-testing/lib/test/helpers.js#L8&quot;&gt;packages / ember-testing / lib / test / helpers.js：8中&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="9ab59c02efc0ec730e01cb98315589d93e29199a" translate="yes" xml:space="preserve">
          <source>Defined in &lt;a href=&quot;https://github.com/emberjs/ember.js/tree/v3.25.1/packages/ember-testing/lib/test/on_inject_helpers.js#L3&quot;&gt; packages/ember-testing/lib/test/on_inject_helpers.js:3 &lt;/a&gt;</source>
          <target state="translated">在&lt;a href=&quot;https://github.com/emberjs/ember.js/tree/v3.25.1/packages/ember-testing/lib/test/on_inject_helpers.js#L3&quot;&gt;packages / ember-testing / lib / test / on_inject_helpers.js中定义：3&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="69e6627b71adb5e452d5caeb9acb3fe3bd4f30a4" translate="yes" xml:space="preserve">
          <source>Defined in &lt;a href=&quot;https://github.com/emberjs/ember.js/tree/v3.25.1/packages/ember-testing/lib/test/promise.js#L21&quot;&gt; packages/ember-testing/lib/test/promise.js:21 &lt;/a&gt;</source>
          <target state="translated">定义于&lt;a href=&quot;https://github.com/emberjs/ember.js/tree/v3.25.1/packages/ember-testing/lib/test/promise.js#L21&quot;&gt;packages / ember-testing / lib / test / promise.js：21&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="8dc7927f40634f8ba3aadfac815d56a097073455" translate="yes" xml:space="preserve">
          <source>Defined in &lt;a href=&quot;https://github.com/emberjs/ember.js/tree/v3.25.1/packages/ember-testing/lib/test/promise.js#L39&quot;&gt; packages/ember-testing/lib/test/promise.js:39 &lt;/a&gt;</source>
          <target state="translated">定义于&lt;a href=&quot;https://github.com/emberjs/ember.js/tree/v3.25.1/packages/ember-testing/lib/test/promise.js#L39&quot;&gt;packages / ember-testing / lib / test / promise.js：39&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="281599a1e6bdd40b9bcb76c33260c26d3bbb8a37" translate="yes" xml:space="preserve">
          <source>Defined in &lt;a href=&quot;https://github.com/emberjs/ember.js/tree/v3.25.1/packages/ember-testing/lib/test/waiters.js#L55&quot;&gt; packages/ember-testing/lib/test/waiters.js:55 &lt;/a&gt;</source>
          <target state="translated">定义于&lt;a href=&quot;https://github.com/emberjs/ember.js/tree/v3.25.1/packages/ember-testing/lib/test/waiters.js#L55&quot;&gt;包/ember-testing/lib/test/waiters.js:55&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="1cf32b77f67c7732749c49b7f450ee4dc1146ba3" translate="yes" xml:space="preserve">
          <source>Defined in &lt;a href=&quot;https://github.com/emberjs/ember.js/tree/v3.25.1/packages/ember-testing/lib/test/waiters.js#L7&quot;&gt; packages/ember-testing/lib/test/waiters.js:7 &lt;/a&gt;</source>
          <target state="translated">在&lt;a href=&quot;https://github.com/emberjs/ember.js/tree/v3.25.1/packages/ember-testing/lib/test/waiters.js#L7&quot;&gt;packages / ember-testing / lib / test / waiters.js：7中定义&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="78a2ef60fcf05f62b31ed0c6e265bc81519bae2e" translate="yes" xml:space="preserve">
          <source>Defined in &lt;a href=&quot;https://github.com/emberjs/ember.js/tree/v3.25.1/packages/ember-testing/lib/test/waiters.js#L83&quot;&gt; packages/ember-testing/lib/test/waiters.js:83 &lt;/a&gt;</source>
          <target state="translated">定义于&lt;a href=&quot;https://github.com/emberjs/ember.js/tree/v3.25.1/packages/ember-testing/lib/test/waiters.js#L83&quot;&gt;包/ember-testing/lib/test/waiters.js:83&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="09ed49e899e6ee4793648a24ef645a111621e440" translate="yes" xml:space="preserve">
          <source>Defined in:</source>
          <target state="translated">定义为:</target>
        </trans-unit>
        <trans-unit id="d801c745504dbdfb7f78558c39debe6722b56e50" translate="yes" xml:space="preserve">
          <source>Defines a property on an object. This method works much like the ES5 &lt;code&gt;Object.defineProperty()&lt;/code&gt; method except that it can also accept computed properties and other special descriptors.</source>
          <target state="translated">在对象上定义属性。此方法的工作方式与ES5 &lt;code&gt;Object.defineProperty()&lt;/code&gt; 方法非常相似，不同之处在于它也可以接受计算的属性和其他特殊描述符。</target>
        </trans-unit>
        <trans-unit id="2fa4550d6e8365bec4c35713938c87c2c23db99f" translate="yes" xml:space="preserve">
          <source>Defines string helper methods including string formatting and localization. Unless &lt;code&gt;EmberENV.EXTEND_PROTOTYPES.String&lt;/code&gt; is &lt;code&gt;false&lt;/code&gt; these methods will also be added to the &lt;code&gt;String.prototype&lt;/code&gt; as well.</source>
          <target state="translated">定义字符串帮助器方法，包括字符串格式和本地化。除非 &lt;code&gt;EmberENV.EXTEND_PROTOTYPES.String&lt;/code&gt; 为 &lt;code&gt;false&lt;/code&gt; ,否则这些方法也将添加到 &lt;code&gt;String.prototype&lt;/code&gt; 中。</target>
        </trans-unit>
        <trans-unit id="5478cba1e14b55281028467d5da3970408585880" translate="yes" xml:space="preserve">
          <source>Defines the properties that will be concatenated from the superclass (instead of overridden).</source>
          <target state="translated">定义将从超类中串联的属性(而不是重写)。</target>
        </trans-unit>
        <trans-unit id="e06333a234336b1088bcec7a90a503fef6042e9f" translate="yes" xml:space="preserve">
          <source>Defines the properties that will be merged from the superclass (instead of overridden).</source>
          <target state="translated">定义将从超类中合并的属性(而不是重写)。</target>
        </trans-unit>
        <trans-unit id="cba04525a9e86cb89051a67264bee4845d497f7c" translate="yes" xml:space="preserve">
          <source>Defines which query parameters the controller accepts. If you give the names &lt;code&gt;['category','page']&lt;/code&gt; it will bind the values of these query parameters to the variables &lt;code&gt;this.category&lt;/code&gt; and &lt;code&gt;this.page&lt;/code&gt;. By default, Ember coerces query parameter values using &lt;code&gt;toggleProperty&lt;/code&gt;. This behavior may lead to unexpected results. Available queryParam types: &lt;code&gt;boolean&lt;/code&gt;, &lt;code&gt;number&lt;/code&gt;, &lt;code&gt;array&lt;/code&gt;. If query param type not specified, it will be &lt;code&gt;string&lt;/code&gt;. To explicitly configure a query parameter property so it coerces as expected, you must define a type property:</source>
          <target state="translated">定义控制器接受的查询参数。如果提供名称 &lt;code&gt;['category','page']&lt;/code&gt; ，它将把这些查询参数的值绑定到变量 &lt;code&gt;this.category&lt;/code&gt; 和 &lt;code&gt;this.page&lt;/code&gt; 。默认情况下，Ember使用 &lt;code&gt;toggleProperty&lt;/code&gt; 强制查询参数值。此行为可能会导致意外的结果。可用的queryParam类型： &lt;code&gt;boolean&lt;/code&gt; ， &lt;code&gt;number&lt;/code&gt; ， &lt;code&gt;array&lt;/code&gt; 。如果未指定查询参数类型，则为 &lt;code&gt;string&lt;/code&gt; 。要显式配置查询参数属性以使其按预期强制，您必须定义一个type属性：</target>
        </trans-unit>
        <trans-unit id="69ad8feb04c973549f2146912842215a4e12ad28" translate="yes" xml:space="preserve">
          <source>Defines which query parameters the controller accepts. If you give the names &lt;code&gt;['category','page']&lt;/code&gt; it will bind the values of these query parameters to the variables &lt;code&gt;this.category&lt;/code&gt; and &lt;code&gt;this.page&lt;/code&gt;. By default, Ember coerces query parameter values using &lt;code&gt;toggleProperty&lt;/code&gt;. This behavior may lead to unexpected results. To explicitly configure a query parameter property so it coerces as expected, you must define a type property:</source>
          <target state="translated">定义控制器接受的查询参数。如果提供名称 &lt;code&gt;['category','page']&lt;/code&gt; ，它将把这些查询参数的值绑定到变量 &lt;code&gt;this.category&lt;/code&gt; 和 &lt;code&gt;this.page&lt;/code&gt; 。默认情况下，Ember使用 &lt;code&gt;toggleProperty&lt;/code&gt; 强制查询参数值。此行为可能会导致意外的结果。要显式配置查询参数属性以使其强制执行，必须定义一个type属性：</target>
        </trans-unit>
        <trans-unit id="4b067372b65b1b2359dfffb305eb7a14b64cdca2" translate="yes" xml:space="preserve">
          <source>Defining Attributes</source>
          <target state="translated">定义属性</target>
        </trans-unit>
        <trans-unit id="5cde166cde96ee71ad872bcd315dce4717cd7061" translate="yes" xml:space="preserve">
          <source>Defining Classes</source>
          <target state="translated">定义类</target>
        </trans-unit>
        <trans-unit id="684d1cecc167ddcefbe8bd587de86c9ce08d69a0" translate="yes" xml:space="preserve">
          <source>Defining Models</source>
          <target state="translated">定义模型</target>
        </trans-unit>
        <trans-unit id="aee75193fceeb68d33849a47ad620ebf0c0c86a3" translate="yes" xml:space="preserve">
          <source>Defining Services</source>
          <target state="translated">服务的定义</target>
        </trans-unit>
        <trans-unit id="b0f334c73f01ca6f3c70d7958cb5bc394c75789e" translate="yes" xml:space="preserve">
          <source>Defining Your Routes</source>
          <target state="translated">定义您的路线</target>
        </trans-unit>
        <trans-unit id="c656b358cbd9ce75138fa2c90d4518824c9449eb" translate="yes" xml:space="preserve">
          <source>Defining a Classic Component</source>
          <target state="translated">定义一个经典组件</target>
        </trans-unit>
        <trans-unit id="2fae0d5a1edc861176fb1e8c343e96c4c5f6cba4" translate="yes" xml:space="preserve">
          <source>Defining a Component</source>
          <target state="translated">定义一个组件</target>
        </trans-unit>
        <trans-unit id="82e3ca3eb173fcd008d316170fe1125d2a3dba11" translate="yes" xml:space="preserve">
          <source>Defining a Component Subclass</source>
          <target state="translated">定义一个组件子类</target>
        </trans-unit>
        <trans-unit id="0a52e5d4e996287d618b8571577357e2d8f4c02f" translate="yes" xml:space="preserve">
          <source>Defining a Controller</source>
          <target state="translated">定义控制器</target>
        </trans-unit>
        <trans-unit id="612d7117bf428fd190186238807b7cd9af2f4daf" translate="yes" xml:space="preserve">
          <source>Defining a Model</source>
          <target state="translated">定义模型</target>
        </trans-unit>
        <trans-unit id="d5428172111ac4ffce461a76f23eab7416fbbcaa" translate="yes" xml:space="preserve">
          <source>Defining a Template-only Component</source>
          <target state="translated">定义一个仅有模板的组件</target>
        </trans-unit>
        <trans-unit id="3bee19c1356d2835220e2de01cf7e2d6df40547c" translate="yes" xml:space="preserve">
          <source>Defining a route.</source>
          <target state="translated">确定路线;</target>
        </trans-unit>
        <trans-unit id="6229a5d4bc3998de888a0e49efd3c572dc5c99a2" translate="yes" xml:space="preserve">
          <source>Defining subclasses is otherwise the same as defining a base class in most ways, with the exception of the &lt;code&gt;constructor&lt;/code&gt; function where you &lt;em&gt;must&lt;/em&gt; use the &lt;code&gt;super&lt;/code&gt; keyword (discussed in more detail below). Class elements that are redefined by the child class will be &lt;em&gt;overridden&lt;/em&gt;, and their values will be fully replaced on the child:</source>
          <target state="translated">在大多数情况下，定义子类与定义基类是相同的，除了 &lt;code&gt;constructor&lt;/code&gt; 函数&lt;em&gt;必须&lt;/em&gt;在其中使用 &lt;code&gt;super&lt;/code&gt; 关键字（下面将详细讨论）。由子类重新定义的类元素将被&lt;em&gt;覆盖&lt;/em&gt;，并且其值将在子类上完全替换：</target>
        </trans-unit>
        <trans-unit id="bf1be2b7ad07bae2fe92475d10173eb638774def" translate="yes" xml:space="preserve">
          <source>Definition</source>
          <target state="translated">Definition</target>
        </trans-unit>
        <trans-unit id="4a492ee34463c5db4d8ddc62b40e22338163fe2a" translate="yes" xml:space="preserve">
          <source>Definition time can be expensive and only needs to happen once since it is an idempotent operation. For example, between test runs and FastBoot requests, the application stays the same. It is only the state that we want to reset.</source>
          <target state="translated">定义时间可能是昂贵的,并且只需要发生一次,因为它是一个幂等的操作。例如,在测试运行和FastBoot请求之间,应用程序保持不变。我们要重置的只是状态。</target>
        </trans-unit>
        <trans-unit id="c029198bb43cebd423df3b66dc734c335035bfec" translate="yes" xml:space="preserve">
          <source>Definition time, where all of the classes, templates, and other dependencies are loaded (typically in the browser).</source>
          <target state="translated">定义时间,在这个时间段内,所有的类、模板和其他依赖关系都会被加载(通常在浏览器中)。</target>
        </trans-unit>
        <trans-unit id="15225baac48fc3d689cb2b0f74b936eff4339ff7" translate="yes" xml:space="preserve">
          <source>Definitions</source>
          <target state="translated">Definitions</target>
        </trans-unit>
        <trans-unit id="fe56cd89225cb15eb55a347a39f15888e0f41834" translate="yes" xml:space="preserve">
          <source>Delay calling the target method until the debounce period has elapsed with no additional debounce calls. If &lt;code&gt;debounce&lt;/code&gt; is called again before the specified time has elapsed, the timer is reset and the entire period must pass again before the target method is called.</source>
          <target state="translated">延迟调用目标方法，直到经过反跳周期而没有其他反跳调用。如果在指定的时间过去之前再次调用了 &lt;code&gt;debounce&lt;/code&gt; ，则将重置计时器，并且必须再次经过整个时间段才能调用目标方法。</target>
        </trans-unit>
        <trans-unit id="6f55c35c2841c14deb04e9cdcbfb136babcf8f8b" translate="yes" xml:space="preserve">
          <source>Delegated properties can be bound to and will change when content is updated.</source>
          <target state="translated">委托的属性可以被绑定,并将在内容更新时改变。</target>
        </trans-unit>
        <trans-unit id="f6fdbe48dc54dd86f63097a03bd24094dedd713a" translate="yes" xml:space="preserve">
          <source>Delete</source>
          <target state="translated">Delete</target>
        </trans-unit>
        <trans-unit id="907e783b0342a83203d67d0431b3641fb64ed736" translate="yes" xml:space="preserve">
          <source>Delete &lt;code&gt;postRecord.destroyRecord()&lt;/code&gt;</source>
          <target state="translated">删除 &lt;code&gt;postRecord.destroyRecord()&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="8867ec80db096728c17662440034aca8e41390c5" translate="yes" xml:space="preserve">
          <source>Delete `postRecord.destroyRecord()`</source>
          <target state="translated">删除`postRecord.destroyRecord()`。</target>
        </trans-unit>
        <trans-unit id="3d0100454a85c628231b0e75af94c719e0554ed1" translate="yes" xml:space="preserve">
          <source>Deleting Records</source>
          <target state="translated">删除记录</target>
        </trans-unit>
        <trans-unit id="aa64dfaadd5df06565c7755f32130e5641e48407" translate="yes" xml:space="preserve">
          <source>Deleting records is as straightforward as creating records. Call &lt;a href=&quot;http://emberjs.com/api/data/classes/DS.Model.html#method_deleteRecord&quot;&gt;&lt;code&gt;deleteRecord()&lt;/code&gt;&lt;/a&gt; on any instance of &lt;code&gt;DS.Model&lt;/code&gt;. This flags the record as &lt;code&gt;isDeleted&lt;/code&gt;. The deletion can then be persisted using &lt;code&gt;save()&lt;/code&gt;. Alternatively, you can use the &lt;a href=&quot;http://emberjs.com/api/data/classes/DS.Model.html#method_destroyRecord&quot;&gt;&lt;code&gt;destroyRecord&lt;/code&gt;&lt;/a&gt; method to delete and persist at the same time.</source>
          <target state="translated">删除记录就像创建记录一样简单。在 &lt;code&gt;DS.Model&lt;/code&gt; 的任何实例上调用&lt;a href=&quot;http://emberjs.com/api/data/classes/DS.Model.html#method_deleteRecord&quot;&gt; &lt;code&gt;deleteRecord()&lt;/code&gt; &lt;/a&gt;。这 &lt;code&gt;isDeleted&lt;/code&gt; 记录标记为isDeleted。然后可以使用 &lt;code&gt;save()&lt;/code&gt; 保留删除操作。或者，您可以使用&lt;a href=&quot;http://emberjs.com/api/data/classes/DS.Model.html#method_destroyRecord&quot;&gt; &lt;code&gt;destroyRecord&lt;/code&gt; &lt;/a&gt;方法同时删除和保留。</target>
        </trans-unit>
        <trans-unit id="ed56c29ba07d9bebc6dce7acbeaf82456fdc7dec" translate="yes" xml:space="preserve">
          <source>Deleting records is as straightforward as creating records. Call &lt;a href=&quot;https://api.emberjs.com/ember-data/release/classes/Model/methods#deleteRecord&quot;&gt;&lt;code&gt;deleteRecord()&lt;/code&gt;&lt;/a&gt; on any instance of &lt;code&gt;Model&lt;/code&gt;. This flags the record as &lt;code&gt;isDeleted&lt;/code&gt;. The deletion can then be persisted using &lt;code&gt;save()&lt;/code&gt;. Alternatively, you can use the &lt;a href=&quot;https://api.emberjs.com/ember-data/release/classes/Model/methods#destroyRecord&quot;&gt;&lt;code&gt;destroyRecord&lt;/code&gt;&lt;/a&gt; method to delete and persist at the same time.</source>
          <target state="translated">删除记录就像创建记录一样简单。在 &lt;code&gt;Model&lt;/code&gt; 的任何实例上调用&lt;a href=&quot;https://api.emberjs.com/ember-data/release/classes/Model/methods#deleteRecord&quot;&gt; &lt;code&gt;deleteRecord()&lt;/code&gt; &lt;/a&gt;。这 &lt;code&gt;isDeleted&lt;/code&gt; 记录标记为isDeleted。然后可以使用 &lt;code&gt;save()&lt;/code&gt; 保留删除操作。另外，您可以使用&lt;a href=&quot;https://api.emberjs.com/ember-data/release/classes/Model/methods#destroyRecord&quot;&gt; &lt;code&gt;destroyRecord&lt;/code&gt; &lt;/a&gt;方法同时删除和保留。</target>
        </trans-unit>
        <trans-unit id="4295cbc7445a6fd6c39d2e93e549524e0964ba30" translate="yes" xml:space="preserve">
          <source>Demo.</source>
          <target state="translated">Demo.</target>
        </trans-unit>
        <trans-unit id="0562f32dc56f5c702810cbe010068ddd38dbd69a" translate="yes" xml:space="preserve">
          <source>Dependencies</source>
          <target state="translated">Dependencies</target>
        </trans-unit>
        <trans-unit id="3aefbe2f210572802298b2ad0347dc9e423d2690" translate="yes" xml:space="preserve">
          <source>Dependency Injection</source>
          <target state="translated">依赖性注入</target>
        </trans-unit>
        <trans-unit id="e5934a18dc17bf4af5f11772a5eecd4af8a276e5" translate="yes" xml:space="preserve">
          <source>Dependency injections can also be declared directly on Ember classes using &lt;code&gt;Ember.inject&lt;/code&gt;. Currently, &lt;code&gt;Ember.inject&lt;/code&gt; supports injecting controllers (via &lt;code&gt;Ember.inject.controller&lt;/code&gt;) and services (via &lt;code&gt;Ember.inject.service&lt;/code&gt;).</source>
          <target state="translated">也可以使用 &lt;code&gt;Ember.inject&lt;/code&gt; 在Ember类上直接声明依赖项注入。当前， &lt;code&gt;Ember.inject&lt;/code&gt; 支持注入控制器（通过 &lt;code&gt;Ember.inject.controller&lt;/code&gt; ）和服务（通过 &lt;code&gt;Ember.inject.service&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="b8f5554c40d725d297c7971f77ec993237873880" translate="yes" xml:space="preserve">
          <source>Dependency injections can also be declared directly on Ember classes using &lt;code&gt;inject&lt;/code&gt;. Currently, &lt;code&gt;inject&lt;/code&gt; supports injecting controllers (via &lt;code&gt;import { inject } from '@ember/controller';&lt;/code&gt;) and services (via &lt;code&gt;import { inject } from '@ember/service';&lt;/code&gt;).</source>
          <target state="translated">也可以使用 &lt;code&gt;inject&lt;/code&gt; 在Ember类上直接声明依赖项注入。当前， &lt;code&gt;inject&lt;/code&gt; 支持注入控制器（通过 &lt;code&gt;import { inject } from '@ember/controller';&lt;/code&gt; &lt;code&gt;import { inject } from '@ember/service';&lt;/code&gt; ;）和服务（通过从'@ ember / service';的import {inject};）。</target>
        </trans-unit>
        <trans-unit id="6ef76ee671f791215cbf8ad6b846262ce9adfe7b" translate="yes" xml:space="preserve">
          <source>Dependency keys have no effect on volatile properties as they are for cache invalidation and notification when cached value is invalidated.</source>
          <target state="translated">依赖键对易失性属性没有影响,因为它们是用于缓存无效和缓存值无效时的通知。</target>
        </trans-unit>
        <trans-unit id="e737a090242c9d0342d3b7cea16bdfa684be6790" translate="yes" xml:space="preserve">
          <source>Deploying</source>
          <target state="translated">Deploying</target>
        </trans-unit>
        <trans-unit id="09f950c19f5517134d2742f474ecf5990e1fc4ce" translate="yes" xml:space="preserve">
          <source>Deploying to Netlify using Git (specifically GitHub)</source>
          <target state="translated">使用Git(特别是GitHub)部署到Netlify。</target>
        </trans-unit>
        <trans-unit id="e3f8ae2cabfcc7f45cdeb0586b9f7c7a526f73f0" translate="yes" xml:space="preserve">
          <source>Deploying to Netlify using drag and drop</source>
          <target state="translated">使用拖放方式部署到Netlify。</target>
        </trans-unit>
        <trans-unit id="e6b35d491102fe1492667467875d49cff64fe20b" translate="yes" xml:space="preserve">
          <source>Deploying to surge.sh</source>
          <target state="translated">部署到 surge.sh</target>
        </trans-unit>
        <trans-unit id="59e35105cb013ad2e00e3f75ff96f0b8930870f3" translate="yes" xml:space="preserve">
          <source>Deploying with scp</source>
          <target state="translated">用scp部署</target>
        </trans-unit>
        <trans-unit id="db1927201c49dc304bade1dd9b3a8383e89e8deb" translate="yes" xml:space="preserve">
          <source>Deploying your app to Netlify</source>
          <target state="translated">将您的应用程序部署到Netlify</target>
        </trans-unit>
        <trans-unit id="1eee62fd5647920b64a71e39936c3e47072f2ef8" translate="yes" xml:space="preserve">
          <source>Deploying your app to Netlify.</source>
          <target state="translated">将您的应用程序部署到Netlify。</target>
        </trans-unit>
        <trans-unit id="2ee2f057911534559aa980409648126811612543" translate="yes" xml:space="preserve">
          <source>Deprecation Handling in Ember Inspector</source>
          <target state="translated">Ember Inspector中的弃用处理</target>
        </trans-unit>
        <trans-unit id="a8c62f497d751a4289da9a815fc0b6c665654a8a" translate="yes" xml:space="preserve">
          <source>Deprecation Workflow</source>
          <target state="translated">废弃工作流程</target>
        </trans-unit>
        <trans-unit id="34730e9bbd5c0ba7b7655973316eed44e39da85f" translate="yes" xml:space="preserve">
          <source>Deprecations</source>
          <target state="translated">Deprecations</target>
        </trans-unit>
        <trans-unit id="cacb15ce5da6de7282484c5712721d4bcf86ceed" translate="yes" xml:space="preserve">
          <source>Deprecations that matter for Octane</source>
          <target state="translated">与Octane有关的弃用</target>
        </trans-unit>
        <trans-unit id="df7237ae1b6223b18d776eb47eb59a2d3f95c841" translate="yes" xml:space="preserve">
          <source>Describes the expectation. This will become the text of the Error thrown if the assertion fails.</source>
          <target state="translated">描述了期望值。这将成为断言失败时抛出的Error文本。</target>
        </trans-unit>
        <trans-unit id="b409d2f978417749b80e17e39c0ca01376f2c97a" translate="yes" xml:space="preserve">
          <source>Descriptor</source>
          <target state="translated">Descriptor</target>
        </trans-unit>
        <trans-unit id="59b035367211a9382930b2a4c13637dbc33c4f32" translate="yes" xml:space="preserve">
          <source>Design</source>
          <target state="translated">Design</target>
        </trans-unit>
        <trans-unit id="ab146a1650fef1a944e534c2c75a7b6bf43f2f19" translate="yes" xml:space="preserve">
          <source>Designing the Action</source>
          <target state="translated">设计行动</target>
        </trans-unit>
        <trans-unit id="d49748bfcebe73462144512662b4e42f301ab437" translate="yes" xml:space="preserve">
          <source>Designing the Child Component</source>
          <target state="translated">设计子组件</target>
        </trans-unit>
        <trans-unit id="94312445402335ec83f5239d1454753cf4723026" translate="yes" xml:space="preserve">
          <source>Destroy all objects in the container</source>
          <target state="translated">销毁容器中的所有对象</target>
        </trans-unit>
        <trans-unit id="cdc692fd3611c52b3884e0668c92f8e4e969f39f" translate="yes" xml:space="preserve">
          <source>Destroyed object property flag.</source>
          <target state="translated">销毁的对象属性标志。</target>
        </trans-unit>
        <trans-unit id="32e71571975568b3ba9ba6b1c458e5d1851329fc" translate="yes" xml:space="preserve">
          <source>Destroys an object by setting the &lt;code&gt;isDestroyed&lt;/code&gt; flag and removing its metadata, which effectively destroys observers and bindings.</source>
          <target state="translated">通过设置 &lt;code&gt;isDestroyed&lt;/code&gt; 标志并删除其元数据来销毁对象，这有效地销毁了观察者和绑定。</target>
        </trans-unit>
        <trans-unit id="aa2625d3d8d891265f4ba5c6381823d802d6e2a4" translate="yes" xml:space="preserve">
          <source>Destruction scheduled flag. The &lt;code&gt;destroy()&lt;/code&gt; method has been called.</source>
          <target state="translated">销毁预定标志。该 &lt;code&gt;destroy()&lt;/code&gt; 方法被调用。</target>
        </trans-unit>
        <trans-unit id="1a3ea622564281e6df5303794676452e2f0e5f11" translate="yes" xml:space="preserve">
          <source>Destruction via &lt;code&gt;destroy()&lt;/code&gt; follows these steps:</source>
          <target state="translated">通过 &lt;code&gt;destroy()&lt;/code&gt; 进行销毁的步骤如下：</target>
        </trans-unit>
        <trans-unit id="917dbbdfb6c8dac4687bf695f888f7fdf35afe65" translate="yes" xml:space="preserve">
          <source>Destructuring Objects Passed as Action Arguments</source>
          <target state="translated">重构作为动作参数传递的对象。</target>
        </trans-unit>
        <trans-unit id="1576e5de418de4b3bc2b20ffc5a7e01ffe480b29" translate="yes" xml:space="preserve">
          <source>Detaching and Tearing Down Component Elements with &lt;code&gt;willDestroyElement&lt;/code&gt;</source>
          <target state="translated">使用 &lt;code&gt;willDestroyElement&lt;/code&gt; 拆卸和拆除零部件</target>
        </trans-unit>
        <trans-unit id="44077f29930fde233bdc6c36ecef94efb1b769f8" translate="yes" xml:space="preserve">
          <source>Detect whether a class is a model.</source>
          <target state="translated">检测一个类是否为模型。</target>
        </trans-unit>
        <trans-unit id="71a4b30ce1c93b4f10f2ce4336198361dcdc1480" translate="yes" xml:space="preserve">
          <source>Detects if a string was decorated using &lt;code&gt;Ember.String.htmlSafe&lt;/code&gt;.</source>
          <target state="translated">检测是否使用 &lt;code&gt;Ember.String.htmlSafe&lt;/code&gt; 装饰了字符串。</target>
        </trans-unit>
        <trans-unit id="f307ddb6771c5b9e4087df6d7273b7006adcb04b" translate="yes" xml:space="preserve">
          <source>Detects if a string was decorated using &lt;code&gt;htmlSafe&lt;/code&gt;.</source>
          <target state="translated">检测字符串是否使用 &lt;code&gt;htmlSafe&lt;/code&gt; 装饰。</target>
        </trans-unit>
        <trans-unit id="b6217e018d9690530f35e93f5b181567efb1b0e8" translate="yes" xml:space="preserve">
          <source>Determine whether the specified &lt;code&gt;feature&lt;/code&gt; is enabled. Used by Ember's build tools to exclude experimental features from beta/stable builds.</source>
          <target state="translated">确定是否启用了指定 &lt;code&gt;feature&lt;/code&gt; 。Ember的构建工具使用它从beta / stable构建中排除实验功能。</target>
        </trans-unit>
        <trans-unit id="9497909fed04d80e5b1397a93c701071209baaa9" translate="yes" xml:space="preserve">
          <source>Determines if the helper has a destroyable to include in the destructor hierarchy. If enabled, the &lt;code&gt;getDestroyable&lt;/code&gt; hook will be called, and its result will be associated with the destroyable parent block.</source>
          <target state="translated">确定帮助程序是否具有可销毁对象以包括在析构函数层次结构中。如果启用，将调用 &lt;code&gt;getDestroyable&lt;/code&gt; 挂钩，其结果将与可破坏的父块关联。</target>
        </trans-unit>
        <trans-unit id="747bfdf716ccb2cfb269f0830e8963cde91673df" translate="yes" xml:space="preserve">
          <source>Determines if the helper has a value which can be used externally. The helper's &lt;code&gt;getValue&lt;/code&gt; hook will be run whenever the value of the helper is accessed if this capability is enabled.</source>
          <target state="translated">确定帮助程序是否具有可在外部使用的值。如果启用了此功能，则每当访问帮助程序的值时，都会运行该帮助程序的 &lt;code&gt;getValue&lt;/code&gt; 挂钩。</target>
        </trans-unit>
        <trans-unit id="47c1d0846c0eee9f0a9b57d8e1dbd3b0a07ed8ba" translate="yes" xml:space="preserve">
          <source>Determines the pathname for a given type.</source>
          <target state="translated">确定给定类型的路径名。</target>
        </trans-unit>
        <trans-unit id="d995d3acf0905aa37c363e614fdf633df81247d4" translate="yes" xml:space="preserve">
          <source>Determines whether Ember should add to &lt;code&gt;Array&lt;/code&gt;, &lt;code&gt;Function&lt;/code&gt;, and &lt;code&gt;String&lt;/code&gt; native object prototypes, a few extra methods in order to provide a more friendly API.</source>
          <target state="translated">确定Ember是否应向 &lt;code&gt;Array&lt;/code&gt; ， &lt;code&gt;Function&lt;/code&gt; 和 &lt;code&gt;String&lt;/code&gt; 本机对象原型中添加一些其他方法，以提供更友好的API。</target>
        </trans-unit>
        <trans-unit id="1a6bb50fe7409535e288a8bf60d13d6136ee81f3" translate="yes" xml:space="preserve">
          <source>Determines whether a route is active.</source>
          <target state="translated">确定途径是否处于活动状态。</target>
        </trans-unit>
        <trans-unit id="238d33853587f87308b0dd503b7656327797337c" translate="yes" xml:space="preserve">
          <source>Determines whether the &lt;code&gt;LinkComponent&lt;/code&gt; will trigger routing via the &lt;code&gt;replaceWith&lt;/code&gt; routing strategy.</source>
          <target state="translated">确定 &lt;code&gt;LinkComponent&lt;/code&gt; 是否将通过 &lt;code&gt;replaceWith&lt;/code&gt; 路由策略触发路由。</target>
        </trans-unit>
        <trans-unit id="b62b81b826164854f939b55515f8facc9973fbae" translate="yes" xml:space="preserve">
          <source>Development Helpers</source>
          <target state="translated">发展助手</target>
        </trans-unit>
        <trans-unit id="14a37ec9b5718abce3a1c9ada986d1bc7f32ea3a" translate="yes" xml:space="preserve">
          <source>Different apps may have very different models, depending on what problems they're trying to solve. For example, a photo sharing application might have a &lt;code&gt;Photo&lt;/code&gt; model to represent a particular photo, and a &lt;code&gt;PhotoAlbum&lt;/code&gt; that represents a group of photos. In contrast, an online shopping app would probably have different models, like &lt;code&gt;ShoppingCart&lt;/code&gt;, &lt;code&gt;Invoice&lt;/code&gt;, or &lt;code&gt;LineItem&lt;/code&gt;.</source>
          <target state="translated">不同的应用程序可能具有非常不同的模型，具体取决于它们要解决的问题。例如，照片共享应用程序可能具有代表特定照片的 &lt;code&gt;Photo&lt;/code&gt; 模型和代表一组照片的 &lt;code&gt;PhotoAlbum&lt;/code&gt; 。相比之下，在线购物应用可能会具有不同的模型，例如 &lt;code&gt;ShoppingCart&lt;/code&gt; ， &lt;code&gt;Invoice&lt;/code&gt; 或 &lt;code&gt;LineItem&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="1a4eb664e58ad5c0c69f787efbf78b1ca8325ba5" translate="yes" xml:space="preserve">
          <source>Digital accessibility regulations vary from country to country, but most at least point to the &lt;a href=&quot;https://www.w3.org/WAI/&quot;&gt;WAI-ARIA&lt;/a&gt; specification for compliance.</source>
          <target state="translated">数字无障碍法规因国家/地区而异，但大多数至少指向&lt;a href=&quot;https://www.w3.org/WAI/&quot;&gt;WAI-ARIA&lt;/a&gt;规范以确保合规性。</target>
        </trans-unit>
        <trans-unit id="f4231962edb9e8518287ecb041570a1708d6378b" translate="yes" xml:space="preserve">
          <source>Direct manipulation of &lt;code&gt;checked&lt;/code&gt;</source>
          <target state="translated">直接操作 &lt;code&gt;checked&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="99946884377a9fee47f0a9dadc16a697de435a38" translate="yes" xml:space="preserve">
          <source>Directory Structure</source>
          <target state="translated">目录结构</target>
        </trans-unit>
        <trans-unit id="37ac9a91b252b9a5f8fb42735599f21ca4b7eaff" translate="yes" xml:space="preserve">
          <source>Disable rendering completely.</source>
          <target state="translated">完全禁用渲染。</target>
        </trans-unit>
        <trans-unit id="367a3d2993becd19e79f505935d8ef8aa5385f40" translate="yes" xml:space="preserve">
          <source>Disabling Prototype Extensions</source>
          <target state="translated">禁用原型扩展</target>
        </trans-unit>
        <trans-unit id="f378a79b9bc753bc2dee2164e11b8ae453be09d3" translate="yes" xml:space="preserve">
          <source>Disabling URL Management</source>
          <target state="translated">禁用URL管理</target>
        </trans-unit>
        <trans-unit id="dc7dbf004afd4a8483633185bcdb4f42c2f27f86" translate="yes" xml:space="preserve">
          <source>Disabling the &lt;code&gt;link-to&lt;/code&gt; component</source>
          <target state="translated">禁用 &lt;code&gt;link-to&lt;/code&gt; 组件</target>
        </trans-unit>
        <trans-unit id="bfbb1a4c307b058729177180bc8abc9f5501b0ff" translate="yes" xml:space="preserve">
          <source>Discards any unsaved changes to the given attribute. This feature is not enabled by default. You must enable &lt;code&gt;ds-rollback-attribute&lt;/code&gt; and be running a canary build.</source>
          <target state="translated">放弃对给定属性的所有未保存的更改。默认情况下不启用此功能。您必须启用 &lt;code&gt;ds-rollback-attribute&lt;/code&gt; 并运行Canary构建。</target>
        </trans-unit>
        <trans-unit id="a3d716130aad8bda0a7fa10e31cd23144a492a44" translate="yes" xml:space="preserve">
          <source>Disconnects a view that has been rendered into an outlet.</source>
          <target state="translated">断开已渲染成出口的视图。</target>
        </trans-unit>
        <trans-unit id="adff59920688f75021d7cbe8caea7d8ce3c81d2c" translate="yes" xml:space="preserve">
          <source>Display Maps With a Component</source>
          <target state="translated">用一个组件显示地图</target>
        </trans-unit>
        <trans-unit id="d24937b5b5ee15306389efce10f84cc172d6767d" translate="yes" xml:space="preserve">
          <source>Display a debug notice.</source>
          <target state="translated">显示一个调试通知。</target>
        </trans-unit>
        <trans-unit id="9b393131bc34ae40c8366c09e8e7ac91ef72a22a" translate="yes" xml:space="preserve">
          <source>Display a deprecation warning with the provided message and a stack trace (Chrome and Firefox only).</source>
          <target state="translated">用提供的消息和堆栈跟踪显示一个废弃警告(仅限Chrome和Firefox)。</target>
        </trans-unit>
        <trans-unit id="74dff7e47ad84a1e7e0fbe8d937dba188a469635" translate="yes" xml:space="preserve">
          <source>Display a warning with the provided message.</source>
          <target state="translated">用提供的信息显示一个警告。</target>
        </trans-unit>
        <trans-unit id="14a211d406cb54078dc051d2516433df1049f018" translate="yes" xml:space="preserve">
          <source>Displaying Properties</source>
          <target state="translated">显示属性</target>
        </trans-unit>
        <trans-unit id="06dff54a410dab575a68ff666e82fed47f1dbbf4" translate="yes" xml:space="preserve">
          <source>Displaying a List of Items</source>
          <target state="translated">显示项目列表</target>
        </trans-unit>
        <trans-unit id="2676a10004d97630855ca7e273863a19a706b61f" translate="yes" xml:space="preserve">
          <source>Displaying the Keys in an Object</source>
          <target state="translated">显示对象中的键</target>
        </trans-unit>
        <trans-unit id="d29084618734a0c2eea0f8b2f8c7a75a5a2115b7" translate="yes" xml:space="preserve">
          <source>Do note that each app instance maintains their own registry/container, so they will run in complete isolation by default.</source>
          <target state="translated">请注意,每个应用程序实例都会维护自己的注册表/容器,因此它们将在默认情况下完全隔离运行。</target>
        </trans-unit>
        <trans-unit id="601126261dc4a73a132f136b523d5aba047d64e6" translate="yes" xml:space="preserve">
          <source>Doing this allows us to simplify the original template like so:</source>
          <target state="translated">这样做可以让我们把原来的模板简化成这样。</target>
        </trans-unit>
        <trans-unit id="dd30c53bdc0a778d3f7beb6c8bbdfd04d1d70981" translate="yes" xml:space="preserve">
          <source>Don't have npm? &lt;a href=&quot;https://docs.npmjs.com/getting-started/installing-node&quot;&gt;Learn how to install Node.js and npm here&lt;/a&gt;. For a full list of dependencies necessary for an Ember CLI project, consult our &lt;a href=&quot;https://guides.emberjs.com/getting-started/&quot;&gt;Installing Ember&lt;/a&gt; guide.</source>
          <target state="translated">没有npm？&lt;a href=&quot;https://docs.npmjs.com/getting-started/installing-node&quot;&gt;在此处了解如何安装Node.js和npm&lt;/a&gt;。有关Ember CLI项目所需的完整依赖项列表，请参阅我们的《&lt;a href=&quot;https://guides.emberjs.com/getting-started/&quot;&gt;安装Ember》&lt;/a&gt;指南。</target>
        </trans-unit>
        <trans-unit id="184ffd13d87df53678a7729b1dc65187f62aa662" translate="yes" xml:space="preserve">
          <source>Don't have npm? &lt;a href=&quot;https://docs.npmjs.com/getting-started/installing-node&quot;&gt;Learn how to install Node.js and npm here&lt;/a&gt;. For a full list of dependencies necessary for an Ember CLI project, visit the &lt;a href=&quot;https://cli.emberjs.com/release/basic-use/&quot;&gt;Ember CLI Guides - Installing&lt;/a&gt;.</source>
          <target state="translated">没有npm？&lt;a href=&quot;https://docs.npmjs.com/getting-started/installing-node&quot;&gt;在此处了解如何安装Node.js和npm&lt;/a&gt;。有关Ember CLI项目所需的依赖项的完整列表，请访问《&lt;a href=&quot;https://cli.emberjs.com/release/basic-use/&quot;&gt;Ember CLI指南-安装》&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="383217db62d0e96a7e70dcd1e5ec1cb6f03def00" translate="yes" xml:space="preserve">
          <source>Drag and drop events:</source>
          <target state="translated">拖放事件。</target>
        </trans-unit>
        <trans-unit id="65968f0badc72224db501308c0905f984ce4e918" translate="yes" xml:space="preserve">
          <source>Due to the expense of array comparisons, collections will never be equal to each other even if each of their items are equal to each other.</source>
          <target state="translated">由于数组比较的费用,即使它们的每一个项目都相等,集合之间也永远不会相等。</target>
        </trans-unit>
        <trans-unit id="c5de642fd9309f71daa03b344eae4590100c50cc" translate="yes" xml:space="preserve">
          <source>Due to the way JS Bin uses iframes, the Inspector doesn't work with edit mode. To use the Inspector with JS Bin, switch to the &quot;live preview&quot; mode by clicking on the arrow circled below.</source>
          <target state="translated">由于JS Bin使用iframe的方式,检查器不能在编辑模式下使用。要在JS Bin中使用检查器,请点击下面圈出的箭头切换到 &quot;实时预览 &quot;模式。</target>
        </trans-unit>
        <trans-unit id="cc4c2dbd476f61255b537fe8d6a11f61187ea685" translate="yes" xml:space="preserve">
          <source>Due to their limited network connectivity and CPU power, great performance on mobile devices rarely comes for free. You should integrate performance testing into your development workflow from the beginning. This will help you avoid making costly architectural mistakes that are much harder to fix if you only notice them once your app is nearly complete.</source>
          <target state="translated">由于其有限的网络连接和CPU功率,移动设备上的出色性能很少是免费的。您应该从一开始就将性能测试整合到您的开发工作流程中。这将帮助您避免犯代价高昂的架构错误,如果您只有在应用程序接近完成时才注意到这些错误,则更难修复。</target>
        </trans-unit>
        <trans-unit id="1370004da76fa4f3b7a5180fd5436065ef4c7d5b" translate="yes" xml:space="preserve">
          <source>Duration</source>
          <target state="translated">Duration</target>
        </trans-unit>
        <trans-unit id="9dee214ba943b1b5975aeb2395d6991ad2030020" translate="yes" xml:space="preserve">
          <source>During a route transition, the Ember Router passes a transition object to the various hooks on the routes involved in the transition. Any hook that has access to this transition object has the ability to immediately abort the transition by calling &lt;code&gt;transition.abort()&lt;/code&gt;, and if the transition object is stored, it can be re-attempted at a later time by calling &lt;code&gt;transition.retry()&lt;/code&gt;.</source>
          <target state="translated">在路由过渡期间，Ember路由器将过渡对象传递到过渡所涉及的路由上的各种挂钩。任何有权访问此过渡对象的钩子都可以通过调用 &lt;code&gt;transition.abort()&lt;/code&gt; 立即中止过渡，并且如果存储了过渡对象，则可以稍后通过调用 &lt;code&gt;transition.retry()&lt;/code&gt; 重新尝试该过渡对象。。</target>
        </trans-unit>
        <trans-unit id="8d834ca3b12373d8e03ac115d1a9a23e41757b42" translate="yes" xml:space="preserve">
          <source>During development, add Ember.js specific extensions to your code editor for added functionality. Below is a list of some of the extensions available, many of which are created and maintained by the developer community:</source>
          <target state="translated">在开发过程中,将Ember.js特定的扩展添加到你的代码编辑器中以增加功能。下面列出了一些可用的扩展,其中许多是由开发者社区创建和维护的。</target>
        </trans-unit>
        <trans-unit id="ea23811db97b8961262c8005387b23871ee3bb99" translate="yes" xml:space="preserve">
          <source>During iteration, the index of each item in the array is provided as a second block param. Block params are space-separated, without commas. For example:</source>
          <target state="translated">在迭代过程中,数组中每个项目的索引作为第二个块参数提供。块参数是以空格分隔的,没有逗号。例如</target>
        </trans-unit>
        <trans-unit id="978f14629415bf769be720d8a2ee56464c683409" translate="yes" xml:space="preserve">
          <source>During iteration, the index of each item in the array is provided as a second block parameter.</source>
          <target state="translated">在迭代过程中,数组中每个项目的索引作为第二个块参数提供。</target>
        </trans-unit>
        <trans-unit id="41476b5ff3ef74a3359490a29c2fcdf852e76665" translate="yes" xml:space="preserve">
          <source>During the &lt;code&gt;beforeModel&lt;/code&gt;, &lt;code&gt;model&lt;/code&gt;, and &lt;code&gt;afterModel&lt;/code&gt; hooks, data may take some time to load. Technically, the router pauses the transition until the promises returned from each hook fulfill.</source>
          <target state="translated">在 &lt;code&gt;beforeModel&lt;/code&gt; ， &lt;code&gt;model&lt;/code&gt; 和 &lt;code&gt;afterModel&lt;/code&gt; 挂接期间，数据加载可能需要一些时间。从技术上讲，路由器会暂停过渡，直到每个挂钩返回的承诺都实现为止。</target>
        </trans-unit>
        <trans-unit id="dbd3f76981507ecaccd56410d969be2eb0b8dc68" translate="yes" xml:space="preserve">
          <source>During the development of your tests or when you refactor your application's code, the execution of your tests may fail. In order to help you understand why, &lt;a href=&quot;https://github.com/emberjs/ember-test-helpers/blob/master/API.md#pausetest&quot;&gt;&lt;code&gt;pauseTest()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;https://github.com/emberjs/ember-test-helpers/blob/master/API.md#resumetest&quot;&gt;&lt;code&gt;resumeTest()&lt;/code&gt;&lt;/a&gt; can help you.</source>
          <target state="translated">在测试的开发过程中或重构应用程序的代码时，测试的执行可能会失败。为了帮助您理解原因，&lt;a href=&quot;https://github.com/emberjs/ember-test-helpers/blob/master/API.md#pausetest&quot;&gt; &lt;code&gt;pauseTest()&lt;/code&gt; &lt;/a&gt;和&lt;a href=&quot;https://github.com/emberjs/ember-test-helpers/blob/master/API.md#resumetest&quot;&gt; &lt;code&gt;resumeTest()&lt;/code&gt; &lt;/a&gt;可以为您提供帮助。</target>
        </trans-unit>
        <trans-unit id="148bde726835af7c4334b2a56d36dc634c2457ca" translate="yes" xml:space="preserve">
          <source>Dynamic Models</source>
          <target state="translated">动态模型</target>
        </trans-unit>
        <trans-unit id="f68c1eed8a5b13c48c7ec75c21b7357e122568cd" translate="yes" xml:space="preserve">
          <source>Dynamic Segments</source>
          <target state="translated">动态段</target>
        </trans-unit>
        <trans-unit id="de500d252dcb2472c90753e930dae9d24879d1ad" translate="yes" xml:space="preserve">
          <source>Dynamic content inside a Handlebars expression is rendered with data-binding. This means if you update a property, your usage of that property in a template will be automatically updated to the latest value.</source>
          <target state="translated">Handlebars表达式中的动态内容是通过数据绑定来呈现的。这意味着如果您更新了一个属性,您在模板中对该属性的使用将自动更新为最新值。</target>
        </trans-unit>
        <trans-unit id="f23924d64f30f4b012549b77aaa2c1de429b8a81" translate="yes" xml:space="preserve">
          <source>Dynamic updating</source>
          <target state="translated">动态更新</target>
        </trans-unit>
        <trans-unit id="be8e661508314a044956e4608bf23fb3f8d64328" translate="yes" xml:space="preserve">
          <source>Dynamically look up a property on an object. The second argument to &lt;code&gt;{{get}}&lt;/code&gt; should have a string value, although it can be bound.</source>
          <target state="translated">动态查找对象上的属性。 &lt;code&gt;{{get}}&lt;/code&gt; 的第二个参数应该具有字符串值，尽管可以绑定。</target>
        </trans-unit>
        <trans-unit id="3ac0a120345370f8f3cbc24679ca1cb8d75d98e8" translate="yes" xml:space="preserve">
          <source>Dynamically rendering a component</source>
          <target state="translated">动态渲染一个组件</target>
        </trans-unit>
        <trans-unit id="6d85b2d399967a027efc0d611a548da5bc48a920" translate="yes" xml:space="preserve">
          <source>ECMAScript</source>
          <target state="translated">ECMAScript</target>
        </trans-unit>
        <trans-unit id="de82c444bfce325bd727348d79d035eeb7adcdd0" translate="yes" xml:space="preserve">
          <source>ES stands for ECMAScript, which is the specification that JavaScript is based on. The number that follows is the version of the specification.</source>
          <target state="translated">ES是ECMAScript的缩写,也就是JavaScript所基于的规范。后面的数字是该规范的版本。</target>
        </trans-unit>
        <trans-unit id="3111e1df8b9251c7edde3fe679904728f174443a" translate="yes" xml:space="preserve">
          <source>ES2015 features via Babel.</source>
          <target state="translated">ES2015功能通过巴别。</target>
        </trans-unit>
        <trans-unit id="c64fd6bb0d42e0db2c31bcb1496af22f477a511b" translate="yes" xml:space="preserve">
          <source>ES3, ES5, ES5.1, ES6 (aka ES2015), etc</source>
          <target state="translated">ES3、ES5、ES5.1、ES6(又名ES2015)等。</target>
        </trans-unit>
        <trans-unit id="609447fda1e98fc9a10c5a8b451be6650aee6318" translate="yes" xml:space="preserve">
          <source>ES5 support</source>
          <target state="translated">支持ES5</target>
        </trans-unit>
        <trans-unit id="f9d8a7611370241de60b894de016326924a7a9e7" translate="yes" xml:space="preserve">
          <source>ES6 Modules</source>
          <target state="translated">ES6模块</target>
        </trans-unit>
        <trans-unit id="ffbb0e3823e33fe63c570b6b9e20d944754cf818" translate="yes" xml:space="preserve">
          <source>ES6 support</source>
          <target state="translated">支持ES6</target>
        </trans-unit>
        <trans-unit id="8e2e8d7697b7c17ffeb334ec9b74abede936ddd4" translate="yes" xml:space="preserve">
          <source>EXTEND_PROTOTYPES</source>
          <target state="translated">EXTEND_PROTOTYPES</target>
        </trans-unit>
        <trans-unit id="ffc4ebd77a7eb1f517a0e2179413f9d0876746e3" translate="yes" xml:space="preserve">
          <source>EXTEND_PROTOTYPESpublic</source>
          <target state="translated">EXTEND_PROTOTYPESpublic</target>
        </trans-unit>
        <trans-unit id="93ec056a102c44f17369e86a7a549e892aa06cea" translate="yes" xml:space="preserve">
          <source>Each &lt;a href=&quot;https://guides.emberjs.com/v2.12.0/templates/writing-helpers/#toc_helper-arguments&quot;&gt;argument&lt;/a&gt; in the helper will be added to an array and passed to our helper. For example, &lt;code&gt;{{my-helper &quot;foo&quot; &quot;bar&quot;}}&lt;/code&gt; would result in &lt;code&gt;myHelper([&quot;foo&quot;, &quot;bar&quot;])&lt;/code&gt;. Using array &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment&quot;&gt;ES2015 destructuring&lt;/a&gt; assignment, we can name expected parameters within the array. In the example above, the first argument in the template will be assigned to &lt;code&gt;propertyType&lt;/code&gt;. This provides a flexible, expressive interface for your helpers, including optional arguments and default values.</source>
          <target state="translated">助手中的每个&lt;a href=&quot;https://guides.emberjs.com/v2.12.0/templates/writing-helpers/#toc_helper-arguments&quot;&gt;参数&lt;/a&gt;都将添加到数组中并传递给我们的助手。例如， &lt;code&gt;{{my-helper &quot;foo&quot; &quot;bar&quot;}}&lt;/code&gt; 将导致 &lt;code&gt;myHelper([&quot;foo&quot;, &quot;bar&quot;])&lt;/code&gt; 。使用数组&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment&quot;&gt;ES2015解构&lt;/a&gt;分配，我们可以在数组中命名期望的参数。在上面的示例中，模板中的第一个参数将分配给 &lt;code&gt;propertyType&lt;/code&gt; 。这为您的助手提供了一个灵活，富有表现力的界面，包括可选参数和默认值。</target>
        </trans-unit>
        <trans-unit id="c58b746b3729165f51855597cf42f4febcc63b59" translate="yes" xml:space="preserve">
          <source>Each Ember app has one and only one &lt;code&gt;Application&lt;/code&gt; object. Although Ember CLI creates this object implicitly, the &lt;code&gt;Application&lt;/code&gt; class is defined in the &lt;code&gt;app/app.js&lt;/code&gt;. You can define a &lt;code&gt;ready&lt;/code&gt; method on the &lt;code&gt;Application&lt;/code&gt; class, which will be run by Ember when the application is initialized.</source>
          <target state="translated">每个Ember应用程序只有一个 &lt;code&gt;Application&lt;/code&gt; 对象。尽管Ember CLI隐式创建此对象，但 &lt;code&gt;Application&lt;/code&gt; 类是在 &lt;code&gt;app/app.js&lt;/code&gt; 中定义的。您可以在 &lt;code&gt;Application&lt;/code&gt; 类上定义一个 &lt;code&gt;ready&lt;/code&gt; 方法，该方法将在初始化应用程序时由Ember运行。</target>
        </trans-unit>
        <trans-unit id="f56ff188f7caee2b686bff16d490623a9d2fa38f" translate="yes" xml:space="preserve">
          <source>Each Ember app has one and only one &lt;code&gt;Ember.Application&lt;/code&gt; object. In fact, the very first thing you should do in your application is create the instance:</source>
          <target state="translated">每个Ember应用程序只有一个 &lt;code&gt;Ember.Application&lt;/code&gt; 对象。实际上，您应该在应用程序中要做的第一件事就是创建实例：</target>
        </trans-unit>
        <trans-unit id="033c437e29e38e5d372b3eb9aa152fdc2a475c1a" translate="yes" xml:space="preserve">
          <source>Each component, under the hood, is backed by an element. By default Ember will use a &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; element to contain your component's template. To learn how to change the element Ember uses for your component, see &lt;a href=&quot;../customizing-a-components-element&quot;&gt;Customizing a Component's Element&lt;/a&gt;.</source>
          <target state="translated">引擎盖下的每个组件都有一个元素支持。默认情况下，Ember将使用 &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; 元素包含组件的模板。要了解如何更改Ember用于&lt;a href=&quot;../customizing-a-components-element&quot;&gt;组件的元素&lt;/a&gt;，请参见自定义组件的Element。</target>
        </trans-unit>
        <trans-unit id="b5a353aee12771501e4424892e3b968dddb73274" translate="yes" xml:space="preserve">
          <source>Each engine manages a registry that's used for dependency injection and exposed through &lt;code&gt;RegistryProxy&lt;/code&gt;.</source>
          <target state="translated">每个引擎管理一个注册表，该注册表用于依赖项注入，并通过 &lt;code&gt;RegistryProxy&lt;/code&gt; 公开。</target>
        </trans-unit>
        <trans-unit id="0e06e260a7e8c0e93cb49653218545f4b3cad340" translate="yes" xml:space="preserve">
          <source>Each location implementation must provide the following methods:</source>
          <target state="translated">每个位置实现必须提供以下方法:</target>
        </trans-unit>
        <trans-unit id="8c18dd65bf8d9a9df3fa9a276baf08bc0ec6250a" translate="yes" xml:space="preserve">
          <source>Each of the following assumes a transition from the application or index route.</source>
          <target state="translated">以下各项均以从申请途径或索引途径过渡为前提。</target>
        </trans-unit>
        <trans-unit id="b07cd6ff8b89c639fc35cf9911b45132d407d245" translate="yes" xml:space="preserve">
          <source>Each of these request types has a matching store method that triggers it and matching &lt;code&gt;requestType&lt;/code&gt; that is passed to the serializer's &lt;code&gt;normalizeResponse&lt;/code&gt; method.</source>
          <target state="translated">这些请求类型中的每一个都有一个触发它的匹配存储方法，以及一个传递给序列化程序的 &lt;code&gt;normalizeResponse&lt;/code&gt; 方法的匹配 &lt;code&gt;requestType&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="a023fe0e42ca9362aaf069c5a5e6be84fdb35ce0" translate="yes" xml:space="preserve">
          <source>Each page (what is rendered for a unique URL) should have a page title. This page title should be unique to that page, and should accurately reflect what that page does.</source>
          <target state="translated">每一个页面(为唯一的URL所呈现的)都应该有一个页面标题。这个页面标题对该页面来说应该是唯一的,并且应该准确地反映出该页面的功能。</target>
        </trans-unit>
        <trans-unit id="00d66c69d805a73f324e1fbc71aa128a9f8741b9" translate="yes" xml:space="preserve">
          <source>Each property value in this view is bound to your application, so if the value of a property updates in your app, it will be reflected in the Inspector.</source>
          <target state="translated">该视图中的每个属性值都与您的应用程序绑定,因此如果属性值在您的应用程序中更新,它将反映在检查器中。</target>
        </trans-unit>
        <trans-unit id="759c34271e2fef13ae5896631631a78302162630" translate="yes" xml:space="preserve">
          <source>Each record can have a color that represents its state.</source>
          <target state="translated">每条记录都可以有一种代表其状态的颜色。</target>
        </trans-unit>
        <trans-unit id="8aba78f6eb4d086100577d336fc6b0d447c385af" translate="yes" xml:space="preserve">
          <source>Each record has a &lt;code&gt;currentState&lt;/code&gt; property that explicitly tracks what state a record is in at any given time. For instance, if a record is newly created and has not yet been sent to the adapter to be saved, it would be in the &lt;code&gt;root.loaded.created.uncommitted&lt;/code&gt; state. If a record has had local modifications made to it that are in the process of being saved, the record would be in the &lt;code&gt;root.loaded.updated.inFlight&lt;/code&gt; state. (This state paths will be explained in more detail below.)</source>
          <target state="translated">每个记录都有一个 &lt;code&gt;currentState&lt;/code&gt; 属性，该属性显式跟踪记录在任何给定时间所处的状态。例如，如果一条记录是新创建的，但尚未发送到适配器进行保存，则该记录将处于 &lt;code&gt;root.loaded.created.uncommitted&lt;/code&gt; 状态。如果对记录进行的本地修改正在保存中，则该记录将处于 &lt;code&gt;root.loaded.updated.inFlight&lt;/code&gt; 状态。 （此状态路径将在下面进行详细说明。）</target>
        </trans-unit>
        <trans-unit id="c13e0c519c5b08297794d41e486e9636bdef617a" translate="yes" xml:space="preserve">
          <source>Each route handler has a set of &quot;lifecycle hooks&quot;, which are functions that are invoked at specific times during the loading of a page. The &lt;a href=&quot;http://emberjs.com/api/classes/Ember.Route.html#method_beforeModel&quot;&gt;&lt;code&gt;beforeModel&lt;/code&gt;&lt;/a&gt; hook gets executed before the data gets fetched from the model hook, and before the page is rendered. See &lt;a href=&quot;../model-hook&quot;&gt;the next section&lt;/a&gt; for an explanation of the model hook.</source>
          <target state="translated">每个路由处理程序都有一组&amp;ldquo;生命周期挂钩&amp;rdquo;，这是在页面加载期间的特定时间调用的函数。在从模型挂钩中获取数据之前和呈现页面之前，将执行&lt;a href=&quot;http://emberjs.com/api/classes/Ember.Route.html#method_beforeModel&quot;&gt; &lt;code&gt;beforeModel&lt;/code&gt; &lt;/a&gt;挂钩。有关模型挂钩的说明，请参见&lt;a href=&quot;../model-hook&quot;&gt;下一节&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="5d85f1fbb60cb37388257018027133817ca91cd2" translate="yes" xml:space="preserve">
          <source>Each row in the list corresponds to one record. The first four model attributes are shown in the list view. Clicking on the record will open the Object Inspector for that record, and display all attributes.</source>
          <target state="translated">列表中的每一行对应一条记录。前四个模型属性显示在列表视图中。单击记录将打开该记录的对象检查器,并显示所有属性。</target>
        </trans-unit>
        <trans-unit id="d5e5e449eeef320506ec3771e9f271a83007060e" translate="yes" xml:space="preserve">
          <source>Each serializer will expect the metadata to be returned differently. For example, Ember Data's JSON deserializer looks for a &lt;code&gt;meta&lt;/code&gt; key:</source>
          <target state="translated">每个序列化程序都希望元数据以不同的方式返回。例如，Ember Data的JSON解串器将查找 &lt;code&gt;meta&lt;/code&gt; 密钥：</target>
        </trans-unit>
        <trans-unit id="20cde28b0d95b1da213848951445e3d39dd625fe" translate="yes" xml:space="preserve">
          <source>Each state object will either indicate fulfillment or rejection, and provide the corresponding value or reason. The states will take one of the following formats:</source>
          <target state="translated">每个状态对象将表示满足或拒绝,并提供相应的值或理由。状态将采取以下格式之一。</target>
        </trans-unit>
        <trans-unit id="083cf6c7a78303527be839ae339327069559775c" translate="yes" xml:space="preserve">
          <source>Each template will be rendered into the &lt;code&gt;{{outlet}}&lt;/code&gt; of its parent route's template. For example, the &lt;code&gt;posts.new&lt;/code&gt; route will render its template into the &lt;code&gt;posts.hbs&lt;/code&gt;'s &lt;code&gt;{{outlet}}&lt;/code&gt;, and the &lt;code&gt;posts&lt;/code&gt; route will render its template into the &lt;code&gt;application.hbs&lt;/code&gt;'s &lt;code&gt;{{outlet}}&lt;/code&gt;.</source>
          <target state="translated">每个模板都会渲染到其父路线模板的 &lt;code&gt;{{outlet}}&lt;/code&gt; 中。例如， &lt;code&gt;posts.new&lt;/code&gt; 路由会将其模板呈现到 &lt;code&gt;posts.hbs&lt;/code&gt; 的 &lt;code&gt;{{outlet}}&lt;/code&gt; 中，而 &lt;code&gt;posts&lt;/code&gt; 路由会将其模板呈现到 &lt;code&gt;application.hbs&lt;/code&gt; 的 &lt;code&gt;{{outlet}}&lt;/code&gt; 中。</target>
        </trans-unit>
        <trans-unit id="a2f8170a7a2ce90e4c83aa49476195d9b27d8b72" translate="yes" xml:space="preserve">
          <source>Each test can use the &lt;code&gt;render()&lt;/code&gt; function imported from the &lt;code&gt;@ember/test-helpers&lt;/code&gt; package to create a new instance of the component by declaring the component in template syntax, as we would in our application. Also notice, the keyword &lt;code&gt;await&lt;/code&gt; in front of the call to &lt;code&gt;render&lt;/code&gt;. It allows the test which we marked as &lt;code&gt;async&lt;/code&gt; earlier to wait for any asynchronous behavior to complete before executing the rest of the code below. In this case our first assertion will correctly execute after the component has fully rendered.</source>
          <target state="translated">每个测试都可以使用从 &lt;code&gt;@ember/test-helpers&lt;/code&gt; 包导入的 &lt;code&gt;render()&lt;/code&gt; 函数，通过在模板语法中声明组件来创建该组件的新实例，就像在应用程序中一样。还要注意，关键字在调用 &lt;code&gt;render&lt;/code&gt; 之前 &lt;code&gt;await&lt;/code&gt; 。它允许我们在执行下面的其余代码之前，将我们先前标记为 &lt;code&gt;async&lt;/code&gt; 的测试等待任何异步行为完成。在这种情况下，我们的第一个断言将在组件完全渲染后正确执行。</target>
        </trans-unit>
        <trans-unit id="ff937fa50699f308ad42f2e23f14f2faf77a6f60" translate="yes" xml:space="preserve">
          <source>Each test following the &lt;code&gt;moduleForComponent&lt;/code&gt; call has access to the &lt;code&gt;render()&lt;/code&gt; function, which lets us create a new instance of the component by declaring the component in template syntax, as we would in our application.</source>
          <target state="translated">调用 &lt;code&gt;moduleForComponent&lt;/code&gt; 之后的每个测试都可以访问 &lt;code&gt;render()&lt;/code&gt; 函数，该函数使我们可以通过在模板语法中声明该组件来创建该组件的新实例，就像在应用程序中一样。</target>
        </trans-unit>
        <trans-unit id="2bf2e46fb2b6784fb150c95293e0cb9ae0ca9815" translate="yes" xml:space="preserve">
          <source>Each time the input to a helper changes, the &lt;code&gt;compute&lt;/code&gt; function will be called again.</source>
          <target state="translated">每次对助手的输入更改时，都会再次调用 &lt;code&gt;compute&lt;/code&gt; 功能。</target>
        </trans-unit>
        <trans-unit id="220b8b9ce4e2c3a1599a9627f969adf83b70c872" translate="yes" xml:space="preserve">
          <source>Each time this method is called a new request is made through the adapter.</source>
          <target state="translated">每次调用这个方法时,都会通过适配器发出一个新的请求。</target>
        </trans-unit>
        <trans-unit id="3cfff4621814cfd59ad9c7149a02f4a6445f6404" translate="yes" xml:space="preserve">
          <source>Edge &amp;amp; Narrator (Windows)</source>
          <target state="translated">边缘和讲述人（Windows）</target>
        </trans-unit>
        <trans-unit id="b82013db14431d44c65603435eedcb8a2a4a4e3f" translate="yes" xml:space="preserve">
          <source>Edit the property and press the &lt;code&gt;ENTER&lt;/code&gt; key to commit the change, or &lt;code&gt;ESC&lt;/code&gt; to cancel.</source>
          <target state="translated">编辑属性，然后按 &lt;code&gt;ENTER&lt;/code&gt; 键提交更改，或按 &lt;code&gt;ESC&lt;/code&gt; 取消。</target>
        </trans-unit>
        <trans-unit id="50474c08262226a9c64678f96f2ed28f2314d9f4" translate="yes" xml:space="preserve">
          <source>Editing Properties</source>
          <target state="translated">编辑属性</target>
        </trans-unit>
        <trans-unit id="4b658c897b4be35f7b2c7498757a1a48eeee946f" translate="yes" xml:space="preserve">
          <source>Embedded records must have a model defined to be extracted and serialized. Note that when defining any relationships on your model such as &lt;code&gt;belongsTo&lt;/code&gt; and &lt;code&gt;hasMany&lt;/code&gt;, you should not both specify &lt;code&gt;async: true&lt;/code&gt; and also indicate through the serializer's &lt;code&gt;attrs&lt;/code&gt; attribute that the related model should be embedded for deserialization. If a model is declared embedded for deserialization (&lt;code&gt;embedded: 'always'&lt;/code&gt; or &lt;code&gt;deserialize: 'records'&lt;/code&gt;), then do not use &lt;code&gt;async: true&lt;/code&gt;.</source>
          <target state="translated">嵌入式记录必须具有定义为要提取和序列化的模型。请注意，在定义模型上的任何关系（例如 &lt;code&gt;belongsTo&lt;/code&gt; 和 &lt;code&gt;hasMany&lt;/code&gt; )时，不应同时指定 &lt;code&gt;async: true&lt;/code&gt; ，也不要通过序列化器的 &lt;code&gt;attrs&lt;/code&gt; 属性指示应嵌入相关模型以进行反序列化。如果声明模型为反序列化 &lt;code&gt;embedded: 'always'&lt;/code&gt; （嵌入式：'always'或 &lt;code&gt;deserialize: 'records'&lt;/code&gt; ），则不要使用 &lt;code&gt;async: true&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="339a978328c271ff976040600e410d31ff32e45a" translate="yes" xml:space="preserve">
          <source>EmbeddedRecordMixin</source>
          <target state="translated">EmbeddedRecordMixin</target>
        </trans-unit>
        <trans-unit id="7a1d859f04edca42c0e174f4853d1aa7b064a095" translate="yes" xml:space="preserve">
          <source>EmbeddedRecordsMixin</source>
          <target state="translated">EmbeddedRecordsMixin</target>
        </trans-unit>
        <trans-unit id="a2be45d0e043c48791a7a6924c1ae6b4db394aa2" translate="yes" xml:space="preserve">
          <source>EmbeddedRecordsMixin Defaults</source>
          <target state="translated">EmbeddedRecordsMixin 默认值</target>
        </trans-unit>
        <trans-unit id="729e6fb7a86f981f6c297834cc8d02b77b0d20ee" translate="yes" xml:space="preserve">
          <source>EmbeddedRecordsMixin defaults</source>
          <target state="translated">EmbeddedRecordsMixin默认值</target>
        </trans-unit>
        <trans-unit id="098ed2cbcee2dc05730821a0483be90e49bb1702" translate="yes" xml:space="preserve">
          <source>Embedding Applications</source>
          <target state="translated">嵌入应用</target>
        </trans-unit>
        <trans-unit id="20632bc30721b7b1111cc82ebfe4420e4ad7d5d8" translate="yes" xml:space="preserve">
          <source>Ember</source>
          <target state="translated">Ember</target>
        </trans-unit>
        <trans-unit id="e0e225914df148e2621c407cb53bc95d5d509278" translate="yes" xml:space="preserve">
          <source>Ember  (public)</source>
          <target state="translated">微光(公共)</target>
        </trans-unit>
        <trans-unit id="b4c1c434f8631f9ebd128dbea8736a620e6915d8" translate="yes" xml:space="preserve">
          <source>Ember Addons can be installed using &lt;a href=&quot;http://ember-cli.com/extending/#developing-addons-and-blueprints&quot;&gt;Ember CLI&lt;/a&gt; (e.g. &lt;code&gt;ember install ember-cli-sass&lt;/code&gt;). Addons may bring in other dependencies by modifying your project's &lt;code&gt;bower.json&lt;/code&gt; file automatically.</source>
          <target state="translated">可以使用&lt;a href=&quot;http://ember-cli.com/extending/#developing-addons-and-blueprints&quot;&gt;Ember CLI&lt;/a&gt;安装Ember插件（例如 &lt;code&gt;ember install ember-cli-sass&lt;/code&gt; ）。插件可以通过自动修改项目的 &lt;code&gt;bower.json&lt;/code&gt; 文件来引入其他依赖项。</target>
        </trans-unit>
        <trans-unit id="e4fe3a2069e00ad90dedcfb81a8c89c729aedd66" translate="yes" xml:space="preserve">
          <source>Ember Application Not Detected</source>
          <target state="translated">未检测到微光应用</target>
        </trans-unit>
        <trans-unit id="db92c2d2268a30e9c3a8b78abd8f219f5f741c12" translate="yes" xml:space="preserve">
          <source>Ember CLI</source>
          <target state="translated">安珀CLI</target>
        </trans-unit>
        <trans-unit id="24352b6e05fb4d09bc37637f93c07f6b16a54cae" translate="yes" xml:space="preserve">
          <source>Ember CLI Deprecation Sources</source>
          <target state="translated">Ember CLI 弃用源</target>
        </trans-unit>
        <trans-unit id="280d223be0a9b8563f26872d4ba5c9fc491032b7" translate="yes" xml:space="preserve">
          <source>Ember CLI Mirage</source>
          <target state="translated">Ember CLI Mirage</target>
        </trans-unit>
        <trans-unit id="987d87440fae5bcbd1d94cf666c1eaced82ea01e" translate="yes" xml:space="preserve">
          <source>Ember CLI by default uses &lt;a href=&quot;https://babeljs.io/&quot;&gt;Babel.js&lt;/a&gt; to allow you to use tomorrow's JavaScript, today.</source>
          <target state="translated">默认情况下，Ember CLI使用&lt;a href=&quot;https://babeljs.io/&quot;&gt;Babel.js&lt;/a&gt;允许您今天使用明天的JavaScript。</target>
        </trans-unit>
        <trans-unit id="e3a15b98c62725eb23dc59ff5893b75c1051dfa3" translate="yes" xml:space="preserve">
          <source>Ember CLI is built with JavaScript, and requires the most recent LTS version of the &lt;a href=&quot;https://nodejs.org/&quot;&gt;Node.js&lt;/a&gt; runtime. It also requires dependencies fetched via &lt;a href=&quot;https://www.npmjs.com/&quot;&gt;npm&lt;/a&gt;. npm is packaged with Node.js, so if your computer has Node.js installed you are ready to go.</source>
          <target state="translated">Ember CLI是使用JavaScript构建的，并且需要&lt;a href=&quot;https://nodejs.org/&quot;&gt;Node.js&lt;/a&gt;运行时的最新LTS版本。它还需要通过&lt;a href=&quot;https://www.npmjs.com/&quot;&gt;npm&lt;/a&gt;获取的依赖项。npm与Node.js打包在一起，因此，如果您的计算机安装了Node.js，则可以开始使用。</target>
        </trans-unit>
        <trans-unit id="d6424bb074fd2488550f852458621b78e95bc292" translate="yes" xml:space="preserve">
          <source>Ember CLI provides a common format called &lt;a href=&quot;#toc_addons&quot;&gt;Ember Addons&lt;/a&gt; for distributing reusable libraries to solve some of these problems. Additionally, you may want to make use of front-end dependencies like a CSS framework or a JavaScript datepicker that aren't specific to Ember apps.</source>
          <target state="translated">Ember CLI提供了一种称为&lt;a href=&quot;#toc_addons&quot;&gt;Ember Addons&lt;/a&gt;的通用格式，用于分发可重用的库来解决其中的一些问题。此外，您可能想利用不是Ember应用特定的前端依赖项，例如CSS框架或JavaScript datepicker。</target>
        </trans-unit>
        <trans-unit id="a96fc88c2e9941ab2f43cf2f63849d82712a4d7c" translate="yes" xml:space="preserve">
          <source>Ember CLI ships with support for managing your application's environment. Ember CLI will setup a default environment config file at &lt;code&gt;config/environment&lt;/code&gt;. Here, you can define an &lt;code&gt;ENV&lt;/code&gt; object for each environment, which are currently limited to three: development, test, and production.</source>
          <target state="translated">Ember CLI附带了用于管理应用程序环境的支持。Ember CLI将在 &lt;code&gt;config/environment&lt;/code&gt; 设置默认的环境配置文件。在这里，您可以为每个环境定义一个 &lt;code&gt;ENV&lt;/code&gt; 对象，当前仅限于三个环境：开发，测试和生产。</target>
        </trans-unit>
        <trans-unit id="535d1e79da97e1fe02fddddd3f67e2e1e3a44849" translate="yes" xml:space="preserve">
          <source>Ember CLI specifically uses &lt;a href=&quot;https://babeljs.io/&quot;&gt;Babel&lt;/a&gt; via the &lt;a href=&quot;https://github.com/babel/ember-cli-babel&quot;&gt;ember-cli-babel&lt;/a&gt; plugin.</source>
          <target state="translated">Ember CLI 通过&lt;a href=&quot;https://github.com/babel/ember-cli-babel&quot;&gt;ember-cli-babel&lt;/a&gt;插件专门使用&lt;a href=&quot;https://babeljs.io/&quot;&gt;Babel&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="3fd65aa47d650537dd39f0a6299d2025af57bbc1" translate="yes" xml:space="preserve">
          <source>Ember CLI uses &lt;a href=&quot;https://babeljs.io/&quot;&gt;Babel.js&lt;/a&gt; for the compile step in this process. If you've used Babel before, you know that it comes with a large set of options, including the ability to configure &quot;targets&quot;; i.e. the environments in which your application is expected to run. For example, if your application is embedded in an &lt;a href=&quot;https://www.electronjs.org&quot;&gt;Electron app&lt;/a&gt;, you might only care about compiling for the latest Chromium build. Or if your app targets Enterprise users, you may need to compile your JavaScript to older syntax that runs in IE11.</source>
          <target state="translated">Ember CLI在此过程中使用&lt;a href=&quot;https://babeljs.io/&quot;&gt;Babel.js&lt;/a&gt;进行编译。如果您以前使用过Babel，那么您会知道它附带了很多选项，包括配置&amp;ldquo;目标&amp;rdquo;的功能。即，您的应用程序将在其中运行的环境。例如，如果您的应用程序嵌入在&lt;a href=&quot;https://www.electronjs.org&quot;&gt;Electron应用程序中&lt;/a&gt;，则您可能只关心编译最新的Chromium版本。或者，如果您的应用程序针对企业用户，则可能需要将JavaScript编译为在IE11中运行的旧语法。</target>
        </trans-unit>
        <trans-unit id="a96ac56333ee63bb91b4c01647cd5ae52b556f3a" translate="yes" xml:space="preserve">
          <source>Ember CLI uses ECMAScript 2015 (ES2015 for short or previously known as ES6) modules to organize application code. For example, the line &lt;code&gt;import Ember from 'ember';&lt;/code&gt; gives us access to the actual Ember.js library as the variable &lt;code&gt;Ember&lt;/code&gt;. And the &lt;code&gt;import config from
'./config/environment';&lt;/code&gt; line gives us access to our app's configuration data as the variable &lt;code&gt;config&lt;/code&gt;. &lt;code&gt;const&lt;/code&gt; is a way to declare a read-only variable to make sure it is not accidentally reassigned elsewhere. At the end of the file, &lt;code&gt;export default Router;&lt;/code&gt; makes the &lt;code&gt;Router&lt;/code&gt; variable defined in this file available to other parts of the app.</source>
          <target state="translated">Ember CLI使用ECMAScript 2015（简称ES2015，简称ES2015）模块来组织应用程序代码。例如，该行 &lt;code&gt;import Ember from 'ember';&lt;/code&gt; 使我们可以将实际Ember.js库作为变量 &lt;code&gt;Ember&lt;/code&gt; 进行访问。并且 &lt;code&gt;import config from './config/environment';&lt;/code&gt; 行允许我们访问应用程序的配置数据作为 &lt;code&gt;config&lt;/code&gt; 变量。 &lt;code&gt;const&lt;/code&gt; 是一种声明只读变量的方法，以确保它不会在其他地方意外分配。在文件末尾， &lt;code&gt;export default Router;&lt;/code&gt; 使此文件中定义的 &lt;code&gt;Router&lt;/code&gt; 变量可用于应用程序的其他部分。</target>
        </trans-unit>
        <trans-unit id="4000d99a0f20d578d0089d74ba4f813aef803e2d" translate="yes" xml:space="preserve">
          <source>Ember CLI will then generate a handful of files for our component:</source>
          <target state="translated">Ember CLI将为我们的组件生成一些文件。</target>
        </trans-unit>
        <trans-unit id="7b6f7d13f130ea17ca08d391048ba55f5ef53a38" translate="yes" xml:space="preserve">
          <source>Ember CLI, Ember's command line interface, provides a standard project structure, a set of development tools, and an addon system. This allows Ember developers to focus on building apps rather than building the support structures that make them run. From your command line, a quick &lt;code&gt;ember --help&lt;/code&gt; shows the commands Ember CLI provides. For more information on a specific command, type &lt;code&gt;ember help &amp;lt;command-name&amp;gt;&lt;/code&gt;.</source>
          <target state="translated">Ember CLI，Ember的命令行界面，提供了一个标准的项目结构，一套开发工具和一个插件系统。这使Ember开发人员可以专注于构建应用程序，而不是构建使它们运行的​​支持结构。在您的命令行中，快速的 &lt;code&gt;ember --help&lt;/code&gt; 显示了Ember CLI提供的命令。有关特定命令的更多信息，请键入 &lt;code&gt;ember help &amp;lt;command-name&amp;gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="d52449d4614ed3116d54d77f9d3cb483e2a52b2e" translate="yes" xml:space="preserve">
          <source>Ember Cli</source>
          <target state="translated">琥珀夹</target>
        </trans-unit>
        <trans-unit id="00257260921c6c28dbc6436c1ea9d22042f2db9c" translate="yes" xml:space="preserve">
          <source>Ember Data</source>
          <target state="translated">Ember数据</target>
        </trans-unit>
        <trans-unit id="4e9a2c3cff1552914144ba18793ba39c46905344" translate="yes" xml:space="preserve">
          <source>Ember Data &amp;gt; v1.0.0-beta.18 requires string model names to be passed around instead of the actual factories.</source>
          <target state="translated">Ember Data&amp;gt; v1.0.0-beta.18需要传递字符串模型名称，而不是实际的工厂。</target>
        </trans-unit>
        <trans-unit id="548671d1a64816c6553daa968ff734cd9e7bcef3" translate="yes" xml:space="preserve">
          <source>Ember Data 2.0 Serializer:</source>
          <target state="translated">Ember Data 2.0序列器。</target>
        </trans-unit>
        <trans-unit id="a5e86e0e08dfe6e3775b239cd87789a909a07698" translate="yes" xml:space="preserve">
          <source>Ember Data Models</source>
          <target state="translated">Ember数据模型</target>
        </trans-unit>
        <trans-unit id="c10789009896b0e19191b25d18c9012854061c18" translate="yes" xml:space="preserve">
          <source>Ember Data can have new JSON transforms registered for use as attributes:</source>
          <target state="translated">Ember Data可以注册新的JSON转换作为属性使用。</target>
        </trans-unit>
        <trans-unit id="3bbb2c9e9ad8249ca44a98977df16121949507d8" translate="yes" xml:space="preserve">
          <source>Ember Data comes with several built-in adapters. Feel free to use these adapters as a starting point for creating your own custom adapter.</source>
          <target state="translated">Ember Data有几个内置的适配器。您可以自由使用这些适配器作为创建您自己的自定义适配器的起点。</target>
        </trans-unit>
        <trans-unit id="6432969d75272b39cc0b54619eaedfc66b4311b4" translate="yes" xml:space="preserve">
          <source>Ember Data example</source>
          <target state="translated">琥珀数据示例</target>
        </trans-unit>
        <trans-unit id="6da63d3b19ea0d0a73e33aa7ba1ffeeadacd622b" translate="yes" xml:space="preserve">
          <source>Ember Data flexibility</source>
          <target state="translated">Ember数据的灵活性</target>
        </trans-unit>
        <trans-unit id="7cbd12b2dfd38ce2529ad951236c5c8df8d720a4" translate="yes" xml:space="preserve">
          <source>Ember Data includes several built-in relationship types to help you define how your models relate to each other.</source>
          <target state="translated">Ember Data包括几个内置的关系类型,以帮助您定义模型之间的关系。</target>
        </trans-unit>
        <trans-unit id="2dc4234690873f687b6484a6b981e1c0b9974af7" translate="yes" xml:space="preserve">
          <source>Ember Data injects the store service to every route and controller so that you can immediately write &lt;code&gt;this.store&lt;/code&gt;! If you want to access the store in a component or another service, you will need to &lt;a href=&quot;../services#toc_accessing-services&quot;&gt;inject&lt;/a&gt; the store service.</source>
          <target state="translated">Ember Data将存储服务注入到每个路由和控制器，以便您可以立即编写 &lt;code&gt;this.store&lt;/code&gt; ！如果要访问组件或其他服务中的商店，则需要&lt;a href=&quot;../services#toc_accessing-services&quot;&gt;注入&lt;/a&gt;商店服务。</target>
        </trans-unit>
        <trans-unit id="57437cc6d96dc785cb6ab2c4645b4c4a1a972dc6" translate="yes" xml:space="preserve">
          <source>Ember Data injects the store service to every route and controller so that you can immediately write &lt;code&gt;this.store&lt;/code&gt;! If you want to access the store in a component or another service, you will need to &lt;a href=&quot;https://guides.emberjs.com/services/#toc_accessing-services&quot;&gt;inject&lt;/a&gt; the store service.</source>
          <target state="translated">Ember Data将存储服务注入到每个路由和控制器，以便您可以立即编写 &lt;code&gt;this.store&lt;/code&gt; ！如果要访问组件或其他服务中的商店，则需要&lt;a href=&quot;https://guides.emberjs.com/services/#toc_accessing-services&quot;&gt;注入&lt;/a&gt;商店服务。</target>
        </trans-unit>
        <trans-unit id="a29a13f13eb2a39fe062e3da079a57eee020cea0" translate="yes" xml:space="preserve">
          <source>Ember Data is a powerful (but optional) library included by default in new Ember apps. In the next example, we will use Ember Data's &lt;a href=&quot;https://api.emberjs.com/ember-data/release/classes/Store/methods#findAll&quot;&gt;&lt;code&gt;findAll&lt;/code&gt;&lt;/a&gt; method, which returns a Promise, and resolves with an array of &lt;a href=&quot;https://guides.emberjs.com/models/&quot;&gt;Ember Data records&lt;/a&gt;.</source>
          <target state="translated">Ember Data是一个功能强大（但可选）的库，默认情况下包含在新的Ember应用程序中。在下一个示例中，我们将使用Ember Data的&lt;a href=&quot;https://api.emberjs.com/ember-data/release/classes/Store/methods#findAll&quot;&gt; &lt;code&gt;findAll&lt;/code&gt; &lt;/a&gt;方法，该方法返回Promise，并使用&lt;a href=&quot;https://guides.emberjs.com/models/&quot;&gt;Ember Data记录&lt;/a&gt;数组进行解析。</target>
        </trans-unit>
        <trans-unit id="7dfbf0d89d028d99cb4c6b0f31864766e1cae045" translate="yes" xml:space="preserve">
          <source>Ember Data is also designed to work with streaming servers, like those powered by WebSockets. You can open a socket to your server and push changes into Ember Data whenever they occur, giving your app a real-time user interface that is always up-to-date.</source>
          <target state="translated">Ember Data也被设计为与流媒体服务器一起工作,比如那些由WebSockets支持的服务器。您可以打开一个套接字到您的服务器,并随时将变化推送到Ember Data中,让您的应用程序的用户界面总是最新的。</target>
        </trans-unit>
        <trans-unit id="378dab7b3d1e8311b08f829c04619f292d9b4e7d" translate="yes" xml:space="preserve">
          <source>Ember Data is going to normalize the payload's root key for the modelName. As a result, it will try to look up the &quot;blog/post&quot; model. Since we don't have a model called &quot;blog/post&quot; (or a file called app/models/blog/post.js in ember-cli), Ember Data will throw an error because it cannot find the &quot;blog/post&quot; model.</source>
          <target state="translated">Ember Data将对payload的根键进行标准化,以获得modelName。因此,它将尝试查找 &quot;blog/post &quot;模型。由于我们没有名为 &quot;blog/post &quot;的模型(或者在ember-cli中名为app/models/blog/post.js的文件),Ember Data将抛出一个错误,因为它找不到 &quot;blog/post &quot;模型。</target>
        </trans-unit>
        <trans-unit id="69202064217e142f0e79549d53c764f0488b0e29" translate="yes" xml:space="preserve">
          <source>Ember Data models are normally setup using the singular form (which is why we use `person` instead of `people` here)</source>
          <target state="translated">Ember数据模型的设置通常使用单数形式(这就是为什么我们在这里使用 &quot;person &quot;而不是 &quot;people&quot;)。</target>
        </trans-unit>
        <trans-unit id="b03b899fc2017f3647ab2c317090ea7399a28008" translate="yes" xml:space="preserve">
          <source>Ember Data provides the ability to query for records that meet certain criteria. Calling &lt;a href=&quot;http://emberjs.com/api/data/classes/DS.Store.html#method_query&quot;&gt;&lt;code&gt;store.query()&lt;/code&gt;&lt;/a&gt; will make a &lt;code&gt;GET&lt;/code&gt; request with the passed object serialized as query params. This method returns a &lt;code&gt;DS.PromiseArray&lt;/code&gt; in the same way as &lt;code&gt;findAll&lt;/code&gt;.</source>
          <target state="translated">灰烬数据提供了查询满足某些条件的记录的功能。调用&lt;a href=&quot;http://emberjs.com/api/data/classes/DS.Store.html#method_query&quot;&gt; &lt;code&gt;store.query()&lt;/code&gt; &lt;/a&gt;将发出 &lt;code&gt;GET&lt;/code&gt; 请求，并将传递的对象序列化为查询参数。此方法以与 &lt;code&gt;findAll&lt;/code&gt; 相同的方式返回 &lt;code&gt;DS.PromiseArray&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="fda62bfbd783741eba968fe2ceec3c8f0306e115" translate="yes" xml:space="preserve">
          <source>Ember Data provides the ability to query for records that meet certain criteria. Calling &lt;a href=&quot;https://api.emberjs.com/ember-data/release/classes/Store/methods#query&quot;&gt;&lt;code&gt;store.query()&lt;/code&gt;&lt;/a&gt; will make a &lt;code&gt;GET&lt;/code&gt; request with the passed object serialized as query params. This method returns a &lt;code&gt;PromiseArray&lt;/code&gt; in the same way as &lt;code&gt;findAll&lt;/code&gt;.</source>
          <target state="translated">灰烬数据提供了查询满足某些条件的记录的功能。调用&lt;a href=&quot;https://api.emberjs.com/ember-data/release/classes/Store/methods#query&quot;&gt; &lt;code&gt;store.query()&lt;/code&gt; &lt;/a&gt;将发出 &lt;code&gt;GET&lt;/code&gt; 请求，并将传递的对象序列化为查询参数。此方法以与 &lt;code&gt;findAll&lt;/code&gt; 相同的方式返回 &lt;code&gt;PromiseArray&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="9036aba2e5e2938a579e470c7a6cd1598da401bb" translate="yes" xml:space="preserve">
          <source>Ember Data requires you to define the structure of the data you wish to provide to your application by extending &lt;a href=&quot;http://emberjs.com/api/data/classes/DS.Model.html&quot;&gt;&lt;code&gt;DS.Model&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">Ember Data要求您通过扩展&lt;a href=&quot;http://emberjs.com/api/data/classes/DS.Model.html&quot;&gt; &lt;code&gt;DS.Model&lt;/code&gt; &lt;/a&gt;来定义要提供给应用程序的数据的结构。</target>
        </trans-unit>
        <trans-unit id="8e4bb2004e6d085ea51f95bbee65153e6b18f521" translate="yes" xml:space="preserve">
          <source>Ember Data resolves sync relationships with the related resources available in its local store, hence it is expected these resources to be loaded before or along-side the primary resource.</source>
          <target state="translated">Ember Data与本地存储中可用的相关资源解析同步关系,因此希望这些资源在主资源之前或旁边加载。</target>
        </trans-unit>
        <trans-unit id="521c75005de415a946915e85375757d992054245" translate="yes" xml:space="preserve">
          <source>Ember Data ships with 3 serializers. The &lt;a href=&quot;http://emberjs.com/api/data/classes/DS.JSONAPISerializer.html&quot;&gt;&lt;code&gt;JSONAPISerializer&lt;/code&gt;&lt;/a&gt; is the default serializer and works with JSON API backends. The &lt;a href=&quot;http://emberjs.com/api/data/classes/DS.JSONSerializer.html&quot;&gt;&lt;code&gt;JSONSerializer&lt;/code&gt;&lt;/a&gt; is a simple serializer for working with single json object or arrays of records. The &lt;a href=&quot;http://emberjs.com/api/data/classes/DS.RESTSerializer.html&quot;&gt;&lt;code&gt;RESTSerializer&lt;/code&gt;&lt;/a&gt; is a more complex serializer that supports sideloading and was the default serializer before 2.0.</source>
          <target state="translated">Ember Data附带3个序列化器。该&lt;a href=&quot;http://emberjs.com/api/data/classes/DS.JSONAPISerializer.html&quot;&gt; &lt;code&gt;JSONAPISerializer&lt;/code&gt; &lt;/a&gt;是默认的序列，并与JSON API后端工作。该&lt;a href=&quot;http://emberjs.com/api/data/classes/DS.JSONSerializer.html&quot;&gt; &lt;code&gt;JSONSerializer&lt;/code&gt; &lt;/a&gt;是用于与单个JSON对象或记录阵列的工作的简单串行器。所述&lt;a href=&quot;http://emberjs.com/api/data/classes/DS.RESTSerializer.html&quot;&gt; &lt;code&gt;RESTSerializer&lt;/code&gt; &lt;/a&gt;是一个更复杂的串行化器，支持侧面加载和为2.0之前的默认序列化器。</target>
        </trans-unit>
        <trans-unit id="8b880e30dec8f9fb4fdb1433cb3a815c767cef51" translate="yes" xml:space="preserve">
          <source>Ember Data ships with 3 serializers. The &lt;a href=&quot;https://api.emberjs.com/ember-data/release/classes/JSONAPISerializer&quot;&gt;&lt;code&gt;JSONAPISerializer&lt;/code&gt;&lt;/a&gt; is the default serializer and works with JSON:API backends. The &lt;a href=&quot;https://api.emberjs.com/ember-data/release/classes/JSONSerializer&quot;&gt;&lt;code&gt;JSONSerializer&lt;/code&gt;&lt;/a&gt; is a simple serializer for working with single JSON object or arrays of records. The &lt;a href=&quot;https://api.emberjs.com/ember-data/release/classes/RESTSerializer&quot;&gt;&lt;code&gt;RESTSerializer&lt;/code&gt;&lt;/a&gt; is a more complex serializer that supports sideloading and was the default serializer before 2.0.</source>
          <target state="translated">Ember Data附带3个序列化器。该&lt;a href=&quot;https://api.emberjs.com/ember-data/release/classes/JSONAPISerializer&quot;&gt; &lt;code&gt;JSONAPISerializer&lt;/code&gt; &lt;/a&gt;是默认的序列，并与JSON工作：API后端。该&lt;a href=&quot;https://api.emberjs.com/ember-data/release/classes/JSONSerializer&quot;&gt; &lt;code&gt;JSONSerializer&lt;/code&gt; &lt;/a&gt;是用于与单个JSON对象或记录阵列的工作的简单串行器。所述&lt;a href=&quot;https://api.emberjs.com/ember-data/release/classes/RESTSerializer&quot;&gt; &lt;code&gt;RESTSerializer&lt;/code&gt; &lt;/a&gt;是一个更复杂的串行化器，支持侧面加载和为2.0之前的默认序列化器。</target>
        </trans-unit>
        <trans-unit id="4de8d325e6b47599bdd4e40288b0880ceeccb103" translate="yes" xml:space="preserve">
          <source>Ember Data takes care of tracking the state of each record for you. This allows Ember Data to treat newly created records differently from existing records when saving.</source>
          <target state="translated">Ember Data会帮您跟踪每条记录的状态。这使得Ember Data在保存时,新创建的记录与现有记录的处理方式不同。</target>
        </trans-unit>
        <trans-unit id="9c1900a0f2e88f9c6f2a2ade35975c57aa78e41d" translate="yes" xml:space="preserve">
          <source>Ember Data uses the &lt;code&gt;JSONAPISerializer&lt;/code&gt; by default, but you can override this default by defining a custom serializer. There are two ways to define a custom serializer. First, you can define a custom serializer for your entire application by defining an &quot;application&quot; serializer.</source>
          <target state="translated">Ember Data 默认情况下使用 &lt;code&gt;JSONAPISerializer&lt;/code&gt; ，但是您可以通过定义自定义序列化程序来覆盖此默认值。定义自定义序列化器有两种方法。首先，可以通过定义&amp;ldquo;应用程序&amp;rdquo;序列化程序为整个应用程序定义自定义序列化程序。</target>
        </trans-unit>
        <trans-unit id="82ddded3cee9ab35d5edfe92a4ae2c35d504e2d4" translate="yes" xml:space="preserve">
          <source>Ember Data will do its best to discover which relationships map to one another. In the one-to-many code above, for example, Ember Data can figure out that changing the &lt;code&gt;comments&lt;/code&gt; relationship should update the &lt;code&gt;blogPost&lt;/code&gt; relationship on the inverse because &lt;code&gt;blogPost&lt;/code&gt; is the only relationship to that model.</source>
          <target state="translated">Ember Data将尽力发现哪些关系相互映射。例如，在上面的一对多代码中，Ember Data可以发现更改 &lt;code&gt;comments&lt;/code&gt; 关系应该 &lt;code&gt;blogPost&lt;/code&gt; 更新blogPost关系，因为 &lt;code&gt;blogPost&lt;/code&gt; 是与该模型的唯一关系。</target>
        </trans-unit>
        <trans-unit id="a4df05730ff3cf9f514c15ee02f7a92cf46f2961" translate="yes" xml:space="preserve">
          <source>Ember Data will do its best to discover which relationships map to one another. In the one-to-many code above, for example, Ember Data can figure out that changing the &lt;code&gt;comments&lt;/code&gt; relationship should update the &lt;code&gt;post&lt;/code&gt; relationship on the inverse because post is the only relationship to that model.</source>
          <target state="translated">Ember Data将尽力发现哪些关系相互映射。例如，在上面的一对多代码中，Ember Data可以发现更改 &lt;code&gt;comments&lt;/code&gt; 关系应该更新相反的 &lt;code&gt;post&lt;/code&gt; 关系，因为post是该模型的唯一关系。</target>
        </trans-unit>
        <trans-unit id="c4dfe208eee93114760af51ca7100c90085b9194" translate="yes" xml:space="preserve">
          <source>Ember Data will query the server for the appropriate records and re-render the template once the data is received.</source>
          <target state="translated">Ember Data会在收到数据后,查询服务器上的相应记录并重新渲染模板。</target>
        </trans-unit>
        <trans-unit id="f3f3ae2f204b23ff82b2db2b4edf61d044dfa91a" translate="yes" xml:space="preserve">
          <source>Ember Data's Normalized JSON Format</source>
          <target state="translated">安贝数据的规范化JSON格式。</target>
        </trans-unit>
        <trans-unit id="fd91b1dd0436e6e932c6673481b8c4558fb8203e" translate="yes" xml:space="preserve">
          <source>Ember Data's default Adapter has some built-in assumptions about how a &lt;a href=&quot;http://jsonapi.org/&quot;&gt;REST API should look&lt;/a&gt;. If your backend conventions differ from those assumptions, Ember Data allows either slight adjustments or you can switch to a different adapter if your backend works noticeably differently.</source>
          <target state="translated">Ember Data的默认适配器具有一些关于&lt;a href=&quot;http://jsonapi.org/&quot;&gt;REST API外观的&lt;/a&gt;内置假设。如果您的后端约定与那些假设不同，则Ember Data可以进行一些微调，或者如果后端的工作原理明显不同，则可以切换到其他适配器。</target>
        </trans-unit>
        <trans-unit id="deff1c6c2b88f967053ae278d28df44af0c103e0" translate="yes" xml:space="preserve">
          <source>Ember Data, included by default when you create a new application, is a library that integrates tightly with Ember to make it easy to retrieve models from your server as JSON, save updates back to the server, and create new models in the browser.</source>
          <target state="translated">当您创建一个新的应用程序时,Ember Data默认包含在内,它是一个与Ember紧密集成的库,可以很容易地从服务器上以JSON格式检索模型,将更新保存到服务器,并在浏览器中创建新的模型。</target>
        </trans-unit>
        <trans-unit id="6c2f7e6fceda810278d915b16521d29e207b1f8f" translate="yes" xml:space="preserve">
          <source>Ember Engines</source>
          <target state="translated">琥珀引擎</target>
        </trans-unit>
        <trans-unit id="9cbb03153af3c98545def04509ea329b782f17d2" translate="yes" xml:space="preserve">
          <source>Ember Exam</source>
          <target state="translated">安博考试</target>
        </trans-unit>
        <trans-unit id="7ddce6028f95c0639637f7e2bfbf446e0227099a" translate="yes" xml:space="preserve">
          <source>Ember Exam also lets you randomize how the tests are run. Why would you want to do so? When you don't properly set up and tear down a test, you can create dependencies among tests. Randomizing the order helps you catch these inadvertent bugs.</source>
          <target state="translated">Ember Exam还可以让你随机安排测试的运行方式。为什么你要这么做呢?当你没有正确设置和拆卸测试时,你可能会在测试之间产生依赖关系。随机化的顺序可以帮助你发现这些不经意的错误。</target>
        </trans-unit>
        <trans-unit id="c959eca15d83a91240ed3a81db3fe6daac584535" translate="yes" xml:space="preserve">
          <source>Ember Extensions</source>
          <target state="translated">琥珀色扩展部分</target>
        </trans-unit>
        <trans-unit id="aab43f826b3c8d3079a16a04f74dde41f4314445" translate="yes" xml:space="preserve">
          <source>Ember Helpers are functions that can compute values, and are used in templates. For example, this code calls a helper named &lt;code&gt;format-currency&lt;/code&gt;:</source>
          <target state="translated">Ember Helper是可以计算值的函数，用于模板中。例如，此代码调用一个名为 &lt;code&gt;format-currency&lt;/code&gt; 的帮助器：</target>
        </trans-unit>
        <trans-unit id="437668e434f8bfba7bc73c1e04a0b86e8359906d" translate="yes" xml:space="preserve">
          <source>Ember Inspector</source>
          <target state="translated">微光检查员</target>
        </trans-unit>
        <trans-unit id="8ddc4fed83efbda511ddb908334fa22bab38a25f" translate="yes" xml:space="preserve">
          <source>Ember Inspector also provides deprecation handling capability. It can work complimentary to ember-cli-deprecation-workflow. As you unsilence deprecations to fix them, the inspector can allow you to more quickly find where in your code a deprecation occurs when you run into it at runtime, reducing the amount of stack trace browsing you have to do. For more information on using deprecation handling in Ember Inspector, see its &lt;a href=&quot;https://guides.emberjs.com/ember-inspector/deprecations/&quot;&gt;guides section&lt;/a&gt;.</source>
          <target state="translated">Ember Inspector还提供弃用处理功能。它可以与ember-cli-deprecation-workflow互补使用。当您取消弃用固定的修复程序时，检查器可以使您更快地找到在运行时遇到折旧的代码，从而减少了必须进行的堆栈跟踪浏览量。有关在Ember Inspector中使用弃用处理的更多信息，请参阅其&lt;a href=&quot;https://guides.emberjs.com/ember-inspector/deprecations/&quot;&gt;指南部分&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="7253bace2e069d96dc7c3d75ddac85b98bb6aed5" translate="yes" xml:space="preserve">
          <source>Ember Observer</source>
          <target state="translated">Ember Observer</target>
        </trans-unit>
        <trans-unit id="545d6671ff9721a426e18f2bc0f12c1dfd1d2f60" translate="yes" xml:space="preserve">
          <source>Ember Test Selectors</source>
          <target state="translated">微光测试选择器</target>
        </trans-unit>
        <trans-unit id="fe88ddbd91cc5946e54bfbe5cab48833103454cc" translate="yes" xml:space="preserve">
          <source>Ember acceptance tests use a set of test helper functions, such as the &lt;code&gt;visit&lt;/code&gt;, &lt;code&gt;andThen&lt;/code&gt;, and &lt;code&gt;currentURL&lt;/code&gt; functions used above. We'll discuss those functions in more detail later in the tutorial.</source>
          <target state="translated">Ember接受测试使用一组测试帮助器函数，例如上面使用的 &lt;code&gt;visit&lt;/code&gt; 和 &lt;code&gt;andThen&lt;/code&gt; 以及 &lt;code&gt;currentURL&lt;/code&gt; 函数。在本教程的后面，我们将更详细地讨论这些功能。</target>
        </trans-unit>
        <trans-unit id="92ffeb95f3ec7c756165554e5239bfc18836a394" translate="yes" xml:space="preserve">
          <source>Ember also allows you to write an &lt;code&gt;if else&lt;/code&gt; statement in inline form. It looks similar to a ternary operator.</source>
          <target state="translated">Ember还允许您以内联形式编写 &lt;code&gt;if else&lt;/code&gt; 语句。它看起来类似于三元运算符。</target>
        </trans-unit>
        <trans-unit id="25f4c9f30daa8bff897a1e412dd6c1aaacc57917" translate="yes" xml:space="preserve">
          <source>Ember also extends the JavaScript &lt;code&gt;Array&lt;/code&gt; prototype with its &lt;a href=&quot;http://emberjs.com/api/classes/Ember.Enumerable.html&quot;&gt;Ember.Enumerable&lt;/a&gt; interface to provide change observation for arrays.</source>
          <target state="translated">Ember还通过其&lt;a href=&quot;http://emberjs.com/api/classes/Ember.Enumerable.html&quot;&gt;Ember.Enumerable&lt;/a&gt;接口扩展了JavaScript &lt;code&gt;Array&lt;/code&gt; 原型，以提供对数组的更改观察。</target>
        </trans-unit>
        <trans-unit id="83e381d0afcb61447ae0053f9e2c4fd45e7ab318" translate="yes" xml:space="preserve">
          <source>Ember also provides a computed property macro &lt;a href=&quot;http://emberjs.com/api/classes/Ember.computed.html#method_filterBy&quot;&gt;&lt;code&gt;computed.filterBy&lt;/code&gt;&lt;/a&gt;, which is a shorter way of expressing the above computed property:</source>
          <target state="translated">Ember还提供了一个计算属性宏&lt;a href=&quot;http://emberjs.com/api/classes/Ember.computed.html#method_filterBy&quot;&gt; &lt;code&gt;computed.filterBy&lt;/code&gt; &lt;/a&gt;，这是表达上述计算属性的一种简短方法：</target>
        </trans-unit>
        <trans-unit id="7309f90d485aa003ad6130ad411edcc62d97be4c" translate="yes" xml:space="preserve">
          <source>Ember application builds are created by the Ember CLI build pipeline. Just as with your application code, Ember CLI ships with a sensible set of defaults to compile and bundle the assets that can be deployed to production. Under the hood, this is accomplished using a series of Broccoli plugins, each of which can be configured in the &lt;code&gt;ember-cli-build.js&lt;/code&gt; file at the root of your project.</source>
          <target state="translated">Ember应用程序构建是由Ember CLI构建管道创建的。与您的应用程序代码一样，Ember CLI附带了一组合理的默认值，以编译和捆绑可部署到生产中的资产。在后台，这是使用一系列Broccoli插件完成的，每个插件都可以在项目根目录的 &lt;code&gt;ember-cli-build.js&lt;/code&gt; 文件中进行配置。</target>
        </trans-unit>
        <trans-unit id="3e5fa57949b1db2cc56d74d027652a118508df96" translate="yes" xml:space="preserve">
          <source>Ember applications utilize the &lt;a href=&quot;https://en.wikipedia.org/wiki/Dependency_injection&quot;&gt;dependency injection&lt;/a&gt; (&quot;DI&quot;) design pattern to declare and instantiate classes of objects and dependencies between them.</source>
          <target state="translated">Ember应用程序使用&lt;a href=&quot;https://en.wikipedia.org/wiki/Dependency_injection&quot;&gt;依赖项注入&lt;/a&gt;（&amp;ldquo; DI&amp;rdquo;）设计模式来声明和实例化对象的类及其之间的依赖关系。</target>
        </trans-unit>
        <trans-unit id="8fab2de46c2898e1103dae837ed48ff08da0417c" translate="yes" xml:space="preserve">
          <source>Ember applications utilize the &lt;a href=&quot;https://en.wikipedia.org/wiki/Dependency_injection&quot;&gt;dependency injection&lt;/a&gt; (&quot;DI&quot;) design pattern to declare and instantiate classes of objects and dependencies between them. Applications and application instances each serve a role in Ember's DI implementation.</source>
          <target state="translated">Ember应用程序使用&lt;a href=&quot;https://en.wikipedia.org/wiki/Dependency_injection&quot;&gt;依赖项注入&lt;/a&gt;（&amp;ldquo; DI&amp;rdquo;）设计模式来声明和实例化对象的类及其之间的依赖关系。应用程序和应用程序实例均在Ember的DI实现中发挥作用。</target>
        </trans-unit>
        <trans-unit id="e4c770bd413edff2c4d9d24205edfb2c115d2185" translate="yes" xml:space="preserve">
          <source>Ember comes with &lt;em&gt;generators&lt;/em&gt; that automate the boilerplate code for common tasks. To generate a route, type this in a new terminal window in your &lt;code&gt;ember-quickstart&lt;/code&gt; directory:</source>
          <target state="translated">Ember带有&lt;em&gt;生成器&lt;/em&gt;，用于自动执行常见任务的样板代码。要生成路线，请在 &lt;code&gt;ember-quickstart&lt;/code&gt; 目录的新终端窗口中键入以下内容：</target>
        </trans-unit>
        <trans-unit id="37ba02b45494a5f1d6ec2104936c9f1cb5ae3883" translate="yes" xml:space="preserve">
          <source>Ember comes with &lt;em&gt;generators&lt;/em&gt; that automate the boilerplate code for common tasks. To generate a route, type this in your terminal:</source>
          <target state="translated">Ember带有&lt;em&gt;生成器&lt;/em&gt;，用于自动执行常见任务的样板代码。要生成路线，请在终端中输入以下内容：</target>
        </trans-unit>
        <trans-unit id="aa2f0e98de61e195118b13ff85455c287d57f643" translate="yes" xml:space="preserve">
          <source>Ember comes with a data management library called &lt;a href=&quot;https://github.com/emberjs/data&quot;&gt;Ember Data&lt;/a&gt; to help deal with persistent application data.</source>
          <target state="translated">Ember带有一个名为&lt;a href=&quot;https://github.com/emberjs/data&quot;&gt;Ember Data&lt;/a&gt;的数据管理库，可帮助处理持久性应用程序数据。</target>
        </trans-unit>
        <trans-unit id="3b047e9d9beae9b057e5f1de9d86bd5bf6bbac46" translate="yes" xml:space="preserve">
          <source>Ember components are commonly tested with &lt;a href=&quot;https://guides.emberjs.com/testing/testing-components/&quot;&gt;component integration tests&lt;/a&gt;. Component integration tests verify the behavior of a component within the context of Ember's rendering engine. When running in an integration test, the component goes through its regular &lt;a href=&quot;https://guides.emberjs.com/components/the-component-lifecycle/&quot;&gt;render lifecycle&lt;/a&gt;, and has access to dependent objects, loaded through Ember's resolver.</source>
          <target state="translated">Ember组件通常使用&lt;a href=&quot;https://guides.emberjs.com/testing/testing-components/&quot;&gt;组件集成测试进行测试&lt;/a&gt;。组件集成测试在Ember的渲染引擎的上下文中验证了组件的行为。在集成测试中运行时，该组件将经历其常规&lt;a href=&quot;https://guides.emberjs.com/components/the-component-lifecycle/&quot;&gt;渲染生命周期&lt;/a&gt;，并有权访问通过Ember的解析器加载的相关对象。</target>
        </trans-unit>
        <trans-unit id="64cee7b4768d7118e7f238eeaa155aa318949e38" translate="yes" xml:space="preserve">
          <source>Ember components represent state to the UI of an application. Further reading on components can be found under &lt;a href=&quot;https://api.emberjs.com/ember/release/classes/Component&quot;&gt;Component&lt;/a&gt;.</source>
          <target state="translated">灰烬组件表示应用程序UI的状态。有关组件的更多信息，请参见&lt;a href=&quot;https://api.emberjs.com/ember/release/classes/Component&quot;&gt;Component下的内容&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="a471df2253ef2b3f017543d1b20c9891c1d84036" translate="yes" xml:space="preserve">
          <source>Ember components represent state to the UI of an application. Further reading on components can be found under &lt;a href=&quot;https://emberjs.com/api/classes/Ember.Component.html&quot;&gt;Ember.Component&lt;/a&gt;.</source>
          <target state="translated">灰烬组件表示应用程序UI的状态。有关组件的更多信息，请参见&lt;a href=&quot;https://emberjs.com/api/classes/Ember.Component.html&quot;&gt;Ember.Component&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="b7b690db229b10c8c62c4c685459eeea738a3f49" translate="yes" xml:space="preserve">
          <source>Ember considers testing a first-class citizen. In addition to providing easy paths to integrate QUnit and Mocha, Ember supports a variety of addons and debugging tools to improve your developer experience in testing.</source>
          <target state="translated">Ember认为测试是一等公民。除了提供简单的路径来整合QUnit和Mocha之外,Ember还支持各种附加组件和调试工具来改善你的开发人员在测试中的体验。</target>
        </trans-unit>
        <trans-unit id="56d20b50a63addb50eeb5e03f1dc01efebd9862a" translate="yes" xml:space="preserve">
          <source>Ember detects the changed file and automatically reloads the page for you in the background. You should see that the welcome page has been replaced by &quot;PeopleTracker&quot;. You also added an &lt;code&gt;{{outlet}}&lt;/code&gt; to this page, which means that any nested route will be rendered in that place.</source>
          <target state="translated">Ember检测到更改的文件，并在后台自动为您重新加载页面。您应该看到欢迎页面已被&amp;ldquo; PeopleTracker&amp;rdquo;替换。您还向此页面添加了 &lt;code&gt;{{outlet}}&lt;/code&gt; ，这意味着所有嵌套的路线都将在该位置呈现。</target>
        </trans-unit>
        <trans-unit id="60090d42ac0bbb750fe52cf49dd09a30848c46b4" translate="yes" xml:space="preserve">
          <source>Ember detects the changed file and automatically reloads the page for you in the background. You should see that the welcome page has been replaced by &quot;PeopleTracker&quot;. You also added an &lt;code&gt;{{outlet}}&lt;/code&gt; to this page, which means that any route will be rendered in that place.</source>
          <target state="translated">Ember检测到更改后的文件，并在后台自动为您重新加载页面。您应该看到欢迎页面已被&amp;ldquo; PeopleTracker&amp;rdquo;替换。您还向此页面添加了 &lt;code&gt;{{outlet}}&lt;/code&gt; ，这意味着将在该位置呈现任何路线。</target>
        </trans-unit>
        <trans-unit id="8a7e6001dcb14a649247e38f062c08220c09d2b8" translate="yes" xml:space="preserve">
          <source>Ember developers have great options for how they handle data from back end APIs. Ember itself works with any type of back end: REST, JSON:API, GraphQL, or anything else. This guide will summarize how and where to make API requests. Follow the links within it to see examples and learn more.</source>
          <target state="translated">Ember的开发者对于如何处理来自后端API的数据有很大的选择。Ember本身可以与任何类型的后端合作。REST,JSON:API,GraphQL,或其他任何类型。本指南将总结如何以及在哪里进行API请求。请跟随其中的链接查看示例并了解更多。</target>
        </trans-unit>
        <trans-unit id="5a6f49a148bccb4778ded15bb2d0e9d74c638a63" translate="yes" xml:space="preserve">
          <source>Ember gives you &lt;strong&gt;the power to write tests and be productive from day one&lt;/strong&gt;. You can be confident that your app will be correct today and years from now. A question remains: &lt;em&gt;How&lt;/em&gt; should you write tests?</source>
          <target state="translated">&lt;strong&gt;从第一天开始，&lt;/strong&gt; Ember就使您&lt;strong&gt;能够编写测试并提高工作效率&lt;/strong&gt;。您可以确信自己的应用在今天和以后的几年中都是正确的。仍然存在一个问题：您应该&lt;em&gt;如何&lt;/em&gt;编写测试？</target>
        </trans-unit>
        <trans-unit id="ab317ef21ea2f3c914cb81c1bbe4ccb7946f75cc" translate="yes" xml:space="preserve">
          <source>Ember gives you the ability to &lt;a href=&quot;../writing-helpers&quot;&gt;write your own helpers&lt;/a&gt;, to bring a minimum of logic into Ember templating.</source>
          <target state="translated">Ember使您能够&lt;a href=&quot;../writing-helpers&quot;&gt;编写自己的助手&lt;/a&gt;，从而将最少的逻辑引入Ember模板中。</target>
        </trans-unit>
        <trans-unit id="a03dadf6a40a3fb1db82643f6ea6c919d99e8279" translate="yes" xml:space="preserve">
          <source>Ember guarantees that, by the time &lt;code&gt;didInsertElement()&lt;/code&gt; is called:</source>
          <target state="translated">Ember保证在调用 &lt;code&gt;didInsertElement()&lt;/code&gt; 时：</target>
        </trans-unit>
        <trans-unit id="1c9812f1934854a8babfdd000cbd1d5d4490ee55" translate="yes" xml:space="preserve">
          <source>Ember has a rich ecosystem of addons that can be easily added to projects. Addons provide a wide range of functionality to projects, often saving time and letting you focus on your project.</source>
          <target state="translated">Ember有一个丰富的生态系统,可以轻松地添加到项目中。附加组件为项目提供了广泛的功能,通常可以节省时间,让你专注于你的项目。</target>
        </trans-unit>
        <trans-unit id="3a5ece50f287050aa8d644f316c2b11826720ae1" translate="yes" xml:space="preserve">
          <source>Ember has and continues to support an implementation of a &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy&quot;&gt;Proxy&lt;/a&gt;, which is a type of object that can &lt;em&gt;wrap around&lt;/em&gt; other objects and &lt;em&gt;intercept&lt;/em&gt; all of your gets and sets to them. Native JavaScript proxies allow you to do this without any special methods or syntax, but unfortunately they are not available in IE11. Since many Ember users must still support IE11, Ember's &lt;code&gt;ObjectProxy&lt;/code&gt; class allows us to accomplish something similar.</source>
          <target state="translated">Ember已经并且将继续支持&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy&quot;&gt;Proxy&lt;/a&gt;的实现，这是一种对象，可以&lt;em&gt;包装&lt;/em&gt;其他对象并&lt;em&gt;拦截&lt;/em&gt;您对它们的所有获取和设置。本机JavaScript代理使您无需任何特殊方法或语法即可执行此操作，但是不幸的是，它们在IE11中不可用。由于许多Ember用户仍必须支持IE11，因此Ember的 &lt;code&gt;ObjectProxy&lt;/code&gt; 类使我们可以完成类似的工作。</target>
        </trans-unit>
        <trans-unit id="9d92f25a98db17be3b263cb354c8cfab9be97f51" translate="yes" xml:space="preserve">
          <source>Ember includes several helpers to facilitate acceptance testing. There are two types of helpers: &lt;strong&gt;asynchronous&lt;/strong&gt; and &lt;strong&gt;synchronous&lt;/strong&gt;.</source>
          <target state="translated">Ember包括几个帮助进行验收测试的助手。有两种类型的帮助器：&lt;strong&gt;异步&lt;/strong&gt;和&lt;strong&gt;同步&lt;/strong&gt;。</target>
        </trans-unit>
        <trans-unit id="85a88dcdf52ec507f315a70c8036c165c801decf" translate="yes" xml:space="preserve">
          <source>Ember includes several helpers to facilitate application testing. There are two types of helpers: &lt;strong&gt;asynchronous&lt;/strong&gt; and &lt;strong&gt;synchronous&lt;/strong&gt;.</source>
          <target state="translated">Ember包括几个帮助程序测试的助手。有两种类型的帮助器：&lt;strong&gt;异步&lt;/strong&gt;和&lt;strong&gt;同步&lt;/strong&gt;。</target>
        </trans-unit>
        <trans-unit id="d7ded525fedd1378fdb8e1ba2f86f6bd86a788c4" translate="yes" xml:space="preserve">
          <source>Ember is a JavaScript front-end framework designed to help you build websites with rich and complex user interactions. It does so by providing developers both with many features that are essential to manage complexity in modern web applications, as well as an integrated development toolkit that enables rapid iteration.</source>
          <target state="translated">Ember是一个JavaScript前端框架,旨在帮助您构建具有丰富和复杂用户交互的网站。它既为开发者提供了许多在现代Web应用中管理复杂性所必需的功能,又为开发者提供了一个能够快速迭代的集成开发工具包。</target>
        </trans-unit>
        <trans-unit id="d81981f6d3802a80a8d64d45017c4267aec017d2" translate="yes" xml:space="preserve">
          <source>Ember is a framework for building applications that run in the browser, which means that they are made with HTML, CSS, and JavaScript. It is very helpful to be familiar with these technologies. If you find yourself getting stuck or confused as you learn Ember, come back to this page and see if there is a general topic below that you could explore.</source>
          <target state="translated">Ember是一个用于构建在浏览器中运行的应用程序的框架,这意味着它们是用HTML、CSS和JavaScript制作的。熟悉这些技术是非常有帮助的。如果你在学习Ember的过程中发现自己被卡住了或者迷惑了,请回到这个页面,看看下面是否有你可以探讨的一般主题。</target>
        </trans-unit>
        <trans-unit id="d3ab138aaea55fab0046f00d1ce02954a3cb355e" translate="yes" xml:space="preserve">
          <source>Ember is only able to infer the dynamic segments because the &lt;code&gt;photo&lt;/code&gt; route is currently active. If we were to invoke the &lt;code&gt;&amp;lt;LinkTo /&amp;gt;&lt;/code&gt; component for the same &lt;code&gt;photos.photo.comment&lt;/code&gt; route, but from the &lt;code&gt;photos&lt;/code&gt; route's template, it will result in an error, as we did not pass enough model objects to populate all the dynamic segments needed to generate the URL.</source>
          <target state="translated">由于 &lt;code&gt;photo&lt;/code&gt; 路线当前处于活动状态，因此Ember仅能推断出动态路段。如果我们为相同的 &lt;code&gt;photos.photo.comment&lt;/code&gt; 路线调用 &lt;code&gt;&amp;lt;LinkTo /&amp;gt;&lt;/code&gt; 组件，但是从 &lt;code&gt;photos&lt;/code&gt; 路线的模板中调用，则会导致错误，因为我们没有传递足够的模型对象来填充所需的所有动态细分生成URL。</target>
        </trans-unit>
        <trans-unit id="d0ad99d0a347f708d9477d90558508f95814ccd6" translate="yes" xml:space="preserve">
          <source>Ember keeps data for a page in an object called a &lt;code&gt;model&lt;/code&gt;. To keep things simple at first, we'll populate the model for our rental listing page to use a hard-coded array of JavaScript objects. Later, we'll switch to using &lt;a href=&quot;https://github.com/emberjs/data&quot;&gt;Ember Data&lt;/a&gt;, a library for robustly managing data in our app.</source>
          <target state="translated">Ember将页面的数据保存在称为 &lt;code&gt;model&lt;/code&gt; 的对象中。首先，为了简化起见，我们将在出租清单页面中填充模型，以使用硬编码的JavaScript对象数组。稍后，我们将切换到使用&lt;a href=&quot;https://github.com/emberjs/data&quot;&gt;Ember Data&lt;/a&gt;，该库可在我们的应用程序中可靠地管理数据。</target>
        </trans-unit>
        <trans-unit id="228517640b3c32bd8690d28560a8ca2b94e01280" translate="yes" xml:space="preserve">
          <source>Ember knows which subclass powers a component based on its filename. For example, if you have a component called &lt;code&gt;blog-post&lt;/code&gt;, you would create a file at &lt;code&gt;app/components/blog-post.js&lt;/code&gt;. If your component was called &lt;code&gt;audio-player-controls&lt;/code&gt;, the file name would be at &lt;code&gt;app/components/audio-player-controls.js&lt;/code&gt;.</source>
          <target state="translated">Ember根据文件名知道哪个子类为组件提供动力。例如，如果您有一个名为 &lt;code&gt;blog-post&lt;/code&gt; 的组件，则可以在 &lt;code&gt;app/components/blog-post.js&lt;/code&gt; 中创建一个文件。如果您的组件被称为 &lt;code&gt;audio-player-controls&lt;/code&gt; ，则文件名将位于 &lt;code&gt;app/components/audio-player-controls.js&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="771bfe46ea7958eb9d77d5458e062862858c3ad2" translate="yes" xml:space="preserve">
          <source>Ember makes use of these in places like the model hook for a route. Until the promise resolves, Ember is able to put the route into a &quot;loading&quot; state.</source>
          <target state="translated">Ember在一些地方利用了这些,比如路由的模型钩子。在承诺解决之前,Ember能够让路由进入 &quot;加载 &quot;状态。</target>
        </trans-unit>
        <trans-unit id="8722eba0093636f90448785ffc6cb4446ed17706" translate="yes" xml:space="preserve">
          <source>Ember manages the lifecycles and lifetimes of many built in constructs, such as components, and does so in a hierarchical way - when a parent component is destroyed, all of its children are destroyed as well.</source>
          <target state="translated">Ember管理许多内置结构的生命周期和寿命,比如组件,并且以分层的方式进行--当一个父组件被销毁时,它的所有子组件也会被销毁。</target>
        </trans-unit>
        <trans-unit id="ee03e6489231e878b92c98f93c1e9eef8d3b1fed" translate="yes" xml:space="preserve">
          <source>Ember provides 3 types of tests out of the box:</source>
          <target state="translated">Ember提供3种类型的测试。</target>
        </trans-unit>
        <trans-unit id="6c7063bb0c7c18465e2c381358844fbba69a1a31" translate="yes" xml:space="preserve">
          <source>Ember provides a browser extension and several configuration options to help you debug your application.</source>
          <target state="translated">Ember提供了一个浏览器扩展和几个配置选项来帮助你调试你的应用程序。</target>
        </trans-unit>
        <trans-unit id="784cda1f167fef6c33f528292edbaf9fc78f4180" translate="yes" xml:space="preserve">
          <source>Ember provides a few ways to help developers more easily produce accessible applications, and this section of the guides will more explicitly assist with that.</source>
          <target state="translated">Ember提供了一些方法来帮助开发者更轻松地制作无障碍应用,本节指南将更明确地帮助开发者。</target>
        </trans-unit>
        <trans-unit id="f97ea07058ad6e1b063f9d459ef3f85cf285fc1a" translate="yes" xml:space="preserve">
          <source>Ember provides a number of decorators, such as the &lt;code&gt;@tracked&lt;/code&gt; decorator, that will be described in greater detail later on in the guides.</source>
          <target state="translated">Ember提供了许多装饰器，例如 &lt;code&gt;@tracked&lt;/code&gt; 装饰器，稍后将在指南中对其进行详细说明。</target>
        </trans-unit>
        <trans-unit id="1b12393c040a3f0980d4e5e14b09e288f6809047" translate="yes" xml:space="preserve">
          <source>Ember provides a variety of acceptance test helpers to make common tasks easier, such as visiting routes, filling in fields, clicking on links/buttons, and waiting for pages to display.</source>
          <target state="translated">Ember提供了各种验收测试助手,使常见的任务变得更简单,如访问路线、填写字段、点击链接/按钮和等待页面显示。</target>
        </trans-unit>
        <trans-unit id="cf44f0cb83d26502cec3eec323b4744b75950cb4" translate="yes" xml:space="preserve">
          <source>Ember provides an analogous approach to &lt;code&gt;loading&lt;/code&gt; substates in the case of errors encountered during a transition.</source>
          <target state="translated">在过渡期间遇到错误的情况下，Ember提供了一种类似的方法来 &lt;code&gt;loading&lt;/code&gt; 子状态。</target>
        </trans-unit>
        <trans-unit id="fcf960908b3ae5131c37ddf82deaef50dce4af31" translate="yes" xml:space="preserve">
          <source>Ember provides several configuration options that can help you debug problems with your application.</source>
          <target state="translated">Ember提供了几个配置选项,可以帮助你调试应用程序的问题。</target>
        </trans-unit>
        <trans-unit id="343e2cd8c3db4a355b5a77b61f9bafe4555f8431" translate="yes" xml:space="preserve">
          <source>Ember requires Git to manage many of its dependencies. Git comes with Mac OS X and most Linux distributions. Windows users can download and run &lt;a href=&quot;http://git-scm.com/download/win&quot;&gt;this Git installer&lt;/a&gt;.</source>
          <target state="translated">Ember要求Git管理其许多依赖项。Git随附Mac OS X和大多数Linux发行版。Windows用户可以下载并运行&lt;a href=&quot;http://git-scm.com/download/win&quot;&gt;此Git安装程序&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="b0073ac716d906033ada2d3faf10f86333a4fb6f" translate="yes" xml:space="preserve">
          <source>Ember scans &lt;code&gt;app/locations/*&lt;/code&gt; for extending the Location API.</source>
          <target state="translated">Ember扫描 &lt;code&gt;app/locations/*&lt;/code&gt; 以扩展Location API。</target>
        </trans-unit>
        <trans-unit id="e3fa5deb6f7ea31a9180c87e9aa17d9bcd3f7008" translate="yes" xml:space="preserve">
          <source>Ember ships with several built-in helpers, which you will learn more about in the following guides.</source>
          <target state="translated">Ember有几个内置的辅助工具,你将在下面的指南中了解更多。</target>
        </trans-unit>
        <trans-unit id="3c32d5ad39385c75f4c3ee519527e97952a2f6e5" translate="yes" xml:space="preserve">
          <source>Ember ships with two types of JavaScript classes for components:</source>
          <target state="translated">Ember为组件提供了两种类型的JavaScript类。</target>
        </trans-unit>
        <trans-unit id="6574f5be2256d3c9f43b6aa58e820c7cb74ef2a9" translate="yes" xml:space="preserve">
          <source>Ember supports observing any property, including computed properties.</source>
          <target state="translated">Ember支持观察任何属性,包括计算的属性。</target>
        </trans-unit>
        <trans-unit id="1f69953cf21ff37ee778d22c668312eb02aaeb5d" translate="yes" xml:space="preserve">
          <source>Ember templates use the syntax of &lt;a href=&quot;http://handlebarsjs.com&quot;&gt;Handlebars&lt;/a&gt; templates. Anything that is valid Handlebars syntax is valid Ember syntax.</source>
          <target state="translated">Ember模板使用&lt;a href=&quot;http://handlebarsjs.com&quot;&gt;Handlebars&lt;/a&gt;模板的语法。任何有效的Handlebars语法都是有效的Ember语法。</target>
        </trans-unit>
        <trans-unit id="4061b22ae43475730e627d43fec4af8d942a4288" translate="yes" xml:space="preserve">
          <source>Ember used its own custom class syntax before native JavaScript classes existed, which looks like this:</source>
          <target state="translated">在原生JavaScript类存在之前,Ember使用了自己的自定义类语法,它看起来是这样的。</target>
        </trans-unit>
        <trans-unit id="b14dbbfe407b0a3b18ea56071a89179aec2acce5" translate="yes" xml:space="preserve">
          <source>Ember uses &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes&quot;&gt;JavaScript classes&lt;/a&gt; for many of its constructs, such as Components, Routes, Services, and more:</source>
          <target state="translated">Ember在其许多构造中使用&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes&quot;&gt;JavaScript类&lt;/a&gt;，例如组件，路线，服务等：</target>
        </trans-unit>
        <trans-unit id="77d31f9609b470fee8c414c3e82290f78c45c4ef" translate="yes" xml:space="preserve">
          <source>Ember uses a technique called &lt;em&gt;event delegation&lt;/em&gt;. This allows the framework to set up a global, shared event listener instead of requiring each view to do it manually. For example, instead of each view registering its own &lt;code&gt;mousedown&lt;/code&gt; listener on its associated element, Ember sets up a &lt;code&gt;mousedown&lt;/code&gt; listener on the &lt;code&gt;body&lt;/code&gt;.</source>
          <target state="translated">灰烬使用一种称为&lt;em&gt;事件委托&lt;/em&gt;的技术。这使框架可以设置全局的共享事件侦听器，而无需要求每个视图手动进行。例如，Ember 不是在每个视图的关联元素上注册其自己的 &lt;code&gt;mousedown&lt;/code&gt; 侦听器，而是在 &lt;code&gt;body&lt;/code&gt; 上设置了 &lt;code&gt;mousedown&lt;/code&gt; 侦听器。</target>
        </trans-unit>
        <trans-unit id="0f7b78c44fa36e65e62123e97cced3a42595417b" translate="yes" xml:space="preserve">
          <source>Ember uses templates to build up the user interface in an application.</source>
          <target state="translated">Ember使用模板来构建应用程序中的用户界面。</target>
        </trans-unit>
        <trans-unit id="e6b7939ee3ac109b5b9e0b9eca8d75f1a858380f" translate="yes" xml:space="preserve">
          <source>Ember uses templates to organize the layout of HTML in an application.</source>
          <target state="translated">Ember使用模板来组织应用程序中的HTML布局。</target>
        </trans-unit>
        <trans-unit id="e390a9dbec0757ad9a6013e9ec85c6a72cbf1cca" translate="yes" xml:space="preserve">
          <source>Ember uses the &lt;a href=&quot;http://www.handlebarsjs.com&quot;&gt;Handlebars templating library&lt;/a&gt; to power your app's user interface. Handlebars templates contain static HTML and dynamic content inside Handlebars expressions, which are invoked with double curly braces: &lt;code&gt;{{}}&lt;/code&gt;.</source>
          <target state="translated">灰烬使用&lt;a href=&quot;http://www.handlebarsjs.com&quot;&gt;手把模板化库&lt;/a&gt;，以支持您的应用程序的用户界面。车把模板在车把表达式中包含静态HTML和动态内容，这些表达式用双花括号 &lt;code&gt;{{}}&lt;/code&gt; 调用。</target>
        </trans-unit>
        <trans-unit id="703fb025adbeedad22271f7047c126b3607cbd2e" translate="yes" xml:space="preserve">
          <source>Ember utilities are reusable code that can be accessed from various parts of the application. For Super Rentals, we'll use a utility to access the Google Maps API. The utility will abstract the Google API away from our Maps service, which will allow for future reuse of the maps API within the application, easier refactoring to alternate maps implementations, and easier testing of code that depends on it.</source>
          <target state="translated">Ember实用程序是可重复使用的代码,可以从应用程序的不同部分访问。对于超级租车,我们将使用一个实用程序来访问Google地图API。该实用程序将把Google API从我们的地图服务中抽象出来,这将允许未来在应用程序中重用地图API,更容易重构到替代的地图实现,并更容易测试依赖它的代码。</target>
        </trans-unit>
        <trans-unit id="48da3eeb1948aeea92006904f1c1bdcc50e65934" translate="yes" xml:space="preserve">
          <source>Ember will &lt;em&gt;not&lt;/em&gt; look above the common parent in a transition between child routes. For example, if the user transitions from &lt;code&gt;user.about.index&lt;/code&gt; to &lt;code&gt;user.about.slow-model&lt;/code&gt; the following search for template will happen:</source>
          <target state="translated">在子级路由之间的过渡中，Ember&lt;em&gt;不会&lt;/em&gt;在公共父级之上。例如，如果用户从 &lt;code&gt;user.about.index&lt;/code&gt; 过渡到 &lt;code&gt;user.about.slow-model&lt;/code&gt; ,则将进行以下模板搜索：</target>
        </trans-unit>
        <trans-unit id="ca862ad8ad644ea10b632a7232d32c2b0afaa07b" translate="yes" xml:space="preserve">
          <source>Ember will do a lot to help you write fast apps, but it can't prevent you from writing a slow one. This is especially true on mobile devices. To deliver a great experience, it's important to measure performance early and often, and with a diverse set of devices.</source>
          <target state="translated">Ember会做很多事情来帮助你写出快速的应用,但它无法阻止你写出慢的应用。在移动设备上尤其如此。为了提供良好的体验,尽早、经常地测量性能,并且使用不同的设备是很重要的。</target>
        </trans-unit>
        <trans-unit id="6f95a171614a83e43a1b51cfcacdaa14f8b4a281" translate="yes" xml:space="preserve">
          <source>Ember will escape the HTML tags, like this:</source>
          <target state="translated">Ember会转义HTML标签,像这样。</target>
        </trans-unit>
        <trans-unit id="d69361ba889d9500419cc0dc34133167c04fbffb" translate="yes" xml:space="preserve">
          <source>Ember will resolve factories from the &lt;code&gt;App&lt;/code&gt; namespace automatically. For example &lt;code&gt;App.CarsController&lt;/code&gt; will be discovered and returned if an application requests &lt;code&gt;controller:cars&lt;/code&gt;.</source>
          <target state="translated">Ember将自动从 &lt;code&gt;App&lt;/code&gt; 命名空间解析工厂。例如，如果应用程序请求 &lt;code&gt;controller:cars&lt;/code&gt; ,则会发现并返回 &lt;code&gt;App.CarsController&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="f491638b57d711a5183f3f9a2de08588a3f7d0d1" translate="yes" xml:space="preserve">
          <source>Ember will use the model object returned above and save it as an attribute called &lt;code&gt;model&lt;/code&gt;, available to the rentals template we generated with our route in &lt;a href=&quot;../routes-and-templates#toc_a-rentals-route&quot;&gt;Routes and Templates&lt;/a&gt;.</source>
          <target state="translated">Ember将使用上面返回的模型对象，并将其保存为名为 &lt;code&gt;model&lt;/code&gt; 的属性，该属性可用于通过&amp;ldquo; &lt;a href=&quot;../routes-and-templates#toc_a-rentals-route&quot;&gt;路线和模板&amp;rdquo;&lt;/a&gt;中的路线生成的租赁模板。</target>
        </trans-unit>
        <trans-unit id="8036753468383e25943cb0d6540cfc9e0c9c563f" translate="yes" xml:space="preserve">
          <source>Ember's &lt;a href=&quot;https://github.com/ember-polyfills/ember-cache-primitive-polyfill&quot;&gt;cache API&lt;/a&gt; lets you cache a getter in 2 steps:</source>
          <target state="translated">Ember的&lt;a href=&quot;https://github.com/ember-polyfills/ember-cache-primitive-polyfill&quot;&gt;缓存API&lt;/a&gt;可让您分两步来缓存getter：</target>
        </trans-unit>
        <trans-unit id="6edb2356b5717f9b0b716c0ad973ad625f8e9389" translate="yes" xml:space="preserve">
          <source>Ember's &lt;a href=&quot;https://guides.emberjs.com/testing/testing-components/#toc_waiting-on-asynchronous-behavior&quot;&gt;wait helper&lt;/a&gt; waits for all asynchronous tasks to complete before running the given function callback. It returns a promise that we also return from the test.</source>
          <target state="translated">Ember的&lt;a href=&quot;https://guides.emberjs.com/testing/testing-components/#toc_waiting-on-asynchronous-behavior&quot;&gt;等待助手&lt;/a&gt;在运行给定的函数回调之前，等待所有异步任务完成。它返回一个承诺，我们也将从测试中返回。</target>
        </trans-unit>
        <trans-unit id="6095a49148876c1cbd9499b675e47698332763db" translate="yes" xml:space="preserve">
          <source>Ember's approach to handling asynchronous logic in the router makes heavy use of the concept of Promises. In short, promises are objects that represent an eventual value. A promise can either &lt;em&gt;fulfill&lt;/em&gt; (successfully resolve the value) or &lt;em&gt;reject&lt;/em&gt; (fail to resolve the value). The way to retrieve this eventual value, or handle the cases when the promise rejects, is via the promise's &lt;a href=&quot;http://emberjs.com/api/classes/RSVP.Promise.html#method_then&quot;&gt;&lt;code&gt;then()&lt;/code&gt;&lt;/a&gt; method, which accepts two optional callbacks, one for fulfillment and one for rejection. If the promise fulfills, the fulfillment handler gets called with the fulfilled value as its sole argument, and if the promise rejects, the rejection handler gets called with a reason for the rejection as its sole argument. For example:</source>
          <target state="translated">Ember在路由器中处理异步逻辑的方法大量使用了Promises的概念。简而言之，promise是代表最终价值的对象。一个诺言可以&lt;em&gt;实现&lt;/em&gt;（成功解析值）或&lt;em&gt;拒绝&lt;/em&gt;（无法解析值）。检索此最终值或处理Promise拒绝的情况的方法是通过Promise的&lt;a href=&quot;http://emberjs.com/api/classes/RSVP.Promise.html#method_then&quot;&gt; &lt;code&gt;then()&lt;/code&gt; &lt;/a&gt;方法，该方法接受两个可选的回调，一个用于实现，一个用于拒绝。如果Promise满足，则以实现值作为唯一参数调用实现处理程序，如果Promise拒绝，则以拒绝的原因为其唯一参数调用拒绝处理程序。例如：</target>
        </trans-unit>
        <trans-unit id="e5e8b1928453baa46ab5be07a7298518c984da35" translate="yes" xml:space="preserve">
          <source>Ember's approach to handling asynchronous logic in the router makes heavy use of the concept of Promises. In short, promises are objects that represent an eventual value. A promise can either &lt;em&gt;fulfill&lt;/em&gt; (successfully resolve the value) or &lt;em&gt;reject&lt;/em&gt; (fail to resolve the value). The way to retrieve this eventual value, or handle the cases when the promise rejects, is via the promise's &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/then&quot;&gt;&lt;code&gt;then()&lt;/code&gt;&lt;/a&gt; method, which accepts two optional callbacks, one for fulfillment and one for rejection. If the promise fulfills, the fulfillment handler gets called with the fulfilled value as its sole argument, and if the promise rejects, the rejection handler gets called with a reason for the rejection as its sole argument. For example:</source>
          <target state="translated">Ember在路由器中处理异步逻辑的方法大量使用了Promises的概念。简而言之，promise是代表最终价值的对象。一个承诺可以&lt;em&gt;实现&lt;/em&gt;（成功解析值）或&lt;em&gt;拒绝&lt;/em&gt;（无法解析值）。检索此最终值或处理Promise拒绝的情况的方法是通过Promise的&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/then&quot;&gt; &lt;code&gt;then()&lt;/code&gt; &lt;/a&gt;方法，该方法接受两个可选的回调，一个用于实现，一个用于拒绝。如果Promise满足，则以实现值作为唯一参数调用实现处理程序，如果Promise拒绝，则以拒绝的原因为其唯一参数调用拒绝处理程序。例如：</target>
        </trans-unit>
        <trans-unit id="094ef24d904cddb1f57bf2495785ba204055ed69" translate="yes" xml:space="preserve">
          <source>Ember's built-in helpers are described under the &lt;a href=&quot;https://api.emberjs.com/ember/release/classes/Ember.Templates.helpers&quot;&gt;Ember.Templates.helpers&lt;/a&gt; namespace. Documentation on creating custom helpers can be found under &lt;a href=&quot;https://api.emberjs.com/ember/release/functions/@ember%2Fcomponent%2Fhelper/helper&quot;&gt;helper&lt;/a&gt; (or under &lt;a href=&quot;https://api.emberjs.com/ember/release/classes/Helper&quot;&gt;Helper&lt;/a&gt; if a helper requires access to dependency injection).</source>
          <target state="translated">Ember的内置帮助器在&lt;a href=&quot;https://api.emberjs.com/ember/release/classes/Ember.Templates.helpers&quot;&gt;Ember.Templates.helpers&lt;/a&gt;命名空间下进行了描述。可以在&lt;a href=&quot;https://api.emberjs.com/ember/release/functions/@ember%2Fcomponent%2Fhelper/helper&quot;&gt;帮助&lt;/a&gt;&lt;a href=&quot;https://api.emberjs.com/ember/release/classes/Helper&quot;&gt;器&lt;/a&gt;下找到有关创建自定义帮助器的文档（如果帮助器需要访问依赖项注入，则可以在帮助器下找到）。</target>
        </trans-unit>
        <trans-unit id="e79349be2f7290fe5ca546e1b73a533a375eabf7" translate="yes" xml:space="preserve">
          <source>Ember's built-in helpers are described under the &lt;a href=&quot;https://emberjs.com/api/classes/Ember.Templates.helpers.html&quot;&gt;Ember.Templates.helpers&lt;/a&gt; namespace. Documentation on creating custom helpers can be found under &lt;a href=&quot;https://emberjs.com/api/classes/Ember.Helper.html&quot;&gt;Ember.Helper&lt;/a&gt;.</source>
          <target state="translated">Ember的内置帮助器在&lt;a href=&quot;https://emberjs.com/api/classes/Ember.Templates.helpers.html&quot;&gt;Ember.Templates.helpers&lt;/a&gt;命名空间下进行了描述。在&lt;a href=&quot;https://emberjs.com/api/classes/Ember.Helper.html&quot;&gt;Ember.Helper&lt;/a&gt;下可以找到有关创建自定义帮助程序的文档。</target>
        </trans-unit>
        <trans-unit id="3c0f9d9bf048623c54d4d0924e5a97bb2bf26a2f" translate="yes" xml:space="preserve">
          <source>Ember's classic change tracking system used two methods to ensure that all data was accessed properly and updated correctly: &lt;code&gt;get&lt;/code&gt; and &lt;code&gt;set&lt;/code&gt;.</source>
          <target state="translated">Ember的经典变更跟踪系统使用两种方法来确保正确访问和正确更新所有数据： &lt;code&gt;get&lt;/code&gt; 和 &lt;code&gt;set&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="dcd53cc45139dc5246441c0a11d5d080cb0ad0ae" translate="yes" xml:space="preserve">
          <source>Ember's internals and most of the code you will write in your applications takes place in a run loop. The run loop is used to batch, and order (or reorder) work in a way that is most effective and efficient.</source>
          <target state="translated">Ember的内部结构和你将在应用程序中编写的大部分代码都是在运行循环中进行的。运行循环用于批处理,并以一种最有效和高效的方式订购(或重新订购)工作。</target>
        </trans-unit>
        <trans-unit id="39c872bc6f3f0efe606cfe19b7629be22b0f61f9" translate="yes" xml:space="preserve">
          <source>Ember's template syntax limits what you can express to keep the structure of your application clear at a glance. When you need to compute something using JavaScript, you can use helper functions.</source>
          <target state="translated">Ember的模板语法限制了你可以表达的内容,让你的应用结构一目了然。当你需要使用JavaScript计算一些东西时,你可以使用辅助函数。</target>
        </trans-unit>
        <trans-unit id="6be996ba6cd33f8103ecdfbc59910278f5879fff" translate="yes" xml:space="preserve">
          <source>Ember's test helpers</source>
          <target state="translated">Ember的测试助手</target>
        </trans-unit>
        <trans-unit id="914fa361345873952abe23a6dc0ad3eafb2baa3e" translate="yes" xml:space="preserve">
          <source>Ember.$()</source>
          <target state="translated">Ember.$()</target>
        </trans-unit>
        <trans-unit id="b0f598f5fd538279750da37e48a4a293d53f1a0f" translate="yes" xml:space="preserve">
          <source>Ember.A()</source>
          <target state="translated">Ember.A()</target>
        </trans-unit>
        <trans-unit id="e8e460b5733c0fb74d12500c4e16c96ff83e6e04" translate="yes" xml:space="preserve">
          <source>Ember.ActionHandler</source>
          <target state="translated">Ember.ActionHandler</target>
        </trans-unit>
        <trans-unit id="922a82517a3c363186b8cb22ab32d037d060303a" translate="yes" xml:space="preserve">
          <source>Ember.ActionHandler  (private)</source>
          <target state="translated">Ember.ActionHandler (private)</target>
        </trans-unit>
        <trans-unit id="15aff2d7bc33c5635c441298ddd60ae1951d78d0" translate="yes" xml:space="preserve">
          <source>Ember.ActionSupport  (private)</source>
          <target state="translated">Ember.ActionSupport (private)</target>
        </trans-unit>
        <trans-unit id="713c41cae0cb1d232ffe9289d42f9775b7badc28" translate="yes" xml:space="preserve">
          <source>Ember.Application</source>
          <target state="translated">Ember.Application</target>
        </trans-unit>
        <trans-unit id="ab03fc8628b1bdaed6c92a6bd196531ccbb1aab1" translate="yes" xml:space="preserve">
          <source>Ember.Application  (public)</source>
          <target state="translated">Ember.应用程序(公共)</target>
        </trans-unit>
        <trans-unit id="e3faac80f047e46a9dd9d33bcad1647ff3921364" translate="yes" xml:space="preserve">
          <source>Ember.ApplicationInstance</source>
          <target state="translated">Ember.ApplicationInstance</target>
        </trans-unit>
        <trans-unit id="dffd1f260601a7340b76113840758b815cd07b75" translate="yes" xml:space="preserve">
          <source>Ember.ApplicationInstance  (public)</source>
          <target state="translated">Ember.ApplicationInstance (public)</target>
        </trans-unit>
        <trans-unit id="a2232cfd4a3393acb524fceccb47b55083688817" translate="yes" xml:space="preserve">
          <source>Ember.ApplicationInstance.BootOptions</source>
          <target state="translated">Ember.ApplicationInstance.BootOptions</target>
        </trans-unit>
        <trans-unit id="fbae5eff06ffeed2104908cafa5d3b3d094a21e6" translate="yes" xml:space="preserve">
          <source>Ember.ApplicationInstance.BootOptions  (public)</source>
          <target state="translated">Ember.ApplicationInstance.BootOptions (public)</target>
        </trans-unit>
        <trans-unit id="7a6b661413caca21b8638bd98ec882681fc7629a" translate="yes" xml:space="preserve">
          <source>Ember.Array</source>
          <target state="translated">Ember.Array</target>
        </trans-unit>
        <trans-unit id="7d267e11143241c2768795b23dd6e9174dd520e0" translate="yes" xml:space="preserve">
          <source>Ember.Array  (public)</source>
          <target state="translated">Ember.Array (public)</target>
        </trans-unit>
        <trans-unit id="77a52820f9bd23423391fb7a4eb2f524edaa19bb" translate="yes" xml:space="preserve">
          <source>Ember.ArrayProxy</source>
          <target state="translated">Ember.ArrayProxy</target>
        </trans-unit>
        <trans-unit id="9ec4b126867856ba8be80d545d3bbb7be0094d39" translate="yes" xml:space="preserve">
          <source>Ember.ArrayProxy  (public)</source>
          <target state="translated">Ember.ArrayProxy (public)</target>
        </trans-unit>
        <trans-unit id="9c18d3847387f52d7ee39b1c14871de7aa422ca2" translate="yes" xml:space="preserve">
          <source>Ember.AutoLocation</source>
          <target state="translated">Ember.AutoLocation</target>
        </trans-unit>
        <trans-unit id="c7d28c084f935480483d101f072ad808910a4d14" translate="yes" xml:space="preserve">
          <source>Ember.AutoLocation  (protected)</source>
          <target state="translated">Ember.AutoLocation (protected)</target>
        </trans-unit>
        <trans-unit id="462d399623a99849eea77ac5d2ae12167ac7a699" translate="yes" xml:space="preserve">
          <source>Ember.AutoLocation will select the best location option based off browser support with the priority order: history, hash, none.</source>
          <target state="translated">Ember.AutoLocation将根据浏览器的支持选择最佳位置选项,优先顺序为:历史、哈希、无。</target>
        </trans-unit>
        <trans-unit id="aec77311e4c408bf83fcdbde4dae193da72d75e7" translate="yes" xml:space="preserve">
          <source>Ember.Binding</source>
          <target state="translated">Ember.Binding</target>
        </trans-unit>
        <trans-unit id="f3717d52f74be7d7d0359d06896ad42f547a854f" translate="yes" xml:space="preserve">
          <source>Ember.Checkbox</source>
          <target state="translated">Ember.Checkbox</target>
        </trans-unit>
        <trans-unit id="5e56bd3c44b511f0966fcc566a3b02483fa25116" translate="yes" xml:space="preserve">
          <source>Ember.Checkbox  (public)</source>
          <target state="translated">Ember.Checkbox (public)</target>
        </trans-unit>
        <trans-unit id="004c0c2dde170d27e2693bfee255e491a257be9b" translate="yes" xml:space="preserve">
          <source>Ember.ClassNamesSupport  (private)</source>
          <target state="translated">Ember.ClassNamesSupport (private)</target>
        </trans-unit>
        <trans-unit id="bfe07a79702884b19260f81f95abfa611e7f6151" translate="yes" xml:space="preserve">
          <source>Ember.Component</source>
          <target state="translated">Ember.Component</target>
        </trans-unit>
        <trans-unit id="f6ae6bfb50179f1e71f169d96e6f4e4368443cd1" translate="yes" xml:space="preserve">
          <source>Ember.Component  (public)</source>
          <target state="translated">Ember.Component (public)</target>
        </trans-unit>
        <trans-unit id="4fac341c641a75aaa1fd6e8a189915498f94d674" translate="yes" xml:space="preserve">
          <source>Ember.ComputedProperty</source>
          <target state="translated">Ember.ComputedProperty</target>
        </trans-unit>
        <trans-unit id="562f5329d6f1ec790dfe1017360fcca367aeddb7" translate="yes" xml:space="preserve">
          <source>Ember.ComputedProperty  (public)</source>
          <target state="translated">Ember.ComputedProperty (public)</target>
        </trans-unit>
        <trans-unit id="6c510e5ba24a212639a396e57827fed387edb204" translate="yes" xml:space="preserve">
          <source>Ember.ContainerDebugAdapter</source>
          <target state="translated">Ember.ContainerDebugAdapter</target>
        </trans-unit>
        <trans-unit id="df50c89394a63fc293552827751d18800bcf9942" translate="yes" xml:space="preserve">
          <source>Ember.ContainerDebugAdapter  (public)</source>
          <target state="translated">Ember.ContainerDebugAdapter (public)</target>
        </trans-unit>
        <trans-unit id="dcbc72a2bb46513b04116ee7bc746f6e3b6e622e" translate="yes" xml:space="preserve">
          <source>Ember.Controller</source>
          <target state="translated">Ember.Controller</target>
        </trans-unit>
        <trans-unit id="17f756c20ded3cad7e0a09a565973b9d76e7b955" translate="yes" xml:space="preserve">
          <source>Ember.Controller  (public)</source>
          <target state="translated">Ember.Controller (public)</target>
        </trans-unit>
        <trans-unit id="c4d3930263bc5af8900c163ba205a96e63fd0126" translate="yes" xml:space="preserve">
          <source>Ember.ControllerMixin</source>
          <target state="translated">Ember.ControllerMixin</target>
        </trans-unit>
        <trans-unit id="9bc4666c599ba596aad10898fb31dbbeb0f38f7c" translate="yes" xml:space="preserve">
          <source>Ember.ControllerMixin  (private)</source>
          <target state="translated">Ember.ControllerMixin (private)</target>
        </trans-unit>
        <trans-unit id="bbf1f4d26725b6fb68a8f1c85c40b38534747cc1" translate="yes" xml:space="preserve">
          <source>Ember.Copyable  (private)</source>
          <target state="translated">Ember.Copyable(私人)</target>
        </trans-unit>
        <trans-unit id="11518d4a9d3520e935d1394352e9bb5f3c4e7357" translate="yes" xml:space="preserve">
          <source>Ember.CoreObject</source>
          <target state="translated">Ember.CoreObject</target>
        </trans-unit>
        <trans-unit id="8ca51e9c7b60ea9b5d9b1f279f411b64c90d52a8" translate="yes" xml:space="preserve">
          <source>Ember.CoreObject  (public)</source>
          <target state="translated">Ember.CoreObject (public)</target>
        </trans-unit>
        <trans-unit id="e133e0c3532844cdec14406a503b582a9844e6a5" translate="yes" xml:space="preserve">
          <source>Ember.CoreView</source>
          <target state="translated">Ember.CoreView</target>
        </trans-unit>
        <trans-unit id="a68334daf31e2cdebc677946276e707f71f6208d" translate="yes" xml:space="preserve">
          <source>Ember.CoreView  (private)</source>
          <target state="translated">Ember.CoreView (private)</target>
        </trans-unit>
        <trans-unit id="8be348e1cb0e873d3db08d0e2a68a28fdd7948e8" translate="yes" xml:space="preserve">
          <source>Ember.DataAdapter</source>
          <target state="translated">Ember.DataAdapter</target>
        </trans-unit>
        <trans-unit id="b29fdc042b440e9f4668c7d45c01b9a78495c7a3" translate="yes" xml:space="preserve">
          <source>Ember.DataAdapter  (public)</source>
          <target state="translated">Ember.DataAdapter (public)</target>
        </trans-unit>
        <trans-unit id="676210d1647ab8027b54057983cf5538bba9b3b4" translate="yes" xml:space="preserve">
          <source>Ember.Debug</source>
          <target state="translated">Ember.Debug</target>
        </trans-unit>
        <trans-unit id="a0da2d92176cfccca262ecc241a24318d2a86ba0" translate="yes" xml:space="preserve">
          <source>Ember.Debug  (public)</source>
          <target state="translated">Ember.Debug (public)</target>
        </trans-unit>
        <trans-unit id="2f906adc335e9b761e07b3293475c8e66ef5071f" translate="yes" xml:space="preserve">
          <source>Ember.DefaultResolver</source>
          <target state="translated">Ember.DefaultResolver</target>
        </trans-unit>
        <trans-unit id="90d6a4e87d8338861f3668e476209de1b77f4919" translate="yes" xml:space="preserve">
          <source>Ember.DefaultResolver  (public)</source>
          <target state="translated">Ember.DefaultResolver (public)</target>
        </trans-unit>
        <trans-unit id="8c16daa2a7d5e103cbe04f1f724b73c285d4e5f3" translate="yes" xml:space="preserve">
          <source>Ember.EmberENV</source>
          <target state="translated">Ember.EmberENV</target>
        </trans-unit>
        <trans-unit id="8fbe732266bd84c086612000161bdbb92528f311" translate="yes" xml:space="preserve">
          <source>Ember.Engine</source>
          <target state="translated">Ember.Engine</target>
        </trans-unit>
        <trans-unit id="1f0e0f3af58758f30d9a85815929c2d292e6bf36" translate="yes" xml:space="preserve">
          <source>Ember.Engine  (public)</source>
          <target state="translated">Ember.Engine (public)</target>
        </trans-unit>
        <trans-unit id="7c238cf79bb0628888616d7e4309703a64d23b05" translate="yes" xml:space="preserve">
          <source>Ember.EngineInstance</source>
          <target state="translated">Ember.EngineInstance</target>
        </trans-unit>
        <trans-unit id="93df00f84086aef83fce4728a0dad83c3aaf3c16" translate="yes" xml:space="preserve">
          <source>Ember.EngineInstance  (public)</source>
          <target state="translated">Ember.EngineInstance (public)</target>
        </trans-unit>
        <trans-unit id="001a636a73a18a0f9d500c1b97aa3be30d5d49f1" translate="yes" xml:space="preserve">
          <source>Ember.Enumerable</source>
          <target state="translated">Ember.Enumerable</target>
        </trans-unit>
        <trans-unit id="67dbb04f9fc4d64ff9bac7b140519f9c3dd0ee02" translate="yes" xml:space="preserve">
          <source>Ember.Enumerable  (private)</source>
          <target state="translated">Ember.Enumerable (private)</target>
        </trans-unit>
        <trans-unit id="cba1950a79cc8493d000756804730e98ffa58139" translate="yes" xml:space="preserve">
          <source>Ember.Error</source>
          <target state="translated">Ember.Error</target>
        </trans-unit>
        <trans-unit id="f1acf2310287f06c597a2c52770d8244af7591ce" translate="yes" xml:space="preserve">
          <source>Ember.Error  (public)</source>
          <target state="translated">Ember.Error (public)</target>
        </trans-unit>
        <trans-unit id="9aeebd4e38b3e365b11209f6fa31244818a51bd5" translate="yes" xml:space="preserve">
          <source>Ember.Evented</source>
          <target state="translated">Ember.Evented</target>
        </trans-unit>
        <trans-unit id="7bd15935f2c21d8b2a49ad51e7905ade64db7207" translate="yes" xml:space="preserve">
          <source>Ember.Evented  (public)</source>
          <target state="translated">Ember.Evented (public)</target>
        </trans-unit>
        <trans-unit id="19e394e034dc42afbeb64d78a26d1015a785fdca" translate="yes" xml:space="preserve">
          <source>Ember.FEATURES</source>
          <target state="translated">Ember.FEATURES</target>
        </trans-unit>
        <trans-unit id="d8be7c5784804b0911cc15176037583ac8d8b970" translate="yes" xml:space="preserve">
          <source>Ember.FEATURES  (public)</source>
          <target state="translated">Ember.FEATURES (public)</target>
        </trans-unit>
        <trans-unit id="d331badb95b3c9a36b514eeda7a0d682fc133519" translate="yes" xml:space="preserve">
          <source>Ember.HTMLBars.helpers</source>
          <target state="translated">Ember.HTMLBars.helpers</target>
        </trans-unit>
        <trans-unit id="5c8e12b95dc35365a72cb627f48ef05a7f80c117" translate="yes" xml:space="preserve">
          <source>Ember.HashLocation</source>
          <target state="translated">Ember.HashLocation</target>
        </trans-unit>
        <trans-unit id="a0d754e186044923dc32b52fe0548744992b2e19" translate="yes" xml:space="preserve">
          <source>Ember.HashLocation  (protected)</source>
          <target state="translated">Ember.HashLocation (保护)</target>
        </trans-unit>
        <trans-unit id="0d234143654f21bd2ec5578dde45e90665ba44c6" translate="yes" xml:space="preserve">
          <source>Ember.Helper</source>
          <target state="translated">Ember.Helper</target>
        </trans-unit>
        <trans-unit id="030a5339ade8f96f749cb064681437d06d22c258" translate="yes" xml:space="preserve">
          <source>Ember.Helper  (public)</source>
          <target state="translated">Ember.Helper(公共)</target>
        </trans-unit>
        <trans-unit id="257c7fd484531881391b4665b91387ab85f16839" translate="yes" xml:space="preserve">
          <source>Ember.HistoryLocation</source>
          <target state="translated">Ember.HistoryLocation</target>
        </trans-unit>
        <trans-unit id="1e195d77e21445ae1b7b378e785f51387cb67e1b" translate="yes" xml:space="preserve">
          <source>Ember.HistoryLocation  (protected)</source>
          <target state="translated">Ember.HistoryLocation (保护)</target>
        </trans-unit>
        <trans-unit id="1ea062cacc084f863a7e0a36a769f2573be51d22" translate="yes" xml:space="preserve">
          <source>Ember.HistoryLocation implements the location API using the browser's history.pushState API.</source>
          <target state="translated">Ember.HistoryLocation使用浏览器的history.pushState API实现位置API。</target>
        </trans-unit>
        <trans-unit id="755be5875f4ffc44a7e719defd0d1507d7e15671" translate="yes" xml:space="preserve">
          <source>Ember.Inflector</source>
          <target state="translated">Ember.Inflector</target>
        </trans-unit>
        <trans-unit id="d237b93ccf9f4cdaba16c7829037b58104677ff7" translate="yes" xml:space="preserve">
          <source>Ember.InjectedProperty</source>
          <target state="translated">Ember.InjectedProperty</target>
        </trans-unit>
        <trans-unit id="ea553cf27b26ad211e535d3443c961881b892c9f" translate="yes" xml:space="preserve">
          <source>Ember.Instrumentation</source>
          <target state="translated">Ember.Instrumentation</target>
        </trans-unit>
        <trans-unit id="0972ee1cabee0fe1743d39208ba02c356f442a90" translate="yes" xml:space="preserve">
          <source>Ember.Instrumentation  (private)</source>
          <target state="translated">Ember.Instrumentation(私人)</target>
        </trans-unit>
        <trans-unit id="a41099117c916f9f720247a59ab4186900f0d159" translate="yes" xml:space="preserve">
          <source>Ember.LinkComponent</source>
          <target state="translated">Ember.LinkComponent</target>
        </trans-unit>
        <trans-unit id="ed6be0c16e7127a346efc3853eb932134daa04e8" translate="yes" xml:space="preserve">
          <source>Ember.LinkComponent  (public)</source>
          <target state="translated">Ember.LinkComponent (public)</target>
        </trans-unit>
        <trans-unit id="ada85ce7774bdca250eea0e583c681132495af28" translate="yes" xml:space="preserve">
          <source>Ember.Location returns an instance of the correct implementation of the &lt;code&gt;location&lt;/code&gt; API.</source>
          <target state="translated">Ember.Location返回 &lt;code&gt;location&lt;/code&gt; API 的正确实现的实例。</target>
        </trans-unit>
        <trans-unit id="1736be843d715a11d44e91ef11c1882c50a009dc" translate="yes" xml:space="preserve">
          <source>Ember.Mixin</source>
          <target state="translated">Ember.Mixin</target>
        </trans-unit>
        <trans-unit id="b4059bf02c60cafb26c6998c612a7955c54aad96" translate="yes" xml:space="preserve">
          <source>Ember.Mixin  (public)</source>
          <target state="translated">Ember.Mixin (public)</target>
        </trans-unit>
        <trans-unit id="18c09e10a90b6a947387ff9ae92a0b4e3d45bd9a" translate="yes" xml:space="preserve">
          <source>Ember.MutableArray</source>
          <target state="translated">Ember.MutableArray</target>
        </trans-unit>
        <trans-unit id="fc2b9e4c91eb7635e2ce97c13a75e6a281791edd" translate="yes" xml:space="preserve">
          <source>Ember.MutableArray  (public)</source>
          <target state="translated">Ember.MutableArray (public)</target>
        </trans-unit>
        <trans-unit id="1e0f24413a44f66b86311afab56b8f958866877a" translate="yes" xml:space="preserve">
          <source>Ember.MutableEnumerable</source>
          <target state="translated">Ember.MutableEnumerable</target>
        </trans-unit>
        <trans-unit id="75ce85d83fe6e88e40654c329abd4a433777ca87" translate="yes" xml:space="preserve">
          <source>Ember.MutableEnumerable  (public)</source>
          <target state="translated">Ember.MutableEnumerable (public)</target>
        </trans-unit>
        <trans-unit id="d3f147201e81e6db6080df7c9d45ac58998e38d1" translate="yes" xml:space="preserve">
          <source>Ember.Namespace</source>
          <target state="translated">Ember.Namespace</target>
        </trans-unit>
        <trans-unit id="e329091b2d05f11ef48b7406b525d6441d89c54d" translate="yes" xml:space="preserve">
          <source>Ember.Namespace  (public)</source>
          <target state="translated">Ember.Namespace (public)</target>
        </trans-unit>
        <trans-unit id="f6019367540925feed6e870d2b10c321f90bea10" translate="yes" xml:space="preserve">
          <source>Ember.NativeArray</source>
          <target state="translated">Ember.NativeArray</target>
        </trans-unit>
        <trans-unit id="e3dd8a2f873025d0833c76171efecb727945ab25" translate="yes" xml:space="preserve">
          <source>Ember.NativeArray  (public)</source>
          <target state="translated">Ember.NativeArray (public)</target>
        </trans-unit>
        <trans-unit id="2afa2fd62959e2a8cda6f3db78b864432bf8a5c0" translate="yes" xml:space="preserve">
          <source>Ember.NoneLocation</source>
          <target state="translated">Ember.NoneLocation</target>
        </trans-unit>
        <trans-unit id="1416dff8d7a39cfd319fcd29e752251d4921afff" translate="yes" xml:space="preserve">
          <source>Ember.NoneLocation  (protected)</source>
          <target state="translated">Ember.NoneLocation (保护)</target>
        </trans-unit>
        <trans-unit id="e10de1bac86a102c4e67eb2f33759b53f198e225" translate="yes" xml:space="preserve">
          <source>Ember.NoneLocation does not interact with the browser. It is useful for testing, or when you need to manage state with your Router, but temporarily don't want it to muck with the URL (for example when you embed your application in a larger page).</source>
          <target state="translated">Ember.NoneLocation不与浏览器交互。它对测试很有用,或者当你需要用你的Router管理状态,但暂时不希望它对URL造成干扰时(例如当你把你的应用程序嵌入一个较大的页面时)。</target>
        </trans-unit>
        <trans-unit id="c8ff02b6a123b6fb7681af53956465dd399f4878" translate="yes" xml:space="preserve">
          <source>Ember.Object</source>
          <target state="translated">Ember.Object</target>
        </trans-unit>
        <trans-unit id="0756f25e5edbe3995503ad290de58e8cf2d71ffb" translate="yes" xml:space="preserve">
          <source>Ember.Object  (public)</source>
          <target state="translated">Ember.Object (public)</target>
        </trans-unit>
        <trans-unit id="0dd2de7672b3d5c8ea26f05f3c426669a35bff8f" translate="yes" xml:space="preserve">
          <source>Ember.ObjectProxy</source>
          <target state="translated">Ember.ObjectProxy</target>
        </trans-unit>
        <trans-unit id="f2790c3c0d2b8b5e153332befc899281f1edde34" translate="yes" xml:space="preserve">
          <source>Ember.ObjectProxy  (public)</source>
          <target state="translated">Ember.ObjectProxy (public)</target>
        </trans-unit>
        <trans-unit id="da55aedf341dd4339bf5bded1e2bdeb640106145" translate="yes" xml:space="preserve">
          <source>Ember.Observable</source>
          <target state="translated">Ember.Observable</target>
        </trans-unit>
        <trans-unit id="e2938e91cf66a189f17bb6eb2a17b9f851f81c1f" translate="yes" xml:space="preserve">
          <source>Ember.Observable  (public)</source>
          <target state="translated">Ember.Observable (public)</target>
        </trans-unit>
        <trans-unit id="d181235d1279747a2408ce9dfdf4c7a27df856c3" translate="yes" xml:space="preserve">
          <source>Ember.PromiseProxyMixin</source>
          <target state="translated">Ember.PromiseProxyMixin</target>
        </trans-unit>
        <trans-unit id="338e8a6be5416dd31dcd136f795b2f7a6828d529" translate="yes" xml:space="preserve">
          <source>Ember.PromiseProxyMixin  (public)</source>
          <target state="translated">Ember.PromiseProxyMixin (public)</target>
        </trans-unit>
        <trans-unit id="b6f3e452973dd0f1ee8115a28f148d2057d30aad" translate="yes" xml:space="preserve">
          <source>Ember.ProxyMixin</source>
          <target state="translated">Ember.ProxyMixin</target>
        </trans-unit>
        <trans-unit id="633077e9349b383f253bf4259daebe57aebe4c36" translate="yes" xml:space="preserve">
          <source>Ember.ProxyMixin  (private)</source>
          <target state="translated">Ember.ProxyMixin (私人)</target>
        </trans-unit>
        <trans-unit id="bc4f70201d28ddbca19b73d12161033f4c8d8a3a" translate="yes" xml:space="preserve">
          <source>Ember.Route</source>
          <target state="translated">Ember.Route</target>
        </trans-unit>
        <trans-unit id="d6e968d59f841af544abbc680ffd68a991d7868f" translate="yes" xml:space="preserve">
          <source>Ember.Route  (public)</source>
          <target state="translated">安博路(公共)</target>
        </trans-unit>
        <trans-unit id="2cfa8682da25ce3b717b9d6f7b87456bb19c3031" translate="yes" xml:space="preserve">
          <source>Ember.Router</source>
          <target state="translated">Ember.Router</target>
        </trans-unit>
        <trans-unit id="066a906ce0ac6845cf8228b5d5c955427bdd69bd" translate="yes" xml:space="preserve">
          <source>Ember.Router  (public)</source>
          <target state="translated">Ember.Router (public)</target>
        </trans-unit>
        <trans-unit id="c8e12de76e6230ab20f9aba5adedceb8fd8dfddf" translate="yes" xml:space="preserve">
          <source>Ember.Service</source>
          <target state="translated">Ember.Service</target>
        </trans-unit>
        <trans-unit id="ad1063b7c1c08fca7e440121c7db4a91b518d74a" translate="yes" xml:space="preserve">
          <source>Ember.Service  (public)</source>
          <target state="translated">Ember.Service(公共)</target>
        </trans-unit>
        <trans-unit id="a427e00434c3c4d9a83e79a43b5c0566ba5527ae" translate="yes" xml:space="preserve">
          <source>Ember.String</source>
          <target state="translated">Ember.String</target>
        </trans-unit>
        <trans-unit id="e9fb702e719806a83e2bac4727f734deae735f4a" translate="yes" xml:space="preserve">
          <source>Ember.String  (public)</source>
          <target state="translated">Ember.String (public)</target>
        </trans-unit>
        <trans-unit id="71de4de71c9f4f899314883459e4d8dbf9783f88" translate="yes" xml:space="preserve">
          <source>Ember.TargetActionSupport</source>
          <target state="translated">Ember.TargetActionSupport</target>
        </trans-unit>
        <trans-unit id="6dfff80b3871f24811a978a2c8ecacd7c4e58197" translate="yes" xml:space="preserve">
          <source>Ember.TargetActionSupport  (private)</source>
          <target state="translated">Ember.TargetActionSupport (private)</target>
        </trans-unit>
        <trans-unit id="f1a5c9dee104c44c592db6229972eeea357486ad" translate="yes" xml:space="preserve">
          <source>Ember.Templates.helpers</source>
          <target state="translated">Ember.Templates.helpers</target>
        </trans-unit>
        <trans-unit id="a0922ba888214f7d1ee936e8df22f07c6930b87e" translate="yes" xml:space="preserve">
          <source>Ember.Test</source>
          <target state="translated">Ember.Test</target>
        </trans-unit>
        <trans-unit id="da0c137ca5da0da15d26c86733b6d526fc7298f3" translate="yes" xml:space="preserve">
          <source>Ember.Test  (public)</source>
          <target state="translated">Ember.Test (public)</target>
        </trans-unit>
        <trans-unit id="4b15e99ca664d4c1015a7d6ad76ac31e982b1877" translate="yes" xml:space="preserve">
          <source>Ember.Test.Adapter</source>
          <target state="translated">Ember.Test.Adapter</target>
        </trans-unit>
        <trans-unit id="69c656334ea11b6899a9291b8d0e07b57d84436f" translate="yes" xml:space="preserve">
          <source>Ember.Test.Adapter  (public)</source>
          <target state="translated">Ember.Test.Adapter (public)</target>
        </trans-unit>
        <trans-unit id="3ce4d1363ce9d405db2e5940a5bd41b4c21fbed0" translate="yes" xml:space="preserve">
          <source>Ember.Test.QUnitAdapter</source>
          <target state="translated">Ember.Test.QUnitAdapter</target>
        </trans-unit>
        <trans-unit id="c96023d8839b56cab3d00c93601ec6e1dfd55f91" translate="yes" xml:space="preserve">
          <source>Ember.Test.QUnitAdapter  (public)</source>
          <target state="translated">Ember.Test.QUnitAdapter (public)</target>
        </trans-unit>
        <trans-unit id="3fb0c3d1157d548a3ac017f9bc1dfe23a02fe0b8" translate="yes" xml:space="preserve">
          <source>Ember.TextArea</source>
          <target state="translated">Ember.TextArea</target>
        </trans-unit>
        <trans-unit id="80bc4c0a10d44901a0e65cb1a32e71e268b2af2c" translate="yes" xml:space="preserve">
          <source>Ember.TextArea  (public)</source>
          <target state="translated">Ember.TextArea (public)</target>
        </trans-unit>
        <trans-unit id="aa809523b3f9796d1ad9291b98aaf29630f94fd5" translate="yes" xml:space="preserve">
          <source>Ember.TextField</source>
          <target state="translated">Ember.TextField</target>
        </trans-unit>
        <trans-unit id="cb358ee1c518cb846f5e0712ef7e587646593c67" translate="yes" xml:space="preserve">
          <source>Ember.TextField  (public)</source>
          <target state="translated">Ember.TextField (public)</target>
        </trans-unit>
        <trans-unit id="348ebabf9a4cff246e5393eaa3816c64b2e3b6cb" translate="yes" xml:space="preserve">
          <source>Ember.TextSupport</source>
          <target state="translated">Ember.TextSupport</target>
        </trans-unit>
        <trans-unit id="9e8ced72acd669c0156721c5eafb022e355af436" translate="yes" xml:space="preserve">
          <source>Ember.TextSupport  (private)</source>
          <target state="translated">Ember.TextSupport (private)</target>
        </trans-unit>
        <trans-unit id="5e057edb8ae34457dbf2e10e2ada8d5cca1a88fe" translate="yes" xml:space="preserve">
          <source>Ember.ViewMixin  (private)</source>
          <target state="translated">Ember.ViewMixin(私人)。</target>
        </trans-unit>
        <trans-unit id="27516aba2a3cace3a60247e55a9348d83d01d81e" translate="yes" xml:space="preserve">
          <source>Ember.computed</source>
          <target state="translated">Ember.computed</target>
        </trans-unit>
        <trans-unit id="8fd52f6ff95fe6988b43c3c9527509d056797d42" translate="yes" xml:space="preserve">
          <source>Ember.computed  (public)</source>
          <target state="translated">Ember.computed (public)</target>
        </trans-unit>
        <trans-unit id="808a9073912c9ba151a0fc3d2317926009d39d7e" translate="yes" xml:space="preserve">
          <source>Ember.computed.gt()</source>
          <target state="translated">Ember.computed.gt()</target>
        </trans-unit>
        <trans-unit id="8e5d2631dbd650878982a89efd2b8f1ca1be2b28" translate="yes" xml:space="preserve">
          <source>Ember.computed.lt()</source>
          <target state="translated">Ember.computed.lt()</target>
        </trans-unit>
        <trans-unit id="d617dc014b5eb8b8b009044b84bd41b3b4a76bb0" translate="yes" xml:space="preserve">
          <source>Ember.computed.or()</source>
          <target state="translated">Ember.computed.or()</target>
        </trans-unit>
        <trans-unit id="254b8d437f289bc82dce00d81294f85e82919c0a" translate="yes" xml:space="preserve">
          <source>Ember.inject</source>
          <target state="translated">Ember.inject</target>
        </trans-unit>
        <trans-unit id="fb5831f1f8afa770b8334b350846e7e387d74860" translate="yes" xml:space="preserve">
          <source>Ember.inject  (public)</source>
          <target state="translated">Ember.inject (public)</target>
        </trans-unit>
        <trans-unit id="16ecb5f9431de8b0cec5717985eb281e13fa564f" translate="yes" xml:space="preserve">
          <source>Ember.js</source>
          <target state="translated">Ember.js</target>
        </trans-unit>
        <trans-unit id="0e7a1b3338236829f879a20135c785e528fa6157" translate="yes" xml:space="preserve">
          <source>Ember.js Guides</source>
          <target state="translated">Ember.js 指南</target>
        </trans-unit>
        <trans-unit id="2744e8418fe1dc813d4107ec59af935c3a9e9460" translate="yes" xml:space="preserve">
          <source>Ember.js is a productive, battle-tested JavaScript framework for building modern web applications. It includes everything you need to build rich UIs that work on any device. It does so by providing developers many features that are essential to manage complexity in modern web applications, as well as an integrated development toolkit that enables rapid iteration.</source>
          <target state="translated">Ember.js是一个高效的、经过实战检验的JavaScript框架,用于构建现代Web应用。它包含了你需要构建在任何设备上工作的丰富的用户界面的一切。它为开发者提供了许多在现代Web应用中管理复杂性所必需的功能,以及一个能够快速迭代的集成开发工具包。</target>
        </trans-unit>
        <trans-unit id="68e02ce12739d6dfefd2c5d4f6b2805cec3b3e15" translate="yes" xml:space="preserve">
          <source>Ember.js itself works with any type of back end: REST, JSON:API, GraphQL, or anything else. To learn about other ways to handle data and to find extensions, check out the guide for &lt;a href=&quot;../in-depth-topics/making-api-requests&quot;&gt;making API requests&lt;/a&gt;, look for plugins on &lt;a href=&quot;https://www.emberobserver.com/&quot;&gt;Ember Observer&lt;/a&gt;, and search for community-made tutorials.</source>
          <target state="translated">Ember.js本身可与任何类型的后端一起使用：REST，JSON：API，GraphQL或其他任何后端。要了解其他处理数据和查找扩展的方法，请查看有关&lt;a href=&quot;../in-depth-topics/making-api-requests&quot;&gt;发出API请求&lt;/a&gt;的指南，在&lt;a href=&quot;https://www.emberobserver.com/&quot;&gt;Ember Observer&lt;/a&gt;上查找插件，并搜索社区制作的教程。</target>
        </trans-unit>
        <trans-unit id="3765a2afa53fcbc64f3f9564b4080b8eb053b165" translate="yes" xml:space="preserve">
          <source>Ember.js itself works with any type of back end: REST, JSON:API, GraphQL, or anything else. To learn about other ways to handle data and to find extensions, check out the guide for &lt;a href=&quot;https://guides.emberjs.com/in-depth-topics/making-api-requests/&quot;&gt;making API requests&lt;/a&gt;, look for plugins on &lt;a href=&quot;https://www.emberobserver.com/&quot;&gt;Ember Observer&lt;/a&gt;, and search for community-made tutorials.</source>
          <target state="translated">Ember.js本身可与任何类型的后端一起使用：REST，JSON：API，GraphQL或其他任何后端。要了解其他处理数据和查找扩展的方法，请查看有关&lt;a href=&quot;https://guides.emberjs.com/in-depth-topics/making-api-requests/&quot;&gt;发出API请求&lt;/a&gt;的指南，在&lt;a href=&quot;https://www.emberobserver.com/&quot;&gt;Ember Observer&lt;/a&gt;上查找插件，并搜索社区制作的教程。</target>
        </trans-unit>
        <trans-unit id="a3c45a09b13c5d71314ee2400e1e100d1f2ef430" translate="yes" xml:space="preserve">
          <source>Ember.on()</source>
          <target state="translated">Ember.on()</target>
        </trans-unit>
        <trans-unit id="1974fd7a394c3ab546f760dc6de20d0d0bc2f477" translate="yes" xml:space="preserve">
          <source>Ember.run</source>
          <target state="translated">Ember.run</target>
        </trans-unit>
        <trans-unit id="3406ea55d7b1b98047bbe1312f773e59d00ca3b5" translate="yes" xml:space="preserve">
          <source>Ember.run  (public)</source>
          <target state="translated">Ember.run (public)</target>
        </trans-unit>
        <trans-unit id="46897c079a4ac7aac4e47f26ec88ff0a988d7467" translate="yes" xml:space="preserve">
          <source>EmberArray</source>
          <target state="translated">EmberArray</target>
        </trans-unit>
        <trans-unit id="a7f5378a54d4d42b81036d4e7c6a5d8d5f2d8c73" translate="yes" xml:space="preserve">
          <source>EmberData allows users to opt-in and remove code that exists to support deprecated behaviors.</source>
          <target state="translated">EmberData允许用户选择并删除存在的支持废弃行为的代码。</target>
        </trans-unit>
        <trans-unit id="c5d64f8e1e7bb6deb564fdce4b8f7d30db04eb11" translate="yes" xml:space="preserve">
          <source>EmberData allows users to test features that are implemented but not yet available even in canary.</source>
          <target state="translated">EmberData允许用户测试那些即使在金丝雀中也已经实现但还没有的功能。</target>
        </trans-unit>
        <trans-unit id="00e0027fb4b06bef4152b4a1495644ed8f42fc32" translate="yes" xml:space="preserve">
          <source>EmberData.DeprecatedEvented</source>
          <target state="translated">EmberData.DeprecatedEvented</target>
        </trans-unit>
        <trans-unit id="e2e6abf829f4727e016352e7790205c1bbec9dfc" translate="yes" xml:space="preserve">
          <source>EmberObject</source>
          <target state="translated">EmberObject</target>
        </trans-unit>
        <trans-unit id="3647edc26f7f20bff0766b3c4bc36f0805e91112" translate="yes" xml:space="preserve">
          <source>EmberRouter</source>
          <target state="translated">EmberRouter</target>
        </trans-unit>
        <trans-unit id="e12348abf3ab7ba8084d06a467c799e97f89de04" translate="yes" xml:space="preserve">
          <source>Empty Lists</source>
          <target state="translated">空列表</target>
        </trans-unit>
        <trans-unit id="eb0036d3919fa6e5318d080cdcfddf3f172b1238" translate="yes" xml:space="preserve">
          <source>Enable Ember Favicon</source>
          <target state="translated">启用微光圈图标</target>
        </trans-unit>
        <trans-unit id="7f403ef0109c0523a5d41cfc16187b8459d211dc" translate="yes" xml:space="preserve">
          <source>Enable Tomster</source>
          <target state="translated">启用Tomster</target>
        </trans-unit>
        <trans-unit id="f3ebd8e1e9e694e654d18823b23e55f1e1525e49" translate="yes" xml:space="preserve">
          <source>Enables components to take a list of parameters as arguments. For example, a component that takes two parameters with the names &lt;code&gt;name&lt;/code&gt; and &lt;code&gt;age&lt;/code&gt;:</source>
          <target state="translated">使组件能够将参数列表作为参数。例如，一个带有两个名称分别为 &lt;code&gt;name&lt;/code&gt; 和 &lt;code&gt;age&lt;/code&gt; 的参数的组件：</target>
        </trans-unit>
        <trans-unit id="17ba52a4a99379b72fa31fc0c68cf94e23629ac3" translate="yes" xml:space="preserve">
          <source>Enabling At Runtime</source>
          <target state="translated">在运行时启用</target>
        </trans-unit>
        <trans-unit id="3843d1e09c0507b629e0dba6f2ac93f7f143adac" translate="yes" xml:space="preserve">
          <source>Enabling this feature makes template-only components more consistent with angle-bracket invocation and with Glimmer components. Additionally it improves the performance of template-only components (there is no JS object instantiated to provide context) and makes them an excellent replacement for use of Ember's more complex and now discouraged API &lt;code&gt;{{partial&lt;/code&gt;.</source>
          <target state="translated">启用此功能可使纯模板组件与尖括号和Glimmer组件更加一致。此外，它还提高了仅模板组件的性能（没有实例化JS对象以提供上下文），并使它们成为使用Ember更复杂且现在不推荐使用的API &lt;code&gt;{{partial&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="64fa9774d1de3f05ab8171a48958b3170113f2a3" translate="yes" xml:space="preserve">
          <source>Enabling this feature will result in only the contents of the template being rendered, and additionally in no classic Ember component instance being instantiated to provide it context.</source>
          <target state="translated">启用此功能将导致只有模板的内容被渲染,另外没有经典的Ember组件实例被实例化来提供上下文。</target>
        </trans-unit>
        <trans-unit id="851f20cb075439a384349c1a4fca25868b3d734e" translate="yes" xml:space="preserve">
          <source>Endpoint Path Customization</source>
          <target state="translated">端点路径定制</target>
        </trans-unit>
        <trans-unit id="8f45cadea6cdda33e345e17a8e6d63f0f0496c1f" translate="yes" xml:space="preserve">
          <source>Endpoint path customization</source>
          <target state="translated">端点路径定制</target>
        </trans-unit>
        <trans-unit id="dc210213e8360e285af511ee9be69cfb2d8f6c2c" translate="yes" xml:space="preserve">
          <source>Endpoint paths can be prefixed with a &lt;code&gt;namespace&lt;/code&gt; by setting the namespace property on the adapter:</source>
          <target state="translated">通过在适配器上设置namespace属性，可以为端点路径添加 &lt;code&gt;namespace&lt;/code&gt; 前缀：</target>
        </trans-unit>
        <trans-unit id="e548ddf520419fd5ee11365d3d4182b276507d87" translate="yes" xml:space="preserve">
          <source>Ends a RunLoop. This must be called sometime after you call &lt;code&gt;begin()&lt;/code&gt; to flush any deferred actions. This is a lower-level way to use a RunLoop instead of using &lt;code&gt;run()&lt;/code&gt;.</source>
          <target state="translated">结束运行循环。必须在调用 &lt;code&gt;begin()&lt;/code&gt; 刷新任何延迟的操作后的某个时间调用此函数。这是使用RunLoop而不是 &lt;code&gt;run()&lt;/code&gt; 的较低层方法。</target>
        </trans-unit>
        <trans-unit id="c90317873b2dd0dca17175bfa2d5c9c12a9ea898" translate="yes" xml:space="preserve">
          <source>Ends a RunLoop. This must be called sometime after you call &lt;code&gt;run.begin()&lt;/code&gt; to flush any deferred actions. This is a lower-level way to use a RunLoop instead of using &lt;code&gt;run()&lt;/code&gt;.</source>
          <target state="translated">结束运行循环。必须在调用 &lt;code&gt;run.begin()&lt;/code&gt; 后刷新某个延迟的操作，然后再调用此方法。这是使用RunLoop而不是 &lt;code&gt;run()&lt;/code&gt; 的较低层方法。</target>
        </trans-unit>
        <trans-unit id="c1f65ddb75ed7d97e701168af35171410be8f9e7" translate="yes" xml:space="preserve">
          <source>Engine</source>
          <target state="translated">Engine</target>
        </trans-unit>
        <trans-unit id="1ceb9d2f3f43a5d49f7e4af45d99b54ee33c643c" translate="yes" xml:space="preserve">
          <source>EngineInstance</source>
          <target state="translated">EngineInstance</target>
        </trans-unit>
        <trans-unit id="83dfb23cc274b32d70e2d1af02d1484beabb488c" translate="yes" xml:space="preserve">
          <source>Engines also manage initializers and instance initializers.</source>
          <target state="translated">引擎还管理初始化器和实例初始化器。</target>
        </trans-unit>
        <trans-unit id="cbc12cb5aeccadfc50c98322468e8d3f9bf4626c" translate="yes" xml:space="preserve">
          <source>Engines are good for organizations that have multiple teams, where each team has their own area that is clearly separated from the others. The isolation is good when it matches organizational boundaries, but adds unnecessary complexity when there is not a good match.</source>
          <target state="translated">引擎对于有多个团队的组织来说是很好的,每个团队都有自己的领域,与其他团队明确分开。当与组织边界相匹配时,这种隔离是好的,但当没有很好的匹配时,就会增加不必要的复杂性。</target>
        </trans-unit>
        <trans-unit id="21c518bca901bd382b031b7b684a16df34cb5292" translate="yes" xml:space="preserve">
          <source>Engines are used by a number of large organizations to power sites with million of users.</source>
          <target state="translated">引擎被一些大型机构用来驱动拥有百万用户的网站。</target>
        </trans-unit>
        <trans-unit id="b83f54e3881318f4f77eaddfc794c5ba9d83957e" translate="yes" xml:space="preserve">
          <source>Engines can spawn &lt;code&gt;EngineInstance&lt;/code&gt; instances via &lt;code&gt;buildInstance()&lt;/code&gt;.</source>
          <target state="translated">引擎可以通过 &lt;code&gt;buildInstance()&lt;/code&gt; 生成 &lt;code&gt;EngineInstance&lt;/code&gt; 实例。</target>
        </trans-unit>
        <trans-unit id="3b87351998c22e252f4f1bd1553c545f348ec4ff" translate="yes" xml:space="preserve">
          <source>Engines provide an antidote to these problems by allowing for distributed development, testing, and packaging of logically-grouped pieces of an application.</source>
          <target state="translated">引擎通过允许分布式开发、测试和打包应用程序的逻辑分组片段,为这些问题提供了解药。</target>
        </trans-unit>
        <trans-unit id="6e3e803a360b2dea25b3f7717bf0ca97563a097a" translate="yes" xml:space="preserve">
          <source>Ensure that the target method is never called more frequently than the specified spacing period. The target method is called immediately.</source>
          <target state="translated">确保目标方法的调用频率绝不会超过指定的间隔期。目标方法会立即被调用。</target>
        </trans-unit>
        <trans-unit id="8662d647975acf6437d48da8b7fff03b28824980" translate="yes" xml:space="preserve">
          <source>Enter &lt;em&gt;dynamic segments&lt;/em&gt;.</source>
          <target state="translated">输入&lt;em&gt;动态细分&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="7688dfee832085b479474f9720115719cee22622" translate="yes" xml:space="preserve">
          <source>Enumberable</source>
          <target state="translated">Enumberable</target>
        </trans-unit>
        <trans-unit id="83df7a7ef8fa21dd3116045758d3e9407ca3149d" translate="yes" xml:space="preserve">
          <source>Enumerable</source>
          <target state="translated">Enumerable</target>
        </trans-unit>
        <trans-unit id="7d2e28d9448f286359bfee7b46440bedbb9fdf58" translate="yes" xml:space="preserve">
          <source>Enumerables</source>
          <target state="translated">Enumerables</target>
        </trans-unit>
        <trans-unit id="75b20f050d70ab17ebe45f963c1d6074808f8cc8" translate="yes" xml:space="preserve">
          <source>Environment-Specific Assets</source>
          <target state="translated">特定环境资产</target>
        </trans-unit>
        <trans-unit id="6226739c0c20e77eb4b6aec928c74de944e42429" translate="yes" xml:space="preserve">
          <source>Errback Example</source>
          <target state="translated">Errback示例</target>
        </trans-unit>
        <trans-unit id="7f2f6a15cf8da2b27e5a4af47b58e7ad71c0b3d9" translate="yes" xml:space="preserve">
          <source>Error</source>
          <target state="translated">Error</target>
        </trans-unit>
        <trans-unit id="ef145476280f173df11aef2c3faf1fcf94827764" translate="yes" xml:space="preserve">
          <source>Error-tolerant form of &lt;code&gt;Ember.set&lt;/code&gt;. Will not blow up if any part of the chain is &lt;code&gt;undefined&lt;/code&gt;, &lt;code&gt;null&lt;/code&gt;, or destroyed.</source>
          <target state="translated">&lt;code&gt;Ember.set&lt;/code&gt; 的容错形式。如果链的任何部分 &lt;code&gt;undefined&lt;/code&gt; ，为 &lt;code&gt;null&lt;/code&gt; 或被破坏，则不会爆炸。</target>
        </trans-unit>
        <trans-unit id="14bd83b9c257411bd7a756b8c613118eb2ddd70a" translate="yes" xml:space="preserve">
          <source>Error-tolerant form of &lt;code&gt;set&lt;/code&gt;. Will not blow up if any part of the chain is &lt;code&gt;undefined&lt;/code&gt;, &lt;code&gt;null&lt;/code&gt;, or destroyed.</source>
          <target state="translated">&lt;code&gt;set&lt;/code&gt; 的容错形式。如果链的任何部分 &lt;code&gt;undefined&lt;/code&gt; ，为 &lt;code&gt;null&lt;/code&gt; 或被破坏，则不会爆炸。</target>
        </trans-unit>
        <trans-unit id="805e86a8cbf628e38e4c45612c005a504009e79a" translate="yes" xml:space="preserve">
          <source>Errors</source>
          <target state="translated">Errors</target>
        </trans-unit>
        <trans-unit id="231ec3223ea840501661d5b8f867f20a371c299c" translate="yes" xml:space="preserve">
          <source>Errors can be displayed to the user by accessing their property name to get an array of all the error objects for that property. Each error object is a JavaScript object with two keys:</source>
          <target state="translated">通过访问其属性名来获取该属性的所有错误对象的数组,可以向用户显示错误。每个错误对象是一个JavaScript对象,有两个键。</target>
        </trans-unit>
        <trans-unit id="fe67e5b1f270bbb85d379c9d76b5741bf78dda06" translate="yes" xml:space="preserve">
          <source>Errors within &lt;code&gt;Ember.run.later&lt;/code&gt; (&lt;a href=&quot;https://github.com/ebryn/backburner.js&quot;&gt;Backburner.js&lt;/a&gt;)</source>
          <target state="translated">&lt;code&gt;Ember.run.later&lt;/code&gt; （&lt;a href=&quot;https://github.com/ebryn/backburner.js&quot;&gt;Backburner.js&lt;/a&gt;）中的错误</target>
        </trans-unit>
        <trans-unit id="2ae4292a5efb921c2eaf1cfd6146a07189f56e2a" translate="yes" xml:space="preserve">
          <source>Errors within &lt;code&gt;Ember.run.later&lt;/code&gt; Backburner</source>
          <target state="translated">&lt;code&gt;Ember.run.later&lt;/code&gt; Backburner中的错误</target>
        </trans-unit>
        <trans-unit id="c4a29dcd0f0bbd18d3a1d690ca89cd6a94a9fbd5" translate="yes" xml:space="preserve">
          <source>Errors within an &lt;code&gt;RSVP.Promise&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;RSVP.Promise&lt;/code&gt; 中的错误</target>
        </trans-unit>
        <trans-unit id="c3f1c141505b88cb980c471878c8d61b5b40d7ff" translate="yes" xml:space="preserve">
          <source>Escaping HTML Content</source>
          <target state="translated">逃避HTML内容</target>
        </trans-unit>
        <trans-unit id="906539ca5112675ad7ab7f1e2cf0ebe41179e939" translate="yes" xml:space="preserve">
          <source>Essentially, the &lt;code&gt;Application&lt;/code&gt;&lt;em&gt;defines your application&lt;/em&gt; while the &lt;code&gt;ApplicationInstance&lt;/code&gt;&lt;em&gt;manages its state&lt;/em&gt;.</source>
          <target state="translated">本质上， &lt;code&gt;Application&lt;/code&gt; &lt;em&gt;定义应用程序，&lt;/em&gt;而 &lt;code&gt;ApplicationInstance&lt;/code&gt; &lt;em&gt;管理其状态&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="7e0bd11626130293bbb8948821c367b4e145fa8c" translate="yes" xml:space="preserve">
          <source>Even though &lt;code&gt;get name&lt;/code&gt; is a method, we can treat it like a normal property. However, if we try to set the name property to a new value, we get an error:</source>
          <target state="translated">即使 &lt;code&gt;get name&lt;/code&gt; 是一种方法，我们也可以将其视为普通属性。但是，如果尝试将name属性设置为新值，则会收到错误消息：</target>
        </trans-unit>
        <trans-unit id="3a8e97d81f1cccdfa6bfa118b8e143fc01c7d4cc" translate="yes" xml:space="preserve">
          <source>Event Delegation</source>
          <target state="translated">活动委托</target>
        </trans-unit>
        <trans-unit id="1e1cda5690056886f9af8a7b917588091c3378d3" translate="yes" xml:space="preserve">
          <source>Event Handler Methods</source>
          <target state="translated">事件处理程序方法</target>
        </trans-unit>
        <trans-unit id="4c874625e9b4c4789838bc2475c5fa96b872d071" translate="yes" xml:space="preserve">
          <source>Event Handlers</source>
          <target state="translated">事件处理程序</target>
        </trans-unit>
        <trans-unit id="ed4d874df84489b3b2e3acc9c685b0095bc84604" translate="yes" xml:space="preserve">
          <source>Event Names</source>
          <target state="translated">活动名称</target>
        </trans-unit>
        <trans-unit id="c819cbacc479d7bead41a4ce4b723c74d3e0fa1a" translate="yes" xml:space="preserve">
          <source>Event Propagation</source>
          <target state="translated">事件传播</target>
        </trans-unit>
        <trans-unit id="3ed3f92f8f3f5211d4bdfa5116c3d34b5c522d37" translate="yes" xml:space="preserve">
          <source>Event handlers on Classic components, such as &lt;code&gt;click()&lt;/code&gt; and &lt;code&gt;mouseEnter()&lt;/code&gt;. These APIs still work without the integration enabled, but they no longer receive a jQuery event, they receive a native Event instead. You can convert to using native events incrementally by using the &lt;a href=&quot;https://github.com/emberjs/ember-jquery-legacy&quot;&gt;&lt;code&gt;ember-jquery-legacy&lt;/code&gt;&lt;/a&gt; addon, which provides a function that converts a jQuery event into a native event safely. Once all of your event handlers have been converted, you can disable jQuery integration.</source>
          <target state="translated">Classic组件上的事件处理程序，例如 &lt;code&gt;click()&lt;/code&gt; 和 &lt;code&gt;mouseEnter()&lt;/code&gt; 。这些API在未启用集成的情况下仍然可以工作，但是它们不再接收jQuery事件，而是接收本机事件。您可以通过使用&lt;a href=&quot;https://github.com/emberjs/ember-jquery-legacy&quot;&gt; &lt;code&gt;ember-jquery-legacy&lt;/code&gt; &lt;/a&gt;插件来逐步转换为使用本机事件，该插件提供了将jQuery事件安全地转换为本机事件的功能。转换完所有事件处理程序后，您可以禁用jQuery集成。</target>
        </trans-unit>
        <trans-unit id="f3014b663663976c245f863a9d00e4e29abf82cc" translate="yes" xml:space="preserve">
          <source>Event names passed to &lt;code&gt;Ember.instrument&lt;/code&gt; are namespaced by periods, from more general to more specific. Subscribers can listen for events by whatever level of granularity they are interested in.</source>
          <target state="translated">传递给 &lt;code&gt;Ember.instrument&lt;/code&gt; 的事件名称按句点命名，从更一般到更具体。订户可以按他们感兴趣的任何粒度级别监听事件。</target>
        </trans-unit>
        <trans-unit id="06d2da8cd620cdca5a8c4a25bc54d444bda9ad32" translate="yes" xml:space="preserve">
          <source>EventTarget</source>
          <target state="translated">EventTarget</target>
        </trans-unit>
        <trans-unit id="668fe3075b1c8f275c8cdda0675518e270a9253f" translate="yes" xml:space="preserve">
          <source>Evented</source>
          <target state="translated">Evented</target>
        </trans-unit>
        <trans-unit id="39d3f17773993ca29c0897c7d603e6420be25cec" translate="yes" xml:space="preserve">
          <source>Evented functions are annotated using &lt;a href=&quot;https://api.emberjs.com/ember/release/classes/Evented/methods#on&quot;&gt;&lt;code&gt;Ember.on()&lt;/code&gt;&lt;/a&gt;:</source>
          <target state="translated">事件函数使用&lt;a href=&quot;https://api.emberjs.com/ember/release/classes/Evented/methods#on&quot;&gt; &lt;code&gt;Ember.on()&lt;/code&gt; &lt;/a&gt;进行注释：</target>
        </trans-unit>
        <trans-unit id="2dd224c7edd8a11361e1f04e5c896bf98f07fcec" translate="yes" xml:space="preserve">
          <source>Evented functions are annotated using &lt;code&gt;Ember.on()&lt;/code&gt;:</source>
          <target state="translated">事件函数使用 &lt;code&gt;Ember.on()&lt;/code&gt; 进行注释：</target>
        </trans-unit>
        <trans-unit id="6f7752ccc21875c927ff35396579c41b6d3bbd78" translate="yes" xml:space="preserve">
          <source>Evented.on()</source>
          <target state="translated">Evented.on()</target>
        </trans-unit>
        <trans-unit id="c5497bca58468ae64aed6c0fd921109217988db3" translate="yes" xml:space="preserve">
          <source>Events</source>
          <target state="translated">Events</target>
        </trans-unit>
        <trans-unit id="98b5a08f55dcecc9edd038f3dd1d6cbdd1569fa3" translate="yes" xml:space="preserve">
          <source>Events and Flags</source>
          <target state="translated">活动和旗帜</target>
        </trans-unit>
        <trans-unit id="c3b22ffc16fe49ca532580490b956657e13aea60" translate="yes" xml:space="preserve">
          <source>Events are named functions that are invoked when sent to a record. The record will first look for a method with the given name on the current state. If no method is found, it will search the current state's parent, and then its grandparent, and so on until reaching the top of the hierarchy. If the root is reached without an event handler being found, an exception will be raised. This can be very helpful when debugging new features.</source>
          <target state="translated">事件是被命名的函数,当发送到记录时,会被调用。记录首先会在当前状态上寻找一个带有给定名称的方法,如果没有找到方法,它将搜索当前状态的父代,然后是它的祖代,以此类推,直到到达层次结构的顶端。如果没有找到方法,它将搜索当前状态的父级,然后是它的祖级,以此类推,直到到达层次结构的顶端。如果到达根节点时没有找到事件处理程序,就会引发一个异常。这在调试新功能时非常有用。</target>
        </trans-unit>
        <trans-unit id="df4e45185747f0028b1ea444369aa7e5c739e2b4" translate="yes" xml:space="preserve">
          <source>Events are sent by the record or its store to the record's &lt;code&gt;currentState&lt;/code&gt; property. How the state reacts to these events is dependent on which state it is in. In some states, certain events will be invalid and will cause an exception to be raised.</source>
          <target state="translated">事件由记录或其存储发送到记录的 &lt;code&gt;currentState&lt;/code&gt; 属性。状态对这些事件的反应方式取决于它所处的状态。在某些状态下，某些事件将无效并导致引发异常。</target>
        </trans-unit>
        <trans-unit id="4e76329a32d0cf295edc0f75d863e97f0a132360" translate="yes" xml:space="preserve">
          <source>Events should transition to a different state if appropriate. This can be done by calling the record's &lt;code&gt;transitionTo()&lt;/code&gt; method with a path to the desired state. The state manager will attempt to resolve the state path relative to the current state. If no state is found at that path, it will attempt to resolve it relative to the current state's parent, and then its parent, and so on until the root is reached. For example, imagine a hierarchy like this:</source>
          <target state="translated">如果合适，事件应转换为其他状态。这可以通过调用记录的 &lt;code&gt;transitionTo()&lt;/code&gt; 方法以及所需状态的路径来完成。状态管理器将尝试解析相对于当前状态的状态路径。如果在该路径上未找到任何状态，它将尝试相对于当前状态的父级（然后是其父级）解析该状态，依此类推，直到到达根为止。例如，想象这样一个层次结构：</target>
        </trans-unit>
        <trans-unit id="d64b9a4b70475d5110fc98496e65068a350e1fd9" translate="yes" xml:space="preserve">
          <source>Events triggered through the action helper will automatically have &lt;code&gt;.preventDefault()&lt;/code&gt; called on them. You do not need to do so in your event handlers. If you need to allow event propagation (to handle file inputs for example) you can supply the &lt;code&gt;preventDefault=false&lt;/code&gt; option to the &lt;code&gt;{{action}}&lt;/code&gt; helper:</source>
          <target state="translated">通过动作助手触发的事件将自动在其上调用 &lt;code&gt;.preventDefault()&lt;/code&gt; 。您不需要在事件处理程序中这样做。如果需要允许事件传播（例如，处理文件输入），则可以向 &lt;code&gt;{{action}}&lt;/code&gt; 帮助器提供 &lt;code&gt;preventDefault=false&lt;/code&gt; 选项：</target>
        </trans-unit>
        <trans-unit id="acfc76075c9404a1b5ba14c3874489c29112f142" translate="yes" xml:space="preserve">
          <source>Evergreen Browsers</source>
          <target state="translated">长青浏览器</target>
        </trans-unit>
        <trans-unit id="49d7fbab2114faecfd1195a14711db719f317f57" translate="yes" xml:space="preserve">
          <source>Evergreen browsers</source>
          <target state="translated">长青浏览器</target>
        </trans-unit>
        <trans-unit id="b5377a30c83f431ca8cc0f163352f1d1dd9d3d93" translate="yes" xml:space="preserve">
          <source>Every &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; element should have an associated &lt;code&gt;&amp;lt;label&amp;gt;&lt;/code&gt; element. To do this, the &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; element's &lt;code&gt;id&lt;/code&gt; attribute value should be the same as the &lt;code&gt;for&lt;/code&gt; attribute value on the &lt;code&gt;&amp;lt;label&amp;gt;&lt;/code&gt;, like this:</source>
          <target state="translated">每个 &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; 元素都应具有一个关联的 &lt;code&gt;&amp;lt;label&amp;gt;&lt;/code&gt; 元素。为此， &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; 元素的 &lt;code&gt;id&lt;/code&gt; 属性值应与 &lt;code&gt;&amp;lt;label&amp;gt;&lt;/code&gt; 上的 &lt;code&gt;for&lt;/code&gt; 属性值相同，如下所示：</target>
        </trans-unit>
        <trans-unit id="8a0e925e4ab484a6f358aee295dd7a7c5c94a894" translate="yes" xml:space="preserve">
          <source>Every &lt;code&gt;DS.Model&lt;/code&gt; has an &lt;code&gt;errors&lt;/code&gt; property that is an instance of &lt;code&gt;DS.Errors&lt;/code&gt;. This can be used to display validation error messages returned from the server when a &lt;code&gt;record.save()&lt;/code&gt; rejects.</source>
          <target state="translated">每个 &lt;code&gt;DS.Model&lt;/code&gt; 都有一个 &lt;code&gt;errors&lt;/code&gt; 属性，该属性是 &lt;code&gt;DS.Errors&lt;/code&gt; 的一个实例。当 &lt;code&gt;record.save()&lt;/code&gt; 拒绝时，这可用于显示从服务器返回的验证错误消息。</target>
        </trans-unit>
        <trans-unit id="14ffc86a06d4fc6a96676949566730adfdc2a133" translate="yes" xml:space="preserve">
          <source>Every &lt;code&gt;Model&lt;/code&gt; has an &lt;code&gt;errors&lt;/code&gt; property that is an instance of &lt;code&gt;Errors&lt;/code&gt;. This can be used to display validation error messages returned from the server when a &lt;code&gt;record.save()&lt;/code&gt; rejects.</source>
          <target state="translated">每个 &lt;code&gt;Model&lt;/code&gt; 都有一个 &lt;code&gt;errors&lt;/code&gt; 属性，该属性是 &lt;code&gt;Errors&lt;/code&gt; 的一个实例。当 &lt;code&gt;record.save()&lt;/code&gt; 拒绝时，这可用于显示从服务器返回的验证错误消息。</target>
        </trans-unit>
        <trans-unit id="76334a5c6b1c7a97dee9c5375ddfe86a8a707dcc" translate="yes" xml:space="preserve">
          <source>Every Ember app comes with &lt;a href=&quot;https://qunitjs.com/&quot;&gt;QUnit&lt;/a&gt; and &lt;a href=&quot;https://github.com/simplabs/qunit-dom&quot;&gt;QUnit DOM&lt;/a&gt;. QUnit is a testing framework, and QUnit DOM is a library that helps you &lt;strong&gt;write tests that are concise and readable&lt;/strong&gt;.</source>
          <target state="translated">每个Ember应用程序都附带&lt;a href=&quot;https://qunitjs.com/&quot;&gt;QUnit&lt;/a&gt;和&lt;a href=&quot;https://github.com/simplabs/qunit-dom&quot;&gt;QUnit DOM&lt;/a&gt;。QUnit是一个测试框架，而QUnit DOM是一个可以帮助您&lt;strong&gt;编写简洁易读的测试&lt;/strong&gt;的库。</target>
        </trans-unit>
        <trans-unit id="85988e68d013f75cfc1374e87a65e3e1e3c8b772" translate="yes" xml:space="preserve">
          <source>Every Ember application has a container that maintains object instances for you. You can inspect these instances using the Container tab. This is useful for objects that don't fall under a dedicated menu, such as services.</source>
          <target state="translated">每个Ember应用程序都有一个容器,为你维护对象实例。你可以使用容器标签检查这些实例。这对于不属于专用菜单的对象很有用,例如服务。</target>
        </trans-unit>
        <trans-unit id="b8a9f512422af88bdb1c60c02383c045ed3fe355" translate="yes" xml:space="preserve">
          <source>Every Ember application is represented by a class that extends &lt;a href=&quot;http://emberjs.com/api/classes/Ember.Application.html&quot;&gt;&lt;code&gt;Ember.Application&lt;/code&gt;&lt;/a&gt;. This class is used to declare and configure the many objects that make up your app.</source>
          <target state="translated">每个Ember应用程序都由扩展&lt;a href=&quot;http://emberjs.com/api/classes/Ember.Application.html&quot;&gt; &lt;code&gt;Ember.Application&lt;/code&gt; &lt;/a&gt;的类表示。此类用于声明和配置构成应用程序的许多对象。</target>
        </trans-unit>
        <trans-unit id="de56a64135a6759f510b8ec2ed86a890cab9c305" translate="yes" xml:space="preserve">
          <source>Every Ember application is represented by a class that extends &lt;a href=&quot;https://api.emberjs.com/ember/release/classes/Application&quot;&gt;&lt;code&gt;Application&lt;/code&gt;&lt;/a&gt;. This class is used to declare and configure the many objects that make up your app.</source>
          <target state="translated">每个Ember应用程序都由扩展&lt;a href=&quot;https://api.emberjs.com/ember/release/classes/Application&quot;&gt; &lt;code&gt;Application&lt;/code&gt; &lt;/a&gt;的类表示。此类用于声明和配置构成应用程序的许多对象。</target>
        </trans-unit>
        <trans-unit id="2c693f11f5cba9c5625c100db803ef4b1b7cdcd8" translate="yes" xml:space="preserve">
          <source>Every decorator is unique! See the documentation for each decorator to see how it should be used.</source>
          <target state="translated">每个装饰器都是独一无二的! 请参阅每个装饰器的文档,以了解如何使用它。</target>
        </trans-unit>
        <trans-unit id="557d8633cfa8c1dfe985ce67867527451ecd52fc" translate="yes" xml:space="preserve">
          <source>Every input should be associated with a label. In HTML, there are a few ways to do this. With the built-in &lt;code&gt;&amp;lt;Input&amp;gt;&lt;/code&gt; component,</source>
          <target state="translated">每个输入都应与标签关联。在HTML中，有几种方法可以做到这一点。使用内置的 &lt;code&gt;&amp;lt;Input&amp;gt;&lt;/code&gt; 组件，</target>
        </trans-unit>
        <trans-unit id="0f01ed56a1e32a05e5ef96e4d779f34784af9a96" translate="yes" xml:space="preserve">
          <source>Example</source>
          <target state="translated">Example</target>
        </trans-unit>
        <trans-unit id="855b8b0d4366bf071beb7b47a234298bc8fa0a83" translate="yes" xml:space="preserve">
          <source>Example JSON payloads, Models and Serializers</source>
          <target state="translated">示例JSON有效载荷、模型和序列化器</target>
        </trans-unit>
        <trans-unit id="654d7a479004b2b26e7de7b5ed9cd79a331ded80" translate="yes" xml:space="preserve">
          <source>Example Usage</source>
          <target state="translated">使用实例</target>
        </trans-unit>
        <trans-unit id="30d9e9e6f4ce5ea49de6402830c224a348be7a83" translate="yes" xml:space="preserve">
          <source>Example Usage:</source>
          <target state="translated">例子用法。</target>
        </trans-unit>
        <trans-unit id="185ab25dac87e9a89176e18269949db86107baf7" translate="yes" xml:space="preserve">
          <source>Example for Multiple Segments</source>
          <target state="translated">多段式实例</target>
        </trans-unit>
        <trans-unit id="1fc09b7c0f219e5a0f57fe8580ae14b45f02bdf8" translate="yes" xml:space="preserve">
          <source>Example instanceInitializer to preload data into the store.</source>
          <target state="translated">示例实例Initializer将数据预加载到存储中。</target>
        </trans-unit>
        <trans-unit id="8a385ccb7b0fab6b5f0a04df0ef8cd68dc33801c" translate="yes" xml:space="preserve">
          <source>Example of alternative implementation, overriding the default behavior to deal with a different format of errors:</source>
          <target state="translated">替代性实现的例子,覆盖默认行为来处理不同格式的错误。</target>
        </trans-unit>
        <trans-unit id="56b86dbf777bc82ae79c1db97734c2ca8302f229" translate="yes" xml:space="preserve">
          <source>Example of using &lt;code&gt;application&lt;/code&gt; to register an adapter:</source>
          <target state="translated">使用 &lt;code&gt;application&lt;/code&gt; 注册适配器的示例：</target>
        </trans-unit>
        <trans-unit id="5ab7721397827b925456d2a147cb5704105a62a7" translate="yes" xml:space="preserve">
          <source>Example usage:</source>
          <target state="translated">使用实例。</target>
        </trans-unit>
        <trans-unit id="c63737abd7347a7ae582cb9fbdf37d6c0e5b251e" translate="yes" xml:space="preserve">
          <source>Example:</source>
          <target state="translated">Example:</target>
        </trans-unit>
        <trans-unit id="2671d230a3bee690947d566d2c23896bdbb1481e" translate="yes" xml:space="preserve">
          <source>Example: given this &lt;code&gt;post&lt;/code&gt; model.</source>
          <target state="translated">示例：给出此 &lt;code&gt;post&lt;/code&gt; 模型。</target>
        </trans-unit>
        <trans-unit id="eb01bf04c9a0e8a71c45816513df424f1c7ffedb" translate="yes" xml:space="preserve">
          <source>Examples</source>
          <target state="translated">Examples</target>
        </trans-unit>
        <trans-unit id="cc9ce9cb848d733d6e780e33083b93f55c0047c4" translate="yes" xml:space="preserve">
          <source>Examples of integration tests are:</source>
          <target state="translated">集成测试的例子有:</target>
        </trans-unit>
        <trans-unit id="fb3447b632f6a431215776dcf254a01001a40c4f" translate="yes" xml:space="preserve">
          <source>Examples:</source>
          <target state="translated">Examples:</target>
        </trans-unit>
        <trans-unit id="20049bc069b0a04404c23d571b5e0b56f0660c02" translate="yes" xml:space="preserve">
          <source>Exception</source>
          <target state="translated">Exception</target>
        </trans-unit>
        <trans-unit id="4057eb19bc2345cdfb8ab9b72e74b0d0ab590fc6" translate="yes" xml:space="preserve">
          <source>Execute the &lt;code&gt;debugger&lt;/code&gt; statement in the current template's context.</source>
          <target state="translated">在当前模板的上下文中执行 &lt;code&gt;debugger&lt;/code&gt; 语句。</target>
        </trans-unit>
        <trans-unit id="f8d5ed694983381cf25f15a1bcaa91e8354044c7" translate="yes" xml:space="preserve">
          <source>Existing records for the &lt;code&gt;type&lt;/code&gt; will not be removed. The key difference is in the result returned by the &lt;code&gt;store&lt;/code&gt;. For &lt;code&gt;findAll&lt;/code&gt; the result is all known records of the &lt;code&gt;type&lt;/code&gt;, while for &lt;code&gt;query&lt;/code&gt; it will only be the records returned from &lt;code&gt;adapter.query&lt;/code&gt;.</source>
          <target state="translated">该 &lt;code&gt;type&lt;/code&gt; 现有记录将不会被删除。关键的区别在于 &lt;code&gt;store&lt;/code&gt; 返回的结果。对于 &lt;code&gt;findAll&lt;/code&gt; ，结果是该 &lt;code&gt;type&lt;/code&gt; 所有已知记录，而对于 &lt;code&gt;query&lt;/code&gt; ，结果将仅是 &lt;code&gt;adapter.query&lt;/code&gt; 返回的记录。</target>
        </trans-unit>
        <trans-unit id="32320839827fa2e0725e13f8323ef8349436099e" translate="yes" xml:space="preserve">
          <source>Expanding and Collapsing Components</source>
          <target state="translated">扩展和折叠组件</target>
        </trans-unit>
        <trans-unit id="d5c837be64d9e31d6756f4ebb2b47be6d7382375" translate="yes" xml:space="preserve">
          <source>Expands &lt;code&gt;pattern&lt;/code&gt;, invoking &lt;code&gt;callback&lt;/code&gt; for each expansion.</source>
          <target state="translated">扩展 &lt;code&gt;pattern&lt;/code&gt; ，为每个扩展调用 &lt;code&gt;callback&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="52dcec4c796d6649b4952af879aa6cc2faa55260" translate="yes" xml:space="preserve">
          <source>Explicit Inverses</source>
          <target state="translated">显式反转</target>
        </trans-unit>
        <trans-unit id="ef5a3f09ccb18d1b1024a3722f3feee0d8889edc" translate="yes" xml:space="preserve">
          <source>Explore the ecosystem</source>
          <target state="translated">探索生态系统</target>
        </trans-unit>
        <trans-unit id="c580236805d237e3cd61e7baff6475fe054ba15b" translate="yes" xml:space="preserve">
          <source>Exposing Actions as Public API</source>
          <target state="translated">将行为作为公共API暴露出来</target>
        </trans-unit>
        <trans-unit id="2a9b29e809457ee1bb5054807ca67ee1c7300fe1" translate="yes" xml:space="preserve">
          <source>Exposing Objects to the Console</source>
          <target state="translated">将对象暴露给控制台</target>
        </trans-unit>
        <trans-unit id="46ec25089ffe4bbbdc2d0a4305e4dc1ad731b2e0" translate="yes" xml:space="preserve">
          <source>Exposing queries this way seems preferable to creating an abstract query language for all server-side queries, and then require all adapters to implement them.</source>
          <target state="translated">以这种方式暴露查询似乎比为所有的服务器端查询创建一个抽象的查询语言,然后要求所有的适配器实现它们更可取。</target>
        </trans-unit>
        <trans-unit id="f84c91363a362a83a4dda3cbe5faedf153339bf6" translate="yes" xml:space="preserve">
          <source>Extending &lt;code&gt;Ember.Checkbox&lt;/code&gt;</source>
          <target state="translated">扩展 &lt;code&gt;Ember.Checkbox&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="aece37639a26747d27b6bec229350503d67eb06f" translate="yes" xml:space="preserve">
          <source>Extending &lt;code&gt;Ember.TextField&lt;/code&gt;</source>
          <target state="translated">扩展 &lt;code&gt;Ember.TextField&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="41a932389493b0a691d1b7443ca8def0a959fdb3" translate="yes" xml:space="preserve">
          <source>Extending Adapters is a natural process in Ember Data. Ember takes the position that you should extend an adapter to add different functionality. This results in code that is more testable, easier to understand and reduces bloat for people who may want to subclass your adapter.</source>
          <target state="translated">在Ember Data中,扩展适配器是一个自然的过程。Ember的立场是,你应该扩展一个适配器来添加不同的功能。这将导致代码更可测试,更容易理解,并为那些可能想要子类你的适配器的人减少臃肿。</target>
        </trans-unit>
        <trans-unit id="dcabbc390e17d15f91473972556065a69ff821df" translate="yes" xml:space="preserve">
          <source>Extending Classes</source>
          <target state="translated">扩展类</target>
        </trans-unit>
        <trans-unit id="2352749bc5f9f90417816157b063755a08862b8f" translate="yes" xml:space="preserve">
          <source>Extending Classic Classes with Native Syntax</source>
          <target state="translated">用原生语法扩展经典类</target>
        </trans-unit>
        <trans-unit id="33292f9753394b83f5d76e9c9d11ef6b04e05198" translate="yes" xml:space="preserve">
          <source>Extending the example, if we have a &amp;ldquo;post&amp;rdquo; route that lives within the &amp;ldquo;posts&amp;rdquo; route, we could set its page title like so:</source>
          <target state="translated">扩展示例，如果我们有一条位于&amp;ldquo; posts&amp;rdquo;路线内的&amp;ldquo; post&amp;rdquo;路线，则可以这样设置其页面标题：</target>
        </trans-unit>
        <trans-unit id="ddf3071dc94d26c323c107229af8795c491bd816" translate="yes" xml:space="preserve">
          <source>Extends:</source>
          <target state="translated">Extends:</target>
        </trans-unit>
        <trans-unit id="659087d3ca23db6ae11e0a43579b5f4a260dda11" translate="yes" xml:space="preserve">
          <source>Extension</source>
          <target state="translated">Extension</target>
        </trans-unit>
        <trans-unit id="c19e4865e91fb490331cf2e5ed770c0039d69eff" translate="yes" xml:space="preserve">
          <source>Factories can be injected into whole &quot;types&quot; of factories with &lt;em&gt;type injections&lt;/em&gt;. For example:</source>
          <target state="translated">工厂可注入与整体工厂&amp;ldquo;类型&amp;rdquo; &lt;em&gt;类型的注射&lt;/em&gt;。例如：</target>
        </trans-unit>
        <trans-unit id="da465632cd7a925c54e92038aac8472d7b87a0dc" translate="yes" xml:space="preserve">
          <source>Factory Injections</source>
          <target state="translated">工厂注塑</target>
        </trans-unit>
        <trans-unit id="405317722b3b6e2bd0b518051f11582bab889ae1" translate="yes" xml:space="preserve">
          <source>Factory Instance Lookups</source>
          <target state="translated">工厂实例查询</target>
        </trans-unit>
        <trans-unit id="322b9664e956ccfc12da782ec73cbc42ffbe37cf" translate="yes" xml:space="preserve">
          <source>Factory Registrations</source>
          <target state="translated">工厂注册</target>
        </trans-unit>
        <trans-unit id="d939c0a1d24985fbab8a46236bfe68741efdf86e" translate="yes" xml:space="preserve">
          <source>Factory registrations must be performed either in application or application instance initializers (with the former being much more common).</source>
          <target state="translated">工厂注册必须在应用程序或应用程序实例初始化器中进行(前者更为常见)。</target>
        </trans-unit>
        <trans-unit id="7e519b7ed2d65ec61a02497be53258f4a7ca5526" translate="yes" xml:space="preserve">
          <source>FactoryManager</source>
          <target state="translated">FactoryManager</target>
        </trans-unit>
        <trans-unit id="7c7ea86b9d1cacaead9ab87274fb0a3c8e9c3909" translate="yes" xml:space="preserve">
          <source>Failed responses with status code 422 (&quot;Unprocessable Entity&quot;) will be considered &quot;invalid&quot;. The response will be discarded, except for the &lt;code&gt;errors&lt;/code&gt; key. The request promise will be rejected with a &lt;code&gt;DS.InvalidError&lt;/code&gt;. This error object will encapsulate the saved &lt;code&gt;errors&lt;/code&gt; value.</source>
          <target state="translated">状态代码为422（&amp;ldquo;无法处理的实体&amp;rdquo;）的失败响应将被视为&amp;ldquo;无效&amp;rdquo;。除 &lt;code&gt;errors&lt;/code&gt; 键外，该响应将被丢弃。该请求承诺将被 &lt;code&gt;DS.InvalidError&lt;/code&gt; 拒绝。该错误对象将封装保存的 &lt;code&gt;errors&lt;/code&gt; 值。</target>
        </trans-unit>
        <trans-unit id="7397d437ff1ee99c72781ff2f8bab60f9895c85c" translate="yes" xml:space="preserve">
          <source>Failed responses with status code 422 (&quot;Unprocessable Entity&quot;) will be considered &quot;invalid&quot;. The response will be discarded, except for the &lt;code&gt;errors&lt;/code&gt; key. The request promise will be rejected with a &lt;code&gt;InvalidError&lt;/code&gt;. This error object will encapsulate the saved &lt;code&gt;errors&lt;/code&gt; value.</source>
          <target state="translated">状态代码为422（&amp;ldquo;无法处理的实体&amp;rdquo;）的失败响应将被视为&amp;ldquo;无效&amp;rdquo;。除 &lt;code&gt;errors&lt;/code&gt; 键外，该响应将被丢弃。请求承诺将被 &lt;code&gt;InvalidError&lt;/code&gt; 拒绝。该错误对象将封装保存的 &lt;code&gt;errors&lt;/code&gt; 值。</target>
        </trans-unit>
        <trans-unit id="6138a14f00dad4b345df4ca480ac1608f03ce9b2" translate="yes" xml:space="preserve">
          <source>Faking Query Results</source>
          <target state="translated">伪造查询结果</target>
        </trans-unit>
        <trans-unit id="4f5a54627dea26b6876632913ba4f8191aad7605" translate="yes" xml:space="preserve">
          <source>Feature Flags</source>
          <target state="translated">特色旗帜</target>
        </trans-unit>
        <trans-unit id="873cc081945620a3cd0038f4521f4807e9aabc35" translate="yes" xml:space="preserve">
          <source>Feature Life-Cycle</source>
          <target state="translated">特征生命周期</target>
        </trans-unit>
        <trans-unit id="647a8bb14f534478c015ee2df0d7575e1de2666a" translate="yes" xml:space="preserve">
          <source>Feature Listing (&lt;a href=&quot;https://github.com/emberjs/ember.js/blob/master/FEATURES.md&quot;&gt; &lt;p&gt;When a developer adds a new feature to the &lt;code&gt;canary&lt;/code&gt; channel (i.e. the &lt;code&gt;master&lt;/code&gt; branch on GitHub), they also add an entry to &lt;a href=&quot;https://github.com/emberjs/ember.js/blob/master/FEATURES.md&quot;&gt;&lt;code&gt;FEATURES.md&lt;/code&gt;&lt;/a&gt; explaining what the feature does, and linking to their originating pull request. This list is kept current, and reflects what is available in each channel (&lt;code&gt;release&lt;/code&gt;, &lt;code&gt;beta&lt;/code&gt;, and &lt;code&gt;canary&lt;/code&gt;).&lt;/p&gt; &lt;/a&gt;</source>
          <target state="translated">功能列表（&lt;a href=&quot;https://github.com/emberjs/ember.js/blob/master/FEATURES.md&quot;&gt; &lt;/a&gt;&lt;p&gt;当开发人员向 &lt;code&gt;canary&lt;/code&gt; 频道（即GitHub上的 &lt;code&gt;master&lt;/code&gt; 分支）添加新功能时，他们还会向&lt;a href=&quot;https://github.com/emberjs/ember.js/blob/master/FEATURES.md&quot;&gt; &lt;code&gt;FEATURES.md&lt;/code&gt; &lt;/a&gt;添加一个条目，以解释该功能的作用，并链接到其原始的拉取请求。此列表保持最新状态，并反映了每个频道（ &lt;code&gt;release&lt;/code&gt; ， &lt;code&gt;beta&lt;/code&gt; 和 &lt;code&gt;canary&lt;/code&gt; ）中可用的内容。&lt;/p&gt;</target>
        </trans-unit>
        <trans-unit id="1fd810a1d436a57ec60e3cf0d93b6df18ed8799a" translate="yes" xml:space="preserve">
          <source>Feature Listing (&lt;a href=&quot;https://github.com/emberjs/ember.js/blob/master/FEATURES.md&quot;&gt;&lt;code&gt;FEATURES.md&lt;/code&gt;&lt;/a&gt;)</source>
          <target state="translated">功能列表（&lt;a href=&quot;https://github.com/emberjs/ember.js/blob/master/FEATURES.md&quot;&gt; &lt;code&gt;FEATURES.md&lt;/code&gt; &lt;/a&gt;）</target>
        </trans-unit>
        <trans-unit id="fc338f87a058158eb824b53705961801516a9460" translate="yes" xml:space="preserve">
          <source>Features</source>
          <target state="translated">Features</target>
        </trans-unit>
        <trans-unit id="bb76b76858ecc973034701e1f87405ffe40ffec2" translate="yes" xml:space="preserve">
          <source>Feel free to try this in the browser. Finally, everything should behave exactly as we hoped!</source>
          <target state="translated">欢迎在浏览器中尝试。终于,一切都应该如我们所愿了!</target>
        </trans-unit>
        <trans-unit id="20128dd028aa1ba6cf47a8ab888d34d0b8899b23" translate="yes" xml:space="preserve">
          <source>Fetch example</source>
          <target state="translated">取例</target>
        </trans-unit>
        <trans-unit id="e1bb193199e8d075cf0640d0c7fba69854d7c702" translate="yes" xml:space="preserve">
          <source>Fetch the model types and observe them for changes.</source>
          <target state="translated">获取模型类型并观察其变化。</target>
        </trans-unit>
        <trans-unit id="af4915dd9e547677cf018f48b13c3467ebf46486" translate="yes" xml:space="preserve">
          <source>Fetch the records of a given type and observe them for changes.</source>
          <target state="translated">获取给定类型的记录,并观察它们的变化。</target>
        </trans-unit>
        <trans-unit id="e8c4a80dae8b33a05286dec8f741acbec8b0637a" translate="yes" xml:space="preserve">
          <source>Fetches all loaded records for a given type.</source>
          <target state="translated">读取给定类型的所有加载记录。</target>
        </trans-unit>
        <trans-unit id="907630a6a512049112f0e0bff7070bb3f3e256e4" translate="yes" xml:space="preserve">
          <source>Fetching Maps With a Service</source>
          <target state="translated">通过服务获取地图</target>
        </trans-unit>
        <trans-unit id="e8b685271238adf161cffed3c91f54d97023262b" translate="yes" xml:space="preserve">
          <source>Fields</source>
          <target state="translated">Fields</target>
        </trans-unit>
        <trans-unit id="94db54f47ee768bd7caa2f4ad921efba6068952d" translate="yes" xml:space="preserve">
          <source>Fields are assigned before any code in the &lt;code&gt;constructor&lt;/code&gt; method is run, which is why we can rely on them being assigned correctly by the time it runs. As with methods, fields do &lt;em&gt;not&lt;/em&gt; exist on the class itself, nor do they exist on the class's prototype, they only exist on the &lt;em&gt;instance&lt;/em&gt; of the class. However, they can be added to the class directly using the &lt;code&gt;static&lt;/code&gt; keyword, which is described in more detail below.</source>
          <target state="translated">在 &lt;code&gt;constructor&lt;/code&gt; 方法中的任何代码运行之前就已分配了字段，这就是为什么我们可以依靠它们在运行时正确分配它们的原因。与方法一样，字段&lt;em&gt;不&lt;/em&gt;存在于类本身上，也不存在于类的原型中，它们仅存在于类的&lt;em&gt;实例&lt;/em&gt;上。但是，可以使用 &lt;code&gt;static&lt;/code&gt; 关键字将它们直接添加到类中，下面将对其进行详细说明。</target>
        </trans-unit>
        <trans-unit id="99ebbdcbd58500e5fc6879d0fac4e21d2f84bcf4" translate="yes" xml:space="preserve">
          <source>Fields are assigned before any code in the &lt;code&gt;constructor&lt;/code&gt; method is run, which is why we can rely on them being assigned correctly by the time it runs. Fields do &lt;em&gt;not&lt;/em&gt; exist on the class itself, nor do they exist on the class's prototype, they only exist on the &lt;em&gt;instance&lt;/em&gt; of the class. However, they can be added to the class directly using the &lt;code&gt;static&lt;/code&gt; keyword, like other class elements.</source>
          <target state="translated">在 &lt;code&gt;constructor&lt;/code&gt; 方法中的任何代码运行之前就已分配了字段，这就是为什么我们可以依靠它们在运行时正确分配它们的原因。字段&lt;em&gt;不&lt;/em&gt;存在于类本身上，也不存在于类的原型上，它们仅存在于类的&lt;em&gt;实例&lt;/em&gt;上。但是，可以像其他类元素一样，使用 &lt;code&gt;static&lt;/code&gt; 关键字将它们直接添加到类中。</target>
        </trans-unit>
        <trans-unit id="cb6cf8255f249e748911e5d6a97bdbd180f4900e" translate="yes" xml:space="preserve">
          <source>Fields are assigned before any constructor code is run, so you can access their values in the &lt;code&gt;constructor&lt;/code&gt; function.</source>
          <target state="translated">在运行任何构造函数代码之前已分配字段，因此您可以在 &lt;code&gt;constructor&lt;/code&gt; 函数中访问它们的值。</target>
        </trans-unit>
        <trans-unit id="a668828e117d624a612f4ed52d98989bac795817" translate="yes" xml:space="preserve">
          <source>Fields are syntactic sugar for assigning the value in the constructor, like so:</source>
          <target state="translated">字段是用于在构造函数中赋值的语法糖,像这样。</target>
        </trans-unit>
        <trans-unit id="b51cc0c72ed0c9b51784b81150d044229275209c" translate="yes" xml:space="preserve">
          <source>Fields can also access the class instance using &lt;code&gt;this&lt;/code&gt; when they are being assigned:</source>
          <target state="translated">在分配字段时，也可以使用 &lt;code&gt;this&lt;/code&gt; 访问类实例：</target>
        </trans-unit>
        <trans-unit id="5f457d55c53f31bef1e51b3a7cb8266e914589c5" translate="yes" xml:space="preserve">
          <source>Fields vs. Properties</source>
          <target state="translated">字段与属性</target>
        </trans-unit>
        <trans-unit id="dd86bc61c1dacf032c3be1d771a2bee121f48d62" translate="yes" xml:space="preserve">
          <source>File System Nesting</source>
          <target state="translated">文件系统嵌套</target>
        </trans-unit>
        <trans-unit id="9496b0ae023a28f794b4da6d8516cb7ebef60860" translate="yes" xml:space="preserve">
          <source>File:// protocol</source>
          <target state="translated">文件://协议</target>
        </trans-unit>
        <trans-unit id="0a94f96e1d123523b6f432fd15a7935cd669e442" translate="yes" xml:space="preserve">
          <source>Fills in an input element with some text.</source>
          <target state="translated">在一个输入元素中填入一些文字。</target>
        </trans-unit>
        <trans-unit id="d135c8f5a88ca7d5101aa0bec21446b0d5a47c66" translate="yes" xml:space="preserve">
          <source>Fills in the selected input with the given value and returns a promise that fulfills when all resulting async behavior is complete. Works with &lt;code&gt;&amp;lt;select&amp;gt;&lt;/code&gt; elements as well as &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; elements. Keep in mind that with &lt;code&gt;&amp;lt;select&amp;gt;&lt;/code&gt; elements, &lt;code&gt;value&lt;/code&gt; must be set to the &lt;em&gt;value&lt;/em&gt; of the &lt;code&gt;&amp;lt;option&amp;gt;&lt;/code&gt; tag, rather than its &lt;em&gt;content&lt;/em&gt; (for example, &lt;code&gt;true&lt;/code&gt; rather than &lt;code&gt;&quot;Yes&quot;&lt;/code&gt;).</source>
          <target state="translated">用给定的值填充选定的输入，并返回一个承诺，当所有结果异步行为完成时，该承诺就会实现。与 &lt;code&gt;&amp;lt;select&amp;gt;&lt;/code&gt; 元素以及 &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; 元素一起使用。请记住，用 &lt;code&gt;&amp;lt;select&amp;gt;&lt;/code&gt; 元素， &lt;code&gt;value&lt;/code&gt; 必须设置为&lt;em&gt;值&lt;/em&gt;的的 &lt;code&gt;&amp;lt;option&amp;gt;&lt;/code&gt; 标签，而不是它的&lt;em&gt;内容&lt;/em&gt;（例如， &lt;code&gt;true&lt;/code&gt; 而不是 &lt;code&gt;&quot;Yes&quot;&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="4b340be2783a2587796ecb02f6de204bddd76efc" translate="yes" xml:space="preserve">
          <source>Filter and Reload</source>
          <target state="translated">滤波器和重装</target>
        </trans-unit>
        <trans-unit id="e032cecb51091cee135217097ec169f76c53604e" translate="yes" xml:space="preserve">
          <source>Filter the list of rentals by city</source>
          <target state="translated">按城市过滤租房列表</target>
        </trans-unit>
        <trans-unit id="9075edca21736af901d2add18e4d9491f2452b4d" translate="yes" xml:space="preserve">
          <source>Filtering</source>
          <target state="translated">Filtering</target>
        </trans-unit>
        <trans-unit id="f6a202634d90a0c4c936584e5c490b28cb63b012" translate="yes" xml:space="preserve">
          <source>Filtering Components</source>
          <target state="translated">过滤组件</target>
        </trans-unit>
        <trans-unit id="551a7f038933335530d66a08ece58c1a8935cb22" translate="yes" xml:space="preserve">
          <source>Filtering Data Based on Input</source>
          <target state="translated">基于输入的数据过滤</target>
        </trans-unit>
        <trans-unit id="116395f3d2bc16d3082261ebf4d31f033fdd81fa" translate="yes" xml:space="preserve">
          <source>Filtering Deprecations</source>
          <target state="translated">筛选弃用</target>
        </trans-unit>
        <trans-unit id="90b6c2c7edcb9aeb3fbbe35540242baebdd2e266" translate="yes" xml:space="preserve">
          <source>Filtering and Clearing</source>
          <target state="translated">过滤和清除</target>
        </trans-unit>
        <trans-unit id="36c0956220077ceac28f372e4660f2ebbe3defd2" translate="yes" xml:space="preserve">
          <source>Filters the array by the callback.</source>
          <target state="translated">通过回调对数组进行过滤。</target>
        </trans-unit>
        <trans-unit id="14c4749b708f71a2048ccfa656d71a16f8fc0762" translate="yes" xml:space="preserve">
          <source>Filters the array by the property and an optional value. If a value is given, it returns the items that have said value for the property. If not, it returns all the items that have a truthy value for the property.</source>
          <target state="translated">通过属性和一个可选的值来过滤数组。如果给定了一个值,它将返回具有该属性值的项目。如果没有,则返回所有具有该属性真值的项目。</target>
        </trans-unit>
        <trans-unit id="371d7b7bc6141c52d4f7030fde26a3e1f8e8c744" translate="yes" xml:space="preserve">
          <source>Filters the array by the property and value</source>
          <target state="translated">根据属性和值过滤数组</target>
        </trans-unit>
        <trans-unit id="14e7a651d9db304aa4d5f78a23219033e41dc0ff" translate="yes" xml:space="preserve">
          <source>Filters the array by the property and value.</source>
          <target state="translated">根据属性和值对数组进行过滤。</target>
        </trans-unit>
        <trans-unit id="7fe061f56a7795a7b55617b02eff5ffabf60788a" translate="yes" xml:space="preserve">
          <source>Finally a serializer will need to implement a &lt;a href=&quot;http://emberjs.com/api/data/classes/DS.Serializer.html#method_serialize&quot;&gt;serialize&lt;/a&gt; method. Ember Data will provide a record snapshot and an options hash and this method should return an object that the adapter will send to the server when creating, updating or deleting a record.</source>
          <target state="translated">最后，序列化程序将需要实现&lt;a href=&quot;http://emberjs.com/api/data/classes/DS.Serializer.html#method_serialize&quot;&gt;序列化&lt;/a&gt;方法。Ember Data将提供记录快照和选项哈希，并且此方法应返回适配器在创建，更新或删除记录时将发送给服务器的对象。</target>
        </trans-unit>
        <trans-unit id="4b720c13df4baa23aad24eeed448415065db74f8" translate="yes" xml:space="preserve">
          <source>Finally a serializer will need to implement a &lt;a href=&quot;https://api.emberjs.com/ember-data/release/classes/Serializer/methods#serialize&quot;&gt;serialize&lt;/a&gt; method. Ember Data will provide a record snapshot and an options hash and this method should return an object that the adapter will send to the server when creating, updating or deleting a record.</source>
          <target state="translated">最后，序列化程序将需要实现&lt;a href=&quot;https://api.emberjs.com/ember-data/release/classes/Serializer/methods#serialize&quot;&gt;序列化&lt;/a&gt;方法。Ember Data将提供记录快照和选项哈希，并且此方法应返回适配器在创建，更新或删除记录时将发送给服务器的对象。</target>
        </trans-unit>
        <trans-unit id="53abf2998d07adb4557f8892c6fb6b3e72bf5b25" translate="yes" xml:space="preserve">
          <source>Finally open the template file for our &lt;code&gt;rental-listing&lt;/code&gt; component and add the new &lt;code&gt;location-map&lt;/code&gt; component.</source>
          <target state="translated">最后，打开 &lt;code&gt;rental-listing&lt;/code&gt; 组件的模板文件，并添加新的 &lt;code&gt;location-map&lt;/code&gt; 组件。</target>
        </trans-unit>
        <trans-unit id="29a531072b0dbcc9960ada1d1bcd4d17999b99fc" translate="yes" xml:space="preserve">
          <source>Finally we add a &lt;code&gt;wait&lt;/code&gt; call at the end of our test to assert the results.</source>
          <target state="translated">最后，在测试结束时添加一个 &lt;code&gt;wait&lt;/code&gt; 调用以声明结果。</target>
        </trans-unit>
        <trans-unit id="b88e3e49db47026a262a44b3439e7215204b23bb" translate="yes" xml:space="preserve">
          <source>Finally we add an initializer named &lt;code&gt;post&lt;/code&gt;, specifying it should run after both the &lt;code&gt;first&lt;/code&gt; and the &lt;code&gt;second&lt;/code&gt; initializers:</source>
          <target state="translated">最后，我们添加一个名为 &lt;code&gt;post&lt;/code&gt; 的初始化程序，指定它应在 &lt;code&gt;first&lt;/code&gt; 和 &lt;code&gt;second&lt;/code&gt; 初始化程序之后运行：</target>
        </trans-unit>
        <trans-unit id="9df8c9c8f476fcf261c0abc68bfaf432bb6dbe7c" translate="yes" xml:space="preserve">
          <source>Finally, Ember extends the &lt;code&gt;String&lt;/code&gt; prototype with a few &lt;a href=&quot;http://emberjs.com/api/classes/Ember.String.html&quot;&gt;formatting and localization methods&lt;/a&gt;.</source>
          <target state="translated">最后，Ember 用一些&lt;a href=&quot;http://emberjs.com/api/classes/Ember.String.html&quot;&gt;格式化和本地化方法&lt;/a&gt;扩展了 &lt;code&gt;String&lt;/code&gt; 原型。</target>
        </trans-unit>
        <trans-unit id="ac2dea4418a0522d69af2b72656abac2726f80c0" translate="yes" xml:space="preserve">
          <source>Finally, don't forget to add your helpers in &lt;code&gt;tests/.eslintrc.js&lt;/code&gt; and in &lt;code&gt;tests/helpers/start-app.js&lt;/code&gt;. In &lt;code&gt;tests/.eslintrc.js&lt;/code&gt; you need to add it in the &lt;code&gt;globals&lt;/code&gt; section, otherwise you will get failing ESLint tests:</source>
          <target state="translated">最后，不要忘记将您的助手添加到 &lt;code&gt;tests/.eslintrc.js&lt;/code&gt; 和 &lt;code&gt;tests/helpers/start-app.js&lt;/code&gt; 中。在 &lt;code&gt;tests/.eslintrc.js&lt;/code&gt; 中,您需要将其添加到 &lt;code&gt;globals&lt;/code&gt; 部分中，否则您将获得失败的ESLint测试：</target>
        </trans-unit>
        <trans-unit id="a550e49cef61ec4c3db4060cd13e422f661e7472" translate="yes" xml:space="preserve">
          <source>Finally, if you don't apply &lt;code&gt;...attributes&lt;/code&gt; to &lt;em&gt;any&lt;/em&gt; elements, then Ember will throw an error if someone tries to use attributes when invoking your component:</source>
          <target state="translated">最后，如果你不申请 &lt;code&gt;...attributes&lt;/code&gt; 到&lt;em&gt;任何&lt;/em&gt;元素，然后将灰烬如果调用您的组件，当有人试图使用属性引发错误：</target>
        </trans-unit>
        <trans-unit id="5fbde48965af70cf4d20c7223027cb04614768e1" translate="yes" xml:space="preserve">
          <source>Finally, if you don't want the browser's URL to interact with your application at all, you can disable the location API entirely by setting &lt;code&gt;ENV.locationType&lt;/code&gt; to &lt;code&gt;none&lt;/code&gt;. This is useful for testing, or when you don't want Ember to muck with the URL (for example when you embed your application in a larger page).</source>
          <target state="translated">最后，如果您根本不希望浏览器的URL与您的应用程序进行交互，则可以通过将 &lt;code&gt;ENV.locationType&lt;/code&gt; 设置为 &lt;code&gt;none&lt;/code&gt; 来完全禁用location API 。这对于测试或在您不希望Ember混淆URL时（例如，将应用程序嵌入到较大的页面中）很有用。</target>
        </trans-unit>
        <trans-unit id="6a068dcb9ef6150a8070ef1c72aa3e1acb8cc283" translate="yes" xml:space="preserve">
          <source>Finally, if your application receives and sends data, you want to guarantee that you can take these actions successfully. You also want to prove that you can handle the error states correctly. Application tests are a great place to check these, since you have to interact with the app just like the user would.</source>
          <target state="translated">最后,如果你的应用程序接收和发送数据,你要保证你能成功地进行这些操作。你还想证明你能正确处理错误状态。应用测试是检查这些的好地方,因为你必须像用户一样与应用进行交互。</target>
        </trans-unit>
        <trans-unit id="57511eeee9718d342effdc518031ec30c35903a4" translate="yes" xml:space="preserve">
          <source>Finally, in order for application tests to work, you must call &lt;a href=&quot;https://github.com/emberjs/ember-qunit#setup-application-tests&quot;&gt;&lt;code&gt;setupApplicationTest()&lt;/code&gt;&lt;/a&gt; and pass the &lt;code&gt;hooks&lt;/code&gt; object. In addition to the usual goodness of &lt;code&gt;setupTest()&lt;/code&gt;, this method creates an application instance so that you can test the app from an end-user perspective. It also lets you use test helpers for routing and DOM interaction, such as &lt;code&gt;currentURL&lt;/code&gt;, &lt;code&gt;visit&lt;/code&gt;, &lt;code&gt;click&lt;/code&gt;, and &lt;code&gt;fillIn&lt;/code&gt;.</source>
          <target state="translated">最后，为了使应用程序测试有效，您必须调用&lt;a href=&quot;https://github.com/emberjs/ember-qunit#setup-application-tests&quot;&gt; &lt;code&gt;setupApplicationTest()&lt;/code&gt; &lt;/a&gt;并传递 &lt;code&gt;hooks&lt;/code&gt; 对象。除了通常具有 &lt;code&gt;setupTest()&lt;/code&gt; 的优点之外，此方法还创建了一个应用程序实例，以便您可以从最终用户的角度测试该应用程序。它还允许您使用测试助手来进行路由和DOM交互，例如 &lt;code&gt;currentURL&lt;/code&gt; ， &lt;code&gt;visit&lt;/code&gt; ， &lt;code&gt;click&lt;/code&gt; 和 &lt;code&gt;fillIn&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="9ea0802540ea39458f9947dac60990a298daac79" translate="yes" xml:space="preserve">
          <source>Finally, let's add our actions and assertions.</source>
          <target state="translated">最后,让我们添加我们的行动和论断。</target>
        </trans-unit>
        <trans-unit id="2c6515fa7070643d6305d13e99aa197b3f6bd897" translate="yes" xml:space="preserve">
          <source>Finally, one thing you may have noticed in the above examples is a lot more references to &lt;code&gt;this&lt;/code&gt; in the template. Values that are rendered from the local component or controller instance that backs the template must now have &lt;code&gt;this&lt;/code&gt; prepended at the beginning of the path:</source>
          <target state="translated">最后，您可能在上面的示例中注意到的一件事是模板中 &lt;code&gt;this&lt;/code&gt; 有很多引用。现在，从支持模板的本地组件或控制器实例呈现的值必须在路径的开头添加 &lt;code&gt;this&lt;/code&gt; ：</target>
        </trans-unit>
        <trans-unit id="89dccf2279af0bef5eb5c218f3dba10cc58a83fc" translate="yes" xml:space="preserve">
          <source>Finally, this example really shows the power and ease of Ember when two properties are bound to eachother via &lt;code&gt;Ember.computed.alias&lt;/code&gt;. Type into either text area box and they'll both stay in sync. Note that &lt;code&gt;Ember.computed.alias&lt;/code&gt; costs more in terms of performance, so only use it when your really binding in both directions:</source>
          <target state="translated">最后，当两个属性通过 &lt;code&gt;Ember.computed.alias&lt;/code&gt; 相互绑定时，此示例确实显示了Ember的强大功能和易用性。在任一文本区域框中键入内容，它们将保持同步。请注意， &lt;code&gt;Ember.computed.alias&lt;/code&gt; 在性能方面的成本更高，因此仅当您真正在两个方向上绑定时才使用它：</target>
        </trans-unit>
        <trans-unit id="aa5142669c662243129cef753c5d9502f1e8ff2c" translate="yes" xml:space="preserve">
          <source>Finally, unit tests run extremely fast, so you can check many permutations of arguments with minimal impact on your test suite performance.</source>
          <target state="translated">最后,单元测试的运行速度极快,因此您可以检查许多参数的排列组合,而对测试套件的性能影响最小。</target>
        </trans-unit>
        <trans-unit id="16c226828e7ec0486ac183e99d085dbe9061d8aa" translate="yes" xml:space="preserve">
          <source>Finally, we need to make our controller that has our filter action available to the new nested index route.</source>
          <target state="translated">最后,我们需要让我们的控制器,有我们的过滤器动作可以用于新的嵌套索引路由。</target>
        </trans-unit>
        <trans-unit id="f55134f6efef1aa95cff72f286a5eb107e327ef4" translate="yes" xml:space="preserve">
          <source>Finally, we need to share &lt;code&gt;myText&lt;/code&gt; with the body in order to have it display. To pass the blog text to the body component, we'll add a &lt;code&gt;postData&lt;/code&gt; argument to the component helper.</source>
          <target state="translated">最后，我们需要与正文共享 &lt;code&gt;myText&lt;/code&gt; 以便显示它。要将博客文本传递到body组件，我们将 &lt;code&gt;postData&lt;/code&gt; 参数添加到组件帮助器。</target>
        </trans-unit>
        <trans-unit id="7bd5224f7d1fdcb8a1ea0eb84b4fa35751c6fca4" translate="yes" xml:space="preserve">
          <source>Finally, we want to update our acceptance tests to account for our new service. While it would be great to verify that a map is displaying, we don't want to hammer the Google Maps API every time we run our acceptance test. For this tutorial we'll rely on our component integration tests to ensure that the map DOM is being attached to our screen. To avoid hitting our Maps request limit, we'll stub out our Maps service in our acceptance tests.</source>
          <target state="translated">最后,我们想更新我们的验收测试,以考虑到我们的新服务。虽然验证地图是否显示是件好事,但我们不想每次运行验收测试时都要敲打Google Maps API。在本教程中,我们将依靠我们的组件集成测试来确保地图DOM被连接到我们的屏幕上。为了避免触及我们的Maps请求限制,我们将在验收测试中支取我们的Maps服务。</target>
        </trans-unit>
        <trans-unit id="11f735b132b82e6d4a2da9c10cf2ff0b482eb037" translate="yes" xml:space="preserve">
          <source>Finally, you can optionally pass an array of additional dependent keys as the second parameter to the macro, if your filter function relies on any external values:</source>
          <target state="translated">最后,如果你的过滤函数依赖于任何外部值,你可以选择传递一个附加的依赖键数组作为宏的第二个参数。</target>
        </trans-unit>
        <trans-unit id="df251b06eefdaa932e97b54fbe9a74d3e606fa61" translate="yes" xml:space="preserve">
          <source>Find</source>
          <target state="translated">Find</target>
        </trans-unit>
        <trans-unit id="d0b9d0d8b89ed01e6a028a8eface6486e9874348" translate="yes" xml:space="preserve">
          <source>Find All</source>
          <target state="translated">查找所有</target>
        </trans-unit>
        <trans-unit id="6fd7e2ad683fed279ce7ac30981798c122ef18fe" translate="yes" xml:space="preserve">
          <source>Find the relationship which is the inverse of the one asked for.</source>
          <target state="translated">找出与所求关系相反的关系。</target>
        </trans-unit>
        <trans-unit id="07a4da9bf87aedf306c0fda9f6ed6d66854f986e" translate="yes" xml:space="preserve">
          <source>Finding By ID</source>
          <target state="translated">按ID查找</target>
        </trans-unit>
        <trans-unit id="a6ee6c0088e5a7525cd78d8199ca750e5ec27e36" translate="yes" xml:space="preserve">
          <source>Finding Records</source>
          <target state="translated">寻找记录</target>
        </trans-unit>
        <trans-unit id="bbbc23ac98c2de3f33ff0b233f661318414e36e8" translate="yes" xml:space="preserve">
          <source>Finds an element in the context of the app's container element. A simple alias for &lt;code&gt;app.$(selector)&lt;/code&gt;.</source>
          <target state="translated">在应用程序的容器元素的上下文中查找元素。 &lt;code&gt;app.$(selector)&lt;/code&gt; 简单别名。</target>
        </trans-unit>
        <trans-unit id="364b707ca3ab0a66ddcd76f7a3927a3e2b2fad32" translate="yes" xml:space="preserve">
          <source>Finds an element within the app's root element and within the context (optional). Scoping to the root element is especially useful to avoid conflicts with the test framework's reporter, and this is done by default if the context is not specified.</source>
          <target state="translated">在应用程序的根元素和上下文中查找一个元素(可选)。将范围扩展到根元素对于避免与测试框架的报告器发生冲突特别有用,如果没有指定上下文,默认情况下会这样做。</target>
        </trans-unit>
        <trans-unit id="e9340b4de6f2982022d5e92677c91bc7ae925675" translate="yes" xml:space="preserve">
          <source>Fired when a new record is commited to the server.</source>
          <target state="translated">当有新的记录被提交到服务器时触发。</target>
        </trans-unit>
        <trans-unit id="5c9d41cea7617ca25b2b37beeadefc250eef89fb" translate="yes" xml:space="preserve">
          <source>Fired when the record becomes invalid.</source>
          <target state="translated">当记录无效时触发。</target>
        </trans-unit>
        <trans-unit id="bc010a123ac6b42f55f9ec869fcc622f3290bc15" translate="yes" xml:space="preserve">
          <source>Fired when the record enters the error state.</source>
          <target state="translated">当记录进入错误状态时触发。</target>
        </trans-unit>
        <trans-unit id="88e553c68002dcc06fbe67991784b204885f1f0f" translate="yes" xml:space="preserve">
          <source>Fired when the record is deleted.</source>
          <target state="translated">当记录被删除时触发。</target>
        </trans-unit>
        <trans-unit id="d81a7bd7e7e66972ff36d55a5cec937bf4c48c72" translate="yes" xml:space="preserve">
          <source>Fired when the record is loaded from the server.</source>
          <target state="translated">从服务器加载记录时触发。</target>
        </trans-unit>
        <trans-unit id="f544a236b4af07de6375b5508a245dff20b86b8c" translate="yes" xml:space="preserve">
          <source>Fired when the record is ready to be interacted with, that is either loaded from the server or created locally.</source>
          <target state="translated">当记录准备好与之交互时触发,该记录可以从服务器加载,也可以在本地创建。</target>
        </trans-unit>
        <trans-unit id="ba1d6ecb2d4cfdc326ecaf54924c925c810e8b7b" translate="yes" xml:space="preserve">
          <source>Fired when the record is rolled back.</source>
          <target state="translated">当记录被回滚时触发。</target>
        </trans-unit>
        <trans-unit id="64bd5b25c90ba3467b4740fb0ff8c4968c739c56" translate="yes" xml:space="preserve">
          <source>Fired when the record is updated.</source>
          <target state="translated">当记录被更新时触发。</target>
        </trans-unit>
        <trans-unit id="b4ee6522335b033249255b4cc1d572993282aafb" translate="yes" xml:space="preserve">
          <source>Firefox</source>
          <target state="translated">Firefox</target>
        </trans-unit>
        <trans-unit id="ef50657ac032b1800911be6f1d1e4eafbdcaa8f9" translate="yes" xml:space="preserve">
          <source>Firefox &amp;amp; NVDA (Windows)</source>
          <target state="translated">Firefox和NVDA（Windows）</target>
        </trans-unit>
        <trans-unit id="e9f195c0554a5e8a3fad76420891ccc86770d946" translate="yes" xml:space="preserve">
          <source>Firefox addons need to go through a review process with each update, so the Inspector is usually one version behind.</source>
          <target state="translated">火狐插件每次更新都需要经过审查过程,所以检查器通常会落后一个版本。</target>
        </trans-unit>
        <trans-unit id="65b985fe04c58a63c10016eb835b7b9c395dc3f3" translate="yes" xml:space="preserve">
          <source>Fires an event on the current list of resolved/resolving handlers within this transition. Useful for firing events on route hierarchies that haven't fully been entered yet. Note: This method is also aliased as &lt;code&gt;send&lt;/code&gt;</source>
          <target state="translated">在此转换内，在已解析/解析处理程序的当前列表上触发事件。对于在尚未完全输入的路线层次结构上触发事件很有用。注意：此方法也别名为 &lt;code&gt;send&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="b06703746e6acb488d56832fc1d761f23b3c8e97" translate="yes" xml:space="preserve">
          <source>First and Last Objects</source>
          <target state="translated">首尾对象</target>
        </trans-unit>
        <trans-unit id="ffb6d3f0feb146801ac61e115004356226ddf23d" translate="yes" xml:space="preserve">
          <source>First is the time that application tests take to run. For small apps, its impact is minimal. However, for large apps, maintaining a short feedback loop becomes critical. In these cases, if you can verify a scenario in your app using unit or rendering tests, you may want to consider them instead.</source>
          <target state="translated">首先是应用测试的运行时间。对于小型应用,其影响微乎其微。但是,对于大型应用来说,维持一个短的反馈循环就变得至关重要。在这些情况下,如果你可以使用单元测试或渲染测试来验证应用中的场景,你可能会考虑用它们来代替。</target>
        </trans-unit>
        <trans-unit id="e33769ad7672d04881ddd3aea2baf22a3cc17026" translate="yes" xml:space="preserve">
          <source>First value to compare</source>
          <target state="translated">第一个比较值</target>
        </trans-unit>
        <trans-unit id="770c9b2ebd77215ac2fff5cae72286877c14aff4" translate="yes" xml:space="preserve">
          <source>First we visit the new posts URL &quot;/posts/new&quot;, enter the text &quot;My new post&quot; into an input control with the CSS class &quot;title&quot;, and click on a button whose class is &quot;submit&quot;.</source>
          <target state="translated">首先我们访问新帖子的网址&quot;/posts/new&quot;,在一个CSS类为 &quot;title &quot;的输入控件中输入文字 &quot;我的新帖子&quot;,然后点击一个类为 &quot;submit &quot;的按钮。</target>
        </trans-unit>
        <trans-unit id="c53913ab2118ac97e33d44700256f63c040001e5" translate="yes" xml:space="preserve">
          <source>First we would move the &lt;code&gt;deleteUser&lt;/code&gt; action from &lt;code&gt;user-profile.js&lt;/code&gt; to the actions object on &lt;code&gt;system-preferences-editor&lt;/code&gt;.</source>
          <target state="translated">首先，我们将 &lt;code&gt;deleteUser&lt;/code&gt; 操作从 &lt;code&gt;user-profile.js&lt;/code&gt; 移到 &lt;code&gt;system-preferences-editor&lt;/code&gt; 上的actions对象。</target>
        </trans-unit>
        <trans-unit id="2e4b6945759d3f5197e96ab684731ce5bdfd1506" translate="yes" xml:space="preserve">
          <source>First we would move the &lt;code&gt;deleteUser&lt;/code&gt; action from &lt;code&gt;user-profile.js&lt;/code&gt; to the parent &lt;code&gt;system-preferences-editor.js&lt;/code&gt;.</source>
          <target state="translated">首先，我们将 &lt;code&gt;deleteUser&lt;/code&gt; 操作从 &lt;code&gt;user-profile.js&lt;/code&gt; 移到父 &lt;code&gt;system-preferences-editor.js&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="66c8e53244464608c3b48bf66f6821f392b02e85" translate="yes" xml:space="preserve">
          <source>First we'll define what we want to happen when the user clicks the button and then confirms. In the first case, we'll find the user's account and delete it.</source>
          <target state="translated">首先,我们要定义当用户点击按钮,然后确认时,我们希望发生什么。在第一种情况下,我们会找到用户的账户并删除它。</target>
        </trans-unit>
        <trans-unit id="eddd943f2a9a3800d4e2d73cb9f7b762dd80be42" translate="yes" xml:space="preserve">
          <source>First you need to &lt;a href=&quot;https://app.netlify.com/signup&quot;&gt;sign up for a Netlify account&lt;/a&gt; if you do not already have one:</source>
          <target state="translated">首先，如果您还没有&lt;a href=&quot;https://app.netlify.com/signup&quot;&gt;Netlify帐户，&lt;/a&gt;则需要注册：</target>
        </trans-unit>
        <trans-unit id="2a0a1d434adeadf99dafeeb7810f84b7d9f8413d" translate="yes" xml:space="preserve">
          <source>First, here's an example using a core browser API called &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API&quot;&gt;&lt;code&gt;fetch&lt;/code&gt;&lt;/a&gt;, which returns a Promise. Install &lt;a href=&quot;https://github.com/ember-cli/ember-fetch&quot;&gt;&lt;code&gt;ember-fetch&lt;/code&gt;&lt;/a&gt; with the command &lt;code&gt;ember install ember-fetch&lt;/code&gt;, if it is not already in the app's &lt;code&gt;package.json&lt;/code&gt;. Older browsers may not have &lt;code&gt;fetch&lt;/code&gt;, but the &lt;code&gt;ember-fetch&lt;/code&gt; library includes a polyfill, so we don't have to worry about backwards compatibility!</source>
          <target state="translated">首先，这是一个使用名为&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API&quot;&gt; &lt;code&gt;fetch&lt;/code&gt; &lt;/a&gt;的核心浏览器API的示例，该示例返回Promise。安装&lt;a href=&quot;https://github.com/ember-cli/ember-fetch&quot;&gt; &lt;code&gt;ember-fetch&lt;/code&gt; &lt;/a&gt;用命令 &lt;code&gt;ember install ember-fetch&lt;/code&gt; ，如果它是不是已经在应用程序的 &lt;code&gt;package.json&lt;/code&gt; 。较早的浏览器可能没有 &lt;code&gt;fetch&lt;/code&gt; ，但是 &lt;code&gt;ember-fetch&lt;/code&gt; 库包含polyfill，因此我们不必担心向后兼容性！</target>
        </trans-unit>
        <trans-unit id="ece6152a0b447872978aa0c867e00d2d5474e847" translate="yes" xml:space="preserve">
          <source>First, it is important to make sure that the &lt;code&gt;type&lt;/code&gt; name of a record in the normalized JSON object exactly matches the filename of the model defined for this record type. By convention Model names are singular in Ember Data, however, the example type names shown in the &lt;a href=&quot;http://jsonapi.org/format/&quot;&gt;JSON API spec&lt;/a&gt; are pluralized. The JSON API spec itself is agnostic about inflection rules, however, Ember Data's own &lt;code&gt;JSONAPISerializer&lt;/code&gt; assumes types are plural and it will automatically singularize the types.</source>
          <target state="translated">首先，重要的是要确保规范化JSON对象中记录的 &lt;code&gt;type&lt;/code&gt; 名称与为此记录类型定义的模型的文件名完全匹配。按照惯例，模型名称在Ember Data中是单数，但是，&lt;a href=&quot;http://jsonapi.org/format/&quot;&gt;JSON API规范&lt;/a&gt;中显示的示例类型名称是复数的。JSON API规范本身 &lt;code&gt;JSONAPISerializer&lt;/code&gt; 变形规则，但是，Ember Data自己的JSONAPISerializer假定类型为复数，并且会自动将其单数化。</target>
        </trans-unit>
        <trans-unit id="037597fd6dd51a53b7aebdf3a46803009790e2bf" translate="yes" xml:space="preserve">
          <source>First, it is important to make sure that the &lt;code&gt;type&lt;/code&gt; name of a record in the normalized JSON object exactly matches the filename of the model defined for this record type. By convention Model names are singular in Ember Data, however, the example type names shown in the &lt;a href=&quot;http://jsonapi.org/format/&quot;&gt;JSON:API spec&lt;/a&gt; are pluralized. The JSON:API spec itself is agnostic about inflection rules, however, Ember Data's own &lt;code&gt;JSONAPISerializer&lt;/code&gt; assumes types are plural and it will automatically singularize the types.</source>
          <target state="translated">首先，重要的是要确保规范化JSON对象中记录的 &lt;code&gt;type&lt;/code&gt; 名称与为此记录类型定义的模型的文件名完全匹配。按照惯例，模型名称在Ember Data中是单数，但是&lt;a href=&quot;http://jsonapi.org/format/&quot;&gt;JSON：API规范&lt;/a&gt;中显示的示例类型名称是复数的。JSON：API规范本身 &lt;code&gt;JSONAPISerializer&lt;/code&gt; 变形规则，但是，Ember Data自己的JSONAPISerializer假定类型为复数，并且会自动将其单数化。</target>
        </trans-unit>
        <trans-unit id="b5bb2480a7390cd171d8e6e7da4d914c5c57bae2" translate="yes" xml:space="preserve">
          <source>First, let's copy Tomster's message into its own component. Components go in the &lt;code&gt;app/components&lt;/code&gt; directory.</source>
          <target state="translated">首先，让我们将Tomster的消息复制到其自己的组件中。组件位于 &lt;code&gt;app/components&lt;/code&gt; 目录中。</target>
        </trans-unit>
        <trans-unit id="8d184d8c77ce90884e7f1cbfc1ae2b64be52a4c2" translate="yes" xml:space="preserve">
          <source>First, let's look at setting the &lt;code&gt;belongsTo&lt;/code&gt; relationship in our new comment:</source>
          <target state="translated">首先，让我们来看一下在新注释中设置 &lt;code&gt;belongsTo&lt;/code&gt; 关系：</target>
        </trans-unit>
        <trans-unit id="6eadcb5f0a4f39ed8ede149f4439b7363969cd98" translate="yes" xml:space="preserve">
          <source>First, let's look at the model definitions:</source>
          <target state="translated">首先,我们来看看模型的定义。</target>
        </trans-unit>
        <trans-unit id="2d4aa57fc0f8f1880631484c60f1ef3f6b6df0a4" translate="yes" xml:space="preserve">
          <source>First, let's start with the HTML.</source>
          <target state="translated">首先,我们从HTML开始。</target>
        </trans-unit>
        <trans-unit id="948ba0b5c2d99cf6144521a6394416708807b6ae" translate="yes" xml:space="preserve">
          <source>First, let's turn our &lt;code&gt;increment&lt;/code&gt; and &lt;code&gt;decrement&lt;/code&gt; methods into a single &lt;code&gt;change&lt;/code&gt; method that takes the amount as a parameter.</source>
          <target state="translated">首先，让我们将 &lt;code&gt;increment&lt;/code&gt; 和 &lt;code&gt;decrement&lt;/code&gt; 方法转换为将金额作为参数的单个 &lt;code&gt;change&lt;/code&gt; 方法。</target>
        </trans-unit>
        <trans-unit id="820cfc89d284678866eb3c45a0088b1821983809" translate="yes" xml:space="preserve">
          <source>First, refactor your own code to not depend on jQuery. See the section above on how to do this. Keep in mind that you will have to remove jQuery usage entirely, you cannot use solutions that replace the integration API with jQuery independently such as &lt;code&gt;$(this.element)&lt;/code&gt;.</source>
          <target state="translated">首先，重构您自己的代码以不依赖jQuery。请参阅以上有关如何执行此操作的部分。请记住，您将必须完全删除jQuery的使用，不能使用 &lt;code&gt;$(this.element)&lt;/code&gt; 之类的用jQuery独立替换集成API的解决方案。</target>
        </trans-unit>
        <trans-unit id="472239296d98f3194e8bb30847f70bef3c7937fe" translate="yes" xml:space="preserve">
          <source>First, we add actions to handle the &lt;code&gt;click&lt;/code&gt; events for the &lt;code&gt;Play&lt;/code&gt; and &lt;code&gt;Pause&lt;/code&gt; buttons:</source>
          <target state="translated">首先，我们添加操作来处理&amp;ldquo; &lt;code&gt;Play&lt;/code&gt; 和&amp;ldquo; &lt;code&gt;Pause&lt;/code&gt; 按钮的 &lt;code&gt;click&lt;/code&gt; 事件：</target>
        </trans-unit>
        <trans-unit id="3381dace0d96459f09929584bf5b806768029515" translate="yes" xml:space="preserve">
          <source>First, we can modify the &lt;code&gt;&amp;lt;PeopleList&amp;gt;&lt;/code&gt; component to include a button:</source>
          <target state="translated">首先，我们可以修改 &lt;code&gt;&amp;lt;PeopleList&amp;gt;&lt;/code&gt; 组件以包括一个按钮：</target>
        </trans-unit>
        <trans-unit id="a0629bcd6a04aa486281fdec7ac1791e0a0fc19b" translate="yes" xml:space="preserve">
          <source>First, we want to test that visiting &lt;code&gt;/&lt;/code&gt; properly redirects to &lt;code&gt;/rentals&lt;/code&gt;. We'll use the Ember &lt;code&gt;visit&lt;/code&gt; helper and then make sure our current URL is &lt;code&gt;/rentals&lt;/code&gt; once the redirect occurs.</source>
          <target state="translated">首先，我们要测试访问 &lt;code&gt;/&lt;/code&gt; 正确重定向到 &lt;code&gt;/rentals&lt;/code&gt; 。我们将使用Ember &lt;code&gt;visit&lt;/code&gt; 帮助器，然后在重定向发生后确保当前URL为 &lt;code&gt;/rentals&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="bcb59c1a58c38561e2f0a31c63e53aa249dedbda" translate="yes" xml:space="preserve">
          <source>First, we would add a component class and extract the parts of each &lt;code&gt;&amp;lt;Message&amp;gt;&lt;/code&gt; component that are different into an array on that class. We would extract the username, active value, local time, and the yielded content for each message. For the yielded content, since it's plain HTML, we can extract it as a string.</source>
          <target state="translated">首先，我们将添加一个组件类，并将每个 &lt;code&gt;&amp;lt;Message&amp;gt;&lt;/code&gt; 组件的不同部分提取到该类的数组中。我们将提取每个消息的用户名，有效值，本地时间和产生的内容。对于产生的内容，由于它是纯HTML，因此我们可以将其提取为字符串。</target>
        </trans-unit>
        <trans-unit id="3b9e569b97de65bcfc14bf39fec8679fb982a301" translate="yes" xml:space="preserve">
          <source>First, you can run the test suite by entering the command &lt;code&gt;ember test&lt;/code&gt;, or &lt;code&gt;ember t&lt;/code&gt;, in your terminal. This will run the suite just once.</source>
          <target state="translated">首先，您可以通过在终端中输入命令 &lt;code&gt;ember test&lt;/code&gt; 或 &lt;code&gt;ember t&lt;/code&gt; 来运行测试套件。这将仅运行套件一次。</target>
        </trans-unit>
        <trans-unit id="6706b49fc30db4d029bde11b98efa970615d213c" translate="yes" xml:space="preserve">
          <source>Flagging Details</source>
          <target state="translated">旗帜细节</target>
        </trans-unit>
        <trans-unit id="5d728758adcdd5154d3be55552c1c061ef1489b2" translate="yes" xml:space="preserve">
          <source>Flags</source>
          <target state="translated">Flags</target>
        </trans-unit>
        <trans-unit id="19cb5ab7ee7f1f9598ac357f666b0f5509ab62a2" translate="yes" xml:space="preserve">
          <source>Flags are Boolean values that can be used to introspect a record's current state in a more user-friendly way than examining its state path. For example, instead of doing this:</source>
          <target state="translated">标志是布尔值,它可以用来反省记录的当前状态,比检查它的状态路径更方便。例如,与其这样做,不如这样做。</target>
        </trans-unit>
        <trans-unit id="b4b770e289db379ddae59b3a7a4305d8bcdacb14" translate="yes" xml:space="preserve">
          <source>Focus Management</source>
          <target state="translated">焦点管理</target>
        </trans-unit>
        <trans-unit id="d7364a2e9bf38000e6c8cf95c07c1e59d10416bf" translate="yes" xml:space="preserve">
          <source>Focus is one of the main ways a component can communicate with screen readers.</source>
          <target state="translated">聚焦是组件与屏幕阅读器沟通的主要方式之一。</target>
        </trans-unit>
        <trans-unit id="9a27bad688a1495e1d0e0640951fdf0fe6cefdb7" translate="yes" xml:space="preserve">
          <source>Focus management in components</source>
          <target state="translated">部件的重点管理</target>
        </trans-unit>
        <trans-unit id="9a41650b1923238b95545dfd4da035963c6ba7d6" translate="yes" xml:space="preserve">
          <source>Focus should return from whence it came- for example, if a &lt;code&gt;&amp;lt;button&amp;gt;&lt;/code&gt; element opens a modal, the focus should then be returned to that same trigger button once the modal is closed.</source>
          <target state="translated">焦点应从其原点返回，例如，如果 &lt;code&gt;&amp;lt;button&amp;gt;&lt;/code&gt; 元素打开模式，则应在模式关闭后将焦点返回到同一触发按钮。</target>
        </trans-unit>
        <trans-unit id="1b8df3f68a8b572701fbfac12cbf5b5265e25ce1" translate="yes" xml:space="preserve">
          <source>Follow the &lt;a href=&quot;https://cli.emberjs.com/release/basic-use/upgrading/&quot;&gt;regular upgrade steps&lt;/a&gt; to update your app to at least version &lt;code&gt;3.15&lt;/code&gt;.</source>
          <target state="translated">请按照&lt;a href=&quot;https://cli.emberjs.com/release/basic-use/upgrading/&quot;&gt;常规升级步骤&lt;/a&gt;将您的应用程序更新到至少 &lt;code&gt;3.15&lt;/code&gt; 版。</target>
        </trans-unit>
        <trans-unit id="a28beaaed4ef1d566f4c97eccc1caa61549d33dd" translate="yes" xml:space="preserve">
          <source>Following these steps will help you get your site up and running in minutes:</source>
          <target state="translated">按照这些步骤,将帮助您在几分钟内建立并运行您的网站。</target>
        </trans-unit>
        <trans-unit id="d11dc4abb333b77947ff74b7169fb2a22341d1f8" translate="yes" xml:space="preserve">
          <source>For Ember Data to correctly map errors to their corresponding properties on the model, Ember Data expects each error to be a valid JSON-API error object with a &lt;code&gt;source/pointer&lt;/code&gt; that matches the property name. For example, if you had a Post model that looked like this.</source>
          <target state="translated">为了使Ember Data正确地将错误映射到模型上的相应属性，Ember Data希望每个错误都是有效的JSON-API错误对象，其 &lt;code&gt;source/pointer&lt;/code&gt; 与属性名称匹配。例如，如果您有一个看起来像这样的Post模型。</target>
        </trans-unit>
        <trans-unit id="608af683967cdf20062b6769068e1aa8964643ac" translate="yes" xml:space="preserve">
          <source>For Ember Data to correctly map errors to their corresponding properties on the model, Ember Data expects each error to be a valid json-api error object with a &lt;code&gt;source/pointer&lt;/code&gt; that matches the property name. For example if you had a Post model that looked like this.</source>
          <target state="translated">为了使Ember Data正确地将错误映射到模型上的相应属性，Ember Data希望每个错误都是一个有效的json-api错误对象，其 &lt;code&gt;source/pointer&lt;/code&gt; 与属性名称匹配。例如，如果您有一个看起来像这样的Post模型。</target>
        </trans-unit>
        <trans-unit id="8901a64a4130543da37dae623336833c3ed01d95" translate="yes" xml:space="preserve">
          <source>For Example, if you had a &lt;code&gt;User&lt;/code&gt; model that looked like this:</source>
          <target state="translated">例如，如果您的 &lt;code&gt;User&lt;/code&gt; 模型如下所示：</target>
        </trans-unit>
        <trans-unit id="9bf222dedc4fde701f327ad11e7bcbfb8bbe58aa" translate="yes" xml:space="preserve">
          <source>For Glimmer components, arguments are &lt;em&gt;one-way bound&lt;/em&gt;. There is no way to directly mutate a value on a parent component from the child component, even if it is passed as an argument. Instead, you must send an &lt;em&gt;action&lt;/em&gt; upward to mutate the value:</source>
          <target state="translated">对于Glimmer组件，参数是&lt;em&gt;单向绑定的&lt;/em&gt;。即使将其作为参数传递，也无法直接从子组件中更改父组件上的值。相反，您必须向上发送一个&lt;em&gt;操作&lt;/em&gt;以使值突变：</target>
        </trans-unit>
        <trans-unit id="d17bb81f259dfd87f21096341e61841d99e8a36c" translate="yes" xml:space="preserve">
          <source>For Super Rentals, we want to arrive at a home page which displays a list of rentals. From there, we should be able to visit an about page and our contact page.</source>
          <target state="translated">对于超级租房,我们希望到达一个显示租房列表的主页。从那里,我们应该能够访问关于页面和我们的联系页面。</target>
        </trans-unit>
        <trans-unit id="6c19850875c0f4c200fdbe850c4cc53c4bc55d59" translate="yes" xml:space="preserve">
          <source>For Super Rentals, we want to be able to display a map showing where each rental is. To implement this feature, we will take advantage of several Ember concepts:</source>
          <target state="translated">对于超级租房,我们希望能够在地图上显示每个租房的位置。为了实现这个功能,我们将利用几个Ember概念。</target>
        </trans-unit>
        <trans-unit id="11e2ef0182a51d3a82241cd0b83c6b8e1e2299f1" translate="yes" xml:space="preserve">
          <source>For Super Rentals, we'll take advantage of two addons: &lt;a href=&quot;https://github.com/toddjordan/ember-cli-tutorial-style&quot;&gt;ember-cli-tutorial-style&lt;/a&gt; and &lt;a href=&quot;http://www.ember-cli-mirage.com/&quot;&gt;ember-cli-mirage&lt;/a&gt;.</source>
          <target state="translated">对于Super Rentals，我们将利用两个附加组件：&lt;a href=&quot;https://github.com/toddjordan/ember-cli-tutorial-style&quot;&gt;ember-cli-tutorial-style&lt;/a&gt;和&lt;a href=&quot;http://www.ember-cli-mirage.com/&quot;&gt;ember-cli-mirage&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="cd0364f3fbd052edc01be35296c37eaa0f495aa7" translate="yes" xml:space="preserve">
          <source>For a findRecord request, this is the id initially provided in the call to store.findRecord. Else this value is null.</source>
          <target state="translated">对于一个findRecord请求,这是在调用store.findRecord时最初提供的id。否则这个值为空。</target>
        </trans-unit>
        <trans-unit id="e5b8f6c95cbe660c082982f09e9c828163fb2d1f" translate="yes" xml:space="preserve">
          <source>For a full list of command line options, run &lt;code&gt;ember help&lt;/code&gt;.</source>
          <target state="translated">有关命令行选项的完整列表，请运行 &lt;code&gt;ember help&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="df9331f557ec97b660c482b532a718f800964df0" translate="yes" xml:space="preserve">
          <source>For a given relationship name, returns the model type of the relationship.</source>
          <target state="translated">对于给定的关系名,返回关系的模型类型。</target>
        </trans-unit>
        <trans-unit id="4bbf91ea9cb6dee3d2f030e7e006dcf2ff83888c" translate="yes" xml:space="preserve">
          <source>For a model called TacoParty, its &lt;code&gt;modelName&lt;/code&gt; would be the string &lt;code&gt;taco-party&lt;/code&gt;. The RESTSerializer will send it to the server with &lt;code&gt;tacoParty&lt;/code&gt; as the root key in the JSON payload:</source>
          <target state="translated">对于名为TacoParty的模型，其 &lt;code&gt;modelName&lt;/code&gt; 将为字符串 &lt;code&gt;taco-party&lt;/code&gt; 。RESTSerializer将使用 &lt;code&gt;tacoParty&lt;/code&gt; 作为JSON负载中的根密钥将其发送到服务器：</target>
        </trans-unit>
        <trans-unit id="55bdaf1a83e02f4ce01b2c3a5eb12b3cb6773aca" translate="yes" xml:space="preserve">
          <source>For a more complex example, this template would allow the user to switch between showing the user's height and weight with a click:</source>
          <target state="translated">对于一个更复杂的例子,这个模板可以让用户通过点击来切换显示用户的身高和体重。</target>
        </trans-unit>
        <trans-unit id="aacbc5ca40c83127bb62b881de3e0d83a93aaabc" translate="yes" xml:space="preserve">
          <source>For addons needing more advanced detection &lt;a href=&quot;https://github.com/ember-cli/babel-plugin-debug-macros&quot;&gt;babel-plugin-debug-macros&lt;/a&gt; can be leveraged to provide code-stripping based on feature presence. For example in your addon's &lt;code&gt;index.js&lt;/code&gt;:</source>
          <target state="translated">对于需要更高级检测&lt;a href=&quot;https://github.com/ember-cli/babel-plugin-debug-macros&quot;&gt;的插件，&lt;/a&gt;可以利用babel-plugin-debug-macros基于功能的存在来提供代码剥离。例如在您的插件的 &lt;code&gt;index.js&lt;/code&gt; 中：</target>
        </trans-unit>
        <trans-unit id="3700335c1af8f6f4f3a1f0c5b9ed40e2c148205e" translate="yes" xml:space="preserve">
          <source>For an example implementation, see &lt;a href=&quot;ds.jsonserializer&quot;&gt;DS.JSONSerializer&lt;/a&gt;, the included JSON serializer.</source>
          <target state="translated">有关示例实现，请参阅&lt;a href=&quot;ds.jsonserializer&quot;&gt;DS.JSONSerializer&lt;/a&gt;（包括的JSON序列化程序）。</target>
        </trans-unit>
        <trans-unit id="d638e7624c5a777bf24a21f0c4a48fe8683a638c" translate="yes" xml:space="preserve">
          <source>For an example implementation, see &lt;a href=&quot;jsonserializer&quot;&gt;JSONSerializer&lt;/a&gt;, the included JSON serializer.</source>
          <target state="translated">有关示例实现，请参阅&lt;a href=&quot;jsonserializer&quot;&gt;JSONSerializer&lt;/a&gt;（包括的JSON序列化器）。</target>
        </trans-unit>
        <trans-unit id="9ca994b2a5d04d63be4a4b3fea64e6f8c73fb10c" translate="yes" xml:space="preserve">
          <source>For an example implementation, see &lt;code&gt;DS.RESTAdapter&lt;/code&gt;, the included REST adapter.</source>
          <target state="translated">有关示例实现，请参阅 &lt;code&gt;DS.RESTAdapter&lt;/code&gt; ，包括的REST适配器。</target>
        </trans-unit>
        <trans-unit id="795ea3c24992645ecbb62e28ed978653dcdbb67c" translate="yes" xml:space="preserve">
          <source>For any of these cases, you can configure &lt;code&gt;ember build&lt;/code&gt; to do The Right Thing. You can read more about this in &lt;a href=&quot;https://cli.emberjs.com/release/advanced-use/build-targets/&quot;&gt;the Ember CLI Guides&lt;/a&gt;!</source>
          <target state="translated">对于这些情况中的任何一种，您都可以将 &lt;code&gt;ember build&lt;/code&gt; 配置为&amp;ldquo;正确的事情&amp;rdquo;。您可以在&lt;a href=&quot;https://cli.emberjs.com/release/advanced-use/build-targets/&quot;&gt;《 Ember CLI指南》中&lt;/a&gt;阅读有关此内容的更多信息！</target>
        </trans-unit>
        <trans-unit id="19d83c29fec0c9696864748fc37c9295098a6ed4" translate="yes" xml:space="preserve">
          <source>For applications whose APIs are &lt;em&gt;very close to&lt;/em&gt; or &lt;em&gt;exactly&lt;/em&gt; the &lt;strong&gt;REST&lt;/strong&gt; format or &lt;strong&gt;JSON:API&lt;/strong&gt; format the &lt;code&gt;@ember-data/serializer&lt;/code&gt; package contains implementations these applications can extend. It also contains a simple &lt;code&gt;JSONSerializer&lt;/code&gt; for serializing to/from very basic JSON objects.</source>
          <target state="translated">对于其API与&lt;strong&gt;REST&lt;/strong&gt;格式或&lt;strong&gt;JSON：API&lt;/strong&gt;格式&lt;em&gt;非常接近&lt;/em&gt;或&lt;em&gt;完全相同&lt;/em&gt;的应用程序， &lt;code&gt;@ember-data/serializer&lt;/code&gt; 软件包包含这些应用程序可以扩展的实现。它还包含一个简单的 &lt;code&gt;JSONSerializer&lt;/code&gt; ,用于与非常基本的JSON对象进行序列化。&lt;strong&gt;&lt;/strong&gt;&lt;strong&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="e2d3f7ef5183f7de30d3540a21b33817bbe112b6" translate="yes" xml:space="preserve">
          <source>For arbitrary filtering, use the &lt;a href=&quot;http://emberjs.com/api/classes/Ember.Enumerable.html#method_filter&quot;&gt;&lt;code&gt;filter()&lt;/code&gt;&lt;/a&gt; method. The filter method expects the callback to return &lt;code&gt;true&lt;/code&gt; if Ember should include it in the final Array, and &lt;code&gt;false&lt;/code&gt; or &lt;code&gt;undefined&lt;/code&gt; if Ember should not.</source>
          <target state="translated">对于任意过滤，请使用&lt;a href=&quot;http://emberjs.com/api/classes/Ember.Enumerable.html#method_filter&quot;&gt; &lt;code&gt;filter()&lt;/code&gt; &lt;/a&gt;方法。如果Ember应该在最终数组中包含该回调方法，则filter方法希望该回调返回 &lt;code&gt;true&lt;/code&gt; ;如果Ember不应该将其返回 &lt;code&gt;false&lt;/code&gt; 或 &lt;code&gt;undefined&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="ea2f77cc825060eb2a2d64424a142c42b41a9027" translate="yes" xml:space="preserve">
          <source>For backwards compatibility with earlier versions of Ember, it is possible to call an action by passing an event argument.</source>
          <target state="translated">为了向后兼容早期版本的Ember,可以通过传递一个事件参数来调用一个动作。</target>
        </trans-unit>
        <trans-unit id="3c5c7bfbe7ec718eba75809ebe5f4bc5e7414f1e" translate="yes" xml:space="preserve">
          <source>For basic Ember app development scenarios, you don't need to understand the run loop or use it directly. All common paths are paved nicely for you and don't require working with the run loop directly.</source>
          <target state="translated">对于基本的Ember应用开发场景,你不需要了解运行循环,也不需要直接使用它。所有常见的路径都为你很好的铺垫了,不需要直接使用运行循环。</target>
        </trans-unit>
        <trans-unit id="ca90b49f09108e8c5f3baf10440957cff8c7e056" translate="yes" xml:space="preserve">
          <source>For classic components, only attributes that were explicitly listed by the component you are invoking would be placed on the component's wrapper element.</source>
          <target state="translated">对于经典组件来说,只有被你所调用的组件明确列出的属性才会被放在组件的包装元素上。</target>
        </trans-unit>
        <trans-unit id="56ce68e24eb61ded26449c175235262d8e871d12" translate="yes" xml:space="preserve">
          <source>For creating your own test helper, run &lt;code&gt;ember generate test-helper
&amp;lt;helper-name&amp;gt;&lt;/code&gt;. Here is the result of running &lt;code&gt;ember g test-helper
shouldHaveElementWithCount&lt;/code&gt;:</source>
          <target state="translated">要创建自己的测试助手，请运行 &lt;code&gt;ember generate test-helper &amp;lt;helper-name&amp;gt;&lt;/code&gt; 。这是运行 &lt;code&gt;ember g test-helper shouldHaveElementWithCount&lt;/code&gt; ：</target>
        </trans-unit>
        <trans-unit id="2ae4b0ef9f0e766abe75e47e63d9b8a5da4127f3" translate="yes" xml:space="preserve">
          <source>For deep-linking to route paths that contain multiple dynamic segments, multiple model arguments can be used. As the router transitions through the route path, each supplied model argument will become the context for the route with the dynamic segments:</source>
          <target state="translated">对于包含多个动态段的路由路径的深度链接,可以使用多个模型参数。当路由器在路由路径中转换时,每个提供的模型参数将成为包含动态段的路由的上下文。</target>
        </trans-unit>
        <trans-unit id="18aa8c626627f3993e0ea20a45eaee1871b8d93b" translate="yes" xml:space="preserve">
          <source>For detailed usage, see the &lt;a href=&quot;https://guides.emberjs.com/release/object-model/&quot;&gt;Object Model&lt;/a&gt; section of the guides.</source>
          <target state="translated">有关详细用法，请参见指南的&amp;ldquo;&lt;a href=&quot;https://guides.emberjs.com/release/object-model/&quot;&gt;对象模型&amp;rdquo;&lt;/a&gt;部分。</target>
        </trans-unit>
        <trans-unit id="738ab1bb57b35b828d77d1e2c2e81f811ff8e2f7" translate="yes" xml:space="preserve">
          <source>For developers who are not already familiar with native classes, check out &lt;a href=&quot;https://guides.emberjs.com/in-depth-topics/native-classes-in-depth/&quot;&gt;Ember's native class guide&lt;/a&gt;, which provides a thorough breakdown of native class functionality and usage. This section of the upgrade guide will focus on the differences between classic Ember classes and native classes. You can also reference the &lt;a href=&quot;https://ember-learn.github.io/ember-octane-vs-classic-cheat-sheet/&quot;&gt;Octane vs. Classic Cheatsheet&lt;/a&gt; as a quick reference for these differences.</source>
          <target state="translated">对于尚未熟悉本机类的开发人员，请查看&lt;a href=&quot;https://guides.emberjs.com/in-depth-topics/native-classes-in-depth/&quot;&gt;Ember的本机类指南&lt;/a&gt;，该指南提供了本机类功能和用法的完整细分。升级指南的这一部分将重点介绍经典Ember类和本机类之间的区别。您也可以参考&lt;a href=&quot;https://ember-learn.github.io/ember-octane-vs-classic-cheat-sheet/&quot;&gt;Octane与Classic备忘单&lt;/a&gt;作为这些差异的快速参考。</target>
        </trans-unit>
        <trans-unit id="422b640ae923c2f1dbcc59b71d7f412d819eeae7" translate="yes" xml:space="preserve">
          <source>For example &lt;code&gt;post&lt;/code&gt; would be converted to &lt;code&gt;posts&lt;/code&gt; and &lt;code&gt;student-assesment&lt;/code&gt; would be converted to &lt;code&gt;student-assesments&lt;/code&gt;.</source>
          <target state="translated">例如， &lt;code&gt;post&lt;/code&gt; 将转换为 &lt;code&gt;posts&lt;/code&gt; 而 &lt;code&gt;student-assesment&lt;/code&gt; 将转换为 &lt;code&gt;student-assesments&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="29e6284618835e51e5f101b2f2c1824310bf5fd3" translate="yes" xml:space="preserve">
          <source>For example a component for playing or pausing music may translate click events into action notifications of &quot;play&quot; or &quot;stop&quot; depending on some internal state of the component:</source>
          <target state="translated">例如,用于播放或暂停音乐的组件可以根据组件的某些内部状态将点击事件转化为 &quot;播放 &quot;或 &quot;停止 &quot;的动作通知。</target>
        </trans-unit>
        <trans-unit id="c4ffae2db69018636d385df639a37b80e2029b44" translate="yes" xml:space="preserve">
          <source>For example having a user that has many pets:</source>
          <target state="translated">比如有一个用户,有很多宠物。</target>
        </trans-unit>
        <trans-unit id="4274de86023f1d8ef0c38c3b4f1a841459c37ceb" translate="yes" xml:space="preserve">
          <source>For example if you have an object LineItem with an endpoint of &quot;/line_items/&quot;.</source>
          <target state="translated">例如,如果你有一个端点为&quot;/line_items/&quot;的对象LineItem。</target>
        </trans-unit>
        <trans-unit id="32b4b0a4775727dc38c8719870e36f7a3ebf9e32" translate="yes" xml:space="preserve">
          <source>For example if you wanted to ensure all your attributes were always serialized as properties on an &lt;code&gt;attributes&lt;/code&gt; object you could write:</source>
          <target state="translated">例如，如果您想确保所有属性始终作为 &lt;code&gt;attributes&lt;/code&gt; 对象上的属性序列化，则可以编写：</target>
        </trans-unit>
        <trans-unit id="16ff63a70847a566067bc93db18e57265f811c13" translate="yes" xml:space="preserve">
          <source>For example review the docs for each method of this mixin:</source>
          <target state="translated">例如,回顾一下这个 mixin 的每个方法的文档。</target>
        </trans-unit>
        <trans-unit id="89e34524011e47a91b9054a4492f9d96c645a014" translate="yes" xml:space="preserve">
          <source>For example the key &lt;code&gt;posts&lt;/code&gt; would be converted to &lt;code&gt;post&lt;/code&gt; and the key &lt;code&gt;studentAssesments&lt;/code&gt; would be converted to &lt;code&gt;student-assesment&lt;/code&gt;.</source>
          <target state="translated">例如，关键 &lt;code&gt;posts&lt;/code&gt; 将转换为 &lt;code&gt;post&lt;/code&gt; ，而关键 &lt;code&gt;studentAssesments&lt;/code&gt; 将转换为 &lt;code&gt;student-assesment&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="dcdf15727eb2b28f1020aebdfa796fc8be46d4b5" translate="yes" xml:space="preserve">
          <source>For example you may find that you want to read an embedded record when extracting a JSON payload but only include the relationship's id when serializing the record. This is possible by using the &lt;code&gt;serialize:
'ids'&lt;/code&gt; option. You can also opt out of serializing a relationship by setting &lt;code&gt;serialize: false&lt;/code&gt;.</source>
          <target state="translated">例如，您可能会发现您在提取JSON有效负载时要读取嵌入式记录，但在序列化记录时仅包含关系的ID。这可以通过使用 &lt;code&gt;serialize: 'ids'&lt;/code&gt; 选项来实现。您还可以通过设置 &lt;code&gt;serialize: false&lt;/code&gt; 来选择不序列化关系。</target>
        </trans-unit>
        <trans-unit id="33d2f1cbb1d8553be392d988868f6a5371d2ec96" translate="yes" xml:space="preserve">
          <source>For example, &lt;code&gt;recordReference.push(promise)&lt;/code&gt; will be resolved with a record.</source>
          <target state="translated">例如， &lt;code&gt;recordReference.push(promise)&lt;/code&gt; 将通过记录来解析。</target>
        </trans-unit>
        <trans-unit id="af68c84b34b6d750b82bc37ecf88ed15f7fc2ff6" translate="yes" xml:space="preserve">
          <source>For example, ArrayProxy is a concrete class that can be instantiated to implement array-like behavior. This class uses the Array Mixin by way of the MutableArray mixin, which allows observable changes to be made to the underlying array.</source>
          <target state="translated">例如,ArrayProxy是一个具体的类,它可以被实例化来实现类似数组的行为。这个类通过MutableArray mixin的方式使用Array Mixin,允许对底层数组进行可观察的改变。</target>
        </trans-unit>
        <trans-unit id="a6e5033ffdb8426f6ba4331cc5b92fee148c9ad1" translate="yes" xml:space="preserve">
          <source>For example, ArrayProxy is a concrete classes that can be instantiated to implement array-like behavior. Both of these classes use the Array Mixin by way of the MutableArray mixin, which allows observable changes to be made to the underlying array.</source>
          <target state="translated">例如,ArrayProxy是一个具体的类,可以被实例化来实现类似数组的行为。这两个类都通过MutableArray mixin的方式使用Array Mixin,允许对底层数组进行可观察的改变。</target>
        </trans-unit>
        <trans-unit id="ff3d376904c68d022bfbba8a10050ecfb6143d30" translate="yes" xml:space="preserve">
          <source>For example, a &lt;code&gt;favicon&lt;/code&gt; located at &lt;code&gt;public/images/favicon.ico&lt;/code&gt; will be copied to &lt;code&gt;dist/images/favicon.ico&lt;/code&gt;.</source>
          <target state="translated">例如，位于 &lt;code&gt;public/images/favicon.ico&lt;/code&gt; 的收藏夹 &lt;code&gt;favicon&lt;/code&gt; 将被复制到 &lt;code&gt;dist/images/favicon.ico&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="87e82c21445e0bff3eded3b0bd032f6402cb94c2" translate="yes" xml:space="preserve">
          <source>For example, a common desire is to change the port that Ember CLI serves the app from. It's possible to pass the port number from the command line with &lt;code&gt;ember server --port 8080&lt;/code&gt;. To make this configuration permanent, edit your &lt;code&gt;.ember-cli&lt;/code&gt; file like so:</source>
          <target state="translated">例如，一个共同的愿望是更改Ember CLI服务应用程序的端口。可以使用 &lt;code&gt;ember server --port 8080&lt;/code&gt; 从命令行传递端口号。要使此配置永久 &lt;code&gt;.ember-cli&lt;/code&gt; ，请按如下方式编辑.ember-cli文件：</target>
        </trans-unit>
        <trans-unit id="9fbdf151c291a6758e34cf2395f457e9db52c84f" translate="yes" xml:space="preserve">
          <source>For example, a computed property like this:</source>
          <target state="translated">例如,像这样的计算属性。</target>
        </trans-unit>
        <trans-unit id="7a5acb60141e929963eb39d18bb05eef3650c6b8" translate="yes" xml:space="preserve">
          <source>For example, a photo sharing application might have a &lt;code&gt;Photo&lt;/code&gt; model to represent a particular photo, and a &lt;code&gt;PhotoAlbum&lt;/code&gt; that represents a group of photos. In contrast, an online shopping app would probably have different models, like &lt;code&gt;ShoppingCart&lt;/code&gt;, &lt;code&gt;Invoice&lt;/code&gt;, or &lt;code&gt;LineItem&lt;/code&gt;.</source>
          <target state="translated">例如，照片共享应用程序可能具有代表特定照片的 &lt;code&gt;Photo&lt;/code&gt; 模型和代表一组照片的 &lt;code&gt;PhotoAlbum&lt;/code&gt; 。相比之下，在线购物应用可能会具有不同的模型，例如 &lt;code&gt;ShoppingCart&lt;/code&gt; ， &lt;code&gt;Invoice&lt;/code&gt; 或 &lt;code&gt;LineItem&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="44ab29873b3591712c2e0c74255092599fc0926d" translate="yes" xml:space="preserve">
          <source>For example, a property rentals application would want to save the details of a rental when a user publishes it, and so a rental would have a model defining its details, perhaps called the &lt;em&gt;rental&lt;/em&gt; model.</source>
          <target state="translated">例如，物业租赁应用程序希望在用户发布租赁时保存其详细信息，因此，租赁将具有定义其详细信息的模型，可能称为&lt;em&gt;租赁&lt;/em&gt;模型。</target>
        </trans-unit>
        <trans-unit id="8d21aad40a9bed94333d576f120ad094ac4f4399" translate="yes" xml:space="preserve">
          <source>For example, a property rentals application would want to save the details of a rental when a user publishes it, and so a rental would have a model defining its details, perhaps called the &lt;em&gt;rental&lt;/em&gt; model. You may also need a &lt;em&gt;user&lt;/em&gt; model to keep track of who is currently logged in.</source>
          <target state="translated">例如，物业租赁应用程序希望在用户发布租赁时保存其详细信息，因此，租赁将具有定义其详细信息的模型，可能称为&lt;em&gt;租赁&lt;/em&gt;模型。您可能还需要一个&lt;em&gt;用户&lt;/em&gt;模型来跟踪当前登录的人。</target>
        </trans-unit>
        <trans-unit id="e3080b60207e20160ffb7606a977c66f7b9da764" translate="yes" xml:space="preserve">
          <source>For example, a route found at &lt;code&gt;addon/routes/posts/post.js&lt;/code&gt; within an engine named &lt;code&gt;admin&lt;/code&gt; will have a &lt;code&gt;fullRouteName&lt;/code&gt; of &lt;code&gt;admin.posts.post&lt;/code&gt;.</source>
          <target state="translated">例如，在名为 &lt;code&gt;admin&lt;/code&gt; 的引擎中的 &lt;code&gt;addon/routes/posts/post.js&lt;/code&gt; 中找到的路由的 &lt;code&gt;fullRouteName&lt;/code&gt; 为 &lt;code&gt;admin.posts.post&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="43c6758042b2d1438265c2824d5327c2afbb14fb" translate="yes" xml:space="preserve">
          <source>For example, a route found at &lt;code&gt;app/routes/posts/post.js&lt;/code&gt; will have a &lt;code&gt;routeName&lt;/code&gt; of &lt;code&gt;posts.post&lt;/code&gt;.</source>
          <target state="translated">例如，在 &lt;code&gt;app/routes/posts/post.js&lt;/code&gt; 中找到的路由将具有 &lt;code&gt;routeName&lt;/code&gt; 的 &lt;code&gt;posts.post&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="17296f09aca6cccf14c16b12a76d0dd488e56f7b" translate="yes" xml:space="preserve">
          <source>For example, an application initializer could register a &lt;code&gt;Logger&lt;/code&gt; factory with the key &lt;code&gt;logger:main&lt;/code&gt;:</source>
          <target state="translated">例如，应用程序初始化程序可以使用 &lt;code&gt;logger:main&lt;/code&gt; 注册 &lt;code&gt;Logger&lt;/code&gt; 工厂：</target>
        </trans-unit>
        <trans-unit id="da0d75be4fec5bac71e3c62f711ff5453bad5610" translate="yes" xml:space="preserve">
          <source>For example, as mentioned before, the route handler makes the model available to its template:</source>
          <target state="translated">例如,如前所述,路由处理程序将模型提供给其模板。</target>
        </trans-unit>
        <trans-unit id="677aedd807574aa47c0443452f50034656705301" translate="yes" xml:space="preserve">
          <source>For example, booting the instance in the full browser environment while specifying a foreign &lt;code&gt;document&lt;/code&gt; object (e.g. &lt;code&gt;{ isBrowser: true,
document: iframe.contentDocument }&lt;/code&gt;) does not work correctly today, largely due to Ember's jQuery dependency.</source>
          <target state="translated">例如，在很大程度上由于Ember的jQuery依赖关系，在指定外部 &lt;code&gt;document&lt;/code&gt; 对象（例如 &lt;code&gt;{ isBrowser: true, document: iframe.contentDocument }&lt;/code&gt; ）的同时在完整浏览器环境中启动实例无法正常工作。</target>
        </trans-unit>
        <trans-unit id="bf94a69859a173b24fa03f34475fba8bbc739769" translate="yes" xml:space="preserve">
          <source>For example, calling &lt;code&gt;component.$('li')&lt;/code&gt; will return a jQuery object containing all of the &lt;code&gt;li&lt;/code&gt; elements inside the DOM element of this component.</source>
          <target state="translated">例如，调用 &lt;code&gt;component.$('li')&lt;/code&gt; 将返回一个jQuery对象，其中包含该组件DOM元素内的所有 &lt;code&gt;li&lt;/code&gt; 元素。</target>
        </trans-unit>
        <trans-unit id="8dc524afcecae3a5d1a3b574ce3653941b460f7f" translate="yes" xml:space="preserve">
          <source>For example, calling &lt;code&gt;view.$('li')&lt;/code&gt; will return a jQuery object containing all of the &lt;code&gt;li&lt;/code&gt; elements inside the DOM element of this view.</source>
          <target state="translated">例如，调用 &lt;code&gt;view.$('li')&lt;/code&gt; 将返回一个jQuery对象，该对象包含此视图的DOM元素内的所有 &lt;code&gt;li&lt;/code&gt; 元素。</target>
        </trans-unit>
        <trans-unit id="832e7319fdf4fe74d789f4ff97a42892a8e5bfc9" translate="yes" xml:space="preserve">
          <source>For example, consider a service that keeps an array of messages, to be shown to the user at a later time:</source>
          <target state="translated">例如,考虑一个保留消息数组的服务,以便在以后的时间向用户展示。</target>
        </trans-unit>
        <trans-unit id="eb2b2ca3c29f9c0fe918c9aa0e06f7e004422a06" translate="yes" xml:space="preserve">
          <source>For example, consider an &lt;code&gt;Article&lt;/code&gt; component that takes &lt;code&gt;@title&lt;/code&gt; and &lt;code&gt;@body&lt;/code&gt; arguments.</source>
          <target state="translated">例如，考虑使用 &lt;code&gt;@title&lt;/code&gt; 和 &lt;code&gt;@body&lt;/code&gt; 参数的 &lt;code&gt;Article&lt;/code&gt; 组件。</target>
        </trans-unit>
        <trans-unit id="7c8ee7c9556775363655c292f702c4a670e25c24" translate="yes" xml:space="preserve">
          <source>For example, consider this model:</source>
          <target state="translated">例如,考虑这个模型。</target>
        </trans-unit>
        <trans-unit id="89077fa5b9e32d8be08e87125ce9f1df113d07ae" translate="yes" xml:space="preserve">
          <source>For example, given a &lt;code&gt;post&lt;/code&gt; model that has a &lt;code&gt;hasMany&lt;/code&gt; relationship with a &lt;code&gt;comment&lt;/code&gt; model, when we retrieve a specific post we can have the server also return that post's comments in the same request:</source>
          <target state="translated">例如，给定一个与 &lt;code&gt;comment&lt;/code&gt; 模型具有 &lt;code&gt;hasMany&lt;/code&gt; 关系的 &lt;code&gt;post&lt;/code&gt; 模型，当我们检索特定帖子时，我们可以让服务器在同一请求中还返回该帖子的评论：</target>
        </trans-unit>
        <trans-unit id="e57d8ceb5b0b225e29789d4aa5961260d2659c4c" translate="yes" xml:space="preserve">
          <source>For example, given a &lt;code&gt;post&lt;/code&gt; model that has a &lt;code&gt;hasMany&lt;/code&gt; relationship with a &lt;code&gt;comment&lt;/code&gt; model, when we retrieve all of the post records we can have the server also return all of the posts' comments in the same request:</source>
          <target state="translated">例如，给定一个与 &lt;code&gt;comment&lt;/code&gt; 模型具有 &lt;code&gt;hasMany&lt;/code&gt; 关系的 &lt;code&gt;post&lt;/code&gt; 模型，当我们检索所有帖子记录时，我们可以让服务器在同一请求中还返回所有帖子的评论：</target>
        </trans-unit>
        <trans-unit id="489f404e218cc75986bba15e8e11745beda5b8ec" translate="yes" xml:space="preserve">
          <source>For example, given a &lt;code&gt;user&lt;/code&gt; object that looks like:</source>
          <target state="translated">例如，给定一个 &lt;code&gt;user&lt;/code&gt; 对象，如下所示：</target>
        </trans-unit>
        <trans-unit id="db5aeb2693175b560fe1010b9127dd8f733e96eb" translate="yes" xml:space="preserve">
          <source>For example, given a model with this definition:</source>
          <target state="translated">例如,给定一个具有这样定义的模型。</target>
        </trans-unit>
        <trans-unit id="1180f3f7b18505ee8214c9a6062c2ec07decdecd" translate="yes" xml:space="preserve">
          <source>For example, given the following &lt;code&gt;User&lt;/code&gt; model and JSON payload:</source>
          <target state="translated">例如，给定以下 &lt;code&gt;User&lt;/code&gt; 模型和JSON有效负载：</target>
        </trans-unit>
        <trans-unit id="dd6659d9b3a107d7109a9db88fc8bd8f8d6b4873" translate="yes" xml:space="preserve">
          <source>For example, given the following minimal router and templates:</source>
          <target state="translated">例如,给定以下最小路由器和模板。</target>
        </trans-unit>
        <trans-unit id="85210e4c1cd5b251efc905283d29211e973a4353" translate="yes" xml:space="preserve">
          <source>For example, given the following model definition:</source>
          <target state="translated">例如,给定以下模型定义:</target>
        </trans-unit>
        <trans-unit id="46aef77986066ff4fcd7d5b3e1120a76a2b8736b" translate="yes" xml:space="preserve">
          <source>For example, given this component definition:</source>
          <target state="translated">例如,给定这个组件定义:</target>
        </trans-unit>
        <trans-unit id="2f59cce862ab3b75b665ac2791c566ec98398ef4" translate="yes" xml:space="preserve">
          <source>For example, here we pass a &lt;code&gt;class&lt;/code&gt; to a component:</source>
          <target state="translated">例如，在这里，我们将一个 &lt;code&gt;class&lt;/code&gt; 传递给组件：</target>
        </trans-unit>
        <trans-unit id="d4732529e8579217d42b369a80620f5828598bc5" translate="yes" xml:space="preserve">
          <source>For example, here's a &lt;code&gt;make-bold&lt;/code&gt; helper that returns a string containing HTML:</source>
          <target state="translated">例如，下面是一个 &lt;code&gt;make-bold&lt;/code&gt; 帮助器，它返回包含HTML的字符串：</target>
        </trans-unit>
        <trans-unit id="a0931ea25923fefdb6a38cd790a3537d6f79fb6d" translate="yes" xml:space="preserve">
          <source>For example, here's the &lt;code&gt;{{#each}}&lt;/code&gt; helper with its &lt;code&gt;key&lt;/code&gt; set to &lt;code&gt;id&lt;/code&gt;:</source>
          <target state="translated">例如，这是 &lt;code&gt;{{#each}}&lt;/code&gt; 助手，其 &lt;code&gt;key&lt;/code&gt; 设置为 &lt;code&gt;id&lt;/code&gt; ：</target>
        </trans-unit>
        <trans-unit id="9b5f4bb9027369a31d821f9f1441d45b248f4fcc" translate="yes" xml:space="preserve">
          <source>For example, if &lt;code&gt;this.photos&lt;/code&gt; is a list of three photos, the rendered HTML would look something like this:</source>
          <target state="translated">例如，如果 &lt;code&gt;this.photos&lt;/code&gt; 是三张照片的列表，则呈现的HTML将如下所示：</target>
        </trans-unit>
        <trans-unit id="dbcf42d8d7967ae994bbf983e708fe2d57e7d01c" translate="yes" xml:space="preserve">
          <source>For example, if &lt;code&gt;useLongGreeting&lt;/code&gt; is truthy, the following:</source>
          <target state="translated">例如，如果 &lt;code&gt;useLongGreeting&lt;/code&gt; 是真实的，则以下内容：</target>
        </trans-unit>
        <trans-unit id="90ee2ce35d12e00f7a7456f8b811fd34e12ce174" translate="yes" xml:space="preserve">
          <source>For example, if all of your keys are underscored and all-caps, but otherwise consistent with the names you use in your models, you can implement across-the-board rules for how to convert an attribute name in your model to a key in your JSON.</source>
          <target state="translated">例如,如果你的所有键都是下划线和全大写,但在其他方面与你在模型中使用的名称一致,你可以实现如何将模型中的属性名转换为JSON中的键的通用规则。</target>
        </trans-unit>
        <trans-unit id="02a30a3ddd052fb29a20412930f92c0856aa39c6" translate="yes" xml:space="preserve">
          <source>For example, if only events inside a DOM element with the ID of &lt;code&gt;ember-app&lt;/code&gt; should be delegated, set your application's &lt;code&gt;rootElement&lt;/code&gt; property:</source>
          <target state="translated">例如，如果仅应委派ID为 &lt;code&gt;ember-app&lt;/code&gt; 的DOM元素内的事件，请设置应用程序的 &lt;code&gt;rootElement&lt;/code&gt; 属性：</target>
        </trans-unit>
        <trans-unit id="3a9272e879b64b4a237182b125c580de3ff30f1e" translate="yes" xml:space="preserve">
          <source>For example, if the &lt;code&gt;IDs&lt;/code&gt; under &lt;code&gt;&quot;comments&quot;&lt;/code&gt; are provided as &lt;code&gt;_id&lt;/code&gt; instead of &lt;code&gt;id&lt;/code&gt;, you can specify how to normalize just the comments:</source>
          <target state="translated">例如，如果 &lt;code&gt;&quot;comments&quot;&lt;/code&gt; 下的 &lt;code&gt;IDs&lt;/code&gt; 以 &lt;code&gt;_id&lt;/code&gt; 而不是 &lt;code&gt;id&lt;/code&gt; 的形式提供，则可以指定如何仅规范评论：</target>
        </trans-unit>
        <trans-unit id="08d0bf160d6c1ec0e1162e1c16cc1119d1e3be74" translate="yes" xml:space="preserve">
          <source>For example, if the &lt;code&gt;post&lt;/code&gt; argument was passed:</source>
          <target state="translated">例如，如果传递了 &lt;code&gt;post&lt;/code&gt; 参数：</target>
        </trans-unit>
        <trans-unit id="896be09c413b3b2a12ea8051f29c05498cff5107" translate="yes" xml:space="preserve">
          <source>For example, if the original payload looks like:</source>
          <target state="translated">例如,如果原始有效载荷看起来像:</target>
        </trans-unit>
        <trans-unit id="eae48d7fffea1cab126121b7821c2c8b22f1b439" translate="yes" xml:space="preserve">
          <source>For example, if they're not logged in, you might want to prevent them from editing their profile, accessing private information, or checking out items in their shopping cart. Usually you want to redirect them to the login page, and after they have successfully logged in, take them back to the page they originally wanted to access.</source>
          <target state="translated">例如,如果他们没有登录,你可能想阻止他们编辑自己的个人资料,访问私人信息,或在购物车中结账。通常你要将他们重定向到登录页面,在他们成功登录后,将他们带回他们最初想要访问的页面。</target>
        </trans-unit>
        <trans-unit id="0fb055a8920b02f55febb777ebd4888a452094de" translate="yes" xml:space="preserve">
          <source>For example, if we are currently on &lt;code&gt;/photos/2&lt;/code&gt;, then the following template:</source>
          <target state="translated">例如，如果我们当前在 &lt;code&gt;/photos/2&lt;/code&gt; 上，则使用以下模板：</target>
        </trans-unit>
        <trans-unit id="25041eaac09d3faca0bcc2bc718aee028281495e" translate="yes" xml:space="preserve">
          <source>For example, if we have a &amp;ldquo;posts&amp;rdquo; route, we can set the page title for it like so:</source>
          <target state="translated">例如，如果我们有一条&amp;ldquo;帖子&amp;rdquo;路线，我们可以像这样设置页面标题：</target>
        </trans-unit>
        <trans-unit id="f73806b25dddfb94626863db4e4cbac2ab1cab96" translate="yes" xml:space="preserve">
          <source>For example, if we have the route &lt;code&gt;this.route('posts');&lt;/code&gt;, our route might load all of the blog posts for the app.</source>
          <target state="translated">例如，如果我们有路线 &lt;code&gt;this.route('posts');&lt;/code&gt; ，我们的路线可能会加载该应用程序的所有博客文章。</target>
        </trans-unit>
        <trans-unit id="d7530a9a1849b5e34e195f285cd3d57d53d0b2f2" translate="yes" xml:space="preserve">
          <source>For example, if we were to work on a blogPost's asynchronous comments, we would have to wait until the promise has fulfilled:</source>
          <target state="translated">例如,如果我们要对一个blogPost的异步评论进行工作,我们就必须等到承诺履行完毕。</target>
        </trans-unit>
        <trans-unit id="f47e9b784954b10b2771eb8757cd1777f9724f7e" translate="yes" xml:space="preserve">
          <source>For example, if you are building an events ticketing system, in which users can only reserve tickets for 20 minutes at a time, and want to ensure that in each route you have data that is no more than 20 minutes old you could write:</source>
          <target state="translated">例如,如果你正在构建一个活动票务系统,在这个系统中,用户每次只能预订20分钟的票,并且希望确保在每个路线中,你的数据不超过20分钟,你可以写。</target>
        </trans-unit>
        <trans-unit id="460edfe2b86e784c531932e74ac73c470273eb11" translate="yes" xml:space="preserve">
          <source>For example, if you define a model like this:</source>
          <target state="translated">例如,如果你定义了一个这样的模型。</target>
        </trans-unit>
        <trans-unit id="d36faabef517cd5254e968a43b6fa26414afa3be" translate="yes" xml:space="preserve">
          <source>For example, if you define a view class, it might look like this:</source>
          <target state="translated">例如,如果你定义了一个视图类,它可能看起来像这样。</target>
        </trans-unit>
        <trans-unit id="266ea5db8384b7e0ee687c908635246f12fda8d5" translate="yes" xml:space="preserve">
          <source>For example, if you define models like this:</source>
          <target state="translated">例如,如果你这样定义模型。</target>
        </trans-unit>
        <trans-unit id="ab71643d1a343c350f40fecb15ad48172d275cdc" translate="yes" xml:space="preserve">
          <source>For example, if you desire an action to be sent when the input is blurred, you only need to setup the action name to the event name property.</source>
          <target state="translated">例如,如果您希望在输入模糊时发送一个动作,您只需要将动作名称设置为事件名称属性。</target>
        </trans-unit>
        <trans-unit id="69120901f27e4d92d120f09306db2200386d8ca5" translate="yes" xml:space="preserve">
          <source>For example, if you did not want to pluralize model names and needed underscore_case instead of camelCase you could override the &lt;code&gt;pathForType&lt;/code&gt; method like this:</source>
          <target state="translated">例如，如果您不想使模型名称复数并且需要使用underscore_case而不是camelCase，则可以这样覆盖 &lt;code&gt;pathForType&lt;/code&gt; 方法：</target>
        </trans-unit>
        <trans-unit id="0cb1c079cff6f181eb53c59a5d4d1c717cfb215d" translate="yes" xml:space="preserve">
          <source>For example, if you did not want to pluralize model names and needed underscore_case instead of dash-case you could override the &lt;code&gt;pathForType&lt;/code&gt; method like this:</source>
          <target state="translated">例如，如果您不想使模型名称复数并且需要underscore_case而不是破折号，则可以覆盖如下的 &lt;code&gt;pathForType&lt;/code&gt; 方法：</target>
        </trans-unit>
        <trans-unit id="d1ec227d724ad2048f69c0dcb05514a48174eb14" translate="yes" xml:space="preserve">
          <source>For example, if you do not want to fetch complex data over a mobile connection, or if the network is down, you can implement &lt;code&gt;shouldBackgroundReloadAll&lt;/code&gt; as follows:</source>
          <target state="translated">例如，如果您不想通过移动连接获取复杂的数据，或者如果网络断开，则可以按以下方式实现 &lt;code&gt;shouldBackgroundReloadAll&lt;/code&gt; ：</target>
        </trans-unit>
        <trans-unit id="39bd2ee7480f96c51f502ace691e2eb98e3e8a2b" translate="yes" xml:space="preserve">
          <source>For example, if you do not want to fetch complex data over a mobile connection, or if the network is down, you can implement &lt;code&gt;shouldBackgroundReloadRecord&lt;/code&gt; as follows:</source>
          <target state="translated">例如，如果您不想通过移动连接获取复杂的数据，或者网络断开，则可以按以下方式实现 &lt;code&gt;shouldBackgroundReloadRecord&lt;/code&gt; ：</target>
        </trans-unit>
        <trans-unit id="6bfedef11963fbdb23bc65ee36f13d3932d60a5f" translate="yes" xml:space="preserve">
          <source>For example, if you have a &lt;code&gt;Person&lt;/code&gt; model:</source>
          <target state="translated">例如，如果您有一个 &lt;code&gt;Person&lt;/code&gt; 模型：</target>
        </trans-unit>
        <trans-unit id="988cd2fd7fda873455ec0acfe67fcb1934ef76e9" translate="yes" xml:space="preserve">
          <source>For example, if you have a component that renders based on a json configuration, but you want to provide your component with the option of taking the config as a string, you can leverage &lt;code&gt;didReceiveAttrs&lt;/code&gt; to ensure the incoming config is always parsed.</source>
          <target state="translated">例如，如果您有一个基于json配置呈现的组件，但是您想为组件提供将配置作为字符串的选项，则可以利用 &lt;code&gt;didReceiveAttrs&lt;/code&gt; 来确保始终解析传入的配置。</target>
        </trans-unit>
        <trans-unit id="7564e650f576cd9c9fb50018560eedf67b6e7d6c" translate="yes" xml:space="preserve">
          <source>For example, if you have a normal link tag and want the link to bring the user to another page in addition to triggering an ember action when clicked, you can use &lt;code&gt;preventDefault=false&lt;/code&gt;:</source>
          <target state="translated">例如，如果您具有普通的链接标签，并且希望该链接将用户带到另一个页面，并且在单击时触发了余烬操作，则可以使用 &lt;code&gt;preventDefault=false&lt;/code&gt; ：</target>
        </trans-unit>
        <trans-unit id="5aaf0a55116c35dc679cd8fc2fbce94f8dcb4be1" translate="yes" xml:space="preserve">
          <source>For example, if you have a payload that looks like this:</source>
          <target state="translated">例如,如果你的有效载荷看起来像这样。</target>
        </trans-unit>
        <trans-unit id="f713f98461e6f44452ba7b5d52ecd69bbfcbc2e5" translate="yes" xml:space="preserve">
          <source>For example, if you have an &lt;code&gt;each&lt;/code&gt; helper looping over a number of items, you may need to pass a function that expects to receive the item as an argument to a component invoked within the loop. Here's how you could use the &lt;code&gt;fn&lt;/code&gt; helper to pass both the function and its arguments together:</source>
          <target state="translated">例如，如果您有 &lt;code&gt;each&lt;/code&gt; 帮助程序遍历许多项目，则可能需要传递一个函数，该函数希望将该项作为参数传递给在循环内调用的组件。这是使用 &lt;code&gt;fn&lt;/code&gt; 帮助程序将函数及其参数一起传递的方法：</target>
        </trans-unit>
        <trans-unit id="ba83a1f29a77cf84620d7760413868b22fa7a566" translate="yes" xml:space="preserve">
          <source>For example, if you have an initial payload of:</source>
          <target state="translated">例如,如果你的初始有效载荷为:。</target>
        </trans-unit>
        <trans-unit id="9db22e238497aaeddaf3930e27b5f085241835c9" translate="yes" xml:space="preserve">
          <source>For example, if you have an object &lt;code&gt;LineItem&lt;/code&gt; with an endpoint of &lt;code&gt;/line_items/&lt;/code&gt;.</source>
          <target state="translated">例如，如果您的对象 &lt;code&gt;LineItem&lt;/code&gt; 的端点为 &lt;code&gt;/line_items/&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="2102ec1248c55a678ec81f71bc96b959d0eee89f" translate="yes" xml:space="preserve">
          <source>For example, if you pass a falsey &lt;code&gt;useLongGreeting&lt;/code&gt; to the &lt;code&gt;Greeting&lt;/code&gt; component:</source>
          <target state="translated">例如，如果将虚假的 &lt;code&gt;useLongGreeting&lt;/code&gt; 传递给 &lt;code&gt;Greeting&lt;/code&gt; 组件：</target>
        </trans-unit>
        <trans-unit id="cf3a65ca552bf54b8278f49bae0d188a6e161fbf" translate="yes" xml:space="preserve">
          <source>For example, if you want to set the &lt;code&gt;author&lt;/code&gt; property of a blogPost, this would &lt;strong&gt;not&lt;/strong&gt; work if the &lt;code&gt;user&lt;/code&gt; with id isn't already loaded into the store:</source>
          <target state="translated">例如，如果您要设置blogPost 的 &lt;code&gt;author&lt;/code&gt; 属性，那么如果&lt;strong&gt;尚未&lt;/strong&gt;将具有ID 的 &lt;code&gt;user&lt;/code&gt; 加载到商店中，则此方法将不起作用：</target>
        </trans-unit>
        <trans-unit id="d907fcf82bce83f2c3b1516afcac4beef1e7aaa9" translate="yes" xml:space="preserve">
          <source>For example, if you wanted to serve your blogging application from &lt;code&gt;http://emberjs.com/blog/&lt;/code&gt;, it would be necessary to specify a root URL of &lt;code&gt;/blog/&lt;/code&gt;.</source>
          <target state="translated">例如，如果要从 &lt;code&gt;http://emberjs.com/blog/&lt;/code&gt; 提供博客应用程序，则必须将根URL指定为 &lt;code&gt;/blog/&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="4f647f466ea1578196e5c43dcf0b647792ac4661" translate="yes" xml:space="preserve">
          <source>For example, if you were writing a contact management app, you might have a &lt;code&gt;Person&lt;/code&gt; model. An individual record in your app might have a type of &lt;code&gt;person&lt;/code&gt; and an ID of &lt;code&gt;1&lt;/code&gt; or &lt;code&gt;steve-buscemi&lt;/code&gt;.</source>
          <target state="translated">例如，如果您正在编写联系人管理应用程序，则可能有一个 &lt;code&gt;Person&lt;/code&gt; 模型。您的应用中的个人记录可能具有一种 &lt;code&gt;person&lt;/code&gt; ，并且ID为 &lt;code&gt;1&lt;/code&gt; 或 &lt;code&gt;steve-buscemi&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="727ffb5688e015ef5607fd0c6cd0fa77d38b934c" translate="yes" xml:space="preserve">
          <source>For example, if you write a simple router like this:</source>
          <target state="translated">例如,如果你写了这样一个简单的路由器。</target>
        </trans-unit>
        <trans-unit id="ccc901c9b0f17db5a38b432a9a754c43f8c10426" translate="yes" xml:space="preserve">
          <source>For example, if you'd like to run a function on your component when a &lt;code&gt;&amp;lt;button&amp;gt;&lt;/code&gt; in the components template is clicked you might do something like:</source>
          <target state="translated">例如，如果要在单击组件模板中的 &lt;code&gt;&amp;lt;button&amp;gt;&lt;/code&gt; 时在组件上运行功能，则可以执行以下操作：</target>
        </trans-unit>
        <trans-unit id="9beeb4da020945d358679fe3a2bc38db74dfa79f" translate="yes" xml:space="preserve">
          <source>For example, if your &lt;code&gt;post&lt;/code&gt; model contained an embedded &lt;code&gt;author&lt;/code&gt; record that looks similar to this:</source>
          <target state="translated">例如，如果您的 &lt;code&gt;post&lt;/code&gt; 模型包含与以下内容类似的嵌入式 &lt;code&gt;author&lt;/code&gt; 记录：</target>
        </trans-unit>
        <trans-unit id="c1cbf700efefeb0c2b2f0de5c98b0430075776cd" translate="yes" xml:space="preserve">
          <source>For example, if your API has nested URLs that depend on the parent, you will want to group records by their parent.</source>
          <target state="translated">例如,如果你的 API 有依赖于父级的嵌套 URL,你会希望按父级的记录进行分组。</target>
        </trans-unit>
        <trans-unit id="7ec38d4aaf0f702bea728bd8bab975d5784bde22" translate="yes" xml:space="preserve">
          <source>For example, if your Ember route looks like &lt;code&gt;/posts/1/comments/2&lt;/code&gt; and your API route for the comment also looks like &lt;code&gt;/posts/1/comments/2&lt;/code&gt; if you want to fetch the comment without fetching the post you can pass in the post to the &lt;code&gt;findRecord&lt;/code&gt; call:</source>
          <target state="translated">例如，如果您的Ember路由看起来像 &lt;code&gt;/posts/1/comments/2&lt;/code&gt; ,并且注释的API路由也看起来像 &lt;code&gt;/posts/1/comments/2&lt;/code&gt; ,如果您想在不获取帖子的情况下获取评论，则可以传递 &lt;code&gt;findRecord&lt;/code&gt; 调用的帖子：</target>
        </trans-unit>
        <trans-unit id="c1db57f0b51b68d69e8e59a940d8b1acdffb8a82" translate="yes" xml:space="preserve">
          <source>For example, if your api has nested URLs that depend on the parent, you will want to group records by their parent.</source>
          <target state="translated">例如,如果你的api有依赖于父级的嵌套URL,你会希望按父级的记录进行分组。</target>
        </trans-unit>
        <trans-unit id="4cae9b667115af19b0f70d218bb91758fd6b9875" translate="yes" xml:space="preserve">
          <source>For example, if your application asks for a &lt;code&gt;Person&lt;/code&gt; with an ID of &lt;code&gt;1&lt;/code&gt;, how should Ember load it? Over HTTP or a WebSocket? If it's HTTP, is the URL &lt;code&gt;/person/1&lt;/code&gt; or &lt;code&gt;/resources/people/1&lt;/code&gt;?</source>
          <target state="translated">例如，如果你的应用程序要求 &lt;code&gt;Person&lt;/code&gt; 与一个ID为 &lt;code&gt;1&lt;/code&gt; ，应该如何灰烬加载它？通过HTTP还是WebSocket？如果是HTTP，URL是 &lt;code&gt;/person/1&lt;/code&gt; 还是 &lt;code&gt;/resources/people/1&lt;/code&gt; ？</target>
        </trans-unit>
        <trans-unit id="7737d9d26b3489cfdc5a25ba60ecfce6f8146aa6" translate="yes" xml:space="preserve">
          <source>For example, if your original payload looks like this:</source>
          <target state="translated">例如,如果你的原始有效载荷看起来像这样。</target>
        </trans-unit>
        <trans-unit id="503e020476eef35b5c99a0e714f631dc45a7617b" translate="yes" xml:space="preserve">
          <source>For example, if your server API provides an endpoint for the currently logged in user:</source>
          <target state="translated">例如,如果你的服务器API为当前登录的用户提供了一个端点。</target>
        </trans-unit>
        <trans-unit id="9e4656876265d68a19262a9887c691638554c435" translate="yes" xml:space="preserve">
          <source>For example, imagine that we have a chat app and use our &lt;code&gt;make-bold&lt;/code&gt; helper to welcome the new users into the channel:</source>
          <target state="translated">例如，假设我们有一个聊天应用程序，并使用 &lt;code&gt;make-bold&lt;/code&gt; 帮助器来欢迎新用户加入该频道：</target>
        </trans-unit>
        <trans-unit id="60c06ee63cd2aaa2e2e6d8c1ded9b35d5d2dc8c0" translate="yes" xml:space="preserve">
          <source>For example, imagine we are building a &lt;code&gt;blog-post&lt;/code&gt; component that we can use in our application to display a blog post:</source>
          <target state="translated">例如，假设我们正在构建一个 &lt;code&gt;blog-post&lt;/code&gt; 组件，我们可以在应用程序中使用它来显示博客文章：</target>
        </trans-unit>
        <trans-unit id="353d75503fc7da2af98494e6492240246c7e65a2" translate="yes" xml:space="preserve">
          <source>For example, imagine we have a template like this:</source>
          <target state="translated">例如,想象我们有一个这样的模板。</target>
        </trans-unit>
        <trans-unit id="095f52e43267d1ba872a387928ba3aa3aabe5e68" translate="yes" xml:space="preserve">
          <source>For example, imagine we have an &lt;code&gt;Invoice&lt;/code&gt; model that contains a &lt;code&gt;totalDue&lt;/code&gt; attribute, which represents the total amount due for that invoice. Because we do not want our company to go out of business due to strange JavaScript rounding errors, &lt;a href=&quot;http://stackoverflow.com/a/3730040&quot;&gt;we store this value in cents instead of a floating point dollar value&lt;/a&gt;.</source>
          <target state="translated">例如，假设我们有一个 &lt;code&gt;Invoice&lt;/code&gt; 模型，其中包含 &lt;code&gt;totalDue&lt;/code&gt; 属性，该属性表示该发票的应付款总额。因为我们不希望由于奇怪的JavaScript舍入错误而导致公司倒闭，所以&lt;a href=&quot;http://stackoverflow.com/a/3730040&quot;&gt;我们以美分（而不是浮点美元值）存储此值&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="8571a832dfdafb3d90b012da01ec2eb030713161" translate="yes" xml:space="preserve">
          <source>For example, imagine we want to preload some data into the store when the application boots for the first time.</source>
          <target state="translated">例如,想象一下,当应用程序第一次启动时,我们想将一些数据预加载到存储中。</target>
        </trans-unit>
        <trans-unit id="c575bb413560b9c910aafe13e4ed30cf41d3bcbd" translate="yes" xml:space="preserve">
          <source>For example, imagine you have a &lt;code&gt;blog-post&lt;/code&gt; component that is used to display a blog post:</source>
          <target state="translated">例如，假设您有一个 &lt;code&gt;blog-post&lt;/code&gt; 组件，用于显示博客文章：</target>
        </trans-unit>
        <trans-unit id="e5c3d6d6f6cd20fac18eb943b85e6bbabb8772c7" translate="yes" xml:space="preserve">
          <source>For example, imagine you have a comment form component that invokes a &lt;code&gt;submitComment&lt;/code&gt; action when the form is submitted, passing along the form's data:</source>
          <target state="translated">例如，假设您有一个注释表单组件，该组件在提交表单时会调用一条 &lt;code&gt;submitComment&lt;/code&gt; 操作，并传递表单数据：</target>
        </trans-unit>
        <trans-unit id="2b5fb5cb301dfd09a76e6b3ab24b6fdca6fc5ad9" translate="yes" xml:space="preserve">
          <source>For example, imagine your controller has a property that contains a URL to an image:</source>
          <target state="translated">例如,想象一下你的控制器有一个属性,其中包含一个图片的URL。</target>
        </trans-unit>
        <trans-unit id="c575c66aa4c4e9c00209d2fae3767498adbdd605" translate="yes" xml:space="preserve">
          <source>For example, in our example case above if you'd like to pass in the post that was being liked when the button is clicked you could do something like:</source>
          <target state="translated">例如,在我们上面的例子中,如果你想在点击按钮时传递被点赞的帖子,你可以这样做。</target>
        </trans-unit>
        <trans-unit id="bc289fd9ac809499aac8a2ac954840ac4dc5e73c" translate="yes" xml:space="preserve">
          <source>For example, in the attribute context:</source>
          <target state="translated">例如,在属性上下文中。</target>
        </trans-unit>
        <trans-unit id="00167da181a6b301648370b15c2cfcb4ce80368e" translate="yes" xml:space="preserve">
          <source>For example, let's say we want the &lt;code&gt;class&lt;/code&gt; on a &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; to be &lt;code&gt;superuser&lt;/code&gt; if the &lt;code&gt;@isAdmin&lt;/code&gt; variable is true, but &lt;code&gt;standard&lt;/code&gt; if the &lt;code&gt;@isAdmin&lt;/code&gt; variable is false.</source>
          <target state="translated">例如，假设如果 &lt;code&gt;@isAdmin&lt;/code&gt; 变量为true，则希望 &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; 上的 &lt;code&gt;class&lt;/code&gt; 为 &lt;code&gt;superuser&lt;/code&gt; ，但如果 &lt;code&gt;@isAdmin&lt;/code&gt; 变量为false ，则希望为 &lt;code&gt;standard&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="2944e2254a7a7dee002c8c0ec28c34c63dfec3de" translate="yes" xml:space="preserve">
          <source>For example, let's say we want to enhance our &lt;code&gt;Article&lt;/code&gt; component to include a &lt;code&gt;title&lt;/code&gt; attribute on the &lt;code&gt;&amp;lt;article&amp;gt;&lt;/code&gt; tag.</source>
          <target state="translated">例如，假设我们要增强我们的 &lt;code&gt;Article&lt;/code&gt; 组件，以在 &lt;code&gt;&amp;lt;article&amp;gt;&lt;/code&gt; 标记上包含 &lt;code&gt;title&lt;/code&gt; 属性。</target>
        </trans-unit>
        <trans-unit id="48ca58aa6ae96689aae6d2be68008572352241f1" translate="yes" xml:space="preserve">
          <source>For example, let's say we want to focus an &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; in a form as soon as the form is rendered. The web API for focusing an element is:</source>
          <target state="translated">例如，假设我们要在呈现表单后立即将 &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; 聚焦在表单中。用于聚焦元素的Web API是：</target>
        </trans-unit>
        <trans-unit id="b918b0fae6b1144420a9245b2ef0992ff616f66b" translate="yes" xml:space="preserve">
          <source>For example, let's say you want to create an &lt;code&gt;&amp;lt;audio&amp;gt;&lt;/code&gt; element, but pass it a blob as its &lt;a href=&quot;https://www.w3.org/TR/html52/semantics-embedded-content.html#dom-htmlmediaelement-srcobject&quot;&gt;&lt;code&gt;srcObject&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">例如，假设您要创建一个 &lt;code&gt;&amp;lt;audio&amp;gt;&lt;/code&gt; 元素，但是将其作为&lt;a href=&quot;https://www.w3.org/TR/html52/semantics-embedded-content.html#dom-htmlmediaelement-srcobject&quot;&gt; &lt;code&gt;srcObject&lt;/code&gt; &lt;/a&gt;传递给它。</target>
        </trans-unit>
        <trans-unit id="e3c47507dd4f2c091a9b598432a6dce2f5318193" translate="yes" xml:space="preserve">
          <source>For example, let's say you would like the ability to add a few numbers together, without needing to define a computed property everywhere you would like to do so.</source>
          <target state="translated">例如,假设你希望能够将几个数字加在一起,而不需要在你想加的地方定义一个计算属性。</target>
        </trans-unit>
        <trans-unit id="5404e506f85f30a0212f298d5150286a116a5c55" translate="yes" xml:space="preserve">
          <source>For example, perhaps you have some custom CSS animations trigger when the component is rendered and you want to handle some cleanup when it ends:</source>
          <target state="translated">例如,也许你有一些自定义的CSS动画在组件渲染时触发,你想在它结束时处理一些清理工作。</target>
        </trans-unit>
        <trans-unit id="ce1f02adead333eee688197f6f9df9989d3a960c" translate="yes" xml:space="preserve">
          <source>For example, say we want to move account deletion from the &lt;code&gt;UserProfile&lt;/code&gt; component to its parent &lt;code&gt;SystemPreferencesEditor&lt;/code&gt;.</source>
          <target state="translated">例如，假设我们要将帐户删除从 &lt;code&gt;UserProfile&lt;/code&gt; 组件移至其父系统 &lt;code&gt;SystemPreferencesEditor&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="055eb926cb59cd107962bfdf2f176909570b3021" translate="yes" xml:space="preserve">
          <source>For example, say we want to move account deletion from the &lt;code&gt;user-profile&lt;/code&gt; component to its parent &lt;code&gt;system-preferences-editor&lt;/code&gt;.</source>
          <target state="translated">例如，假设我们要将帐户删除从 &lt;code&gt;user-profile&lt;/code&gt; 组件移至其父 &lt;code&gt;system-preferences-editor&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="d3aa5fb3b9e2e47d7403cf706a058c910c7facad" translate="yes" xml:space="preserve">
          <source>For example, take this router:</source>
          <target state="translated">比如说这个路由器。</target>
        </trans-unit>
        <trans-unit id="1e0b93f74e0becd7dfdaf8fcb009fe5b8980d6e1" translate="yes" xml:space="preserve">
          <source>For example, the &lt;code&gt;aria-labelledby&lt;/code&gt; attribute may be useful if you have a search input. The search button can serve as the label for the input element:</source>
          <target state="translated">例如，如果您有搜索输入，那么 &lt;code&gt;aria-labelledby&lt;/code&gt; 属性可能会很有用。搜索按钮可以用作输入元素的标签：</target>
        </trans-unit>
        <trans-unit id="111f5abdbac75b149d5dadbc46189eb08bac975f" translate="yes" xml:space="preserve">
          <source>For example, the example in the previous section is getting a bit long. We can &lt;em&gt;extract&lt;/em&gt; the snippet for rendering the user's name and profile picture into its own component:</source>
          <target state="translated">例如，上一节中的示例有点长。我们可以&lt;em&gt;提取&lt;/em&gt;代码段以将用户的姓名和个人资料图片呈现到其自己的组件中：</target>
        </trans-unit>
        <trans-unit id="5dd2552612d116371909ab658c83d3703fce53b3" translate="yes" xml:space="preserve">
          <source>For example, the first time your application asks the store for a &lt;code&gt;person&lt;/code&gt; record with an ID of &lt;code&gt;1&lt;/code&gt;, it will fetch that information from your server.</source>
          <target state="translated">例如，您的应用程序第一次向商店询问ID为 &lt;code&gt;1&lt;/code&gt; 的 &lt;code&gt;person&lt;/code&gt; 记录时，它将从服务器中获取该信息。</target>
        </trans-unit>
        <trans-unit id="ec4787348e430964fae6265ba02c5cf7488e71cc" translate="yes" xml:space="preserve">
          <source>For example, the following template mounts the &lt;code&gt;ember-chat&lt;/code&gt; engine:</source>
          <target state="translated">例如，以下模板安装了 &lt;code&gt;ember-chat&lt;/code&gt; 引擎：</target>
        </trans-unit>
        <trans-unit id="c6d03a91e81318969094daca7d34b6bd64d9a2ee" translate="yes" xml:space="preserve">
          <source>For example, these two usages are equivalent:</source>
          <target state="translated">例如,这两种用法是等同的。</target>
        </trans-unit>
        <trans-unit id="b55d96c8de865779927bc570b7a3c5b4fae0dae0" translate="yes" xml:space="preserve">
          <source>For example, this &lt;code&gt;application.hbs&lt;/code&gt; template will render a first and last name:</source>
          <target state="translated">例如，此 &lt;code&gt;application.hbs&lt;/code&gt; 模板将呈现名字和姓氏：</target>
        </trans-unit>
        <trans-unit id="20aa59d0e915ae5dd07c0d9955c52ed849e682e9" translate="yes" xml:space="preserve">
          <source>For example, this allows you to render a miniture demo of your application into a specific area on your marketing website:</source>
          <target state="translated">例如,这允许您将您的应用程序的微型演示渲染到营销网站的特定区域。</target>
        </trans-unit>
        <trans-unit id="fce9ee69404eba5f232771b92aea425c5e7bda19" translate="yes" xml:space="preserve">
          <source>For example, this component dynamically looks up a service based on the &lt;code&gt;audioType&lt;/code&gt; passed as an argument:</source>
          <target state="translated">例如，此组件根据作为参数传递的 &lt;code&gt;audioType&lt;/code&gt; 动态查找服务：</target>
        </trans-unit>
        <trans-unit id="9d83bd82561c502ee0f4b3542e5c5cbaf9687e61" translate="yes" xml:space="preserve">
          <source>For example, this component dynamically looks up a service based on the &lt;code&gt;audioType&lt;/code&gt; passed as an attribute:</source>
          <target state="translated">例如，此组件根据作为属性传递的 &lt;code&gt;audioType&lt;/code&gt; 动态查找服务：</target>
        </trans-unit>
        <trans-unit id="605eb7e4a825bdf1d4cbe53bb187bb6b230bfa42" translate="yes" xml:space="preserve">
          <source>For example, this component plays songs with different audio services based on a song's &lt;code&gt;audioType&lt;/code&gt;.</source>
          <target state="translated">例如，此组件根据歌曲的 &lt;code&gt;audioType&lt;/code&gt; 播放具有不同音频服务的歌曲。</target>
        </trans-unit>
        <trans-unit id="8eaafb79932d377872257d19be825835e78a804c" translate="yes" xml:space="preserve">
          <source>For example, this component will rerender when the &lt;code&gt;currentUser&lt;/code&gt; on a session service changes:</source>
          <target state="translated">例如，当会话服务上的 &lt;code&gt;currentUser&lt;/code&gt; 更改时，此组件将重新呈现：</target>
        </trans-unit>
        <trans-unit id="90a7142ebded867aecac1c6cd5d3b74f09343bf1" translate="yes" xml:space="preserve">
          <source>For example, this template conditionally shows properties on &lt;code&gt;person&lt;/code&gt; only if that it is present:</source>
          <target state="translated">例如，该模板有条件地显示了性能的 &lt;code&gt;person&lt;/code&gt; 只有当其存在：</target>
        </trans-unit>
        <trans-unit id="f018cc53fcc23c3d307fcab82307e69edf7b58e9" translate="yes" xml:space="preserve">
          <source>For example, this template iterates an array named &lt;code&gt;people&lt;/code&gt; that contains objects. Each item in the array is provided as the block param &lt;code&gt;person&lt;/code&gt;.</source>
          <target state="translated">例如，此模板迭代一个名为 &lt;code&gt;people&lt;/code&gt; 的数组，其中包含对象。阵列中的每个项被设置为块PARAM &lt;code&gt;person&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="d105de0c23fe5232392e5213bdaf95b84dff874f" translate="yes" xml:space="preserve">
          <source>For example, to notify google analytics when the route changes, you could use this hook. (Note: requires also including GA scripts, etc.)</source>
          <target state="translated">例如,要在路线改变时通知google analytics,你可以使用这个钩子。(注意:还需要包括GA脚本等)</target>
        </trans-unit>
        <trans-unit id="e53fdd1e5fa921a7decdf09ca3b2c5d4bc78f174" translate="yes" xml:space="preserve">
          <source>For example, transitioning to the &lt;code&gt;photo&lt;/code&gt; route this way won't cause the &lt;code&gt;model&lt;/code&gt; hook to be executed (because &lt;code&gt;link-to&lt;/code&gt; was passed a model):</source>
          <target state="translated">例如，以这种方式过渡到 &lt;code&gt;photo&lt;/code&gt; 路线不会导致执行 &lt;code&gt;model&lt;/code&gt; 挂钩（因为 &lt;code&gt;link-to&lt;/code&gt; 传递给模型）：</target>
        </trans-unit>
        <trans-unit id="990c07eb16ce9b36a491b2e854ecc3b9aa105d86" translate="yes" xml:space="preserve">
          <source>For example, we could search for all &lt;code&gt;person&lt;/code&gt; models who have the name of &lt;code&gt;Peter&lt;/code&gt;:</source>
          <target state="translated">例如，我们可以搜索所有名称为 &lt;code&gt;Peter&lt;/code&gt; 的 &lt;code&gt;person&lt;/code&gt; 模型：</target>
        </trans-unit>
        <trans-unit id="d47f3090b8178aff0771982fc7f5d315290733fb" translate="yes" xml:space="preserve">
          <source>For example, when a Handlebars template uses the &lt;code&gt;{{action}}&lt;/code&gt; helper, it will attempt to send the action to the view's controller's &lt;code&gt;target&lt;/code&gt;.</source>
          <target state="translated">例如，当一个Handlebars模板使用 &lt;code&gt;{{action}}&lt;/code&gt; 助手时，它将尝试将动作发送到视图控制器的 &lt;code&gt;target&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="29528d3799c267facb13bd22a0d3c368a5aece31" translate="yes" xml:space="preserve">
          <source>For example, when you hit tab on a page or click on a form field, a blue border usually appears around the element. This kind of behavior is part of focus. Developers can use JavaScript to control the focus in their apps, enabling keyboard navigation and usability by screen readers. For example, if there is a button that launches a modal with interactive elements in it, that button's click handler needs to contain code that brings focus to the new content.</source>
          <target state="translated">例如,当你在页面上点击tab或点击表单字段时,元素周围通常会出现一个蓝色边框。这种行为是焦点的一部分。开发人员可以使用JavaScript来控制其应用程序中的焦点,实现键盘导航和屏幕阅读器的可用性。例如,如果有一个按钮启动了一个带有交互式元素的模态,那么该按钮的点击处理程序需要包含将焦点带到新内容的代码。</target>
        </trans-unit>
        <trans-unit id="5843613115c1e4d767226c816dddc69a6f938075" translate="yes" xml:space="preserve">
          <source>For example, you could implement the action &lt;code&gt;hello&lt;/code&gt; for the &lt;code&gt;person-profile&lt;/code&gt; component:</source>
          <target state="translated">例如，您可以为 &lt;code&gt;person-profile&lt;/code&gt; 组件执行操作 &lt;code&gt;hello&lt;/code&gt; ：</target>
        </trans-unit>
        <trans-unit id="d6888cfa6f75bf808b447c4e5833322abda82e8b" translate="yes" xml:space="preserve">
          <source>For example, your server may expect dasherized root objects:</source>
          <target state="translated">例如,你的服务器可能会期待dasherized的根对象。</target>
        </trans-unit>
        <trans-unit id="3b9e84a2093cc32805d40970c4d9572340f1ea90" translate="yes" xml:space="preserve">
          <source>For example, your server may expect underscored root objects.</source>
          <target state="translated">例如,您的服务器可能希望根对象下划线。</target>
        </trans-unit>
        <trans-unit id="8ee1c2eb6b481f0f8bab8a68aca74861776344fc" translate="yes" xml:space="preserve">
          <source>For example, your server may send a model name that does not correspond with the name of the model in your app. Let's take a look at an example model, and an example payload:</source>
          <target state="translated">例如,您的服务器可能会发送一个与您的应用程序中的模型名称不一致的模型名称。让我们来看看一个模型的例子,以及一个有效载荷的例子。</target>
        </trans-unit>
        <trans-unit id="059c3e8cce263b2945a18ac90b2637e10a8026b1" translate="yes" xml:space="preserve">
          <source>For example:</source>
          <target state="translated">例如:</target>
        </trans-unit>
        <trans-unit id="67bd6e289a5531e2d71f9f33d1cd06ac5dc9f6fd" translate="yes" xml:space="preserve">
          <source>For example: &lt;code&gt;{{#with foo.bar as |foo|}}&lt;/code&gt; is not supported because it attempts to alias using the first part of the property path, &lt;code&gt;foo&lt;/code&gt;. Instead, use &lt;code&gt;{{#with foo.bar as |baz|}}&lt;/code&gt;.</source>
          <target state="translated">例如：不支持 &lt;code&gt;{{#with foo.bar as |foo|}}&lt;/code&gt; 因为它尝试使用属性路径的第一部分 &lt;code&gt;foo&lt;/code&gt; 进行别名。而是使用 &lt;code&gt;{{#with foo.bar as |baz|}}&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="6363e2abeb661ad8952fc15c2dce40c1ff2e0f73" translate="yes" xml:space="preserve">
          <source>For existing Ember apps, a developer may edit the &lt;code&gt;index.html&lt;/code&gt; file or leverage &lt;a href=&quot;https://github.com/ember-intl/ember-intl&quot;&gt;ember-intl&lt;/a&gt;.</source>
          <target state="translated">对于现有的Ember应用程序，开发人员可以编辑 &lt;code&gt;index.html&lt;/code&gt; 文件或利用&lt;a href=&quot;https://github.com/ember-intl/ember-intl&quot;&gt;ember-intl&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="f25414b1e364353a76b7850db08875124cea32d1" translate="yes" xml:space="preserve">
          <source>For existing Ember users, Native Classes might seem a bit strange, but for developers coming from general JavaScript backgrounds or other frameworks, it might be hard for them to imagine Ember any other way.</source>
          <target state="translated">对于现有的Ember用户来说,Native Classes可能看起来有点奇怪,但对于一般JavaScript背景或其他框架出身的开发者来说,他们可能很难想象Ember会有其他的方式。</target>
        </trans-unit>
        <trans-unit id="7914a48d80fe564885d6449a553ff84fa77cd6ea" translate="yes" xml:space="preserve">
          <source>For instance, consider two components that display a user's avatar. One is for a recipient and the other for a sender.</source>
          <target state="translated">例如,考虑两个显示用户头像的组件。一个是给收件人的,另一个是给发件人的。</target>
        </trans-unit>
        <trans-unit id="ce4ee78bb710bdadd94e05dda2fc192d5b2eef86" translate="yes" xml:space="preserve">
          <source>For instance, if a deprecation was introduced in 3.13, and the app specifies 3.13 as its minimum version compatibility, any deprecations introduced before or during 3.13 would be stripped away.</source>
          <target state="translated">例如,如果在3.13中引入了一个recrecrecation,而应用程序指定3.13为其最低版本兼容性,那么在3.13之前或期间引入的任何recrecrecation都会被删除。</target>
        </trans-unit>
        <trans-unit id="f852011db8af7ac839f8c76005df7ed1913eb792" translate="yes" xml:space="preserve">
          <source>For instance, if you wanted to create a tooltip icon that had a standard icon and class, you could do it like so:</source>
          <target state="translated">例如,如果你想创建一个有标准图标和类的工具提示图标,你可以这样做。</target>
        </trans-unit>
        <trans-unit id="f9b33f19821b81c7ec5b3ee6f59d57b385ad8589" translate="yes" xml:space="preserve">
          <source>For instance, in a messaging app, we could have a &lt;code&gt;&amp;lt;Message&amp;gt;&lt;/code&gt; component that we repeat for each message that the users have sent to each other.</source>
          <target state="translated">例如，在消息传递应用程序中，我们可以有一个 &lt;code&gt;&amp;lt;Message&amp;gt;&lt;/code&gt; 组件，对于用户彼此发送的每条消息，我们都会对其进行重复。</target>
        </trans-unit>
        <trans-unit id="0dd243765cfdbc245638899e14678af2191ab6f3" translate="yes" xml:space="preserve">
          <source>For instance, let's take a look at a generic message component from a messaging app.</source>
          <target state="translated">例如,让我们来看看一个消息应用中的通用消息组件。</target>
        </trans-unit>
        <trans-unit id="9f9d9d958c9f4b8da946d338df12ff5f21c104ce" translate="yes" xml:space="preserve">
          <source>For instance, your API may expect resources to be keyed by underscored type in the payload:</source>
          <target state="translated">例如,您的 API 可能希望资源在有效载荷中按下划线类型进行键控。</target>
        </trans-unit>
        <trans-unit id="f3b267c64e45fa079a27a5349659d2f287f095d2" translate="yes" xml:space="preserve">
          <source>For many Octane features, there are codemods available as well, so be sure to read our &lt;a href=&quot;../../upgrading&quot;&gt;Upgrade Strategy Guide&lt;/a&gt; before making changes like these by hand.</source>
          <target state="translated">对于许多Octane功能，也提供了codemods，因此在手动进行此类更改之前，请务必先阅读我们的《&lt;a href=&quot;../../upgrading&quot;&gt;升级策略指南》&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="51bea2df7fefb31358bb16ba97f9fc2ba6227ac7" translate="yes" xml:space="preserve">
          <source>For many of the optional features, the thing they affect the most is what you see in your newly-created files, not within your existing code. Your app will keep working, even if you haven't refactored code to use Octane's features yet. Making new files in the Octane style is good place to start, but eventually you should refactor existing code so that your app follows one main programming model, not a mixture of Octane and Classic. Following a refactoring plan will help with onboarding new developers, and minimize flipping back and forth between different versions of the Ember Guides.</source>
          <target state="translated">对于许多可选的功能,它们影响最大的是你在新创建的文件中看到的东西,而不是在你现有的代码中。即使你还没有重构代码来使用Octane的功能,你的应用程序也会继续工作。以Octane风格制作新文件是一个很好的开始,但最终你应该重构现有的代码,使你的应用程序遵循一个主要的编程模型,而不是Octane和Classic的混合。遵循重构计划将有助于新开发人员的入职,并尽量减少在不同版本的Ember指南之间来回翻转。</target>
        </trans-unit>
        <trans-unit id="d6dd39d5bdf936f5049223bd83077f74e9d365d0" translate="yes" xml:space="preserve">
          <source>For more about adding computed properties to your classes, see &lt;a href=&quot;https://guides.emberjs.com/object-model/computed-properties&quot;&gt;Computed Properties&lt;/a&gt;.</source>
          <target state="translated">有关将计算属性添加到类的更多信息，请参见&lt;a href=&quot;https://guides.emberjs.com/object-model/computed-properties&quot;&gt;计算属性&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="fc4637ca2142dd49c0ab6c1eb1068c89db2a1a67" translate="yes" xml:space="preserve">
          <source>For more detailed documentation and examples please see &lt;a href=&quot;https://emberjs.com/guides/routing/defining-your-routes/&quot;&gt;the guides&lt;/a&gt;.</source>
          <target state="translated">有关更详细的文档和示例，请参阅&lt;a href=&quot;https://emberjs.com/guides/routing/defining-your-routes/&quot;&gt;指南&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="41ef6dfe1ee415562c8749cd0098a147ab52d435" translate="yes" xml:space="preserve">
          <source>For more guidance on what to do with deprecations, visit &lt;a href=&quot;../configuring-ember/handling-deprecations&quot;&gt;Handling Deprecations&lt;/a&gt;, check out the Ember Inspector &lt;a href=&quot;release/ember-inspector/deprecations&quot;&gt;tools for deprecations&lt;/a&gt;, or read about the specifics in the &lt;a href=&quot;https://deprecations.emberjs.com/&quot;&gt;Deprecations Guides&lt;/a&gt;.</source>
          <target state="translated">有关如何&lt;a href=&quot;../configuring-ember/handling-deprecations&quot;&gt;处理弃用的&lt;/a&gt;更多指导，请访问处理弃用，检查Ember Inspector&lt;a href=&quot;release/ember-inspector/deprecations&quot;&gt;工具以进行弃用&lt;/a&gt;，或阅读《&lt;a href=&quot;https://deprecations.emberjs.com/&quot;&gt;弃用指南》中的详细信息&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="5295af1ae2a533eb2fdc72de0ac7bd0335e79c99" translate="yes" xml:space="preserve">
          <source>For more guidance on what to do with deprecations, visit &lt;a href=&quot;https://guides.emberjs.com/configuring-ember/handling-deprecations/&quot;&gt;Handling Deprecations&lt;/a&gt;, check out the Ember Inspector &lt;a href=&quot;release/ember-inspector/deprecations&quot;&gt;tools for deprecations&lt;/a&gt;, or read about the specifics in the &lt;a href=&quot;https://deprecations.emberjs.com/&quot;&gt;Deprecations Guides&lt;/a&gt;.</source>
          <target state="translated">有关如何&lt;a href=&quot;https://guides.emberjs.com/configuring-ember/handling-deprecations/&quot;&gt;处理弃用的&lt;/a&gt;更多指导，请访问处理弃用，检查Ember Inspector&lt;a href=&quot;release/ember-inspector/deprecations&quot;&gt;工具以进行弃用&lt;/a&gt;，或阅读《&lt;a href=&quot;https://deprecations.emberjs.com/&quot;&gt;弃用指南》中的详细信息&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="29338faef17451bff40b98b69efc15788fd2eb88" translate="yes" xml:space="preserve">
          <source>For more hooks to customize the serializer with, see the &lt;a href=&quot;http://emberjs.com/api/data/classes/DS.JSONAPISerializer.html#index&quot;&gt;Ember Data serializer API documentation&lt;/a&gt;.</source>
          <target state="translated">有关使用自定义序列化程序的更多信息，请参阅&lt;a href=&quot;http://emberjs.com/api/data/classes/DS.JSONAPISerializer.html#index&quot;&gt;Ember Data序列化程序API文档&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="6ccc120a920e4763252a126c205c7d754a7bb32f" translate="yes" xml:space="preserve">
          <source>For more hooks to customize the serializer with, see the &lt;a href=&quot;https://api.emberjs.com/ember-data/release/classes/JSONAPISerializer&quot;&gt;Ember Data serializer API documentation&lt;/a&gt;.</source>
          <target state="translated">有关使用自定义序列化程序的更多信息，请参阅&lt;a href=&quot;https://api.emberjs.com/ember-data/release/classes/JSONAPISerializer&quot;&gt;Ember Data序列化程序API文档&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="bad2c357e0daf0ce5fdcc9aea0887fc6339d0934" translate="yes" xml:space="preserve">
          <source>For more information on how to use query parameters see the &lt;a href=&quot;https://guides.emberjs.com/routing/query-params/&quot;&gt;query parameters&lt;/a&gt; section in Routing.</source>
          <target state="translated">有关如何使用查询参数的更多信息，请参见&amp;ldquo;路由&amp;rdquo;中的&amp;ldquo;&lt;a href=&quot;https://guides.emberjs.com/routing/query-params/&quot;&gt;查询参数&amp;rdquo;&lt;/a&gt;部分。</target>
        </trans-unit>
        <trans-unit id="c7437275ef3927077a50728b595e06c2301a6c51" translate="yes" xml:space="preserve">
          <source>For more information see the &lt;a href=&quot;https://api.emberjs.com/ember/release/classes/PromiseProxyMixin&quot;&gt;Ember.PromiseProxyMixin documentation&lt;/a&gt;.</source>
          <target state="translated">有关更多信息，请参见&lt;a href=&quot;https://api.emberjs.com/ember/release/classes/PromiseProxyMixin&quot;&gt;Ember.PromiseProxyMixin文档&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="f4befdb1069467e996d91aa6926e1f7b68c66d78" translate="yes" xml:space="preserve">
          <source>For more information see the &lt;a href=&quot;https://api.emberjs.com/ember/release/classes/PromiseProxyMixin.html&quot;&gt;Ember.PromiseProxyMixin documentation&lt;/a&gt;.</source>
          <target state="translated">有关更多信息，请参见&lt;a href=&quot;https://api.emberjs.com/ember/release/classes/PromiseProxyMixin.html&quot;&gt;Ember.PromiseProxyMixin文档&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="7282de866e5f853cd3e8ffbabd363e03c2f925f8" translate="yes" xml:space="preserve">
          <source>For more information see the &lt;a href=&quot;https://emberjs.com/api/classes/Ember.PromiseProxyMixin.html&quot;&gt;Ember.PromiseProxyMixin documentation&lt;/a&gt;.</source>
          <target state="translated">有关更多信息，请参见&lt;a href=&quot;https://emberjs.com/api/classes/Ember.PromiseProxyMixin.html&quot;&gt;Ember.PromiseProxyMixin文档&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="d5233e193dd0aa315bd18119eb9b8df8b9ea4ceb" translate="yes" xml:space="preserve">
          <source>For more information, see &lt;a href=&quot;https://github.com/emberjs/rfcs/blob/master/text/0278-template-only-components.md&quot;&gt;RFC #278&lt;/a&gt;.</source>
          <target state="translated">有关更多信息，请参见&lt;a href=&quot;https://github.com/emberjs/rfcs/blob/master/text/0278-template-only-components.md&quot;&gt;RFC＃278&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="9422e0347fb394b0e3012b6a1b23512245e80635" translate="yes" xml:space="preserve">
          <source>For more information, see &lt;a href=&quot;https://github.com/emberjs/rfcs/blob/master/text/0280-remove-application-wrapper.md&quot;&gt;RFC #280&lt;/a&gt;.</source>
          <target state="translated">有关更多信息，请参见&lt;a href=&quot;https://github.com/emberjs/rfcs/blob/master/text/0280-remove-application-wrapper.md&quot;&gt;RFC＃280&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="ee1dc312e7b0bcbf5370d1ad29be635c9b558b3d" translate="yes" xml:space="preserve">
          <source>For most addons and most features simple version detection should be enough. Using the provided version compatibility helpers from &lt;a href=&quot;https://github.com/pzuraq/ember-compatibility-helpers&quot;&gt;ember-compatibility-helpers&lt;/a&gt; the following can be done:</source>
          <target state="translated">对于大多数插件和大多数功能而言，简单的版本检测就足够了。使用&lt;a href=&quot;https://github.com/pzuraq/ember-compatibility-helpers&quot;&gt;ember-compatibility-helpers&lt;/a&gt;提供的版本兼容性帮助器，可以完成以下操作：</target>
        </trans-unit>
        <trans-unit id="40732fcb4234a5619ce081b7798a0214549a58ea" translate="yes" xml:space="preserve">
          <source>For nested routes, like:</source>
          <target state="translated">对于嵌套路线,如。</target>
        </trans-unit>
        <trans-unit id="9eeb17fc50ad17784945236a03c3efdf26f73b49" translate="yes" xml:space="preserve">
          <source>For one-off events specific to particular instance of a component, it is possible to pass actions to the component's element using angle bracket invocation syntax.</source>
          <target state="translated">对于组件特定实例的一次性事件,可以使用角括号调用语法将动作传递给组件的元素。</target>
        </trans-unit>
        <trans-unit id="b44bf8db76b49951c7eaac5a3fc9525e1133bec4" translate="yes" xml:space="preserve">
          <source>For our second test, we'll check that typing text in the filter will actually appropriately call the filter action and update the listings shown.</source>
          <target state="translated">对于我们的第二个测试,我们将检查在过滤器中键入文本是否会真正适当地调用过滤器操作并更新显示的列表。</target>
        </trans-unit>
        <trans-unit id="52f2c08737c2821eeea5248eeeedc5d7eacaa951" translate="yes" xml:space="preserve">
          <source>For our service unit test, we'll want to verify that locations that have been previously loaded are fetched from cache, while new locations are created using the utility. We will isolate our tests from actually calling Google Maps by stubbing our map utility. On line 6 of &lt;code&gt;maps-test.js&lt;/code&gt; below we create an Ember object to simulate the behavior of the utility, but instead of creating a google map, we return an empty JavaScript object.</source>
          <target state="translated">对于我们的服务单元测试，我们将要验证从缓存中获取先前已加载的位置，同时使用该实用程序创建新位置。我们将通过对地图实用程序进行存根测试来将测试与实际调用Google Maps隔离开来。在下面的 &lt;code&gt;maps-test.js&lt;/code&gt; 的第6行中，我们创建了一个Ember对象来模拟实用程序的行为，但是我们没有创建Google Map，而是返回了一个空的JavaScript对象。</target>
        </trans-unit>
        <trans-unit id="bcf714fdce67954b18fdd874853ff99248025a2a" translate="yes" xml:space="preserve">
          <source>For primitive values (which are immutable in JavaScript), the passed object is simply returned.</source>
          <target state="translated">对于基元值(在JavaScript中是不可变的),传递的对象会被简单地返回。</target>
        </trans-unit>
        <trans-unit id="238bd7c4be84902608f021126f24b30d5f4547e2" translate="yes" xml:space="preserve">
          <source>For relationships you probably only want to test that the relationship declarations are setup properly.</source>
          <target state="translated">对于关系,你可能只想测试关系声明是否设置正确。</target>
        </trans-unit>
        <trans-unit id="5d84fd958637aa021fe65126c1c34b36d7f4d0f2" translate="yes" xml:space="preserve">
          <source>For requests that are only expected to return 0 or more records (e.g. &lt;code&gt;store.findAll('post')&lt;/code&gt; or &lt;code&gt;store.query('post', { filter: { status: 'draft' } })&lt;/code&gt;) the &lt;code&gt;JSONSerializer&lt;/code&gt; expects the response to be a JSON array that looks similar to this:</source>
          <target state="translated">对于仅预期返回0或更多记录的请求（例如 &lt;code&gt;store.findAll('post')&lt;/code&gt; 或 &lt;code&gt;store.query('post', { filter: { status: 'draft' } })&lt;/code&gt; ）， &lt;code&gt;JSONSerializer&lt;/code&gt; 期望响应是一个类似于以下内容的JSON数组：</target>
        </trans-unit>
        <trans-unit id="e41c7713b198e325a57d5d23ef3c948b33c7b8c9" translate="yes" xml:space="preserve">
          <source>For requests that are only expected to return 1 record (e.g. &lt;code&gt;store.findRecord('post', 1)&lt;/code&gt;) the &lt;code&gt;JSONSerializer&lt;/code&gt; expects the response to be a JSON object that looks similar to this:</source>
          <target state="translated">对于仅预期返回1条记录的请求（例如 &lt;code&gt;store.findRecord('post', 1)&lt;/code&gt; ）， &lt;code&gt;JSONSerializer&lt;/code&gt; 期望响应为类似于以下内容的JSON对象：</target>
        </trans-unit>
        <trans-unit id="6f44c4c78e3ccae3e3feba77d0d41b2ad2d7ffb4" translate="yes" xml:space="preserve">
          <source>For symmetry, a record can be deleted via the store.</source>
          <target state="translated">为了对称性,可以通过存储删除记录。</target>
        </trans-unit>
        <trans-unit id="1dbdae64a2126571b205dad151b3be5b622ef748" translate="yes" xml:space="preserve">
          <source>For symmetry, a record can be unloaded via the store. This will cause the record to be destroyed and freed up for garbage collection.</source>
          <target state="translated">为了对称性,可以通过store卸载记录。这将导致记录被销毁,并释放出来用于垃圾收集。</target>
        </trans-unit>
        <trans-unit id="e8698c13171823902968377bdef2ca89e548f138" translate="yes" xml:space="preserve">
          <source>For the &lt;code&gt;post&lt;/code&gt; route, a controller named &lt;code&gt;App.PostController&lt;/code&gt; would be used if it is defined. If it is not defined, a basic &lt;code&gt;Ember.Controller&lt;/code&gt; instance would be used.</source>
          <target state="translated">对于 &lt;code&gt;post&lt;/code&gt; 路由，如果定义了一个名为 &lt;code&gt;App.PostController&lt;/code&gt; 的控制器。如果未定义，则将使用基本的 &lt;code&gt;Ember.Controller&lt;/code&gt; 实例。</target>
        </trans-unit>
        <trans-unit id="ab03ec3bece1d637423015b51ead16b564c68acd" translate="yes" xml:space="preserve">
          <source>For the following code:</source>
          <target state="translated">以下代码:</target>
        </trans-unit>
        <trans-unit id="44305dcf5fd8a54360ff01562d1bda7600fe0365" translate="yes" xml:space="preserve">
          <source>For the following example, the template receives a &lt;code&gt;post&lt;/code&gt; object with &lt;code&gt;content&lt;/code&gt; and &lt;code&gt;title&lt;/code&gt; properties.</source>
          <target state="translated">对于以下示例，模板接收具有 &lt;code&gt;content&lt;/code&gt; 和 &lt;code&gt;title&lt;/code&gt; 属性的 &lt;code&gt;post&lt;/code&gt; 对象。</target>
        </trans-unit>
        <trans-unit id="0f6b8ed8bb2be7c4e922216782b09df7dfef84fd" translate="yes" xml:space="preserve">
          <source>For the following template:</source>
          <target state="translated">对于以下模板:</target>
        </trans-unit>
        <trans-unit id="af7930cb4a7d69cd8db14ee6e8b5a7f77cf970bb" translate="yes" xml:space="preserve">
          <source>For the most part, you should be able to build Ember applications without directly manipulating the DOM. Before considering directly accessing the DOM, it's always best to first consider whether there's an Ember-native way to accomplish your goal.</source>
          <target state="translated">在大多数情况下,你应该能够在不直接操作DOM的情况下构建Ember应用。在考虑直接访问DOM之前,最好先考虑是否有一种Ember-native的方式来实现你的目标。</target>
        </trans-unit>
        <trans-unit id="53b1317ee0dff26c47faa19e99ec8ae432650704" translate="yes" xml:space="preserve">
          <source>For the remainder of this page, we'll give you an introduction to testing in Ember and get you set up to add tests as we implement pieces of our app. On subsequent tutorial pages, the final sections of each page will be devoted to adding a test for the feature you just implemented. These sections aren't required for a working application and you may move on with the tutorial without writing them.</source>
          <target state="translated">在本页面的剩余部分,我们将给你介绍Ember中的测试,并让你在实现我们的应用程序时设置好添加测试。在后续的教程页面中,每个页面的最后部分将专门为你刚刚实现的功能添加测试。这些部分并不是一个工作应用程序所需要的,你可以不写这些内容而继续学习教程。</target>
        </trans-unit>
        <trans-unit id="90d86d60539134a54d0f678225fc9d2a578113d6" translate="yes" xml:space="preserve">
          <source>For the test we'll pass the component a fake object that has all the properties that our rental model has. We'll give the variable the name &lt;code&gt;rental&lt;/code&gt;, and in each test we'll set &lt;code&gt;rental&lt;/code&gt; to our local scope, represented by the &lt;code&gt;this&lt;/code&gt; object. The render template can access values in local scope.</source>
          <target state="translated">对于测试，我们将为组件传递一个假对象，该对象具有租赁模型具有的所有属性。我们给变量命名为 &lt;code&gt;rental&lt;/code&gt; ，在每个测试中，我们将 &lt;code&gt;rental&lt;/code&gt; 设置为由 &lt;code&gt;this&lt;/code&gt; 对象表示的本地范围。渲染模板可以访问本地范围内的值。</target>
        </trans-unit>
        <trans-unit id="11208c35bf587ec4a12ccbc8ab430fb048e0e38b" translate="yes" xml:space="preserve">
          <source>For the truly ambitious developer, setting &lt;code&gt;ENV.EmberENV.ENABLE_ALL_FEATURES&lt;/code&gt; to &lt;code&gt;true&lt;/code&gt; will enable all experimental features.</source>
          <target state="translated">对于真正有抱负的开发人员，将 &lt;code&gt;ENV.EmberENV.ENABLE_ALL_FEATURES&lt;/code&gt; 设置为 &lt;code&gt;true&lt;/code&gt; 将启用所有实验功能。</target>
        </trans-unit>
        <trans-unit id="7d414cc56d356af2b222b476ee0fb256f69c5e10" translate="yes" xml:space="preserve">
          <source>For this action to work, we need to replace our Mirage &lt;code&gt;config.js&lt;/code&gt; file with the following, so that it can respond to our queries. Instead of simply returning the list of rentals, our Mirage HTTP GET handler for &lt;code&gt;rentals&lt;/code&gt; will return rentals matching the string provided in the URL query parameter called &lt;code&gt;city&lt;/code&gt;.</source>
          <target state="translated">为了执行此操作，我们需要将以下内容替换为Mirage &lt;code&gt;config.js&lt;/code&gt; 文件，以便它可以响应我们的查询。我们的Mirage HTTP GET &lt;code&gt;rentals&lt;/code&gt; 处理程序将返回与URL查询参数（称为 &lt;code&gt;city&lt;/code&gt; )中提供的字符串匹配的出租，而不是简单地返回出租列表，而是返回出租的Mirage HTTP GET处理程序。</target>
        </trans-unit>
        <trans-unit id="805d2264ad28af999150c7ca8f54eca24ffa5d31" translate="yes" xml:space="preserve">
          <source>For this model:</source>
          <target state="translated">对于这种模式。</target>
        </trans-unit>
        <trans-unit id="a24a3fba4a828376a45b40eb1ccd192e56b6e2a5" translate="yes" xml:space="preserve">
          <source>ForbiddenError</source>
          <target state="translated">ForbiddenError</target>
        </trans-unit>
        <trans-unit id="e121592f2766d340c24b47ea2f5774c152f53cca" translate="yes" xml:space="preserve">
          <source>Form events:</source>
          <target state="translated">形成事件。</target>
        </trans-unit>
        <trans-unit id="7cdc3deed2a7f6cc9c38d5a1cab4a58fed801b5f" translate="yes" xml:space="preserve">
          <source>Formats the passed string, but first looks up the string in the localized strings hash. This is a convenient way to localize text. See &lt;code&gt;Ember.String.fmt()&lt;/code&gt; for more information on formatting.</source>
          <target state="translated">格式化传递的字符串，但首先在本地化的字符串哈希中查找该字符串。这是本地化文本的便捷方法。有关格式的更多信息，请参见 &lt;code&gt;Ember.String.fmt()&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="29aee65fd752807a4efafa236faf97668e75caee" translate="yes" xml:space="preserve">
          <source>Formatting Component Attributes with &lt;code&gt;didReceiveAttrs&lt;/code&gt;</source>
          <target state="translated">使用 &lt;code&gt;didReceiveAttrs&lt;/code&gt; 格式化组件属性</target>
        </trans-unit>
        <trans-unit id="d747cf39d36a21f5bf79d91fa7a95f35c01a1a50" translate="yes" xml:space="preserve">
          <source>Fortunately, Ember provides a way for projects to deal with deprecations in an organized and efficient manner.</source>
          <target state="translated">幸运的是,Ember为项目提供了一种有组织的、高效的处理弃用问题的方法。</target>
        </trans-unit>
        <trans-unit id="5cf883f899d7818321b020e5391d2ce7ac485c77" translate="yes" xml:space="preserve">
          <source>Forwards to the internal &lt;code&gt;promise&lt;/code&gt; property which you can use in situations where you want to pass around a thennable, but not the Transition itself.</source>
          <target state="translated">转发到内部 &lt;code&gt;promise&lt;/code&gt; 属性，您可以在想要传递小对象的情况下使用该属性，而不是Transition本身。</target>
        </trans-unit>
        <trans-unit id="445366cfc965ea1eefc0253eafebbc45d43ad9bd" translate="yes" xml:space="preserve">
          <source>Found item or `undefined`.</source>
          <target state="translated">找到项目或 &quot;未定义&quot;。</target>
        </trans-unit>
        <trans-unit id="892149376900bccc1f23c1b76c83f5909b4baafa" translate="yes" xml:space="preserve">
          <source>Found item or undefined</source>
          <target state="translated">找到项目或未定义</target>
        </trans-unit>
        <trans-unit id="1845de0d37b6bb99f3f645167ac00024bf5cd983" translate="yes" xml:space="preserve">
          <source>Framework objects in an Ember application (components, services, routes, etc.) are created via a factory and dependency injection system. Each of these objects is the responsibility of an &quot;owner&quot;, which handled its instantiation and manages its lifetime.</source>
          <target state="translated">Ember应用中的框架对象(组件、服务、路由等)是通过工厂和依赖注入系统创建的。每一个对象都由一个 &quot;所有者 &quot;负责,处理它的实例化并管理它的寿命。</target>
        </trans-unit>
        <trans-unit id="28e49ef141f281830f6ce959ad0f2b4d73e1cade" translate="yes" xml:space="preserve">
          <source>Frameworks (or apps built on those frameworks) don't need to write lots of custom code to add support for a new database; as long as that database supports SQL, adding support for it is relatively easy.</source>
          <target state="translated">框架(或建立在这些框架上的应用)不需要写大量的自定义代码来添加对新数据库的支持,只要这个数据库支持SQL,添加对它的支持就相对容易。</target>
        </trans-unit>
        <trans-unit id="f97e4329a79b80781e88fc0b7075fb35ec5f6657" translate="yes" xml:space="preserve">
          <source>From a controller, use the &lt;a href=&quot;https://api.emberjs.com/ember/release/classes/Controller/methods#transitionToRoute&quot;&gt;&lt;code&gt;transitionToRoute()&lt;/code&gt;&lt;/a&gt; method</source>
          <target state="translated">在控制器中，使用&lt;a href=&quot;https://api.emberjs.com/ember/release/classes/Controller/methods#transitionToRoute&quot;&gt; &lt;code&gt;transitionToRoute()&lt;/code&gt; &lt;/a&gt;方法</target>
        </trans-unit>
        <trans-unit id="47fe021ef5948d7c02a3c81390a2d1e7cbcfa2a6" translate="yes" xml:space="preserve">
          <source>From a route, use the &lt;a href=&quot;https://api.emberjs.com/ember/release/classes/Route/methods#transitionTo&quot;&gt;&lt;code&gt;transitionTo()&lt;/code&gt;&lt;/a&gt; method</source>
          <target state="translated">在路线上，使用&lt;a href=&quot;https://api.emberjs.com/ember/release/classes/Route/methods#transitionTo&quot;&gt; &lt;code&gt;transitionTo()&lt;/code&gt; &lt;/a&gt;方法</target>
        </trans-unit>
        <trans-unit id="582654d9cea6e300f6d181523054e7cf172f898b" translate="yes" xml:space="preserve">
          <source>From a template, use &lt;a href=&quot;https://api.emberjs.com/ember/release/classes/Ember.Templates.components/methods#LinkTo&quot;&gt;&lt;code&gt;&amp;lt;LinkTo /&amp;gt;&lt;/code&gt;&lt;/a&gt; as mentioned above</source>
          <target state="translated">在模板中，如上所述使用&lt;a href=&quot;https://api.emberjs.com/ember/release/classes/Ember.Templates.components/methods#LinkTo&quot;&gt; &lt;code&gt;&amp;lt;LinkTo /&amp;gt;&lt;/code&gt; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="bd48478b2ebd428b5b178d07e8a905331e2f6884" translate="yes" xml:space="preserve">
          <source>From anywhere else in your application, such as a component, inject the &lt;a href=&quot;https://api.emberjs.com/ember/release/classes/RouterService&quot;&gt;Router Service&lt;/a&gt; and use the &lt;a href=&quot;https://api.emberjs.com/ember/release/classes/RouterService/methods#transitionTo&quot;&gt;&lt;code&gt;transitionTo()&lt;/code&gt;&lt;/a&gt; method</source>
          <target state="translated">从应用程序中的任何其他位置（例如组件），注入&lt;a href=&quot;https://api.emberjs.com/ember/release/classes/RouterService&quot;&gt;路由器服务&lt;/a&gt;并使用&lt;a href=&quot;https://api.emberjs.com/ember/release/classes/RouterService/methods#transitionTo&quot;&gt; &lt;code&gt;transitionTo()&lt;/code&gt; &lt;/a&gt;方法</target>
        </trans-unit>
        <trans-unit id="f93277273c2d468b90135b3055cba26e77e16d75" translate="yes" xml:space="preserve">
          <source>From here you can move on to the &lt;a href=&quot;../model-hook&quot;&gt;next page&lt;/a&gt; or dive into testing the new functionality we just added.</source>
          <target state="translated">从这里您可以转到&lt;a href=&quot;../model-hook&quot;&gt;下一页，&lt;/a&gt;也可以深入测试我们刚刚添加的新功能。</target>
        </trans-unit>
        <trans-unit id="12e62a21222cfb2cd2678c0f1b35ca66a58cbeac" translate="yes" xml:space="preserve">
          <source>From the value of &lt;code&gt;count&lt;/code&gt;, we see that &lt;code&gt;aspectRatio&lt;/code&gt; was calculated 3 times.</source>
          <target state="translated">从 &lt;code&gt;count&lt;/code&gt; 的值可以看出， &lt;code&gt;aspectRatio&lt;/code&gt; 被计算了3次。</target>
        </trans-unit>
        <trans-unit id="b821dabcc5bdf96323e1a7cc746c308389497381" translate="yes" xml:space="preserve">
          <source>From the value of &lt;code&gt;count&lt;/code&gt;, we see that, this time, &lt;code&gt;aspectRatio&lt;/code&gt; was calculated only twice.</source>
          <target state="translated">从 &lt;code&gt;count&lt;/code&gt; 的值，我们看到，这次， &lt;code&gt;aspectRatio&lt;/code&gt; 仅计算了两次。</target>
        </trans-unit>
        <trans-unit id="f1e410ad1472b42cb42cc98962428637290b6706" translate="yes" xml:space="preserve">
          <source>Function</source>
          <target state="translated">Function</target>
        </trans-unit>
        <trans-unit id="6b50e92fc7aea5426c00478727616aa2732e335b" translate="yes" xml:space="preserve">
          <source>Function Context</source>
          <target state="translated">功能背景</target>
        </trans-unit>
        <trans-unit id="c171828ba33200e5da444a3585c4abe04f275224" translate="yes" xml:space="preserve">
          <source>Function.on()</source>
          <target state="translated">Function.on()</target>
        </trans-unit>
        <trans-unit id="2a2015f5befe6d207f02fc8237deb8958521dcca" translate="yes" xml:space="preserve">
          <source>Function?</source>
          <target state="translated">Function?</target>
        </trans-unit>
        <trans-unit id="2b961dea1dc0c60ddf9a2c8e9d090f6f7d082483" translate="yes" xml:space="preserve">
          <source>Functions</source>
          <target state="translated">Functions</target>
        </trans-unit>
        <trans-unit id="7f327caeccd97a403dd1611a7c63975063bda543" translate="yes" xml:space="preserve">
          <source>Function|String</source>
          <target state="translated">Function|String</target>
        </trans-unit>
        <trans-unit id="d30e6731d445385026fb0435212e0f0347140a85" translate="yes" xml:space="preserve">
          <source>Function|undefined</source>
          <target state="translated">Function|undefined</target>
        </trans-unit>
        <trans-unit id="baa570f3e6ae8f1812a881f7231e27d8c648f32a" translate="yes" xml:space="preserve">
          <source>Furthermore, these sticky query param values are remembered/restored according to the model loaded into the route. So, given a &lt;code&gt;team&lt;/code&gt; route with dynamic segment &lt;code&gt;/:team_name&lt;/code&gt; and controller query param &quot;filter&quot;, if you navigate to &lt;code&gt;/badgers&lt;/code&gt; and filter by &lt;code&gt;&quot;rookies&quot;&lt;/code&gt;, then navigate to &lt;code&gt;/bears&lt;/code&gt; and filter by &lt;code&gt;&quot;best&quot;&lt;/code&gt;, and then navigate to &lt;code&gt;/potatoes&lt;/code&gt; and filter by &lt;code&gt;&quot;worst&quot;&lt;/code&gt;, then given the following nav bar links:</source>
          <target state="translated">此外，这些粘性查询参数值会根据加载到路线中的模型进行记忆/恢复。所以，对于一个 &lt;code&gt;team&lt;/code&gt; 的动态网段路由 &lt;code&gt;/:team_name&lt;/code&gt; 和控制器查询参数&amp;ldquo;过滤器&amp;rdquo;，如果你浏览到 &lt;code&gt;/badgers&lt;/code&gt; 通过和过滤器 &lt;code&gt;&quot;rookies&quot;&lt;/code&gt; ，然后导航到 &lt;code&gt;/bears&lt;/code&gt; 和过滤用 &lt;code&gt;&quot;best&quot;&lt;/code&gt; ，然后导航到 &lt;code&gt;/potatoes&lt;/code&gt; ，然后按 &lt;code&gt;&quot;worst&quot;&lt;/code&gt; 过滤，然后提供以下导航栏链接：</target>
        </trans-unit>
        <trans-unit id="f030bbbd32966cde41037b98a8849c46b76e4bc1" translate="yes" xml:space="preserve">
          <source>GET</source>
          <target state="translated">GET</target>
        </trans-unit>
        <trans-unit id="94eb6c8b6f7cfc6aedf8571508c6bdd1a4df9488" translate="yes" xml:space="preserve">
          <source>General utility classes</source>
          <target state="translated">一般实用类</target>
        </trans-unit>
        <trans-unit id="5f986fdaffda9cf7306775b5287d9b3762661886" translate="yes" xml:space="preserve">
          <source>Generally, &lt;a href=&quot;https://guides.emberjs.com/services/&quot;&gt;Services&lt;/a&gt; are Ember's primary method for sharing state via dependency injection. In most cases, you shouldn't need to learn about how to work with Ember's DI system directly, or how to manually register and setup dependencies. However, there are times when it may be necessary. This guide covers the details of the system, and how to use it when needed.</source>
          <target state="translated">通常，&lt;a href=&quot;https://guides.emberjs.com/services/&quot;&gt;服务&lt;/a&gt;是Ember通过依赖项注入共享状态的主要方法。在大多数情况下，您不需要了解如何直接与Ember的DI系统一起使用，或者如何手动注册和设置依赖项。但是，有时可能有必要。本指南涵盖了系统的详细信息，以及在需要时如何使用它。</target>
        </trans-unit>
        <trans-unit id="4aac835ea2b6aab97a2559e177a6e622b0c90f2f" translate="yes" xml:space="preserve">
          <source>Generally, you should try to create classes with their tracked properties enumerated and decorated with &lt;code&gt;@tracked&lt;/code&gt;, instead of relying on dynamically created POJOs. In some cases however, if your usage of properties on POJOs is too dynamic, you may not be able to enumerate every single property that could be tracked. There could be a prohibitive number of possible properties, or there could be no way to know them in advance. In this case, it's recommended that you &lt;em&gt;reset&lt;/em&gt; the value wherever it is updated:</source>
          <target state="translated">通常，您应该尝试使用跟踪属性枚举并用 &lt;code&gt;@tracked&lt;/code&gt; 修饰的类来创建类，而不要依赖于动态创建的POJO。但是，在某些情况下，如果您在POJO上使用的属性过于动态，则可能无法枚举可以跟踪的每个属性。可能会有许多可能的属性，或者可能没有办法提前知道它们。在这种情况下，建议您在更新后的任何位置&lt;em&gt;重置&lt;/em&gt;该值：</target>
        </trans-unit>
        <trans-unit id="600f5a7d6e66f8bb8c3182789a0bd212bedd8fd4" translate="yes" xml:space="preserve">
          <source>Generate a URL based on the supplied route name and optionally a model. The URL is returned as a string that can be used for any purpose.</source>
          <target state="translated">根据所提供的途径名称和可选的模型生成URL。URL以字符串的形式返回,可用于任何目的。</target>
        </trans-unit>
        <trans-unit id="33da7677e2d56059c92e30d9b6be9e4b6b73f6c0" translate="yes" xml:space="preserve">
          <source>Generate a URL based on the supplied route name.</source>
          <target state="translated">根据所提供的途径名称生成URL。</target>
        </trans-unit>
        <trans-unit id="f09345bf2216d01aba14af93487fbeccd2903c9b" translate="yes" xml:space="preserve">
          <source>Generate a controller for the &lt;code&gt;rentals&lt;/code&gt; route by running the following:</source>
          <target state="translated">通过运行以下命令为 &lt;code&gt;rentals&lt;/code&gt; 路线生成控制器：</target>
        </trans-unit>
        <trans-unit id="c8dce6fb6cede76539314f90bc59a5c80135a499" translate="yes" xml:space="preserve">
          <source>Generate the map component using Ember CLI.</source>
          <target state="translated">使用Ember CLI生成地图组件。</target>
        </trans-unit>
        <trans-unit id="0aea205a47266be8c495348ad0f9c73741f98201" translate="yes" xml:space="preserve">
          <source>Generating a Nested Detail Route</source>
          <target state="translated">生成嵌套的详细路线</target>
        </trans-unit>
        <trans-unit id="9d43d2f2ee9b4bb4f9bcf0d5b2a41df9def6363a" translate="yes" xml:space="preserve">
          <source>Generating a Nested Index Route</source>
          <target state="translated">生成嵌套索引路径</target>
        </trans-unit>
        <trans-unit id="9760cc894e686d61f7fec03c4e44d1b80af4b48c" translate="yes" xml:space="preserve">
          <source>Generators to help create components, routes, and more.</source>
          <target state="translated">生成器来帮助创建组件、路线等。</target>
        </trans-unit>
        <trans-unit id="70aec302e339fa13f3554c23e3ef7e1931b84ea4" translate="yes" xml:space="preserve">
          <source>Geolocation.</source>
          <target state="translated">Geolocation.</target>
        </trans-unit>
        <trans-unit id="26405aeae26ce9287363b843e9d7c68ace255d6e" translate="yes" xml:space="preserve">
          <source>Get a record by a given type and ID without triggering a fetch.</source>
          <target state="translated">通过给定的类型和ID获取记录,而不需要触发获取。</target>
        </trans-unit>
        <trans-unit id="93b44ba5398b64d9f08dc1913faba7571d1550c6" translate="yes" xml:space="preserve">
          <source>Get the HTTP method for a request.</source>
          <target state="translated">获取一个请求的HTTP方法。</target>
        </trans-unit>
        <trans-unit id="5003481ec84564c8683a4ad02a9203d02e4eac74" translate="yes" xml:space="preserve">
          <source>Get the URL for a request.</source>
          <target state="translated">获取请求的URL。</target>
        </trans-unit>
        <trans-unit id="c66c083b7e4e67179663e5f016d2e525ccb45253" translate="yes" xml:space="preserve">
          <source>Get the columns for a given model type.</source>
          <target state="translated">获取给定模型类型的列。</target>
        </trans-unit>
        <trans-unit id="830f1ea06d329a4ac6a3756016f9898516fc9ca9" translate="yes" xml:space="preserve">
          <source>Get the data (body or query params) for a request.</source>
          <target state="translated">获取请求的数据(正文或查询参数)。</target>
        </trans-unit>
        <trans-unit id="b1e901f6ea92c6f40580f56bfddd989c4ea2a838" translate="yes" xml:space="preserve">
          <source>Get the headers for a request.</source>
          <target state="translated">获取请求的头信息。</target>
        </trans-unit>
        <trans-unit id="ed3f518cc219dc8f15775cecb4e1626d19a66ad7" translate="yes" xml:space="preserve">
          <source>Get the reference for the specified belongsTo relationship.</source>
          <target state="translated">获取指定的 belongsTo关系的引用。</target>
        </trans-unit>
        <trans-unit id="fb73064448953de9ae0204965dea3b9d6a169dbe" translate="yes" xml:space="preserve">
          <source>Get the reference for the specified hasMany relationship.</source>
          <target state="translated">获取指定的hasMany关系的引用。</target>
        </trans-unit>
        <trans-unit id="a98502f7f02fe62e117df0ed62a5e923a6bb3c37" translate="yes" xml:space="preserve">
          <source>Get the reference for the specified record.</source>
          <target state="translated">获取指定记录的引用。</target>
        </trans-unit>
        <trans-unit id="71dbe0f3342deafc2ab56de8db0b18a3d3aa8466" translate="yes" xml:space="preserve">
          <source>Gets the value of a property on an object. If the property is computed, the function will be invoked. If the property is not defined but the object implements the &lt;code&gt;unknownProperty&lt;/code&gt; method then that will be invoked.</source>
          <target state="translated">获取对象上属性的值。如果计算了属性，则将调用该函数。如果未定义属性，但是对象实现了 &lt;code&gt;unknownProperty&lt;/code&gt; 方法，则将调用该方法。</target>
        </trans-unit>
        <trans-unit id="d7d84ad6f67235f8d24baed7073b1c879631b92e" translate="yes" xml:space="preserve">
          <source>Gets the values for each column.</source>
          <target state="translated">获取每列的数值。</target>
        </trans-unit>
        <trans-unit id="4ed1aac47efbb51b56ad6a6f326722a1c1c048e0" translate="yes" xml:space="preserve">
          <source>Getters and Setters</source>
          <target state="translated">获得者和定居者</target>
        </trans-unit>
        <trans-unit id="1bef3cda8498d10f284719875dd9d400fb2a36f8" translate="yes" xml:space="preserve">
          <source>Getters and setters can be defined directly on native classes:</source>
          <target state="translated">可以直接在本地类上定义Getters和setters。</target>
        </trans-unit>
        <trans-unit id="da0e664c038630fafa8a53bd9525ec0851a35929" translate="yes" xml:space="preserve">
          <source>Getters can also be used on their own to calculate values dynamically:</source>
          <target state="translated">获取器也可以单独用于动态计算值。</target>
        </trans-unit>
        <trans-unit id="5820f409d566d6fa6e63d27fe80fc350ad5eaa73" translate="yes" xml:space="preserve">
          <source>Getters run every time the property is read, setters run every time the property is set.</source>
          <target state="translated">获取器在每次读取属性时运行,设置器在每次设置属性时运行。</target>
        </trans-unit>
        <trans-unit id="0af5fc22a2f31287c8334505bd79709d34b085b7" translate="yes" xml:space="preserve">
          <source>Getters should not mutate state, and should be idempotent (they return the same value every time if nothing else has changed).</source>
          <target state="translated">获取器不应该突变状态,而且应该是幂等的(如果没有其他变化,它们每次都返回相同的值)。</target>
        </trans-unit>
        <trans-unit id="da0e079040a74584fda30a64b2e0355a622a9581" translate="yes" xml:space="preserve">
          <source>Getting an Application Instance from a Factory Instance</source>
          <target state="translated">从工厂实例获取应用程序实例</target>
        </trans-unit>
        <trans-unit id="539a29762302f74206cdfdac8a74b914ea48b56e" translate="yes" xml:space="preserve">
          <source>Getting started with Ember is easy. Ember projects are created and managed through our command line build tool Ember CLI. This tool provides:</source>
          <target state="translated">开始使用Ember很简单。Ember项目是通过我们的命令行构建工具Ember CLI来创建和管理的。这个工具提供</target>
        </trans-unit>
        <trans-unit id="2e721fbe889b717ca607bdb2fd941e5ea34bdb25" translate="yes" xml:space="preserve">
          <source>Getting used to &lt;code&gt;@action&lt;/code&gt;, &lt;code&gt;{{on}}&lt;/code&gt;, and &lt;code&gt;{{fn}}&lt;/code&gt;</source>
          <target state="translated">习惯 &lt;code&gt;@action&lt;/code&gt; ， &lt;code&gt;{{on}}&lt;/code&gt; 和 &lt;code&gt;{{fn}}&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="b25e1fda499132342197e70671d2453668989729" translate="yes" xml:space="preserve">
          <source>Getting used to &lt;code&gt;this&lt;/code&gt; in templates</source>
          <target state="translated">在模板中习惯 &lt;code&gt;this&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="b420c886ab52c24fc2c89a0e089f8ee1b266ec75" translate="yes" xml:space="preserve">
          <source>Getting used to Angle Brackets</source>
          <target state="translated">习惯使用角钢支架</target>
        </trans-unit>
        <trans-unit id="da0b90ff35871666aa911ca2058790353da63038" translate="yes" xml:space="preserve">
          <source>Getting used to Glimmer Components</source>
          <target state="translated">使用Glimmer组件</target>
        </trans-unit>
        <trans-unit id="7cbc36bca75d7fc9910aab164c50ac95db4b600e" translate="yes" xml:space="preserve">
          <source>Getting used to Named Arguments</source>
          <target state="translated">习惯使用命名参数</target>
        </trans-unit>
        <trans-unit id="5819778898df55e3a762f0c5728b457970d72cae" translate="yes" xml:space="preserve">
          <source>Git</source>
          <target state="translated">Git</target>
        </trans-unit>
        <trans-unit id="5442e2b64fa09764b9f593867e59a97292c84059" translate="yes" xml:space="preserve">
          <source>GitHub</source>
          <target state="translated">GitHub</target>
        </trans-unit>
        <trans-unit id="4e5f6a0536d05d128a6d128d52648145b148c9ad" translate="yes" xml:space="preserve">
          <source>Given a &lt;code&gt;TacoParty&lt;/code&gt; model, calling &lt;code&gt;save&lt;/code&gt; on it would produce an outgoing request like:</source>
          <target state="translated">在给定 &lt;code&gt;TacoParty&lt;/code&gt; 模型的情况下，对其调用 &lt;code&gt;save&lt;/code&gt; 将产生一个传出请求，例如：</target>
        </trans-unit>
        <trans-unit id="7b75fe28dbd75322da6f73f3048e9d964415a406" translate="yes" xml:space="preserve">
          <source>Given a &lt;code&gt;post&lt;/code&gt; model with attributes body, title, publishDate and meta, you can retrieve a filtered list of attributes.</source>
          <target state="translated">给定具有属性正文，标题，publishDate和meta的 &lt;code&gt;post&lt;/code&gt; 模型，您可以检索过滤的属性列表。</target>
        </trans-unit>
        <trans-unit id="0b798b22a36a8fb7d259e78c87e14188011223c0" translate="yes" xml:space="preserve">
          <source>Given a callback, iterates over each of the relationships in the model, invoking the callback with the name of each relationship and its relationship descriptor.</source>
          <target state="translated">给定一个回调,迭代模型中的每一个关系,用每个关系的名称及其关系描述符调用回调。</target>
        </trans-unit>
        <trans-unit id="e0568745c680da8312437a23e1c44462bee329e1" translate="yes" xml:space="preserve">
          <source>Given a callback, iterates over each of the types related to a model, invoking the callback with the related type's class. Each type will be returned just once, regardless of how many different relationships it has with a model.</source>
          <target state="translated">给定一个回调,遍历与模型相关的每个类型,用相关类型的类调用回调。每个类型将只被返回一次,不管它与模型有多少不同的关系。</target>
        </trans-unit>
        <trans-unit id="b0e5f9e1f8152169694773a02abf35185d808804" translate="yes" xml:space="preserve">
          <source>Given a fullName return a corresponding instance.</source>
          <target state="translated">给定一个fullName返回一个对应的实例。</target>
        </trans-unit>
        <trans-unit id="2f13fbc6cdf339f2d25e87142ea0a90a53658a0b" translate="yes" xml:space="preserve">
          <source>Given a fullName return a factory manager.</source>
          <target state="translated">给定一个fullName返回一个工厂经理。</target>
        </trans-unit>
        <trans-unit id="37d74c6bdfabf001cba8ff91688da5fa40622684" translate="yes" xml:space="preserve">
          <source>Given a fullName return the corresponding factory.</source>
          <target state="translated">给定一个fullName返回相应的工厂。</target>
        </trans-unit>
        <trans-unit id="4be37d698977b216fa3468816c77b29a601a1557" translate="yes" xml:space="preserve">
          <source>Given an input array like:</source>
          <target state="translated">给定一个输入数组,如:</target>
        </trans-unit>
        <trans-unit id="84ddb97291956d6a93caa6fd9afa6398920b6cce" translate="yes" xml:space="preserve">
          <source>Given that the server returns the following JSON payload when fetching a hasMany relationship:</source>
          <target state="translated">鉴于服务器在获取hasMany关系时,会返回以下JSON有效载荷。</target>
        </trans-unit>
        <trans-unit id="5327a59c0f2fd5c93a18b32cdc17ca3fe95c50bb" translate="yes" xml:space="preserve">
          <source>Given the above template, you can now use the &lt;code&gt;{{blog-post}}&lt;/code&gt; component:</source>
          <target state="translated">给定以上模板，您现在可以使用 &lt;code&gt;{{blog-post}}&lt;/code&gt; 组件：</target>
        </trans-unit>
        <trans-unit id="d25dc77ecf9ac2c548f7fdca3ea0008c74ec5b8e" translate="yes" xml:space="preserve">
          <source>Given the following router, entering &lt;code&gt;/posts/new&lt;/code&gt; will take you to the &lt;code&gt;posts.new&lt;/code&gt; route.</source>
          <target state="translated">给定以下路由器，输入 &lt;code&gt;/posts/new&lt;/code&gt; 将带您进入 &lt;code&gt;posts.new&lt;/code&gt; 路由。</target>
        </trans-unit>
        <trans-unit id="eeb4407f4e9773be51e3832417af1b5ed6ee6fba" translate="yes" xml:space="preserve">
          <source>Given the following template:</source>
          <target state="translated">鉴于以下模板:</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
