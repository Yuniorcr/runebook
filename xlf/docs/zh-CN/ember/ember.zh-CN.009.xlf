<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="zh-CN" datatype="htmlbody" original="ember">
    <body>
      <group id="ember">
        <trans-unit id="d743a54ea772eeabcfa94500a128f22d956e73e7" translate="yes" xml:space="preserve">
          <source>Standard attribute values applied to the component are treated like &lt;em&gt;plain-old HTML attributes&lt;/em&gt;. This means you can assign any valid HTML attribute, and it will be reflected onto the component directly:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bbbc2d09acef9d54bec542a8902adc3b0bd87a72" translate="yes" xml:space="preserve">
          <source>Start by running &lt;code&gt;ember g controller rentals/index&lt;/code&gt; to create an index controller for our nested route.</source>
          <target state="translated">首先运行 &lt;code&gt;ember g controller rentals/index&lt;/code&gt; 来为我们的嵌套路线创建一个指数控制器。</target>
        </trans-unit>
        <trans-unit id="ed3689b34944e00b45a933d94ff2ffb05b06064e" translate="yes" xml:space="preserve">
          <source>Starting index in the array to replace. If idx &amp;gt;= length, then append to the end of the array.</source>
          <target state="translated">数组中要替换的起始索引。如果idx&amp;gt; = length，则附加到数组的末尾。</target>
        </trans-unit>
        <trans-unit id="50509f2c508c7caf141113627595d51c2a28a0d2" translate="yes" xml:space="preserve">
          <source>Starting with Ember Octane, we recommend using the &lt;code&gt;{{on}}&lt;/code&gt; modifier to call an action on specific events such as the &lt;a href=&quot;https://developer.mozilla.org/docs/Web/API/HTMLElement/input_event&quot;&gt;input event&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a72502067518684f9deeec70cf119fd26326cd33" translate="yes" xml:space="preserve">
          <source>State</source>
          <target state="translated">State</target>
        </trans-unit>
        <trans-unit id="e2943b559f079da6407626d86e22f36963a935be" translate="yes" xml:space="preserve">
          <source>Statements like &lt;a href=&quot;http://emberjs.com/api/classes/Ember.Templates.helpers.html#method_if&quot;&gt;&lt;code&gt;if&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;http://emberjs.com/api/classes/Ember.Templates.helpers.html#method_unless&quot;&gt;&lt;code&gt;unless&lt;/code&gt;&lt;/a&gt; are implemented as built-in helpers. Helpers can be invoked three ways, each of which is illustrated below with conditionals.</source>
          <target state="translated">之类的语句&lt;a href=&quot;http://emberjs.com/api/classes/Ember.Templates.helpers.html#method_if&quot;&gt; &lt;code&gt;if&lt;/code&gt; &lt;/a&gt;并&lt;a href=&quot;http://emberjs.com/api/classes/Ember.Templates.helpers.html#method_unless&quot;&gt; &lt;code&gt;unless&lt;/code&gt; &lt;/a&gt;有内置的助手实施。可以通过三种方式调用帮助程序，每种方式在下面都通过条件进行说明。</target>
        </trans-unit>
        <trans-unit id="c1feba1e46ddf6c53b1adc00d9107a1d9ebc21a7" translate="yes" xml:space="preserve">
          <source>States are hierarchical and every state is a substate of the &lt;code&gt;RootState&lt;/code&gt;. For example, a record can be in the &lt;code&gt;root.deleted.uncommitted&lt;/code&gt; state, then transition into the &lt;code&gt;root.deleted.inFlight&lt;/code&gt; state. If a child state does not implement an event handler, the state manager will attempt to invoke the event on all parent states until the root state is reached. The state hierarchy of a record is described in terms of a path string. You can determine a record's current state by getting the state's &lt;code&gt;stateName&lt;/code&gt; property:</source>
          <target state="translated">状态是分层的，每个状态都是 &lt;code&gt;RootState&lt;/code&gt; 的子状态。例如，一条记录可以处于 &lt;code&gt;root.deleted.uncommitted&lt;/code&gt; 状态，然后过渡到 &lt;code&gt;root.deleted.inFlight&lt;/code&gt; 状态。如果子状态未实现事件处理程序，则状态管理器将尝试在所有父状态上调用事件，直到到达根状态为止。记录的状态层次结构是根据路径字符串描述的。您可以通过获取状态的 &lt;code&gt;stateName&lt;/code&gt; 属性来确定记录的当前状态：</target>
        </trans-unit>
        <trans-unit id="fc4ae63f1cc040532b1be2fbda0bb3eb87555b92" translate="yes" xml:space="preserve">
          <source>Static Elements</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4b16fec19f1cd336c7cc66b43507e900972d3de0" translate="yes" xml:space="preserve">
          <source>Static class elements are &lt;em&gt;not&lt;/em&gt; available on instances, and are only available directly on the class itself.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="79348bf7c01d88bc29dea0babea8fe5b1270f0e6" translate="yes" xml:space="preserve">
          <source>Static class elements are also inherited this way:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="00eb37c2ad8ac597d25ead8c96dc4b915e4541c5" translate="yes" xml:space="preserve">
          <source>Sticky Query Param Values</source>
          <target state="translated">Sticky查询参数值</target>
        </trans-unit>
        <trans-unit id="0d8a7046c8d39d9cbd86abcdfb704b161a601f9e" translate="yes" xml:space="preserve">
          <source>Store</source>
          <target state="translated">Store</target>
        </trans-unit>
        <trans-unit id="f1666d2bcbc1f1662ac087a581ceacb42b38e437" translate="yes" xml:space="preserve">
          <source>Store createRecord() vs. push() vs. pushPayload()</source>
          <target state="translated">存储createRecord()vs.push()vs.pushPayload()</target>
        </trans-unit>
        <trans-unit id="9c9e836e042084875f2706702835fd50f3d499b1" translate="yes" xml:space="preserve">
          <source>Storing and Retrying a Transition</source>
          <target state="translated">储存和重试过渡</target>
        </trans-unit>
        <trans-unit id="3df63b7acb0522da685dad5fe84b81fdd7b25264" translate="yes" xml:space="preserve">
          <source>String</source>
          <target state="translated">String</target>
        </trans-unit>
        <trans-unit id="b3d17fda1094db33050217bb63ea9c24bd2b99dc" translate="yes" xml:space="preserve">
          <source>String or Function</source>
          <target state="translated">字符串或函数</target>
        </trans-unit>
        <trans-unit id="39c8ee4b004e65cdc082fa7eb5ee8ed640fb37c0" translate="yes" xml:space="preserve">
          <source>String,Function</source>
          <target state="translated">String,Function</target>
        </trans-unit>
        <trans-unit id="1c9540a017269c9feb496d71189bffe50f7d5885" translate="yes" xml:space="preserve">
          <source>String...|Array</source>
          <target state="translated">String...|Array</target>
        </trans-unit>
        <trans-unit id="f0d3c25699981cc6a89aac831ec30d8b3c22399b" translate="yes" xml:space="preserve">
          <source>String.w()</source>
          <target state="translated">String.w()</target>
        </trans-unit>
        <trans-unit id="b603ec5b979b7ed45c788051514c9a24004fc62e" translate="yes" xml:space="preserve">
          <source>StringTransform</source>
          <target state="translated">StringTransform</target>
        </trans-unit>
        <trans-unit id="ee053f700e38efa717c2bdfc628b701ca4789740" translate="yes" xml:space="preserve">
          <source>String[]|string</source>
          <target state="translated">String[]|string</target>
        </trans-unit>
        <trans-unit id="3816c4beac471c733eed1d91c213f8c2b6a29262" translate="yes" xml:space="preserve">
          <source>Strings</source>
          <target state="translated">Strings</target>
        </trans-unit>
        <trans-unit id="5e2de559df2862cc71558e06f2eeae9cf0efe5c0" translate="yes" xml:space="preserve">
          <source>Strings will no longer have the convenience methods described in the &lt;a href=&quot;http://emberjs.com/api/classes/Ember.String.html&quot;&gt;&lt;code&gt;Ember.String&lt;/code&gt; API reference&lt;/a&gt;. Instead, you can use the similarly-named methods of the &lt;code&gt;Ember.String&lt;/code&gt; object and pass the string to use as the first parameter:</source>
          <target state="translated">字符串将不再具有&lt;a href=&quot;http://emberjs.com/api/classes/Ember.String.html&quot;&gt; &lt;code&gt;Ember.String&lt;/code&gt; API参考中&lt;/a&gt;描述的便捷方法。相反，您可以使用 &lt;code&gt;Ember.String&lt;/code&gt; 对象的类似名称的方法，并将该字符串用作第一个参数：</target>
        </trans-unit>
        <trans-unit id="ac886a143f6aa8b8d037fa39cd99d06520d04d9f" translate="yes" xml:space="preserve">
          <source>Strings will no longer have the convenience methods described in the &lt;a href=&quot;https://api.emberjs.com/ember/release/classes/String&quot;&gt;&lt;code&gt;Ember.String&lt;/code&gt; API reference&lt;/a&gt;. Instead, you can use the similarly-named methods of the &lt;code&gt;Ember.String&lt;/code&gt; object and pass the string to use as the first parameter:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3524a89f0508fdccd88639d09b323af881a667b5" translate="yes" xml:space="preserve">
          <source>String|Function</source>
          <target state="translated">String|Function</target>
        </trans-unit>
        <trans-unit id="f9855c2923df85d9ccaa6e5a653e82994824844a" translate="yes" xml:space="preserve">
          <source>String|Function|Array</source>
          <target state="translated">String|Function|Array</target>
        </trans-unit>
        <trans-unit id="096cde0b9a1b5f451a441cdfbe8d57859fd850e0" translate="yes" xml:space="preserve">
          <source>String|Integer</source>
          <target state="translated">String|Integer</target>
        </trans-unit>
        <trans-unit id="7dffcf19da01173ef7755fae671bcdb375a056de" translate="yes" xml:space="preserve">
          <source>String|Number</source>
          <target state="translated">String|Number</target>
        </trans-unit>
        <trans-unit id="c54337b559e9f029d16387ab04f89b68d4a2d8c3" translate="yes" xml:space="preserve">
          <source>String|Number|Object</source>
          <target state="translated">String|Number|Object</target>
        </trans-unit>
        <trans-unit id="7510182a2f01b9f70534bd7ab87456330ddc7be5" translate="yes" xml:space="preserve">
          <source>String|Object</source>
          <target state="translated">String|Object</target>
        </trans-unit>
        <trans-unit id="baca1a7147855eb5795ff280775be4b9cf07d961" translate="yes" xml:space="preserve">
          <source>String|Property</source>
          <target state="translated">String|Property</target>
        </trans-unit>
        <trans-unit id="181ecbb6aef5c83776022689fb77ac544b65b588" translate="yes" xml:space="preserve">
          <source>String|null</source>
          <target state="translated">String|null</target>
        </trans-unit>
        <trans-unit id="7087dd5b60a0e5d36d078de3709bb645d286db69" translate="yes" xml:space="preserve">
          <source>Stubbing Services</source>
          <target state="translated">存根服务</target>
        </trans-unit>
        <trans-unit id="27aa4c7ccfa314309a981fe2957b63393d5fce5e" translate="yes" xml:space="preserve">
          <source>Stubbing Services in Acceptance Tests</source>
          <target state="translated">验收测试中的存根服务</target>
        </trans-unit>
        <trans-unit id="9dc3603bb97ae39b239f616d1c3f49aa8e97a153" translate="yes" xml:space="preserve">
          <source>Stubbing a method</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b04b789fc93b3b824841a8162b871d74667d08e2" translate="yes" xml:space="preserve">
          <source>Stubbing an object</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3107408a50c756bdc03dcf7d5aed6d74eb0c9e3e" translate="yes" xml:space="preserve">
          <source>Stubs</source>
          <target state="translated">Stubs</target>
        </trans-unit>
        <trans-unit id="7457e80447c5b08f0a338e6ccc3e0598378f4591" translate="yes" xml:space="preserve">
          <source>Style it up</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ad93ff1976c357fa1090e4a8fa0775d82c5386b1" translate="yes" xml:space="preserve">
          <source>Subclass of Model</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9ce6ba148fe8d9ab4a1efa44f043d11727e7f6ee" translate="yes" xml:space="preserve">
          <source>Sublime Text</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="87fc913c19cccd1420f6549019e6ab07d2652eb8" translate="yes" xml:space="preserve">
          <source>Submitting a post without a title displays a red validation state on the field and gives the user text indicating that the title is required.</source>
          <target state="translated">在没有标题的情况下提交帖子,会在字段上显示红色的验证状态,并给用户提示需要标题的文字。</target>
        </trans-unit>
        <trans-unit id="12d390f8025584ad2ceb29d8156199827eb766f2" translate="yes" xml:space="preserve">
          <source>Submodules</source>
          <target state="translated">Submodules</target>
        </trans-unit>
        <trans-unit id="6ef9815ada2a0398b68221d1261a977ff08f7246" translate="yes" xml:space="preserve">
          <source>Subscribe to a listener by using &lt;code&gt;Ember.subscribe&lt;/code&gt;:</source>
          <target state="translated">通过使用 &lt;code&gt;Ember.subscribe&lt;/code&gt; 订阅侦听器：</target>
        </trans-unit>
        <trans-unit id="eb7e7cd9296878731ca54a308b73da381671370f" translate="yes" xml:space="preserve">
          <source>Subscribes a function to a named event and then cancels the subscription after the first time the event is triggered. It is good to use &lt;code&gt;one&lt;/code&gt; when you only care about the first time an event has taken place.</source>
          <target state="translated">将函数订阅到命名事件，然后在第一次触发事件后取消订阅。当您只关心事件的第一次发生时，最好使用 &lt;code&gt;one&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="1a236ce5c458753d003516cfdb6d3fbc2147baa0" translate="yes" xml:space="preserve">
          <source>Subscribes to a named event with given function.</source>
          <target state="translated">用给定的函数订阅一个命名的事件。</target>
        </trans-unit>
        <trans-unit id="21ff0eedd4b3be556de21a3ebae1bcf1865e815e" translate="yes" xml:space="preserve">
          <source>Success and failure</source>
          <target state="translated">成功与失败</target>
        </trans-unit>
        <trans-unit id="8cfff872da8f8d3db914a033e03cf90b9d758302" translate="yes" xml:space="preserve">
          <source>Such features have their implementations guarded by a &quot;feature flag&quot;, and the flag is only activated once the core-data team is prepared to ship the work in a canary release.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="12b71c3e0fe5f7c0b8d17cc03186e281412da4a8" translate="yes" xml:space="preserve">
          <source>Summary</source>
          <target state="translated">Summary</target>
        </trans-unit>
        <trans-unit id="37b4f4ecb28fa687bfddae48caa1243e2b716d9c" translate="yes" xml:space="preserve">
          <source>Summary: The Principle of Substitution</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f6889fc97e14b42dec11a8c183ea791c5465b658" translate="yes" xml:space="preserve">
          <source>Super</source>
          <target state="translated">Super</target>
        </trans-unit>
        <trans-unit id="d566bb22908b1ec9a9610a20f300bf499e0d3e6f" translate="yes" xml:space="preserve">
          <source>Supplying a model</source>
          <target state="translated">提供一个模型</target>
        </trans-unit>
        <trans-unit id="307ad7bba7045cbdfbe8ab3762416f0cfe2eeea8" translate="yes" xml:space="preserve">
          <source>Supplying a tagName</source>
          <target state="translated">提供一个标签名</target>
        </trans-unit>
        <trans-unit id="2a1281cd7b34a3b437d33cc93541bd5fe0eac5b8" translate="yes" xml:space="preserve">
          <source>Supplying an explicit dynamic segment value</source>
          <target state="translated">提供一个明确的动态段值</target>
        </trans-unit>
        <trans-unit id="ac7e6f74b23299de001ce35020dda39ed87fccdf" translate="yes" xml:space="preserve">
          <source>Supplying multiple models</source>
          <target state="translated">提供多种型号</target>
        </trans-unit>
        <trans-unit id="3c4685eb55ed20aeb850f996709d097128114b51" translate="yes" xml:space="preserve">
          <source>Support for ES2015/ES6 JavaScript via the &lt;a href=&quot;https://babeljs.io/learn-es2015/&quot;&gt;Babel&lt;/a&gt; project. This includes support for &lt;a href=&quot;http://exploringjs.com/es6/ch_modules.html&quot;&gt;JavaScript modules&lt;/a&gt;, which are used throughout this guide.</source>
          <target state="translated">通过&lt;a href=&quot;https://babeljs.io/learn-es2015/&quot;&gt;Babel&lt;/a&gt;项目支持ES2015 / ES6 JavaScript 。这包括对&lt;a href=&quot;http://exploringjs.com/es6/ch_modules.html&quot;&gt;JavaScript模块的&lt;/a&gt;支持，本指南通篇使用。</target>
        </trans-unit>
        <trans-unit id="48012bbbd369e7cf9dbf01a37cf616f579aef634" translate="yes" xml:space="preserve">
          <source>Supported Features</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e2c0191bfc5d5b1bd1375a04ab5288df11a1e581" translate="yes" xml:space="preserve">
          <source>Supported Scenarios</source>
          <target state="translated">支持的场景</target>
        </trans-unit>
        <trans-unit id="f158e8ae8a0fd5a1bbca7308d27f425549f52faa" translate="yes" xml:space="preserve">
          <source>Supporting both block and non-block component usage in one template</source>
          <target state="translated">支持在一个模板中同时使用块和非块组件。</target>
        </trans-unit>
        <trans-unit id="21d313eca972677af60300d5c32cdc508135a054" translate="yes" xml:space="preserve">
          <source>Supporting different editing styles will require different body components to provide special validation and highlighting. To load a different body component based on editing style, you can yield the component using the &lt;a href=&quot;http://emberjs.com/api/classes/Ember.Templates.helpers.html#method_component&quot;&gt;&lt;code&gt;component helper&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;http://emberjs.com/api/classes/Ember.Templates.helpers.html#method_hash&quot;&gt;&lt;code&gt;hash helper&lt;/code&gt;&lt;/a&gt;. Here, the appropriate component is assigned to a hash using nested helpers and yielded to the template. Notice &lt;code&gt;editStyle&lt;/code&gt; being used as an argument to the component helper.</source>
          <target state="translated">支持不同的编辑样式将需要不同的正文组件以提供特殊的验证和突出显示。要基于编辑样式加载不同的主体组件，可以使用&lt;a href=&quot;http://emberjs.com/api/classes/Ember.Templates.helpers.html#method_component&quot;&gt; &lt;code&gt;component helper&lt;/code&gt; &lt;/a&gt;和&lt;a href=&quot;http://emberjs.com/api/classes/Ember.Templates.helpers.html#method_hash&quot;&gt; &lt;code&gt;hash helper&lt;/code&gt; &lt;/a&gt;产生该组件。在这里，使用嵌套的帮助器将适当的组件分配给哈希，并提供给模板。注意 &lt;code&gt;editStyle&lt;/code&gt; 被用作组件帮助器的参数。</target>
        </trans-unit>
        <trans-unit id="870b6a43f9969937a6b78668e5f67b305829ac03" translate="yes" xml:space="preserve">
          <source>Suppose we have an object that has a property and a method observing that property.</source>
          <target state="translated">假设我们有一个对象,它有一个属性和一个观察该属性的方法。</target>
        </trans-unit>
        <trans-unit id="9675587d4669654928b069872d4f2938fc8dc804" translate="yes" xml:space="preserve">
          <source>Suppose you want to integrate your favorite date picker library into an Ember project. Typically, 3rd party JS/jQuery libraries require a DOM element to bind to. So, where is the best place to initialize and attach the library?</source>
          <target state="translated">假设你想把你最喜欢的日期选择器库集成到Ember项目中。通常,第三方JS/jQuery库需要一个DOM元素来绑定。那么,哪里是初始化和附加库的最佳位置?</target>
        </trans-unit>
        <trans-unit id="54897732f4b63d3c5ff931e91d4d9c2898d5e1a1" translate="yes" xml:space="preserve">
          <source>Suppose, instead, you want the suite to run after every file change. You can enter &lt;code&gt;ember test --server&lt;/code&gt;, or &lt;code&gt;ember t -s&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="32022615c098204ea1317378c836b09ed172550a" translate="yes" xml:space="preserve">
          <source>Sync relationships</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="20aeee9b0344b503f9d7a448f7aba7ca9a8c5cca" translate="yes" xml:space="preserve">
          <source>Synchronous Example</source>
          <target state="translated">同步实例</target>
        </trans-unit>
        <trans-unit id="495d2949869c7e350f566c1678a60431b1cc2fcf" translate="yes" xml:space="preserve">
          <source>Synchronous Helpers</source>
          <target state="translated">同步助手</target>
        </trans-unit>
        <trans-unit id="342d5495308e369e444baf3f33f246d0bcc29b75" translate="yes" xml:space="preserve">
          <source>Synchronous example:</source>
          <target state="translated">同步的例子。</target>
        </trans-unit>
        <trans-unit id="d54e57d31e1997c6a23c5f4f4a2538763d613e21" translate="yes" xml:space="preserve">
          <source>Synchronous helpers are performed immediately when triggered.</source>
          <target state="translated">触发时立即执行同步帮助。</target>
        </trans-unit>
        <trans-unit id="7863003b76de30fb0d39d091532fa48c8ca6a75e" translate="yes" xml:space="preserve">
          <source>Tackling Deprecations</source>
          <target state="translated">处理弃用问题</target>
        </trans-unit>
        <trans-unit id="1d6f3b9629d6275a16e909978a30680b410d16c9" translate="yes" xml:space="preserve">
          <source>Tag name for the view's outer element. The tag name is only used when an element is first created. If you change the &lt;code&gt;tagName&lt;/code&gt; for an element, you must destroy and recreate the view element.</source>
          <target state="translated">视图外部元素的标签名称。标签名称仅在首次创建元素时使用。如果更改元素的 &lt;code&gt;tagName&lt;/code&gt; ，则必须销毁并重新创建view元素。</target>
        </trans-unit>
        <trans-unit id="eb8e3e9f7283008461ee747f3e130db27bb0a277" translate="yes" xml:space="preserve">
          <source>Take for example the following routes:</source>
          <target state="translated">以下列路线为例:</target>
        </trans-unit>
        <trans-unit id="3ec52ecdefa033f73faa855e208c64afc320736f" translate="yes" xml:space="preserve">
          <source>Takes a string URL and returns a &lt;code&gt;RouteInfo&lt;/code&gt; for the leafmost route represented by the URL. Returns &lt;code&gt;null&lt;/code&gt; if the URL is not recognized. This method expects to receive the actual URL as seen by the browser including the app's &lt;code&gt;rootURL&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="49503513d896013da572f384f659640b2f6fdcaa" translate="yes" xml:space="preserve">
          <source>Takes a string URL and returns a promise that resolves to a &lt;code&gt;RouteInfoWithAttributes&lt;/code&gt; for the leafmost route represented by the URL. The promise rejects if the URL is not recognized or an unhandled exception is encountered. This method expects to receive the actual URL as seen by the browser including the app's &lt;code&gt;rootURL&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2c60cfa4ea62384dd026b50e8f6e0eed19938e00" translate="yes" xml:space="preserve">
          <source>Takes an ajax response, and returns the json payload or an error.</source>
          <target state="translated">获取ajax响应,并返回json有效载荷或错误。</target>
        </trans-unit>
        <trans-unit id="2607d7927aff0804548c4b0b185cdde8d7b9102d" translate="yes" xml:space="preserve">
          <source>TalkBack, integrated in Android products</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ab8aad230fdba67c86441e29f313daf20e0add73" translate="yes" xml:space="preserve">
          <source>TargetActionSupport</source>
          <target state="translated">TargetActionSupport</target>
        </trans-unit>
        <trans-unit id="f590f0054800d249efd62e16a06110d361c76fc3" translate="yes" xml:space="preserve">
          <source>Teams can gradually refactor an app to use named arguments, separately from upgrading to angle bracket invocation. You don't need to worry about whether the parent used angle brackets or curly brackets. For example, this works just fine:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0782e2070079b67a13f7176a63f28870645b1f6f" translate="yes" xml:space="preserve">
          <source>Template Lifecycle, DOM, and Modifiers</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d1e8254c86f37cbe15667c32cc8a8a8fff4cd1ef" translate="yes" xml:space="preserve">
          <source>Template compilation.</source>
          <target state="translated">模板汇编。</target>
        </trans-unit>
        <trans-unit id="3ac2af30c21f5b1269cc739ce0c14fb3441d07af" translate="yes" xml:space="preserve">
          <source>Template-Only Components</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7aaa235ac4be56bea19f002cc34ac2da7658f852" translate="yes" xml:space="preserve">
          <source>Template-only components have no backing class instance, so &lt;code&gt;this&lt;/code&gt; in their templates is &lt;code&gt;null&lt;/code&gt;. This means that you can only reference passed in arguments via named argument syntax (e.g. &lt;code&gt;{{@arg}}&lt;/code&gt;):</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f25b700ed9f092123a43acb205a6869342cf9dd6" translate="yes" xml:space="preserve">
          <source>Templates</source>
          <target state="translated">Templates</target>
        </trans-unit>
        <trans-unit id="e0798b75e7948295bcd979bc81fbd4910dc431b4" translate="yes" xml:space="preserve">
          <source>Templates are HTML</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f26dba0d688990ff76ff8c4eada0b9b5921db5b4" translate="yes" xml:space="preserve">
          <source>Templates are backed with a context. A context is an object from which Handlebars expressions read their properties. In Ember this is often a component. For templates rendered by a route (like &lt;code&gt;application.hbs&lt;/code&gt;), the context is a controller.</source>
          <target state="translated">模板带有上下文支持。上下文是一个对象，Handlebars表达式可从该对象读取其属性。在Ember中，这通常是一个组成部分。对于由路由渲染的模板（例如 &lt;code&gt;application.hbs&lt;/code&gt; ），上下文是控制器。</target>
        </trans-unit>
        <trans-unit id="bca019d1b04ef7b9ee38e243a74a67fd82e673fa" translate="yes" xml:space="preserve">
          <source>Templates can also display properties provided to them from their context, which is either a component or a route's controller. For example:</source>
          <target state="translated">模板还可以显示从其上下文中提供给它们的属性,上下文是一个组件或路由的控制器。例如</target>
        </trans-unit>
        <trans-unit id="0cb8a4e07271b0d340c62e076dc95d47778b3c6f" translate="yes" xml:space="preserve">
          <source>Templates can use &lt;code&gt;...attributes&lt;/code&gt; to target attributes and element modifiers passed from an angle bracket invocation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="517698063a175f12911d21c0535adc2e76938ecf" translate="yes" xml:space="preserve">
          <source>Templates manage the flow of an application's UI, and display state (through the DOM) to a user. For example, given a component with the property &quot;name&quot;, that component's template can use the name in several ways:</source>
          <target state="translated">模板管理应用程序的UI流程,并向用户显示状态(通过DOM)。例如,给定一个具有 &quot;name &quot;属性的组件,该组件的模板可以以多种方式使用该名称。</target>
        </trans-unit>
        <trans-unit id="21d278837034557e7a9b46210d42d6e7b8075142" translate="yes" xml:space="preserve">
          <source>Terminology</source>
          <target state="translated">Terminology</target>
        </trans-unit>
        <trans-unit id="640ab2bae07bedc4c163f679a746f7ab7fb5d1fa" translate="yes" xml:space="preserve">
          <source>Test</source>
          <target state="translated">Test</target>
        </trans-unit>
        <trans-unit id="51813b0814adc6202a7752710fd028f16f5bf477" translate="yes" xml:space="preserve">
          <source>Test Helpers</source>
          <target state="translated">测试助手</target>
        </trans-unit>
        <trans-unit id="9ba8c6bbd43ca0d7489cc83f242056e6bd9ccd25" translate="yes" xml:space="preserve">
          <source>Test Types</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="71e87427c5c1776079aac1a6e43414bf22f2e47e" translate="yes" xml:space="preserve">
          <source>Test that against the model class of your persistence library.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aed406fa903d6e94bc7feee88a130462ff9783a9" translate="yes" xml:space="preserve">
          <source>Test visiting our About and Contact pages</source>
          <target state="translated">测试访问我们的关于和联系页面</target>
        </trans-unit>
        <trans-unit id="ffc6d1799bcae14a2ddec680d4c9ccc44518207d" translate="yes" xml:space="preserve">
          <source>TestAdapter</source>
          <target state="translated">TestAdapter</target>
        </trans-unit>
        <trans-unit id="0820b32b206b7352858e8903a838ed14319acdfd" translate="yes" xml:space="preserve">
          <source>Testing</source>
          <target state="translated">Testing</target>
        </trans-unit>
        <trans-unit id="c59410bf3ca2f20fd8b0393728deccf2dc47f93a" translate="yes" xml:space="preserve">
          <source>Testing Actions</source>
          <target state="translated">测试行动</target>
        </trans-unit>
        <trans-unit id="ef83d323bedb05179963458a14ff0749094e76b1" translate="yes" xml:space="preserve">
          <source>Testing Application</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dc497a114746f541bb8dc098d7f12a25187ca8c6" translate="yes" xml:space="preserve">
          <source>Testing Basics</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="06b38cb08494d08dd0969ccda46c766ca333f501" translate="yes" xml:space="preserve">
          <source>Testing Components</source>
          <target state="translated">测试组件</target>
        </trans-unit>
        <trans-unit id="111ae9c10175e16d69526c94a465e0225d9f1710" translate="yes" xml:space="preserve">
          <source>Testing Computed Properties</source>
          <target state="translated">测试计算属性</target>
        </trans-unit>
        <trans-unit id="99b77cfd86fdd51de87c409f5f7edff06aa85329" translate="yes" xml:space="preserve">
          <source>Testing Considerations</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="91816ac28cf876440112f405559c1a49b916b2f0" translate="yes" xml:space="preserve">
          <source>Testing Controller Actions</source>
          <target state="translated">测试控制器的动作</target>
        </trans-unit>
        <trans-unit id="bbdb40de641b7bd903d12a3a7d8dcdf9f0d4da40" translate="yes" xml:space="preserve">
          <source>Testing Controller Needs</source>
          <target state="translated">测试控制器的需求</target>
        </trans-unit>
        <trans-unit id="a3634a65dd330502bee5446e899329476bf7ded2" translate="yes" xml:space="preserve">
          <source>Testing Controllers</source>
          <target state="translated">测试控制器</target>
        </trans-unit>
        <trans-unit id="fcc10e5ab4dd75f9eb46dbd24ec0395685a9aa13" translate="yes" xml:space="preserve">
          <source>Testing Frameworks</source>
          <target state="translated">测试框架</target>
        </trans-unit>
        <trans-unit id="e309e778695eab20a3a8bc01dba2b39e99684bfe" translate="yes" xml:space="preserve">
          <source>Testing Helpers</source>
          <target state="translated">测试助手</target>
        </trans-unit>
        <trans-unit id="f487e84bdaccef5eb28911d350ffc027190e112c" translate="yes" xml:space="preserve">
          <source>Testing Models</source>
          <target state="translated">测试模型</target>
        </trans-unit>
        <trans-unit id="82df70ae5a532aff7c33f9b6a39a13c4ceb157d6" translate="yes" xml:space="preserve">
          <source>Testing Object Methods</source>
          <target state="translated">测试对象方法</target>
        </trans-unit>
        <trans-unit id="10598855856ed90e10e02c787702f60e5e73921b" translate="yes" xml:space="preserve">
          <source>Testing Observers</source>
          <target state="translated">测试观察员</target>
        </trans-unit>
        <trans-unit id="c2719b0d81b37187b81d8b3c83b30f393e2ac71c" translate="yes" xml:space="preserve">
          <source>Testing Our Application As We Go</source>
          <target state="translated">边走边测试我们的应用</target>
        </trans-unit>
        <trans-unit id="a6c9220ff39e33f54e9415c82938ea24da9ff5cf" translate="yes" xml:space="preserve">
          <source>Testing Relationships</source>
          <target state="translated">测试关系</target>
        </trans-unit>
        <trans-unit id="3beda4357979b576777318de0cd80c86b2eba9a4" translate="yes" xml:space="preserve">
          <source>Testing Routes</source>
          <target state="translated">测试路线</target>
        </trans-unit>
        <trans-unit id="48d04cd7bff00c397a2449e46bae4e190877dce0" translate="yes" xml:space="preserve">
          <source>Testing User Interaction</source>
          <target state="translated">测试用户交互</target>
        </trans-unit>
        <trans-unit id="627445291b103d97223f554921c6a4122db19397" translate="yes" xml:space="preserve">
          <source>Testing is a core part of the Ember framework and its development cycle.</source>
          <target state="translated">测试是Ember框架及其开发周期的核心部分。</target>
        </trans-unit>
        <trans-unit id="9829d58d7519decb98a016ef2876759597109cbf" translate="yes" xml:space="preserve">
          <source>Testing routes can be done both via acceptance or unit tests. Acceptance tests will likely provide better coverage for routes because routes are typically used to perform transitions and load data, both of which are tested more easily in full context rather than isolation.</source>
          <target state="translated">测试路由既可以通过验收测试,也可以通过单元测试。验收测试可能会为路由提供更好的覆盖率,因为路由通常用于执行转换和加载数据,这两者都更容易在全上下文中而不是孤立地进行测试。</target>
        </trans-unit>
        <trans-unit id="4993290ab096c9732f9bb7c79412c75370542561" translate="yes" xml:space="preserve">
          <source>Testing routes can be done both via application tests or container tests. Application tests will likely provide better coverage for routes because routes are typically used to perform transitions and load data, both of which are tested more easily in full context rather than isolation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c06feb4db18fe22ca99f672e2f6701eab0410aae" translate="yes" xml:space="preserve">
          <source>Tests can also be executed when you are running a local development server (started by running &lt;code&gt;ember server&lt;/code&gt;), at the &lt;code&gt;/tests&lt;/code&gt; URI which renders the &lt;code&gt;tests/index.html&lt;/code&gt; template. A word of caution using this approach: Tests run using &lt;code&gt;ember server&lt;/code&gt; have the environment configuration &lt;code&gt;development&lt;/code&gt;, whereas tests executed under &lt;code&gt;ember test --server&lt;/code&gt; are run with the configuration &lt;code&gt;test&lt;/code&gt;. This could cause differences in execution, such as which libraries are loaded and available. Therefore its recommended that you use &lt;code&gt;ember test --server&lt;/code&gt; for test execution.</source>
          <target state="translated">当您运行本地开发服务器（以运行 &lt;code&gt;ember server&lt;/code&gt; 开头）时，也可以在呈现 &lt;code&gt;tests/index.html&lt;/code&gt; 模板的 &lt;code&gt;/tests&lt;/code&gt; URI上执行测试。使用这种方法时要小心：使用 &lt;code&gt;ember server&lt;/code&gt; 运行的测试具有环境配置 &lt;code&gt;development&lt;/code&gt; ，而在 &lt;code&gt;ember test --server&lt;/code&gt; 下执行的测试则与配置 &lt;code&gt;test&lt;/code&gt; 一起运行。这可能会导致执行方面的差异，例如哪些库已加载和可用。因此，建议您使用 &lt;code&gt;ember test --server&lt;/code&gt; 进行测试执行。</target>
        </trans-unit>
        <trans-unit id="397b6080e414f58dca5e208b2d6e35210d1b3660" translate="yes" xml:space="preserve">
          <source>Text Areas</source>
          <target state="translated">文本区域</target>
        </trans-unit>
        <trans-unit id="dc7b11db79436bd2c512f4d9967fc73904ef80da" translate="yes" xml:space="preserve">
          <source>Text field</source>
          <target state="translated">文本领域</target>
        </trans-unit>
        <trans-unit id="f9168144e4f6dc56ba8e02f8cb5754a06a331b7a" translate="yes" xml:space="preserve">
          <source>Text fields</source>
          <target state="translated">文本领域</target>
        </trans-unit>
        <trans-unit id="6803da9ee11ff492530f9c8867cacf0bf23256dc" translate="yes" xml:space="preserve">
          <source>TextArea</source>
          <target state="translated">TextArea</target>
        </trans-unit>
        <trans-unit id="ed595662ad10d27de0f2faece995e2ca2b8e7012" translate="yes" xml:space="preserve">
          <source>TextField</source>
          <target state="translated">TextField</target>
        </trans-unit>
        <trans-unit id="18d077a1a2979a8d6bce31e5dbe43320be8e25bf" translate="yes" xml:space="preserve">
          <source>TextField.max</source>
          <target state="translated">TextField.max</target>
        </trans-unit>
        <trans-unit id="5f0b052f28a0bd79ca6d930fe4c63eb5ecf68887" translate="yes" xml:space="preserve">
          <source>TextField.min</source>
          <target state="translated">TextField.min</target>
        </trans-unit>
        <trans-unit id="18e5d205fad575a252d1a26dc2fa9ef4f4a1b761" translate="yes" xml:space="preserve">
          <source>TextField.size</source>
          <target state="translated">TextField.size</target>
        </trans-unit>
        <trans-unit id="5c2de3d7d34ecad27d764569b0d805502a88a8e0" translate="yes" xml:space="preserve">
          <source>TextField.type</source>
          <target state="translated">TextField.type</target>
        </trans-unit>
        <trans-unit id="27df24da0e29d9bd616074b4f3101aac223ebbe7" translate="yes" xml:space="preserve">
          <source>TextSupport</source>
          <target state="translated">TextSupport</target>
        </trans-unit>
        <trans-unit id="41c7f09b2c8daee02a607c30d9fb577e826692c7" translate="yes" xml:space="preserve">
          <source>Thanks to Ember's setup, you can also use &lt;a href=&quot;https://github.com/emberjs/ember-test-helpers/blob/master/API.md#pausetest&quot;&gt;&lt;code&gt;pauseTest()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;https://github.com/emberjs/ember-test-helpers/blob/master/API.md#resumetest&quot;&gt;&lt;code&gt;resumeTest()&lt;/code&gt;&lt;/a&gt; to debug your tests. &lt;code&gt;pauseTest&lt;/code&gt; allows you to inspect the DOM easily, but can only be used in the test code.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="896ebbfa2a930c2ebb792bc4a285cf153ed60f61" translate="yes" xml:space="preserve">
          <source>Thanks to its use of the &lt;em&gt;adapter pattern&lt;/em&gt;, Ember Data can be configured to work with many different kinds of backends. There is &lt;a href=&quot;http://emberobserver.com/categories/ember-data-adapters&quot;&gt;an entire ecosystem of adapters&lt;/a&gt; and several &lt;a href=&quot;customizing-adapters&quot;&gt;built-in adapters&lt;/a&gt; that allow your Ember app to talk to different types of servers.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b3412c92e9c7c36dbce60a4d0caa17409de5decd" translate="yes" xml:space="preserve">
          <source>Thanks to its use of the &lt;em&gt;adapter pattern&lt;/em&gt;, Ember Data can be configured to work with many different kinds of backends. There is &lt;a href=&quot;http://emberobserver.com/categories/ember-data-adapters&quot;&gt;an entire ecosystem of adapters&lt;/a&gt; that allow your Ember app to talk to different types of servers without you writing any networking code.</source>
          <target state="translated">由于使用了&lt;em&gt;适配器模式&lt;/em&gt;，因此可以将Ember Data配置为与许多不同种类的后端一起使用。有&lt;a href=&quot;http://emberobserver.com/categories/ember-data-adapters&quot;&gt;适配器的整个生态系统&lt;/a&gt;，让您的灰烬应用跟不同类型的服务器没有你编写任何网络代码。</target>
        </trans-unit>
        <trans-unit id="1a27d58e2e3d965544b4feb8e4d0ab324cedc936" translate="yes" xml:space="preserve">
          <source>That app we made is a bit plain. Do you know any CSS? Put your styles in &lt;code&gt;app/styles/app.css&lt;/code&gt;, which is automatically included in your app build.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="11b0d72b181597a438cad12584afe940c8ab6127" translate="yes" xml:space="preserve">
          <source>That being said, sometimes it is important to test your routes in a smaller scope. For example, let's say we'd like to have an alert that can be triggered from anywhere within our application. The alert function &lt;code&gt;displayAlert&lt;/code&gt; should be put into the &lt;code&gt;ApplicationRoute&lt;/code&gt; because all actions and events bubble up to it from sub-routes and controllers.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="318520d5f37197c6df1e09018c18e851802ae7ae" translate="yes" xml:space="preserve">
          <source>That being said, sometimes it is important to unit test your routes. For example, let's say we'd like to have an alert that can be triggered from anywhere within our application. The alert function &lt;code&gt;displayAlert&lt;/code&gt; should be put into the &lt;code&gt;ApplicationRoute&lt;/code&gt; because all actions and events bubble up to it from sub-routes and controllers.</source>
          <target state="translated">话虽如此，有时对单元进行单元测试很重要。例如，假设我们希望有一个警报，该警报可以从应用程序内的任何位置触发。警报功能 &lt;code&gt;displayAlert&lt;/code&gt; 应该放在 &lt;code&gt;ApplicationRoute&lt;/code&gt; 中,因为所有操作和事件都会从子路由和控制器冒泡到它。</target>
        </trans-unit>
        <trans-unit id="a36f83caf5ff2b93a1e4e5fcdc3584558ac63704" translate="yes" xml:space="preserve">
          <source>That default configuration matches the wider set of browsers that Ember.js itself supports. However, if your app does not need to support IE anymore, you can change it to:</source>
          <target state="translated">该默认配置与Ember.js本身支持的更广泛的浏览器集相匹配。不过,如果你的应用不需要再支持IE了,你可以将其改为。</target>
        </trans-unit>
        <trans-unit id="1c82a49b447f0a46a1e511a5df799dfb0834560f" translate="yes" xml:space="preserve">
          <source>That file should export a function wrapped with &lt;a href=&quot;http://emberjs.com/api/classes/Ember.Helper.html&quot;&gt;&lt;code&gt;Ember.Helper.helper()&lt;/code&gt;&lt;/a&gt;:</source>
          <target state="translated">该文件应导出一个用&lt;a href=&quot;http://emberjs.com/api/classes/Ember.Helper.html&quot;&gt; &lt;code&gt;Ember.Helper.helper()&lt;/code&gt; &lt;/a&gt;包装的函数：</target>
        </trans-unit>
        <trans-unit id="3b922bfea8e08f9290c3bf2fa6bff5f3b54ebd4c" translate="yes" xml:space="preserve">
          <source>That is Ember telling you that it has created:</source>
          <target state="translated">那是微光告诉你,它已经创造了。</target>
        </trans-unit>
        <trans-unit id="e0de9e3a4d4633aeeb18a289a56bd4805b9cfcbf" translate="yes" xml:space="preserve">
          <source>That is why Ember CLI exposes a way of configuring what browsers your app targets. It can figure out automatically what features are supported by the browsers you are targeting, and apply the minimum set of transformations possible to your code.</source>
          <target state="translated">这就是为什么Ember CLI提供了一种配置你的应用所针对的浏览器的方法。它可以自动找出你所针对的浏览器所支持的功能,并对你的代码应用尽可能少的转换集。</target>
        </trans-unit>
        <trans-unit id="9c3ec01be68e48073d9e918cf0f3b59651463160" translate="yes" xml:space="preserve">
          <source>That makes it easy to remember how to add an action to a component. It's like passing an attribute, but you use the &lt;code&gt;action&lt;/code&gt; helper to pass a function instead.</source>
          <target state="translated">这使您很容易记住如何向组件添加操作。就像传递属性一样，但是您可以使用 &lt;code&gt;action&lt;/code&gt; 助手来传递函数。</target>
        </trans-unit>
        <trans-unit id="78ba75708cf1770d1ec144b19670b70c95278a4c" translate="yes" xml:space="preserve">
          <source>That said, sometimes you may want to make behavior of helpers configurable by the developers that call them from their templates. For example, let's abandon our Americentric ways and update our &lt;code&gt;format-currency&lt;/code&gt; helper to take an optional configuration for which currency symbol to display.</source>
          <target state="translated">就是说，有时您可能希望使从模板调用助手的开发人员可配置其行为。例如，让我们放弃我们的&amp;ldquo;以美国为中心&amp;rdquo;的方式，并更新 &lt;code&gt;format-currency&lt;/code&gt; 帮助器以采用可选配置来显示货币符号。</target>
        </trans-unit>
        <trans-unit id="d7606bb113640faa278cf7a28f2eb3e24d5170f8" translate="yes" xml:space="preserve">
          <source>That state is what the &lt;code&gt;ApplicationInstance&lt;/code&gt; manages: it is responsible for creating the container that contains all application state, and disposing of it once the particular test run or FastBoot request has finished.</source>
          <target state="translated">该状态是 &lt;code&gt;ApplicationInstance&lt;/code&gt; 管理的状态：它负责创建包含所有应用程序状态的容器，并在特定测试运行或FastBoot请求完成后将其处理。</target>
        </trans-unit>
        <trans-unit id="e53c9021b9ec9d905f7edbfc8bee2fd601077a71" translate="yes" xml:space="preserve">
          <source>That way the generated URL will be deterministic and that simplifies caching mechanisms in the backend.</source>
          <target state="translated">这样生成的URL将是确定性的,这就简化了后台的缓存机制。</target>
        </trans-unit>
        <trans-unit id="e2769f35ade6a9d29a01d9c917f9298af7fa4c81" translate="yes" xml:space="preserve">
          <source>That's it for the component: we're translating the user's interactions into &lt;em&gt;state&lt;/em&gt;. Now we need to build a modifier to translate the state into the appropriate DOM method calls!</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="93ef0dd827103681fcee453b78be2ff14e1a261d" translate="yes" xml:space="preserve">
          <source>The</source>
          <target state="translated">The</target>
        </trans-unit>
        <trans-unit id="9aec71d1c4ae8c3b94a1bb90bf2dfcfdbb43f8ca" translate="yes" xml:space="preserve">
          <source>The &quot;new message&quot; input.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="720842f69df82f5d3ebbf07455c593a84d9581a1" translate="yes" xml:space="preserve">
          <source>The &quot;off&quot; branch of feature-flagged code is always stripped from production builds, so you MUST use the build-time environment variable to activate a flag if testing production.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cca06a831613fdc449a54b01a0421b8fde878db7" translate="yes" xml:space="preserve">
          <source>The &quot;this&quot; binding for the callback</source>
          <target state="translated">回调的 &quot;this &quot;绑定</target>
        </trans-unit>
        <trans-unit id="ccc5b4bf89b158d0eb41c14adb3ba628e5e78e8e" translate="yes" xml:space="preserve">
          <source>The 'Whoops' error will be thrown on the next turn of the event loop and you can watch for it in your console. You can also handle it using a rejection handler given to &lt;code&gt;.then&lt;/code&gt; or &lt;code&gt;.catch&lt;/code&gt; on the returned promise.</source>
          <target state="translated">下一轮事件循环将引发&amp;ldquo; Whoops&amp;rdquo;错误，您可以在控制台中进行观察。您也可以使用给予拒绝处理程序处理它 &lt;code&gt;.then&lt;/code&gt; 或 &lt;code&gt;.catch&lt;/code&gt; 对返回的承诺。</target>
        </trans-unit>
        <trans-unit id="12f898edea55f5f355fe5f02c909ee411cb027ea" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;http://emberjs.com/api/classes/Ember.Router.html#method_map&quot;&gt;&lt;code&gt;map()&lt;/code&gt;&lt;/a&gt; method of your Ember application's router can be invoked to define URL mappings. When calling &lt;code&gt;map()&lt;/code&gt;, you should pass a function that will be invoked with the value &lt;code&gt;this&lt;/code&gt; set to an object which you can use to create routes.</source>
          <target state="translated">可以调用Ember应用程序路由器的&lt;a href=&quot;http://emberjs.com/api/classes/Ember.Router.html#method_map&quot;&gt; &lt;code&gt;map()&lt;/code&gt; &lt;/a&gt;方法来定义URL映射。当调用 &lt;code&gt;map()&lt;/code&gt; ，你应该通过将与该值调用的函数 &lt;code&gt;this&lt;/code&gt; 设置为一个对象，你可以用它来创建路线。</target>
        </trans-unit>
        <trans-unit id="23489b054c9d1e661085fd7ade8acb2475375094" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;http://emberjs.com/api/classes/Ember.Templates.helpers.html#method_component&quot;&gt;&lt;code&gt;{{component}}&lt;/code&gt;&lt;/a&gt; helper can be used to defer the selection of a component to run time. The &lt;code&gt;{{my-component}}&lt;/code&gt; syntax always renders the same component, while using the &lt;code&gt;{{component}}&lt;/code&gt; helper allows choosing a component to render on the fly. This is useful in cases where you want to interact with different external libraries depending on the data. Using the &lt;code&gt;{{component}}&lt;/code&gt; helper would allow you to keep different logic well separated.</source>
          <target state="translated">的&lt;a href=&quot;http://emberjs.com/api/classes/Ember.Templates.helpers.html#method_component&quot;&gt; &lt;code&gt;{{component}}&lt;/code&gt; &lt;/a&gt;辅助可被用于推迟到运行时组件的选择。该 &lt;code&gt;{{my-component}}&lt;/code&gt; 语法总是呈现相同的部件，在使用 &lt;code&gt;{{component}}&lt;/code&gt; 帮手允许选择一个组件以使对飞。如果要根据数据与不同的外部库进行交互，这很有用。使用 &lt;code&gt;{{component}}&lt;/code&gt; 帮助器可以使不同的逻辑保持良好的分离。</target>
        </trans-unit>
        <trans-unit id="80ffe12423c4f4418b92c52ce25e13ca8840255f" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;http://emberjs.com/api/classes/Ember.Templates.helpers.html#method_debugger&quot;&gt;&lt;code&gt;{{debugger}}&lt;/code&gt;&lt;/a&gt; helper provides a handlebars equivalent to JavaScript's &lt;code&gt;debugger&lt;/code&gt; keyword. It will halt execution inside the debugger helper and give you the ability to inspect the current rendering context:</source>
          <target state="translated">该&lt;a href=&quot;http://emberjs.com/api/classes/Ember.Templates.helpers.html#method_debugger&quot;&gt; &lt;code&gt;{{debugger}}&lt;/code&gt; &lt;/a&gt;助手提供了等同于JavaScript的一个车把 &lt;code&gt;debugger&lt;/code&gt; 关键字。它将暂停调试器帮助器内的执行，并让您能够检查当前渲染上下文：</target>
        </trans-unit>
        <trans-unit id="8c8f61b48bfab920e95655c42840396a2f3f8014" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;http://emberjs.com/api/classes/Ember.Templates.helpers.html#method_each&quot;&gt;&lt;code&gt;{{#each}}&lt;/code&gt;&lt;/a&gt; helper can have a corresponding &lt;code&gt;{{else}}&lt;/code&gt;. The contents of this block will render if the array passed to &lt;code&gt;{{#each}}&lt;/code&gt; is empty:</source>
          <target state="translated">该&lt;a href=&quot;http://emberjs.com/api/classes/Ember.Templates.helpers.html#method_each&quot;&gt; &lt;code&gt;{{#each}}&lt;/code&gt; &lt;/a&gt;帮手可以有一个相应的 &lt;code&gt;{{else}}&lt;/code&gt; 。如果传递给 &lt;code&gt;{{#each}}&lt;/code&gt; 的数组为空，则此块的内容将呈现：</target>
        </trans-unit>
        <trans-unit id="6a5dfe3aacaf09268ef43166eeb9e8edcded68ab" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;http://emberjs.com/api/classes/Ember.Templates.helpers.html#method_each-in&quot;&gt;&lt;code&gt;{{#each-in}}&lt;/code&gt;&lt;/a&gt; helper can have a matching &lt;code&gt;{{else}}&lt;/code&gt;. The contents of this block will render if the object is empty, null, or undefined:</source>
          <target state="translated">该&lt;a href=&quot;http://emberjs.com/api/classes/Ember.Templates.helpers.html#method_each-in&quot;&gt; &lt;code&gt;{{#each-in}}&lt;/code&gt; &lt;/a&gt;帮手可以有一个匹配 &lt;code&gt;{{else}}&lt;/code&gt; 。如果对象为空，null或未定义，则此块的内容将呈现：</target>
        </trans-unit>
        <trans-unit id="b327dbd565eb9fdd986c4b054241ad5e30065698" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;http://emberjs.com/api/classes/Ember.Templates.helpers.html#method_get&quot;&gt;&lt;code&gt;{{get}}&lt;/code&gt;&lt;/a&gt; helper makes it easy to dynamically send the value of a variable to another helper or component. This can be useful if you want to output one of several values based on the result of a computed property.</source>
          <target state="translated">该&lt;a href=&quot;http://emberjs.com/api/classes/Ember.Templates.helpers.html#method_get&quot;&gt; &lt;code&gt;{{get}}&lt;/code&gt; &lt;/a&gt;帮手让您轻松变量的值动态地发送到另一个助手或组件。如果要基于已计算属性的结果输出多个值之一，这将很有用。</target>
        </trans-unit>
        <trans-unit id="61302d7882e1a4a6e553fe68b02feeeae75416e4" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;http://emberjs.com/api/classes/Ember.Templates.helpers.html#method_input&quot;&gt;&lt;code&gt;{{input}}&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;http://emberjs.com/api/classes/Ember.Templates.helpers.html#method_textarea&quot;&gt;&lt;code&gt;{{textarea}}&lt;/code&gt;&lt;/a&gt; helpers in Ember.js are the easiest way to create common form controls. Using these helpers, you can create form controls that are almost identical to the native HTML &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; or &lt;code&gt;&amp;lt;textarea&amp;gt;&lt;/code&gt; elements, but are aware of Ember's two-way bindings and can automatically update.</source>
          <target state="translated">该&lt;a href=&quot;http://emberjs.com/api/classes/Ember.Templates.helpers.html#method_input&quot;&gt; &lt;code&gt;{{input}}&lt;/code&gt; &lt;/a&gt;和&lt;a href=&quot;http://emberjs.com/api/classes/Ember.Templates.helpers.html#method_textarea&quot;&gt; &lt;code&gt;{{textarea}}&lt;/code&gt; &lt;/a&gt;在Ember.js助手是创建常见窗体控件的最简单的方法。使用这些帮助器，您可以创建与本地HTML &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; 或 &lt;code&gt;&amp;lt;textarea&amp;gt;&lt;/code&gt; 元素几乎相同的表单控件，但是知道Ember的双向绑定并且可以自动更新。</target>
        </trans-unit>
        <trans-unit id="b85d9f0441c7c29d7da9b855a389e22f68bcf461" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;http://emberjs.com/api/classes/Ember.Templates.helpers.html#method_log&quot;&gt;&lt;code&gt;{{log}}&lt;/code&gt;&lt;/a&gt; helper makes it easy to output variables or expressions in the current rendering context into your browser's console:</source>
          <target state="translated">使用&lt;a href=&quot;http://emberjs.com/api/classes/Ember.Templates.helpers.html#method_log&quot;&gt; &lt;code&gt;{{log}}&lt;/code&gt; &lt;/a&gt;帮助程序可以轻松地将当前呈现上下文中的变量或表达式输出到浏览器的控制台中：</target>
        </trans-unit>
        <trans-unit id="17f528362a0405c2911a3e6d031edc5b960dfd08" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;http://emberjs.com/api/classes/Ember.Test.html#method_fillIn&quot;&gt;&lt;code&gt;fillIn&lt;/code&gt;&lt;/a&gt; helper &quot;fills in&quot; the given text into an input field matching the given selector.</source>
          <target state="translated">该&lt;a href=&quot;http://emberjs.com/api/classes/Ember.Test.html#method_fillIn&quot;&gt; &lt;code&gt;fillIn&lt;/code&gt; &lt;/a&gt;帮手&amp;ldquo;填补&amp;rdquo;给定的文本到给定的选择相匹配的输入字段。</target>
        </trans-unit>
        <trans-unit id="fadd4ef675168e49d87ffb530f6637c11e100846" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;http://emberjs.com/api/classes/Ember.Test.html#method_keyEvent&quot;&gt;&lt;code&gt;keyEvent&lt;/code&gt;&lt;/a&gt; helper sends a key stroke event to the UI, simulating the user typing a key.</source>
          <target state="translated">该&lt;a href=&quot;http://emberjs.com/api/classes/Ember.Test.html#method_keyEvent&quot;&gt; &lt;code&gt;keyEvent&lt;/code&gt; &lt;/a&gt;辅助发送键击事件的UI，模拟用户输入一个密钥。</target>
        </trans-unit>
        <trans-unit id="0aef6d62598e457e26c06a939a5185bf766acd4c" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;http://emberjs.com/api/data/classes/DS.JSONAPIAdapter.html&quot;&gt;DS.JSONAPIAdapter&lt;/a&gt; has a handful of hooks that are commonly used to extend it to work with non-standard backends.</source>
          <target state="translated">该&lt;a href=&quot;http://emberjs.com/api/data/classes/DS.JSONAPIAdapter.html&quot;&gt;DS.JSONAPIAdapter&lt;/a&gt;有常用于它与非标准后端延伸到工作挂钩了一把。</target>
        </trans-unit>
        <trans-unit id="fa3846a6cb3e359333026cfaf3e060eb1aca1350" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;https://api.emberjs.com/ember-data/release/classes/JSONAPIAdapter&quot;&gt;JSONAPIAdapter&lt;/a&gt; has a handful of hooks that are commonly used to extend it to work with non-standard backends.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e539506c12893b869f4ccb263c9cf65cc67e2d3d" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;https://api.emberjs.com/ember/release/classes/Ember.Templates.helpers/methods#component&quot;&gt;&lt;code&gt;{{component}}&lt;/code&gt;&lt;/a&gt; helper can be used to defer the selection of a component to run time. The &lt;code&gt;&amp;lt;MyComponent /&amp;gt;&lt;/code&gt; syntax always renders the same component, while using the &lt;code&gt;{{component}}&lt;/code&gt; helper allows choosing a component to render on the fly. This is useful in cases where you want to interact with different external libraries depending on the data. Using the &lt;code&gt;{{component}}&lt;/code&gt; helper would allow you to keep different logic well separated.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b6d00c088d2bffcebcfbbca5d2ccac683a3d8877" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;https://api.emberjs.com/ember/release/classes/Ember.Templates.helpers/methods#each&quot;&gt;&lt;code&gt;{{#each}}&lt;/code&gt;&lt;/a&gt; helper can also have a corresponding &lt;code&gt;{{else}}&lt;/code&gt;. The contents of this block will render if the array passed to &lt;code&gt;{{#each}}&lt;/code&gt; is empty:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="97b388db0523c638573d12d31d2a4f80abe3d2d6" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;https://api.emberjs.com/ember/release/classes/Ember.Templates.helpers/methods#each-in&quot;&gt;&lt;code&gt;{{#each-in}}&lt;/code&gt;&lt;/a&gt; helper can have a matching &lt;code&gt;{{else}}&lt;/code&gt;. The contents of this block will render if the object is empty, null, or undefined:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ff90f7755bb2a497299044ed47c55e08f5ae74d5" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;https://api.emberjs.com/ember/release/classes/Ember.Templates.helpers/methods#get&quot;&gt;&lt;code&gt;{{get}}&lt;/code&gt;&lt;/a&gt; helper makes it easy to dynamically send the value of a variable to another helper or component. This can be useful if you want to output one of several values based on the result of a getter.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7e475fb0b6305f5c59e599d4afd64bc72447dc29" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;https://api.emberjs.com/ember/release/classes/EmberRouter/methods#map&quot;&gt;&lt;code&gt;map()&lt;/code&gt;&lt;/a&gt; method of your Ember application's router can be invoked to define URL mappings. When calling &lt;code&gt;map()&lt;/code&gt;, you should pass a function that will be invoked with the value &lt;code&gt;this&lt;/code&gt; set to an object which you can use to create routes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="484456215b5f899d8ed5e829d7551272461d51b9" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;https://developers.google.com/maps/documentation/javascript/tutorial&quot;&gt;Google Maps API&lt;/a&gt; requires us to reference its library from a remote script. In this case we'll provide this script to our Ember app via an Addon called &lt;code&gt;ember-simple-google-maps&lt;/code&gt;.</source>
          <target state="translated">在&lt;a href=&quot;https://developers.google.com/maps/documentation/javascript/tutorial&quot;&gt;谷歌地图API&lt;/a&gt;需要我们从远程脚本中引用的库。在这种情况下，我们将通过名为 &lt;code&gt;ember-simple-google-maps&lt;/code&gt; 的插件将此脚本提供给Ember应用程序。</target>
        </trans-unit>
        <trans-unit id="abde774e4aee4358f084878a18b8ccc5535273fa" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;https://github.com/ember-codemods/ember-native-class-codemod&quot;&gt;&lt;code&gt;ember-native-class-codemod&lt;/code&gt;&lt;/a&gt; will help you convert your existing code to Native Classes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b47055d729e108b5891bf286a66017f614a6dfd8" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;https://github.com/emberjs/ember-inspector&quot;&gt;Ember Inspector&lt;/a&gt; is a browser extension that makes it easy to understand and debug your Ember.js application. To learn more, check out the &lt;a href=&quot;https://guides.emberjs.com/ember-inspector/&quot;&gt;dedicated guide&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="721d0aca3cae4958efdc2c786984eea8d65f5f0d" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;https://guides.emberjs.com/addons-and-dependencies/managing-dependencies/#toc_other-assets&quot;&gt;&lt;code&gt;vendor&lt;/code&gt; directory&lt;/a&gt; in Ember is a special directory where you can include content that gets compiled into your application. When Ember CLI builds our app from our source code, it copies &lt;code&gt;ember-tutorial.css&lt;/code&gt; into a file called &lt;code&gt;vendor.css&lt;/code&gt;.</source>
          <target state="translated">Ember中的&lt;a href=&quot;https://guides.emberjs.com/addons-and-dependencies/managing-dependencies/#toc_other-assets&quot;&gt; &lt;code&gt;vendor&lt;/code&gt; 目录&lt;/a&gt;是一个特殊目录，您可以在其中包含编译到应用程序中的内容。当Ember CLI从源代码构建我们的应用程序时，它将 &lt;code&gt;ember-tutorial.css&lt;/code&gt; 复制到一个名为 &lt;code&gt;vendor.css&lt;/code&gt; 的文件中。</target>
        </trans-unit>
        <trans-unit id="f3296c43c92a794424bfcbe162e716bebeab8f9f" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;https://guides.emberjs.com/object-model/&quot;&gt;Object Model&lt;/a&gt; section of the Guides describes how to write computed properties, observers, and bindings without prototype extensions. Below you can learn about how to convert existing code to the format now encouraged.</source>
          <target state="translated">《指南》的&amp;ldquo; &lt;a href=&quot;https://guides.emberjs.com/object-model/&quot;&gt;对象模型&amp;rdquo;&lt;/a&gt;部分描述了如何编写没有原型扩展的计算属性，观察者和绑定。您可以在下面了解如何将现有代码转换为现在鼓励的格式。</target>
        </trans-unit>
        <trans-unit id="c1b590693203d5bd4714134ee9bffd8ada6da3b8" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&amp;lt;LinkTo /&amp;gt;&lt;/code&gt; Component</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="347be04eec0510add3357dc1d233d2f6089d1c4f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&amp;lt;LinkTo /&amp;gt;&lt;/code&gt; component supports specifying query params using the &lt;code&gt;@query&lt;/code&gt; argument, along with the &lt;code&gt;{{hash}}&lt;/code&gt; helper:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="687445d2263e6d351636878f5acc0b61994904dd" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&amp;lt;LinkTo /&amp;gt;&lt;/code&gt; component takes into account query parameters when determining its &quot;active&quot; state, and will set the class appropriately. The active state is determined by calculating whether the query params end up the same after clicking a link. You don't have to supply all of the current, active query params for this to be true.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4a313e65540f5651b2749a64d99e0b7dd0f4677e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&amp;lt;LinkTo /&amp;gt;&lt;/code&gt; component will also add an &lt;code&gt;active&lt;/code&gt; class to the link that points to the currently active route.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dd9594d821d9c211c549857aa931470d2546f2bb" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;--filter&lt;/code&gt; option is more versatile. You can provide a phrase to match against the modules and test descriptions. A test description is what appears in &lt;code&gt;test()&lt;/code&gt; in QUnit, or &lt;code&gt;it()&lt;/code&gt; in Mocha.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="01eacb2dc451f3841a67b62498f8892723ba638d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;--module&lt;/code&gt; option allows you to select a &lt;strong&gt;module&lt;/strong&gt;&amp;mdash;a group of tests that you specified in &lt;code&gt;module()&lt;/code&gt; in QUnit, or &lt;code&gt;describe()&lt;/code&gt; in Mocha.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="359579dfab0ea7c705e6923622a9025aba3dd10a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;...attributes&lt;/code&gt; syntax determines where the attributes from a tag should appear in the component's template. Any number of attributes can be specified on the avatar component now, and they will all end up on the element that has &lt;code&gt;...attributes&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7e78ddd2c47b691451039e46345569728779e14b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;@action&lt;/code&gt; Decorator</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ec58632f6fb0c70a2661a8dce020b12cc0c7068f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;@action&lt;/code&gt; decorator</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="68e0b4da4e97bb8a4ecbf77fefad05e5c85f569b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;@model&lt;/code&gt; argument is merely a special case for the more general &lt;code&gt;@models&lt;/code&gt; argument. Therefore, it is an error to pass &lt;em&gt;both&lt;/em&gt; arguments at the same time.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="37581d1dd710f3e6c4f8c88b9087421a235020be" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;@query&lt;/code&gt; argument, along with the &lt;code&gt;{{hash}}&lt;/code&gt; helper, can be used to set query params on a link:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="afc25db1ba24f7959dcc95ab020bb73280d21a8e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;@route&lt;/code&gt; argument is the name of the route to link to, and the &lt;code&gt;@model&lt;/code&gt; argument is a model object to fill in the &lt;a href=&quot;https://guides.emberjs.com/routing/defining-your-routes/#toc_dynamic-segments&quot;&gt;dynamic segment&lt;/a&gt; for the route.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3016cd065a1ea33674454f4b4409c5a76ecee77d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ApplicationInstance&lt;/code&gt; encapsulates all of the stateful aspects of a running &lt;code&gt;Application&lt;/code&gt;.</source>
          <target state="translated">该 &lt;code&gt;ApplicationInstance&lt;/code&gt; 封装了所有的运行的状态方面 &lt;code&gt;Application&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="f930fd3f23af023ef9f744a703e14d94dcebcaeb" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;BlogPost&lt;/code&gt; model would have properties like:</source>
          <target state="translated">该 &lt;code&gt;BlogPost&lt;/code&gt; 的模型应该像属性：</target>
        </trans-unit>
        <trans-unit id="ea79958a2feaa365d1dd1e72a888a59ebe1b581f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;BooleanTransform&lt;/code&gt; class is used to serialize and deserialize boolean attributes on Ember Data record objects. This transform is used when &lt;code&gt;boolean&lt;/code&gt; is passed as the type parameter to the &lt;a href=&quot;https://api.emberjs.com/ember-data/release/functions/@ember-data%2Fmodel/attr&quot;&gt;attr&lt;/a&gt; function.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fae849844f7c3ca3ad9b933a44e600ae65479143" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;BroadwayStar&lt;/code&gt; class contains three methods: &lt;code&gt;say()&lt;/code&gt;, &lt;code&gt;sing()&lt;/code&gt;, and &lt;code&gt;dance()&lt;/code&gt;.</source>
          <target state="translated">该 &lt;code&gt;BroadwayStar&lt;/code&gt; 类包含三个方法： &lt;code&gt;say()&lt;/code&gt; ， &lt;code&gt;sing()&lt;/code&gt; ，和 &lt;code&gt;dance()&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="d63f1b0f445b29ddfc61aeec73fb12eb211d5567" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ContainerDebugAdapter&lt;/code&gt; helps the container and resolver interface with tools that debug Ember such as the &lt;a href=&quot;https://github.com/emberjs/ember-inspector&quot;&gt;Ember Inspector&lt;/a&gt; for Chrome and Firefox.</source>
          <target state="translated">该 &lt;code&gt;ContainerDebugAdapter&lt;/code&gt; 有助于工具，调试灰烬，如容器和变压器接口&lt;a href=&quot;https://github.com/emberjs/ember-inspector&quot;&gt;灰烬督察&lt;/a&gt; Chrome和Firefox浏览器。</target>
        </trans-unit>
        <trans-unit id="2b819ff65f7652ad8943fa82a80ca24f474b2a1d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;DS.BooleanTransform&lt;/code&gt; class is used to serialize and deserialize boolean attributes on Ember Data record objects. This transform is used when &lt;code&gt;boolean&lt;/code&gt; is passed as the type parameter to the &lt;a href=&quot;https://emberjs.com/api/ember-data/data#method_attr&quot;&gt;DS.attr&lt;/a&gt; function.</source>
          <target state="translated">该 &lt;code&gt;DS.BooleanTransform&lt;/code&gt; 类用于序列化和反序列化的灰烬数据记录对象的布尔属性。将 &lt;code&gt;boolean&lt;/code&gt; 作为类型参数传递给&lt;a href=&quot;https://emberjs.com/api/ember-data/data#method_attr&quot;&gt;DS.attr&lt;/a&gt;函数时，将使用此转换。</target>
        </trans-unit>
        <trans-unit id="bd3e9a0eed710efe4a88384528b918c339217700" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;DS.DateTransform&lt;/code&gt; class is used to serialize and deserialize date attributes on Ember Data record objects. This transform is used when &lt;code&gt;date&lt;/code&gt; is passed as the type parameter to the &lt;a href=&quot;https://emberjs.com/api/ember-data/data#method_attr&quot;&gt;DS.attr&lt;/a&gt; function. It uses the &lt;a href=&quot;https://en.wikipedia.org/wiki/ISO_8601&quot;&gt;&lt;code&gt;ISO 8601&lt;/code&gt;&lt;/a&gt; standard.</source>
          <target state="translated">该 &lt;code&gt;DS.DateTransform&lt;/code&gt; 类用于序列化和灰烬数据记录对象的反序列化日期属性。将 &lt;code&gt;date&lt;/code&gt; 作为类型参数传递给&lt;a href=&quot;https://emberjs.com/api/ember-data/data#method_attr&quot;&gt;DS.attr&lt;/a&gt;函数时，将使用此转换。它使用&lt;a href=&quot;https://en.wikipedia.org/wiki/ISO_8601&quot;&gt; &lt;code&gt;ISO 8601&lt;/code&gt; &lt;/a&gt;标准。</target>
        </trans-unit>
        <trans-unit id="2982cc3dc82ca2b47f88e8fdbe38cb683d0cbfa8" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;DS.Model&lt;/code&gt; states are themselves stateless. What that means is that, the hierarchical states that each of &lt;em&gt;those&lt;/em&gt; points to is a shared data structure. For performance reasons, instead of each record getting its own copy of the hierarchy of states, each record points to this global, immutable shared instance. How does a state know which record it should be acting on? We pass the record instance into the state's event handlers as the first argument.</source>
          <target state="translated">该 &lt;code&gt;DS.Model&lt;/code&gt; 状态本身无状态的。这意味着，每个&lt;em&gt;这些&lt;/em&gt;指向的层次结构状态都是共享数据结构。出于性能原因，每个记录都指向该全局的，不变的共享实例，而不是每个记录都获得自己的状态层次结构副本。一个州如何知道它应该对哪个记录进行操作？我们将记录实例作为第一个参数传递到状态的事件处理程序中。</target>
        </trans-unit>
        <trans-unit id="f0eb91368a9212981a5c1132e3c4cf949c7a59b0" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;DS.NumberTransform&lt;/code&gt; class is used to serialize and deserialize numeric attributes on Ember Data record objects. This transform is used when &lt;code&gt;number&lt;/code&gt; is passed as the type parameter to the &lt;a href=&quot;https://emberjs.com/api/ember-data/data#method_attr&quot;&gt;DS.attr&lt;/a&gt; function.</source>
          <target state="translated">该 &lt;code&gt;DS.NumberTransform&lt;/code&gt; 类用于序列化和反序列化的灰烬数据记录对象的数值属性。将 &lt;code&gt;number&lt;/code&gt; 作为类型参数传递给&lt;a href=&quot;https://emberjs.com/api/ember-data/data#method_attr&quot;&gt;DS.attr&lt;/a&gt;函数时，将使用此转换。</target>
        </trans-unit>
        <trans-unit id="57ede3918d3480e3b06e6aa03ddac19ce5a83194" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;DS.StringTransform&lt;/code&gt; class is used to serialize and deserialize string attributes on Ember Data record objects. This transform is used when &lt;code&gt;string&lt;/code&gt; is passed as the type parameter to the &lt;a href=&quot;https://emberjs.com/api/ember-data/data#method_attr&quot;&gt;DS.attr&lt;/a&gt; function.</source>
          <target state="translated">该 &lt;code&gt;DS.StringTransform&lt;/code&gt; 类用于序列化和灰烬数据记录对象的反序列化字符串属性。将 &lt;code&gt;string&lt;/code&gt; 作为类型参数传递给&lt;a href=&quot;https://emberjs.com/api/ember-data/data#method_attr&quot;&gt;DS.attr&lt;/a&gt;函数时，将使用此转换。</target>
        </trans-unit>
        <trans-unit id="4c7d84bb5ae36b5bebe679b64273fe856da64324" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;DS.Transform&lt;/code&gt; class is used to serialize and deserialize model attributes when they are saved or loaded from an adapter. Subclassing &lt;code&gt;DS.Transform&lt;/code&gt; is useful for creating custom attributes. All subclasses of &lt;code&gt;DS.Transform&lt;/code&gt; must implement a &lt;code&gt;serialize&lt;/code&gt; and a &lt;code&gt;deserialize&lt;/code&gt; method.</source>
          <target state="translated">从适配器保存或加载模型属性时， &lt;code&gt;DS.Transform&lt;/code&gt; 类用于对模型属性进行序列化和反序列化。子类化 &lt;code&gt;DS.Transform&lt;/code&gt; 对于创建自定义属性很有用。 &lt;code&gt;DS.Transform&lt;/code&gt; 的所有子类都必须实现 &lt;code&gt;serialize&lt;/code&gt; 和 &lt;code&gt;deserialize&lt;/code&gt; 序列化方法。</target>
        </trans-unit>
        <trans-unit id="ce0eb8c05c343a64394f217c251dbdb597172f5e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;DataAdapter&lt;/code&gt; helps a data persistence library interface with tools that debug Ember such as the &lt;a href=&quot;https://github.com/emberjs/ember-inspector&quot;&gt;Ember Inspector&lt;/a&gt; for Chrome and Firefox.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e00a79faab114e9901c4f0599964d16729665318" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;DataAdapter&lt;/code&gt; helps a data persistence library interface with tools that debug Ember such as the &lt;a href=&quot;https://github.com/tildeio/ember-extension&quot;&gt;Ember Extension&lt;/a&gt; for Chrome and Firefox.</source>
          <target state="translated">该 &lt;code&gt;DataAdapter&lt;/code&gt; 的帮助数据持久性与工具，调试灰烬，如库接口&lt;a href=&quot;https://github.com/tildeio/ember-extension&quot;&gt;灰烬扩展&lt;/a&gt;的Chrome和Firefox。</target>
        </trans-unit>
        <trans-unit id="41477828cb10d4407ff68edf944f4673b8b65cc4" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;DateTransform&lt;/code&gt; class is used to serialize and deserialize date attributes on Ember Data record objects. This transform is used when &lt;code&gt;date&lt;/code&gt; is passed as the type parameter to the &lt;a href=&quot;https://api.emberjs.com/ember-data/release/functions/@ember-data%2Fmodel/attr&quot;&gt;attr&lt;/a&gt; function. It uses the &lt;a href=&quot;https://en.wikipedia.org/wiki/ISO_8601&quot;&gt;&lt;code&gt;ISO 8601&lt;/code&gt;&lt;/a&gt; standard.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="244c350309c03449bf979421f09fb8c35aecdbe0" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ENV&lt;/code&gt; object is defined at build time, but you can access the &lt;code&gt;ENV&lt;/code&gt; object in application code via import from &lt;code&gt;your-application-name/config/environment&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="319307645bea1fa807d738e83c0a90cd1cf5ef96" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Ember.EventDispatcher&lt;/code&gt; responsible for delegating events to this application's views.</source>
          <target state="translated">该 &lt;code&gt;Ember.EventDispatcher&lt;/code&gt; 负责事件委托给该应用程序的意见。</target>
        </trans-unit>
        <trans-unit id="5a1153767edf9a9bc5406d38e28481d0c34bda34" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Ember.Mixin&lt;/code&gt; class allows you to create mixins, whose properties can be added to other classes. For instance,</source>
          <target state="translated">该 &lt;code&gt;Ember.Mixin&lt;/code&gt; 类允许你创建的混入，其属性可以被添加到其他类。例如，</target>
        </trans-unit>
        <trans-unit id="6a4036df61adabd029b6eba87bb294575bc9d7bb" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Ember.Route&lt;/code&gt; class is used to define individual routes. Refer to the &lt;a href=&quot;https://emberjs.com/guides/routing/&quot;&gt;routing guide&lt;/a&gt; for documentation.</source>
          <target state="translated">该 &lt;code&gt;Ember.Route&lt;/code&gt; 类用于定义个别路线。请参阅&lt;a href=&quot;https://emberjs.com/guides/routing/&quot;&gt;路由指南&lt;/a&gt;以获取文档。</target>
        </trans-unit>
        <trans-unit id="885e6e3f5749d0e1ec5e434cb9dfa2078fb80a8d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Ember.Router&lt;/code&gt; class manages the application state and URLs. Refer to the &lt;a href=&quot;https://emberjs.com/guides/routing/&quot;&gt;routing guide&lt;/a&gt; for documentation.</source>
          <target state="translated">该 &lt;code&gt;Ember.Router&lt;/code&gt; 类管理应用程序状态和URL。请参阅&lt;a href=&quot;https://emberjs.com/guides/routing/&quot;&gt;路由指南&lt;/a&gt;以获取文档。</target>
        </trans-unit>
        <trans-unit id="fc3fc88704387afa16f9189be9903ddb6b3dedbb" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Ember.run&lt;/code&gt; method can be used to create a run loop. In this example, &lt;code&gt;Ember.run&lt;/code&gt; is used to handle an online event (browser gains internet access) and run some Ember code.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="211a8a0ab63aee094d2b679406429c9861efd416" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Ember.run&lt;/code&gt; method can be used to create a run loop. In this example, jQuery and &lt;code&gt;Ember.run&lt;/code&gt; are used to handle a click event and run some Ember code.</source>
          <target state="translated">该 &lt;code&gt;Ember.run&lt;/code&gt; 方法可用于创建一个运行循环。在此示例中，jQuery和 &lt;code&gt;Ember.run&lt;/code&gt; 用于处理click事件并运行一些Ember代码。</target>
        </trans-unit>
        <trans-unit id="bd4497b1227e625d2656dcafaf6cfe898268e734" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;EmberRouter&lt;/code&gt; class manages the application state and URLs. Refer to the &lt;a href=&quot;https://guides.emberjs.com/release/routing/&quot;&gt;routing guide&lt;/a&gt; for documentation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3c7c53858dc783a25f5941955654a26b7b31a8c4" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Engine&lt;/code&gt; class contains core functionality for both applications and engines.</source>
          <target state="translated">该 &lt;code&gt;Engine&lt;/code&gt; 类包含应用程序和引擎核心功能。</target>
        </trans-unit>
        <trans-unit id="14638c0630a0a3cff87817f36c2554b1c8d6490b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;EngineInstance&lt;/code&gt; encapsulates all of the stateful aspects of a running &lt;code&gt;Engine&lt;/code&gt;.</source>
          <target state="translated">该 &lt;code&gt;EngineInstance&lt;/code&gt; 封装了所有的运行的状态方面 &lt;code&gt;Engine&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="ef790b8517960a1d3695e93af0bd1b8f3839440a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;JSONAPIAdapter&lt;/code&gt; is smart enough to determine the URLs it communicates with based on the name of the model. For example, if you ask for a &lt;code&gt;Post&lt;/code&gt; by ID:</source>
          <target state="translated">该 &lt;code&gt;JSONAPIAdapter&lt;/code&gt; 是足够聪明，以确定它与基于模型的名称通信的URL。例如，如果您要求按ID &lt;code&gt;Post&lt;/code&gt; ：</target>
        </trans-unit>
        <trans-unit id="c950fbe2c97da63e2b034eaca1b0c609b4171279" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;JSONAPIAdapter&lt;/code&gt; is the default adapter used by Ember Data. It is responsible for transforming the store's requests into HTTP requests that follow the &lt;a href=&quot;http://jsonapi.org/format/&quot;&gt;JSON API&lt;/a&gt; format.</source>
          <target state="translated">该 &lt;code&gt;JSONAPIAdapter&lt;/code&gt; 是灰烬的数据使用默认的适配器。它负责将商店的请求转换为遵循&lt;a href=&quot;http://jsonapi.org/format/&quot;&gt;JSON API&lt;/a&gt;格式的HTTP请求。</target>
        </trans-unit>
        <trans-unit id="34c3733779dc0df0421669354af118f5e875520e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;JSONAPISerializer&lt;/code&gt; expects the backend to return a JSON API Document that follows the JSON API specification and the conventions of the examples found on &lt;a href=&quot;http://jsonapi.org/format/&quot;&gt;http://jsonapi.org/format&lt;/a&gt;. This means all type names should be pluralized and attribute and relationship names should be dash-cased. For example, if you request a record from &lt;code&gt;/people/123&lt;/code&gt;, the response should look like this:</source>
          <target state="translated">所述 &lt;code&gt;JSONAPISerializer&lt;/code&gt; 预计后端返回下面的JSON API说明书和的上发现的实施例中的约定的JSON API文献&lt;a href=&quot;http://jsonapi.org/format/&quot;&gt;http://jsonapi.org/format&lt;/a&gt;。这意味着所有类型名称都应该是复数形式，属性和关系名称应该用短划线表示。例如，如果您从 &lt;code&gt;/people/123&lt;/code&gt; 请求记录，则响应应如下所示：</target>
        </trans-unit>
        <trans-unit id="167dca6fcf30ad4dd3f48bce7dfddbeff3a42de4" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;JSONAPISerializer&lt;/code&gt; expects the backend to return a JSON:API Document that follows the JSON:API specification and the conventions of the examples found in the &lt;a href=&quot;http://jsonapi.org/format/&quot;&gt;JSON:API spec&lt;/a&gt;. This means all type names should be pluralized and attribute and relationship names should be dash-cased. For example, if you request a record from &lt;code&gt;/people/123&lt;/code&gt;, the response should look like this:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a163a2de99844b44ded1af52c454ec8cb95bad1f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;JSONAPISerializer&lt;/code&gt; is built on top of the &lt;code&gt;JSONSerializer&lt;/code&gt; so they share many of the same hooks for customizing the behavior of the serialization process. Be sure to check out the &lt;a href=&quot;http://emberjs.com/api/data/classes/DS.JSONSerializer.html&quot;&gt;API docs&lt;/a&gt; for a full list of methods and properties.</source>
          <target state="translated">该 &lt;code&gt;JSONAPISerializer&lt;/code&gt; 是建立在之上 &lt;code&gt;JSONSerializer&lt;/code&gt; ，使他们共享许多相同的钩用于自定义序列化进程的行为。请务必查看&lt;a href=&quot;http://emberjs.com/api/data/classes/DS.JSONSerializer.html&quot;&gt;API文档&lt;/a&gt;，以获取方法和属性的完整列表。</target>
        </trans-unit>
        <trans-unit id="c9d170221457f84b4fd18fe32d97e55372499905" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;JSONAPISerializer&lt;/code&gt; is built on top of the &lt;code&gt;JSONSerializer&lt;/code&gt; so they share many of the same hooks for customizing the behavior of the serialization process. Be sure to check out the &lt;a href=&quot;https://api.emberjs.com/ember-data/release/classes/JSONSerializer&quot;&gt;API docs&lt;/a&gt; for a full list of methods and properties.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2372e29f3591a6e06a86749f11f23bc152d06ae0" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;JSONSerializer&lt;/code&gt; normalization process follows these steps:</source>
          <target state="translated">所述 &lt;code&gt;JSONSerializer&lt;/code&gt; 归一化处理步骤如下：</target>
        </trans-unit>
        <trans-unit id="f4cd750db3d7f36c53872e7b66a6bfdeb3cd648b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;LOG_STACKTRACE_ON_DEPRECATION&lt;/code&gt; property, when true, tells Ember to log a full stack trace during deprecation warnings.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="53b8ccc5add83e52a73670fa9d3c40bfe82b5d45" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;LOG_VERSION&lt;/code&gt; property, when true, tells Ember to log versions of all dependent libraries in use.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b8d7134db8562c548ba83e1398f6d35393db9323" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Last Update: {{lastUpdateTimestamp}}&lt;/code&gt; will be rendered in place of the &lt;code&gt;{{yield}}&lt;/code&gt;.</source>
          <target state="translated">在 &lt;code&gt;Last Update: {{lastUpdateTimestamp}}&lt;/code&gt; 将替代被渲染 &lt;code&gt;{{yield}}&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="d22551ec5b53f6d68685e639c7e1e39180f00ac3" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Last Update: {{this.lastUpdateTimestamp}}&lt;/code&gt; will be rendered in place of the &lt;code&gt;{{yield}}&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="595ef6a646450a473c800b0f4386c1825ddf018a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ManyArray&lt;/code&gt; is instantiated lazily the first time the relationship is requested.</source>
          <target state="translated">该 &lt;code&gt;ManyArray&lt;/code&gt; 是懒洋洋地实例化的第一次请求的关系。</target>
        </trans-unit>
        <trans-unit id="0b6f84c2a781e6980287c45f8d8ed99e438f68e1" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Mixin&lt;/code&gt; class allows you to create mixins, whose properties can be added to other classes. For instance,</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0312be95af27e29522a08b2babcd2ab09013f545" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;NumberTransform&lt;/code&gt; class is used to serialize and deserialize numeric attributes on Ember Data record objects. This transform is used when &lt;code&gt;number&lt;/code&gt; is passed as the type parameter to the &lt;a href=&quot;https://api.emberjs.com/ember-data/release/functions/@ember-data%2Fmodel/attr&quot;&gt;attr&lt;/a&gt; function.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1c84f7566c1be766c1e06e2454452912739ec439" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Route&lt;/code&gt; class is used to define individual routes. Refer to the &lt;a href=&quot;https://guides.emberjs.com/release/routing/&quot;&gt;routing guide&lt;/a&gt; for documentation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0dfb03cf2957c12e3cd48a12a2a6c5c0716c3419" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Router.map&lt;/code&gt; function allows you to define mappings from URLs to routes in your application. These mappings are defined within the supplied callback function using &lt;code&gt;this.route&lt;/code&gt;.</source>
          <target state="translated">该 &lt;code&gt;Router.map&lt;/code&gt; 功能可让您从URL中定义映射到应用程序中的路线。这些映射是使用 &lt;code&gt;this.route&lt;/code&gt; 在提供的回调函数中定义的。</target>
        </trans-unit>
        <trans-unit id="50007ea5308c43c38c5dd9b4b9985e647fb8482a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;StringTransform&lt;/code&gt; class is used to serialize and deserialize string attributes on Ember Data record objects. This transform is used when &lt;code&gt;string&lt;/code&gt; is passed as the type parameter to the &lt;a href=&quot;https://api.emberjs.com/ember-data/release/functions/@ember-data%2Fmodel/attr&quot;&gt;attr&lt;/a&gt; function.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2b94bcc514f833c5ef1923bb0c25457ea933534f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;action&lt;/code&gt; helper allows you to add event listeners to elements and call named functions. By default, the &lt;code&gt;action&lt;/code&gt; helper adds a &lt;code&gt;click&lt;/code&gt; event listener, but it can be used to listen for any element event. Now, when the &lt;code&gt;li&lt;/code&gt; element is clicked a &lt;code&gt;showPerson&lt;/code&gt; function will be called from the &lt;code&gt;actions&lt;/code&gt; object in the &lt;code&gt;people-list&lt;/code&gt; component. Think of this like calling &lt;code&gt;this.actions.showPerson(person)&lt;/code&gt; from our template.</source>
          <target state="translated">该 &lt;code&gt;action&lt;/code&gt; 助手允许你添加事件侦听器的元素，并调用命名的功能。默认情况下， &lt;code&gt;action&lt;/code&gt; 帮助器会添加一个 &lt;code&gt;click&lt;/code&gt; 事件侦听器，但可用于侦听任何元素事件。现在，当单击 &lt;code&gt;li&lt;/code&gt; 元素时，将从 &lt;code&gt;people-list&lt;/code&gt; 组件中的 &lt;code&gt;actions&lt;/code&gt; 对象调用 &lt;code&gt;showPerson&lt;/code&gt; 函数。可以将其想象为从我们的模板中调用 &lt;code&gt;this.actions.showPerson(person)&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="6781996b5d8528d30fde9ec99ae34a524c6762c6" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;actions&lt;/code&gt; hash will inherit action handlers from the &lt;code&gt;actions&lt;/code&gt; hash defined on extended parent classes or mixins rather than just replace the entire hash, e.g.:</source>
          <target state="translated">该 &lt;code&gt;actions&lt;/code&gt; 哈希将继承动作处理 &lt;code&gt;actions&lt;/code&gt; 的散列上扩展父类或混入定义，而不是仅仅更换整个哈希，例如：</target>
        </trans-unit>
        <trans-unit id="9f0188c56bfb8d604ed462187f6484e25c179952" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;actions&lt;/code&gt; queue is the general work queue and will typically contain scheduled tasks e.g. promises.</source>
          <target state="translated">该 &lt;code&gt;actions&lt;/code&gt; 队列是一般的工作队列，并通常会含有预定任务如承诺。</target>
        </trans-unit>
        <trans-unit id="41ff0eeabf56cfc059010cc4c18262f67f627814" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;afterRender&lt;/code&gt; queue contains jobs meant to be run after all previously scheduled render tasks are complete. This is often good for 3rd-party DOM manipulation libraries, that should only be run after an entire tree of DOM has been updated.</source>
          <target state="translated">在 &lt;code&gt;afterRender&lt;/code&gt; 队列包含意味着就业机会毕竟以前计划的渲染任务完成后要运行。这通常对第三方DOM操作库很有用，仅应在更新整个DOM树之后运行。</target>
        </trans-unit>
        <trans-unit id="95d664e2d1d83fcd6e5b1affc99d006e5870087d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;andThen&lt;/code&gt; helper will wait for all preceding asynchronous helpers to complete prior to progressing forward. Let's take a look at the following example.</source>
          <target state="translated">该 &lt;code&gt;andThen&lt;/code&gt; 助手将等待所有先前的异步助手之前进步向前来完成。让我们看下面的例子。</target>
        </trans-unit>
        <trans-unit id="4d4a81e4ca7c1ec493df5706886873c52cf64207" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;application&lt;/code&gt; route is entered when your app first boots up. Like other routes, it will load a template with the same name (&lt;code&gt;application&lt;/code&gt; in this case) by default. You should put your header, footer, and any other decorative content here. All other routes will render their templates into the &lt;code&gt;application.hbs&lt;/code&gt; template's &lt;code&gt;{{outlet}}&lt;/code&gt;.</source>
          <target state="translated">该 &lt;code&gt;application&lt;/code&gt; 路径输入时，你的应用程序第一次启动时。与其他路由一样，默认情况下它将加载具有相同名称的模板（在本例中为 &lt;code&gt;application&lt;/code&gt; ）。您应该在此处放置页眉，页脚和任何其他装饰内容。所有其他路由会将其模板呈现到 &lt;code&gt;application.hbs&lt;/code&gt; 模板的 &lt;code&gt;{{outlet}}&lt;/code&gt; 中。</target>
        </trans-unit>
        <trans-unit id="b582698bc53fe300b6da4e31402e3e94ba67f723" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;args&lt;/code&gt; property of Glimmer components is an object that contains the &lt;em&gt;arguments&lt;/em&gt; that are passed to the component. For instance, the following component usage:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a16346decab3b61baad24880aedf46633230c1ad" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;array&lt;/code&gt; helper</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4a5ab553a8d271896a510ee5268f14190264cb5a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;attrs&lt;/code&gt; object can be used to declare a simple mapping between property names on &lt;code&gt;DS.Model&lt;/code&gt; records and payload keys in the serialized JSON object representing the record. An object with the property &lt;code&gt;key&lt;/code&gt; can also be used to designate the attribute's key on the response payload.</source>
          <target state="translated">所述 &lt;code&gt;attrs&lt;/code&gt; 对象可用于声明对属性名称之间一个简单的映射 &lt;code&gt;DS.Model&lt;/code&gt; 记录和有效载荷密钥在序列化JSON对象表示记录。具有属性 &lt;code&gt;key&lt;/code&gt; 的对象也可以用于在响应有效负载上指定属性的键。</target>
        </trans-unit>
        <trans-unit id="f2d66bc83e872c9bd0033c21c7974df478a00038" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;attrs&lt;/code&gt; object can be used to declare a simple mapping between property names on &lt;code&gt;Model&lt;/code&gt; records and payload keys in the serialized JSON object representing the record. An object with the property &lt;code&gt;key&lt;/code&gt; can also be used to designate the attribute's key on the response payload.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6dc40241d339c1bb5c98150382b9bbb509e1494e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;attrs&lt;/code&gt; option for a resource &lt;code&gt;{ embedded: 'always' }&lt;/code&gt; is shorthand for:</source>
          <target state="translated">资源 &lt;code&gt;{ embedded: 'always' }&lt;/code&gt; 的 &lt;code&gt;attrs&lt;/code&gt; 选项是以下内容的简写：</target>
        </trans-unit>
        <trans-unit id="d11fb7ffee10a29dcba72e4be14a34886533a524" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;attrs&lt;/code&gt; property can be set on the &lt;code&gt;ApplicationSerializer&lt;/code&gt; or a per-type serializer.</source>
          <target state="translated">所述 &lt;code&gt;attrs&lt;/code&gt; 属性可以在被设置 &lt;code&gt;ApplicationSerializer&lt;/code&gt; 或每个类型串行器。</target>
        </trans-unit>
        <trans-unit id="91ff220601d5dc8de2569eafda2d847e2de3da0a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;backgroundReload&lt;/code&gt; option is used to prevent the fetching of the destroyed record, since &lt;a href=&quot;http://emberjs.com/api/data/classes/DS.Store.html#method_findRecord&quot;&gt;&lt;code&gt;findRecord()&lt;/code&gt;&lt;/a&gt; automatically schedules a fetch of the record from the adapter.</source>
          <target state="translated">该 &lt;code&gt;backgroundReload&lt;/code&gt; 选项用于防止破坏记录的抓取，因为&lt;a href=&quot;http://emberjs.com/api/data/classes/DS.Store.html#method_findRecord&quot;&gt; &lt;code&gt;findRecord()&lt;/code&gt; &lt;/a&gt;自动安排取回从适配器的记录。</target>
        </trans-unit>
        <trans-unit id="a4f5e918a009088b91687277e637fe04016877fa" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;boolean&lt;/code&gt; transform can handle values other than &lt;code&gt;true&lt;/code&gt; or &lt;code&gt;false&lt;/code&gt;. The strings &lt;code&gt;&quot;true&quot;&lt;/code&gt; or &lt;code&gt;&quot;t&quot;&lt;/code&gt; in any casing, &lt;code&gt;&quot;1&quot;&lt;/code&gt;, and the number &lt;code&gt;1&lt;/code&gt; will all coerce to &lt;code&gt;true&lt;/code&gt;, and &lt;code&gt;false&lt;/code&gt; otherwise.</source>
          <target state="translated">该 &lt;code&gt;boolean&lt;/code&gt; 变换可以处理比其他值 &lt;code&gt;true&lt;/code&gt; 或 &lt;code&gt;false&lt;/code&gt; 。任何大小写形式中的字符串 &lt;code&gt;&quot;true&quot;&lt;/code&gt; 或 &lt;code&gt;&quot;t&quot;&lt;/code&gt; ， &lt;code&gt;&quot;1&quot;&lt;/code&gt; 和数字 &lt;code&gt;1&lt;/code&gt; 都将强制转换为 &lt;code&gt;true&lt;/code&gt; ，否则为 &lt;code&gt;false&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="71a103dc62034f2f7cae2908b76c1995a2fd8b2f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;build&lt;/code&gt; command packages up all of the assets that make up your application&amp;mdash;JavaScript, templates, CSS, web fonts, images, and more.</source>
          <target state="translated">在 &lt;code&gt;build&lt;/code&gt; 命令封装了所有让您的应用程序的JavaScript，模板，CSS，网页字体，图像和更多的资产。</target>
        </trans-unit>
        <trans-unit id="fd33d9b6d0ab56a5652a4f3c40541be7a9070e5d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;checked&lt;/code&gt; attribute of an &lt;code&gt;Checkbox&lt;/code&gt; object should always be set through the Ember object or by interacting with its rendered element representation via the mouse, keyboard, or touch. Updating the value of the checkbox via jQuery will result in the checked value of the object and its element losing synchronization.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="84d78207fa37bb2b65a91e18bf5316cd6ed67a48" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;checked&lt;/code&gt; attribute of an &lt;code&gt;Ember.Checkbox&lt;/code&gt; object should always be set through the Ember object or by interacting with its rendered element representation via the mouse, keyboard, or touch. Updating the value of the checkbox via jQuery will result in the checked value of the object and its element losing synchronization.</source>
          <target state="translated">&lt;code&gt;Ember.Checkbox&lt;/code&gt; 对象的 &lt;code&gt;checked&lt;/code&gt; 属性应始终通过Ember对象设置，或通过鼠标，键盘或触摸与其呈现的元素表示进行交互来设置。通过jQuery更新复选框的值将导致对象及其元素的检查值失去同步。</target>
        </trans-unit>
        <trans-unit id="388167e41998946f805b5e706d65af0e5c7f26f1" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;component&lt;/code&gt; helper can be used to package a component path with initial attrs. The included attrs can then be merged during the final invocation. For example, given a &lt;code&gt;person-form&lt;/code&gt; component with the following template:</source>
          <target state="translated">的 &lt;code&gt;component&lt;/code&gt; 的辅助可用于包装用初始ATTRS一个组件的路径。然后可以在最终调用期间合并包含的attrs。例如，给定具有以下模板 &lt;code&gt;person-form&lt;/code&gt; 组件：</target>
        </trans-unit>
        <trans-unit id="f10d7ab67dcbf9ed37e4d22dea1fe64ea50033dc" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;concat&lt;/code&gt; helper</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b1f2c97fc9f583e72f22cf0ed1d84746cb68b872" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;constructor&lt;/code&gt; can't be called in any other way. It doesn't exist on the class or instances:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4b1ddfd17f539ac7b8a2663277ed2804f5e3e0db" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;constructor&lt;/code&gt; function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="51f756b882769b9089adac0476c658ecb08bec84" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;constructor&lt;/code&gt; method is a special method in classes. It's run when you create a new instance of the class, and can be used to setup the class:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4c34fbc331365e1345b641ddb67e8318a5245aaf" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;context&lt;/code&gt; argument allows you to optionally specify the &lt;code&gt;this&lt;/code&gt; with which your callback will be invoked.</source>
          <target state="translated">该 &lt;code&gt;context&lt;/code&gt; 参数允许您选择指定 &lt;code&gt;this&lt;/code&gt; 与你的回调将被调用。</target>
        </trans-unit>
        <trans-unit id="89d688b3c007bc970797daf54bb128d1ea052cf8" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;create()&lt;/code&gt; on line #17 creates an &lt;em&gt;instance&lt;/em&gt; of the &lt;code&gt;Soldier&lt;/code&gt; class. The &lt;code&gt;extend()&lt;/code&gt; on line #8 creates a &lt;em&gt;subclass&lt;/em&gt; of &lt;code&gt;Person&lt;/code&gt;. Any instance of the &lt;code&gt;Person&lt;/code&gt; class will &lt;em&gt;not&lt;/em&gt; have the &lt;code&gt;march()&lt;/code&gt; method.</source>
          <target state="translated">在 &lt;code&gt;create()&lt;/code&gt; 上线＃17创建一个&lt;em&gt;实例&lt;/em&gt;中的 &lt;code&gt;Soldier&lt;/code&gt; 类。的 &lt;code&gt;extend()&lt;/code&gt; 在线路＃8创建一个&lt;em&gt;子类&lt;/em&gt;的 &lt;code&gt;Person&lt;/code&gt; 。在任何情况下 &lt;code&gt;Person&lt;/code&gt; 类将&lt;em&gt;不会&lt;/em&gt;有 &lt;code&gt;march()&lt;/code&gt; 方法。</target>
        </trans-unit>
        <trans-unit id="c49797066693990d496ec9bb1f4d6f26783f06a8" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;createRecord&lt;/code&gt; method serializes the record and makes an Ajax (HTTP POST) request to a URL computed by &lt;code&gt;buildURL&lt;/code&gt;.</source>
          <target state="translated">该 &lt;code&gt;createRecord&lt;/code&gt; 方法序列化记录并使得一个Ajax（HTTP POST）请求到由计算的URL &lt;code&gt;buildURL&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="f8e1669d9956b7ef08bd24a7d718d36d0e688bbf" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;currentRoute&lt;/code&gt; property contains metadata about the current leaf route. It returns a &lt;code&gt;RouteInfo&lt;/code&gt; object that has information like the route name, params, query params and more.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f9a93643d5938fe543825d7c0628e35429505c3d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;date&lt;/code&gt; transform will transform an &lt;a href=&quot;https://en.wikipedia.org/wiki/ISO_8601&quot;&gt;ISO 8601&lt;/a&gt; string to a JavaScript date object.</source>
          <target state="translated">该 &lt;code&gt;date&lt;/code&gt; 变换将改变的&lt;a href=&quot;https://en.wikipedia.org/wiki/ISO_8601&quot;&gt;ISO 8601&lt;/a&gt;字符串到JavaScript日期对象。</target>
        </trans-unit>
        <trans-unit id="ff34e8e1920ca2093675f8274922edc027f03d95" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;default-async-observers&lt;/code&gt; feature affects the behavior of observers application-wide, but you can still instruct individual observers to run synchronously or async manually. By using the &lt;code&gt;sync: true&lt;/code&gt; option, observers who are otherwise async by default can be marked as synchronous manually. Similarly, observers can be set to run asynchronously using the &lt;code&gt;sync: false&lt;/code&gt; option.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e80e5ce5365720cc0f4de3729b802465bc83fe09" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;defaultSerializer&lt;/code&gt; property can be used to specify the serializer that will be used by this adapter. This is only used when a model specific serializer or &lt;code&gt;serializer:application&lt;/code&gt; are not defined.</source>
          <target state="translated">该 &lt;code&gt;defaultSerializer&lt;/code&gt; 属性可用于指定将通过该适配器使用的串行器。仅在未定义特定于模型的序列化器或 &lt;code&gt;serializer:application&lt;/code&gt; 时使用。</target>
        </trans-unit>
        <trans-unit id="47279489597e5ac74e3e86c13c5db07112deff0a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;deleteRecord&lt;/code&gt; method makes an Ajax (HTTP DELETE) request to a URL computed by &lt;code&gt;buildURL&lt;/code&gt;.</source>
          <target state="translated">的 &lt;code&gt;deleteRecord&lt;/code&gt; 方法使得一个Ajax（HTTP DELETE）请求由计算的URL &lt;code&gt;buildURL&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="a4d5273a464eca58d08f2ab0430b416271bc18c1" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;deleteUser&lt;/code&gt; action is prepended with &lt;code&gt;this.&lt;/code&gt;, since &lt;code&gt;SystemPreferencesEditor&lt;/code&gt; is where the action is defined now. If the action was passed from a parent, then it might have looked like &lt;code&gt;@deleteUser&lt;/code&gt; instead.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c30f86ae15c9c161bf558adf4801995e475ede16" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;destroy&lt;/code&gt; queue contains jobs to finish the teardown of objects other jobs have scheduled to destroy.</source>
          <target state="translated">该 &lt;code&gt;destroy&lt;/code&gt; 队列包含作业完成对象的其他工作已经安排到破坏的拆卸。</target>
        </trans-unit>
        <trans-unit id="dba2c22a1d63dedd6e7edb5e5023be561abc95eb" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;did-insert&lt;/code&gt; modifier will call a function after its element is added to the DOM. That function receives the element as a parameter.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dec8ac796a650bf4f17575a944af8c803f7569ee" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;didRender&lt;/code&gt; hook is called during both render and re-render after the template has rendered and the DOM updated. You can leverage this hook to perform post-processing on the DOM of a component after it's been updated.</source>
          <target state="translated">该 &lt;code&gt;didRender&lt;/code&gt; 挂钩过程中调用都渲染和重新渲染模板已经渲染和DOM更新后。更新组件后，您可以利用此挂钩对组件的DOM进行后处理。</target>
        </trans-unit>
        <trans-unit id="58ea898b33c2a437dd96438a1f46ae35d27a088e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;didTransition&lt;/code&gt; action is fired after a transition has successfully been completed. This occurs after the normal model hooks (&lt;code&gt;beforeModel&lt;/code&gt;, &lt;code&gt;model&lt;/code&gt;, &lt;code&gt;afterModel&lt;/code&gt;, &lt;code&gt;setupController&lt;/code&gt;) have resolved. The &lt;code&gt;didTransition&lt;/code&gt; action has no arguments, however, it can be useful for tracking page views or resetting state on the controller.</source>
          <target state="translated">该 &lt;code&gt;didTransition&lt;/code&gt; 的过渡已成功完成后的动作被触发。这在 &lt;code&gt;beforeModel&lt;/code&gt; 了常规模型挂钩（beforeModel， &lt;code&gt;model&lt;/code&gt; ， &lt;code&gt;afterModel&lt;/code&gt; ， &lt;code&gt;setupController&lt;/code&gt; ）之后发生。该 &lt;code&gt;didTransition&lt;/code&gt; 动作没有参数，但它可以为控制器上的追踪页面访问量或恢复状态很有用。</target>
        </trans-unit>
        <trans-unit id="3130357b52e4dd341684a411c14f9aaf8e594d3b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ember-cli-deprecation-workflow&lt;/code&gt; addon provides a command that will collect deprecations from your console and generate JavaScript code listing its findings.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a086025716096321d67695ebde6dc9edd575027f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;error&lt;/code&gt; and &lt;code&gt;loading&lt;/code&gt; substates exist as a part of each route, so they should not be added to your &lt;code&gt;router.js&lt;/code&gt; file. To utilize a substate, the route, controller, and template may be optionally defined as desired.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d29eb3566c4cfb0d03f10d6c75bd7952980a0abf" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;error&lt;/code&gt; event</source>
          <target state="translated">该 &lt;code&gt;error&lt;/code&gt; 事件</target>
        </trans-unit>
        <trans-unit id="068d236c0c1376d4308bceaec965d2b3becf06ad" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;errors&lt;/code&gt; property is useful for displaying error messages to the user.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3dc3d2be3a232d5f74fd199e8ed0506d40b409b2" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;errors&lt;/code&gt; property us useful for displaying error messages to the user.</source>
          <target state="translated">该 &lt;code&gt;errors&lt;/code&gt; 性质我们显示错误信息对用户有用的。</target>
        </trans-unit>
        <trans-unit id="115d726ddd808f785aca1eceaa420a26f06ecae9" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;filter&lt;/code&gt; function is passed in by the calling object. This is a pattern known as &lt;a href=&quot;https://guides.emberjs.com/components/triggering-changes-with-actions/#toc_passing-the-action-to-the-component&quot;&gt;closure actions&lt;/a&gt;.</source>
          <target state="translated">该 &lt;code&gt;filter&lt;/code&gt; 的功能是通过调用对象传递英寸 这是一种称为&lt;a href=&quot;https://guides.emberjs.com/components/triggering-changes-with-actions/#toc_passing-the-action-to-the-component&quot;&gt;关闭动作&lt;/a&gt;的模式。</target>
        </trans-unit>
        <trans-unit id="387361e1d1ae1eef1a52fa056d048c8cd9b110ce" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;findAll()&lt;/code&gt; method is used to retrieve all records for a given type.</source>
          <target state="translated">该 &lt;code&gt;findAll()&lt;/code&gt; 方法用于检索给定类型的所有记录。</target>
        </trans-unit>
        <trans-unit id="602c663ac51ac56be167a8f4fb8f2bd27b6e2b2a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;findAll&lt;/code&gt; method makes an Ajax (HTTP GET) request to a URL computed by &lt;code&gt;buildURL&lt;/code&gt;, and returns a promise for the resulting payload.</source>
          <target state="translated">所述 &lt;code&gt;findAll&lt;/code&gt; 方法使得一个Ajax（HTTP GET）请求由计算的URL &lt;code&gt;buildURL&lt;/code&gt; ，并返回所得到的有效载荷的承诺。</target>
        </trans-unit>
        <trans-unit id="ce7f071cf50d33d185134e7eba5ac98888f204a6" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;findBelongsTo&lt;/code&gt; method will make an Ajax (HTTP GET) request to the originally specified URL.</source>
          <target state="translated">该 &lt;code&gt;findBelongsTo&lt;/code&gt; 方法将使一个Ajax（HTTP GET）请求原先指定的URL。</target>
        </trans-unit>
        <trans-unit id="f44dcd4f85b2dd0552451d53e497afcda8a7a1c6" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;findHasMany&lt;/code&gt; method will make an Ajax (HTTP GET) request to the originally specified URL.</source>
          <target state="translated">该 &lt;code&gt;findHasMany&lt;/code&gt; 方法将使一个Ajax（HTTP GET）请求原先指定的URL。</target>
        </trans-unit>
        <trans-unit id="ae10eeaf2c63ca125251ac98e9be799c680141ff" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;findMany&lt;/code&gt; method makes an Ajax (HTTP GET) request to a URL computed by &lt;code&gt;buildURL&lt;/code&gt;, and returns a promise for the resulting payload.</source>
          <target state="translated">该 &lt;code&gt;findMany&lt;/code&gt; 方法使得一个Ajax（HTTP GET）请求由计算的URL &lt;code&gt;buildURL&lt;/code&gt; ，并返回所得到的有效载荷的承诺。</target>
        </trans-unit>
        <trans-unit id="7a08ab933ff65b656dd2d84e9309be457ddf1cf0" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;findRecord()&lt;/code&gt; method is invoked when the store is asked for a record that has not previously been loaded. In response to &lt;code&gt;findRecord()&lt;/code&gt; being called, you should query your persistence layer for a record with the given ID. The &lt;code&gt;findRecord&lt;/code&gt; method should return a promise that will resolve to a JavaScript object that will be normalized by the serializer.</source>
          <target state="translated">该 &lt;code&gt;findRecord()&lt;/code&gt; 当商店被要求为先前没有被加载的记录方法被调用。作为对 &lt;code&gt;findRecord()&lt;/code&gt; 的响应，您应该在持久层中查询具有给定ID的记录。该 &lt;code&gt;findRecord&lt;/code&gt; 方法应该返回将解析将由串行器归一化的JavaScript对象的承诺。</target>
        </trans-unit>
        <trans-unit id="4a203cdf205b6bed873c25d04719c09b1c068376" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;findRecord&lt;/code&gt; method makes an Ajax request to a URL computed by &lt;code&gt;buildURL&lt;/code&gt;, and returns a promise for the resulting payload.</source>
          <target state="translated">该 &lt;code&gt;findRecord&lt;/code&gt; 方法使得Ajax请求到由计算的URL &lt;code&gt;buildURL&lt;/code&gt; ，并返回所得到的有效载荷的承诺。</target>
        </trans-unit>
        <trans-unit id="d296cef402c6e9fdee3e60b6eab8186006e33659" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;findRecord&lt;/code&gt; method will always resolve its promise with the same object for a given type and &lt;code&gt;id&lt;/code&gt;.</source>
          <target state="translated">对于给定的类型和 &lt;code&gt;id&lt;/code&gt; ， &lt;code&gt;findRecord&lt;/code&gt; 方法将始终使用相同的对象来解决其诺言。</target>
        </trans-unit>
        <trans-unit id="8946fd1a72779985021b67a58d0554338af6fd98" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;findRecord&lt;/code&gt; method will always return a &lt;strong&gt;promise&lt;/strong&gt; that will be resolved with the record.</source>
          <target state="translated">该 &lt;code&gt;findRecord&lt;/code&gt; 方法将总是返回&lt;strong&gt;承诺&lt;/strong&gt;，将与记录来解决。</target>
        </trans-unit>
        <trans-unit id="70a1277075e83917b1e91129c777128de706c278" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;firstName&lt;/code&gt; and &lt;code&gt;lastName&lt;/code&gt; properties are read from the context (the application controller in this case), and rendered inside the &lt;code&gt;&amp;lt;strong&amp;gt;&lt;/code&gt; HTML tag.</source>
          <target state="translated">所述 &lt;code&gt;firstName&lt;/code&gt; 和 &lt;code&gt;lastName&lt;/code&gt; 的属性是从上下文（在这种情况下，应用控制器）读取，并且内呈现 &lt;code&gt;&amp;lt;strong&amp;gt;&lt;/code&gt; HTML标签。</target>
        </trans-unit>
        <trans-unit id="cd6236735803b08c551e37efc7476c3b47d12870" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;fn&lt;/code&gt; helper allows you to ensure a function that you are passing off to another component, helper, or modifier has access to arguments that are available in the template.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e2cd1e74db759e699d89efeb874150a69a9ce052" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;generateIdForRecord()&lt;/code&gt; method will be invoked with the requesting store as the first parameter and the newly created record as the second parameter:</source>
          <target state="translated">所述 &lt;code&gt;generateIdForRecord()&lt;/code&gt; 方法将与请求存储作为第一个参数和新创建的记录的第二个参数被调用：</target>
        </trans-unit>
        <trans-unit id="bc51086852a3dddc57511bb5c719fec56bca56fe" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;get&lt;/code&gt; helper</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bbf4d7e5cc6903ad89c7bab8e09192b731fe7906" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;hash&lt;/code&gt; helper</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9d6dcd303e28c2f50e7fa209f969128e6c261668" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;hash&lt;/code&gt; option uses the URL's anchor to load the starting state of your application and will keep it in sync as you move around. At present, this relies on a &lt;a href=&quot;http://caniuse.com/hashchange&quot;&gt;hashchange&lt;/a&gt; event existing in the browser.</source>
          <target state="translated">该 &lt;code&gt;hash&lt;/code&gt; 选项使用URL的锚加载应用程序的起始状态，并保持同步，你走动。目前，这依赖于浏览器中存在的&lt;a href=&quot;http://caniuse.com/hashchange&quot;&gt;hashchange&lt;/a&gt;事件。</target>
        </trans-unit>
        <trans-unit id="cc7c1171eccb8480ea2f8fa3d717e7fae73bc7e7" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;hash&lt;/code&gt; option uses the URL's anchor to load the starting state of your application and will keep it in sync as you move around. At present, this relies on a &lt;a href=&quot;https://caniuse.com/hashchange&quot;&gt;hashchange&lt;/a&gt; event existing in the browser.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="efb3ddd1dd864b1ccd297455ce4d0857982f5192" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;host&lt;/code&gt; and &lt;code&gt;namespace&lt;/code&gt; attributes will be used if defined, and are optional.</source>
          <target state="translated">该 &lt;code&gt;host&lt;/code&gt; 和 &lt;code&gt;namespace&lt;/code&gt; ，如果定义的属性将被使用，并且是可选的。</target>
        </trans-unit>
        <trans-unit id="09f92bbffc457efd3c7472e55fd0edc358cab44a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;html&lt;/code&gt; element may not have multiple &lt;code&gt;lang&lt;/code&gt;&lt;em&gt;values&lt;/em&gt;. If an element contains content in a language different from the primary, then you can provide the element its own &lt;code&gt;lang&lt;/code&gt; attribute.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="726d76cd26c3550c4a16d511675ea50195fe236a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;id&lt;/code&gt; of the record that this reference refers to.</source>
          <target state="translated">该引用引用的记录的 &lt;code&gt;id&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="e484f981133bd6e9e051ecd67de8179c1ab49e1d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;id&lt;/code&gt; of the record that this reference refers to. Together, the &lt;code&gt;type()&lt;/code&gt; and &lt;code&gt;id()&lt;/code&gt; methods form a composite key for the identity map. This can be used to access the id of an async relationship without triggering a fetch that would normally happen if you attempted to use &lt;code&gt;record.get('relationship.id')&lt;/code&gt;.</source>
          <target state="translated">该引用引用的记录的 &lt;code&gt;id&lt;/code&gt; 。在一起时， &lt;code&gt;type()&lt;/code&gt; 和 &lt;code&gt;id()&lt;/code&gt; 方法形成用于恒等映射的复合密钥。这可用于访问异步关系的ID，而不会触发通常在您尝试使用 &lt;code&gt;record.get('relationship.id')&lt;/code&gt; 时发生的提取。</target>
        </trans-unit>
        <trans-unit id="7f2554d8b80727fbc1ff07b514fe870c4417b1df" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;identifier&lt;/code&gt; of the record that this reference refers to.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0b8ddb4404d56063acf9b99af25e8cc6e7326302" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;if&lt;/code&gt; helper allows you to conditionally render one of two branches, depending on the &quot;truthiness&quot; of a property. For example the following values are all falsey: &lt;code&gt;false&lt;/code&gt;, &lt;code&gt;undefined&lt;/code&gt;, &lt;code&gt;null&lt;/code&gt;, &lt;code&gt;&quot;&quot;&lt;/code&gt;, &lt;code&gt;0&lt;/code&gt;, &lt;code&gt;NaN&lt;/code&gt; or an empty array.</source>
          <target state="translated">该 &lt;code&gt;if&lt;/code&gt; 助手允许有条件地呈现两个分支之一，这取决于物业的&amp;ldquo;感实性&amp;rdquo;。例如，以下值均为 &lt;code&gt;false&lt;/code&gt; ：false， &lt;code&gt;undefined&lt;/code&gt; ， &lt;code&gt;null&lt;/code&gt; ， &lt;code&gt;&quot;&quot;&lt;/code&gt; ， &lt;code&gt;0&lt;/code&gt; ， &lt;code&gt;NaN&lt;/code&gt; 或空数组。</target>
        </trans-unit>
        <trans-unit id="80811688a39848ac2d9ee0077e1365518ccd1205" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;in-element&lt;/code&gt; helper renders its block content outside of the regular flow, into a DOM element given by its &lt;code&gt;destinationElement&lt;/code&gt; positional argument.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7f533c5c4a9490cabd083312090b309dba8b8080" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;index&lt;/code&gt; route, which we've set up to redirect to the &lt;code&gt;rentals&lt;/code&gt; route.</source>
          <target state="translated">该 &lt;code&gt;index&lt;/code&gt; 的路线，我们已经建立了重定向到 &lt;code&gt;rentals&lt;/code&gt; 路线。</target>
        </trans-unit>
        <trans-unit id="a37a3988ddfb70864ed4f197d72873cd75421874" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;index&lt;/code&gt; template will be rendered into the &lt;code&gt;{{outlet}}&lt;/code&gt; in the &lt;code&gt;application&lt;/code&gt; template. If the user navigates to &lt;code&gt;/favorites&lt;/code&gt;, Ember will replace the &lt;code&gt;index&lt;/code&gt; template with the &lt;code&gt;favorites&lt;/code&gt; template.</source>
          <target state="translated">该 &lt;code&gt;index&lt;/code&gt; 模板将被渲染到 &lt;code&gt;{{outlet}}&lt;/code&gt; 在 &lt;code&gt;application&lt;/code&gt; 模板。如果用户导航到 &lt;code&gt;/favorites&lt;/code&gt; ，子玉将取代 &lt;code&gt;index&lt;/code&gt; 与模板 &lt;code&gt;favorites&lt;/code&gt; 模板。</target>
        </trans-unit>
        <trans-unit id="49b15fbb06ca8bff74b94354d94c2100eddd21f0" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;init&lt;/code&gt; hook still exists on many existing classes, and runs &lt;em&gt;after&lt;/em&gt;&lt;code&gt;constructor&lt;/code&gt;, so you can generally convert to native class syntax without rewriting your &lt;code&gt;init&lt;/code&gt; methods. However, in the future &lt;code&gt;init&lt;/code&gt; will be removed, so you should eventually transition to &lt;code&gt;constructor&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="05ea9f1721ce49a0176be60d2b1643295decf184" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;invokeHelper&lt;/code&gt; function can be used to create a helper instance in JavaScript.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="21469bb82f8ec9ad5cd5418651baff8e6f8128b6" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;is-active&lt;/code&gt; class is responsible for showing the active icon. &lt;em&gt;How&lt;/em&gt; that icon is rendered may change over time, so we won't use &lt;code&gt;...attributes&lt;/code&gt; to apply the &lt;code&gt;is-active&lt;/code&gt; class. Instead, we'll pass the argument &lt;code&gt;@isActive&lt;/code&gt; to dictate &lt;em&gt;what&lt;/em&gt; to do (e.g. render the icon).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="894fed72e604e69d2c832ed37e77607f8aedfc96" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;isDone&lt;/code&gt; property of any of the objects in the &lt;code&gt;todos&lt;/code&gt; array changes.</source>
          <target state="translated">&lt;code&gt;todos&lt;/code&gt; 数组中任何对象的 &lt;code&gt;isDone&lt;/code&gt; 属性都会更改。</target>
        </trans-unit>
        <trans-unit id="2e33c9e0c11bc81e1d1a61b55510989fd637ce87" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;key-up&lt;/code&gt; property will be bound to the &lt;code&gt;handleFilterEntry&lt;/code&gt; action.</source>
          <target state="translated">该 &lt;code&gt;key-up&lt;/code&gt; 属性将被绑定到 &lt;code&gt;handleFilterEntry&lt;/code&gt; 行动。</target>
        </trans-unit>
        <trans-unit id="936bd94b4aebf6a1e14654f35827f1ee229e7066" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;key&lt;/code&gt; option is used to tell Ember how to determine if the array being iterated over with &lt;code&gt;{{#each}}&lt;/code&gt; has changed between renders. By helping Ember detect that some elements in the array are the same, DOM elements can be re-used, significantly improving rendering speed.</source>
          <target state="translated">该 &lt;code&gt;key&lt;/code&gt; 选项用于告诉灰烬如何确定阵列上迭代与 &lt;code&gt;{{#each}}&lt;/code&gt; 改变渲染之间。通过帮助Ember检测到数组中的某些元素相同，可以重复使用DOM元素，从而显着提高渲染速度。</target>
        </trans-unit>
        <trans-unit id="d1609229b8d32f8c877e2321394121fb050df90a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;key&lt;/code&gt; option is used to tell Ember how to determine if the items in the array being iterated over with &lt;code&gt;{{#each}}&lt;/code&gt; has changed between renders. By default the item's object identity is used.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4254dc01c23c02d17d589a33a983d7751521cfab" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;layout&lt;/code&gt; property can be used to dynamically specify a template associated with a component class, instead of relying on Ember to link together a component class and a template based on file names.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8e379a754151ed1a36cad1c06e086c55bb932b1a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;layout&lt;/code&gt; property should be set to the default export of a template module, which is the name of a template file without the &lt;code&gt;.hbs&lt;/code&gt; extension.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="89fd99904bc293783c2fb90fd3aa58828b6a8a8c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;let&lt;/code&gt; helper</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c13a30c7f33720be941a98a0ea6cf11d16443ad2" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;let&lt;/code&gt; helper receives one or more positional arguments and yields them out as block params.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a8f5fca5b000aac4891ae81f3df31b8436f67cee" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;link-to&lt;/code&gt; helper supports specifying query params using the &lt;code&gt;query-params&lt;/code&gt; subexpression helper.</source>
          <target state="translated">该 &lt;code&gt;link-to&lt;/code&gt; 帮助支持指定使用查询参数 &lt;code&gt;query-params&lt;/code&gt; 子表达式帮手。</target>
        </trans-unit>
        <trans-unit id="1769aac2882e47d76fb4a9a01749791965335a0d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;link-to&lt;/code&gt; helper takes into account query parameters when determining its &quot;active&quot; state, and will set the class appropriately. The active state is determined by calculating whether the query params end up the same after clicking a link. You don't have to supply all of the current, active query params for this to be true.</source>
          <target state="translated">的 &lt;code&gt;link-to&lt;/code&gt; 确定其&amp;ldquo;活动&amp;rdquo;状态时辅助考虑到查询参数，并且将适当地设置的类。通过计算单击链接后查询参数是否最终相同来确定活动状态。您不必提供所有当前的活动查询参数即可。</target>
        </trans-unit>
        <trans-unit id="ce7461f1dc052dfdd78139e56ef3705e2ee872bd" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;live-updating-chart&lt;/code&gt; component will be appended when &lt;code&gt;isMarketOpen&lt;/code&gt; is &lt;code&gt;true&lt;/code&gt;, and the &lt;code&gt;market-close-summary&lt;/code&gt; component will be appended when &lt;code&gt;isMarketOpen&lt;/code&gt; is &lt;code&gt;false&lt;/code&gt;. If the value changes while the app is running, the component will be automatically swapped out accordingly. Note: You should not use this helper when you are consistently rendering the same component. In that case, use standard component syntax, for example:</source>
          <target state="translated">在 &lt;code&gt;live-updating-chart&lt;/code&gt; 时，组件将被追加 &lt;code&gt;isMarketOpen&lt;/code&gt; 是 &lt;code&gt;true&lt;/code&gt; ，和 &lt;code&gt;market-close-summary&lt;/code&gt; 时，组件将被追加 &lt;code&gt;isMarketOpen&lt;/code&gt; 是 &lt;code&gt;false&lt;/code&gt; 。如果在应用程序运行时该值发生更改，该组件将相应地自动换出。注意：始终渲染同一组件时，不应使用此帮助程序。在这种情况下，请使用标准组件语法，例如：</target>
        </trans-unit>
        <trans-unit id="d5bb787fdea75d1b00a27bb3674ec987c8aaa6ff" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;loading&lt;/code&gt; action is fired on the route when a route's &lt;code&gt;model&lt;/code&gt; hook returns a promise that is not already resolved. The current &lt;code&gt;Transition&lt;/code&gt; object is the first parameter and the route that triggered the loading event is the second parameter.</source>
          <target state="translated">在 &lt;code&gt;loading&lt;/code&gt; 时，路由的行动路线上的发射 &lt;code&gt;model&lt;/code&gt; 钩子返回一个尚未解决的承诺。当前的 &lt;code&gt;Transition&lt;/code&gt; 对象是第一个参数，触发加载事件的路由是第二个参数。</target>
        </trans-unit>
        <trans-unit id="62709da4cb7722dd75455fa1b4a1e73beda37c01" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;loading&lt;/code&gt; event</source>
          <target state="translated">在 &lt;code&gt;loading&lt;/code&gt; 事件</target>
        </trans-unit>
        <trans-unit id="51f4b8a7cab225c00b8bad7fe9f237a843ec218c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;location&lt;/code&gt; property determines the type of URL's that your application will use.</source>
          <target state="translated">该 &lt;code&gt;location&lt;/code&gt; 属性决定URL类型的应用程序将使用。</target>
        </trans-unit>
        <trans-unit id="14f62e503b235977ff447d099e3c7bfe5c7fa61c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;location&lt;/code&gt; property returns what implementation of the &lt;code&gt;location&lt;/code&gt; API your application is using, which determines what type of URL is being used.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9eb2d558c702885a649840fb36c05bc2fa210e48" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;max&lt;/code&gt; attribute of input element used with &lt;code&gt;type=&quot;number&quot;&lt;/code&gt; or &lt;code&gt;type=&quot;range&quot;&lt;/code&gt;.</source>
          <target state="translated">与 &lt;code&gt;type=&quot;number&quot;&lt;/code&gt; 或 &lt;code&gt;type=&quot;range&quot;&lt;/code&gt; 一起使用的输入元素的 &lt;code&gt;max&lt;/code&gt; 属性。</target>
        </trans-unit>
        <trans-unit id="761d8a8dfab983312074a19ca9afd183bd59ab2c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;min&lt;/code&gt; attribute of input element used with &lt;code&gt;type=&quot;number&quot;&lt;/code&gt; or &lt;code&gt;type=&quot;range&quot;&lt;/code&gt;.</source>
          <target state="translated">与 &lt;code&gt;type=&quot;number&quot;&lt;/code&gt; 或 &lt;code&gt;type=&quot;range&quot;&lt;/code&gt; 一起使用的输入元素的 &lt;code&gt;min&lt;/code&gt; 属性。</target>
        </trans-unit>
        <trans-unit id="c7131d261d610c4ef91dd5c572c5bc3e35e27588" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;model&lt;/code&gt; hook may automatically re-run in certain conditions, as you'll read about below.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6a16647d6821ede1b677029aeacce468053baa77" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;model&lt;/code&gt;, &lt;code&gt;beforeModel&lt;/code&gt;, and &lt;code&gt;afterModel&lt;/code&gt; hooks described in &lt;a href=&quot;../asynchronous-routing&quot;&gt;Asynchronous Routing&lt;/a&gt; each get called with a transition object. This makes it possible for destination routes to abort attempted transitions.</source>
          <target state="translated">&lt;a href=&quot;../asynchronous-routing&quot;&gt;异步路由中&lt;/a&gt;描述的 &lt;code&gt;model&lt;/code&gt; ， &lt;code&gt;beforeModel&lt;/code&gt; 和 &lt;code&gt;afterModel&lt;/code&gt; 挂钩分别通过转换对象调用。这使得目标路由可以中止尝试的转换。</target>
        </trans-unit>
        <trans-unit id="cf129aa4a0fe0a75f718d18c4bdf9834b17154da" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;module&lt;/code&gt; from QUnit will scope your tests into groups of tests which can be configured and run independently. Make sure to call the &lt;code&gt;setupRenderingTest&lt;/code&gt; function together with the &lt;code&gt;hooks&lt;/code&gt; parameter first in your new module. This will do the necessary setup for testing your component for you, including setting up a way to access the rendered DOM of your component later on in the test, and cleaning up once your tests in this module are finished.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7a07d77d0d198d3536ee44ea45215a0d56f6c718" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;moduleForComponent&lt;/code&gt; helper will find the component by name (&lt;code&gt;pretty-color&lt;/code&gt;) and its template (if available). Make sure to set &lt;code&gt;integration: true&lt;/code&gt; to enable integration test capability.</source>
          <target state="translated">该 &lt;code&gt;moduleForComponent&lt;/code&gt; 助手将找到名称（组件 &lt;code&gt;pretty-color&lt;/code&gt; ）和它的模板（如果可用）。确保设置 &lt;code&gt;integration: true&lt;/code&gt; 以启用集成测试功能。</target>
        </trans-unit>
        <trans-unit id="1f0b4c4d37c65b2375c09c8c275bd27b63a64ba7" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;mut&lt;/code&gt; helper changes the &lt;code&gt;totalClicks&lt;/code&gt; value to what was provided as the &lt;code&gt;fn&lt;/code&gt; argument.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="644ef1f7a187d6716007454db3fc278899d36342" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;mut&lt;/code&gt; helper changes the &lt;code&gt;totalClicks&lt;/code&gt; value to what was provided as the action argument.</source>
          <target state="translated">该 &lt;code&gt;mut&lt;/code&gt; 帮手改变 &lt;code&gt;totalClicks&lt;/code&gt; 值什么作为动作参数提供。</target>
        </trans-unit>
        <trans-unit id="edbf9526f6f8f8b4f51d74862e43afb24dca9baa" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;mut&lt;/code&gt; helper lets you &lt;strong&gt;clearly specify&lt;/strong&gt; that a child &lt;code&gt;Component&lt;/code&gt; can update the (mutable) value passed to it, which will &lt;strong&gt;change the value of the parent component&lt;/strong&gt;.</source>
          <target state="translated">该 &lt;code&gt;mut&lt;/code&gt; 助手可以让你&lt;strong&gt;清楚地说明&lt;/strong&gt;，一个孩子 &lt;code&gt;Component&lt;/code&gt; 可以更新传递给它的（可变）值，这将&lt;strong&gt;改变父组件的价值&lt;/strong&gt;。</target>
        </trans-unit>
        <trans-unit id="47f4565230c7ebd7ee1ea8d2cea1cd329802f14d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;mut&lt;/code&gt; helper, when used with &lt;code&gt;action&lt;/code&gt;, will return a function that sets the value passed to &lt;code&gt;mut&lt;/code&gt; to its first argument. This works like any other closure action and interacts with the other features &lt;code&gt;action&lt;/code&gt; provides. As an example, we can create a button that increments a value passing the value directly to the &lt;code&gt;action&lt;/code&gt;:</source>
          <target state="translated">该 &lt;code&gt;mut&lt;/code&gt; 帮手，当用于 &lt;code&gt;action&lt;/code&gt; ，将返回一个函数，将值传递给 &lt;code&gt;mut&lt;/code&gt; 它的第一个参数。该工作方式与其他任何关闭操作一样，并与 &lt;code&gt;action&lt;/code&gt; 提供的其他功能交互。例如，我们可以创建一个按钮来增加一个值，将值直接传递给 &lt;code&gt;action&lt;/code&gt; ：</target>
        </trans-unit>
        <trans-unit id="9e8e9c42b8f5502e474054e2d46d2d420c98123c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;mut&lt;/code&gt; helper, when used with &lt;code&gt;fn&lt;/code&gt;, will return a function that sets the value passed to &lt;code&gt;mut&lt;/code&gt; to its first argument. As an example, we can create a button that increments a value passing the value directly to the &lt;code&gt;fn&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="56d78c00c87e98a8c72600ac52ce6a122f8289e5" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;namespace&lt;/code&gt; property can be used to prefix requests with a specific URL namespace.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4e89da7babb87da3e213ca546f7a89e9c5ec5c0f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;namespace&lt;/code&gt; property can be used to prefix requests with a specific url namespace.</source>
          <target state="translated">该 &lt;code&gt;namespace&lt;/code&gt; 属性可以用于前缀与特定的URL命名空间的请求。</target>
        </trans-unit>
        <trans-unit id="bfed5d466aa02a365425fe10dfe05ec1cbdf595d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;new&lt;/code&gt; command generates a project structure with the following files and directories:</source>
          <target state="translated">在 &lt;code&gt;new&lt;/code&gt; 命令生成包含以下文件和目录的项目结构：</target>
        </trans-unit>
        <trans-unit id="ed24ef77b982f52329f6db5f8b171af6032be5a8" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;newValue&lt;/code&gt; parameter thus becomes the &lt;code&gt;target.value&lt;/code&gt; property of the event object, which is the value of the input field the user typed. (e.g 'Foo Fighters')</source>
          <target state="translated">因此， &lt;code&gt;newValue&lt;/code&gt; 参数成为事件对象的 &lt;code&gt;target.value&lt;/code&gt; 属性，它是用户键入的输入字段的值。（例如&amp;ldquo; Foo Fighters&amp;rdquo;）</target>
        </trans-unit>
        <trans-unit id="3b9f3dead33374ca86a671206cb69b9ea69de17d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;normalize&lt;/code&gt; method is used to convert a payload received from your external data source into the normalized form &lt;code&gt;store.push()&lt;/code&gt; expects. You should override this method, munge the hash and return the normalized payload.</source>
          <target state="translated">的 &lt;code&gt;normalize&lt;/code&gt; 方法用于从外部数据源接收的有效载荷转换成归一化的形式 &lt;code&gt;store.push()&lt;/code&gt; 的期望。您应该重写此方法，修改哈希值并返回标准化的有效负载。</target>
        </trans-unit>
        <trans-unit id="20e85f3eb6d6503ba01eeae172d760d7f90937b0" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;normalize&lt;/code&gt; method will be called three times:</source>
          <target state="translated">该 &lt;code&gt;normalize&lt;/code&gt; 方法将被调用了三次：</target>
        </trans-unit>
        <trans-unit id="1d0fd3bcdefae28cf2e583c51b6f6f637f4b37a5" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;normalizeResponse&lt;/code&gt; method is used to normalize a payload from the server to a JSON-API Document.</source>
          <target state="translated">该 &lt;code&gt;normalizeResponse&lt;/code&gt; 方法用于从服务器向一个JSON-API文献正常化的有效载荷。</target>
        </trans-unit>
        <trans-unit id="0c2db818043d2ecfecb9f10542f615aa9bab50e8" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;observes&lt;/code&gt; extension of Javascript's Function prototype is available when &lt;code&gt;EmberENV.EXTEND_PROTOTYPES&lt;/code&gt; or &lt;code&gt;EmberENV.EXTEND_PROTOTYPES.Function&lt;/code&gt; is true, which is the default.</source>
          <target state="translated">该 &lt;code&gt;observes&lt;/code&gt; JavaScript的函数原型的扩展时可用 &lt;code&gt;EmberENV.EXTEND_PROTOTYPES&lt;/code&gt; 或 &lt;code&gt;EmberENV.EXTEND_PROTOTYPES.Function&lt;/code&gt; 是真实的，这是默认的。</target>
        </trans-unit>
        <trans-unit id="559f9d9165fd051912e8156d55437a2c4f0bc86f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;on-click-outside&lt;/code&gt; modifier adds the click handler to the &lt;code&gt;document&lt;/code&gt; and returns &lt;em&gt;another function&lt;/em&gt; that should be run when Ember removes the element the modifier is attached to.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0f03013d375dee1ad0017ee24be6c12bc6613607" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;on&lt;/code&gt; extension of Javascript's Function prototype is available when &lt;code&gt;EmberENV.EXTEND_PROTOTYPES&lt;/code&gt; or &lt;code&gt;EmberENV.EXTEND_PROTOTYPES.Function&lt;/code&gt; is true, which is the default.</source>
          <target state="translated">当 &lt;code&gt;EmberENV.EXTEND_PROTOTYPES&lt;/code&gt; 或 &lt;code&gt;EmberENV.EXTEND_PROTOTYPES.Function&lt;/code&gt; 为true时，可以使用Java函数原型的 &lt;code&gt;on&lt;/code&gt; 扩展，这是默认设置。</target>
        </trans-unit>
        <trans-unit id="297b35be5fa3a29b2bfdd9b1aca553208fd9387a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;options&lt;/code&gt; hash is passed as second argument to a transforms' &lt;code&gt;serialize&lt;/code&gt; and &lt;code&gt;deserialize&lt;/code&gt; method. This allows to configure a transformation and adapt the corresponding value, based on the config:</source>
          <target state="translated">该 &lt;code&gt;options&lt;/code&gt; 散列作为第二个参数的变换传递 &lt;code&gt;serialize&lt;/code&gt; 和 &lt;code&gt;deserialize&lt;/code&gt; 方法。这允许基于config配置转换并调整相应的值：</target>
        </trans-unit>
        <trans-unit id="a48eca6e5279e14ea0ca6e2582655554ba9b2b05" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;partial&lt;/code&gt; helper renders another template without changing the template context:</source>
          <target state="translated">该 &lt;code&gt;partial&lt;/code&gt; 的辅助渲染另一个模板而不更改模板背景：</target>
        </trans-unit>
        <trans-unit id="9dab6744a08664ce82b1d25a8cd8dabeafdb4d4d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;pattern&lt;/code&gt; attribute of input element.</source>
          <target state="translated">输入元素的 &lt;code&gt;pattern&lt;/code&gt; 属性。</target>
        </trans-unit>
        <trans-unit id="beed0cd468b2c43cc334c3ee15857caebfa7e869" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;person&lt;/code&gt; model we generated earlier didn't have any attributes. Let's add first and last name, as well as the birthday, using &lt;a href=&quot;http://emberjs.com/api/data/classes/DS.html#method_attr&quot;&gt;&lt;code&gt;DS.attr&lt;/code&gt;&lt;/a&gt;:</source>
          <target state="translated">我们之前生成的 &lt;code&gt;person&lt;/code&gt; 模型没有任何属性。让我们使用&lt;a href=&quot;http://emberjs.com/api/data/classes/DS.html#method_attr&quot;&gt; &lt;code&gt;DS.attr&lt;/code&gt; &lt;/a&gt;添加名字和姓氏以及生日：</target>
        </trans-unit>
        <trans-unit id="90725d198f3ce393688476515379f34e09113068" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;person&lt;/code&gt; model we generated earlier didn't have any attributes. Let's add first and last name, as well as the birthday, using &lt;a href=&quot;https://api.emberjs.com/ember-data/release/functions/@ember-data%2Fmodel/attr&quot;&gt;&lt;code&gt;attr&lt;/code&gt;&lt;/a&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c726fa5adf1c99c0bbb0555060826f16888f5c7b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;primaryKey&lt;/code&gt; is used when serializing and deserializing data. Ember Data always uses the &lt;code&gt;id&lt;/code&gt; property to store the id of the record. The external source may not always follow this convention. In these cases it is useful to override the &lt;code&gt;primaryKey&lt;/code&gt; property to match the &lt;code&gt;primaryKey&lt;/code&gt; of your external store.</source>
          <target state="translated">所述 &lt;code&gt;primaryKey&lt;/code&gt; 序列化和反序列化数据时使用。灰烬数据始终使用 &lt;code&gt;id&lt;/code&gt; 属性存储记录的ID。外部来源可能并不总是遵循此约定。在这些情况下，重写 &lt;code&gt;primaryKey&lt;/code&gt; 属性以匹配外部存储的 &lt;code&gt;primaryKey&lt;/code&gt; 很有用。</target>
        </trans-unit>
        <trans-unit id="1ddda9eaba646249c47555954c9e00b3441e3959" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;property&lt;/code&gt; extension of Javascript's Function prototype is available when &lt;code&gt;EmberENV.EXTEND_PROTOTYPES&lt;/code&gt; or &lt;code&gt;EmberENV.EXTEND_PROTOTYPES.Function&lt;/code&gt; is &lt;code&gt;true&lt;/code&gt;, which is the default.</source>
          <target state="translated">当 &lt;code&gt;EmberENV.EXTEND_PROTOTYPES&lt;/code&gt; 或 &lt;code&gt;EmberENV.EXTEND_PROTOTYPES.Function&lt;/code&gt; 为 &lt;code&gt;true&lt;/code&gt; 时，可以使用Javascript函数原型的 &lt;code&gt;property&lt;/code&gt; 扩展名，这是默认值。</target>
        </trans-unit>
        <trans-unit id="741ea22ea557846205bbcb6432415861ed43b265" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;push()&lt;/code&gt; method is also important when working with complex endpoints. You may find your application has an endpoint that performs some business logic then creates several records. This likely does not map cleanly to Ember Data's existing &lt;code&gt;save()&lt;/code&gt; API which is structured around persisting a single record. Instead you should make your own custom AJAX request and push the resulting model data into the store so it can be accessed by other parts of your application.</source>
          <target state="translated">当处理复杂的端点时， &lt;code&gt;push()&lt;/code&gt; 方法也很重要。您可能会发现您的应用程序具有执行某些业务逻辑的端点，然后创建了多个记录。这可能无法清晰地映射到Ember Data现有的 &lt;code&gt;save()&lt;/code&gt; API，该API是围绕持久保存一条记录而构造的。相反，您应该提出自己的自定义AJAX请求，并将结果模型数据推送到存储中，以便应用程序的其他部分可以访问它们。</target>
        </trans-unit>
        <trans-unit id="aae259eec78af16010c733438f33779155e77926" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;push()&lt;/code&gt; method is also important when working with complex endpoints. You may find your application has an endpoint that performs some business logic then creates several records. This likely does not map cleanly to Ember Data's existing &lt;code&gt;save()&lt;/code&gt; API which is structured around persisting a single record. Instead you should make your own custom network request and push the resulting model data into the store so it can be accessed by other parts of your application.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aba7f7dcf3bc1a43f03c260d10824580744e938c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;query()&lt;/code&gt; and &lt;code&gt;queryRecord()&lt;/code&gt; methods each take a &lt;code&gt;query&lt;/code&gt; argument that is serialized directly into the URL query string and the &lt;code&gt;include&lt;/code&gt; parameter may form part of that argument. For example:</source>
          <target state="translated">的 &lt;code&gt;query()&lt;/code&gt; 和 &lt;code&gt;queryRecord()&lt;/code&gt; 的每个方法都有一个 &lt;code&gt;query&lt;/code&gt; 是直接序列化到URL查询字符串和参数 &lt;code&gt;include&lt;/code&gt; 参数可形成参数的一部分。例如：</target>
        </trans-unit>
        <trans-unit id="40ae82990914385fed7743c850d721020c13355a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;query-params&lt;/code&gt; helper can be used to set query params on a link:</source>
          <target state="translated">该 &lt;code&gt;query-params&lt;/code&gt; 助手可用于链路上的一组查询参数：</target>
        </trans-unit>
        <trans-unit id="a8fe29792accf52f26efa3e35355502b262e7a69" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;query&lt;/code&gt; argument is a simple JavaScript object that will be passed directly to the server as parameters.</source>
          <target state="translated">该 &lt;code&gt;query&lt;/code&gt; 的说法是，将直接传递到服务器作为参数的简单的JavaScript对象。</target>
        </trans-unit>
        <trans-unit id="3bceeb7be0a9c6e0f887c2b26aab4a16695618f5" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;query&lt;/code&gt; method makes an Ajax (HTTP GET) request to a URL computed by &lt;code&gt;buildURL&lt;/code&gt;, and returns a promise for the resulting payload.</source>
          <target state="translated">该 &lt;code&gt;query&lt;/code&gt; 方法使得一个Ajax（HTTP GET）请求由计算的URL &lt;code&gt;buildURL&lt;/code&gt; ，并返回所得到的有效载荷的承诺。</target>
        </trans-unit>
        <trans-unit id="ac86f04028c107b848f45d261d4b4fb39028dabb" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;queryRecord()&lt;/code&gt; method is invoked when the store is asked for a single record through a query object.</source>
          <target state="translated">所述 &lt;code&gt;queryRecord()&lt;/code&gt; 当商店被要求用于通过查询对象的单个记录方法被调用。</target>
        </trans-unit>
        <trans-unit id="5f566f5912a6205cfc53d29bb1ff422d225d2210" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;queryRecord&lt;/code&gt; method makes an Ajax (HTTP GET) request to a URL computed by &lt;code&gt;buildURL&lt;/code&gt;, and returns a promise for the resulting payload.</source>
          <target state="translated">该 &lt;code&gt;queryRecord&lt;/code&gt; 方法使得一个Ajax（HTTP GET）请求由计算的URL &lt;code&gt;buildURL&lt;/code&gt; ，并返回所得到的有效载荷的承诺。</target>
        </trans-unit>
        <trans-unit id="d4ea793c0781cfc5c0cec6bad75f521580c0c469" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;render&lt;/code&gt; queue contains jobs meant for rendering, these will typically update the DOM.</source>
          <target state="translated">在 &lt;code&gt;render&lt;/code&gt; 队列包含的意思进行渲染，这些通常会更新DOM工作。</target>
        </trans-unit>
        <trans-unit id="c7f84a235783d75983b71d54f1ff2d957db34aa0" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;rental_id&lt;/code&gt; will now be passed to the route.</source>
          <target state="translated">现在， &lt;code&gt;rental_id&lt;/code&gt; 将传递到路线。</target>
        </trans-unit>
        <trans-unit id="2ab02947d511f36cd80dcd1ce1d3df5d48a3288d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;rootElement&lt;/code&gt; can be either a DOM element or a jQuery-compatible selector string. Note that &lt;em&gt;views appended to the DOM outside the root element will not receive events.&lt;/em&gt; If you specify a custom root element, make sure you only append views inside it!</source>
          <target state="translated">的 &lt;code&gt;rootElement&lt;/code&gt; 的可以是DOM元素或一个jQuery兼容选择字符串。请注意，&lt;em&gt;附加到根元素外部的DOM的视图将不会接收事件。&lt;/em&gt;如果指定自定义根元素，请确保仅在其中添加视图！</target>
        </trans-unit>
        <trans-unit id="3a8da5a439d38001229221cfd68b305ff89d4757" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;rootURL&lt;/code&gt; property represents the URL of the root of the application, '/' by default. This prefix is assumed on all routes defined on this app.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dd06e623a0e6df47b04f0a8932c4bef6f6416747" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;routeDidChange&lt;/code&gt; event only fires once a transition has settled. This includes aborts and error substates. Like the &lt;code&gt;routeWillChange&lt;/code&gt; event it receives a Transition as the sole argument.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d04a86b8c675c12689a56d91099c0d28bdfd9b96" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;routeWillChange&lt;/code&gt; event fires whenever a new route is chosen as the desired target of a transition. This includes &lt;code&gt;transitionTo&lt;/code&gt;, &lt;code&gt;replaceWith&lt;/code&gt;, all redirection for any reason including error handling, and abort. Aborting implies changing the desired target back to where you already were. Once a transition has completed, &lt;code&gt;routeDidChange&lt;/code&gt; fires.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="65791ea1d9b51d6b065121c4a5924caf3e445b87" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;routeWillChange&lt;/code&gt; event is fired at the beginning of any attempted transition with a &lt;code&gt;Transition&lt;/code&gt; object as the sole argument. This action can be used for aborting, redirecting, or decorating the transition from the currently active routes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6cb53ef77e44dde0ccc9cdeab769f0e6ab2e0202" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;routerTransitions&lt;/code&gt; queue contains transition jobs in the router.</source>
          <target state="translated">该 &lt;code&gt;routerTransitions&lt;/code&gt; 队列包含在路由器过渡工作。</target>
        </trans-unit>
        <trans-unit id="914db6574906c68800e0d33d2e398128993fa468" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;select&lt;/code&gt; action handler would be called with a single argument containing the post model:</source>
          <target state="translated">在 &lt;code&gt;select&lt;/code&gt; 操作处理程序将使用一个包含Post模型的单一参数来调用：</target>
        </trans-unit>
        <trans-unit id="df2eb6d01d9ec8f4cdf6e2424d4b714982ede9b8" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;sender&lt;/code&gt; is the object that changed. The &lt;code&gt;key&lt;/code&gt; is the property that changes. The &lt;code&gt;value&lt;/code&gt; property is currently reserved and unused. The &lt;code&gt;rev&lt;/code&gt; is the last property revision of the object when it changed, which you can use to detect if the key value has really changed or not.</source>
          <target state="translated">的 &lt;code&gt;sender&lt;/code&gt; 是改变的对象。的 &lt;code&gt;key&lt;/code&gt; 是改变性质。该 &lt;code&gt;value&lt;/code&gt; 酒店目前保留的和未使用。该 &lt;code&gt;rev&lt;/code&gt; 是当它改变了对象，你可以用它来检测，如果该键值确实改变与否的最后一个属性的修订。</target>
        </trans-unit>
        <trans-unit id="320d415a375ebee02086a1803913992fa35a52e5" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;serialize&lt;/code&gt; and &lt;code&gt;deserialize&lt;/code&gt; keys support 3 values:</source>
          <target state="translated">该 &lt;code&gt;serialize&lt;/code&gt; 和 &lt;code&gt;deserialize&lt;/code&gt; 键支持3个值：</target>
        </trans-unit>
        <trans-unit id="6f25c439a903f72adbb9b751611fc24318fc0bef" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;serialize&lt;/code&gt; method is used when a record is saved in order to convert the record into the form that your external data source expects.</source>
          <target state="translated">在 &lt;code&gt;serialize&lt;/code&gt; 时保存记录，以记录转换成您的外部数据源预计形式使用的方法。</target>
        </trans-unit>
        <trans-unit id="ca79fc713fd97bd184a81e559e72c3c10e563ff9" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;set&lt;/code&gt; function should accept two parameters, &lt;code&gt;key&lt;/code&gt; and &lt;code&gt;value&lt;/code&gt;. The value returned from &lt;code&gt;set&lt;/code&gt; will be the new value of the property.</source>
          <target state="translated">该 &lt;code&gt;set&lt;/code&gt; 函数应接受两个参数， &lt;code&gt;key&lt;/code&gt; 和 &lt;code&gt;value&lt;/code&gt; 。从 &lt;code&gt;set&lt;/code&gt; 返回的值将是该属性的新值。</target>
        </trans-unit>
        <trans-unit id="a684fad7961dc364370365a25b511543e6cc74b9" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;setProps&lt;/code&gt; action directly sets one property, and calls the method to set the other. In our generated test file, Ember CLI already uses the &lt;code&gt;module&lt;/code&gt; and the &lt;code&gt;setupTest&lt;/code&gt; helpers to set up a test container:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e2b783248728ef736c417d1b8a02ac7a76ba4c00" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;setProps&lt;/code&gt; action directly sets one property, and calls the method to set the other. In our generated test, ember-cli already uses the &lt;code&gt;moduleFor&lt;/code&gt; helper to set up a test container:</source>
          <target state="translated">该 &lt;code&gt;setProps&lt;/code&gt; 动作直接设置一个属性，并调用设置其他的方法。在我们生成的测试中，ember-cli已经使用 &lt;code&gt;moduleFor&lt;/code&gt; 助手来设置测试容器：</target>
        </trans-unit>
        <trans-unit id="a7a5bc8047dfc31a806acf70a107363435688016" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;signUp&lt;/code&gt; action is simply a function defined on the &lt;code&gt;actions&lt;/code&gt; hash of a component. Since the action is assigned to an inline handler, the function definition can define the event object as its first parameter.</source>
          <target state="translated">的 &lt;code&gt;signUp&lt;/code&gt; 动作是简单地在所定义的功能 &lt;code&gt;actions&lt;/code&gt; 散列一个组分。由于操作已分配给内联处理程序，因此函数定义可以将事件对象定义为其第一个参数。</target>
        </trans-unit>
        <trans-unit id="905ce447cd074e63c0b217b907cdbd799228dbdc" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;size&lt;/code&gt; of the text field in characters.</source>
          <target state="translated">文本字段的 &lt;code&gt;size&lt;/code&gt; （以字符为单位）。</target>
        </trans-unit>
        <trans-unit id="ee3dc15a96239617e5bccc59e1e5326f374fae3a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;static&lt;/code&gt; keyword can be applied to all class elements.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="60ce209fb9d274970aad161ade621ac9ba4ac11c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;store&lt;/code&gt; property is the application's &lt;code&gt;store&lt;/code&gt; that contains all records. It can be used to look up serializers for other model types that may be nested inside the payload response.</source>
          <target state="translated">该 &lt;code&gt;store&lt;/code&gt; 属性是应用程序的 &lt;code&gt;store&lt;/code&gt; ，它包含的所有记录。它可用于查找可能嵌套在有效负载响应中的其他模型类型的序列化器。</target>
        </trans-unit>
        <trans-unit id="296139528fe79390dc0a604c903db62d7f189968" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;sync&lt;/code&gt; queue contains binding synchronization jobs.</source>
          <target state="translated">在 &lt;code&gt;sync&lt;/code&gt; 队列包含结合同步作业。</target>
        </trans-unit>
        <trans-unit id="18bb76e64d8cba533e55a608d9dc04cd74b53eb3" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;templates/posts/index.hbs&lt;/code&gt; file has the following:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d45888c4b5f26f9dbee726ba4b3f0dd55bd31fed" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;templates/posts/post.hbs&lt;/code&gt; file has the following:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3ff37492a4d1b522cbb2957ffd8cce10aa8ee652" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;todos&lt;/code&gt; property of the component is changed to a different array.</source>
          <target state="translated">组件的 &lt;code&gt;todos&lt;/code&gt; 属性更改为另一个数组。</target>
        </trans-unit>
        <trans-unit id="47de40fd6b0fa63948385f1ece4518b508dfa9bf" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;total&lt;/code&gt; is now computed by multiplying a piece of &lt;em&gt;local state&lt;/em&gt; (&lt;code&gt;this.count&lt;/code&gt;) with an argument (&lt;code&gt;this.args.multiple&lt;/code&gt;). You can mix and match local state and arguments however you wish, which allows you to easily break up a component into smaller pieces.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="131b771f6ba43c138d365e36164154f5cb2e8c6d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;type&lt;/code&gt; attribute of the input element.</source>
          <target state="translated">输入元素的 &lt;code&gt;type&lt;/code&gt; 属性。</target>
        </trans-unit>
        <trans-unit id="4c5bc75c3e6f8899fec6ea16cb876d5a2fdd47fa" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;unbound&lt;/code&gt; helper only accepts a single argument, and it return an unbound value.</source>
          <target state="translated">将 &lt;code&gt;unbound&lt;/code&gt; 助手只接受一个参数，并返回一个未绑定的值。</target>
        </trans-unit>
        <trans-unit id="5de73c1d5e1af2fc912363ffcf138ae01e88ec89" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;unless&lt;/code&gt; helper is the inverse of the &lt;code&gt;if&lt;/code&gt; helper. It displays if a value is falsey (&quot;not true&quot; or &quot;is false&quot;). Example values that will display with &lt;code&gt;unless&lt;/code&gt;: &lt;code&gt;false&lt;/code&gt;, &lt;code&gt;undefined&lt;/code&gt;, &lt;code&gt;null&lt;/code&gt;, &lt;code&gt;&quot;&quot;&lt;/code&gt;, &lt;code&gt;0&lt;/code&gt;, &lt;code&gt;NaN&lt;/code&gt; or an empty array.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="efdf958209e8428c763eee6028027f027891e782" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;updateRecord&lt;/code&gt; method serializes the record and makes an Ajax (HTTP PUT) request to a URL computed by &lt;code&gt;buildURL&lt;/code&gt;.</source>
          <target state="translated">该 &lt;code&gt;updateRecord&lt;/code&gt; 方法序列化记录并使得一个Ajax（HTTP PUT）请求由计算的URL &lt;code&gt;buildURL&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="1b6470eade078efa5a7597b68a9c894e7656a268" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;value&lt;/code&gt; attribute of the input element. As the user inputs text, this property is updated live.</source>
          <target state="translated">输入元素的 &lt;code&gt;value&lt;/code&gt; 属性。当用户输入文本时，此属性将实时更新。</target>
        </trans-unit>
        <trans-unit id="89d5c88cd2756f1f000db7d6ac6178bf03b70a15" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;wait&lt;/code&gt; helper is built into &lt;code&gt;registerAsyncHelper&lt;/code&gt; by default. You will not need to &lt;code&gt;return app.testHelpers.wait();&lt;/code&gt; - the wait behavior is provided for you.</source>
          <target state="translated">默认情况下， &lt;code&gt;wait&lt;/code&gt; helper内置在 &lt;code&gt;registerAsyncHelper&lt;/code&gt; 中。您无需 &lt;code&gt;return app.testHelpers.wait();&lt;/code&gt; -为您提供了等待行为。</target>
        </trans-unit>
        <trans-unit id="2a3d56e189d128908470bf74976b11ba03b8229c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;willTransition&lt;/code&gt; action is fired at the beginning of any attempted transition with a &lt;code&gt;Transition&lt;/code&gt; object as the sole argument. This action can be used for aborting, redirecting, or decorating the transition from the currently active routes.</source>
          <target state="translated">该 &lt;code&gt;willTransition&lt;/code&gt; 动作在与任何试图转变的开始解雇 &lt;code&gt;Transition&lt;/code&gt; 对象作为唯一的参数。此操作可用于中止，重定向或修饰从当前活动路由的过渡。</target>
        </trans-unit>
        <trans-unit id="dac36ab23aab0d6a37141a494ed024c387292289" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;{{#each}}&lt;/code&gt; helper loops over elements in a collection. It is an extension of the base Handlebars &lt;code&gt;{{#each}}&lt;/code&gt; helper.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="816958a0f032f49a594b1d8da2c79bf4235daf44" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;{{#each}}&lt;/code&gt; helper loops over elements in a collection. It is an extension of the base Handlebars &lt;code&gt;{{#each}}&lt;/code&gt; helper. The default behavior of &lt;code&gt;{{#each}}&lt;/code&gt; is to yield its inner block once for every item in an array passing the item as the first block parameter.</source>
          <target state="translated">该 &lt;code&gt;{{#each}}&lt;/code&gt; 帮手遍历集合中的元素。它是基础Handlebars &lt;code&gt;{{#each}}&lt;/code&gt; 帮助程序的扩展。 &lt;code&gt;{{#each}}&lt;/code&gt; 的默认行为是，将数组中的每个项目作为第一个块参数传递给该项目，以一次产生其内部块。</target>
        </trans-unit>
        <trans-unit id="c79d6054773867f3779b96924372f54a35225401" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;{{action}}&lt;/code&gt; helper provides a way to pass triggers for behavior (usually just a function) between components, and into components from controllers.</source>
          <target state="translated">的 &lt;code&gt;{{action}}&lt;/code&gt; 助手提供了一种方式来传递部件之间，用于行为触发（通常只是一个函数），并且进入从控制器组件。</target>
        </trans-unit>
        <trans-unit id="dc88bcada3bcd41329cc8f3578d0c16a488a1ac2" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;{{action}}&lt;/code&gt; modifier called &lt;code&gt;event.preventDefault()&lt;/code&gt; under the hood, but the &lt;code&gt;{{on}}&lt;/code&gt; modifier does not, so if you need to do anything other than the default action for a particular event, you must call &lt;code&gt;event.preventDefault&lt;/code&gt; within the action.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0a6c5532500bbeb15495208ec4c966b8426e5b6f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;{{component}}&lt;/code&gt; helper lets you add instances of &lt;code&gt;Component&lt;/code&gt; to a template. See &lt;a href=&quot;https://api.emberjs.com/ember/release/classes/Component&quot;&gt;Component&lt;/a&gt; for additional information on how a &lt;code&gt;Component&lt;/code&gt; functions. &lt;code&gt;{{component}}&lt;/code&gt;'s primary use is for cases where you want to dynamically change which type of component is rendered as the state of your application changes. This helper has three modes: inline, block, and nested.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2188ae955717f0311ee55bfeb274d37ec4fab50a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;{{component}}&lt;/code&gt; helper lets you add instances of &lt;code&gt;Ember.Component&lt;/code&gt; to a template. See &lt;a href=&quot;https://emberjs.com/api/classes/Ember.Component.html&quot;&gt;Ember.Component&lt;/a&gt; for additional information on how a &lt;code&gt;Component&lt;/code&gt; functions. &lt;code&gt;{{component}}&lt;/code&gt;'s primary use is for cases where you want to dynamically change which type of component is rendered as the state of your application changes. This helper has three modes: inline, block, and nested.</source>
          <target state="translated">使用 &lt;code&gt;{{component}}&lt;/code&gt; 帮助程序，您可以将 &lt;code&gt;Ember.Component&lt;/code&gt; 实例添加到模板中。有关 &lt;code&gt;Component&lt;/code&gt; 如何工作的其他信息，请参见&lt;a href=&quot;https://emberjs.com/api/classes/Ember.Component.html&quot;&gt;Ember.Component&lt;/a&gt;。 &lt;code&gt;{{component}}&lt;/code&gt; 的主要用途是要在应用程序状态更改时动态更改要呈现的组件类型的情况。该帮助器具有三种模式：内联，块和嵌套。</target>
        </trans-unit>
        <trans-unit id="ccb3abeccf1d3935a6c118b1810a1a10f67f5fd8" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;{{each-in}}&lt;/code&gt; helper loops over properties on an object.</source>
          <target state="translated">的 &lt;code&gt;{{each-in}}&lt;/code&gt; 辅助环上的对象的属性。</target>
        </trans-unit>
        <trans-unit id="240feaf7ad994caa30e9d9dad22a171983e55e2d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;{{fn}}&lt;/code&gt; Helper</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d895059b0f1b0624bd9622f3e083c7eff2cb675f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;{{fn}}&lt;/code&gt; helper</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3212095109428b4cbc3365440b62953596163903" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;{{get}}&lt;/code&gt; helper allows you to dynamically specify which property to bind, while the &lt;code&gt;{{mut}}&lt;/code&gt; helper allows the binding to be updated from the input. See the respective helper documentation for more detail.</source>
          <target state="translated">该 &lt;code&gt;{{get}}&lt;/code&gt; 助手允许你动态地指定属性的绑定，而 &lt;code&gt;{{mut}}&lt;/code&gt; 助手允许的结合从输入更新。有关更多详细信息，请参见相应的帮助程序文档。</target>
        </trans-unit>
        <trans-unit id="1dd52b3d4451df8b3e98fa8c26e98140209780df" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;{{get}}&lt;/code&gt; helper allows you to dynamically specify which property to bind, while the &lt;code&gt;{{mut}}&lt;/code&gt; helper allows the binding to be updated from the input. See the respective helper documentation for more detail: &lt;a href=&quot;https://api.emberjs.com/ember/release/classes/Ember.Templates.helpers/methods#get&quot;&gt;&lt;code&gt;{{get}}&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;https://api.emberjs.com/ember/release/classes/Ember.Templates.helpers/methods#mut&quot;&gt;&lt;code&gt;{{mut}}&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3b4f5775189e04e5beb9481aaf74caccbff888df" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;{{get}}&lt;/code&gt; helper can also respect mutable values itself. For example:</source>
          <target state="translated">该 &lt;code&gt;{{get}}&lt;/code&gt; 帮手也可以尊重可变值本身。例如：</target>
        </trans-unit>
        <trans-unit id="bd0b47992fc4b78b9df9bbf1e6731c7ed45259f9" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;{{input}}&lt;/code&gt; helper lets you create an HTML &lt;code&gt;&amp;lt;input /&amp;gt;&lt;/code&gt; component. It causes an &lt;code&gt;Ember.TextField&lt;/code&gt; component to be rendered. For more info, see the &lt;a href=&quot;https://emberjs.com/api/classes/Ember.TextField.html&quot;&gt;Ember.TextField&lt;/a&gt; docs and the &lt;a href=&quot;https://emberjs.com/guides/templates/input-helpers/&quot;&gt;templates guide&lt;/a&gt;.</source>
          <target state="translated">使用 &lt;code&gt;{{input}}&lt;/code&gt; 帮助程序，您可以创建HTML &lt;code&gt;&amp;lt;input /&amp;gt;&lt;/code&gt; 组件。这将导致呈现 &lt;code&gt;Ember.TextField&lt;/code&gt; 组件。有关更多信息，请参见&lt;a href=&quot;https://emberjs.com/api/classes/Ember.TextField.html&quot;&gt;Ember.TextField&lt;/a&gt;文档和&lt;a href=&quot;https://emberjs.com/guides/templates/input-helpers/&quot;&gt;模板指南&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="a7acad9bb4a31001b61e35a4c0adf75c035da764" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;{{link-to}}&lt;/code&gt; Component</source>
          <target state="translated">该 &lt;code&gt;{{link-to}}&lt;/code&gt; 组件</target>
        </trans-unit>
        <trans-unit id="3ea57e523caa15a38446ec50b9e79ddf92910c41" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;{{link-to}}&lt;/code&gt; component renders a link to the supplied &lt;code&gt;routeName&lt;/code&gt; passing an optionally supplied model to the route as its &lt;code&gt;model&lt;/code&gt; context of the route. The block for &lt;code&gt;{{link-to}}&lt;/code&gt; becomes the innerHTML of the rendered element:</source>
          <target state="translated">的 &lt;code&gt;{{link-to}}&lt;/code&gt; 组件呈现一个链接到供给 &lt;code&gt;routeName&lt;/code&gt; 传递一个任选供给模型来作为其路径 &lt;code&gt;model&lt;/code&gt; 的路由上下文。 &lt;code&gt;{{link-to}}&lt;/code&gt; 的块成为呈现元素的innerHTML：</target>
        </trans-unit>
        <trans-unit id="e774d713fb0f90f4a303ddde2564100df64e2437" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;{{link-to}}&lt;/code&gt; component takes one or two arguments:</source>
          <target state="translated">的 &lt;code&gt;{{link-to}}&lt;/code&gt; 部件接受一个或两个参数：</target>
        </trans-unit>
        <trans-unit id="39dd886ddbed7524e4a83856c25fa9788916f62d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;{{link-to}}&lt;/code&gt; helper will also add an &lt;code&gt;active&lt;/code&gt; class to the link that points to the currently active route.</source>
          <target state="translated">该 &lt;code&gt;{{link-to}}&lt;/code&gt; 帮手也将增加一个 &lt;code&gt;active&lt;/code&gt; 的链接类，指向当前活动的路线。</target>
        </trans-unit>
        <trans-unit id="90bfcd41e8565432c07cbbddf8858b5ba91f619a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;{{log}}&lt;/code&gt; helper also accepts primitive types such as strings or numbers.</source>
          <target state="translated">的 &lt;code&gt;{{log}}&lt;/code&gt; 助手也接受原语类型，如字符串或数字。</target>
        </trans-unit>
        <trans-unit id="e201996bfd3ba8afd0712fffee879e9357d52b69" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;{{mount}}&lt;/code&gt; helper lets you embed a routeless engine in a template. Mounting an engine will cause an instance to be booted and its &lt;code&gt;application&lt;/code&gt; template to be rendered.</source>
          <target state="translated">使用 &lt;code&gt;{{mount}}&lt;/code&gt; 帮助程序，您可以在模板中嵌入无路由引擎。挂载引擎将导致实例被启动并呈现其 &lt;code&gt;application&lt;/code&gt; 模板。</target>
        </trans-unit>
        <trans-unit id="2e95ed4a7acef7c8d23a923fbf339c5edcd4cf66" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;{{on}}&lt;/code&gt; Modifier</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c7b0a3359c41146c4be8f10c4bd1c1af9ffd5991" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;{{on}}&lt;/code&gt; modifier</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b0114680e3acb525c836a2dfd5bc6f7c20f8fce9" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;{{on}}&lt;/code&gt; modifier lets you easily add event listeners (it uses &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener&quot;&gt;EventTarget.addEventListener&lt;/a&gt; internally).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="31eeebbd0adb9055cb1d8e00dfafd1d5331e5d95" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;{{outlet}}&lt;/code&gt; helper lets you specify where a child route will render in your template. An important use of the &lt;code&gt;{{outlet}}&lt;/code&gt; helper is in your application's &lt;code&gt;application.hbs&lt;/code&gt; file:</source>
          <target state="translated">使用 &lt;code&gt;{{outlet}}&lt;/code&gt; 帮助程序，您可以指定子路径将在模板中呈现的位置。 &lt;code&gt;{{outlet}}&lt;/code&gt; 助手的重要用途是在应用程序的 &lt;code&gt;application.hbs&lt;/code&gt; 文件中：</target>
        </trans-unit>
        <trans-unit id="0ebbf8fe3922c7aefb3561c65af8dc306db37942" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;{{unbound}}&lt;/code&gt; helper disconnects the one-way binding of a property, essentially freezing its value at the moment of rendering. For example, in this example the display of the variable &lt;code&gt;name&lt;/code&gt; will not change even if it is set with a new value:</source>
          <target state="translated">该 &lt;code&gt;{{unbound}}&lt;/code&gt; 帮手断开单向属性的结合，在渲染的时刻基本上是冻结其价值。例如，在此示例中，即使将变量 &lt;code&gt;name&lt;/code&gt; 设置为新值，其显示也不会更改：</target>
        </trans-unit>
        <trans-unit id="d49990e3735b9831607abf7ee9c337d84e066164" translate="yes" xml:space="preserve">
          <source>The &lt;em&gt;structure&lt;/em&gt; of these components is identical, but they have somewhat different content (the user's first initial) and attributes (the &lt;code&gt;title&lt;/code&gt; and &lt;code&gt;class&lt;/code&gt; attributes).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dfb95953e4853806edc231fdf38f698d6bd6a93e" translate="yes" xml:space="preserve">
          <source>The API for &lt;code&gt;{{on}}&lt;/code&gt; is the same as JavaScript's native &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener&quot;&gt;&lt;code&gt;addEventListener&lt;/code&gt;&lt;/a&gt;. It receives the event name as the first argument, and a callback function as the second argument:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ea5c5af6a1cd7d259b450f74a023e4bd5f103ab7" translate="yes" xml:space="preserve">
          <source>The Application Template</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1c3bbef8d77a015f1b44f113e8413c77e1d8e3ae" translate="yes" xml:space="preserve">
          <source>The CLI &lt;code&gt;generate util&lt;/code&gt; command will create a utility file and a unit test. We'll delete the unit test since we don't want to test Google code.</source>
          <target state="translated">CLI &lt;code&gt;generate util&lt;/code&gt; 命令将创建一个实用程序文件和一个单元测试。由于我们不想测试Google代码，因此我们将删除单元测试。</target>
        </trans-unit>
        <trans-unit id="314686d9ca63241b41addc06dbaf29e1f9de2111" translate="yes" xml:space="preserve">
          <source>The CSS class name used for active classes can be customized for a single use of &lt;code&gt;{{link-to}}&lt;/code&gt; by passing an &lt;code&gt;activeClass&lt;/code&gt; option:</source>
          <target state="translated">可以通过传递 &lt;code&gt;activeClass&lt;/code&gt; 选项，为 &lt;code&gt;{{link-to}}&lt;/code&gt; 的单次使用自定义用于活动类的CSS类名称：</target>
        </trans-unit>
        <trans-unit id="a18277d28224fe13bf61456994d23cdddba18d00" translate="yes" xml:space="preserve">
          <source>The CSS class to apply to &lt;code&gt;LinkComponent&lt;/code&gt;'s element when its &lt;code&gt;active&lt;/code&gt; property is &lt;code&gt;true&lt;/code&gt;.</source>
          <target state="translated">当其 &lt;code&gt;active&lt;/code&gt; 属性为 &lt;code&gt;true&lt;/code&gt; 时，应用于 &lt;code&gt;LinkComponent&lt;/code&gt; 元素的CSS类。</target>
        </trans-unit>
        <trans-unit id="3560d1810ba6a290f018a30acb7a6abe17dc478d" translate="yes" xml:space="preserve">
          <source>The Component Lifecycle</source>
          <target state="translated">组件生命周期</target>
        </trans-unit>
        <trans-unit id="54973a80b2d95fa00a37554801d6e43a8529a06b" translate="yes" xml:space="preserve">
          <source>The Component Tree</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d8f803b88937c7eaa188957977fa8a0218a4aa93" translate="yes" xml:space="preserve">
          <source>The Components tab displays a collapsible representation of the views and components that are currently being rendered. Selecting a component from the tree will open it in the &lt;a href=&quot;../object-inspector&quot;&gt;Object Inspector&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="be34b5a31efa66b89e017638eee272b8df985bde" translate="yes" xml:space="preserve">
          <source>The DOM events for which the event dispatcher should listen.</source>
          <target state="translated">事件分配器应该监听的DOM事件。</target>
        </trans-unit>
        <trans-unit id="16262c4e9109f80339ca991e19c44c9238c16f0c" translate="yes" xml:space="preserve">
          <source>The Data tab is kept in sync with the data loaded in your application. Any record additions, deletions, or changes are reflected immediately. If you have unsaved records, they will be displayed in green by clicking on the New pill.</source>
          <target state="translated">数据选项卡与您的应用程序中加载的数据保持同步。任何记录的添加、删除或更改都会立即反映出来。如果您有未保存的记录,点击 &quot;新药丸&quot;,它们将以绿色显示。</target>
        </trans-unit>
        <trans-unit id="d52fbf4800c86d55bd033e9092c8b9094d06aa21" translate="yes" xml:space="preserve">
          <source>The DefaultResolver defines the default lookup rules to resolve container lookups before consulting the container for registered items:</source>
          <target state="translated">DefaultResolver定义了默认的查找规则,以便在查询容器中的注册项目之前解析容器查找。</target>
        </trans-unit>
        <trans-unit id="c29711481fa25b48f2527c2fa7d8f0b8bed7a3b1" translate="yes" xml:space="preserve">
          <source>The Development Server</source>
          <target state="translated">开发服务器</target>
        </trans-unit>
        <trans-unit id="ed05a3cd2719814bf85e78b39e4626d5b1cd6abf" translate="yes" xml:space="preserve">
          <source>The Duration column displays the render time for a given template, including the template's children.</source>
          <target state="translated">Duration列显示给定模板的渲染时间,包括模板的子模板。</target>
        </trans-unit>
        <trans-unit id="2ea15e43ed02f23a492330509b7d70ff1b380882" translate="yes" xml:space="preserve">
          <source>The ENV object contains three important keys:</source>
          <target state="translated">ENV对象包含三个重要的键。</target>
        </trans-unit>
        <trans-unit id="0f945314114021b149d52673626a64f4c3fb7096" translate="yes" xml:space="preserve">
          <source>The Ember Data store provides an interface for retrieving records of a single type.</source>
          <target state="translated">Ember数据存储提供了一个检索单一类型记录的接口。</target>
        </trans-unit>
        <trans-unit id="487c17cf393eda62f1f2c80da81270c64a1b3885" translate="yes" xml:space="preserve">
          <source>The Ember Inspector is a browser add-on designed to help you understand and debug your Ember applications. You can install it on &lt;a href=&quot;installation#toc_google-chrome&quot;&gt;Google Chrome&lt;/a&gt;, &lt;a href=&quot;installation#toc_firefox&quot;&gt;Firefox&lt;/a&gt; and &lt;a href=&quot;installation#toc_via-bookmarklet&quot;&gt;other browsers&lt;/a&gt; (via a bookmarklet)</source>
          <target state="translated">Ember Inspector是一个浏览器附加程序，旨在帮助您理解和调试Ember应用程序。您可以将其安装在&lt;a href=&quot;installation#toc_google-chrome&quot;&gt;Google Chrome&lt;/a&gt;，&lt;a href=&quot;installation#toc_firefox&quot;&gt;Firefox&lt;/a&gt;和&lt;a href=&quot;installation#toc_via-bookmarklet&quot;&gt;其他浏览器上&lt;/a&gt;（通过书签）</target>
        </trans-unit>
        <trans-unit id="b5ad72511f1a7b31a3a54993b2baf0d48b44720c" translate="yes" xml:space="preserve">
          <source>The Ember Router allows you to provide feedback that a route is loading, as well as when an error occurs in loading a route.</source>
          <target state="translated">Ember Router允许您提供途径正在加载的反馈,以及在加载途径时发生的错误。</target>
        </trans-unit>
        <trans-unit id="0ea4b816f906b34f146cdfa88e561a4f6528023a" translate="yes" xml:space="preserve">
          <source>The Ember application is inside a sandboxed iframe with no URL (if you are using JS Bin, follow &lt;a href=&quot;#toc_using-the-inspector-with-js-bin&quot;&gt;these steps&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d259bb541551f92c36e45ba009a06cd16a1ca136" translate="yes" xml:space="preserve">
          <source>The Ember application is inside a sandboxed iframe with no url (if you are using JS Bin, follow &lt;a href=&quot;#toc_using-the-inspector-with-js-bin&quot;&gt;these steps&lt;/a&gt;.</source>
          <target state="translated">Ember应用程序位于没有网址的沙盒iframe中（如果您使用的是JS Bin，请按照&lt;a href=&quot;#toc_using-the-inspector-with-js-bin&quot;&gt;以下步骤操作&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="af24320baeebbee895e834cbd681b449b1bcd52c" translate="yes" xml:space="preserve">
          <source>The Ember community publishes and maintains many addons, and it can be difficult to know if one (or many!) exists that covers your needs. The website &lt;a href=&quot;https://www.emberobserver.com/&quot;&gt;Ember Observer&lt;/a&gt; keeps an up-to-date index of Ember Addons, sorted by categories, and rated according to objective metrics. If you are looking for an addon, we recommend that you start there!</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cf6333e738da626887805c4ba5c1a1355ba0d71f" translate="yes" xml:space="preserve">
          <source>The Ember community values collaboration and building common tools that everyone relies on. If you're interested in deploying your app to production in a fast and reliable way, check out the &lt;a href=&quot;http://ember-cli-deploy.com/&quot;&gt;Ember CLI Deploy&lt;/a&gt; addon.</source>
          <target state="translated">Ember社区重视协作并建立每个人都依赖的通用工具。如果您有兴趣以快速可靠的方式将应用程序部署到生产环境，请查看&lt;a href=&quot;http://ember-cli-deploy.com/&quot;&gt;Ember CLI Deploy&lt;/a&gt;插件。</target>
        </trans-unit>
        <trans-unit id="dd16b48b3b7627eda9a94aaf81db356a438f0ccb" translate="yes" xml:space="preserve">
          <source>The Ember router has four options to manage your application's URL: &lt;code&gt;history&lt;/code&gt;, which uses the HTML5 History API; &lt;code&gt;hash&lt;/code&gt;, which uses anchor-based URLs; &lt;code&gt;auto&lt;/code&gt;, which uses &lt;code&gt;history&lt;/code&gt; if supported by the user's browser, and falls back to &lt;code&gt;hash&lt;/code&gt; otherwise; and &lt;code&gt;none&lt;/code&gt;, which doesn't update the URL. By default, Ember CLI configures the router to use &lt;code&gt;auto&lt;/code&gt;. You can change this option in &lt;code&gt;config/environment.js&lt;/code&gt; under &lt;code&gt;ENV.locationType&lt;/code&gt;.</source>
          <target state="translated">Ember路由器有四个选项来管理应用程序的URL： &lt;code&gt;history&lt;/code&gt; ，它使用HTML5 History API； &lt;code&gt;hash&lt;/code&gt; ，它使用基于锚的URL； &lt;code&gt;auto&lt;/code&gt; ，如果用户浏览器支持，则使用 &lt;code&gt;history&lt;/code&gt; ，否则返回 &lt;code&gt;hash&lt;/code&gt; ；和 &lt;code&gt;none&lt;/code&gt; ，这不会更新URL。默认情况下，Ember CLI将路由器配置为使用 &lt;code&gt;auto&lt;/code&gt; 。您可以在 &lt;code&gt;config/environment.js&lt;/code&gt; 中的 &lt;code&gt;ENV.locationType&lt;/code&gt; 下更改此选项。</target>
        </trans-unit>
        <trans-unit id="a7a78387322a36a85c1c5009f5fb0f7c35f76084" translate="yes" xml:space="preserve">
          <source>The Guides are intended to contain practical explanations of how to build Ember apps, focusing on the most widely-used features of Ember.js. For comprehensive documentation of every Ember feature and API, see the &lt;a href=&quot;http://emberjs.com/api/&quot;&gt;Ember.js API documentation&lt;/a&gt;.</source>
          <target state="translated">这些指南旨在包含有关如何构建Ember应用程序的实用说明，重点是Ember.js的最广泛使用的功能。有关每个Ember功能和API的全面文档，请参阅&lt;a href=&quot;http://emberjs.com/api/&quot;&gt;Ember.js API文档&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="171cd31c1e6f13733fc0b87625558c93f2e08163" translate="yes" xml:space="preserve">
          <source>The Guides are intended to contain practical explanations of how to build Ember apps, focusing on the most widely-used features of Ember.js. For comprehensive documentation of every Ember feature and API, see the &lt;a href=&quot;https://api.emberjs.com/&quot;&gt;Ember.js API documentation&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1f275cf778b6d119ab020c3d01e5250ad0219426" translate="yes" xml:space="preserve">
          <source>The Guides begin with an explanation of how to get started with Ember, followed by a tutorial on how to build your first Ember app. If you're brand new to Ember, we recommend you start off by following along with these first two sections of the Guides.</source>
          <target state="translated">本指南首先解释如何开始使用Ember,然后是如何建立你的第一个Ember应用的教程。如果你是Ember的新手,我们建议你从指南的前两部分开始学习。</target>
        </trans-unit>
        <trans-unit id="3c07d3314a98bd2f32c93ed811bdc5e03c2e9eb7" translate="yes" xml:space="preserve">
          <source>The HTML &lt;code&gt;class&lt;/code&gt; attribute of a component's tag can be set by providing a &lt;code&gt;classNames&lt;/code&gt; property that is set to an array of strings:</source>
          <target state="translated">可以通过提供设置为字符串数组的 &lt;code&gt;classNames&lt;/code&gt; 属性来设置组件标签的HTML &lt;code&gt;class&lt;/code&gt; 属性：</target>
        </trans-unit>
        <trans-unit id="712c891dbe91ea95b6ed85832f3affbadeaa1d8c" translate="yes" xml:space="preserve">
          <source>The HTML &lt;code&gt;id&lt;/code&gt; of the component's element in the DOM. You can provide this value yourself but it must be unique (just as in HTML):</source>
          <target state="translated">DOM中组件元素的HTML &lt;code&gt;id&lt;/code&gt; 。您可以自己提供此值，但它必须是唯一的（就像在HTML中一样）：</target>
        </trans-unit>
        <trans-unit id="77babb069a61a648d0e212eb50fbca403ad78359" translate="yes" xml:space="preserve">
          <source>The HTML &lt;code&gt;id&lt;/code&gt; of the view's element in the DOM. You can provide this value yourself but it must be unique (just as in HTML):</source>
          <target state="translated">DOM中视图元素的HTML &lt;code&gt;id&lt;/code&gt; 。您可以自己提供此值，但它必须是唯一的（就像在HTML中一样）：</target>
        </trans-unit>
        <trans-unit id="d5ce9a853ceec8935a32736d2ed256b8ef580453" translate="yes" xml:space="preserve">
          <source>The HTML attribute section of a component's tag can be set by providing an &lt;code&gt;attributeBindings&lt;/code&gt; property set to an array of property names on the component. The return value of these properties will be used as the value of the component's HTML associated attribute:</source>
          <target state="translated">可以通过将 &lt;code&gt;attributeBindings&lt;/code&gt; 属性设置为组件上属性名称的数组来设置组件标签的HTML属性部分。这些属性的返回值将用作组件的HTML关联属性的值：</target>
        </trans-unit>
        <trans-unit id="f3ca8096b2b2a08769eef8f9d51a7c386381b928" translate="yes" xml:space="preserve">
          <source>The IDs will be passed as a URL-encoded Array of IDs, in this form:</source>
          <target state="translated">IDs将以URL编码的IDs数组形式传递,形式如下。</target>
        </trans-unit>
        <trans-unit id="c9440c491aa7e5a5571ef8d623370fad7dc61a99" translate="yes" xml:space="preserve">
          <source>The Inspector displays the parent objects and mixins that are composed into the chosen object, including the inherited properties.</source>
          <target state="translated">检查器显示组成所选对象的父对象和混合体,包括继承的属性。</target>
        </trans-unit>
        <trans-unit id="751510e2504c4b774d23cdd66c8c40b91042175d" translate="yes" xml:space="preserve">
          <source>The Inspector displays these routes:</source>
          <target state="translated">检查员会显示这些路线。</target>
        </trans-unit>
        <trans-unit id="690c38e1e0e3e9aad8aa3afc61469ec327e5aab8" translate="yes" xml:space="preserve">
          <source>The Inspector highlights the currently active routes. However, if your app has grown too large for this to be useful, you can use the &lt;code&gt;Current Route Only&lt;/code&gt; checkbox to hide all routes except the currently active ones.</source>
          <target state="translated">检查器突出显示当前活动的路线。但是，如果您的应用程序变得太大而无法使用，则可以使用&amp;ldquo; &lt;code&gt;Current Route Only&lt;/code&gt; 复选框隐藏除当前活动路由以外的所有路由。</target>
        </trans-unit>
        <trans-unit id="f30f50f616f12ec02246e464e631a2ca7d407d6d" translate="yes" xml:space="preserve">
          <source>The Inspector includes a panel that allows you to view and interact with your Ember objects. To open it, click on any Ember object. You can then view the object's properties.</source>
          <target state="translated">检查器包括一个面板,允许你查看并与你的Ember对象互动。要打开它,点击任何Ember对象。然后你可以查看对象的属性。</target>
        </trans-unit>
        <trans-unit id="b07f0c70b2f17b1a0937f0084ad1769ae1c7b677" translate="yes" xml:space="preserve">
          <source>The Inspector provides a way to look at all Promises created in your application. Click on the &lt;code&gt;Promises&lt;/code&gt; menu to start inspecting them.</source>
          <target state="translated">检查器提供了一种查看应用程序中创建的所有Promise的方法。单击&amp;ldquo; &lt;code&gt;Promises&lt;/code&gt; 菜单以开始检查它们。</target>
        </trans-unit>
        <trans-unit id="62cf4d7c67083a3006feaede174affa0b51ea132" translate="yes" xml:space="preserve">
          <source>The Inspector provides a way to view a Promise's stack trace. Tracing Promises is disabled by default for performance reasons. To enable tracing, check the &lt;code&gt;Trace promise&lt;/code&gt; checkbox. You may want to reload to trace existing Promises.</source>
          <target state="translated">检查器提供了一种查看Promise堆栈跟踪的方法。由于性能原因，默认情况下禁用跟踪承诺。要启用跟踪，请选中&amp;ldquo; &lt;code&gt;Trace promise&lt;/code&gt; 复选框。您可能需要重新加载以跟踪现有的Promises。</target>
        </trans-unit>
        <trans-unit id="a817980043f7fb6f67f44a551dd1bc461d4d9f8e" translate="yes" xml:space="preserve">
          <source>The JSON API adapter will automatically send a &lt;code&gt;GET&lt;/code&gt; request to &lt;code&gt;/posts/1&lt;/code&gt;.</source>
          <target state="translated">JSON API适配器将自动将 &lt;code&gt;GET&lt;/code&gt; 请求发送到 &lt;code&gt;/posts/1&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="010af95fc7f9a5c21dd89196b646d7c1093ea5b8" translate="yes" xml:space="preserve">
          <source>The JSON payload should be an object that contains the record inside a root property. For example, in response to a &lt;code&gt;GET&lt;/code&gt; request for &lt;code&gt;/posts/1&lt;/code&gt;, the JSON should look like this:</source>
          <target state="translated">JSON有效负载应该是一个包含根属性内记录的对象。例如，响应对 &lt;code&gt;/posts/1&lt;/code&gt; 的 &lt;code&gt;GET&lt;/code&gt; 请求，JSON应如下所示：</target>
        </trans-unit>
        <trans-unit id="01e0b389167fcbb21b9dfab152a2b6136aa145d1" translate="yes" xml:space="preserve">
          <source>The JSON returned should look like this:</source>
          <target state="translated">返回的JSON应该是这样的。</target>
        </trans-unit>
        <trans-unit id="04d2c141e4adc4849c1a9d91f7f144599c2898c1" translate="yes" xml:space="preserve">
          <source>The JSON should encode the relationship as an ID to another record:</source>
          <target state="translated">JSON应该将关系编码为另一条记录的ID。</target>
        </trans-unit>
        <trans-unit id="8b9146885924e80940db37b81326f9209df93900" translate="yes" xml:space="preserve">
          <source>The JSON should encode the relationship as an array of IDs and types:</source>
          <target state="translated">JSON应该将关系编码为一个ID和类型的数组。</target>
        </trans-unit>
        <trans-unit id="6e8ce80ea19f94ae1f67487717c1c1102e6c43b1" translate="yes" xml:space="preserve">
          <source>The JSON:API adapter will automatically send a &lt;code&gt;GET&lt;/code&gt; request to &lt;code&gt;/posts/1&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="663c959e7f02d1a965ff9bc467fe56677cdc3d5e" translate="yes" xml:space="preserve">
          <source>The JSON:API adapter will now make requests for &lt;code&gt;Campus&lt;/code&gt; models to &lt;code&gt;/campuses&lt;/code&gt; and &lt;code&gt;/campuses/1&lt;/code&gt; (instead of &lt;code&gt;/campus/&lt;/code&gt; and &lt;code&gt;/campus/1&lt;/code&gt;), and requests for &lt;code&gt;advice&lt;/code&gt; to &lt;code&gt;/advice&lt;/code&gt; and &lt;code&gt;/advice/1&lt;/code&gt; (instead of &lt;code&gt;/advices/&lt;/code&gt; and &lt;code&gt;/advices/1&lt;/code&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="72ba4ee7e150eef0fccde680666bfff57c452740" translate="yes" xml:space="preserve">
          <source>The JSONAPIAdapter uses JSON API conventions for building the URL for a record and selecting the HTTP verb to use with a request. The actions you can take on a record map onto the following URLs in the JSON API adapter:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aa6abe7bb9f4b0f9e54508fdc1d5224614314c01" translate="yes" xml:space="preserve">
          <source>The JSONAPIAdapter uses JSON API conventions for building the url for a record and selecting the HTTP verb to use with a request. The actions you can take on a record map onto the following URLs in the JSON API adapter:</source>
          <target state="translated">JSONAPIAdapter使用JSON API约定来构建记录的URL,并选择HTTP动词来使用请求。在JSON API适配器中,你可以对记录采取的操作映射到以下URL。</target>
        </trans-unit>
        <trans-unit id="319a4c20db8f22613ffca3673ffd0b4f116cbd53" translate="yes" xml:space="preserve">
          <source>The JSONAPIAdapter will consider a success any response with a status code of the 2xx family (&quot;Success&quot;), as well as 304 (&quot;Not Modified&quot;). Any other status code will be considered a failure.</source>
          <target state="translated">JSONAPIAdapter将认为任何状态码为2xx系列(&quot;Success&quot;)以及304(&quot;Not Modified&quot;)的响应都是成功的。任何其他状态码将被视为失败。</target>
        </trans-unit>
        <trans-unit id="f974fd383c2a0a1df4e730ce000912a320c7420d" translate="yes" xml:space="preserve">
          <source>The JavaScript Error object used by Ember.assert.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="487ab77d5dbd345e6346d5f74c302b58d482236b" translate="yes" xml:space="preserve">
          <source>The Model Hook</source>
          <target state="translated">模型钩</target>
        </trans-unit>
        <trans-unit id="97c09292b53b45afc09c57770f7220ff9a4c953a" translate="yes" xml:space="preserve">
          <source>The NativeArray mixin contains the properties needed to make the native Array support Ember.MutableArray and all of its dependent APIs. Unless you have &lt;code&gt;EmberENV.EXTEND_PROTOTYPES&lt;/code&gt; or &lt;code&gt;EmberENV.EXTEND_PROTOTYPES.Array&lt;/code&gt; set to false, this will be applied automatically. Otherwise you can apply the mixin at anytime by calling &lt;code&gt;Ember.NativeArray.apply(Array.prototype)&lt;/code&gt;.</source>
          <target state="translated">NativeArray mixin包含使本机数组支持Ember.MutableArray及其所有相关API所需的属性。除非您将 &lt;code&gt;EmberENV.EXTEND_PROTOTYPES&lt;/code&gt; 或 &lt;code&gt;EmberENV.EXTEND_PROTOTYPES.Array&lt;/code&gt; 设置为false，否则它将自动应用。否则，您可以随时通过调用 &lt;code&gt;Ember.NativeArray.apply(Array.prototype)&lt;/code&gt; 来应用mixin 。</target>
        </trans-unit>
        <trans-unit id="5acd2f3fd8e6e1b2d468fa2fd3e181209d0b1609" translate="yes" xml:space="preserve">
          <source>The NativeArray mixin contains the properties needed to make the native Array support MutableArray and all of its dependent APIs. Unless you have &lt;code&gt;EmberENV.EXTEND_PROTOTYPES&lt;/code&gt; or &lt;code&gt;EmberENV.EXTEND_PROTOTYPES.Array&lt;/code&gt; set to false, this will be applied automatically. Otherwise you can apply the mixin at anytime by calling &lt;code&gt;Ember.NativeArray.apply(Array.prototype)&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e9b65ae9629384b86f0a3ac3136275bf91020819" translate="yes" xml:space="preserve">
          <source>The New Message Input</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f728d39e800e681d2478973af1aacfb873e272e4" translate="yes" xml:space="preserve">
          <source>The Parent Route</source>
          <target state="translated">母线</target>
        </trans-unit>
        <trans-unit id="8e7bb3b57567e2227a221f010574edc6b4965cd1" translate="yes" xml:space="preserve">
          <source>The REST adapter allows your store to communicate with an HTTP server by transmitting JSON via XHR. Most Ember.js apps that consume a JSON API should use the REST adapter.</source>
          <target state="translated">REST适配器允许你的商店通过XHR传输JSON与HTTP服务器通信。大多数消耗JSON API的Ember.js应用程序应该使用REST适配器。</target>
        </trans-unit>
        <trans-unit id="fc6f2d961e0e8648bf62845bef00cfd62c181e1b" translate="yes" xml:space="preserve">
          <source>The REST adapter expects the JSON returned from your server to follow these conventions.</source>
          <target state="translated">REST适配器希望从您的服务器返回的JSON遵循这些约定。</target>
        </trans-unit>
        <trans-unit id="5ebe4d3849e4f0595a2c49dc9cebb6616874d70b" translate="yes" xml:space="preserve">
          <source>The REST adapter will consider a success any response with a status code of the 2xx family (&quot;Success&quot;), as well as 304 (&quot;Not Modified&quot;). Any other status code will be considered a failure.</source>
          <target state="translated">REST适配器将认为任何状态码为2xx系列(&quot;Success&quot;)以及304(&quot;Not Modified&quot;)的响应都是成功的。任何其他状态码将被视为失败。</target>
        </trans-unit>
        <trans-unit id="b3b95d4fe88347e6289fc0aedef69eeed34f95c2" translate="yes" xml:space="preserve">
          <source>The Received Message</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3172f22137802d4a8642cfa5668354ec4d3eeea5" translate="yes" xml:space="preserve">
          <source>The Router Pauses for Promises</source>
          <target state="translated">路由器暂停承诺</target>
        </trans-unit>
        <trans-unit id="5173699439dec730d6932d8fca8ce730f73eabdc" translate="yes" xml:space="preserve">
          <source>The Router service is the public API that provides access to the router.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="efc37914e3487c9ca3df5d1d763f3449e864fe55" translate="yes" xml:space="preserve">
          <source>The Router service is the public API that provides component/view layer access to the router.</source>
          <target state="translated">Router服务是提供组件/视图层访问路由器的公共API。</target>
        </trans-unit>
        <trans-unit id="0c9d4cff939b6e9fcde57c63e9fa2dc698d186a0" translate="yes" xml:space="preserve">
          <source>The Routes tab displays a list of your application's routes.</source>
          <target state="translated">Routes(路由)选项卡显示应用程序的路由列表。</target>
        </trans-unit>
        <trans-unit id="84729b1e90f85ba399f1de4cfa6c0e4c113086c4" translate="yes" xml:space="preserve">
          <source>The Run Loop</source>
          <target state="translated">奔跑环线</target>
        </trans-unit>
        <trans-unit id="c32cedc8b4658f5a2c9ec3fd3e53275c0943aca6" translate="yes" xml:space="preserve">
          <source>The SOLID principles of good design tell us that objects should have a single responsibility. The responsibility of a component should be presenting model data to the user, not fetching the model.</source>
          <target state="translated">SOLID的良好设计原则告诉我们,对象应该只有一个责任。组件的责任应该是向用户呈现模型数据,而不是获取模型。</target>
        </trans-unit>
        <trans-unit id="27e2511593535f887df2079da995aee5cb7996cf" translate="yes" xml:space="preserve">
          <source>The Sent Message</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2750c3a85432d63bf43d76ed414a487327be0ac0" translate="yes" xml:space="preserve">
          <source>The Store and a Single Source of Truth</source>
          <target state="translated">商店和单一的真理之源</target>
        </trans-unit>
        <trans-unit id="45328ea59c1214501dde9c95207252958c40b1b9" translate="yes" xml:space="preserve">
          <source>The Transition's internal promise. Calling &lt;code&gt;.then&lt;/code&gt; on this property is that same as calling &lt;code&gt;.then&lt;/code&gt; on the Transition object itself, but this property is exposed for when you want to pass around a Transition's promise, but not the Transition object itself, since Transition object can be externally &lt;code&gt;abort&lt;/code&gt;ed, while the promise cannot.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9f42b50dcb01303923e39ca4b080e7c21fefec38" translate="yes" xml:space="preserve">
          <source>The URL can be set in a few ways:</source>
          <target state="translated">URL可以通过几种方式进行设置。</target>
        </trans-unit>
        <trans-unit id="0bcc0cf43c5c46031ea589d18baa3c4b454de17b" translate="yes" xml:space="preserve">
          <source>The View Tree</source>
          <target state="translated">景观树</target>
        </trans-unit>
        <trans-unit id="41ef7117b31fdc6690fac73d0b81e21453b46c57" translate="yes" xml:space="preserve">
          <source>The View Tree ignores components and inline views by default. To load these into the View Tree check the &lt;code&gt;Components&lt;/code&gt; and &lt;code&gt;All Views&lt;/code&gt; checkboxes.</source>
          <target state="translated">默认情况下，&amp;ldquo;视图树&amp;rdquo;会忽略组件和嵌入式视图。要将它们加载到&amp;ldquo;视图树&amp;rdquo;中，请选中&amp;ldquo; &lt;code&gt;Components&lt;/code&gt; 和 &lt;code&gt;All Views&lt;/code&gt; 复选框。</target>
        </trans-unit>
        <trans-unit id="b3bb30d409dd94a905d7278b4f7300834afaa9d8" translate="yes" xml:space="preserve">
          <source>The WAI-ARIA role of the control represented by this view. For example, a button may have a role of type 'button', or a pane may have a role of type 'alertdialog'. This property is used by assistive software to help visually challenged users navigate rich web applications.</source>
          <target state="translated">该视图所代表的控件的 WAI-ARIA 角色。例如,按钮的角色类型为 &quot;button&quot;,而窗格的角色类型为 &quot;alertdialog&quot;。此属性被辅助软件用于帮助视觉障碍用户浏览丰富的 Web 应用程序。</target>
        </trans-unit>
        <trans-unit id="599db392fb52dd7a9d9ebf1a02ad877e6dc24952" translate="yes" xml:space="preserve">
          <source>The ability to consume a growing ecosystem of &lt;a href=&quot;https://emberobserver.com/&quot;&gt;Ember Addons&lt;/a&gt;.</source>
          <target state="translated">消耗不断增长的&lt;a href=&quot;https://emberobserver.com/&quot;&gt;Ember Addons&lt;/a&gt;生态系统的能力。</target>
        </trans-unit>
        <trans-unit id="236eb25e1509b24135c459c63eaaa974644a72a7" translate="yes" xml:space="preserve">
          <source>The above code will allow you invoke the &lt;code&gt;sum()&lt;/code&gt; function as a &lt;code&gt;{{sum}}&lt;/code&gt; handlebars &quot;helper&quot; in your templates:</source>
          <target state="translated">上面的代码将允许您在模板中将 &lt;code&gt;sum()&lt;/code&gt; 函数作为 &lt;code&gt;{{sum}}&lt;/code&gt; 句柄&amp;ldquo;助手&amp;rdquo;来调用：</target>
        </trans-unit>
        <trans-unit id="17aff5f3819b34917a219ca60e2165bb9008b501" translate="yes" xml:space="preserve">
          <source>The above example contains two arguments:</source>
          <target state="translated">上面的例子包含两个参数。</target>
        </trans-unit>
        <trans-unit id="4f30b8685376aad3470d0d8bc20b92baa1adf445" translate="yes" xml:space="preserve">
          <source>The above example returns the original arguments (after your customizations) back to the parent class, so it can continue with its normal operations.</source>
          <target state="translated">上面的例子将原始参数(在你的自定义之后)返回到父类,所以它可以继续它的正常操作。</target>
        </trans-unit>
        <trans-unit id="0de72be9fc4a958c468aab5fce926f1c1d8e1f2a" translate="yes" xml:space="preserve">
          <source>The above example template will render a template named &quot;-nav&quot;, which has the same context as the parent template it's rendered into, so if the &quot;-nav&quot; template also referenced &lt;code&gt;{{foo}}&lt;/code&gt;, it would print the same thing as the &lt;code&gt;{{foo}}&lt;/code&gt; in the above example.</source>
          <target state="translated">上面的示例模板将呈现一个名为&amp;ldquo; -nav&amp;rdquo;的模板，该模板具有与其所呈现的父模板相同的上下文，因此，如果该&amp;ldquo; -nav&amp;rdquo;模板也引用了 &lt;code&gt;{{foo}}&lt;/code&gt; ，则它将打印与上例中的 &lt;code&gt;{{foo}}&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="b5a49ec8b75cd43831c857a7b5a6f317839e3550" translate="yes" xml:space="preserve">
          <source>The above example will look up the value of &lt;code&gt;someTemplateName&lt;/code&gt; on the template context (e.g. a controller) and use that value as the name of the template to render. If the resolved value is falsy, nothing will be rendered. If &lt;code&gt;someTemplateName&lt;/code&gt; changes, the partial will be re-rendered using the new template name.</source>
          <target state="translated">上面的示例将在模板上下文（例如，控制器）上查找 &lt;code&gt;someTemplateName&lt;/code&gt; 的值，并将该值用作要渲染的模板的名称。如果解析的值是虚假的，则不会呈现任何内容。如果 &lt;code&gt;someTemplateName&lt;/code&gt; 更改，将使用新的模板名称重新渲染部分。</target>
        </trans-unit>
        <trans-unit id="4a17372c1a6f0d338afcba08934ad438cff05188" translate="yes" xml:space="preserve">
          <source>The above example will print a list like this:</source>
          <target state="translated">上面的例子将打印出这样一个列表。</target>
        </trans-unit>
        <trans-unit id="14759cf8b76d4ce53586ecc24fe64560891c5d11" translate="yes" xml:space="preserve">
          <source>The above template and controller render as the following HTML:</source>
          <target state="translated">上述模板和控制器呈现为以下HTML。</target>
        </trans-unit>
        <trans-unit id="647c3ca2996d871bb4527f63fd867d23a1ddf4a8" translate="yes" xml:space="preserve">
          <source>The above template will render HTML like this:</source>
          <target state="translated">上面的模板会呈现这样的HTML。</target>
        </trans-unit>
        <trans-unit id="1b6db4d979bea0f132b8aecf3e051e28b2ff75cb" translate="yes" xml:space="preserve">
          <source>The above will result in the following HTML output:</source>
          <target state="translated">上述内容将导致以下HTML输出。</target>
        </trans-unit>
        <trans-unit id="3d75636210394ce5e5a666bfe55c598294499452" translate="yes" xml:space="preserve">
          <source>The absolute best method for learning how a screen reader works is using one yourself! It might feel a little awkward at first, but understanding how to use a screen reader (and other assistive technology) will help you become a more skilled developer.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1f4cb9f31c2595e4f16286bd14d0a1224fdd7a4e" translate="yes" xml:space="preserve">
          <source>The action &lt;code&gt;deleteUser&lt;/code&gt; is in quotes, since &lt;code&gt;system-preferences-editor&lt;/code&gt; is where the action is defined now. Quotes indicate that the action should be looked for in &lt;code&gt;actions&lt;/code&gt; local to that component, rather than in those that have been passed from a parent.</source>
          <target state="translated">操作 &lt;code&gt;deleteUser&lt;/code&gt; 用引号引起来，因为 &lt;code&gt;system-preferences-editor&lt;/code&gt; 是现在定义该操作的位置。引号表示应在该组件本地的操作中查找该 &lt;code&gt;actions&lt;/code&gt; ，而不是在从父级传递的操作中查找。</target>
        </trans-unit>
        <trans-unit id="8e4c226f28ea2d4ccbb31bb1fe60fdb964130638" translate="yes" xml:space="preserve">
          <source>The action decorator also &lt;em&gt;binds&lt;/em&gt; actions, so you can refer to them directly in templates without the &lt;code&gt;{{action}}&lt;/code&gt; helper:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bc124545536eb0f1b78bc91d3e1823a25158f2d9" translate="yes" xml:space="preserve">
          <source>The action to trigger</source>
          <target state="translated">触发的行动</target>
        </trans-unit>
        <trans-unit id="fffafad4245d122f1f8b1d4f82482f6c6e9972ee" translate="yes" xml:space="preserve">
          <source>The actions &quot;play&quot; and &quot;stop&quot; must be passed to this &lt;code&gt;play-button&lt;/code&gt; component:</source>
          <target state="translated">必须将操作&amp;ldquo;播放&amp;rdquo;和&amp;ldquo;停止&amp;rdquo;传递给此 &lt;code&gt;play-button&lt;/code&gt; 组件：</target>
        </trans-unit>
        <trans-unit id="b15d60efde70e42a8401dc81cb70c844a7ab5b07" translate="yes" xml:space="preserve">
          <source>The actions you can take on a record map onto the following URLs in the JSON API adapter:</source>
          <target state="translated">在JSON API适配器中,你可以对记录进行的操作映射到以下URL。</target>
        </trans-unit>
        <trans-unit id="b2fc296bf6476dd843ea551f59559ad491097fd7" translate="yes" xml:space="preserve">
          <source>The actions you can take on a record map onto the following URLs in the JSON:API adapter:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="61f498285f596848fc23f04d9e51276702a760d4" translate="yes" xml:space="preserve">
          <source>The adapter is responsible for answering all of these questions. Whenever your app asks the store for a record that it doesn't have cached, it will ask the adapter for it. If you change a record and save it, the store will hand the record to the adapter to send the appropriate data to your server and confirm that the save was successful.</source>
          <target state="translated">适配器负责回答所有这些问题。每当您的应用程序向商店询问一条没有缓存的记录时,它都会向适配器询问。如果你修改了一条记录并保存了它,商店会把记录交给适配器,让它向你的服务器发送相应的数据,并确认保存成功。</target>
        </trans-unit>
        <trans-unit id="ad248e90ac6d8ba6c4d90263b68bd3e56fc49c63" translate="yes" xml:space="preserve">
          <source>The adapter passes in &lt;code&gt;includeId: true&lt;/code&gt; when serializing a record for &lt;code&gt;createRecord&lt;/code&gt;, but not for &lt;code&gt;updateRecord&lt;/code&gt;.</source>
          <target state="translated">序列化 &lt;code&gt;createRecord&lt;/code&gt; 而不是 &lt;code&gt;updateRecord&lt;/code&gt; 的记录时，适配器传入 &lt;code&gt;includeId: true&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="efdf679155c7a3919c2945e73db79499e695fec9" translate="yes" xml:space="preserve">
          <source>The adapter will need to be registered in the application's container as &lt;code&gt;container-debug-adapter:main&lt;/code&gt;.</source>
          <target state="translated">适配器将需要在应用程序的容器中注册为 &lt;code&gt;container-debug-adapter:main&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="131e20e9576979fea3838369ca8bebc9bee71a7f" translate="yes" xml:space="preserve">
          <source>The adapter will need to be registered in the application's container as &lt;code&gt;dataAdapter:main&lt;/code&gt;.</source>
          <target state="translated">适配器将需要在应用程序的容器中注册为 &lt;code&gt;dataAdapter:main&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="de1f8ea65a9d062ad63b311606da2e19fac5c593" translate="yes" xml:space="preserve">
          <source>The advantage of an async helper is that it will not run until the last async helper has completed. All async helpers after it will wait for it complete before running.</source>
          <target state="translated">异步助手的优点是,在最后一个异步助手完成之前,它不会运行。在它之后的所有异步助手都会等待它完成后再运行。</target>
        </trans-unit>
        <trans-unit id="8bb5c28c5aa5480291901fa41b6595212381d7c5" translate="yes" xml:space="preserve">
          <source>The advantage to writing components this way is that there is no way to make a mistake and forget to update the output correctly in some situations. As long as the template produces the right HTML for its inputs, the output will remain up to date.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="132b17863e2451dad65a1fc69e5aa6a2e2be4784" translate="yes" xml:space="preserve">
          <source>The algorithm works this way:</source>
          <target state="translated">算法是这样的。</target>
        </trans-unit>
        <trans-unit id="5ff582d708a589904a1b030c787773bd60458940" translate="yes" xml:space="preserve">
          <source>The alternative syntax, with prototype extensions, might look like:</source>
          <target state="translated">另一种语法,加上原型扩展,可能是这样的:</target>
        </trans-unit>
        <trans-unit id="5c3682b20b3168f59d213bbd7233481e751bc3ef" translate="yes" xml:space="preserve">
          <source>The amount to decrement by. Defaults to 1</source>
          <target state="translated">要递减的数量。默认值为1。</target>
        </trans-unit>
        <trans-unit id="5b7201edf1c359c10f638704266bcb43f6ade922" translate="yes" xml:space="preserve">
          <source>The amount to increment by. Defaults to 1</source>
          <target state="translated">要递增的数量。默认值为1。</target>
        </trans-unit>
        <trans-unit id="fa0a776984235353b154722f7512403200c08097" translate="yes" xml:space="preserve">
          <source>The any() method executes the callback function once for each element present in the array until it finds the one where callback returns a truthy value (i.e. &lt;code&gt;true&lt;/code&gt;). If such an element is found, any() immediately returns true. Otherwise, any() returns false.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ed509f29503bfd3d0043d389191e47926618eace" translate="yes" xml:space="preserve">
          <source>The application instance is passed to Ember's instance initializer hooks and it is added as the &quot;owner&quot; of each object that was instantiated by the application instance.</source>
          <target state="translated">应用实例被传递给Ember的实例初始化钩子,它被添加为应用实例实例化的每个对象的 &quot;所有者&quot;。</target>
        </trans-unit>
        <trans-unit id="355a1c859de0828ab927049176efde71ae67825a" translate="yes" xml:space="preserve">
          <source>The application route</source>
          <target state="translated">申请途径</target>
        </trans-unit>
        <trans-unit id="901ed3ac0d84e9e2dd2f95578ab1d0ccdf2c001f" translate="yes" xml:space="preserve">
          <source>The argument name is always dasherized (e.g. &lt;code&gt;@focus-out&lt;/code&gt;, &lt;code&gt;@input&lt;/code&gt;, &lt;code&gt;@key-down&lt;/code&gt;). To minimize confusion, we recommend that you use the &lt;code&gt;{{on}}&lt;/code&gt; modifier. (&lt;a href=&quot;https://guides.emberjs.com/upgrading/current-edition/action-on-and-fn/#toc_the-on-modifier&quot;&gt;Learn more about the &lt;code&gt;{{on}}&lt;/code&gt; modifier.&lt;/a&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bc69913b03727770065706d5ae763881554440df" translate="yes" xml:space="preserve">
          <source>The arguments to pass to the method</source>
          <target state="translated">要传递给方法的参数</target>
        </trans-unit>
        <trans-unit id="e850ec910ddafcfd153f778405adf847a5eaecec" translate="yes" xml:space="preserve">
          <source>The array represents the diff of the canonical state with the local state of the model. Note: if the model is created locally, the canonical state is empty since the adapter hasn't acknowledged the attributes yet:</source>
          <target state="translated">这个数组表示模型的标准状态与本地状态的差异。注意:如果模型是在本地创建的,那么规范状态是空的,因为适配器还没有确认属性。</target>
        </trans-unit>
        <trans-unit id="328ea951bcca35c60833b889806dffdcae966e78" translate="yes" xml:space="preserve">
          <source>The array that the proxy pretends to be. In the default &lt;code&gt;ArrayProxy&lt;/code&gt; implementation, this and &lt;code&gt;content&lt;/code&gt; are the same. Subclasses of &lt;code&gt;ArrayProxy&lt;/code&gt; can override this property to provide things like sorting and filtering.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="99c78324552871aebe8cd51c6ee3188a58db2b9c" translate="yes" xml:space="preserve">
          <source>The asynchronous test helpers from &lt;code&gt;@ember/test-helpers&lt;/code&gt; are meant to be used together with the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/await&quot;&gt;ES2017 feature async/await&lt;/a&gt; to write easy-to-read tests which deal with asynchronous behavior as follows:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7876ec17eeb81f6ca541bc1ef63a2af2ef9b1f5a" translate="yes" xml:space="preserve">
          <source>The attrs options object can use more specific instruction for extracting and serializing. When serializing, an option to embed &lt;code&gt;ids&lt;/code&gt;, &lt;code&gt;ids-and-types&lt;/code&gt; or &lt;code&gt;records&lt;/code&gt; can be set. When extracting the only option is &lt;code&gt;records&lt;/code&gt;.</source>
          <target state="translated">attrs选项对象可以使用更特定的指令来提取和序列化。序列化时，可以设置嵌入 &lt;code&gt;ids&lt;/code&gt; ， &lt;code&gt;ids-and-types&lt;/code&gt; 或 &lt;code&gt;records&lt;/code&gt; 的选项。提取时，唯一的选择是 &lt;code&gt;records&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="227d9fca09139aac513d98ddeada59e1a4905b3f" translate="yes" xml:space="preserve">
          <source>The avatar and username components are directly related to the sent and received message components. Right now, they're grouped at the top level. As you get more components, this could make a big mess! Instead, we want to group the related components together in the filesystem. We can do this by moving them into subfolders within &lt;code&gt;app/components&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8f166495fefd5148a4270e72b38f3bf4df45b3f1" translate="yes" xml:space="preserve">
          <source>The avatar component also needs to specify where to put attributes that were specified on the tag.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8ba4bf965a4a66ae929256c9894a0896fb8e5c53" translate="yes" xml:space="preserve">
          <source>The benefits of having unit tests are threefold.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9fc2c631617077867650b6978f7b8d361d4055ce" translate="yes" xml:space="preserve">
          <source>The best way to discover new features is to read the &lt;a href=&quot;https://blog.emberjs.com/tags/releases.html&quot;&gt;release blog posts&lt;/a&gt;. If a new feature requires you to opt-in, it's called an optional feature. Follow &lt;a href=&quot;../configuring-ember/optional-features&quot;&gt;the optional features guide&lt;/a&gt; to learn which optional features are available in your app's version of Ember, and how to enable them. In many cases, codemods will be available to help you make syntax-related updates. A codemod is a tool that rewrites your existing code into a new syntax. When they are available, they can save a lot of time that you would spend making edits by hand.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="40a1417c17584385ecc5f2f82be71fb21fdb09e1" translate="yes" xml:space="preserve">
          <source>The best way to discover new features is to read the &lt;a href=&quot;https://blog.emberjs.com/tags/releases.html&quot;&gt;release blog posts&lt;/a&gt;. If a new feature requires you to opt-in, it's called an optional feature. Follow &lt;a href=&quot;https://guides.emberjs.com/configuring-ember/optional-features/&quot;&gt;the optional features guide&lt;/a&gt; to learn which optional features are available in your app's version of Ember, and how to enable them. In many cases, codemods will be available to help you make syntax-related updates. A codemod is a tool that rewrites your existing code into a new syntax. When they are available, they can save a lot of time that you would spend making edits by hand.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="692cb52572458fcee0dcfc7ce5597337ffbedcc6" translate="yes" xml:space="preserve">
          <source>The block expression can then use block params to bind names to any yielded values for use in the block. This allows for template customization when using a component, where the markup is provided by the consuming template, but any event handling behavior implemented in the component is retained such as &lt;code&gt;click()&lt;/code&gt; handlers.</source>
          <target state="translated">然后，块表达式可以使用块参数将名称绑定到任何产生的值，以供在块中使用。这允许在使用组件时自定义模板，其中使用方的模板提供标记，但是保留了组件中实现的任何事件处理行为，例如 &lt;code&gt;click()&lt;/code&gt; 处理程序。</target>
        </trans-unit>
        <trans-unit id="230b18f150ea432b7fc63ef20d6f97b9cd3ebdce" translate="yes" xml:space="preserve">
          <source>The block form of helpers allows you to control how the UI is created based on the values of properties. A third form of helper is called &quot;nested&quot;. For example here the concat helper will add &quot; Doe&quot; to a displayed name if the person has no last name:</source>
          <target state="translated">助手的块形式允许你根据属性的值来控制UI的创建方式。第三种形式的助记符叫做 &quot;嵌套&quot;。例如,这里的concat帮助程序将在显示的名字中添加 &quot;无名氏&quot;,如果这个人没有姓的话。</target>
        </trans-unit>
        <trans-unit id="cdafa2c9116008ccf0ab97418b925c097c3252ac" translate="yes" xml:space="preserve">
          <source>The blog post list scrolls to position a new post at the top of the viewport.</source>
          <target state="translated">博客文章列表滚动定位新文章在视口的顶部。</target>
        </trans-unit>
        <trans-unit id="b7d9739a4b01627d57b94f19432fdc1037c8b0d6" translate="yes" xml:space="preserve">
          <source>The cache API was released in Ember 3.22. If you want to leverage this API between versions 3.13 and 3.21, you can install &lt;a href=&quot;https://github.com/ember-polyfills/ember-cache-primitive-polyfill&quot;&gt;ember-cache-primitive-polyfill&lt;/a&gt; to your project.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="af6e26b49064e993b28a797e047db6b65613464e" translate="yes" xml:space="preserve">
          <source>The cached value of the computed property, if any</source>
          <target state="translated">计算属性的缓存值,如果有的话。</target>
        </trans-unit>
        <trans-unit id="70f3ab63a321edca05f8d7fe826eff4a7da47248" translate="yes" xml:space="preserve">
          <source>The call made to the server, using a Rails backend, will look something like this:</source>
          <target state="translated">使用 Rails 后台对服务器进行的调用将是这样的。</target>
        </trans-unit>
        <trans-unit id="939bb0a279b018152f9c264171bbf1c866b675ab" translate="yes" xml:space="preserve">
          <source>The call to the function &lt;code&gt;this.inject.service&lt;/code&gt;&lt;a href=&quot;https://guides.emberjs.com/applications/dependency-injection/#toc_ad-hoc-injections&quot;&gt;injects&lt;/a&gt; the service we just registered into the context of the tests, so each test may access it through &lt;code&gt;this.get('mapsService')&lt;/code&gt;. In the example we assert that &lt;code&gt;calledWithLocation&lt;/code&gt; in our stub is set to the location we passed to the component.</source>
          <target state="translated">对函数 &lt;code&gt;this.inject.service&lt;/code&gt; 的调用会将我们刚刚注册的服务&lt;a href=&quot;https://guides.emberjs.com/applications/dependency-injection/#toc_ad-hoc-injections&quot;&gt;注入&lt;/a&gt;到测试的上下文中，因此每个测试都可以通过 &lt;code&gt;this.get('mapsService')&lt;/code&gt; 访问它。在示例中，我们断言存根中的 &lt;code&gt;calledWithLocation&lt;/code&gt; 设置为传递给组件的位置。</target>
        </trans-unit>
        <trans-unit id="6165fe98748987844899c6930403c4c1ab5d19eb" translate="yes" xml:space="preserve">
          <source>The call to the server, using a Rails backend, will look something like this:</source>
          <target state="translated">使用Rails后端对服务器的调用将是这样的。</target>
        </trans-unit>
        <trans-unit id="de462a9910b6a2b87d874126e661ea2d619d056e" translate="yes" xml:space="preserve">
          <source>The callback function passed to &lt;code&gt;{{on}}&lt;/code&gt; will receive any arguments that are passed to the event handler. Most commonly this would be the &lt;code&gt;event&lt;/code&gt; itself.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2e38940c1dd9193a8ac3b956829bfe16ac3160dd" translate="yes" xml:space="preserve">
          <source>The callback method should have the following signature:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7d0699b4fba58c3f4df0d8bbb8c406317b7efb2c" translate="yes" xml:space="preserve">
          <source>The callback method you provide should have the following signature (all parameters are optional):</source>
          <target state="translated">你提供的回调方法应该有以下签名(所有参数都是可选的)。</target>
        </trans-unit>
        <trans-unit id="7db19daead06e2c546317e025647247b05e290f5" translate="yes" xml:space="preserve">
          <source>The callback method you provide should have the following signature. &lt;code&gt;item&lt;/code&gt; is the current item in the iteration. &lt;code&gt;index&lt;/code&gt; is the integer index of the current item in the iteration.</source>
          <target state="translated">您提供的回调方法应具有以下签名。 &lt;code&gt;item&lt;/code&gt; 是迭代中的当前项目。 &lt;code&gt;index&lt;/code&gt; 是迭代中当前项目的整数索引。</target>
        </trans-unit>
        <trans-unit id="e6388916ece31666bfa3bce621dc9190d0851704" translate="yes" xml:space="preserve">
          <source>The callback method you provide should have the following signature. &lt;code&gt;item&lt;/code&gt; is the current item in the iteration. &lt;code&gt;index&lt;/code&gt; is the integer index of the current item in the iteration. &lt;code&gt;array&lt;/code&gt; is the dependant array itself.</source>
          <target state="translated">您提供的回调方法应具有以下签名。 &lt;code&gt;item&lt;/code&gt; 是迭代中的当前项目。 &lt;code&gt;index&lt;/code&gt; 是迭代中当前项目的整数索引。 &lt;code&gt;array&lt;/code&gt; 是从属数组本身。</target>
        </trans-unit>
        <trans-unit id="747b58783f30aeed09a97bff68b7a7ed7e662bd5" translate="yes" xml:space="preserve">
          <source>The callback method you provide should have the following signature:</source>
          <target state="translated">你提供的回调方法应该有以下签名。</target>
        </trans-unit>
        <trans-unit id="3d86eb979382fa479d1f0e875f699adf9c61634f" translate="yes" xml:space="preserve">
          <source>The callback to execute</source>
          <target state="translated">执行的回调</target>
        </trans-unit>
        <trans-unit id="1c0bf787c4ef76014ebc5214fa4f8f083cd20164" translate="yes" xml:space="preserve">
          <source>The callback to invoke. It is invoked once per expansion, and is passed the expansion.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="378f4ac8c5402e27d2f5c1371ff15299fb646fad" translate="yes" xml:space="preserve">
          <source>The callback will receive the current application as an argument.</source>
          <target state="translated">回调将接收当前应用程序作为参数。</target>
        </trans-unit>
        <trans-unit id="c9031269dfc89716348ced7afe2453c21bf575e8" translate="yes" xml:space="preserve">
          <source>The capabilities object instance</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="74a44bb8a72660d6a666643c8eecacba545836e5" translate="yes" xml:space="preserve">
          <source>The capabilities property &lt;em&gt;must&lt;/em&gt; be provided using the &lt;code&gt;capabilities()&lt;/code&gt; function imported from the same module as &lt;code&gt;setHelperManager&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bf865f46a8d91a51d334b7806ab5f7f89bbecff5" translate="yes" xml:space="preserve">
          <source>The capabilities values</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="107b78d2e608ef92e8a7f001aab1e580890d2636" translate="yes" xml:space="preserve">
          <source>The capitalized string.</source>
          <target state="translated">大写的字符串。</target>
        </trans-unit>
        <trans-unit id="93ca0a4ffd1dc6274323ac9107d82b2dcea9625c" translate="yes" xml:space="preserve">
          <source>The cause of this bug is that we wrote our action to take an argument &amp;ndash; the person's name &amp;ndash; and we forgot to pass it. The fix is easy enough:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="15d00f65c9638d1ca2f6257ef2bcfd23eac05be4" translate="yes" xml:space="preserve">
          <source>The central template in an Ember application is the &lt;code&gt;app/templates/application.hbs&lt;/code&gt; file. We can copy HTML into this file, and it will work without any changes. For instance, you can copy the following example HTML for a simple messaging app:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dbbb92bec845d62ef32b3b4db4795ff8fb8678df" translate="yes" xml:space="preserve">
          <source>The child &lt;code&gt;Component&lt;/code&gt; can then modify the parent's value just by modifying its own property:</source>
          <target state="translated">然后，子 &lt;code&gt;Component&lt;/code&gt; 可以通过修改其自己的属性来修改父组件的值：</target>
        </trans-unit>
        <trans-unit id="257db548c086357f7aead64fe919a39c98588cac" translate="yes" xml:space="preserve">
          <source>The child &lt;code&gt;Component&lt;/code&gt; would invoke the action with the new click value:</source>
          <target state="translated">子 &lt;code&gt;Component&lt;/code&gt; 将使用新的点击值调用操作：</target>
        </trans-unit>
        <trans-unit id="0b1f4eed5e1ce8cc4ca660b923639074a39687bc" translate="yes" xml:space="preserve">
          <source>The child &lt;code&gt;Component&lt;/code&gt; would invoke the function with the new click value:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="01b4ccc47f51a076e5b8b5bc1b2f43c46487fa20" translate="yes" xml:space="preserve">
          <source>The class of a model might be useful if you want to get a list of all the relationship names of the model, see &lt;a href=&quot;http://emberjs.com/api/data/classes/DS.Model.html#property_relationshipNames&quot;&gt;&lt;code&gt;relationshipNames&lt;/code&gt;&lt;/a&gt; for example.</source>
          <target state="translated">如果要获取模型的所有关系名称的列表，则模型的类可能很有用，例如，请参见&lt;a href=&quot;http://emberjs.com/api/data/classes/DS.Model.html#property_relationshipNames&quot;&gt; &lt;code&gt;relationshipNames&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="3d9297b426d0c41a47e556048f763799486035d4" translate="yes" xml:space="preserve">
          <source>The class of a model might be useful if you want to get a list of all the relationship names of the model, see &lt;a href=&quot;https://api.emberjs.com/ember-data/release/classes/Model#relationshipNames&quot;&gt;&lt;code&gt;relationshipNames&lt;/code&gt;&lt;/a&gt; for example.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="48f539537c66e244c744c84eda7209879551eaf4" translate="yes" xml:space="preserve">
          <source>The code below is the deprecation-workflow file with the first deprecation set to throw an exception on occurrence. The image demonstrates what that deprecation looks like when you run your tests.</source>
          <target state="translated">下面的代码是deprecation-workflow文件,第一个deprecation设置为发生时抛出异常。这张图演示了当你运行测试时,该弃用是什么样子的。</target>
        </trans-unit>
        <trans-unit id="1b947f40f550601638c2b2a68083672c065ab4d6" translate="yes" xml:space="preserve">
          <source>The code below shows how unit tests check individual methods. Imagine that our app has a utility that helps us work with numbers.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7f8a70fc13fa93c2df0e88a63de3f7485bf862bd" translate="yes" xml:space="preserve">
          <source>The code for calling the audio element's &lt;code&gt;play&lt;/code&gt; and &lt;code&gt;pause&lt;/code&gt; can be reused. It isn't tied to this particular audio component. It can be tested independently, too!</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="93cd13234a3187a294d47fbdde9fd0427c708c5b" translate="yes" xml:space="preserve">
          <source>The collection of functions, keyed by name, available on this &lt;code&gt;ActionHandler&lt;/code&gt; as action targets.</source>
          <target state="translated">在此 &lt;code&gt;ActionHandler&lt;/code&gt; 上可以使用按操作名称命名的功能集合作为操作目标。</target>
        </trans-unit>
        <trans-unit id="9d2bfcf3313d4bc0a7bda43e5de7a8ef0369007f" translate="yes" xml:space="preserve">
          <source>The command will generate the following output, showing that it created a single file called &lt;code&gt;tests/acceptance/list-rentals-test.js&lt;/code&gt;.</source>
          <target state="translated">该命令将生成以下输出，显示该命令创建了一个名为 &lt;code&gt;tests/acceptance/list-rentals-test.js&lt;/code&gt; 的文件。</target>
        </trans-unit>
        <trans-unit id="0f0141d4d954c6b40b635ca87daf9c4fc9548802" translate="yes" xml:space="preserve">
          <source>The complete list of which versions specific deprecations will be removed in can be found &lt;a href=&quot;https://github.com/emberjs/data/tree/master/packages/private-build-infra/addon/current-deprecations.ts&quot;&gt;here&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1a6bdd19a4196300d3fed3ccaf29bc7c89c1afa5" translate="yes" xml:space="preserve">
          <source>The component below takes a list of items and displays them on the screen. Additionally, it takes an object representing which item is selected and will select and set the scroll top to that item.</source>
          <target state="translated">下面的组件接收一个项目列表并将其显示在屏幕上。此外,它还接受一个对象,代表被选中的项目,并将选择和设置滚动顶部到该项目。</target>
        </trans-unit>
        <trans-unit id="56b41d4893b68c648ad4f70fff5b9d4ee7e84cd2" translate="yes" xml:space="preserve">
          <source>The component name is in &lt;code&gt;CapitalCase&lt;/code&gt; instead of &lt;code&gt;kebab-case&lt;/code&gt;. &lt;code&gt;{{my-component}}&lt;/code&gt; becomes &lt;code&gt;&amp;lt;MyComponent /&amp;gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="00924038d9acbd0206114498f918d95680c59534" translate="yes" xml:space="preserve">
          <source>The component should show details about the rental</source>
          <target state="translated">该组件应显示有关租赁的详细信息</target>
        </trans-unit>
        <trans-unit id="03d4f32bac2eee953b37844aa3ddbdccc1b00e16" translate="yes" xml:space="preserve">
          <source>The component should toggle the existence of a wide class on click, to expand and shrink the photo of the rental.</source>
          <target state="translated">该组件应在点击时切换宽类的存在,对租借的照片进行展开和缩小。</target>
        </trans-unit>
        <trans-unit id="bb8277dc02802176f96c31e5577dcf1f7ddceafa" translate="yes" xml:space="preserve">
          <source>The component template will have a button and a div that shows the confirmation dialog based on the value of &lt;code&gt;confirmShown&lt;/code&gt;.</source>
          <target state="translated">组件模板将具有一个按钮和一个div，以基于 &lt;code&gt;confirmShown&lt;/code&gt; 的值显示确认对话框。</target>
        </trans-unit>
        <trans-unit id="d3e02882f24ccee1b6087710e6540fa437584878" translate="yes" xml:space="preserve">
          <source>The component's element has been both created and inserted into the DOM.</source>
          <target state="translated">组件的元素已经被创建并插入到DOM中。</target>
        </trans-unit>
        <trans-unit id="4cc0a17e4b5e6b7c7ced86a1cc438b4160335bc6" translate="yes" xml:space="preserve">
          <source>The component's element is accessible via the component's &lt;a href=&quot;http://emberjs.com/api/classes/Ember.Component.html#method__&quot;&gt;&lt;code&gt;$()&lt;/code&gt;&lt;/a&gt; method.</source>
          <target state="translated">可通过组件的&lt;a href=&quot;http://emberjs.com/api/classes/Ember.Component.html#method__&quot;&gt; &lt;code&gt;$()&lt;/code&gt; &lt;/a&gt;方法访问组件的元素。</target>
        </trans-unit>
        <trans-unit id="19e3b433aa23f12bd05532ff968ce2bca61fcddc" translate="yes" xml:space="preserve">
          <source>The components look similar, don't they? The first component shows extra information about the user's local time.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f87081eb897d1fd3835c5c46606eabc3f8f40d2c" translate="yes" xml:space="preserve">
          <source>The computed macros expect you to use an array, so there is no need to use the &lt;code&gt;[]&lt;/code&gt; key in these cases. However, building your own custom computed property requires you to tell Ember.js that it is watching for array changes, which is where the &lt;code&gt;[]&lt;/code&gt; key comes in handy.</source>
          <target state="translated">计算的宏期望您使用数组，因此在这种情况下无需使用 &lt;code&gt;[]&lt;/code&gt; 键。但是，构建自己的自定义计算属性要求您告诉Ember.js，它正在监视数组更改，这是 &lt;code&gt;[]&lt;/code&gt; 键派上用场的地方。</target>
        </trans-unit>
        <trans-unit id="ae175a7f89b4f83b59ccbd1676223dd012eb30c9" translate="yes" xml:space="preserve">
          <source>The computed property function.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c04629937de1c7126ae68322907abae8ecd667fc" translate="yes" xml:space="preserve">
          <source>The container calls this object's &lt;code&gt;resolve&lt;/code&gt; method with the &lt;code&gt;fullName&lt;/code&gt; argument.</source>
          <target state="translated">容器使用 &lt;code&gt;fullName&lt;/code&gt; 参数调用该对象的 &lt;code&gt;resolve&lt;/code&gt; 方法。</target>
        </trans-unit>
        <trans-unit id="dedba2d51f22aac0e2c4ffa20bbb5629c1192057" translate="yes" xml:space="preserve">
          <source>The container-debug-adapter which is used to list all models.</source>
          <target state="translated">容器-debug-适配器,用于列出所有模型。</target>
        </trans-unit>
        <trans-unit id="01d36d5d6b5e9909fad007034d4409bd063620d8" translate="yes" xml:space="preserve">
          <source>The content array. Must be an object that implements &lt;code&gt;Array&lt;/code&gt; and/or &lt;code&gt;MutableArray.&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="71bc08d35f4aa7dfc82186fc932b83df95fed7ce" translate="yes" xml:space="preserve">
          <source>The controller associated with this route.</source>
          <target state="translated">与该途径相关的控制器。</target>
        </trans-unit>
        <trans-unit id="8b3eab1e8d1492edcda2af7cd55a05ab06f81f5f" translate="yes" xml:space="preserve">
          <source>The controller instance must already have been created, either through entering the associated route or using &lt;code&gt;generateController&lt;/code&gt;.</source>
          <target state="translated">通过输入关联的路由或使用 &lt;code&gt;generateController&lt;/code&gt; ，必须已经创建了控制器实例。</target>
        </trans-unit>
        <trans-unit id="ddb8d9fa2f2e1f80a239b246d3f4353a508a5c76" translate="yes" xml:space="preserve">
          <source>The controller name &lt;code&gt;my-controller-name&lt;/code&gt; must match the name of the Route that renders it. So if the Route is named &lt;code&gt;blog-post&lt;/code&gt;, it should have a matching Controller named &lt;code&gt;blog-post&lt;/code&gt;. The matching file names of the Controller and the Route signals to Ember that this Controller must be used when landing on the &lt;code&gt;blog-post&lt;/code&gt; Route.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d996ccba50d2a03192ad84043d699c49c674c9d6" translate="yes" xml:space="preserve">
          <source>The controller receives a single property from the Route &amp;ndash; &lt;code&gt;model&lt;/code&gt; &amp;ndash; which is the return value of the Route's &lt;code&gt;model()&lt;/code&gt; method.</source>
          <target state="translated">控制器从Route &amp;ndash; &lt;code&gt;model&lt;/code&gt; &amp;ndash; 接收单个属性，该属性是Route的 &lt;code&gt;model()&lt;/code&gt; 方法的返回值。</target>
        </trans-unit>
        <trans-unit id="9805ee9f09f7a6c9f18fe8f84f7390a97217c750" translate="yes" xml:space="preserve">
          <source>The controller's current model. When retrieving or modifying a controller's model, this property should be used instead of the &lt;code&gt;content&lt;/code&gt; property.</source>
          <target state="translated">控制器的当前模型。检索或修改控制器模型时，应使用此属性代替 &lt;code&gt;content&lt;/code&gt; 属性。</target>
        </trans-unit>
        <trans-unit id="301f36390a7be64dbf55d036bcf24116fa60dea1" translate="yes" xml:space="preserve">
          <source>The copied object</source>
          <target state="translated">被复制的对象</target>
        </trans-unit>
        <trans-unit id="dc497b43d9a73eae6ffff08e5aaad7d8aea85919" translate="yes" xml:space="preserve">
          <source>The current set of flags are defined below. If you want to add a new flag, in addition to the area below, you will also need to declare it in the &lt;code&gt;DS.Model&lt;/code&gt; class.</source>
          <target state="translated">当前标志集在下面定义。如果要添加新标志，除了下面的区域外，还需要在 &lt;code&gt;DS.Model&lt;/code&gt; 类中声明它。</target>
        </trans-unit>
        <trans-unit id="0524bb6abfd181d72da352389fd69941fb6778cc" translate="yes" xml:space="preserve">
          <source>The currently active URL.</source>
          <target state="translated">当前活动的URL。</target>
        </trans-unit>
        <trans-unit id="64c535e9f2e1008eed7eb1be8de9fd6230cf64a1" translate="yes" xml:space="preserve">
          <source>The currently active path.</source>
          <target state="translated">当前活动的路径。</target>
        </trans-unit>
        <trans-unit id="7ae269b3fbb6278f1b83a6fe01cfa16233ee99a2" translate="yes" xml:space="preserve">
          <source>The decorator &lt;em&gt;is&lt;/em&gt; important, as it binds the action directly to the class so it can reference it later on.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e660db36e9b08057f50c55c5c7416d69ef68df7e" translate="yes" xml:space="preserve">
          <source>The decorator leaves the method intact without any changes, so you can continue to use it like a normal method. This also means that you can reference the action directly in templates, instead of using strings.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e4b1d59e80066fe1a38250044448beb82d44ec54" translate="yes" xml:space="preserve">
          <source>The default &lt;code&gt;serialize&lt;/code&gt; method will insert the model's &lt;code&gt;id&lt;/code&gt; into the route's dynamic segment (in this case, &lt;code&gt;:post_id&lt;/code&gt;) if the segment contains '_id'. If the route has multiple dynamic segments or does not contain '_id', &lt;code&gt;serialize&lt;/code&gt; will return &lt;code&gt;Ember.getProperties(model, params)&lt;/code&gt;</source>
          <target state="translated">如果段中包含'_id' ，则默认的 &lt;code&gt;serialize&lt;/code&gt; 方法会将模型的 &lt;code&gt;id&lt;/code&gt; 插入路由的动态段（在本例中为 &lt;code&gt;:post_id&lt;/code&gt; ）。如果路由具有多个动态段或不包含&amp;ldquo; _id&amp;rdquo;，则 &lt;code&gt;serialize&lt;/code&gt; 将返回 &lt;code&gt;Ember.getProperties(model, params)&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="a2dbf25f0a660ec806508b272583db389f3613a0" translate="yes" xml:space="preserve">
          <source>The default &lt;code&gt;serialize&lt;/code&gt; method will insert the model's &lt;code&gt;id&lt;/code&gt; into the route's dynamic segment (in this case, &lt;code&gt;:post_id&lt;/code&gt;) if the segment contains '_id'. If the route has multiple dynamic segments or does not contain '_id', &lt;code&gt;serialize&lt;/code&gt; will return &lt;code&gt;getProperties(model, params)&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a9804540a4930794a37fbff41c2089e9b1c714b1" translate="yes" xml:space="preserve">
          <source>The default HTML tag name used for a component's DOM representation is &lt;code&gt;div&lt;/code&gt;. This can be customized by setting the &lt;code&gt;tagName&lt;/code&gt; property. The following component class:</source>
          <target state="translated">用于组件的DOM表示的默认HTML标记名称是 &lt;code&gt;div&lt;/code&gt; 。可以通过设置 &lt;code&gt;tagName&lt;/code&gt; 属性来自定义。以下组件类：</target>
        </trans-unit>
        <trans-unit id="b36c85b8bca569261536774fd6ba634fc5ceed47" translate="yes" xml:space="preserve">
          <source>The default HTML tag name used for a component's HTML representation is &lt;code&gt;div&lt;/code&gt;. This can be customized by setting the &lt;code&gt;tagName&lt;/code&gt; property.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ba661251bae2c58457a6583501ea31468be49e4e" translate="yes" xml:space="preserve">
          <source>The default adapter to use to communicate to a backend server or other persistence layer. This will be overridden by an application adapter if present.</source>
          <target state="translated">用于与后端服务器或其他持久层通信的默认适配器。如果存在的话,会被应用适配器覆盖。</target>
        </trans-unit>
        <trans-unit id="d48ca495b259e7b4f0c08e2c8e0b6fc93859dce8" translate="yes" xml:space="preserve">
          <source>The default behavior for &lt;a href=&quot;http://emberjs.com/api/classes/Ember.Templates.helpers.html#method_link-to&quot;&gt;&lt;code&gt;link-to&lt;/code&gt;&lt;/a&gt; is to add entries to the browser's history when transitioning between the routes. However, to replace the current entry in the browser's history you can use the &lt;code&gt;replace=true&lt;/code&gt; option:</source>
          <target state="translated">&lt;a href=&quot;http://emberjs.com/api/classes/Ember.Templates.helpers.html#method_link-to&quot;&gt; &lt;code&gt;link-to&lt;/code&gt; &lt;/a&gt;的默认行为是在路径之间转换时将条目添加到浏览器的历史记录中。但是，要替换浏览器历史记录中的当前条目，可以使用 &lt;code&gt;replace=true&lt;/code&gt; 选项：</target>
        </trans-unit>
        <trans-unit id="b3922692f347baa13e2c06395bc6ba435b1e4cd9" translate="yes" xml:space="preserve">
          <source>The default behavior for the &lt;code&gt;&amp;lt;LinkTo /&amp;gt;&lt;/code&gt; component is to add entries to the browser's history when transitioning between routes. However, to replace the current entry in the browser's history instead, you can use the &lt;code&gt;@replace&lt;/code&gt; option:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bca2a901121a7451f6489ec6d86fbe872ab37681" translate="yes" xml:space="preserve">
          <source>The default behavior if this method is not implemented and the option is not specified is to not reload, the same as a return of &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="562769c02d4c07aefbed025e3fd4ce1715ca1c58" translate="yes" xml:space="preserve">
          <source>The default behavior if this method is not implemented and the option is not specified is to perform a reload, the same as a return of &lt;code&gt;true&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="790f926751ceaeb677f46339fcfc28ea52ee3052" translate="yes" xml:space="preserve">
          <source>The default behavior if this method is not implemented and the option was not specified is to background reload, the same as a return of &lt;code&gt;true&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="028b9616eef359dc09d07d3be87a5ac87b8aea59" translate="yes" xml:space="preserve">
          <source>The default behavior is for lookup to return a singleton instance. The singleton is scoped to the container, allowing multiple containers to all have their own locally scoped singletons.</source>
          <target state="translated">默认的行为是让查找返回一个单子实例,单子的作用域是容器,允许多个容器都有自己的本地作用域单子。单子的作用域是容器,允许多个容器都有自己的本地作用域单子。</target>
        </trans-unit>
        <trans-unit id="0f6ae78488106d28afaef3992514442eda491907" translate="yes" xml:space="preserve">
          <source>The default behavior of &lt;code&gt;{{#each}}&lt;/code&gt; is to yield its inner block once for every item in an array passing the item as the first block parameter.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="33cd28df250e1a3d71b927a14510954a829fa40c" translate="yes" xml:space="preserve">
          <source>The default implementation returns the records as a single group.</source>
          <target state="translated">默认的实现是将记录作为一个组返回。</target>
        </trans-unit>
        <trans-unit id="6d55dd2f84ce398a6b7ca904972aeeb8f8ea5d4c" translate="yes" xml:space="preserve">
          <source>The default serialization would create a JSON object like:</source>
          <target state="translated">默认的序列化将创建一个JSON对象,如。</target>
        </trans-unit>
        <trans-unit id="037f412e390fb1167574e0aba238d8caebe3ba1b" translate="yes" xml:space="preserve">
          <source>The definition passed into setHelperManager</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c9deb1673b1b3a8d76398226ea7d92d1e9f24c75" translate="yes" xml:space="preserve">
          <source>The definition to associate the manager factory with</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9726fa72bad036507b0c7e1f772d49c8a42328a7" translate="yes" xml:space="preserve">
          <source>The denodified function inherits from the original function. It works in all environments, except IE 10 and below. Consequently all properties of the original function are available to you. However, any properties you change on the denodeified function won't be changed on the original function. Example:</source>
          <target state="translated">去编码后的函数继承自原始函数。它适用于所有环境,除了IE 10及以下。因此,您可以使用原始函数的所有属性。但是,您在去代码化函数中更改的任何属性将不会在原函数中被更改。例如</target>
        </trans-unit>
        <trans-unit id="a81bacb27ef7a7c4a59cca0a9ad3aa5799647431" translate="yes" xml:space="preserve">
          <source>The deprecation handler API was released in Ember 2.1. If you would like to leverage this API in a prior release of Ember you can install the &lt;a href=&quot;http://emberobserver.com/addons/ember-debug-handlers-polyfill&quot;&gt;ember-debug-handlers-polyfill&lt;/a&gt; addon into your project.</source>
          <target state="translated">弃用处理程序API在Ember 2.1中发布。如果您想在Ember的&lt;a href=&quot;http://emberobserver.com/addons/ember-debug-handlers-polyfill&quot;&gt;早期&lt;/a&gt;版本中使用此API，则可以在项目中安装ember-debug-handlers-polyfill插件。</target>
        </trans-unit>
        <trans-unit id="d14be1f3c6637fd072ea31a6dbb848736f0f9b4c" translate="yes" xml:space="preserve">
          <source>The deserialized value</source>
          <target state="translated">反序列化值</target>
        </trans-unit>
        <trans-unit id="12ad61a0cf3b9d504e9237bd85b7563a6d615b88" translate="yes" xml:space="preserve">
          <source>The destructor function is passed a single argument, which is the destroyable itself. This allows the function to be reused multiple times for many destroyables, rather than creating a closure function per destroyable.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="114abbe6ec3ae2a55474ea166d4a44af1882720d" translate="yes" xml:space="preserve">
          <source>The developer would need to write the following additional code:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d321ab17a248d722f4b0af0b7c1fb90212dc2e34" translate="yes" xml:space="preserve">
          <source>The difference between keyboard and screen reader navigation</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9ad5ff32eedb89ab1a75c8b607eeab8daf0934f3" translate="yes" xml:space="preserve">
          <source>The difference is that instances of classes &lt;em&gt;inherit&lt;/em&gt; elements that are defined in the class definition. For instance, we can define a &lt;em&gt;method&lt;/em&gt; on the person class, and then call it from the instance:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="64135b4c9cbf7e6c2746c87a70265ddfacced586" translate="yes" xml:space="preserve">
          <source>The dot-separated, fully-qualified name of the route, like &quot;people.index&quot;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="61863b6efe342207f2c2beda0291c57e7b350c15" translate="yes" xml:space="preserve">
          <source>The easiest way to create a two-way binding is to use a &lt;a href=&quot;http://emberjs.com/api/classes/Ember.computed.html#method_alias&quot;&gt;&lt;code&gt;computed.alias()&lt;/code&gt;&lt;/a&gt;, that specifies the path to another object.</source>
          <target state="translated">创建双向绑定的最简单方法是使用&lt;a href=&quot;http://emberjs.com/api/classes/Ember.computed.html#method_alias&quot;&gt; &lt;code&gt;computed.alias()&lt;/code&gt; &lt;/a&gt;，它指定到另一个对象的路径。</target>
        </trans-unit>
        <trans-unit id="51b9dfe652430a47b7813879322835fda06a5e1e" translate="yes" xml:space="preserve">
          <source>The easiest way to create an &lt;code&gt;Ember.Component&lt;/code&gt; is via a template. If you name a template &lt;code&gt;app/components/my-foo.hbs&lt;/code&gt;, you will be able to use &lt;code&gt;{{my-foo}}&lt;/code&gt; in other templates, which will make an instance of the isolated component.</source>
          <target state="translated">创建 &lt;code&gt;Ember.Component&lt;/code&gt; 的最简单方法是通过模板。如果将模板命名为 &lt;code&gt;app/components/my-foo.hbs&lt;/code&gt; ，则可以在其他模板中使用 &lt;code&gt;{{my-foo}}&lt;/code&gt; ，这将成为隔离组件的实例。</target>
        </trans-unit>
        <trans-unit id="1a90adc5ebc180395b92d51213f2e4db5db7c4d5" translate="yes" xml:space="preserve">
          <source>The ember-cli-deprecation-workflow addon provides a command that will collect deprecations from your console and generate JavaScript code listing its findings.</source>
          <target state="translated">ember-cli-deprecation-workflow addon提供了一个命令,它将从你的控制台中收集弃用信息,并生成列出其发现的JavaScript代码。</target>
        </trans-unit>
        <trans-unit id="fdd655946489d5fc1eb29277282f0228a2f44088" translate="yes" xml:space="preserve">
          <source>The end result is that there will be one &lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt; element corresponding to each scientist in the array inside the &lt;code&gt;&amp;lt;ul&amp;gt;&lt;/code&gt; unordered list.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c08d687a1f142539937b2a75e02478a1de2910c4" translate="yes" xml:space="preserve">
          <source>The enumerable API follows ECMAScript specifications as much as possible. This minimizes incompatibility with other libraries, and allows Ember.js to use the native browser implementations in arrays where available.</source>
          <target state="translated">可枚举的API尽可能地遵循ECMAScript规范。这最大限度地减少了与其他库的不兼容,并允许Ember.js在可用的情况下使用本机浏览器在数组中的实现。</target>
        </trans-unit>
        <trans-unit id="53296ae205ad56bb6a6d30fa5131406fb5ceb504" translate="yes" xml:space="preserve">
          <source>The event can be &lt;em&gt;any&lt;/em&gt; event name, not just the &lt;code&gt;click&lt;/code&gt; event, which makes &lt;code&gt;{{on}}&lt;/code&gt; perfect for handling any kind of DOM event. For a list of native browser events, see the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Events&quot;&gt;MDN documentation&lt;/a&gt;. The callback function will receive the event as its first argument:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2f251a4ec622923c4684a280b97957e070d1f3fc" translate="yes" xml:space="preserve">
          <source>The event dispatcher is created by the application at initialization time and sets up event listeners on the DOM element described by the application's &lt;code&gt;rootElement&lt;/code&gt; property.</source>
          <target state="translated">事件分配器由应用程序在初始化时创建，并在由应用程序的 &lt;code&gt;rootElement&lt;/code&gt; 属性描述的DOM元素上设置事件侦听器。</target>
        </trans-unit>
        <trans-unit id="053c279c50f244b9eb896230e5a90c90796a9df5" translate="yes" xml:space="preserve">
          <source>The event handling examples described above respond to one set of events. The names of the built-in events are listed below. Custom events can be registered by using &lt;a href=&quot;http://emberjs.com/api/classes/Ember.Application.html#property_customEvents&quot;&gt;Ember.Application.customEvents&lt;/a&gt;.</source>
          <target state="translated">上述事件处理示例将响应一组事件。内置事件的名称在下面列出。可以使用&lt;a href=&quot;http://emberjs.com/api/classes/Ember.Application.html#property_customEvents&quot;&gt;Ember.Application.customEvents&lt;/a&gt;注册自定义事件。</target>
        </trans-unit>
        <trans-unit id="0d6920661dd01b9f6799a3d90341150d42ee514c" translate="yes" xml:space="preserve">
          <source>The event name (e.g. &lt;code&gt;&quot;focusout&quot;&lt;/code&gt;, &lt;code&gt;&quot;input&quot;&lt;/code&gt;, &lt;code&gt;&quot;keydown&quot;&lt;/code&gt;) always follows the casing that the HTML standard uses.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b863b4625ecf29a56bcdfb71eee44abd26ee138c" translate="yes" xml:space="preserve">
          <source>The event type to be triggered.</source>
          <target state="translated">要触发的事件类型。</target>
        </trans-unit>
        <trans-unit id="5e377f2c4a3dec86abf2ac3efcc334847d1f52b8" translate="yes" xml:space="preserve">
          <source>The exception to be raised.</source>
          <target state="translated">要提出的例外。</target>
        </trans-unit>
        <trans-unit id="2422f0ff43e6667a702a73460791a92f8d19db60" translate="yes" xml:space="preserve">
          <source>The feature to check</source>
          <target state="translated">检查的功能</target>
        </trans-unit>
        <trans-unit id="c9385406411bb8482a8fc544996b6376f89a672f" translate="yes" xml:space="preserve">
          <source>The filter values.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="95787b699dfdd06e98ccefd8263560e2e6b5a8f1" translate="yes" xml:space="preserve">
          <source>The filterFunction is a function used to test records from the store to determine if they should be part of the record array.</source>
          <target state="translated">filterFunction是一个用于测试存储中的记录,以确定它们是否应该成为记录数组的一部分的函数。</target>
        </trans-unit>
        <trans-unit id="656472f642ee79659dcf28806545d76eaf64f3f5" translate="yes" xml:space="preserve">
          <source>The final result after normalization to &lt;code&gt;JSON:API&lt;/code&gt; will be added to store via &lt;code&gt;store.push&lt;/code&gt; where it will merge with any existing data for the record.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1c62272857f5accc9a6fb8673f93bc859ef49b47" translate="yes" xml:space="preserve">
          <source>The final result after normalization to &lt;code&gt;JSON:API&lt;/code&gt; will be added to store via &lt;code&gt;store.push&lt;/code&gt; where it will merge with any existing data for the returned record.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="afa48fbea9f134d061d47901eef0a77c871d6cc5" translate="yes" xml:space="preserve">
          <source>The final result after normalization to &lt;code&gt;JSON:API&lt;/code&gt; will be added to store via &lt;code&gt;store.push&lt;/code&gt; where it will merge with any existing data.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1354cf6d6ebfe63295cf54e7cfb3f6cf36145522" translate="yes" xml:space="preserve">
          <source>The final result after normalization to &lt;code&gt;JSON:API&lt;/code&gt; will be added to store via &lt;code&gt;store.push&lt;/code&gt; where it will merge with any existing records for &lt;code&gt;type&lt;/code&gt;. Existing records for the &lt;code&gt;type&lt;/code&gt; will not be removed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ea3e9a433232958757b8ce097b65b99bf100d389" translate="yes" xml:space="preserve">
          <source>The final segment of the fully-qualified name of the route, like &quot;index&quot;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="62e163152ac939e91938ed4bba47c089f566a9f1" translate="yes" xml:space="preserve">
          <source>The final test should look as follows:</source>
          <target state="translated">最后的测试应该是这样的:</target>
        </trans-unit>
        <trans-unit id="251b44a6daaf2e9098e7b6561f96f4b93ffee050" translate="yes" xml:space="preserve">
          <source>The find method is called on the model class with the value of the dynamic segment.</source>
          <target state="translated">查找方法在模型类上调用动态段的值。</target>
        </trans-unit>
        <trans-unit id="44a9ee1d503ae41f5ebe88c3bedc84b26ec908ac" translate="yes" xml:space="preserve">
          <source>The first argument (&lt;code&gt;@model&lt;/code&gt;) was curried over, and the run-time argument (&lt;code&gt;event&lt;/code&gt;) becomes a second argument. Action calls can be nested this way because each simply returns a function. Any function can be passed to the &lt;code&gt;{{action}}&lt;/code&gt; helper, including other actions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1c6ab5f4ba11276c830d14ace1931f03db22503d" translate="yes" xml:space="preserve">
          <source>The first argument (&lt;code&gt;model&lt;/code&gt;) was curried over, and the run-time argument (&lt;code&gt;event&lt;/code&gt;) becomes a second argument. Action calls can be nested this way because each simply returns a function. Any function can be passed to the &lt;code&gt;{{action}}&lt;/code&gt; helper, including other actions.</source>
          <target state="translated">重写了第一个参数（ &lt;code&gt;model&lt;/code&gt; ），运行时参数（ &lt;code&gt;event&lt;/code&gt; ）成为第二个参数。可以以这种方式嵌套操作调用，因为每个操作调用仅返回一个函数。可以将任何功能（包括其他操作）传递给 &lt;code&gt;{{action}}&lt;/code&gt; 帮助器。</target>
        </trans-unit>
        <trans-unit id="231551dd76228e5db17232fd8be733900240443b" translate="yes" xml:space="preserve">
          <source>The first argument to capabilities is a version string, which is the version of Ember that the capabilities were defined in. Ember can add new versions at any time, and these may have entirely different behaviors, but it will not remove old versions until the next major version.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ed7c239cf4e865e182877517567062ddaf11cb4e" translate="yes" xml:space="preserve">
          <source>The first nested route to generate will be the index route. An index nested route works similarly to the base index route. It is the default route that renders when no route is provided. Therefore in our case, when we navigate to &lt;code&gt;/rentals&lt;/code&gt;, Ember will attempt to load the rentals index route as a nested route.</source>
          <target state="translated">生成的第一个嵌套路由将是索引路由。索引嵌套路由的工作方式与基本索引路由类似。它是没有提供任何路由时呈现的默认路由。因此，在本例中，当我们导航到 &lt;code&gt;/rentals&lt;/code&gt; 时，Ember将尝试将租金指数路线加载为嵌套路线。</target>
        </trans-unit>
        <trans-unit id="7ef6ca8fdea7601f72ee382521ce6bdd17cdb515" translate="yes" xml:space="preserve">
          <source>The first object in the array</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b696429bcf9bb7779fc28bd415eb7c6e73818d44" translate="yes" xml:space="preserve">
          <source>The first object in the array, or &lt;code&gt;undefined&lt;/code&gt; if the array is empty.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f27629eb91cae8f4b9ccb3dcfb7838c50ccd34f1" translate="yes" xml:space="preserve">
          <source>The first option is, you could leave most older components as-is, and gradually convert them to Octane style components whenever the course of your work requires you to edit those files. The advantage is that it is very easy for everyone to tell whether a component is classic or Octane. The disadvantage is that muscle memory for Objects vs Classes is tough to overcome.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="983c3b259f765a841e0ba8fde3f9e8cb7899878d" translate="yes" xml:space="preserve">
          <source>The first parameter is the name of the route which is used by default as the path name as well.</source>
          <target state="translated">第一个参数是路由的名称,默认情况下,它也被用作路径名称。</target>
        </trans-unit>
        <trans-unit id="867dad7c3f5ffacd925eef7fa9afe4dfec51964e" translate="yes" xml:space="preserve">
          <source>The first parameter of the helper is the name of a component to render, as a string. So &lt;code&gt;{{component 'blog-post'}}&lt;/code&gt; is the same as using &lt;code&gt;&amp;lt;BlogPost /&amp;gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9105fbebbf22cf85d2b2f209a6496fbe8783578b" translate="yes" xml:space="preserve">
          <source>The first parameter of the helper is the name of a component to render, as a string. So &lt;code&gt;{{component 'blog-post'}}&lt;/code&gt; is the same as using &lt;code&gt;{{blog-post}}&lt;/code&gt;.</source>
          <target state="translated">助手的第一个参数是要呈现的组件的名称，以字符串形式。因此 &lt;code&gt;{{component 'blog-post'}}&lt;/code&gt; 与使用 &lt;code&gt;{{blog-post}}&lt;/code&gt; 相同。</target>
        </trans-unit>
        <trans-unit id="d5209e6f0bdb73ab73f04317f2793d14718036b7" translate="yes" xml:space="preserve">
          <source>The first style of invocation is &lt;strong&gt;inline invocation&lt;/strong&gt;. This looks similar to displaying a property, but helpers accept arguments. For example:</source>
          <target state="translated">第一种调用方式是&lt;strong&gt;内联调用&lt;/strong&gt;。这看起来类似于显示属性，但是助手接受参数。例如：</target>
        </trans-unit>
        <trans-unit id="75890c317887371b09062eb2031229122ca2996b" translate="yes" xml:space="preserve">
          <source>The first thing we want to do in our new project is to remove the welcome screen. We do this by simply opening up the application template file located at &lt;code&gt;app/templates/application.hbs&lt;/code&gt;.</source>
          <target state="translated">我们要在新项目中做的第一件事是删除欢迎屏幕。为此，我们只需打开位于 &lt;code&gt;app/templates/application.hbs&lt;/code&gt; 的应用程序模板文件即可。</target>
        </trans-unit>
        <trans-unit id="df63a4fe845371eed7bc197ad02924db53d537c3" translate="yes" xml:space="preserve">
          <source>The first time the &lt;code&gt;Article&lt;/code&gt; component is rendered, it would produce this output:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4857e8065fbf4081ce57d36f5907b225a8fef2b9" translate="yes" xml:space="preserve">
          <source>The first time the object is looked up, the factory function will be called to create the helper manager. It will be cached, and in subsequent lookups the cached helper manager will be used instead.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2f64cb4a633c43e464c1ff818f86a7f51cbaf2da" translate="yes" xml:space="preserve">
          <source>The first time your application asks the store for a record, the store sees that it doesn't have a local copy and requests it from your adapter. Your adapter will go and retrieve the record from your persistence layer; typically, this will be a JSON representation of the record served from an HTTP server.</source>
          <target state="translated">当您的应用程序第一次向存储请求记录时,存储会发现它没有本地副本,并向您的适配器请求它。你的适配器将从你的持久层中检索记录;通常,这将是一个从HTTP服务器上提供的记录的JSON表示。</target>
        </trans-unit>
        <trans-unit id="bd9a731b8654e32704a346674674446e3d3a69b4" translate="yes" xml:space="preserve">
          <source>The flag status in the generated build is controlled by the &lt;a href=&quot;https://github.com/emberjs/ember.js/blob/master/features.json&quot;&gt;&lt;code&gt;features.json&lt;/code&gt;&lt;/a&gt; file in the root of the Ember.js project. This file lists all new features and their current status.</source>
          <target state="translated">生成的内部版本中的标志状态由Ember.js项目根目录中的&lt;a href=&quot;https://github.com/emberjs/ember.js/blob/master/features.json&quot;&gt; &lt;code&gt;features.json&lt;/code&gt; &lt;/a&gt;文件控制。此文件列出了所有新功能及其当前状态。</target>
        </trans-unit>
        <trans-unit id="fe992690ad7d096a2f9afd1aaf7866e7673d02e4" translate="yes" xml:space="preserve">
          <source>The flag status in the generated build is controlled by the &lt;a href=&quot;https://github.com/emberjs/ember.js/blob/master/packages/@ember/canary-features/index.ts&quot;&gt;&lt;code&gt;@ember/canary-features&lt;/code&gt;&lt;/a&gt; package. This package exports a list of all available features and their current status.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eb3cef84c92085a6d2d883851701837207c0ed5e" translate="yes" xml:space="preserve">
          <source>The flag to signal a &lt;code&gt;RecordArray&lt;/code&gt; is currently loading data.</source>
          <target state="translated">用于指示 &lt;code&gt;RecordArray&lt;/code&gt; 的标志当前正在加载数据。</target>
        </trans-unit>
        <trans-unit id="53188ffd1056282eaa9b367801d327c2d664d389" translate="yes" xml:space="preserve">
          <source>The flag to signal a &lt;code&gt;RecordArray&lt;/code&gt; is finished loading data.</source>
          <target state="translated">用于指示 &lt;code&gt;RecordArray&lt;/code&gt; 的标志已完成数据加载。</target>
        </trans-unit>
        <trans-unit id="39accfabc1616fbff84cfef1e2405eff54644354" translate="yes" xml:space="preserve">
          <source>The following HTML attributes can be set via the helper:</source>
          <target state="translated">以下HTML属性可以通过帮助程序进行设置。</target>
        </trans-unit>
        <trans-unit id="eb79dc0afa03345796e1814d66f43dab53b2351b" translate="yes" xml:space="preserve">
          <source>The following HTML attributes can be set:</source>
          <target state="translated">可以设置以下HTML属性。</target>
        </trans-unit>
        <trans-unit id="44fc4180b9b05e8989204eb9f584bb53e9d638f4" translate="yes" xml:space="preserve">
          <source>The following HTML would be rendered:</source>
          <target state="translated">将会呈现以下HTML。</target>
        </trans-unit>
        <trans-unit id="1f0a3c7a9779e06c8201841fbe9265d91073f48e" translate="yes" xml:space="preserve">
          <source>The following chart is a visual representation of what takes place when the escape key is pressed in this scenario:</source>
          <target state="translated">下图是这种情况下按下回车键时发生的情况的直观表现。</target>
        </trans-unit>
        <trans-unit id="37c67db7954be266e8e6d6ff4e4e5081f2a3c808" translate="yes" xml:space="preserve">
          <source>The following code injects the &lt;code&gt;shopping-cart&lt;/code&gt; service on the &lt;code&gt;cart-contents&lt;/code&gt; component as the property &lt;code&gt;cart&lt;/code&gt;:</source>
          <target state="translated">以下代码将 &lt;code&gt;shopping-cart&lt;/code&gt; 服务作为属性 &lt;code&gt;cart&lt;/code&gt; 注入到 &lt;code&gt;cart-contents&lt;/code&gt; 组件上：</target>
        </trans-unit>
        <trans-unit id="729b7f0e23b374cb4e57a6cdd204d250859aaf3b" translate="yes" xml:space="preserve">
          <source>The following controller code:</source>
          <target state="translated">以下是控制器代码。</target>
        </trans-unit>
        <trans-unit id="5f70fdd699bda0ef491d01141402f07249723c95" translate="yes" xml:space="preserve">
          <source>The following demonstrates how you can override both the scope and the query param URL key of a single controller query param property:</source>
          <target state="translated">下面演示了如何覆盖单个控制器查询参数属性的范围和查询参数URL键。</target>
        </trans-unit>
        <trans-unit id="c25fcb78f8ce32888e37289c4e3ec48b550205a2" translate="yes" xml:space="preserve">
          <source>The following equivalent default options will be applied when the Route calls &lt;code&gt;render&lt;/code&gt;:</source>
          <target state="translated">当Route调用 &lt;code&gt;render&lt;/code&gt; 时，将应用以下等效的默认选项：</target>
        </trans-unit>
        <trans-unit id="1c4f56e0c501f86b7a8f875bd1a2f2ae5dfd1313" translate="yes" xml:space="preserve">
          <source>The following example creates a tag like &lt;code&gt;&amp;lt;div priority=&quot;high&quot; /&amp;gt;&lt;/code&gt;.</source>
          <target state="translated">以下示例创建一个 &lt;code&gt;&amp;lt;div priority=&quot;high&quot; /&amp;gt;&lt;/code&gt; 类的标记。</target>
        </trans-unit>
        <trans-unit id="1e094e921fd819fa5e76624b61faecd882472c2a" translate="yes" xml:space="preserve">
          <source>The following example creates markup like &lt;code&gt;&amp;lt;div visible /&amp;gt;&lt;/code&gt;.</source>
          <target state="translated">以下示例创建类似于 &lt;code&gt;&amp;lt;div visible /&amp;gt;&lt;/code&gt; 的标记。</target>
        </trans-unit>
        <trans-unit id="dc0a3fedd616180b3a327dd59feed1f6924220c2" translate="yes" xml:space="preserve">
          <source>The following example shows how to bind &lt;code&gt;this.userComment&lt;/code&gt; to a text area's value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7b6754ec9663f1a21ad10b8107f936386c921788" translate="yes" xml:space="preserve">
          <source>The following location types are available by default: &lt;code&gt;auto&lt;/code&gt;, &lt;code&gt;hash&lt;/code&gt;, &lt;code&gt;history&lt;/code&gt;, &lt;code&gt;none&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="afdab8293445b11ec924bd3e51d6a5d98083d81e" translate="yes" xml:space="preserve">
          <source>The following location types are currently available:</source>
          <target state="translated">目前有以下地点类型:</target>
        </trans-unit>
        <trans-unit id="444af6ddc510304a303ba597ca9b18905abc9569" translate="yes" xml:space="preserve">
          <source>The following scenarios may help with understanding the &lt;code&gt;index&lt;/code&gt; route:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d99880308d15f3270bb92cdc1b4925f6bea7510d" translate="yes" xml:space="preserve">
          <source>The following will not render anything:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7a04ae17d99bdb1ca3ff7d3f029873e55f621ebc" translate="yes" xml:space="preserve">
          <source>The format of your &lt;code&gt;links&lt;/code&gt; value will influence the final request URL via the &lt;code&gt;urlPrefix&lt;/code&gt; method:</source>
          <target state="translated">&lt;code&gt;links&lt;/code&gt; 值的格式将通过 &lt;code&gt;urlPrefix&lt;/code&gt; 方法影响最终请求URL ：</target>
        </trans-unit>
        <trans-unit id="609b07ebd91a9564a1e401e69867af9f43852ebd" translate="yes" xml:space="preserve">
          <source>The full list of valid WAI-ARIA roles is available at: &lt;a href=&quot;http://www.w3.org/TR/wai-aria/roles#roles_categorization&quot;&gt;http://www.w3.org/TR/wai-aria/roles#roles_categorization&lt;/a&gt;</source>
          <target state="translated">有效的WAI-ARIA角色的完整列表可在以下位置获得：&lt;a href=&quot;http://www.w3.org/TR/wai-aria/roles#roles_categorization&quot;&gt;http&lt;/a&gt; : //www.w3.org/TR/wai-aria/roles#roles_categorization</target>
        </trans-unit>
        <trans-unit id="a6e45911667579f9d564ca32ff7f674da9c67e45" translate="yes" xml:space="preserve">
          <source>The full list of valid WAI-ARIA roles is available at: &lt;a href=&quot;https://www.w3.org/TR/wai-aria/#roles_categorization&quot;&gt;https://www.w3.org/TR/wai-aria/#roles_categorization&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9511008deb941834774d3d5ef5d5eb87d148f334" translate="yes" xml:space="preserve">
          <source>The function of the subscription</source>
          <target state="translated">认购的功能</target>
        </trans-unit>
        <trans-unit id="e4e26ae3113858c8eb15c0dc4d04f32f42e1f9a1" translate="yes" xml:space="preserve">
          <source>The function or the name of a function of the subscription</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b0cd84bb592c3813b530b12d48aa8e49154cd375" translate="yes" xml:space="preserve">
          <source>The function to be called.</source>
          <target state="translated">要调用的函数。</target>
        </trans-unit>
        <trans-unit id="082ed932b0ef334e05715d349323974d215f0f06" translate="yes" xml:space="preserve">
          <source>The function to be executed.</source>
          <target state="translated">要执行的功能。</target>
        </trans-unit>
        <trans-unit id="20346332ef72742b031a9ca3509b52ecb5e982e4" translate="yes" xml:space="preserve">
          <source>The function to call to remove all observers.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="517f087bd001691420b5cdf2016bdad0607c3b4d" translate="yes" xml:space="preserve">
          <source>The function to turn into an action, when used in classic classes</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fb1e00c09e0f91fcfb54af8c8c11530f8722ad41" translate="yes" xml:space="preserve">
          <source>The function used to resolve the promise.</source>
          <target state="translated">用于解析承诺的函数。</target>
        </trans-unit>
        <trans-unit id="79464200d9e3ddbdb2fe8367a586a4583bb4305d" translate="yes" xml:space="preserve">
          <source>The globals provided by some assets (like &lt;code&gt;moment&lt;/code&gt; in the below example) can be used in your application without the need to &lt;code&gt;import&lt;/code&gt; them. Provide the asset path as the first and only argument.</source>
          <target state="translated">某些资产提供的全局变量（例如下面示例中的 &lt;code&gt;moment&lt;/code&gt; ）可以在您的应用程序中使用，而无需 &lt;code&gt;import&lt;/code&gt; 它们。提供资产路径作为第一个也是唯一的参数。</target>
        </trans-unit>
        <trans-unit id="933a1192be634af8a21616acc066822633b90230" translate="yes" xml:space="preserve">
          <source>The goal of initializers should be to register dependencies and injections. This phase runs once. Because these initializers may load code, they are allowed to defer application readiness and advance it. If you need to access the container or store you should use an InstanceInitializer that will be run after all initializers and therefore after all code is loaded and the app is ready.</source>
          <target state="translated">初始化器的目标应该是注册依赖和注入。这个阶段运行一次。因为这些初始化器可能会加载代码,所以它们被允许推迟应用程序的准备时间,并将其提前。如果你需要访问容器或存储,你应该使用一个InstanceInitializer,它将在所有初始化器之后运行,因此在所有代码加载和应用程序准备好之后。</target>
        </trans-unit>
        <trans-unit id="b9c39dbd4973fde26a84eeab934b9541d4d9d411" translate="yes" xml:space="preserve">
          <source>The handler function takes the following arguments:</source>
          <target state="translated">处理函数接受以下参数:</target>
        </trans-unit>
        <trans-unit id="d9976137b5fc46c82802f55ca4a18f19ec76f045" translate="yes" xml:space="preserve">
          <source>The hash of enabled Canary features. Add to this, any canary features before creating your application.</source>
          <target state="translated">启用金丝雀功能的哈希。在创建你的应用程序之前,将任何金丝雀功能添加到其中。</target>
        </trans-unit>
        <trans-unit id="f3bd13d101777fcc85f4a786366b50ce298d07ab" translate="yes" xml:space="preserve">
          <source>The hash of environment variables used to control various configuration settings. To specify your own or override default settings, add the desired properties to a global hash named &lt;code&gt;EmberENV&lt;/code&gt; (or &lt;code&gt;ENV&lt;/code&gt; for backwards compatibility with earlier versions of Ember). The &lt;code&gt;EmberENV&lt;/code&gt; hash must be created before loading Ember.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f1f5d4f4f7e10915f4694e587719c74a6240d5a1" translate="yes" xml:space="preserve">
          <source>The hash that you pass to the &lt;code&gt;meta()&lt;/code&gt; function will be saved on the computed property descriptor under the &lt;code&gt;_meta&lt;/code&gt; key. Ember runtime exposes a public API for retrieving these values from classes, via the &lt;code&gt;metaForProperty()&lt;/code&gt; function.</source>
          <target state="translated">传递给 &lt;code&gt;meta()&lt;/code&gt; 函数的哈希将保存在 &lt;code&gt;_meta&lt;/code&gt; 键下的已计算属性描述符中。Ember运行时公开了一个公共API，用于通过 &lt;code&gt;metaForProperty()&lt;/code&gt; 函数从类中检索这些值。</target>
        </trans-unit>
        <trans-unit id="ca21eb1ac808b66726237aab6478d493b882f2e4" translate="yes" xml:space="preserve">
          <source>The helper allows some user events to send actions.</source>
          <target state="translated">该助手允许一些用户事件发送动作。</target>
        </trans-unit>
        <trans-unit id="a9bc08f7454fc33317953aa1d0764e69128fbd18" translate="yes" xml:space="preserve">
          <source>The helper can send multiple actions based on user events. The action property defines the action which is send when the user presses the return key.</source>
          <target state="translated">帮助程序可以根据用户事件发送多个动作。动作属性定义了当用户按下返回键时发送的动作。</target>
        </trans-unit>
        <trans-unit id="467dd7598d6007e1305b827d35702192c6fb827f" translate="yes" xml:space="preserve">
          <source>The helper can send multiple actions based on user events. The action property defines the action which is sent when the user presses the return key.</source>
          <target state="translated">帮助程序可以根据用户事件发送多个动作。动作属性定义了当用户按下返回键时发送的动作。</target>
        </trans-unit>
        <trans-unit id="f14ebca5a9493f4d2a211160aa65d2640ff18e72" translate="yes" xml:space="preserve">
          <source>The helper definition</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fd3ae270075b46e8c72806c87f05194a68ec4531" translate="yes" xml:space="preserve">
          <source>The helper function</source>
          <target state="translated">助手功能</target>
        </trans-unit>
        <trans-unit id="a7b07a977cc772121d830f7df8058bbfdf781828" translate="yes" xml:space="preserve">
          <source>The helper method will always be called with the current Application as the first parameter.</source>
          <target state="translated">助手方法总是以当前Application作为第一个参数被调用。</target>
        </trans-unit>
        <trans-unit id="d352679de326e446da8bcf7ae02cdf1d2b388cc3" translate="yes" xml:space="preserve">
          <source>The helper method will always be called with the current Application as the first parameter. Other parameters, such as assert, need to be provided when calling the helper. Helpers need to be registered prior to calling &lt;code&gt;startApp&lt;/code&gt;, but ember-cli will take care of it for you.</source>
          <target state="translated">将始终以当前应用程序作为第一个参数来调用helper方法。调用帮助程序时，需要提供其他参数，例如assert。调用 &lt;code&gt;startApp&lt;/code&gt; 之前，必须先注册辅助程序，但是ember-cli将为您处理它。</target>
        </trans-unit>
        <trans-unit id="20ee84ece384b1c7bf0a5f88c860139387c74bc6" translate="yes" xml:space="preserve">
          <source>The helper to remove.</source>
          <target state="translated">助手去掉。</target>
        </trans-unit>
        <trans-unit id="d01c5bd098982ca73ec7c55be9abde28b9b34a69" translate="yes" xml:space="preserve">
          <source>The hierarchy of valid states that ship with ember data looks like this:</source>
          <target state="translated">运送微光数据的有效状态的层次结构是这样的。</target>
        </trans-unit>
        <trans-unit id="68c89db6b29208c854763ad0480098f6d5a30824" translate="yes" xml:space="preserve">
          <source>The hook is also run during a time period where state mutations are &lt;em&gt;disabled&lt;/em&gt; in Ember. Any tracked state mutation will throw an error during this time, including changes to tracked properties, changes made using &lt;code&gt;Ember.set&lt;/code&gt;, updates to computed properties, etc. This is meant to prevent infinite rerenders and other antipatterns.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="47cb2e13420a1b957b4fcba174d9d1358ae53a96" translate="yes" xml:space="preserve">
          <source>The hook is autotracked, and will rerun whenever any tracked values used inside of it are updated. Otherwise it does not rerun.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f6e2f5503b24777429c126a35c56b33d77b5055f" translate="yes" xml:space="preserve">
          <source>The id of the record in this belongsTo relationship.</source>
          <target state="translated">这个 belongsTo关系中记录的id。</target>
        </trans-unit>
        <trans-unit id="8d93476bc0286bac3afbab171f7e9f39fc33828a" translate="yes" xml:space="preserve">
          <source>The id of the record.</source>
          <target state="translated">记录的id。</target>
        </trans-unit>
        <trans-unit id="82590e675d5bc1575afedb28d74680a06ba9de24" translate="yes" xml:space="preserve">
          <source>The identifier of the record.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0ff46cda5606c5e7a37cd133795e79fcba629d16" translate="yes" xml:space="preserve">
          <source>The ids in this has-many relationship</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4faa84fc5172e99a8fce7d5c36e3348f6689acc6" translate="yes" xml:space="preserve">
          <source>The immediate benefit of the Router service is that you can inject it into components, giving them a friendly way to initiate transitions and ask questions about the current global router state.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8942f8a026e7cff9b4bbcd39ba946b736b97427a" translate="yes" xml:space="preserve">
          <source>The index of each item in the array is provided as a second block param. This can be useful at times if you need the index, for instance if you needed to print positions in a queue</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="71fe696ada77a1df388294168858e15ad016bb74" translate="yes" xml:space="preserve">
          <source>The index of the item to return.</source>
          <target state="translated">要返回的项目的索引。</target>
        </trans-unit>
        <trans-unit id="e48be5efafef2f4ea1b2ff7461bc06581cff5d64" translate="yes" xml:space="preserve">
          <source>The index route is most helpful for rendering a view when the route has &lt;a href=&quot;#toc_dynamic-segments&quot;&gt;dynamic segments&lt;/a&gt; defined in it or there are nested routes. In other words, an &lt;code&gt;index&lt;/code&gt; template is used to show content that should not be present on sibling and child routes. For example, a blog app might have an &lt;code&gt;index&lt;/code&gt; route that shows a list of all posts, but if a user clicks on a post, they should only see the content for the individual post. Here is how that looks in practice:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bf6c6f036f009d345c5f9f4a01b236f9acff2d54" translate="yes" xml:space="preserve">
          <source>The index to retrieve.</source>
          <target state="translated">要检索的索引。</target>
        </trans-unit>
        <trans-unit id="a59b1536c7b56b8fd58d1ea97c5500491fd87390" translate="yes" xml:space="preserve">
          <source>The initial URL to navigate to</source>
          <target state="translated">导航到的初始URL</target>
        </trans-unit>
        <trans-unit id="6ec073e684d780eaf847bfcf50ff16099c381dae" translate="yes" xml:space="preserve">
          <source>The inline &lt;code&gt;if&lt;/code&gt; helper conditionally renders a single property or string.</source>
          <target state="translated">内联 &lt;code&gt;if&lt;/code&gt; 助手有条件地呈现单个属性或字符串。</target>
        </trans-unit>
        <trans-unit id="d6d29959063e476cd6d120667a761a34e0a62dbb" translate="yes" xml:space="preserve">
          <source>The inline &lt;code&gt;unless&lt;/code&gt; helper conditionally renders a single property or string. This helper acts like a ternary operator. If the first property is falsy, the second argument will be displayed, otherwise, the third argument will be displayed</source>
          <target state="translated">内联 &lt;code&gt;unless&lt;/code&gt; 帮助程序有条件地呈现单个属性或字符串。该助手的作用类似于三元运算符。如果第一个属性为falsy，则将显示第二个参数，否则，将显示第三个参数</target>
        </trans-unit>
        <trans-unit id="56b5934e9ef4b5884ae55376c33f1e9407f0ec2d" translate="yes" xml:space="preserve">
          <source>The interesting part is that the action from the service just works, because it's auto-bound to that service.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="14e0d70d0190177bdf436a92b5e0a624b81f3c2a" translate="yes" xml:space="preserve">
          <source>The internal class used to create text inputs when the &lt;code&gt;Input&lt;/code&gt; component is used with &lt;code&gt;type&lt;/code&gt; of &lt;code&gt;text&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="875191874130e97e6feff5b21de2bc9eb0a9019c" translate="yes" xml:space="preserve">
          <source>The internal class used to create text inputs when the &lt;code&gt;{{input}}&lt;/code&gt; helper is used with &lt;code&gt;type&lt;/code&gt; of &lt;code&gt;checkbox&lt;/code&gt;.</source>
          <target state="translated">内部类使用时，创建的文本输入 &lt;code&gt;{{input}}&lt;/code&gt; 助手与使用 &lt;code&gt;type&lt;/code&gt; 的 &lt;code&gt;checkbox&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="5fdad83afa3d51d43a413c1abadbd70ea9c1b3b9" translate="yes" xml:space="preserve">
          <source>The internal class used to create text inputs when the &lt;code&gt;{{input}}&lt;/code&gt; helper is used with &lt;code&gt;type&lt;/code&gt; of &lt;code&gt;text&lt;/code&gt;. See &lt;a href=&quot;https://emberjs.com/api/classes/Ember.Templates.helpers.html#method_input&quot;&gt;Ember.Templates.helpers.input&lt;/a&gt; for usage details.</source>
          <target state="translated">内部类使用时，创建的文本输入 &lt;code&gt;{{input}}&lt;/code&gt; 助手与使用 &lt;code&gt;type&lt;/code&gt; 的 &lt;code&gt;text&lt;/code&gt; 。有关用法的详细信息，请参见&lt;a href=&quot;https://emberjs.com/api/classes/Ember.Templates.helpers.html#method_input&quot;&gt;Ember.Templates.helpers.input&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="d607ba34fe18795114b4f433109ab02b90bb0adf" translate="yes" xml:space="preserve">
          <source>The internal class used to create textarea element when the &lt;code&gt;{{textarea}}&lt;/code&gt; helper is used.</source>
          <target state="translated">使用 &lt;code&gt;{{textarea}}&lt;/code&gt; 帮助程序时，用于创建textarea元素的内部类。</target>
        </trans-unit>
        <trans-unit id="361a1e9c264c708bc95babada9f413342830afcc" translate="yes" xml:space="preserve">
          <source>The internal representation used for &lt;code&gt;Textarea&lt;/code&gt; invocations.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8d750dea4a93a39d4b9db6798a523e5e15dcbad1" translate="yes" xml:space="preserve">
          <source>The inverse of &lt;code&gt;{{if}}&lt;/code&gt; is &lt;a href=&quot;http://emberjs.com/api/classes/Ember.Templates.helpers.html#method_unless&quot;&gt;&lt;code&gt;{{unless}}&lt;/code&gt;&lt;/a&gt;, which can be used in the same three styles of invocation. For example, this template only shows an amount due when the user has not paid:</source>
          <target state="translated">&lt;code&gt;{{if}}&lt;/code&gt; 的倒数是&lt;a href=&quot;http://emberjs.com/api/classes/Ember.Templates.helpers.html#method_unless&quot;&gt; &lt;code&gt;{{unless}}&lt;/code&gt; &lt;/a&gt;，可以在相同的三种调用样式中使用。例如，此模板仅显示用户未付款时的应付金额：</target>
        </trans-unit>
        <trans-unit id="d45de9e199e155b8777a207a094e041487a424da" translate="yes" xml:space="preserve">
          <source>The key &lt;code&gt;detail&lt;/code&gt; provides a textual description of the problem. Alternatively, the key &lt;code&gt;title&lt;/code&gt; can be used for the same purpose.</source>
          <target state="translated">关键 &lt;code&gt;detail&lt;/code&gt; 提供了该问题的文本描述。或者，可以将关键字 &lt;code&gt;title&lt;/code&gt; 用于相同的目的。</target>
        </trans-unit>
        <trans-unit id="65702202e37c204458f0da5be8d10b15dea8e083" translate="yes" xml:space="preserve">
          <source>The key of the sort definition (an array of sort properties), the sort function, or an array of additional dependent keys</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4b7555d5282e96bd6e24cc32840ea3424b4844f1" translate="yes" xml:space="preserve">
          <source>The key to observe</source>
          <target state="translated">观察的关键</target>
        </trans-unit>
        <trans-unit id="bda81920321dffb71626e245008601afdbbd6199" translate="yes" xml:space="preserve">
          <source>The key to set</source>
          <target state="translated">设置的关键</target>
        </trans-unit>
        <trans-unit id="3a37ba2f54c8f8714e0c7608bafd94d61d56bf8f" translate="yes" xml:space="preserve">
          <source>The last index of the `object` in the array or -1 if not found</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4eeedcde3650feea4c700ea4d5431330f4ad17e1" translate="yes" xml:space="preserve">
          <source>The last object in the array</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0ca2fa14c4fc099e27319297dcfa0ff98f1f9538" translate="yes" xml:space="preserve">
          <source>The last object in the array, or &lt;code&gt;undefined&lt;/code&gt; if the array is empty.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a6ee319d67963224e6cc6a893a3f09344964cfb2" translate="yes" xml:space="preserve">
          <source>The link Ember Data will use to fetch or reload this belongs-to relationship.</source>
          <target state="translated">Ember Data将用来获取或重载这个所属关系的链接。</target>
        </trans-unit>
        <trans-unit id="df6a49096075b75f24d4bda7b0d30a1279be1940" translate="yes" xml:space="preserve">
          <source>The link Ember Data will use to fetch or reload this has-many relationship.</source>
          <target state="translated">Ember Data将用来获取或重载这个has-many关系的链接。</target>
        </trans-unit>
        <trans-unit id="d438ad26ddcf5d6460dbc8940bb903f47d13ab01" translate="yes" xml:space="preserve">
          <source>The link at which the associated resource collection might be found</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="985c30aaaeb77cdf5f5c1f2b96ab76fb8945b562" translate="yes" xml:space="preserve">
          <source>The link at which the associated resource might be found</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="58a432726997d9234da6501577a946c77e95315e" translate="yes" xml:space="preserve">
          <source>The list of available feature-flags is located &lt;a href=&quot;https://github.com/emberjs/data/tree/master/packages/canary-features/addon/default-features.ts&quot;&gt;here&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fb4639de6bdd5d693c4936a26db0f36475d3d91c" translate="yes" xml:space="preserve">
          <source>The loading state of this array</source>
          <target state="translated">这个数组的加载状态</target>
        </trans-unit>
        <trans-unit id="c19c7109c687fbc9fcd386c8c0b1f5cabb138c0a" translate="yes" xml:space="preserve">
          <source>The location in the cache has been &lt;a href=&quot;http://emberjs.com/api/classes/Ember.String.html#method_camelize&quot;&gt;&lt;code&gt;camelized&lt;/code&gt;&lt;/a&gt; (line 30), so that it may be used as a key to look up our element. This matches the behavior in &lt;code&gt;getMapElement&lt;/code&gt; when city has not yet been cached.</source>
          <target state="translated">缓存中的位置已被&lt;a href=&quot;http://emberjs.com/api/classes/Ember.String.html#method_camelize&quot;&gt; &lt;code&gt;camelized&lt;/code&gt; &lt;/a&gt;（第30行），因此可以用作查找元素的键。当城市尚未缓存时，这与 &lt;code&gt;getMapElement&lt;/code&gt; 中的行为匹配。</target>
        </trans-unit>
        <trans-unit id="a788518ddcd9fbbee4defbf1d862f0e936c78c17" translate="yes" xml:space="preserve">
          <source>The mapped array.</source>
          <target state="translated">映射数组。</target>
        </trans-unit>
        <trans-unit id="18d8bcb9bddd16b3086b442996831dcaa439d784" translate="yes" xml:space="preserve">
          <source>The meta data for the belongs-to relationship.</source>
          <target state="translated">归属关系的元数据。</target>
        </trans-unit>
        <trans-unit id="a85e08823b46b35e1ce946c3b00a085d8f560820" translate="yes" xml:space="preserve">
          <source>The meta information for the belongs-oo relationship.</source>
          <target state="translated">belongs-oo关系的元信息。</target>
        </trans-unit>
        <trans-unit id="48f5b7224539ab7f4e87bf901aae2948123adfb0" translate="yes" xml:space="preserve">
          <source>The meta information for the belongs-to relationship.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="34f2833b8151391b99f9c680911406631b2b6fdd" translate="yes" xml:space="preserve">
          <source>The meta information for the has-many relationship.</source>
          <target state="translated">有多关系的元信息。</target>
        </trans-unit>
        <trans-unit id="5d8430c934b008d50c8359ba00d5a45d0de82a9c" translate="yes" xml:space="preserve">
          <source>The method is responsible for pushing new data to the store using &lt;code&gt;store.push&lt;/code&gt; once any necessary normalization has occurred, and no data in the store will be updated unless it does so.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="49369103b0464b44493cf84cb646510c7e94536a" translate="yes" xml:space="preserve">
          <source>The method name to check for</source>
          <target state="translated">要检查的方法名称</target>
        </trans-unit>
        <trans-unit id="0263e067489f60c9e685cbc3d24f7b8e48689a36" translate="yes" xml:space="preserve">
          <source>The method to invoke</source>
          <target state="translated">要调用的方法</target>
        </trans-unit>
        <trans-unit id="19540d3f9bb05ef81877198fb53c8953af81b641" translate="yes" xml:space="preserve">
          <source>The method to invoke. If you pass a string it will be resolved on the target at the time the method is invoked.</source>
          <target state="translated">要调用的方法。如果你传递了一个字符串,它将在方法被调用时在目标上被解析。</target>
        </trans-unit>
        <trans-unit id="0de0091a090dc150acbc0fbf24a9397407d002b0" translate="yes" xml:space="preserve">
          <source>The method to invoke. If you pass a string it will be resolved on the target object at the time the scheduled item is invoked allowing you to change the target function.</source>
          <target state="translated">要调用的方法。如果你传递了一个字符串,它将在预定项目被调用时在目标对象上被解析,允许你改变目标函数。</target>
        </trans-unit>
        <trans-unit id="3506db6058e732c49d0d84aa3928be98489273e0" translate="yes" xml:space="preserve">
          <source>The method to invoke. May be a function or a string. If you pass a string then it will be looked up on the passed target.</source>
          <target state="translated">要调用的方法。可以是一个函数或一个字符串。如果你传递了一个字符串,那么它将在传递的目标上被查找。</target>
        </trans-unit>
        <trans-unit id="e194b891dd0bdf837df286a64c9c0349d4765a81" translate="yes" xml:space="preserve">
          <source>The methods in this mixin have been moved to &lt;a href=&quot;https://api.emberjs.com/ember/release/classes/MutableArray&quot;&gt;MutableArray&lt;/a&gt;. This mixin has been intentionally preserved to avoid breaking Enumerable.detect checks until the community migrates away from them.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d11f6516cbacb45fdea866478b595ee9ed7bf1d3" translate="yes" xml:space="preserve">
          <source>The methods likely to be overridden are:</source>
          <target state="translated">可能被推翻的方法有:</target>
        </trans-unit>
        <trans-unit id="eb3c70dade0bce9d1ab411df82e04ea62f4ddfac" translate="yes" xml:space="preserve">
          <source>The methods of this object are designed to be easy to override in a subclass. For example, you could enhance how a template is resolved like so:</source>
          <target state="translated">这个对象的方法被设计成易于在子类中覆盖。例如,你可以像这样增强模板的解析方式。</target>
        </trans-unit>
        <trans-unit id="f9047c74c1590bc009ee5e6df824e3a60a2c8e26" translate="yes" xml:space="preserve">
          <source>The model class is determined from the segment (&lt;code&gt;post_id&lt;/code&gt;'s class is &lt;code&gt;App.Post&lt;/code&gt;)</source>
          <target state="translated">根据类别确定模型类（ &lt;code&gt;post_id&lt;/code&gt; 的类为 &lt;code&gt;App.Post&lt;/code&gt; ）</target>
        </trans-unit>
        <trans-unit id="5da58253b88e1c437a81d76ece8cc0c89fc0db69" translate="yes" xml:space="preserve">
          <source>The model class that all Ember Data records descend from. This is the public API of Ember Data models. If you are using Ember Data in your application, this is the class you should use. If you are working on Ember Data internals, you most likely want to be dealing with &lt;code&gt;InternalModel&lt;/code&gt;</source>
          <target state="translated">所有Ember Data记录所属的模型类。这是Ember Data模型的公共API。如果您在应用程序中使用Ember Data，则应使用该类。如果您使用的是Ember Data内部构件，则很可能要处理 &lt;code&gt;InternalModel&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="7e351f80cd5556cb6da014791c372d237924a3b0" translate="yes" xml:space="preserve">
          <source>The model for the &lt;code&gt;post&lt;/code&gt; route is &lt;code&gt;store.findRecord('post', params.post_id)&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;post&lt;/code&gt; 路线的模型是 &lt;code&gt;store.findRecord('post', params.post_id)&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="61a80d68a8a250e49493ed6f67e0f4faa9238b3d" translate="yes" xml:space="preserve">
          <source>The model hooks (&lt;code&gt;beforeModel&lt;/code&gt;, &lt;code&gt;model&lt;/code&gt;, and &lt;code&gt;afterModel&lt;/code&gt;) of an error substate are not called. Only the &lt;code&gt;setupController&lt;/code&gt; method of the error substate is called with the &lt;code&gt;error&lt;/code&gt; as the model. See example below:</source>
          <target state="translated">错误子状态的模型挂钩（ &lt;code&gt;beforeModel&lt;/code&gt; ， &lt;code&gt;model&lt;/code&gt; 和 &lt;code&gt;afterModel&lt;/code&gt; ）不会被调用。仅将错误子状态的 &lt;code&gt;setupController&lt;/code&gt; 方法与 &lt;code&gt;error&lt;/code&gt; 作为模型一起调用。请参见下面的示例：</target>
        </trans-unit>
        <trans-unit id="b8016ce6655155fdadd4d35b5e510555347bbeed" translate="yes" xml:space="preserve">
          <source>The model is passed from the Route to the Controller by default using the &lt;a href=&quot;https://api.emberjs.com/ember/release/classes/Route/methods#setupController&quot;&gt;&lt;code&gt;setupController()&lt;/code&gt;&lt;/a&gt; function. The Controller is then often used to decorate the model with display properties such as retrieving the full name from a name model.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="19ae229adfd578f13d92ff0a6a38ca5deaa02ad7" translate="yes" xml:space="preserve">
          <source>The model name.</source>
          <target state="translated">模型名称。</target>
        </trans-unit>
        <trans-unit id="280c3aad18626cc5e1384613f6c69059889e22fc" translate="yes" xml:space="preserve">
          <source>The model's relationships as a map, keyed on the type of the relationship. The value of each entry is an array containing a descriptor for each relationship with that type, describing the name of the relationship as well as the type.</source>
          <target state="translated">模型的关系图,以关系的类型为键。每个条目的值是一个数组,包含该类型的每个关系的描述符,描述关系的名称和类型。</target>
        </trans-unit>
        <trans-unit id="d0e3568f7b5ea35bae50803475ef2f179bff0fad" translate="yes" xml:space="preserve">
          <source>The modelClass represented by this record array.</source>
          <target state="translated">这个记录数组所代表的modelClass。</target>
        </trans-unit>
        <trans-unit id="1b04aa2d53410185338ec80a1de0f471ec5c2cca" translate="yes" xml:space="preserve">
          <source>The modern, Octane-style way to handle keyboard events is to &lt;a href=&quot;https://guides.emberjs.com/upgrading/current-edition/glimmer-components/#toc_writing-your-own-modifiers&quot;&gt;write a modifier&lt;/a&gt; to separate concerns: The component manages the state, while the modifier manages interactions with the DOM. Your action will receive an actual &lt;code&gt;event&lt;/code&gt; object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1468fe922c4d358e1fb64d192198edd28ad5323b" translate="yes" xml:space="preserve">
          <source>The modifier takes 1 argument, a Boolean that specifies if we should call the element's &lt;code&gt;play&lt;/code&gt; or &lt;code&gt;pause&lt;/code&gt; method.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9b5cb3250e657154b846921be6b421736593a830" translate="yes" xml:space="preserve">
          <source>The modifier that we made for the audio player component can be reused on &lt;em&gt;any&lt;/em&gt; element that implements &lt;code&gt;play&lt;/code&gt; and &lt;code&gt;pause&lt;/code&gt; methods. In particular, we can reuse the modifier on any &lt;code&gt;HTMLMediaElement&lt;/code&gt;, which includes &lt;code&gt;audio&lt;/code&gt; and &lt;code&gt;video&lt;/code&gt; elements.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3370a1c791c00ea8404d8d2d8350797b938bd250" translate="yes" xml:space="preserve">
          <source>The modifier that we're going to build will allow us to say:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="06574cdcebf2b12553ee5033ae390a06647355df" translate="yes" xml:space="preserve">
          <source>The most common case for using the run loop is integrating with a non-Ember API that includes some sort of asynchronous callback. For example:</source>
          <target state="translated">使用运行循环最常见的情况是与非Ember API集成,该API包含某种异步回调。比如说</target>
        </trans-unit>
        <trans-unit id="cacb8b5741c18afe5abd31963d74c05c17355b34" translate="yes" xml:space="preserve">
          <source>The most common place you'll want to access &lt;code&gt;modelName&lt;/code&gt; is in your serializer's &lt;code&gt;payloadKeyFromModelName&lt;/code&gt; method. For example, to change payload keys to underscore (instead of dasherized), you might use the following code:</source>
          <target state="translated">您要访问 &lt;code&gt;modelName&lt;/code&gt; 的最常见位置是序列化程序的有效 &lt;code&gt;payloadKeyFromModelName&lt;/code&gt; 方法。例如，要将有效负载密钥更改为下划线（而不是反斜线），可以使用以下代码：</target>
        </trans-unit>
        <trans-unit id="222ca871cd60800a1adcf1df212f18f99834d9b6" translate="yes" xml:space="preserve">
          <source>The most important difference between this example and the cases we've seen so far is that we need to remove the &lt;code&gt;click&lt;/code&gt; event handler from the document when this element is destroyed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="72e917e7fbfea1d894c8dfaa034cc1e720bdd4e4" translate="yes" xml:space="preserve">
          <source>The most important thing to know about named argument syntax is that an argument with an &lt;code&gt;@&lt;/code&gt;&lt;em&gt;always&lt;/em&gt; refers to the &lt;em&gt;original&lt;/em&gt; value that was passed when the component was invoked. If you change that value in a classic component, it will &lt;em&gt;not&lt;/em&gt; update:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4860165ddeb1c56516173150ded5daec90a22733" translate="yes" xml:space="preserve">
          <source>The name of a route. In this example, it would be &lt;code&gt;index&lt;/code&gt;, &lt;code&gt;photos&lt;/code&gt;, or &lt;code&gt;photos.edit&lt;/code&gt;.</source>
          <target state="translated">路线名称。在此示例中，它将是 &lt;code&gt;index&lt;/code&gt; ， &lt;code&gt;photos&lt;/code&gt; 或 &lt;code&gt;photos.edit&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="f70391ad509d6330a846870500a48929f3fe644d" translate="yes" xml:space="preserve">
          <source>The name of the controller to associate with this route.</source>
          <target state="translated">与该途径相关联的控制器的名称。</target>
        </trans-unit>
        <trans-unit id="8a0f4ba13feddd8f7a0fcb578c4a64ee25577bba" translate="yes" xml:space="preserve">
          <source>The name of the currently active route.</source>
          <target state="translated">当前活动途径的名称。</target>
        </trans-unit>
        <trans-unit id="2d5cd10d5efb705d95ff6ef881164cb30052e176" translate="yes" xml:space="preserve">
          <source>The name of the event</source>
          <target state="translated">活动名称</target>
        </trans-unit>
        <trans-unit id="79193a57dbbc3246321cf5ba9ea7e09896c27a92" translate="yes" xml:space="preserve">
          <source>The name of the helper method to add.</source>
          <target state="translated">要添加的辅助方法的名称。</target>
        </trans-unit>
        <trans-unit id="0be317d734b30c2e8a916f8992d44b13a519d341" translate="yes" xml:space="preserve">
          <source>The name of the model type for this payload</source>
          <target state="translated">该有效载荷的模型类型名称。</target>
        </trans-unit>
        <trans-unit id="48937d3df342f8b3c9377985edf9ceb5b1837454" translate="yes" xml:space="preserve">
          <source>The name of the property to decrement</source>
          <target state="translated">递减的财产名称</target>
        </trans-unit>
        <trans-unit id="a664383b45acf8957aaf6e6f496db9828833977d" translate="yes" xml:space="preserve">
          <source>The name of the property to increment</source>
          <target state="translated">要增量的财产名称</target>
        </trans-unit>
        <trans-unit id="8a46946ba08b63ffb9945d5218fd4eaab85e6281" translate="yes" xml:space="preserve">
          <source>The name of the property to retrieve</source>
          <target state="translated">要检索的属性名称</target>
        </trans-unit>
        <trans-unit id="645bc5da9840b9064b59ef1eef330781affe8068" translate="yes" xml:space="preserve">
          <source>The name of the property to toggle</source>
          <target state="translated">要切换的属性名称</target>
        </trans-unit>
        <trans-unit id="5fb100cec0ff90d54ebe800238fc00ef6238601d" translate="yes" xml:space="preserve">
          <source>The name of the queue to schedule against. Default queues are 'sync' and 'actions'</source>
          <target state="translated">要调度的队列名称。默认队列是 &quot;同步 &quot;和 &quot;行动&quot;。</target>
        </trans-unit>
        <trans-unit id="4c90a724a69d75c22285140dd18e22630ce627af" translate="yes" xml:space="preserve">
          <source>The name of the queue to schedule against. Default queues are 'sync' and 'actions'.</source>
          <target state="translated">要调度的队列名称。默认队列是 &quot;同步 &quot;和 &quot;行动&quot;。</target>
        </trans-unit>
        <trans-unit id="412c7edabb449d585fb3b04777cadf040be0c6fb" translate="yes" xml:space="preserve">
          <source>The name of the queue to schedule against. Default queues is 'actions'</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="58a7a93b5cf03f01876ff341f3a948fb65c42f65" translate="yes" xml:space="preserve">
          <source>The name of the queue to schedule against. Default queues is 'actions'.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="92bd55fef05773932c03eea0113227b4aea76072" translate="yes" xml:space="preserve">
          <source>The name of the remote type. This should either be &quot;link&quot; or &quot;id&quot;</source>
          <target state="translated">远程类型的名称。应该是 &quot;link &quot;或 &quot;id&quot;。</target>
        </trans-unit>
        <trans-unit id="a7278ab5074a42a98d664c4226440fce451e40e3" translate="yes" xml:space="preserve">
          <source>The name of the remote type. This should either be &quot;link&quot; or &quot;ids&quot;</source>
          <target state="translated">远程类型的名称。应该是 &quot;链接 &quot;或 &quot;ids&quot;</target>
        </trans-unit>
        <trans-unit id="6838390afde7ef9b39749e803754bdd090c5e4ec" translate="yes" xml:space="preserve">
          <source>The name of the remote type. This should either be `link` or `ids`</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="15f44cca7344c2cf48a11e2ee934769fefd135d2" translate="yes" xml:space="preserve">
          <source>The name of the route, defined by the router, is &lt;code&gt;post&lt;/code&gt;.</source>
          <target state="translated">路由器定义的路由名称是 &lt;code&gt;post&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="bf231cf3a8a2a447118471fb31238f6056887442" translate="yes" xml:space="preserve">
          <source>The name of the route, dot-delimited, including the engine prefix if applicable.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="08a86bad24be595b560f010d3688c6353e6a3adf" translate="yes" xml:space="preserve">
          <source>The name of the route, dot-delimited.</source>
          <target state="translated">途径的名称,以点为界。</target>
        </trans-unit>
        <trans-unit id="289954f9d601b7db9c6b62df2307ce4028bd72f5" translate="yes" xml:space="preserve">
          <source>The name of the template to render minus the leading underscore.</source>
          <target state="translated">要渲染的模板名称,去掉前面的下划线。</target>
        </trans-unit>
        <trans-unit id="585502711f2ed284be4b7d4f4cbfdd64b80f43da" translate="yes" xml:space="preserve">
          <source>The name of the template to use by default when rendering this routes template.</source>
          <target state="translated">渲染该路由模板时默认使用的模板名称。</target>
        </trans-unit>
        <trans-unit id="ac02b1d310f7ef275f6aa37d5a1c1857a4953643" translate="yes" xml:space="preserve">
          <source>The named arguments are:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="66bd3365f2c2e07363112e9b122a98da62e8cf5e" translate="yes" xml:space="preserve">
          <source>The named arguments to the helper</source>
          <target state="translated">助手的命名参数</target>
        </trans-unit>
        <trans-unit id="a509b315f0cde9d1bc56906fc1ff01f0fa7cd5eb" translate="yes" xml:space="preserve">
          <source>The names are bound in the order that they are passed to &lt;code&gt;yield&lt;/code&gt; in the component template.</source>
          <target state="translated">名称按照它们传递以在组件模板中 &lt;code&gt;yield&lt;/code&gt; 的顺序进行绑定。</target>
        </trans-unit>
        <trans-unit id="e77eb65bd28e587e371b48a93647ea7203a5a5b5" translate="yes" xml:space="preserve">
          <source>The native decorator version functions the same, just with a slightly different syntax:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="af735066725f72033af215f7de9ba3c390ea1309" translate="yes" xml:space="preserve">
          <source>The nested helper is called first returning &lt;code&gt;&quot;zoooom&quot;&lt;/code&gt; only if &lt;code&gt;isFueled&lt;/code&gt; is true. Then the inline expression is called, rendering the nested helper's value (&lt;code&gt;&quot;zoooom&quot;&lt;/code&gt;) only if &lt;code&gt;isFast&lt;/code&gt; is true.</source>
          <target state="translated">仅当 &lt;code&gt;isFueled&lt;/code&gt; 为true时，嵌套帮助程序 &lt;code&gt;&quot;zoooom&quot;&lt;/code&gt; 称为首先返回&amp;ldquo; zoooom&amp;rdquo;。然后调用内联表达式，仅当 &lt;code&gt;isFast&lt;/code&gt; 为true时，才渲染嵌套的帮助程序的值（ &lt;code&gt;&quot;zoooom&quot;&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="d1a53ba45425a490db9af03715c5bdb612eaf800" translate="yes" xml:space="preserve">
          <source>The nested keys &lt;code&gt;source.pointer&lt;/code&gt; detail which specific element of the request data was invalid.</source>
          <target state="translated">嵌套键 &lt;code&gt;source.pointer&lt;/code&gt; 详细说明请求数据的哪个特定元素无效。</target>
        </trans-unit>
        <trans-unit id="3760ba7804e24bcfab76505e83862a063874ae43" translate="yes" xml:space="preserve">
          <source>The new APIs split each of these pieces of functionality out into one clearly defined API:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6c12d2d252b58333d9ab6aaa11b78422d2a1172e" translate="yes" xml:space="preserve">
          <source>The new owner object of the object instance.</source>
          <target state="translated">对象实例的新所有者对象。</target>
        </trans-unit>
        <trans-unit id="0086db850d74927843eccf283540af44ecddc2fe" translate="yes" xml:space="preserve">
          <source>The new property value</source>
          <target state="translated">新的财产价值</target>
        </trans-unit>
        <trans-unit id="a8598df9298115d19b4f856a4a205f3b2de8355a" translate="yes" xml:space="preserve">
          <source>The next example includes a dynamic segment, and will return &lt;code&gt;true&lt;/code&gt; if the current route is &lt;code&gt;/posts/1&lt;/code&gt;, assuming the post has an id of 1:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7f13234869d6044bbe39065b2ac29afdf278e2d5" translate="yes" xml:space="preserve">
          <source>The normal behavior for a function defined in &lt;code&gt;actions&lt;/code&gt; does not receive the browser event as an argument. So, the function definition for the action cannot define an event parameter. The following example demonstrates the default behavior using an action.</source>
          <target state="translated">&lt;code&gt;actions&lt;/code&gt; 中定义的功能的正常行为不会将浏览器事件作为参数接收。因此，操作的函数定义无法定义事件参数。下面的示例演示使用操作的默认行为。</target>
        </trans-unit>
        <trans-unit id="ba645aaa52d49d720b744b7458d92f0fa898b311" translate="yes" xml:space="preserve">
          <source>The normalized JSON format that Ember Data expects is a &lt;a href=&quot;http://jsonapi.org/&quot;&gt;JSON API&lt;/a&gt; document with a couple of additional restrictions.</source>
          <target state="translated">Ember Data期望的规范化JSON格式是&lt;a href=&quot;http://jsonapi.org/&quot;&gt;JSON API&lt;/a&gt;文档，其中还有一些其他限制。</target>
        </trans-unit>
        <trans-unit id="25ea6956efd1543b5c8bfa3c8a43cfe9ca4cb62c" translate="yes" xml:space="preserve">
          <source>The normalized JSON format that Ember Data expects is a &lt;a href=&quot;http://jsonapi.org/&quot;&gt;JSON:API&lt;/a&gt; document with a couple of additional restrictions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7c8de9de7d8715fcd640ec12ea5f6988255f2d0e" translate="yes" xml:space="preserve">
          <source>The normalized JSON object that Ember Data expects a serializer to return looks like this:</source>
          <target state="translated">Ember Data期望序列化器返回的标准化JSON对象是这样的。</target>
        </trans-unit>
        <trans-unit id="0ccea401d7f2c57f31fb97091aeada81b3b9a1c9" translate="yes" xml:space="preserve">
          <source>The normalized form pushed to the store should be a &lt;a href=&quot;https://jsonapi.org/format/#document-structure&quot;&gt;JSON:API Document&lt;/a&gt; with the following additional restrictions:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="00b1abab6fd9ec65b4425bed0a462ed09048b6e0" translate="yes" xml:space="preserve">
          <source>The normalized payload</source>
          <target state="translated">归一化有效载荷</target>
        </trans-unit>
        <trans-unit id="a349a314b9df21dfbe3354d6dd9d45d18d122cff" translate="yes" xml:space="preserve">
          <source>The number of items that were added. If you pass `null` assumes 0.</source>
          <target state="translated">增加的项目数。如果你通过`null`,则假设为0。</target>
        </trans-unit>
        <trans-unit id="2d2399ceba6066f06edc5df6a7ec02fa87dba439" translate="yes" xml:space="preserve">
          <source>The number of items that were removed. If you pass `null` assumes 0</source>
          <target state="translated">被删除的项目数。如果传递 &quot;null&quot;,则假设为0。</target>
        </trans-unit>
        <trans-unit id="91de528748ecbc74aef2c6d96b0c6e4f03f6131b" translate="yes" xml:space="preserve">
          <source>The number of items that will be added. If you pass `null` assumes 0.</source>
          <target state="translated">要添加的项目数。如果你通过`null`,则假设为0。</target>
        </trans-unit>
        <trans-unit id="975c27e833e6ea26acbcf63ae5b7ecc849744c75" translate="yes" xml:space="preserve">
          <source>The number of items that will be removed. If you pass `null` assumes 0</source>
          <target state="translated">要删除的项目数。如果你通过 &quot;null&quot;,则假设为0。</target>
        </trans-unit>
        <trans-unit id="e816df9aec6afce2dab560624ebd5e2d88a63a6f" translate="yes" xml:space="preserve">
          <source>The number of items to remove from the content.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="639768cbeb0d904ac01029f55e97c377a305a71d" translate="yes" xml:space="preserve">
          <source>The object containing named arguments is passed as the second argument to the helper function. Here is our example from above, updated to support the optional &lt;code&gt;sign&lt;/code&gt; option:</source>
          <target state="translated">包含命名参数的对象将作为第二个参数传递给辅助函数。这是上面的示例，已更新为支持可选的 &lt;code&gt;sign&lt;/code&gt; 选项：</target>
        </trans-unit>
        <trans-unit id="c51a687fc71aeecf9c4dd958d6df740581650633" translate="yes" xml:space="preserve">
          <source>The object observing the array.</source>
          <target state="translated">观察阵列的对象。</target>
        </trans-unit>
        <trans-unit id="1f67ed68402a22d74098c4257ec3b53cafc15f90" translate="yes" xml:space="preserve">
          <source>The object returned from &lt;code&gt;RSVP.defer&lt;/code&gt; is a plain object with three properties:</source>
          <target state="translated">从 &lt;code&gt;RSVP.defer&lt;/code&gt; 返回的对象是具有三个属性的普通对象：</target>
        </trans-unit>
        <trans-unit id="a22e7374b19cc8596804fc741752de92aaff8198" translate="yes" xml:space="preserve">
          <source>The object returned from &lt;code&gt;defer&lt;/code&gt; is a plain object with three properties:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dcce5060e65cd2c99b0f4c620ad0472078d080ff" translate="yes" xml:space="preserve">
          <source>The object stays intact until the end of the run loop at which point the &lt;code&gt;isDestroyed&lt;/code&gt; flag is set.</source>
          <target state="translated">该对象将保持不变，直到运行循环结束为止，此时将设置 &lt;code&gt;isDestroyed&lt;/code&gt; 标志。</target>
        </trans-unit>
        <trans-unit id="95c8a20f0925b5bbf96fad0499bac57039d137a8" translate="yes" xml:space="preserve">
          <source>The object to add to the enumerable.</source>
          <target state="translated">要添加到enumerable中的对象。</target>
        </trans-unit>
        <trans-unit id="3cf4a0d87f7ef69ab445296f735a615e0fc9dd1e" translate="yes" xml:space="preserve">
          <source>The object to assign into</source>
          <target state="translated">要分配到的对象</target>
        </trans-unit>
        <trans-unit id="8af03bf022efd9a0cec5228d3be213b9c85f758e" translate="yes" xml:space="preserve">
          <source>The object to check for the method</source>
          <target state="translated">要检查方法的对象</target>
        </trans-unit>
        <trans-unit id="0955c243cfd3d12d78e568b378af83363f51f222" translate="yes" xml:space="preserve">
          <source>The object to clone</source>
          <target state="translated">要克隆的对象</target>
        </trans-unit>
        <trans-unit id="39bee534497a07212f93576f4aad1e60752a86d9" translate="yes" xml:space="preserve">
          <source>The object to copy properties from</source>
          <target state="translated">要从对象中复制属性</target>
        </trans-unit>
        <trans-unit id="65d2fc606502a1327b27b00711f4cf8c80ff80d1" translate="yes" xml:space="preserve">
          <source>The object to merge into</source>
          <target state="translated">要合并的对象</target>
        </trans-unit>
        <trans-unit id="e4f8472045258fdd0fca12c9ca54919b2134defc" translate="yes" xml:space="preserve">
          <source>The object to modify.</source>
          <target state="translated">要修改的对象。</target>
        </trans-unit>
        <trans-unit id="79abb60263af3837b02a264e27ebb51b2ad3b831" translate="yes" xml:space="preserve">
          <source>The object to remove from the enumerable.</source>
          <target state="translated">要从enumerable中删除的对象。</target>
        </trans-unit>
        <trans-unit id="01c87d6a0a7d961661808d6108688f7202e3182f" translate="yes" xml:space="preserve">
          <source>The object to retrieve from.</source>
          <target state="translated">要检索的对象。</target>
        </trans-unit>
        <trans-unit id="2bb20788eae84e07081d526563f29dae4b083856" translate="yes" xml:space="preserve">
          <source>The object to search for.</source>
          <target state="translated">要搜索的对象。</target>
        </trans-unit>
        <trans-unit id="85154a5e735c921ec2b690de03758de42871ced1" translate="yes" xml:space="preserve">
          <source>The object to set</source>
          <target state="translated">要设置的对象</target>
        </trans-unit>
        <trans-unit id="c3f77d96cdc8b56e6910e3df6d5a9f1c5613f0e4" translate="yes" xml:space="preserve">
          <source>The object to test</source>
          <target state="translated">要测试的对象</target>
        </trans-unit>
        <trans-unit id="2bf3733b3229286b376b10082612e1163e376d99" translate="yes" xml:space="preserve">
          <source>The object to which actions from the view should be sent.</source>
          <target state="translated">视图中的操作应发送到哪个对象。</target>
        </trans-unit>
        <trans-unit id="f2e260d2b4ad3400e0f245818f68da026a61b131" translate="yes" xml:space="preserve">
          <source>The object whose properties will be forwarded.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dd986381270f07f0062f1ef0c9b835aa255c1311" translate="yes" xml:space="preserve">
          <source>The objects to copy properties from</source>
          <target state="translated">要复制属性的对象</target>
        </trans-unit>
        <trans-unit id="372e877cd43ae664673ebc043c2112a916e22b72" translate="yes" xml:space="preserve">
          <source>The observer object.</source>
          <target state="translated">观察者对象;</target>
        </trans-unit>
        <trans-unit id="448dcc70f1215ccab08f58246150159cb7a80828" translate="yes" xml:space="preserve">
          <source>The only class that is &lt;em&gt;not&lt;/em&gt; supported out of the box is the &lt;em&gt;classic Ember component&lt;/em&gt; class, i.e. one imported from &lt;code&gt;@ember/component&lt;/code&gt;. However, you can instead use external addons like &lt;a href=&quot;https://ember-decorators.github.io/ember-decorators&quot;&gt;ember-decorators&lt;/a&gt; if you want to convert these to native classes, and refer to their documentation as a guide.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dd1d5fc6ac23ff50def69e2c4b83e165b6a3f7b3" translate="yes" xml:space="preserve">
          <source>The only pattern supported is brace-expansion, anything else will be passed once to &lt;code&gt;callback&lt;/code&gt; directly.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="86ce6ebe7d9f65ca0fad2ad947fec199ce6da745" translate="yes" xml:space="preserve">
          <source>The optional &lt;code&gt;startAt&lt;/code&gt; argument can be used to pass a starting index to search from, effectively slicing the searchable portion of the array. If it's negative it will add the array length to the startAt value passed in as the index to search from. If less than or equal to &lt;code&gt;-1 * array.length&lt;/code&gt; the entire array is searched.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0bd8eb25be5a5fbd3fb1135a8b16d0f54738ece3" translate="yes" xml:space="preserve">
          <source>The optional features available to your project will depend on the Ember version your project is using.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="711d7a87524d1dd84793229cd8b47d431d1d8180" translate="yes" xml:space="preserve">
          <source>The options passed into the &lt;code&gt;DS.attr&lt;/code&gt; function when the attribute is declared on the model is also available in the transform.</source>
          <target state="translated">在模型上声明属性时传递给 &lt;code&gt;DS.attr&lt;/code&gt; 函数的选项在转换中也可用。</target>
        </trans-unit>
        <trans-unit id="c4f866c519a5e8c630cd9a5e6dd63f20316368ea" translate="yes" xml:space="preserve">
          <source>The options to be passed to jQuery.Event.</source>
          <target state="translated">传递给jQuery.Event的选项。</target>
        </trans-unit>
        <trans-unit id="1d5b199ecaf9f6851a87242945e3563cbeca4d9e" translate="yes" xml:space="preserve">
          <source>The ordered list of the names of the params required for this route. It will contain the same strings as &lt;code&gt;Object.keys(params)&lt;/code&gt;, but here the order is significant. This allows users to correctly pass params into routes programmatically.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f193bff1f5340e2150109b94091164061bd23641" translate="yes" xml:space="preserve">
          <source>The ordered list of the names of the params required for this route. It will contain the same strings as Object.keys(params), but here the order is significant. This allows users to correctly pass params into routes programmatically.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6a15f5af6bdfd5a89f7ac048643da0da0b69b48f" translate="yes" xml:space="preserve">
          <source>The other major benefit to the above approach is that &lt;code&gt;next&lt;/code&gt; introduces an element of non-determinism, which can make things much harder to test, due to its reliance on &lt;code&gt;setTimeout&lt;/code&gt;; it's much harder to guarantee the order of scheduled operations when they are scheduled outside of the current run loop, i.e. with &lt;code&gt;next&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="56c3cd7a661678595c73eb270a9318b5eac13978" translate="yes" xml:space="preserve">
          <source>The other major benefit to the above approach is that &lt;code&gt;run.next&lt;/code&gt; introduces an element of non-determinism, which can make things much harder to test, due to its reliance on &lt;code&gt;setTimeout&lt;/code&gt;; it's much harder to guarantee the order of scheduled operations when they are scheduled outside of the current run loop, i.e. with &lt;code&gt;run.next&lt;/code&gt;.</source>
          <target state="translated">上述方法的另一个主要优点是 &lt;code&gt;run.next&lt;/code&gt; 引入了不确定性元素，由于它依赖于 &lt;code&gt;setTimeout&lt;/code&gt; ，因此使事情变得很难测试。当调度的操作在当前运行循环之外进行调度（例如，使用 &lt;code&gt;run.next&lt;/code&gt; 进行调度）时，要保证它们的顺序要困难得多。</target>
        </trans-unit>
        <trans-unit id="c14211cb494d4ea352d68e2ab9fb3c84186d8bce" translate="yes" xml:space="preserve">
          <source>The other one is &lt;a href=&quot;http://emberjs.com/api/classes/Ember.Route.html#method_replaceWith&quot;&gt;&lt;code&gt;replaceWith()&lt;/code&gt;&lt;/a&gt; which works the same way as &lt;code&gt;transitionTo()&lt;/code&gt;. The only difference between them is how they manage history. &lt;code&gt;replaceWith()&lt;/code&gt; substitutes the current route entry and replaces it with that of the route we are redirecting to, while &lt;code&gt;transitionTo()&lt;/code&gt; leaves the entry for the current route and creates a new one for the redirection.</source>
          <target state="translated">另一个是&lt;a href=&quot;http://emberjs.com/api/classes/Ember.Route.html#method_replaceWith&quot;&gt; &lt;code&gt;replaceWith()&lt;/code&gt; &lt;/a&gt;，其工作方式与 &lt;code&gt;transitionTo()&lt;/code&gt; 相同。它们之间的唯一区别是它们如何管理历史记录。 &lt;code&gt;replaceWith()&lt;/code&gt; 替换当前路由条目，并用我们重定向到的路由条目替换它，而 &lt;code&gt;transitionTo()&lt;/code&gt; 保留当前路由条目，并为重定向创建一个新条目。</target>
        </trans-unit>
        <trans-unit id="db073562ceb1b92e3c932f55b5af938bebfe3a7a" translate="yes" xml:space="preserve">
          <source>The other one is &lt;a href=&quot;https://api.emberjs.com/ember/release/classes/Route/methods#replaceWith&quot;&gt;&lt;code&gt;replaceWith()&lt;/code&gt;&lt;/a&gt; which works the same way as &lt;code&gt;transitionTo()&lt;/code&gt;. The only difference between them is how they manage history. &lt;code&gt;replaceWith()&lt;/code&gt; substitutes the current route entry and replaces it with that of the route we are redirecting to, while &lt;code&gt;transitionTo()&lt;/code&gt; leaves the entry for the current route and creates a new one for the redirection.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="71ba9a0210d410c7455d5ed7adcabeabe2e374ec" translate="yes" xml:space="preserve">
          <source>The output looks the same as before, but now the &lt;code&gt;0&lt;/code&gt; comes from JavaScript, and after some more work, we can change its value with the buttons.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="acc6d06fca4a644df1fa4d9b90eb32abb2585f8e" translate="yes" xml:space="preserve">
          <source>The output of the above would be:</source>
          <target state="translated">上面的输出将是:</target>
        </trans-unit>
        <trans-unit id="2df66ad1e70181a147b06a0d20c75558216b98af" translate="yes" xml:space="preserve">
          <source>The output should be a &lt;a href=&quot;https://jsonapi.org/format/#document-structure&quot;&gt;JSON:API Document&lt;/a&gt; with the following additional restrictions:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3ab0c6bf981d7228ae87a74eeb932536510cc267" translate="yes" xml:space="preserve">
          <source>The parameter supplied to &lt;code&gt;partial&lt;/code&gt; can also be a path to a property containing a template name, e.g.:</source>
          <target state="translated">提供给 &lt;code&gt;partial&lt;/code&gt; 的参数也可以是包含模板名称的属性的路径，例如：</target>
        </trans-unit>
        <trans-unit id="efd37fb222c7e149dff6b49705240fe10a539217" translate="yes" xml:space="preserve">
          <source>The parameters can be referred to just like named parameters:</source>
          <target state="translated">参数可以像命名参数一样被引用。</target>
        </trans-unit>
        <trans-unit id="a227f12b3522d68730e7b36f0fc78aec0552a35a" translate="yes" xml:space="preserve">
          <source>The parameters can then be referred to by enumerating over the list:</source>
          <target state="translated">然后可以通过列举列表来引用参数。</target>
        </trans-unit>
        <trans-unit id="c73fdf7e2735901254b02ac94d2829f4059d49e9" translate="yes" xml:space="preserve">
          <source>The parent context of the helper</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="42fc8fe2689da3394272f78c6f0c5ad6c77884c6" translate="yes" xml:space="preserve">
          <source>The parent engine instance.</source>
          <target state="translated">父引擎实例。</target>
        </trans-unit>
        <trans-unit id="c4808789947bb1b66c38cf5e3bcb54bc1949343c" translate="yes" xml:space="preserve">
          <source>The passed in hash</source>
          <target state="translated">传入的哈希值</target>
        </trans-unit>
        <trans-unit id="15aed930cca97a392fc79410e1ca9b8700445feb" translate="yes" xml:space="preserve">
          <source>The passed value</source>
          <target state="translated">通过的值</target>
        </trans-unit>
        <trans-unit id="91af4f77ef8ac669f3229c88e3020c84a9befbfd" translate="yes" xml:space="preserve">
          <source>The path to the 'from' side of the binding. Must be relative to obj or a global path.</source>
          <target state="translated">通往绑定的 &quot;from &quot;侧的路径。必须是相对于obj或全局路径。</target>
        </trans-unit>
        <trans-unit id="c9f763dddcc9c776652d4d1ccb6796bf300cbcd8" translate="yes" xml:space="preserve">
          <source>The path to the 'to' side of the binding. Must be relative to obj.</source>
          <target state="translated">通往绑定 &quot;to &quot;端的路径。必须是相对于obj的。</target>
        </trans-unit>
        <trans-unit id="7b506261d52f3ffd5dc72f947e233a320f4ec200" translate="yes" xml:space="preserve">
          <source>The positional arguments are:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3646b2c1a754bb29df7ef8518480d66f2cd86f09" translate="yes" xml:space="preserve">
          <source>The positional arguments to the helper</source>
          <target state="translated">帮手的位置论证</target>
        </trans-unit>
        <trans-unit id="ecb5a8ced356dc6af28858715a012657c8c144f7" translate="yes" xml:space="preserve">
          <source>The positioning of &lt;code&gt;...attributes&lt;/code&gt; matters, with respect to the other attributes in the element it is applied to. Attributes that come &lt;em&gt;before&lt;/em&gt;&lt;code&gt;...attributes&lt;/code&gt; can be overridden, but attributes that come &lt;em&gt;after&lt;/em&gt; cannot:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9b2ab9413880d940f49d12c1781a196be650c645" translate="yes" xml:space="preserve">
          <source>The post's comments would then be available in your template as &lt;code&gt;model.comments&lt;/code&gt;.</source>
          <target state="translated">该帖子的评论将在您的模板中作为 &lt;code&gt;model.comments&lt;/code&gt; 提供。</target>
        </trans-unit>
        <trans-unit id="3bd0c52e66d7e75622548d76aa2f7b29dbedb829" translate="yes" xml:space="preserve">
          <source>The presence of a wrapping &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; means the application is contained in a block-layout element. When removed, and depending on if the application specifies a &lt;code&gt;rootElement&lt;/code&gt; in &lt;code&gt;config/environment.js&lt;/code&gt;, the application may no longer be contained in a block-layout element.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8884e5a83dfe81deaf4fd5eb5cc8081003657de6" translate="yes" xml:space="preserve">
          <source>The primary purpose of this class is to create hooks that can be implemented by an adapter for various test frameworks.</source>
          <target state="translated">该类的主要目的是创建可由适配器实现的钩子,用于各种测试框架。</target>
        </trans-unit>
        <trans-unit id="fdbd93abc6b826746762fa62fd7c056d63d5bc62" translate="yes" xml:space="preserve">
          <source>The primary task here is to run any registered instance initializers.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7c9ce1bc115a79248bbaed83eaf438de9db2bc44" translate="yes" xml:space="preserve">
          <source>The primary way of interacting with a promise is through its &lt;code&gt;then&lt;/code&gt; method, which registers callbacks to receive either a promise's eventual value or the reason why the promise cannot be fulfilled.</source>
          <target state="translated">与承诺进行交互的主要方式是通过其 &lt;code&gt;then&lt;/code&gt; 方法，该方法注册回调以接收承诺的最终值或承诺无法实现的原因。</target>
        </trans-unit>
        <trans-unit id="59d128dbc75fda5894fb5dea6412a07651640a9e" translate="yes" xml:space="preserve">
          <source>The process of removing the feature flags from the resulting build output is handled by &lt;a href=&quot;https://github.com/thomasboyt/defeatureify&quot;&gt;&lt;code&gt;defeatureify&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">从得到的构建输出中删除功能标志的过程由&lt;a href=&quot;https://github.com/thomasboyt/defeatureify&quot;&gt; &lt;code&gt;defeatureify&lt;/code&gt; &lt;/a&gt;处理。</target>
        </trans-unit>
        <trans-unit id="291f652ab49a4eb74576b1a1bb6950593d5373e8" translate="yes" xml:space="preserve">
          <source>The promise whose fulfillment value is being proxied by this object.</source>
          <target state="translated">承诺的实现值被此对象代理。</target>
        </trans-unit>
        <trans-unit id="fef1a4bf9ee24be7227aafb8824116d835ff8551" translate="yes" xml:space="preserve">
          <source>The property &lt;code&gt;isExpanded&lt;/code&gt; keeps track if the user has expanded the body or not. The action &lt;code&gt;toggleBody()&lt;/code&gt; provides a way for the user to provide their setting. Both of them are used in the updated template below.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cc7758b607302e53a0da31210b9497cab24a954d" translate="yes" xml:space="preserve">
          <source>The property key to be notified about.</source>
          <target state="translated">要通知的房产钥匙。</target>
        </trans-unit>
        <trans-unit id="11ef23efc9663b08bd99db214c95e5dc5d1cd5ea" translate="yes" xml:space="preserve">
          <source>The property key to retrieve</source>
          <target state="translated">检索的属性键</target>
        </trans-unit>
        <trans-unit id="841185ba10823f766df7d71131c49e92c5b6ee9e" translate="yes" xml:space="preserve">
          <source>The property key to set</source>
          <target state="translated">要设置的属性键</target>
        </trans-unit>
        <trans-unit id="37b81ff8e5f127d9996f4e45ec5e0deebeaf6ce8" translate="yes" xml:space="preserve">
          <source>The property path to set</source>
          <target state="translated">要设置的属性路径</target>
        </trans-unit>
        <trans-unit id="09da5b0066d9f8254640ee13a778ca966360cf7e" translate="yes" xml:space="preserve">
          <source>The property pattern to expand.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fb6eddea047f11a03af1d5ee0f7e00977dfd358c" translate="yes" xml:space="preserve">
          <source>The property to retrieve</source>
          <target state="translated">要检索的属性</target>
        </trans-unit>
        <trans-unit id="8611964c338d3f650ff1f5dffbfb19d6cfa92a6b" translate="yes" xml:space="preserve">
          <source>The property to set</source>
          <target state="translated">要设置的属性</target>
        </trans-unit>
        <trans-unit id="34a11ee7cca8e3277193e578a732c953c3658ceb" translate="yes" xml:space="preserve">
          <source>The property value or the defaultValue.</source>
          <target state="translated">属性值或默认值。</target>
        </trans-unit>
        <trans-unit id="bb368158afde88e0d072275a3061843e6612c710" translate="yes" xml:space="preserve">
          <source>The property value or undefined.</source>
          <target state="translated">属性值或未定义。</target>
        </trans-unit>
        <trans-unit id="19f5671dd388019c1e7b9993c2e1610d92a167e3" translate="yes" xml:space="preserve">
          <source>The provided controller will be one resolved based on the name of this route.</source>
          <target state="translated">所提供的控制器将是根据该途径的名称解析的控制器。</target>
        </trans-unit>
        <trans-unit id="43f2ede5675faaa434d556fbe9e5fc7a71392d4b" translate="yes" xml:space="preserve">
          <source>The purpose of the Ember Instrumentation module is to provide efficient, general-purpose instrumentation for Ember.</source>
          <target state="translated">Ember Instrumentation模块的目的是为Ember提供高效、通用的仪表。</target>
        </trans-unit>
        <trans-unit id="a46c1e5d7f1f40934068c5a223c77b5885a2af0d" translate="yes" xml:space="preserve">
          <source>The query params are defined per route/controller. They are not global to the app. For example, if a route &lt;code&gt;first-route&lt;/code&gt; has a query param &lt;code&gt;firstParam&lt;/code&gt; associated with it and we try to navigate to &lt;code&gt;first-route&lt;/code&gt; by using &lt;code&gt;&amp;lt;LinkTo /&amp;gt;&lt;/code&gt; component from a different route &lt;code&gt;second-route&lt;/code&gt;, like in the following handlebar template, the &lt;code&gt;firstParam&lt;/code&gt; will be omitted.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ea6214654ceb2a10baaed0d0fd30ab6e2f224940" translate="yes" xml:space="preserve">
          <source>The raw JSON response data returned from an API request. This JSON should be in the API format expected by the serializer.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4d199ab9f01a62305bceb66a40e23c1ed5ada5fc" translate="yes" xml:space="preserve">
          <source>The raw JSON response data returned from an API request. This correlates to the value the promise returned by the adapter method that performed the request resolved to.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="423ed4fcc7c2521ed4d18b49830304fce9133a79" translate="yes" xml:space="preserve">
          <source>The real value of &lt;a href=&quot;http://emberjs.com/api/classes/Ember.Templates.helpers.html#method_component&quot;&gt;&lt;code&gt;{{component}}&lt;/code&gt;&lt;/a&gt; comes from being able to dynamically pick the component being rendered. Below is an example of using the helper as a means of choosing different components for displaying different kinds of posts:</source>
          <target state="translated">&lt;a href=&quot;http://emberjs.com/api/classes/Ember.Templates.helpers.html#method_component&quot;&gt; &lt;code&gt;{{component}}&lt;/code&gt; &lt;/a&gt;的真正价值在于能够动态选择要渲染的组件。下面是使用帮助程序作为选择不同组件以显示不同类型帖子的一种示例：</target>
        </trans-unit>
        <trans-unit id="9fe576bc72572a7bfe2508f350461cc1200207f4" translate="yes" xml:space="preserve">
          <source>The real value of &lt;a href=&quot;https://api.emberjs.com/ember/release/classes/Ember.Templates.helpers/methods#component&quot;&gt;&lt;code&gt;{{component}}&lt;/code&gt;&lt;/a&gt; comes from being able to dynamically pick the component being rendered. Below is an example of using the helper as a means of choosing different components for displaying different kinds of posts:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="efa336b434d1c206c6f998b9813612733c12b618" translate="yes" xml:space="preserve">
          <source>The reason for this change is to provide extra clarity to both users reading templates, and the compiler. Without explicitly referring to &lt;code&gt;this&lt;/code&gt;, a lot of handlebars statements are pretty ambiguous - for instance, &lt;code&gt;{{title}}&lt;/code&gt; could be a helper, a local variable, or a component property.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ccc3117b00b752ea73ddb44717909dc3bf36538e" translate="yes" xml:space="preserve">
          <source>The reasons being:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1bee180750ce962548f091c93665de54feda848a" translate="yes" xml:space="preserve">
          <source>The received message (Tomster's message).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5e8ff0e7bdc9ab64effb374f18a8c11d0b169173" translate="yes" xml:space="preserve">
          <source>The record instance</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9e81c3e4c75a09b4c1f938081ce7c263e7f97700" translate="yes" xml:space="preserve">
          <source>The record instance.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="94d0b948c12d2a0e9c041073d0e9e25cd67c32bc" translate="yes" xml:space="preserve">
          <source>The record passed as the first parameter is where you should stash state about the record if needed; you should never store data on the state object itself.</source>
          <target state="translated">作为第一个参数传递的记录是你在需要的时候应该存储关于记录的状态的地方,你永远不应该在状态对象本身存储数据。</target>
        </trans-unit>
        <trans-unit id="a9efd8591a090c2d6e10ed54968aee1551a9d896" translate="yes" xml:space="preserve">
          <source>The records color. Possible options: black, red, blue, green.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0e847eeb0e7b887a5ab5a982823e0c83a639d123" translate="yes" xml:space="preserve">
          <source>The reduced value.</source>
          <target state="translated">减少的价值。</target>
        </trans-unit>
        <trans-unit id="6e588a2c9e2c86b51f204f41c83c576f838e6536" translate="yes" xml:space="preserve">
          <source>The relationship descriptor argument is an object with the following properties.</source>
          <target state="translated">关系描述符参数是一个具有以下属性的对象。</target>
        </trans-unit>
        <trans-unit id="f282f5d1355901b15ca747b3a5ab165ce7bc1457" translate="yes" xml:space="preserve">
          <source>The reload behavior is configured either via the passed &lt;code&gt;options&lt;/code&gt; hash or the result of the adapter's &lt;code&gt;shouldReloadRecord&lt;/code&gt;.</source>
          <target state="translated">可通过传递的 &lt;code&gt;options&lt;/code&gt; 哈希值或适配器的 &lt;code&gt;shouldReloadRecord&lt;/code&gt; 的结果来配置重载行为。</target>
        </trans-unit>
        <trans-unit id="1d16a00fa0a148bd51f60453ee3799ada1798f8f" translate="yes" xml:space="preserve">
          <source>The remaining sections in this guide will go into details about how to upgrade each individual feature. There's a lot to learn here, but remember, you can gradually adopt these features in existing apps. Everything you used to do will also work all the way through the rest of Ember 3, since Ember follows SemVer strictly.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="db525ceb99e1840957b4e97df93348fb6ea8f6f3" translate="yes" xml:space="preserve">
          <source>The request is made through the adapters' &lt;code&gt;queryRecord&lt;/code&gt;:</source>
          <target state="translated">该请求是通过适配器的 &lt;code&gt;queryRecord&lt;/code&gt; 发出的：</target>
        </trans-unit>
        <trans-unit id="07296fb90dfe4eee53f9a4a51505275a960def68" translate="yes" xml:space="preserve">
          <source>The request made to the server will look something like this:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="41441812d681fe9fb5a2b27e3821d50566b0e53f" translate="yes" xml:space="preserve">
          <source>The resolver instance of the application being debugged. This property will be injected on creation.</source>
          <target state="translated">被调试的应用程序的解析器实例。此属性将在创建时注入。</target>
        </trans-unit>
        <trans-unit id="71f68bc673958abd8537ab6aaa1394e3c0eb7589" translate="yes" xml:space="preserve">
          <source>The response will be fed to the associated serializer's &lt;code&gt;normalizeResponse&lt;/code&gt; method with the &lt;code&gt;requestType&lt;/code&gt; set to &lt;code&gt;createRecord&lt;/code&gt;, which should return a &lt;code&gt;JSON:API&lt;/code&gt; document.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5ae30eae8ef20456dc7c396f6a4c74047a453aed" translate="yes" xml:space="preserve">
          <source>The response will be fed to the associated serializer's &lt;code&gt;normalizeResponse&lt;/code&gt; method with the &lt;code&gt;requestType&lt;/code&gt; set to &lt;code&gt;findAll&lt;/code&gt;, which should return a &lt;code&gt;JSON:API&lt;/code&gt; document.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5afd8a4b698c0288d9a43ee73c640dd6daa95d92" translate="yes" xml:space="preserve">
          <source>The response will be fed to the associated serializer's &lt;code&gt;normalizeResponse&lt;/code&gt; method with the &lt;code&gt;requestType&lt;/code&gt; set to &lt;code&gt;findBelongsTo&lt;/code&gt;, which should return a &lt;code&gt;JSON:API&lt;/code&gt; document.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7db8668cf5577137190be69d4bd25e2a1f50b3b1" translate="yes" xml:space="preserve">
          <source>The response will be fed to the associated serializer's &lt;code&gt;normalizeResponse&lt;/code&gt; method with the &lt;code&gt;requestType&lt;/code&gt; set to &lt;code&gt;findHasMany&lt;/code&gt;, which should return a &lt;code&gt;JSON:API&lt;/code&gt; document.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="37eff849a8f536f5b43e8ee249dd94f6bb685d5b" translate="yes" xml:space="preserve">
          <source>The response will be fed to the associated serializer's &lt;code&gt;normalizeResponse&lt;/code&gt; method with the &lt;code&gt;requestType&lt;/code&gt; set to &lt;code&gt;findMany&lt;/code&gt;, which should return a &lt;code&gt;JSON:API&lt;/code&gt; document.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b8a841f2c99e42951d522eb0c9519e93fd634319" translate="yes" xml:space="preserve">
          <source>The response will be fed to the associated serializer's &lt;code&gt;normalizeResponse&lt;/code&gt; method with the &lt;code&gt;requestType&lt;/code&gt; set to &lt;code&gt;findRecord&lt;/code&gt;, which should return a &lt;code&gt;JSON:API&lt;/code&gt; document.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d26eb7b4df5ff8cf265c998ef02749c7f68a44db" translate="yes" xml:space="preserve">
          <source>The response will be fed to the associated serializer's &lt;code&gt;normalizeResponse&lt;/code&gt; method with the &lt;code&gt;requestType&lt;/code&gt; set to &lt;code&gt;query&lt;/code&gt;, which should return a &lt;code&gt;JSON:API&lt;/code&gt; document.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="98d23d4d60f1df3e96bd21f6ed47220d46e2abe6" translate="yes" xml:space="preserve">
          <source>The response will be fed to the associated serializer's &lt;code&gt;normalizeResponse&lt;/code&gt; method with the &lt;code&gt;requestType&lt;/code&gt; set to &lt;code&gt;queryRecord&lt;/code&gt;, which should return a &lt;code&gt;JSON:API&lt;/code&gt; document.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cf3bacfa8c1c32de384bc5a56675d465899274cc" translate="yes" xml:space="preserve">
          <source>The response will be fed to the associated serializer's &lt;code&gt;normalizeResponse&lt;/code&gt; method with the &lt;code&gt;requestType&lt;/code&gt; set to &lt;code&gt;updateRecord&lt;/code&gt;, which should return a &lt;code&gt;JSON:API&lt;/code&gt; document.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f6b9640e7b99b17fc81a06d8eee1b1da9fd34eff" translate="yes" xml:space="preserve">
          <source>The rest of this guide describes how to enhance your templates with event handlers, custom DOM properties and other kinds of custom JavaScript.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4e00afb986323ba904efea3a982c45371e5a241e" translate="yes" xml:space="preserve">
          <source>The result will be:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0cb5a49233ae300cc034f89c2d81a2f89b2d6f87" translate="yes" xml:space="preserve">
          <source>The resulting HTML will look similar to this:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2737a43de8d300c30b5d1d2f2763ebb462553cb1" translate="yes" xml:space="preserve">
          <source>The resulting HTML will looks like this:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="473773a9f0ae3a524717a98bf2bff757a44c072d" translate="yes" xml:space="preserve">
          <source>The resulting template render logic would be:</source>
          <target state="translated">由此产生的模板渲染逻辑将是。</target>
        </trans-unit>
        <trans-unit id="64e24c1771c3d34bfc6f390eb86af08b179c758c" translate="yes" xml:space="preserve">
          <source>The return value of &lt;code&gt;then&lt;/code&gt; is itself a promise. This second, 'downstream' promise is resolved with the return value of the first promise's fulfillment or rejection handler, or rejected if the handler throws an exception.</source>
          <target state="translated">&lt;code&gt;then&lt;/code&gt; 的返回值本身就是一个承诺。第二个&amp;ldquo;下游&amp;rdquo;承诺将通过第一个承诺的履行或拒绝处理程序的返回值来解决，如果处理程序抛出异常，则将其拒绝。</target>
        </trans-unit>
        <trans-unit id="8d20833918be8aaca0fedabee7a9e43ef5581cff" translate="yes" xml:space="preserve">
          <source>The returned promise is fulfilled with a hash that has the same key names as the &lt;code&gt;promises&lt;/code&gt; object argument. If any of the values in the object are not promises, they will be copied over to the fulfilled object and marked with state 'fulfilled'.</source>
          <target state="translated">返回的promise通过哈希实现，该哈希具有与 &lt;code&gt;promises&lt;/code&gt; 对象参数相同的键名。如果对象中的任何值都不是promise，则将它们复制到已实现的对象并标记为状态&amp;ldquo;已实现&amp;rdquo;。</target>
        </trans-unit>
        <trans-unit id="8735a66c3c58858c4137385dfcf321c94c6cd283" translate="yes" xml:space="preserve">
          <source>The returned value is placed where the &lt;code&gt;{{}}&lt;/code&gt; is called. The above style is called &quot;inline&quot;. A second style of helper usage is called &quot;block&quot;. For example:</source>
          <target state="translated">返回的值放在调用 &lt;code&gt;{{}}&lt;/code&gt; 的位置。上面的样式称为&amp;ldquo;内联&amp;rdquo;。辅助使用的第二种样式称为&amp;ldquo;块&amp;rdquo;。例如：</target>
        </trans-unit>
        <trans-unit id="7e2e21dc44f676bf1bd060e0463dcf7e7e820d3a" translate="yes" xml:space="preserve">
          <source>The root DOM element of the Application. This can be specified as an element or a &lt;a href=&quot;http://api.jquery.com/category/selectors/&quot;&gt;jQuery-compatible selector string&lt;/a&gt;.</source>
          <target state="translated">应用程序的根DOM元素。可以将其指定为元素或&lt;a href=&quot;http://api.jquery.com/category/selectors/&quot;&gt;jQuery兼容的选择器字符串&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="eecac9c9d2d99121f7c3692d02975aa4bfbc76ff" translate="yes" xml:space="preserve">
          <source>The root object of the transform.</source>
          <target state="translated">变换的根对象。</target>
        </trans-unit>
        <trans-unit id="ff90f47a360da5112c540e62daf0f08e82b6235e" translate="yes" xml:space="preserve">
          <source>The route defined above will by default use the &lt;code&gt;blog-post.js&lt;/code&gt; route handler, the &lt;code&gt;blog-post.hbs&lt;/code&gt; template, and be referred to as &lt;code&gt;blog-post&lt;/code&gt; in any &lt;code&gt;&amp;lt;LinkTo /&amp;gt;&lt;/code&gt; components.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1bb1190332a9040ced62948350a42acdb8d03375" translate="yes" xml:space="preserve">
          <source>The route defined above will by default use the &lt;code&gt;blog-post.js&lt;/code&gt; route handler, the &lt;code&gt;blog-post.hbs&lt;/code&gt; template, and be referred to as &lt;code&gt;blog-post&lt;/code&gt; in any &lt;code&gt;{{link-to}}&lt;/code&gt; helpers.</source>
          <target state="translated">上面定义的路由默认情况下将使用 &lt;code&gt;blog-post.js&lt;/code&gt; 路由处理程序， &lt;code&gt;blog-post.hbs&lt;/code&gt; 模板，并且在任何 &lt;code&gt;{{link-to}}&lt;/code&gt; 帮助器中都称为 &lt;code&gt;blog-post&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="1547b257edc696cf9d97b9973174fdd903d969e5" translate="yes" xml:space="preserve">
          <source>The route handler then typically does two things:</source>
          <target state="translated">然后,路由处理程序通常做两件事。</target>
        </trans-unit>
        <trans-unit id="5a25dcb793cf10fb01f14c9659469d0ea089350c" translate="yes" xml:space="preserve">
          <source>The route that triggered the loading event</source>
          <target state="translated">触发加载事件的途径</target>
        </trans-unit>
        <trans-unit id="40ef35919f724f529657ab517634c7e128df098d" translate="yes" xml:space="preserve">
          <source>The route will then set the return value from the &lt;code&gt;model&lt;/code&gt; hook as the &lt;code&gt;model&lt;/code&gt; property of the controller. You will then be able to access the controller's &lt;code&gt;model&lt;/code&gt; property in your template:</source>
          <target state="translated">然后，该路线将从 &lt;code&gt;model&lt;/code&gt; 挂钩中设置返回值作为控制器的 &lt;code&gt;model&lt;/code&gt; 属性。然后，您将能够在模板中访问控制器的 &lt;code&gt;model&lt;/code&gt; 属性：</target>
        </trans-unit>
        <trans-unit id="d9055510d33898a55dfaabcdf80c77508cc19202" translate="yes" xml:space="preserve">
          <source>The router considers any object with a &lt;code&gt;then()&lt;/code&gt; method defined on it to be a promise.</source>
          <target state="translated">路由器将定义了 &lt;code&gt;then()&lt;/code&gt; 方法的任何对象视为承诺。</target>
        </trans-unit>
        <trans-unit id="4c0f657b892b0b496ef8dcb14f5cd47b2928367f" translate="yes" xml:space="preserve">
          <source>The router is designed to solve those problems for you in the majority of common situations</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="20ae5f1ef171342e36f277fd6cd573513d476f32" translate="yes" xml:space="preserve">
          <source>The run loop API calls that &lt;em&gt;schedule&lt;/em&gt; work, i.e. &lt;a href=&quot;http://emberjs.com/api/classes/Ember.run.html#method_schedule&quot;&gt;&lt;code&gt;run.schedule&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;http://emberjs.com/api/classes/Ember.run.html#method_scheduleOnce&quot;&gt;&lt;code&gt;run.scheduleOnce&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;http://emberjs.com/api/classes/Ember.run.html#method_once&quot;&gt;&lt;code&gt;run.once&lt;/code&gt;&lt;/a&gt; have the property that they will approximate a run loop for you if one does not already exist. These automatically created run loops we call &lt;em&gt;autoruns&lt;/em&gt;.</source>
          <target state="translated">运行循环API调用该&lt;em&gt;调度&lt;/em&gt;工作，即&lt;a href=&quot;http://emberjs.com/api/classes/Ember.run.html#method_schedule&quot;&gt; &lt;code&gt;run.schedule&lt;/code&gt; &lt;/a&gt;，&lt;a href=&quot;http://emberjs.com/api/classes/Ember.run.html#method_scheduleOnce&quot;&gt; &lt;code&gt;run.scheduleOnce&lt;/code&gt; &lt;/a&gt;和&lt;a href=&quot;http://emberjs.com/api/classes/Ember.run.html#method_once&quot;&gt; &lt;code&gt;run.once&lt;/code&gt; &lt;/a&gt;具有以下属性：如果一个运行循环不存在，它们将为您近似一个运行循环。这些自动创建的运行循环我们称为&lt;em&gt;autoruns&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="9eae2dd384c4090fb2db27d7f5d0ce7c5baddd92" translate="yes" xml:space="preserve">
          <source>The run loop API calls that &lt;em&gt;schedule&lt;/em&gt; work, i.e. &lt;a href=&quot;https://api.emberjs.com/ember/release/classes/@ember%2Frunloop/methods#schedule&quot;&gt;&lt;code&gt;run.schedule&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://api.emberjs.com/ember/release/classes/@ember%2Frunloop/methods#scheduleOnce&quot;&gt;&lt;code&gt;run.scheduleOnce&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://api.emberjs.com/ember/release/classes/@ember%2Frunloop/methods#once&quot;&gt;&lt;code&gt;run.once&lt;/code&gt;&lt;/a&gt; have the property that they will approximate a run loop for you if one does not already exist. These automatically created run loops we call &lt;em&gt;autoruns&lt;/em&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aab8740741c5d7b401984a17e059a4e0f2aa2178" translate="yes" xml:space="preserve">
          <source>The same applies to &lt;code&gt;belongsTo&lt;/code&gt; relationships:</source>
          <target state="translated">这同样适用于 &lt;code&gt;belongsTo&lt;/code&gt; 关系：</target>
        </trans-unit>
        <trans-unit id="5d0929ac1141f7bbbbe00a7bde3540ce5998e9f7" translate="yes" xml:space="preserve">
          <source>The same philosophy that applies to changing text also applies to changing attributes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="79f91cf22c7dca84c509c4f77da4cb434629965b" translate="yes" xml:space="preserve">
          <source>The same rules apply to arrays of primitives.</source>
          <target state="translated">同样的规则也适用于基元数组。</target>
        </trans-unit>
        <trans-unit id="fd7b8fd9eac5480b43026cdd22b54a66a4559b81" translate="yes" xml:space="preserve">
          <source>The scroll happens on &lt;code&gt;didRender&lt;/code&gt;, where it will scroll the component's container to the element with the selected class name.</source>
          <target state="translated">滚动发生在 &lt;code&gt;didRender&lt;/code&gt; 上，它将组件的容器滚动到具有选定类名的元素。</target>
        </trans-unit>
        <trans-unit id="6f7c42a925e94c12e7ce7ceb33f4b3aeeeb9aafb" translate="yes" xml:space="preserve">
          <source>The second argument is an object of capabilities and boolean values indicating whether they are enabled or disabled.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5c16e7ab42d40b7ba98b835fbc52225702d39a53" translate="yes" xml:space="preserve">
          <source>The second option is, you could run the &lt;a href=&quot;https://github.com/ember-codemods/ember-native-class-codemod&quot;&gt;&lt;code&gt;ember-native-class-codemod&lt;/code&gt;&lt;/a&gt; for all remaining components. This will turn them into components that import from &lt;code&gt;@ember/component&lt;/code&gt;, retaining all the same APIs that classic components have, but just represented in a Native Class syntax. Then, following a similar pattern as option number one, you could convert them to import from &lt;code&gt;@glimmer/component&lt;/code&gt; as you work. The advantage is that everyone gets used to working with Native Classes right away. The disadvantage is that the visual differences between a Native Class &lt;code&gt;@ember/component&lt;/code&gt; and a &lt;code&gt;@glimmer/component&lt;/code&gt; are subtle, and time could easily be lost to mistakes like trying to use &lt;code&gt;didInsertElement&lt;/code&gt; on the &lt;code&gt;@glimmer/component&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0d4cba2063c093b6e0028f97cd82cdeaa6816998" translate="yes" xml:space="preserve">
          <source>The second parameter is the optional options hash. Available options are:</source>
          <target state="translated">第二个参数是可选的选项哈希。可用的选项有:</target>
        </trans-unit>
        <trans-unit id="ae0e927bc564d192141ecf229fb991b5bb185f5a" translate="yes" xml:space="preserve">
          <source>The second way of doing the same thing is to link the two records together by updating the blogPost's &lt;code&gt;hasMany&lt;/code&gt; relationship as shown below:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8b090381a04a9e48621d42bb0bf53fa4cba4f1e4" translate="yes" xml:space="preserve">
          <source>The semantic version</source>
          <target state="translated">语义版本</target>
        </trans-unit>
        <trans-unit id="ae102e1db18c498864e8334458f4e9b2f24a1a5d" translate="yes" xml:space="preserve">
          <source>The sent message (Zoey's message).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5f38bd2b1df14793a918cfb86c695e7bb1738385" translate="yes" xml:space="preserve">
          <source>The serialized value</source>
          <target state="translated">序列化值</target>
        </trans-unit>
        <trans-unit id="1441caa2180aa5deaa1d21c6c8bad5b37a9eaf47" translate="yes" xml:space="preserve">
          <source>The serializer properly converts the blog request payload into a blog post model object.</source>
          <target state="translated">序列器正确地将博客请求有效载荷转换为博客文章模型对象。</target>
        </trans-unit>
        <trans-unit id="c14938d7774e56e262de01aeb6eb9013ddc6fc80" translate="yes" xml:space="preserve">
          <source>The setup is largely similar to how Ember works out-of-the-box. Normally, Ember will boot a default instance for your Application on &quot;DOM ready&quot;. However, you can customize this behavior by disabling &lt;code&gt;autoboot&lt;/code&gt;.</source>
          <target state="translated">该设置与Ember开箱即用的工作方式非常相似。通常，Ember将在&amp;ldquo; DOM ready&amp;rdquo;上为您的应用程序启动默认实例。但是，您可以通过禁用 &lt;code&gt;autoboot&lt;/code&gt; 来自定义此行为。</target>
        </trans-unit>
        <trans-unit id="5f60051ffdc26f8b94d2d2e7e288fed7d4415582" translate="yes" xml:space="preserve">
          <source>The simplest way to accomplish this is by using the &lt;code&gt;did-insert&lt;/code&gt; modifier from &lt;a href=&quot;https://github.com/emberjs/ember-render-modifiers&quot;&gt;@ember/render-modifiers&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b61b5d3588b52ce8149370f1531a251484abdca5" translate="yes" xml:space="preserve">
          <source>The simplest way to create a component is to create a template file in &lt;code&gt;app/templates/components&lt;/code&gt;. For example, if you name a template &lt;code&gt;app/templates/components/person-profile.hbs&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="44bd33d4e5c5dbd425e1b01d352cce7c15b457b1" translate="yes" xml:space="preserve">
          <source>The sorted array.</source>
          <target state="translated">排序后的数组。</target>
        </trans-unit>
        <trans-unit id="cb8a199ba2e4d0c7c99df9a4c891ca5cc466be3d" translate="yes" xml:space="preserve">
          <source>The starting index</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8bbcdf9dc99641ff8f9df51339a76d30dd24a554" translate="yes" xml:space="preserve">
          <source>The starting index in the array that did change.</source>
          <target state="translated">数组中确实发生变化的起始索引。</target>
        </trans-unit>
        <trans-unit id="edab6dfda8b0a675cd3b277a658515192ee54ac2" translate="yes" xml:space="preserve">
          <source>The starting index in the array that will change.</source>
          <target state="translated">数组中将要改变的起始索引。</target>
        </trans-unit>
        <trans-unit id="d500b9e13d11202509045e908764c952698f3004" translate="yes" xml:space="preserve">
          <source>The store can be customized by extending the service in the following manner:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="565a8bbec3976cbbd11685d7a0db28bb110f442f" translate="yes" xml:space="preserve">
          <source>The store contains all of the data for records loaded from the server. It is also responsible for creating instances of &lt;code&gt;DS.Model&lt;/code&gt; that wrap the individual data for a record, so that they can be bound to in your Handlebars templates.</source>
          <target state="translated">存储中包含从服务器加载的记录的所有数据。它还负责创建 &lt;code&gt;DS.Model&lt;/code&gt; 实例，该实例将单个数据包装成一条记录，以便可以将它们绑定到您的Handlebars模板中。</target>
        </trans-unit>
        <trans-unit id="bd1641cbe5dc00ca11bff91f0a9e4a4c7d1b52e6" translate="yes" xml:space="preserve">
          <source>The store object is available in controllers and routes using &lt;code&gt;this.get('store')&lt;/code&gt;.</source>
          <target state="translated">store对象在控制器中可用，并且可以使用 &lt;code&gt;this.get('store')&lt;/code&gt; 进行路由。</target>
        </trans-unit>
        <trans-unit id="9048551c723d7fb82c9bc4e4ab0fc166fb192e7b" translate="yes" xml:space="preserve">
          <source>The store object is available in controllers and routes using &lt;code&gt;this.store&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b9b1269778250371106783075e2d9ba12e8b0581" translate="yes" xml:space="preserve">
          <source>The store provides multiple ways to create new record objects. They have some subtle differences in their use which are detailed below:</source>
          <target state="translated">商店提供了多种创建新记录对象的方法。它们在使用上有一些细微的差别,下面将详细介绍。</target>
        </trans-unit>
        <trans-unit id="5bc4ac84dbb157b99050486d2a507091b7f27ed0" translate="yes" xml:space="preserve">
          <source>The store service contains all of the data for records loaded from the server. It is also responsible for creating instances of &lt;code&gt;Model&lt;/code&gt; that wrap the individual data for a record, so that they can be bound to in your Handlebars templates.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="39347f24af1bfcefbc0652b641ac4e755431a795" translate="yes" xml:space="preserve">
          <source>The store service that initiated the request being normalized</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c2c599c05627277afc6c6ecc983a68b24eda3344" translate="yes" xml:space="preserve">
          <source>The store then takes that JSON, initializes the record with the JSON data, and resolves the promise returned to your application with the newly-loaded record.</source>
          <target state="translated">然后,存储会接受该JSON,用JSON数据初始化该记录,并用新加载的记录解析返回给你的应用的承诺。</target>
        </trans-unit>
        <trans-unit id="41b68f114ba57e357ad03f70aa549d7262c8caa5" translate="yes" xml:space="preserve">
          <source>The store will automatically cache records for you. If a record had already been loaded, asking for it a second time will always return the same object instance. This minimizes the number of round-trips to the server, and allows your application to render its UI to the user as fast as possible.</source>
          <target state="translated">商店会自动为你缓存记录。如果一条记录已经被加载了,第二次请求它将总是返回相同的对象实例。这样可以最大限度地减少到服务器的往返次数,让您的应用程序以最快的速度向用户呈现其UI。</target>
        </trans-unit>
        <trans-unit id="01207237cd4ccf3b900d21e60db5b725e70f8924" translate="yes" xml:space="preserve">
          <source>The store will call &lt;code&gt;findMany&lt;/code&gt; instead of multiple &lt;code&gt;findRecord&lt;/code&gt; requests to find multiple records at once if coalesceFindRequests is true.</source>
          <target state="translated">如果coalesceFindRequests为true，则存储将调用 &lt;code&gt;findMany&lt;/code&gt; 而不是多个 &lt;code&gt;findRecord&lt;/code&gt; 请求来一次查找多个记录。</target>
        </trans-unit>
        <trans-unit id="d2f69dc65e213b2fb8cdb1b7cbc4e005ab648a25" translate="yes" xml:space="preserve">
          <source>The store's &lt;code&gt;push()&lt;/code&gt; method is a low level API which accepts a JSON API document with a few important differences from the JSON API document that the JSONAPISerializer accepts. The type name in the JSON API document must match the type name of the model exactly (In the example above the type is &lt;code&gt;album&lt;/code&gt; because the model is defined in &lt;code&gt;app/models/album.js&lt;/code&gt;). Attributes and relationship names must match the casing of the properties defined on the Model class.</source>
          <target state="translated">商店的 &lt;code&gt;push()&lt;/code&gt; 方法是一个低级API，它接受的JSON API文档与JSONAPISerializer接受的JSON API文档有一些重要区别。 JSON API文档中的类型名称必须与模型的类型名称完全匹配（在上面的示例中，该类型为 &lt;code&gt;album&lt;/code&gt; 因为模型是在 &lt;code&gt;app/models/album.js&lt;/code&gt; 中定义的）。属性和关系名称必须与Model类上定义的属性的大小写匹配。</target>
        </trans-unit>
        <trans-unit id="3c796594a6b93db637ae2b09fcb292d565c316db" translate="yes" xml:space="preserve">
          <source>The store's &lt;code&gt;push()&lt;/code&gt; method is a low level API which accepts a JSON API document with a few important differences from the JSON:API document that the JSONAPISerializer accepts. The type name in the JSON API document must match the type name of the model exactly (In the example above the type is &lt;code&gt;album&lt;/code&gt; because the model is defined in &lt;code&gt;app/models/album.js&lt;/code&gt;). Attributes and relationship names must match the casing of the properties defined on the Model class.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ba2337f1b869281822cbec365330fc6ed3a87eb9" translate="yes" xml:space="preserve">
          <source>The string to camelize.</source>
          <target state="translated">的字符串,以camelize。</target>
        </trans-unit>
        <trans-unit id="e2b9d608f0fe83dbf1e7d9c07afcec863203911e" translate="yes" xml:space="preserve">
          <source>The string to capitalize.</source>
          <target state="translated">要大写的字符串。</target>
        </trans-unit>
        <trans-unit id="6562d656544896269e6510021a24eb0fe047f8cd" translate="yes" xml:space="preserve">
          <source>The string to dasherize.</source>
          <target state="translated">要涂抹的字符串。</target>
        </trans-unit>
        <trans-unit id="827deb88bf3cf7b323e93ba14d05290d5e8a6b48" translate="yes" xml:space="preserve">
          <source>The string to decamelize.</source>
          <target state="translated">要解焦的字符串。</target>
        </trans-unit>
        <trans-unit id="8aef10dc78a1b6b0b047d67f1b41e8c2eacf1322" translate="yes" xml:space="preserve">
          <source>The string to format</source>
          <target state="translated">要格式化的字符串</target>
        </trans-unit>
        <trans-unit id="2b0b9ffa844d16267c8115855979ed48b6d4bc64" translate="yes" xml:space="preserve">
          <source>The string to format.</source>
          <target state="translated">要格式化的字符串。</target>
        </trans-unit>
        <trans-unit id="8bb5d2b6d14eab5fb11c8b4cd7eded396880eafd" translate="yes" xml:space="preserve">
          <source>The string to split</source>
          <target state="translated">要分割的字符串</target>
        </trans-unit>
        <trans-unit id="504f1fdddf0d3ae9e6968c1488e9aaed471044e1" translate="yes" xml:space="preserve">
          <source>The string to underscore.</source>
          <target state="translated">下划线的字符串。</target>
        </trans-unit>
        <trans-unit id="6b2ca2bba7cfc3b3d4f9eb164041ee4b3f478da7" translate="yes" xml:space="preserve">
          <source>The string values provided for the template name, and controller will eventually pass through to the resolver for lookup. See Ember.Resolver for how these are mapped to JavaScript objects in your application. The template to render into needs to be related to either the current route or one of its ancestors.</source>
          <target state="translated">为模板名称和控制器提供的字符串值将最终传递给解析器进行查找。请参阅Ember.Resolver,了解如何将这些值映射到应用程序中的JavaScript对象。要渲染到的模板需要与当前路由或其祖先之一相关。</target>
        </trans-unit>
        <trans-unit id="ba5818842ce855fe275a24b3307838b7fe2c0695" translate="yes" xml:space="preserve">
          <source>The string values provided for the template name, and controller will eventually pass through to the resolver for lookup. See Resolver for how these are mapped to JavaScript objects in your application. The template to render into needs to be related to either the current route or one of its ancestors.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e044bf34a7e8afe296c75937fe0122a79c5e8ce1" translate="yes" xml:space="preserve">
          <source>The syntax &lt;code&gt;{{@initial}}&lt;/code&gt; means that the contents inside the &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; tag are &lt;em&gt;dynamic&lt;/em&gt; and will be specified by the &lt;code&gt;&amp;lt;Avatar&amp;gt;&lt;/code&gt; tag. Likewise, the &lt;code&gt;{{@title}}&lt;/code&gt; syntax means that the contents of the &lt;code&gt;title&lt;/code&gt; attribute are dynamic and will be specified in the same way. We can now replace the received message avatar by using the &lt;code&gt;&amp;lt;Avatar&amp;gt;&lt;/code&gt; tag and providing it with some arguments.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="40e5aa73406cd7ed8554338b6d4c3b179b9fb02c" translate="yes" xml:space="preserve">
          <source>The syntax &lt;code&gt;{{substring @username 0 1}}&lt;/code&gt; is a little hard to read. We see some numbers at the end but can't tell what exactly they mean. We can use &lt;em&gt;named arguments&lt;/em&gt; to make the &lt;code&gt;substring&lt;/code&gt; helper easier to read.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1c15310baae72447d4757eb2e55e534acbbc316b" translate="yes" xml:space="preserve">
          <source>The target object to invoke</source>
          <target state="translated">要调用的目标对象</target>
        </trans-unit>
        <trans-unit id="de10ba709439df9674dd354fe1c515eac06ba807" translate="yes" xml:space="preserve">
          <source>The target object to use</source>
          <target state="translated">要使用的目标对象</target>
        </trans-unit>
        <trans-unit id="54d029f20e1dadec96b103ccc865dfcca39add60" translate="yes" xml:space="preserve">
          <source>The target of the method to invoke.</source>
          <target state="translated">要调用的方法的目标。</target>
        </trans-unit>
        <trans-unit id="e2ed41e561ef82bfe2b3a4d933412915eae9db07" translate="yes" xml:space="preserve">
          <source>The target of the subscription</source>
          <target state="translated">认购的对象</target>
        </trans-unit>
        <trans-unit id="4ceffd13443beb5575ab1e4483fbd512664207b4" translate="yes" xml:space="preserve">
          <source>The template contains an &lt;a href=&quot;https://guides.emberjs.com/templates/input-helpers&quot;&gt;&lt;code&gt;{{input}}&lt;/code&gt;&lt;/a&gt; helper that renders as a text field, in which the user can type a pattern to filter the list of cities used in a search. The &lt;code&gt;value&lt;/code&gt; property of the &lt;code&gt;input&lt;/code&gt; will be kept in sync with the &lt;code&gt;value&lt;/code&gt; property in the component.</source>
          <target state="translated">该模板包含一个&lt;a href=&quot;https://guides.emberjs.com/templates/input-helpers&quot;&gt; &lt;code&gt;{{input}}&lt;/code&gt; &lt;/a&gt;帮助器，该帮助器呈现为文本字段，用户可以在其中键入模式来过滤搜索中使用的城市列表。的 &lt;code&gt;value&lt;/code&gt; 的属性的 &lt;code&gt;input&lt;/code&gt; 将被保持在同步与 &lt;code&gt;value&lt;/code&gt; 在组件属性。</target>
        </trans-unit>
        <trans-unit id="d74f4833f85af93d253619500c9b82c2db0b7e23" translate="yes" xml:space="preserve">
          <source>The template inside of the &lt;code&gt;{{#each-in}}&lt;/code&gt; block is repeated once for each key in the passed object. The first block parameter (&lt;code&gt;category&lt;/code&gt; in the above example) is the key for this iteration, while the second block parameter (&lt;code&gt;products&lt;/code&gt;) is the actual value of that key.</source>
          <target state="translated">对于传递的对象中的每个键， &lt;code&gt;{{#each-in}}&lt;/code&gt; 块内部的模板都重复一次。第一个块参数（上例中的 &lt;code&gt;category&lt;/code&gt; ）是此迭代的键，而第二个块参数（ &lt;code&gt;products&lt;/code&gt; ）是该键的实际值。</target>
        </trans-unit>
        <trans-unit id="722bc70d44379d1b5cfee1e8ad82e651eaf53bd8" translate="yes" xml:space="preserve">
          <source>The template inside of the &lt;code&gt;{{#each}}&lt;/code&gt; block will be repeated once for each item in the array, with the each item set to the &lt;code&gt;person&lt;/code&gt; block param.</source>
          <target state="translated">&lt;code&gt;{{#each}}&lt;/code&gt; 块内部的模板将针对数组中的每个项目重复一次，并且每个项目都设置为 &lt;code&gt;person&lt;/code&gt; 块参数。</target>
        </trans-unit>
        <trans-unit id="e14b256b8bf613a58dde6fd95e9abcd1338adcd7" translate="yes" xml:space="preserve">
          <source>The test locates the results of the search by finding elements with a class of &lt;code&gt;listing&lt;/code&gt;, which we gave to our &lt;code&gt;rental-listing&lt;/code&gt; component in the &lt;a href=&quot;../simple-component&quot;&gt;&quot;Building a Simple Component&quot;&lt;/a&gt; section of the tutorial.</source>
          <target state="translated">该测试通过查找带有 &lt;code&gt;listing&lt;/code&gt; 类的元素来定位搜索结果，我们在本教程的&lt;a href=&quot;../simple-component&quot;&gt;&amp;ldquo;构建简单组件&amp;rdquo;&lt;/a&gt;部分中将其提供给了 &lt;code&gt;rental-listing&lt;/code&gt; 组件。</target>
        </trans-unit>
        <trans-unit id="2a64607c214ef37d87d8ad67e76908fa5af07f02" translate="yes" xml:space="preserve">
          <source>The test verifies that after filling in the search input with &quot;Seattle&quot;, the rental list reduces from 3 to 1, and the item displayed shows &quot;Seattle&quot; as the location.</source>
          <target state="translated">测试验证,在搜索输入中填写 &quot;西雅图 &quot;后,租房列表从3个减少到1个,显示的项目显示为 &quot;西雅图 &quot;的位置。</target>
        </trans-unit>
        <trans-unit id="89d72c69007c893df81d99979fa6b2e66b8f23a3" translate="yes" xml:space="preserve">
          <source>The test would call the &lt;code&gt;calc&lt;/code&gt; method and assert it gets back the correct value.</source>
          <target state="translated">测试将调用 &lt;code&gt;calc&lt;/code&gt; 方法并断言它会返回正确的值。</target>
        </trans-unit>
        <trans-unit id="9e4b46dc9e309d54bfec19901f419a3f701c4206" translate="yes" xml:space="preserve">
          <source>The third context of the &lt;code&gt;{{action}}&lt;/code&gt; helper can be called &quot;element space&quot;. For example:</source>
          <target state="translated">&lt;code&gt;{{action}}&lt;/code&gt; 帮助程序的第三个上下文可以称为&amp;ldquo;元素空间&amp;rdquo;。例如：</target>
        </trans-unit>
        <trans-unit id="37d7a55f997fe0c18460ae452e7f09adc66aa219" translate="yes" xml:space="preserve">
          <source>The third form of helper usage is &lt;strong&gt;block invocation&lt;/strong&gt;. Use block helpers to render only part of a template. Block invocation of a helper can be recognized by the &lt;code&gt;#&lt;/code&gt; before the helper name, and the closing &lt;code&gt;{{/&lt;/code&gt; double curly brace at the end of the invocation.</source>
          <target state="translated">帮助程序用法的第三种形式是&lt;strong&gt;块调用&lt;/strong&gt;。使用块帮助器仅渲染模板的一部分。可以通过在助手名称之前的 &lt;code&gt;#&lt;/code&gt; 来识别助手的块调用，并在调用结束时使用 &lt;code&gt;{{/&lt;/code&gt; 双大括号括起来。</target>
        </trans-unit>
        <trans-unit id="944b09433ee6559023c1be9d8df4b25f0ac83680" translate="yes" xml:space="preserve">
          <source>The third parameter is a function, which can be used to nest routes. Nested routes, by default, will have the parent route tree's route name and path prepended to it's own.</source>
          <target state="translated">第三个参数是一个函数,可以用来嵌套路由。嵌套的路由,在默认情况下,会将父路由树的路由名和路径预置到自己的路由树上。</target>
        </trans-unit>
        <trans-unit id="584e0d556960d1ef1c03be6a0d0c76cb94980333" translate="yes" xml:space="preserve">
          <source>The top-level index route is analogous to &lt;code&gt;index.html&lt;/code&gt;. For example, when someone visits &lt;code&gt;https://some-ember-app.com&lt;/code&gt;, the contents of the &lt;code&gt;template/index.hbs&lt;/code&gt; file will be rendered. There is no need to add an entry &lt;code&gt;this.route('index', { path: '/' });&lt;/code&gt; in &lt;code&gt;app/router.js&lt;/code&gt; file. The &lt;code&gt;index&lt;/code&gt; route is implicitly included in order to help reduce verbose declarations in the &lt;code&gt;app/router.js&lt;/code&gt;. The &lt;code&gt;app/router.js&lt;/code&gt; file could be empty, and the &lt;code&gt;index&lt;/code&gt; would still be shown:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e623839ca6c4caf8cd5f058a6f44779bb9b01076" translate="yes" xml:space="preserve">
          <source>The two icons to the left of the search field will expand or collapse all components.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ebcf7d15355b9ffa9191ba8a8a24f0fb06198de5" translate="yes" xml:space="preserve">
          <source>The type (or modelName) of record being created</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="311168c82ceeb94e5dfa9eb1a7893961d2596cad" translate="yes" xml:space="preserve">
          <source>The type of request the Adapter had been asked to perform.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="147526a2a9e7840b61e7afb24045b79c209cc65d" translate="yes" xml:space="preserve">
          <source>The type. e.g. &quot;model&quot;, &quot;controller&quot;, &quot;route&quot;.</source>
          <target state="translated">类型,如 &quot;模型&quot;、&quot;控制器&quot;、&quot;路线&quot;。</target>
        </trans-unit>
        <trans-unit id="4f039fe10b59dfaf945a628a511ceac52bce6aa9" translate="yes" xml:space="preserve">
          <source>The updateRecord method is expected to return a promise that will resolve with the serialized record. This allows the backend to inform the Ember Data store the current state of this record after the update. If it is not possible to return a serialized record the updateRecord promise can also resolve with &lt;code&gt;undefined&lt;/code&gt; and the Ember Data store will assume all of the updates were successfully applied on the backend.</source>
          <target state="translated">预计updateRecord方法将返回一个将与序列化记录一起解析的promise。这允许后端在更新后通知Ember数据存储该记录的当前状态。如果不可能返回序列化的记录，则updateRecord承诺也可以使用 &lt;code&gt;undefined&lt;/code&gt; 解析，并且Ember Data存储将假定所有更新都已成功应用于后端。</target>
        </trans-unit>
        <trans-unit id="924807e0bd496c91f4a1657c376c80b756e72ccc" translate="yes" xml:space="preserve">
          <source>The use cases for proxies are generally cases where some data is very dynamic, and its not possible to know ahead of time how to create a class that is decorated. For instance, &lt;a href=&quot;https://github.com/hjdivad/ember-m3&quot;&gt;&lt;code&gt;ember-m3&lt;/code&gt;&lt;/a&gt; is an addon that allows Ember Data to work with dynamically generated models instead of models defined using &lt;code&gt;@attr&lt;/code&gt;, &lt;code&gt;@hasMany&lt;/code&gt;, and &lt;code&gt;@belongsTo&lt;/code&gt;. This cuts back on code shipped to the browser, but it means that the models have to &lt;em&gt;dynamically&lt;/em&gt; watch and update values. A proxy allows all accesses and updates to be intercepted, so &lt;code&gt;m3&lt;/code&gt; can do what it needs to do without predefined classes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e8b2d5a0ec1efed52d5fc609cabe5e05b7bb7070" translate="yes" xml:space="preserve">
          <source>The user can make comments on a blog post</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8ab6120f5189495dcad2408ccee06142b8221963" translate="yes" xml:space="preserve">
          <source>The user can read, update, and delete blog posts (possibly in a batch operation)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c6e5d00523cade2eb22b6f2fc4216929c8429edf" translate="yes" xml:space="preserve">
          <source>The user can share a blog post</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="51de670ab53c3db59ec8a0666e66364d58ad96c2" translate="yes" xml:space="preserve">
          <source>The user changes the URL manually, such as by clicking the back button or by editing the address bar.</source>
          <target state="translated">用户手动更改URL,如点击返回按钮或编辑地址栏。</target>
        </trans-unit>
        <trans-unit id="5351613497c3004771812d248a543cbdc66656b3" translate="yes" xml:space="preserve">
          <source>The user clicks a link within the app.</source>
          <target state="translated">用户点击应用内的链接。</target>
        </trans-unit>
        <trans-unit id="9921d7f5710f25509ee88606a85dee5d311bd63d" translate="yes" xml:space="preserve">
          <source>The user loads the app for the first time.</source>
          <target state="translated">用户第一次加载应用。</target>
        </trans-unit>
        <trans-unit id="09abc237b50bd030b6153ce55b7e4c7f70090c0d" translate="yes" xml:space="preserve">
          <source>The user receives feedback if there is an error</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="08136d6a7fb502f1305da2cc091889097a7120f3" translate="yes" xml:space="preserve">
          <source>The user should be authorized to take actions on a blog</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="74e880123198891577360a791645732bdf32b1e5" translate="yes" xml:space="preserve">
          <source>The value of &lt;code&gt;isWide&lt;/code&gt; comes from our component's JavaScript file, in this case &lt;code&gt;rental-listing.js&lt;/code&gt;. Since we want the image to be smaller at first, we will set the property to start as &lt;code&gt;false&lt;/code&gt;:</source>
          <target state="translated">&lt;code&gt;isWide&lt;/code&gt; 的值来自组件的JavaScript文件，在本例中为 &lt;code&gt;rental-listing.js&lt;/code&gt; 。因为我们希望图像首先变小，所以我们将属性设置为 &lt;code&gt;false&lt;/code&gt; ：</target>
        </trans-unit>
        <trans-unit id="d23a5a16f505fa5c0bc4c22ed6862d2f7cf30588" translate="yes" xml:space="preserve">
          <source>The value of &lt;code&gt;my-controller-name&lt;/code&gt; must match the name of the Route that renders it. So a Route named &lt;code&gt;blog-post&lt;/code&gt; would have a matching Controller named &lt;code&gt;blog-post&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;my-controller-name&lt;/code&gt; 的值必须与呈现它的Route的名称匹配。因此，一个名为 &lt;code&gt;blog-post&lt;/code&gt; 的路由将具有一个匹配的Controller，名为 &lt;code&gt;blog-post&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="fd1f47d5724e57f16f4762fa4b7b499056b744cd" translate="yes" xml:space="preserve">
          <source>The value to be returned.</source>
          <target state="translated">要返回的值。</target>
        </trans-unit>
        <trans-unit id="04a60bcf4638b39535e993d6cbd42eae6ce46172" translate="yes" xml:space="preserve">
          <source>The value to return if the property value is undefined</source>
          <target state="translated">如果属性值未定义,返回的值。</target>
        </trans-unit>
        <trans-unit id="9571ab424dffa7c5f376c7c97c04d87fb698a99b" translate="yes" xml:space="preserve">
          <source>The value to set</source>
          <target state="translated">要设置的值</target>
        </trans-unit>
        <trans-unit id="cc012a4e9d5bd52a06928e9abc8926ab3ec9e9e2" translate="yes" xml:space="preserve">
          <source>The value to set or `null`.</source>
          <target state="translated">要设置的值或 &quot;无&quot;。</target>
        </trans-unit>
        <trans-unit id="5900ce9ec83abfc5697f80f63b4c885c80e4800b" translate="yes" xml:space="preserve">
          <source>The values of any queryParams on this route.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0db7cf4c23f0cf4a43bbaf5f2d74fac5aafaffd4" translate="yes" xml:space="preserve">
          <source>The values of the route's parameters. These are the same params that are received as arguments to the route's &lt;code&gt;model&lt;/code&gt; hook. Contains only the parameters valid for this route, if any (params for parent or child routes are not merged).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="59f7270b74d7554717d99b5200acac3d49b140c1" translate="yes" xml:space="preserve">
          <source>The values of the route's parameters. These are the same params that are received as arguments to the route's model hook. Contains only the parameters valid for this route, if any (params for parent or child routes are not merged).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="43104aed3631db414614a2232d0cfd8f1a7bdd2c" translate="yes" xml:space="preserve">
          <source>The version of capabilities that are being used</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="acbfee1e0879c64f080cc1dfce56c65619ec7c00" translate="yes" xml:space="preserve">
          <source>The way to do this in Ember is by using the &lt;code&gt;{{yield}}&lt;/code&gt; syntax.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="85b0483616a023e3131bcbeb48e37ef7796a8a2a" translate="yes" xml:space="preserve">
          <source>Their structure is pretty straightforward and similar, so we can use arguments and conditionals to handle the differences in content between them (see the previous chapters for details on how to do this).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="85f8e47c70845d61b42b97a3b17772fc4c8e6e69" translate="yes" xml:space="preserve">
          <source>Then &lt;code&gt;Grab a coat, it's chilly!&lt;/code&gt; will be rendered.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="66ed92b099921e39838f582833afc6fe6e27756e" translate="yes" xml:space="preserve">
          <source>Then it checks for the presence of a type-specific instance method of the form &lt;code&gt;resolve[Type]&lt;/code&gt; and calls it if it exists. For example if it was resolving 'template:post', it would call the &lt;code&gt;resolveTemplate&lt;/code&gt; method.</source>
          <target state="translated">然后，它检查是否存在形式为 &lt;code&gt;resolve[Type]&lt;/code&gt; 的类型特定的实例方法，如果存在，则将其调用。例如，如果要解析&amp;ldquo; template：post&amp;rdquo;，它将调用 &lt;code&gt;resolveTemplate&lt;/code&gt; 方法。</target>
        </trans-unit>
        <trans-unit id="b84d5d369559d8464394c4cd54dfca6e70c52f87" translate="yes" xml:space="preserve">
          <source>Then it will display:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4534dee611a1e10715ed11ebd2eb28c7450c7ec8" translate="yes" xml:space="preserve">
          <source>Then make sure the &quot;Display the Ember favicon when a site runs Ember.js&quot; checkbox is checked.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="124bbec613e0740a2add94968e72e7ab45cd285a" translate="yes" xml:space="preserve">
          <source>Then make sure the &quot;Display the Tomster icon when a site runs Ember.js&quot; checkbox is checked.</source>
          <target state="translated">然后确保 &quot;当网站运行Ember.js时显示Tomster图标 &quot;复选框被选中。</target>
        </trans-unit>
        <trans-unit id="2add5961065ee48f1cfd0ab8d647d7e7158664db" translate="yes" xml:space="preserve">
          <source>Then our &lt;code&gt;SystemPreferencesEditor&lt;/code&gt; template passes its local &lt;code&gt;deleteUser&lt;/code&gt; action into the &lt;code&gt;UserProfile&lt;/code&gt; as that component's &lt;code&gt;deleteCurrentUser&lt;/code&gt; argument.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0963cd90e4c018ee024de78af4821e7b2fb93a50" translate="yes" xml:space="preserve">
          <source>Then our &lt;code&gt;system-preferences-editor&lt;/code&gt; template passes its local &lt;code&gt;deleteUser&lt;/code&gt; action into the &lt;code&gt;user-profile&lt;/code&gt; as that component's &lt;code&gt;deleteCurrentUser&lt;/code&gt; property.</source>
          <target state="translated">然后，我们的 &lt;code&gt;system-preferences-editor&lt;/code&gt; 模板将其本地 &lt;code&gt;deleteUser&lt;/code&gt; 操作作为该组件的 &lt;code&gt;deleteCurrentUser&lt;/code&gt; 属性传递到 &lt;code&gt;user-profile&lt;/code&gt; 中。</target>
        </trans-unit>
        <trans-unit id="3eaf3fd0a30bffe671cfe2d6231cbed038099e8f" translate="yes" xml:space="preserve">
          <source>Then pass through the applicable fields to your &lt;code&gt;findRecord&lt;/code&gt; request.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b94c945aa553087e491135e87e7caa5e6c5b7883" translate="yes" xml:space="preserve">
          <source>Then you can use the &lt;code&gt;surge&lt;/code&gt; command to deploy your application. Note you will also need to rename index.html to 200.html to enable Ember's client-side routing.</source>
          <target state="translated">然后，您可以使用 &lt;code&gt;surge&lt;/code&gt; 命令来部署您的应用程序。请注意，您还需要将index.html重命名为200.html才能启用Ember的客户端路由。</target>
        </trans-unit>
        <trans-unit id="0d901353d4e943cc8e0760df4cb86a77339d4096" translate="yes" xml:space="preserve">
          <source>Then you can use the attributes in the component exactly as if they had been passed in like &lt;code&gt;{{blog-post title=post.title body=post.body}}&lt;/code&gt;.</source>
          <target state="translated">然后，您可以像在 &lt;code&gt;{{blog-post title=post.title body=post.body}}&lt;/code&gt; 中那样传入属性，完全使用组件中的属性。</target>
        </trans-unit>
        <trans-unit id="df8e16196d8c26785bdaea771ed92ec9cf988d46" translate="yes" xml:space="preserve">
          <source>Then you could test that the relationship by looking it up on the &lt;code&gt;user&lt;/code&gt; model which it is part of.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c92853aa810fa69277504403a7af77504ee617b3" translate="yes" xml:space="preserve">
          <source>Then you could test that the relationship is wired up correctly with this test.</source>
          <target state="translated">那么你就可以通过这个测试来测试双方的关系是否接线正确。</target>
        </trans-unit>
        <trans-unit id="c62800783a829bacf57534374af6b3071a57058b" translate="yes" xml:space="preserve">
          <source>Then, calling &lt;a href=&quot;https://api.emberjs.com/ember-data/release/classes/Store/methods#queryRecord&quot;&gt;&lt;code&gt;store.queryRecord()&lt;/code&gt;&lt;/a&gt; will retrieve that object from the server:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3864d8c7c138de0f81c4de21f35667b9b23ba001" translate="yes" xml:space="preserve">
          <source>Then, create your app:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3315a12d13dc102c7bd2ac08d709f1294b93ed4c" translate="yes" xml:space="preserve">
          <source>Then, install the &lt;code&gt;@ember/jquery&lt;/code&gt; addon:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b5013c7570df139ed1edffbbede967f716ad3f68" translate="yes" xml:space="preserve">
          <source>Then, remove &lt;code&gt;@ember/jquery&lt;/code&gt; from your package.json.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d51c16b01e98b6e11c327ad6160d9601f2a6c39d" translate="yes" xml:space="preserve">
          <source>Then, we can add an &lt;code&gt;{{each}}&lt;/code&gt; helper to the template by passing &lt;code&gt;this.messages&lt;/code&gt; to it. &lt;code&gt;{{each}}&lt;/code&gt; will receive each message as its first block param, and we can use that item in the template block for the loop.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fdee4e1e5030463d5f57f5d6ba9e22f526e1b349" translate="yes" xml:space="preserve">
          <source>Then, we'll update the template to call the &lt;code&gt;double&lt;/code&gt; action. We'll also add &lt;code&gt;this.multiple&lt;/code&gt; to our output to help us confirm that our button is working.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="50fb0ecf136b54e6245ad8f68f686d260693ef7c" translate="yes" xml:space="preserve">
          <source>There are 4 major types of elements that can be defined in a class:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="211ba0f801222320dc4443fb5dd9feba96f392ec" translate="yes" xml:space="preserve">
          <source>There are &lt;a href=&quot;https://emberobserver.com/?query=keyboard&quot;&gt;community-made addons&lt;/a&gt; to help manage keyboard events. For example, with &lt;a href=&quot;https://github.com/adopted-ember-addons/ember-keyboard&quot;&gt;ember-keyboard&lt;/a&gt;, you can write,</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="44f94093f4fe4176292468959f1216768595d0c1" translate="yes" xml:space="preserve">
          <source>There are a few APIs that exist in Ember still that directly expose jQuery, Disabling this optional feature disables those APIs, but does not remove jQuery itself. jQuery is provided by the &lt;code&gt;@ember/jquery&lt;/code&gt; addon, independent of the integration APIs.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="66b66bd3fbb4e38766f9d224a19b9c58ac71f618" translate="yes" xml:space="preserve">
          <source>There are a few things going on here, but the most important part is &lt;code&gt;@tracked count = 0&lt;/code&gt;. This line creates a dynamic value called &lt;code&gt;count&lt;/code&gt;, which you can stick inside of the template instead of hard coding it.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="58be2e1d47ed527c420b18412a94a606be46f332" translate="yes" xml:space="preserve">
          <source>There are a few things to look out for.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6aaeabca116411bcf4c1a7398dff6575fb20c9cb" translate="yes" xml:space="preserve">
          <source>There are a few things to note about the &lt;code&gt;didInsertElement()&lt;/code&gt; hook:</source>
          <target state="translated">关于 &lt;code&gt;didInsertElement()&lt;/code&gt; 挂钩，需要注意以下几点：</target>
        </trans-unit>
        <trans-unit id="4def01593cdd3ee3dd0b65d4d1374dd6433ec5d2" translate="yes" xml:space="preserve">
          <source>There are a handful of restrictions on the HTML that you can put in an Ember template:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f4a72425f5f9b4159f6c94de9e4fbddbb71a0684" translate="yes" xml:space="preserve">
          <source>There are also a number of hooks that you might find useful to define across-the-board rules for your payload. These rules will be useful if your server is consistent, or if you're building an adapter for an infrastructure service, like Firebase, and want to encode service conventions.</source>
          <target state="translated">还有一些钩子,你可能会发现对你的有效载荷定义全面的规则很有用。如果你的服务器是一致的,或者如果你正在为一个基础设施服务(如Firebase)构建一个适配器,并希望对服务约定进行编码,这些规则将非常有用。</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
