<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="zh-CN" datatype="htmlbody" original="perl">
    <body>
      <group id="perl">
        <trans-unit id="09e18333d92450e41ab304a7813502d7248c06a7" translate="yes" xml:space="preserve">
          <source>By default &lt;code&gt;IO::Uncompress::Gunzip&lt;/code&gt; will</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="09e2116155b494da50686ee8fd22c6f8af75259f" translate="yes" xml:space="preserve">
          <source>By default &lt;code&gt;List::Util&lt;/code&gt; does not export any subroutines.</source>
          <target state="translated">默认情况下 &lt;code&gt;List::Util&lt;/code&gt; 不导出任何子例程。</target>
        </trans-unit>
        <trans-unit id="5c8967b9c380cc8af7979a94b2f6e12071d5756c" translate="yes" xml:space="preserve">
          <source>By default &lt;code&gt;Scalar::Util&lt;/code&gt; does not export any subroutines.</source>
          <target state="translated">默认 &lt;code&gt;Scalar::Util&lt;/code&gt; 不导出任何子例程。</target>
        </trans-unit>
        <trans-unit id="6a85c45889f6bd96a07b3072c70fdac86872c8e7" translate="yes" xml:space="preserve">
          <source>By default CPAN Meta specification &lt;code&gt;1.4&lt;/code&gt; is used. In order to use CPAN Meta specification &lt;code&gt;2.0&lt;/code&gt; , indicate with &lt;code&gt;meta-spec&lt;/code&gt; the version you want to use.</source>
          <target state="translated">默认情况下，使用CPAN Meta规范 &lt;code&gt;1.4&lt;/code&gt; 。为了使用CPAN Meta Specification &lt;code&gt;2.0&lt;/code&gt; ，请以 &lt;code&gt;meta-spec&lt;/code&gt; 表示要使用的版本。</target>
        </trans-unit>
        <trans-unit id="ec5e42a7b49114e39a5cf2d863170e1a8e680a55" translate="yes" xml:space="preserve">
          <source>By default CPAN Meta specification &lt;code&gt;1.4&lt;/code&gt; is used. In order to use CPAN Meta specification &lt;code&gt;2.0&lt;/code&gt;, indicate with &lt;code&gt;meta-spec&lt;/code&gt; the version you want to use.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8a4b99182796026a411ed2b60fe38baf518d32a5" translate="yes" xml:space="preserve">
          <source>By default Perl assumes your source code is written in an 8-bit ASCII superset. To embed Unicode characters in your strings and regexes, you can use the &lt;a href=&quot;perlop#Quote-and-Quote-like-Operators&quot;&gt;&lt;code&gt;\x{HH}&lt;/code&gt; or (more portably) &lt;code&gt;\N{U+HH}&lt;/code&gt; notations&lt;/a&gt;. You can also use the &lt;a href=&quot;utf8&quot;&gt;&lt;code&gt;utf8&lt;/code&gt;&lt;/a&gt; pragma and write your code in UTF-8, which lets you use Unicode characters directly (not just in quoted constructs but also in identifiers).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8bc161a96f1f3872cf0bfff0e6212dcccea74651" translate="yes" xml:space="preserve">
          <source>By default Perl does not use the &lt;code&gt;malloc()&lt;/code&gt; included with the Perl source, because it was slower and not entirely thread-safe. If you want to force Perl to build with the old -Dusemymalloc define this.</source>
          <target state="translated">默认情况下，Perl不使用 &lt;code&gt;malloc()&lt;/code&gt; Perl源代码附带，因为它速度较慢并且也不完全是线程安全的。如果要强制Perl使用旧的-Dusemymalloc进行构建，请定义此代码。</target>
        </trans-unit>
        <trans-unit id="1261dc25c0b95e8495b666b1c3497fb4bd944f86" translate="yes" xml:space="preserve">
          <source>By default Perl uses 64 bit integers. If you want to use smaller 32 bit integers, define this symbol.</source>
          <target state="translated">默认情况下,Perl 使用 64 位整数。如果你想使用更小的32位整数,请定义这个符号。</target>
        </trans-unit>
        <trans-unit id="2b8741f41b3847fc8e6d6ed4c668a3b8923660d9" translate="yes" xml:space="preserve">
          <source>By default Pod::Simple::HTML adds a dummy anchor at the top of the HTML. You can change it by calling</source>
          <target state="translated">默认情况下,Pod::Simple::HTML在HTML的顶部添加了一个虚拟锚。你可以通过调用</target>
        </trans-unit>
        <trans-unit id="85488345da8d50d7c72f406a26800d51eab1277e" translate="yes" xml:space="preserve">
          <source>By default an instance of &lt;a href=&quot;Test2::Formatter::TAP&quot;&gt;Test2::Formatter::TAP&lt;/a&gt; is created and used.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="63d675d5fb6fc8fe769b7759c86a5571aae789b8" translate="yes" xml:space="preserve">
          <source>By default floating point numbers substituted inside strings use the dot (&quot;.&quot;) as the decimal separator. If &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; locale&lt;/code&gt; is in effect, and POSIX::setlocale() has been called, the character used for the decimal separator is affected by the LC_NUMERIC locale. See &lt;a href=&quot;perllocale&quot;&gt;perllocale&lt;/a&gt; and &lt;a href=&quot;posix&quot;&gt;POSIX&lt;/a&gt;.</source>
          <target state="translated">默认情况下，在字符串内替换的浮点数使用点（&amp;ldquo;。&amp;rdquo;）作为十进制分隔符。如果有效 &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; locale&lt;/code&gt; ，并且已调用POSIX :: setlocale（），则用于小数点分隔符的字符会受到LC_NUMERIC语言环境的影响。参见&lt;a href=&quot;perllocale&quot;&gt;perllocale&lt;/a&gt;和&lt;a href=&quot;posix&quot;&gt;POSIX&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="c28be1fa0adbeea2fa914132ae148c766307022e" translate="yes" xml:space="preserve">
          <source>By default floating point numbers substituted inside strings use the dot (&quot;.&quot;) as the decimal separator. If &lt;code&gt;use locale&lt;/code&gt; is in effect, and POSIX::setlocale() has been called, the character used for the decimal separator is affected by the LC_NUMERIC locale. See &lt;a href=&quot;perllocale&quot;&gt;perllocale&lt;/a&gt; and &lt;a href=&quot;posix&quot;&gt;POSIX&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dadc258ff54a1a05b69b778084fc2dfc7494a970" translate="yes" xml:space="preserve">
          <source>By default it does nothing.</source>
          <target state="translated">默认情况下,它什么也不做。</target>
        </trans-unit>
        <trans-unit id="4033d9fb012c9ab68d72ab1a3b85a5a59eb68724" translate="yes" xml:space="preserve">
          <source>By default it just prints the stubs, but you can set the global $Devel::SelfStubber::JUST_STUBS to 0 and it will print out the entire module with the stubs positioned correctly.</source>
          <target state="translated">默认情况下,它只是打印存根,但你可以将全局的$Devel::SelfStubber::JUST_STUBS设置为0,它将打印出整个模块的存根,并正确定位。</target>
        </trans-unit>
        <trans-unit id="f3cfe07b0874e5c860a9ad1e8fd1566639cad34f" translate="yes" xml:space="preserve">
          <source>By default it writes to &lt;code&gt;cwd()&lt;/code&gt; , but you can override that by specifying the &lt;code&gt;to&lt;/code&gt; argument:</source>
          <target state="translated">默认情况下，它写入 &lt;code&gt;cwd()&lt;/code&gt; ，但是您可以通过指定 &lt;code&gt;to&lt;/code&gt; 参数来覆盖它：</target>
        </trans-unit>
        <trans-unit id="134aa142740eea63e3f7d4209036922ec9993924" translate="yes" xml:space="preserve">
          <source>By default it writes to &lt;code&gt;cwd()&lt;/code&gt;, but you can override that by specifying the &lt;code&gt;to&lt;/code&gt; argument:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="15f383cfebdc1979faf03798a39be5be086b2b22" translate="yes" xml:space="preserve">
          <source>By default listeners are not inherited by child hubs. That means if you start a subtest, the subtest will not inherit the listener. You can change this behavior with the &lt;code&gt;inherit&lt;/code&gt; parameter:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="27c6146d97f6523b1856790ae4b8a285b8e3db7e" translate="yes" xml:space="preserve">
          <source>By default no Unix2 extra field is created.</source>
          <target state="translated">默认情况下,没有创建Unix2额外字段。</target>
        </trans-unit>
        <trans-unit id="0ab606593d4a9d45e75e4256f15600160e7bc2fa" translate="yes" xml:space="preserve">
          <source>By default no UnixN extra field is created.</source>
          <target state="translated">默认情况下,没有创建UnixN额外字段。</target>
        </trans-unit>
        <trans-unit id="ee18fc042b3c569119417a51774089c404eb248f" translate="yes" xml:space="preserve">
          <source>By default no extended time field is created.</source>
          <target state="translated">默认情况下,没有创建扩展时间字段。</target>
        </trans-unit>
        <trans-unit id="ebb685a0031880a3b5e0df98008f367fed554c4e" translate="yes" xml:space="preserve">
          <source>By default no opmask is in effect and any code can be compiled.</source>
          <target state="translated">默认情况下,没有pmask,任何代码都可以被编译。</target>
        </trans-unit>
        <trans-unit id="c2a6e64907872a01e02add6a8ea23d69c4a6e77e" translate="yes" xml:space="preserve">
          <source>By default only the &lt;code&gt;langinfo()&lt;/code&gt; function is exported.</source>
          <target state="translated">默认情况下只有 &lt;code&gt;langinfo()&lt;/code&gt; 导出函数。</target>
        </trans-unit>
        <trans-unit id="05fbe13f9e04e93defd0bc70b90e12a9f8b88b6a" translate="yes" xml:space="preserve">
          <source>By default the &lt;a href=&quot;TAP::Parser::SourceHandler::Executable&quot;&gt;TAP::Parser::SourceHandler::Executable&lt;/a&gt; class will create a &lt;a href=&quot;TAP::Parser::Iterator::Process&quot;&gt;TAP::Parser::Iterator::Process&lt;/a&gt; object to handle the source. This passes the array reference strings as command arguments to &lt;a href=&quot;IPC::Open3&quot;&gt;IPC::Open3::open3&lt;/a&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d98ec28c38227dc5b1c1a5373143946764c67c67" translate="yes" xml:space="preserve">
          <source>By default the &lt;a href=&quot;parser/sourcehandler/executable&quot;&gt;TAP::Parser::SourceHandler::Executable&lt;/a&gt; class will create a &lt;a href=&quot;parser/iterator/process&quot;&gt;TAP::Parser::Iterator::Process&lt;/a&gt; object to handle the source. This passes the array reference strings as command arguments to &lt;a href=&quot;../ipc/open3&quot;&gt;IPC::Open3::open3&lt;/a&gt;:</source>
          <target state="translated">默认情况下，&lt;a href=&quot;parser/sourcehandler/executable&quot;&gt;TAP :: Parser :: SourceHandler :: Executable&lt;/a&gt;类将创建一个&lt;a href=&quot;parser/iterator/process&quot;&gt;TAP :: Parser :: Iterator :: Process&lt;/a&gt;对象来处理源。这会将数组引用字符串作为命令参数传递给&lt;a href=&quot;../ipc/open3&quot;&gt;IPC :: Open3 :: open3&lt;/a&gt;：</target>
        </trans-unit>
        <trans-unit id="a48220280114a78503f2a2001b0a32eddecb9d87" translate="yes" xml:space="preserve">
          <source>By default the &lt;code&gt;flush_type&lt;/code&gt; used is &lt;code&gt;Z_FINISH&lt;/code&gt; . Other valid values for &lt;code&gt;flush_type&lt;/code&gt; are &lt;code&gt;Z_NO_FLUSH&lt;/code&gt; , &lt;code&gt;Z_PARTIAL_FLUSH&lt;/code&gt; , &lt;code&gt;Z_SYNC_FLUSH&lt;/code&gt; and &lt;code&gt;Z_FULL_FLUSH&lt;/code&gt; . It is strongly recommended that you only set the &lt;code&gt;flush_type&lt;/code&gt; parameter if you fully understand the implications of what it does. See the &lt;code&gt;zlib&lt;/code&gt; documentation for details.</source>
          <target state="translated">默认情况下，使用的 &lt;code&gt;flush_type&lt;/code&gt; 是 &lt;code&gt;Z_FINISH&lt;/code&gt; 。 &lt;code&gt;flush_type&lt;/code&gt; 的其他有效值是 &lt;code&gt;Z_NO_FLUSH&lt;/code&gt; ， &lt;code&gt;Z_PARTIAL_FLUSH&lt;/code&gt; ， &lt;code&gt;Z_SYNC_FLUSH&lt;/code&gt; 和 &lt;code&gt;Z_FULL_FLUSH&lt;/code&gt; 。强烈建议您仅在完全了解其含义的情况下才设置 &lt;code&gt;flush_type&lt;/code&gt; 参数。有关详细信息，请参见 &lt;code&gt;zlib&lt;/code&gt; 文档。</target>
        </trans-unit>
        <trans-unit id="61c7b1cbe3af3e79bbf82957644e90bd2966ab80" translate="yes" xml:space="preserve">
          <source>By default the &lt;code&gt;flush_type&lt;/code&gt; used is &lt;code&gt;Z_FINISH&lt;/code&gt;. Other valid values for &lt;code&gt;flush_type&lt;/code&gt; are &lt;code&gt;Z_NO_FLUSH&lt;/code&gt;, &lt;code&gt;Z_PARTIAL_FLUSH&lt;/code&gt;, &lt;code&gt;Z_SYNC_FLUSH&lt;/code&gt; and &lt;code&gt;Z_FULL_FLUSH&lt;/code&gt;. It is strongly recommended that you only set the &lt;code&gt;flush_type&lt;/code&gt; parameter if you fully understand the implications of what it does. See the &lt;code&gt;zlib&lt;/code&gt; documentation for details.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="13a328506dc208738ad9d028668747611624fc18" translate="yes" xml:space="preserve">
          <source>By default the Makefile produced includes all the static extensions in the perl library. (Purified versions of library files, e.g., DynaLoader_pure_p1_c0_032.a are automatically ignored to avoid link errors.)</source>
          <target state="translated">默认情况下,生成的Makefile包含了perl库中的所有静态扩展。(库文件的纯化版本,例如DynaLoader_pure_p1_c0_032.a会被自动忽略,以避免链接错误。)</target>
        </trans-unit>
        <trans-unit id="72406ce9b9b1b9e64fd6ddb212ef0d9f15de7828" translate="yes" xml:space="preserve">
          <source>By default the debugger is called using &lt;code&gt;-d&lt;/code&gt; option to perl. If you want to specify some other option, set the &lt;code&gt;TESTDB_SW&lt;/code&gt; variable:</source>
          <target state="translated">缺省情况下，使用Perl的 &lt;code&gt;-d&lt;/code&gt; 选项调用调试器。如果要指定其他选项，请设置 &lt;code&gt;TESTDB_SW&lt;/code&gt; 变量：</target>
        </trans-unit>
        <trans-unit id="b2356cae1189c23be90e67a7d45b9477ad72051f" translate="yes" xml:space="preserve">
          <source>By default the directory is deleted when the object goes out of scope.</source>
          <target state="translated">默认情况下,当对象超出范围时,该目录会被删除。</target>
        </trans-unit>
        <trans-unit id="cbf770fbcc502baf26e331b84104d6aaf9126f59" translate="yes" xml:space="preserve">
          <source>By default the layers from the input side of the filehandle are returned; to get the output side, use the optional &lt;code&gt;output&lt;/code&gt; argument:</source>
          <target state="translated">默认情况下，返回文件句柄输入侧的图层；要获得输出端，请使用可选的 &lt;code&gt;output&lt;/code&gt; 参数：</target>
        </trans-unit>
        <trans-unit id="c002101ab1a0ef760a6cd97c38ea179cd0ee30e5" translate="yes" xml:space="preserve">
          <source>By default this hash is only filled with the environment variables out of %ENV that start with &lt;code&gt;PERL&lt;/code&gt;, but you can pass the &lt;code&gt;env&lt;/code&gt; option to myconfig to get more</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="29f25f3b77d3062c86a659cbc91ff07ea769bf59" translate="yes" xml:space="preserve">
          <source>By default this will include *.pm and *.pl and the files found in the PMLIBDIRS directories. Defining PM in the Makefile.PL will override PMLIBDIRS.</source>
          <target state="translated">默认情况下,这将包括 *.pm 和 *.pl 以及 PMLIBDIRS 目录中的文件。在Makefile.PL中定义PM将覆盖PMLIBDIRS。</target>
        </trans-unit>
        <trans-unit id="1c14ce64b17e700de893a0b00ad2e97e494dcfd4" translate="yes" xml:space="preserve">
          <source>By default verbose output is generated, setting the PERL_INSTALL_QUIET environment variable will silence this output.</source>
          <target state="translated">在默认情况下,会产生冗长的输出,设置PERL_INSTALL_QUIET环境变量将使这个输出沉默。</target>
        </trans-unit>
        <trans-unit id="4e63e74d2a508a1a33c3e1bb5754226ab9609082" translate="yes" xml:space="preserve">
          <source>By default your system's F_* and O_* constants (eg, F_DUPFD and O_CREAT) and the FD_CLOEXEC constant are exported into your namespace.</source>
          <target state="translated">默认情况下,你的系统的 F_*和 O_*常量 (例如,F_DUPFD 和 O_CREAT)以及 FD_CLOEXEC 常量会被导出到你的命名空间。</target>
        </trans-unit>
        <trans-unit id="d7781baa84d2aa71913f24b53d017427c0b16792" translate="yes" xml:space="preserve">
          <source>By default zipdetails will output the details of the zip file in three columns.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b44b2a95f6381a248195f00274a8435d100aaa35" translate="yes" xml:space="preserve">
          <source>By default,</source>
          <target state="translated">默认情况下。</target>
        </trans-unit>
        <trans-unit id="6d88a1aadef2616cc309d3135c3c0ad225e5d689" translate="yes" xml:space="preserve">
          <source>By default, &lt;a href=&quot;../../cpan/meta/yaml&quot;&gt;CPAN::Meta::YAML&lt;/a&gt; will be used for deserializing YAML data. If the &lt;code&gt;PERL_YAML_BACKEND&lt;/code&gt; environment variable is defined, then it is interpreted as a module to use for deserialization. The given module must be installed, must load correctly and must implement the &lt;code&gt;Load()&lt;/code&gt; function or an exception will be thrown.</source>
          <target state="translated">默认情况下，&lt;a href=&quot;../../cpan/meta/yaml&quot;&gt;CPAN :: Meta :: YAML&lt;/a&gt;将用于反序列化YAML数据。如果定义了 &lt;code&gt;PERL_YAML_BACKEND&lt;/code&gt; 环境变量，则将其解释为用于反序列化的模块。给定的模块必须已安装，必须正确加载并且必须实现 &lt;code&gt;Load()&lt;/code&gt; 函数，否则将引发异常。</target>
        </trans-unit>
        <trans-unit id="a9ce14085141d2bedbc81e908e7a8dd19fcc292a" translate="yes" xml:space="preserve">
          <source>By default, &lt;a href=&quot;../../json/pp&quot;&gt;JSON::PP&lt;/a&gt; will be used for deserializing JSON data. If the &lt;code&gt;PERL_JSON_BACKEND&lt;/code&gt; environment variable exists, is true and is not &quot;JSON::PP&quot;, then the &lt;a href=&quot;http://search.cpan.org/perldoc/JSON&quot;&gt;JSON&lt;/a&gt; module (version 2.5 or greater) will be loaded and used to interpret &lt;code&gt;PERL_JSON_BACKEND&lt;/code&gt; . If &lt;a href=&quot;http://search.cpan.org/perldoc/JSON&quot;&gt;JSON&lt;/a&gt; is not installed or is too old, an exception will be thrown.</source>
          <target state="translated">默认情况下，&lt;a href=&quot;../../json/pp&quot;&gt;JSON :: PP&lt;/a&gt;将用于反序列化JSON数据。如果 &lt;code&gt;PERL_JSON_BACKEND&lt;/code&gt; 环境变量存在，为true且不是&amp;ldquo; JSON :: PP&amp;rdquo;，则将加载&lt;a href=&quot;http://search.cpan.org/perldoc/JSON&quot;&gt;JSON&lt;/a&gt;模块（版本2.5或更高版本）并用于解释 &lt;code&gt;PERL_JSON_BACKEND&lt;/code&gt; 。如果是&lt;a href=&quot;http://search.cpan.org/perldoc/JSON&quot;&gt;JSON&lt;/a&gt;未安装或过旧，则将引发异常。</target>
        </trans-unit>
        <trans-unit id="babd48f1acbcf2cefafda1f4e072d38c1d9be88a" translate="yes" xml:space="preserve">
          <source>By default, &lt;a href=&quot;CPAN::Meta::YAML&quot;&gt;CPAN::Meta::YAML&lt;/a&gt; will be used for deserializing YAML data. If the &lt;code&gt;PERL_YAML_BACKEND&lt;/code&gt; environment variable is defined, then it is interpreted as a module to use for deserialization. The given module must be installed, must load correctly and must implement the &lt;code&gt;Load()&lt;/code&gt; function or an exception will be thrown.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="91507ffd77a8c68ad696f119dae98dd6eab9b326" translate="yes" xml:space="preserve">
          <source>By default, &lt;a href=&quot;Email::Sender::Simple&quot;&gt;Email::Sender::Simple&lt;/a&gt; (the &lt;code&gt;send&lt;/code&gt; and &lt;code&gt;send_or_die&lt;/code&gt; methods use this under the hood) will try &lt;code&gt;sendmail&lt;/code&gt; first, if it exists in your $PATH. This generally isn't the case. If there's a remote mail server you use to send mail, consider investigating one of the Transport classes. At time of writing, the available transports include:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="951a27293b21723e13facff91a05ad645f4b8b59" translate="yes" xml:space="preserve">
          <source>By default, &lt;a href=&quot;JSON::PP&quot;&gt;JSON::PP&lt;/a&gt; will be used for deserializing JSON data. If the &lt;code&gt;CPAN_META_JSON_BACKEND&lt;/code&gt; environment variable exists, this is expected to be the name of a loadable module that provides the &lt;a href=&quot;json&quot;&gt;JSON&lt;/a&gt; API, since downstream code expects to be able to call &lt;code&gt;new&lt;/code&gt; on this class. As such, while &lt;a href=&quot;JSON::PP&quot;&gt;JSON::PP&lt;/a&gt;, &lt;a href=&quot;JSON::XS&quot;&gt;JSON::XS&lt;/a&gt;, &lt;a href=&quot;Cpanel::JSON::XS&quot;&gt;Cpanel::JSON::XS&lt;/a&gt; and &lt;a href=&quot;JSON::MaybeXS&quot;&gt;JSON::MaybeXS&lt;/a&gt; will work for this, to use &lt;a href=&quot;Mojo::JSON&quot;&gt;Mojo::JSON&lt;/a&gt; or &lt;a href=&quot;JSON::Tiny&quot;&gt;JSON::Tiny&lt;/a&gt; for decoding requires setting &lt;a href=&quot;#CPAN_META_JSON_DECODER&quot;&gt;&quot;CPAN_META_JSON_DECODER&quot;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fd2cca244c4dee51baa96e422675f44c6c00f8ee" translate="yes" xml:space="preserve">
          <source>By default, &lt;a href=&quot;JSON::PP&quot;&gt;JSON::PP&lt;/a&gt; will be used for deserializing JSON data. If the &lt;code&gt;CPAN_META_JSON_DECODER&lt;/code&gt; environment variable exists, this is expected to be the name of a loadable module that provides a &lt;code&gt;decode_json&lt;/code&gt; subroutine, which will then be used for deserialization. Relying only on the existence of said subroutine allows for maximum compatibility, since this API is provided by all of &lt;a href=&quot;JSON::PP&quot;&gt;JSON::PP&lt;/a&gt;, &lt;a href=&quot;JSON::XS&quot;&gt;JSON::XS&lt;/a&gt;, &lt;a href=&quot;Cpanel::JSON::XS&quot;&gt;Cpanel::JSON::XS&lt;/a&gt;, &lt;a href=&quot;JSON::MaybeXS&quot;&gt;JSON::MaybeXS&lt;/a&gt;, &lt;a href=&quot;JSON::Tiny&quot;&gt;JSON::Tiny&lt;/a&gt;, and &lt;a href=&quot;Mojo::JSON&quot;&gt;Mojo::JSON&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="79a294e48ade56dbe097d94ecb2d017b667469c8" translate="yes" xml:space="preserve">
          <source>By default, &lt;a href=&quot;http://search.cpan.org/perldoc/Email::Sender::Simple&quot;&gt;Email::Sender::Simple&lt;/a&gt; will try `sendmail` first, if it exists in your $PATH. This generally isn't the case. If there's a remote mail server you use to send mail, consider investigating one of the Transport classes. At time of writing, the available transports include:</source>
          <target state="translated">默认情况下，如果$ PATH中存在&lt;a href=&quot;http://search.cpan.org/perldoc/Email::Sender::Simple&quot;&gt;Email :: Sender :: Simple，&lt;/a&gt;它将首先尝试使用sendmail。通常情况并非如此。如果有用于发送邮件的远程邮件服务器，请考虑研究传输类别之一。在撰写本文时，可用的传输方式包括：</target>
        </trans-unit>
        <trans-unit id="d72ee058cb3ba5edce2a08b405dc90217d0eada0" translate="yes" xml:space="preserve">
          <source>By default, &lt;b&gt;Locale::Maketext::Simple&lt;/b&gt; draws its source from the calling package's</source>
          <target state="translated">默认情况下，&lt;b&gt;Locale :: Maketext :: Simple&lt;/b&gt;从调用包的</target>
        </trans-unit>
        <trans-unit id="35fc08f26016b44845e97a461120088a4d635511" translate="yes" xml:space="preserve">
          <source>By default, &lt;b&gt;pod2man&lt;/b&gt; dies if any errors are detected in the POD input. If &lt;b&gt;--stderr&lt;/b&gt; is given and no &lt;b&gt;--errors&lt;/b&gt; flag is present, errors are sent to standard error, but &lt;b&gt;pod2man&lt;/b&gt; does not abort. This is equivalent to &lt;code&gt;--errors=stderr&lt;/code&gt; and is supported for backward compatibility.</source>
          <target state="translated">默认情况下，如果在POD输入中检测到任何错误，&lt;b&gt;pod2man将&lt;/b&gt;死亡。如果&lt;b&gt;--stderr&lt;/b&gt;，并给出没有&lt;b&gt;--errors&lt;/b&gt;标志存在，错误被发送到标准错误，但&lt;b&gt;pod2man将&lt;/b&gt;不会中止。这等效于 &lt;code&gt;--errors=stderr&lt;/code&gt; ,并且为了向后兼容而受支持。</target>
        </trans-unit>
        <trans-unit id="30d3609c8a43f768f52510e95fef029cac6273de" translate="yes" xml:space="preserve">
          <source>By default, &lt;b&gt;pod2man&lt;/b&gt; produces the most conservative possible *roff output to try to ensure that it will work with as many different *roff implementations as possible. Many *roff implementations cannot handle non-ASCII characters, so this means all non-ASCII characters are converted either to a *roff escape sequence that tries to create a properly accented character (at least for troff output) or to &lt;code&gt;X&lt;/code&gt; .</source>
          <target state="translated">默认情况下，&lt;b&gt;pod2man&lt;/b&gt;会生成最保守的* roff输出，以尝试确保它可以与尽可能多的不同* roff实现一起使用。许多的* roff实现不能处理非ASCII字符，因此，这意味着所有的非ASCII字符或者转换为*的roff转义序列，试图创建一个适当重音字符（至少对于troff的输出），或 &lt;code&gt;X&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="6c802c27acda71e33b3944a76fe3f254627c5e35" translate="yes" xml:space="preserve">
          <source>By default, &lt;b&gt;pod2man&lt;/b&gt; produces the most conservative possible *roff output to try to ensure that it will work with as many different *roff implementations as possible. Many *roff implementations cannot handle non-ASCII characters, so this means all non-ASCII characters are converted either to a *roff escape sequence that tries to create a properly accented character (at least for troff output) or to &lt;code&gt;X&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b7337f82d45ceca3575dcc4fcaada9bab5f7a5ae" translate="yes" xml:space="preserve">
          <source>By default, &lt;b&gt;pod2text&lt;/b&gt; dies if any errors are detected in the POD input. If &lt;b&gt;--stderr&lt;/b&gt; is given and no &lt;b&gt;--errors&lt;/b&gt; flag is present, errors are sent to standard error, but &lt;b&gt;pod2text&lt;/b&gt; does not abort. This is equivalent to &lt;code&gt;--errors=stderr&lt;/code&gt; and is supported for backward compatibility.</source>
          <target state="translated">默认情况下，如果在POD输入中检测到任何错误，则&lt;b&gt;pod2text会&lt;/b&gt;消失。如果&lt;b&gt;--stderr&lt;/b&gt;，并给出没有&lt;b&gt;--errors&lt;/b&gt;标志存在，错误被发送到标准错误，但&lt;b&gt;pod2text&lt;/b&gt;不会中止。这等效于 &lt;code&gt;--errors=stderr&lt;/code&gt; ,并且为了向后兼容而受支持。</target>
        </trans-unit>
        <trans-unit id="d7d98831aaac5ae8bfa863600541ce748cdfa2ce" translate="yes" xml:space="preserve">
          <source>By default, &lt;b&gt;pod2text&lt;/b&gt; tries to use the same output encoding as its input encoding (to be backward-compatible with older versions). This option says to instead force the output encoding to UTF-8.</source>
          <target state="translated">默认情况下，&lt;b&gt;pod2text&lt;/b&gt;尝试使用与其输入编码相同的输出编码（以与旧版本向后兼容）。此选项表示改为将输出编码强制为UTF-8。</target>
        </trans-unit>
        <trans-unit id="f53f148127af7bd5af025188de73dc79a271f7fe" translate="yes" xml:space="preserve">
          <source>By default, &lt;b&gt;pod2usage()&lt;/b&gt; will use &lt;code&gt;$0&lt;/code&gt; as the path to the pod input file. Unfortunately, not all systems on which Perl runs will set &lt;code&gt;$0&lt;/code&gt; properly (although if &lt;code&gt;$0&lt;/code&gt; isn't found, &lt;b&gt;pod2usage()&lt;/b&gt; will search &lt;code&gt;$ENV{PATH}&lt;/code&gt; or else the list specified by the &lt;code&gt;-pathlist&lt;/code&gt; option). If this is the case for your system, you may need to explicitly specify the path to the pod docs for the invoking script using something similar to the following:</source>
          <target state="translated">默认情况下，&lt;b&gt;pod2usage（）&lt;/b&gt;将使用 &lt;code&gt;$0&lt;/code&gt; 作为pod输入文件的路径。不幸的是，并非所有运行Perl的系统都会正确设置 &lt;code&gt;$0&lt;/code&gt; （尽管如果找不到 &lt;code&gt;$0&lt;/code&gt; ，&lt;b&gt;pod2usage（）&lt;/b&gt;将搜索 &lt;code&gt;$ENV{PATH}&lt;/code&gt; 或 &lt;code&gt;-pathlist&lt;/code&gt; 选项指定的列表）。如果您的系统是这种情况，则可能需要使用类似于以下内容的方式为调用脚本显式指定pod doc的路径：</target>
        </trans-unit>
        <trans-unit id="139ad65b1f5c08871019f97feca04f36c4d7791f" translate="yes" xml:space="preserve">
          <source>By default, &lt;code&gt;Archive::Tar&lt;/code&gt; is in a completely POSIX-compatible mode, which uses the POSIX-specification of &lt;code&gt;tar&lt;/code&gt; to store files. For paths greater than 100 characters, this is done using the &lt;code&gt;POSIX header prefix&lt;/code&gt; . Non-POSIX-compatible clients may not support this part of the specification, and may only support the &lt;code&gt;GNU Extended
Header&lt;/code&gt; functionality. To facilitate those clients, you can set the &lt;code&gt;$Archive::Tar::DO_NOT_USE_PREFIX&lt;/code&gt; variable to &lt;code&gt;true&lt;/code&gt; . See the &lt;code&gt;GLOBAL VARIABLES&lt;/code&gt; section for details on this variable.</source>
          <target state="translated">默认情况下， &lt;code&gt;Archive::Tar&lt;/code&gt; 处于完全与POSIX兼容的模式，该模式使用 &lt;code&gt;tar&lt;/code&gt; 的POSIX规范存储文件。对于大于100个字符的路径，使用 &lt;code&gt;POSIX header prefix&lt;/code&gt; 来完成。不兼容POSIX的客户端可能不支持该规范的这一部分，并且可能仅支持 &lt;code&gt;GNU Extended Header&lt;/code&gt; 功能。为了方便这些客户端，可以将 &lt;code&gt;$Archive::Tar::DO_NOT_USE_PREFIX&lt;/code&gt; 变量设置为 &lt;code&gt;true&lt;/code&gt; 。有关此变量的详细信息，请参见&amp;ldquo; &lt;code&gt;GLOBAL VARIABLES&lt;/code&gt; 部分。</target>
        </trans-unit>
        <trans-unit id="22d3080e984d27612f64abae1b1cd500724525a5" translate="yes" xml:space="preserve">
          <source>By default, &lt;code&gt;Archive::Tar&lt;/code&gt; is in a completely POSIX-compatible mode, which uses the POSIX-specification of &lt;code&gt;tar&lt;/code&gt; to store files. For paths greater than 100 characters, this is done using the &lt;code&gt;POSIX header prefix&lt;/code&gt;. Non-POSIX-compatible clients may not support this part of the specification, and may only support the &lt;code&gt;GNU Extended Header&lt;/code&gt; functionality. To facilitate those clients, you can set the &lt;code&gt;$Archive::Tar::DO_NOT_USE_PREFIX&lt;/code&gt; variable to &lt;code&gt;true&lt;/code&gt;. See the &lt;code&gt;GLOBAL VARIABLES&lt;/code&gt; section for details on this variable.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a0ce25419277d6adf6e0c4949f8ca8dca00cd62d" translate="yes" xml:space="preserve">
          <source>By default, &lt;code&gt;Archive::Tar&lt;/code&gt; will try to &lt;code&gt;&lt;a href=&quot;../functions/chmod&quot;&gt;chmod&lt;/a&gt;&lt;/code&gt; your files to whatever mode was specified for the particular file in the archive. In some cases, this may not be desired. In that case, set this variable to &lt;code&gt;0&lt;/code&gt; to disable &lt;code&gt;&lt;a href=&quot;../functions/chmod&quot;&gt;chmod&lt;/a&gt;&lt;/code&gt;-ing.</source>
          <target state="translated">默认情况下， &lt;code&gt;Archive::Tar&lt;/code&gt; 会尝试 &lt;code&gt;&lt;a href=&quot;../functions/chmod&quot;&gt;chmod&lt;/a&gt;&lt;/code&gt; 文件存档中的特定文件中指定的任何模式。在某些情况下，这可能是不希望的。在这种情况下，将此变量设置为 &lt;code&gt;0&lt;/code&gt; 可禁用 &lt;code&gt;&lt;a href=&quot;../functions/chmod&quot;&gt;chmod&lt;/a&gt;&lt;/code&gt; -ing。</target>
        </trans-unit>
        <trans-unit id="eb67a5af923530004ebe769a16f96c44f7d23600" translate="yes" xml:space="preserve">
          <source>By default, &lt;code&gt;Archive::Tar&lt;/code&gt; will try to &lt;code&gt;&lt;a href=&quot;../functions/chown&quot;&gt;chown&lt;/a&gt;&lt;/code&gt; your files if it is able to. In some cases, this may not be desired. In that case, set this variable to &lt;code&gt;0&lt;/code&gt; to disable &lt;code&gt;&lt;a href=&quot;../functions/chown&quot;&gt;chown&lt;/a&gt;&lt;/code&gt;-ing, even if it were possible.</source>
          <target state="translated">默认情况下， &lt;code&gt;Archive::Tar&lt;/code&gt; 会尝试对文件进行 &lt;code&gt;&lt;a href=&quot;../functions/chown&quot;&gt;chown&lt;/a&gt;&lt;/code&gt; 。在某些情况下，这可能是不希望的。在这种情况下，将此变量设置为 &lt;code&gt;0&lt;/code&gt; 以禁用 &lt;code&gt;&lt;a href=&quot;../functions/chown&quot;&gt;chown&lt;/a&gt;&lt;/code&gt; -ing，即使可能的话。</target>
        </trans-unit>
        <trans-unit id="06e25549a7c661c31580c21cab9b2e4174ef8ab8" translate="yes" xml:space="preserve">
          <source>By default, &lt;code&gt;Archive::Tar&lt;/code&gt; will try to &lt;code&gt;chmod&lt;/code&gt; your files to whatever mode was specified for the particular file in the archive. In some cases, this may not be desired. In that case, set this variable to &lt;code&gt;0&lt;/code&gt; to disable &lt;code&gt;chmod&lt;/code&gt;-ing.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3ebe21c0c6c50ca514eb93d2e374500f1bce8cfb" translate="yes" xml:space="preserve">
          <source>By default, &lt;code&gt;Archive::Tar&lt;/code&gt; will try to &lt;code&gt;chown&lt;/code&gt; your files if it is able to. In some cases, this may not be desired. In that case, set this variable to &lt;code&gt;0&lt;/code&gt; to disable &lt;code&gt;chown&lt;/code&gt;-ing, even if it were possible.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a46faa893a6a331982326586cd0db0d3a2c1dfbd" translate="yes" xml:space="preserve">
          <source>By default, &lt;code&gt;Archive::Tar&lt;/code&gt; will try to put paths that are over 100 characters in the &lt;code&gt;prefix&lt;/code&gt; field of your tar header, as defined per POSIX-standard. However, some (older) tar programs do not implement this spec. To retain compatibility with these older or non-POSIX compliant versions, you can set the &lt;code&gt;$DO_NOT_USE_PREFIX&lt;/code&gt; variable to a true value, and &lt;code&gt;Archive::Tar&lt;/code&gt; will use an alternate way of dealing with paths over 100 characters by using the &lt;code&gt;GNU Extended Header&lt;/code&gt; feature.</source>
          <target state="translated">默认情况下， &lt;code&gt;Archive::Tar&lt;/code&gt; 会尝试将超过100个字符的路径放入tar标头的 &lt;code&gt;prefix&lt;/code&gt; 字段中，这是根据POSIX标准定义的。但是，某些（较旧的）tar程序未实现此规范。为了保持与这些较早版本或不兼容POSIX的版本的兼容性，可以将 &lt;code&gt;$DO_NOT_USE_PREFIX&lt;/code&gt; 变量设置为true值，并且 &lt;code&gt;Archive::Tar&lt;/code&gt; 将使用 &lt;code&gt;GNU Extended Header&lt;/code&gt; 功能使用另一种方式处理100个以上字符的路径。</target>
        </trans-unit>
        <trans-unit id="ca08f9f1e5aebac60920c9f0bab0c8d5475cdd53" translate="yes" xml:space="preserve">
          <source>By default, &lt;code&gt;Sys::Syslog&lt;/code&gt; exports the symbols from the &lt;code&gt;:standard&lt;/code&gt; tag.</source>
          <target state="translated">默认情况下， &lt;code&gt;Sys::Syslog&lt;/code&gt; 从 &lt;code&gt;:standard&lt;/code&gt; 标记中导出符号。</target>
        </trans-unit>
        <trans-unit id="ea04cfd93bdf64370c1cc20e848935f755855d27" translate="yes" xml:space="preserve">
          <source>By default, CJK unified ideographs are ordered in Unicode codepoint order, but those in the CJK Unified Ideographs block are less than those in the CJK Unified Ideographs Extension A etc.</source>
          <target state="translated">默认情况下,中日韩统一表意文字是按Unicode码点顺序排列的,但中日韩统一表意文字块中的表意文字要少于中日韩统一表意文字扩展A等。</target>
        </trans-unit>
        <trans-unit id="c9fd4df55423b1ff0429c30297d024455fc09d6b" translate="yes" xml:space="preserve">
          <source>By default, CPAN will install the latest non-developer release of a module. If you want to install a dev release, you have to specify the partial path starting with the author id to the tarball you wish to install, like so:</source>
          <target state="translated">默认情况下,CPAN会安装一个模块的最新非开发者版本。如果你想安装一个开发版,你必须指定一个以作者 id 开始的部分路径,以达到你想安装的 tar 包,就像这样。</target>
        </trans-unit>
        <trans-unit id="d31a5f0a0e7ac5c54379eb4d64385f193a7c7e78" translate="yes" xml:space="preserve">
          <source>By default, Data::Dumper builds up the &quot;seen&quot; hash of scalars that it has encountered during serialization. This is very expensive. This seen hash is necessary to support and even just detect circular references. It is exposed to the user via the &lt;code&gt;Seen()&lt;/code&gt; call both for writing and reading.</source>
          <target state="translated">默认情况下，Data :: Dumper会建立序列化过程中遇到的标量的&amp;ldquo;可见&amp;rdquo;散列。这非常昂贵。这种可见的散列对于支持甚至检测循环引用都是必需的。它通过 &lt;code&gt;Seen()&lt;/code&gt; 调用显示给用户，以进行写入和读取。</target>
        </trans-unit>
        <trans-unit id="cd1b6853947249bceb85a960748d4561e30fc8ae" translate="yes" xml:space="preserve">
          <source>By default, GetOptions parses the options that are present in the global array &lt;code&gt;@ARGV&lt;/code&gt; . A special entry &lt;code&gt;GetOptionsFromArray&lt;/code&gt; can be used to parse options from an arbitrary array.</source>
          <target state="translated">默认情况下，GetOptions解析全局数组 &lt;code&gt;@ARGV&lt;/code&gt; 中存在的选项。特殊条目 &lt;code&gt;GetOptionsFromArray&lt;/code&gt; 可用于解析任意数组中的选项。</target>
        </trans-unit>
        <trans-unit id="d4156072258fa02556fc1c5baacde7ddf6319893" translate="yes" xml:space="preserve">
          <source>By default, GetOptions parses the options that are present in the global array &lt;code&gt;@ARGV&lt;/code&gt;. A special entry &lt;code&gt;GetOptionsFromArray&lt;/code&gt; can be used to parse options from an arbitrary array.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="96d8266281e8d2795ccf65d39f9f3a28ecacdd25" translate="yes" xml:space="preserve">
          <source>By default, HP-UX comes configured with a maximum data segment size of 64MB. This is too small to correctly compile Perl with the maximum optimization levels. You can increase the size of the maxdsiz kernel parameter through the use of SAM.</source>
          <target state="translated">默认情况下,HP-UX配置的最大数据段大小为64MB。这个大小太小了,无法正确编译具有最大优化级别的Perl。你可以通过使用SAM来增加maxdsiz内核参数的大小。</target>
        </trans-unit>
        <trans-unit id="5e3209602259bcaf280c37535cab25ba0fe2f1dc" translate="yes" xml:space="preserve">
          <source>By default, HTTP::Tiny does not make any assumptions about your trust model, threat level or risk tolerance. It just aims to give you an encrypted channel when you need one.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="137732db42e50a8e0a9c182ecd242a32825b115f" translate="yes" xml:space="preserve">
          <source>By default, Hangul syllables are decomposed into Hangul Jamo, even if &lt;code&gt;(normalization =&amp;gt; &lt;a href=&quot;../functions/undef&quot;&gt;undef&lt;/a&gt;)&lt;/code&gt; . But the mapping of Hangul syllables may be overridden.</source>
          <target state="translated">默认情况下，即使 &lt;code&gt;(normalization =&amp;gt; &lt;a href=&quot;../functions/undef&quot;&gt;undef&lt;/a&gt;)&lt;/code&gt; ，韩文音节也被分解为韩文Jamo 。但是，韩文音节的映射可能会被覆盖。</target>
        </trans-unit>
        <trans-unit id="ac19ab911ba3ab14f7cbb62b29a9d3c7664d12cf" translate="yes" xml:space="preserve">
          <source>By default, Hangul syllables are decomposed into Hangul Jamo, even if &lt;code&gt;(normalization =&amp;gt; undef)&lt;/code&gt;. But the mapping of Hangul syllables may be overridden.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ab7c37acde02f04a994a0fe2dce5847989bfb7ac" translate="yes" xml:space="preserve">
          <source>By default, JSON booleans will be decoded as overloaded &lt;code&gt;$JSON::PP::false&lt;/code&gt; and &lt;code&gt;$JSON::PP::true&lt;/code&gt; objects.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f03358de26c8be966d378648ec79854e58778f9c" translate="yes" xml:space="preserve">
          <source>By default, Locale::Maketext blacklists all methods in the Locale::Maketext namespace that begin with the '_' character, and all methods which include Perl's namespace separator characters.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="41b45806d57c8440d5ef81fe98a720868522060d" translate="yes" xml:space="preserve">
          <source>By default, Perl assumes that it must do most of its arithmetic in floating point. But by saying</source>
          <target state="translated">默认情况下,Perl认为它必须用浮点运算来完成大部分运算。但如果说</target>
        </trans-unit>
        <trans-unit id="4de9fffb0ae0d357c4fcb6328d235687ad4441ca" translate="yes" xml:space="preserve">
          <source>By default, Perl does a depth-first left-to-right search for a method. That means it starts with the first parent in the &lt;code&gt;@ISA&lt;/code&gt; array, and then searches all of its parents, grandparents, etc. If it fails to find the method, it then goes to the next parent in the original class's &lt;code&gt;@ISA&lt;/code&gt; array and searches from there.</source>
          <target state="translated">默认情况下，Perl对方法进行深度优先的从左到右搜索。这意味着它从 &lt;code&gt;@ISA&lt;/code&gt; 数组中的第一个父级开始，然后搜索其所有父级，祖父母等。如果未能找到该方法，则它将转到原始类的 &lt;code&gt;@ISA&lt;/code&gt; 数组中的下一个父级并进行搜索从那里。</target>
        </trans-unit>
        <trans-unit id="b268ca20b85e7cb3d549ac0ab2d0251384881b6c" translate="yes" xml:space="preserve">
          <source>By default, Perl itself (outside the &lt;a href=&quot;posix&quot;&gt;POSIX&lt;/a&gt; module) ignores the current locale. The &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; locale&lt;/code&gt; pragma tells Perl to use the current locale for some operations. Starting in v5.16, there are optional parameters to this pragma, described below, which restrict which operations are affected by it.</source>
          <target state="translated">默认情况下，Perl本身（在&lt;a href=&quot;posix&quot;&gt;POSIX&lt;/a&gt;模块外部）将忽略当前语言环境。在 &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; locale&lt;/code&gt; 编译告诉Perl使用当前区域设置的一些操作。从v5.16开始，此编译指示有一些可选参数，如下所述，它们限制了受其影响的操作。</target>
        </trans-unit>
        <trans-unit id="aa94a8ccd3466368231cc76eb0e0e655562c87e1" translate="yes" xml:space="preserve">
          <source>By default, Perl itself (outside the &lt;a href=&quot;posix&quot;&gt;POSIX&lt;/a&gt; module) ignores the current locale. The &lt;code&gt;use locale&lt;/code&gt; pragma tells Perl to use the current locale for some operations. Starting in v5.16, there are optional parameters to this pragma, described below, which restrict which operations are affected by it.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d3796ef67591d4f35614b1eaeb5b1f668ac93c4c" translate="yes" xml:space="preserve">
          <source>By default, Perl's built-in OO system is very minimal, leaving you to do most of the work. This minimalism made a lot of sense in 1994, but in the years since Perl 5.0 we've seen a number of common patterns emerge in Perl OO. Fortunately, Perl's flexibility has allowed a rich ecosystem of Perl OO systems to flourish.</source>
          <target state="translated">默认情况下,Perl内置的OO系统是非常简约的,让你来做大部分的工作。这种极简主义在1994年是很有意义的,但在Perl 5.0之后的几年里,我们看到Perl OO中出现了一些常见的模式。幸运的是,Perl的灵活性使得一个丰富的Perl OO系统的生态系统得以蓬勃发展。</target>
        </trans-unit>
        <trans-unit id="fcb268259208b983d01ebd2fb8ea62f828af5570" translate="yes" xml:space="preserve">
          <source>By default, Pod::Escapes exports none of its symbols. But you can request any of them to be exported. Either request them individually, as with &lt;code&gt;&lt;a href=&quot;../functions/use&quot;&gt;use&lt;/a&gt; Pod::Escapes qw(symbolname symbolname2...);&lt;/code&gt; , or you can do &lt;code&gt;&lt;a href=&quot;../functions/use&quot;&gt;use&lt;/a&gt; Pod::Escapes qw(:ALL);&lt;/code&gt; to get all exportable symbols.</source>
          <target state="translated">默认情况下，Pod :: Escapes不会导出任何符号。但是您可以要求将其中任何一个导出。要么单独请求它们，如 &lt;code&gt;&lt;a href=&quot;../functions/use&quot;&gt;use&lt;/a&gt; Pod::Escapes qw(symbolname symbolname2...);&lt;/code&gt; ，或者您也可以 &lt;code&gt;&lt;a href=&quot;../functions/use&quot;&gt;use&lt;/a&gt; Pod::Escapes qw(:ALL);&lt;/code&gt; 获取所有可导出的符号。</target>
        </trans-unit>
        <trans-unit id="1395433e5e722399b7b232764452499b218a2dda" translate="yes" xml:space="preserve">
          <source>By default, Pod::Escapes exports none of its symbols. But you can request any of them to be exported. Either request them individually, as with &lt;code&gt;use Pod::Escapes qw(symbolname symbolname2...);&lt;/code&gt;, or you can do &lt;code&gt;use Pod::Escapes qw(:ALL);&lt;/code&gt; to get all exportable symbols.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a42f3e93e67354db749eedfb3803802a7a1b163f" translate="yes" xml:space="preserve">
          <source>By default, Pod::Man produces the most conservative possible *roff output to try to ensure that it will work with as many different *roff implementations as possible. Many *roff implementations cannot handle non-ASCII characters, so this means all non-ASCII characters are converted either to a *roff escape sequence that tries to create a properly accented character (at least for troff output) or to &lt;code&gt;X&lt;/code&gt; .</source>
          <target state="translated">默认情况下，Pod :: Man会生成最保守的* roff输出，以尝试确保它将与尽可能多的不同* roff实现一起使用。许多的* roff实现不能处理非ASCII字符，因此，这意味着所有的非ASCII字符或者转换为*的roff转义序列，试图创建一个适当重音字符（至少对于troff的输出），或 &lt;code&gt;X&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="1aff6e317b0c1cd918985cba32d252237ffac9cc" translate="yes" xml:space="preserve">
          <source>By default, Pod::Man produces the most conservative possible *roff output to try to ensure that it will work with as many different *roff implementations as possible. Many *roff implementations cannot handle non-ASCII characters, so this means all non-ASCII characters are converted either to a *roff escape sequence that tries to create a properly accented character (at least for troff output) or to &lt;code&gt;X&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="98107783dba2f8c87d2092a6ced42a0827ce5268" translate="yes" xml:space="preserve">
          <source>By default, Pod::Text uses the same output encoding as the input encoding of the POD source (provided that Perl was built with PerlIO; otherwise, it doesn't encode its output). If this option is given, the output encoding is forced to UTF-8.</source>
          <target state="translated">默认情况下,Pod::Text使用与POD源的输入编码相同的输出编码(前提是Perl是用PerlIO构建的;否则,它不会对输出进行编码)。如果给定了这个选项,输出编码将被强制为UTF-8。</target>
        </trans-unit>
        <trans-unit id="607468b061542c5fb308ea35e966138c590f5abc" translate="yes" xml:space="preserve">
          <source>By default, Pod::Usage will call &lt;a href=&quot;../perldoc&quot;&gt;perldoc&lt;/a&gt; when -verbose &amp;gt;= 2 is specified. This does not work well e.g. if the script was packed with &lt;a href=&quot;http://search.cpan.org/perldoc/PAR&quot;&gt;PAR&lt;/a&gt;. The -noperldoc option suppresses the external call to &lt;a href=&quot;../perldoc&quot;&gt;perldoc&lt;/a&gt; and uses the simple text formatter (&lt;a href=&quot;text&quot;&gt;Pod::Text&lt;/a&gt;) to output the POD.</source>
          <target state="translated">默认情况下，当指定-verbose&amp;gt; = 2时，Pod :: Usage将调用&lt;a href=&quot;../perldoc&quot;&gt;perldoc&lt;/a&gt;。这不能很好地工作，例如，如果脚本中包含&lt;a href=&quot;http://search.cpan.org/perldoc/PAR&quot;&gt;PAR&lt;/a&gt;。-noperldoc选项禁止对&lt;a href=&quot;../perldoc&quot;&gt;perldoc&lt;/a&gt;的外部调用，并使用简单文本格式化程序（&lt;a href=&quot;text&quot;&gt;Pod :: Text&lt;/a&gt;）输出POD。</target>
        </trans-unit>
        <trans-unit id="3329bbc8b004125c8c5278e4dfc259a804cd3aa3" translate="yes" xml:space="preserve">
          <source>By default, Pod::Usage will call &lt;a href=&quot;perldoc&quot;&gt;perldoc&lt;/a&gt; when -verbose &amp;gt;= 2 is specified. In case &lt;a href=&quot;perldoc&quot;&gt;perldoc&lt;/a&gt; is not installed where the &lt;a href=&quot;perl&quot;&gt;perl&lt;/a&gt; interpreter thinks it is (see &lt;a href=&quot;config&quot;&gt;Config&lt;/a&gt;), the -perldoc option may be used to supply the correct path to &lt;a href=&quot;perldoc&quot;&gt;perldoc&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="22871ba1e750f95b09d8130a2d10b57dbadb7827" translate="yes" xml:space="preserve">
          <source>By default, Pod::Usage will call &lt;a href=&quot;perldoc&quot;&gt;perldoc&lt;/a&gt; when -verbose &amp;gt;= 2 is specified. In case of special or unusual Perl installations, the -perlcmd option may be used to supply the path to a &lt;a href=&quot;perl&quot;&gt;perl&lt;/a&gt; executable which should run &lt;a href=&quot;perldoc&quot;&gt;perldoc&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1201c61be1212ca71fcfd8853a5004fc60c01a5a" translate="yes" xml:space="preserve">
          <source>By default, Pod::Usage will call &lt;a href=&quot;perldoc&quot;&gt;perldoc&lt;/a&gt; when -verbose &amp;gt;= 2 is specified. The -perldocopt option may be used to supply options to &lt;a href=&quot;perldoc&quot;&gt;perldoc&lt;/a&gt;. The string may contain several, space-separated options.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cb1d3cbd9df1b34d43a284a1aea0a8c7b074f24c" translate="yes" xml:space="preserve">
          <source>By default, Pod::Usage will call &lt;a href=&quot;perldoc&quot;&gt;perldoc&lt;/a&gt; when -verbose &amp;gt;= 2 is specified. This does not work well e.g. if the script was packed with &lt;a href=&quot;par&quot;&gt;PAR&lt;/a&gt;. The -noperldoc option suppresses the external call to &lt;a href=&quot;perldoc&quot;&gt;perldoc&lt;/a&gt; and uses the simple text formatter (&lt;a href=&quot;Pod::Text&quot;&gt;Pod::Text&lt;/a&gt;) to output the POD.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7aaf9130ce3cc364b8ff0d6d870dfc5f5e3ff5d9" translate="yes" xml:space="preserve">
          <source>By default, a quantified subpattern is &quot;greedy&quot;, that is, it will match as many times as possible (given a particular starting location) while still allowing the rest of the pattern to match. If you want it to match the minimum number of times possible, follow the quantifier with a &quot;?&quot;. Note that the meanings don't change, just the &quot;greediness&quot;:</source>
          <target state="translated">默认情况下,量化子模式是 &quot;贪婪的&quot;,也就是说,它将尽可能多地匹配(给定一个特定的起始位置),同时仍然允许模式的其他部分匹配。如果你想让它尽可能地减少匹配次数,可以在量化符后面加上&quot;?&quot;。注意,含义不会改变,只是 &quot;贪婪&quot;。</target>
        </trans-unit>
        <trans-unit id="0b6eec9c8bbe7a9df535a2212f50cb8ec43bdf1e" translate="yes" xml:space="preserve">
          <source>By default, a quantified subpattern is &quot;greedy&quot;, that is, it will match as many times as possible (given a particular starting location) while still allowing the rest of the pattern to match. If you want it to match the minimum number of times possible, follow the quantifier with a &lt;code&gt;&quot;?&quot;&lt;/code&gt;. Note that the meanings don't change, just the &quot;greediness&quot;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b48a9b04f7e394f8ae5c84a6badf024eee518a01" translate="yes" xml:space="preserve">
          <source>By default, all ftp connections are done in passive mode. To change that, see the &lt;code&gt;$FTP_PASSIVE&lt;/code&gt; variable further down.</source>
          <target state="translated">默认情况下，所有ftp连接都是在被动模式下完成的。要更改此设置，请进一步查看 &lt;code&gt;$FTP_PASSIVE&lt;/code&gt; 变量。</target>
        </trans-unit>
        <trans-unit id="d7f764723d2b6f4e034b63502225f5115dfa076e" translate="yes" xml:space="preserve">
          <source>By default, all tests are eligible to be run in parallel. Specifying any of your own rules removes this one.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7f80a56139fac5d67611619acae3e63a365a4381" translate="yes" xml:space="preserve">
          <source>By default, attribute handlers are called at the end of the compilation phase (in a &lt;code&gt;CHECK&lt;/code&gt; block). This seems to be optimal in most cases because most things that can be defined are defined by that point but nothing has been executed.</source>
          <target state="translated">默认情况下，属性处理程序在编译阶段结束时（在 &lt;code&gt;CHECK&lt;/code&gt; 块中）被调用。在大多数情况下，这似乎是最佳选择，因为大多数可定义的事物都由该点定义，但是什么都没有执行。</target>
        </trans-unit>
        <trans-unit id="d92e033ccee030ae17ccf241ebba25503e925cbf" translate="yes" xml:space="preserve">
          <source>By default, but can be redefined.</source>
          <target state="translated">默认情况下,但可以重新定义。</target>
        </trans-unit>
        <trans-unit id="9f90d660b6b88d20d5a032c88e00b0f974301c2b" translate="yes" xml:space="preserve">
          <source>By default, case-sensitive comparison (that is level 3 difference) won't ignore accents (that is level 2 difference).</source>
          <target state="translated">默认情况下,区分大小写的比较(也就是3级差)不会忽略重音(也就是2级差)。</target>
        </trans-unit>
        <trans-unit id="b957d395a8a7eedebb03724489ebfa7e55174b9c" translate="yes" xml:space="preserve">
          <source>By default, classes in Perl only perform the &lt;code&gt;UNIVERSAL&lt;/code&gt; role, as well as the role of all classes in their inheritance. In other words, by default &lt;code&gt;DOES&lt;/code&gt; responds identically to &lt;code&gt;isa&lt;/code&gt; .</source>
          <target state="translated">默认情况下，Perl中的类仅扮演 &lt;code&gt;UNIVERSAL&lt;/code&gt; 角色，以及所有类在其继承中的角色。换句话说，默认情况下， &lt;code&gt;DOES&lt;/code&gt; 对 &lt;code&gt;isa&lt;/code&gt; 的响应相同。</target>
        </trans-unit>
        <trans-unit id="72b12f15b2704c72b2abbc49dd17fbafa2fd667f" translate="yes" xml:space="preserve">
          <source>By default, classes in Perl only perform the &lt;code&gt;UNIVERSAL&lt;/code&gt; role, as well as the role of all classes in their inheritance. In other words, by default &lt;code&gt;DOES&lt;/code&gt; responds identically to &lt;code&gt;isa&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a09751b6a3dd219cd03f615c311b1588c0433a01" translate="yes" xml:space="preserve">
          <source>By default, each time the CPAN module is started, cache scanning is performed to keep the cache size in sync ('atstart'). Alternatively, scanning and cleanup can happen when CPAN exits ('atexit'). To prevent any cache cleanup, answer 'never'.</source>
          <target state="translated">默认情况下,每次CPAN模块启动时,都会进行缓存扫描以保持缓存大小同步('atstart')。或者,扫描和清理可以在CPAN退出时进行('atexit')。要防止任何缓存清理,回答 &quot;never&quot;。</target>
        </trans-unit>
        <trans-unit id="a04a99ac495330cd07b871fc7a9618f7082ee169" translate="yes" xml:space="preserve">
          <source>By default, every base class needs to live in a file of its own. If you want to have a subclass and its parent class in the same file, you can tell &lt;code&gt;parent&lt;/code&gt; not to load any modules by using the &lt;code&gt;-norequire&lt;/code&gt; switch:</source>
          <target state="translated">默认情况下，每个基类都需要驻留在自己的文件中。如果要在同一文件中包含子类及其父类，则可以使用 &lt;code&gt;-norequire&lt;/code&gt; 开关告诉 &lt;code&gt;parent&lt;/code&gt; 不要加载任何模块：</target>
        </trans-unit>
        <trans-unit id="009314417d0e225d96e9c70c4f8a61f37cbd61fb" translate="yes" xml:space="preserve">
          <source>By default, file names are assumed to be case sensitive; this flag makes bsd_glob() treat case differences as not significant.</source>
          <target state="translated">默认情况下,文件名是区分大小写的;这个标志使得bsd_glob()将大小写差异视为不重要。</target>
        </trans-unit>
        <trans-unit id="f417fd8f43a3aea1715b95681c77c39ae15d3bda" translate="yes" xml:space="preserve">
          <source>By default, filters are not inherited by child hubs. That means if you start a subtest, the subtest will not inherit the filter. You can change this behavior with the &lt;code&gt;inherit&lt;/code&gt; parameter:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6e050dc7d694db5e9597e9b5666a97cb998c6670" translate="yes" xml:space="preserve">
          <source>By default, hiragana is before katakana. If the parameter is made true, this is reversed.</source>
          <target state="translated">默认情况下,平假名在片假名之前。如果该参数为真,则会反过来。</target>
        </trans-unit>
        <trans-unit id="f1a9fafb28afdf9312602001044d697513c2f742" translate="yes" xml:space="preserve">
          <source>By default, if a redispatch attempt fails to find another method elsewhere in the objects class hierarchy, it quietly gives up and does nothing (but see &lt;a href=&quot;#Enforcing-redispatch&quot;&gt;&quot;Enforcing redispatch&quot;&lt;/a&gt;). This gracious acquiescence is also unlike the (generally annoying) behaviour of &lt;code&gt;SUPER&lt;/code&gt;, which throws an exception if it cannot redispatch.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a68b6a00ff07db87e5b4fca637ec784a918f2f88" translate="yes" xml:space="preserve">
          <source>By default, if a redispatch attempt fails to find another method elsewhere in the objects class hierarchy, it quietly gives up and does nothing (but see &lt;a href=&quot;#Enforcing-redispatch&quot;&gt;Enforcing redispatch&lt;/a&gt;). This gracious acquiescence is also unlike the (generally annoying) behaviour of &lt;code&gt;SUPER&lt;/code&gt; , which throws an exception if it cannot redispatch.</source>
          <target state="translated">默认情况下，如果重新分配尝试未能在对象类层次结构中的其他地方找到另一个方法，则它会安静地放弃并且不执行任何操作（但请参见&lt;a href=&quot;#Enforcing-redispatch&quot;&gt;实施redispatch&lt;/a&gt;）。这种客气的默认也不同于 &lt;code&gt;SUPER&lt;/code&gt; 的（通常令人讨厌的）行为，如果SUPER无法重新分派，则会抛出异常。</target>
        </trans-unit>
        <trans-unit id="622748004543277cac1eed24641a5d626b92e074" translate="yes" xml:space="preserve">
          <source>By default, it checks only ascii, utf8 and UTF-16/32 with BOM.</source>
          <target state="translated">默认情况下,它只检查ascii、utf8和UTF-16/32与BOM。</target>
        </trans-unit>
        <trans-unit id="7d795357eb0370d795216bc893725d71f457449f" translate="yes" xml:space="preserve">
          <source>By default, it exports the functions cwd(), getcwd(), fastcwd(), and fastgetcwd() (and, on Win32, getdcwd()) into the caller's namespace.</source>
          <target state="translated">默认情况下,它将函数cwd()、getcwd()、fastcwd()和fastgetcwd()(以及在Win32上的getdcwd())导出到调用者的命名空间。</target>
        </trans-unit>
        <trans-unit id="bd57ef383f01461a26729aaf5bda1caeec29a44b" translate="yes" xml:space="preserve">
          <source>By default, lowercase is before uppercase. If the parameter is made true, this is reversed.</source>
          <target state="translated">默认情况下,小写字母在大写字母之前。如果该参数为真,则会反过来。</target>
        </trans-unit>
        <trans-unit id="bd52b1e53c314fe3c4b656aedbdea4b06daed47d" translate="yes" xml:space="preserve">
          <source>By default, no comment field is written to the zip file.</source>
          <target state="translated">默认情况下,没有注释字段被写入压缩文件。</target>
        </trans-unit>
        <trans-unit id="5d5b6fb015586b3864b9f25cf4e1c4322f8f41ee" translate="yes" xml:space="preserve">
          <source>By default, optional warnings are disabled, so any legacy code that doesn't attempt to control the warnings will work unchanged.</source>
          <target state="translated">默认情况下,可选的警告是被禁用的,所以任何不试图控制警告的遗留代码都不会改变。</target>
        </trans-unit>
        <trans-unit id="56744be38bf9987fcb8b98dab67cef731ba84ab1" translate="yes" xml:space="preserve">
          <source>By default, perl handles file globbing using the File::Glob extension, which provides portable globbing.</source>
          <target state="translated">默认情况下,perl使用File::Glob扩展来处理文件glob,它提供了可移植的glob。</target>
        </trans-unit>
        <trans-unit id="b252359c438a3c8369c5cbca58632d9664dd0131" translate="yes" xml:space="preserve">
          <source>By default, perl uses the large file compilation environment and relies on Solaris to do the underlying mapping of interfaces.</source>
          <target state="translated">默认情况下,perl使用大文件编译环境,依靠Solaris来做底层的接口映射。</target>
        </trans-unit>
        <trans-unit id="95ea6d685281e6fc9b1246edd3de6ccbfbf85ecd" translate="yes" xml:space="preserve">
          <source>By default, perl will be compiled as a 32-bit application. Unless you want to allocate more than ~ 4GB of memory inside perl, or unless you need more than 255 open file descriptors, you probably don't need perl to be a 64-bit app.</source>
          <target state="translated">默认情况下,perl将被编译为32位应用程序。除非你想在perl内部分配超过4GB的内存,或者你需要超过255个打开的文件描述符,否则你可能不需要perl成为一个64位的应用程序。</target>
        </trans-unit>
        <trans-unit id="8beb3118174cbb4befcc9218c3e11ee8559a67ed" translate="yes" xml:space="preserve">
          <source>By default, perl-5.6.0 (or later) is compiled as a 32-bit application with largefile and long-long support.</source>
          <target state="translated">默认情况下,perl-5.6.0(或更高版本)是作为一个32位应用程序编译的,支持大文件和长文件。</target>
        </trans-unit>
        <trans-unit id="c1d7d31b73907dcda6cd3ad0857aee8de05a33a3" translate="yes" xml:space="preserve">
          <source>By default, running out of memory is an untrappable, fatal error. However, if suitably built, Perl can use the contents of &lt;code&gt;$^M&lt;/code&gt; as an emergency memory pool after &lt;code&gt;&lt;a href=&quot;functions/die&quot;&gt;die()&lt;/a&gt;&lt;/code&gt;ing. Suppose that your Perl were compiled with &lt;code&gt;-DPERL_EMERGENCY_SBRK&lt;/code&gt; and used Perl's malloc. Then</source>
          <target state="translated">默认情况下，内存不足是无法陷阱的致命错误。但是，如果构建得当，Perl可以在 &lt;code&gt;&lt;a href=&quot;functions/die&quot;&gt;die()&lt;/a&gt;&lt;/code&gt; 之后使用 &lt;code&gt;$^M&lt;/code&gt; 的内容作为紧急存储池。假设您的Perl是使用 &lt;code&gt;-DPERL_EMERGENCY_SBRK&lt;/code&gt; 编译的，并且使用了Perl的malloc。然后</target>
        </trans-unit>
        <trans-unit id="6367e8a3e44bc0b4aac043c742b1314b3e53105a" translate="yes" xml:space="preserve">
          <source>By default, running out of memory is an untrappable, fatal error. However, if suitably built, Perl can use the contents of &lt;code&gt;$^M&lt;/code&gt; as an emergency memory pool after &lt;code&gt;die()&lt;/code&gt;ing. Suppose that your Perl were compiled with &lt;code&gt;-DPERL_EMERGENCY_SBRK&lt;/code&gt; and used Perl's malloc. Then</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4190ef76a4299cfe3e352f5cfeb999b38851b5f5" translate="yes" xml:space="preserve">
          <source>By default, section 1 will be used unless the file ends in &lt;code&gt;.pm&lt;/code&gt; in which case section 3 will be selected.</source>
          <target state="translated">默认情况下，将使用第1节，除非文件以 &lt;code&gt;.pm&lt;/code&gt; 结尾，在这种情况下将选择第3节。</target>
        </trans-unit>
        <trans-unit id="8d9133733d7f7dcd376ecd3cd224e4dddd523774" translate="yes" xml:space="preserve">
          <source>By default, section 1 will be used unless the file ends in &lt;code&gt;.pm&lt;/code&gt;, in which case section 3 will be selected.</source>
          <target state="translated">默认情况下，除非文件以 &lt;code&gt;.pm&lt;/code&gt; 结尾，否则将使用第1节，在这种情况下，将选择第3节。</target>
        </trans-unit>
        <trans-unit id="961a8c7a3d78a4ba111b92d292c8ae5c80f7c1a1" translate="yes" xml:space="preserve">
          <source>By default, semaphores behave like locks, letting only one thread &lt;code&gt;down()&lt;/code&gt; them at a time. However, there are other uses for semaphores.</source>
          <target state="translated">默认情况下，信号量的行为类似于锁，一次只允许一个线程 &lt;code&gt;down()&lt;/code&gt; 。但是，信号量还有其他用途。</target>
        </trans-unit>
        <trans-unit id="fed769cd67eb1346af1f13055d0984c3c18e8ed3" translate="yes" xml:space="preserve">
          <source>By default, strings whose weights are equal should be equal, even though their code points are not equal. Completely ignorable characters are ignored.</source>
          <target state="translated">默认情况下,权重相等的字符串应该是相等的,即使它们的代码点不相等。完全可忽略的字符会被忽略。</target>
        </trans-unit>
        <trans-unit id="4a36fa72282c7563bf7e21fc24cf3c3c9ea04d1b" translate="yes" xml:space="preserve">
          <source>By default, the</source>
          <target state="translated">默认情况下</target>
        </trans-unit>
        <trans-unit id="56921ea3749d0afb26fde19f34e5cd700c2dac28" translate="yes" xml:space="preserve">
          <source>By default, the &quot;^&quot; character is guaranteed to match only the beginning of the string, the &quot;$&quot; character only the end (or before the newline at the end), and Perl does certain optimizations with the assumption that the string contains only one line. Embedded newlines will not be matched by &quot;^&quot; or &quot;$&quot;. You may, however, wish to treat a string as a multi-line buffer, such that the &quot;^&quot; will match after any newline within the string (except if the newline is the last character in the string), and &quot;$&quot; will match before any newline. At the cost of a little more overhead, you can do this by using the /m modifier on the pattern match operator. (Older programs did this by setting &lt;code&gt;$*&lt;/code&gt; , but this option was removed in perl 5.10.)</source>
          <target state="translated">默认情况下，保证&amp;ldquo; ^&amp;rdquo;字符仅匹配字符串的开头，&amp;ldquo; $&amp;rdquo;字符仅匹配结尾（或末尾的换行符），并且Perl在假定字符串仅包含字符串的情况下进行了某些优化。一条线。嵌入的换行符不会与&amp;ldquo; ^&amp;rdquo;或&amp;ldquo; $&amp;rdquo;匹配。但是，您可能希望将字符串视为多行缓冲区，以使&amp;ldquo; ^&amp;rdquo;将在字符串中的任何换行符之后匹配（除非换行符是字符串中的最后一个字符），而&amp;ldquo; $&amp;rdquo;将在任何换行符之前匹配。您可以通过花费一些额外开销来实现，方法是使用模式匹配运算符上的/ m修饰符。 （较早的程序通过设置 &lt;code&gt;$*&lt;/code&gt; 完成此操作，但是此选项在perl 5.10中已删除。）</target>
        </trans-unit>
        <trans-unit id="346e0669eeb7d260c287822e0f04240653bff2d8" translate="yes" xml:space="preserve">
          <source>By default, the &lt;code&gt;&quot;^&quot;&lt;/code&gt; character is guaranteed to match only the beginning of the string, the &lt;code&gt;&quot;$&quot;&lt;/code&gt; character only the end (or before the newline at the end), and Perl does certain optimizations with the assumption that the string contains only one line. Embedded newlines will not be matched by &lt;code&gt;&quot;^&quot;&lt;/code&gt; or &lt;code&gt;&quot;$&quot;&lt;/code&gt;. You may, however, wish to treat a string as a multi-line buffer, such that the &lt;code&gt;&quot;^&quot;&lt;/code&gt; will match after any newline within the string (except if the newline is the last character in the string), and &lt;code&gt;&quot;$&quot;&lt;/code&gt; will match before any newline. At the cost of a little more overhead, you can do this by using the &lt;a href=&quot;#%2Fm&quot;&gt;&quot;&lt;code&gt;/m&lt;/code&gt;&quot;&lt;/a&gt; modifier on the pattern match operator. (Older programs did this by setting &lt;code&gt;$*&lt;/code&gt;, but this option was removed in perl 5.10.)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="492fc906b55f1b406ab710691a332ebe623491a7" translate="yes" xml:space="preserve">
          <source>By default, the check function is &lt;a href=&quot;#ck_entersub_args_proto_or_list&quot;&gt;Perl_ck_entersub_args_proto_or_list&lt;/a&gt;, the SV parameter is &lt;code&gt;cv&lt;/code&gt; itself, and the &lt;code&gt;CALL_CHECKER_REQUIRE_GV&lt;/code&gt; flag is clear. This implements standard prototype processing. It can be changed, for a particular subroutine, by &lt;a href=&quot;#cv_set_call_checker_flags&quot;&gt;&quot;cv_set_call_checker_flags&quot;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f75c5443daebd3a0b513a176d080239244e192dd" translate="yes" xml:space="preserve">
          <source>By default, the exception derived from the operand LIST is stringified and printed to &lt;code&gt;STDERR&lt;/code&gt;. This behaviour can be altered by installing a &lt;a href=&quot;perlvar#%25SIG&quot;&gt;&lt;code&gt;$SIG{__WARN__}&lt;/code&gt;&lt;/a&gt; handler. If there is such a handler then no message is automatically printed; it is the handler's responsibility to deal with the exception as it sees fit (like, for instance, converting it into a &lt;a href=&quot;#die-LIST&quot;&gt;&lt;code&gt;die&lt;/code&gt;&lt;/a&gt;). Most handlers must therefore arrange to actually display the warnings that they are not prepared to deal with, by calling &lt;a href=&quot;#warn-LIST&quot;&gt;&lt;code&gt;warn&lt;/code&gt;&lt;/a&gt; again in the handler. Note that this is quite safe and will not produce an endless loop, since &lt;code&gt;__WARN__&lt;/code&gt; hooks are not called from inside one.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a1a870bf9d52ad0a2c1a90186336492c4ae0aed3" translate="yes" xml:space="preserve">
          <source>By default, the function is &lt;a href=&quot;#ck_entersub_args_proto_or_list&quot;&gt;Perl_ck_entersub_args_proto_or_list&lt;/a&gt;, and the SV parameter is</source>
          <target state="translated">默认情况下，该函数为&lt;a href=&quot;#ck_entersub_args_proto_or_list&quot;&gt;Perl_ck_entersub_args_proto_or_list&lt;/a&gt;，并且SV参数为</target>
        </trans-unit>
        <trans-unit id="beeed48a59ea18c1b18a6cfda68d25973cd743b6" translate="yes" xml:space="preserve">
          <source>By default, the installed filter only filters up to a line consisting of one of the three standard source &quot;terminators&quot;:</source>
          <target state="translated">默认情况下,安装的过滤器最多只能过滤由三个标准源 &quot;终结符 &quot;之一组成的行。</target>
        </trans-unit>
        <trans-unit id="e79e890007f8b504a54617ddbf05ff93a90734ba" translate="yes" xml:space="preserve">
          <source>By default, the only variables shared with compartments are the &quot;underscore&quot; variables $_ and @_ (and, technically, the less frequently used %_, the _ filehandle and so on). This is because otherwise perl operators which default to $_ will not work and neither will the assignment of arguments to @_ on subroutine entry.</source>
          <target state="translated">默认情况下,与隔间共享的变量只有 &quot;下划线 &quot;变量$_和@_(技术上,还有不常用的%_、_文件柄等)。这是因为,否则默认为$_的perl运算符将无法使用,子程序进入时将参数赋给@_也无法使用。</target>
        </trans-unit>
        <trans-unit id="4eebbb2dfa043331a8ced51ef018a956d406180e" translate="yes" xml:space="preserve">
          <source>By default, the pathnames are sorted in ascending ASCII order; this flag prevents that sorting (speeding up bsd_glob()).</source>
          <target state="translated">默认情况下,路径名是按照ASCII码升序排序的;这个标志可以防止这种排序方式(加快bsd_glob()的速度)。</target>
        </trans-unit>
        <trans-unit id="cd52d7b7234ea4b8c1ee0272333575fae9c9ac61" translate="yes" xml:space="preserve">
          <source>By default, the string appended is assumed to be valid UTF-8 if the SV has the UTF-8 status set, and a string of bytes otherwise. One can force the appended string to be interpreted as UTF-8 by supplying the &lt;code&gt;SV_CATUTF8&lt;/code&gt; flag, and as bytes by supplying the &lt;code&gt;SV_CATBYTES&lt;/code&gt; flag; the SV or the string appended will be upgraded to UTF-8 if necessary.</source>
          <target state="translated">默认情况下，如果SV设置了UTF-8状态，则假定附加的字符串为有效的UTF-8，否则假定为字符串。人可以强迫所附字符串通过提供被解释为UTF-8 &lt;code&gt;SV_CATUTF8&lt;/code&gt; 标志，并且如通过提供字节 &lt;code&gt;SV_CATBYTES&lt;/code&gt; 标志; 如有必要，SV或附加的字符串将升级为UTF-8。</target>
        </trans-unit>
        <trans-unit id="3c44da1fa54feaff13f3357da78bc5d189559610" translate="yes" xml:space="preserve">
          <source>By default, there is a fundamental asymmetry in Perl's unicode model: implicit upgrading from byte-strings to unicode-strings assumes that they were encoded in</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8d41f8d85e7a977c1704e0b6aa0d1e3446f200e7" translate="yes" xml:space="preserve">
          <source>By default, this module creates an &lt;code&gt;::I18N&lt;/code&gt; subclass under the caller's package (or the package specified by &lt;code&gt;Class&lt;/code&gt; ), and stores lexicon data in its subclasses. You can assign a name other than &lt;code&gt;I18N&lt;/code&gt; via this option.</source>
          <target state="translated">默认情况下，此模块在调用者的包（或 &lt;code&gt;Class&lt;/code&gt; 指定的包）下创建 &lt;code&gt;::I18N&lt;/code&gt; 子类，并将词典数据存储在其子类中。您可以通过此选项分配 &lt;code&gt;I18N&lt;/code&gt; 以外的名称。</target>
        </trans-unit>
        <trans-unit id="39d93a161b8e818beee11c7a4375f2ab33e763db" translate="yes" xml:space="preserve">
          <source>By default, this module creates an &lt;code&gt;::I18N&lt;/code&gt; subclass under the caller's package (or the package specified by &lt;code&gt;Class&lt;/code&gt;), and stores lexicon data in its subclasses. You can assign a name other than &lt;code&gt;I18N&lt;/code&gt; via this option.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5949c007c079cc7a10f34781de30c09a225b6eca" translate="yes" xml:space="preserve">
          <source>By default, this module exports a single function, &lt;code&gt;loc&lt;/code&gt; , into its caller's namespace. You can set it to another name, or set it to an empty string to disable exporting.</source>
          <target state="translated">默认情况下，此模块将单个函数 &lt;code&gt;loc&lt;/code&gt; 导出到其调用者的名称空间。您可以将其设置为其他名称，或将其设置为空字符串以禁用导出。</target>
        </trans-unit>
        <trans-unit id="712a00a33c605be8604c3834cdbcfab88be256ac" translate="yes" xml:space="preserve">
          <source>By default, this module exports a single function, &lt;code&gt;loc&lt;/code&gt;, into its caller's namespace. You can set it to another name, or set it to an empty string to disable exporting.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8ad4115958f94effa9746305a9b0cb4cffc6bd7c" translate="yes" xml:space="preserve">
          <source>By default, this module uses the &lt;code&gt;maketext&lt;/code&gt; style of &lt;code&gt;[_1]&lt;/code&gt; and &lt;code&gt;[quant,_1]&lt;/code&gt; for interpolation. Alternatively, you can specify the &lt;code&gt;gettext&lt;/code&gt; style, which uses &lt;code&gt;%1&lt;/code&gt; and &lt;code&gt;%quant(%1)&lt;/code&gt; for interpolation.</source>
          <target state="translated">默认情况下，此模块使用 &lt;code&gt;[_1]&lt;/code&gt; 和 &lt;code&gt;[quant,_1]&lt;/code&gt; 的 &lt;code&gt;maketext&lt;/code&gt; 样式进行插值。或者，您可以指定 &lt;code&gt;gettext&lt;/code&gt; 样式，该样式使用 &lt;code&gt;%1&lt;/code&gt; 和 &lt;code&gt;%quant(%1)&lt;/code&gt; 进行插值。</target>
        </trans-unit>
        <trans-unit id="252a3c80bb1e3517a1330d8a71715773619ce9ac" translate="yes" xml:space="preserve">
          <source>By default, variables are private to each thread, and each newly created thread gets a private copy of each existing variable. This module allows you to share variables across different threads (and pseudo-forks on Win32). It is used together with the &lt;a href=&quot;../threads&quot;&gt;threads&lt;/a&gt; module.</source>
          <target state="translated">默认情况下，变量是每个线程专用的，每个新创建的线程都将获取每个现有变量的专用副本。该模块允许您在不同线程（和Win32上的伪叉）之间共享变量。它与&lt;a href=&quot;../threads&quot;&gt;线程&lt;/a&gt;模块一起使用。</target>
        </trans-unit>
        <trans-unit id="9f2757a28f882e9d7437545b7f1bd8e345152206" translate="yes" xml:space="preserve">
          <source>By default, variables are private to each thread, and each newly created thread gets a private copy of each existing variable. This module allows you to share variables across different threads (and pseudo-forks on Win32). It is used together with the &lt;a href=&quot;threads&quot;&gt;threads&lt;/a&gt; module.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6c30bfb71acf5bab76a39a204b8f603e13c705d5" translate="yes" xml:space="preserve">
          <source>By default, warnings are output to STDERR</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="08d154b38941f09ce6557f839a81a8eafedac239" translate="yes" xml:space="preserve">
          <source>By default, when a new interpreter is created as a copy of an existing one (eg via &lt;code&gt;threads-&amp;gt;create()&lt;/code&gt; ), both interpreters share the same physical my_cxt_t structure. Calling &lt;code&gt;MY_CXT_CLONE&lt;/code&gt; (typically via the package's &lt;code&gt;CLONE()&lt;/code&gt; function), causes a byte-for-byte copy of the structure to be taken, and any future dMY_CXT will cause the copy to be accessed instead.</source>
          <target state="translated">默认情况下，当将新解释器创建为现有解释器的副本时（例如，通过 &lt;code&gt;threads-&amp;gt;create()&lt;/code&gt; ），两个解释器共享相同的物理my_cxt_t结构。调用 &lt;code&gt;MY_CXT_CLONE&lt;/code&gt; （通常通过程序包的 &lt;code&gt;CLONE()&lt;/code&gt; 函数）将导致结构的逐字节复制，而以后的任何dMY_CXT都会导致对该复制进行访问。</target>
        </trans-unit>
        <trans-unit id="8b319a76707aa4f1f8b1be359984e02b7255e6a0" translate="yes" xml:space="preserve">
          <source>By default, when a new interpreter is created as a copy of an existing one (eg via &lt;code&gt;threads-&amp;gt;create()&lt;/code&gt;), both interpreters share the same physical my_cxt_t structure. Calling &lt;code&gt;MY_CXT_CLONE&lt;/code&gt; (typically via the package's &lt;code&gt;CLONE()&lt;/code&gt; function), causes a byte-for-byte copy of the structure to be taken, and any future dMY_CXT will cause the copy to be accessed instead.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dffafaef14fbbfda71aa3c0226b07030f61fdd39" translate="yes" xml:space="preserve">
          <source>By default, your pattern is matched case-insensitively, as if &lt;code&gt;/i&lt;/code&gt; had been specified. You can change this by saying &lt;code&gt;(?-i)&lt;/code&gt; in your pattern.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1f023b47e4b490e5f3861a02400fb5ce0693a9fc" translate="yes" xml:space="preserve">
          <source>By default, your program starts in package &lt;code&gt;main&lt;/code&gt; , so you will always be in some package.</source>
          <target state="translated">默认情况下，您的程序从包 &lt;code&gt;main&lt;/code&gt; 开始，因此您将始终处于某个包中。</target>
        </trans-unit>
        <trans-unit id="e24e192b6da98e496fcb6606ff2b3e72e0f05fea" translate="yes" xml:space="preserve">
          <source>By default, your program starts in package &lt;code&gt;main&lt;/code&gt;, so you will always be in some package.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cc16f7e5e668d806fbde2fd531d2629a195bfd9c" translate="yes" xml:space="preserve">
          <source>By explicitly requiring a minimum Perl version number for your program, with the &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; VERSION&lt;/code&gt; construct. That is,</source>
          <target state="translated">通过 &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; VERSION&lt;/code&gt; 构造为程序明确要求最低Perl版本号。那是，</target>
        </trans-unit>
        <trans-unit id="d7932496508fde98a4b2f745f7c16a8938bd5c70" translate="yes" xml:space="preserve">
          <source>By explicitly requiring a minimum Perl version number for your program, with the &lt;code&gt;use VERSION&lt;/code&gt; construct. That is,</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b496b26c66a41bb8b28e0a2591cb8dda23a4871c" translate="yes" xml:space="preserve">
          <source>By far the easiest way to build Perl for OS/400 is to use the PASE (Portable Application Solutions Environment), for more information see &lt;a href=&quot;http://www.iseries.ibm.com/developer/factory/pase/index.html&quot;&gt;http://www.iseries.ibm.com/developer/factory/pase/index.html&lt;/a&gt; This environment allows one to use AIX APIs while programming, and it provides a runtime that allows AIX binaries to execute directly on the PowerPC iSeries.</source>
          <target state="translated">到目前为止，为OS / 400构建Perl的最简单方法是使用PASE（便携式应用程序解决方案环境），有关更多信息，请参见&lt;a href=&quot;http://www.iseries.ibm.com/developer/factory/pase/index.html&quot;&gt;http://www.iseries.ibm.com/developer/factory/pase/index.html&lt;/a&gt;。环境允许在编程时使用AIX API，并且它提供了允许AIX二进制文件直接在PowerPC iSeries上执行的运行时。</target>
        </trans-unit>
        <trans-unit id="90b268ad6928ce9b139ce0bfe20e0ab522c5a230" translate="yes" xml:space="preserve">
          <source>By far the most common reason is that the locale has characters in it that are represented by more than one byte. The only such locales that Perl can handle are the UTF-8 locales. Most likely the specified locale is a non-UTF-8 one for an East Asian language such as Chinese or Japanese. If the locale is a superset of ASCII, the ASCII portion of it may work in Perl.</source>
          <target state="translated">到目前为止,最常见的原因是locale中的字符由多个字节表示。Perl能处理的唯一的这种locale是UTF-8的locale。很可能指定的locale是一个非UTF-8的东亚语言,比如中文或日文。如果这个locale是ASCII码的超集,那么它的ASCII码部分就可以在Perl中使用。</target>
        </trans-unit>
        <trans-unit id="5be86ce403211ab50be3b7ce1f4f87ec5b6bd179" translate="yes" xml:space="preserve">
          <source>By first converting the FOO-encoded byte string to a text string, and then the text string to a BAR-encoded byte string:</source>
          <target state="translated">通过先将FOO编码的字节串转换成文本串,再将文本串转换成BAR编码的字节串。</target>
        </trans-unit>
        <trans-unit id="3456e5ab0f472be26a41623d10e3cc8ff953c769" translate="yes" xml:space="preserve">
          <source>By including Exporter in your &lt;code&gt;@ISA&lt;/code&gt; you inherit an Exporter's import() method but you also inherit several other helper methods which you probably don't want. To avoid this you can do:</source>
          <target state="translated">通过将Exporter包含在 &lt;code&gt;@ISA&lt;/code&gt; 中,您可以继承Exporter的import（）方法，但也可以继承其他一些可能不需要的帮助器方法。为避免这种情况，您可以执行以下操作：</target>
        </trans-unit>
        <trans-unit id="583ac2704011a6bdba33e0ae7763c40858b78828" translate="yes" xml:space="preserve">
          <source>By passing a reference to a hash you may set the configuration values. This works only for values that a marked with a &lt;code&gt;RW&lt;/code&gt; above, anything else is read-only.</source>
          <target state="translated">通过将引用传递给哈希，可以设置配置值。这仅适用于标有 &lt;code&gt;RW&lt;/code&gt; 的值，其他任何值都是只读的。</target>
        </trans-unit>
        <trans-unit id="ffc61b70d37b8dffa55761a98d33cd6f2e713e8c" translate="yes" xml:space="preserve">
          <source>By placing &lt;code&gt;-register&lt;/code&gt; in the import list, &lt;a href=&quot;IO::Socket&quot;&gt;IO::Socket&lt;/a&gt; uses &lt;code&gt;IO::Socket::IP&lt;/code&gt; rather than &lt;code&gt;IO::Socket::INET&lt;/code&gt; as the class that handles &lt;code&gt;PF_INET&lt;/code&gt;. &lt;code&gt;IO::Socket&lt;/code&gt; will also use &lt;code&gt;IO::Socket::IP&lt;/code&gt; rather than &lt;code&gt;IO::Socket::INET6&lt;/code&gt; to handle &lt;code&gt;PF_INET6&lt;/code&gt;, provided that the &lt;code&gt;AF_INET6&lt;/code&gt; constant is available.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e30293ddc7efc1598420ad5a32ac1415cea4ba8a" translate="yes" xml:space="preserve">
          <source>By running &quot;&lt;code&gt;make test&lt;/code&gt; &quot;, you ensure that your Mytest.t script runs and uses the correct version of your extension. If you have many test cases, save your test files in the &quot;t&quot; directory and use the suffix &quot;.t&quot;. When you run &quot;&lt;code&gt;make test&lt;/code&gt; &quot;, all of these test files will be executed.</source>
          <target state="translated">通过运行&amp;ldquo; &lt;code&gt;make test&lt;/code&gt; &amp;rdquo;，可以确保Mytest.t脚本运行并使用正确的扩展版本。如果您有很多测试用例，请将测试文件保存在&amp;ldquo; t&amp;rdquo;目录中，并使用后缀&amp;ldquo; .t&amp;rdquo;。当您运行&amp;ldquo; &lt;code&gt;make test&lt;/code&gt; &amp;rdquo;时，所有这些测试文件将被执行。</target>
        </trans-unit>
        <trans-unit id="b012b405c2fff7730ead4df76d693c2db095ab5d" translate="yes" xml:space="preserve">
          <source>By running &quot;&lt;code&gt;make test&lt;/code&gt;&quot;, you ensure that your Mytest.t script runs and uses the correct version of your extension. If you have many test cases, save your test files in the &quot;t&quot; directory and use the suffix &quot;.t&quot;. When you run &quot;&lt;code&gt;make test&lt;/code&gt;&quot;, all of these test files will be executed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="49d2ff2073c166abecd08a90ef566dc2e86a7f38" translate="yes" xml:space="preserve">
          <source>By setting and then using &lt;code&gt;$var&lt;/code&gt; in this way relieves you from having to worry about exactly which numbered set of parentheses they are.</source>
          <target state="translated">通过以这种方式设置然后使用 &lt;code&gt;$var&lt;/code&gt; ，可以使您不必担心它们到底是哪个编号的括号。</target>
        </trans-unit>
        <trans-unit id="265fb107c25a0f703500d08dbe4e8f2787903896" translate="yes" xml:space="preserve">
          <source>By setting it to an empty string you can generate a Makefile that prints all commands. Mainly used in debugging MakeMaker itself.</source>
          <target state="translated">通过设置为空字符串,可以生成一个打印所有命令的Makefile。主要用于调试MakeMaker本身。</target>
        </trans-unit>
        <trans-unit id="619bd2bab7e99a9933fcadbbac647cbc3917a48b" translate="yes" xml:space="preserve">
          <source>By specifying &lt;code&gt;:loose&lt;/code&gt; , Unicode's &lt;a href=&quot;http://search.cpan.org/perldoc/http:#%2fwww.unicode.org%2freports%2ftr44%23Matching_Rules&quot;&gt;loose character name matching&lt;/a&gt; rules are selected instead of the strict exact match used otherwise. That means that</source>
          <target state="translated">通过指定 &lt;code&gt;:loose&lt;/code&gt; ，将选择Unicode的&lt;a href=&quot;http://search.cpan.org/perldoc/http:#%2fwww.unicode.org%2freports%2ftr44%23Matching_Rules&quot;&gt;宽松字符名称匹配&lt;/a&gt;规则，而不是其他情况下使用的严格精确匹配。那意味着</target>
        </trans-unit>
        <trans-unit id="409281df47ba60298eba1ac37bc10f01f4eb2677" translate="yes" xml:space="preserve">
          <source>By specifying &lt;code&gt;:loose&lt;/code&gt;, Unicode's &lt;a href=&quot;http://www.unicode.org/reports/tr44#Matching_Rules&quot;&gt;loose character name matching&lt;/a&gt; rules are selected instead of the strict exact match used otherwise. That means that</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4173811273acdfc3b518c06a8c9add11d80be073" translate="yes" xml:space="preserve">
          <source>By subclassing, you may end up overriding undocumented methods. That's not a bad thing per se, but be forewarned that undocumented methods may change without warning from one release to the next - we cannot guarantee backwards compatibility. If any</source>
          <target state="translated">通过子类化,你可能最终会覆盖未记录的方法。这本身并不是一件坏事,但要注意的是,未记录的方法可能会在没有警告的情况下从一个版本改变到下一个版本--我们不能保证向后兼容。如果有任何</target>
        </trans-unit>
        <trans-unit id="7963af28b4afe4fecf3771e6be636d3a37450528" translate="yes" xml:space="preserve">
          <source>By the time Perl 5 rolled around, we were already stuck with this design: Hash values must be scalars. The solution to this is references.</source>
          <target state="translated">当Perl 5推出的时候,我们已经被这种设计所困。哈希值必须是标量值 解决这个问题的办法就是引用。</target>
        </trans-unit>
        <trans-unit id="92f8d8ab799211d118cdd3b80bc6282c36c18e07" translate="yes" xml:space="preserve">
          <source>By the time each of the &lt;code&gt;SaveSub1&lt;/code&gt; statements above has been executed, the SV*s which corresponded to the parameters will no longer exist. Expect an error message from Perl of the form</source>
          <target state="translated">到上述每个 &lt;code&gt;SaveSub1&lt;/code&gt; 语句执行完毕时，与参数相对应的SV *将不再存在。期待来自Perl的错误消息，形式如下</target>
        </trans-unit>
        <trans-unit id="334c1508a5d779cb0c1040092154fbe0583ab19f" translate="yes" xml:space="preserve">
          <source>By the time the comp callback is called, some of these flags have already had effect (noted below where applicable). However most of their effect occurs after the comp callback has run, in routines that read the &lt;code&gt;rx-&amp;gt;extflags&lt;/code&gt; field which it populates.</source>
          <target state="translated">到comp回调被调用时，这些标志中的某些标志已经生效（在适用的地方，在下面注明）。但是，它们的大多数影响发生在comp回调运行之后，在读取其所填充的 &lt;code&gt;rx-&amp;gt;extflags&lt;/code&gt; 字段的例程中。</target>
        </trans-unit>
        <trans-unit id="72795a79e31e2518cbd921d2bc0697a1bdbd6144" translate="yes" xml:space="preserve">
          <source>By tuning the stack size to more accurately reflect your application's needs, you may significantly reduce your application's memory usage, and increase the number of simultaneously running threads.</source>
          <target state="translated">通过调整堆栈大小以更准确地反映应用程序的需求,您可能会显著降低应用程序的内存使用率,并增加同时运行的线程数量。</target>
        </trans-unit>
        <trans-unit id="bd379fb72b0b513ca230e24dca7f155e46117288" translate="yes" xml:space="preserve">
          <source>By using &lt;code&gt;NEXT::ACTUAL&lt;/code&gt; , if there is no other &lt;code&gt;AUTOLOAD&lt;/code&gt; to handle the method call, an exception will be thrown (as usually happens in the absence of a suitable &lt;code&gt;AUTOLOAD&lt;/code&gt; ).</source>
          <target state="translated">通过使用 &lt;code&gt;NEXT::ACTUAL&lt;/code&gt; ，如果没有其他 &lt;code&gt;AUTOLOAD&lt;/code&gt; 来处理方法调用，则将引发异常（通常在没有合适的 &lt;code&gt;AUTOLOAD&lt;/code&gt; 的情况下发生）。</target>
        </trans-unit>
        <trans-unit id="cc2a57a1ff280502a7e9bf05c718df68c27f204e" translate="yes" xml:space="preserve">
          <source>By using &lt;code&gt;NEXT::ACTUAL&lt;/code&gt;, if there is no other &lt;code&gt;AUTOLOAD&lt;/code&gt; to handle the method call, an exception will be thrown (as usually happens in the absence of a suitable &lt;code&gt;AUTOLOAD&lt;/code&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f260eb29b6f0673bfdb6b907d310d5d3920f6717" translate="yes" xml:space="preserve">
          <source>By using the &lt;code&gt;-E&lt;/code&gt; switch on the Perl command-line instead of &lt;code&gt;-e&lt;/code&gt; . That will enable the feature bundle for that version of Perl in the main compilation unit (that is, the one-liner that follows &lt;code&gt;-E&lt;/code&gt; ).</source>
          <target state="translated">通过在Perl命令行上使用 &lt;code&gt;-E&lt;/code&gt; 开关而不是 &lt;code&gt;-e&lt;/code&gt; 。这将在主要编译单元（即， &lt;code&gt;-E&lt;/code&gt; 后面的单行代码）中启用该版本的Perl的功能包。</target>
        </trans-unit>
        <trans-unit id="23fbc447da7d6e302f0723443cc59549d355126a" translate="yes" xml:space="preserve">
          <source>By using the &lt;code&gt;-E&lt;/code&gt; switch on the Perl command-line instead of &lt;code&gt;-e&lt;/code&gt;. That will enable the feature bundle for that version of Perl in the main compilation unit (that is, the one-liner that follows &lt;code&gt;-E&lt;/code&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9dfef463e4e713cbb716245b6be6a4856999a34d" translate="yes" xml:space="preserve">
          <source>By using the WWW interface you can ask the Upload Server to mirror your modules from your ftp or WWW site into your own directory on CPAN!</source>
          <target state="translated">通过使用WWW接口,您可以要求上传服务器将您的模块从您的ftp或WWW站点镜像到您自己的CPAN目录中!</target>
        </trans-unit>
        <trans-unit id="4f37c6bc860992a71dc03ba0a6eb8583644d0eac" translate="yes" xml:space="preserve">
          <source>By using the backslash operator on a variable, subroutine, or value. (This works much like the &amp;amp; (address-of) operator in C.) This typically creates</source>
          <target state="translated">通过对变量，子例程或值使用反斜杠运算符。（这很像C中的＆（地址）运算符。）这通常会创建</target>
        </trans-unit>
        <trans-unit id="4fea865bf2bc7c769f8247d0ffedba42a3ee67f2" translate="yes" xml:space="preserve">
          <source>By way of demonstration, we present below a laborious listing resulting from setting your &lt;code&gt;PERLDB_OPTS&lt;/code&gt; environment variable to the value &lt;code&gt;f=n N&lt;/code&gt; , and running</source>
          <target state="translated">作为演示，我们在下面列出了一个麻烦的清单，该清单是将您的 &lt;code&gt;PERLDB_OPTS&lt;/code&gt; 环境变量设置为值 &lt;code&gt;f=n N&lt;/code&gt; 并运行的结果</target>
        </trans-unit>
        <trans-unit id="762b8206672bed376e88659055a2184381b41345" translate="yes" xml:space="preserve">
          <source>By way of demonstration, we present below a laborious listing resulting from setting your &lt;code&gt;PERLDB_OPTS&lt;/code&gt; environment variable to the value &lt;code&gt;f=n N&lt;/code&gt;, and running</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="05ff92e836fe1c104b327e3d41d6f42c1c2f68cf" translate="yes" xml:space="preserve">
          <source>By-name interface to Perl's built-in getgr*() functions</source>
          <target state="translated">对Perl内置的getgr*()函数的按名接口。</target>
        </trans-unit>
        <trans-unit id="8701f0c6760ad255897a2adbc246d9e8608c8d7a" translate="yes" xml:space="preserve">
          <source>By-name interface to Perl's built-in gethost*() functions</source>
          <target state="translated">对Perl的内置gethost*()函数的按名接口。</target>
        </trans-unit>
        <trans-unit id="8edbac978dbd72904307e2cc9662b26a10b3bd66" translate="yes" xml:space="preserve">
          <source>By-name interface to Perl's built-in getnet*() functions</source>
          <target state="translated">对Perl的内置getnet*()函数的按名接口。</target>
        </trans-unit>
        <trans-unit id="905cb97e8ed297dc43dcd08d2a9db1d9958b4ddc" translate="yes" xml:space="preserve">
          <source>By-name interface to Perl's built-in getproto*() functions</source>
          <target state="translated">对Perl内置的getproto*()函数的按名接口。</target>
        </trans-unit>
        <trans-unit id="7980958e534d59fc2ef012727304a32f6778bc74" translate="yes" xml:space="preserve">
          <source>By-name interface to Perl's built-in getpw*() functions</source>
          <target state="translated">对Perl内置的getpw*()函数的按名接口。</target>
        </trans-unit>
        <trans-unit id="8c13e6c841eee178cc9c90b3ec31731fb7b6e9d6" translate="yes" xml:space="preserve">
          <source>By-name interface to Perl's built-in getserv*() functions</source>
          <target state="translated">对Perl内置的geterv*()函数的按名接口。</target>
        </trans-unit>
        <trans-unit id="10bacc859a37b5cb2457a9867f2de200be21a6bd" translate="yes" xml:space="preserve">
          <source>By-name interface to Perl's built-in gmtime() function</source>
          <target state="translated">对Perl内置的gmtime()函数的按名接口。</target>
        </trans-unit>
        <trans-unit id="827cbeee072a43490f322081b175fcaabf1286c6" translate="yes" xml:space="preserve">
          <source>By-name interface to Perl's built-in localtime() function</source>
          <target state="translated">为Perl内置的localtime()函数提供按名称命名的接口。</target>
        </trans-unit>
        <trans-unit id="34a637e08658f8356d26a5052ced9a5575ccaa48" translate="yes" xml:space="preserve">
          <source>By-name interface to Perl's built-in stat() functions</source>
          <target state="translated">对Perl内置的stat()函数的按名接口。</target>
        </trans-unit>
        <trans-unit id="00a7465e9ae8fc45cdd85380909fc57080f23c9d" translate="yes" xml:space="preserve">
          <source>Bypass shell script and produce qualifiers for CC directly (but warn user if a shell script for this extension exists). Fold multiple /Defines into one, since some C compilers pay attention to only one instance of this qualifier on the command line.</source>
          <target state="translated">绕过shell脚本,直接生成CC的限定符(但如果存在该扩展的shell脚本,则警告用户)。将多个/定义折叠成一个,因为一些C编译器只注意命令行上的一个限定符实例。</target>
        </trans-unit>
        <trans-unit id="9f9d63573452a4bd55326feb5fe5283989ad472d" translate="yes" xml:space="preserve">
          <source>Byte and Character Semantics</source>
          <target state="translated">字节和字符语义</target>
        </trans-unit>
        <trans-unit id="1e6a3eac8ab6b01ca95c7c44eb60befc42854a50" translate="yes" xml:space="preserve">
          <source>Byte order is not compatible</source>
          <target state="translated">字节顺序不兼容</target>
        </trans-unit>
        <trans-unit id="635424c9374984012107c0dd02fd2041e999753a" translate="yes" xml:space="preserve">
          <source>Byte-order modifiers</source>
          <target state="translated">字节序修改器</target>
        </trans-unit>
        <trans-unit id="b0cb8dbe3d4ffe27cb86b68da21fae1475b9d341" translate="yes" xml:space="preserve">
          <source>Byteorders &lt;code&gt;&quot;1234&quot;&lt;/code&gt; and &lt;code&gt;&quot;12345678&quot;&lt;/code&gt; are little-endian; &lt;code&gt;&quot;4321&quot;&lt;/code&gt; and &lt;code&gt;&quot;87654321&quot;&lt;/code&gt; are big-endian. Systems with multiarchitecture binaries will have &lt;code&gt;&quot;ffff&quot;&lt;/code&gt; , signifying that static information doesn't work, one must use runtime probing.</source>
          <target state="translated">字节顺序 &lt;code&gt;&quot;1234&quot;&lt;/code&gt; 和 &lt;code&gt;&quot;12345678&quot;&lt;/code&gt; 为低位字节序； &lt;code&gt;&quot;4321&quot;&lt;/code&gt; 和 &lt;code&gt;&quot;87654321&quot;&lt;/code&gt; 为大端。具有多体系结构二进制文件的系统将具有 &lt;code&gt;&quot;ffff&quot;&lt;/code&gt; ，表示静态信息不起作用，必须使用运行时探测。</target>
        </trans-unit>
        <trans-unit id="1d6d1561fa64dc379f38a143df1bb4bb4ff06800" translate="yes" xml:space="preserve">
          <source>Byteorders &lt;code&gt;&quot;1234&quot;&lt;/code&gt; and &lt;code&gt;&quot;12345678&quot;&lt;/code&gt; are little-endian; &lt;code&gt;&quot;4321&quot;&lt;/code&gt; and &lt;code&gt;&quot;87654321&quot;&lt;/code&gt; are big-endian. Systems with multiarchitecture binaries will have &lt;code&gt;&quot;ffff&quot;&lt;/code&gt;, signifying that static information doesn't work, one must use runtime probing.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3272df7ee0cf3835350319a829ff6f62b6d4f831" translate="yes" xml:space="preserve">
          <source>Bytes in the source text that are not in the ASCII character set will be treated as being part of a literal UTF-8 sequence. This includes most literals such as identifier names, string constants, and constant regular expression patterns.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7bf6c5677e50bfc87de6c08c11b4d2bd476a1535" translate="yes" xml:space="preserve">
          <source>Bytes in the source text that have their high-bit set will be treated as being part of a literal UTF-X sequence. This includes most literals such as identifier names, string constants, and constant regular expression patterns.</source>
          <target state="translated">源文本中具有高位集的字节将被视为字面UTF-X序列的一部分。这包括大多数的文字,如标识符名称、字符串常量和常量正则表达式模式。</target>
        </trans-unit>
        <trans-unit id="ede17bae171156d89f14a0594c04dccf3d5c2c4c" translate="yes" xml:space="preserve">
          <source>Bytes that correspond to ASCII-range code points will have their normal meanings for operators in the string. The treatment of the other bytes depends on if the &lt;a href=&quot;feature#The-%27unicode_strings%27-feature&quot;&gt;&lt;code&gt;'unicode_strings&quot;&lt;/code&gt; feature&lt;/a&gt; is in effect.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="227fdfe21232054f75a3165f51d73d4e5aa71986" translate="yes" xml:space="preserve">
          <source>Bzip2</source>
          <target state="translated">Bzip2</target>
        </trans-unit>
        <trans-unit id="b72c1bfc3d1aa62c14107ddc13ff2beb37ac2390" translate="yes" xml:space="preserve">
          <source>Bzip2 (method 12)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="73bb7f85363a7a7907526dffcd31355e1e334924" translate="yes" xml:space="preserve">
          <source>Bzip2 Compression Options</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8d9aa98649ca48285f49e53319341c39216b042a" translate="yes" xml:space="preserve">
          <source>Bzip2 Resources</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="32096c2e0eff33d844ee6d675407ace18289357d" translate="yes" xml:space="preserve">
          <source>C</source>
          <target state="translated">C</target>
        </trans-unit>
        <trans-unit id="c380132bd13732c2a4492b58e8089f6c672f3148" translate="yes" xml:space="preserve">
          <source>C API</source>
          <target state="translated">C API</target>
        </trans-unit>
        <trans-unit id="129226dbff7ac0a26641ae86a93a3ce3ab2b8aca" translate="yes" xml:space="preserve">
          <source>C Operators Missing From Perl</source>
          <target state="translated">Perl中缺少C操作符</target>
        </trans-unit>
        <trans-unit id="b810a5ecd150e1d0012428a848e5d769f60fea9b" translate="yes" xml:space="preserve">
          <source>C RTL</source>
          <target state="translated">C RTL</target>
        </trans-unit>
        <trans-unit id="17a5304c5884fe220f513c1c918ef7adab324995" translate="yes" xml:space="preserve">
          <source>C backtrace</source>
          <target state="translated">C 回溯</target>
        </trans-unit>
        <trans-unit id="a16bcf14a78c44b6bfc6c36207ff504cb459f2ef" translate="yes" xml:space="preserve">
          <source>C code</source>
          <target state="translated">C码</target>
        </trans-unit>
        <trans-unit id="ebcfbca1a38de887c4893368cd463906e0bbe7b3" translate="yes" xml:space="preserve">
          <source>C code to place between the assignment of value (to a temporary) and the return from the function. This allows you to clear up anything in</source>
          <target state="translated">将C代码放置在值的分配(对一个临时的)和函数的返回之间。这允许你在</target>
        </trans-unit>
        <trans-unit id="538185c3d7f303f06af9140ec0da107705c84d52" translate="yes" xml:space="preserve">
          <source>C code to use before the assignment of the value of the constant. This allows you to use temporary variables to extract a value from part of a &lt;code&gt;struct&lt;/code&gt; and return this as</source>
          <target state="translated">分配值之前使用的C代码常量。这允许您使用临时变量从 &lt;code&gt;struct&lt;/code&gt; 一部分中提取值并将其返回为</target>
        </trans-unit>
        <trans-unit id="0d6da997067e1b793fb43677b57abb70e6d14673" translate="yes" xml:space="preserve">
          <source>C doesn't have a concept of local scope, so perl provides one. We've seen that &lt;code&gt;ENTER&lt;/code&gt; and &lt;code&gt;LEAVE&lt;/code&gt; are used as scoping braces; the save stack implements the C equivalent of, for example:</source>
          <target state="translated">C没有局部范围的概念，因此perl提供了一个范围。我们已经看到 &lt;code&gt;ENTER&lt;/code&gt; 和 &lt;code&gt;LEAVE&lt;/code&gt; 用作范围括号；保存堆栈实现了C的等效项，例如：</target>
        </trans-unit>
        <trans-unit id="062ffdd22a0d9502c039f8528f8150dbe0714cfe" translate="yes" xml:space="preserve">
          <source>C function parameters are normally initialized with their values from the argument stack (which in turn contains the parameters that were passed to the XSUB from Perl). The typemaps contain the code segments which are used to translate the Perl values to the C parameters. The programmer, however, is allowed to override the typemaps and supply alternate (or additional) initialization code. Initialization code starts with the first &lt;code&gt;=&lt;/code&gt; , &lt;code&gt;;&lt;/code&gt; or &lt;code&gt;+&lt;/code&gt; on a line in the INPUT: section. The only exception happens if this &lt;code&gt;;&lt;/code&gt; terminates the line, then this &lt;code&gt;;&lt;/code&gt; is quietly ignored.</source>
          <target state="translated">通常使用参数堆栈中的值初始化C函数参数（参数堆栈又包含从Perl传递到XSUB的参数）。类型映射包含用于将Perl值转换为C参数的代码段。但是，允许程序员重写类型映射并提供备用（或附加）初始化代码。初始化代码开始与第一 &lt;code&gt;=&lt;/code&gt; ， &lt;code&gt;;&lt;/code&gt; 或 &lt;code&gt;+&lt;/code&gt; 在INPUT：部分的一行上。唯一的例外就是这种情况 &lt;code&gt;;&lt;/code&gt; 终止行，然后此 &lt;code&gt;;&lt;/code&gt; 被悄悄地忽略了。</target>
        </trans-unit>
        <trans-unit id="213fb315de520b456a3df78bdf4d7f2421cc02be" translate="yes" xml:space="preserve">
          <source>C function parameters are normally initialized with their values from the argument stack (which in turn contains the parameters that were passed to the XSUB from Perl). The typemaps contain the code segments which are used to translate the Perl values to the C parameters. The programmer, however, is allowed to override the typemaps and supply alternate (or additional) initialization code. Initialization code starts with the first &lt;code&gt;=&lt;/code&gt;, &lt;code&gt;;&lt;/code&gt; or &lt;code&gt;+&lt;/code&gt; on a line in the INPUT: section. The only exception happens if this &lt;code&gt;;&lt;/code&gt; terminates the line, then this &lt;code&gt;;&lt;/code&gt; is quietly ignored.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="33ca94bf1de4049e4f9bdaa005b019e6d57ed90a" translate="yes" xml:space="preserve">
          <source>C header file. This file contains a series of macros and, if explicitly requested, functions that allow XS modules to be built using older versions of Perl. Currently, Perl versions from 5.003 to 5.20 are supported.</source>
          <target state="translated">C头文件。这个文件包含了一系列的宏和函数,如果明确要求的话,这些函数允许XS模块使用旧版本的Perl来构建。目前,支持5.003到5.20的Perl版本。</target>
        </trans-unit>
        <trans-unit id="2d0d49f7751613335f0d49f8a0f5d1a5a2b15669" translate="yes" xml:space="preserve">
          <source>C header file. This file contains a series of macros and, if explicitly requested, functions that allow XS modules to be built using older versions of Perl. Currently, Perl versions from 5.003_07 to 5.31.6 are supported.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a90cbbad6ac1bd0dbc637e8984710d08b0d07f9c" translate="yes" xml:space="preserve">
          <source>C header file.)</source>
          <target state="translated">C头文件)。)</target>
        </trans-unit>
        <trans-unit id="c22974d869d3644dd5d37745dcc22b37d2c1793e" translate="yes" xml:space="preserve">
          <source>C implementations</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6475b4e6bb646eb3e0b6202577ce4b2fb0cd180d" translate="yes" xml:space="preserve">
          <source>C keyword introducing a structure definition or name.</source>
          <target state="translated">C关键字引入结构定义或名称。</target>
        </trans-unit>
        <trans-unit id="399adcb6a34b5f69b459a531d78f258d2967e635" translate="yes" xml:space="preserve">
          <source>C library functions instead. In this case &lt;code&gt;memchr&lt;/code&gt; can be used to see if &lt;code&gt;c&lt;/code&gt; is in &lt;code&gt;&quot;list&quot;&lt;/code&gt; and works even if &lt;code&gt;c&lt;/code&gt; is &lt;code&gt;NUL&lt;/code&gt;. These functions need an additional parameter to give the string length. In the case of literal string parameters, perl has defined macros that calculate the length for you. See &lt;a href=&quot;perlapi#Miscellaneous-Functions&quot;&gt;&quot;Miscellaneous Functions&quot; in perlapi&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8e71f3bcd3ba5c06990be4ccb0628ea48bb58a61" translate="yes" xml:space="preserve">
          <source>C preprocessor</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0a4b78bc2d00244d4f2291c70d25ad9ed10ec746" translate="yes" xml:space="preserve">
          <source>C preprocessor directives are allowed within BOOT:, PREINIT: INIT:, CODE:, PPCODE:, POSTCALL:, and CLEANUP: blocks, as well as outside the functions. Comments are allowed anywhere after the MODULE keyword. The compiler will pass the preprocessor directives through untouched and will remove the commented lines. POD documentation is allowed at any point, both in the C and XS language sections. POD must be terminated with a &lt;code&gt;=cut&lt;/code&gt; command; &lt;code&gt;xsubpp&lt;/code&gt; will exit with an error if it does not. It is very unlikely that human generated C code will be mistaken for POD, as most indenting styles result in whitespace in front of any line starting with &lt;code&gt;=&lt;/code&gt; . Machine generated XS files may fall into this trap unless care is taken to ensure that a space breaks the sequence &quot;\n=&quot;.</source>
          <target state="translated">BOOT :、 PREINIT：INIT :、 CODE :、 PPCODE :、 POSTCALL：和CLEANUP：块以及函数外部均允许使用C预处理程序指令。在MODULE关键字之后的任何位置都允许注释。编译器将通过不变的方式传递预处理器指令，并将删除注释行。 C和XS语言部分中的任何地方都允许POD文档。 POD必须使用 &lt;code&gt;=cut&lt;/code&gt; 命令终止；如果没有， &lt;code&gt;xsubpp&lt;/code&gt; 将退出并显示错误。人为生成的C代码不太可能会误认为POD，因为大多数缩进样式会导致以 &lt;code&gt;=&lt;/code&gt; 开头的任何行前都有空格。机器生成的XS文件可能会落入此陷阱，除非注意确保空格中断序列&amp;ldquo; \ n =&amp;rdquo;。</target>
        </trans-unit>
        <trans-unit id="d8020cdca86500f6da443db0c3bcae725eafd266" translate="yes" xml:space="preserve">
          <source>C preprocessor directives are allowed within BOOT:, PREINIT: INIT:, CODE:, PPCODE:, POSTCALL:, and CLEANUP: blocks, as well as outside the functions. Comments are allowed anywhere after the MODULE keyword. The compiler will pass the preprocessor directives through untouched and will remove the commented lines. POD documentation is allowed at any point, both in the C and XS language sections. POD must be terminated with a &lt;code&gt;=cut&lt;/code&gt; command; &lt;code&gt;xsubpp&lt;/code&gt; will exit with an error if it does not. It is very unlikely that human generated C code will be mistaken for POD, as most indenting styles result in whitespace in front of any line starting with &lt;code&gt;=&lt;/code&gt;. Machine generated XS files may fall into this trap unless care is taken to ensure that a space breaks the sequence &quot;\n=&quot;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8b72786c4e2763e287b454e5689b07155e0cdb40" translate="yes" xml:space="preserve">
          <source>C&amp;lt;_pc_chown_restricted&amp;gt; symbol (for example, Windows NT) it is assumed that ``chown() giveaway'' is possible and the recursive test is performed.</source>
          <target state="translated">C &amp;lt;_pc_chown_restricted&amp;gt;符号（例如Windows NT）假定``chown（）赠品''是可能的，并执行递归测试。</target>
        </trans-unit>
        <trans-unit id="1978f4f5f2811138c5f2f911584623110e67b626" translate="yes" xml:space="preserve">
          <source>C++-style one-line '//'-comments (JSON::PP only)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d682623210c6b24f8d8f68ce43a83783f1b6c8af" translate="yes" xml:space="preserve">
          <source>C-style Logical And</source>
          <target state="translated">C型逻辑和</target>
        </trans-unit>
        <trans-unit id="468d5b286c1316bc4a6baa7daaefae5e90272197" translate="yes" xml:space="preserve">
          <source>C-style Logical Or</source>
          <target state="translated">C型逻辑或</target>
        </trans-unit>
        <trans-unit id="737b024863913bee156948e275791da6eb8f4b38" translate="yes" xml:space="preserve">
          <source>C-style multiple-line '/* */'-comments (JSON::PP only)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0403ad1f3298e7e9e68a2636bf42146ffa41b4ae" translate="yes" xml:space="preserve">
          <source>C. BUILD</source>
          <target state="translated">C.建设</target>
        </trans-unit>
        <trans-unit id="253cf957599cb78b1482e6eb5a8fa9c3483eda97" translate="yes" xml:space="preserve">
          <source>C.UTF</source>
          <target state="translated">C.UTF</target>
        </trans-unit>
        <trans-unit id="624f656f2b44769e8027ab2f2c47b638fe6eea88" translate="yes" xml:space="preserve">
          <source>C/C++ Traps</source>
          <target state="translated">C/C++陷阱</target>
        </trans-unit>
        <trans-unit id="d8bdd8cfb0c27a9643fac03c57e2c9dde9e10b0d" translate="yes" xml:space="preserve">
          <source>C3 is the name of an algorithm which aims to provide a sane method resolution order under multiple inheritance. It was first introduced in the language Dylan (see links in the &lt;a href=&quot;#SEE-ALSO&quot;&gt;&quot;SEE ALSO&quot;&lt;/a&gt; section), and then later adopted as the preferred MRO (Method Resolution Order) for the new-style classes in Python 2.3. Most recently it has been adopted as the &quot;canonical&quot; MRO for Perl 6 classes, and the default MRO for Parrot objects as well.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="633490a93f1c6b59da0e4592f3c36f5d9d5fc276" translate="yes" xml:space="preserve">
          <source>C3 is the name of an algorithm which aims to provide a sane method resolution order under multiple inheritance. It was first introduced in the language Dylan (see links in the &lt;a href=&quot;#SEE-ALSO&quot;&gt;SEE ALSO&lt;/a&gt; section), and then later adopted as the preferred MRO (Method Resolution Order) for the new-style classes in Python 2.3. Most recently it has been adopted as the &quot;canonical&quot; MRO for Perl 6 classes, and the default MRO for Parrot objects as well.</source>
          <target state="translated">C3是旨在在多重继承下提供合理方法解析顺序的算法的名称。它最初是用Dylan语言引入的（请参见&lt;a href=&quot;#SEE-ALSO&quot;&gt;SEE ALSO&lt;/a&gt;部分中的链接），然后被采用为Python 2.3中新样式类的首选MRO（方法解析顺序）。最近，它已被用作Perl 6类的&amp;ldquo;规范&amp;rdquo; MRO，以及Parrot对象的默认MRO。</target>
        </trans-unit>
        <trans-unit id="4aa8a8fa5eacc54ba9f8a4e755d8440833ba62a6" translate="yes" xml:space="preserve">
          <source>C3 works by always preserving local precedence ordering. This essentially means that no class will appear before any of its subclasses. Take, for instance, the classic diamond inheritance pattern:</source>
          <target state="translated">C3的工作原理是始终保留局部的优先顺序。这本质上意味着,任何类都不会出现在它的任何子类之前。以经典的钻石继承模式为例。</target>
        </trans-unit>
        <trans-unit id="1173dbb43313d07b70a93fae991af36789693f17" translate="yes" xml:space="preserve">
          <source>C:</source>
          <target state="translated">C:</target>
        </trans-unit>
        <trans-unit id="7a382120912440ea350318c064061d0e6ea8184a" translate="yes" xml:space="preserve">
          <source>C:/emx.add/bin/bash.exe</source>
          <target state="translated">C:/emx.add/bin/bash.exe</target>
        </trans-unit>
        <trans-unit id="519c5bd785564af1dec76cf3a5edc1bf3e894ac6" translate="yes" xml:space="preserve">
          <source>C:/emx/bin/foo.cmd</source>
          <target state="translated">C:/emx/bin/foo.cmd</target>
        </trans-unit>
        <trans-unit id="f6665c2627be2b969dcd410132185e0dd599f37b" translate="yes" xml:space="preserve">
          <source>CALLBACKS</source>
          <target state="translated">CALLBACKS</target>
        </trans-unit>
        <trans-unit id="3991ab584fec70130dcdb49fb4dbe4638d6f1b90" translate="yes" xml:space="preserve">
          <source>CALLING FROM PERL</source>
          <target state="translated">从PERL调用</target>
        </trans-unit>
        <trans-unit id="5f0a327136ac9e42e9905406e9cf6ed2f2b8cdbf" translate="yes" xml:space="preserve">
          <source>CALLING FROM THE COMMAND LINE</source>
          <target state="translated">从命令行调用</target>
        </trans-unit>
        <trans-unit id="3b04e0388b12d5718ab0ab4fbeede800c9bdf464" translate="yes" xml:space="preserve">
          <source>CALL_BLOCK_HOOKS</source>
          <target state="translated">CALL_BLOCK_HOOKS</target>
        </trans-unit>
        <trans-unit id="aa884ac53759d984488c656f65f21f650359027e" translate="yes" xml:space="preserve">
          <source>CAN</source>
          <target state="translated">CAN</target>
        </trans-unit>
        <trans-unit id="5f05bf320ccd994a5b4376cbf772126d72a752e5" translate="yes" xml:space="preserve">
          <source>CANONICAL REPRESENTATION</source>
          <target state="translated">圣典代表</target>
        </trans-unit>
        <trans-unit id="ed877e5c7f10c31f466df09c23df16788f087cc2" translate="yes" xml:space="preserve">
          <source>CANONICAL_NAME</source>
          <target state="translated">CANONICAL_NAME</target>
        </trans-unit>
        <trans-unit id="7c383ee49414a970f2fefff09538765cce85b6f7" translate="yes" xml:space="preserve">
          <source>CAN_FORK</source>
          <target state="translated">CAN_FORK</target>
        </trans-unit>
        <trans-unit id="d89bfce77d1d10d8b67301ffcd86ad4a0fd51999" translate="yes" xml:space="preserve">
          <source>CAN_REALLY_FORK</source>
          <target state="translated">CAN_REALLY_FORK</target>
        </trans-unit>
        <trans-unit id="a10ef324dbcf8652446a083bde0eb77789137e55" translate="yes" xml:space="preserve">
          <source>CAN_THREAD</source>
          <target state="translated">CAN_THREAD</target>
        </trans-unit>
        <trans-unit id="e520869852c82bbce05b6c5dc47274d3b3a11987" translate="yes" xml:space="preserve">
          <source>CATEGORIES</source>
          <target state="translated">CATEGORIES</target>
        </trans-unit>
        <trans-unit id="980aeb7f8f581c6b66ed59bbbed49733515b10e6" translate="yes" xml:space="preserve">
          <source>CAVEAT</source>
          <target state="translated">CAVEAT</target>
        </trans-unit>
        <trans-unit id="b72f8eb839f7acede3b2ca8386d0ebe48e624e02" translate="yes" xml:space="preserve">
          <source>CAVEAT %A, %a, %B, %b, and friends</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6567e0b0a7daf3c098913aa924483cfe44852131" translate="yes" xml:space="preserve">
          <source>CAVEAT FOR GREAT CIRCLE FORMULAS</source>
          <target state="translated">大圈公式的退让。</target>
        </trans-unit>
        <trans-unit id="8ae97560e6c967ffcb76f6cd835c75b45c6b2d57" translate="yes" xml:space="preserve">
          <source>CAVEAT ON PRECEDENCE</source>
          <target state="translated">关于先决条件的警告</target>
        </trans-unit>
        <trans-unit id="1c968ba436040f2ef7532a90991da165ff0512dd" translate="yes" xml:space="preserve">
          <source>CAVEAT: The thread signalling capability provided by this module does not actually send signals via the OS. It</source>
          <target state="translated">注意:该模块提供的线程信号能力实际上并不通过操作系统发送信号。它</target>
        </trans-unit>
        <trans-unit id="ce611c3a23df37ff734feee69c06233d5c9abfb4" translate="yes" xml:space="preserve">
          <source>CAVEAT: Though BOM in utf8 (\xEF\xBB\xBF) is valid, it is meaningless and as of this writing Encode suite just leave it as is (\x{FeFF}).</source>
          <target state="translated">CAVEAT:尽管utf8中的BOM(xEF\xBB\xBF)是有效的,但它是没有意义的,在写这篇文章的时候,Encode套件只是让它保持原样(\x{FeFF})。</target>
        </trans-unit>
        <trans-unit id="5ea0a6fefc9f66fb07ad0567375a2c4308c1f112" translate="yes" xml:space="preserve">
          <source>CAVEAT: Unlike UTF-(16|32), BOM in utf8 is NOT AUTOMATICALLY STRIPPED.</source>
          <target state="translated">注意:与UTF-(16|32)不同的是,utf8中的BOM不是自动剥离的。</target>
        </trans-unit>
        <trans-unit id="0852d6090cb36f8c92fc678e7c0ed0101951986e" translate="yes" xml:space="preserve">
          <source>CAVEATS</source>
          <target state="translated">CAVEATS</target>
        </trans-unit>
        <trans-unit id="afa50a96d52c4af6173a5b3dcf9e10a0a47c02ab" translate="yes" xml:space="preserve">
          <source>CAVEATS AND LIMITATIONS</source>
          <target state="translated">退让和限制</target>
        </trans-unit>
        <trans-unit id="8db2d4672c0bb6f4ea12967ef5822987358da334" translate="yes" xml:space="preserve">
          <source>CAVEATS and NOTES</source>
          <target state="translated">免责声明和说明</target>
        </trans-unit>
        <trans-unit id="2730fdc488249d7bafe77293689db04473acbaf2" translate="yes" xml:space="preserve">
          <source>CC0 1.0 Universal</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a6e7743e5b77bff9708c13ccf20fcc50d9073b5e" translate="yes" xml:space="preserve">
          <source>CCFLAGS</source>
          <target state="translated">CCFLAGS</target>
        </trans-unit>
        <trans-unit id="34d724a57223d56ce5370f930a6de174ea64e793" translate="yes" xml:space="preserve">
          <source>CCTools</source>
          <target state="translated">CCTools</target>
        </trans-unit>
        <trans-unit id="422f720e7d72716b7017e69268406be073cfc7c1" translate="yes" xml:space="preserve">
          <source>CGI</source>
          <target state="translated">CGI</target>
        </trans-unit>
        <trans-unit id="41a4605be9cd5708c0812fcf96a67b02ae213ace" translate="yes" xml:space="preserve">
          <source>CGI.pm</source>
          <target state="translated">CGI.pm</target>
        </trans-unit>
        <trans-unit id="313c83d1d2e8c998d1416c76ceb327085bafcc5a" translate="yes" xml:space="preserve">
          <source>CHANGED IN PERL 5.6</source>
          <target state="translated">PERL 5.6中的变化</target>
        </trans-unit>
        <trans-unit id="15a7fa79c2e880d7c668e6f0bb63190d52852647" translate="yes" xml:space="preserve">
          <source>CHANGED in 3.18</source>
          <target state="translated">在3.18中改变了</target>
        </trans-unit>
        <trans-unit id="a2feb6ed0257c21c6672793ee2f94eaadc10c72c" translate="yes" xml:space="preserve">
          <source>CHANGES</source>
          <target state="translated">CHANGES</target>
        </trans-unit>
        <trans-unit id="77e515bcbeea42a381522b3f02fc083d411a62f5" translate="yes" xml:space="preserve">
          <source>CHARACTER CLASSES</source>
          <target state="translated">角色类别</target>
        </trans-unit>
        <trans-unit id="80ca0b224740835c619b09444159e57296b64d7e" translate="yes" xml:space="preserve">
          <source>CHARDEV</source>
          <target state="translated">CHARDEV</target>
        </trans-unit>
        <trans-unit id="a375cca9c609e8591d1c22cf8e8a8c4bbd0e6f6f" translate="yes" xml:space="preserve">
          <source>CHARMAP starts the character map section. Each line has a form as follows:</source>
          <target state="translated">CHARMAP开始字符图部分。每一行的形式如下。</target>
        </trans-unit>
        <trans-unit id="1fbd3cbf6697996c51d6a64a08ee8b874fefe67b" translate="yes" xml:space="preserve">
          <source>CHARNAME</source>
          <target state="translated">CHARNAME</target>
        </trans-unit>
        <trans-unit id="d37267cb2995cccac2283009e1ea4f3a6dd37db3" translate="yes" xml:space="preserve">
          <source>CHECK</source>
          <target state="translated">CHECK</target>
        </trans-unit>
        <trans-unit id="0a228e95208b8ea7acb00589cdd0f311e92f3483" translate="yes" xml:space="preserve">
          <source>CHECKSUM FUNCTIONS</source>
          <target state="translated">CHECKSUM函数</target>
        </trans-unit>
        <trans-unit id="375b607411c5c81ce08dc5795ece2335113cdfb6" translate="yes" xml:space="preserve">
          <source>CJK.inf</source>
          <target state="translated">CJK.inf</target>
        </trans-unit>
        <trans-unit id="1f22ed2c7cd021c0f2f66309f2f05fa0c8cba3b9" translate="yes" xml:space="preserve">
          <source>CJK: Chinese, Japanese, Korean (Multibyte)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a149ba82f2f03dc5065a0af0c7f361f94591fd8e" translate="yes" xml:space="preserve">
          <source>CJKRadicals.txt</source>
          <target state="translated">CJKRadicals.txt</target>
        </trans-unit>
        <trans-unit id="1cd4dc2f81b0a6fdbbb287d0cb553f7eb2bc1256" translate="yes" xml:space="preserve">
          <source>CJKV Information Processing 1999 O'Reilly &amp;amp; Associates, ISBN : 1-56592-224-7</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bb95f17d9243e483e268617dbce738cf49527ccf" translate="yes" xml:space="preserve">
          <source>CLASS</source>
          <target state="translated">CLASS</target>
        </trans-unit>
        <trans-unit id="0d2dc3d6989d0491c087fdf8b26389f6609dba54" translate="yes" xml:space="preserve">
          <source>CLASS METHODS</source>
          <target state="translated">类别方法</target>
        </trans-unit>
        <trans-unit id="dbf4163822f839bcdb88c4da697b65983c814143" translate="yes" xml:space="preserve">
          <source>CLASS-&amp;gt;_1ex(N)</source>
          <target state="translated">CLASS-&amp;gt;_1ex(N)</target>
        </trans-unit>
        <trans-unit id="5e3cd43942de5bc55bb4b61dff2152defa5e665c" translate="yes" xml:space="preserve">
          <source>CLASS-&amp;gt;_acmp(OBJ1, OBJ2)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c0fe5b11e664f45527c8cbf573b1b4a9111881ab" translate="yes" xml:space="preserve">
          <source>CLASS-&amp;gt;_add(OBJ1, OBJ2)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bbe8e3c720a50c4d2a9750528931e93986936121" translate="yes" xml:space="preserve">
          <source>CLASS-&amp;gt;_alen(OBJ)</source>
          <target state="translated">CLASS-&amp;gt;_alen(OBJ)</target>
        </trans-unit>
        <trans-unit id="9c0f693334bb3b43074ff7fb54e0a35e69585bdc" translate="yes" xml:space="preserve">
          <source>CLASS-&amp;gt;_and(OBJ1, OBJ2)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="373f5c07704d916c11b9458bafdf0b3c797ab20b" translate="yes" xml:space="preserve">
          <source>CLASS-&amp;gt;_as_bin(OBJ)</source>
          <target state="translated">CLASS-&amp;gt;_as_bin(OBJ)</target>
        </trans-unit>
        <trans-unit id="ae3b000dcb18d4a9a9b9e0c641ae341959b8b1f3" translate="yes" xml:space="preserve">
          <source>CLASS-&amp;gt;_as_bytes(OBJ)</source>
          <target state="translated">CLASS-&amp;gt;_as_bytes(OBJ)</target>
        </trans-unit>
        <trans-unit id="939aeb6ab73227e57772ccf8d1bbefe66e8960e7" translate="yes" xml:space="preserve">
          <source>CLASS-&amp;gt;_as_hex(OBJ)</source>
          <target state="translated">CLASS-&amp;gt;_as_hex(OBJ)</target>
        </trans-unit>
        <trans-unit id="230ca81d0842013c25749d9d81db1f748148ed30" translate="yes" xml:space="preserve">
          <source>CLASS-&amp;gt;_as_oct(OBJ)</source>
          <target state="translated">CLASS-&amp;gt;_as_oct(OBJ)</target>
        </trans-unit>
        <trans-unit id="aa47a54f32aa5d9aedfbc8b0516ffb16b4e8ad9b" translate="yes" xml:space="preserve">
          <source>CLASS-&amp;gt;_check(OBJ)</source>
          <target state="translated">CLASS-&amp;gt;_check(OBJ)</target>
        </trans-unit>
        <trans-unit id="b76d89ef951323f62ea3d4f7e3bf6625216a664e" translate="yes" xml:space="preserve">
          <source>CLASS-&amp;gt;_copy(OBJ)</source>
          <target state="translated">CLASS-&amp;gt;_copy(OBJ)</target>
        </trans-unit>
        <trans-unit id="7b316610efe595918ab265cc516b10525cb0a9e4" translate="yes" xml:space="preserve">
          <source>CLASS-&amp;gt;_dec(OBJ)</source>
          <target state="translated">CLASS-&amp;gt;_dec(OBJ)</target>
        </trans-unit>
        <trans-unit id="eff86bbc5c81f0ef90c6a67839537dc95561de27" translate="yes" xml:space="preserve">
          <source>CLASS-&amp;gt;_dfac(OBJ)</source>
          <target state="translated">CLASS-&amp;gt;_dfac(OBJ)</target>
        </trans-unit>
        <trans-unit id="65789515386f4257376ec8b095a149f8249a54c8" translate="yes" xml:space="preserve">
          <source>CLASS-&amp;gt;_digit(OBJ, N)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ea0a5425bf5954e529e526265bbbe725dac5b692" translate="yes" xml:space="preserve">
          <source>CLASS-&amp;gt;_digitsum(OBJ)</source>
          <target state="translated">CLASS-&amp;gt;_digitsum(OBJ)</target>
        </trans-unit>
        <trans-unit id="01cc9e41069c631dbebc0964cbf38d39d062d70c" translate="yes" xml:space="preserve">
          <source>CLASS-&amp;gt;_div(OBJ1, OBJ2)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="81104bf1f4830cc5d2f3062c9f17bb351dcea9e5" translate="yes" xml:space="preserve">
          <source>CLASS-&amp;gt;_fac(OBJ)</source>
          <target state="translated">CLASS-&amp;gt;_fac(OBJ)</target>
        </trans-unit>
        <trans-unit id="9bebd4b16a3688a92b9ec1309e0093ef6c878a26" translate="yes" xml:space="preserve">
          <source>CLASS-&amp;gt;_fib(OBJ)</source>
          <target state="translated">CLASS-&amp;gt;_fib(OBJ)</target>
        </trans-unit>
        <trans-unit id="9c38737454337b63e376846c30d93e58da737182" translate="yes" xml:space="preserve">
          <source>CLASS-&amp;gt;_from_base(STR, BASE, COLLSEQ)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="554065c0180a909fc6b23180a8a9cfc40b6e7245" translate="yes" xml:space="preserve">
          <source>CLASS-&amp;gt;_from_bin(STR)</source>
          <target state="translated">CLASS-&amp;gt;_from_bin(STR)</target>
        </trans-unit>
        <trans-unit id="e0b67da5a286b962b5103b9d3a1b9a892b1ed509" translate="yes" xml:space="preserve">
          <source>CLASS-&amp;gt;_from_bytes(STR)</source>
          <target state="translated">CLASS-&amp;gt;_from_bytes(STR)</target>
        </trans-unit>
        <trans-unit id="c243787e132d2a094d8a15627a1a7451a3814933" translate="yes" xml:space="preserve">
          <source>CLASS-&amp;gt;_from_hex(STR)</source>
          <target state="translated">CLASS-&amp;gt;_from_hex(STR)</target>
        </trans-unit>
        <trans-unit id="bee67c462491c6f639f9d7df02ebc91914ba0651" translate="yes" xml:space="preserve">
          <source>CLASS-&amp;gt;_from_oct(STR)</source>
          <target state="translated">CLASS-&amp;gt;_from_oct(STR)</target>
        </trans-unit>
        <trans-unit id="79947d07c35c8d7ca8fb7ab582580ad09f68a270" translate="yes" xml:space="preserve">
          <source>CLASS-&amp;gt;_gcd(OBJ1, OBJ2)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bf870d7b557e437ecc4f6df31048e61c1a766639" translate="yes" xml:space="preserve">
          <source>CLASS-&amp;gt;_inc(OBJ)</source>
          <target state="translated">CLASS-&amp;gt;_inc(OBJ)</target>
        </trans-unit>
        <trans-unit id="57ef40818297d41ce5ae6dfe2935cbe10a948e55" translate="yes" xml:space="preserve">
          <source>CLASS-&amp;gt;_is_even(OBJ)</source>
          <target state="translated">CLASS-&amp;gt;_is_even(OBJ)</target>
        </trans-unit>
        <trans-unit id="78e92a508444c9a4e153cb27dec44ce710d3fbfb" translate="yes" xml:space="preserve">
          <source>CLASS-&amp;gt;_is_odd(OBJ)</source>
          <target state="translated">CLASS-&amp;gt;_is_odd(OBJ)</target>
        </trans-unit>
        <trans-unit id="4e20f7c171116a375cf13642bc296e79fa405fdc" translate="yes" xml:space="preserve">
          <source>CLASS-&amp;gt;_is_one(OBJ)</source>
          <target state="translated">CLASS-&amp;gt;_is_one(OBJ)</target>
        </trans-unit>
        <trans-unit id="f88b575610df28090e82ca09cbc271fba882a984" translate="yes" xml:space="preserve">
          <source>CLASS-&amp;gt;_is_ten(OBJ)</source>
          <target state="translated">CLASS-&amp;gt;_is_ten(OBJ)</target>
        </trans-unit>
        <trans-unit id="c073383626cbcb436b52f80e441e3525185a9c35" translate="yes" xml:space="preserve">
          <source>CLASS-&amp;gt;_is_two(OBJ)</source>
          <target state="translated">CLASS-&amp;gt;_is_two(OBJ)</target>
        </trans-unit>
        <trans-unit id="0931755142c2e5061f082dcab3a8b3d06ee0d673" translate="yes" xml:space="preserve">
          <source>CLASS-&amp;gt;_is_zero(OBJ)</source>
          <target state="translated">CLASS-&amp;gt;_is_zero(OBJ)</target>
        </trans-unit>
        <trans-unit id="52b59fb9ef6c768eaf71a7b4d2195bdd1507ba3e" translate="yes" xml:space="preserve">
          <source>CLASS-&amp;gt;_lcm(OBJ1, OBJ2)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d3e0eb30c18735b72536d99d8876be0e0f45994a" translate="yes" xml:space="preserve">
          <source>CLASS-&amp;gt;_len(OBJ)</source>
          <target state="translated">CLASS-&amp;gt;_len(OBJ)</target>
        </trans-unit>
        <trans-unit id="4c7950e347030db6d9cf7aeabf66a289e6d4957c" translate="yes" xml:space="preserve">
          <source>CLASS-&amp;gt;_log_int(OBJ, B)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cc8371d73a223d5f3f24b060cd71a0b488611602" translate="yes" xml:space="preserve">
          <source>CLASS-&amp;gt;_lsft(OBJ, N, B)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="22cba7fcab6b1e38e812527c51957fb448a1dfbd" translate="yes" xml:space="preserve">
          <source>CLASS-&amp;gt;_lucas(OBJ)</source>
          <target state="translated">CLASS-&amp;gt;_lucas(OBJ)</target>
        </trans-unit>
        <trans-unit id="d1020b2df8e6bc65d3831c16910a186a6aedb167" translate="yes" xml:space="preserve">
          <source>CLASS-&amp;gt;_mod(OBJ1, OBJ2)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="12c329275261c155dd0553c2b9d32d417c6fd959" translate="yes" xml:space="preserve">
          <source>CLASS-&amp;gt;_modinv(OBJ1, OBJ2)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="25bd4b6eae9a7e994127aca1153ee769bb0a4fc5" translate="yes" xml:space="preserve">
          <source>CLASS-&amp;gt;_modpow(OBJ1, OBJ2, OBJ3)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="25d6ac0e0c4cf42a3b72e71957f069a23ecaca7a" translate="yes" xml:space="preserve">
          <source>CLASS-&amp;gt;_mul(OBJ1, OBJ2)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f72b5e20b6fa3144b91ee9cc34948365f3de5f56" translate="yes" xml:space="preserve">
          <source>CLASS-&amp;gt;_new(STR)</source>
          <target state="translated">CLASS-&amp;gt;_new(STR)</target>
        </trans-unit>
        <trans-unit id="8f05265514c627bfe1c1bb7fc447201ea3dc0844" translate="yes" xml:space="preserve">
          <source>CLASS-&amp;gt;_nok(OBJ1, OBJ2)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8735ec3c7027990b743211f907d190471dab8b0d" translate="yes" xml:space="preserve">
          <source>CLASS-&amp;gt;_num(OBJ)</source>
          <target state="translated">CLASS-&amp;gt;_num(OBJ)</target>
        </trans-unit>
        <trans-unit id="7063799ab7a1554372ab0077a85ae240ce398e0e" translate="yes" xml:space="preserve">
          <source>CLASS-&amp;gt;_one()</source>
          <target state="translated">CLASS-&amp;gt;_one()</target>
        </trans-unit>
        <trans-unit id="6a5ee9d5848f3b7486015f8969d7466409265df6" translate="yes" xml:space="preserve">
          <source>CLASS-&amp;gt;_or(OBJ1, OBJ2)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3f28b295d6374c491c3fe35b78ae7b6181398402" translate="yes" xml:space="preserve">
          <source>CLASS-&amp;gt;_pow(OBJ1, OBJ2)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2db0025cc70599004bf6f7ce6450bde2b7750c10" translate="yes" xml:space="preserve">
          <source>CLASS-&amp;gt;_root(OBJ, N)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="383991a80a7684e88dc70dca994e1117d7ba4c8f" translate="yes" xml:space="preserve">
          <source>CLASS-&amp;gt;_rsft(OBJ, N, B)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6829cafc5ea39d01bb87254edd352f6bc5503975" translate="yes" xml:space="preserve">
          <source>CLASS-&amp;gt;_sand(OBJ1, OBJ2, SIGN1, SIGN2)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3f3a5c67db38b96d60ac6745a515a2bb726a9a22" translate="yes" xml:space="preserve">
          <source>CLASS-&amp;gt;_set(OBJ)</source>
          <target state="translated">CLASS-&amp;gt;_set(OBJ)</target>
        </trans-unit>
        <trans-unit id="a57d527484c99992dbfe4499fffa9a173eb3f781" translate="yes" xml:space="preserve">
          <source>CLASS-&amp;gt;_sor(OBJ1, OBJ2, SIGN1, SIGN2)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5ac0302a0996c0213583a493ee19dd407df00100" translate="yes" xml:space="preserve">
          <source>CLASS-&amp;gt;_sqrt(OBJ)</source>
          <target state="translated">CLASS-&amp;gt;_sqrt(OBJ)</target>
        </trans-unit>
        <trans-unit id="6789029e56909be438f25122aaab1a089e43ffe8" translate="yes" xml:space="preserve">
          <source>CLASS-&amp;gt;_str(OBJ)</source>
          <target state="translated">CLASS-&amp;gt;_str(OBJ)</target>
        </trans-unit>
        <trans-unit id="2b0825027da9a54d42038acc8d5ba027d5c46cb3" translate="yes" xml:space="preserve">
          <source>CLASS-&amp;gt;_sub(OBJ1, OBJ2)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4950b9010a4834f9373708080b8e69ae8e9c5c49" translate="yes" xml:space="preserve">
          <source>CLASS-&amp;gt;_sub(OBJ1, OBJ2, FLAG)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="77468e1908c6dafd5d2074208a664ae5e60f2dd1" translate="yes" xml:space="preserve">
          <source>CLASS-&amp;gt;_sxor(OBJ1, OBJ2, SIGN1, SIGN2)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="76c7c88b44890239ec86e544ab6611e5cd108682" translate="yes" xml:space="preserve">
          <source>CLASS-&amp;gt;_ten()</source>
          <target state="translated">CLASS-&amp;gt;_ten()</target>
        </trans-unit>
        <trans-unit id="7329d1090c0993df5e9a2b709663faa1d6fcf49e" translate="yes" xml:space="preserve">
          <source>CLASS-&amp;gt;_to_base(OBJ, BASE, COLLSEQ)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="77fcc2b13d1e0c8ebd7f8e44e49e356c78134165" translate="yes" xml:space="preserve">
          <source>CLASS-&amp;gt;_to_bin(OBJ)</source>
          <target state="translated">CLASS-&amp;gt;_to_bin(OBJ)</target>
        </trans-unit>
        <trans-unit id="7027f3991415488985a9bd72f394eda651f4b3a8" translate="yes" xml:space="preserve">
          <source>CLASS-&amp;gt;_to_bytes(OBJ)</source>
          <target state="translated">CLASS-&amp;gt;_to_bytes(OBJ)</target>
        </trans-unit>
        <trans-unit id="474f2351bc034f4e2dee67fde64fb9ecd0687fcd" translate="yes" xml:space="preserve">
          <source>CLASS-&amp;gt;_to_hex(OBJ)</source>
          <target state="translated">CLASS-&amp;gt;_to_hex(OBJ)</target>
        </trans-unit>
        <trans-unit id="eda55669e9a413e319a52f38c9b97d2f80258723" translate="yes" xml:space="preserve">
          <source>CLASS-&amp;gt;_to_oct(OBJ)</source>
          <target state="translated">CLASS-&amp;gt;_to_oct(OBJ)</target>
        </trans-unit>
        <trans-unit id="35f6b512f149fc5647d9be14d6c3696779666d7b" translate="yes" xml:space="preserve">
          <source>CLASS-&amp;gt;_two()</source>
          <target state="translated">CLASS-&amp;gt;_two()</target>
        </trans-unit>
        <trans-unit id="6c043a16c1ce905dc69c182599a1ed3e1706644f" translate="yes" xml:space="preserve">
          <source>CLASS-&amp;gt;_xor(OBJ1, OBJ2)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1786e012068e0bce30f713c13983059095b9846e" translate="yes" xml:space="preserve">
          <source>CLASS-&amp;gt;_zero()</source>
          <target state="translated">CLASS-&amp;gt;_zero()</target>
        </trans-unit>
        <trans-unit id="4427e6621d576c9b9544faafe160d613f16fd0a2" translate="yes" xml:space="preserve">
          <source>CLASS-&amp;gt;_zeros(OBJ)</source>
          <target state="translated">CLASS-&amp;gt;_zeros(OBJ)</target>
        </trans-unit>
        <trans-unit id="98c43027b56d54580ef0f278822b82fba3c6c7b0" translate="yes" xml:space="preserve">
          <source>CLASS-&amp;gt;api_version()</source>
          <target state="translated">CLASS-&amp;gt;api_version()</target>
        </trans-unit>
        <trans-unit id="3a8f000aa3840296550580880a88660b74717610" translate="yes" xml:space="preserve">
          <source>CLASS-&amp;gt;safe_quote ITEM</source>
          <target state="translated">CLASS-&amp;gt; safe_quote项目</target>
        </trans-unit>
        <trans-unit id="2a5520b8514a16a64037e86c211cbd6b6bfdc1cb" translate="yes" xml:space="preserve">
          <source>CLASSES</source>
          <target state="translated">CLASSES</target>
        </trans-unit>
        <trans-unit id="cd6bd9f33c285fac5da62108d5afffde0dae96e5" translate="yes" xml:space="preserve">
          <source>CLDR - Unicode Common Locale Data Repository</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="16ec74fc0a433fb02e0d1f99b9c32251a3f73264" translate="yes" xml:space="preserve">
          <source>CLEAR</source>
          <target state="translated">CLEAR</target>
        </trans-unit>
        <trans-unit id="fac58dbcd72067a5f153ffc2c833d4355a2e9136" translate="yes" xml:space="preserve">
          <source>CLEAR this</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9d3e5deafcdb3a6a27a65e5bfeaafad1584429f1" translate="yes" xml:space="preserve">
          <source>CLEAR_ERRSV</source>
          <target state="translated">CLEAR_ERRSV</target>
        </trans-unit>
        <trans-unit id="8c43ea9afe441832e3cd4c7b7273072cf89d4f36" translate="yes" xml:space="preserve">
          <source>CLIENT-&amp;gt;cleanup()</source>
          <target state="translated">CLIENT-&amp;gt;cleanup()</target>
        </trans-unit>
        <trans-unit id="358d8a539f6516a3018cd971d1f7108ae888fd92" translate="yes" xml:space="preserve">
          <source>CLIENT-&amp;gt;done()</source>
          <target state="translated">CLIENT-&amp;gt;done()</target>
        </trans-unit>
        <trans-unit id="362ae63f2520b0ac6a4a12fc77bc456bba0bbcc3" translate="yes" xml:space="preserve">
          <source>CLIENT-&amp;gt;evalcode(STRING)</source>
          <target state="translated">CLIENT-&amp;gt;evalcode(STRING)</target>
        </trans-unit>
        <trans-unit id="ba2a51aebeb9cbe8ede2ee1f099eaf5f9c19efd0" translate="yes" xml:space="preserve">
          <source>CLIENT-&amp;gt;idle()</source>
          <target state="translated">CLIENT-&amp;gt;idle()</target>
        </trans-unit>
        <trans-unit id="409e287a81847627c930dbd66e9d048b08e25d40" translate="yes" xml:space="preserve">
          <source>CLIENT-&amp;gt;init()</source>
          <target state="translated">CLIENT-&amp;gt;init()</target>
        </trans-unit>
        <trans-unit id="beb8820f770c08f109a42da993198a2bf758e2af" translate="yes" xml:space="preserve">
          <source>CLIENT-&amp;gt;next()</source>
          <target state="translated">CLIENT-&amp;gt;next()</target>
        </trans-unit>
        <trans-unit id="f4b64a7bfd435bce1098449143c22fafad1d5535" translate="yes" xml:space="preserve">
          <source>CLIENT-&amp;gt;output(LIST)</source>
          <target state="translated">CLIENT-&amp;gt;output(LIST)</target>
        </trans-unit>
        <trans-unit id="02ff864bb0d3ac0d506e8664f9ec2249e935efca" translate="yes" xml:space="preserve">
          <source>CLIENT-&amp;gt;poststop([STRING])</source>
          <target state="translated">CLIENT-&amp;gt;poststop([STRING])</target>
        </trans-unit>
        <trans-unit id="d623baf5484b0acf229ea866ad9e9a377eb16b8e" translate="yes" xml:space="preserve">
          <source>CLIENT-&amp;gt;prestop([STRING])</source>
          <target state="translated">CLIENT-&amp;gt;prestop([STRING])</target>
        </trans-unit>
        <trans-unit id="1c7a7b82fce1e98c96aff13692c7449dfe17a4b2" translate="yes" xml:space="preserve">
          <source>CLIENT-&amp;gt;register()</source>
          <target state="translated">CLIENT-&amp;gt;register()</target>
        </trans-unit>
        <trans-unit id="a0a32439f61153f1114c4f2cbb168b643a0c035f" translate="yes" xml:space="preserve">
          <source>CLIENT-&amp;gt;run()</source>
          <target state="translated">CLIENT-&amp;gt;run()</target>
        </trans-unit>
        <trans-unit id="1644fd80139ae09888986e942a4b6aa717e134ed" translate="yes" xml:space="preserve">
          <source>CLIENT-&amp;gt;skippkg('D::hide')</source>
          <target state="translated">CLIENT-&amp;gt;skippkg('D::hide')</target>
        </trans-unit>
        <trans-unit id="bc32722474d27f37fcd785205662e484073b7283" translate="yes" xml:space="preserve">
          <source>CLIENT-&amp;gt;step()</source>
          <target state="translated">CLIENT-&amp;gt;step()</target>
        </trans-unit>
        <trans-unit id="dfdb07cd11971abb4934eabdc4e75a80161a4535" translate="yes" xml:space="preserve">
          <source>CLIENT-&amp;gt;stop()</source>
          <target state="translated">CLIENT-&amp;gt;stop()</target>
        </trans-unit>
        <trans-unit id="6a75d42526571d5f3b5ee3277f0f56033635d616" translate="yes" xml:space="preserve">
          <source>CLISYM_[LOCAL]</source>
          <target state="translated">CLISYM_[LOCAL]</target>
        </trans-unit>
        <trans-unit id="02511b0ef4c076e32b8ecf4a292ccc2e251c9180" translate="yes" xml:space="preserve">
          <source>CLOBBER</source>
          <target state="translated">CLOBBER</target>
        </trans-unit>
        <trans-unit id="eb2ed6b6d36f266377a9e30f6e145c7fdae07a3f" translate="yes" xml:space="preserve">
          <source>CLONEf_CLONE_HOST - This is a win32 thing, it is ignored on unix, it tells perls win32host code (which is c++) to clone itself, this is needed on win32 if you want to run two threads at the same time, if you just want to do some stuff in a separate perl interpreter and then throw it away and return to the original one, you don't need to do anything.</source>
          <target state="translated">CLONEf_CLONE_HOST-这是一个win32的东西,在unix上它是被忽略的,它告诉perls win32host代码(就是c++)来克隆自己,如果你想同时运行两个线程,在win32上需要这个,如果你只是想在一个单独的perl解释器中做一些事情,然后扔掉它,回到原来的那个,你不需要做任何事情。</target>
        </trans-unit>
        <trans-unit id="5dd06954f8504852be625e8b13f9f38ba4df5c2d" translate="yes" xml:space="preserve">
          <source>CLONEf_COPY_STACKS - is used to, well, copy the stacks also, without it we only clone the data and zero the stacks, with it we copy the stacks and the new perl interpreter is ready to run at the exact same point as the previous one. The pseudo-fork code uses COPY_STACKS while the threads-&amp;gt;create doesn't.</source>
          <target state="translated">CLONEf_COPY_STACKS-用来复制堆栈，没有它，我们仅克隆数据并将堆栈归零，因此我们复制堆栈，新的perl解释器可以在与上一个完全相同的位置运行。伪叉代码使用COPY_STACKS，而threads-&amp;gt; create则不使用。</target>
        </trans-unit>
        <trans-unit id="496d69294e21b9e9459d9ae5f134da2961a69331" translate="yes" xml:space="preserve">
          <source>CLONEf_KEEP_PTR_TABLE - perl_clone keeps a ptr_table with the pointer of the old variable as a key and the new variable as a value, this allows it to check if something has been cloned and not clone it again but rather just use the value and increase the refcount. If KEEP_PTR_TABLE is not set then perl_clone will kill the ptr_table using the function &lt;code&gt;ptr_table_free(PL_ptr_table); PL_ptr_table = NULL;&lt;/code&gt; , reason to keep it around is if you want to dup some of your own variable who are outside the graph perl scans, example of this code is in threads.xs create.</source>
          <target state="translated">CLONEf_KEEP_PTR_TABLE-perl_clone保留一个ptr_table，其中将旧变量的指针作为键，将新变量的值作为值，这使它可以检查是否已克隆某些内容，而不是再次克隆它，而是仅使用该值并增加引用计数。如果未设置KEEP_PTR_TABLE，则perl_clone将使用函数 &lt;code&gt;ptr_table_free(PL_ptr_table); PL_ptr_table = NULL;&lt;/code&gt; 杀死ptr_table；PL_ptr_table = NULL; ，保留它的原因是如果您想复制自己的一些不在图形perl扫描范围内的变量，此代码的示例在thread.xs create中。</target>
        </trans-unit>
        <trans-unit id="07801b8767211109091edb84bc973192295d0f01" translate="yes" xml:space="preserve">
          <source>CLONING THE REPOSITORY</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="03722f59b0c28be7ddc35c91bb350d9e0cf0b45b" translate="yes" xml:space="preserve">
          <source>CLOSE this</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="08e4da4e4f3b9df4371883c2c534d94c9bbb7158" translate="yes" xml:space="preserve">
          <source>CMD</source>
          <target state="translated">CMD</target>
        </trans-unit>
        <trans-unit id="439fbcbebff5d3e18e9cd1652b960a8b5958c8fb" translate="yes" xml:space="preserve">
          <source>CMD.EXE</source>
          <target state="translated">CMD.EXE</target>
        </trans-unit>
        <trans-unit id="b7f8b1aaa4e3518d65a63cc4b574d3a502b21354" translate="yes" xml:space="preserve">
          <source>CMD_ERROR</source>
          <target state="translated">CMD_ERROR</target>
        </trans-unit>
        <trans-unit id="b9c1aaaf65573c7e15b93b6d826729e7711cf242" translate="yes" xml:space="preserve">
          <source>CNAME</source>
          <target state="translated">CNAME</target>
        </trans-unit>
        <trans-unit id="16de25af888480da1af57a71855f3e8c515dcb61" translate="yes" xml:space="preserve">
          <source>CODE</source>
          <target state="translated">CODE</target>
        </trans-unit>
        <trans-unit id="8a81c4f5d7ebf0af1540db862699627a91092359" translate="yes" xml:space="preserve">
          <source>CODE EXAMPLES</source>
          <target state="translated">代码示例</target>
        </trans-unit>
        <trans-unit id="e00c531b83778b8e9867578bc4976f46546c5a61" translate="yes" xml:space="preserve">
          <source>CODE REFERENCES</source>
          <target state="translated">参考代码</target>
        </trans-unit>
        <trans-unit id="440677eb0b9f2ced4b57b4cf4a1f2a4041acaf2f" translate="yes" xml:space="preserve">
          <source>CODE reference. The subroutine should return a hash reference. The hash may contain further attributes, e.g. {LIBS =&amp;gt; ...}, that have to be determined by some evaluation method.</source>
          <target state="translated">CODE参考。该子例程应返回一个哈希引用。散列可以包含必须通过某种评估方法确定的其他属性，例如{LIBS =&amp;gt; ...}。</target>
        </trans-unit>
        <trans-unit id="2f975202aa1b4783c29e4937429d2b66fab5169e" translate="yes" xml:space="preserve">
          <source>CODE: directive is used which sets ST(0) explicitly.</source>
          <target state="translated">CODE:使用的是显式设置ST(0)的指令。</target>
        </trans-unit>
        <trans-unit id="a057830a61bb847750f9a416ef2afe8f0db78c7a" translate="yes" xml:space="preserve">
          <source>COLOUR</source>
          <target state="translated">COLOUR</target>
        </trans-unit>
        <trans-unit id="2d5c5615b998898e7768ec56433dbebafc08a4d0" translate="yes" xml:space="preserve">
          <source>COLUMNS</source>
          <target state="translated">COLUMNS</target>
        </trans-unit>
        <trans-unit id="8a9cbc4396b103e6b251b294230c1bb9eed38e2f" translate="yes" xml:space="preserve">
          <source>COM1</source>
          <target state="translated">COM1</target>
        </trans-unit>
        <trans-unit id="3a38ee1d9bd08c8be0112c20a3c4f3c5309ce957" translate="yes" xml:space="preserve">
          <source>COMMAND.COM</source>
          <target state="translated">COMMAND.COM</target>
        </trans-unit>
        <trans-unit id="c13bbfcc6932afed8045a8c6d2be122bbea2f4a3" translate="yes" xml:space="preserve">
          <source>COMMON CHARACTER CODE SETS</source>
          <target state="translated">常用字符代码集</target>
        </trans-unit>
        <trans-unit id="3565dc34b7a16c1ebb52c1be4a3b9554d589b634" translate="yes" xml:space="preserve">
          <source>COMMON MISTAKES</source>
          <target state="translated">常见误区</target>
        </trans-unit>
        <trans-unit id="d3bd9328431af889713253c0fe82cf459fd62fdd" translate="yes" xml:space="preserve">
          <source>COMMON PITFALLS</source>
          <target state="translated">常见弊端</target>
        </trans-unit>
        <trans-unit id="3b75e36fb6f8799ec17d763957648965ceb0bf19" translate="yes" xml:space="preserve">
          <source>COMMON PROBLEMS</source>
          <target state="translated">常见的问题</target>
        </trans-unit>
        <trans-unit id="3631d60b3c3dad75e7023cf75ede2d8db90dced0" translate="yes" xml:space="preserve">
          <source>COMMON QUESTIONS</source>
          <target state="translated">常见问题:</target>
        </trans-unit>
        <trans-unit id="34c150933a6aa70510a6417b9f759a880de15e63" translate="yes" xml:space="preserve">
          <source>COMMON TASKS</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5931c475df95ba4c0e69e8680b4b2746d7dcadbd" translate="yes" xml:space="preserve">
          <source>COMPATIBILITY</source>
          <target state="translated">COMPATIBILITY</target>
        </trans-unit>
        <trans-unit id="abe070716581f0b619231b1ebef8e7055b0ca326" translate="yes" xml:space="preserve">
          <source>COMPILE</source>
          <target state="translated">COMPILE</target>
        </trans-unit>
        <trans-unit id="1b93c2f6af1a728937d801492e8514e231fe859d" translate="yes" xml:space="preserve">
          <source>COMPILING AND INSTALLING PERL ON PLAN 9</source>
          <target state="translated">在PLAN 9上编译和安装PERL。</target>
        </trans-unit>
        <trans-unit id="a3dbb0f2d743369125c33547e4a98f6e69c718ea" translate="yes" xml:space="preserve">
          <source>COMPRESS/UNCOMPRESS</source>
          <target state="translated">COMPRESS/UNCOMPRESS</target>
        </trans-unit>
        <trans-unit id="7679a072c92896a2f8b38c43a6b6959d5d9cd9c5" translate="yes" xml:space="preserve">
          <source>CON</source>
          <target state="translated">CON</target>
        </trans-unit>
        <trans-unit id="dbbd6e677093ab33626116ddbe95a8116b822da0" translate="yes" xml:space="preserve">
          <source>CONCEPTS</source>
          <target state="translated">CONCEPTS</target>
        </trans-unit>
        <trans-unit id="ce2288334f1137f427c025bf4db30086aa2e6ccd" translate="yes" xml:space="preserve">
          <source>CONCLUSION</source>
          <target state="translated">CONCLUSION</target>
        </trans-unit>
        <trans-unit id="54b45ea0b830c111f200238254cbe142d992ceb9" translate="yes" xml:space="preserve">
          <source>CONCURRENT ACCESS TO FILES</source>
          <target state="translated">协同访问文件</target>
        </trans-unit>
        <trans-unit id="2fb60054b43a25d7a958d3d19bdb1aa7809577a8" translate="yes" xml:space="preserve">
          <source>CONFIG</source>
          <target state="translated">CONFIG</target>
        </trans-unit>
        <trans-unit id="b6e52e4d80314fc8a5ba1a7faeb4aa6cd672bec0" translate="yes" xml:space="preserve">
          <source>CONFIGURATION</source>
          <target state="translated">CONFIGURATION</target>
        </trans-unit>
        <trans-unit id="d5e00d8ba45995ef9ab303972f7c1a6cae02996a" translate="yes" xml:space="preserve">
          <source>CONFIGURATION VARIABLES</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d4267ae349f13bd1612b2ef41ef2fe7a1e068f48" translate="yes" xml:space="preserve">
          <source>CONFIGURE</source>
          <target state="translated">CONFIGURE</target>
        </trans-unit>
        <trans-unit id="0bcdf5cc47cad9c41938edcc7524d271413daa98" translate="yes" xml:space="preserve">
          <source>CONFIGURE PERL ON CYGWIN</source>
          <target state="translated">在CYGWIN上配置PERL。</target>
        </trans-unit>
        <trans-unit id="22733669b75038bbdd66305b9f339bad99694375" translate="yes" xml:space="preserve">
          <source>CONFIGURE_REQUIRES</source>
          <target state="translated">CONFIGURE_REQUIRES</target>
        </trans-unit>
        <trans-unit id="86446751ae319594b5e453b782ebdfc8c4bf543b" translate="yes" xml:space="preserve">
          <source>CONFIGURING</source>
          <target state="translated">CONFIGURING</target>
        </trans-unit>
        <trans-unit id="a0e4619a67d77836e15c84ab1f7acbadf6b5e068" translate="yes" xml:space="preserve">
          <source>CONSTANT ONLY</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="65df4be803801cf76d0b33102b49347c0f49a265" translate="yes" xml:space="preserve">
          <source>CONSTANTS</source>
          <target state="translated">CONSTANTS</target>
        </trans-unit>
        <trans-unit id="9d4cd9e346a27cff016ae855f03e070521487596" translate="yes" xml:space="preserve">
          <source>CONSTRUCT</source>
          <target state="translated">CONSTRUCT</target>
        </trans-unit>
        <trans-unit id="6ed66fd18a1b175704db533d3865fa2679863e6d" translate="yes" xml:space="preserve">
          <source>CONSTRUCTOR</source>
          <target state="translated">CONSTRUCTOR</target>
        </trans-unit>
        <trans-unit id="a8bbeb234bce1b12584f91c5efbcf549dcdfea50" translate="yes" xml:space="preserve">
          <source>CONSTRUCTOR ARGUMENTS</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a81e8ee10f05992e9990c024071dc9ef826e1cd3" translate="yes" xml:space="preserve">
          <source>CONSTRUCTORS</source>
          <target state="translated">CONSTRUCTORS</target>
        </trans-unit>
        <trans-unit id="740fabb870d6ed652cd56a6f6b4cabc2048431f9" translate="yes" xml:space="preserve">
          <source>CONTACT</source>
          <target state="translated">CONTACT</target>
        </trans-unit>
        <trans-unit id="27c8094199d30ca2b1fd54cbe86c56a5369fe808" translate="yes" xml:space="preserve">
          <source>CONTACTING US</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="238a131a3e8eb98d1fc5b27d882ca40b7618fd2a" translate="yes" xml:space="preserve">
          <source>CONTENT</source>
          <target state="translated">CONTENT</target>
        </trans-unit>
        <trans-unit id="c7fb4a1c86b7fc71a83ddb8d52b446a1a692bd4f" translate="yes" xml:space="preserve">
          <source>CONTENTS</source>
          <target state="translated">CONTENTS</target>
        </trans-unit>
        <trans-unit id="6eb1660530253dbbb9bc0adce6c7c2db98f6c11e" translate="yes" xml:space="preserve">
          <source>CONTRIBUTED MODULES</source>
          <target state="translated">贡献模块</target>
        </trans-unit>
        <trans-unit id="378eb0be276c8f7e7ce971475f7e96915511bccb" translate="yes" xml:space="preserve">
          <source>CONTRIBUTING</source>
          <target state="translated">CONTRIBUTING</target>
        </trans-unit>
        <trans-unit id="c00c0afca84109e3fb2b98c8209ef559a912b256" translate="yes" xml:space="preserve">
          <source>CONTRIBUTORS</source>
          <target state="translated">CONTRIBUTORS</target>
        </trans-unit>
        <trans-unit id="3c270e7e648d60e989f665180ac5841d2f501b46" translate="yes" xml:space="preserve">
          <source>CONTROLLING LOOKUP FAILURE</source>
          <target state="translated">控制查找失败。</target>
        </trans-unit>
        <trans-unit id="56e1ec5824af8dff3fb44acbb1f5889b6031d924" translate="yes" xml:space="preserve">
          <source>CONVENTIONS</source>
          <target state="translated">CONVENTIONS</target>
        </trans-unit>
        <trans-unit id="bb5de08378fdc79cf1e8f681e4066f1cb85bb028" translate="yes" xml:space="preserve">
          <source>CONVERSIONS</source>
          <target state="translated">CONVERSIONS</target>
        </trans-unit>
        <trans-unit id="e1146aff355e08a86787f760b889571c858e8593" translate="yes" xml:space="preserve">
          <source>COOKBOOK</source>
          <target state="translated">COOKBOOK</target>
        </trans-unit>
        <trans-unit id="9510141c24a403496c1dfba8b0ab986988f95879" translate="yes" xml:space="preserve">
          <source>COORDINATE SYSTEMS</source>
          <target state="translated">协调系统</target>
        </trans-unit>
        <trans-unit id="c51ce576d0d85de4e554620a3b7e0dd309045090" translate="yes" xml:space="preserve">
          <source>COP Hint Hashes</source>
          <target state="translated">COP Hint Hashes</target>
        </trans-unit>
        <trans-unit id="22ad88b10bee537423c13139a4d2b08d579efc3e" translate="yes" xml:space="preserve">
          <source>COP Hint Reading</source>
          <target state="translated">COP提示阅读</target>
        </trans-unit>
        <trans-unit id="e352fc138c5e488dc34254c3ee2e99e3e9aaf288" translate="yes" xml:space="preserve">
          <source>COPYRIGHT</source>
          <target state="translated">COPYRIGHT</target>
        </trans-unit>
        <trans-unit id="9c7e4e94b44caac6a4f40ca3467d6883ed67cf24" translate="yes" xml:space="preserve">
          <source>COPYRIGHT &amp;amp; LICENSE</source>
          <target state="translated">版权和许可</target>
        </trans-unit>
        <trans-unit id="fd93171470739cb1a4e64e6ea953d8c1dd9e7c3a" translate="yes" xml:space="preserve">
          <source>COPYRIGHT AND DISCLAIMER</source>
          <target state="translated">版权和免责声明</target>
        </trans-unit>
        <trans-unit id="aed47af09308ae3a4fa8a24efc25bc20b8d6091d" translate="yes" xml:space="preserve">
          <source>COPYRIGHT AND DISCLAIMERS</source>
          <target state="translated">版权和免责声明</target>
        </trans-unit>
        <trans-unit id="0524ce058903ad04ed18326112dd9695f4ac4f56" translate="yes" xml:space="preserve">
          <source>COPYRIGHT AND LICENCE</source>
          <target state="translated">版权和许可</target>
        </trans-unit>
        <trans-unit id="d7f1de266854e2b8d4c927372f1242e7739925ed" translate="yes" xml:space="preserve">
          <source>COPYRIGHT AND LICENSE</source>
          <target state="translated">版权和许可</target>
        </trans-unit>
        <trans-unit id="8c9b991a9d45dee993d0ee634ba8eafd7815c6a3" translate="yes" xml:space="preserve">
          <source>COPYRIGHT and LICENSE</source>
          <target state="translated">版权和许可</target>
        </trans-unit>
        <trans-unit id="b2adcad6cf0cf6a066258c4fd1d02420f1966a91" translate="yes" xml:space="preserve">
          <source>COP_SEQ_RANGE_HIGH</source>
          <target state="translated">COP_SEQ_RANGE_HIGH</target>
        </trans-unit>
        <trans-unit id="a9b392a8220f4c5f1bcb88a16ab6a09829f1ffc1" translate="yes" xml:space="preserve">
          <source>COP_SEQ_RANGE_LOW</source>
          <target state="translated">COP_SEQ_RANGE_LOW</target>
        </trans-unit>
        <trans-unit id="6d917c2df32bb3f8fb6b5f8e529bb779c3dca6f7" translate="yes" xml:space="preserve">
          <source>CORE</source>
          <target state="translated">CORE</target>
        </trans-unit>
        <trans-unit id="9f2a7e4446d753ffa86ebd32d2855d851f9cf12a" translate="yes" xml:space="preserve">
          <source>CORE - Namespace for Perl's core routines</source>
          <target state="translated">CORE-Perl核心例程的命名空间。</target>
        </trans-unit>
        <trans-unit id="497675c86e638bfe224cc68e3f05d28dcf571f18" translate="yes" xml:space="preserve">
          <source>CORE::%s is not a keyword</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ea0b6538392d829d8b749d944b7acd94dee0ddb6" translate="yes" xml:space="preserve">
          <source>CPAN</source>
          <target state="translated">CPAN</target>
        </trans-unit>
        <trans-unit id="a6110e98d6d5509cfa9c7e73794ab71e46a695de" translate="yes" xml:space="preserve">
          <source>CPAN - query, download and build perl modules from CPAN sites</source>
          <target state="translated">CPAN-从CPAN站点查询、下载和构建perl模块。</target>
        </trans-unit>
        <trans-unit id="640c7f36ffad456a54e80bb77b215b4df80f86d4" translate="yes" xml:space="preserve">
          <source>CPAN Ratings</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f5cb991183e9576ae99c7af8774c4d59270235f0" translate="yes" xml:space="preserve">
          <source>CPAN TESTERS AND PERL SMOKERS</source>
          <target state="translated">CPAN测试员和PERL吸烟者。</target>
        </trans-unit>
        <trans-unit id="b04380d2ad945f75e3aa967dafb36ed58ba766cd" translate="yes" xml:space="preserve">
          <source>CPAN Testers</source>
          <target state="translated">CPAN测试器</target>
        </trans-unit>
        <trans-unit id="863161d001f9ccb830b592052aeebdcb0078239b" translate="yes" xml:space="preserve">
          <source>CPAN Testers Matrix</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="01505e76b90321ebd4493c61034cb8a884911e63" translate="yes" xml:space="preserve">
          <source>CPAN also keeps track of what it has done within the current session and doesn't try to build a package a second time regardless of whether it succeeded or not. It does not repeat a test run if the test has been run successfully before. Same for install runs.</source>
          <target state="translated">CPAN也会跟踪它在当前会话中所做的工作,无论是否成功,它都不会尝试第二次构建一个包。如果测试之前已经成功运行,它不会重复测试运行。安装运行也是如此。</target>
        </trans-unit>
        <trans-unit id="d978419581e9be6ec9c55f53ba43e4e7f68766bd" translate="yes" xml:space="preserve">
          <source>CPAN can now help you select a &quot;good&quot; mirror, based on which ones have the lowest 'ping' round-trip times. From the shell, use the command 'o conf init urllist' and allow CPAN to automatically select mirrors for you.</source>
          <target state="translated">CPAN 现在可以帮助您选择一个 &quot;好 &quot;的镜像,基于哪些镜像的 &quot;ping &quot;往返时间最低。在shell中,使用 &quot;o conf init urllist &quot;命令,让CPAN为您自动选择镜像。</target>
        </trans-unit>
        <trans-unit id="5ef4af0178192ba3f8dbe6d0b6def5f18be1c055" translate="yes" xml:space="preserve">
          <source>CPAN can provide the best examples. &lt;a href=&quot;Test::Simple&quot;&gt;Test::Simple&lt;/a&gt;, &lt;a href=&quot;Test::More&quot;&gt;Test::More&lt;/a&gt;, &lt;a href=&quot;Test::Exception&quot;&gt;Test::Exception&lt;/a&gt; and &lt;a href=&quot;Test::Differences&quot;&gt;Test::Differences&lt;/a&gt; all use Test::Builder.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9f419c26e2ea47eba870171b0304a0f12d770bcb" translate="yes" xml:space="preserve">
          <source>CPAN can provide the best examples. &lt;a href=&quot;simple&quot;&gt;Test::Simple&lt;/a&gt;, &lt;a href=&quot;more&quot;&gt;Test::More&lt;/a&gt;, &lt;a href=&quot;http://search.cpan.org/perldoc/Test::Exception&quot;&gt;Test::Exception&lt;/a&gt; and &lt;a href=&quot;http://search.cpan.org/perldoc/Test::Differences&quot;&gt;Test::Differences&lt;/a&gt; all use Test::Builder.</source>
          <target state="translated">CPAN可以提供最好的例子。&lt;a href=&quot;simple&quot;&gt;Test :: Simple&lt;/a&gt;，&lt;a href=&quot;more&quot;&gt;Test :: More&lt;/a&gt;，&lt;a href=&quot;http://search.cpan.org/perldoc/Test::Exception&quot;&gt;Test :: Exception&lt;/a&gt;和&lt;a href=&quot;http://search.cpan.org/perldoc/Test::Differences&quot;&gt;Test :: Differences&lt;/a&gt;都使用Test :: Builder。</target>
        </trans-unit>
        <trans-unit id="9b25cd0f5375c5eab72f3ffe3e62897e52e03cea" translate="yes" xml:space="preserve">
          <source>CPAN checks whether an install is needed and prints</source>
          <target state="translated">CPAN检查是否需要安装,并打印出</target>
        </trans-unit>
        <trans-unit id="d5ac7dd05001d7d37e2f43d1797c997c4df20e68" translate="yes" xml:space="preserve">
          <source>CPAN has several JAPH programs at &lt;a href=&quot;http://www.cpan.org/misc/japh&quot;&gt;http://www.cpan.org/misc/japh&lt;/a&gt;.</source>
          <target state="translated">CPAN在&lt;a href=&quot;http://www.cpan.org/misc/japh&quot;&gt;http://www.cpan.org/misc/japh上&lt;/a&gt;有几个JAPH程序。</target>
        </trans-unit>
        <trans-unit id="02833bc73787fea6b5bfa63c891711c6ecf458e5" translate="yes" xml:space="preserve">
          <source>CPAN module &lt;code&gt;&lt;a href=&quot;Unicode::Regex::Set&quot;&gt;Unicode::Regex::Set&lt;/a&gt;&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="73829bcf0ad0c4b896f34810c840c5f0243a137e" translate="yes" xml:space="preserve">
          <source>CPAN module &lt;code&gt;&lt;a href=&quot;http://search.cpan.org/perldoc/Unicode::Regex::Set&quot;&gt;Unicode::Regex::Set&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">CPAN模块 &lt;code&gt;&lt;a href=&quot;http://search.cpan.org/perldoc/Unicode::Regex::Set&quot;&gt;Unicode::Regex::Set&lt;/a&gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="ec0e8e76dd47186c4a257a69793cc4b0fbd9812e" translate="yes" xml:space="preserve">
          <source>CPAN packages can be digitally signed by authors and thus verified with the security provided by strong cryptography. The exact mechanism is defined in the Module::Signature module. While this is generally considered a good thing, it is not always convenient to the end user to install modules that are signed incorrectly or where the key of the author is not available or where some prerequisite for Module::Signature has a bug and so on.</source>
          <target state="translated">CPAN包可以由作者进行数字签名,从而用强密码学提供的安全性进行验证。具体机制在Module::Signature模块中定义。虽然一般认为这是一件好事,但对于最终用户来说,如果安装的模块签名不正确,或者是作者的密钥不可用,或者是Module::Signature的某些前提条件存在bug等等,就不一定方便了。</target>
        </trans-unit>
        <trans-unit id="b51337fb370844b9eff5cf2f0d2334791161629e" translate="yes" xml:space="preserve">
          <source>CPAN stands for Comprehensive Perl Archive Network, a multi-gigabyte archive replicated on hundreds of machines all over the world. CPAN contains tens of thousands of modules and extensions, source code and documentation, designed for</source>
          <target state="translated">CPAN是Comprehensive Perl Archive Network的缩写,是一个在全世界数百台机器上复制的多GB档案。CPAN包含了数以万计的模块和扩展、源代码和文档,这些模块和扩展的设计是为</target>
        </trans-unit>
        <trans-unit id="4a083d1c70360c499c212a22f42c02ebc10a2b7e" translate="yes" xml:space="preserve">
          <source>CPAN stands for Comprehensive Perl Archive Network; it's a globally replicated trove of Perl materials, including documentation, style guides, tricks and traps, alternate ports to non-Unix systems and occasional binary distributions for these. Search engines for CPAN can be found at &lt;a href=&quot;http://www.cpan.org/&quot;&gt;http://www.cpan.org/&lt;/a&gt;</source>
          <target state="translated">CPAN代表综合Perl存档网络；它是Perl材料的全球复制品，包括文档，样式指南，技巧和陷阱，非Unix系统的备用端口以及偶尔的二进制发行版。可以在&lt;a href=&quot;http://www.cpan.org/&quot;&gt;http://www.cpan.org/&lt;/a&gt;上找到CPAN的搜索引擎。</target>
        </trans-unit>
        <trans-unit id="db4a7f495a75e5647a60a515b464cd126cd6fe2f" translate="yes" xml:space="preserve">
          <source>CPAN stands for Comprehensive Perl Archive Network; it's a globally replicated trove of Perl materials, including documentation, style guides, tricks and traps, alternate ports to non-Unix systems and occasional binary distributions for these. Search engines for CPAN can be found at https://www.cpan.org/</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="11b7513cf5ed0783e222931555703c39249404ca" translate="yes" xml:space="preserve">
          <source>CPAN uses ExtUtils::MakeMaker's prompt() function to ask its questions, so if you set the PERL_MM_USE_DEFAULT environment variable, you shouldn't be asked any questions at all (assuming the modules you are installing are nice about obeying that variable as well):</source>
          <target state="translated">CPAN使用ExtUtils::MakeMaker的prompt()函数来询问它的问题,所以如果你设置了PERL_MM_USE_DEFAULT环境变量,你应该不会被问到任何问题(假设你正在安装的模块也很好地服从了这个变量)。</target>
        </trans-unit>
        <trans-unit id="763ab2cd14f13622b64f1d364ae89ff5e930c5e0" translate="yes" xml:space="preserve">
          <source>CPAN version is currently maintained by S&amp;eacute;bastien Aperghis-Tramoni &amp;lt;sebastien@aperghis.net&amp;gt;.</source>
          <target state="translated">CPAN版本当前由S&amp;eacute;bastienAperghis-Tramoni &amp;lt;sebastien@aperghis.net&amp;gt;维护。</target>
        </trans-unit>
        <trans-unit id="d022fca84f913595d0e465957aa3ec07aa26e29a" translate="yes" xml:space="preserve">
          <source>CPAN version produced by Jerry D. Hedden &amp;lt;jdhedden AT cpan DOT org&amp;gt;</source>
          <target state="translated">Jerry D. Hedden制作的CPAN版本&amp;lt;jdhedden AT cpan DOT org&amp;gt;</target>
        </trans-unit>
        <trans-unit id="df1b7ad617e594d1fcea7ef95394577f7d4285ee" translate="yes" xml:space="preserve">
          <source>CPAN version produced by Jerry D. Hedden &amp;lt;jdhedden AT cpan DOT org&amp;gt;.</source>
          <target state="translated">由Jerry D. Hedden &amp;lt;jdhedden AT cpan DOT org&amp;gt;生产的CPAN版本。</target>
        </trans-unit>
        <trans-unit id="deb6d0c2ba6a1e511bb2a73b69254f1705154545" translate="yes" xml:space="preserve">
          <source>CPAN, &lt;a href=&quot;http://www.cpan.org/&quot;&gt;http://www.cpan.org/&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="487de831d21a908d502622e00613c7b641cb5b29" translate="yes" xml:space="preserve">
          <source>CPAN, or the Comprehensive Perl Archive Network &lt;a href=&quot;http://www.cpan.org/&quot;&gt;http://www.cpan.org/&lt;/a&gt;, is a replicated, worldwide repository of Perl software. See &lt;a href=&quot;#What-modules-and-extensions-are-available-for-Perl%3F-What-is-CPAN%3F&quot;&gt;What is CPAN?&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a3c7ec93761c4b99669cfe3abe56f987f4d86e7b" translate="yes" xml:space="preserve">
          <source>CPAN, or the Comprehensive Perl Archive Network &lt;a href=&quot;http://www.cpan.org/&quot;&gt;http://www.cpan.org/&lt;/a&gt;, is a replicated, worldwide repository of Perl software. See &lt;a href=&quot;#What-modules-and-extensions-are-available-for-Perl%3f-What-is-CPAN%3f&quot;&gt;What is CPAN?&lt;/a&gt;.</source>
          <target state="translated">CPAN或综合Perl存档网络&lt;a href=&quot;http://www.cpan.org/&quot;&gt;http://www.cpan.org/&lt;/a&gt;是Perl软件的全球复制源。请参阅&lt;a href=&quot;#What-modules-and-extensions-are-available-for-Perl%3f-What-is-CPAN%3f&quot;&gt;什么是CPAN？&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="d24df83c42548921d5e891bad0ec265b58c5632b" translate="yes" xml:space="preserve">
          <source>CPAN.pm</source>
          <target state="translated">CPAN.pm</target>
        </trans-unit>
        <trans-unit id="df07d81df98f66bb5cc686dd3a7b7369a164da96" translate="yes" xml:space="preserve">
          <source>CPAN.pm can introduce some randomness when using hosts for download that are configured in the urllist parameter. Enter a numeric value between 0 and 1 to indicate how often you want to let CPAN.pm try a random host from the urllist. A value of one specifies to always use a random host as the first try. A value of zero means no randomness at all. Anything in between specifies how often, on average, a random host should be tried first.</source>
          <target state="translated">当使用 urllist 参数中配置的主机进行下载时,CPAN.pm 会引入一些随机性。输入一个介于 0 和 1 之间的数值来表示你想让 CPAN.pm 多久尝试一次 urllist 中的随机主机。值为 1 表示总是使用随机主机作为第一次尝试。值为 0 表示完全没有随机性。任何介于两者之间的值都表示平均每隔多长时间应该先尝试一次随机主机。</target>
        </trans-unit>
        <trans-unit id="8be548e1857808a4c33f06e8483679790bde10ef" translate="yes" xml:space="preserve">
          <source>CPAN.pm can limit the size of the disk area for keeping the build directories with all the intermediate files.</source>
          <target state="translated">CPAN.pm可以限制磁盘区域的大小,以便保留包含所有中间文件的构建目录。</target>
        </trans-unit>
        <trans-unit id="f21743f9fae507577e1ebe77ee42077c588936ab" translate="yes" xml:space="preserve">
          <source>CPAN.pm can store customized build environments based on regular expressions for distribution names. These are YAML files where the default options for CPAN.pm and the environment can be overridden and dialog sequences can be stored that can later be executed by an Expect.pm object. The CPAN.pm distribution comes with some prefab YAML files that cover sample distributions that can be used as blueprints to store your own prefs. Please check out the distroprefs/ directory of the CPAN.pm distribution to get a quick start into the prefs system.</source>
          <target state="translated">CPAN.pm可以基于分发名称的正则表达式来存储自定义的构建环境,这些都是YAML文件,CPAN.pm和环境的默认选项可以被覆盖,对话序列可以存储在以后由Expect.pm对象执行。这些都是YAML文件,在这些文件中,CPAN.pm和环境的默认选项可以被重写,并且可以存储对话序列,这些对话序列可以在以后被Expect.pm对象执行。CPAN.pm发行版附带了一些预制的YAML文件,这些文件涵盖了样本发行版,可以作为蓝本来存储你自己的prefs。请查看CPAN.pm发行版的distroprefs/目录,以快速进入prefs系统。</target>
        </trans-unit>
        <trans-unit id="fe8999832e8cb3e24c5ee5786438c2eb7045f528" translate="yes" xml:space="preserve">
          <source>CPAN.pm changes the current working directory often and needs to determine its own current working directory. By default it uses Cwd::cwd, but if for some reason this doesn't work on your system, configure alternatives according to the following table:</source>
          <target state="translated">CPAN.pm经常改变当前的工作目录,需要确定自己的当前工作目录。默认情况下,它使用Cwd::cwd,但如果由于某些原因,这在你的系统中不起作用,请根据下表配置替代方案。</target>
        </trans-unit>
        <trans-unit id="110953d17daedc5ab884b800e79aa6017f230c3c" translate="yes" xml:space="preserve">
          <source>CPAN.pm changes the current working directory often and needs to determine its own current working directory. Per default it uses Cwd::cwd but if this doesn't work on your system for some reason, alternatives can be configured according to the following table:</source>
          <target state="translated">CPAN.pm经常改变当前工作目录,因此需要确定自己的当前工作目录。默认情况下,它使用Cwd::cwd,但如果由于某些原因,这在你的系统中不起作用,可以根据下表配置替代方案。</target>
        </trans-unit>
        <trans-unit id="316ae9b3e749a01c06c792f2cfcc80c4846f19f6" translate="yes" xml:space="preserve">
          <source>CPAN.pm ignores SIGPIPE. If the user sets &lt;code&gt;inactivity_timeout&lt;/code&gt; , a SIGALRM is used during the run of the &lt;code&gt;perl Makefile.PL&lt;/code&gt; or &lt;code&gt;perl
Build.PL&lt;/code&gt; subprocess. A SIGALRM is also used during module version parsing, and is controlled by &lt;code&gt;version_timeout&lt;/code&gt; .</source>
          <target state="translated">CPAN.pm忽略SIGPIPE。如果用户设置 &lt;code&gt;inactivity_timeout&lt;/code&gt; ，则在运行 &lt;code&gt;perl Makefile.PL&lt;/code&gt; 或 &lt;code&gt;perl Build.PL&lt;/code&gt; 子进程期间将使用SIGALRM 。在模块版本解析期间还使用了SIGALRM，并由 &lt;code&gt;version_timeout&lt;/code&gt; 控制。</target>
        </trans-unit>
        <trans-unit id="190c010b5387bba4ea2b42cb563bd4dbf19face7" translate="yes" xml:space="preserve">
          <source>CPAN.pm installs signal handlers for SIGINT and SIGTERM. While you are in the cpan-shell, it is intended that you can press &lt;code&gt;^C&lt;/code&gt; anytime and return to the cpan-shell prompt. A SIGTERM will cause the cpan-shell to clean up and leave the shell loop. You can emulate the effect of a SIGTERM by sending two consecutive SIGINTs, which usually means by pressing &lt;code&gt;^C&lt;/code&gt; twice.</source>
          <target state="translated">CPAN.pm为SIGINT和SIGTERM安装信号处理程序。当您在cpan-shell中时，可以随时按 &lt;code&gt;^C&lt;/code&gt; 并返回到cpan-shell提示符。 SIGTERM将导致cpan-shell清理并离开shell循环。您可以通过发送两个连续的SIGINT来模拟SIGTERM的效果，这通常意味着两次按 &lt;code&gt;^C&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="74c9de97c18d0f26d42b5dbeeae85623299ae97e" translate="yes" xml:space="preserve">
          <source>CPAN.pm is regularly tested to run under 5.005 and assorted newer versions. It is getting more and more difficult to get the minimal prerequisites working on older perls. It is close to impossible to get the whole Bundle::CPAN working there. If you're in the position to have only these old versions, be advised that CPAN is designed to work fine without the Bundle::CPAN installed.</source>
          <target state="translated">CPAN.pm定期测试在5.005和各种新版本下运行。要让最小的先决条件在老版本的 perls 上运行越来越难了。要让整个 Bundle::CPAN 在那里工作几乎是不可能的。如果您只有这些旧版本,请注意,CPAN 的设计是为了在没有安装 Bundle::CPAN 的情况下也能正常工作。</target>
        </trans-unit>
        <trans-unit id="cf1353490c4d7670619296c8008a7613115046dd" translate="yes" xml:space="preserve">
          <source>CPAN.pm sends all the good stuff either to STDOUT, or to a temp file if $CPAN::Be_Silent is set. I have to intercept that output so I can find out what happened.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9dede3b8abe89d4a573f74c512265cae8a956106" translate="yes" xml:space="preserve">
          <source>CPAN.pm will then fetch the index files from one of the CPAN sites that come at the beginning of urllist. It will later check for each module to see whether there is a local copy of the most recent version.</source>
          <target state="translated">CPAN.pm 会从 urllist 开头的 CPAN 站点中获取索引文件。稍后它将检查每个模块是否有最新版本的本地副本。</target>
        </trans-unit>
        <trans-unit id="2867ea997c1ecbeaa882b9d340cc76b94bdae145" translate="yes" xml:space="preserve">
          <source>CPAN.pm works nicely without network access, too. If you maintain machines that are not networked at all, you should consider working with &lt;code&gt;file:&lt;/code&gt; URLs. You'll have to collect your modules somewhere first. So you might use CPAN.pm to put together all you need on a networked machine. Then copy the $CPAN::Config-&amp;gt;{keep_source_where} (but not $CPAN::Config-&amp;gt;{build_dir}) directory on a floppy. This floppy is kind of a personal CPAN. CPAN.pm on the non-networked machines works nicely with this floppy. See also below the paragraph about CD-ROM support.</source>
          <target state="translated">CPAN.pm在没有网络访问的情况下也能很好地工作。如果维护的机器根本没有联网，则应考虑使用 &lt;code&gt;file:&lt;/code&gt; URL。您必须首先在某个地方收集模块。因此，您可以使用CPAN.pm将所有需要的内容汇总到网络计算机上。然后将$ CPAN :: Config-&amp;gt; {keep_source_where}（而不是$ CPAN :: Config-&amp;gt; {build_dir}）目录复制到软盘上。该软盘有点像个人CPAN。未联网的计算机上的CPAN.pm可以很好地与此软盘配合使用。另请参见以下有关CD-ROM支持的段落。</target>
        </trans-unit>
        <trans-unit id="b58516423735ce2c3f324d8402c003fc36fbed0f" translate="yes" xml:space="preserve">
          <source>CPAN/Config.pm</source>
          <target state="translated">CPAN/Config.pm</target>
        </trans-unit>
        <trans-unit id="6faef7e4f766e6858ddfbab08e842e5664c02d4a" translate="yes" xml:space="preserve">
          <source>CPAN::API::HOWTO</source>
          <target state="translated">CPAN::API::HOWTO</target>
        </trans-unit>
        <trans-unit id="7d13c1f45959303dde93846efab68b723f0e1350" translate="yes" xml:space="preserve">
          <source>CPAN::API::HOWTO - a recipe book for programming with CPAN.pm</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="64b36001560d3fac13b876398b3f1a59def99f26" translate="yes" xml:space="preserve">
          <source>CPAN::Author, CPAN::Bundle, CPAN::Module, and CPAN::Distribution inherit this method. It prints the data structure associated with an object. Useful for debugging. Note: the data structure is considered internal and thus subject to change without notice.</source>
          <target state="translated">CPAN::Author、CPAN::Bundle、CPAN::Module 和 CPAN::Distribution 继承了这个方法。它打印与对象相关联的数据结构。对调试很有用。注意:数据结构被认为是内部结构,因此可能会在不通知的情况下发生变化。</target>
        </trans-unit>
        <trans-unit id="2446a32cd0ff78f16b4c1f3133beeac56c5f5898" translate="yes" xml:space="preserve">
          <source>CPAN::Debug</source>
          <target state="translated">CPAN::Debug</target>
        </trans-unit>
        <trans-unit id="3cc1933835ca0280363968e304f73c0a15112e4c" translate="yes" xml:space="preserve">
          <source>CPAN::Debug - internal debugging for CPAN.pm</source>
          <target state="translated">CPAN::Debug-CPAN.pm的内部调试。</target>
        </trans-unit>
        <trans-unit id="8d7cc75d89d8c3bb9bd4511533d5eed2ec9484af" translate="yes" xml:space="preserve">
          <source>CPAN::Distroprefs</source>
          <target state="translated">CPAN::Distroprefs</target>
        </trans-unit>
        <trans-unit id="80ea37d944a5515b88dd77f972d31b6df3134129" translate="yes" xml:space="preserve">
          <source>CPAN::Distroprefs -- read and match distroprefs</source>
          <target state="translated">CPAN::Distroprefs --读取和匹配distroprefs。</target>
        </trans-unit>
        <trans-unit id="5bcd04a88f701c432b5a1ff104f6c8a0d02960ee" translate="yes" xml:space="preserve">
          <source>CPAN::Distroprefs::Pref objects represent individual distroprefs documents. They are constructed automatically as part of &lt;code&gt;success&lt;/code&gt; results from &lt;code&gt;find()&lt;/code&gt; .</source>
          <target state="translated">CPAN :: Distroprefs :: Pref对象代表各个Distroprefs文档。它们是 &lt;code&gt;find()&lt;/code&gt; &lt;code&gt;success&lt;/code&gt; 结果的一部分而自动构建。</target>
        </trans-unit>
        <trans-unit id="0a80c4fbbd0b304da11de451846a67216c923a02" translate="yes" xml:space="preserve">
          <source>CPAN::Distroprefs::Pref objects represent individual distroprefs documents. They are constructed automatically as part of &lt;code&gt;success&lt;/code&gt; results from &lt;code&gt;find()&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a2f3edd9da9fa97ece6eafd83608b4b243b452a0" translate="yes" xml:space="preserve">
          <source>CPAN::FirstTime</source>
          <target state="translated">CPAN::FirstTime</target>
        </trans-unit>
        <trans-unit id="78dc35292a9ffa84e8778b2bc228974b2a98a06d" translate="yes" xml:space="preserve">
          <source>CPAN::FirstTime - Utility for CPAN::Config file Initialization</source>
          <target state="translated">CPAN::FirstTime-用于CPAN::Config文件初始化的实用工具。</target>
        </trans-unit>
        <trans-unit id="e737cd6e08d40b3a667635e5cb83727e8679bd6f" translate="yes" xml:space="preserve">
          <source>CPAN::FirstTime::init()</source>
          <target state="translated">CPAN::FirstTime::init()</target>
        </trans-unit>
        <trans-unit id="85ea935cb2e14666fd64cb017917705b1d6fede5" translate="yes" xml:space="preserve">
          <source>CPAN::HandleConfig</source>
          <target state="translated">CPAN::HandleConfig</target>
        </trans-unit>
        <trans-unit id="24310cde90de0fb64790326e96a727677d4e7601" translate="yes" xml:space="preserve">
          <source>CPAN::HandleConfig - internal configuration handling for CPAN.pm</source>
          <target state="translated">CPAN::HandleConfig-CPAN.pm的内部配置处理。</target>
        </trans-unit>
        <trans-unit id="64057ceb28c792089f8152cbd3da3bcade5223e9" translate="yes" xml:space="preserve">
          <source>CPAN::Kwalify</source>
          <target state="translated">CPAN::Kwalify</target>
        </trans-unit>
        <trans-unit id="a2e5f91adff087cfa00a37e97d84ee7727243629" translate="yes" xml:space="preserve">
          <source>CPAN::Kwalify - Interface between CPAN.pm and Kwalify.pm</source>
          <target state="translated">CPAN::Kwalify-CPAN.pm和Kwalify.pm之间的接口。</target>
        </trans-unit>
        <trans-unit id="4b8f36fffdfa53be5f4b115ae8913d434ac5c6b1" translate="yes" xml:space="preserve">
          <source>CPAN::Meta</source>
          <target state="translated">CPAN::Meta</target>
        </trans-unit>
        <trans-unit id="48ad65740fe63343931a8656187eafec5955c57f" translate="yes" xml:space="preserve">
          <source>CPAN::Meta - the distribution metadata for a CPAN dist</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="73001d880b33350252b208c4e0748fe317bc1a14" translate="yes" xml:space="preserve">
          <source>CPAN::Meta provides a simple class to represent this distribution metadata (or</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bf488c14acf7130238ab7ab864400d15606e4dcc" translate="yes" xml:space="preserve">
          <source>CPAN::Meta::Converter</source>
          <target state="translated">CPAN::Meta::Converter</target>
        </trans-unit>
        <trans-unit id="3a44aacfd90649473b04272bf68b167438021597" translate="yes" xml:space="preserve">
          <source>CPAN::Meta::Converter - Convert CPAN distribution metadata structures</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e74c7b35ace25f98dcab7adda6d087e4d41138b2" translate="yes" xml:space="preserve">
          <source>CPAN::Meta::Feature</source>
          <target state="translated">CPAN::Meta::Feature</target>
        </trans-unit>
        <trans-unit id="e77a117c65ccb9a682ea3baf643ba394032f0657" translate="yes" xml:space="preserve">
          <source>CPAN::Meta::Feature - an optional feature provided by a CPAN distribution</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e05ed4b2cca8e77098c550bdf2e7803252cf0419" translate="yes" xml:space="preserve">
          <source>CPAN::Meta::History</source>
          <target state="translated">CPAN::Meta::History</target>
        </trans-unit>
        <trans-unit id="3d4ef469c0a2fd520f2668dcee9d50b4a92831af" translate="yes" xml:space="preserve">
          <source>CPAN::Meta::History - history of CPAN Meta Spec changes</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="63a20178ce03327fd7ce61d35e3d28cf7389d57e" translate="yes" xml:space="preserve">
          <source>CPAN::Meta::History::Meta_1_0</source>
          <target state="translated">CPAN::Meta::History::Meta_1_0</target>
        </trans-unit>
        <trans-unit id="4c76496897217f6b28f34a5999470faf19da7f33" translate="yes" xml:space="preserve">
          <source>CPAN::Meta::History::Meta_1_0 - Version 1.0 metadata specification for META.yml</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ba913709397d694384cad42b5967ba97f7017dea" translate="yes" xml:space="preserve">
          <source>CPAN::Meta::History::Meta_1_1</source>
          <target state="translated">CPAN::Meta::History::Meta_1_1</target>
        </trans-unit>
        <trans-unit id="7d8f39c866aada4c5c7c3961949f6bc55fb8974c" translate="yes" xml:space="preserve">
          <source>CPAN::Meta::History::Meta_1_1 - Version 1.1 metadata specification for META.yml</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1f20c5ce694247d2eb820323008522888c093e8d" translate="yes" xml:space="preserve">
          <source>CPAN::Meta::History::Meta_1_2</source>
          <target state="translated">CPAN::Meta::History::Meta_1_2</target>
        </trans-unit>
        <trans-unit id="1ac83fedd5492a444b000b4073f44de3c7919193" translate="yes" xml:space="preserve">
          <source>CPAN::Meta::History::Meta_1_2 - Version 1.2 metadata specification for META.yml</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2b035ec656582b467956149f35002359f79c8e55" translate="yes" xml:space="preserve">
          <source>CPAN::Meta::History::Meta_1_3</source>
          <target state="translated">CPAN::Meta::History::Meta_1_3</target>
        </trans-unit>
        <trans-unit id="d7ae7add4211fafefa6b4e8776cab276f84dcc89" translate="yes" xml:space="preserve">
          <source>CPAN::Meta::History::Meta_1_3 - Version 1.3 metadata specification for META.yml</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5ab69aa6faceb5500a76eace17ff9300c464214e" translate="yes" xml:space="preserve">
          <source>CPAN::Meta::History::Meta_1_4</source>
          <target state="translated">CPAN::Meta::History::Meta_1_4</target>
        </trans-unit>
        <trans-unit id="c4026439639f237a4b2722822cbe43bc68b0f0a4" translate="yes" xml:space="preserve">
          <source>CPAN::Meta::History::Meta_1_4 - Version 1.4 metadata specification for META.yml</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b93049ddccd3b5964f6ccdc08c6a2888e17af001" translate="yes" xml:space="preserve">
          <source>CPAN::Meta::Merge</source>
          <target state="translated">CPAN::Meta::Merge</target>
        </trans-unit>
        <trans-unit id="4fe7d2aec8f5226d2a8a01d5327d50b15e085cf1" translate="yes" xml:space="preserve">
          <source>CPAN::Meta::Merge - Merging CPAN Meta fragments</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="59a4bf767d93cb4558936ab83a63cbc35d95b95d" translate="yes" xml:space="preserve">
          <source>CPAN::Meta::Prereqs</source>
          <target state="translated">CPAN::Meta::Prereqs</target>
        </trans-unit>
        <trans-unit id="05ec9fad7ede51b61fe7feb474e02adc2a6d4635" translate="yes" xml:space="preserve">
          <source>CPAN::Meta::Prereqs - a set of distribution prerequisites by phase and type</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="abd64823a6e9d665af8461e2c27c91e2bebb3182" translate="yes" xml:space="preserve">
          <source>CPAN::Meta::Requirements</source>
          <target state="translated">CPAN::Meta::Requirements</target>
        </trans-unit>
        <trans-unit id="f0f14af6a21fdfef215ec198ceb71c2f5ca2993d" translate="yes" xml:space="preserve">
          <source>CPAN::Meta::Requirements - a set of version requirements for a CPAN dist</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="83ae05af348305875670e0df393908708ee5c284" translate="yes" xml:space="preserve">
          <source>CPAN::Meta::Spec</source>
          <target state="translated">CPAN::Meta::Spec</target>
        </trans-unit>
        <trans-unit id="72c4f43258ec93a850621e0bf7f50c5239b4a882" translate="yes" xml:space="preserve">
          <source>CPAN::Meta::Spec - specification for CPAN distribution metadata</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f53b9ec4780637887d4c02075a461cedf9448d3f" translate="yes" xml:space="preserve">
          <source>CPAN::Meta::Validator</source>
          <target state="translated">CPAN::Meta::Validator</target>
        </trans-unit>
        <trans-unit id="86eb5e58240b2848f6d3ea2d072260021ef84be0" translate="yes" xml:space="preserve">
          <source>CPAN::Meta::Validator - validate CPAN distribution metadata structures</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="208f6e92b224465a177e744e188b4255cd284c6e" translate="yes" xml:space="preserve">
          <source>CPAN::Meta::YAML</source>
          <target state="translated">CPAN::Meta::YAML</target>
        </trans-unit>
        <trans-unit id="626d1c9831b7c2685adada5e5c8869b4c0685b60" translate="yes" xml:space="preserve">
          <source>CPAN::Meta::YAML - Read and write a subset of YAML for CPAN Meta files</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8dcc2e6edc3eadab9e78355482bf7252fe18e3ff" translate="yes" xml:space="preserve">
          <source>CPAN::Nox</source>
          <target state="translated">CPAN::Nox</target>
        </trans-unit>
        <trans-unit id="0b944fc036709f45e2abf674dd21a2de916a71a8" translate="yes" xml:space="preserve">
          <source>CPAN::Nox - Wrapper around CPAN.pm without using any XS module</source>
          <target state="translated">CPAN::Nox-围绕CPAN.pm的封装器,无需使用任何XS模块。</target>
        </trans-unit>
        <trans-unit id="4f10b5cd1bc0cc808fb08d652fc8dc5ab07aa1e6" translate="yes" xml:space="preserve">
          <source>CPAN::Plugin</source>
          <target state="translated">CPAN::Plugin</target>
        </trans-unit>
        <trans-unit id="90b38b9fb846cae383975af3b4f6fd3cabdc24ab" translate="yes" xml:space="preserve">
          <source>CPAN::Plugin - Base class for CPAN shell extensions</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="73b3c1c1427c579ea6cd5b109622ba6ef3a76785" translate="yes" xml:space="preserve">
          <source>CPAN::Plugin::Specfile</source>
          <target state="translated">CPAN::Plugin::Specfile</target>
        </trans-unit>
        <trans-unit id="a0e2ea8376440c75cc98c1ad8457bb4032bf2103" translate="yes" xml:space="preserve">
          <source>CPAN::Plugin::Specfile - Proof of concept implementation of a trivial CPAN::Plugin</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cff38ba28ab3cfea4d0464d49309db8969faf6ef" translate="yes" xml:space="preserve">
          <source>CPAN::Queue</source>
          <target state="translated">CPAN::Queue</target>
        </trans-unit>
        <trans-unit id="e3a09726a6ba57409ab3f10ea87af46541484c9f" translate="yes" xml:space="preserve">
          <source>CPAN::Queue - internal queue support for CPAN.pm</source>
          <target state="translated">CPAN::Queue-对CPAN.pm的内部队列支持</target>
        </trans-unit>
        <trans-unit id="349e923ec9cc993c3c5c400728886a4cd805bc87" translate="yes" xml:space="preserve">
          <source>CPAN::SQLite is a layer between the index files that are downloaded from the CPAN and CPAN.pm that speeds up metadata queries and reduces memory consumption of CPAN.pm considerably.</source>
          <target state="translated">CPAN::SQLite是介于从CPAN下载的索引文件和CPAN.pm之间的一层,它可以加快元数据查询的速度,并大大降低CPAN.pm的内存消耗。</target>
        </trans-unit>
        <trans-unit id="b47dcd8919f1f65cec06b9c2d7f965e75c2b1219" translate="yes" xml:space="preserve">
          <source>CPAN::Shell</source>
          <target state="translated">CPAN::Shell</target>
        </trans-unit>
        <trans-unit id="23798a7b15a5d75dd8c6bdfc98d7078c277c16e8" translate="yes" xml:space="preserve">
          <source>CPAN::Tarzip</source>
          <target state="translated">CPAN::Tarzip</target>
        </trans-unit>
        <trans-unit id="814fdd5396978409421856089181c07c58c4c4cf" translate="yes" xml:space="preserve">
          <source>CPAN::Tarzip - internal handling of tar archives for CPAN.pm</source>
          <target state="translated">CPAN::Tarzip-内部处理CPAN.pm的tar压缩文件。</target>
        </trans-unit>
        <trans-unit id="4901e7156541948e262f8f5d98071d2c7b3b87e3" translate="yes" xml:space="preserve">
          <source>CPAN::Version</source>
          <target state="translated">CPAN::Version</target>
        </trans-unit>
        <trans-unit id="30cd4b0821f4765c0d8295e7726cfae9b7fab40e" translate="yes" xml:space="preserve">
          <source>CPAN::Version - utility functions to compare CPAN versions</source>
          <target state="translated">CPAN::Version-用于比较CPAN版本的实用功能。</target>
        </trans-unit>
        <trans-unit id="ec4a1634792e6ece098aa09e476bc1d9ef4268d0" translate="yes" xml:space="preserve">
          <source>CPAN::anycwd($path): Note on config variable getcwd</source>
          <target state="translated">CPAN::anycwd($path)。关于配置变量getcwd的说明</target>
        </trans-unit>
        <trans-unit id="6bf4457df819c8d2b082c5c17c609ae27bb6a63b" translate="yes" xml:space="preserve">
          <source>CPAN::shell([$prompt, $command]) Starting Interactive Mode</source>
          <target state="translated">CPAN::shell([$prompt,$command])启动交互模式</target>
        </trans-unit>
        <trans-unit id="4ffdbed7690fc2f38db76dd54cf504d79c06ee88" translate="yes" xml:space="preserve">
          <source>CPANMINUS</source>
          <target state="translated">CPANMINUS</target>
        </trans-unit>
        <trans-unit id="0300a08f28f15d52b8c0f31d868e80fadb408109" translate="yes" xml:space="preserve">
          <source>CPANPLUS</source>
          <target state="translated">CPANPLUS</target>
        </trans-unit>
        <trans-unit id="cddd63a37f15517811274317a3521885c8465e0c" translate="yes" xml:space="preserve">
          <source>CPANSCRIPT_LOGLEVEL</source>
          <target state="translated">CPANSCRIPT_LOGLEVEL</target>
        </trans-unit>
        <trans-unit id="596893c7ae353e11febbdfc549493341b79250bd" translate="yes" xml:space="preserve">
          <source>CPAN_META_JSON_BACKEND</source>
          <target state="translated">CPAN_META_JSON_BACKEND</target>
        </trans-unit>
        <trans-unit id="56630007ce8f6ea01649aae19d31614ccb2fcfb1" translate="yes" xml:space="preserve">
          <source>CPAN_META_JSON_DECODER</source>
          <target state="translated">CPAN_META_JSON_DECODER</target>
        </trans-unit>
        <trans-unit id="ca1237679e72b0e6f4c9e40aa693972b89e6005f" translate="yes" xml:space="preserve">
          <source>CPAN_OPTS</source>
          <target state="translated">CPAN_OPTS</target>
        </trans-unit>
        <trans-unit id="ff221d4752ce05f5a91bbf1d28b78a7bf7e2ddaa" translate="yes" xml:space="preserve">
          <source>CPU</source>
          <target state="translated">CPU</target>
        </trans-unit>
        <trans-unit id="4a2648ee2c7cdfe4f04963290c94c0f73b1a0296" translate="yes" xml:space="preserve">
          <source>CPU seconds is, in UNIX terms, the user time plus the system time of the process itself, as opposed to the real (wallclock) time and the time spent by the child processes. Less than 0.1 seconds is not accepted (-0.01 as the count, for example, will cause a fatal runtime exception).</source>
          <target state="translated">CPU秒,用UNIX术语来说,就是用户时间加上进程本身的系统时间,与实际(挂钟)时间和子进程花费的时间不同。小于0.1秒是不被接受的(例如,-0.01作为计数,将导致致命的运行时异常)。</target>
        </trans-unit>
        <trans-unit id="8eabeaf9c51703b78032cab60996509e2a9fbc29" translate="yes" xml:space="preserve">
          <source>CPU time</source>
          <target state="translated">CPU时间</target>
        </trans-unit>
        <trans-unit id="ceae75038d81d55818f9c7099cc499bef29e500c" translate="yes" xml:space="preserve">
          <source>CREATING A SOURCE FILTER AS A SEPARATE EXECUTABLE</source>
          <target state="translated">创建一个源过滤器作为一个独立的可执行文件。</target>
        </trans-unit>
        <trans-unit id="440025df559c6a5653bcee40ea212abfedca608a" translate="yes" xml:space="preserve">
          <source>CREATING FORMATTERS</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8f5fc61f95a802dc2f2c87590b81afa3dc2d9f36" translate="yes" xml:space="preserve">
          <source>CREATION</source>
          <target state="translated">CREATION</target>
        </trans-unit>
        <trans-unit id="338f52baadf832c435e6693a6b1e770c010b5681" translate="yes" xml:space="preserve">
          <source>CREDITS</source>
          <target state="translated">CREDITS</target>
        </trans-unit>
        <trans-unit id="e455615ff19fea236c13c0cc8cc42e9a1fb0de9b" translate="yes" xml:space="preserve">
          <source>CRITICAL DETAILS</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4b79357f1f7c4a8b8c01c419e8cd32de82816fa7" translate="yes" xml:space="preserve">
          <source>CROSS-COMPILATION</source>
          <target state="translated">CROSS-COMPILATION</target>
        </trans-unit>
        <trans-unit id="a3d5ec7e72504ad29b8a4c994f24267617037161" translate="yes" xml:space="preserve">
          <source>CRTL_ENV</source>
          <target state="translated">CRTL_ENV</target>
        </trans-unit>
        <trans-unit id="4dd4581105bbe8d44425ee07bb7bb229d812b848" translate="yes" xml:space="preserve">
          <source>CUR</source>
          <target state="translated">CUR</target>
        </trans-unit>
        <trans-unit id="5ff3994b10db2ad29d009f4ea60878f1dbf5c21e" translate="yes" xml:space="preserve">
          <source>CURRENT BUILD INSTRUCTIONS</source>
          <target state="translated">目前的建设说明</target>
        </trans-unit>
        <trans-unit id="d7a2114fe29992707c06bdf0e24dd4971a33ab14" translate="yes" xml:space="preserve">
          <source>CURRENT MAINTAINER</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f132b454c07ac52e508f217f0add8bd7ce5fa710" translate="yes" xml:space="preserve">
          <source>CUSTOM ALIASES</source>
          <target state="translated">自定义字母缩写(Custom ALIASES)</target>
        </trans-unit>
        <trans-unit id="457857075253f90b422c3d6ec94b4e07bc6c17a8" translate="yes" xml:space="preserve">
          <source>CUSTOM DATA</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="566216bf858af2148e9f96bcf3257d2d54bc9983" translate="yes" xml:space="preserve">
          <source>CUSTOM TRANSLATORS</source>
          <target state="translated">定制翻译</target>
        </trans-unit>
        <trans-unit id="8963b0f409c3a3fda6cdee265e282d666bc239f6" translate="yes" xml:space="preserve">
          <source>CV</source>
          <target state="translated">CV</target>
        </trans-unit>
        <trans-unit id="095d16308375c60700e556f5b8f5796ca1925951" translate="yes" xml:space="preserve">
          <source>CV Manipulation Functions</source>
          <target state="translated">CV操作功能</target>
        </trans-unit>
        <trans-unit id="2b943e6acf60a6fb581a6a5d00e315120f0f582e" translate="yes" xml:space="preserve">
          <source>CV reference counts and CvOUTSIDE</source>
          <target state="translated">CV参考数和CvOUTSIDE数。</target>
        </trans-unit>
        <trans-unit id="0c42c13d714fd16e36f14c85f7c7898781594d12" translate="yes" xml:space="preserve">
          <source>CV's can have CvPADLIST(cv) set to point to a PADLIST. This is the CV's scratchpad, which stores lexical variables and opcode temporary and per-thread values.</source>
          <target state="translated">CV的可以将CvPADLIST(cv)设置为指向一个PADLIST。这是CV的scratchpad,它存储词汇变量和操作码临时值和每线程值。</target>
        </trans-unit>
        <trans-unit id="92b37c5475ec1dea78f404618ece63a8a92e114e" translate="yes" xml:space="preserve">
          <source>CVGEN</source>
          <target state="translated">CVGEN</target>
        </trans-unit>
        <trans-unit id="72f361fd5a33f48e600af7873c367abc9b77f221" translate="yes" xml:space="preserve">
          <source>CVs use the &lt;code&gt;CVf_SLABBED&lt;/code&gt; flag to indicate that the CV has a reference count on the slab. When this flag is set, the slab is accessible via &lt;code&gt;CvSTART&lt;/code&gt; when &lt;code&gt;CvROOT&lt;/code&gt; is not set, or by subtracting two pointers &lt;code&gt;(2*sizeof(I32 *))&lt;/code&gt; from &lt;code&gt;CvROOT&lt;/code&gt; when it is set. The alternative to this approach of sneaking the slab into &lt;code&gt;CvSTART&lt;/code&gt; during compilation would be to enlarge the &lt;code&gt;xpvcv&lt;/code&gt; struct by another pointer. But that would make all CVs larger, even though slab-based op freeing is typically of benefit only for programs that make significant use of string eval.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f1e51fb7a6114d481c1d0f93a37fb30c3e241a73" translate="yes" xml:space="preserve">
          <source>CX_CURPAD_SAVE</source>
          <target state="translated">CX_CURPAD_SAVE</target>
        </trans-unit>
        <trans-unit id="10bc4b4585dd74c80d037efe480f5a15cf760875" translate="yes" xml:space="preserve">
          <source>CX_CURPAD_SV</source>
          <target state="translated">CX_CURPAD_SV</target>
        </trans-unit>
        <trans-unit id="66460a3b93b78bfb0555774b761ce7dd073e8855" translate="yes" xml:space="preserve">
          <source>C_ARRAY_END</source>
          <target state="translated">C_ARRAY_END</target>
        </trans-unit>
        <trans-unit id="04a5223afc068c1c13a4c5f27ca78e5b10db53fb" translate="yes" xml:space="preserve">
          <source>C_ARRAY_LENGTH</source>
          <target state="translated">C_ARRAY_LENGTH</target>
        </trans-unit>
        <trans-unit id="3db0016459bc32ecd5a2abfda4e4b4eb9544e81d" translate="yes" xml:space="preserve">
          <source>C_FH</source>
          <target state="translated">C_FH</target>
        </trans-unit>
        <trans-unit id="ddb00c36c6d4c35daa72fdd0b44d9c728b39bcfa" translate="yes" xml:space="preserve">
          <source>C_FILE</source>
          <target state="translated">C_FILE</target>
        </trans-unit>
        <trans-unit id="575569dbcc2f1973e29e715e813fbf5f343f083a" translate="yes" xml:space="preserve">
          <source>C_SUBNAME</source>
          <target state="translated">C_SUBNAME</target>
        </trans-unit>
        <trans-unit id="dec4c830b8ddb5dccb4f7473e2780b24256aed99" translate="yes" xml:space="preserve">
          <source>C_constant arg_hashref, ITEM...</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a704c039a062759c68107bf491f441821b6748f3" translate="yes" xml:space="preserve">
          <source>C_string()</source>
          <target state="translated">C_string()</target>
        </trans-unit>
        <trans-unit id="c9a4bfcb48afedb38aac0a493b9bba80f14b49d8" translate="yes" xml:space="preserve">
          <source>C_stringify NAME</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="49dd0ee71a9f8c8e59007d14c22f8f02a232442a" translate="yes" xml:space="preserve">
          <source>Cache Manager</source>
          <target state="translated">缓存管理器</target>
        </trans-unit>
        <trans-unit id="a9fca3e43fd40d529fa1de2b124c4181a70bcb17" translate="yes" xml:space="preserve">
          <source>Cache metadata (yes/no)?</source>
          <target state="translated">缓存元数据(是/否)?</target>
        </trans-unit>
        <trans-unit id="36e2cd82188ed6fa0e4b613f6e68c50033b4f7eb" translate="yes" xml:space="preserve">
          <source>Cache size for build directory (in MB)?</source>
          <target state="translated">构建目录的缓存大小(MB)?</target>
        </trans-unit>
        <trans-unit id="60790f7c84170a8b87051d7e857118ffeb0465ee" translate="yes" xml:space="preserve">
          <source>Caching</source>
          <target state="translated">Caching</target>
        </trans-unit>
        <trans-unit id="4216adaca29295eaea61f0fa24c35227b02c6845" translate="yes" xml:space="preserve">
          <source>Caching and deferred writing are inappropriate if you want the same file to be accessed simultaneously from more than one process. Other optimizations performed internally by this module are also incompatible with concurrent access. A future version of this module will support a &lt;code&gt;concurrent =&amp;gt; 1&lt;/code&gt; option that enables safe concurrent access.</source>
          <target state="translated">如果希望从多个进程中同时访问同一文件，则缓存和延迟写入是不合适的。此模块在内部执行的其他优化也与并发访问不兼容。该模块的未来版本将支持 &lt;code&gt;concurrent =&amp;gt; 1&lt;/code&gt; 选项，该选项可实现安全的并发访问。</target>
        </trans-unit>
        <trans-unit id="66d425679370669a060d7b12eda4e17f2fb01bea" translate="yes" xml:space="preserve">
          <source>Caching is off by default, as it can (usually slightly) decrease accuracy and does not usually noticeably affect runtimes.</source>
          <target state="translated">缓存在默认情况下是关闭的,因为它可以(通常会稍微)降低精度,而且通常不会明显影响运行时间。</target>
        </trans-unit>
        <trans-unit id="81c8c72b5e27066945946d422a802165663f5930" translate="yes" xml:space="preserve">
          <source>Caesarean ciphers</source>
          <target state="translated">剖腹产密码器</target>
        </trans-unit>
        <trans-unit id="f76942716d4c2528f7cd94b85c359f606e3e15f5" translate="yes" xml:space="preserve">
          <source>Calculate PI to N digits (including the 3 before the dot). The result is rounded according to the current rounding mode, which defaults to &quot;even&quot;.</source>
          <target state="translated">计算PI到N位数(包括点前的3)。结果根据当前的四舍五入模式进行四舍五入,默认为 &quot;偶数&quot;。</target>
        </trans-unit>
        <trans-unit id="ba16d2dfddf095e54ae25bc218255c71ce5afa48" translate="yes" xml:space="preserve">
          <source>Calculate digests of files</source>
          <target state="translated">计算文件的摘要</target>
        </trans-unit>
        <trans-unit id="6edac12b6f864eee888f0c08f462e84fff153f20" translate="yes" xml:space="preserve">
          <source>Calculate the N'th root of $x.</source>
          <target state="translated">计算$x的N'th根。</target>
        </trans-unit>
        <trans-unit id="f7dc98fbb7b43c855859dedd630f45c56ad2bc12" translate="yes" xml:space="preserve">
          <source>Calculate the arcus tangens of $x, modifying $x in place.</source>
          <target state="translated">计算$x的弧切线,原地修改$x。</target>
        </trans-unit>
        <trans-unit id="49fd3457ed632359ca2520e72d6632cb278658b7" translate="yes" xml:space="preserve">
          <source>Calculate the arcus tangens of &lt;code&gt;$y&lt;/code&gt; divided by &lt;code&gt;$x&lt;/code&gt; , modifying $y in place.</source>
          <target state="translated">计算 &lt;code&gt;$y&lt;/code&gt; 的反正切值除以 &lt;code&gt;$x&lt;/code&gt; ，就地修改$ y。</target>
        </trans-unit>
        <trans-unit id="5bbe8238807ec8d47bbbcc6d01cee7e8f992583a" translate="yes" xml:space="preserve">
          <source>Calculate the arcus tangens of &lt;code&gt;$y&lt;/code&gt; divided by &lt;code&gt;$x&lt;/code&gt;, modifying $y in place.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8171f0ff6bd907f4503e20866134c76966e85b6f" translate="yes" xml:space="preserve">
          <source>Calculate the arcus tanges of $x, modifying $x in place. See also &lt;a href=&quot;#batan2%28%29&quot;&gt;&quot;batan2()&quot;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4f94eb38f838a42af1307713af2f7a6e7542c447" translate="yes" xml:space="preserve">
          <source>Calculate the arcus tanges of $x, modifying $x in place. See also &lt;a href=&quot;#batan2()&quot;&gt;batan2()&lt;/a&gt;.</source>
          <target state="translated">计算$ x的反正切值，修改$ x。另请参见&lt;a href=&quot;#batan2()&quot;&gt;batan2（）&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="982777a50f0c3516dc7b84208808f54a3e72dbea" translate="yes" xml:space="preserve">
          <source>Calculate the arcus tanges of &lt;code&gt;$y&lt;/code&gt; divided by &lt;code&gt;$x&lt;/code&gt; , modifying $y in place. See also &lt;a href=&quot;#batan()&quot;&gt;batan()&lt;/a&gt;.</source>
          <target state="translated">计算 &lt;code&gt;$y&lt;/code&gt; 反正切值除以 &lt;code&gt;$x&lt;/code&gt; ，就地修改$ y。另请参见&lt;a href=&quot;#batan()&quot;&gt;batan（）&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="7d6fb13adb7bf3184a3048bb0dff7cf77ccc8226" translate="yes" xml:space="preserve">
          <source>Calculate the arcus tanges of &lt;code&gt;$y&lt;/code&gt; divided by &lt;code&gt;$x&lt;/code&gt;, modifying $y in place. See also &lt;a href=&quot;#batan%28%29&quot;&gt;&quot;batan()&quot;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ac94229d27fcaa835b1ec1d88cf3594ca1121397" translate="yes" xml:space="preserve">
          <source>Calculate the cosine of $x, modifying $x in place.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8312c24fc6c367f7ba0626e0df9859355b1ba267" translate="yes" xml:space="preserve">
          <source>Calculate the cosinus of $x, modifying $x in place.</source>
          <target state="translated">计算$x的余弦,原地修改$x。</target>
        </trans-unit>
        <trans-unit id="961da91820feb8c98ca20b69e6e93c1fe53ffbb7" translate="yes" xml:space="preserve">
          <source>Calculate the sine of $x, modifying $x in place.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="01c8c185c9d12673e45f702a2f9d36653ab1f38e" translate="yes" xml:space="preserve">
          <source>Calculate the sinus of $x, modifying $x in place.</source>
          <target state="translated">计算$x的正弦,将$x修改到位。</target>
        </trans-unit>
        <trans-unit id="049cf6157b6ee1c242c2800800be8ef0165625bc" translate="yes" xml:space="preserve">
          <source>Calculate the square root of $x.</source>
          <target state="translated">计算$x的平方根。</target>
        </trans-unit>
        <trans-unit id="f4820fe9e03a7c976939a8cebecd9d08b353aa30" translate="yes" xml:space="preserve">
          <source>Calculated means the facet was generated from another facet. Calculated facets may be cleared and regenerated whenever the event state changes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d5c08bd3d571674414934d46e315d05c1e757d23" translate="yes" xml:space="preserve">
          <source>Calculates the N'th root of &lt;code&gt;$x&lt;/code&gt; .</source>
          <target state="translated">计算 &lt;code&gt;$x&lt;/code&gt; 第N个根。</target>
        </trans-unit>
        <trans-unit id="b37e44d0a686e2ca230fb786ab85e288a1c54529" translate="yes" xml:space="preserve">
          <source>Calculates the N'th root of &lt;code&gt;$x&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d60ccc2f19222914da87593fea9f1afb62ee5252" translate="yes" xml:space="preserve">
          <source>Calculates the binomial coefficient n over k, also called the &quot;choose&quot; function, which is</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2470f12a5e304e7422bd1a2f8c0e1abfd2982a1d" translate="yes" xml:space="preserve">
          <source>Calculates the binomial coefficient n over k, also called the &quot;choose&quot; function. The result is equivalent to:</source>
          <target state="translated">计算k上的二项式系数n,也叫 &quot;选择 &quot;函数。其结果相当于:</target>
        </trans-unit>
        <trans-unit id="34e97fbd408b8eed5635c834b2854c0be8cb6dbf" translate="yes" xml:space="preserve">
          <source>Calculates the expression &lt;code&gt;e ** $x&lt;/code&gt; where &lt;code&gt;e&lt;/code&gt; is Euler's number.</source>
          <target state="translated">计算表达式 &lt;code&gt;e ** $x&lt;/code&gt; ，其中 &lt;code&gt;e&lt;/code&gt; 是欧拉数。</target>
        </trans-unit>
        <trans-unit id="416b7a310945db184afb57b971e8e098dac1fa18" translate="yes" xml:space="preserve">
          <source>Calculates the factorial of $x. For instance:</source>
          <target state="translated">计算$x的阶乘。例如:</target>
        </trans-unit>
        <trans-unit id="62fb105cdba4cb5918fb1ee8f5656956e6874fed" translate="yes" xml:space="preserve">
          <source>Calculates the maximum command size the OS can exec. Effectively, this is the max size of a shell command line.</source>
          <target state="translated">计算操作系统可以执行的最大命令大小。实际上,这就是shell命令行的最大大小。</target>
        </trans-unit>
        <trans-unit id="fd42bdc4343d55afb259e24e240b92c18465e03e" translate="yes" xml:space="preserve">
          <source>Calculates two integers A and B so that A/B is equal to &lt;code&gt;e ** $x&lt;/code&gt; , where &lt;code&gt;e&lt;/code&gt; is Euler's number.</source>
          <target state="translated">计算两个整数A和B，以使A / B等于 &lt;code&gt;e ** $x&lt;/code&gt; ，其中 &lt;code&gt;e&lt;/code&gt; 是欧拉数。</target>
        </trans-unit>
        <trans-unit id="f2ca019b0d59ea6f0382ac9b50f298aadf929274" translate="yes" xml:space="preserve">
          <source>Calculates two integers A and B so that A/B is equal to &lt;code&gt;e ** $x&lt;/code&gt;, where &lt;code&gt;e&lt;/code&gt; is Euler's number.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0037c314d771bc8eaa4953dbcb986cc7bf547ac0" translate="yes" xml:space="preserve">
          <source>Calendar of Perl Events</source>
          <target state="translated">Perl活动日历</target>
        </trans-unit>
        <trans-unit id="afd632ce2019ef9ec38232fb5195ec297239dcfa" translate="yes" xml:space="preserve">
          <source>Calendar time for December 12, 1995, at 10:30 am.</source>
          <target state="translated">日历时间为1995年12月12日上午10:30。</target>
        </trans-unit>
        <trans-unit id="cf386e5831516538d6deaa1383a8556be7abbcc0" translate="yes" xml:space="preserve">
          <source>California</source>
          <target state="translated">California</target>
        </trans-unit>
        <trans-unit id="a7a5d5cba867fa341140666997ab9bfd6cadc129" translate="yes" xml:space="preserve">
          <source>Call &lt;code&gt;&lt;a href=&quot;../functions/socketpair&quot;&gt;socketpair&lt;/a&gt;&lt;/code&gt; and return a list of two sockets created, or an empty list on failure.</source>
          <target state="translated">调用 &lt;code&gt;&lt;a href=&quot;../functions/socketpair&quot;&gt;socketpair&lt;/a&gt;&lt;/code&gt; 并返回创建的两个套接字的列表，或者返回失败的空列表。</target>
        </trans-unit>
        <trans-unit id="35dfe1234c2b3035ee2b40e6c30d2b36aabfe8c5" translate="yes" xml:space="preserve">
          <source>Call &lt;code&gt;abort()&lt;/code&gt; on exit. This is used internally by perl itself to abort if exit is called while processing exit.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6b6b5d06a5f85554364bcd897b8c29e92093294d" translate="yes" xml:space="preserve">
          <source>Call &lt;code&gt;start&lt;/code&gt; immediately before adding any results to the aggregator. Among other times it records the start time for the test run.</source>
          <target state="translated">在将任何结果添加到聚合器之前，立即调用 &lt;code&gt;start&lt;/code&gt; 。在其他时间中，它会记录测试运行的开始时间。</target>
        </trans-unit>
        <trans-unit id="bab90a1ca7bed318a773f1cd868353d680619794" translate="yes" xml:space="preserve">
          <source>Call &lt;code&gt;stop&lt;/code&gt; immediately after adding all test results to the aggregator.</source>
          <target state="translated">将所有测试结果添加到聚合器后，立即 &lt;code&gt;stop&lt;/code&gt; 调用。</target>
        </trans-unit>
        <trans-unit id="b397d3a007d888457eb1a3db65426142f2a1211a" translate="yes" xml:space="preserve">
          <source>Call Pod::Perldoc::GetOptsOO::getopts($object, \@ARGV, $truth)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e0f1fdfb2231f4e8ba5ad2172306eb394d414cf5" translate="yes" xml:space="preserve">
          <source>Call all the registered block hooks for type</source>
          <target state="translated">调用所有已注册的类型为</target>
        </trans-unit>
        <trans-unit id="6d7e2e0ddf774eeed37f22e407552d0937049ad2" translate="yes" xml:space="preserve">
          <source>Call all the registered block hooks for type &lt;code&gt;which&lt;/code&gt;. &lt;code&gt;which&lt;/code&gt; is a preprocessing token; the type of &lt;code&gt;arg&lt;/code&gt; depends on &lt;code&gt;which&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="409c307d19d683a501410b5ff5a68b6c8bd9aca3" translate="yes" xml:space="preserve">
          <source>Call the custom callback if one is set, otherwise this does nothing.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d63876fa9d1b98c3c63563764cf54bc05c244034" translate="yes" xml:space="preserve">
          <source>Call the system level poll routine. If TIMEOUT is not specified then the call will block. Returns the number of handles which had events happen, or -1 on error.</source>
          <target state="translated">调用系统级轮询例程。如果没有指定TIMEOUT,则调用将被阻塞。返回发生事件的句柄数,如果出错,则返回-1。</target>
        </trans-unit>
        <trans-unit id="707d41981449a7ac1f49727761a071399e9047fa" translate="yes" xml:space="preserve">
          <source>Call this function to signal to a stash that it has been assigned to another spot in the stash hierarchy. &lt;code&gt;stash&lt;/code&gt; is the stash that has been assigned. &lt;code&gt;oldstash&lt;/code&gt; is the stash it replaces, if any. &lt;code&gt;gv&lt;/code&gt; is the glob that is actually being assigned to.</source>
          <target state="translated">调用此函数以通知存储已将其分配给存储层次结构中的另一个位置。 &lt;code&gt;stash&lt;/code&gt; 是已分配的储存。 &lt;code&gt;oldstash&lt;/code&gt; 是它替代的存储库（如果有）。 &lt;code&gt;gv&lt;/code&gt; 是实际分配给的glob。</target>
        </trans-unit>
        <trans-unit id="897a2466922f6de52dc65c0d77a98544c7fb349a" translate="yes" xml:space="preserve">
          <source>CallSubPV</source>
          <target state="translated">CallSubPV</target>
        </trans-unit>
        <trans-unit id="ade75b74553b436dc4fbae17ff916436ba41a1b5" translate="yes" xml:space="preserve">
          <source>CallSubSV</source>
          <target state="translated">CallSubSV</target>
        </trans-unit>
        <trans-unit id="9c55daf6e61f9dc1556f1ec913e0ca99b7e0ea38" translate="yes" xml:space="preserve">
          <source>Callback Functions</source>
          <target state="translated">回调功能</target>
        </trans-unit>
        <trans-unit id="c60c17f100badf24e67226833a550c8cb29e67d2" translate="yes" xml:space="preserve">
          <source>Callback called exit</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9fdc2cfe374fa5bde1e4e458854875e1709add1c" translate="yes" xml:space="preserve">
          <source>Callbacks</source>
          <target state="translated">Callbacks</target>
        </trans-unit>
        <trans-unit id="e2492d7f90f5ff291923cb9e3820556cd26e7081" translate="yes" xml:space="preserve">
          <source>Callbacks may also be added like this:</source>
          <target state="translated">也可以添加这样的回调。</target>
        </trans-unit>
        <trans-unit id="0b30b959e54d6077a0087fde2fbe95f232d8abe1" translate="yes" xml:space="preserve">
          <source>Called after debug API inits itself.</source>
          <target state="translated">在debug API自启动后被调用。</target>
        </trans-unit>
        <trans-unit id="7ce9b93a40160290fff58c32f9bc646588fa275b" translate="yes" xml:space="preserve">
          <source>Called before &lt;code&gt;process_args&lt;/code&gt; to prepend the contents of an rc file to the options.</source>
          <target state="translated">在 &lt;code&gt;process_args&lt;/code&gt; 之前调用，以将rc文件的内容添加到选项之前。</target>
        </trans-unit>
        <trans-unit id="01b1a27618644b64f84f4ae78cca932070236cdf" translate="yes" xml:space="preserve">
          <source>Called by &lt;a href=&quot;Pod::Simple::HTMLBatch&quot;&gt;Pod::Simple::HTMLBatch&lt;/a&gt; so that the class has a chance to initialize the converter. Internally it sets the &lt;code&gt;batch_mode&lt;/code&gt; property to true and sets &lt;code&gt;batch_mode_current_level()&lt;/code&gt;, but Pod::Simple::XHTML does not currently use those features. Subclasses might, though.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="712b31fe99457d34e411f45757dac056dcd534cd" translate="yes" xml:space="preserve">
          <source>Called by &lt;a href=&quot;htmlbatch&quot;&gt;Pod::Simple::HTMLBatch&lt;/a&gt; so that the class has a chance to initialize the converter. Internally it sets the &lt;code&gt;batch_mode&lt;/code&gt; property to true and sets &lt;code&gt;batch_mode_current_level()&lt;/code&gt; , but Pod::Simple::XHTML does not currently use those features. Subclasses might, though.</source>
          <target state="translated">由&lt;a href=&quot;htmlbatch&quot;&gt;Pod :: Simple :: HTMLBatch&lt;/a&gt;调用，以便该类有机会初始化转换器。在内部，它将 &lt;code&gt;batch_mode&lt;/code&gt; 属性设置为true，并设置 &lt;code&gt;batch_mode_current_level()&lt;/code&gt; ，但是Pod :: Simple :: XHTML当前不使用这些功能。但是，子类可以。</target>
        </trans-unit>
        <trans-unit id="d44d9ba6e8c865877532df9753c9657e69186427" translate="yes" xml:space="preserve">
          <source>Called by &lt;code&gt;close_test&lt;/code&gt; to clear the line showing test progress, or the parallel test ruler, prior to printing the final test result.</source>
          <target state="translated">在打印最终测试结果之前，由 &lt;code&gt;close_test&lt;/code&gt; 调用以清除显示测试进度的行或并行测试标尺。</target>
        </trans-unit>
        <trans-unit id="83de9bce1b7b2bd7be455db4ac0ff451b79c596a" translate="yes" xml:space="preserve">
          <source>Called by Perl when it is freeing a regexp pattern so that the engine can release any resources pointed to by the &lt;code&gt;pprivate&lt;/code&gt; member of the &lt;code&gt;regexp&lt;/code&gt; structure. This is only responsible for freeing private data; Perl will handle releasing anything else contained in the &lt;code&gt;regexp&lt;/code&gt; structure.</source>
          <target state="translated">当Perl释放正则表达式模式时由Perl调用，以便引擎可以释放正则 &lt;code&gt;regexp&lt;/code&gt; 结构的 &lt;code&gt;pprivate&lt;/code&gt; 成员指向的任何资源。这仅负责释放私人数据；Perl将处理释放 &lt;code&gt;regexp&lt;/code&gt; 结构中包含的任何其他内容。</target>
        </trans-unit>
        <trans-unit id="192f5069ea69d61876f992ae04cbfebd42365fdf" translate="yes" xml:space="preserve">
          <source>Called by Test::Harness before any test output is generated.</source>
          <target state="translated">在产生任何测试输出之前被Test::Harness调用。</target>
        </trans-unit>
        <trans-unit id="0cd42467897ffdba4f9319dfefbd20551429ca89" translate="yes" xml:space="preserve">
          <source>Called by a utility method of makeaperl. Checks whether a given file is an XS library by seeing whether it defines any symbols starting with &lt;code&gt;boot_&lt;/code&gt; (with an optional leading underscore - needed on MacOS).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="252637df9babf3148f5feaeda72912f2045c6976" translate="yes" xml:space="preserve">
          <source>Called by init_main.</source>
          <target state="translated">由 init_main 调用。</target>
        </trans-unit>
        <trans-unit id="4cdb9b50857f3ef3652ef325b6cf3d72fa3622a7" translate="yes" xml:space="preserve">
          <source>Called by init_main. Initializes PERL_*</source>
          <target state="translated">被 init_main 调用.初始化PERL_*.</target>
        </trans-unit>
        <trans-unit id="803f7311292b6dbe520d9001028a74a3740ad58e" translate="yes" xml:space="preserve">
          <source>Called by init_main. Sets up ABSPERL, PERL, FULLPERL and all the *PERLRUN* permutations.</source>
          <target state="translated">由 init_main 调用。设置ABSPERL、PERL、FULLPERL和所有*PERLRUN*的组合。</target>
        </trans-unit>
        <trans-unit id="3f68bdd2c8090ffda024fb7a301dcec75150221e" translate="yes" xml:space="preserve">
          <source>Called by init_main. Sets up all INSTALL_* variables (except INSTALLDIRS) and *PREFIX.</source>
          <target state="translated">由 init_main 调用。设置所有 INSTALL_*变量 (除了 INSTALLDIRS)和 *PREFIX。</target>
        </trans-unit>
        <trans-unit id="e5e9ec66a22e81bfffe8ba34ae133177fa3495b6" translate="yes" xml:space="preserve">
          <source>Called by init_main. Sets up all INST_* variables except those related to XS code. Those are handled in init_xs.</source>
          <target state="translated">由init_main调用。设置所有 INST_*变量,除了那些与 XS 代码相关的变量。这些变量由init_xs处理。</target>
        </trans-unit>
        <trans-unit id="6dfa9b16abbbe06ab0d5e00e013cd050e482cced" translate="yes" xml:space="preserve">
          <source>Called by init_others, and calls ext ExtUtils::Liblist. See &lt;a href=&quot;ExtUtils::Liblist&quot;&gt;ExtUtils::Liblist&lt;/a&gt; for details.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1f0c75a0f13f487e51a8d6aa8f296a671eded4fd" translate="yes" xml:space="preserve">
          <source>Called by init_others, and calls ext ExtUtils::Liblist. See &lt;a href=&quot;liblist&quot;&gt;ExtUtils::Liblist&lt;/a&gt; for details.</source>
          <target state="translated">由init_others调用，并调用ext ExtUtils :: Liblist。有关详细信息，请参见&lt;a href=&quot;liblist&quot;&gt;ExtUtils :: Liblist&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="aa989d1b35e9dfa1af106d6dbfbb5e0924c7a182" translate="yes" xml:space="preserve">
          <source>Called by staticmake. Defines how to write the Makefile to produce a static new perl.</source>
          <target state="translated">由 staticmake 调用。定义如何编写Makefile来生成一个静态的新perl。</target>
        </trans-unit>
        <trans-unit id="a7da98d82f41c03c342a989f11faab94693c6c57" translate="yes" xml:space="preserve">
          <source>Called by the harness for each line of TAP it receives.</source>
          <target state="translated">由线束对它收到的每一行TAP进行调用。</target>
        </trans-unit>
        <trans-unit id="0521bfafa9ba37410f99fe5ff1bf683133d1cd71" translate="yes" xml:space="preserve">
          <source>Called by the harness when it needs to create a &lt;a href=&quot;TAP::Parser::Scheduler&quot;&gt;TAP::Parser::Scheduler&lt;/a&gt;. Override in a subclass to provide an alternative scheduler. &lt;code&gt;make_scheduler&lt;/code&gt; is passed the list of tests that was passed to &lt;code&gt;aggregate_tests&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="567cd3e87bf8931281fcaa23e35e2da3fe139b11" translate="yes" xml:space="preserve">
          <source>Called by the harness when it needs to create a &lt;a href=&quot;parser/scheduler&quot;&gt;TAP::Parser::Scheduler&lt;/a&gt;. Override in a subclass to provide an alternative scheduler. &lt;code&gt;make_scheduler&lt;/code&gt; is passed the list of tests that was passed to &lt;code&gt;aggregate_tests&lt;/code&gt; .</source>
          <target state="translated">由线束在需要创建&lt;a href=&quot;parser/scheduler&quot;&gt;TAP :: Parser :: Scheduler&lt;/a&gt;时调用。重写子类以提供替代的调度程序。 &lt;code&gt;make_scheduler&lt;/code&gt; 传递了传递给 &lt;code&gt;aggregate_tests&lt;/code&gt; 的测试列表。</target>
        </trans-unit>
        <trans-unit id="496f62a4d27b344cea2367c44afc046f7d3e616c" translate="yes" xml:space="preserve">
          <source>Called in list context, returns a list consisting of all the keys of the named hash, or in Perl 5.12 or later only, the indices of an array. Perl releases prior to 5.12 will produce a syntax error if you try to use an array argument. In scalar context, returns the number of keys or indices.</source>
          <target state="translated">在列表上下文中调用,返回一个由命名的哈希的所有键组成的列表,或者在Perl 5.12或更高版本中,只返回一个数组的索引。如果使用数组参数,5.12 之前的 Perl 版本会产生语法错误。在标量上下文中,返回键或索引的数量。</target>
        </trans-unit>
        <trans-unit id="467bfe2c2b5fcadd2c658d71f62e583886879a81" translate="yes" xml:space="preserve">
          <source>Called just before exit.</source>
          <target state="translated">出门前打了电话。</target>
        </trans-unit>
        <trans-unit id="56f111d681d8f9bb2b8ea3bbe2cb68fe1cbd1b6b" translate="yes" xml:space="preserve">
          <source>Called to close a test session.</source>
          <target state="translated">调用来关闭一个测试环节。</target>
        </trans-unit>
        <trans-unit id="0fea40ea6e66a6d129222181dca9ffffa1dc50aa" translate="yes" xml:space="preserve">
          <source>Called to create a new test session. A test session looks like this:</source>
          <target state="translated">调用来创建一个新的测试会话。一个测试会话是这样的。</target>
        </trans-unit>
        <trans-unit id="bec535037f1a075b8ca545622477cf0f336b95f2" translate="yes" xml:space="preserve">
          <source>Called to get/set the value of &lt;code&gt;$`&lt;/code&gt; , &lt;code&gt;$'&lt;/code&gt; , &lt;code&gt;$&amp;amp;&lt;/code&gt; and their named equivalents, ${^PREMATCH}, ${^POSTMATCH} and ${^MATCH}, as well as the numbered capture groups (&lt;code&gt;$1&lt;/code&gt; , &lt;code&gt;$2&lt;/code&gt; , ...).</source>
          <target state="translated">调用以获取/设置 &lt;code&gt;$`&lt;/code&gt; ， &lt;code&gt;$'&lt;/code&gt; ， &lt;code&gt;$&amp;amp;&lt;/code&gt; 及其等效名称$ {^ PREMATCH}，$ {^ POSTMATCH}和$ {^ MATCH}以及编号的捕获组（ &lt;code&gt;$1&lt;/code&gt; ， &lt;code&gt;$2&lt;/code&gt; ，...）。</target>
        </trans-unit>
        <trans-unit id="28c2d939a2818d842c409238148056a468e80c26" translate="yes" xml:space="preserve">
          <source>Called to get/set the value of &lt;code&gt;$`&lt;/code&gt;, &lt;code&gt;$'&lt;/code&gt;, &lt;code&gt;$&amp;amp;&lt;/code&gt; and their named equivalents, ${^PREMATCH}, ${^POSTMATCH} and ${^MATCH}, as well as the numbered capture groups (&lt;code&gt;$1&lt;/code&gt;, &lt;code&gt;$2&lt;/code&gt;, ...).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f05cab34d068a722bc12f2e226cde25cd9659c30" translate="yes" xml:space="preserve">
          <source>Called to get/set the value of &lt;code&gt;%+&lt;/code&gt; and &lt;code&gt;%-&lt;/code&gt; , as well as by some utility functions in &lt;a href=&quot;re&quot;&gt;re&lt;/a&gt;.</source>
          <target state="translated">调用以获取/设置 &lt;code&gt;%+&lt;/code&gt; 和 &lt;code&gt;%-&lt;/code&gt; 的值，以及&lt;a href=&quot;re&quot;&gt;re中的&lt;/a&gt;一些实用程序函数。</target>
        </trans-unit>
        <trans-unit id="172a2008c9c9bfdccd10398a4900cd9074f2930c" translate="yes" xml:space="preserve">
          <source>Called to get/set the value of &lt;code&gt;%+&lt;/code&gt; and &lt;code&gt;%-&lt;/code&gt;, as well as by some utility functions in &lt;a href=&quot;re&quot;&gt;re&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8ca1fbe0a0f38d437dca54b642d9f31c3ccb8f90" translate="yes" xml:space="preserve">
          <source>Called when API must show a message (warnings, errors etc.).</source>
          <target state="translated">当API必须显示信息(警告、错误等)时调用。</target>
        </trans-unit>
        <trans-unit id="f94cf1c0617789052abd6d872abe927053b4b0cd" translate="yes" xml:space="preserve">
          <source>Called when a job is complete to unlock it. If a callback has been registered with &lt;code&gt;on_finish&lt;/code&gt; , it calls it. Otherwise, it does nothing.</source>
          <target state="translated">作业完成以解锁时调用。如果回调已在 &lt;code&gt;on_finish&lt;/code&gt; 中注册，它将调用它。否则，它什么都不做。</target>
        </trans-unit>
        <trans-unit id="529d993616ad651bd31b98b890f1161f3ca2f07f" translate="yes" xml:space="preserve">
          <source>Called when a job is complete to unlock it. If a callback has been registered with &lt;code&gt;on_finish&lt;/code&gt;, it calls it. Otherwise, it does nothing.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c5516c9265ba63c86e3ef82397e79274838607cf" translate="yes" xml:space="preserve">
          <source>Called when execution stops (w/ args file, line).</source>
          <target state="translated">当执行停止时调用(w/args file,line)。</target>
        </trans-unit>
        <trans-unit id="145748d07108bcdb9c427172d1270877727239ed" translate="yes" xml:space="preserve">
          <source>Called when the layer is popped from the stack. A layer will normally be popped after &lt;code&gt;Close()&lt;/code&gt; is called. But a layer can be popped without being closed if the program is dynamically managing layers on the stream. In such cases &lt;code&gt;Popped()&lt;/code&gt; should free any resources (buffers, translation tables, ...) not held directly in the layer's struct. It should also &lt;code&gt;Unread()&lt;/code&gt; any unconsumed data that has been read and buffered from the layer below back to that layer, so that it can be re-provided to what ever is now above.</source>
          <target state="translated">从堆栈中弹出图层时调用。通常在调用 &lt;code&gt;Close()&lt;/code&gt; 之后会弹出一个图层。但是，如果程序正在动态管理流中的图层，则可以不关闭而弹出图层。在这种情况下， &lt;code&gt;Popped()&lt;/code&gt; 应该释放任何不直接保存在该层的结构中的资源（缓冲区，转换表等）。它还应该 &lt;code&gt;Unread()&lt;/code&gt; 从下一层读回并缓冲到该层的所有未消耗数据，以便可以将其重新提供给现在的上一层。</target>
        </trans-unit>
        <trans-unit id="939127156e81551fd5a7e818b4482a513aebb0f8" translate="yes" xml:space="preserve">
          <source>Called while stopped (can be a client event loop).</source>
          <target state="translated">在停止时调用(可以是客户端事件循环)。</target>
        </trans-unit>
        <trans-unit id="aac1bcb8d7dddba4603f778cf3da3d2bb22b9d64" translate="yes" xml:space="preserve">
          <source>Called without parameters, or with the first argument false, hash marks are suppressed. If the first argument is true but not a reference to a file handle glob, then \*STDERR is used. The second argument is the number of bytes per hash mark printed, and defaults to 1024. In all cases the return value is a reference to an array of two: the filehandle glob reference and the bytes per hash mark.</source>
          <target state="translated">在没有参数或第一个参数为假的情况下调用,会抑制哈希标记。如果第一个参数为真,但不是对文件句柄glob的引用,则使用\*STDERR。第二个参数是每个散列标记的字节数,默认为1024。在所有情况下,返回值都是对一个数组的引用:文件句柄glob引用和每个哈希标记的字节数。</target>
        </trans-unit>
        <trans-unit id="e216eb70c5a18b158cc8c755c284c444b41dcf38" translate="yes" xml:space="preserve">
          <source>Calling &lt;a href=&quot;functions/exit&quot;&gt;exit EXPR&lt;/a&gt; inside a thread causes the whole application to terminate. Because of this, the use of &lt;code&gt;&lt;a href=&quot;functions/exit&quot;&gt;exit()&lt;/a&gt;&lt;/code&gt; inside threaded code, or in modules that might be used in threaded applications, is strongly discouraged.</source>
          <target state="translated">在线程内调用&lt;a href=&quot;functions/exit&quot;&gt;exit EXPR&lt;/a&gt;会导致整个应用程序终止。因此，强烈建议不要在线程代码或可能在线程应用程序中使用的模块中使用 &lt;code&gt;&lt;a href=&quot;functions/exit&quot;&gt;exit()&lt;/a&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="2d2e77d4a5966924f91b9000c9d77963f423bb14" translate="yes" xml:space="preserve">
          <source>Calling &lt;a href=&quot;perlfunc#exit-EXPR&quot;&gt;exit()&lt;/a&gt; inside a thread causes the whole application to terminate. Because of this, the use of &lt;code&gt;exit()&lt;/code&gt; inside threaded code, or in modules that might be used in threaded applications, is strongly discouraged.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9e1f81bd75479e40b9c0318383b0b5ea0cddb02d" translate="yes" xml:space="preserve">
          <source>Calling &lt;code&gt;-&amp;gt;flush&lt;/code&gt; returns the array to immediate-write mode. If you wish to discard the deferred writes, you may call &lt;code&gt;-&amp;gt;discard&lt;/code&gt; instead of &lt;code&gt;-&amp;gt;flush&lt;/code&gt; . Note that in some cases, some of the data will have been written already, and it will be too late for &lt;code&gt;-&amp;gt;discard&lt;/code&gt; to discard all the changes. Support for &lt;code&gt;-&amp;gt;discard&lt;/code&gt; may be withdrawn in a future version of &lt;code&gt;Tie::File&lt;/code&gt; .</source>
          <target state="translated">调用 &lt;code&gt;-&amp;gt;flush&lt;/code&gt; 将使阵列返回立即写入模式。如果您希望丢弃延迟的写入，则可以调用 &lt;code&gt;-&amp;gt;discard&lt;/code&gt; 而不是 &lt;code&gt;-&amp;gt;flush&lt;/code&gt; 。请注意，在某些情况下，某些数据将已经被写入，并且 &lt;code&gt;-&amp;gt;discard&lt;/code&gt; 放弃所有更改将为时已晚。在将来的 &lt;code&gt;Tie::File&lt;/code&gt; 版本中可能会取消对 &lt;code&gt;-&amp;gt;discard&lt;/code&gt; 的支持。</target>
        </trans-unit>
        <trans-unit id="76255ff12e8b31dd1faa9b3a8f1af6ce261a3237" translate="yes" xml:space="preserve">
          <source>Calling &lt;code&gt;-&amp;gt;flush&lt;/code&gt; returns the array to immediate-write mode. If you wish to discard the deferred writes, you may call &lt;code&gt;-&amp;gt;discard&lt;/code&gt; instead of &lt;code&gt;-&amp;gt;flush&lt;/code&gt;. Note that in some cases, some of the data will have been written already, and it will be too late for &lt;code&gt;-&amp;gt;discard&lt;/code&gt; to discard all the changes. Support for &lt;code&gt;-&amp;gt;discard&lt;/code&gt; may be withdrawn in a future version of &lt;code&gt;Tie::File&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b218ac14d28e4eba90c2438d62379a52be6547e9" translate="yes" xml:space="preserve">
          <source>Calling &lt;code&gt;-&amp;gt;join()&lt;/code&gt; or &lt;code&gt;-&amp;gt;detach()&lt;/code&gt; on an already detached thread will cause an error to be thrown.</source>
          <target state="translated">在已经分离的线程上调用 &lt;code&gt;-&amp;gt;join()&lt;/code&gt; 或 &lt;code&gt;-&amp;gt;detach()&lt;/code&gt; 会引发错误。</target>
        </trans-unit>
        <trans-unit id="66b0f01a2dc8c4ec0ab9ed2203d7fa7fc14d740a" translate="yes" xml:space="preserve">
          <source>Calling &lt;code&gt;-&amp;gt;join()&lt;/code&gt; or &lt;code&gt;-&amp;gt;detach()&lt;/code&gt; on an already joined thread will cause an error to be thrown.</source>
          <target state="translated">在已加入的线程上调用 &lt;code&gt;-&amp;gt;join()&lt;/code&gt; 或 &lt;code&gt;-&amp;gt;detach()&lt;/code&gt; 会引发错误。</target>
        </trans-unit>
        <trans-unit id="5013e17c5c2bf4d76b64a60f93a3e6d87ce580e9" translate="yes" xml:space="preserve">
          <source>Calling &lt;code&gt;&lt;a href=&quot;functions/die&quot;&gt;die()&lt;/a&gt;&lt;/code&gt; in a thread indicates an abnormal exit for the thread. Any &lt;code&gt;$SIG{__DIE__}&lt;/code&gt; handler in the thread will be called first, and then the thread will exit with a warning message that will contain any arguments passed in the &lt;code&gt;&lt;a href=&quot;functions/die&quot;&gt;die()&lt;/a&gt;&lt;/code&gt; call.</source>
          <target state="translated">在线程中调用 &lt;code&gt;&lt;a href=&quot;functions/die&quot;&gt;die()&lt;/a&gt;&lt;/code&gt; 表示该线程异常退出。线程中的任何 &lt;code&gt;$SIG{__DIE__}&lt;/code&gt; 处理函数都将首先被调用，然后线程将退出并显示一条警告消息，其中包含在 &lt;code&gt;&lt;a href=&quot;functions/die&quot;&gt;die()&lt;/a&gt;&lt;/code&gt; 调用中传递的所有参数。</target>
        </trans-unit>
        <trans-unit id="432a891f5fe2a318db5e9ee1a582e0b88a0dccd1" translate="yes" xml:space="preserve">
          <source>Calling &lt;code&gt;attributes::get()&lt;/code&gt; from within the scope of a null package declaration &lt;code&gt;&lt;a href=&quot;functions/package&quot;&gt;package&lt;/a&gt; ;&lt;/code&gt; for an unblessed variable reference will not provide any starting package name for the 'fetch' method lookup. Thus, this circumstance will not result in a method call for package-defined attributes. A named subroutine knows to which symbol table entry it belongs (or originally belonged), and it will use the corresponding package. An anonymous subroutine knows the package name into which it was compiled (unless it was also compiled with a null package declaration), and so it will use that package name.</source>
          <target state="translated">从空包声明 &lt;code&gt;&lt;a href=&quot;functions/package&quot;&gt;package&lt;/a&gt; ;&lt;/code&gt; 的范围内调用 &lt;code&gt;attributes::get()&lt;/code&gt; ；对于无穷大的变量，引用将不会为'fetch'方法查找提供任何起始包名称。因此，这种情况不会导致对程序包定义的属性进行方法调用。命名子例程知道它属于（或最初属于）哪个符号表条目，它将使用相应的包。匿名子例程知道将其编译到的程序包名称（除非它也使用空程序包声明进行编译），因此它将使用该程序包名称。</target>
        </trans-unit>
        <trans-unit id="c7a2534c30975c1b087b49471bb8e69b1192ea93" translate="yes" xml:space="preserve">
          <source>Calling &lt;code&gt;attributes::get()&lt;/code&gt; from within the scope of a null package declaration &lt;code&gt;package ;&lt;/code&gt; for an unblessed variable reference will not provide any starting package name for the 'fetch' method lookup. Thus, this circumstance will not result in a method call for package-defined attributes. A named subroutine knows to which symbol table entry it belongs (or originally belonged), and it will use the corresponding package. An anonymous subroutine knows the package name into which it was compiled (unless it was also compiled with a null package declaration), and so it will use that package name.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="22c282790e74cecc249727d08376e623e8df58ac" translate="yes" xml:space="preserve">
          <source>Calling &lt;code&gt;die()&lt;/code&gt; in a thread indicates an abnormal exit for the thread. Any &lt;code&gt;$SIG{__DIE__}&lt;/code&gt; handler in the thread will be called first, and then the thread will exit with a warning message that will contain any arguments passed in the &lt;code&gt;die()&lt;/code&gt; call.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="45dcc202c1bcd283c8d27205afa6c8a664424d57" translate="yes" xml:space="preserve">
          <source>Calling &lt;code&gt;finalize&lt;/code&gt; on a Prereqs object will close it for further modification. Attempting to make any changes that would actually alter the prereqs will result in an exception being thrown.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="33bb3644bf1e13b2cbec6a1bd85b13b8d5473401" translate="yes" xml:space="preserve">
          <source>Calling &lt;code&gt;finalize&lt;/code&gt; on a child with open children will &lt;code&gt;croak&lt;/code&gt; .</source>
          <target state="translated">打电话给有开放性孩子的孩子 &lt;code&gt;finalize&lt;/code&gt; 将 &lt;code&gt;croak&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="d102d9d7899bae3b5de4db95f96142eba91cc591" translate="yes" xml:space="preserve">
          <source>Calling &lt;code&gt;open&lt;/code&gt; with one argument via global variables</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a05e36379b2d12e2a61d8dca60e3236620cfbdd1" translate="yes" xml:space="preserve">
          <source>Calling Configure</source>
          <target state="translated">调用配置</target>
        </trans-unit>
        <trans-unit id="858cb737d2c8f0a72b951ab4ea78b7b78f817737" translate="yes" xml:space="preserve">
          <source>Calling Conventions and Magic Autogeneration</source>
          <target state="translated">呼叫协议和魔法自动生成</target>
        </trans-unit>
        <trans-unit id="007c7c3c00863b6f6eeae212582075fcbcd68f99" translate="yes" xml:space="preserve">
          <source>Calling POSIX::%s() is deprecated</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5a077d29f5340a5b715ff2d0b7446d09abed736c" translate="yes" xml:space="preserve">
          <source>Calling Perl Routines from within C Programs</source>
          <target state="translated">从C程序中调用Perl例程</target>
        </trans-unit>
        <trans-unit id="da4bd907e548514c9e5225dea46a70baeae7e05d" translate="yes" xml:space="preserve">
          <source>Calling PerlIO_releaseFILE informs PerlIO that all use of FILE * is complete. It is removed from the list of 'exported' FILE *s, and the associated PerlIO * should revert to its original behaviour.</source>
          <target state="translated">调用PerlIO_releaseFILE通知PerlIO对FILE *的所有使用已经完成。它从 &quot;导出 &quot;的FILE *s列表中被移除,相关的PerlIO *应该恢复到原来的行为。</target>
        </trans-unit>
        <trans-unit id="4f10f9c81f6874964032fb54a94909bb2041ccaa" translate="yes" xml:space="preserve">
          <source>Calling Pod::Simple::Search-&amp;gt;find(...) is short for Pod::Simple::Search-&amp;gt;new-&amp;gt;find(...). That is, a throwaway object with default attribute values is used.</source>
          <target state="translated">调用Pod :: Simple :: Search-&amp;gt; find（...）是Pod :: Simple :: Search-&amp;gt; new-&amp;gt; find（...）的缩写。即，使用具有默认属性值的一次性对象。</target>
        </trans-unit>
        <trans-unit id="63b53fa8f0a187ed1ffd0c16a376efb544cfcb62" translate="yes" xml:space="preserve">
          <source>Calling Pod::Simple::Search-&amp;gt;search(...) is short for Pod::Simple::Search-&amp;gt;new-&amp;gt;search(...). That is, a throwaway object with default attribute values is used.</source>
          <target state="translated">调用Pod :: Simple :: Search-&amp;gt; search（...）是Pod :: Simple :: Search-&amp;gt; new-&amp;gt; search（...）的缩写。即，使用具有默认属性值的一次性对象。</target>
        </trans-unit>
        <trans-unit id="ae570393756fa33aae649a93468e74ad3aa690b1" translate="yes" xml:space="preserve">
          <source>Calling a Perl method from C is fairly straightforward. The following things are required:</source>
          <target state="translated">从C语言中调用Perl方法是相当直接的。需要做以下事情。</target>
        </trans-unit>
        <trans-unit id="4f751357fb4ae38f84e904fc36d9db5113b5aaaf" translate="yes" xml:space="preserve">
          <source>Calling a Perl subroutine from your C program</source>
          <target state="translated">从你的C程序中调用一个Perl子程序</target>
        </trans-unit>
        <trans-unit id="c40cbac274b56e1beac728d697b23cc2ad8b3e30" translate="yes" xml:space="preserve">
          <source>Calling a method on an object is written as &lt;code&gt;$object-&amp;gt;method&lt;/code&gt; .</source>
          <target state="translated">在对象上调用方法的方式为 &lt;code&gt;$object-&amp;gt;method&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="0b9ba46d6edef1a3ad04cd36813abba303e920d0" translate="yes" xml:space="preserve">
          <source>Calling a method on an object is written as &lt;code&gt;$object-&amp;gt;method&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="effd5ea5d1271fcf8d367de7457fffef004c2411" translate="yes" xml:space="preserve">
          <source>Calling a subroutine as &lt;code&gt;&amp;amp;foo&lt;/code&gt; with no trailing parentheses ignores the prototype of &lt;code&gt;foo&lt;/code&gt; and passes it the current value of the argument list, &lt;code&gt;@_&lt;/code&gt; . Here's an example; the &lt;code&gt;bar&lt;/code&gt; subroutine calls &lt;code&gt;&amp;amp;foo&lt;/code&gt; , which prints its arguments list:</source>
          <target state="translated">调用无尾括号的 &lt;code&gt;&amp;amp;foo&lt;/code&gt; 子例程会忽略 &lt;code&gt;foo&lt;/code&gt; 的原型，并将参数列表 &lt;code&gt;@_&lt;/code&gt; 的当前值传递给它。这是一个例子。该 &lt;code&gt;bar&lt;/code&gt; 子程序调用 &lt;code&gt;&amp;amp;foo&lt;/code&gt; ，这显示它的参数列表：</target>
        </trans-unit>
        <trans-unit id="5f2e994dab175c56f2b3036cb967b87cd73f7dc9" translate="yes" xml:space="preserve">
          <source>Calling a subroutine as &lt;code&gt;&amp;amp;foo&lt;/code&gt; with no trailing parentheses ignores the prototype of &lt;code&gt;foo&lt;/code&gt; and passes it the current value of the argument list, &lt;code&gt;@_&lt;/code&gt;. Here's an example; the &lt;code&gt;bar&lt;/code&gt; subroutine calls &lt;code&gt;&amp;amp;foo&lt;/code&gt;, which prints its arguments list:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="83a5a40c5745b90b08565729f9c8b41d859bfba5" translate="yes" xml:space="preserve">
          <source>Calling an overloaded filetest operator does not affect the stat value associated with the special filehandle &lt;code&gt;_&lt;/code&gt; . It still refers to the result of the last &lt;code&gt;&lt;a href=&quot;functions/stat&quot;&gt;stat&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;functions/lstat&quot;&gt;lstat&lt;/a&gt;&lt;/code&gt; or unoverloaded filetest.</source>
          <target state="translated">调用重载的filetest运算符不会影响与特殊文件句柄 &lt;code&gt;_&lt;/code&gt; 关联的stat值。它仍然引用最后一个 &lt;code&gt;&lt;a href=&quot;functions/stat&quot;&gt;stat&lt;/a&gt;&lt;/code&gt; ， &lt;code&gt;&lt;a href=&quot;functions/lstat&quot;&gt;lstat&lt;/a&gt;&lt;/code&gt; 或unloaded filetest的结果。</target>
        </trans-unit>
        <trans-unit id="deea643f059aedfd6a8b872cf539a132679beee6" translate="yes" xml:space="preserve">
          <source>Calling an overloaded filetest operator does not affect the stat value associated with the special filehandle &lt;code&gt;_&lt;/code&gt;. It still refers to the result of the last &lt;code&gt;stat&lt;/code&gt;, &lt;code&gt;lstat&lt;/code&gt; or unoverloaded filetest.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="14b56c65ecc7ed881027be8fe2d912f5b6a36243" translate="yes" xml:space="preserve">
          <source>Calling any of the dequeue methods with &lt;code&gt;COUNT&lt;/code&gt; greater than a queue's &lt;code&gt;limit&lt;/code&gt; will generate an error.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="013392383aeb8f3aaeaada77da8e78bbc103974c" translate="yes" xml:space="preserve">
          <source>Calling either function on a string that already is in the desired state is a no-op.</source>
          <target state="translated">在一个已经处于所需状态的字符串上调用这两个函数都是不行的。</target>
        </trans-unit>
        <trans-unit id="ac9d89d6b846180f08777572deb7332f87bf19f8" translate="yes" xml:space="preserve">
          <source>Calling exec() within a pseudo-process actually spawns the requested executable in a separate process and waits for it to complete before exiting with the same exit status as that process. This means that the process ID reported within the running executable will be different from what the earlier Perl fork() might have returned. Similarly, any process manipulation functions applied to the ID returned by fork() will affect the waiting pseudo-process that called exec(), not the real process it is waiting for after the exec().</source>
          <target state="translated">在伪进程中调用exec(),实际上是在一个单独的进程中生成所请求的可执行文件,并等待其完成,然后以与该进程相同的退出状态退出。这意味着在运行中的可执行文件中报告的进程ID将与之前Perl fork()可能返回的不同。同样,任何应用于fork()返回的ID的进程操作函数都会影响调用exec()的等待伪进程,而不是它在exec()之后等待的真正进程。</target>
        </trans-unit>
        <trans-unit id="b3da6d792b23555ef8d68fd44a37624b5388c7ec" translate="yes" xml:space="preserve">
          <source>Calling methods from a package means it must be loaded, of course, so you will often want to load a module and add it to &lt;code&gt;@ISA&lt;/code&gt; at the same time. You can do so in a single step using the &lt;a href=&quot;parent&quot;&gt;parent&lt;/a&gt; pragma. (In older code you may encounter the &lt;a href=&quot;base&quot;&gt;base&lt;/a&gt; pragma, which is nowadays discouraged except when you have to work with the equally discouraged &lt;a href=&quot;fields&quot;&gt;fields&lt;/a&gt; pragma.)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5cb763801b922c32e04d2d797853c7083dee141b" translate="yes" xml:space="preserve">
          <source>Calling the &lt;code&gt;truncate&lt;/code&gt; method returns a copy of the object but with the time truncated to the start of the supplied unit.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="40ade94f7a99e61011be8ace5918982f9630cfc9" translate="yes" xml:space="preserve">
          <source>Calling the Debugger</source>
          <target state="translated">调用调试器</target>
        </trans-unit>
        <trans-unit id="2ca81641ec6217e87de3fa52de37358174c935e6" translate="yes" xml:space="preserve">
          <source>Calling the subroutine with trailing parentheses, with or without arguments, does not use the current &lt;code&gt;@_&lt;/code&gt; . Changing the example to put parentheses after the call to &lt;code&gt;foo&lt;/code&gt; changes the program:</source>
          <target state="translated">带有或不带有参数的带尾括号的子例程不会使用当前的 &lt;code&gt;@_&lt;/code&gt; 。将示例更改为在对 &lt;code&gt;foo&lt;/code&gt; 的调用后加上括号可更改程序：</target>
        </trans-unit>
        <trans-unit id="422d0af8c5eb261d34cbbb96d682bb4067741230" translate="yes" xml:space="preserve">
          <source>Calling the subroutine with trailing parentheses, with or without arguments, does not use the current &lt;code&gt;@_&lt;/code&gt;. Changing the example to put parentheses after the call to &lt;code&gt;foo&lt;/code&gt; changes the program:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="492d320490c0c1bea0a0670c56d499e8b857ba1c" translate="yes" xml:space="preserve">
          <source>Calling this function repeatedly will create a FILE * on each call (and will push an :stdio layer each time as well).</source>
          <target state="translated">反复调用这个函数会在每次调用时创建一个FILE *(并且每次也会推送一个:stdio层)。</target>
        </trans-unit>
        <trans-unit id="bc6008c1e7f7d9345b7132b8abf50b8ba6fadc50" translate="yes" xml:space="preserve">
          <source>Calling this function will cause any temp files or temp directories that are registered for removal to be removed. This happens automatically when the process exits but can be triggered manually if the caller is sure that none of the temp files are required. This method can be registered as an Apache callback.</source>
          <target state="translated">调用此函数将导致任何注册为删除的临时文件或临时目录被删除。这将在进程退出时自动发生,但如果调用者确定不需要临时文件,也可以手动触发。这个方法可以被注册为Apache的回调。</target>
        </trans-unit>
        <trans-unit id="35a047a5a40f59a3fe1e8072e49516ca5ef89a11" translate="yes" xml:space="preserve">
          <source>Calling this method without any arguments will reset the booleans to their default values.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b2c554dbf8d391703907c916da0c8b2d2b667cbb" translate="yes" xml:space="preserve">
          <source>Calling this on the root builder is a no-op.</source>
          <target state="translated">在根基建树上调用这个是不行的。</target>
        </trans-unit>
        <trans-unit id="2e765d5d5aa54eb2d852bc799f3a264f32d02c18" translate="yes" xml:space="preserve">
          <source>Calling with ampersand syntax and through references does not work for the following functions, as they have special syntax that cannot always be translated into a simple list (e.g., &lt;code&gt;&lt;a href=&quot;functions/eof&quot;&gt;eof&lt;/a&gt;&lt;/code&gt; vs &lt;code&gt;&lt;a href=&quot;functions/eof&quot;&gt;eof()&lt;/a&gt;&lt;/code&gt;):</source>
          <target state="translated">对于以下函数，使用＆语法和通过引用进行调用不适用于以下函数，因为它们具有的特殊语法无法始终转换为简单列表（例如 &lt;code&gt;&lt;a href=&quot;functions/eof&quot;&gt;eof&lt;/a&gt;&lt;/code&gt; 与 &lt;code&gt;&lt;a href=&quot;functions/eof&quot;&gt;eof()&lt;/a&gt;&lt;/code&gt; ）：</target>
        </trans-unit>
        <trans-unit id="572ae6ad378888078239d3f0fa7d20957b159547" translate="yes" xml:space="preserve">
          <source>Calling with ampersand syntax and through references does not work for the following functions, as they have special syntax that cannot always be translated into a simple list (e.g., &lt;code&gt;eof&lt;/code&gt; vs &lt;code&gt;eof()&lt;/code&gt;):</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e1d2f00d0a68b61567b5869949b9613e61d77b2e" translate="yes" xml:space="preserve">
          <source>Callon, Ross, editor. 1996.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c4be13ee9b6c0119a6fc3735504c657f3d22aba3" translate="yes" xml:space="preserve">
          <source>Calls &lt;a href=&quot;http://man.he.net/man2/flock&quot;&gt;flock(2)&lt;/a&gt;, or an emulation of it, on FILEHANDLE. Returns true for success, false on failure. Produces a fatal error if used on a machine that doesn't implement &lt;a href=&quot;http://man.he.net/man2/flock&quot;&gt;flock(2)&lt;/a&gt;, &lt;a href=&quot;http://man.he.net/man2/fcntl&quot;&gt;fcntl(2)&lt;/a&gt; locking, or &lt;a href=&quot;http://man.he.net/man3/lockf&quot;&gt;lockf(3)&lt;/a&gt;. &lt;a href=&quot;#flock-FILEHANDLE%2COPERATION&quot;&gt;&lt;code&gt;flock&lt;/code&gt;&lt;/a&gt; is Perl's portable file-locking interface, although it locks entire files only, not records.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fd4f026ec1a5607feec9a1e107752900730638f9" translate="yes" xml:space="preserve">
          <source>Calls &lt;code&gt;Test::Builder-&amp;gt;no_ending&lt;/code&gt; turning off the ending tests. This is needed as otherwise it will trip out because we've run more tests than we strictly should have and it'll register any failures we had that we were testing for as real failures.</source>
          <target state="translated">调用 &lt;code&gt;Test::Builder-&amp;gt;no_ending&lt;/code&gt; 关闭结束测试。这是必需的，否则它将跳闸，因为我们运行的测试超出了我们应有的严格标准，并且会将我们测试过的所有失败记录为真正的失败。</target>
        </trans-unit>
        <trans-unit id="e2d11676efd2bea34999087c58d58b6f570aee40" translate="yes" xml:space="preserve">
          <source>Calls &lt;code&gt;sv_setsv&lt;/code&gt; if &lt;code&gt;dsv&lt;/code&gt; is not the same as &lt;code&gt;ssv&lt;/code&gt;. May evaluate arguments more than once. Does not handle 'set' magic on the destination SV.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="590c7d6e88adb5bddf3d8f642e0126b6c862bc26" translate="yes" xml:space="preserve">
          <source>Calls &lt;code&gt;sv_setsv&lt;/code&gt; if dsv is not the same as ssv. May evaluate arguments more than once. Does not handle 'set' magic on the destination SV.</source>
          <target state="translated">呼叫 &lt;code&gt;sv_setsv&lt;/code&gt; 如果DSV是不一样的SSV。可能会多次评估参数。不处理目标SV上的&amp;ldquo;设置&amp;rdquo;魔法。</target>
        </trans-unit>
        <trans-unit id="ecc1c1a42047512bf4698d979850ea62424810ba" translate="yes" xml:space="preserve">
          <source>Calls Cwd::cwd</source>
          <target state="translated">调用Cwd::cwd。</target>
        </trans-unit>
        <trans-unit id="c904982ef90b628587f5e1c223b066f40097484e" translate="yes" xml:space="preserve">
          <source>Calls Cwd::fastcwd</source>
          <target state="translated">调用Cwd::fastcwd。</target>
        </trans-unit>
        <trans-unit id="8c1ba5cb44af7e4a4c20a5047a781fc7e8a8fc22" translate="yes" xml:space="preserve">
          <source>Calls Cwd::getcwd</source>
          <target state="translated">调用Cwd::getcwd。</target>
        </trans-unit>
        <trans-unit id="206e7aa2eb36edf2b309bbc5748aac00256c2321" translate="yes" xml:space="preserve">
          <source>Calls Cwd::getdcwd</source>
          <target state="translated">调用Cwd::getdcwd。</target>
        </trans-unit>
        <trans-unit id="2af7df6efbe8d09524c66413aabddc70ce66b453" translate="yes" xml:space="preserve">
          <source>Calls a non-destructive version of &lt;code&gt;sv_setsv&lt;/code&gt; if &lt;code&gt;dsv&lt;/code&gt; is not the same as &lt;code&gt;ssv&lt;/code&gt;. May evaluate arguments more than once.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="780a41207facdbbb71db04db90d90ec1fa2163f5" translate="yes" xml:space="preserve">
          <source>Calls a non-destructive version of &lt;code&gt;sv_setsv&lt;/code&gt; if dsv is not the same as ssv. May evaluate arguments more than once.</source>
          <target state="translated">如果dsv 与 &lt;code&gt;sv_setsv&lt;/code&gt; 则调用sv_setsv 的非破坏性版本。可能会多次评估参数。</target>
        </trans-unit>
        <trans-unit id="4ff2ef8b2188043c87a9c12a3c9cbf04635b332b" translate="yes" xml:space="preserve">
          <source>Calls flock(2), or an emulation of it, on FILEHANDLE. Returns true for success, false on failure. Produces a fatal error if used on a machine that doesn't implement flock(2), fcntl(2) locking, or lockf(3). &lt;code&gt;&lt;a href=&quot;flock&quot;&gt;flock&lt;/a&gt;&lt;/code&gt; is Perl's portable file-locking interface, although it locks entire files only, not records.</source>
          <target state="translated">在FILEHANDLE上调用flock（2）或其仿真。成功返回true，失败返回false。如果在未实现flock（2），fcntl（2）锁定或lockf（3）的计算机上使用，则会产生致命错误。 &lt;code&gt;&lt;a href=&quot;flock&quot;&gt;flock&lt;/a&gt;&lt;/code&gt; 是Perl的可移植文件锁定接口，尽管它仅锁定整个文件，而不是记录。</target>
        </trans-unit>
        <trans-unit id="bb35c1fa57137cad992f4edf7e56c85897367e17" translate="yes" xml:space="preserve">
          <source>Calls flock(2), or an emulation of it, on FILEHANDLE. Returns true for success, false on failure. Produces a fatal error if used on a machine that doesn't implement flock(2), fcntl(2) locking, or lockf(3). &lt;code&gt;&lt;a href=&quot;functions/flock&quot;&gt;flock&lt;/a&gt;&lt;/code&gt; is Perl's portable file-locking interface, although it locks entire files only, not records.</source>
          <target state="translated">在FILEHANDLE上调用flock（2）或其仿真。成功返回true，失败返回false。如果在未实现flock（2），fcntl（2）锁定或lockf（3）的计算机上使用，则会产生致命错误。 &lt;code&gt;&lt;a href=&quot;functions/flock&quot;&gt;flock&lt;/a&gt;&lt;/code&gt; 是Perl的可移植文件锁定接口，尽管它仅锁定整个文件，而不是记录。</target>
        </trans-unit>
        <trans-unit id="773f4cafc0f3777dd34c2b664ecf08fdcad62645" translate="yes" xml:space="preserve">
          <source>Calls install() with arguments to copy a module from blib/ to the default site installation location.</source>
          <target state="translated">调用install(),其参数是将一个模块从blib/复制到默认的站点安装位置。</target>
        </trans-unit>
        <trans-unit id="f72e847b0819bcbc3ab49dbf4b9ab2bb349a665c" translate="yes" xml:space="preserve">
          <source>Calls makeaperl.</source>
          <target state="translated">呼叫使aperl。</target>
        </trans-unit>
        <trans-unit id="37943b6a726d9d0c50758cce3c190484f78dfe2c" translate="yes" xml:space="preserve">
          <source>Calls the Perl subroutine in a list context.</source>
          <target state="translated">在列表上下文中调用Perl子程序。</target>
        </trans-unit>
        <trans-unit id="bb7f57720f3817b40ff0bbe8ea59e47c2d2ab29e" translate="yes" xml:space="preserve">
          <source>Calls the Perl subroutine in a scalar context. This is the default context flag setting for all the</source>
          <target state="translated">在标量上下文中调用Perl子程序。这是所有的</target>
        </trans-unit>
        <trans-unit id="73962f3f75b41688efacfc0da40dee4461b9fec3" translate="yes" xml:space="preserve">
          <source>Calls the Perl subroutine in a void context.</source>
          <target state="translated">在void上下文中调用Perl子程序。</target>
        </trans-unit>
        <trans-unit id="a917066a2b971e1883f106f1c39848e3431a241f" translate="yes" xml:space="preserve">
          <source>Calls the System V IPC function &lt;a href=&quot;http://man.he.net/man2/msgctl&quot;&gt;msgctl(2)&lt;/a&gt;. You'll probably have to say</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="57e4fe26c30e1fa24204f31776f0762d325e8b11" translate="yes" xml:space="preserve">
          <source>Calls the System V IPC function &lt;a href=&quot;http://man.he.net/man2/msgget&quot;&gt;msgget(2)&lt;/a&gt;. Returns the message queue id, or &lt;a href=&quot;#undef-EXPR&quot;&gt;&lt;code&gt;undef&lt;/code&gt;&lt;/a&gt; on error. See also &lt;a href=&quot;perlipc#SysV-IPC&quot;&gt;&quot;SysV IPC&quot; in perlipc&lt;/a&gt; and the documentation for &lt;a href=&quot;IPC::SysV&quot;&gt;&lt;code&gt;IPC::SysV&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;IPC::Msg&quot;&gt;&lt;code&gt;IPC::Msg&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2ed1326cac6665ddf6fabcb783d39b2410699c9f" translate="yes" xml:space="preserve">
          <source>Calls the System V IPC function &lt;a href=&quot;http://man.he.net/man2/semctl&quot;&gt;semctl(2)&lt;/a&gt;. You'll probably have to say</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="51f6b9cf3287200835df80787252ceca2e3e01f3" translate="yes" xml:space="preserve">
          <source>Calls the System V IPC function &lt;a href=&quot;http://man.he.net/man2/semget&quot;&gt;semget(2)&lt;/a&gt;. Returns the semaphore id, or the undefined value on error. See also &lt;a href=&quot;perlipc#SysV-IPC&quot;&gt;&quot;SysV IPC&quot; in perlipc&lt;/a&gt; and the documentation for &lt;a href=&quot;IPC::SysV&quot;&gt;&lt;code&gt;IPC::SysV&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;IPC::Semaphore&quot;&gt;&lt;code&gt;IPC::Semaphore&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c8f45ddf4f5072f6080434b7d93e3b080f31d293" translate="yes" xml:space="preserve">
          <source>Calls the System V IPC function &lt;a href=&quot;http://man.he.net/man2/semop&quot;&gt;semop(2)&lt;/a&gt; for semaphore operations such as signalling and waiting. OPSTRING must be a packed array of semop structures. Each semop structure can be generated with &lt;code&gt;pack(&quot;s!3&quot;, $semnum, $semop, $semflag)&lt;/code&gt;. The length of OPSTRING implies the number of semaphore operations. Returns true if successful, false on error. As an example, the following code waits on semaphore $semnum of semaphore id $semid:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f29d60ee63be0b6e387efbeaa174ef5a3adf4ba4" translate="yes" xml:space="preserve">
          <source>Calls the System V IPC function msgctl(2). You'll probably have to say</source>
          <target state="translated">调用System V IPC函数msgctl(2)。您可能会说</target>
        </trans-unit>
        <trans-unit id="be9988a6d42da7c4020e6a5f954992f1c4491de0" translate="yes" xml:space="preserve">
          <source>Calls the System V IPC function msgget(2). Returns the message queue id, or &lt;code&gt;&lt;a href=&quot;functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; on error. See also &lt;a href=&quot;perlipc#SysV-IPC&quot;&gt;SysV IPC in perlipc&lt;/a&gt; and the documentation for &lt;code&gt;IPC::SysV&lt;/code&gt; and &lt;code&gt;IPC::Msg&lt;/code&gt; .</source>
          <target state="translated">调用系统V IPC函数msgget（2）。返回消息队列ID，或在出错时 &lt;code&gt;&lt;a href=&quot;functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; 。另请参见&lt;a href=&quot;perlipc#SysV-IPC&quot;&gt;perlipc中的SysV IPC&lt;/a&gt;和 &lt;code&gt;IPC::SysV&lt;/code&gt; 和 &lt;code&gt;IPC::Msg&lt;/code&gt; 的文档。</target>
        </trans-unit>
        <trans-unit id="98b9f73da86e0e6b472bbcb69f309820842a2666" translate="yes" xml:space="preserve">
          <source>Calls the System V IPC function msgget(2). Returns the message queue id, or &lt;code&gt;&lt;a href=&quot;undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; on error. See also &lt;a href=&quot;../perlipc#SysV-IPC&quot;&gt;SysV IPC in perlipc&lt;/a&gt; and the documentation for &lt;code&gt;IPC::SysV&lt;/code&gt; and &lt;code&gt;IPC::Msg&lt;/code&gt; .</source>
          <target state="translated">调用系统V IPC函数msgget（2）。返回消息队列ID，或在出错时 &lt;code&gt;&lt;a href=&quot;undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; 。另请参见&lt;a href=&quot;../perlipc#SysV-IPC&quot;&gt;perlipc中的SysV IPC&lt;/a&gt;和 &lt;code&gt;IPC::SysV&lt;/code&gt; 和 &lt;code&gt;IPC::Msg&lt;/code&gt; 的文档。</target>
        </trans-unit>
        <trans-unit id="bc2abfdb7a6e8deeeb37c01f08b5371f84b9260b" translate="yes" xml:space="preserve">
          <source>Calls the System V IPC function msgrcv to receive a message from message queue ID into variable VAR with a maximum message size of SIZE. Note that when a message is received, the message type as a native long integer will be the first thing in VAR, followed by the actual message. This packing may be opened with &lt;code&gt;&lt;a href=&quot;functions/unpack&quot;&gt;unpack&lt;/a&gt;(&quot;l! a*&quot;)&lt;/code&gt; . Taints the variable. Returns true if successful, false on error. See also &lt;a href=&quot;perlipc#SysV-IPC&quot;&gt;SysV IPC in perlipc&lt;/a&gt; and the documentation for &lt;code&gt;IPC::SysV&lt;/code&gt; and &lt;code&gt;IPC::SysV::Msg&lt;/code&gt; .</source>
          <target state="translated">调用系统V IPC函数msgrcv，以将消息队列ID中的消息接收到最大消息大小为SIZE的变量VAR中。请注意，收到消息时，消息类型（本机长整数）将是VAR中的第一件事，其次是实际消息。该包装可打开 &lt;code&gt;&lt;a href=&quot;functions/unpack&quot;&gt;unpack&lt;/a&gt;(&quot;l! a*&quot;)&lt;/code&gt; 。污染变量。如果成功，则返回true；如果错误，则返回false。另请参见&lt;a href=&quot;perlipc#SysV-IPC&quot;&gt;perlipc中的SysV IPC&lt;/a&gt;和 &lt;code&gt;IPC::SysV&lt;/code&gt; 和 &lt;code&gt;IPC::SysV::Msg&lt;/code&gt; 的文档。</target>
        </trans-unit>
        <trans-unit id="948f348f6fa98a8010bd8fc9ae4ccc04726f6c57" translate="yes" xml:space="preserve">
          <source>Calls the System V IPC function msgrcv to receive a message from message queue ID into variable VAR with a maximum message size of SIZE. Note that when a message is received, the message type as a native long integer will be the first thing in VAR, followed by the actual message. This packing may be opened with &lt;code&gt;&lt;a href=&quot;unpack&quot;&gt;unpack&lt;/a&gt;(&quot;l! a*&quot;)&lt;/code&gt; . Taints the variable. Returns true if successful, false on error. See also &lt;a href=&quot;../perlipc#SysV-IPC&quot;&gt;SysV IPC in perlipc&lt;/a&gt; and the documentation for &lt;code&gt;IPC::SysV&lt;/code&gt; and &lt;code&gt;IPC::SysV::Msg&lt;/code&gt; .</source>
          <target state="translated">调用系统V IPC函数msgrcv，以将消息队列ID中的消息接收到最大消息大小为SIZE的变量VAR中。请注意，收到消息时，消息类型（本机长整数）将是VAR中的第一件事，其次是实际消息。该包装可打开 &lt;code&gt;&lt;a href=&quot;unpack&quot;&gt;unpack&lt;/a&gt;(&quot;l! a*&quot;)&lt;/code&gt; 。污染变量。如果成功，则返回true；如果错误，则返回false。另请参见&lt;a href=&quot;../perlipc#SysV-IPC&quot;&gt;perlipc中的SysV IPC&lt;/a&gt;和 &lt;code&gt;IPC::SysV&lt;/code&gt; 和 &lt;code&gt;IPC::SysV::Msg&lt;/code&gt; 的文档。</target>
        </trans-unit>
        <trans-unit id="85d31b1b6ccaa6ed03aaac494aa638c440797b62" translate="yes" xml:space="preserve">
          <source>Calls the System V IPC function msgrcv to receive a message from message queue ID into variable VAR with a maximum message size of SIZE. Note that when a message is received, the message type as a native long integer will be the first thing in VAR, followed by the actual message. This packing may be opened with &lt;code&gt;unpack(&quot;l! a*&quot;)&lt;/code&gt;. Taints the variable. Returns true if successful, false on error. See also &lt;a href=&quot;perlipc#SysV-IPC&quot;&gt;&quot;SysV IPC&quot; in perlipc&lt;/a&gt; and the documentation for &lt;a href=&quot;IPC::SysV&quot;&gt;&lt;code&gt;IPC::SysV&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;IPC::Msg&quot;&gt;&lt;code&gt;IPC::Msg&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c5afcee05064a60e928b37ea8427c6294d37aba0" translate="yes" xml:space="preserve">
          <source>Calls the System V IPC function msgsnd to send the message MSG to the message queue ID. MSG must begin with the native long integer message type, be followed by the length of the actual message, and then finally the message itself. This kind of packing can be achieved with &lt;code&gt;&lt;a href=&quot;functions/pack&quot;&gt;pack&lt;/a&gt;(&quot;l! a*&quot;, $type, $message)&lt;/code&gt; . Returns true if successful, false on error. See also the &lt;code&gt;IPC::SysV&lt;/code&gt; and &lt;code&gt;IPC::SysV::Msg&lt;/code&gt; documentation.</source>
          <target state="translated">调用系统V IPC函数msgsnd将消息MSG发送到消息队列ID。MSG必须以本机长整数消息类型开头，后跟实际消息的长度，最后是消息本身。可以使用 &lt;code&gt;&lt;a href=&quot;functions/pack&quot;&gt;pack&lt;/a&gt;(&quot;l! a*&quot;, $type, $message)&lt;/code&gt; 实现这种打包。如果成功，则返回true；如果错误，则返回false。另请参阅 &lt;code&gt;IPC::SysV&lt;/code&gt; 和 &lt;code&gt;IPC::SysV::Msg&lt;/code&gt; 文档。</target>
        </trans-unit>
        <trans-unit id="11394b0f70e6027e810e867a48b7248721c79467" translate="yes" xml:space="preserve">
          <source>Calls the System V IPC function msgsnd to send the message MSG to the message queue ID. MSG must begin with the native long integer message type, be followed by the length of the actual message, and then finally the message itself. This kind of packing can be achieved with &lt;code&gt;&lt;a href=&quot;pack&quot;&gt;pack&lt;/a&gt;(&quot;l! a*&quot;, $type, $message)&lt;/code&gt; . Returns true if successful, false on error. See also the &lt;code&gt;IPC::SysV&lt;/code&gt; and &lt;code&gt;IPC::SysV::Msg&lt;/code&gt; documentation.</source>
          <target state="translated">调用系统V IPC函数msgsnd将消息MSG发送到消息队列ID。MSG必须以本机长整数消息类型开头，后跟实际消息的长度，最后是消息本身。可以使用 &lt;code&gt;&lt;a href=&quot;pack&quot;&gt;pack&lt;/a&gt;(&quot;l! a*&quot;, $type, $message)&lt;/code&gt; 实现这种打包。如果成功，则返回true；如果错误，则返回false。另请参阅 &lt;code&gt;IPC::SysV&lt;/code&gt; 和 &lt;code&gt;IPC::SysV::Msg&lt;/code&gt; 文档。</target>
        </trans-unit>
        <trans-unit id="8851b56288c91863a6d17483301ecf8e41e3ecfb" translate="yes" xml:space="preserve">
          <source>Calls the System V IPC function msgsnd to send the message MSG to the message queue ID. MSG must begin with the native long integer message type, be followed by the length of the actual message, and then finally the message itself. This kind of packing can be achieved with &lt;code&gt;pack(&quot;l! a*&quot;, $type, $message)&lt;/code&gt;. Returns true if successful, false on error. See also &lt;a href=&quot;perlipc#SysV-IPC&quot;&gt;&quot;SysV IPC&quot; in perlipc&lt;/a&gt; and the documentation for &lt;a href=&quot;IPC::SysV&quot;&gt;&lt;code&gt;IPC::SysV&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;IPC::Msg&quot;&gt;&lt;code&gt;IPC::Msg&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6019e00f804cda82d4ccc726e831f656c990eb13" translate="yes" xml:space="preserve">
          <source>Calls the System V IPC function semctl(2). You'll probably have to say</source>
          <target state="translated">调用System V IPC函数semctl(2)。你可能不得不说</target>
        </trans-unit>
        <trans-unit id="5f610b5b4eaf02b0f729a98fdbc4342fbee172a9" translate="yes" xml:space="preserve">
          <source>Calls the System V IPC function semget(2). Returns the semaphore id, or the undefined value on error. See also &lt;a href=&quot;../perlipc#SysV-IPC&quot;&gt;SysV IPC in perlipc&lt;/a&gt;, &lt;code&gt;IPC::SysV&lt;/code&gt; , &lt;code&gt;IPC::SysV::Semaphore&lt;/code&gt; documentation.</source>
          <target state="translated">调用系统V IPC函数semget（2）。返回信号灯ID，或在错误时返回未定义的值。另请参见&lt;a href=&quot;../perlipc#SysV-IPC&quot;&gt;perlipc中的SysV IPC&lt;/a&gt;， &lt;code&gt;IPC::SysV&lt;/code&gt; ， &lt;code&gt;IPC::SysV::Semaphore&lt;/code&gt; 文档。</target>
        </trans-unit>
        <trans-unit id="315be1c7490d0b06d562bb984c8930c31052ce5c" translate="yes" xml:space="preserve">
          <source>Calls the System V IPC function semget(2). Returns the semaphore id, or the undefined value on error. See also &lt;a href=&quot;perlipc#SysV-IPC&quot;&gt;SysV IPC in perlipc&lt;/a&gt;, &lt;code&gt;IPC::SysV&lt;/code&gt; , &lt;code&gt;IPC::SysV::Semaphore&lt;/code&gt; documentation.</source>
          <target state="translated">调用系统V IPC函数semget（2）。返回信号灯ID，或在错误时返回未定义的值。另请参见&lt;a href=&quot;perlipc#SysV-IPC&quot;&gt;perlipc中的SysV IPC&lt;/a&gt;， &lt;code&gt;IPC::SysV&lt;/code&gt; ， &lt;code&gt;IPC::SysV::Semaphore&lt;/code&gt; 文档。</target>
        </trans-unit>
        <trans-unit id="ef274fb91ef606897494225538343bd9782c7288" translate="yes" xml:space="preserve">
          <source>Calls the System V IPC function semop(2) for semaphore operations such as signalling and waiting. OPSTRING must be a packed array of semop structures. Each semop structure can be generated with &lt;code&gt;&lt;a href=&quot;functions/pack&quot;&gt;pack&lt;/a&gt;(&quot;s!3&quot;, $semnum, $semop, $semflag)&lt;/code&gt; . The length of OPSTRING implies the number of semaphore operations. Returns true if successful, false on error. As an example, the following code waits on semaphore $semnum of semaphore id $semid:</source>
          <target state="translated">调用System V IPC函数semop（2）进行信号量操作，例如信令和等待。 OPSTRING必须是打包的semop结构数组。每个semop结构都可以用 &lt;code&gt;&lt;a href=&quot;functions/pack&quot;&gt;pack&lt;/a&gt;(&quot;s!3&quot;, $semnum, $semop, $semflag)&lt;/code&gt; 。 OPSTRING的长度表示信号量操作的数量。如果成功，则返回true；如果错误，则返回false。例如，以下代码在信号灯ID $ semid的信号灯$ semnum上等待：</target>
        </trans-unit>
        <trans-unit id="e0c44ed833fa28db0acecadac8e6a6c1fb4ee6ed" translate="yes" xml:space="preserve">
          <source>Calls the System V IPC function semop(2) for semaphore operations such as signalling and waiting. OPSTRING must be a packed array of semop structures. Each semop structure can be generated with &lt;code&gt;&lt;a href=&quot;pack&quot;&gt;pack&lt;/a&gt;(&quot;s!3&quot;, $semnum, $semop, $semflag)&lt;/code&gt; . The length of OPSTRING implies the number of semaphore operations. Returns true if successful, false on error. As an example, the following code waits on semaphore $semnum of semaphore id $semid:</source>
          <target state="translated">调用System V IPC函数semop（2）进行信号量操作，例如信令和等待。 OPSTRING必须是打包的semop结构数组。每个semop结构都可以用 &lt;code&gt;&lt;a href=&quot;pack&quot;&gt;pack&lt;/a&gt;(&quot;s!3&quot;, $semnum, $semop, $semflag)&lt;/code&gt; 。 OPSTRING的长度表示信号量操作的数量。如果成功，则返回true；如果错误，则返回false。例如，以下代码在信号灯ID $ semid的信号灯$ semnum上等待：</target>
        </trans-unit>
        <trans-unit id="c7ffce30c16d2adb19634cb73edd07b139d51d58" translate="yes" xml:space="preserve">
          <source>Calls the System V IPC function shmctl. You'll probably have to say</source>
          <target state="translated">调用System V IPC函数shmctl。你可能不得不说</target>
        </trans-unit>
        <trans-unit id="ccef605f2e6df70fde49a59cc497d30196bec568" translate="yes" xml:space="preserve">
          <source>Calls the System V IPC function shmget. Returns the shared memory segment id, or &lt;a href=&quot;#undef-EXPR&quot;&gt;&lt;code&gt;undef&lt;/code&gt;&lt;/a&gt; on error. See also &lt;a href=&quot;perlipc#SysV-IPC&quot;&gt;&quot;SysV IPC&quot; in perlipc&lt;/a&gt; and the documentation for &lt;a href=&quot;IPC::SysV&quot;&gt;&lt;code&gt;IPC::SysV&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b0bc62f7fa862b27b2de307fc455c072f03da35c" translate="yes" xml:space="preserve">
          <source>Calls the System V IPC function shmget. Returns the shared memory segment id, or &lt;code&gt;&lt;a href=&quot;functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; on error. See also &lt;a href=&quot;perlipc#SysV-IPC&quot;&gt;SysV IPC in perlipc&lt;/a&gt; and &lt;code&gt;IPC::SysV&lt;/code&gt; documentation.</source>
          <target state="translated">调用系统V IPC函数shmget。返回共享内存段的ID，或在出错时 &lt;code&gt;&lt;a href=&quot;functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; 。另请参见&lt;a href=&quot;perlipc#SysV-IPC&quot;&gt;perlipc中的SysV IPC&lt;/a&gt;和 &lt;code&gt;IPC::SysV&lt;/code&gt; 文档。</target>
        </trans-unit>
        <trans-unit id="4c305f2b321c34aa679da0caad314dcb3d11fcda" translate="yes" xml:space="preserve">
          <source>Calls the System V IPC function shmget. Returns the shared memory segment id, or &lt;code&gt;&lt;a href=&quot;undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; on error. See also &lt;a href=&quot;../perlipc#SysV-IPC&quot;&gt;SysV IPC in perlipc&lt;/a&gt; and &lt;code&gt;IPC::SysV&lt;/code&gt; documentation.</source>
          <target state="translated">调用系统V IPC函数shmget。返回共享内存段的ID，或在出错时 &lt;code&gt;&lt;a href=&quot;undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; 。另请参见&lt;a href=&quot;../perlipc#SysV-IPC&quot;&gt;perlipc中的SysV IPC&lt;/a&gt;和 &lt;code&gt;IPC::SysV&lt;/code&gt; 文档。</target>
        </trans-unit>
        <trans-unit id="171e1908f8052943b22ba1224601d2782bb8861e" translate="yes" xml:space="preserve">
          <source>Calls the external command cwd.</source>
          <target state="translated">调用外部命令cwd。</target>
        </trans-unit>
        <trans-unit id="3c0dfe2a93186d77d26e8574e4df98dbb4f6b11b" translate="yes" xml:space="preserve">
          <source>Calls the reports() method on the associated distribution object.</source>
          <target state="translated">调用关联分发对象上的reports()方法。</target>
        </trans-unit>
        <trans-unit id="96cd064be72718f49bf44f8c4387cf9595674530" translate="yes" xml:space="preserve">
          <source>Calls the system call specified as the first element of the list, passing the remaining elements as arguments to the system call. If unimplemented, raises an exception. The arguments are interpreted as follows: if a given argument is numeric, the argument is passed as an int. If not, the pointer to the string value is passed. You are responsible to make sure a string is pre-extended long enough to receive any result that might be written into a string. You can't use a string literal (or other read-only string) as an argument to &lt;a href=&quot;#syscall-NUMBER%2C-LIST&quot;&gt;&lt;code&gt;syscall&lt;/code&gt;&lt;/a&gt; because Perl has to assume that any string pointer might be written through. If your integer arguments are not literals and have never been interpreted in a numeric context, you may need to add &lt;code&gt;0&lt;/code&gt; to them to force them to look like numbers. This emulates the &lt;a href=&quot;#syswrite-FILEHANDLE%2CSCALAR%2CLENGTH%2COFFSET&quot;&gt;&lt;code&gt;syswrite&lt;/code&gt;&lt;/a&gt; function (or vice versa):</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e80219f44739d96f5e20c3cf29ed7bd7ff8e792b" translate="yes" xml:space="preserve">
          <source>Calls the system call specified as the first element of the list, passing the remaining elements as arguments to the system call. If unimplemented, raises an exception. The arguments are interpreted as follows: if a given argument is numeric, the argument is passed as an int. If not, the pointer to the string value is passed. You are responsible to make sure a string is pre-extended long enough to receive any result that might be written into a string. You can't use a string literal (or other read-only string) as an argument to &lt;code&gt;&lt;a href=&quot;functions/syscall&quot;&gt;syscall&lt;/a&gt;&lt;/code&gt; because Perl has to assume that any string pointer might be written through. If your integer arguments are not literals and have never been interpreted in a numeric context, you may need to add &lt;code&gt;0&lt;/code&gt; to them to force them to look like numbers. This emulates the &lt;code&gt;&lt;a href=&quot;functions/syswrite&quot;&gt;syswrite&lt;/a&gt;&lt;/code&gt; function (or vice versa):</source>
          <target state="translated">调用指定为列表第一个元素的系统调用，并将其余元素作为参数传递给系统调用。如果未实现，则会引发异常。参数的解释如下：如果给定的参数是数字，则该参数作为int传递。如果不是，则传递指向字符串值的指针。您有责任确保将字符串预扩展足够长的时间，以接收可能写入字符串的任何结果。您不能将字符串文字（或其他只读字符串）用作 &lt;code&gt;&lt;a href=&quot;functions/syscall&quot;&gt;syscall&lt;/a&gt;&lt;/code&gt; 的参数，因为Perl必须假定可能会写入任何字符串指针。如果您的整数参数不是文字，并且从未在数字上下文中进行解释，则可能需要添加 &lt;code&gt;0&lt;/code&gt; 他们强迫他们看起来像数字。这模拟 &lt;code&gt;&lt;a href=&quot;functions/syswrite&quot;&gt;syswrite&lt;/a&gt;&lt;/code&gt; 函数（反之亦然）：</target>
        </trans-unit>
        <trans-unit id="14adf48ff5b79cf02eb35e0df8ee02d1dedea8a0" translate="yes" xml:space="preserve">
          <source>Calls the system call specified as the first element of the list, passing the remaining elements as arguments to the system call. If unimplemented, raises an exception. The arguments are interpreted as follows: if a given argument is numeric, the argument is passed as an int. If not, the pointer to the string value is passed. You are responsible to make sure a string is pre-extended long enough to receive any result that might be written into a string. You can't use a string literal (or other read-only string) as an argument to &lt;code&gt;&lt;a href=&quot;syscall&quot;&gt;syscall&lt;/a&gt;&lt;/code&gt; because Perl has to assume that any string pointer might be written through. If your integer arguments are not literals and have never been interpreted in a numeric context, you may need to add &lt;code&gt;0&lt;/code&gt; to them to force them to look like numbers. This emulates the &lt;code&gt;&lt;a href=&quot;syswrite&quot;&gt;syswrite&lt;/a&gt;&lt;/code&gt; function (or vice versa):</source>
          <target state="translated">调用指定为列表第一个元素的系统调用，并将其余元素作为参数传递给系统调用。如果未实现，则会引发异常。参数的解释如下：如果给定的参数是数字，则该参数作为int传递。如果不是，则传递指向字符串值的指针。您有责任确保将字符串预扩展足够长的时间，以接收可能写入字符串的任何结果。您不能将字符串文字（或其他只读字符串）用作 &lt;code&gt;&lt;a href=&quot;syscall&quot;&gt;syscall&lt;/a&gt;&lt;/code&gt; 的参数，因为Perl必须假定可能会写入任何字符串指针。如果您的整数参数不是文字，并且从未在数字上下文中进行解释，则可能需要添加 &lt;code&gt;0&lt;/code&gt; 他们强迫他们看起来像数字。这模拟 &lt;code&gt;&lt;a href=&quot;syswrite&quot;&gt;syswrite&lt;/a&gt;&lt;/code&gt; 函数（反之亦然）：</target>
        </trans-unit>
        <trans-unit id="4689606e99f2e0dc6a1ba0af906a041a8988cfda" translate="yes" xml:space="preserve">
          <source>Calls to external programs</source>
          <target state="translated">呼叫外部程序</target>
        </trans-unit>
        <trans-unit id="b9f578265a3254a0619351c53e86631e90149c66" translate="yes" xml:space="preserve">
          <source>Calls user-supplied functions for conversion. For &lt;code&gt;OUTPUT&lt;/code&gt; (XSUB to Perl), a function named &lt;code&gt;XS_pack_$ntype&lt;/code&gt; is called with the output Perl scalar and the C variable to convert from. &lt;code&gt;$ntype&lt;/code&gt; is the normalized C type that is to be mapped to Perl. Normalized means that all &lt;code&gt;*&lt;/code&gt; are replaced by the string &lt;code&gt;Ptr&lt;/code&gt; . The return value of the function is ignored.</source>
          <target state="translated">调用用户提供的函数进行转换。对于 &lt;code&gt;OUTPUT&lt;/code&gt; （从XSUB到Perl），将调用名为 &lt;code&gt;XS_pack_$ntype&lt;/code&gt; 的函数，并使用输出Perl标量和C变量进行转换。 &lt;code&gt;$ntype&lt;/code&gt; 是要映射到Perl的规范化C类型。规范化意味着所有 &lt;code&gt;*&lt;/code&gt; 被字符串 &lt;code&gt;Ptr&lt;/code&gt; 替换。该函数的返回值将被忽略。</target>
        </trans-unit>
        <trans-unit id="5713c56b79a368245b2288e1a9373414b6001e42" translate="yes" xml:space="preserve">
          <source>Calls user-supplied functions for conversion. For &lt;code&gt;OUTPUT&lt;/code&gt; (XSUB to Perl), a function named &lt;code&gt;XS_pack_$ntype&lt;/code&gt; is called with the output Perl scalar and the C variable to convert from. &lt;code&gt;$ntype&lt;/code&gt; is the normalized C type that is to be mapped to Perl. Normalized means that all &lt;code&gt;*&lt;/code&gt; are replaced by the string &lt;code&gt;Ptr&lt;/code&gt;. The return value of the function is ignored.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="37c8dd3e8e14ad4f27432158bf7160979db0ce6b" translate="yes" xml:space="preserve">
          <source>CamelBones</source>
          <target state="translated">CamelBones</target>
        </trans-unit>
        <trans-unit id="adb92c1608308898a1811cd12d916df49f9c32f4" translate="yes" xml:space="preserve">
          <source>CamelBones ( &lt;a href=&quot;http://camelbones.sourceforge.net&quot;&gt;http://camelbones.sourceforge.net&lt;/a&gt; ) is a Perl interface to Mac OS X's Cocoa GUI toolkit, and as such can be used to produce native GUIs on Mac OS X. It's not on CPAN, as it requires frameworks that CPAN.pm doesn't know how to install, but installation is via the standard OSX package installer. The Perl API is, again, very close to the ObjC API it's wrapping, and the documentation just tells you how to translate from one to the other.</source>
          <target state="translated">CamelBones（&lt;a href=&quot;http://camelbones.sourceforge.net&quot;&gt;http://camelbones.sourceforge.net&lt;/a&gt;）是Mac OS X的Cocoa GUI工具包的Perl界面，因此可用于在Mac OS X上生成本机GUI。它不在CPAN上，因为它需要使用CPAN的框架.pm不知道如何安装，但是通过标准OSX软件包安装程序进行安装。同样，Perl API与它包装的ObjC API非常接近，并且文档仅告诉您如何从一种翻译到另一种。</target>
        </trans-unit>
        <trans-unit id="80701e22e30b3906cffd903f13b0b88b4269184d" translate="yes" xml:space="preserve">
          <source>CamelGrayBig.BMP</source>
          <target state="translated">CamelGrayBig.BMP</target>
        </trans-unit>
        <trans-unit id="80c61bba9e87f80092474b3e9f8694f40db54332" translate="yes" xml:space="preserve">
          <source>Camelcade plugin provides Perl5 support in IntelliJ IDEA and other JetBrains IDEs.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4e35891916ef0cba1da028aae28377672d4e03bd" translate="yes" xml:space="preserve">
          <source>Can I Read/Write Zip files larger the 4 Gig?</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e06a2487ce9da8707485d167c86e4cec108412be" translate="yes" xml:space="preserve">
          <source>Can I do [task] in Perl?</source>
          <target state="translated">我可以在Perl中做[任务]吗?</target>
        </trans-unit>
        <trans-unit id="36ad0cba0b89c07f07180ff1037ede0187a0e666" translate="yes" xml:space="preserve">
          <source>Can I do a reget operation like the ftp command ?</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="17260f8bf54a1e0a6921ffbe29352d30c7eb0d7e" translate="yes" xml:space="preserve">
          <source>Can I get a BNF/yacc/RE for the Perl language?</source>
          <target state="translated">我可以得到一个用于Perl语言的BNF/yacc/RE吗?</target>
        </trans-unit>
        <trans-unit id="3a800859ea9403fd88df5aa63fab2b1ed9bba4be" translate="yes" xml:space="preserve">
          <source>Can I use Perl regular expressions to match balanced text?</source>
          <target state="translated">我可以使用 Perl 正则表达式来匹配平衡文本吗?</target>
        </trans-unit>
        <trans-unit id="2289a974ae52b9e29f0b401490ee2c25637b7437" translate="yes" xml:space="preserve">
          <source>Can I use Unicode in my Perl sources?</source>
          <target state="translated">我可以在Perl的源代码中使用Unicode吗?</target>
        </trans-unit>
        <trans-unit id="32e50e864db1746776899a01caf14e13d2d4a291" translate="yes" xml:space="preserve">
          <source>Can I use perl to run a telnet or ftp session?</source>
          <target state="translated">我可以使用perl来运行telnet或ftp会话吗?</target>
        </trans-unit>
        <trans-unit id="7a4618a13feffae59b70603845a943f2cb759ba6" translate="yes" xml:space="preserve">
          <source>Can I write more that 64K entries is a Zip files?</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="14d0ae1165be9b8566f8406ca14230c7961f4848" translate="yes" xml:space="preserve">
          <source>Can I write useful Perl programs on the command line?</source>
          <target state="translated">我可以在命令行上编写有用的Perl程序吗?</target>
        </trans-unit>
        <trans-unit id="35df49ce9c972c29af7bf8e861531cb5efb30472" translate="yes" xml:space="preserve">
          <source>Can also be called as an instance method.</source>
          <target state="translated">也可以作为实例方法调用。</target>
        </trans-unit>
        <trans-unit id="4ba8c255d770ca0f7b72beded6916ada06108fbe" translate="yes" xml:space="preserve">
          <source>Can also be used to set &lt;code&gt;$TODO&lt;/code&gt; to a new value while returning the old value:</source>
          <target state="translated">还可以用于将 &lt;code&gt;$TODO&lt;/code&gt; 设置为新值，同时返回旧值：</target>
        </trans-unit>
        <trans-unit id="3a763feb2abeeeb1f5fc314f6396d5ecb0b67e0b" translate="yes" xml:space="preserve">
          <source>Can be called as either an object or a class method.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="91cc357ede21e8f86848e6eae7e811a215ba08ce" translate="yes" xml:space="preserve">
          <source>Can be constructed using &lt;code&gt;pod2latex&lt;/code&gt; .</source>
          <target state="translated">可以使用 &lt;code&gt;pod2latex&lt;/code&gt; 构造。</target>
        </trans-unit>
        <trans-unit id="4965933ed8a498358e075e20abc688b166f9b286" translate="yes" xml:space="preserve">
          <source>Can be set to a boolean value to control whether code references are turned into perl source code. If set to a true value, &lt;code&gt;B::Deparse&lt;/code&gt; will be used to get the source of the code reference. In older versions, using this option imposed a significant performance penalty when dumping parts of a data structure other than code references, but that is no longer the case.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fa58e7bcf2882cbd00cc88fa0dc03c0cd52468bb" translate="yes" xml:space="preserve">
          <source>Can be set to a boolean value to control whether code references are turned into perl source code. If set to a true value, &lt;code&gt;B::Deparse&lt;/code&gt; will be used to get the source of the code reference. Using this option will force using the Perl implementation of the dumper, since the fast XSUB implementation doesn't support it.</source>
          <target state="translated">可以设置为布尔值，以控制是否将代码引用转换为perl源代码。如果设置为真值，则 &lt;code&gt;B::Deparse&lt;/code&gt; 将用于获取代码引用的源。使用此选项将强制使用转储程序的Perl实现，因为快速的XSUB实现不支持它。</target>
        </trans-unit>
        <trans-unit id="6c627856437742bf2a91768641f29dacbba9c49e" translate="yes" xml:space="preserve">
          <source>Can be set to a boolean value to control whether hash keys are dumped in sorted order. A true value will cause the keys of all hashes to be dumped in Perl's default sort order. Can also be set to a subroutine reference which will be called for each hash that is dumped. In this case &lt;code&gt;Data::Dumper&lt;/code&gt; will call the subroutine once for each hash, passing it the reference of the hash. The purpose of the subroutine is to return a reference to an array of the keys that will be dumped, in the order that they should be dumped. Using this feature, you can control both the order of the keys, and which keys are actually used. In other words, this subroutine acts as a filter by which you can exclude certain keys from being dumped. Default is 0, which means that hash keys are not sorted.</source>
          <target state="translated">可以设置为布尔值以控制是否按排序顺序转储哈希键。值为true会导致所有哈希的键都按照Perl的默认排序顺序转储。也可以设置为子例程引用，该引用将为每个转储的哈希调用。在这种情况下， &lt;code&gt;Data::Dumper&lt;/code&gt; 将为每个哈希调用一次子例程，并将其引用传递给哈希。子例程的目的是按应转储的顺序返回对将要转储的键的数组的引用。使用此功能，您可以控制按键的顺序以及实际使用的按键。换句话说，此子例程充当筛选器，通过该筛选器，您可以排除某些键不被转储。默认值为0，这表示哈希键不排序。</target>
        </trans-unit>
        <trans-unit id="7fb27ddb4917ba511f5c8620ff526bf1f7bf1e63" translate="yes" xml:space="preserve">
          <source>Can be set to a boolean value to control whether hash keys are quoted. A defined false value will avoid quoting hash keys when it looks like a simple string. Default is 1, which will always enclose hash keys in quotes.</source>
          <target state="translated">可以设置为一个布尔值来控制是否引用哈希键。如果定义为false,则当哈希键看起来像一个简单的字符串时,将避免使用引号。默认值为1,将始终用引号括住哈希键。</target>
        </trans-unit>
        <trans-unit id="88c46add64294e8210c672da2183abe0ed447bfc" translate="yes" xml:space="preserve">
          <source>Can be set to a boolean value to enable deep copies of structures. Cross-referencing will then only be done when absolutely essential (i.e., to break reference cycles). Default is 0.</source>
          <target state="translated">可以设置为布尔值,以启用结构的深度拷贝。然后,只有在绝对必要的情况下才会进行交叉引用(即打破引用周期)。默认值为0。</target>
        </trans-unit>
        <trans-unit id="67a33f1bf6a1de539cc6aeb590a56729f0fa737c" translate="yes" xml:space="preserve">
          <source>Can be set to a boolean value which controls whether the pure Perl implementation of &lt;code&gt;Data::Dumper&lt;/code&gt; is used. The &lt;code&gt;Data::Dumper&lt;/code&gt; module is a dual implementation, with almost all functionality written in both pure Perl and also in XS ('C'). Since the XS version is much faster, it will always be used if possible. This option lets you override the default behavior, usually for testing purposes only. Default is 0, which means the XS implementation will be used if possible.</source>
          <target state="translated">可以设置为一个布尔值，该值控制是否使用 &lt;code&gt;Data::Dumper&lt;/code&gt; 的纯Perl实现。该 &lt;code&gt;Data::Dumper&lt;/code&gt; 模块是双实现，写在这两个纯Perl和也XS（&amp;ldquo;C&amp;rdquo;）几乎所有功能。由于XS版本要快得多，因此将尽可能使用它。此选项使您可以覆盖默认行为，通常仅出于测试目的。默认值为0，这意味着将尽可能使用XS实现。</target>
        </trans-unit>
        <trans-unit id="cb22428de8a3ede5e563a5e4f65611da085b8c2a" translate="yes" xml:space="preserve">
          <source>Can be set to a method name, or to an empty string to disable the feature. Data::Dumper will emit a method call for any objects that are to be dumped using the syntax &lt;code&gt;&lt;a href=&quot;../functions/bless&quot;&gt;bless&lt;/a&gt;(DATA, CLASS)-&amp;gt;METHOD()&lt;/code&gt; . Note that this means that the method specified will have to perform any modifications required on the object (like creating new state within it, and/or reblessing it in a different package) and then return it. The client is responsible for making sure the method can be called via the object, and that it returns a valid object. Defaults to an empty string.</source>
          <target state="translated">可以设置为方法名称，也可以设置为空字符串以禁用该功能。 Data :: Dumper将使用 &lt;code&gt;&lt;a href=&quot;../functions/bless&quot;&gt;bless&lt;/a&gt;(DATA, CLASS)-&amp;gt;METHOD()&lt;/code&gt; 语法对要转储的任何对象发出方法调用。请注意，这意味着指定的方法将必须对对象执行所需的任何修改（例如在对象中创建新状态，和/或在不同的包中重新赋予它状态），然后将其返回。客户端负责确保可以通过对象调用该方法，并返回有效的对象。默认为空字符串。</target>
        </trans-unit>
        <trans-unit id="b11825cf8d5444285d0f3fd94a8c3dfc7f09ab85" translate="yes" xml:space="preserve">
          <source>Can be set to a method name, or to an empty string to disable the feature. Data::Dumper will emit a method call for any objects that are to be dumped using the syntax &lt;code&gt;bless(DATA, CLASS)-&amp;gt;METHOD()&lt;/code&gt;. Note that this means that the method specified will have to perform any modifications required on the object (like creating new state within it, and/or reblessing it in a different package) and then return it. The client is responsible for making sure the method can be called via the object, and that it returns a valid object. Defaults to an empty string.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="585673e874a0b17703c1a10f7dfc47aff5c9f0ec" translate="yes" xml:space="preserve">
          <source>Can be set to a method name, or to an empty string to disable the feature. Data::Dumper will invoke that method via the object before attempting to stringify it. This method can alter the contents of the object (if, for instance, it contains data allocated from C), and even rebless it in a different package. The client is responsible for making sure the specified method can be called via the object, and that the object ends up containing only perl data types after the method has been called. Defaults to an empty string.</source>
          <target state="translated">可以设置为一个方法名,或者设置为一个空字符串来禁用该功能。Data::Dumper 将在尝试将其字符串化之前通过对象调用该方法。这个方法可以改变对象的内容(例如,如果它包含从C中分配的数据),甚至可以在不同的包中重新无视它。客户端负责确保指定的方法可以通过对象被调用,并且在方法被调用后,对象最终只包含perl数据类型。默认为一个空字符串。</target>
        </trans-unit>
        <trans-unit id="6ee2759a6426aff4b67b4db8b27a81f5748f17a4" translate="yes" xml:space="preserve">
          <source>Can be set to a positive integer that specifies the depth beyond which recursion into a structure will throw an exception. This is intended as a security measure to prevent perl running out of stack space when dumping an excessively deep structure. Can be set to 0 to remove the limit. Default is 1000.</source>
          <target state="translated">可以设置为一个正整数,指定向结构体递归的深度,超过这个深度就会抛出异常。这是为了防止在转储过深的结构体时,perl耗尽栈空间而采取的安全措施。可以设置为0来取消这个限制。默认值是1000。</target>
        </trans-unit>
        <trans-unit id="4bf42f1af137c40c87a30e672fa92d800507f75f" translate="yes" xml:space="preserve">
          <source>Can be set to a positive integer that specifies the depth beyond which we don't venture into a structure. Has no effect when &lt;code&gt;Data::Dumper::Purity&lt;/code&gt; is set. (Useful in debugger when we often don't want to see more than enough). Default is 0, which means there is no maximum depth.</source>
          <target state="translated">可以设置为一个正整数，该整数指定我们不冒险进入结构的深度。设置 &lt;code&gt;Data::Dumper::Purity&lt;/code&gt; 时不起作用。（当我们经常不想看到足够多的内容时，在调试器中很有用）。默认值为0，表示没有最大深度。</target>
        </trans-unit>
        <trans-unit id="1b8ab4925558b8a13bc55bec7e3f47e1da66a3e2" translate="yes" xml:space="preserve">
          <source>Can be set to a regular expression. Only files with names that match the expression will be read.</source>
          <target state="translated">可以设置为正则表达式。只有名称符合表达式的文件才会被读取。</target>
        </trans-unit>
        <trans-unit id="b4c1fc7bc4091447e126bb9cbc6311ac8f682f2f" translate="yes" xml:space="preserve">
          <source>Can be set to a string that specifies an alternative to the &lt;code&gt;&lt;a href=&quot;../functions/bless&quot;&gt;bless&lt;/a&gt;&lt;/code&gt; builtin operator used to create objects. A function with the specified name should exist, and should accept the same arguments as the builtin. Default is &lt;code&gt;&lt;a href=&quot;../functions/bless&quot;&gt;bless&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">可以设置为字符串，该字符串指定用于创建对象的 &lt;code&gt;&lt;a href=&quot;../functions/bless&quot;&gt;bless&lt;/a&gt;&lt;/code&gt; 内置运算符的替代形式。具有指定名称的函数应该存在，并且应接受与内置函数相同的参数。默认为 &lt;code&gt;&lt;a href=&quot;../functions/bless&quot;&gt;bless&lt;/a&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="1a8d696a13fbd3787a71fb1fa50c88e46886ad09" translate="yes" xml:space="preserve">
          <source>Can be set to a string that specifies an alternative to the &lt;code&gt;bless&lt;/code&gt; builtin operator used to create objects. A function with the specified name should exist, and should accept the same arguments as the builtin. Default is &lt;code&gt;bless&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a994c4b88b43caa5b752fd46ef7324627d9d83c6" translate="yes" xml:space="preserve">
          <source>Can be set to a string that specifies the separator between hash keys and values. To dump nested hash, array and scalar values to JavaScript, use: &lt;code&gt;$Data::Dumper::Pair = ' : ';&lt;/code&gt; . Implementing &lt;code&gt;&lt;a href=&quot;../functions/bless&quot;&gt;bless&lt;/a&gt;&lt;/code&gt; in JavaScript is left as an exercise for the reader. A function with the specified name exists, and accepts the same arguments as the builtin.</source>
          <target state="translated">可以设置为字符串，该字符串指定哈希键和值之间的分隔符。要将嵌套的哈希，数组和标量值转储到JavaScript，请使用： &lt;code&gt;$Data::Dumper::Pair = ' : ';&lt;/code&gt; 。留给JavaScript 实施 &lt;code&gt;&lt;a href=&quot;../functions/bless&quot;&gt;bless&lt;/a&gt;&lt;/code&gt; 作为练习。存在具有指定名称的函数，并且该函数接受与内置函数相同的参数。</target>
        </trans-unit>
        <trans-unit id="4da48067bcb9ac7f05cdf30f4157e26c1703a27f" translate="yes" xml:space="preserve">
          <source>Can be set to a string that specifies the separator between hash keys and values. To dump nested hash, array and scalar values to JavaScript, use: &lt;code&gt;$Data::Dumper::Pair = ' : ';&lt;/code&gt;. Implementing &lt;code&gt;bless&lt;/code&gt; in JavaScript is left as an exercise for the reader. A function with the specified name exists, and accepts the same arguments as the builtin.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9e933a47e6aaf6dd73210fa86f1269378f8318bc" translate="yes" xml:space="preserve">
          <source>Can be trimmed if you compile for one access method.</source>
          <target state="translated">如果你为一种访问方法编译,可以进行裁剪。</target>
        </trans-unit>
        <trans-unit id="521dc350b83fb9d0aef450c7bd8ea71637ecc134" translate="yes" xml:space="preserve">
          <source>Can be used to get/set the filehandles. Indexes are identified by the &lt;code&gt;OUT_STD&lt;/code&gt; and &lt;code&gt;OUT_ERR&lt;/code&gt; constants.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="717d201646a10747b3a920b5eaa1592483e5445b" translate="yes" xml:space="preserve">
          <source>Can call croak() if an error occurs.</source>
          <target state="translated">如果发生错误,可以调用croak()。</target>
        </trans-unit>
        <trans-unit id="610ece97ddb84d598c6d8556f131f1844efd48bc" translate="yes" xml:space="preserve">
          <source>Can call croak() if there is a security anomaly during the stat() comparison.</source>
          <target state="translated">如果在stat()比较过程中出现安全异常,可以调用croak()。</target>
        </trans-unit>
        <trans-unit id="512d893f80ec4605f408cd9d8d3b090f641b1bc5" translate="yes" xml:space="preserve">
          <source>Can only be applied to process handles returned for processes spawned using &lt;code&gt;&lt;a href=&quot;functions/system&quot;&gt;system&lt;/a&gt;(1, ...)&lt;/code&gt; or pseudo processes created with &lt;code&gt;&lt;a href=&quot;functions/fork&quot;&gt;fork()&lt;/a&gt;&lt;/code&gt;. (Win32)</source>
          <target state="translated">仅适用于使用 &lt;code&gt;&lt;a href=&quot;functions/system&quot;&gt;system&lt;/a&gt;(1, ...)&lt;/code&gt; 生成的进程或使用 &lt;code&gt;&lt;a href=&quot;functions/fork&quot;&gt;fork()&lt;/a&gt;&lt;/code&gt; 创建的伪进程返回的进程句柄。（Win32的）</target>
        </trans-unit>
        <trans-unit id="3d551e22f31cb9e7a6e87242c04142cacdd9e085" translate="yes" xml:space="preserve">
          <source>Can only compress unsigned integers in pack</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="acc17adc87dae58e0d71e7b8a46715c51db69dd0" translate="yes" xml:space="preserve">
          <source>Can use any of the methods described above but for further customization one needs to override some of the methods:</source>
          <target state="translated">可以使用上述任何一种方法,但如果要进一步定制,需要覆盖一些方法。</target>
        </trans-unit>
        <trans-unit id="6e5e0a8f8265c585a4f386242ed86595f0f740c3" translate="yes" xml:space="preserve">
          <source>Can we do the same with an XSUB</source>
          <target state="translated">我们可以用XSUB做同样的事情吗?</target>
        </trans-unit>
        <trans-unit id="464a528d25f15fcc413cccaa9039a519f971ff35" translate="yes" xml:space="preserve">
          <source>Can you describe the bug in plain English?</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f2e89781235664711abeb12b27bdbc2f29b3b339" translate="yes" xml:space="preserve">
          <source>Can you fix the bug yourself?</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5608d8974ae07992c56822675bbd6ac88c79a5cd" translate="yes" xml:space="preserve">
          <source>Can you lazy-load data instead?</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ed62fc194f3937ce4d71415ddacb324ed399936b" translate="yes" xml:space="preserve">
          <source>Can you use &lt;code&gt;perlbug&lt;/code&gt; to submit a thank-you note?</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="610efb240abaf3ea2c7896188006719e64b149b7" translate="yes" xml:space="preserve">
          <source>Can't &quot;break&quot; in a loop topicalizer</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ce5267bb8010bbb7a6db4a6906e8693b63a95a10" translate="yes" xml:space="preserve">
          <source>Can't &quot;break&quot; outside a given block</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e33f6eee861c1cd353015b8f99633849b2ad8b6b" translate="yes" xml:space="preserve">
          <source>Can't &quot;continue&quot; outside a when block</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5031122e389e2a8f51436eefc4fd6c303a7874ef" translate="yes" xml:space="preserve">
          <source>Can't &quot;default&quot; outside a topicalizer</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="54adaebe96f6f14efea9928fcb70d70ab7208530" translate="yes" xml:space="preserve">
          <source>Can't &quot;goto&quot; into a &quot;given&quot; block</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b97ed9e79dff848024195e1d17df569a0614b7f9" translate="yes" xml:space="preserve">
          <source>Can't &quot;goto&quot; into a binary or list expression</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f3c96689798d1e5eb721e92be82b1e85d192e746" translate="yes" xml:space="preserve">
          <source>Can't &quot;goto&quot; into the middle of a foreach loop</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="292e527849b890fe71de8d1ef37b93db73abdc02" translate="yes" xml:space="preserve">
          <source>Can't &quot;goto&quot; out of a pseudo block</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b7e4e8a631a4dace6462765b61586a6f3818bfb3" translate="yes" xml:space="preserve">
          <source>Can't &quot;last&quot; outside a loop block</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1af20848c94f970db6efca5a1f1a68ee5eef163f" translate="yes" xml:space="preserve">
          <source>Can't &quot;next&quot; outside a loop block</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5e1a6b4b5d7807286b0352e400757a27d6c53dde" translate="yes" xml:space="preserve">
          <source>Can't &quot;redo&quot; outside a loop block</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="30706871a36ddc9aa4e542689a79fed92550b9d4" translate="yes" xml:space="preserve">
          <source>Can't &quot;when&quot; outside a topicalizer</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="739fbf3b991aa3306484c95541d74ac6110799ac" translate="yes" xml:space="preserve">
          <source>Can't %s %s-endian %ss on this platform</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1856a75618797a18a668ad5c56fdb6cfb907772d" translate="yes" xml:space="preserve">
          <source>Can't be used by more than one module in a single program.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="91995835d674b3cf661c8f37ab1798b89b1ab9d6" translate="yes" xml:space="preserve">
          <source>Can't bless non-reference value</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d52b07474c6248623ee044575ad79260817dc732" translate="yes" xml:space="preserve">
          <source>Can't call method &quot;%s&quot; on an undefined value</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="31eb8ca46c20a63468e96d0119fe4b0ab2ed41d7" translate="yes" xml:space="preserve">
          <source>Can't call method &quot;%s&quot; on unblessed reference</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="21aa3f9f11a962d5a8136b0d22220a88232f9eb4" translate="yes" xml:space="preserve">
          <source>Can't call method &quot;%s&quot; without a package or object reference</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3f99c38d16202cb1e5238364ba2e015191f0def4" translate="yes" xml:space="preserve">
          <source>Can't call mro_isa_changed_in() on anonymous symbol table</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e8c73f04ff81e18f8b075ff1e7ca12ddbe0cf71d" translate="yes" xml:space="preserve">
          <source>Can't call mro_method_changed_in() on anonymous symbol table</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5f185fa80d16db103831be6732bec2cbdb876c17" translate="yes" xml:space="preserve">
          <source>Can't chdir to %s</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d39f3e5fc2bc595191631ac64e0110e379c05120" translate="yes" xml:space="preserve">
          <source>Can't check filesystem of script &quot;%s&quot; for nosuid</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4ab029356c1dcdb7ddd4db17e3ca26c3bdea04cd" translate="yes" xml:space="preserve">
          <source>Can't coerce %s to %s in %s</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e8135be232e0c989a972d3285dca8e1be94c89bb" translate="yes" xml:space="preserve">
          <source>Can't create pipe mailbox</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="39be791b64076f438fc4fc4549ff16a866b21a3c" translate="yes" xml:space="preserve">
          <source>Can't declare %s in &quot;%s&quot;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="421bf40bef9b904ca19bbc43b0b6e304e13c7d0c" translate="yes" xml:space="preserve">
          <source>Can't determine class of operator %s, assuming BASEOP</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5525dd98465276b549436a7aaaea773a34e12cdb" translate="yes" xml:space="preserve">
          <source>Can't do %s(&quot;%s&quot;) on non-UTF-8 locale; resolved to &quot;%s&quot;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="799ebf7552897604edfb655ee73cb4aa2e65564f" translate="yes" xml:space="preserve">
          <source>Can't do inplace edit on %s: %s</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="63fc86196418f4eb47afc83791341c1d2b02409e" translate="yes" xml:space="preserve">
          <source>Can't do inplace edit: %s is not a regular file</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d201f1f315a2780544f8f13e1bff7ab0d04f47da" translate="yes" xml:space="preserve">
          <source>Can't do inplace edit: %s would not be unique</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="751fce6dbbda7a1efa0473b4e1db461c754d4012" translate="yes" xml:space="preserve">
          <source>Can't do waitpid with flags</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="75c543ce903975d4c46285e7ba8ab13dba08720d" translate="yes" xml:space="preserve">
          <source>Can't emulate -%s on #! line</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2ba565a6c185898b9c853d8b41dcdb7df64dd77d" translate="yes" xml:space="preserve">
          <source>Can't exec &quot;%s&quot;: %s</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="98aff00df7fc28c9118a56e889015f548c3b1d6f" translate="yes" xml:space="preserve">
          <source>Can't exec %s</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dfbb83283103d369cd009d2fb09d0c3027047de0" translate="yes" xml:space="preserve">
          <source>Can't execute %s</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e673e894256ce8258644963ba449cc08a696f2a0" translate="yes" xml:space="preserve">
          <source>Can't find %s on PATH</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c8a347039c959afcde3039f1cc543cdf77eaf343" translate="yes" xml:space="preserve">
          <source>Can't find %s on PATH, '.' not in PATH</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="04925a28f7de74ca3260ac8009169ca793b7dd6c" translate="yes" xml:space="preserve">
          <source>Can't find Unicode property definition &quot;%s&quot;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6f919f1e0dd48452dd3f3007d95a278f883d55cb" translate="yes" xml:space="preserve">
          <source>Can't find Unicode property definition &quot;%s&quot; in regex; marked by &amp;lt;-- HERE in m/%s/</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3b6b6abc3119c565999617ad82811d11e9cf74ef" translate="yes" xml:space="preserve">
          <source>Can't find an opnumber for &quot;%s&quot;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0a073bbd2adfee099a38ce1cf48da9ea06d14cc2" translate="yes" xml:space="preserve">
          <source>Can't find label %s</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8674cca3540f909a6e7d1746f8ab0e906443ddea" translate="yes" xml:space="preserve">
          <source>Can't find string terminator %s anywhere before EOF</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a9902ded7245ba58492e826cbd78144be6e0b082" translate="yes" xml:space="preserve">
          <source>Can't fork, trying again in 5 seconds</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1cc12510e515931da96c92c3dd9822d024879c4f" translate="yes" xml:space="preserve">
          <source>Can't fork: %s</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bc95c76e34bbcb3ac3e2167785800bfaa08082f0" translate="yes" xml:space="preserve">
          <source>Can't get SYSGEN parameter value for MAXBUF</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e898aa48bf2a4ad6e3a66e4a25fc752d5790eb8b" translate="yes" xml:space="preserve">
          <source>Can't get filespec - stale stat buffer?</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4c5157e1d5ceb8c44b0381792927b7f6ed6e6fe6" translate="yes" xml:space="preserve">
          <source>Can't get pipe mailbox device name</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="af789fc6df03d085c7560c168207188bd089f808" translate="yes" xml:space="preserve">
          <source>Can't goto subroutine from a sort sub (or similar callback)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="89e4c16930673bb4bd17a46bef3956985f35c783" translate="yes" xml:space="preserve">
          <source>Can't goto subroutine from an eval-%s</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="08685649c3b554522c303b64206695490b2a9a75" translate="yes" xml:space="preserve">
          <source>Can't goto subroutine outside a subroutine</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="89bc53813367f15ad7fd5e6c473cbf45b7508af4" translate="yes" xml:space="preserve">
          <source>Can't have a 0 in =over</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a95b4238378329e0e66b3fe87b93480ed8c0163b" translate="yes" xml:space="preserve">
          <source>Can't ignore signal CHLD, forcing to default</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="209c1dd1d198f15260ea9fe2d0267cd749d13fec" translate="yes" xml:space="preserve">
          <source>Can't kill a non-numeric process ID</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="854b58a1a74b2ff5f09474ec8360292927417069" translate="yes" xml:space="preserve">
          <source>Can't linearize anonymous symbol table</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="68326ac4a2b948a26636891b3172cd7613dd16c5" translate="yes" xml:space="preserve">
          <source>Can't load '%s' for module %s</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dad118a840973578048304da9e4f67b2ef09cc96" translate="yes" xml:space="preserve">
          <source>Can't localize lexical variable %s</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="059add3be3b6631cfa466485a4d59ae6847384df" translate="yes" xml:space="preserve">
          <source>Can't localize through a reference</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8190ac1f225c43a3c6b431f272c0cf6c8d766378" translate="yes" xml:space="preserve">
          <source>Can't locate %s</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fff9d0dd46a0f6d96b6530672a1def705c7eb5e2" translate="yes" xml:space="preserve">
          <source>Can't locate PerlIO%s</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6701d024514e4834bd8f733a06e64983615b22bb" translate="yes" xml:space="preserve">
          <source>Can't locate auto/%s.al in @INC</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2c0531eadde3f1644d3d81f08ad68828d1732f8d" translate="yes" xml:space="preserve">
          <source>Can't locate loadable object for module %s in @INC</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="36ddc2b5284a6658ec4c35b32361ad5e6843ab5a" translate="yes" xml:space="preserve">
          <source>Can't locate object method &quot;%s&quot; via package &quot;%s&quot;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="856d71e2ccc5dc0179b30be00df48a3fa3ef5c5c" translate="yes" xml:space="preserve">
          <source>Can't locate object method &quot;%s&quot; via package &quot;%s&quot; (perhaps you forgot to load &quot;%s&quot;?)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fcada84613fcdc78cb7459bdc0bce32dec0040f8" translate="yes" xml:space="preserve">
          <source>Can't locate package %s for @%s::ISA</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d5fe9c70fde31d15a48884094e607d19f244c906" translate="yes" xml:space="preserve">
          <source>Can't make list assignment to %ENV on this system</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="56650e531c219b96060d691972076b7f3b4cfc1d" translate="yes" xml:space="preserve">
          <source>Can't make loaded symbols global on this platform while loading %s</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fa5de11f11ab44c9f3c84eacc2234354d9e240cc" translate="yes" xml:space="preserve">
          <source>Can't modify %s in %s</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b8b6e3af4990589e685062c8af185ee22cda18ff" translate="yes" xml:space="preserve">
          <source>Can't modify non-lvalue subroutine call of &amp;amp;%s</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4cb212950718e9340d89c5b19f9133919e1ebc2e" translate="yes" xml:space="preserve">
          <source>Can't modify non-lvalue subroutine call of &amp;amp;%s in %s</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eaca9b0920afd252b3807162e97466ed7ed772db" translate="yes" xml:space="preserve">
          <source>Can't modify nonexistent substring</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="de526e2b2dd17c16062ddd0b3be1faf0a4c95c35" translate="yes" xml:space="preserve">
          <source>Can't modify reference to %s in %s assignment</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ece864afd296053aeb27646df351d85f71c1b9d3" translate="yes" xml:space="preserve">
          <source>Can't modify reference to localized parenthesized array in list assignment</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="28041854196266225e06dfeccf3445cf97ae0dbf" translate="yes" xml:space="preserve">
          <source>Can't modify reference to parenthesized hash in list assignment</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d71b162349ad8d3cc1b62ad26a21aad2924ff2d2" translate="yes" xml:space="preserve">
          <source>Can't move directories between directories on different logical volumes. (Win32)</source>
          <target state="translated">无法在不同逻辑卷上的目录之间移动目录。(Win32)</target>
        </trans-unit>
        <trans-unit id="253802c668bb989a5f22bd3eea83b1824d4e2d9b" translate="yes" xml:space="preserve">
          <source>Can't msgrcv to read-only var</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8fcb71bfd86c0e91cb932afa6693beaf3db80849" translate="yes" xml:space="preserve">
          <source>Can't open %s for reading: %s</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ba7e82ecbec319db3ac48476c8fc988603922b0f" translate="yes" xml:space="preserve">
          <source>Can't open %s: %s</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7b47e9fcf4d99f67f18ab23bd218159eef9c13ab" translate="yes" xml:space="preserve">
          <source>Can't open a reference</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b60024d188cd4d4c0c0003e45a5fe98eb9c7c162" translate="yes" xml:space="preserve">
          <source>Can't open bidirectional pipe</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f5eec28bc4405ab30736402c536493a71e47fcb7" translate="yes" xml:space="preserve">
          <source>Can't open error file %s as stderr</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ac08c0c69b1481a6aa69fc6e2f4f533733680442" translate="yes" xml:space="preserve">
          <source>Can't open input file %s as stdin</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3f088e61191d284ee060f7fe01fec6eaf20763a7" translate="yes" xml:space="preserve">
          <source>Can't open output file %s as stdout</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="18a90fd6697b09b852cb1e1dc935296753b45b29" translate="yes" xml:space="preserve">
          <source>Can't open output pipe (name: %s)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="04b90f250fc3ac9a20c74a55a9e9facc489fa13f" translate="yes" xml:space="preserve">
          <source>Can't open perl script &quot;%s&quot;: %s</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ee64cedb1a1cb1d91b6a178a0a9832c207890bd4" translate="yes" xml:space="preserve">
          <source>Can't read CRTL environ</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2ede2d9d86cf67fb629f074ca78e860d0d9fab7b" translate="yes" xml:space="preserve">
          <source>Can't redeclare &quot;%s&quot; in &quot;%s&quot;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f166bacef5e5597fa942abc67b168e62388fc153" translate="yes" xml:space="preserve">
          <source>Can't remove %s: %s, skipping file</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9bb937d4de08be950c9ecb1762c96ed8cb9686b9" translate="yes" xml:space="preserve">
          <source>Can't rename %s to %s: %s, skipping file</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="33a43d9553c530ca2509d37b700b01eb470c061b" translate="yes" xml:space="preserve">
          <source>Can't rename in-place work file '%s' to '%s': %s</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3e7b6fde3e21c351e61def567bf76e539f3ee923" translate="yes" xml:space="preserve">
          <source>Can't reopen input pipe (name: %s) in binary mode</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2d6f4901930125b8629e6d241783f853c1bea7a0" translate="yes" xml:space="preserve">
          <source>Can't represent character for Ox%X on this platform</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8ad6b52932458c7860a5ae1bcb97c00e6ca48303" translate="yes" xml:space="preserve">
          <source>Can't reset %ENV on this system</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="84979537cfd0f0f071043caf043519cf175f8a9d" translate="yes" xml:space="preserve">
          <source>Can't resolve method &quot;%s&quot; overloading &quot;%s&quot; in package &quot;%s&quot;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1e7ad0aea6bd0cd26a1e94b76e26f86df3b41437" translate="yes" xml:space="preserve">
          <source>Can't return %s from lvalue subroutine</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5b80012b0e6e81d9e1151ca353b9114e7b547900" translate="yes" xml:space="preserve">
          <source>Can't return %s to lvalue scalar context</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="31bae2a960d0856237b1216bdb7d3ad590d492c4" translate="yes" xml:space="preserve">
          <source>Can't return outside a subroutine</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="75abc33a50ebc04bfeb2b56f56de0f4c6ae6f515" translate="yes" xml:space="preserve">
          <source>Can't stat script &quot;%s&quot;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1ab99670ff8d8c85bbe295cfe5d78b7f827e2119" translate="yes" xml:space="preserve">
          <source>Can't take log of %g</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="21c0e313c42bf88914a90e5c2d2eb26e959f394c" translate="yes" xml:space="preserve">
          <source>Can't take sqrt of %g</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="44c5445fbb928768e9353ec9d999709b2b9bb549" translate="yes" xml:space="preserve">
          <source>Can't undef active subroutine</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ed6abe1792db906a52a11913bac927ca38a44773" translate="yes" xml:space="preserve">
          <source>Can't unweaken a nonreference</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8c1f35ef7c4d401308e222d3fcffb9e9800d53a8" translate="yes" xml:space="preserve">
          <source>Can't upgrade %s (%d) to %d</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="53faef17d768ab26e821e73ada78af65179f649b" translate="yes" xml:space="preserve">
          <source>Can't use &quot;my %s&quot; in sort comparison</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fa22ab8ff7d152243a8346dc02c35c3f3d6a0255" translate="yes" xml:space="preserve">
          <source>Can't use %! because Errno.pm is not available</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e6684f9ea9fdadb65c8a9421996c2f4d55e1886d" translate="yes" xml:space="preserve">
          <source>Can't use %s for loop variable</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="333bebbc7a920a463ca900f63e0743d16fa2dcaa" translate="yes" xml:space="preserve">
          <source>Can't use %s ref as %s ref</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2a115c0048e134e9d76b1b13d8d33deda087969e" translate="yes" xml:space="preserve">
          <source>Can't use '%c' after -mname</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a8514b194f05ef85fa88cca4412220afbd285624" translate="yes" xml:space="preserve">
          <source>Can't use '%c' in a group with different byte-order in %s</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3c5a99a4242c6abb3e04494187a05fa6dab2f31e" translate="yes" xml:space="preserve">
          <source>Can't use 'defined(%hash)' (Maybe you should just omit the defined()?)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6b5b68a194b050b383eccd6adc4efdc6eb5b79b1" translate="yes" xml:space="preserve">
          <source>Can't use 'defined(@array)' (Maybe you should just omit the defined()?)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8bde597b32693d0abe304e3d13a90adaa98bc45f" translate="yes" xml:space="preserve">
          <source>Can't use \%c to mean $%c in expression</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="03a8e1b2b59fdc4a706c4e31cfd579bb62fc5939" translate="yes" xml:space="preserve">
          <source>Can't use a hash as a reference</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="02178331a38ef34753ddbf17cea7391d706e6790" translate="yes" xml:space="preserve">
          <source>Can't use an array as a reference</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bde94c5e75cb6a1b33b4f1f13580799044318cb5" translate="yes" xml:space="preserve">
          <source>Can't use an undefined value as %s reference</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a036bd3b8575d03e44627689d24be7dcde134126" translate="yes" xml:space="preserve">
          <source>Can't use anonymous symbol table for method lookup</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fc0b3aa696da09b074406deb7fc50d8ab957d558" translate="yes" xml:space="preserve">
          <source>Can't use bareword (&quot;%s&quot;) as %s ref while &quot;strict refs&quot; in use</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f56529a2d10a3e25a4653ab805b6f80a460e185f" translate="yes" xml:space="preserve">
          <source>Can't use both '&amp;lt;' and '&amp;gt;' after type '%c' in %s</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5fa0a9174c821771fb82e978bd7ff74664934902" translate="yes" xml:space="preserve">
          <source>Can't use global %s in %s</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f2b34439935b436b9bdf4fc1f5a9d24c9f5d99b7" translate="yes" xml:space="preserve">
          <source>Can't use string (&quot;%s&quot;) as %s ref while &quot;strict refs&quot; in use</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b456bf1b39c98c040555f540d4f0340908ea32f3" translate="yes" xml:space="preserve">
          <source>Can't use string (&quot;%s&quot;...) as %s ref while &quot;strict refs&quot; in use</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2293fb91bfc92728008a30e736f71da35facbe9e" translate="yes" xml:space="preserve">
          <source>Can't use subscript on %s</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="48413b1da81af0e8f787539b259fb7717aff54aa" translate="yes" xml:space="preserve">
          <source>Can't weaken a nonreference</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d9df7c794e4239f8fcf34bc70d062eaaffbe40aa" translate="yes" xml:space="preserve">
          <source>Can't x= to read-only value</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cd6a7b8768528485a0dbcd459185091e80dc28ad" translate="yes" xml:space="preserve">
          <source>Canada</source>
          <target state="translated">Canada</target>
        </trans-unit>
        <trans-unit id="ab7cfc5e3e1575ef731dc8a192764717c39a667f" translate="yes" xml:space="preserve">
          <source>Cancel Ctrl/O (used with Terminal I/O).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d5c61e930ba2ace5562dbc01d87ff2dccd871bad" translate="yes" xml:space="preserve">
          <source>Cancel output to the file handle. Any POD read by the &lt;code&gt;$parser&lt;/code&gt; is not effected.</source>
          <target state="translated">取消输出到文件句柄。 &lt;code&gt;$parser&lt;/code&gt; 读取的任何POD 均不受影响。</target>
        </trans-unit>
        <trans-unit id="56c9d54018682f033ce26d5d28cbd53bef40aa76" translate="yes" xml:space="preserve">
          <source>Cancel output to the output string. Any POD read by the &lt;code&gt;$parser&lt;/code&gt; is not effected.</source>
          <target state="translated">取消输出到输出字符串。 &lt;code&gt;$parser&lt;/code&gt; 读取的任何POD 均不受影响。</target>
        </trans-unit>
        <trans-unit id="cf5ab48928c6227aa52c3d012c2701389449d7d8" translate="yes" xml:space="preserve">
          <source>Canned Filters</source>
          <target state="translated">罐装过滤器</target>
        </trans-unit>
        <trans-unit id="3482894db317b46f89fa72afa818ad64a07e0cd6" translate="yes" xml:space="preserve">
          <source>Cannot alias standard color %s</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="41090d32ebd650b4d2771c985fed201051cdf9f4" translate="yes" xml:space="preserve">
          <source>Cannot alias standard color %s in %s</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b787d73f05383dd7a48896f2443da8e9275458d4" translate="yes" xml:space="preserve">
          <source>Cannot change stack size of an existing thread</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8ef73c44f87ca55aebbbb4209f8f165a3e8be29c" translate="yes" xml:space="preserve">
          <source>Cannot chr %f</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="adf6d2093d7aa9c2c96446dc6c579ae60a287418" translate="yes" xml:space="preserve">
          <source>Cannot complete in-place edit of %s: %s</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eaf733aeab99894ab43126f5e6d2b81d874d7490" translate="yes" xml:space="preserve">
          <source>Cannot compress %f in pack</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="514769805856ccf2c5763fdcef436c3bc2222351" translate="yes" xml:space="preserve">
          <source>Cannot compress integer in pack</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6361040636e91d3798203704d51c1d95c2661e25" translate="yes" xml:space="preserve">
          <source>Cannot compress negative numbers in pack</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6cb52553b7290c44cfad6769b7861a447ee417c5" translate="yes" xml:space="preserve">
          <source>Cannot convert a reference to %s to typeglob</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c04f97c847ac18aa6024c06c265705e7cdd27488" translate="yes" xml:space="preserve">
          <source>Cannot copy to %s</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8d38515cb4d649e479170b074991ec1a54930262" translate="yes" xml:space="preserve">
          <source>Cannot find encoding &quot;%s&quot;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="036d97b2ab5bc100700978cd436d6f1a92e70266" translate="yes" xml:space="preserve">
          <source>Cannot make the non-overridable %s fatal</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a92329d5518a4d680c08de477d5613e4f5e2514d" translate="yes" xml:space="preserve">
          <source>Cannot open %s as a dirhandle: it is already open as a filehandle</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0b9a75fa08d6758b781cf39ffd1bc9a76df03b2e" translate="yes" xml:space="preserve">
          <source>Cannot open %s as a filehandle: it is already open as a dirhandle</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b1b6e672bb47f36ee70fad76d1b0ecf405f7492f" translate="yes" xml:space="preserve">
          <source>Cannot pack %f with '%c'</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0b549c12495891c4212e9462b575ce7219f4b851" translate="yes" xml:space="preserve">
          <source>Cannot printf %f with '%c'</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e5c599f856ba4af6fad2820148768283781cec70" translate="yes" xml:space="preserve">
          <source>Cannot set tied @DB::args</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9c2a221f5e04eff6e5d2aa76ebeee66ff6fcd159" translate="yes" xml:space="preserve">
          <source>Cannot signal threads without safe signals</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1bbd1f5144cc25ff3e79e713323aaa5805fc1bb3" translate="yes" xml:space="preserve">
          <source>Cannot start &lt;code&gt;find.exe &quot;pattern&quot; file&lt;/code&gt;</source>
          <target state="translated">无法启动 &lt;code&gt;find.exe &quot;pattern&quot; file&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="4f9378da13e876924853515ac330a0589ab874eb" translate="yes" xml:space="preserve">
          <source>Cannot start find.exe &quot;pattern&quot; file</source>
          <target state="translated">无法启动find.exe &quot;模式 &quot;文件。</target>
        </trans-unit>
        <trans-unit id="914952aefbce09e1cf83c26cf3520aab7f64751c" translate="yes" xml:space="preserve">
          <source>Cannot tie unreifiable array</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c959a875f14ef6a8cba2e5d7d5f89eb5b0c49a03" translate="yes" xml:space="preserve">
          <source>Cannot yet reorder sv_vcatpvfn() arguments from va_list</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="07f4ae991f88e569288a303eea482424b54e133d" translate="yes" xml:space="preserve">
          <source>Canonical Equivalence in Applications - UTN #5</source>
          <target state="translated">应用中的正则等价-UTN #5</target>
        </trans-unit>
        <trans-unit id="b8dabeba508ec88a0783430634fb6a91f3d06c7d" translate="yes" xml:space="preserve">
          <source>Canonical order does not imply network order; those are two orthogonal settings.</source>
          <target state="translated">规范顺序并不意味着网络顺序,那是两个正交的设置。</target>
        </trans-unit>
        <trans-unit id="4d54bf792a185de045beb26ac6e2d8cc01e21726" translate="yes" xml:space="preserve">
          <source>Capitalizes characters on a read from the terminal.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="70958560117660215c678a65a317f69cf291f71f" translate="yes" xml:space="preserve">
          <source>Capture STDOUT and STDERR output.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e2e45233bca1ff9d51fe1747e5a3f80383b6f972" translate="yes" xml:space="preserve">
          <source>Capture an arrayref of warnings from the block.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a41cbe379826efcfbfa4c8d79aa79ece89ec2bf7" translate="yes" xml:space="preserve">
          <source>Capture an exception.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="022667ded0755ea18f63880b563578c05902ec8e" translate="yes" xml:space="preserve">
          <source>Capture group contents are dynamically scoped and available to you outside the pattern until the end of the enclosing block or until the next successful match, whichever comes first. (See &lt;a href=&quot;perlsyn#Compound-Statements&quot;&gt;&quot;Compound Statements&quot; in perlsyn&lt;/a&gt;.) You can refer to them by absolute number (using &lt;code&gt;&quot;$1&quot;&lt;/code&gt; instead of &lt;code&gt;&quot;\g1&quot;&lt;/code&gt;,</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="747ae3c9036b2b9d0c1bdc3f6a1c392c7794eed3" translate="yes" xml:space="preserve">
          <source>Capture group contents are dynamically scoped and available to you outside the pattern until the end of the enclosing block or until the next successful match, whichever comes first. (See &lt;a href=&quot;perlsyn#Compound-Statements&quot;&gt;Compound Statements in perlsyn&lt;/a&gt;.) You can refer to them by absolute number (using &lt;code&gt;&quot;$1&quot;&lt;/code&gt; instead of &lt;code&gt;&quot;\g1&quot;&lt;/code&gt; , etc); or by name via the &lt;code&gt;%+&lt;/code&gt; hash, using &lt;code&gt;&quot;$+{&lt;i&gt;name&lt;/i&gt;}&quot;&lt;/code&gt;.</source>
          <target state="translated">捕获组的内容是动态范围内的，并在模式之外可供您使用，直到封闭块结束或下一次成功匹配为止，以先到者为准。（请参阅&lt;a href=&quot;perlsyn#Compound-Statements&quot;&gt;perlsyn中的复合语句&lt;/a&gt;。）您可以按绝对数字引用它们（使用 &lt;code&gt;&quot;$1&quot;&lt;/code&gt; 代替 &lt;code&gt;&quot;\g1&quot;&lt;/code&gt; 等）；或通过 &lt;code&gt;%+&lt;/code&gt; 散列使​​用 &lt;code&gt;&quot;$+{&lt;i&gt;name&lt;/i&gt;}&quot;&lt;/code&gt; ，使用&amp;ldquo; $ + { &lt;i&gt;name&lt;/i&gt; }&amp;rdquo;。</target>
        </trans-unit>
        <trans-unit id="311dff8ce71dc0b4b0666e7280ad010d93e7918a" translate="yes" xml:space="preserve">
          <source>Capture groups</source>
          <target state="translated">捕获组</target>
        </trans-unit>
        <trans-unit id="17d5baafa6da919c16c090df56e9fd9d7a565715" translate="yes" xml:space="preserve">
          <source>Capture groups are numbered from left to right, but inside this construct the numbering is restarted for each branch.</source>
          <target state="translated">采集组从左到右编号,但在这个构造里面,每个分支的编号都是重新开始的。</target>
        </trans-unit>
        <trans-unit id="ee0771c31053343949dda6efc584e44e5297b9a9" translate="yes" xml:space="preserve">
          <source>Captured groups are numbered according to their</source>
          <target state="translated">捕获的组别按其编号</target>
        </trans-unit>
        <trans-unit id="f7b4920b8aa7c1586544c28d9c8886e52d98ca56" translate="yes" xml:space="preserve">
          <source>Capturing parenthesis that work just like perl</source>
          <target state="translated">捕捉小括号,就像perl一样工作。</target>
        </trans-unit>
        <trans-unit id="307f83eae2041bdf7a5d0e4d4039929292abf689" translate="yes" xml:space="preserve">
          <source>Care has been taken to make all flags symmetrical with respect to &lt;code&gt;encode&lt;/code&gt; and &lt;code&gt;decode&lt;/code&gt;, that is, texts encoded with any combination of these flag values will be correctly decoded when the same flags are used - in general, if you use different flag settings while encoding vs. when decoding you likely have a bug somewhere.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4ea8cbac41ff9a96e8d9db8e075354ecd6a9f99e" translate="yes" xml:space="preserve">
          <source>Care must be taken when making changes to make sure that you handle UTF-8 properly, both at compile time and at execution time, including when the string and pattern are mismatched.</source>
          <target state="translated">在进行修改时必须注意确保正确处理UTF-8,无论是在编译时还是在执行时,包括字符串和模式不匹配时。</target>
        </trans-unit>
        <trans-unit id="04617e457add86a7b016a256cae6724b67e05962" translate="yes" xml:space="preserve">
          <source>Care should be taken when using the &lt;code&gt;&lt;a href=&quot;functions/no&quot;&gt;no&lt;/a&gt; VERSION&lt;/code&gt; form of &lt;code&gt;&lt;a href=&quot;functions/no&quot;&gt;no&lt;/a&gt;&lt;/code&gt;. It is</source>
          <target state="translated">应谨慎使用时，应考虑 &lt;code&gt;&lt;a href=&quot;functions/no&quot;&gt;no&lt;/a&gt; VERSION&lt;/code&gt; 的形式 &lt;code&gt;&lt;a href=&quot;functions/no&quot;&gt;no&lt;/a&gt;&lt;/code&gt; 。它是</target>
        </trans-unit>
        <trans-unit id="f12898eb208465f617f9b5c3dd913e72b7c63a92" translate="yes" xml:space="preserve">
          <source>Care should be taken when using the &lt;code&gt;&lt;a href=&quot;no&quot;&gt;no&lt;/a&gt; VERSION&lt;/code&gt; form of &lt;code&gt;&lt;a href=&quot;no&quot;&gt;no&lt;/a&gt;&lt;/code&gt;. It is</source>
          <target state="translated">应谨慎使用时，应考虑 &lt;code&gt;&lt;a href=&quot;no&quot;&gt;no&lt;/a&gt; VERSION&lt;/code&gt; 的形式 &lt;code&gt;&lt;a href=&quot;no&quot;&gt;no&lt;/a&gt;&lt;/code&gt; 。它是</target>
        </trans-unit>
        <trans-unit id="662a10769a4851c5fa85f39275e3a20db3254277" translate="yes" xml:space="preserve">
          <source>Care should be taken when using the &lt;code&gt;no VERSION&lt;/code&gt; form of &lt;a href=&quot;#no-MODULE-VERSION-LIST&quot;&gt;&lt;code&gt;no&lt;/code&gt;&lt;/a&gt;. It is</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d00ed6d0c5ac45de00f179782815edeefadfc67b" translate="yes" xml:space="preserve">
          <source>Carp</source>
          <target state="translated">Carp</target>
        </trans-unit>
        <trans-unit id="d88a6c87d4e1376b298c703f4fc38df13d24c117" translate="yes" xml:space="preserve">
          <source>Carp - alternative warn and die for modules</source>
          <target state="translated">鲤鱼 ----模块的替代警告和死亡</target>
        </trans-unit>
        <trans-unit id="4cac758eff9ae8b1951cfa88daf6efd8e4c9f9dd" translate="yes" xml:space="preserve">
          <source>Carp gives two ways to control this.</source>
          <target state="translated">鲤鱼给出了两种控制方式。</target>
        </trans-unit>
        <trans-unit id="9cdaea1be30b41a257f3e74ca5f04da906b26010" translate="yes" xml:space="preserve">
          <source>Carriage-return control.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bca0e3c0ab768e90d91b7158f9afa5173ab39d46" translate="yes" xml:space="preserve">
          <source>Case 2 is also deceptive in that you're accessing a variable called %hashref, not dereferencing through $hashref to the hash it's presumably referencing. That would be case 3.</source>
          <target state="translated">情况2也是有欺骗性的,因为你访问的是一个叫做%hashref的变量,而不是通过$hashref去引用它可能引用的哈希值。那就是情况3了。</target>
        </trans-unit>
        <trans-unit id="298d6337ccd66315823554fe2294fb2258cef971" translate="yes" xml:space="preserve">
          <source>Case Mappings/SpecialCasing</source>
          <target state="translated">Case Mappings/SpecialCasing</target>
        </trans-unit>
        <trans-unit id="12c50192a130e9814d8ea8606bd466ad9981e92e" translate="yes" xml:space="preserve">
          <source>Case and abbreviations</source>
          <target state="translated">大小写和缩略语</target>
        </trans-unit>
        <trans-unit id="71820be5979516bbf68abefb91861f6a5f447350" translate="yes" xml:space="preserve">
          <source>Case translation operators use the Unicode case translation tables.</source>
          <target state="translated">大小写翻译操作员使用Unicode大小写翻译表。</target>
        </trans-unit>
        <trans-unit id="9fc0b2fddd3396951a95310fbd8003b367dba5dd" translate="yes" xml:space="preserve">
          <source>Case, white space, hyphens, and underscores are ignored in the input parameters (except for the trailing underscore in the old-form grandfathered-in general category property value &lt;code&gt;&quot;L_&quot;&lt;/code&gt; , which is better written as &lt;code&gt;&quot;LC&quot;&lt;/code&gt; ).</source>
          <target state="translated">在输入参数中将忽略大小写，空格，连字符和下划线（在老式的，以老式形式存在的常规类别属性值 &lt;code&gt;&quot;L_&quot;&lt;/code&gt; _ &amp;rdquo;（最好写为 &lt;code&gt;&quot;LC&quot;&lt;/code&gt; ）中，尾随下划线除外）。</target>
        </trans-unit>
        <trans-unit id="5dc22b379cca8577f46f5a98f71105a90b33e0a9" translate="yes" xml:space="preserve">
          <source>Case, white space, hyphens, and underscores are ignored in the input parameters (except for the trailing underscore in the old-form grandfathered-in general category property value &lt;code&gt;&quot;L_&quot;&lt;/code&gt;, which is better written as &lt;code&gt;&quot;LC&quot;&lt;/code&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9c97ea35c0c010d6bc3fa3e2766ca1eeed20cb95" translate="yes" xml:space="preserve">
          <source>Case, white space, hyphens, and underscores are ignored in the input property name (except for the trailing underscore in the old-form grandfathered-in general category property value &lt;code&gt;&quot;L_&quot;&lt;/code&gt; , which is better written as &lt;code&gt;&quot;LC&quot;&lt;/code&gt; ).</source>
          <target state="translated">在输入属性名称中将忽略大小写，空格，连字符和下划线（在老式的，以老式形式存在的常规类别属性值 &lt;code&gt;&quot;L_&quot;&lt;/code&gt; ，尾随下划线除外，最好将其写为 &lt;code&gt;&quot;LC&quot;&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="cdb95a78fe8cf5fb324342e8050f8f838eaf6255" translate="yes" xml:space="preserve">
          <source>Case, white space, hyphens, and underscores are ignored in the input property name (except for the trailing underscore in the old-form grandfathered-in general category property value &lt;code&gt;&quot;L_&quot;&lt;/code&gt;, which is better written as &lt;code&gt;&quot;LC&quot;&lt;/code&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5913a3e508c3f58147c3a7ea4922d97aeb2d10bc" translate="yes" xml:space="preserve">
          <source>Casefolding is the process of mapping strings to a form where case differences are erased; comparing two strings in their casefolded form is effectively a way of asking if two strings are equal, regardless of case.</source>
          <target state="translated">大小写折叠是将字符串映射到一个消除大小写差异的形式的过程;比较两个字符串的大小写形式实际上是询问两个字符串是否相等的一种方式,而不管大小写。</target>
        </trans-unit>
        <trans-unit id="3efae3773aea3e6418118bae37722e49dd2d43fd" translate="yes" xml:space="preserve">
          <source>Cases 1 and 2 above behave identically: they run the code contained in the variable $x. (Although case 2 has misleading double quotes making the reader wonder what else might be happening (nothing is).) Cases 3 and 4 likewise behave in the same way: they run the code &lt;code&gt;'$x'&lt;/code&gt; , which does nothing but return the value of $x. (Case 4 is preferred for purely visual reasons, but it also has the advantage of compiling at compile-time instead of at run-time.) Case 5 is a place where normally you</source>
          <target state="translated">上面的情况1和2的行为相同：它们运行变量$ x中包含的代码。（尽管情况2带有误导性的双引号，使读者想知道还会发生什么（什么都没发生。）情况3和4同样以相同的方式运行：它们运行代码 &lt;code&gt;'$x'&lt;/code&gt; ，除了返回值外，它什么也不做$ x。（出于纯粹的视觉原因，首选案例4，但也具有在编译时而不是在运行时进行编译的优势。）案例5是通常您需要在其中放置代码的地方。</target>
        </trans-unit>
        <trans-unit id="b06e162aa03a647b4812343dc3da5daa182fbaff" translate="yes" xml:space="preserve">
          <source>Cases 1 and 2 above behave identically: they run the code contained in the variable $x. (Although case 2 has misleading double quotes making the reader wonder what else might be happening (nothing is).) Cases 3 and 4 likewise behave in the same way: they run the code &lt;code&gt;'$x'&lt;/code&gt;, which does nothing but return the value of $x. (Case 4 is preferred for purely visual reasons, but it also has the advantage of compiling at compile-time instead of at run-time.) Case 5 is a place where normally you</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5505c412fd66a6e2bea57031fd55f4c6fd701c28" translate="yes" xml:space="preserve">
          <source>Cast-to-bool. A simple &lt;code&gt;(bool) &lt;i&gt;expr&lt;/i&gt;&lt;/code&gt; cast may not do the right thing: if &lt;code&gt;bool&lt;/code&gt; is defined as &lt;code&gt;char&lt;/code&gt;, for example, then the cast from &lt;code&gt;int&lt;/code&gt; is implementation-defined.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fce28c3834b46c5817fa1ba652ddba28baf2570f" translate="yes" xml:space="preserve">
          <source>Casting between function pointers and data pointers</source>
          <target state="translated">在函数指针和数据指针之间进行转换。</target>
        </trans-unit>
        <trans-unit id="6f9e423b5bc8680aa5b16ed1908f25312d66ad7e" translate="yes" xml:space="preserve">
          <source>Casting pointers to integers or casting integers to pointers</source>
          <target state="translated">将指针投向整数或将整数投向指针。</target>
        </trans-unit>
        <trans-unit id="499253af5f67ae889bc3aabf24d35d8ba82de0e2" translate="yes" xml:space="preserve">
          <source>Casts I to the internal I32 type used by that perl.</source>
          <target state="translated">将I转为该perl使用的内部I32类型。</target>
        </trans-unit>
        <trans-unit id="59979146f46a040b0a7e911c02c1492a2329f87e" translate="yes" xml:space="preserve">
          <source>Casts the following votes:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bf602a375c078eea9d4f26e60690e565125dbf72" translate="yes" xml:space="preserve">
          <source>Catalyst</source>
          <target state="translated">Catalyst</target>
        </trans-unit>
        <trans-unit id="c174d6be41280356a91ddfdde65f079878120639" translate="yes" xml:space="preserve">
          <source>Catch stopped child processes.</source>
          <target state="translated">抓住停止的子进程。</target>
        </trans-unit>
        <trans-unit id="c2d335ad7e81fdf6a55a7304c8fd31f60f0fc162" translate="yes" xml:space="preserve">
          <source>Catchall routine to clean up problem MM[SK]/Make macros. Expands macros in any directory specification, in order to avoid juxtaposing two VMS-syntax directories when MM[SK] is run. Also expands expressions which are all macro, so that we can tell how long the expansion is, and avoid overrunning DCL's command buffer when MM[KS] is running.</source>
          <target state="translated">清理MM[SK]/Make宏问题的Catchall例程。扩充任意目录规格的宏,以避免MM[SK]运行时将两个VMS语法目录并列。还可以扩展都是宏的表达式,这样我们就可以知道扩展的时间有多长,避免在MM[KS]运行时占用DCL的命令缓冲区。</target>
        </trans-unit>
        <trans-unit id="8ebd028848b2a2942ac465614616f32324230d21" translate="yes" xml:space="preserve">
          <source>Catching signals</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6b5024a9f7f3c46574351ad45dcdeceef2016767" translate="yes" xml:space="preserve">
          <source>Categories of modules range from text manipulation to network protocols to database integration to graphics. A categorized list of modules is also available from CPAN.</source>
          <target state="translated">模块的类别从文本处理到网络协议、数据库集成到图形。CPAN还提供了一个分类的模块清单。</target>
        </trans-unit>
        <trans-unit id="337a8f7bd3bdbf4fe42f0b9d4b42a95657d8e9f9" translate="yes" xml:space="preserve">
          <source>Category &lt;code&gt;LC_COLLATE&lt;/code&gt; : Collation</source>
          <target state="translated">类别 &lt;code&gt;LC_COLLATE&lt;/code&gt; ：整理</target>
        </trans-unit>
        <trans-unit id="63bd78675cb869e7c134fbca3753e02f0edb2b92" translate="yes" xml:space="preserve">
          <source>Category &lt;code&gt;LC_COLLATE&lt;/code&gt;: Collation</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="919d3be1151a8a62ff3f509b3510742d344c2496" translate="yes" xml:space="preserve">
          <source>Category &lt;code&gt;LC_COLLATE&lt;/code&gt;: Collation: Text Comparisons and Sorting</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="beec9c5a8a3b1200e13a31c08cab20f387038371" translate="yes" xml:space="preserve">
          <source>Category &lt;code&gt;LC_CTYPE&lt;/code&gt; : Character Types</source>
          <target state="translated">类别 &lt;code&gt;LC_CTYPE&lt;/code&gt; ：字符类型</target>
        </trans-unit>
        <trans-unit id="011933a95f9a8627bd8a8b00900841623f871c86" translate="yes" xml:space="preserve">
          <source>Category &lt;code&gt;LC_CTYPE&lt;/code&gt;: Character Types</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d237153062484cd9db84eb0e31d1a90b2c50d7ab" translate="yes" xml:space="preserve">
          <source>Category &lt;code&gt;LC_MESSAGES&lt;/code&gt;: Error and other messages</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="38233af031be21177bea3a81f92c8363621b4861" translate="yes" xml:space="preserve">
          <source>Category &lt;code&gt;LC_MONETARY&lt;/code&gt; : Formatting of monetary amounts</source>
          <target state="translated">类别 &lt;code&gt;LC_MONETARY&lt;/code&gt; ：货币格式</target>
        </trans-unit>
        <trans-unit id="56775ec2542f69ddf365702c3138f3ad177fd92b" translate="yes" xml:space="preserve">
          <source>Category &lt;code&gt;LC_MONETARY&lt;/code&gt;: Formatting of monetary amounts</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="19550402e5a1f045b848054b7a9e298b524aa833" translate="yes" xml:space="preserve">
          <source>Category &lt;code&gt;LC_NUMERIC&lt;/code&gt; : Numeric Formatting</source>
          <target state="translated">类别 &lt;code&gt;LC_NUMERIC&lt;/code&gt; ：数字格式</target>
        </trans-unit>
        <trans-unit id="5e8cd7df31bcad9a7460bcc56674a80279c7718f" translate="yes" xml:space="preserve">
          <source>Category &lt;code&gt;LC_NUMERIC&lt;/code&gt;: Numeric Formatting</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2ef0947154dc11f8df87c645f41aa4495ea0e052" translate="yes" xml:space="preserve">
          <source>Category &lt;code&gt;LC_NUMERIC&lt;/code&gt;: Numeric formatting</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="55751e3a0413fc5462344716ab71e2bd8275874c" translate="yes" xml:space="preserve">
          <source>Category &lt;code&gt;LC_TIME&lt;/code&gt;: Date/Time formatting</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cbf487ce36806c29e5298812ba0b7582489033c6" translate="yes" xml:space="preserve">
          <source>Category &lt;code&gt;LC_TIME&lt;/code&gt;: Respresentation of time</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d6caa2ce2c0ba347d49ead269d4ac916346dc572" translate="yes" xml:space="preserve">
          <source>Category Hierarchy</source>
          <target state="translated">类别层次结构</target>
        </trans-unit>
        <trans-unit id="ad6f8c0088808eee492b45306c0d1b94608c6f08" translate="yes" xml:space="preserve">
          <source>Category LC_COLLATE: Collation</source>
          <target state="translated">类别LC_COLLATE。整理</target>
        </trans-unit>
        <trans-unit id="0bdd88741c1732953327ff657fadb93b2ae039be" translate="yes" xml:space="preserve">
          <source>Category LC_COLLATE: Collation: Text Comparisons and Sorting</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a51fd3f6ab56831c7fdec8dd63db4d84c5e5ddfb" translate="yes" xml:space="preserve">
          <source>Category LC_CTYPE: Character Types</source>
          <target state="translated">类别 LC_CTYPE。字符类型</target>
        </trans-unit>
        <trans-unit id="7682ad4955d10f9cf4cc9354213c179454f72007" translate="yes" xml:space="preserve">
          <source>Category LC_MONETARY: Formatting of monetary amounts</source>
          <target state="translated">类别 LC_MONETARY:货币金额的格式化。</target>
        </trans-unit>
        <trans-unit id="07571e7937ae3f96671e4cd556a4abc903111a57" translate="yes" xml:space="preserve">
          <source>Category LC_NUMERIC: Numeric Formatting</source>
          <target state="translated">类别 LC_NUMERIC:数字格式化</target>
        </trans-unit>
        <trans-unit id="df2ca5e8366f7d90f63b83096b599541b20211a0" translate="yes" xml:space="preserve">
          <source>Category LC_TIME: Respresentation of time</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5815523127907cea055a8c75d152a5931bf9635a" translate="yes" xml:space="preserve">
          <source>Causes records to be flushed</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="351f03ebcae4fdf4e90e88c26a354b4fb738e5ad" translate="yes" xml:space="preserve">
          <source>Causes symbolic links to be followed. Since directory trees with symbolic links (followed) may contain files more than once and may even have cycles, a hash has to be built up with an entry for each file. This might be expensive both in space and time for a large directory tree. See &lt;a href=&quot;#follow_fast&quot;&gt;&quot;follow_fast&quot;&lt;/a&gt; and &lt;a href=&quot;#follow_skip&quot;&gt;&quot;follow_skip&quot;&lt;/a&gt; below. If either</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="85dc017dda24f39d24e2b45c927b49e37ad2e173" translate="yes" xml:space="preserve">
          <source>Causes symbolic links to be followed. Since directory trees with symbolic links (followed) may contain files more than once and may even have cycles, a hash has to be built up with an entry for each file. This might be expensive both in space and time for a large directory tree. See &lt;a href=&quot;#follow_fast&quot;&gt;follow_fast&lt;/a&gt; and &lt;a href=&quot;#follow_skip&quot;&gt;follow_skip&lt;/a&gt; below. If either</source>
          <target state="translated">导致遵循符号链接。由于带有符号链接（后接）的目录树可能包含多个文件，甚至可能包含循环，因此必须为每个文件建立一个带有条目的哈希。对于大型目录树而言，这在空间和时间上可能都是昂贵的。请参阅下面的&lt;a href=&quot;#follow_fast&quot;&gt;follow_fast&lt;/a&gt;和&lt;a href=&quot;#follow_skip&quot;&gt;follow_skip&lt;/a&gt;。如果有</target>
        </trans-unit>
        <trans-unit id="d8a6af2ce96fea0e83364432bebd24ee2a299a63" translate="yes" xml:space="preserve">
          <source>Causes the script to sleep for (integer) EXPR seconds, or forever if no argument is given. Returns the integer number of seconds actually slept.</source>
          <target state="translated">使脚本休眠(整数)EXPR秒,如果没有给定参数,则永远休眠。返回实际睡眠的整数秒数。</target>
        </trans-unit>
        <trans-unit id="adc5b4e7301cfc17b319d4424a90aed30a644658" translate="yes" xml:space="preserve">
          <source>Causes this module to use Time::HiRes module, allowing milliseconds to be returned by subsequent calls to ping().</source>
          <target state="translated">使该模块使用Time::HiRes模块,允许后续调用ping()返回毫秒数。</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
