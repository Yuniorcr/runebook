<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="zh-CN" datatype="htmlbody" original="perl">
    <body>
      <group id="perl">
        <trans-unit id="0a4bec64b36dddd2d05eab7e4c0c50161f28ee85" translate="yes" xml:space="preserve">
          <source>Jungshik Shin's Hangul FAQ</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="393e8d148b7c32a4801ca4b9adac481fc7a1b559" translate="yes" xml:space="preserve">
          <source>Junk on end of regexp in regex m/%s/</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5f3e3f9c72e3b6a4486ec8a37b16219f4828a4df" translate="yes" xml:space="preserve">
          <source>Just a quick hint here for all those CGI programmers who can't figure out how on earth to get past that 'waiting for input' prompt, when running their CGI script from the command-line, try something like this:</source>
          <target state="translated">对于那些不知道如何通过 &quot;等待输入 &quot;提示的CGI程序员,当他们从命令行运行CGI脚本时,请尝试这样的提示。</target>
        </trans-unit>
        <trans-unit id="33892714232f2855fd91a542cad5d54aa9bb7133" translate="yes" xml:space="preserve">
          <source>Just as P5P collectively maintains the codebase, we collectively maintain the documentation. Writing a particular bit of documentation doesn't give an author control of the future of that documentation. At the same time, just as source code changes should match the style of their surrounding blocks, so should documentation changes.</source>
          <target state="translated">正如P5P集体维护代码库一样,我们也集体维护文档。编写一个特定的文档并不能让作者控制该文档的未来。同时,就像源代码的变化应该与周围区块的风格相匹配一样,文档的变化也应该如此。</target>
        </trans-unit>
        <trans-unit id="0aaf4ef0c9b344d1374053d108e2052e07431e98" translate="yes" xml:space="preserve">
          <source>Just as PERL_IMPLICIT_CONTEXT provides a way to bundle up everything that the interpreter knows about itself and pass it around, so too are there plans to allow the interpreter to bundle up everything it knows about the environment it's running on. This is enabled with the PERL_IMPLICIT_SYS macro. Currently it only works with USE_ITHREADS on Windows.</source>
          <target state="translated">就像PERL_IMPLICIT_CONTEXT提供了一种方法来捆绑解释器所知道的关于它自己的一切并将其传递出去一样,也有计划允许解释器捆绑它所知道的关于它所运行的环境的一切。这可以通过 PERL_IMPLICIT_SYS 宏来实现。目前它只适用于 Windows 上的 USE_ITHREADS。</target>
        </trans-unit>
        <trans-unit id="62e8906be80151cd95246c62df9e4761d5bc2332" translate="yes" xml:space="preserve">
          <source>Just as above, but maps from characters (like &quot;\xE9&quot;, lowercase e-acute) to characters (like &quot;e&quot;).</source>
          <target state="translated">和上面一样,但从字符(如&quot;\xE9&quot;,小写e-acute)映射到字符(如 &quot;e&quot;)。</target>
        </trans-unit>
        <trans-unit id="f1702c1674bbdf9cb3b7adf0315e4e20270cbf30" translate="yes" xml:space="preserve">
          <source>Just as in all regular expressions, the pattern can be built up by including variables that are interpolated at regex compilation time. But its best to compile each sub-component.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="07b1550eae10318438b9e4b01a4b0de0c550fc87" translate="yes" xml:space="preserve">
          <source>Just as in all regular expressions, the pattern can be built up by including variables that are interpolated at regex compilation time. Care must be taken to ensure that you are getting what you expect. For example:</source>
          <target state="translated">就像在所有的正则表达式中一样,模式可以通过包含在regex编译时插值的变量来建立。必须注意确保你得到的是你期望的东西。例如</target>
        </trans-unit>
        <trans-unit id="fe8a855ccb8465e6e734bba6c85f798237a3ef83" translate="yes" xml:space="preserve">
          <source>Just as in the previous regexp, the first quantifier &lt;code&gt;.??&lt;/code&gt; can match earliest at position &lt;code&gt;'a'&lt;/code&gt; , so it does. The second quantifier is greedy, so it matches &lt;code&gt;mm&lt;/code&gt; , and the third matches the rest of the string.</source>
          <target state="translated">与前面的正则表达式一样，第一个量词 &lt;code&gt;.??&lt;/code&gt; 可以在位置 &lt;code&gt;'a'&lt;/code&gt; 最早匹配，所以可以。第二个量词是贪婪的，因此它匹配 &lt;code&gt;mm&lt;/code&gt; ，第三个量词匹配字符串的其余部分。</target>
        </trans-unit>
        <trans-unit id="b429e6fea7e7282b4255020ad5026d4f3fb6bfbd" translate="yes" xml:space="preserve">
          <source>Just as in the previous regexp, the first quantifier &lt;code&gt;.??&lt;/code&gt; can match earliest at position &lt;code&gt;'a'&lt;/code&gt;, so it does. The second quantifier is greedy, so it matches &lt;code&gt;mm&lt;/code&gt;, and the third matches the rest of the string.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="54aa745852ee956f0149292237b30dcf7a75e890" translate="yes" xml:space="preserve">
          <source>Just as in the shell, a backslashed bareword following the &lt;code&gt;&amp;lt;&amp;lt;&lt;/code&gt; means the same thing as a single-quoted string does:</source>
          <target state="translated">就像在外壳程序中一样，在 &lt;code&gt;&amp;lt;&amp;lt;&lt;/code&gt; 之后加上反斜杠的裸字与单引号字符串的含义相同：</target>
        </trans-unit>
        <trans-unit id="faebd7db1f892818770103ce78accf7713eb730f" translate="yes" xml:space="preserve">
          <source>Just as numeric comparisons can be autogenerated from the method for &lt;code&gt;'&amp;lt;=&amp;gt;'&lt;/code&gt; , string comparisons can be autogenerated from that for &lt;code&gt;'cmp'&lt;/code&gt; :</source>
          <target state="translated">正如可以从 &lt;code&gt;'&amp;lt;=&amp;gt;'&lt;/code&gt; 的方法自动生成数字比较一样，也可以从 &lt;code&gt;'cmp'&lt;/code&gt; 的方法自动生成字符串比较：</target>
        </trans-unit>
        <trans-unit id="2f4705ec7dd0e75b639ef6323350a11dcee5bb4b" translate="yes" xml:space="preserve">
          <source>Just as numeric comparisons can be autogenerated from the method for &lt;code&gt;'&amp;lt;=&amp;gt;'&lt;/code&gt;, string comparisons can be autogenerated from that for &lt;code&gt;'cmp'&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8df19f323bb6b48a43ad85680dc0529bf785f1c3" translate="yes" xml:space="preserve">
          <source>Just as with &lt;code&gt;&lt;a href=&quot;functions/system&quot;&gt;system()&lt;/a&gt;&lt;/code&gt;, no shell escapes happen when you &lt;code&gt;&lt;a href=&quot;functions/exec&quot;&gt;exec()&lt;/a&gt;&lt;/code&gt; a list. Further examples of this can be found in &lt;a href=&quot;perlipc#Safe-Pipe-Opens&quot;&gt;Safe Pipe Opens in perlipc&lt;/a&gt;.</source>
          <target state="translated">就像 &lt;code&gt;&lt;a href=&quot;functions/system&quot;&gt;system()&lt;/a&gt;&lt;/code&gt; 一样，当您 &lt;code&gt;&lt;a href=&quot;functions/exec&quot;&gt;exec()&lt;/a&gt;&lt;/code&gt; 列表时，不会发生外壳转义。有关更多示例，请参见&lt;a href=&quot;perlipc#Safe-Pipe-Opens&quot;&gt;perlipc&lt;/a&gt;中的&amp;ldquo; 安全管道开口&amp;rdquo;。</target>
        </trans-unit>
        <trans-unit id="51995d8ca4bbd6f67f0a4012d50abbc2aa87fe84" translate="yes" xml:space="preserve">
          <source>Just as with &lt;code&gt;system()&lt;/code&gt;, no shell escapes happen when you &lt;code&gt;exec()&lt;/code&gt; a list. Further examples of this can be found in &lt;a href=&quot;perlipc#Safe-Pipe-Opens&quot;&gt;&quot;Safe Pipe Opens&quot; in perlipc&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e255de21718ad7422221bd6f42f8ec7acc85a6f3" translate="yes" xml:space="preserve">
          <source>Just as with any Perl subroutine, all of the arguments passed in &lt;code&gt;@_&lt;/code&gt; are aliases to the original argument. This includes the object itself. If you assign directly to &lt;code&gt;$_[0]&lt;/code&gt; you will change the contents of the variable that holds the reference to the object. We recommend that you don't do this unless you know exactly what you're doing.</source>
          <target state="translated">正如任何Perl子，都在传递的参数 &lt;code&gt;@_&lt;/code&gt; 是别名到原来的说法。这包括对象本身。如果直接分配给 &lt;code&gt;$_[0]&lt;/code&gt; ，则将更改保存对象引用的变量的内容。我们建议您不要这样做，除非您确切知道自己在做什么。</target>
        </trans-unit>
        <trans-unit id="fccd05d91f9ee0d9fbbfbf38723d03e8a7c74f00" translate="yes" xml:space="preserve">
          <source>Just as with any signal, you can use &lt;code&gt;sigaction($rtsig, &lt;a href=&quot;functions/undef&quot;&gt;undef&lt;/a&gt;, $oa)&lt;/code&gt; to retrieve the installed signal handler (or, rather, the signal action).</source>
          <target state="translated">与任何信号一样，您可以使用 &lt;code&gt;sigaction($rtsig, &lt;a href=&quot;functions/undef&quot;&gt;undef&lt;/a&gt;, $oa)&lt;/code&gt; 来检索已安装的信号处理程序（或更确切地说，是信号操作）。</target>
        </trans-unit>
        <trans-unit id="1dd23c5eb258d91db69b09a02592a51973f21dd6" translate="yes" xml:space="preserve">
          <source>Just as with any signal, you can use &lt;code&gt;sigaction($rtsig, undef, $oa)&lt;/code&gt; to retrieve the installed signal handler (or, rather, the signal action).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1dc08a9e71893fc4c8e0aca93a96bf0beab842b5" translate="yes" xml:space="preserve">
          <source>Just because a lexical variable is lexically (also called statically) scoped to its enclosing block, &lt;code&gt;&lt;a href=&quot;functions/eval&quot;&gt;eval&lt;/a&gt;&lt;/code&gt;, or &lt;code&gt;&lt;a href=&quot;functions/do&quot;&gt;do&lt;/a&gt;&lt;/code&gt; FILE, this doesn't mean that within a function it works like a C static. It normally works more like a C auto, but with implicit garbage collection.</source>
          <target state="translated">仅仅因为词法变量在词法（也称为静态）范围内限定于其封闭块 &lt;code&gt;&lt;a href=&quot;functions/eval&quot;&gt;eval&lt;/a&gt;&lt;/code&gt; 或 &lt;code&gt;&lt;a href=&quot;functions/do&quot;&gt;do&lt;/a&gt;&lt;/code&gt; FILE，这并不意味着该函数在函数内的作用类似于C static。通常，它的工作方式类似于C auto，但具有隐式垃圾回收功能。</target>
        </trans-unit>
        <trans-unit id="78056aba9593d70f12e87925bcfaacc1a8ab6644" translate="yes" xml:space="preserve">
          <source>Just because a lexical variable is lexically (also called statically) scoped to its enclosing block, &lt;code&gt;eval&lt;/code&gt;, or &lt;code&gt;do&lt;/code&gt; FILE, this doesn't mean that within a function it works like a C static. It normally works more like a C auto, but with implicit garbage collection.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="90c499a655f030c92a71b95e9b2689970ea91b8a" translate="yes" xml:space="preserve">
          <source>Just because you</source>
          <target state="translated">就因为你</target>
        </trans-unit>
        <trans-unit id="109e6f9598b8183bb06ce69968e5c56fc8392a6f" translate="yes" xml:space="preserve">
          <source>Just before HP took over Compaq, some systems were renamed. the link that contained the explanation is dead, so here's a short summary:</source>
          <target state="translated">就在惠普接管康柏之前,一些系统被重新命名.包含解释的链接已经死了,所以这里有一个简短的总结。</target>
        </trans-unit>
        <trans-unit id="75a3cd456f36493a47889dab1eae3ee74e772ac3" translate="yes" xml:space="preserve">
          <source>Just before removing a directory (after having successfully removed everything it contained), &lt;code&gt;remove_tree&lt;/code&gt; attempted to set the permissions on the directory to ensure it could be removed and failed. Program execution continues, but the directory may possibly not be deleted.</source>
          <target state="translated">就在删除目录之前（成功删除其中包含的所有内容之后）， &lt;code&gt;remove_tree&lt;/code&gt; 尝试在目录上设置权限，以确保可以删除该目录并使其失败。程序执行继续，但是目录可能未删除。</target>
        </trans-unit>
        <trans-unit id="9d4933b209ef20fa5fe691ade0680077d951e65e" translate="yes" xml:space="preserve">
          <source>Just do it.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9cff4cf2ef85b7a7babbfc6ed8ae94ad00cf8c95" translate="yes" xml:space="preserve">
          <source>Just don't forget that you have to put a semicolon on the end to finish the statement, as Perl doesn't know you're not going to try to do this:</source>
          <target state="translated">只是不要忘了,你必须在最后加上分号来完成语句,因为Perl不知道你不会尝试这样做。</target>
        </trans-unit>
        <trans-unit id="328525052fa36f8cc3be7cbb9e20c8b29808d7e3" translate="yes" xml:space="preserve">
          <source>Just like &lt;a href=&quot;#Decimal-Versions&quot;&gt;&quot;Decimal Versions&quot;&lt;/a&gt;, Dotted-Decimal Versions can be used as &lt;a href=&quot;#Alpha-Versions&quot;&gt;&quot;Alpha Versions&quot;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2f6d762627d70bbe10fa5260237267dabf212dd8" translate="yes" xml:space="preserve">
          <source>Just like &lt;a href=&quot;#print-FILEHANDLE-LIST&quot;&gt;&lt;code&gt;print&lt;/code&gt;&lt;/a&gt;, but implicitly appends a newline at the end of the LIST instead of any value &lt;a href=&quot;perlvar#%24%5C&quot;&gt;&lt;code&gt;$\&lt;/code&gt;&lt;/a&gt; might have. To use FILEHANDLE without a LIST to print the contents of &lt;a href=&quot;perlvar#%24_&quot;&gt;&lt;code&gt;$_&lt;/code&gt;&lt;/a&gt; to it, you must use a bareword filehandle like &lt;code&gt;FH&lt;/code&gt;, not an indirect one like &lt;code&gt;$fh&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bcfcdab4ac1e20695bdf62962cb38182d5e54e17" translate="yes" xml:space="preserve">
          <source>Just like &lt;code&gt;$^E&lt;/code&gt;, in a numeric context &lt;code&gt;fileLastError()&lt;/code&gt; returns the numeric error value while in a string context it returns a text description of the error [actually it returns a Perl scalar that contains both values so &lt;code&gt;$x= fileLastError()&lt;/code&gt; causes &lt;code&gt;$x&lt;/code&gt; to give different values in string vs. numeric contexts].</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="de3dbf5e42e97a50f069394cda4a6442ac1d1765" translate="yes" xml:space="preserve">
          <source>Just like &lt;code&gt;&lt;a href=&quot;functions/print&quot;&gt;print&lt;/a&gt;&lt;/code&gt;, but implicitly appends a newline. &lt;code&gt;&lt;a href=&quot;functions/say&quot;&gt;say&lt;/a&gt; LIST&lt;/code&gt; is simply an abbreviation for &lt;code&gt;{ &lt;a href=&quot;functions/local&quot;&gt;local&lt;/a&gt; $\ = &quot;\n&quot;; &lt;a href=&quot;functions/print&quot;&gt;print&lt;/a&gt; LIST }&lt;/code&gt; . To use FILEHANDLE without a LIST to print the contents of &lt;code&gt;$_&lt;/code&gt; to it, you must use a real filehandle like &lt;code&gt;FH&lt;/code&gt; , not an indirect one like &lt;code&gt;$fh&lt;/code&gt; .</source>
          <target state="translated">就像 &lt;code&gt;&lt;a href=&quot;functions/print&quot;&gt;print&lt;/a&gt;&lt;/code&gt; 一样，但是隐式地添加了换行符。 &lt;code&gt;&lt;a href=&quot;functions/say&quot;&gt;say&lt;/a&gt; LIST&lt;/code&gt; 只是 &lt;code&gt;{ &lt;a href=&quot;functions/local&quot;&gt;local&lt;/a&gt; $\ = &quot;\n&quot;; &lt;a href=&quot;functions/print&quot;&gt;print&lt;/a&gt; LIST }&lt;/code&gt; 的缩写。打印清单}。要使用不带LIST的FILEHANDLE向其中打印 &lt;code&gt;$_&lt;/code&gt; 的内容，必须使用像 &lt;code&gt;FH&lt;/code&gt; 这样的真实文件句柄，而不是像 &lt;code&gt;$fh&lt;/code&gt; 这样的间接文件句柄。</target>
        </trans-unit>
        <trans-unit id="602502b6c9a3a727e615412b86a9aecefaaebcdb" translate="yes" xml:space="preserve">
          <source>Just like &lt;code&gt;&lt;a href=&quot;print&quot;&gt;print&lt;/a&gt;&lt;/code&gt;, but implicitly appends a newline. &lt;code&gt;&lt;a href=&quot;say&quot;&gt;say&lt;/a&gt; LIST&lt;/code&gt; is simply an abbreviation for &lt;code&gt;{ &lt;a href=&quot;local&quot;&gt;local&lt;/a&gt; $\ = &quot;\n&quot;; &lt;a href=&quot;print&quot;&gt;print&lt;/a&gt; LIST }&lt;/code&gt; . To use FILEHANDLE without a LIST to print the contents of &lt;code&gt;$_&lt;/code&gt; to it, you must use a real filehandle like &lt;code&gt;FH&lt;/code&gt; , not an indirect one like &lt;code&gt;$fh&lt;/code&gt; .</source>
          <target state="translated">就像 &lt;code&gt;&lt;a href=&quot;print&quot;&gt;print&lt;/a&gt;&lt;/code&gt; 一样，但是隐式地添加了换行符。 &lt;code&gt;&lt;a href=&quot;say&quot;&gt;say&lt;/a&gt; LIST&lt;/code&gt; 只是 &lt;code&gt;{ &lt;a href=&quot;local&quot;&gt;local&lt;/a&gt; $\ = &quot;\n&quot;; &lt;a href=&quot;print&quot;&gt;print&lt;/a&gt; LIST }&lt;/code&gt; 的缩写。打印清单}。要使用不带LIST的FILEHANDLE向其中打印 &lt;code&gt;$_&lt;/code&gt; 的内容，必须使用像 &lt;code&gt;FH&lt;/code&gt; 这样的真实文件句柄，而不是像 &lt;code&gt;$fh&lt;/code&gt; 这样的间接文件句柄。</target>
        </trans-unit>
        <trans-unit id="841a87198bd8d5b2b617ad09071d079bbef63265" translate="yes" xml:space="preserve">
          <source>Just like &lt;code&gt;SAVEFREESV&lt;/code&gt; , but mortalizes &lt;code&gt;sv&lt;/code&gt; at the end of the current scope instead of decrementing its reference count. This usually has the effect of keeping &lt;code&gt;sv&lt;/code&gt; alive until the statement that called the currently live scope has finished executing.</source>
          <target state="translated">就像 &lt;code&gt;SAVEFREESV&lt;/code&gt; 一样，但是在当前范围的末尾使 &lt;code&gt;sv&lt;/code&gt; 无效，而不是减少其引用计数。这通常可以使 &lt;code&gt;sv&lt;/code&gt; 保持活动状态，直到调用当前活动范围的语句完成执行为止。</target>
        </trans-unit>
        <trans-unit id="d8849097832f945b1a9937bcaa379e174bc86623" translate="yes" xml:space="preserve">
          <source>Just like &lt;code&gt;SAVEFREESV&lt;/code&gt;, but mortalizes &lt;code&gt;sv&lt;/code&gt; at the end of the current scope instead of decrementing its reference count. This usually has the effect of keeping &lt;code&gt;sv&lt;/code&gt; alive until the statement that called the currently live scope has finished executing.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="90bed5460b2b3b0cfc33630f1100fa2264399cf7" translate="yes" xml:space="preserve">
          <source>Just like &lt;code&gt;my $f; $f = sub { $f-&amp;gt;() }&lt;/code&gt;, this example leaks memory. The name &lt;code&gt;baz&lt;/code&gt; is a reference to the subroutine, and the subroutine uses the name &lt;code&gt;baz&lt;/code&gt;; they keep each other alive (see &lt;a href=&quot;perlref#Circular-References&quot;&gt;&quot;Circular References&quot; in perlref&lt;/a&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bdee811de63331b1e390b9478886674b8221df6d" translate="yes" xml:space="preserve">
          <source>Just like alternation, quantifiers are also susceptible to backtracking. Here is a step-by-step analysis of the example</source>
          <target state="translated">就像交替一样,量词也是容易被回溯的。下面就以这个例子来逐步分析一下</target>
        </trans-unit>
        <trans-unit id="24cfeb3771fb43ef585a2f529448474ab41a12a3" translate="yes" xml:space="preserve">
          <source>Just like capa, but only uses a cache from the last time we asked the server, so as to avoid asking more than once.</source>
          <target state="translated">就像capa一样,但只使用上次向服务器询问时的缓存,这样可以避免多次询问。</target>
        </trans-unit>
        <trans-unit id="c07daab474d2a24a41bbf91648b44cb45c039da4" translate="yes" xml:space="preserve">
          <source>Just like have_compiler but for C++ instead of C.</source>
          <target state="translated">就像have_compiler一样,不过是C++而不是C。</target>
        </trans-unit>
        <trans-unit id="1ed1a130170978e2a4e7086c7c7306a25c8e7b33" translate="yes" xml:space="preserve">
          <source>Just like special scalars and arrays, there are also special hashes. The most well known of these is &lt;code&gt;%ENV&lt;/code&gt; which contains environment variables. Read all about it (and other special variables) in &lt;a href=&quot;perlvar&quot;&gt;perlvar&lt;/a&gt;.</source>
          <target state="translated">就像特殊的标量和数组一样，也有特殊的散列。其中最知名的是 &lt;code&gt;%ENV&lt;/code&gt; ，其中包含环境变量。在&lt;a href=&quot;perlvar&quot;&gt;perlvar中&lt;/a&gt;阅读有关它的所有信息（以及其他特殊变量）。</target>
        </trans-unit>
        <trans-unit id="19b37fcf66fa778fbd1b5d5fc50d7060df9d05e7" translate="yes" xml:space="preserve">
          <source>Just like the &quot;strict&quot; pragma any of these categories can be combined</source>
          <target state="translated">就像 &quot;严格 &quot;原则一样,这些类别中的任何一个都可以结合起来。</target>
        </trans-unit>
        <trans-unit id="82e865fa7feb693e6080cbf3d25a874d28e9c584" translate="yes" xml:space="preserve">
          <source>Just pressing Enter will do the most recent operation again - it's a blessing when stepping through miles of source code.</source>
          <target state="translated">只需按下Enter键,就会再次进行最新的操作--这在浏览数英里长的源代码时是个福音。</target>
        </trans-unit>
        <trans-unit id="fe244a50fe6aded057e3eae12f0a93027edb2381" translate="yes" xml:space="preserve">
          <source>Just say:</source>
          <target state="translated">只是说。</target>
        </trans-unit>
        <trans-unit id="d8c1011fd0f056428d5a8834a2c765887dde0f8b" translate="yes" xml:space="preserve">
          <source>Just set the integer value of the top stack entry to its negation.</source>
          <target state="translated">只需将顶层栈条目的整数值设置为其否定值即可。</target>
        </trans-unit>
        <trans-unit id="c7727ca967ac9b4f317d7c673ab3882351fa9d9d" translate="yes" xml:space="preserve">
          <source>Just simple slots for storing information about the line and the file the link was encountered in. Has to be filled in manually.</source>
          <target state="translated">只是简单的槽位,用于存储该行和链接所遇到的文件信息。必须手动填写。</target>
        </trans-unit>
        <trans-unit id="375852fdf41d2722bd019bb571f919722e750515" translate="yes" xml:space="preserve">
          <source>Just the Pod, the whole Pod, and nothing but the Pod</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6b1d3328e0f08111bb8c2f1b7ffdbdee9651e208" translate="yes" xml:space="preserve">
          <source>Just to show that C programmers can write C in any programming language, if you prefer a more C-like solution, the following script makes the substitution have the same case, letter by letter, as the original. (It also happens to run about 240% slower than the Perlish solution runs.) If the substitution has more characters than the string being substituted, the case of the last character is used for the rest of the substitution.</source>
          <target state="translated">为了证明C程序员可以用任何编程语言编写C语言,如果你喜欢一个更像C语言的解决方案,下面的脚本可以使替换的字母与原来的字母具有相同的大小写,(它的运行速度也比Perlish解决方案慢240%)。(它的运行速度比Perlish的解决方案慢了240%。)如果替换的字符数比被替换的字符串多,则最后一个字符的大小写将用于替换的其余部分。</target>
        </trans-unit>
        <trans-unit id="4a091e09bfa339a10150c33a9aaadd4282459277" translate="yes" xml:space="preserve">
          <source>Just what it says, you're missing that file. MakeMaker uses it to determine if perl has been rebuilt since the Makefile was made. It's a bit of a bug that it halts installation.</source>
          <target state="translated">就像它说的那样,你缺少那个文件。MakeMaker用它来判断perl是否在Makefile制作后被重建。它停止安装是个小毛病。</target>
        </trans-unit>
        <trans-unit id="a7ee38bb7be4fc44198cb2685d9601dcf2b9f569" translate="yes" xml:space="preserve">
          <source>K</source>
          <target state="translated">K</target>
        </trans-unit>
        <trans-unit id="66d19ca0f4158063f6e062dbc4b43cb2360ddc04" translate="yes" xml:space="preserve">
          <source>KEY/VALUE PAIR LIST FUNCTIONS</source>
          <target state="translated">钥匙/值组列表功能</target>
        </trans-unit>
        <trans-unit id="ac97fd8044e211b8965191abd3e1372d4a6075d6" translate="yes" xml:space="preserve">
          <source>KEYS</source>
          <target state="translated">KEYS</target>
        </trans-unit>
        <trans-unit id="1294e49f760a91150a0bb4a9bd6180f089f5052a" translate="yes" xml:space="preserve">
          <source>KEYWORDS</source>
          <target state="translated">KEYWORDS</target>
        </trans-unit>
        <trans-unit id="d873371555253b7c518cf82fe5be999156ffe1fc" translate="yes" xml:space="preserve">
          <source>KNOWN BUGS</source>
          <target state="translated">已知缺陷</target>
        </trans-unit>
        <trans-unit id="d7d37390d4b0162eaa199e8a40421a0fd151d9d4" translate="yes" xml:space="preserve">
          <source>KNOWN ISSUES</source>
          <target state="translated">已知问题</target>
        </trans-unit>
        <trans-unit id="49f7d6b044c08905cf6f12f8a90c2d7d80dd7870" translate="yes" xml:space="preserve">
          <source>KNOWN PROBLEMS</source>
          <target state="translated">已知问题</target>
        </trans-unit>
        <trans-unit id="2e6715471399a1b1ebfdc7f8ec81f013da1993a0" translate="yes" xml:space="preserve">
          <source>KOI8 - De Facto Standard for the Cyrillic world</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d1bf874c052800335db296f8df012e4b563dd5c2" translate="yes" xml:space="preserve">
          <source>KS_C_5601-1987</source>
          <target state="translated">KS_C_5601-1987</target>
        </trans-unit>
        <trans-unit id="48303ff2b3e9c6f3ad91c4b4cea1dcbc0a240594" translate="yes" xml:space="preserve">
          <source>Kansas</source>
          <target state="translated">Kansas</target>
        </trans-unit>
        <trans-unit id="ff0775fcc23b465723521876b29263b74199fe74" translate="yes" xml:space="preserve">
          <source>Karen Etheridge</source>
          <target state="translated">Karen Etheridge</target>
        </trans-unit>
        <trans-unit id="3270844f69bfa9c56dba2d6c3b4cb338e5e7c9e1" translate="yes" xml:space="preserve">
          <source>Karen Etheridge &amp;lt;ether@cpan.org&amp;gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2dbc3244d892d46238fd249e292072bf980c75ba" translate="yes" xml:space="preserve">
          <source>Karl Williamson &lt;code&gt;khw@cpan.org&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6587b068c21cd74b421d84d8dd8d104ffb717b74" translate="yes" xml:space="preserve">
          <source>Kawai,Takanori provides a Japanese translation of a very old version of this manpage at &lt;a href=&quot;http://homepage3.nifty.com/hippo2000/perltips/CPAN.htm&quot;&gt;http://homepage3.nifty.com/hippo2000/perltips/CPAN.htm&lt;/a&gt;</source>
          <target state="translated">Kawai，Takanori在&lt;a href=&quot;http://homepage3.nifty.com/hippo2000/perltips/CPAN.htm&quot;&gt;http://homepage3.nifty.com/hippo2000/perltips/CPAN.htm上&lt;/a&gt;提供了此手册的非常旧版本的日语翻译。</target>
        </trans-unit>
        <trans-unit id="2f36b6bb1852c24392fb3ee9a2879da24eb0750d" translate="yes" xml:space="preserve">
          <source>Kazakhstan</source>
          <target state="translated">Kazakhstan</target>
        </trans-unit>
        <trans-unit id="dcff63b147198a52939742818ee2ef592a205e7e" translate="yes" xml:space="preserve">
          <source>Keep features/concepts as orthogonal as possible.</source>
          <target state="translated">尽量保持特征/概念的正交性。</target>
        </trans-unit>
        <trans-unit id="8e7b10c1d652b6b04a656b434f5b39616ccf1a50" translate="yes" xml:space="preserve">
          <source>Keep hacking until the tests pass.</source>
          <target state="translated">继续开黑,直到测试通过。</target>
        </trans-unit>
        <trans-unit id="af7d72158e7608d9c4b48305b5171ef45c75b0c8" translate="yes" xml:space="preserve">
          <source>Keep in mind that</source>
          <target state="translated">请记住</target>
        </trans-unit>
        <trans-unit id="ed0120a6a4cb952cfa71da323a4afdbfcf12e27d" translate="yes" xml:space="preserve">
          <source>Keep in mind that even if you think your code is not locale-aware, it may call a C library function that is. Hopefully the man page for such a function will indicate that dependency, but the documentation is imperfect.</source>
          <target state="translated">请记住,即使你认为你的代码不具有本地意识,它也可能会调用一个具有本地意识的 C 库函数。希望这样一个函数的手册页会指出这种依赖性,但文档并不完善。</target>
        </trans-unit>
        <trans-unit id="6b2fabd086693247681cb8a1ee02495591d5c9f6" translate="yes" xml:space="preserve">
          <source>Keep in mind that even if you think your code is not locale-aware, it may call a library function that is. Hopefully the man page for such a function will indicate that dependency, but the documentation is imperfect.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="86f6615f078bb4d01730cb8fac56589317fa9a58" translate="yes" xml:space="preserve">
          <source>Keep in mind that only the first several &quot;odd-numbered&quot; buckets are used, so the information on size of the &quot;odd-numbered&quot; buckets which are not used is probably meaningless.</source>
          <target state="translated">请记住,只有前几个 &quot;奇数 &quot;桶才会被使用,所以没有被使用的 &quot;奇数 &quot;桶的大小信息可能没有意义。</target>
        </trans-unit>
        <trans-unit id="4ef95230ae4c52baacdb1c4884acabd7049d178c" translate="yes" xml:space="preserve">
          <source>Keep in mind that these compiler and linker settings will also be used when building CPAN modules. For XS modules to be compiled as a universal binary, any libraries it links to must also be universal binaries. The system libraries that Apple includes with the 10.4u SDK are all universal, but user-installed libraries may need to be re-installed as universal binaries.</source>
          <target state="translated">请记住,这些编译器和链接器的设置也将在构建CPAN模块时使用。要想将XS模块编译成通用二进制文件,它所链接的任何库也必须是通用二进制文件。苹果公司在10.4u SDK中包含的系统库都是通用的,但用户安装的库可能需要重新安装为通用二进制文件。</target>
        </trans-unit>
        <trans-unit id="9eeeda7b97916fa01cabcb38bff49279f0e6a0bb" translate="yes" xml:space="preserve">
          <source>Keep in mind that you can always supply</source>
          <target state="translated">请记住,您可以随时提供</target>
        </trans-unit>
        <trans-unit id="64a46910748217f86efd6627ba753bed01e58a81" translate="yes" xml:space="preserve">
          <source>Keep info about source lines on which a subroutine is defined.</source>
          <target state="translated">保存定义子程序的源行信息。</target>
        </trans-unit>
        <trans-unit id="f47e40b91fc5362642fcbe01770e5ce787e6ccdc" translate="yes" xml:space="preserve">
          <source>Keep it fast, simple, and useful.</source>
          <target state="translated">保持快速、简单、有用。</target>
        </trans-unit>
        <trans-unit id="a180636219ad9f73429c85412c6186e17a5910d6" translate="yes" xml:space="preserve">
          <source>Keep it open and exciting to use/patch/advocate Perl everywhere.</source>
          <target state="translated">保持它的开放性,让各地的Perl使用/补丁/倡导者都感到兴奋。</target>
        </trans-unit>
        <trans-unit id="c51474355aad094e34cfbd22e2141d08f6d33f4f" translate="yes" xml:space="preserve">
          <source>Keep more files open than the system permits</source>
          <target state="translated">打开的文件数量超过系统允许的数量</target>
        </trans-unit>
        <trans-unit id="14b49f2a3e5ec0e1cdb997e3d03cb485633984fa" translate="yes" xml:space="preserve">
          <source>Keep sets of symbol names palatable to the VMS linker</source>
          <target state="translated">让VMS链接器易于理解的符号名称集。</target>
        </trans-unit>
        <trans-unit id="35e8f597cb9e9a9f82f4e1bd085531a453e9fc6c" translate="yes" xml:space="preserve">
          <source>Keep statics grouped into bins based on request sizes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b3a15ca125f2b3af86ad1584e6c4e2aafb908eae" translate="yes" xml:space="preserve">
          <source>Keep your documentation near the code it documents (&quot;inline&quot; documentation). Include POD for a given method right above that method's subroutine. This makes it easier to keep the documentation up to date, and avoids having to document each piece of code twice (once in POD and once in comments).</source>
          <target state="translated">让你的文档靠近它所记录的代码(&quot;内联 &quot;文档)。在一个给定方法的子程序的上方加入该方法的POD,这样可以更容易地保持文档的更新,并避免将每段代码记录两次(一次在POD中,一次在注释中)。这使得文档更容易保持更新,并避免了每段代码都要记录两次(一次在POD中,一次在注释中)。</target>
        </trans-unit>
        <trans-unit id="76d3b7f70d495b2b8a3270d608b55e23f648e0ce" translate="yes" xml:space="preserve">
          <source>Keeping track of the highest cached record. This would allow reads-in-a-row to skip the cache lookup faster (if reading from 1..N with empty cache at start, the last cached value will be always N-1).</source>
          <target state="translated">跟踪最高的缓存记录。这将允许一行中的读数更快地跳过缓存查找(如果从1...N开始读,缓存为空,则最后的缓存值将总是N-1)。</target>
        </trans-unit>
        <trans-unit id="4c7c7465de1db7f41ca1d8bdef4219bff0d7c120" translate="yes" xml:space="preserve">
          <source>Ken Williams &amp;lt;ken@mathforum.org&amp;gt;</source>
          <target state="translated">肯&amp;middot;威廉姆斯（Ken Williams）&amp;lt;ken@mathforum.org&amp;gt;</target>
        </trans-unit>
        <trans-unit id="ad60c49c47f2bac654c72d8e78538a479b9e1298" translate="yes" xml:space="preserve">
          <source>Ken Williams &amp;lt;kwilliams@cpan.org&amp;gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c6eb55c5e49157861d18ebcd27f647197104aae7" translate="yes" xml:space="preserve">
          <source>Ken Williams wrote the original CPAN Meta Spec (also known as the &quot;META.yml spec&quot;) in 2003 and maintained it through several revisions with input from various members of the community. In 2005, Randy Sims redrafted it from HTML to POD for the version 1.2 release. Ken continued to maintain the spec through version 1.4.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="abd59a29e35516d1b9c3ad5018ade24ad931f61e" translate="yes" xml:space="preserve">
          <source>Ken Williams, &amp;lt;ken@mathforum.org&amp;gt;</source>
          <target state="translated">肯&amp;middot;威廉姆斯（Ken Williams），&amp;lt;ken@mathforum.org&amp;gt;</target>
        </trans-unit>
        <trans-unit id="0d1222a0218c97e36123b63438f7b4e4edcb6a3e" translate="yes" xml:space="preserve">
          <source>Ken Williams, kwilliams@cpan.org</source>
          <target state="translated">Ken Williams,kwilliams@cpan.org</target>
        </trans-unit>
        <trans-unit id="a1b34f9f925d8a7063c51b6911f446a276179b5f" translate="yes" xml:space="preserve">
          <source>Kenichi Ishigaki &amp;lt;ishigaki@cpan.org&amp;gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e5c191406f2405d085c884671d550970ada2c6b1" translate="yes" xml:space="preserve">
          <source>Kenichi Ishigaki, &amp;lt;ishigaki[at]cpan.org&amp;gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ee0c77223410ec7a299fe0a1261f164a0c42279d" translate="yes" xml:space="preserve">
          <source>Kenneth Albanowski (&amp;lt;kjahds@kjahds.com&amp;gt;), subsequently</source>
          <target state="translated">肯尼斯&amp;middot;阿尔巴诺夫斯基（&amp;lt;kjahds@kjahds.com&amp;gt;），随后</target>
        </trans-unit>
        <trans-unit id="653197d7093377e03793ff947a865bba7483d32a" translate="yes" xml:space="preserve">
          <source>Kent Fredric &amp;lt;kentfredric@gmail.com&amp;gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8469bfeb77eb9b1deeb56784d6fba56dcad80b56" translate="yes" xml:space="preserve">
          <source>Kent Fredric &amp;lt;kentnl@cpan.org&amp;gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="19ee2290090510397bed2e3bc84d4a991ae891b5" translate="yes" xml:space="preserve">
          <source>Kephra</source>
          <target state="translated">Kephra</target>
        </trans-unit>
        <trans-unit id="348f36b3e5bbe51567b4fb414536380d7187542b" translate="yes" xml:space="preserve">
          <source>Kernel threads are the next step in thread evolution. The OS knows about kernel threads, and makes allowances for them. The main difference between a kernel thread and a user-mode thread is blocking. With kernel threads, things that block a single thread don't block other threads. This is not the case with user-mode threads, where the kernel blocks at the process level and not the thread level.</source>
          <target state="translated">内核线程是线程进化的下一步。操作系统知道内核线程,并为它们留有余地。内核线程和用户模式线程的主要区别是阻塞。对于内核线程,阻塞一个线程的事情不会阻塞其他线程。而用户模式线程则不是这样,内核是在进程级而不是线程级进行阻塞。</target>
        </trans-unit>
        <trans-unit id="259173b7d729d8dc6a66caf8b3aace35a75e8f99" translate="yes" xml:space="preserve">
          <source>Kevin Ryde</source>
          <target state="translated">Kevin Ryde</target>
        </trans-unit>
        <trans-unit id="ae72a3031e0506a2cc9019c8072a580c048ea952" translate="yes" xml:space="preserve">
          <source>Kevin Ryde &amp;lt;user42@zip.com.au&amp;gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a297e34f70da8957366c0d560c60295f4ab16d2a" translate="yes" xml:space="preserve">
          <source>Key feature milestones include:</source>
          <target state="translated">主要功能里程碑包括:</target>
        </trans-unit>
        <trans-unit id="bc06e1d8824d5b7cbd20d018550616dba1eeb7a3" translate="yes" xml:space="preserve">
          <source>Key naming</source>
          <target state="translated">关键命名</target>
        </trans-unit>
        <trans-unit id="a3bc13a9d5bc9bf56b75f62ed64233e64f24fdcc" translate="yes" xml:space="preserve">
          <source>Key value pairs from the right hash are merged to the left hash. Key collisions are only allowed if their values are the same. This merge function will recurse into nested hash refs following the same merge rules.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0c71372d5d9156fb958ad05c3a06f64214fe7926" translate="yes" xml:space="preserve">
          <source>Key/Value Hash Slices</source>
          <target state="translated">键/值哈希片</target>
        </trans-unit>
        <trans-unit id="0a8746998a05aa11ad9c2dab8f6c1868e6458dab" translate="yes" xml:space="preserve">
          <source>Key/value pairs are extra information about the module. Fields include:</source>
          <target state="translated">键/值对是关于模块的额外信息。字段包括:</target>
        </trans-unit>
        <trans-unit id="6662c40bac78a8fe5e23219b77087fbe7647cb15" translate="yes" xml:space="preserve">
          <source>Keyboard</source>
          <target state="translated">Keyboard</target>
        </trans-unit>
        <trans-unit id="26057b24ccfdf1266160f8baf076207f8248b2c2" translate="yes" xml:space="preserve">
          <source>Keyed on perl version this contains ISO formatted versions of the release dates, as gleaned from &lt;a href=&quot;https://perldoc.perl.org/5.26.0/perlhist.html&quot;&gt;perlhist&lt;/a&gt;.</source>
          <target state="translated">从&lt;a href=&quot;https://perldoc.perl.org/5.26.0/perlhist.html&quot;&gt;perlhist&lt;/a&gt;收集，以perl版本为键，其中包含发行日期的ISO格式版本。</target>
        </trans-unit>
        <trans-unit id="96d27593b7b7961c5ceaead578c38d771573f7f6" translate="yes" xml:space="preserve">
          <source>Keyed on perl version this contains ISO formatted versions of the release dates, as gleaned from &lt;a href=&quot;https://perldoc.perl.org/5.32.0/perlhist&quot;&gt;perlhist&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d923b20fce2535a3664621e531ef080ff7f9cd6a" translate="yes" xml:space="preserve">
          <source>Keys that are removed and used by run_subtest:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dd8db1e0c3088ee11dfc93f5419a78c6f0fd5645" translate="yes" xml:space="preserve">
          <source>Keywords related to Perl modules</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="60139b7db3e9d2b51751c4b82ebfa525574e434a" translate="yes" xml:space="preserve">
          <source>Keywords related to classes and object-orientation</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="39c704cf16aa5b97aad8158132dfa370f5b954af" translate="yes" xml:space="preserve">
          <source>Keywords related to scoping</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c6a3090a3a955be7eca29e8ad0e959206c052266" translate="yes" xml:space="preserve">
          <source>Keywords related to the control flow of your Perl program</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ac519cac59842ef7ce692b39ea336e75df75601a" translate="yes" xml:space="preserve">
          <source>Killing the parent process</source>
          <target state="translated">终止父进程</target>
        </trans-unit>
        <trans-unit id="76e63bc788196f0fc365bdd0b40b720b363e2116" translate="yes" xml:space="preserve">
          <source>Kirrily &quot;Skud&quot; Robert &amp;lt;skud@cpan.org&amp;gt;</source>
          <target state="translated">Kirrily&amp;ldquo; Skud&amp;rdquo; Robert &amp;lt;skud@cpan.org&amp;gt;</target>
        </trans-unit>
        <trans-unit id="132f84c02455b94d400579a7b40a518ce274e293" translate="yes" xml:space="preserve">
          <source>Know what you're testing. Read the docs, and the source.</source>
          <target state="translated">知道你在测试什么。阅读文档和源代码。</target>
        </trans-unit>
        <trans-unit id="90303445974fa3fe293cc60d64eaeca6bb4d14c9" translate="yes" xml:space="preserve">
          <source>Known Problems</source>
          <target state="translated">已知问题</target>
        </trans-unit>
        <trans-unit id="eb6d28effd6acc1d20ab0115a46d456361c67007" translate="yes" xml:space="preserve">
          <source>Known Problems with Perl on Hurd</source>
          <target state="translated">Hurd上Perl的已知问题</target>
        </trans-unit>
        <trans-unit id="2e89de469fa00e2ab9c34571ade9b38ab1c2cab2" translate="yes" xml:space="preserve">
          <source>Known broken in version 0.07. Apparently works fine in 0.06 though. Patch has been submitted to fix the issue.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="85d461ba80b969b65622127de6110a76e9ec3b7a" translate="yes" xml:space="preserve">
          <source>Known broken in versions: 1.0.9 and older</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b35d4f63dc3fe926a9db173d1f73bb17b3726246" translate="yes" xml:space="preserve">
          <source>Known problems</source>
          <target state="translated">已知问题</target>
        </trans-unit>
        <trans-unit id="773f5eaba0582fa827eb62a803e54c124b33061b" translate="yes" xml:space="preserve">
          <source>Known to be broken for 5.8.0 (but 5.6.1 and 5.7.2 can be used):</source>
          <target state="translated">已知在5.8.0中被破坏(但5.6.1和5.7.2可以使用)。</target>
        </trans-unit>
        <trans-unit id="140071254cfb3eb18c0425b733d34c90893547ed" translate="yes" xml:space="preserve">
          <source>Komodo</source>
          <target state="translated">Komodo</target>
        </trans-unit>
        <trans-unit id="cf8178f760b75a0d75931dde9fe9ac37025b060d" translate="yes" xml:space="preserve">
          <source>Korean Encodings</source>
          <target state="translated">韩语编码</target>
        </trans-unit>
        <trans-unit id="d160e0986aca4714714a16f29ec605af90be704d" translate="yes" xml:space="preserve">
          <source>L</source>
          <target state="translated">L</target>
        </trans-unit>
        <trans-unit id="c142a9ba26a24e1b73db61760826e298c4c0ddcb" translate="yes" xml:space="preserve">
          <source>L [abw]</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a5009766b33ae437bdfad28ba25b247aa809447e" translate="yes" xml:space="preserve">
          <source>LANGUAGE CLASS HIERARCHIES</source>
          <target state="translated">语言类层次结构</target>
        </trans-unit>
        <trans-unit id="306bdaf58d73ea39af3b1402b65b299e6a4795ee" translate="yes" xml:space="preserve">
          <source>LAST UPDATE</source>
          <target state="translated">最后更新</target>
        </trans-unit>
        <trans-unit id="aeec63655fed08c1f334fcc126280614a35bdd93" translate="yes" xml:space="preserve">
          <source>LATIN CAPITAL LETTER SHARP S</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="27af00b4882cabde6c2deac4be8c6e592a196d2a" translate="yes" xml:space="preserve">
          <source>LATIN SMALL LETTER LONG S</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f956ece64434b3c753877daa6b0151c6f7f8ddbc" translate="yes" xml:space="preserve">
          <source>LATIN1_TO_NATIVE</source>
          <target state="translated">LATIN1_TO_NATIVE</target>
        </trans-unit>
        <trans-unit id="823feb18075201a2009bf899a2b4bee49397d8df" translate="yes" xml:space="preserve">
          <source>LC_TIME</source>
          <target state="translated">LC_TIME</target>
        </trans-unit>
        <trans-unit id="f7314006ff40a8dc21e31c8bdeffdcf14d801b8d" translate="yes" xml:space="preserve">
          <source>LD</source>
          <target state="translated">LD</target>
        </trans-unit>
        <trans-unit id="90ca2bc5ab4dabeeb219828932780cc0dfc4ed8f" translate="yes" xml:space="preserve">
          <source>LDDLFLAGS</source>
          <target state="translated">LDDLFLAGS</target>
        </trans-unit>
        <trans-unit id="931f97ed06ff46676353746b763aa77d0db02597" translate="yes" xml:space="preserve">
          <source>LDFROM</source>
          <target state="translated">LDFROM</target>
        </trans-unit>
        <trans-unit id="7c53807c1836659b4436f686a99f72b3f7ea4a20" translate="yes" xml:space="preserve">
          <source>LDLOADLIBS and EXTRALIBS are always identical under Win32, and BSLOADLIBS and LD_RUN_PATH are always empty (this may change in future).</source>
          <target state="translated">在Win32下,LDLOADLIBS和EXTRALIBS总是相同的,而BSLOADLIBS和LD_RUN_PATH总是空的(将来可能会改变)。</target>
        </trans-unit>
        <trans-unit id="27d827eb4792696500b4c73ad4ddf3c959ae3870" translate="yes" xml:space="preserve">
          <source>LDLOADLIBS and LD_RUN_PATH</source>
          <target state="translated">LDLOADLIBS和LD_RUN_PATH。</target>
        </trans-unit>
        <trans-unit id="1635e0d5ca894812009c83cf6cdbe20b68728252" translate="yes" xml:space="preserve">
          <source>LDLOADLIBS contains both the libraries found based on &lt;code&gt;$potential_libs&lt;/code&gt; and the CRTLs, if any, specified in Config.pm. EXTRALIBS contains just those libraries found based on &lt;code&gt;$potential_libs&lt;/code&gt; . BSLOADLIBS and LD_RUN_PATH are always empty.</source>
          <target state="translated">LDLOADLIBS包含基于 &lt;code&gt;$potential_libs&lt;/code&gt; 找到的库和在Config.pm中指定的CRTL（如果有）。EXTRALIBS仅包含基于 &lt;code&gt;$potential_libs&lt;/code&gt; 找到的那些库。BSLOADLIBS和LD_RUN_PATH始终为空。</target>
        </trans-unit>
        <trans-unit id="7f16bd8ecb3686b81b8608aa7cbe6a0280958ee3" translate="yes" xml:space="preserve">
          <source>LDLOADLIBS contains both the libraries found based on &lt;code&gt;$potential_libs&lt;/code&gt; and the CRTLs, if any, specified in Config.pm. EXTRALIBS contains just those libraries found based on &lt;code&gt;$potential_libs&lt;/code&gt;. BSLOADLIBS and LD_RUN_PATH are always empty.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="256f68025172870d1f3c1210b89212eca54d2c93" translate="yes" xml:space="preserve">
          <source>LDLOADLIBS's default is changed to $Config{libs}.</source>
          <target state="translated">LDLOADLIBS的默认值改为$Config{libs}。</target>
        </trans-unit>
        <trans-unit id="31a999d2e445df6d94c2d10d2f899c4b7a408247" translate="yes" xml:space="preserve">
          <source>LD_LIBRARY_PATH</source>
          <target state="translated">LD_LIBRARY_PATH</target>
        </trans-unit>
        <trans-unit id="a79d4f252799bf618ff38cdfc040adec85827f0f" translate="yes" xml:space="preserve">
          <source>LEAVE</source>
          <target state="translated">LEAVE</target>
        </trans-unit>
        <trans-unit id="9492fe99bfc78ed50462f6bcf892cde2a90aadb5" translate="yes" xml:space="preserve">
          <source>LEAVE_SRC</source>
          <target state="translated">LEAVE_SRC</target>
        </trans-unit>
        <trans-unit id="4d725158342230fd771b20f0bfaa69c6356a93a2" translate="yes" xml:space="preserve">
          <source>LEAVE_with_name</source>
          <target state="translated">LEAVE_with_name</target>
        </trans-unit>
        <trans-unit id="38a42fd39e3bbdd76ba2dba65bea762f7aea0428" translate="yes" xml:space="preserve">
          <source>LEGACY</source>
          <target state="translated">LEGACY</target>
        </trans-unit>
        <trans-unit id="93eefcbd1b5574d386a865e095b07bc538e3663b" translate="yes" xml:space="preserve">
          <source>LEGACY API</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8b1a39d7d1db940985ed14aca646db0082b3b567" translate="yes" xml:space="preserve">
          <source>LEGACY SUPPORT METHODS</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="83bfcddc6a90029e35325994614f31d2dd6cb263" translate="yes" xml:space="preserve">
          <source>LEN</source>
          <target state="translated">LEN</target>
        </trans-unit>
        <trans-unit id="8753fd6c3b8da3cc6d317b80329ed3b40b2aa912" translate="yes" xml:space="preserve">
          <source>LETTERS</source>
          <target state="translated">LETTERS</target>
        </trans-unit>
        <trans-unit id="f481cc60f17adbd0734ec4396c3eec7ff4f97ae1" translate="yes" xml:space="preserve">
          <source>LEVEL</source>
          <target state="translated">LEVEL</target>
        </trans-unit>
        <trans-unit id="fb391320cf8346ac5c53b8c936b575054a4cdd50" translate="yes" xml:space="preserve">
          <source>LIB</source>
          <target state="translated">LIB</target>
        </trans-unit>
        <trans-unit id="8ebe6b4ea1f79cdf5a0cfe5997e4373110b1513a" translate="yes" xml:space="preserve">
          <source>LIB should only be set at &lt;code&gt;perl Makefile.PL&lt;/code&gt; time but is allowed as a MakeMaker argument. It has the effect of setting both INSTALLPRIVLIB and INSTALLSITELIB to that value regardless any explicit setting of those arguments (or of PREFIX). INSTALLARCHLIB and INSTALLSITEARCH are set to the corresponding architecture subdirectory.</source>
          <target state="translated">LIB应该仅在 &lt;code&gt;perl Makefile.PL&lt;/code&gt; 时设置，但允许作为MakeMaker参数。它具有将INSTALLPRIVLIB和INSTALLSITELIB都设置为该值的效果，而与这些参数（或PREFIX）的任何显式设置无关。INSTALLARCHLIB和INSTALLSITEARCH设置为相应的体系结构子目录。</target>
        </trans-unit>
        <trans-unit id="8788c623d0db3031e8b87cadf67d1df4c5a2fb41" translate="yes" xml:space="preserve">
          <source>LIBPERL_A</source>
          <target state="translated">LIBPERL_A</target>
        </trans-unit>
        <trans-unit id="00484abc2f0a64aaebb7808382f0c80f8b800d94" translate="yes" xml:space="preserve">
          <source>LIBPTH, BASE_IMPORT, NLM_VERSION, MPKTOOL, TOOLPATH, BOOT_SYMBOL, NLM_SHORT_NAME, INCLUDE, PATH, MM_NW5_REVISION</source>
          <target state="translated">LIBPTH,BASE_IMPORT,NLM_VERSION,MPKTOOL,TOOLPATH,BOOT_SYMBOL,NLM_SHORT_NAME,INCLUDE,PATH,MM_NW5_REVISION。</target>
        </trans-unit>
        <trans-unit id="ceb9c454e341a6406ce1dfc1e42b2e34632e5126" translate="yes" xml:space="preserve">
          <source>LIBS</source>
          <target state="translated">LIBS</target>
        </trans-unit>
        <trans-unit id="6e0ad2b047414107e8ce2f294fa40d216b5b68f9" translate="yes" xml:space="preserve">
          <source>LICENCE</source>
          <target state="translated">LICENCE</target>
        </trans-unit>
        <trans-unit id="0417c3cd20e5957970bf6e0315ba11993f41a4ef" translate="yes" xml:space="preserve">
          <source>LICENCE AND COPYRIGHT</source>
          <target state="translated">许可和版权</target>
        </trans-unit>
        <trans-unit id="0398ccd0f49298b10a3d76a47800d2ebecd49859" translate="yes" xml:space="preserve">
          <source>LICENSE</source>
          <target state="translated">LICENSE</target>
        </trans-unit>
        <trans-unit id="4935e8e440452679bb6e8677598051c98309501a" translate="yes" xml:space="preserve">
          <source>LIFO</source>
          <target state="translated">LIFO</target>
        </trans-unit>
        <trans-unit id="00e15f5838907cd7e1d4b00639d57748e292cb00" translate="yes" xml:space="preserve">
          <source>LIGHTWEIGHT CALLBACKS</source>
          <target state="translated">轻量级回访</target>
        </trans-unit>
        <trans-unit id="6a872fa8c01524148478fdbe5a27dd0a23bde93f" translate="yes" xml:space="preserve">
          <source>LIKELY</source>
          <target state="translated">LIKELY</target>
        </trans-unit>
        <trans-unit id="929a3a64284b80f705b148843a13caea7da8d500" translate="yes" xml:space="preserve">
          <source>LIMITATIONS</source>
          <target state="translated">LIMITATIONS</target>
        </trans-unit>
        <trans-unit id="e0e14c87e0e2d089b660f73f34d498e64b436810" translate="yes" xml:space="preserve">
          <source>LIMITATIONS of *-x*</source>
          <target state="translated">对*-x*的限制</target>
        </trans-unit>
        <trans-unit id="3850674ed5ef7e98d02bcb7884ce26a4ad1f0c16" translate="yes" xml:space="preserve">
          <source>LIMITATIONS of -x</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="582303292e0d9bb459bbce59d367e726e77b22ef" translate="yes" xml:space="preserve">
          <source>LIMITATIONS of &lt;b&gt;-x&lt;/b&gt;</source>
          <target state="translated">&lt;b&gt;-x的&lt;/b&gt;局限性&lt;b&gt;&lt;/b&gt;</target>
        </trans-unit>
        <trans-unit id="83fa9b97f00ca753b1e5690c43dd3d3361c9665b" translate="yes" xml:space="preserve">
          <source>LIMITS</source>
          <target state="translated">LIMITS</target>
        </trans-unit>
        <trans-unit id="528a45acf62927f5e3020d13509848f28121f5ca" translate="yes" xml:space="preserve">
          <source>LINE</source>
          <target state="translated">LINE</target>
        </trans-unit>
        <trans-unit id="0d7f037733ef398e4fa6caee3e4a76955c742eba" translate="yes" xml:space="preserve">
          <source>LINES</source>
          <target state="translated">LINES</target>
        </trans-unit>
        <trans-unit id="245f22e09d9e6429d729e76e192f663a73a52190" translate="yes" xml:space="preserve">
          <source>LINES_LEFT</source>
          <target state="translated">LINES_LEFT</target>
        </trans-unit>
        <trans-unit id="5a777a56deb32bdeb14873f18eb176dd79982214" translate="yes" xml:space="preserve">
          <source>LINKLIST</source>
          <target state="translated">LINKLIST</target>
        </trans-unit>
        <trans-unit id="2868dce7325577845cbfb4e0cec3533ac2b747a5" translate="yes" xml:space="preserve">
          <source>LINKTYPE</source>
          <target state="translated">LINKTYPE</target>
        </trans-unit>
        <trans-unit id="735cf1665d0fd36f4865e4bc7439abe369572e04" translate="yes" xml:space="preserve">
          <source>LIST</source>
          <target state="translated">LIST</target>
        </trans-unit>
        <trans-unit id="ec269b52cf8883c42dea5c960c258385e031be48" translate="yes" xml:space="preserve">
          <source>LIST DATA</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c717fe4bbb26a57f5091a39f5ae5c04c8ba67f80" translate="yes" xml:space="preserve">
          <source>LIST OF LANGUAGES</source>
          <target state="translated">语文清单</target>
        </trans-unit>
        <trans-unit id="7de1e2b32d16e9fef7b2a9299320e7f3351fbed7" translate="yes" xml:space="preserve">
          <source>LIST OF UTILITIES</source>
          <target state="translated">公用事业清单</target>
        </trans-unit>
        <trans-unit id="567a6688f397cbb26479212b5e88b04513465d6e" translate="yes" xml:space="preserve">
          <source>LIST-REDUCTION FUNCTIONS</source>
          <target state="translated">缩表功能</target>
        </trans-unit>
        <trans-unit id="143295635a11822b74bfc416ad32ab68ac277469" translate="yes" xml:space="preserve">
          <source>LISTENING FOR EVENTS</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="79350be1daad6ac703bf5442efacc2b70bd2d6d8" translate="yes" xml:space="preserve">
          <source>LISTs do automatic interpolation of sublists. That is, when a LIST is evaluated, each element of the list is evaluated in list context, and the resulting list value is interpolated into LIST just as if each individual element were a member of LIST. Thus arrays and hashes lose their identity in a LIST--the list</source>
          <target state="translated">LIST可以进行子列表的自动插值。也就是说,当一个LIST被评估时,列表中的每一个元素都是在列表上下文中被评估的,所得到的列表值被内插到LIST中,就像每一个单独的元素是LIST的成员一样。因此,数组和哈希在LIST中失去了它们的身份--列表</target>
        </trans-unit>
        <trans-unit id="755d87179ae52e75a5bb95a78c2b37c1c06b5cfe" translate="yes" xml:space="preserve">
          <source>LNM$FILE_DEV</source>
          <target state="translated">LNM$FILE_DEV</target>
        </trans-unit>
        <trans-unit id="6747cb39338593bcc94d449a6ee06b08744bc3ce" translate="yes" xml:space="preserve">
          <source>LOADING DRIVERS</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1b95b1479e9e1e6747637c53ec6e7b5b14710300" translate="yes" xml:space="preserve">
          <source>LOCALE</source>
          <target state="translated">LOCALE</target>
        </trans-unit>
        <trans-unit id="ff495344ff0fb9c5d5d9ca658b1dad0e61447a28" translate="yes" xml:space="preserve">
          <source>LOCALE CATEGORIES</source>
          <target state="translated">地方类别</target>
        </trans-unit>
        <trans-unit id="169a463b713e3988d9c565945a1d24d03d787111" translate="yes" xml:space="preserve">
          <source>LOCALE PROBLEMS</source>
          <target state="translated">当地的问题</target>
        </trans-unit>
        <trans-unit id="075620a74284e72caa558c43e5ac902b3bd47d6f" translate="yes" xml:space="preserve">
          <source>LOGDIR</source>
          <target state="translated">LOGDIR</target>
        </trans-unit>
        <trans-unit id="39f15a969419d44e933dbe07a4c0bebe3f003b8b" translate="yes" xml:space="preserve">
          <source>LOGGING</source>
          <target state="translated">LOGGING</target>
        </trans-unit>
        <trans-unit id="95b6b6c48c6cb1e24e041085cc38cb73e88d737e" translate="yes" xml:space="preserve">
          <source>LOOSE MATCHES</source>
          <target state="translated">失败的比赛</target>
        </trans-unit>
        <trans-unit id="7c472534c424a35d726eafe69cf1b120cf34c7c5" translate="yes" xml:space="preserve">
          <source>LPT1</source>
          <target state="translated">LPT1</target>
        </trans-unit>
        <trans-unit id="4d71de40d2ab4755f078c64dc10f3df863c7dc76" translate="yes" xml:space="preserve">
          <source>LPT2</source>
          <target state="translated">LPT2</target>
        </trans-unit>
        <trans-unit id="dd4d7e2da6df8d44c6d4b3d53b6a80f8f29324f4" translate="yes" xml:space="preserve">
          <source>LVRET</source>
          <target state="translated">LVRET</target>
        </trans-unit>
        <trans-unit id="18cd8d5a0349b94405db9dec7298507ccea49b05" translate="yes" xml:space="preserve">
          <source>LaTeX docs</source>
          <target state="translated">LaTeX文档</target>
        </trans-unit>
        <trans-unit id="a1b829eae747d240a349da9f0a9a29b98303f5a9" translate="yes" xml:space="preserve">
          <source>Label not found for &quot;last %s&quot;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="07f82157ea2c43397258b632846b3564c599e77f" translate="yes" xml:space="preserve">
          <source>Label not found for &quot;next %s&quot;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="75a081b428c42101382e62175975723a17e6430c" translate="yes" xml:space="preserve">
          <source>Label not found for &quot;redo %s&quot;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f308ee988ef0e728f295587e6cbde4a2216497cd" translate="yes" xml:space="preserve">
          <source>Lancaster Concensus: &lt;a href=&quot;https://github.com/Perl-Toolchain-Gang/toolchain-site/blob/master/lancaster-consensus.md&quot;&gt;https://github.com/Perl-Toolchain-Gang/toolchain-site/blob/master/lancaster-consensus.md&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="89b86ab0e66f527166d98df92ddbcf5416ed58f6" translate="yes" xml:space="preserve">
          <source>Language</source>
          <target state="translated">Language</target>
        </trans-unit>
        <trans-unit id="f70518aa15c2b8187c80ac13806c15fba56111e6" translate="yes" xml:space="preserve">
          <source>Language Classes</source>
          <target state="translated">语言班</target>
        </trans-unit>
        <trans-unit id="cfb711d350591217fd017e0b7ddd59e362322862" translate="yes" xml:space="preserve">
          <source>Language Extensions and Documentation Tools</source>
          <target state="translated">语言扩展和文档工具</target>
        </trans-unit>
        <trans-unit id="6bd54d34369f11dcd172dcc70f872fcab4fd9483" translate="yes" xml:space="preserve">
          <source>Language Handle Attributes and Internals</source>
          <target state="translated">语言句柄属性和内部结构</target>
        </trans-unit>
        <trans-unit id="c91e4f4c0ce2f8eae1ea5e261c4add9fa7392039" translate="yes" xml:space="preserve">
          <source>Language Specs</source>
          <target state="translated">语言规格</target>
        </trans-unit>
        <trans-unit id="f9d8878de4ae46e5debd26f638420ea68be31544" translate="yes" xml:space="preserve">
          <source>Language classes are what YourProjClass-&amp;gt;get_handle will try to load. It will look for them by taking each language-tag (&lt;b&gt;skipping&lt;/b&gt; it if it doesn't look like a language-tag or locale-tag!), turning it to all lowercase, turning dashes to underscores, and appending it to YourProjClass . &quot;::&quot;. So this:</source>
          <target state="translated">语言类是YourProjClass-&amp;gt; get_handle将尝试加载的类。它将通过获取每种语言标签来查找它们（如果它看起来不像语言标签或语言环境标签，则将其&lt;b&gt;跳过&lt;/b&gt;！），将其全部变为小写，将破折号变为下划线，并将其附加到YourProjClass上。&amp;ldquo; ::&amp;rdquo;。所以这：</target>
        </trans-unit>
        <trans-unit id="747c3b7de1d3c3e77b9c7320590e8b1ede8c25e3" translate="yes" xml:space="preserve">
          <source>Language classes may derive from other language classes (although they should have &quot;use</source>
          <target state="translated">语言类可以从其他语言类中派生出来(尽管它们应该有 &quot;使用 &quot;这个词)。</target>
        </trans-unit>
        <trans-unit id="a1e10c58f87505ae028c597e6cc528cbbe1058b2" translate="yes" xml:space="preserve">
          <source>Language tags are a formalism, described in RFC 3066 (obsoleting 1766), for declaring what language form (language and possibly dialect) a given chunk of information is in.</source>
          <target state="translated">语言标签是一种形式主义,在RFC 3066(过时的1766)中描述,用于声明一个给定的信息块是什么语言形式(语言和可能的方言)。</target>
        </trans-unit>
        <trans-unit id="97e909840ec23e6aa4c68a221630c55bfbbb900a" translate="yes" xml:space="preserve">
          <source>Language tags are not case-sensitive. en-US, en-us, En-Us, etc., are all the same tag, and denote the same language.</source>
          <target state="translated">语言标签不区分大小写,en-US、en-us、En-Us等都是同一个标签,表示同一种语言。</target>
        </trans-unit>
        <trans-unit id="2041c3756bf5afe1a1cc3301a6ebbbd4f47a0037" translate="yes" xml:space="preserve">
          <source>Language tags are not country codes. In fact, they are often distinct codes, as with language tag ja for Japanese, and ISO 3166 country code &lt;code&gt;.jp&lt;/code&gt; for Japan.</source>
          <target state="translated">语言标签不是国家/地区代码。实际上，它们通常是不同的代码，例如日语的语言标签ja和日本的ISO 3166国家/地区代码 &lt;code&gt;.jp&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="6108174a71e0210309b5a122717007cd6591f45e" translate="yes" xml:space="preserve">
          <source>Language tags are not for computer languages.</source>
          <target state="translated">语言标签不适用计算机语言。</target>
        </trans-unit>
        <trans-unit id="6368278c82dd6595f994cb8b61fde8b578ee7f10" translate="yes" xml:space="preserve">
          <source>Language tags are not locale IDs. A locale ID is written with a &quot;_&quot; instead of a &quot;-&quot;, (almost?) always matches &lt;code&gt;&lt;a href=&quot;../../functions/m&quot;&gt;m/^\w\w_\w\w\b/&lt;/a&gt;&lt;/code&gt;, and</source>
          <target state="translated">语言标记不是语言环境ID。语言环境ID是用&amp;ldquo; _&amp;rdquo;而不是&amp;ldquo;-&amp;rdquo;写的，（几乎是？）始终与 &lt;code&gt;&lt;a href=&quot;../../functions/m&quot;&gt;m/^\w\w_\w\w\b/&lt;/a&gt;&lt;/code&gt; 匹配，并且</target>
        </trans-unit>
        <trans-unit id="c3a10dc31440ea548103f890434cb5dc0e0cf98f" translate="yes" xml:space="preserve">
          <source>Language tags are not locale IDs. A locale ID is written with a &quot;_&quot; instead of a &quot;-&quot;, (almost?) always matches &lt;code&gt;m/^\w\w_\w\w\b/&lt;/code&gt;, and</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8edaa0c28ca3e32511fbcd5b5f49058ccc534792" translate="yes" xml:space="preserve">
          <source>Language-Specific</source>
          <target state="translated">Language-Specific</target>
        </trans-unit>
        <trans-unit id="21162f096b26204df6588bb5dc28d2f51868c501" translate="yes" xml:space="preserve">
          <source>Large File Support</source>
          <target state="translated">大文件支持</target>
        </trans-unit>
        <trans-unit id="cfd4c46c9150c3e9cafc48d2cf89b769398b7ba2" translate="yes" xml:space="preserve">
          <source>Large language group.</source>
          <target state="translated">大语种群体。</target>
        </trans-unit>
        <trans-unit id="68cb5c276851e088e954a75127561094108d7ebb" translate="yes" xml:space="preserve">
          <source>Large numbers of other programmers will be using your code modules.</source>
          <target state="translated">大量的其他程序员将使用你的代码模块。</target>
        </trans-unit>
        <trans-unit id="aed9d519447abe0e1e87e2be7e3184966a86c56b" translate="yes" xml:space="preserve">
          <source>Larger increments or decrements are handy in those cases where a thread needs to check out or return a number of resources at once.</source>
          <target state="translated">当一个线程需要同时签出或返回多个资源时,较大的增量或减量很方便。</target>
        </trans-unit>
        <trans-unit id="fd62837b713bdee00d46e7ce620e1a597b3acf56" translate="yes" xml:space="preserve">
          <source>Larry Wall</source>
          <target state="translated">拉里-沃尔</target>
        </trans-unit>
        <trans-unit id="d125a04b7cfbc6bf9a0d7e4500f4ff8af7def2b3" translate="yes" xml:space="preserve">
          <source>Larry Wall &amp;lt;larry@wall.org&amp;gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9800616a976bc743bc49de05b3ff6a81a8fed2bf" translate="yes" xml:space="preserve">
          <source>Larry Wall &amp;lt;larry@wall.org&amp;gt;, with the help of oodles of other folks.</source>
          <target state="translated">拉里&amp;middot;沃尔（Larry Wall）&amp;lt;larry@wall.org&amp;gt;，在其他人的帮助下。</target>
        </trans-unit>
        <trans-unit id="50431f0b84e94e89d59726aa67764d4b5cb64130" translate="yes" xml:space="preserve">
          <source>Larry Wall and others</source>
          <target state="translated">拉里-沃尔等人</target>
        </trans-unit>
        <trans-unit id="0fb4b4d75483396b0cb6c4053090cf1353b0f053" translate="yes" xml:space="preserve">
          <source>Larry Wall designed the elegant inherited bootstrap mechanism and implemented the first Perl 5 dynamic loader using it.</source>
          <target state="translated">Larry Wall设计了优雅的继承引导机制,并使用它实现了第一个Perl 5动态加载器。</target>
        </trans-unit>
        <trans-unit id="49cef125f502490a3eaa452e5063337afd4e5415" translate="yes" xml:space="preserve">
          <source>Larry Wall, Sean M. Burke</source>
          <target state="translated">Larry Wall,Sean M.Burke</target>
        </trans-unit>
        <trans-unit id="cad8518108cca44400e2368862a0f1a16bff95c7" translate="yes" xml:space="preserve">
          <source>Larry has his reasons for each of these things, but he doesn't claim that everyone else's mind works the same as his does.</source>
          <target state="translated">拉里对这些事情都有他的理由,但他并没有说别人的思想和他的思想是一样的。</target>
        </trans-unit>
        <trans-unit id="3e11f8268af6857ace69f95b629b0d80778d0d6d" translate="yes" xml:space="preserve">
          <source>Larry is allowed to change his mind about any matter at a later date, regardless of whether he previously invoked Rule 1.</source>
          <target state="translated">拉里可以在日后改变对任何事项的看法,无论他之前是否援引了规则1。</target>
        </trans-unit>
        <trans-unit id="e3d699c187f5eebff127e90268deebe55f0277f7" translate="yes" xml:space="preserve">
          <source>Larry is always by definition right about how Perl should behave. This means he has final veto power on the core functionality.</source>
          <target state="translated">根据定义,Larry对于Perl应该如何表现总是正确的。这意味着他对核心功能有最终的否决权。</target>
        </trans-unit>
        <trans-unit id="91247cb31b4e3f24a173a3ed4edb3fbe905e9dfa" translate="yes" xml:space="preserve">
          <source>Larry said &quot;Although the Perl Slogan is</source>
          <target state="translated">Larry说:&quot;虽然Perl的口号是</target>
        </trans-unit>
        <trans-unit id="8840809999231d8845f9dcc8eb994457fd02a531" translate="yes" xml:space="preserve">
          <source>Larry sees Perl development along the lines of the US government: there's the Legislature (the porters), the Executive branch (the -pumpking), and the Supreme Court (Larry). The legislature can discuss and submit patches to the executive branch all they like, but the executive branch is free to veto them. Rarely, the Supreme Court will side with the executive branch over the legislature, or the legislature over the executive branch. Mostly, however, the legislature and the executive branch are supposed to get along and work out their differences without impeachment or court cases.</source>
          <target state="translated">Larry认为Perl的发展是沿着美国政府的思路进行的:有立法机构(搬运工)、行政部门(-pumpking)和最高法院(Larry)。立法机关可以随意讨论并向行政部门提交补丁,但行政部门可以随意否决。极少数情况下,最高法院会站在行政部门一边,而不是立法机关,或者立法机关站在行政部门一边。然而,在大多数情况下,立法机关和行政部门应该和睦相处,解决它们之间的分歧,而不需要进行弹劾或诉讼。</target>
        </trans-unit>
        <trans-unit id="ae001311ff213d6955f7360f41d0eb019566259e" translate="yes" xml:space="preserve">
          <source>Lars Dieckow &amp;lt;daxim@cpan.org&amp;gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="86c4e4485ad3dbbdb5b5dd2e9dedc2315a7311d5" translate="yes" xml:space="preserve">
          <source>Last Changed</source>
          <target state="translated">最后更改</target>
        </trans-unit>
        <trans-unit id="1210639f474f0d343df95007771fdc202b411de7" translate="yes" xml:space="preserve">
          <source>Last In, First Out. See also &lt;b&gt;FIFO&lt;/b&gt;. A LIFO is usually called a &lt;b&gt;stack&lt;/b&gt;.</source>
          <target state="translated">后进先出。另请参见&lt;b&gt;FIFO&lt;/b&gt;。LIFO通常称为&lt;b&gt;堆栈&lt;/b&gt;。</target>
        </trans-unit>
        <trans-unit id="40830c73142a53064766f6ffa38ec5fccd97ec73" translate="yes" xml:space="preserve">
          <source>Last Updated: Fri, 29 Oct 1999 22:50:30 +0200</source>
          <target state="translated">最后更新。Fri,29 Oct 1999 22:50:30 +0200</target>
        </trans-unit>
        <trans-unit id="f1e5fc7462efd81797093d9980b1aa8171197971" translate="yes" xml:space="preserve">
          <source>Last but not least, here are various tips for safer coding. See also &lt;a href=&quot;perlclib&quot;&gt;perlclib&lt;/a&gt; for libc/stdio replacements one should use.</source>
          <target state="translated">最后但并非最不重要的一点是，这里提供了各种更安全的编码技巧。另请参阅&lt;a href=&quot;perlclib&quot;&gt;perlclib&lt;/a&gt;以获取应该使用的libc / stdio替换。</target>
        </trans-unit>
        <trans-unit id="dceffa1b326ba5ef1523c69acacd202e09a06fa6" translate="yes" xml:space="preserve">
          <source>Last modified 2013-04-29.</source>
          <target state="translated">最后修改为2013-04-29。</target>
        </trans-unit>
        <trans-unit id="5c3f1c04106319751d7e999882c029924d60d858" translate="yes" xml:space="preserve">
          <source>Last revised 14-Feb-1996, for Perl 5.002.</source>
          <target state="translated">最后修订于1996年2月14日,适用于Perl 5.002。</target>
        </trans-unit>
        <trans-unit id="c3eb2ac9f32e61251e1875ad9708ab6315be2573" translate="yes" xml:space="preserve">
          <source>Last revised 8-Oct-2010, for Perl 5.13.6.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c838bd278b91a142d60ea0e71aa5a59ad40e1552" translate="yes" xml:space="preserve">
          <source>Last update: 2008-10-29</source>
          <target state="translated">最后更新:2008-10-29</target>
        </trans-unit>
        <trans-unit id="fc7ec2c58f8d11214b25d3966287144f54470cfe" translate="yes" xml:space="preserve">
          <source>Last update: Tue Apr 26 18:30:55 MDT 2011</source>
          <target state="translated">最后更新:Tue Apr 26 18:30:55 MDT 2011</target>
        </trans-unit>
        <trans-unit id="fedbd273e34471c334909a9855d4fede2b18756d" translate="yes" xml:space="preserve">
          <source>Last updated for perl 5.23.1.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d25a330cf94331e783b24031686ddd1e4f1da4ff" translate="yes" xml:space="preserve">
          <source>Last updated: 07 October 2014</source>
          <target state="translated">最后更新 2014年10月7日</target>
        </trans-unit>
        <trans-unit id="e1651fd9e16da0fb6683f8baa5303f215ef932af" translate="yes" xml:space="preserve">
          <source>Last updated: 2012-02-08</source>
          <target state="translated">最后更新。2012-02-08</target>
        </trans-unit>
        <trans-unit id="f1b2c64ff3a41edcd2ecadfbbdf23ab6e9aa3f07" translate="yes" xml:space="preserve">
          <source>Last updated: 30 April 2019</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="152779e4c8b9d8d930bb573d8f364d8d186f33dd" translate="yes" xml:space="preserve">
          <source>Lastly, the</source>
          <target state="translated">最后一点是</target>
        </trans-unit>
        <trans-unit id="4d407485e169287b1c2aa3f4a4b85bc45bed7a87" translate="yes" xml:space="preserve">
          <source>Lastly, there is a special method for working under &lt;b&gt;-T&lt;/b&gt; and setuid/gid scripts:</source>
          <target state="translated">最后，有一个特殊的方法可以在&lt;b&gt;-T&lt;/b&gt;和setuid / gid脚本下工作：</target>
        </trans-unit>
        <trans-unit id="202e6182477b0bfd7c1ee15e20cf42a59755cdd1" translate="yes" xml:space="preserve">
          <source>Laszlo Molnar,</source>
          <target state="translated">Laszlo Molnar,</target>
        </trans-unit>
        <trans-unit id="526c6b8794fab24bec118be16f23def6a69bab1c" translate="yes" xml:space="preserve">
          <source>Lately, ignoring or actively opposing compatibility with earlier versions of Perl has come into vogue. Sometimes, a change is proposed which wants to usurp syntax which previously had another meaning. Sometimes, a change wants to improve previously-crazy semantics.</source>
          <target state="translated">最近,忽视或积极反对与早期版本的Perl的兼容性已经成为一种时尚。有时,一个改动的提出,是想篡夺以前具有另一种意义的语法。有时,一个改动想改进以前疯狂的语义。</target>
        </trans-unit>
        <trans-unit id="36e7725e6d39280db73b49ece64538b8d66586a2" translate="yes" xml:space="preserve">
          <source>Later in the life of the object the methods may be queries with get() method and set() method (which accept multiple arguments).</source>
          <target state="translated">在对象的后期,可以用get()方法和set()方法(接受多个参数)进行查询。</target>
        </trans-unit>
        <trans-unit id="6e71bb4c4e3671df8bee4472c56c5267f4268f7f" translate="yes" xml:space="preserve">
          <source>Later invocations of coloralias() with the same ALIAS will override earlier aliases. There is no way to remove an alias.</source>
          <target state="translated">以后调用coloralias()时,如果使用相同的alias,会覆盖之前的别名。没有办法删除别名。</target>
        </trans-unit>
        <trans-unit id="c58245493d9e35fde84415d863d1963037986377" translate="yes" xml:space="preserve">
          <source>Later on, we'll pass this to Configure through -Dtargetenv</source>
          <target state="translated">稍后,我们将通过-Dtargetenv将其传递给配置。</target>
        </trans-unit>
        <trans-unit id="f8e3805b10e4c4f4b08c327d5a5b182642f7a406" translate="yes" xml:space="preserve">
          <source>Latest version of &lt;a href=&quot;threads&quot;&gt;threads&lt;/a&gt; on CPAN: &lt;a href=&quot;http://search.cpan.org/search?module=threads&quot;&gt;http://search.cpan.org/search?module=threads&lt;/a&gt;</source>
          <target state="translated">CPAN 上&lt;a href=&quot;threads&quot;&gt;线程的&lt;/a&gt;最新版本：&lt;a href=&quot;http://search.cpan.org/search?module=threads&quot;&gt;http&lt;/a&gt; ://search.cpan.org/search?module = threads</target>
        </trans-unit>
        <trans-unit id="ab352e5ac1e025a34124fd8091aaf11aba38a34e" translate="yes" xml:space="preserve">
          <source>Latest version of &lt;a href=&quot;threads&quot;&gt;threads&lt;/a&gt; on CPAN: &lt;a href=&quot;https://metacpan.org/pod/threads&quot;&gt;https://metacpan.org/pod/threads&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="55dfbb7924a9e791a0e250e51336f5378e1751eb" translate="yes" xml:space="preserve">
          <source>Latest version of &lt;a href=&quot;threads/shared&quot;&gt;threads::shared&lt;/a&gt; on CPAN: &lt;a href=&quot;http://search.cpan.org/search?module=threads%3A%3Ashared&quot;&gt;http://search.cpan.org/search?module=threads%3A%3Ashared&lt;/a&gt;</source>
          <target state="translated">最新版本的&lt;a href=&quot;threads/shared&quot;&gt;线程：：&lt;/a&gt;在CPAN上共享：&lt;a href=&quot;http://search.cpan.org/search?module=threads%3A%3Ashared&quot;&gt;http&lt;/a&gt; ://search.cpan.org/search?module = threads% 3A%3Ashared</target>
        </trans-unit>
        <trans-unit id="9dd3a57a43ed9b942b39841e2da67e396eb27a54" translate="yes" xml:space="preserve">
          <source>Latest version of &lt;a href=&quot;threads::shared&quot;&gt;threads::shared&lt;/a&gt; on CPAN: &lt;a href=&quot;https://metacpan.org/pod/threads::shared&quot;&gt;https://metacpan.org/pod/threads::shared&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="57e8cec14c4a568ca92f36bd23fabb426a1d8b2d" translate="yes" xml:space="preserve">
          <source>Latin 1 (ISO 8859-1)</source>
          <target state="translated">拉丁文1(ISO 8859-1)</target>
        </trans-unit>
        <trans-unit id="c5f5bb3b350774d7cda57104c55fb6c82b7ae7d9" translate="yes" xml:space="preserve">
          <source>Latvia</source>
          <target state="translated">Latvia</target>
        </trans-unit>
        <trans-unit id="35bde1b1448a3634844f710f6f0c19bb97cc5c1e" translate="yes" xml:space="preserve">
          <source>Laundering and Detecting Tainted Data</source>
          <target state="translated">洗涤和检测受污染数据</target>
        </trans-unit>
        <trans-unit id="467f628abddb4dcd106efd4dcaeb617681eb8f7d" translate="yes" xml:space="preserve">
          <source>Layer allows buffer snooping.</source>
          <target state="translated">层允许缓冲区窥探。</target>
        </trans-unit>
        <trans-unit id="cb8d6c688037b3d7cd03ae365bbe000a64676df9" translate="yes" xml:space="preserve">
          <source>Layer can translate between &quot;\n&quot; and CRLF line ends.</source>
          <target state="translated">层可以在&quot;\n &quot;和CRLF线端之间进行转换。</target>
        </trans-unit>
        <trans-unit id="b12b05c07cab44e1c8dc0e859b671ac3d7cccd05" translate="yes" xml:space="preserve">
          <source>Layer is line buffered. Write data should be passed to next layer down whenever a &quot;\n&quot; is seen. Any data beyond the &quot;\n&quot; should then be processed.</source>
          <target state="translated">层是行缓冲的。每当看到&quot;/n &quot;时,应将写数据传给下一层。任何超过&quot;\n &quot;的数据都应该被处理。</target>
        </trans-unit>
        <trans-unit id="63a50a8c52a6d0d048f4fa59a33a9d88e95e80ac" translate="yes" xml:space="preserve">
          <source>Layer is performing Win32-like &quot;\n&quot; mapped to CR,LF for output and CR,LF mapped to &quot;\n&quot; for input. Normally the provided &quot;crlf&quot; layer is the only layer that need bother about this. &lt;code&gt;PerlIO_binmode()&lt;/code&gt; will mess with this flag rather than add/remove layers if the &lt;code&gt;PERLIO_K_CANCRLF&lt;/code&gt; bit is set for the layers class.</source>
          <target state="translated">层正在执行类似于Win32的&amp;ldquo; \ n&amp;rdquo;映射到CR，LF的输出和CR，LF映射到&amp;ldquo; \ n&amp;rdquo;的输入。通常，所提供的&amp;ldquo; crlf&amp;rdquo;层是唯一需要为此解决的层。如果将layers类的 &lt;code&gt;PERLIO_K_CANCRLF&lt;/code&gt; 位置1，则 &lt;code&gt;PerlIO_binmode()&lt;/code&gt; 将使此标志混乱，而不是添加/删除图层。</target>
        </trans-unit>
        <trans-unit id="eb03ef93aa3ad216c22ac53a17958f564d0c42cd" translate="yes" xml:space="preserve">
          <source>Layer is unbuffered - i.e. write to next layer down should occur for each write to this layer.</source>
          <target state="translated">层是无缓冲的--即对这一层的每一次写入都应该向下一层写入。</target>
        </trans-unit>
        <trans-unit id="9f3401294ca5c3ec99fdd44fd405f62db10c762f" translate="yes" xml:space="preserve">
          <source>Layer which calls &lt;code&gt;fread&lt;/code&gt; , &lt;code&gt;fwrite&lt;/code&gt; and &lt;code&gt;fseek&lt;/code&gt; /&lt;code&gt;ftell&lt;/code&gt; etc. Note that as this is &quot;real&quot; stdio it will ignore any layers beneath it and go straight to the operating system via the C library as usual.</source>
          <target state="translated">调用 &lt;code&gt;fread&lt;/code&gt; ， &lt;code&gt;fwrite&lt;/code&gt; 和 &lt;code&gt;fseek&lt;/code&gt; / &lt;code&gt;ftell&lt;/code&gt; 等的层。请注意，由于这是&amp;ldquo;真实的&amp;rdquo; stdio，它将忽略其下面的任何层，并照常通过C库直接进入操作系统。</target>
        </trans-unit>
        <trans-unit id="433c9dfe2472dbf21d6a258158fca98f65d2907f" translate="yes" xml:space="preserve">
          <source>Layer which calls &lt;code&gt;fread&lt;/code&gt;, &lt;code&gt;fwrite&lt;/code&gt; and &lt;code&gt;fseek&lt;/code&gt;/&lt;code&gt;ftell&lt;/code&gt; etc. Note that as this is &quot;real&quot; stdio it will ignore any layers beneath it and go straight to the operating system via the C library as usual. This layer implements both low level IO and buffering, but is rarely used on modern architectures.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f055f18aeadcf43179462eaf15e54d98e16c8b02" translate="yes" xml:space="preserve">
          <source>Layers</source>
          <target state="translated">Layers</target>
        </trans-unit>
        <trans-unit id="1657b47a449f7c4cf8948737db9fde6acf3a60e8" translate="yes" xml:space="preserve">
          <source>Layers are specified with a leading colon by convention. You can specify a stack of multiple layers as a space-separated string. See &lt;a href=&quot;perlio&quot;&gt;PerlIO&lt;/a&gt; for more information on the available layers.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9ff9f300fa7d1bbc3f849481cc645ec702a3625b" translate="yes" xml:space="preserve">
          <source>Layers can be made available by extension modules. When an unknown layer is encountered the PerlIO code will perform the equivalent of :</source>
          <target state="translated">层可以通过扩展模块来实现。当遇到未知的层时,PerlIO代码将执行等价的.NET技术。</target>
        </trans-unit>
        <trans-unit id="0e3178f7991d7264f18bf3f06ccf8bf03e08f4f6" translate="yes" xml:space="preserve">
          <source>Layers in action.</source>
          <target state="translated">分层行动。</target>
        </trans-unit>
        <trans-unit id="90a85751546d30690f93cf14e09e26b8d8de391b" translate="yes" xml:space="preserve">
          <source>Layers it makes sense to include in the PERLIO environment variable are briefly summarized below. For more details see &lt;a href=&quot;perlio&quot;&gt;PerlIO&lt;/a&gt;.</source>
          <target state="translated">下面简要概述了将包含在PERLIO环境变量中有意义的层。有关更多详细信息，请参见&lt;a href=&quot;perlio&quot;&gt;PerlIO&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="69114be10292080f3d4afeef56cf245603257cc6" translate="yes" xml:space="preserve">
          <source>Layers vs Disciplines</source>
          <target state="translated">层次与学科</target>
        </trans-unit>
        <trans-unit id="a41c1d3ed9255c2fe23288b7c102a2dc110d982d" translate="yes" xml:space="preserve">
          <source>Lazy people and beginners may now stop reading the manual.</source>
          <target state="translated">懒人和初学者现在可以不看说明书了。</target>
        </trans-unit>
        <trans-unit id="b9f359f1580c6817c9a64d72d3882cfe9dcbaef9" translate="yes" xml:space="preserve">
          <source>Le Sergent, T. and B. Berthomieu. &quot;Incremental MultiThreaded Garbage Collection on Virtually Shared Memory Architectures&quot; in Memory Management: Proc. of the International Workshop IWMM 92, St. Malo, France, September 1992, Yves Bekkers and Jacques Cohen, eds. Springer, 1992, ISBN 3540-55940-X (real-life thread applications).</source>
          <target state="translated">Le Sergent,T.and B.Berthomieu.&quot;Incremental MultiThreaded Garbage Collection on Virtually Shared Memory Architectures&quot; in Memory Management:国际研讨会IWMM 92,法国圣马洛,1992年9月,Yves Bekkers和Jacques Cohen编辑。Springer,1992,ISBN 3540-55940-X(现实生活中的线程应用)。</target>
        </trans-unit>
        <trans-unit id="bd162d2f93cdcba4f68be85d18fd26ee09a12efb" translate="yes" xml:space="preserve">
          <source>Leading and trailing colons can be used together if you need positional parameter values without the names. Note that in the case below, the &lt;code&gt;PERL_API&lt;/code&gt; params are returned in alphabetical order.</source>
          <target state="translated">如果需要不带名称的位置参数值，则前导冒号和尾随冒号可以一起使用。请注意，在以下情况下， &lt;code&gt;PERL_API&lt;/code&gt; 参数以字母顺序返回。</target>
        </trans-unit>
        <trans-unit id="21aea14ed2f508e6237030730dc68ea8c248a0f7" translate="yes" xml:space="preserve">
          <source>Leading and trailing whitespace is ignored.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="14de4e5c4a9c26aff3dbb9f05745a468eb0274d0" translate="yes" xml:space="preserve">
          <source>Leading and trailing zeros are ignored.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="46907cff7c02a850b549a727a75b341cfa614b27" translate="yes" xml:space="preserve">
          <source>Leading white space is ignored without warning, as too are any trailing non-digits, such as a decimal point (&lt;a href=&quot;#oct-EXPR&quot;&gt;&lt;code&gt;oct&lt;/code&gt;&lt;/a&gt; only handles non-negative integers, not negative integers or floating point).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a19eb901d0541a10b461432e6635be906ecd8d19" translate="yes" xml:space="preserve">
          <source>Leading white space is ignored without warning, as too are any trailing non-digits, such as a decimal point (&lt;code&gt;&lt;a href=&quot;functions/oct&quot;&gt;oct&lt;/a&gt;&lt;/code&gt; only handles non-negative integers, not negative integers or floating point).</source>
          <target state="translated">前导空格将被忽略而不会发出警告，尾随的非数字也将被忽略，例如小数点（ &lt;code&gt;&lt;a href=&quot;functions/oct&quot;&gt;oct&lt;/a&gt;&lt;/code&gt; 只处理非负整数，而不是负整数或浮点数）。</target>
        </trans-unit>
        <trans-unit id="fb2634197a046f8fbd1bb749b3d21bb890485f5f" translate="yes" xml:space="preserve">
          <source>Leading white space is ignored without warning, as too are any trailing non-digits, such as a decimal point (&lt;code&gt;&lt;a href=&quot;oct&quot;&gt;oct&lt;/a&gt;&lt;/code&gt; only handles non-negative integers, not negative integers or floating point).</source>
          <target state="translated">前导空格将被忽略而不会发出警告，尾随的非数字也将被忽略，例如小数点（ &lt;code&gt;&lt;a href=&quot;oct&quot;&gt;oct&lt;/a&gt;&lt;/code&gt; 只处理非负整数，而不是负整数或浮点数）。</target>
        </trans-unit>
        <trans-unit id="ba3f4ebacb603a1ffae736f19b872df26ac931b0" translate="yes" xml:space="preserve">
          <source>Learn Perl and rewrite it. Seriously, there's no simple converter. Things that are awkward to do in the shell are easy to do in Perl, and this very awkwardness is what would make a shell-&amp;gt;perl converter nigh-on impossible to write. By rewriting it, you'll think about what you're really trying to do, and hopefully will escape the shell's pipeline datastream paradigm, which while convenient for some matters, causes many inefficiencies.</source>
          <target state="translated">学习Perl并重写它。严重的是，没有简单的转换器。在Shell中难于处理的事情在Perl中很容易做到，而这种非常尴尬的事使Shell-&amp;gt; perl转换器几乎无法编写。通过重写它，您将考虑您真正想做的事情，并希望能够摆脱Shell的管道数据流范式，尽管这在某些方面很方便，但会导致许多低效率。</target>
        </trans-unit>
        <trans-unit id="4dd0a48cec0f53000c96d709bef9efb450bae6d8" translate="yes" xml:space="preserve">
          <source>Leaving out the Notify option usually defaults an SMTP service to its default behavior equivalent to ['FAILURE'] notifications only, but again this may be dependent upon your site's SMTP configuration.</source>
          <target state="translated">不使用 &quot;通知 &quot;选项通常会将SMTP服务默认为仅相当于['FAILURE']通知的行为,但这也可能取决于您网站的SMTP配置。</target>
        </trans-unit>
        <trans-unit id="a4c7551b205677232e62bc969aaaea5621b25584" translate="yes" xml:space="preserve">
          <source>Lee Johnson &amp;lt;notfadeaway at btinternet dot com&amp;gt;</source>
          <target state="translated">李&amp;middot;约翰逊（Lee Johnson）&amp;lt;btinternet dot com上的notfadeaway&amp;gt;</target>
        </trans-unit>
        <trans-unit id="b6a5edc3102ea975638e0ce2bb8f6982f95bead8" translate="yes" xml:space="preserve">
          <source>Left and right padding with any character, creating a new string:</source>
          <target state="translated">用任意字符进行左右填充,创建一个新的字符串。</target>
        </trans-unit>
        <trans-unit id="7f1c7df67c81bb16bff18c751738160fab5ff982" translate="yes" xml:space="preserve">
          <source>Left and right padding with any character, modifying &lt;code&gt;$text&lt;/code&gt; directly:</source>
          <target state="translated">用任何字符左右填充，直接修改 &lt;code&gt;$text&lt;/code&gt; ：</target>
        </trans-unit>
        <trans-unit id="af98dcfaae79ce4ac9aa9fbbe9635687fe2fe178" translate="yes" xml:space="preserve">
          <source>Left offset from pos() to start match at.</source>
          <target state="translated">从pos()到开始匹配的左偏移量。</target>
        </trans-unit>
        <trans-unit id="32ff2067f2a9f0deffe08043bfbad0999ed3babf" translate="yes" xml:space="preserve">
          <source>LeftString</source>
          <target state="translated">LeftString</target>
        </trans-unit>
        <trans-unit id="fb74bcaf76999b5ef8dae81b1022d842c093fe10" translate="yes" xml:space="preserve">
          <source>Legacy</source>
          <target state="translated">Legacy</target>
        </trans-unit>
        <trans-unit id="177a7c67030b56d701d66da14735a0847871d1fb" translate="yes" xml:space="preserve">
          <source>Legacy Character Sets</source>
          <target state="translated">遗留字符集</target>
        </trans-unit>
        <trans-unit id="45890076a74f7ba49cb141341bf0a665659f9168" translate="yes" xml:space="preserve">
          <source>Legacy Encodings</source>
          <target state="translated">遗留编码</target>
        </trans-unit>
        <trans-unit id="ca20c7f742784eaf8c9542c65094bd868679305e" translate="yes" xml:space="preserve">
          <source>Legacy multi byte EBCDIC code pages XXX.</source>
          <target state="translated">传统的多字节EBCDIC代码页XXX。</target>
        </trans-unit>
        <trans-unit id="7d1f21ee00bf8431c5da8e1a72603db078d1e391" translate="yes" xml:space="preserve">
          <source>Legacy usage</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="632363f7b0b4709b3208536a8ec83f44895c04cc" translate="yes" xml:space="preserve">
          <source>Legacy wrapper fro &lt;a href=&quot;Test2::EventFacet::Trace&quot;&gt;Test2::EventFacet::Trace&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b14ba2ec2e45438ad3facc4d4b02bd06eedc0c59" translate="yes" xml:space="preserve">
          <source>Legacy, fixed-width encodings defined by the ISO 10646 standard. UCS-2 is a 16-bit encoding. Unlike UTF-16, UCS-2 is not extensible beyond &lt;code&gt;U+FFFF&lt;/code&gt; , because it does not use surrogates. UCS-4 is a 32-bit encoding, functionally identical to UTF-32 (the difference being that UCS-4 forbids neither surrogates nor code points larger than &lt;code&gt;0x10_FFFF&lt;/code&gt; ).</source>
          <target state="translated">ISO 10646标准定义的旧版固定宽度编码。UCS-2是16位编码。与UTF-16不同，UCS-2不能扩展到 &lt;code&gt;U+FFFF&lt;/code&gt; 之外，因为它不使用代理。UCS-4是一种32位编码，功能上与UTF-32相同（不同之处在于UCS-4既不禁止代写也不禁止大于 &lt;code&gt;0x10_FFFF&lt;/code&gt; 的代码点）。</target>
        </trans-unit>
        <trans-unit id="3b6664ed1e448ada62088f03c80e41e23a96a928" translate="yes" xml:space="preserve">
          <source>Legacy, fixed-width encodings defined by the ISO 10646 standard. UCS-2 is a 16-bit encoding. Unlike UTF-16, UCS-2 is not extensible beyond &lt;code&gt;U+FFFF&lt;/code&gt;, because it does not use surrogates. UCS-4 is a 32-bit encoding, functionally identical to UTF-32 (the difference being that UCS-4 forbids neither surrogates nor code points larger than &lt;code&gt;0x10_FFFF&lt;/code&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="38bd3b0c39f79b172b2c117ae638fd62dd4f1072" translate="yes" xml:space="preserve">
          <source>Legacy, this is currently a no-op that returns 0;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="00a83ae1dc6e4e324ce120afa5a8e7b91193b805" translate="yes" xml:space="preserve">
          <source>Legal &lt;code&gt;\p{}&lt;/code&gt; and &lt;code&gt;\P{}&lt;/code&gt; constructs that match no characters</source>
          <target state="translated">没有字符的合法 &lt;code&gt;\p{}&lt;/code&gt; 和 &lt;code&gt;\P{}&lt;/code&gt; 构造</target>
        </trans-unit>
        <trans-unit id="b01926f0986a11c72cf140417a7b70c5868b0797" translate="yes" xml:space="preserve">
          <source>Legal \p{} and \P{} constructs that match no characters</source>
          <target state="translated">合法的p/{}和p/{}结构,不匹配任何字符。</target>
        </trans-unit>
        <trans-unit id="8b37e0171cc1c8f695fff30ed31b832cbddee2f1" translate="yes" xml:space="preserve">
          <source>Legend of characters above</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="97f35de278fd2499acf694739f13d5aa76297107" translate="yes" xml:space="preserve">
          <source>Leif Eriksen &amp;lt;leif dot eriksen at bigpond dot com&amp;gt;</source>
          <target state="translated">Leif Eriksen &amp;lt;bigpond dot com上的leif dot eriksen&amp;gt;</target>
        </trans-unit>
        <trans-unit id="6115881c5ecab4a82072aab1fbcafeaf5ae5a302" translate="yes" xml:space="preserve">
          <source>Length of the name.</source>
          <target state="translated">名字的长度。</target>
        </trans-unit>
        <trans-unit id="1deb1eed10d40a0d45e6e2d30e54152b66733959" translate="yes" xml:space="preserve">
          <source>Length to truncate the argument list when the &lt;code&gt;frame&lt;/code&gt; option's bit 4 is set.</source>
          <target state="translated">设置了 &lt;code&gt;frame&lt;/code&gt; 选项的位4 时截断参数列表的长度。</target>
        </trans-unit>
        <trans-unit id="1d1a91bdc1315d2ef3c37c514f4e0b41950b2992" translate="yes" xml:space="preserve">
          <source>Lengths and Widths</source>
          <target state="translated">长度和宽度</target>
        </trans-unit>
        <trans-unit id="d32b0b56fe2109af2e400ced24b899e2e7e6bed2" translate="yes" xml:space="preserve">
          <source>Leon Timmermans &amp;lt;fawaka@gmail.com&amp;gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1f4d25e02c52538201b9cb795664e476bf2e16bc" translate="yes" xml:space="preserve">
          <source>Leon Timmermans &amp;lt;leont@cpan.org&amp;gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c763c85942db32f81cf9ff36bb94bec3c42bb459" translate="yes" xml:space="preserve">
          <source>Let Perldoc check Pod for errors</source>
          <target state="translated">让Perldoc检查Pod的错误</target>
        </trans-unit>
        <trans-unit id="236e4f11c45d6dc4aeeb3e3ee19570b2cee88f0e" translate="yes" xml:space="preserve">
          <source>Let Perldoc convert Pod to nroff</source>
          <target state="translated">让Perldoc将Pod转换为nroff。</target>
        </trans-unit>
        <trans-unit id="974a4ac3dfc20423e93f62bd6d7257d2efff060e" translate="yes" xml:space="preserve">
          <source>Let Perldoc render Pod as ... Pod!</source>
          <target state="translated">让Perldoc把Pod渲染成......。Pod!</target>
        </trans-unit>
        <trans-unit id="89789b71272a03c7a7d2242762bf736542d90944" translate="yes" xml:space="preserve">
          <source>Let Perldoc render Pod as RTF</source>
          <target state="translated">让Perldoc将Pod渲染成RTF</target>
        </trans-unit>
        <trans-unit id="a09176a65c16f1ea87e512ddbd1ebf583706c4be" translate="yes" xml:space="preserve">
          <source>Let Perldoc render Pod as XML</source>
          <target state="translated">让Perldoc将Pod渲染成XML</target>
        </trans-unit>
        <trans-unit id="9dd1bef5afa3543070a44bc3e67a86b4a5626d33" translate="yes" xml:space="preserve">
          <source>Let Perldoc render Pod as man pages</source>
          <target state="translated">让Perldoc将Pod渲染成man pages</target>
        </trans-unit>
        <trans-unit id="cb573ad7df52482623e8e613fdbfbc5f59abce18" translate="yes" xml:space="preserve">
          <source>Let Perldoc render Pod as plaintext</source>
          <target state="translated">让Perldoc将Pod渲染成明文</target>
        </trans-unit>
        <trans-unit id="d279d6ba36fcd7e038b9dea67ba4516a9df60977" translate="yes" xml:space="preserve">
          <source>Let Perldoc use Tk::Pod to render Pod</source>
          <target state="translated">让Perldoc使用Tk::Pod来渲染Pod。</target>
        </trans-unit>
        <trans-unit id="757e98b6ce9386f0fb646f3598168b1185dc8359" translate="yes" xml:space="preserve">
          <source>Let it be noted that the flakiness of indirect filehandles is not related to whether they're strings, typeglobs, objects, or anything else. It's the syntax of the fundamental operators. Playing the object game doesn't help you at all here.</source>
          <target state="translated">我们要注意的是,间接文件柄的浮躁与它们是字符串、typeglobs、对象或其他任何东西无关。而是基本运算符的语法。玩对象游戏在这里对你一点帮助都没有。</target>
        </trans-unit>
        <trans-unit id="1fe958b2a6ee1393677c318cb2bd2d9b92f2cd48" translate="yes" xml:space="preserve">
          <source>Let it be stressed that</source>
          <target state="translated">需要强调的是</target>
        </trans-unit>
        <trans-unit id="b48514691c5b46e8297541220211ccc8b070316c" translate="yes" xml:space="preserve">
          <source>Let the index expire after how many days?</source>
          <target state="translated">让指数在多少天后到期?</target>
        </trans-unit>
        <trans-unit id="c1338ab2b041d88118e285278d063d0f4210f6e9" translate="yes" xml:space="preserve">
          <source>Let us now discuss Unicode character classes, most usually called &quot;character properties&quot;. These are represented by the &lt;code&gt;\p{&lt;i&gt;name&lt;/i&gt;}&lt;/code&gt; escape sequence. The negation of this is &lt;code&gt;\P{&lt;i&gt;name&lt;/i&gt;}&lt;/code&gt;. For example, to match lower and uppercase characters,</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6104cb2c1f6570ab357e214a9780db2e76a15675" translate="yes" xml:space="preserve">
          <source>Let us now discuss Unicode character classes, most usually called &quot;character properties&quot;. These are represented by the &lt;code&gt;\p{name}&lt;/code&gt; escape sequence. Closely associated is the &lt;code&gt;\P{name}&lt;/code&gt; property, which is the negation of the &lt;code&gt;\p{name}&lt;/code&gt; one. For example, to match lower and uppercase characters,</source>
          <target state="translated">现在让我们讨论Unicode字符类，通常称为&amp;ldquo;字符属性&amp;rdquo;。这些由 &lt;code&gt;\p{name}&lt;/code&gt; 转义序列表示。紧密相关的是 &lt;code&gt;\P{name}&lt;/code&gt; 属性，它是 &lt;code&gt;\p{name}&lt;/code&gt; 的取反。例如，要匹配大小写字符，</target>
        </trans-unit>
        <trans-unit id="d5b865b005185fbf91c141118661a5d11906d96e" translate="yes" xml:space="preserve">
          <source>Let's also fix the MANIFEST file so that it accurately reflects the contents of our extension. The single line that says &quot;mylib&quot; should be replaced by the following three lines:</source>
          <target state="translated">让我们也修正一下MANIFEST文件,使它能准确地反映出我们扩展的内容。将 &quot;mylib &quot;这一行改为以下三行。</target>
        </trans-unit>
        <trans-unit id="f577dbeceee6187e31fa08c5d2d55b7b25ccea26" translate="yes" xml:space="preserve">
          <source>Let's assume that we have a package &lt;code&gt;Cool::Foo&lt;/code&gt; , which includes &lt;code&gt;Cool::Foo&lt;/code&gt; and &lt;code&gt;Cool::Bar&lt;/code&gt; modules each having a separate XS file. First we use the following</source>
          <target state="translated">假设我们有一个 &lt;code&gt;Cool::Foo&lt;/code&gt; 包，其中包括 &lt;code&gt;Cool::Foo&lt;/code&gt; 和 &lt;code&gt;Cool::Bar&lt;/code&gt; 模块，每个模块都有一个单独的XS文件。首先我们使用以下</target>
        </trans-unit>
        <trans-unit id="f9cbac3ad4b48c1f15258c105ba2e7521b56e827" translate="yes" xml:space="preserve">
          <source>Let's assume that we have a package &lt;code&gt;Cool::Foo&lt;/code&gt;, which includes &lt;code&gt;Cool::Foo&lt;/code&gt; and &lt;code&gt;Cool::Bar&lt;/code&gt; modules each having a separate XS file. First we use the following</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5b0ca95dec9c2d9636bc8d5032b2d5f394a81699" translate="yes" xml:space="preserve">
          <source>Let's begin by looking a simple scalar which is holding a string.</source>
          <target state="translated">我们先来看一个简单的标量,它是持有一个字符串。</target>
        </trans-unit>
        <trans-unit id="bf0b81e7623e4177f0bbf011b090062ef49e50b2" translate="yes" xml:space="preserve">
          <source>Let's consider how different regexps would match &lt;code&gt;&quot;Hello World&quot;&lt;/code&gt; :</source>
          <target state="translated">让我们考虑一下不同的正则表达式将如何匹配 &lt;code&gt;&quot;Hello World&quot;&lt;/code&gt; ：</target>
        </trans-unit>
        <trans-unit id="6aca9f9e3f0c9c3d03f0d9c58efc7677ff8a8ff8" translate="yes" xml:space="preserve">
          <source>Let's consider how different regexps would match &lt;code&gt;&quot;Hello World&quot;&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="df805a589a3384de86f5cf73ad97a197cc80b2b6" translate="yes" xml:space="preserve">
          <source>Let's consider what happens when the filtered code includes another module with use:</source>
          <target state="translated">让我们考虑一下当过滤后的代码包含另一个模块的使用时,会发生什么。</target>
        </trans-unit>
        <trans-unit id="ae779227ca7a97ab41c0486c107dd88686a00384" translate="yes" xml:space="preserve">
          <source>Let's create a TCP server on &lt;code&gt;localhost:3333&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c5bb45ed6a20ca29516eecb8c27b4f1a78faa8d9" translate="yes" xml:space="preserve">
          <source>Let's edit the .xs file by adding this to the end of the file:</source>
          <target state="translated">让我们编辑.xs文件,在文件末尾添加以下内容。</target>
        </trans-unit>
        <trans-unit id="f7e0018c031b17ac0ce35fd9db664c3f00e8a38b" translate="yes" xml:space="preserve">
          <source>Let's examine the cogs of this byte mill, one by one. There's the &lt;code&gt;&lt;a href=&quot;functions/map&quot;&gt;map&lt;/a&gt;&lt;/code&gt; call, creating the items we intend to stuff into the &lt;code&gt;$env&lt;/code&gt; buffer: to each key (in &lt;code&gt;$_&lt;/code&gt; ) it adds the &lt;code&gt;=&lt;/code&gt; separator and the hash entry value. Each triplet is packed with the template code sequence &lt;code&gt;A*A*Z*&lt;/code&gt; that is repeated according to the number of keys. (Yes, that's what the &lt;code&gt;&lt;a href=&quot;functions/keys&quot;&gt;keys&lt;/a&gt;&lt;/code&gt; function returns in scalar context.) To get the very last null byte, we add a &lt;code&gt;0&lt;/code&gt; at the end of the &lt;code&gt;&lt;a href=&quot;functions/pack&quot;&gt;pack&lt;/a&gt;&lt;/code&gt; list, to be packed with &lt;code&gt;C&lt;/code&gt; . (Attentive readers may have noticed that we could have omitted the 0.)</source>
          <target state="translated">让我们一一检查这个字节磨的齿轮。有一个 &lt;code&gt;&lt;a href=&quot;functions/map&quot;&gt;map&lt;/a&gt;&lt;/code&gt; 调用，将我们打算填充到 &lt;code&gt;$env&lt;/code&gt; 缓冲区中的项目创建：在每个键（在 &lt;code&gt;$_&lt;/code&gt; ）中添加 &lt;code&gt;=&lt;/code&gt; 分隔符和哈希条目值。每个三元组都包装有根据键数重复的模板代码序列 &lt;code&gt;A*A*Z*&lt;/code&gt; 。 （是的，这就是在 &lt;code&gt;&lt;a href=&quot;functions/keys&quot;&gt;keys&lt;/a&gt;&lt;/code&gt; 的功能在标量上下文的回报）。为了得到最后的空字节，我们添加了一个 &lt;code&gt;0&lt;/code&gt; 在年底 &lt;code&gt;&lt;a href=&quot;functions/pack&quot;&gt;pack&lt;/a&gt;&lt;/code&gt; 清单，被挤满了 &lt;code&gt;C&lt;/code&gt; 。 （细心的读者可能已经注意到我们可以省略0。）</target>
        </trans-unit>
        <trans-unit id="03dd34b9bc34d0893db5fe1238852061dbc9990c" translate="yes" xml:space="preserve">
          <source>Let's examine the cogs of this byte mill, one by one. There's the &lt;code&gt;map&lt;/code&gt; call, creating the items we intend to stuff into the &lt;code&gt;$env&lt;/code&gt; buffer: to each key (in &lt;code&gt;$_&lt;/code&gt;) it adds the &lt;code&gt;=&lt;/code&gt; separator and the hash entry value. Each triplet is packed with the template code sequence &lt;code&gt;A*A*Z*&lt;/code&gt; that is repeated according to the number of keys. (Yes, that's what the &lt;code&gt;keys&lt;/code&gt; function returns in scalar context.) To get the very last null byte, we add a &lt;code&gt;0&lt;/code&gt; at the end of the &lt;code&gt;pack&lt;/code&gt; list, to be packed with &lt;code&gt;C&lt;/code&gt;. (Attentive readers may have noticed that we could have omitted the 0.)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9e554ae494be1d13390f7359c0d05574c54b38a5" translate="yes" xml:space="preserve">
          <source>Let's examine the whole implementation, for practice:</source>
          <target state="translated">我们来研究一下整个的实施,进行实践。</target>
        </trans-unit>
        <trans-unit id="cb0a55a99d6403d9b27402fcdfbf4d6ed2e005f9" translate="yes" xml:space="preserve">
          <source>Let's explore this feature a little more. We'll begin with the equivalent of</source>
          <target state="translated">我们再来探讨一下这个功能。我们先从相当于</target>
        </trans-unit>
        <trans-unit id="ebfb13b002928ab00b844746320f412762e65aa3" translate="yes" xml:space="preserve">
          <source>Let's give it a try:</source>
          <target state="translated">让我们试一试。</target>
        </trans-unit>
        <trans-unit id="4e14ae2cc2c4249d7ae1307778537f0e17717e46" translate="yes" xml:space="preserve">
          <source>Let's have a look at how Perl sees &lt;code&gt;$a = $b + $c&lt;/code&gt; :</source>
          <target state="translated">让我们看看Perl如何看待 &lt;code&gt;$a = $b + $c&lt;/code&gt; ：</target>
        </trans-unit>
        <trans-unit id="6bcf594dd87bbdba596aaad50a05456d93f5c880" translate="yes" xml:space="preserve">
          <source>Let's have a look at how Perl sees &lt;code&gt;$a = $b + $c&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e928f3f516e4f40543bf011e7476bdaffeba6904" translate="yes" xml:space="preserve">
          <source>Let's look at another TCP client. This one connects to the TCP &quot;time&quot; service on a number of different machines and shows how far their clocks differ from the system on which it's being run:</source>
          <target state="translated">让我们看看另一个TCP客户端。这个客户端连接到一些不同机器上的TCP &quot;时间 &quot;服务,并显示它们的时钟与运行它的系统之间的差异。</target>
        </trans-unit>
        <trans-unit id="0bfde5091a0fdc4b1dcc0dd94b94093ffcfd6f13" translate="yes" xml:space="preserve">
          <source>Let's look at each in turn, using as an example a tie class for scalars that allows the user to do something like:</source>
          <target state="translated">让我们逐一来看,以标量的领带类为例,允许用户做这样的事情。</target>
        </trans-unit>
        <trans-unit id="8c38883dc5f76f55aab6aa025aff159c68fa3911" translate="yes" xml:space="preserve">
          <source>Let's look at each of these possible constructs in detail. There are separate sections on each of the following:</source>
          <target state="translated">让我们来详细看看这些可能的结构中的每一个。以下是关于每一种结构的单独章节。</target>
        </trans-unit>
        <trans-unit id="ad30ae9725c85002b6831ea9730f9076d479a5c8" translate="yes" xml:space="preserve">
          <source>Let's look at each of these principles in depth.</source>
          <target state="translated">让我们来深入了解一下这些原则。</target>
        </trans-unit>
        <trans-unit id="176db7a51355c5004c1f239aa8667a05811318e4" translate="yes" xml:space="preserve">
          <source>Let's look at the example above, but with minimal quantifiers:</source>
          <target state="translated">让我们来看看上面的例子,但用最小的量化器。</target>
        </trans-unit>
        <trans-unit id="44d6bf690bfe89fee660e282315649dfc02c909f" translate="yes" xml:space="preserve">
          <source>Let's make a quick object and x-plode it, first we'll start the debugger: it wants some form of input from STDIN, so we give it something non-committal, a zero:</source>
          <target state="translated">让我们做一个快速的对象并对其进行x-plode,首先我们将启动调试器:它希望从STDIN中获得某种形式的输入,所以我们给它一些非约定性的东西,一个零。</target>
        </trans-unit>
        <trans-unit id="8c36a08a96367b239dd26ec1d8f04af50262a733" translate="yes" xml:space="preserve">
          <source>Let's say you'd like your Perl program to process data stored in a nearby directory called &lt;code&gt;unsorted&lt;/code&gt;, which contains a number of textfiles. You'd also like your program to sort all the contents from these files into a single, alphabetically sorted list of unique lines before it starts processing them.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2af4365a6067ebec1d91261e67cfd455affae6b4" translate="yes" xml:space="preserve">
          <source>Let's say your application is a server that will occasionally run Perl code from some arbitrary file. Your server has no way of knowing what code it's going to run. Very dangerous.</source>
          <target state="translated">假设你的应用程序是一个服务器,偶尔会从一些任意文件中运行Perl代码。你的服务器没有办法知道它要运行什么代码。非常危险。</target>
        </trans-unit>
        <trans-unit id="4d890463be6280c78f6b7f6a985632f09c2fa90e" translate="yes" xml:space="preserve">
          <source>Let's see a quick example of how all this is useful.</source>
          <target state="translated">让我们来看看一个快速的例子,看看这一切是如何有用的。</target>
        </trans-unit>
        <trans-unit id="e32a2ed9f3b04c47c03460e3d9853725a7d0f999" translate="yes" xml:space="preserve">
          <source>Let's see what &lt;code&gt;Benchmark&lt;/code&gt; makes of this:</source>
          <target state="translated">让我们看一下 &lt;code&gt;Benchmark&lt;/code&gt; 所做的：</target>
        </trans-unit>
        <trans-unit id="405776f1b44151a8af53d3cf919e2d8b537db4ed" translate="yes" xml:space="preserve">
          <source>Let's start in the middle, at line 4. This is a BINOP, a binary operator, which is at location &lt;code&gt;0x8179828&lt;/code&gt; . The specific operator in question is &lt;code&gt;sassign&lt;/code&gt; - scalar assignment - and you can find the code which implements it in the function &lt;code&gt;pp_sassign&lt;/code&gt; in</source>
          <target state="translated">让我们从中间的第4行开始。这是一个BINOP二进制运算符，位于位置 &lt;code&gt;0x8179828&lt;/code&gt; 。有问题的特定运算符是 &lt;code&gt;sassign&lt;/code&gt; -标量赋值-您可以在函数 &lt;code&gt;pp_sassign&lt;/code&gt; 中找到实现它的代码。</target>
        </trans-unit>
        <trans-unit id="c82eef57c73c123759da862922f036bf0665286b" translate="yes" xml:space="preserve">
          <source>Let's start in the middle, at line 4. This is a BINOP, a binary operator, which is at location &lt;code&gt;0x8179828&lt;/code&gt;. The specific operator in question is &lt;code&gt;sassign&lt;/code&gt; - scalar assignment - and you can find the code which implements it in the function &lt;code&gt;pp_sassign&lt;/code&gt; in</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fc1d4b156d0cb946936473b6a08e0d57dc7fd23f" translate="yes" xml:space="preserve">
          <source>Let's start with the second line. It says that the uppercase of code point 97 is 65; or &lt;code&gt;&lt;a href=&quot;../functions/uc&quot;&gt;uc(&quot;a&quot;)&lt;/a&gt;&lt;/code&gt; == &quot;A&quot;. But the line is for the entire range of code points 97 through 122. To get the mapping for any code point in this range, you take the offset it has from the beginning code point of the range, and add that to the mapping for that first code point. So, the mapping for 122 (&quot;z&quot;) is derived by taking the offset of 122 from 97 (=25) and adding that to 65, yielding 90 (&quot;z&quot;). Likewise for everything in between.</source>
          <target state="translated">让我们从第二行开始。它说代码点97的大写为65；或 &lt;code&gt;&lt;a href=&quot;../functions/uc&quot;&gt;uc(&quot;a&quot;)&lt;/a&gt;&lt;/code&gt; ==&amp;ldquo; A&amp;rdquo;。但是该行是针对代码点97到122的整个范围的。要获取此范围内任何代码点的映射，请获取其与该范围的开始代码点之间的偏移量，并将其添加到该范围的映射中第一个代码点。因此，通过从97（= 25）获得122的偏移量并将其加到65，得出90（&amp;ldquo; z&amp;rdquo;），从而得出122（&amp;ldquo; z&amp;rdquo;）的映射。同样，介于两者之间的所有内容。</target>
        </trans-unit>
        <trans-unit id="283878194b8e2d4159d246c8407adfc9545545e1" translate="yes" xml:space="preserve">
          <source>Let's start with the second line. It says that the uppercase of code point 97 is 65; or &lt;code&gt;uc(&quot;a&quot;)&lt;/code&gt; == &quot;A&quot;. But the line is for the entire range of code points 97 through 122. To get the mapping for any code point in this range, you take the offset it has from the beginning code point of the range, and add that to the mapping for that first code point. So, the mapping for 122 (&quot;z&quot;) is derived by taking the offset of 122 from 97 (=25) and adding that to 65, yielding 90 (&quot;z&quot;). Likewise for everything in between.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0880854fa8770ea11a4efe4579463972aa5ae537" translate="yes" xml:space="preserve">
          <source>Let's suppose you have some weird Martian encoding where pairs of ASCII uppercase letters encode single Martian letters (i.e. the two bytes &quot;CV&quot; make a single Martian letter, as do the two bytes &quot;SG&quot;, &quot;VS&quot;, &quot;XX&quot;, etc.). Other bytes represent single characters, just like ASCII.</source>
          <target state="translated">假设你有一些奇怪的火星语编码,其中一对ASCII大写字母编码单个火星语字母(即两个字节 &quot;CV &quot;组成一个火星语字母,两个字节 &quot;SG&quot;、&quot;VS&quot;、&quot;XX &quot;等也是如此)。其他字节代表单个字符,就像ASCII码一样。</target>
        </trans-unit>
        <trans-unit id="8f09fe13c85ec276cd87ab04a04d40aac9612c6e" translate="yes" xml:space="preserve">
          <source>Let's suppose you've got to read in a data file like this:</source>
          <target state="translated">假设你要读取的数据文件是这样的。</target>
        </trans-unit>
        <trans-unit id="2f7c544be1b70356d2951611060b9932dadf6ea2" translate="yes" xml:space="preserve">
          <source>Let's take a look at a portion of the .c file created for our extension. The file name is Mytest.c:</source>
          <target state="translated">我们来看看为我们的扩展名创建的.c文件的一部分。文件名是Mytest.c。</target>
        </trans-unit>
        <trans-unit id="ce5f83676281dd1446f1a5a503aee374bc369bcc" translate="yes" xml:space="preserve">
          <source>Let's take a look at the same program using a different profiler: &lt;code&gt;Devel::Profiler&lt;/code&gt; , a drop-in Perl-only replacement for &lt;code&gt;Devel::DProf&lt;/code&gt; . The usage is very slightly different in that instead of using the special &lt;code&gt;-d:&lt;/code&gt; flag, you pull &lt;code&gt;Devel::Profiler&lt;/code&gt; in directly as a module using &lt;code&gt;-M&lt;/code&gt; .</source>
          <target state="translated">让我们看一下使用不同的探查器的同一程序： &lt;code&gt;Devel::Profiler&lt;/code&gt; ，它是 &lt;code&gt;Devel::DProf&lt;/code&gt; 的仅Perl的替代品。用法略有不同，因为您无需使用特殊的 &lt;code&gt;-d:&lt;/code&gt; 标志，而是使用 &lt;code&gt;-M&lt;/code&gt; 将 &lt;code&gt;Devel::Profiler&lt;/code&gt; 直接作为模块拉入。</target>
        </trans-unit>
        <trans-unit id="51d206f459af5ffe821cbc3901dfba71c7b8ef1d" translate="yes" xml:space="preserve">
          <source>Let's take a look at the same program using a different profiler: &lt;code&gt;Devel::Profiler&lt;/code&gt;, a drop-in Perl-only replacement for &lt;code&gt;Devel::DProf&lt;/code&gt;. The usage is very slightly different in that instead of using the special &lt;code&gt;-d:&lt;/code&gt; flag, you pull &lt;code&gt;Devel::Profiler&lt;/code&gt; in directly as a module using &lt;code&gt;-M&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="230698ed5211b94950bbc39ebf4a2cd8603f3243" translate="yes" xml:space="preserve">
          <source>Let's take a simple patch from start to finish.</source>
          <target state="translated">让我们从头到尾看一个简单的补丁。</target>
        </trans-unit>
        <trans-unit id="2b003d41c47da4c513944208b256541b446c8a71" translate="yes" xml:space="preserve">
          <source>Let's take an example of manipulating a PV, from &lt;code&gt;sv_catpvn&lt;/code&gt; , in</source>
          <target state="translated">让我们操纵PV，从一个例子 &lt;code&gt;sv_catpvn&lt;/code&gt; ，在</target>
        </trans-unit>
        <trans-unit id="f81a1d5166b525293109d732fb53d9a2e8fb4f86" translate="yes" xml:space="preserve">
          <source>Let's take an example of manipulating a PV, from &lt;code&gt;sv_catpvn&lt;/code&gt;, in</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7c3c67f07cd4da0245ca6a99400a337a71fe4ec4" translate="yes" xml:space="preserve">
          <source>Let's take an example. Suppose you're reading in data from a local format into a hash-of-hashes in Perl, turning that into a tree, walking the tree and then piping each node to an Acme Transmogrifier Server.</source>
          <target state="translated">让我们举个例子。假设你从本地格式的数据中读取数据到Perl中的哈希值,将其变成一棵树,走完这棵树,然后将每个节点用管道传送到Acme Transmogrifier服务器。</target>
        </trans-unit>
        <trans-unit id="08e16151674f7f96adbcc23b02310179ef6623cd" translate="yes" xml:space="preserve">
          <source>Let's take the following test directory structure:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f39fd63d744cf93b2616319a85e2d2154efb3e45" translate="yes" xml:space="preserve">
          <source>Let's you write:</source>
          <target state="translated">让你写。</target>
        </trans-unit>
        <trans-unit id="2f17a5ca119319a7ec877e7a949710676dc887eb" translate="yes" xml:space="preserve">
          <source>Level 1 - Basic Unicode Support</source>
          <target state="translated">1级--基本Unicode支持</target>
        </trans-unit>
        <trans-unit id="0de802e5c110593513199ad6be14e0d3e4934cee" translate="yes" xml:space="preserve">
          <source>Level 2 - Extended Unicode Support</source>
          <target state="translated">第二级--扩展的Unicode支持</target>
        </trans-unit>
        <trans-unit id="bddac528f4922054293682b3a34528809353679b" translate="yes" xml:space="preserve">
          <source>Level 3 - Tailored Support</source>
          <target state="translated">第3级--量身定制的支持</target>
        </trans-unit>
        <trans-unit id="af642ef849c39f332561002d12526780f4e80e2e" translate="yes" xml:space="preserve">
          <source>Level of verbosity. By default, the debugger leaves your exceptions and warnings alone, because altering them can break correctly running programs. It will attempt to print a message when uncaught INT, BUS, or SEGV signals arrive. (But see the mention of signals in &lt;a href=&quot;#BUGS&quot;&gt;&quot;BUGS&quot;&lt;/a&gt; below.)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="27b7cf7750bfaac558f7db0f6b00074662dc6814" translate="yes" xml:space="preserve">
          <source>Level of verbosity. By default, the debugger leaves your exceptions and warnings alone, because altering them can break correctly running programs. It will attempt to print a message when uncaught INT, BUS, or SEGV signals arrive. (But see the mention of signals in &lt;a href=&quot;#BUGS&quot;&gt;BUGS&lt;/a&gt; below.)</source>
          <target state="translated">详细程度。默认情况下，调试器不理会您的异常和警告，因为对其进行更改可能会破坏正常运行的程序。当未捕获的INT，BUS或SEGV信号到达时，它将尝试打印一条消息。（但是请参阅下面的&amp;ldquo; &lt;a href=&quot;#BUGS&quot;&gt;BUGS&amp;rdquo;&lt;/a&gt;中提到的信号。）</target>
        </trans-unit>
        <trans-unit id="ed47f098118b3a4908065115144a054c9afe75d6" translate="yes" xml:space="preserve">
          <source>Levels</source>
          <target state="translated">Levels</target>
        </trans-unit>
        <trans-unit id="dd4d01b82f363523e943497a1acd58ad122c1d74" translate="yes" xml:space="preserve">
          <source>Lewis, Bill, and Daniel J. Berg. Multithreaded Programming with Pthreads. Prentice Hall, 1997, ISBN 0-13-443698-9 (a well-written introduction to threads).</source>
          <target state="translated">Lewis,Bill,and Daniel J.Berg.Multithreaded Programming with Pthreads.Prentice Hall,1997年,ISBN 0-13-443698-9(对线程的介绍写得不错)。</target>
        </trans-unit>
        <trans-unit id="0130807d4961ca028150a643b43fa9d3af268eec" translate="yes" xml:space="preserve">
          <source>Lexer interface</source>
          <target state="translated">Lexer接口</target>
        </trans-unit>
        <trans-unit id="7c46e8b2c6a1b67615cc4a28b1803b6611e259c0" translate="yes" xml:space="preserve">
          <source>Lexical (my) variables declared in scopes external to a subroutine appear in code2ref output text as package variables. This is a tricky problem, as perl has no native facility for referring to a lexical variable defined within a different scope, although &lt;a href=&quot;http://search.cpan.org/perldoc/PadWalker&quot;&gt;PadWalker&lt;/a&gt; is a good start.</source>
          <target state="translated">在子例程外部的作用域中声明的词法（我）变量作为包变量出现在code2ref输出文本中。这是一个棘手的问题，因为尽管&lt;a href=&quot;http://search.cpan.org/perldoc/PadWalker&quot;&gt;PadWalker&lt;/a&gt;是一个很好的开始，但是perl没有本地功能来引用在不同范围内定义的词法变量。</target>
        </trans-unit>
        <trans-unit id="2a2592394276034b7da48f012e3e1835635e7937" translate="yes" xml:space="preserve">
          <source>Lexical (my) variables declared in scopes external to a subroutine appear in coderef2text output text as package variables. This is a tricky problem, as perl has no native facility for referring to a lexical variable defined within a different scope, although &lt;a href=&quot;padwalker&quot;&gt;PadWalker&lt;/a&gt; is a good start.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="21795cace48f4382f41c503a0895c632d1557532" translate="yes" xml:space="preserve">
          <source>Lexical Subroutines</source>
          <target state="translated">词汇子程序</target>
        </trans-unit>
        <trans-unit id="91090443b78c24e5208fa0b7749049adce1d8581" translate="yes" xml:space="preserve">
          <source>Lexical effect</source>
          <target state="translated">词汇效应</target>
        </trans-unit>
        <trans-unit id="10e46358434f33f5da4b481844bfbc427a1eaf46" translate="yes" xml:space="preserve">
          <source>Lexical scopes of control structures are not bounded precisely by the braces that delimit their controlled blocks; control expressions are part of that scope, too. Thus in the loop</source>
          <target state="translated">控制结构的词法范围并不精确地由限定其控制块的括号来约束;控制表达式也是该范围的一部分。因此在循环中</target>
        </trans-unit>
        <trans-unit id="c32019b3ed41f9870148e7d8a8bcc91664cf5db8" translate="yes" xml:space="preserve">
          <source>Lexical subroutines are only available under the &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; feature
'lexical_subs'&lt;/code&gt; pragma, which produces a warning unless the &quot;experimental::lexical_subs&quot; warnings category is disabled.</source>
          <target state="translated">词汇子例程仅在 &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; feature 'lexical_subs'&lt;/code&gt; 编译指示下可用，除非禁用&amp;ldquo; experimental :: lexical_subs&amp;rdquo;警告类别，否则它会产生警告。</target>
        </trans-unit>
        <trans-unit id="63259d01172ac59370a7ece5661c26923725e28e" translate="yes" xml:space="preserve">
          <source>Lexical variable introduced (declared with my()) for the first time.</source>
          <target state="translated">首次引入词汇变量(用my()声明)。</target>
        </trans-unit>
        <trans-unit id="6bec4b7b4f94bd2a84719ee4041560ade2de4cd8" translate="yes" xml:space="preserve">
          <source>Lexical variables (declared with &quot;my&quot;) are not visible within a format unless the format is declared within the scope of the lexical variable.</source>
          <target state="translated">词汇变量(用 &quot;my &quot;声明)在格式中是不可见的,除非格式是在词汇变量的范围内声明的。</target>
        </trans-unit>
        <trans-unit id="56e8fa65a6460263a21b0d0b067830070ec69c2a" translate="yes" xml:space="preserve">
          <source>Lexical warnings get around these limitations by allowing finer control over where warnings can or can't be tripped.</source>
          <target state="translated">词法警告可以绕过这些限制,对警告可以或不可以被触发的地方进行更精细的控制。</target>
        </trans-unit>
        <trans-unit id="dfa37e8913139b1f0a81171648bb039460ba6c8c" translate="yes" xml:space="preserve">
          <source>Lexically control overloading</source>
          <target state="translated">词汇上控制超载</target>
        </trans-unit>
        <trans-unit id="d71329c73390ebdefc7d3045a64e73de047c01c2" translate="yes" xml:space="preserve">
          <source>Lexing code (whether in the Perl core or not) moves this pointer past the characters that it consumes. It is also expected to perform some bookkeeping whenever a newline character is consumed. This movement can be more conveniently performed by the function &lt;a href=&quot;#lex_read_to&quot;&gt;&quot;lex_read_to&quot;&lt;/a&gt;, which handles newlines appropriately.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d23a9b3c648b4ba0282c9679b9e53d7ed27aaf5d" translate="yes" xml:space="preserve">
          <source>Lexing code (whether in the Perl core or not) moves this pointer past the characters that it consumes. It is also expected to perform some bookkeeping whenever a newline character is consumed. This movement can be more conveniently performed by the function &lt;a href=&quot;#lex_read_to&quot;&gt;lex_read_to&lt;/a&gt;, which handles newlines appropriately.</source>
          <target state="translated">Lexing代码（无论是否在Perl内核中）将指针移到它消耗的字符之外。每当使用换行符时，它也应执行一些簿记。可以通过&lt;a href=&quot;#lex_read_to&quot;&gt;lex_read_to&lt;/a&gt;函数更方便地执行此移动，该函数可以适当地处理换行符。</target>
        </trans-unit>
        <trans-unit id="50c4503eb10cb7055e83f0b77d0c54ba198cb8a3" translate="yes" xml:space="preserve">
          <source>Lexing code attempted to stuff non-Latin-1 character into Latin-1 input</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cec3fbd307e04ea0a0267363d68414b3f6becd30" translate="yes" xml:space="preserve">
          <source>Lexing code internal error (%s)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dbdf2fc886297cee27c73397601ff4f39103c78d" translate="yes" xml:space="preserve">
          <source>Libnet Frequently Asked Questions</source>
          <target state="translated">Libnet常见问题</target>
        </trans-unit>
        <trans-unit id="e99e9a5a6c267649059fa8147d50e8a56d55d8c3" translate="yes" xml:space="preserve">
          <source>Libraries using &lt;a href=&quot;#FUNCTIONS&quot;&gt;warnings::warn&lt;/a&gt; for custom warning categories generally don't expect &lt;a href=&quot;#FUNCTIONS&quot;&gt;warnings::warn&lt;/a&gt; to be fatal and can wind up in an unexpected state as a result. For XS modules issuing categorized warnings, such unanticipated exceptions could also expose memory leak bugs.</source>
          <target state="translated">使用&lt;a href=&quot;#FUNCTIONS&quot;&gt;警告::警告&lt;/a&gt;来定制警告类别的库通常不会期望&lt;a href=&quot;#FUNCTIONS&quot;&gt;警告::警告&lt;/a&gt;是致命的，因此可能会以意外状态结束。对于发布分类警告的XS模块，此类意外的异常也可能会暴露内存泄漏错误。</target>
        </trans-unit>
        <trans-unit id="dbfd43d16e8972c230e7e22188720b2bf73e76c5" translate="yes" xml:space="preserve">
          <source>Library ... not found</source>
          <target state="translated">图书馆.未找到</target>
        </trans-unit>
        <trans-unit id="51ac812d4d63215ce6bab6ff80843a9768d50aa3" translate="yes" xml:space="preserve">
          <source>Library modules should not in general export built-in names like &lt;code&gt;&lt;a href=&quot;functions/open&quot;&gt;open&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;functions/chdir&quot;&gt;chdir&lt;/a&gt;&lt;/code&gt; as part of their default &lt;code&gt;@EXPORT&lt;/code&gt; list, because these may sneak into someone else's namespace and change the semantics unexpectedly. Instead, if the module adds that name to &lt;code&gt;@EXPORT_OK&lt;/code&gt; , then it's possible for a user to import the name explicitly, but not implicitly. That is, they could say</source>
          <target state="translated">库模块通常不应将内置名称（如 &lt;code&gt;&lt;a href=&quot;functions/open&quot;&gt;open&lt;/a&gt;&lt;/code&gt; 或 &lt;code&gt;&lt;a href=&quot;functions/chdir&quot;&gt;chdir&lt;/a&gt;&lt;/code&gt; )导出为其默认 &lt;code&gt;@EXPORT&lt;/code&gt; 列表的一部分，因为它们可能会潜入其他人的名称空间并意外更改语义。相反，如果模块将名称添加到 &lt;code&gt;@EXPORT_OK&lt;/code&gt; ，则用户可以显式而非隐式导入名称。也就是说，他们可以说</target>
        </trans-unit>
        <trans-unit id="ad8c903818c8a82f08facfa60cb87854b48f3251" translate="yes" xml:space="preserve">
          <source>Library modules should not in general export built-in names like &lt;code&gt;open&lt;/code&gt; or &lt;code&gt;chdir&lt;/code&gt; as part of their default &lt;code&gt;@EXPORT&lt;/code&gt; list, because these may sneak into someone else's namespace and change the semantics unexpectedly. Instead, if the module adds that name to &lt;code&gt;@EXPORT_OK&lt;/code&gt;, then it's possible for a user to import the name explicitly, but not implicitly. That is, they could say</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="189f5ddd187269a52ad75ba078f7fedb0f60d5fe" translate="yes" xml:space="preserve">
          <source>License String</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a8774f0e51de54365d13b10f234f9f0ab4b4c7b6" translate="yes" xml:space="preserve">
          <source>License is also granted to make and use derivative works provided that such works are identified as &quot;derived from the RSA Data Security, Inc. MD5 Message-Digest Algorithm&quot; in all material mentioning or referencing the derived work.</source>
          <target state="translated">只要在所有提及或引用衍生作品的材料中标明 &quot;源自RSA数据安全公司的MD5消息解密算法&quot;,就可获得制作和使用衍生作品的许可。在所有提到或引用派生作品的材料中,必须标明 &quot;源自RSA数据安全公司的MD5消息解密算法&quot;。</target>
        </trans-unit>
        <trans-unit id="8fb9dc902cb98efd9bae2b4a142dce7fcd9e3bb0" translate="yes" xml:space="preserve">
          <source>License to copy and use this software is granted provided that it is identified as the &quot;RSA Data Security, Inc. MD5 Message-Digest Algorithm&quot; in all material mentioning or referencing this software or this function.</source>
          <target state="translated">只要在所有提及或引用本软件或本功能的材料中标明本软件为 &quot;RSA Data Security,Inc.在所有提及或引用本软件或本功能的材料中,必须注明为 &quot;RSA数据安全公司MD5消息摘要算法&quot;,才允许复制和使用本软件。</target>
        </trans-unit>
        <trans-unit id="5924fd52bf49a8494e3d053dc865b25bbec5c6e6" translate="yes" xml:space="preserve">
          <source>Licensed under the GNU General Public License version 1 or later, or the Artistic License.</source>
          <target state="translated">授权使用GNU通用公共许可证1或更高版本,或艺术许可证。</target>
        </trans-unit>
        <trans-unit id="aa636d64869928622347b0ebd93665113e78146c" translate="yes" xml:space="preserve">
          <source>Licensing</source>
          <target state="translated">Licensing</target>
        </trans-unit>
        <trans-unit id="d5b616805cf9bfc9158dfb054c59875ea327a760" translate="yes" xml:space="preserve">
          <source>Life is not quite so transparent, however, when working with legacy encodings, I/O, and certain special cases:</source>
          <target state="translated">然而,在处理传统编码、I/O和某些特殊情况时,生活就不那么透明了。</target>
        </trans-unit>
        <trans-unit id="ab3a00d7b8ef92b4d6db8938fdc867c976af1617" translate="yes" xml:space="preserve">
          <source>Lifetime of the parent process and pseudo-processes</source>
          <target state="translated">父进程和伪进程的生命期</target>
        </trans-unit>
        <trans-unit id="cb79da38fbc832bc4294ccc8e4bcfcc8a2555134" translate="yes" xml:space="preserve">
          <source>Lightweight and lvalue version of &lt;code&gt;PAD_SV&lt;/code&gt; . Get or set the value at offset &lt;code&gt;po&lt;/code&gt; in the current pad. Unlike &lt;code&gt;PAD_SV&lt;/code&gt; , does not print diagnostics with -DX. For internal use only.</source>
          <target state="translated">&lt;code&gt;PAD_SV&lt;/code&gt; 的轻量级和左值版本。获取或设置在偏移值 &lt;code&gt;po&lt;/code&gt; 在当前垫。与 &lt;code&gt;PAD_SV&lt;/code&gt; 不同，它不使用-DX打印诊断信息。仅限内部使用。</target>
        </trans-unit>
        <trans-unit id="3fd57349d3d10bcc5e3acd29d060e929880bc515" translate="yes" xml:space="preserve">
          <source>Lightweight and lvalue version of &lt;code&gt;PAD_SV&lt;/code&gt;. Get or set the value at offset &lt;code&gt;po&lt;/code&gt; in the current pad. Unlike &lt;code&gt;PAD_SV&lt;/code&gt;, does not print diagnostics with -DX. For internal use only.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c7e02c95fe85052fcadf9745a5f1d0358088d936" translate="yes" xml:space="preserve">
          <source>Like</source>
          <target state="translated">Like</target>
        </trans-unit>
        <trans-unit id="c9df7c5b0e2428587b12f5f968c72b403b65e631" translate="yes" xml:space="preserve">
          <source>Like &quot;@*&quot;, this is a variable-width field. The value supplied must be a scalar variable. Perl puts the first line (up to the first &quot;\n&quot;) of the text into the field, and then chops off the front of the string so that the next time the variable is referenced, more of the text can be printed. The variable will</source>
          <target state="translated">和&quot;@*&quot;一样,这是一个可变宽度的字段。提供的值必须是一个标量变量。Perl会将文本的第一行(直到第一个&quot;\n&quot;)放入字段中,然后将字符串的前面切除,这样下次引用变量时,就可以打印更多的文本。变量将</target>
        </trans-unit>
        <trans-unit id="9e4b27dce39ce4f15c0298254855f383991ad517" translate="yes" xml:space="preserve">
          <source>Like &lt;a href=&quot;#-T&quot;&gt;&quot;-T&quot;&lt;/a&gt;, but taint checks will issue warnings rather than fatal errors. These warnings can now be controlled normally with &lt;code&gt;no warnings qw(taint)&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e6efdf3c36a1c3613481963e9128916b7b900006" translate="yes" xml:space="preserve">
          <source>Like &lt;a href=&quot;#__FILE__&quot;&gt;&lt;code&gt;__FILE__&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#__LINE__&quot;&gt;&lt;code&gt;__LINE__&lt;/code&gt;&lt;/a&gt;, the filename and line number returned here may be altered by the mechanism described at &lt;a href=&quot;perlsyn#Plain-Old-Comments-%28Not%21%29&quot;&gt;&quot;Plain Old Comments (Not!)&quot; in perlsyn&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1f94085fda091b1e0d2fbb00f475b7933a977348" translate="yes" xml:space="preserve">
          <source>Like &lt;a href=&quot;#charinfo%28%29&quot;&gt;&quot;charinfo()&quot;&lt;/a&gt;, the result may be an intermediate decomposition whose components are also decomposable. Use &lt;a href=&quot;Unicode::Normalize&quot;&gt;Unicode::Normalize&lt;/a&gt; to get the final decomposition in one step.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c138d511965d3d204a9ae2bc98753a226047b504" translate="yes" xml:space="preserve">
          <source>Like &lt;a href=&quot;#charinfo()&quot;&gt;charinfo()&lt;/a&gt;, the result may be an intermediate decomposition whose components are also decomposable. Use &lt;a href=&quot;normalize&quot;&gt;Unicode::Normalize&lt;/a&gt; to get the final decomposition in one step.</source>
          <target state="translated">像&lt;a href=&quot;#charinfo()&quot;&gt;charinfo（）一样&lt;/a&gt;，结果可能是中间分解，其成分也可分解。使用&lt;a href=&quot;normalize&quot;&gt;Unicode :: Normalize&lt;/a&gt;一步完成最终分解。</target>
        </trans-unit>
        <trans-unit id="266742b9f67b4fe1a275417eb72b7a676513b96c" translate="yes" xml:space="preserve">
          <source>Like &lt;a href=&quot;#cop_hints_fetch_pvn&quot;&gt;&quot;cop_hints_fetch_pvn&quot;&lt;/a&gt;, but takes a Perl scalar instead of a string/length pair.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="94306a359339162936c27f41ca5369637110def5" translate="yes" xml:space="preserve">
          <source>Like &lt;a href=&quot;#cop_hints_fetch_pvn&quot;&gt;&quot;cop_hints_fetch_pvn&quot;&lt;/a&gt;, but takes a literal string instead of a string/length pair, and no precomputed hash.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d5d50417de331ddcfae6353b7aa1bfeeddd25071" translate="yes" xml:space="preserve">
          <source>Like &lt;a href=&quot;#cop_hints_fetch_pvn&quot;&gt;&quot;cop_hints_fetch_pvn&quot;&lt;/a&gt;, but takes a nul-terminated string instead of a string/length pair.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3de5fd7897751225569f609d59202b32bba6024a" translate="yes" xml:space="preserve">
          <source>Like &lt;a href=&quot;#cop_hints_fetch_pvn&quot;&gt;cop_hints_fetch_pvn&lt;/a&gt;, but takes a Perl scalar instead of a string/length pair.</source>
          <target state="translated">像&lt;a href=&quot;#cop_hints_fetch_pvn&quot;&gt;cop_hints_fetch_pvn&lt;/a&gt;一样，但是使用Perl标量而不是字符串/长度对。</target>
        </trans-unit>
        <trans-unit id="9e492b6f65de514837e38acf884d2920be6c9c8e" translate="yes" xml:space="preserve">
          <source>Like &lt;a href=&quot;#cop_hints_fetch_pvn&quot;&gt;cop_hints_fetch_pvn&lt;/a&gt;, but takes a literal string instead of a string/length pair, and no precomputed hash.</source>
          <target state="translated">像&lt;a href=&quot;#cop_hints_fetch_pvn&quot;&gt;cop_hints_fetch_pvn&lt;/a&gt;一样，但是使用文字字符串而不是字符串/长度对，并且没有预先计算的哈希。</target>
        </trans-unit>
        <trans-unit id="2de1e66c1756b6fab3c6fdb05cde4f4f25568233" translate="yes" xml:space="preserve">
          <source>Like &lt;a href=&quot;#cop_hints_fetch_pvn&quot;&gt;cop_hints_fetch_pvn&lt;/a&gt;, but takes a nul-terminated string instead of a string/length pair.</source>
          <target state="translated">类似于&lt;a href=&quot;#cop_hints_fetch_pvn&quot;&gt;cop_hints_fetch_pvn&lt;/a&gt;，但是采用以nul结尾的字符串，而不是字符串/长度对。</target>
        </trans-unit>
        <trans-unit id="4a253dd8613cfeb35cd85cfbea8043b7c360540b" translate="yes" xml:space="preserve">
          <source>Like &lt;a href=&quot;#cophh_delete_pvn&quot;&gt;&quot;cophh_delete_pvn&quot;&lt;/a&gt;, but takes a Perl scalar instead of a string/length pair.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a7af63bad15b32edbd28ac2c10d2108aae562c31" translate="yes" xml:space="preserve">
          <source>Like &lt;a href=&quot;#cophh_delete_pvn&quot;&gt;&quot;cophh_delete_pvn&quot;&lt;/a&gt;, but takes a literal string instead of a string/length pair, and no precomputed hash.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9b5b198e7e3473ff35bff47623cd4e88330d3954" translate="yes" xml:space="preserve">
          <source>Like &lt;a href=&quot;#cophh_delete_pvn&quot;&gt;&quot;cophh_delete_pvn&quot;&lt;/a&gt;, but takes a nul-terminated string instead of a string/length pair.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="de93912de0e72db38bde2b8e898d77fc9dc7395b" translate="yes" xml:space="preserve">
          <source>Like &lt;a href=&quot;#cophh_delete_pvn&quot;&gt;cophh_delete_pvn&lt;/a&gt;, but takes a Perl scalar instead of a string/length pair.</source>
          <target state="translated">类似于&lt;a href=&quot;#cophh_delete_pvn&quot;&gt;cophh_delete_pvn&lt;/a&gt;，但是采用Perl标量而不是字符串/长度对。</target>
        </trans-unit>
        <trans-unit id="5f93afb3b500f705910109bc574d7e2b47ae58fd" translate="yes" xml:space="preserve">
          <source>Like &lt;a href=&quot;#cophh_delete_pvn&quot;&gt;cophh_delete_pvn&lt;/a&gt;, but takes a literal string instead of a string/length pair, and no precomputed hash.</source>
          <target state="translated">类似于&lt;a href=&quot;#cophh_delete_pvn&quot;&gt;cophh_delete_pvn&lt;/a&gt;，但是采用文字字符串而不是字符串/长度对，并且没有预先计算的哈希。</target>
        </trans-unit>
        <trans-unit id="7bc8a6b9daffa5d612ad332627c80e1cbcfc7c28" translate="yes" xml:space="preserve">
          <source>Like &lt;a href=&quot;#cophh_delete_pvn&quot;&gt;cophh_delete_pvn&lt;/a&gt;, but takes a nul-terminated string instead of a string/length pair.</source>
          <target state="translated">类似于&lt;a href=&quot;#cophh_delete_pvn&quot;&gt;cophh_delete_pvn&lt;/a&gt;，但是采用以nul结尾的字符串，而不是字符串/长度对。</target>
        </trans-unit>
        <trans-unit id="9cc1810855d64e33ce9ec26c456a64df0b593a05" translate="yes" xml:space="preserve">
          <source>Like &lt;a href=&quot;#cophh_fetch_pvn&quot;&gt;&quot;cophh_fetch_pvn&quot;&lt;/a&gt;, but takes a Perl scalar instead of a string/length pair.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2c5cc8f19c22d392b66740ab20d62583c9f0b5cc" translate="yes" xml:space="preserve">
          <source>Like &lt;a href=&quot;#cophh_fetch_pvn&quot;&gt;&quot;cophh_fetch_pvn&quot;&lt;/a&gt;, but takes a literal string instead of a string/length pair, and no precomputed hash.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3304e82e703cb693b770c7a91db4e251a771c7ab" translate="yes" xml:space="preserve">
          <source>Like &lt;a href=&quot;#cophh_fetch_pvn&quot;&gt;&quot;cophh_fetch_pvn&quot;&lt;/a&gt;, but takes a nul-terminated string instead of a string/length pair.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eaf7282f7430d0c1f55fb04bc9095993eb65be76" translate="yes" xml:space="preserve">
          <source>Like &lt;a href=&quot;#cophh_fetch_pvn&quot;&gt;cophh_fetch_pvn&lt;/a&gt;, but takes a Perl scalar instead of a string/length pair.</source>
          <target state="translated">类似于&lt;a href=&quot;#cophh_fetch_pvn&quot;&gt;cophh_fetch_pvn&lt;/a&gt;，但采用Perl标量而不是字符串/长度对。</target>
        </trans-unit>
        <trans-unit id="b5ef552d2079e488edcf076c50da8cfc2edf287e" translate="yes" xml:space="preserve">
          <source>Like &lt;a href=&quot;#cophh_fetch_pvn&quot;&gt;cophh_fetch_pvn&lt;/a&gt;, but takes a literal string instead of a string/length pair, and no precomputed hash.</source>
          <target state="translated">类似于&lt;a href=&quot;#cophh_fetch_pvn&quot;&gt;cophh_fetch_pvn&lt;/a&gt;，但是采用文字字符串而不是字符串/长度对，并且没有预先计算的哈希。</target>
        </trans-unit>
        <trans-unit id="1d820027a36b428c792671f4c8e4ee5300a7823f" translate="yes" xml:space="preserve">
          <source>Like &lt;a href=&quot;#cophh_fetch_pvn&quot;&gt;cophh_fetch_pvn&lt;/a&gt;, but takes a nul-terminated string instead of a string/length pair.</source>
          <target state="translated">类似于&lt;a href=&quot;#cophh_fetch_pvn&quot;&gt;cophh_fetch_pvn&lt;/a&gt;，但是采用以nul结尾的字符串，而不是字符串/长度对。</target>
        </trans-unit>
        <trans-unit id="d743c06e3451a81c72518baf7f72a34f8bfafe8d" translate="yes" xml:space="preserve">
          <source>Like &lt;a href=&quot;#cophh_store_pvn&quot;&gt;&quot;cophh_store_pvn&quot;&lt;/a&gt;, but takes a Perl scalar instead of a string/length pair.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2b3d816bbaf79a909295b456cf4eb6930c147304" translate="yes" xml:space="preserve">
          <source>Like &lt;a href=&quot;#cophh_store_pvn&quot;&gt;&quot;cophh_store_pvn&quot;&lt;/a&gt;, but takes a literal string instead of a string/length pair, and no precomputed hash.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4b0b3ccbd7b43691247d71e63bb360cc3249f86a" translate="yes" xml:space="preserve">
          <source>Like &lt;a href=&quot;#cophh_store_pvn&quot;&gt;&quot;cophh_store_pvn&quot;&lt;/a&gt;, but takes a nul-terminated string instead of a string/length pair.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="73c1cef4e16a8379b39bb25b20396ecc27808f0b" translate="yes" xml:space="preserve">
          <source>Like &lt;a href=&quot;#cophh_store_pvn&quot;&gt;cophh_store_pvn&lt;/a&gt;, but takes a Perl scalar instead of a string/length pair.</source>
          <target state="translated">类似于&lt;a href=&quot;#cophh_store_pvn&quot;&gt;cophh_store_pvn&lt;/a&gt;，但是采用Perl标量而不是字符串/长度对。</target>
        </trans-unit>
        <trans-unit id="f8b72f1ae998c27a3bc7952f2e79a7833ed58822" translate="yes" xml:space="preserve">
          <source>Like &lt;a href=&quot;#cophh_store_pvn&quot;&gt;cophh_store_pvn&lt;/a&gt;, but takes a literal string instead of a string/length pair, and no precomputed hash.</source>
          <target state="translated">类似于&lt;a href=&quot;#cophh_store_pvn&quot;&gt;cophh_store_pvn&lt;/a&gt;，但采用文字字符串而不是字符串/长度对，并且没有预先计算的哈希。</target>
        </trans-unit>
        <trans-unit id="3d6eb33ec672f221ab14ac8aaae5ee9923295a95" translate="yes" xml:space="preserve">
          <source>Like &lt;a href=&quot;#cophh_store_pvn&quot;&gt;cophh_store_pvn&lt;/a&gt;, but takes a nul-terminated string instead of a string/length pair.</source>
          <target state="translated">类似于&lt;a href=&quot;#cophh_store_pvn&quot;&gt;cophh_store_pvn&lt;/a&gt;，但是采用以nul结尾的字符串，而不是字符串/长度对。</target>
        </trans-unit>
        <trans-unit id="58ca9ffe0ac8e2dd6af7ebd2c0acbcec2c0d7145" translate="yes" xml:space="preserve">
          <source>Like &lt;a href=&quot;#exec-LIST&quot;&gt;&lt;code&gt;exec&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#system-LIST&quot;&gt;&lt;code&gt;system&lt;/code&gt;&lt;/a&gt; allows you to lie to a program about its name if you use the &lt;code&gt;system PROGRAM LIST&lt;/code&gt; syntax. Again, see &lt;a href=&quot;#exec-LIST&quot;&gt;&lt;code&gt;exec&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ada44e107259fa024a8f358c79e51c738af229c1" translate="yes" xml:space="preserve">
          <source>Like &lt;a href=&quot;#gv_fetchmeth_pvn&quot;&gt;&quot;gv_fetchmeth_pvn&quot;&lt;/a&gt;, but lacks a flags parameter.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="54abf6089eca44394b7d1690bb3d38c0b82d3b35" translate="yes" xml:space="preserve">
          <source>Like &lt;a href=&quot;#gv_fetchmeth_pvn&quot;&gt;gv_fetchmeth_pvn&lt;/a&gt;, but lacks a flags parameter.</source>
          <target state="translated">类似于&lt;a href=&quot;#gv_fetchmeth_pvn&quot;&gt;gv_fetchmeth_pvn&lt;/a&gt;，但是缺少flags参数。</target>
        </trans-unit>
        <trans-unit id="9d0651cf67afe661baee2be32bf57a134f79be82" translate="yes" xml:space="preserve">
          <source>Like &lt;a href=&quot;#is_utf8_string&quot;&gt;is_utf8_string&lt;/a&gt; but stores the location of the failure (in the case of &quot;utf8ness failure&quot;) or the location &lt;code&gt;&lt;a href=&quot;functions/s&quot;&gt;s&lt;/a&gt;&lt;/code&gt;+&lt;code&gt;len&lt;/code&gt; (in the case of &quot;utf8ness success&quot;) in the &lt;code&gt;ep&lt;/code&gt; .</source>
          <target state="translated">像&lt;a href=&quot;#is_utf8_string&quot;&gt;is_utf8_string&lt;/a&gt;但存储故障的位置（在&amp;ldquo;utf8ness失败&amp;rdquo;的情况下）或位置 &lt;code&gt;&lt;a href=&quot;functions/s&quot;&gt;s&lt;/a&gt;&lt;/code&gt; + &lt;code&gt;len&lt;/code&gt; （在&amp;ldquo;utf8ness成功&amp;rdquo;的情况下）的 &lt;code&gt;ep&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="4826c3546aa34ea2d0524b77459a729065bbf15b" translate="yes" xml:space="preserve">
          <source>Like &lt;a href=&quot;#is_utf8_string&quot;&gt;is_utf8_string&lt;/a&gt;() but stores the location of the failure (in the case of &quot;utf8ness failure&quot;) or the location &lt;code&gt;&lt;a href=&quot;functions/s&quot;&gt;s&lt;/a&gt;&lt;/code&gt;+&lt;code&gt;len&lt;/code&gt; (in the case of &quot;utf8ness success&quot;) in the &lt;code&gt;ep&lt;/code&gt; , and the number of UTF-8 encoded characters in the &lt;code&gt;el&lt;/code&gt; .</source>
          <target state="translated">像&lt;a href=&quot;#is_utf8_string&quot;&gt;is_utf8_string&lt;/a&gt;（），但存储的故障发生位置（在&amp;ldquo;utf8ness失败&amp;rdquo;的情况下）或位置的 &lt;code&gt;&lt;a href=&quot;functions/s&quot;&gt;s&lt;/a&gt;&lt;/code&gt; + &lt;code&gt;len&lt;/code&gt; （在&amp;ldquo;utf8ness成功&amp;rdquo;的情况下）在 &lt;code&gt;ep&lt;/code&gt; ，和UTF-8编码的字符的数目在 &lt;code&gt;el&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="dc4004ca168e21bab8a364acb13202ffa9c080d1" translate="yes" xml:space="preserve">
          <source>Like &lt;a href=&quot;#lex_stuff_pvn&quot;&gt;&quot;lex_stuff_pvn&quot;&lt;/a&gt;, but takes a literal string instead of a string/length pair.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3df9351141888ffdcb4847144fedfdb9527ae3f1" translate="yes" xml:space="preserve">
          <source>Like &lt;a href=&quot;#lex_stuff_pvn&quot;&gt;lex_stuff_pvn&lt;/a&gt;, but takes a literal string instead of a string/length pair.</source>
          <target state="translated">类似于&lt;a href=&quot;#lex_stuff_pvn&quot;&gt;lex_stuff_pvn&lt;/a&gt;，但采用文字字符串而不是字符串/长度对。</target>
        </trans-unit>
        <trans-unit id="84cb2c197de2f7ed274dcc28b904a10591e12927" translate="yes" xml:space="preserve">
          <source>Like &lt;a href=&quot;#memEQ&quot;&gt;&quot;memEQ&quot;&lt;/a&gt;, but the second string is a literal enclosed in double quotes, &lt;code&gt;l1&lt;/code&gt; gives the number of bytes in &lt;code&gt;s1&lt;/code&gt;. Returns zero if equal, or non-zero if non-equal.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3235e7d6c4a5e5829587587808c18e328cb540d6" translate="yes" xml:space="preserve">
          <source>Like &lt;a href=&quot;#memNE&quot;&gt;&quot;memNE&quot;&lt;/a&gt;, but the second string is a literal enclosed in double quotes, &lt;code&gt;l1&lt;/code&gt; gives the number of bytes in &lt;code&gt;s1&lt;/code&gt;. Returns zero if non-equal, or zero if non-equal.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8418e841d048f747af15fb53b44957357d83e046" translate="yes" xml:space="preserve">
          <source>Like &lt;a href=&quot;#nextafter&quot;&gt;&quot;nextafter&quot;&lt;/a&gt;, but potentially more accurate.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="855a9fc9268cf7c56dbfa870587e398be59edc5f" translate="yes" xml:space="preserve">
          <source>Like &lt;a href=&quot;#nextafter&quot;&gt;nextafter&lt;/a&gt;, but potentially more accurate.</source>
          <target state="translated">类似于&lt;a href=&quot;#nextafter&quot;&gt;nextafter&lt;/a&gt;，但可能更准确。</target>
        </trans-unit>
        <trans-unit id="0b2228c60a5736c212cccec834eca9e330073dae" translate="yes" xml:space="preserve">
          <source>Like &lt;a href=&quot;#nexttoward&quot;&gt;&quot;nexttoward&quot;&lt;/a&gt;, but potentially less accurate.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c3abb505c749731ad1d3986f391df84d9a744972" translate="yes" xml:space="preserve">
          <source>Like &lt;a href=&quot;#nexttoward&quot;&gt;nexttoward&lt;/a&gt;, but potentially less accurate.</source>
          <target state="translated">类似于&lt;a href=&quot;#nexttoward&quot;&gt;nexttoward&lt;/a&gt;，但准确性可能较低。</target>
        </trans-unit>
        <trans-unit id="014996f423e4b3ba0964db2cda0c7b80baa25ee8" translate="yes" xml:space="preserve">
          <source>Like &lt;a href=&quot;#refcounted_he_fetch_pvn&quot;&gt;&quot;refcounted_he_fetch_pvn&quot;&lt;/a&gt;, but takes a Perl scalar instead of a string/length pair.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e6d8988dd3bbcc7667d93d474b90133547c697bf" translate="yes" xml:space="preserve">
          <source>Like &lt;a href=&quot;#refcounted_he_fetch_pvn&quot;&gt;&quot;refcounted_he_fetch_pvn&quot;&lt;/a&gt;, but takes a literal string instead of a string/length pair, and no precomputed hash.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e9b66ec47b251b957cd7b2fb7f4d9c455c7a47ef" translate="yes" xml:space="preserve">
          <source>Like &lt;a href=&quot;#refcounted_he_fetch_pvn&quot;&gt;&quot;refcounted_he_fetch_pvn&quot;&lt;/a&gt;, but takes a nul-terminated string instead of a string/length pair.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="724b06f3c6974466e0dcb566dbe47f6fad84aa5a" translate="yes" xml:space="preserve">
          <source>Like &lt;a href=&quot;#refcounted_he_fetch_pvn&quot;&gt;refcounted_he_fetch_pvn&lt;/a&gt;, but takes a Perl scalar instead of a string/length pair.</source>
          <target state="translated">像&lt;a href=&quot;#refcounted_he_fetch_pvn&quot;&gt;refcounted_he_fetch_pvn&lt;/a&gt;一样，但是使用Perl标量而不是字符串/长度对。</target>
        </trans-unit>
        <trans-unit id="23a489d2aec93a2d851cb278177881615d6f059f" translate="yes" xml:space="preserve">
          <source>Like &lt;a href=&quot;#refcounted_he_fetch_pvn&quot;&gt;refcounted_he_fetch_pvn&lt;/a&gt;, but takes a literal string instead of a string/length pair, and no precomputed hash.</source>
          <target state="translated">像&lt;a href=&quot;#refcounted_he_fetch_pvn&quot;&gt;refcounted_he_fetch_pvn&lt;/a&gt;一样，但是采用文字字符串而不是字符串/长度对，并且没有预先计算的哈希。</target>
        </trans-unit>
        <trans-unit id="401a90792585ceca6e1448d38f3a439e9e9ccb83" translate="yes" xml:space="preserve">
          <source>Like &lt;a href=&quot;#refcounted_he_fetch_pvn&quot;&gt;refcounted_he_fetch_pvn&lt;/a&gt;, but takes a nul-terminated string instead of a string/length pair.</source>
          <target state="translated">像&lt;a href=&quot;#refcounted_he_fetch_pvn&quot;&gt;refcounted_he_fetch_pvn&lt;/a&gt;一样，但是采用以nul结尾的字符串，而不是字符串/长度对。</target>
        </trans-unit>
        <trans-unit id="d7b205ac37d25afe008f83aeca2addd7bbdc67d3" translate="yes" xml:space="preserve">
          <source>Like &lt;a href=&quot;#refcounted_he_new_pvn&quot;&gt;&quot;refcounted_he_new_pvn&quot;&lt;/a&gt;, but takes a Perl scalar instead of a string/length pair.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fbf2aa2fcc789bbf185be046592fbdbb502d45ba" translate="yes" xml:space="preserve">
          <source>Like &lt;a href=&quot;#refcounted_he_new_pvn&quot;&gt;&quot;refcounted_he_new_pvn&quot;&lt;/a&gt;, but takes a literal string instead of a string/length pair, and no precomputed hash.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5349abc807ca4a5e1b628b9c96aba7c6b34dcba3" translate="yes" xml:space="preserve">
          <source>Like &lt;a href=&quot;#refcounted_he_new_pvn&quot;&gt;&quot;refcounted_he_new_pvn&quot;&lt;/a&gt;, but takes a nul-terminated string instead of a string/length pair.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="046451b0d57dcef450722c52bfda2597acd52bb7" translate="yes" xml:space="preserve">
          <source>Like &lt;a href=&quot;#refcounted_he_new_pvn&quot;&gt;refcounted_he_new_pvn&lt;/a&gt;, but takes a Perl scalar instead of a string/length pair.</source>
          <target state="translated">类似于&lt;a href=&quot;#refcounted_he_new_pvn&quot;&gt;refcounted_he_new_pvn&lt;/a&gt;，但采用Perl标量而不是字符串/长度对。</target>
        </trans-unit>
        <trans-unit id="6a998ebee49893ba076a8800f452b0183aae9a49" translate="yes" xml:space="preserve">
          <source>Like &lt;a href=&quot;#refcounted_he_new_pvn&quot;&gt;refcounted_he_new_pvn&lt;/a&gt;, but takes a literal string instead of a string/length pair, and no precomputed hash.</source>
          <target state="translated">像&lt;a href=&quot;#refcounted_he_new_pvn&quot;&gt;refcounted_he_new_pvn&lt;/a&gt;一样，但是使用文字字符串而不是字符串/长度对，并且没有预先计算的哈希。</target>
        </trans-unit>
        <trans-unit id="65d696e7d641f983cc3e14984e6670f40737f36e" translate="yes" xml:space="preserve">
          <source>Like &lt;a href=&quot;#refcounted_he_new_pvn&quot;&gt;refcounted_he_new_pvn&lt;/a&gt;, but takes a nul-terminated string instead of a string/length pair.</source>
          <target state="translated">像&lt;a href=&quot;#refcounted_he_new_pvn&quot;&gt;refcounted_he_new_pvn&lt;/a&gt;一样，但是使用以nul结尾的字符串而不是字符串/长度对。</target>
        </trans-unit>
        <trans-unit id="8ee6b83a5c63efaa127609c27748de883a7f6ea1" translate="yes" xml:space="preserve">
          <source>Like &lt;a href=&quot;#remainder&quot;&gt;&quot;remainder&quot;&lt;/a&gt; but also returns the low-order bits of the quotient (n) [C99]</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a963885aaf0f61482fbaede4f9fc78877a13624a" translate="yes" xml:space="preserve">
          <source>Like &lt;a href=&quot;#remainder&quot;&gt;remainder&lt;/a&gt; but also returns the low-order bits of the quotient (n) [C99]</source>
          <target state="translated">与&lt;a href=&quot;#remainder&quot;&gt;余数&lt;/a&gt;类似，但也返回商（n）的低位[C99]</target>
        </trans-unit>
        <trans-unit id="684022cdfa09a338010e59568f2b520d497d9055" translate="yes" xml:space="preserve">
          <source>Like &lt;a href=&quot;#round&quot;&gt;&quot;round&quot;&lt;/a&gt;, but as integer, as opposed to floating point [C99].</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b5282dab906515d5042c87772d3d7af38dc7d497" translate="yes" xml:space="preserve">
          <source>Like &lt;a href=&quot;#round&quot;&gt;round&lt;/a&gt;, but as integer, as opposed to floating point [C99].</source>
          <target state="translated">类似于&lt;a href=&quot;#round&quot;&gt;round&lt;/a&gt;，但是作为整数，而不是浮点数[C99]。</target>
        </trans-unit>
        <trans-unit id="5ca6b661daea1fb2637dc5c26cdc951e025782cb" translate="yes" xml:space="preserve">
          <source>Like &lt;a href=&quot;#setpayload&quot;&gt;&quot;setpayload&quot;&lt;/a&gt; but also makes the NaN</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="13069e76221341c8aade28e20a2776be321b753c" translate="yes" xml:space="preserve">
          <source>Like &lt;a href=&quot;#strtod&quot;&gt;&quot;strtod&quot;&lt;/a&gt; but for long doubles. Defined only if the system supports long doubles.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a05cbd07aa430b94f88ef1127d9cc3feb4a35b92" translate="yes" xml:space="preserve">
          <source>Like &lt;a href=&quot;#strtod&quot;&gt;strtod&lt;/a&gt; but for long doubles. Defined only if the system supports long doubles.</source>
          <target state="translated">像&lt;a href=&quot;#strtod&quot;&gt;strtod&lt;/a&gt;一样，但是长双打。仅在系统支持长双打时定义。</target>
        </trans-unit>
        <trans-unit id="e5d85e8e0de6544839fe7d3c4073f5a3d09bc76d" translate="yes" xml:space="preserve">
          <source>Like &lt;a href=&quot;#sv_does_pv&quot;&gt;&quot;sv_does_pv&quot;&lt;/a&gt;, but doesn't take a &lt;code&gt;flags&lt;/code&gt; parameter.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="07f5fd00ec8eac8e99d9f1474911e3920a009bb9" translate="yes" xml:space="preserve">
          <source>Like &lt;a href=&quot;#sv_does_pv&quot;&gt;sv_does_pv&lt;/a&gt;, but doesn't take a &lt;code&gt;flags&lt;/code&gt; parameter.</source>
          <target state="translated">类似于&lt;a href=&quot;#sv_does_pv&quot;&gt;sv_does_pv&lt;/a&gt;，但不带有 &lt;code&gt;flags&lt;/code&gt; 参数。</target>
        </trans-unit>
        <trans-unit id="5ff8c36e121f1fd60e63b43a1210b091d9a7c4d4" translate="yes" xml:space="preserve">
          <source>Like &lt;a href=&quot;#sv_does_sv&quot;&gt;&quot;sv_does_sv&quot;&lt;/a&gt;, but takes a nul-terminated string instead of an SV.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a4661a4afd9ad32e2ec4db3ef6fa0574da2c1a43" translate="yes" xml:space="preserve">
          <source>Like &lt;a href=&quot;#sv_does_sv&quot;&gt;&quot;sv_does_sv&quot;&lt;/a&gt;, but takes a string/length pair instead of an SV.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ad65fa317ddd80710d2963974312eb533dd0432b" translate="yes" xml:space="preserve">
          <source>Like &lt;a href=&quot;#sv_does_sv&quot;&gt;sv_does_sv&lt;/a&gt;, but takes a nul-terminated string instead of an SV.</source>
          <target state="translated">类似于&lt;a href=&quot;#sv_does_sv&quot;&gt;sv_does_sv&lt;/a&gt;，但是采用以nul终止的字符串而不是SV。</target>
        </trans-unit>
        <trans-unit id="aa34ede2432b39dab6d8a29f4520f696d8b17636" translate="yes" xml:space="preserve">
          <source>Like &lt;a href=&quot;#sv_does_sv&quot;&gt;sv_does_sv&lt;/a&gt;, but takes a string/length pair instead of an SV.</source>
          <target state="translated">类似于&lt;a href=&quot;#sv_does_sv&quot;&gt;sv_does_sv&lt;/a&gt;，但是采用字符串/长度对而不是SV。</target>
        </trans-unit>
        <trans-unit id="8055d83feddf7b95aa6c67e74cf6d04e1a0e5710" translate="yes" xml:space="preserve">
          <source>Like &lt;a href=&quot;Test::More&quot;&gt;Test::More&lt;/a&gt;'s &lt;code&gt;isnt()&lt;/code&gt;. Checks if &lt;code&gt;$got ne $dont_expect&lt;/code&gt;. This is the numeric version.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3b51c5f83e0f401b76b918dc53d982582a6c6707" translate="yes" xml:space="preserve">
          <source>Like &lt;a href=&quot;Test::More&quot;&gt;Test::More&lt;/a&gt;'s &lt;code&gt;isnt()&lt;/code&gt;. Checks if &lt;code&gt;$got ne $dont_expect&lt;/code&gt;. This is the string version.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5d0b144d9f1c5c01a2bcc227e28eeb2d1477818c" translate="yes" xml:space="preserve">
          <source>Like &lt;a href=&quot;Test::More&quot;&gt;Test::More&lt;/a&gt;'s &lt;code&gt;like()&lt;/code&gt;. Checks if $thing matches the given &lt;code&gt;$regex&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="499b3623d431ec18655cbbc9fbf8897411d047d8" translate="yes" xml:space="preserve">
          <source>Like &lt;a href=&quot;Test::More&quot;&gt;Test::More&lt;/a&gt;'s &lt;code&gt;unlike()&lt;/code&gt;. Checks if $thing &lt;b&gt;does not match&lt;/b&gt; the given &lt;code&gt;$regex&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0270db3e4b83c7917acde896050328f249d7140a" translate="yes" xml:space="preserve">
          <source>Like &lt;a href=&quot;more&quot;&gt;Test::More&lt;/a&gt;'s &lt;code&gt;isnt()&lt;/code&gt; . Checks if &lt;code&gt;$got ne $dont_expect&lt;/code&gt; . This is the numeric version.</source>
          <target state="translated">像&lt;a href=&quot;more&quot;&gt;Test :: More&lt;/a&gt;的 &lt;code&gt;isnt()&lt;/code&gt; 一样。检查 &lt;code&gt;$got ne $dont_expect&lt;/code&gt; 。这是数字版本。</target>
        </trans-unit>
        <trans-unit id="a5f74c54ee73f3446f105290901ca9cf61ea643a" translate="yes" xml:space="preserve">
          <source>Like &lt;a href=&quot;more&quot;&gt;Test::More&lt;/a&gt;'s &lt;code&gt;isnt()&lt;/code&gt; . Checks if &lt;code&gt;$got ne $dont_expect&lt;/code&gt; . This is the string version.</source>
          <target state="translated">像&lt;a href=&quot;more&quot;&gt;Test :: More&lt;/a&gt;的 &lt;code&gt;isnt()&lt;/code&gt; 一样。检查 &lt;code&gt;$got ne $dont_expect&lt;/code&gt; 。这是字符串版本。</target>
        </trans-unit>
        <trans-unit id="9693737cd3c58d515bd81ab55ef59b90671ceaba" translate="yes" xml:space="preserve">
          <source>Like &lt;a href=&quot;more&quot;&gt;Test::More&lt;/a&gt;'s &lt;code&gt;like()&lt;/code&gt; . Checks if $thing matches the given &lt;code&gt;$regex&lt;/code&gt; .</source>
          <target state="translated">像&lt;a href=&quot;more&quot;&gt;Test :: More&lt;/a&gt;的 &lt;code&gt;like()&lt;/code&gt; 。检查$ thing是否匹配给定的 &lt;code&gt;$regex&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="348be5230ca4cb8628d5a3ede0642c968809d567" translate="yes" xml:space="preserve">
          <source>Like &lt;a href=&quot;more&quot;&gt;Test::More&lt;/a&gt;'s &lt;code&gt;unlike()&lt;/code&gt; . Checks if $thing &lt;b&gt;does not match&lt;/b&gt; the given &lt;code&gt;$regex&lt;/code&gt; .</source>
          <target state="translated">像&lt;a href=&quot;more&quot;&gt;Test :: More&lt;/a&gt;的 &lt;code&gt;unlike()&lt;/code&gt; 。检查$ thing &lt;b&gt;是否与&lt;/b&gt;给定的 &lt;code&gt;$regex&lt;/code&gt; &lt;b&gt;不匹配&lt;/b&gt;。</target>
        </trans-unit>
        <trans-unit id="75959408f273f7b39d4c26886da9ddb8ba9ee269" translate="yes" xml:space="preserve">
          <source>Like &lt;b&gt;-T&lt;/b&gt;, but taint checks will issue warnings rather than fatal errors. These warnings can now be controlled normally with &lt;code&gt;&lt;a href=&quot;functions/no&quot;&gt;no&lt;/a&gt; warnings
qw(taint)&lt;/code&gt; .</source>
          <target state="translated">与&lt;b&gt;-T&lt;/b&gt;相似，但污点检查将发出警告，而不是致命错误。现在可以正常地控制这些警告，而 &lt;code&gt;&lt;a href=&quot;functions/no&quot;&gt;no&lt;/a&gt; warnings qw(taint)&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="19d3972f6bfa689ac944e15f05e77cbb13096271" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;&quot;extract_delimited&quot;&lt;/code&gt; , the &lt;code&gt;extract_bracketed&lt;/code&gt; function takes up to three optional scalar arguments: a string to extract from, a delimiter specifier, and a prefix pattern. As before, a missing prefix defaults to optional whitespace and a missing text defaults to &lt;code&gt;$_&lt;/code&gt; . However, a missing delimiter specifier defaults to &lt;code&gt;'{}()[]&amp;lt;&amp;gt;'&lt;/code&gt; (see below).</source>
          <target state="translated">类似于 &lt;code&gt;&quot;extract_delimited&quot;&lt;/code&gt; ， &lt;code&gt;extract_bracketed&lt;/code&gt; 函数最多包含三个可选的标量参数：要从中提取的字符串，定界符说明符和前缀模式。和以前一样，缺少的前缀默认为可选的空格，缺少的文本默认为 &lt;code&gt;$_&lt;/code&gt; 。但是，缺少的分隔符说明符默认为 &lt;code&gt;'{}()[]&amp;lt;&amp;gt;'&lt;/code&gt; （请参见下文）。</target>
        </trans-unit>
        <trans-unit id="8d7efc2799c6c0aeefd629283955bc733e276d0d" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;&quot;extract_delimited&quot;&lt;/code&gt;, the &lt;code&gt;extract_bracketed&lt;/code&gt; function takes up to three optional scalar arguments: a string to extract from, a delimiter specifier, and a prefix pattern. As before, a missing prefix defaults to optional whitespace and a missing text defaults to &lt;code&gt;$_&lt;/code&gt;. However, a missing delimiter specifier defaults to &lt;code&gt;'{}()[]&amp;lt;&amp;gt;'&lt;/code&gt; (see below).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a8638e9c741c1e67ac1a4fb8957038d6a39847eb" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;:i&lt;/code&gt; , but if the value is omitted, the</source>
          <target state="translated">类似于 &lt;code&gt;:i&lt;/code&gt; ，但是如果省略该值，则</target>
        </trans-unit>
        <trans-unit id="6c3eb9fc5ff253146a577da27d5894ba1dc92861" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;:i&lt;/code&gt; , but if the value is omitted, the current value for the option will be incremented.</source>
          <target state="translated">类似于 &lt;code&gt;:i&lt;/code&gt; ，但是如果省略该值，则该选项的当前值将增加。</target>
        </trans-unit>
        <trans-unit id="e917fcd099f7bf9447127b4c6b34e7b279996d9c" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;:i&lt;/code&gt;, but if the value is omitted, the</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7f9edf6df4e0a9dec710ce6226ae54af4b423720" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;:i&lt;/code&gt;, but if the value is omitted, the current value for the option will be incremented.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a72498a7bf2cc1e79678e63ab406b0c7a1e1f22d" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;&lt;a href=&quot;#ckWARN&quot;&gt;&quot;ckWARN&quot;&lt;/a&gt;&lt;/code&gt;, but for use if and only if the warning category is by default enabled even if not within the scope of &lt;code&gt;use warnings&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="07e4e8837fe47e35448f28c70d5f0b43b109c2e8" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;&lt;a href=&quot;#ckWARN&quot;&gt;&quot;ckWARN&quot;&lt;/a&gt;&lt;/code&gt;, but takes two warnings categories as input, and returns TRUE if either is enabled. If either category is by default enabled even if not within the scope of &lt;code&gt;use warnings&lt;/code&gt;, instead use the &lt;a href=&quot;#ckWARN2_d&quot;&gt;&quot;ckWARN2_d&quot;&lt;/a&gt; macro. The categories must be completely independent, one may not be subclassed from the other.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="419e26b6ee286b6d83d0487c5a57940285a7f404" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;&lt;a href=&quot;#ckWARN2&quot;&gt;&quot;ckWARN2&quot;&lt;/a&gt;&lt;/code&gt;, but for use if and only if either warning category is by default enabled even if not within the scope of &lt;code&gt;use warnings&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4a0b75aa92dfd27a10af7448f298956a33a06201" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;&lt;a href=&quot;#ckWARN2&quot;&gt;&quot;ckWARN2&quot;&lt;/a&gt;&lt;/code&gt;, but takes three warnings categories as input, and returns TRUE if any is enabled. If any of the categories is by default enabled even if not within the scope of &lt;code&gt;use warnings&lt;/code&gt;, instead use the &lt;a href=&quot;#ckWARN3_d&quot;&gt;&quot;ckWARN3_d&quot;&lt;/a&gt; macro. The categories must be completely independent, one may not be subclassed from any other.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4f2f4ea75511cd5867b17de10a3c9cc97f03000e" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;&lt;a href=&quot;#ckWARN3&quot;&gt;&quot;ckWARN3&quot;&lt;/a&gt;&lt;/code&gt;, but for use if and only if any of the warning categories is by default enabled even if not within the scope of &lt;code&gt;use warnings&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ea073c6d4d2f3be717fe763a8236d2fa3983dd14" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;&lt;a href=&quot;#ckWARN3&quot;&gt;&quot;ckWARN3&quot;&lt;/a&gt;&lt;/code&gt;, but takes four warnings categories as input, and returns TRUE if any is enabled. If any of the categories is by default enabled even if not within the scope of &lt;code&gt;use warnings&lt;/code&gt;, instead use the &lt;a href=&quot;#ckWARN4_d&quot;&gt;&quot;ckWARN4_d&quot;&lt;/a&gt; macro. The categories must be completely independent, one may not be subclassed from any other.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b2c7a6a2e8726ab7252364cc04fd4ea666ebc8c9" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;&lt;a href=&quot;#ckWARN4&quot;&gt;&quot;ckWARN4&quot;&lt;/a&gt;&lt;/code&gt;, but for use if and only if any of the warning categories is by default enabled even if not within the scope of &lt;code&gt;use warnings&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2e6b184b57730c77a791a10594697539485e24b0" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;&lt;a href=&quot;#is_c9strict_utf8_string&quot;&gt;&quot;is_c9strict_utf8_string&quot;&lt;/a&gt;&lt;/code&gt; but stores the location of the failure (in the case of &quot;utf8ness failure&quot;) or the location &lt;code&gt;s&lt;/code&gt;+&lt;code&gt;len&lt;/code&gt; (in the case of &quot;utf8ness success&quot;) in the &lt;code&gt;ep&lt;/code&gt; pointer, and the number of UTF-8 encoded characters in the &lt;code&gt;el&lt;/code&gt; pointer.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1d139eda757264428ce8d6faad0998e0c3769736" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;&lt;a href=&quot;#is_c9strict_utf8_string&quot;&gt;&quot;is_c9strict_utf8_string&quot;&lt;/a&gt;&lt;/code&gt; but stores the location of the failure (in the case of &quot;utf8ness failure&quot;) or the location &lt;code&gt;s&lt;/code&gt;+&lt;code&gt;len&lt;/code&gt; (in the case of &quot;utf8ness success&quot;) in the &lt;code&gt;ep&lt;/code&gt; pointer.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5271b223e0f3ecc184afda4eb4579d5e8c1de58c" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;&lt;a href=&quot;#is_strict_utf8_string&quot;&gt;&quot;is_strict_utf8_string&quot;&lt;/a&gt;&lt;/code&gt; but stores the location of the failure (in the case of &quot;utf8ness failure&quot;) or the location &lt;code&gt;s&lt;/code&gt;+&lt;code&gt;len&lt;/code&gt; (in the case of &quot;utf8ness success&quot;) in the &lt;code&gt;ep&lt;/code&gt; pointer, and the number of UTF-8 encoded characters in the &lt;code&gt;el&lt;/code&gt; pointer.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c6cbb5f193b52a523e82c581210653da96c02968" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;&lt;a href=&quot;#is_strict_utf8_string&quot;&gt;&quot;is_strict_utf8_string&quot;&lt;/a&gt;&lt;/code&gt; but stores the location of the failure (in the case of &quot;utf8ness failure&quot;) or the location &lt;code&gt;s&lt;/code&gt;+&lt;code&gt;len&lt;/code&gt; (in the case of &quot;utf8ness success&quot;) in the &lt;code&gt;ep&lt;/code&gt; pointer.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d3fe020358fe6e2a30b7f3e56ff293f970a16478" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;&lt;a href=&quot;#is_utf8_fixed_width_buf_flags&quot;&gt;&quot;is_utf8_fixed_width_buf_flags&quot;&lt;/a&gt;&lt;/code&gt; but stores the location of the failure in the &lt;code&gt;ep&lt;/code&gt; pointer. If the function returns TRUE, &lt;code&gt;*ep&lt;/code&gt; will point to the beginning of any partial character at the end of the buffer; if there is no partial character &lt;code&gt;*ep&lt;/code&gt; will contain &lt;code&gt;s&lt;/code&gt;+&lt;code&gt;len&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="184619f40e2d3b96236b99f26b9009ae016b50d2" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;&lt;a href=&quot;#is_utf8_fixed_width_buf_loc_flags&quot;&gt;&quot;is_utf8_fixed_width_buf_loc_flags&quot;&lt;/a&gt;&lt;/code&gt; but stores the number of complete, valid characters found in the &lt;code&gt;el&lt;/code&gt; pointer.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7227ef07854b8cfd22e221bfeaf5dae02357c44a" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;&lt;a href=&quot;#is_utf8_invariant_string&quot;&gt;&quot;is_utf8_invariant_string&quot;&lt;/a&gt;&lt;/code&gt; but upon failure, stores the location of the first UTF-8 variant character in the &lt;code&gt;ep&lt;/code&gt; pointer; if all characters are UTF-8 invariant, this function does not change the contents of &lt;code&gt;*ep&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b86cd12bd56f8c4d5a287a0fc3cdf7a1222db664" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;&lt;a href=&quot;#is_utf8_string&quot;&gt;&quot;is_utf8_string&quot;&lt;/a&gt;&lt;/code&gt; but stores the location of the failure (in the case of &quot;utf8ness failure&quot;) or the location &lt;code&gt;s&lt;/code&gt;+&lt;code&gt;len&lt;/code&gt; (in the case of &quot;utf8ness success&quot;) in the &lt;code&gt;ep&lt;/code&gt; pointer, and the number of UTF-8 encoded characters in the &lt;code&gt;el&lt;/code&gt; pointer.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6ff1a503be987f0032effdacb189b36936341632" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;&lt;a href=&quot;#is_utf8_string&quot;&gt;&quot;is_utf8_string&quot;&lt;/a&gt;&lt;/code&gt; but stores the location of the failure (in the case of &quot;utf8ness failure&quot;) or the location &lt;code&gt;s&lt;/code&gt;+&lt;code&gt;len&lt;/code&gt; (in the case of &quot;utf8ness success&quot;) in the &lt;code&gt;ep&lt;/code&gt; pointer.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cfc892fe53ef825e8f87599d3f0987cfffdb6bdb" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;&lt;a href=&quot;#is_utf8_string_flags&quot;&gt;&quot;is_utf8_string_flags&quot;&lt;/a&gt;&lt;/code&gt; but stores the location of the failure (in the case of &quot;utf8ness failure&quot;) or the location &lt;code&gt;s&lt;/code&gt;+&lt;code&gt;len&lt;/code&gt; (in the case of &quot;utf8ness success&quot;) in the &lt;code&gt;ep&lt;/code&gt; pointer, and the number of UTF-8 encoded characters in the &lt;code&gt;el&lt;/code&gt; pointer.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6c58aaf9e5b4c34db9f382e35942b79704f88a22" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;&lt;a href=&quot;#is_utf8_string_flags&quot;&gt;&quot;is_utf8_string_flags&quot;&lt;/a&gt;&lt;/code&gt; but stores the location of the failure (in the case of &quot;utf8ness failure&quot;) or the location &lt;code&gt;s&lt;/code&gt;+&lt;code&gt;len&lt;/code&gt; (in the case of &quot;utf8ness success&quot;) in the &lt;code&gt;ep&lt;/code&gt; pointer.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bac14a2fc2052bfda8c74ae275ad47bc11891894" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;&lt;a href=&quot;#is_utf8_valid_partial_char&quot;&gt;&quot;is_utf8_valid_partial_char&quot;&lt;/a&gt;&lt;/code&gt;, it returns a boolean giving whether or not the input is a valid UTF-8 encoded partial character, but it takes an extra parameter, &lt;code&gt;flags&lt;/code&gt;, which can further restrict which code points are considered valid.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a2ae8be3d24ca6a297e15b0d7fafe2dba59e2100" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;&lt;a href=&quot;#ninstr&quot;&gt;&quot;ninstr&quot;&lt;/a&gt;&lt;/code&gt;, but instead finds the final (rightmost) occurrence of a sequence of bytes within another sequence, returning &lt;code&gt;NULL&lt;/code&gt; if there is no such occurrence.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a8ec6b1469cf896b7423c3e7e32f92d207da0b8f" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;&lt;a href=&quot;exec&quot;&gt;exec&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;system&quot;&gt;system&lt;/a&gt;&lt;/code&gt; allows you to lie to a program about its name if you use the &lt;code&gt;&lt;a href=&quot;system&quot;&gt;system&lt;/a&gt; PROGRAM LIST&lt;/code&gt; syntax. Again, see &lt;a href=&quot;exec&quot;&gt;exec&lt;/a&gt;.</source>
          <target state="translated">像 &lt;code&gt;&lt;a href=&quot;exec&quot;&gt;exec&lt;/a&gt;&lt;/code&gt; 一样，如果使用 &lt;code&gt;&lt;a href=&quot;system&quot;&gt;system&lt;/a&gt; PROGRAM LIST&lt;/code&gt; PROGRAM LIST语法， &lt;code&gt;&lt;a href=&quot;system&quot;&gt;system&lt;/a&gt;&lt;/code&gt; 允许您在程序中撒谎。再次，请参阅&lt;a href=&quot;exec&quot;&gt;exec&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="53ce9db24e9d8151cb0d5ad673fbb551695d8498" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;&lt;a href=&quot;functions/exec&quot;&gt;exec&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;functions/system&quot;&gt;system&lt;/a&gt;&lt;/code&gt; allows you to lie to a program about its name if you use the &lt;code&gt;&lt;a href=&quot;functions/system&quot;&gt;system&lt;/a&gt; PROGRAM LIST&lt;/code&gt; syntax. Again, see &lt;a href=&quot;#exec&quot;&gt;exec&lt;/a&gt;.</source>
          <target state="translated">像 &lt;code&gt;&lt;a href=&quot;functions/exec&quot;&gt;exec&lt;/a&gt;&lt;/code&gt; 一样，如果使用 &lt;code&gt;&lt;a href=&quot;functions/system&quot;&gt;system&lt;/a&gt; PROGRAM LIST&lt;/code&gt; PROGRAM LIST语法， &lt;code&gt;&lt;a href=&quot;functions/system&quot;&gt;system&lt;/a&gt;&lt;/code&gt; 允许您在程序中撒谎。再次，请参阅&lt;a href=&quot;#exec&quot;&gt;exec&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="c07f470d836169d71198d296d47952ad2947c4f8" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;&lt;a href=&quot;functions/our&quot;&gt;our&lt;/a&gt; $variable&lt;/code&gt; , &lt;code&gt;&lt;a href=&quot;functions/our&quot;&gt;our&lt;/a&gt; &lt;a href=&quot;functions/sub&quot;&gt;sub&lt;/a&gt;&lt;/code&gt; creates a lexical alias to the package subroutine of the same name.</source>
          <target state="translated">就像 &lt;code&gt;&lt;a href=&quot;functions/our&quot;&gt;our&lt;/a&gt; $variable&lt;/code&gt; ， &lt;code&gt;&lt;a href=&quot;functions/our&quot;&gt;our&lt;/a&gt; &lt;a href=&quot;functions/sub&quot;&gt;sub&lt;/a&gt;&lt;/code&gt; 创建了一个词汇别名同名的包子程序。</target>
        </trans-unit>
        <trans-unit id="71fcf0aeb3b2b8b93c5a529ba638d8c163bace8e" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;&lt;a href=&quot;perlapi#utf8_to_uvchr_buf&quot;&gt;&quot;utf8_to_uvchr_buf&quot; in perlapi&lt;/a&gt;&lt;/code&gt;, but should only be called when it is known that the next character in the input UTF-8 string &lt;code&gt;s&lt;/code&gt; is well-formed (</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e8bfeaa61a4310c58029cc704a58399ca890239c" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;=&lt;/code&gt; , but designates the argument as optional. If omitted, an empty string will be assigned to string values options, and the value zero to numeric options.</source>
          <target state="translated">像 &lt;code&gt;=&lt;/code&gt; ，但将参数指定为可选。如果省略，则将空字符串分配给字符串值选项，将零值分配给数字选项。</target>
        </trans-unit>
        <trans-unit id="4ede365bb483e8de4140eea3631854060b2e0a3c" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;=&lt;/code&gt;, but designates the argument as optional. If omitted, an empty string will be assigned to string values options, and the value zero to numeric options.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9a58c5a4f4c388955ace0d1b2c081730bec782ab" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;ARRAY&lt;/code&gt; , but takes an index as an argument to get only one element, rather than a list of all of them.</source>
          <target state="translated">类似于 &lt;code&gt;ARRAY&lt;/code&gt; ，但是将索引作为参数仅获取一个元素，而不是所有元素的列表。</target>
        </trans-unit>
        <trans-unit id="f172ba9b7b9b3d5863cfacf3230b6e0158d82632" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;ARRAY&lt;/code&gt;, but takes an index as an argument to get only one element, rather than a list of all of them.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="904d0219765a58ae524cd174247fe80e59898174" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;CLONE&lt;/code&gt; , &lt;code&gt;CLONE_SKIP&lt;/code&gt; is currently called with no parameters other than the invocant package name, although that may change. Similarly, to allow for future expansion, the return value should be a single &lt;code&gt;0&lt;/code&gt; or &lt;code&gt;1&lt;/code&gt; value.</source>
          <target state="translated">与 &lt;code&gt;CLONE&lt;/code&gt; 一样，当前调用 &lt;code&gt;CLONE_SKIP&lt;/code&gt; 的参数除了调用方程序包名称外没有其他参数，尽管可能会更改。同样，为了允许将来扩展，返回值应为单个 &lt;code&gt;0&lt;/code&gt; 或 &lt;code&gt;1&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="f940b8493916ee3f27829022bc4c4a8f402337a1" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;CLONE&lt;/code&gt;, &lt;code&gt;CLONE_SKIP&lt;/code&gt; is currently called with no parameters other than the invocant package name, although that may change. Similarly, to allow for future expansion, the return value should be a single &lt;code&gt;0&lt;/code&gt; or &lt;code&gt;1&lt;/code&gt; value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="712167b0cb1cf028d5ac0a7f89ae0f319bb50f60" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;Copy&lt;/code&gt; but returns &lt;code&gt;dest&lt;/code&gt;. Useful for encouraging compilers to tail-call optimise.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="400aa1515ac06a94cb93b93ac9f5493878616d4c" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;Copy&lt;/code&gt; but returns dest. Useful for encouraging compilers to tail-call optimise.</source>
          <target state="translated">与 &lt;code&gt;Copy&lt;/code&gt; 类似，但返回目标。有助于鼓励编译器进行优化。</target>
        </trans-unit>
        <trans-unit id="14537197538893226d82efeb48b7a358e65846d7" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;Moose&lt;/code&gt; , &lt;code&gt;Class::Accessor&lt;/code&gt; generates accessor methods and a constructor for your class.</source>
          <target state="translated">像 &lt;code&gt;Moose&lt;/code&gt; 一样， &lt;code&gt;Class::Accessor&lt;/code&gt; 为您的类生成访问器方法和构造函数。</target>
        </trans-unit>
        <trans-unit id="41aea6605b986b34eea2def3a336d7bee9c15525" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;Moose&lt;/code&gt;, &lt;code&gt;Class::Accessor&lt;/code&gt; generates accessor methods and a constructor for your class.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6c1911709504f680e61bf78568c4b6d9d06b0561" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;Move&lt;/code&gt; but returns &lt;code&gt;dest&lt;/code&gt;. Useful for encouraging compilers to tail-call optimise.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5dc10814cde731762cb07a8de6fded71423754dc" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;Move&lt;/code&gt; but returns dest. Useful for encouraging compilers to tail-call optimise.</source>
          <target state="translated">与 &lt;code&gt;Move&lt;/code&gt; 类似，但返回目标。有助于鼓励编译器进行优化。</target>
        </trans-unit>
        <trans-unit id="63bea6acc9be28a6d3cb950aea732759df8ac57d" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;SvIV&lt;/code&gt; but doesn't process magic.</source>
          <target state="translated">类似于 &lt;code&gt;SvIV&lt;/code&gt; ,但不处理魔术。</target>
        </trans-unit>
        <trans-unit id="8f72df42d4357277ebaaa7626ab2ec8434c74b44" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;SvNV&lt;/code&gt; but doesn't process magic.</source>
          <target state="translated">类似于 &lt;code&gt;SvNV&lt;/code&gt; ,但不处理魔术。</target>
        </trans-unit>
        <trans-unit id="f987f68efd96052a6b0a92226467d6e95b9160b3" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;SvPV&lt;/code&gt; , but converts sv to byte representation first if necessary.</source>
          <target state="translated">与 &lt;code&gt;SvPV&lt;/code&gt; 相似，但如有必要，请先将sv转换为字节表示形式。</target>
        </trans-unit>
        <trans-unit id="d5b21bddc458bd8cbfcd7db407bfa101b7f02dfa" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;SvPV&lt;/code&gt; , but converts sv to byte representation first if necessary. Guarantees to evaluate sv only once; use the more efficient &lt;code&gt;SvPVbyte&lt;/code&gt; otherwise.</source>
          <target state="translated">与 &lt;code&gt;SvPV&lt;/code&gt; 相似，但如有必要，请先将sv转换为字节表示形式。保证只评估一次sv；否则，请使用效率更高的 &lt;code&gt;SvPVbyte&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="020487c29dd87ab0c92e767efba3c8f41b9bfcc7" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;SvPV&lt;/code&gt; , but converts sv to utf8 first if necessary.</source>
          <target state="translated">与 &lt;code&gt;SvPV&lt;/code&gt; 相似，但如有必要，可先将sv转换为utf8。</target>
        </trans-unit>
        <trans-unit id="a5a0c092212799a2ed1d29176de9f03d368894bf" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;SvPV&lt;/code&gt; , but converts sv to utf8 first if necessary. Guarantees to evaluate sv only once; use the more efficient &lt;code&gt;SvPVutf8&lt;/code&gt; otherwise.</source>
          <target state="translated">与 &lt;code&gt;SvPV&lt;/code&gt; 相似，但如有必要，可先将sv转换为utf8。保证只评估一次sv；否则，请使用效率更高的 &lt;code&gt;SvPVutf8&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="728e33d136e3d988de2e0baba97a509be6c9c1b3" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;SvPV&lt;/code&gt; but doesn't process magic.</source>
          <target state="translated">类似于 &lt;code&gt;SvPV&lt;/code&gt; ,但不处理魔法。</target>
        </trans-unit>
        <trans-unit id="9f644bfac194a0b755578b81e47d7586566e4504" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;SvPV&lt;/code&gt; but doesn't set a length variable.</source>
          <target state="translated">类似于 &lt;code&gt;SvPV&lt;/code&gt; ，但未设置长度变量。</target>
        </trans-unit>
        <trans-unit id="153041f77422ab93c76bcbcf6550af4c15800fa0" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;SvPV&lt;/code&gt; but will force the SV into containing a string (&lt;code&gt;SvPOK&lt;/code&gt; ), and only a string (&lt;code&gt;SvPOK_only&lt;/code&gt; ), by hook or by crook. You need force if you are going to update the &lt;code&gt;SvPVX&lt;/code&gt; directly. Processes get magic.</source>
          <target state="translated">与 &lt;code&gt;SvPV&lt;/code&gt; 相似,但是将通过钩子或弯曲将SV强制包含字符串（ &lt;code&gt;SvPOK&lt;/code&gt; ）和仅字符串（ &lt;code&gt;SvPOK_only&lt;/code&gt; ）。如果要直接更新 &lt;code&gt;SvPVX&lt;/code&gt; ,则需要用力。流程变得神奇。</target>
        </trans-unit>
        <trans-unit id="d21fc8eebda239f78f40ff861ae346674bc44746" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;SvPV&lt;/code&gt; but will force the SV into containing a string (&lt;code&gt;SvPOK&lt;/code&gt;), and only a string (&lt;code&gt;SvPOK_only&lt;/code&gt;), by hook or by crook. You need force if you are going to update the &lt;code&gt;SvPVX&lt;/code&gt; directly. Processes get magic.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="349b9b0f215cc3428bdddf241602ce0c2e78c72b" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;SvPV&lt;/code&gt;, but converts &lt;code&gt;sv&lt;/code&gt; to UTF-8 first if necessary.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e94d5ef1f314f46efc3bd3d45f2affc66f0be81f" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;SvPV&lt;/code&gt;, but converts &lt;code&gt;sv&lt;/code&gt; to UTF-8 first if necessary. Guarantees to evaluate &lt;code&gt;sv&lt;/code&gt; only once; use the more efficient &lt;code&gt;SvPVutf8&lt;/code&gt; otherwise.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="826e9ea9cb83ae3e7f9096a1ec17389c37388921" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;SvPV&lt;/code&gt;, but converts &lt;code&gt;sv&lt;/code&gt; to byte representation first if necessary. Guarantees to evaluate &lt;code&gt;sv&lt;/code&gt; only once; use the more efficient &lt;code&gt;SvPVbyte&lt;/code&gt; otherwise. If the SV cannot be downgraded from UTF-8, this croaks.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="141f76de6b791c79da422cfe3133860c38f0a7b0" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;SvPV&lt;/code&gt;, but converts &lt;code&gt;sv&lt;/code&gt; to byte representation first if necessary. If the SV cannot be downgraded from UTF-8, this croaks.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d303190c56047f26fce52e3043032426e788042e" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;SvPV_force&lt;/code&gt; , but converts sv to byte representation first if necessary.</source>
          <target state="translated">类似于 &lt;code&gt;SvPV_force&lt;/code&gt; ，但是如有必要，首先将sv转换为字节表示形式。</target>
        </trans-unit>
        <trans-unit id="e339b69da0fc6099ae5122846dd6d16329909d09" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;SvPV_force&lt;/code&gt; , but converts sv to byte representation first if necessary. Guarantees to evaluate sv only once; use the more efficient &lt;code&gt;SvPVbyte_force&lt;/code&gt; otherwise.</source>
          <target state="translated">类似于 &lt;code&gt;SvPV_force&lt;/code&gt; ，但是如有必要，首先将sv转换为字节表示形式。保证只评估一次sv；否则，使用效率更高的 &lt;code&gt;SvPVbyte_force&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="33e41cb5a5972955c89d4da04933a8a79726a21b" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;SvPV_force&lt;/code&gt; , but converts sv to utf8 first if necessary.</source>
          <target state="translated">类似于 &lt;code&gt;SvPV_force&lt;/code&gt; ，但如有必要，首先将sv转换为utf8。</target>
        </trans-unit>
        <trans-unit id="85dee70f70d9f59dd1fd504ab0aa00e6dc082a6e" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;SvPV_force&lt;/code&gt; , but converts sv to utf8 first if necessary. Guarantees to evaluate sv only once; use the more efficient &lt;code&gt;SvPVutf8_force&lt;/code&gt; otherwise.</source>
          <target state="translated">类似于 &lt;code&gt;SvPV_force&lt;/code&gt; ，但如有必要，首先将sv转换为utf8。保证只评估一次sv；否则，使用效率更高的 &lt;code&gt;SvPVutf8_force&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="2ed49f80c2155ad585761ac04bf59edd4a6a0831" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;SvPV_force&lt;/code&gt; , but doesn't process get magic.</source>
          <target state="translated">就像 &lt;code&gt;SvPV_force&lt;/code&gt; 一样，但不会处理就变魔术了。</target>
        </trans-unit>
        <trans-unit id="de31ac38b3310b9f71eaea9b2b9823bca2371b5b" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;SvPV_force&lt;/code&gt;, but converts &lt;code&gt;sv&lt;/code&gt; to UTF-8 first if necessary.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ef89cf67971528e31aab7836397b698e7ac2bf5f" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;SvPV_force&lt;/code&gt;, but converts &lt;code&gt;sv&lt;/code&gt; to UTF-8 first if necessary. Guarantees to evaluate &lt;code&gt;sv&lt;/code&gt; only once; use the more efficient &lt;code&gt;SvPVutf8_force&lt;/code&gt; otherwise.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="64af48e8fcfd9300a6f250966560fbb0e199baa6" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;SvPV_force&lt;/code&gt;, but converts &lt;code&gt;sv&lt;/code&gt; to byte representation first if necessary. Guarantees to evaluate &lt;code&gt;sv&lt;/code&gt; only once; use the more efficient &lt;code&gt;SvPVbyte_force&lt;/code&gt; otherwise. If the SV cannot be downgraded from UTF-8, this croaks.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a9a9095d2fee3653ae330358ffc4695a81e6b02f" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;SvPV_force&lt;/code&gt;, but converts &lt;code&gt;sv&lt;/code&gt; to byte representation first if necessary. If the SV cannot be downgraded from UTF-8, this croaks.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="60cf6163858835eb56fc5636d4aa26add2cda002" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;SvPV_force&lt;/code&gt;, but doesn't process get magic.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dd41cfed5f0aafc487ed8b935e2fe00690512ae4" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;SvPV_nolen&lt;/code&gt; , but converts sv to byte representation first if necessary.</source>
          <target state="translated">类似于 &lt;code&gt;SvPV_nolen&lt;/code&gt; ，但如有必要，首先将sv转换为字节表示形式。</target>
        </trans-unit>
        <trans-unit id="569d8ee3b9025e7d46c4e22dc014e9293f09b9cf" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;SvPV_nolen&lt;/code&gt; , but converts sv to utf8 first if necessary.</source>
          <target state="translated">与 &lt;code&gt;SvPV_nolen&lt;/code&gt; 相似，但如有必要，可先将sv转换为utf8。</target>
        </trans-unit>
        <trans-unit id="c6ed04996a1df68aa8ad7cc1586c48a5135a6669" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;SvPV_nolen&lt;/code&gt; but doesn't process magic.</source>
          <target state="translated">像 &lt;code&gt;SvPV_nolen&lt;/code&gt; 一样，但是不处理魔法。</target>
        </trans-unit>
        <trans-unit id="84b7cb4480c3132c8864625842015ea55fab81e1" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;SvPV_nolen&lt;/code&gt;, but converts &lt;code&gt;sv&lt;/code&gt; to UTF-8 first if necessary.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1fa0a4e5ab6512583ca715ed04c79ddb474737cc" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;SvPV_nolen&lt;/code&gt;, but converts &lt;code&gt;sv&lt;/code&gt; to byte representation first if necessary. If the SV cannot be downgraded from UTF-8, this croaks.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4a865431f8a7ccfcbc629a801cbd5a4e318acecb" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;SvPVbyte&lt;/code&gt;, but does not process get magic.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0cce88bb70d307b5b0e2ee525ca3357c9496281e" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;SvPVbyte&lt;/code&gt;, but when &lt;code&gt;sv&lt;/code&gt; is undef, returns &lt;code&gt;NULL&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c2fb5185aac038bc23863cae1034fcc526a2af60" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;SvPVbyte_or_null&lt;/code&gt;, but does not process get magic.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="41a2791b53267404eb74d9bbda43c3aea418ea86" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;SvPVutf8&lt;/code&gt;, but does not process get magic.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="406f4865185c362d6a5d331cd6d62f6ed4d4d970" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;SvPVutf8&lt;/code&gt;, but when &lt;code&gt;sv&lt;/code&gt; is undef, returns &lt;code&gt;NULL&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4bf879f0e51a10965057e3cd31f489e3ff76dc7b" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;SvPVutf8_or_null&lt;/code&gt;, but does not process get magic.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ab106c9006a177a2bcf08f263e2472e6c9b25246" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;SvSetSV&lt;/code&gt; , but does any set magic required afterwards.</source>
          <target state="translated">类似于 &lt;code&gt;SvSetSV&lt;/code&gt; ，但是之后需要进行任何设置魔术。</target>
        </trans-unit>
        <trans-unit id="18661798a6626e7bf7cdbb46868b189d21d7ee00" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;SvSetSV&lt;/code&gt;, but does any set magic required afterwards.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="388de52bdbcc28141b225f26cb9f3fe2e05660c9" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;SvSetSV_nosteal&lt;/code&gt; , but does any set magic required afterwards.</source>
          <target state="translated">像 &lt;code&gt;SvSetSV_nosteal&lt;/code&gt; 一样，但是之后需要执行任何设置魔术。</target>
        </trans-unit>
        <trans-unit id="0ed8a9070212dcdaecafb195378164bb65737213" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;SvSetSV_nosteal&lt;/code&gt;, but does any set magic required afterwards.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3a27275be863ed7ef192a76ef76e83185d113390" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;SvUV&lt;/code&gt; but doesn't process magic.</source>
          <target state="translated">类似于 &lt;code&gt;SvUV&lt;/code&gt; ,但不处理魔术。</target>
        </trans-unit>
        <trans-unit id="c145fe31e7a9856cfd103483b939c0b69292c062" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;Zero&lt;/code&gt; but returns dest. Useful for encouraging compilers to tail-call optimise.</source>
          <target state="translated">像 &lt;code&gt;Zero&lt;/code&gt; 但返回目标。有助于鼓励编译器进行优化。</target>
        </trans-unit>
        <trans-unit id="e95906df0f28c9ef1e7b84894c91761f182cafd1" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;_to_bin()&lt;/code&gt; but with a '0b' prefix.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="293678ff919e37219d0e5d9a7fb067403eb39d97" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;_to_hex()&lt;/code&gt; but with a '0x' prefix.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c679af24785cdf880157af3d3d87fd5d4c630443" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;_to_oct()&lt;/code&gt; but with a '0' prefix.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7a30913145132e032417d97e9d5716e5d07e3a09" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;article&lt;/code&gt; but only fetches the body of the article.</source>
          <target state="translated">类似于 &lt;code&gt;article&lt;/code&gt; 但仅获取文章的正文。</target>
        </trans-unit>
        <trans-unit id="dbf2edb5cf6acda874d56c0ec8d6a027b38ecd7b" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;article&lt;/code&gt; but only fetches the headers for the article.</source>
          <target state="translated">类似于 &lt;code&gt;article&lt;/code&gt; 但仅获取文章的标题。</target>
        </trans-unit>
        <trans-unit id="698d6282638ff97d91804a4f1cf2ced815c09a43" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;cond_wait&lt;/code&gt; , this function may take a shared, &lt;b&gt;locked&lt;/b&gt; variable as an additional parameter; in this case the first parameter is an &lt;b&gt;unlocked&lt;/b&gt; condition variable protected by a distinct lock variable.</source>
          <target state="translated">像 &lt;code&gt;cond_wait&lt;/code&gt; 一样，此函数可以将共享的&lt;b&gt;锁定&lt;/b&gt;变量作为附加参数。在这种情况下，第一个参数是受不同锁变量保护的&lt;b&gt;解锁&lt;/b&gt;条件变量。</target>
        </trans-unit>
        <trans-unit id="c585c7b6a19c2570f8a734ae16123cf56bb4a904" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;cond_wait&lt;/code&gt;, this function may take a shared, &lt;b&gt;locked&lt;/b&gt; variable as an additional parameter; in this case the first parameter is an &lt;b&gt;unlocked&lt;/b&gt; condition variable protected by a distinct lock variable.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c58a5c550c804eb437e5a9f29a412c2a917db541" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;copy&lt;/code&gt; , &lt;code&gt;rmscopy&lt;/code&gt; returns 1 on success. If an error occurs, it sets &lt;code&gt;$!&lt;/code&gt; , deletes the output file, and returns 0.</source>
          <target state="translated">像 &lt;code&gt;copy&lt;/code&gt; 一样， &lt;code&gt;rmscopy&lt;/code&gt; 成功返回1。如果发生错误，它将设置 &lt;code&gt;$!&lt;/code&gt; ，删除输出文件，并返回0。</target>
        </trans-unit>
        <trans-unit id="09aa3572893f32ca36724882d530f081b2c921bc" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;copy&lt;/code&gt;, &lt;code&gt;rmscopy&lt;/code&gt; returns 1 on success. If an error occurs, it sets &lt;code&gt;$!&lt;/code&gt;, deletes the output file, and returns 0.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="62662a2fcd9593969fecb7744ceb2295a389997a" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;diag()&lt;/code&gt; , but it prints to the &lt;code&gt;output()&lt;/code&gt; handle so it will not normally be seen by the user except in verbose mode.</source>
          <target state="translated">与 &lt;code&gt;diag()&lt;/code&gt; 类似，但它会打印到 &lt;code&gt;output()&lt;/code&gt; 句柄，因此，除非在详细模式下，否则通常不会被用户看到。</target>
        </trans-unit>
        <trans-unit id="983d206f2bed9edbbc722e7d5cdb62e2a06346c5" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;diag()&lt;/code&gt; , except the message will not be seen when the test is run in a harness. It will only be visible in the verbose TAP stream.</source>
          <target state="translated">类似于 &lt;code&gt;diag()&lt;/code&gt; ，但是在线束中运行测试时不会看到该消息。它仅在详细的TAP流中可见。</target>
        </trans-unit>
        <trans-unit id="30ef0020e2af04e6653b9cacfc8060419afe5437" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;diag()&lt;/code&gt;, but it prints to the &lt;code&gt;output()&lt;/code&gt; handle so it will not normally be seen by the user except in verbose mode.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="538ead19e35b8089406067731ca6a5943e4b5625" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;diag()&lt;/code&gt;, except the message will not be seen when the test is run in a harness. It will only be visible in the verbose TAP stream.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4ca575f5cd45b0a03fd8f03890b4f05a0793bc86" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;gv_stashpvn&lt;/code&gt; , but takes a literal string instead of a string/length pair.</source>
          <target state="translated">类似于 &lt;code&gt;gv_stashpvn&lt;/code&gt; ，但是采用文字字符串而不是字符串/长度对。</target>
        </trans-unit>
        <trans-unit id="8691e2305cbe58536b7649210914f3f94532f0e6" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;gv_stashpvn&lt;/code&gt;, but takes a literal string instead of a string/length pair.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9a99146718e4827b551f9b9e65221a90a0c6896f" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;hv_fetch&lt;/code&gt; , but takes a literal string instead of a string/length pair.</source>
          <target state="translated">类似于 &lt;code&gt;hv_fetch&lt;/code&gt; ，但是采用文字字符串而不是字符串/长度对。</target>
        </trans-unit>
        <trans-unit id="912f545edccc3d2ff98e523743c3a82e5bacfc8d" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;hv_fetch&lt;/code&gt;, but takes a literal string instead of a string/length pair.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1b54ec87ed43945667a5780ba1140342cbc85083" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;hv_store&lt;/code&gt; , but takes a literal string instead of a string/length pair and omits the hash parameter.</source>
          <target state="translated">类似于 &lt;code&gt;hv_store&lt;/code&gt; ，但采用文字字符串而不是字符串/长度对，并省略了hash参数。</target>
        </trans-unit>
        <trans-unit id="1d2d05d84f4bcf370e8da5d7a89dc98a3d07cfd1" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;hv_store&lt;/code&gt;, but takes a literal string instead of a string/length pair and omits the hash parameter.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="87cafedf7339223e94c98617ca5452de6e823831" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;is_regexp&lt;/code&gt; this function will not be confused by overloading or blessing of the object.</source>
          <target state="translated">与 &lt;code&gt;is_regexp&lt;/code&gt; 一样，此函数也不会因对象的重载或祝福而感到困惑。</target>
        </trans-unit>
        <trans-unit id="ec33eb3b85c09c1867b94d4c5d38b36ea16437ca" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;newSVpvn&lt;/code&gt; , but takes a literal &lt;code&gt;NUL&lt;/code&gt; -terminated string instead of a string/length pair.</source>
          <target state="translated">类似于 &lt;code&gt;newSVpvn&lt;/code&gt; ，但采用以 &lt;code&gt;NUL&lt;/code&gt; 结尾的文字字符串，而不是字符串/长度对。</target>
        </trans-unit>
        <trans-unit id="1133f5bdbc277f0a43759c96e6e4a136a1b3e3c6" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;newSVpvn&lt;/code&gt;, but takes a literal string instead of a string/length pair.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6def24d08af466796e4eeead658a36b729d71197" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;newSVpvn_flags&lt;/code&gt; , but takes a literal &lt;code&gt;NUL&lt;/code&gt; -terminated string instead of a string/length pair.</source>
          <target state="translated">类似于 &lt;code&gt;newSVpvn_flags&lt;/code&gt; ，但采用字面量为 &lt;code&gt;NUL&lt;/code&gt; 的字符串，而不是字符串/长度对。</target>
        </trans-unit>
        <trans-unit id="abd374fbe3d53f171a59b273311808bb8110bbbb" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;newSVpvn_flags&lt;/code&gt;, but takes a literal string instead of a string/length pair.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="df1c507c68363b1af9c5557f4eef915d6b55b26a" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;newSVpvn_share&lt;/code&gt; , but takes a &lt;code&gt;NUL&lt;/code&gt; -terminated string instead of a string/length pair.</source>
          <target state="translated">类似于 &lt;code&gt;newSVpvn_share&lt;/code&gt; ，但采用 &lt;code&gt;NUL&lt;/code&gt; 终止的字符串而不是字符串/长度对。</target>
        </trans-unit>
        <trans-unit id="3dd80874ef095a04d51bc5aa179476376e4130b1" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;newSVpvn_share&lt;/code&gt; , but takes a literal &lt;code&gt;NUL&lt;/code&gt; -terminated string instead of a string/length pair and omits the hash parameter.</source>
          <target state="translated">类似于 &lt;code&gt;newSVpvn_share&lt;/code&gt; ，但采用以 &lt;code&gt;NUL&lt;/code&gt; 终止的原义字符串而不是字符串/长度对，并省略了hash参数。</target>
        </trans-unit>
        <trans-unit id="d6eb188b6893f815d9a8bdb27b5ac56dcb122551" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;newSVpvn_share&lt;/code&gt;, but takes a &lt;code&gt;NUL&lt;/code&gt;-terminated string instead of a string/length pair.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e49fe9b556cc6794a2516353379f67e130b7ce84" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;newSVpvn_share&lt;/code&gt;, but takes a literal string instead of a string/length pair and omits the hash parameter.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a40e017fad124c7546ce8fa47f9cf471e202cba4" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;newSVsv&lt;/code&gt; but does not process get magic.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="11236bc0b511fb5ce2d7100079100494df2e3d25" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;our $variable&lt;/code&gt;, &lt;code&gt;our sub&lt;/code&gt; creates a lexical alias to the package subroutine of the same name.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aa6a38afce596ffe8e2f194c11ba3be9d30f3333" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;pasv_xfer&lt;/code&gt; but the file is stored on the remote server using the STOU command.</source>
          <target state="translated">与 &lt;code&gt;pasv_xfer&lt;/code&gt; 相似,但是文件使用STOU命令存储在远程服务器上。</target>
        </trans-unit>
        <trans-unit id="7fdced39cfee983640cff74a2b9f6b6a909daee3" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;require_ok&lt;/code&gt; , but it will &lt;code&gt;&lt;a href=&quot;../functions/use&quot;&gt;use&lt;/a&gt;&lt;/code&gt; the $module in question and only loads modules, not files.</source>
          <target state="translated">像 &lt;code&gt;require_ok&lt;/code&gt; 一样，但是它将 &lt;code&gt;&lt;a href=&quot;../functions/use&quot;&gt;use&lt;/a&gt;&lt;/code&gt; 有问题的$ module并且仅加载模块，而不是文件。</target>
        </trans-unit>
        <trans-unit id="8aa98318e2c42a18d337bece9c82948798cd16dd" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;require_ok&lt;/code&gt;, but it will &lt;code&gt;use&lt;/code&gt; the $module in question and only loads modules, not files.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d85e64ea446b94b53e6b0a98b79acffa9e65509e" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;savepvn&lt;/code&gt; , but takes a literal &lt;code&gt;NUL&lt;/code&gt; -terminated string instead of a string/length pair.</source>
          <target state="translated">类似于 &lt;code&gt;savepvn&lt;/code&gt; ，但是采用以 &lt;code&gt;NUL&lt;/code&gt; 终止的原义字符串，而不是字符串/长度对。</target>
        </trans-unit>
        <trans-unit id="ab6359be0dee3e4a9294e68cf9fca3c1e4336929" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;savepvn&lt;/code&gt;, but takes a literal string instead of a string/length pair.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c6f07f68a2d9761eca21ebc3401a1a91fade1e35" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;skip()&lt;/code&gt; , only it will declare the test as failing and TODO. Similar to</source>
          <target state="translated">就像 &lt;code&gt;skip()&lt;/code&gt; 一样，只有它将声明测试失败和TODO。相似</target>
        </trans-unit>
        <trans-unit id="3b33b5f95e762241c8de2a57e4c85b1137e8f8d8" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;skip()&lt;/code&gt;, only it will declare the test as failing and TODO. Similar to</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ffb9b95fcba79da2d66d4cd56bc634f774dac146" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;summary()&lt;/code&gt; , but with a lot more detail.</source>
          <target state="translated">类似于 &lt;code&gt;summary()&lt;/code&gt; ，但有更多详细信息。</target>
        </trans-unit>
        <trans-unit id="8ab77eb4986ee757a37bdc02456676abd72f396c" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;summary()&lt;/code&gt;, but with a lot more detail.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8bc85a8c4d9155e4879660bb0fb6db949fdb86fb" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;sv_2pv()&lt;/code&gt; , but doesn't return the length too. You should usually use the macro wrapper &lt;code&gt;SvPV_nolen(sv)&lt;/code&gt; instead.</source>
          <target state="translated">类似于 &lt;code&gt;sv_2pv()&lt;/code&gt; ，但也不会返回长度。您通常应该使用宏包装程序 &lt;code&gt;SvPV_nolen(sv)&lt;/code&gt; 代替。</target>
        </trans-unit>
        <trans-unit id="5f1750e6fee439d6a5d7c30bcaadc82f4b76654a" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;sv_2pv()&lt;/code&gt;, but doesn't return the length too. You should usually use the macro wrapper &lt;code&gt;SvPV_nolen(sv)&lt;/code&gt; instead.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e28ad4ddf0b006c6eedf3f81dcaf16c9a74e085e" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;sv_catpv&lt;/code&gt; , but also handles 'set' magic.</source>
          <target state="translated">像 &lt;code&gt;sv_catpv&lt;/code&gt; 一样，也可以处理&amp;ldquo;设置&amp;rdquo;魔术。</target>
        </trans-unit>
        <trans-unit id="74ec50e9ddcc0b0b4bd0d08a497824bb0da8c599" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;sv_catpv&lt;/code&gt; but doesn't process magic.</source>
          <target state="translated">像 &lt;code&gt;sv_catpv&lt;/code&gt; 一样，但是不处理魔术。</target>
        </trans-unit>
        <trans-unit id="dbe6953fefa65c174375eefeb7061a1d8d28d608" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;sv_catpv&lt;/code&gt;, but also handles 'set' magic.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="96301ae15c375b77c0b44d75ba25e64a78136a72" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;sv_catpvf&lt;/code&gt; , but also handles 'set' magic.</source>
          <target state="translated">像 &lt;code&gt;sv_catpvf&lt;/code&gt; 一样，也可以处理&amp;ldquo;设置&amp;rdquo;魔术。</target>
        </trans-unit>
        <trans-unit id="d094247c032470d6a00c5c42225cd27f4c338e8b" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;sv_catpvf&lt;/code&gt;, but also handles 'set' magic.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8dbd5c1c6aa34bdcc67b11a771b5ad797b082fb9" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;sv_catpvn&lt;/code&gt; , but also handles 'set' magic.</source>
          <target state="translated">像 &lt;code&gt;sv_catpvn&lt;/code&gt; 一样，也可以处理&amp;ldquo;设置&amp;rdquo;魔术。</target>
        </trans-unit>
        <trans-unit id="52a1bc2daa3eca49de27291192d60d01346616bc" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;sv_catpvn&lt;/code&gt; , but takes a literal string instead of a string/length pair.</source>
          <target state="translated">类似于 &lt;code&gt;sv_catpvn&lt;/code&gt; ，但是采用文字字符串而不是字符串/长度对。</target>
        </trans-unit>
        <trans-unit id="1e9ddae012626cb7e4439d9980907c822af4371b" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;sv_catpvn&lt;/code&gt; but doesn't process magic.</source>
          <target state="translated">像 &lt;code&gt;sv_catpvn&lt;/code&gt; 一样，但是不处理魔术。</target>
        </trans-unit>
        <trans-unit id="1a2180c80e256d3412ef812a310798be5ad6256e" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;sv_catpvn&lt;/code&gt;, but also handles 'set' magic.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8b542066a6f682efb528d954086e468e249dbea7" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;sv_catpvn&lt;/code&gt;, but takes a literal string instead of a string/length pair.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="56485c39e91b575f9eb207ecfc300725f3983593" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;sv_catpvn_flags&lt;/code&gt; , but takes a literal &lt;code&gt;NUL&lt;/code&gt; -terminated string instead of a string/length pair.</source>
          <target state="translated">像 &lt;code&gt;sv_catpvn_flags&lt;/code&gt; 一样，但是采用一个以 &lt;code&gt;NUL&lt;/code&gt; 终止的原义字符串，而不是字符串/长度对。</target>
        </trans-unit>
        <trans-unit id="b8dc77061b45695e2a25d3d8ac47661d896a65ef" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;sv_catpvn_flags&lt;/code&gt;, but takes a literal string instead of a string/length pair.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7f05c96d8dfa46b087685cde4a872c91ee4af9a0" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;sv_catpvn_mg&lt;/code&gt; , but takes a literal string instead of a string/length pair.</source>
          <target state="translated">类似于 &lt;code&gt;sv_catpvn_mg&lt;/code&gt; ，但是采用文字字符串而不是字符串/长度对。</target>
        </trans-unit>
        <trans-unit id="fade09434f240ea70c6ba8138d1c0f20965adbe6" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;sv_catpvn_mg&lt;/code&gt;, but takes a literal string instead of a string/length pair.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="58d239fc60878c8dca9fcf1e90342df6ee45eef1" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;sv_catpvn_nomg&lt;/code&gt; , but takes a literal string instead of a string/length pair.</source>
          <target state="translated">类似于 &lt;code&gt;sv_catpvn_nomg&lt;/code&gt; ，但是采用文字字符串而不是字符串/长度对。</target>
        </trans-unit>
        <trans-unit id="9553515af5d9ec9e4a899f2411b3c5de81d5b4ad" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;sv_catpvn_nomg&lt;/code&gt;, but takes a literal string instead of a string/length pair.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8fccee46cd5a2dbdef0b3ef34ed13318240c0cba" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;sv_catsv&lt;/code&gt; , but also handles 'set' magic.</source>
          <target state="translated">像 &lt;code&gt;sv_catsv&lt;/code&gt; 一样，也可以处理&amp;ldquo;设置&amp;rdquo;魔术。</target>
        </trans-unit>
        <trans-unit id="4126df4d71505019e5bb56c7d0ec65e860e57dbf" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;sv_catsv&lt;/code&gt; but doesn't process magic.</source>
          <target state="translated">像 &lt;code&gt;sv_catsv&lt;/code&gt; 一样，但是不处理魔术。</target>
        </trans-unit>
        <trans-unit id="e282341ebef2e50ac8d4be165f9aa0f02c29868c" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;sv_catsv&lt;/code&gt;, but also handles 'set' magic.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cb27b8554deaad725f9af3d8c8e7188da8e9d19b" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;sv_copypv&lt;/code&gt;, but doesn't invoke get magic first.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e046d3517a7992d7d1e0d29443cd29e124206320" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;sv_mortalcopy&lt;/code&gt;, but the extra &lt;code&gt;flags&lt;/code&gt; are passed to the &lt;code&gt;sv_setsv_flags&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5d38cbaa11df45cfca68f415fbd38548adbd2370" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;sv_setiv&lt;/code&gt; , but also handles 'set' magic.</source>
          <target state="translated">像 &lt;code&gt;sv_setiv&lt;/code&gt; 一样，也可以处理&amp;ldquo;设置&amp;rdquo;魔术。</target>
        </trans-unit>
        <trans-unit id="123ae4a5c669f8bb24b8cf176b2e86ba9cbfc11d" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;sv_setiv&lt;/code&gt;, but also handles 'set' magic.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fb5a47bbf6d640fdec1cfafd760bfcac50991da5" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;sv_setnv&lt;/code&gt; , but also handles 'set' magic.</source>
          <target state="translated">像 &lt;code&gt;sv_setnv&lt;/code&gt; 一样，也可以处理&amp;ldquo;设置&amp;rdquo;魔术。</target>
        </trans-unit>
        <trans-unit id="5eccffc67f571a8b3181f46b612067a5e6120f2c" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;sv_setnv&lt;/code&gt;, but also handles 'set' magic.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5d50840cdec742cb9632278831faf80f40688dc0" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;sv_setpv&lt;/code&gt; , but also handles 'set' magic.</source>
          <target state="translated">像 &lt;code&gt;sv_setpv&lt;/code&gt; 一样，也可以处理&amp;ldquo;设置&amp;rdquo;魔术。</target>
        </trans-unit>
        <trans-unit id="c985c9690a312c499374407655b6ef9ec2e3e6e4" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;sv_setpv&lt;/code&gt;, but also handles 'set' magic.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b56d7c6489caae9851ec3dcbcf0456ce3751a5c3" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;sv_setpvf&lt;/code&gt; , but also handles 'set' magic.</source>
          <target state="translated">像 &lt;code&gt;sv_setpvf&lt;/code&gt; 一样，也可以处理&amp;ldquo;设置&amp;rdquo;魔术。</target>
        </trans-unit>
        <trans-unit id="e2888cf79b645f5b449d1b4c6efb91b8ec3971c7" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;sv_setpvf&lt;/code&gt;, but also handles 'set' magic.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cc0fa3335ee153a3cf62cbff610e08349e8ad4b2" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;sv_setpviv&lt;/code&gt; , but also handles 'set' magic.</source>
          <target state="translated">像 &lt;code&gt;sv_setpviv&lt;/code&gt; 一样，也可以处理&amp;ldquo;设置&amp;rdquo;魔术。</target>
        </trans-unit>
        <trans-unit id="8d6dbd83d6e02627b8bee537343e41f6ed49077f" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;sv_setpviv&lt;/code&gt;, but also handles 'set' magic.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="60536ff4b89cb5040f19feec4be6721d10632d63" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;sv_setpvn&lt;/code&gt; , but also handles 'set' magic.</source>
          <target state="translated">像 &lt;code&gt;sv_setpvn&lt;/code&gt; 一样，也可以处理&amp;ldquo;设置&amp;rdquo;魔术。</target>
        </trans-unit>
        <trans-unit id="550ac76e7931e655b1382b031643a9cb5f52950b" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;sv_setpvn&lt;/code&gt; , but takes a literal string instead of a string/length pair.</source>
          <target state="translated">类似于 &lt;code&gt;sv_setpvn&lt;/code&gt; ，但是采用文字字符串而不是字符串/长度对。</target>
        </trans-unit>
        <trans-unit id="481f4a0f0ab1f9f4574bd5faf772b821ede1d4a1" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;sv_setpvn&lt;/code&gt;, but also handles 'set' magic.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c0931cea12270dd86a07ee0a9b6ee1091a8ce19a" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;sv_setpvn&lt;/code&gt;, but takes a literal string instead of a string/length pair.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4532add555cdc643bf47f76523943ddddd111761" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;sv_setpvn_mg&lt;/code&gt; , but takes a literal string instead of a string/length pair.</source>
          <target state="translated">类似于 &lt;code&gt;sv_setpvn_mg&lt;/code&gt; ，但是采用文字字符串而不是字符串/长度对。</target>
        </trans-unit>
        <trans-unit id="1d27898179a76dbb0e01036ba711d50a1c17a52f" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;sv_setpvn_mg&lt;/code&gt;, but takes a literal string instead of a string/length pair.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="87ab2d21a73ed79e392dc24ffd68bc21b0539241" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;sv_setref_pvn&lt;/code&gt; , but takes a literal string instead of a string/length pair.</source>
          <target state="translated">类似于 &lt;code&gt;sv_setref_pvn&lt;/code&gt; ，但是采用文字字符串而不是字符串/长度对。</target>
        </trans-unit>
        <trans-unit id="9100e36266ee96c2294edf8f453c2726c48b65aa" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;sv_setref_pvn&lt;/code&gt;, but takes a literal string instead of a string/length pair.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ab2af716b65ba49b4f611a8f9a63df24afbfd34e" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;sv_setsv&lt;/code&gt; , but also handles 'set' magic.</source>
          <target state="translated">像 &lt;code&gt;sv_setsv&lt;/code&gt; 一样，也可以处理&amp;ldquo;设置&amp;rdquo;魔术。</target>
        </trans-unit>
        <trans-unit id="029cf42c4714d829664184f54a69a5ea13d859b0" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;sv_setsv&lt;/code&gt; but doesn't process magic.</source>
          <target state="translated">像 &lt;code&gt;sv_setsv&lt;/code&gt; 一样，但是不处理魔术。</target>
        </trans-unit>
        <trans-unit id="45071495c613f505020d1cfedfcf720566ba6c27" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;sv_setsv&lt;/code&gt;, but also handles 'set' magic.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bae58ef52e0fd2638f20a33b2c2ee3d70d45b7c9" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;sv_setuv&lt;/code&gt; , but also handles 'set' magic.</source>
          <target state="translated">像 &lt;code&gt;sv_setuv&lt;/code&gt; 一样，也可以处理&amp;ldquo;设置&amp;rdquo;魔术。</target>
        </trans-unit>
        <trans-unit id="6cf4c4e06956eb2dfc680c6ee569d41126786590" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;sv_setuv&lt;/code&gt;, but also handles 'set' magic.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="edc41b001c50d7d45a00cf8022d9c1f06a67020a" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;sv_usepvn&lt;/code&gt; , but also handles 'set' magic.</source>
          <target state="translated">像 &lt;code&gt;sv_usepvn&lt;/code&gt; 一样，也可以处理&amp;ldquo;设置&amp;rdquo;魔术。</target>
        </trans-unit>
        <trans-unit id="00375d68772b5a6b2aa4d91a6b9d96252b296a38" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;sv_usepvn&lt;/code&gt;, but also handles 'set' magic.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c48c5ccb5f58e5511c541b8f7b2bd77d2574234d" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;sv_utf8_downgrade&lt;/code&gt;, but does not process get magic on &lt;code&gt;sv&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a19779d3638b6a1460d46c2178e7d9265d9957c6" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;sv_utf8_downgrade&lt;/code&gt;, but with additional &lt;code&gt;flags&lt;/code&gt;. If &lt;code&gt;flags&lt;/code&gt; has &lt;code&gt;SV_GMAGIC&lt;/code&gt; bit set, processes get magic on &lt;code&gt;sv&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3ca37005148896df7fa5618334163dda55501b5e" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;sv_utf8_upgrade&lt;/code&gt;, but doesn't do magic on &lt;code&gt;sv&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9b4a9fe99bea434f521ad5e3db444369a722ea86" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;sv_utf8_upgrade_flags&lt;/code&gt;, but has an additional parameter &lt;code&gt;extra&lt;/code&gt;, which is the number of unused bytes the string of &lt;code&gt;sv&lt;/code&gt; is guaranteed to have free after it upon return. This allows the caller to reserve extra space that it intends to fill, to avoid extra grows.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4287363f537b02349404ef50aa3650a2da519053" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;sv_vcatpvf&lt;/code&gt; , but also handles 'set' magic.</source>
          <target state="translated">像 &lt;code&gt;sv_vcatpvf&lt;/code&gt; 一样，也可以处理&amp;ldquo;设置&amp;rdquo;魔术。</target>
        </trans-unit>
        <trans-unit id="07a25ef8f06b26f172176af25178325ccea0a52b" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;sv_vcatpvf&lt;/code&gt;, but also handles 'set' magic.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="14adf015575fe99f6c00f91da82a21970e20b8bd" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;sv_vsetpvf&lt;/code&gt; , but also handles 'set' magic.</source>
          <target state="translated">像 &lt;code&gt;sv_vsetpvf&lt;/code&gt; 一样，也可以处理&amp;ldquo;设置&amp;rdquo;魔术。</target>
        </trans-unit>
        <trans-unit id="c99a7a12d3c14e8e4681f2d062967a1eb814fa0a" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;sv_vsetpvf&lt;/code&gt;, but also handles 'set' magic.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b383c55580a503d9f345eddab42a79557f296499" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;system&lt;/code&gt;, backticks put the child process exit code in &lt;code&gt;$?&lt;/code&gt;. If you'd like to manually inspect failure, you can check all possible failure modes by inspecting &lt;code&gt;$?&lt;/code&gt; like this:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d4ce5b4a9c5792e4e3d807965bc2f0706dc489a6" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;todo()&lt;/code&gt; but only returns the value of &lt;code&gt;$TODO&lt;/code&gt; ignoring &lt;code&gt;todo_start()&lt;/code&gt; .</source>
          <target state="translated">与 &lt;code&gt;todo()&lt;/code&gt; 类似，但只返回 &lt;code&gt;$TODO&lt;/code&gt; 的值，而忽略 &lt;code&gt;todo_start()&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="56964d94313ff89750dbfac18fe4fbc021ee2504" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;todo()&lt;/code&gt; but only returns the value of &lt;code&gt;$TODO&lt;/code&gt; ignoring &lt;code&gt;todo_start()&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7c255f9b56f3d7d5035702059d9768bd0f276412" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;warnings::enabled&lt;/code&gt;, but $level specifies the exact call frame, 0 being the immediate caller.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="908551960f131fd786c42f778071d30b61bb4476" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;warnings::fatal_enabled&lt;/code&gt;, but $level specifies the exact call frame, 0 being the immediate caller.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0a7a76c841e5f7c9a4c21b318b86a7b486c96e50" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;warnings::warn&lt;/code&gt;, but $level specifies the exact call frame, 0 being the immediate caller.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3a2a4468163a8d06d15e520d4c62bc8d67e5d7bc" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;warnings::warnif&lt;/code&gt;, but $level specifies the exact call frame, 0 being the immediate caller.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="824220de4c99cc183f3e468cfbca9236675ff6fd" translate="yes" xml:space="preserve">
          <source>Like C, Perl does a certain amount of expression evaluation at compile time whenever it determines that all arguments to an operator are static and have no side effects. In particular, string concatenation happens at compile time between literals that don't do variable substitution. Backslash interpolation also happens at compile time. You can say</source>
          <target state="translated">和C语言一样,Perl在编译时只要确定一个操作符的所有参数都是静态的,并且没有副作用,就会进行一定量的表达式评估。特别是,在编译时,不做变量替换的字元之间会发生字符串连接。反斜线插值也会在编译时发生。你可以说</target>
        </trans-unit>
        <trans-unit id="13593327ac22cf57826e7691f4f7f418be9cc890" translate="yes" xml:space="preserve">
          <source>Like CPAN::Bundle::inst_file, but returns the $VERSION</source>
          <target state="translated">和CPAN::Bundle::inst_file一样,但返回的是$VERSION。</target>
        </trans-unit>
        <trans-unit id="180b470a6637521531543b80ac419cbc37898af4" translate="yes" xml:space="preserve">
          <source>Like Open3 but without STDERR capture.</source>
          <target state="translated">像Open3一样,但没有STDERR捕捉。</target>
        </trans-unit>
        <trans-unit id="2a63fd6efd31d5a247539ef7d4f8ae9b22c58256" translate="yes" xml:space="preserve">
          <source>Like PERLPREFIX, but only for the site install locations.</source>
          <target state="translated">像PERLPREFIX一样,但只针对站点安装位置。</target>
        </trans-unit>
        <trans-unit id="991d27f54f9be6d1ccfe86b4d87c281614bb46a9" translate="yes" xml:space="preserve">
          <source>Like PERLPREFIX, but only for the vendor install locations.</source>
          <target state="translated">像PERLPREFIX一样,但只针对供应商的安装位置。</target>
        </trans-unit>
        <trans-unit id="3763cf6a811e93d689892e612d95e5287de00f17" translate="yes" xml:space="preserve">
          <source>Like PERLRUN, except it uses FULLPERL.</source>
          <target state="translated">和PERLRUN一样,只是它使用了FULLPERL。</target>
        </trans-unit>
        <trans-unit id="8dff3350726fa7fbd1b6410bcef4d0a73c7217e0" translate="yes" xml:space="preserve">
          <source>Like PERLRUNINST, except it uses FULLPERL.</source>
          <target state="translated">和PERLRUNINST一样,只是它使用了FULLPERL。</target>
        </trans-unit>
        <trans-unit id="5841126e64b3c89df76665c26ca814c87d8e1ffb" translate="yes" xml:space="preserve">
          <source>Like PREFIX, it sets several INSTALL* attributes at once. Unlike PREFIX it is easy to predict where the module will end up. The installation pattern looks like this:</source>
          <target state="translated">和PREFIX一样,它可以同时设置多个INSTALL*属性。与Prefix不同的是,它很容易预测模块的最终位置。安装模式是这样的。</target>
        </trans-unit>
        <trans-unit id="3eac640353c06a496dbb32cf64186b352fd16578" translate="yes" xml:space="preserve">
          <source>Like T_REFREF, except it does strict type checking (inheritance is not supported).</source>
          <target state="translated">和T_REFREF一样,只是它进行严格的类型检查(不支持继承)。</target>
        </trans-unit>
        <trans-unit id="b94e5c472f080d505351ce0495c57a8957e2a984" translate="yes" xml:space="preserve">
          <source>Like Test::More's &lt;code&gt;is()&lt;/code&gt; . Checks if &lt;code&gt;$got == $expected&lt;/code&gt; . This is the numeric version.</source>
          <target state="translated">像Test :: More的 &lt;code&gt;is()&lt;/code&gt; 一样。检查 &lt;code&gt;$got == $expected&lt;/code&gt; 。这是数字版本。</target>
        </trans-unit>
        <trans-unit id="cc96ef3fc2347f9c271af1895e169a768a31a74a" translate="yes" xml:space="preserve">
          <source>Like Test::More's &lt;code&gt;is()&lt;/code&gt; . Checks if &lt;code&gt;$got eq $expected&lt;/code&gt; . This is the string version.</source>
          <target state="translated">像Test :: More的 &lt;code&gt;is()&lt;/code&gt; 一样。检查 &lt;code&gt;$got eq $expected&lt;/code&gt; 。这是字符串版本。</target>
        </trans-unit>
        <trans-unit id="17f62623a10758c4c3b6761435cb5075609a1791" translate="yes" xml:space="preserve">
          <source>Like Test::More's &lt;code&gt;is()&lt;/code&gt;. Checks if &lt;code&gt;$got == $expected&lt;/code&gt;. This is the numeric version.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ef9447f392d01121cd67915dc61b0ec4cea9fd56" translate="yes" xml:space="preserve">
          <source>Like Test::More's &lt;code&gt;is()&lt;/code&gt;. Checks if &lt;code&gt;$got eq $expected&lt;/code&gt;. This is the string version.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f7f7c9b4de7f16b968c9df459ba87fa3286f45be" translate="yes" xml:space="preserve">
          <source>Like UTF-8, UTF-16 is a variable-width encoding, but where UTF-8 uses 8-bit code units, UTF-16 uses 16-bit code units. All code points occupy either 2 or 4 bytes in UTF-16: code points &lt;code&gt;U+0000..U+FFFF&lt;/code&gt; are stored in a single 16-bit unit, and code points &lt;code&gt;U+10000..U+10FFFF&lt;/code&gt; in two 16-bit units. The latter case is using</source>
          <target state="translated">与UTF-8一样，UTF-16是可变宽度编码，但是在UTF-8使用8位代码单元的情况下，UTF-16使用16位代码单元的情况。所有代码点在UTF-16中占用2或4个字节：代码点 &lt;code&gt;U+0000..U+FFFF&lt;/code&gt; 以单个16位单元存储，代码点 &lt;code&gt;U+10000..U+10FFFF&lt;/code&gt; 以两个16 位单元存储单位。后一种情况是使用</target>
        </trans-unit>
        <trans-unit id="8dbb04c45e23e298185620fabadd06b7455bdd6a" translate="yes" xml:space="preserve">
          <source>Like UTF-8, but EBCDIC-safe, in the way that UTF-8 is ASCII-safe. This means that all the basic characters (which includes all those that have ASCII equivalents (like &lt;code&gt;&quot;A&quot;&lt;/code&gt; , &lt;code&gt;&quot;0&quot;&lt;/code&gt; , &lt;code&gt;&quot;%&quot;&lt;/code&gt; ,</source>
          <target state="translated">与UTF-8类似，但EBCDIC安全，就像UTF-8是ASCII安全一样。这意味着所有基本字符（包括所有具有ASCII等价字符的字符（例如 &lt;code&gt;&quot;A&quot;&lt;/code&gt; ， &lt;code&gt;&quot;0&quot;&lt;/code&gt; ， &lt;code&gt;&quot;%&quot;&lt;/code&gt; ，</target>
        </trans-unit>
        <trans-unit id="e6170cafe214afdbb40c4ffbbff65c6aeebd0ba1" translate="yes" xml:space="preserve">
          <source>Like UTF-8, but EBCDIC-safe, in the way that UTF-8 is ASCII-safe. This means that all the basic characters (which includes all those that have ASCII equivalents (like &lt;code&gt;&quot;A&quot;&lt;/code&gt;, &lt;code&gt;&quot;0&quot;&lt;/code&gt;, &lt;code&gt;&quot;%&quot;&lt;/code&gt;,</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6834a3fade58397a1a46bf4fd2e951ded5a49d5e" translate="yes" xml:space="preserve">
          <source>Like a forked process, but without &lt;b&gt;fork&lt;/b&gt;&amp;rsquo;s inherent memory protection. A thread is lighter weight than a full process, in that a process could have multiple threads running around in it, all fighting over the same process&amp;rsquo;s memory space unless steps are taken to protect threads from one another.</source>
          <target state="translated">就像分叉的过程一样，但是没有&lt;b&gt;fork&lt;/b&gt;的固有内存保护。线程比整个进程的权重轻，因为一个进程可能在其中运行多个线程，除非采取措施保护线程彼此之间的距离，否则所有线程都争夺同一进程的内存空间。</target>
        </trans-unit>
        <trans-unit id="78469c56db0b66e6f31da051cfaed2326cdc6d30" translate="yes" xml:space="preserve">
          <source>Like all Perl character operations, &lt;a href=&quot;#length-EXPR&quot;&gt;&lt;code&gt;length&lt;/code&gt;&lt;/a&gt; normally deals in logical characters, not physical bytes. For how many bytes a string encoded as UTF-8 would take up, use &lt;code&gt;length(Encode::encode('UTF-8', EXPR))&lt;/code&gt; (you'll have to &lt;code&gt;use Encode&lt;/code&gt; first). See &lt;a href=&quot;encode&quot;&gt;Encode&lt;/a&gt; and &lt;a href=&quot;perlunicode&quot;&gt;perlunicode&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5e2266dcab58f5b4cb8dc0bb09fd899c041599a2" translate="yes" xml:space="preserve">
          <source>Like all Perl character operations, length() normally deals in logical characters, not physical bytes. For how many bytes a string encoded as UTF-8 would take up, use &lt;code&gt;&lt;a href=&quot;functions/length&quot;&gt;length(Encode::encode_utf8(EXPR))&lt;/a&gt;&lt;/code&gt; (you'll have to &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; Encode&lt;/code&gt; first). See &lt;a href=&quot;encode&quot;&gt;Encode&lt;/a&gt; and &lt;a href=&quot;perlunicode&quot;&gt;perlunicode&lt;/a&gt;.</source>
          <target state="translated">像所有Perl字符操作一样，length（）通常处理逻辑字符，而不是物理字节。若要将编码为UTF-8的字符串占用多少字节，请使用 &lt;code&gt;&lt;a href=&quot;functions/length&quot;&gt;length(Encode::encode_utf8(EXPR))&lt;/a&gt;&lt;/code&gt; （您必须首先 &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; Encode&lt;/code&gt; ）。请参阅&lt;a href=&quot;encode&quot;&gt;编码&lt;/a&gt;和&lt;a href=&quot;perlunicode&quot;&gt;perlunicode&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="78626057c138b9f0db027cda4d5b95c4d7adde63" translate="yes" xml:space="preserve">
          <source>Like all Perl character operations, length() normally deals in logical characters, not physical bytes. For how many bytes a string encoded as UTF-8 would take up, use &lt;code&gt;&lt;a href=&quot;length&quot;&gt;length(Encode::encode_utf8(EXPR))&lt;/a&gt;&lt;/code&gt; (you'll have to &lt;code&gt;&lt;a href=&quot;use&quot;&gt;use&lt;/a&gt; Encode&lt;/code&gt; first). See &lt;a href=&quot;../encode&quot;&gt;Encode&lt;/a&gt; and &lt;a href=&quot;../perlunicode&quot;&gt;perlunicode&lt;/a&gt;.</source>
          <target state="translated">像所有Perl字符操作一样，length（）通常处理逻辑字符，而不是物理字节。若要将编码为UTF-8的字符串占用多少字节，请使用 &lt;code&gt;&lt;a href=&quot;length&quot;&gt;length(Encode::encode_utf8(EXPR))&lt;/a&gt;&lt;/code&gt; （您必须首先 &lt;code&gt;&lt;a href=&quot;use&quot;&gt;use&lt;/a&gt; Encode&lt;/code&gt; ）。请参阅&lt;a href=&quot;../encode&quot;&gt;编码&lt;/a&gt;和&lt;a href=&quot;../perlunicode&quot;&gt;perlunicode&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="b262f2d7a83664abc258a4d3c715339214f8a1b0" translate="yes" xml:space="preserve">
          <source>Like chapters in many books, all top-level Perl source files (along with a few others here and there) begin with an epigrammatic inscription that alludes, indirectly and metaphorically, to the material you're about to read.</source>
          <target state="translated">就像许多书中的章节一样,所有顶级的Perl源文件(以及这里和那里的一些其他文件)都以一个表意性的题词开始,它间接地、隐喻地暗示了你将要阅读的材料。</target>
        </trans-unit>
        <trans-unit id="c0d2dcb20ae20f18b840f20ba286a29e5869333a" translate="yes" xml:space="preserve">
          <source>Like config_sh() but returns, as a list, only the config entries who's names match the $regex.</source>
          <target state="translated">和config_sh()一样,但是以列表的形式只返回名字与$regex匹配的配置项。</target>
        </trans-unit>
        <trans-unit id="f227f0321acaa416e145c904a4d8ec45847b8d64" translate="yes" xml:space="preserve">
          <source>Like expand, but returns objects of the appropriate type, i.e. CPAN::Bundle objects for bundles, CPAN::Module objects for modules, and CPAN::Distribution objects for distributions. Note: it does not expand to CPAN::Author objects.</source>
          <target state="translated">和 expand 一样,但是返回适当类型的对象,例如:CPAN::Bundle 对象代表 bundles,CPAN::Module 对象代表模块,CPAN::Distribution 对象代表分发。注意:它不能扩展到 CPAN::Author 对象。</target>
        </trans-unit>
        <trans-unit id="7987e14ecfb530ef395d93bea0916098ba25cf44" translate="yes" xml:space="preserve">
          <source>Like many OO interfaces, the new() method is used to initialize version objects. If two arguments are passed to &lt;code&gt;new()&lt;/code&gt;, the &lt;b&gt;second&lt;/b&gt; one will be used as if it were prefixed with &quot;v&quot;. This is to support historical use of the &lt;code&gt;qw&lt;/code&gt; operator with the CVS variable $Revision, which is automatically incremented by CVS every time the file is committed to the repository.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f385d834d0c261050be5f51ac316a9238769d175" translate="yes" xml:space="preserve">
          <source>Like many languages, Perl provides for user-defined subroutines. These may be located anywhere in the main program, loaded in from other files via the &lt;code&gt;&lt;a href=&quot;functions/do&quot;&gt;do&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;functions/require&quot;&gt;require&lt;/a&gt;&lt;/code&gt;, or &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt;&lt;/code&gt; keywords, or generated on the fly using &lt;code&gt;&lt;a href=&quot;functions/eval&quot;&gt;eval&lt;/a&gt;&lt;/code&gt; or anonymous subroutines. You can even call a function indirectly using a variable containing its name or a CODE reference.</source>
          <target state="translated">与许多语言一样，Perl提供了用户定义的子例程。它们可以位于主程序中的任何位置，可以通过 &lt;code&gt;&lt;a href=&quot;functions/do&quot;&gt;do&lt;/a&gt;&lt;/code&gt; ， &lt;code&gt;&lt;a href=&quot;functions/require&quot;&gt;require&lt;/a&gt;&lt;/code&gt; 或 &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt;&lt;/code&gt; 关键字从其他文件加载，也可以使用 &lt;code&gt;&lt;a href=&quot;functions/eval&quot;&gt;eval&lt;/a&gt;&lt;/code&gt; 或匿名子例程动态生成。您甚至可以使用包含名称或CODE引用的变量来间接调用函数。</target>
        </trans-unit>
        <trans-unit id="fa955621946321cd50075e261d09e1a7c92c1f08" translate="yes" xml:space="preserve">
          <source>Like many languages, Perl provides for user-defined subroutines. These may be located anywhere in the main program, loaded in from other files via the &lt;code&gt;do&lt;/code&gt;, &lt;code&gt;require&lt;/code&gt;, or &lt;code&gt;use&lt;/code&gt; keywords, or generated on the fly using &lt;code&gt;eval&lt;/code&gt; or anonymous subroutines. You can even call a function indirectly using a variable containing its name or a CODE reference.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bff1e677a357242f787d00ffe6b33170f4a5ab49" translate="yes" xml:space="preserve">
          <source>Like most routines, returns a true value if successful and a false value [and sets &lt;code&gt;$^E&lt;/code&gt; and &lt;code&gt;regLastError()&lt;/code&gt;] on failure.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a3bb042c0a5ea5166342c8b0ad6d2f8a2141fbc4" translate="yes" xml:space="preserve">
          <source>Like octal escapes, there are two forms of hexadecimal escapes, but both start with the sequence &lt;code&gt;\x&lt;/code&gt; . This is followed by either exactly two hexadecimal digits forming a number, or a hexadecimal number of arbitrary length surrounded by curly braces. The hexadecimal number is the code point of the character you want to express.</source>
          <target state="translated">像八进制转义一样，十六进制转义有两种形式，但都以序列 &lt;code&gt;\x&lt;/code&gt; 开头。其后是恰好两个十六进制数字组成一个数字，或者是由花括号包围的任意长度的十六进制数字。十六进制数字是您要表达的字符的代码点。</target>
        </trans-unit>
        <trans-unit id="8a3985e9eb051df5a5554fc58d279011c3ff1a77" translate="yes" xml:space="preserve">
          <source>Like octal escapes, there are two forms of hexadecimal escapes, but both start with the sequence &lt;code&gt;\x&lt;/code&gt;. This is followed by either exactly two hexadecimal digits forming a number, or a hexadecimal number of arbitrary length surrounded by curly braces. The hexadecimal number is the code point of the character you want to express.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ea93e43cdaa94011eb7f20af4624fc89df3b75e2" translate="yes" xml:space="preserve">
          <source>Like other pragmas (&lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; strict&lt;/code&gt; , for example), features have a lexical effect. &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; feature qw(foo)&lt;/code&gt; will only make the feature &quot;foo&quot; available from that point to the end of the enclosing block.</source>
          <target state="translated">像其他编译指示（例如， &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; strict&lt;/code&gt; ）一样，要素也具有词法效果。 &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; feature qw(foo)&lt;/code&gt; 只会使从该点到封闭块末尾的功能&amp;ldquo; foo&amp;rdquo;可用。</target>
        </trans-unit>
        <trans-unit id="60f22d4af04544396e97c0fdb822358710ad0090" translate="yes" xml:space="preserve">
          <source>Like other pragmas (&lt;code&gt;use strict&lt;/code&gt;, for example), features have a lexical effect. &lt;code&gt;use feature qw(foo)&lt;/code&gt; will only make the feature &quot;foo&quot; available from that point to the end of the enclosing block.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e331233743ae8af2fc425fe1e46364f44f02fcf9" translate="yes" xml:space="preserve">
          <source>Like property names, there is typically at least a short name for each such property-value, and a long name. If you know any name of the property-value (which you can get by &lt;a href=&quot;#prop_values%28%29&quot;&gt;&quot;prop_values()&quot;&lt;/a&gt;, you can use &lt;code&gt;prop_value_aliases&lt;/code&gt;() to get the long name (when called in scalar context), or a list of all the names, with the short name in the 0th element, the long name in the next element, and any other synonyms in the remaining elements, in no particular order, except that any all-numeric synonyms will be last.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f84dcad78456fba45a7cd86383d5b5d51df6ab7d" translate="yes" xml:space="preserve">
          <source>Like property names, there is typically at least a short name for each such property-value, and a long name. If you know any name of the property-value (which you can get by &lt;a href=&quot;#prop_values()&quot;&gt;prop_values()&lt;/a&gt;, you can use &lt;code&gt;prop_value_aliases&lt;/code&gt; () to get the long name (when called in scalar context), or a list of all the names, with the short name in the 0th element, the long name in the next element, and any other synonyms in the remaining elements, in no particular order, except that any all-numeric synonyms will be last.</source>
          <target state="translated">像属性名称一样，每个这样的属性值通常至少有一个短名称和一个长名称。如果知道属性值的任何名称（可以通过&lt;a href=&quot;#prop_values()&quot;&gt;prop_values（）&lt;/a&gt;获得），则可以使用 &lt;code&gt;prop_value_aliases&lt;/code&gt; （）来获取长名称（在标量上下文中调用时）或所有名称的列表，并以短名称表示名称在第0个元素中，名称在下一个元素中，长名称，以及在其余元素中的任何其他同义词（没有特殊顺序），只是所有数字同义词都将是最后一个。</target>
        </trans-unit>
        <trans-unit id="199b34f10e1b7c8e7aa443166b2eaa7617b87f12" translate="yes" xml:space="preserve">
          <source>Like sv_copypv, but doesn't invoke get magic first.</source>
          <target state="translated">和 sv_copypv 一样,但不会先调用 get magic。</target>
        </trans-unit>
        <trans-unit id="fa3c089315a35ab69068f31035a53de1242b1f4a" translate="yes" xml:space="preserve">
          <source>Like sv_utf8_upgrade, but doesn't do magic on &lt;code&gt;sv&lt;/code&gt; .</source>
          <target state="translated">就像sv_utf8_upgrade一样，但是对 &lt;code&gt;sv&lt;/code&gt; 却没有作用。</target>
        </trans-unit>
        <trans-unit id="491235f5863c419144ac401911f4034bbb235829" translate="yes" xml:space="preserve">
          <source>Like sv_utf8_upgrade_flags, but has an additional parameter &lt;code&gt;extra&lt;/code&gt; , which is the number of unused bytes the string of 'sv' is guaranteed to have free after it upon return. This allows the caller to reserve extra space that it intends to fill, to avoid extra grows.</source>
          <target state="translated">像sv_utf8_upgrade_flags一样，但是有一个额外的参数 &lt;code&gt;extra&lt;/code&gt; ，这是保证'sv'的字符串在返回后可以释放的未使用字节数。这允许呼叫者保留打算填充的额外空间，以避免额外的增长。</target>
        </trans-unit>
        <trans-unit id="b473e807de38ef5585564f3999d8d88c0c2f9ac9" translate="yes" xml:space="preserve">
          <source>Like the</source>
          <target state="translated">就像...</target>
        </trans-unit>
        <trans-unit id="1ec8b78d751f8503bdfc1aa5c17c2c7732f46241" translate="yes" xml:space="preserve">
          <source>Like the &lt;a href=&quot;#%28%3Fadlupimnsx-imnsx%29&quot;&gt;&quot;(?adlupimnsx-imnsx)&quot;&lt;/a&gt; construct, &lt;code&gt;aa&lt;/code&gt; and &lt;code&gt;&quot;a&quot;&lt;/code&gt; override each other, as do &lt;code&gt;xx&lt;/code&gt; and &lt;code&gt;&quot;x&quot;&lt;/code&gt;. They are not additive. So, doing something like &lt;code&gt;(?xx-x:foo)&lt;/code&gt; turns off all &lt;code&gt;&quot;x&quot;&lt;/code&gt; behavior for matching &lt;code&gt;foo&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8e09e117230303a3e7e1540483add81bffa29662" translate="yes" xml:space="preserve">
          <source>Like the &lt;a href=&quot;#Unicode-Properties&quot;&gt;Unicode properties&lt;/a&gt;, most of the POSIX properties match the same regardless of whether case-insensitive (&lt;code&gt;/i&lt;/code&gt;) matching is in effect or not. The two exceptions are &lt;code&gt;[:upper:]&lt;/code&gt; and &lt;code&gt;[:lower:]&lt;/code&gt;. Under &lt;code&gt;/i&lt;/code&gt;, they each match the union of &lt;code&gt;[:upper:]&lt;/code&gt; and &lt;code&gt;[:lower:]&lt;/code&gt;.</source>
          <target state="translated">像&lt;a href=&quot;#Unicode-Properties&quot;&gt;Unicode属性&lt;/a&gt;一样，大多数POSIX属性都匹配相同的属性，而不管大小写不敏感（ &lt;code&gt;/i&lt;/code&gt; ）匹配是否有效。这两个例外是 &lt;code&gt;[:upper:]&lt;/code&gt; 和 &lt;code&gt;[:lower:]&lt;/code&gt; 。在 &lt;code&gt;/i&lt;/code&gt; 下，它们分别匹配 &lt;code&gt;[:upper:]&lt;/code&gt; 和 &lt;code&gt;[:lower:]&lt;/code&gt; 的并集。</target>
        </trans-unit>
        <trans-unit id="56e82ac0ce55d077dfdc075b06ddac56ad8fd05e" translate="yes" xml:space="preserve">
          <source>Like the &lt;code&gt;&amp;lt;EXPR&amp;gt;&lt;/code&gt; operator, if a &lt;code&gt;readline&lt;/code&gt; expression is used as the condition of a &lt;code&gt;while&lt;/code&gt; or &lt;code&gt;for&lt;/code&gt; loop, then it will be implicitly assigned to &lt;code&gt;$_&lt;/code&gt;. If either a &lt;code&gt;readline&lt;/code&gt; expression or an explicit assignment of a &lt;code&gt;readline&lt;/code&gt; expression to a scalar is used as a &lt;code&gt;while&lt;/code&gt;/&lt;code&gt;for&lt;/code&gt; condition, then the condition actually tests for definedness of the expression's value, not for its regular truth value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2bf3175a68d636ecf9925b34e6ff6a44a156b660" translate="yes" xml:space="preserve">
          <source>Like the existing DBM Filter functionality, this module arranges for the &lt;code&gt;$_&lt;/code&gt; variable to be populated with the key or value that a filter will check. This usually means that most DBM filters tend to be very short.</source>
          <target state="translated">像现有的DBM过滤器功能一样，此模块安排 &lt;code&gt;$_&lt;/code&gt; 变量填充过滤器将检查的键或值。这通常意味着大多数DBM过滤器往往都很短。</target>
        </trans-unit>
        <trans-unit id="2aa9d0e9009ba5b1538c8cb1249a579d95be7bcd" translate="yes" xml:space="preserve">
          <source>Like the flattened incoming parameter list, the return list is also flattened on return. So all you have managed to do here is stored everything in &lt;code&gt;@a&lt;/code&gt; and made &lt;code&gt;@b&lt;/code&gt; empty. See &lt;a href=&quot;#Pass-by-Reference&quot;&gt;&quot;Pass by Reference&quot;&lt;/a&gt; for alternatives.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f3cce6c08fa97ca0be477f0721fb283a52d10b11" translate="yes" xml:space="preserve">
          <source>Like the flattened incoming parameter list, the return list is also flattened on return. So all you have managed to do here is stored everything in &lt;code&gt;@a&lt;/code&gt; and made &lt;code&gt;@b&lt;/code&gt; empty. See &lt;a href=&quot;#Pass-by-Reference&quot;&gt;Pass by Reference&lt;/a&gt; for alternatives.</source>
          <target state="translated">像展平的传入参数列表一样，返回列表在返回时也变平。因此，您在这里所做的所有工作都将所有内容存储在 &lt;code&gt;@a&lt;/code&gt; 中，并将 &lt;code&gt;@b&lt;/code&gt; 设为空。请参阅&lt;a href=&quot;#Pass-by-Reference&quot;&gt;按引用传递以&lt;/a&gt;获取替代方法。</target>
        </trans-unit>
        <trans-unit id="afd075e21a0c597db0ab2821856e88ceb5961fd6" translate="yes" xml:space="preserve">
          <source>Like the normal &lt;code&gt;&lt;a href=&quot;../functions/caller&quot;&gt;caller()&lt;/a&gt;&lt;/code&gt;, except it reports according to your &lt;code&gt;level()&lt;/code&gt; .</source>
          <target state="translated">像普通的 &lt;code&gt;&lt;a href=&quot;../functions/caller&quot;&gt;caller()&lt;/a&gt;&lt;/code&gt; 一样，除了它根据您的 &lt;code&gt;level()&lt;/code&gt; 报告。</target>
        </trans-unit>
        <trans-unit id="8d1f3b5af74d0fcd2065711ea1d65ad1437e3ca2" translate="yes" xml:space="preserve">
          <source>Like the normal &lt;code&gt;caller()&lt;/code&gt;, except it reports according to your &lt;code&gt;level()&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b8d2b0ec03adb313bc91ba8220b07bc1ab800f57" translate="yes" xml:space="preserve">
          <source>Like the other methods, the input parameter is not checked for validity. &lt;code&gt;undef&lt;/code&gt; or containing non-digits has the same effect as 8.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="200195811a3c205ce0d87247b5aab2a0a4c65d8e" translate="yes" xml:space="preserve">
          <source>Like their AV counterparts, &lt;code&gt;hv_clear&lt;/code&gt; deletes all the entries in the hash table but does not actually delete the hash table. The &lt;code&gt;hv_undef&lt;/code&gt; deletes both the entries and the hash table itself.</source>
          <target state="translated">像其AV副本一样， &lt;code&gt;hv_clear&lt;/code&gt; 删除哈希表中的所有条目，但实际上并不删除哈希表。该 &lt;code&gt;hv_undef&lt;/code&gt; 同时删除该条目和哈希表本身。</target>
        </trans-unit>
        <trans-unit id="e82abff5c6c10139b1928c82bbe909480a69e24a" translate="yes" xml:space="preserve">
          <source>Likely to occur for a perl binary that was not properly installed. Correct by conducting a proper installation.</source>
          <target state="translated">可能发生在没有正确安装的perl二进制文件上。通过进行正确的安装来纠正。</target>
        </trans-unit>
        <trans-unit id="5195e8e0970c4f356d29e2dc5df49c188d971cda" translate="yes" xml:space="preserve">
          <source>Likely to occur for a perl library tree that was not properly installed. Correct by conducting a proper installation.</source>
          <target state="translated">可能发生在没有正确安装的perl库树上。通过进行正确的安装来纠正。</target>
        </trans-unit>
        <trans-unit id="5a2da7a5f3225b97435c319fa8a430eb74f8dc5d" translate="yes" xml:space="preserve">
          <source>Likely to occur for a perl that was not properly installed. Correct by conducting a proper installation.</source>
          <target state="translated">很可能发生在没有正确安装的perl上。通过进行正确的安装来纠正。</target>
        </trans-unit>
        <trans-unit id="fc78654c95e5eb9c78fd54cff382380c29359dd7" translate="yes" xml:space="preserve">
          <source>Likely you forgot the &lt;code&gt;/x&lt;/code&gt; modifier or there was a typo in the pattern. For example, did you really mean to match a form-feed? If so, all the ASCII vertical space control characters are representable by escape sequences which won't present such a jarring appearance as your pattern does when displayed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d87358f4e2ddd3816d7f56b79a06ec5e87b2b467" translate="yes" xml:space="preserve">
          <source>Likely, you should use this only for debugging anyway.</source>
          <target state="translated">很可能,无论如何,你应该只用它来调试。</target>
        </trans-unit>
        <trans-unit id="5e2ad79894aa707c67ca50ba4a61384758d0873a" translate="yes" xml:space="preserve">
          <source>Likewise on all other OS levels. Then execute the following command, and fill in its choices</source>
          <target state="translated">同样,在其他所有操作系统级别上也是如此。然后执行下面的命令,并填写它的选项</target>
        </trans-unit>
        <trans-unit id="907735ad554b354d50508dedc314aa895182b86c" translate="yes" xml:space="preserve">
          <source>Likewise the call in:</source>
          <target state="translated">同样也是叫进来的。</target>
        </trans-unit>
        <trans-unit id="65ed6c9aec28bb7eb33858993a0680b4d9a0419f" translate="yes" xml:space="preserve">
          <source>Likewise,</source>
          <target state="translated">Likewise,</target>
        </trans-unit>
        <trans-unit id="c02c1537f9374adb04ab89c0867bc362683b8992" translate="yes" xml:space="preserve">
          <source>Likewise, &lt;code&gt;o conf KEY &lt;a href=&quot;functions/splice&quot;&gt;splice&lt;/a&gt; LIST&lt;/code&gt; passes the LIST to the corresponding splice command.</source>
          <target state="translated">同样， &lt;code&gt;o conf KEY &lt;a href=&quot;functions/splice&quot;&gt;splice&lt;/a&gt; LIST&lt;/code&gt; 将LIST传递给相应的splice命令。</target>
        </trans-unit>
        <trans-unit id="886e8885f96bc8b4a5e209980f534b6f61eacaf4" translate="yes" xml:space="preserve">
          <source>Likewise, Filter::Simple is also smart enough to Do The Right Thing if you use Exporter:</source>
          <target state="translated">同样,如果你使用Exporter,Filter::Simple也足够聪明,可以做正确的事情。</target>
        </trans-unit>
        <trans-unit id="160bda2110bdb1f3a950ddf5accf544eb0786069" translate="yes" xml:space="preserve">
          <source>Likewise, declaring any variables with the &lt;code&gt;:Loud&lt;/code&gt; attribute within the package:</source>
          <target state="translated">同样，在包中使用 &lt;code&gt;:Loud&lt;/code&gt; 属性声明任何变量：</target>
        </trans-unit>
        <trans-unit id="84a02ce9b38a8238dd6e99f162e9536e66631ce0" translate="yes" xml:space="preserve">
          <source>Likewise, install &quot;iPKGui Beta&quot;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d6adecc01f3598897c4c9f089b3d20664151e435" translate="yes" xml:space="preserve">
          <source>Likewise, the &lt;code&gt;b&lt;/code&gt; and &lt;code&gt;B&lt;/code&gt; formats pack a string that's that many bits long. Each such format generates 1 bit of the result. These are typically followed by a repeat count like &lt;code&gt;B8&lt;/code&gt; or &lt;code&gt;B64&lt;/code&gt; .</source>
          <target state="translated">同样， &lt;code&gt;b&lt;/code&gt; 和 &lt;code&gt;B&lt;/code&gt; 格式会打包一个字符串，该字符串的长度为数位。每个这样的格式都会产生1位结果。这些之后通常是重复计数，例如 &lt;code&gt;B8&lt;/code&gt; 或 &lt;code&gt;B64&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="0a9dd269cb5956c09af91c5ffea1e001451d2341" translate="yes" xml:space="preserve">
          <source>Likewise, the &lt;code&gt;b&lt;/code&gt; and &lt;code&gt;B&lt;/code&gt; formats pack a string that's that many bits long. Each such format generates 1 bit of the result. These are typically followed by a repeat count like &lt;code&gt;B8&lt;/code&gt; or &lt;code&gt;B64&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f6e8f9ee995abe8e9c9ec7e9aaf53f3578e6a6e8" translate="yes" xml:space="preserve">
          <source>Likewise, there is no public API to read values from the temporaries stack. Instead. the macros &lt;code&gt;SAVETMPS&lt;/code&gt; and &lt;code&gt;FREETPMS&lt;/code&gt; are used. The &lt;code&gt;SAVETMPS&lt;/code&gt; macro establishes the base levels of the temporaries stack, by capturing the current value of &lt;code&gt;PL_tmps_ix&lt;/code&gt; into &lt;code&gt;PL_tmps_floor&lt;/code&gt; and saving the previous value to the save stack. Thereafter, whenever &lt;code&gt;FREETMPS&lt;/code&gt; is invoked all of the temporaries that have been pushed since that level are reclaimed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b0cbdf24c8a85f92cd82aa3a094249d6de02bf8f" translate="yes" xml:space="preserve">
          <source>Likewise, to create a class hierarchy in which every initializer inherited by a new object is invoked:</source>
          <target state="translated">同样,创建一个类的层次结构,在这个层次结构中,每个新对象继承的初始化器都会被调用。</target>
        </trans-unit>
        <trans-unit id="b2d941fa8901c396508e50ff7018851261440d12" translate="yes" xml:space="preserve">
          <source>Likewise, when using the &lt;a href=&quot;autosplit&quot;&gt;&lt;code&gt;AutoSplit&lt;/code&gt;&lt;/a&gt; module, try to keep your functions to 8.3 naming and case-insensitive conventions; or, at the least, make it so the resulting files have a unique (case-insensitively) first 8 characters.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="70bd46189954c3a64d496328cd96089f6f4f9542" translate="yes" xml:space="preserve">
          <source>Likewise, when using the &lt;code&gt;AutoSplit&lt;/code&gt; module, try to keep your functions to 8.3 naming and case-insensitive conventions; or, at the least, make it so the resulting files have a unique (case-insensitively) first 8 characters.</source>
          <target state="translated">同样，在使用 &lt;code&gt;AutoSplit&lt;/code&gt; 模块时，请尝试使函数遵循8.3命名和不区分大小写的约定。或至少这样做，使生成的文件的前8个字符唯一（不区分大小写）。</target>
        </trans-unit>
        <trans-unit id="622e4bdf3675a214ecc2d659e2770e558df61e8a" translate="yes" xml:space="preserve">
          <source>Limit on the value of Unicode code points.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a73edeb8158f532278a32208dcd47fe3a3d7f86f" translate="yes" xml:space="preserve">
          <source>Limit recursion depth to N levels when dumping structures. Negative values are interpreted as infinity. Default: infinity.</source>
          <target state="translated">倾倒结构时,将递推深度限制在N级。负值解释为无穷大。默认值:无穷大。</target>
        </trans-unit>
        <trans-unit id="2d1726e76688b7950a8162233fc1e17657b1edf0" translate="yes" xml:space="preserve">
          <source>Limitation with regard to &lt;code&gt;_&lt;/code&gt;</source>
          <target state="translated">关于 &lt;code&gt;_&lt;/code&gt; 的限制</target>
        </trans-unit>
        <trans-unit id="55330d97525455296ae0e4b51ff25bb7abdac5c6" translate="yes" xml:space="preserve">
          <source>Limitation with regard to _</source>
          <target state="translated">对_的限制</target>
        </trans-unit>
        <trans-unit id="a7c04c64ed3f2a9374590c76c50d3b7f1b18e3da" translate="yes" xml:space="preserve">
          <source>Limitations</source>
          <target state="translated">Limitations</target>
        </trans-unit>
        <trans-unit id="b39570022e2b6b41ec90b798a2544b51d29caf01" translate="yes" xml:space="preserve">
          <source>Limitations of Perl under AmigaOS 4.1</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="72e092ad529e2081e851e343be794f7609f24237" translate="yes" xml:space="preserve">
          <source>Limits of time_t</source>
          <target state="translated">时间的限制_t</target>
        </trans-unit>
        <trans-unit id="6234e2f414d2b26733b9fd769dba962a7fcc3692" translate="yes" xml:space="preserve">
          <source>Limits on Numbers of Open Files on Solaris.</source>
          <target state="translated">对Solaris上开放文件数量的限制。</target>
        </trans-unit>
        <trans-unit id="a139366c419ef510c76cf49f4a191349fd578640" translate="yes" xml:space="preserve">
          <source>Line 1 is a macro, and its definition is dependent on your operating system. Line 3 references &lt;code&gt;PL_do_undump&lt;/code&gt; , a global variable - all global variables in Perl start with &lt;code&gt;PL_&lt;/code&gt; . This tells you whether the current running program was created with the &lt;code&gt;-u&lt;/code&gt; flag to perl and then</source>
          <target state="translated">第1行是一个宏，其定义取决于您的操作系统。第3行引用 &lt;code&gt;PL_do_undump&lt;/code&gt; ，这是一个全局变量-Perl中的所有全局变量 &lt;code&gt;PL_&lt;/code&gt; 。这告诉您当前正在运行的程序是否是使用 &lt;code&gt;-u&lt;/code&gt; 标志创建的，然后是perl</target>
        </trans-unit>
        <trans-unit id="0b0e9f3f9db20ac76f95740a88474a1af455f6f4" translate="yes" xml:space="preserve">
          <source>Line 1 is a macro, and its definition is dependent on your operating system. Line 3 references &lt;code&gt;PL_do_undump&lt;/code&gt;, a global variable - all global variables in Perl start with &lt;code&gt;PL_&lt;/code&gt;. This tells you whether the current running program was created with the &lt;code&gt;-u&lt;/code&gt; flag to perl and then</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="34d4d7a9a244a3d12dfe7fb244172b4a39165816" translate="yes" xml:space="preserve">
          <source>Line 1 tells us we're looking at an SV which lives at &lt;code&gt;0xa04ecbc&lt;/code&gt; in memory. SVs themselves are very simple structures, but they contain a pointer to a more complex structure. In this case, it's a PV, a structure which holds a string value, at location &lt;code&gt;0xa041450&lt;/code&gt; . Line 2 is the reference count; there are no other references to this data, so it's 1.</source>
          <target state="translated">第1行告诉我们，我们正在寻找一个 &lt;code&gt;0xa04ecbc&lt;/code&gt; 在内存中0xa04ecbc的SV 。SV本身是非常简单的结构，但是它们包含一个指向更复杂结构的指针。在这种情况下，它是PV，它是一个存储字符串值的结构，位于位置 &lt;code&gt;0xa041450&lt;/code&gt; 。第2行是参考计数；对此数据没有其他引用，因此为1。</target>
        </trans-unit>
        <trans-unit id="8257e528d7a56dcca4db122b50b35bdc95c95709" translate="yes" xml:space="preserve">
          <source>Line 1 tells us we're looking at an SV which lives at &lt;code&gt;0xa04ecbc&lt;/code&gt; in memory. SVs themselves are very simple structures, but they contain a pointer to a more complex structure. In this case, it's a PV, a structure which holds a string value, at location &lt;code&gt;0xa041450&lt;/code&gt;. Line 2 is the reference count; there are no other references to this data, so it's 1.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="852a5525bd0666646b8baf89f18138582eb7fb29" translate="yes" xml:space="preserve">
          <source>Line 1, &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; Filter::cpp&lt;/code&gt; , includes and installs the &lt;code&gt;cpp&lt;/code&gt; filter module. All source filters work this way. The use statement is compiled and executed at compile time, before any more of the file is read, and it attaches the cpp filter to the source stream behind the scenes. Now the data flow looks like this:</source>
          <target state="translated">第1行， &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; Filter::cpp&lt;/code&gt; ，包括并安装 &lt;code&gt;cpp&lt;/code&gt; 过滤器模块。所有源过滤器都以这种方式工作。use语句在读取文件的更多内容之前在编译时进行编译和执行，并将cpp筛选器附加到后台的源流中。现在，数据流如下所示：</target>
        </trans-unit>
        <trans-unit id="7d80c9fd96dedf73af4c56122f85ab0c0aa067ae" translate="yes" xml:space="preserve">
          <source>Line 1, &lt;code&gt;use Filter::cpp&lt;/code&gt;, includes and installs the &lt;code&gt;cpp&lt;/code&gt; filter module. All source filters work this way. The use statement is compiled and executed at compile time, before any more of the file is read, and it attaches the cpp filter to the source stream behind the scenes. Now the data flow looks like this:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7fe884af42f04d28c78e5fe62707a6228b47c52d" translate="yes" xml:space="preserve">
          <source>Line 10 does the actual catenation: the &lt;code&gt;Move&lt;/code&gt; macro moves a chunk of memory around: we move the string &lt;code&gt;ptr&lt;/code&gt; to the end of the PV - that's the start of the PV plus its current length. We're moving &lt;code&gt;len&lt;/code&gt; bytes of type &lt;code&gt;char&lt;/code&gt; . After doing so, we need to tell Perl we've extended the string, by altering &lt;code&gt;CUR&lt;/code&gt; to reflect the new length. &lt;code&gt;SvEND&lt;/code&gt; is a macro which gives us the end of the string, so that needs to be a &lt;code&gt;&quot;\0&quot;&lt;/code&gt; .</source>
          <target state="translated">第10行进行了实际的分类： &lt;code&gt;Move&lt;/code&gt; 宏在内存中移动了一块：我们将字符串 &lt;code&gt;ptr&lt;/code&gt; 移动到PV的末尾-这是PV的开始加上当前长度。我们要移出 &lt;code&gt;char&lt;/code&gt; 类型的 &lt;code&gt;len&lt;/code&gt; 个字节。这样做之后，我们需要通过更改 &lt;code&gt;CUR&lt;/code&gt; 以反映新的长度来告诉Perl我们已经扩展了字符串。 &lt;code&gt;SvEND&lt;/code&gt; 是一个宏，它为我们提供了字符串的结尾，因此需要为 &lt;code&gt;&quot;\0&quot;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="343b8ed5119a25daa7a642907594c94fca594fc8" translate="yes" xml:space="preserve">
          <source>Line 10 does the actual catenation: the &lt;code&gt;Move&lt;/code&gt; macro moves a chunk of memory around: we move the string &lt;code&gt;ptr&lt;/code&gt; to the end of the PV - that's the start of the PV plus its current length. We're moving &lt;code&gt;len&lt;/code&gt; bytes of type &lt;code&gt;char&lt;/code&gt;. After doing so, we need to tell Perl we've extended the string, by altering &lt;code&gt;CUR&lt;/code&gt; to reflect the new length. &lt;code&gt;SvEND&lt;/code&gt; is a macro which gives us the end of the string, so that needs to be a &lt;code&gt;&quot;\0&quot;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b7ce4818db70a98f47c9e31ba9a951fb125f8128" translate="yes" xml:space="preserve">
          <source>Line 10 is the null op: this does exactly nothing. What is that doing there? If you see the null op, it's a sign that something has been optimized away after parsing. As we mentioned in &lt;a href=&quot;#Optimization&quot;&gt;&quot;Optimization&quot;&lt;/a&gt;, the optimization stage sometimes converts two operations into one, for example when fetching a scalar variable. When this happens, instead of rewriting the op tree and cleaning up the dangling pointers, it's easier just to replace the redundant operation with the null op. Originally, the tree would have looked like this:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0d7912d365642f9e0b2b596d940dc9036620ccc8" translate="yes" xml:space="preserve">
          <source>Line 10 is the null op: this does exactly nothing. What is that doing there? If you see the null op, it's a sign that something has been optimized away after parsing. As we mentioned in &lt;a href=&quot;#Optimization&quot;&gt;Optimization&lt;/a&gt;, the optimization stage sometimes converts two operations into one, for example when fetching a scalar variable. When this happens, instead of rewriting the op tree and cleaning up the dangling pointers, it's easier just to replace the redundant operation with the null op. Originally, the tree would have looked like this:</source>
          <target state="translated">第10行是null操作：这完全不执行任何操作。那在那里做什么？如果您看到null op，则表明在解析后已经优化了某些内容。正如我们在&amp;ldquo; &lt;a href=&quot;#Optimization&quot;&gt;优化&amp;rdquo;中&lt;/a&gt;提到的那样，优化阶段有时会将两个运算转换为一个运算，例如在获取标量变量时。发生这种情况时，与其重写操作树并清除悬空的指针，不如将多余的操作替换为空操作会更容易。最初，树看起来像这样：</target>
        </trans-unit>
        <trans-unit id="264f13994058273b1e958110b35aba9f84b7d3f9" translate="yes" xml:space="preserve">
          <source>Line 13 manipulates the flags; since we've changed the PV, any IV or NV values will no longer be valid: if we have &lt;code&gt;$a=10; $a.=&quot;6&quot;;&lt;/code&gt; we don't want to use the old IV of 10. &lt;code&gt;SvPOK_only_utf8&lt;/code&gt; is a special UTF-8-aware version of &lt;code&gt;SvPOK_only&lt;/code&gt; , a macro which turns off the IOK and NOK flags and turns on POK. The final &lt;code&gt;SvTAINT&lt;/code&gt; is a macro which launders tainted data if taint mode is turned on.</source>
          <target state="translated">第13行处理这些标志；因为我们已经更改了PV，所以任何IV或NV值都将不再有效：如果我们有 &lt;code&gt;$a=10; $a.=&quot;6&quot;;&lt;/code&gt; 我们不希望使用10的老IV &lt;code&gt;SvPOK_only_utf8&lt;/code&gt; 是一个特殊的UTF-8识别版本 &lt;code&gt;SvPOK_only&lt;/code&gt; ，宏即关闭了IOK和NOK标志，并打开POK。最后的 &lt;code&gt;SvTAINT&lt;/code&gt; 是一个宏，如果打开污点模式，该宏将洗涤污点数据。</target>
        </trans-unit>
        <trans-unit id="f14c02821009fa7c46a173af60df4534a9b06517" translate="yes" xml:space="preserve">
          <source>Line 13 manipulates the flags; since we've changed the PV, any IV or NV values will no longer be valid: if we have &lt;code&gt;$a=10; $a.=&quot;6&quot;;&lt;/code&gt; we don't want to use the old IV of 10. &lt;code&gt;SvPOK_only_utf8&lt;/code&gt; is a special UTF-8-aware version of &lt;code&gt;SvPOK_only&lt;/code&gt;, a macro which turns off the IOK and NOK flags and turns on POK. The final &lt;code&gt;SvTAINT&lt;/code&gt; is a macro which launders tainted data if taint mode is turned on.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="755dd87e19fd3ba2af902fab337428ef967e0ea8" translate="yes" xml:space="preserve">
          <source>Line 3 are the flags for this SV - it's OK to use it as a PV, it's a read-only SV (because it's a constant) and the data is a PV internally. Next we've got the contents of the string, starting at location &lt;code&gt;0xa0484e0&lt;/code&gt; .</source>
          <target state="translated">第3行是该SV的标志-可以将其用作PV，它是只读SV（因为它是一个常量），并且数据在内部是PV。接下来，我们从位置 &lt;code&gt;0xa0484e0&lt;/code&gt; 开始获取字符串的内容。</target>
        </trans-unit>
        <trans-unit id="c6d733118bea452010f0639494cd9d297ac988a2" translate="yes" xml:space="preserve">
          <source>Line 3 are the flags for this SV - it's OK to use it as a PV, it's a read-only SV (because it's a constant) and the data is a PV internally. Next we've got the contents of the string, starting at location &lt;code&gt;0xa0484e0&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="40714861418609c0c173cdb387c1235ef584feb6" translate="yes" xml:space="preserve">
          <source>Line 4 calls a function in</source>
          <target state="translated">第4行调用</target>
        </trans-unit>
        <trans-unit id="b40e00c673cb8c91399cf977ab21f4560a36a721" translate="yes" xml:space="preserve">
          <source>Line 4 checks what type of token we are expecting. &lt;code&gt;Aop&lt;/code&gt; returns a token. If you search for &lt;code&gt;Aop&lt;/code&gt; elsewhere in</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fce643cab9a4e3c9a722892a06301bcddec99baf" translate="yes" xml:space="preserve">
          <source>Line 5 gives us the current length of the string - note that this does &lt;b&gt;not&lt;/b&gt; include the null terminator. Line 6 is not the length of the string, but the length of the currently allocated buffer; as the string grows, Perl automatically extends the available storage via a routine called &lt;code&gt;SvGROW&lt;/code&gt; .</source>
          <target state="translated">5号线给我们的字符串的当前长度-注意，这并&lt;b&gt;没有&lt;/b&gt;包括空终止符。第6行不是字符串的长度，而是当前分配的缓冲区的长度。随着字符串的增长，Perl通过名为 &lt;code&gt;SvGROW&lt;/code&gt; 的例程自动扩展可用存储。</target>
        </trans-unit>
        <trans-unit id="379de365d1a548a0387a33346f31194909c467b1" translate="yes" xml:space="preserve">
          <source>Line 5 gives us the current length of the string - note that this does &lt;b&gt;not&lt;/b&gt; include the null terminator. Line 6 is not the length of the string, but the length of the currently allocated buffer; as the string grows, Perl automatically extends the available storage via a routine called &lt;code&gt;SvGROW&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e801a645ef8652f9762283242a90486b96636e4b" translate="yes" xml:space="preserve">
          <source>Line 5 is another variable declaration - all variable declarations start with &lt;code&gt;d&lt;/code&gt; - which pops from the top of the argument stack two NVs (hence &lt;code&gt;nn&lt;/code&gt; ) and puts them into the variables &lt;code&gt;right&lt;/code&gt; and &lt;code&gt;left&lt;/code&gt; , hence the &lt;code&gt;rl&lt;/code&gt; . These are the two operands to the addition operator. Next, we call &lt;code&gt;SETn&lt;/code&gt; to set the NV of the return value to the result of adding the two values. This done, we return - the &lt;code&gt;RETURN&lt;/code&gt; macro makes sure that our return value is properly handled, and we pass the next operator to run back to the main run loop.</source>
          <target state="translated">第5行是另一个变量声明-所有变量声明都以 &lt;code&gt;d&lt;/code&gt; 开头-它从参数堆栈的顶部弹出两个NV（因此为 &lt;code&gt;nn&lt;/code&gt; ），并将它们分别放在变量的 &lt;code&gt;right&lt;/code&gt; 和 &lt;code&gt;left&lt;/code&gt; ，即 &lt;code&gt;rl&lt;/code&gt; 。这是加法运算符的两个操作数。接下来，我们调用 &lt;code&gt;SETn&lt;/code&gt; 将返回值的NV设置为两个值相加的结果。完成此操作后，我们返回 &lt;code&gt;RETURN&lt;/code&gt; 宏确保正确处理了我们的返回值，然后将下一个运算符传递回主运行循环。</target>
        </trans-unit>
        <trans-unit id="9ab0a06fa26dc1e693bbb46194cc19123ec14b86" translate="yes" xml:space="preserve">
          <source>Line 6 installs the city name into the appropriate array. &lt;code&gt;$table{$country}&lt;/code&gt; now holds a reference to the array of cities seen in that country so far. Line 6 is exactly like</source>
          <target state="translated">第6行将城市名称安装到适当的数组中。 &lt;code&gt;$table{$country}&lt;/code&gt; 现在引用了该国到目前为止所看到的城市。6号线就像</target>
        </trans-unit>
        <trans-unit id="c2ba84f7598874c7f48acd427ca1d636fc55bdcd" translate="yes" xml:space="preserve">
          <source>Line 6 is another variable declaration - all variable declarations start with &lt;code&gt;d&lt;/code&gt; - which pops from the top of the argument stack two NVs (hence &lt;code&gt;nn&lt;/code&gt;) and puts them into the variables &lt;code&gt;right&lt;/code&gt; and &lt;code&gt;left&lt;/code&gt;, hence the &lt;code&gt;rl&lt;/code&gt;. These are the two operands to the addition operator. Next, we call &lt;code&gt;SETn&lt;/code&gt; to set the NV of the return value to the result of adding the two values. This done, we return - the &lt;code&gt;RETURN&lt;/code&gt; macro makes sure that our return value is properly handled, and we pass the next operator to run back to the main run loop.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d48a3eb6c3c3e42eae96423913fd8ffbda526837" translate="yes" xml:space="preserve">
          <source>Line Buffering</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3bfe50eaa50ff37a3814f18a6020ab1131445d28" translate="yes" xml:space="preserve">
          <source>Line Listing Format</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="62686b06fae48d96cf870eba5c52faaa0c94ec93" translate="yes" xml:space="preserve">
          <source>Line number that will be executed next.</source>
          <target state="translated">接下来要执行的行号。</target>
        </trans-unit>
        <trans-unit id="4c2e43f7c549f47cf9031361a83c442a60f08003" translate="yes" xml:space="preserve">
          <source>Line up corresponding items vertically.</source>
          <target state="translated">将相应的项目垂直排列。</target>
        </trans-unit>
        <trans-unit id="90a0a22c457fd80684a0398fb72051a69780b70d" translate="yes" xml:space="preserve">
          <source>Line up corresponding things vertically, especially if it'd be too long to fit on one line anyway.</source>
          <target state="translated">把相应的东西竖着排起来,特别是如果太长了,反正一条线上放不下。</target>
        </trans-unit>
        <trans-unit id="fddad56552c576f0323dae03070effe7302ccb5f" translate="yes" xml:space="preserve">
          <source>Line up your transliterations when it makes sense:</source>
          <target state="translated">在有意义的时候排好你的译名。</target>
        </trans-unit>
        <trans-unit id="4dd6f945e5b458504f42d21fe69947944476c20f" translate="yes" xml:space="preserve">
          <source>Line wrapping to form simple paragraphs</source>
          <target state="translated">绕行以形成简单的段落</target>
        </trans-unit>
        <trans-unit id="3c31b396df21c211f23a01f3c792334d1e4f696c" translate="yes" xml:space="preserve">
          <source>Line-by-line debugging. Causes &lt;code&gt;DB::DB()&lt;/code&gt; subroutine to be called for each statement executed. Also causes saving source code lines (like 0x400).</source>
          <target state="translated">逐行调试。原因 &lt;code&gt;DB::DB()&lt;/code&gt; 子程序被调用执行每个语句。也导致保存源代码行（如0x400）。</target>
        </trans-unit>
        <trans-unit id="4a4c07d14ccbabaacd2cac3e3e1dcd6526decdb6" translate="yes" xml:space="preserve">
          <source>Lines 2-4 acquire a city and country name. Line 5 looks to see if the country is already present as a key in the hash. If it's not, the program uses the &lt;code&gt;[]&lt;/code&gt; notation (&lt;a href=&quot;#Make-Rule-2&quot;&gt;&lt;b&gt;Make Rule 2&lt;/b&gt;&lt;/a&gt;) to manufacture a new, empty anonymous array of cities, and installs a reference to it into the hash under the appropriate key.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6544069544ff400a2f96a13aacecf88aefcebba3" translate="yes" xml:space="preserve">
          <source>Lines 2-4 acquire a city and country name. Line 5 looks to see if the country is already present as a key in the hash. If it's not, the program uses the &lt;code&gt;[]&lt;/code&gt; notation (&lt;b&gt;Make Rule 2&lt;/b&gt;) to manufacture a new, empty anonymous array of cities, and installs a reference to it into the hash under the appropriate key.</source>
          <target state="translated">第2-4行获取城市和国家/地区名称。第5行查看该国家/地区是否已作为哈希中的键存在。如果不是，程序将使用 &lt;code&gt;[]&lt;/code&gt; 表示法（&lt;b&gt;制定规则2&lt;/b&gt;）来制造一个新的空的匿名城市数组，并在适当的键下将对它的引用安装到哈希中。</target>
        </trans-unit>
        <trans-unit id="f9204249863f9ef26ff51a8eb193e8408a39e90b" translate="yes" xml:space="preserve">
          <source>Lines 2-7 are responsible for building the structure in the first place. Here they are again:</source>
          <target state="translated">第2-7行首先负责建立结构。它们又在这里。</target>
        </trans-unit>
        <trans-unit id="de6cda1578fd7d9e7a9658f2b0c6b2f1938e7d0c" translate="yes" xml:space="preserve">
          <source>Lines are wrapped at &lt;code&gt;$Text::Wrap::columns&lt;/code&gt; columns (default value: 76). &lt;code&gt;$Text::Wrap::columns&lt;/code&gt; should be set to the full width of your output device. In fact, every resulting line will have length of no more than &lt;code&gt;$columns - 1&lt;/code&gt; .</source>
          <target state="translated">行被包装在 &lt;code&gt;$Text::Wrap::columns&lt;/code&gt; 列（默认值：76）。 &lt;code&gt;$Text::Wrap::columns&lt;/code&gt; 应该设置为输出设备的完整宽度。实际上，每条结果行的长度不得超过 &lt;code&gt;$columns - 1&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="bdd8be9ac7f4d3de35a2d0dba7d82ca50f5c0336" translate="yes" xml:space="preserve">
          <source>Lines are wrapped at &lt;code&gt;$Text::Wrap::columns&lt;/code&gt; columns (default value: 76). &lt;code&gt;$Text::Wrap::columns&lt;/code&gt; should be set to the full width of your output device. In fact, every resulting line will have length of no more than &lt;code&gt;$columns - 1&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6b80c81ac338346fa6d5a46950a43da0e9261d9f" translate="yes" xml:space="preserve">
          <source>Linguistic tailoring for DUCET via Unicode::Collate</source>
          <target state="translated">通过Unicode::Collate为DUCET进行语言上的调整。</target>
        </trans-unit>
        <trans-unit id="911361fa28ffec535144574ef716816f8b8cd069" translate="yes" xml:space="preserve">
          <source>Link count not updated because hard links are not quite that hard (They are sort of half-way between hard and soft links). (AmigaOS)</source>
          <target state="translated">链接数没有更新,因为硬链接并不是很硬(它们算是硬链接和软链接的中间环节)。(AmigaOS)</target>
        </trans-unit>
        <trans-unit id="1bd9f440f54676f1bb94923dc077847ab746b4ad" translate="yes" xml:space="preserve">
          <source>Link dynamic extensions with AddressSanitizer. You must manually specify &lt;code&gt;-shared&lt;/code&gt; because using &lt;code&gt;-Alddlflags=-shared&lt;/code&gt; will prevent Configure from setting a default value for &lt;code&gt;lddlflags&lt;/code&gt; , which usually contains &lt;code&gt;-shared&lt;/code&gt; (at least on Linux).</source>
          <target state="translated">将动态扩展与AddressSanitizer链接。您必须手动指定 &lt;code&gt;-shared&lt;/code&gt; 因为使用 &lt;code&gt;-Alddlflags=-shared&lt;/code&gt; 将防止从配置设置的默认值 &lt;code&gt;lddlflags&lt;/code&gt; ，通常包含 &lt;code&gt;-shared&lt;/code&gt; （至少在Linux上）。</target>
        </trans-unit>
        <trans-unit id="8e4a85ad0592eae3d98b608b03a13168bab41ac1" translate="yes" xml:space="preserve">
          <source>Link dynamic extensions with AddressSanitizer. You must manually specify &lt;code&gt;-shared&lt;/code&gt; because using &lt;code&gt;-Alddlflags=-shared&lt;/code&gt; will prevent Configure from setting a default value for &lt;code&gt;lddlflags&lt;/code&gt;, which usually contains &lt;code&gt;-shared&lt;/code&gt; (at least on Linux).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="14f974c23cae7ac7ab09ab4582a91560c7102a2b" translate="yes" xml:space="preserve">
          <source>Link the perl executable with AddressSanitizer.</source>
          <target state="translated">用AddressSanitizer链接perl可执行文件。</target>
        </trans-unit>
        <trans-unit id="41c90512ffda6347e72f72d0a6f190da9ca1b80a" translate="yes" xml:space="preserve">
          <source>Link this text to that manual page. E.g., &lt;code&gt;L&amp;lt;Perl Error Messages|perldiag&amp;gt;&lt;/code&gt;</source>
          <target state="translated">将此文本链接到该手册页。例如， &lt;code&gt;L&amp;lt;Perl Error Messages|perldiag&amp;gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="da1dd85543ffc6fef88aec54ac7001cdb21f6577" translate="yes" xml:space="preserve">
          <source>Link this text to that section in that manual page. E.g., &lt;code&gt;L&amp;lt;postfix &quot;if&quot;|perlsyn/&quot;Statement Modifiers&quot;&amp;gt;&lt;/code&gt;</source>
          <target state="translated">将此文本链接到该手册页中的该部分。例如， &lt;code&gt;L&amp;lt;postfix &quot;if&quot;|perlsyn/&quot;Statement Modifiers&quot;&amp;gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="0a893b38edbd5af20fcd220578252e31f67b32a6" translate="yes" xml:space="preserve">
          <source>Link this text to that section in this manual page. E.g., &lt;code&gt;L&amp;lt;the various attributes|/&quot;Member Data&quot;&amp;gt;&lt;/code&gt;</source>
          <target state="translated">将此文本链接到本手册页中的该部分。例如， &lt;code&gt;L&amp;lt;the various attributes|/&quot;Member Data&quot;&amp;gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="1a75b0dcbc63f378ca4b7ba049d880c48c223d9a" translate="yes" xml:space="preserve">
          <source>Link to a Perl manual page (e.g., &lt;code&gt;L&amp;lt;Net::Ping&amp;gt;&lt;/code&gt; ). Note that &lt;code&gt;name&lt;/code&gt; should not contain spaces. This syntax is also occasionally used for references to Unix man pages, as in &lt;code&gt;L&amp;lt;crontab(5)&amp;gt;&lt;/code&gt; .</source>
          <target state="translated">链接到Perl手册页（例如 &lt;code&gt;L&amp;lt;Net::Ping&amp;gt;&lt;/code&gt; ）。请注意， &lt;code&gt;name&lt;/code&gt; 不得包含空格。如 &lt;code&gt;L&amp;lt;crontab(5)&amp;gt;&lt;/code&gt; 一样，该语法有时也用于引用Unix手册页。</target>
        </trans-unit>
        <trans-unit id="c8989d4395dabd5c3aa39385b5b23f283a370aec" translate="yes" xml:space="preserve">
          <source>Link to a Perl manual page (e.g., &lt;code&gt;L&amp;lt;Net::Ping&amp;gt;&lt;/code&gt;). Note that &lt;code&gt;name&lt;/code&gt; should not contain spaces. This syntax is also occasionally used for references to Unix man pages, as in &lt;code&gt;L&amp;lt;crontab(5)&amp;gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5ebcbb26d8410e15ec0a3bf942439d1fa6f0dc0e" translate="yes" xml:space="preserve">
          <source>Link to a section in other manual page. E.g., &lt;code&gt;L&amp;lt;perlsyn/&quot;For Loops&quot;&amp;gt;&lt;/code&gt;</source>
          <target state="translated">链接到其他手册页中的部分。例如， &lt;code&gt;L&amp;lt;perlsyn/&quot;For Loops&quot;&amp;gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="4a4be78347858c96ca4af009ad12e83b583efec3" translate="yes" xml:space="preserve">
          <source>Link to a section in this manual page. E.g., &lt;code&gt;L&amp;lt;/&quot;Object Methods&quot;&amp;gt;&lt;/code&gt;</source>
          <target state="translated">链接到本手册页面的一部分。例如， &lt;code&gt;L&amp;lt;/&quot;Object Methods&quot;&amp;gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="c060793b58b5034337a483732320e10661d5f930" translate="yes" xml:space="preserve">
          <source>Linker Problems in Irix</source>
          <target state="translated">Irix中的链接器问题</target>
        </trans-unit>
        <trans-unit id="91ca4118a066d9e15d3000d362f4707600eb85a4" translate="yes" xml:space="preserve">
          <source>Linking with C</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="632c0116497fe7ec21df3b6015a06dceee2c2e46" translate="yes" xml:space="preserve">
          <source>Links to an absolute URL. For example, &lt;code&gt;L&amp;lt;&lt;a href=&quot;http://www.perl.org/&quot;&gt;http://www.perl.org/&lt;/a&gt;&amp;gt;&lt;/code&gt; or &lt;code&gt;L&amp;lt;The Perl Home Page|&lt;a href=&quot;http://www.perl.org/&quot;&gt;http://www.perl.org/&lt;/a&gt;&amp;gt;&lt;/code&gt;.</source>
          <target state="translated">链接到绝对URL。例如， &lt;code&gt;L&amp;lt;&lt;a href=&quot;http://www.perl.org/&quot;&gt;http://www.perl.org/&lt;/a&gt;&amp;gt;&lt;/code&gt; 或 &lt;code&gt;L&amp;lt;The Perl Home Page|&lt;a href=&quot;http://www.perl.org/&quot;&gt;http://www.perl.org/&lt;/a&gt;&amp;gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="70dabca050ab89452a19f7ca28b4c05e928c7006" translate="yes" xml:space="preserve">
          <source>Links to an absolute URL. For example, &lt;code&gt;L&amp;lt;http://www.perl.org/&amp;gt;&lt;/code&gt; or &lt;code&gt;L&amp;lt;The Perl Home Page|http://www.perl.org/&amp;gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="83ad8510bbd3f22363d068e1c96f82fd0fcccd31" translate="yes" xml:space="preserve">
          <source>Linux</source>
          <target state="translated">Linux</target>
        </trans-unit>
        <trans-unit id="83bd0efc45cc0fd69905b50d3c8ace24dff4bd31" translate="yes" xml:space="preserve">
          <source>Linux (x86, ARM, IA64)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9ec4f23be8f3036b01885e23831c9d8422f8e25f" translate="yes" xml:space="preserve">
          <source>Linux Magazine</source>
          <target state="translated">Linux杂志</target>
        </trans-unit>
        <trans-unit id="2187306118c639d0411d3a1f0eea679c435e121f" translate="yes" xml:space="preserve">
          <source>Linux-specific shortcuts to specify the &lt;code&gt;O_NONBLOCK&lt;/code&gt; and &lt;code&gt;FD_CLOEXEC&lt;/code&gt; flags during a &lt;code&gt;&lt;a href=&quot;functions/socket&quot;&gt;socket(2)&lt;/a&gt;&lt;/code&gt; call.</source>
          <target state="translated">特定于Linux的快捷方式，用于在 &lt;code&gt;&lt;a href=&quot;functions/socket&quot;&gt;socket(2)&lt;/a&gt;&lt;/code&gt; 调用期间指定 &lt;code&gt;O_NONBLOCK&lt;/code&gt; 和 &lt;code&gt;FD_CLOEXEC&lt;/code&gt; 标志。</target>
        </trans-unit>
        <trans-unit id="27bd3b3373ebdc99eec5274a7f58493e52c3e65c" translate="yes" xml:space="preserve">
          <source>Linux-specific shortcuts to specify the &lt;code&gt;O_NONBLOCK&lt;/code&gt; and &lt;code&gt;FD_CLOEXEC&lt;/code&gt; flags during a &lt;code&gt;socket(2)&lt;/code&gt; call.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7aaedd94529deff9e35130dfc5ae5796d73c29a7" translate="yes" xml:space="preserve">
          <source>LinuxThreads is now obsolete on Linux, and caching &lt;code&gt;getpid()&lt;/code&gt; like this made embedding perl unnecessarily complex (since you'd have to manually update the value of $$), so now &lt;code&gt;$$&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;functions/getppid&quot;&gt;getppid()&lt;/a&gt;&lt;/code&gt; will always return the same values as the underlying C library.</source>
          <target state="translated">LinuxThreads现在在Linux上已经过时了，像这样缓存 &lt;code&gt;getpid()&lt;/code&gt; 使得嵌入perl变得不必要地复杂（因为您必须手动更新$$的值），所以现在 &lt;code&gt;$$&lt;/code&gt; 和 &lt;code&gt;&lt;a href=&quot;functions/getppid&quot;&gt;getppid()&lt;/a&gt;&lt;/code&gt; 将始终返回与基础C库。</target>
        </trans-unit>
        <trans-unit id="dc8491ab221544187737048d61360d36010b4180" translate="yes" xml:space="preserve">
          <source>LinuxThreads is now obsolete on Linux, and caching &lt;code&gt;getpid()&lt;/code&gt; like this made embedding perl unnecessarily complex (since you'd have to manually update the value of $$), so now &lt;code&gt;$$&lt;/code&gt; and &lt;code&gt;getppid()&lt;/code&gt; will always return the same values as the underlying C library.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a1fffaaafb7cc996685bceb829c053cc4f7de43d" translate="yes" xml:space="preserve">
          <source>List</source>
          <target state="translated">List</target>
        </trans-unit>
        <trans-unit id="29c9d470de128561132f93d1517a546cc93f2ef7" translate="yes" xml:space="preserve">
          <source>List (default all) actions, breakpoints and watch expressions</source>
          <target state="translated">列表(默认为全部)动作、断点和观察表达式</target>
        </trans-unit>
        <trans-unit id="4f52dc39b8b924455cea92e15110632fa2352d9b" translate="yes" xml:space="preserve">
          <source>List &lt;code&gt;incr+1&lt;/code&gt; lines starting at &lt;code&gt;min&lt;/code&gt; .</source>
          <target state="translated">列出从 &lt;code&gt;min&lt;/code&gt; 开始的 &lt;code&gt;incr+1&lt;/code&gt; 行。</target>
        </trans-unit>
        <trans-unit id="1e2df285394e85b16a4d8402b790e30140168156" translate="yes" xml:space="preserve">
          <source>List &lt;code&gt;incr+1&lt;/code&gt; lines starting at &lt;code&gt;min&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="605938e2092b0e1418a4f6b86421f6d6aadd1b04" translate="yes" xml:space="preserve">
          <source>List Operators (Rightward)</source>
          <target state="translated">列表操作符(向右</target>
        </trans-unit>
        <trans-unit id="ea9c7040ec8c47c48d227dc0186264691d25d357" translate="yes" xml:space="preserve">
          <source>List a single line.</source>
          <target state="translated">列一个单行。</target>
        </trans-unit>
        <trans-unit id="43aa9239459d3ee11976e9110444e7fe09843446" translate="yes" xml:space="preserve">
          <source>List all build directories of distributions that have been tested successfully but have not yet been installed. See also &lt;code&gt;install_tested&lt;/code&gt; .</source>
          <target state="translated">列出已成功测试但尚未安装的发行版的所有构建目录。另请参阅 &lt;code&gt;install_tested&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="5da3c7994a3d61d34d9ca024ec7ac9503eb70a17" translate="yes" xml:space="preserve">
          <source>List all installed modules with their versions</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="370cf490cd3daa93894252ec5158b9c077c837f2" translate="yes" xml:space="preserve">
          <source>List assignment in scalar context returns the number of elements produced by the expression on the right side of the assignment:</source>
          <target state="translated">标量上下文中的列表赋值返回赋值右侧表达式所产生的元素数。</target>
        </trans-unit>
        <trans-unit id="45a5a84ab7f0560a41223626f7533a814734e050" translate="yes" xml:space="preserve">
          <source>List constants</source>
          <target state="translated">列表常数</target>
        </trans-unit>
        <trans-unit id="55d8dbd99ddbc695154ff187f15da85365e9e00f" translate="yes" xml:space="preserve">
          <source>List constants are lists, not arrays. To index or slice them, they must be placed in parentheses.</source>
          <target state="translated">列表常量是列表,不是数组。要对它们进行索引或切分,必须将它们放在括号中。</target>
        </trans-unit>
        <trans-unit id="c9230863aaf9811a194bc857bc0390c6326f13d9" translate="yes" xml:space="preserve">
          <source>List constants are not inlined unless you are using Perl v5.20 or higher. In v5.20 or higher, they are still not read-only, but that may change in future versions.</source>
          <target state="translated">除非你使用的是 Perl v5.20 或更高版本,否则列表常量不会内联。在 v5.20 或更高版本中,它们仍然不是只读的,但在未来的版本中可能会改变。</target>
        </trans-unit>
        <trans-unit id="5d9c4f2773006f355714dc08c4a64f23012ee969" translate="yes" xml:space="preserve">
          <source>List directories as they are searched</source>
          <target state="translated">根据搜索结果列出目录</target>
        </trans-unit>
        <trans-unit id="0865484d5c94ce11961bf51a22181df567484e88" translate="yes" xml:space="preserve">
          <source>List first window of lines from subroutine.</source>
          <target state="translated">列出子程序的第一个窗口的行。</target>
        </trans-unit>
        <trans-unit id="31c6b16c6806f38a9abbe22903640ceb79a76b77" translate="yes" xml:space="preserve">
          <source>List form of piped open not implemented</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="19ff7a57a5555c3820cb313b589ff3e43f5801b3" translate="yes" xml:space="preserve">
          <source>List lines &lt;code&gt;min&lt;/code&gt; through &lt;code&gt;max&lt;/code&gt; . &lt;code&gt;l -&lt;/code&gt; is synonymous to &lt;code&gt;-&lt;/code&gt; .</source>
          <target state="translated">列出从 &lt;code&gt;min&lt;/code&gt; 到 &lt;code&gt;max&lt;/code&gt; 的行。 &lt;code&gt;l -&lt;/code&gt; 是同义 &lt;code&gt;-&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="b6413580d4bb0dff3a638f87f617274c7d3fa5ba" translate="yes" xml:space="preserve">
          <source>List lines &lt;code&gt;min&lt;/code&gt; through &lt;code&gt;max&lt;/code&gt;. &lt;code&gt;l -&lt;/code&gt; is synonymous to &lt;code&gt;-&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3b2f29a334d30972bc8a9045f68baae0dc3ec6d8" translate="yes" xml:space="preserve">
          <source>List next window of lines.</source>
          <target state="translated">列出下一个窗口的行。</target>
        </trans-unit>
        <trans-unit id="5359c0166343c48f9f035c401a1a6fd47a5d3c30" translate="yes" xml:space="preserve">
          <source>List of</source>
          <target state="translated">列表</target>
        </trans-unit>
        <trans-unit id="f96221500e5dff9b2e5b2d0d52441200d3fe59bd" translate="yes" xml:space="preserve">
          <source>List of CHECK values</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c7b2bf307cdc3add3b560b3cf9c6d9638160226a" translate="yes" xml:space="preserve">
          <source>List of _CHECK_ values</source>
          <target state="translated">_CHECK_值列表</target>
        </trans-unit>
        <trans-unit id="3fbb95646db607d6a530d90010130a90b221c352" translate="yes" xml:space="preserve">
          <source>List of four elements.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="42e3128876d62127f71da94d3596564663a283a7" translate="yes" xml:space="preserve">
          <source>List of handlers that have been registered.</source>
          <target state="translated">已登记的处理人名单。</target>
        </trans-unit>
        <trans-unit id="942be8ea6b09c5850208d901ada25608760abbb7" translate="yes" xml:space="preserve">
          <source>List of libraries that need to be linked with when linking a perl binary which includes this extension. Only those libraries that actually exist are included. These are written to a file and used when linking perl.</source>
          <target state="translated">当链接一个包含该扩展的perl二进制文件时,需要链接的库列表。只包括那些实际存在的库。这些库会被写入一个文件,并在链接perl时使用。</target>
        </trans-unit>
        <trans-unit id="25c88a0a5acb1948d9832032688b4c20061ebe55" translate="yes" xml:space="preserve">
          <source>List of lines in currently loaded file.</source>
          <target state="translated">当前加载文件中的行列表。</target>
        </trans-unit>
        <trans-unit id="e2c751f0916c7f646852ece1bcfc81eae8d05b8f" translate="yes" xml:space="preserve">
          <source>List of object files, defaults to '$(BASEEXT)$(OBJ_EXT)', but can be a long string or an array containing all object files, e.g. &quot;tkpBind.o tkpButton.o tkpCanvas.o&quot; or [&quot;tkpBind.o&quot;, &quot;tkpButton.o&quot;, &quot;tkpCanvas.o&quot;]</source>
          <target state="translated">对象文件列表,默认为'$(BASEEXT)$(OBJ_EXT)',但可以是一个长字符串或包含所有对象文件的数组,例如 &quot;tkpBind.o tkpButton.o tkpCanvas.o &quot;或[&quot;tkpBind.o&quot;、&quot;tkpButton.o&quot;、&quot;tkpCanvas.o&quot;]。</target>
        </trans-unit>
        <trans-unit id="5c1db3ac864f059bce7875da034cf8c723ca64e1" translate="yes" xml:space="preserve">
          <source>List of those libraries that are needed but can be linked in dynamically at run time on this platform. SunOS/Solaris does not need this because ld records the information (from LDLOADLIBS) into the object file. This list is used to create a .bs (bootstrap) file.</source>
          <target state="translated">列出那些需要但可以在这个平台上运行时动态链接进来的库。SunOS/Solaris不需要这个,因为ld会把信息(来自LDLOADLIBS)记录到对象文件中。这个列表用来创建一个.bs(bootstrap)文件。</target>
        </trans-unit>
        <trans-unit id="5a0cf49d555f62d3d4e052b6541ec31f30e51960" translate="yes" xml:space="preserve">
          <source>List of those libraries which can or must be linked into the shared library when created using ld. These may be static or dynamic libraries. LD_RUN_PATH is a colon separated list of the directories in LDLOADLIBS. It is passed as an environment variable to the process that links the shared library.</source>
          <target state="translated">当使用ld创建时,可以或必须链接到共享库中的库的列表。这些库可以是静态库,也可以是动态库。LD_RUN_PATH是一个用冒号分隔的LDLOADLIBS目录列表。它作为一个环境变量传递给链接共享库的进程。</target>
        </trans-unit>
        <trans-unit id="ebae2310224ffad36ada7ef466a7460f111ae936" translate="yes" xml:space="preserve">
          <source>List of three arguments.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="be97ad6178a15f3564cecdb6dad31b0f188dfe5e" translate="yes" xml:space="preserve">
          <source>List of three elements. Second is an array reference; third is a string.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1fc4309268bf3b8e9ff25ca0646ecdbee8a86829" translate="yes" xml:space="preserve">
          <source>List of two elements: &lt;code&gt;typemap&lt;/code&gt; element from &lt;code&gt;%args&lt;/code&gt;; current working directory.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2868b38546ebc5d5d8fcc48449cbafe99e0ffc2a" translate="yes" xml:space="preserve">
          <source>List out all pre-prompt Perl command actions.</source>
          <target state="translated">列出所有Perl命令前的动作。</target>
        </trans-unit>
        <trans-unit id="b2fda16ba9c5deaf514c003911417714fab1f6a2" translate="yes" xml:space="preserve">
          <source>List out post-prompt Perl command actions.</source>
          <target state="translated">列出提示后的Perl命令操作。</target>
        </trans-unit>
        <trans-unit id="b85c9a7b9160438294dae5b78f69ab7f0a89edb4" translate="yes" xml:space="preserve">
          <source>List out pre-prompt debugger commands.</source>
          <target state="translated">列出提示前的调试器命令。</target>
        </trans-unit>
        <trans-unit id="c433826fb0a01d3298adbd1cec75ac79e366fe70" translate="yes" xml:space="preserve">
          <source>List previous window of lines.</source>
          <target state="translated">列出上一个窗口的行。</target>
        </trans-unit>
        <trans-unit id="6828bea1ce4a116f7cab52f1ff715d22eb63c991" translate="yes" xml:space="preserve">
          <source>List subroutine names [not] matching the regex.</source>
          <target state="translated">列出[不]匹配regex的子程序名称。</target>
        </trans-unit>
        <trans-unit id="080ba82727d1a06b5322db16c03b125c4027029d" translate="yes" xml:space="preserve">
          <source>List the modules by the specified authors.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="07d9bedea128205ac0ccf6ba46b2275b7e0355dc" translate="yes" xml:space="preserve">
          <source>List value constructors</source>
          <target state="translated">列表值构造器</target>
        </trans-unit>
        <trans-unit id="3b83ab8a9c9e9daa0f3c240465a14ac3cfec98b6" translate="yes" xml:space="preserve">
          <source>List values are denoted by separating individual values by commas (and enclosing the list in parentheses where precedence requires it):</source>
          <target state="translated">列表值用逗号隔开单个值来表示(如果优先级需要,则用括号将列表括起来)。</target>
        </trans-unit>
        <trans-unit id="9c332d7d437db4bb1a089aef08dedde1d03aa848" translate="yes" xml:space="preserve">
          <source>List values in scalar context</source>
          <target state="translated">在标量上下文中列出数值</target>
        </trans-unit>
        <trans-unit id="3e21f245885fcb8d2afb9ad390e31a12b2893368" translate="yes" xml:space="preserve">
          <source>List which methods may be called on the result of the evaluated expression. The expression may evaluated to a reference to a blessed object, or to a package name.</source>
          <target state="translated">列出哪些方法可以被调用到被评估的表达式的结果上。表达式可以被评估为对受祝福对象的引用,也可以被评估为包名。</target>
        </trans-unit>
        <trans-unit id="d8403bab2922ebc2678fad6cf5cb327231181154" translate="yes" xml:space="preserve">
          <source>List::Util</source>
          <target state="translated">List::Util</target>
        </trans-unit>
        <trans-unit id="0553bce08d5ad663737a32d66e461a6fde4d42cc" translate="yes" xml:space="preserve">
          <source>List::Util - A selection of general-utility list subroutines</source>
          <target state="translated">List::Util-一个普通实用的列表子程序的选择。</target>
        </trans-unit>
        <trans-unit id="e6ae9327a79eb9d0433ed0271e4debca709ad198" translate="yes" xml:space="preserve">
          <source>List::Util::XS</source>
          <target state="translated">List::Util::XS</target>
        </trans-unit>
        <trans-unit id="6a577f2f652a9865e261b6b1b9108f10eb35a6b7" translate="yes" xml:space="preserve">
          <source>List::Util::XS - Indicate if List::Util was compiled with a C compiler</source>
          <target state="translated">List::Util::XS-指示List::Util是否是用C编译器编译的。</target>
        </trans-unit>
        <trans-unit id="577f684095ccbc8608cf104c7d53ed608fc27e62" translate="yes" xml:space="preserve">
          <source>Listed below are functions that are either completely unimplemented or else have been implemented differently on various platforms. Following each description will be, in parentheses, a list of platforms that the description applies to.</source>
          <target state="translated">下面列出的是完全没有实现的功能,或者在不同平台上有不同的实现方式。在每个描述后面的括号中,将列出该描述适用的平台。</target>
        </trans-unit>
        <trans-unit id="4785b15f1934e1c153e7966e7a875d6c72382735" translate="yes" xml:space="preserve">
          <source>Listed below are functions that are either completely unimplemented or else have been implemented differently on various platforms. Preceding each description will be, in parentheses, a list of platforms that the description applies to.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c518fb067439705f3ff5fa5b4a62b9be3afa31ae" translate="yes" xml:space="preserve">
          <source>Listen</source>
          <target state="translated">Listen</target>
        </trans-unit>
        <trans-unit id="484fc3879bbb2d1bc964407cad68611698ffceb6" translate="yes" xml:space="preserve">
          <source>Listen =&amp;gt; INT</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6dea679b659a4bf77b36d5e329bc16ce43947db3" translate="yes" xml:space="preserve">
          <source>Listen should be an integer value or left unset.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c2100cb1ce0771ebf5c66d34af2b3109940abd61" translate="yes" xml:space="preserve">
          <source>Listing available encodings</source>
          <target state="translated">列出可用的编码</target>
        </trans-unit>
        <trans-unit id="0827ddb4ed49430cfb1658042c94b816fe2859f3" translate="yes" xml:space="preserve">
          <source>Lists all available encodings, one per line, in case-insensitive order. Note that only the canonical names are listed; many aliases exist. For example, the names are case-insensitive, and many standard and common aliases work, such as &quot;latin1&quot; for &quot;ISO-8859-1&quot;, or &quot;ibm850&quot; instead of &quot;cp850&quot;, or &quot;winlatin1&quot; for &quot;cp1252&quot;. See &lt;a href=&quot;Encode::Supported&quot;&gt;Encode::Supported&lt;/a&gt; for a full discussion.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dd09e23888b88d8b373ca4d91ed87f3200a2d3a8" translate="yes" xml:space="preserve">
          <source>Lists all available encodings, one per line, in case-insensitive order. Note that only the canonical names are listed; many aliases exist. For example, the names are case-insensitive, and many standard and common aliases work, such as &quot;latin1&quot; for &quot;ISO-8859-1&quot;, or &quot;ibm850&quot; instead of &quot;cp850&quot;, or &quot;winlatin1&quot; for &quot;cp1252&quot;. See &lt;a href=&quot;encode/supported&quot;&gt;Encode::Supported&lt;/a&gt; for a full discussion.</source>
          <target state="translated">列出所有可用的编码，每行一种，不区分大小写。请注意，仅列出了规范名称；存在许多别名。例如，名称不区分大小写，并且可以使用许多标准别名和通用别名，例如&amp;ldquo; ISO-8859-1&amp;rdquo;的&amp;ldquo; latin1&amp;rdquo;，而不是&amp;ldquo; cp850&amp;rdquo;的&amp;ldquo; ibm850&amp;rdquo;或&amp;ldquo; cp1252&amp;rdquo;的&amp;ldquo; winlatin1&amp;rdquo; 。有关完整的讨论，请参见&lt;a href=&quot;encode/supported&quot;&gt;Encode :: Supported&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="e4e9b933aa47588e5dca2e5d37752f783428eced" translate="yes" xml:space="preserve">
          <source>Lists known issues and incompatibilities; &lt;code&gt;&lt;a href=&quot;http://gd.tuwien.ac.at/utils/archivers/star/README.otherbugs&quot;&gt;http://gd.tuwien.ac.at/utils/archivers/star/README.otherbugs&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">列出已知问题和不兼容性； &lt;code&gt;&lt;a href=&quot;http://gd.tuwien.ac.at/utils/archivers/star/README.otherbugs&quot;&gt;http://gd.tuwien.ac.at/utils/archivers/star/README.otherbugs&lt;/a&gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="974b5b0f1238cd291d1764b895cc33d03520382a" translate="yes" xml:space="preserve">
          <source>Lists known issues and incompatibilities; &lt;code&gt;http://gd.tuwien.ac.at/utils/archivers/star/README.otherbugs&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="14b97602e24bdf80cc94582bec0e02d773290ecc" translate="yes" xml:space="preserve">
          <source>Lists may be assigned to only when each element of the list is itself legal to assign to:</source>
          <target state="translated">只有当列表中的每个元素本身是合法的时,才可以将列表分配给。</target>
        </trans-unit>
        <trans-unit id="c5a2888cd48d3f7aa2e98cd01aee025fae061e84" translate="yes" xml:space="preserve">
          <source>Literal ASCII TAB characters are now allowed in strings (and treated as &lt;code&gt;\t&lt;/code&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0213917f82ae95d80bb5989c7abf1f8ddda65a97" translate="yes" xml:space="preserve">
          <source>Literal conversions</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="527da73e406ed03ebcb72acc86b11111c4a02fcb" translate="yes" xml:space="preserve">
          <source>Literal uses of &lt;code&gt;{&lt;/code&gt; were deprecated in Perl 5.20, and some uses of it started to give deprecation warnings since. These cases were made fatal in Perl 5.26. Due to an oversight, not all cases of a use of a literal &lt;code&gt;{&lt;/code&gt; got a deprecation warning. Some cases started warning in Perl 5.26, and were made fatal in Perl 5.30. Other cases started in Perl 5.28, and were made fatal in 5.32.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5147c26642d830ab230197606d4cf605ea045572" translate="yes" xml:space="preserve">
          <source>Literal vertical space in [] is illegal except under /x in regex; marked by &amp;lt;-- HERE in m/%s/</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="74a788cee27d549015a0786732c662e05cdd7567" translate="yes" xml:space="preserve">
          <source>Lithuania</source>
          <target state="translated">Lithuania</target>
        </trans-unit>
        <trans-unit id="91575e88330ca0a393b09df24c2f9572b830580f" translate="yes" xml:space="preserve">
          <source>Ll</source>
          <target state="translated">Ll</target>
        </trans-unit>
        <trans-unit id="ddcb77ff769ea54ca622848f6bedd4004fa4f4fa" translate="yes" xml:space="preserve">
          <source>Load</source>
          <target state="translated">Load</target>
        </trans-unit>
        <trans-unit id="7006eb18a426109e42c387f4ebcfd765f549c2c8" translate="yes" xml:space="preserve">
          <source>Load &lt;code&gt;local::lib&lt;/code&gt; (think like &lt;code&gt;-I&lt;/code&gt; for loading lib paths). Too bad &lt;code&gt;-l&lt;/code&gt; was already taken.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9ec750aae1f96446e6d4c2da3ed090454e5eb47c" translate="yes" xml:space="preserve">
          <source>Load a different math lib, see &lt;a href=&quot;#MATH-LIBRARY&quot;&gt;&quot;MATH LIBRARY&quot;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dfb2a396182dae27999fc6c1e32de77266a8eaa5" translate="yes" xml:space="preserve">
          <source>Load a different math lib, see &lt;a href=&quot;#MATH-LIBRARY&quot;&gt;MATH LIBRARY&lt;/a&gt;.</source>
          <target state="translated">加载其他数学库，请参见&lt;a href=&quot;#MATH-LIBRARY&quot;&gt;MATH LIBRARY&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="97f3b50d057eea8062f2d58a28647a93d5cccf56" translate="yes" xml:space="preserve">
          <source>Load a different math lib, see &lt;a href=&quot;#Math-Library&quot;&gt;&quot;Math Library&quot;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="44a359a67f4a6d92b34e91186041854ab36b846b" translate="yes" xml:space="preserve">
          <source>Load a different math lib, see &lt;a href=&quot;#Math-Library&quot;&gt;Math Library&lt;/a&gt;.</source>
          <target state="translated">加载其他数学库，请参见&lt;a href=&quot;#Math-Library&quot;&gt;数学库&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="26c9c83eb2148dde20d87505b058099c18e18cdd" translate="yes" xml:space="preserve">
          <source>Load a harness replacement class.</source>
          <target state="translated">加载一个线束替换类。</target>
        </trans-unit>
        <trans-unit id="3ab8a70aafed206e446c89069a6d6fa487286375" translate="yes" xml:space="preserve">
          <source>Load functions only on demand</source>
          <target state="translated">负载功能只在需要时才会出现</target>
        </trans-unit>
        <trans-unit id="1a6bf14720b01e30066247880d6ebc3b8752469c" translate="yes" xml:space="preserve">
          <source>Load subroutines only on demand</source>
          <target state="translated">仅按需加载子程序</target>
        </trans-unit>
        <trans-unit id="d792f29bac65ac823df5b7bb2984ae1cc96bc863" translate="yes" xml:space="preserve">
          <source>Load the C Fcntl.h defines</source>
          <target state="translated">加载C Fcntl.h的定义。</target>
        </trans-unit>
        <trans-unit id="41ca4f17e3678d8fa4513a23c57b7eb4caf19350" translate="yes" xml:space="preserve">
          <source>Load the file that has the CPAN configuration data. This should have the same format as the standard</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="240fa313380982dac95b53cefb0c75077c026845" translate="yes" xml:space="preserve">
          <source>Load the state from a file</source>
          <target state="translated">从文件中加载状态</target>
        </trans-unit>
        <trans-unit id="15cac79f7c6e29d135cac8ed345f5ee74ad107b9" translate="yes" xml:space="preserve">
          <source>Load various IO modules</source>
          <target state="translated">加载各种IO模块</target>
        </trans-unit>
        <trans-unit id="59ee7110b16f2ee9279e975045a71b3b2753da6e" translate="yes" xml:space="preserve">
          <source>LoadFile</source>
          <target state="translated">LoadFile</target>
        </trans-unit>
        <trans-unit id="9cd272bfb77c57c025d780a7adea2d2f4a39e607" translate="yes" xml:space="preserve">
          <source>Loading DLLs and ordinals in DLLs</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9030f4b47aa2abda4199dcc7ac6f1cb72c9d6947" translate="yes" xml:space="preserve">
          <source>Loads &lt;code&gt;ExtUtils::Typemaps::Excommunicated&lt;/code&gt;, instantiates an object, and dumps it as an embeddable typemap for use directly in your XS file.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="478aa4ede7f109d8fe9ce74fc47e542819bd58d3" translate="yes" xml:space="preserve">
          <source>Loads Perl library from &lt;code&gt;$exedir/../dll/lib/&lt;/code&gt;.</source>
          <target state="translated">从 &lt;code&gt;$exedir/../dll/lib/&lt;/code&gt; 加载Perl库。</target>
        </trans-unit>
        <trans-unit id="7a90cb96849f4ba39ef789f1926fb83b5216a75c" translate="yes" xml:space="preserve">
          <source>Loads a dynamic link library into memory and returns its module handle. This handle can be used with Win32::GetProcAddress() and Win32::FreeLibrary(). This function is deprecated. Use the Win32::API module instead.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3c5210c4cd9f4652e7e267673947f320fe973e2f" translate="yes" xml:space="preserve">
          <source>Loads a specified module and imports the default functions to the specified package.</source>
          <target state="translated">加载指定的模块,并将默认函数导入到指定的包中。</target>
        </trans-unit>
        <trans-unit id="27e6bb733433394f480bba5733da627a3f3f2045" translate="yes" xml:space="preserve">
          <source>Loads a specified module and imports the default functions.</source>
          <target state="translated">加载指定模块并导入默认函数。</target>
        </trans-unit>
        <trans-unit id="0912e26f46f2862f9bc8f741f795bbefe5ccdd67" translate="yes" xml:space="preserve">
          <source>Loads a specified module to the specified package.</source>
          <target state="translated">将指定的模块加载到指定的包中。</target>
        </trans-unit>
        <trans-unit id="6ec299bdf7d010c1eee08526d7bd0161603d96f6" translate="yes" xml:space="preserve">
          <source>Loads a specified module.</source>
          <target state="translated">加载指定的模块。</target>
        </trans-unit>
        <trans-unit id="e32cb3524fbd8048df24f387ab1d261efd4fc528" translate="yes" xml:space="preserve">
          <source>Loads the DLL LIBRARYNAME and calls the function DllRegisterServer.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6cb5e0e921899c7d9aa0924124cdcb6c8851e055" translate="yes" xml:space="preserve">
          <source>Loads the DLL LIBRARYNAME and calls the function DllUnregisterServer.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="194a22a082c50fda80d3d163aa9acda90d655677" translate="yes" xml:space="preserve">
          <source>Loads the handler classes defined in &lt;a href=&quot;#config&quot;&gt;&quot;config&quot;&lt;/a&gt;. For example, given a config:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4a312f5b131e98b974541ced8733bc202310a2a5" translate="yes" xml:space="preserve">
          <source>Loads the handler classes defined in &lt;a href=&quot;#config&quot;&gt;config&lt;/a&gt;. For example, given a config:</source>
          <target state="translated">加载&lt;a href=&quot;#config&quot;&gt;config中&lt;/a&gt;定义的处理程序类。例如，给定一个配置：</target>
        </trans-unit>
        <trans-unit id="2288e3df6687abb6b74ab409c03ac48535ed3150" translate="yes" xml:space="preserve">
          <source>Loads the module whose name is pointed to by the string part of &lt;code&gt;name&lt;/code&gt;. Note that the actual module name, not its filename, should be given. Eg, &quot;Foo::Bar&quot; instead of &quot;Foo/Bar.pm&quot;. ver, if specified and not NULL, provides version semantics similar to &lt;code&gt;use Foo::Bar VERSION&lt;/code&gt;. The optional trailing arguments can be used to specify arguments to the module's &lt;code&gt;import()&lt;/code&gt; method, similar to &lt;code&gt;use Foo::Bar VERSION LIST&lt;/code&gt;; their precise handling depends on the flags. The flags argument is a bitwise-ORed collection of any of &lt;code&gt;PERL_LOADMOD_DENY&lt;/code&gt;, &lt;code&gt;PERL_LOADMOD_NOIMPORT&lt;/code&gt;, or &lt;code&gt;PERL_LOADMOD_IMPORT_OPS&lt;/code&gt; (or 0 for no flags).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ec6dda1ab28094112405a17ad65b1a4c1c089d63" translate="yes" xml:space="preserve">
          <source>Loads the module whose name is pointed to by the string part of name. Note that the actual module name, not its filename, should be given. Eg, &quot;Foo::Bar&quot; instead of &quot;Foo/Bar.pm&quot;. flags can be any of PERL_LOADMOD_DENY, PERL_LOADMOD_NOIMPORT, or PERL_LOADMOD_IMPORT_OPS (or 0 for no flags). ver, if specified and not NULL, provides version semantics similar to &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; Foo::Bar VERSION&lt;/code&gt; . The optional trailing SV* arguments can be used to specify arguments to the module's import() method, similar to &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; Foo::Bar VERSION LIST&lt;/code&gt; . They must be terminated with a final NULL pointer. Note that this list can only be omitted when the PERL_LOADMOD_NOIMPORT flag has been used. Otherwise at least a single NULL pointer to designate the default import list is required.</source>
          <target state="translated">加载名称由名称的字符串部分指向的模块。请注意，应提供实际的模块名称，而不是其文件名。例如，&amp;ldquo; Foo :: Bar&amp;rdquo;而不是&amp;ldquo; Foo / Bar.pm&amp;rdquo;。标志可以是PERL_LOADMOD_DENY，PERL_LOADMOD_NOIMPORT或PERL_LOADMOD_IMPORT_OPS中的任何一个（如果没有标志，则为0）。 ver，如果指定且不为NULL，则提供类似于 &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; Foo::Bar VERSION&lt;/code&gt; 版本语义。可选的尾随SV *参数可用于指定模块的import（）方法的参数，类似于 &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; Foo::Bar VERSION LIST&lt;/code&gt; 。它们必须以最终的NULL指针终止。请注意，仅当使用PERL_LOADMOD_NOIMPORT标志时，才能省略此列表。否则，至少需要一个NULL指针来指定默认的导入列表。</target>
        </trans-unit>
        <trans-unit id="9af5b63a9cb9853b15da20ea4f2739623dc82021" translate="yes" xml:space="preserve">
          <source>Loc.U</source>
          <target state="translated">Loc.U</target>
        </trans-unit>
        <trans-unit id="2c161b9d2652a245b17c473e85af35d98c964e27" translate="yes" xml:space="preserve">
          <source>Loc_ar.U</source>
          <target state="translated">Loc_ar.U</target>
        </trans-unit>
        <trans-unit id="40cd835b717a79093cb71f794169679d3511a012" translate="yes" xml:space="preserve">
          <source>Loc_sed.U</source>
          <target state="translated">Loc_sed.U</target>
        </trans-unit>
        <trans-unit id="b62225661a9783f7a6a2c6e6f754c699e4dfbc8e" translate="yes" xml:space="preserve">
          <source>Local Locales</source>
          <target state="translated">本地化</target>
        </trans-unit>
        <trans-unit id="00b7d8ac28ed6d0a7686172cc54cac83dde1640a" translate="yes" xml:space="preserve">
          <source>Local configuration data for libnet</source>
          <target state="translated">libnet的本地配置数据</target>
        </trans-unit>
        <trans-unit id="2073176912b2b8b08756b78673e90f32f9412f5a" translate="yes" xml:space="preserve">
          <source>Local hosts should normally respond to pings within milliseconds. However, on a very congested network it may take up to 3 seconds or longer to receive an echo packet from the remote host. If the timeout is set too low under these conditions, it will appear that the remote host is not reachable (which is almost the truth).</source>
          <target state="translated">本地主机通常应在几毫秒内响应ping。然而,在一个非常拥挤的网络上,可能需要3秒或更长时间才能收到来自远程主机的回波包。如果在这些条件下超时时间设置得太低,就会出现远程主机无法到达的情况(这几乎是事实)。</target>
        </trans-unit>
        <trans-unit id="5ce134969fa4b38910928473dcd30b211050ffe0" translate="yes" xml:space="preserve">
          <source>Local patches</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7c690298b945c1b37cc5a68671d9b773af108fb2" translate="yes" xml:space="preserve">
          <source>Local settings</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="53b6cc762cf095afa6ac2b3f63960344e064751c" translate="yes" xml:space="preserve">
          <source>LocalAddr =&amp;gt; STRING</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3479965474a90e55723b0f25860802c53406e91d" translate="yes" xml:space="preserve">
          <source>LocalAddrInfo =&amp;gt; ARRAY</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="21dabe6c778984c0b6509601202090746e803410" translate="yes" xml:space="preserve">
          <source>LocalHost =&amp;gt; STRING</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="de9b0a319772622c356126ecbc602688d6563804" translate="yes" xml:space="preserve">
          <source>LocalPort</source>
          <target state="translated">LocalPort</target>
        </trans-unit>
        <trans-unit id="0b1eb8a4f4bc001c793e0eea29e95b79014c3314" translate="yes" xml:space="preserve">
          <source>LocalPort =&amp;gt; STRING</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e824d201d4911c9432bae5428ad07c94b3eaabb9" translate="yes" xml:space="preserve">
          <source>LocalService =&amp;gt; STRING</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3d14f2f76fdd1296a6f5facde16712babc39964d" translate="yes" xml:space="preserve">
          <source>Locale '%s' contains (at least) the following characters which have unexpected meanings: %s The Perl program will use the expected meanings</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0705df55ca759471ac9bb2feda1c0edcd06beb2b" translate="yes" xml:space="preserve">
          <source>Locale '%s' may not work well.%s</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="29d6a411ea768d6e339737cbc631007347c4656b" translate="yes" xml:space="preserve">
          <source>Locale is not completely independent. The</source>
          <target state="translated">Locale不是完全独立的。该</target>
        </trans-unit>
        <trans-unit id="2ecddee9e3454bdf482ac7866a6d45e31677a35b" translate="yes" xml:space="preserve">
          <source>Locale-aware XS code</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="944d1183f1e4f233c0975643c2ef4f71a04349e2" translate="yes" xml:space="preserve">
          <source>Locale-related functions and macros</source>
          <target state="translated">本地相关功能和宏</target>
        </trans-unit>
        <trans-unit id="e8ffa7590c272791934be71fefca2983045527a4" translate="yes" xml:space="preserve">
          <source>Locale/*.pl</source>
          <target state="translated">Locale/*.pl</target>
        </trans-unit>
        <trans-unit id="1f8d3cc6a62e48187b6914a4e521248e770e765b" translate="yes" xml:space="preserve">
          <source>Locale::Country</source>
          <target state="translated">Locale::Country</target>
        </trans-unit>
        <trans-unit id="711ea7f4d30a8250ee3539542d2d19015e5ecdec" translate="yes" xml:space="preserve">
          <source>Locale::Country - standard codes for country identification</source>
          <target state="translated">Locale::Country ----国家识别的标准代码。</target>
        </trans-unit>
        <trans-unit id="745a3f2e63c8527b20fd7a0effbd2a4f6ce52b10" translate="yes" xml:space="preserve">
          <source>Locale::Currency</source>
          <target state="translated">Locale::Currency</target>
        </trans-unit>
        <trans-unit id="c9d7708330810bdeae6d8e6f009ab34981fb3578" translate="yes" xml:space="preserve">
          <source>Locale::Currency - standard codes for currency identification</source>
          <target state="translated">Locale::Currency-用于货币识别的标准代码。</target>
        </trans-unit>
        <trans-unit id="a2f93f9cc8bf81f232cf25c9d6170a176bd3c8f2" translate="yes" xml:space="preserve">
          <source>Locale::Language</source>
          <target state="translated">Locale::Language</target>
        </trans-unit>
        <trans-unit id="cbd3f9670295ab004a97a8799e46f114e838f7c9" translate="yes" xml:space="preserve">
          <source>Locale::Language - standard codes for language identification</source>
          <target state="translated">Locale::Language-语言识别的标准代码。</target>
        </trans-unit>
        <trans-unit id="a9d8403dd9e14d9c4a74e42c449f4f4083d77a9b" translate="yes" xml:space="preserve">
          <source>Locale::Maketext</source>
          <target state="translated">Locale::Maketext</target>
        </trans-unit>
        <trans-unit id="58f6640492c0aec7031aee510f4ce0bcac4b2a22" translate="yes" xml:space="preserve">
          <source>Locale::Maketext - framework for localization</source>
          <target state="translated">Locale::Maketext-本地化框架。</target>
        </trans-unit>
        <trans-unit id="e28b946d05a8b6576abf4d9a367dd68f9175de8e" translate="yes" xml:space="preserve">
          <source>Locale::Maketext does not use any special syntax to differentiate bracket notation methods from normal class or object methods. This design makes it vulnerable to format string attacks whenever it is used to process strings provided by untrusted users.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d9b3c0ab0595b5cdd83722214636b337ad110e39" translate="yes" xml:space="preserve">
          <source>Locale::Maketext does support blacklist and whitelist functionality to limit which methods may be called as bracket notation methods.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4ffc03bfc5c484b62d9372e1420bdf253f5b3f52" translate="yes" xml:space="preserve">
          <source>Locale::Maketext offers a variety of methods, which fall into three categories:</source>
          <target state="translated">Locale::Maketext提供了多种方法,分为三类。</target>
        </trans-unit>
        <trans-unit id="0376cece04f73d6cbbeda92b6c96963d0c327dc4" translate="yes" xml:space="preserve">
          <source>Locale::Maketext::Cookbook</source>
          <target state="translated">Locale::Maketext::Cookbook</target>
        </trans-unit>
        <trans-unit id="e7d10311ab56423a10a6401a972e219ed34731ef" translate="yes" xml:space="preserve">
          <source>Locale::Maketext::Cookbook - recipes for using Locale::Maketext</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a5723d6c0c42ee05086667e38fd4249fe7082e8c" translate="yes" xml:space="preserve">
          <source>Locale::Maketext::Guts</source>
          <target state="translated">Locale::Maketext::Guts</target>
        </trans-unit>
        <trans-unit id="63bea57dac9566b0aa40481ae087dc206e13e8ee" translate="yes" xml:space="preserve">
          <source>Locale::Maketext::Guts - Deprecated module to load Locale::Maketext utf8 code</source>
          <target state="translated">Locale::Maketext::Guts-用于加载Locale::Maketext utf8代码的废弃模块。</target>
        </trans-unit>
        <trans-unit id="b14392dcdae7ce47ee917b41b3e73f1a3b72f5e1" translate="yes" xml:space="preserve">
          <source>Locale::Maketext::GutsLoader</source>
          <target state="translated">Locale::Maketext::GutsLoader</target>
        </trans-unit>
        <trans-unit id="9810a1053985ebcf2f9b5544107826a653c00a65" translate="yes" xml:space="preserve">
          <source>Locale::Maketext::GutsLoader - Deprecated module to load Locale::Maketext utf8 code</source>
          <target state="translated">Locale::Maketext::GutsLoader-用于加载Locale::Maketext utf8代码的废弃模块。</target>
        </trans-unit>
        <trans-unit id="a239b132192c48779d9a0ee403ad81c93ab75902" translate="yes" xml:space="preserve">
          <source>Locale::Maketext::Simple</source>
          <target state="translated">Locale::Maketext::Simple</target>
        </trans-unit>
        <trans-unit id="a942c8cd15bd2125fe42db2a486e9feebf1cfa35" translate="yes" xml:space="preserve">
          <source>Locale::Maketext::Simple - Simple interface to Locale::Maketext::Lexicon</source>
          <target state="translated">Locale::Maketext::Simple-Locale::Maketext::Lexicon的简单接口。</target>
        </trans-unit>
        <trans-unit id="31310b7b3a3180c515d5a42eececda4ed908af34" translate="yes" xml:space="preserve">
          <source>Locale::Maketext::TPJ13</source>
          <target state="translated">Locale::Maketext::TPJ13</target>
        </trans-unit>
        <trans-unit id="b7159c2a5a142d4334282c641ce964b49b8e476c" translate="yes" xml:space="preserve">
          <source>Locale::Maketext::TPJ13 -- article about software localization</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1ee43c469c3726bd84652212d4ca88cc335a5967" translate="yes" xml:space="preserve">
          <source>Locale::Script</source>
          <target state="translated">Locale::Script</target>
        </trans-unit>
        <trans-unit id="8f438e3df7fafcc383b453fd3213f4653605e9c0" translate="yes" xml:space="preserve">
          <source>Locale::Script - standard codes for script identification</source>
          <target state="translated">Locale::Script-脚本识别的标准代码。</target>
        </trans-unit>
        <trans-unit id="a222060e32289bf6910ac4a07a10733be500bd99" translate="yes" xml:space="preserve">
          <source>Locales</source>
          <target state="translated">Locales</target>
        </trans-unit>
        <trans-unit id="92e24d2019e2a32f9830f5f805e70b0e0aef8c2f" translate="yes" xml:space="preserve">
          <source>Locales according to the default UCA rules include am (Amharic) without &lt;code&gt;[reorder Ethi]&lt;/code&gt;, bg (Bulgarian) without &lt;code&gt;[reorder Cyrl]&lt;/code&gt;, chr (Cherokee) without &lt;code&gt;[reorder Cher]&lt;/code&gt;, de (German), en (English), fr (French), ga (Irish), id (Indonesian), it (Italian), ka (Georgian) without &lt;code&gt;[reorder Geor]&lt;/code&gt;, mn (Mongolian) without &lt;code&gt;[reorder Cyrl Mong]&lt;/code&gt;, ms (Malay), nl (Dutch), pt (Portuguese), ru (Russian) without &lt;code&gt;[reorder Cyrl]&lt;/code&gt;, sw (Swahili), zu (Zulu).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f8764300ec3ae038b44ac23ce898f50ceb30676b" translate="yes" xml:space="preserve">
          <source>Locales are supported. There may be glitches when a locale is another EBCDIC code page which has some of the &lt;a href=&quot;#The-13-variant-characters&quot;&gt;code-page variant characters&lt;/a&gt; in other positions.</source>
          <target state="translated">支持语言环境。当语言环境是另一个EBCDIC代码页时，可能会出现故障，该&lt;a href=&quot;#The-13-variant-characters&quot;&gt;代码页&lt;/a&gt;在其他位置具有某些代码页变体字符。</target>
        </trans-unit>
        <trans-unit id="33d4312ea8caf12dbb4ec71dca19ee7924926ead" translate="yes" xml:space="preserve">
          <source>Localization and Perl: gettext breaks, Maketext fixes</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="32f83a14354ab144fa1eeefe381bdddf7ef6a4b6" translate="yes" xml:space="preserve">
          <source>Localization of elements of composite types</source>
          <target state="translated">复合类型元素的本地化</target>
        </trans-unit>
        <trans-unit id="87574e6a695fdc9051fd38476db62bcaa8e7cafd" translate="yes" xml:space="preserve">
          <source>Localization of globs</source>
          <target state="translated">球体的定位</target>
        </trans-unit>
        <trans-unit id="f2f69b5bf206324f99fe659a46e5c54c241d441a" translate="yes" xml:space="preserve">
          <source>Localization of special variables</source>
          <target state="translated">特殊变量的本地化</target>
        </trans-unit>
        <trans-unit id="56adc662b2ff25957a5294f0112a3c7b0d263e47" translate="yes" xml:space="preserve">
          <source>Localized deletion of elements of composite types</source>
          <target state="translated">复合类型元素的局部删除</target>
        </trans-unit>
        <trans-unit id="e60da19033e636198e96d7e490201c9c1369d134" translate="yes" xml:space="preserve">
          <source>Localizing &lt;code&gt;$.&lt;/code&gt; will not localize the filehandle's line count</source>
          <target state="translated">本地化 &lt;code&gt;$.&lt;/code&gt; 不会本地化文件句柄的行数</target>
        </trans-unit>
        <trans-unit id="8364e7e87819604234599a1511218996199f997e" translate="yes" xml:space="preserve">
          <source>Localizing changes</source>
          <target state="translated">变化本地化</target>
        </trans-unit>
        <trans-unit id="f408eed5847840b83469388030b3326ba3bf4885" translate="yes" xml:space="preserve">
          <source>Localizing tied arrays or hashes does not work. After exiting the scope the arrays or the hashes are not restored.</source>
          <target state="translated">本地化绑定的数组或散列不起作用。退出作用域后,数组或哈希值不能恢复。</target>
        </trans-unit>
        <trans-unit id="00e0ebc3f4b2567f4695fa9503d51f87733e190d" translate="yes" xml:space="preserve">
          <source>Locate directory of original perl script</source>
          <target state="translated">找到原始perl脚本的目录</target>
        </trans-unit>
        <trans-unit id="c6294c5b9baff7ccda4385a76937e4c98b9c0e02" translate="yes" xml:space="preserve">
          <source>Locate the CV corresponding to the currently executing sub or eval. If &lt;code&gt;db_seqp&lt;/code&gt; is non_null, skip CVs that are in the DB package and populate &lt;code&gt;*db_seqp&lt;/code&gt; with the cop sequence number at the point that the DB:: code was entered. (This allows debuggers to eval in the scope of the breakpoint rather than in the scope of the debugger itself.)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cffe84cd97aaf675f786b03919bbd1aad3c3fe1d" translate="yes" xml:space="preserve">
          <source>Locate the CV corresponding to the currently executing sub or eval. If db_seqp is non_null, skip CVs that are in the DB package and populate *db_seqp with the cop sequence number at the point that the DB:: code was entered. (This allows debuggers to eval in the scope of the breakpoint rather than in the scope of the debugger itself.)</source>
          <target state="translated">找到当前执行的子或eval对应的CV。如果db_seqp为non_null,则跳过DB包中的CV,用输入DB::代码时的cop序列号填充*db_seqp。(这使得调试器可以在断点的范围内而不是在调试器本身的范围内进行评价。)</target>
        </trans-unit>
        <trans-unit id="f5cb0ec5fe28860a73ac5e9c7f201c2864475a69" translate="yes" xml:space="preserve">
          <source>Locates the full path to the script bin directory to allow the use of paths relative to the bin directory.</source>
          <target state="translated">定位脚本bin目录的完整路径,允许使用相对bin目录的路径。</target>
        </trans-unit>
        <trans-unit id="90f656c2cec82492063f2f19f63b0344475a8752" translate="yes" xml:space="preserve">
          <source>Location of Perl</source>
          <target state="translated">Perl的位置</target>
        </trans-unit>
        <trans-unit id="e526b099baebb5894aa471d61a7294aea38b4fdb" translate="yes" xml:space="preserve">
          <source>Lock the database with fd &amp;amp; flock.</source>
          <target state="translated">用fd和flock锁定数据库。</target>
        </trans-unit>
        <trans-unit id="877d08a97c129fe96b732f20ebe8f52e02d93eca" translate="yes" xml:space="preserve">
          <source>Locking and error checking are left as an exercise for the reader. Don't forget them or you'll be quite sorry.</source>
          <target state="translated">锁定和错误检查是留给读者的练习。不要忘记它们,否则你会相当后悔。</target>
        </trans-unit>
        <trans-unit id="5c812093b2212c9a68f04fea78f378e5c17f025b" translate="yes" xml:space="preserve">
          <source>Locking this for exclusive access [by specifying &lt;code&gt;0&lt;/code&gt; for &lt;code&gt;$uShare&lt;/code&gt;] doesn't prevent access to the partitions on the disk nor their file systems. So other processes can still access any raw sectors within a partition and can use the file system on the disk as usual.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e083fbbbc4d1d6973e64d911c09f30a9d157b0ca" translate="yes" xml:space="preserve">
          <source>Locking this for exclusive access doesn't prevent access to the physical drive that the partition is on so other processes can still access the raw sectors that way. Locking this for exclusive access &lt;b&gt;does&lt;/b&gt; prevent other processes from opening the same raw partition and &lt;b&gt;does&lt;/b&gt; prevent access to the file system on it. It even prevents the current process from accessing the file system on that partition.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d95da6ca83293caed356315f7966585c98bbeb01" translate="yes" xml:space="preserve">
          <source>Locking this for exclusive access prevents all access to the floppy.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="66cac3a963a1045fd348fae956e2fc8becb2159a" translate="yes" xml:space="preserve">
          <source>Locking: The Trouble with fd</source>
          <target state="translated">锁定。fd的问题</target>
        </trans-unit>
        <trans-unit id="a0ee9e59f4952196e4f063486823a5e6655ed2ab" translate="yes" xml:space="preserve">
          <source>Locks and unlocks the value for an individual key of a hash. The value of a locked key cannot be changed.</source>
          <target state="translated">锁定和解锁一个哈希值的单个密钥。锁定的密钥的值不能改变。</target>
        </trans-unit>
        <trans-unit id="409c237554d2d89fa246a166165492e5479e6006" translate="yes" xml:space="preserve">
          <source>Locks are a handy tool to synchronize access to data, and using them properly is the key to safe shared data. Unfortunately, locks aren't without their dangers, especially when multiple locks are involved. Consider the following code:</source>
          <target state="translated">锁是同步访问数据的方便工具,正确使用锁是安全共享数据的关键。不幸的是,锁不是没有危险的,特别是涉及到多个锁的时候。考虑以下代码。</target>
        </trans-unit>
        <trans-unit id="d77ca7a462f2ee37cd5eeb13d2720840dd8f730e" translate="yes" xml:space="preserve">
          <source>Locks are recursive, which means it's okay for a thread to lock a variable more than once. The lock will last until the outermost &lt;code&gt;&lt;a href=&quot;functions/lock&quot;&gt;lock()&lt;/a&gt;&lt;/code&gt; on the variable goes out of scope. For example:</source>
          <target state="translated">锁是递归的，这意味着线程可以多次锁定变量是可以的。锁定将一直持续到变量的最外面的 &lt;code&gt;&lt;a href=&quot;functions/lock&quot;&gt;lock()&lt;/a&gt;&lt;/code&gt; 超出范围。例如：</target>
        </trans-unit>
        <trans-unit id="c5da8053ebc549397001271ac2e0aa42fd2e1379" translate="yes" xml:space="preserve">
          <source>Locks are recursive, which means it's okay for a thread to lock a variable more than once. The lock will last until the outermost &lt;code&gt;lock()&lt;/code&gt; on the variable goes out of scope. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fc0486b135937b6c03b868507a94d272ff8ac6f4" translate="yes" xml:space="preserve">
          <source>Locks on variables only affect &lt;code&gt;&lt;a href=&quot;functions/lock&quot;&gt;lock&lt;/a&gt;&lt;/code&gt; calls--they do</source>
          <target state="translated">变量上的锁仅影响 &lt;code&gt;&lt;a href=&quot;functions/lock&quot;&gt;lock&lt;/a&gt;&lt;/code&gt; 调用-它们会</target>
        </trans-unit>
        <trans-unit id="bf6b3c933353830be1f6195e3ebd4e20c5282db3" translate="yes" xml:space="preserve">
          <source>Locks on variables only affect &lt;code&gt;lock&lt;/code&gt; calls--they do</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5da97798dad8ca8d2be91a6ab0264ebfef22de7d" translate="yes" xml:space="preserve">
          <source>Locks record for a read operation for this process, while allowing other accessors to read the record.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c34a4fe30048f2f9c89009d31801cebec1a5e7be" translate="yes" xml:space="preserve">
          <source>Locks record for write.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2494e49f95e86d62c9e1df9443b971b1071d1eb2" translate="yes" xml:space="preserve">
          <source>Log all messages up to debug:</source>
          <target state="translated">将所有的信息记录下来,进行调试。</target>
        </trans-unit>
        <trans-unit id="ac20548f5a2664c1934f84717b314a50501d6ebb" translate="yes" xml:space="preserve">
          <source>Log an error that can't be ignored.</source>
          <target state="translated">记录一个不能忽略的错误。</target>
        </trans-unit>
        <trans-unit id="9f24d2b09c179c98a526a557d74f3d2be5514fb4" translate="yes" xml:space="preserve">
          <source>Log an error unless &lt;code&gt;$parser-&amp;gt;no_whining( TRUE );&lt;/code&gt; .</source>
          <target state="translated">记录错误，除非 &lt;code&gt;$parser-&amp;gt;no_whining( TRUE );&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="352c5f44c11749156243d487f189c562b58e4995" translate="yes" xml:space="preserve">
          <source>Log an error unless &lt;code&gt;$parser-&amp;gt;no_whining( TRUE );&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="598cba7875d82844d0ea4fd50137d27e20e9822b" translate="yes" xml:space="preserve">
          <source>Log critical messages, errors and warnings:</source>
          <target state="translated">记录关键信息、错误和警告。</target>
        </trans-unit>
        <trans-unit id="1cc66c8eb58fd8fd2198272ffebc6331b40fb88c" translate="yes" xml:space="preserve">
          <source>Log debugging info to STDERR.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2a127fbcd6604ca1cf80302b78e02d5ba87eed29" translate="yes" xml:space="preserve">
          <source>Log everything except informational messages:</source>
          <target state="translated">记录除信息信息以外的所有信息。</target>
        </trans-unit>
        <trans-unit id="346e7edbc99f3e01ce84957ff3c99842429de19b" translate="yes" xml:space="preserve">
          <source>Log into the remote FTP server with the given login information. If no arguments are given then the &lt;code&gt;Net::FTP&lt;/code&gt; uses the &lt;code&gt;Net::Netrc&lt;/code&gt; package to lookup the login information for the connected host. If no information is found then a login of</source>
          <target state="translated">使用给定的登录信息登录到远程FTP服务器。如果未提供任何参数，则 &lt;code&gt;Net::FTP&lt;/code&gt; 使用 &lt;code&gt;Net::Netrc&lt;/code&gt; 包查找所连接主机的登录信息。如果找不到信息，则登录</target>
        </trans-unit>
        <trans-unit id="38711dd5aba31d74455f59112be713add52892b6" translate="yes" xml:space="preserve">
          <source>Log to UDP port on &lt;code&gt;$remotehost&lt;/code&gt; instead of logging locally:</source>
          <target state="translated">登录到 &lt;code&gt;$remotehost&lt;/code&gt; 上的UDP端口，而不是本地登录：</target>
        </trans-unit>
        <trans-unit id="5e1bf4e3758f68132ff0d122f3d8b036581a8776" translate="yes" xml:space="preserve">
          <source>Log::Dispatch::Config::TestLog</source>
          <target state="translated">Log::Dispatch::Config::TestLog</target>
        </trans-unit>
        <trans-unit id="ef88b916547cdcd540b35fe969c4a4a3e3015dad" translate="yes" xml:space="preserve">
          <source>Logarithm base two [C99].</source>
          <target state="translated">对数基数二[C99].</target>
        </trans-unit>
        <trans-unit id="126a3068c345063640bada367b1b3170b97166a9" translate="yes" xml:space="preserve">
          <source>Logging if DEBUG (constant)</source>
          <target state="translated">如果DEBUG(常数),则进行日志记录</target>
        </trans-unit>
        <trans-unit id="786908e4097f50192db248aa36b5528e31277867" translate="yes" xml:space="preserve">
          <source>Logical And</source>
          <target state="translated">逻辑和</target>
        </trans-unit>
        <trans-unit id="4f0fe5e6156db1c8f396f9ada6968d19b442623d" translate="yes" xml:space="preserve">
          <source>Logical Defined-Or</source>
          <target state="translated">逻辑定义或</target>
        </trans-unit>
        <trans-unit id="27999dc9087d157951951d7c5ab5c57a64718d42" translate="yes" xml:space="preserve">
          <source>Logical Not</source>
          <target state="translated">逻辑性不强</target>
        </trans-unit>
        <trans-unit id="65eac6118ebdd55aa38b41f70efdf532e567ffd8" translate="yes" xml:space="preserve">
          <source>Logical Operators</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c27af685856a54b17004644154867c40474db6e5" translate="yes" xml:space="preserve">
          <source>Logical or and Exclusive Or</source>
          <target state="translated">逻辑或和独家或</target>
        </trans-unit>
        <trans-unit id="eaac42db96179506f42bd718fb8ac139cdc3650b" translate="yes" xml:space="preserve">
          <source>Logical paths specified by system variables containing comma-separated search lists are also allowed; hence &lt;code&gt;System:Modules&lt;/code&gt; is a valid filename, and the filesystem will prefix &lt;code&gt;Modules&lt;/code&gt; with each section of &lt;code&gt;System$Path&lt;/code&gt; until a name is made that points to an object on disk. Writing to a new file &lt;code&gt;System:Modules&lt;/code&gt; would be allowed only if &lt;code&gt;System$Path&lt;/code&gt; contains a single item list. The filesystem will also expand system variables in filenames if enclosed in angle brackets, so &lt;code&gt;&amp;lt;System$Dir&amp;gt;.Modules&lt;/code&gt; would look for the file &lt;code&gt;$ENV{'System$Dir'} . 'Modules'&lt;/code&gt; . The obvious implication of this is that &lt;b&gt;fully qualified filenames can start with &lt;code&gt;&amp;lt;&amp;gt;&lt;/code&gt; &lt;/b&gt; and should be protected when &lt;code&gt;&lt;a href=&quot;functions/open&quot;&gt;open&lt;/a&gt;&lt;/code&gt; is used for input.</source>
          <target state="translated">也允许由包含逗号分隔的搜索列表的系统变量指定的逻辑路径；因此， &lt;code&gt;System:Modules&lt;/code&gt; 是有效的文件名，并且文件系统将在 &lt;code&gt;System$Path&lt;/code&gt; 每个部分之前为 &lt;code&gt;Modules&lt;/code&gt; 加上前缀，直到建立一个指向磁盘上对象的名称为止。仅当 &lt;code&gt;System$Path&lt;/code&gt; 包含单个项目列表时，才允许写入新文件 &lt;code&gt;System:Modules&lt;/code&gt; 。如果用尖括号括起来，文件系统还将在文件名中扩展系统变量，因此 &lt;code&gt;&amp;lt;System$Dir&amp;gt;.Modules&lt;/code&gt; 将查找文件 &lt;code&gt;$ENV{'System$Dir'} . 'Modules'&lt;/code&gt; 。明显的含义是&lt;b&gt;完全限定的文件名可以以&lt;/b&gt;&lt;b&gt; &lt;code&gt;&amp;lt;&amp;gt;&lt;/code&gt; &lt;/b&gt;&lt;b&gt;开头&lt;/b&gt;&lt;b&gt; &lt;/b&gt;并且在将 &lt;code&gt;&lt;a href=&quot;functions/open&quot;&gt;open&lt;/a&gt;&lt;/code&gt; 用于输入时应加以保护。</target>
        </trans-unit>
        <trans-unit id="720bfdf023a4623ae35ff74918f32bc525e4e4ef" translate="yes" xml:space="preserve">
          <source>Logical paths specified by system variables containing comma-separated search lists are also allowed; hence &lt;code&gt;System:Modules&lt;/code&gt; is a valid filename, and the filesystem will prefix &lt;code&gt;Modules&lt;/code&gt; with each section of &lt;code&gt;System$Path&lt;/code&gt; until a name is made that points to an object on disk. Writing to a new file &lt;code&gt;System:Modules&lt;/code&gt; would be allowed only if &lt;code&gt;System$Path&lt;/code&gt; contains a single item list. The filesystem will also expand system variables in filenames if enclosed in angle brackets, so &lt;code&gt;&amp;lt;System$Dir&amp;gt;.Modules&lt;/code&gt; would look for the file &lt;code&gt;$ENV{'System$Dir'} . 'Modules'&lt;/code&gt;. The obvious implication of this is that &lt;b&gt;fully qualified filenames can start with &lt;code&gt;&amp;lt;&amp;gt;&lt;/code&gt;&lt;/b&gt; and the three-argument form of &lt;a href=&quot;perlfunc#open-FILEHANDLE%2CMODE%2CEXPR&quot;&gt;&lt;code&gt;open&lt;/code&gt;&lt;/a&gt; should always be used.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a2fc415f0920fda900bfdba2744ed1d28349d4d7" translate="yes" xml:space="preserve">
          <source>Logically impossible constraints will be identified immediately by thrown exceptions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="79852f7a308fa757ef46ef50b492fb84497039eb" translate="yes" xml:space="preserve">
          <source>Logically joins the arguments into a single string, and returns its SHA-1/224/256/384/512 digest encoded as a Base64 string.</source>
          <target state="translated">将参数逻辑地连接成一个单一的字符串,并将其SHA-1/224/256/384/512摘要编码为Base64字符串返回。</target>
        </trans-unit>
        <trans-unit id="efb5f37aee3b9a117751bc32852449eef4e74e78" translate="yes" xml:space="preserve">
          <source>Logically joins the arguments into a single string, and returns its SHA-1/224/256/384/512 digest encoded as a binary string.</source>
          <target state="translated">将参数逻辑地连接成一个单一的字符串,并返回其SHA-1/224/256/384/512编码为二进制字符串的摘要。</target>
        </trans-unit>
        <trans-unit id="a5c5c8e8c0f54246b1b313dd050b036a30efb0a2" translate="yes" xml:space="preserve">
          <source>Logically joins the arguments into a single string, and returns its SHA-1/224/256/384/512 digest encoded as a hexadecimal string.</source>
          <target state="translated">将参数逻辑地连接成一个单一的字符串,并返回其SHA-1/224/256/384/512编码的十六进制字符串。</target>
        </trans-unit>
        <trans-unit id="04b474494be5436c1b0b4486d175dd6df25d94bc" translate="yes" xml:space="preserve">
          <source>Logically joins the arguments into a single string, and uses it to update the current digest state. In other words, the following statements have the same effect:</source>
          <target state="translated">在逻辑上将参数连接成一个单一的字符串,并使用它来更新当前的摘要状态。换句话说,下面的语句具有相同的效果。</target>
        </trans-unit>
        <trans-unit id="aaef8ae01439927f0a6ee227f2d792c666fabc4e" translate="yes" xml:space="preserve">
          <source>Login name of the person who ran the Configure script and answered the questions. This is used to tag both</source>
          <target state="translated">运行配置脚本并回答问题的人的登录名。这将用于标记两个</target>
        </trans-unit>
        <trans-unit id="30c490b4b408ece1deda10e7b62b5b4cba9be12b" translate="yes" xml:space="preserve">
          <source>Logs will go on as long as they have to.</source>
          <target state="translated">日志只要有必要,就会继续下去。</target>
        </trans-unit>
        <trans-unit id="463552e32614f1099d813cd725ccdec3ad1aa628" translate="yes" xml:space="preserve">
          <source>Long Doubles on Tru64</source>
          <target state="translated">Tru64上的长双打</target>
        </trans-unit>
        <trans-unit id="943010215619f82aa64612ba50a6ccaed4ede293" translate="yes" xml:space="preserve">
          <source>Long Doubles.</source>
          <target state="translated">长双打。</target>
        </trans-unit>
        <trans-unit id="4d248c964e944a2e6c6cbd3e67c194423372f025" translate="yes" xml:space="preserve">
          <source>Long doubles</source>
          <target state="translated">长双打</target>
        </trans-unit>
        <trans-unit id="a209ad07aac520c10047b0552ae5c1c4441aaadc" translate="yes" xml:space="preserve">
          <source>Long integers. This is equivalent to T_IV but explicitly casts the return to type &lt;code&gt;long&lt;/code&gt; . The default typemap for &lt;code&gt;long&lt;/code&gt; is T_IV.</source>
          <target state="translated">长整数。这等效于T_IV，但显式将返回值强制转换为 &lt;code&gt;long&lt;/code&gt; 类型。 &lt;code&gt;long&lt;/code&gt; 的默认类型映射为T_IV。</target>
        </trans-unit>
        <trans-unit id="39185f77c0d669e9592abefffabc259acc02445d" translate="yes" xml:space="preserve">
          <source>Long integers. This is equivalent to T_IV but explicitly casts the return to type &lt;code&gt;long&lt;/code&gt;. The default typemap for &lt;code&gt;long&lt;/code&gt; is T_IV.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="210129fcaec84064f201e7b1b9a66e1a7acd7738" translate="yes" xml:space="preserve">
          <source>Long lines broken after an operator (except &lt;code&gt;and&lt;/code&gt; and &lt;code&gt;or&lt;/code&gt; ).</source>
          <target state="translated">运算符后的长行（ &lt;code&gt;and&lt;/code&gt; 和 &lt;code&gt;or&lt;/code&gt; 除外）。</target>
        </trans-unit>
        <trans-unit id="82e02e558af4f23a10d83ce8c5069dd6822db360" translate="yes" xml:space="preserve">
          <source>Long lines broken after an operator (except &lt;code&gt;and&lt;/code&gt; and &lt;code&gt;or&lt;/code&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="106ccce59a41316ca39a9a555b12f40ffd8ebb31" translate="yes" xml:space="preserve">
          <source>Long plaguing users of MakeMaker based modules has been the problem of getting basic information about the module out of the sources</source>
          <target state="translated">长期以来,困扰基于MakeMaker的模块用户的是如何从源头获取模块的基本信息的问题</target>
        </trans-unit>
        <trans-unit id="d680241590e9a19c54d2635978661f5bb8739734" translate="yes" xml:space="preserve">
          <source>Long regexps like this may impress your friends, but can be hard to decipher. In complex situations like this, the &lt;code&gt;//x&lt;/code&gt; modifier for a match is invaluable. It allows one to put nearly arbitrary whitespace and comments into a regexp without affecting their meaning. Using it, we can rewrite our 'extended' regexp in the more pleasing form</source>
          <target state="translated">像这样的长正则表达式可能会给您的朋友留下深刻的印象，但可能很难破译。在像这样的复杂情况下，匹配的 &lt;code&gt;//x&lt;/code&gt; 修饰符是无价的。它允许将几乎任意的空格和注释放入正则表达式中，而不会影响其含义。使用它，我们可以用更令人满意的形式重写&amp;ldquo;扩展&amp;rdquo;正则表达式</target>
        </trans-unit>
        <trans-unit id="ea6c5bcada74abc0711c9dae9786d4c7cc139f2a" translate="yes" xml:space="preserve">
          <source>Long regexps like this may impress your friends, but can be hard to decipher. In complex situations like this, the &lt;code&gt;/x&lt;/code&gt; modifier for a match is invaluable. It allows one to put nearly arbitrary whitespace and comments into a regexp without affecting their meaning. Using it, we can rewrite our &quot;extended&quot; regexp in the more pleasing form</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4f9e2648c307f1adbbaa0fd205252907f8be6f2a" translate="yes" xml:space="preserve">
          <source>Long sequences of elsifs will turn into nested ternary operators, which B::Deparse doesn't know how to indent nicely.</source>
          <target state="translated">长长的 elsifs 序列会变成嵌套的三元运算符,而 B::Deparse 不知道如何很好地缩进。</target>
        </trans-unit>
        <trans-unit id="5e129104b85153fb31ba0fceac8d1f977b315428" translate="yes" xml:space="preserve">
          <source>Long-running opcodes</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cf4ff04cfe182e8bc5dadb069506e27cabf50333" translate="yes" xml:space="preserve">
          <source>Look - search for key in dictionary file</source>
          <target state="translated">查找--在字典文件中搜索关键词</target>
        </trans-unit>
        <trans-unit id="6f72d2c8eec50883a232d838251fbb3eb807c0d1" translate="yes" xml:space="preserve">
          <source>Look around</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2505a112819d0c19797962a0a34b656ddfcb7762" translate="yes" xml:space="preserve">
          <source>Look at &lt;a href=&quot;http://www.perl.org/&quot;&gt;http://www.perl.org/&lt;/a&gt; to find out. If you are not using the latest released version, please try to replicate your bug on the latest stable release.</source>
          <target state="translated">查看&lt;a href=&quot;http://www.perl.org/&quot;&gt;http://www.perl.org/&lt;/a&gt;进行查找。如果您使用的不是最新发布的版本，请尝试在最新的稳定版本上复制您的错误。</target>
        </trans-unit>
        <trans-unit id="1788237e2a2e0b7dbd5185705c7d994a905e8de0" translate="yes" xml:space="preserve">
          <source>Look for a POD document named &lt;code&gt;$name&lt;/code&gt; in the cache. Returns the reference to the corresponding Pod::Cache::Item object or undef if not found.</source>
          <target state="translated">在缓存中查找名为 &lt;code&gt;$name&lt;/code&gt; 的POD文档。返回对相应Pod :: Cache :: Item对象的引用；如果未找到，则返回undef。</target>
        </trans-unit>
        <trans-unit id="fbd0681ce0f07813305ee76bbda2b9bf4d9e94bf" translate="yes" xml:space="preserve">
          <source>Look for a node or index entry named &lt;code&gt;$name&lt;/code&gt; in the object. Returns the unique id of the node (i.e. the second element of the array stored in the node array) or undef if not found.</source>
          <target state="translated">在对象中查找名为 &lt;code&gt;$name&lt;/code&gt; 的节点或索引条目。返回节点的唯一ID（即，存储在节点数组中的数组的第二个元素）或undef（如果找不到）。</target>
        </trans-unit>
        <trans-unit id="b4c07166f0931c9bcbab98ad548fcca2101f03fd" translate="yes" xml:space="preserve">
          <source>Look in &lt;a href=&quot;Test::More&quot;&gt;Test::More&lt;/a&gt;'s SEE ALSO for more testing modules.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="123c1cf1f88ba14e6964d416656f6e7d8fd3e930" translate="yes" xml:space="preserve">
          <source>Look in &lt;a href=&quot;more&quot;&gt;Test::More&lt;/a&gt;'s SEE ALSO for more testing modules.</source>
          <target state="translated">在&lt;a href=&quot;more&quot;&gt;Test :: More中&lt;/a&gt;查找更多的测试模块。</target>
        </trans-unit>
        <trans-unit id="0f1649ed1326706b3a529a44e1b35a34e5184e5a" translate="yes" xml:space="preserve">
          <source>Look up Perl documentation in Pod format.</source>
          <target state="translated">以Pod格式查找Perl文档。</target>
        </trans-unit>
        <trans-unit id="c69ec9ef84491acf135ee455e26c4726d6d3736b" translate="yes" xml:space="preserve">
          <source>Look up the entry in the cop hints hash</source>
          <target state="translated">查一下警察提示中的条目。</target>
        </trans-unit>
        <trans-unit id="014395dfa88deac6c1367d0000e26afdf4422e38" translate="yes" xml:space="preserve">
          <source>Look up the entry in the cop hints hash &lt;code&gt;cophh&lt;/code&gt; with the key specified by &lt;code&gt;keypv&lt;/code&gt; and &lt;code&gt;keylen&lt;/code&gt;. If &lt;code&gt;flags&lt;/code&gt; has the &lt;code&gt;COPHH_KEY_UTF8&lt;/code&gt; bit set, the key octets are interpreted as UTF-8, otherwise they are interpreted as Latin-1. &lt;code&gt;hash&lt;/code&gt; is a precomputed hash of the key string, or zero if it has not been precomputed. Returns a mortal scalar copy of the value associated with the key, or &lt;code&gt;&amp;amp;PL_sv_placeholder&lt;/code&gt; if there is no value associated with the key.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="67f3f361744fabd99e65f601642d504f07f990e2" translate="yes" xml:space="preserve">
          <source>Look up the hint entry in the cop</source>
          <target state="translated">查一下警察中的提示条目</target>
        </trans-unit>
        <trans-unit id="0fee7ddf829801d66655e7ce043a04dd396f49fc" translate="yes" xml:space="preserve">
          <source>Look up the hint entry in the cop &lt;code&gt;cop&lt;/code&gt; with the key specified by &lt;code&gt;keypv&lt;/code&gt; and &lt;code&gt;keylen&lt;/code&gt;. If &lt;code&gt;flags&lt;/code&gt; has the &lt;code&gt;COPHH_KEY_UTF8&lt;/code&gt; bit set, the key octets are interpreted as UTF-8, otherwise they are interpreted as Latin-1. &lt;code&gt;hash&lt;/code&gt; is a precomputed hash of the key string, or zero if it has not been precomputed. Returns a mortal scalar copy of the value associated with the key, or &lt;code&gt;&amp;amp;PL_sv_placeholder&lt;/code&gt; if there is no value associated with the key.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f10edb39dcb279e59fbd91c8271e8ebb8f360ce1" translate="yes" xml:space="preserve">
          <source>Look-around assertions are zero-width patterns which match a specific pattern without including it in &lt;code&gt;$&amp;amp;&lt;/code&gt; . Positive assertions match when their subpattern matches, negative assertions match when their subpattern fails. Look-behind matches text up to the current match position, look-ahead matches text following the current match position.</source>
          <target state="translated">环视断言是零宽度模式，该模式与特定模式匹配，但不包含在 &lt;code&gt;$&amp;amp;&lt;/code&gt; 中。正断言在子模式匹配时匹配，负断言在子模式失败时匹配。&amp;ldquo;后向匹配&amp;rdquo;匹配直到当前匹配位置的文本，&amp;ldquo;前瞻&amp;rdquo;匹配当前匹配位置之后的文本。</target>
        </trans-unit>
        <trans-unit id="66105958c37278697eabc3c9dfaee00ab8f9d704" translate="yes" xml:space="preserve">
          <source>Lookaround Assertions</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5aa1ce4ba86088b9e85e8744c8f85ec1b81ce088" translate="yes" xml:space="preserve">
          <source>Lookaround assertions are zero-width patterns which match a specific pattern without including it in &lt;code&gt;$&amp;amp;&lt;/code&gt;. Positive assertions match when their subpattern matches, negative assertions match when their subpattern fails. Lookbehind matches text up to the current match position, lookahead matches text following the current match position.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b99f3f115e8bd3af8ea91944ca784a0a9cfdd772" translate="yes" xml:space="preserve">
          <source>Lookbehind longer than %d not implemented in regex m/%s/</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="724a065c84668bb1516bf7e41f33f4d7062d0ec4" translate="yes" xml:space="preserve">
          <source>Looking ahead and looking behind</source>
          <target state="translated">瞻前顾后</target>
        </trans-unit>
        <trans-unit id="ddd7aa41b84e676f5291b91d7146d3d34c4b037d" translate="yes" xml:space="preserve">
          <source>Looking at data and -w and v</source>
          <target state="translated">看数据和-w和v</target>
        </trans-unit>
        <trans-unit id="afd51bda07c9e5b3e347f595bec67763e831628e" translate="yes" xml:space="preserve">
          <source>Looking at it another way, writing portable code is usually about willfully limiting your available choices. Naturally, it takes discipline and sacrifice to do that. The product of portability and convenience may be a constant. You have been warned.</source>
          <target state="translated">从另一个角度来看,编写可移植的代码通常是故意限制你的可用选择。自然,要做到这一点需要纪律和牺牲。可移植性和便利性的产物可能是一个常态。你已经被警告过了。</target>
        </trans-unit>
        <trans-unit id="e8e461609613edac0a408d3ea9b1090c941ca168" translate="yes" xml:space="preserve">
          <source>Looking at your</source>
          <target state="translated">看着你的</target>
        </trans-unit>
        <trans-unit id="b9aa086b4410a1e5dda5b6bd9fecaa602b967f8c" translate="yes" xml:space="preserve">
          <source>Looking in to &lt;a href=&quot;http://search.cpan.org/perldoc/Plack&quot;&gt;Plack&lt;/a&gt; and modern Perl web frameworks is highly recommended, though; web programming in Perl has evolved a long way from the old days of simple CGI scripts.</source>
          <target state="translated">展望到&lt;a href=&quot;http://search.cpan.org/perldoc/Plack&quot;&gt;普拉克&lt;/a&gt;和现代的Perl Web框架强烈建议，虽然，Perl中的Web编程已从简单的CGI脚本的过去发展了很长的路要走。</target>
        </trans-unit>
        <trans-unit id="b407a01503c3f111b5f6d36e40ef6584bf2fa1ec" translate="yes" xml:space="preserve">
          <source>Looking into &lt;a href=&quot;https://plackperl.org&quot;&gt;https://plackperl.org&lt;/a&gt; and modern Perl web frameworks is highly recommended, though; web programming in Perl has evolved a long way from the old days of simple CGI scripts.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="24076d6129adc62ded56328acb2536c0df4e3f06" translate="yes" xml:space="preserve">
          <source>Looking up every message is not the easiest way, so let perl to do it for you. Use the diagnostics pragma with turns perl's normal messages into longer discussions on the topic.</source>
          <target state="translated">查阅每一条消息并不是最简单的方法,所以让perl来帮你做。使用 diagnostics pragma 可以将 perl 的普通消息变成更长的主题讨论。</target>
        </trans-unit>
        <trans-unit id="0cda5c2d87b5464569d98d6b83dc0ced023afb49" translate="yes" xml:space="preserve">
          <source>Looking up module information / loading at runtime</source>
          <target state="translated">查询模块信息/在运行时加载</target>
        </trans-unit>
        <trans-unit id="747df9a5145420389182a3a0e2f8fb4f1afad4e4" translate="yes" xml:space="preserve">
          <source>Looks OK, after it's been through the syntax check (perl -c scriptname), we run it and all we get is a blank line again! Hmmmm.</source>
          <target state="translated">看起来没问题,在通过语法检查(perl -c scriptname)后,我们运行它,得到的又是一行空白。嗯。</target>
        </trans-unit>
        <trans-unit id="79047f1eed1c43aae002a2db39c10123a7158dcc" translate="yes" xml:space="preserve">
          <source>Looks ahead one (Unicode) character in the text currently being lexed. Returns the codepoint (unsigned integer value) of the next character, or -1 if lexing has reached the end of the input text. To consume the peeked character, use &lt;a href=&quot;#lex_read_unichar&quot;&gt;&quot;lex_read_unichar&quot;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9e1ff3f5f8cd27194462e5af7c79ade692faba9a" translate="yes" xml:space="preserve">
          <source>Looks ahead one (Unicode) character in the text currently being lexed. Returns the codepoint (unsigned integer value) of the next character, or -1 if lexing has reached the end of the input text. To consume the peeked character, use &lt;a href=&quot;#lex_read_unichar&quot;&gt;lex_read_unichar&lt;/a&gt;.</source>
          <target state="translated">在当前被词法化的文本中向前看一个（Unicode）字符。返回下一个字符的代码点（无符号整数值）；如果词法到达输入文本的末尾，则返回-1。要使用偷看的字符，请使用&lt;a href=&quot;#lex_read_unichar&quot;&gt;lex_read_unichar&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="56a09e0b7dcffea4a7ed21e9b73140689a5030bc" translate="yes" xml:space="preserve">
          <source>Looks for MakeMaker-like</source>
          <target state="translated">寻找类似MakeMaker的产品</target>
        </trans-unit>
        <trans-unit id="f560b4b8c550fee26628fb62462e2a0f00ebfb7f" translate="yes" xml:space="preserve">
          <source>Looks for Perl DLL in the directory &lt;code&gt;$exedir/../dll&lt;/code&gt;;</source>
          <target state="translated">在 &lt;code&gt;$exedir/../dll&lt;/code&gt; 目录中寻找Perl DLL ；</target>
        </trans-unit>
        <trans-unit id="0e20c33c03f2909dd222479a34a94e62a5aa2710" translate="yes" xml:space="preserve">
          <source>Looks good, let's just continue off the end of the script:</source>
          <target state="translated">看起来不错,让我们继续从剧本的结尾开始。</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
