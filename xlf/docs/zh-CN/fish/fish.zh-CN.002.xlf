<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="zh-CN" datatype="htmlbody" original="fish">
    <body>
      <group id="fish">
        <trans-unit id="4f10862d2cb42eba3132cb49d2ba2a80e3864525" translate="yes" xml:space="preserve">
          <source>For example, if you wanted to have a function &lt;code&gt;ll&lt;/code&gt;, you would add a text file &lt;code&gt;ll.fish&lt;/code&gt; to &lt;code&gt;~/.config/fish/functions&lt;/code&gt;:</source>
          <target state="translated">例如，如果要使用 &lt;code&gt;ll&lt;/code&gt; 函数，则可以将文本文件 &lt;code&gt;ll.fish&lt;/code&gt; 添加到 &lt;code&gt;~/.config/fish/functions&lt;/code&gt; ：</target>
        </trans-unit>
        <trans-unit id="631584c9382e007cb93a95331a33fec25ea95d0e" translate="yes" xml:space="preserve">
          <source>For example, the following is a function definition that calls the command &lt;code&gt;ls&lt;/code&gt; with the argument '&lt;code&gt;-l&lt;/code&gt;' to print a detailed listing of the contents of the current directory:</source>
          <target state="translated">例如，以下是一个函数定义，该函数调用带有参数 &lt;code&gt;-l&lt;/code&gt; 的命令 &lt;code&gt;ls&lt;/code&gt; 来打印当前目录内容的详细列表：</target>
        </trans-unit>
        <trans-unit id="059c3e8cce263b2945a18ac90b2637e10a8026b1" translate="yes" xml:space="preserve">
          <source>For example:</source>
          <target state="translated">例如:</target>
        </trans-unit>
        <trans-unit id="9b35e52823563d2df240637c363f5b52ee523904" translate="yes" xml:space="preserve">
          <source>For examples of how to write your own complex completions, study the completions in &lt;code&gt;/usr/share/fish/completions&lt;/code&gt;. (The exact path depends on your chosen installation prefix and may be slightly different)</source>
          <target state="translated">有关如何编写自己的复杂补全的示例，请在 &lt;code&gt;/usr/share/fish/completions&lt;/code&gt; 中研究补全。（确切的路径取决于您选择的安装前缀，并且可能会略有不同）</target>
        </trans-unit>
        <trans-unit id="bbba6181daff6006d824b40726c5e1dc21c20696" translate="yes" xml:space="preserve">
          <source>For loops can be used to iterate over a list. For example, a list of files:</source>
          <target state="translated">For循环可以用来对一个列表进行迭代。例如,一个文件的列表。</target>
        </trans-unit>
        <trans-unit id="0d3b4b55cdd235f8a297cfd58fd2b4aaeb478949" translate="yes" xml:space="preserve">
          <source>For more details, see &lt;a href=&quot;index#debugging&quot;&gt;Debugging fish scripts&lt;/a&gt; in the &lt;code&gt;fish&lt;/code&gt; manual.</source>
          <target state="translated">有关更多详细信息，请参见 &lt;code&gt;fish&lt;/code&gt; 手册中的&lt;a href=&quot;index#debugging&quot;&gt;调试fish脚本&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="2fc141152e052520326e534bbd191caeb550504d" translate="yes" xml:space="preserve">
          <source>For more information on how to define new event handlers, see the documentation for the &lt;a href=&quot;commands#function&quot;&gt;function&lt;/a&gt; command.</source>
          <target state="translated">有关如何定义新事件处理程序的更多信息，请参见&lt;a href=&quot;commands#function&quot;&gt;function&lt;/a&gt;命令的文档。</target>
        </trans-unit>
        <trans-unit id="6895247d91fcffa104e9a4003d47294a8b67a455" translate="yes" xml:space="preserve">
          <source>For more information, read the documentation for the block constructs, such as &lt;code&gt;if&lt;/code&gt;, &lt;code&gt;for&lt;/code&gt; and &lt;code&gt;while&lt;/code&gt;.</source>
          <target state="translated">有关更多信息，请阅读有关块结构的文档，例如 &lt;code&gt;if&lt;/code&gt; ， &lt;code&gt;for&lt;/code&gt; 和 &lt;code&gt;while&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="b8d92b5c7148803c36e855152c078c15224a9486" translate="yes" xml:space="preserve">
          <source>For numbers, &lt;code&gt;.&lt;/code&gt; is always the radix character regardless of locale - &lt;code&gt;2.5&lt;/code&gt;, not &lt;code&gt;2,5&lt;/code&gt;. Scientific notation (&lt;code&gt;10e5&lt;/code&gt;) is also available.</source>
          <target state="translated">对于数字， &lt;code&gt;.&lt;/code&gt; 始终是基数字符，而与区域设置无关 &lt;code&gt;2.5&lt;/code&gt; ，而不是 &lt;code&gt;2,5&lt;/code&gt; 。科学符号（ &lt;code&gt;10e5&lt;/code&gt; ）也可用。</target>
        </trans-unit>
        <trans-unit id="d790b402d79ac1a723c790313bcd679999474630" translate="yes" xml:space="preserve">
          <source>Frequently Asked Questions</source>
          <target state="translated">常问问题</target>
        </trans-unit>
        <trans-unit id="817a23516d79c9310b8cbcd3fbb553ae7f962425" translate="yes" xml:space="preserve">
          <source>From an interactive shell, the commands below exit with a return value of zero:</source>
          <target state="translated">在交互式shell中,以下命令退出时的返回值为0。</target>
        </trans-unit>
        <trans-unit id="68add3d9773584e2619f672ebe5f9d4745e5e9ea" translate="yes" xml:space="preserve">
          <source>From now on, we'll pretend your prompt is just a '&lt;code&gt;&amp;gt;&lt;/code&gt;' to save space.</source>
          <target state="translated">从现在开始，我们假装您的提示只是一个' &lt;code&gt;&amp;gt;&lt;/code&gt; '，以节省空间。</target>
        </trans-unit>
        <trans-unit id="2b961dea1dc0c60ddf9a2c8e9d090f6f7d082483" translate="yes" xml:space="preserve">
          <source>Functions</source>
          <target state="translated">Functions</target>
        </trans-unit>
        <trans-unit id="daf9c1f469f134e463969d3e8181e558bbde191a" translate="yes" xml:space="preserve">
          <source>Functions are programs written in the fish syntax. They group together one or more commands and their arguments using a single name. It can also be used to start a specific command with additional arguments.</source>
          <target state="translated">函数是用fish语法编写的程序。它们用一个名称将一个或多个命令及其参数组合在一起。它也可以用来启动一个带有附加参数的特定命令。</target>
        </trans-unit>
        <trans-unit id="89f90915711f79d63d40ae94fbe45e944677e599" translate="yes" xml:space="preserve">
          <source>Functions beginning with the string &lt;code&gt;__fish_print_&lt;/code&gt; print a newline separated list of strings. For example, &lt;code&gt;__fish_print_filesystems&lt;/code&gt; prints a list of all known file systems. Functions beginning with &lt;code&gt;__fish_complete_&lt;/code&gt; print out a newline separated list of completions with descriptions. The description is separated from the completion by a tab character.</source>
          <target state="translated">以字符串 &lt;code&gt;__fish_print_&lt;/code&gt; 开头的函数将打印以换行符分隔的字符串列表。例如， &lt;code&gt;__fish_print_filesystems&lt;/code&gt; 打印所有已知文件系统的列表。以 &lt;code&gt;__fish_complete_&lt;/code&gt; 开头的函数会打印出以换行符分隔的带有说明的补全列表。描述与结束符之间用制表符分隔。</target>
        </trans-unit>
        <trans-unit id="bfd6b853607d78b9cac90686ca5ac5f2f2bd0492" translate="yes" xml:space="preserve">
          <source>Functions can be defined on the commandline or in a configuration file, but they can also be automatically loaded. This method of defining functions has several advantages. An autoloaded function becomes available automatically to all running shells. If the function definition is changed, all running shells will automatically reload the altered version. Startup time and memory usage is improved, etc.</source>
          <target state="translated">函数可以在命令行或配置文件中定义,但也可以自动加载。这种定义函数的方法有几个优点。自动加载的函数会自动对所有正在运行的shell可用。如果函数定义被改变,所有运行中的shell将自动重新加载改变后的版本。改善了启动时间和内存使用情况等。</target>
        </trans-unit>
        <trans-unit id="45aaac446e8af8ab443ebb79de1921177d9fc9c4" translate="yes" xml:space="preserve">
          <source>Fundle</source>
          <target state="translated">Fundle</target>
        </trans-unit>
        <trans-unit id="1dbc937890de836b0044393faedad472b64f7496" translate="yes" xml:space="preserve">
          <source>Further help and development</source>
          <target state="translated">进一步的帮助和发展</target>
        </trans-unit>
        <trans-unit id="bcbbc69b089ac1c6106198168f95bbc56b4fa684" translate="yes" xml:space="preserve">
          <source>Future feature flags</source>
          <target state="translated">未来特征标志</target>
        </trans-unit>
        <trans-unit id="3dc04827b1d89f032f341434dadfd4fcc6c503c2" translate="yes" xml:space="preserve">
          <source>GNU style long options, like '&lt;code&gt;--colors&lt;/code&gt;'. GNU style long options can be more than one character long, are preceded by two hyphens, and may not be grouped together. Option arguments may be specified in the following parameter ('&lt;code&gt;--quoting-style shell&lt;/code&gt;') or by appending the option with a '&lt;code&gt;=&lt;/code&gt;' and the value ('&lt;code&gt;--quoting-style=shell&lt;/code&gt;'). GNU style long options may be abbreviated so long as the abbreviation is unique ('&lt;code&gt;--h&lt;/code&gt;') is equivalent to '&lt;code&gt;--help&lt;/code&gt;' if help is the only long option beginning with an 'h').</source>
          <target state="translated">GNU样式的长选项，例如' &lt;code&gt;--colors&lt;/code&gt; '。GNU样式的long选项可以超过一个字符长，并且以两个连字符开头，并且不能组合在一起。选项参数可以在以下参数（' &lt;code&gt;--quoting-style shell&lt;/code&gt; '）中指定，也可以通过在选项后附加' &lt;code&gt;=&lt;/code&gt; '和值（' &lt;code&gt;--quoting-style=shell&lt;/code&gt; '）来指定。只要缩写是唯一的，就可以缩写GNU风格的long选项（如果help是唯一以'h'开头的长选项，则缩写是唯一的（ &lt;code&gt;--h&lt;/code&gt; ）等效于 &lt;code&gt;--help&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="d19c496fc9fc5f17e29b156659c99fdebbdf355e" translate="yes" xml:space="preserve">
          <source>Get the length of a list with &lt;code&gt;count&lt;/code&gt;:</source>
          <target state="translated">获取带有 &lt;code&gt;count&lt;/code&gt; 的列表的长度：</target>
        </trans-unit>
        <trans-unit id="9a0f73ca6aa746ede1e77153dd3bf5bb16e841ab" translate="yes" xml:space="preserve">
          <source>Getting Help</source>
          <target state="translated">获得帮助</target>
        </trans-unit>
        <trans-unit id="76e7a3a3f9c225fe820ba7e9cff10ea2a73b79a1" translate="yes" xml:space="preserve">
          <source>Getting started</source>
          <target state="translated">开始</target>
        </trans-unit>
        <trans-unit id="097b5d5320d0735796306d389e915b1392ea4a90" translate="yes" xml:space="preserve">
          <source>Groups:</source>
          <target state="translated">Groups:</target>
        </trans-unit>
        <trans-unit id="c47ae15370cfe1ed2781eedc1dc2547d12d9e972" translate="yes" xml:space="preserve">
          <source>Help</source>
          <target state="translated">Help</target>
        </trans-unit>
        <trans-unit id="0053f4880938c6ad45d9f6ae784ae7aa588de2e2" translate="yes" xml:space="preserve">
          <source>Help on a specific builtin can also be obtained with the &lt;code&gt;-h&lt;/code&gt; parameter. For instance, to obtain help on the &lt;code&gt;fg&lt;/code&gt; builtin, either type &lt;code&gt;fg -h&lt;/code&gt; or &lt;code&gt;help fg&lt;/code&gt;.</source>
          <target state="translated">也可以使用 &lt;code&gt;-h&lt;/code&gt; 参数获得有关特定内置命令的帮助。例如，为了获得帮助 &lt;code&gt;fg&lt;/code&gt; 内置，或者键入 &lt;code&gt;fg -h&lt;/code&gt; 或 &lt;code&gt;help fg&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="4f5d69f1e4fa9190f3df409c8af9094f4963c8a1" translate="yes" xml:space="preserve">
          <source>Here is a list of some useful commands:</source>
          <target state="translated">下面是一些有用的命令列表。</target>
        </trans-unit>
        <trans-unit id="7a509c793438fa230f1278ed402f9c7e9018572d" translate="yes" xml:space="preserve">
          <source>History searches can be aborted by pressing the escape key.</source>
          <target state="translated">按回车键可以中止历史搜索。</target>
        </trans-unit>
        <trans-unit id="67bc332b46b3f3dc1b8024a5e5cfdee70680168b" translate="yes" xml:space="preserve">
          <source>Hit tab again to cycle through the possibilities.</source>
          <target state="translated">再次点击标签,循环浏览各种可能性。</target>
        </trans-unit>
        <trans-unit id="0fb159db1e28fce0aea599e71e51612c11b25f22" translate="yes" xml:space="preserve">
          <source>Home directory expansion</source>
          <target state="translated">首页目录扩展</target>
        </trans-unit>
        <trans-unit id="d5208f2bd161f7ef9e4786ba2058053cc8cefa22" translate="yes" xml:space="preserve">
          <source>How can I use `-` as a shortcut for `cd -`?</source>
          <target state="translated">如何使用`-`作为`cd -`的快捷方式?</target>
        </trans-unit>
        <trans-unit id="ba1155cc4fa464e6593f08ba2b8723aab74c8f1c" translate="yes" xml:space="preserve">
          <source>How do I change the greeting message?</source>
          <target state="translated">如何更改问候语?</target>
        </trans-unit>
        <trans-unit id="13c4a91c9a86c9c981e277c7f5e4a2ed6189509e" translate="yes" xml:space="preserve">
          <source>How do I customize my syntax highlighting colors?</source>
          <target state="translated">如何自定义语法高亮颜色?</target>
        </trans-unit>
        <trans-unit id="a694102af5424918d28a1f9662a1aa3950673c08" translate="yes" xml:space="preserve">
          <source>How do I get the exit status of a command?</source>
          <target state="translated">如何获取命令的退出状态?</target>
        </trans-unit>
        <trans-unit id="0e58d9d321d50cf0c49be8ad0ed48955a88a6bce" translate="yes" xml:space="preserve">
          <source>How do I make fish my default shell?</source>
          <target state="translated">如何让鱼儿成为我的默认外壳?</target>
        </trans-unit>
        <trans-unit id="bc538e8432ebecf3f9f7a45d7ccb524d4da71c7d" translate="yes" xml:space="preserve">
          <source>How do I run a command every login? What's fish's equivalent to .bashrc?</source>
          <target state="translated">如何在每次登录时运行命令?fish相当于.bashrc是什么?</target>
        </trans-unit>
        <trans-unit id="9d52246c1acb2dd2ad95298d27dac048384b6b2b" translate="yes" xml:space="preserve">
          <source>How do I run a command from history?</source>
          <target state="translated">如何从历史记录中运行命令?</target>
        </trans-unit>
        <trans-unit id="7c2282706e5d5da05460852fe614e0ea089754e8" translate="yes" xml:space="preserve">
          <source>How do I run a subcommand? The backtick doesn't work!</source>
          <target state="translated">如何运行子命令?反键不能用!</target>
        </trans-unit>
        <trans-unit id="240782fc9c5f0b5d6c4cc74b05803ec8fdfa4ffc" translate="yes" xml:space="preserve">
          <source>How do I set an environment variable for just one command?</source>
          <target state="translated">如何只为一个命令设置环境变量?</target>
        </trans-unit>
        <trans-unit id="cf01f8cfda8ac7fdc0ad1cfce27146791559db05" translate="yes" xml:space="preserve">
          <source>How do I set my prompt?</source>
          <target state="translated">如何设置我的提示?</target>
        </trans-unit>
        <trans-unit id="a7f2b2fb54e2d471e8f341688e112fc1e1ce9d80" translate="yes" xml:space="preserve">
          <source>How do I set or clear an environment variable?</source>
          <target state="translated">如何设置或清除环境变量?</target>
        </trans-unit>
        <trans-unit id="1bbce1c02cef5225c09fe183c39555282f316dab" translate="yes" xml:space="preserve">
          <source>How do I update man page completions?</source>
          <target state="translated">如何更新man page完成度?</target>
        </trans-unit>
        <trans-unit id="8755f1ac4179b2490bfd8d3384a3c541bc0e9557" translate="yes" xml:space="preserve">
          <source>However sometimes, especially with &lt;code&gt;pkg-config&lt;/code&gt; and related tools, splitting on spaces is needed.</source>
          <target state="translated">但是有时，尤其是使用 &lt;code&gt;pkg-config&lt;/code&gt; 和相关工具时，需要在空间上拆分。</target>
        </trans-unit>
        <trans-unit id="54bce717b6b4bc0facb17b1202d46c84a308e996" translate="yes" xml:space="preserve">
          <source>However using variables as indices for command substitution is currently not supported, so</source>
          <target state="translated">但是目前不支持使用变量作为指令替换的索引,所以</target>
        </trans-unit>
        <trans-unit id="3ece1cae89b5ddaf2b419721f67d267e2d87fe0b" translate="yes" xml:space="preserve">
          <source>However, it is more common and efficient to use autoloading functions and universal variables.</source>
          <target state="translated">然而,使用自动加载函数和通用变量更为常见和有效。</target>
        </trans-unit>
        <trans-unit id="332860b83cabf222387565b3cbb3a4ca2b6a60c7" translate="yes" xml:space="preserve">
          <source>I accidentally entered a directory path and fish changed directory. What happened?</source>
          <target state="translated">我不小心输入了一个目录路径,鱼儿换了目录。到底发生了什么?</target>
        </trans-unit>
        <trans-unit id="077b540fd621e89ad74c3aa41ae8c6bb0c4148b1" translate="yes" xml:space="preserve">
          <source>I'm seeing weird output before each prompt when using screen. What's wrong?</source>
          <target state="translated">在使用屏幕时,我看到每个提示前都有奇怪的输出。有什么问题吗?</target>
        </trans-unit>
        <trans-unit id="7884771064847db56c0b28c42a19e5f67be016fb" translate="yes" xml:space="preserve">
          <source>If $animals is a list of animals, the following will test if it contains a cat:</source>
          <target state="translated">如果$animals是一个动物列表,下面将测试它是否包含一只猫。</target>
        </trans-unit>
        <trans-unit id="6288311089317cecbe49c2b077270e72c24f0c74" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;$animal&lt;/code&gt; was set to &quot;banana&quot;, it would print &quot;I have no idea what a banana is&quot;.</source>
          <target state="translated">如果将 &lt;code&gt;$animal&lt;/code&gt; 设置为&amp;ldquo; banana&amp;rdquo;，它将显示&amp;ldquo;我不知道香蕉是什么&amp;rdquo;。</target>
        </trans-unit>
        <trans-unit id="6529dd48f4bbe7af35d8ee17e053a860dce8bc42" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;$argv&lt;/code&gt; is empty then there is nothing to parse and &lt;code&gt;argparse&lt;/code&gt; returns zero to indicate success. If &lt;code&gt;$argv&lt;/code&gt; is not empty then it is checked for flags &lt;code&gt;-h&lt;/code&gt;, &lt;code&gt;--help&lt;/code&gt;, &lt;code&gt;-n&lt;/code&gt; and &lt;code&gt;--name&lt;/code&gt;. If they are found they are removed from the arguments and local variables (more on this &lt;a href=&quot;argparse-local-variables&quot;&gt;below&lt;/a&gt;) are set so the script can determine which options were seen. Assuming &lt;code&gt;$argv&lt;/code&gt; doesn't have any errors, such as a missing mandatory value for an option, then &lt;code&gt;argparse&lt;/code&gt; exits with status zero. Otherwise it writes appropriate error messages to stderr and exits with a status of one.</source>
          <target state="translated">如果 &lt;code&gt;$argv&lt;/code&gt; 为空，则没有要解析的内容，并且 &lt;code&gt;argparse&lt;/code&gt; 返回零以指示成功。如果 &lt;code&gt;$argv&lt;/code&gt; 不为空，则检查标志 &lt;code&gt;-h&lt;/code&gt; ，-- &lt;code&gt;--help&lt;/code&gt; ， &lt;code&gt;-n&lt;/code&gt; 和 &lt;code&gt;--name&lt;/code&gt; 。如果找到它们，则将它们从参数中删除，并设置局部变量（有关此内容，请参见&lt;a href=&quot;argparse-local-variables&quot;&gt;下文&lt;/a&gt;），以便脚本可以确定看到了哪些选项。假设 &lt;code&gt;$argv&lt;/code&gt; 没有任何错误，例如缺少某个选项的必需值，则 &lt;code&gt;argparse&lt;/code&gt; 退出时状态为零。否则，它将适当的错误消息写入stderr并以状态1退出。</target>
        </trans-unit>
        <trans-unit id="18c0231ee0546ad7aeb3f50a1a68cbc1c85d1797" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;--index&lt;/code&gt; or &lt;code&gt;-n&lt;/code&gt; is given, each match is reported as a 1-based start position and a length. By default, PATTERN is interpreted as a glob pattern matched against each entire STRING argument. A glob pattern is only considered a valid match if it matches the entire STRING.</source>
          <target state="translated">如果 &lt;code&gt;--index&lt;/code&gt; 或 &lt;code&gt;-n&lt;/code&gt; ，则将每个匹配项报告为从1开始的起始位置和长度。默认情况下，PATTERN被解释为与每个完整的STRING参数匹配的全局模式。球形模式只有与整个STRING匹配时才被视为有效匹配。</target>
        </trans-unit>
        <trans-unit id="dbf8f89e324b9e1f656b472c919d4c7a437efce4" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;--invert&lt;/code&gt; or &lt;code&gt;-v&lt;/code&gt; is used the selected lines will be only those which do not match the given glob pattern or regular expression.</source>
          <target state="translated">如果使用 &lt;code&gt;--invert&lt;/code&gt; 或 &lt;code&gt;-v&lt;/code&gt; ,则选定的行将仅是与给定的glob模式或正则表达式不匹配的行。</target>
        </trans-unit>
        <trans-unit id="bca5e01e9673f9e6a815d4bc3b45775fa51fbbf4" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;--regex&lt;/code&gt; or &lt;code&gt;-r&lt;/code&gt; is given, PATTERN is interpreted as a Perl-compatible regular expression, which does not have to match the entire STRING. For a regular expression containing capturing groups, multiple items will be reported for each match, one for the entire match and one for each capturing group. With this, only the matching part of the STRING will be reported, unless &lt;code&gt;--entire&lt;/code&gt; is given.</source>
          <target state="translated">如果 &lt;code&gt;--regex&lt;/code&gt; 或 &lt;code&gt;-r&lt;/code&gt; ，则PATTERN将被解释为与Perl兼容的正则表达式，而不必匹配整个STRING。对于包含捕获组的正则表达式，将为每个匹配项报告多个项目，为整个匹配项报告一个项目，为每个捕获组报告一个项目。这样，除非给出 &lt;code&gt;--entire&lt;/code&gt; ，否则只会报告STRING的匹配部分。</target>
        </trans-unit>
        <trans-unit id="4e269b8b85f5f48b405e1f529c5cc1623456789e" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;-a&lt;/code&gt; or &lt;code&gt;--array&lt;/code&gt; is provided, only one variable name is allowed and the tokens are stored as an array in this variable.</source>
          <target state="translated">如果提供了 &lt;code&gt;-a&lt;/code&gt; 或 &lt;code&gt;--array&lt;/code&gt; ，则仅允许使用一个变量名，并且将标记作为数组存储在此变量中。</target>
        </trans-unit>
        <trans-unit id="a6dcb1b88668c5c41c70fbdad2157ee6171f60f0" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;-e&lt;/code&gt; is used, the following sequences are recognized:</source>
          <target state="translated">如果使用 &lt;code&gt;-e&lt;/code&gt; ，则将识别以下序列：</target>
        </trans-unit>
        <trans-unit id="e5d5482f59147347f76e114d12618ff3d78fea80" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;-r&lt;/code&gt; or &lt;code&gt;--regex&lt;/code&gt; is given, PATTERN is interpreted as a Perl-compatible regular expression, and REPLACEMENT can contain C-style escape sequences like &lt;code&gt;\t&lt;/code&gt; as well as references to capturing groups by number or name as &lt;code&gt;$n&lt;/code&gt; or &lt;code&gt;${n}&lt;/code&gt;.</source>
          <target state="translated">如果给定了 &lt;code&gt;-r&lt;/code&gt; 或 &lt;code&gt;--regex&lt;/code&gt; ，则PATTERN将被解释为与Perl兼容的正则表达式，并且REPLACEMENT可以包含C样式的转义序列，例如 &lt;code&gt;\t&lt;/code&gt; ，以及引用捕获数字或名称为 &lt;code&gt;$n&lt;/code&gt; 或 &lt;code&gt;${n}&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="227584b023d6d2c7837f693e7e9b190c0c0b3bf5" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;ARG&lt;/code&gt; and &lt;code&gt;REASON&lt;/code&gt; are both specified, &lt;code&gt;ARG&lt;/code&gt; is the command to be executed when the event specified by &lt;code&gt;REASON&lt;/code&gt; occurs (e.g., the signal is delivered).</source>
          <target state="translated">如果同时指定了 &lt;code&gt;ARG&lt;/code&gt; 和 &lt;code&gt;REASON&lt;/code&gt; ，则在由 &lt;code&gt;REASON&lt;/code&gt; 指定的事件发生时（例如，信号已交付）， &lt;code&gt;ARG&lt;/code&gt; 是要执行的命令。</target>
        </trans-unit>
        <trans-unit id="d6a059f39530ea46f03b1a88f280774a9e1b7e4c" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;ARG&lt;/code&gt; is absent (and there is a single REASON) or -, each specified signal is reset to its original disposition (the value it had upon entrance to the shell). If &lt;code&gt;ARG&lt;/code&gt; is the null string the signal specified by each &lt;code&gt;REASON&lt;/code&gt; is ignored by the shell and by the commands it invokes.</source>
          <target state="translated">如果不存在 &lt;code&gt;ARG&lt;/code&gt; （并且存在一个REASON）或-，则将每个指定的信号重置为其原始配置（进入外壳时所具有的值）。如果 &lt;code&gt;ARG&lt;/code&gt; 为空字符串，则外壳程序及其调用的命令将忽略每个 &lt;code&gt;REASON&lt;/code&gt; 指定的信号。</target>
        </trans-unit>
        <trans-unit id="0310897c6525d4c0a20301e5b59490367df8d786" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;ARG&lt;/code&gt; is not present and &lt;code&gt;-p&lt;/code&gt; has been supplied, then the trap commands associated with each &lt;code&gt;REASON&lt;/code&gt; are displayed. If no arguments are supplied or if only &lt;code&gt;-p&lt;/code&gt; is given, &lt;code&gt;trap&lt;/code&gt; prints the list of commands associated with each signal.</source>
          <target state="translated">如果不存在 &lt;code&gt;ARG&lt;/code&gt; 且已提供 &lt;code&gt;-p&lt;/code&gt; ，则显示与每个 &lt;code&gt;REASON&lt;/code&gt; 关联的trap命令。如果未提供任何参数，或者仅提供了 &lt;code&gt;-p&lt;/code&gt; ，则 &lt;code&gt;trap&lt;/code&gt; 打印与每个信号关联的命令列表。</target>
        </trans-unit>
        <trans-unit id="46f4e7706aaa7715626c2065fdf439e268266771" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;DIRECTORY&lt;/code&gt; is a relative path, the paths found in the &lt;code&gt;CDPATH&lt;/code&gt; environment variable array will be tried as prefixes for the specified path.</source>
          <target state="translated">如果 &lt;code&gt;DIRECTORY&lt;/code&gt; 是相对路径，则将尝试在 &lt;code&gt;CDPATH&lt;/code&gt; 环境变量数组中找到的路径作为指定路径的前缀。</target>
        </trans-unit>
        <trans-unit id="6d211b5295328f27c5f4dda2c5b64e33b2d339ae" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;DIRECTORY&lt;/code&gt; is supplied, it will become the new directory. If no parameter is given, the contents of the &lt;code&gt;HOME&lt;/code&gt; environment variable will be used.</source>
          <target state="translated">如果提供了 &lt;code&gt;DIRECTORY&lt;/code&gt; ，它将成为新目录。如果未提供任何参数，则将使用 &lt;code&gt;HOME&lt;/code&gt; 环境变量的内容。</target>
        </trans-unit>
        <trans-unit id="ee49ba74d2c75163466a92ec95757c32496b3231" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;commandline&lt;/code&gt; is called during a call to complete a given string using &lt;code&gt;complete -C STRING&lt;/code&gt;, &lt;code&gt;commandline&lt;/code&gt; will consider the specified string to be the current contents of the command line.</source>
          <target state="translated">如果 &lt;code&gt;commandline&lt;/code&gt; 是通话过程中调用，完成使用给定的字符串 &lt;code&gt;complete -C STRING&lt;/code&gt; ， &lt;code&gt;commandline&lt;/code&gt; 会考虑将指定的字符串是命令行的当前内容。</target>
        </trans-unit>
        <trans-unit id="1145ddb3bdeee96521a717d934a15cc64d95077c" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;fish&lt;/code&gt; encounters a problem while executing a command, the status variable may also be set to a specific value:</source>
          <target state="translated">如果 &lt;code&gt;fish&lt;/code&gt; 在执行命令时遇到问题，则状态变量也可以设置为特定值：</target>
        </trans-unit>
        <trans-unit id="f09fbf7f2a9a04bff01d5330effffef51795cab0" translate="yes" xml:space="preserve">
          <source>If a &lt;code&gt;SECTION&lt;/code&gt; is specified, the help for that command is shown.</source>
          <target state="translated">如果指定了 &lt;code&gt;SECTION&lt;/code&gt; ，则显示该命令的帮助。</target>
        </trans-unit>
        <trans-unit id="8ebee8483e83b06811ff3ba9ccc429433dce33cd" translate="yes" xml:space="preserve">
          <source>If a function named &lt;code&gt;fish_greeting&lt;/code&gt; exists, it will be run when entering interactive mode. Otherwise, if an environment variable named &lt;code&gt;fish_greeting&lt;/code&gt; exists, it will be printed.</source>
          <target state="translated">如果存在名为 &lt;code&gt;fish_greeting&lt;/code&gt; 的函数，则在进入交互模式时将运行该函数。否则，如果存在名为 &lt;code&gt;fish_greeting&lt;/code&gt; 的环境变量，则将其打印出来。</target>
        </trans-unit>
        <trans-unit id="236d9b2bfa9ffd703bff82e438702935d8f276d3" translate="yes" xml:space="preserve">
          <source>If a job is stopped, it is sent a signal to continue running, and a warning is printed. It is not possible to use the &lt;code&gt;bg&lt;/code&gt; builtin to continue a job once it has been disowned.</source>
          <target state="translated">如果作业停止，则会向其发送继续运行的信号，并打印警告。一旦放弃工作，就无法使用内置的 &lt;code&gt;bg&lt;/code&gt; 继续工作。</target>
        </trans-unit>
        <trans-unit id="60e2a752180a8997dd97af87732b5ed3a03f8d8f" translate="yes" xml:space="preserve">
          <source>If a numeric mask is specified as a parameter, the current shell's umask will be set to that value, and the rights specified by that mask will be removed from new files and directories by default.</source>
          <target state="translated">如果指定一个数字掩码作为参数,则当前shell的umask将被设置为该值,该掩码指定的权限将被默认从新文件和目录中删除。</target>
        </trans-unit>
        <trans-unit id="2dde9e658888f495cea69c0ad8b260a62416e91a" translate="yes" xml:space="preserve">
          <source>If a pid is specified, the command waits for the job that the process with the pid belongs to.</source>
          <target state="translated">如果指定了pid,命令将等待具有pid的进程所属的作业。</target>
        </trans-unit>
        <trans-unit id="f851c83c3c3953c372c81382f02613c546f275f0" translate="yes" xml:space="preserve">
          <source>If a process exits through a signal, the exit status will be 128 plus the number of the signal.</source>
          <target state="translated">如果一个进程通过信号退出,退出状态将是128加信号的编号。</target>
        </trans-unit>
        <trans-unit id="47cb47829c9383def1fb8361853c4c7dd09368a8" translate="yes" xml:space="preserve">
          <source>If a process name is specified, the command waits for the jobs that the matched processes belong to.</source>
          <target state="translated">如果指定了进程名称,命令将等待匹配的进程所属的作业。</target>
        </trans-unit>
        <trans-unit id="302f9ccffa6bb045e0895a185f5c9e50859c884f" translate="yes" xml:space="preserve">
          <source>If a script produces output, it should finish by calling &lt;code&gt;commandline -f repaint&lt;/code&gt; to tell fish that a repaint is in order.</source>
          <target state="translated">如果脚本产生输出，则应通过调用 &lt;code&gt;commandline -f repaint&lt;/code&gt; 来告诉fish刷新顺序已完成。</target>
        </trans-unit>
        <trans-unit id="67026ba945428dc31827715c1565311d33b5af8d" translate="yes" xml:space="preserve">
          <source>If a star (&lt;code&gt;*&lt;/code&gt;) or a question mark (&lt;code&gt;?&lt;/code&gt;) is present in the parameter, &lt;code&gt;fish&lt;/code&gt; attempts to match the given parameter to any files in such a way that:</source>
          <target state="translated">如果参数中出现星号（ &lt;code&gt;*&lt;/code&gt; ）或问号（ &lt;code&gt;?&lt;/code&gt; ），则 &lt;code&gt;fish&lt;/code&gt; 会尝试将给定参数与任何文件进行匹配，方式是：</target>
        </trans-unit>
        <trans-unit id="18a6fd00e4b1ddec496d39ba9f288b25c849a5d6" translate="yes" xml:space="preserve">
          <source>If a symbolic mask is specified, the desired permission bits, and not the inverse, should be specified. A symbolic mask is a comma separated list of rights. Each right consists of three parts:</source>
          <target state="translated">如果指定了符号掩码,则应指定所需的权限位,而不是反过来。符号掩码是一个逗号分隔的权利列表。每个权利由三部分组成。</target>
        </trans-unit>
        <trans-unit id="c3bd46787a5c6b92e6f20cfe4fbc883c75045f2a" translate="yes" xml:space="preserve">
          <source>If a variable has global scope, it is accessible read-write to functions whether it is exported or not.</source>
          <target state="translated">如果一个变量具有全局范围,那么无论是否导出,它都可以被函数读写。</target>
        </trans-unit>
        <trans-unit id="741d44bccaaf674b1d069d14a1bdb399e238d593" translate="yes" xml:space="preserve">
          <source>If a variable has local scope and is exported, any function called receives a &lt;em&gt;copy&lt;/em&gt; of it, so any changes it makes to the variable disappear once the function returns.</source>
          <target state="translated">如果变量具有局部作用域并已导出，则任何称为的函数都会收到其&lt;em&gt;副本&lt;/em&gt;，因此一旦函数返回，对变量所做的任何更改都会消失。</target>
        </trans-unit>
        <trans-unit id="2cbdc88f5e9bb2f3b40009d0379b55ab2352ae84" translate="yes" xml:space="preserve">
          <source>If a variable is explicitly set to either be exported or not exported, that setting will be honored.</source>
          <target state="translated">如果一个变量被明确设置为导出或不导出,那么该设置将被尊重。</target>
        </trans-unit>
        <trans-unit id="ce6484065868b4e9c43f6db14f55a84fe136a4bf" translate="yes" xml:space="preserve">
          <source>If a variable is explicitly set to either universal, global or local, that setting will be honored. If a variable of the same name exists in a different scope, that variable will not be changed.</source>
          <target state="translated">如果一个变量被明确地设置为通用、全局或局部,那么该设置将被尊重。如果一个同名的变量存在于不同的作用域中,该变量将不会被改变。</target>
        </trans-unit>
        <trans-unit id="326eb232490e8df93b49fd2c3a89fde63906ed77" translate="yes" xml:space="preserve">
          <source>If a variable is not explicitly set to be either exported or not exported and has never before been defined, the variable will not be exported.</source>
          <target state="translated">如果一个变量没有被明确地设置为导出或不导出,并且之前从未被定义过,那么该变量将不会被导出。</target>
        </trans-unit>
        <trans-unit id="ef107fe0701094bebbf7a6322c1155614a1be3ba" translate="yes" xml:space="preserve">
          <source>If a variable is not explicitly set to be either exported or unexported and has never before been defined, the variable will not be exported.</source>
          <target state="translated">如果一个变量没有被明确地设置为导出或未导出,并且之前从未被定义过,那么该变量将不会被导出。</target>
        </trans-unit>
        <trans-unit id="bd6c17ea05cd6c81f352d96759e2622e4a16e84b" translate="yes" xml:space="preserve">
          <source>If a variable is not explicitly set to be either universal, global or local and has never before been defined, the variable will be local to the currently executing function. Note that this is different from using the &lt;code&gt;-l&lt;/code&gt; or &lt;code&gt;--local&lt;/code&gt; flag. If one of those flags is used, the variable will be local to the most inner currently executing block, while without these the variable will be local to the function. If no function is executing, the variable will be global.</source>
          <target state="translated">如果未将变量明确地设置为通用，全局或局部且从未定义过，则该变量将在当前执行的函数中局部。请注意，这与使用 &lt;code&gt;-l&lt;/code&gt; 或 &lt;code&gt;--local&lt;/code&gt; 标志不同。如果使用这些标志之一，则该变量将位于当前执行最内部的块中，而如果没有这些标志，则变量将位于该函数中。如果没有函数在执行，则该变量将是全局变量。</target>
        </trans-unit>
        <trans-unit id="8b2d1734ef9bdd7bd6d21bc623798a68378e6c8b" translate="yes" xml:space="preserve">
          <source>If a variable is not explicitly set to be either universal, global or local, but has been previously defined, the previous variable scope is used.</source>
          <target state="translated">如果一个变量没有被明确设置为通用、全局或局部,但之前已经被定义,则使用之前的变量范围。</target>
        </trans-unit>
        <trans-unit id="ae5e31cb3d02690bd43a99dc6a823c8568d4b6e8" translate="yes" xml:space="preserve">
          <source>If a variable is not explicitly set to be either universal, global or local, but has been previously defined, the variable scope is not changed.</source>
          <target state="translated">如果一个变量没有显式地设置为通用、全局或局部,但之前已经定义过,则变量范围不会改变。</target>
        </trans-unit>
        <trans-unit id="6ccd9990afce6a9aaaa05eb9827a340fd925feb1" translate="yes" xml:space="preserve">
          <source>If a variable is not explicitly set to be exported or not exported, but has been previously defined, the previous exporting rule for the variable is kept.</source>
          <target state="translated">如果一个变量没有明确设置为导出或不导出,但之前已经定义过,则保留该变量之前的导出规则。</target>
        </trans-unit>
        <trans-unit id="72e2106717a7a37128914da8765dc2c6c6697b14" translate="yes" xml:space="preserve">
          <source>If a variable is set to more than one value, the variable will be an array with the specified elements. If a variable is set to zero elements, it will become an array with zero elements.</source>
          <target state="translated">如果一个变量被设置为一个以上的值,则该变量将成为一个具有指定元素的数组。如果一个变量被设置为零元素,它将成为一个元素为零的数组。</target>
        </trans-unit>
        <trans-unit id="7f805483966bd1b92bb16fa0e48ac91c14f18567" translate="yes" xml:space="preserve">
          <source>If an error occurs during argparse processing it will exit with a non-zero status and print error messages to stderr.</source>
          <target state="translated">如果在argparse处理过程中发生错误,它将以非零状态退出,并将错误信息打印到stderr。</target>
        </trans-unit>
        <trans-unit id="f3bb201c1119b5848ebfda84c47d1e1698174af5" translate="yes" xml:space="preserve">
          <source>If any non-option parameters are given, the definition of the specified functions are printed.</source>
          <target state="translated">如果给出任何非选项参数,则打印指定函数的定义。</target>
        </trans-unit>
        <trans-unit id="dcc764ad71040642c2ae2b7ce376987c8f357ee1" translate="yes" xml:space="preserve">
          <source>If exit is called while sourcing a file (using the &lt;a href=&quot;#source&quot;&gt;source&lt;/a&gt; builtin) the rest of the file will be skipped, but the shell itself will not exit.</source>
          <target state="translated">如果在采购文件时（使用内置&lt;a href=&quot;#source&quot;&gt;源&lt;/a&gt;）调用exit，则文件的其余部分将被跳过，但Shell本身不会退出。</target>
        </trans-unit>
        <trans-unit id="3068ba7bd98e36689eab0ca26911e82ce1011087" translate="yes" xml:space="preserve">
          <source>If fish is unable to locate a command with a given name, and it starts with '&lt;code&gt;.&lt;/code&gt;', '&lt;code&gt;/&lt;/code&gt;' or '&lt;code&gt;~&lt;/code&gt;', fish will test if a directory of that name exists. If it does, it is implicitly assumed that you want to change working directory. For example, the fastest way to switch to your home directory is to simply press &lt;code&gt;~&lt;/code&gt; and enter.</source>
          <target state="translated">如果fish无法找到具有给定名称的命令，则该命令以'开头 &lt;code&gt;.&lt;/code&gt; '，' &lt;code&gt;/&lt;/code&gt; '或' &lt;code&gt;~&lt;/code&gt; '，fish将测试该名称的目录是否存在。如果是这样，则隐式假定您要更改工作目录。例如，切换到主目录的最快方法是简单地按 &lt;code&gt;~&lt;/code&gt; 并输入。</target>
        </trans-unit>
        <trans-unit id="9365afaebdcba814bae204eaa9cb6846f923618b" translate="yes" xml:space="preserve">
          <source>If limit is given, it is the new value of the specified resource. If no option is given, then &lt;code&gt;-f&lt;/code&gt; is assumed. Values are in kilobytes, except for &lt;code&gt;-t&lt;/code&gt;, which is in seconds and &lt;code&gt;-n&lt;/code&gt; and &lt;code&gt;-u&lt;/code&gt;, which are unscaled values. The return status is 0 unless an invalid option or argument is supplied, or an error occurs while setting a new limit.</source>
          <target state="translated">如果给定limit，则为指定资源的新值。如果没有给出选项，则假定 &lt;code&gt;-f&lt;/code&gt; 。值以千字节为单位，但 &lt;code&gt;-t&lt;/code&gt; （以秒为单位）和 &lt;code&gt;-n&lt;/code&gt; 和 &lt;code&gt;-u&lt;/code&gt; （非标度值）除外。除非提供了无效的选项或参数，否则返回状态为0，或者在设置新的限制时发生错误。</target>
        </trans-unit>
        <trans-unit id="ca3ffe9826b96a93254e7258c40cd2d913b9941e" translate="yes" xml:space="preserve">
          <source>If neither a pid nor a process name is specified, the command waits for all background jobs.</source>
          <target state="translated">如果既没有指定pid,也没有指定进程名称,则命令会等待所有后台作业。</target>
        </trans-unit>
        <trans-unit id="6620b792aa7c50700f6a7c83a134de00e5936216" translate="yes" xml:space="preserve">
          <source>If no &lt;code&gt;SEQUENCE&lt;/code&gt; is provided, all bindings (or just the bindings in the specified &lt;code&gt;MODE&lt;/code&gt;) are printed. If &lt;code&gt;SEQUENCE&lt;/code&gt; is provided without &lt;code&gt;COMMAND&lt;/code&gt;, just the binding matching that sequence is printed.</source>
          <target state="translated">如果未提供 &lt;code&gt;SEQUENCE&lt;/code&gt; ，则将打印所有绑定（或仅指定 &lt;code&gt;MODE&lt;/code&gt; 中的绑定）。如果提供的 &lt;code&gt;SEQUENCE&lt;/code&gt; 没有 &lt;code&gt;COMMAND&lt;/code&gt; ，则仅打印与该序列匹配的绑定。</target>
        </trans-unit>
        <trans-unit id="319b10cf51c7aaf0a0ad28a0d4b4f6c772504c25" translate="yes" xml:space="preserve">
          <source>If no file is specified and stdin is not the terminal, or if the file name '&lt;code&gt;-&lt;/code&gt;' is used, stdin will be read.</source>
          <target state="translated">如果未指定文件且stdin不是终端，或者如果使用文件名' &lt;code&gt;-&lt;/code&gt; '，则将读取stdin。</target>
        </trans-unit>
        <trans-unit id="536986c9ac77b0a65c848619315ad13a2f046d5c" translate="yes" xml:space="preserve">
          <source>If no process is specified, the most recently-used job is removed (like &lt;code&gt;bg&lt;/code&gt; and &lt;code&gt;fg&lt;/code&gt;). If one or more &lt;code&gt;PID&lt;/code&gt;s are specified, jobs with the specified process IDs are removed from the job list. Invalid jobs are ignored and a warning is printed.</source>
          <target state="translated">如果未指定任何进程，则将删除最近使用的作业（如 &lt;code&gt;bg&lt;/code&gt; 和 &lt;code&gt;fg&lt;/code&gt; ）。如果指定了一个或多个 &lt;code&gt;PID&lt;/code&gt; ，则具有指定进程ID的作业将从作业列表中删除。无效的作业将被忽略，并显示警告。</target>
        </trans-unit>
        <trans-unit id="713bf8682430a51e2b7af1a6d836f8e75fd1bdaa" translate="yes" xml:space="preserve">
          <source>If no variable names are provided, &lt;code&gt;read&lt;/code&gt; enters a special case that simply provides redirection from standard input to standard output, useful for command substitution. For instance, the fish shell command below can be used to read data that should be provided via a command line argument from the console instead of hardcoding it in the command itself, allowing the command to both be reused as-is in various contexts with different input values and preventing possibly sensitive text from being included in the shell history:</source>
          <target state="translated">如果未提供变量名，则 &lt;code&gt;read&lt;/code&gt; 输入一个特殊情况，该情况仅提供从标准输入到标准输出的重定向，对命令替换很有用。例如，下面的fish shell命令可用于从控制台读取应通过命令行参数提供的数据，而不是在命令本身中对其进行硬编码，从而可以在具有不同上下文的各种上下文中按原样重用该命令输入值并防止可能的敏感文本包含在外壳程序历史记录中：</target>
        </trans-unit>
        <trans-unit id="f6b617c0f8612fdf2ea16aba5ec62984acf5c44a" translate="yes" xml:space="preserve">
          <source>If only 123 and 789 exist, it will still background them and print an error about 456.</source>
          <target state="translated">如果只有123和789存在,它仍然会对它们进行背景处理,并打印一个关于456的错误。</target>
        </trans-unit>
        <trans-unit id="e5b23704e06de8e7cf41b466203c3d1a05734047" translate="yes" xml:space="preserve">
          <source>If set is called with no arguments, the names and values of all shell variables are printed in sorted order. If some of the scope or export flags have been given, only the variables matching the specified scope are printed.</source>
          <target state="translated">如果调用set时没有参数,则所有shell变量的名称和值按排序打印。如果给定了一些作用域或导出标志,则只打印与指定作用域匹配的变量。</target>
        </trans-unit>
        <trans-unit id="302a7adb7b2bb424535b98eb0c4ef6539ea7cb20" translate="yes" xml:space="preserve">
          <source>If terminfo reports 256 color support for a terminal, support will always be enabled. To debug color palette problems, &lt;code&gt;tput colors&lt;/code&gt; may be useful to see the number of colors in terminfo for a terminal. Fish launched as &lt;code&gt;fish -d2&lt;/code&gt; will include diagnostic messages that indicate the color support mode in use.</source>
          <target state="translated">如果terminfo报告对终端的256色支持，则将始终启用支持。要调试调色板问题，输入 &lt;code&gt;tput colors&lt;/code&gt; 可能有助于查看terminfo中终端的颜色数量。以 &lt;code&gt;fish -d2&lt;/code&gt; 启动的Fish 将包括诊断消息，这些消息指示正在使用的颜色支持模式。</target>
        </trans-unit>
        <trans-unit id="34986c35bab0e2df661c76619902534fb332f46c" translate="yes" xml:space="preserve">
          <source>If that directory traversal is taking a long time, you can &lt;em&gt;Control&lt;/em&gt;-&lt;b&gt;C&lt;/b&gt; out of it.</source>
          <target state="translated">如果该目录遍历花费很长时间，则可以将&lt;em&gt;Control&lt;/em&gt; - &lt;b&gt;C&lt;/b&gt;移出该目录。</target>
        </trans-unit>
        <trans-unit id="e3d023db5ee6df47941a2ca566209f059001722c" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;$VISUAL&lt;/code&gt; environment variable is set, it will be used as the program to edit the function. If &lt;code&gt;$VISUAL&lt;/code&gt; is unset but &lt;code&gt;$EDITOR&lt;/code&gt; is set, that will be used. Otherwise, a built-in editor will be used. Note that to enter a literal newline using the built-in editor you should press &lt;em&gt;Alt&lt;/em&gt;-&lt;b&gt;Enter&lt;/b&gt;. Pressing &lt;b&gt;Enter&lt;/b&gt; signals that you are done editing the function. This does not apply to an external editor like emacs or vim.</source>
          <target state="translated">如果设置了 &lt;code&gt;$VISUAL&lt;/code&gt; 环境变量，它将用作编辑该功能的程序。如果未设置 &lt;code&gt;$VISUAL&lt;/code&gt; 但设置了 &lt;code&gt;$EDITOR&lt;/code&gt; ，则将使用它。否则，将使用内置编辑器。请注意，要使用内置编辑器输入文字换行符，应按&lt;em&gt;Alt&lt;/em&gt; - &lt;b&gt;Enter&lt;/b&gt;。按&lt;b&gt;Enter&lt;/b&gt;表示您已完成对该功能的编辑。这不适用于emacs或vim等外部编辑器。</target>
        </trans-unit>
        <trans-unit id="e8fb943c750f92e3917384bc05f81b775bd8db88" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;--delimiter&lt;/code&gt; argument is not given, the variable &lt;code&gt;IFS&lt;/code&gt; is used as a list of characters to split on. Relying on the use of &lt;code&gt;IFS&lt;/code&gt; is deprecated and this behaviour will be removed in future versions. The default value of &lt;code&gt;IFS&lt;/code&gt; contains space, tab and newline characters. As a special case, if &lt;code&gt;IFS&lt;/code&gt; is set to the empty string, each character of the input is considered a separate token.</source>
          <target state="translated">如果未指定 &lt;code&gt;--delimiter&lt;/code&gt; 参数，则将变量 &lt;code&gt;IFS&lt;/code&gt; 用作要分割的字符列表。不推荐使用 &lt;code&gt;IFS&lt;/code&gt; ，并且在以后的版本中将删除此行为。 &lt;code&gt;IFS&lt;/code&gt; 的默认值包含空格，制表符和换行符。作为一种特殊情况，如果将 &lt;code&gt;IFS&lt;/code&gt; 设置为空字符串，则输入的每个字符都被视为一个单独的标记。</target>
        </trans-unit>
        <trans-unit id="b9a1bc2ff2f56d3990f495529faa7ba44ead0455" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;-k&lt;/code&gt; switch is used, the name of the key (such as 'down', 'up' or 'backspace') is used instead of a sequence. The names used are the same as the corresponding curses variables, but without the 'key_' prefix. (See &lt;code&gt;terminfo(5)&lt;/code&gt; for more information, or use &lt;code&gt;bind --key-names&lt;/code&gt; for a list of all available named keys.) If used in conjunction with the &lt;code&gt;-s&lt;/code&gt; switch, &lt;code&gt;bind&lt;/code&gt; will silently ignore bindings to named keys that are not found in termcap for the current &lt;code&gt;$TERMINAL&lt;/code&gt;, otherwise a warning is emitted.</source>
          <target state="translated">如果使用 &lt;code&gt;-k&lt;/code&gt; 开关，则使用键名（例如'down'，'up'或'backspace'）代替序列。使用的名称与相应的curses变量相同，但没有'key_'前缀。（有关更多信息，请参见 &lt;code&gt;terminfo(5)&lt;/code&gt; ，或者将 &lt;code&gt;bind --key-names&lt;/code&gt; 用于所有可用的命名键的列表。）如果与 &lt;code&gt;-s&lt;/code&gt; 开关一起使用， &lt;code&gt;bind&lt;/code&gt; 将默默地忽略对未找到的命名键的绑定。当前 &lt;code&gt;$TERMINAL&lt;/code&gt; termcap中，否则发出警告。</target>
        </trans-unit>
        <trans-unit id="1d7b9b3be6cec368c8849bf11af8487da853a633" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;-l&lt;/code&gt; or &lt;code&gt;--list&lt;/code&gt; flag is specified, the current directory history is also displayed.</source>
          <target state="translated">如果指定了 &lt;code&gt;-l&lt;/code&gt; 或 &lt;code&gt;--list&lt;/code&gt; 标志，那么还将显示当前目录历史记录。</target>
        </trans-unit>
        <trans-unit id="4cfc35a3a98ed01dd389efdde71deb0bf3c6669a" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;-l&lt;/code&gt; or &lt;code&gt;--list&lt;/code&gt; flag is specified, the current history is also displayed.</source>
          <target state="translated">如果指定了 &lt;code&gt;-l&lt;/code&gt; 或 &lt;code&gt;--list&lt;/code&gt; 标志，那么还将显示当前历史记录。</target>
        </trans-unit>
        <trans-unit id="492a67bd7712dda8e66c7c5fc44c0836f4b18f3a" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;-n&lt;/code&gt; / &lt;code&gt;--any&lt;/code&gt; flag is provided, the command returns as soon as the first job completes. If it is not provided, it returns after all jobs complete.</source>
          <target state="translated">如果提供了 &lt;code&gt;-n&lt;/code&gt; / &lt;code&gt;--any&lt;/code&gt; 标志，则该命令将在第一个作业完成后立即返回。如果未提供，它将在所有作业完成后返回。</target>
        </trans-unit>
        <trans-unit id="63b9207ee5d979afeb85211115a3c6ffa7012a71" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;/tmp&lt;/code&gt; directory exists, copy the &lt;code&gt;/etc/motd&lt;/code&gt; file to it:</source>
          <target state="translated">如果 &lt;code&gt;/tmp&lt;/code&gt; 目录存在，则将 &lt;code&gt;/etc/motd&lt;/code&gt; 文件复制到其中：</target>
        </trans-unit>
        <trans-unit id="c3b856c7f49407f5bd18390ec22c0a975e0942a6" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;BROWSER&lt;/code&gt; environment variable is set, it will be used as the name of the web browser to open instead of the system default.</source>
          <target state="translated">如果设置了 &lt;code&gt;BROWSER&lt;/code&gt; 环境变量，它将用作要打开的Web浏览器的名称，而不是系统默认值。</target>
        </trans-unit>
        <trans-unit id="3debf54dad8f4dc6d939e041eacf2dbfc04ad3d0" translate="yes" xml:space="preserve">
          <source>If the BROWSER environment variable is set, it will be used to display the documentation. Otherwise, fish will search for a suitable browser.</source>
          <target state="translated">如果设置了BROWSER环境变量,它将被用来显示文档。否则,fish将搜索一个合适的浏览器。</target>
        </trans-unit>
        <trans-unit id="aa6fc1ea4246a9f77c10ddff36e9849dd9022bcd" translate="yes" xml:space="preserve">
          <source>If the above code was run with &lt;code&gt;$animal&lt;/code&gt; set to &lt;code&gt;whale&lt;/code&gt;, the output would be &lt;code&gt;mammal&lt;/code&gt;.</source>
          <target state="translated">如果上面的代码在 &lt;code&gt;$animal&lt;/code&gt; 设置为 &lt;code&gt;whale&lt;/code&gt; 的情况下运行，则输出将是 &lt;code&gt;mammal&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="d75d0af6becad51e324987bba4dbf96c51e8300a" translate="yes" xml:space="preserve">
          <source>If the alias has the same name as the aliased command, it is necessary to prefix the call to the program with &lt;code&gt;command&lt;/code&gt; in order to tell fish that the function should not call itself, but rather a command with the same name. Failing to do so will cause infinite recursion bugs.</source>
          <target state="translated">如果别名的名称与别名命令的名称相同，则必须在命令的调用前加上 &lt;code&gt;command&lt;/code&gt; 前缀，以告知fish该函数不应调用自身，而应调用具有相同名称的命令。否则，将导致无限递归错误。</target>
        </trans-unit>
        <trans-unit id="ad3ed0aa46a2e24462a85265faa22a817cd5bf4f" translate="yes" xml:space="preserve">
          <source>If the argument you want is far back in history (e.g. 2 lines back - that's a lot of words!), type any part of it and then press &lt;em&gt;Alt&lt;/em&gt;-&lt;b&gt;&amp;uarr;&lt;/b&gt;. This will show only arguments containing that part and you will get what you want much faster. Try it out, this is very convenient!</source>
          <target state="translated">如果你想的说法是早在历史上（如2号线回来- ！这是一个很多的话），键入任何部分，然后按&lt;em&gt;Alt键&lt;/em&gt; - &lt;b&gt;&amp;uarr;&lt;/b&gt;。这将仅显示包含该部分的参数，您将更快地获得所需的内容。试试看，这非常方便！</target>
        </trans-unit>
        <trans-unit id="8b1303483eab8a0aafe5607e65c79febb8c3aca1" translate="yes" xml:space="preserve">
          <source>If the commandline contains</source>
          <target state="translated">如果命令行包含</target>
        </trans-unit>
        <trans-unit id="4b1c190c6ad0436a0fd3fb383f1281a2e816bf89" translate="yes" xml:space="preserve">
          <source>If the commandline reads &lt;code&gt;cd m&lt;/code&gt;, place the cursor over the &lt;code&gt;m&lt;/code&gt; character and press &lt;em&gt;Alt&lt;/em&gt;-&lt;b&gt;&amp;uarr;&lt;/b&gt; to search for previously typed words containing 'm'.</source>
          <target state="translated">如果命令行读取 &lt;code&gt;cd m&lt;/code&gt; ，将光标放在 &lt;code&gt;m&lt;/code&gt; 字符，然后按&lt;em&gt;Alt键&lt;/em&gt; - &lt;b&gt;&amp;uarr;&lt;/b&gt;搜索包含&amp;ldquo;M&amp;rdquo;先前输入的单词。</target>
        </trans-unit>
        <trans-unit id="aec97b1cdbedc052d45f0ca8a3886ba07331192c" translate="yes" xml:space="preserve">
          <source>If the current directory contains the files 'foo' and 'bar', the command &lt;code&gt;echo a(ls){1,2,3}&lt;/code&gt; will output 'abar1 abar2 abar3 afoo1 afoo2 afoo3'.</source>
          <target state="translated">如果当前目录包含文件'foo'和'bar'，则命令 &lt;code&gt;echo a(ls){1,2,3}&lt;/code&gt; 将输出'abar1 abar2 abar3 afoo1 afoo2 afoo3'。</target>
        </trans-unit>
        <trans-unit id="9ac01aa8bdf61c4705d1b573ca6b14e107487f86" translate="yes" xml:space="preserve">
          <source>If the expression is successfully evaluated and doesn't over/underflow or return NaN the return &lt;code&gt;status&lt;/code&gt; is zero (success) else one.</source>
          <target state="translated">如果表达式已成功求值且没有上溢/下溢或返回NaN，则返回 &lt;code&gt;status&lt;/code&gt; 为零（成功），否则为1。</target>
        </trans-unit>
        <trans-unit id="5cfff00b5bb7a05a9b5b06be91a9cc46be32a1f7" translate="yes" xml:space="preserve">
          <source>If the first and second parts are skipped, they are assumed to be &lt;code&gt;a&lt;/code&gt; and &lt;code&gt;=&lt;/code&gt;, respectively. As an example, &lt;code&gt;r,u+w&lt;/code&gt; means all users should have read access and the file owner should also have write access.</source>
          <target state="translated">如果跳过了第一部分和第二部分，则假定它们分别为 &lt;code&gt;a&lt;/code&gt; 和 &lt;code&gt;=&lt;/code&gt; 。例如， &lt;code&gt;r,u+w&lt;/code&gt; 表示所有用户都应具有读访问权限，文件所有者也应具有写访问权限。</target>
        </trans-unit>
        <trans-unit id="154cdf4f784ed79e1fcb74335c0c901b6cf4ac90" translate="yes" xml:space="preserve">
          <source>If the line you want is far back in the history, type any part of the line and then press Up one or more times. This will constrain the recall to lines that include this text, and you will get to the line you want much faster. This replaces &quot;!vi&quot;, &quot;!?bar.c&quot; and the like.</source>
          <target state="translated">如果你想要的行在历史上很久之前,输入该行的任何部分,然后按向上键一次或多次。这将限制调用包括这段文字的行,你将更快地找到你想要的行。这将取代&quot;!vi&quot;、&quot;!?bar.c &quot;等。</target>
        </trans-unit>
        <trans-unit id="70006a59c6935a4438f9d0040be162c8ee9ec5a8" translate="yes" xml:space="preserve">
          <source>If the list is visible, pressing control-S (or the &lt;code&gt;pager-toggle-search&lt;/code&gt; binding) will allow filtering the list. Shift-tab (or the &lt;code&gt;complete-and-search&lt;/code&gt; binding) will trigger completion with the search field immediately visible.</source>
          <target state="translated">如果列表可见，则按Ctrl-S（或 &lt;code&gt;pager-toggle-search&lt;/code&gt; 绑定）将允许过滤列表。Shift-tab（或&amp;ldquo; &lt;code&gt;complete-and-search&lt;/code&gt; 绑定）将触发搜索字段立即可见的完成。</target>
        </trans-unit>
        <trans-unit id="e4c01f00f1709a1d845be8af766e2896516906fa" translate="yes" xml:space="preserve">
          <source>If the path is invalid no translated path will be written to stdout and an error will be reported.</source>
          <target state="translated">如果路径无效,则不会将翻译后的路径写入stdout,并报告一个错误。</target>
        </trans-unit>
        <trans-unit id="e907fd3510899683ab1ac3f96d2aac1979d9258b" translate="yes" xml:space="preserve">
          <source>If the specified file descriptor is a tty, the exit status of the command is zero. Otherwise, the exit status is non-zero. No messages are printed to standard error.</source>
          <target state="translated">如果指定的文件描述符是tty,则该命令的退出状态为0,否则,退出状态为非零。否则,退出状态为非零。没有信息被打印成标准错误。</target>
        </trans-unit>
        <trans-unit id="bd0e2ed527cbeaac8bf34e5481dc729ba00211c1" translate="yes" xml:space="preserve">
          <source>If the user enters any additional arguments after the function, they are inserted into the environment &lt;a href=&quot;index#variables-arrays&quot;&gt;variable array&lt;/a&gt;&lt;code&gt;$argv&lt;/code&gt;. If the &lt;code&gt;--argument-names&lt;/code&gt; option is provided, the arguments are also assigned to names specified in that option.</source>
          <target state="translated">如果用户在函数后输入任何其他参数，则将它们插入环境&lt;a href=&quot;index#variables-arrays&quot;&gt;变量数组&lt;/a&gt; &lt;code&gt;$argv&lt;/code&gt; 。如果提供了 &lt;code&gt;--argument-names&lt;/code&gt; 选项，则还将参数分配给该选项中指定的名称。</target>
        </trans-unit>
        <trans-unit id="89093e95575f5c91e69c231cc514a5f888c355b9" translate="yes" xml:space="preserve">
          <source>If the variable $animal contains the name of an animal, the following code would attempt to classify it:</source>
          <target state="translated">如果变量$animal包含一个动物的名字,下面的代码将尝试对其进行分类。</target>
        </trans-unit>
        <trans-unit id="081ef0f3bbeaf93e50b97aca197ba4dab7103ab9" translate="yes" xml:space="preserve">
          <source>If the variable &lt;code&gt;MANPATH&lt;/code&gt; is defined and not empty, print the contents. (If &lt;code&gt;MANPATH&lt;/code&gt; is not defined, then it will expand to zero arguments, unless quoted.)</source>
          <target state="translated">如果定义了变量 &lt;code&gt;MANPATH&lt;/code&gt; 并且不为空，则打印内容。（如果未定义 &lt;code&gt;MANPATH&lt;/code&gt; ，则除非引用，否则它将扩展为零参数。）</target>
        </trans-unit>
        <trans-unit id="b85b340b71b7dd9ea477da93a9f45e28372572db" translate="yes" xml:space="preserve">
          <source>If the variable name is one or more array elements, such as &lt;code&gt;PATH[1 3 7]&lt;/code&gt;, only those array elements specified will be changed. If you specify a negative index when expanding or assigning to an array variable, the index will be calculated from the end of the array. For example, the index -1 means the last index of an array.</source>
          <target state="translated">如果变量名称是一个或多个数组元素，例如 &lt;code&gt;PATH[1 3 7]&lt;/code&gt; ，则仅更改指定的那些数组元素。如果在扩展或分配给数组变量时指定负索引，则将从数组末尾开始计算索引。例如，索引-1表示数组的最后一个索引。</target>
        </trans-unit>
        <trans-unit id="788fcc2dc7b9ec9c743aa985b73d706a1c941ace" translate="yes" xml:space="preserve">
          <source>If there are multiple files with the same name in these directories, only the first will be executed. They are executed in order of their filename, sorted (like globs) in a natural order (i.e. &quot;01&quot; sorts before &quot;2&quot;).</source>
          <target state="translated">如果这些目录中有多个同名的文件,则只执行第一个。它们按文件名的顺序执行,按自然顺序排序(像globs一样)(即 &quot;01 &quot;排在 &quot;2 &quot;之前)。</target>
        </trans-unit>
        <trans-unit id="37b3f6c1d9e2443aab8662a7a439797d66881a18" translate="yes" xml:space="preserve">
          <source>If there is no function called &lt;code&gt;NAME&lt;/code&gt; a new function will be created with the specified name</source>
          <target state="translated">如果没有名为 &lt;code&gt;NAME&lt;/code&gt; 的函数，则将使用指定的名称创建一个新函数</target>
        </trans-unit>
        <trans-unit id="6d5cfe09681412194f4ba98b5cd9ee3fb9a19be4" translate="yes" xml:space="preserve">
          <source>If there is nothing between a brace and a comma or two commas, it's interpreted as an empty element.</source>
          <target state="translated">如果在大括号和逗号或两个逗号之间没有任何东西,就会被解释为一个空元素。</target>
        </trans-unit>
        <trans-unit id="afe6214497e3e493ce7fed66861473c8f9d5c2d3" translate="yes" xml:space="preserve">
          <source>If there's more than one possibility, it will list them:</source>
          <target state="translated">如果有一个以上的可能性,它会列出它们。</target>
        </trans-unit>
        <trans-unit id="1b4ecf432926bdf9219384030390dce4a62ae339" translate="yes" xml:space="preserve">
          <source>If you are developing another program and would like to ship completions with your program, install them to the &quot;vendor&quot; completions directory. As this path may vary from system to system, the &lt;code&gt;pkgconfig&lt;/code&gt; framework should be used to discover this path with the output of &lt;code&gt;pkg-config --variable completionsdir fish&lt;/code&gt;.</source>
          <target state="translated">如果您正在开发另一个程序，并且希望随程序一起交付补全，请将它们安装到&amp;ldquo;供应商&amp;rdquo;补全目录中。由于该路径可能因系统而异，因此应使用 &lt;code&gt;pkgconfig&lt;/code&gt; 框架通过 &lt;code&gt;pkg-config --variable completionsdir fish&lt;/code&gt; 的输出来发现此路径。</target>
        </trans-unit>
        <trans-unit id="a2e3bcc2c86a34d726c99da6041e118aebc6aab5" translate="yes" xml:space="preserve">
          <source>If you are developing another program, you may wish to install configuration which is run for all users of the fish shell on a system. This is discouraged; if not carefully written, they may have side-effects or slow the startup of the shell. Additionally, users of other shells will not benefit from the Fish-specific configuration. However, if they are absolutely required, you may install them to the &quot;vendor&quot; configuration directory. As this path may vary from system to system, the &lt;code&gt;pkgconfig&lt;/code&gt; framework should be used to discover this path with the output of &lt;code&gt;pkg-config --variable confdir fish&lt;/code&gt;.</source>
          <target state="translated">如果要开发其他程序，则可能希望安装在系统上为fish shell的所有用户运行的配置。不鼓励这样做；如果编写不当，可能会产生副作用或使外壳启动速度变慢。此外，其他外壳的用户将无法从Fish特定的配置中受益。但是，如果绝对需要它们，则可以将它们安装到&amp;ldquo;供应商&amp;rdquo;配置目录中。由于该路径可能因系统而异，因此应使用 &lt;code&gt;pkgconfig&lt;/code&gt; 框架通过 &lt;code&gt;pkg-config --variable confdir fish&lt;/code&gt; 的输出来发现此路径。</target>
        </trans-unit>
        <trans-unit id="4916db32b6aa8cbf9c1ffbb01d73d5df4a8870cc" translate="yes" xml:space="preserve">
          <source>If you are developing another program, you may wish to install functions which are available for all users of the fish shell on a system. They can be installed to the &quot;vendor&quot; functions directory. As this path may vary from system to system, the &lt;code&gt;pkgconfig&lt;/code&gt; framework should be used to discover this path with the output of &lt;code&gt;pkg-config --variable functionsdir fish&lt;/code&gt;.</source>
          <target state="translated">如果您正在开发其他程序，则可能希望安装系统上所有可供鱼壳用户使用的功能。可以将它们安装到&amp;ldquo;供应商&amp;rdquo;功能目录。由于该路径可能因系统而异，因此应使用 &lt;code&gt;pkgconfig&lt;/code&gt; 框架通过 &lt;code&gt;pkg-config --variable functionsdir fish&lt;/code&gt; 的输出来发现此路径。</target>
        </trans-unit>
        <trans-unit id="2c8709afb8c37b08fcb75856aca6d9778e8772cd" translate="yes" xml:space="preserve">
          <source>If you are just interested in success or failure, you can run the command directly as the if-condition:</source>
          <target state="translated">如果你只对成功或失败感兴趣,可以直接以if条件的方式运行命令。</target>
        </trans-unit>
        <trans-unit id="6b4679db7ed1ee15be09b7a815eb852cdada744e" translate="yes" xml:space="preserve">
          <source>If you do not use any brackets, all the elements of the array will be written as separate items. This means you can easily iterate over an array using this syntax:</source>
          <target state="translated">如果你不使用任何括号,那么数组中的所有元素将被写成单独的项目。这意味着你可以很容易地使用这种语法在一个数组上进行迭代。</target>
        </trans-unit>
        <trans-unit id="21121c72874a1f506d3167db9734fb72635e8aba" translate="yes" xml:space="preserve">
          <source>If you do this via a function it should be defined with the &lt;code&gt;--no-scope-shadowing&lt;/code&gt; flag. Otherwise it won't have access to those variables.</source>
          <target state="translated">如果通过函数执行此操作，则应使用 &lt;code&gt;--no-scope-shadowing&lt;/code&gt; 标志进行定义。否则它将无法访问这些变量。</target>
        </trans-unit>
        <trans-unit id="76fc284188c8102e752b1bddb9f0226a85c1fbff" translate="yes" xml:space="preserve">
          <source>If you have a question not answered by this documentation, there are several avenues for help:</source>
          <target state="translated">如果您的问题没有在本文档中找到答案,您可以通过多种途径寻求帮助。</target>
        </trans-unit>
        <trans-unit id="d5d69fd8cf3faf8da11aa1c87838469a40522c72" translate="yes" xml:space="preserve">
          <source>If you have a strong understanding of other shells, and want to know what &lt;code&gt;fish&lt;/code&gt; does differently, search for the magic phrase &lt;em&gt;unlike other shells&lt;/em&gt;, which is used to call out important differences.</source>
          <target state="translated">如果您对其他贝壳有很好的了解，并且想知道 &lt;code&gt;fish&lt;/code&gt; 作用不同，请搜索&lt;em&gt;不同于其他贝壳&lt;/em&gt;的魔术短语，该短语用来指出重要的区别。</target>
        </trans-unit>
        <trans-unit id="d94e356f3d06bfc0847471bd8ac63c7fdd35e968" translate="yes" xml:space="preserve">
          <source>If you have an improvement for fish, you can submit it via the mailing list or the GitHub page.</source>
          <target state="translated">如果你有关于鱼的改进,你可以通过邮件列表或GitHub页面提交。</target>
        </trans-unit>
        <trans-unit id="3c91aaa3641347d6b92a729c32a7d96c010b6da2" translate="yes" xml:space="preserve">
          <source>If you have written new completions for a common Unix command, please consider sharing your work by submitting it via the instructions in &lt;a href=&quot;#more-help&quot;&gt;Further help and development&lt;/a&gt;.</source>
          <target state="translated">如果您为Unix通用命令写了新的修整，请考虑按照&amp;ldquo; &lt;a href=&quot;#more-help&quot;&gt;进一步的帮助和开发&amp;rdquo;中&lt;/a&gt;的说明提交工作，以共享您的工作。</target>
        </trans-unit>
        <trans-unit id="801a4bfeff44c78289adc6da559907889b10b7ff" translate="yes" xml:space="preserve">
          <source>If you installed a prepackaged version of fish, the package manager should have already done this for you.</source>
          <target state="translated">如果你安装了鱼的预包装版本,包管理器应该已经为你做了这个工作。</target>
        </trans-unit>
        <trans-unit id="bacc9cf3f5b8aece5e2cb795329bd9e98f414229" translate="yes" xml:space="preserve">
          <source>If you installed fish manually (e.g. by compiling it, not by using a package manager), you first need to add fish to the list of shells by executing the following command (assuming you installed fish in /usr/local):</source>
          <target state="translated">如果你手动安装了fish(例如,通过编译,而不是使用软件包管理器),你首先需要通过执行以下命令将fish添加到shell列表中(假设你将fish安装在/usr/local)。</target>
        </trans-unit>
        <trans-unit id="24dbcaa65ea45136e4556660a86f87890a258184" translate="yes" xml:space="preserve">
          <source>If you instead want to put a suspended job into the background, use the &lt;a href=&quot;commands#bg&quot;&gt;&lt;code&gt;bg&lt;/code&gt;&lt;/a&gt; command.</source>
          <target state="translated">如果您想将挂起的作业放到后台，请使用&lt;a href=&quot;commands#bg&quot;&gt; &lt;code&gt;bg&lt;/code&gt; &lt;/a&gt;命令。</target>
        </trans-unit>
        <trans-unit id="76575622923fc6960275a0372650f7e641f7d23c" translate="yes" xml:space="preserve">
          <source>If you prefer to use a different browser (other than as described above) for fish help, you can set the fish_help_browser variable. This variable may be set as an array, where the first element is the browser command and the rest are browser options.</source>
          <target state="translated">如果你喜欢使用不同的浏览器(除了上面描述的)来获取鱼的帮助,你可以设置fish_help_browser变量。这个变量可以设置为一个数组,其中第一个元素是浏览器命令,其余为浏览器选项。</target>
        </trans-unit>
        <trans-unit id="6b10dc2d52b83a3f3bcbb9eafde410131a7638e1" translate="yes" xml:space="preserve">
          <source>If you specify a negative index when expanding or assigning to an array variable, the index will be calculated from the end of the array. For example, the index -1 means the last index of an array.</source>
          <target state="translated">如果在扩展或分配给一个数组变量时指定了一个负的索引,索引将从数组的末端开始计算。例如,索引-1表示一个数组的最后一个索引。</target>
        </trans-unit>
        <trans-unit id="bef2a5da408bc0ccc604bb6e7c2ada1e1e368d28" translate="yes" xml:space="preserve">
          <source>If you specify both &lt;code&gt;--prefix&lt;/code&gt; and &lt;code&gt;--contains&lt;/code&gt; the last flag seen is used.</source>
          <target state="translated">如果同时指定 &lt;code&gt;--prefix&lt;/code&gt; 和 &lt;code&gt;--contains&lt;/code&gt; ，则使用最后看到的标志。</target>
        </trans-unit>
        <trans-unit id="cfeb5cfbb4d7330298cd9ae2e7db448aa2300961" translate="yes" xml:space="preserve">
          <source>If you specify the &lt;code&gt;-e&lt;/code&gt; or &lt;code&gt;--entire&lt;/code&gt; then each matching string is printed including any prefix or suffix not matched by the pattern (equivalent to &lt;code&gt;grep&lt;/code&gt; without the &lt;code&gt;-o&lt;/code&gt; flag). You can, obviously, achieve the same result by prepending and appending &lt;code&gt;*&lt;/code&gt; or &lt;code&gt;.*&lt;/code&gt; depending on whether or not you have specified the &lt;code&gt;--regex&lt;/code&gt; flag. The &lt;code&gt;--entire&lt;/code&gt; flag is simply a way to avoid having to complicate the pattern in that fashion and make the intent of the &lt;code&gt;string match&lt;/code&gt; clearer. Without &lt;code&gt;--entire&lt;/code&gt; and &lt;code&gt;--regex&lt;/code&gt;, a PATTERN will need to match the entire STRING before it will be reported.</source>
          <target state="translated">如果指定 &lt;code&gt;-e&lt;/code&gt; 或 &lt;code&gt;--entire&lt;/code&gt; ,则将打印每个匹配的字符串，包括该模式不匹配的任何前缀或后缀（等效于不带 &lt;code&gt;-o&lt;/code&gt; 标志的 &lt;code&gt;grep&lt;/code&gt; ）。显然，可以通过在前面加上 &lt;code&gt;*&lt;/code&gt; 或 &lt;code&gt;.*&lt;/code&gt; 实现相同的结果，具体取决于是否指定了 &lt;code&gt;--regex&lt;/code&gt; 标志。该 &lt;code&gt;--entire&lt;/code&gt; 标志仅仅是为了避免不得不在时尚的图案复杂化，使意图的方式 &lt;code&gt;string match&lt;/code&gt; 清晰。如果没有 &lt;code&gt;--entire&lt;/code&gt; 和 &lt;code&gt;--regex&lt;/code&gt; ，则PATTERN将需要与整个STRING匹配，然后才能进行报告。</target>
        </trans-unit>
        <trans-unit id="22a9feadf64d822a318f10f2b4793d1a2316c159" translate="yes" xml:space="preserve">
          <source>If you specify the &lt;code&gt;-f&lt;/code&gt; or &lt;code&gt;--filter&lt;/code&gt; flag then each input string is printed only if a replacement was done. This is useful where you would otherwise use this idiom: &lt;code&gt;a_cmd | string match pattern | string replace pattern new_pattern&lt;/code&gt;. You can instead just write &lt;code&gt;a_cmd | string replace --filter pattern new_pattern&lt;/code&gt;.</source>
          <target state="translated">如果指定 &lt;code&gt;-f&lt;/code&gt; 或 &lt;code&gt;--filter&lt;/code&gt; 标志，则仅在完成替换后才打印每个输入字符串。在您可能会使用以下成语的地方，这很有用： &lt;code&gt;a_cmd | string match pattern | string replace pattern new_pattern&lt;/code&gt; 。您可以改写 &lt;code&gt;a_cmd | string replace --filter pattern new_pattern&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="d8e54ae0a24762829d8f55a86df97428a46a48f0" translate="yes" xml:space="preserve">
          <source>If you want to add the directory &lt;code&gt;~/linux/bin&lt;/code&gt; to your PATH variable when using a login shell, add the following to your &lt;code&gt;~/.config/fish/config.fish&lt;/code&gt; file:</source>
          <target state="translated">如果要在使用登录外壳程序时将目录 &lt;code&gt;~/linux/bin&lt;/code&gt; 到PATH变量中，请将以下内容添加到 &lt;code&gt;~/.config/fish/config.fish&lt;/code&gt; 文件中：</target>
        </trans-unit>
        <trans-unit id="3226bbbfea92d52214a04066c17b75561d8b1dfd" translate="yes" xml:space="preserve">
          <source>If you want to find out more about the echo command used above, read the manual page for the echo command by writing: &lt;code&gt;man echo&lt;/code&gt;</source>
          <target state="translated">如果要查找有关上面使用的echo命令的更多信息，请通过以下方式阅读echo命令的手册页： &lt;code&gt;man echo&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="f6b8934a463057ab4cbebc293cbcc2bde13fda93" translate="yes" xml:space="preserve">
          <source>If you want to learn more about fish, there is &lt;a href=&quot;index&quot;&gt;lots of detailed documentation&lt;/a&gt;, an &lt;a href=&quot;https://lists.sourceforge.net/lists/listinfo/fish-users&quot;&gt;official mailing list&lt;/a&gt;, the IRC channel #fish on &lt;code&gt;irc.oftc.net&lt;/code&gt;, and the &lt;a href=&quot;https://github.com/fish-shell/fish-shell/&quot;&gt;github page&lt;/a&gt;.</source>
          <target state="translated">如果您想了解更多的鱼，还有&lt;a href=&quot;index&quot;&gt;很多详细的文档&lt;/a&gt;，一个&lt;a href=&quot;https://lists.sourceforge.net/lists/listinfo/fish-users&quot;&gt;官方的邮件列表&lt;/a&gt;，在IRC频道#fish &lt;code&gt;irc.oftc.net&lt;/code&gt; 和&lt;a href=&quot;https://github.com/fish-shell/fish-shell/&quot;&gt;GitHub的页面&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="19d1a8c24236cf7d05190b1115ef30aaad303cfb" translate="yes" xml:space="preserve">
          <source>If you want to make your command line more productive, more useful, and more fun, without learning a bunch of arcane syntax and configuration options, then &lt;code&gt;fish&lt;/code&gt; might be just what you're looking for!</source>
          <target state="translated">如果您想让命令行更高效，更有用，更有趣，而又不学习许多神秘的语法和配置选项，那么 &lt;code&gt;fish&lt;/code&gt; 可能就是您想要的！</target>
        </trans-unit>
        <trans-unit id="817bbc583c325d82f70d5e4e389c9fb588a7021e" translate="yes" xml:space="preserve">
          <source>If you want to reuse several arguments from the same line (&quot;!!:3*&quot; and the like), consider recalling the whole line and removing what you don't need (&lt;em&gt;Alt&lt;/em&gt;-&lt;b&gt;D&lt;/b&gt; and &lt;em&gt;Alt&lt;/em&gt;-&lt;b&gt;Backspace&lt;/b&gt; are your friends).</source>
          <target state="translated">如果要重用同一行中的多个参数（&amp;ldquo; !!：3 *&amp;rdquo;等），请考虑重新调用整行并删除不需要的内容（&lt;em&gt;Alt&lt;/em&gt; - &lt;b&gt;D&lt;/b&gt;和&lt;em&gt;Alt&lt;/em&gt; - &lt;b&gt;Backspace&lt;/b&gt;是您的朋友）。</target>
        </trans-unit>
        <trans-unit id="17b2c50714eca6eb3a1c4f418309af6c45fec63f" translate="yes" xml:space="preserve">
          <source>If you want to run a set of commands when &lt;code&gt;fish&lt;/code&gt; exits, use an &lt;a href=&quot;#event&quot;&gt;event handler&lt;/a&gt; that is triggered by the exit of the shell:</source>
          <target state="translated">如果要在 &lt;code&gt;fish&lt;/code&gt; 退出时运行一组命令，请使用由外壳退出触发的&lt;a href=&quot;#event&quot;&gt;事件处理程序&lt;/a&gt;：</target>
        </trans-unit>
        <trans-unit id="840dcfc4db83e11261bb160a1f0912d853943c4b" translate="yes" xml:space="preserve">
          <source>If you wish to use fish (or any other shell) as your default shell, you need to enter your new shell's executable &lt;code&gt;/usr/local/bin/fish&lt;/code&gt; in two places:</source>
          <target state="translated">如果希望将fish（或任何其他shell）用作默认shell，则需要在两个位置输入新shell的可执行文件 &lt;code&gt;/usr/local/bin/fish&lt;/code&gt; ：</target>
        </trans-unit>
        <trans-unit id="3a88aaa448eb4ccc5d7c16b222b1aaafa2e3553e" translate="yes" xml:space="preserve">
          <source>If your command does not need access to stdin, consider using &lt;code&gt;source&lt;/code&gt; instead.</source>
          <target state="translated">如果您的命令不需要访问stdin，请考虑改用 &lt;code&gt;source&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="20b7e02e5dced2f235b74397e5dd8fd6678ecaa1" translate="yes" xml:space="preserve">
          <source>If, in the example above, $WORD is undefined or an empty list, the &quot;s&quot; is not printed. However, it is printed, if $WORD is the empty string.</source>
          <target state="translated">如果在上面的例子中,$WORD是未定义的或者是一个空的列表,&quot;s &quot;不会被打印出来。但是,如果$WORD是空字符串,则会被打印出来。</target>
        </trans-unit>
        <trans-unit id="cd4f982a2dfbfb7a494a0fcc11edc18044fd3ee7" translate="yes" xml:space="preserve">
          <source>Import the abbreviations defined on another_host over SSH.</source>
          <target state="translated">通过 SSH 导入在 another_host 上定义的缩写。</target>
        </trans-unit>
        <trans-unit id="99b7d1b47f67f33906cafe0ea45bb9a7ae9de792" translate="yes" xml:space="preserve">
          <source>In addition, when adding abbreviations:</source>
          <target state="translated">此外,在添加缩略语时。</target>
        </trans-unit>
        <trans-unit id="b11dd25d3b50e779c52a3bed6755a9de86e7cc31" translate="yes" xml:space="preserve">
          <source>In assignment mode, &lt;code&gt;set&lt;/code&gt; does not modify the exit status. This allows simultaneous capture of the output and exit status of a subcommand, e.g. &lt;code&gt;if set output (command)&lt;/code&gt;. In query mode, the exit status is the number of variables that were not found. In erase mode, &lt;code&gt;set&lt;/code&gt; exits with a zero exit status in case of success, with a non-zero exit status if the commandline was invalid, if the variable was write-protected or if the variable did not exist.</source>
          <target state="translated">在分配模式下， &lt;code&gt;set&lt;/code&gt; 不会修改退出状态。这允许同时捕获子命令的输出和退出状态，例如， &lt;code&gt;if set output (command)&lt;/code&gt; 。在查询模式下，退出状态是未找到的变量数。在擦除模式下，如果成功，则 &lt;code&gt;set&lt;/code&gt; 退出状态为零退出状态；如果命令行无效，变量被写保护或者变量不存在，则set退出状态为非零状态。</target>
        </trans-unit>
        <trans-unit id="997bbb76e726398decafa893aef44209d89a5923" translate="yes" xml:space="preserve">
          <source>In bash, this would have created two directories &quot;Mister&quot; and &quot;Noodle&quot;. In &lt;code&gt;fish&lt;/code&gt;, it created only one: the variable had the value &quot;Mister Noodle&quot;, so that is the argument that was passed to &lt;code&gt;mkdir&lt;/code&gt;, spaces and all. Other shells use the term &quot;arrays&quot;, rather than lists.</source>
          <target state="translated">在bash中，这将创建两个目录&amp;ldquo; Mister&amp;rdquo;和&amp;ldquo; Noodle&amp;rdquo;。在 &lt;code&gt;fish&lt;/code&gt; 中，它仅创建一个：变量的值为&amp;ldquo; Moodle Noodle&amp;rdquo;，因此这是传递给 &lt;code&gt;mkdir&lt;/code&gt; ，spaces和all的参数。其他外壳使用术语&amp;ldquo;数组&amp;rdquo;而不是列表。</target>
        </trans-unit>
        <trans-unit id="febdce18a02406c3f663a8114d7d2b52f9d2f956" translate="yes" xml:space="preserve">
          <source>In cases such as this, one can use &lt;code&gt;command&lt;/code&gt;&lt;code&gt;test&lt;/code&gt; to explicitly use the system's standalone &lt;code&gt;test&lt;/code&gt; rather than this &lt;code&gt;builtin&lt;/code&gt;&lt;code&gt;test&lt;/code&gt;.</source>
          <target state="translated">在这种情况下，可以使用 &lt;code&gt;command&lt;/code&gt; &lt;code&gt;test&lt;/code&gt; 来显式使用系统的独立 &lt;code&gt;test&lt;/code&gt; 而不要使用此 &lt;code&gt;builtin&lt;/code&gt; &lt;code&gt;test&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="8150d5ade4961a7346cfe9d6f7af40451a0e9eba" translate="yes" xml:space="preserve">
          <source>In erase mode, if variable indices are specified, only the specified slices of the array variable will be erased.</source>
          <target state="translated">在擦除模式下,如果指定了变量索引,则只擦除数组变量的指定片断。</target>
        </trans-unit>
        <trans-unit id="d285383bee7174093582f84311886d8e77b2597e" translate="yes" xml:space="preserve">
          <source>In fish versions prior to 2.3.0 the &lt;code&gt;$argv&lt;/code&gt; variable would have a single element (the name of the sourced file) if no arguments are present. Otherwise it would contain arguments without the name of the sourced file. That behavior was very confusing and unlike other shells such as bash and zsh.</source>
          <target state="translated">在2.3.0之前的fish版本中，如果不存在任何参数，则 &lt;code&gt;$argv&lt;/code&gt; 变量将具有单个元素（源文件的名称）。否则，它将包含不带源文件名称的参数。这种行为非常令人困惑，并且与其他shell（例如bash和zsh）不同。</target>
        </trans-unit>
        <trans-unit id="b6167c9c2e21f8c5d664cda565772acda6aa5a44" translate="yes" xml:space="preserve">
          <source>In fish versions prior to 2.5.0 it was possible to create a function named &lt;code&gt;-&lt;/code&gt; that would do &lt;code&gt;cd -&lt;/code&gt;. Changes in the 2.5.0 release included several bug fixes that enforce the rule that a bare hyphen is not a valid function (or variable) name. However, you can achieve the same effect via an abbreviation:</source>
          <target state="translated">在之前的2.5.0版本中的鱼有可能创建一个名为功能 &lt;code&gt;-&lt;/code&gt; 即会做 &lt;code&gt;cd -&lt;/code&gt; 。2.5.0版本中的更改包括一些错误修复，这些错误强制实施以下规则：裸连字符不是有效的函数（或变量）名称。但是，您可以通过缩写来达到相同的效果：</target>
        </trans-unit>
        <trans-unit id="c82580c4fc0344cd7e4b4c3bbc7ac9db12a80d91" translate="yes" xml:space="preserve">
          <source>In functions, &lt;code&gt;block&lt;/code&gt; can be useful while performing work that should not be interrupted by the shell.</source>
          <target state="translated">在函数中， &lt;code&gt;block&lt;/code&gt; 在执行不应被shell中断的工作时很有用。</target>
        </trans-unit>
        <trans-unit id="89ff03b555073b2736f671e958968657fb6eb4ed" translate="yes" xml:space="preserve">
          <source>In general, special characters are special by default, so &lt;code&gt;a+&lt;/code&gt; matches one or more &quot;a&quot;s, while &lt;code&gt;a\+&lt;/code&gt; matches an &quot;a&quot; and then a &quot;+&quot;. &lt;code&gt;(a+)&lt;/code&gt; matches one or more &quot;a&quot;s in a capturing group (&lt;code&gt;(?:XXXX)&lt;/code&gt; denotes a non-capturing group). For the replacement parameter of &lt;code&gt;replace&lt;/code&gt;, &lt;code&gt;$n&lt;/code&gt; refers to the n-th group of the match. In the match parameter, &lt;code&gt;\n&lt;/code&gt; (e.g. &lt;code&gt;\1&lt;/code&gt;) refers back to groups.</source>
          <target state="translated">通常，特殊字符默认情况下是特殊字符，因此 &lt;code&gt;a+&lt;/code&gt; 匹配一个或多个&amp;ldquo; a&amp;rdquo;，而 &lt;code&gt;a\+&lt;/code&gt; 匹配&amp;ldquo; a&amp;rdquo;，然后匹配&amp;ldquo; +&amp;rdquo;。 &lt;code&gt;(a+)&lt;/code&gt; 与捕获组中的一个或多个&amp;ldquo; a&amp;rdquo;匹配（ &lt;code&gt;(?:XXXX)&lt;/code&gt; 表示一个非捕获组）。对于 &lt;code&gt;replace&lt;/code&gt; 的替换参数， &lt;code&gt;$n&lt;/code&gt; 表示匹配的第n组。在match参数中， &lt;code&gt;\n&lt;/code&gt; （例如 &lt;code&gt;\1&lt;/code&gt; ）指代组。</target>
        </trans-unit>
        <trans-unit id="52f151afd8c58f05083781d29e38adf8acc285ad" translate="yes" xml:space="preserve">
          <source>In order to change your default shell, type:</source>
          <target state="translated">为了改变你的默认shell,输入。</target>
        </trans-unit>
        <trans-unit id="7744f887d10f15ca76ae2472bb145fdd5fdbdb57" translate="yes" xml:space="preserve">
          <source>In order to protect the shell from consuming too many system resources, &lt;code&gt;read&lt;/code&gt; will only consume a maximum of 10 MiB (1048576 bytes); if the terminator is not reached before this limit then VARIABLE is set to empty and the exit status is set to 122. This limit can be altered with the &lt;code&gt;fish_read_limit&lt;/code&gt; variable. If set to 0 (zero), the limit is removed.</source>
          <target state="translated">为了防止外壳程序消耗过多的系统资源， &lt;code&gt;read&lt;/code&gt; 最多只会消耗10 MiB（1048576字节）；因此，读取操作最多消耗10 MiB（1048576字节）。如果在此限制之前未达到终止符，则将VARIABLE设置为空并将退出状态设置为122。可以使用 &lt;code&gt;fish_read_limit&lt;/code&gt; 变量更改此限制。如果设置为0（零），则删除限制。</target>
        </trans-unit>
        <trans-unit id="cfb4b17946050d9f509c4bdb763f770ebb06687a" translate="yes" xml:space="preserve">
          <source>In query mode, the scope to be examined can be specified.</source>
          <target state="translated">在查询模式下,可以指定要检查的范围。</target>
        </trans-unit>
        <trans-unit id="89d4f28841a1759ddcc1b8894ac4045a23593691" translate="yes" xml:space="preserve">
          <source>In the following code, all output is redirected to the file out.html.</source>
          <target state="translated">在下面的代码中,所有的输出都被重定向到文件out.html。</target>
        </trans-unit>
        <trans-unit id="67bf59485bd852b33bf0045b83854687c5fd2923" translate="yes" xml:space="preserve">
          <source>In the following examples if a flag is not seen when parsing the arguments then the corresponding _flag_X var(s) will not be set.</source>
          <target state="translated">在下面的例子中,如果在解析参数时没有看到标志,那么相应的_flag_X var(s)将不会被设置。</target>
        </trans-unit>
        <trans-unit id="b18679bb485a969aa3729a892fbc342e477da1e5" translate="yes" xml:space="preserve">
          <source>In the overwhelming majority of cases, splitting on spaces is unwanted, so this is an improvement.</source>
          <target state="translated">在绝大多数情况下,对空间的分割是不需要的,所以这是一种改进。</target>
        </trans-unit>
        <trans-unit id="40d4bef31048f07adb0a3c1f574c30c70992f0e5" translate="yes" xml:space="preserve">
          <source>In these cases use &lt;code&gt;string split &quot; &quot;&lt;/code&gt; like:</source>
          <target state="translated">在这种情况下，请使用 &lt;code&gt;string split &quot; &quot;&lt;/code&gt; 例如：</target>
        </trans-unit>
        <trans-unit id="e86e38a4028df2e1d281758cf65343b3a55357c4" translate="yes" xml:space="preserve">
          <source>In these cases, the expansion eliminates the string, as a result of the implicit &lt;a href=&quot;#cartesian-product&quot;&gt;cartesian product&lt;/a&gt;.</source>
          <target state="translated">在这些情况下，由于隐式&lt;a href=&quot;#cartesian-product&quot;&gt;笛卡尔乘积&lt;/a&gt;的结果，扩展消除了字符串。</target>
        </trans-unit>
        <trans-unit id="a96781a5a37dbe8375812a63f70f63e6201fe8ae" translate="yes" xml:space="preserve">
          <source>Incorrect use of output redirects</source>
          <target state="translated">输出重定向的使用不正确</target>
        </trans-unit>
        <trans-unit id="00039aeb76d249d44e4bf3ba01d88ffc368e8bd4" translate="yes" xml:space="preserve">
          <source>Index range expansion</source>
          <target state="translated">指数范围扩大</target>
        </trans-unit>
        <trans-unit id="6fb7f6ce1f52c7d40f5bab615e431e3f8551d458" translate="yes" xml:space="preserve">
          <source>Initialization files</source>
          <target state="translated">初始化文件</target>
        </trans-unit>
        <trans-unit id="2a06266a915eac92808f8af015840d61f777058b" translate="yes" xml:space="preserve">
          <source>Input/Output (IO) redirection</source>
          <target state="translated">输入/输出(IO)重定向。</target>
        </trans-unit>
        <trans-unit id="cc03501ba8e2728a6aa8f006cb5c7941d732153b" translate="yes" xml:space="preserve">
          <source>Insert mode</source>
          <target state="translated">插入模式</target>
        </trans-unit>
        <trans-unit id="653edb0bfdb6bd20dfe7affb5776bc7d271237c7" translate="yes" xml:space="preserve">
          <source>Internals</source>
          <target state="translated">Internals</target>
        </trans-unit>
        <trans-unit id="2473e96bc614a911821242119918a241a41836d6" translate="yes" xml:space="preserve">
          <source>Introduction</source>
          <target state="translated">Introduction</target>
        </trans-unit>
        <trans-unit id="c62c2864f20a2be4aa0393bfb86357685145de0e" translate="yes" xml:space="preserve">
          <source>Invoking &lt;code&gt;complete&lt;/code&gt; multiple times for the same command adds the new definitions on top of any existing completions defined for the command.</source>
          <target state="translated">为同一命令多次调用 &lt;code&gt;complete&lt;/code&gt; 会将新定义添加到为该命令定义的任何现有完成功能的基础上。</target>
        </trans-unit>
        <trans-unit id="83c3b240dba13d15ae7f53c1a501f0c631e4c4fe" translate="yes" xml:space="preserve">
          <source>It is also possible to add all emacs-mode bindings to vi-mode by using something like</source>
          <target state="translated">也可以通过使用类似这样的方法将所有 emacs 模式的绑定添加到 vi-mode 中。</target>
        </trans-unit>
        <trans-unit id="8ab84d80263900ba9d5b235b1f2ea80519e28b73" translate="yes" xml:space="preserve">
          <source>It is also possible to set or erase individual elements of an array:</source>
          <target state="translated">也可以设置或擦除一个数组中的单个元素。</target>
        </trans-unit>
        <trans-unit id="5d526954a8bce879648c1f8388f9dcd5c2cf78df" translate="yes" xml:space="preserve">
          <source>It is common to want to validate the the value provided for an option satisfies some criteria. For example, that it is a valid integer within a specific range. You can always do this after &lt;code&gt;argparse&lt;/code&gt; returns but you can also request that &lt;code&gt;argparse&lt;/code&gt; perform the validation by executing arbitrary fish script. To do so simply append an &lt;code&gt;!&lt;/code&gt; (exclamation-mark) then the fish script to be run. When that code is executed three vars will be defined:</source>
          <target state="translated">通常要验证为选项提供的值是否满足某些条件。例如，它是特定范围内的有效整数。您始终可以在 &lt;code&gt;argparse&lt;/code&gt; 返回之后执行此操作，但是您也可以通过执行任意fish脚本来请求 &lt;code&gt;argparse&lt;/code&gt; 执行验证。为此，只需附加一个 &lt;code&gt;!&lt;/code&gt; （感叹号），然后运行鱼脚本。当执行该代码时，将定义三个var：</target>
        </trans-unit>
        <trans-unit id="a71bcd2264c669eb00c671521098fb03d224a747" translate="yes" xml:space="preserve">
          <source>It is possible to directly create functions and variables in &lt;code&gt;config.fish&lt;/code&gt; file, using the commands shown above. For example:</source>
          <target state="translated">使用上面显示的命令，可以在 &lt;code&gt;config.fish&lt;/code&gt; 文件中直接创建函数和变量。例如：</target>
        </trans-unit>
        <trans-unit id="83c56d7ebd2ae7a42fad58d3fe21565a95290624" translate="yes" xml:space="preserve">
          <source>It is usually added inside of a conditional block such as an &lt;a href=&quot;#if&quot;&gt;if&lt;/a&gt; statement or a &lt;a href=&quot;#switch&quot;&gt;switch&lt;/a&gt; statement to conditionally stop the executing function and return to the caller, but it can also be used to specify the exit status of a function.</source>
          <target state="translated">通常将其添加到条件块（例如&lt;a href=&quot;#if&quot;&gt;if&lt;/a&gt;语句或&lt;a href=&quot;#switch&quot;&gt;switch&lt;/a&gt;语句）中，以有条件地停止执行函数并返回到调用方，但是它也可以用于指定函数的退出状态。</target>
        </trans-unit>
        <trans-unit id="cefa92c853442bbe4dd3a6ef0bacadea8c59bfbd" translate="yes" xml:space="preserve">
          <source>It is very important that function definition files only contain the definition for the specified function and nothing else. Otherwise, it is possible that autoloading a function files requires that the function already be loaded, which creates a circular dependency.</source>
          <target state="translated">非常重要的一点是,函数定义文件只包含指定函数的定义,而没有其他内容。否则,自动加载函数文件时,有可能要求已经加载了该函数,这就造成了循环依赖。</target>
        </trans-unit>
        <trans-unit id="13749347248c90340a66276ab0e48e071806f943" translate="yes" xml:space="preserve">
          <source>It knows about paths and options:</source>
          <target state="translated">它知道路径和选项。</target>
        </trans-unit>
        <trans-unit id="f51b747a62fc1665fa16726f0cc05a908bd9ced6" translate="yes" xml:space="preserve">
          <source>It will print &lt;code&gt;xa b c x&lt;/code&gt;. But if you do</source>
          <target state="translated">它将打印 &lt;code&gt;xa b c x&lt;/code&gt; 。但是如果你这样做</target>
        </trans-unit>
        <trans-unit id="784cf5b2d3ebe2dbad48daf3fd3356b85327650b" translate="yes" xml:space="preserve">
          <source>Iterating over a list of numbers can be done with &lt;code&gt;seq&lt;/code&gt;:</source>
          <target state="translated">可以使用 &lt;code&gt;seq&lt;/code&gt; 对数字列表进行迭代：</target>
        </trans-unit>
        <trans-unit id="1c2654e77c8a1d66520f0e811b49f2ee16ec66ef" translate="yes" xml:space="preserve">
          <source>Job control</source>
          <target state="translated">工作控制</target>
        </trans-unit>
        <trans-unit id="090e4272d6cb5283367e3c64d3f84a1ce2fa8aee" translate="yes" xml:space="preserve">
          <source>Jobs in the list of jobs are sent a hang-up signal when fish terminates, which usually causes the job to terminate; &lt;code&gt;disown&lt;/code&gt; allows these processes to continue regardless.</source>
          <target state="translated">当鱼终止时，作业列表中的作业会收到挂断信号，这通常会导致作业终止。 &lt;code&gt;disown&lt;/code&gt; 允许这些过程继续进行。</target>
        </trans-unit>
        <trans-unit id="946c99cee0972cba5b6dec7f34cb20b94d3a2715" translate="yes" xml:space="preserve">
          <source>Keep in mind that parameter expansion takes before expressions are evaluated. This can be very useful in order to perform calculations involving shell variables or the output of command substitutions, but it also means that parenthesis and the asterisk glob character have to be escaped or quoted.</source>
          <target state="translated">请记住,参数扩展是在表达式被评估之前进行的,这对于执行涉及shell变量的计算或命令替换的输出非常有用。这对于执行涉及shell变量的计算或命令替换的输出非常有用,但这也意味着括号和星号glob字符必须被转义或引用。</target>
        </trans-unit>
        <trans-unit id="573891be377321acc4815f0519173b9b072d48fa" translate="yes" xml:space="preserve">
          <source>Key bindings may use &quot;modes&quot;, which mimics Vi's modal input behavior. The default mode is &quot;default&quot;, and every bind applies to a single mode. The mode can be viewed/changed with the &lt;code&gt;$fish_bind_mode&lt;/code&gt; variable.</source>
          <target state="translated">按键绑定可以使用&amp;ldquo;模式&amp;rdquo;，它模仿Vi的模式输入行为。默认模式为&amp;ldquo;默认&amp;rdquo;，并且每个绑定都适用于单个模式。可以使用 &lt;code&gt;$fish_bind_mode&lt;/code&gt; 变量查看/更改模式。</target>
        </trans-unit>
        <trans-unit id="b562f1a6d0c5684ca96b09426bc1669506a7f803" translate="yes" xml:space="preserve">
          <source>Learning fish</source>
          <target state="translated">学鱼</target>
        </trans-unit>
        <trans-unit id="b5cf98d60edf53bb04a75b49fe8d89b334867632" translate="yes" xml:space="preserve">
          <source>Licensed under the GNU General Public License, version 2.</source>
          <target state="translated">根据GNU通用公共许可证,第2版授权。</target>
        </trans-unit>
        <trans-unit id="f063dbdbbc3586964fed3651ab53c12631bbacd5" translate="yes" xml:space="preserve">
          <source>Like other shells, a dollar sign performs variable substitution:</source>
          <target state="translated">和其他壳一样,美元符号执行变量替换。</target>
        </trans-unit>
        <trans-unit id="1c10e83fba90f8ed8fbb793d35b29d018d6a8897" translate="yes" xml:space="preserve">
          <source>Like other shells, fish allows multiple commands either on separate lines or the same line.</source>
          <target state="translated">和其他贝壳一样,fish允许多个命令,既可以在不同的行上,也可以在同一行上。</target>
        </trans-unit>
        <trans-unit id="57c9502a7d7d48fd4a86b45fefb2b163491c3ae1" translate="yes" xml:space="preserve">
          <source>Lists</source>
          <target state="translated">Lists</target>
        </trans-unit>
        <trans-unit id="a51da1d245e2b299170419f02a7283c1cf86ec93" translate="yes" xml:space="preserve">
          <source>Lists adjacent to other lists or strings are expanded as &lt;a href=&quot;index#cartesian-product&quot;&gt;cartesian products&lt;/a&gt; unless quoted (see &lt;a href=&quot;index#expand-variable&quot;&gt;Variable expansion&lt;/a&gt;):</source>
          <target state="translated">除非引用，否则与其他列表或字符串相邻的列表将扩展为&lt;a href=&quot;index#cartesian-product&quot;&gt;笛卡尔乘积&lt;/a&gt;（请参见&lt;a href=&quot;index#expand-variable&quot;&gt;变量扩展&lt;/a&gt;）：</target>
        </trans-unit>
        <trans-unit id="e550372c446deb80cb7097a6530c7895ce489c98" translate="yes" xml:space="preserve">
          <source>Lists adjacent to other lists or strings are expanded as cartesian products:</source>
          <target state="translated">与其他列表或字符串相邻的列表被扩展为卡提斯产品。</target>
        </trans-unit>
        <trans-unit id="d036c0ec2ab378b452b8d2cead3a3ffcc191575a" translate="yes" xml:space="preserve">
          <source>Lists cannot contain other lists: there is no recursion. A variable is a list of strings, full stop.</source>
          <target state="translated">列表不能包含其他列表:不存在递归。变量是一个字符串的列表,句号。</target>
        </trans-unit>
        <trans-unit id="8172703ebdf7bfc5b44da606bf9f833637212ffc" translate="yes" xml:space="preserve">
          <source>Locale variables</source>
          <target state="translated">本地化变量</target>
        </trans-unit>
        <trans-unit id="02720f9d38bf4f35e84ed5228689898bee176418" translate="yes" xml:space="preserve">
          <source>Loops</source>
          <target state="translated">Loops</target>
        </trans-unit>
        <trans-unit id="4e836fdc2572ab23d5dc8c36bd613ac6b0f82d63" translate="yes" xml:space="preserve">
          <source>Manual</source>
          <target state="translated">Manual</target>
        </trans-unit>
        <trans-unit id="f5f695dcfd95e469044fda4ad8dda41439800142" translate="yes" xml:space="preserve">
          <source>Many other shells have a large library of builtin commands. Most of these commands are also available as standalone commands, but have been implemented in the shell anyway. To avoid code duplication, and to avoid the confusion of subtly differing versions of the same command, &lt;code&gt;fish&lt;/code&gt; generally only implements builtins for actions which cannot be performed by a regular command.</source>
          <target state="translated">许多其他外壳程序都有大量的内置命令库。这些命令中的大多数也可以作为独立命令使用，但无论如何都已在Shell中实现。为了避免代码重复，并避免同一命令的不同版本混淆， &lt;code&gt;fish&lt;/code&gt; 通常只为那些常规命令无法执行的操作实现内置函数。</target>
        </trans-unit>
        <trans-unit id="508666f7961e41b7a23a46d49b1c68da21e0ab6e" translate="yes" xml:space="preserve">
          <source>Many terminals support 24-bit (i.e., true-color) color escape sequences. This includes modern xterm, Gnome Terminal, Konsole, and iTerm2. Fish attempts to detect such terminals through various means in &lt;code&gt;config.fish&lt;/code&gt; You can explicitly force that support via &lt;code&gt;set fish_term24bit 1&lt;/code&gt;.</source>
          <target state="translated">许多终端支持24位（即真彩色）颜色转义序列。这包括现代的xterm，Gnome Terminal，Konsole和iTerm2。Fish尝试通过 &lt;code&gt;config.fish&lt;/code&gt; 中的各种方式来检测此类终端。您可以通过 &lt;code&gt;set fish_term24bit 1&lt;/code&gt; 显式强制支持。</target>
        </trans-unit>
        <trans-unit id="ee9b4890d50f0c6b762d298b81c92845215e8616" translate="yes" xml:space="preserve">
          <source>Match Glob Examples</source>
          <target state="translated">匹配Glob的例子</target>
        </trans-unit>
        <trans-unit id="5d635a6434318430e0640768784677cf44ef96c2" translate="yes" xml:space="preserve">
          <source>Match Regex Examples</source>
          <target state="translated">匹配Regex示例</target>
        </trans-unit>
        <trans-unit id="282c4c424c8c8f802f09ed9069046a66c3e0e2df" translate="yes" xml:space="preserve">
          <source>Matching can be made case-insensitive with &lt;code&gt;--ignore-case&lt;/code&gt; or &lt;code&gt;-i&lt;/code&gt;.</source>
          <target state="translated">可以使用 &lt;code&gt;--ignore-case&lt;/code&gt; 或 &lt;code&gt;-i&lt;/code&gt; 使匹配不区分大小写。</target>
        </trans-unit>
        <trans-unit id="dfe39636b572a032956990221bea7522894ca013" translate="yes" xml:space="preserve">
          <source>Mismatched parenthesis</source>
          <target state="translated">错位的括号</target>
        </trans-unit>
        <trans-unit id="7d99cf687fc07cadeb9c71efe74a35ddac5120de" translate="yes" xml:space="preserve">
          <source>More on universal variables</source>
          <target state="translated">更多关于通用变量的信息</target>
        </trans-unit>
        <trans-unit id="a6722727e636d961891415cd8a8813e266709c00" translate="yes" xml:space="preserve">
          <source>Most programs allow you to suspend the program's execution and return control to &lt;code&gt;fish&lt;/code&gt; by pressing &lt;em&gt;Control&lt;/em&gt;-&lt;b&gt;Z&lt;/b&gt; (also referred to as &lt;code&gt;^Z&lt;/code&gt;). Once back at the &lt;code&gt;fish&lt;/code&gt; commandline, you can start other programs and do anything you want. If you then want you can go back to the suspended command by using the &lt;a href=&quot;commands#fg&quot;&gt;&lt;code&gt;fg&lt;/code&gt;&lt;/a&gt; (foreground) command.</source>
          <target state="translated">大多数程序允许您通过按&lt;em&gt;Control&lt;/em&gt; - &lt;b&gt;Z&lt;/b&gt;（也称为 &lt;code&gt;^Z&lt;/code&gt; ）来暂停程序的执行并将控制权返回给 &lt;code&gt;fish&lt;/code&gt; 。回到 &lt;code&gt;fish&lt;/code&gt; 命令行后，您可以启动其他程序并执行您想要的任何操作。如果需要，可以使用&lt;a href=&quot;commands#fg&quot;&gt; &lt;code&gt;fg&lt;/code&gt; &lt;/a&gt;（前景）命令返回到暂停的命令。&lt;em&gt;&lt;/em&gt;&lt;b&gt;&lt;/b&gt;</target>
        </trans-unit>
        <trans-unit id="e36a3163fcb5b2ce91e7e62b6620c694486a5106" translate="yes" xml:space="preserve">
          <source>Most programs use three input/output (IO) streams, each represented by a number called a file descriptor (FD). These are:</source>
          <target state="translated">大多数程序使用三个输入/输出(IO)流,每个流用一个数字表示,称为文件描述符(FD)。这三个流是:</target>
        </trans-unit>
        <trans-unit id="fbfe945f56b2d1285935393b0ba01a8e6e9fb533" translate="yes" xml:space="preserve">
          <source>Most subcommands accept a &lt;code&gt;-q&lt;/code&gt; or &lt;code&gt;--quiet&lt;/code&gt; switch, which suppresses the usual output but exits with the documented status.</source>
          <target state="translated">大多数子命令接受 &lt;code&gt;-q&lt;/code&gt; 或 &lt;code&gt;--quiet&lt;/code&gt; 开关，该开关禁止显示常规输出，但以记录的状态退出。</target>
        </trans-unit>
        <trans-unit id="9e4b95e5fe05cdb2e32c0be4dc38dcb8444a090a" translate="yes" xml:space="preserve">
          <source>Multiline editing</source>
          <target state="translated">多线编辑</target>
        </trans-unit>
        <trans-unit id="284d6c5f151a78ee571b877c91d2822cf913407f" translate="yes" xml:space="preserve">
          <source>Multiple lines are OK. Colors can be set via &lt;code&gt;set_color&lt;/code&gt;, passing it named ANSI colors, or hex RGB values:</source>
          <target state="translated">多行即可。可以通过 &lt;code&gt;set_color&lt;/code&gt; 设置颜色，将其传递为ANSI颜色或十六进制RGB值：</target>
        </trans-unit>
        <trans-unit id="b9313e4afc7e7087f2691f5390743aa11cb2045a" translate="yes" xml:space="preserve">
          <source>Multiple lines are not supported in &lt;code&gt;fish_right_prompt&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;fish_right_prompt&lt;/code&gt; 不支持多行。</target>
        </trans-unit>
        <trans-unit id="2ddaeb8bc8e45a0d0bc521306478830db49c61a1" translate="yes" xml:space="preserve">
          <source>My command (pkg-config) gives its output as a single long string?</source>
          <target state="translated">我的命令(pkg-config)的输出是一个长字符串?</target>
        </trans-unit>
        <trans-unit id="f9c6fa94b0cdb85c962b8db6aabb5f0166f8183a" translate="yes" xml:space="preserve">
          <source>NUL Delimited Examples</source>
          <target state="translated">NUL限制性例子</target>
        </trans-unit>
        <trans-unit id="2bcd7736113c6b4efdb7226bbeffaacd2a34dab2" translate="yes" xml:space="preserve">
          <source>Next, do the following (assuming fish was installed to /usr/local):</source>
          <target state="translated">接下来,执行以下操作(假设fish被安装到/usr/local)。</target>
        </trans-unit>
        <trans-unit id="e1c89d68ecad2be53a8cf7ccdf90c12f59e35a10" translate="yes" xml:space="preserve">
          <source>Non existing commands.</source>
          <target state="translated">非现有命令。</target>
        </trans-unit>
        <trans-unit id="76f3e65e8538fb0ceb8d456aa90c5d4ef9931a07" translate="yes" xml:space="preserve">
          <source>Normally when &lt;code&gt;fish&lt;/code&gt; starts a program, this program will be put in the foreground, meaning it will take control of the terminal and &lt;code&gt;fish&lt;/code&gt; will be stopped until the program finishes. Sometimes this is not desirable. For example, you may wish to start an application with a graphical user interface from the terminal, and then be able to continue using the shell. In such cases, there are several ways in which the user can change fish's behavior.</source>
          <target state="translated">通常，当 &lt;code&gt;fish&lt;/code&gt; 启动程序时，该程序将放在前台，这意味着它将控制终端，并且 &lt;code&gt;fish&lt;/code&gt; 将停止运行，直到程序完成。有时这是不可取的。例如，您可能希望从终端通过图形用户界面启动应用程序，然后能够继续使用外壳程序。在这种情况下，用户可以通过多种方式来改变鱼的行为。</target>
        </trans-unit>
        <trans-unit id="08c5c1ef76ceaf50dd2d8b6a05425f76eaec2b83" translate="yes" xml:space="preserve">
          <source>Note that &lt;code&gt;case&lt;/code&gt; does not fall through, and can accept multiple arguments or (quoted) wildcards.</source>
          <target state="translated">请注意， &lt;code&gt;case&lt;/code&gt; 不会遗漏，并且可以接受多个参数或（引用的）通配符。</target>
        </trans-unit>
        <trans-unit id="daafcf66550c6e75c5e67349c16e61c50e7a4d2f" translate="yes" xml:space="preserve">
          <source>Note that array indices start at 1 in &lt;code&gt;fish&lt;/code&gt;, not 0, as is more common in other languages. This is because many common Unix tools like &lt;code&gt;seq&lt;/code&gt; are more suited to such use. An invalid index is silently ignored resulting in no value being substituted (not an empty string).</source>
          <target state="translated">请注意，在 &lt;code&gt;fish&lt;/code&gt; 中，数组索引从1开始，而不是0，这在其他语言中更为常见。这是因为许多通用的Unix工具（如 &lt;code&gt;seq&lt;/code&gt; )更适合这种用法。无效索引将被静默忽略，导致不替换任何值（不是空字符串）。</target>
        </trans-unit>
        <trans-unit id="a0707e5e6cd48555094dd0ce06f95a929ab9ee48" translate="yes" xml:space="preserve">
          <source>Note that because fish loads functions on-demand, saved functions will not function as &lt;a href=&quot;index#event&quot;&gt;event handlers&lt;/a&gt; until they are run or sourced otherwise. To activate an event handler for every new shell, add the function to your &lt;a href=&quot;index#initialization&quot;&gt;shell initialization file&lt;/a&gt; instead of using &lt;code&gt;funcsave&lt;/code&gt;.</source>
          <target state="translated">请注意，由于鱼加载函数按需提供功能，因此保存的函数只有在运行或以其他方式获取之前，才能用作&lt;a href=&quot;index#event&quot;&gt;事件处理程序&lt;/a&gt;。要为每个新外壳激活事件处理程序，请将函数添加到&lt;a href=&quot;index#initialization&quot;&gt;外壳初始化文件中，&lt;/a&gt;而不要使用 &lt;code&gt;funcsave&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="d05600b5a2c4216ed0373e93b0ae5b8dde601d3a" translate="yes" xml:space="preserve">
          <source>Note that command substitutions in a case statement will be evaluated even if its body is not taken. All substitutions, including command substitutions, must be performed before the value can be compared against the parameter.</source>
          <target state="translated">需要注意的是,即使case语句中的命令替换没有被采纳,也会被评估。所有的替换,包括命令替换,都必须在值与参数比较之前进行。</target>
        </trans-unit>
        <trans-unit id="27acedfb629019bcb72c1aaa58829703ce6d6432" translate="yes" xml:space="preserve">
          <source>Note that conversion may fail, e.g. &quot;102.234&quot; will not losslessly convert to an integer, causing printf to print an error.</source>
          <target state="translated">请注意,转换可能会失败,例如 &quot;102.234 &quot;不能无损转换为整数,导致printf打印错误。</target>
        </trans-unit>
        <trans-unit id="8107914840367cc99db95db5e903f636fb93ac38" translate="yes" xml:space="preserve">
          <source>Note that events are only received from the current fish process as there is no way to send events from one fish process to another.</source>
          <target state="translated">请注意,事件只能从当前鱼进程接收,因为没有办法从一个鱼进程向另一个鱼进程发送事件。</target>
        </trans-unit>
        <trans-unit id="b604d17300bf8871e1df935d8ccab61e77f2c2e6" translate="yes" xml:space="preserve">
          <source>Note that events are only sent to the current fish process as there is no way to send events from one fish process to another.</source>
          <target state="translated">请注意,事件只发送到当前鱼进程,因为没有办法将事件从一个鱼进程发送到另一个鱼进程。</target>
        </trans-unit>
        <trans-unit id="1816c418ab7796b893d641bb9d4e996647340b50" translate="yes" xml:space="preserve">
          <source>Note that fish does not fall through on case statements. Only the first matching case is executed.</source>
          <target state="translated">请注意,鱼不落在case语句上。只有第一个匹配的case才会被执行。</target>
        </trans-unit>
        <trans-unit id="dea20fe7204b37a954eb8c5b71576a69b5e9c5a0" translate="yes" xml:space="preserve">
          <source>Note that fish has a default titlebar message, which will be used if the fish_title function is undefined. So simply unsetting the fish_title function will not work.</source>
          <target state="translated">请注意,fish有一个默认的titlebar消息,如果fish_title函数未定义,则会使用这个消息。所以简单地取消设置fish_title函数是行不通的。</target>
        </trans-unit>
        <trans-unit id="216dd486d99355c7f2e848a5066c6390232ae830" translate="yes" xml:space="preserve">
          <source>Note that for backwards compatibility each subcommand can also be specified as a long option. For example, rather than &lt;code&gt;history search&lt;/code&gt; you can type &lt;code&gt;history --search&lt;/code&gt;. Those long options are deprecated and will be removed in a future release.</source>
          <target state="translated">注意，为了向后兼容，每个子命令也可以指定为long选项。例如，您可以输入 &lt;code&gt;history --search&lt;/code&gt; 而不是 &lt;code&gt;history search&lt;/code&gt; 。这些长选项已被弃用，并将在以后的版本中删除。</target>
        </trans-unit>
        <trans-unit id="c97f265eeb04a552b0a053d1fe6fd39164111e41" translate="yes" xml:space="preserve">
          <source>Note that for most commands, if any wildcard fails to expand, the command is not executed, &lt;a href=&quot;#variables-status&quot;&gt;&lt;code&gt;$status&lt;/code&gt;&lt;/a&gt; is set to nonzero, and a warning is printed. This behavior is consistent with setting &lt;code&gt;shopt -s failglob&lt;/code&gt; in bash. There are exactly 3 exceptions, namely &lt;a href=&quot;commands#set&quot;&gt;&lt;code&gt;set&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;commands#count&quot;&gt;&lt;code&gt;count&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;commands#for&quot;&gt;&lt;code&gt;for&lt;/code&gt;&lt;/a&gt;. Their globs are permitted to expand to zero arguments, as with &lt;code&gt;shopt -s nullglob&lt;/code&gt; in bash.</source>
          <target state="translated">请注意，对于大多数命令，如果任何通配符扩展失败，该命令将不执行，&lt;a href=&quot;#variables-status&quot;&gt; &lt;code&gt;$status&lt;/code&gt; &lt;/a&gt;设置为非零，并显示警告。此行为与在bash中设置 &lt;code&gt;shopt -s failglob&lt;/code&gt; 一致。正好有3个例外，即&lt;a href=&quot;commands#set&quot;&gt; &lt;code&gt;set&lt;/code&gt; &lt;/a&gt;，&lt;a href=&quot;commands#count&quot;&gt; &lt;code&gt;count&lt;/code&gt; &lt;/a&gt;和&lt;a href=&quot;commands#for&quot;&gt; &lt;code&gt;for&lt;/code&gt; &lt;/a&gt;。像bash中的 &lt;code&gt;shopt -s nullglob&lt;/code&gt; 一样，它们的glob允许扩展为零参数。</target>
        </trans-unit>
        <trans-unit id="179b535385e9bcd6de7a6f886e309b106b43e8dd" translate="yes" xml:space="preserve">
          <source>Note that functions cannot be started in the background. Functions that are stopped and then restarted in the background using the &lt;code&gt;bg&lt;/code&gt; command will not execute correctly.</source>
          <target state="translated">请注意，无法在后台启动功能。使用 &lt;code&gt;bg&lt;/code&gt; 命令在后台停止然后重新启动的功能将无法正确执行。</target>
        </trans-unit>
        <trans-unit id="56578f519a03e2785432ffc83f432b088789cd11" translate="yes" xml:space="preserve">
          <source>Note that most builtin commands display their help in the terminal when given the &lt;code&gt;--help&lt;/code&gt; option.</source>
          <target state="translated">请注意，给定 &lt;code&gt;--help&lt;/code&gt; 选项时，大多数内置命令会在终端中显示其帮助。</target>
        </trans-unit>
        <trans-unit id="052c493b4f8ae8b6935593bcf58c5ec984ab99f3" translate="yes" xml:space="preserve">
          <source>Note that not all these limits are available in all operating systems.</source>
          <target state="translated">请注意,并非所有的操作系统都有这些限制。</target>
        </trans-unit>
        <trans-unit id="fd0759c196f448d14f3c2205ba14675a88db1daf" translate="yes" xml:space="preserve">
          <source>Note that parentheses will usually require escaping with &lt;code&gt;\(&lt;/code&gt; to avoid being interpreted as a command substitution.</source>
          <target state="translated">请注意，括号通常需要使用 &lt;code&gt;\(&lt;/code&gt; 进行转义，以避免被解释为命令替换。</target>
        </trans-unit>
        <trans-unit id="188395866987d29873c39e6fea9524d72368f195" translate="yes" xml:space="preserve">
          <source>Note that seeding the engine will NOT give the same result across different systems.</source>
          <target state="translated">请注意,在不同的系统中,播种发动机的结果是不一样的。</target>
        </trans-unit>
        <trans-unit id="b65cb077ea76993a41de3fb713b42e0fed91a42b" translate="yes" xml:space="preserve">
          <source>Note that symbolic masks currently do not work as intended.</source>
          <target state="translated">需要注意的是,目前符号掩码并不能如期使用。</target>
        </trans-unit>
        <trans-unit id="bef2f79c5ca0fefc2538b283ecde5e201f174c69" translate="yes" xml:space="preserve">
          <source>Note that the &lt;code&gt;cd&lt;/code&gt; command limits directory history to the 25 most recently visited directories. The history is stored in the &lt;code&gt;$dirprev&lt;/code&gt; and &lt;code&gt;$dirnext&lt;/code&gt; variables which this command manipulates.</source>
          <target state="translated">请注意， &lt;code&gt;cd&lt;/code&gt; 命令将目录历史记录限制为最近访问的25个目录。历史记录存储在此命令操作的 &lt;code&gt;$dirprev&lt;/code&gt; 和 &lt;code&gt;$dirnext&lt;/code&gt; 变量中。</target>
        </trans-unit>
        <trans-unit id="10a8eb5ef4bfcbb0fbb38b2c1dbc89e74a6c7106" translate="yes" xml:space="preserve">
          <source>Note that the &lt;code&gt;cd&lt;/code&gt; command limits directory history to the 25 most recently visited directories. The history is stored in the &lt;code&gt;$dirprev&lt;/code&gt; and &lt;code&gt;$dirnext&lt;/code&gt; variables which this command manipulates. If you make those universal variables your &lt;code&gt;cd&lt;/code&gt; history is shared among all fish instances.</source>
          <target state="translated">请注意， &lt;code&gt;cd&lt;/code&gt; 命令将目录历史记录限制为最近访问的25个目录。历史记录存储在此命令操作的 &lt;code&gt;$dirprev&lt;/code&gt; 和 &lt;code&gt;$dirnext&lt;/code&gt; 变量中。如果您使这些通用变量，您的 &lt;code&gt;cd&lt;/code&gt; 历史记录将在所有fish实例之间共享。</target>
        </trans-unit>
        <trans-unit id="9b4bda95d407194baa99d73ed10ab09fd4118640" translate="yes" xml:space="preserve">
          <source>Note that the &lt;code&gt;cd&lt;/code&gt; command limits directory history to the 25 most recently visited directories. The history is stored in the &lt;code&gt;$dirprev&lt;/code&gt; and &lt;code&gt;$dirnext&lt;/code&gt; variables.</source>
          <target state="translated">请注意， &lt;code&gt;cd&lt;/code&gt; 命令将目录历史记录限制为最近访问的25个目录。历史记录存储在 &lt;code&gt;$dirprev&lt;/code&gt; 和 &lt;code&gt;$dirnext&lt;/code&gt; 变量中。</target>
        </trans-unit>
        <trans-unit id="468f475ce4540aa6d4ffc053e8efd0e42aba5839" translate="yes" xml:space="preserve">
          <source>Note that the shell will attempt to change directory without requiring &lt;code&gt;cd&lt;/code&gt; if the name of a directory is provided (starting with &lt;code&gt;.&lt;/code&gt;, &lt;code&gt;/&lt;/code&gt; or &lt;code&gt;~&lt;/code&gt;, or ending with &lt;code&gt;/&lt;/code&gt;).</source>
          <target state="translated">请注意，如果提供了目录名（以 &lt;code&gt;.&lt;/code&gt; ， &lt;code&gt;/&lt;/code&gt; 或 &lt;code&gt;~&lt;/code&gt; 开头或以 &lt;code&gt;/&lt;/code&gt; 结束），则Shell将尝试在不要求 &lt;code&gt;cd&lt;/code&gt; 的情况下更改目录。</target>
        </trans-unit>
        <trans-unit id="4a1ad39e7a025d924c676894892c33d43f516843" translate="yes" xml:space="preserve">
          <source>Note that there are three environment variables that are automatically split on colons to become lists when fish starts running: &lt;code&gt;PATH&lt;/code&gt;, &lt;code&gt;CDPATH&lt;/code&gt;, &lt;code&gt;MANPATH&lt;/code&gt;. Conversely, they are joined on colons when exported to subcommands. All other environment variables (e.g., &lt;code&gt;LD_LIBRARY_PATH&lt;/code&gt;) which have similar semantics are treated as simple strings.</source>
          <target state="translated">请注意，当fish开始运行时，有三个环境变量会自动在冒号上分割成多个列表： &lt;code&gt;PATH&lt;/code&gt; ， &lt;code&gt;CDPATH&lt;/code&gt; 和 &lt;code&gt;MANPATH&lt;/code&gt; 。相反，当导出到子命令时，它们在冒号上连接。具有相似语义的所有其他环境变量（例如 &lt;code&gt;LD_LIBRARY_PATH&lt;/code&gt; ）被视为简单字符串。</target>
        </trans-unit>
        <trans-unit id="bf45589c3e3c3f4d264bc9f93c56158f4afde11c" translate="yes" xml:space="preserve">
          <source>Note that this function will not be used if a command by this name exists (which is the case on macOS or Haiku).</source>
          <target state="translated">请注意,如果存在这个名称的命令,这个函数将不会被使用(在macOS或Haiku上就是这样)。</target>
        </trans-unit>
        <trans-unit id="5bf381b343429f3c3b6b07cc6b6f0a80c7987163" translate="yes" xml:space="preserve">
          <source>Note that without the quotes or braces, fish will try to expand a variable called &lt;code&gt;$WORDs&lt;/code&gt;, which may not exist.</source>
          <target state="translated">请注意，没有引号或花括号，fish将尝试扩展名为 &lt;code&gt;$WORDs&lt;/code&gt; 的变量，该变量可能不存在。</target>
        </trans-unit>
        <trans-unit id="655206648d0dc7faa21d15bc23b20c851a2e5079" translate="yes" xml:space="preserve">
          <source>Note that ~/.config/fish/config.fish is sourced &lt;em&gt;after&lt;/em&gt; the snippets. This is so users can copy snippets and override some of their behavior.</source>
          <target state="translated">请注意，〜/ .config / fish / config.fish是&lt;em&gt;在&lt;/em&gt;摘录&lt;em&gt;之后&lt;/em&gt;获得的。这样，用户可以复制代码片段并覆盖其某些行为。</target>
        </trans-unit>
        <trans-unit id="e2ce3cf51c29175bd1e3054b41cb66e679925023" translate="yes" xml:space="preserve">
          <source>Note that, like GNU tools and most of fish's builtins, &lt;code&gt;contains&lt;/code&gt; interprets all arguments starting with a &lt;code&gt;-&lt;/code&gt; as options to contains, until it reaches an argument that is &lt;code&gt;--&lt;/code&gt; (two dashes). See the examples below.</source>
          <target state="translated">请注意，就像GNU工具和大多数fish的内置函数一样， &lt;code&gt;contains&lt;/code&gt; 会将以 &lt;code&gt;-&lt;/code&gt; 开头的所有参数解释为contains的选项，直到到达参数 &lt;code&gt;--&lt;/code&gt; （两个破折号）。请参阅下面的示例。</target>
        </trans-unit>
        <trans-unit id="9cd1c04aa664d29ef9d4114fed80a20478f9f7c6" translate="yes" xml:space="preserve">
          <source>Note: At the moment the debug prompt is identical to your normal fish prompt. This can make it hard to recognize that you've entered a debug session. Issue 1310 is open to improve this.</source>
          <target state="translated">注意:此刻的调试提示和你正常的鱼提示是一样的。这可能会让人很难识别你已经进入了调试环节。问题1310是开放的,以改善这个问题。</target>
        </trans-unit>
        <trans-unit id="2acd9175970aa8fc3b9936ce32e6e5f5129257b5" translate="yes" xml:space="preserve">
          <source>Note: This event will be emitted even if the command is invalid. The commandline parameter includes the entire commandline verbatim, and may potentially include newlines.</source>
          <target state="translated">注意:即使命令无效,该事件也会被发出。命令行参数包括整个命令行的内容,并可能包括换行符。</target>
        </trans-unit>
        <trans-unit id="4a71ed28fa070fd5d0f2ba5d9d8b94e51646208b" translate="yes" xml:space="preserve">
          <source>Note: fish 2.2.0 and earlier used a default of 10 milliseconds, and provided no way to configure it. That effectively made it impossible to use escape as a meta key.</source>
          <target state="translated">注:fish 2.2.0和更早的版本使用了10毫秒的默认值,并且没有提供配置的方法。这实际上使得它不可能使用转义作为元键。</target>
        </trans-unit>
        <trans-unit id="70440046a3dc2e079f23ee1c57dfa76669b732aa" translate="yes" xml:space="preserve">
          <source>Notes</source>
          <target state="translated">Notes</target>
        </trans-unit>
        <trans-unit id="03c757f6b7891744a49627d17ec9ed791ed69d26" translate="yes" xml:space="preserve">
          <source>Nothing if the flag is a boolean that takes no argument or is an implicit int flag, else</source>
          <target state="translated">如果flag是一个不需要参数的布尔值,或者是一个隐含的int标志,那么什么都不需要,否则</target>
        </trans-unit>
        <trans-unit id="7e9e91cddb4e1bbe3d96c5cfb7bcf12796b0c7e0" translate="yes" xml:space="preserve">
          <source>Now hub inherits all of the completions from git. Note this can also be specified in a function declaration.</source>
          <target state="translated">现在hub继承了git的所有完成。注意这也可以在函数声明中指定。</target>
        </trans-unit>
        <trans-unit id="377c6369b04b17877206baabd99b8340d2c1712d" translate="yes" xml:space="preserve">
          <source>Now in another shell:</source>
          <target state="translated">现在在另一个壳里。</target>
        </trans-unit>
        <trans-unit id="d5aead3c087eb1218d9c5de157a34a40ad6e6161" translate="yes" xml:space="preserve">
          <source>Numerical comparisons will simply fail if one of the operands is not a number:</source>
          <target state="translated">如果操作数之一不是数字,数字比较就会失败。</target>
        </trans-unit>
        <trans-unit id="aeeb9e7d5766fc544e9c4260b0a26961443229c2" translate="yes" xml:space="preserve">
          <source>Oh My Fish</source>
          <target state="translated">哦,我的鱼</target>
        </trans-unit>
        <trans-unit id="c168b84a253f1a9380f35914e43b4459d37046ec" translate="yes" xml:space="preserve">
          <source>Old style long options, like '&lt;code&gt;-Wall&lt;/code&gt;'. Old style long options can be more than one character long, are preceded by a single hyphen and may not be grouped together. Option arguments are specified in the following parameter ('&lt;code&gt;-ao null&lt;/code&gt;').</source>
          <target state="translated">旧样式的长选项，例如' &lt;code&gt;-Wall&lt;/code&gt; '。旧样式的长选项可以超过一个字符长，并以单个连字符开头，并且不能组合在一起。选项参数在以下参数中指定（' &lt;code&gt;-ao null&lt;/code&gt; '）。</target>
        </trans-unit>
        <trans-unit id="b9e42bb3078b6143675803071b50a1f886f1fddf" translate="yes" xml:space="preserve">
          <source>On startup, Fish evaluates a number of configuration files, which can be used to control the behavior of the shell. The location of these configuration variables is controlled by a number of environment variables, and their default or usual location is given below.</source>
          <target state="translated">在启动时,Fish会评估一些配置文件,这些文件可以用来控制shell的行为。这些配置变量的位置由一些环境变量控制,它们的默认或通常位置如下。</target>
        </trans-unit>
        <trans-unit id="53732b6ec19e859a0b3473ce5240c51bbdc7db63" translate="yes" xml:space="preserve">
          <source>On systems that supports this feature, jobs will print the CPU usage of each job since the last command was executed. The CPU usage is expressed as a percentage of full CPU activity. Note that on multiprocessor systems, the total activity may be more than 100%.</source>
          <target state="translated">在支持此功能的系统中,job 将打印自上一条命令执行后每个作业的 CPU 使用情况。CPU使用量以CPU活动总量的百分比表示。请注意,在多处理器系统上,总活动量可能超过100%。</target>
        </trans-unit>
        <trans-unit id="18125968ef24a12c2f2c9db564d4fb936f8a352f" translate="yes" xml:space="preserve">
          <source>Once installed, just type in &lt;code&gt;fish&lt;/code&gt; into your current shell to try it out!</source>
          <target state="translated">安装完成后，只需在当前的shell中键入 &lt;code&gt;fish&lt;/code&gt; 即可试用！</target>
        </trans-unit>
        <trans-unit id="f9801d214429ef9429f41d9ccbf53d1f50cc2cf7" translate="yes" xml:space="preserve">
          <source>One of the most common uses for functions is to slightly alter the behavior of an already existing command. For example, one might want to redefine the &lt;code&gt;ls&lt;/code&gt; command to display colors. The switch for turning on colors on GNU systems is '&lt;code&gt;--color=auto&lt;/code&gt;'. An alias, or wrapper, around &lt;code&gt;ls&lt;/code&gt; might look like this:</source>
          <target state="translated">函数最常见的用途之一是稍微改变一个已经存在的命令的行为。例如，可能要重新定义 &lt;code&gt;ls&lt;/code&gt; 命令以显示颜色。在GNU系统上打开颜色的开关是' &lt;code&gt;--color=auto&lt;/code&gt; '。 &lt;code&gt;ls&lt;/code&gt; 周围的别名或包装可能看起来像这样：</target>
        </trans-unit>
        <trans-unit id="c6ed72e8734163b3555d72a22a65213a63ac427a" translate="yes" xml:space="preserve">
          <source>Only one function's description can be changed in a single invocation of &lt;code&gt;functions -d&lt;/code&gt;.</source>
          <target state="translated">一次调用 &lt;code&gt;functions -d&lt;/code&gt; 只能更改一个功能的描述。</target>
        </trans-unit>
        <trans-unit id="744f6b1ea6029a4d03e486aa51d71e6cdfe3a24a" translate="yes" xml:space="preserve">
          <source>Only part of the output can be used, see &lt;a href=&quot;#expand-index-range&quot;&gt;index range expansion&lt;/a&gt; for details.</source>
          <target state="translated">只能使用部分输出，有关详细信息，请参见&lt;a href=&quot;#expand-index-range&quot;&gt;索引范围扩展&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="e90414358dbfff0a68e4eb5d68a16978cf197d5a" translate="yes" xml:space="preserve">
          <source>Operators</source>
          <target state="translated">Operators</target>
        </trans-unit>
        <trans-unit id="e52f4d4c344dadad003e702bffb9e5e28cdc4a21" translate="yes" xml:space="preserve">
          <source>Operators for files and directories</source>
          <target state="translated">文件和目录的操作符</target>
        </trans-unit>
        <trans-unit id="f27bb0ff136bb8c7c7f1daaac32275d53bfd219d" translate="yes" xml:space="preserve">
          <source>Operators for text strings</source>
          <target state="translated">文本字符串的操作符</target>
        </trans-unit>
        <trans-unit id="a47a505eb7af733ce0bd8e9777ac0dd7490e55d7" translate="yes" xml:space="preserve">
          <source>Operators to combine expressions</source>
          <target state="translated">组合表达式的操作符</target>
        </trans-unit>
        <trans-unit id="7fa47fe3927b334a484c669114b525abc6a94112" translate="yes" xml:space="preserve">
          <source>Operators to compare and examine numbers</source>
          <target state="translated">操作人员比较和检查数字</target>
        </trans-unit>
        <trans-unit id="d4829f651a76eb5aa9c3d27e3534a7c418cd1fc9" translate="yes" xml:space="preserve">
          <source>Option Specifications</source>
          <target state="translated">选项规格</target>
        </trans-unit>
        <trans-unit id="6f38993c6d0d5cf791252a01f84f61ce28090cdc" translate="yes" xml:space="preserve">
          <source>Optionally a &lt;code&gt;!&lt;/code&gt; followed by fish script to validate the value. Typically this will be a function to run. If the return status is zero the value for the flag is valid. If non-zero the value is invalid. Any error messages should be written to stdout (not stderr). See the section on &lt;a href=&quot;#arparse-validation&quot;&gt;Flag Value Validation&lt;/a&gt; for more information.</source>
          <target state="translated">（可选）一个 &lt;code&gt;!&lt;/code&gt; 然后是鱼脚本以验证值。通常，这将是一个要运行的功能。如果返回状态为零，则该标志的值有效。如果非零，则该值无效。任何错误消息都应写入stdout（而不是stderr）。有关更多信息，请参见&lt;a href=&quot;#arparse-validation&quot;&gt;标志值验证&lt;/a&gt;部分。</target>
        </trans-unit>
        <trans-unit id="6bf5da9c080bee3a8142586c412aa39971137eee" translate="yes" xml:space="preserve">
          <source>Options</source>
          <target state="translated">Options</target>
        </trans-unit>
        <trans-unit id="14be7a9cc678ff8d2acac3f8d22e39b9c8a4df32" translate="yes" xml:space="preserve">
          <source>Other features</source>
          <target state="translated">其他特点</target>
        </trans-unit>
        <trans-unit id="8064e7b7ad17f0248f35efb48f0f1d68ee39d15e" translate="yes" xml:space="preserve">
          <source>Other shells such as bash and zsh use a variable named &lt;code&gt;HISTFILE&lt;/code&gt; for a similar purpose. Fish uses a different name to avoid conflicts and signal that the behavior is different (session name instead of a file path). Also, if you set the var to anything other than &lt;code&gt;fish&lt;/code&gt; or &lt;code&gt;default&lt;/code&gt; it will inhibit importing the bash history. That's because the most common use case for this feature is to avoid leaking private or sensitive history when giving a presentation.</source>
          <target state="translated">其他shell（例如bash和zsh）出于类似目的使用名为 &lt;code&gt;HISTFILE&lt;/code&gt; 的变量。 Fish使用不同的名称来避免冲突并发出不同的信号（会话名称而不是文件路径）。另外，如果将var设置为 &lt;code&gt;fish&lt;/code&gt; 或 &lt;code&gt;default&lt;/code&gt; 以外的其他值，则将禁止导入bash历史记录。这是因为此功能最常见的用例是避免在进行演示时泄露私人或敏感的历史记录。</target>
        </trans-unit>
        <trans-unit id="ca76df4fa26ca40f2ebdbbcc9b7ac947b4b17597" translate="yes" xml:space="preserve">
          <source>Other shells, such as zsh, provide a rich glob syntax for restricting the files matched by globs. For example, &lt;code&gt;**(.)&lt;/code&gt;, to only match regular files. Fish prefers to defer such features to programs, such as &lt;code&gt;find&lt;/code&gt;, rather than reinventing the wheel. Thus, if you want to limit the wildcard expansion to just regular files the fish approach is to define and use a function. For example,</source>
          <target state="translated">其他外壳程序（例如zsh）提供了丰富的glob语法，用于限制与glob匹配的文件。例如， &lt;code&gt;**(.)&lt;/code&gt; 仅匹配常规文件。Fish宁愿将此类功能推迟到诸如 &lt;code&gt;find&lt;/code&gt; 之类的程序中，而不是重新发明轮子。因此，如果要将通配符扩展限制为仅常规文件，则fish方法是定义和使用函数。例如，</target>
        </trans-unit>
        <trans-unit id="14a838bcf64937317892425e5ab22ef3642359f4" translate="yes" xml:space="preserve">
          <source>Other variables, like &lt;code&gt;$PATH&lt;/code&gt;, really do have multiple values. During variable expansion, the variable expands to become multiple arguments:</source>
          <target state="translated">其他变量，例如 &lt;code&gt;$PATH&lt;/code&gt; ，确实具有多个值。在变量扩展期间，变量扩展为多个参数：</target>
        </trans-unit>
        <trans-unit id="adcbabbfd6290e1df478b0d2b37c0beb20ff4767" translate="yes" xml:space="preserve">
          <source>Outputting multiple lines is not supported in &lt;code&gt;fish_mode_prompt&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;fish_mode_prompt&lt;/code&gt; 不支持输出多行。</target>
        </trans-unit>
        <trans-unit id="5b8012177cdea50be6a01e8c45312b388ccc9c7a" translate="yes" xml:space="preserve">
          <source>Outside of double quotes, variables will expand to as many arguments as they have elements. That means an empty list will expand to nothing, a variable with one element will expand to that element, and a variable with multiple elements will expand to each of those elements separately.</source>
          <target state="translated">在双引号之外,变量将扩展到有多少个参数就有多少个元素。这意味着一个空列表将扩展为无,一个有一个元素的变量将扩展为该元素,而一个有多个元素的变量将分别扩展为这些元素。</target>
        </trans-unit>
        <trans-unit id="b7cda6a843d651b6992452486c962d590a3cb164" translate="yes" xml:space="preserve">
          <source>PATH variables</source>
          <target state="translated">PATH变量</target>
        </trans-unit>
        <trans-unit id="404b5a722c514f9f99c58c8b9832dbdc15c84e14" translate="yes" xml:space="preserve">
          <source>PATH variables act as normal arrays, except they are are implicitly joined and split on colons.</source>
          <target state="translated">PATH变量的作用就像普通的数组一样,除了它们是隐式连接和用冒号分割的。</target>
        </trans-unit>
        <trans-unit id="6b76530ae6668a37f97a682d440c45d138de6409" translate="yes" xml:space="preserve">
          <source>Parameter expansion (Globbing)</source>
          <target state="translated">参数扩展(Globbing)</target>
        </trans-unit>
        <trans-unit id="0fdb3f75d27167ce5697671dbec55e14ed3744ea" translate="yes" xml:space="preserve">
          <source>Parentheses and the &lt;code&gt;-o&lt;/code&gt; and &lt;code&gt;-a&lt;/code&gt; operators can be combined to produce more complicated expressions. In this example, success is printed if there is a &lt;code&gt;/foo&lt;/code&gt; or &lt;code&gt;/bar&lt;/code&gt; file as well as a &lt;code&gt;/baz&lt;/code&gt; or &lt;code&gt;/bat&lt;/code&gt; file.</source>
          <target state="translated">括号和 &lt;code&gt;-o&lt;/code&gt; 和 &lt;code&gt;-a&lt;/code&gt; 运算符可以结合使用以产生更复杂的表达式。在此示例中，如果存在 &lt;code&gt;/foo&lt;/code&gt; 或 &lt;code&gt;/bar&lt;/code&gt; 文件以及 &lt;code&gt;/baz&lt;/code&gt; 或 &lt;code&gt;/bat&lt;/code&gt; 文件，则打印成功。</target>
        </trans-unit>
        <trans-unit id="e0efa09d094aec052590bdd703ecb253fb17eb1e" translate="yes" xml:space="preserve">
          <source>Path variables are a special kind of variable used to support colon-delimited path lists including PATH, CDPATH, MANPATH, PYTHONPATH, etc. All variables that end in &lt;code&gt;PATH&lt;/code&gt; (case-sensitive) become PATH variables.</source>
          <target state="translated">路径变量是一种特殊类型的变量，用于支持以冒号分隔的路径列表，包括PATH，CDPATH，MANPATH，PYTHONPATH等。所有以 &lt;code&gt;PATH&lt;/code&gt; 结尾的变量（区分大小写）都将成为PATH变量。</target>
        </trans-unit>
        <trans-unit id="acdeb27738adfec3e214f14b0bc5ac319dee18bf" translate="yes" xml:space="preserve">
          <source>Performs a history search when the &lt;b&gt;Page Up&lt;/b&gt; key is pressed.</source>
          <target state="translated">当按下&lt;b&gt;向上翻页&lt;/b&gt;键时，执行历史记录搜索。</target>
        </trans-unit>
        <trans-unit id="b07e355a3677aa688ad89bddfe79ee5b312d7645" translate="yes" xml:space="preserve">
          <source>Pipes and Redirections</source>
          <target state="translated">管道和重定向</target>
        </trans-unit>
        <trans-unit id="109d28af6c9d51926601f8d9e60546da74487021" translate="yes" xml:space="preserve">
          <source>Pipes usually connect file descriptor 1 (standard output) of the first process to file descriptor 0 (standard input) of the second process. It is possible to use a different output file descriptor by prepending the desired FD number and then output redirect symbol to the pipe. For example:</source>
          <target state="translated">管道通常将第一个进程的文件描述符1(标准输出)连接到第二个进程的文件描述符0(标准输入)。可以通过在管道上预置所需的FD号,然后输出重定向符号来使用不同的输出文件描述符。例如</target>
        </trans-unit>
        <trans-unit id="3247b493bc40b8745523a27d8c525cd0dc056fd5" translate="yes" xml:space="preserve">
          <source>Piping</source>
          <target state="translated">Piping</target>
        </trans-unit>
        <trans-unit id="484a02744408ea850ed69df5530d98aa375e29f4" translate="yes" xml:space="preserve">
          <source>Please note that event handlers only become active when a function is loaded, which means you might need to otherwise &lt;a href=&quot;commands#source&quot;&gt;source&lt;/a&gt; or execute a function instead of relying on &lt;a href=&quot;#syntax-function-autoloading&quot;&gt;autoloading&lt;/a&gt;. One approach is to put it into your &lt;a href=&quot;index#initialization&quot;&gt;initialization file&lt;/a&gt;.</source>
          <target state="translated">请注意，当加载一个函数，事件处理程序仅变得活跃，你可能需要哪些手段，否则&lt;a href=&quot;commands#source&quot;&gt;源&lt;/a&gt;或执行，而不是依靠一个功能&lt;a href=&quot;#syntax-function-autoloading&quot;&gt;自动加载&lt;/a&gt;。一种方法是将其放入&lt;a href=&quot;index#initialization&quot;&gt;初始化文件中&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="d9da79a093b23650535a151c09a73e3fee5ee4ae" translate="yes" xml:space="preserve">
          <source>Prefixing the commandline with a space will prevent the entire line from being stored in the history.</source>
          <target state="translated">在命令行前加上空格,可以防止整个行被存储在历史中。</target>
        </trans-unit>
        <trans-unit id="fe2ed6ea3216d06709445e2c3ce6b00041d037ed" translate="yes" xml:space="preserve">
          <source>Press &lt;b&gt;Tab&lt;/b&gt;, and &lt;code&gt;fish&lt;/code&gt; will attempt to complete the command, argument, or path:</source>
          <target state="translated">按&lt;b&gt;Tab&lt;/b&gt;， &lt;code&gt;fish&lt;/code&gt; 将尝试完成命令，参数或路径：</target>
        </trans-unit>
        <trans-unit id="09c712c74db06b262e6e04d6f0d9c7fa02c47733" translate="yes" xml:space="preserve">
          <source>Pressing &lt;em&gt;Alt&lt;/em&gt;-&lt;b&gt;Enter&lt;/b&gt; instead of pressing the &lt;b&gt;Enter&lt;/b&gt; key.</source>
          <target state="translated">按&lt;em&gt;Alt&lt;/em&gt; - &lt;b&gt;Enter，&lt;/b&gt;而不是按&lt;b&gt;Enter&lt;/b&gt;键。</target>
        </trans-unit>
        <trans-unit id="27bf58510d3b20325eed84381a6d30434da9e2ca" translate="yes" xml:space="preserve">
          <source>Pressing the &lt;b&gt;Enter&lt;/b&gt; key while a block of commands is unclosed, such as when one or more block commands such as &lt;code&gt;for&lt;/code&gt;, &lt;code&gt;begin&lt;/code&gt; or &lt;code&gt;if&lt;/code&gt; do not have a corresponding &lt;code&gt;end&lt;/code&gt; command.</source>
          <target state="translated">按下&lt;b&gt;回车&lt;/b&gt;键的同时命令的块是未封闭的，当一个或更多个块命令，如例如 &lt;code&gt;for&lt;/code&gt; ， &lt;code&gt;begin&lt;/code&gt; 或 &lt;code&gt;if&lt;/code&gt; 没有对应的 &lt;code&gt;end&lt;/code&gt; 命令。</target>
        </trans-unit>
        <trans-unit id="27493f631ba000f95a572539cafcbb594a951944" translate="yes" xml:space="preserve">
          <source>Print Top and Bottom on separate lines, using an escape sequence</source>
          <target state="translated">使用转义序列,在不同的行上打印顶部和底部。</target>
        </trans-unit>
        <trans-unit id="84c34db7a924b44d0ab81ef51631e488d755a55a" translate="yes" xml:space="preserve">
          <source>Print hello world to stdout</source>
          <target state="translated">打印hello world到stdout</target>
        </trans-unit>
        <trans-unit id="ad29dcc16fea024e7e41818ab9d4740b264b782b" translate="yes" xml:space="preserve">
          <source>Prior to the addition of this builtin command in the 2.7.0 release there were two main ways to parse the arguments passed to a fish script or function. One way was to use the OS provided &lt;code&gt;getopt&lt;/code&gt; command. The problem with that is that the GNU and BSD implementations are not compatible. Which makes using that external command difficult other than in trivial situations. The other way is to iterate over &lt;code&gt;$argv&lt;/code&gt; and use the fish &lt;code&gt;switch&lt;/code&gt; statement to decide how to handle the argument. That, however, involves a huge amount of boilerplate code. It is also borderline impossible to implement the same behavior as builtin commands.</source>
          <target state="translated">在2.7.0版本中添加此内置命令之前，有两种主要方法来解析传递给fish脚本或函数的参数。一种方法是使用操作系统提供的 &lt;code&gt;getopt&lt;/code&gt; 命令。这样做的问题是GNU和BSD实现不兼容。除了琐碎的情况之外，这使得使用该外部命令很困难。另一种方法是遍历 &lt;code&gt;$argv&lt;/code&gt; 并使用fish &lt;code&gt;switch&lt;/code&gt; 语句来决定如何处理该参数。但是，这涉及大量的样板代码。实现与内置命令相同的行为也是临界点。</target>
        </trans-unit>
        <trans-unit id="e14c52a6b5ed7f130784534e792abd7951342686" translate="yes" xml:space="preserve">
          <source>Private mode</source>
          <target state="translated">私人模式</target>
        </trans-unit>
        <trans-unit id="7d03d42c737cd08e3c616e333f7637225318bb7d" translate="yes" xml:space="preserve">
          <source>Problem solved!</source>
          <target state="translated">问题解决了!</target>
        </trans-unit>
        <trans-unit id="27fee3438e0d28b1f5e56d2013e82bcf5b441945" translate="yes" xml:space="preserve">
          <source>Programmable prompt</source>
          <target state="translated">可编程提示</target>
        </trans-unit>
        <trans-unit id="4eae5ed9e86eb92ca41dd75ef52fb9a0a53af761" translate="yes" xml:space="preserve">
          <source>Programmable title</source>
          <target state="translated">可编程标题</target>
        </trans-unit>
        <trans-unit id="a817d7eb8e0f1dab755ab5203a082e5c3c094fce" translate="yes" xml:space="preserve">
          <source>Prompt</source>
          <target state="translated">Prompt</target>
        </trans-unit>
        <trans-unit id="0495187c978ea883d19171649639e1c756060adb" translate="yes" xml:space="preserve">
          <source>Quick answer:</source>
          <target state="translated">快速回答。</target>
        </trans-unit>
        <trans-unit id="7b0257ce75add65485cb879a8ababbebc2270b68" translate="yes" xml:space="preserve">
          <source>Quotes</source>
          <target state="translated">Quotes</target>
        </trans-unit>
        <trans-unit id="a5ab0c393626e6b25924176a035ebd63722dc7ec" translate="yes" xml:space="preserve">
          <source>Range expansion will go in reverse if the end element is earlier in the list than the start and forward if the end is later than the start, unless exactly one of the given indices is negative. This is to enable clamping without changing direction if the list has fewer elements than expected.</source>
          <target state="translated">如果列表中的结束元素比开始元素早,则范围扩展将反向进行,如果结束元素比开始元素晚,则向前扩展,除非给定的指数中正好有一个是负数。这样做的目的是为了在列表中的元素比预期的少的情况下,可以不改变方向地进行夹紧。</target>
        </trans-unit>
        <trans-unit id="b16d80967d06f9706108437bd28e6a8d5175e9a0" translate="yes" xml:space="preserve">
          <source>Reading from or appending to a non existing file.</source>
          <target state="translated">从一个不存在的文件读取或追加到一个不存在的文件。</target>
        </trans-unit>
        <trans-unit id="3e22373b8f4786a11fc3f5247c24bd1cd140127f" translate="yes" xml:space="preserve">
          <source>Ready for more?</source>
          <target state="translated">准备好接受更多的挑战了吗?</target>
        </trans-unit>
        <trans-unit id="ab140354a34bd045ff52d42f722acc1c4ffada22" translate="yes" xml:space="preserve">
          <source>Regular Expressions</source>
          <target state="translated">正则表达式</target>
        </trans-unit>
        <trans-unit id="5c8c7c6ececfc7a4858b06b4968629df633fe974" translate="yes" xml:space="preserve">
          <source>Renames an existing abbreviation from &lt;code&gt;gco&lt;/code&gt; to &lt;code&gt;gch&lt;/code&gt;.</source>
          <target state="translated">将现有的缩写从 &lt;code&gt;gco&lt;/code&gt; 重命名为 &lt;code&gt;gch&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="4dc79b3cd9563c59f1fd2d978861f14b1270090f" translate="yes" xml:space="preserve">
          <source>Repeat Examples</source>
          <target state="translated">重复的例子</target>
        </trans-unit>
        <trans-unit id="a879640933d6c8936ca4cc6a02a55f8cc4408041" translate="yes" xml:space="preserve">
          <source>Replace Literal Examples</source>
          <target state="translated">替换字面例子</target>
        </trans-unit>
        <trans-unit id="13b05ad41dc01c7c29077cca05d8339a7a6429b9" translate="yes" xml:space="preserve">
          <source>Replace Regex Examples</source>
          <target state="translated">替换Regex示例</target>
        </trans-unit>
        <trans-unit id="4c85d59c181a8bdfec393789d72d1942cf54846f" translate="yes" xml:space="preserve">
          <source>Return Values</source>
          <target state="translated">返回值</target>
        </trans-unit>
        <trans-unit id="27ca7249b11e61ac7f3b63efe842130af63f97b8" translate="yes" xml:space="preserve">
          <source>Run the following command in fish:</source>
          <target state="translated">在fish中运行以下命令。</target>
        </trans-unit>
        <trans-unit id="ddd9c246e03e2789458ae8bb429c9d694195cb17" translate="yes" xml:space="preserve">
          <source>Running Commands</source>
          <target state="translated">运行命令</target>
        </trans-unit>
        <trans-unit id="5c5cc33a225b06807a45544c8793a5276a15976d" translate="yes" xml:space="preserve">
          <source>Running multiple programs</source>
          <target state="translated">运行多个程序</target>
        </trans-unit>
        <trans-unit id="b3fe37f1b337c360725965146e94ffa93a9708da" translate="yes" xml:space="preserve">
          <source>SEQUENCE is the character sequence to bind to. These should be written as &lt;a href=&quot;index#escapes&quot;&gt;fish escape sequences&lt;/a&gt;. For example, because pressing the Alt key and another character sends that character prefixed with an escape character, Alt-based key bindings can be written using the &lt;code&gt;\e&lt;/code&gt; escape. For example, &lt;em&gt;Alt&lt;/em&gt;-&lt;b&gt;w&lt;/b&gt; can be written as &lt;code&gt;\ew&lt;/code&gt;. The control character can be written in much the same way using the &lt;code&gt;\c&lt;/code&gt; escape, for example &lt;em&gt;Control&lt;/em&gt;-&lt;b&gt;X&lt;/b&gt; (^X) can be written as &lt;code&gt;\cx&lt;/code&gt;. Note that Alt-based key bindings are case sensitive and Control-based key bindings are not. This is a constraint of text-based terminals, not &lt;code&gt;fish&lt;/code&gt;.</source>
          <target state="translated">SEQUENCE是要绑定的字符序列。这些应该写成&lt;a href=&quot;index#escapes&quot;&gt;逃生序列&lt;/a&gt;。例如，由于按下Alt键和另一个字符会发送带有转义字符的字符，因此可以使用 &lt;code&gt;\e&lt;/code&gt; 转义来编写基于Alt的键绑定。例如，&lt;em&gt;Alt&lt;/em&gt; - &lt;b&gt;w&lt;/b&gt;可以写为 &lt;code&gt;\ew&lt;/code&gt; 。可以使用 &lt;code&gt;\c&lt;/code&gt; 转义符以几乎相同的方式编写控制字符，例如&lt;em&gt;Control&lt;/em&gt; - &lt;b&gt;X&lt;/b&gt;（^ X）可以编写为 &lt;code&gt;\cx&lt;/code&gt; 。请注意，基于Alt的键绑定区分大小写，而基于Control的键绑定则不区分大小写。这是基于文本的终端的约束，而不是 &lt;code&gt;fish&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="769ee8ba6c10d0fc5cc5d5931ff5950b069f7631" translate="yes" xml:space="preserve">
          <source>STRING arguments are taken from the command line unless standard input is connected to a pipe or a file, in which case they are read from standard input, one STRING per line. It is an error to supply STRING arguments on the command line and on standard input.</source>
          <target state="translated">STRING参数来自命令行,除非标准输入连接到管道或文件,在这种情况下,它们是从标准输入读取的,每行一个STRING。在命令行和标准输入中提供STRING参数是错误的。</target>
        </trans-unit>
        <trans-unit id="3e9759d5f8593842e337c74b9202035585d520b2" translate="yes" xml:space="preserve">
          <source>Same as above but with a second flag that requires a value:</source>
          <target state="translated">同上,但有第二个标志,需要一个值。</target>
        </trans-unit>
        <trans-unit id="d562a361adfcc4bd04396673622d38c2c23c4a3b" translate="yes" xml:space="preserve">
          <source>Same as above but with a third flag that can be given multiple times saving the value of each instance seen and only the long flag name (&lt;code&gt;--token&lt;/code&gt;) can be used:</source>
          <target state="translated">与上面相同，但是第三个标志可以多次给出，以保存所看到的每个实例的值，并且只能使用长标志名（ &lt;code&gt;--token&lt;/code&gt; ）：</target>
        </trans-unit>
        <trans-unit id="c902e77d44ee1a72851bdd66a8039b7289e5469e" translate="yes" xml:space="preserve">
          <source>Say $animal contains the name of an animal. Then this code would classify it:</source>
          <target state="translated">假设$animal包含一个动物的名字。那么这段代码就会对它进行分类。</target>
        </trans-unit>
        <trans-unit id="2e406da000ac4099abeb149121071ece020d3907" translate="yes" xml:space="preserve">
          <source>Searchable history</source>
          <target state="translated">可搜索的历史</target>
        </trans-unit>
        <trans-unit id="b445d35ecc1c55f9e1ceba18d794fb79d964e899" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;index#editor&quot;&gt;documentation&lt;/a&gt; for more details about line editing in fish.</source>
          <target state="translated">有关在鱼中进行行编辑的更多详细信息，请参见&lt;a href=&quot;index#editor&quot;&gt;文档&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="67373bb92cd7ecbf243edb9d60ad6f00f86a6052" translate="yes" xml:space="preserve">
          <source>See Also</source>
          <target state="translated">另见</target>
        </trans-unit>
        <trans-unit id="67035298680ddb09dd248da78e915fd9c9627f01" translate="yes" xml:space="preserve">
          <source>See also &lt;code&gt;dirs&lt;/code&gt; and &lt;code&gt;dirs -c&lt;/code&gt;.</source>
          <target state="translated">另请参见 &lt;code&gt;dirs&lt;/code&gt; 和 &lt;code&gt;dirs -c&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="1a3b31765df862a7d9c4531c872152ad402c53f3" translate="yes" xml:space="preserve">
          <source>See also &lt;code&gt;read --delimiter&lt;/code&gt;.</source>
          <target state="translated">另请 &lt;code&gt;read --delimiter&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="7238893c67063d93ae05263dd71a5ccfc50d90c7" translate="yes" xml:space="preserve">
          <source>See also the &lt;a href=&quot;commands#cdh&quot;&gt;&lt;code&gt;cdh&lt;/code&gt;&lt;/a&gt; command for changing to a recently visited directory.</source>
          <target state="translated">另请参见&lt;a href=&quot;commands#cdh&quot;&gt; &lt;code&gt;cdh&lt;/code&gt; &lt;/a&gt;命令，用于更改为最近访问的目录。</target>
        </trans-unit>
        <trans-unit id="01cfa9314baef15cf1a7d7383228c6d181370cb2" translate="yes" xml:space="preserve">
          <source>See also the &lt;a href=&quot;commands#prevd&quot;&gt;&lt;code&gt;prevd&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;commands#pushd&quot;&gt;&lt;code&gt;pushd&lt;/code&gt;&lt;/a&gt; commands which also work with the recent &lt;code&gt;cd&lt;/code&gt; history and are provided for compatibility with other shells.</source>
          <target state="translated">又见&lt;a href=&quot;commands#prevd&quot;&gt; &lt;code&gt;prevd&lt;/code&gt; &lt;/a&gt;和&lt;a href=&quot;commands#pushd&quot;&gt; &lt;code&gt;pushd&lt;/code&gt; &lt;/a&gt;命令这也与近期的工作 &lt;code&gt;cd&lt;/code&gt; 历史，提供了与其他炮弹的兼容性。</target>
        </trans-unit>
        <trans-unit id="c59959e6168e702c87aad6497074fc87974da46d" translate="yes" xml:space="preserve">
          <source>See the &quot;Internals&quot; section for more on them.</source>
          <target state="translated">更多内容请参见 &quot;内部 &quot;部分。</target>
        </trans-unit>
        <trans-unit id="c6e5f5869c0d557646211d7b722a3358667dc217" translate="yes" xml:space="preserve">
          <source>See the &lt;a href=&quot;#fish-opt&quot;&gt;&lt;code&gt;fish_opt&lt;/code&gt;&lt;/a&gt; command for a friendlier but more verbose way to create option specifications.</source>
          <target state="translated">有关创建选项规范的更友好但更详细的方法，请参见&lt;a href=&quot;#fish-opt&quot;&gt; &lt;code&gt;fish_opt&lt;/code&gt; &lt;/a&gt;命令。</target>
        </trans-unit>
        <trans-unit id="8ac7646fb3e869bb56303fbe3fca839b0d38f1d8" translate="yes" xml:space="preserve">
          <source>See the documentation for &lt;a href=&quot;commands#funced&quot;&gt;funced&lt;/a&gt; and &lt;a href=&quot;commands#funcsave&quot;&gt;funcsave&lt;/a&gt; for ways to create these files automatically.</source>
          <target state="translated">有关自动创建这些文件的方法，请参见&lt;a href=&quot;commands#funced&quot;&gt;funced&lt;/a&gt;和&lt;a href=&quot;commands#funcsave&quot;&gt;funcsave&lt;/a&gt;文档。</target>
        </trans-unit>
        <trans-unit id="bb216107606bc95b848f93fc29c67e8fe68c93ea" translate="yes" xml:space="preserve">
          <source>See the documentation for &lt;a href=&quot;commands#test&quot;&gt;&lt;code&gt;test&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;commands#if&quot;&gt;&lt;code&gt;if&lt;/code&gt;&lt;/a&gt; for more information.</source>
          <target state="translated">请参阅文件&lt;a href=&quot;commands#test&quot;&gt; &lt;code&gt;test&lt;/code&gt; &lt;/a&gt;和&lt;a href=&quot;commands#if&quot;&gt; &lt;code&gt;if&lt;/code&gt; &lt;/a&gt;了解更多信息。</target>
        </trans-unit>
        <trans-unit id="9299a43e63898a7efcae7a83cc40f247242085fc" translate="yes" xml:space="preserve">
          <source>See the documentation for &lt;code&gt;set&lt;/code&gt; for more details on the scoping rules for variables.</source>
          <target state="translated">有关变量的范围规则的更多详细信息，请参见 &lt;code&gt;set&lt;/code&gt; 的文档。</target>
        </trans-unit>
        <trans-unit id="f325a391b2afa8d45fd9b05b9b133df7d497fc47" translate="yes" xml:space="preserve">
          <source>Separating Commands (Semicolon)</source>
          <target state="translated">分隔命令(分号)。</target>
        </trans-unit>
        <trans-unit id="cafea76301da663d6e72c8dd0182bf1a08fe0c7b" translate="yes" xml:space="preserve">
          <source>Setting the background color only affects subsequently written characters. Fish provides no way to set the background color for the entire terminal window. Configuring the window background color (and other attributes such as its opacity) has to be done using whatever mechanisms the terminal provides.</source>
          <target state="translated">设置背景色只影响随后书写的字符。Fish没有提供为整个终端窗口设置背景色的方法。配置窗口背景色(以及其他属性,如不透明度)必须使用终端提供的任何机制来完成。</target>
        </trans-unit>
        <trans-unit id="0c0750f1643a764b440d30cec12896d4e2f3c4f4" translate="yes" xml:space="preserve">
          <source>Shared bindings</source>
          <target state="translated">共用装订</target>
        </trans-unit>
        <trans-unit id="61e5ec8aae4e834701135d3867ab63125d131c5e" translate="yes" xml:space="preserve">
          <source>Shell variable and function names</source>
          <target state="translated">外壳变量和函数名称</target>
        </trans-unit>
        <trans-unit id="e91aede6defa8d430f67e550004d49863d3e2e5b" translate="yes" xml:space="preserve">
          <source>Shell variables</source>
          <target state="translated">外壳变量</target>
        </trans-unit>
        <trans-unit id="0f86f7ae2195716edf4d3ac75b6ae230d7060ba1" translate="yes" xml:space="preserve">
          <source>Shell variables are named pieces of data, which can be created, deleted and their values changed and used by the user. Variables may optionally be &quot;exported&quot;, so that a copy of the variable is available to any subprocesses the shell creates. An exported variable is referred to as an &quot;environment variable&quot;.</source>
          <target state="translated">Shell变量是被命名的数据,用户可以创建、删除、更改和使用它们的值。变量可以选择 &quot;导出&quot;,这样shell创建的任何子进程都可以使用该变量的副本。导出的变量被称为 &quot;环境变量&quot;。</target>
        </trans-unit>
        <trans-unit id="e122d1fcfbe4d2952329855d2c90efb389777230" translate="yes" xml:space="preserve">
          <source>Shells like fish are used by giving them commands. Every &lt;code&gt;fish&lt;/code&gt; command follows the same simple syntax.</source>
          <target state="translated">像鱼一样的贝壳是通过给它们命令来使用的。每个 &lt;code&gt;fish&lt;/code&gt; 命令都遵循相同的简单语法。</target>
        </trans-unit>
        <trans-unit id="42414c807cd9c1ab64d204f7113345e9c5f0a85a" translate="yes" xml:space="preserve">
          <source>Short options, like '&lt;code&gt;-a&lt;/code&gt;'. Short options are a single character long, are preceded by a single hyphen and may be grouped together (like '&lt;code&gt;-la&lt;/code&gt;', which is equivalent to '&lt;code&gt;-l -a&lt;/code&gt;'). Option arguments may be specified in the following parameter ('&lt;code&gt;-w 32&lt;/code&gt;') or by appending the option with the value ('&lt;code&gt;-w32&lt;/code&gt;').</source>
          <target state="translated">简短的选项，例如' &lt;code&gt;-a&lt;/code&gt; '。短选项是单个字符长，前面带有单个连字符，并且可以组合在一起（例如&amp;ldquo; &lt;code&gt;-la&lt;/code&gt; &amp;rdquo;，等效于&amp;ldquo; &lt;code&gt;-l -a&lt;/code&gt; &amp;rdquo;）。选项参数可以在以下参数（' &lt;code&gt;-w 32&lt;/code&gt; '）中指定，也可以通过在选项后附加值（' &lt;code&gt;-w32&lt;/code&gt; '）来指定。</target>
        </trans-unit>
        <trans-unit id="214c488d368da8c81796e48eb7f6963ef7a93bff" translate="yes" xml:space="preserve">
          <source>Should you wish to uninstall fish, first ensure fish is not set as your shell. Run &lt;code&gt;chsh -s /bin/bash&lt;/code&gt; if you are not sure.</source>
          <target state="translated">如果要卸载鱼，请首先确保未将鱼设置为外壳。如果不确定，请运行 &lt;code&gt;chsh -s /bin/bash&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="d5a22b01fc547f4aefabc8c7a496313159dfc74d" translate="yes" xml:space="preserve">
          <source>Signal names are case insensitive and the &lt;code&gt;SIG&lt;/code&gt; prefix is optional.</source>
          <target state="translated">信号名称不区分大小写，并且 &lt;code&gt;SIG&lt;/code&gt; 前缀是可选的。</target>
        </trans-unit>
        <trans-unit id="2339b49e18e4fa7fa63c25097d1c3cb05b3abf7a" translate="yes" xml:space="preserve">
          <source>Similar to bash, fish has Emacs and Vi editing modes. The default editing mode is Emacs. You can switch to Vi mode with &lt;code&gt;fish_vi_key_bindings&lt;/code&gt; and switch back with &lt;code&gt;fish_default_key_bindings&lt;/code&gt;. You can also make your own key bindings by creating a function and setting $fish_key_bindings to its name. For example:</source>
          <target state="translated">与bash相似，fish具有Emacs和Vi编辑模式。默认的编辑模式是Emacs。您可以切换到vi模式与 &lt;code&gt;fish_vi_key_bindings&lt;/code&gt; 并切换回来 &lt;code&gt;fish_default_key_bindings&lt;/code&gt; 。您还可以通过创建一个函数并将$ fish_key_bindings设置为其名称来进行自己的键绑定。例如：</target>
        </trans-unit>
        <trans-unit id="14b8aecd3aaaa33e35d9724dfec4e61ddcb14189" translate="yes" xml:space="preserve">
          <source>So:</source>
          <target state="translated">So:</target>
        </trans-unit>
        <trans-unit id="530fce1c2ad1ce0277a5df96933c6fbf422dc856" translate="yes" xml:space="preserve">
          <source>Some OPTION_SPEC examples:</source>
          <target state="translated">一些OPTION_SPEC的例子。</target>
        </trans-unit>
        <trans-unit id="4d6baccd4c71912ba57043465594b0cf17749be7" translate="yes" xml:space="preserve">
          <source>Some bindings are shared between emacs- and vi-mode because they aren't text editing bindings or because what Vi/Vim does for a particular key doesn't make sense for a shell.</source>
          <target state="translated">有些绑定是在 emacs-和 vi-模式之间共享的,因为它们不是文本编辑绑定,或者因为 Vi/Vim 对某个特定键的操作对 shell 没有意义。</target>
        </trans-unit>
        <trans-unit id="425593164f34a70e7fd63371baa3a373bc2ecb38" translate="yes" xml:space="preserve">
          <source>Some characters can not be written directly on the command line. For these characters, so called escape sequences are provided. These are:</source>
          <target state="translated">有些字符不能直接写在命令行上。对于这些字符,提供了所谓的转义序列。这些字符是:</target>
        </trans-unit>
        <trans-unit id="6dd3509b210643ba6eefaffcdf24924a6a2790a7" translate="yes" xml:space="preserve">
          <source>Some common words</source>
          <target state="translated">一些常用词</target>
        </trans-unit>
        <trans-unit id="01706013cfdbcb0fc543d3c97784f3f4c235d630" translate="yes" xml:space="preserve">
          <source>Some examples:</source>
          <target state="translated">一些例子:</target>
        </trans-unit>
        <trans-unit id="9a67d5493118a559656027def8dc4fcd0cc3974f" translate="yes" xml:space="preserve">
          <source>Some features include repetitions:</source>
          <target state="translated">一些功能包括重复。</target>
        </trans-unit>
        <trans-unit id="d39624c87b3e78e02ed8dde71f696712e0710389" translate="yes" xml:space="preserve">
          <source>Some shells (e.g., ksh, bash) feature a syntax that is a mix between command substitution and piping, called process substitution. It is used to send the output of a command into the calling command, much like command substitution, but with the difference that the output is not sent through commandline arguments but through a named pipe, with the filename of the named pipe sent as an argument to the calling program. &lt;code&gt;psub&lt;/code&gt; combined with a regular command substitution provides the same functionality.</source>
          <target state="translated">一些外壳程序（例如ksh，bash）具有一种语法，该语法是命令替换和管道之间的混合，称为进程替换。它用于将命令的输出发送到调用命令中，类似于命令替换，但区别在于输出不是通过命令行参数发送，而是通过命名管道发送，而命名管道的文件名作为参数发送到调用程序。 &lt;code&gt;psub&lt;/code&gt; 与常规命令替换结合可提供相同的功能。</target>
        </trans-unit>
        <trans-unit id="28861f1ca2bfa4eb42bfb98ba18be09e02df8f97" translate="yes" xml:space="preserve">
          <source>Some terminals use the &lt;code&gt;--bold&lt;/code&gt; escape sequence to switch to a brighter color set rather than increasing the weight of text.</source>
          <target state="translated">一些终端使用 &lt;code&gt;--bold&lt;/code&gt; 转义序列来切换到较亮的颜色集，而不是增加文本的权重。</target>
        </trans-unit>
        <trans-unit id="c4dd50f777b9a845d16edeb5ac29fc4998e7e176" translate="yes" xml:space="preserve">
          <source>Some variables, like &lt;code&gt;$PWD&lt;/code&gt;, only have one value. By convention, we talk about that variable's value, but we really mean its first (and only) value.</source>
          <target state="translated">某些变量（例如 &lt;code&gt;$PWD&lt;/code&gt; ）只有一个值。按照惯例，我们谈论该变量的值，但实际上是指它的第一个（也是唯一的）值。</target>
        </trans-unit>
        <trans-unit id="8709ff84c2c20f30aea0078b8e4ce461f5bca70c" translate="yes" xml:space="preserve">
          <source>Sometimes features such as &lt;a href=&quot;#expand&quot;&gt;parameter expansion&lt;/a&gt; and &lt;a href=&quot;#escapes&quot;&gt;character escapes&lt;/a&gt; get in the way. When that happens, the user can write a parameter within quotes, either &amp;lsquo;&amp;rsquo;&lt;code&gt;(single quote) or&lt;/code&gt;&quot;&lt;code&gt;(double quote). There is one important difference between single quoted and double quoted strings: When using double quoted string, &amp;lt;a href=&quot;#expand-variable&quot;&amp;gt;variable expansion&amp;lt;/a&amp;gt; still takes place. Other than that, no other kind of expansion (including &amp;lt;a href=&quot;#expand-brace&quot;&amp;gt;brace expansion&amp;lt;/a&amp;gt; and parameter expansion) will take place, the parameter may contain spaces, and escape sequences are ignored. The only backslash escape accepted within single quotes is&lt;/code&gt;\'&lt;code&gt;, which escapes a single quote and&lt;/code&gt;\`, which escapes the backslash symbol. The only backslash escapes accepted within double quotes are &lt;code&gt;\&quot;&lt;/code&gt;, which escapes a double quote, &lt;code&gt;\$&lt;/code&gt;, which escapes a dollar character, &lt;code&gt;\&lt;/code&gt; followed by a newline, which deletes the backslash and the newline, and lastly &lt;code&gt;\\&lt;/code&gt;, which escapes the backslash symbol. Single quotes have no special meaning within double quotes and vice versa.</source>
          <target state="translated">有时，诸如&lt;a href=&quot;#expand&quot;&gt;参数扩展&lt;/a&gt;和&lt;a href=&quot;#escapes&quot;&gt;字符转义之类的功能&lt;/a&gt;会妨碍您的工作。发生这种情况时，用户可以在引号内编写参数，即&amp;rdquo; &lt;code&gt;(single quote) or&lt;/code&gt; &amp;ldquo; &lt;code&gt;(double quote). There is one important difference between single quoted and double quoted strings: When using double quoted string, &amp;lt;a href=&quot;#expand-variable&quot;&amp;gt;variable expansion&amp;lt;/a&amp;gt; still takes place. Other than that, no other kind of expansion (including &amp;lt;a href=&quot;#expand-brace&quot;&amp;gt;brace expansion&amp;lt;/a&amp;gt; and parameter expansion) will take place, the parameter may contain spaces, and escape sequences are ignored. The only backslash escape accepted within single quotes is&lt;/code&gt; \' &lt;code&gt;, which escapes a single quote and&lt;/code&gt; \`，转义反斜杠符号。双引号中接受的唯一反斜杠转义符是 &lt;code&gt;\&quot;&lt;/code&gt; ，它转义双引号 &lt;code&gt;\$&lt;/code&gt; 会转义美元字符 &lt;code&gt;\&lt;/code&gt; ,其后是换行符，这会删除反斜杠和换行符，最后是 &lt;code&gt;\\&lt;/code&gt; ，则转义反斜杠。单引号在双引号中没有特殊含义，反之亦然。</target>
        </trans-unit>
        <trans-unit id="5773d504847f59d4f28606344c751b42fcadfb09" translate="yes" xml:space="preserve">
          <source>Special Case: The escape Character</source>
          <target state="translated">特殊情况:逃生人物</target>
        </trans-unit>
        <trans-unit id="28dc52fcfc9145786fed85cff73226269b82a2c9" translate="yes" xml:space="preserve">
          <source>Special input functions</source>
          <target state="translated">特殊输入功能</target>
        </trans-unit>
        <trans-unit id="a6c32b7763c1deccd93080cf33efdb324072a965" translate="yes" xml:space="preserve">
          <source>Special variables</source>
          <target state="translated">特殊变量</target>
        </trans-unit>
        <trans-unit id="a0a234701d3553b3ee0fce9d93e7f64fadef5cac" translate="yes" xml:space="preserve">
          <source>Specifying your own completions is not difficult. To specify a completion, use the &lt;code&gt;complete&lt;/code&gt; command. &lt;code&gt;complete&lt;/code&gt; takes as a parameter the name of the command to specify a completion for. For example, to add a completion for the program &lt;code&gt;myprog&lt;/code&gt;, one would start the completion command with &lt;code&gt;complete -c myprog ...&lt;/code&gt;</source>
          <target state="translated">指定您自己的完成并不困难。要指定完成，请使用 &lt;code&gt;complete&lt;/code&gt; 命令。 &lt;code&gt;complete&lt;/code&gt; 将用于指定完成的命令名称作为参数。例如，要为程序 &lt;code&gt;myprog&lt;/code&gt; 添加完成，可以使用 &lt;code&gt;complete -c myprog ...&lt;/code&gt; 来启动完成命令。</target>
        </trans-unit>
        <trans-unit id="1ac6973627e50b5b3feef24cc873cca39ec65518" translate="yes" xml:space="preserve">
          <source>Standard error, FD 2, for writing errors and warnings, defaults to writing to the screen.</source>
          <target state="translated">标准误差,FD 2,用于书写错误和警告,默认为书写到屏幕上。</target>
        </trans-unit>
        <trans-unit id="8116e8803b0b4ccfe612ba1239d0a4c13eb0c484" translate="yes" xml:space="preserve">
          <source>Standard input, FD 0, for reading, defaults to reading from the keyboard.</source>
          <target state="translated">标准输入,FD 0,用于读取,默认为从键盘读取。</target>
        </trans-unit>
        <trans-unit id="fd08166eefe7793a02e0886b87576b866f11ba8d" translate="yes" xml:space="preserve">
          <source>Standard output, FD 1, for writing, defaults to writing to the screen.</source>
          <target state="translated">标准输出,FD 1,用于写入,默认为写入屏幕。</target>
        </trans-unit>
        <trans-unit id="b3883f88eaf74aa505b11f01894c4909220af6a1" translate="yes" xml:space="preserve">
          <source>Standards</source>
          <target state="translated">Standards</target>
        </trans-unit>
        <trans-unit id="806c8aeb75c45b416dcfcd215f384af2b2abda22" translate="yes" xml:space="preserve">
          <source>Startup (Where's .bashrc?)</source>
          <target state="translated">启动(.bashrc在哪里?</target>
        </trans-unit>
        <trans-unit id="b3cfed68ddc06bae90fd47f85fdeed65b5766e4e" translate="yes" xml:space="preserve">
          <source>Support for italics, dim, reverse, and other modes is not guaranteed in all terminal emulators. Fish attempts to determine if the terminal supports these modes even if the terminfo database may not be up-to-date.</source>
          <target state="translated">并非所有的终端仿真器都能保证支持斜体、dim、反转和其他模式。Fish试图确定终端是否支持这些模式,即使terminfo数据库可能不是最新的。</target>
        </trans-unit>
        <trans-unit id="d269dff6a5e6def876fa34f03bd1eb013ca33acd" translate="yes" xml:space="preserve">
          <source>Switches differ between commands and are documented in the manual page for each command. Some switches are common to most command though, for example '&lt;code&gt;--help&lt;/code&gt;' will usually display a help text, '&lt;code&gt;-i&lt;/code&gt;' will often turn on interactive prompting before taking action, while '&lt;code&gt;-f&lt;/code&gt;' will turn it off.</source>
          <target state="translated">各个命令之间的开关有所不同，每个命令的手册页中对此进行了说明。但是，某些命令对于大多数命令是通用的，例如' &lt;code&gt;--help&lt;/code&gt; '通常会显示帮助文本，'- &lt;code&gt;-i&lt;/code&gt; '通常会在执行操作之前打开交互式提示，而' &lt;code&gt;-f&lt;/code&gt; '则会将其关闭。</target>
        </trans-unit>
        <trans-unit id="b5eb6066faf764d428231e3c214c4d783bbf5bcc" translate="yes" xml:space="preserve">
          <source>Switching to fish?</source>
          <target state="translated">换成鱼?</target>
        </trans-unit>
        <trans-unit id="36c0630a340d2960affa1c4d2360b0e2c06793fb" translate="yes" xml:space="preserve">
          <source>Synopsis</source>
          <target state="translated">Synopsis</target>
        </trans-unit>
        <trans-unit id="17c7ba7676ad1ad6dd1c4e6b997adcae910262c9" translate="yes" xml:space="preserve">
          <source>Syntax</source>
          <target state="translated">Syntax</target>
        </trans-unit>
        <trans-unit id="d27b4fd727666f53e797902bf47550ba0a21184a" translate="yes" xml:space="preserve">
          <source>Syntax Highlighting</source>
          <target state="translated">语法高亮</target>
        </trans-unit>
        <trans-unit id="037fceb004812e2c76fd4ee125e5787960e7ee91" translate="yes" xml:space="preserve">
          <source>Syntax highlighting</source>
          <target state="translated">语法高亮</target>
        </trans-unit>
        <trans-unit id="418e9ee62ad6b7ba7264fdf5d0ee995e2e351045" translate="yes" xml:space="preserve">
          <source>Syntax overview</source>
          <target state="translated">语法概述</target>
        </trans-unit>
        <trans-unit id="afcc6a38c449b540b7b14d03d1b1f6092ebcf158" translate="yes" xml:space="preserve">
          <source>System-wide configuration files, where administrators can include initialization that should be run for all users on the system - similar to &lt;code&gt;/etc/profile&lt;/code&gt; for POSIX-style shells - in &lt;code&gt;$__fish_sysconf_dir&lt;/code&gt; (usually &lt;code&gt;/etc/fish/config.fish&lt;/code&gt;);</source>
          <target state="translated">系统范围的配置文件，管理员可以在其中包含应该为系统上所有用户运行的初始化-与POSIX样式的shell的 &lt;code&gt;/etc/profile&lt;/code&gt; 相似-在 &lt;code&gt;$__fish_sysconf_dir&lt;/code&gt; （通常为 &lt;code&gt;/etc/fish/config.fish&lt;/code&gt; ）中；</target>
        </trans-unit>
        <trans-unit id="87564ea1bf094f88395489e37aab98a53d8a3438" translate="yes" xml:space="preserve">
          <source>Tab Completions</source>
          <target state="translated">标签完成</target>
        </trans-unit>
        <trans-unit id="eb8b89e8c468a2f2b0bf3f62ac7419a0270f3b4b" translate="yes" xml:space="preserve">
          <source>Tab completion</source>
          <target state="translated">标签完成</target>
        </trans-unit>
        <trans-unit id="2ea2b2cc91429ba0736ea7b5a4dc7f2208abf174" translate="yes" xml:space="preserve">
          <source>Tab completion is one of the most time saving features of any modern shell. By tapping the tab key, the user asks &lt;code&gt;fish&lt;/code&gt; to guess the rest of the command or parameter that the user is currently typing. If &lt;code&gt;fish&lt;/code&gt; can only find one possible completion, &lt;code&gt;fish&lt;/code&gt; will write it out. If there is more than one completion, &lt;code&gt;fish&lt;/code&gt; will write out the longest prefix that all completions have in common. If the completions differ on the first character, a list of all possible completions is printed. The list features descriptions of the completions and if the list doesn't fit the screen, it is scrollable by using the arrow keys, the page up/page down keys, the tab key or the space bar.</source>
          <target state="translated">制表符完成是任何现代外壳程序中最省时的功能之一。通过轻击选项卡键，用户要求 &lt;code&gt;fish&lt;/code&gt; 猜测用户当前正在键入的其余命令或参数。如果 &lt;code&gt;fish&lt;/code&gt; 只能找到一个可能的完成，则 &lt;code&gt;fish&lt;/code&gt; 会把它写出来。如果有多个完成，则 &lt;code&gt;fish&lt;/code&gt; 将写出所有完成共有的最长前缀。如果第一个字符的补全不同，则会打印所有可能补全的列表。列表具有完成内容的描述，如果列表不适合屏幕，则可以使用箭头键，上一页/下一页键，Tab键或空格键滚动显示。</target>
        </trans-unit>
        <trans-unit id="44e924f5f1b607dd0e4feccbc1d4d898f052a887" translate="yes" xml:space="preserve">
          <source>Tacklebox</source>
          <target state="translated">Tacklebox</target>
        </trans-unit>
        <trans-unit id="e3c7839574383a9eaa3d82c610c455446f6121c0" translate="yes" xml:space="preserve">
          <source>Terminal Capability Detection</source>
          <target state="translated">终端能力检测</target>
        </trans-unit>
        <trans-unit id="b54b1fa82b8ecdc3fb07f7f9d29066e5997831e6" translate="yes" xml:space="preserve">
          <source>Tests the expression given and sets the exit status to 0 if true, and 1 if false. An expression is made up of one or more operators and their arguments.</source>
          <target state="translated">测试给定的表达式,如果为真,则将退出状态设置为0,如果为假,则设置为1。一个表达式由一个或多个运算符及其参数组成。</target>
        </trans-unit>
        <trans-unit id="6b1fc2e3b816bc95de3d9b1753ab9aa1375ff7b8" translate="yes" xml:space="preserve">
          <source>That means if you run</source>
          <target state="translated">这意味着如果你运行</target>
        </trans-unit>
        <trans-unit id="92160f08bddffe06e4520887bdd5645514caf0af" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;https://github.com/fish-shell/fish-shell/&quot;&gt;project GitHub page&lt;/a&gt;</source>
          <target state="translated">该&lt;a href=&quot;https://github.com/fish-shell/fish-shell/&quot;&gt;项目的GitHub页面&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="4cc348ddd7ad603b4b7e3a6d1134042f24b0ee0f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;$&lt;/code&gt; symbol can also be used multiple times, as a kind of &quot;dereference&quot; operator (the &lt;code&gt;*&lt;/code&gt; in C or C++), like in the following code:</source>
          <target state="translated">的 &lt;code&gt;$&lt;/code&gt; 符号也可以多次使用，作为一种&amp;ldquo;反引用&amp;rdquo;操作员（的 &lt;code&gt;*&lt;/code&gt; 在C或C ++），如在下面的代码：</target>
        </trans-unit>
        <trans-unit id="7e4fc8fc89e59cd9ece4a187b16054d89db8031c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&amp;lt;&lt;/code&gt; and &lt;code&gt;&amp;gt;&lt;/code&gt; operators for comparing strings are not implemented.</source>
          <target state="translated">未实现用于比较字符串的 &lt;code&gt;&amp;lt;&lt;/code&gt; 和 &lt;code&gt;&amp;gt;&lt;/code&gt; 运算符。</target>
        </trans-unit>
        <trans-unit id="65fe6102162982a331ea3f92362fbdf8528333d9" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;--&lt;/code&gt; argument is required. You do not have to include any arguments after the &lt;code&gt;--&lt;/code&gt; but you must include the &lt;code&gt;--&lt;/code&gt;. For example, this is acceptable:</source>
          <target state="translated">本 &lt;code&gt;--&lt;/code&gt; 参数是必需的。您不必在 &lt;code&gt;--&lt;/code&gt; 后面包含任何参数，但必须包含 &lt;code&gt;--&lt;/code&gt; 。例如，这是可以接受的：</target>
        </trans-unit>
        <trans-unit id="0c906c7f83627c97b083a6eb5c63248805d8c516" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;--&lt;/code&gt; here stops &lt;code&gt;contains&lt;/code&gt; from treating &lt;code&gt;-q&lt;/code&gt; to an option to itself. Instead it treats it as a normal string to check.</source>
          <target state="translated">在 &lt;code&gt;--&lt;/code&gt; 这里停止 &lt;code&gt;contains&lt;/code&gt; 从治疗 &lt;code&gt;-q&lt;/code&gt; 到一个选项，以本身。而是将其视为要检查的普通字符串。</target>
        </trans-unit>
        <trans-unit id="c88d441c07c1b7086b4b120f0e1995c32e1789db" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;-q&lt;/code&gt;, &lt;code&gt;-p&lt;/code&gt;, &lt;code&gt;-t&lt;/code&gt; and &lt;code&gt;-P&lt;/code&gt; flags (and their long flag aliases) are mutually exclusive. Only one can be specified at a time.</source>
          <target state="translated">该 &lt;code&gt;-q&lt;/code&gt; ， &lt;code&gt;-p&lt;/code&gt; ， &lt;code&gt;-t&lt;/code&gt; 和 &lt;code&gt;-P&lt;/code&gt; 标志（和他们的长标志的别名）是互斥的。一次只能指定一个。</target>
        </trans-unit>
        <trans-unit id="2c58a8949ca637e3657d904f90d0683f9b8a4548" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;-w&lt;/code&gt; or &lt;code&gt;--wraps&lt;/code&gt; options causes the specified command to inherit completions from another command. The inheriting command is said to &quot;wrap&quot; the inherited command. The wrapping command may have its own completions in addition to inherited ones. A command may wrap multiple commands, and wrapping is transitive: if A wraps B, and B wraps C, then A automatically inherits all of C's completions. Wrapping can be removed using the &lt;code&gt;-e&lt;/code&gt; or &lt;code&gt;--erase&lt;/code&gt; options. Note that wrapping only works for completions specified with &lt;code&gt;-c&lt;/code&gt; or &lt;code&gt;--command&lt;/code&gt; and are ignored when specifying completions with &lt;code&gt;-p&lt;/code&gt; or &lt;code&gt;--path&lt;/code&gt;.</source>
          <target state="translated">的 &lt;code&gt;-w&lt;/code&gt; 或 &lt;code&gt;--wraps&lt;/code&gt; 选项使得指定命令从另一个命令继承完井。据说继承命令可以&amp;ldquo;包装&amp;rdquo;继承的命令。包装命令除了继承的命令外，还可能有其自己的补全。一个命令可以包装多个命令，并且包装是传递性的：如果A包装B，而B包装C，则A自动继承所有C的补全。可以使用 &lt;code&gt;-e&lt;/code&gt; 或 &lt;code&gt;--erase&lt;/code&gt; 选项除去包装。请注意，包装仅适用于使用 &lt;code&gt;-c&lt;/code&gt; 或 &lt;code&gt;--command&lt;/code&gt; 指定的 &lt;code&gt;--path&lt;/code&gt; 使用 &lt;code&gt;-p&lt;/code&gt; 或--path指定补全时将被忽略。</target>
        </trans-unit>
        <trans-unit id="c3779bf48914bcae0cdcc953ecc413edee9ed2fc" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;VARNAME&lt;/code&gt; was local to the for block in releases prior to 3.0.0. This means that if you did something like this:</source>
          <target state="translated">在3.0.0之前的版本中， &lt;code&gt;VARNAME&lt;/code&gt; 在for块中是本地的。这意味着，如果您执行以下操作：</target>
        </trans-unit>
        <trans-unit id="da3409d273e3db5ef8ddc4ea273fbbb872d656c5" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;apt-get&lt;/code&gt;, &lt;code&gt;rpm&lt;/code&gt; and &lt;code&gt;yum&lt;/code&gt; commands use all installed packages as completions.</source>
          <target state="translated">该 &lt;code&gt;apt-get&lt;/code&gt; 的， &lt;code&gt;rpm&lt;/code&gt; 和 &lt;code&gt;yum&lt;/code&gt; 的命令使用所有安装的软件包的落成。</target>
        </trans-unit>
        <trans-unit id="08c885ad47f98ee1d2fa7d61aaf2be5914055c4b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;end&lt;/code&gt; command does not change the current exit status. Instead, the status after it will be the status returned by the most recent command.</source>
          <target state="translated">该 &lt;code&gt;end&lt;/code&gt; 命令不会改变当前的退出状态。相反，其后的状态将是最新命令返回的状态。</target>
        </trans-unit>
        <trans-unit id="3cb7ec726c85b79feb29910ee5250baa8513a66f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;fish&lt;/code&gt; editor features copy and paste, a searchable history and many editor functions that can be bound to special keyboard shortcuts.</source>
          <target state="translated">该 &lt;code&gt;fish&lt;/code&gt; 的编辑功能，复制和粘贴，可搜索历史和许多的编辑功能，可以绑定到特殊的键盘快捷键。</target>
        </trans-unit>
        <trans-unit id="c64f6cc8af3f868e2009e8fec92b3aa89f2848f9" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;fish&lt;/code&gt; implementation of &lt;code&gt;ulimit&lt;/code&gt; should behave identically to the implementation in bash, except for these differences:</source>
          <target state="translated">&lt;code&gt;ulimit&lt;/code&gt; 的 &lt;code&gt;fish&lt;/code&gt; 实现应与bash中的实现具有相同的行为，除了以下区别之外：</target>
        </trans-unit>
        <trans-unit id="67113321177587b92e33339a6cdbfbb714ba38b3" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;format&lt;/code&gt; argument is re-used as many times as necessary to convert all of the given arguments. If a format specifier is not appropriate for the given argument, an error is printed. For example, &amp;lsquo;printf &amp;rsquo;d' &quot;102.234&quot;` produces an error, as &quot;102.234&quot; cannot be formatted as an integer.</source>
          <target state="translated">该 &lt;code&gt;format&lt;/code&gt; 参数重复使用多次，有必要把所有的给定的参数。如果格式说明符不适合给定的参数，则会显示错误。例如，'printf'd'&amp;ldquo; 102.234&amp;rdquo;`会产生错误，因为&amp;ldquo; 102.234&amp;rdquo;无法格式化为整数。</target>
        </trans-unit>
        <trans-unit id="89f23a465dd8d76eebf980544d18d2de2601f2be" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;make&lt;/code&gt; program uses all targets in the Makefile in the current directory as completions.</source>
          <target state="translated">该 &lt;code&gt;make&lt;/code&gt; 程序使用Makefile中的所有目标在当前目录的完成。</target>
        </trans-unit>
        <trans-unit id="08ddda0f4e3d5dbda6ef1fb82291b1b27f800ddd" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;mount&lt;/code&gt; command uses all mount points specified in fstab as completions.</source>
          <target state="translated">在 &lt;code&gt;mount&lt;/code&gt; 命令使用的所有挂载fstab文件中作为完井指定点。</target>
        </trans-unit>
        <trans-unit id="bac670339d33af9a7bab7a0aa6c9bff4de41f823" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;open&lt;/code&gt; command uses the MIME type database and the &lt;code&gt;.desktop&lt;/code&gt; files used by Gnome and KDE to identify filetypes and default actions. If at least one of these environments is installed, but the open command is not working, this probably means that the relevant files are installed in a non-standard location. Consider &lt;a href=&quot;index#more-help&quot;&gt;asking for more help&lt;/a&gt;.</source>
          <target state="translated">该 &lt;code&gt;open&lt;/code&gt; 命令使用MIME类型的数据库和 &lt;code&gt;.desktop&lt;/code&gt; 使用Gnome和KDE识别文件类型和默认操作文件。如果至少安装了这些环境之一，但是open命令不起作用，则可能意味着相关文件安装在非标准位置。考虑&lt;a href=&quot;index#more-help&quot;&gt;寻求更多帮助&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="12db9bbc519582e7296e06534b51717da7e239b5" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;pushd&lt;/code&gt; function adds &lt;code&gt;DIRECTORY&lt;/code&gt; to the top of the directory stack and makes it the current working directory. &lt;a href=&quot;#popd&quot;&gt;&lt;code&gt;popd&lt;/code&gt;&lt;/a&gt; will pop it off and return to the original directory.</source>
          <target state="translated">该 &lt;code&gt;pushd&lt;/code&gt; 函数添加 &lt;code&gt;DIRECTORY&lt;/code&gt; 到目录堆栈的顶部，并使其成为当前工作目录。&lt;a href=&quot;#popd&quot;&gt; &lt;code&gt;popd&lt;/code&gt; &lt;/a&gt;将弹出它并返回到原始目录。</target>
        </trans-unit>
        <trans-unit id="a826eafcc5f8080c789ef8d78318660a9727e115" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;read&lt;/code&gt; command supported the &lt;code&gt;-m&lt;/code&gt; and &lt;code&gt;--mode-name&lt;/code&gt; flags in fish versions prior to 2.7.0 to specify an alternative read history file. Those flags are now deprecated and ignored. Instead, set the &lt;code&gt;fish_history&lt;/code&gt; variable to specify a history session ID. That will affect both the &lt;code&gt;read&lt;/code&gt; history file and the fish command history file. You can set it to an empty string to specify that no history should be read or written. This is useful for presentations where you do not want possibly private or sensitive history to be exposed to the audience but do want history relevant to the presentation to be available.</source>
          <target state="translated">该 &lt;code&gt;read&lt;/code&gt; 命令支持的 &lt;code&gt;-m&lt;/code&gt; 和 &lt;code&gt;--mode-name&lt;/code&gt; 鱼之前版本2.7.0标志来指定替代读历史文件。这些标志现在已弃用并被忽略。而是设置 &lt;code&gt;fish_history&lt;/code&gt; 变量以指定历史记录会话ID。这将同时影响 &lt;code&gt;read&lt;/code&gt; 历史记录文件和fish命令的历史记录文件。您可以将其设置为空字符串以指定不应读取或写入任何历史记录。这对于在您不希望向读者公开私人或敏感历史记录但希望与该演示文稿相关的历史记录可用的演示文稿中很有用。</target>
        </trans-unit>
        <trans-unit id="7fcdb96d7e5417d911e99a0401becd905a30865f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;rpm&lt;/code&gt; command has several different modes. If the &lt;code&gt;-e&lt;/code&gt; or &lt;code&gt;--erase&lt;/code&gt; flag has been specified, &lt;code&gt;rpm&lt;/code&gt; should delete one or more packages, in which case several switches related to deleting packages are valid, like the &lt;code&gt;nodeps&lt;/code&gt; switch.</source>
          <target state="translated">的 &lt;code&gt;rpm&lt;/code&gt; 命令具有几种不同的模式。如果已指定 &lt;code&gt;-e&lt;/code&gt; 或 &lt;code&gt;--erase&lt;/code&gt; 标志，则 &lt;code&gt;rpm&lt;/code&gt; 应该删除一个或多个程序包，在这种情况下，与删除程序包相关的多个开关是有效的，例如 &lt;code&gt;nodeps&lt;/code&gt; 开关。</target>
        </trans-unit>
        <trans-unit id="a790e8c78ea9f158b99ff23d36fc572c40897097" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;set&lt;/code&gt; command above used quotes to ensure that &lt;code&gt;Mister Noodle&lt;/code&gt; was one argument. If it had been two arguments, then &lt;code&gt;name&lt;/code&gt; would have been a list of length 2. In fact, all variables in &lt;code&gt;fish&lt;/code&gt; are really lists, that can contain any number of values, or none at all.</source>
          <target state="translated">上面的 &lt;code&gt;set&lt;/code&gt; 命令使用引号来确保 &lt;code&gt;Mister Noodle&lt;/code&gt; 是一个参数。如果它是两个参数，则 &lt;code&gt;name&lt;/code&gt; 将是一个长度为2的列表。实际上， &lt;code&gt;fish&lt;/code&gt; 中的所有变量实际上都是列表，可以包含任意数量的值，或者根本不包含任何值。</target>
        </trans-unit>
        <trans-unit id="b8a21bdde776c698d3de37f05072833e8526edd9" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;set_color&lt;/code&gt; command uses the terminfo database to look up how to change terminal colors on whatever terminal is in use. Some systems have old and incomplete terminfo databases, and may lack color information for terminals that support it. Fish will assume that all terminals can use the &lt;a href=&quot;https://en.wikipedia.org/wiki/ANSI_escape_code&quot;&gt;ANSI X3.64&lt;/a&gt; escape sequences if the terminfo definition indicates a color below 16 is not supported.</source>
          <target state="translated">该 &lt;code&gt;set_color&lt;/code&gt; 命令使用terminfo数据库来查找如何改变终端的颜色在任何终端正在使用中。某些系统具有较旧且不完整的terminfo数据库，并且可能缺少支持它的终端的颜色信息。如果terminfo定义指示不支持16以下的颜色，则Fish将假定所有终端都可以使用&lt;a href=&quot;https://en.wikipedia.org/wiki/ANSI_escape_code&quot;&gt;ANSI X3.64&lt;/a&gt;转义序列。</target>
        </trans-unit>
        <trans-unit id="570ae270bf32027068dbc7611cc21eacc745b07d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ssh&lt;/code&gt; command uses all hosts that are stored in the known_hosts file as completions. (See the ssh documentation for more information)</source>
          <target state="translated">该 &lt;code&gt;ssh&lt;/code&gt; 命令使用存储在known_hosts文件作为完井的所有主机。（有关更多信息，请参见ssh文档）</target>
        </trans-unit>
        <trans-unit id="98c28ed2787aacc681a7fe21c43d77f6911bb6d4" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;su&lt;/code&gt; command takes any username as an argument. Usernames are given as the first colon-separated field in the file /etc/passwd. This can be specified as:</source>
          <target state="translated">所述 &lt;code&gt;su&lt;/code&gt; 命令接受任何用户名作为参数。用户名在文件/ etc / passwd中以冒号分隔的第一个字段形式给出。可以指定为：</target>
        </trans-unit>
        <trans-unit id="d0c2e5dc87ea547203543a3113293b01834dc317" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;su&lt;/code&gt; command uses all users on the system as completions.</source>
          <target state="translated">在 &lt;code&gt;su&lt;/code&gt; 命令使用所有用户的系统上落成。</target>
        </trans-unit>
        <trans-unit id="ac2d93e5ce9c99380286aea119eb1c4d811d5e80" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;switch&lt;/code&gt; command is used to execute one of possibly many blocks of commands depending on the value of a string. See the documentation for &lt;a href=&quot;commands#switch&quot;&gt;switch&lt;/a&gt; for more information.</source>
          <target state="translated">该 &lt;code&gt;switch&lt;/code&gt; 指令用于执行根据一个字符串的值的命令可能是多个块中的一个。有关更多信息，请参见有关&lt;a href=&quot;commands#switch&quot;&gt;开关&lt;/a&gt;的文档。</target>
        </trans-unit>
        <trans-unit id="47ad27700014770c354049370500a3fdcb1e0c70" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;~&lt;/code&gt; (tilde) character at the beginning of a parameter, followed by a username, is expanded into the home directory of the specified user. A lone &lt;code&gt;~&lt;/code&gt;, or a &lt;code&gt;~&lt;/code&gt; followed by a slash, is expanded into the home directory of the process owner.</source>
          <target state="translated">参数开头的 &lt;code&gt;~&lt;/code&gt; （波浪号）字符，后跟用户名，将被扩展到指定用户的主目录中。单独的 &lt;code&gt;~&lt;/code&gt; 或 &lt;code&gt;~&lt;/code&gt; 后跟一个斜杠，将被扩展到进程所有者的主目录中。</target>
        </trans-unit>
        <trans-unit id="81bc67c4cc6d1500fe78dbf824dcd5a05daabcef" translate="yes" xml:space="preserve">
          <source>The Internet Relay Chat channel, #fish on &lt;code&gt;irc.oftc.net&lt;/code&gt;</source>
          <target state="translated">Internet中继聊天频道，irc.oftc.net上的 &lt;code&gt;irc.oftc.net&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="38912f78e93626e5fa47b637ba81937a676623d5" translate="yes" xml:space="preserve">
          <source>The advantage is that you don't have to go mucking around in files: just run this once at the command line, and it will affect the current session and all future instances too. (Note: you should NOT add this line to &lt;code&gt;config.fish&lt;/code&gt;. If you do, the variable will get longer each time you run fish!)</source>
          <target state="translated">这样做的好处是您不必在文件中乱搞：只需在命令行中运行一次即可，这也会影响当前会话和所有将来的实例。（注意：您不应将此行添加到 &lt;code&gt;config.fish&lt;/code&gt; 中。如果这样做，则每次运行fish时变量将变长！）</target>
        </trans-unit>
        <trans-unit id="9a5b6fa2b60fb7b30f834fa877a85006d71c86dd" translate="yes" xml:space="preserve">
          <source>The block can be removed. Any events which triggered while the block was in place will then be delivered.</source>
          <target state="translated">该块可以被移除。任何在区块存在时触发的事件都将被传递。</target>
        </trans-unit>
        <trans-unit id="bb7debcb6ad4bd52a3602c3c576ba4ce44391ac4" translate="yes" xml:space="preserve">
          <source>The block is unconditionally executed. &lt;code&gt;begin; ...; end&lt;/code&gt; is equivalent to &lt;code&gt;if true; ...; end&lt;/code&gt;.</source>
          <target state="translated">该块是无条件执行的。 &lt;code&gt;begin; ...; end&lt;/code&gt; 等于 &lt;code&gt;if true; ...; end&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="c5cb93e79eb59eed4f3c4bd5e54faad96127309f" translate="yes" xml:space="preserve">
          <source>The colors used by fish for syntax highlighting can be configured by changing the values of a various variables. The value of these variables can be one of the colors accepted by the &lt;a href=&quot;commands#set_color&quot;&gt;set_color&lt;/a&gt; command. The &lt;code&gt;--bold&lt;/code&gt; or &lt;code&gt;-b&lt;/code&gt; switches accepted by &lt;code&gt;set_color&lt;/code&gt; are also accepted.</source>
          <target state="translated">可以通过更改各种变量的值来配置fish用于语法突出显示的颜色。这些变量的值可以是&lt;a href=&quot;commands#set_color&quot;&gt;set_color&lt;/a&gt;命令接受的颜色之一。也接受 &lt;code&gt;set_color&lt;/code&gt; 接受的 &lt;code&gt;--bold&lt;/code&gt; 或 &lt;code&gt;-b&lt;/code&gt; 开关。</target>
        </trans-unit>
        <trans-unit id="84d325ad2d19b4840c597f9597e729e6423f6e0a" translate="yes" xml:space="preserve">
          <source>The command history is stored in the file &lt;code&gt;~/.local/share/fish/fish_history&lt;/code&gt; (or &lt;code&gt;$XDG_DATA_HOME/fish/fish_history&lt;/code&gt; if that variable is set) by default. However, you can set the &lt;code&gt;fish_history&lt;/code&gt; environment variable to change the name of the history session (resulting in a &lt;code&gt;&amp;lt;session&amp;gt;_history&lt;/code&gt; file); both before starting the shell and while the shell is running.</source>
          <target state="translated">默认情况下，命令历史记录存储在文件 &lt;code&gt;~/.local/share/fish/fish_history&lt;/code&gt; （或 &lt;code&gt;$XDG_DATA_HOME/fish/fish_history&lt;/code&gt; 如果设置了该变量）中。但是，您可以设置 &lt;code&gt;fish_history&lt;/code&gt; 环境变量来更改历史记录会话的名称（导致 &lt;code&gt;&amp;lt;session&amp;gt;_history&lt;/code&gt; 文件）。在启动外壳程序之前和外壳程序运行期间。</target>
        </trans-unit>
        <trans-unit id="ad9471aeb00cd7dbf667ba8000bfffbdd6168599" translate="yes" xml:space="preserve">
          <source>The completions shipped with fish, usually installed in &lt;code&gt;/usr/share/fish/completions&lt;/code&gt;; and</source>
          <target state="translated">fish附带的完成文件通常安装在 &lt;code&gt;/usr/share/fish/completions&lt;/code&gt; 中；和</target>
        </trans-unit>
        <trans-unit id="526642f1e62598bbea0ecea2aededa98b233083a" translate="yes" xml:space="preserve">
          <source>The default &lt;code&gt;fish_mode_prompt&lt;/code&gt; function will output indicators about the current Vi editor mode displayed to the left of the regular prompt. Define your own function to customize the appearance of the mode indicator. You can also define an empty &lt;code&gt;fish_mode_prompt&lt;/code&gt; function to remove the Vi mode indicators. The &lt;code&gt;$fish_bind_mode variable&lt;/code&gt; can be used to determine the current mode. It will be one of &lt;code&gt;default&lt;/code&gt;, &lt;code&gt;insert&lt;/code&gt;, &lt;code&gt;replace_one&lt;/code&gt;, or &lt;code&gt;visual&lt;/code&gt;.</source>
          <target state="translated">默认的 &lt;code&gt;fish_mode_prompt&lt;/code&gt; 函数将输出显示在常规提示左侧的有关当前Vi编辑器模式的指示器。定义自己的功能以自定义模式指示器的外观。您也可以定义一个空的 &lt;code&gt;fish_mode_prompt&lt;/code&gt; 函数以删除Vi模式指示器。在 &lt;code&gt;$fish_bind_mode variable&lt;/code&gt; 可以被用来确定当前模式。这将是 &lt;code&gt;default&lt;/code&gt; ， &lt;code&gt;insert&lt;/code&gt; ， &lt;code&gt;replace_one&lt;/code&gt; 或 &lt;code&gt;visual&lt;/code&gt; 之一。</target>
        </trans-unit>
        <trans-unit id="b701404c307944b4f207202092290f154a8ceb6b" translate="yes" xml:space="preserve">
          <source>The default behavior of &lt;code&gt;functions&lt;/code&gt;, when called with no arguments, is to print the names of all defined functions. Unless the &lt;code&gt;-a&lt;/code&gt; option is given, no functions starting with underscores are not included in the output.</source>
          <target state="translated">在不带参数的情况下调用 &lt;code&gt;functions&lt;/code&gt; 的默认行为是打印所有已定义函数的名称。除非给出 &lt;code&gt;-a&lt;/code&gt; 选项，否则输出中不包含任何以下划线开头的函数。</target>
        </trans-unit>
        <trans-unit id="3238e1ed93b89a49bf4c1e65f05bfcad2dc2ccfc" translate="yes" xml:space="preserve">
          <source>The default key binding can be set by specifying a &lt;code&gt;SEQUENCE&lt;/code&gt; of the empty string (that is, &lt;code&gt;''&lt;/code&gt; ). It will be used whenever no other binding matches. For most key bindings, it makes sense to use the &lt;code&gt;self-insert&lt;/code&gt; function (i.e. &lt;code&gt;bind '' self-insert&lt;/code&gt;) as the default keybinding. This will insert any keystrokes not specifically bound to into the editor. Non- printable characters are ignored by the editor, so this will not result in control sequences being printable.</source>
          <target state="translated">可以通过指定空字符串的 &lt;code&gt;SEQUENCE&lt;/code&gt; （即 &lt;code&gt;''&lt;/code&gt; ）来设置默认的键绑定。只要没有其他绑定匹配，就会使用它。对于大多数键绑定，使用 &lt;code&gt;self-insert&lt;/code&gt; 功能（即bind''self &lt;code&gt;bind '' self-insert&lt;/code&gt; ）作为默认键绑定是有意义的。这会将未明确绑定的所有击键插入编辑器。编辑器将忽略不可打印的字符，因此这不会导致控制序列可打印。</target>
        </trans-unit>
        <trans-unit id="761122ce7c1e00f6a72f6459922524107cc8cd64" translate="yes" xml:space="preserve">
          <source>The delay in milliseconds since the previous character was received is included in the diagnostic information written to stderr. This information may be useful to determine the optimal &lt;code&gt;fish_escape_delay_ms&lt;/code&gt; setting or learn the amount of lag introduced by tools like &lt;code&gt;ssh&lt;/code&gt;, &lt;code&gt;mosh&lt;/code&gt; or &lt;code&gt;tmux&lt;/code&gt;.</source>
          <target state="translated">自从接收到前一个字符以来的延迟（以毫秒为单位）包含在写入stderr的诊断信息中。此信息对于确定最佳 &lt;code&gt;fish_escape_delay_ms&lt;/code&gt; 设置或了解 &lt;code&gt;ssh&lt;/code&gt; ， &lt;code&gt;mosh&lt;/code&gt; 或 &lt;code&gt;tmux&lt;/code&gt; 之类的工具引入的滞后量可能很有用。</target>
        </trans-unit>
        <trans-unit id="e2ae9cb276e98e46e4c54626cf3a5b994505cd52" translate="yes" xml:space="preserve">
          <source>The escape key can be used standalone, for example, to switch from insertion mode to normal mode when using Vi keybindings. Escape may also be used as a &quot;meta&quot; key, to indicate the start of an escape sequence, such as function or arrow keys. Custom bindings can also be defined that begin with an escape character.</source>
          <target state="translated">转义键可以单独使用,例如,在使用Vi键绑定时,从插入模式切换到正常模式。转义键也可以作为 &quot;元 &quot;键使用,以指示转义序列的开始,如功能键或方向键。也可以定义以转义字符开头的自定义绑定。</target>
        </trans-unit>
        <trans-unit id="f2b67ae0b734fe8c7eb4002ecf7174bec7a097d2" translate="yes" xml:space="preserve">
          <source>The exit code of the &lt;code&gt;jobs&lt;/code&gt; builtin is &lt;code&gt;0&lt;/code&gt; if there are running background jobs and &lt;code&gt;1&lt;/code&gt; otherwise.</source>
          <target state="translated">如果有正在运行的后台作业，则内置 &lt;code&gt;jobs&lt;/code&gt; 的退出代码为 &lt;code&gt;0&lt;/code&gt; ，否则为 &lt;code&gt;1&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="92a98ee3485df09b2caf60e2fe8f1f43529de92d" translate="yes" xml:space="preserve">
          <source>The exit status of &lt;code&gt;functions&lt;/code&gt; is the number of functions specified in the argument list that do not exist, which can be used in concert with the &lt;code&gt;-q&lt;/code&gt; option.</source>
          <target state="translated">&lt;code&gt;functions&lt;/code&gt; 的退出状态是参数列表中指定的不存在的函数数，可以与 &lt;code&gt;-q&lt;/code&gt; 选项一起使用。</target>
        </trans-unit>
        <trans-unit id="0f212eae622b07227263f98bfdb5b6ec216b4de4" translate="yes" xml:space="preserve">
          <source>The exit status of commands within &lt;code&gt;fish_breakpoint_prompt&lt;/code&gt; will not modify the value of &lt;a href=&quot;index#variables-status&quot;&gt;$status&lt;/a&gt; outside of the &lt;code&gt;fish_breakpoint_prompt&lt;/code&gt; function.</source>
          <target state="translated">&lt;code&gt;fish_breakpoint_prompt&lt;/code&gt; 中命令的退出状态不会修改 &lt;code&gt;fish_breakpoint_prompt&lt;/code&gt; 函数之外的&lt;a href=&quot;index#variables-status&quot;&gt;$ status&lt;/a&gt;值。</target>
        </trans-unit>
        <trans-unit id="5657481f999e23c3116d622970acdbbcff597a42" translate="yes" xml:space="preserve">
          <source>The exit status of commands within &lt;code&gt;fish_prompt&lt;/code&gt; will not modify the value of &lt;a href=&quot;index#variables-status&quot;&gt;$status&lt;/a&gt; outside of the &lt;code&gt;fish_prompt&lt;/code&gt; function.</source>
          <target state="translated">&lt;code&gt;fish_prompt&lt;/code&gt; 中命令的退出状态不会修改 &lt;code&gt;fish_prompt&lt;/code&gt; 函数之外的&lt;a href=&quot;index#variables-status&quot;&gt;$ status&lt;/a&gt;值。</target>
        </trans-unit>
        <trans-unit id="ff645c10072dc44f93fe8a0bc1b09a1e128e9d19" translate="yes" xml:space="preserve">
          <source>The exit status of the last foreground command to exit can always be accessed using the &lt;a href=&quot;index#variables-status&quot;&gt;$status&lt;/a&gt; variable.</source>
          <target state="translated">总是可以使用&lt;a href=&quot;index#variables-status&quot;&gt;$ status&lt;/a&gt;变量来访问最后一个前台命令的退出状态。</target>
        </trans-unit>
        <trans-unit id="4652deeba9fb7344bebbe6060971799e99a44a6b" translate="yes" xml:space="preserve">
          <source>The exit status of the last run command substitution is available in the &lt;a href=&quot;#variables-status&quot;&gt;status&lt;/a&gt; variable if the substitution occurs in the context of a &lt;code&gt;set&lt;/code&gt; command.</source>
          <target state="translated">如果替换发生在 &lt;code&gt;set&lt;/code&gt; 命令的上下文中，则上次运行命令替换的退出状态在&lt;a href=&quot;#variables-status&quot;&gt;状态&lt;/a&gt;变量中可用。</target>
        </trans-unit>
        <trans-unit id="110fb03150bee422319feb18aa0d332d91a7cdc7" translate="yes" xml:space="preserve">
          <source>The exit status of the while loop is the exit status of the last iteration of the &lt;code&gt;COMMANDS&lt;/code&gt; executed, or 0 if none were executed. (This matches other shells and is POSIX-compatible.)</source>
          <target state="translated">while循环的退出状态是所执行的 &lt;code&gt;COMMANDS&lt;/code&gt; 的最后一次迭代的退出状态；如果未执行，则为0。（这与其他外壳程序匹配，并且与POSIX兼容。）</target>
        </trans-unit>
        <trans-unit id="0e8e9a53dcf07764aa42aaf44d6d7a9d7ab8311a" translate="yes" xml:space="preserve">
          <source>The exporting rules when creating or updating a variable are identical to the scoping rules for variables:</source>
          <target state="translated">创建或更新变量时的导出规则与变量的范围规则相同。</target>
        </trans-unit>
        <trans-unit id="ccd7da4c54986027f5d438b2f8ee07a3d4f4e74d" translate="yes" xml:space="preserve">
          <source>The first &lt;code&gt;--&lt;/code&gt; seen is what allows the &lt;code&gt;argparse&lt;/code&gt; command to reliably separate the option specifications from the command arguments.</source>
          <target state="translated">第一个 &lt;code&gt;--&lt;/code&gt; 看到的是使 &lt;code&gt;argparse&lt;/code&gt; 命令可靠地将选项规范与命令参数分开的原因。</target>
        </trans-unit>
        <trans-unit id="f00c945cebc76b9e34b8670689ec76047f703bed" translate="yes" xml:space="preserve">
          <source>The first form (&lt;code&gt;test&lt;/code&gt;) is preferred. For compatibility with other shells, the second form is available: a matching pair of square brackets (&lt;code&gt;[ [EXPRESSION ] ]&lt;/code&gt;).</source>
          <target state="translated">第一种形式（ &lt;code&gt;test&lt;/code&gt; ）是首选。为了与其他外壳兼容，可以使用第二种形式：一对匹配的方括号（ &lt;code&gt;[ [EXPRESSION ] ]&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="1feeb6c582e1b13feec652671af704d8c4bca81d" translate="yes" xml:space="preserve">
          <source>The first line tells fish that a function by the name of &lt;code&gt;ll&lt;/code&gt; is to be defined. To use it, simply write &lt;code&gt;ll&lt;/code&gt; on the commandline. The second line tells fish that the command &lt;code&gt;ls -l $argv&lt;/code&gt; should be called when &lt;code&gt;ll&lt;/code&gt; is invoked. '&lt;code&gt;$argv&lt;/code&gt;' is an array variable, which always contains all arguments sent to the function. In the example above, these are simply passed on to the &lt;code&gt;ls&lt;/code&gt; command. For more information on functions, see the documentation for the &lt;a href=&quot;commands#function&quot;&gt;function&lt;/a&gt; builtin.</source>
          <target state="translated">第一行告诉fish，将定义名称为 &lt;code&gt;ll&lt;/code&gt; 的函数。要使用它，只需在命令行上输入 &lt;code&gt;ll&lt;/code&gt; 即可。第二行告诉fish，当调用 &lt;code&gt;ll&lt;/code&gt; 时应调用命令 &lt;code&gt;ls -l $argv&lt;/code&gt; 。 &amp;ldquo; &lt;code&gt;$argv&lt;/code&gt; &amp;rdquo;是一个数组变量，它总是包含发送给函数的所有参数。在上面的示例中，这些只是传递给 &lt;code&gt;ls&lt;/code&gt; 命令。有关函数的更多信息，请参见内置&lt;a href=&quot;commands#function&quot;&gt;函数&lt;/a&gt;的文档。</target>
        </trans-unit>
        <trans-unit id="5aa91cd04a31d486d202e2b1e77d870e577f521a" translate="yes" xml:space="preserve">
          <source>The first part specifies to whom this set of right applies, and can be one of &lt;code&gt;u&lt;/code&gt;, &lt;code&gt;g&lt;/code&gt;, &lt;code&gt;o&lt;/code&gt; or &lt;code&gt;a&lt;/code&gt;, where &lt;code&gt;u&lt;/code&gt; specifies the user who owns the file, &lt;code&gt;g&lt;/code&gt; specifies the group owner of the file, &lt;code&gt;o&lt;/code&gt; specific other users rights and &lt;code&gt;a&lt;/code&gt; specifies all three should be changed.</source>
          <target state="translated">第一部分指定此权限集适用于谁，并且可以是 &lt;code&gt;u&lt;/code&gt; ， &lt;code&gt;g&lt;/code&gt; ， &lt;code&gt;o&lt;/code&gt; 或 &lt;code&gt;a&lt;/code&gt; 之一，其中 &lt;code&gt;u&lt;/code&gt; 指定拥有文件的用户， &lt;code&gt;g&lt;/code&gt; 指定文件的组所有者， &lt;code&gt;o&lt;/code&gt; 其他特定的用户权限，以及 &lt;code&gt;a&lt;/code&gt; 指定所有三个都应更改。</target>
        </trans-unit>
        <trans-unit id="8197431f9332af76bce775e1de1257355f1cd95c" translate="yes" xml:space="preserve">
          <source>The fish commandline editor can be used to work on commands that are several lines long. There are three ways to make a command span more than a single line:</source>
          <target state="translated">fish命令行编辑器可以用来处理长达数行的命令。有三种方法可以使一个命令跨度超过一行。</target>
        </trans-unit>
        <trans-unit id="8f8186d4ab0a2d348fed572d2dce9da78099265a" translate="yes" xml:space="preserve">
          <source>The fish commandline editor works exactly the same in single line mode and in multiline mode. To move between lines use the left and right arrow keys and other such keyboard shortcuts.</source>
          <target state="translated">fish命令行编辑器在单行模式和多行模式下的工作方式完全一样。要在行与行之间移动,请使用左右方向键和其他此类键盘快捷键。</target>
        </trans-unit>
        <trans-unit id="23b5304e27f02f59d7a10f53fd4009e199ac5306" translate="yes" xml:space="preserve">
          <source>The fish exit status is generally the exit status of the last foreground command. If fish is exiting because of a parse error, the exit status is 127.</source>
          <target state="translated">fish的退出状态一般是最后一条前台命令的退出状态。如果fish是因为解析错误而退出,则退出状态为127。</target>
        </trans-unit>
        <trans-unit id="81b0737757c6447d0c7efe9ceff078d063aa48ef" translate="yes" xml:space="preserve">
          <source>The fish user community extends fish in unique and useful ways via scripts that aren't always appropriate for bundling with the fish package. Typically because they solve a niche problem unlikely to appeal to a broad audience. You can find those extensions, including prompts, themes and useful functions, in various third-party repositories. These include:</source>
          <target state="translated">fish用户社区通过脚本以独特而有用的方式扩展了fish,这些脚本并不总是适合与fish包捆绑在一起。典型的原因是它们解决了一个小众的问题,不太可能吸引广大的用户。你可以在各种第三方资源库中找到这些扩展,包括提示、主题和有用的功能。这些包括:</target>
        </trans-unit>
        <trans-unit id="d06891f80053c3220358df28d431b54da754d75c" translate="yes" xml:space="preserve">
          <source>The fish_mode_prompt function will output the mode indicator for use in vi-mode.</source>
          <target state="translated">fish_mode_prompt函数将输出模式指示器供vi模式使用。</target>
        </trans-unit>
        <trans-unit id="89d3be5da20cd5974bed5d4cec48f0faf57383bf" translate="yes" xml:space="preserve">
          <source>The following &lt;code&gt;argparse&lt;/code&gt; options are available. They must appear before all OPTION_SPECs:</source>
          <target state="translated">以下 &lt;code&gt;argparse&lt;/code&gt; 选项可用。它们必须出现在所有OPTION_SPEC之前：</target>
        </trans-unit>
        <trans-unit id="23d5e5164bbb45ea1a895b015bf1d3acf0cdeae1" translate="yes" xml:space="preserve">
          <source>The following &lt;code&gt;argparse&lt;/code&gt; options are available:</source>
          <target state="translated">以下 &lt;code&gt;argparse&lt;/code&gt; 选项可用：</target>
        </trans-unit>
        <trans-unit id="224bb1116b7af6da373f3bd98c7370044c04d51d" translate="yes" xml:space="preserve">
          <source>The following additional options are also understood by &lt;code&gt;ulimit&lt;/code&gt;:</source>
          <target state="translated">&lt;code&gt;ulimit&lt;/code&gt; 也可以理解以下附加选项：</target>
        </trans-unit>
        <trans-unit id="72e92d902d19c4f9a787cc785c9f6f673c804c7c" translate="yes" xml:space="preserve">
          <source>The following code first defines an event handler for the generic event named 'test_event', and then emits an event of that type.</source>
          <target state="translated">以下代码首先为名为'test_event'的通用事件定义了一个事件处理程序,然后发出该类型的事件。</target>
        </trans-unit>
        <trans-unit id="4dfce41da5b846516accbd2a1b32a0ea88076d5d" translate="yes" xml:space="preserve">
          <source>The following code is an implementation of the false command as a fish function</source>
          <target state="translated">下面的代码是将false命令作为fish函数的一种实现方式</target>
        </trans-unit>
        <trans-unit id="73f428206d6cc247fb0a938bd495734a3eb822ae" translate="yes" xml:space="preserve">
          <source>The following code removes all tmp files that do not contain the word smurf.</source>
          <target state="translated">以下代码删除了所有不包含smurf字样的临时文件。</target>
        </trans-unit>
        <trans-unit id="479b6746587510b08a8b09d6baf9432244f03bce" translate="yes" xml:space="preserve">
          <source>The following code reports an error and exits if no file named spoon can be found.</source>
          <target state="translated">下面的代码报告了一个错误,如果找不到名为spoon的文件,则退出。</target>
        </trans-unit>
        <trans-unit id="c4c2a9bc321af801fbf29261dd0e7d5af4245506" translate="yes" xml:space="preserve">
          <source>The following code runs the &lt;code&gt;make&lt;/code&gt; command to build a program. If the build succeeds, &lt;code&gt;make&lt;/code&gt;'s exit status is 0, and the program is installed. If either step fails, the exit status is 1, and &lt;code&gt;make clean&lt;/code&gt; is run, which removes the files created by the build process.</source>
          <target state="translated">以下代码运行 &lt;code&gt;make&lt;/code&gt; 命令来构建程序。如果构建成功，则 &lt;code&gt;make&lt;/code&gt; 的退出状态为0，并安装程序。如果任一步骤失败，则退出状态为1，并运行 &lt;code&gt;make clean&lt;/code&gt; ，这将删除由构建过程创建的文件。</target>
        </trans-unit>
        <trans-unit id="546e6c9b6b78b14a90cdffaa174cd31d19fddac9" translate="yes" xml:space="preserve">
          <source>The following code runs the &lt;code&gt;make&lt;/code&gt; command to build a program. If the build succeeds, the program is installed. If either step fails, &lt;code&gt;make clean&lt;/code&gt; is run, which removes the files created by the build process.</source>
          <target state="translated">以下代码运行 &lt;code&gt;make&lt;/code&gt; 命令来构建程序。如果构建成功，则将安装程序。如果任一步骤失败，则运行 &lt;code&gt;make clean&lt;/code&gt; ，这将删除由构建过程创建的文件。</target>
        </trans-unit>
        <trans-unit id="22ceb5db939abfc8429d0cfac70346e285c29f90" translate="yes" xml:space="preserve">
          <source>The following code searches all .c files for &quot;smurf&quot;, and halts at the first occurrence.</source>
          <target state="translated">下面的代码搜索所有.c文件中的 &quot;smurf&quot;,并在第一次出现时停止。</target>
        </trans-unit>
        <trans-unit id="4275d8a3b1aa0d62413745bb834485269f681525" translate="yes" xml:space="preserve">
          <source>The following code sets a number of variables inside of a block scope. Since the variables are set inside the block and have local scope, they will be automatically deleted when the block ends.</source>
          <target state="translated">下面的代码在块的作用域内设置了一些变量,由于变量是在块内设置的,具有局部作用域,所以当块结束时,它们会被自动删除。由于这些变量是在块内设置的,并且具有局部范围,所以当块结束时,它们将被自动删除。</target>
        </trans-unit>
        <trans-unit id="9c3e3b53e3555daf8b545c545da16a2dcb0110a7" translate="yes" xml:space="preserve">
          <source>The following code stores the value 'hello' in the shell variable &lt;code&gt;$foo&lt;/code&gt;.</source>
          <target state="translated">以下代码将值&amp;ldquo; hello&amp;rdquo;存储在外壳变量 &lt;code&gt;$foo&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="381bfb0bdea553cc88676dcf9cb0ff3a9ee0da17" translate="yes" xml:space="preserve">
          <source>The following code tests whether a file &lt;code&gt;foo.txt&lt;/code&gt; exists as a regular file.</source>
          <target state="translated">以下代码测试文件 &lt;code&gt;foo.txt&lt;/code&gt; 是否作为常规文件存在。</target>
        </trans-unit>
        <trans-unit id="96c71a4810d00e2a53ad0417748ddcd2d89501b6" translate="yes" xml:space="preserve">
          <source>The following code will call the ls command. Note that &lt;code&gt;fish&lt;/code&gt; does not support the use of shell variables as direct commands; &lt;code&gt;eval&lt;/code&gt; can be used to work around this.</source>
          <target state="translated">以下代码将调用ls命令。请注意， &lt;code&gt;fish&lt;/code&gt; 不支持将shell变量用作直接命令。 &lt;code&gt;eval&lt;/code&gt; 可用于解决此问题。</target>
        </trans-unit>
        <trans-unit id="ca62666931da18a9248d4ac0f516c18c3953407d" translate="yes" xml:space="preserve">
          <source>The following code will count down from a random even number between 10 and 20 to 1:</source>
          <target state="translated">下面的代码将从10到20之间的随机偶数倒数到1。</target>
        </trans-unit>
        <trans-unit id="b827c00166140f0325b113f6c5ec11ead3608d8d" translate="yes" xml:space="preserve">
          <source>The following code will create &lt;code&gt;rmi&lt;/code&gt;, which runs &lt;code&gt;rm&lt;/code&gt; with additional arguments on every invocation.</source>
          <target state="translated">以下代码将创建 &lt;code&gt;rmi&lt;/code&gt; ，它在每次调用时运行带有附加参数的 &lt;code&gt;rm&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="2bda4fa27dff7ecce2f691a9e2a6631fca487d27" translate="yes" xml:space="preserve">
          <source>The following code will not output anything:</source>
          <target state="translated">下面的代码不会输出任何东西。</target>
        </trans-unit>
        <trans-unit id="ef1c53d0ac92fed4883e8ae1b1d7d027d13ad785" translate="yes" xml:space="preserve">
          <source>The following code will print &quot;foo.txt exists and is readable&quot; if foo.txt is a regular file and readable</source>
          <target state="translated">如果foo.txt是一个常规文件并且可读,下面的代码将打印 &quot;foo.txt存在并且可读&quot;。</target>
        </trans-unit>
        <trans-unit id="1b900844821e8f04f7dd1574d0cf172ece4e3553" translate="yes" xml:space="preserve">
          <source>The following code will print &lt;code&gt;foo.txt exists&lt;/code&gt; if the file foo.txt exists and is a regular file, otherwise it will print &lt;code&gt;bar.txt exists&lt;/code&gt; if the file bar.txt exists and is a regular file, otherwise it will print &lt;code&gt;foo.txt and bar.txt do not exist&lt;/code&gt;.</source>
          <target state="translated">下面的代码将打印 &lt;code&gt;foo.txt exists&lt;/code&gt; 如果文件foo.txt的存在，并且是一个普通文件，否则将打印 &lt;code&gt;bar.txt exists&lt;/code&gt; 如果文件存在跳回到bar.txt是一个普通文件，否则会打印 &lt;code&gt;foo.txt and bar.txt do not exist&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="de3876978d90a169388326ae4fae09574262829b" translate="yes" xml:space="preserve">
          <source>The following operations (sub-commands) are available:</source>
          <target state="translated">可进行以下操作(子命令)。</target>
        </trans-unit>
        <trans-unit id="87ad7915cdbf5aabf9ec8f4e6f650717a3e51ad5" translate="yes" xml:space="preserve">
          <source>The following options are available:</source>
          <target state="translated">有以下选项:</target>
        </trans-unit>
        <trans-unit id="d66ddc0c6de8a95bb5854453416293c96da8d8a9" translate="yes" xml:space="preserve">
          <source>The following options change the way &lt;code&gt;commandline&lt;/code&gt; prints the current commandline buffer:</source>
          <target state="translated">以下选项更改了 &lt;code&gt;commandline&lt;/code&gt; 打印当前命令行缓冲区的方式：</target>
        </trans-unit>
        <trans-unit id="63df7f64ccf12b96665f8dde259ffe470d38015a" translate="yes" xml:space="preserve">
          <source>The following options change the way &lt;code&gt;commandline&lt;/code&gt; updates the command line buffer:</source>
          <target state="translated">以下选项更改了 &lt;code&gt;commandline&lt;/code&gt; 更新命令行缓冲区的方式：</target>
        </trans-unit>
        <trans-unit id="74214e3ec02696aeea391992facc065916f44218" translate="yes" xml:space="preserve">
          <source>The following options change what part of the commandline is printed or updated:</source>
          <target state="translated">以下选项可以改变命令行中打印或更新的部分。</target>
        </trans-unit>
        <trans-unit id="4caebaf69abe1f045ca9b70c7d77c6343b9dba77" translate="yes" xml:space="preserve">
          <source>The following options control variable scope:</source>
          <target state="translated">以下是控制变量范围的选项。</target>
        </trans-unit>
        <trans-unit id="de38d59c5de4e05441ae91dc9bbb795a1e1439a4" translate="yes" xml:space="preserve">
          <source>The following options output metadata about the commandline state:</source>
          <target state="translated">以下选项输出了关于命令行状态的元数据。</target>
        </trans-unit>
        <trans-unit id="2cc91c14fc643ec75cd8e42977ab3bf342c34ee4" translate="yes" xml:space="preserve">
          <source>The following parameters are available:</source>
          <target state="translated">以下是可用的参数:</target>
        </trans-unit>
        <trans-unit id="328c4823c00af02675ec490144bb09f24d6106dd" translate="yes" xml:space="preserve">
          <source>The following special input functions are available:</source>
          <target state="translated">有以下特殊的输入功能:</target>
        </trans-unit>
        <trans-unit id="f152dd9767da97d86c0b7bee6016016e58054d4e" translate="yes" xml:space="preserve">
          <source>The following subcommands are available.</source>
          <target state="translated">可使用以下子命令。</target>
        </trans-unit>
        <trans-unit id="58f88b1896d25d9e560265aa1ea2d352215c9687" translate="yes" xml:space="preserve">
          <source>The following variables are available to change the highlighting colors in fish:</source>
          <target state="translated">以下变量可用于改变鱼的高光颜色。</target>
        </trans-unit>
        <trans-unit id="c602bb0a290012cbead72e55c75dd6308e892909" translate="yes" xml:space="preserve">
          <source>The functions shipped with fish, usually installed in &lt;code&gt;/usr/share/fish/functions&lt;/code&gt;.</source>
          <target state="translated">fish附带的功能，通常安装在 &lt;code&gt;/usr/share/fish/functions&lt;/code&gt; 中。</target>
        </trans-unit>
        <trans-unit id="31d1d74253673e0e00e4ab6d298c6cfbfbe641c4" translate="yes" xml:space="preserve">
          <source>The last value assigned to &lt;code&gt;var&lt;/code&gt; when the loop terminated would not be available outside the loop. What &lt;code&gt;echo $var&lt;/code&gt; would write depended on what it was set to before the loop was run. Likely nothing.</source>
          <target state="translated">循环终止时分配给 &lt;code&gt;var&lt;/code&gt; 的最后一个值在循环外部将不可用。什么 &lt;code&gt;echo $var&lt;/code&gt; 会写取决于它被设置为循环运行前。可能什么都没有。</target>
        </trans-unit>
        <trans-unit id="4b5d758036d63a8bf5273befa9ba2de30bb1d084" translate="yes" xml:space="preserve">
          <source>The latter syntax &lt;code&gt;{$WORD}&lt;/code&gt; works by exploiting &lt;a href=&quot;#expand-brace&quot;&gt;brace expansion&lt;/a&gt;.</source>
          <target state="translated">后一种语法 &lt;code&gt;{$WORD}&lt;/code&gt; 通过利用&lt;a href=&quot;#expand-brace&quot;&gt;括号扩展来工作&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="af91f79f8373488bcf43ad9d85211f47c5490d9e" translate="yes" xml:space="preserve">
          <source>The long answer:</source>
          <target state="translated">漫长的答案。</target>
        </trans-unit>
        <trans-unit id="3bc04ce8ee0aaf5de96a68984a57d83e6ba0f996" translate="yes" xml:space="preserve">
          <source>The most common way to set the locale to use a command like 'set -x LANG en_GB.utf8', which sets the current locale to be the English language, as used in Great Britain, using the UTF-8 character set. For a list of available locales, use 'locale -a'.</source>
          <target state="translated">最常见的设置locale的方法是使用'set -x LANG en_GB.utf8'这样的命令,它将当前的locale设置为英语,就像在英国使用的一样,使用UTF-8字符集。对于可用的locale列表,使用'locale -a'。</target>
        </trans-unit>
        <trans-unit id="65aa63047471b9a76e26dd8f43f5899f1292feb3" translate="yes" xml:space="preserve">
          <source>The names given to shell objects such as variables and function names are known as &quot;identifiers&quot;. Each type of identifier has rules that define the valid sequence of characters which compose the identifier.</source>
          <target state="translated">给shell对象(如变量和函数名)起的名字被称为 &quot;标识符&quot;。每种类型的标识符都有定义标识符有效字符序列的规则。</target>
        </trans-unit>
        <trans-unit id="2fe3f46a59e146e352f1c4758de7a57641a2c629" translate="yes" xml:space="preserve">
          <source>The names of these variables are mostly derived from the csh family of shells and differ from the ones used by Bourne style shells such as bash.</source>
          <target state="translated">这些变量的名称大多来自于csh系列的shell,与bash等伯恩式shell使用的名称不同。</target>
        </trans-unit>
        <trans-unit id="0cdd8d204de3244af011ba40dd2e1e03a80c3965" translate="yes" xml:space="preserve">
          <source>The official mailing list at &lt;a href=&quot;https://lists.sourceforge.net/lists/listinfo/fish-users&quot;&gt;fish-users@lists.sourceforge.net&lt;/a&gt;</source>
          <target state="translated">官方邮件列表为&lt;a href=&quot;https://lists.sourceforge.net/lists/listinfo/fish-users&quot;&gt;fish-users@lists.sourceforge.net&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="341137762021767c1bcfe1d4e89d1efb6ab672f6" translate="yes" xml:space="preserve">
          <source>The open command doesn't work.</source>
          <target state="translated">打开的命令不起作用。</target>
        </trans-unit>
        <trans-unit id="1270e20d3a3df8e1f5346556fc472ccabc75c9c8" translate="yes" xml:space="preserve">
          <source>The options for specifying command name and command path may be used multiple times to define the same completions for multiple commands.</source>
          <target state="translated">指定命令名称和命令路径的选项可以多次使用,为多个命令定义相同的完成方式。</target>
        </trans-unit>
        <trans-unit id="ff3a156169840aa3d5e264e866d9a002dac09c1f" translate="yes" xml:space="preserve">
          <source>The options for specifying command switches and wrapped commands may be used multiple times to define multiple completions for the command(s) in a single call.</source>
          <target state="translated">用于指定命令开关和封装命令的选项可以多次使用,以便在一次调用中为命令定义多个完成。</target>
        </trans-unit>
        <trans-unit id="514a8bdf395655769cdf0c1f52c06c11623edf78" translate="yes" xml:space="preserve">
          <source>The other conditionals use the &lt;a href=&quot;#variables-status&quot;&gt;exit status&lt;/a&gt; of a command to decide if a command or a block of commands should be executed. See the documentation for &lt;a href=&quot;commands#if&quot;&gt;&lt;code&gt;if&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;commands#and&quot;&gt;&lt;code&gt;and&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;commands#or&quot;&gt;&lt;code&gt;or&lt;/code&gt;&lt;/a&gt; for more information.</source>
          <target state="translated">其他条件使用命令的&lt;a href=&quot;#variables-status&quot;&gt;退出状态&lt;/a&gt;来决定是否应执行命令或命令块。有关&lt;a href=&quot;commands#if&quot;&gt; &lt;code&gt;if&lt;/code&gt; &lt;/a&gt;，&lt;a href=&quot;commands#and&quot;&gt; &lt;code&gt;and&lt;/code&gt; &lt;/a&gt;和&lt;a href=&quot;commands#or&quot;&gt; &lt;code&gt;or&lt;/code&gt; &lt;/a&gt;更多信息，请参见文档。</target>
        </trans-unit>
        <trans-unit id="a2490e597900e8176c6a2c4a4584d5571260ded3" translate="yes" xml:space="preserve">
          <source>The output of a series of commands can be used as the parameters to another command. If a parameter contains a set of parenthesis, the text enclosed by the parenthesis will be interpreted as a list of commands. On expansion, this list is executed, and substituted by the output. If the output is more than one line long, each line will be expanded to a new parameter. Setting &lt;code&gt;IFS&lt;/code&gt; to the empty string will disable line splitting.</source>
          <target state="translated">一系列命令的输出可用作另一个命令的参数。如果参数包含一组括号，则括号内的文本将被解释为命令列表。扩展时，将执行此列表，并用输出替换。如果输出超过一行，则每行将扩展为一个新参数。将 &lt;code&gt;IFS&lt;/code&gt; 设置为空字符串将禁用行拆分。</target>
        </trans-unit>
        <trans-unit id="c076b2b362e357c8c787010692c3897b0cde8acf" translate="yes" xml:space="preserve">
          <source>The previous test can likewise be inverted:</source>
          <target state="translated">前面的测试同样可以反过来。</target>
        </trans-unit>
        <trans-unit id="ddedd2674467015f6a5beb34ee2fbb835520f26b" translate="yes" xml:space="preserve">
          <source>The programs &lt;code&gt;man&lt;/code&gt; and &lt;code&gt;whatis&lt;/code&gt; show all installed manual pages as completions.</source>
          <target state="translated">程序 &lt;code&gt;man&lt;/code&gt; 和 &lt;code&gt;whatis&lt;/code&gt; 会将所有已安装的手册页显示为完整内容。</target>
        </trans-unit>
        <trans-unit id="923e6b118fb538f4ca8e8f67ca4698c422b3b072" translate="yes" xml:space="preserve">
          <source>The prompt is the output of the &lt;code&gt;fish_prompt&lt;/code&gt; function. Put it in &lt;code&gt;~/.config/fish/functions/fish_prompt.fish&lt;/code&gt;. For example, a simple prompt is:</source>
          <target state="translated">提示是 &lt;code&gt;fish_prompt&lt;/code&gt; 函数的输出。将它放在 &lt;code&gt;~/.config/fish/functions/fish_prompt.fish&lt;/code&gt; 。例如，一个简单的提示是：</target>
        </trans-unit>
        <trans-unit id="f6c98e8413fa41203c749875900025da16302aca" translate="yes" xml:space="preserve">
          <source>The reason for providing for two output file descriptors is to allow separation of errors and warnings from regular program output.</source>
          <target state="translated">提供两个输出文件描述符的原因是允许将错误和警告从常规程序输出中分离出来。</target>
        </trans-unit>
        <trans-unit id="1c641b43a1ed9a01749c093f3a5864403b12f91c" translate="yes" xml:space="preserve">
          <source>The return status is 1 if any &lt;code&gt;REASON&lt;/code&gt; is invalid; otherwise trap returns 0.</source>
          <target state="translated">如果任何 &lt;code&gt;REASON&lt;/code&gt; 无效，则返回状态为1；否则，返回0 。否则trap返回0。</target>
        </trans-unit>
        <trans-unit id="eec28e525883ec2bf359aa9ac84f19012ae7983d" translate="yes" xml:space="preserve">
          <source>The return status of &lt;code&gt;source&lt;/code&gt; is the return status of the last job to execute. If something goes wrong while opening or reading the file, &lt;code&gt;source&lt;/code&gt; exits with a non-zero status.</source>
          <target state="translated">的返回状态 &lt;code&gt;source&lt;/code&gt; 是最后一个任务的返回状态来执行。如果在打开或读取文件时出现问题，则 &lt;code&gt;source&lt;/code&gt; 将以非零状态退出。</target>
        </trans-unit>
        <trans-unit id="1c30a73e8a51035e518bdfeccb5ae03bbba2a49e" translate="yes" xml:space="preserve">
          <source>The same works when setting or expanding variables:</source>
          <target state="translated">在设置或扩展变量时,也是同样的道理。</target>
        </trans-unit>
        <trans-unit id="0df43a9567e35d287e4e0a64578b1540c9c5524d" translate="yes" xml:space="preserve">
          <source>The scoping rules when creating or updating a variable are:</source>
          <target state="translated">创建或更新变量时的作用域规则为:。</target>
        </trans-unit>
        <trans-unit id="af1ca2dded8974103c58a768e1e91d3d877d12bd" translate="yes" xml:space="preserve">
          <source>The script should write any error messages to stdout, not stderr. It should return a status of zero if the flag value is valid otherwise a non-zero status to indicate it is invalid.</source>
          <target state="translated">脚本应该将任何错误信息写入stdout,而不是stderr。如果标志值有效,它应该返回一个零的状态,否则返回一个非零的状态来表示它是无效的。</target>
        </trans-unit>
        <trans-unit id="ea5694e15d95ca5a5e96c990e236cff7fa4686dd" translate="yes" xml:space="preserve">
          <source>The second part of a right specifies the mode, and can be one of &lt;code&gt;=&lt;/code&gt;, &lt;code&gt;+&lt;/code&gt; or &lt;code&gt;-&lt;/code&gt;, where &lt;code&gt;=&lt;/code&gt; specifies that the rights should be set to the new value, &lt;code&gt;+&lt;/code&gt; specifies that the specified right should be added to those previously specified and &lt;code&gt;-&lt;/code&gt; specifies that the specified rights should be removed from those previously specified.</source>
          <target state="translated">权限的第二部分指定了模式，可以是 &lt;code&gt;=&lt;/code&gt; ， &lt;code&gt;+&lt;/code&gt; 或 &lt;code&gt;-&lt;/code&gt; 之一，其中 &lt;code&gt;=&lt;/code&gt; 指定应将权限设置为新值， &lt;code&gt;+&lt;/code&gt; 指定应将指定的权限添加到先前指定的权限中，并且 &lt;code&gt;-&lt;/code&gt; 指定应从先前指定的权限中删除指定的权限。</target>
        </trans-unit>
        <trans-unit id="7823c527da5d40f4505f5d7ca9cee1dbf65bd935" translate="yes" xml:space="preserve">
          <source>The short style option &lt;code&gt;-d&lt;/code&gt; for the &lt;code&gt;grep&lt;/code&gt; command requires that one of the strings '&lt;code&gt;read&lt;/code&gt;', '&lt;code&gt;skip&lt;/code&gt;' or '&lt;code&gt;recurse&lt;/code&gt;' is used. This can be specified writing:</source>
          <target state="translated">短样式选项 &lt;code&gt;-d&lt;/code&gt; 为 &lt;code&gt;grep&lt;/code&gt; 的命令需要串的那一个&amp;ldquo; &lt;code&gt;read&lt;/code&gt; &amp;rdquo;，&amp;ldquo; &lt;code&gt;skip&lt;/code&gt; &amp;rdquo;或&amp;ldquo; &lt;code&gt;recurse&lt;/code&gt; &amp;rdquo;使用。可以这样写：</target>
        </trans-unit>
        <trans-unit id="21aef96d543138db0f5113aa8c694e877221993a" translate="yes" xml:space="preserve">
          <source>The short style option &lt;code&gt;-o&lt;/code&gt; for the &lt;code&gt;gcc&lt;/code&gt; command requires that a file follows it. This can be done using writing:</source>
          <target state="translated">短样式选项 &lt;code&gt;-o&lt;/code&gt; 为 &lt;code&gt;gcc&lt;/code&gt; 命令需要一个文件遵循它。这可以通过编写以下代码来完成：</target>
        </trans-unit>
        <trans-unit id="a7c9c314ad94ef58d396d8ee54dfb17c9688e5cf" translate="yes" xml:space="preserve">
          <source>The status variable</source>
          <target state="translated">状态变量</target>
        </trans-unit>
        <trans-unit id="3d79b5f2fb8b7ff9607cb6173124ce2876018175" translate="yes" xml:space="preserve">
          <source>The string FORMAT should contain format specifiers, each of which are replaced with successive arguments according to the specifier. Specifiers are detailed below, and are taken from the C library function &lt;code&gt;printf(3)&lt;/code&gt;.</source>
          <target state="translated">字符串FORMAT应该包含格式说明符，根据说明符，每个格式说明符都将被连续的参数替换。指定符在下面进行了详细说明，并取自C库函数 &lt;code&gt;printf(3)&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="78761829292527d745af43c24666b70964c2aa8e" translate="yes" xml:space="preserve">
          <source>The third part of a right specifies what rights should be changed and can be any combination of &lt;code&gt;r&lt;/code&gt;, &lt;code&gt;w&lt;/code&gt; and &lt;code&gt;x&lt;/code&gt;, representing read, write and execute rights.</source>
          <target state="translated">权限的第三部分指定应更改的权限，并且可以是 &lt;code&gt;r&lt;/code&gt; ， &lt;code&gt;w&lt;/code&gt; 和 &lt;code&gt;x&lt;/code&gt; 的任意组合，表示读取，写入和执行权限。</target>
        </trans-unit>
        <trans-unit id="f6aea30b4125640db0c941f62792d8db2583d13d" translate="yes" xml:space="preserve">
          <source>The tool will write an example &lt;code&gt;bind&lt;/code&gt; command matching the character sequence captured to stdout. If the character sequence matches a special key name (see &lt;code&gt;bind --key-names&lt;/code&gt;), both &lt;code&gt;bind CHARS ...&lt;/code&gt; and &lt;code&gt;bind -k KEYNAME ...&lt;/code&gt; usage will be shown. Additional details about the characters received, such as the delay between chars, are written to stderr.</source>
          <target state="translated">该工具将编写一个示例 &lt;code&gt;bind&lt;/code&gt; 命令，该命令将捕获到stdout的字符序列匹配。如果字符序列与特殊键名匹配（请参见 &lt;code&gt;bind --key-names&lt;/code&gt; ），则将显示bind CHARS &lt;code&gt;bind CHARS ...&lt;/code&gt; 和 &lt;code&gt;bind -k KEYNAME ...&lt;/code&gt; 的用法。有关接收到的字符的其他详细信息（例如，字符之间的延迟）将写入stderr。</target>
        </trans-unit>
        <trans-unit id="33a16e681c6b2de523ee079730543d5aaaa072a3" translate="yes" xml:space="preserve">
          <source>The umask may be expressed either as an octal number, which represents the rights that will be removed by default, or symbolically, which represents the only rights that will be granted by default.</source>
          <target state="translated">掩码既可以用八进制数表示,表示默认情况下将被删除的权利,也可以用符号表示,表示默认情况下将被授予的唯一权利。</target>
        </trans-unit>
        <trans-unit id="ff67961119e87010a71ffb5f982a7874fbd862b2" translate="yes" xml:space="preserve">
          <source>The user can change the settings of &lt;code&gt;fish&lt;/code&gt; by changing the values of certain variables.</source>
          <target state="translated">用户可以通过更改某些变量的值来更改 &lt;code&gt;fish&lt;/code&gt; 的设置。</target>
        </trans-unit>
        <trans-unit id="92734526becf97d0102e67503ae3f5ec70437f52" translate="yes" xml:space="preserve">
          <source>The user can string together multiple commands into a so called pipeline. This means that the standard output of one command will be read in as standard input into the next command. This is done by separating the commands by the pipe character '&lt;code&gt;|&lt;/code&gt;'. For example</source>
          <target state="translated">用户可以将多个命令串在一起形成所谓的管道。这意味着一个命令的标准输出将作为下一个命令的标准输入读入。这是通过用竖线字符' &lt;code&gt;|&lt;/code&gt; 分隔命令来完成的 '。例如</target>
        </trans-unit>
        <trans-unit id="7b8b4db39167ca73155b4a80905652bbe883d472" translate="yes" xml:space="preserve">
          <source>The value of limit can be a number in the unit specified for the resource or one of the special values &lt;code&gt;hard&lt;/code&gt;, &lt;code&gt;soft&lt;/code&gt;, or &lt;code&gt;unlimited&lt;/code&gt;, which stand for the current hard limit, the current soft limit, and no limit, respectively.</source>
          <target state="translated">limit的值可以是为资源指定的单位中的数字，也可以是 &lt;code&gt;hard&lt;/code&gt; ， &lt;code&gt;soft&lt;/code&gt; 或 &lt;code&gt;unlimited&lt;/code&gt; 的特殊值之一，分别代表当前的硬限制，当前的软限制和无限制。</target>
        </trans-unit>
        <trans-unit id="ea2f6068a9dad88efc3494909770d142904666d0" translate="yes" xml:space="preserve">
          <source>The web interface allows you to view your functions, variables and history, and to make changes to your prompt and color configuration.</source>
          <target state="translated">网页界面允许您查看您的函数、变量和历史记录,并对您的提示和颜色配置进行更改。</target>
        </trans-unit>
        <trans-unit id="27cd5ebce2dff7c39841e898f946a341a35b41e4" translate="yes" xml:space="preserve">
          <source>Then the following invocations behave like this:</source>
          <target state="translated">那么下面的调用是这样的。</target>
        </trans-unit>
        <trans-unit id="fa54c06d5fdedec560ab96fcbf9871934330e6d3" translate="yes" xml:space="preserve">
          <source>There are a few important things that need to be noted about aliases:</source>
          <target state="translated">关于别名,有几个重要的事情需要注意。</target>
        </trans-unit>
        <trans-unit id="3ba25ca105726fc0d596821887908ff16a459bda" translate="yes" xml:space="preserve">
          <source>There are also special switches for specifying that a switch requires an argument, to disable filename completion, to create completions that are only available in some combinations, etc.. For a complete description of the various switches accepted by the &lt;code&gt;complete&lt;/code&gt; command, see the documentation for the &lt;a href=&quot;commands#complete&quot;&gt;complete&lt;/a&gt; builtin, or write &lt;code&gt;complete --help&lt;/code&gt; inside the &lt;code&gt;fish&lt;/code&gt; shell.</source>
          <target state="translated">还有一些特殊的开关，用于指定一个开关需要一个参数，禁用文件名补全，创建仅在某些组合中可用的补全等。有关 &lt;code&gt;complete&lt;/code&gt; 命令接受的各种开关的完整说明，请参见文档。以获得&lt;a href=&quot;commands#complete&quot;&gt;完整的&lt;/a&gt;内置文件，或在 &lt;code&gt;fish&lt;/code&gt; shell 内编写 &lt;code&gt;complete --help&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="2d9df96be8b6a2362ccd2ca558b23ccf8d96cd57" translate="yes" xml:space="preserve">
          <source>There are four fish builtins that let you execute commands only if a specific criterion is met. These builtins are &lt;a href=&quot;commands#if&quot;&gt;&lt;code&gt;if&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;commands#switch&quot;&gt;&lt;code&gt;switch&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;commands#and&quot;&gt;&lt;code&gt;and&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;commands#or&quot;&gt;&lt;code&gt;or&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">共有四个fish内置函数，它们仅在满足特定条件时才可以执行命令。这些内建有&lt;a href=&quot;commands#if&quot;&gt; &lt;code&gt;if&lt;/code&gt; &lt;/a&gt;，&lt;a href=&quot;commands#switch&quot;&gt; &lt;code&gt;switch&lt;/code&gt; &lt;/a&gt;，&lt;a href=&quot;commands#and&quot;&gt; &lt;code&gt;and&lt;/code&gt; &lt;/a&gt;和&lt;a href=&quot;commands#or&quot;&gt; &lt;code&gt;or&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="255b5925229ebf64b3dccbaf56f554bfda33418a" translate="yes" xml:space="preserve">
          <source>There are no parameters for &lt;code&gt;break&lt;/code&gt;.</source>
          <target state="translated">没有 &lt;code&gt;break&lt;/code&gt; 的参数。</target>
        </trans-unit>
        <trans-unit id="a56ebf43ed98e5db43b2052e83aa4d07a4140747" translate="yes" xml:space="preserve">
          <source>There are no parameters for &lt;code&gt;breakpoint&lt;/code&gt;.</source>
          <target state="translated">没有 &lt;code&gt;breakpoint&lt;/code&gt; 参数。</target>
        </trans-unit>
        <trans-unit id="c25f17ac972a261d801c33ab7a6b142dc2017014" translate="yes" xml:space="preserve">
          <source>There are no parameters for &lt;code&gt;fish_update_completions&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;fish_update_completions&lt;/code&gt; 没有参数。</target>
        </trans-unit>
        <trans-unit id="031b665a362fca99dc2232105e16d4be76ec8e13" translate="yes" xml:space="preserve">
          <source>There are three kinds of variables in fish: universal, global and local variables. Universal variables are shared between all fish sessions a user is running on one computer. Global variables are specific to the current fish session, but are not associated with any specific block scope, and will never be erased unless the user explicitly requests it using &lt;code&gt;set -e&lt;/code&gt;. Local variables are specific to the current fish session, and associated with a specific block of commands, and is automatically erased when a specific block goes out of scope. A block of commands is a series of commands that begins with one of the commands &lt;code&gt;for&lt;/code&gt;, &lt;code&gt;while&lt;/code&gt; , &lt;code&gt;if&lt;/code&gt;, &lt;code&gt;function&lt;/code&gt;, &lt;code&gt;begin&lt;/code&gt; or &lt;code&gt;switch&lt;/code&gt;, and ends with the command &lt;code&gt;end&lt;/code&gt;. The user can specify that a variable should have either global or local scope using the &lt;code&gt;-g/--global&lt;/code&gt; or &lt;code&gt;-l/--local&lt;/code&gt; switches.</source>
          <target state="translated">鱼中存在三种变量：通用变量，全局变量和局部变量。通用变量在用户在一台计算机上运行的所有fish会话之间共享。全局变量特定于当前的fish会话，但不与任何特定的块范围相关联，并且除非用户使用 &lt;code&gt;set -e&lt;/code&gt; 显式请求，否则绝不会擦除全局变量。局部变量特定于当前的fish会话，并且与特定的命令块相关联，并且当特定的块超出范围时会自动删除。命令的块是一系列命令与所述命令中的一个开始 &lt;code&gt;for&lt;/code&gt; ， &lt;code&gt;while&lt;/code&gt; ， &lt;code&gt;if&lt;/code&gt; ， &lt;code&gt;function&lt;/code&gt; ， &lt;code&gt;begin&lt;/code&gt; 或 &lt;code&gt;switch&lt;/code&gt; 并以命令 &lt;code&gt;end&lt;/code&gt; 结尾。用户可以使用 &lt;code&gt;-g/--global&lt;/code&gt; 或 &lt;code&gt;-l/--local&lt;/code&gt; 开关指定变量应具有全局作用域或局部作用域。</target>
        </trans-unit>
        <trans-unit id="a8bb46a6b8bc305c23a119159486bd2d5c470ee5" translate="yes" xml:space="preserve">
          <source>There are two breaking changes in fish 3.0: caret &lt;code&gt;^&lt;/code&gt; no longer redirects stderr, and question mark &lt;code&gt;?&lt;/code&gt; is no longer a glob. These changes are off by default. They can be enabled on a per session basis:</source>
          <target state="translated">fish 3.0有两个重大变化：插入符 &lt;code&gt;^&lt;/code&gt; 不再重定向stderr，而问号是 &lt;code&gt;?&lt;/code&gt; 不再是一个问题。这些更改默认情况下处于关闭状态。可以基于每个会话启用它们：</target>
        </trans-unit>
        <trans-unit id="20ceb2460c137862f053425df367d426c42e4313" translate="yes" xml:space="preserve">
          <source>There is also a &lt;code&gt;switch&lt;/code&gt; command:</source>
          <target state="translated">还有一个 &lt;code&gt;switch&lt;/code&gt; 命令：</target>
        </trans-unit>
        <trans-unit id="b0866a618c196f1ac7d2ced3309d7b238c006085" translate="yes" xml:space="preserve">
          <source>There may be many variables with the same name, but different scopes. When using a variable, the variable scope will be searched from the inside out, i.e. a local variable will be used rather than a global variable with the same name, a global variable will be used rather than a universal variable with the same name.</source>
          <target state="translated">可能会有很多同名的变量,但范围不同。在使用变量时,变量作用域将由内向外搜索,即使用局部变量而不是同名的全局变量,使用全局变量而不是同名的通用变量。</target>
        </trans-unit>
        <trans-unit id="d7f028aa2b19c153baae8d83c317ae110446208a" translate="yes" xml:space="preserve">
          <source>These are the general purpose tab completions that &lt;code&gt;fish&lt;/code&gt; provides:</source>
          <target state="translated">这些是 &lt;code&gt;fish&lt;/code&gt; 提供的通用选项卡补全：</target>
        </trans-unit>
        <trans-unit id="e7972582e9c4968e777fc42db67d9b318fa79e46" translate="yes" xml:space="preserve">
          <source>These colors, and many more, can be changed by running &lt;code&gt;fish_config&lt;/code&gt;, or by modifying variables directly.</source>
          <target state="translated">可以通过运行 &lt;code&gt;fish_config&lt;/code&gt; 或直接修改变量来更改这些颜色以及更多其他颜色。</target>
        </trans-unit>
        <trans-unit id="91e1e5aba0c598515d08d40af2f8d04dd57004f4" translate="yes" xml:space="preserve">
          <source>These files are all executed on the startup of every shell. If you want to run a command only on starting an interactive shell, use the exit status of the command &lt;code&gt;status --is-interactive&lt;/code&gt; to determine if the shell is interactive. If you want to run a command only when using a login shell, use &lt;code&gt;status --is-login&lt;/code&gt; instead. This will speed up the starting of non-interactive or non-login shells.</source>
          <target state="translated">这些文件都是在每个Shell启动时执行的。如果只想在启动交互式外壳程序时运行命令，请使用命令 &lt;code&gt;status --is-interactive&lt;/code&gt; 的退出状态来确定外壳程序是否是交互式的。如果只想在使用登录外壳程序时运行命令，请改为使用 &lt;code&gt;status --is-login&lt;/code&gt; 。这将加快非交互式或非登录外壳程序的启动。</target>
        </trans-unit>
        <trans-unit id="80b96b3d74710e83d20ff5ac21723a42f2f052d6" translate="yes" xml:space="preserve">
          <source>These flags can appear before or immediately after one of the sub-commands listed above.</source>
          <target state="translated">这些标志可以出现在上面列出的一个子命令之前或之后。</target>
        </trans-unit>
        <trans-unit id="018467e6400b14718548d65eb59c273e2720ed52" translate="yes" xml:space="preserve">
          <source>These paths are controlled by parameters set at build, install, or run time, and may vary from the defaults listed above.</source>
          <target state="translated">这些路径由在构建、安装或运行时设置的参数控制,可能会与上面列出的默认值不同。</target>
        </trans-unit>
        <trans-unit id="d24f98a189aa3819db3885dc20417a7ef5fd2074" translate="yes" xml:space="preserve">
          <source>They are all used in an infix manner - &lt;code&gt;5 + 2&lt;/code&gt;, not &lt;code&gt;+ 5 2&lt;/code&gt;.</source>
          <target state="translated">它们全部以固定方式使用 &lt;code&gt;5 + 2&lt;/code&gt; ，而不是 &lt;code&gt;+ 5 2&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="af768071c5b224ad5b92ddb2ba1221dcbc0d859d" translate="yes" xml:space="preserve">
          <source>This also happens after &lt;a href=&quot;#expand-command-substitution&quot;&gt;command substitution&lt;/a&gt;. Therefore strings might be eliminated. This can be avoided by making the inner command return a trailing newline.</source>
          <target state="translated">这也发生在&lt;a href=&quot;#expand-command-substitution&quot;&gt;命令替换之后&lt;/a&gt;。因此，可以消除字符串。可以通过使内部命令返回尾随换行符来避免这种情况。</target>
        </trans-unit>
        <trans-unit id="b50932aeaca87e43aadc296b2abd6503a42d3550" translate="yes" xml:space="preserve">
          <source>This calls the &lt;code&gt;echo&lt;/code&gt; command. &lt;code&gt;echo&lt;/code&gt; is a command which will write its arguments to the screen. In the example above, the output will be 'hello world'. Everything in fish is done with commands. There are commands for performing a set of commands multiple times, commands for assigning variables, commands for treating a group of commands as a single command, etc.. And every single command follows the same simple syntax.</source>
          <target state="translated">这将调用 &lt;code&gt;echo&lt;/code&gt; 命令。 &lt;code&gt;echo&lt;/code&gt; 是一个将其参数写入屏幕的命令。在上面的示例中，输出将为&amp;ldquo; hello world&amp;rdquo;。鱼中的一切都由命令完成。有用于多次执行一组命令的命令，用于分配变量的命令，将一组命令视为一个命令的命令等。每个命令都遵循相同的简单语法。</target>
        </trans-unit>
        <trans-unit id="366a5d79af152ebea92d5f861ed8a475043b7941" translate="yes" xml:space="preserve">
          <source>This can be written as:</source>
          <target state="translated">这可以写成:</target>
        </trans-unit>
        <trans-unit id="2c3fa67d634b278ec1a7802bf809ac5774656af1" translate="yes" xml:space="preserve">
          <source>This code will add some directories to $PATH if they aren't yet included:</source>
          <target state="translated">这段代码将在$PATH中添加一些尚未包含的目录。</target>
        </trans-unit>
        <trans-unit id="46b694f24aed40624e847ae57ae10b126b23d033" translate="yes" xml:space="preserve">
          <source>This command makes it easy for fish scripts and functions to handle arguments in a manner 100% identical to how fish builtin commands handle their arguments. You pass a sequence of arguments that define the options recognized, followed by a literal &lt;code&gt;--&lt;/code&gt;, then the arguments to be parsed (which might also include a literal &lt;code&gt;--&lt;/code&gt;). More on this in the &lt;a href=&quot;#argparse-usage&quot;&gt;usage&lt;/a&gt; section below.</source>
          <target state="translated">Fish脚本和函数可以轻松地以与fish内置命令如何处理其参数的方式100％相同的方式来处理参数。您传递了一系列参数，这些参数定义了公认的选项，其后是文字 &lt;code&gt;--&lt;/code&gt; ，然后传递要解析的参数（其中也可能包含文字 &lt;code&gt;--&lt;/code&gt; ）。有关更多信息，请参见下面的&lt;a href=&quot;#argparse-usage&quot;&gt;用法&lt;/a&gt;部分。</target>
        </trans-unit>
        <trans-unit id="20cd8d04285455a5eeee7e58dc05b32ca7729358" translate="yes" xml:space="preserve">
          <source>This command provides a way to produce option specifications suitable for use with the &lt;a href=&quot;#argparse&quot;&gt;&lt;code&gt;argparse&lt;/code&gt;&lt;/a&gt; command. You can, of course, write the option specs by hand without using this command. But you might prefer to use this for the clarity it provides.</source>
          <target state="translated">该命令提供了一种生成适合与&lt;a href=&quot;#argparse&quot;&gt; &lt;code&gt;argparse&lt;/code&gt; &lt;/a&gt;命令一起使用的选项规范的方法。当然，您可以手动编写选项规格，而无需使用此命令。但是您可能更喜欢使用它来提供清晰的信息。</target>
        </trans-unit>
        <trans-unit id="07448165c0f812cb8478f38c84a94b14d2215ae2" translate="yes" xml:space="preserve">
          <source>This does not overwrite custom completions.</source>
          <target state="translated">这不会覆盖自定义完成。</target>
        </trans-unit>
        <trans-unit id="6147eda0417a76ae63d83548f1bb6d3684130031" translate="yes" xml:space="preserve">
          <source>This file has been imported from the printf in GNU Coreutils version 6.9. If you would like to use a newer version of printf, for example the one shipped with your OS, try &lt;code&gt;command printf&lt;/code&gt;.</source>
          <target state="translated">该文件已从GNU Coreutils 6.9版的printf导入。如果要使用较新版本的printf，例如操作系统随附的版本，请尝试使用 &lt;code&gt;command printf&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="36a27e8809bc8ecec60cf5b8b496d2f657edff50" translate="yes" xml:space="preserve">
          <source>This function is deprecated. Please call &lt;code&gt;fish_vi_key_bindings directly&lt;/code&gt;</source>
          <target state="translated">不推荐使用此功能。请 &lt;code&gt;fish_vi_key_bindings directly&lt;/code&gt; 致电fish_vi_key_bindings</target>
        </trans-unit>
        <trans-unit id="cbbea16193e927515d0dc3be9146ab095157af42" translate="yes" xml:space="preserve">
          <source>This is a short explanation of some of the commonly used words in fish.</source>
          <target state="translated">这是对鱼的一些常用词的简单解释。</target>
        </trans-unit>
        <trans-unit id="8d244f1f10393a3fd4f3ebf581d37f923228ef19" translate="yes" xml:space="preserve">
          <source>This is implemented as a function and a builtin. The function will attempt to use an external realpath command if one can be found. Otherwise it falls back to the builtin. The builtin does not support any options. It's meant to be used only by scripts which need to be portable. The builtin implementation behaves like GNU realpath when invoked without any options (which is the most common use case). In general scripts should not invoke the builtin directly. They should just use &lt;code&gt;realpath&lt;/code&gt;.</source>
          <target state="translated">这是作为功能和内置实现的。如果可以找到，则该函数将尝试使用外部realpath命令。否则，它会退回到内置函数。内置不支持任何选项。它只能由需要可移植的脚本使用。在没有任何选项的情况下调用（这是最常见的用例）时，内置实现的行为类似于GNU realpath。通常，脚本不应直接调用内置函数。他们应该只使用 &lt;code&gt;realpath&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="ee1d4171e513cf57adfa5dbd82bf66ed41edba27" translate="yes" xml:space="preserve">
          <source>This is not an exhaustive list and the fish project has no opinion regarding the merits of the repositories listed above or the scripts found therein.</source>
          <target state="translated">这并不是一个详尽的列表,鱼项目对上面列出的资源库或其中的脚本的优劣没有意见。</target>
        </trans-unit>
        <trans-unit id="096d775aa834b5a98fc75f9c9df8cd5ad1df3f6c" translate="yes" xml:space="preserve">
          <source>This is similar to &lt;a href=&quot;index#expand-brace&quot;&gt;Brace expansion&lt;/a&gt;.</source>
          <target state="translated">这类似于&lt;a href=&quot;index#expand-brace&quot;&gt;Brace扩展&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="87b5c6aa51fef3c82ea1bd8fddb7c95bed61e89d" translate="yes" xml:space="preserve">
          <source>This is the documentation for &lt;code&gt;fish&lt;/code&gt;, the friendly interactive shell. &lt;code&gt;fish&lt;/code&gt; is a user friendly commandline shell intended mostly for interactive use. A shell is a program used to execute other programs. For the latest information on &lt;code&gt;fish&lt;/code&gt;, please visit the &lt;a href=&quot;https://fishshell.com/&quot;&gt;&lt;code&gt;fish&lt;/code&gt; homepage&lt;/a&gt;.</source>
          <target state="translated">这是 &lt;code&gt;fish&lt;/code&gt; 的文档，友好的交互式shell。 &lt;code&gt;fish&lt;/code&gt; 是一个用户友好的命令行外壳，主要用于交互式使用。Shell是用于执行其他程序的程序。有关 &lt;code&gt;fish&lt;/code&gt; 的最新信息，请访问&lt;a href=&quot;https://fishshell.com/&quot;&gt; &lt;code&gt;fish&lt;/code&gt; 主页&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="577bd6355fb298c4b6b2d6488f451eaa11f5dbb8" translate="yes" xml:space="preserve">
          <source>This is the preferred way to define your prompt as well:</source>
          <target state="translated">这也是定义你的提示的首选方式。</target>
        </trans-unit>
        <trans-unit id="8cc576b35450257aadce9343fd3afaecbb82068c" translate="yes" xml:space="preserve">
          <source>This means that the global value takes precedence over the universal value.</source>
          <target state="translated">这意味着全局值优先于普遍值。</target>
        </trans-unit>
        <trans-unit id="51d7db524de6aeb12230612416aa7c659663fe8a" translate="yes" xml:space="preserve">
          <source>This prompt that you see above is the &lt;code&gt;fish&lt;/code&gt; default prompt: it shows your username, hostname, and working directory.</source>
          <target state="translated">您在上面看到的该提示是 &lt;code&gt;fish&lt;/code&gt; 的默认提示：它显示您的用户名，主机名和工作目录。</target>
        </trans-unit>
        <trans-unit id="c731bb20159682c25c6b4c24ba8357e2f689c68f" translate="yes" xml:space="preserve">
          <source>This tells you that there exists a file that starts with '&lt;code&gt;somefi&lt;/code&gt;', which is useful feedback as you type.</source>
          <target state="translated">这告诉您，存在一个以&amp;ldquo; &lt;code&gt;somefi&lt;/code&gt; &amp;rdquo; 开头的文件，这在您键入时很有用。</target>
        </trans-unit>
        <trans-unit id="1ffb61bd1cd5715a466531b7a657f71109690e35" translate="yes" xml:space="preserve">
          <source>This test is mostly POSIX-compatible.</source>
          <target state="translated">这个测试主要是兼容POSIX的。</target>
        </trans-unit>
        <trans-unit id="44595c0d7ccfd8b4e39fcc6fb1c75e80391912f7" translate="yes" xml:space="preserve">
          <source>This tutorial assumes a basic understanding of command line shells and Unix commands, and that you have a working copy of &lt;code&gt;fish&lt;/code&gt;.</source>
          <target state="translated">本教程假定您对命令行shell和Unix命令有基本的了解，并且您具有 &lt;code&gt;fish&lt;/code&gt; 的有效副本。</target>
        </trans-unit>
        <trans-unit id="f48d5a2439da006a37325d3b33d3046473c20c81" translate="yes" xml:space="preserve">
          <source>This wide search may be confusing. If you are unsure where to put your own customisations, use &lt;code&gt;~/.config/fish/config.fish&lt;/code&gt;.</source>
          <target state="translated">这种广泛的搜索可能会造成混淆。如果不确定自己的自定义项放在何处，请使用 &lt;code&gt;~/.config/fish/config.fish&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="f358815973e2ad20875ee5c37318a06668178037" translate="yes" xml:space="preserve">
          <source>This wide search may be confusing. If you are unsure, your completions probably belong in &lt;code&gt;~/.config/fish/completions&lt;/code&gt;.</source>
          <target state="translated">这种广泛的搜索可能会造成混淆。如果不确定，您的完成工作可能属于 &lt;code&gt;~/.config/fish/completions&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="fc8f74e5e402cdc09fe9163449bdf559dd908a47" translate="yes" xml:space="preserve">
          <source>This wide search may be confusing. If you are unsure, your functions probably belong in &lt;code&gt;~/.config/fish/functions&lt;/code&gt;.</source>
          <target state="translated">这种广泛的搜索可能会造成混淆。如果不确定，您的功能可能属于 &lt;code&gt;~/.config/fish/functions&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="8a9195514b37c65c22f746374d557ac1c811b3ed" translate="yes" xml:space="preserve">
          <source>This will beep when the most recent job completes.</source>
          <target state="translated">当最近的工作完成时,会发出提示音。</target>
        </trans-unit>
        <trans-unit id="d275d705f3563e034e584f7f1416ca37d5829386" translate="yes" xml:space="preserve">
          <source>This will run the &lt;code&gt;mkdir&lt;/code&gt; command, and if it is successful, change the current working directory to the one just created.</source>
          <target state="translated">这将运行 &lt;code&gt;mkdir&lt;/code&gt; 命令，如果成功，请将当前工作目录更改为刚刚创建的目录。</target>
        </trans-unit>
        <trans-unit id="f891073aa4578597be2a0dcd4d98d094f936e0cd" translate="yes" xml:space="preserve">
          <source>To accept the autosuggestion (replacing the command line contents), press right arrow or &lt;em&gt;Control&lt;/em&gt;-&lt;b&gt;F&lt;/b&gt;. To accept the first suggested word, press &lt;em&gt;Alt&lt;/em&gt;-&lt;b&gt;&amp;rarr;&lt;/b&gt; or &lt;em&gt;Alt&lt;/em&gt;-&lt;b&gt;F&lt;/b&gt;. If the autosuggestion is not what you want, just ignore it: it won't execute unless you accept it.</source>
          <target state="translated">要接受自动提示（替换命令行内容），请按向右箭头或&lt;em&gt;Control&lt;/em&gt; - &lt;b&gt;F&lt;/b&gt;。要接受第一建议的单词，请按&lt;em&gt;Alt键&lt;/em&gt; - &lt;b&gt;&amp;rarr;&lt;/b&gt;或&lt;em&gt;Alt键&lt;/em&gt; - &lt;b&gt;˚F&lt;/b&gt;。如果自动建议不是您想要的，请忽略它：除非您接受，否则它不会执行。</target>
        </trans-unit>
        <trans-unit id="18bff7130ea79ac3d65a254db2e29fd6582707f0" translate="yes" xml:space="preserve">
          <source>To accept the autosuggestion, hit &lt;b&gt;&amp;rarr;&lt;/b&gt; or &lt;em&gt;Control&lt;/em&gt;-&lt;b&gt;F&lt;/b&gt;. To accept a single word of the autosuggestion, &lt;em&gt;Alt&lt;/em&gt;-&lt;b&gt;&amp;rarr;&lt;/b&gt; (right arrow). If the autosuggestion is not what you want, just ignore it.</source>
          <target state="translated">要接受自动建议，请按&lt;b&gt;&amp;rarr;&lt;/b&gt;或按&lt;em&gt;Control&lt;/em&gt; - &lt;b&gt;F&lt;/b&gt;。要接受自我暗示，一字一句&lt;em&gt;Alt键&lt;/em&gt; - &lt;b&gt;&amp;rarr;&lt;/b&gt;（右箭头）。如果自动建议不是您想要的，请忽略它。</target>
        </trans-unit>
        <trans-unit id="dd013ce2337c6820983e0fd191e213738ceadda7" translate="yes" xml:space="preserve">
          <source>To append standard error to a file, write &lt;code&gt;2&amp;gt;&amp;gt;DESTINATION_FILE&lt;/code&gt;</source>
          <target state="translated">要将标准错误附加到文件，请写入 &lt;code&gt;2&amp;gt;&amp;gt;DESTINATION_FILE&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="0108b6b821f16c26049be48e0e57d43670272afc" translate="yes" xml:space="preserve">
          <source>To append standard output to a file, write &lt;code&gt;&amp;gt;&amp;gt;DESTINATION_FILE&lt;/code&gt;</source>
          <target state="translated">要将标准输出附加到文件，请写入 &lt;code&gt;&amp;gt;&amp;gt;DESTINATION_FILE&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="9943d195413e31ff48e223d431261ac3888d43ba" translate="yes" xml:space="preserve">
          <source>To append the output of FD N to a file, write &lt;code&gt;N&amp;gt;&amp;gt;DESTINATION_FILE&lt;/code&gt;</source>
          <target state="translated">要将FD N的输出附加到文件，请写 &lt;code&gt;N&amp;gt;&amp;gt;DESTINATION_FILE&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="193736dda0ff3338bfe47b251780f85b63fdea40" translate="yes" xml:space="preserve">
          <source>To avoid this problem, consider changing the setting which fish inherits. If this is not possible, add a statement to your &lt;a href=&quot;index#&quot;&gt;user initialization file&lt;/a&gt; (usually &lt;code&gt;~/.config/fish/config.fish&lt;/code&gt;):</source>
          <target state="translated">为避免此问题，请考虑更改鱼类继承的设置。如果不可能，请在&lt;a href=&quot;index#&quot;&gt;用户初始化文件中&lt;/a&gt;添加一条语句（通常是 &lt;code&gt;~/.config/fish/config.fish&lt;/code&gt; ）：</target>
        </trans-unit>
        <trans-unit id="49e4d836110da227491a5f8bda022aa8c6061ef3" translate="yes" xml:space="preserve">
          <source>To change the number of characters per path component, set $fish_prompt_pwd_dir_length to the number of characters. Setting it to 0 or an invalid value will disable shortening entirely.</source>
          <target state="translated">要改变每个路径组件的字符数,请将$fish_prompt_pwd_dir_length设置为字符数。设置为0或无效值将完全禁止缩短。</target>
        </trans-unit>
        <trans-unit id="7c3563dd46a7946806ee797b7c244ebcbcfd652c" translate="yes" xml:space="preserve">
          <source>To compare strings or numbers or check file properties (whether a file exists or is writeable and such), use &lt;a href=&quot;commands#test&quot;&gt;test&lt;/a&gt;, like</source>
          <target state="translated">要比较字符串或数字或检查文件属性（文件是否存在或可写等），请使用&lt;a href=&quot;commands#test&quot;&gt;test&lt;/a&gt;，例如</target>
        </trans-unit>
        <trans-unit id="6a7f4987047f57b402d8e5f6d3639b704d77e210" translate="yes" xml:space="preserve">
          <source>To create a variable &lt;code&gt;smurf&lt;/code&gt;, containing the items &lt;code&gt;blue&lt;/code&gt; and &lt;code&gt;small&lt;/code&gt;, simply write:</source>
          <target state="translated">要创建一个变量 &lt;code&gt;smurf&lt;/code&gt; ，其中包含 &lt;code&gt;blue&lt;/code&gt; 和 &lt;code&gt;small&lt;/code&gt; ，只需编写：</target>
        </trans-unit>
        <trans-unit id="98a0be80bb6315e5a311feb69467eb89c6ebbff0" translate="yes" xml:space="preserve">
          <source>To customize the syntax highlighting, you can set the environment variables listed in the &lt;a href=&quot;index#variables-color&quot;&gt;Variables for changing highlighting colors&lt;/a&gt; section.</source>
          <target state="translated">要自定义语法突出显示，可以设置&amp;ldquo; &lt;a href=&quot;index#variables-color&quot;&gt;更改突出显示颜色&lt;/a&gt;的变量&amp;rdquo;部分中列出的环境变量。</target>
        </trans-unit>
        <trans-unit id="27cc6de064f425d626ab9949da6c184849b875b2" translate="yes" xml:space="preserve">
          <source>To easily create a function of this form, you can use the &lt;a href=&quot;commands#alias&quot;&gt;alias&lt;/a&gt; command.</source>
          <target state="translated">要轻松创建这种形式的功能，可以使用&lt;a href=&quot;commands#alias&quot;&gt;alias&lt;/a&gt;命令。</target>
        </trans-unit>
        <trans-unit id="86c65bf9fb8994e55d7d62a0a0233657bfd07c71" translate="yes" xml:space="preserve">
          <source>To get a listing of all currently started jobs, use the &lt;a href=&quot;commands#jobs&quot;&gt;&lt;code&gt;jobs&lt;/code&gt;&lt;/a&gt; command.</source>
          <target state="translated">要获得所有当前启动的作业的列表，请使用&lt;a href=&quot;commands#jobs&quot;&gt; &lt;code&gt;jobs&lt;/code&gt; &lt;/a&gt;命令。</target>
        </trans-unit>
        <trans-unit id="dfb97c4eee9e02bf1114c1290403e1dda007a114" translate="yes" xml:space="preserve">
          <source>To implement an alias, use the &lt;code&gt;-w&lt;/code&gt; or &lt;code&gt;--wraps&lt;/code&gt; option:</source>
          <target state="translated">要实现别名，请使用 &lt;code&gt;-w&lt;/code&gt; 或 &lt;code&gt;--wraps&lt;/code&gt; 选项：</target>
        </trans-unit>
        <trans-unit id="2897daf35873ca16d00ef5a1dac5a630b8c3c2e1" translate="yes" xml:space="preserve">
          <source>To make errors highlighted and red, use:</source>
          <target state="translated">要使错误高亮并显示为红色,请使用。</target>
        </trans-unit>
        <trans-unit id="d3fa292c2ab02a989c54851cc682dc196a6ed257" translate="yes" xml:space="preserve">
          <source>To not overwrite (&quot;clobber&quot;) an existing file, write '&amp;gt;?DESTINATION' or '2&amp;gt;?DESTINATION'</source>
          <target state="translated">要不覆盖（&amp;ldquo;更复杂&amp;rdquo;）现有文件，请写入&amp;ldquo;&amp;gt;？DESTINATION&amp;rdquo;或&amp;ldquo; 2&amp;gt;？DESTINATION&amp;rdquo;</target>
        </trans-unit>
        <trans-unit id="9ec5501ff931d8cf824481581d142283552d1be7" translate="yes" xml:space="preserve">
          <source>To prepend /usr/local/bin and /usr/sbin to &lt;code&gt;$PATH&lt;/code&gt;, you can write:</source>
          <target state="translated">要将/ usr / local / bin和/ usr / sbin放在 &lt;code&gt;$PATH&lt;/code&gt; ，可以编写：</target>
        </trans-unit>
        <trans-unit id="e4beb8ce6e29ccb991aceef2a82e88203ebcf1e6" translate="yes" xml:space="preserve">
          <source>To provide a list of possible completions for myprog, use the &lt;code&gt;-a&lt;/code&gt; switch. If &lt;code&gt;myprog&lt;/code&gt; accepts the arguments start and stop, this can be specified as &amp;lsquo;complete -c myprog -a 'start stop&amp;rsquo;&lt;code&gt;. The argument to the&lt;/code&gt;-a` switch is always a single string. At completion time, it will be tokenized on spaces and tabs, and variable expansion, command substitution and other forms of parameter expansion will take place.</source>
          <target state="translated">要提供myprog可能完成的列表，请使用 &lt;code&gt;-a&lt;/code&gt; 开关。如果 &lt;code&gt;myprog&lt;/code&gt; 接受参数start和stop，则可以将其指定为'complete -c myprog -a'start stop' &lt;code&gt;. The argument to the&lt;/code&gt; -a`开关的参数始终是单个字符串。在完成时，它将在空格和制表符上标记化，并且将进行变量扩展，命令替换和其他形式的参数扩展。</target>
        </trans-unit>
        <trans-unit id="e25d06bf926dcd36845db13c547e9060f688cf44" translate="yes" xml:space="preserve">
          <source>To read standard input from a file, write &lt;code&gt;&amp;lt;SOURCE_FILE&lt;/code&gt;</source>
          <target state="translated">要从文件中读取标准输入，请写入 &lt;code&gt;&amp;lt;SOURCE_FILE&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="efd4ccfede11d358f3540d606a3599db34a9bcee" translate="yes" xml:space="preserve">
          <source>To redirect both standard output and standard error to the file 'all_output.txt', you can write &lt;code&gt;echo Hello &amp;gt; all_output.txt 2&amp;gt;&amp;amp;1&lt;/code&gt;.</source>
          <target state="translated">要将标准输出和标准错误都重定向到文件&amp;ldquo; all_output.txt&amp;rdquo;，您可以编写 &lt;code&gt;echo Hello &amp;gt; all_output.txt 2&amp;gt;&amp;amp;1&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="2f9c19f996d0330cf3e69a9443cdf693a9354414" translate="yes" xml:space="preserve">
          <source>To redirect input of FD N, write &lt;code&gt;N&amp;lt;DESTINATION&lt;/code&gt;</source>
          <target state="translated">要重定向FD N的输入，请写入 &lt;code&gt;N&amp;lt;DESTINATION&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="1bceaef825c7c9262bebcb64ef18bc758682a29d" translate="yes" xml:space="preserve">
          <source>To redirect output of FD N, write &lt;code&gt;N&amp;gt;DESTINATION&lt;/code&gt;</source>
          <target state="translated">要重定向FD N的输出，请写入 &lt;code&gt;N&amp;gt;DESTINATION&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="752b3b48d45276169440be6784b7f3a0d12fbd09" translate="yes" xml:space="preserve">
          <source>To remove /usr/local/bin from &lt;code&gt;$PATH&lt;/code&gt;, you can write:</source>
          <target state="translated">要从 &lt;code&gt;$PATH&lt;/code&gt; 删除/ usr / local / bin ，您可以编写：</target>
        </trans-unit>
        <trans-unit id="b2510f1ad4da5cd52177add85db1eee2d566d8fe" translate="yes" xml:space="preserve">
          <source>To save custom keybindings, put the &lt;code&gt;bind&lt;/code&gt; statements into &lt;a href=&quot;index#initialization&quot;&gt;config.fish&lt;/a&gt;. Alternatively, fish also automatically executes a function called &lt;code&gt;fish_user_key_bindings&lt;/code&gt; if it exists.</source>
          <target state="translated">要保存自定义键绑定，请将 &lt;code&gt;bind&lt;/code&gt; 语句放入&lt;a href=&quot;index#initialization&quot;&gt;config.fish中&lt;/a&gt;。另外，fish也会自动执行一个称为 &lt;code&gt;fish_user_key_bindings&lt;/code&gt; 的函数（如果存在）。</target>
        </trans-unit>
        <trans-unit id="61901ecaf8e208e6ef9d0647eaddf669c1ca4bd8" translate="yes" xml:space="preserve">
          <source>To search for previous entries containing the word 'make', type &lt;code&gt;make&lt;/code&gt; in the console and press the up key.</source>
          <target state="translated">要搜索包含单词&amp;ldquo; make&amp;rdquo;的先前条目，请在控制台中键入 &lt;code&gt;make&lt;/code&gt; 并按向上键。</target>
        </trans-unit>
        <trans-unit id="4b5da07cf8e10869da36d0830cda73f0b82b9df0" translate="yes" xml:space="preserve">
          <source>To see universal variables in action, start two fish sessions side by side, and issue the following command in one of them &lt;code&gt;set fish_color_cwd blue&lt;/code&gt;. Since &lt;code&gt;fish_color_cwd&lt;/code&gt; is a universal variable, the color of the current working directory listing in the prompt will instantly change to blue on both terminals.</source>
          <target state="translated">要查看运行中的通用变量，请并排启动两个fish会话，然后在其中一个中发出以下命令 &lt;code&gt;set fish_color_cwd blue&lt;/code&gt; 。由于 &lt;code&gt;fish_color_cwd&lt;/code&gt; 是通用变量，因此提示中当前工作目录列表的颜色将在两个终端上立即变为蓝色。</target>
        </trans-unit>
        <trans-unit id="b44733fd0f7a6b3cff6f09a867502f4ea60ec37a" translate="yes" xml:space="preserve">
          <source>To separate a variable name from text encase the variable within double-quotes or braces.</source>
          <target state="translated">要将变量名与文本分开,请将变量名用双引号或大括号括起来。</target>
        </trans-unit>
        <trans-unit id="7e8052447e58d55b5e4f105d0ffa9d20ca69cabc" translate="yes" xml:space="preserve">
          <source>To set a variable value, use the &lt;a href=&quot;commands#set&quot;&gt;&lt;code&gt;set&lt;/code&gt; command&lt;/a&gt;. A variable name can not be empty and can contain only letters, digits, and underscores. It may begin and end with any of those characters.</source>
          <target state="translated">要设置变量值，请使用&lt;a href=&quot;commands#set&quot;&gt; &lt;code&gt;set&lt;/code&gt; 命令&lt;/a&gt;。变量名不能为空，只能包含字母，数字和下划线。它可以以任何这些字符开头和结尾。</target>
        </trans-unit>
        <trans-unit id="698d5831491bbb9701f405a1762b10b1e4e34b8d" translate="yes" xml:space="preserve">
          <source>To set the variable &lt;code&gt;smurf_color&lt;/code&gt; to the value &lt;code&gt;blue&lt;/code&gt;, use the command &lt;code&gt;set smurf_color blue&lt;/code&gt;.</source>
          <target state="translated">设置变量 &lt;code&gt;smurf_color&lt;/code&gt; 为值 &lt;code&gt;blue&lt;/code&gt; ，使用命令 &lt;code&gt;set smurf_color blue&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="bed9902ef9dec5f2285d68ae61ceccf41fb50e0a" translate="yes" xml:space="preserve">
          <source>To show the last command in the title:</source>
          <target state="translated">要显示标题中的最后一条命令。</target>
        </trans-unit>
        <trans-unit id="10b0cfc6463833f72da638ff9b75529f78df15de" translate="yes" xml:space="preserve">
          <source>To specify a signal handler for the WINCH signal, write:</source>
          <target state="translated">要指定WINCH信号的信号处理程序,请写。</target>
        </trans-unit>
        <trans-unit id="5271e92937f5c39aabd3c25c1ed834a98af6473a" translate="yes" xml:space="preserve">
          <source>To start a debug session simply run the builtin command &lt;code&gt;breakpoint&lt;/code&gt; at the point in a function or script where you wish to gain control. Also, the default action of the TRAP signal is to call this builtin. So a running script can be debugged by sending it the TRAP signal with the &lt;code&gt;kill&lt;/code&gt; command. Once in the debugger, it is easy to insert new breakpoints by using the funced function to edit the definition of a function.</source>
          <target state="translated">要启动调试会话，只需在函数或脚本中希望获得控制权的位置运行内置命令 &lt;code&gt;breakpoint&lt;/code&gt; 。同样，TRAP信号的默认操作是调用此内置函数。因此，可以通过使用 &lt;code&gt;kill&lt;/code&gt; 命令向其发送TRAP信号来调试正在运行的脚本。进入调试器后，可以通过使用funced函数编辑函数的定义来轻松插入新的断点。</target>
        </trans-unit>
        <trans-unit id="1ca038b49940b6708e8ae180bb586be833d5a8f7" translate="yes" xml:space="preserve">
          <source>To use a &quot;,&quot; as an element, &lt;a href=&quot;#quotes&quot;&gt;quote&lt;/a&gt; or &lt;a href=&quot;#escapes&quot;&gt;escape&lt;/a&gt; it.</source>
          <target state="translated">要将&amp;ldquo;，&amp;rdquo;用作元素，请对其进行&lt;a href=&quot;#quotes&quot;&gt;引用&lt;/a&gt;或&lt;a href=&quot;#escapes&quot;&gt;转义&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="4d1e2f58f1d1e885a6a557bd9d4d5d08b6944f6a" translate="yes" xml:space="preserve">
          <source>To use the value of the variable &lt;code&gt;smurf_color&lt;/code&gt;, write &lt;code&gt;$&lt;/code&gt; (dollar symbol) followed by the name of the variable, like &lt;code&gt;echo Smurfs are usually $smurf_color&lt;/code&gt;, which would print the result 'Smurfs are usually blue'.</source>
          <target state="translated">要使用变量 &lt;code&gt;smurf_color&lt;/code&gt; 的值，请写 &lt;code&gt;$&lt;/code&gt; （美元符号），后跟变量名，例如 &lt;code&gt;echo Smurfs are usually $smurf_color&lt;/code&gt; ，它将打印结果&amp;ldquo; Smurfs通常是蓝色&amp;rdquo;。</target>
        </trans-unit>
        <trans-unit id="68bccd38cdde729f08d1dabeb1a907eb895c4a23" translate="yes" xml:space="preserve">
          <source>To write standard error to a file, write &lt;code&gt;2&amp;gt;DESTINATION&lt;/code&gt;</source>
          <target state="translated">要将标准错误写入文件，请写入 &lt;code&gt;2&amp;gt;DESTINATION&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="659acd568f9529fe70705f8989914717371b557a" translate="yes" xml:space="preserve">
          <source>To write standard output to a file, write &lt;code&gt;&amp;gt;DESTINATION&lt;/code&gt;</source>
          <target state="translated">要将标准输出写入文件，请写 &lt;code&gt;&amp;gt;DESTINATION&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="73b0536304b40903244a528081e1fdc688374119" translate="yes" xml:space="preserve">
          <source>To write them on the same line, use the semicolon (&quot;;&quot;). That means the following two examples are equivalent:</source>
          <target state="translated">要将它们写在同一行,请使用分号(&quot;;&quot;)。这意味着下面的两个例子是等价的。</target>
        </trans-unit>
        <trans-unit id="8a17b293eb79b591812fbe348e1ab2d33402a845" translate="yes" xml:space="preserve">
          <source>Try hitting tab and see what &lt;code&gt;fish&lt;/code&gt; can do!</source>
          <target state="translated">尝试点击选项卡，看看 &lt;code&gt;fish&lt;/code&gt; 能做什么！</target>
        </trans-unit>
        <trans-unit id="fb05e0051333734c4ad4030d178c0e59ac5682e1" translate="yes" xml:space="preserve">
          <source>Turns on Vi key bindings and rebinds &lt;em&gt;Control&lt;/em&gt;-&lt;b&gt;C&lt;/b&gt; to clear the input line.</source>
          <target state="translated">打开Vi键绑定并重新绑定&lt;em&gt;Control&lt;/em&gt; - &lt;b&gt;C&lt;/b&gt;以清除输入行。</target>
        </trans-unit>
        <trans-unit id="2701a94c0eb55cbd958a87dff3e959673ff1bf53" translate="yes" xml:space="preserve">
          <source>Tutorial</source>
          <target state="translated">Tutorial</target>
        </trans-unit>
        <trans-unit id="cddfd60fdd3770f95874832546e909dcebf4b486" translate="yes" xml:space="preserve">
          <source>Type some part of the command, and then hit the &lt;b&gt;&amp;uarr;&lt;/b&gt; or &lt;b&gt;&amp;darr;&lt;/b&gt; arrow keys to navigate through history matches.</source>
          <target state="translated">键入命令的某些部分，然后按&lt;b&gt;&amp;uarr;&lt;/b&gt;或&lt;b&gt;&amp;darr;&lt;/b&gt;箭头键浏览历史记录匹配项。</target>
        </trans-unit>
        <trans-unit id="d5c2f3a388810326308a4cf0f9d12d94e467f941" translate="yes" xml:space="preserve">
          <source>Undefined and empty variables expand to nothing.</source>
          <target state="translated">未定义的和空的变量扩展为零。</target>
        </trans-unit>
        <trans-unit id="7f54feaec318be95b0574260bf420fada9f4de3f" translate="yes" xml:space="preserve">
          <source>Unfortunately, there is no way to make the changes take effect at once. You will need to log out and back in again.</source>
          <target state="translated">遗憾的是,没有办法让这些更改立即生效。你需要先登出,然后再重新登录。</target>
        </trans-unit>
        <trans-unit id="145a9952034e76af8265b97c5e75a18c616e70d3" translate="yes" xml:space="preserve">
          <source>Unicode private-use characters reserved by fish</source>
          <target state="translated">鱼儿保留的Unicode私用字符</target>
        </trans-unit>
        <trans-unit id="e1607dfd6b696cdd21b339099c2b8ec1f42324b3" translate="yes" xml:space="preserve">
          <source>Uninstalling fish</source>
          <target state="translated">卸载鱼</target>
        </trans-unit>
        <trans-unit id="b034e228b90d3e971c38c185d9c173b9fad3cb92" translate="yes" xml:space="preserve">
          <source>Universal Variables</source>
          <target state="translated">通用变量</target>
        </trans-unit>
        <trans-unit id="0ad651b3b2a50ae7d1ebd0a6ea4647b1fc3c39a6" translate="yes" xml:space="preserve">
          <source>Universal variables are variables that are shared between all the users' fish sessions on the computer. Fish stores many of its configuration options as universal variables. This means that in order to change fish settings, all you have to do is change the variable value once, and it will be automatically updated for all sessions, and preserved across computer reboots and login/logout.</source>
          <target state="translated">通用变量是计算机上所有用户的fish会话之间共享的变量。Fish将许多配置选项存储为通用变量。这意味着,为了改变Fish的设置,你只需要改变一次变量值,它就会在所有会话中自动更新,并在计算机重启和登录/登出时保存。</target>
        </trans-unit>
        <trans-unit id="44adc92f43c50d7e6bc38161bddc8ab76986e3b8" translate="yes" xml:space="preserve">
          <source>Unlike &lt;code&gt;echo&lt;/code&gt;, &lt;code&gt;printf&lt;/code&gt; does not append a new line unless it is specified as part of the string.</source>
          <target state="translated">与 &lt;code&gt;echo&lt;/code&gt; 不同， &lt;code&gt;printf&lt;/code&gt; 不会追加新行，除非将其指定为字符串的一部分。</target>
        </trans-unit>
        <trans-unit id="80688e6bfe64112d0b40126d6899beb59a720d8b" translate="yes" xml:space="preserve">
          <source>Unlike all other expanions, variable expansion also happens in double quoted strings. Inside double quotes (&lt;code&gt;&quot;these&quot;&lt;/code&gt;), variables will always expand to exactly one argument. If they are empty or undefined, it will result in an empty string. If they have one element, they'll expand to that element. If they have more than that, the elements will be joined with spaces.</source>
          <target state="translated">与所有其他扩展不同，变量扩展也以双引号引起来。在双引号（ &lt;code&gt;&quot;these&quot;&lt;/code&gt; ）中，变量将始终扩展为正好一个参数。如果它们为空或未定义，将导致一个空字符串。如果它们具有一个元素，它们将扩展到该元素。如果它们不止于此，则元素将以空格连接。</target>
        </trans-unit>
        <trans-unit id="ae2292eead056d06d02e28adb305ab1fa7a4ec35" translate="yes" xml:space="preserve">
          <source>Unlike other shells, &lt;code&gt;fish&lt;/code&gt; does not have aliases or special prompt syntax. Functions take their place.</source>
          <target state="translated">与其他shell不同， &lt;code&gt;fish&lt;/code&gt; 没有别名或特殊提示语法。功能取而代之。</target>
        </trans-unit>
        <trans-unit id="081f5baca42ff8efaa02caf11115f980ca88911b" translate="yes" xml:space="preserve">
          <source>Unlike other shells, &lt;code&gt;fish&lt;/code&gt; does not have an export command. Instead, a variable is exported via an option to &lt;code&gt;set&lt;/code&gt;, either &lt;code&gt;--export&lt;/code&gt; or just &lt;code&gt;-x&lt;/code&gt;.</source>
          <target state="translated">与其他贝壳不同， &lt;code&gt;fish&lt;/code&gt; 没有出口命令。取而代之的是，一个变量通过一个选项来导出 &lt;code&gt;set&lt;/code&gt; ，要么 &lt;code&gt;--export&lt;/code&gt; 或只是 &lt;code&gt;-x&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="eee0d0201f0eeaf8c0900eea9c927bb9f91321d9" translate="yes" xml:space="preserve">
          <source>Unlike other shells, &lt;code&gt;fish&lt;/code&gt; has no dedicated syntax for setting variables. Instead it has an ordinary command: &lt;code&gt;set&lt;/code&gt;, which takes a variable name, and then its value.</source>
          <target state="translated">与其他shell不同， &lt;code&gt;fish&lt;/code&gt; 没有用于设置变量的专用语法。相反，它具有一个普通命令： &lt;code&gt;set&lt;/code&gt; ，它接受一个变量名，然后是它的值。</target>
        </trans-unit>
        <trans-unit id="a37e511dd2f26fdeffb3863f66e1a1c929cfac6a" translate="yes" xml:space="preserve">
          <source>Unlike other shells, &lt;code&gt;fish&lt;/code&gt; stores the exit status of the last command in &lt;code&gt;$status&lt;/code&gt; instead of &lt;code&gt;$?&lt;/code&gt;.</source>
          <target state="translated">与其他shell不同， &lt;code&gt;fish&lt;/code&gt; 将最后一个命令的退出状态存储在 &lt;code&gt;$status&lt;/code&gt; 而不是 &lt;code&gt;$?&lt;/code&gt; 中。。</target>
        </trans-unit>
        <trans-unit id="3af21d9e6a82afb93e7644e0365cdc2669f846f5" translate="yes" xml:space="preserve">
          <source>Unlike other shells, fish does not split command substitutions on any whitespace (like spaces or tabs), only newlines. This can be an issue with commands like &lt;code&gt;pkg-config&lt;/code&gt; that print what is meant to be multiple arguments on a single line. To split it on spaces too, use &lt;code&gt;string split&lt;/code&gt;.</source>
          <target state="translated">与其他外壳程序不同，fish不会在任何空格（例如空格或制表符）上拆分命令替换项，而仅拆分换行符。这可能与 &lt;code&gt;pkg-config&lt;/code&gt; 之类的命令会产生问题，这些命令在一行上打印意味着多个参数的内容。要在空格上也进行 &lt;code&gt;string split&lt;/code&gt; ，请使用字符串split。</target>
        </trans-unit>
        <trans-unit id="51633ed047475ca6ce896f07a0b3e652915476f4" translate="yes" xml:space="preserve">
          <source>Unlike other shells, fish splits command substitutions only on newlines, not spaces or tabs or the characters in $IFS.</source>
          <target state="translated">与其他shell不同的是,fish只在换行符上拆分命令替换,而不是空格、制表符或$IFS中的字符。</target>
        </trans-unit>
        <trans-unit id="2e36f8ffbac36ebebd737db0d45fea3f73bea9ee" translate="yes" xml:space="preserve">
          <source>Unlike other shells, there is no prompt variable like PS1. To display your prompt, &lt;code&gt;fish&lt;/code&gt; executes a function with the name &lt;code&gt;fish_prompt&lt;/code&gt;, and its output is used as the prompt.</source>
          <target state="translated">与其他shell不同，没有像PS1这样的提示变量。为了显示提示， &lt;code&gt;fish&lt;/code&gt; 将执行一个名为 &lt;code&gt;fish_prompt&lt;/code&gt; 的函数，并将其输出用作提示。</target>
        </trans-unit>
        <trans-unit id="dd1f16e81556a309c131d3f6b2ba87b84eb31d62" translate="yes" xml:space="preserve">
          <source>Unlike other shells, variables are not further split after substitution:</source>
          <target state="translated">与其他壳不同的是,变量在替换后不会被进一步拆分。</target>
        </trans-unit>
        <trans-unit id="0bb18642b70b9f8a9c12ccf39487328f306b8e19" translate="yes" xml:space="preserve">
          <source>Usage</source>
          <target state="translated">Usage</target>
        </trans-unit>
        <trans-unit id="4df13ec4234f96a6f1f82fccdde77669b4c4b95c" translate="yes" xml:space="preserve">
          <source>Usage Notes</source>
          <target state="translated">使用说明</target>
        </trans-unit>
        <trans-unit id="d74b204180b301da11db45838e08032a0d957c03" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;if&lt;/code&gt;, &lt;code&gt;else if&lt;/code&gt;, and &lt;code&gt;else&lt;/code&gt; to conditionally execute code, based on the exit status of a command.</source>
          <target state="translated">根据命令的退出状态，使用 &lt;code&gt;if&lt;/code&gt; ， &lt;code&gt;else if&lt;/code&gt; 和 &lt;code&gt;else&lt;/code&gt; 有条件地执行代码。</target>
        </trans-unit>
        <trans-unit id="eb181080b44029a3622b4ef5a70c42d2deefdef1" translate="yes" xml:space="preserve">
          <source>Use one of the following switches to specify which resource limit to set or report:</source>
          <target state="translated">使用以下开关之一指定要设置或报告的资源限制。</target>
        </trans-unit>
        <trans-unit id="454bd477b983f01843d0ef8db935e66528a0a530" translate="yes" xml:space="preserve">
          <source>Use the &lt;a href=&quot;commands#fish_update_completions&quot;&gt;&lt;code&gt;fish_update_completions&lt;/code&gt;&lt;/a&gt; command.</source>
          <target state="translated">使用&lt;a href=&quot;commands#fish_update_completions&quot;&gt; &lt;code&gt;fish_update_completions&lt;/code&gt; &lt;/a&gt;命令。</target>
        </trans-unit>
        <trans-unit id="173607f929222a6b2423c5f7cb2482dcefe3fd4d" translate="yes" xml:space="preserve">
          <source>Use the &lt;a href=&quot;commands#set&quot;&gt;&lt;code&gt;set&lt;/code&gt;&lt;/a&gt; command:</source>
          <target state="translated">使用&lt;a href=&quot;commands#set&quot;&gt; &lt;code&gt;set&lt;/code&gt; &lt;/a&gt;命令：</target>
        </trans-unit>
        <trans-unit id="a070d11e8f9357b2f82f012cf1cbf197f82d8186" translate="yes" xml:space="preserve">
          <source>Use the &lt;code&gt;$status&lt;/code&gt; variable. This replaces the &lt;code&gt;$?&lt;/code&gt; variable used in some other shells.</source>
          <target state="translated">使用 &lt;code&gt;$status&lt;/code&gt; 变量。这代替 &lt;code&gt;$?&lt;/code&gt; 在其他一些shell中使用的变量。</target>
        </trans-unit>
        <trans-unit id="31c238ddde1e3a389d384b0e3b72354aef7e4403" translate="yes" xml:space="preserve">
          <source>Use the &lt;code&gt;env&lt;/code&gt; command.</source>
          <target state="translated">使用 &lt;code&gt;env&lt;/code&gt; 命令。</target>
        </trans-unit>
        <trans-unit id="0411e393ae78c9f8172fc0b2dbacdfcc91e4286c" translate="yes" xml:space="preserve">
          <source>Use the web configuration tool, &lt;a href=&quot;commands#fish_config&quot;&gt;&lt;code&gt;fish_config&lt;/code&gt;&lt;/a&gt;, or alter the &lt;a href=&quot;index#variables-color&quot;&gt;&lt;code&gt;fish_color&lt;/code&gt; family of environment variables&lt;/a&gt;.</source>
          <target state="translated">使用Web配置工具&lt;a href=&quot;commands#fish_config&quot;&gt; &lt;code&gt;fish_config&lt;/code&gt; &lt;/a&gt;或更改&lt;a href=&quot;index#variables-color&quot;&gt; &lt;code&gt;fish_color&lt;/code&gt; 系列环境变量&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="60f35ccc6241ede38ff1ff41aa11e4d625890b21" translate="yes" xml:space="preserve">
          <source>Use them without a leading &lt;code&gt;$&lt;/code&gt; - &lt;code&gt;pi - 3&lt;/code&gt; should be about 0.</source>
          <target state="translated">使用它们没有前置 &lt;code&gt;$&lt;/code&gt; - &lt;code&gt;pi - 3&lt;/code&gt; 应约0。</target>
        </trans-unit>
        <trans-unit id="0cae9ed3f91cf8ab384b29a4865d0861615ac352" translate="yes" xml:space="preserve">
          <source>Useful functions for writing completions</source>
          <target state="translated">有用的补写功能</target>
        </trans-unit>
        <trans-unit id="da533743f0159eea920a315a90c8751cf23609aa" translate="yes" xml:space="preserve">
          <source>User initialization, usually in &lt;code&gt;~/.config/fish/config.fish&lt;/code&gt; (controlled by the &lt;code&gt;XDG_CONFIG_HOME&lt;/code&gt; environment variable, and accessible as &lt;code&gt;$__fish_config_dir&lt;/code&gt;).</source>
          <target state="translated">用户初始化，通常在 &lt;code&gt;~/.config/fish/config.fish&lt;/code&gt; （由 &lt;code&gt;XDG_CONFIG_HOME&lt;/code&gt; 环境变量控制，可通过 &lt;code&gt;$__fish_config_dir&lt;/code&gt; 访问）。</target>
        </trans-unit>
        <trans-unit id="7ab03bad0e4c29694da24c66d0dfd6218d876cd9" translate="yes" xml:space="preserve">
          <source>Using another read history file</source>
          <target state="translated">使用另一个读取历史文件</target>
        </trans-unit>
        <trans-unit id="b73b7dbea87b71c6a8e64d7b592b0efded7f191c" translate="yes" xml:space="preserve">
          <source>Using the &lt;em&gt;normal&lt;/em&gt; keyword will reset both background and foreground colors to whatever is the default for the terminal.</source>
          <target state="translated">使用&lt;em&gt;normal&lt;/em&gt;关键字会将背景色和前景色重置为终端的默认值。</target>
        </trans-unit>
        <trans-unit id="01391f93ace379e5306ef34014cfa60be33aafe9" translate="yes" xml:space="preserve">
          <source>Using the &lt;em&gt;normal&lt;/em&gt; keyword will reset foreground, background, and all formatting back to default.</source>
          <target state="translated">使用&lt;em&gt;normal&lt;/em&gt;关键字会将前景，背景和所有格式重置为默认值。</target>
        </trans-unit>
        <trans-unit id="f3b2ac121de4ce08e07778437bf30ed6cd6b55da" translate="yes" xml:space="preserve">
          <source>Using this command involves passing two sets of arguments separated by &lt;code&gt;--&lt;/code&gt;. The first set consists of one or more option specifications (&lt;code&gt;OPTION_SPEC&lt;/code&gt; above) and options that modify the behavior of &lt;code&gt;argparse&lt;/code&gt;. These must be listed before the &lt;code&gt;--&lt;/code&gt; argument. The second set are the arguments to be parsed in accordance with the option specifications. They occur after the &lt;code&gt;--&lt;/code&gt; argument and can be empty. More about this below but here is a simple example that might be used in a function named &lt;code&gt;my_function&lt;/code&gt;:</source>
          <target state="translated">使用此命令涉及传递以 &lt;code&gt;--&lt;/code&gt; 分隔的两组参数。第一组包括一个或多个选项规范（上面的 &lt;code&gt;OPTION_SPEC&lt;/code&gt; ）和修改 &lt;code&gt;argparse&lt;/code&gt; 行为的选项。这些必须在 &lt;code&gt;--&lt;/code&gt; 参数之前列出。第二组是根据选项规范要解析的参数。它们出现在 &lt;code&gt;--&lt;/code&gt; 参数之后，可以为空。有关此的更多信息，但这是一个简单的示例，可以在名为 &lt;code&gt;my_function&lt;/code&gt; 的函数中使用：</target>
        </trans-unit>
        <trans-unit id="f09d5d78e534ac9eee0414d7d7a0fb24af84d370" translate="yes" xml:space="preserve">
          <source>Valid colors include:</source>
          <target state="translated">有效颜色包括:</target>
        </trans-unit>
        <trans-unit id="95b8e49e0a4f7e7d23df31b6c1eedc2a79d60c67" translate="yes" xml:space="preserve">
          <source>Valid format specifiers are:</source>
          <target state="translated">有效的格式说明者是:</target>
        </trans-unit>
        <trans-unit id="047ea2f72ce834a5cd86fc46331f14acbb3f9954" translate="yes" xml:space="preserve">
          <source>Variable expansion</source>
          <target state="translated">可变膨胀</target>
        </trans-unit>
        <trans-unit id="e2eb91d2e9dd9d2efdc78a2c535e066657ae307e" translate="yes" xml:space="preserve">
          <source>Variable expansions</source>
          <target state="translated">可变式扩张</target>
        </trans-unit>
        <trans-unit id="69cd2e4d36065246c043d32da81f65b5ec76feab" translate="yes" xml:space="preserve">
          <source>Variable scope</source>
          <target state="translated">可变范围</target>
        </trans-unit>
        <trans-unit id="f2ffbf1cf26a2aeca0a92264405ee06ceed33e13" translate="yes" xml:space="preserve">
          <source>Variable scope for functions</source>
          <target state="translated">职能范围可变</target>
        </trans-unit>
        <trans-unit id="d3800988cc67ea9f9ae70495ad31314d7a633d64" translate="yes" xml:space="preserve">
          <source>Variable substitution also occurs in double quotes, but not single quotes:</source>
          <target state="translated">变量替换也会出现在双引号中,但不会出现单引号。</target>
        </trans-unit>
        <trans-unit id="ac018db1f7b00972061adff843d37497d8ee153c" translate="yes" xml:space="preserve">
          <source>Variables</source>
          <target state="translated">Variables</target>
        </trans-unit>
        <trans-unit id="dc55a791f0556b1e2c98faf060801c75b48b8e87" translate="yes" xml:space="preserve">
          <source>Variables can be explicitly set to be exported with the &lt;code&gt;-x&lt;/code&gt; or &lt;code&gt;--export&lt;/code&gt; switch, or not exported with the &lt;code&gt;-u&lt;/code&gt; or &lt;code&gt;--unexport&lt;/code&gt; switch. The exporting rules when creating or updating a variable are identical to the scoping rules for variables:</source>
          <target state="translated">可以将变量显式设置为使用 &lt;code&gt;-x&lt;/code&gt; 或 &lt;code&gt;--export&lt;/code&gt; 开关导出，或不使用 &lt;code&gt;-u&lt;/code&gt; 或 &lt;code&gt;--unexport&lt;/code&gt; 开关导出。创建或更新变量时的导出规则与变量的范围规则相同：</target>
        </trans-unit>
        <trans-unit id="8caf7a3931edf651d5c0eb5b032760d30623081d" translate="yes" xml:space="preserve">
          <source>Variables can be explicitly set to be universal with the &lt;code&gt;-U&lt;/code&gt; or &lt;code&gt;--universal&lt;/code&gt; switch, global with the &lt;code&gt;-g&lt;/code&gt; or &lt;code&gt;--global&lt;/code&gt; switch, or local with the &lt;code&gt;-l&lt;/code&gt; or &lt;code&gt;--local&lt;/code&gt; switch. The scoping rules when creating or updating a variable are:</source>
          <target state="translated">可以使用 &lt;code&gt;-U&lt;/code&gt; 或 &lt;code&gt;--universal&lt;/code&gt; 开关将变量显式设置为通用变量，使用 &lt;code&gt;-g&lt;/code&gt; 或 &lt;code&gt;--global&lt;/code&gt; 开关将变量全局设置，或使用 &lt;code&gt;-l&lt;/code&gt; 或 &lt;code&gt;--local&lt;/code&gt; 开关局部变量。创建或更新变量时的作用域规则是：</target>
        </trans-unit>
        <trans-unit id="866a24aa0e9eb8db8b30498e951c623e32e65a14" translate="yes" xml:space="preserve">
          <source>Variables can be marked or unmarked as PATH variables via the &lt;code&gt;--path&lt;/code&gt; and &lt;code&gt;--unpath&lt;/code&gt; options to &lt;code&gt;set&lt;/code&gt;.</source>
          <target state="translated">变量可以被标记或未标记经由PATH变量 &lt;code&gt;--path&lt;/code&gt; 和 &lt;code&gt;--unpath&lt;/code&gt; 选项 &lt;code&gt;set&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="81a1e4b50937d575e7941efe7d24b3e8887251ba" translate="yes" xml:space="preserve">
          <source>Variables can be used as indices for expansion of variables, like so:</source>
          <target state="translated">变量可以作为扩展变量的指数,像这样。</target>
        </trans-unit>
        <trans-unit id="d13d8872f2b85622ec05b4faa321ef701163466e" translate="yes" xml:space="preserve">
          <source>Variables for changing highlighting colors</source>
          <target state="translated">用于改变高光颜色的变量</target>
        </trans-unit>
        <trans-unit id="021a38b749711c430ab7b97416e1e7f42bc63ab2" translate="yes" xml:space="preserve">
          <source>Variables in fish can be exported. This means the variable will be inherited by any commands started by fish. It is convention that exported variables are in uppercase and unexported variables are in lowercase.</source>
          <target state="translated">fish中的变量可以被导出。这意味着该变量将被fish启动的任何命令所继承。按照惯例,导出的变量用大写,未导出的变量用小写。</target>
        </trans-unit>
        <trans-unit id="8b7277f6927f4830af2060ea99b89d5f43313327" translate="yes" xml:space="preserve">
          <source>Variables may be explicitly set to either exported or not exported. When an exported variable goes out of scope, it is unexported.</source>
          <target state="translated">变量可以被明确地设置为导出或不导出。当一个已导出的变量超出范围时,它将不被导出。</target>
        </trans-unit>
        <trans-unit id="5daf675f51e0dc0a7ce5d91db9146d3208ab170c" translate="yes" xml:space="preserve">
          <source>Variables may be explicitly set to universal, global or local. Variables with the same name in different scopes will not be changed.</source>
          <target state="translated">变量可以明确设置为通用、全局或局部。在不同范围内名称相同的变量将不会被改变。</target>
        </trans-unit>
        <trans-unit id="4a88384607868c891caaae0411d761359e4f6ef5" translate="yes" xml:space="preserve">
          <source>Variables whose name are in uppercase are generally exported to the commands started by fish, while those in lowercase are not exported (&lt;code&gt;CMD_DURATION&lt;/code&gt; is an exception, for historical reasons). This rule is not enforced by fish, but it is good coding practice to use casing to distinguish between exported and unexported variables. &lt;code&gt;fish&lt;/code&gt; also uses several variables internally. Such variables are prefixed with the string &lt;code&gt;__FISH&lt;/code&gt; or &lt;code&gt;__fish.&lt;/code&gt; These should never be used by the user. Changing their value may break fish.</source>
          <target state="translated">名称大写的变量通常导出到fish启动的命令中，而小写的 &lt;code&gt;CMD_DURATION&lt;/code&gt; 则不导出（出于历史原因，CMD_DURATION是个例外）。鱼不会执行此规则，但是使用大小写区分输出变量和未输出变量是一种良好的编码习惯。 &lt;code&gt;fish&lt;/code&gt; 还内部使用了几个变量。此类变量的前缀为字符串 &lt;code&gt;__FISH&lt;/code&gt; 或 &lt;code&gt;__fish.&lt;/code&gt; 用户切勿使用它们。改变它们的价值可能会破坏鱼类。</target>
        </trans-unit>
        <trans-unit id="8de6cda0a76daf29c82a8e5cb8b2ed185cd03414" translate="yes" xml:space="preserve">
          <source>Vi mode allows for the use of Vi-like commands at the prompt. Initially, &lt;a href=&quot;#vi-mode-insert&quot;&gt;insert mode&lt;/a&gt; is active. &lt;b&gt;Escape&lt;/b&gt; enters &lt;a href=&quot;#vi-mode-command&quot;&gt;command mode&lt;/a&gt;. The commands available in command, insert and visual mode are described below. Vi mode shares &lt;a href=&quot;#shared-binds&quot;&gt;some bindings&lt;/a&gt; with &lt;a href=&quot;#emacs-mode&quot;&gt;Emacs mode&lt;/a&gt;.</source>
          <target state="translated">Vi模式允许在提示符下使用类似Vi的命令。最初，&lt;a href=&quot;#vi-mode-insert&quot;&gt;插入模式&lt;/a&gt;处于活动状态。&lt;b&gt;转义&lt;/b&gt;进入&lt;a href=&quot;#vi-mode-command&quot;&gt;命令模式&lt;/a&gt;。在命令，插入和可视模式下可用的命令如下所述。 Vi模式与&lt;a href=&quot;#emacs-mode&quot;&gt;Emacs模式&lt;/a&gt;共享&lt;a href=&quot;#shared-binds&quot;&gt;一些绑定&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="fc7edfc16e4d70682dbbf7a6226979a31fd0ad3e" translate="yes" xml:space="preserve">
          <source>Vi mode commands</source>
          <target state="translated">Vi命令模式</target>
        </trans-unit>
        <trans-unit id="5fb895569dd30157f331b4727bbce633510ff8ba" translate="yes" xml:space="preserve">
          <source>Visual mode</source>
          <target state="translated">视觉模式</target>
        </trans-unit>
        <trans-unit id="31e1f6a5be94b9a7630dae992d9a626fc08b6ea1" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;-a&lt;/code&gt; or &lt;code&gt;--arguments&lt;/code&gt; is specified in conjunction with long, short, or old style options, the specified arguments are only used as completions when attempting to complete an argument for any of the specified options. If &lt;code&gt;-a&lt;/code&gt; or &lt;code&gt;--arguments&lt;/code&gt; is specified without any long, short, or old style options, the specified arguments are used when completing any argument to the command (except when completing an option argument that was specified with &lt;code&gt;-r&lt;/code&gt; or &lt;code&gt;--require-parameter&lt;/code&gt;).</source>
          <target state="translated">当将 &lt;code&gt;-a&lt;/code&gt; 或 &lt;code&gt;--arguments&lt;/code&gt; 与long，short或old样式选项一起指定时，指定的参数仅在尝试完成任何指定选项的参数时才用作补全。如果指定了 &lt;code&gt;-a&lt;/code&gt; 或 &lt;code&gt;--arguments&lt;/code&gt; 而没有任何长，短或旧样式选项，则在完成命令的任何参数时都将使用指定的参数（除非完成由 &lt;code&gt;-r&lt;/code&gt; 或 &lt;code&gt;--require-parameter&lt;/code&gt; 指定的选项参数时）参数）。</target>
        </trans-unit>
        <trans-unit id="2505ca259992c20f2e115bd87371ef8405dc9f79" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;COMMAND&lt;/code&gt; is a shellscript command, it is a good practice to put the actual code into a &lt;a href=&quot;#function&quot;&gt;function&lt;/a&gt; and simply bind to the function name. This way it becomes significantly easier to test the function while editing, and the result is usually more readable as well.</source>
          <target state="translated">当 &lt;code&gt;COMMAND&lt;/code&gt; 是shellscript命令时，将实际代码放入&lt;a href=&quot;#function&quot;&gt;函数中&lt;/a&gt;并简单地绑定到函数名是一个好习惯。这样，在编辑时测试该功能变得非常容易，结果通常也更易读。</target>
        </trans-unit>
        <trans-unit id="0b61f14b6442d9d89b8d8fa699d95bbd93af2c25" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;fish&lt;/code&gt; encounters a command, it attempts to autoload a function for that command, by looking for a file with the name of that command in &lt;code&gt;~/.config/fish/functions/&lt;/code&gt;.</source>
          <target state="translated">当 &lt;code&gt;fish&lt;/code&gt; 遇到命令时，它会通过在 &lt;code&gt;~/.config/fish/functions/&lt;/code&gt; 查找具有该命令名称的文件来尝试自动加载该命令的功能。</target>
        </trans-unit>
        <trans-unit id="80ac01474d96293d4e91964bb2b3037356d135af" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;read&lt;/code&gt; reaches the end-of-file (EOF) instead of the terminator, the exit status is set to 1. Otherwise, it is set to 0.</source>
          <target state="translated">当 &lt;code&gt;read&lt;/code&gt; 到达文件末尾（EOF）而不是终止符时，退出状态设置为1。否则，设置为0。</target>
        </trans-unit>
        <trans-unit id="f91db4fb609ae3c10e05da51ef90890379f33f5d" translate="yes" xml:space="preserve">
          <source>When a command lookup fails</source>
          <target state="translated">当命令查找失败时</target>
        </trans-unit>
        <trans-unit id="a64df52b82b6680cee5d07a9157923c1c477f30d" translate="yes" xml:space="preserve">
          <source>When a process or job exits</source>
          <target state="translated">当一个流程或作业退出时</target>
        </trans-unit>
        <trans-unit id="1b00bfa449d40b6151effb4cc0facd22af7b0736" translate="yes" xml:space="preserve">
          <source>When a signal is delivered</source>
          <target state="translated">当一个信号被传送时</target>
        </trans-unit>
        <trans-unit id="3f06f0c49199bffd6092463385d2eaaf34e91888" translate="yes" xml:space="preserve">
          <source>When all arguments are valid job specifiers, bg will background all matching jobs that exist.</source>
          <target state="translated">当所有参数都是有效的作业指定符时,bg将对所有存在的匹配作业进行后台操作。</target>
        </trans-unit>
        <trans-unit id="24bda0993bf1f284e0377d7559e36d7befb31f8a" translate="yes" xml:space="preserve">
          <source>When an argument for a program is given on the commandline, it undergoes the process of parameter expansion before it is sent on to the command. Parameter expansion is a powerful mechanism that allows you to expand the parameter in various ways, including performing wildcard matching on files, inserting the value of a shell variable into the parameter or even using the output of another command as a parameter list.</source>
          <target state="translated">当在命令行上给出一个程序的参数时,它在被发送到命令上之前要经过参数扩展的过程。参数扩展是一种强大的机制,它允许你以各种方式扩展参数,包括对文件进行通配符匹配,将shell变量的值插入参数中,甚至将其他命令的输出作为参数列表。</target>
        </trans-unit>
        <trans-unit id="51d4ef16c4e522527f31c576578d19308f006fec" translate="yes" xml:space="preserve">
          <source>When an array is exported as an environment variable, it is either space or colon delimited, depending on whether it is a path variable:</source>
          <target state="translated">当一个数组被导出为环境变量时,它是以空格或冒号分隔的,这取决于它是否是一个路径变量。</target>
        </trans-unit>
        <trans-unit id="083625467bc7bf4cd25dc54b2e5d0f68812dc076" translate="yes" xml:space="preserve">
          <source>When at least one of the arguments isn't a valid job specifier (i.e. PID), &lt;code&gt;bg&lt;/code&gt; will print an error without backgrounding anything.</source>
          <target state="translated">当至少一个参数不是有效的作业说明符（即PID）时， &lt;code&gt;bg&lt;/code&gt; 将打印错误而不带背景。</target>
        </trans-unit>
        <trans-unit id="a37e1f3259f6cdbb079115ac56119f8c19560a48" translate="yes" xml:space="preserve">
          <source>When calling a function, all current local variables temporarily disappear. This shadowing of the local scope is needed since the variable namespace would become cluttered, making it very easy to accidentally overwrite variables from another function.</source>
          <target state="translated">当调用一个函数时,所有当前的局部变量都会暂时消失。这种局部作用域的阴影是需要的,因为变量命名空间会变得杂乱无章,很容易意外覆盖其他函数的变量。</target>
        </trans-unit>
        <trans-unit id="15eb860b17777aaad36a975023e7f241c10c68cb" translate="yes" xml:space="preserve">
          <source>When combining multiple parameter expansions, expansions are performed in the following order:</source>
          <target state="translated">当组合多个参数扩展时,按以下顺序进行扩展。</target>
        </trans-unit>
        <trans-unit id="8f30248e782192746e24f20cbd06bf81e9f75b5d" translate="yes" xml:space="preserve">
          <source>When defining a new function in fish, it is possible to make it into an event handler, i.e. a function that is automatically run when a specific event takes place. Events that can trigger a handler currently are:</source>
          <target state="translated">在fish中定义一个新的函数时,可以把它做成一个事件处理程序,即当一个特定的事件发生时自动运行的函数。目前可以触发处理程序的事件有:</target>
        </trans-unit>
        <trans-unit id="c06a76c81fd354d96a91e2098cf33daa64c9b259" translate="yes" xml:space="preserve">
          <source>When erasing completions, it is possible to either erase all completions for a specific command by specifying &lt;code&gt;complete -c COMMAND -e&lt;/code&gt;, or by specifying a specific completion option to delete by specifying either a long, short or old style option.</source>
          <target state="translated">擦除完成时，可以通过指定 &lt;code&gt;complete -c COMMAND -e&lt;/code&gt; 擦除特定命令的所有完成，或者通过指定长，短或旧样式选项来指定要删除的特定完成选项。</target>
        </trans-unit>
        <trans-unit id="71562657ada1f73f1b73dd5722b7668b06f50100" translate="yes" xml:space="preserve">
          <source>When fish waits for input, it will display a prompt by evaluating the &lt;code&gt;fish_prompt&lt;/code&gt; and &lt;code&gt;fish_right_prompt&lt;/code&gt; functions. The output of the former is displayed on the left and the latter's output on the right side of the terminal. The output of &lt;code&gt;fish_mode_prompt&lt;/code&gt; will be prepended on the left, though the default function only does this when in &lt;a href=&quot;index#vi-mode&quot;&gt;vi-mode&lt;/a&gt;.</source>
          <target state="translated">当fish等待输入时，它将通过评估 &lt;code&gt;fish_prompt&lt;/code&gt; 和 &lt;code&gt;fish_right_prompt&lt;/code&gt; 函数来显示提示。前者的输出显示在终端的左侧，后者的输出显示在终端的右侧。 &lt;code&gt;fish_mode_prompt&lt;/code&gt; 的输出将放在左侧，尽管默认功能仅在&lt;a href=&quot;index#vi-mode&quot;&gt;vi-mode&lt;/a&gt;时才执行。</target>
        </trans-unit>
        <trans-unit id="607879a486f64cd0da9cb1a6673f02fc3b5d2fec" translate="yes" xml:space="preserve">
          <source>When in vi-mode, the &lt;a href=&quot;fish_mode_prompt&quot;&gt;&lt;code&gt;fish_mode_prompt&lt;/code&gt;&lt;/a&gt; function will display a mode indicator to the left of the prompt. The &lt;code&gt;fish_vi_cursor&lt;/code&gt; function will be used to change the cursor's shape depending on the mode in supported terminals. To disable this feature, override it with an empty function. To display the mode elsewhere (like in your right prompt), use the output of the &lt;code&gt;fish_default_mode_prompt&lt;/code&gt; function.</source>
          <target state="translated">在vi模式下，&lt;a href=&quot;fish_mode_prompt&quot;&gt; &lt;code&gt;fish_mode_prompt&lt;/code&gt; &lt;/a&gt;函数将在提示符左侧显示一个模式指示器。该 &lt;code&gt;fish_vi_cursor&lt;/code&gt; 功能将被用于根据在所支持的终端的模式改变光标的形状。要禁用此功能，请用空功能覆盖它。要在其他地方显示模式（如在您的右侧提示中），请使用 &lt;code&gt;fish_default_mode_prompt&lt;/code&gt; 函数的输出。</target>
        </trans-unit>
        <trans-unit id="33b46dcb16afbaec6d4436b9d1a5f44e784219a0" translate="yes" xml:space="preserve">
          <source>When multiple &lt;code&gt;COMMAND&lt;/code&gt;s are provided, they are all run in the specified order when the key is pressed. Note that special input functions cannot be combined with ordinary shell script commands. The commands must be entirely a sequence of special input functions (from &lt;code&gt;bind -f&lt;/code&gt;) or all shell script commands (i.e., valid fish script).</source>
          <target state="translated">如果提供了多个 &lt;code&gt;COMMAND&lt;/code&gt; ，那么在按下键时它们都将以指定的顺序运行。请注意，特殊的输入功能不能与普通的shell脚本命令结合使用。这些命令必须完全是一系列特殊输入函数（来自 &lt;code&gt;bind -f&lt;/code&gt; ）或所有shell脚本命令（即有效的fish脚本）。</target>
        </trans-unit>
        <trans-unit id="60402cb8f58632c68a26ced09b11fbf6589f7279" translate="yes" xml:space="preserve">
          <source>When running in this mode, &lt;code&gt;read&lt;/code&gt; does not split the input in any way and text is redirected to standard output without any further processing or manipulation.</source>
          <target state="translated">在此模式下运行时， &lt;code&gt;read&lt;/code&gt; 不会以任何方式拆分输入，并且文本将被重定向到标准输出，而无需任何进一步的处理或操作。</target>
        </trans-unit>
        <trans-unit id="efd94d1e11c389f3a2b8042a383ed84dc4be3715" translate="yes" xml:space="preserve">
          <source>When the cursor is over a parenthesis or a quote, &lt;code&gt;fish&lt;/code&gt; also highlights its matching quote or parenthesis.</source>
          <target state="translated">当光标位于括号或引号上时， &lt;code&gt;fish&lt;/code&gt; 也会突出显示其匹配的引号或括号。</target>
        </trans-unit>
        <trans-unit id="01a87969e30ad0e39174183d05f883882efbc023" translate="yes" xml:space="preserve">
          <source>When the prompt is about to be shown</source>
          <target state="translated">当提示即将显示时</target>
        </trans-unit>
        <trans-unit id="84fb666d00ac44965366d223053ffc07523cfa5c" translate="yes" xml:space="preserve">
          <source>When the value of a variable is updated</source>
          <target state="translated">当一个变量的值被更新时</target>
        </trans-unit>
        <trans-unit id="5149e58fb1af17e2b78bfc79105f3521233c2ff0" translate="yes" xml:space="preserve">
          <source>When two unquoted expansions directly follow each other, you need to watch out for expansions that expand to nothing. This includes undefined variables and empty lists, but also command substitutions with no output. See the &lt;a href=&quot;#cartesian-product&quot;&gt;cartesian product&lt;/a&gt; section for more information.</source>
          <target state="translated">当两个未加引号的扩展名紧接着彼此相邻时，您需要当心那些扩展成零的扩展名。这包括未定义的变量和空列表，还包括没有输出的命令替换。有关更多信息，请参见&lt;a href=&quot;#cartesian-product&quot;&gt;笛卡尔乘积&lt;/a&gt;部分。</target>
        </trans-unit>
        <trans-unit id="611390b4e7bff2a4f48823eeb19ea95b7d5c6f8e" translate="yes" xml:space="preserve">
          <source>When using a variable as an argument for a test operator you should almost always enclose it in double-quotes. There are only two situations it is safe to omit the quote marks. The first is when the argument is a literal string with no whitespace or other characters special to the shell (e.g., semicolon). For example, &lt;code&gt;test -b /my/file&lt;/code&gt;. The second is using a variable that expands to exactly one element including if that element is the empty string (e.g., &amp;lsquo;set x &amp;rsquo;'&lt;code&gt;). If the variable is not set, set but with no value, or set to more than one value you must enclose it in double-quotes. For example,&lt;/code&gt;test &quot;$x&quot; = &quot;$y&quot;&lt;code&gt;. Since it is always safe to enclose variables in double-quotes when used as&lt;/code&gt;test` arguments that is the recommended practice.</source>
          <target state="translated">将变量用作测试运算符的参数时，几乎应始终将其括在双引号中。只有两种情况可以忽略引号。第一种是当参数是没有空格或shell专用其他字符（例如分号）的文字字符串时。例如， &lt;code&gt;test -b /my/file&lt;/code&gt; 。第二个方法是使用一个变量，该变量可以扩展到一个元素，包括该元素是否为空字符串（例如，'set x' &lt;code&gt;). If the variable is not set, set but with no value, or set to more than one value you must enclose it in double-quotes. For example,&lt;/code&gt; 测试&amp;ldquo; $ x&amp;rdquo; =&amp;ldquo; $ y&amp;rdquo; &lt;code&gt;. Since it is always safe to enclose variables in double-quotes when used as&lt;/code&gt; 测试参数时总是安全的将双引号引起来，因此建议您这样做。</target>
        </trans-unit>
        <trans-unit id="423a828b908fd75e9cc37f539daeca01ccaa2ca1" translate="yes" xml:space="preserve">
          <source>When using most virtual terminals, it is possible to set the message displayed in the titlebar of the terminal window. This can be done automatically in fish by defining the &lt;code&gt;fish_title&lt;/code&gt; function. The &lt;code&gt;fish_title&lt;/code&gt; function is executed before and after a new command is executed or put into the foreground and the output is used as a titlebar message. The &lt;code&gt;status current-command&lt;/code&gt; builtin will always return the name of the job to be put into the foreground (or 'fish' if control is returning to the shell) when the &lt;code&gt;fish_prompt&lt;/code&gt; function is called. The first argument to fish_title will contain the most recently executed foreground command as a string, starting with fish 2.2.</source>
          <target state="translated">使用大多数虚拟终端时，可以设置显示在终端窗口标题栏中的消息。通过定义 &lt;code&gt;fish_title&lt;/code&gt; 函数，可以在fish中自动完成此操作。该 &lt;code&gt;fish_title&lt;/code&gt; 函数之前和一个新的命令被执行或放入前景和输出被用作一个标题栏消息之后执行。当调用 &lt;code&gt;fish_prompt&lt;/code&gt; 函数时，内置的 &lt;code&gt;status current-command&lt;/code&gt; 始终将返回要放在前台的作业的名称（如果控件返回到Shell，则返回&amp;ldquo; fish&amp;rdquo;）。 fish_title的第一个参数将包含最新执行的前台命令，以字符串形式，从fish 2.2开始。</target>
        </trans-unit>
        <trans-unit id="8174e8c2267c766e6e1589bb88a15f5f751e9e9e" translate="yes" xml:space="preserve">
          <source>When using this feature together with array brackets, the brackets will always match the innermost &lt;code&gt;$&lt;/code&gt; dereference. Thus, &lt;code&gt;$$foo[5]&lt;/code&gt; will always mean the fifth element of the &lt;code&gt;foo&lt;/code&gt; variable should be dereferenced, not the fifth element of the doubly dereferenced variable &lt;code&gt;foo&lt;/code&gt;. The latter can instead be expressed as &lt;code&gt;$$foo[1][5]&lt;/code&gt;.</source>
          <target state="translated">当将此功能与数组括号一起使用时，括号将始终与最里面的 &lt;code&gt;$&lt;/code&gt; 取消引用匹配。因此， &lt;code&gt;$$foo[5]&lt;/code&gt; 将始终意味着应该取消引用 &lt;code&gt;foo&lt;/code&gt; 变量的第五个元素，而不是双重取消引用的变量 &lt;code&gt;foo&lt;/code&gt; 的第五个元素。后者可以改为表示为 &lt;code&gt;$$foo[1][5]&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="8fc413625f2d8700615beffe00723d3e066b2931" translate="yes" xml:space="preserve">
          <source>When you start a job in &lt;code&gt;fish&lt;/code&gt;, &lt;code&gt;fish&lt;/code&gt; itself will pause, and give control of the terminal to the program just started. Sometimes, you want to continue using the commandline, and have the job run in the background. To create a background job, append an &amp;amp; (ampersand) to your command. This will tell fish to run the job in the background. Background jobs are very useful when running programs that have a graphical user interface.</source>
          <target state="translated">当您开始在 &lt;code&gt;fish&lt;/code&gt; 中工作时， &lt;code&gt;fish&lt;/code&gt; 本身将暂停，并将终端的控制权交给刚刚启动的程序。有时，您想继续使用命令行，并在后台运行作业。要创建后台作业，请在命令后附加＆（与号）。这将告诉鱼在后台运行作业。当运行具有图形用户界面的程序时，后台作业非常有用。</target>
        </trans-unit>
        <trans-unit id="d15c25511fa0415df6ab124fbf33636f92131f5e" translate="yes" xml:space="preserve">
          <source>Whenever a process exits, an exit status is returned to the program that started it (usually the shell). This exit status is an integer number, which tells the calling application how the execution of the command went. In general, a zero exit status means that the command executed without problem, but a non-zero exit status means there was some form of problem.</source>
          <target state="translated">每当一个进程退出时,都会向启动它的程序(通常是shell)返回一个退出状态。这个退出状态是一个整数,它告诉调用程序命令的执行情况。一般来说,零的退出状态意味着命令的执行没有问题,但非零的退出状态意味着存在某种形式的问题。</target>
        </trans-unit>
        <trans-unit id="37e6818d213a036baa5f294f8cb49db4fd377178" translate="yes" xml:space="preserve">
          <source>Where can I find extra tools for fish?</source>
          <target state="translated">哪里可以找到多余的养鱼工具?</target>
        </trans-unit>
        <trans-unit id="079e201e9c4dd5d183821d76711a9a3942fe2c10" translate="yes" xml:space="preserve">
          <source>Where to put completions</source>
          <target state="translated">补语放在哪里</target>
        </trans-unit>
        <trans-unit id="218d0fd933c5736f11bfc14c23fd644e6997fe12" translate="yes" xml:space="preserve">
          <source>While loops:</source>
          <target state="translated">而循环。</target>
        </trans-unit>
        <trans-unit id="c3d957621152f2cbd082b0e140ac7a547272ab27" translate="yes" xml:space="preserve">
          <source>While this will check if &lt;code&gt;hasargs&lt;/code&gt; was run with the &lt;code&gt;-q&lt;/code&gt; option:</source>
          <target state="translated">虽然这将检查 &lt;code&gt;hasargs&lt;/code&gt; 是否使用 &lt;code&gt;-q&lt;/code&gt; 选项运行：</target>
        </trans-unit>
        <trans-unit id="3da2ee8c41b2531ccfd9706e7ed4059f9b39b539" translate="yes" xml:space="preserve">
          <source>Why doesn't `set -Ux` (exported universal variables) seem to work?</source>
          <target state="translated">为什么 &quot;set -Ux&quot;(导出的通用变量)似乎不起作用?</target>
        </trans-unit>
        <trans-unit id="1e505f696e4f6b7e0b5ed829f453debff8a4a2e5" translate="yes" xml:space="preserve">
          <source>Why doesn't history substitution (&quot;!$&quot; etc.) work?</source>
          <target state="translated">为什么历史代入(&quot;!$&quot;等)不行?</target>
        </trans-unit>
        <trans-unit id="567d5b34994eb0320286730214d3dd777982c9ad" translate="yes" xml:space="preserve">
          <source>Why fish?</source>
          <target state="translated">为什么要钓鱼?</target>
        </trans-unit>
        <trans-unit id="59af40d4a351e635fdbe369d7b681d20a590a23a" translate="yes" xml:space="preserve">
          <source>Wildcard expansion</source>
          <target state="translated">通配符扩展</target>
        </trans-unit>
        <trans-unit id="59047ee36a3c7c05f567f4b4586b76d8d7e3171d" translate="yes" xml:space="preserve">
          <source>Wildcard matches are sorted case insensitively. When sorting matches containing numbers, consecutive digits are considered to be one element, so that the strings '1' '5' and '12' would be sorted in the order given.</source>
          <target state="translated">通配符的排序对大小写不敏感。当对包含数字的匹配进行排序时,连续的数字被认为是一个元素,因此字符串'1''5'和'12'将按照给定的顺序进行排序。</target>
        </trans-unit>
        <trans-unit id="f4138f22664d37f96c263052adeb723fdfd7248c" translate="yes" xml:space="preserve">
          <source>Wildcards</source>
          <target state="translated">Wildcards</target>
        </trans-unit>
        <trans-unit id="278d17b7409d744f59bd2b428221655321a32bee" translate="yes" xml:space="preserve">
          <source>Will print &quot;Number of bananas in my pocket: 42&quot;, &lt;em&gt;without&lt;/em&gt; a newline.</source>
          <target state="translated">将打印&amp;ldquo;我口袋里的香蕉数量：42&amp;rdquo;，&lt;em&gt;不&lt;/em&gt;带换行符。</target>
        </trans-unit>
        <trans-unit id="6d27bda981ba079ffce589e22866c0442facccba" translate="yes" xml:space="preserve">
          <source>Will print &quot;flounder fish&quot; (separated with a tab character), followed by a newline character. This is useful for writing completions, as fish expects completion scripts to output the option followed by the description, separated with a tab character.</source>
          <target state="translated">将打印 &quot;flounder fish&quot;(用tab字符分隔),后面是一个换行符。这对于编写完结篇是很有用的,因为fish希望完结篇脚本能够输出选项和描述,后面用tab字符隔开。</target>
        </trans-unit>
        <trans-unit id="d95f3955e4775af2ffe313a32a1e156b2312cd4e" translate="yes" xml:space="preserve">
          <source>Will remove the file 'cumbersome filename.txt', while</source>
          <target state="translated">将删除'繁琐的文件名.txt'文件,而。</target>
        </trans-unit>
        <trans-unit id="4044b3d5cb068502c25839df6244b97ef13bfd98" translate="yes" xml:space="preserve">
          <source>With &quot;-c&quot;, it clears the directory stack instead.</source>
          <target state="translated">使用&quot;-c &quot;时,它会清除目录栈。</target>
        </trans-unit>
        <trans-unit id="b3f596135ed991ca7f5a3bdc45b29b16283c1e4c" translate="yes" xml:space="preserve">
          <source>With &lt;code&gt;CMD&lt;/code&gt; specified, the command line buffer is erased and replaced with the contents of &lt;code&gt;CMD&lt;/code&gt;.</source>
          <target state="translated">在指定了 &lt;code&gt;CMD&lt;/code&gt; 的情况下，将擦除命令行缓冲区，并用 &lt;code&gt;CMD&lt;/code&gt; 的内容替换。</target>
        </trans-unit>
        <trans-unit id="d3a11523e7c7f53a50eb3f5c7145415a6eeb3a11" translate="yes" xml:space="preserve">
          <source>With both variable names and values provided, &lt;code&gt;set&lt;/code&gt; assigns the variable &lt;code&gt;VARIABLE_NAME&lt;/code&gt; the values &lt;code&gt;VALUES...&lt;/code&gt;.</source>
          <target state="translated">与这两个变量名和值提供， &lt;code&gt;set&lt;/code&gt; 分配变量 &lt;code&gt;VARIABLE_NAME&lt;/code&gt; 值 &lt;code&gt;VALUES...&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="e3a3bdf1969b9c7b04d35c628b64777d5949f26c" translate="yes" xml:space="preserve">
          <source>With no arguments, &lt;code&gt;status&lt;/code&gt; displays a summary of the current login and job control status of the shell.</source>
          <target state="translated">不带任何参数的 &lt;code&gt;status&lt;/code&gt; 将显示外壳程序当前登录和作业控制状态的摘要。</target>
        </trans-unit>
        <trans-unit id="ff0f6870a82d5cfaf6592bfe8160d96a5dcb7c33" translate="yes" xml:space="preserve">
          <source>With no options, &lt;code&gt;type&lt;/code&gt; indicates how each &lt;code&gt;NAME&lt;/code&gt; would be interpreted if used as a command name.</source>
          <target state="translated">不带任何选项的 &lt;code&gt;type&lt;/code&gt; 表示如果用作命令名将如何解释每个 &lt;code&gt;NAME&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="324faf3e252b5aa14d470f7a0e509c22b0211914" translate="yes" xml:space="preserve">
          <source>With no parameters, &lt;code&gt;commandline&lt;/code&gt; returns the current value of the command line.</source>
          <target state="translated">如果没有参数，则 &lt;code&gt;commandline&lt;/code&gt; 返回命令行的当前值。</target>
        </trans-unit>
        <trans-unit id="32e508ff64591c08b5059eaf16992b090526d942" translate="yes" xml:space="preserve">
          <source>With no parameters, the current file creation mode mask is printed as an octal number.</source>
          <target state="translated">在没有参数的情况下,当前文件创建模式掩码被打印为八进制数。</target>
        </trans-unit>
        <trans-unit id="550c07a797cef93c6dca0c250695a3ee3bc836c8" translate="yes" xml:space="preserve">
          <source>With the &lt;code&gt;--line&lt;/code&gt; option, &lt;code&gt;read&lt;/code&gt; reads a line of input from standard input into each provided variable, stopping when each variable has been filled. The line is not tokenized.</source>
          <target state="translated">使用 &lt;code&gt;--line&lt;/code&gt; 选项， &lt;code&gt;read&lt;/code&gt; 将从标准输入中读取一行输入到每个提供的变量中，并在填充每个变量时停止。该行未标记。</target>
        </trans-unit>
        <trans-unit id="7eb04c1870bbf00dde53d943ea601f02f6aade6f" translate="yes" xml:space="preserve">
          <source>With the &lt;code&gt;-s&lt;/code&gt; option, &lt;code&gt;command&lt;/code&gt; treats every argument as a separate command to look up and sets the exit status to 0 if any of the specified commands were found, or 1 if no commands could be found. Additionally passing a &lt;code&gt;-q&lt;/code&gt; or &lt;code&gt;--quiet&lt;/code&gt; option prevents any paths from being printed, like &lt;code&gt;type -q&lt;/code&gt;, for testing only the exit status.</source>
          <target state="translated">使用 &lt;code&gt;-s&lt;/code&gt; 选项， &lt;code&gt;command&lt;/code&gt; 将每个参数视为一个单独的命令进行查找，如果找到任何指定的命令，则将退出状态设置为0；如果找不到任何命令，则将退出状态设置为1。另外，传递 &lt;code&gt;-q&lt;/code&gt; 或 &lt;code&gt;--quiet&lt;/code&gt; 选项可防止打印任何路径，例如 &lt;code&gt;type -q&lt;/code&gt; ，仅用于测试退出状态。</target>
        </trans-unit>
        <trans-unit id="bc8e1321c10d803c389c5b4efea6741544b19b13" translate="yes" xml:space="preserve">
          <source>Without arguments, it exchanges the top two directories in the stack.</source>
          <target state="translated">在没有参数的情况下,它交换堆栈中前两个目录。</target>
        </trans-unit>
        <trans-unit id="1afcecbf9280e75078efa249fd70e1ac68834d9a" translate="yes" xml:space="preserve">
          <source>Without the &lt;code&gt;--line&lt;/code&gt; option, &lt;code&gt;read&lt;/code&gt; reads a single line of input from standard input, breaks it into tokens, and then assigns one token to each variable specified in &lt;code&gt;VARIABLES&lt;/code&gt;. If there are more tokens than variables, the complete remainder is assigned to the last variable.</source>
          <target state="translated">如果没有 &lt;code&gt;--line&lt;/code&gt; 选项，则 &lt;code&gt;read&lt;/code&gt; 从标准输入中读取一行输入，将其分成标记，然后将一个标记分配给 &lt;code&gt;VARIABLES&lt;/code&gt; 中指定的每个变量。如果令牌多于变量，则将完整的余数分配给最后一个变量。</target>
        </trans-unit>
        <trans-unit id="81356a4d6a0a4a4ef7b6e1d572238cf1fdea2fd0" translate="yes" xml:space="preserve">
          <source>Writing your own completions</source>
          <target state="translated">写出自己的完形</target>
        </trans-unit>
        <trans-unit id="7683cbf9a7b5e61b6d059df3889d47cb3365f802" translate="yes" xml:space="preserve">
          <source>You can access individual elements with square brackets. Indexing starts at 1 from the beginning, and -1 from the end:</source>
          <target state="translated">你可以用方括号访问各个元素。索引从开头开始为1,从结尾开始为-1。</target>
        </trans-unit>
        <trans-unit id="22411b5ee78ea15c18bd052b59931e2ba02abfc9" translate="yes" xml:space="preserve">
          <source>You can also access ranges of elements, known as &quot;slices:&quot;</source>
          <target state="translated">你还可以访问元素的范围,即 &quot;切片&quot;:&quot;</target>
        </trans-unit>
        <trans-unit id="183a967967d542440e171619570f33c53983ac70" translate="yes" xml:space="preserve">
          <source>You can also declare a local variable in a block:</source>
          <target state="translated">你也可以在块中声明一个局部变量。</target>
        </trans-unit>
        <trans-unit id="c6736676dcee399ddf959a5129dcc47bfa72a06e" translate="yes" xml:space="preserve">
          <source>You can also use the Web configuration tool, &lt;a href=&quot;commands#fish_config&quot;&gt;&lt;code&gt;fish_config&lt;/code&gt;&lt;/a&gt;, to preview and choose from a gallery of sample prompts.</source>
          <target state="translated">您还可以使用Web配置工具&lt;a href=&quot;commands#fish_config&quot;&gt; &lt;code&gt;fish_config&lt;/code&gt; &lt;/a&gt;预览并从示例提示库中进行选择。</target>
        </trans-unit>
        <trans-unit id="bdd92db017317ccc2cf69c4b1d28391056cb80e8" translate="yes" xml:space="preserve">
          <source>You can append (or prepend) to a list by setting the list to itself, with some additional arguments. Here we append /usr/local/bin to $PATH:</source>
          <target state="translated">你可以通过将列表设置为自己,并添加一些额外的参数来追加(或前缀)到列表中。这里我们将/usr/local/bin追加到$PATH。</target>
        </trans-unit>
        <trans-unit id="1bb567fe25bb6a2caba3279e69807e978438ad28" translate="yes" xml:space="preserve">
          <source>You can change &lt;code&gt;fish_history&lt;/code&gt; at any time (by using &lt;code&gt;set -x fish_history &quot;session_name&quot;&lt;/code&gt;) and it will take effect right away. If you set it to &lt;code&gt;&quot;default&quot;&lt;/code&gt;, it will use the default session name (which is &lt;code&gt;&quot;fish&quot;&lt;/code&gt;).</source>
          <target state="translated">您可以随时更改 &lt;code&gt;fish_history&lt;/code&gt; （通过使用 &lt;code&gt;set -x fish_history &quot;session_name&quot;&lt;/code&gt; ），它将立即生效。如果将其设置为 &lt;code&gt;&quot;default&quot;&lt;/code&gt; ，它将使用默认的会话名称（即 &lt;code&gt;&quot;fish&quot;&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="271d995eee26c277a042d3d479fbc5c44abb9d62" translate="yes" xml:space="preserve">
          <source>You can change these key bindings using the &lt;a href=&quot;commands#bind&quot;&gt;bind&lt;/a&gt; builtin command.</source>
          <target state="translated">您可以使用&lt;a href=&quot;commands#bind&quot;&gt;bind&lt;/a&gt; Builtin命令更改这些键绑定。</target>
        </trans-unit>
        <trans-unit id="0fbf59159cacd6194c5d1afee388fe6f9b2deba5" translate="yes" xml:space="preserve">
          <source>You can choose among some sample prompts by running &lt;code&gt;fish_config prompt&lt;/code&gt;. &lt;code&gt;fish&lt;/code&gt; also supports RPROMPT through &lt;code&gt;fish_right_prompt&lt;/code&gt;.</source>
          <target state="translated">您可以通过运行 &lt;code&gt;fish_config prompt&lt;/code&gt; 在一些示例提示中进行选择。 &lt;code&gt;fish&lt;/code&gt; 还通过 &lt;code&gt;fish_right_prompt&lt;/code&gt; 支持RPROMPT。</target>
        </trans-unit>
        <trans-unit id="29e07248f927a66e3445195c42cee5dad321cbe4" translate="yes" xml:space="preserve">
          <source>You can create abbreviations interactively and they will be visible to other fish sessions if you use the &lt;code&gt;-U&lt;/code&gt; or &lt;code&gt;--universal&lt;/code&gt; flag or don't explicitly specify the scope and the abbreviation isn't already defined with global scope. If you want it to be visible only to the current shell use the &lt;code&gt;-g&lt;/code&gt; or &lt;code&gt;--global&lt;/code&gt; flag.</source>
          <target state="translated">您可以交互方式创建缩写，如果您使用 &lt;code&gt;-U&lt;/code&gt; 或 &lt;code&gt;--universal&lt;/code&gt; 标志，或者未明确指定范围，并且尚未使用全局范围定义缩写，则其他鱼会话将看到它们。如果希望它仅对当前shell可见，请使用 &lt;code&gt;-g&lt;/code&gt; 或 &lt;code&gt;--global&lt;/code&gt; 标志。</target>
        </trans-unit>
        <trans-unit id="b6e4c148ce6b5b609986d145a9a7da7ea9b88d15" translate="yes" xml:space="preserve">
          <source>You can define your own prompt:</source>
          <target state="translated">你可以定义自己的提示。</target>
        </trans-unit>
        <trans-unit id="f61c13e82446efa061ca7d17091f411ee83d8761" translate="yes" xml:space="preserve">
          <source>You can do so directly in &lt;code&gt;config.fish&lt;/code&gt;, like you might do in other shells with &lt;code&gt;.profile&lt;/code&gt;. See &lt;a href=&quot;#path_example&quot;&gt;this example&lt;/a&gt;.</source>
          <target state="translated">您可以直接在 &lt;code&gt;config.fish&lt;/code&gt; 中执行此操作，就像在其他使用 &lt;code&gt;.profile&lt;/code&gt; 的 shell中进行操作一样。请参阅&lt;a href=&quot;#path_example&quot;&gt;此示例&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="70c6c6dd6e2cc9d671b6c22ccdb9354bc3fcc555" translate="yes" xml:space="preserve">
          <source>You can erase a variable with &lt;code&gt;-e&lt;/code&gt; or &lt;code&gt;--erase&lt;/code&gt;</source>
          <target state="translated">您可以使用 &lt;code&gt;-e&lt;/code&gt; 或 &lt;code&gt;--erase&lt;/code&gt; 擦除变量</target>
        </trans-unit>
        <trans-unit id="5bad3c32a8d2a38fb8952af3582045099d1f7782" translate="yes" xml:space="preserve">
          <source>You can include a literal space in an argument with a backslash, or by using single or double quotes:</source>
          <target state="translated">你可以用反斜杠或使用单引号或双引号在一个参数中包含一个空格。</target>
        </trans-unit>
        <trans-unit id="cf2d7abc4fc8709fbd1e843b233396517d8ddaca" translate="yes" xml:space="preserve">
          <source>You can include multiple wildcards:</source>
          <target state="translated">您可以包含多个通配符。</target>
        </trans-unit>
        <trans-unit id="f83e4dd668d0923f31b885de0832e79602a1616d" translate="yes" xml:space="preserve">
          <source>You can iterate over a list (or a slice) with a for loop:</source>
          <target state="translated">你可以用for循环对一个列表(或一个片断)进行迭代。</target>
        </trans-unit>
        <trans-unit id="582ba3e59d153a759cfa8931cfe3daa07df07cb8" translate="yes" xml:space="preserve">
          <source>You can list the names of all functions with the &lt;code&gt;functions&lt;/code&gt; keyword (note the plural!). &lt;code&gt;fish&lt;/code&gt; starts out with a number of functions:</source>
          <target state="translated">您可以使用 &lt;code&gt;functions&lt;/code&gt; 关键字列出所有函数的名称（注意复数！）。 &lt;code&gt;fish&lt;/code&gt; 首先具有许多功能：</target>
        </trans-unit>
        <trans-unit id="cdbfa536e96ce4c5031503e10bf462df7b697afe" translate="yes" xml:space="preserve">
          <source>You can only specify one subcommand per invocation even if you use the flag form of the subcommand.</source>
          <target state="translated">即使使用子命令的标志形式,每次调用也只能指定一个子命令。</target>
        </trans-unit>
        <trans-unit id="32cbb15c775d0a5c4bd4e986a03e5ca4d359b068" translate="yes" xml:space="preserve">
          <source>You can pipe between commands with the usual vertical bar:</source>
          <target state="translated">你可以在命令之间用通常的竖条进行管道。</target>
        </trans-unit>
        <trans-unit id="9d42fab7275c3711f78f4cc0e17430682558b418" translate="yes" xml:space="preserve">
          <source>You can see the current list of features via &lt;code&gt;status features&lt;/code&gt;:</source>
          <target state="translated">您可以通过 &lt;code&gt;status features&lt;/code&gt; 查看当前功能列表：</target>
        </trans-unit>
        <trans-unit id="d372da7b7b5d10683d41167afee54d800f912536" translate="yes" xml:space="preserve">
          <source>You can see the source for any function by passing its name to &lt;code&gt;functions&lt;/code&gt;:</source>
          <target state="translated">您可以通过将名称传递给 &lt;code&gt;functions&lt;/code&gt; 来查看任何函数的来源：</target>
        </trans-unit>
        <trans-unit id="119c7a997d5bdc2b60e626a0ba66e37ce06fb4d1" translate="yes" xml:space="preserve">
          <source>You can set the &lt;code&gt;fish_history&lt;/code&gt; variable to another name for the current shell session. The default value (when the variable is unset) is &lt;code&gt;fish&lt;/code&gt; which corresponds to &lt;code&gt;$XDG_DATA_HOME/fish/fish_history&lt;/code&gt;. If you set it to e.g. &lt;code&gt;fun&lt;/code&gt;, the history would be written to &lt;code&gt;$XDG_DATA_HOME/fish/fun_history&lt;/code&gt;. An empty string means history will not be stored at all. This is similar to the private session features in web browsers.</source>
          <target state="translated">您可以将 &lt;code&gt;fish_history&lt;/code&gt; 变量设置为当前Shell会话的另一个名称。默认值（未设置变量时）是 &lt;code&gt;fish&lt;/code&gt; ，它对应于 &lt;code&gt;$XDG_DATA_HOME/fish/fish_history&lt;/code&gt; 。如果将其设置为例如 &lt;code&gt;fun&lt;/code&gt; ，则历史记录将被写入 &lt;code&gt;$XDG_DATA_HOME/fish/fun_history&lt;/code&gt; 。空字符串表示将完全不存储历史记录。这类似于Web浏览器中的私人会话功能。</target>
        </trans-unit>
        <trans-unit id="805a6b59b4757ac95f6f000c9c60c72ef172664e" translate="yes" xml:space="preserve">
          <source>You can use &lt;a href=&quot;#and&quot;&gt;&lt;code&gt;and&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;#or&quot;&gt;&lt;code&gt;or&lt;/code&gt;&lt;/a&gt; for complex conditions. Even more complex control can be achieved with &lt;code&gt;while true&lt;/code&gt; containing a &lt;a href=&quot;#break&quot;&gt;break&lt;/a&gt;.</source>
          <target state="translated">您可以对复杂条件使用&lt;a href=&quot;#and&quot;&gt; &lt;code&gt;and&lt;/code&gt; &lt;/a&gt;或&lt;a href=&quot;#or&quot;&gt; &lt;code&gt;or&lt;/code&gt; &lt;/a&gt;。 &lt;code&gt;while true&lt;/code&gt; 包含一个&lt;a href=&quot;#break&quot;&gt;break &lt;/a&gt;时，可以实现更复杂的控制。</target>
        </trans-unit>
        <trans-unit id="36becbc0de8c6768b79b53bcf652c0ec7f0d05ab" translate="yes" xml:space="preserve">
          <source>You can use &lt;a href=&quot;#and&quot;&gt;&lt;code&gt;and&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;#or&quot;&gt;&lt;code&gt;or&lt;/code&gt;&lt;/a&gt; in the condition. See the second example below.</source>
          <target state="translated">您可以在条件中使用&lt;a href=&quot;#and&quot;&gt; &lt;code&gt;and&lt;/code&gt; &lt;/a&gt;或&lt;a href=&quot;#or&quot;&gt; &lt;code&gt;or&lt;/code&gt; &lt;/a&gt;。请参阅下面的第二个示例。</target>
        </trans-unit>
        <trans-unit id="a29442c2c0cd9017469875929db91ad4d3e135db" translate="yes" xml:space="preserve">
          <source>You can use the following commands for this:</source>
          <target state="translated">您可以使用以下命令进行操作。</target>
        </trans-unit>
        <trans-unit id="ae2c831ec8a49110729d78b946cea71b43a00858" translate="yes" xml:space="preserve">
          <source>You cannot create an alias to a function with the same name. Note that spaces need to be escaped in the call to &lt;code&gt;alias&lt;/code&gt; just like at the command line, &lt;em&gt;even inside quoted parts&lt;/em&gt;.</source>
          <target state="translated">您不能为具有相同名称的函数创建别名。请注意，就像在命令行一样，&lt;em&gt;即使在引用的parts内部&lt;/em&gt;，&lt;em&gt;也&lt;/em&gt;需要在 &lt;code&gt;alias&lt;/code&gt; 调用中转义空格。&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="ccdace8ac9f08512755f925735f08580088b949a" translate="yes" xml:space="preserve">
          <source>You don't need to use &lt;code&gt;--&lt;/code&gt; before the expression even if it begins with a minus sign which might otherwise be interpreted as an invalid option. If you do insert &lt;code&gt;--&lt;/code&gt; before the expression it will cause option scanning to stop just like for every other command and it won't be part of the expression.</source>
          <target state="translated">即使表达式以减号开头，也不必在表达式前使用 &lt;code&gt;--&lt;/code&gt; 否则可能会被解释为无效选项。如果在表达式之前插入 &lt;code&gt;--&lt;/code&gt; ，则它将导致选项扫描停止，就像其他所有命令一样，并且它不会成为表达式的一部分。</target>
        </trans-unit>
        <trans-unit id="dff1182c8c84fa78c31ad7304aa236d391621f4d" translate="yes" xml:space="preserve">
          <source>You may be interested in the &lt;a href=&quot;commands#cdh&quot;&gt;&lt;code&gt;cdh&lt;/code&gt;&lt;/a&gt; command which provides a more intuitive way to navigate to recently visited directories.</source>
          <target state="translated">您可能对&lt;a href=&quot;commands#cdh&quot;&gt; &lt;code&gt;cdh&lt;/code&gt; &lt;/a&gt;命令感兴趣，该命令提供了一种更直观的方法来导航到最近访问的目录。</target>
        </trans-unit>
        <trans-unit id="f19456ce739912cdbaadf68c5288fc6b883036c4" translate="yes" xml:space="preserve">
          <source>You may need to adjust the above path to e.g. &lt;code&gt;/usr/bin/fish&lt;/code&gt;. Use the command &lt;code&gt;which fish&lt;/code&gt; if you are unsure of where fish is installed.</source>
          <target state="translated">您可能需要将上述路径调整为 &lt;code&gt;/usr/bin/fish&lt;/code&gt; 。如果您不确定将鱼安装在何处，请使用命令 &lt;code&gt;which fish&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="f60f3dbd8379e7020fda94ce83302c2e10232183" translate="yes" xml:space="preserve">
          <source>You should not assume that only five lines will be written since we may add additional information to the output in the future.</source>
          <target state="translated">你不应该假设只写五行,因为我们将来可能会在输出中添加额外的信息。</target>
        </trans-unit>
        <trans-unit id="d00cc0aeee9d747695090dc15483badfdd7bb562" translate="yes" xml:space="preserve">
          <source>You should not consider &lt;code&gt;RANDOM&lt;/code&gt; cryptographically secure, or even statistically accurate.</source>
          <target state="translated">您不应该考虑 &lt;code&gt;RANDOM&lt;/code&gt; 在密码学上是安全的，甚至在统计上也是准确的。</target>
        </trans-unit>
        <trans-unit id="099d04689a14254d5c264e92a8949102945a2d8c" translate="yes" xml:space="preserve">
          <source>You will be greeted by the standard fish prompt, which means you are all set up and can start using fish:</source>
          <target state="translated">迎接你的将是标准的鱼的提示,这意味着你已经全部设置好了,可以开始使用鱼了。</target>
        </trans-unit>
        <trans-unit id="daf44230d29581bbad655cd6db1bfaf7030ab520" translate="yes" xml:space="preserve">
          <source>You would then use it in place of &lt;code&gt;**&lt;/code&gt; like this, &lt;code&gt;my_prog (ff)&lt;/code&gt;, to pass only regular files in or below $PWD to &lt;code&gt;my_prog&lt;/code&gt;.</source>
          <target state="translated">然后，您可以使用它代替 &lt;code&gt;**&lt;/code&gt; 这样的 &lt;code&gt;my_prog (ff)&lt;/code&gt; ，仅将$ PWD或以下的常规文件传递给 &lt;code&gt;my_prog&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="1c67de04c7033796c6c74cd4dd03c739078b5757" translate="yes" xml:space="preserve">
          <source>You'll quickly notice that &lt;code&gt;fish&lt;/code&gt; performs syntax highlighting as you type. Invalid commands are colored red by default:</source>
          <target state="translated">您很快就会注意到， &lt;code&gt;fish&lt;/code&gt; 在键入时会执行语法高亮显示。默认情况下，无效命令显示为红色：</target>
        </trans-unit>
        <trans-unit id="0f1904a8c07ac4a095aa5e3b5df39a737f0d2b78" translate="yes" xml:space="preserve">
          <source>Zero is considered success, and non-zero is failure.</source>
          <target state="translated">零即为成功,非零即为失败。</target>
        </trans-unit>
        <trans-unit id="b9bce8bc7cbd4cfc74af295dc63b50f294e0fb27" translate="yes" xml:space="preserve">
          <source>abbr</source>
          <target state="translated">abbr</target>
        </trans-unit>
        <trans-unit id="10c64ce9ed7a8c30b0b458cd0cea2f41104ed020" translate="yes" xml:space="preserve">
          <source>abbr - manage fish abbreviations</source>
          <target state="translated">abbr-manage fish abbreviations</target>
        </trans-unit>
        <trans-unit id="682cee3cbd526832d0e8acb7535f6a975ddc96ee" translate="yes" xml:space="preserve">
          <source>add &lt;code&gt;/usr/local/bin/fish&lt;/code&gt; to &lt;code&gt;/etc/shells&lt;/code&gt;</source>
          <target state="translated">将 &lt;code&gt;/usr/local/bin/fish&lt;/code&gt; 添加到 &lt;code&gt;/etc/shells&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="cdb6fdbe91faa53a7c573c80b7c18108c73c0480" translate="yes" xml:space="preserve">
          <source>alias</source>
          <target state="translated">alias</target>
        </trans-unit>
        <trans-unit id="42a06677b30252b0d37eaddcaf33c622b85d08b4" translate="yes" xml:space="preserve">
          <source>alias - create a function</source>
          <target state="translated">别名-创建一个函数</target>
        </trans-unit>
        <trans-unit id="cffa50a32cb13a240d705317bcec65dd1f31b6ad" translate="yes" xml:space="preserve">
          <source>and</source>
          <target state="translated">and</target>
        </trans-unit>
        <trans-unit id="4ed9a78158a5eed2a098e3c46a71c9215bfe4153" translate="yes" xml:space="preserve">
          <source>and - conditionally execute a command</source>
          <target state="translated">和-有条件地执行一个命令</target>
        </trans-unit>
        <trans-unit id="e750ee7c231477c66be61075d1aafe532a03970f" translate="yes" xml:space="preserve">
          <source>argparse</source>
          <target state="translated">argparse</target>
        </trans-unit>
        <trans-unit id="b3ef1b3ad484c3f1815d35a2d7273ba16d3fc004" translate="yes" xml:space="preserve">
          <source>argparse - parse options passed to a fish script or function</source>
          <target state="translated">argparse-解析传递给fish脚本或函数的选项。</target>
        </trans-unit>
        <trans-unit id="8cbd0a74c6efdb39943b290bb82c9d6b2a6ee5a6" translate="yes" xml:space="preserve">
          <source>begin</source>
          <target state="translated">begin</target>
        </trans-unit>
        <trans-unit id="d849f3a2774d5c3d8a5b753d01c1b98a89678580" translate="yes" xml:space="preserve">
          <source>begin - start a new block of code</source>
          <target state="translated">begin-开始一个新的代码块</target>
        </trans-unit>
        <trans-unit id="80f87c8847da6c872ce2fc9fec0a98a73ebc578d" translate="yes" xml:space="preserve">
          <source>bg</source>
          <target state="translated">bg</target>
        </trans-unit>
        <trans-unit id="eae83d584c6eeb26f5e657e85aaec8ab661a533a" translate="yes" xml:space="preserve">
          <source>bg - send jobs to background</source>
          <target state="translated">bg-将工作发送到后台</target>
        </trans-unit>
        <trans-unit id="6bdd4db977b0f96aaf3bff2e4300153c648ca382" translate="yes" xml:space="preserve">
          <source>bind</source>
          <target state="translated">bind</target>
        </trans-unit>
        <trans-unit id="4d74207ae06bd7de23e2fc590a893d97bc45179b" translate="yes" xml:space="preserve">
          <source>bind - handle fish key bindings</source>
          <target state="translated">捆绑--处理鱼键捆绑</target>
        </trans-unit>
        <trans-unit id="0214b4b355d11ca8f2ce45a968c264651bdfbf83" translate="yes" xml:space="preserve">
          <source>block</source>
          <target state="translated">block</target>
        </trans-unit>
        <trans-unit id="eaad10d066a35f607308cf97548f180f4b9b872e" translate="yes" xml:space="preserve">
          <source>block - temporarily block delivery of events</source>
          <target state="translated">屏蔽-暂时屏蔽事件的发送</target>
        </trans-unit>
        <trans-unit id="4f9cac8dbc4c67a388b8379dcc126c90c7c5e72a" translate="yes" xml:space="preserve">
          <source>break</source>
          <target state="translated">break</target>
        </trans-unit>
        <trans-unit id="175a258d07e2daaf5e3b38a9da4f646e868f7dd3" translate="yes" xml:space="preserve">
          <source>break - stop the current inner loop</source>
          <target state="translated">break-停止当前的内部循环</target>
        </trans-unit>
        <trans-unit id="5c0a31c48cda57c40dc61b785110d76593834ffd" translate="yes" xml:space="preserve">
          <source>breakpoint</source>
          <target state="translated">breakpoint</target>
        </trans-unit>
        <trans-unit id="2922ddae1fa1032ce7131127668d51bf87c71f7e" translate="yes" xml:space="preserve">
          <source>breakpoint - Launch debug mode</source>
          <target state="translated">断点-启动调试模式</target>
        </trans-unit>
        <trans-unit id="748a336cc88c03ccb07ed5f5073d18624731b8b5" translate="yes" xml:space="preserve">
          <source>builtin</source>
          <target state="translated">builtin</target>
        </trans-unit>
        <trans-unit id="fa7c75bcd8e77b2860336c73b4baf210585bbf7f" translate="yes" xml:space="preserve">
          <source>builtin - run a builtin command</source>
          <target state="translated">builtin-运行内置命令</target>
        </trans-unit>
        <trans-unit id="6406510c31e0c9925733c7f21414bf6428333ed2" translate="yes" xml:space="preserve">
          <source>case</source>
          <target state="translated">case</target>
        </trans-unit>
        <trans-unit id="ecbc5351327db65d354a1a7d358353471d69609a" translate="yes" xml:space="preserve">
          <source>case - conditionally execute a block of commands</source>
          <target state="translated">case-有条件地执行一组命令</target>
        </trans-unit>
        <trans-unit id="034778198a045c1ed80be271cdd029b76874f6fc" translate="yes" xml:space="preserve">
          <source>cd</source>
          <target state="translated">cd</target>
        </trans-unit>
        <trans-unit id="fb525966ad485c5f8afa455838828ee40af068d5" translate="yes" xml:space="preserve">
          <source>cd - change directory</source>
          <target state="translated">cd-更改目录</target>
        </trans-unit>
        <trans-unit id="2aba119bde64723a0961a18ff7adcf76a9d24d8e" translate="yes" xml:space="preserve">
          <source>cdh</source>
          <target state="translated">cdh</target>
        </trans-unit>
        <trans-unit id="1be63f271a472b0d15f170811e4caf9972df88bb" translate="yes" xml:space="preserve">
          <source>cdh - change to a recently visited directory</source>
          <target state="translated">cdh-更改到最近访问过的目录</target>
        </trans-unit>
        <trans-unit id="0f8e267ee0d75f9ceaa9ed7d8f182c646d73ba65" translate="yes" xml:space="preserve">
          <source>change your default shell with &lt;code&gt;chsh -s&lt;/code&gt; to &lt;code&gt;/usr/local/bin/fish&lt;/code&gt;</source>
          <target state="translated">使用 &lt;code&gt;chsh -s&lt;/code&gt; 将默认外壳程序更改为 &lt;code&gt;/usr/local/bin/fish&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="1925f793093581c47a5c6b2e414506b1cbae280d" translate="yes" xml:space="preserve">
          <source>command</source>
          <target state="translated">command</target>
        </trans-unit>
        <trans-unit id="919a6f5c6816036eaffc9cdb1996a015acf915b7" translate="yes" xml:space="preserve">
          <source>command - run a program</source>
          <target state="translated">命令-运行程序</target>
        </trans-unit>
        <trans-unit id="92df95e63882bc424c741ba3025a247583b8fe73" translate="yes" xml:space="preserve">
          <source>commandline</source>
          <target state="translated">commandline</target>
        </trans-unit>
        <trans-unit id="bcf389e72583580fd4176da0b6e9a5409c5718c2" translate="yes" xml:space="preserve">
          <source>commandline - set or get the current command line buffer</source>
          <target state="translated">commandline-设置或获取当前的命令行缓冲区。</target>
        </trans-unit>
        <trans-unit id="0737c22d3bfae812339732d14d8c7dbd6dc4e09c" translate="yes" xml:space="preserve">
          <source>complete</source>
          <target state="translated">complete</target>
        </trans-unit>
        <trans-unit id="b1b90f2b3d099b292abc0be14142c4ee0c55e03b" translate="yes" xml:space="preserve">
          <source>complete - edit command specific tab-completions</source>
          <target state="translated">完成--编辑命令的特定选项卡补充</target>
        </trans-unit>
        <trans-unit id="caeb909ae4ff4ee25a0ff0d476946ed256f2aee1" translate="yes" xml:space="preserve">
          <source>contains</source>
          <target state="translated">contains</target>
        </trans-unit>
        <trans-unit id="904d39bd3ceac4decbc721c45054ed1c4b2c7fdb" translate="yes" xml:space="preserve">
          <source>contains - test if a word is present in a list</source>
          <target state="translated">包含-测试一个词是否存在于列表中。</target>
        </trans-unit>
        <trans-unit id="eee0bbba4ff92adbeb038a77df0466d660f15716" translate="yes" xml:space="preserve">
          <source>continue</source>
          <target state="translated">continue</target>
        </trans-unit>
        <trans-unit id="3dcfedcccb8d23e7c6644e8aaa4e93528f238e86" translate="yes" xml:space="preserve">
          <source>continue - skip the remainder of the current iteration of the current inner loop</source>
          <target state="translated">continue-跳过当前内循环迭代的剩余部分。</target>
        </trans-unit>
        <trans-unit id="ee9f38e186ba06f57b7b74d7e626b94e13ce2556" translate="yes" xml:space="preserve">
          <source>count</source>
          <target state="translated">count</target>
        </trans-unit>
        <trans-unit id="f9695c7d17d44b126e144bc1e4fd9b6da6439c0b" translate="yes" xml:space="preserve">
          <source>count - count the number of elements of an array</source>
          <target state="translated">count-计算一个数组中的元素数量。</target>
        </trans-unit>
        <trans-unit id="3e96454870cb43583623cd6fd2ede60817e93fe7" translate="yes" xml:space="preserve">
          <source>dirh</source>
          <target state="translated">dirh</target>
        </trans-unit>
        <trans-unit id="0c8c1d4815753a4a62148f6267504e711947a5a6" translate="yes" xml:space="preserve">
          <source>dirh - print directory history</source>
          <target state="translated">dirh-打印目录历史</target>
        </trans-unit>
        <trans-unit id="4d47d2db541c41663c8c0bc2b1795aa88c209d4d" translate="yes" xml:space="preserve">
          <source>dirs</source>
          <target state="translated">dirs</target>
        </trans-unit>
        <trans-unit id="d78b6ac49770a83c7c282f2a24eb1a12e41b5ef0" translate="yes" xml:space="preserve">
          <source>dirs - print directory stack</source>
          <target state="translated">dirs-打印目录栈</target>
        </trans-unit>
        <trans-unit id="9b66695fe2c105488ed57178ad21457b4a8f4d6d" translate="yes" xml:space="preserve">
          <source>disown</source>
          <target state="translated">disown</target>
        </trans-unit>
        <trans-unit id="58603ac8c3e3cdf452a31e52281bae95d4d75e55" translate="yes" xml:space="preserve">
          <source>disown - remove a process from the list of jobs</source>
          <target state="translated">disown-从工作列表中删除一个进程。</target>
        </trans-unit>
        <trans-unit id="b2d21e771d9f86865c5eff193663574dd1796c8f" translate="yes" xml:space="preserve">
          <source>echo</source>
          <target state="translated">echo</target>
        </trans-unit>
        <trans-unit id="3da22d7a242ac6222e2c07ce546b9e4c6dd38dd1" translate="yes" xml:space="preserve">
          <source>echo - display a line of text</source>
          <target state="translated">echo-显示一行文字</target>
        </trans-unit>
        <trans-unit id="ae050f5b7fb8d383d62139276081853b47e7a03e" translate="yes" xml:space="preserve">
          <source>else</source>
          <target state="translated">else</target>
        </trans-unit>
        <trans-unit id="b25854c62e2574da9e59aea193dfc09880feb717" translate="yes" xml:space="preserve">
          <source>else - execute command if a condition is not met</source>
          <target state="translated">else-如果条件不满足,则执行命令。</target>
        </trans-unit>
        <trans-unit id="2e96e89125f4c1aef797410a4bfdb32c0632ef0c" translate="yes" xml:space="preserve">
          <source>emit</source>
          <target state="translated">emit</target>
        </trans-unit>
        <trans-unit id="bf4da1905dbefff0b501f9e43f751404b18c712b" translate="yes" xml:space="preserve">
          <source>emit - Emit a generic event</source>
          <target state="translated">emit-发射一个通用事件</target>
        </trans-unit>
        <trans-unit id="7a92f3d26362d6557d5701de77a63a01df61e57f" translate="yes" xml:space="preserve">
          <source>end</source>
          <target state="translated">end</target>
        </trans-unit>
        <trans-unit id="786c7d3478f2ca103089368c16db1f80f0f9c7cb" translate="yes" xml:space="preserve">
          <source>end - end a block of commands.</source>
          <target state="translated">end-结束一个命令块。</target>
        </trans-unit>
        <trans-unit id="822bc13e2d55b402eb4233cb23c9d414a7a03bc1" translate="yes" xml:space="preserve">
          <source>eval</source>
          <target state="translated">eval</target>
        </trans-unit>
        <trans-unit id="20a23908f3b688d4985f1907e61de8afef1f3a09" translate="yes" xml:space="preserve">
          <source>eval - evaluate the specified commands</source>
          <target state="translated">eval-评估指定的命令</target>
        </trans-unit>
        <trans-unit id="be62562725d30894d1641b11d5106adde66f0d79" translate="yes" xml:space="preserve">
          <source>exec</source>
          <target state="translated">exec</target>
        </trans-unit>
        <trans-unit id="766cd545cfc1fa64a7d4796ba64c27dc06bebbfc" translate="yes" xml:space="preserve">
          <source>exec - execute command in current process</source>
          <target state="translated">exec-在当前进程中执行命令</target>
        </trans-unit>
        <trans-unit id="de3ac21778e51de199438300e1a9f816c618d33a" translate="yes" xml:space="preserve">
          <source>exit</source>
          <target state="translated">exit</target>
        </trans-unit>
        <trans-unit id="471719c1d7f23f2fb831651b4dd0b2d996e8d915" translate="yes" xml:space="preserve">
          <source>exit - exit the shell</source>
          <target state="translated">退出-退出shell</target>
        </trans-unit>
        <trans-unit id="7cb6efb98ba5972a9b5090dc2e517fe14d12cb04" translate="yes" xml:space="preserve">
          <source>false</source>
          <target state="translated">false</target>
        </trans-unit>
        <trans-unit id="6f9d12a083b81d8fbe0b94c63c69b42fb349ddbb" translate="yes" xml:space="preserve">
          <source>false - return an unsuccessful result</source>
          <target state="translated">false-返回一个不成功的结果</target>
        </trans-unit>
        <trans-unit id="72f77e84ba0149b2af1051f1318128dccf60ab60" translate="yes" xml:space="preserve">
          <source>fg</source>
          <target state="translated">fg</target>
        </trans-unit>
        <trans-unit id="d57e75549526546c15d5c9fb8e07df72a8c58c81" translate="yes" xml:space="preserve">
          <source>fg - bring job to foreground</source>
          <target state="translated">fg-将工作放到前台</target>
        </trans-unit>
        <trans-unit id="64875fcccaac069fcb3e0e201e7d5b9166641608" translate="yes" xml:space="preserve">
          <source>fish</source>
          <target state="translated">fish</target>
        </trans-unit>
        <trans-unit id="72e0e125205009a2096ed8c57d1f27ec4b75c74b" translate="yes" xml:space="preserve">
          <source>fish - the friendly interactive shell</source>
          <target state="translated">鱼--友好的互动式贝壳</target>
        </trans-unit>
        <trans-unit id="55daf0fb67b0105e5fee42d2b43a9981fcc9b191" translate="yes" xml:space="preserve">
          <source>fish also supports &lt;code&gt;and&lt;/code&gt;, &lt;code&gt;or&lt;/code&gt;, and &lt;code&gt;not&lt;/code&gt;. The first two are job modifiers and have lower precedence. Example usage:</source>
          <target state="translated">鱼也支持 &lt;code&gt;and&lt;/code&gt; ， &lt;code&gt;or&lt;/code&gt; ，and &lt;code&gt;not&lt;/code&gt; 。前两个是工作修饰符，优先级较低。用法示例：</target>
        </trans-unit>
        <trans-unit id="d0b6a9d36699331ac1f0bb6a1d6c28f0fee1e9d4" translate="yes" xml:space="preserve">
          <source>fish suggests commands as you type, based on command history, completions, and valid file paths. As you type commands, you will see a suggestion offered after the cursor, in a muted gray color (which can be changed with the &lt;code&gt;fish_color_autosuggestion&lt;/code&gt; variable).</source>
          <target state="translated">fish根据命令历史记录，补全和有效的文件路径，在键入命令时建议命令。键入命令时，您会在光标之后看到一个建议的建议，该建议为静音的灰色（可以通过 &lt;code&gt;fish_color_autosuggestion&lt;/code&gt; 变量进行更改）。</target>
        </trans-unit>
        <trans-unit id="68f36d0bf0f877357b61f16b465f75cb1a85b6d8" translate="yes" xml:space="preserve">
          <source>fish supports launching in private mode via &lt;code&gt;fish --private&lt;/code&gt; (or &lt;code&gt;fish -P&lt;/code&gt; for short). In private mode, old history is not available and any interactive commands you execute will not be appended to the global history file, making it useful both for avoiding inadvertently leaking personal information (e.g. for screencasts) and when dealing with sensitive information to prevent it being persisted to disk. You can query the global variable &lt;code&gt;fish_private_mode&lt;/code&gt; (&lt;code&gt;if set -q fish_private_mode ...&lt;/code&gt;) if you would like to respect the user's wish for privacy and alter the behavior of your own fish scripts.</source>
          <target state="translated">fish支持通过 &lt;code&gt;fish --private&lt;/code&gt; （或简称 &lt;code&gt;fish -P&lt;/code&gt; ）以私有模式启动。在私有模式下，旧历史记录不可用，并且您执行的任何交互式命令都不会附加到全局历史记录文件中，这对于避免无意中泄露个人信息（例如，用于屏幕录像）以及在处理敏感信息以防止其泄露时都非常有用坚持到磁盘。如果您想遵守用户对隐私的要求并更改自己的fish脚本的行为， &lt;code&gt;if set -q fish_private_mode ...&lt;/code&gt; 可以查询全局变量 &lt;code&gt;fish_private_mode&lt;/code&gt; （如果设置了-q fish_private_mode ...）。</target>
        </trans-unit>
        <trans-unit id="0c4f6d7aed742643b6fbdc12202fe3db52010252" translate="yes" xml:space="preserve">
          <source>fish supports the familiar &lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt; and &lt;code&gt;||&lt;/code&gt; to combine commands, and &lt;code&gt;!&lt;/code&gt; to negate them:</source>
          <target state="translated">鱼支持熟悉的 &lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt; 和 &lt;code&gt;||&lt;/code&gt; 组合命令，和 &lt;code&gt;!&lt;/code&gt; 否定它们：</target>
        </trans-unit>
        <trans-unit id="18585084ed30bb889b3339262219e49ab2ae44bd" translate="yes" xml:space="preserve">
          <source>fish tutorial</source>
          <target state="translated">钓鱼教程</target>
        </trans-unit>
        <trans-unit id="55dedfb95373873760b0ed9625c82cb35531172a" translate="yes" xml:space="preserve">
          <source>fish waits for a period after receiving the escape character, to determine whether it is standalone or part of an escape sequence. While waiting, additional key presses make the escape key behave as a meta key. If no other key presses come in, it is handled as a standalone escape. The waiting period is set to 300 milliseconds (0.3 seconds) in the default key bindings and 10 milliseconds in the vi key bindings. It can be configured by setting the &lt;code&gt;fish_escape_delay_ms&lt;/code&gt; variable to a value between 10 and 5000 ms. It is recommended that this be a universal variable that you set once from an interactive session.</source>
          <target state="translated">fish在收到转义字符后等待一段时间，以确定它是独立的还是转义序列的一部分。在等待期间，额外的按键操作使逃逸键的行为像一个元键。如果没有其他按键输入，则将其作为独立的转义进行处理。在默认键绑定中，等待时间设置为300毫秒（0.3秒），在vi键绑定中，等待时间设置为10毫秒。可以通过将 &lt;code&gt;fish_escape_delay_ms&lt;/code&gt; 变量设置为10到5000 ms之间的值来配置它。建议将此变量设置为您从交互式会话中一次设置的通用变量。</target>
        </trans-unit>
        <trans-unit id="baba6f248a72657be16047fe4da7199bc44ea8e3" translate="yes" xml:space="preserve">
          <source>fish_breakpoint_prompt</source>
          <target state="translated">fish_breakpoint_prompt</target>
        </trans-unit>
        <trans-unit id="d7bd245d8c242e03fae1578420c74d8093b0ee04" translate="yes" xml:space="preserve">
          <source>fish_breakpoint_prompt - define the appearance of the command line prompt when in the context of a `breakpoint` command</source>
          <target state="translated">fish_breakpoint_prompt-定义在使用 &quot;breakpoint &quot;命令时命令行提示的外观。</target>
        </trans-unit>
        <trans-unit id="5a3fc1d157b0191f6866ceecc3630a982089cde4" translate="yes" xml:space="preserve">
          <source>fish_config</source>
          <target state="translated">fish_config</target>
        </trans-unit>
        <trans-unit id="183a6fdb6a00d86295de833100112576b1cb4834" translate="yes" xml:space="preserve">
          <source>fish_config - start the web-based configuration interface</source>
          <target state="translated">fish_config-启动基于网络的配置界面。</target>
        </trans-unit>
        <trans-unit id="2397e0dc3855f2a5c3c894e107875e26a08a4480" translate="yes" xml:space="preserve">
          <source>fish_indent</source>
          <target state="translated">fish_indent</target>
        </trans-unit>
        <trans-unit id="c6e19f4ee30f4e23e4160409b9be9c8d16942cd4" translate="yes" xml:space="preserve">
          <source>fish_indent - indenter and prettifier</source>
          <target state="translated">fish_indent-缩进器和定标器。</target>
        </trans-unit>
        <trans-unit id="127fb90e55ea67e053d705088a841052da6eef7c" translate="yes" xml:space="preserve">
          <source>fish_key_reader</source>
          <target state="translated">fish_key_reader</target>
        </trans-unit>
        <trans-unit id="69a0ebb11cb1a759ede45515c0024c4ec8c9ee18" translate="yes" xml:space="preserve">
          <source>fish_key_reader - explore what characters keyboard keys send</source>
          <target state="translated">fish_key_reader-探索键盘按键发送的字符。</target>
        </trans-unit>
        <trans-unit id="b07df081e3eda23a685e0d24569437ba4ab4a6ff" translate="yes" xml:space="preserve">
          <source>fish_mode_prompt</source>
          <target state="translated">fish_mode_prompt</target>
        </trans-unit>
        <trans-unit id="753b48a0cc344eee0593915eb34429a7626e167e" translate="yes" xml:space="preserve">
          <source>fish_mode_prompt - define the appearance of the mode indicator</source>
          <target state="translated">fish_mode_prompt-定义模式指示器的外观。</target>
        </trans-unit>
        <trans-unit id="3c9b15ad3294d2aa5aa52ac9e2632d2eae53e420" translate="yes" xml:space="preserve">
          <source>fish_opt</source>
          <target state="translated">fish_opt</target>
        </trans-unit>
        <trans-unit id="543365accaae619eee02dcae6dea132a363085b7" translate="yes" xml:space="preserve">
          <source>fish_opt - create an option spec for the argparse command</source>
          <target state="translated">fish_opt-为argparse命令创建一个选项规范。</target>
        </trans-unit>
        <trans-unit id="6501c27fb0858cd3f54b84ab4f9f296d0dda8c9c" translate="yes" xml:space="preserve">
          <source>fish_prompt</source>
          <target state="translated">fish_prompt</target>
        </trans-unit>
        <trans-unit id="cd788e8b2b186c68bc7b4e563896df245043a589" translate="yes" xml:space="preserve">
          <source>fish_prompt - define the appearance of the command line prompt</source>
          <target state="translated">fish_prompt-定义命令行提示符的外观。</target>
        </trans-unit>
        <trans-unit id="f78d4c9641a64c769e933588d8994ca394327414" translate="yes" xml:space="preserve">
          <source>fish_right_prompt</source>
          <target state="translated">fish_right_prompt</target>
        </trans-unit>
        <trans-unit id="4f1afbb85b31538c97624a72a30d55414589b49a" translate="yes" xml:space="preserve">
          <source>fish_right_prompt - define the appearance of the right-side command line prompt</source>
          <target state="translated">fish_right_prompt-定义右侧命令行提示的外观。</target>
        </trans-unit>
        <trans-unit id="8b339b0c658d3c4228467574152fa75f2375b32e" translate="yes" xml:space="preserve">
          <source>fish_update_completions</source>
          <target state="translated">fish_update_completions</target>
        </trans-unit>
        <trans-unit id="90c9f004ea4a216adfd9c72340b8112edb288283" translate="yes" xml:space="preserve">
          <source>fish_update_completions - Update completions using manual pages</source>
          <target state="translated">fish_update_completions-使用手动页面更新completions。</target>
        </trans-unit>
        <trans-unit id="f76de474163a63c296945fcd9d696f36636c8aef" translate="yes" xml:space="preserve">
          <source>fish_vi_mode</source>
          <target state="translated">fish_vi_mode</target>
        </trans-unit>
        <trans-unit id="410186a970357c931e2a7dec30a37b5a1e74ebea" translate="yes" xml:space="preserve">
          <source>fish_vi_mode - Enable vi mode</source>
          <target state="translated">fish_vi_mode-启用vi模式。</target>
        </trans-unit>
        <trans-unit id="43eef9a62abb8b1e1654f8a890aae054abffa82b" translate="yes" xml:space="preserve">
          <source>for</source>
          <target state="translated">for</target>
        </trans-unit>
        <trans-unit id="6aa32fad737b7aa5ceaccf76038f5bbfb35631a8" translate="yes" xml:space="preserve">
          <source>for - perform a set of commands multiple times.</source>
          <target state="translated">for -多次执行一组命令。</target>
        </trans-unit>
        <trans-unit id="c039c214c3b0d96340e4ef72f733eedd0388e42d" translate="yes" xml:space="preserve">
          <source>funced</source>
          <target state="translated">funced</target>
        </trans-unit>
        <trans-unit id="0816bc375ac09bd74efea8d7a85a93023e8ffa5a" translate="yes" xml:space="preserve">
          <source>funced - edit a function interactively</source>
          <target state="translated">funced-以交互方式编辑一个函数</target>
        </trans-unit>
        <trans-unit id="3bc1aee64f9e2c4c5efada178ad6165cab6377cc" translate="yes" xml:space="preserve">
          <source>funcsave</source>
          <target state="translated">funcsave</target>
        </trans-unit>
        <trans-unit id="2f69307df7e91d4902cb35c04dd61609789e8b05" translate="yes" xml:space="preserve">
          <source>funcsave - save the definition of a function to the user's autoload directory</source>
          <target state="translated">funcsave-将函数的定义保存到用户的自动加载目录中。</target>
        </trans-unit>
        <trans-unit id="c218e39efa2e1aae69f39d2054528369ce1e1f46" translate="yes" xml:space="preserve">
          <source>function</source>
          <target state="translated">function</target>
        </trans-unit>
        <trans-unit id="bf41a97c9825ae2e3550fdddcd8aaf42e45d7245" translate="yes" xml:space="preserve">
          <source>function - create a function</source>
          <target state="translated">功能-创建一个功能</target>
        </trans-unit>
        <trans-unit id="2f887def33825e52ffbcca83446cfd6a6f676ff7" translate="yes" xml:space="preserve">
          <source>functions</source>
          <target state="translated">functions</target>
        </trans-unit>
        <trans-unit id="a2dd0c9d390ee256fa9d3c2d2857526a5930b073" translate="yes" xml:space="preserve">
          <source>functions - print or erase functions</source>
          <target state="translated">功能-打印或擦除功能</target>
        </trans-unit>
        <trans-unit id="92005ecf3788faea8346a7919fba0232188561ab" translate="yes" xml:space="preserve">
          <source>help</source>
          <target state="translated">help</target>
        </trans-unit>
        <trans-unit id="90df5c81817176fc99bd4d5ed355b097e8ac84fe" translate="yes" xml:space="preserve">
          <source>help - display fish documentation</source>
          <target state="translated">帮助-显示鱼文件</target>
        </trans-unit>
        <trans-unit id="66f79d8a6327c82c9033e6d65ff03322a3766c87" translate="yes" xml:space="preserve">
          <source>history</source>
          <target state="translated">history</target>
        </trans-unit>
        <trans-unit id="9c54bcb9992fb9affc2aedd28a291f6b1a369e0b" translate="yes" xml:space="preserve">
          <source>history - Show and manipulate command history</source>
          <target state="translated">历史-显示和操作命令历史</target>
        </trans-unit>
        <trans-unit id="958f57f57d72a30f329ee5538f21b0257a49a46e" translate="yes" xml:space="preserve">
          <source>if</source>
          <target state="translated">if</target>
        </trans-unit>
        <trans-unit id="f95ea4c87a089d830126713a97723833a9fd76fc" translate="yes" xml:space="preserve">
          <source>if - conditionally execute a command</source>
          <target state="translated">if-有条件地执行一个命令</target>
        </trans-unit>
        <trans-unit id="24def2dc36d8c488f6dd73f146437207b25f618c" translate="yes" xml:space="preserve">
          <source>isatty</source>
          <target state="translated">isatty</target>
        </trans-unit>
        <trans-unit id="3cfe607d872677db1789d97ef106886f84f5899b" translate="yes" xml:space="preserve">
          <source>isatty - test if a file descriptor is a tty.</source>
          <target state="translated">isatty-测试文件描述符是否为tty。</target>
        </trans-unit>
        <trans-unit id="638dbc85cd3410c50689528013eccaae778361f3" translate="yes" xml:space="preserve">
          <source>it will print &lt;code&gt;xax xbx xcx&lt;/code&gt;.</source>
          <target state="translated">它将打印 &lt;code&gt;xax xbx xcx&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="6966922100bf006356af2b9098e6ba3b1c190226" translate="yes" xml:space="preserve">
          <source>jobs</source>
          <target state="translated">jobs</target>
        </trans-unit>
        <trans-unit id="2c0538a731bda1d0b48cf0b71c7f1eea39760d56" translate="yes" xml:space="preserve">
          <source>jobs - print currently running jobs</source>
          <target state="translated">工作-打印当前正在运行的工作</target>
        </trans-unit>
        <trans-unit id="eab8b533a9af65bf25991bce5aab55764e3ca4e8" translate="yes" xml:space="preserve">
          <source>jobs accepts the following switches:</source>
          <target state="translated">jobs接受以下开关。</target>
        </trans-unit>
        <trans-unit id="7a488390a939c4795cc1a801e51751d5f25d800d" translate="yes" xml:space="preserve">
          <source>math</source>
          <target state="translated">math</target>
        </trans-unit>
        <trans-unit id="ac55c69e1a4e4deadae82d7d2501bb6e8354689f" translate="yes" xml:space="preserve">
          <source>math - Perform mathematics calculations</source>
          <target state="translated">数学-进行数学计算</target>
        </trans-unit>
        <trans-unit id="5788f5d9921db1d9d54ea779e091c82300b105e9" translate="yes" xml:space="preserve">
          <source>nextd</source>
          <target state="translated">nextd</target>
        </trans-unit>
        <trans-unit id="5962cd086d9c9b34c1fe8730983fbd9559aed0f5" translate="yes" xml:space="preserve">
          <source>nextd - move forward through directory history</source>
          <target state="translated">nextd-通过目录历史向前移动</target>
        </trans-unit>
        <trans-unit id="d058f2cdd7781f829008a74cc23a43186eacb161" translate="yes" xml:space="preserve">
          <source>no output.</source>
          <target state="translated">没有输出。</target>
        </trans-unit>
        <trans-unit id="557f255516719ea16f8f4a0aae1166054e2c9b43" translate="yes" xml:space="preserve">
          <source>not</source>
          <target state="translated">not</target>
        </trans-unit>
        <trans-unit id="4575a330b9abc396835c8ef87416bed7db17b511" translate="yes" xml:space="preserve">
          <source>not - negate the exit status of a job</source>
          <target state="translated">不-否定工作的退出状态。</target>
        </trans-unit>
        <trans-unit id="5fc7e38bffe00ca46add89145464a2eaf759d5c2" translate="yes" xml:space="preserve">
          <source>open</source>
          <target state="translated">open</target>
        </trans-unit>
        <trans-unit id="199b395ad03deff5d4ae7fbee3ed860eb83c6145" translate="yes" xml:space="preserve">
          <source>open - open file in its default application</source>
          <target state="translated">open-在其默认应用程序中打开文件</target>
        </trans-unit>
        <trans-unit id="1758356db21759f7c5a0da9b4dd1db8fd6feab3f" translate="yes" xml:space="preserve">
          <source>or</source>
          <target state="translated">or</target>
        </trans-unit>
        <trans-unit id="711125b2ab4f03f077b0f47796a68a231b18fde3" translate="yes" xml:space="preserve">
          <source>or - conditionally execute a command</source>
          <target state="translated">或-有条件地执行一个命令</target>
        </trans-unit>
        <trans-unit id="4a4fca309e453918d1fa9832f4ef19832f32f1de" translate="yes" xml:space="preserve">
          <source>or opted into globally for a user:</source>
          <target state="translated">或为用户全局选择进入。</target>
        </trans-unit>
        <trans-unit id="bd053f79a6a0b97eca270388d4266f6cdc2e5d1f" translate="yes" xml:space="preserve">
          <source>popd</source>
          <target state="translated">popd</target>
        </trans-unit>
        <trans-unit id="c0ad7ae5d6dea353b86b7975b175fb7ec7a5b0d8" translate="yes" xml:space="preserve">
          <source>popd - move through directory stack</source>
          <target state="translated">popd-在目录栈中移动</target>
        </trans-unit>
        <trans-unit id="501bed2ce7870bcc5b0594fe851ae7aafaa0d983" translate="yes" xml:space="preserve">
          <source>press &lt;code&gt;Ctrl-C&lt;/code&gt; twice, or</source>
          <target state="translated">按 &lt;code&gt;Ctrl-C&lt;/code&gt; 两次，或</target>
        </trans-unit>
        <trans-unit id="7dc7f09beed59586cbda067c6eeb7b7166812ad2" translate="yes" xml:space="preserve">
          <source>press &lt;code&gt;Ctrl-D&lt;/code&gt; twice, or</source>
          <target state="translated">按 &lt;code&gt;Ctrl-D&lt;/code&gt; 两次，或</target>
        </trans-unit>
        <trans-unit id="e291f27c814229dc2eb10fa92c9b8c4185958322" translate="yes" xml:space="preserve">
          <source>prevd</source>
          <target state="translated">prevd</target>
        </trans-unit>
        <trans-unit id="f7c05f49b7608d19659229d1610a7b144fd04131" translate="yes" xml:space="preserve">
          <source>prevd - move backward through directory history</source>
          <target state="translated">prevd-通过目录历史向后移动</target>
        </trans-unit>
        <trans-unit id="df39b4caf493869772ff3a0f95cca6a9ae7934dc" translate="yes" xml:space="preserve">
          <source>printf</source>
          <target state="translated">printf</target>
        </trans-unit>
        <trans-unit id="3c6a47d2ffca0ad0d4a07143fcfbfd3c2bf900e7" translate="yes" xml:space="preserve">
          <source>printf - display text according to a format string</source>
          <target state="translated">printf-根据格式字符串显示文本。</target>
        </trans-unit>
        <trans-unit id="21999975d6629ee4bcf6c7777ee78ef2dde68352" translate="yes" xml:space="preserve">
          <source>printf also knows a number of backslash escapes:</source>
          <target state="translated">printf还知道一些反斜杠转义。</target>
        </trans-unit>
        <trans-unit id="f0e9a119bdd370e572983792f8da0fd600bbb244" translate="yes" xml:space="preserve">
          <source>printf formats the string FORMAT with ARGUMENT, and displays the result.</source>
          <target state="translated">printf 用 ARGUMENT 格式化字符串 FORMAT,并显示结果。</target>
        </trans-unit>
        <trans-unit id="03b62a0fc91ac76f534c8506377fd0cd7094b326" translate="yes" xml:space="preserve">
          <source>prompt_pwd</source>
          <target state="translated">prompt_pwd</target>
        </trans-unit>
        <trans-unit id="379685f1a28ec5f5585e4ea14e8526590620679f" translate="yes" xml:space="preserve">
          <source>prompt_pwd - Print pwd suitable for prompt</source>
          <target state="translated">prompt_pwd-打印适合提示的pwd。</target>
        </trans-unit>
        <trans-unit id="a140601076b214970f21dd77e03c7939cd93ecdc" translate="yes" xml:space="preserve">
          <source>prompt_pwd is a function to print the current working directory in a way suitable for prompts. It will replace the home directory with &quot;~&quot; and shorten every path component but the last to a default of one character.</source>
          <target state="translated">prompt_pwd 是一个以适合提示符的方式打印当前工作目录的函数。它将用&quot;~&quot;代替主目录,并将每个路径组件(除了最后一个)缩短为默认的一个字符。</target>
        </trans-unit>
        <trans-unit id="9afd2538d3d4ffb696f4dcdd4ab6baadf04ff522" translate="yes" xml:space="preserve">
          <source>psub</source>
          <target state="translated">psub</target>
        </trans-unit>
        <trans-unit id="63fbf23d9d9b481ea407c815c90933057897af4b" translate="yes" xml:space="preserve">
          <source>psub - perform process substitution</source>
          <target state="translated">psub-执行过程替换</target>
        </trans-unit>
        <trans-unit id="ca99455ec63652d0ac9ec250727ee0c6c910786e" translate="yes" xml:space="preserve">
          <source>pushd</source>
          <target state="translated">pushd</target>
        </trans-unit>
        <trans-unit id="9160b1d55f9fa10d249ec7b308dccac953b32fc0" translate="yes" xml:space="preserve">
          <source>pushd - push directory to directory stack</source>
          <target state="translated">pushd-推送目录到目录栈</target>
        </trans-unit>
        <trans-unit id="37fa265330ad83eaa879efb1e2db6380896cf639" translate="yes" xml:space="preserve">
          <source>pwd</source>
          <target state="translated">pwd</target>
        </trans-unit>
        <trans-unit id="3f4e967878bd5e1bb4a87ca851b714379daca044" translate="yes" xml:space="preserve">
          <source>pwd - output the current working directory</source>
          <target state="translated">pwd-输出当前工作目录</target>
        </trans-unit>
        <trans-unit id="a415ab5cc17c8c093c015ccdb7e552aee7911aa4" translate="yes" xml:space="preserve">
          <source>random</source>
          <target state="translated">random</target>
        </trans-unit>
        <trans-unit id="a2268607239de0e6afadb64003588824de27a1ad" translate="yes" xml:space="preserve">
          <source>random - generate random number</source>
          <target state="translated">随机-产生随机数</target>
        </trans-unit>
        <trans-unit id="a7afddb68260a60f86c02a021efba7f216c2e7cf" translate="yes" xml:space="preserve">
          <source>read</source>
          <target state="translated">read</target>
        </trans-unit>
        <trans-unit id="02d0fa56be4fca5d7cc0c6db5a7aa370743eb4ff" translate="yes" xml:space="preserve">
          <source>read - read line of input into variables</source>
          <target state="translated">read-将输入的行读入变量</target>
        </trans-unit>
        <trans-unit id="ff2b5744be5fceda4fc467fda551bcbf199f8fa0" translate="yes" xml:space="preserve">
          <source>realpath</source>
          <target state="translated">realpath</target>
        </trans-unit>
        <trans-unit id="2caa95ad63632ed3825a317f46514c851816d5ab" translate="yes" xml:space="preserve">
          <source>realpath - Convert a path to an absolute path without symlinks</source>
          <target state="translated">realpath-将一个路径转换为没有符号链接的绝对路径。</target>
        </trans-unit>
        <trans-unit id="63143b6f8007b98c53ca2149822777b3566f9241" translate="yes" xml:space="preserve">
          <source>return</source>
          <target state="translated">return</target>
        </trans-unit>
        <trans-unit id="288b5d6d1a89a6e706dfc7486e06e4a8d8078410" translate="yes" xml:space="preserve">
          <source>return - stop the current inner function</source>
          <target state="translated">return-停止当前的内部函数</target>
        </trans-unit>
        <trans-unit id="65c10dc3549fe07424148a8a4790a3341ecbc253" translate="yes" xml:space="preserve">
          <source>set</source>
          <target state="translated">set</target>
        </trans-unit>
        <trans-unit id="063c17e14f7627ded7c57ede98e0f6ca9045fc66" translate="yes" xml:space="preserve">
          <source>set - display and change shell variables.</source>
          <target state="translated">set-显示和更改shell变量。</target>
        </trans-unit>
        <trans-unit id="20f7c32664f5d1e0b9c515a18fcf90cdb3c57984" translate="yes" xml:space="preserve">
          <source>set_color</source>
          <target state="translated">set_color</target>
        </trans-unit>
        <trans-unit id="cff11275c6338d2e5dde20951c1557cf0de59d43" translate="yes" xml:space="preserve">
          <source>set_color - set the terminal color</source>
          <target state="translated">set_color-设置终端的颜色</target>
        </trans-unit>
        <trans-unit id="828d338a9b04221c9cbe286f50cd389f68de4ecf" translate="yes" xml:space="preserve">
          <source>source</source>
          <target state="translated">source</target>
        </trans-unit>
        <trans-unit id="2f7991a9100c9583f2155802c7350aa74443ed20" translate="yes" xml:space="preserve">
          <source>source - evaluate contents of file.</source>
          <target state="translated">源-评估文件的内容。</target>
        </trans-unit>
        <trans-unit id="506a7e1ca8d34664e2b86653d70401c523f26553" translate="yes" xml:space="preserve">
          <source>spawns &lt;code&gt;sleep&lt;/code&gt; in the background, and then waits until it finishes.</source>
          <target state="translated">生成器在后台 &lt;code&gt;sleep&lt;/code&gt; ，然后等待直到完成。</target>
        </trans-unit>
        <trans-unit id="78dbe5e491bc63d2e79ab65c266d6d41e91f56ff" translate="yes" xml:space="preserve">
          <source>spawns five jobs and &lt;code&gt;hoge&lt;/code&gt; in the background, and then waits until all &lt;code&gt;sleep&lt;/code&gt;s finishes, and doesn't wait for &lt;code&gt;hoge&lt;/code&gt; finishing.</source>
          <target state="translated">产卵五个作业和 &lt;code&gt;hoge&lt;/code&gt; 在后台，然后等待，直到所有的 &lt;code&gt;sleep&lt;/code&gt; 小号完成，而不会等待 &lt;code&gt;hoge&lt;/code&gt; 整理。</target>
        </trans-unit>
        <trans-unit id="b6e22225897433914493a887f4a4f462d9a13ced" translate="yes" xml:space="preserve">
          <source>spawns five jobs in the background, and then waits until all of them finishes.</source>
          <target state="translated">在后台生成五个作业,然后等待所有作业完成。</target>
        </trans-unit>
        <trans-unit id="48a3661d846478fa991a825ebd10b78671444b5b" translate="yes" xml:space="preserve">
          <source>status</source>
          <target state="translated">status</target>
        </trans-unit>
        <trans-unit id="420a0e9d08406c887fa9f473fb502e30acd9a336" translate="yes" xml:space="preserve">
          <source>status - query fish runtime information</source>
          <target state="translated">状态--查询鱼的运行时间信息</target>
        </trans-unit>
        <trans-unit id="33a9e6923b5cff6e1c9fb560ddb572a069a669c0" translate="yes" xml:space="preserve">
          <source>stdin and stdout can be redirected via the familiar &amp;lt; and &amp;gt;. stderr is redirected with a &amp;gt;2.</source>
          <target state="translated">stdin和stdout可以通过熟悉的&amp;lt;和&amp;gt;重定向。将stderr重定向为&amp;gt; 2。</target>
        </trans-unit>
        <trans-unit id="ecb252044b5ea0f679ee78ec1a12904739e2904d" translate="yes" xml:space="preserve">
          <source>string</source>
          <target state="translated">string</target>
        </trans-unit>
        <trans-unit id="5eb279c348daa58c49a3c45c42799e5a0b7195c1" translate="yes" xml:space="preserve">
          <source>string - manipulate strings</source>
          <target state="translated">字符串-操作字符串</target>
        </trans-unit>
        <trans-unit id="b6f0c43f69fad2bd2df597f8c1f9289bf8ebf0a2" translate="yes" xml:space="preserve">
          <source>suspend</source>
          <target state="translated">suspend</target>
        </trans-unit>
        <trans-unit id="0a906b8b4efdea69b1aa7921bd59ea5a07a19f19" translate="yes" xml:space="preserve">
          <source>suspend - suspend the current shell</source>
          <target state="translated">suspend-暂停当前的shell</target>
        </trans-unit>
        <trans-unit id="01ba7992f85de477e8e630428eb5ed14769f9155" translate="yes" xml:space="preserve">
          <source>switch</source>
          <target state="translated">switch</target>
        </trans-unit>
        <trans-unit id="b6b1294b1f61dc5bf9ee190db20eac07851abf99" translate="yes" xml:space="preserve">
          <source>switch - conditionally execute a block of commands</source>
          <target state="translated">切换-有条件地执行一组命令</target>
        </trans-unit>
        <trans-unit id="a94a8fe5ccb19ba61c4c0873d391e987982fbbd3" translate="yes" xml:space="preserve">
          <source>test</source>
          <target state="translated">test</target>
        </trans-unit>
        <trans-unit id="4f3107d98473bb39c5345a7b62319a827c9d8057" translate="yes" xml:space="preserve">
          <source>test - perform tests on files and text</source>
          <target state="translated">测试-对文件和文本进行测试</target>
        </trans-unit>
        <trans-unit id="c87a7f7b83a3a58c6087ce1eb24509a6f210bbe6" translate="yes" xml:space="preserve">
          <source>the function description minimally escaped so it is a single line or &lt;code&gt;n/a&lt;/code&gt; if the function isn't defined.</source>
          <target state="translated">函数描述最少转义，因此为单行；如果未定义函数，则为 &lt;code&gt;n/a&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="02aa698783c53dd6998a194b4ec93ca8e6192a89" translate="yes" xml:space="preserve">
          <source>the line number within the file or zero if not applicable,</source>
          <target state="translated">文件中的行号,如果不适用,则为零。</target>
        </trans-unit>
        <trans-unit id="d326199cf56e0ae280f8a9fda92ba199137f5b06" translate="yes" xml:space="preserve">
          <source>the pathname as already described,</source>
          <target state="translated">的路径名,如前所述。</target>
        </trans-unit>
        <trans-unit id="93fde051556cb8919a6c75036bae40f55a1a1718" translate="yes" xml:space="preserve">
          <source>to change this prompt see &lt;a href=&quot;#tut_prompt&quot;&gt;how to change your prompt&lt;/a&gt;</source>
          <target state="translated">更改此提示，请参阅&lt;a href=&quot;#tut_prompt&quot;&gt;如何更改提示&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="b60b004f5d8183032d2f3fcf34a581edbdea5c61" translate="yes" xml:space="preserve">
          <source>to switch to fish permanently see &lt;a href=&quot;#tut_switching_to_fish&quot;&gt;switch your default shell to fish&lt;/a&gt;</source>
          <target state="translated">要永久切换为鱼类，请参见&lt;a href=&quot;#tut_switching_to_fish&quot;&gt;将默认外壳切换为鱼类&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="e6d307367af5382983ed0d6888c8e3e045355281" translate="yes" xml:space="preserve">
          <source>trap</source>
          <target state="translated">trap</target>
        </trans-unit>
        <trans-unit id="3abaf5ffe5c75ece5fd52f452cf4a7f90fed7421" translate="yes" xml:space="preserve">
          <source>trap - perform an action when the shell receives a signal</source>
          <target state="translated">陷阱-当shell接收到一个信号时,执行一个动作。</target>
        </trans-unit>
        <trans-unit id="5ffe533b830f08a0326348a9160afafc8ada44db" translate="yes" xml:space="preserve">
          <source>true</source>
          <target state="translated">true</target>
        </trans-unit>
        <trans-unit id="10b80755987d5e861fcb4c74925a714ba8dce054" translate="yes" xml:space="preserve">
          <source>true - return a successful result</source>
          <target state="translated">true-返回一个成功的结果</target>
        </trans-unit>
        <trans-unit id="d0a3e7f81a9885e99049d1cae0336d269d5e47a9" translate="yes" xml:space="preserve">
          <source>type</source>
          <target state="translated">type</target>
        </trans-unit>
        <trans-unit id="fa189f6932e07966b2945f9c641067e1250a2bb7" translate="yes" xml:space="preserve">
          <source>type - indicate how a command would be interpreted</source>
          <target state="translated">类型--表示如何解释命令。</target>
        </trans-unit>
        <trans-unit id="6747212f18c8e5d826c489535a7ede3cf68eb31d" translate="yes" xml:space="preserve">
          <source>type &lt;code&gt;exit&lt;/code&gt;, or</source>
          <target state="translated">输入 &lt;code&gt;exit&lt;/code&gt; ，或</target>
        </trans-unit>
        <trans-unit id="8f17cfc3a44394fc7a0575f4eb71f3dbd5d29eb7" translate="yes" xml:space="preserve">
          <source>type &lt;code&gt;quit&lt;/code&gt;</source>
          <target state="translated">键入 &lt;code&gt;quit&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="6e5e5b45aaa91b76b5567fa66b0d05fe7289fd30" translate="yes" xml:space="preserve">
          <source>ulimit</source>
          <target state="translated">ulimit</target>
        </trans-unit>
        <trans-unit id="6f97e285ade4768f7a97feb604606ad49d5d73d5" translate="yes" xml:space="preserve">
          <source>ulimit - set or get resource usage limits</source>
          <target state="translated">ulimit-设置或获取资源使用限制。</target>
        </trans-unit>
        <trans-unit id="4b824f445e8d64ec6f262547c18a3ab02a6fd22c" translate="yes" xml:space="preserve">
          <source>umask</source>
          <target state="translated">umask</target>
        </trans-unit>
        <trans-unit id="40ce63190ce7b180322f127f1880704153f8b29a" translate="yes" xml:space="preserve">
          <source>umask - set or get the file creation mode mask</source>
          <target state="translated">umask-设置或获取文件创建模式掩码。</target>
        </trans-unit>
        <trans-unit id="ed6354b5f4780263c94651c766c76e339fe47f1e" translate="yes" xml:space="preserve">
          <source>vared</source>
          <target state="translated">vared</target>
        </trans-unit>
        <trans-unit id="095ed909fb13c4817a8aeb74a62b6468a254ca8d" translate="yes" xml:space="preserve">
          <source>vared - interactively edit the value of an environment variable</source>
          <target state="translated">vared-以交互方式编辑环境变量的值。</target>
        </trans-unit>
        <trans-unit id="daaad336276d15594d0e765f96c17cd746bf4971" translate="yes" xml:space="preserve">
          <source>wait</source>
          <target state="translated">wait</target>
        </trans-unit>
        <trans-unit id="5dc68f4d1dfb375d9f030f65dae3398df707ba38" translate="yes" xml:space="preserve">
          <source>wait - wait for jobs to complete</source>
          <target state="translated">等待-等待工作完成</target>
        </trans-unit>
        <trans-unit id="daca2c7abafe19aed94611021e5a4bbeb2584565" translate="yes" xml:space="preserve">
          <source>where &lt;code&gt;__fish_contains_opt&lt;/code&gt; is a function that checks the command line buffer for the presence of a specified set of options.</source>
          <target state="translated">其中 &lt;code&gt;__fish_contains_opt&lt;/code&gt; 是用于检查命令行缓冲区中是否存在指定的选项集的函数。</target>
        </trans-unit>
        <trans-unit id="489a6e620233cc9d22541565dff2f3ac8a1d932a" translate="yes" xml:space="preserve">
          <source>which is logically equivalent to the following:</source>
          <target state="translated">这在逻辑上等同于以下内容:</target>
        </trans-unit>
        <trans-unit id="6517f89c46c3f0d6db9cb009b8c7d1f98c371fa0" translate="yes" xml:space="preserve">
          <source>while</source>
          <target state="translated">while</target>
        </trans-unit>
        <trans-unit id="1ff56800352145ff9f9300f91d5ae15e85c17b92" translate="yes" xml:space="preserve">
          <source>while - perform a command multiple times</source>
          <target state="translated">while-多次执行一个命令</target>
        </trans-unit>
        <trans-unit id="a605898fdfaef482c78ebc3e9e8274f6d32b1cba" translate="yes" xml:space="preserve">
          <source>will attempt to build the fish program, and any errors will be shown using the less pager.</source>
          <target state="translated">将尝试建立鱼的程序,任何错误都会用较少的分页器显示出来。</target>
        </trans-unit>
        <trans-unit id="e99b731e0ff1040d87b00c1c061573852dcca4b4" translate="yes" xml:space="preserve">
          <source>will call the &lt;code&gt;cat&lt;/code&gt; program with the parameter 'foo.txt', which will print the contents of the file 'foo.txt'. The contents of foo.txt will then be filtered through the program 'head', which will pass on the first ten lines of the file to the screen. For more information on how to combine commands through pipes, read the manual pages of the commands you want to use using the &lt;code&gt;man&lt;/code&gt; command. If you want to find out more about the &lt;code&gt;cat&lt;/code&gt; program, type &lt;code&gt;man cat&lt;/code&gt;.</source>
          <target state="translated">将使用参数'foo.txt' 调用 &lt;code&gt;cat&lt;/code&gt; 程序，该程序将打印文件'foo.txt'的内容。然后，foo.txt的内容将通过程序&amp;ldquo; head&amp;rdquo;进行过滤，该程序会将文件的前十行传递到屏幕。有关如何通过管道组合命令的更多信息，请使用 &lt;code&gt;man&lt;/code&gt; 命令阅读要使用的命令的手册页。如果您想了解有关 &lt;code&gt;cat&lt;/code&gt; 程序的更多信息，请键入 &lt;code&gt;man cat&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="ef5f8dfda25d3d985781b69dcb1b285ae55e913d" translate="yes" xml:space="preserve">
          <source>will run the &lt;code&gt;ls&lt;/code&gt; command, using the &lt;code&gt;-l&lt;/code&gt; option, while passing on any additional files and switches to &lt;code&gt;ls&lt;/code&gt;.</source>
          <target state="translated">将使用 &lt;code&gt;-l&lt;/code&gt; 选项运行 &lt;code&gt;ls&lt;/code&gt; 命令，同时传递任何其他文件并切换到 &lt;code&gt;ls&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="a80dacfdcbb824e4242afb200ba1d4cc653f254c" translate="yes" xml:space="preserve">
          <source>will start the emacs text editor in the background.</source>
          <target state="translated">将在后台启动emacs文本编辑器。</target>
        </trans-unit>
        <trans-unit id="875af98e94b5a2e2425bd92b03433e7c0f34dfa0" translate="yes" xml:space="preserve">
          <source>would remove the two files 'cumbersome' and 'filename.txt'.</source>
          <target state="translated">会删除'繁琐'和'filename.txt'这两个文件。</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
