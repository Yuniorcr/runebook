<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="zh-CN" datatype="htmlbody" original="fish">
    <body>
      <group id="fish">
        <trans-unit id="eb050233a037dea5009df6afea79c6a67545439a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;math $status - 128&lt;/code&gt; outputs the numerical exit status of the last command minus 128.</source>
          <target state="translated">&lt;code&gt;math $status - 128&lt;/code&gt; 输出最后一个命令的数字退出状态减去128。</target>
        </trans-unit>
        <trans-unit id="62f5bddd60dd031bee23091b7071808993dd4f83" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;math -s0 10.0 / 6.0&lt;/code&gt; outputs &lt;code&gt;1&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;math -s0 10.0 / 6.0&lt;/code&gt; 输出 &lt;code&gt;1&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="ee576ca1237b790b579b57a522ac77fdfe4dace9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;math -s3 10 / 6&lt;/code&gt; outputs &lt;code&gt;1.666&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;math -s3 10 / 6&lt;/code&gt; 输出 &lt;code&gt;1.666&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="2afd4d22ab4aec5b0acabaa13fdb5dab928d4b72" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;math 0xFF&lt;/code&gt; outputs 255, &lt;code&gt;math 0 x 3&lt;/code&gt; outputs 0 (because it computes 0 multiplied by 3).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="81cc154eafffdbcc1fc0bc775abc9037a8ee7f57" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;math 1+1&lt;/code&gt; outputs 2.</source>
          <target state="translated">&lt;code&gt;math 1+1&lt;/code&gt; 输出2。</target>
        </trans-unit>
        <trans-unit id="0b9bceb25a6bea3bf050d266eb2dabb87359d38c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;math 10 / 6&lt;/code&gt; outputs &lt;code&gt;1.666667&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;math 10 / 6&lt;/code&gt; &lt;code&gt;1.666667&lt;/code&gt; 输出1.666667。</target>
        </trans-unit>
        <trans-unit id="0506f0b9975fb7a5dac75392d203b4e4d03c48aa" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;math 5 \* 2&lt;/code&gt; or &lt;code&gt;math &quot;5 * 2&quot;&lt;/code&gt; or &lt;code&gt;math 5 &quot;*&quot; 2&lt;/code&gt; all output &lt;code&gt;10&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ac2f6b46e44457ebc6c17a24cac39023b91980ea" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;math&lt;/code&gt; ignores whitespace between arguments and takes its input as multiple arguments (internally joined with a space), so &lt;code&gt;math 2 +2&lt;/code&gt; and &lt;code&gt;math &quot;2 +    2&quot;&lt;/code&gt; work the same. &lt;code&gt;math 2 2&lt;/code&gt; is an error.</source>
          <target state="translated">&lt;code&gt;math&lt;/code&gt; 忽略参数之间的空格，并将其输入作为多个参数（内部用空格连接），因此 &lt;code&gt;math 2 +2&lt;/code&gt; 和 &lt;code&gt;math &quot;2 + 2&quot;&lt;/code&gt; 工作原理相同。 &lt;code&gt;math 2 2&lt;/code&gt; 是错误。</target>
        </trans-unit>
        <trans-unit id="5cfe1d0b897a4b186b164463b5e374849fe22e37" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;math&lt;/code&gt; ignores whitespace between arguments and takes its input as multiple arguments (internally joined with a space), so &lt;code&gt;math 2 +2&lt;/code&gt; and &lt;code&gt;math &quot;2 +&amp;nbsp;&amp;nbsp;&amp;nbsp; 2&quot;&lt;/code&gt; work the same. &lt;code&gt;math 2 2&lt;/code&gt; is an error.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9ba0660e6966691b91248fb2bd5f96aab0fbeb26" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;math&lt;/code&gt; is used to perform mathematical calculations. It supports all the usual operations such as addition, subtraction, etc. As well as functions like &lt;code&gt;abs()&lt;/code&gt;, &lt;code&gt;sqrt()&lt;/code&gt; and &lt;code&gt;log2()&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;math&lt;/code&gt; 用于执行数学计算。它支持所有常规操作，例如加法，减法等。以及 &lt;code&gt;abs()&lt;/code&gt; ， &lt;code&gt;sqrt()&lt;/code&gt; 和 &lt;code&gt;log2()&lt;/code&gt; 之类的函数。</target>
        </trans-unit>
        <trans-unit id="f0c967cc75c19f494f0c88a7accc5d3cf4435577" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;math&lt;/code&gt; knows some operators, constants, functions and can (obviously) read numbers.</source>
          <target state="translated">&lt;code&gt;math&lt;/code&gt; 知道一些运算符，常量，函数，并且可以（显然）可以读取数字。</target>
        </trans-unit>
        <trans-unit id="be9c5baace2aafc6d8913dc0e713e617b094c022" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;math&lt;/code&gt; knows the following constants:</source>
          <target state="translated">&lt;code&gt;math&lt;/code&gt; 知道以下常量：</target>
        </trans-unit>
        <trans-unit id="54b59170a6a2d63ae4126c98f35573504c3fe866" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;math&lt;/code&gt; knows the following operators:</source>
          <target state="translated">&lt;code&gt;math&lt;/code&gt; 知道以下运算符：</target>
        </trans-unit>
        <trans-unit id="009be72b39b76a473ac24d04bf2afb4a541294d2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;math&lt;/code&gt; supports the following functions:</source>
          <target state="translated">&lt;code&gt;math&lt;/code&gt; 支持以下功能：</target>
        </trans-unit>
        <trans-unit id="be1434f80555c9e72306465d0deaafae514e79ed" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;merge&lt;/code&gt; immediately incorporates history changes from other sessions. Ordinarily &lt;code&gt;fish&lt;/code&gt; ignores history changes from sessions started after the current one. This command applies those changes immediately.</source>
          <target state="translated">&lt;code&gt;merge&lt;/code&gt; 立即合并其他会话的历史记录更改。通常， &lt;code&gt;fish&lt;/code&gt; 忽略当前会话之后开始的会话的历史更改。此命令立即应用那些更改。</target>
        </trans-unit>
        <trans-unit id="774a283e059b420761769f3fd4e58b1c4617fff8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;mv&lt;/code&gt;, move (rename) files</source>
          <target state="translated">&lt;code&gt;mv&lt;/code&gt; ，移动（重命名）文件</target>
        </trans-unit>
        <trans-unit id="d5068ef44383529da8a297fad4521ff3def0b93d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;n#max&lt;/code&gt; means that flags matching the regex &quot;^--?d+$&quot; are valid. When seen they are assigned to the variables &lt;code&gt;_flag_n&lt;/code&gt; and &lt;code&gt;_flag_max&lt;/code&gt;. This allows any valid positive or negative integer to be specified by prefixing it with a single &quot;-&quot;. Many commands support this idiom. For example &lt;code&gt;head -3 /a/file&lt;/code&gt; to emit only the first three lines of /a/file. You can also specify the value using either flag: &lt;code&gt;-n NNN&lt;/code&gt; or &lt;code&gt;--max NNN&lt;/code&gt; in this example.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7023e674591c966dcf0f86a6fe75236339070f1a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;n-name=+&lt;/code&gt; means that only &lt;code&gt;--name&lt;/code&gt; is valid. It requires a value and can be used more than once. If the flag is seen then &lt;code&gt;_flag_n&lt;/code&gt; and &lt;code&gt;_flag_name&lt;/code&gt; will be set with the values associated with each occurrence of the flag.</source>
          <target state="translated">&lt;code&gt;n-name=+&lt;/code&gt; 表示仅 &lt;code&gt;--name&lt;/code&gt; 有效。它需要一个值，并且可以多次使用。如果该标志被看到然后 &lt;code&gt;_flag_n&lt;/code&gt; 和 &lt;code&gt;_flag_name&lt;/code&gt; 将与所述标志的每次发生相关联的值来设置。</target>
        </trans-unit>
        <trans-unit id="10c98ccb9e926b5c88017fefb6f1a99d034b3aee" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;n/name=&lt;/code&gt; means that both &lt;code&gt;-n&lt;/code&gt; and &lt;code&gt;--name&lt;/code&gt; are valid. It requires a value and can be used at most once. If the flag is seen then &lt;code&gt;_flag_n&lt;/code&gt; and &lt;code&gt;_flag_name&lt;/code&gt; will be set with the single mandatory value associated with the flag.</source>
          <target state="translated">&lt;code&gt;n/name=&lt;/code&gt; 表示 &lt;code&gt;-n&lt;/code&gt; 和 &lt;code&gt;--name&lt;/code&gt; 均有效。它需要一个值，并且最多只能使用一次。如果看到该标志， &lt;code&gt;_flag_name&lt;/code&gt; 使用与该标志关联的单个强制性值设置 &lt;code&gt;_flag_n&lt;/code&gt; 和_flag_name。</target>
        </trans-unit>
        <trans-unit id="11979a51fb38eb5d6b66a5b8c9d7f5b86329e977" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;n/name=?&lt;/code&gt; means that both &lt;code&gt;-n&lt;/code&gt; and &lt;code&gt;--name&lt;/code&gt; are valid. It accepts an optional value and can be used at most once. If the flag is seen then &lt;code&gt;_flag_n&lt;/code&gt; and &lt;code&gt;_flag_name&lt;/code&gt; will be set with the value associated with the flag if one was provided else it will be set with no values.</source>
          <target state="translated">&lt;code&gt;n/name=?&lt;/code&gt; 表示 &lt;code&gt;-n&lt;/code&gt; 和 &lt;code&gt;--name&lt;/code&gt; 均有效。它接受一个可选值，最多只能使用一次。如果看到该标志，那么 &lt;code&gt;_flag_n&lt;/code&gt; 和 &lt;code&gt;_flag_name&lt;/code&gt; 设置与该标志关联的值（如果提供了一个标志），否则将不设置任何值。</target>
        </trans-unit>
        <trans-unit id="6a3aaaa7ebe33bd42f7c7723f56bc9270c4a585f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;n::max&lt;/code&gt; means that flags matching the regex &quot;^--?\d+$&quot; are valid. When seen they are assigned to the variables &lt;code&gt;_flag_n&lt;/code&gt; and &lt;code&gt;_flag_max&lt;/code&gt;. This allows any valid positive or negative integer to be specified by prefixing it with a single &quot;-&quot;. Many commands support this idiom. For example &lt;code&gt;head -3 /a/file&lt;/code&gt; to emit only the first three lines of /a/file. You can also specify the value using either flag: &lt;code&gt;-n NNN&lt;/code&gt; or &lt;code&gt;--max NNN&lt;/code&gt; in this example.</source>
          <target state="translated">&lt;code&gt;n::max&lt;/code&gt; 表示与正则表达式&amp;ldquo; ^-？\ d + $&amp;rdquo;匹配的标志有效。看到时，它们被分配给变量 &lt;code&gt;_flag_n&lt;/code&gt; 和 &lt;code&gt;_flag_max&lt;/code&gt; 。这允许通过使用单个&amp;ldquo;-&amp;rdquo;作为前缀来指定任何有效的正整数或负整数。许多命令都支持该惯用法。例如 &lt;code&gt;head -3 /a/file&lt;/code&gt; 仅发出/ a / file的前三行。您也可以使用以下标志之一指定值： &lt;code&gt;-n NNN&lt;/code&gt; 或 &lt;code&gt;--max NNN&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="18757061001b09cf2873d7ed5d548b11e41c7525" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;nextd&lt;/code&gt; moves forwards &lt;code&gt;POS&lt;/code&gt; positions in the history of visited directories; if the end of the history has been hit, a warning is printed.</source>
          <target state="translated">&lt;code&gt;nextd&lt;/code&gt; 在访问目录的历史记录中向前移动 &lt;code&gt;POS&lt;/code&gt; 位置；如果历史记录的末尾被打到，则会显示警告。</target>
        </trans-unit>
        <trans-unit id="cea306a2ee9cfb2d8fb7788331bf26c28447c7f3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;not&lt;/code&gt; negates the exit status of another command. If the exit status is zero, &lt;code&gt;not&lt;/code&gt; returns 1. Otherwise, &lt;code&gt;not&lt;/code&gt; returns 0.</source>
          <target state="translated">&lt;code&gt;not&lt;/code&gt; 否定另一个命令的退出状态。如果退出状态为零， &lt;code&gt;not&lt;/code&gt; 返回1。否则， &lt;code&gt;not&lt;/code&gt; 返回0。</target>
        </trans-unit>
        <trans-unit id="db48abf0126ad617f48775398922a0b4b30d0bc0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;open *.txt&lt;/code&gt; opens all the text files in the current directory using your system's default text editor.</source>
          <target state="translated">&lt;code&gt;open *.txt&lt;/code&gt; 使用系统的默认文本编辑器打开当前目录中的所有文本文件。</target>
        </trans-unit>
        <trans-unit id="e94f06b97a3cfcb7ec8a4770650b1e748f69af17" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;open&lt;/code&gt; opens a file in its default application, using the appropriate tool for the operating system. On GNU/Linux, this requires the common but optional &lt;code&gt;xdg-open&lt;/code&gt; utility, from the &lt;code&gt;xdg-utils&lt;/code&gt; package.</source>
          <target state="translated">&lt;code&gt;open&lt;/code&gt; 使用适用于操作系统的工具在其默认应用程序中打开文件。在GNU / Linux上，这需要 &lt;code&gt;xdg-utils&lt;/code&gt; 包中的通用但可选的 &lt;code&gt;xdg-open&lt;/code&gt; 实用程序。</target>
        </trans-unit>
        <trans-unit id="23eeee895599e5eae80cda23801496141175086a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;open&lt;/code&gt;, open files with the default application associated with each filetype</source>
          <target state="translated">&lt;code&gt;open&lt;/code&gt; ，打开与每个文件类型关联的默认应用程序的文件</target>
        </trans-unit>
        <trans-unit id="6f86ac0554f4a4cf4f28495788244852b2e6599f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;or&lt;/code&gt; does not change the current exit status itself, but the command it runs most likely will. The exit status of the last foreground command to exit can always be accessed using the &lt;a href=&quot;../index#variables-status&quot;&gt;$status&lt;/a&gt; variable.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dac5a9585518dd59c14ca7616fb90e727007732e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;or&lt;/code&gt; does not change the current exit status itself, but the command it runs most likely will. The exit status of the last foreground command to exit can always be accessed using the &lt;a href=&quot;index#variables-status&quot;&gt;$status&lt;/a&gt; variable.</source>
          <target state="translated">&lt;code&gt;or&lt;/code&gt; 不更改当前退出状态本身，但它运行的命令很可能会更改。总是可以使用&lt;a href=&quot;index#variables-status&quot;&gt;$ status&lt;/a&gt;变量来访问最后一个前台命令的退出状态。</target>
        </trans-unit>
        <trans-unit id="011af2ca1a12c1a3f3a067f4ab735209202aafb7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;or&lt;/code&gt; is used to execute a command if the previous command was not successful (returned a status of something other than 0).</source>
          <target state="translated">&lt;code&gt;or&lt;/code&gt; 用于执行命令（如果先前的命令不成功）（返回的状态不是0）。</target>
        </trans-unit>
        <trans-unit id="afa6b74bd124cb8b57c3d66b4c7a1084e37218d8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;or&lt;/code&gt; statements may be used as part of the condition in an &lt;a href=&quot;#if&quot;&gt;&lt;code&gt;and&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;#while&quot;&gt;&lt;code&gt;while&lt;/code&gt;&lt;/a&gt; block. See the documentation for &lt;a href=&quot;#if&quot;&gt;&lt;code&gt;if&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#while&quot;&gt;&lt;code&gt;while&lt;/code&gt;&lt;/a&gt; for examples.</source>
          <target state="translated">&lt;code&gt;or&lt;/code&gt; 语句可用作&lt;a href=&quot;#if&quot;&gt; &lt;code&gt;and&lt;/code&gt; &lt;/a&gt;和&lt;a href=&quot;#while&quot;&gt; &lt;code&gt;while&lt;/code&gt; &lt;/a&gt;块中条件的一部分。请参阅文件&lt;a href=&quot;#if&quot;&gt; &lt;code&gt;if&lt;/code&gt; &lt;/a&gt;和&lt;a href=&quot;#while&quot;&gt; &lt;code&gt;while&lt;/code&gt; &lt;/a&gt;的例子。</target>
        </trans-unit>
        <trans-unit id="3c73d73d5ebdf318201e26c0530d1eeb58fc2ce6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;or&lt;/code&gt; statements may be used as part of the condition in an &lt;a href=&quot;if#cmd-if&quot;&gt;and&lt;/a&gt; or &lt;a href=&quot;while#cmd-while&quot;&gt;while&lt;/a&gt; block.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3f200b52a1765aa96f91d9512533bf90cd4d3e3d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pager-toggle-search&lt;/code&gt;, toggles the search field if the completions pager is visible.</source>
          <target state="translated">&lt;code&gt;pager-toggle-search&lt;/code&gt; ，如果可见补全寻呼机，则切换搜索字段。</target>
        </trans-unit>
        <trans-unit id="93e6cd2cf57f32f0f1074687103ba4dd1420c892" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pi&lt;/code&gt; - You know that one. Half of Tau. (Tau is not implemented)</source>
          <target state="translated">&lt;code&gt;pi&lt;/code&gt; -你知道那个。一半的头。（未实施Tau）</target>
        </trans-unit>
        <trans-unit id="0f446d5ed35eb5048e4c7f001b1f27dc9402116e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pipestatus&lt;/code&gt;, a list of exit statuses of all processes that made up the last executed pipe.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="91f28400f6533478b46d55c90e3c872cc0eaea4d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;popd&lt;/code&gt; removes the top directory from the directory stack and changes the working directory to the new top directory. Use &lt;a href=&quot;#pushd&quot;&gt;&lt;code&gt;pushd&lt;/code&gt;&lt;/a&gt; to add directories to the stack.</source>
          <target state="translated">&lt;code&gt;popd&lt;/code&gt; 从目录堆栈中删除顶层目录，并将工作目录更改为新的顶层目录。使用&lt;a href=&quot;#pushd&quot;&gt; &lt;code&gt;pushd&lt;/code&gt; &lt;/a&gt;入将目录添加到堆栈。</target>
        </trans-unit>
        <trans-unit id="67a047b7a48542b870bd5211e515649aee68917e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;popd&lt;/code&gt; removes the top directory from the directory stack and changes the working directory to the new top directory. Use &lt;a href=&quot;pushd#cmd-pushd&quot;&gt;pushd&lt;/a&gt; to add directories to the stack or &lt;a href=&quot;dirs#cmd-dirs&quot;&gt;dirs&lt;/a&gt; to print it.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c23cde6c68fbe655e308c020e25d49d09dd62da1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pow(x,y)&lt;/code&gt; returns x to the y (and can be written as &lt;code&gt;x ^ y&lt;/code&gt;)</source>
          <target state="translated">&lt;code&gt;pow(x,y)&lt;/code&gt; 返回x到y（可以写成 &lt;code&gt;x ^ y&lt;/code&gt; ）</target>
        </trans-unit>
        <trans-unit id="287de450b9e0483d85e25a5a84e5f182194a1456" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;prevd&lt;/code&gt; moves backwards &lt;code&gt;POS&lt;/code&gt; positions in the history of visited directories; if the beginning of the history has been hit, a warning is printed.</source>
          <target state="translated">&lt;code&gt;prevd&lt;/code&gt; 在已访问目录的历史记录中向后移动 &lt;code&gt;POS&lt;/code&gt; 位置；如果历史记录的开头已被打中，则会显示警告。</target>
        </trans-unit>
        <trans-unit id="758894fa9ac3dcdc16edfc52096829dc60931b04" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;prompt_pwd&lt;/code&gt; is a function to print the current working directory in a way suitable for prompts. It will replace the home directory with &quot;~&quot; and shorten every path component but the last to a default of one character.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e5c43c64e240d0f4ae1a99ca5c42cd0423139bc4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pushd +NUMBER&lt;/code&gt; rotates the stack counter-clockwise i.e. from bottom to top</source>
          <target state="translated">&lt;code&gt;pushd +NUMBER&lt;/code&gt; 逆时针旋转堆栈，即从下到上</target>
        </trans-unit>
        <trans-unit id="6ba679406b42673c5180f9bba2472c6204d8f0cb" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pushd -NUMBER&lt;/code&gt; rotates clockwise i.e. top to bottom.</source>
          <target state="translated">&lt;code&gt;pushd -NUMBER&lt;/code&gt; 顺时针旋转，即从上到下。</target>
        </trans-unit>
        <trans-unit id="d9173c9010853802ba5c4a311f821ba14078009e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pwd&lt;/code&gt; outputs (prints) the current working directory.</source>
          <target state="translated">&lt;code&gt;pwd&lt;/code&gt; 输出（打印）当前工作目录。</target>
        </trans-unit>
        <trans-unit id="72ec7167859aebdbfb7c4a4a7e1050eee5ed4896" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;read&lt;/code&gt; reads from standard input and either writes the result back to standard output (for use in command substitution), or stores the result in one or more shell variables. By default, &lt;code&gt;read&lt;/code&gt; reads a single line and splits it into variables on spaces or tabs. Alternatively, a null character or a maximum number of characters can be used to terminate the input, and other delimiters can be given. Unlike other shells, there is no default variable (such as &lt;code&gt;REPLY&lt;/code&gt;) for storing the result - instead, it is printed on standard output.</source>
          <target state="translated">&lt;code&gt;read&lt;/code&gt; 从标准输入读取，然后将结果写回到标准输出（用于命令替换），或将结果存储在一个或多个shell变量中。默认情况下， &lt;code&gt;read&lt;/code&gt; 读取一行，并将其拆分为空格或制表符上的变量。或者，可以使用空字符或最大字符数来终止输入，并可以指定其他定界符。与其他外壳程序不同，没有默认变量（例如 &lt;code&gt;REPLY&lt;/code&gt; ）用于存储结果-而是将其打印在标准输出上。</target>
        </trans-unit>
        <trans-unit id="581f42e718d0bcfbf0164027aaefb2e2e09daff6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;realpath&lt;/code&gt; resolves a path to its absolute path.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="35bd00f382e8670d7d44d2b40cf3fca33494e874" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;repaint-mode&lt;/code&gt; reexecutes the fish_mode_prompt function and redraws the prompt. This is useful for vi-mode. If no fish_mode_prompt exists, it acts like a normal repaint.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8af37077a702119f1289199205be5c8570e1f654" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;repaint&lt;/code&gt; reexecutes the prompt functions and redraws the prompt. Multiple successive repaints are coalesced.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ff49b83e64396ed910787499c3a6a700a00c3e74" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;repeat-jump&lt;/code&gt; and &lt;code&gt;repeat-jump-reverse&lt;/code&gt;, redo the last jump in the same/opposite direction</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4b249dc97dd0ed2d7efc75e8750d13ccd586b86f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;return&lt;/code&gt; halts a currently running function. The exit status is set to &lt;code&gt;STATUS&lt;/code&gt; if it is given.</source>
          <target state="translated">&lt;code&gt;return&lt;/code&gt; 暂停当前​​正在运行的函数。如果给出退出状态，则将其设置为 &lt;code&gt;STATUS&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="2dff648efb696543bf4783ef158dc6faac05096b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;round&lt;/code&gt; - rounds to the nearest integer, away from 0</source>
          <target state="translated">&lt;code&gt;round&lt;/code&gt; -舍入到最接近的整数，远离0</target>
        </trans-unit>
        <trans-unit id="9ae815b29923bb2081652f0d74075b638b35e307" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;save&lt;/code&gt; immediately writes all changes to the history file. The shell automatically saves the history file; this option is provided for internal use and should not normally need to be used by the user.</source>
          <target state="translated">&lt;code&gt;save&lt;/code&gt; 立即将所有更改写入历史文件。Shell自动保存历史记录文件；提供此选项供内部使用，用户通常不需要使用。</target>
        </trans-unit>
        <trans-unit id="f9cbc63b923d6e80c08215a900beb75279f6f039" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;scope-shadowing&lt;/code&gt; if the function shadows the vars in the calling function (the normal case if it wasn't defined with &lt;code&gt;--no-scope-shadowing&lt;/code&gt;), else &lt;code&gt;no-scope-shadowing&lt;/code&gt;, or &lt;code&gt;n/a&lt;/code&gt; if the function isn't defined,</source>
          <target state="translated">&lt;code&gt;scope-shadowing&lt;/code&gt; 如果该函数在调用函数中对var进行了阴影处理（正常情况下，如果未使用 &lt;code&gt;--no-scope-shadowing&lt;/code&gt; 进行定义），否则为 &lt;code&gt;no-scope-shadowing&lt;/code&gt; ，或者如果该函数不 &lt;code&gt;n/a&lt;/code&gt; 则为n / a定义</target>
        </trans-unit>
        <trans-unit id="28ff499477de962fb27a4867869e04752ace3e7f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;search&lt;/code&gt; returns history items matching the search string. If no search string is provided it returns all history items. This is the default operation if no other operation is specified. You only have to explicitly say &lt;code&gt;history search&lt;/code&gt; if you wish to search for one of the subcommands. The &lt;code&gt;--contains&lt;/code&gt; search option will be used if you don't specify a different search option. Entries are ordered newest to oldest unless you use the &lt;code&gt;--reverse&lt;/code&gt; flag. If stdout is attached to a tty the output will be piped through your pager by the history function. The history builtin simply writes the results to stdout.</source>
          <target state="translated">&lt;code&gt;search&lt;/code&gt; 返回与搜索字符串匹配的历史项。如果未提供搜索字符串，它将返回所有历史记录项。如果未指定其他操作，则这是默认操作。如果要搜索子命令之一，则只需明确说出 &lt;code&gt;history search&lt;/code&gt; 。该 &lt;code&gt;--contains&lt;/code&gt; 如果不指定不同的搜索选项搜索选项将被使用。除非使用 &lt;code&gt;--reverse&lt;/code&gt; 标志，否则条目按从新到旧的顺序排列。如果将stdout连接到tty，则历史记录功能将通过寻呼机将输出通过管道传送。内置的历史记录只是将结果写入标准输出。</target>
        </trans-unit>
        <trans-unit id="f3f96766ba4c2b74ccc38f1a311d22fc52bcedcc" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;self-insert-notfirst&lt;/code&gt;, inserts the matching sequence into the command line, unless the cursor is at the beginning</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="47994204741d29e8fba63c4defd897209f0ef532" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;self-insert&lt;/code&gt;, inserts the matching sequence into the command line</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7bc81f408553d427ee9413652a2f976a6b4c6dd9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;set&lt;/code&gt; manipulates &lt;a href=&quot;../index#variables&quot;&gt;shell variables&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="78965c3228dd7b50cac24fd22a4c3a8f0bdef2ab" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;set&lt;/code&gt; manipulates &lt;a href=&quot;index#variables&quot;&gt;shell variables&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;set&lt;/code&gt; 操作&lt;a href=&quot;index#variables&quot;&gt;shell变量&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="4f185cc7bb3302f1e1eb498766b8e2bd113f381a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;set&lt;/code&gt; requires all options to come before any other arguments. For example, &lt;code&gt;set flags -l&lt;/code&gt; will have the effect of setting the value of the variable &lt;code&gt;flags&lt;/code&gt; to '-l', not making the variable local.</source>
          <target state="translated">&lt;code&gt;set&lt;/code&gt; 需要所有选项都在任何其他参数之前。例如， &lt;code&gt;set flags -l&lt;/code&gt; 将具有将变量 &lt;code&gt;flags&lt;/code&gt; 的值设置为'-l'的作用，而不是使变量成为局部变量。</target>
        </trans-unit>
        <trans-unit id="9948f6276410fe2f9dcf81419917c9bdeb9052d6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;set_color&lt;/code&gt; is used to control the color and styling of text in the terminal. &lt;code&gt;VALUE&lt;/code&gt; corresponds to a reserved color name such as &lt;em&gt;red&lt;/em&gt; or a RGB color value given as 3 or 6 hexadecimal digits. The &lt;em&gt;br&lt;/em&gt;-, as in 'bright', forms are full-brightness variants of the 8 standard-brightness colors on many terminals. &lt;em&gt;brblack&lt;/em&gt; has higher brightness than &lt;em&gt;black&lt;/em&gt; - towards gray. A special keyword &lt;em&gt;normal&lt;/em&gt; resets text formatting to terminal defaults.</source>
          <target state="translated">&lt;code&gt;set_color&lt;/code&gt; 用于控制终端中文本的颜色和样式。 &lt;code&gt;VALUE&lt;/code&gt; 对应于保留的颜色名称，例如以3或6个十六进制数字给出的&lt;em&gt;红色&lt;/em&gt;或RGB颜色值。的&lt;em&gt;BR&lt;/em&gt; - ，如在&amp;ldquo;亮&amp;rdquo;，形式是在许多端子8标准亮度颜色的全亮度变体。&lt;em&gt;brblack的&lt;/em&gt;亮度高于&lt;em&gt;黑色&lt;/em&gt; -趋于灰色。一个特殊的关键字&lt;em&gt;normal将&lt;/em&gt;文本格式重置为终端默认值。</target>
        </trans-unit>
        <trans-unit id="9a61b97a3a96f79739663fe1e066e0c4c4c00523" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;set_color&lt;/code&gt; is used to control the color and styling of text in the terminal. &lt;code&gt;VALUE&lt;/code&gt; describes that styling. It's a reserved color name like &lt;em&gt;red&lt;/em&gt; or a RGB color value given as 3 or 6 hexadecimal digits (&quot;F27&quot; or &quot;FF2277&quot;). A special keyword &lt;em&gt;normal&lt;/em&gt; resets text formatting to terminal defaults.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ab26307dc8847048c91facf1a58ea82662da70fb" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;set_color&lt;/code&gt; works by printing sequences of characters to &lt;em&gt;stdout&lt;/em&gt;. If used in command substitution or a pipe, these characters will also be captured. This may or may not be desirable. Checking the exit code of &lt;code&gt;isatty stdout&lt;/code&gt; before using &lt;code&gt;set_color&lt;/code&gt; can be useful to decide not to colorize output in a script.</source>
          <target state="translated">&lt;code&gt;set_color&lt;/code&gt; 通过将字符序列打印到&lt;em&gt;stdout来工作&lt;/em&gt;。如果用在命令替换或管道中，这些字符也将被捕获。这可能是理想的，也可能不是理想的。在使用 &lt;code&gt;set_color&lt;/code&gt; 之前检查 &lt;code&gt;isatty stdout&lt;/code&gt; 的退出代码对于决定不对脚本中的输出进行着色很有用。</target>
        </trans-unit>
        <trans-unit id="0edcbbfc0660173d1858fb94dc65feaa1949db9a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;set_color&lt;/code&gt; works by printing sequences of characters to &lt;em&gt;stdout&lt;/em&gt;. If used in command substitution or a pipe, these characters will also be captured. This may or may not be desirable. Checking the exit status of &lt;code&gt;isatty stdout&lt;/code&gt; before using &lt;code&gt;set_color&lt;/code&gt; can be useful to decide not to colorize output in a script.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5f8f7bb400593234e096f28a62980d44f3d7595d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;source&lt;/code&gt; creates a new &lt;a href=&quot;../index#variables-scope&quot;&gt;local scope&lt;/a&gt;; &lt;code&gt;set --local&lt;/code&gt; within a sourced block will not affect variables in the enclosing scope.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="44bd12edd43e43a291874a613bddb397393e4363" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;source&lt;/code&gt; evaluates the commands of the specified file in the current shell as a new block of code. This is different from starting a new process to perform the commands (i.e. &lt;code&gt;fish &amp;lt; FILENAME&lt;/code&gt;) since the commands will be evaluated by the current shell, which means that changes in shell variables will affect the current shell. If additional arguments are specified after the file name, they will be inserted into the &lt;code&gt;$argv&lt;/code&gt; variable. The &lt;code&gt;$argv&lt;/code&gt; variable will not include the name of the sourced file.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="92cf10690e111961211954c672900c642fb4e17e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;source&lt;/code&gt; evaluates the commands of the specified file in the current shell. This is different from starting a new process to perform the commands (i.e. &lt;code&gt;fish &amp;lt; FILENAME&lt;/code&gt;) since the commands will be evaluated by the current shell, which means that changes in shell variables will affect the current shell. If additional arguments are specified after the file name, they will be inserted into the &lt;code&gt;$argv&lt;/code&gt; variable. The &lt;code&gt;$argv&lt;/code&gt; variable will not include the name of the sourced file.</source>
          <target state="translated">&lt;code&gt;source&lt;/code&gt; 评估当前shell中指定文件的命令。这与开始执行命令的新过程（即 &lt;code&gt;fish &amp;lt; FILENAME&lt;/code&gt; ）不同，因为命令将由当前shell评估，这意味着shell变量的更改将影响当前shell。如果在文件名后指定了其他参数，则将它们插入 &lt;code&gt;$argv&lt;/code&gt; 变量中。在 &lt;code&gt;$argv&lt;/code&gt; 变量将不包括源文件的名称。</target>
        </trans-unit>
        <trans-unit id="b682c0f9f4fd30b611d91123367bf03905b468de" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;split0&lt;/code&gt; has the important property that its output is not further split when used in a command substitution, allowing for the command substitution to produce elements containing newlines. This is most useful when used with Unix tools that produce zero bytes, such as &lt;code&gt;find -print0&lt;/code&gt; or &lt;code&gt;sort -z&lt;/code&gt;. See split0 examples below.</source>
          <target state="translated">&lt;code&gt;split0&lt;/code&gt; 具有重要的属性，当在命令替换中使用时，其输出不会进一步拆分，从而允许命令替换生成包含换行符的元素。与产生零字节的Unix工具（例如 &lt;code&gt;find -print0&lt;/code&gt; 或 &lt;code&gt;sort -z&lt;/code&gt; )一起使用时，此功能最为有用。请参阅下面的split0示例。</target>
        </trans-unit>
        <trans-unit id="b18d9d888505a6c0fddbe8b5ab5788ebfaae04f5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;stack-trace&lt;/code&gt; prints a stack trace of all function calls on the call stack. Also &lt;code&gt;print-stack-trace&lt;/code&gt;, &lt;code&gt;-t&lt;/code&gt; or &lt;code&gt;--print-stack-trace&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;stack-trace&lt;/code&gt; 打印调用堆栈上所有函数调用的堆栈跟踪。还要 &lt;code&gt;print-stack-trace&lt;/code&gt; ， &lt;code&gt;-t&lt;/code&gt; 或 &lt;code&gt;--print-stack-trace&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="67df8697fda987cf4b0f9d793cb1a365c353272b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;status&lt;/code&gt;, the &lt;a href=&quot;#variables-status&quot;&gt;exit status&lt;/a&gt; of the last foreground job to exit. If the job was terminated through a signal, the exit status will be 128 plus the signal number.</source>
          <target state="translated">&lt;code&gt;status&lt;/code&gt; ，要&lt;a href=&quot;#variables-status&quot;&gt;退出&lt;/a&gt;的最后一个前台作业的退出状态。如果作业通过信号终止，则退出状态将是128加信号号。</target>
        </trans-unit>
        <trans-unit id="85f1259baf47f016edcc07c02ff8cac3eb36ec8d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;string collect&lt;/code&gt; collects its input into a single output argument, without splitting the output when used in a command substitution. This is useful when trying to collect multiline output from another command into a variable. Exit status: 0 if any output argument is non-empty, or 1 otherwise.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="47aeedf462897d3635e7a17a92b7bf0d2db0992d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;string escape&lt;/code&gt; escapes each STRING in one of three ways. The first is &lt;code&gt;--style=script&lt;/code&gt;. This is the default. It alters the string such that it can be passed back to &lt;code&gt;eval&lt;/code&gt; to produce the original argument again. By default, all special characters are escaped, and quotes are used to simplify the output when possible. If &lt;code&gt;-n&lt;/code&gt; or &lt;code&gt;--no-quoted&lt;/code&gt; is given, the simplifying quoted format is not used. Exit status: 0 if at least one string was escaped, or 1 otherwise.</source>
          <target state="translated">&lt;code&gt;string escape&lt;/code&gt; 以三种方式之一使每个STRING都转义。第一个是 &lt;code&gt;--style=script&lt;/code&gt; 。这是默认值。它更改字符串，以便可以将其传递回 &lt;code&gt;eval&lt;/code&gt; 再次产生原始参数。默认情况下，所有特殊字符均被转义，并且在可能的情况下使用引号来简化输出。如果给出 &lt;code&gt;-n&lt;/code&gt; 或 &lt;code&gt;--no-quoted&lt;/code&gt; ，则不使用简化的带引号的格式。退出状态：如果至少一个字符串被转义，则为0，否则为1。</target>
        </trans-unit>
        <trans-unit id="b4c7444a524aa0a5c6e14a9e5a8c764cdc56c7f3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;string join0&lt;/code&gt; joins its STRING arguments into a single string separated by the zero byte (NUL), and adds a trailing NUL. This is most useful in conjunction with tools that accept NUL-delimited input, such as &lt;code&gt;sort -z&lt;/code&gt;. Exit status: 0 if at least one join was performed, or 1 otherwise.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d4c0633e8572c3f56e421d3e1415eb94bb2502dc" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;string join&lt;/code&gt; joins its STRING arguments into a single string separated by SEP, which can be an empty string. Exit status: 0 if at least one join was performed, or 1 otherwise.</source>
          <target state="translated">&lt;code&gt;string join&lt;/code&gt; 将其STRING参数连接到由SEP分隔的单个字符串中，该字符串可以为空字符串。退出状态：如果至少执行了一个联接，则为0，否则为1。</target>
        </trans-unit>
        <trans-unit id="4ac8783d6c5b8669120457e3abfbead54a865de8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;string join&lt;/code&gt; joins its STRING arguments into a single string separated by the zero byte (NUL), and adds a trailing NUL. This is most useful in conjunction with tools that accept NUL-delimited input, such as &lt;code&gt;sort -z&lt;/code&gt;. Exit status: 0 if at least one join was performed, or 1 otherwise.</source>
          <target state="translated">&lt;code&gt;string join&lt;/code&gt; 将其STRING参数连接到由零字节（NUL）分隔的单个字符串中，并添加尾随NUL。与接受NUL分隔的输入的工具（例如 &lt;code&gt;sort -z&lt;/code&gt; )结合使用时，此功能最为有用。退出状态：如果至少执行了一个联接，则为0，否则为1。</target>
        </trans-unit>
        <trans-unit id="31f0710b84864509b27d49251c16e09dbb8cd30c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;string length&lt;/code&gt; reports the length of each string argument in characters. Exit status: 0 if at least one non-empty STRING was given, or 1 otherwise.</source>
          <target state="translated">&lt;code&gt;string length&lt;/code&gt; 报告每个字符串参数的长度（以字符为单位）。退出状态：如果至少给出了一个非空的STRING，则为0，否则为1。</target>
        </trans-unit>
        <trans-unit id="ca94e657994de04d0305dfa680bad3e53fc3ae46" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;string lower&lt;/code&gt; converts each string argument to lowercase. Exit status: 0 if at least one string was converted to lowercase, else 1. This means that in conjunction with the &lt;code&gt;-q&lt;/code&gt; flag you can readily test whether a string is already lowercase.</source>
          <target state="translated">&lt;code&gt;string lower&lt;/code&gt; 将每个字符串参数转换为小写。退出状态：如果至少一个字符串已转换为小写，则为0，否则为1。这意味着，与 &lt;code&gt;-q&lt;/code&gt; 标志一起使用，您可以轻松测试一个字符串是否已经为小写。</target>
        </trans-unit>
        <trans-unit id="333a78e8a7e90eb78cb032128941a70a0f45d451" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;string match&lt;/code&gt; tests each STRING against PATTERN and prints matching substrings. Only the first match for each STRING is reported unless &lt;code&gt;-a&lt;/code&gt; or &lt;code&gt;--all&lt;/code&gt; is given, in which case all matches are reported.</source>
          <target state="translated">&lt;code&gt;string match&lt;/code&gt; 针对PATTERN测试每个STRING，并输出匹配的子字符串。除非给出 &lt;code&gt;-a&lt;/code&gt; 或 &lt;code&gt;--all&lt;/code&gt; ，否则仅报告每个STRING的第一个匹配项，在这种情况下，将报告所有匹配项。</target>
        </trans-unit>
        <trans-unit id="91089de95c70b9064ef9a4fecf2979a43632d7c3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;string repeat&lt;/code&gt; repeats the STRING &lt;code&gt;-n&lt;/code&gt; or &lt;code&gt;--count&lt;/code&gt; times. The &lt;code&gt;-m&lt;/code&gt; or &lt;code&gt;--max&lt;/code&gt; option will limit the number of outputted char (excluding the newline). This option can be used by itself or in conjunction with &lt;code&gt;--count&lt;/code&gt;. If both &lt;code&gt;--count&lt;/code&gt; and &lt;code&gt;--max&lt;/code&gt; are present, max char will be outputed unless the final repeated string size is less than max, in that case, the string will repeat until count has been reached. Both &lt;code&gt;--count&lt;/code&gt; and &lt;code&gt;--max&lt;/code&gt; will accept a number greater than or equal to zero, in the case of zero, nothing will be outputed. If &lt;code&gt;-N&lt;/code&gt; or &lt;code&gt;--no-newline&lt;/code&gt; is given, the output won't contain a newline character at the end. Exit status: 0 if yielded string is not empty, 1 otherwise.</source>
          <target state="translated">&lt;code&gt;string repeat&lt;/code&gt; 重复STRING &lt;code&gt;-n&lt;/code&gt; 或 &lt;code&gt;--count&lt;/code&gt; 次。的 &lt;code&gt;-m&lt;/code&gt; 或 &lt;code&gt;--max&lt;/code&gt; 选项将限制输出的炭（不包括换行）的数目。此选项可单独使用或与 &lt;code&gt;--count&lt;/code&gt; 结合使用。如果 &lt;code&gt;--count&lt;/code&gt; 和 &lt;code&gt;--max&lt;/code&gt; 都存在，除非最终重复的字符串大小小于max，否则将输出max char，在这种情况下，字符串将重复直到达到count为止。无论 &lt;code&gt;--count&lt;/code&gt; 和 &lt;code&gt;--max&lt;/code&gt; 将接受一个大于或等于零，在零的情况下，什么都不会被outputed。如果 &lt;code&gt;-N&lt;/code&gt; 或 &lt;code&gt;--no-newline&lt;/code&gt; 给定，输出末尾将不包含换行符。退出状态：如果产生的字符串不为空，则为0，否则为1。</target>
        </trans-unit>
        <trans-unit id="cd631213eafa5a59cc02430161fa5c4930279381" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;string replace&lt;/code&gt; is similar to &lt;code&gt;string match&lt;/code&gt; but replaces non-overlapping matching substrings with a replacement string and prints the result. By default, PATTERN is treated as a literal substring to be matched.</source>
          <target state="translated">&lt;code&gt;string replace&lt;/code&gt; 类似于 &lt;code&gt;string match&lt;/code&gt; 但是用替换字符串替换不重叠的匹配子字符串并打印结果。默认情况下，PATTERN被视为要匹配的文字子字符串。</target>
        </trans-unit>
        <trans-unit id="b0a1126fe21f179855ec4e248020911f83cdef8f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;string split somedelimiter&lt;/code&gt; is a replacement for &lt;code&gt;tr somedelimiter \\n&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8aa496c6349d03b4676c999aab50e066cb8b5aeb" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;string split0&lt;/code&gt; splits each STRING on the zero byte (NUL). Options are the same as &lt;code&gt;string split&lt;/code&gt; except that no separator is given.</source>
          <target state="translated">&lt;code&gt;string split0&lt;/code&gt; 在零字节（NUL）上拆分每个STRING。选项与 &lt;code&gt;string split&lt;/code&gt; 相同，只是没有给出分隔符。</target>
        </trans-unit>
        <trans-unit id="04bcff6b42bd8f1e79e01e4a6814e48e20fbe176" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;string split&lt;/code&gt; splits each STRING on the separator SEP, which can be an empty string. If &lt;code&gt;-m&lt;/code&gt; or &lt;code&gt;--max&lt;/code&gt; is specified, at most MAX splits are done on each STRING. If &lt;code&gt;-r&lt;/code&gt; or &lt;code&gt;--right&lt;/code&gt; is given, splitting is performed right-to-left. This is useful in combination with &lt;code&gt;-m&lt;/code&gt; or &lt;code&gt;--max&lt;/code&gt;. With &lt;code&gt;-n&lt;/code&gt; or &lt;code&gt;--no-empty&lt;/code&gt;, empty results are excluded from consideration (e.g. &lt;code&gt;hello\n\nworld&lt;/code&gt; would expand to two strings and not three). Exit status: 0 if at least one split was performed, or 1 otherwise.</source>
          <target state="translated">&lt;code&gt;string split&lt;/code&gt; 在分隔符SEP上拆分每个STRING，该字符串可以为空字符串。如果指定 &lt;code&gt;-m&lt;/code&gt; 或 &lt;code&gt;--max&lt;/code&gt; ,则每个STRING最多进行MAX个分割。如果给出 &lt;code&gt;-r&lt;/code&gt; 或 &lt;code&gt;--right&lt;/code&gt; ，则从右到左执行拆分。与 &lt;code&gt;-m&lt;/code&gt; 或 &lt;code&gt;--max&lt;/code&gt; 结合使用时很有用。使用 &lt;code&gt;-n&lt;/code&gt; 或 &lt;code&gt;--no-empty&lt;/code&gt; 时，将不考虑空结果（例如 &lt;code&gt;hello\n\nworld&lt;/code&gt; 将扩展为两个字符串而不是三个）。退出状态：如果至少执行了一次拆分，则为0，否则为1。</target>
        </trans-unit>
        <trans-unit id="eb23e8e3b2836edf4562f76805e4e7dee2577723" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;string sub&lt;/code&gt; prints a substring of each string argument. The start of the substring can be specified with &lt;code&gt;-s&lt;/code&gt; or &lt;code&gt;--start&lt;/code&gt; followed by a 1-based index value. Positive index values are relative to the start of the string and negative index values are relative to the end of the string. The default start value is 1. The length of the substring can be specified with &lt;code&gt;-l&lt;/code&gt; or &lt;code&gt;--length&lt;/code&gt;. If the length is not specified, the substring continues to the end of each STRING. Exit status: 0 if at least one substring operation was performed, 1 otherwise.</source>
          <target state="translated">&lt;code&gt;string sub&lt;/code&gt; 打印每个字符串参数的子字符串。可以使用 &lt;code&gt;-s&lt;/code&gt; 或 &lt;code&gt;--start&lt;/code&gt; 指定子字符串的开头，后跟基于1的索引值。正索引值相对于字符串的开头，负索引值相对于字符串的结尾。缺省起始值为1。可以用 &lt;code&gt;-l&lt;/code&gt; 或 &lt;code&gt;--length&lt;/code&gt; 指定子字符串的长度。如果未指定长度，则子字符串将继续到每个STRING的末尾。退出状态：如果至少执行了一个子字符串操作，则为0，否则为1。</target>
        </trans-unit>
        <trans-unit id="2334b2142123bfb3db8760998428b33ddb48c83c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;string trim&lt;/code&gt; removes leading and trailing whitespace from each STRING. If &lt;code&gt;-l&lt;/code&gt; or &lt;code&gt;--left&lt;/code&gt; is given, only leading whitespace is removed. If &lt;code&gt;-r&lt;/code&gt; or &lt;code&gt;--right&lt;/code&gt; is given, only trailing whitespace is trimmed. The &lt;code&gt;-c&lt;/code&gt; or &lt;code&gt;--chars&lt;/code&gt; switch causes the characters in CHARS to be removed instead of whitespace. Exit status: 0 if at least one character was trimmed, or 1 otherwise.</source>
          <target state="translated">&lt;code&gt;string trim&lt;/code&gt; 会删除每个STRING中的前导和尾随空格。如果给出 &lt;code&gt;-l&lt;/code&gt; 或 &lt;code&gt;--left&lt;/code&gt; ，则仅除去前导空格。如果给出 &lt;code&gt;-r&lt;/code&gt; 或 &lt;code&gt;--right&lt;/code&gt; ，则仅修剪尾随空格。的 &lt;code&gt;-c&lt;/code&gt; 或 &lt;code&gt;--chars&lt;/code&gt; 开关会导致在煤焦中的字符被删除而不是空格。退出状态：如果至少修剪了一个字符，则为0，否则为1。</target>
        </trans-unit>
        <trans-unit id="4af7b90b6c15aa5377e3c5f869a9e47d5e7c1034" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;string unescape&lt;/code&gt; performs the inverse of the &lt;code&gt;string escape&lt;/code&gt; command. If the string to be unescaped is not properly formatted it is ignored. For example, doing &lt;code&gt;string unescape --style=var (string escape --style=var $str)&lt;/code&gt; will return the original string. There is no support for unescaping &lt;code&gt;--style=regex&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;string unescape&lt;/code&gt; 执行与 &lt;code&gt;string escape&lt;/code&gt; 命令相反的操作。如果要取消转义的字符串格式不正确，则将其忽略。例如，执行 &lt;code&gt;string unescape --style=var (string escape --style=var $str)&lt;/code&gt; 将返回原始字符串。不支持转义 &lt;code&gt;--style=regex&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="ec537040dfbcd46a1d8e30c2f47ec1a7a8765e12" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;string upper&lt;/code&gt; converts each string argument to uppercase. Exit status: 0 if at least one string was converted to uppercase, else 1. This means that in conjunction with the &lt;code&gt;-q&lt;/code&gt; flag you can readily test whether a string is already uppercase.</source>
          <target state="translated">&lt;code&gt;string upper&lt;/code&gt; 将每个字符串参数转换为大写。退出状态：如果至少一个字符串转换为大写，则为0，否则为1。这意味着，与 &lt;code&gt;-q&lt;/code&gt; 标志一起使用，您可以轻松地测试一个字符串是否已经为大写。</target>
        </trans-unit>
        <trans-unit id="661aff77ace918c530880cc3272bdbd7f29220e4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;string&lt;/code&gt; performs operations on strings.</source>
          <target state="translated">&lt;code&gt;string&lt;/code&gt; 对字符串执行操作。</target>
        </trans-unit>
        <trans-unit id="2a88199c092063e7efbe0b5f39b511b67eb20c78" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;suppress-autosuggestion&lt;/code&gt;, remove the current autosuggestion</source>
          <target state="translated">&lt;code&gt;suppress-autosuggestion&lt;/code&gt; ，删除当前的自动提示</target>
        </trans-unit>
        <trans-unit id="83fb6c3713a11a13683e8334160327a537f8074f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;suspend&lt;/code&gt; suspends execution of the current shell by sending it a SIGTSTP signal, returning to the controlling process. It can be resumed later by sending it a SIGCONT. In order to prevent suspending a shell that doesn't have a controlling process, it will not suspend the shell if it is a login shell. This requirement is bypassed if the &lt;code&gt;--force&lt;/code&gt; option is given or the shell is not interactive.</source>
          <target state="translated">&lt;code&gt;suspend&lt;/code&gt; 通过向其发送SIGTSTP信号来中止当前外壳程序的执行，返回到控制过程。稍后可以通过发送SIGCONT来恢复它。为了防止挂起没有控制进程的外壳，如果它是登录外壳，则不会挂起该外壳。如果给出了 &lt;code&gt;--force&lt;/code&gt; 选项或外壳不是交互式的，则将绕过此要求。</target>
        </trans-unit>
        <trans-unit id="626f00d07a2e5e46b2688607ebff9eb8a60c9966" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;swap-selection-start-stop&lt;/code&gt;, go to the other end of the highlighted text without changing the selection</source>
          <target state="translated">&lt;code&gt;swap-selection-start-stop&lt;/code&gt; ，在不更改选择的情况下转到突出显示的文本的另一端</target>
        </trans-unit>
        <trans-unit id="9156298ff90a429e917bf58c7cc5f06073a40cd2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;switch&lt;/code&gt; executes one of several blocks of commands, depending on whether a specified value matches one of several values. &lt;code&gt;case&lt;/code&gt; is used together with the &lt;code&gt;switch&lt;/code&gt; statement in order to determine which block should be executed.</source>
          <target state="translated">&lt;code&gt;switch&lt;/code&gt; 根据指定值是否与多个值之一匹配来执行几个命令块之一。 &lt;code&gt;case&lt;/code&gt; 与 &lt;code&gt;switch&lt;/code&gt; 语句一起使用，以确定应该执行哪个块。</target>
        </trans-unit>
        <trans-unit id="51522e2a7f62a39e69b057a1b4e46231f1a7ac4c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;switch&lt;/code&gt; performs one of several blocks of commands, depending on whether a specified value equals one of several wildcarded values. &lt;code&gt;case&lt;/code&gt; is used together with the &lt;code&gt;switch&lt;/code&gt; statement in order to determine which block should be executed.</source>
          <target state="translated">&lt;code&gt;switch&lt;/code&gt; 执行几个命令块之一，具体取决于指定值是否等于多个通配值之一。 &lt;code&gt;case&lt;/code&gt; 与 &lt;code&gt;switch&lt;/code&gt; 语句一起使用，以确定应该执行哪个块。</target>
        </trans-unit>
        <trans-unit id="83e86983927861a95c2a328128c72990861f2579" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;test-feature FEATURE&lt;/code&gt; returns 0 when FEATURE is enabled, 1 if it is disabled, and 2 if it is not recognized.</source>
          <target state="translated">&lt;code&gt;test-feature FEATURE&lt;/code&gt; 启用FEATURE时，test-feature FEATURE返回0；如果禁用，则返回1；如果未识别，则返回2。</target>
        </trans-unit>
        <trans-unit id="49dea13a8691319ba78e4d5ed5960d93da35d7d6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;test&lt;/code&gt; implements a subset of the &lt;a href=&quot;http://www.unix.com/man-page/POSIX/1/test/&quot;&gt;IEEE Std 1003.1-2008 (POSIX.1) standard&lt;/a&gt;. The following exceptions apply:</source>
          <target state="translated">&lt;code&gt;test&lt;/code&gt; 实现了&lt;a href=&quot;http://www.unix.com/man-page/POSIX/1/test/&quot;&gt;IEEE Std 1003.1-2008（POSIX.1）标准&lt;/a&gt;的子集。下列例外情况适用：</target>
        </trans-unit>
        <trans-unit id="2b8c506bfcfd28dcdc9217de6bf1cde91ed842ff" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;test&lt;/code&gt; implements a subset of the &lt;a href=&quot;https://www.unix.com/man-page/posix/1p/test/&quot;&gt;IEEE Std 1003.1-2008 (POSIX.1) standard&lt;/a&gt;. The following exceptions apply:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4a920b6047086d1231c7f5d7fa31e31bfaec3736" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;time&lt;/code&gt; causes fish to measure how long a command takes and print the results afterwards. The command can be a simple fish command or a block. The results can not currently be redirected.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1560f147987dc48333613d49b888555f9bd4b99c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;transpose-chars&lt;/code&gt;, transpose two characters to the left of the cursor</source>
          <target state="translated">&lt;code&gt;transpose-chars&lt;/code&gt; ，将两个字符转置到光标的左侧</target>
        </trans-unit>
        <trans-unit id="92b2de28003baeca135430a69cac3301df211dca" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;transpose-words&lt;/code&gt;, transpose two words to the left of the cursor</source>
          <target state="translated">&lt;code&gt;transpose-words&lt;/code&gt; ，将两个单词转置到光标左侧</target>
        </trans-unit>
        <trans-unit id="373dbc4e9fdbf8eb3bea04bfb57dda742ec7cfea" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;trap&lt;/code&gt; is a wrapper around the fish event delivery framework. It exists for backwards compatibility with POSIX shells. For other uses, it is recommended to define an &lt;a href=&quot;../index#event&quot;&gt;event handler&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f5ca8c4e095ac239e34f8594ebb4ab87d097fe66" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;trap&lt;/code&gt; is a wrapper around the fish event delivery framework. It exists for backwards compatibility with POSIX shells. For other uses, it is recommended to define an &lt;a href=&quot;index#event&quot;&gt;event handler&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;trap&lt;/code&gt; 是围绕鱼类事件交付框架的包装。存在它是为了与POSIX Shell向后兼容。对于其他用途，建议定义一个&lt;a href=&quot;index#event&quot;&gt;事件处理程序&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="0744337fd5341ea7b8967ff13d484eb039621a85" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; sets the exit status to 0.</source>
          <target state="translated">&lt;code&gt;true&lt;/code&gt; 会将退出状态设置为0。</target>
        </trans-unit>
        <trans-unit id="2d6b937046bc04378a6f19f7580563228ae32462" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ulimit -Hs 64&lt;/code&gt; sets the hard stack size limit to 64 kB.</source>
          <target state="translated">&lt;code&gt;ulimit -Hs 64&lt;/code&gt; 将硬堆栈大小限制设置为64 kB。</target>
        </trans-unit>
        <trans-unit id="09823b46aa54108856d9cfe97a6e2d6654edeb51" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ulimit&lt;/code&gt; also accepts the following switches that determine what type of limit to set:</source>
          <target state="translated">&lt;code&gt;ulimit&lt;/code&gt; 还接受以下确定设置限制类型的开关：</target>
        </trans-unit>
        <trans-unit id="27494793012a34dbc727255f14091cec8673cfbd" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ulimit&lt;/code&gt; builtin sets or outputs the resource usage limits of the shell and any processes spawned by it. If a new limit value is omitted, the current value of the limit of the resource is printed; otherwise, the specified limit is set to the new value.</source>
          <target state="translated">&lt;code&gt;ulimit&lt;/code&gt; 内置函数可设置或输出shell及其所产生的任何进程的资源使用限制。如果省略了新的限制值，则打印资源限制的当前值；否则，将指定的限制设置为新值。</target>
        </trans-unit>
        <trans-unit id="914a332a706ed930f92dfa2f893c31d61f8829c9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;umask 177&lt;/code&gt; or &lt;code&gt;umask u=rw&lt;/code&gt; sets the file creation mask to read and write for the owner and no permissions at all for any other users.</source>
          <target state="translated">&lt;code&gt;umask 177&lt;/code&gt; 或 &lt;code&gt;umask u=rw&lt;/code&gt; 将文件创建掩码设置为对所有者进行读写，对其他任何用户则完全没有权限。</target>
        </trans-unit>
        <trans-unit id="ea8bdfdd73550087a9e5f4d0d74f501ad65d8378" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;umask&lt;/code&gt; displays and manipulates the &quot;umask&quot;, or file creation mode mask, which is used to restrict the default access to files.</source>
          <target state="translated">&lt;code&gt;umask&lt;/code&gt; 显示和操作&amp;ldquo; umask&amp;rdquo;或文件创建模式掩码，用于限制对文件的默认访问。</target>
        </trans-unit>
        <trans-unit id="d5b91d0960d8706ccf917682f946da0ed42fef50" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;umask&lt;/code&gt;, the current file creation mask. The preferred way to change the umask variable is through the &lt;a href=&quot;cmds/umask#cmd-umask&quot;&gt;umask&lt;/a&gt; function. An attempt to set umask to an invalid value will always fail.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7b47f786d139724d5a34193ba1786452223e8ac7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;umask&lt;/code&gt;, the current file creation mask. The preferred way to change the umask variable is through the &lt;a href=&quot;commands#umask&quot;&gt;umask function&lt;/a&gt;. An attempt to set umask to an invalid value will always fail.</source>
          <target state="translated">&lt;code&gt;umask&lt;/code&gt; ，当前文件创建掩码。更改umask变量的首选方法是通过&lt;a href=&quot;commands#umask&quot;&gt;umask函数&lt;/a&gt;。尝试将umask设置为无效值将始终失败。</target>
        </trans-unit>
        <trans-unit id="e11ddb9d62a747071c14ddc0257484f36e4d0db7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;up-line&lt;/code&gt;, move up one line</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="67c1b87ec154fe2bec25c34f88af59a7fa3c8771" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;upcase-word&lt;/code&gt;, make the current word uppercase</source>
          <target state="translated">&lt;code&gt;upcase-word&lt;/code&gt; ，使当前单词为大写</target>
        </trans-unit>
        <trans-unit id="57ccf04032406001bdc11a8189ad69fca2fb8bd0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;vared PATH[3]&lt;/code&gt; edits the third element of the PATH array</source>
          <target state="translated">&lt;code&gt;vared PATH[3]&lt;/code&gt; 编辑PATH数组的第三个元素</target>
        </trans-unit>
        <trans-unit id="65486428e36108a03da6e3498a15ce370423fc29" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;vared PATH[3]&lt;/code&gt; edits the third element of the PATH list</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="88c39c66df63979d68b40cdf38c535e8336f488a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;vared&lt;/code&gt; is used to interactively edit the value of an environment variable. Array variables as a whole can not be edited using &lt;code&gt;vared&lt;/code&gt;, but individual array elements can.</source>
          <target state="translated">&lt;code&gt;vared&lt;/code&gt; 用于交互式编辑环境变量的值。数组变量作为一个整体不能使用 &lt;code&gt;vared&lt;/code&gt; 进行编辑，但是单个数组元素可以进行编辑。</target>
        </trans-unit>
        <trans-unit id="a2ed2d545022b6b47095d8582bee9cbd898c7fb6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;vared&lt;/code&gt; is used to interactively edit the value of an environment variable. Array variables as a whole can not be edited using &lt;code&gt;vared&lt;/code&gt;, but individual list elements can.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9862f5e93904059a6b32007b38450efce85a2073" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;version&lt;/code&gt;, the version of the currently running fish (also available as &lt;code&gt;FISH_VERSION&lt;/code&gt; for backward compatibility).</source>
          <target state="translated">&lt;code&gt;version&lt;/code&gt; ，当前正在运行的fish的版本（也可以作为 &lt;code&gt;FISH_VERSION&lt;/code&gt; 获得，以实现向后兼容）。</target>
        </trans-unit>
        <trans-unit id="63fa20183bc82ef05dd53eaea0bdba2083b42311" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;wait&lt;/code&gt; waits for child jobs to complete.</source>
          <target state="translated">&lt;code&gt;wait&lt;/code&gt; 等待子作业完成。</target>
        </trans-unit>
        <trans-unit id="813fdc779468e7aa9ef0139c7dc0dcbe8dce7527" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;while&lt;/code&gt; repeatedly executes &lt;code&gt;CONDITION&lt;/code&gt;, and if the exit status is 0, then executes &lt;code&gt;COMMANDS&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;while&lt;/code&gt; 重复执行 &lt;code&gt;CONDITION&lt;/code&gt; ，如果退出状态为0，则执行 &lt;code&gt;COMMANDS&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="3777774e876be438277e734434a6c0c8157ad52c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;x-&lt;/code&gt; is not valid since there is no long flag name and therefore the short flag, &lt;code&gt;-x&lt;/code&gt;, has to be usable.</source>
          <target state="translated">&lt;code&gt;x-&lt;/code&gt; 无效，因为没有长标志名，因此短标志 &lt;code&gt;-x&lt;/code&gt; 必须可用。</target>
        </trans-unit>
        <trans-unit id="5fd5ec35b0142154e7c9e8643d553640b56bf3b7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;x&lt;/code&gt; means that only &lt;code&gt;-x&lt;/code&gt; is valid. It is a boolean can can be used more than once. If it is seen then &lt;code&gt;_flag_x&lt;/code&gt; will be set to the count of how many times the flag was seen.</source>
          <target state="translated">&lt;code&gt;x&lt;/code&gt; 表示仅 &lt;code&gt;-x&lt;/code&gt; 有效。它是一个布尔值，可以多次使用。如果看到，则将 &lt;code&gt;_flag_x&lt;/code&gt; 设置为看到该标志的次数。</target>
        </trans-unit>
        <trans-unit id="3ee9d686d28ba49895201840c47e53da39de4e40" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;x&lt;/code&gt; means that only &lt;code&gt;-x&lt;/code&gt; is valid. It is a boolean that can be used more than once. If it is seen then &lt;code&gt;_flag_x&lt;/code&gt; will be set to the count of how many times the flag was seen.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="21ede97712b0a6930815ab06e47ca99f9faf164c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;x=&lt;/code&gt;, &lt;code&gt;x=?&lt;/code&gt;, and &lt;code&gt;x=+&lt;/code&gt; are similar to the n/name examples above but there is no long flag alternative to the short flag &lt;code&gt;-x&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;x=&lt;/code&gt; ， &lt;code&gt;x=?&lt;/code&gt; 和 &lt;code&gt;x=+&lt;/code&gt; 与上面的n / name示例相似，但是没有任何替代长标记 &lt;code&gt;-x&lt;/code&gt; 的长标记。</target>
        </trans-unit>
        <trans-unit id="f0527623453636ac5982213b0815cf8b199abd43" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;yank-pop&lt;/code&gt;, rotate to the previous entry of the killring</source>
          <target state="translated">&lt;code&gt;yank-pop&lt;/code&gt; ，旋转到杀死的前一个条目</target>
        </trans-unit>
        <trans-unit id="6b2c2003ee77d278bc6a300e349540b9f1fcec50" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;yank&lt;/code&gt;, insert the latest entry of the killring into the buffer</source>
          <target state="translated">&lt;code&gt;yank&lt;/code&gt; ，将最新的killring条目插入缓冲区</target>
        </trans-unit>
        <trans-unit id="d38e08cea2004c22d96c7648bde8064ec9710a41" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;{n,m}&lt;/code&gt; at least n, no more than m.</source>
          <target state="translated">&lt;code&gt;{n,m}&lt;/code&gt; 至少n，不超过m。</target>
        </trans-unit>
        <trans-unit id="6754034e24ab614bfd421eac3a73529e0acbdf6b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;{n,}&lt;/code&gt; n or more</source>
          <target state="translated">&lt;code&gt;{n,}&lt;/code&gt; n个或更多</target>
        </trans-unit>
        <trans-unit id="a365c3492a087f6ec4c03c8376dcb30c6386fb2c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;{n}&lt;/code&gt; to exactly n (where n is a number)</source>
          <target state="translated">&lt;code&gt;{n}&lt;/code&gt; 精确到n（其中n是数字）</target>
        </trans-unit>
        <trans-unit id="707c3563364628d29b1994c70cf28e906025d3d1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;|&lt;/code&gt; is &quot;alternation&quot;, i.e. the &quot;or&quot;.</source>
          <target state="translated">&lt;code&gt;|&lt;/code&gt; 是&amp;ldquo;替代&amp;rdquo;，即&amp;ldquo;或&amp;rdquo;。</target>
        </trans-unit>
        <trans-unit id="df0f52ee032449bf7212b4c3984d956c6fa44267" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;&lt;code&gt;SOME_VAR=1 command&lt;/code&gt; produces an error: &lt;code&gt;Unknown command &quot;SOME_VAR=1&quot;&lt;/code&gt;.&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt; &lt;code&gt;SOME_VAR=1 command&lt;/code&gt; 产生错误： &lt;code&gt;Unknown command &quot;SOME_VAR=1&quot;&lt;/code&gt; 。&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="0da3c08b202353af950bee5219ca327f11f72cd7" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Alt&lt;/em&gt;-&lt;b&gt;&amp;larr;&lt;/b&gt; and &lt;em&gt;Alt&lt;/em&gt;-&lt;b&gt;&amp;rarr;&lt;/b&gt; move the cursor one word left or right, or moves forward/backward in the directory history if the command line is empty. If the cursor is already at the end of the line, and an autosuggestion is available, &lt;em&gt;Alt&lt;/em&gt;-&lt;b&gt;&amp;rarr;&lt;/b&gt; (or &lt;em&gt;Alt&lt;/em&gt;-&lt;b&gt;F&lt;/b&gt;) accepts the first word in the suggestion.</source>
          <target state="translated">&lt;em&gt;Alt键&lt;/em&gt; - &lt;b&gt;&amp;larr;&lt;/b&gt;和&lt;em&gt;Alt键&lt;/em&gt; - &lt;b&gt;&amp;rarr;&lt;/b&gt;向左或向右移动光标一个单字，或向前/向后移动目录中的历史如果命令行是空的。如果光标已经在该行的末尾，以及自我暗示是可用的，&lt;em&gt;Alt键&lt;/em&gt; - &lt;b&gt;&amp;rarr;&lt;/b&gt;（或&lt;em&gt;Alt键&lt;/em&gt; - &lt;b&gt;˚F&lt;/b&gt;）接受在建议的第一个字。</target>
        </trans-unit>
        <trans-unit id="41668896a709e48d38407c24cdaae2f37bd2e2d0" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Alt&lt;/em&gt;-&lt;b&gt;&amp;uarr;&lt;/b&gt; and &lt;em&gt;Alt&lt;/em&gt;-&lt;b&gt;&amp;darr;&lt;/b&gt; search the command history for the previous/next token containing the token under the cursor before the search was started. If the commandline was not on a token when the search started, all tokens match. See the &lt;a href=&quot;#history&quot;&gt;history&lt;/a&gt; section for more information on history searching.</source>
          <target state="translated">&lt;em&gt;Alt键&lt;/em&gt; - &lt;b&gt;&amp;uarr;&lt;/b&gt;和&lt;em&gt;Alt键&lt;/em&gt; - &lt;b&gt;&amp;darr;&lt;/b&gt;搜索命令历史上一个/下一个包含光标下的标记搜索开始前令牌。如果搜索开始时命令行不在标记上，则所有标记都匹配。有关&lt;a href=&quot;#history&quot;&gt;历史&lt;/a&gt;记录搜索的更多信息，请参见历史记录部分。</target>
        </trans-unit>
        <trans-unit id="dd002a4a5d9f181df1139416f359b0c0b1982d4c" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Alt&lt;/em&gt;-&lt;b&gt;&amp;uarr;&lt;/b&gt; recalls individual arguments, starting from the last argument in the last line executed. A single press replaces &quot;!$&quot;, later presses replace &quot;!!:4&quot; and the like.</source>
          <target state="translated">&lt;em&gt;Alt键&lt;/em&gt; - &lt;b&gt;&amp;uarr;&lt;/b&gt;回忆个别参数，从执行的最后一行的最后一个参数开始。单按一次即可替换&amp;ldquo;！$&amp;rdquo;，以后按一次即可替换&amp;ldquo; !!：4&amp;rdquo;等等。</target>
        </trans-unit>
        <trans-unit id="31b5b5642ff4d16559c25c2eec15dc84d9c7c38a" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Alt&lt;/em&gt;-&lt;b&gt;c&lt;/b&gt; capitalizes the current word.</source>
          <target state="translated">&lt;em&gt;Alt&lt;/em&gt; - &lt;b&gt;c&lt;/b&gt;大写当前单词。</target>
        </trans-unit>
        <trans-unit id="8c08d7cecc389da8fd667cb3de1b66142f66dbc0" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Alt&lt;/em&gt;-&lt;b&gt;d&lt;/b&gt; moves the next word to the &lt;a href=&quot;#killring&quot;&gt;killring&lt;/a&gt;.</source>
          <target state="translated">&lt;em&gt;Alt&lt;/em&gt; - &lt;b&gt;d&lt;/b&gt;将下一个单词移至&lt;a href=&quot;#killring&quot;&gt;必杀键&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="ba939795dc763dc37424d264df584c3dc1414201" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Alt&lt;/em&gt;-&lt;b&gt;e&lt;/b&gt; edit the current command line in an external editor. The editor is chosen from the first available of the &lt;code&gt;$VISUAL&lt;/code&gt; or &lt;code&gt;$EDITOR&lt;/code&gt; variables.</source>
          <target state="translated">&lt;em&gt;Alt&lt;/em&gt; - &lt;b&gt;e&lt;/b&gt;在外部编辑器中编辑当前命令行。编辑器是从 &lt;code&gt;$VISUAL&lt;/code&gt; 或 &lt;code&gt;$EDITOR&lt;/code&gt; 变量中第一个可用的中选择的。</target>
        </trans-unit>
        <trans-unit id="8d19663ab96f42c66ebcd8b4711cc5775c0115de" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Alt&lt;/em&gt;-&lt;b&gt;h&lt;/b&gt; (or &lt;b&gt;F1&lt;/b&gt;) shows the manual page for the current command, if one exists.</source>
          <target state="translated">&lt;em&gt;Alt&lt;/em&gt; - &lt;b&gt;h&lt;/b&gt;（或&lt;b&gt;F1&lt;/b&gt;）显示当前命令的手册页（如果存在）。</target>
        </trans-unit>
        <trans-unit id="6fe0d9f367a7b1fb62d59310e866cb7000917983" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Alt&lt;/em&gt;-&lt;b&gt;l&lt;/b&gt; lists the contents of the current directory, unless the cursor is over a directory argument, in which case the contents of that directory will be listed.</source>
          <target state="translated">&lt;em&gt;Alt&lt;/em&gt; - &lt;b&gt;l&lt;/b&gt;列出当前目录的内容，除非光标位于目录参数上，否则将列出该目录的内容。</target>
        </trans-unit>
        <trans-unit id="ac4ab1e3b2a18333f6469ab62c6774ab20358dd6" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Alt&lt;/em&gt;-&lt;b&gt;p&lt;/b&gt; adds the string '&lt;code&gt;| less;&lt;/code&gt;' to the end of the job under the cursor. The result is that the output of the command will be paged.</source>
          <target state="translated">&lt;em&gt;Alt&lt;/em&gt; - &lt;b&gt;p&lt;/b&gt;添加字符串' &lt;code&gt;| less;&lt;/code&gt; '到光标所在位置的作业末尾。结果是该命令的输出将被分页。</target>
        </trans-unit>
        <trans-unit id="136abcdd3926f6f6917e785f3c9b3de852a583e3" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Alt&lt;/em&gt;-&lt;b&gt;t&lt;/b&gt; transposes the last two words</source>
          <target state="translated">&lt;em&gt;Alt&lt;/em&gt; - &lt;b&gt;t&lt;/b&gt;转置最后两个单词</target>
        </trans-unit>
        <trans-unit id="6b4f3c9f30c412c35376eb5c0b053bbecc930222" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Alt&lt;/em&gt;-&lt;b&gt;u&lt;/b&gt; makes the current word uppercase.</source>
          <target state="translated">&lt;em&gt;Alt&lt;/em&gt; - &lt;b&gt;u&lt;/b&gt;使当前单词变为大写。</target>
        </trans-unit>
        <trans-unit id="f055c4fc1257b63bfc385501bfbaf929ca352490" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Alt&lt;/em&gt;-&lt;b&gt;v&lt;/b&gt; Same as &lt;em&gt;Alt&lt;/em&gt;-&lt;b&gt;e&lt;/b&gt;.</source>
          <target state="translated">&lt;em&gt;Alt&lt;/em&gt; - &lt;b&gt;v&lt;/b&gt;与&lt;em&gt;Alt&lt;/em&gt; - &lt;b&gt;e&lt;/b&gt;相同。</target>
        </trans-unit>
        <trans-unit id="5781eac00f106e823a16702f30c3a1c598e21b65" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Alt&lt;/em&gt;-&lt;b&gt;w&lt;/b&gt; prints a short description of the command under the cursor.</source>
          <target state="translated">&lt;em&gt;Alt&lt;/em&gt; - &lt;b&gt;w&lt;/b&gt;在光标下方显示命令的简短描述。</target>
        </trans-unit>
        <trans-unit id="17e2f8a79bdc960577f4eeaedc12d0c21a945731" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Control&lt;/em&gt;-&lt;b&gt;C&lt;/b&gt; cancels the entire line.</source>
          <target state="translated">&lt;em&gt;控制&lt;/em&gt; - &lt;b&gt;&amp;Ccedil;&lt;/b&gt;取消整个线。</target>
        </trans-unit>
        <trans-unit id="9333a2ffd2f21f466d57fc6d1e5b4d1a978b95a0" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Control&lt;/em&gt;-&lt;b&gt;D&lt;/b&gt; delete one character to the right of the cursor. If the command line is empty, &lt;em&gt;Control&lt;/em&gt;-&lt;b&gt;D&lt;/b&gt; will exit fish.</source>
          <target state="translated">&lt;em&gt;Control&lt;/em&gt; - &lt;b&gt;D&lt;/b&gt;删除光标右边的一个字符。如果命令行为空，则&lt;em&gt;Control&lt;/em&gt; - &lt;b&gt;D&lt;/b&gt;将退出鱼。</target>
        </trans-unit>
        <trans-unit id="bb14070b99b4a045f1889b39bfeae27b8794ec9e" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Control&lt;/em&gt;-&lt;b&gt;K&lt;/b&gt; moves contents from the cursor to the end of line to the &lt;a href=&quot;#killring&quot;&gt;killring&lt;/a&gt;.</source>
          <target state="translated">&lt;em&gt;Control&lt;/em&gt; - &lt;b&gt;K&lt;/b&gt;将内容从光标移动到行的末尾，再到&lt;a href=&quot;#killring&quot;&gt;终止符&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="04ddb78416f34126599d6fdf7033f85b757d8ea0" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Control&lt;/em&gt;-&lt;b&gt;L&lt;/b&gt; clears and repaints the screen.</source>
          <target state="translated">&lt;em&gt;Control&lt;/em&gt; - &lt;b&gt;L&lt;/b&gt;清除并重新绘制屏幕。</target>
        </trans-unit>
        <trans-unit id="eec641fe659922171462b212fb4e12bfac800762" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Control&lt;/em&gt;-&lt;b&gt;U&lt;/b&gt; moves contents from the beginning of line to the cursor to the &lt;a href=&quot;#killring&quot;&gt;killring&lt;/a&gt;.</source>
          <target state="translated">&lt;em&gt;Control&lt;/em&gt; - &lt;b&gt;U&lt;/b&gt;将内容从行的开头移动到光标，&lt;a href=&quot;#killring&quot;&gt;再到杀死对象&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="959eb883117dacfd136a241f1bf9b0d08b63da44" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Control&lt;/em&gt;-&lt;b&gt;W&lt;/b&gt; moves the previous path component (everything up to the previous &quot;/&quot;) to the &lt;a href=&quot;#killring&quot;&gt;killring&lt;/a&gt;.</source>
          <target state="translated">&lt;em&gt;Control&lt;/em&gt; - &lt;b&gt;W&lt;/b&gt;将前一个路径部分（所有内容移动到前一个&amp;ldquo; /&amp;rdquo;）移至&lt;a href=&quot;#killring&quot;&gt;killring&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="4437b353083b50d06c142c5629d09aa0198b91c6" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Control&lt;/em&gt;-&lt;b&gt;X&lt;/b&gt; copies the current buffer to the system's clipboard, &lt;em&gt;Control&lt;/em&gt;-&lt;b&gt;V&lt;/b&gt; inserts the clipboard contents.</source>
          <target state="translated">&lt;em&gt;Control&lt;/em&gt; - &lt;b&gt;X&lt;/b&gt;将当前缓冲区复制到系统的剪贴板，&lt;em&gt;Control&lt;/em&gt; - &lt;b&gt;V&lt;/b&gt;插入剪贴板的内容。</target>
        </trans-unit>
        <trans-unit id="5aed52702667fe63b8fc8764b7596443d6fa67f8" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Control&lt;/em&gt;-&lt;b&gt;t&lt;/b&gt; transposes the last two characters</source>
          <target state="translated">&lt;em&gt;Control&lt;/em&gt; - &lt;b&gt;t&lt;/b&gt;转置最后两个字符</target>
        </trans-unit>
        <trans-unit id="2a3529141c90e88bccb3cffb04eaf5e452963437" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Shift&lt;/em&gt;-&lt;b&gt;A&lt;/b&gt; enters &lt;a href=&quot;#vi-mode-insert&quot;&gt;insert mode&lt;/a&gt; at the end of the line.</source>
          <target state="translated">&lt;em&gt;Shift&lt;/em&gt; - &lt;b&gt;A&lt;/b&gt;在行尾进入&lt;a href=&quot;#vi-mode-insert&quot;&gt;插入模式&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="848bb77d0284135b4b11d0def92f1a7b33558c29" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Shift&lt;/em&gt;-&lt;b&gt;D&lt;/b&gt; deletes text after the current cursor position and moves it to the &lt;a href=&quot;#killring&quot;&gt;killring&lt;/a&gt;.</source>
          <target state="translated">&lt;em&gt;Shift&lt;/em&gt; - &lt;b&gt;D&lt;/b&gt;会删除当前光标位置之后的文本，并将其移至&lt;a href=&quot;#killring&quot;&gt;杀伤符号&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="0aa350769e38ad587d4204af5750f62efcffd698" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;black&lt;/em&gt;, &lt;em&gt;red&lt;/em&gt;, &lt;em&gt;green&lt;/em&gt;, &lt;em&gt;yellow&lt;/em&gt;, &lt;em&gt;blue&lt;/em&gt;, &lt;em&gt;magenta&lt;/em&gt;, &lt;em&gt;cyan&lt;/em&gt;, &lt;em&gt;white&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;黑色&lt;/em&gt;，&lt;em&gt;红色&lt;/em&gt;，&lt;em&gt;绿色&lt;/em&gt;，&lt;em&gt;黄色&lt;/em&gt;，&lt;em&gt;蓝色&lt;/em&gt;，&lt;em&gt;品红色&lt;/em&gt;，&lt;em&gt;青色&lt;/em&gt;，&lt;em&gt;白色&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="2f06a4164895f4acf75e4fc05849a9f1080eb613" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;brblack&lt;/em&gt;, &lt;em&gt;brred&lt;/em&gt;, &lt;em&gt;brgreen&lt;/em&gt;, &lt;em&gt;bryellow&lt;/em&gt;, &lt;em&gt;brblue&lt;/em&gt;, &lt;em&gt;brmagenta&lt;/em&gt;, &lt;em&gt;brcyan&lt;/em&gt;, &lt;em&gt;brwhite&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;brblack&lt;/em&gt;，&lt;em&gt;brred&lt;/em&gt;，&lt;em&gt;brgreen&lt;/em&gt;，&lt;em&gt;Bryellow&lt;/em&gt;，&lt;em&gt;brblue&lt;/em&gt;，&lt;em&gt;brmagenta&lt;/em&gt;，&lt;em&gt;brcyan&lt;/em&gt;，&lt;em&gt;brwhite&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="5aaf073a1b8f279587c77fcd145e5e12a28d0f7b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Easy scripting&lt;/strong&gt;: new &lt;a href=&quot;#functions&quot;&gt;functions&lt;/a&gt; can be added on the fly. The syntax is easy to learn and use.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4df60123802c7d8d13f9b6713ff515d5434a37f7" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Extensive UI&lt;/strong&gt;: &lt;a href=&quot;#syntax-highlighting&quot;&gt;syntax highlighting&lt;/a&gt;, &lt;a href=&quot;#autosuggestions&quot;&gt;autosuggestions&lt;/a&gt;, &lt;a href=&quot;#tab-completion&quot;&gt;tab completion&lt;/a&gt; and selection lists that can be navigated and filtered.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a4735f2bc1b1f6cc44fc36a9270fa8d0bebad687" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;No configuration needed&lt;/strong&gt;: fish is designed to be ready to use immediately, without requiring extensive configuration.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c1761f0b1ba5b43d7b93024d944cddd83977bbd0" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;argument&lt;/strong&gt; a parameter given to a command</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f9abc342512c31331a993f0014b546a67fa5db37" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;builtin&lt;/strong&gt; a command that is implemented in the shell. Builtins are commands that are so closely tied to the shell that it is impossible to implement them as external commands.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f166fa76e55d41c05140d9c66e33482752388e40" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;command&lt;/strong&gt; a program that the shell can run. In another sense also specifically an external command (i.e. neither a function or builtin).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b757809536a26ee5fe7cf05aa97874be3e9ec7f5" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;function&lt;/strong&gt; a block of commands that can be called as if they were a single command. By using functions, it is possible to string together multiple smaller commands into one more advanced command.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="60a92d1d7691db21d94fa52b5efe10f9c00a98a4" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;job&lt;/strong&gt; a running pipeline or command</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="33e34e3f380b965910f59129f13ec1cc926b1a27" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;pipeline&lt;/strong&gt; a set of commands stringed together so that the output of one command is the input of the next command</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="44d28d2c07c14f9f63ac8b103318575395a8d8f5" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;redirection&lt;/strong&gt; an operation that changes one of the input/output streams associated with a job</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4e94007d359708c28c1c1effb3bd68983f4f0862" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;switch&lt;/strong&gt; a special flag sent as an argument to a command that will alter the behavior of the command. A switch almost always begins with one or two hyphens.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="58ef9d5fc414a372d364bba5d463086a74cd1e79" translate="yes" xml:space="preserve">
          <source>=&amp;gt; /private/</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fba3fd4e3fd6608dd7f90bc1b5ab21add9a24490" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;/&lt;/code&gt; if the short flag can be used by someone invoking your command else &lt;code&gt;-&lt;/code&gt; if it should not be exposed as a valid short flag. If there is no long flag name these characters should be omitted. You can also specify a '#' to indicate the short and long flag names can be used and the value can be specified as an implicit int; i.e., a flag of the form &lt;code&gt;-NNN&lt;/code&gt;.</source>
          <target state="translated">一 &lt;code&gt;/&lt;/code&gt; 如果短标志可以通过调用某人的命令其他人使用 &lt;code&gt;-&lt;/code&gt; 如果它不应该被公开为有效的短标志。如果没有长标志名，则应省略这些字符。您还可以指定&amp;ldquo;＃&amp;rdquo;以指示可以使用短和长标志名，并且可以将值指定为隐式int；即形式为 &lt;code&gt;-NNN&lt;/code&gt; 的标志。</target>
        </trans-unit>
        <trans-unit id="7198b525f0714279660d3b850cc70c2393d6d32c" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;fish&lt;/code&gt; function is a list of commands, which may optionally take arguments. Unlike other shells, arguments are not passed in &quot;numbered variables&quot; like &lt;code&gt;$1&lt;/code&gt;, but instead in a single list &lt;code&gt;$argv&lt;/code&gt;. To create a function, use the &lt;code&gt;function&lt;/code&gt; builtin:</source>
          <target state="translated">甲 &lt;code&gt;fish&lt;/code&gt; 功能的命令，其可以任选地接受参数的列表。与其他外壳程序不同，参数不会像 &lt;code&gt;$1&lt;/code&gt; 那样在&amp;ldquo;编号变量&amp;rdquo;中传递，而是在单个列表 &lt;code&gt;$argv&lt;/code&gt; 传递。要创建函数，请使用内置 &lt;code&gt;function&lt;/code&gt; ：</target>
        </trans-unit>
        <trans-unit id="19bcfbaa8447e6df7d2da91db70a782c0bf63572" translate="yes" xml:space="preserve">
          <source>A background job is executed simultaneously with fish, and does not have access to the keyboard. If no job is specified, the last job to be used is put in the background. If PID is specified, the jobs with the specified process group IDs are put in the background.</source>
          <target state="translated">后台作业与fish同时执行,并且不能访问键盘。如果没有指定作业,则将最后使用的作业放在后台。如果指定了PID,则将具有指定进程组ID的作业放到后台。</target>
        </trans-unit>
        <trans-unit id="b46aed84b0ed848ddd07f44ad7751712530b525e" translate="yes" xml:space="preserve">
          <source>A bind mode name (e.g., &lt;code&gt;bind -m abc ...&lt;/code&gt;) is restricted to the rules for valid variable names.</source>
          <target state="translated">绑定模式名称（例如 &lt;code&gt;bind -m abc ...&lt;/code&gt; ）仅限于有效变量名称的规则。</target>
        </trans-unit>
        <trans-unit id="9b580f7fbca87c3708e0299e0e01e7d18f311f8d" translate="yes" xml:space="preserve">
          <source>A block allows the introduction of a new variable scope, redirection of the input or output of a set of commands as a group, or to specify precedence when using the conditional commands like &lt;code&gt;and&lt;/code&gt;.</source>
          <target state="translated">块允许引入新的变量作用域，将一组命令的输入或输出重定向为一组，或者在使用条件命令（例如 &lt;code&gt;and&lt;/code&gt; 时指定优先级。</target>
        </trans-unit>
        <trans-unit id="221743bb3156c75a9da83c1a7dacbf3cffddec98" translate="yes" xml:space="preserve">
          <source>A comma separated list of characters enclosed in curly braces will be expanded so each element of the list becomes a new parameter.</source>
          <target state="translated">大括号中的逗号分隔的字符列表将被展开,因此列表中的每个元素将成为一个新的参数。</target>
        </trans-unit>
        <trans-unit id="b1251b9c7f3a0ecfe4cfcd8762e368b829d54d22" translate="yes" xml:space="preserve">
          <source>A comma separated list of characters enclosed in curly braces will be expanded so each element of the list becomes a new parameter. This is useful to save on typing, and to separate a variable name from surrounding text.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="18819280931565e1e540c3948c1068287f296514" translate="yes" xml:space="preserve">
          <source>A command is executed by writing the name of the command followed by any arguments.</source>
          <target state="translated">命令的执行方式是在命令名称后写上任何参数。</target>
        </trans-unit>
        <trans-unit id="ef0596789e19cf7d157b82b21b7a04276de1271d" translate="yes" xml:space="preserve">
          <source>A command may be invalid because it does not exist, or refers to a file that you cannot execute. When the command becomes valid, it is shown in a different color:</source>
          <target state="translated">命令可能无效,因为它不存在,或指向一个你无法执行的文件。当命令变得有效时,它将以不同的颜色显示。</target>
        </trans-unit>
        <trans-unit id="7889a1f8efa9424d9ad0d196f8208854866a152e" translate="yes" xml:space="preserve">
          <source>A common comparison is with $status:</source>
          <target state="translated">常见的比较是与$status。</target>
        </trans-unit>
        <trans-unit id="0ab1d9ac994221a7fc24fe83fee3534ae7e7edc9" translate="yes" xml:space="preserve">
          <source>A common idiom is to capture the output of a command in a variable:</source>
          <target state="translated">一个常见的成语是在一个变量中捕获命令的输出。</target>
        </trans-unit>
        <trans-unit id="e5fc3140c2546b6e6a23e2f80c44a655ee78ea6c" translate="yes" xml:space="preserve">
          <source>A directory for end-users to keep their own completions, usually &lt;code&gt;~/.config/fish/completions&lt;/code&gt; (controlled by the &lt;code&gt;XDG_CONFIG_HOME&lt;/code&gt; environment variable);</source>
          <target state="translated">最终用户保留自己的完成内容的目录，通常为 &lt;code&gt;~/.config/fish/completions&lt;/code&gt; （由 &lt;code&gt;XDG_CONFIG_HOME&lt;/code&gt; 环境变量控制）；</target>
        </trans-unit>
        <trans-unit id="65baeff5e625e88bc63f2d15091644216f3ec2bb" translate="yes" xml:space="preserve">
          <source>A directory for end-users to keep their own functions, usually &lt;code&gt;~/.config/fish/functions&lt;/code&gt; (controlled by the &lt;code&gt;XDG_CONFIG_HOME&lt;/code&gt; environment variable).</source>
          <target state="translated">最终用户保留自己的功能的目录，通常是 &lt;code&gt;~/.config/fish/functions&lt;/code&gt; （由 &lt;code&gt;XDG_CONFIG_HOME&lt;/code&gt; 环境变量控制）。</target>
        </trans-unit>
        <trans-unit id="859d016958d7758044bcb3a91d192638e99bef83" translate="yes" xml:space="preserve">
          <source>A directory for systems administrators to install completions for all users on the system, usually &lt;code&gt;/etc/fish/completions&lt;/code&gt;;</source>
          <target state="translated">系统管理员的目录，用于为系统上的所有用户安装完成文件，通常是 &lt;code&gt;/etc/fish/completions&lt;/code&gt; ；</target>
        </trans-unit>
        <trans-unit id="108785695c3e86a9a6e52e8824798deb67cc4081" translate="yes" xml:space="preserve">
          <source>A directory for systems administrators to install functions for all users on the system, usually &lt;code&gt;/etc/fish/functions&lt;/code&gt; (really &lt;code&gt;$__fish_sysconfdir/functions&lt;/code&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="641e45d215c27568a98d7ad513ca06236cc4ce30" translate="yes" xml:space="preserve">
          <source>A directory for systems administrators to install functions for all users on the system, usually &lt;code&gt;/etc/fish/functions&lt;/code&gt;.</source>
          <target state="translated">系统管理员的目录，用于为系统上的所有用户安装功能，通常是 &lt;code&gt;/etc/fish/functions&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="9f5e2984dcf6e5df1ad339573ada9e5723fb0b37" translate="yes" xml:space="preserve">
          <source>A directory for third-party software vendors to ship their own completions for their software, usually &lt;code&gt;/usr/share/fish/vendor_completions.d&lt;/code&gt;;</source>
          <target state="translated">第三方软件供应商发布自己的软件完成目录的目录，通常是 &lt;code&gt;/usr/share/fish/vendor_completions.d&lt;/code&gt; ;</target>
        </trans-unit>
        <trans-unit id="5e8075c8426f4f6e374491e133779cfa809fd782" translate="yes" xml:space="preserve">
          <source>A directory for third-party software vendors to ship their own functions for their software, usually &lt;code&gt;/usr/share/fish/vendor_functions.d&lt;/code&gt;.</source>
          <target state="translated">第三方软件供应商发布其软件功能的目录，通常为 &lt;code&gt;/usr/share/fish/vendor_functions.d&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="a44f52824482af64d09602d2bfcb5e4719f63ad2" translate="yes" xml:space="preserve">
          <source>A dollar sign followed by a string of characters is expanded into the value of the shell variable with the same name. For an introduction to the concept of shell variables, read the &lt;a href=&quot;#variables&quot;&gt;Shell variables&lt;/a&gt; section.</source>
          <target state="translated">一个美元符号后跟一个字符串将被扩展为具有相同名称的shell变量的值。有关&lt;a href=&quot;#variables&quot;&gt;Shell变量&lt;/a&gt;概念的介绍，请阅读Shell变量部分。</target>
        </trans-unit>
        <trans-unit id="ca6eed9ce238df03667fd3003cea2a936f38aa05" translate="yes" xml:space="preserve">
          <source>A dollar sign followed by a string of characters is expanded into the value of the shell variable with the same name. For more on shell variables, read the &lt;a href=&quot;#variables&quot;&gt;Shell variables&lt;/a&gt; section.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a99436ba2e5d329112af2b584fd421fbf3f42c7d" translate="yes" xml:space="preserve">
          <source>A faster way is to modify the &lt;code&gt;$fish_user_paths&lt;/code&gt;&lt;a href=&quot;#tut-universal&quot;&gt;universal variable&lt;/a&gt;, which is automatically prepended to &lt;code&gt;$PATH&lt;/code&gt;. For example, to permanently add &lt;code&gt;/usr/local/bin&lt;/code&gt; to your &lt;code&gt;$PATH&lt;/code&gt;, you could write:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d2d19574b46bfc9315dc6a4268de0f13c74f87d0" translate="yes" xml:space="preserve">
          <source>A faster way is to modify the &lt;code&gt;$fish_user_paths&lt;/code&gt;&lt;a href=&quot;#tut_universal&quot;&gt;universal variable&lt;/a&gt;, which is automatically prepended to &lt;code&gt;$PATH&lt;/code&gt;. For example, to permanently add &lt;code&gt;/usr/local/bin&lt;/code&gt; to your &lt;code&gt;$PATH&lt;/code&gt;, you could write:</source>
          <target state="translated">一种更快的方法是修改 &lt;code&gt;$fish_user_paths&lt;/code&gt; &lt;a href=&quot;#tut_universal&quot;&gt;通用变量&lt;/a&gt;，该变量会自动添加到 &lt;code&gt;$PATH&lt;/code&gt; 。例如，要将 &lt;code&gt;/usr/local/bin&lt;/code&gt; 永久添加到 &lt;code&gt;$PATH&lt;/code&gt; ，可以编写：</target>
        </trans-unit>
        <trans-unit id="ceec61da03fba72e62b6265e8da899ee3527c4d0" translate="yes" xml:space="preserve">
          <source>A filename. The output will be written to the specified file.</source>
          <target state="translated">一个文件名。输出将被写入指定的文件。</target>
        </trans-unit>
        <trans-unit id="3d33de98068774700d9110cea5dcb53a094ba7e7" translate="yes" xml:space="preserve">
          <source>A function is a list of commands that will be executed when the name of the function is given as a command.</source>
          <target state="translated">函数是一个命令列表,当函数的名称作为命令时,将被执行。</target>
        </trans-unit>
        <trans-unit id="7601c1858c241e3bd16046e3e56c915853d6505a" translate="yes" xml:space="preserve">
          <source>A function name cannot be empty. It may not begin with a hyphen (&quot;-&quot;) and may not contain a slash (&quot;/&quot;). All other characters, including a space, are valid.</source>
          <target state="translated">一个函数名不能为空。它不能以连字符(&quot;-&quot;)开头,也不能包含斜线(&quot;/&quot;)。所有其他字符,包括空格,都是有效的。</target>
        </trans-unit>
        <trans-unit id="f2876072ebbf01c7648d2358047842fa63f47f6c" translate="yes" xml:space="preserve">
          <source>A global variable of the same name already exists.</source>
          <target state="translated">一个同名的全局变量已经存在。</target>
        </trans-unit>
        <trans-unit id="8b50d81adfb557d2a38d6b95df25f2d574c4f80c" translate="yes" xml:space="preserve">
          <source>A hard limit can only be decreased. Once it is set it cannot be increased; a soft limit may be increased up to the value of the hard limit. If neither -H nor -S is specified, both the soft and hard limits are updated when assigning a new limit value, and the soft limit is used when reporting the current value.</source>
          <target state="translated">硬限值只能降低。软限值一旦设置,就不能增加;软限值可以增加到硬限值的范围内。如果既没有指定-H也没有指定-S,则在分配新的限制值时,软限制和硬限制都会被更新,在报告当前值时使用软限制。</target>
        </trans-unit>
        <trans-unit id="b23a7c576473abf4f67fa752f0d58982d9b4994d" translate="yes" xml:space="preserve">
          <source>A hard limit can only be decreased. Once it is set it cannot be increased; a soft limit may be increased up to the value of the hard limit. If neither &lt;code&gt;-H&lt;/code&gt; nor &lt;code&gt;-S&lt;/code&gt; is specified, both the soft and hard limits are updated when assigning a new limit value, and the soft limit is used when reporting the current value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ec2f57dda8cd2b7d726afdc269175dec20de44df" translate="yes" xml:space="preserve">
          <source>A large number of variable starting with the prefixes &lt;code&gt;fish_color&lt;/code&gt; and &lt;code&gt;fish_pager_color.&lt;/code&gt; See &lt;a href=&quot;#variables-color&quot;&gt;Variables for changing highlighting colors&lt;/a&gt; for more information.</source>
          <target state="translated">大量以前缀 &lt;code&gt;fish_color&lt;/code&gt; 和 &lt;code&gt;fish_pager_color.&lt;/code&gt; 开头的变量。有关更多信息，请参见&lt;a href=&quot;#variables-color&quot;&gt;用于更改突出显示颜色的变量&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="4b6b5c0631c6ec4d7569772ecd93c5f2a9ad8e07" translate="yes" xml:space="preserve">
          <source>A large number of variable starting with the prefixes &lt;code&gt;fish_color&lt;/code&gt; and &lt;code&gt;fish_pager_color&lt;/code&gt;. See &lt;a href=&quot;#variables-color&quot;&gt;Variables for changing highlighting colors&lt;/a&gt; for more information.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5e5cf560f2e4f99636de6a450bd940ddafbd9847" translate="yes" xml:space="preserve">
          <source>A literal &quot;{}&quot; will not be used as a brace expansion:</source>
          <target state="translated">字面的&quot;{}&quot;将不会被用作括号扩展。</target>
        </trans-unit>
        <trans-unit id="3b73470b832856451e08f355e80a561c89bef4ab" translate="yes" xml:space="preserve">
          <source>A long flag name which is optional. If not present then only the short flag letter can be used.</source>
          <target state="translated">一个长的旗帜名称,这是可选的。如果没有,则只能使用短旗号。</target>
        </trans-unit>
        <trans-unit id="c289b8e2f3ba875ebca3ca04379eb21ac58c6d06" translate="yes" xml:space="preserve">
          <source>A number of variables control the symbol (&quot;display&quot;) and color (&quot;color&quot;) for the different status indicators:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d7eb886434c2d98d1f604c3752317380a9843e6c" translate="yes" xml:space="preserve">
          <source>A number of variables set characters and color used as indicators. Many of these have a different default if used with informative status enabled, or &lt;code&gt;$__fish_git_prompt_use_informative_chars&lt;/code&gt; set. The usual default is given first, then the informative default (if it is different). If no default for the colors is given, they default to &lt;code&gt;$__fish_git_prompt_color&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b7b8ab4ed67c762ac2d0fa14336c7a66f5b2e303" translate="yes" xml:space="preserve">
          <source>A range of indices can be specified, see &lt;a href=&quot;#expand-index-range&quot;&gt;index range expansion&lt;/a&gt; for details.</source>
          <target state="translated">可以指定&lt;a href=&quot;#expand-index-range&quot;&gt;索引范围&lt;/a&gt;，有关详细信息，请参见索引范围扩展。</target>
        </trans-unit>
        <trans-unit id="5e298a31256356ac86c6d29914100defedf5fffe" translate="yes" xml:space="preserve">
          <source>A scripts written in &lt;code&gt;bash&lt;/code&gt; it would need a first line like this:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8c3a0a6b90c1f5bc360ed70d0dd93ffe55365da5" translate="yes" xml:space="preserve">
          <source>A second color may be given as a desired fallback color. e.g. &lt;code&gt;set_color 124212 brblue&lt;/code&gt; will instruct set_color to use &lt;em&gt;brblue&lt;/em&gt; if a terminal is not capable of the exact shade of grey desired. This is very useful when an 8 or 16 color terminal might otherwise not use a color.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3fcf13b497d0506afff3d618c0c36dfe5e1a068c" translate="yes" xml:space="preserve">
          <source>A shell is a program which helps you operate your computer by starting other programs. fish offers a command-line interface focused on usability and interactive use.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fa2eb63a7d926840491eb53403e1e6e33347d750" translate="yes" xml:space="preserve">
          <source>A short flag letter (which is mandatory). It must be an alphanumeric or &quot;#&quot;. The &quot;#&quot; character is special and means that a flag of the form &lt;code&gt;-123&lt;/code&gt; is valid. The short flag &quot;#&quot; must be followed by &quot;-&quot; (since the short name isn't otherwise valid since &lt;code&gt;_flag_#&lt;/code&gt; is not a valid var name) and must be followed by a long flag name with no modifiers.</source>
          <target state="translated">简短的标志字母（必填）。它必须是字母数字或&amp;ldquo;＃&amp;rdquo;。 &amp;ldquo;＃&amp;rdquo;字符是特殊字符，表示 &lt;code&gt;-123&lt;/code&gt; 形式的标志有效。短标记&amp;ldquo;＃&amp;rdquo;后必须加上&amp;ldquo;-&amp;rdquo;（因为短名称在其他方面无效，因为 &lt;code&gt;_flag_#&lt;/code&gt; 不是有效的var名称），并且必须后跟无修饰符的长标记名。</target>
        </trans-unit>
        <trans-unit id="e585b4919dc0904a5ac8ff639290a7da0168ce72" translate="yes" xml:space="preserve">
          <source>A simple prompt that displays all known VCS info:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c44605d7cf5f66a5d454bc7f8b72acac0713b1cf" translate="yes" xml:space="preserve">
          <source>A simple prompt that displays git info:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="981d3d4dab4f4f8c0ceaf4c8bcfaaee7cef2a27b" translate="yes" xml:space="preserve">
          <source>A simple prompt that displays hg info:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="87603fcaef9b30ff09e50b24e5fda2ce2fcd654c" translate="yes" xml:space="preserve">
          <source>A simple prompt that displays svn info:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="610fac60f39f41e55d40e59429099ac45fcaf3c8" translate="yes" xml:space="preserve">
          <source>A simple prompt that is a simplified version of the default debugging prompt:</source>
          <target state="translated">一个简单的提示,是默认调试提示的简化版。</target>
        </trans-unit>
        <trans-unit id="631761c6042b0b4defe6087674d679a446f769a6" translate="yes" xml:space="preserve">
          <source>A simple prompt:</source>
          <target state="translated">一个简单的提示。</target>
        </trans-unit>
        <trans-unit id="a457232f4c851ca48444c8b22ce5d86f9157d153" translate="yes" xml:space="preserve">
          <source>A simple right prompt:</source>
          <target state="translated">一个简单的右边提示。</target>
        </trans-unit>
        <trans-unit id="e87c54de638d95b5e6d226cc4b4479d88e8ad79d" translate="yes" xml:space="preserve">
          <source>A switch is a very common special type of argument. Switches almost always start with one or more hyphens '&lt;code&gt;-&lt;/code&gt;' and alter the way a command operates. For example, the '&lt;code&gt;ls&lt;/code&gt;' command usually lists all the files and directories in the current working directory, but by using the '&lt;code&gt;-l&lt;/code&gt;' switch, the behavior of '&lt;code&gt;ls&lt;/code&gt;' is changed to not only display the filename, but also the size, permissions, owner and modification time of each file.</source>
          <target state="translated">开关是一种非常常见的特殊类型的参数。切换几乎总是以一个或多个连字符' &lt;code&gt;-&lt;/code&gt; ' 开头，并更改命令的操作方式。例如，&amp;ldquo; &lt;code&gt;ls&lt;/code&gt; &amp;rdquo;命令通常会列出当前工作目录中的所有文件和目录，但是通过使用&amp;ldquo; &lt;code&gt;-l&lt;/code&gt; &amp;rdquo;开关，&amp;ldquo; &lt;code&gt;ls&lt;/code&gt; &amp;rdquo; 的行为将更改为不仅显示文件名，而且显示大小，权限，所有者和每个文件的修改时间。</target>
        </trans-unit>
        <trans-unit id="dfb06de1c7a12f5632480c8ec95581dfbbdcf321" translate="yes" xml:space="preserve">
          <source>A universal variable is a variable whose value is shared across all instances of &lt;code&gt;fish&lt;/code&gt;, now and in the future &amp;ndash; even after a reboot. You can make a variable universal with &lt;code&gt;set -U&lt;/code&gt;:</source>
          <target state="translated">通用变量是一个变量，其值在现在和将来（甚至在重新启动后）都在 &lt;code&gt;fish&lt;/code&gt; 的所有实例之间共享。您可以使用 &lt;code&gt;set -U&lt;/code&gt; 使变量通用：</target>
        </trans-unit>
        <trans-unit id="7b8d375ccbff689a61358d91a3d87c3b4c7bb526" translate="yes" xml:space="preserve">
          <source>A variable name cannot be empty. It can contain only letters, digits, and underscores. It may begin and end with any of those characters.</source>
          <target state="translated">变量名不能是空的,只能包含字母、数字和下划线。它只能包含字母、数字和下划线。它可以以这些字符中的任何一个开始和结束。</target>
        </trans-unit>
        <trans-unit id="a39ab99e2ea47c8c0e9d74827d866ecbba2cbde0" translate="yes" xml:space="preserve">
          <source>Access rights are explained in the manual page for the &lt;code&gt;chmod(1)&lt;/code&gt; program.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e139d85bd15795b0d3efa188c22e165c587928c5" translate="yes" xml:space="preserve">
          <source>Access rights are explained in the manual page for the &lt;code&gt;chmod&lt;/code&gt;(1) program.</source>
          <target state="translated">&lt;code&gt;chmod&lt;/code&gt; （1）程序的手册页中说明了访问权限。</target>
        </trans-unit>
        <trans-unit id="cf27f6010a1e75f4bb8d29911772c8214904203b" translate="yes" xml:space="preserve">
          <source>Add a new abbreviation where &lt;code&gt;gco&lt;/code&gt; will be replaced with &lt;code&gt;git checkout&lt;/code&gt; global to the current shell. This abbreviation will not be automatically visible to other shells unless the same command is run in those shells (such as when executing the commands in config.fish).</source>
          <target state="translated">添加一个新的缩写，其中 &lt;code&gt;gco&lt;/code&gt; 将被 &lt;code&gt;git checkout&lt;/code&gt; global 替换为当前shell。除非在其他shell中运行相同的命令（例如在config.fish中执行命令时），否则该缩写将不会自动对其他shell可见。</target>
        </trans-unit>
        <trans-unit id="6e3c8915a2556d62c5b7d149b19924656f4d28db" translate="yes" xml:space="preserve">
          <source>Add a new abbreviation where &lt;code&gt;l&lt;/code&gt; will be replaced with &lt;code&gt;less&lt;/code&gt; universal so all shells. Note that you omit the &lt;code&gt;-U&lt;/code&gt; since it is the default.</source>
          <target state="translated">添加一个新的缩写，其中 &lt;code&gt;l&lt;/code&gt; 将被通用性 &lt;code&gt;less&lt;/code&gt; 替换，因此所有的shell。请注意，由于它是缺省值，因此您省略了 &lt;code&gt;-U&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="fb5d43a3f1c9755eef7928213dbee5eeaa42d36e" translate="yes" xml:space="preserve">
          <source>Add the fish shell &lt;code&gt;/usr/local/bin/fish&lt;/code&gt; to &lt;code&gt;/etc/shells&lt;/code&gt; with:</source>
          <target state="translated">使用以下命令将鱼壳 &lt;code&gt;/usr/local/bin/fish&lt;/code&gt; 添加到 &lt;code&gt;/etc/shells&lt;/code&gt; 中：</target>
        </trans-unit>
        <trans-unit id="1f235c11a925e7b3330abed437c370548fb56ecc" translate="yes" xml:space="preserve">
          <source>Additionally, &lt;code&gt;blink&lt;/code&gt; can be added after each of the cursor shape parameters to set a blinking cursor in the specified shape.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fc74aa2568dbca49c63c7dc4f2b48adf6334bb72" translate="yes" xml:space="preserve">
          <source>Additionally, the following variables are available to change the highlighting in the completion pager:</source>
          <target state="translated">此外,以下变量可用于更改完成页中的高亮显示。</target>
        </trans-unit>
        <trans-unit id="3dcf0bfda5eb37d5ad6d848b3b854d252bf95ed5" translate="yes" xml:space="preserve">
          <source>After a command has been entered, it is inserted at the end of a history list. Any duplicate history items are automatically removed. By pressing the up and down keys, the user can search forwards and backwards in the history. If the current command line is not empty when starting a history search, only the commands containing the string entered into the command line are shown.</source>
          <target state="translated">在输入命令后,它会被插入到历史记录列表的最后。任何重复的历史项目都会被自动删除。通过按上、下键,用户可以在历史记录中向前和向后搜索。如果开始搜索历史记录时,当前命令行不是空的,则只显示包含在命令行中输入的字符串的命令。</target>
        </trans-unit>
        <trans-unit id="a350de02e9b5ffd85be164d43398c5ad2155568f" translate="yes" xml:space="preserve">
          <source>After a variable has been set, you can use the value of a variable in the shell through &lt;a href=&quot;#expand-variable&quot;&gt;variable expansion&lt;/a&gt;.</source>
          <target state="translated">设置变量后，可以通过&lt;a href=&quot;#expand-variable&quot;&gt;变量扩展&lt;/a&gt;在外壳中使用变量的值。</target>
        </trans-unit>
        <trans-unit id="6629fd2d9ea9eaa222685dbc3f35af94810deb35" translate="yes" xml:space="preserve">
          <source>After parsing the arguments the &lt;code&gt;argv&lt;/code&gt; var is set with local scope to any values not already consumed during flag processing. If there are not unbound values the var is set but &lt;code&gt;count $argv&lt;/code&gt; will be zero.</source>
          <target state="translated">解析完参数后，使用局部作用域将 &lt;code&gt;argv&lt;/code&gt; var设置为标志处理期间尚未使用的任何值。如果没有未绑定的值，则设置var，但 &lt;code&gt;count $argv&lt;/code&gt; 将为零。</target>
        </trans-unit>
        <trans-unit id="c71ccb08a9461f3714b74f1bc1174cad1387e3e4" translate="yes" xml:space="preserve">
          <source>All arrays are one-dimensional and cannot contain other arrays, although it is possible to fake nested arrays using the dereferencing rules of &lt;a href=&quot;#expand-variable&quot;&gt;variable expansion&lt;/a&gt;.</source>
          <target state="translated">所有数组都是一维的，不能包含其他数组，尽管可以使用&lt;a href=&quot;#expand-variable&quot;&gt;变量扩展&lt;/a&gt;的反引用规则伪造嵌套数组。</target>
        </trans-unit>
        <trans-unit id="95c98653dd35db2f0582bbcfb13f9d49a14d5a55" translate="yes" xml:space="preserve">
          <source>All lists are one-dimensional and cannot contain other lists, although it is possible to fake nested lists using the dereferencing rules of &lt;a href=&quot;#expand-variable&quot;&gt;variable expansion&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="66ffedcb95110c61b7f48b8dfe9b357e5be7aafb" translate="yes" xml:space="preserve">
          <source>All of the above expansions can be combined. If several expansions result in more than one parameter, all possible combinations are created.</source>
          <target state="translated">上述所有的扩展都可以组合。如果几个扩展导致一个以上的参数,则会创建所有可能的组合。</target>
        </trans-unit>
        <trans-unit id="828afdd065730919c157af1148a37aa2e6215eb2" translate="yes" xml:space="preserve">
          <source>All of the trigonometric functions use radians.</source>
          <target state="translated">所有的三角函数都使用弧度。</target>
        </trans-unit>
        <trans-unit id="59d286363a981fa0af60a5ca572e501d6a1474e5" translate="yes" xml:space="preserve">
          <source>Almost all fish commands respond to the &lt;code&gt;-h&lt;/code&gt; or &lt;code&gt;--help&lt;/code&gt; options to display their relevant help, also accessible using the &lt;code&gt;help&lt;/code&gt; and &lt;code&gt;man&lt;/code&gt; commands, like so:</source>
          <target state="translated">几乎所有的fish命令都响应 &lt;code&gt;-h&lt;/code&gt; 或 &lt;code&gt;--help&lt;/code&gt; 选项以显示其相关帮助，也可以使用 &lt;code&gt;help&lt;/code&gt; 和 &lt;code&gt;man&lt;/code&gt; 命令来访问它们，如下所示：</target>
        </trans-unit>
        <trans-unit id="bda1d0385b54eba22fc83053a714334995ee2583" translate="yes" xml:space="preserve">
          <source>Also shortened as &quot;I/O&quot; or &quot;IO&quot;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="517f3a2c8b9272ee95d59b7f36af89264fa4dbf8" translate="yes" xml:space="preserve">
          <source>Alt+&amp;darr;,Down</source>
          <target state="translated">Alt+&amp;darr;,Down</target>
        </trans-unit>
        <trans-unit id="5e9023ab706bd62faa0520004f30bc2ed999ef8c" translate="yes" xml:space="preserve">
          <source>Alt+&amp;larr;,Left</source>
          <target state="translated">Alt+&amp;larr;,Left</target>
        </trans-unit>
        <trans-unit id="36866486669ffcdfbef93f70b2122585d0689c65" translate="yes" xml:space="preserve">
          <source>Alt+&amp;rarr;</source>
          <target state="translated">Alt+&amp;rarr;</target>
        </trans-unit>
        <trans-unit id="6b89c31e566539bfe03d67119b891ccbd78608fd" translate="yes" xml:space="preserve">
          <source>Alt+&amp;rarr;,Right</source>
          <target state="translated">Alt+&amp;rarr;,Right</target>
        </trans-unit>
        <trans-unit id="9a9d40973db0c2622dc620880dd806a2a7b074af" translate="yes" xml:space="preserve">
          <source>Alt+&amp;uarr;,Up</source>
          <target state="translated">Alt+&amp;uarr;,Up</target>
        </trans-unit>
        <trans-unit id="bfc455c2b3ba6cee557bc6d5bddcaae8ab6cd71e" translate="yes" xml:space="preserve">
          <source>Alt+.</source>
          <target state="translated">Alt+.</target>
        </trans-unit>
        <trans-unit id="3f1d49e2c9f7278fd80b98a77041a0c748cbc877" translate="yes" xml:space="preserve">
          <source>Alt+Backspace</source>
          <target state="translated">Alt+Backspace</target>
        </trans-unit>
        <trans-unit id="e03e0d826ab2903a1d279112bf254a834058b27f" translate="yes" xml:space="preserve">
          <source>Alt+D</source>
          <target state="translated">Alt+D</target>
        </trans-unit>
        <trans-unit id="abed54704141f2d3e51473ad15ab778fff8ad229" translate="yes" xml:space="preserve">
          <source>Alt+Enter</source>
          <target state="translated">Alt+Enter</target>
        </trans-unit>
        <trans-unit id="f71a3b249f291f22237bbbed38b8c6c692ef50ea" translate="yes" xml:space="preserve">
          <source>Alt+F</source>
          <target state="translated">Alt+F</target>
        </trans-unit>
        <trans-unit id="ef42947ea26232a62f96bc3b77c5d9938c972a74" translate="yes" xml:space="preserve">
          <source>Alt+Y</source>
          <target state="translated">Alt+Y</target>
        </trans-unit>
        <trans-unit id="42067d9d74bbc067847a30164e23954aca55ff0a" translate="yes" xml:space="preserve">
          <source>Alt+c</source>
          <target state="translated">Alt+c</target>
        </trans-unit>
        <trans-unit id="d73eff91bc5add0567a63c189cfc6a840240cc3a" translate="yes" xml:space="preserve">
          <source>Alt+d</source>
          <target state="translated">Alt+d</target>
        </trans-unit>
        <trans-unit id="356f2928c7cc628dc148ace42aaa5347a9043a00" translate="yes" xml:space="preserve">
          <source>Alt+e</source>
          <target state="translated">Alt+e</target>
        </trans-unit>
        <trans-unit id="a2008eaab718a2cbdba9a5b56cc0388211241a00" translate="yes" xml:space="preserve">
          <source>Alt+h</source>
          <target state="translated">Alt+h</target>
        </trans-unit>
        <trans-unit id="63b063c0b910fdda5527dc17ae1126ec12f233f4" translate="yes" xml:space="preserve">
          <source>Alt+l</source>
          <target state="translated">Alt+l</target>
        </trans-unit>
        <trans-unit id="412b6a19e71a5431a4a033717193f98cc5ab36f2" translate="yes" xml:space="preserve">
          <source>Alt+p</source>
          <target state="translated">Alt+p</target>
        </trans-unit>
        <trans-unit id="3f12597f24de2438c063ec57e52f94359d4653a6" translate="yes" xml:space="preserve">
          <source>Alt+s</source>
          <target state="translated">Alt+s</target>
        </trans-unit>
        <trans-unit id="7c8aea22d76a0fc0d599dcc9667d21c686685110" translate="yes" xml:space="preserve">
          <source>Alt+t</source>
          <target state="translated">Alt+t</target>
        </trans-unit>
        <trans-unit id="8d028f59d024b2c7c1586395af72b9b1deb565e4" translate="yes" xml:space="preserve">
          <source>Alt+u</source>
          <target state="translated">Alt+u</target>
        </trans-unit>
        <trans-unit id="cb3eeeb8ea5fb25aecee7d1b619b3e3d542195e4" translate="yes" xml:space="preserve">
          <source>Alt+v</source>
          <target state="translated">Alt+v</target>
        </trans-unit>
        <trans-unit id="f7d4868bcba598a1dee143a75725317cae61d6b2" translate="yes" xml:space="preserve">
          <source>Alt+w</source>
          <target state="translated">Alt+w</target>
        </trans-unit>
        <trans-unit id="91cf5d208f71238a675c3bfa07523a3c0bae8a90" translate="yes" xml:space="preserve">
          <source>Alternatively, use &lt;code&gt;test -n &quot;$var&quot;&lt;/code&gt;, but remember that &lt;strong&gt;the variable must be double-quoted&lt;/strong&gt;. For example, &lt;code&gt;if test -n &quot;$var&quot;; echo not empty; end&lt;/code&gt;. The &lt;code&gt;test&lt;/code&gt; command provides its own and (-a) and or (-o):</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b83f5e1029e1f8968df11b5b3d40ca89fed19fcf" translate="yes" xml:space="preserve">
          <source>Always take care to add the &lt;code&gt;$argv&lt;/code&gt; variable to the list of parameters to the wrapped command. This makes sure that if the user specifies any additional parameters to the function, they are passed on to the underlying command.</source>
          <target state="translated">始终注意将 &lt;code&gt;$argv&lt;/code&gt; 变量添加到已包装命令的参数列表中。这样可以确保，如果用户为函数指定了任何其他参数，则它们将传递给基础命令。</target>
        </trans-unit>
        <trans-unit id="f9ad26606a8f0efef47019531f3d0c942aac7413" translate="yes" xml:space="preserve">
          <source>An RGB value with three or six hex digits, such as A0FF33 or f2f can be used. &lt;code&gt;fish&lt;/code&gt; will choose the closest supported color. A three digit value is equivalent to specifying each digit twice; e.g., &lt;code&gt;set_color 2BC&lt;/code&gt; is the same as &lt;code&gt;set_color 22BBCC&lt;/code&gt;. Hexadecimal RGB values can be in lower or uppercase. Depending on the capabilities of your terminal (and the level of support &lt;code&gt;set_color&lt;/code&gt; has for it) the actual color may be approximated by a nearby matching reserved color name or &lt;code&gt;set_color&lt;/code&gt; may not have an effect on color.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c6698f2ed87e85285db0bd4dfe6d91201b04dda0" translate="yes" xml:space="preserve">
          <source>An RGB value with three or six hex digits, such as A0FF33 or f2f can be used. &lt;code&gt;fish&lt;/code&gt; will choose the closest supported color. A three digit value is equivalent to specifying each digit twice; e.g., &lt;code&gt;set_color 2BC&lt;/code&gt; is the same as &lt;code&gt;set_color 22BBCC&lt;/code&gt;. Hexadecimal RGB values can be in lower or uppercase. Depending on the capabilities of your terminal (and the level of support &lt;code&gt;set_color&lt;/code&gt; has for it) the actual color may be approximated by a nearby matching reserved color name or &lt;code&gt;set_color&lt;/code&gt; may not have an effect on color. A second color may be given as a desired fallback color. e.g. &lt;code&gt;set_color 124212&lt;/code&gt;&lt;em&gt;brblue&lt;/em&gt; will instruct set_color to use &lt;em&gt;brblue&lt;/em&gt; if a terminal is not capable of the exact shade of grey desired. This is very useful when an 8 or 16 color terminal might otherwise not use a color.</source>
          <target state="translated">可以使用具有三个或六个十六进制数字的RGB值，例如A0FF33或f2f。 &lt;code&gt;fish&lt;/code&gt; 会选择最接近的支持颜色。一个三位数的值等效于指定每个位数两次；例如， &lt;code&gt;set_color 2BC&lt;/code&gt; 与 &lt;code&gt;set_color 22BBCC&lt;/code&gt; 相同。十六进制RGB值可以小写或大写。根据终端的功能（以及 &lt;code&gt;set_color&lt;/code&gt; 支持的级别），实际颜色可能由附近匹配的保留颜色名称来近似，或者 &lt;code&gt;set_color&lt;/code&gt; 可能对颜色没有影响。可以给出第二颜色作为期望的后备颜色。例如 &lt;code&gt;set_color 124212&lt;/code&gt; &lt;em&gt;brblue&lt;/em&gt;将指示set_color使用&lt;em&gt;brblue&lt;/em&gt;如果终端无法提供所需的确切灰色阴影。当8色或16色终端可能不使用颜色时，这非常有用。</target>
        </trans-unit>
        <trans-unit id="42927afb9c7caf7b6c8ddab65a5441b4f933c6dc" translate="yes" xml:space="preserve">
          <source>An ampersand (&lt;code&gt;&amp;amp;&lt;/code&gt;) followed by the number of another file descriptor. The output will be written to that file descriptor instead.</source>
          <target state="translated">与符号（ &lt;code&gt;&amp;amp;&lt;/code&gt; ）后跟另一个文件描述符的编号。输出将改为写入该文件描述符。</target>
        </trans-unit>
        <trans-unit id="f71943b897ee254dbdc1a97522da125ee417b99e" translate="yes" xml:space="preserve">
          <source>An ampersand followed by a minus sign (&lt;code&gt;&amp;amp;-&lt;/code&gt;). The file descriptor will be closed.</source>
          <target state="translated">连字号后跟减号（ &lt;code&gt;&amp;amp;-&lt;/code&gt; ）。文件描述符将关闭。</target>
        </trans-unit>
        <trans-unit id="71cc88334bb3e92319c03d6549b247d60c760b50" translate="yes" xml:space="preserve">
          <source>An autoloaded function becomes available automatically to all running shells.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="feaaca65392fda02c163012d9378b2dddb326e82" translate="yes" xml:space="preserve">
          <source>An example of a file redirection is &lt;code&gt;echo hello &amp;gt; output.txt&lt;/code&gt;, which directs the output of the echo command to the file output.txt.</source>
          <target state="translated">文件重定向的一个示例是 &lt;code&gt;echo hello &amp;gt; output.txt&lt;/code&gt; ，它将echo命令的输出定向到文件output.txt。</target>
        </trans-unit>
        <trans-unit id="f69522f56e3535db80624669c313a99567b23650" translate="yes" xml:space="preserve">
          <source>And history too. Type a command once, and you can re-summon it by just typing a few letters</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8bcd9af34fdfabd4b79f9b66b86a1699d04abe42" translate="yes" xml:space="preserve">
          <source>And history too. Type a command once, and you can re-summon it by just typing a few letters:</source>
          <target state="translated">也是历史。输入一次命令,你只需输入几个字母就可以重新召唤它。</target>
        </trans-unit>
        <trans-unit id="0b0fd5cdb40b4cfe992f552884b592eda469a0f9" translate="yes" xml:space="preserve">
          <source>And some other things:</source>
          <target state="translated">还有其他一些事情。</target>
        </trans-unit>
        <trans-unit id="561f19ae7fb03ebfc67b782db126853cbbf6f6cb" translate="yes" xml:space="preserve">
          <source>And these will exit non-zero:</source>
          <target state="translated">而这些将退出非零。</target>
        </trans-unit>
        <trans-unit id="b40c5f88db8dfb0b9bfe4851375485b84d5f21ba" translate="yes" xml:space="preserve">
          <source>And this will open a random picture from any of the subdirectories:</source>
          <target state="translated">而这将从任何一个子目录中随机打开一张图片。</target>
        </trans-unit>
        <trans-unit id="362b56d716d77e953ca245a04fefe6fa04496b74" translate="yes" xml:space="preserve">
          <source>Any file descriptor can be directed to a different output than its default through a mechanism called a redirection.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e8bcc5afa939d9420d0774b5e38828f941829c98" translate="yes" xml:space="preserve">
          <source>Any file descriptor can be directed to a different output than its default through a simple mechanism called a redirection.</source>
          <target state="translated">任何文件描述符都可以通过一个简单的机制,即所谓的重定向,指向一个不同于默认的输出。</target>
        </trans-unit>
        <trans-unit id="c2f3a230563fd5c0b1186bad49a4d25468f2d9d1" translate="yes" xml:space="preserve">
          <source>Any file descriptor can be redirected in an arbitrary way by prefixing the redirection with the file descriptor.</source>
          <target state="translated">任何文件描述符都可以通过在文件描述符前加上重定向的前缀,以任意的方式重定向。</target>
        </trans-unit>
        <trans-unit id="cd5f97ddaa069aad021c1d2a9c338e699d7fb280" translate="yes" xml:space="preserve">
          <source>Any trailing newlines on the input are trimmed, just as with &lt;code&gt;&quot;$(cmd)&quot;&lt;/code&gt; substitution in sh. &lt;code&gt;--no-trim-newlines&lt;/code&gt; can be used to disable this behavior, which may be useful when running a command such as &lt;code&gt;set contents (cat filename | string collect -N)&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6ce2360486723d855cffc7d0ddbf62842f609b07" translate="yes" xml:space="preserve">
          <source>Arguments beginning with &lt;code&gt;-&lt;/code&gt; are normally interpreted as switches; &lt;code&gt;--&lt;/code&gt; causes the following arguments not to be treated as switches even if they begin with &lt;code&gt;-&lt;/code&gt;. Switches and required arguments are recognized only on the command line.</source>
          <target state="translated">以 &lt;code&gt;-&lt;/code&gt; 开头的参数通常被解释为开关； &lt;code&gt;--&lt;/code&gt; 导致以下参数即使以 &lt;code&gt;-&lt;/code&gt; 开头也不会被视为开关。开关和必需的参数只能在命令行上识别。</target>
        </trans-unit>
        <trans-unit id="b90cc9bfd23567a2ff5ba1f00e7c63ca6da8755e" translate="yes" xml:space="preserve">
          <source>Arrays</source>
          <target state="translated">Arrays</target>
        </trans-unit>
        <trans-unit id="043257e881ac5312780335efc43840ed60123921" translate="yes" xml:space="preserve">
          <source>As a convenience, the pipe &lt;code&gt;&amp;amp;|&lt;/code&gt; may be used to redirect both stdout and stderr to the same process. (Note this is different from bash, which uses &lt;code&gt;|&amp;amp;&lt;/code&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="65d7ac6db0a68a35b045c043f69d790c7693b8ae" translate="yes" xml:space="preserve">
          <source>As a convenience, the redirection &lt;code&gt;&amp;amp;&amp;gt;&lt;/code&gt; can be used to direct both stdout and stderr to the same file.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="df3e5f4a2209f9a0c0df95a3cff184e572efda6a" translate="yes" xml:space="preserve">
          <source>As a more comprehensive example, here's a commented excerpt of the completions for systemd's &lt;code&gt;timedatectl&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7e5f5d858c5cb06f89afc2d8f5a2724a03bbce58" translate="yes" xml:space="preserve">
          <source>As a naming convention, exported variables are in uppercase and unexported variables are in lowercase.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="156a75280e065fb5a6b979a2a60062b81d648631" translate="yes" xml:space="preserve">
          <source>As a special case, &lt;code&gt;cd .&lt;/code&gt; is equivalent to &lt;code&gt;cd $PWD&lt;/code&gt;, which is useful in cases where a mountpoint has been recycled or a directory has been removed and recreated.</source>
          <target state="translated">作为特殊情况， &lt;code&gt;cd .&lt;/code&gt; 等效于 &lt;code&gt;cd $PWD&lt;/code&gt; ，在回收安装点或删除并重新创建目录的情况下很有用。</target>
        </trans-unit>
        <trans-unit id="473fe2640f48f2c3e356480b21727c05fe2a883f" translate="yes" xml:space="preserve">
          <source>As in any modern shell, the Up arrow,</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="20487db156547ac9b0f8f6cda4758b76bf576cc9" translate="yes" xml:space="preserve">
          <source>As in any modern shell, the Up arrow, &lt;b&gt;&amp;uarr;&lt;/b&gt; recalls whole lines, starting from the last line executed. A single press replaces &quot;!!&quot;, later presses replace &quot;!-3&quot; and the like.</source>
          <target state="translated">与在任何现代外壳程序中一样，向上箭头&lt;b&gt;&amp;uarr;&lt;/b&gt;从执行的最后一行开始回顾整行。一次按一下即可替换&amp;ldquo; !!&amp;rdquo;，以后按一次即可替换&amp;ldquo;！-3&amp;rdquo;等。</target>
        </trans-unit>
        <trans-unit id="67ab2336a0f60cb48a293dcf13625cec05689fb2" translate="yes" xml:space="preserve">
          <source>As mentioned in &lt;a href=&quot;#tut_semicolon&quot;&gt;the section on the semicolon&lt;/a&gt;, this can also be written in multiple lines, like so:</source>
          <target state="translated">如&lt;a href=&quot;#tut_semicolon&quot;&gt;分号一节所述&lt;/a&gt;，它也可以用多行编写，如下所示：</target>
        </trans-unit>
        <trans-unit id="a52775e74dd1367202ccdfebc63ffe15c3fc2a94" translate="yes" xml:space="preserve">
          <source>Autoloading Functions</source>
          <target state="translated">自动加载功能</target>
        </trans-unit>
        <trans-unit id="4824104c7854d679befc6d384e2b164a387c5851" translate="yes" xml:space="preserve">
          <source>Autoloading also won't work for &lt;a href=&quot;#event&quot;&gt;event handlers&lt;/a&gt;, since fish cannot know that a function is supposed to be executed when an event occurs when it hasn't yet loaded the function. See the &lt;a href=&quot;#event&quot;&gt;event handlers&lt;/a&gt; section for more information.</source>
          <target state="translated">自动加载也不适用于&lt;a href=&quot;#event&quot;&gt;事件处理程序&lt;/a&gt;，因为Fish尚未知道该函数应该在尚未加载该函数的事件发生时执行。有关更多信息，请参见&lt;a href=&quot;#event&quot;&gt;事件处理程序&lt;/a&gt;部分。</target>
        </trans-unit>
        <trans-unit id="95c7d742338312cc72973984211afee4d64d688a" translate="yes" xml:space="preserve">
          <source>Autoloading functions</source>
          <target state="translated">自动加载功能</target>
        </trans-unit>
        <trans-unit id="37ebd68a9ad79a75d4984b197d8be79759e981aa" translate="yes" xml:space="preserve">
          <source>Autoloading is not applicable to functions created by the &lt;code&gt;alias&lt;/code&gt; command. For functions simple enough that you prefer to use the &lt;code&gt;alias&lt;/code&gt; command to define them you'll need to put those commands in your &lt;code&gt;~/.config/fish/config.fish&lt;/code&gt; script or some other script run when the shell starts.</source>
          <target state="translated">自动加载不适用于由 &lt;code&gt;alias&lt;/code&gt; 命令创建的功能。对于足够简单的函数，您希望使用 &lt;code&gt;alias&lt;/code&gt; 命令来定义它们，则需要将这些命令放入 &lt;code&gt;~/.config/fish/config.fish&lt;/code&gt; 脚本中，或者在启动Shell时运行其他脚本。</target>
        </trans-unit>
        <trans-unit id="220cc2eeb742925687ae3d99a850d4e272eba270" translate="yes" xml:space="preserve">
          <source>Autoloading isn't applicable to aliases. Since, by definition, the function is created at the time the alias command is executed. You cannot autoload aliases.</source>
          <target state="translated">自动加载不适用于别名。因为根据定义,函数是在执行别名命令时创建的。你不能自动加载别名。</target>
        </trans-unit>
        <trans-unit id="7833f645e87e9d8459033a17299c17f343cc6bd7" translate="yes" xml:space="preserve">
          <source>Automatically loaded functions cannot be removed using &lt;code&gt;functions -e&lt;/code&gt;. Either remove the definition file or change the $fish_function_path variable to remove autoloaded functions.</source>
          <target state="translated">无法使用 &lt;code&gt;functions -e&lt;/code&gt; 删除自动加载的功能。删除定义文件或更改$ fish_function_path变量以删除自动加载的函数。</target>
        </trans-unit>
        <trans-unit id="08b275b23c8db0abd0fd47a8278bb4a362d42dd2" translate="yes" xml:space="preserve">
          <source>Autosuggestions</source>
          <target state="translated">Autosuggestions</target>
        </trans-unit>
        <trans-unit id="a97c1fe699de2b5c57693a4ec6fbf5427cf3afca" translate="yes" xml:space="preserve">
          <source>Autosuggestions are a powerful way to quickly summon frequently entered commands, by typing the first few characters. They are also an efficient technique for navigating through directory hierarchies.</source>
          <target state="translated">自动提示是一种强大的方式,通过输入前几个字符,可以快速调用经常输入的命令。它们也是一种在目录层次结构中导航的有效技术。</target>
        </trans-unit>
        <trans-unit id="efb359fec2a662dc1a33a02af7733ec339aa7947" translate="yes" xml:space="preserve">
          <source>Back to &lt;a href=&quot;index#toc-commands&quot;&gt;command index&lt;/a&gt;.</source>
          <target state="translated">返回&lt;a href=&quot;index#toc-commands&quot;&gt;命令索引&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="b6d421870c8ff86f5929b69f93de50dd0a6ad8a4" translate="yes" xml:space="preserve">
          <source>Background jobs</source>
          <target state="translated">背景工作</target>
        </trans-unit>
        <trans-unit id="88d130a66de8e5db01660642d9f23e1f0eef97dd" translate="yes" xml:space="preserve">
          <source>Backspace</source>
          <target state="translated">Backspace</target>
        </trans-unit>
        <trans-unit id="aef1ee8a9d6b03ca3f008e7820b03d1764d158f0" translate="yes" xml:space="preserve">
          <source>Be careful when you try to use braces to separate variable names from text. The problem shown above can be avoided by wrapping the variable in double quotes instead of braces (&lt;code&gt;echo &quot;$c&quot;word&lt;/code&gt;).</source>
          <target state="translated">当您尝试使用大括号将变量名与文本分开时，请务必小心。可以通过将变量用双引号而不是大括号（ &lt;code&gt;echo &quot;$c&quot;word&lt;/code&gt; ）来避免上面显示的问题。</target>
        </trans-unit>
        <trans-unit id="7feaea8ff9fd56c39af0c7242d19cfc491332827" translate="yes" xml:space="preserve">
          <source>Because history substitution is an awkward interface that was invented before interactive line editing was even possible. Fish drops it in favor of perfecting the interactive history recall interface. Switching requires a small change of habits: if you want to modify an old line/word, first recall it, then edit. E.g. don't type &quot;sudo !!&quot; - first press Up, then Home, then type &quot;sudo &quot;.</source>
          <target state="translated">因为历史代入是一个尴尬的界面,在交互式行编辑还没有出现之前,就已经发明了。鱼哥放弃了它,转而完善交互式历史回忆界面。切换需要改变一下习惯:如果你想修改一个旧的行/字,先调用它,然后再编辑。如:不要打 &quot;sudo !&quot;。-先按 &quot;Up&quot;,再按 &quot;Home&quot;,然后输入 &quot;sudo&quot;。</target>
        </trans-unit>
        <trans-unit id="6e2b48e7cf5a31dcb784896532986617c1886b80" translate="yes" xml:space="preserve">
          <source>Because this test is a shell builtin and not a standalone utility, using the -c flag on a special file descriptors like standard input and output may not return the same result when invoked from within a pipe as one would expect when invoking the &lt;code&gt;test&lt;/code&gt; utility in another shell.</source>
          <target state="translated">由于此测试是内置的shell程序，而不是独立的实用程序，因此在管道中调用特殊文件描述符（例如标准输入和输出）时使用-c标志可能不会像调用该程序中的 &lt;code&gt;test&lt;/code&gt; 实用程序那样返回相同的结果。另一个壳。</target>
        </trans-unit>
        <trans-unit id="2c0a4626f95b4339163a76408544aca1706ad80a" translate="yes" xml:space="preserve">
          <source>Both command substitution and shell variable expansion support accessing only specific items by providing a set of indices in square brackets. It's often needed to access a sequence of elements. To do this, use the range operator '&lt;code&gt;..&lt;/code&gt;' for this. A range '&lt;code&gt;a..b&lt;/code&gt;', where range limits 'a' and 'b' are integer numbers, is expanded into a sequence of indices '&lt;code&gt;a a+1 a+2 ... b&lt;/code&gt;' or '&lt;code&gt;a a-1 a-2 ... b&lt;/code&gt;' depending on which of 'a' or 'b' is higher. The negative range limits are calculated from the end of the array or command substitution. Note that invalid indexes for either end are silently clamped to one or the size of the array as appropriate.</source>
          <target state="translated">命令替换和Shell变量扩展都通过在方括号中提供一组索引来支持仅访问特定项。通常需要访问一系列元素。为此，请使用范围运算符&amp;ldquo; &lt;code&gt;..&lt;/code&gt; &amp;rdquo;。范围&amp;ldquo; &lt;code&gt;a..b&lt;/code&gt; &amp;rdquo;（范围限制&amp;ldquo; a&amp;rdquo;和&amp;ldquo; b&amp;rdquo;是整数）被扩展为索引序列&amp;ldquo; &lt;code&gt;a a+1 a+2 ... b&lt;/code&gt; &amp;rdquo;或&amp;ldquo; &lt;code&gt;a a-1 a-2 ... b&lt;/code&gt; '取决于'a'或'b'中哪个较高。负范围限制是从数组末尾或命令替换开始计算的。请注意，任一端的无效索引都将被静默地限制为一个或适当的数组大小。</target>
        </trans-unit>
        <trans-unit id="75ffa6a25ecf8db0b72541843389d9eaf8b53a19" translate="yes" xml:space="preserve">
          <source>Both integers and floating point numbers are supported.</source>
          <target state="translated">同时支持整数和浮点数。</target>
        </trans-unit>
        <trans-unit id="a427d5ed7ae29cac94543768854841dc58975513" translate="yes" xml:space="preserve">
          <source>Both the &lt;code&gt;match&lt;/code&gt; and &lt;code&gt;replace&lt;/code&gt; subcommand support regular expressions when used with the &lt;code&gt;-r&lt;/code&gt; or &lt;code&gt;--regex&lt;/code&gt; option. The dialect is that of PCRE2.</source>
          <target state="translated">当与 &lt;code&gt;-r&lt;/code&gt; 或 &lt;code&gt;--regex&lt;/code&gt; 选项一起使用时， &lt;code&gt;match&lt;/code&gt; 和 &lt;code&gt;replace&lt;/code&gt; 子命令均支持正则表达式。方言是PCRE2的方言。</target>
        </trans-unit>
        <trans-unit id="511cb46636e15b326ac52fc0e55d4fdd22eb3466" translate="yes" xml:space="preserve">
          <source>Brace expansion</source>
          <target state="translated">支架扩张</target>
        </trans-unit>
        <trans-unit id="b2b396ea7eca30ae26382239ecff257585cae7ee" translate="yes" xml:space="preserve">
          <source>Bracket expansion</source>
          <target state="translated">托架扩展</target>
        </trans-unit>
        <trans-unit id="b82bb93621eea3789efc2e789761d65a7d589377" translate="yes" xml:space="preserve">
          <source>Builtin commands</source>
          <target state="translated">内置命令</target>
        </trans-unit>
        <trans-unit id="3d71f7e1b353d405d0ac11988a391e51c106c8d8" translate="yes" xml:space="preserve">
          <source>But this is not:</source>
          <target state="translated">但这不是。</target>
        </trans-unit>
        <trans-unit id="cde26bb231339705624e1a2606178650cfe6ce34" translate="yes" xml:space="preserve">
          <source>By default &lt;code&gt;$fish_function_path&lt;/code&gt; contains the following:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="48c59a6753b3cfab58dea49a5311a9139ab88123" translate="yes" xml:space="preserve">
          <source>By default interactive commands are logged to &lt;code&gt;$XDG_DATA_HOME/fish/fish_history&lt;/code&gt; (typically &lt;code&gt;~/.local/share/fish/fish_history&lt;/code&gt;).</source>
          <target state="translated">默认情况下，交互式命令记录到 &lt;code&gt;$XDG_DATA_HOME/fish/fish_history&lt;/code&gt; （通常为 &lt;code&gt;~/.local/share/fish/fish_history&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="32d73806ca1d3aebeb76dd86671a3241e81f5c68" translate="yes" xml:space="preserve">
          <source>By default, Fish searches the following for completions, using the first available file that it finds:</source>
          <target state="translated">默认情况下,Fish会使用它找到的第一个可用文件来搜索以下内容。</target>
        </trans-unit>
        <trans-unit id="0d8a923544fbc788e85068131f51c4e6a9993b6b" translate="yes" xml:space="preserve">
          <source>By default, Fish searches the following for functions, using the first available file that it finds:</source>
          <target state="translated">默认情况下,Fish搜索以下函数,使用它找到的第一个可用文件。</target>
        </trans-unit>
        <trans-unit id="59136d65df69881397a99de96dfa18d804e65129" translate="yes" xml:space="preserve">
          <source>By default, only the current branch is shown because &lt;code&gt;hg status&lt;/code&gt; can take be slow on large repository. You can enable a more informative prompt by setting the variable &lt;code&gt;$fish_prompt_hg_show_informative_status&lt;/code&gt;, for example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="315b1092a86cf296a40f2822b51753c337ac1521" translate="yes" xml:space="preserve">
          <source>By default, the output is as a float with trailing zeroes trimmed. To get a fixed representation, the &lt;code&gt;--scale&lt;/code&gt; option can be used, including &lt;code&gt;--scale=0&lt;/code&gt; for integer output.</source>
          <target state="translated">默认情况下，输出为浮点数，其中修剪了尾随零。要获得固定的表示形式，可以使用 &lt;code&gt;--scale&lt;/code&gt; 选项，其中包括 &lt;code&gt;--scale=0&lt;/code&gt; 用于整数输出。</target>
        </trans-unit>
        <trans-unit id="72523c77472ad7835198f8fcd9e09a5badc11af9" translate="yes" xml:space="preserve">
          <source>By defining the &lt;code&gt;fish_breakpoint_prompt&lt;/code&gt; function, the user can choose a custom prompt when asking for input in response to a &lt;a href=&quot;breakpoint#cmd-breakpoint&quot;&gt;breakpoint&lt;/a&gt; command. The &lt;code&gt;fish_breakpoint_prompt&lt;/code&gt; function is executed when the prompt is to be shown, and the output is used as a prompt.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="db7a1b873a6bb02030899acd0c28b71468ea0843" translate="yes" xml:space="preserve">
          <source>By defining the &lt;code&gt;fish_breakpoint_prompt&lt;/code&gt; function, the user can choose a custom prompt when asking for input in response to a &lt;code&gt;breakpoint&lt;/code&gt; command. The &lt;code&gt;fish_breakpoint_prompt&lt;/code&gt; function is executed when the prompt is to be shown, and the output is used as a prompt.</source>
          <target state="translated">通过定义 &lt;code&gt;fish_breakpoint_prompt&lt;/code&gt; 函数，用户可以在请求输入以响应 &lt;code&gt;breakpoint&lt;/code&gt; 命令时选择自定义提示。该 &lt;code&gt;fish_breakpoint_prompt&lt;/code&gt; 功能被执行时，提示将被示出，并且输出作为一个提示。</target>
        </trans-unit>
        <trans-unit id="be6b595ea352dde32c38a4fa33c350b05d798766" translate="yes" xml:space="preserve">
          <source>By defining the &lt;code&gt;fish_prompt&lt;/code&gt; function, the user can choose a custom prompt. The &lt;code&gt;fish_prompt&lt;/code&gt; function is executed when the prompt is to be shown, and the output is used as a prompt.</source>
          <target state="translated">通过定义 &lt;code&gt;fish_prompt&lt;/code&gt; 函数，用户可以选择一个自定义提示。该 &lt;code&gt;fish_prompt&lt;/code&gt; 功能被执行时，提示将被示出，并且输出作为一个提示。</target>
        </trans-unit>
        <trans-unit id="630303d4e2fa4b039b2b6a8e3e8b5957dc1783d2" translate="yes" xml:space="preserve">
          <source>By ending a command with the &lt;code&gt;&amp;amp;&lt;/code&gt; (ampersand) symbol, the user tells &lt;code&gt;fish&lt;/code&gt; to put the specified command into the background. A background process will be run simultaneous with &lt;code&gt;fish&lt;/code&gt;. &lt;code&gt;fish&lt;/code&gt; will retain control of the terminal, so the program will not be able to read from the keyboard.</source>
          <target state="translated">通过以 &lt;code&gt;&amp;amp;&lt;/code&gt; （与号）符号结束命令，用户告诉 &lt;code&gt;fish&lt;/code&gt; 将指定的命令放入后台。后台进程将与 &lt;code&gt;fish&lt;/code&gt; 同时运行。 &lt;code&gt;fish&lt;/code&gt; 将保留对终端的控制，因此该程序将无法从键盘读取。</target>
        </trans-unit>
        <trans-unit id="3923f5578037b3542b2b19d15f49bde3629ec275" translate="yes" xml:space="preserve">
          <source>By inserting a backslash (&lt;code&gt;\&lt;/code&gt;) character before pressing the</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="02079690d5cebbe350c1aa5604a81e7a19265022" translate="yes" xml:space="preserve">
          <source>By inserting a backslash (&lt;code&gt;\&lt;/code&gt;) character before pressing the &lt;b&gt;Enter&lt;/b&gt; key, escaping the newline.</source>
          <target state="translated">通过在按&lt;b&gt;Enter&lt;/b&gt;键之前插入反斜杠（ &lt;code&gt;\&lt;/code&gt; ）字符，以使换行符转义。&lt;b&gt;&lt;/b&gt;</target>
        </trans-unit>
        <trans-unit id="82a4b7b090d106c959549d48fe03da459c91c544" translate="yes" xml:space="preserve">
          <source>By pressing</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5663475279a3c781c24c4811471a2f176e1db991" translate="yes" xml:space="preserve">
          <source>By pressing &lt;em&gt;Alt&lt;/em&gt;-&lt;b&gt;&amp;uarr;&lt;/b&gt; and &lt;em&gt;Alt&lt;/em&gt;-&lt;b&gt;&amp;darr;&lt;/b&gt;, a history search is also performed, but instead of searching for a complete commandline, each commandline is broken into separate elements just like it would be before execution, and the history is searched for an element matching that under the cursor.</source>
          <target state="translated">按下&lt;em&gt;Alt键&lt;/em&gt; - &lt;b&gt;&amp;uarr;&lt;/b&gt;和&lt;em&gt;Alt键&lt;/em&gt; - &lt;b&gt;&amp;darr;&lt;/b&gt;，历史搜索也被执行，但而不是寻找一个完整的命令行，每个命令行被分解为单独的元素，就像它是在执行前，并且历史记录中搜索一个元素匹配在光标下方。</target>
        </trans-unit>
        <trans-unit id="894ba850efc456224525f2c8a25b95199c183915" translate="yes" xml:space="preserve">
          <source>By pressing &lt;em&gt;Control&lt;/em&gt;-&lt;b&gt;Z&lt;/b&gt;, the user stops a currently running foreground program and returns control to &lt;code&gt;fish&lt;/code&gt;. Some programs do not support this feature, or remap it to another key. GNU Emacs uses &lt;em&gt;Control&lt;/em&gt;-&lt;b&gt;X&lt;/b&gt;&lt;b&gt;z&lt;/b&gt; to stop running.</source>
          <target state="translated">通过按&lt;em&gt;Control&lt;/em&gt; - &lt;b&gt;Z&lt;/b&gt;，用户可以停止当前正在运行的前台程序，并将控制权返回给 &lt;code&gt;fish&lt;/code&gt; 。某些程序不支持此功能，或将其重新映射到另一个键。GNU Emacs使用&lt;em&gt;Control&lt;/em&gt; - &lt;b&gt;X &lt;/b&gt;&lt;b&gt;z&lt;/b&gt;停止运行。</target>
        </trans-unit>
        <trans-unit id="24eaf089af6a9daa271f7a6b0f06e6709ca1da8e" translate="yes" xml:space="preserve">
          <source>By using one of the event handler switches, a function can be made to run automatically at specific events. The user may generate new events using the &lt;a href=&quot;#emit&quot;&gt;emit&lt;/a&gt; builtin. Fish generates the following named events:</source>
          <target state="translated">通过使用事件处理程序开关之一，可以使功能在特定事件下自动运行。用户可以生成使用新的事件&lt;a href=&quot;#emit&quot;&gt;EMIT&lt;/a&gt;内置。Fish生成以下命名事件：</target>
        </trans-unit>
        <trans-unit id="6a5c8721be6b4633186b4214510f8a5ef8c0f497" translate="yes" xml:space="preserve">
          <source>By using one of the event handler switches, a function can be made to run automatically at specific events. The user may generate new events using the &lt;a href=&quot;emit#cmd-emit&quot;&gt;emit&lt;/a&gt; builtin. Fish generates the following named events:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="702f8fce2752414a6a80cd6a6df6d1f2e4852509" translate="yes" xml:space="preserve">
          <source>By using the &lt;a href=&quot;cmds/bg#cmd-bg&quot;&gt;bg&lt;/a&gt; and &lt;a href=&quot;cmds/fg#cmd-fg&quot;&gt;fg&lt;/a&gt; builtin commands, the user can send any currently running job into the foreground or background.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8da67926c227ce4e24b10b06e71944960277e706" translate="yes" xml:space="preserve">
          <source>By using the &lt;a href=&quot;commands#fg&quot;&gt;&lt;code&gt;fg&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;commands#bg&quot;&gt;&lt;code&gt;bg&lt;/code&gt;&lt;/a&gt; builtin commands, the user can send any currently running job into the foreground or background.</source>
          <target state="translated">通过使用&lt;a href=&quot;commands#fg&quot;&gt; &lt;code&gt;fg&lt;/code&gt; &lt;/a&gt;和&lt;a href=&quot;commands#bg&quot;&gt; &lt;code&gt;bg&lt;/code&gt; &lt;/a&gt;内置命令，用户可以将任何当前正在运行的作业发送到前台或后台。</target>
        </trans-unit>
        <trans-unit id="1b6aff63c75bb0bffcdb7bfed5216e186365ff61" translate="yes" xml:space="preserve">
          <source>Cartesian Products</source>
          <target state="translated">笛卡尔产品</target>
        </trans-unit>
        <trans-unit id="fcb3f81706967bbcb598dd0c3292965cf75b975f" translate="yes" xml:space="preserve">
          <source>Causes &lt;code&gt;fish&lt;/code&gt; to exit when</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="da6418309e4149798278c2a545077667f8bdc404" translate="yes" xml:space="preserve">
          <source>Causes &lt;code&gt;fish&lt;/code&gt; to exit when &lt;em&gt;Control&lt;/em&gt;-&lt;b&gt;D&lt;/b&gt; is pressed.</source>
          <target state="translated">按下&lt;em&gt;Control&lt;/em&gt; - &lt;b&gt;D&lt;/b&gt;时，导致 &lt;code&gt;fish&lt;/code&gt; 退出。&lt;em&gt;&lt;/em&gt;&lt;b&gt;&lt;/b&gt;</target>
        </trans-unit>
        <trans-unit id="bcaa33a7ae44bd5042c37a9cdbea7f843b1cf7c8" translate="yes" xml:space="preserve">
          <source>Caveats</source>
          <target state="translated">Caveats</target>
        </trans-unit>
        <trans-unit id="c8b1d49fdfd53112a6dec6dbd017336ac207e99e" translate="yes" xml:space="preserve">
          <source>Change the value of the variable &lt;code&gt;fish_greeting&lt;/code&gt; or create a &lt;code&gt;fish_greeting&lt;/code&gt; function. For example, to remove the greeting use:</source>
          <target state="translated">更改变量 &lt;code&gt;fish_greeting&lt;/code&gt; 的值或创建 &lt;code&gt;fish_greeting&lt;/code&gt; 函数。例如，要删除问候语，请使用：</target>
        </trans-unit>
        <trans-unit id="f3de89fbff6985c921affb37ab3ad59fbe48b95c" translate="yes" xml:space="preserve">
          <source>Change your default shell to fish with:</source>
          <target state="translated">改变你的默认贝壳来钓鱼。</target>
        </trans-unit>
        <trans-unit id="122ab61fb2390b34bf8bb07c44168363d5d992db" translate="yes" xml:space="preserve">
          <source>Character classes, some of the more important:</source>
          <target state="translated">人物类,一些比较重要的。</target>
        </trans-unit>
        <trans-unit id="837815e7e725405b61d99f890160135ef054c4ec" translate="yes" xml:space="preserve">
          <source>Colors used with &lt;code&gt;showcolorhints&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1aafc3262722e98fb6adb1e17c5cec1e303396d2" translate="yes" xml:space="preserve">
          <source>Combiners (And, Or, Not)</source>
          <target state="translated">合并者(以及,或者,不是</target>
        </trans-unit>
        <trans-unit id="b6709a8adcdc85a8bf2a1db551231443bd8370ba" translate="yes" xml:space="preserve">
          <source>Combining different expansions</source>
          <target state="translated">结合不同的扩展</target>
        </trans-unit>
        <trans-unit id="9625ac94507491a715e0ffe2602f1661a6b23708" translate="yes" xml:space="preserve">
          <source>Command Substitutions</source>
          <target state="translated">命令替换</target>
        </trans-unit>
        <trans-unit id="83637571c7cadd0f3ed544a2316197ea7b780571" translate="yes" xml:space="preserve">
          <source>Command line editor</source>
          <target state="translated">命令行编辑器</target>
        </trans-unit>
        <trans-unit id="0bb0bf3bb5581e18abbaa7de52785c4cc0e3a748" translate="yes" xml:space="preserve">
          <source>Command mode</source>
          <target state="translated">命令模式</target>
        </trans-unit>
        <trans-unit id="a2bd119306b51a92961511ebb58609c5dd727601" translate="yes" xml:space="preserve">
          <source>Command mode is also known as normal mode.</source>
          <target state="translated">命令模式又称正常模式。</target>
        </trans-unit>
        <trans-unit id="f0cab561b2d1b6a50046aaac51d5900407780ea5" translate="yes" xml:space="preserve">
          <source>Command reference</source>
          <target state="translated">命令参考</target>
        </trans-unit>
        <trans-unit id="2bbdbfd618344aa7db88dfcb6076ec5fa368eb17" translate="yes" xml:space="preserve">
          <source>Command specific tab-completions in &lt;code&gt;fish&lt;/code&gt; are based on the notion of options and arguments. An option is a parameter which begins with a hyphen, such as '&lt;code&gt;-h&lt;/code&gt;', '&lt;code&gt;-help&lt;/code&gt;' or '&lt;code&gt;--help&lt;/code&gt;'. Arguments are parameters that do not begin with a hyphen. Fish recognizes three styles of options, the same styles as the GNU version of the getopt library. These styles are:</source>
          <target state="translated">&lt;code&gt;fish&lt;/code&gt; 中命令特定的制表符补全基于选项和参数的概念。选项是一个以连字符开头的参数，例如&amp;ldquo; &lt;code&gt;-h&lt;/code&gt; &amp;rdquo;，&amp;ldquo;- &lt;code&gt;-help&lt;/code&gt; &amp;rdquo;或&amp;ldquo; &lt;code&gt;--help&lt;/code&gt; &amp;rdquo;。参数是不以连字符开头的参数。 Fish可以识别三种样式的选项，这些样式与getopt库的GNU版本相同。这些样式是：</target>
        </trans-unit>
        <trans-unit id="030d4685e9a5967e8a6f3c21ac5fdf12f5dd2ed5" translate="yes" xml:space="preserve">
          <source>Command substitution</source>
          <target state="translated">命令替换</target>
        </trans-unit>
        <trans-unit id="530a1cffa7ec59af0b705c2ba3cd0b438869485e" translate="yes" xml:space="preserve">
          <source>Command substitutions</source>
          <target state="translated">命令替换</target>
        </trans-unit>
        <trans-unit id="878863dedc3f406e3a65e48d9a354f6f067ef79a" translate="yes" xml:space="preserve">
          <source>Command substitutions are not expanded within quotes. Instead, you can temporarily close the quotes, add the command substitution, and reopen them, all in the same argument:</source>
          <target state="translated">命令替换不会在引号内展开。相反,你可以暂时关闭引号,添加命令替换,然后在同一个参数中重新打开它们。</target>
        </trans-unit>
        <trans-unit id="71c192adcb09f8e5eb78adbae51c316308911f17" translate="yes" xml:space="preserve">
          <source>Command substitutions found in &lt;code&gt;OPTION_ARGUMENTS&lt;/code&gt; are not expected to return a space-separated list of arguments. Instead they must return a newline-separated list of arguments, and each argument may optionally have a tab character followed by the argument description. Any description provided in this way overrides a description given with &lt;code&gt;-d&lt;/code&gt; or &lt;code&gt;--description&lt;/code&gt;.</source>
          <target state="translated">在 &lt;code&gt;OPTION_ARGUMENTS&lt;/code&gt; 中找到的命令替换不应返回以空格分隔的参数列表。相反，它们必须返回以换行符分隔的参数列表，并且每个参数可以有选择地包含一个制表符，后跟参数说明。以这种方式提供的任何描述都将覆盖 &lt;code&gt;-d&lt;/code&gt; 或 &lt;code&gt;--description&lt;/code&gt; 给出的描述。</target>
        </trans-unit>
        <trans-unit id="874c75da73d00d89463a52a5b3bd6b12c296e9c3" translate="yes" xml:space="preserve">
          <source>Command substitutions use the output of one command as an argument to another. Unlike other shells, &lt;code&gt;fish&lt;/code&gt; does not use backticks ` for command substitutions. Instead, it uses parentheses:</source>
          <target state="translated">命令替换使用一个命令的输出作为另一个命令的参数。与其他shell不同， &lt;code&gt;fish&lt;/code&gt; 不使用反引号`来替换命令。相反，它使用括号：</target>
        </trans-unit>
        <trans-unit id="a3571f5f1d40b027e13d061d92b54680b29bb7f2" translate="yes" xml:space="preserve">
          <source>Command substitutions use the output of one command as an argument to another. Unlike other shells, &lt;code&gt;fish&lt;/code&gt; does not use backticks `` for command substitutions. Instead, it uses parentheses:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="45e5f3f72e961cb70134ba35f7a27a9620e515f7" translate="yes" xml:space="preserve">
          <source>Commands</source>
          <target state="translated">Commands</target>
        </trans-unit>
        <trans-unit id="bf9c7a7be3e1f3bbb8b332baec1b3308eba8941c" translate="yes" xml:space="preserve">
          <source>Commands and parameters are separated by the space character ' '. Every command ends with either a newline (i.e. by pressing the return key) or a semicolon '&lt;code&gt;;&lt;/code&gt;'. More than one command can be written on the same line by separating them with semicolons.</source>
          <target state="translated">命令和参数用空格字符&amp;ldquo;&amp;rdquo;分隔。每个命令都以换行符（即按回车键）或分号' &lt;code&gt;;&lt;/code&gt; 结束。'。通过使用分号将它们分开，可以在同一行上编写多个命令。</target>
        </trans-unit>
        <trans-unit id="83546b9b7e63e4645609121c2d50d70ab2f8f27d" translate="yes" xml:space="preserve">
          <source>Commands and parameters are separated by the space character &lt;code&gt;' '&lt;/code&gt;. Every command ends with either a newline (i.e. by pressing the return key) or a semicolon '&lt;code&gt;;&lt;/code&gt;'. More than one command can be written on the same line by separating them with semicolons.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1c09ac3482bfc9b09262d71ce2a3754d63bdebcd" translate="yes" xml:space="preserve">
          <source>Commands can be chained with semicolons.</source>
          <target state="translated">命令可以用分号连锁。</target>
        </trans-unit>
        <trans-unit id="c7fc896ec27369aa3d8b46ed7bef7ce121078ca5" translate="yes" xml:space="preserve">
          <source>Comparison to other tools</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7d648a6dff363974f754bb78876c2b10dadd8183" translate="yes" xml:space="preserve">
          <source>Compatibility notes</source>
          <target state="translated">兼容性说明</target>
        </trans-unit>
        <trans-unit id="af799f168326079cfa5fbcb1f17396cdcd478951" translate="yes" xml:space="preserve">
          <source>Completion of commands (builtins, functions and regular programs).</source>
          <target state="translated">完成命令(内置程序、函数和常规程序)。</target>
        </trans-unit>
        <trans-unit id="e251e522a2899f0695ad97b7e9306c9baaf077df" translate="yes" xml:space="preserve">
          <source>Completion of filenames, even on strings with wildcards such as '&lt;code&gt;*&lt;/code&gt;' and '&lt;code&gt;**&lt;/code&gt;'.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3e42585f4a363d61f824319c2d4ccdcc434dd210" translate="yes" xml:space="preserve">
          <source>Completion of filenames, even on strings with wildcards such as '&lt;code&gt;*&lt;/code&gt;', '&lt;code&gt;**&lt;/code&gt;' and '&lt;code&gt;?&lt;/code&gt;'.</source>
          <target state="translated">文件名的完成，即使在带有通配符（例如' &lt;code&gt;*&lt;/code&gt; '，' &lt;code&gt;**&lt;/code&gt; '和' &lt;code&gt;?&lt;/code&gt; )的字符串上也是如此 '。</target>
        </trans-unit>
        <trans-unit id="9c40677954f135a6a56c9a9c3b9199834c1a73af" translate="yes" xml:space="preserve">
          <source>Completion of shell variable names.</source>
          <target state="translated">完成shell变量名。</target>
        </trans-unit>
        <trans-unit id="15f1e262b91eabd8e311927699155dff284efc75" translate="yes" xml:space="preserve">
          <source>Completion of usernames for tilde expansion.</source>
          <target state="translated">完成用户名的提字扩音。</target>
        </trans-unit>
        <trans-unit id="8492522b516edbc0711ffad46d10e7abb03c888a" translate="yes" xml:space="preserve">
          <source>Completions automatically generated from the operating system's manual, usually stored in &lt;code&gt;~/.local/share/fish/generated_completions&lt;/code&gt;.</source>
          <target state="translated">根据操作系统手册自动生成的补全，通常存储在 &lt;code&gt;~/.local/share/fish/generated_completions&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="5e2bb22e8c63c3bc4092f861769d982ce94a1df7" translate="yes" xml:space="preserve">
          <source>Completions automatically generated from the operating system's manuals, usually stored in &lt;code&gt;~/.local/share/fish/generated_completions&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="77d31de015d4bc8d64c24ea654ff949d735a3c85" translate="yes" xml:space="preserve">
          <source>Completions can be defined on the commandline or in a configuration file, but they can also be automatically loaded. Fish automatically searches through any directories in the array variable &lt;code&gt;$fish_complete_path&lt;/code&gt;, and any completions defined are automatically loaded when needed. A completion file must have a filename consisting of the name of the command to complete and the suffix '&lt;code&gt;.fish&lt;/code&gt;'.</source>
          <target state="translated">可以在命令行或配置文件中定义完成，但也可以自动加载它们。Fish会自动搜索数组变量 &lt;code&gt;$fish_complete_path&lt;/code&gt; 中的任何目录，并在需要时自动加载定义的所有补全。完成文件必须具有由要完成的命令的名称和后缀&amp;ldquo; &lt;code&gt;.fish&lt;/code&gt; &amp;rdquo; 组成的文件名。</target>
        </trans-unit>
        <trans-unit id="e197b8e42b1affde93333b42e719ef94bc91d71d" translate="yes" xml:space="preserve">
          <source>Completions can be defined on the commandline or in a configuration file, but they can also be automatically loaded. Fish automatically searches through any directories in the list variable &lt;code&gt;$fish_complete_path&lt;/code&gt;, and any completions defined are automatically loaded when needed. A completion file must have a filename consisting of the name of the command to complete and the suffix '&lt;code&gt;.fish&lt;/code&gt;'.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7459a1dd314e140f10e2be4ec65979e72c902ac1" translate="yes" xml:space="preserve">
          <source>Conditional execution of code and flow control</source>
          <target state="translated">代码的条件执行和流程控制</target>
        </trans-unit>
        <trans-unit id="0d5f4aeff7e3312bef6ba63f6a5b4ba1f78a94cb" translate="yes" xml:space="preserve">
          <source>Conditionals (If, Else, Switch)</source>
          <target state="translated">条件(If,Else,Switch)</target>
        </trans-unit>
        <trans-unit id="719fae22a2cd4fb971f775638bdd50f6e63161da" translate="yes" xml:space="preserve">
          <source>Configurable greeting</source>
          <target state="translated">可配置的问候语</target>
        </trans-unit>
        <trans-unit id="f0b58e3b2ee0b9289c02bd1984243913025c6fa6" translate="yes" xml:space="preserve">
          <source>Configuration files are evaluated in the following order:</source>
          <target state="translated">配置文件按以下顺序进行评估。</target>
        </trans-unit>
        <trans-unit id="f4e0d62ab20b29e8432ac06936c92f52d1fc4b42" translate="yes" xml:space="preserve">
          <source>Configuration shipped with fish, which should not be edited, in &lt;code&gt;$__fish_data_dir/config.fish&lt;/code&gt; (usually &lt;code&gt;/usr/share/fish/config.fish&lt;/code&gt;).</source>
          <target state="translated">fish附带的配置，不应在 &lt;code&gt;$__fish_data_dir/config.fish&lt;/code&gt; 进行编辑（通常是 &lt;code&gt;/usr/share/fish/config.fish&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="22ff08f353e570d20e5a6366fd00500ccc60eb5a" translate="yes" xml:space="preserve">
          <source>Configuration snippets in files ending in &lt;code&gt;.fish&lt;/code&gt;, in the directories:</source>
          <target state="translated">目录中以 &lt;code&gt;.fish&lt;/code&gt; 结尾的文件中的配置摘要：</target>
        </trans-unit>
        <trans-unit id="d916ac2852cd35aba927b6e5183496dfbb68f253" translate="yes" xml:space="preserve">
          <source>Consider, that &lt;code&gt;bash&lt;/code&gt; is also a command. With &lt;code&gt;man bash&lt;/code&gt; you can see that there are two ways to do this:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0f386d7e7881b32fa39cb7b62bdb15c0f3a4c0e1" translate="yes" xml:space="preserve">
          <source>Constants</source>
          <target state="translated">Constants</target>
        </trans-unit>
        <trans-unit id="ff899dcd6f7ebd6a861299e03974633bfd5ad6eb" translate="yes" xml:space="preserve">
          <source>Control+A</source>
          <target state="translated">Control+A</target>
        </trans-unit>
        <trans-unit id="c9e55fac4bb2f73b8827737eba3f6fedb7f63ad3" translate="yes" xml:space="preserve">
          <source>Control+B</source>
          <target state="translated">Control+B</target>
        </trans-unit>
        <trans-unit id="e1e40212e505bb255ad247fb75a7c69252c1147c" translate="yes" xml:space="preserve">
          <source>Control+C</source>
          <target state="translated">Control+C</target>
        </trans-unit>
        <trans-unit id="7fad1011a56dea667e4e890b0f054b35b096ceac" translate="yes" xml:space="preserve">
          <source>Control+D</source>
          <target state="translated">Control+D</target>
        </trans-unit>
        <trans-unit id="8a337ce2c51c129c9e8bc692ea6dd78eba4574de" translate="yes" xml:space="preserve">
          <source>Control+E</source>
          <target state="translated">Control+E</target>
        </trans-unit>
        <trans-unit id="19d71b4677f714637e6947b67f44a1239e3ad114" translate="yes" xml:space="preserve">
          <source>Control+F</source>
          <target state="translated">Control+F</target>
        </trans-unit>
        <trans-unit id="de4ae039698d198c307859fcbedac2883a1d1f6c" translate="yes" xml:space="preserve">
          <source>Control+K</source>
          <target state="translated">Control+K</target>
        </trans-unit>
        <trans-unit id="b263435b368ba4e5650bd91db945e54b75f37e4b" translate="yes" xml:space="preserve">
          <source>Control+L</source>
          <target state="translated">Control+L</target>
        </trans-unit>
        <trans-unit id="d930468655a2e8de99ecf073632706dc9fd790c0" translate="yes" xml:space="preserve">
          <source>Control+N</source>
          <target state="translated">Control+N</target>
        </trans-unit>
        <trans-unit id="6f5e6052e453bf4cbc730651ad83bd4c9bf16d04" translate="yes" xml:space="preserve">
          <source>Control+P</source>
          <target state="translated">Control+P</target>
        </trans-unit>
        <trans-unit id="5d54970f5eafb4a1a71ec49ea17c31b605d918b7" translate="yes" xml:space="preserve">
          <source>Control+U</source>
          <target state="translated">Control+U</target>
        </trans-unit>
        <trans-unit id="f5ce6985615ea22bf239b5f5712adbd6c7392c11" translate="yes" xml:space="preserve">
          <source>Control+V</source>
          <target state="translated">Control+V</target>
        </trans-unit>
        <trans-unit id="1c73dbe8cbdd8b0d4324b844077a83d8b67ad535" translate="yes" xml:space="preserve">
          <source>Control+W</source>
          <target state="translated">Control+W</target>
        </trans-unit>
        <trans-unit id="c312ad573f898197b4f8b8123f1e8f824522fab2" translate="yes" xml:space="preserve">
          <source>Control+X</source>
          <target state="translated">Control+X</target>
        </trans-unit>
        <trans-unit id="232d7346f91b802a342b5f2452c2d1f067dcf48a" translate="yes" xml:space="preserve">
          <source>Control+Y</source>
          <target state="translated">Control+Y</target>
        </trans-unit>
        <trans-unit id="723f6bbc308bdf50335b19533e6f0eef28ea6810" translate="yes" xml:space="preserve">
          <source>Control+Z</source>
          <target state="translated">Control+Z</target>
        </trans-unit>
        <trans-unit id="6e141812a128e9ade7d8324a0d80b50782c0a03d" translate="yes" xml:space="preserve">
          <source>Control+t</source>
          <target state="translated">Control+t</target>
        </trans-unit>
        <trans-unit id="e3cc27f9da6f6edecf17e1636fab048c5c38faaf" translate="yes" xml:space="preserve">
          <source>Copy and paste (Kill Ring)</source>
          <target state="translated">复制并粘贴(杀戒)</target>
        </trans-unit>
        <trans-unit id="af4e866be52de67a1c27087ff82b1fd31d26bf20" translate="yes" xml:space="preserve">
          <source>Copy and paste from outside are also supported, both via the</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="26f56d23fbcc33866ced8719ced9441dcfe31145" translate="yes" xml:space="preserve">
          <source>Copy and paste from outside are also supported, both via the &lt;em&gt;Control&lt;/em&gt;-&lt;b&gt;X&lt;/b&gt; / &lt;em&gt;Control&lt;/em&gt;-&lt;b&gt;V&lt;/b&gt; bindings and via the terminal's paste function, for which fish enables &quot;Bracketed Paste Mode&quot;. When pasting inside single quotes, pasted single quotes and backslashes are automatically escaped so that the result can be used as a single token simply by closing the quote after.</source>
          <target state="translated">还可以通过&lt;em&gt;Control&lt;/em&gt; - &lt;b&gt;X&lt;/b&gt; / &lt;em&gt;Control&lt;/em&gt; - &lt;b&gt;V&lt;/b&gt;绑定以及终端的粘贴功能来支持从外部进行复制和粘贴，而fish可以启用&amp;ldquo;托架粘贴模式&amp;rdquo;。粘贴在单引号内时，粘贴的单引号和反斜杠会自动转义，因此只需在之后将引号关闭即可将结果用作单个标记。</target>
        </trans-unit>
        <trans-unit id="5f7dd81f0f257215aaa86927e90c28289f61b85c" translate="yes" xml:space="preserve">
          <source>Copying a function using &lt;code&gt;-c&lt;/code&gt; copies only the body of the function, and does not attach any event notifications from the original function.</source>
          <target state="translated">使用 &lt;code&gt;-c&lt;/code&gt; 复制功能仅复制该功能的主体，并且不附加原始功能的任何事件通知。</target>
        </trans-unit>
        <trans-unit id="f31494e39f0bc5dcc83282298e8d3d31f1b25880" translate="yes" xml:space="preserve">
          <source>Customizing the name of the history file</source>
          <target state="translated">自定义历史文件的名称</target>
        </trans-unit>
        <trans-unit id="362f967d51916d26cb3fb3386fd62a1f41da8b5f" translate="yes" xml:space="preserve">
          <source>Debugging fish scripts</source>
          <target state="translated">调试鱼的脚本</target>
        </trans-unit>
        <trans-unit id="315274f3206d01a86dd78cefa7038f1b4d10af82" translate="yes" xml:space="preserve">
          <source>Default Shell</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0d9b8d3822abc3f61828cee574cfdd15ad494e6d" translate="yes" xml:space="preserve">
          <source>Define a single option spec for the boolean help flag:</source>
          <target state="translated">为布尔帮助标志定义一个单一的选项规范。</target>
        </trans-unit>
        <trans-unit id="e80de1e5ae488060e2716016f7f8aabdda0492f6" translate="yes" xml:space="preserve">
          <source>Defining aliases</source>
          <target state="translated">定义别名</target>
        </trans-unit>
        <trans-unit id="a248cf76417fc663be9470cb1f177b04a90df2b1" translate="yes" xml:space="preserve">
          <source>Defining an abbreviation with global scope is slightly faster than universal scope (which is the default). But in general you'll only want to use the global scope when defining abbreviations in a startup script like &lt;code&gt;~/.config/fish/config.fish&lt;/code&gt; like this:</source>
          <target state="translated">使用全局范围定义缩写比通用范围（默认设置）快一点。但是通常，您只需要在 &lt;code&gt;~/.config/fish/config.fish&lt;/code&gt; 类的启动脚本中定义缩写时使用全局范围，如下所示：</target>
        </trans-unit>
        <trans-unit id="f6fdbe48dc54dd86f63097a03bd24094dedd713a" translate="yes" xml:space="preserve">
          <source>Delete</source>
          <target state="translated">Delete</target>
        </trans-unit>
        <trans-unit id="55f8ebc805e65b5b71ddafdae390e3be2bcd69af" translate="yes" xml:space="preserve">
          <source>Description</source>
          <target state="translated">Description</target>
        </trans-unit>
        <trans-unit id="59b035367211a9382930b2a4c13637dbc33c4f32" translate="yes" xml:space="preserve">
          <source>Design</source>
          <target state="translated">Design</target>
        </trans-unit>
        <trans-unit id="866bd39fb03e1e2606544d3942b36910500aff65" translate="yes" xml:space="preserve">
          <source>Detect support for italics, dim, reverse and other modes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8d1bc9b98791a1beb71b16bbdb2e8e4cbe2fd1c7" translate="yes" xml:space="preserve">
          <source>Detected errors include:</source>
          <target state="translated">检测到的错误包括:</target>
        </trans-unit>
        <trans-unit id="a6988a4d06cb28f2b88589d324d9330152ae8f40" translate="yes" xml:space="preserve">
          <source>Directories for third-party software vendors to ship their own completions for their software. Fish searches the directories in the &lt;code&gt;XDG_DATA_DIRS&lt;/code&gt; environment variable for a &lt;code&gt;fish/vendor_completions.d&lt;/code&gt; directory; if this variable is not defined, the default is usually to search &lt;code&gt;/usr/share/fish/vendor_completions.d&lt;/code&gt; and &lt;code&gt;/usr/local/share/fish/vendor_completions.d&lt;/code&gt;;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aec9d653d04f24c3ef71638a5da336dde6f29983" translate="yes" xml:space="preserve">
          <source>Directories for third-party software vendors to ship their own configuration snippets for their software. Fish searches the directories in the &lt;code&gt;XDG_DATA_DIRS&lt;/code&gt; environment variable for a &lt;code&gt;fish/vendor_conf.d&lt;/code&gt; directory; if this variable is not defined, the default is usually to search &lt;code&gt;/usr/share/fish/vendor_conf.d&lt;/code&gt; and &lt;code&gt;/usr/local/share/fish/vendor_conf.d&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d75fce19d8009441f1839be94513635b011e4443" translate="yes" xml:space="preserve">
          <source>Directories for third-party software vendors to ship their own functions for their software. Fish searches the directories in the &lt;code&gt;XDG_DATA_DIRS&lt;/code&gt; environment variable for a &lt;code&gt;fish/vendor_functions.d&lt;/code&gt; directory; if this variable is not defined, the default is usually to search &lt;code&gt;/usr/share/fish/vendor_functions.d&lt;/code&gt; and &lt;code&gt;/usr/local/share/fish/vendor_functions.d&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1d9fcf2c0d627af5418ba7f9c21ee7f737ced69d" translate="yes" xml:space="preserve">
          <source>Do not append to universal variables in &lt;a href=&quot;#initialization&quot;&gt;config.fish&lt;/a&gt;, because these variables will then get longer with each new shell instance. Instead, simply set them once at the command line.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dee15571e38bfab40555f11f3b66434d50353195" translate="yes" xml:space="preserve">
          <source>Do not append to universal variables in &lt;a href=&quot;index#initialization&quot;&gt;config.fish&lt;/a&gt;, because these variables will then get longer with each new shell instance. Instead, simply set them once at the command line.</source>
          <target state="translated">不要在&lt;a href=&quot;index#initialization&quot;&gt;config.fish中&lt;/a&gt;追加通用变量，因为对于每个新的shell实例，这些变量将变得更长。相反，只需在命令行将它们设置一次即可。</target>
        </trans-unit>
        <trans-unit id="9e9cf3221a30246219863f1d2366e36cb580debc" translate="yes" xml:space="preserve">
          <source>Documentation</source>
          <target state="translated">Documentation</target>
        </trans-unit>
        <trans-unit id="fa4a7a170f7075560c98a976572cae386b13a240" translate="yes" xml:space="preserve">
          <source>E.g.</source>
          <target state="translated">E.g.</target>
        </trans-unit>
        <trans-unit id="5fe4b6029ee0d921705a5109d21de883623ecfe4" translate="yes" xml:space="preserve">
          <source>Each &lt;code&gt;case&lt;/code&gt; command is given one or more parameters. The first &lt;code&gt;case&lt;/code&gt; command with a parameter that matches the string specified in the switch command will be evaluated. &lt;code&gt;case&lt;/code&gt; parameters may contain wildcards. These need to be escaped or quoted in order to avoid regular wildcard expansion using filenames.</source>
          <target state="translated">每个 &lt;code&gt;case&lt;/code&gt; 命令都有一个或多个参数。参数与switch命令中指定的字符串匹配的第一个 &lt;code&gt;case&lt;/code&gt; 命令将被评估。 &lt;code&gt;case&lt;/code&gt; 参数可能包含通配符。为了避免使用文件名进行常规通配符扩展，需要对它们进行转义或引用。</target>
        </trans-unit>
        <trans-unit id="2376e9b5e9f26d5da46eadee722d0d85257f2173" translate="yes" xml:space="preserve">
          <source>Each OPTION_SPEC can be written in the domain specific language &lt;a href=&quot;#argparse-option-specs&quot;&gt;described below&lt;/a&gt; or created using the companion &lt;a href=&quot;#fish-opt&quot;&gt;&lt;code&gt;fish_opt&lt;/code&gt;&lt;/a&gt; command. All OPTION_SPECs must appear after any argparse flags and before the &lt;code&gt;--&lt;/code&gt; that separates them from the arguments to be parsed.</source>
          <target state="translated">每种OPTION_SPEC都可以使用&lt;a href=&quot;#argparse-option-specs&quot;&gt;下面描述&lt;/a&gt;的领域特定语言编写，也可以使用随附的&lt;a href=&quot;#fish-opt&quot;&gt; &lt;code&gt;fish_opt&lt;/code&gt; &lt;/a&gt;命令创建。所有OPTION_SPECs必须经过任何argparse标志和之前出现 &lt;code&gt;--&lt;/code&gt; 从参数将它们分开来进行解析。</target>
        </trans-unit>
        <trans-unit id="ff6eefef0d522918fc2f6f5c0e0cbad0e9617574" translate="yes" xml:space="preserve">
          <source>Each abbreviation is stored in its own global or universal variable. The name consists of the prefix &lt;code&gt;_fish_abbr_&lt;/code&gt; followed by the WORD after being transformed by &lt;code&gt;string escape style=var&lt;/code&gt;. The WORD cannot contain a space but all other characters are legal.</source>
          <target state="translated">每个缩写都存储在其自己的全局或通用变量中。该名称由前缀 &lt;code&gt;_fish_abbr_&lt;/code&gt; 组成，后跟WORD（由 &lt;code&gt;string escape style=var&lt;/code&gt; 转换后）。 WORD不能包含空格，但所有其他字符都是合法的。</target>
        </trans-unit>
        <trans-unit id="d74989fad97472ddc89cce17da864871ef77470f" translate="yes" xml:space="preserve">
          <source>Each option specification (&lt;code&gt;OPTION_SPEC&lt;/code&gt;) is written in the &lt;a href=&quot;#option-specifications&quot;&gt;domain specific language&lt;/a&gt; described below. All OPTION_SPECs must appear after any argparse flags and before the &lt;code&gt;--&lt;/code&gt; that separates them from the arguments to be parsed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0057637534d28604b43896d07253a1705495ce04" translate="yes" xml:space="preserve">
          <source>Each option specification is a string composed of</source>
          <target state="translated">每个选项规格都是一个由</target>
        </trans-unit>
        <trans-unit id="6f81b2ad5664bf03465a7658ea6e8325e7d4da48" translate="yes" xml:space="preserve">
          <source>Each option that is seen in the ARG list will result in a var name of the form &lt;code&gt;_flag_X&lt;/code&gt;, where &lt;code&gt;X&lt;/code&gt; is the short flag letter and the long flag name. The OPTION_SPEC always requires a short flag even if it can't be used. So there will always be &lt;code&gt;_flag_X&lt;/code&gt; var set using the short flag letter if the corresponding short or long flag is seen. The long flag name var (e.g., &lt;code&gt;_flag_help&lt;/code&gt;) will only be defined, obviously, if the OPTION_SPEC includes a long flag name.</source>
          <target state="translated">在ARG列表中看到的每个选项都将产生 &lt;code&gt;_flag_X&lt;/code&gt; 形式的var名称，其中 &lt;code&gt;X&lt;/code&gt; 是短标志字母和长标志名称。即使不能使用OPTION_SPEC，也总是需要一个短标志。因此，如果看到相应的short或long标志，则总是使用short标志字母设置 &lt;code&gt;_flag_X&lt;/code&gt; var。很明显，如果OPTION_SPEC包含长标志名，则只会定义长标志名var（例如 &lt;code&gt;_flag_help&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="071ccbc08889857d3dcdf38731f768b6399d8db1" translate="yes" xml:space="preserve">
          <source>Edit the file &lt;code&gt;~/.config/fish/config.fish&lt;/code&gt;, creating it if it does not exist (Note the leading period).</source>
          <target state="translated">编辑 &lt;code&gt;~/.config/fish/config.fish&lt;/code&gt; ，如果不存在则创建它（请注意前导期）。</target>
        </trans-unit>
        <trans-unit id="c2f792ffbea95a6ff2321be7a5cc814288648907" translate="yes" xml:space="preserve">
          <source>Emacs mode commands</source>
          <target state="translated">Emacs模式命令</target>
        </trans-unit>
        <trans-unit id="e37e0760e90e51eeb2c376daa6dc4d1540039d7b" translate="yes" xml:space="preserve">
          <source>Enable 24-bit (&quot;true-color&quot;) even if the $TERM entry only reports 256 colors. This includes modern xterm, VTE-based terminals like Gnome Terminal, Konsole and iTerm2.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f2e2f09ac368b8dd74db605df791dbefe19bfe80" translate="yes" xml:space="preserve">
          <source>Enable 256 colors if $TERM contains &quot;xterm&quot;, except for known exceptions (like MacOS 10.6 Terminal.app)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a2bb9d34b8a1a79665858d354585cf147e0dee4e" translate="yes" xml:space="preserve">
          <source>End</source>
          <target state="translated">End</target>
        </trans-unit>
        <trans-unit id="2b9eceb7a86a9f577ef80586c5c1d7fde9ff493d" translate="yes" xml:space="preserve">
          <source>Enter</source>
          <target state="translated">Enter</target>
        </trans-unit>
        <trans-unit id="ec051ec1637eae870268ca59dd86fdb39e8d550c" translate="yes" xml:space="preserve">
          <source>Enter &lt;code&gt;exit&lt;/code&gt; to exit a fish shell:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7c9220e6e7b88faa6f56901c8353dec4b3544958" translate="yes" xml:space="preserve">
          <source>Enter &lt;code&gt;fish&lt;/code&gt; to start a fish shell:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="91cbf01f5e4c3a57e74bdd072bfdd05853b57d91" translate="yes" xml:space="preserve">
          <source>Environment variables such as &lt;code&gt;EDITOR&lt;/code&gt; or &lt;code&gt;TZ&lt;/code&gt; can be set universally using &lt;code&gt;set -Ux&lt;/code&gt;. However, if there is an environment variable already set before fish starts (such as by login scripts or system administrators), it is imported into fish as a global variable. The &lt;a href=&quot;index#variables-scope&quot;&gt;variable scopes&lt;/a&gt; are searched from the &quot;inside out&quot;, which means that local variables are checked first, followed by global variables, and finally universal variables.</source>
          <target state="translated">可以使用 &lt;code&gt;set -Ux&lt;/code&gt; 普遍设置诸如 &lt;code&gt;EDITOR&lt;/code&gt; 或 &lt;code&gt;TZ&lt;/code&gt; 之类的环境变量。但是，如果在fish启动之前已经设置了环境变量（例如，通过登录脚本或系统管理员），则将其作为全局变量导入到fish中。该&lt;a href=&quot;index#variables-scope&quot;&gt;变量的作用域&lt;/a&gt;是从&amp;ldquo;内向外&amp;rdquo;，这意味着局部变量首先检查搜索，其次是全局变量，最后通用变量。</target>
        </trans-unit>
        <trans-unit id="91fe509047635fbdbcb723577a02003cc2cfa678" translate="yes" xml:space="preserve">
          <source>Erase the &lt;code&gt;gco&lt;/code&gt; abbreviation.</source>
          <target state="translated">删除 &lt;code&gt;gco&lt;/code&gt; 的缩写。</target>
        </trans-unit>
        <trans-unit id="b4cfe1f435f06beaae8e7d7c6d43e5dddbe640bb" translate="yes" xml:space="preserve">
          <source>Escape</source>
          <target state="translated">Escape</target>
        </trans-unit>
        <trans-unit id="3e13e2405c74a25265ee4e281ccf78feafc5234d" translate="yes" xml:space="preserve">
          <source>Escape Sequences</source>
          <target state="translated">逃逸序列</target>
        </trans-unit>
        <trans-unit id="99b19a8ca89a3f1d945ac43f31bfc30845d9b033" translate="yes" xml:space="preserve">
          <source>Escaping characters</source>
          <target state="translated">逃逸字符</target>
        </trans-unit>
        <trans-unit id="b5df4081fbed4b9e32929d5db8ab7dee3db26c47" translate="yes" xml:space="preserve">
          <source>Especially powerful is the recursive wildcard ** which searches directories recursively:</source>
          <target state="translated">尤其强大的是递归通配符**,它可以递归搜索目录。</target>
        </trans-unit>
        <trans-unit id="23467b26d86b98db62af718c7193952aae1cc1d7" translate="yes" xml:space="preserve">
          <source>Event blocks should not be confused with code blocks, which are created with &lt;code&gt;begin&lt;/code&gt;, &lt;code&gt;if&lt;/code&gt;, &lt;code&gt;while&lt;/code&gt; or &lt;code&gt;for&lt;/code&gt;</source>
          <target state="translated">事件块不应与由 &lt;code&gt;begin&lt;/code&gt; ， &lt;code&gt;if&lt;/code&gt; ， &lt;code&gt;while&lt;/code&gt; 或 &lt;code&gt;for&lt;/code&gt; 创建的代码块混淆。</target>
        </trans-unit>
        <trans-unit id="1d0a0bc46dabda5a6dbcf0a2f18e3e9acbc27ae7" translate="yes" xml:space="preserve">
          <source>Event handlers</source>
          <target state="translated">事件处理程序</target>
        </trans-unit>
        <trans-unit id="f4b281b637c899622427e67191026015a7018908" translate="yes" xml:space="preserve">
          <source>Every program on your computer can be used as a command in &lt;code&gt;fish&lt;/code&gt;. If the program file is located in one of the directories in the &lt;a href=&quot;#path&quot;&gt;PATH&lt;/a&gt;, you can just use the name of the program to use it. Otherwise the whole filename, including the directory (like &lt;code&gt;/home/me/code/checkers/checkers&lt;/code&gt; or &lt;code&gt;../checkers&lt;/code&gt;) has to be used.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aa9019553b784d6ddae2179d0e63e658c8aaa8e2" translate="yes" xml:space="preserve">
          <source>Every program on your computer can be used as a command in &lt;code&gt;fish&lt;/code&gt;. If the program file is located in one of the directories in the &lt;a href=&quot;#variables-special&quot;&gt;&lt;code&gt;PATH&lt;/code&gt;&lt;/a&gt;, it is sufficient to type the name of the program to use it. Otherwise the whole filename, including the directory (like &lt;code&gt;/home/me/code/checkers/checkers&lt;/code&gt; or &lt;code&gt;../checkers&lt;/code&gt;) has to be used.</source>
          <target state="translated">您计算机上的每个程序都可以用作 &lt;code&gt;fish&lt;/code&gt; 命令。如果程序文件位于&lt;a href=&quot;#variables-special&quot;&gt; &lt;code&gt;PATH&lt;/code&gt; &lt;/a&gt;的目录之一中，则只需键入要使用的程序名即可。否则，必须使用整个文件名，包括目录（例如 &lt;code&gt;/home/me/code/checkers/checkers&lt;/code&gt; 或 &lt;code&gt;../checkers&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="0f01ed56a1e32a05e5ef96e4d779f34784af9a96" translate="yes" xml:space="preserve">
          <source>Example</source>
          <target state="translated">Example</target>
        </trans-unit>
        <trans-unit id="0a06b9ff910c3b825724cca9441830ef76df9a35" translate="yes" xml:space="preserve">
          <source>Example OPTION_SPECs</source>
          <target state="translated">示例 OPTION_SPECs</target>
        </trans-unit>
        <trans-unit id="c63737abd7347a7ae582cb9fbdf37d6c0e5b251e" translate="yes" xml:space="preserve">
          <source>Example:</source>
          <target state="translated">Example:</target>
        </trans-unit>
        <trans-unit id="39080033040f19165a1f736af78b4c8c529fc254" translate="yes" xml:space="preserve">
          <source>Example: &lt;code&gt;echo Hello 2&amp;gt;output.stderr&lt;/code&gt; writes the standard error (file descriptor 2) of the target program to &lt;code&gt;output.stderr&lt;/code&gt;.</source>
          <target state="translated">示例： &lt;code&gt;echo Hello 2&amp;gt;output.stderr&lt;/code&gt; 将目标程序的标准错误（文件描述符2）写入到 &lt;code&gt;output.stderr&lt;/code&gt; 中。</target>
        </trans-unit>
        <trans-unit id="eb01bf04c9a0e8a71c45816513df424f1c7ffedb" translate="yes" xml:space="preserve">
          <source>Examples</source>
          <target state="translated">Examples</target>
        </trans-unit>
        <trans-unit id="fb3447b632f6a431215776dcf254a01001a40c4f" translate="yes" xml:space="preserve">
          <source>Examples:</source>
          <target state="translated">Examples:</target>
        </trans-unit>
        <trans-unit id="c8110d9d9732f81a1889221cf14a72d9940e55f1" translate="yes" xml:space="preserve">
          <source>Examples: The default &lt;code&gt;fish&lt;/code&gt; title is</source>
          <target state="translated">示例：默认 &lt;code&gt;fish&lt;/code&gt; 标题为</target>
        </trans-unit>
        <trans-unit id="c5e62bdf9f1ee420f1e3180e55a6897fe87ce1fa" translate="yes" xml:space="preserve">
          <source>Examples: The default &lt;code&gt;fish&lt;/code&gt; title is:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4bdd412ed55970d8c42f39658c01cd285bb57d07" translate="yes" xml:space="preserve">
          <source>Executing Bash</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6f147bbcdc2ea57f6c81bec669ec536b253dc54b" translate="yes" xml:space="preserve">
          <source>Exit Status</source>
          <target state="translated">退出状态</target>
        </trans-unit>
        <trans-unit id="1065b589e5e0ae74c7584c46d689bcbb003ff11c" translate="yes" xml:space="preserve">
          <source>Exit status: 0 if at least one match was found, or 1 otherwise.</source>
          <target state="translated">退出状态。如果至少找到一个匹配点,则为0,否则为1。</target>
        </trans-unit>
        <trans-unit id="b2909c6aa462276dc2976f4590aa354f4c57270d" translate="yes" xml:space="preserve">
          <source>Exit status: 0 if at least one replacement was performed, or 1 otherwise.</source>
          <target state="translated">退出状态。如果至少进行了一次更换,则为0,否则为1。</target>
        </trans-unit>
        <trans-unit id="f40c28bc81b3ac548eb788aebd329d84f2e392e8" translate="yes" xml:space="preserve">
          <source>Expansions are performed from right to left, nested bracket expansions are performed from the inside and out.</source>
          <target state="translated">从右到左进行扩容,嵌套支架扩容从内到外进行。</target>
        </trans-unit>
        <trans-unit id="7c7f2508b14ff7696fb2b861af3336c89a128135" translate="yes" xml:space="preserve">
          <source>Exporting variables</source>
          <target state="translated">输出变量</target>
        </trans-unit>
        <trans-unit id="0801a7e9fc76ea024d7fa1606839a9a450923131" translate="yes" xml:space="preserve">
          <source>Exports (Shell Variables)</source>
          <target state="translated">出口(壳牌变量)</target>
        </trans-unit>
        <trans-unit id="38a8db4fbe3933a6a062a148af12ac9a1f3f9209" translate="yes" xml:space="preserve">
          <source>Expressions can be grouped using parentheses.</source>
          <target state="translated">可以使用括号将表达式分组。</target>
        </trans-unit>
        <trans-unit id="50167d66b3a9cf84672e9543b5e003cb2f61fc18" translate="yes" xml:space="preserve">
          <source>Expressions can be inverted using the &lt;code&gt;!&lt;/code&gt; operator:</source>
          <target state="translated">可以使用 &lt;code&gt;!&lt;/code&gt; 反转表达式。操作员：</target>
        </trans-unit>
        <trans-unit id="88bfad9cfffeafd299a44d4daf979d57419a2621" translate="yes" xml:space="preserve">
          <source>F1</source>
          <target state="translated">F1</target>
        </trans-unit>
        <trans-unit id="03688ba6aa340b87549088aa5739944cb6b1dc73" translate="yes" xml:space="preserve">
          <source>FAQ</source>
          <target state="translated">FAQ</target>
        </trans-unit>
        <trans-unit id="3c018849599639ed880ecf71dd0372a59354f058" translate="yes" xml:space="preserve">
          <source>Feature flags are how fish stages changes that might break scripts. Breaking changes are introduced as opt-in, in a few releases they become opt-out, and eventually the old behavior is removed.</source>
          <target state="translated">功能标志是鱼如何阶段性地改变可能打破脚本。破坏性的变化是以选择加入的方式引入的,在几个版本中,它们变成了选择退出,最终旧的行为被移除。</target>
        </trans-unit>
        <trans-unit id="91eda957829d54470152a860d403a0c2ec63f6ad" translate="yes" xml:space="preserve">
          <source>Features will only be set on startup, so this variable will only take effect if it is universal or exported.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6f3b1d58c2c3684624549238c3096df48948b49f" translate="yes" xml:space="preserve">
          <source>File names beginning with a dot are not considered when wildcarding unless a dot is specifically given as the first character of the file name.</source>
          <target state="translated">通配时不考虑以点开头的文件名,除非特别给出点作为文件名的第一个字符。</target>
        </trans-unit>
        <trans-unit id="af0ad57826714745555d33e260f6c852d7a62f1f" translate="yes" xml:space="preserve">
          <source>Finally, &lt;code&gt;$fish_prompt_hg_status_order&lt;/code&gt;, which can be used to change the order the status symbols appear in. It defaults to &lt;code&gt;added modified copied deleted untracked unmerged&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3030e8ec7633ec1a524bb246aee7dbda6fb3e4bc" translate="yes" xml:space="preserve">
          <source>Fish</source>
          <target state="translated">Fish</target>
        </trans-unit>
        <trans-unit id="5909556c20378f696dc6b5d2bbc3049c7584a774" translate="yes" xml:space="preserve">
          <source>Fish 1.x and 2.x releases relied on the &lt;code&gt;bc&lt;/code&gt; command for handling &lt;code&gt;math&lt;/code&gt; expressions. Starting with fish 3.0.0 fish uses the tinyexpr library and evaluates the expression without the involvement of any external commands.</source>
          <target state="translated">Fish 1.x和2.x发行版依赖于 &lt;code&gt;bc&lt;/code&gt; 命令来处理 &lt;code&gt;math&lt;/code&gt; 表达式。从fish 3.0.0开始，fish使用tinyexpr库并在不涉及任何外部命令的情况下评估表达式。</target>
        </trans-unit>
        <trans-unit id="d4a3ceecfb0465a0d21d2606941b69ac151cca20" translate="yes" xml:space="preserve">
          <source>Fish &lt;code&gt;ulimit&lt;/code&gt; does not support getting or setting multiple limits in one command, except reporting all values using the -a switch</source>
          <target state="translated">Fish &lt;code&gt;ulimit&lt;/code&gt; 不支持在一个命令中获取或设置多个限制，除非使用-a开关报告所有值</target>
        </trans-unit>
        <trans-unit id="e6c6518383d134aea4779743a6d5eae0eb949f57" translate="yes" xml:space="preserve">
          <source>Fish &lt;code&gt;ulimit&lt;/code&gt; does not support getting or setting multiple limits in one command, except reporting all values using the &lt;code&gt;-a&lt;/code&gt; switch</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e7c76c63bac2f3a3dce3482676369a7bd163b6c4" translate="yes" xml:space="preserve">
          <source>Fish &lt;code&gt;ulimit&lt;/code&gt; does not support the &lt;code&gt;-p&lt;/code&gt; option for getting the pipe size. The bash implementation consists of a compile-time check that empirically guesses this number by writing to a pipe and waiting for SIGPIPE. Fish does not do this because it this method of determining pipe size is unreliable. Depending on bash version, there may also be further additional limits to set in bash that do not exist in fish.</source>
          <target state="translated">Fish &lt;code&gt;ulimit&lt;/code&gt; 不支持 &lt;code&gt;-p&lt;/code&gt; 选项来获取管道大小。bash实现由编译时检查组成，该检查通过写入管道并等待SIGPIPE凭经验猜测此数字。Fish不会这样做，因为它这种确定管道尺寸的方法不可靠。根据bash版本的不同，鱼中不存在的bash中可能还会设置其他限制。</target>
        </trans-unit>
        <trans-unit id="78c7f05d7bd695376d2e5d1faac7303134fd849d" translate="yes" xml:space="preserve">
          <source>Fish &lt;code&gt;ulimit&lt;/code&gt; supports GNU-style long options for all switches</source>
          <target state="translated">Fish &lt;code&gt;ulimit&lt;/code&gt; 支持所有开关的GNU样式长选项</target>
        </trans-unit>
        <trans-unit id="fc7af48505888290815037487d5b7785010a5982" translate="yes" xml:space="preserve">
          <source>Fish also ships a wrapper function around the builtin &lt;code&gt;cd&lt;/code&gt; that understands &lt;code&gt;cd -&lt;/code&gt; as changing to the previous directory. See also &lt;a href=&quot;commands#prevd&quot;&gt;&lt;code&gt;prevd&lt;/code&gt;&lt;/a&gt;. This wrapper function maintains a history of the 25 most recently visited directories in the &lt;code&gt;$dirprev&lt;/code&gt; and &lt;code&gt;$dirnext&lt;/code&gt; global variables. If you make those universal variables your &lt;code&gt;cd&lt;/code&gt; history is shared among all fish instances.</source>
          <target state="translated">Fish还会在了解 &lt;code&gt;cd -&lt;/code&gt; 的内置 &lt;code&gt;cd&lt;/code&gt; 周围提供包装函数，即更改为上一个目录。另请参见&lt;a href=&quot;commands#prevd&quot;&gt; &lt;code&gt;prevd&lt;/code&gt; &lt;/a&gt;。该包装函数保留 &lt;code&gt;$dirprev&lt;/code&gt; 和 &lt;code&gt;$dirnext&lt;/code&gt; 全局变量中最近访问的25个目录的历史记录。如果您使这些通用变量，您的 &lt;code&gt;cd&lt;/code&gt; 历史记录将在所有fish实例之间共享。</target>
        </trans-unit>
        <trans-unit id="12b0ee984ffaac831e52ed6b850d4b525b13beed" translate="yes" xml:space="preserve">
          <source>Fish also ships a wrapper function around the builtin &lt;code&gt;cd&lt;/code&gt; that understands &lt;code&gt;cd -&lt;/code&gt; as changing to the previous directory. See also &lt;a href=&quot;prevd#cmd-prevd&quot;&gt;prevd&lt;/a&gt;. This wrapper function maintains a history of the 25 most recently visited directories in the &lt;code&gt;$dirprev&lt;/code&gt; and &lt;code&gt;$dirnext&lt;/code&gt; global variables. If you make those universal variables your &lt;code&gt;cd&lt;/code&gt; history is shared among all fish instances.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8e7b1872333b58f5f95b5e7bec0c0e9e258507d3" translate="yes" xml:space="preserve">
          <source>Fish automatically searches through any directories in the array variable &lt;code&gt;$fish_function_path&lt;/code&gt;, and any functions defined are automatically loaded when needed. A function definition file must have a filename consisting of the name of the function plus the suffix '&lt;code&gt;.fish&lt;/code&gt;'.</source>
          <target state="translated">Fish会自动搜索数组变量 &lt;code&gt;$fish_function_path&lt;/code&gt; 中的任何目录，并在需要时自动加载定义的任何函数。函数定义文件的文件名必须由函数名称加上后缀&amp;ldquo; &lt;code&gt;.fish&lt;/code&gt; &amp;rdquo;组成。</target>
        </trans-unit>
        <trans-unit id="fea3d198c56b137efabf4e3b3479e7ecb043e65b" translate="yes" xml:space="preserve">
          <source>Fish has a default limit of 10 MiB on the amount of data a command substitution can output. If the limit is exceeded the entire command, not just the substitution, is failed and &lt;code&gt;$status&lt;/code&gt; is set to 122. You can modify the limit by setting the &lt;code&gt;fish_read_limit&lt;/code&gt; variable at any time including in the environment before fish starts running. If you set it to zero then no limit is imposed. This is a safety mechanism to keep the shell from consuming too much memory if a command outputs an unreasonable amount of data. Note that this limit also affects how much data the &lt;code&gt;read&lt;/code&gt; command will process.</source>
          <target state="translated">对于命令替换可以输出的数据量，Fish的默认限制为10 MiB。如果超出限制，则整个命令（不仅是替换命令）失败，并且 &lt;code&gt;$status&lt;/code&gt; 设置为122。您可以通过在任何时间（包括fish开始运行之前的环境中）设置 &lt;code&gt;fish_read_limit&lt;/code&gt; 变量来修改限制。如果将其设置为零，则没有限制。如果命令输出的数据量不合理，这是一种防止外壳程序占用过多内存的安全机制。请注意，此限制还影响 &lt;code&gt;read&lt;/code&gt; 命令将处理的数据量。</target>
        </trans-unit>
        <trans-unit id="54736c0f7b81ae71b6647b4c6a7582c080363c9c" translate="yes" xml:space="preserve">
          <source>Fish has a default limit of 100 MiB on the amount of data a command substitution can output. If the limit is exceeded the entire command, not just the substitution, is failed and &lt;code&gt;$status&lt;/code&gt; is set to 122. You can modify the limit by setting the &lt;code&gt;fish_read_limit&lt;/code&gt; variable at any time including in the environment before fish starts running. If you set it to zero then no limit is imposed. This is a safety mechanism to keep the shell from consuming too much memory if a command outputs an unreasonable amount of data, typically your operating system also has a limit, and it's often much lower. Note that this limit also affects how much data the &lt;code&gt;read&lt;/code&gt; command will process.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7e69e47a187b17aecb51ad4dc34104e0787069fe" translate="yes" xml:space="preserve">
          <source>Fish history recall is very simple yet effective:</source>
          <target state="translated">鱼的历史回顾是非常简单而有效的。</target>
        </trans-unit>
        <trans-unit id="edcb6e0e99c1d29dcec8762593402a5b7fe687c4" translate="yes" xml:space="preserve">
          <source>Fish includes a built in debugging facility. The debugger allows you to stop execution of a script at an arbitrary point. When this happens you are presented with an interactive prompt. At this prompt you can execute any fish command (there are no debug commands as such). For example, you can check or change the value of any variables using &lt;code&gt;printf&lt;/code&gt; and &lt;code&gt;set&lt;/code&gt;. As another example, you can run &lt;code&gt;status print-stack-trace&lt;/code&gt; to see how this breakpoint was reached. To resume normal execution of the script, simply type &lt;code&gt;exit&lt;/code&gt; or [ctrl-D].</source>
          <target state="translated">Fish包括一个内置的调试工具。调试器使您可以在任意点停止执行脚本。发生这种情况时，您会看到一个交互式提示。在此提示符下，您可以执行任何fish命令（没有任何调试命令）。例如，您可以使用 &lt;code&gt;printf&lt;/code&gt; 和 &lt;code&gt;set&lt;/code&gt; 检查或更改任何变量的值。作为另一个示例，您可以运行 &lt;code&gt;status print-stack-trace&lt;/code&gt; 来查看如何达到此断点。要恢复脚本的正常执行，只需键入 &lt;code&gt;exit&lt;/code&gt; 或[ctrl-D]。</target>
        </trans-unit>
        <trans-unit id="c9861432c24cc69aa9bbe8d00780f47c35cceca6" translate="yes" xml:space="preserve">
          <source>Fish is trying to set the titlebar message of your terminal. While screen itself supports this feature, your terminal does not. Unfortunately, when the underlying terminal doesn't support setting the titlebar, screen simply passes through the escape codes and text to the underlying terminal instead of ignoring them. It is impossible to detect and resolve this problem from inside fish since fish has no way of knowing what the underlying terminal type is. For now, the only way to fix this is to unset the titlebar message, as suggested above.</source>
          <target state="translated">Fish正在尝试设置你的终端的标题栏信息。虽然screen本身支持这个功能,但你的终端不支持。不幸的是,当底层终端不支持设置标题栏时,screen只是将转义码和文本传递给底层终端,而不是忽略它们。由于fish无法知道底层终端类型是什么,所以无法从fish内部检测和解决这个问题。目前,解决这个问题的唯一方法就是按照上面的建议,取消设置标题栏信息。</target>
        </trans-unit>
        <trans-unit id="48abc65b03d1fc064fb747f8eca57f5ceb3027c8" translate="yes" xml:space="preserve">
          <source>Fish prides itself on being really nice to use interactively. That's down to a few features we'll explain in the next few sections.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3524f17824fc111784e6c17c1c783f4774ba70aa" translate="yes" xml:space="preserve">
          <source>Fish reserves the &lt;a href=&quot;http://www.unicode.org/faq/private_use.html&quot;&gt;Unicode private-use character range&lt;/a&gt; from U+F600 thru U+F73F for internal use. Any attempt to feed characters in that range to fish will result in them being replaced by the Unicode &quot;replacement character&quot; U+FFFD. This includes both interactive input as well as any file read by fish (but not programs run by fish).</source>
          <target state="translated">Fish保留了从U + F600到U + F73F 的&lt;a href=&quot;http://www.unicode.org/faq/private_use.html&quot;&gt;Unicode专用字符范围&lt;/a&gt;供内部使用。尝试将该范围内的字符喂入fish都将导致它们被Unicode&amp;ldquo;替换字符&amp;rdquo; U + FFFD替换。这包括交互式输入以及鱼读取的任何文件（但不包括鱼运行的程序）。</target>
        </trans-unit>
        <trans-unit id="88f9fa16272ceb2f6496c15e10a64756c22612c9" translate="yes" xml:space="preserve">
          <source>Fish ships with a &lt;code&gt;_validate_int&lt;/code&gt; function that accepts a &lt;code&gt;--min&lt;/code&gt; and &lt;code&gt;--max&lt;/code&gt; flag. Let's say your command accepts a &lt;code&gt;-m&lt;/code&gt; or &lt;code&gt;--max&lt;/code&gt; flag and the minimum allowable value is zero and the maximum is 5. You would define the option like this: &lt;code&gt;m/max=!_validate_int --min 0 --max 5&lt;/code&gt;. The default if you just call &lt;code&gt;_validate_int&lt;/code&gt; without those flags is to simply check that the value is a valid integer with no limits on the min or max value allowed.</source>
          <target state="translated">Fish带有 &lt;code&gt;_validate_int&lt;/code&gt; 函数，该函数接受 &lt;code&gt;--min&lt;/code&gt; 和 &lt;code&gt;--max&lt;/code&gt; 标志。假设您的命令接受 &lt;code&gt;-m&lt;/code&gt; 或 &lt;code&gt;--max&lt;/code&gt; 标志，并且允许的最小值为零，最大值为5。您可以这样定义选项： &lt;code&gt;m/max=!_validate_int --min 0 --max 5&lt;/code&gt; 。如果仅调用不带这些标志的 &lt;code&gt;_validate_int&lt;/code&gt; ，则默认情况是仅检查该值是否为有效整数，且对最小值或最大值没有限制。</target>
        </trans-unit>
        <trans-unit id="da8d10a7f6f5ff6e0088c4b12f7c811ff075340b" translate="yes" xml:space="preserve">
          <source>Fish stores the exit status of the last process in the last job to exit in the &lt;code&gt;status&lt;/code&gt; variable.</source>
          <target state="translated">Fish将最后一个作业的退出状态存储在最后一个作业中，以在 &lt;code&gt;status&lt;/code&gt; 变量中退出。</target>
        </trans-unit>
        <trans-unit id="c7cac64314e5cd1f9679e120b4ee08809136ee30" translate="yes" xml:space="preserve">
          <source>Fish uses a heuristic to decide if a terminal supports the 256-color palette as opposed to the more limited 16 color palette of older terminals. Support can be forced on by setting &lt;code&gt;fish_term256&lt;/code&gt; to &lt;em&gt;1&lt;/em&gt;. If &lt;code&gt;$TERM&lt;/code&gt; contains &quot;256color&quot; (e.g., &lt;em&gt;xterm-256color&lt;/em&gt;), 256-color support is enabled. If &lt;code&gt;$TERM&lt;/code&gt; contains &lt;em&gt;xterm&lt;/em&gt;, 256 color support is enabled (except for MacOS: &lt;code&gt;$TERM_PROGRAM&lt;/code&gt; and &lt;code&gt;$TERM_PROGRAM_VERSION&lt;/code&gt; are used to detect Terminal.app from MacOS 10.6; support is disabled here it because it is known that it reports &lt;code&gt;xterm&lt;/code&gt; and only supports 16 colors.</source>
          <target state="translated">Fish使用启发式方法来确定终端是否支持256色调色板，而不是较有限的旧终端16调色板。可以通过将 &lt;code&gt;fish_term256&lt;/code&gt; 设置为&lt;em&gt;1&lt;/em&gt;来强制支持。如果 &lt;code&gt;$TERM&lt;/code&gt; 包含&amp;ldquo; 256color&amp;rdquo;（例如&lt;em&gt;xterm-256color&lt;/em&gt;），则启用256色支持。如果 &lt;code&gt;$TERM&lt;/code&gt; 包含&lt;em&gt;xterm&lt;/em&gt;，则启用256色支持（MacOS除外： &lt;code&gt;$TERM_PROGRAM&lt;/code&gt; 和 &lt;code&gt;$TERM_PROGRAM_VERSION&lt;/code&gt; 用于检测MacOS 10.6中的Terminal.app；此处禁用了支持，因为它已知报告 &lt;code&gt;xterm&lt;/code&gt; 并且仅支持16种颜色。</target>
        </trans-unit>
        <trans-unit id="c4a7c4e0f6011c5a6723f630fd3d21a3dda63de9" translate="yes" xml:space="preserve">
          <source>Fish uses some heuristics to determine what colors a terminal supports to avoid sending sequences that it won't understand.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4a8a4a4f82444a104a993e27513d536247c816d1" translate="yes" xml:space="preserve">
          <source>Fish versions prior to 3.0 supported the syntax &lt;code&gt;set PATH[1] PATH[4] /bin /sbin&lt;/code&gt;, which worked like &lt;code&gt;set PATH[1 4] /bin /sbin&lt;/code&gt;. This syntax was not widely used, and was ambiguous and inconsistent.</source>
          <target state="translated">3.0之前的Fish版本支持语法 &lt;code&gt;set PATH[1] PATH[4] /bin /sbin&lt;/code&gt; ，其工作方式类似于 &lt;code&gt;set PATH[1 4] /bin /sbin&lt;/code&gt; 。此语法并未得到广泛使用，并且模棱两可且不一致。</target>
        </trans-unit>
        <trans-unit id="0d57bd5497ca26a92593094bf3e21c5097192fa3" translate="yes" xml:space="preserve">
          <source>Fisher</source>
          <target state="translated">Fisher</target>
        </trans-unit>
        <trans-unit id="cc39950b13a6699fa5b10206f558fe0ba567276b" translate="yes" xml:space="preserve">
          <source>Fisherman</source>
          <target state="translated">Fisherman</target>
        </trans-unit>
        <trans-unit id="cde1c030202177b2bb85ac304db8a66513736e41" translate="yes" xml:space="preserve">
          <source>Flag Value Validation</source>
          <target state="translated">标志值验证</target>
        </trans-unit>
        <trans-unit id="536cf03606fa94ae7d859eed9d77e1d3116f6703" translate="yes" xml:space="preserve">
          <source>For a list of all builtins, functions and commands shipped with fish, see the &lt;a href=&quot;#toc-commands&quot;&gt;table of contents&lt;/a&gt;. The documentation is also available by using the &lt;code&gt;--help&lt;/code&gt; switch of the command.</source>
          <target state="translated">有关fish附带的所有内建函数，功能和命令的列表，请参见&lt;a href=&quot;#toc-commands&quot;&gt;目录&lt;/a&gt;。也可以通过使用命令的 &lt;code&gt;--help&lt;/code&gt; 开关来获得该文档。</target>
        </trans-unit>
        <trans-unit id="9a673697effebecadd2ef2ada0c2ba216bf82e8c" translate="yes" xml:space="preserve">
          <source>For a list of all builtins, functions and commands shipped with fish, see the &lt;a href=&quot;https://fishshell.com/docs/3.1/commands.html#commands&quot;&gt;list of commands&lt;/a&gt;. The documentation is also available by using the &lt;code&gt;--help&lt;/code&gt; switch of the command.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9801e7760d7e9e8e7b2ff4da2f4e2bbcb3cd8d9c" translate="yes" xml:space="preserve">
          <source>For a script, written in another language, just replace the interpreter &lt;code&gt;/bin/bash&lt;/code&gt; with the language interpreter of that other language (for example &lt;code&gt;/bin/python&lt;/code&gt; for a &lt;code&gt;python&lt;/code&gt; script)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3e1ee97cd1a141aa861292be516e6d2fafba3b56" translate="yes" xml:space="preserve">
          <source>For an introduction to specifying completions, see &lt;a href=&quot;../index#completion-own&quot;&gt;Writing your own completions&lt;/a&gt; in the fish manual.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aac657fdcd353fd4213af492e11d8fa1236e727e" translate="yes" xml:space="preserve">
          <source>For an introduction to specifying completions, see &lt;a href=&quot;index#completion-own&quot;&gt;Writing your own completions&lt;/a&gt; in the fish manual.</source>
          <target state="translated">有关指定补全的介绍，请参见fish手册中的&lt;a href=&quot;index#completion-own&quot;&gt;编写自己的补&lt;/a&gt;全。</target>
        </trans-unit>
        <trans-unit id="97f70256424cd43141b91b58c2edd81b6e14a061" translate="yes" xml:space="preserve">
          <source>For backwards compatibility each subcommand can also be specified as a long or short option. For example, rather than &lt;code&gt;status is-login&lt;/code&gt; you can type &lt;code&gt;status --is-login&lt;/code&gt;. The flag forms are deprecated and may be removed in a future release (but not before fish 3.0).</source>
          <target state="translated">为了向后兼容，每个子命令也可以指定为long或short选项。例如，您可以输入 &lt;code&gt;status --is-login&lt;/code&gt; 而不是 &lt;code&gt;status is-login&lt;/code&gt; -login。不推荐使用该标志形式，并且可以在以后的版本中将其删除（但在fish 3.0之前不能删除）。</target>
        </trans-unit>
        <trans-unit id="71cbfbc301ab062537c3b9d9149d9aa54102b0b9" translate="yes" xml:space="preserve">
          <source>For basic compatibility with POSIX &lt;code&gt;command&lt;/code&gt;, the &lt;code&gt;-v&lt;/code&gt; flag is recognized as an alias for &lt;code&gt;-s&lt;/code&gt;.</source>
          <target state="translated">为了与POSIX &lt;code&gt;command&lt;/code&gt; 基本兼容，将 &lt;code&gt;-v&lt;/code&gt; 标志识别为 &lt;code&gt;-s&lt;/code&gt; 的别名。</target>
        </trans-unit>
        <trans-unit id="b73ea6d75946436551604661ce1b9a165a45dd07" translate="yes" xml:space="preserve">
          <source>For checking timing after a command has completed, check &lt;a href=&quot;../index#variables-special&quot;&gt;$CMD_DURATION&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e40b055eb7098645342eba3f6a6c092eb71628f1" translate="yes" xml:space="preserve">
          <source>For compatibility with other shells and external commands, $PATH is a &lt;a href=&quot;index#variables-path&quot;&gt;path variable&lt;/a&gt;, and so will be joined with colons (not spaces) when you quote it:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fa3cc4b28c62019a96ce74d02cd7c54d07452b42" translate="yes" xml:space="preserve">
          <source>For even more complex conditions, use &lt;code&gt;begin&lt;/code&gt; and &lt;code&gt;end&lt;/code&gt; to group parts of them.</source>
          <target state="translated">对于更复杂的条件，请使用&amp;ldquo; &lt;code&gt;begin&lt;/code&gt; 和&amp;ldquo; &lt;code&gt;end&lt;/code&gt; 将部分内容分组。</target>
        </trans-unit>
        <trans-unit id="2ffbc75d40d5f17483c5a32a91dae37e401b6f2b" translate="yes" xml:space="preserve">
          <source>For example &lt;code&gt;_flag_h&lt;/code&gt; and &lt;code&gt;_flag_help&lt;/code&gt; if &lt;code&gt;-h&lt;/code&gt; or &lt;code&gt;--help&lt;/code&gt; is seen. The var will be set with local scope (i.e., as if the script had done &lt;code&gt;set -l _flag_X&lt;/code&gt;). If the flag is a boolean (that is, does not have an associated value) the values are the short and long flags seen. If the option is not a boolean flag the values will be zero or more values corresponding to the values collected when the ARG list is processed. If the flag was not seen the flag var will not be set.</source>
          <target state="translated">例如，如果看到 &lt;code&gt;-h&lt;/code&gt; 或 &lt;code&gt;--help&lt;/code&gt; ,则表示 &lt;code&gt;_flag_h&lt;/code&gt; 和 &lt;code&gt;_flag_help&lt;/code&gt; 。将使用本地范围设置var（即，就像脚本已完成 &lt;code&gt;set -l _flag_X&lt;/code&gt; ）。如果该标志是布尔值（即没有关联的值），则这些值是可见的长和短标志。如果该选项不是布尔标志，则该值将是零个或多个值，与在处理ARG列表时收集的值相对应。如果未看到该标志，将不会设置标志var。</target>
        </trans-unit>
        <trans-unit id="88a5cf27ff84d1f00030e64d1e499179b84cb53e" translate="yes" xml:space="preserve">
          <source>For example &lt;code&gt;_flag_h&lt;/code&gt; and &lt;code&gt;_flag_help&lt;/code&gt; if &lt;code&gt;-h&lt;/code&gt; or &lt;code&gt;--help&lt;/code&gt; is seen. The var will be set with local scope (i.e., as if the script had done &lt;code&gt;set -l _flag_X&lt;/code&gt;). If the flag is a boolean (that is, it just is passed or not, it doesn't have a value) the values are the short and long flags seen. If the option is not a boolean the values will be zero or more values corresponding to the values collected when the ARG list is processed. If the flag was not seen the flag var will not be set.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="160d44921b4e5cc1e46472871323748ab262c51c" translate="yes" xml:space="preserve">
          <source>For example, a frequently-run command like &lt;code&gt;git checkout&lt;/code&gt; can be abbreviated to &lt;code&gt;gco&lt;/code&gt;. After entering &lt;code&gt;gco&lt;/code&gt; and pressing</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="38df69a183da9016b2103a1c9a7def1959322bfa" translate="yes" xml:space="preserve">
          <source>For example, a frequently-run command like &lt;code&gt;git checkout&lt;/code&gt; can be abbreviated to &lt;code&gt;gco&lt;/code&gt;. After entering &lt;code&gt;gco&lt;/code&gt; and pressing &lt;b&gt;Space&lt;/b&gt; or &lt;b&gt;Enter&lt;/b&gt;, the full text &lt;code&gt;git checkout&lt;/code&gt; will appear in the command line.</source>
          <target state="translated">例如，可以将诸如 &lt;code&gt;git checkout&lt;/code&gt; 之类的经常运行的命令缩写为 &lt;code&gt;gco&lt;/code&gt; 。输入 &lt;code&gt;gco&lt;/code&gt; 并按&lt;b&gt;Space&lt;/b&gt;或&lt;b&gt;Enter后&lt;/b&gt;，全文 &lt;code&gt;git checkout&lt;/code&gt; 将出现在命令行中。</target>
        </trans-unit>
        <trans-unit id="4f10862d2cb42eba3132cb49d2ba2a80e3864525" translate="yes" xml:space="preserve">
          <source>For example, if you wanted to have a function &lt;code&gt;ll&lt;/code&gt;, you would add a text file &lt;code&gt;ll.fish&lt;/code&gt; to &lt;code&gt;~/.config/fish/functions&lt;/code&gt;:</source>
          <target state="translated">例如，如果要使用 &lt;code&gt;ll&lt;/code&gt; 函数，则可以将文本文件 &lt;code&gt;ll.fish&lt;/code&gt; 添加到 &lt;code&gt;~/.config/fish/functions&lt;/code&gt; ：</target>
        </trans-unit>
        <trans-unit id="631584c9382e007cb93a95331a33fec25ea95d0e" translate="yes" xml:space="preserve">
          <source>For example, the following is a function definition that calls the command &lt;code&gt;ls&lt;/code&gt; with the argument '&lt;code&gt;-l&lt;/code&gt;' to print a detailed listing of the contents of the current directory:</source>
          <target state="translated">例如，以下是一个函数定义，该函数调用带有参数 &lt;code&gt;-l&lt;/code&gt; 的命令 &lt;code&gt;ls&lt;/code&gt; 来打印当前目录内容的详细列表：</target>
        </trans-unit>
        <trans-unit id="059c3e8cce263b2945a18ac90b2637e10a8026b1" translate="yes" xml:space="preserve">
          <source>For example:</source>
          <target state="translated">例如:</target>
        </trans-unit>
        <trans-unit id="9b35e52823563d2df240637c363f5b52ee523904" translate="yes" xml:space="preserve">
          <source>For examples of how to write your own complex completions, study the completions in &lt;code&gt;/usr/share/fish/completions&lt;/code&gt;. (The exact path depends on your chosen installation prefix and may be slightly different)</source>
          <target state="translated">有关如何编写自己的复杂补全的示例，请在 &lt;code&gt;/usr/share/fish/completions&lt;/code&gt; 中研究补全。（确切的路径取决于您选择的安装前缀，并且可能会略有不同）</target>
        </trans-unit>
        <trans-unit id="29752c666ae89d90fd5950e78bb8db877998c7de" translate="yes" xml:space="preserve">
          <source>For for detailed instructions see &lt;a href=&quot;tutorial#switching-to-fish&quot;&gt;Switching to fish&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bbba6181daff6006d824b40726c5e1dc21c20696" translate="yes" xml:space="preserve">
          <source>For loops can be used to iterate over a list. For example, a list of files:</source>
          <target state="translated">For循环可以用来对一个列表进行迭代。例如,一个文件的列表。</target>
        </trans-unit>
        <trans-unit id="fb55b2efd75666ff0e0f22ca6189e759ca99212d" translate="yes" xml:space="preserve">
          <source>For more details, see &lt;a href=&quot;../index#debugging&quot;&gt;Debugging fish scripts&lt;/a&gt; in the &lt;code&gt;fish&lt;/code&gt; manual.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0d3b4b55cdd235f8a297cfd58fd2b4aaeb478949" translate="yes" xml:space="preserve">
          <source>For more details, see &lt;a href=&quot;index#debugging&quot;&gt;Debugging fish scripts&lt;/a&gt; in the &lt;code&gt;fish&lt;/code&gt; manual.</source>
          <target state="translated">有关更多详细信息，请参见 &lt;code&gt;fish&lt;/code&gt; 手册中的&lt;a href=&quot;index#debugging&quot;&gt;调试fish脚本&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="20842f282aec1c4b50e206a47ffcf066ea5ca7ed" translate="yes" xml:space="preserve">
          <source>For more information on how to define new event handlers, see the documentation for the &lt;a href=&quot;cmds/function#cmd-function&quot;&gt;function&lt;/a&gt; command.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2fc141152e052520326e534bbd191caeb550504d" translate="yes" xml:space="preserve">
          <source>For more information on how to define new event handlers, see the documentation for the &lt;a href=&quot;commands#function&quot;&gt;function&lt;/a&gt; command.</source>
          <target state="translated">有关如何定义新事件处理程序的更多信息，请参见&lt;a href=&quot;commands#function&quot;&gt;function&lt;/a&gt;命令的文档。</target>
        </trans-unit>
        <trans-unit id="6895247d91fcffa104e9a4003d47294a8b67a455" translate="yes" xml:space="preserve">
          <source>For more information, read the documentation for the block constructs, such as &lt;code&gt;if&lt;/code&gt;, &lt;code&gt;for&lt;/code&gt; and &lt;code&gt;while&lt;/code&gt;.</source>
          <target state="translated">有关更多信息，请阅读有关块结构的文档，例如 &lt;code&gt;if&lt;/code&gt; ， &lt;code&gt;for&lt;/code&gt; 和 &lt;code&gt;while&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="964a42e4fd350b97fcf46d3e0c75ca51851aa82c" translate="yes" xml:space="preserve">
          <source>For more information, see the documentation for each of the functions above.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b8d92b5c7148803c36e855152c078c15224a9486" translate="yes" xml:space="preserve">
          <source>For numbers, &lt;code&gt;.&lt;/code&gt; is always the radix character regardless of locale - &lt;code&gt;2.5&lt;/code&gt;, not &lt;code&gt;2,5&lt;/code&gt;. Scientific notation (&lt;code&gt;10e5&lt;/code&gt;) is also available.</source>
          <target state="translated">对于数字， &lt;code&gt;.&lt;/code&gt; 始终是基数字符，而与区域设置无关 &lt;code&gt;2.5&lt;/code&gt; ，而不是 &lt;code&gt;2,5&lt;/code&gt; 。科学符号（ &lt;code&gt;10e5&lt;/code&gt; ）也可用。</target>
        </trans-unit>
        <trans-unit id="8e25112d09d08d00c25b607d90cd81a9a425781e" translate="yes" xml:space="preserve">
          <source>For uninstalling fish: see &lt;a href=&quot;faq#faq-uninstalling&quot;&gt;FAQ: Uninstalling fish&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d790b402d79ac1a723c790313bcd679999474630" translate="yes" xml:space="preserve">
          <source>Frequently Asked Questions</source>
          <target state="translated">常问问题</target>
        </trans-unit>
        <trans-unit id="af90cef80988974dd76636b3adb5f472768f785d" translate="yes" xml:space="preserve">
          <source>Frequently asked questions</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="817a23516d79c9310b8cbcd3fbb553ae7f962425" translate="yes" xml:space="preserve">
          <source>From an interactive shell, the commands below exit with a return value of zero:</source>
          <target state="translated">在交互式shell中,以下命令退出时的返回值为0。</target>
        </trans-unit>
        <trans-unit id="68add3d9773584e2619f672ebe5f9d4745e5e9ea" translate="yes" xml:space="preserve">
          <source>From now on, we'll pretend your prompt is just a '&lt;code&gt;&amp;gt;&lt;/code&gt;' to save space.</source>
          <target state="translated">从现在开始，我们假装您的提示只是一个' &lt;code&gt;&amp;gt;&lt;/code&gt; '，以节省空间。</target>
        </trans-unit>
        <trans-unit id="2b961dea1dc0c60ddf9a2c8e9d090f6f7d082483" translate="yes" xml:space="preserve">
          <source>Functions</source>
          <target state="translated">Functions</target>
        </trans-unit>
        <trans-unit id="daf9c1f469f134e463969d3e8181e558bbde191a" translate="yes" xml:space="preserve">
          <source>Functions are programs written in the fish syntax. They group together one or more commands and their arguments using a single name. It can also be used to start a specific command with additional arguments.</source>
          <target state="translated">函数是用fish语法编写的程序。它们用一个名称将一个或多个命令及其参数组合在一起。它也可以用来启动一个带有附加参数的特定命令。</target>
        </trans-unit>
        <trans-unit id="89f90915711f79d63d40ae94fbe45e944677e599" translate="yes" xml:space="preserve">
          <source>Functions beginning with the string &lt;code&gt;__fish_print_&lt;/code&gt; print a newline separated list of strings. For example, &lt;code&gt;__fish_print_filesystems&lt;/code&gt; prints a list of all known file systems. Functions beginning with &lt;code&gt;__fish_complete_&lt;/code&gt; print out a newline separated list of completions with descriptions. The description is separated from the completion by a tab character.</source>
          <target state="translated">以字符串 &lt;code&gt;__fish_print_&lt;/code&gt; 开头的函数将打印以换行符分隔的字符串列表。例如， &lt;code&gt;__fish_print_filesystems&lt;/code&gt; 打印所有已知文件系统的列表。以 &lt;code&gt;__fish_complete_&lt;/code&gt; 开头的函数会打印出以换行符分隔的带有说明的补全列表。描述与结束符之间用制表符分隔。</target>
        </trans-unit>
        <trans-unit id="db0f72339f2340e5e8b351628b140fc4b4a5095c" translate="yes" xml:space="preserve">
          <source>Functions can be defined on the commandline or in a configuration file, but they can also be automatically loaded. This has some advantages:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bfd6b853607d78b9cac90686ca5ac5f2f2bd0492" translate="yes" xml:space="preserve">
          <source>Functions can be defined on the commandline or in a configuration file, but they can also be automatically loaded. This method of defining functions has several advantages. An autoloaded function becomes available automatically to all running shells. If the function definition is changed, all running shells will automatically reload the altered version. Startup time and memory usage is improved, etc.</source>
          <target state="translated">函数可以在命令行或配置文件中定义,但也可以自动加载。这种定义函数的方法有几个优点。自动加载的函数会自动对所有正在运行的shell可用。如果函数定义被改变,所有运行中的shell将自动重新加载改变后的版本。改善了启动时间和内存使用情况等。</target>
        </trans-unit>
        <trans-unit id="45aaac446e8af8ab443ebb79de1921177d9fc9c4" translate="yes" xml:space="preserve">
          <source>Fundle</source>
          <target state="translated">Fundle</target>
        </trans-unit>
        <trans-unit id="1dbc937890de836b0044393faedad472b64f7496" translate="yes" xml:space="preserve">
          <source>Further help and development</source>
          <target state="translated">进一步的帮助和发展</target>
        </trans-unit>
        <trans-unit id="bcbbc69b089ac1c6106198168f95bbc56b4fa684" translate="yes" xml:space="preserve">
          <source>Future feature flags</source>
          <target state="translated">未来特征标志</target>
        </trans-unit>
        <trans-unit id="3dc04827b1d89f032f341434dadfd4fcc6c503c2" translate="yes" xml:space="preserve">
          <source>GNU style long options, like '&lt;code&gt;--colors&lt;/code&gt;'. GNU style long options can be more than one character long, are preceded by two hyphens, and may not be grouped together. Option arguments may be specified in the following parameter ('&lt;code&gt;--quoting-style shell&lt;/code&gt;') or by appending the option with a '&lt;code&gt;=&lt;/code&gt;' and the value ('&lt;code&gt;--quoting-style=shell&lt;/code&gt;'). GNU style long options may be abbreviated so long as the abbreviation is unique ('&lt;code&gt;--h&lt;/code&gt;') is equivalent to '&lt;code&gt;--help&lt;/code&gt;' if help is the only long option beginning with an 'h').</source>
          <target state="translated">GNU样式的长选项，例如' &lt;code&gt;--colors&lt;/code&gt; '。GNU样式的long选项可以超过一个字符长，并且以两个连字符开头，并且不能组合在一起。选项参数可以在以下参数（' &lt;code&gt;--quoting-style shell&lt;/code&gt; '）中指定，也可以通过在选项后附加' &lt;code&gt;=&lt;/code&gt; '和值（' &lt;code&gt;--quoting-style=shell&lt;/code&gt; '）来指定。只要缩写是唯一的，就可以缩写GNU风格的long选项（如果help是唯一以'h'开头的长选项，则缩写是唯一的（ &lt;code&gt;--h&lt;/code&gt; ）等效于 &lt;code&gt;--help&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="d19c496fc9fc5f17e29b156659c99fdebbdf355e" translate="yes" xml:space="preserve">
          <source>Get the length of a list with &lt;code&gt;count&lt;/code&gt;:</source>
          <target state="translated">获取带有 &lt;code&gt;count&lt;/code&gt; 的列表的长度：</target>
        </trans-unit>
        <trans-unit id="9a0f73ca6aa746ede1e77153dd3bf5bb16e841ab" translate="yes" xml:space="preserve">
          <source>Getting Help</source>
          <target state="translated">获得帮助</target>
        </trans-unit>
        <trans-unit id="76e7a3a3f9c225fe820ba7e9cff10ea2a73b79a1" translate="yes" xml:space="preserve">
          <source>Getting started</source>
          <target state="translated">开始</target>
        </trans-unit>
        <trans-unit id="8eaa4a571cfa23b1046936adad07606e523f576d" translate="yes" xml:space="preserve">
          <source>Global variables are accessible to functions whether they are exported or not.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="14e54a9b9a49fb183045e69571e35c245eada9b8" translate="yes" xml:space="preserve">
          <source>Global variables are specific to the current fish session, but are not associated with any specific block scope, and will never be erased unless the user explicitly requests it using &lt;code&gt;set -e&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="097b5d5320d0735796306d389e915b1392ea4a90" translate="yes" xml:space="preserve">
          <source>Groups:</source>
          <target state="translated">Groups:</target>
        </trans-unit>
        <trans-unit id="c47ae15370cfe1ed2781eedc1dc2547d12d9e972" translate="yes" xml:space="preserve">
          <source>Help</source>
          <target state="translated">Help</target>
        </trans-unit>
        <trans-unit id="0053f4880938c6ad45d9f6ae784ae7aa588de2e2" translate="yes" xml:space="preserve">
          <source>Help on a specific builtin can also be obtained with the &lt;code&gt;-h&lt;/code&gt; parameter. For instance, to obtain help on the &lt;code&gt;fg&lt;/code&gt; builtin, either type &lt;code&gt;fg -h&lt;/code&gt; or &lt;code&gt;help fg&lt;/code&gt;.</source>
          <target state="translated">也可以使用 &lt;code&gt;-h&lt;/code&gt; 参数获得有关特定内置命令的帮助。例如，为了获得帮助 &lt;code&gt;fg&lt;/code&gt; 内置，或者键入 &lt;code&gt;fg -h&lt;/code&gt; 或 &lt;code&gt;help fg&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="4f5d69f1e4fa9190f3df409c8af9094f4963c8a1" translate="yes" xml:space="preserve">
          <source>Here is a list of some useful commands:</source>
          <target state="translated">下面是一些有用的命令列表。</target>
        </trans-unit>
        <trans-unit id="59a0fbf9a4b62e6e15f7e7d04099ec292404a8c3" translate="yes" xml:space="preserve">
          <source>Here, &lt;code&gt;make&lt;/code&gt; is only executed if &lt;code&gt;./configure&lt;/code&gt; succeeds (returns 0), and &lt;code&gt;sudo make install&lt;/code&gt; is only executed if both &lt;code&gt;./configure&lt;/code&gt; and &lt;code&gt;make&lt;/code&gt; succeed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7a509c793438fa230f1278ed402f9c7e9018572d" translate="yes" xml:space="preserve">
          <source>History searches can be aborted by pressing the escape key.</source>
          <target state="translated">按回车键可以中止历史搜索。</target>
        </trans-unit>
        <trans-unit id="67bc332b46b3f3dc1b8024a5e5cfdee70680168b" translate="yes" xml:space="preserve">
          <source>Hit tab again to cycle through the possibilities.</source>
          <target state="translated">再次点击标签,循环浏览各种可能性。</target>
        </trans-unit>
        <trans-unit id="8562520c74923aa47973021bf5a615a9d18fdbc2" translate="yes" xml:space="preserve">
          <source>Holding alt and something else also typically sends escape, for example holding alt+a will send an escape character and then an &quot;a&quot;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="70f8bb9a8a5393ef080507a89e4b98d139000d65" translate="yes" xml:space="preserve">
          <source>Home</source>
          <target state="translated">Home</target>
        </trans-unit>
        <trans-unit id="0fb159db1e28fce0aea599e71e51612c11b25f22" translate="yes" xml:space="preserve">
          <source>Home directory expansion</source>
          <target state="translated">首页目录扩展</target>
        </trans-unit>
        <trans-unit id="c5e4aaa97cc3ad7f579464354a2507b9c63dac85" translate="yes" xml:space="preserve">
          <source>How can I use &lt;code&gt;-&lt;/code&gt; as a shortcut for &lt;code&gt;cd -&lt;/code&gt;?</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d5208f2bd161f7ef9e4786ba2058053cc8cefa22" translate="yes" xml:space="preserve">
          <source>How can I use `-` as a shortcut for `cd -`?</source>
          <target state="translated">如何使用`-`作为`cd -`的快捷方式?</target>
        </trans-unit>
        <trans-unit id="ba1155cc4fa464e6593f08ba2b8723aab74c8f1c" translate="yes" xml:space="preserve">
          <source>How do I change the greeting message?</source>
          <target state="translated">如何更改问候语?</target>
        </trans-unit>
        <trans-unit id="54e6d1ecb8003f23585cb7559d5800b568cc815b" translate="yes" xml:space="preserve">
          <source>How do I check whether a variable is defined?</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c4d87fc5a8041267fdcd98e9deafc888b91c5523" translate="yes" xml:space="preserve">
          <source>How do I check whether a variable is not empty?</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="13c4a91c9a86c9c981e277c7f5e4a2ed6189509e" translate="yes" xml:space="preserve">
          <source>How do I customize my syntax highlighting colors?</source>
          <target state="translated">如何自定义语法高亮颜色?</target>
        </trans-unit>
        <trans-unit id="a694102af5424918d28a1f9662a1aa3950673c08" translate="yes" xml:space="preserve">
          <source>How do I get the exit status of a command?</source>
          <target state="translated">如何获取命令的退出状态?</target>
        </trans-unit>
        <trans-unit id="0e58d9d321d50cf0c49be8ad0ed48955a88a6bce" translate="yes" xml:space="preserve">
          <source>How do I make fish my default shell?</source>
          <target state="translated">如何让鱼儿成为我的默认外壳?</target>
        </trans-unit>
        <trans-unit id="402503e9f12a7c687d2a8e25d61d5d4c873e5c42" translate="yes" xml:space="preserve">
          <source>How do I run a command every login? What's fish's equivalent to .bashrc or .profile?</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bc538e8432ebecf3f9f7a45d7ccb524d4da71c7d" translate="yes" xml:space="preserve">
          <source>How do I run a command every login? What's fish's equivalent to .bashrc?</source>
          <target state="translated">如何在每次登录时运行命令?fish相当于.bashrc是什么?</target>
        </trans-unit>
        <trans-unit id="9d52246c1acb2dd2ad95298d27dac048384b6b2b" translate="yes" xml:space="preserve">
          <source>How do I run a command from history?</source>
          <target state="translated">如何从历史记录中运行命令?</target>
        </trans-unit>
        <trans-unit id="7c2282706e5d5da05460852fe614e0ea089754e8" translate="yes" xml:space="preserve">
          <source>How do I run a subcommand? The backtick doesn't work!</source>
          <target state="translated">如何运行子命令?反键不能用!</target>
        </trans-unit>
        <trans-unit id="240782fc9c5f0b5d6c4cc74b05803ec8fdfa4ffc" translate="yes" xml:space="preserve">
          <source>How do I set an environment variable for just one command?</source>
          <target state="translated">如何只为一个命令设置环境变量?</target>
        </trans-unit>
        <trans-unit id="cf01f8cfda8ac7fdc0ad1cfce27146791559db05" translate="yes" xml:space="preserve">
          <source>How do I set my prompt?</source>
          <target state="translated">如何设置我的提示?</target>
        </trans-unit>
        <trans-unit id="a7f2b2fb54e2d471e8f341688e112fc1e1ce9d80" translate="yes" xml:space="preserve">
          <source>How do I set or clear an environment variable?</source>
          <target state="translated">如何设置或清除环境变量?</target>
        </trans-unit>
        <trans-unit id="1bbce1c02cef5225c09fe183c39555282f316dab" translate="yes" xml:space="preserve">
          <source>How do I update man page completions?</source>
          <target state="translated">如何更新man page完成度?</target>
        </trans-unit>
        <trans-unit id="8755f1ac4179b2490bfd8d3384a3c541bc0e9557" translate="yes" xml:space="preserve">
          <source>However sometimes, especially with &lt;code&gt;pkg-config&lt;/code&gt; and related tools, splitting on spaces is needed.</source>
          <target state="translated">但是有时，尤其是使用 &lt;code&gt;pkg-config&lt;/code&gt; 和相关工具时，需要在空间上拆分。</target>
        </trans-unit>
        <trans-unit id="54bce717b6b4bc0facb17b1202d46c84a308e996" translate="yes" xml:space="preserve">
          <source>However using variables as indices for command substitution is currently not supported, so</source>
          <target state="translated">但是目前不支持使用变量作为指令替换的索引,所以</target>
        </trans-unit>
        <trans-unit id="9c47b741a075c31ca3e2cd472a89d590bf7358b1" translate="yes" xml:space="preserve">
          <source>However using variables as indices for command substitution is currently not supported, so:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3ece1cae89b5ddaf2b419721f67d267e2d87fe0b" translate="yes" xml:space="preserve">
          <source>However, it is more common and efficient to use autoloading functions and universal variables.</source>
          <target state="translated">然而,使用自动加载函数和通用变量更为常见和有效。</target>
        </trans-unit>
        <trans-unit id="332860b83cabf222387565b3cbb3a4ca2b6a60c7" translate="yes" xml:space="preserve">
          <source>I accidentally entered a directory path and fish changed directory. What happened?</source>
          <target state="translated">我不小心输入了一个目录路径,鱼儿换了目录。到底发生了什么?</target>
        </trans-unit>
        <trans-unit id="077b540fd621e89ad74c3aa41ae8c6bb0c4148b1" translate="yes" xml:space="preserve">
          <source>I'm seeing weird output before each prompt when using screen. What's wrong?</source>
          <target state="translated">在使用屏幕时,我看到每个提示前都有奇怪的输出。有什么问题吗?</target>
        </trans-unit>
        <trans-unit id="7884771064847db56c0b28c42a19e5f67be016fb" translate="yes" xml:space="preserve">
          <source>If $animals is a list of animals, the following will test if it contains a cat:</source>
          <target state="translated">如果$animals是一个动物列表,下面将测试它是否包含一只猫。</target>
        </trans-unit>
        <trans-unit id="6288311089317cecbe49c2b077270e72c24f0c74" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;$animal&lt;/code&gt; was set to &quot;banana&quot;, it would print &quot;I have no idea what a banana is&quot;.</source>
          <target state="translated">如果将 &lt;code&gt;$animal&lt;/code&gt; 设置为&amp;ldquo; banana&amp;rdquo;，它将显示&amp;ldquo;我不知道香蕉是什么&amp;rdquo;。</target>
        </trans-unit>
        <trans-unit id="6529dd48f4bbe7af35d8ee17e053a860dce8bc42" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;$argv&lt;/code&gt; is empty then there is nothing to parse and &lt;code&gt;argparse&lt;/code&gt; returns zero to indicate success. If &lt;code&gt;$argv&lt;/code&gt; is not empty then it is checked for flags &lt;code&gt;-h&lt;/code&gt;, &lt;code&gt;--help&lt;/code&gt;, &lt;code&gt;-n&lt;/code&gt; and &lt;code&gt;--name&lt;/code&gt;. If they are found they are removed from the arguments and local variables (more on this &lt;a href=&quot;argparse-local-variables&quot;&gt;below&lt;/a&gt;) are set so the script can determine which options were seen. Assuming &lt;code&gt;$argv&lt;/code&gt; doesn't have any errors, such as a missing mandatory value for an option, then &lt;code&gt;argparse&lt;/code&gt; exits with status zero. Otherwise it writes appropriate error messages to stderr and exits with a status of one.</source>
          <target state="translated">如果 &lt;code&gt;$argv&lt;/code&gt; 为空，则没有要解析的内容，并且 &lt;code&gt;argparse&lt;/code&gt; 返回零以指示成功。如果 &lt;code&gt;$argv&lt;/code&gt; 不为空，则检查标志 &lt;code&gt;-h&lt;/code&gt; ，-- &lt;code&gt;--help&lt;/code&gt; ， &lt;code&gt;-n&lt;/code&gt; 和 &lt;code&gt;--name&lt;/code&gt; 。如果找到它们，则将它们从参数中删除，并设置局部变量（有关此内容，请参见&lt;a href=&quot;argparse-local-variables&quot;&gt;下文&lt;/a&gt;），以便脚本可以确定看到了哪些选项。假设 &lt;code&gt;$argv&lt;/code&gt; 没有任何错误，例如缺少某个选项的必需值，则 &lt;code&gt;argparse&lt;/code&gt; 退出时状态为零。否则，它将适当的错误消息写入stderr并以状态1退出。</target>
        </trans-unit>
        <trans-unit id="c0fbfd35fc6ed08657df1862ed0095c68b3987ae" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;$argv&lt;/code&gt; is empty then there is nothing to parse and &lt;code&gt;argparse&lt;/code&gt; returns zero to indicate success. If &lt;code&gt;$argv&lt;/code&gt; is not empty then it is checked for flags &lt;code&gt;-h&lt;/code&gt;, &lt;code&gt;--help&lt;/code&gt;, &lt;code&gt;-n&lt;/code&gt; and &lt;code&gt;--name&lt;/code&gt;. If they are found they are removed from the arguments and local variables are set so the script can determine which options were seen. Assuming &lt;code&gt;$argv&lt;/code&gt; doesn't have any errors, such as a missing mandatory value for an option, then &lt;code&gt;argparse&lt;/code&gt; exits with status zero. Otherwise it writes appropriate error messages to stderr and exits with a status of one.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="18c0231ee0546ad7aeb3f50a1a68cbc1c85d1797" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;--index&lt;/code&gt; or &lt;code&gt;-n&lt;/code&gt; is given, each match is reported as a 1-based start position and a length. By default, PATTERN is interpreted as a glob pattern matched against each entire STRING argument. A glob pattern is only considered a valid match if it matches the entire STRING.</source>
          <target state="translated">如果 &lt;code&gt;--index&lt;/code&gt; 或 &lt;code&gt;-n&lt;/code&gt; ，则将每个匹配项报告为从1开始的起始位置和长度。默认情况下，PATTERN被解释为与每个完整的STRING参数匹配的全局模式。球形模式只有与整个STRING匹配时才被视为有效匹配。</target>
        </trans-unit>
        <trans-unit id="dbf8f89e324b9e1f656b472c919d4c7a437efce4" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;--invert&lt;/code&gt; or &lt;code&gt;-v&lt;/code&gt; is used the selected lines will be only those which do not match the given glob pattern or regular expression.</source>
          <target state="translated">如果使用 &lt;code&gt;--invert&lt;/code&gt; 或 &lt;code&gt;-v&lt;/code&gt; ,则选定的行将仅是与给定的glob模式或正则表达式不匹配的行。</target>
        </trans-unit>
        <trans-unit id="bca5e01e9673f9e6a815d4bc3b45775fa51fbbf4" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;--regex&lt;/code&gt; or &lt;code&gt;-r&lt;/code&gt; is given, PATTERN is interpreted as a Perl-compatible regular expression, which does not have to match the entire STRING. For a regular expression containing capturing groups, multiple items will be reported for each match, one for the entire match and one for each capturing group. With this, only the matching part of the STRING will be reported, unless &lt;code&gt;--entire&lt;/code&gt; is given.</source>
          <target state="translated">如果 &lt;code&gt;--regex&lt;/code&gt; 或 &lt;code&gt;-r&lt;/code&gt; ，则PATTERN将被解释为与Perl兼容的正则表达式，而不必匹配整个STRING。对于包含捕获组的正则表达式，将为每个匹配项报告多个项目，为整个匹配项报告一个项目，为每个捕获组报告一个项目。这样，除非给出 &lt;code&gt;--entire&lt;/code&gt; ，否则只会报告STRING的匹配部分。</target>
        </trans-unit>
        <trans-unit id="fcb2b97b9b74110a92108364c83d3b0d2cdf428f" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;-a&lt;/code&gt; or &lt;code&gt;--array&lt;/code&gt; is provided, only one variable name is allowed and the tokens are stored as a list in this variable.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4e269b8b85f5f48b405e1f529c5cc1623456789e" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;-a&lt;/code&gt; or &lt;code&gt;--array&lt;/code&gt; is provided, only one variable name is allowed and the tokens are stored as an array in this variable.</source>
          <target state="translated">如果提供了 &lt;code&gt;-a&lt;/code&gt; 或 &lt;code&gt;--array&lt;/code&gt; ，则仅允许使用一个变量名，并且将标记作为数组存储在此变量中。</target>
        </trans-unit>
        <trans-unit id="a6dcb1b88668c5c41c70fbdad2157ee6171f60f0" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;-e&lt;/code&gt; is used, the following sequences are recognized:</source>
          <target state="translated">如果使用 &lt;code&gt;-e&lt;/code&gt; ，则将识别以下序列：</target>
        </trans-unit>
        <trans-unit id="e5d5482f59147347f76e114d12618ff3d78fea80" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;-r&lt;/code&gt; or &lt;code&gt;--regex&lt;/code&gt; is given, PATTERN is interpreted as a Perl-compatible regular expression, and REPLACEMENT can contain C-style escape sequences like &lt;code&gt;\t&lt;/code&gt; as well as references to capturing groups by number or name as &lt;code&gt;$n&lt;/code&gt; or &lt;code&gt;${n}&lt;/code&gt;.</source>
          <target state="translated">如果给定了 &lt;code&gt;-r&lt;/code&gt; 或 &lt;code&gt;--regex&lt;/code&gt; ，则PATTERN将被解释为与Perl兼容的正则表达式，并且REPLACEMENT可以包含C样式的转义序列，例如 &lt;code&gt;\t&lt;/code&gt; ，以及引用捕获数字或名称为 &lt;code&gt;$n&lt;/code&gt; 或 &lt;code&gt;${n}&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="227584b023d6d2c7837f693e7e9b190c0c0b3bf5" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;ARG&lt;/code&gt; and &lt;code&gt;REASON&lt;/code&gt; are both specified, &lt;code&gt;ARG&lt;/code&gt; is the command to be executed when the event specified by &lt;code&gt;REASON&lt;/code&gt; occurs (e.g., the signal is delivered).</source>
          <target state="translated">如果同时指定了 &lt;code&gt;ARG&lt;/code&gt; 和 &lt;code&gt;REASON&lt;/code&gt; ，则在由 &lt;code&gt;REASON&lt;/code&gt; 指定的事件发生时（例如，信号已交付）， &lt;code&gt;ARG&lt;/code&gt; 是要执行的命令。</target>
        </trans-unit>
        <trans-unit id="d6a059f39530ea46f03b1a88f280774a9e1b7e4c" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;ARG&lt;/code&gt; is absent (and there is a single REASON) or -, each specified signal is reset to its original disposition (the value it had upon entrance to the shell). If &lt;code&gt;ARG&lt;/code&gt; is the null string the signal specified by each &lt;code&gt;REASON&lt;/code&gt; is ignored by the shell and by the commands it invokes.</source>
          <target state="translated">如果不存在 &lt;code&gt;ARG&lt;/code&gt; （并且存在一个REASON）或-，则将每个指定的信号重置为其原始配置（进入外壳时所具有的值）。如果 &lt;code&gt;ARG&lt;/code&gt; 为空字符串，则外壳程序及其调用的命令将忽略每个 &lt;code&gt;REASON&lt;/code&gt; 指定的信号。</target>
        </trans-unit>
        <trans-unit id="0310897c6525d4c0a20301e5b59490367df8d786" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;ARG&lt;/code&gt; is not present and &lt;code&gt;-p&lt;/code&gt; has been supplied, then the trap commands associated with each &lt;code&gt;REASON&lt;/code&gt; are displayed. If no arguments are supplied or if only &lt;code&gt;-p&lt;/code&gt; is given, &lt;code&gt;trap&lt;/code&gt; prints the list of commands associated with each signal.</source>
          <target state="translated">如果不存在 &lt;code&gt;ARG&lt;/code&gt; 且已提供 &lt;code&gt;-p&lt;/code&gt; ，则显示与每个 &lt;code&gt;REASON&lt;/code&gt; 关联的trap命令。如果未提供任何参数，或者仅提供了 &lt;code&gt;-p&lt;/code&gt; ，则 &lt;code&gt;trap&lt;/code&gt; 打印与每个信号关联的命令列表。</target>
        </trans-unit>
        <trans-unit id="46f4e7706aaa7715626c2065fdf439e268266771" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;DIRECTORY&lt;/code&gt; is a relative path, the paths found in the &lt;code&gt;CDPATH&lt;/code&gt; environment variable array will be tried as prefixes for the specified path.</source>
          <target state="translated">如果 &lt;code&gt;DIRECTORY&lt;/code&gt; 是相对路径，则将尝试在 &lt;code&gt;CDPATH&lt;/code&gt; 环境变量数组中找到的路径作为指定路径的前缀。</target>
        </trans-unit>
        <trans-unit id="d8fdf9c081d12374165457176e730cf87d210ca2" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;DIRECTORY&lt;/code&gt; is a relative path, the paths found in the &lt;code&gt;CDPATH&lt;/code&gt; list will be tried as prefixes for the specified path, in addition to $PWD.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6d211b5295328f27c5f4dda2c5b64e33b2d339ae" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;DIRECTORY&lt;/code&gt; is supplied, it will become the new directory. If no parameter is given, the contents of the &lt;code&gt;HOME&lt;/code&gt; environment variable will be used.</source>
          <target state="translated">如果提供了 &lt;code&gt;DIRECTORY&lt;/code&gt; ，它将成为新目录。如果未提供任何参数，则将使用 &lt;code&gt;HOME&lt;/code&gt; 环境变量的内容。</target>
        </trans-unit>
        <trans-unit id="ee49ba74d2c75163466a92ec95757c32496b3231" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;commandline&lt;/code&gt; is called during a call to complete a given string using &lt;code&gt;complete -C STRING&lt;/code&gt;, &lt;code&gt;commandline&lt;/code&gt; will consider the specified string to be the current contents of the command line.</source>
          <target state="translated">如果 &lt;code&gt;commandline&lt;/code&gt; 是通话过程中调用，完成使用给定的字符串 &lt;code&gt;complete -C STRING&lt;/code&gt; ， &lt;code&gt;commandline&lt;/code&gt; 会考虑将指定的字符串是命令行的当前内容。</target>
        </trans-unit>
        <trans-unit id="1145ddb3bdeee96521a717d934a15cc64d95077c" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;fish&lt;/code&gt; encounters a problem while executing a command, the status variable may also be set to a specific value:</source>
          <target state="translated">如果 &lt;code&gt;fish&lt;/code&gt; 在执行命令时遇到问题，则状态变量也可以设置为特定值：</target>
        </trans-unit>
        <trans-unit id="f09fbf7f2a9a04bff01d5330effffef51795cab0" translate="yes" xml:space="preserve">
          <source>If a &lt;code&gt;SECTION&lt;/code&gt; is specified, the help for that command is shown.</source>
          <target state="translated">如果指定了 &lt;code&gt;SECTION&lt;/code&gt; ，则显示该命令的帮助。</target>
        </trans-unit>
        <trans-unit id="8d59528d17aca71e945c01c4f608cc07968fec9a" translate="yes" xml:space="preserve">
          <source>If a VCS isn't installed, the respective function does nothing.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8ebee8483e83b06811ff3ba9ccc429433dce33cd" translate="yes" xml:space="preserve">
          <source>If a function named &lt;code&gt;fish_greeting&lt;/code&gt; exists, it will be run when entering interactive mode. Otherwise, if an environment variable named &lt;code&gt;fish_greeting&lt;/code&gt; exists, it will be printed.</source>
          <target state="translated">如果存在名为 &lt;code&gt;fish_greeting&lt;/code&gt; 的函数，则在进入交互模式时将运行该函数。否则，如果存在名为 &lt;code&gt;fish_greeting&lt;/code&gt; 的环境变量，则将其打印出来。</target>
        </trans-unit>
        <trans-unit id="236d9b2bfa9ffd703bff82e438702935d8f276d3" translate="yes" xml:space="preserve">
          <source>If a job is stopped, it is sent a signal to continue running, and a warning is printed. It is not possible to use the &lt;code&gt;bg&lt;/code&gt; builtin to continue a job once it has been disowned.</source>
          <target state="translated">如果作业停止，则会向其发送继续运行的信号，并打印警告。一旦放弃工作，就无法使用内置的 &lt;code&gt;bg&lt;/code&gt; 继续工作。</target>
        </trans-unit>
        <trans-unit id="60e2a752180a8997dd97af87732b5ed3a03f8d8f" translate="yes" xml:space="preserve">
          <source>If a numeric mask is specified as a parameter, the current shell's umask will be set to that value, and the rights specified by that mask will be removed from new files and directories by default.</source>
          <target state="translated">如果指定一个数字掩码作为参数,则当前shell的umask将被设置为该值,该掩码指定的权限将被默认从新文件和目录中删除。</target>
        </trans-unit>
        <trans-unit id="2dde9e658888f495cea69c0ad8b260a62416e91a" translate="yes" xml:space="preserve">
          <source>If a pid is specified, the command waits for the job that the process with the pid belongs to.</source>
          <target state="translated">如果指定了pid,命令将等待具有pid的进程所属的作业。</target>
        </trans-unit>
        <trans-unit id="f851c83c3c3953c372c81382f02613c546f275f0" translate="yes" xml:space="preserve">
          <source>If a process exits through a signal, the exit status will be 128 plus the number of the signal.</source>
          <target state="translated">如果一个进程通过信号退出,退出状态将是128加信号的编号。</target>
        </trans-unit>
        <trans-unit id="47cb47829c9383def1fb8361853c4c7dd09368a8" translate="yes" xml:space="preserve">
          <source>If a process name is specified, the command waits for the jobs that the matched processes belong to.</source>
          <target state="translated">如果指定了进程名称,命令将等待匹配的进程所属的作业。</target>
        </trans-unit>
        <trans-unit id="302f9ccffa6bb045e0895a185f5c9e50859c884f" translate="yes" xml:space="preserve">
          <source>If a script produces output, it should finish by calling &lt;code&gt;commandline -f repaint&lt;/code&gt; to tell fish that a repaint is in order.</source>
          <target state="translated">如果脚本产生输出，则应通过调用 &lt;code&gt;commandline -f repaint&lt;/code&gt; 来告诉fish刷新顺序已完成。</target>
        </trans-unit>
        <trans-unit id="67026ba945428dc31827715c1565311d33b5af8d" translate="yes" xml:space="preserve">
          <source>If a star (&lt;code&gt;*&lt;/code&gt;) or a question mark (&lt;code&gt;?&lt;/code&gt;) is present in the parameter, &lt;code&gt;fish&lt;/code&gt; attempts to match the given parameter to any files in such a way that:</source>
          <target state="translated">如果参数中出现星号（ &lt;code&gt;*&lt;/code&gt; ）或问号（ &lt;code&gt;?&lt;/code&gt; ），则 &lt;code&gt;fish&lt;/code&gt; 会尝试将给定参数与任何文件进行匹配，方式是：</target>
        </trans-unit>
        <trans-unit id="18a6fd00e4b1ddec496d39ba9f288b25c849a5d6" translate="yes" xml:space="preserve">
          <source>If a symbolic mask is specified, the desired permission bits, and not the inverse, should be specified. A symbolic mask is a comma separated list of rights. Each right consists of three parts:</source>
          <target state="translated">如果指定了符号掩码,则应指定所需的权限位,而不是反过来。符号掩码是一个逗号分隔的权利列表。每个权利由三部分组成。</target>
        </trans-unit>
        <trans-unit id="c3bd46787a5c6b92e6f20cfe4fbc883c75045f2a" translate="yes" xml:space="preserve">
          <source>If a variable has global scope, it is accessible read-write to functions whether it is exported or not.</source>
          <target state="translated">如果一个变量具有全局范围,那么无论是否导出,它都可以被函数读写。</target>
        </trans-unit>
        <trans-unit id="741d44bccaaf674b1d069d14a1bdb399e238d593" translate="yes" xml:space="preserve">
          <source>If a variable has local scope and is exported, any function called receives a &lt;em&gt;copy&lt;/em&gt; of it, so any changes it makes to the variable disappear once the function returns.</source>
          <target state="translated">如果变量具有局部作用域并已导出，则任何称为的函数都会收到其&lt;em&gt;副本&lt;/em&gt;，因此一旦函数返回，对变量所做的任何更改都会消失。</target>
        </trans-unit>
        <trans-unit id="b71ed16ea5a59eda60ec534a14bf2d103ba20ae9" translate="yes" xml:space="preserve">
          <source>If a variable has local scope and is exported, any function called receives a _copy_ of it, so any changes it makes to the variable disappear once the function returns.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="96f0994fdaca0f9b1c269335d2df0f4e271c169d" translate="yes" xml:space="preserve">
          <source>If a variable is explicitly set to a scope (universal, global or local), that setting will be honored. If a variable of the same name exists in a different scope, that variable will not be changed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2cbdc88f5e9bb2f3b40009d0379b55ab2352ae84" translate="yes" xml:space="preserve">
          <source>If a variable is explicitly set to either be exported or not exported, that setting will be honored.</source>
          <target state="translated">如果一个变量被明确设置为导出或不导出,那么该设置将被尊重。</target>
        </trans-unit>
        <trans-unit id="ce6484065868b4e9c43f6db14f55a84fe136a4bf" translate="yes" xml:space="preserve">
          <source>If a variable is explicitly set to either universal, global or local, that setting will be honored. If a variable of the same name exists in a different scope, that variable will not be changed.</source>
          <target state="translated">如果一个变量被明确地设置为通用、全局或局部,那么该设置将被尊重。如果一个同名的变量存在于不同的作用域中,该变量将不会被改变。</target>
        </trans-unit>
        <trans-unit id="7fd2961197b45dfc25c896ad23c85e1abfcf8519" translate="yes" xml:space="preserve">
          <source>If a variable is not explicitly set to a scope and has not been defined, the variable will be local to the currently executing function. Note that this is different from using the &lt;code&gt;-l&lt;/code&gt; or &lt;code&gt;--local&lt;/code&gt; flag. If one of those flags is used, the variable will be local to the most inner currently executing block, while without these the variable will be local to the function. If no function is executing, the variable will be global.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6e687f439d700aaa30c67d0c1c2079a9950e1712" translate="yes" xml:space="preserve">
          <source>If a variable is not explicitly set to a scope, but has been previously defined, the variable scope is not changed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="326eb232490e8df93b49fd2c3a89fde63906ed77" translate="yes" xml:space="preserve">
          <source>If a variable is not explicitly set to be either exported or not exported and has never before been defined, the variable will not be exported.</source>
          <target state="translated">如果一个变量没有被明确地设置为导出或不导出,并且之前从未被定义过,那么该变量将不会被导出。</target>
        </trans-unit>
        <trans-unit id="ef107fe0701094bebbf7a6322c1155614a1be3ba" translate="yes" xml:space="preserve">
          <source>If a variable is not explicitly set to be either exported or unexported and has never before been defined, the variable will not be exported.</source>
          <target state="translated">如果一个变量没有被明确地设置为导出或未导出,并且之前从未被定义过,那么该变量将不会被导出。</target>
        </trans-unit>
        <trans-unit id="bd6c17ea05cd6c81f352d96759e2622e4a16e84b" translate="yes" xml:space="preserve">
          <source>If a variable is not explicitly set to be either universal, global or local and has never before been defined, the variable will be local to the currently executing function. Note that this is different from using the &lt;code&gt;-l&lt;/code&gt; or &lt;code&gt;--local&lt;/code&gt; flag. If one of those flags is used, the variable will be local to the most inner currently executing block, while without these the variable will be local to the function. If no function is executing, the variable will be global.</source>
          <target state="translated">如果未将变量明确地设置为通用，全局或局部且从未定义过，则该变量将在当前执行的函数中局部。请注意，这与使用 &lt;code&gt;-l&lt;/code&gt; 或 &lt;code&gt;--local&lt;/code&gt; 标志不同。如果使用这些标志之一，则该变量将位于当前执行最内部的块中，而如果没有这些标志，则变量将位于该函数中。如果没有函数在执行，则该变量将是全局变量。</target>
        </trans-unit>
        <trans-unit id="8b2d1734ef9bdd7bd6d21bc623798a68378e6c8b" translate="yes" xml:space="preserve">
          <source>If a variable is not explicitly set to be either universal, global or local, but has been previously defined, the previous variable scope is used.</source>
          <target state="translated">如果一个变量没有被明确设置为通用、全局或局部,但之前已经被定义,则使用之前的变量范围。</target>
        </trans-unit>
        <trans-unit id="ae5e31cb3d02690bd43a99dc6a823c8568d4b6e8" translate="yes" xml:space="preserve">
          <source>If a variable is not explicitly set to be either universal, global or local, but has been previously defined, the variable scope is not changed.</source>
          <target state="translated">如果一个变量没有显式地设置为通用、全局或局部,但之前已经定义过,则变量范围不会改变。</target>
        </trans-unit>
        <trans-unit id="6ccd9990afce6a9aaaa05eb9827a340fd925feb1" translate="yes" xml:space="preserve">
          <source>If a variable is not explicitly set to be exported or not exported, but has been previously defined, the previous exporting rule for the variable is kept.</source>
          <target state="translated">如果一个变量没有明确设置为导出或不导出,但之前已经定义过,则保留该变量之前的导出规则。</target>
        </trans-unit>
        <trans-unit id="ae603cd6be44b99d51c1566501087ce7b225183b" translate="yes" xml:space="preserve">
          <source>If a variable is set to more than one value, the variable will be a list with the specified elements. If a variable is set to zero elements, it will become a list with zero elements.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="72e2106717a7a37128914da8765dc2c6c6697b14" translate="yes" xml:space="preserve">
          <source>If a variable is set to more than one value, the variable will be an array with the specified elements. If a variable is set to zero elements, it will become an array with zero elements.</source>
          <target state="translated">如果一个变量被设置为一个以上的值,则该变量将成为一个具有指定元素的数组。如果一个变量被设置为零元素,它将成为一个元素为零的数组。</target>
        </trans-unit>
        <trans-unit id="a723f0fea3c45c67807883ef6059438866b12547" translate="yes" xml:space="preserve">
          <source>If after expansion there is nothing between the braces, the argument will be removed (see &lt;a href=&quot;#cartesian-product&quot;&gt;the cartesian product section&lt;/a&gt;):</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7f805483966bd1b92bb16fa0e48ac91c14f18567" translate="yes" xml:space="preserve">
          <source>If an error occurs during argparse processing it will exit with a non-zero status and print error messages to stderr.</source>
          <target state="translated">如果在argparse处理过程中发生错误,它将以非零状态退出,并将错误信息打印到stderr。</target>
        </trans-unit>
        <trans-unit id="f3bb201c1119b5848ebfda84c47d1e1698174af5" translate="yes" xml:space="preserve">
          <source>If any non-option parameters are given, the definition of the specified functions are printed.</source>
          <target state="translated">如果给出任何非选项参数,则打印指定函数的定义。</target>
        </trans-unit>
        <trans-unit id="dcc764ad71040642c2ae2b7ce376987c8f357ee1" translate="yes" xml:space="preserve">
          <source>If exit is called while sourcing a file (using the &lt;a href=&quot;#source&quot;&gt;source&lt;/a&gt; builtin) the rest of the file will be skipped, but the shell itself will not exit.</source>
          <target state="translated">如果在采购文件时（使用内置&lt;a href=&quot;#source&quot;&gt;源&lt;/a&gt;）调用exit，则文件的其余部分将被跳过，但Shell本身不会退出。</target>
        </trans-unit>
        <trans-unit id="2ad30bb6821fad0de41f3c375fba71f6a9c37c25" translate="yes" xml:space="preserve">
          <source>If exit is called while sourcing a file (using the &lt;a href=&quot;source#cmd-source&quot;&gt;source&lt;/a&gt; builtin) the rest of the file will be skipped, but the shell itself will not exit.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3068ba7bd98e36689eab0ca26911e82ce1011087" translate="yes" xml:space="preserve">
          <source>If fish is unable to locate a command with a given name, and it starts with '&lt;code&gt;.&lt;/code&gt;', '&lt;code&gt;/&lt;/code&gt;' or '&lt;code&gt;~&lt;/code&gt;', fish will test if a directory of that name exists. If it does, it is implicitly assumed that you want to change working directory. For example, the fastest way to switch to your home directory is to simply press &lt;code&gt;~&lt;/code&gt; and enter.</source>
          <target state="translated">如果fish无法找到具有给定名称的命令，则该命令以'开头 &lt;code&gt;.&lt;/code&gt; '，' &lt;code&gt;/&lt;/code&gt; '或' &lt;code&gt;~&lt;/code&gt; '，fish将测试该名称的目录是否存在。如果是这样，则隐式假定您要更改工作目录。例如，切换到主目录的最快方法是简单地按 &lt;code&gt;~&lt;/code&gt; 并输入。</target>
        </trans-unit>
        <trans-unit id="08db4ab1c440a3e304e3453045348ee442c8b3f8" translate="yes" xml:space="preserve">
          <source>If fish is your default shell and you want to copy commands from the internet that are written in a different shell language, bash for example, you can proceed in the following way:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="779713b50e0b6db32e410c35dd906b7eab469c0a" translate="yes" xml:space="preserve">
          <source>If invoked with multiple arguments instead of input, &lt;code&gt;string collect&lt;/code&gt; preserves each argument separately, where the number of output arguments is equal to the number of arguments given to &lt;code&gt;string collect&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bd1e21aed552d458b2c10cb3ad02fe6a085212c8" translate="yes" xml:space="preserve">
          <source>If limit is given, it is the new value of the specified resource. If no option is given, then &lt;code&gt;-f&lt;/code&gt; is assumed. Values are in kilobytes, except for &lt;code&gt;-t&lt;/code&gt;, which is in seconds and &lt;code&gt;-n&lt;/code&gt; and &lt;code&gt;-u&lt;/code&gt;, which are unscaled values. The exit status is 0 unless an invalid option or argument is supplied, or an error occurs while setting a new limit.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9365afaebdcba814bae204eaa9cb6846f923618b" translate="yes" xml:space="preserve">
          <source>If limit is given, it is the new value of the specified resource. If no option is given, then &lt;code&gt;-f&lt;/code&gt; is assumed. Values are in kilobytes, except for &lt;code&gt;-t&lt;/code&gt;, which is in seconds and &lt;code&gt;-n&lt;/code&gt; and &lt;code&gt;-u&lt;/code&gt;, which are unscaled values. The return status is 0 unless an invalid option or argument is supplied, or an error occurs while setting a new limit.</source>
          <target state="translated">如果给定limit，则为指定资源的新值。如果没有给出选项，则假定 &lt;code&gt;-f&lt;/code&gt; 。值以千字节为单位，但 &lt;code&gt;-t&lt;/code&gt; （以秒为单位）和 &lt;code&gt;-n&lt;/code&gt; 和 &lt;code&gt;-u&lt;/code&gt; （非标度值）除外。除非提供了无效的选项或参数，否则返回状态为0，或者在设置新的限制时发生错误。</target>
        </trans-unit>
        <trans-unit id="ca3ffe9826b96a93254e7258c40cd2d913b9941e" translate="yes" xml:space="preserve">
          <source>If neither a pid nor a process name is specified, the command waits for all background jobs.</source>
          <target state="translated">如果既没有指定pid,也没有指定进程名称,则命令会等待所有后台作业。</target>
        </trans-unit>
        <trans-unit id="6620b792aa7c50700f6a7c83a134de00e5936216" translate="yes" xml:space="preserve">
          <source>If no &lt;code&gt;SEQUENCE&lt;/code&gt; is provided, all bindings (or just the bindings in the specified &lt;code&gt;MODE&lt;/code&gt;) are printed. If &lt;code&gt;SEQUENCE&lt;/code&gt; is provided without &lt;code&gt;COMMAND&lt;/code&gt;, just the binding matching that sequence is printed.</source>
          <target state="translated">如果未提供 &lt;code&gt;SEQUENCE&lt;/code&gt; ，则将打印所有绑定（或仅指定 &lt;code&gt;MODE&lt;/code&gt; 中的绑定）。如果提供的 &lt;code&gt;SEQUENCE&lt;/code&gt; 没有 &lt;code&gt;COMMAND&lt;/code&gt; ，则仅打印与该序列匹配的绑定。</target>
        </trans-unit>
        <trans-unit id="319b10cf51c7aaf0a0ad28a0d4b4f6c772504c25" translate="yes" xml:space="preserve">
          <source>If no file is specified and stdin is not the terminal, or if the file name '&lt;code&gt;-&lt;/code&gt;' is used, stdin will be read.</source>
          <target state="translated">如果未指定文件且stdin不是终端，或者如果使用文件名' &lt;code&gt;-&lt;/code&gt; '，则将读取stdin。</target>
        </trans-unit>
        <trans-unit id="193caf7005f5652feb5a621fdb872e8d40cb588f" translate="yes" xml:space="preserve">
          <source>If no option to determine how to split like &lt;code&gt;--delimiter&lt;/code&gt;, &lt;code&gt;--line&lt;/code&gt; or &lt;code&gt;--tokenize&lt;/code&gt; is given, the variable &lt;code&gt;IFS&lt;/code&gt; is used as a list of characters to split on. Relying on the use of &lt;code&gt;IFS&lt;/code&gt; is deprecated and this behaviour will be removed in future versions. The default value of &lt;code&gt;IFS&lt;/code&gt; contains space, tab and newline characters. As a special case, if &lt;code&gt;IFS&lt;/code&gt; is set to the empty string, each character of the input is considered a separate token.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e05e6aafbb793ade9f477fd1403ff37aea85d34f" translate="yes" xml:space="preserve">
          <source>If no piping or other compound shell constructs are required, variable-expansion-as-command, as in &lt;code&gt;set cmd ls -la; $cmd&lt;/code&gt;, is also an option.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dcfe8801c42ff77994dd55c54562f05ad1157dea" translate="yes" xml:space="preserve">
          <source>If no process is specified, the most recently-used job is removed (like &lt;a href=&quot;bg#cmd-bg&quot;&gt;bg&lt;/a&gt; and &lt;a href=&quot;fg#cmd-fg&quot;&gt;fg&lt;/a&gt;). If one or more PIDs are specified, jobs with the specified process IDs are removed from the job list. Invalid jobs are ignored and a warning is printed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="536986c9ac77b0a65c848619315ad13a2f046d5c" translate="yes" xml:space="preserve">
          <source>If no process is specified, the most recently-used job is removed (like &lt;code&gt;bg&lt;/code&gt; and &lt;code&gt;fg&lt;/code&gt;). If one or more &lt;code&gt;PID&lt;/code&gt;s are specified, jobs with the specified process IDs are removed from the job list. Invalid jobs are ignored and a warning is printed.</source>
          <target state="translated">如果未指定任何进程，则将删除最近使用的作业（如 &lt;code&gt;bg&lt;/code&gt; 和 &lt;code&gt;fg&lt;/code&gt; ）。如果指定了一个或多个 &lt;code&gt;PID&lt;/code&gt; ，则具有指定进程ID的作业将从作业列表中删除。无效的作业将被忽略，并显示警告。</target>
        </trans-unit>
        <trans-unit id="713bf8682430a51e2b7af1a6d836f8e75fd1bdaa" translate="yes" xml:space="preserve">
          <source>If no variable names are provided, &lt;code&gt;read&lt;/code&gt; enters a special case that simply provides redirection from standard input to standard output, useful for command substitution. For instance, the fish shell command below can be used to read data that should be provided via a command line argument from the console instead of hardcoding it in the command itself, allowing the command to both be reused as-is in various contexts with different input values and preventing possibly sensitive text from being included in the shell history:</source>
          <target state="translated">如果未提供变量名，则 &lt;code&gt;read&lt;/code&gt; 输入一个特殊情况，该情况仅提供从标准输入到标准输出的重定向，对命令替换很有用。例如，下面的fish shell命令可用于从控制台读取应通过命令行参数提供的数据，而不是在命令本身中对其进行硬编码，从而可以在具有不同上下文的各种上下文中按原样重用该命令输入值并防止可能的敏感文本包含在外壳程序历史记录中：</target>
        </trans-unit>
        <trans-unit id="f6b617c0f8612fdf2ea16aba5ec62984acf5c44a" translate="yes" xml:space="preserve">
          <source>If only 123 and 789 exist, it will still background them and print an error about 456.</source>
          <target state="translated">如果只有123和789存在,它仍然会对它们进行背景处理,并打印一个关于456的错误。</target>
        </trans-unit>
        <trans-unit id="e5b23704e06de8e7cf41b466203c3d1a05734047" translate="yes" xml:space="preserve">
          <source>If set is called with no arguments, the names and values of all shell variables are printed in sorted order. If some of the scope or export flags have been given, only the variables matching the specified scope are printed.</source>
          <target state="translated">如果调用set时没有参数,则所有shell变量的名称和值按排序打印。如果给定了一些作用域或导出标志,则只打印与指定作用域匹配的变量。</target>
        </trans-unit>
        <trans-unit id="c9d5f4fcbf5a20e0012582eafdf56b977cf064da" translate="yes" xml:space="preserve">
          <source>If terminfo reports 256 color support for a terminal, 256 color support will always be enabled.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="302a7adb7b2bb424535b98eb0c4ef6539ea7cb20" translate="yes" xml:space="preserve">
          <source>If terminfo reports 256 color support for a terminal, support will always be enabled. To debug color palette problems, &lt;code&gt;tput colors&lt;/code&gt; may be useful to see the number of colors in terminfo for a terminal. Fish launched as &lt;code&gt;fish -d2&lt;/code&gt; will include diagnostic messages that indicate the color support mode in use.</source>
          <target state="translated">如果terminfo报告对终端的256色支持，则将始终启用支持。要调试调色板问题，输入 &lt;code&gt;tput colors&lt;/code&gt; 可能有助于查看terminfo中终端的颜色数量。以 &lt;code&gt;fish -d2&lt;/code&gt; 启动的Fish 将包括诊断消息，这些消息指示正在使用的颜色支持模式。</target>
        </trans-unit>
        <trans-unit id="4d30c96739992df19433df0a6e1c59dfb95af762" translate="yes" xml:space="preserve">
          <source>If that directory traversal is taking a long time, you can</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="34986c35bab0e2df661c76619902534fb332f46c" translate="yes" xml:space="preserve">
          <source>If that directory traversal is taking a long time, you can &lt;em&gt;Control&lt;/em&gt;-&lt;b&gt;C&lt;/b&gt; out of it.</source>
          <target state="translated">如果该目录遍历花费很长时间，则可以将&lt;em&gt;Control&lt;/em&gt; - &lt;b&gt;C&lt;/b&gt;移出该目录。</target>
        </trans-unit>
        <trans-unit id="ffef75da37c5f07daa061c4afec5f2616551ca39" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;$VISUAL&lt;/code&gt; environment variable is set, it will be used as the program to edit the function. If &lt;code&gt;$VISUAL&lt;/code&gt; is unset but &lt;code&gt;$EDITOR&lt;/code&gt; is set, that will be used. Otherwise, a built-in editor will be used. Note that to enter a literal newline using the built-in editor you should press</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e3d023db5ee6df47941a2ca566209f059001722c" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;$VISUAL&lt;/code&gt; environment variable is set, it will be used as the program to edit the function. If &lt;code&gt;$VISUAL&lt;/code&gt; is unset but &lt;code&gt;$EDITOR&lt;/code&gt; is set, that will be used. Otherwise, a built-in editor will be used. Note that to enter a literal newline using the built-in editor you should press &lt;em&gt;Alt&lt;/em&gt;-&lt;b&gt;Enter&lt;/b&gt;. Pressing &lt;b&gt;Enter&lt;/b&gt; signals that you are done editing the function. This does not apply to an external editor like emacs or vim.</source>
          <target state="translated">如果设置了 &lt;code&gt;$VISUAL&lt;/code&gt; 环境变量，它将用作编辑该功能的程序。如果未设置 &lt;code&gt;$VISUAL&lt;/code&gt; 但设置了 &lt;code&gt;$EDITOR&lt;/code&gt; ，则将使用它。否则，将使用内置编辑器。请注意，要使用内置编辑器输入文字换行符，应按&lt;em&gt;Alt&lt;/em&gt; - &lt;b&gt;Enter&lt;/b&gt;。按&lt;b&gt;Enter&lt;/b&gt;表示您已完成对该功能的编辑。这不适用于emacs或vim等外部编辑器。</target>
        </trans-unit>
        <trans-unit id="e8fb943c750f92e3917384bc05f81b775bd8db88" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;--delimiter&lt;/code&gt; argument is not given, the variable &lt;code&gt;IFS&lt;/code&gt; is used as a list of characters to split on. Relying on the use of &lt;code&gt;IFS&lt;/code&gt; is deprecated and this behaviour will be removed in future versions. The default value of &lt;code&gt;IFS&lt;/code&gt; contains space, tab and newline characters. As a special case, if &lt;code&gt;IFS&lt;/code&gt; is set to the empty string, each character of the input is considered a separate token.</source>
          <target state="translated">如果未指定 &lt;code&gt;--delimiter&lt;/code&gt; 参数，则将变量 &lt;code&gt;IFS&lt;/code&gt; 用作要分割的字符列表。不推荐使用 &lt;code&gt;IFS&lt;/code&gt; ，并且在以后的版本中将删除此行为。 &lt;code&gt;IFS&lt;/code&gt; 的默认值包含空格，制表符和换行符。作为一种特殊情况，如果将 &lt;code&gt;IFS&lt;/code&gt; 设置为空字符串，则输入的每个字符都被视为一个单独的标记。</target>
        </trans-unit>
        <trans-unit id="b9a1bc2ff2f56d3990f495529faa7ba44ead0455" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;-k&lt;/code&gt; switch is used, the name of the key (such as 'down', 'up' or 'backspace') is used instead of a sequence. The names used are the same as the corresponding curses variables, but without the 'key_' prefix. (See &lt;code&gt;terminfo(5)&lt;/code&gt; for more information, or use &lt;code&gt;bind --key-names&lt;/code&gt; for a list of all available named keys.) If used in conjunction with the &lt;code&gt;-s&lt;/code&gt; switch, &lt;code&gt;bind&lt;/code&gt; will silently ignore bindings to named keys that are not found in termcap for the current &lt;code&gt;$TERMINAL&lt;/code&gt;, otherwise a warning is emitted.</source>
          <target state="translated">如果使用 &lt;code&gt;-k&lt;/code&gt; 开关，则使用键名（例如'down'，'up'或'backspace'）代替序列。使用的名称与相应的curses变量相同，但没有'key_'前缀。（有关更多信息，请参见 &lt;code&gt;terminfo(5)&lt;/code&gt; ，或者将 &lt;code&gt;bind --key-names&lt;/code&gt; 用于所有可用的命名键的列表。）如果与 &lt;code&gt;-s&lt;/code&gt; 开关一起使用， &lt;code&gt;bind&lt;/code&gt; 将默默地忽略对未找到的命名键的绑定。当前 &lt;code&gt;$TERMINAL&lt;/code&gt; termcap中，否则发出警告。</target>
        </trans-unit>
        <trans-unit id="1d7b9b3be6cec368c8849bf11af8487da853a633" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;-l&lt;/code&gt; or &lt;code&gt;--list&lt;/code&gt; flag is specified, the current directory history is also displayed.</source>
          <target state="translated">如果指定了 &lt;code&gt;-l&lt;/code&gt; 或 &lt;code&gt;--list&lt;/code&gt; 标志，那么还将显示当前目录历史记录。</target>
        </trans-unit>
        <trans-unit id="4cfc35a3a98ed01dd389efdde71deb0bf3c6669a" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;-l&lt;/code&gt; or &lt;code&gt;--list&lt;/code&gt; flag is specified, the current history is also displayed.</source>
          <target state="translated">如果指定了 &lt;code&gt;-l&lt;/code&gt; 或 &lt;code&gt;--list&lt;/code&gt; 标志，那么还将显示当前历史记录。</target>
        </trans-unit>
        <trans-unit id="492a67bd7712dda8e66c7c5fc44c0836f4b18f3a" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;-n&lt;/code&gt; / &lt;code&gt;--any&lt;/code&gt; flag is provided, the command returns as soon as the first job completes. If it is not provided, it returns after all jobs complete.</source>
          <target state="translated">如果提供了 &lt;code&gt;-n&lt;/code&gt; / &lt;code&gt;--any&lt;/code&gt; 标志，则该命令将在第一个作业完成后立即返回。如果未提供，它将在所有作业完成后返回。</target>
        </trans-unit>
        <trans-unit id="63b9207ee5d979afeb85211115a3c6ffa7012a71" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;/tmp&lt;/code&gt; directory exists, copy the &lt;code&gt;/etc/motd&lt;/code&gt; file to it:</source>
          <target state="translated">如果 &lt;code&gt;/tmp&lt;/code&gt; 目录存在，则将 &lt;code&gt;/etc/motd&lt;/code&gt; 文件复制到其中：</target>
        </trans-unit>
        <trans-unit id="c3b856c7f49407f5bd18390ec22c0a975e0942a6" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;BROWSER&lt;/code&gt; environment variable is set, it will be used as the name of the web browser to open instead of the system default.</source>
          <target state="translated">如果设置了 &lt;code&gt;BROWSER&lt;/code&gt; 环境变量，它将用作要打开的Web浏览器的名称，而不是系统默认值。</target>
        </trans-unit>
        <trans-unit id="3debf54dad8f4dc6d939e041eacf2dbfc04ad3d0" translate="yes" xml:space="preserve">
          <source>If the BROWSER environment variable is set, it will be used to display the documentation. Otherwise, fish will search for a suitable browser.</source>
          <target state="translated">如果设置了BROWSER环境变量,它将被用来显示文档。否则,fish将搜索一个合适的浏览器。</target>
        </trans-unit>
        <trans-unit id="aa6fc1ea4246a9f77c10ddff36e9849dd9022bcd" translate="yes" xml:space="preserve">
          <source>If the above code was run with &lt;code&gt;$animal&lt;/code&gt; set to &lt;code&gt;whale&lt;/code&gt;, the output would be &lt;code&gt;mammal&lt;/code&gt;.</source>
          <target state="translated">如果上面的代码在 &lt;code&gt;$animal&lt;/code&gt; 设置为 &lt;code&gt;whale&lt;/code&gt; 的情况下运行，则输出将是 &lt;code&gt;mammal&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="d75d0af6becad51e324987bba4dbf96c51e8300a" translate="yes" xml:space="preserve">
          <source>If the alias has the same name as the aliased command, it is necessary to prefix the call to the program with &lt;code&gt;command&lt;/code&gt; in order to tell fish that the function should not call itself, but rather a command with the same name. Failing to do so will cause infinite recursion bugs.</source>
          <target state="translated">如果别名的名称与别名命令的名称相同，则必须在命令的调用前加上 &lt;code&gt;command&lt;/code&gt; 前缀，以告知fish该函数不应调用自身，而应调用具有相同名称的命令。否则，将导致无限递归错误。</target>
        </trans-unit>
        <trans-unit id="49ebc34132e7660866a77bb4bd002951a641b8a0" translate="yes" xml:space="preserve">
          <source>If the alias has the same name as the aliased command, you need to prefix the call to the program with &lt;code&gt;command&lt;/code&gt; to tell fish that the function should not call itself, but rather a command with the same name. If you forget to do so, the function would call itself until the end of time. Usually fish is smart enough to figure this out and will refrain from doing so (which is hopefully in your interest).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e5185e556f9b263d1410cf1a894fc4a29463388d" translate="yes" xml:space="preserve">
          <source>If the argument you want is far back in history (e.g. 2 lines back - that's a lot of words!), type any part of it and then press</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ad3ed0aa46a2e24462a85265faa22a817cd5bf4f" translate="yes" xml:space="preserve">
          <source>If the argument you want is far back in history (e.g. 2 lines back - that's a lot of words!), type any part of it and then press &lt;em&gt;Alt&lt;/em&gt;-&lt;b&gt;&amp;uarr;&lt;/b&gt;. This will show only arguments containing that part and you will get what you want much faster. Try it out, this is very convenient!</source>
          <target state="translated">如果你想的说法是早在历史上（如2号线回来- ！这是一个很多的话），键入任何部分，然后按&lt;em&gt;Alt键&lt;/em&gt; - &lt;b&gt;&amp;uarr;&lt;/b&gt;。这将仅显示包含该部分的参数，您将更快地获得所需的内容。试试看，这非常方便！</target>
        </trans-unit>
        <trans-unit id="8b1303483eab8a0aafe5607e65c79febb8c3aca1" translate="yes" xml:space="preserve">
          <source>If the commandline contains</source>
          <target state="translated">如果命令行包含</target>
        </trans-unit>
        <trans-unit id="e3f1eb54148bd5719468d4632589d32c09c11b49" translate="yes" xml:space="preserve">
          <source>If the commandline reads &lt;code&gt;cd m&lt;/code&gt;, place the cursor over the &lt;code&gt;m&lt;/code&gt; character and press</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4b1c190c6ad0436a0fd3fb383f1281a2e816bf89" translate="yes" xml:space="preserve">
          <source>If the commandline reads &lt;code&gt;cd m&lt;/code&gt;, place the cursor over the &lt;code&gt;m&lt;/code&gt; character and press &lt;em&gt;Alt&lt;/em&gt;-&lt;b&gt;&amp;uarr;&lt;/b&gt; to search for previously typed words containing 'm'.</source>
          <target state="translated">如果命令行读取 &lt;code&gt;cd m&lt;/code&gt; ，将光标放在 &lt;code&gt;m&lt;/code&gt; 字符，然后按&lt;em&gt;Alt键&lt;/em&gt; - &lt;b&gt;&amp;uarr;&lt;/b&gt;搜索包含&amp;ldquo;M&amp;rdquo;先前输入的单词。</target>
        </trans-unit>
        <trans-unit id="aec97b1cdbedc052d45f0ca8a3886ba07331192c" translate="yes" xml:space="preserve">
          <source>If the current directory contains the files 'foo' and 'bar', the command &lt;code&gt;echo a(ls){1,2,3}&lt;/code&gt; will output 'abar1 abar2 abar3 afoo1 afoo2 afoo3'.</source>
          <target state="translated">如果当前目录包含文件'foo'和'bar'，则命令 &lt;code&gt;echo a(ls){1,2,3}&lt;/code&gt; 将输出'abar1 abar2 abar3 afoo1 afoo2 afoo3'。</target>
        </trans-unit>
        <trans-unit id="3b9446dcdf384793d9dbf8ed3d708bf58cbc9557" translate="yes" xml:space="preserve">
          <source>If the current directory contains the files 'foo' and 'bar', the command &lt;code&gt;echo a(ls){1,2,3}&lt;/code&gt; will output &lt;code&gt;abar1 abar2 abar3 afoo1 afoo2 afoo3&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ea966f7daecf90f40c09560ec0ace32a38679be8" translate="yes" xml:space="preserve">
          <source>If the end is smaller than the start, or the start is larger than the end, range expansion will go in reverse. This is unless exactly one of the given indices is negative, so the direction doesn't change if the list has fewer elements than expected.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9ac01aa8bdf61c4705d1b573ca6b14e107487f86" translate="yes" xml:space="preserve">
          <source>If the expression is successfully evaluated and doesn't over/underflow or return NaN the return &lt;code&gt;status&lt;/code&gt; is zero (success) else one.</source>
          <target state="translated">如果表达式已成功求值且没有上溢/下溢或返回NaN，则返回 &lt;code&gt;status&lt;/code&gt; 为零（成功），否则为1。</target>
        </trans-unit>
        <trans-unit id="5cfff00b5bb7a05a9b5b06be91a9cc46be32a1f7" translate="yes" xml:space="preserve">
          <source>If the first and second parts are skipped, they are assumed to be &lt;code&gt;a&lt;/code&gt; and &lt;code&gt;=&lt;/code&gt;, respectively. As an example, &lt;code&gt;r,u+w&lt;/code&gt; means all users should have read access and the file owner should also have write access.</source>
          <target state="translated">如果跳过了第一部分和第二部分，则假定它们分别为 &lt;code&gt;a&lt;/code&gt; 和 &lt;code&gt;=&lt;/code&gt; 。例如， &lt;code&gt;r,u+w&lt;/code&gt; 表示所有用户都应具有读访问权限，文件所有者也应具有写访问权限。</target>
        </trans-unit>
        <trans-unit id="51826fa22bf5b5c7586ce652a67a6e4318f4ac64" translate="yes" xml:space="preserve">
          <source>If the function definition is changed, all running shells will automatically reload the altered version.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="154cdf4f784ed79e1fcb74335c0c901b6cf4ac90" translate="yes" xml:space="preserve">
          <source>If the line you want is far back in the history, type any part of the line and then press Up one or more times. This will constrain the recall to lines that include this text, and you will get to the line you want much faster. This replaces &quot;!vi&quot;, &quot;!?bar.c&quot; and the like.</source>
          <target state="translated">如果你想要的行在历史上很久之前,输入该行的任何部分,然后按向上键一次或多次。这将限制调用包括这段文字的行,你将更快地找到你想要的行。这将取代&quot;!vi&quot;、&quot;!?bar.c &quot;等。</target>
        </trans-unit>
        <trans-unit id="70006a59c6935a4438f9d0040be162c8ee9ec5a8" translate="yes" xml:space="preserve">
          <source>If the list is visible, pressing control-S (or the &lt;code&gt;pager-toggle-search&lt;/code&gt; binding) will allow filtering the list. Shift-tab (or the &lt;code&gt;complete-and-search&lt;/code&gt; binding) will trigger completion with the search field immediately visible.</source>
          <target state="translated">如果列表可见，则按Ctrl-S（或 &lt;code&gt;pager-toggle-search&lt;/code&gt; 绑定）将允许过滤列表。Shift-tab（或&amp;ldquo; &lt;code&gt;complete-and-search&lt;/code&gt; 绑定）将触发搜索字段立即可见的完成。</target>
        </trans-unit>
        <trans-unit id="d76a8116548a88ed416d142b0ea322f0ccb59543" translate="yes" xml:space="preserve">
          <source>If the list is visible, pressing control-S (or the &lt;code&gt;pager-toggle-search&lt;/code&gt; binding) will allow filtering the list. Shift-tab (or the &lt;code&gt;complete-and-search&lt;/code&gt; binding) will trigger completion with the search field immediately visible. These are the general purpose tab completions that &lt;code&gt;fish&lt;/code&gt; provides:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="275b4b014bd30e8806c2588d2da955cb7daf020a" translate="yes" xml:space="preserve">
          <source>If the operation fails, an error will be reported.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="29df263ac386a0b20ba5f9a3e6fe000d33b8c6f2" translate="yes" xml:space="preserve">
          <source>If the output is piped to &lt;a href=&quot;cmds/string#cmd-string-split&quot;&gt;string split or string split0&lt;/a&gt; as the last step, those splits are used as they appear and no additional splitting on newlines takes place.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e4c01f00f1709a1d845be8af766e2896516906fa" translate="yes" xml:space="preserve">
          <source>If the path is invalid no translated path will be written to stdout and an error will be reported.</source>
          <target state="translated">如果路径无效,则不会将翻译后的路径写入stdout,并报告一个错误。</target>
        </trans-unit>
        <trans-unit id="e1e2f0cd5d9c3189924438eab165e537469221dd" translate="yes" xml:space="preserve">
          <source>If the specified file descriptor is a terminal device, the exit status of the command is zero. Otherwise, the exit status is non-zero. No messages are printed to standard error.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e907fd3510899683ab1ac3f96d2aac1979d9258b" translate="yes" xml:space="preserve">
          <source>If the specified file descriptor is a tty, the exit status of the command is zero. Otherwise, the exit status is non-zero. No messages are printed to standard error.</source>
          <target state="translated">如果指定的文件描述符是tty,则该命令的退出状态为0,否则,退出状态为非零。否则,退出状态为非零。没有信息被打印成标准错误。</target>
        </trans-unit>
        <trans-unit id="fe06c7e257d873be32fd7989f5055c27083aeab6" translate="yes" xml:space="preserve">
          <source>If the user enters any additional arguments after the function, they are inserted into the environment &lt;a href=&quot;../index#variables-lists&quot;&gt;variable list&lt;/a&gt;&lt;code&gt;$argv&lt;/code&gt;. If the &lt;code&gt;--argument-names&lt;/code&gt; option is provided, the arguments are also assigned to names specified in that option.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bd0e2ed527cbeaac8bf34e5481dc729ba00211c1" translate="yes" xml:space="preserve">
          <source>If the user enters any additional arguments after the function, they are inserted into the environment &lt;a href=&quot;index#variables-arrays&quot;&gt;variable array&lt;/a&gt;&lt;code&gt;$argv&lt;/code&gt;. If the &lt;code&gt;--argument-names&lt;/code&gt; option is provided, the arguments are also assigned to names specified in that option.</source>
          <target state="translated">如果用户在函数后输入任何其他参数，则将它们插入环境&lt;a href=&quot;index#variables-arrays&quot;&gt;变量数组&lt;/a&gt; &lt;code&gt;$argv&lt;/code&gt; 。如果提供了 &lt;code&gt;--argument-names&lt;/code&gt; 选项，则还将参数分配给该选项中指定的名称。</target>
        </trans-unit>
        <trans-unit id="89093e95575f5c91e69c231cc514a5f888c355b9" translate="yes" xml:space="preserve">
          <source>If the variable $animal contains the name of an animal, the following code would attempt to classify it:</source>
          <target state="translated">如果变量$animal包含一个动物的名字,下面的代码将尝试对其进行分类。</target>
        </trans-unit>
        <trans-unit id="081ef0f3bbeaf93e50b97aca197ba4dab7103ab9" translate="yes" xml:space="preserve">
          <source>If the variable &lt;code&gt;MANPATH&lt;/code&gt; is defined and not empty, print the contents. (If &lt;code&gt;MANPATH&lt;/code&gt; is not defined, then it will expand to zero arguments, unless quoted.)</source>
          <target state="translated">如果定义了变量 &lt;code&gt;MANPATH&lt;/code&gt; 并且不为空，则打印内容。（如果未定义 &lt;code&gt;MANPATH&lt;/code&gt; ，则除非引用，否则它将扩展为零参数。）</target>
        </trans-unit>
        <trans-unit id="b85b340b71b7dd9ea477da93a9f45e28372572db" translate="yes" xml:space="preserve">
          <source>If the variable name is one or more array elements, such as &lt;code&gt;PATH[1 3 7]&lt;/code&gt;, only those array elements specified will be changed. If you specify a negative index when expanding or assigning to an array variable, the index will be calculated from the end of the array. For example, the index -1 means the last index of an array.</source>
          <target state="translated">如果变量名称是一个或多个数组元素，例如 &lt;code&gt;PATH[1 3 7]&lt;/code&gt; ，则仅更改指定的那些数组元素。如果在扩展或分配给数组变量时指定负索引，则将从数组末尾开始计算索引。例如，索引-1表示数组的最后一个索引。</target>
        </trans-unit>
        <trans-unit id="2711332599fb67538cfe4343e904027c558ff897" translate="yes" xml:space="preserve">
          <source>If the variable name is one or more list elements, such as &lt;code&gt;PATH[1 3 7]&lt;/code&gt;, only those list elements specified will be changed. If you specify a negative index when expanding or assigning to a list variable, the index will be calculated from the end of the list. For example, the index -1 means the last index of a list.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="788fcc2dc7b9ec9c743aa985b73d706a1c941ace" translate="yes" xml:space="preserve">
          <source>If there are multiple files with the same name in these directories, only the first will be executed. They are executed in order of their filename, sorted (like globs) in a natural order (i.e. &quot;01&quot; sorts before &quot;2&quot;).</source>
          <target state="translated">如果这些目录中有多个同名的文件,则只执行第一个。它们按文件名的顺序执行,按自然顺序排序(像globs一样)(即 &quot;01 &quot;排在 &quot;2 &quot;之前)。</target>
        </trans-unit>
        <trans-unit id="37b3f6c1d9e2443aab8662a7a439797d66881a18" translate="yes" xml:space="preserve">
          <source>If there is no function called &lt;code&gt;NAME&lt;/code&gt; a new function will be created with the specified name</source>
          <target state="translated">如果没有名为 &lt;code&gt;NAME&lt;/code&gt; 的函数，则将使用指定的名称创建一个新函数</target>
        </trans-unit>
        <trans-unit id="6d5cfe09681412194f4ba98b5cd9ee3fb9a19be4" translate="yes" xml:space="preserve">
          <source>If there is nothing between a brace and a comma or two commas, it's interpreted as an empty element.</source>
          <target state="translated">如果在大括号和逗号或两个逗号之间没有任何东西,就会被解释为一个空元素。</target>
        </trans-unit>
        <trans-unit id="bda5467f9834c7878e79dd21cd4d2f3d7dd7c4a6" translate="yes" xml:space="preserve">
          <source>If there is nothing between a brace and a comma or two commas, it's interpreted as an empty element:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="24adce4068128d584888031a1553f03853a858ae" translate="yes" xml:space="preserve">
          <source>If there's more than one possibility, it will list them</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="afe6214497e3e493ce7fed66861473c8f9d5c2d3" translate="yes" xml:space="preserve">
          <source>If there's more than one possibility, it will list them:</source>
          <target state="translated">如果有一个以上的可能性,它会列出它们。</target>
        </trans-unit>
        <trans-unit id="463c7b41266bb02e7be790b635471da72331d8c9" translate="yes" xml:space="preserve">
          <source>If two braces do not contain a &quot;,&quot; or a variable expansion, they will not be expanded in this manner:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1b4ecf432926bdf9219384030390dce4a62ae339" translate="yes" xml:space="preserve">
          <source>If you are developing another program and would like to ship completions with your program, install them to the &quot;vendor&quot; completions directory. As this path may vary from system to system, the &lt;code&gt;pkgconfig&lt;/code&gt; framework should be used to discover this path with the output of &lt;code&gt;pkg-config --variable completionsdir fish&lt;/code&gt;.</source>
          <target state="translated">如果您正在开发另一个程序，并且希望随程序一起交付补全，请将它们安装到&amp;ldquo;供应商&amp;rdquo;补全目录中。由于该路径可能因系统而异，因此应使用 &lt;code&gt;pkgconfig&lt;/code&gt; 框架通过 &lt;code&gt;pkg-config --variable completionsdir fish&lt;/code&gt; 的输出来发现此路径。</target>
        </trans-unit>
        <trans-unit id="f3b96ff834aa659d4dcfe109c2f08409908bba2c" translate="yes" xml:space="preserve">
          <source>If you are developing another program and would like to ship completions with your program, install them to the &quot;vendor&quot; completions directory. As this path may vary from system to system, the pkgconfig framework should be used to discover this path with the output of &lt;code&gt;pkg-config --variable completionsdir fish&lt;/code&gt;. Your installation system should support a custom path to override the pkgconfig path, as other distributors may need to alter it easily.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a2e3bcc2c86a34d726c99da6041e118aebc6aab5" translate="yes" xml:space="preserve">
          <source>If you are developing another program, you may wish to install configuration which is run for all users of the fish shell on a system. This is discouraged; if not carefully written, they may have side-effects or slow the startup of the shell. Additionally, users of other shells will not benefit from the Fish-specific configuration. However, if they are absolutely required, you may install them to the &quot;vendor&quot; configuration directory. As this path may vary from system to system, the &lt;code&gt;pkgconfig&lt;/code&gt; framework should be used to discover this path with the output of &lt;code&gt;pkg-config --variable confdir fish&lt;/code&gt;.</source>
          <target state="translated">如果要开发其他程序，则可能希望安装在系统上为fish shell的所有用户运行的配置。不鼓励这样做；如果编写不当，可能会产生副作用或使外壳启动速度变慢。此外，其他外壳的用户将无法从Fish特定的配置中受益。但是，如果绝对需要它们，则可以将它们安装到&amp;ldquo;供应商&amp;rdquo;配置目录中。由于该路径可能因系统而异，因此应使用 &lt;code&gt;pkgconfig&lt;/code&gt; 框架通过 &lt;code&gt;pkg-config --variable confdir fish&lt;/code&gt; 的输出来发现此路径。</target>
        </trans-unit>
        <trans-unit id="4916db32b6aa8cbf9c1ffbb01d73d5df4a8870cc" translate="yes" xml:space="preserve">
          <source>If you are developing another program, you may wish to install functions which are available for all users of the fish shell on a system. They can be installed to the &quot;vendor&quot; functions directory. As this path may vary from system to system, the &lt;code&gt;pkgconfig&lt;/code&gt; framework should be used to discover this path with the output of &lt;code&gt;pkg-config --variable functionsdir fish&lt;/code&gt;.</source>
          <target state="translated">如果您正在开发其他程序，则可能希望安装系统上所有可供鱼壳用户使用的功能。可以将它们安装到&amp;ldquo;供应商&amp;rdquo;功能目录。由于该路径可能因系统而异，因此应使用 &lt;code&gt;pkgconfig&lt;/code&gt; 框架通过 &lt;code&gt;pkg-config --variable functionsdir fish&lt;/code&gt; 的输出来发现此路径。</target>
        </trans-unit>
        <trans-unit id="24d577aff02c57ccc535834fabc2b9ff18d8c605" translate="yes" xml:space="preserve">
          <source>If you are developing another program, you may wish to install functions which are available for all users of the fish shell on a system. They can be installed to the &quot;vendor&quot; functions directory. As this path may vary from system to system, the &lt;code&gt;pkgconfig&lt;/code&gt; framework should be used to discover this path with the output of &lt;code&gt;pkg-config --variable functionsdir fish&lt;/code&gt;. Your installation system should support a custom path to override the pkgconfig path, as other distributors may need to alter it easily.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="423e276545b7dd53d72e587423056db3d40ae703" translate="yes" xml:space="preserve">
          <source>If you are familiar with these, it is useful to know how &lt;code&gt;string&lt;/code&gt; differs from them.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2c8709afb8c37b08fcb75856aca6d9778e8772cd" translate="yes" xml:space="preserve">
          <source>If you are just interested in success or failure, you can run the command directly as the if-condition:</source>
          <target state="translated">如果你只对成功或失败感兴趣,可以直接以if条件的方式运行命令。</target>
        </trans-unit>
        <trans-unit id="6b4679db7ed1ee15be09b7a815eb852cdada744e" translate="yes" xml:space="preserve">
          <source>If you do not use any brackets, all the elements of the array will be written as separate items. This means you can easily iterate over an array using this syntax:</source>
          <target state="translated">如果你不使用任何括号,那么数组中的所有元素将被写成单独的项目。这意味着你可以很容易地使用这种语法在一个数组上进行迭代。</target>
        </trans-unit>
        <trans-unit id="80a3062c14429e2bf432a524df5b36623d385389" translate="yes" xml:space="preserve">
          <source>If you do not use any brackets, all the elements of the list will be written as separate items. This means you can easily iterate over a list using this syntax:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="21121c72874a1f506d3167db9734fb72635e8aba" translate="yes" xml:space="preserve">
          <source>If you do this via a function it should be defined with the &lt;code&gt;--no-scope-shadowing&lt;/code&gt; flag. Otherwise it won't have access to those variables.</source>
          <target state="translated">如果通过函数执行此操作，则应使用 &lt;code&gt;--no-scope-shadowing&lt;/code&gt; 标志进行定义。否则它将无法访问这些变量。</target>
        </trans-unit>
        <trans-unit id="cf34bb52e96a3b222773c87c97bf5316f69250b8" translate="yes" xml:space="preserve">
          <source>If you enabled the informative status, there are numerous customization options, which can be controlled with fish variables.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="76fc284188c8102e752b1bddb9f0226a85c1fbff" translate="yes" xml:space="preserve">
          <source>If you have a question not answered by this documentation, there are several avenues for help:</source>
          <target state="translated">如果您的问题没有在本文档中找到答案,您可以通过多种途径寻求帮助。</target>
        </trans-unit>
        <trans-unit id="d5d69fd8cf3faf8da11aa1c87838469a40522c72" translate="yes" xml:space="preserve">
          <source>If you have a strong understanding of other shells, and want to know what &lt;code&gt;fish&lt;/code&gt; does differently, search for the magic phrase &lt;em&gt;unlike other shells&lt;/em&gt;, which is used to call out important differences.</source>
          <target state="translated">如果您对其他贝壳有很好的了解，并且想知道 &lt;code&gt;fish&lt;/code&gt; 作用不同，请搜索&lt;em&gt;不同于其他贝壳&lt;/em&gt;的魔术短语，该短语用来指出重要的区别。</target>
        </trans-unit>
        <trans-unit id="d94e356f3d06bfc0847471bd8ac63c7fdd35e968" translate="yes" xml:space="preserve">
          <source>If you have an improvement for fish, you can submit it via the mailing list or the GitHub page.</source>
          <target state="translated">如果你有关于鱼的改进,你可以通过邮件列表或GitHub页面提交。</target>
        </trans-unit>
        <trans-unit id="3c91aaa3641347d6b92a729c32a7d96c010b6da2" translate="yes" xml:space="preserve">
          <source>If you have written new completions for a common Unix command, please consider sharing your work by submitting it via the instructions in &lt;a href=&quot;#more-help&quot;&gt;Further help and development&lt;/a&gt;.</source>
          <target state="translated">如果您为Unix通用命令写了新的修整，请考虑按照&amp;ldquo; &lt;a href=&quot;#more-help&quot;&gt;进一步的帮助和开发&amp;rdquo;中&lt;/a&gt;的说明提交工作，以共享您的工作。</target>
        </trans-unit>
        <trans-unit id="801a4bfeff44c78289adc6da559907889b10b7ff" translate="yes" xml:space="preserve">
          <source>If you installed a prepackaged version of fish, the package manager should have already done this for you.</source>
          <target state="translated">如果你安装了鱼的预包装版本,包管理器应该已经为你做了这个工作。</target>
        </trans-unit>
        <trans-unit id="bacc9cf3f5b8aece5e2cb795329bd9e98f414229" translate="yes" xml:space="preserve">
          <source>If you installed fish manually (e.g. by compiling it, not by using a package manager), you first need to add fish to the list of shells by executing the following command (assuming you installed fish in /usr/local):</source>
          <target state="translated">如果你手动安装了fish(例如,通过编译,而不是使用软件包管理器),你首先需要通过执行以下命令将fish添加到shell列表中(假设你将fish安装在/usr/local)。</target>
        </trans-unit>
        <trans-unit id="cec1a3f92a8c27f32a8f6e6cb86da5cd7afb4270" translate="yes" xml:space="preserve">
          <source>If you instead want to put a suspended job into the background, use the &lt;a href=&quot;cmds/bg#cmd-bg&quot;&gt;bg&lt;/a&gt; command.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="24dbcaa65ea45136e4556660a86f87890a258184" translate="yes" xml:space="preserve">
          <source>If you instead want to put a suspended job into the background, use the &lt;a href=&quot;commands#bg&quot;&gt;&lt;code&gt;bg&lt;/code&gt;&lt;/a&gt; command.</source>
          <target state="translated">如果您想将挂起的作业放到后台，请使用&lt;a href=&quot;commands#bg&quot;&gt; &lt;code&gt;bg&lt;/code&gt; &lt;/a&gt;命令。</target>
        </trans-unit>
        <trans-unit id="7d15c732f3a561ab865f45eb2b69dbf51b681f71" translate="yes" xml:space="preserve">
          <source>If you prefer to use a different browser (other than as described above) for fish help, you can set the fish_help_browser variable. This variable may be set as a list, where the first element is the browser command and the rest are browser options.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="76575622923fc6960275a0372650f7e641f7d23c" translate="yes" xml:space="preserve">
          <source>If you prefer to use a different browser (other than as described above) for fish help, you can set the fish_help_browser variable. This variable may be set as an array, where the first element is the browser command and the rest are browser options.</source>
          <target state="translated">如果你喜欢使用不同的浏览器(除了上面描述的)来获取鱼的帮助,你可以设置fish_help_browser变量。这个变量可以设置为一个数组,其中第一个元素是浏览器命令,其余为浏览器选项。</target>
        </trans-unit>
        <trans-unit id="e98db4a9618c4e99c4cfeeb47be4e315b3159f68" translate="yes" xml:space="preserve">
          <source>If you specify a negative index when expanding or assigning to a list variable, the index will be calculated from the end of the list. For example, the index -1 means the last index of a list.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6b10dc2d52b83a3f3bcbb9eafde410131a7638e1" translate="yes" xml:space="preserve">
          <source>If you specify a negative index when expanding or assigning to an array variable, the index will be calculated from the end of the array. For example, the index -1 means the last index of an array.</source>
          <target state="translated">如果在扩展或分配给一个数组变量时指定了一个负的索引,索引将从数组的末端开始计算。例如,索引-1表示一个数组的最后一个索引。</target>
        </trans-unit>
        <trans-unit id="bef2a5da408bc0ccc604bb6e7c2ada1e1e368d28" translate="yes" xml:space="preserve">
          <source>If you specify both &lt;code&gt;--prefix&lt;/code&gt; and &lt;code&gt;--contains&lt;/code&gt; the last flag seen is used.</source>
          <target state="translated">如果同时指定 &lt;code&gt;--prefix&lt;/code&gt; 和 &lt;code&gt;--contains&lt;/code&gt; ，则使用最后看到的标志。</target>
        </trans-unit>
        <trans-unit id="cfeb5cfbb4d7330298cd9ae2e7db448aa2300961" translate="yes" xml:space="preserve">
          <source>If you specify the &lt;code&gt;-e&lt;/code&gt; or &lt;code&gt;--entire&lt;/code&gt; then each matching string is printed including any prefix or suffix not matched by the pattern (equivalent to &lt;code&gt;grep&lt;/code&gt; without the &lt;code&gt;-o&lt;/code&gt; flag). You can, obviously, achieve the same result by prepending and appending &lt;code&gt;*&lt;/code&gt; or &lt;code&gt;.*&lt;/code&gt; depending on whether or not you have specified the &lt;code&gt;--regex&lt;/code&gt; flag. The &lt;code&gt;--entire&lt;/code&gt; flag is simply a way to avoid having to complicate the pattern in that fashion and make the intent of the &lt;code&gt;string match&lt;/code&gt; clearer. Without &lt;code&gt;--entire&lt;/code&gt; and &lt;code&gt;--regex&lt;/code&gt;, a PATTERN will need to match the entire STRING before it will be reported.</source>
          <target state="translated">如果指定 &lt;code&gt;-e&lt;/code&gt; 或 &lt;code&gt;--entire&lt;/code&gt; ,则将打印每个匹配的字符串，包括该模式不匹配的任何前缀或后缀（等效于不带 &lt;code&gt;-o&lt;/code&gt; 标志的 &lt;code&gt;grep&lt;/code&gt; ）。显然，可以通过在前面加上 &lt;code&gt;*&lt;/code&gt; 或 &lt;code&gt;.*&lt;/code&gt; 实现相同的结果，具体取决于是否指定了 &lt;code&gt;--regex&lt;/code&gt; 标志。该 &lt;code&gt;--entire&lt;/code&gt; 标志仅仅是为了避免不得不在时尚的图案复杂化，使意图的方式 &lt;code&gt;string match&lt;/code&gt; 清晰。如果没有 &lt;code&gt;--entire&lt;/code&gt; 和 &lt;code&gt;--regex&lt;/code&gt; ，则PATTERN将需要与整个STRING匹配，然后才能进行报告。</target>
        </trans-unit>
        <trans-unit id="22a9feadf64d822a318f10f2b4793d1a2316c159" translate="yes" xml:space="preserve">
          <source>If you specify the &lt;code&gt;-f&lt;/code&gt; or &lt;code&gt;--filter&lt;/code&gt; flag then each input string is printed only if a replacement was done. This is useful where you would otherwise use this idiom: &lt;code&gt;a_cmd | string match pattern | string replace pattern new_pattern&lt;/code&gt;. You can instead just write &lt;code&gt;a_cmd | string replace --filter pattern new_pattern&lt;/code&gt;.</source>
          <target state="translated">如果指定 &lt;code&gt;-f&lt;/code&gt; 或 &lt;code&gt;--filter&lt;/code&gt; 标志，则仅在完成替换后才打印每个输入字符串。在您可能会使用以下成语的地方，这很有用： &lt;code&gt;a_cmd | string match pattern | string replace pattern new_pattern&lt;/code&gt; 。您可以改写 &lt;code&gt;a_cmd | string replace --filter pattern new_pattern&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="d8e54ae0a24762829d8f55a86df97428a46a48f0" translate="yes" xml:space="preserve">
          <source>If you want to add the directory &lt;code&gt;~/linux/bin&lt;/code&gt; to your PATH variable when using a login shell, add the following to your &lt;code&gt;~/.config/fish/config.fish&lt;/code&gt; file:</source>
          <target state="translated">如果要在使用登录外壳程序时将目录 &lt;code&gt;~/linux/bin&lt;/code&gt; 到PATH变量中，请将以下内容添加到 &lt;code&gt;~/.config/fish/config.fish&lt;/code&gt; 文件中：</target>
        </trans-unit>
        <trans-unit id="3226bbbfea92d52214a04066c17b75561d8b1dfd" translate="yes" xml:space="preserve">
          <source>If you want to find out more about the echo command used above, read the manual page for the echo command by writing: &lt;code&gt;man echo&lt;/code&gt;</source>
          <target state="translated">如果要查找有关上面使用的echo命令的更多信息，请通过以下方式阅读echo命令的手册页： &lt;code&gt;man echo&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="cf2181e509bdee84b390ead8fe1261883f65f450" translate="yes" xml:space="preserve">
          <source>If you want to know if a variable has &lt;em&gt;no elements&lt;/em&gt;, use &lt;code&gt;set -q var[1]&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f6b8934a463057ab4cbebc293cbcc2bde13fda93" translate="yes" xml:space="preserve">
          <source>If you want to learn more about fish, there is &lt;a href=&quot;index&quot;&gt;lots of detailed documentation&lt;/a&gt;, an &lt;a href=&quot;https://lists.sourceforge.net/lists/listinfo/fish-users&quot;&gt;official mailing list&lt;/a&gt;, the IRC channel #fish on &lt;code&gt;irc.oftc.net&lt;/code&gt;, and the &lt;a href=&quot;https://github.com/fish-shell/fish-shell/&quot;&gt;github page&lt;/a&gt;.</source>
          <target state="translated">如果您想了解更多的鱼，还有&lt;a href=&quot;index&quot;&gt;很多详细的文档&lt;/a&gt;，一个&lt;a href=&quot;https://lists.sourceforge.net/lists/listinfo/fish-users&quot;&gt;官方的邮件列表&lt;/a&gt;，在IRC频道#fish &lt;code&gt;irc.oftc.net&lt;/code&gt; 和&lt;a href=&quot;https://github.com/fish-shell/fish-shell/&quot;&gt;GitHub的页面&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="aa7777db3b385617c9905b1bb85dce8643e34e91" translate="yes" xml:space="preserve">
          <source>If you want to learn more about fish, there is &lt;a href=&quot;index#intro&quot;&gt;lots of detailed documentation&lt;/a&gt;, the &lt;a href=&quot;https://gitter.im/fish-shell/fish-shell&quot;&gt;official gitter channel&lt;/a&gt;, an &lt;a href=&quot;https://lists.sourceforge.net/lists/listinfo/fish-users&quot;&gt;official mailing list&lt;/a&gt;, and the &lt;a href=&quot;https://github.com/fish-shell/fish-shell/&quot;&gt;github page&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="19d1a8c24236cf7d05190b1115ef30aaad303cfb" translate="yes" xml:space="preserve">
          <source>If you want to make your command line more productive, more useful, and more fun, without learning a bunch of arcane syntax and configuration options, then &lt;code&gt;fish&lt;/code&gt; might be just what you're looking for!</source>
          <target state="translated">如果您想让命令行更高效，更有用，更有趣，而又不学习许多神秘的语法和配置选项，那么 &lt;code&gt;fish&lt;/code&gt; 可能就是您想要的！</target>
        </trans-unit>
        <trans-unit id="240e39aa619c5f139c2593362dec95cdca1dfa27" translate="yes" xml:space="preserve">
          <source>If you want to organize your configuration, fish also reads commands in .fish files in &lt;code&gt;~/.config/fish/conf.d/&lt;/code&gt;. See &lt;a href=&quot;index#initialization&quot;&gt;initialization&lt;/a&gt; for the details.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="57bb991addeaec34e0d2e4ff1072fa3e66d59b28" translate="yes" xml:space="preserve">
          <source>If you want to override a variable for a single command, you can use &quot;var=val&quot; statements before the command:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b010bfc3d915896fa771aef1b796169616d992f5" translate="yes" xml:space="preserve">
          <source>If you want to reuse several arguments from the same line (&quot;!!:3*&quot; and the like), consider recalling the whole line and removing what you don't need (</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="817bbc583c325d82f70d5e4e389c9fb588a7021e" translate="yes" xml:space="preserve">
          <source>If you want to reuse several arguments from the same line (&quot;!!:3*&quot; and the like), consider recalling the whole line and removing what you don't need (&lt;em&gt;Alt&lt;/em&gt;-&lt;b&gt;D&lt;/b&gt; and &lt;em&gt;Alt&lt;/em&gt;-&lt;b&gt;Backspace&lt;/b&gt; are your friends).</source>
          <target state="translated">如果要重用同一行中的多个参数（&amp;ldquo; !!：3 *&amp;rdquo;等），请考虑重新调用整行并删除不需要的内容（&lt;em&gt;Alt&lt;/em&gt; - &lt;b&gt;D&lt;/b&gt;和&lt;em&gt;Alt&lt;/em&gt; - &lt;b&gt;Backspace&lt;/b&gt;是您的朋友）。</target>
        </trans-unit>
        <trans-unit id="17b2c50714eca6eb3a1c4f418309af6c45fec63f" translate="yes" xml:space="preserve">
          <source>If you want to run a set of commands when &lt;code&gt;fish&lt;/code&gt; exits, use an &lt;a href=&quot;#event&quot;&gt;event handler&lt;/a&gt; that is triggered by the exit of the shell:</source>
          <target state="translated">如果要在 &lt;code&gt;fish&lt;/code&gt; 退出时运行一组命令，请使用由外壳退出触发的&lt;a href=&quot;#event&quot;&gt;事件处理程序&lt;/a&gt;：</target>
        </trans-unit>
        <trans-unit id="840dcfc4db83e11261bb160a1f0912d853943c4b" translate="yes" xml:space="preserve">
          <source>If you wish to use fish (or any other shell) as your default shell, you need to enter your new shell's executable &lt;code&gt;/usr/local/bin/fish&lt;/code&gt; in two places:</source>
          <target state="translated">如果希望将fish（或任何其他shell）用作默认shell，则需要在两个位置输入新shell的可执行文件 &lt;code&gt;/usr/local/bin/fish&lt;/code&gt; ：</target>
        </trans-unit>
        <trans-unit id="115e2c44e689956437e718e0ec0032e55b5f7fed" translate="yes" xml:space="preserve">
          <source>If you wish to use fish (or any other shell) as your default shell, you need to enter your new shell's executable &lt;code&gt;/usr/local/bin/fish&lt;/code&gt; in two places: - add &lt;code&gt;/usr/local/bin/fish&lt;/code&gt; to &lt;code&gt;/etc/shells&lt;/code&gt; - change your default shell with &lt;code&gt;chsh -s /usr/local/bin/fish&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3a88aaa448eb4ccc5d7c16b222b1aaafa2e3553e" translate="yes" xml:space="preserve">
          <source>If your command does not need access to stdin, consider using &lt;code&gt;source&lt;/code&gt; instead.</source>
          <target state="translated">如果您的命令不需要访问stdin，请考虑改用 &lt;code&gt;source&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="a0edd7289f911011f3a35d834f1f941473e2b0a8" translate="yes" xml:space="preserve">
          <source>If, in the example above, $WORD is undefined or an empty list, the &quot;s&quot; is not printed. However, it is printed if $WORD is the empty string (like after &lt;code&gt;set WORD &quot;&quot;&lt;/code&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="20b7e02e5dced2f235b74397e5dd8fd6678ecaa1" translate="yes" xml:space="preserve">
          <source>If, in the example above, $WORD is undefined or an empty list, the &quot;s&quot; is not printed. However, it is printed, if $WORD is the empty string.</source>
          <target state="translated">如果在上面的例子中,$WORD是未定义的或者是一个空的列表,&quot;s &quot;不会被打印出来。但是,如果$WORD是空字符串,则会被打印出来。</target>
        </trans-unit>
        <trans-unit id="cd4f982a2dfbfb7a494a0fcc11edc18044fd3ee7" translate="yes" xml:space="preserve">
          <source>Import the abbreviations defined on another_host over SSH.</source>
          <target state="translated">通过 SSH 导入在 another_host 上定义的缩写。</target>
        </trans-unit>
        <trans-unit id="99b7d1b47f67f33906cafe0ea45bb9a7ae9de792" translate="yes" xml:space="preserve">
          <source>In addition, when adding abbreviations:</source>
          <target state="translated">此外,在添加缩略语时。</target>
        </trans-unit>
        <trans-unit id="8214b19376f922281d94350c39e691ba4c55ab07" translate="yes" xml:space="preserve">
          <source>In addition, when adding or renaming abbreviations:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b11dd25d3b50e779c52a3bed6755a9de86e7cc31" translate="yes" xml:space="preserve">
          <source>In assignment mode, &lt;code&gt;set&lt;/code&gt; does not modify the exit status. This allows simultaneous capture of the output and exit status of a subcommand, e.g. &lt;code&gt;if set output (command)&lt;/code&gt;. In query mode, the exit status is the number of variables that were not found. In erase mode, &lt;code&gt;set&lt;/code&gt; exits with a zero exit status in case of success, with a non-zero exit status if the commandline was invalid, if the variable was write-protected or if the variable did not exist.</source>
          <target state="translated">在分配模式下， &lt;code&gt;set&lt;/code&gt; 不会修改退出状态。这允许同时捕获子命令的输出和退出状态，例如， &lt;code&gt;if set output (command)&lt;/code&gt; 。在查询模式下，退出状态是未找到的变量数。在擦除模式下，如果成功，则 &lt;code&gt;set&lt;/code&gt; 退出状态为零退出状态；如果命令行无效，变量被写保护或者变量不存在，则set退出状态为非零状态。</target>
        </trans-unit>
        <trans-unit id="997bbb76e726398decafa893aef44209d89a5923" translate="yes" xml:space="preserve">
          <source>In bash, this would have created two directories &quot;Mister&quot; and &quot;Noodle&quot;. In &lt;code&gt;fish&lt;/code&gt;, it created only one: the variable had the value &quot;Mister Noodle&quot;, so that is the argument that was passed to &lt;code&gt;mkdir&lt;/code&gt;, spaces and all. Other shells use the term &quot;arrays&quot;, rather than lists.</source>
          <target state="translated">在bash中，这将创建两个目录&amp;ldquo; Mister&amp;rdquo;和&amp;ldquo; Noodle&amp;rdquo;。在 &lt;code&gt;fish&lt;/code&gt; 中，它仅创建一个：变量的值为&amp;ldquo; Moodle Noodle&amp;rdquo;，因此这是传递给 &lt;code&gt;mkdir&lt;/code&gt; ，spaces和all的参数。其他外壳使用术语&amp;ldquo;数组&amp;rdquo;而不是列表。</target>
        </trans-unit>
        <trans-unit id="febdce18a02406c3f663a8114d7d2b52f9d2f956" translate="yes" xml:space="preserve">
          <source>In cases such as this, one can use &lt;code&gt;command&lt;/code&gt;&lt;code&gt;test&lt;/code&gt; to explicitly use the system's standalone &lt;code&gt;test&lt;/code&gt; rather than this &lt;code&gt;builtin&lt;/code&gt;&lt;code&gt;test&lt;/code&gt;.</source>
          <target state="translated">在这种情况下，可以使用 &lt;code&gt;command&lt;/code&gt; &lt;code&gt;test&lt;/code&gt; 来显式使用系统的独立 &lt;code&gt;test&lt;/code&gt; 而不要使用此 &lt;code&gt;builtin&lt;/code&gt; &lt;code&gt;test&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="c4f2d284a1e65e7867199a2469dd5dff1c9b6cd8" translate="yes" xml:space="preserve">
          <source>In contrast to &lt;code&gt;grep&lt;/code&gt;, &lt;code&gt;string&lt;/code&gt;s &lt;code&gt;match&lt;/code&gt; defaults to glob-mode, while &lt;code&gt;replace&lt;/code&gt; defaults to literal matching. If set to regex-mode, they use PCRE regular expressions, which is comparable to &lt;code&gt;grep&lt;/code&gt;s &lt;code&gt;-P&lt;/code&gt; option. &lt;code&gt;match&lt;/code&gt; defaults to printing just the match, which is like &lt;code&gt;grep&lt;/code&gt; with &lt;code&gt;-o&lt;/code&gt; (use &lt;code&gt;--entire&lt;/code&gt; to enable grep-like behavior).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="50308010771463782c1b1049f298eeb910eb8cb2" translate="yes" xml:space="preserve">
          <source>In contrast to these classics, &lt;code&gt;string&lt;/code&gt; reads input either from stdin or as arguments. &lt;code&gt;string&lt;/code&gt; also does not deal with files, so it requires redirections to be used with them.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8150d5ade4961a7346cfe9d6f7af40451a0e9eba" translate="yes" xml:space="preserve">
          <source>In erase mode, if variable indices are specified, only the specified slices of the array variable will be erased.</source>
          <target state="translated">在擦除模式下,如果指定了变量索引,则只擦除数组变量的指定片断。</target>
        </trans-unit>
        <trans-unit id="ea9ced13df63c29343d5b0a4c89e208d759dd99a" translate="yes" xml:space="preserve">
          <source>In erase mode, if variable indices are specified, only the specified slices of the list variable will be erased.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d285383bee7174093582f84311886d8e77b2597e" translate="yes" xml:space="preserve">
          <source>In fish versions prior to 2.3.0 the &lt;code&gt;$argv&lt;/code&gt; variable would have a single element (the name of the sourced file) if no arguments are present. Otherwise it would contain arguments without the name of the sourced file. That behavior was very confusing and unlike other shells such as bash and zsh.</source>
          <target state="translated">在2.3.0之前的fish版本中，如果不存在任何参数，则 &lt;code&gt;$argv&lt;/code&gt; 变量将具有单个元素（源文件的名称）。否则，它将包含不带源文件名称的参数。这种行为非常令人困惑，并且与其他shell（例如bash和zsh）不同。</target>
        </trans-unit>
        <trans-unit id="9b6a0ae9d083c309f889a5d39f65825be86a357a" translate="yes" xml:space="preserve">
          <source>In fish versions prior to 2.3.0, the &lt;code&gt;$argv&lt;/code&gt; variable would have a single element (the name of the sourced file) if no arguments are present. Otherwise, it would contain arguments without the name of the sourced file. That behavior was very confusing and unlike other shells such as bash and zsh.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b6167c9c2e21f8c5d664cda565772acda6aa5a44" translate="yes" xml:space="preserve">
          <source>In fish versions prior to 2.5.0 it was possible to create a function named &lt;code&gt;-&lt;/code&gt; that would do &lt;code&gt;cd -&lt;/code&gt;. Changes in the 2.5.0 release included several bug fixes that enforce the rule that a bare hyphen is not a valid function (or variable) name. However, you can achieve the same effect via an abbreviation:</source>
          <target state="translated">在之前的2.5.0版本中的鱼有可能创建一个名为功能 &lt;code&gt;-&lt;/code&gt; 即会做 &lt;code&gt;cd -&lt;/code&gt; 。2.5.0版本中的更改包括一些错误修复，这些错误强制实施以下规则：裸连字符不是有效的函数（或变量）名称。但是，您可以通过缩写来达到相同的效果：</target>
        </trans-unit>
        <trans-unit id="c82580c4fc0344cd7e4b4c3bbc7ac9db12a80d91" translate="yes" xml:space="preserve">
          <source>In functions, &lt;code&gt;block&lt;/code&gt; can be useful while performing work that should not be interrupted by the shell.</source>
          <target state="translated">在函数中， &lt;code&gt;block&lt;/code&gt; 在执行不应被shell中断的工作时很有用。</target>
        </trans-unit>
        <trans-unit id="89ff03b555073b2736f671e958968657fb6eb4ed" translate="yes" xml:space="preserve">
          <source>In general, special characters are special by default, so &lt;code&gt;a+&lt;/code&gt; matches one or more &quot;a&quot;s, while &lt;code&gt;a\+&lt;/code&gt; matches an &quot;a&quot; and then a &quot;+&quot;. &lt;code&gt;(a+)&lt;/code&gt; matches one or more &quot;a&quot;s in a capturing group (&lt;code&gt;(?:XXXX)&lt;/code&gt; denotes a non-capturing group). For the replacement parameter of &lt;code&gt;replace&lt;/code&gt;, &lt;code&gt;$n&lt;/code&gt; refers to the n-th group of the match. In the match parameter, &lt;code&gt;\n&lt;/code&gt; (e.g. &lt;code&gt;\1&lt;/code&gt;) refers back to groups.</source>
          <target state="translated">通常，特殊字符默认情况下是特殊字符，因此 &lt;code&gt;a+&lt;/code&gt; 匹配一个或多个&amp;ldquo; a&amp;rdquo;，而 &lt;code&gt;a\+&lt;/code&gt; 匹配&amp;ldquo; a&amp;rdquo;，然后匹配&amp;ldquo; +&amp;rdquo;。 &lt;code&gt;(a+)&lt;/code&gt; 与捕获组中的一个或多个&amp;ldquo; a&amp;rdquo;匹配（ &lt;code&gt;(?:XXXX)&lt;/code&gt; 表示一个非捕获组）。对于 &lt;code&gt;replace&lt;/code&gt; 的替换参数， &lt;code&gt;$n&lt;/code&gt; 表示匹配的第n组。在match参数中， &lt;code&gt;\n&lt;/code&gt; （例如 &lt;code&gt;\1&lt;/code&gt; ）指代组。</target>
        </trans-unit>
        <trans-unit id="52f151afd8c58f05083781d29e38adf8acc285ad" translate="yes" xml:space="preserve">
          <source>In order to change your default shell, type:</source>
          <target state="translated">为了改变你的默认shell,输入。</target>
        </trans-unit>
        <trans-unit id="7744f887d10f15ca76ae2472bb145fdd5fdbdb57" translate="yes" xml:space="preserve">
          <source>In order to protect the shell from consuming too many system resources, &lt;code&gt;read&lt;/code&gt; will only consume a maximum of 10 MiB (1048576 bytes); if the terminator is not reached before this limit then VARIABLE is set to empty and the exit status is set to 122. This limit can be altered with the &lt;code&gt;fish_read_limit&lt;/code&gt; variable. If set to 0 (zero), the limit is removed.</source>
          <target state="translated">为了防止外壳程序消耗过多的系统资源， &lt;code&gt;read&lt;/code&gt; 最多只会消耗10 MiB（1048576字节）；因此，读取操作最多消耗10 MiB（1048576字节）。如果在此限制之前未达到终止符，则将VARIABLE设置为空并将退出状态设置为122。可以使用 &lt;code&gt;fish_read_limit&lt;/code&gt; 变量更改此限制。如果设置为0（零），则删除限制。</target>
        </trans-unit>
        <trans-unit id="10c1bbb71199c4bba1fc0fbd3600f1a2a6187c25" translate="yes" xml:space="preserve">
          <source>In order to protect the shell from consuming too many system resources, &lt;code&gt;read&lt;/code&gt; will only consume a maximum of 100 MiB (104857600 bytes); if the terminator is not reached before this limit then VARIABLE is set to empty and the exit status is set to 122. This limit can be altered with the &lt;code&gt;fish_read_limit&lt;/code&gt; variable. If set to 0 (zero), the limit is removed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ccb466b6200e27a0e4799833112a3b42e6de23b3" translate="yes" xml:space="preserve">
          <source>In particular it will:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cfb4b17946050d9f509c4bdb763f770ebb06687a" translate="yes" xml:space="preserve">
          <source>In query mode, the scope to be examined can be specified.</source>
          <target state="translated">在查询模式下,可以指定要检查的范围。</target>
        </trans-unit>
        <trans-unit id="89d4f28841a1759ddcc1b8894ac4045a23593691" translate="yes" xml:space="preserve">
          <source>In the following code, all output is redirected to the file out.html.</source>
          <target state="translated">在下面的代码中,所有的输出都被重定向到文件out.html。</target>
        </trans-unit>
        <trans-unit id="67bf59485bd852b33bf0045b83854687c5fd2923" translate="yes" xml:space="preserve">
          <source>In the following examples if a flag is not seen when parsing the arguments then the corresponding _flag_X var(s) will not be set.</source>
          <target state="translated">在下面的例子中,如果在解析参数时没有看到标志,那么相应的_flag_X var(s)将不会被设置。</target>
        </trans-unit>
        <trans-unit id="b18679bb485a969aa3729a892fbc342e477da1e5" translate="yes" xml:space="preserve">
          <source>In the overwhelming majority of cases, splitting on spaces is unwanted, so this is an improvement.</source>
          <target state="translated">在绝大多数情况下,对空间的分割是不需要的,所以这是一种改进。</target>
        </trans-unit>
        <trans-unit id="40d4bef31048f07adb0a3c1f574c30c70992f0e5" translate="yes" xml:space="preserve">
          <source>In these cases use &lt;code&gt;string split &quot; &quot;&lt;/code&gt; like:</source>
          <target state="translated">在这种情况下，请使用 &lt;code&gt;string split &quot; &quot;&lt;/code&gt; 例如：</target>
        </trans-unit>
        <trans-unit id="e86e38a4028df2e1d281758cf65343b3a55357c4" translate="yes" xml:space="preserve">
          <source>In these cases, the expansion eliminates the string, as a result of the implicit &lt;a href=&quot;#cartesian-product&quot;&gt;cartesian product&lt;/a&gt;.</source>
          <target state="translated">在这些情况下，由于隐式&lt;a href=&quot;#cartesian-product&quot;&gt;笛卡尔乘积&lt;/a&gt;的结果，扩展消除了字符串。</target>
        </trans-unit>
        <trans-unit id="a96781a5a37dbe8375812a63f70f63e6201fe8ae" translate="yes" xml:space="preserve">
          <source>Incorrect use of output redirects</source>
          <target state="translated">输出重定向的使用不正确</target>
        </trans-unit>
        <trans-unit id="00039aeb76d249d44e4bf3ba01d88ffc368e8bd4" translate="yes" xml:space="preserve">
          <source>Index range expansion</source>
          <target state="translated">指数范围扩大</target>
        </trans-unit>
        <trans-unit id="6fb7f6ce1f52c7d40f5bab615e431e3f8551d458" translate="yes" xml:space="preserve">
          <source>Initialization files</source>
          <target state="translated">初始化文件</target>
        </trans-unit>
        <trans-unit id="2a06266a915eac92808f8af015840d61f777058b" translate="yes" xml:space="preserve">
          <source>Input/Output (IO) redirection</source>
          <target state="translated">输入/输出(IO)重定向。</target>
        </trans-unit>
        <trans-unit id="d06fb6a26a0cdbfbe971938c779ba1d8847a636e" translate="yes" xml:space="preserve">
          <source>Input/Output Redirection</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cc03501ba8e2728a6aa8f006cb5c7941d732153b" translate="yes" xml:space="preserve">
          <source>Insert mode</source>
          <target state="translated">插入模式</target>
        </trans-unit>
        <trans-unit id="c81b79df3c6448eae7c4f80428b54cd5692a17d7" translate="yes" xml:space="preserve">
          <source>Installation</source>
          <target state="translated">Installation</target>
        </trans-unit>
        <trans-unit id="56c7ddbfeb574a673d5b721d96a9d20284b9212a" translate="yes" xml:space="preserve">
          <source>Installation and Start</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fb0ea93fbb85b738df0bd31fcf1bc9eb5468d22b" translate="yes" xml:space="preserve">
          <source>Interactive use</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="653edb0bfdb6bd20dfe7affb5776bc7d271237c7" translate="yes" xml:space="preserve">
          <source>Internals</source>
          <target state="translated">Internals</target>
        </trans-unit>
        <trans-unit id="2473e96bc614a911821242119918a241a41836d6" translate="yes" xml:space="preserve">
          <source>Introduction</source>
          <target state="translated">Introduction</target>
        </trans-unit>
        <trans-unit id="c62c2864f20a2be4aa0393bfb86357685145de0e" translate="yes" xml:space="preserve">
          <source>Invoking &lt;code&gt;complete&lt;/code&gt; multiple times for the same command adds the new definitions on top of any existing completions defined for the command.</source>
          <target state="translated">为同一命令多次调用 &lt;code&gt;complete&lt;/code&gt; 会将新定义添加到为该命令定义的任何现有完成功能的基础上。</target>
        </trans-unit>
        <trans-unit id="60085e96c04073bb488214d0f08662dbfb4f6528" translate="yes" xml:space="preserve">
          <source>It calls out to VCS-specific functions. The currently supported systems are:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cd08cedcb39096700407dcb2ed27cc0a4d9655b5" translate="yes" xml:space="preserve">
          <source>It can also be unexported with &lt;code&gt;--unexport&lt;/code&gt; or &lt;code&gt;-u&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="83c3b240dba13d15ae7f53c1a501f0c631e4c4fe" translate="yes" xml:space="preserve">
          <source>It is also possible to add all emacs-mode bindings to vi-mode by using something like</source>
          <target state="translated">也可以通过使用类似这样的方法将所有 emacs 模式的绑定添加到 vi-mode 中。</target>
        </trans-unit>
        <trans-unit id="ec8325ed194e0bd115e6eac2314eb9c5b93bc6c7" translate="yes" xml:space="preserve">
          <source>It is also possible to add all emacs-mode bindings to vi-mode by using something like:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="88b3a0222511e2204a83e1bd65b24a52023e46f7" translate="yes" xml:space="preserve">
          <source>It is also possible to set or erase individual elements of a list:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8ab84d80263900ba9d5b235b1f2ea80519e28b73" translate="yes" xml:space="preserve">
          <source>It is also possible to set or erase individual elements of an array:</source>
          <target state="translated">也可以设置或擦除一个数组中的单个元素。</target>
        </trans-unit>
        <trans-unit id="5d526954a8bce879648c1f8388f9dcd5c2cf78df" translate="yes" xml:space="preserve">
          <source>It is common to want to validate the the value provided for an option satisfies some criteria. For example, that it is a valid integer within a specific range. You can always do this after &lt;code&gt;argparse&lt;/code&gt; returns but you can also request that &lt;code&gt;argparse&lt;/code&gt; perform the validation by executing arbitrary fish script. To do so simply append an &lt;code&gt;!&lt;/code&gt; (exclamation-mark) then the fish script to be run. When that code is executed three vars will be defined:</source>
          <target state="translated">通常要验证为选项提供的值是否满足某些条件。例如，它是特定范围内的有效整数。您始终可以在 &lt;code&gt;argparse&lt;/code&gt; 返回之后执行此操作，但是您也可以通过执行任意fish脚本来请求 &lt;code&gt;argparse&lt;/code&gt; 执行验证。为此，只需附加一个 &lt;code&gt;!&lt;/code&gt; （感叹号），然后运行鱼脚本。当执行该代码时，将定义三个var：</target>
        </trans-unit>
        <trans-unit id="a71bcd2264c669eb00c671521098fb03d224a747" translate="yes" xml:space="preserve">
          <source>It is possible to directly create functions and variables in &lt;code&gt;config.fish&lt;/code&gt; file, using the commands shown above. For example:</source>
          <target state="translated">使用上面显示的命令，可以在 &lt;code&gt;config.fish&lt;/code&gt; 文件中直接创建函数和变量。例如：</target>
        </trans-unit>
        <trans-unit id="83c56d7ebd2ae7a42fad58d3fe21565a95290624" translate="yes" xml:space="preserve">
          <source>It is usually added inside of a conditional block such as an &lt;a href=&quot;#if&quot;&gt;if&lt;/a&gt; statement or a &lt;a href=&quot;#switch&quot;&gt;switch&lt;/a&gt; statement to conditionally stop the executing function and return to the caller, but it can also be used to specify the exit status of a function.</source>
          <target state="translated">通常将其添加到条件块（例如&lt;a href=&quot;#if&quot;&gt;if&lt;/a&gt;语句或&lt;a href=&quot;#switch&quot;&gt;switch&lt;/a&gt;语句）中，以有条件地停止执行函数并返回到调用方，但是它也可以用于指定函数的退出状态。</target>
        </trans-unit>
        <trans-unit id="2f4a9521ff238cfd8c93799d8d5f98df72dc4a0c" translate="yes" xml:space="preserve">
          <source>It is usually added inside of a conditional block such as an &lt;a href=&quot;if#cmd-if&quot;&gt;if&lt;/a&gt; statement or a &lt;a href=&quot;switch#cmd-switch&quot;&gt;switch&lt;/a&gt; statement to conditionally stop the executing function and return to the caller, but it can also be used to specify the exit status of a function.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cefa92c853442bbe4dd3a6ef0bacadea8c59bfbd" translate="yes" xml:space="preserve">
          <source>It is very important that function definition files only contain the definition for the specified function and nothing else. Otherwise, it is possible that autoloading a function files requires that the function already be loaded, which creates a circular dependency.</source>
          <target state="translated">非常重要的一点是,函数定义文件只包含指定函数的定义,而没有其他内容。否则,自动加载函数文件时,有可能要求已经加载了该函数,这就造成了循环依赖。</target>
        </trans-unit>
        <trans-unit id="ee7deea0a6c7d1bf1f12282d8e4f2d33d9fa574c" translate="yes" xml:space="preserve">
          <source>It knows about paths and options</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="13749347248c90340a66276ab0e48e071806f943" translate="yes" xml:space="preserve">
          <source>It knows about paths and options:</source>
          <target state="translated">它知道路径和选项。</target>
        </trans-unit>
        <trans-unit id="09881db18dec90e0ba8f4c151dbc729afee1f020" translate="yes" xml:space="preserve">
          <source>It will print &lt;code&gt;xa b c x&lt;/code&gt;, because the &quot;a b c &quot; is used in one piece. But if you do</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f51b747a62fc1665fa16726f0cc05a908bd9ced6" translate="yes" xml:space="preserve">
          <source>It will print &lt;code&gt;xa b c x&lt;/code&gt;. But if you do</source>
          <target state="translated">它将打印 &lt;code&gt;xa b c x&lt;/code&gt; 。但是如果你这样做</target>
        </trans-unit>
        <trans-unit id="784cf5b2d3ebe2dbad48daf3fd3356b85327650b" translate="yes" xml:space="preserve">
          <source>Iterating over a list of numbers can be done with &lt;code&gt;seq&lt;/code&gt;:</source>
          <target state="translated">可以使用 &lt;code&gt;seq&lt;/code&gt; 对数字列表进行迭代：</target>
        </trans-unit>
        <trans-unit id="1c2654e77c8a1d66520f0e811b49f2ee16ec66ef" translate="yes" xml:space="preserve">
          <source>Job control</source>
          <target state="translated">工作控制</target>
        </trans-unit>
        <trans-unit id="090e4272d6cb5283367e3c64d3f84a1ce2fa8aee" translate="yes" xml:space="preserve">
          <source>Jobs in the list of jobs are sent a hang-up signal when fish terminates, which usually causes the job to terminate; &lt;code&gt;disown&lt;/code&gt; allows these processes to continue regardless.</source>
          <target state="translated">当鱼终止时，作业列表中的作业会收到挂断信号，这通常会导致作业终止。 &lt;code&gt;disown&lt;/code&gt; 允许这些过程继续进行。</target>
        </trans-unit>
        <trans-unit id="544b65b506a2ffb69625eb6e4d7541dde083f7c6" translate="yes" xml:space="preserve">
          <source>Keep in mind that a defined variabled could also be empty, either by having no elements (if set like &lt;code&gt;set var&lt;/code&gt;) or only empty elements (if set like &lt;code&gt;set var &quot;&quot;&lt;/code&gt;). Read on for how to deal with those.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="32881a56b33d045dddcff4e97bad3c9a0cec51b4" translate="yes" xml:space="preserve">
          <source>Keep in mind that parameter expansion takes before expressions are evaluated. This can be very useful in order to perform calculations involving shell variables or the output of command substitutions, but it also means that parenthesis (&lt;code&gt;()&lt;/code&gt;) and the asterisk (&lt;code&gt;*&lt;/code&gt;) glob character have to be escaped or quoted. &lt;code&gt;x&lt;/code&gt; can also be used to denote multiplication, but it needs to be followed by whitespace to distinguish it from hexadecimal numbers.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="946c99cee0972cba5b6dec7f34cb20b94d3a2715" translate="yes" xml:space="preserve">
          <source>Keep in mind that parameter expansion takes before expressions are evaluated. This can be very useful in order to perform calculations involving shell variables or the output of command substitutions, but it also means that parenthesis and the asterisk glob character have to be escaped or quoted.</source>
          <target state="translated">请记住,参数扩展是在表达式被评估之前进行的,这对于执行涉及shell变量的计算或命令替换的输出非常有用。这对于执行涉及shell变量的计算或命令替换的输出非常有用,但这也意味着括号和星号glob字符必须被转义或引用。</target>
        </trans-unit>
        <trans-unit id="573891be377321acc4815f0519173b9b072d48fa" translate="yes" xml:space="preserve">
          <source>Key bindings may use &quot;modes&quot;, which mimics Vi's modal input behavior. The default mode is &quot;default&quot;, and every bind applies to a single mode. The mode can be viewed/changed with the &lt;code&gt;$fish_bind_mode&lt;/code&gt; variable.</source>
          <target state="translated">按键绑定可以使用&amp;ldquo;模式&amp;rdquo;，它模仿Vi的模式输入行为。默认模式为&amp;ldquo;默认&amp;rdquo;，并且每个绑定都适用于单个模式。可以使用 &lt;code&gt;$fish_bind_mode&lt;/code&gt; 变量查看/更改模式。</target>
        </trans-unit>
        <trans-unit id="b562f1a6d0c5684ca96b09426bc1669506a7f803" translate="yes" xml:space="preserve">
          <source>Learning fish</source>
          <target state="translated">学鱼</target>
        </trans-unit>
        <trans-unit id="3229609e15436ec51bcf00818a69a84dbc58a0c2" translate="yes" xml:space="preserve">
          <source>License</source>
          <target state="translated">License</target>
        </trans-unit>
        <trans-unit id="b5cf98d60edf53bb04a75b49fe8d89b334867632" translate="yes" xml:space="preserve">
          <source>Licensed under the GNU General Public License, version 2.</source>
          <target state="translated">根据GNU通用公共许可证,第2版授权。</target>
        </trans-unit>
        <trans-unit id="c93725e0a0f010017ca3b484abe1192273219e4e" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;sed&lt;/code&gt;s &lt;code&gt;s/&lt;/code&gt; command, &lt;code&gt;string replace&lt;/code&gt; still prints strings that don't match. &lt;code&gt;sed&lt;/code&gt;s &lt;code&gt;-n&lt;/code&gt; in combination with a &lt;code&gt;/p&lt;/code&gt; modifier or command is like &lt;code&gt;string replace -f&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f063dbdbbc3586964fed3651ab53c12631bbacd5" translate="yes" xml:space="preserve">
          <source>Like other shells, a dollar sign performs variable substitution:</source>
          <target state="translated">和其他壳一样,美元符号执行变量替换。</target>
        </trans-unit>
        <trans-unit id="1c10e83fba90f8ed8fbb793d35b29d018d6a8897" translate="yes" xml:space="preserve">
          <source>Like other shells, fish allows multiple commands either on separate lines or the same line.</source>
          <target state="translated">和其他贝壳一样,fish允许多个命令,既可以在不同的行上,也可以在同一行上。</target>
        </trans-unit>
        <trans-unit id="57c9502a7d7d48fd4a86b45fefb2b163491c3ae1" translate="yes" xml:space="preserve">
          <source>Lists</source>
          <target state="translated">Lists</target>
        </trans-unit>
        <trans-unit id="a51da1d245e2b299170419f02a7283c1cf86ec93" translate="yes" xml:space="preserve">
          <source>Lists adjacent to other lists or strings are expanded as &lt;a href=&quot;index#cartesian-product&quot;&gt;cartesian products&lt;/a&gt; unless quoted (see &lt;a href=&quot;index#expand-variable&quot;&gt;Variable expansion&lt;/a&gt;):</source>
          <target state="translated">除非引用，否则与其他列表或字符串相邻的列表将扩展为&lt;a href=&quot;index#cartesian-product&quot;&gt;笛卡尔乘积&lt;/a&gt;（请参见&lt;a href=&quot;index#expand-variable&quot;&gt;变量扩展&lt;/a&gt;）：</target>
        </trans-unit>
        <trans-unit id="e550372c446deb80cb7097a6530c7895ce489c98" translate="yes" xml:space="preserve">
          <source>Lists adjacent to other lists or strings are expanded as cartesian products:</source>
          <target state="translated">与其他列表或字符串相邻的列表被扩展为卡提斯产品。</target>
        </trans-unit>
        <trans-unit id="d036c0ec2ab378b452b8d2cead3a3ffcc191575a" translate="yes" xml:space="preserve">
          <source>Lists cannot contain other lists: there is no recursion. A variable is a list of strings, full stop.</source>
          <target state="translated">列表不能包含其他列表:不存在递归。变量是一个字符串的列表,句号。</target>
        </trans-unit>
        <trans-unit id="fd5bfe87f1fde5105869e708324f805855fff5fa" translate="yes" xml:space="preserve">
          <source>Local variables are specific to the current fish session, and associated with a specific block of commands, and is automatically erased when a specific block goes out of scope. A block of commands is a series of commands that begins with one of the commands &lt;code&gt;for&lt;/code&gt;, &lt;code&gt;while&lt;/code&gt; , &lt;code&gt;if&lt;/code&gt;, &lt;code&gt;function&lt;/code&gt;, &lt;code&gt;begin&lt;/code&gt; or &lt;code&gt;switch&lt;/code&gt;, and ends with the command &lt;code&gt;end&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8172703ebdf7bfc5b44da606bf9f833637212ffc" translate="yes" xml:space="preserve">
          <source>Locale variables</source>
          <target state="translated">本地化变量</target>
        </trans-unit>
        <trans-unit id="02720f9d38bf4f35e84ed5228689898bee176418" translate="yes" xml:space="preserve">
          <source>Loops</source>
          <target state="translated">Loops</target>
        </trans-unit>
        <trans-unit id="4e836fdc2572ab23d5dc8c36bd613ac6b0f82d63" translate="yes" xml:space="preserve">
          <source>Manual</source>
          <target state="translated">Manual</target>
        </trans-unit>
        <trans-unit id="f5f695dcfd95e469044fda4ad8dda41439800142" translate="yes" xml:space="preserve">
          <source>Many other shells have a large library of builtin commands. Most of these commands are also available as standalone commands, but have been implemented in the shell anyway. To avoid code duplication, and to avoid the confusion of subtly differing versions of the same command, &lt;code&gt;fish&lt;/code&gt; generally only implements builtins for actions which cannot be performed by a regular command.</source>
          <target state="translated">许多其他外壳程序都有大量的内置命令库。这些命令中的大多数也可以作为独立命令使用，但无论如何都已在Shell中实现。为了避免代码重复，并避免同一命令的不同版本混淆， &lt;code&gt;fish&lt;/code&gt; 通常只为那些常规命令无法执行的操作实现内置函数。</target>
        </trans-unit>
        <trans-unit id="508666f7961e41b7a23a46d49b1c68da21e0ab6e" translate="yes" xml:space="preserve">
          <source>Many terminals support 24-bit (i.e., true-color) color escape sequences. This includes modern xterm, Gnome Terminal, Konsole, and iTerm2. Fish attempts to detect such terminals through various means in &lt;code&gt;config.fish&lt;/code&gt; You can explicitly force that support via &lt;code&gt;set fish_term24bit 1&lt;/code&gt;.</source>
          <target state="translated">许多终端支持24位（即真彩色）颜色转义序列。这包括现代的xterm，Gnome Terminal，Konsole和iTerm2。Fish尝试通过 &lt;code&gt;config.fish&lt;/code&gt; 中的各种方式来检测此类终端。您可以通过 &lt;code&gt;set fish_term24bit 1&lt;/code&gt; 显式强制支持。</target>
        </trans-unit>
        <trans-unit id="ee9b4890d50f0c6b762d298b81c92845215e8616" translate="yes" xml:space="preserve">
          <source>Match Glob Examples</source>
          <target state="translated">匹配Glob的例子</target>
        </trans-unit>
        <trans-unit id="5d635a6434318430e0640768784677cf44ef96c2" translate="yes" xml:space="preserve">
          <source>Match Regex Examples</source>
          <target state="translated">匹配Regex示例</target>
        </trans-unit>
        <trans-unit id="282c4c424c8c8f802f09ed9069046a66c3e0e2df" translate="yes" xml:space="preserve">
          <source>Matching can be made case-insensitive with &lt;code&gt;--ignore-case&lt;/code&gt; or &lt;code&gt;-i&lt;/code&gt;.</source>
          <target state="translated">可以使用 &lt;code&gt;--ignore-case&lt;/code&gt; 或 &lt;code&gt;-i&lt;/code&gt; 使匹配不区分大小写。</target>
        </trans-unit>
        <trans-unit id="dfe39636b572a032956990221bea7522894ca013" translate="yes" xml:space="preserve">
          <source>Mismatched parenthesis</source>
          <target state="translated">错位的括号</target>
        </trans-unit>
        <trans-unit id="7d99cf687fc07cadeb9c71efe74a35ddac5120de" translate="yes" xml:space="preserve">
          <source>More on universal variables</source>
          <target state="translated">更多关于通用变量的信息</target>
        </trans-unit>
        <trans-unit id="021eea9c0dd8f610dc9e4cc089ecb63b53b1ea84" translate="yes" xml:space="preserve">
          <source>Most operations &lt;code&gt;string&lt;/code&gt; supports can also be done by external tools. Some of these include &lt;code&gt;grep&lt;/code&gt;, &lt;code&gt;sed&lt;/code&gt; and &lt;code&gt;cut&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="58541b1a51075d09123179aa5f9cebf36d81b9ff" translate="yes" xml:space="preserve">
          <source>Most programs allow you to suspend the program's execution and return control to &lt;code&gt;fish&lt;/code&gt; by pressing</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a6722727e636d961891415cd8a8813e266709c00" translate="yes" xml:space="preserve">
          <source>Most programs allow you to suspend the program's execution and return control to &lt;code&gt;fish&lt;/code&gt; by pressing &lt;em&gt;Control&lt;/em&gt;-&lt;b&gt;Z&lt;/b&gt; (also referred to as &lt;code&gt;^Z&lt;/code&gt;). Once back at the &lt;code&gt;fish&lt;/code&gt; commandline, you can start other programs and do anything you want. If you then want you can go back to the suspended command by using the &lt;a href=&quot;commands#fg&quot;&gt;&lt;code&gt;fg&lt;/code&gt;&lt;/a&gt; (foreground) command.</source>
          <target state="translated">大多数程序允许您通过按&lt;em&gt;Control&lt;/em&gt; - &lt;b&gt;Z&lt;/b&gt;（也称为 &lt;code&gt;^Z&lt;/code&gt; ）来暂停程序的执行并将控制权返回给 &lt;code&gt;fish&lt;/code&gt; 。回到 &lt;code&gt;fish&lt;/code&gt; 命令行后，您可以启动其他程序并执行您想要的任何操作。如果需要，可以使用&lt;a href=&quot;commands#fg&quot;&gt; &lt;code&gt;fg&lt;/code&gt; &lt;/a&gt;（前景）命令返回到暂停的命令。&lt;em&gt;&lt;/em&gt;&lt;b&gt;&lt;/b&gt;</target>
        </trans-unit>
        <trans-unit id="e36a3163fcb5b2ce91e7e62b6620c694486a5106" translate="yes" xml:space="preserve">
          <source>Most programs use three input/output (IO) streams, each represented by a number called a file descriptor (FD). These are:</source>
          <target state="translated">大多数程序使用三个输入/输出(IO)流,每个流用一个数字表示,称为文件描述符(FD)。这三个流是:</target>
        </trans-unit>
        <trans-unit id="c20818da60d954d40a5d602d6db10493b1f04e88" translate="yes" xml:space="preserve">
          <source>Most programs use three input/output &lt;a href=&quot;#id3&quot; id=&quot;id1&quot;&gt;[1]&lt;/a&gt; streams, each represented by a number called a file descriptor (FD). These are:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fbfe945f56b2d1285935393b0ba01a8e6e9fb533" translate="yes" xml:space="preserve">
          <source>Most subcommands accept a &lt;code&gt;-q&lt;/code&gt; or &lt;code&gt;--quiet&lt;/code&gt; switch, which suppresses the usual output but exits with the documented status.</source>
          <target state="translated">大多数子命令接受 &lt;code&gt;-q&lt;/code&gt; 或 &lt;code&gt;--quiet&lt;/code&gt; 开关，该开关禁止显示常规输出，但以记录的状态退出。</target>
        </trans-unit>
        <trans-unit id="9e4b95e5fe05cdb2e32c0be4dc38dcb8444a090a" translate="yes" xml:space="preserve">
          <source>Multiline editing</source>
          <target state="translated">多线编辑</target>
        </trans-unit>
        <trans-unit id="afac76fbf7acd07151be5bf2f1d66efbab839d8c" translate="yes" xml:space="preserve">
          <source>Multiple elements can be given in a &lt;a href=&quot;#expand-brace&quot;&gt;brace expansion&lt;/a&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="284d6c5f151a78ee571b877c91d2822cf913407f" translate="yes" xml:space="preserve">
          <source>Multiple lines are OK. Colors can be set via &lt;code&gt;set_color&lt;/code&gt;, passing it named ANSI colors, or hex RGB values:</source>
          <target state="translated">多行即可。可以通过 &lt;code&gt;set_color&lt;/code&gt; 设置颜色，将其传递为ANSI颜色或十六进制RGB值：</target>
        </trans-unit>
        <trans-unit id="b9313e4afc7e7087f2691f5390743aa11cb2045a" translate="yes" xml:space="preserve">
          <source>Multiple lines are not supported in &lt;code&gt;fish_right_prompt&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;fish_right_prompt&lt;/code&gt; 不支持多行。</target>
        </trans-unit>
        <trans-unit id="2ddaeb8bc8e45a0d0bc521306478830db49c61a1" translate="yes" xml:space="preserve">
          <source>My command (pkg-config) gives its output as a single long string?</source>
          <target state="translated">我的命令(pkg-config)的输出是一个长字符串?</target>
        </trans-unit>
        <trans-unit id="f9c6fa94b0cdb85c962b8db6aabb5f0166f8183a" translate="yes" xml:space="preserve">
          <source>NUL Delimited Examples</source>
          <target state="translated">NUL限制性例子</target>
        </trans-unit>
        <trans-unit id="2bcd7736113c6b4efdb7226bbeffaacd2a34dab2" translate="yes" xml:space="preserve">
          <source>Next, do the following (assuming fish was installed to /usr/local):</source>
          <target state="translated">接下来,执行以下操作(假设fish被安装到/usr/local)。</target>
        </trans-unit>
        <trans-unit id="e1c89d68ecad2be53a8cf7ccdf90c12f59e35a10" translate="yes" xml:space="preserve">
          <source>Non existing commands.</source>
          <target state="translated">非现有命令。</target>
        </trans-unit>
        <trans-unit id="76f3e65e8538fb0ceb8d456aa90c5d4ef9931a07" translate="yes" xml:space="preserve">
          <source>Normally when &lt;code&gt;fish&lt;/code&gt; starts a program, this program will be put in the foreground, meaning it will take control of the terminal and &lt;code&gt;fish&lt;/code&gt; will be stopped until the program finishes. Sometimes this is not desirable. For example, you may wish to start an application with a graphical user interface from the terminal, and then be able to continue using the shell. In such cases, there are several ways in which the user can change fish's behavior.</source>
          <target state="translated">通常，当 &lt;code&gt;fish&lt;/code&gt; 启动程序时，该程序将放在前台，这意味着它将控制终端，并且 &lt;code&gt;fish&lt;/code&gt; 将停止运行，直到程序完成。有时这是不可取的。例如，您可能希望从终端通过图形用户界面启动应用程序，然后能够继续使用外壳程序。在这种情况下，用户可以通过多种方式来改变鱼的行为。</target>
        </trans-unit>
        <trans-unit id="08c5c1ef76ceaf50dd2d8b6a05425f76eaec2b83" translate="yes" xml:space="preserve">
          <source>Note that &lt;code&gt;case&lt;/code&gt; does not fall through, and can accept multiple arguments or (quoted) wildcards.</source>
          <target state="translated">请注意， &lt;code&gt;case&lt;/code&gt; 不会遗漏，并且可以接受多个参数或（引用的）通配符。</target>
        </trans-unit>
        <trans-unit id="ade5bb175b9c01fc56dcd04dfd8820b5d87cfdc6" translate="yes" xml:space="preserve">
          <source>Note that all colors can also have a corresponding &lt;code&gt;_done&lt;/code&gt; color. For example, the contents of &lt;code&gt;$__fish_git_prompt_color_upstream_done&lt;/code&gt; is printed right _after_ the upstream.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="daafcf66550c6e75c5e67349c16e61c50e7a4d2f" translate="yes" xml:space="preserve">
          <source>Note that array indices start at 1 in &lt;code&gt;fish&lt;/code&gt;, not 0, as is more common in other languages. This is because many common Unix tools like &lt;code&gt;seq&lt;/code&gt; are more suited to such use. An invalid index is silently ignored resulting in no value being substituted (not an empty string).</source>
          <target state="translated">请注意，在 &lt;code&gt;fish&lt;/code&gt; 中，数组索引从1开始，而不是0，这在其他语言中更为常见。这是因为许多通用的Unix工具（如 &lt;code&gt;seq&lt;/code&gt; )更适合这种用法。无效索引将被静默忽略，导致不替换任何值（不是空字符串）。</target>
        </trans-unit>
        <trans-unit id="75e8dbe710958336c22801c9b7351ebb45c4f694" translate="yes" xml:space="preserve">
          <source>Note that because fish loads functions on-demand, saved functions will not function as &lt;a href=&quot;../index#event&quot;&gt;event handlers&lt;/a&gt; until they are run or sourced otherwise. To activate an event handler for every new shell, add the function to your &lt;a href=&quot;../index#initialization&quot;&gt;shell initialization file&lt;/a&gt; instead of using &lt;code&gt;funcsave&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a0707e5e6cd48555094dd0ce06f95a929ab9ee48" translate="yes" xml:space="preserve">
          <source>Note that because fish loads functions on-demand, saved functions will not function as &lt;a href=&quot;index#event&quot;&gt;event handlers&lt;/a&gt; until they are run or sourced otherwise. To activate an event handler for every new shell, add the function to your &lt;a href=&quot;index#initialization&quot;&gt;shell initialization file&lt;/a&gt; instead of using &lt;code&gt;funcsave&lt;/code&gt;.</source>
          <target state="translated">请注意，由于鱼加载函数按需提供功能，因此保存的函数只有在运行或以其他方式获取之前，才能用作&lt;a href=&quot;index#event&quot;&gt;事件处理程序&lt;/a&gt;。要为每个新外壳激活事件处理程序，请将函数添加到&lt;a href=&quot;index#initialization&quot;&gt;外壳初始化文件中，&lt;/a&gt;而不要使用 &lt;code&gt;funcsave&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="d05600b5a2c4216ed0373e93b0ae5b8dde601d3a" translate="yes" xml:space="preserve">
          <source>Note that command substitutions in a case statement will be evaluated even if its body is not taken. All substitutions, including command substitutions, must be performed before the value can be compared against the parameter.</source>
          <target state="translated">需要注意的是,即使case语句中的命令替换没有被采纳,也会被评估。所有的替换,包括命令替换,都必须在值与参数比较之前进行。</target>
        </trans-unit>
        <trans-unit id="27acedfb629019bcb72c1aaa58829703ce6d6432" translate="yes" xml:space="preserve">
          <source>Note that conversion may fail, e.g. &quot;102.234&quot; will not losslessly convert to an integer, causing printf to print an error.</source>
          <target state="translated">请注意,转换可能会失败,例如 &quot;102.234 &quot;不能无损转换为整数,导致printf打印错误。</target>
        </trans-unit>
        <trans-unit id="8107914840367cc99db95db5e903f636fb93ac38" translate="yes" xml:space="preserve">
          <source>Note that events are only received from the current fish process as there is no way to send events from one fish process to another.</source>
          <target state="translated">请注意,事件只能从当前鱼进程接收,因为没有办法从一个鱼进程向另一个鱼进程发送事件。</target>
        </trans-unit>
        <trans-unit id="b604d17300bf8871e1df935d8ccab61e77f2c2e6" translate="yes" xml:space="preserve">
          <source>Note that events are only sent to the current fish process as there is no way to send events from one fish process to another.</source>
          <target state="translated">请注意,事件只发送到当前鱼进程,因为没有办法将事件从一个鱼进程发送到另一个鱼进程。</target>
        </trans-unit>
        <trans-unit id="1816c418ab7796b893d641bb9d4e996647340b50" translate="yes" xml:space="preserve">
          <source>Note that fish does not fall through on case statements. Only the first matching case is executed.</source>
          <target state="translated">请注意,鱼不落在case语句上。只有第一个匹配的case才会被执行。</target>
        </trans-unit>
        <trans-unit id="dea20fe7204b37a954eb8c5b71576a69b5e9c5a0" translate="yes" xml:space="preserve">
          <source>Note that fish has a default titlebar message, which will be used if the fish_title function is undefined. So simply unsetting the fish_title function will not work.</source>
          <target state="translated">请注意,fish有一个默认的titlebar消息,如果fish_title函数未定义,则会使用这个消息。所以简单地取消设置fish_title函数是行不通的。</target>
        </trans-unit>
        <trans-unit id="216dd486d99355c7f2e848a5066c6390232ae830" translate="yes" xml:space="preserve">
          <source>Note that for backwards compatibility each subcommand can also be specified as a long option. For example, rather than &lt;code&gt;history search&lt;/code&gt; you can type &lt;code&gt;history --search&lt;/code&gt;. Those long options are deprecated and will be removed in a future release.</source>
          <target state="translated">注意，为了向后兼容，每个子命令也可以指定为long选项。例如，您可以输入 &lt;code&gt;history --search&lt;/code&gt; 而不是 &lt;code&gt;history search&lt;/code&gt; 。这些长选项已被弃用，并将在以后的版本中删除。</target>
        </trans-unit>
        <trans-unit id="3b22090df2d664d4741cb8fa8f02ce46c5b511d7" translate="yes" xml:space="preserve">
          <source>Note that for most commands, if any wildcard fails to expand, the command is not executed, &lt;a href=&quot;#variables-status&quot;&gt;$status&lt;/a&gt; is set to nonzero, and a warning is printed. This behavior is consistent with setting &lt;code&gt;shopt -s failglob&lt;/code&gt; in bash. There are exactly 4 exceptions, namely &lt;a href=&quot;cmds/set#cmd-set&quot;&gt;set&lt;/a&gt;, overriding variables in &lt;a href=&quot;#variables-override&quot;&gt;overrides&lt;/a&gt;, &lt;a href=&quot;cmds/count#cmd-count&quot;&gt;count&lt;/a&gt; and &lt;a href=&quot;cmds/for#cmd-for&quot;&gt;for&lt;/a&gt;. Their globs are permitted to expand to zero arguments, as with &lt;code&gt;shopt -s nullglob&lt;/code&gt; in bash.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c97f265eeb04a552b0a053d1fe6fd39164111e41" translate="yes" xml:space="preserve">
          <source>Note that for most commands, if any wildcard fails to expand, the command is not executed, &lt;a href=&quot;#variables-status&quot;&gt;&lt;code&gt;$status&lt;/code&gt;&lt;/a&gt; is set to nonzero, and a warning is printed. This behavior is consistent with setting &lt;code&gt;shopt -s failglob&lt;/code&gt; in bash. There are exactly 3 exceptions, namely &lt;a href=&quot;commands#set&quot;&gt;&lt;code&gt;set&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;commands#count&quot;&gt;&lt;code&gt;count&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;commands#for&quot;&gt;&lt;code&gt;for&lt;/code&gt;&lt;/a&gt;. Their globs are permitted to expand to zero arguments, as with &lt;code&gt;shopt -s nullglob&lt;/code&gt; in bash.</source>
          <target state="translated">请注意，对于大多数命令，如果任何通配符扩展失败，该命令将不执行，&lt;a href=&quot;#variables-status&quot;&gt; &lt;code&gt;$status&lt;/code&gt; &lt;/a&gt;设置为非零，并显示警告。此行为与在bash中设置 &lt;code&gt;shopt -s failglob&lt;/code&gt; 一致。正好有3个例外，即&lt;a href=&quot;commands#set&quot;&gt; &lt;code&gt;set&lt;/code&gt; &lt;/a&gt;，&lt;a href=&quot;commands#count&quot;&gt; &lt;code&gt;count&lt;/code&gt; &lt;/a&gt;和&lt;a href=&quot;commands#for&quot;&gt; &lt;code&gt;for&lt;/code&gt; &lt;/a&gt;。像bash中的 &lt;code&gt;shopt -s nullglob&lt;/code&gt; 一样，它们的glob允许扩展为零参数。</target>
        </trans-unit>
        <trans-unit id="179b535385e9bcd6de7a6f886e309b106b43e8dd" translate="yes" xml:space="preserve">
          <source>Note that functions cannot be started in the background. Functions that are stopped and then restarted in the background using the &lt;code&gt;bg&lt;/code&gt; command will not execute correctly.</source>
          <target state="translated">请注意，无法在后台启动功能。使用 &lt;code&gt;bg&lt;/code&gt; 命令在后台停止然后重新启动的功能将无法正确执行。</target>
        </trans-unit>
        <trans-unit id="d0299abe7df714002513b6c5ca5f854adee2c02d" translate="yes" xml:space="preserve">
          <source>Note that list indices start at 1 in &lt;code&gt;fish&lt;/code&gt;, not 0, as is more common in other languages. This is because many common Unix tools like &lt;code&gt;seq&lt;/code&gt; are more suited to such use. An invalid index is silently ignored resulting in no value being substituted (not an empty string).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="56578f519a03e2785432ffc83f432b088789cd11" translate="yes" xml:space="preserve">
          <source>Note that most builtin commands display their help in the terminal when given the &lt;code&gt;--help&lt;/code&gt; option.</source>
          <target state="translated">请注意，给定 &lt;code&gt;--help&lt;/code&gt; 选项时，大多数内置命令会在终端中显示其帮助。</target>
        </trans-unit>
        <trans-unit id="052c493b4f8ae8b6935593bcf58c5ec984ab99f3" translate="yes" xml:space="preserve">
          <source>Note that not all these limits are available in all operating systems.</source>
          <target state="translated">请注意,并非所有的操作系统都有这些限制。</target>
        </trans-unit>
        <trans-unit id="fd0759c196f448d14f3c2205ba14675a88db1daf" translate="yes" xml:space="preserve">
          <source>Note that parentheses will usually require escaping with &lt;code&gt;\(&lt;/code&gt; to avoid being interpreted as a command substitution.</source>
          <target state="translated">请注意，括号通常需要使用 &lt;code&gt;\(&lt;/code&gt; 进行转义，以避免被解释为命令替换。</target>
        </trans-unit>
        <trans-unit id="188395866987d29873c39e6fea9524d72368f195" translate="yes" xml:space="preserve">
          <source>Note that seeding the engine will NOT give the same result across different systems.</source>
          <target state="translated">请注意,在不同的系统中,播种发动机的结果是不一样的。</target>
        </trans-unit>
        <trans-unit id="b65cb077ea76993a41de3fb713b42e0fed91a42b" translate="yes" xml:space="preserve">
          <source>Note that symbolic masks currently do not work as intended.</source>
          <target state="translated">需要注意的是,目前符号掩码并不能如期使用。</target>
        </trans-unit>
        <trans-unit id="bef2f79c5ca0fefc2538b283ecde5e201f174c69" translate="yes" xml:space="preserve">
          <source>Note that the &lt;code&gt;cd&lt;/code&gt; command limits directory history to the 25 most recently visited directories. The history is stored in the &lt;code&gt;$dirprev&lt;/code&gt; and &lt;code&gt;$dirnext&lt;/code&gt; variables which this command manipulates.</source>
          <target state="translated">请注意， &lt;code&gt;cd&lt;/code&gt; 命令将目录历史记录限制为最近访问的25个目录。历史记录存储在此命令操作的 &lt;code&gt;$dirprev&lt;/code&gt; 和 &lt;code&gt;$dirnext&lt;/code&gt; 变量中。</target>
        </trans-unit>
        <trans-unit id="10a8eb5ef4bfcbb0fbb38b2c1dbc89e74a6c7106" translate="yes" xml:space="preserve">
          <source>Note that the &lt;code&gt;cd&lt;/code&gt; command limits directory history to the 25 most recently visited directories. The history is stored in the &lt;code&gt;$dirprev&lt;/code&gt; and &lt;code&gt;$dirnext&lt;/code&gt; variables which this command manipulates. If you make those universal variables your &lt;code&gt;cd&lt;/code&gt; history is shared among all fish instances.</source>
          <target state="translated">请注意， &lt;code&gt;cd&lt;/code&gt; 命令将目录历史记录限制为最近访问的25个目录。历史记录存储在此命令操作的 &lt;code&gt;$dirprev&lt;/code&gt; 和 &lt;code&gt;$dirnext&lt;/code&gt; 变量中。如果您使这些通用变量，您的 &lt;code&gt;cd&lt;/code&gt; 历史记录将在所有fish实例之间共享。</target>
        </trans-unit>
        <trans-unit id="9b4bda95d407194baa99d73ed10ab09fd4118640" translate="yes" xml:space="preserve">
          <source>Note that the &lt;code&gt;cd&lt;/code&gt; command limits directory history to the 25 most recently visited directories. The history is stored in the &lt;code&gt;$dirprev&lt;/code&gt; and &lt;code&gt;$dirnext&lt;/code&gt; variables.</source>
          <target state="translated">请注意， &lt;code&gt;cd&lt;/code&gt; 命令将目录历史记录限制为最近访问的25个目录。历史记录存储在 &lt;code&gt;$dirprev&lt;/code&gt; 和 &lt;code&gt;$dirnext&lt;/code&gt; 变量中。</target>
        </trans-unit>
        <trans-unit id="468f475ce4540aa6d4ffc053e8efd0e42aba5839" translate="yes" xml:space="preserve">
          <source>Note that the shell will attempt to change directory without requiring &lt;code&gt;cd&lt;/code&gt; if the name of a directory is provided (starting with &lt;code&gt;.&lt;/code&gt;, &lt;code&gt;/&lt;/code&gt; or &lt;code&gt;~&lt;/code&gt;, or ending with &lt;code&gt;/&lt;/code&gt;).</source>
          <target state="translated">请注意，如果提供了目录名（以 &lt;code&gt;.&lt;/code&gt; ， &lt;code&gt;/&lt;/code&gt; 或 &lt;code&gt;~&lt;/code&gt; 开头或以 &lt;code&gt;/&lt;/code&gt; 结束），则Shell将尝试在不要求 &lt;code&gt;cd&lt;/code&gt; 的情况下更改目录。</target>
        </trans-unit>
        <trans-unit id="4a1ad39e7a025d924c676894892c33d43f516843" translate="yes" xml:space="preserve">
          <source>Note that there are three environment variables that are automatically split on colons to become lists when fish starts running: &lt;code&gt;PATH&lt;/code&gt;, &lt;code&gt;CDPATH&lt;/code&gt;, &lt;code&gt;MANPATH&lt;/code&gt;. Conversely, they are joined on colons when exported to subcommands. All other environment variables (e.g., &lt;code&gt;LD_LIBRARY_PATH&lt;/code&gt;) which have similar semantics are treated as simple strings.</source>
          <target state="translated">请注意，当fish开始运行时，有三个环境变量会自动在冒号上分割成多个列表： &lt;code&gt;PATH&lt;/code&gt; ， &lt;code&gt;CDPATH&lt;/code&gt; 和 &lt;code&gt;MANPATH&lt;/code&gt; 。相反，当导出到子命令时，它们在冒号上连接。具有相似语义的所有其他环境变量（例如 &lt;code&gt;LD_LIBRARY_PATH&lt;/code&gt; ）被视为简单字符串。</target>
        </trans-unit>
        <trans-unit id="bf45589c3e3c3f4d264bc9f93c56158f4afde11c" translate="yes" xml:space="preserve">
          <source>Note that this function will not be used if a command by this name exists (which is the case on macOS or Haiku).</source>
          <target state="translated">请注意,如果存在这个名称的命令,这个函数将不会被使用(在macOS或Haiku上就是这样)。</target>
        </trans-unit>
        <trans-unit id="5bf381b343429f3c3b6b07cc6b6f0a80c7987163" translate="yes" xml:space="preserve">
          <source>Note that without the quotes or braces, fish will try to expand a variable called &lt;code&gt;$WORDs&lt;/code&gt;, which may not exist.</source>
          <target state="translated">请注意，没有引号或花括号，fish将尝试扩展名为 &lt;code&gt;$WORDs&lt;/code&gt; 的变量，该变量可能不存在。</target>
        </trans-unit>
        <trans-unit id="655206648d0dc7faa21d15bc23b20c851a2e5079" translate="yes" xml:space="preserve">
          <source>Note that ~/.config/fish/config.fish is sourced &lt;em&gt;after&lt;/em&gt; the snippets. This is so users can copy snippets and override some of their behavior.</source>
          <target state="translated">请注意，〜/ .config / fish / config.fish是&lt;em&gt;在&lt;/em&gt;摘录&lt;em&gt;之后&lt;/em&gt;获得的。这样，用户可以复制代码片段并覆盖其某些行为。</target>
        </trans-unit>
        <trans-unit id="ce33996fd64092e1167cf6f8d31deb6827e1e03e" translate="yes" xml:space="preserve">
          <source>Note that ~/.config/fish/config.fish is sourced _after_ the snippets. This is so users can copy snippets and override some of their behavior.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e4d54cdd421c0c07715137d8eb13776063e53178" translate="yes" xml:space="preserve">
          <source>Note that, like &lt;code&gt;wc -l&lt;/code&gt;, reading from stdin counts newlines, so &lt;code&gt;echo -n foo | count&lt;/code&gt; will print 0.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e2ce3cf51c29175bd1e3054b41cb66e679925023" translate="yes" xml:space="preserve">
          <source>Note that, like GNU tools and most of fish's builtins, &lt;code&gt;contains&lt;/code&gt; interprets all arguments starting with a &lt;code&gt;-&lt;/code&gt; as options to contains, until it reaches an argument that is &lt;code&gt;--&lt;/code&gt; (two dashes). See the examples below.</source>
          <target state="translated">请注意，就像GNU工具和大多数fish的内置函数一样， &lt;code&gt;contains&lt;/code&gt; 会将以 &lt;code&gt;-&lt;/code&gt; 开头的所有参数解释为contains的选项，直到到达参数 &lt;code&gt;--&lt;/code&gt; （两个破折号）。请参阅下面的示例。</target>
        </trans-unit>
        <trans-unit id="6acc4ccc246684cfa1057fb20ffd8a8f35f63d65" translate="yes" xml:space="preserve">
          <source>Note that, unlike other shells, fish will first set the variable and then perform other expansions on the line, so:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9cd1c04aa664d29ef9d4114fed80a20478f9f7c6" translate="yes" xml:space="preserve">
          <source>Note: At the moment the debug prompt is identical to your normal fish prompt. This can make it hard to recognize that you've entered a debug session. Issue 1310 is open to improve this.</source>
          <target state="translated">注意:此刻的调试提示和你正常的鱼提示是一样的。这可能会让人很难识别你已经进入了调试环节。问题1310是开放的,以改善这个问题。</target>
        </trans-unit>
        <trans-unit id="2acd9175970aa8fc3b9936ce32e6e5f5129257b5" translate="yes" xml:space="preserve">
          <source>Note: This event will be emitted even if the command is invalid. The commandline parameter includes the entire commandline verbatim, and may potentially include newlines.</source>
          <target state="translated">注意:即使命令无效,该事件也会被发出。命令行参数包括整个命令行的内容,并可能包括换行符。</target>
        </trans-unit>
        <trans-unit id="4a71ed28fa070fd5d0f2ba5d9d8b94e51646208b" translate="yes" xml:space="preserve">
          <source>Note: fish 2.2.0 and earlier used a default of 10 milliseconds, and provided no way to configure it. That effectively made it impossible to use escape as a meta key.</source>
          <target state="translated">注:fish 2.2.0和更早的版本使用了10毫秒的默认值,并且没有提供配置的方法。这实际上使得它不可能使用转义作为元键。</target>
        </trans-unit>
        <trans-unit id="70440046a3dc2e079f23ee1c57dfa76669b732aa" translate="yes" xml:space="preserve">
          <source>Notes</source>
          <target state="translated">Notes</target>
        </trans-unit>
        <trans-unit id="03c757f6b7891744a49627d17ec9ed791ed69d26" translate="yes" xml:space="preserve">
          <source>Nothing if the flag is a boolean that takes no argument or is an implicit int flag, else</source>
          <target state="translated">如果flag是一个不需要参数的布尔值,或者是一个隐含的int标志,那么什么都不需要,否则</target>
        </trans-unit>
        <trans-unit id="7e9e91cddb4e1bbe3d96c5cfb7bcf12796b0c7e0" translate="yes" xml:space="preserve">
          <source>Now hub inherits all of the completions from git. Note this can also be specified in a function declaration.</source>
          <target state="translated">现在hub继承了git的所有完成。注意这也可以在函数声明中指定。</target>
        </trans-unit>
        <trans-unit id="377c6369b04b17877206baabd99b8340d2c1712d" translate="yes" xml:space="preserve">
          <source>Now in another shell:</source>
          <target state="translated">现在在另一个壳里。</target>
        </trans-unit>
        <trans-unit id="d5aead3c087eb1218d9c5de157a34a40ad6e6161" translate="yes" xml:space="preserve">
          <source>Numerical comparisons will simply fail if one of the operands is not a number:</source>
          <target state="translated">如果操作数之一不是数字,数字比较就会失败。</target>
        </trans-unit>
        <trans-unit id="aeeb9e7d5766fc544e9c4260b0a26961443229c2" translate="yes" xml:space="preserve">
          <source>Oh My Fish</source>
          <target state="translated">哦,我的鱼</target>
        </trans-unit>
        <trans-unit id="c168b84a253f1a9380f35914e43b4459d37046ec" translate="yes" xml:space="preserve">
          <source>Old style long options, like '&lt;code&gt;-Wall&lt;/code&gt;'. Old style long options can be more than one character long, are preceded by a single hyphen and may not be grouped together. Option arguments are specified in the following parameter ('&lt;code&gt;-ao null&lt;/code&gt;').</source>
          <target state="translated">旧样式的长选项，例如' &lt;code&gt;-Wall&lt;/code&gt; '。旧样式的长选项可以超过一个字符长，并以单个连字符开头，并且不能组合在一起。选项参数在以下参数中指定（' &lt;code&gt;-ao null&lt;/code&gt; '）。</target>
        </trans-unit>
        <trans-unit id="b9e42bb3078b6143675803071b50a1f886f1fddf" translate="yes" xml:space="preserve">
          <source>On startup, Fish evaluates a number of configuration files, which can be used to control the behavior of the shell. The location of these configuration variables is controlled by a number of environment variables, and their default or usual location is given below.</source>
          <target state="translated">在启动时,Fish会评估一些配置文件,这些文件可以用来控制shell的行为。这些配置变量的位置由一些环境变量控制,它们的默认或通常位置如下。</target>
        </trans-unit>
        <trans-unit id="24b148830736c9caeaaf006e4d059c7b395c5a53" translate="yes" xml:space="preserve">
          <source>On startup, Fish evaluates a number of configuration files, which can be used to control the behavior of the shell. The location of these is controlled by a number of environment variables, and their default or usual location is given below.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="53732b6ec19e859a0b3473ce5240c51bbdc7db63" translate="yes" xml:space="preserve">
          <source>On systems that supports this feature, jobs will print the CPU usage of each job since the last command was executed. The CPU usage is expressed as a percentage of full CPU activity. Note that on multiprocessor systems, the total activity may be more than 100%.</source>
          <target state="translated">在支持此功能的系统中,job 将打印自上一条命令执行后每个作业的 CPU 使用情况。CPU使用量以CPU活动总量的百分比表示。请注意,在多处理器系统上,总活动量可能超过100%。</target>
        </trans-unit>
        <trans-unit id="4b94b1b00f4f9d7408bbdbe697afeca3ea6a2231" translate="yes" xml:space="preserve">
          <source>Once fish has been installed, open a terminal. If fish is not the default shell:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="18125968ef24a12c2f2c9db564d4fb936f8a352f" translate="yes" xml:space="preserve">
          <source>Once installed, just type in &lt;code&gt;fish&lt;/code&gt; into your current shell to try it out!</source>
          <target state="translated">安装完成后，只需在当前的shell中键入 &lt;code&gt;fish&lt;/code&gt; 即可试用！</target>
        </trans-unit>
        <trans-unit id="f9801d214429ef9429f41d9ccbf53d1f50cc2cf7" translate="yes" xml:space="preserve">
          <source>One of the most common uses for functions is to slightly alter the behavior of an already existing command. For example, one might want to redefine the &lt;code&gt;ls&lt;/code&gt; command to display colors. The switch for turning on colors on GNU systems is '&lt;code&gt;--color=auto&lt;/code&gt;'. An alias, or wrapper, around &lt;code&gt;ls&lt;/code&gt; might look like this:</source>
          <target state="translated">函数最常见的用途之一是稍微改变一个已经存在的命令的行为。例如，可能要重新定义 &lt;code&gt;ls&lt;/code&gt; 命令以显示颜色。在GNU系统上打开颜色的开关是' &lt;code&gt;--color=auto&lt;/code&gt; '。 &lt;code&gt;ls&lt;/code&gt; 周围的别名或包装可能看起来像这样：</target>
        </trans-unit>
        <trans-unit id="c6ed72e8734163b3555d72a22a65213a63ac427a" translate="yes" xml:space="preserve">
          <source>Only one function's description can be changed in a single invocation of &lt;code&gt;functions -d&lt;/code&gt;.</source>
          <target state="translated">一次调用 &lt;code&gt;functions -d&lt;/code&gt; 只能更改一个功能的描述。</target>
        </trans-unit>
        <trans-unit id="744f6b1ea6029a4d03e486aa51d71e6cdfe3a24a" translate="yes" xml:space="preserve">
          <source>Only part of the output can be used, see &lt;a href=&quot;#expand-index-range&quot;&gt;index range expansion&lt;/a&gt; for details.</source>
          <target state="translated">只能使用部分输出，有关详细信息，请参见&lt;a href=&quot;#expand-index-range&quot;&gt;索引范围扩展&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="e90414358dbfff0a68e4eb5d68a16978cf197d5a" translate="yes" xml:space="preserve">
          <source>Operators</source>
          <target state="translated">Operators</target>
        </trans-unit>
        <trans-unit id="e52f4d4c344dadad003e702bffb9e5e28cdc4a21" translate="yes" xml:space="preserve">
          <source>Operators for files and directories</source>
          <target state="translated">文件和目录的操作符</target>
        </trans-unit>
        <trans-unit id="f27bb0ff136bb8c7c7f1daaac32275d53bfd219d" translate="yes" xml:space="preserve">
          <source>Operators for text strings</source>
          <target state="translated">文本字符串的操作符</target>
        </trans-unit>
        <trans-unit id="a47a505eb7af733ce0bd8e9777ac0dd7490e55d7" translate="yes" xml:space="preserve">
          <source>Operators to combine expressions</source>
          <target state="translated">组合表达式的操作符</target>
        </trans-unit>
        <trans-unit id="7fa47fe3927b334a484c669114b525abc6a94112" translate="yes" xml:space="preserve">
          <source>Operators to compare and examine numbers</source>
          <target state="translated">操作人员比较和检查数字</target>
        </trans-unit>
        <trans-unit id="d4829f651a76eb5aa9c3d27e3534a7c418cd1fc9" translate="yes" xml:space="preserve">
          <source>Option Specifications</source>
          <target state="translated">选项规格</target>
        </trans-unit>
        <trans-unit id="7a482cf8fb70076ae04055b4c030c65bed8421d9" translate="yes" xml:space="preserve">
          <source>Optionally a &lt;code&gt;!&lt;/code&gt; followed by fish script to validate the value. Typically this will be a function to run. If the exit status is zero the value for the flag is valid. If non-zero the value is invalid. Any error messages should be written to stdout (not stderr). See the section on &lt;a href=&quot;#flag-value-validation&quot;&gt;Flag Value Validation&lt;/a&gt; for more information.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6f38993c6d0d5cf791252a01f84f61ce28090cdc" translate="yes" xml:space="preserve">
          <source>Optionally a &lt;code&gt;!&lt;/code&gt; followed by fish script to validate the value. Typically this will be a function to run. If the return status is zero the value for the flag is valid. If non-zero the value is invalid. Any error messages should be written to stdout (not stderr). See the section on &lt;a href=&quot;#arparse-validation&quot;&gt;Flag Value Validation&lt;/a&gt; for more information.</source>
          <target state="translated">（可选）一个 &lt;code&gt;!&lt;/code&gt; 然后是鱼脚本以验证值。通常，这将是一个要运行的功能。如果返回状态为零，则该标志的值有效。如果非零，则该值无效。任何错误消息都应写入stdout（而不是stderr）。有关更多信息，请参见&lt;a href=&quot;#arparse-validation&quot;&gt;标志值验证&lt;/a&gt;部分。</target>
        </trans-unit>
        <trans-unit id="6bf5da9c080bee3a8142586c412aa39971137eee" translate="yes" xml:space="preserve">
          <source>Options</source>
          <target state="translated">Options</target>
        </trans-unit>
        <trans-unit id="3b7277ba5f0f20e70f1f91d410bbc35500c732a7" translate="yes" xml:space="preserve">
          <source>Or if you just want to do one command in case the first succeeded or failed, use &lt;code&gt;and&lt;/code&gt; or &lt;code&gt;or&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="14be7a9cc678ff8d2acac3f8d22e39b9c8a4df32" translate="yes" xml:space="preserve">
          <source>Other features</source>
          <target state="translated">其他特点</target>
        </trans-unit>
        <trans-unit id="853554e3756e54eab25e2cb9c5b84f13d2534ef7" translate="yes" xml:space="preserve">
          <source>Other help pages</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8064e7b7ad17f0248f35efb48f0f1d68ee39d15e" translate="yes" xml:space="preserve">
          <source>Other shells such as bash and zsh use a variable named &lt;code&gt;HISTFILE&lt;/code&gt; for a similar purpose. Fish uses a different name to avoid conflicts and signal that the behavior is different (session name instead of a file path). Also, if you set the var to anything other than &lt;code&gt;fish&lt;/code&gt; or &lt;code&gt;default&lt;/code&gt; it will inhibit importing the bash history. That's because the most common use case for this feature is to avoid leaking private or sensitive history when giving a presentation.</source>
          <target state="translated">其他shell（例如bash和zsh）出于类似目的使用名为 &lt;code&gt;HISTFILE&lt;/code&gt; 的变量。 Fish使用不同的名称来避免冲突并发出不同的信号（会话名称而不是文件路径）。另外，如果将var设置为 &lt;code&gt;fish&lt;/code&gt; 或 &lt;code&gt;default&lt;/code&gt; 以外的其他值，则将禁止导入bash历史记录。这是因为此功能最常见的用例是避免在进行演示时泄露私人或敏感的历史记录。</target>
        </trans-unit>
        <trans-unit id="ca76df4fa26ca40f2ebdbbcc9b7ac947b4b17597" translate="yes" xml:space="preserve">
          <source>Other shells, such as zsh, provide a rich glob syntax for restricting the files matched by globs. For example, &lt;code&gt;**(.)&lt;/code&gt;, to only match regular files. Fish prefers to defer such features to programs, such as &lt;code&gt;find&lt;/code&gt;, rather than reinventing the wheel. Thus, if you want to limit the wildcard expansion to just regular files the fish approach is to define and use a function. For example,</source>
          <target state="translated">其他外壳程序（例如zsh）提供了丰富的glob语法，用于限制与glob匹配的文件。例如， &lt;code&gt;**(.)&lt;/code&gt; 仅匹配常规文件。Fish宁愿将此类功能推迟到诸如 &lt;code&gt;find&lt;/code&gt; 之类的程序中，而不是重新发明轮子。因此，如果要将通配符扩展限制为仅常规文件，则fish方法是定义和使用函数。例如，</target>
        </trans-unit>
        <trans-unit id="14a838bcf64937317892425e5ab22ef3642359f4" translate="yes" xml:space="preserve">
          <source>Other variables, like &lt;code&gt;$PATH&lt;/code&gt;, really do have multiple values. During variable expansion, the variable expands to become multiple arguments:</source>
          <target state="translated">其他变量，例如 &lt;code&gt;$PATH&lt;/code&gt; ，确实具有多个值。在变量扩展期间，变量扩展为多个参数：</target>
        </trans-unit>
        <trans-unit id="b5d3d0ee6275d093a0cfd5679e24b1abd3556dc6" translate="yes" xml:space="preserve">
          <source>Otherwise, by default, the variable will not be exported.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="adcbabbfd6290e1df478b0d2b37c0beb20ff4767" translate="yes" xml:space="preserve">
          <source>Outputting multiple lines is not supported in &lt;code&gt;fish_mode_prompt&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;fish_mode_prompt&lt;/code&gt; 不支持输出多行。</target>
        </trans-unit>
        <trans-unit id="5b8012177cdea50be6a01e8c45312b388ccc9c7a" translate="yes" xml:space="preserve">
          <source>Outside of double quotes, variables will expand to as many arguments as they have elements. That means an empty list will expand to nothing, a variable with one element will expand to that element, and a variable with multiple elements will expand to each of those elements separately.</source>
          <target state="translated">在双引号之外,变量将扩展到有多少个参数就有多少个元素。这意味着一个空列表将扩展为无,一个有一个元素的变量将扩展为该元素,而一个有多个元素的变量将分别扩展为这些元素。</target>
        </trans-unit>
        <trans-unit id="701d31f2af951617e24913040bb289cccf377776" translate="yes" xml:space="preserve">
          <source>Overriding variables for a single command</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b7cda6a843d651b6992452486c962d590a3cb164" translate="yes" xml:space="preserve">
          <source>PATH variables</source>
          <target state="translated">PATH变量</target>
        </trans-unit>
        <trans-unit id="404b5a722c514f9f99c58c8b9832dbdc15c84e14" translate="yes" xml:space="preserve">
          <source>PATH variables act as normal arrays, except they are are implicitly joined and split on colons.</source>
          <target state="translated">PATH变量的作用就像普通的数组一样,除了它们是隐式连接和用冒号分割的。</target>
        </trans-unit>
        <trans-unit id="b66696987075bafb7f873ca41d609e5877999e68" translate="yes" xml:space="preserve">
          <source>PATH variables act as normal lists, except they are are implicitly joined and split on colons.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5c77b5722c41b6f199f92efb5977aba4430b61c9" translate="yes" xml:space="preserve">
          <source>Page Up</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6b76530ae6668a37f97a682d440c45d138de6409" translate="yes" xml:space="preserve">
          <source>Parameter expansion (Globbing)</source>
          <target state="translated">参数扩展(Globbing)</target>
        </trans-unit>
        <trans-unit id="0fdb3f75d27167ce5697671dbec55e14ed3744ea" translate="yes" xml:space="preserve">
          <source>Parentheses and the &lt;code&gt;-o&lt;/code&gt; and &lt;code&gt;-a&lt;/code&gt; operators can be combined to produce more complicated expressions. In this example, success is printed if there is a &lt;code&gt;/foo&lt;/code&gt; or &lt;code&gt;/bar&lt;/code&gt; file as well as a &lt;code&gt;/baz&lt;/code&gt; or &lt;code&gt;/bat&lt;/code&gt; file.</source>
          <target state="translated">括号和 &lt;code&gt;-o&lt;/code&gt; 和 &lt;code&gt;-a&lt;/code&gt; 运算符可以结合使用以产生更复杂的表达式。在此示例中，如果存在 &lt;code&gt;/foo&lt;/code&gt; 或 &lt;code&gt;/bar&lt;/code&gt; 文件以及 &lt;code&gt;/baz&lt;/code&gt; 或 &lt;code&gt;/bat&lt;/code&gt; 文件，则打印成功。</target>
        </trans-unit>
        <trans-unit id="e0efa09d094aec052590bdd703ecb253fb17eb1e" translate="yes" xml:space="preserve">
          <source>Path variables are a special kind of variable used to support colon-delimited path lists including PATH, CDPATH, MANPATH, PYTHONPATH, etc. All variables that end in &lt;code&gt;PATH&lt;/code&gt; (case-sensitive) become PATH variables.</source>
          <target state="translated">路径变量是一种特殊类型的变量，用于支持以冒号分隔的路径列表，包括PATH，CDPATH，MANPATH，PYTHONPATH等。所有以 &lt;code&gt;PATH&lt;/code&gt; 结尾的变量（区分大小写）都将成为PATH变量。</target>
        </trans-unit>
        <trans-unit id="db92c54d01dcbf9ce9147cf302fcbe0e8290138e" translate="yes" xml:space="preserve">
          <source>Performs a history search when the</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="acdeb27738adfec3e214f14b0bc5ac319dee18bf" translate="yes" xml:space="preserve">
          <source>Performs a history search when the &lt;b&gt;Page Up&lt;/b&gt; key is pressed.</source>
          <target state="translated">当按下&lt;b&gt;向上翻页&lt;/b&gt;键时，执行历史记录搜索。</target>
        </trans-unit>
        <trans-unit id="b07e355a3677aa688ad89bddfe79ee5b312d7645" translate="yes" xml:space="preserve">
          <source>Pipes and Redirections</source>
          <target state="translated">管道和重定向</target>
        </trans-unit>
        <trans-unit id="109d28af6c9d51926601f8d9e60546da74487021" translate="yes" xml:space="preserve">
          <source>Pipes usually connect file descriptor 1 (standard output) of the first process to file descriptor 0 (standard input) of the second process. It is possible to use a different output file descriptor by prepending the desired FD number and then output redirect symbol to the pipe. For example:</source>
          <target state="translated">管道通常将第一个进程的文件描述符1(标准输出)连接到第二个进程的文件描述符0(标准输入)。可以通过在管道上预置所需的FD号,然后输出重定向符号来使用不同的输出文件描述符。例如</target>
        </trans-unit>
        <trans-unit id="3247b493bc40b8745523a27d8c525cd0dc056fd5" translate="yes" xml:space="preserve">
          <source>Piping</source>
          <target state="translated">Piping</target>
        </trans-unit>
        <trans-unit id="36298b88737bbda60ad0697ed9af7787bf89ea37" translate="yes" xml:space="preserve">
          <source>Please note that event handlers only become active when a function is loaded, which means you might need to otherwise &lt;a href=&quot;cmds/source#cmd-source&quot;&gt;source&lt;/a&gt; or execute a function instead of relying on &lt;a href=&quot;#syntax-function-autoloading&quot;&gt;autoloading&lt;/a&gt;. One approach is to put it into your &lt;a href=&quot;#initialization&quot;&gt;initialization file&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="484a02744408ea850ed69df5530d98aa375e29f4" translate="yes" xml:space="preserve">
          <source>Please note that event handlers only become active when a function is loaded, which means you might need to otherwise &lt;a href=&quot;commands#source&quot;&gt;source&lt;/a&gt; or execute a function instead of relying on &lt;a href=&quot;#syntax-function-autoloading&quot;&gt;autoloading&lt;/a&gt;. One approach is to put it into your &lt;a href=&quot;index#initialization&quot;&gt;initialization file&lt;/a&gt;.</source>
          <target state="translated">请注意，当加载一个函数，事件处理程序仅变得活跃，你可能需要哪些手段，否则&lt;a href=&quot;commands#source&quot;&gt;源&lt;/a&gt;或执行，而不是依靠一个功能&lt;a href=&quot;#syntax-function-autoloading&quot;&gt;自动加载&lt;/a&gt;。一种方法是将其放入&lt;a href=&quot;index#initialization&quot;&gt;初始化文件中&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="0e1a82c707f23d09169b7a07b352752535b796b2" translate="yes" xml:space="preserve">
          <source>Prefixing a feature with &lt;code&gt;no-&lt;/code&gt; turns it off instead. .. _other:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d9da79a093b23650535a151c09a73e3fee5ee4ae" translate="yes" xml:space="preserve">
          <source>Prefixing the commandline with a space will prevent the entire line from being stored in the history.</source>
          <target state="translated">在命令行前加上空格,可以防止整个行被存储在历史中。</target>
        </trans-unit>
        <trans-unit id="ae87eccf04345730f74111e3854e8d88c3f15602" translate="yes" xml:space="preserve">
          <source>Prepends &lt;code&gt;sudo&lt;/code&gt; to the current commandline.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ea683ad616063b7347bdddeee7203a82e1a3805b" translate="yes" xml:space="preserve">
          <source>Press</source>
          <target state="translated">Press</target>
        </trans-unit>
        <trans-unit id="fe2ed6ea3216d06709445e2c3ce6b00041d037ed" translate="yes" xml:space="preserve">
          <source>Press &lt;b&gt;Tab&lt;/b&gt;, and &lt;code&gt;fish&lt;/code&gt; will attempt to complete the command, argument, or path:</source>
          <target state="translated">按&lt;b&gt;Tab&lt;/b&gt;， &lt;code&gt;fish&lt;/code&gt; 将尝试完成命令，参数或路径：</target>
        </trans-unit>
        <trans-unit id="7ec470886283f4bfbbc71ce123f5602a60ae342e" translate="yes" xml:space="preserve">
          <source>Pressing</source>
          <target state="translated">Pressing</target>
        </trans-unit>
        <trans-unit id="09c712c74db06b262e6e04d6f0d9c7fa02c47733" translate="yes" xml:space="preserve">
          <source>Pressing &lt;em&gt;Alt&lt;/em&gt;-&lt;b&gt;Enter&lt;/b&gt; instead of pressing the &lt;b&gt;Enter&lt;/b&gt; key.</source>
          <target state="translated">按&lt;em&gt;Alt&lt;/em&gt; - &lt;b&gt;Enter，&lt;/b&gt;而不是按&lt;b&gt;Enter&lt;/b&gt;键。</target>
        </trans-unit>
        <trans-unit id="18a079610776709bdf0e5127ade329eadec0eaa4" translate="yes" xml:space="preserve">
          <source>Pressing the</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="27bf58510d3b20325eed84381a6d30434da9e2ca" translate="yes" xml:space="preserve">
          <source>Pressing the &lt;b&gt;Enter&lt;/b&gt; key while a block of commands is unclosed, such as when one or more block commands such as &lt;code&gt;for&lt;/code&gt;, &lt;code&gt;begin&lt;/code&gt; or &lt;code&gt;if&lt;/code&gt; do not have a corresponding &lt;code&gt;end&lt;/code&gt; command.</source>
          <target state="translated">按下&lt;b&gt;回车&lt;/b&gt;键的同时命令的块是未封闭的，当一个或更多个块命令，如例如 &lt;code&gt;for&lt;/code&gt; ， &lt;code&gt;begin&lt;/code&gt; 或 &lt;code&gt;if&lt;/code&gt; 没有对应的 &lt;code&gt;end&lt;/code&gt; 命令。</target>
        </trans-unit>
        <trans-unit id="68f9e196a99ef7c54610b77d7819c1536c7dc380" translate="yes" xml:space="preserve">
          <source>Previous versions of fish also allowed spelling this as &lt;code&gt;^DESTINATION&lt;/code&gt;, but that made another character special so it was deprecated and will be removed in future.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="27493f631ba000f95a572539cafcbb594a951944" translate="yes" xml:space="preserve">
          <source>Print Top and Bottom on separate lines, using an escape sequence</source>
          <target state="translated">使用转义序列,在不同的行上打印顶部和底部。</target>
        </trans-unit>
        <trans-unit id="84c34db7a924b44d0ab81ef51631e488d755a55a" translate="yes" xml:space="preserve">
          <source>Print hello world to stdout</source>
          <target state="translated">打印hello world到stdout</target>
        </trans-unit>
        <trans-unit id="ad29dcc16fea024e7e41818ab9d4740b264b782b" translate="yes" xml:space="preserve">
          <source>Prior to the addition of this builtin command in the 2.7.0 release there were two main ways to parse the arguments passed to a fish script or function. One way was to use the OS provided &lt;code&gt;getopt&lt;/code&gt; command. The problem with that is that the GNU and BSD implementations are not compatible. Which makes using that external command difficult other than in trivial situations. The other way is to iterate over &lt;code&gt;$argv&lt;/code&gt; and use the fish &lt;code&gt;switch&lt;/code&gt; statement to decide how to handle the argument. That, however, involves a huge amount of boilerplate code. It is also borderline impossible to implement the same behavior as builtin commands.</source>
          <target state="translated">在2.7.0版本中添加此内置命令之前，有两种主要方法来解析传递给fish脚本或函数的参数。一种方法是使用操作系统提供的 &lt;code&gt;getopt&lt;/code&gt; 命令。这样做的问题是GNU和BSD实现不兼容。除了琐碎的情况之外，这使得使用该外部命令很困难。另一种方法是遍历 &lt;code&gt;$argv&lt;/code&gt; 并使用fish &lt;code&gt;switch&lt;/code&gt; 语句来决定如何处理该参数。但是，这涉及大量的样板代码。实现与内置命令相同的行为也是临界点。</target>
        </trans-unit>
        <trans-unit id="e14c52a6b5ed7f130784534e792abd7951342686" translate="yes" xml:space="preserve">
          <source>Private mode</source>
          <target state="translated">私人模式</target>
        </trans-unit>
        <trans-unit id="7d03d42c737cd08e3c616e333f7637225318bb7d" translate="yes" xml:space="preserve">
          <source>Problem solved!</source>
          <target state="translated">问题解决了!</target>
        </trans-unit>
        <trans-unit id="27fee3438e0d28b1f5e56d2013e82bcf5b441945" translate="yes" xml:space="preserve">
          <source>Programmable prompt</source>
          <target state="translated">可编程提示</target>
        </trans-unit>
        <trans-unit id="4eae5ed9e86eb92ca41dd75ef52fb9a0a53af761" translate="yes" xml:space="preserve">
          <source>Programmable title</source>
          <target state="translated">可编程标题</target>
        </trans-unit>
        <trans-unit id="a817d7eb8e0f1dab755ab5203a082e5c3c094fce" translate="yes" xml:space="preserve">
          <source>Prompt</source>
          <target state="translated">Prompt</target>
        </trans-unit>
        <trans-unit id="0495187c978ea883d19171649639e1c756060adb" translate="yes" xml:space="preserve">
          <source>Quick answer:</source>
          <target state="translated">快速回答。</target>
        </trans-unit>
        <trans-unit id="7b0257ce75add65485cb879a8ababbebc2270b68" translate="yes" xml:space="preserve">
          <source>Quotes</source>
          <target state="translated">Quotes</target>
        </trans-unit>
        <trans-unit id="a5ab0c393626e6b25924176a035ebd63722dc7ec" translate="yes" xml:space="preserve">
          <source>Range expansion will go in reverse if the end element is earlier in the list than the start and forward if the end is later than the start, unless exactly one of the given indices is negative. This is to enable clamping without changing direction if the list has fewer elements than expected.</source>
          <target state="translated">如果列表中的结束元素比开始元素早,则范围扩展将反向进行,如果结束元素比开始元素晚,则向前扩展,除非给定的指数中正好有一个是负数。这样做的目的是为了在列表中的元素比预期的少的情况下,可以不改变方向地进行夹紧。</target>
        </trans-unit>
        <trans-unit id="b16d80967d06f9706108437bd28e6a8d5175e9a0" translate="yes" xml:space="preserve">
          <source>Reading from or appending to a non existing file.</source>
          <target state="translated">从一个不存在的文件读取或追加到一个不存在的文件。</target>
        </trans-unit>
        <trans-unit id="3e22373b8f4786a11fc3f5247c24bd1cd140127f" translate="yes" xml:space="preserve">
          <source>Ready for more?</source>
          <target state="translated">准备好接受更多的挑战了吗?</target>
        </trans-unit>
        <trans-unit id="ab140354a34bd045ff52d42f722acc1c4ffada22" translate="yes" xml:space="preserve">
          <source>Regular Expressions</source>
          <target state="translated">正则表达式</target>
        </trans-unit>
        <trans-unit id="5c8c7c6ececfc7a4858b06b4968629df633fe974" translate="yes" xml:space="preserve">
          <source>Renames an existing abbreviation from &lt;code&gt;gco&lt;/code&gt; to &lt;code&gt;gch&lt;/code&gt;.</source>
          <target state="translated">将现有的缩写从 &lt;code&gt;gco&lt;/code&gt; 重命名为 &lt;code&gt;gch&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="4dc79b3cd9563c59f1fd2d978861f14b1270090f" translate="yes" xml:space="preserve">
          <source>Repeat Examples</source>
          <target state="translated">重复的例子</target>
        </trans-unit>
        <trans-unit id="a879640933d6c8936ca4cc6a02a55f8cc4408041" translate="yes" xml:space="preserve">
          <source>Replace Literal Examples</source>
          <target state="translated">替换字面例子</target>
        </trans-unit>
        <trans-unit id="13b05ad41dc01c7c29077cca05d8339a7a6429b9" translate="yes" xml:space="preserve">
          <source>Replace Regex Examples</source>
          <target state="translated">替换Regex示例</target>
        </trans-unit>
        <trans-unit id="4c85d59c181a8bdfec393789d72d1942cf54846f" translate="yes" xml:space="preserve">
          <source>Return Values</source>
          <target state="translated">返回值</target>
        </trans-unit>
        <trans-unit id="27ca7249b11e61ac7f3b63efe842130af63f97b8" translate="yes" xml:space="preserve">
          <source>Run the following command in fish:</source>
          <target state="translated">在fish中运行以下命令。</target>
        </trans-unit>
        <trans-unit id="ddd9c246e03e2789458ae8bb429c9d694195cb17" translate="yes" xml:space="preserve">
          <source>Running Commands</source>
          <target state="translated">运行命令</target>
        </trans-unit>
        <trans-unit id="5c5cc33a225b06807a45544c8793a5276a15976d" translate="yes" xml:space="preserve">
          <source>Running multiple programs</source>
          <target state="translated">运行多个程序</target>
        </trans-unit>
        <trans-unit id="b6ee539e25ba9fe37112f3eead73eaed680c02a5" translate="yes" xml:space="preserve">
          <source>SEQUENCE is the character sequence to bind to. These should be written as &lt;a href=&quot;../index#escapes&quot;&gt;fish escape sequences&lt;/a&gt;. For example, because pressing the Alt key and another character sends that character prefixed with an escape character, Alt-based key bindings can be written using the &lt;code&gt;\e&lt;/code&gt; escape. For example,</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b3fe37f1b337c360725965146e94ffa93a9708da" translate="yes" xml:space="preserve">
          <source>SEQUENCE is the character sequence to bind to. These should be written as &lt;a href=&quot;index#escapes&quot;&gt;fish escape sequences&lt;/a&gt;. For example, because pressing the Alt key and another character sends that character prefixed with an escape character, Alt-based key bindings can be written using the &lt;code&gt;\e&lt;/code&gt; escape. For example, &lt;em&gt;Alt&lt;/em&gt;-&lt;b&gt;w&lt;/b&gt; can be written as &lt;code&gt;\ew&lt;/code&gt;. The control character can be written in much the same way using the &lt;code&gt;\c&lt;/code&gt; escape, for example &lt;em&gt;Control&lt;/em&gt;-&lt;b&gt;X&lt;/b&gt; (^X) can be written as &lt;code&gt;\cx&lt;/code&gt;. Note that Alt-based key bindings are case sensitive and Control-based key bindings are not. This is a constraint of text-based terminals, not &lt;code&gt;fish&lt;/code&gt;.</source>
          <target state="translated">SEQUENCE是要绑定的字符序列。这些应该写成&lt;a href=&quot;index#escapes&quot;&gt;逃生序列&lt;/a&gt;。例如，由于按下Alt键和另一个字符会发送带有转义字符的字符，因此可以使用 &lt;code&gt;\e&lt;/code&gt; 转义来编写基于Alt的键绑定。例如，&lt;em&gt;Alt&lt;/em&gt; - &lt;b&gt;w&lt;/b&gt;可以写为 &lt;code&gt;\ew&lt;/code&gt; 。可以使用 &lt;code&gt;\c&lt;/code&gt; 转义符以几乎相同的方式编写控制字符，例如&lt;em&gt;Control&lt;/em&gt; - &lt;b&gt;X&lt;/b&gt;（^ X）可以编写为 &lt;code&gt;\cx&lt;/code&gt; 。请注意，基于Alt的键绑定区分大小写，而基于Control的键绑定则不区分大小写。这是基于文本的终端的约束，而不是 &lt;code&gt;fish&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="769ee8ba6c10d0fc5cc5d5931ff5950b069f7631" translate="yes" xml:space="preserve">
          <source>STRING arguments are taken from the command line unless standard input is connected to a pipe or a file, in which case they are read from standard input, one STRING per line. It is an error to supply STRING arguments on the command line and on standard input.</source>
          <target state="translated">STRING参数来自命令行,除非标准输入连接到管道或文件,在这种情况下,它们是从标准输入读取的,每行一个STRING。在命令行和标准输入中提供STRING参数是错误的。</target>
        </trans-unit>
        <trans-unit id="4e1a6674d38590faffffeb4695d9d452b5339baa" translate="yes" xml:space="preserve">
          <source>Same as</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3e9759d5f8593842e337c74b9202035585d520b2" translate="yes" xml:space="preserve">
          <source>Same as above but with a second flag that requires a value:</source>
          <target state="translated">同上,但有第二个标志,需要一个值。</target>
        </trans-unit>
        <trans-unit id="d562a361adfcc4bd04396673622d38c2c23c4a3b" translate="yes" xml:space="preserve">
          <source>Same as above but with a third flag that can be given multiple times saving the value of each instance seen and only the long flag name (&lt;code&gt;--token&lt;/code&gt;) can be used:</source>
          <target state="translated">与上面相同，但是第三个标志可以多次给出，以保存所看到的每个实例的值，并且只能使用长标志名（ &lt;code&gt;--token&lt;/code&gt; ）：</target>
        </trans-unit>
        <trans-unit id="c902e77d44ee1a72851bdd66a8039b7289e5469e" translate="yes" xml:space="preserve">
          <source>Say $animal contains the name of an animal. Then this code would classify it:</source>
          <target state="translated">假设$animal包含一个动物的名字。那么这段代码就会对它进行分类。</target>
        </trans-unit>
        <trans-unit id="2e406da000ac4099abeb149121071ece020d3907" translate="yes" xml:space="preserve">
          <source>Searchable history</source>
          <target state="translated">可搜索的历史</target>
        </trans-unit>
        <trans-unit id="b445d35ecc1c55f9e1ceba18d794fb79d964e899" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;index#editor&quot;&gt;documentation&lt;/a&gt; for more details about line editing in fish.</source>
          <target state="translated">有关在鱼中进行行编辑的更多详细信息，请参见&lt;a href=&quot;index#editor&quot;&gt;文档&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="67373bb92cd7ecbf243edb9d60ad6f00f86a6052" translate="yes" xml:space="preserve">
          <source>See Also</source>
          <target state="translated">另见</target>
        </trans-unit>
        <trans-unit id="49221a7350c523a8e1009128e69d530a8c75a22a" translate="yes" xml:space="preserve">
          <source>See also &lt;a href=&quot;dirs#cmd-dirs&quot;&gt;dirs&lt;/a&gt; to print the stack and &lt;code&gt;dirs -c&lt;/code&gt; to clear it.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="77543101f6f627a4f89275ca4aa34557b8a135ef" translate="yes" xml:space="preserve">
          <source>See also &lt;a href=&quot;fish_vcs_prompt#cmd-fish-vcs-prompt&quot;&gt;fish_vcs_prompt&lt;/a&gt;, which will call all supported version control prompt functions, including git, Mercurial and Subversion.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="67035298680ddb09dd248da78e915fd9c9627f01" translate="yes" xml:space="preserve">
          <source>See also &lt;code&gt;dirs&lt;/code&gt; and &lt;code&gt;dirs -c&lt;/code&gt;.</source>
          <target state="translated">另请参见 &lt;code&gt;dirs&lt;/code&gt; 和 &lt;code&gt;dirs -c&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="1a3b31765df862a7d9c4531c872152ad402c53f3" translate="yes" xml:space="preserve">
          <source>See also &lt;code&gt;read --delimiter&lt;/code&gt;.</source>
          <target state="translated">另请 &lt;code&gt;read --delimiter&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="5324b1f4d638d16895e396283d6222620e56d716" translate="yes" xml:space="preserve">
          <source>See also the &lt;a href=&quot;cdh#cmd-cdh&quot;&gt;cdh&lt;/a&gt; command for changing to a recently visited directory.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7238893c67063d93ae05263dd71a5ccfc50d90c7" translate="yes" xml:space="preserve">
          <source>See also the &lt;a href=&quot;commands#cdh&quot;&gt;&lt;code&gt;cdh&lt;/code&gt;&lt;/a&gt; command for changing to a recently visited directory.</source>
          <target state="translated">另请参见&lt;a href=&quot;commands#cdh&quot;&gt; &lt;code&gt;cdh&lt;/code&gt; &lt;/a&gt;命令，用于更改为最近访问的目录。</target>
        </trans-unit>
        <trans-unit id="01cfa9314baef15cf1a7d7383228c6d181370cb2" translate="yes" xml:space="preserve">
          <source>See also the &lt;a href=&quot;commands#prevd&quot;&gt;&lt;code&gt;prevd&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;commands#pushd&quot;&gt;&lt;code&gt;pushd&lt;/code&gt;&lt;/a&gt; commands which also work with the recent &lt;code&gt;cd&lt;/code&gt; history and are provided for compatibility with other shells.</source>
          <target state="translated">又见&lt;a href=&quot;commands#prevd&quot;&gt; &lt;code&gt;prevd&lt;/code&gt; &lt;/a&gt;和&lt;a href=&quot;commands#pushd&quot;&gt; &lt;code&gt;pushd&lt;/code&gt; &lt;/a&gt;命令这也与近期的工作 &lt;code&gt;cd&lt;/code&gt; 历史，提供了与其他炮弹的兼容性。</target>
        </trans-unit>
        <trans-unit id="a276f1ec5f60e2df52ed4c479379eca5a14e0acb" translate="yes" xml:space="preserve">
          <source>See also the &lt;a href=&quot;prevd#cmd-prevd&quot;&gt;prevd&lt;/a&gt; and &lt;a href=&quot;pushd#cmd-pushd&quot;&gt;pushd&lt;/a&gt; commands which also work with the recent &lt;code&gt;cd&lt;/code&gt; history and are provided for compatibility with other shells.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c59959e6168e702c87aad6497074fc87974da46d" translate="yes" xml:space="preserve">
          <source>See the &quot;Internals&quot; section for more on them.</source>
          <target state="translated">更多内容请参见 &quot;内部 &quot;部分。</target>
        </trans-unit>
        <trans-unit id="c6e5f5869c0d557646211d7b722a3358667dc217" translate="yes" xml:space="preserve">
          <source>See the &lt;a href=&quot;#fish-opt&quot;&gt;&lt;code&gt;fish_opt&lt;/code&gt;&lt;/a&gt; command for a friendlier but more verbose way to create option specifications.</source>
          <target state="translated">有关创建选项规范的更友好但更详细的方法，请参见&lt;a href=&quot;#fish-opt&quot;&gt; &lt;code&gt;fish_opt&lt;/code&gt; &lt;/a&gt;命令。</target>
        </trans-unit>
        <trans-unit id="762e36367184253ec997bd0b9511dad76a9722aa" translate="yes" xml:space="preserve">
          <source>See the &lt;a href=&quot;cmds/history#cmd-history&quot;&gt;history&lt;/a&gt; command for other manipulations.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c014ad7ef4dcc4632ad4cb9226ca38ced50624d9" translate="yes" xml:space="preserve">
          <source>See the &lt;a href=&quot;fish_opt#cmd-fish-opt&quot;&gt;fish_opt&lt;/a&gt; command for a friendlier but more verbose way to create option specifications.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f689ba7f1bf5e057a3d971021477d48085ed9ad9" translate="yes" xml:space="preserve">
          <source>See the documentation for &lt;a href=&quot;cmds/funced#cmd-funced&quot;&gt;funced&lt;/a&gt; and &lt;a href=&quot;cmds/funcsave#cmd-funcsave&quot;&gt;funcsave&lt;/a&gt; for ways to create these files automatically, and &lt;a href=&quot;index#syntax-function-autoloading&quot;&gt;$fish_function_path&lt;/a&gt; to control their location.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9d34ee1f18350527bff51e963b54e3ce46a24e48" translate="yes" xml:space="preserve">
          <source>See the documentation for &lt;a href=&quot;cmds/test#cmd-test&quot;&gt;test&lt;/a&gt; and &lt;a href=&quot;cmds/if#cmd-if&quot;&gt;if&lt;/a&gt; for more information.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8ac7646fb3e869bb56303fbe3fca839b0d38f1d8" translate="yes" xml:space="preserve">
          <source>See the documentation for &lt;a href=&quot;commands#funced&quot;&gt;funced&lt;/a&gt; and &lt;a href=&quot;commands#funcsave&quot;&gt;funcsave&lt;/a&gt; for ways to create these files automatically.</source>
          <target state="translated">有关自动创建这些文件的方法，请参见&lt;a href=&quot;commands#funced&quot;&gt;funced&lt;/a&gt;和&lt;a href=&quot;commands#funcsave&quot;&gt;funcsave&lt;/a&gt;文档。</target>
        </trans-unit>
        <trans-unit id="bb216107606bc95b848f93fc29c67e8fe68c93ea" translate="yes" xml:space="preserve">
          <source>See the documentation for &lt;a href=&quot;commands#test&quot;&gt;&lt;code&gt;test&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;commands#if&quot;&gt;&lt;code&gt;if&lt;/code&gt;&lt;/a&gt; for more information.</source>
          <target state="translated">请参阅文件&lt;a href=&quot;commands#test&quot;&gt; &lt;code&gt;test&lt;/code&gt; &lt;/a&gt;和&lt;a href=&quot;commands#if&quot;&gt; &lt;code&gt;if&lt;/code&gt; &lt;/a&gt;了解更多信息。</target>
        </trans-unit>
        <trans-unit id="9299a43e63898a7efcae7a83cc40f247242085fc" translate="yes" xml:space="preserve">
          <source>See the documentation for &lt;code&gt;set&lt;/code&gt; for more details on the scoping rules for variables.</source>
          <target state="translated">有关变量的范围规则的更多详细信息，请参见 &lt;code&gt;set&lt;/code&gt; 的文档。</target>
        </trans-unit>
        <trans-unit id="f325a391b2afa8d45fd9b05b9b133df7d497fc47" translate="yes" xml:space="preserve">
          <source>Separating Commands (Semicolon)</source>
          <target state="translated">分隔命令(分号)。</target>
        </trans-unit>
        <trans-unit id="0ffd1469dee865172080d29fd56f5825f24fc441" translate="yes" xml:space="preserve">
          <source>Sequences of elements can be written with the range operator '&lt;code&gt;..&lt;/code&gt;'. A range '&lt;code&gt;a..b&lt;/code&gt;' ('a' and 'b' being integers) is expanded into a sequence of indices '&lt;code&gt;a a+1 a+2 ... b&lt;/code&gt;' or '&lt;code&gt;a a-1 a-2 ... b&lt;/code&gt;' depending on which of 'a' or 'b' is higher. Negative range limits are calculated from the end of the list. If an index is too large or small it's silently clamped to one or the size of the list as appropriate.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cafea76301da663d6e72c8dd0182bf1a08fe0c7b" translate="yes" xml:space="preserve">
          <source>Setting the background color only affects subsequently written characters. Fish provides no way to set the background color for the entire terminal window. Configuring the window background color (and other attributes such as its opacity) has to be done using whatever mechanisms the terminal provides.</source>
          <target state="translated">设置背景色只影响随后书写的字符。Fish没有提供为整个终端窗口设置背景色的方法。配置窗口背景色(以及其他属性,如不透明度)必须使用终端提供的任何机制来完成。</target>
        </trans-unit>
        <trans-unit id="b7ac25be64a83552cee11d2c2c101281899b7d94" translate="yes" xml:space="preserve">
          <source>Setting the background color only affects subsequently written characters. Fish provides no way to set the background color for the entire terminal window. Configuring the window background color (and other attributes such as its opacity) has to be done using whatever mechanisms the terminal provides. Look for a config option.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0c0750f1643a764b440d30cec12896d4e2f3c4f4" translate="yes" xml:space="preserve">
          <source>Shared bindings</source>
          <target state="translated">共用装订</target>
        </trans-unit>
        <trans-unit id="02a6cc27a3e125fbed4ff93ba00ddc32ff248036" translate="yes" xml:space="preserve">
          <source>Shebang Line</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="61e5ec8aae4e834701135d3867ab63125d131c5e" translate="yes" xml:space="preserve">
          <source>Shell variable and function names</source>
          <target state="translated">外壳变量和函数名称</target>
        </trans-unit>
        <trans-unit id="e91aede6defa8d430f67e550004d49863d3e2e5b" translate="yes" xml:space="preserve">
          <source>Shell variables</source>
          <target state="translated">外壳变量</target>
        </trans-unit>
        <trans-unit id="0f86f7ae2195716edf4d3ac75b6ae230d7060ba1" translate="yes" xml:space="preserve">
          <source>Shell variables are named pieces of data, which can be created, deleted and their values changed and used by the user. Variables may optionally be &quot;exported&quot;, so that a copy of the variable is available to any subprocesses the shell creates. An exported variable is referred to as an &quot;environment variable&quot;.</source>
          <target state="translated">Shell变量是被命名的数据,用户可以创建、删除、更改和使用它们的值。变量可以选择 &quot;导出&quot;,这样shell创建的任何子进程都可以使用该变量的副本。导出的变量被称为 &quot;环境变量&quot;。</target>
        </trans-unit>
        <trans-unit id="9ba5016166d5ba5cee4a99a1b1e6e1f5fe3f8efe" translate="yes" xml:space="preserve">
          <source>Shells like fish are used by giving them commands. Every &lt;code&gt;fish&lt;/code&gt; command follows the same basic syntax.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e122d1fcfbe4d2952329855d2c90efb389777230" translate="yes" xml:space="preserve">
          <source>Shells like fish are used by giving them commands. Every &lt;code&gt;fish&lt;/code&gt; command follows the same simple syntax.</source>
          <target state="translated">像鱼一样的贝壳是通过给它们命令来使用的。每个 &lt;code&gt;fish&lt;/code&gt; 命令都遵循相同的简单语法。</target>
        </trans-unit>
        <trans-unit id="c89673d426f813c79fba3be3ad53403494aea9ae" translate="yes" xml:space="preserve">
          <source>Shift, Tab</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f44347ef7035824e74312bda85a5c1f33acab5d3" translate="yes" xml:space="preserve">
          <source>Shift,&amp;larr;,Left</source>
          <target state="translated">Shift,&amp;larr;,Left</target>
        </trans-unit>
        <trans-unit id="389f8e25d83e1e1c83d311028f205dfb3a8af791" translate="yes" xml:space="preserve">
          <source>Shift,&amp;rarr;,Right</source>
          <target state="translated">Shift,&amp;rarr;,Right</target>
        </trans-unit>
        <trans-unit id="794fe0e411bbf424857358cfb3699f0985ef9bee" translate="yes" xml:space="preserve">
          <source>Shift,A</source>
          <target state="translated">Shift,A</target>
        </trans-unit>
        <trans-unit id="a4f7b08e9c36efe6a08eae925c49ef2f720086e4" translate="yes" xml:space="preserve">
          <source>Shift,D</source>
          <target state="translated">Shift,D</target>
        </trans-unit>
        <trans-unit id="42414c807cd9c1ab64d204f7113345e9c5f0a85a" translate="yes" xml:space="preserve">
          <source>Short options, like '&lt;code&gt;-a&lt;/code&gt;'. Short options are a single character long, are preceded by a single hyphen and may be grouped together (like '&lt;code&gt;-la&lt;/code&gt;', which is equivalent to '&lt;code&gt;-l -a&lt;/code&gt;'). Option arguments may be specified in the following parameter ('&lt;code&gt;-w 32&lt;/code&gt;') or by appending the option with the value ('&lt;code&gt;-w32&lt;/code&gt;').</source>
          <target state="translated">简短的选项，例如' &lt;code&gt;-a&lt;/code&gt; '。短选项是单个字符长，前面带有单个连字符，并且可以组合在一起（例如&amp;ldquo; &lt;code&gt;-la&lt;/code&gt; &amp;rdquo;，等效于&amp;ldquo; &lt;code&gt;-l -a&lt;/code&gt; &amp;rdquo;）。选项参数可以在以下参数（' &lt;code&gt;-w 32&lt;/code&gt; '）中指定，也可以通过在选项后附加值（' &lt;code&gt;-w32&lt;/code&gt; '）来指定。</target>
        </trans-unit>
        <trans-unit id="214c488d368da8c81796e48eb7f6963ef7a93bff" translate="yes" xml:space="preserve">
          <source>Should you wish to uninstall fish, first ensure fish is not set as your shell. Run &lt;code&gt;chsh -s /bin/bash&lt;/code&gt; if you are not sure.</source>
          <target state="translated">如果要卸载鱼，请首先确保未将鱼设置为外壳。如果不确定，请运行 &lt;code&gt;chsh -s /bin/bash&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="d5a22b01fc547f4aefabc8c7a496313159dfc74d" translate="yes" xml:space="preserve">
          <source>Signal names are case insensitive and the &lt;code&gt;SIG&lt;/code&gt; prefix is optional.</source>
          <target state="translated">信号名称不区分大小写，并且 &lt;code&gt;SIG&lt;/code&gt; 前缀是可选的。</target>
        </trans-unit>
        <trans-unit id="2339b49e18e4fa7fa63c25097d1c3cb05b3abf7a" translate="yes" xml:space="preserve">
          <source>Similar to bash, fish has Emacs and Vi editing modes. The default editing mode is Emacs. You can switch to Vi mode with &lt;code&gt;fish_vi_key_bindings&lt;/code&gt; and switch back with &lt;code&gt;fish_default_key_bindings&lt;/code&gt;. You can also make your own key bindings by creating a function and setting $fish_key_bindings to its name. For example:</source>
          <target state="translated">与bash相似，fish具有Emacs和Vi编辑模式。默认的编辑模式是Emacs。您可以切换到vi模式与 &lt;code&gt;fish_vi_key_bindings&lt;/code&gt; 并切换回来 &lt;code&gt;fish_default_key_bindings&lt;/code&gt; 。您还可以通过创建一个函数并将$ fish_key_bindings设置为其名称来进行自己的键绑定。例如：</target>
        </trans-unit>
        <trans-unit id="841cba81f949103d830192d933a434ce626dfca6" translate="yes" xml:space="preserve">
          <source>Since fish 3.1 you can set an environment variable for just one command using the &lt;code&gt;key=value some command&lt;/code&gt; syntax, like in other shells. The two lines below behave identically - unlike other shells, fish will output &lt;code&gt;value&lt;/code&gt; both times:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7ae81f7020b13f6dbc6ef9ce845da695c08f53b8" translate="yes" xml:space="preserve">
          <source>Since scripts for shell commands can be written in many different languages, they need to carry information about what interpreter is needed to execute them: For this they are expected to have a first line, the shebang line, which names an executable for this purpose:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="14b8aecd3aaaa33e35d9724dfec4e61ddcb14189" translate="yes" xml:space="preserve">
          <source>So:</source>
          <target state="translated">So:</target>
        </trans-unit>
        <trans-unit id="530fce1c2ad1ce0277a5df96933c6fbf422dc856" translate="yes" xml:space="preserve">
          <source>Some OPTION_SPEC examples:</source>
          <target state="translated">一些OPTION_SPEC的例子。</target>
        </trans-unit>
        <trans-unit id="4d6baccd4c71912ba57043465594b0cf17749be7" translate="yes" xml:space="preserve">
          <source>Some bindings are shared between emacs- and vi-mode because they aren't text editing bindings or because what Vi/Vim does for a particular key doesn't make sense for a shell.</source>
          <target state="translated">有些绑定是在 emacs-和 vi-模式之间共享的,因为它们不是文本编辑绑定,或者因为 Vi/Vim 对某个特定键的操作对 shell 没有意义。</target>
        </trans-unit>
        <trans-unit id="425593164f34a70e7fd63371baa3a373bc2ecb38" translate="yes" xml:space="preserve">
          <source>Some characters can not be written directly on the command line. For these characters, so called escape sequences are provided. These are:</source>
          <target state="translated">有些字符不能直接写在命令行上。对于这些字符,提供了所谓的转义序列。这些字符是:</target>
        </trans-unit>
        <trans-unit id="a528e343afc3809db9c1142fa89d7ee4b8aa846e" translate="yes" xml:space="preserve">
          <source>Some colors for status symbols:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6dd3509b210643ba6eefaffcdf24924a6a2790a7" translate="yes" xml:space="preserve">
          <source>Some common words</source>
          <target state="translated">一些常用词</target>
        </trans-unit>
        <trans-unit id="01706013cfdbcb0fc543d3c97784f3f4c235d630" translate="yes" xml:space="preserve">
          <source>Some examples:</source>
          <target state="translated">一些例子:</target>
        </trans-unit>
        <trans-unit id="9a67d5493118a559656027def8dc4fcd0cc3974f" translate="yes" xml:space="preserve">
          <source>Some features include repetitions:</source>
          <target state="translated">一些功能包括重复。</target>
        </trans-unit>
        <trans-unit id="4ded8c2bc928f23aa366efb17837e70948b9a888" translate="yes" xml:space="preserve">
          <source>Some of the special features of fish are:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d39624c87b3e78e02ed8dde71f696712e0710389" translate="yes" xml:space="preserve">
          <source>Some shells (e.g., ksh, bash) feature a syntax that is a mix between command substitution and piping, called process substitution. It is used to send the output of a command into the calling command, much like command substitution, but with the difference that the output is not sent through commandline arguments but through a named pipe, with the filename of the named pipe sent as an argument to the calling program. &lt;code&gt;psub&lt;/code&gt; combined with a regular command substitution provides the same functionality.</source>
          <target state="translated">一些外壳程序（例如ksh，bash）具有一种语法，该语法是命令替换和管道之间的混合，称为进程替换。它用于将命令的输出发送到调用命令中，类似于命令替换，但区别在于输出不是通过命令行参数发送，而是通过命名管道发送，而命名管道的文件名作为参数发送到调用程序。 &lt;code&gt;psub&lt;/code&gt; 与常规命令替换结合可提供相同的功能。</target>
        </trans-unit>
        <trans-unit id="28861f1ca2bfa4eb42bfb98ba18be09e02df8f97" translate="yes" xml:space="preserve">
          <source>Some terminals use the &lt;code&gt;--bold&lt;/code&gt; escape sequence to switch to a brighter color set rather than increasing the weight of text.</source>
          <target state="translated">一些终端使用 &lt;code&gt;--bold&lt;/code&gt; 转义序列来切换到较亮的颜色集，而不是增加文本的权重。</target>
        </trans-unit>
        <trans-unit id="81e4919181b85ff99cd6f65bd27d07c5ffe80e11" translate="yes" xml:space="preserve">
          <source>Some variables are only used in some modes, like when informative status is enabled:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c4dd50f777b9a845d16edeb5ac29fc4998e7e176" translate="yes" xml:space="preserve">
          <source>Some variables, like &lt;code&gt;$PWD&lt;/code&gt;, only have one value. By convention, we talk about that variable's value, but we really mean its first (and only) value.</source>
          <target state="translated">某些变量（例如 &lt;code&gt;$PWD&lt;/code&gt; ）只有一个值。按照惯例，我们谈论该变量的值，但实际上是指它的第一个（也是唯一的）值。</target>
        </trans-unit>
        <trans-unit id="8709ff84c2c20f30aea0078b8e4ce461f5bca70c" translate="yes" xml:space="preserve">
          <source>Sometimes features such as &lt;a href=&quot;#expand&quot;&gt;parameter expansion&lt;/a&gt; and &lt;a href=&quot;#escapes&quot;&gt;character escapes&lt;/a&gt; get in the way. When that happens, the user can write a parameter within quotes, either &amp;lsquo;&amp;rsquo;&lt;code&gt;(single quote) or&lt;/code&gt;&quot;&lt;code&gt;(double quote). There is one important difference between single quoted and double quoted strings: When using double quoted string, &amp;lt;a href=&quot;#expand-variable&quot;&amp;gt;variable expansion&amp;lt;/a&amp;gt; still takes place. Other than that, no other kind of expansion (including &amp;lt;a href=&quot;#expand-brace&quot;&amp;gt;brace expansion&amp;lt;/a&amp;gt; and parameter expansion) will take place, the parameter may contain spaces, and escape sequences are ignored. The only backslash escape accepted within single quotes is&lt;/code&gt;\'&lt;code&gt;, which escapes a single quote and&lt;/code&gt;\`, which escapes the backslash symbol. The only backslash escapes accepted within double quotes are &lt;code&gt;\&quot;&lt;/code&gt;, which escapes a double quote, &lt;code&gt;\$&lt;/code&gt;, which escapes a dollar character, &lt;code&gt;\&lt;/code&gt; followed by a newline, which deletes the backslash and the newline, and lastly &lt;code&gt;\\&lt;/code&gt;, which escapes the backslash symbol. Single quotes have no special meaning within double quotes and vice versa.</source>
          <target state="translated">有时，诸如&lt;a href=&quot;#expand&quot;&gt;参数扩展&lt;/a&gt;和&lt;a href=&quot;#escapes&quot;&gt;字符转义之类的功能&lt;/a&gt;会妨碍您的工作。发生这种情况时，用户可以在引号内编写参数，即&amp;rdquo; &lt;code&gt;(single quote) or&lt;/code&gt; &amp;ldquo; &lt;code&gt;(double quote). There is one important difference between single quoted and double quoted strings: When using double quoted string, &amp;lt;a href=&quot;#expand-variable&quot;&amp;gt;variable expansion&amp;lt;/a&amp;gt; still takes place. Other than that, no other kind of expansion (including &amp;lt;a href=&quot;#expand-brace&quot;&amp;gt;brace expansion&amp;lt;/a&amp;gt; and parameter expansion) will take place, the parameter may contain spaces, and escape sequences are ignored. The only backslash escape accepted within single quotes is&lt;/code&gt; \' &lt;code&gt;, which escapes a single quote and&lt;/code&gt; \`，转义反斜杠符号。双引号中接受的唯一反斜杠转义符是 &lt;code&gt;\&quot;&lt;/code&gt; ，它转义双引号 &lt;code&gt;\$&lt;/code&gt; 会转义美元字符 &lt;code&gt;\&lt;/code&gt; ,其后是换行符，这会删除反斜杠和换行符，最后是 &lt;code&gt;\\&lt;/code&gt; ，则转义反斜杠。单引号在双引号中没有特殊含义，反之亦然。</target>
        </trans-unit>
        <trans-unit id="1c2aa93843ddd26ec4e00cb7588c5d09f093b293" translate="yes" xml:space="preserve">
          <source>Sometimes features such as &lt;a href=&quot;#expand&quot;&gt;parameter expansion&lt;/a&gt; and &lt;a href=&quot;#escapes&quot;&gt;character escapes&lt;/a&gt; get in the way. When that happens, the user can write a parameter within quotes, either &lt;code&gt;'&lt;/code&gt; (single quote) or &lt;code&gt;&quot;&lt;/code&gt; (double quote). There is one important difference between single quoted and double quoted strings: When using double quoted string, &lt;a href=&quot;#expand-variable&quot;&gt;variable expansion&lt;/a&gt; still takes place. Other than that, no other kind of expansion (including &lt;a href=&quot;#expand-brace&quot;&gt;brace expansion&lt;/a&gt; and parameter expansion) will take place, the parameter may contain spaces, and escape sequences are ignored.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bbef0a968c656b4a5b1d7f9e05d2b88ddbbced0c" translate="yes" xml:space="preserve">
          <source>Sometimes it's necessary to access only some of the elements of a list, or some of the lines a command substitution outputs. Both allow this by providing a set of indices in square brackets.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="757ebf561cb13f732876f1ea411a1e9e3f80de54" translate="yes" xml:space="preserve">
          <source>Sometimes you need to have a variable available to an external command, often as a setting. For example many programs like &lt;code&gt;git&lt;/code&gt; or &lt;code&gt;man&lt;/code&gt; read the &lt;code&gt;$PAGER&lt;/code&gt; variable to figure out your preferred pager (the program that lets you scroll text). Other variables used like this include &lt;code&gt;$BROWSER&lt;/code&gt;, &lt;code&gt;$LANG&lt;/code&gt; (to configure your language) and &lt;code&gt;$PATH&lt;/code&gt;. You'll note these are written in ALLCAPS, but that's just a convention.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eebf6318c30de678887503010959c6f407c73301" translate="yes" xml:space="preserve">
          <source>Sometimes you need to validate the option values. For example, that it is a valid integer within a specific range, or an ip address, or something entirely different. You can always do this after &lt;code&gt;argparse&lt;/code&gt; returns but you can also request that &lt;code&gt;argparse&lt;/code&gt; perform the validation by executing arbitrary fish script. To do so simply append an &lt;code&gt;!&lt;/code&gt; (exclamation-mark) then the fish script to be run. When that code is executed three vars will be defined:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6d8c9b124d521027647b4f270cb2872798f9264e" translate="yes" xml:space="preserve">
          <source>Space</source>
          <target state="translated">Space</target>
        </trans-unit>
        <trans-unit id="5773d504847f59d4f28606344c751b42fcadfb09" translate="yes" xml:space="preserve">
          <source>Special Case: The escape Character</source>
          <target state="translated">特殊情况:逃生人物</target>
        </trans-unit>
        <trans-unit id="28dc52fcfc9145786fed85cff73226269b82a2c9" translate="yes" xml:space="preserve">
          <source>Special input functions</source>
          <target state="translated">特殊输入功能</target>
        </trans-unit>
        <trans-unit id="a6c32b7763c1deccd93080cf33efdb324072a965" translate="yes" xml:space="preserve">
          <source>Special variables</source>
          <target state="translated">特殊变量</target>
        </trans-unit>
        <trans-unit id="a0a234701d3553b3ee0fce9d93e7f64fadef5cac" translate="yes" xml:space="preserve">
          <source>Specifying your own completions is not difficult. To specify a completion, use the &lt;code&gt;complete&lt;/code&gt; command. &lt;code&gt;complete&lt;/code&gt; takes as a parameter the name of the command to specify a completion for. For example, to add a completion for the program &lt;code&gt;myprog&lt;/code&gt;, one would start the completion command with &lt;code&gt;complete -c myprog ...&lt;/code&gt;</source>
          <target state="translated">指定您自己的完成并不困难。要指定完成，请使用 &lt;code&gt;complete&lt;/code&gt; 命令。 &lt;code&gt;complete&lt;/code&gt; 将用于指定完成的命令名称作为参数。例如，要为程序 &lt;code&gt;myprog&lt;/code&gt; 添加完成，可以使用 &lt;code&gt;complete -c myprog ...&lt;/code&gt; 来启动完成命令。</target>
        </trans-unit>
        <trans-unit id="1ac6973627e50b5b3feef24cc873cca39ec65518" translate="yes" xml:space="preserve">
          <source>Standard error, FD 2, for writing errors and warnings, defaults to writing to the screen.</source>
          <target state="translated">标准误差,FD 2,用于书写错误和警告,默认为书写到屏幕上。</target>
        </trans-unit>
        <trans-unit id="8116e8803b0b4ccfe612ba1239d0a4c13eb0c484" translate="yes" xml:space="preserve">
          <source>Standard input, FD 0, for reading, defaults to reading from the keyboard.</source>
          <target state="translated">标准输入,FD 0,用于读取,默认为从键盘读取。</target>
        </trans-unit>
        <trans-unit id="fd08166eefe7793a02e0886b87576b866f11ba8d" translate="yes" xml:space="preserve">
          <source>Standard output, FD 1, for writing, defaults to writing to the screen.</source>
          <target state="translated">标准输出,FD 1,用于写入,默认为写入屏幕。</target>
        </trans-unit>
        <trans-unit id="b3883f88eaf74aa505b11f01894c4909220af6a1" translate="yes" xml:space="preserve">
          <source>Standards</source>
          <target state="translated">Standards</target>
        </trans-unit>
        <trans-unit id="8f0c324bc7ae0630cb203b31d62e67e8a3bc6740" translate="yes" xml:space="preserve">
          <source>Starting and Exiting</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="806c8aeb75c45b416dcfcd215f384af2b2abda22" translate="yes" xml:space="preserve">
          <source>Startup (Where's .bashrc?)</source>
          <target state="translated">启动(.bashrc在哪里?</target>
        </trans-unit>
        <trans-unit id="d9d8d313fdc1a560ea8caf500b990c2077839155" translate="yes" xml:space="preserve">
          <source>Startup time and memory usage is improved, etc.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b3cfed68ddc06bae90fd47f85fdeed65b5766e4e" translate="yes" xml:space="preserve">
          <source>Support for italics, dim, reverse, and other modes is not guaranteed in all terminal emulators. Fish attempts to determine if the terminal supports these modes even if the terminfo database may not be up-to-date.</source>
          <target state="translated">并非所有的终端仿真器都能保证支持斜体、dim、反转和其他模式。Fish试图确定终端是否支持这些模式,即使terminfo数据库可能不是最新的。</target>
        </trans-unit>
        <trans-unit id="d269dff6a5e6def876fa34f03bd1eb013ca33acd" translate="yes" xml:space="preserve">
          <source>Switches differ between commands and are documented in the manual page for each command. Some switches are common to most command though, for example '&lt;code&gt;--help&lt;/code&gt;' will usually display a help text, '&lt;code&gt;-i&lt;/code&gt;' will often turn on interactive prompting before taking action, while '&lt;code&gt;-f&lt;/code&gt;' will turn it off.</source>
          <target state="translated">各个命令之间的开关有所不同，每个命令的手册页中对此进行了说明。但是，某些命令对于大多数命令是通用的，例如' &lt;code&gt;--help&lt;/code&gt; '通常会显示帮助文本，'- &lt;code&gt;-i&lt;/code&gt; '通常会在执行操作之前打开交互式提示，而' &lt;code&gt;-f&lt;/code&gt; '则会将其关闭。</target>
        </trans-unit>
        <trans-unit id="b5eb6066faf764d428231e3c214c4d783bbf5bcc" translate="yes" xml:space="preserve">
          <source>Switching to fish?</source>
          <target state="translated">换成鱼?</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
