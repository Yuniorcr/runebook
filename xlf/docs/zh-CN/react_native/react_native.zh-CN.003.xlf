<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="zh-CN" datatype="htmlbody" original="react_native">
    <body>
      <group id="react_native">
        <trans-unit id="4dce5e8a5780a0d999cb110e968f6ce86eadd905" translate="yes" xml:space="preserve">
          <source>If your app is targeting the Android &lt;code&gt;API level 23&lt;/code&gt; or greater, make sure you have the permission &lt;code&gt;android.permission.SYSTEM_ALERT_WINDOW&lt;/code&gt; enabled for the development build. You can check this with &lt;code&gt;Settings.canDrawOverlays(this);&lt;/code&gt;. This is required in dev builds because React Native development errors must be displayed above all the other windows. Due to the new permissions system introduced in the API level 23 (Android M), the user needs to approve it. This can be achieved by adding the following code to your Activity's in &lt;code&gt;onCreate()&lt;/code&gt; method.</source>
          <target state="translated">如果您的应用定位到Android &lt;code&gt;API level 23&lt;/code&gt; 或更高级别，请确保您已为开发版本启用权限 &lt;code&gt;android.permission.SYSTEM_ALERT_WINDOW&lt;/code&gt; 。您可以使用 &lt;code&gt;Settings.canDrawOverlays(this);&lt;/code&gt; 进行检查。。这在开发人员构建中是必需的，因为必须在所有其他窗口上方显示React Native开发错误。由于API级别23（Android M）中引入了新的权限系统，因此用户需要批准它。这可以通过在 &lt;code&gt;onCreate()&lt;/code&gt; 方法中的Activity中添加以下代码来实现。</target>
        </trans-unit>
        <trans-unit id="aaa442e9c8534c08d7ebc94f0ea858802d7e66dd" translate="yes" xml:space="preserve">
          <source>If your app is using &lt;a href=&quot;https://developer.apple.com/library/prerelease/ios/documentation/General/Conceptual/AppSearch/UniversalLinks.html&quot;&gt;Universal Links&lt;/a&gt;, you'll need to add the following code as well:</source>
          <target state="translated">如果您的应用程序使用&lt;a href=&quot;https://developer.apple.com/library/prerelease/ios/documentation/General/Conceptual/AppSearch/UniversalLinks.html&quot;&gt;Universal Links&lt;/a&gt;，则还需要添加以下代码：</target>
        </trans-unit>
        <trans-unit id="98f05ecc27e0540e6eadcbb6a7104c7b369c9d08" translate="yes" xml:space="preserve">
          <source>If your app was launched from an external url registered to your app you can access and handle it from any component you want with</source>
          <target state="translated">如果您的应用程序是从注册到您的应用程序的外部网址启动的,您可以从任何您想要的组件中访问和处理它。</target>
        </trans-unit>
        <trans-unit id="4ee31af7ae001109d3dabcf23621de35076babd7" translate="yes" xml:space="preserve">
          <source>If your application needs to access HTTP resources on production, see &lt;a href=&quot;http://ste.vn/2015/06/10/configuring-app-transport-security-ios-9-osx-10-11/&quot;&gt;this post&lt;/a&gt; to learn how to configure ATS on your project.</source>
          <target state="translated">如果您的应用程序需要访问生产环境中的HTTP资源，请参阅&lt;a href=&quot;http://ste.vn/2015/06/10/configuring-app-transport-security-ios-9-osx-10-11/&quot;&gt;此文章&lt;/a&gt;以了解如何在项目上配置ATS。</target>
        </trans-unit>
        <trans-unit id="de744dbb2078d4140232bc4870a395c91664c0b4" translate="yes" xml:space="preserve">
          <source>If your pull request is merged, a core contributor will update the &lt;a href=&quot;https://github.com/facebook/react-native/wiki/Breaking-Changes&quot;&gt;list of breaking changes&lt;/a&gt; which is then used to populate the release notes.</source>
          <target state="translated">如果合并了您的请求请求，则核心贡献者将更新&lt;a href=&quot;https://github.com/facebook/react-native/wiki/Breaking-Changes&quot;&gt;重大更改列表，&lt;/a&gt;然后将其用于填充发行说明。</target>
        </trans-unit>
        <trans-unit id="b071d71588767fbde5b53687390f45cfe83ec688" translate="yes" xml:space="preserve">
          <source>If your trace .html file isn't opening correctly, check your browser console for the following:</source>
          <target state="translated">如果你的 trace .html 文件不能正确打开,请检查你的浏览器控制台是否有以下内容。</target>
        </trans-unit>
        <trans-unit id="50e19fda0d5b4b74a4a1a1d584e56578693a4ea4" translate="yes" xml:space="preserve">
          <source>Image</source>
          <target state="translated">Image</target>
        </trans-unit>
        <trans-unit id="8c5c533b00a53925bd9f4a98f7ccff66e76090ea" translate="yes" xml:space="preserve">
          <source>Image Style Props</source>
          <target state="translated">形象风格道具</target>
        </trans-unit>
        <trans-unit id="6360007aa3a70f902fe0a85400a1fb4956f0cc71" translate="yes" xml:space="preserve">
          <source>Image Style Props#backfaceVisibility</source>
          <target state="translated">形象风格道具#背影可见度</target>
        </trans-unit>
        <trans-unit id="56309d89b5b2b19b4623a34cb1f32940a76268c4" translate="yes" xml:space="preserve">
          <source>Image Style Props#backgroundColor</source>
          <target state="translated">图片风格道具#背景色</target>
        </trans-unit>
        <trans-unit id="9add8bde56efc96be61947f8609eb01acdc98836" translate="yes" xml:space="preserve">
          <source>Image Style Props#borderBottomLeftRadius</source>
          <target state="translated">图片样式道具#borderBottomLeftRadius</target>
        </trans-unit>
        <trans-unit id="b3f7e6e54c04c772eb209d62fd7d3a60c4fcfa6a" translate="yes" xml:space="preserve">
          <source>Image Style Props#borderBottomRightRadius</source>
          <target state="translated">图片样式道具#borderBottomRightRadius</target>
        </trans-unit>
        <trans-unit id="f7417cb47e7052835f80fabb0fb9936f7eba0a7a" translate="yes" xml:space="preserve">
          <source>Image Style Props#borderColor</source>
          <target state="translated">图片样式道具#borderColor</target>
        </trans-unit>
        <trans-unit id="5c1de2555cfb05fcf4fab63060c8fac4e2e6d010" translate="yes" xml:space="preserve">
          <source>Image Style Props#borderRadius</source>
          <target state="translated">图片样式道具#borderRadius</target>
        </trans-unit>
        <trans-unit id="33c9b9b05b4e5e5270f71b36df4ba5a1e463f972" translate="yes" xml:space="preserve">
          <source>Image Style Props#borderTopLeftRadius</source>
          <target state="translated">图片样式道具#borderTopLeftRadius</target>
        </trans-unit>
        <trans-unit id="5a1593af2a4dfecb89ebfdaff451b00b4a4e9855" translate="yes" xml:space="preserve">
          <source>Image Style Props#borderTopRightRadius</source>
          <target state="translated">图片样式道具#borderTopRightRadius</target>
        </trans-unit>
        <trans-unit id="07c66755304bfa5179cbe0078bcfd8130de636c1" translate="yes" xml:space="preserve">
          <source>Image Style Props#borderWidth</source>
          <target state="translated">图片样式道具#borderWidth</target>
        </trans-unit>
        <trans-unit id="c39ce427826d1e92ee683fe8378673818561ca57" translate="yes" xml:space="preserve">
          <source>Image Style Props#opacity</source>
          <target state="translated">形象风格道具#opacity</target>
        </trans-unit>
        <trans-unit id="80bb9b287f00435d399189076653ef5eb34954eb" translate="yes" xml:space="preserve">
          <source>Image Style Props#overflow</source>
          <target state="translated">形象风格道具#溢出</target>
        </trans-unit>
        <trans-unit id="755c426af6001cae6b96811ee1d4de390837e05a" translate="yes" xml:space="preserve">
          <source>Image Style Props#overlayColor</source>
          <target state="translated">图片样式道具#overlay颜色</target>
        </trans-unit>
        <trans-unit id="7dbe449e0816cbf8654e221a98937985d50f80e3" translate="yes" xml:space="preserve">
          <source>Image Style Props#resizeMode</source>
          <target state="translated">图片样式道具#resizeMode</target>
        </trans-unit>
        <trans-unit id="34f54d48e1951db1b94b0d2631929017fbe4f2d4" translate="yes" xml:space="preserve">
          <source>Image Style Props#tintColor</source>
          <target state="translated">图片样式道具#tintColor</target>
        </trans-unit>
        <trans-unit id="39267d96003d854c250bdbe985f15197d117936e" translate="yes" xml:space="preserve">
          <source>Image decoding can take more than a frame-worth of time. This is one of the major sources of frame drops on the web because decoding is done in the main thread. In React Native, image decoding is done in a different thread. In practice, you already need to handle the case when the image is not downloaded yet, so displaying the placeholder for a few more frames while it is decoding does not require any code change.</source>
          <target state="translated">图像解码可能需要超过一帧的时间。这是网络上掉帧的主要来源之一,因为解码是在主线程中完成的。在React Native中,图像解码是在不同的线程中完成的。在实际操作中,你已经需要处理图片还没有下载的情况,所以在解码时多显示几帧占位符,不需要修改任何代码。</target>
        </trans-unit>
        <trans-unit id="b337e6c582ddf3b1ead5a398bf472e2119f7086d" translate="yes" xml:space="preserve">
          <source>Image#accessibilityLabel</source>
          <target state="translated">Image#accessibilityLabel</target>
        </trans-unit>
        <trans-unit id="f2464ea3c0bd176b9a319e4ae61b49739ca68977" translate="yes" xml:space="preserve">
          <source>Image#accessible</source>
          <target state="translated">Image#accessible</target>
        </trans-unit>
        <trans-unit id="c6ed678a566b4371d03963b648b886f3bc11d41e" translate="yes" xml:space="preserve">
          <source>Image#blurRadius</source>
          <target state="translated">Image#blurRadius</target>
        </trans-unit>
        <trans-unit id="61a49975b526248367fe350848473b0e1e0458cf" translate="yes" xml:space="preserve">
          <source>Image#capInsets</source>
          <target state="translated">Image#capInsets</target>
        </trans-unit>
        <trans-unit id="b1ac84e3bcfd56648a17c0b55c26b6350ee5842b" translate="yes" xml:space="preserve">
          <source>Image#defaultSource</source>
          <target state="translated">Image#defaultSource</target>
        </trans-unit>
        <trans-unit id="e8c59d23b11629f71fdc365a1c93c96b9e6d3506" translate="yes" xml:space="preserve">
          <source>Image#fadeDuration</source>
          <target state="translated">Image#fadeDuration</target>
        </trans-unit>
        <trans-unit id="ba2d64794aa5cb2a9d18ca73fc5731241b4f31ec" translate="yes" xml:space="preserve">
          <source>Image#loadingIndicatorSource</source>
          <target state="translated">Image#loadingIndicatorSource</target>
        </trans-unit>
        <trans-unit id="9b2ba4f63e98a02b5630f7513b4f3f192785eb79" translate="yes" xml:space="preserve">
          <source>Image#onError</source>
          <target state="translated">Image#onError</target>
        </trans-unit>
        <trans-unit id="6a59b3b2cec80aee0bdbe81cd49d8d0b41646ffc" translate="yes" xml:space="preserve">
          <source>Image#onLayout</source>
          <target state="translated">Image#onLayout</target>
        </trans-unit>
        <trans-unit id="6adb33e0f63e8c43ca6044c3c9fd1c51bf19ef9d" translate="yes" xml:space="preserve">
          <source>Image#onLoad</source>
          <target state="translated">Image#onLoad</target>
        </trans-unit>
        <trans-unit id="d858965720c8875e7a6d4c65d062a989d0996520" translate="yes" xml:space="preserve">
          <source>Image#onLoadEnd</source>
          <target state="translated">Image#onLoadEnd</target>
        </trans-unit>
        <trans-unit id="df7471b3cf3a087d2864b62d495b835b6926188d" translate="yes" xml:space="preserve">
          <source>Image#onLoadStart</source>
          <target state="translated">Image#onLoadStart</target>
        </trans-unit>
        <trans-unit id="0dd8618d167e58725426e54924b9ba510796389b" translate="yes" xml:space="preserve">
          <source>Image#onPartialLoad</source>
          <target state="translated">Image#onPartialLoad</target>
        </trans-unit>
        <trans-unit id="7d72e00914045da88c364ca5160503976eab5053" translate="yes" xml:space="preserve">
          <source>Image#onProgress</source>
          <target state="translated">Image#onProgress</target>
        </trans-unit>
        <trans-unit id="e0f72be811d2177d1bd9ab7a021afd525a42adda" translate="yes" xml:space="preserve">
          <source>Image#resizeMethod</source>
          <target state="translated">Image#resizeMethod</target>
        </trans-unit>
        <trans-unit id="69672407538424076770a069f0004ce302d2c707" translate="yes" xml:space="preserve">
          <source>Image#resizeMode</source>
          <target state="translated">Image#resizeMode</target>
        </trans-unit>
        <trans-unit id="51b5f35be8333f919a7cf0e8e06b5fd85883cb6c" translate="yes" xml:space="preserve">
          <source>Image#source</source>
          <target state="translated">Image#source</target>
        </trans-unit>
        <trans-unit id="ad81d87d1135201e22fdba829089f12d6ab706b2" translate="yes" xml:space="preserve">
          <source>Image#style</source>
          <target state="translated">Image#style</target>
        </trans-unit>
        <trans-unit id="71239bb48099edb1d4644fa02a95c0173b882443" translate="yes" xml:space="preserve">
          <source>Image#testID</source>
          <target state="translated">Image#testID</target>
        </trans-unit>
        <trans-unit id="8ca86e3bc27d617d3d6e586b4cc1696af8994643" translate="yes" xml:space="preserve">
          <source>Image.abortPrefetch()</source>
          <target state="translated">Image.abortPrefetch()</target>
        </trans-unit>
        <trans-unit id="355cf5ba48ce573fce95cc9c79a4686a05a2c55e" translate="yes" xml:space="preserve">
          <source>Image.getSize()</source>
          <target state="translated">Image.getSize()</target>
        </trans-unit>
        <trans-unit id="12caafdca3a045f516d15610dcbd2caba02bfe13" translate="yes" xml:space="preserve">
          <source>Image.prefetch()</source>
          <target state="translated">Image.prefetch()</target>
        </trans-unit>
        <trans-unit id="293951de4209dc5716afde3c99f6d635441142e8" translate="yes" xml:space="preserve">
          <source>Image.propTypes.source</source>
          <target state="translated">Image.propTypes.source</target>
        </trans-unit>
        <trans-unit id="dfb24e8ec9e1fed4b555d915c132c62e823c913a" translate="yes" xml:space="preserve">
          <source>Image.queryCache()</source>
          <target state="translated">Image.queryCache()</target>
        </trans-unit>
        <trans-unit id="8b59a6916d8b5acbadead1b04470f8d353ac02e6" translate="yes" xml:space="preserve">
          <source>Image.resolveAssetSource()</source>
          <target state="translated">Image.resolveAssetSource()</target>
        </trans-unit>
        <trans-unit id="a7dd41960b210947bc9f838a2420ec4d33803a0a" translate="yes" xml:space="preserve">
          <source>ImageEditor</source>
          <target state="translated">ImageEditor</target>
        </trans-unit>
        <trans-unit id="37aa9783e936dc421e1783409106a00e756beddf" translate="yes" xml:space="preserve">
          <source>ImageEditor.cropImage()</source>
          <target state="translated">ImageEditor.cropImage()</target>
        </trans-unit>
        <trans-unit id="a3772798520a741b08253540b5cc42d47b2b2f42" translate="yes" xml:space="preserve">
          <source>ImagePickerIOS</source>
          <target state="translated">ImagePickerIOS</target>
        </trans-unit>
        <trans-unit id="2c279cb5944d1b309d11f72907a0be7966c4c3a9" translate="yes" xml:space="preserve">
          <source>ImagePickerIOS.canRecordVideos()</source>
          <target state="translated">ImagePickerIOS.canRecordVideos()</target>
        </trans-unit>
        <trans-unit id="64bfcb1b4ceb9a9584337868d5d90fd06cbe4518" translate="yes" xml:space="preserve">
          <source>ImagePickerIOS.canUseCamera()</source>
          <target state="translated">ImagePickerIOS.canUseCamera()</target>
        </trans-unit>
        <trans-unit id="58016833b6085d003039c6dba28d6e65bae1398f" translate="yes" xml:space="preserve">
          <source>ImagePickerIOS.openCameraDialog()</source>
          <target state="translated">ImagePickerIOS.openCameraDialog()</target>
        </trans-unit>
        <trans-unit id="e7a8164d74a98ce5c8f764a29f58c3fc63c11423" translate="yes" xml:space="preserve">
          <source>ImagePickerIOS.openSelectDialog()</source>
          <target state="translated">ImagePickerIOS.openSelectDialog()</target>
        </trans-unit>
        <trans-unit id="95ca3be166241ae2ac9d1ef221159d431668c3ae" translate="yes" xml:space="preserve">
          <source>ImageSourcePropType</source>
          <target state="translated">ImageSourcePropType</target>
        </trans-unit>
        <trans-unit id="1070ca4be0a47e9e57f07e563e65f4b458a0c23a" translate="yes" xml:space="preserve">
          <source>ImageStore</source>
          <target state="translated">ImageStore</target>
        </trans-unit>
        <trans-unit id="d41b4164a5854a08896831496267bd263e4802d3" translate="yes" xml:space="preserve">
          <source>ImageStore.addImageFromBase64()</source>
          <target state="translated">ImageStore.addImageFromBase64()</target>
        </trans-unit>
        <trans-unit id="70786d2d1632277bd01c1713a2db93bce6702203" translate="yes" xml:space="preserve">
          <source>ImageStore.getBase64ForTag()</source>
          <target state="translated">ImageStore.getBase64ForTag()</target>
        </trans-unit>
        <trans-unit id="5e3f70c435dcaa51e435b99fc70d3c43ff9c55ff" translate="yes" xml:space="preserve">
          <source>ImageStore.hasImageForTag()</source>
          <target state="translated">ImageStore.hasImageForTag()</target>
        </trans-unit>
        <trans-unit id="5933651cb798d84b8726b19f0ce47b74be536673" translate="yes" xml:space="preserve">
          <source>ImageStore.removeImageForTag()</source>
          <target state="translated">ImageStore.removeImageForTag()</target>
        </trans-unit>
        <trans-unit id="7dce2b6efa909e6f8dcedec2f041b5e0a83839c9" translate="yes" xml:space="preserve">
          <source>ImageView example</source>
          <target state="translated">ImageView示例</target>
        </trans-unit>
        <trans-unit id="09e871c98fef3b901a775def173e4126aaf73b42" translate="yes" xml:space="preserve">
          <source>Images</source>
          <target state="translated">Images</target>
        </trans-unit>
        <trans-unit id="51638280417782dfdf7aba6b4e249182aab00a7e" translate="yes" xml:space="preserve">
          <source>Images From Hybrid App's Resources</source>
          <target state="translated">图片来自Hybrid App的资源</target>
        </trans-unit>
        <trans-unit id="a284be73b73b17edd9ab4e426ef62520cf9f80e8" translate="yes" xml:space="preserve">
          <source>Images can be distributed via &lt;a href=&quot;https://www.npmjs.com/&quot;&gt;npm&lt;/a&gt; packages.</source>
          <target state="translated">可以通过&lt;a href=&quot;https://www.npmjs.com/&quot;&gt;npm&lt;/a&gt;软件包分发图像。</target>
        </trans-unit>
        <trans-unit id="2f60beeeabd90921cfba3a8f4a4654f41d91ab6d" translate="yes" xml:space="preserve">
          <source>Images live in the same folder as your JavaScript code. Components are self-contained.</source>
          <target state="translated">图片与您的JavaScript代码在同一个文件夹中。组件是独立的。</target>
        </trans-unit>
        <trans-unit id="7b23118164c45f40d6a4161daedd82cb58b0ebb7" translate="yes" xml:space="preserve">
          <source>Imperative API</source>
          <target state="translated">Imperative API</target>
        </trans-unit>
        <trans-unit id="a79917180f909d9c0fc43e59c743a8410235813c" translate="yes" xml:space="preserve">
          <source>Implement the &lt;code&gt;-(UIView *)view&lt;/code&gt; method.</source>
          <target state="translated">实现 &lt;code&gt;-(UIView *)view&lt;/code&gt; 方法。</target>
        </trans-unit>
        <trans-unit id="8526b1e6fb2eda76949ddbd26803bcefb0611c70" translate="yes" xml:space="preserve">
          <source>Implement the &lt;code&gt;createViewInstance&lt;/code&gt; method</source>
          <target state="translated">实现 &lt;code&gt;createViewInstance&lt;/code&gt; 方法</target>
        </trans-unit>
        <trans-unit id="2d0a82af95db0ebb0c72ae688fcc12ba8e22cde7" translate="yes" xml:space="preserve">
          <source>Implement the JavaScript module</source>
          <target state="translated">实现JavaScript模块</target>
        </trans-unit>
        <trans-unit id="235c00c42b79d6977766e986091bda5a3658ee7b" translate="yes" xml:space="preserve">
          <source>Importing the &lt;code&gt;AsyncStorage&lt;/code&gt; library:</source>
          <target state="translated">导入 &lt;code&gt;AsyncStorage&lt;/code&gt; 库：</target>
        </trans-unit>
        <trans-unit id="b5a413c6f8ac17cdc486b6f7d5ac5fdb0536f33f" translate="yes" xml:space="preserve">
          <source>Improving User Experience</source>
          <target state="translated">改善用户体验</target>
        </trans-unit>
        <trans-unit id="9e692da0d96c8c8a03ea6bc2d2377e97d825d01d" translate="yes" xml:space="preserve">
          <source>In &lt;a href=&quot;integration-with-existing-apps&quot;&gt;Integrating with Existing Apps guide&lt;/a&gt; and &lt;a href=&quot;native-components-ios&quot;&gt;Native UI Components guide&lt;/a&gt; we learn how to embed React Native in a native component and vice versa. When we mix native and React Native components, we'll eventually find a need to communicate between these two worlds. Some ways to achieve that have been already mentioned in other guides. This article summarizes available techniques.</source>
          <target state="translated">在&lt;a href=&quot;integration-with-existing-apps&quot;&gt;与现有应用程序集成指南&lt;/a&gt;和本&lt;a href=&quot;native-components-ios&quot;&gt;机UI组件指南中，&lt;/a&gt;我们学习了如何将React Native嵌入本机组件中，反之亦然。当我们将本机组件和React Native组件混合在一起时，我们最终会发现需要在这两个世界之间进行通信。其他指南中已经提到了实现该目标的一些方法。本文总结了可用的技术。</target>
        </trans-unit>
        <trans-unit id="a152f4512b64864e90c837df9e4edd46575f17d9" translate="yes" xml:space="preserve">
          <source>In &lt;code&gt;AppDelegate.m&lt;/code&gt;, change the default &lt;code&gt;jsCodeLocation&lt;/code&gt; to point to the static bundle that is built in Release.</source>
          <target state="translated">在 &lt;code&gt;AppDelegate.m&lt;/code&gt; 中，更改默认的 &lt;code&gt;jsCodeLocation&lt;/code&gt; 以指向Release中内置的静态包。</target>
        </trans-unit>
        <trans-unit id="a6bc0e0d593d24e4d4f970077db7780e069d167a" translate="yes" xml:space="preserve">
          <source>In &lt;code&gt;android/app/build.gradle&lt;/code&gt;, add these lines in the &lt;code&gt;dependencies&lt;/code&gt; section:</source>
          <target state="translated">在 &lt;code&gt;android/app/build.gradle&lt;/code&gt; 中，在 &lt;code&gt;dependencies&lt;/code&gt; 部分添加以下行：</target>
        </trans-unit>
        <trans-unit id="7926c883a0293675e8f8be78d90e4ae883635eff" translate="yes" xml:space="preserve">
          <source>In Android, Returns a Promise which always be resolved with action being &lt;code&gt;Share.sharedAction&lt;/code&gt;.</source>
          <target state="translated">在Android中，返回一个Promise，该错误始终可以通过操作 &lt;code&gt;Share.sharedAction&lt;/code&gt; 来解决。</target>
        </trans-unit>
        <trans-unit id="19a28a2a7148e6164e937f61d200eb6c120eb390" translate="yes" xml:space="preserve">
          <source>In CI/Xcode, YellowBoxes can also be disabled by setting the &lt;code&gt;IS_TESTING&lt;/code&gt; environment variable.</source>
          <target state="translated">在CI / Xcode中，还可以通过设置 &lt;code&gt;IS_TESTING&lt;/code&gt; 环境变量来禁用YellowBoxes。</target>
        </trans-unit>
        <trans-unit id="2b5821fa6b351916edb7d5a84b625bd8542c8a45" translate="yes" xml:space="preserve">
          <source>In React Native &lt;code&gt;flex&lt;/code&gt; does not work the same way that it does in CSS. &lt;code&gt;flex&lt;/code&gt; is a number rather than a string, and it works according to the &lt;code&gt;Yoga&lt;/code&gt; library at &lt;a href=&quot;https://github.com/facebook/yoga&quot;&gt;https://github.com/facebook/yoga&lt;/a&gt;</source>
          <target state="translated">在React Native中， &lt;code&gt;flex&lt;/code&gt; 的工作方式不同于CSS。 &lt;code&gt;flex&lt;/code&gt; 是一个数字而不是字符串，它根据位于&lt;a href=&quot;https://github.com/facebook/yoga&quot;&gt;https://github.com/facebook/yoga&lt;/a&gt;的 &lt;code&gt;Yoga&lt;/code&gt; 库工作</target>
        </trans-unit>
        <trans-unit id="76fcbd0e97162a2bcc2013ddc0ae752eb32ffba3" translate="yes" xml:space="preserve">
          <source>In React Native, everything in JavaScript and within the layout engine works with arbitrary precision numbers. It's only when we set the position and dimensions of the native element on the main thread that we round. Also, rounding is done relative to the root rather than the parent, again to avoid accumulating rounding errors.</source>
          <target state="translated">在React Native中,JavaScript中和布局引擎内的所有内容都是以任意精度的数字工作的。只有当我们在主线程上设置原生元素的位置和尺寸时,才会进行四舍五入。另外,四舍五入是相对于根节点而不是父节点进行的,同样是为了避免积累四舍五入的错误。</target>
        </trans-unit>
        <trans-unit id="c46917940fef2c57973d76799b9a5ffc011e03f0" translate="yes" xml:space="preserve">
          <source>In React Native, one interesting decision is that the &lt;code&gt;src&lt;/code&gt; attribute is named &lt;code&gt;source&lt;/code&gt; and doesn't take a string but an object with a &lt;code&gt;uri&lt;/code&gt; attribute.</source>
          <target state="translated">在React Native中，一个有趣的决定是 &lt;code&gt;src&lt;/code&gt; 属性被命名为 &lt;code&gt;source&lt;/code&gt; ,而不是字符串，而是带有 &lt;code&gt;uri&lt;/code&gt; 属性的对象。</target>
        </trans-unit>
        <trans-unit id="d1b382d1720a60707916dcf8c7aa99f2b1a670f2" translate="yes" xml:space="preserve">
          <source>In React Native, we are more strict about it: &lt;strong&gt;you must wrap all the text nodes inside of a &lt;code&gt;&amp;lt;Text&amp;gt;&lt;/code&gt; component&lt;/strong&gt;. You cannot have a text node directly under a &lt;code&gt;&amp;lt;View&amp;gt;&lt;/code&gt;.</source>
          <target state="translated">在React Native中，我们对此更加严格：&lt;strong&gt;您必须将所有文本节点包装在 &lt;code&gt;&amp;lt;Text&amp;gt;&lt;/code&gt; 组件内&lt;/strong&gt;。您不能在 &lt;code&gt;&amp;lt;View&amp;gt;&lt;/code&gt; 下直接有一个文本节点。</target>
        </trans-unit>
        <trans-unit id="ac5120423c0eb7b5f46770a32594f0c289b45389" translate="yes" xml:space="preserve">
          <source>In Xcode, in the build phase, include &lt;code&gt;export BUNDLE_CONFIG=&quot;packager/config.js&quot;&lt;/code&gt;.</source>
          <target state="translated">在Xcode中，在构建阶段，包括 &lt;code&gt;export BUNDLE_CONFIG=&quot;packager/config.js&quot;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="6097be63bbb1a85b6d0d9aea1f36f05239be49e0" translate="yes" xml:space="preserve">
          <source>In a new Chrome tab, open: &lt;code&gt;chrome://inspect&lt;/code&gt;, then click on the 'Inspect device' item next to &quot;Powered by Stetho&quot;.</source>
          <target state="translated">在新的Chrome标签中，打开： &lt;code&gt;chrome://inspect&lt;/code&gt; ，然后单击&amp;ldquo; Powered by Stetho&amp;rdquo;旁边的&amp;ldquo;检查设备&amp;rdquo;项。</target>
        </trans-unit>
        <trans-unit id="4ccec902d198f16a24d269c65ded72bd7a9f322d" translate="yes" xml:space="preserve">
          <source>In a real application, you probably won't be setting state with a timer. You might set state when you have new data arrived from the server, or from user input. You can also use a state container like &lt;a href=&quot;https://redux.js.org/&quot;&gt;Redux&lt;/a&gt; or &lt;a href=&quot;https://mobx.js.org/&quot;&gt;Mobx&lt;/a&gt; to control your data flow. In that case you would use Redux or Mobx to modify your state rather than calling &lt;code&gt;setState&lt;/code&gt; directly.</source>
          <target state="translated">在实际的应用程序中，您可能不会使用计时器来设置状态。当您从服务器或用户输入获得新数据时，可以设置状态。您还可以使用&lt;a href=&quot;https://redux.js.org/&quot;&gt;Redux&lt;/a&gt;或&lt;a href=&quot;https://mobx.js.org/&quot;&gt;Mobx之&lt;/a&gt;类的状态容器来控制数据流。在这种情况下，您可以使用Redux或Mobx修改状态，而不是直接调用 &lt;code&gt;setState&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="a7726cc8a97d77a415671bda45b864972c986975" translate="yes" xml:space="preserve">
          <source>In accordance with the ancient traditions of our people, we must first build an app that does nothing except say &quot;Hello world&quot;. Here it is:</source>
          <target state="translated">按照我们民族的古老传统,我们首先要做一个除了说 &quot;世界你好 &quot;之外什么都不做的App。它就在这里。</target>
        </trans-unit>
        <trans-unit id="b22b1af7d49ce0f6829b1f9db5d87a8afc4e4f24" translate="yes" xml:space="preserve">
          <source>In addition to implementing the &lt;code&gt;RCTBridgeModule&lt;/code&gt; protocol, your class must also include the &lt;code&gt;RCT_EXPORT_MODULE()&lt;/code&gt; macro. This takes an optional argument that specifies the name that the module will be accessible as in your JavaScript code (more on this later). If you do not specify a name, the JavaScript module name will match the Objective-C class name. If the Objective-C class name begins with RCT, the JavaScript module name will exclude the RCT prefix.</source>
          <target state="translated">除了实现 &lt;code&gt;RCTBridgeModule&lt;/code&gt; 协议之外，您的类还必须包含 &lt;code&gt;RCT_EXPORT_MODULE()&lt;/code&gt; 宏。这带有一个可选参数，该参数指定可访问模块的名称，就像您的JavaScript代码一样（稍后会对此进行详细介绍）。如果您未指定名称，则JavaScript模块名称将与Objective-C类名称匹配。如果Objective-C类名称以RCT开头，则JavaScript模块名称将排除RCT前缀。</target>
        </trans-unit>
        <trans-unit id="5ea038fc3028ad2e0507ab2903e4073435e0b31d" translate="yes" xml:space="preserve">
          <source>In addition to this documentation, you might find &lt;a href=&quot;https://code.facebook.com/posts/435862739941212/making-react-native-apps-accessible/&quot;&gt;this blog post&lt;/a&gt; about React Native accessibility to be useful.</source>
          <target state="translated">除了本文档之外，您可能会发现有关React Native可访问性的&lt;a href=&quot;https://code.facebook.com/posts/435862739941212/making-react-native-apps-accessible/&quot;&gt;博客文章&lt;/a&gt;很有用。</target>
        </trans-unit>
        <trans-unit id="8cb6bbac86f5ee212c137b07d10c9209532e725a" translate="yes" xml:space="preserve">
          <source>In general, for events that have capture equivalents, we update the gestureState once in the capture phase and can use it in the bubble phase as well.</source>
          <target state="translated">一般来说,对于有捕捉等价物的事件,我们在捕捉阶段更新一次手势状态,也可以在气泡阶段使用。</target>
        </trans-unit>
        <trans-unit id="ddb759ac682956e12deab7f3c66a75baa8c370df" translate="yes" xml:space="preserve">
          <source>In general, you should initialize &lt;code&gt;state&lt;/code&gt; in the constructor, and then call &lt;code&gt;setState&lt;/code&gt; when you want to change it.</source>
          <target state="translated">通常，应该在构造函数中初始化 &lt;code&gt;state&lt;/code&gt; ，然后在要更改状态时调用 &lt;code&gt;setState&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="81e8a0bc340ac9147d65ffcf339a7be218a45c99" translate="yes" xml:space="preserve">
          <source>In iOS, Returns a Promise which will be invoked an object containing &lt;code&gt;action&lt;/code&gt;, &lt;code&gt;activityType&lt;/code&gt;. If the user dismissed the dialog, the Promise will still be resolved with action being &lt;code&gt;Share.dismissedAction&lt;/code&gt; and all the other keys being undefined.</source>
          <target state="translated">在IOS，返回一个其中的承诺，将调用一个包含对象 &lt;code&gt;action&lt;/code&gt; ， &lt;code&gt;activityType&lt;/code&gt; 。如果用户关闭了该对话框，则Promise仍将通过操作 &lt;code&gt;Share.dismissedAction&lt;/code&gt; 和所有其他键都未定义来解决。</target>
        </trans-unit>
        <trans-unit id="04102f59a613de1f9c1de0ed54266fef55ec5694" translate="yes" xml:space="preserve">
          <source>In iOS, invoking &lt;code&gt;vibrate(duration)&lt;/code&gt; will just ignore the duration and vibrate for a fixed time. While the &lt;code&gt;pattern&lt;/code&gt; array is used to define the duration between each vibration. See below example for more.</source>
          <target state="translated">在iOS中，调用 &lt;code&gt;vibrate(duration)&lt;/code&gt; 只会忽略持续时间，而是振动固定的时间。虽然 &lt;code&gt;pattern&lt;/code&gt; 阵列被用来定义每个振动之间的持续时间。有关更多信息，请参见下面的示例。</target>
        </trans-unit>
        <trans-unit id="f10484f84cb375899f3cc9b98a2a11d0878eac08" translate="yes" xml:space="preserve">
          <source>In iOS, you can specify positions and dimensions for elements with arbitrary precision, for example 29.674825. But, ultimately the physical display only have a fixed number of pixels, for example 640&amp;times;960 for iPhone 4 or 750&amp;times;1334 for iPhone 6. iOS tries to be as faithful as possible to the user value by spreading one original pixel into multiple ones to trick the eye. The downside of this technique is that it makes the resulting element look blurry.</source>
          <target state="translated">在iOS中，您可以为任意精度的元素指定位置和尺寸，例如29.674825。但是，最终物理显示器只能具有固定数量的像素，例如，iPhone 4的像素为640&amp;times;960或iPhone 6的像素为750&amp;times;1334。iOS试图通过将一个原始像素扩展为多个像素来尽可能忠实于用户价值。欺骗眼睛。这种技术的缺点是会使生成的元素看起来模糊。</target>
        </trans-unit>
        <trans-unit id="674575eeee2b7537d14ef2a7098fd5a50863e02e" translate="yes" xml:space="preserve">
          <source>In most cases, React Native will use &lt;a href=&quot;http://trac.webkit.org/wiki/JavaScriptCore&quot;&gt;JavaScriptCore&lt;/a&gt;, the JavaScript engine that powers Safari. Note that on iOS, JavaScriptCore does not use JIT due to the absence of writable executable memory in iOS apps.</source>
          <target state="translated">在大多数情况下，React Native将使用&lt;a href=&quot;http://trac.webkit.org/wiki/JavaScriptCore&quot;&gt;JavaScriptCore&lt;/a&gt;（支持Safari的JavaScript引擎）。请注意，在iOS上，由于iOS应用程序中没有可写的可执行内存，因此JavaScriptCore不使用JIT。</target>
        </trans-unit>
        <trans-unit id="bcbf4897c8e38bed0ff74ff7fb8a56357f8a33f4" translate="yes" xml:space="preserve">
          <source>In most cases, React Native will use &lt;a href=&quot;https://trac.webkit.org/wiki/JavaScriptCore&quot;&gt;JavaScriptCore&lt;/a&gt;, the JavaScript engine that powers Safari. Note that on iOS, JavaScriptCore does not use JIT due to the absence of writable executable memory in iOS apps.</source>
          <target state="translated">在大多数情况下，React Native将使用&lt;a href=&quot;https://trac.webkit.org/wiki/JavaScriptCore&quot;&gt;JavaScriptCore&lt;/a&gt;（支持Safari的JavaScript引擎）。请注意，在iOS上，由于iOS应用程序中没有可写的可执行内存，因此JavaScriptCore不使用JIT。</target>
        </trans-unit>
        <trans-unit id="910211ee00a0e6209d566d965e74d12ab68f5189" translate="yes" xml:space="preserve">
          <source>In most cases, you will be using &lt;code&gt;timing()&lt;/code&gt;. By default, it uses a symmetric easeInOut curve that conveys the gradual acceleration of an object to full speed and concludes by gradually decelerating to a stop.</source>
          <target state="translated">在大多数情况下，您将使用 &lt;code&gt;timing()&lt;/code&gt; 。默认情况下，它使用对称的easeInOut曲线，该曲线将对象的逐渐加速度传递到全速，并通过逐渐减速到停止而得出结论。</target>
        </trans-unit>
        <trans-unit id="bf2086f1e259a4a392acebbc3a9d1e6d5a728fdb" translate="yes" xml:space="preserve">
          <source>In order for this to work, the image name in &lt;code&gt;require&lt;/code&gt; has to be known statically.</source>
          <target state="translated">为了使它起作用，必须静态地知道 &lt;code&gt;require&lt;/code&gt; 中的映像名称。</target>
        </trans-unit>
        <trans-unit id="ea7a8c93b489323fadfdc7447991977d0d42c66d" translate="yes" xml:space="preserve">
          <source>In order to accept your pull request, we need you to submit a CLA. You only need to do this once, so if you've done this for another Facebook open source project, you're good to go. If you are submitting a pull request for the first time, the Facebook GitHub Bot will reply with a link to the CLA form. You may also &lt;a href=&quot;https://code.facebook.com/cla&quot;&gt;complete your CLA here&lt;/a&gt;.</source>
          <target state="translated">为了接受您的拉取请求，我们需要您提交CLA。您只需要执行一次，因此，如果您为另一个Facebook开源项目执行了此操作，那么一切就很好了。如果您是第一次提交拉取请求，则Facebook GitHub Bot将回复并带有指向CLA表单的链接。您也可以&lt;a href=&quot;https://code.facebook.com/cla&quot;&gt;在此处完成CLA&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="24a808e816613f43ed3d16624d26b8d64abd010a" translate="yes" xml:space="preserve">
          <source>In order to constrain memory and enable smooth scrolling, content is rendered asynchronously offscreen. This means it's possible to scroll faster than the fill rate and momentarily see blank content. This is a tradeoff that can be adjusted to suit the needs of each application, and we are working on improving it behind the scenes.</source>
          <target state="translated">为了限制内存并实现平滑滚动,内容会在屏幕外异步呈现。这意味着可以用比填充率更快的速度滚动,并在瞬间看到空白内容。这是一种权衡,可以根据每个应用程序的需求进行调整,我们正在幕后努力改进它。</target>
        </trans-unit>
        <trans-unit id="92578a2e92ca35dc0d49ef7eb95d93bc7dc6b726" translate="yes" xml:space="preserve">
          <source>In order to constrain memory and enable smooth scrolling, content is rendered asynchronously offscreen. This means it's possible to scroll faster than the fill rate ands momentarily see blank content. This is a tradeoff that can be adjusted to suit the needs of each application, and we are working on improving it behind the scenes.</source>
          <target state="translated">为了限制内存和实现平滑滚动,内容在屏幕外异步渲染。这意味着它有可能比填充率更快地滚动,并在瞬间看到空白内容。这是一个可以调整的权衡,以适应每个应用程序的需求,我们正在努力在幕后改进它。</target>
        </trans-unit>
        <trans-unit id="ae7d1d9e6c828749514126ca7611a55d1a87f448" translate="yes" xml:space="preserve">
          <source>In order to embed a React Native view in a native component, we use &lt;code&gt;RCTRootView&lt;/code&gt;. &lt;code&gt;RCTRootView&lt;/code&gt; is a &lt;code&gt;UIView&lt;/code&gt; that holds a React Native app. It also provides an interface between native side and the hosted app.</source>
          <target state="translated">为了将React Native视图嵌入到本机组件中，我们使用 &lt;code&gt;RCTRootView&lt;/code&gt; 。 &lt;code&gt;RCTRootView&lt;/code&gt; 是一个拥有React Native应用程序的 &lt;code&gt;UIView&lt;/code&gt; 。它还提供了本机端与托管应用之间的接口。</target>
        </trans-unit>
        <trans-unit id="68d0661942c1a001aa6186d2733a4c0ccbc7723b" translate="yes" xml:space="preserve">
          <source>In order to enable geolocation in the background, you need to include the 'NSLocationAlwaysUsageDescription' key in Info.plist and add location as a background mode in the 'Capabilities' tab in Xcode.</source>
          <target state="translated">为了在后台启用地理位置,您需要在Info.plist中包含 &quot;NSLocationAlwaysUsageDescription &quot;键,并在Xcode的 &quot;Capabilities &quot;标签中添加位置作为后台模式。</target>
        </trans-unit>
        <trans-unit id="36fac543a4f3bcf76fefb50e3f690f45adaa6f2a" translate="yes" xml:space="preserve">
          <source>In order to export the following &lt;code&gt;NS_ENUM&lt;/code&gt; definition:</source>
          <target state="translated">为了导出以下 &lt;code&gt;NS_ENUM&lt;/code&gt; 定义：</target>
        </trans-unit>
        <trans-unit id="b2472ce0f77aa0308bc1d7c47297c235b38a4620" translate="yes" xml:space="preserve">
          <source>In order to fetch content from an arbitrary URL, just pass the URL to fetch:</source>
          <target state="translated">为了从一个任意的URL中获取内容,只需将URL传递给fetch。</target>
        </trans-unit>
        <trans-unit id="be6c3954eeda6cdbb0df5c0386e492c69eeeb985" translate="yes" xml:space="preserve">
          <source>In order to retrieve the image dimensions, the image may first need to be loaded or downloaded, after which it will be cached. This means that in principle you could use this method to preload images, however it is not optimized for that purpose, and may in future be implemented in a way that does not fully load/download the image data. A proper, supported way to preload images will be provided as a separate API.</source>
          <target state="translated">为了检索图像的尺寸,图像可能首先需要被加载或下载,之后它将被缓存。这意味着原则上你可以使用这个方法来预加载图像,但是它并没有为此目的进行优化,而且将来可能会以一种不完全加载/下载图像数据的方式来实现。一个适当的,支持预加载图片的方法将作为一个单独的API提供。</target>
        </trans-unit>
        <trans-unit id="29de373c280ba153dfe015062b1f799c1e3e91cc" translate="yes" xml:space="preserve">
          <source>In order to use this feature, you must give the view a &lt;code&gt;width&lt;/code&gt; and a &lt;code&gt;height&lt;/code&gt;.</source>
          <target state="translated">为了使用此功能，必须为视图提供 &lt;code&gt;width&lt;/code&gt; 和 &lt;code&gt;height&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="74b0b6ffa8c93d3c1e0c32ec01f2c02e93239f58" translate="yes" xml:space="preserve">
          <source>In our &lt;code&gt;CalendarManager&lt;/code&gt; example, we need to pass the event date to the native method. We can't send JavaScript Date objects over the bridge, so we need to convert the date to a string or number. We could write our native function like this:</source>
          <target state="translated">在我们的 &lt;code&gt;CalendarManager&lt;/code&gt; 示例中，我们需要将事件日期传递给本机方法。我们无法通过网桥发送JavaScript Date对象，因此我们需要将日期转换为字符串或数字。我们可以这样编写本机函数：</target>
        </trans-unit>
        <trans-unit id="022980e672ff7b84cb386ae6cb34258309a93ccb" translate="yes" xml:space="preserve">
          <source>In our sample application, you should see the link to the &quot;High Scores&quot; and then when you click on that you will see the rendering of your React Native component.</source>
          <target state="translated">在我们的示例应用程序中,你应该看到 &quot;高分 &quot;的链接,然后当你点击它时,你会看到你的React Native组件的渲染。</target>
        </trans-unit>
        <trans-unit id="3f03f8653a3635d5a271846463ac8553d8b4a256" translate="yes" xml:space="preserve">
          <source>In practice, we found out that developers do not want this feature and they have to work around it by doing manual rounding in order to avoid having blurry elements. In React Native, we are rounding all the pixels automatically.</source>
          <target state="translated">在实践中,我们发现开发者并不想要这个功能,他们不得不通过手动四舍五入来解决这个问题,以避免出现模糊的元素。在React Native中,我们是自动对所有的像素进行四舍五入。</target>
        </trans-unit>
        <trans-unit id="91245c415738f88190d194b089e8353e6c47e94e" translate="yes" xml:space="preserve">
          <source>In some cases we'd like to render content of initially unknown size. Let's say the size will be defined dynamically in JS. We have two solutions to this problem.</source>
          <target state="translated">在某些情况下,我们希望渲染最初未知大小的内容。比方说,大小将在JS中动态定义。我们有两种解决方案来解决这个问题。</target>
        </trans-unit>
        <trans-unit id="812c3f8420156c0cc75addd461d5feb1fd470a4f" translate="yes" xml:space="preserve">
          <source>In some cases you might only want to display an image if it is already in the local cache, i.e. a low resolution placeholder until a higher resolution is available. In other cases you do not care if the image is outdated and are willing to display an outdated image to save bandwidth. The &lt;code&gt;cache&lt;/code&gt; source property gives you control over how the network layer interacts with the cache.</source>
          <target state="translated">在某些情况下，您可能只想显示已在本地缓存中的图像，即低分辨率的占位符，直到获得更高的分辨率为止。在其他情况下，您不必担心图像是否过时，并愿意显示过时的图像以节省带宽。该 &lt;code&gt;cache&lt;/code&gt; 源属性使您能够控制如何与高速缓存中的网络层交互。</target>
        </trans-unit>
        <trans-unit id="20f41cbb42d5b469c12597899795121442a53dbe" translate="yes" xml:space="preserve">
          <source>In some cases, we also want to alert the end user of the type of selected component (i.e., that it is a &amp;ldquo;button&amp;rdquo;). If we were using native buttons, this would work automatically. Since we are using javascript, we need to provide a bit more context for TalkBack. To do so, you must specify the &amp;lsquo;accessibilityComponentType&amp;rsquo; property for any UI component. We support 'none', &amp;lsquo;button&amp;rsquo;, &amp;lsquo;radiobutton_checked&amp;rsquo; and &amp;lsquo;radiobutton_unchecked&amp;rsquo;.</source>
          <target state="translated">在某些情况下，我们还希望向最终用户警告所选组件的类型（即，它是一个&amp;ldquo;按钮&amp;rdquo;）。如果我们使用的是本机按钮，它将自动运行。由于我们使用的是JavaScript，因此我们需要为TalkBack提供更多上下文。为此，您必须为任何UI组件指定'accessibilityComponentType'属性。我们支持&amp;ldquo;无&amp;rdquo;，&amp;ldquo;按钮&amp;rdquo;，&amp;ldquo; radiobutton_checked&amp;rdquo;和&amp;ldquo; radiobutton_unchecked&amp;rdquo;。</target>
        </trans-unit>
        <trans-unit id="9abbf9f283b3679712e94067fa05f18e3f6b576a" translate="yes" xml:space="preserve">
          <source>In some cases, you may want to detect when a user presses and holds a view for a set amount of time. These long presses can be handled by passing a function to the &lt;code&gt;onLongPress&lt;/code&gt; props of any of the &quot;Touchable&quot; components.</source>
          <target state="translated">在某些情况下，您可能希望检测用户何时按下并按住视图一段时间。这些长按可以通过将函数传递给任何&amp;ldquo;可触摸&amp;rdquo;组件的 &lt;code&gt;onLongPress&lt;/code&gt; 道具来处理。</target>
        </trans-unit>
        <trans-unit id="71f2337faa495ca5ef3e6ef54c6c71bf35b76e58" translate="yes" xml:space="preserve">
          <source>In the above example method _addOne changes the state.count variable. As soon as an end user clicks the TouchableWithoutFeedback, TalkBack reads text in the Text view because of its 'accessibilityLiveRegion=&amp;rdquo;polite&amp;rdquo;' property.</source>
          <target state="translated">在上面的示例中，方法_addOne更改state.count变量。最终用户单击TouchableWithoutFeedback后，&amp;ldquo;话语提示&amp;rdquo;会因为其&amp;ldquo; accessibilityLiveRegion =&amp;rdquo; polite&amp;rdquo;&amp;rdquo;属性而在&amp;ldquo;文本&amp;rdquo;视图中读取文本。</target>
        </trans-unit>
        <trans-unit id="92e9fe0f0d5385aa01b72b3513d93f471802231f" translate="yes" xml:space="preserve">
          <source>In the above example we've created a custom radio button that now behaves like a native one. More specifically, TalkBack now correctly announces changes to the radio button selection.</source>
          <target state="translated">在上面的例子中,我们创建了一个自定义的单选按钮,现在它的行为就像一个本地的按钮。更具体地说,TalkBack现在可以正确地宣布单选按钮选择的变化。</target>
        </trans-unit>
        <trans-unit id="fbde756b5a311a1ef0ed5da7348f4d2a97e10530" translate="yes" xml:space="preserve">
          <source>In the above example, the &lt;code&gt;accessibilityLabel&lt;/code&gt; on the TouchableOpacity element would default to &quot;Press me!&quot;. The label is constructed by concatenating all Text node children separated by spaces.</source>
          <target state="translated">在上面的示例中，TouchableOpacity元素上的 &lt;code&gt;accessibilityLabel&lt;/code&gt; 将默认为&amp;ldquo; Press me！&amp;rdquo;。通过串联所有用空格分隔的Text节点子级来构造标签。</target>
        </trans-unit>
        <trans-unit id="a5f596b1a0316184b41548a0fa2ecc0f8e471e41" translate="yes" xml:space="preserve">
          <source>In the above example, the TouchableWithoutFeedback is being announced by TalkBack as a native Button.</source>
          <target state="translated">在上面的例子中,TouchableWithoutFeedback被TalkBack宣布为一个原生Button。</target>
        </trans-unit>
        <trans-unit id="718e0bfdd3fbbc40f568bbe3e4517aaa53cdcf72" translate="yes" xml:space="preserve">
          <source>In the above example, the yellow layout and its descendants are completely invisible to TalkBack and all other accessibility services. So we can easily use overlapping views with the same parent without confusing TalkBack.</source>
          <target state="translated">在上面的例子中,黄色布局和它的子代对于TalkBack和所有其他的可访问性服务来说是完全不可见的。所以我们可以很容易地使用同一父节点的重叠视图,而不会让TalkBack感到困惑。</target>
        </trans-unit>
        <trans-unit id="01feb0a2e522d636fe742d956c44104228e0c524" translate="yes" xml:space="preserve">
          <source>In the above example, we can't get accessibility focus separately on 'text one' and 'text two'. Instead we get focus on a parent view with 'accessible' property.</source>
          <target state="translated">在上面的例子中,我们不能将可访问性焦点分别放在 &quot;文本一 &quot;和 &quot;文本二 &quot;上。相反,我们得到的焦点是具有 &quot;可访问性 &quot;属性的父视图。</target>
        </trans-unit>
        <trans-unit id="8ec2d0e55cbf9bd6cfc55db5900a37f6ad0b5e24" translate="yes" xml:space="preserve">
          <source>In the case of two overlapping UI components with the same parent, default accessibility focus can have unpredictable behavior. The &amp;lsquo;importantForAccessibility&amp;rsquo; property will resolve this by controlling if a view fires accessibility events and if it is reported to accessibility services. It can be set to &amp;lsquo;auto&amp;rsquo;, &amp;lsquo;yes&amp;rsquo;, &amp;lsquo;no&amp;rsquo; and &amp;lsquo;no-hide-descendants&amp;rsquo; (the last value will force accessibility services to ignore the component and all of its children).</source>
          <target state="translated">如果两个重叠的UI组件具有相同的父对象，则默认可访问性焦点可能具有不可预测的行为。 &amp;ldquo; importantForAccessibility&amp;rdquo;属性将通过控制视图是否触发可访问性事件以及是否将其报告给可访问性服务来解决此问题。可以将其设置为&amp;ldquo; auto&amp;rdquo;，&amp;ldquo; yes&amp;rdquo;，&amp;ldquo; no&amp;rdquo;和&amp;ldquo; nohide-descendants&amp;rdquo;（最后一个值将强制可访问性服务忽略该组件及其所有子组件）。</target>
        </trans-unit>
        <trans-unit id="6b371653d647eec3c5f942f983f9a2a6b4018718" translate="yes" xml:space="preserve">
          <source>In the delegate method &lt;code&gt;-mapView:regionDidChangeAnimated:&lt;/code&gt; the event handler block is called on the corresponding view with the region data. Calling the &lt;code&gt;onRegionChange&lt;/code&gt; event handler block results in calling the same callback prop in JavaScript. This callback is invoked with the raw event, which we typically process in the wrapper component to make a simpler API:</source>
          <target state="translated">在委托方法 &lt;code&gt;-mapView:regionDidChangeAnimated:&lt;/code&gt; 在具有区域数据的相应视图上调用事件处理程序块。调用 &lt;code&gt;onRegionChange&lt;/code&gt; 事件处理程序块将导致在JavaScript中调用相同的回调prop。此回调由raw事件调用，我们通常在wrapper组件中对其进行处理以简化API：</target>
        </trans-unit>
        <trans-unit id="5ba2375a610362007ba5636123d0b7bfb9c912e5" translate="yes" xml:space="preserve">
          <source>In the example above the navigation bar color is changed when the new route is pushed.</source>
          <target state="translated">在上面的例子中,当推送新的路线时,导航栏的颜色就会改变。</target>
        </trans-unit>
        <trans-unit id="5520e97faf0abfd148a4360556289147cbf5e73e" translate="yes" xml:space="preserve">
          <source>In the example above, we prefixed our class name with &lt;code&gt;RNT&lt;/code&gt;. Prefixes are used to avoid name collisions with other frameworks. Apple frameworks use two-letter prefixes, and React Native uses &lt;code&gt;RCT&lt;/code&gt; as a prefix. In order to avoid name collisions, we recommend using a three-letter prefix other than &lt;code&gt;RCT&lt;/code&gt; in your own classes.</source>
          <target state="translated">在上面的示例中，我们为类名加上 &lt;code&gt;RNT&lt;/code&gt; 前缀。前缀用于避免与其他框架的名称冲突。Apple框架使用两个字母的前缀，而React Native使用 &lt;code&gt;RCT&lt;/code&gt; 作为前缀。为了避免名称冲突，建议您在自己的类中使用 &lt;code&gt;RCT&lt;/code&gt; 以外的三个字母的前缀。</target>
        </trans-unit>
        <trans-unit id="8dc83eea3e42fcade3eb031c0e485bc1c530dfef" translate="yes" xml:space="preserve">
          <source>In the example we have a &lt;code&gt;FlexibleSizeExampleView&lt;/code&gt; view that holds a root view. We create the root view, initialize it and set the delegate. The delegate will handle size updates. Then, we set the root view's size flexibility to &lt;code&gt;RCTRootViewSizeFlexibilityHeight&lt;/code&gt;, which means that &lt;code&gt;rootViewDidChangeIntrinsicSize:&lt;/code&gt; method will be called every time the React Native content changes its height. Finally, we set the root view's width and position. Note that we set there height as well, but it has no effect as we made the height RN-dependent.</source>
          <target state="translated">在该示例中，我们有一个 &lt;code&gt;FlexibleSizeExampleView&lt;/code&gt; 视图，它包含一个根视图。我们创建根视图，对其进行初始化并设置委托。委托将处理大小更新。然后，我们将根视图的大小灵活性设置为 &lt;code&gt;RCTRootViewSizeFlexibilityHeight&lt;/code&gt; ，这意味着每当React Native内容更改其高度时，都会调用 &lt;code&gt;rootViewDidChangeIntrinsicSize:&lt;/code&gt; 方法。最后，我们设置根视图的宽度和位置。请注意，我们也在那里设置了高度，但是因为我们将高度设为RN依赖，所以它没有任何作用。</target>
        </trans-unit>
        <trans-unit id="ef14f61efa27c97c128e28fbf6e3b4bc16b8ae21" translate="yes" xml:space="preserve">
          <source>In the first scenario, you'll see a trace that has the UI thread and/or Render Thread looking like this:</source>
          <target state="translated">在第一种情况下,你会看到有UI线程和/或Render线程的跟踪,看起来像这样。</target>
        </trans-unit>
        <trans-unit id="2fb24c648b014c3c6f55bc2f8accb0f937d00e32" translate="yes" xml:space="preserve">
          <source>In the following example, the nested title and body text will inherit the &lt;code&gt;fontFamily&lt;/code&gt; from &lt;code&gt;styles.baseText&lt;/code&gt;, but the title provides its own additional styles. The title and body will stack on top of each other on account of the literal newlines:</source>
          <target state="translated">在下面的例子中，嵌套的标题和正文文本将继承 &lt;code&gt;fontFamily&lt;/code&gt; 中从 &lt;code&gt;styles.baseText&lt;/code&gt; ，但标题提供了自己的其他样式。标题和正文将因文字换行符而彼此重叠：</target>
        </trans-unit>
        <trans-unit id="1db29320ad2a644811664259565ac031b500f30d" translate="yes" xml:space="preserve">
          <source>In the project's build settings, &lt;code&gt;User Search Header Paths&lt;/code&gt; and &lt;code&gt;Header Search Paths&lt;/code&gt; are two configs that specify where Xcode should look for &lt;code&gt;#import&lt;/code&gt; header files specified in the code. For Pods, CocoaPods uses a default array of specific folders to look in. Verify that this particular config is not overwritten, and that none of the folders configured are too large. If one of the folders is a large folder, Xcode will attempt to recursively search the entire directory and throw above error at some point.</source>
          <target state="translated">在项目的构建设置中，&amp;ldquo; &lt;code&gt;User Search Header Paths&lt;/code&gt; 和&amp;ldquo; &lt;code&gt;Header Search Paths&lt;/code&gt; 是两个配置，用于指定Xcode 在代码中指定的 &lt;code&gt;#import&lt;/code&gt; 头文件查找位置。对于Pods，CocoaPods使用默认的特定文件夹数组来查找。请确认该特定配置没有被覆盖，并且所配置的文件夹都没有太大。如果其中一个文件夹是大文件夹，Xcode将尝试递归搜索整个目录，并在某个时候抛出错误。</target>
        </trans-unit>
        <trans-unit id="d4e0f5941f1af14ba64867db13d3c6f8c78fb9cc" translate="yes" xml:space="preserve">
          <source>In the second scenario, you'll see something more like this:</source>
          <target state="translated">在第二种情况下,你会看到更像这样的东西。</target>
        </trans-unit>
        <trans-unit id="4bce6a654261b36f6f04c718bd23ee5dcbd2f42c" translate="yes" xml:space="preserve">
          <source>In this case, it's &lt;code&gt;22b8&lt;/code&gt;. That's the identifier for Motorola.</source>
          <target state="translated">在这种情况下，它是 &lt;code&gt;22b8&lt;/code&gt; 。那是摩托罗拉的标识符。</target>
        </trans-unit>
        <trans-unit id="0978da6376a20a6f4a3ed93f96c425e4fadd41fc" translate="yes" xml:space="preserve">
          <source>In this case, the UI and render threads are the ones that have work crossing frame boundaries. The UI that we're trying to render on each frame is requiring too much work to be done. In this case, &lt;strong&gt;the problem lies in the native views being rendered&lt;/strong&gt;.</source>
          <target state="translated">在这种情况下，UI和渲染线程是具有跨框架边界的工作的线程。我们试图在每帧上渲染的UI需要完成太多工作。在这种情况下，&lt;strong&gt;问题在于呈现的本机视图&lt;/strong&gt;。</target>
        </trans-unit>
        <trans-unit id="d49228cb69cbf3ca0b41cd53e39476f8fa8f38a0" translate="yes" xml:space="preserve">
          <source>In this code, the navigator renders the component specified in initialRoute, which in this case is &lt;code&gt;MyScene&lt;/code&gt;. This component will receive a &lt;code&gt;route&lt;/code&gt; prop and a &lt;code&gt;navigator&lt;/code&gt; prop representing the navigator. The navigator's navigation bar will render the title for the current scene, &quot;My Initial Scene&quot;.</source>
          <target state="translated">在此代码中，导航器呈现initialRoute中指定的组件，在本例中为 &lt;code&gt;MyScene&lt;/code&gt; 。该组件将接收 &lt;code&gt;route&lt;/code&gt; 道具和代表导航员的 &lt;code&gt;navigator&lt;/code&gt; 道具。导航器的导航栏将呈现当前场景的标题&amp;ldquo;我的初始场景&amp;rdquo;。</target>
        </trans-unit>
        <trans-unit id="fcffc074574700c4b5752ca1d731ae11ed6616e7" translate="yes" xml:space="preserve">
          <source>In this example we create view manager class &lt;code&gt;ReactImageManager&lt;/code&gt; that extends &lt;code&gt;SimpleViewManager&lt;/code&gt; of type &lt;code&gt;ReactImageView&lt;/code&gt;. &lt;code&gt;ReactImageView&lt;/code&gt; is the type of object managed by the manager, this will be the custom native view. Name returned by &lt;code&gt;getName&lt;/code&gt; is used to reference the native view type from JavaScript.</source>
          <target state="translated">在此示例中，我们创建视图管理器类 &lt;code&gt;ReactImageManager&lt;/code&gt; ，该类扩展了 &lt;code&gt;ReactImageView&lt;/code&gt; 类型的 &lt;code&gt;SimpleViewManager&lt;/code&gt; 。 &lt;code&gt;ReactImageView&lt;/code&gt; 是由管理器管理的对象的类型，这将是自定义的本机视图。 &lt;code&gt;getName&lt;/code&gt; 返回的名称用于引用JavaScript中的本机视图类型。</target>
        </trans-unit>
        <trans-unit id="6f276780c1d539b20a76dfeb1db3389963a663c3" translate="yes" xml:space="preserve">
          <source>In this example, a component receives data in chunks, handled by &lt;code&gt;_onDataArrived&lt;/code&gt;, which concats the new data onto the old data and updates the data source. We use &lt;code&gt;concat&lt;/code&gt; to create a new array - mutating &lt;code&gt;this._data&lt;/code&gt;, e.g. with &lt;code&gt;this._data.push(newRowData)&lt;/code&gt;, would be an error. &lt;code&gt;_rowHasChanged&lt;/code&gt; understands the shape of the row data and knows how to efficiently compare it.</source>
          <target state="translated">在此示例中，组件接收由 &lt;code&gt;_onDataArrived&lt;/code&gt; 处理的大块数据，该数据将新数据连接到旧数据上并更新数据源。我们使用 &lt;code&gt;concat&lt;/code&gt; 创建一个新数组- &lt;code&gt;this._data&lt;/code&gt; ，例如使用 &lt;code&gt;this._data.push(newRowData)&lt;/code&gt; ，将是一个错误。 &lt;code&gt;_rowHasChanged&lt;/code&gt; 了解行数据的形状，并知道如何有效地比较它。</target>
        </trans-unit>
        <trans-unit id="5598a1db2dccf9dfb75f90984f0d53c37c4127cf" translate="yes" xml:space="preserve">
          <source>In this example, we store &lt;code&gt;text&lt;/code&gt; in the state, because it changes over time.</source>
          <target state="translated">在此示例中，我们将 &lt;code&gt;text&lt;/code&gt; 存储在状态中，因为文本会随着时间而变化。</target>
        </trans-unit>
        <trans-unit id="18d3bcbbfca1f477203f8b4cbd8f39690863e6f3" translate="yes" xml:space="preserve">
          <source>In your &lt;code&gt;index.js&lt;/code&gt;, create your component. In our sample here, we will add simple &lt;code&gt;&amp;lt;Text&amp;gt;&lt;/code&gt; component within a styled &lt;code&gt;&amp;lt;View&amp;gt;&lt;/code&gt;</source>
          <target state="translated">在 &lt;code&gt;index.js&lt;/code&gt; 中，创建您的组件。在这里的示例中，我们将在样式化的 &lt;code&gt;&amp;lt;View&amp;gt;&lt;/code&gt; 中添加简单的 &lt;code&gt;&amp;lt;Text&amp;gt;&lt;/code&gt; 组件。</target>
        </trans-unit>
        <trans-unit id="5463a04a4410b5430481eceee902cd0dbb502bbe" translate="yes" xml:space="preserve">
          <source>In your &lt;code&gt;index.js&lt;/code&gt;, create your component. In our sample here, we will add simple &lt;code&gt;&amp;lt;Text&amp;gt;&lt;/code&gt; component within a styled &lt;code&gt;&amp;lt;View&amp;gt;&lt;/code&gt;:</source>
          <target state="translated">在 &lt;code&gt;index.js&lt;/code&gt; 中，创建您的组件。在这里的示例中，我们将在样式化的 &lt;code&gt;&amp;lt;View&amp;gt;&lt;/code&gt; 中添加简单的 &lt;code&gt;&amp;lt;Text&amp;gt;&lt;/code&gt; 组件：</target>
        </trans-unit>
        <trans-unit id="53b9b6e0de8eebc58f3778d0a5f6625210c9dc31" translate="yes" xml:space="preserve">
          <source>In your root file (index.(ios|android).js) you can add the following after the initial imports:</source>
          <target state="translated">在你的根文件(index.(ios|android).js)中,你可以在初始导入后添加以下内容。</target>
        </trans-unit>
        <trans-unit id="ad137784b365a91e1b6b2bdda2171739bbc904e6" translate="yes" xml:space="preserve">
          <source>In-app Errors and Warnings</source>
          <target state="translated">应用中的错误和警告</target>
        </trans-unit>
        <trans-unit id="73e7397b069e3ef9c119eb4ab30aaac0ecaed554" translate="yes" xml:space="preserve">
          <source>In-app errors are displayed in a full screen alert with a red background inside your app. This screen is known as a RedBox. You can use &lt;code&gt;console.error()&lt;/code&gt; to manually trigger one.</source>
          <target state="translated">应用内错误会在全屏警报中显示，并在应用内部显示红色背景。该屏幕称为RedBox。您可以使用 &lt;code&gt;console.error()&lt;/code&gt; 手动触发一个。</target>
        </trans-unit>
        <trans-unit id="1b492a2fdae03e6c34538ee6af67d9a7abd129dc" translate="yes" xml:space="preserve">
          <source>Increase or decrease the spacing between characters. The default is 0, for no extra letter spacing.</source>
          <target state="translated">增加或减少字符之间的间距。默认值为0,没有额外的字母间距。</target>
        </trans-unit>
        <trans-unit id="7ba5c71c1f9b508f66fb544731c9860ac12f7368" translate="yes" xml:space="preserve">
          <source>Index of initial page that should be selected. Use &lt;code&gt;setPage&lt;/code&gt; method to update the page, and &lt;code&gt;onPageSelected&lt;/code&gt; to monitor page changes</source>
          <target state="translated">应该选择的初始页的索引。使用 &lt;code&gt;setPage&lt;/code&gt; 方法更新页面，并使用 &lt;code&gt;onPageSelected&lt;/code&gt; 监视页面更改</target>
        </trans-unit>
        <trans-unit id="d3d5dcec1f69cbeabac88fcc4db11dd9f7a83083" translate="yes" xml:space="preserve">
          <source>Indicates to accessibility services to treat UI component like a native one. Works for Android only.</source>
          <target state="translated">指示无障碍服务将UI组件当作本地组件对待。仅适用于Android。</target>
        </trans-unit>
        <trans-unit id="59f0ea358d82246ff3fb28ac0c0f2ff0b398178c" translate="yes" xml:space="preserve">
          <source>Indicates to accessibility services whether the user should be notified when this view changes. Works for Android API &amp;gt;= 19 only. Possible values:</source>
          <target state="translated">指示辅助功能服务此视图更改时是否应通知用户。仅适用于Android API&amp;gt; = 19。可能的值：</target>
        </trans-unit>
        <trans-unit id="328d06e18b9b31776e43800029c0715779c35348" translate="yes" xml:space="preserve">
          <source>Initial dimensions are set before &lt;code&gt;runApplication&lt;/code&gt; is called so they should be available before any other require's are run, but may be updated later.</source>
          <target state="translated">初始尺寸是在 &lt;code&gt;runApplication&lt;/code&gt; 之前设置的，因此它们应在运行任何其他需求之前可用，但以后可能会更新。</target>
        </trans-unit>
        <trans-unit id="d3b164e592e0dc1bf85ae26e0a1200a10c16ee65" translate="yes" xml:space="preserve">
          <source>Initial maximum value of the slider. Default value is 1.</source>
          <target state="translated">滑块的初始最大值。默认值为1。</target>
        </trans-unit>
        <trans-unit id="b26e381da251427aa6dcdbbce9a51709f31e72d9" translate="yes" xml:space="preserve">
          <source>Initial minimum value of the slider. Default value is 0.</source>
          <target state="translated">滑块的初始最小值。默认值为0。</target>
        </trans-unit>
        <trans-unit id="3647c63fbc23a86ccc6b50061035554846092a0b" translate="yes" xml:space="preserve">
          <source>Initial value of the slider. The value should be between minimumValue and maximumValue, which default to 0 and 1 respectively. Default value is 0.</source>
          <target state="translated">滑块的初始值。该值应介于最小值和最大值之间,默认值分别为0和1。默认值为0。</target>
        </trans-unit>
        <trans-unit id="f8088d0ca41ea8969fb31eb88e4277a9ec48b89d" translate="yes" xml:space="preserve">
          <source>Inline Requires</source>
          <target state="translated">在线要求</target>
        </trans-unit>
        <trans-unit id="e3eab03ba6ed3dd28fceb2066a946849c7f3a550" translate="yes" xml:space="preserve">
          <source>Inline requires delay the requiring of a module or file until that file is actually needed. A basic example would look like this:</source>
          <target state="translated">内联要求将模块或文件的需求延迟到真正需要该文件的时候。一个基本的例子是这样的。</target>
        </trans-unit>
        <trans-unit id="fb842b6ab3f9082a65e24efee79ee43aceeba93f" translate="yes" xml:space="preserve">
          <source>InputAccessoryView</source>
          <target state="translated">InputAccessoryView</target>
        </trans-unit>
        <trans-unit id="f48a138c853c8475bc5a11386471a7cd4b1c17d6" translate="yes" xml:space="preserve">
          <source>InputAccessoryView#backgroundColor</source>
          <target state="translated">InputAccessoryView#backgroundColor</target>
        </trans-unit>
        <trans-unit id="d4e21f28a56b3fcf39f2a07b88dfce4995e20122" translate="yes" xml:space="preserve">
          <source>InputAccessoryView#nativeID</source>
          <target state="translated">InputAccessoryView#nativeID</target>
        </trans-unit>
        <trans-unit id="c71910c3fe67ba735b4e5d923a31cdd7e3183097" translate="yes" xml:space="preserve">
          <source>InputAccessoryView#style</source>
          <target state="translated">InputAccessoryView#style</target>
        </trans-unit>
        <trans-unit id="e329674aca1b6a3ebade51157bf32886a2dc2a1f" translate="yes" xml:space="preserve">
          <source>Inside this &lt;code&gt;android/app/src/release/&lt;/code&gt; directory create a &lt;code&gt;AndroidManifest.xml&lt;/code&gt; file. (path: &lt;code&gt;android/app/src/release/AndroidManifest.xml&lt;/code&gt;)</source>
          <target state="translated">在这个 &lt;code&gt;android/app/src/release/&lt;/code&gt; 目录中，创建一个 &lt;code&gt;AndroidManifest.xml&lt;/code&gt; 文件。（路径： &lt;code&gt;android/app/src/release/AndroidManifest.xml&lt;/code&gt; ）</target>
        </trans-unit>
        <trans-unit id="41c83fe6591c7b8afc3658128e83971c628d138d" translate="yes" xml:space="preserve">
          <source>Inside this file paste the following conents. Note, make sure to update your package identifier from &quot;com.myapp&quot; to what yours is.</source>
          <target state="translated">在这个文件中粘贴以下内容。注意,一定要把你的包标识符从 &quot;com.myapp &quot;更新为你的包标识符。</target>
        </trans-unit>
        <trans-unit id="21f8961f78a98a03e4279ee4179b07db15507b13" translate="yes" xml:space="preserve">
          <source>Inspecting Component Instances</source>
          <target state="translated">检查组件实例</target>
        </trans-unit>
        <trans-unit id="527cb51da5f8e949b63778dbece6dd45647a338c" translate="yes" xml:space="preserve">
          <source>Install a library with native dependencies:</source>
          <target state="translated">安装一个具有本地依赖性的库。</target>
        </trans-unit>
        <trans-unit id="bf23dd93277961f4300e9d99dca5959dd36b1ad6" translate="yes" xml:space="preserve">
          <source>Install the &lt;a href=&quot;https://expo.io&quot;&gt;Expo&lt;/a&gt; client app on your iOS or Android phone and connect to the same wireless network as your computer. On Android, use the Expo app to scan the QR code from your terminal to open your project. On iOS, follow on-screen instructions to get a link.</source>
          <target state="translated">在iOS或Android手机上安装&lt;a href=&quot;https://expo.io&quot;&gt;Expo&lt;/a&gt;客户端应用程序，然后连接到与计算机相同的无线网络。在Android上，使用Expo应用程序从终端扫描QR码以打开您的项目。在iOS上，按照屏幕上的说明获取链接。</target>
        </trans-unit>
        <trans-unit id="2f0c02f41072e3442c7053758e6c7d88cbbcf430" translate="yes" xml:space="preserve">
          <source>Install the &lt;code&gt;react&lt;/code&gt; and &lt;code&gt;react-native&lt;/code&gt; packages. Open a terminal or command prompt, then navigate to the directory with your &lt;code&gt;package.json&lt;/code&gt; file and run:</source>
          <target state="translated">安装 &lt;code&gt;react&lt;/code&gt; 和 &lt;code&gt;react-native&lt;/code&gt; 软件包。打开终端或命令提示符，然后使用 &lt;code&gt;package.json&lt;/code&gt; 文件导航到目录并运行：</target>
        </trans-unit>
        <trans-unit id="f00685bfd3e0de33ba5f06b701de4f6dfc487ec0" translate="yes" xml:space="preserve">
          <source>Install the Command Line Tools. Choose &quot;Preferences...&quot; in the Xcode menu. Go to the Locations panel and install the tools by selecting the most recent version in the Command Line Tools dropdown.</source>
          <target state="translated">安装命令行工具。在Xcode菜单中选择 &quot;Preferences...&quot;。进入 &quot;位置 &quot;面板,在 &quot;命令行工具 &quot;下拉菜单中选择最新的版本来安装工具。</target>
        </trans-unit>
        <trans-unit id="2185bce3af0f7dfafcbb1cdcdd31a0ce17c7d717" translate="yes" xml:space="preserve">
          <source>Installing dependencies</source>
          <target state="translated">安装依赖性</target>
        </trans-unit>
        <trans-unit id="4e1c7535ccc4dc5054603097c0e79f8ebfe1fae9" translate="yes" xml:space="preserve">
          <source>Instead of recompiling your app every time you make a change, you can reload your app's JavaScript code instantly. To do so, select &quot;Reload&quot; from the Developer Menu. You can also press &lt;code&gt;⌘R&lt;/code&gt; in the iOS Simulator, or tap &lt;code&gt;R&lt;/code&gt; twice on Android emulators.</source>
          <target state="translated">无需每次进行更改都重新编译应用程序，而是可以立即重新加载应用程序的JavaScript代码。为此，请从&amp;ldquo;开发人员&amp;rdquo;菜单中选择&amp;ldquo;重新加载&amp;rdquo;。您也可以在iOS模拟器中按 &lt;code&gt;⌘R&lt;/code&gt; ，或在Android模拟器上点按两次 &lt;code&gt;R&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="a212aaa86cc11e6e06b5ecc40e416e4a8ec24e4a" translate="yes" xml:space="preserve">
          <source>Instead of starting at the top with the first item, start at &lt;code&gt;initialScrollIndex&lt;/code&gt;. This disables the &quot;scroll to top&quot; optimization that keeps the first &lt;code&gt;initialNumToRender&lt;/code&gt; items always rendered and immediately renders the items starting at this initial index. Requires &lt;code&gt;getItemLayout&lt;/code&gt; to be implemented.</source>
          <target state="translated">而不是从第一项的顶部开始，而是从 &lt;code&gt;initialScrollIndex&lt;/code&gt; 开始。这将禁用&amp;ldquo;滚动到顶部&amp;rdquo;优化，该优化将始终始终显示第一个 &lt;code&gt;initialNumToRender&lt;/code&gt; 项，并立即从此初始索引处开始渲染这些项。需要实现 &lt;code&gt;getItemLayout&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="036a5d47efaf84af91b96bca27d0e3394108b032" translate="yes" xml:space="preserve">
          <source>Integration Tests</source>
          <target state="translated">集成测试</target>
        </trans-unit>
        <trans-unit id="6a3a2d84703d50bdc047e78bfbddaabcd0492220" translate="yes" xml:space="preserve">
          <source>Integration with Existing Apps</source>
          <target state="translated">与现有的应用程序集成</target>
        </trans-unit>
        <trans-unit id="500875684c0a02ca150a75642f8d83b3b104812d" translate="yes" xml:space="preserve">
          <source>Integration with React Native Inspector</source>
          <target state="translated">与React Native Inspector集成</target>
        </trans-unit>
        <trans-unit id="733e2f15ad56d3b5b0e7d319eab9a176e5044bcc" translate="yes" xml:space="preserve">
          <source>InteractionManager</source>
          <target state="translated">InteractionManager</target>
        </trans-unit>
        <trans-unit id="4d36ebc18e85b7ac2d049fa7f9c5014eb1e46a96" translate="yes" xml:space="preserve">
          <source>InteractionManager allows long-running work to be scheduled after any interactions/animations have completed. In particular, this allows JavaScript animations to run smoothly.</source>
          <target state="translated">InteractionManager允许在任何交互/动画完成后安排长期运行的工作。特别是,这使得JavaScript动画能够顺利运行。</target>
        </trans-unit>
        <trans-unit id="f23accc3291002eef4949a6be814cc3daf5a0e2c" translate="yes" xml:space="preserve">
          <source>InteractionManager also allows applications to register animations by creating an interaction 'handle' on animation start, and clearing it upon completion:</source>
          <target state="translated">InteractionManager还允许应用程序通过在动画开始时创建一个交互 &quot;句柄 &quot;来注册动画,并在完成时清除它。</target>
        </trans-unit>
        <trans-unit id="6c62a67dc1e39b09f327a0e595483cde3b5dc4ff" translate="yes" xml:space="preserve">
          <source>InteractionManager.clearInteractionHandle()</source>
          <target state="translated">InteractionManager.clearInteractionHandle()</target>
        </trans-unit>
        <trans-unit id="e75195a8ce42cce517a42bafd55fd8b748381363" translate="yes" xml:space="preserve">
          <source>InteractionManager.createInteractionHandle()</source>
          <target state="translated">InteractionManager.createInteractionHandle()</target>
        </trans-unit>
        <trans-unit id="e7e20e3af726676d9330c6e54e92565cec9a6dfd" translate="yes" xml:space="preserve">
          <source>InteractionManager.runAfterInteractions()</source>
          <target state="translated">InteractionManager.runAfterInteractions()</target>
        </trans-unit>
        <trans-unit id="12445987a03acddc09f2ed6cefc4029e84375d0a" translate="yes" xml:space="preserve">
          <source>InteractionManager.setDeadline()</source>
          <target state="translated">InteractionManager.setDeadline()</target>
        </trans-unit>
        <trans-unit id="b891b70877725ca1ca3335e99fbc7c0ad100b8df" translate="yes" xml:space="preserve">
          <source>Internal state is not preserved when content scrolls out of the render window. Make sure all your data is captured in the item data or external stores like Flux, Redux, or Relay.</source>
          <target state="translated">当内容滚动出渲染窗口时,内部状态不会被保存。确保你的所有数据都被捕获在项目数据或外部存储中,如Flux、Redux或Relay。</target>
        </trans-unit>
        <trans-unit id="6a9858c9bf3149456595f98943cf88e41039822e" translate="yes" xml:space="preserve">
          <source>Interpolation</source>
          <target state="translated">Interpolation</target>
        </trans-unit>
        <trans-unit id="2473e96bc614a911821242119918a241a41836d6" translate="yes" xml:space="preserve">
          <source>Introduction</source>
          <target state="translated">Introduction</target>
        </trans-unit>
        <trans-unit id="bbe739383e01732d1ef85f7b7c6ea35c23b4e802" translate="yes" xml:space="preserve">
          <source>Inverse</source>
          <target state="translated">Inverse</target>
        </trans-unit>
        <trans-unit id="3e680a635c7d721185363e7dd202a581d5b2a7b6" translate="yes" xml:space="preserve">
          <source>Investigating the Loaded Modules</source>
          <target state="translated">调查加载的模块</target>
        </trans-unit>
        <trans-unit id="5515d44021412c42bda89984b2625840d5c8c18f" translate="yes" xml:space="preserve">
          <source>Invoked on content scroll with &lt;code&gt;{ nativeEvent: { contentOffset: { x, y } } }&lt;/code&gt;. May also contain other properties from ScrollEvent but on Android contentSize is not provided for performance reasons.</source>
          <target state="translated">使用 &lt;code&gt;{ nativeEvent: { contentOffset: { x, y } } }&lt;/code&gt; 在内容滚动上调用。也可能包含ScrollEvent的其他属性，但出于性能原因，未在Android上提供contentSize。</target>
        </trans-unit>
        <trans-unit id="32ce8a1aa8afe7b7d05b239d950e3cfaab99cdd8" translate="yes" xml:space="preserve">
          <source>Invoked on download progress with &lt;code&gt;{nativeEvent: {loaded, total}}&lt;/code&gt;.</source>
          <target state="translated">使用 &lt;code&gt;{nativeEvent: {loaded, total}}&lt;/code&gt; 调用下载进度。</target>
        </trans-unit>
        <trans-unit id="eb7a4bf89eb09e29cf26030451f9616714e9d90c" translate="yes" xml:space="preserve">
          <source>Invoked on load error with &lt;code&gt;{nativeEvent: {error}}&lt;/code&gt;.</source>
          <target state="translated">调用 &lt;code&gt;{nativeEvent: {error}}&lt;/code&gt; 加载错误。</target>
        </trans-unit>
        <trans-unit id="ddb41cfe6ced846e09db21fc14835de47a5bd4d0" translate="yes" xml:space="preserve">
          <source>Invoked on load start.</source>
          <target state="translated">负载启动时调用。</target>
        </trans-unit>
        <trans-unit id="c361f9adfd481044e21c5c3911bf214d214b5fef" translate="yes" xml:space="preserve">
          <source>Invoked on mount and layout changes with</source>
          <target state="translated">挂载和布局改变时调用</target>
        </trans-unit>
        <trans-unit id="f1e21c3ecb06cf8f8f4728e92539d821dc7e3fa2" translate="yes" xml:space="preserve">
          <source>Invoked on mount and layout changes with &lt;code&gt;{nativeEvent: {layout: {x, y, width, height}}}&lt;/code&gt;.</source>
          <target state="translated">使用 &lt;code&gt;{nativeEvent: {layout: {x, y, width, height}}}&lt;/code&gt; 调用安装和布局更改。</target>
        </trans-unit>
        <trans-unit id="75a7276f57fb9118c9ccf912307982532630341e" translate="yes" xml:space="preserve">
          <source>Invoked on mount and layout changes with &lt;code&gt;{x, y, width, height}&lt;/code&gt;.</source>
          <target state="translated">根据 &lt;code&gt;{x, y, width, height}&lt;/code&gt; 调用安装和布局更改。</target>
        </trans-unit>
        <trans-unit id="ab8ec03521b424dd4961a85356943bd68b014e2b" translate="yes" xml:space="preserve">
          <source>Invoked on mount and layout changes with:</source>
          <target state="translated">在挂载和布局改变时调用。</target>
        </trans-unit>
        <trans-unit id="13cb9bb794ff7d7653a7e1b57687ee31d6e3a383" translate="yes" xml:space="preserve">
          <source>Invoked when a partial load of the image is complete. The definition of what constitutes a &quot;partial load&quot; is loader specific though this is meant for progressive JPEG loads.</source>
          <target state="translated">当图像的部分加载完成时调用。构成 &quot;部分加载 &quot;的定义是特定于加载器的,尽管这是为了逐步加载JPEG。</target>
        </trans-unit>
        <trans-unit id="15dbb054216432b3cc742cbc638cde2de9b3f051" translate="yes" xml:space="preserve">
          <source>Invoked when load completes successfully.</source>
          <target state="translated">当加载成功完成时调用。</target>
        </trans-unit>
        <trans-unit id="79a6577b58f9fee4cb2546c7bd266cf79efc3b69" translate="yes" xml:space="preserve">
          <source>Invoked when load either succeeds or fails.</source>
          <target state="translated">当加载成功或失败时调用。</target>
        </trans-unit>
        <trans-unit id="ce130a893a1f7b3938f023bf5a26bea414ea1da6" translate="yes" xml:space="preserve">
          <source>Invoked whenever an error is encountered.</source>
          <target state="translated">遇到错误时调用。</target>
        </trans-unit>
        <trans-unit id="b6f1fed2554e0dd6f57f8a04f40508c15b8ae15e" translate="yes" xml:space="preserve">
          <source>Invoked whenever the location changes.</source>
          <target state="translated">每当位置发生变化时就会被调用。</target>
        </trans-unit>
        <trans-unit id="372bb9e5c054cc77eb356b8a5d2303f24b4f0556" translate="yes" xml:space="preserve">
          <source>Invoked with latest location info.</source>
          <target state="translated">调用最新位置信息。</target>
        </trans-unit>
        <trans-unit id="6b6a2984a77de589b57e3430c6b5398468a5d127" translate="yes" xml:space="preserve">
          <source>Invoked with the new value when the value changes.</source>
          <target state="translated">当值发生变化时,用新值调用。</target>
        </trans-unit>
        <trans-unit id="32fa1ffb97d17fe590cde81f6e7431a686e5c833" translate="yes" xml:space="preserve">
          <source>Invokes the success callback once with the latest location info.</source>
          <target state="translated">用最新的位置信息调用一次成功回调。</target>
        </trans-unit>
        <trans-unit id="59f8524388bc2bc776f867658e528dce00c62f73" translate="yes" xml:space="preserve">
          <source>Invokes the success callback whenever the location changes. Returns a &lt;code&gt;watchId&lt;/code&gt; (number).</source>
          <target state="translated">每当位置更改时，调用成功回调。返回一个 &lt;code&gt;watchId&lt;/code&gt; （数字）。</target>
        </trans-unit>
        <trans-unit id="7bb7064012ffb3570ad9e9438a076a59ac75f2f8" translate="yes" xml:space="preserve">
          <source>Is there a pull request that addressed this issue? Post a comment with the PR number so we can follow up.</source>
          <target state="translated">是否有解决这个问题的拉动请求?请在评论中写上PR号,以便我们跟进。</target>
        </trans-unit>
        <trans-unit id="871dfa6ebe1395ffeb581b4bc709e93736ba7cf9" translate="yes" xml:space="preserve">
          <source>Issue caused by the number of directories &lt;a href=&quot;https://github.com/guard/listen/wiki/Increasing-the-amount-of-inotify-watchers&quot;&gt;inotify&lt;/a&gt; (used by watchman on Linux) can monitor. To solve it, just run this command in your terminal window</source>
          <target state="translated">由&lt;a href=&quot;https://github.com/guard/listen/wiki/Increasing-the-amount-of-inotify-watchers&quot;&gt;inotify&lt;/a&gt;目录数量（Linux上的watchman使用）引起的问题可以监视。要解决此问题，只需在终端窗口中运行此命令</target>
        </trans-unit>
        <trans-unit id="8cfc917f93912e5163999d63994a939593e683c9" translate="yes" xml:space="preserve">
          <source>Issues in the &quot;Needs more information&quot; state may be closed after a week with no followup from the author. Issues that have have had no activity in the last two months may be closed periodically. If your issue gets closed in this manner, it's nothing personal. If you strongly believe that the issue should remain open, just let us know why.</source>
          <target state="translated">处于 &quot;需要更多信息 &quot;状态的问题可能在一周后关闭,而作者没有采取后续行动。过去两个月内没有活动的问题可能会定期关闭。如果您的问题以这种方式被关闭,这不是什么个人问题。如果您强烈认为该问题应该保持开放,请告诉我们原因。</target>
        </trans-unit>
        <trans-unit id="2cda3d9c8bf4e335a3602c5771ca3c1cb84ae691" translate="yes" xml:space="preserve">
          <source>Issues should be relatively easy to reproduce. Sometimes the issue affects a particular app but a minimal repro is not provided, perhaps a crash is seen in the logs and the author is not sure where its coming from, maybe the issue is sporadic.</source>
          <target state="translated">问题应该是比较容易重现的。有时问题会影响到某一个应用,但没有提供一个最小的重现,也许在日志中看到了崩溃,而笔者不知道它来自哪里,也许问题是零星的。</target>
        </trans-unit>
        <trans-unit id="0ae4429c9b1a2b0d204d25b8146be98c0032a128" translate="yes" xml:space="preserve">
          <source>Issues should provide clear, easy to follow steps alongside sample code to reproduce the issue. Ideally, provide a &lt;a href=&quot;http://snack.expo.io/&quot;&gt;Snack&lt;/a&gt;.</source>
          <target state="translated">问题应提供清晰，易于执行的步骤以及示例代码，以重现问题。理想情况下，提供&lt;a href=&quot;http://snack.expo.io/&quot;&gt;小吃&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="7ad7f788d7fc0125c205b8b545a6982ab1d65410" translate="yes" xml:space="preserve">
          <source>Issues that do not meet the above criteria can be closed immediately, with a link to the &lt;a href=&quot;contributing&quot;&gt;contributor's guide&lt;/a&gt;.</source>
          <target state="translated">不符合上述条件的问题可以立即关闭，并提供指向&lt;a href=&quot;contributing&quot;&gt;贡献者指南&lt;/a&gt;的链接。</target>
        </trans-unit>
        <trans-unit id="a9f26e88c9b8901dbb7aff783d69813f5b22676e" translate="yes" xml:space="preserve">
          <source>Issues with the 'Needs more information' label that have been open for more than a week without a response from the author can be closed.</source>
          <target state="translated">带有 &quot;需要更多信息 &quot;标签的问题,如果超过一周没有得到作者的回复,可以关闭。</target>
        </trans-unit>
        <trans-unit id="79e9658711c546ef5d21b6e27582f88fecbb1143" translate="yes" xml:space="preserve">
          <source>It also allows to send the style only once through the bridge. All subsequent uses are going to refer an id (not implemented yet).</source>
          <target state="translated">它还允许通过桥接只发送一次样式。所有后续的使用都将引用一个id(尚未实现)。</target>
        </trans-unit>
        <trans-unit id="09f17f0546a285e6aa507296e45d34aed94bde32" translate="yes" xml:space="preserve">
          <source>It is a component to solve the common problem of views that need to move out of the way of the virtual keyboard. It can automatically adjust either its position or bottom padding based on the position of the keyboard.</source>
          <target state="translated">它是一个解决视图需要移出虚拟键盘的常见问题的组件。它可以根据键盘的位置自动调整其位置或底部填充。</target>
        </trans-unit>
        <trans-unit id="b4c875414047f611dd6e18245caec363481c2da4" translate="yes" xml:space="preserve">
          <source>It is fine to update properties anytime. However, updates have to be performed on the main thread. You use the getter on any thread.</source>
          <target state="translated">随时更新属性是可以的。但是,更新必须在主线程上进行。你在任何线程上使用getter。</target>
        </trans-unit>
        <trans-unit id="0ed4aa5105b38583f0a880c3e870d4ded64c4883" translate="yes" xml:space="preserve">
          <source>It is important all children are &lt;code&gt;&amp;lt;View&amp;gt;&lt;/code&gt;s and not composite components. You can set style properties like &lt;code&gt;padding&lt;/code&gt; or &lt;code&gt;backgroundColor&lt;/code&gt; for each child. It is also important that each child have a &lt;code&gt;key&lt;/code&gt; prop.</source>
          <target state="translated">重要的是所有子项都是 &lt;code&gt;&amp;lt;View&amp;gt;&lt;/code&gt; 而不是复合组件。您可以为每个孩子设置样式属性，例如 &lt;code&gt;padding&lt;/code&gt; 或 &lt;code&gt;backgroundColor&lt;/code&gt; 。每个孩子都有一个 &lt;code&gt;key&lt;/code&gt; 道具也很重要。</target>
        </trans-unit>
        <trans-unit id="5c0094824f17a2198f4995a46792e35945ada090" translate="yes" xml:space="preserve">
          <source>It is possible to have multiple &lt;code&gt;StatusBar&lt;/code&gt; components mounted at the same time. The props will be merged in the order the &lt;code&gt;StatusBar&lt;/code&gt; components were mounted. One use case is to specify status bar styles per route using &lt;code&gt;Navigator&lt;/code&gt;.</source>
          <target state="translated">可以同时安装多个 &lt;code&gt;StatusBar&lt;/code&gt; 组件。这些道具将按照安装 &lt;code&gt;StatusBar&lt;/code&gt; 组件的顺序进行合并。一种用例是使用 &lt;code&gt;Navigator&lt;/code&gt; 指定每条路线的状态栏样式。</target>
        </trans-unit>
        <trans-unit id="a87d868fbf82a105fe6bb13e47618a435b7f6391" translate="yes" xml:space="preserve">
          <source>It is recommended that you use an abstraction on top of &lt;code&gt;AsyncStorage&lt;/code&gt; instead of &lt;code&gt;AsyncStorage&lt;/code&gt; directly for anything more than light usage since it operates globally.</source>
          <target state="translated">建议您在 &lt;code&gt;AsyncStorage&lt;/code&gt; 之上而不是 &lt;code&gt;AsyncStorage&lt;/code&gt; 之上直接使用抽象，以实现除轻量级使用之外的其他用途，因为它在全球范围内运行。</target>
        </trans-unit>
        <trans-unit id="b3a865f73796cffd8919a4e0e2dd01655d63784e" translate="yes" xml:space="preserve">
          <source>It is sometimes necessary to make changes directly to a component without using state/props to trigger a re-render of the entire subtree. When using React in the browser for example, you sometimes need to directly modify a DOM node, and the same is true for views in mobile apps. &lt;code&gt;setNativeProps&lt;/code&gt; is the React Native equivalent to setting properties directly on a DOM node.</source>
          <target state="translated">有时有必要直接对组件进行更改，而无需使用状态/属性来触发整个子树的重新渲染。例如，在浏览器中使用React时，有时需要直接修改DOM节点，移动应用程序中的视图也是如此。 &lt;code&gt;setNativeProps&lt;/code&gt; 是React Native的等效项，可以直接在DOM节点上设置属性。</target>
        </trans-unit>
        <trans-unit id="c908d7885efd9a93d2d2e9eaa00cb7c6013054b3" translate="yes" xml:space="preserve">
          <source>It is technically possible not to use CocoaPods, but that would require manual library and linker additions that would overly complicate this process.</source>
          <target state="translated">从技术上讲,不使用CocoaPods是可以的,但这需要手动添加库和链接器,会使这个过程过于复杂。</target>
        </trans-unit>
        <trans-unit id="d1340e6df58829a3083e28592b953b9af96a3c35" translate="yes" xml:space="preserve">
          <source>It is very important to highlight that the callback is not invoked immediately after the native function completes - remember that bridge communication is asynchronous, and this too is tied to the run loop.</source>
          <target state="translated">需要强调的是,回调不会在原生函数完成后立即被调用,这一点非常重要--请记住,桥接通信是异步的,这也是与运行循环相关的。</target>
        </trans-unit>
        <trans-unit id="b32ad908c62eab134b7a5a098ec5c8ac330e2151" translate="yes" xml:space="preserve">
          <source>It provides a predictable wrapper of the responder handlers provided by the &lt;a href=&quot;gesture-responder-system&quot;&gt;gesture responder system&lt;/a&gt;. For each handler, it provides a new &lt;code&gt;gestureState&lt;/code&gt; object alongside the native event object:</source>
          <target state="translated">它提供了&lt;a href=&quot;gesture-responder-system&quot;&gt;手势响应程序系统&lt;/a&gt;提供的响应程序处理程序的可预测包装。对于每个处理程序，它在本机事件对象旁边提供一个新的 &lt;code&gt;gestureState&lt;/code&gt; 对象：</target>
        </trans-unit>
        <trans-unit id="3aa86979f3ba1d64d144ffa96cd5ad23da3ea553" translate="yes" xml:space="preserve">
          <source>It should connect to your simulator within a few seconds.</source>
          <target state="translated">它应该在几秒钟内连接到你的模拟器。</target>
        </trans-unit>
        <trans-unit id="abcbc84130123e4e4a51e5f5b6cd323e84b61af2" translate="yes" xml:space="preserve">
          <source>It specifies whether the children are visible or not. If you see a blank content, you probably forgot to add a selected one.</source>
          <target state="translated">它指定了子女是否可见。如果你看到的是一个空白的内容,你可能忘了添加一个选定的内容。</target>
        </trans-unit>
        <trans-unit id="913640267a13fd58d1b878ea7e1a74ee7c86f061" translate="yes" xml:space="preserve">
          <source>It works like the CSS &lt;code&gt;z-index&lt;/code&gt; property - components with a larger &lt;code&gt;zIndex&lt;/code&gt; will render on top. Think of the z-direction like it's pointing from the phone into your eyeball. See &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/z-index&quot;&gt;https://developer.mozilla.org/en-US/docs/Web/CSS/z-index&lt;/a&gt; for more details.</source>
          <target state="translated">它的工作方式类似于CSS的 &lt;code&gt;z-index&lt;/code&gt; 属性-具有更大 &lt;code&gt;zIndex&lt;/code&gt; 的组件将呈现在顶部。将z方向想像成它从手机指向您的眼球。有关更多详细信息，请参见&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/z-index&quot;&gt;https://developer.mozilla.org/en-US/docs/Web/CSS/z-index&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="95c06ebf35d772cb3c1072ad83b3fa671e70b079" translate="yes" xml:space="preserve">
          <source>It works similarly to &lt;code&gt;bottom&lt;/code&gt; in CSS, but in React Native you must use points or percentages. Ems and other units are not supported.</source>
          <target state="translated">它的工作方式与CSS中的 &lt;code&gt;bottom&lt;/code&gt; 类似，但是在React Native中，您必须使用点或百分比。不支持Ems和其他设备。</target>
        </trans-unit>
        <trans-unit id="8a83570744803efaf8059b9490a177a7936245c0" translate="yes" xml:space="preserve">
          <source>It works similarly to &lt;code&gt;display&lt;/code&gt; in CSS, but only support 'flex' and 'none'. 'flex' is the default.</source>
          <target state="translated">它的工作方式类似于在CSS中 &lt;code&gt;display&lt;/code&gt; ，但仅支持&amp;ldquo; flex&amp;rdquo;和&amp;ldquo; none&amp;rdquo;。默认为&amp;ldquo; flex&amp;rdquo;。</target>
        </trans-unit>
        <trans-unit id="ea2ca31e6e607d24e860703a0b5b861109a3f1ac" translate="yes" xml:space="preserve">
          <source>It works similarly to &lt;code&gt;height&lt;/code&gt; in CSS, but in React Native you must use points or percentages. Ems and other units are not supported. See &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/height&quot;&gt;https://developer.mozilla.org/en-US/docs/Web/CSS/height&lt;/a&gt; for more details.</source>
          <target state="translated">它的工作原理与CSS中的 &lt;code&gt;height&lt;/code&gt; 相似，但是在React Native中，您必须使用点或百分比。不支持Ems和其他设备。有关更多详细信息，请参见&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/height&quot;&gt;https://developer.mozilla.org/en-US/docs/Web/CSS/height&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="85c0380ef1aa0ee77cccd229e12f8610ef968180" translate="yes" xml:space="preserve">
          <source>It works similarly to &lt;code&gt;left&lt;/code&gt; in CSS, but in React Native you must use points or percentages. Ems and other units are not supported.</source>
          <target state="translated">它的工作方式与CSS中的 &lt;code&gt;left&lt;/code&gt; 类似，但是在React Native中，您必须使用点或百分比。不支持Ems和其他设备。</target>
        </trans-unit>
        <trans-unit id="f4fc5ab89e50d86fc3308c4986d74f8250e2e0f5" translate="yes" xml:space="preserve">
          <source>It works similarly to &lt;code&gt;max-height&lt;/code&gt; in CSS, but in React Native you must use points or percentages. Ems and other units are not supported.</source>
          <target state="translated">它的工作方式与CSS中的 &lt;code&gt;max-height&lt;/code&gt; 相似，但是在React Native中，您必须使用点或百分比。不支持Ems和其他设备。</target>
        </trans-unit>
        <trans-unit id="ac7edbea62d5fbdc43803ec753d373f2467999b7" translate="yes" xml:space="preserve">
          <source>It works similarly to &lt;code&gt;max-width&lt;/code&gt; in CSS, but in React Native you must use points or percentages. Ems and other units are not supported.</source>
          <target state="translated">它的工作方式与CSS中的 &lt;code&gt;max-width&lt;/code&gt; 相似，但是在React Native中，您必须使用点数或百分比。不支持Ems和其他设备。</target>
        </trans-unit>
        <trans-unit id="9af065d2d6c7d572fc017f7dffd1d4f1b56552aa" translate="yes" xml:space="preserve">
          <source>It works similarly to &lt;code&gt;min-height&lt;/code&gt; in CSS, but in React Native you must use points or percentages. Ems and other units are not supported.</source>
          <target state="translated">它的工作方式与CSS中的 &lt;code&gt;min-height&lt;/code&gt; 类似，但在React Native中，您必须使用点或百分比。不支持Ems和其他设备。</target>
        </trans-unit>
        <trans-unit id="9156cad2acd585f9965d401b316f09222c54af09" translate="yes" xml:space="preserve">
          <source>It works similarly to &lt;code&gt;min-width&lt;/code&gt; in CSS, but in React Native you must use points or percentages. Ems and other units are not supported.</source>
          <target state="translated">它的工作方式类似于CSS中的 &lt;code&gt;min-width&lt;/code&gt; ，但是在React Native中，您必须使用点数或百分比。不支持Ems和其他设备。</target>
        </trans-unit>
        <trans-unit id="775eb66f25e168738fb7a35a4bac268537347898" translate="yes" xml:space="preserve">
          <source>It works similarly to &lt;code&gt;right&lt;/code&gt; in CSS, but in React Native you must use points or percentages. Ems and other units are not supported.</source>
          <target state="translated">它的工作原理类似于 &lt;code&gt;right&lt;/code&gt; 的CSS，但在本地做出反应，必须使用点或百分比。不支持Ems和其他设备。</target>
        </trans-unit>
        <trans-unit id="9c64f1256b352092c84a42bc0d31c42f62ec389b" translate="yes" xml:space="preserve">
          <source>It works similarly to &lt;code&gt;top&lt;/code&gt; in CSS, but in React Native you must use points or percentages. Ems and other units are not supported.</source>
          <target state="translated">它的工作原理与CSS中的 &lt;code&gt;top&lt;/code&gt; 相似，但是在React Native中，您必须使用点或百分比。不支持Ems和其他设备。</target>
        </trans-unit>
        <trans-unit id="7a8f74d99a28ee30283f00e57f069ca27ce35182" translate="yes" xml:space="preserve">
          <source>It works similarly to &lt;code&gt;width&lt;/code&gt; in CSS, but in React Native you must use points or percentages. Ems and other units are not supported. See &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/width&quot;&gt;https://developer.mozilla.org/en-US/docs/Web/CSS/width&lt;/a&gt; for more details.</source>
          <target state="translated">它的工作方式与CSS中的 &lt;code&gt;width&lt;/code&gt; 类似，但是在React Native中，您必须使用点或百分比。不支持Ems和其他设备。有关更多详细信息，请参见&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/width&quot;&gt;https://developer.mozilla.org/en-US/docs/Web/CSS/width&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="3de0b625c693efdc993422d8826e5fead680619e" translate="yes" xml:space="preserve">
          <source>It's a good idea to add a Jest test when you are working on a change that only modifies JavaScript code.</source>
          <target state="translated">当你在做一个只修改JavaScript代码的改动时,添加一个Jest测试是个好主意。</target>
        </trans-unit>
        <trans-unit id="0d007a49756bb9d54db954a0e7e16c5be5871a99" translate="yes" xml:space="preserve">
          <source>It's a good idea to add an Android integration test whenever you are working on code that needs both JavaScript and Java to be tested in conjunction. The Android integration tests live under &lt;a href=&quot;https://github.com/facebook/react-native/tree/master/ReactAndroid/src/androidTest/java/com/facebook/react/tests&quot;&gt;&lt;code&gt;ReactAndroid/src/androidTest&lt;/code&gt;&lt;/a&gt;, so you can browse through that directory for good examples of tests.</source>
          <target state="translated">每当您需要同时测试JavaScript和Java的代码时，最好添加一个Android集成测试。Android集成测试位于&lt;a href=&quot;https://github.com/facebook/react-native/tree/master/ReactAndroid/src/androidTest/java/com/facebook/react/tests&quot;&gt; &lt;code&gt;ReactAndroid/src/androidTest&lt;/code&gt; 下&lt;/a&gt;，因此您可以浏览该目录以获取良好的测试示例。</target>
        </trans-unit>
        <trans-unit id="0dccf5c290ff4fa52ba348eece4232ba143e769b" translate="yes" xml:space="preserve">
          <source>It's a good idea to add an Android unit test whenever you are working on code that can be tested by Java code alone. The Android unit tests live under &lt;a href=&quot;https://github.com/facebook/react-native/tree/master/ReactAndroid/src/test/java/com/facebook/react&quot;&gt;&lt;code&gt;ReactAndroid/src/tests&lt;/code&gt;&lt;/a&gt;, so you can browse through that directory for good examples of tests.</source>
          <target state="translated">每当您处理仅可通过Java代码测试的代码时，最好添加一个Android单元测试。Android单元测试位于&lt;a href=&quot;https://github.com/facebook/react-native/tree/master/ReactAndroid/src/test/java/com/facebook/react&quot;&gt; &lt;code&gt;ReactAndroid/src/tests&lt;/code&gt; 下&lt;/a&gt;，因此您可以浏览该目录以获取良好的测试示例。</target>
        </trans-unit>
        <trans-unit id="12db64911639df654960a96732b93077418bd67f" translate="yes" xml:space="preserve">
          <source>It's always a good idea to test your app on an actual device before releasing it to your users. This document will guide you through the necessary steps to run your React Native app on a device and to get it ready for production.</source>
          <target state="translated">在向用户发布应用程序之前,在实际设备上测试您的应用程序总是一个好主意。本文档将指导您完成在设备上运行React Native应用的必要步骤,并为生产做好准备。</target>
        </trans-unit>
        <trans-unit id="16cef7f412ef9c1cebb256cba395464f6dbd9c85" translate="yes" xml:space="preserve">
          <source>It's fine to change root view's size flexibility mode dynamically. Changing flexibility mode of a root view will schedule a layout recalculation and the delegate &lt;code&gt;rootViewDidChangeIntrinsicSize:&lt;/code&gt; method will be called once the content size is known.</source>
          <target state="translated">动态更改根视图的大小灵活性模式是可以的。更改根视图的灵活性模式将安排布局重新计算，并且一旦知道内容大小，就会调用委托 &lt;code&gt;rootViewDidChangeIntrinsicSize:&lt;/code&gt; 方法。</target>
        </trans-unit>
        <trans-unit id="63a28e4aa8a08764cfe5119987a26d56a693d113" translate="yes" xml:space="preserve">
          <source>It's implemented using onLayout handler attached to the content container which this ScrollView renders.</source>
          <target state="translated">它是通过附加在内容容器上的onLayout处理程序来实现的,而这个ScrollView就是在内容容器上渲染的。</target>
        </trans-unit>
        <trans-unit id="2620cff7a72a5dac9da1e132fb9abb74c723c406" translate="yes" xml:space="preserve">
          <source>It's totally fine to update root view's size dynamically by re-setting its frame property. React Native will take care of the content's layout.</source>
          <target state="translated">完全可以通过重新设置根视图的框架属性来动态更新根视图的大小。React Native会负责内容的布局。</target>
        </trans-unit>
        <trans-unit id="515f086ba7eb6854eac063ab918f23ceb0aa013f" translate="yes" xml:space="preserve">
          <source>Item separator support.</source>
          <target state="translated">支持项目分离器。</target>
        </trans-unit>
        <trans-unit id="085c38344ab0c45160a4facf2be7cc10dff13288" translate="yes" xml:space="preserve">
          <source>Items comes with a few predefined system icons. Note that if you are using them, the title and selectedIcon will be overridden with the system ones.</source>
          <target state="translated">Items自带了一些预定义的系统图标。请注意,如果您正在使用它们,标题和选定的图标将被系统图标所覆盖。</target>
        </trans-unit>
        <trans-unit id="a87e5ac08cd1e4d2ab1963a42d798a7e83e5506e" translate="yes" xml:space="preserve">
          <source>JS FPS plunges when re-rendering a view that hardly changes</source>
          <target state="translated">当重新渲染一个几乎没有变化的视图时,JS的FPS会急剧下降。</target>
        </trans-unit>
        <trans-unit id="533b7ae140e515c2f226df587bf785f2752d4e92" translate="yes" xml:space="preserve">
          <source>JS frame rate (JavaScript thread)</source>
          <target state="translated">JS帧率(JavaScript线程)</target>
        </trans-unit>
        <trans-unit id="0e4779d05c5a545a6bd2f3323d3fe430a37f5d7b" translate="yes" xml:space="preserve">
          <source>JSX</source>
          <target state="translated">JSX</target>
        </trans-unit>
        <trans-unit id="e027e57610f85225767aafbbf23fed7457e55828" translate="yes" xml:space="preserve">
          <source>Java</source>
          <target state="translated">Java</target>
        </trans-unit>
        <trans-unit id="276bbd673319b8da1c62a0b5bc42a2ddcf6f5f5f" translate="yes" xml:space="preserve">
          <source>Java Development Kit</source>
          <target state="translated">Java开发套件</target>
        </trans-unit>
        <trans-unit id="ee620923ff5fc510555dc37083a135ee93b5404b" translate="yes" xml:space="preserve">
          <source>JavaScript</source>
          <target state="translated">JavaScript</target>
        </trans-unit>
        <trans-unit id="a2ffee171bf729d3e12756e458f1c783498cbc7e" translate="yes" xml:space="preserve">
          <source>JavaScript Environment</source>
          <target state="translated">JavaScript环境</target>
        </trans-unit>
        <trans-unit id="87d2ca3cbeb0751ff390e381fdd8f7ad6916dbe0" translate="yes" xml:space="preserve">
          <source>JavaScript Runtime</source>
          <target state="translated">JavaScript运行时</target>
        </trans-unit>
        <trans-unit id="a2a904a7a5cb189e618a71ed1db5353297a79f79" translate="yes" xml:space="preserve">
          <source>JavaScript Syntax Transformers</source>
          <target state="translated">JavaScript语法转换器</target>
        </trans-unit>
        <trans-unit id="196a94f9774fe3c715ef7a736ba70fda93c36b49" translate="yes" xml:space="preserve">
          <source>JavaScript can use this value right away, synchronously:</source>
          <target state="translated">JavaScript可以马上使用这个值,同步。</target>
        </trans-unit>
        <trans-unit id="f82ab09a59b1c63a24c1342f040725aea9c6d385" translate="yes" xml:space="preserve">
          <source>JavaScript code can subscribe to these events by creating a new &lt;code&gt;NativeEventEmitter&lt;/code&gt; instance around your module.</source>
          <target state="translated">JavaScript代码可以通过在模块周围创建一个新的 &lt;code&gt;NativeEventEmitter&lt;/code&gt; 实例来订阅这些事件。</target>
        </trans-unit>
        <trans-unit id="9e2ae45c99f600971f8f7c48c4c518ffdb82330e" translate="yes" xml:space="preserve">
          <source>JavaScript modules can then register to receive events by &lt;code&gt;addListenerOn&lt;/code&gt; using the &lt;code&gt;Subscribable&lt;/code&gt; mixin.</source>
          <target state="translated">然后，JavaScript模块可以使用可 &lt;code&gt;Subscribable&lt;/code&gt; mixin 通过 &lt;code&gt;addListenerOn&lt;/code&gt; 注册以接收事件。</target>
        </trans-unit>
        <trans-unit id="2589f2075580d8c0b6f57b6f0772f6105755635c" translate="yes" xml:space="preserve">
          <source>JavaScript thread performance suffers greatly when running in dev mode. This is unavoidable: a lot more work needs to be done at runtime to provide you with good warnings and error messages, such as validating propTypes and various other assertions. Always make sure to test performance in &lt;a href=&quot;running-on-device#building-your-app-for-production&quot;&gt;release builds&lt;/a&gt;.</source>
          <target state="translated">在开发人员模式下运行时，JavaScript线程性能会受到很大影响。这是不可避免的：在运行时需要做更多的工作才能为您提供良好的警告和错误消息，例如验证propTypes和各种其他断言。始终确保在&lt;a href=&quot;running-on-device#building-your-app-for-production&quot;&gt;发布版本中&lt;/a&gt;测试性能。</target>
        </trans-unit>
        <trans-unit id="c7afff3f789cd350ad5ef2e0ccd58b4b677f1d64" translate="yes" xml:space="preserve">
          <source>Jest</source>
          <target state="translated">Jest</target>
        </trans-unit>
        <trans-unit id="16ca789cab6e9192d051fc2902682df3b557edf8" translate="yes" xml:space="preserve">
          <source>Jest tests are JavaScript-only tests run on the command line with node. You can run the existing React Native jest tests with:</source>
          <target state="translated">Jest测试是用node在命令行上运行的纯JavaScript测试。你可以用以下方法运行现有的React Native jest测试。</target>
        </trans-unit>
        <trans-unit id="aa47b7681aa35768715c6300771675b56639788a" translate="yes" xml:space="preserve">
          <source>Justify Content</source>
          <target state="translated">证明内容</target>
        </trans-unit>
        <trans-unit id="1c68c1fc1dff2d27783a11d229d7d6c8d5ce57a4" translate="yes" xml:space="preserve">
          <source>Keep in mind that ScrollViews must have a bounded height in order to work, since they contain unbounded-height children into a bounded container (via a scroll interaction). In order to bound the height of a ScrollView, either set the height of the view directly (discouraged) or make sure all parent views have bounded height. Forgetting to transfer &lt;code&gt;{flex: 1}&lt;/code&gt; down the view stack can lead to errors here, which the element inspector makes easy to debug.</source>
          <target state="translated">请记住，滚动视图必须具有一定的高度才能正常工作，因为它们将高度不受限制的子级包含在一个有限的容器中（通过滚动交互）。为了限制ScrollView的高度，请直接设置视图的高度（不建议使用），或者确保所有父视图的高度都已限制。忘记在视图堆栈中向下传递 &lt;code&gt;{flex: 1}&lt;/code&gt; 可能会导致错误，元素检查器使调试变得容易。</target>
        </trans-unit>
        <trans-unit id="65df2783bd6119d177a8840954b52dd8c04f2f4a" translate="yes" xml:space="preserve">
          <source>Keep in mind that if you use ES6 classes for your React components &lt;a href=&quot;https://facebook.github.io/react/blog/2015/01/27/react-v0.13.0-beta-1.html#mixins&quot;&gt;there is no built-in API for mixins&lt;/a&gt;. To use &lt;code&gt;TimerMixin&lt;/code&gt; with ES6 classes, we recommend &lt;a href=&quot;https://github.com/brigand/react-mixin&quot;&gt;react-mixin&lt;/a&gt;.</source>
          <target state="translated">请记住，如果您将ES6类用于React组件&lt;a href=&quot;https://facebook.github.io/react/blog/2015/01/27/react-v0.13.0-beta-1.html#mixins&quot;&gt;，则没有内置的mixins API&lt;/a&gt;。要将 &lt;code&gt;TimerMixin&lt;/code&gt; 与ES6类一起使用，建议使用&lt;a href=&quot;https://github.com/brigand/react-mixin&quot;&gt;react-mixin&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="a22c16410dc4eafc94fbc317a11af2903d7b50a3" translate="yes" xml:space="preserve">
          <source>Key Concepts</source>
          <target state="translated">关键概念</target>
        </trans-unit>
        <trans-unit id="99bd4d8ac8f7c0f639f080954fed0907b2841b5a" translate="yes" xml:space="preserve">
          <source>Key of the item to fetch.</source>
          <target state="translated">要取的物品的钥匙。</target>
        </trans-unit>
        <trans-unit id="41f4914c8c00643d7ccf01ee5d687ad3d17bca7c" translate="yes" xml:space="preserve">
          <source>Key of the item to modify.</source>
          <target state="translated">要修改的项目的键。</target>
        </trans-unit>
        <trans-unit id="e8d4e48369a3a569e876ab42bf6231c5a348cb54" translate="yes" xml:space="preserve">
          <source>Key of the item to remove.</source>
          <target state="translated">要删除的物品的钥匙。</target>
        </trans-unit>
        <trans-unit id="94186f07a021840e4a55ca8d7ebd45be82f26db2" translate="yes" xml:space="preserve">
          <source>Key of the item to set.</source>
          <target state="translated">要设置的项目的键。</target>
        </trans-unit>
        <trans-unit id="6662c40bac78a8fe5e23219b77087fbe7647cb15" translate="yes" xml:space="preserve">
          <source>Keyboard</source>
          <target state="translated">Keyboard</target>
        </trans-unit>
        <trans-unit id="f8289d8df3c587bf36b13c5492f2bfa725997644" translate="yes" xml:space="preserve">
          <source>Keyboard.addListener()</source>
          <target state="translated">Keyboard.addListener()</target>
        </trans-unit>
        <trans-unit id="642f7b191acd1c6a34b968048dbba25a2a0f61d2" translate="yes" xml:space="preserve">
          <source>Keyboard.dismiss()</source>
          <target state="translated">Keyboard.dismiss()</target>
        </trans-unit>
        <trans-unit id="39f5ec5f64e23a579d05afee3528a2b1b4929377" translate="yes" xml:space="preserve">
          <source>Keyboard.removeAllListeners()</source>
          <target state="translated">Keyboard.removeAllListeners()</target>
        </trans-unit>
        <trans-unit id="72fd95ed96b351045a7c273fab5775faaec34c7a" translate="yes" xml:space="preserve">
          <source>Keyboard.removeListener()</source>
          <target state="translated">Keyboard.removeListener()</target>
        </trans-unit>
        <trans-unit id="a8a11b5963ad8959c953576b3cc2fa2dc3fc6d57" translate="yes" xml:space="preserve">
          <source>KeyboardAvoidingView</source>
          <target state="translated">KeyboardAvoidingView</target>
        </trans-unit>
        <trans-unit id="32dc9bb0b33c14c1ca529d3dd9220d0452ccd548" translate="yes" xml:space="preserve">
          <source>KeyboardAvoidingView#behavior</source>
          <target state="translated">KeyboardAvoidingView#behavior</target>
        </trans-unit>
        <trans-unit id="93b46893ecd1f99374cf3394e78afc25c23d2ac1" translate="yes" xml:space="preserve">
          <source>KeyboardAvoidingView#contentContainerStyle</source>
          <target state="translated">KeyboardAvoidingView#contentContainerStyle</target>
        </trans-unit>
        <trans-unit id="8802f1011ff3d33a82fd4025829403ebe871c442" translate="yes" xml:space="preserve">
          <source>KeyboardAvoidingView#enabled</source>
          <target state="translated">KeyboardAvoidingView#enabled</target>
        </trans-unit>
        <trans-unit id="8cbc3f4e6ad785d1ebc41901bb9e32a0af25baf9" translate="yes" xml:space="preserve">
          <source>KeyboardAvoidingView#keyboardVerticalOffset</source>
          <target state="translated">KeyboardAvoidingView#keyboardVerticalOffset</target>
        </trans-unit>
        <trans-unit id="88b5a8b16b6187f1b55a29fbab9d83dd2492423f" translate="yes" xml:space="preserve">
          <source>KeyboardAvoidingView.onKeyboardChange()</source>
          <target state="translated">KeyboardAvoidingView.onKeyboardChange()</target>
        </trans-unit>
        <trans-unit id="dadbac1c0b58f8432d436ec86fac5baa4fc87408" translate="yes" xml:space="preserve">
          <source>KeyboardAvoidingView.onLayout()</source>
          <target state="translated">KeyboardAvoidingView.onLayout()</target>
        </trans-unit>
        <trans-unit id="66e342aa668376ae5453a8fc143aa6baa7646ac4" translate="yes" xml:space="preserve">
          <source>KeyboardAvoidingView.relativeKeyboardHeight()</source>
          <target state="translated">KeyboardAvoidingView.relativeKeyboardHeight()</target>
        </trans-unit>
        <trans-unit id="738fd1d2452fc31a236c5ad511bfcc46b324365e" translate="yes" xml:space="preserve">
          <source>Large</source>
          <target state="translated">Large</target>
        </trans-unit>
        <trans-unit id="646fe6cc77fd33d55eace11a09dcefd28261c92f" translate="yes" xml:space="preserve">
          <source>LargeInverse</source>
          <target state="translated">LargeInverse</target>
        </trans-unit>
        <trans-unit id="4acd89c9121c620ff22ca9db62466684be2a35de" translate="yes" xml:space="preserve">
          <source>Launches an alert dialog with the specified title and message.</source>
          <target state="translated">启动带有指定标题和信息的警报对话框。</target>
        </trans-unit>
        <trans-unit id="72c480a8e7df537bc0dee3e1543f5c2e5785cee8" translate="yes" xml:space="preserve">
          <source>Layout Props</source>
          <target state="translated">布局道具</target>
        </trans-unit>
        <trans-unit id="38e68608bf1e56222d4240a30607adeed2a549b0" translate="yes" xml:space="preserve">
          <source>Layout Props#alignContent</source>
          <target state="translated">布局道具#alignContent</target>
        </trans-unit>
        <trans-unit id="b70e2d28cdecaeb66b5539b0147ad0490af87695" translate="yes" xml:space="preserve">
          <source>Layout Props#alignItems</source>
          <target state="translated">布局道具#alignItems</target>
        </trans-unit>
        <trans-unit id="3bfd49ce80962957b5baae993d83a3f7dbdb0712" translate="yes" xml:space="preserve">
          <source>Layout Props#alignSelf</source>
          <target state="translated">布局道具#alignSelf</target>
        </trans-unit>
        <trans-unit id="a8d9f4804fd09fda3510250b9c24424bf549e27b" translate="yes" xml:space="preserve">
          <source>Layout Props#aspectRatio</source>
          <target state="translated">布局道具#长宽比</target>
        </trans-unit>
        <trans-unit id="d6912ba0ba2488289d8a3044ae61e6dd5216c92d" translate="yes" xml:space="preserve">
          <source>Layout Props#borderBottomWidth</source>
          <target state="translated">布局道具#borderBottomWidth</target>
        </trans-unit>
        <trans-unit id="b374f0aec4d1baf037613b6f01443fee2894b85d" translate="yes" xml:space="preserve">
          <source>Layout Props#borderEndWidth</source>
          <target state="translated">布局道具#borderEndWidth(边框宽度)</target>
        </trans-unit>
        <trans-unit id="daac083887b4d411865a638ac0e435d82b90df45" translate="yes" xml:space="preserve">
          <source>Layout Props#borderLeftWidth</source>
          <target state="translated">Layout Props#borderLeftWidth(边框左宽)</target>
        </trans-unit>
        <trans-unit id="2df207144fa959a18061011d36fa42c1cfa60f94" translate="yes" xml:space="preserve">
          <source>Layout Props#borderRightWidth</source>
          <target state="translated">布局道具#borderRightWidth</target>
        </trans-unit>
        <trans-unit id="276f28a3f7e609532b2a2055baf85a8e3132897a" translate="yes" xml:space="preserve">
          <source>Layout Props#borderStartWidth</source>
          <target state="translated">布局道具#borderStartWidth(边框宽度)</target>
        </trans-unit>
        <trans-unit id="4135cb13fad564c623e0e61fa25f127280f48cf2" translate="yes" xml:space="preserve">
          <source>Layout Props#borderTopWidth</source>
          <target state="translated">布局道具#borderTopWidth</target>
        </trans-unit>
        <trans-unit id="9e7cec55d03d616e6417bab8e8552d0a7272ffda" translate="yes" xml:space="preserve">
          <source>Layout Props#borderWidth</source>
          <target state="translated">Layout Props#borderWidth</target>
        </trans-unit>
        <trans-unit id="f20437ee1a2438cd77d8c4317bd8d1120107d64d" translate="yes" xml:space="preserve">
          <source>Layout Props#bottom</source>
          <target state="translated">布局道具#bottom</target>
        </trans-unit>
        <trans-unit id="b3cff8c2ee92c90dfe96644d71b2933cfcb06ab4" translate="yes" xml:space="preserve">
          <source>Layout Props#direction</source>
          <target state="translated">布局道具#方向</target>
        </trans-unit>
        <trans-unit id="f708df23e267c5e28d64cadd68eb4bc4bbd23d02" translate="yes" xml:space="preserve">
          <source>Layout Props#display</source>
          <target state="translated">布局道具#display</target>
        </trans-unit>
        <trans-unit id="cec42528899fdbd891408b1e2c681a27121db88f" translate="yes" xml:space="preserve">
          <source>Layout Props#end</source>
          <target state="translated">布局道具#完</target>
        </trans-unit>
        <trans-unit id="716ba470529f65ea7d9ae4752a3f2bf2f0c9d00c" translate="yes" xml:space="preserve">
          <source>Layout Props#flex</source>
          <target state="translated">布局道具#flex</target>
        </trans-unit>
        <trans-unit id="7f4166ac0cbcc39fdd31745193e45a14d0772c6a" translate="yes" xml:space="preserve">
          <source>Layout Props#flexBasis</source>
          <target state="translated">布局道具#flexBasis</target>
        </trans-unit>
        <trans-unit id="49ad78d8a678c04188e36bdef56f8c7b3a6404f9" translate="yes" xml:space="preserve">
          <source>Layout Props#flexDirection</source>
          <target state="translated">布局道具#flexDirection</target>
        </trans-unit>
        <trans-unit id="8487e19ba6358746ac4ccd59de91e68331c4d9b9" translate="yes" xml:space="preserve">
          <source>Layout Props#flexGrow</source>
          <target state="translated">布局道具#flexGrow</target>
        </trans-unit>
        <trans-unit id="43e89178fc3166139e9e2934394255c621e38f64" translate="yes" xml:space="preserve">
          <source>Layout Props#flexShrink</source>
          <target state="translated">布局道具#flexShrink</target>
        </trans-unit>
        <trans-unit id="a4900afaa94c73270a2e8cdf12b3522354ee1986" translate="yes" xml:space="preserve">
          <source>Layout Props#flexWrap</source>
          <target state="translated">布局道具#flexWrap</target>
        </trans-unit>
        <trans-unit id="d31e896f9e51a14eaa2c6015dfd7793255af3204" translate="yes" xml:space="preserve">
          <source>Layout Props#height</source>
          <target state="translated">布局道具#高度</target>
        </trans-unit>
        <trans-unit id="d0c48457f77eeac2933650b62af54fdb67127f0d" translate="yes" xml:space="preserve">
          <source>Layout Props#justifyContent</source>
          <target state="translated">布局道具#justifyContent</target>
        </trans-unit>
        <trans-unit id="334d23aff06e1cc645cce2e5901847540316a5d9" translate="yes" xml:space="preserve">
          <source>Layout Props#left</source>
          <target state="translated">布局道具#左</target>
        </trans-unit>
        <trans-unit id="d452f039a3438217aba8d6dcd89436ff034cde2c" translate="yes" xml:space="preserve">
          <source>Layout Props#margin</source>
          <target state="translated">布局道具#margin</target>
        </trans-unit>
        <trans-unit id="ba847a26d8d8bfa9d06a68a5b7d5a39c72a8b01a" translate="yes" xml:space="preserve">
          <source>Layout Props#marginBottom</source>
          <target state="translated">布局道具#marginBottom</target>
        </trans-unit>
        <trans-unit id="193cf8cc22004dea3b809da7173fb6cfa16725be" translate="yes" xml:space="preserve">
          <source>Layout Props#marginEnd</source>
          <target state="translated">Layout Props#marginEnd</target>
        </trans-unit>
        <trans-unit id="c232b975a45eb78196fd88d34ee626a039ef1deb" translate="yes" xml:space="preserve">
          <source>Layout Props#marginHorizontal</source>
          <target state="translated">布局道具#marginHorizontal</target>
        </trans-unit>
        <trans-unit id="2f0fd1776e2e04f8c04f1d109e97ee2cdc387e44" translate="yes" xml:space="preserve">
          <source>Layout Props#marginLeft</source>
          <target state="translated">布局道具#marginLeft</target>
        </trans-unit>
        <trans-unit id="5da443f1ab0f878a2428406c730765ce2feb434e" translate="yes" xml:space="preserve">
          <source>Layout Props#marginRight</source>
          <target state="translated">布局道具#marginRight</target>
        </trans-unit>
        <trans-unit id="9e46627b7297edce1ee4958e3ef4ecf89024ebc3" translate="yes" xml:space="preserve">
          <source>Layout Props#marginStart</source>
          <target state="translated">布局道具#marginStart</target>
        </trans-unit>
        <trans-unit id="ae09625396e441db73943602a4fd9755d11a14e9" translate="yes" xml:space="preserve">
          <source>Layout Props#marginTop</source>
          <target state="translated">布局道具#marginTop</target>
        </trans-unit>
        <trans-unit id="0fe08daf4ce4caf48358d2fa3c9a6359374751b5" translate="yes" xml:space="preserve">
          <source>Layout Props#marginVertical</source>
          <target state="translated">佈局道具#marginVertical</target>
        </trans-unit>
        <trans-unit id="29957f4a3fcc7904fab486a24e1595a2458d8b45" translate="yes" xml:space="preserve">
          <source>Layout Props#maxHeight</source>
          <target state="translated">布局道具#最大高度</target>
        </trans-unit>
        <trans-unit id="3f326672116bfd8a3db07186e7888bf020422705" translate="yes" xml:space="preserve">
          <source>Layout Props#maxWidth</source>
          <target state="translated">布局道具#最大宽度</target>
        </trans-unit>
        <trans-unit id="82d1f8b0148385701d35b6d094e62db762680f57" translate="yes" xml:space="preserve">
          <source>Layout Props#minHeight</source>
          <target state="translated">布局道具#最小高度</target>
        </trans-unit>
        <trans-unit id="4caf31131acbf672c35447802c94bbd107034c8e" translate="yes" xml:space="preserve">
          <source>Layout Props#minWidth</source>
          <target state="translated">布局道具#最小宽度</target>
        </trans-unit>
        <trans-unit id="9fa2ad8849bb862b4ab632a9fb63ffca505ca430" translate="yes" xml:space="preserve">
          <source>Layout Props#overflow</source>
          <target state="translated">布局道具#溢出</target>
        </trans-unit>
        <trans-unit id="1ef4fe04ddbe59484bf8d822830f20f9069956f5" translate="yes" xml:space="preserve">
          <source>Layout Props#padding</source>
          <target state="translated">布局道具#padding</target>
        </trans-unit>
        <trans-unit id="a8517fb118b85ad951401d6ca0d8a14f618b5089" translate="yes" xml:space="preserve">
          <source>Layout Props#paddingBottom</source>
          <target state="translated">布局道具#paddingBottom</target>
        </trans-unit>
        <trans-unit id="e1ada6197d2d0fce739e6e69bb3552c63fb55dd8" translate="yes" xml:space="preserve">
          <source>Layout Props#paddingEnd</source>
          <target state="translated">Layout Props#paddingEnd</target>
        </trans-unit>
        <trans-unit id="3143a88befa3ae33c150490d4eb7f73ea1e8c40f" translate="yes" xml:space="preserve">
          <source>Layout Props#paddingHorizontal</source>
          <target state="translated">Layout Props#paddingHorizontal</target>
        </trans-unit>
        <trans-unit id="ad99237c7cea01d54017b92042ed96f384248aa5" translate="yes" xml:space="preserve">
          <source>Layout Props#paddingLeft</source>
          <target state="translated">布局道具#paddingLeft</target>
        </trans-unit>
        <trans-unit id="5a14da431decfe5249f549aa1cff2a10da1fc155" translate="yes" xml:space="preserve">
          <source>Layout Props#paddingRight</source>
          <target state="translated">布局道具#paddingRight</target>
        </trans-unit>
        <trans-unit id="58d7763db27dcc40273fee6aba07f93038654953" translate="yes" xml:space="preserve">
          <source>Layout Props#paddingStart</source>
          <target state="translated">Layout Props#paddingStart</target>
        </trans-unit>
        <trans-unit id="97a9227216ef1f2bdd263b8e9926c0c2bc236c39" translate="yes" xml:space="preserve">
          <source>Layout Props#paddingTop</source>
          <target state="translated">布局道具#paddingTop</target>
        </trans-unit>
        <trans-unit id="f86fa12aca10bdbd2106bf3e5084096e5e9306c8" translate="yes" xml:space="preserve">
          <source>Layout Props#paddingVertical</source>
          <target state="translated">布局道具#paddingVertical</target>
        </trans-unit>
        <trans-unit id="e0d8bbc28ffe9e5923f27caabd5d5601170f3748" translate="yes" xml:space="preserve">
          <source>Layout Props#position</source>
          <target state="translated">布局道具#标题</target>
        </trans-unit>
        <trans-unit id="d279e1796248c538f2f0a5492ec75e7017424914" translate="yes" xml:space="preserve">
          <source>Layout Props#right</source>
          <target state="translated">布局道具#右图</target>
        </trans-unit>
        <trans-unit id="02bc06431a731eab2b14ebeec33729229ac2911d" translate="yes" xml:space="preserve">
          <source>Layout Props#start</source>
          <target state="translated">布局道具#开始</target>
        </trans-unit>
        <trans-unit id="177d84d553773c05a1edb0d8b6048f9bb01a02b3" translate="yes" xml:space="preserve">
          <source>Layout Props#top</source>
          <target state="translated">布局道具#top</target>
        </trans-unit>
        <trans-unit id="8114523435c0b3c09ce8d2ecb65cd5ac360e056d" translate="yes" xml:space="preserve">
          <source>Layout Props#width</source>
          <target state="translated">布局道具#宽度</target>
        </trans-unit>
        <trans-unit id="294d2f8d65b7b9abba6935a9202e6fcca1a5d745" translate="yes" xml:space="preserve">
          <source>Layout Props#zIndex</source>
          <target state="translated">布局道具#zIndex</target>
        </trans-unit>
        <trans-unit id="033b90f22444ece2f1065757217f80452f1d0585" translate="yes" xml:space="preserve">
          <source>Layout Props...</source>
          <target state="translated">布局道具...</target>
        </trans-unit>
        <trans-unit id="5678bca26c806fe01f39ecf19c32741f485f17d4" translate="yes" xml:space="preserve">
          <source>Layout computation flow</source>
          <target state="translated">布局计算流程</target>
        </trans-unit>
        <trans-unit id="aa6aa5d26fb80118a1177d7eabf7d9a2343d76c6" translate="yes" xml:space="preserve">
          <source>Layout of a React Native component embedded in native</source>
          <target state="translated">嵌入在本地的React Native组件的布局。</target>
        </trans-unit>
        <trans-unit id="c4eebd7328d5f0bbfcf2359d6e88ba0ad176bdc7" translate="yes" xml:space="preserve">
          <source>Layout of a native component embedded in React Native</source>
          <target state="translated">嵌入在React Native中的本地组件的布局。</target>
        </trans-unit>
        <trans-unit id="740c1dbba7353d3244caa3c131d42dc26ba56e99" translate="yes" xml:space="preserve">
          <source>Layout with Flexbox</source>
          <target state="translated">使用Flexbox布局</target>
        </trans-unit>
        <trans-unit id="bef3b046fddaeef8c3e1938f2b4cfd8cd2578187" translate="yes" xml:space="preserve">
          <source>LayoutAnimation</source>
          <target state="translated">LayoutAnimation</target>
        </trans-unit>
        <trans-unit id="60bffeeca7775d36b0da39265b82f5f7e6dc546f" translate="yes" xml:space="preserve">
          <source>LayoutAnimation only works for fire-and-forget animations (&quot;static&quot; animations) -- if it must be interruptible, you will need to use &lt;code&gt;Animated&lt;/code&gt;.</source>
          <target state="translated">LayoutAnimation仅适用于抛弃式动画（&amp;ldquo;静态&amp;rdquo;动画）-如果必须可中断，则需要使用 &lt;code&gt;Animated&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="ef90824266d198251e74357ff6e86898488a6a34" translate="yes" xml:space="preserve">
          <source>LayoutAnimation.checkConfig()</source>
          <target state="translated">LayoutAnimation.checkConfig()</target>
        </trans-unit>
        <trans-unit id="7c33300001953a205255e14cf51eb2d4e1c09df5" translate="yes" xml:space="preserve">
          <source>LayoutAnimation.configureNext()</source>
          <target state="translated">LayoutAnimation.configureNext()</target>
        </trans-unit>
        <trans-unit id="4aa0db9f8d953665f99b555eeb6d21a4efdda010" translate="yes" xml:space="preserve">
          <source>LayoutAnimation.create()</source>
          <target state="translated">LayoutAnimation.create()</target>
        </trans-unit>
        <trans-unit id="824d76b124e6289f372e2ff6bcba91e8939343bd" translate="yes" xml:space="preserve">
          <source>Learn more</source>
          <target state="translated">了解更多</target>
        </trans-unit>
        <trans-unit id="9d3782d45c434ec4756ebd9c97100acd66ded41c" translate="yes" xml:space="preserve">
          <source>Learn the Basics</source>
          <target state="translated">学习基础知识</target>
        </trans-unit>
        <trans-unit id="f6b8ebf6fc2dc317ab2ffb2a576a4a42a269d51e" translate="yes" xml:space="preserve">
          <source>Leave a comment saying the issue has been triaged.</source>
          <target state="translated">留言说问题已被分流。</target>
        </trans-unit>
        <trans-unit id="26792865e21d084e1031e661b32d62602be4c7f5" translate="yes" xml:space="preserve">
          <source>Let's add some native code in order to start the React Native runtime and tell it to render our JS component. To do this, we're going to create an &lt;code&gt;Activity&lt;/code&gt; that creates a &lt;code&gt;ReactRootView&lt;/code&gt;, starts a React application inside it and sets it as the main content view.</source>
          <target state="translated">让我们添加一些本机代码以启动React Native运行时并告诉它呈现我们的JS组件。为此，我们将创建一个 &lt;code&gt;Activity&lt;/code&gt; ，该Activity创建一个 &lt;code&gt;ReactRootView&lt;/code&gt; ，在其中启动一个React应用程序并将其设置为主要内容视图。</target>
        </trans-unit>
        <trans-unit id="3ef0122ba85d31b104ef0e81010dd7aebeea42f2" translate="yes" xml:space="preserve">
          <source>Let's break down what's happening here. In the &lt;code&gt;FadeInView&lt;/code&gt; constructor, a new &lt;code&gt;Animated.Value&lt;/code&gt; called &lt;code&gt;fadeAnim&lt;/code&gt; is initialized as part of &lt;code&gt;state&lt;/code&gt;. The opacity property on the &lt;code&gt;View&lt;/code&gt; is mapped to this animated value. Behind the scenes, the numeric value is extracted and used to set opacity.</source>
          <target state="translated">让我们分解一下这里发生的事情。在 &lt;code&gt;FadeInView&lt;/code&gt; 构造函数中，名为 &lt;code&gt;fadeAnim&lt;/code&gt; 的新 &lt;code&gt;Animated.Value&lt;/code&gt; 初始化为 &lt;code&gt;state&lt;/code&gt; 的一部分。 &lt;code&gt;View&lt;/code&gt; 上的不透明度属性映射到该动画值。在幕后，提取数值并用于设置不透明度。</target>
        </trans-unit>
        <trans-unit id="b9a382d434fe049fb5745e05ca93b75219bef839" translate="yes" xml:space="preserve">
          <source>Let's do this thing.</source>
          <target state="translated">让我们做这件事。</target>
        </trans-unit>
        <trans-unit id="47ab62b49c5c1e0af7b770c968a9eb6e9dc3a6ca" translate="yes" xml:space="preserve">
          <source>Let's imagine that &lt;code&gt;setNativeProps&lt;/code&gt; was not available. One way that we might implement it with that constraint is to store the opacity value in the state, then update that value whenever &lt;code&gt;onPress&lt;/code&gt; is fired:</source>
          <target state="translated">让我们想象一下 &lt;code&gt;setNativeProps&lt;/code&gt; 不可用。我们可以用该约束实现它的一种方法是将不透明度值存储在状态中，然后在触发 &lt;code&gt;onPress&lt;/code&gt; 时更新该值：</target>
        </trans-unit>
        <trans-unit id="31c999bfdb1e5c6513cf32fc9ce73e2869777a57" translate="yes" xml:space="preserve">
          <source>Let's look at an example.</source>
          <target state="translated">我们来看一个例子。</target>
        </trans-unit>
        <trans-unit id="1e793074411896ba3a1c7bf261595445650b927f" translate="yes" xml:space="preserve">
          <source>Let's now set up an Android device to run our React Native projects. Go ahead and plug in your device via USB to your development machine.</source>
          <target state="translated">现在让我们设置一个Android设备来运行我们的React Native项目。继续通过USB将设备插入到你的开发机器上。</target>
        </trans-unit>
        <trans-unit id="d1cda670ea2a7c5c9630daa852b5578fc523738c" translate="yes" xml:space="preserve">
          <source>Let's say we have the same &lt;code&gt;CalendarManager&lt;/code&gt; but as a Swift class:</source>
          <target state="translated">假设我们具有相同的 &lt;code&gt;CalendarManager&lt;/code&gt; ,但作为Swift类：</target>
        </trans-unit>
        <trans-unit id="e183d3bc3b67ea2b0830b749a9842a04e66a49df" translate="yes" xml:space="preserve">
          <source>Let's say we want to add an interactive Map to our app - might as well use &lt;a href=&quot;https://developer.apple.com/library/prerelease/mac/documentation/MapKit/Reference/MKMapView_Class/index.html&quot;&gt;&lt;code&gt;MKMapView&lt;/code&gt;&lt;/a&gt;, we just need to make it usable from JavaScript.</source>
          <target state="translated">假设我们要向应用程序中添加一个交互式地图-最好使用&lt;a href=&quot;https://developer.apple.com/library/prerelease/mac/documentation/MapKit/Reference/MKMapView_Class/index.html&quot;&gt; &lt;code&gt;MKMapView&lt;/code&gt; &lt;/a&gt;，我们只需要从JavaScript使其可用即可。</target>
        </trans-unit>
        <trans-unit id="effbc95316004ace21e83c4f469cdfe7d7736e6b" translate="yes" xml:space="preserve">
          <source>Let's see all of these in action:</source>
          <target state="translated">让我们来看看这些的行动。</target>
        </trans-unit>
        <trans-unit id="b699cc89dcb3ffd15b5d60e04107b04f6b41c95f" translate="yes" xml:space="preserve">
          <source>Let's start by removing &lt;code&gt;READ_PHONE_STATE&lt;/code&gt;, &lt;code&gt;WRITE_EXTERNAL_STORAGE&lt;/code&gt;, and &lt;code&gt;READ_EXTERNAL_STORAGE&lt;/code&gt; from both production and debug APKs, as it is not required in either. These storage permissions are still not needed if &lt;code&gt;AsyncStorage&lt;/code&gt; module is in use, so it is safe to remove from both production and debug.</source>
          <target state="translated">&lt;code&gt;WRITE_EXTERNAL_STORAGE&lt;/code&gt; ，从生产和调试APK中删除 &lt;code&gt;READ_PHONE_STATE&lt;/code&gt; ，WRITE_EXTERNAL_STORAGE和 &lt;code&gt;READ_EXTERNAL_STORAGE&lt;/code&gt; ,因为两者都不要求。如果正在使用 &lt;code&gt;AsyncStorage&lt;/code&gt; 模块，则仍不需要这些存储权限，因此可以安全地从生产和调试中删除。</target>
        </trans-unit>
        <trans-unit id="1aeef6a70baee7da6d57aa3b0a173922384cf77f" translate="yes" xml:space="preserve">
          <source>Lets the user select text, to use the native copy and paste functionality.</source>
          <target state="translated">让用户选择文本,使用本机的复制和粘贴功能。</target>
        </trans-unit>
        <trans-unit id="3229609e15436ec51bcf00818a69a84dbc58a0c2" translate="yes" xml:space="preserve">
          <source>License</source>
          <target state="translated">License</target>
        </trans-unit>
        <trans-unit id="40721cc170a6bfccd149edbfe1dc276de96ccd33" translate="yes" xml:space="preserve">
          <source>Licensed under the Creative Commons Attribution 4.0 International Public License.</source>
          <target state="translated">根据知识共享署名4.0国际公共许可证授权。</target>
        </trans-unit>
        <trans-unit id="016f46df0876a169cd69a076db472e106690ad5a" translate="yes" xml:space="preserve">
          <source>Lifecycle alternative:</source>
          <target state="translated">生命周期备选方案。</target>
        </trans-unit>
        <trans-unit id="718c33193610e8e004d5bafa3c0af2ae9de225c6" translate="yes" xml:space="preserve">
          <source>Lifecycle example:</source>
          <target state="translated">生命周期的例子。</target>
        </trans-unit>
        <trans-unit id="51c8d99c07be8fef2580bdc93253f5c38cafd280" translate="yes" xml:space="preserve">
          <source>Light background, dark texts and icons (requires API&amp;gt;=23 on Android)</source>
          <target state="translated">浅色背景，深色文本和图标（在Android上需要API&amp;gt; = 23）</target>
        </trans-unit>
        <trans-unit id="02a020166c902190507a14f016c71915dd76af48" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;FlatList&lt;/code&gt;, but for sectioned lists.</source>
          <target state="translated">类似于 &lt;code&gt;FlatList&lt;/code&gt; ，但适用于分段列表。</target>
        </trans-unit>
        <trans-unit id="aba548faac6f0545ce6299df7cb4c8205a4cb83e" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;measure()&lt;/code&gt;, but measures the view relative an ancestor, specified as &lt;code&gt;relativeToNativeNode&lt;/code&gt;. This means that the returned x, y are relative to the origin x, y of the ancestor view.</source>
          <target state="translated">与 &lt;code&gt;measure()&lt;/code&gt; 相似，但是测量相对于祖先的视图，该祖先指定为 &lt;code&gt;relativeToNativeNode&lt;/code&gt; 。这意味着返回的x，y相对于祖先视图的原点x，y。</target>
        </trans-unit>
        <trans-unit id="0bedbcd918ad63ba0bd14366312d1fa169e514d9" translate="yes" xml:space="preserve">
          <source>Like other navigation systems, &lt;code&gt;NavigatorIOS&lt;/code&gt; uses routes to represent screens, with some important differences. The actual component that will be rendered can be specified using the &lt;code&gt;component&lt;/code&gt; key in the route, and any props that should be passed to this component can be specified in &lt;code&gt;passProps&lt;/code&gt;. A &quot;navigator&quot; object is automatically passed as a prop to the component, allowing you to call &lt;code&gt;push&lt;/code&gt; and &lt;code&gt;pop&lt;/code&gt; as needed.</source>
          <target state="translated">与其他导航系统一样， &lt;code&gt;NavigatorIOS&lt;/code&gt; 使用路线表示屏幕，但有一些重要区别。可以使用路线中的 &lt;code&gt;component&lt;/code&gt; 键指定将要渲染的实际组件，可以在 &lt;code&gt;passProps&lt;/code&gt; 中指定应传递给该组件的任何道具。&amp;ldquo;导航器&amp;rdquo;对象将作为道具自动传递给组件，从而允许您根据需要调用 &lt;code&gt;push&lt;/code&gt; 和 &lt;code&gt;pop&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="2a54c412631af203d31e6c5d114af98b8a42ee9b" translate="yes" xml:space="preserve">
          <source>Like the native module guide, this too is a more advanced guide that assumes you are somewhat familiar with Android SDK programming. This guide will show you how to build a native UI component, walking you through the implementation of a subset of the existing &lt;code&gt;ImageView&lt;/code&gt; component available in the core React Native library.</source>
          <target state="translated">像本机模块指南一样，这也是一个更高级的指南，假定您对Android SDK编程有所了解。本指南将向您展示如何构建本机UI组件，并逐步实现核心React Native库中现有的 &lt;code&gt;ImageView&lt;/code&gt; 组件的子集。</target>
        </trans-unit>
        <trans-unit id="5f6e49edea94c28ebffddc1b49c032894e4b199c" translate="yes" xml:space="preserve">
          <source>Like the native module guide, this too is a more advanced guide that assumes you are somewhat familiar with iOS programming. This guide will show you how to build a native UI component, walking you through the implementation of a subset of the existing &lt;code&gt;MapView&lt;/code&gt; component available in the core React Native library.</source>
          <target state="translated">像本机模块指南一样，这也是一个更高级的指南，假定您对iOS编程有所了解。本指南将向您展示如何构建本机UI组件，并逐步实现核心React Native库中可用的现有 &lt;code&gt;MapView&lt;/code&gt; 组件的子集。</target>
        </trans-unit>
        <trans-unit id="e1e7993a31ac09827a9d8c84017f1da27f598b3d" translate="yes" xml:space="preserve">
          <source>Limited Style Inheritance</source>
          <target state="translated">有限式继承</target>
        </trans-unit>
        <trans-unit id="3ae1d3043f07f2f18fbb48af033023b1eafb7fc6" translate="yes" xml:space="preserve">
          <source>Limits of properties</source>
          <target state="translated">属性的限制</target>
        </trans-unit>
        <trans-unit id="e39d5682b853690e7fea28ee928a8d7f3e97e954" translate="yes" xml:space="preserve">
          <source>Limits the maximum number of characters that can be entered. Use this instead of implementing the logic in JS to avoid flicker.</source>
          <target state="translated">限制可以输入的最大字符数。用这个代替在JS中实现逻辑,以避免闪烁。</target>
        </trans-unit>
        <trans-unit id="61bbbe4c359b86828c0a8b7ade79152dc01e8eeb" translate="yes" xml:space="preserve">
          <source>Link your native dependencies:</source>
          <target state="translated">链接你的本地依赖关系。</target>
        </trans-unit>
        <trans-unit id="a5f54e0f2d31735fc8356d4c643062d7468cc599" translate="yes" xml:space="preserve">
          <source>Linking</source>
          <target state="translated">Linking</target>
        </trans-unit>
        <trans-unit id="9e700acbf3051d037aa53517b87ce2f00dd20348" translate="yes" xml:space="preserve">
          <source>Linking Libraries</source>
          <target state="translated">连接图书馆</target>
        </trans-unit>
        <trans-unit id="901139f90516a4df774f868c364bd6a9a565fbd2" translate="yes" xml:space="preserve">
          <source>Linking.addEventListener()</source>
          <target state="translated">Linking.addEventListener()</target>
        </trans-unit>
        <trans-unit id="353e1d60bbecc26fe1c6fd59ef201c0931cf9bd3" translate="yes" xml:space="preserve">
          <source>Linking.canOpenURL()</source>
          <target state="translated">Linking.canOpenURL()</target>
        </trans-unit>
        <trans-unit id="9868a7fc3975af6bf935a6e2be3b4cbb96325468" translate="yes" xml:space="preserve">
          <source>Linking.constructor()</source>
          <target state="translated">Linking.constructor()</target>
        </trans-unit>
        <trans-unit id="11ee97c143b571d5731a921f9ee1db9db8140ad8" translate="yes" xml:space="preserve">
          <source>Linking.getInitialURL()</source>
          <target state="translated">Linking.getInitialURL()</target>
        </trans-unit>
        <trans-unit id="b414adad8bb96c142262bddd147b4e29265585cf" translate="yes" xml:space="preserve">
          <source>Linking.openURL()</source>
          <target state="translated">Linking.openURL()</target>
        </trans-unit>
        <trans-unit id="abca3a99341b96d8d288c507320f4a61aa45dd94" translate="yes" xml:space="preserve">
          <source>Linking.removeEventListener()</source>
          <target state="translated">Linking.removeEventListener()</target>
        </trans-unit>
        <trans-unit id="7e5260f57f81a2d53b3c28279032a8c98fa79dcb" translate="yes" xml:space="preserve">
          <source>Linux (64-bit) - &lt;a href=&quot;http://dl.google.com/android/repository/android-ndk-r10e-linux-x86_64.zip&quot;&gt;http://dl.google.com/android/repository/android-ndk-r10e-linux-x86_64.zip&lt;/a&gt;</source>
          <target state="translated">Linux（64位）&lt;a href=&quot;http://dl.google.com/android/repository/android-ndk-r10e-linux-x86_64.zip&quot;&gt;-http://dl.google.com/android/repository/android-ndk-r10e-linux-x86_64.zip&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="5cc0edff424b271637253080d0d8e253f99dd20f" translate="yes" xml:space="preserve">
          <source>Linux (64-bit) - &lt;a href=&quot;https://dl.google.com/android/repository/android-ndk-r10e-linux-x86_64.zip&quot;&gt;http://dl.google.com/android/repository/android-ndk-r10e-linux-x86_64.zip&lt;/a&gt;</source>
          <target state="translated">Linux（64位）&lt;a href=&quot;https://dl.google.com/android/repository/android-ndk-r10e-linux-x86_64.zip&quot;&gt;-http://dl.google.com/android/repository/android-ndk-r10e-linux-x86_64.zip&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="2d28ace15581d25a0bc2e3781306393967a803c6" translate="yes" xml:space="preserve">
          <source>List Views</source>
          <target state="translated">列表视图</target>
        </trans-unit>
        <trans-unit id="d7d2509e897132e6581d8230281a406f2c4e7c8a" translate="yes" xml:space="preserve">
          <source>List footer support.</source>
          <target state="translated">列表页脚支持。</target>
        </trans-unit>
        <trans-unit id="77004090314048c76cb78a16b9043e3dcfdc111f" translate="yes" xml:space="preserve">
          <source>List header support.</source>
          <target state="translated">支持列表头。</target>
        </trans-unit>
        <trans-unit id="659ce848c84b25acf79175005272d0b877f4a138" translate="yes" xml:space="preserve">
          <source>List of &lt;code&gt;ViewabilityConfig&lt;/code&gt;/&lt;code&gt;onViewableItemsChanged&lt;/code&gt; pairs. A specific &lt;code&gt;onViewableItemsChanged&lt;/code&gt; will be called when its corresponding &lt;code&gt;ViewabilityConfig&lt;/code&gt;'s conditions are met. See &lt;code&gt;ViewabilityHelper.js&lt;/code&gt; for flow type and further documentation.</source>
          <target state="translated">清单 &lt;code&gt;ViewabilityConfig&lt;/code&gt; / &lt;code&gt;onViewableItemsChanged&lt;/code&gt; 对。具体 &lt;code&gt;onViewableItemsChanged&lt;/code&gt; 时，其对应的会被调用 &lt;code&gt;ViewabilityConfig&lt;/code&gt; 满足的条件。有关流类型和更多文档，请参见 &lt;code&gt;ViewabilityHelper.js&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="191bd84d0d5eb402a06731ce858ae6642efd3340" translate="yes" xml:space="preserve">
          <source>List of image URLs to check the cache for.</source>
          <target state="translated">要检查缓存的图像URL列表。</target>
        </trans-unit>
        <trans-unit id="3d473f5bba4918d300464f44ff1a8ec1aa1c14e8" translate="yes" xml:space="preserve">
          <source>List of origin strings to allow being navigated to. The strings allow wildcards and get matched against &lt;em&gt;just&lt;/em&gt; the origin (not the full URL). If the user taps to navigate to a new page but the new page is not in this whitelist, the URL will be handled by the OS. The default whitelisted origins are &quot;http://&lt;em&gt;&quot; and &quot;https://&lt;/em&gt;&quot;.</source>
          <target state="translated">允许导航到的原始字符串列表。这些字符串允许使用通配符，并且&lt;em&gt;仅&lt;/em&gt;与源（而不是完整的URL）匹配。如果用户点击导航至新页面，但该新页面不在此白名单中，则该URL将由操作系统处理。列入白名单的默认来源是&amp;ldquo; http：// &lt;em&gt;&amp;rdquo;和&amp;ldquo; https：//&lt;/em&gt; &amp;rdquo;。</target>
        </trans-unit>
        <trans-unit id="192847b15c33bd4913e8c554131ed60b7aeaed65" translate="yes" xml:space="preserve">
          <source>ListView</source>
          <target state="translated">ListView</target>
        </trans-unit>
        <trans-unit id="9ece0f85242cdc457a048818285819efd99192d2" translate="yes" xml:space="preserve">
          <source>ListView - A core component designed for efficient display of vertically scrolling lists of changing data. The minimal API is to create a &lt;a href=&quot;listviewdatasource&quot;&gt;&lt;code&gt;ListView.DataSource&lt;/code&gt;&lt;/a&gt;, populate it with a simple array of data blobs, and instantiate a &lt;code&gt;ListView&lt;/code&gt; component with that data source and a &lt;code&gt;renderRow&lt;/code&gt; callback which takes a blob from the data array and returns a renderable component.</source>
          <target state="translated">ListView-一个核心组件，旨在有效显示更改数据的垂直滚动列表。最小的API是创建一个&lt;a href=&quot;listviewdatasource&quot;&gt; &lt;code&gt;ListView.DataSource&lt;/code&gt; &lt;/a&gt;，用一个简单的数据Blob数组填充它，并使用该数据源和 &lt;code&gt;renderRow&lt;/code&gt; 回调实例化 &lt;code&gt;ListView&lt;/code&gt; 组件，该回调从数据数组中获取Blob并返回可渲染的组件。</target>
        </trans-unit>
        <trans-unit id="58a8497c6a245b994017f281b6a43a1935d35f60" translate="yes" xml:space="preserve">
          <source>ListView also supports more advanced features, including sections with sticky section headers, header and footer support, callbacks on reaching the end of the available data (&lt;code&gt;onEndReached&lt;/code&gt;) and on the set of rows that are visible in the device viewport change (&lt;code&gt;onChangeVisibleRows&lt;/code&gt;), and several performance optimizations.</source>
          <target state="translated">ListView还支持更高级的功能，包括具有粘性节标题的节，页眉和页脚支持，到达可用数据末尾的回调（ &lt;code&gt;onEndReached&lt;/code&gt; ）和设备视口更改可见的行集（ &lt;code&gt;onChangeVisibleRows&lt;/code&gt; ）的回调，以及几个性能优化。</target>
        </trans-unit>
        <trans-unit id="df96466d0c27eff9229da86e144c2e1321322b57" translate="yes" xml:space="preserve">
          <source>ListView#dataSource</source>
          <target state="translated">ListView#dataSource</target>
        </trans-unit>
        <trans-unit id="03aca2595702fced90e7e682136665d5fb075aad" translate="yes" xml:space="preserve">
          <source>ListView#enableEmptySections</source>
          <target state="translated">ListView#enableEmptySections</target>
        </trans-unit>
        <trans-unit id="da8e54225bd8f7fce08a730b5a1df41b810622e6" translate="yes" xml:space="preserve">
          <source>ListView#initialListSize</source>
          <target state="translated">ListView#initialListSize</target>
        </trans-unit>
        <trans-unit id="60de8cb9e9273f53794d6d716179c8df6c4ec25e" translate="yes" xml:space="preserve">
          <source>ListView#onChangeVisibleRows</source>
          <target state="translated">ListView#onChangeVisibleRows</target>
        </trans-unit>
        <trans-unit id="c2b3bb8a640385fe1f91ddcb5f129fe3ee4d8828" translate="yes" xml:space="preserve">
          <source>ListView#onEndReached</source>
          <target state="translated">ListView#onEndReached</target>
        </trans-unit>
        <trans-unit id="25ed4fea6955781b29f413c3e1a58c7f46597cee" translate="yes" xml:space="preserve">
          <source>ListView#onEndReachedThreshold</source>
          <target state="translated">ListView#onEndReachedThreshold</target>
        </trans-unit>
        <trans-unit id="d9f912d31aaddc422ad901c0d0d5710680851d8d" translate="yes" xml:space="preserve">
          <source>ListView#pageSize</source>
          <target state="translated">ListView#pageSize</target>
        </trans-unit>
        <trans-unit id="77279d76fd0a47c0c697ed7130600562b60b7d61" translate="yes" xml:space="preserve">
          <source>ListView#removeClippedSubviews</source>
          <target state="translated">ListView#removeClippedSubviews</target>
        </trans-unit>
        <trans-unit id="f1d00fc4b1cfb1f2292169ad03398c508ea1cd36" translate="yes" xml:space="preserve">
          <source>ListView#renderFooter</source>
          <target state="translated">ListView#renderFooter</target>
        </trans-unit>
        <trans-unit id="c36ea5a36ac36c37d0f7e010123733b39a41c68f" translate="yes" xml:space="preserve">
          <source>ListView#renderHeader</source>
          <target state="translated">ListView#renderHeader</target>
        </trans-unit>
        <trans-unit id="a9da118d5fb75484574b9fa3fe82ee9c675ca1ba" translate="yes" xml:space="preserve">
          <source>ListView#renderRow</source>
          <target state="translated">ListView#renderRow</target>
        </trans-unit>
        <trans-unit id="f95f2cdf37c35c0de9ba21fa196a7889c378fcd2" translate="yes" xml:space="preserve">
          <source>ListView#renderScrollComponent</source>
          <target state="translated">ListView#renderScrollComponent</target>
        </trans-unit>
        <trans-unit id="6c7a54f6bbaf2c1c6c55668b44770a55c42a804e" translate="yes" xml:space="preserve">
          <source>ListView#renderSectionHeader</source>
          <target state="translated">ListView#renderSectionHeader</target>
        </trans-unit>
        <trans-unit id="cfdfa8bd4fe36d94d5e519b2cdad8b777c1ab425" translate="yes" xml:space="preserve">
          <source>ListView#renderSeparator</source>
          <target state="translated">ListView#renderSeparator</target>
        </trans-unit>
        <trans-unit id="8cf345da9b1e72dfb82496b72f7d68216f3dc40d" translate="yes" xml:space="preserve">
          <source>ListView#scrollRenderAheadDistance</source>
          <target state="translated">ListView#scrollRenderAheadDistance</target>
        </trans-unit>
        <trans-unit id="c53d7357196cbaaced5b1f4d0937a2fe4219a0b2" translate="yes" xml:space="preserve">
          <source>ListView#stickyHeaderIndices</source>
          <target state="translated">ListView#stickyHeaderIndices</target>
        </trans-unit>
        <trans-unit id="c801cb3b66241041c4e9b1b58c60343bb8fe3a5a" translate="yes" xml:space="preserve">
          <source>ListView#stickySectionHeadersEnabled</source>
          <target state="translated">ListView#stickySectionHeadersEnabled</target>
        </trans-unit>
        <trans-unit id="d3318afa832bbe584d7ea31ef96bab59f984af00" translate="yes" xml:space="preserve">
          <source>ListView.flashScrollIndicators()</source>
          <target state="translated">ListView.flashScrollIndicators()</target>
        </trans-unit>
        <trans-unit id="ebdd3fffd3585d7bda989dd0e6f6aadb93c79c5a" translate="yes" xml:space="preserve">
          <source>ListView.getMetrics()</source>
          <target state="translated">ListView.getMetrics()</target>
        </trans-unit>
        <trans-unit id="718ac07b5c7cc38d53151a1c0e360237b494b597" translate="yes" xml:space="preserve">
          <source>ListView.scrollTo()</source>
          <target state="translated">ListView.scrollTo()</target>
        </trans-unit>
        <trans-unit id="a4f096f0565a73db66a6cf5d988fc575b295fde7" translate="yes" xml:space="preserve">
          <source>ListView.scrollToEnd()</source>
          <target state="translated">ListView.scrollToEnd()</target>
        </trans-unit>
        <trans-unit id="e75271ee6f73e85b8fa699a941dc0c31d11dc261" translate="yes" xml:space="preserve">
          <source>ListViewDataSource</source>
          <target state="translated">ListViewDataSource</target>
        </trans-unit>
        <trans-unit id="b1bf1d85896db174a538b255e2c31a536708deab" translate="yes" xml:space="preserve">
          <source>ListViewDataSource.cloneWithRows()</source>
          <target state="translated">ListViewDataSource.cloneWithRows()</target>
        </trans-unit>
        <trans-unit id="79086411adddcef34209110384af91543e259c8e" translate="yes" xml:space="preserve">
          <source>ListViewDataSource.cloneWithRowsAndSections()</source>
          <target state="translated">ListViewDataSource.cloneWithRowsAndSections()</target>
        </trans-unit>
        <trans-unit id="b43fa99e5eef7bea8c7e18aa4256a5bb151e1d07" translate="yes" xml:space="preserve">
          <source>ListViewDataSource.constructor()</source>
          <target state="translated">ListViewDataSource.constructor()</target>
        </trans-unit>
        <trans-unit id="2a8250e28989bd9332a8999550ef4ecea30b3136" translate="yes" xml:space="preserve">
          <source>ListViewDataSource.getRowAndSectionCount()</source>
          <target state="translated">ListViewDataSource.getRowAndSectionCount()</target>
        </trans-unit>
        <trans-unit id="0e7008fd03757bdbd58cb8a919745f5b77ef46c4" translate="yes" xml:space="preserve">
          <source>ListViewDataSource.getRowCount()</source>
          <target state="translated">ListViewDataSource.getRowCount()</target>
        </trans-unit>
        <trans-unit id="80f4d8b76abdb31851570360f70cd9ea0bb00506" translate="yes" xml:space="preserve">
          <source>ListViewDataSource.getRowData()</source>
          <target state="translated">ListViewDataSource.getRowData()</target>
        </trans-unit>
        <trans-unit id="e8536b52fe13e7295cb44f8eac37086351a6d3ca" translate="yes" xml:space="preserve">
          <source>ListViewDataSource.getRowIDForFlatIndex()</source>
          <target state="translated">ListViewDataSource.getRowIDForFlatIndex()</target>
        </trans-unit>
        <trans-unit id="b734f66b5aabcaaaa34df2bced7bf309a871f4f2" translate="yes" xml:space="preserve">
          <source>ListViewDataSource.getSectionHeaderData()</source>
          <target state="translated">ListViewDataSource.getSectionHeaderData()</target>
        </trans-unit>
        <trans-unit id="5894ff6110f6f5ca47b510bf78f582915646e69a" translate="yes" xml:space="preserve">
          <source>ListViewDataSource.getSectionIDForFlatIndex()</source>
          <target state="translated">ListViewDataSource.getSectionIDForFlatIndex()</target>
        </trans-unit>
        <trans-unit id="934b6a64c698103485c6cf740beed0ed046377c2" translate="yes" xml:space="preserve">
          <source>ListViewDataSource.getSectionLengths()</source>
          <target state="translated">ListViewDataSource.getSectionLengths()</target>
        </trans-unit>
        <trans-unit id="dc86dbff9c6127b15c793be4517b5fb31c0fd422" translate="yes" xml:space="preserve">
          <source>ListViewDataSource.rowShouldUpdate()</source>
          <target state="translated">ListViewDataSource.rowShouldUpdate()</target>
        </trans-unit>
        <trans-unit id="ee79491d4f8e0036f454b22ccfe4f94265ca4acf" translate="yes" xml:space="preserve">
          <source>ListViewDataSource.sectionHeaderShouldUpdate()</source>
          <target state="translated">ListViewDataSource.sectionHeaderShouldUpdate()</target>
        </trans-unit>
        <trans-unit id="bb332e733d9a77fa919f0edecdb64443db468fc0" translate="yes" xml:space="preserve">
          <source>Listener function.</source>
          <target state="translated">倾听者功能。</target>
        </trans-unit>
        <trans-unit id="c5ae4308fe0cfd658f0ea30fbe84a6cfaf6b3f32" translate="yes" xml:space="preserve">
          <source>Listener.</source>
          <target state="translated">Listener.</target>
        </trans-unit>
        <trans-unit id="9c8ca35e67db77549f3b066992c42dbf3d8a082e" translate="yes" xml:space="preserve">
          <source>Listening to LifeCycle events</source>
          <target state="translated">聆听生命周期事件</target>
        </trans-unit>
        <trans-unit id="e32b41aae163506aaaaff9c7d86b3e53cb6de4e1" translate="yes" xml:space="preserve">
          <source>Listening to the activity's LifeCycle events such as &lt;code&gt;onResume&lt;/code&gt;, &lt;code&gt;onPause&lt;/code&gt; etc. is very similar to how we implemented &lt;code&gt;ActivityEventListener&lt;/code&gt;. The module must implement &lt;code&gt;LifecycleEventListener&lt;/code&gt;. Then, you need to register a listener in the module's constructor,</source>
          <target state="translated">监听活动的LifeCycle事件（例如 &lt;code&gt;onResume&lt;/code&gt; ， &lt;code&gt;onPause&lt;/code&gt; 等）与我们实现 &lt;code&gt;ActivityEventListener&lt;/code&gt; 的方式非常相似。该模块必须实现 &lt;code&gt;LifecycleEventListener&lt;/code&gt; 。然后，您需要在模块的构造函数中注册一个侦听器，</target>
        </trans-unit>
        <trans-unit id="0b69793bfae9ee38fefc5d19d22cd9e00b94e9fb" translate="yes" xml:space="preserve">
          <source>Little red bubble that sits at the top right of the icon.</source>
          <target state="translated">小红泡泡,位于图标的右上方。</target>
        </trans-unit>
        <trans-unit id="fa4e69b132cca05bea84f2ab26fd32de026d5d50" translate="yes" xml:space="preserve">
          <source>Loading JavaScript</source>
          <target state="translated">加载JavaScript</target>
        </trans-unit>
        <trans-unit id="f3dc4e9113c9120bc8c3fdba9b7465fd800c2cd8" translate="yes" xml:space="preserve">
          <source>Loading images:</source>
          <target state="translated">正在加载图片。</target>
        </trans-unit>
        <trans-unit id="01830da4103d3a0788c459aba26132ac342b6ecd" translate="yes" xml:space="preserve">
          <source>Loads static html or a uri (with optional headers) in the WebView.</source>
          <target state="translated">在WebView中加载静态html或uri(带可选的标题)。</target>
        </trans-unit>
        <trans-unit id="394e02908822353cc2e775c2139ca7a61ea1a76b" translate="yes" xml:space="preserve">
          <source>Local Filesystem Images</source>
          <target state="translated">本地文件系统图像</target>
        </trans-unit>
        <trans-unit id="6aa07033dd27063d423e4d80ff372d2642771fe3" translate="yes" xml:space="preserve">
          <source>Login and password alert</source>
          <target state="translated">登录和密码提示</target>
        </trans-unit>
        <trans-unit id="acd16c47ee3dbe2d488ef616e9bbab652657a3b5" translate="yes" xml:space="preserve">
          <source>Look through the &lt;a href=&quot;https://github.com/facebook/react-native/issues&quot;&gt;open issues&lt;/a&gt;. Provide workarounds, ask for clarification, or suggest labels. Help &lt;a href=&quot;http://facebook.github.io/react-native/docs/contributing.html#triaging-issues-and-pull-requests&quot;&gt;triage issues&lt;/a&gt;.</source>
          <target state="translated">浏览&lt;a href=&quot;https://github.com/facebook/react-native/issues&quot;&gt;未解决的问题&lt;/a&gt;。提供解决方法，要求澄清或建议标签。帮助&lt;a href=&quot;http://facebook.github.io/react-native/docs/contributing.html#triaging-issues-and-pull-requests&quot;&gt;分类问题&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="29f673a33934dd0c8ca9b5359d3747bea08463ba" translate="yes" xml:space="preserve">
          <source>Look through the &lt;a href=&quot;https://github.com/facebook/react-native/issues&quot;&gt;open issues&lt;/a&gt;. Provide workarounds, ask for clarification, or suggest labels. Help &lt;a href=&quot;https://facebook.github.io/react-native/docs/contributing.html#triaging-issues-and-pull-requests&quot;&gt;triage issues&lt;/a&gt;.</source>
          <target state="translated">浏览&lt;a href=&quot;https://github.com/facebook/react-native/issues&quot;&gt;未解决的问题&lt;/a&gt;。提供解决方法，要求澄清或建议标签。帮助&lt;a href=&quot;https://facebook.github.io/react-native/docs/contributing.html#triaging-issues-and-pull-requests&quot;&gt;分类问题&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="8142dd8b8f2a0362aa13c89e60f3f5f6ea49f073" translate="yes" xml:space="preserve">
          <source>Looking for a pre-built component? Check &lt;a href=&quot;https://js.coach/react-native&quot;&gt;JS.coach&lt;/a&gt;.</source>
          <target state="translated">寻找预建组件？检查&lt;a href=&quot;https://js.coach/react-native&quot;&gt;JS.coach&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="1b1955cdec93ea7438710bb40998b2a5567fd5bc" translate="yes" xml:space="preserve">
          <source>Loops a given animation continuously, so that each time it reaches the end, it resets and begins again from the start. Can specify number of times to loop using the key &lt;code&gt;iterations&lt;/code&gt; in the config. Will loop without blocking the UI thread if the child animation is set to &lt;code&gt;useNativeDriver: true&lt;/code&gt;. In addition, loops can prevent &lt;code&gt;VirtualizedList&lt;/code&gt;-based components from rendering more rows while the animation is running. You can pass &lt;code&gt;isInteraction: false&lt;/code&gt; in the child animation config to fix this.</source>
          <target state="translated">连续循环播放给定的动画，以便每次到达结束时都将重置并从头开始。可以使用配置中的关键 &lt;code&gt;iterations&lt;/code&gt; 指定要循环的次数。如果子动画设置为 &lt;code&gt;useNativeDriver: true&lt;/code&gt; ，则将循环播放而不会阻塞UI线程。另外，循环可以阻止基于 &lt;code&gt;VirtualizedList&lt;/code&gt; 的组件在动画运行时渲染更多行。您可以在子动画配置中传递 &lt;code&gt;isInteraction: false&lt;/code&gt; 来解决此问题。</target>
        </trans-unit>
        <trans-unit id="fb33d52a2a99868ebe9491c1227e9634142be77d" translate="yes" xml:space="preserve">
          <source>Mac OS (64-bit) - &lt;a href=&quot;http://dl.google.com/android/repository/android-ndk-r10e-darwin-x86_64.zip&quot;&gt;http://dl.google.com/android/repository/android-ndk-r10e-darwin-x86_64.zip&lt;/a&gt;</source>
          <target state="translated">Mac OS（64位）&lt;a href=&quot;http://dl.google.com/android/repository/android-ndk-r10e-darwin-x86_64.zip&quot;&gt;-http://dl.google.com/android/repository/android-ndk-r10e-darwin-x86_64.zip&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="45489d99482371e7c06c28f3222e7072212c8061" translate="yes" xml:space="preserve">
          <source>Mac OS (64-bit) - &lt;a href=&quot;https://dl.google.com/android/repository/android-ndk-r10e-darwin-x86_64.zip&quot;&gt;http://dl.google.com/android/repository/android-ndk-r10e-darwin-x86_64.zip&lt;/a&gt;</source>
          <target state="translated">Mac OS（64位）&lt;a href=&quot;https://dl.google.com/android/repository/android-ndk-r10e-darwin-x86_64.zip&quot;&gt;-http://dl.google.com/android/repository/android-ndk-r10e-darwin-x86_64.zip&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="7e785076adcb8312ef07a90a78ceb2e72f80def1" translate="yes" xml:space="preserve">
          <source>Make sure all &lt;strong&gt;tests pass&lt;/strong&gt; on &lt;a href=&quot;http://circleci.com/gh/facebook/react-native&quot;&gt;Circle CI&lt;/a&gt;. PRs that break tests are unlikely to be merged. Learn more about &lt;a href=&quot;testing&quot;&gt;testing your changes here&lt;/a&gt;.</source>
          <target state="translated">确保所有的&lt;strong&gt;测试都通过了&lt;/strong&gt;对&lt;a href=&quot;http://circleci.com/gh/facebook/react-native&quot;&gt;圆CI&lt;/a&gt;。打破测试的PR不太可能合并。&lt;a href=&quot;testing&quot;&gt;在此处&lt;/a&gt;了解有关测试更改的更多信息。</target>
        </trans-unit>
        <trans-unit id="172055a25c7db6d192a6956a1edf6f115c9aec20" translate="yes" xml:space="preserve">
          <source>Make sure all &lt;strong&gt;tests pass&lt;/strong&gt; on &lt;a href=&quot;https://circleci.com/gh/facebook/react-native&quot;&gt;Circle CI&lt;/a&gt;. PRs that break tests are unlikely to be merged. Learn more about &lt;a href=&quot;testing&quot;&gt;testing your changes here&lt;/a&gt;.</source>
          <target state="translated">确保所有的&lt;strong&gt;测试都通过了&lt;/strong&gt;对&lt;a href=&quot;https://circleci.com/gh/facebook/react-native&quot;&gt;圆CI&lt;/a&gt;。打破测试的PR不太可能合并。&lt;a href=&quot;testing&quot;&gt;在此处&lt;/a&gt;了解有关测试更改的更多信息。</target>
        </trans-unit>
        <trans-unit id="559cc977c35aa317f0dd6eabe16d1c6dad7c92cb" translate="yes" xml:space="preserve">
          <source>Make sure that the build script detected the IP address of your machine correctly (e.g. 10.0.1.123).</source>
          <target state="translated">确保构建脚本正确检测到你的机器的IP地址(如10.0.1.123)。</target>
        </trans-unit>
        <trans-unit id="4e62e1fd5e0fff74dd4a78102620d745cf89092a" translate="yes" xml:space="preserve">
          <source>Make sure that the dropdown in the top left corner of the Chrome console says &lt;code&gt;debuggerWorker.js&lt;/code&gt;. &lt;strong&gt;This step is essential.&lt;/strong&gt;</source>
          <target state="translated">确保Chrome控制台左上角的下拉菜单中显示 &lt;code&gt;debuggerWorker.js&lt;/code&gt; 。&lt;strong&gt;此步骤至关重要。&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="ffb08ede0a48da908ee7c2b16d1e1ba94a554f08" translate="yes" xml:space="preserve">
          <source>Make sure that the path is correct! You shouldn&amp;rsquo;t run into any &amp;ldquo;Failed to resolve: com.facebook.react:react-native:0.x.x&quot; errors after running Gradle sync in Android Studio.</source>
          <target state="translated">确保路径正确！在Android Studio中运行Gradle同步后，您不应遇到任何&amp;ldquo;无法解决：com.facebook.react：react-native：0.xx&amp;rdquo;错误。</target>
        </trans-unit>
        <trans-unit id="5fa0c9c32b43464c2f4ed67719b6325d01f1ec36" translate="yes" xml:space="preserve">
          <source>Make sure that you replace &lt;code&gt;22b8&lt;/code&gt; with the identifier you get in the above command.</source>
          <target state="translated">确保将 &lt;code&gt;22b8&lt;/code&gt; 替换为在上述命令中获得的标识符。</target>
        </trans-unit>
        <trans-unit id="c6bab4ecee577a35e897d1185656a89fc5364d64" translate="yes" xml:space="preserve">
          <source>Make sure the return button focuses the next field or submits the form</source>
          <target state="translated">确保返回按钮聚焦于下一个字段或提交表单。</target>
        </trans-unit>
        <trans-unit id="09a7f654db471bc8469e5bdeaed7e71487161080" translate="yes" xml:space="preserve">
          <source>Make sure to use &lt;code&gt;RNTMap&lt;/code&gt; here. We want to require the manager here, which will expose the view of our manager for use in Javascript.</source>
          <target state="translated">确保在此处使用 &lt;code&gt;RNTMap&lt;/code&gt; 。我们想在这里要求经理，这将公开我们经理的视图以在Javascript中使用。</target>
        </trans-unit>
        <trans-unit id="b7f8d148e72ff8defe802ba89c8b08a7f897e923" translate="yes" xml:space="preserve">
          <source>Make sure you have the following installed:</source>
          <target state="translated">确保你已经安装了以下软件。</target>
        </trans-unit>
        <trans-unit id="978d74a8daba86fc298a756267a051c48a004343" translate="yes" xml:space="preserve">
          <source>Make sure your code lints (&lt;code&gt;npm run lint&lt;/code&gt;).</source>
          <target state="translated">确保您的代码棉绒（ &lt;code&gt;npm run lint&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="95f4d7642b5b2a3110120fa0a0abab807b2aad02" translate="yes" xml:space="preserve">
          <source>Make sure your laptop and your phone are on the &lt;strong&gt;same&lt;/strong&gt; Wi-Fi network.</source>
          <target state="translated">确保您的笔记本电脑和手机位于&lt;strong&gt;同一&lt;/strong&gt; Wi-Fi网络上。</target>
        </trans-unit>
        <trans-unit id="2aa557d0a1cf1e04d1707fb4a1fa983a48d710db" translate="yes" xml:space="preserve">
          <source>Make tappable areas larger</source>
          <target state="translated">扩大可拍区域</target>
        </trans-unit>
        <trans-unit id="969a0f915136154cc4498f568f6576d46508f5e9" translate="yes" xml:space="preserve">
          <source>Make the drawer take the entire screen and draw the background of the status bar to allow it to open over the status bar. It will only have an effect on API 21+.</source>
          <target state="translated">让抽屉占据整个屏幕,并绘制状态栏的背景,让它在状态栏上打开。这只对API 21+有影响。</target>
        </trans-unit>
        <trans-unit id="0f903b20799bc68ad0572513d8059c8ed681daf2" translate="yes" xml:space="preserve">
          <source>Makes any easing function symmetrical. The easing function will run forwards for half of the duration, then backwards for the rest of the duration.</source>
          <target state="translated">使任何缓和函数对称。缓和函数将在一半的时间内向前运行,然后在其余时间内向后运行。</target>
        </trans-unit>
        <trans-unit id="045a80736d2cbc26f72559c6febba65f6ac92815" translate="yes" xml:space="preserve">
          <source>Makes section headers stick to the top of the screen until the next one pushes it off. Only enabled by default on iOS because that is the platform standard there.</source>
          <target state="translated">使章节标题粘在屏幕顶部,直到下一个章节将其推开。只有在iOS上才默认启用,因为这是平台的标准。</target>
        </trans-unit>
        <trans-unit id="05fd19fbe62a2e6b828058dfe275a89677a999a0" translate="yes" xml:space="preserve">
          <source>Makes the sections headers sticky. The sticky behavior means that it will scroll with the content at the top of the section until it reaches the top of the screen, at which point it will stick to the top until it is pushed off the screen by the next section header. This property is not supported in conjunction with &lt;code&gt;horizontal={true}&lt;/code&gt;. Only enabled by default on iOS because of typical platform standards.</source>
          <target state="translated">使节标题变粘。粘滞行为意味着它将与部分内容一起滚动，直到到达屏幕顶部为止；此时，它将一直粘在顶部，直到被下一个部分标题将其从屏幕上推下为止。与 &lt;code&gt;horizontal={true}&lt;/code&gt; 结合使用时不支持此属性。由于典型的平台标准，仅在iOS上默认启用。</target>
        </trans-unit>
        <trans-unit id="d44b827292ad8a593a7e254241ec1ebd2a972fc6" translate="yes" xml:space="preserve">
          <source>Making Apps Accessible</source>
          <target state="translated">让应用程序无障碍化</target>
        </trans-unit>
        <trans-unit id="0671db59b86fa0e2046bb02dbbad8489236b8d1d" translate="yes" xml:space="preserve">
          <source>Making a stylesheet from a style object makes it possible to refer to it by ID instead of creating a new style object every time.</source>
          <target state="translated">通过样式对象制作样式表,可以通过ID来引用它,而不是每次都创建一个新的样式对象。</target>
        </trans-unit>
        <trans-unit id="22ac566b779ff8d653380ca62b3b4a487669c2f3" translate="yes" xml:space="preserve">
          <source>Making modules helps grow the React Native ecosystem and community. We recommend writing modules for your use cases and sharing them on npm.</source>
          <target state="translated">制作模块有助于发展React Native生态系统和社区。我们建议为你的用例编写模块,并在npm上分享。</target>
        </trans-unit>
        <trans-unit id="f36af64091c8859d03f0c5912aa8c3e10b3dd9b4" translate="yes" xml:space="preserve">
          <source>Making requests</source>
          <target state="translated">提出请求</target>
        </trans-unit>
        <trans-unit id="65d30127cbbf310aa8799df5151fe513217b9912" translate="yes" xml:space="preserve">
          <source>Manage layout when keyboard is visible</source>
          <target state="translated">管理键盘可见时的布局</target>
        </trans-unit>
        <trans-unit id="55b3be32d811f00f0a247bc0c0c61624c84387f4" translate="yes" xml:space="preserve">
          <source>Manual Upgrades</source>
          <target state="translated">手动升级</target>
        </trans-unit>
        <trans-unit id="c529302215981eae4a3f210fcdf95efcf923115d" translate="yes" xml:space="preserve">
          <source>Manual linking</source>
          <target state="translated">手动连接</target>
        </trans-unit>
        <trans-unit id="ec039289b671aac168001d33f2694eea9f890411" translate="yes" xml:space="preserve">
          <source>Many mobile apps need to load resources from a remote URL. You may want to make a POST request to a REST API, or you may simply need to fetch a chunk of static content from another server.</source>
          <target state="translated">许多移动应用程序需要从远程URL加载资源。您可能想要向REST API发出POST请求,或者您可能只是需要从另一台服务器上获取一大块静态内容。</target>
        </trans-unit>
        <trans-unit id="df9c9196499a65977f872419309d3fdbbc04d3b5" translate="yes" xml:space="preserve">
          <source>Many of the following components provide wrappers for commonly used Android classes.</source>
          <target state="translated">以下许多组件为常用的Android类提供了封装器。</target>
        </trans-unit>
        <trans-unit id="6f1a9688d682196717612a4fd39e6ae8087ba3c8" translate="yes" xml:space="preserve">
          <source>Many of the following components provide wrappers for commonly used UIKit classes.</source>
          <target state="translated">以下许多组件为常用的UIKit类提供了封装器。</target>
        </trans-unit>
        <trans-unit id="587fd01392c66bde4aba686541338a5c6a8de96f" translate="yes" xml:space="preserve">
          <source>Many of the images you will display in your app will not be available at compile time, or you will want to load some dynamically to keep the binary size down. Unlike with static resources, &lt;em&gt;you will need to manually specify the dimensions of your image&lt;/em&gt;. It's highly recommended that you use https as well in order to satisfy &lt;a href=&quot;running-on-device#app-transport-security&quot;&gt;App Transport Security&lt;/a&gt; requirements on iOS.</source>
          <target state="translated">您将在应用程序中显示的许多图像在编译时不可用，或者您希望动态加载一些图像以减小二进制大小。与静态资源不同，&lt;em&gt;您将需要手动指定图像的尺寸&lt;/em&gt;。强烈建议您也使用https，以满足iOS上的&lt;a href=&quot;running-on-device#app-transport-security&quot;&gt;App Transport Security&lt;/a&gt;要求。</target>
        </trans-unit>
        <trans-unit id="e1e8e3ac4e8016400ce8b12ef944c7877a6abd63" translate="yes" xml:space="preserve">
          <source>Many people have noticed that performance of &lt;code&gt;NavigatorIOS&lt;/code&gt; is better out of the box than &lt;code&gt;Navigator&lt;/code&gt;. The reason for this is that the animations for the transitions are done entirely on the main thread, and so they are not interrupted by frame drops on the JavaScript thread.</source>
          <target state="translated">许多人已经注意到，与 &lt;code&gt;NavigatorIOS&lt;/code&gt; 相比， &lt;code&gt;Navigator&lt;/code&gt; IOS的性能更好。这样做的原因是，过渡的动画完全在主线程上完成，因此它们不会被JavaScript线程上的帧丢失打断。</target>
        </trans-unit>
        <trans-unit id="a08e0da898288e0b16cb67817014a3e1234c40bb" translate="yes" xml:space="preserve">
          <source>Many standards functions are also available on all the supported JavaScript runtimes.</source>
          <target state="translated">在所有支持的JavaScript运行时,许多标准函数也是可用的。</target>
        </trans-unit>
        <trans-unit id="141acaf59726ca8e2c52b1995b043cfd651d5ad7" translate="yes" xml:space="preserve">
          <source>MaskedViewIOS</source>
          <target state="translated">MaskedViewIOS</target>
        </trans-unit>
        <trans-unit id="ea27d4cf033f47c5d4969ba24ab54e0dece40865" translate="yes" xml:space="preserve">
          <source>MaskedViewIOS#maskElement</source>
          <target state="translated">MaskedViewIOS#maskElement</target>
        </trans-unit>
        <trans-unit id="963a19d2054b939ef8c289f7c7e013da00b2d3ef" translate="yes" xml:space="preserve">
          <source>Maximum date.</source>
          <target state="translated">最多日期:</target>
        </trans-unit>
        <trans-unit id="227051cf9066d90ec3c2d6dfb9de8f97078df1f0" translate="yes" xml:space="preserve">
          <source>May not have full feature parity and is meant for debugging and performance comparison.</source>
          <target state="translated">可能不具备完全的功能对等性,是为了调试和性能比较。</target>
        </trans-unit>
        <trans-unit id="e348c8b70e5a5b403efe68b967662463cb493376" translate="yes" xml:space="preserve">
          <source>Measures multiple methods of a class. For example, the following will return the &lt;code&gt;parse&lt;/code&gt; and &lt;code&gt;stringify&lt;/code&gt; methods of the JSON class: Systrace.measureMethods(JSON, 'JSON', ['parse', 'stringify']);</source>
          <target state="translated">测量一个类的多种方法。例如，以下代码将返回JSON类的 &lt;code&gt;parse&lt;/code&gt; 和 &lt;code&gt;stringify&lt;/code&gt; 方法：Systrace.measureMethods（JSON，'JSON'，['parse'，'stringify']）;</target>
        </trans-unit>
        <trans-unit id="9848e675c39170236977da941f2b04f8c288dd1c" translate="yes" xml:space="preserve">
          <source>Memory use in extensions</source>
          <target state="translated">扩展部分的内存使用情况</target>
        </trans-unit>
        <trans-unit id="99255d99f50feab5fa3739459f1d63324fb75f77" translate="yes" xml:space="preserve">
          <source>Merges an existing &lt;code&gt;key&lt;/code&gt; value with an input value, assuming both values are stringified JSON. Returns a &lt;code&gt;Promise&lt;/code&gt; object.</source>
          <target state="translated">假设两个 &lt;code&gt;key&lt;/code&gt; 均为JSON 格式，则将现有键值与输入值合并。返回一个 &lt;code&gt;Promise&lt;/code&gt; 对象。</target>
        </trans-unit>
        <trans-unit id="f45c6bb0c9fd85d407278f0bc71193e0bc71e483" translate="yes" xml:space="preserve">
          <source>Method 1: Using adb reverse (recommended)</source>
          <target state="translated">方法1:使用adb反向(推荐)。</target>
        </trans-unit>
        <trans-unit id="2ad4e90fca993a8ee8521e45d5cba27258804c74" translate="yes" xml:space="preserve">
          <source>Method 2: Connect via Wi-Fi</source>
          <target state="translated">方法2:通过Wi-Fi连接</target>
        </trans-unit>
        <trans-unit id="7e4ac6803c9159c694f63d089cb06b2519c16aba" translate="yes" xml:space="preserve">
          <source>Methods</source>
          <target state="translated">Methods</target>
        </trans-unit>
        <trans-unit id="b3cf1a0be1932b713c93e8523aa4e66c1c37b1b6" translate="yes" xml:space="preserve">
          <source>Minimal Example:</source>
          <target state="translated">最小的例子。</target>
        </trans-unit>
        <trans-unit id="a5ff5bed9d4638f83e3a8ec6c0e274d32ba66b6d" translate="yes" xml:space="preserve">
          <source>Minimal example:</source>
          <target state="translated">最小的例子。</target>
        </trans-unit>
        <trans-unit id="a73b08c2359172a597e16b5577183a152d652ffd" translate="yes" xml:space="preserve">
          <source>Minimum amount of time (in milliseconds) that an item must be physically viewable before the viewability callback will be fired. A high number means that scrolling through content without stopping will not mark the content as viewable.</source>
          <target state="translated">在启动可查看性回调之前,一个项目必须被实际查看的最小时间(毫秒)。一个较高的数字意味着不停止滚动浏览内容将不会将内容标记为可查看。</target>
        </trans-unit>
        <trans-unit id="807a5f2b75a8462c87b74605ee324a35ae97daad" translate="yes" xml:space="preserve">
          <source>Minimum date.</source>
          <target state="translated">最低日期:</target>
        </trans-unit>
        <trans-unit id="f67ca93c1a795078cb5ebbf4e084fd7c59068884" translate="yes" xml:space="preserve">
          <source>Missing libraries for React</source>
          <target state="translated">React缺少的库</target>
        </trans-unit>
        <trans-unit id="ce22fa306e3981b084c3c1998892ccea74b9cf7e" translate="yes" xml:space="preserve">
          <source>Mobile apps are rarely made up of a single screen. Managing the presentation of, and transition between, multiple screens is typically handled by what is known as a navigator.</source>
          <target state="translated">移动应用很少是由一个屏幕组成的。管理多个屏幕的展示和过渡,通常由所谓的导航器来处理。</target>
        </trans-unit>
        <trans-unit id="d44c2c5216ec66ccb451d99a0f522a63e33ee785" translate="yes" xml:space="preserve">
          <source>Modal</source>
          <target state="translated">Modal</target>
        </trans-unit>
        <trans-unit id="6c97ebe45cb26df9e6bca3ab4e51e1958620ca1d" translate="yes" xml:space="preserve">
          <source>Modal#animationType</source>
          <target state="translated">Modal#animationType</target>
        </trans-unit>
        <trans-unit id="03c617eda42762c1e201714dd6c2acc39e126da1" translate="yes" xml:space="preserve">
          <source>Modal#hardwareAccelerated</source>
          <target state="translated">Modal#hardwareAccelerated</target>
        </trans-unit>
        <trans-unit id="ec39d7d7df672c3c66257fd37ccba086baf31738" translate="yes" xml:space="preserve">
          <source>Modal#onDismiss</source>
          <target state="translated">Modal#onDismiss</target>
        </trans-unit>
        <trans-unit id="6361a4c08c6bd0dc3d5ccf10f336aae0c2a25a94" translate="yes" xml:space="preserve">
          <source>Modal#onOrientationChange</source>
          <target state="translated">Modal#onOrientationChange</target>
        </trans-unit>
        <trans-unit id="49a308c035afe69abe7ed2fe7f53cc42f656ccb1" translate="yes" xml:space="preserve">
          <source>Modal#onRequestClose</source>
          <target state="translated">Modal#onRequestClose</target>
        </trans-unit>
        <trans-unit id="76535599549c59d94cd85618f63cb3d8e4a4849a" translate="yes" xml:space="preserve">
          <source>Modal#onShow</source>
          <target state="translated">Modal#onShow</target>
        </trans-unit>
        <trans-unit id="1f73e3446cdebc96c5d9cef737bc7f5363e24a18" translate="yes" xml:space="preserve">
          <source>Modal#presentationStyle</source>
          <target state="translated">Modal#presentationStyle</target>
        </trans-unit>
        <trans-unit id="22df8d71e59d2ab877df57873ab6f1c4ba645744" translate="yes" xml:space="preserve">
          <source>Modal#supportedOrientations</source>
          <target state="translated">Modal#supportedOrientations</target>
        </trans-unit>
        <trans-unit id="5e83a7aeb07a2d79b333bae25d325c3cbe9f768d" translate="yes" xml:space="preserve">
          <source>Modal#transparent</source>
          <target state="translated">Modal#transparent</target>
        </trans-unit>
        <trans-unit id="dde5b114a3188112163a2ce9f92d12873d4b3458" translate="yes" xml:space="preserve">
          <source>Modal#visible</source>
          <target state="translated">Modal#visible</target>
        </trans-unit>
        <trans-unit id="c52e450a87a95cfb4c1da916e78ab2c66fea7b10" translate="yes" xml:space="preserve">
          <source>Modify your &lt;code&gt;android/app/build.gradle&lt;/code&gt; to use the &lt;code&gt;:ReactAndroid&lt;/code&gt; project instead of the pre-compiled library, e.g. - replace &lt;code&gt;compile 'com.facebook.react:react-native:+'&lt;/code&gt; with &lt;code&gt;compile project(':ReactAndroid')&lt;/code&gt;:</source>
          <target state="translated">修改您的 &lt;code&gt;android/app/build.gradle&lt;/code&gt; 以使用 &lt;code&gt;:ReactAndroid&lt;/code&gt; 项目而不是预编译的库，例如- 用 &lt;code&gt;compile project(':ReactAndroid')&lt;/code&gt; 替换 &lt;code&gt;compile 'com.facebook.react:react-native:+'&lt;/code&gt; ：</target>
        </trans-unit>
        <trans-unit id="06450d5d3120052fdc935df70ab310d5f854b198" translate="yes" xml:space="preserve">
          <source>Modify your &lt;code&gt;android/app/build.gradle&lt;/code&gt;, and add:</source>
          <target state="translated">修改您的 &lt;code&gt;android/app/build.gradle&lt;/code&gt; ，并添加：</target>
        </trans-unit>
        <trans-unit id="4b719cc01af0a77c5bec71607136fc582d20ff6b" translate="yes" xml:space="preserve">
          <source>Modifying your app</source>
          <target state="translated">修改您的应用程序</target>
        </trans-unit>
        <trans-unit id="bb101179b6d768145f738342dfe298b98e4b70e0" translate="yes" xml:space="preserve">
          <source>More Resources</source>
          <target state="translated">更多资源</target>
        </trans-unit>
        <trans-unit id="887b2370b742ef10e530b0189147e24978ea5882" translate="yes" xml:space="preserve">
          <source>More complex, multi-select example demonstrating &lt;code&gt;PureComponent&lt;/code&gt; usage for perf optimization and avoiding bugs.</source>
          <target state="translated">更复杂，多选的示例，演示了 &lt;code&gt;PureComponent&lt;/code&gt; 用于优化性能并避免错误的情况。</target>
        </trans-unit>
        <trans-unit id="5396ccaf317e448eb8c334a77e5121a3a5cb7e90" translate="yes" xml:space="preserve">
          <source>More details about &lt;code&gt;resize&lt;/code&gt; and &lt;code&gt;scale&lt;/code&gt; can be found at &lt;a href=&quot;http://frescolib.org/docs/resizing.html&quot;&gt;http://frescolib.org/docs/resizing.html&lt;/a&gt;.</source>
          <target state="translated">有关 &lt;code&gt;resize&lt;/code&gt; 和 &lt;code&gt;scale&lt;/code&gt; 更多详细信息，请参见&lt;a href=&quot;http://frescolib.org/docs/resizing.html&quot;&gt;http://frescolib.org/docs/resizing.html&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="0479a94a5c0771fdd1e9cf53771067f26eb12b96" translate="yes" xml:space="preserve">
          <source>Most Android devices can only install and run apps downloaded from Google Play, by default. You will need to enable USB Debugging on your device in order to install your app during development.</source>
          <target state="translated">大多数Android设备默认只能安装和运行从Google Play下载的应用。你需要在设备上启用USB调试,才能在开发过程中安装应用。</target>
        </trans-unit>
        <trans-unit id="56d6499ab2d2b1aec0fa3054bd37bbbd163a07df" translate="yes" xml:space="preserve">
          <source>Most apps will end up using one of these basic components. You'll want to get yourself familiarized with all of these if you're new to React Native.</source>
          <target state="translated">大多数应用程序最终都会使用这些基本组件之一。如果你是React Native的新手,你会希望自己熟悉所有这些组件。</target>
        </trans-unit>
        <trans-unit id="c122a28f479a87c7fb794fe465988a44b00c87c0" translate="yes" xml:space="preserve">
          <source>Most components can be customized when they are created, with different parameters. These creation parameters are called &lt;code&gt;props&lt;/code&gt;.</source>
          <target state="translated">大多数组件在创建时都可以使用不同的参数进行自定义。这些创建参数称为 &lt;code&gt;props&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="9de6948c11b476dbbcc4ffdcc6336c36cf8a40a9" translate="yes" xml:space="preserve">
          <source>Moving a view on the screen (scrolling, translating, rotating) drops UI thread FPS</source>
          <target state="translated">在屏幕上移动视图(滚动、平移、旋转)会降低UI线程的FPS。</target>
        </trans-unit>
        <trans-unit id="1f6e4668defb1b0708739314972da68991a0f2ab" translate="yes" xml:space="preserve">
          <source>Multiple columns can only be rendered with &lt;code&gt;horizontal={false}&lt;/code&gt; and will zig-zag like a &lt;code&gt;flexWrap&lt;/code&gt; layout. Items should all be the same height - masonry layouts are not supported.</source>
          <target state="translated">多列只能使用 &lt;code&gt;horizontal={false}&lt;/code&gt; 呈现，并且会像 &lt;code&gt;flexWrap&lt;/code&gt; 布局一样呈锯齿状弯曲。项目的高度均应相同-不支持砌体布局。</target>
        </trans-unit>
        <trans-unit id="7fbc29bcdafa290009de9dbfdebde99b5da8956c" translate="yes" xml:space="preserve">
          <source>Multiple screen orientations should work fine by default unless you're using &lt;code&gt;Dimensions&lt;/code&gt; API and don't handle orientation changes. If you don't want to support multiple screen orientations, you can lock the screen orientation to either portrait or landscape.</source>
          <target state="translated">除非您使用 &lt;code&gt;Dimensions&lt;/code&gt; API，并且不处理方向更改，否则默认情况下，多个屏幕方向应该可以正常工作。如果您不希望支持多种屏幕方向，则可以将屏幕方向锁定为纵向或横向。</target>
        </trans-unit>
        <trans-unit id="6841a2f300c464d3eccdb03fa3dd978e1612457d" translate="yes" xml:space="preserve">
          <source>My TouchableX view isn't very responsive</source>
          <target state="translated">我的TouchableX视图的反应不是很灵敏</target>
        </trans-unit>
        <trans-unit id="0b3843619f7e2d33bf61f564956245ab6fd84b35" translate="yes" xml:space="preserve">
          <source>NOTE: &lt;code&gt;VibrationIOS&lt;/code&gt; is being deprecated. Use &lt;code&gt;Vibration&lt;/code&gt; instead.</source>
          <target state="translated">注意：不推荐使用 &lt;code&gt;VibrationIOS&lt;/code&gt; 。请改用 &lt;code&gt;Vibration&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="7c55ed08f35b68763bec209cc9d601233d1142ee" translate="yes" xml:space="preserve">
          <source>NOTE: On iOS, you'll need to link &lt;code&gt;RCTLinking&lt;/code&gt; to your project by following the steps described &lt;a href=&quot;linking-libraries-ios#manual-linking&quot;&gt;here&lt;/a&gt;. If you also want to listen to incoming app links during your app's execution, you'll need to add the following lines to your &lt;code&gt;*AppDelegate.m&lt;/code&gt;:</source>
          <target state="translated">注意：在iOS上，您需要按照&lt;a href=&quot;linking-libraries-ios#manual-linking&quot;&gt;此处&lt;/a&gt;介绍的步骤将 &lt;code&gt;RCTLinking&lt;/code&gt; 链接到您的项目。如果您还想在应用执行期间收听传入的应用链接，则需要在 &lt;code&gt;*AppDelegate.m&lt;/code&gt; 中添加以下几行：</target>
        </trans-unit>
        <trans-unit id="a3b60e09e2f6dcd4862a3d6ecbcf67a1a27754b8" translate="yes" xml:space="preserve">
          <source>NOTE: if &lt;code&gt;url&lt;/code&gt; points to a local file, or is a base64-encoded uri, the file it points to will be loaded and shared directly. In this way, you can share images, videos, PDF files, etc.</source>
          <target state="translated">注意：如果 &lt;code&gt;url&lt;/code&gt; 指向本地文件，或者是base64编码的uri，则指向的文件将被直接加载和共享。这样，您可以共享图像，视频，PDF文件等。</target>
        </trans-unit>
        <trans-unit id="ac42da10ca34819d8fd82f2258e7e0c39eff4c77" translate="yes" xml:space="preserve">
          <source>NPM locking error</source>
          <target state="translated">NPM锁定错误</target>
        </trans-unit>
        <trans-unit id="709a23220f2c3d64d1e1d6d18c4d5280f8d82fca" translate="yes" xml:space="preserve">
          <source>Name</source>
          <target state="translated">Name</target>
        </trans-unit>
        <trans-unit id="398bf351b68208a77c6c51a0844a8acd402d95bd" translate="yes" xml:space="preserve">
          <source>Named colors</source>
          <target state="translated">已命名的颜色</target>
        </trans-unit>
        <trans-unit id="786d76a5bd5084448955c4f300a1d96f46f697b5" translate="yes" xml:space="preserve">
          <source>Naming the styles is a good way to add meaning to the low level components in the render function.</source>
          <target state="translated">为样式命名是为渲染函数中的低级组件添加意义的好方法。</target>
        </trans-unit>
        <trans-unit id="86ecd2392d55c4a82567ac9bc404a1ce9eb98450" translate="yes" xml:space="preserve">
          <source>Native App Accessibility (iOS and Android)</source>
          <target state="translated">原生应用的可访问性(iOS和Android</target>
        </trans-unit>
        <trans-unit id="d78f038dd8625f405c4872405134d8ad90bdc669" translate="yes" xml:space="preserve">
          <source>Native Modules</source>
          <target state="translated">本地模块</target>
        </trans-unit>
        <trans-unit id="7ddaeceec408cd502baa52bd8452b9f2495b19e8" translate="yes" xml:space="preserve">
          <source>Native Modules#Getting activity result from startActivityForResult</source>
          <target state="translated">本机模块#从startActivityForResult中获取活动结果。</target>
        </trans-unit>
        <trans-unit id="a821a53330a5ba7587f2aa81ddfe1436dc4dbf3c" translate="yes" xml:space="preserve">
          <source>Native UI Components</source>
          <target state="translated">本地UI组件</target>
        </trans-unit>
        <trans-unit id="d0704e551eb871bbfb496ab693e0f48b41a35be5" translate="yes" xml:space="preserve">
          <source>Native modules also support a special kind of argument - a callback. In most cases it is used to provide the function call result to JavaScript.</source>
          <target state="translated">本地模块还支持一种特殊的参数--回调。在大多数情况下,它是用来向JavaScript提供函数调用结果的。</target>
        </trans-unit>
        <trans-unit id="ec5c618cb299712f2af5fe0c3e0febf51bd823b8" translate="yes" xml:space="preserve">
          <source>Native modules also supports a special kind of argument- a callback. In most cases it is used to provide the function call result to JavaScript.</source>
          <target state="translated">本地模块还支持一种特殊的参数--回调。在大多数情况下,它是用来向JavaScript提供函数调用结果的。</target>
        </trans-unit>
        <trans-unit id="701bce9035ae6bd6b5f6f62aad6e66e5c38dc5ab" translate="yes" xml:space="preserve">
          <source>Native modules are Objective-C classes that are available in JS. Typically one instance of each module is created per JS bridge. They can export arbitrary functions and constants to React Native. They have been covered in detail in &lt;a href=&quot;native-modules-ios#content&quot;&gt;this article&lt;/a&gt;.</source>
          <target state="translated">本机模块是JS中可用的Objective-C类。通常，每个JS桥都为每个模块创建一个实例。他们可以将任意函数和常量导出到React Native。&lt;a href=&quot;native-modules-ios#content&quot;&gt;本文&lt;/a&gt;已详细介绍了它们。</target>
        </trans-unit>
        <trans-unit id="c5cc8d56b84b6fef55c6d734b71757e3dc68ed5c" translate="yes" xml:space="preserve">
          <source>Native modules can also be used to expose existing native libraries to JS. The &lt;a href=&quot;https://github.com/facebook/react-native/tree/master/Libraries/Geolocation&quot;&gt;Geolocation library&lt;/a&gt; is a living example of the idea.</source>
          <target state="translated">本机模块也可以用于将现有的本机库公开给JS。该&lt;a href=&quot;https://github.com/facebook/react-native/tree/master/Libraries/Geolocation&quot;&gt;地理位置图书馆&lt;/a&gt;的理念是一个活生生的例子。</target>
        </trans-unit>
        <trans-unit id="3156486045442e2bc8be08e9ee5ee3893aa13131" translate="yes" xml:space="preserve">
          <source>Native modules can also fulfill a promise, which can simplify your code, especially when using ES2016's &lt;code&gt;async/await&lt;/code&gt; syntax. When the last parameter of a bridged native method is a &lt;code&gt;Promise&lt;/code&gt;, its corresponding JS method will return a JS Promise object.</source>
          <target state="translated">本机模块也可以兑现承诺，这可以简化您的代码，尤其是在使用ES2016的 &lt;code&gt;async/await&lt;/code&gt; 语法时。当桥接的本机方法的最后一个参数是 &lt;code&gt;Promise&lt;/code&gt; 时，其对应的JS方法将返回JS Promise对象。</target>
        </trans-unit>
        <trans-unit id="5555ecaa2153eea0cf082531d1905786f8f38fd1" translate="yes" xml:space="preserve">
          <source>Native modules can also fulfill a promise, which can simplify your code, especially when using ES2016's &lt;code&gt;async/await&lt;/code&gt; syntax. When the last parameters of a bridged native method are an &lt;code&gt;RCTPromiseResolveBlock&lt;/code&gt; and &lt;code&gt;RCTPromiseRejectBlock&lt;/code&gt;, its corresponding JS method will return a JS Promise object.</source>
          <target state="translated">本机模块也可以兑现承诺，这可以简化您的代码，尤其是在使用ES2016的 &lt;code&gt;async/await&lt;/code&gt; 语法时。当桥接的本机方法的最后一个参数是 &lt;code&gt;RCTPromiseResolveBlock&lt;/code&gt; 和 &lt;code&gt;RCTPromiseRejectBlock&lt;/code&gt; 时，其对应的JS方法将返回JS Promise对象。</target>
        </trans-unit>
        <trans-unit id="32d87859bcb556fe024dd7b1e24ef0ef2fa81181" translate="yes" xml:space="preserve">
          <source>Native modules can signal events to JavaScript without being invoked directly. The easiest way to do this is to use the &lt;code&gt;RCTDeviceEventEmitter&lt;/code&gt; which can be obtained from the &lt;code&gt;ReactContext&lt;/code&gt; as in the code snippet below.</source>
          <target state="translated">本机模块可以向JavaScript发送事件信号，而无需直接调用。最简单的方法是使用 &lt;code&gt;RCTDeviceEventEmitter&lt;/code&gt; ，它可以从 &lt;code&gt;ReactContext&lt;/code&gt; 中获得，如下面的代码片段所示。</target>
        </trans-unit>
        <trans-unit id="80e79981894f8f0b24dcdee03f2e5e5c9fa357bb" translate="yes" xml:space="preserve">
          <source>Native modules should not have any assumptions about what thread they are being called on, as the current assignment is subject to change in the future. If a blocking call is required, the heavy work should be dispatched to an internally managed worker thread, and any callbacks distributed from there.</source>
          <target state="translated">原生模块不应该对它们被调用在什么线程上有任何假设,因为当前的分配在未来是可以改变的。如果需要阻塞调用,则应将繁重的工作派遣到内部管理的工作线程上,并从那里分发任何回调。</target>
        </trans-unit>
        <trans-unit id="e425f9a409bd2bc06ab4ca078f15e47cc59be15f" translate="yes" xml:space="preserve">
          <source>Native views are created and manipulated by extending &lt;code&gt;ViewManager&lt;/code&gt; or more commonly &lt;code&gt;SimpleViewManager&lt;/code&gt; . A &lt;code&gt;SimpleViewManager&lt;/code&gt; is convenient in this case because it applies common properties such as background color, opacity, and Flexbox layout.</source>
          <target state="translated">通过扩展 &lt;code&gt;ViewManager&lt;/code&gt; 或更常见的 &lt;code&gt;SimpleViewManager&lt;/code&gt; 可以创建和操作本机视图。甲 &lt;code&gt;SimpleViewManager&lt;/code&gt; 是在这种情况下方便的，因为它适用共同特性，如背景颜色，不透明度和Flexbox的布局。</target>
        </trans-unit>
        <trans-unit id="915054a4dd24a00f4a7a629f5b569de722cd4d0a" translate="yes" xml:space="preserve">
          <source>Native views are created and manipulated by subclasses of &lt;code&gt;RCTViewManager&lt;/code&gt;. These subclasses are similar in function to view controllers, but are essentially singletons - only one instance of each is created by the bridge. They expose native views to the &lt;code&gt;RCTUIManager&lt;/code&gt;, which delegates back to them to set and update the properties of the views as necessary. The &lt;code&gt;RCTViewManager&lt;/code&gt;s are also typically the delegates for the views, sending events back to JavaScript via the bridge.</source>
          <target state="translated">本机视图由 &lt;code&gt;RCTViewManager&lt;/code&gt; 的子类创建和操纵。这些子类在功能上与视图控制器类似，但本质上是单例-桥仅创建每个子类的一个实例。它们将本机视图公开给 &lt;code&gt;RCTUIManager&lt;/code&gt; ，后者将其委托给它们，以根据需要设置和更新视图的属性。该 &lt;code&gt;RCTViewManager&lt;/code&gt; s为通常还对意见的代表，通过桥事件发送回JavaScript的。</target>
        </trans-unit>
        <trans-unit id="6e52bb219c0545ec2e18ed8c58b6f350c0ef1b81" translate="yes" xml:space="preserve">
          <source>NativeAnimationsExample</source>
          <target state="translated">NativeAnimationsExample</target>
        </trans-unit>
        <trans-unit id="4e00c85f9c91dbc8fb879ddb7991276780dd6fd8" translate="yes" xml:space="preserve">
          <source>Navigate forward to a new route.</source>
          <target state="translated">向前导航到新的路线。</target>
        </trans-unit>
        <trans-unit id="c21e50ad5d59f52266565c16d8eeed5c6b1e5bf2" translate="yes" xml:space="preserve">
          <source>Navigating Between Screens</source>
          <target state="translated">在屏幕之间导航</target>
        </trans-unit>
        <trans-unit id="7a7a516cb5273f0f885f321befe93f64ae5aaf2b" translate="yes" xml:space="preserve">
          <source>Navigation Bar Configuration</source>
          <target state="translated">导航栏配置</target>
        </trans-unit>
        <trans-unit id="1211777e1ca26adcd946f4f8849a0a85613470e3" translate="yes" xml:space="preserve">
          <source>NavigatorIOS</source>
          <target state="translated">NavigatorIOS</target>
        </trans-unit>
        <trans-unit id="42b26fc6c0504ab414c105664960912239d9ccc2" translate="yes" xml:space="preserve">
          <source>NavigatorIOS uses &lt;code&gt;route&lt;/code&gt; objects to identify child views, their props, and navigation bar configuration. Navigation operations such as push operations expect routes to look like this the &lt;code&gt;initialRoute&lt;/code&gt;.</source>
          <target state="translated">NavigatorIOS使用 &lt;code&gt;route&lt;/code&gt; 对象来识别子视图，其道具和导航栏配置。导航操作（例如推操作）期望路线看起来像 &lt;code&gt;initialRoute&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="203ff63c64646e90b4ccafa9436f68d8e2c16270" translate="yes" xml:space="preserve">
          <source>NavigatorIOS#barStyle</source>
          <target state="translated">NavigatorIOS#barStyle</target>
        </trans-unit>
        <trans-unit id="7217b18f5442fd730c38678c47b1cf9eff50cd4f" translate="yes" xml:space="preserve">
          <source>NavigatorIOS#barTintColor</source>
          <target state="translated">NavigatorIOS#barTintColor</target>
        </trans-unit>
        <trans-unit id="3c2b0f32881562d685b6939443060f4967d9ec05" translate="yes" xml:space="preserve">
          <source>NavigatorIOS#initialRoute</source>
          <target state="translated">NavigatorIOS#initialRoute</target>
        </trans-unit>
        <trans-unit id="9619e2cede2e1ebecbb2330407c20ae2c15e3f86" translate="yes" xml:space="preserve">
          <source>NavigatorIOS#interactivePopGestureEnabled</source>
          <target state="translated">NavigatorIOS#interactivePopGestureEnabled</target>
        </trans-unit>
        <trans-unit id="89949c2b04020613db0b1eea0979aa9b56a97d45" translate="yes" xml:space="preserve">
          <source>NavigatorIOS#itemWrapperStyle</source>
          <target state="translated">NavigatorIOS#itemWrapperStyle</target>
        </trans-unit>
        <trans-unit id="6b3bfdc9921500f1db11f40a91e97acae57dd8b4" translate="yes" xml:space="preserve">
          <source>NavigatorIOS#navigationBarHidden</source>
          <target state="translated">NavigatorIOS#navigationBarHidden</target>
        </trans-unit>
        <trans-unit id="08f7fe11c00ef7cfad3a682df6b1b7087f241437" translate="yes" xml:space="preserve">
          <source>NavigatorIOS#shadowHidden</source>
          <target state="translated">NavigatorIOS#shadowHidden</target>
        </trans-unit>
        <trans-unit id="8bdb62dd409210c972160cb5eae6dfefbc5da84f" translate="yes" xml:space="preserve">
          <source>NavigatorIOS#tintColor</source>
          <target state="translated">NavigatorIOS#tintColor</target>
        </trans-unit>
        <trans-unit id="3cacf41cf0588e601888cb163cd7dc3f84f8b005" translate="yes" xml:space="preserve">
          <source>NavigatorIOS#titleTextColor</source>
          <target state="translated">NavigatorIOS#titleTextColor</target>
        </trans-unit>
        <trans-unit id="58039f477867552cb401f2ff19607752ff133c61" translate="yes" xml:space="preserve">
          <source>NavigatorIOS#translucent</source>
          <target state="translated">NavigatorIOS#translucent</target>
        </trans-unit>
        <trans-unit id="1b9528ad6528771172d8d8b5e5a0fe876692f177" translate="yes" xml:space="preserve">
          <source>NavigatorIOS.pop()</source>
          <target state="translated">NavigatorIOS.pop()</target>
        </trans-unit>
        <trans-unit id="6ca49e1f7792f78e5c894c8dafb114986e45241b" translate="yes" xml:space="preserve">
          <source>NavigatorIOS.popN()</source>
          <target state="translated">NavigatorIOS.popN()</target>
        </trans-unit>
        <trans-unit id="f5959bb93066cdab1308108acf2577820c045c6e" translate="yes" xml:space="preserve">
          <source>NavigatorIOS.popToRoute()</source>
          <target state="translated">NavigatorIOS.popToRoute()</target>
        </trans-unit>
        <trans-unit id="f70611baff5e1146faf3e1b78d32173e76f9501f" translate="yes" xml:space="preserve">
          <source>NavigatorIOS.popToTop()</source>
          <target state="translated">NavigatorIOS.popToTop()</target>
        </trans-unit>
        <trans-unit id="489f50525dd7015dfb072db3940447dfe8b81b3c" translate="yes" xml:space="preserve">
          <source>NavigatorIOS.push()</source>
          <target state="translated">NavigatorIOS.push()</target>
        </trans-unit>
        <trans-unit id="a02bc4cb1aaeda8380f1b41039d7d412cccb8a91" translate="yes" xml:space="preserve">
          <source>NavigatorIOS.replace()</source>
          <target state="translated">NavigatorIOS.replace()</target>
        </trans-unit>
        <trans-unit id="31031a30e5600b57bb3f76af74060f17f1c35e76" translate="yes" xml:space="preserve">
          <source>NavigatorIOS.replaceAtIndex()</source>
          <target state="translated">NavigatorIOS.replaceAtIndex()</target>
        </trans-unit>
        <trans-unit id="7f1d26984d85b46843407e614b0941c691b4f4ef" translate="yes" xml:space="preserve">
          <source>NavigatorIOS.replacePrevious()</source>
          <target state="translated">NavigatorIOS.replacePrevious()</target>
        </trans-unit>
        <trans-unit id="50544cab8785607701ea683dcab63d506ffe44cd" translate="yes" xml:space="preserve">
          <source>NavigatorIOS.replacePreviousAndPop()</source>
          <target state="translated">NavigatorIOS.replacePreviousAndPop()</target>
        </trans-unit>
        <trans-unit id="6d3a9ce5a0993a89fe685553bbf5f9608378cfb2" translate="yes" xml:space="preserve">
          <source>NavigatorIOS.resetTo()</source>
          <target state="translated">NavigatorIOS.resetTo()</target>
        </trans-unit>
        <trans-unit id="152ef8d42b8d148b490cee496a2da9dd1bab6072" translate="yes" xml:space="preserve">
          <source>Nested text</source>
          <target state="translated">嵌套文本</target>
        </trans-unit>
        <trans-unit id="a50ebf3848a241aec5457be41ab47b85b39bee65" translate="yes" xml:space="preserve">
          <source>Nested views (iOS only)</source>
          <target state="translated">嵌套视图(仅限iOS</target>
        </trans-unit>
        <trans-unit id="88e5c88d54b1faff872d4b21b89ac13ec2470222" translate="yes" xml:space="preserve">
          <source>NetInfo</source>
          <target state="translated">NetInfo</target>
        </trans-unit>
        <trans-unit id="c28fd4542fa60b8a800820a6f6919c8c94bd6f43" translate="yes" xml:space="preserve">
          <source>NetInfo exposes info about online/offline status</source>
          <target state="translated">NetInfo公开在线/离线状态信息。</target>
        </trans-unit>
        <trans-unit id="a87e09f5d2fcfa3ce47b346a03993f0472ef5074" translate="yes" xml:space="preserve">
          <source>NetInfo#isConnected</source>
          <target state="translated">NetInfo#isConnected</target>
        </trans-unit>
        <trans-unit id="ebb783d7621d3f45e2caea29a80ce5f7be21eef0" translate="yes" xml:space="preserve">
          <source>NetInfo.addEventListener()</source>
          <target state="translated">NetInfo.addEventListener()</target>
        </trans-unit>
        <trans-unit id="6f84936db531bdb3c5751839c0cb1e3526be7659" translate="yes" xml:space="preserve">
          <source>NetInfo.getConnectionInfo()</source>
          <target state="translated">NetInfo.getConnectionInfo()</target>
        </trans-unit>
        <trans-unit id="414af702fdc97c2fd9eb1bd8d775070de7718017" translate="yes" xml:space="preserve">
          <source>NetInfo.isConnectionExpensive()</source>
          <target state="translated">NetInfo.isConnectionExpensive()</target>
        </trans-unit>
        <trans-unit id="799ee4127391bb389c5990190fd8f4405071a2d4" translate="yes" xml:space="preserve">
          <source>NetInfo.removeEventListener()</source>
          <target state="translated">NetInfo.removeEventListener()</target>
        </trans-unit>
        <trans-unit id="921e0ffad6dfe0b1e44769aed9bc621b85c607a2" translate="yes" xml:space="preserve">
          <source>Network Images</source>
          <target state="translated">网络图像</target>
        </trans-unit>
        <trans-unit id="8cf26f270327f7111c4c55365c611d665c20149b" translate="yes" xml:space="preserve">
          <source>Network Requests for Images</source>
          <target state="translated">图像的网络请求</target>
        </trans-unit>
        <trans-unit id="1e91748557010f07119a40ac844fcae91cc2e7a3" translate="yes" xml:space="preserve">
          <source>Networking</source>
          <target state="translated">Networking</target>
        </trans-unit>
        <trans-unit id="68bdc912d052f097fe16357492fe5e23c8bb76b6" translate="yes" xml:space="preserve">
          <source>Networking is an inherently asynchronous operation. Fetch methods will return a &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise&quot;&gt;Promise&lt;/a&gt; that makes it straightforward to write code that works in an asynchronous manner:</source>
          <target state="translated">网络是天生的异步操作。Fetch方法将返回一个&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise&quot;&gt;Promise&lt;/a&gt;，使编写以异步方式工作的代码变得很简单：</target>
        </trans-unit>
        <trans-unit id="015a20d9c89edc8505d767c855b29a57fbb070ef" translate="yes" xml:space="preserve">
          <source>New issue runbook</source>
          <target state="translated">新发行的运行手册</target>
        </trans-unit>
        <trans-unit id="3f3a2b8a45e900264b1ef8a7e6725145c731fc8e" translate="yes" xml:space="preserve">
          <source>New issues should follow the &lt;a href=&quot;https://github.com/facebook/react-native/blob/master/.github/ISSUE_TEMPLATE.md&quot;&gt;Issue Template&lt;/a&gt;.</source>
          <target state="translated">新问题应遵循&lt;a href=&quot;https://github.com/facebook/react-native/blob/master/.github/ISSUE_TEMPLATE.md&quot;&gt;问题模板&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="7b92779c7ed4ed6788ebc3ab617481ab09e38544" translate="yes" xml:space="preserve">
          <source>New value to merge for the &lt;code&gt;key&lt;/code&gt;.</source>
          <target state="translated">新价值合并的 &lt;code&gt;key&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="03ace6e639680330a1ef14555772509682b8bf08" translate="yes" xml:space="preserve">
          <source>Next, check the manufacturer code by using &lt;code&gt;lsusb&lt;/code&gt; (on mac, you must first &lt;a href=&quot;https://github.com/jlhonora/lsusb&quot;&gt;install lsusb&lt;/a&gt;). &lt;code&gt;lsusb&lt;/code&gt; should output something like this:</source>
          <target state="translated">接下来，使用 &lt;code&gt;lsusb&lt;/code&gt; 检查制造商代码（在Mac上，必须首先&lt;a href=&quot;https://github.com/jlhonora/lsusb&quot;&gt;安装lsusb&lt;/a&gt;）。 &lt;code&gt;lsusb&lt;/code&gt; 应该输出如下内容：</target>
        </trans-unit>
        <trans-unit id="830506d64eb85f7451d290a734c2a7bcd8a95c55" translate="yes" xml:space="preserve">
          <source>Next, declare an event handler property on &lt;code&gt;RNTMapManager&lt;/code&gt;, make it a delegate for all the views it exposes, and forward events to JS by calling the event handler block from the native view.</source>
          <target state="translated">接下来，在 &lt;code&gt;RNTMapManager&lt;/code&gt; 上声明一个事件处理程序属性，使其成为它公开的所有视图的委托，并通过从本机视图调用事件处理程序块将事件转发给JS。</target>
        </trans-unit>
        <trans-unit id="f591a06bf7079108f4032f4a969bc0575aa35c17" translate="yes" xml:space="preserve">
          <source>Next, let's add the more complex &lt;code&gt;region&lt;/code&gt; prop. We start by adding the native code:</source>
          <target state="translated">接下来，让我们添加更复杂的 &lt;code&gt;region&lt;/code&gt; 道具。我们首先添加本机代码：</target>
        </trans-unit>
        <trans-unit id="c7ee755946dcfbe6935e52fc3ba7eaf8981b655e" translate="yes" xml:space="preserve">
          <source>Next, make sure you have &lt;a href=&quot;https://yarnpkg.com/lang/en/docs/install/&quot;&gt;installed the yarn package manager&lt;/a&gt;.</source>
          <target state="translated">接下来，确保您已经&lt;a href=&quot;https://yarnpkg.com/lang/en/docs/install/&quot;&gt;安装了纱线卷装管理器&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="d73ca38c7b0d03605c388a802ce7f3422c5a5390" translate="yes" xml:space="preserve">
          <source>Next, make sure you have run &lt;code&gt;pod install&lt;/code&gt; and that a &lt;code&gt;Pods/&lt;/code&gt; directory has been created in your project with React installed. CocoaPods will instruct you to use the generated &lt;code&gt;.xcworkspace&lt;/code&gt; file henceforth to be able to use these installed dependencies.</source>
          <target state="translated">接下来，确保已运行 &lt;code&gt;pod install&lt;/code&gt; 并在项目中已安装React的地方创建了 &lt;code&gt;Pods/&lt;/code&gt; 目录。此后，CocoaPods将指示您使用生成的 &lt;code&gt;.xcworkspace&lt;/code&gt; 文件，以便能够使用这些已安装的依赖项。</target>
        </trans-unit>
        <trans-unit id="f521883155cb9c0511ec4b074d69ac365fb05416" translate="yes" xml:space="preserve">
          <source>Next, make sure you have the Internet permission in your &lt;code&gt;AndroidManifest.xml&lt;/code&gt;:</source>
          <target state="translated">接下来，确保您在 &lt;code&gt;AndroidManifest.xml&lt;/code&gt; 中具有Internet权限：</target>
        </trans-unit>
        <trans-unit id="5e7c788de09446581a695ec7518480345ce53995" translate="yes" xml:space="preserve">
          <source>Next, select the &quot;SDK Tools&quot; tab and check the box next to &quot;Show Package Details&quot; here as well. Look for and expand the &quot;Android SDK Build-Tools&quot; entry, then make sure that &lt;code&gt;23.0.1&lt;/code&gt; is selected.</source>
          <target state="translated">接下来，选择&amp;ldquo; SDK工具&amp;rdquo;选项卡，并在此处也选中&amp;ldquo;显示软件包详细信息&amp;rdquo;旁边的框。查找并展开&amp;ldquo; Android SDK Build-Tools&amp;rdquo;条目，然后确保选择了 &lt;code&gt;23.0.1&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="bfcc2ffa45d72fed43ce1d659ef4ddfc1304eb32" translate="yes" xml:space="preserve">
          <source>Next, we need to pass some activity lifecycle callbacks to the &lt;code&gt;ReactInstanceManager&lt;/code&gt; and &lt;code&gt;ReactRootView&lt;/code&gt;:</source>
          <target state="translated">接下来，我们需要将一些活动生命周期回调传递给 &lt;code&gt;ReactInstanceManager&lt;/code&gt; 和 &lt;code&gt;ReactRootView&lt;/code&gt; ：</target>
        </trans-unit>
        <trans-unit id="b2529a410a87e6c23fa27c439185f235a1d5bbfc" translate="yes" xml:space="preserve">
          <source>Nexus 6</source>
          <target state="translated">Nexus 6</target>
        </trans-unit>
        <trans-unit id="816c52fd2bdd94a63cd0944823a6c0aa9384c103" translate="yes" xml:space="preserve">
          <source>No</source>
          <target state="translated">No</target>
        </trans-unit>
        <trans-unit id="c53cbcd751e10d8f254dcb8d855e0ba41589a1e3" translate="yes" xml:space="preserve">
          <source>No animation</source>
          <target state="translated">没有动画</target>
        </trans-unit>
        <trans-unit id="6015fc17dff11bc51d8aa739ed7890c7295e20c1" translate="yes" xml:space="preserve">
          <source>No global namespace, i.e. you don't have to worry about name collisions.</source>
          <target state="translated">没有全局命名空间,也就是说,你不必担心名称碰撞。</target>
        </trans-unit>
        <trans-unit id="af5118da13925d3b70f428a4c4e64fdc8c804c93" translate="yes" xml:space="preserve">
          <source>No transports available</source>
          <target state="translated">没有运输服务</target>
        </trans-unit>
        <trans-unit id="260f7a8cd4f6938b3cc185a619847cb83d670219" translate="yes" xml:space="preserve">
          <source>Node</source>
          <target state="translated">Node</target>
        </trans-unit>
        <trans-unit id="8ea782bf2f77da768b7fea385b9a68b42f4eaf4f" translate="yes" xml:space="preserve">
          <source>Node comes with npm, which lets you install the React Native command line interface.</source>
          <target state="translated">Node自带npm,可以让你安装React Native命令行接口。</target>
        </trans-unit>
        <trans-unit id="eedd6657aa9d7b6737d98339d1acf11d35496a25" translate="yes" xml:space="preserve">
          <source>Node, Python2, JDK</source>
          <target state="translated">Node,Python2,JDK</target>
        </trans-unit>
        <trans-unit id="1056009ed420e3e476e7b666f46c93bf2f6fe8d2" translate="yes" xml:space="preserve">
          <source>Node, Watchman</source>
          <target state="translated">节点、守望者</target>
        </trans-unit>
        <trans-unit id="8c4a855427e6b89824183c1fc74ebc5aa5449b43" translate="yes" xml:space="preserve">
          <source>Normal (default)</source>
          <target state="translated">正常(默认)</target>
        </trans-unit>
        <trans-unit id="5d58bcc3813ec033c1210667edf5e9063783fadf" translate="yes" xml:space="preserve">
          <source>Not every app uses all the native capabilities, and including the code to support all those features would impact the binary size... But we still want to make it easy to add these features whenever you need them.</source>
          <target state="translated">并不是每个应用程序都使用所有的原生功能,包括支持所有这些功能的代码会影响二进制大小......。但我们仍然希望能在你需要的时候轻松添加这些功能。</target>
        </trans-unit>
        <trans-unit id="65829498bd485de3e72b5e86e983de8db63e563c" translate="yes" xml:space="preserve">
          <source>Not every library will need this step, what you need to consider is:</source>
          <target state="translated">不是每个图书馆都需要这一步,你需要考虑的是。</target>
        </trans-unit>
        <trans-unit id="7593f62c0d45c88cb5cdf423e6a8dfc0921c1ec1" translate="yes" xml:space="preserve">
          <source>Not everything you can do with &lt;code&gt;Animated&lt;/code&gt; is currently supported by the native driver. The main limitation is that you can only animate non-layout properties: things like &lt;code&gt;transform&lt;/code&gt; and &lt;code&gt;opacity&lt;/code&gt; will work, but flexbox and position properties will not. When using &lt;code&gt;Animated.event&lt;/code&gt;, it will only work with direct events and not bubbling events. This means it does not work with &lt;code&gt;PanResponder&lt;/code&gt; but does work with things like &lt;code&gt;ScrollView#onScroll&lt;/code&gt;.</source>
          <target state="translated">当前，本机驱动程序不支持您可以使用 &lt;code&gt;Animated&lt;/code&gt; 做的所有事情。主要限制是您只能为非布局属性设置动画：诸如 &lt;code&gt;transform&lt;/code&gt; 和 &lt;code&gt;opacity&lt;/code&gt; 之类的东西将起作用，而flexbox和position属性将不起作用。使用 &lt;code&gt;Animated.event&lt;/code&gt; 时，它将仅与直接事件一起使用，而不与冒泡事件一起使用。这意味着它不适用于 &lt;code&gt;PanResponder&lt;/code&gt; ,但可以与 &lt;code&gt;ScrollView#onScroll&lt;/code&gt; 之类的东西一起使用。</target>
        </trans-unit>
        <trans-unit id="d2f0661fbd0eaccb806b9a830e156854255689aa" translate="yes" xml:space="preserve">
          <source>Note that &lt;code&gt;--variant=release&lt;/code&gt; is only available if you've set up signing as described above.</source>
          <target state="translated">请注意， &lt;code&gt;--variant=release&lt;/code&gt; 仅在如上所述设置签名后才可用。</target>
        </trans-unit>
        <trans-unit id="bd602ad0a82962f4d362601233a80e0791789c06" translate="yes" xml:space="preserve">
          <source>Note that &lt;code&gt;RCTRootView bundleURL&lt;/code&gt; starts up a new JSC VM. To save resources and simplify the communication between RN views in different parts of your native app, you can have multiple views powered by React Native that are associated with a single JS runtime. To do that, instead of using &lt;code&gt;RCTRootView bundleURL&lt;/code&gt;, use &lt;a href=&quot;https://github.com/facebook/react-native/blob/master/React/Base/RCTBridge.h#L89&quot;&gt;&lt;code&gt;RCTBridge initWithBundleURL&lt;/code&gt;&lt;/a&gt; to create a bridge and then use &lt;code&gt;RCTRootView initWithBridge&lt;/code&gt;.</source>
          <target state="translated">请注意， &lt;code&gt;RCTRootView bundleURL&lt;/code&gt; 将启动新的JSC VM。为了节省资源并简化本机应用程序不同部分中的RN视图之间的通信，您可以让多个由React Native提供支持的视图与单个JS运行时关联。为此，不要使用 &lt;code&gt;RCTRootView bundleURL&lt;/code&gt; ，而是使用&lt;a href=&quot;https://github.com/facebook/react-native/blob/master/React/Base/RCTBridge.h#L89&quot;&gt; &lt;code&gt;RCTBridge initWithBundleURL&lt;/code&gt; &lt;/a&gt;创建桥，然后使用 &lt;code&gt;RCTRootView initWithBridge&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="c9413b627e3306026e52ef0c96595e5dd2e2b55b" translate="yes" xml:space="preserve">
          <source>Note that &lt;code&gt;RCTRootView initWithURL&lt;/code&gt; starts up a new JSC VM. To save resources and simplify the communication between RN views in different parts of your native app, you can have multiple views powered by React Native that are associated with a single JS runtime. To do that, instead of using &lt;code&gt;[RCTRootView alloc] initWithURL&lt;/code&gt;, use &lt;a href=&quot;https://github.com/facebook/react-native/blob/master/React/Base/RCTBridge.h#L93&quot;&gt;&lt;code&gt;RCTBridge initWithBundleURL&lt;/code&gt;&lt;/a&gt; to create a bridge and then use &lt;code&gt;RCTRootView initWithBridge&lt;/code&gt;.</source>
          <target state="translated">请注意， &lt;code&gt;RCTRootView initWithURL&lt;/code&gt; 将启动新的JSC VM。为了节省资源并简化本机应用程序不同部分中的RN视图之间的通信，您可以让多个由React Native提供支持的视图与单个JS运行时关联。为此，不要使用 &lt;code&gt;[RCTRootView alloc] initWithURL&lt;/code&gt; ，&lt;a href=&quot;https://github.com/facebook/react-native/blob/master/React/Base/RCTBridge.h#L93&quot;&gt; &lt;code&gt;RCTBridge initWithBundleURL&lt;/code&gt; &lt;/a&gt;使用RCTBridge initWithBundleURL创建桥，然后使用 &lt;code&gt;RCTRootView initWithBridge&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="a225c98bf355ea1f668ce1c104025ff579c99cc7" translate="yes" xml:space="preserve">
          <source>Note that although &lt;code&gt;LayoutAnimation&lt;/code&gt; is very powerful and can be quite useful, it provides much less control than &lt;code&gt;Animated&lt;/code&gt; and other animation libraries, so you may need to use another approach if you can't get &lt;code&gt;LayoutAnimation&lt;/code&gt; to do what you want.</source>
          <target state="translated">请注意，尽管 &lt;code&gt;LayoutAnimation&lt;/code&gt; 非常强大并且可以非常有用，但是它提供的控制要比 &lt;code&gt;Animated&lt;/code&gt; 和其他动画库少得多，因此，如果无法让 &lt;code&gt;LayoutAnimation&lt;/code&gt; 来完成所需的工作，则可能需要使用另一种方法。</target>
        </trans-unit>
        <trans-unit id="a8ad19f5547b7d24de7151adeb1002851e28b484" translate="yes" xml:space="preserve">
          <source>Note that for network and data images, you will need to manually specify the dimensions of your image!</source>
          <target state="translated">请注意,对于网络和数据图像,您需要手动指定您的图像的尺寸!</target>
        </trans-unit>
        <trans-unit id="015da2184c33a461722169a542920f3dfd69bfa1" translate="yes" xml:space="preserve">
          <source>Note that if you set &lt;code&gt;android:windowSoftInputMode&lt;/code&gt; to &lt;code&gt;adjustResize&lt;/code&gt; or &lt;code&gt;adjustNothing&lt;/code&gt;, only &lt;code&gt;keyboardDidShow&lt;/code&gt; and &lt;code&gt;keyboardDidHide&lt;/code&gt; events will be available on Android. &lt;code&gt;keyboardWillShow&lt;/code&gt; as well as &lt;code&gt;keyboardWillHide&lt;/code&gt; are generally not available on Android since there is no native corresponding event.</source>
          <target state="translated">请注意，如果您将 &lt;code&gt;android:windowSoftInputMode&lt;/code&gt; 设置为 &lt;code&gt;adjustResize&lt;/code&gt; 或 &lt;code&gt;adjustNothing&lt;/code&gt; ，则只有 &lt;code&gt;keyboardDidShow&lt;/code&gt; 和 &lt;code&gt;keyboardDidHide&lt;/code&gt; 事件在Android上可用。 &lt;code&gt;keyboardWillShow&lt;/code&gt; 和 &lt;code&gt;keyboardWillHide&lt;/code&gt; 通常在Android上不可用，因为没有本机对应事件。</target>
        </trans-unit>
        <trans-unit id="23ecfc1c163cf18b7134d91421a6ed8a4c2b6f00" translate="yes" xml:space="preserve">
          <source>Note that image sources required this way include size (width, height) info for the Image. If you need to scale the image dynamically (i.e. via flex), you may need to manually set &lt;code&gt;{ width: undefined, height: undefined }&lt;/code&gt; on the style attribute.</source>
          <target state="translated">请注意，以这种方式要求的图像源包括图像的尺寸（宽度，高度）信息。如果需要动态缩放图像（即通过flex缩放），则可能需要在style属性上手动设置 &lt;code&gt;{ width: undefined, height: undefined }&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="25169c96e7dc28e16e9f1e222bc5dffbdb6fceac" translate="yes" xml:space="preserve">
          <source>Note that in order to get this to work on &lt;strong&gt;Android&lt;/strong&gt; you need to set the following flags via &lt;code&gt;UIManager&lt;/code&gt;:</source>
          <target state="translated">请注意，要使其在&lt;strong&gt;Android&lt;/strong&gt;上正常运行，您需要通过 &lt;code&gt;UIManager&lt;/code&gt; 设置以下标志：</target>
        </trans-unit>
        <trans-unit id="dd49838d0c906ec6233002e652bf7d8d14257db1" translate="yes" xml:space="preserve">
          <source>Note that it is very inefficient to transfer large quantities of binary data between JS and native code, so you should avoid calling this more than necessary. @platform ios</source>
          <target state="translated">请注意,在JS和原生代码之间传输大量二进制数据的效率很低,所以你应该避免超过必要的调用。@平台 ios</target>
        </trans-unit>
        <trans-unit id="8469385681515bb25969b2cfd106a6e8d93d20c1" translate="yes" xml:space="preserve">
          <source>Note that it is very inefficient to transfer large quantities of binary data between JS and native code, so you should avoid calling this more than necessary. To display an image in the ImageStore, you can just pass the URI to an &lt;code&gt;&amp;lt;Image/&amp;gt;&lt;/code&gt; component; there is no need to retrieve the base64 data.</source>
          <target state="translated">请注意，在JS和本机代码之间传输大量二进制数据效率很低，因此应避免不必要地调用它。要在ImageStore中显示图像，只需将URI传递给 &lt;code&gt;&amp;lt;Image/&amp;gt;&lt;/code&gt; 组件即可；无需检索base64数据。</target>
        </trans-unit>
        <trans-unit id="653472261b00ea6fc1f04f9e986d8dfc39f69300" translate="yes" xml:space="preserve">
          <source>Note that not all Text styles are supported, an incomplete list of what is not supported includes:</source>
          <target state="translated">请注意,并不是所有的文本样式都支持,不支持的不完整列表包括。</target>
        </trans-unit>
        <trans-unit id="0fe5d55981d2a562ce4d4d1b7b1b290a1676418e" translate="yes" xml:space="preserve">
          <source>Note that on Android performing text selection in input can change app's activity &lt;code&gt;windowSoftInputMode&lt;/code&gt; param to &lt;code&gt;adjustResize&lt;/code&gt;. This may cause issues with components that have position: 'absolute' while keyboard is active. To avoid this behavior either specify &lt;code&gt;windowSoftInputMode&lt;/code&gt; in AndroidManifest.xml ( &lt;a href=&quot;https://developer.android.com/guide/topics/manifest/activity-element.html&quot;&gt;https://developer.android.com/guide/topics/manifest/activity-element.html&lt;/a&gt; ) or control this param programmatically with native code.</source>
          <target state="translated">请注意，在Android上，在输入中执行文本选择可以将应用程序的活动 &lt;code&gt;windowSoftInputMode&lt;/code&gt; 参数更改为 &lt;code&gt;adjustResize&lt;/code&gt; 。这可能会导致具有以下位置的组件出现问题：键盘处于活动状态时为&amp;ldquo;绝对&amp;rdquo;。为了避免这种行为， &lt;code&gt;windowSoftInputMode&lt;/code&gt; 在AndroidManifest.xml（&lt;a href=&quot;https://developer.android.com/guide/topics/manifest/activity-element.html&quot;&gt;https://developer.android.com/guide/topics/manifest/activity-element.html&lt;/a&gt;）中指定windowSoftInputMode或通过本机代码以编程方式控制此参数。</target>
        </trans-unit>
        <trans-unit id="8bbbd5ac5551d715e163af09e0a12a1de2833d15" translate="yes" xml:space="preserve">
          <source>Note that some props are only available with &lt;code&gt;multiline={true/false}&lt;/code&gt;. Additionally, border styles that apply to only one side of the element (e.g., &lt;code&gt;borderBottomColor&lt;/code&gt;, &lt;code&gt;borderLeftWidth&lt;/code&gt;, etc.) will not be applied if &lt;code&gt;multiline=false&lt;/code&gt;. To achieve the same effect, you can wrap your &lt;code&gt;TextInput&lt;/code&gt; in a &lt;code&gt;View&lt;/code&gt;:</source>
          <target state="translated">请注意，某些道具仅在 &lt;code&gt;multiline={true/false}&lt;/code&gt; 下可用。另外，如果 &lt;code&gt;multiline=false&lt;/code&gt; ，则仅适用于元素一侧的边框样式（例如 &lt;code&gt;borderBottomColor&lt;/code&gt; ， &lt;code&gt;borderLeftWidth&lt;/code&gt; 等）将不适用。为了达到相同的效果，可以将 &lt;code&gt;TextInput&lt;/code&gt; 包装在 &lt;code&gt;View&lt;/code&gt; 中：</target>
        </trans-unit>
        <trans-unit id="4090f4acedc0afd8d42b8e3f00ece6f3221762a2" translate="yes" xml:space="preserve">
          <source>Note that the constants are exported only at initialization time, so if you change &lt;code&gt;constantsToExport&lt;/code&gt; values at runtime it won't affect the JavaScript environment.</source>
          <target state="translated">请注意，常量仅在初始化时导出，因此，如果在运行时更改 &lt;code&gt;constantsToExport&lt;/code&gt; 值，则不会影响JavaScript环境。</target>
        </trans-unit>
        <trans-unit id="065d8d862a76ec07b65c8344f8bed4bf07c2d792" translate="yes" xml:space="preserve">
          <source>Note that the view can always be scrolled by calling &lt;code&gt;scrollTo&lt;/code&gt;.</source>
          <target state="translated">请注意，始终可以通过调用 &lt;code&gt;scrollTo&lt;/code&gt; 来滚动视图。</target>
        </trans-unit>
        <trans-unit id="725409b3c0df9c04fb2e8b831e33c851aa358c9d" translate="yes" xml:space="preserve">
          <source>Note that these measurements are not available until after the rendering has been completed in native. If you need the measurements as soon as possible, consider using the &lt;a href=&quot;view#onlayout&quot;&gt;&lt;code&gt;onLayout&lt;/code&gt; prop&lt;/a&gt; instead.</source>
          <target state="translated">请注意，只有在完成本机渲染后才能使用这些度量。如果您需要尽快进行测量，请考虑改为使用&lt;a href=&quot;view#onlayout&quot;&gt; &lt;code&gt;onLayout&lt;/code&gt; 道具&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="fb2b3fc96764bf4da7ed6f6feb7a0d092555ca3f" translate="yes" xml:space="preserve">
          <source>Note that we explicitly specify the type as &lt;code&gt;BOOL&lt;/code&gt; - React Native uses &lt;code&gt;RCTConvert&lt;/code&gt; under the hood to convert all sorts of different data types when talking over the bridge, and bad values will show convenient &quot;RedBox&quot; errors to let you know there is an issue ASAP. When things are straightforward like this, the whole implementation is taken care of for you by this macro.</source>
          <target state="translated">请注意，我们明确地指定类型为 &lt;code&gt;BOOL&lt;/code&gt; -阵营本土用途 &lt;code&gt;RCTConvert&lt;/code&gt; 引擎盖各种不同的数据类型的转换下，过了桥交谈时，坏值将显示方便的&amp;ldquo;红盒子&amp;rdquo;的错误，让你知道有一个问题，尽快。当事情如此简单时，此宏将为您实现整个实现。</target>
        </trans-unit>
        <trans-unit id="074276b5641eee53ba3a4f85b335e63374437b63" translate="yes" xml:space="preserve">
          <source>Note that you can only define one of bounciness/speed, tension/friction, or stiffness/damping/mass, but not more than one:</source>
          <target state="translated">注意,你只能定义弹力/速度、拉力/摩擦力或刚度/阻尼/质量中的一个,但不能多于一个。</target>
        </trans-unit>
        <trans-unit id="f0ed9149f004c90e44484abb4b793cadc0e3675e" translate="yes" xml:space="preserve">
          <source>Note that you must specify some width and height style attributes.</source>
          <target state="translated">请注意,你必须指定一些宽度和高度的样式属性。</target>
        </trans-unit>
        <trans-unit id="17e3e8e5d00494ec2330345b5a5ed901185de8ec" translate="yes" xml:space="preserve">
          <source>Note the latest version of the &lt;code&gt;react-native&lt;/code&gt; npm package &lt;a href=&quot;https://www.npmjs.com/package/react-native&quot;&gt;from here&lt;/a&gt; (or use &lt;code&gt;npm info react-native&lt;/code&gt; to check).</source>
          <target state="translated">&lt;a href=&quot;https://www.npmjs.com/package/react-native&quot;&gt;从此处&lt;/a&gt;注意最新版本的 &lt;code&gt;react-native&lt;/code&gt; npm软件包（或使用 &lt;code&gt;npm info react-native&lt;/code&gt; 进行检查）。</target>
        </trans-unit>
        <trans-unit id="b0cb6ec31954f045d6e9c50bfeffbfbf2f2b39e3" translate="yes" xml:space="preserve">
          <source>Note the native date picker dialog has some UI glitches on Android 4 and lower when using the &lt;code&gt;minDate&lt;/code&gt; and &lt;code&gt;maxDate&lt;/code&gt; options.</source>
          <target state="translated">请注意，当使用 &lt;code&gt;minDate&lt;/code&gt; 和 &lt;code&gt;maxDate&lt;/code&gt; 选项时，本机日期选择器对话框在Android 4及更低版本上会有一些UI故障。</target>
        </trans-unit>
        <trans-unit id="26d58474c4df2e38418b5948777ba1dc70f99502" translate="yes" xml:space="preserve">
          <source>Note the use of &lt;code&gt;nativeOnly&lt;/code&gt; above. Sometimes you'll have some special properties that you need to expose for the native component, but don't actually want them as part of the API for the associated React component. For example, &lt;code&gt;Switch&lt;/code&gt; has a custom &lt;code&gt;onChange&lt;/code&gt; handler for the raw native event, and exposes an &lt;code&gt;onValueChange&lt;/code&gt; handler property that is invoked with just the boolean value rather than the raw event (similar to &lt;code&gt;onChangeMessage&lt;/code&gt; in the example above). Since you don't want these native only properties to be part of the API, you don't want to put them in &lt;code&gt;propTypes&lt;/code&gt;, but if you don't you'll get an error. The solution is simply to call them out via the &lt;code&gt;nativeOnly&lt;/code&gt; option.</source>
          <target state="translated">注意上 &lt;code&gt;nativeOnly&lt;/code&gt; 的使用。有时，您需要为本机组件提供一些特殊的属性，但实际上并不希望将它们作为关联的React组件的API的一部分。例如， &lt;code&gt;Switch&lt;/code&gt; 有一个针对原始本机事件的自定义 &lt;code&gt;onChange&lt;/code&gt; 处理程序，并公开了一个 &lt;code&gt;onValueChange&lt;/code&gt; 处理程序属性，该属性仅使用布尔值而不是原始事件进行调用（类似于上面的示例中的 &lt;code&gt;onChangeMessage&lt;/code&gt; ）。由于您不希望这些仅本机属性成为API的一部分，因此您不想将它们放在 &lt;code&gt;propTypes&lt;/code&gt; 中，但是如果不这样做，则会出现错误。解决方案是简单地通过 &lt;code&gt;nativeOnly&lt;/code&gt; 调用它们 选项。</target>
        </trans-unit>
        <trans-unit id="6c1e942bcf2116f3b862f06f319e11a38d94f183" translate="yes" xml:space="preserve">
          <source>Note: Although dimensions are available immediately, they may change (e.g due to device rotation) so any rendering logic or styles that depend on these constants should try to call this function on every render, rather than caching the value (for example, using inline styles rather than setting a value in a &lt;code&gt;StyleSheet&lt;/code&gt;).</source>
          <target state="translated">注意：尽管尺寸立即可用，但它们可能会更改（例如，由于设备旋转而引起的），因此依赖于这些常量的任何渲染逻辑或样式都应尝试在每个渲染上调用此函数，而不是缓存值（例如，使用内联）样式，而不是在 &lt;code&gt;StyleSheet&lt;/code&gt; 中设置值）。</target>
        </trans-unit>
        <trans-unit id="40f1468c910434cf4a553f8f29f351c0d3b1d98c" translate="yes" xml:space="preserve">
          <source>Note: Cannot scroll to locations outside the render window without specifying the &lt;code&gt;getItemLayout&lt;/code&gt; or &lt;code&gt;onScrollToIndexFailed&lt;/code&gt; prop.</source>
          <target state="translated">注意：如果不指定 &lt;code&gt;getItemLayout&lt;/code&gt; 或 &lt;code&gt;onScrollToIndexFailed&lt;/code&gt; 属性,则无法滚动到渲染窗口之外的位置。</target>
        </trans-unit>
        <trans-unit id="ebe44f03060c0cc7339f7ec2d6030646c6067a9d" translate="yes" xml:space="preserve">
          <source>Note: Cannot scroll to locations outside the render window without specifying the &lt;code&gt;getItemLayout&lt;/code&gt; prop.</source>
          <target state="translated">注意：如果不指定 &lt;code&gt;getItemLayout&lt;/code&gt; 属性,则无法滚动到渲染窗口之外的位置。</target>
        </trans-unit>
        <trans-unit id="c46891b0f95db127993acf355fd48cfff3130498" translate="yes" xml:space="preserve">
          <source>Note: Files may vary based on shell flavor. See below for examples from common shells.</source>
          <target state="translated">注:文件可能根据壳味道而变化。请看下面的例子从常见的壳。</target>
        </trans-unit>
        <trans-unit id="09ed4407efac19216e11293450ce0eee02361969" translate="yes" xml:space="preserve">
          <source>Note: If you need more control over how to present modals over the rest of your app, then consider using a top-level Navigator.</source>
          <target state="translated">注意:如果您需要更多控制如何在应用程序的其余部分呈现模态,那么可以考虑使用顶层导航器。</target>
        </trans-unit>
        <trans-unit id="2e22949fed9aec7aee06d34c0a50f75cd10553eb" translate="yes" xml:space="preserve">
          <source>Note: Make sure gradle.properties does not include &lt;em&gt;org.gradle.configureondemand=true&lt;/em&gt; as that will make release build skip bundling JS and assets into the APK.</source>
          <target state="translated">注意：确保gradle.properties不包含&lt;em&gt;org.gradle.configureondemand = true，&lt;/em&gt;因为这会使发行版本跳过将JS和资产捆绑到APK中的过程。</target>
        </trans-unit>
        <trans-unit id="8f93c0c982efccfc2b84e88f5acd3c319c08aaef" translate="yes" xml:space="preserve">
          <source>Note: May have bugs (missing content) in some circumstances - use at your own risk.</source>
          <target state="translated">注意:在某些情况下可能会有错误(缺少内容)--使用时风险自负。</target>
        </trans-unit>
        <trans-unit id="3542188e9722dabcf34408ecd75e45d9bcfdbbe9" translate="yes" xml:space="preserve">
          <source>Note: The static bundle is built every time you target a physical device, even in Debug. If you want to save time, turn off bundle generation in Debug by adding the following to your shell script in the Xcode Build Phase &lt;code&gt;Bundle React Native code and images&lt;/code&gt;:</source>
          <target state="translated">注意：每次您以物理设备为目标时（即使在Debug中），都会构建静态捆绑包。如果您想节省时间，请在Xcode Build Phase &lt;code&gt;Bundle React Native code and images&lt;/code&gt; 中的Shell脚本中添加以下内容，以关闭Debug中的包生成：</target>
        </trans-unit>
        <trans-unit id="1fc720032977a19097a4118f7ec4ae9b45272198" translate="yes" xml:space="preserve">
          <source>Note: The weird function signature is due to the fact that, for historical reasons, the function also accepts separate arguments as an alternative to the options object. This is deprecated due to ambiguity (y before x), and SHOULD NOT BE USED.</source>
          <target state="translated">注意:这个奇怪的函数签名是由于历史原因,该函数也接受单独的参数作为选项对象的替代。由于模棱两可(y在x之前),这个函数已经被废弃,并且不应该被使用。</target>
        </trans-unit>
        <trans-unit id="8a4f14ee2dc13cdf87fadba55dd8ec175e3cf3da" translate="yes" xml:space="preserve">
          <source>Note: This function does NOT clone the data in this data source. It simply passes the functions defined at construction to a new data source with the data specified. If you wish to maintain the existing data you must handle merging of old and new data separately and then pass that into this function as the &lt;code&gt;dataBlob&lt;/code&gt;.</source>
          <target state="translated">注意：此功能不会克隆此数据源中的数据。它只是将构造时定义的功能传递给具有指定数据的新数据源。如果希望维护现有数据，则必须分别处理新旧数据的合并，然后将其作为 &lt;code&gt;dataBlob&lt;/code&gt; 传递到此函数中。</target>
        </trans-unit>
        <trans-unit id="0efa5f7e525e964f1a6b30cc407cf12659f5b229" translate="yes" xml:space="preserve">
          <source>Note: Vertical pagination is not supported on Android.</source>
          <target state="translated">注:Android系统不支持垂直分页。</target>
        </trans-unit>
        <trans-unit id="343e63caa622c2fc417aa1dc7232938499492d26" translate="yes" xml:space="preserve">
          <source>Note: Vertical snapToInterval is not supported on Android.</source>
          <target state="translated">注意:Android上不支持垂直snapToInterval。</target>
        </trans-unit>
        <trans-unit id="69e98abeb52506f91b7a847780874ed3ff0e0ae9" translate="yes" xml:space="preserve">
          <source>Note: if you prefer to avoid global installations, you can add &lt;code&gt;react-devtools&lt;/code&gt; as a project dependency. Add the &lt;code&gt;react-devtools&lt;/code&gt; package to your project using &lt;code&gt;npm install --save-dev react-devtools&lt;/code&gt;, then add &lt;code&gt;&quot;react-devtools&quot;: &quot;react-devtools&quot;&lt;/code&gt; to the &lt;code&gt;scripts&lt;/code&gt; section in your &lt;code&gt;package.json&lt;/code&gt;, and then run &lt;code&gt;npm run react-devtools&lt;/code&gt; from your project folder to open the DevTools.</source>
          <target state="translated">注意：如果您希望避免全局安装，则可以将 &lt;code&gt;react-devtools&lt;/code&gt; 添加为项目依赖项。使用 &lt;code&gt;npm install --save-dev react-devtools&lt;/code&gt; 将 &lt;code&gt;react-devtools&lt;/code&gt; 软件包添加到您的项目中，然后在 &lt;code&gt;package.json&lt;/code&gt; 的 &lt;code&gt;scripts&lt;/code&gt; 部分中添加 &lt;code&gt;&quot;react-devtools&quot;: &quot;react-devtools&quot;&lt;/code&gt; ，然后运行 &lt;code&gt;npm run react-devtools&lt;/code&gt; 从项目文件夹中打开DevTools。</target>
        </trans-unit>
        <trans-unit id="efa2fcb5b9c91271e248c9f59c40f585197333d1" translate="yes" xml:space="preserve">
          <source>Note: may have bugs (missing content) in some circumstances - use at your own risk.</source>
          <target state="translated">注意:在某些情况下可能会有错误(缺少内容)--使用时风险自负。</target>
        </trans-unit>
        <trans-unit id="1d2cc43a15ed133b17633216a73d60e030329218" translate="yes" xml:space="preserve">
          <source>Note: the React Developer Tools Chrome extension does not work with React Native, but you can use its standalone version instead. Read &lt;a href=&quot;debugging#react-developer-tools&quot;&gt;this section&lt;/a&gt; to learn how.</source>
          <target state="translated">注意：React Developer Tools Chrome扩展不适用于React Native，但是您可以使用其独立版本。阅读&lt;a href=&quot;debugging#react-developer-tools&quot;&gt;本节&lt;/a&gt;以了解操作方法。</target>
        </trans-unit>
        <trans-unit id="4b689a75fc9f6efac72051fd0ba983a8b4898afe" translate="yes" xml:space="preserve">
          <source>Note: this returns a new object!</source>
          <target state="translated">注意:这将返回一个新的对象</target>
        </trans-unit>
        <trans-unit id="c67072557520e945692e4a267918c358b95b51c5" translate="yes" xml:space="preserve">
          <source>Nothing is considered viewable until the user scrolls or &lt;code&gt;recordInteraction&lt;/code&gt; is called after render.</source>
          <target state="translated">直到用户滚动或在渲染后调用 &lt;code&gt;recordInteraction&lt;/code&gt; 之前，所有内容均不可视。</target>
        </trans-unit>
        <trans-unit id="ae3df712ca254a0b2cd6508bfed79071c37e3024" translate="yes" xml:space="preserve">
          <source>Notice that &lt;code&gt;{pic}&lt;/code&gt; is surrounded by braces, to embed the variable &lt;code&gt;pic&lt;/code&gt; into JSX. You can put any JavaScript expression inside braces in JSX.</source>
          <target state="translated">请注意， &lt;code&gt;{pic}&lt;/code&gt; 用括号括起来，将变量 &lt;code&gt;pic&lt;/code&gt; 嵌入到JSX中。您可以将任何JavaScript表达式放在JSX中的花括号中。</target>
        </trans-unit>
        <trans-unit id="3bb4a2baa79d5130b64250f4080d648a031d5f76" translate="yes" xml:space="preserve">
          <source>Notice that first the JS thread thinks for a bit, then you see some work done on the native modules thread, followed by an expensive traversal on the UI thread.</source>
          <target state="translated">注意,先是JS线程思考了一下,然后你会看到原生模块线程上做了一些工作,接着是UI线程上昂贵的遍历。</target>
        </trans-unit>
        <trans-unit id="6cdd4fca80be23e2f24aa89d3b7d5c674cf3af1c" translate="yes" xml:space="preserve">
          <source>Notice that the JS thread is executing basically all the time, and across frame boundaries! This app is not rendering at 60 FPS. In this case, &lt;strong&gt;the problem lies in JS&lt;/strong&gt;.</source>
          <target state="translated">请注意，JS线程基本上一直在执行并且跨越帧边界！此应用无法以60 FPS的速度渲染。在这种情况下，&lt;strong&gt;问题出在JS上&lt;/strong&gt;。</target>
        </trans-unit>
        <trans-unit id="830f5d1318d9d23e7650567e69df3c0c7f7b3b61" translate="yes" xml:space="preserve">
          <source>Notice that this method has only effect if the &lt;code&gt;geolocation.watchPosition(successCallback, errorCallback)&lt;/code&gt; method was previously invoked.</source>
          <target state="translated">请注意，仅当先前调用 &lt;code&gt;geolocation.watchPosition(successCallback, errorCallback)&lt;/code&gt; 方法时，此方法才有效。</target>
        </trans-unit>
        <trans-unit id="632c6a9f400eb5dda3e820c2979c82565bb3e411" translate="yes" xml:space="preserve">
          <source>Notice the long amount of time spent in &lt;code&gt;DrawFrame&lt;/code&gt; that crosses frame boundaries. This is time spent waiting for the GPU to drain its command buffer from the previous frame.</source>
          <target state="translated">请注意，在 &lt;code&gt;DrawFrame&lt;/code&gt; 中花费大量时间跨越框架边界。这是等待GPU从前一帧耗尽其命令缓冲区所花费的时间。</target>
        </trans-unit>
        <trans-unit id="22c5d7af46f5e728d6ada94e5243fa4596891bcb" translate="yes" xml:space="preserve">
          <source>Notify manager that an interaction has completed.</source>
          <target state="translated">通知经理,交互已完成。</target>
        </trans-unit>
        <trans-unit id="3e4042f182476b9b786142947fca1eba0d6aaef2" translate="yes" xml:space="preserve">
          <source>Notify manager that an interaction has started.</source>
          <target state="translated">通知经理,一个互动已经开始。</target>
        </trans-unit>
        <trans-unit id="e0c8460bdc844f9f649e1a85997c23f899b7b2cd" translate="yes" xml:space="preserve">
          <source>Now build and run your Android app as normal.</source>
          <target state="translated">现在,像正常情况一样构建并运行你的Android应用。</target>
        </trans-unit>
        <trans-unit id="2c6bc7ac82545574706a316dceba4a7989d86570" translate="yes" xml:space="preserve">
          <source>Now check if you are able to resolve the xip.io address, by running &lt;code&gt;nslookup&lt;/code&gt;.</source>
          <target state="translated">现在，通过运行 &lt;code&gt;nslookup&lt;/code&gt; 检查是否能够解析xip.io地址。</target>
        </trans-unit>
        <trans-unit id="3e9118152af0c58922f46fc77cccd62e25a11280" translate="yes" xml:space="preserve">
          <source>Now check that your device is properly connecting to ADB, the Android Debug Bridge, by running &lt;code&gt;adb devices&lt;/code&gt;.</source>
          <target state="translated">现在，通过运行 &lt;code&gt;adb devices&lt;/code&gt; 来检查您的设备是否已正确连接到ADB（Android调试桥）。</target>
        </trans-unit>
        <trans-unit id="2e4fe00ca048ffea184c3e64e57953a76acd11f8" translate="yes" xml:space="preserve">
          <source>Now install that version of &lt;code&gt;react-native&lt;/code&gt; in your project with &lt;code&gt;npm install --save&lt;/code&gt;:</source>
          <target state="translated">现在使用 &lt;code&gt;npm install --save&lt;/code&gt; 在您的项目中安装该版本的 &lt;code&gt;react-native&lt;/code&gt; ：</target>
        </trans-unit>
        <trans-unit id="51c8b083782766531194f177ae65bd1e175251db" translate="yes" xml:space="preserve">
          <source>Now just create a release build of your native app from within Android Studio as usual and you should be good to go!</source>
          <target state="translated">现在只需像往常一样从Android Studio中创建一个本地应用的发布版本,就可以开始了。</target>
        </trans-unit>
        <trans-unit id="990509d487a338b79869ffa3f20c4a0681e449eb" translate="yes" xml:space="preserve">
          <source>Now let's remove &lt;code&gt;SYSTEM_ALERT_WINDOW&lt;/code&gt; from the production APK only.</source>
          <target state="translated">现在， &lt;code&gt;SYSTEM_ALERT_WINDOW&lt;/code&gt; 生产APK中删除SYSTEM_ALERT_WINDOW。</target>
        </trans-unit>
        <trans-unit id="1bcccebfaeb3ff354c152f881dace9068b4f33d2" translate="yes" xml:space="preserve">
          <source>Now run &lt;code&gt;react-devtools&lt;/code&gt; from the terminal to launch the standalone DevTools app:</source>
          <target state="translated">现在从终端运行 &lt;code&gt;react-devtools&lt;/code&gt; 以启动独立的DevTools应用程序：</target>
        </trans-unit>
        <trans-unit id="28b6cbcc91ba9a78b1d411e27dbead3b9be76e76" translate="yes" xml:space="preserve">
          <source>Now that we have unbundled our code, there is overhead for calling require. require now needs to send a message over the bridge when it encounters a module it has not loaded yet. This will impact startup the most, because that is where the largest number of require calls are likely to take place while the app loads the initial module. Luckily we can configure a portion of the modules to be preloaded. In order to do this, you will need to implement some form of inline require.</source>
          <target state="translated">现在我们已经解开了我们的代码,调用require会有开销。require现在需要在遇到一个尚未加载的模块时通过桥接器发送一条消息。这对启动的影响最大,因为当应用程序加载初始模块时,大量的require调用可能发生在那里。幸运的是,我们可以将一部分模块配置为预加载。为了做到这一点,你需要实现某种形式的内联require。</target>
        </trans-unit>
        <trans-unit id="e6ec651a18098b01f754b7b7ea790221541e42d4" translate="yes" xml:space="preserve">
          <source>Now that you have successfully run the app, let's modify it.</source>
          <target state="translated">现在你已经成功运行了应用程序,让我们来修改它。</target>
        </trans-unit>
        <trans-unit id="fcebcc33bd96dd1ff46c4629f4be60f372efb893" translate="yes" xml:space="preserve">
          <source>Now that you have successfully run the app, let's modify it. Open &lt;code&gt;App.js&lt;/code&gt; in your text editor of choice and edit some lines. The application should reload automatically once you save your changes.</source>
          <target state="translated">现在您已经成功运行了应用程序，让我们对其进行修改。在您选择的文本编辑器中打开 &lt;code&gt;App.js&lt;/code&gt; 并编辑一些行。保存更改后，应用程序应自动重新加载。</target>
        </trans-unit>
        <trans-unit id="4dd65e25a3c5ddde3c3315b010edb28db9fe4903" translate="yes" xml:space="preserve">
          <source>Now that your React Native component is created via &lt;code&gt;index.js&lt;/code&gt;, you need to add that component to a new or existing &lt;code&gt;ViewController&lt;/code&gt;. The easiest path to take is to optionally create an event path to your component and then add that component to an existing &lt;code&gt;ViewController&lt;/code&gt;.</source>
          <target state="translated">现在您的React Native组件是通过 &lt;code&gt;index.js&lt;/code&gt; 创建的，您需要将该组件添加到新的或现有的 &lt;code&gt;ViewController&lt;/code&gt; 中。最简单的方法是有选择地创建组件的事件路径，然后将该组件添加到现有的 &lt;code&gt;ViewController&lt;/code&gt; 中。</target>
        </trans-unit>
        <trans-unit id="56da329a76bd8c507ba3bcb1999d7b7b9ea34fce" translate="yes" xml:space="preserve">
          <source>Now to actually disable zooming, we set the property in JS:</source>
          <target state="translated">现在为了真正的禁止缩放,我们在JS中设置属性。</target>
        </trans-unit>
        <trans-unit id="6a8e9f29866eaa88362d14014b4873a9501238d7" translate="yes" xml:space="preserve">
          <source>Now to confuse the matter a little bit, open up the developer menu in your app and toggle &lt;code&gt;Show Perf Monitor&lt;/code&gt;. You will notice that there are two different frame rates.</source>
          <target state="translated">现在，让这件事有些混乱，在您的应用程序中打开开发人员菜单，然后切换 &lt;code&gt;Show Perf Monitor&lt;/code&gt; 。您会注意到有两种不同的帧速率。</target>
        </trans-unit>
        <trans-unit id="aa4ec02a1ce2532267b78b9a1fcb5be97a7af35f" translate="yes" xml:space="preserve">
          <source>Now we have a nicely documented wrapper component that is easy to work with. Note that we changed the second argument to &lt;code&gt;requireNativeComponent&lt;/code&gt; from &lt;code&gt;null&lt;/code&gt; to the new &lt;code&gt;MapView&lt;/code&gt; wrapper component. This allows the infrastructure to verify that the propTypes match the native props to reduce the chances of mismatches between the ObjC and JS code.</source>
          <target state="translated">现在，我们有了一个文档齐全且易于使用的包装器组件。请注意，我们将第二个参数 &lt;code&gt;requireNativeComponent&lt;/code&gt; 从 &lt;code&gt;null&lt;/code&gt; 更改为新的 &lt;code&gt;MapView&lt;/code&gt; 包装器组件。这使基础结构可以验证propTypes是否与本机props相匹配，以减少ObjC和JS代码之间不匹配的机会。</target>
        </trans-unit>
        <trans-unit id="cb02592f65ade27d66bfc3292ca464b259c1fd3d" translate="yes" xml:space="preserve">
          <source>Now we will actually modify the native Android application to integrate React Native.</source>
          <target state="translated">现在,我们将实际修改原生Android应用以整合React Native。</target>
        </trans-unit>
        <trans-unit id="32f298f78ac42aa4fb347d891ac3f27ef5dcaeb8" translate="yes" xml:space="preserve">
          <source>Now we will actually modify the native iOS application to integrate React Native. For our 2048 sample app, we will add a &quot;High Score&quot; screen in React Native.</source>
          <target state="translated">现在我们将实际修改原生iOS应用,以整合React Native。对于我们的2048示例应用,我们将在React Native中添加一个 &quot;高分 &quot;屏幕。</target>
        </trans-unit>
        <trans-unit id="8a13d9b29bbc375ec3d2b8f5d400c7cbc5ec379c" translate="yes" xml:space="preserve">
          <source>Now what?</source>
          <target state="translated">现在怎么办?</target>
        </trans-unit>
        <trans-unit id="c8d0a81afe414f9bae1eac7df36cc58b4d4ff00c" translate="yes" xml:space="preserve">
          <source>Now you can listen to &lt;code&gt;onActivityResult&lt;/code&gt; by implementing the following method:</source>
          <target state="translated">现在，您可以通过实现以下方法来监听 &lt;code&gt;onActivityResult&lt;/code&gt; ：</target>
        </trans-unit>
        <trans-unit id="81f3e19d63aac30522b1000e5f429ee97f7bcf76" translate="yes" xml:space="preserve">
          <source>Now you can listen to the activity's LifeCycle events by implementing the following methods:</source>
          <target state="translated">现在你可以通过实现以下方法来监听活动的LifeCycle事件。</target>
        </trans-unit>
        <trans-unit id="2dd8cb29b5b7ceb580198971d369e19e63cf6ff4" translate="yes" xml:space="preserve">
          <source>Now you can make your text beautiful. The next step in becoming a style master is to &lt;a href=&quot;height-and-width&quot;&gt;learn how to control component size&lt;/a&gt;.</source>
          <target state="translated">现在，您可以使文字漂亮。成为样式大师的下一步是&lt;a href=&quot;height-and-width&quot;&gt;学习如何控制组件大小&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="e3e17539807e9a1c7942ed46322b687a25c31e0e" translate="yes" xml:space="preserve">
          <source>Now your activity is ready to run some JavaScript code.</source>
          <target state="translated">现在你的活动已经准备好运行一些JavaScript代码了。</target>
        </trans-unit>
        <trans-unit id="31049deb1a4a33c98ad70e8fd8e4edc76a5d3d62" translate="yes" xml:space="preserve">
          <source>Now, from your JavaScript file you can call the method like this:</source>
          <target state="translated">现在,在你的JavaScript文件中,你可以像这样调用该方法。</target>
        </trans-unit>
        <trans-unit id="5d414b5bf01e7f666189a662ff0c4c00d525ab2f" translate="yes" xml:space="preserve">
          <source>Now, from your other JavaScript file you can call the method like this:</source>
          <target state="translated">现在,在你的其他JavaScript文件中,你可以像这样调用该方法。</target>
        </trans-unit>
        <trans-unit id="a75e5b7b8efaf0ead9fa1f8c98efb61742d7be4f" translate="yes" xml:space="preserve">
          <source>Now, whenever you &lt;a href=&quot;https://developer.android.com/reference/android/content/Context.html#startService(android.content.Intent)&quot;&gt;start your service&lt;/a&gt;, e.g. as a periodic task or in response to some system event / broadcast, JS will spin up, run your task, then spin down.</source>
          <target state="translated">现在，无论何时&lt;a href=&quot;https://developer.android.com/reference/android/content/Context.html#startService(android.content.Intent)&quot;&gt;启动服务&lt;/a&gt;（例如，作为定期任务或响应某些系统事件/广播），JS都会启动，运行任务，然后启动。</target>
        </trans-unit>
        <trans-unit id="b7baa1d40c4ea29afc9098732bffee2a861a6c44" translate="yes" xml:space="preserve">
          <source>Number</source>
          <target state="translated">Number</target>
        </trans-unit>
        <trans-unit id="8588b5288fd0fbcce9f2f983554da7140ecf12d4" translate="yes" xml:space="preserve">
          <source>Number of rows to render per event loop. Note: if your 'rows' are actually cells, i.e. they don't span the full width of your view (as in the ListViewGridLayoutExample), you should set the pageSize to be a multiple of the number of cells per row, otherwise you're likely to see gaps at the edge of the ListView as new pages are loaded.</source>
          <target state="translated">每个事件循环要渲染的行数。注意:如果你的 &quot;行 &quot;实际上是单元格,即它们没有跨越视图的整个宽度(如ListViewGridLayoutExample),你应该将pageSize设置为每行单元格数的倍数,否则当加载新页面时,你很可能会在ListView的边缘看到空白。</target>
        </trans-unit>
        <trans-unit id="c2d4479d565b42064670f7e0abe2271fda4b6bb4" translate="yes" xml:space="preserve">
          <source>Number that controls whether the initial scale percentage of the view. 50 is 50%, 100 is 100%, etc. Used only in Android.</source>
          <target state="translated">数值,控制是否为视图的初始比例百分比。50为50%,100为100%等。仅在Android中使用。</target>
        </trans-unit>
        <trans-unit id="2883f191bc5ebfdc16c0813eff659b35363ea69b" translate="yes" xml:space="preserve">
          <source>Object</source>
          <target state="translated">Object</target>
        </trans-unit>
        <trans-unit id="e7cc4f11c6b6e7847f644e41d43a5048b2e954f8" translate="yes" xml:space="preserve">
          <source>Object with a &lt;code&gt;title&lt;/code&gt; and &lt;code&gt;message&lt;/code&gt;.</source>
          <target state="translated">带有 &lt;code&gt;title&lt;/code&gt; 和 &lt;code&gt;message&lt;/code&gt; 对象。</target>
        </trans-unit>
        <trans-unit id="1d51672345557c0f022fd737f9b7489d16b30459" translate="yes" xml:space="preserve">
          <source>Object.assign</source>
          <target state="translated">Object.assign</target>
        </trans-unit>
        <trans-unit id="b613e0c1877960091b857bf50e2e74ccf6f98f72" translate="yes" xml:space="preserve">
          <source>Object.keys(ImageResizeMode)</source>
          <target state="translated">Object.keys(ImageResizeMode)</target>
        </trans-unit>
        <trans-unit id="0b27f83babcef0eca7b16fce1b0fe3c448dcbf21" translate="yes" xml:space="preserve">
          <source>Object.{&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/entries&quot;&gt;entries&lt;/a&gt;, &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/values&quot;&gt;values&lt;/a&gt;}</source>
          <target state="translated">Object。{ &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/entries&quot;&gt;条目&lt;/a&gt;，&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/values&quot;&gt;值&lt;/a&gt; }</target>
        </trans-unit>
        <trans-unit id="9cf4af30df052d80876381f9ec0e05811ecd3d08" translate="yes" xml:space="preserve">
          <source>Objective-C</source>
          <target state="translated">Objective-C</target>
        </trans-unit>
        <trans-unit id="8dc738e59439cd67f4628f5ed2751d413bdae623" translate="yes" xml:space="preserve">
          <source>Objective-C doesn't provide any guarantees about the types of values in these structures. Your native module might expect an array of strings, but if JavaScript calls your method with an array containing numbers and strings, you'll get an &lt;code&gt;NSArray&lt;/code&gt; containing a mix of &lt;code&gt;NSNumber&lt;/code&gt; and &lt;code&gt;NSString&lt;/code&gt;. For arrays, &lt;code&gt;RCTConvert&lt;/code&gt; provides some typed collections you can use in your method declaration, such as &lt;code&gt;NSStringArray&lt;/code&gt;, or &lt;code&gt;UIColorArray&lt;/code&gt;. For maps, it is the developer's responsibility to check the value types individually by manually calling &lt;code&gt;RCTConvert&lt;/code&gt; helper methods.</source>
          <target state="translated">Objective-C对这些结构中的值类型不提供任何保证。你的本机模块所期望的字符串数组，但如果JavaScript和包含数字和字符串数组调用你的方法，你会得到一个 &lt;code&gt;NSArray&lt;/code&gt; 中含有的混合 &lt;code&gt;NSNumber&lt;/code&gt; 和 &lt;code&gt;NSString&lt;/code&gt; 的。对于数组， &lt;code&gt;RCTConvert&lt;/code&gt; 提供了一些可以在方法声明中使用的类型化集合，例如 &lt;code&gt;NSStringArray&lt;/code&gt; 或 &lt;code&gt;UIColorArray&lt;/code&gt; 。对于地图，开发人员有责任通过手动调用 &lt;code&gt;RCTConvert&lt;/code&gt; 帮助程序方法来单独检查值类型。</target>
        </trans-unit>
        <trans-unit id="6bf646a3e684ba005d4d498c07d65eeac37b6498" translate="yes" xml:space="preserve">
          <source>Off-thread Decoding</source>
          <target state="translated">离线程解码</target>
        </trans-unit>
        <trans-unit id="4650b7c8444ff616b94752350d582c86c4e2f6c2" translate="yes" xml:space="preserve">
          <source>Ok, this is more complicated than the simple &lt;code&gt;BOOL&lt;/code&gt; case we had before. Now we have a &lt;code&gt;MKCoordinateRegion&lt;/code&gt; type that needs a conversion function, and we have custom code so that the view will animate when we set the region from JS. Within the function body that we provide, &lt;code&gt;json&lt;/code&gt; refers to the raw value that has been passed from JS. There is also a &lt;code&gt;view&lt;/code&gt; variable which gives us access to the manager's view instance, and a &lt;code&gt;defaultView&lt;/code&gt; that we use to reset the property back to the default value if JS sends us a null sentinel.</source>
          <target state="translated">好的，这比我们以前的简单 &lt;code&gt;BOOL&lt;/code&gt; 情况复杂。现在，我们有了一个需要转换函数的 &lt;code&gt;MKCoordinateRegion&lt;/code&gt; 类型，并且有了自定义代码，因此当我们从JS设置区域时，该视图将具有动画效果。在我们提供的函数体内， &lt;code&gt;json&lt;/code&gt; 表示从JS传递过来的原始值。还有一个 &lt;code&gt;view&lt;/code&gt; 变量，使我们可以访问管理器的view实例，如果JS向我们发送空的哨兵，则可以使用 &lt;code&gt;defaultView&lt;/code&gt; 将属性重置为默认值。</target>
        </trans-unit>
        <trans-unit id="fa893d0ef3e849a46f08cda47e5f03836f7266c6" translate="yes" xml:space="preserve">
          <source>On Android 5.0+ devices connected via USB, you can use the &lt;a href=&quot;http://developer.android.com/tools/help/adb.html&quot;&gt;&lt;code&gt;adb&lt;/code&gt; command line tool&lt;/a&gt; to setup port forwarding from the device to your computer:</source>
          <target state="translated">在通过USB连接的Android 5.0+设备上，您可以使用&lt;a href=&quot;http://developer.android.com/tools/help/adb.html&quot;&gt; &lt;code&gt;adb&lt;/code&gt; 命令行工具&lt;/a&gt;来设置从设备到计算机的端口转发：</target>
        </trans-unit>
        <trans-unit id="e2510c84d6d92c12ca7b5fc380e14f233210fe47" translate="yes" xml:space="preserve">
          <source>On Android 5.0+ devices connected via USB, you can use the &lt;a href=&quot;https://developer.android.com/tools/help/adb.html&quot;&gt;&lt;code&gt;adb&lt;/code&gt; command line tool&lt;/a&gt; to setup port forwarding from the device to your computer:</source>
          <target state="translated">在通过USB连接的Android 5.0+设备上，您可以使用&lt;a href=&quot;https://developer.android.com/tools/help/adb.html&quot;&gt; &lt;code&gt;adb&lt;/code&gt; 命令行工具&lt;/a&gt;来设置从设备到计算机的端口转发：</target>
        </trans-unit>
        <trans-unit id="daf4ce205fff2ae880949170dac864f6209b6ee3" translate="yes" xml:space="preserve">
          <source>On Android at most three buttons can be specified. Android has a concept of a neutral, negative and a positive button:</source>
          <target state="translated">在Android上最多可以指定三个按钮。安卓系统有一个中性、负面和正面按钮的概念。</target>
        </trans-unit>
        <trans-unit id="d041e910daf2f3b4df56376e655aadad63763c69" translate="yes" xml:space="preserve">
          <source>On Android enable unbundling by editing your android/app/build.gradle file. Before the line &lt;code&gt;apply from: &quot;../../node_modules/react-native/react.gradle&quot;&lt;/code&gt; add or amend the &lt;code&gt;project.ext.react&lt;/code&gt; block:</source>
          <target state="translated">在Android上，通过编辑android / app / build.gradle文件启用捆绑。在以下行之前 &lt;code&gt;apply from: &quot;../../node_modules/react-native/react.gradle&quot;&lt;/code&gt; 添加或修改 &lt;code&gt;project.ext.react&lt;/code&gt; 块：</target>
        </trans-unit>
        <trans-unit id="f40beb3271c796251b39cc9db0ebda4dcb3e116d" translate="yes" xml:space="preserve">
          <source>On Android, &lt;code&gt;accessible={true}&lt;/code&gt; property for a react-native View will be translated into native &lt;code&gt;focusable={true}&lt;/code&gt;.</source>
          <target state="translated">在Android上，本机View的 &lt;code&gt;accessible={true}&lt;/code&gt; 属性将转换为native &lt;code&gt;focusable={true}&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="5ea512c65c3310827a14fce6a01de718dd6478ed" translate="yes" xml:space="preserve">
          <source>On Android, specifies how to display the selection items when the user taps on the picker:</source>
          <target state="translated">在Android上,指定当用户点击选择器时如何显示选择项。</target>
        </trans-unit>
        <trans-unit id="e1fc5bc0143315188ae20dd3ea3b36a84d4e1ec2" translate="yes" xml:space="preserve">
          <source>On Android, the &lt;code&gt;Platform&lt;/code&gt; module can also be used to detect the version of the Android Platform in which the app is running:</source>
          <target state="translated">在Android上，&amp;ldquo; &lt;code&gt;Platform&lt;/code&gt; 模块还可用于检测运行该应用的Android平台的版本：</target>
        </trans-unit>
        <trans-unit id="3753c2c3b3363f89d7a731d1d0bf31cc45b88761" translate="yes" xml:space="preserve">
          <source>On Android, the tag must be a local image or video URI, such as &lt;code&gt;&quot;file:///sdcard/img.png&quot;&lt;/code&gt;.</source>
          <target state="translated">在Android上，标签必须是本地图像或视频URI，例如 &lt;code&gt;&quot;file:///sdcard/img.png&quot;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="ef7ecb6eefed448da2f20a708080a8a57e5dd1f7" translate="yes" xml:space="preserve">
          <source>On Android, this is useful for animations and interactions that only modify opacity, rotation, translation, and/or scale: in those cases, the view doesn't have to be redrawn and display lists don't need to be re-executed. The texture can just be re-used and re-composited with different parameters. The downside is that this can use up limited video memory, so this prop should be set back to false at the end of the interaction/animation.</source>
          <target state="translated">在Android上,这对于只修改不透明度、旋转、平移和/或比例的动画和交互非常有用:在这些情况下,视图不必重新绘制,显示列表也不必重新执行。纹理可以用不同的参数重新使用和重新组合就可以了。缺点是,这可能会占用有限的视频内存,所以这个道具应该在交互/动画结束时设置为false。</target>
        </trans-unit>
        <trans-unit id="49a15724fa343a6aa664fd937fe9cf3ccb8170ea" translate="yes" xml:space="preserve">
          <source>On Mac if you not sure where is your jdk bin folder is then perform the following command to find it, &lt;code&gt;$ /usr/libexec/java_home&lt;/code&gt; it will output the directroy of jdk which looks like this, &lt;code&gt;/Library/Java/JavaVirtualMachines/jdk1.8.0_161.jdk/Contents/Home&lt;/code&gt; then navigate to that directory by the following command, &lt;code&gt;$ cd /Library/Java/JavaVirtualMachines/jdk1.8.0_161.jdk/Contents/Home/&lt;/code&gt; Now you can perform the keytool command with sudo permission as shown below, &lt;code&gt;$ sudo keytool -genkey -v -keystore my-release-key.keystore -alias my-key-alias -keyalg RSA -keysize 2048 -validity 10000&lt;/code&gt;&lt;em&gt;Note: Remember to keep your keystore file private and never commit it to version control.&lt;/em&gt;</source>
          <target state="translated">在Mac上，如果不确定jdk bin文件夹在哪里，请执行以下命令 &lt;code&gt;$ /usr/libexec/java_home&lt;/code&gt; ，它将输出jdk的目录，如 &lt;code&gt;/Library/Java/JavaVirtualMachines/jdk1.8.0_161.jdk/Contents/Home&lt;/code&gt; 然后通过以下命令导航到该目录： &lt;code&gt;$ cd /Library/Java/JavaVirtualMachines/jdk1.8.0_161.jdk/Contents/Home/&lt;/code&gt; 现在，您可以执行具有sudo权限的keytool命令，如图所示在下面， &lt;code&gt;$ sudo keytool -genkey -v -keystore my-release-key.keystore -alias my-key-alias -keyalg RSA -keysize 2048 -validity 10000&lt;/code&gt; &lt;em&gt;注意：切记将密钥库文件保持私有状态，切勿将其提交至版本控制。&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="1ecd47cd8aadcbe6e19ca9c1778d44a060dacc20" translate="yes" xml:space="preserve">
          <source>On Windows you can find the process using port 8081 using &lt;a href=&quot;https://stackoverflow.com/questions/48198/how-can-you-find-out-which-process-is-listening-on-a-port-on-windows&quot;&gt;Resource Monitor&lt;/a&gt; and stop it using Task Manager.</source>
          <target state="translated">在Windows上，您可以使用&lt;a href=&quot;https://stackoverflow.com/questions/48198/how-can-you-find-out-which-process-is-listening-on-a-port-on-windows&quot;&gt;资源监视器&lt;/a&gt;使用端口8081查找该进程，并使用任务管理器将其停止。</target>
        </trans-unit>
        <trans-unit id="7fb8fa89f66732c5469464e36c50ebd76dc6e414" translate="yes" xml:space="preserve">
          <source>On Windows, you might need to restart the packager if you add new images to your project.</source>
          <target state="translated">在Windows上,如果你向你的项目添加新的图像,你可能需要重新启动打包器。</target>
        </trans-unit>
        <trans-unit id="4418455a46b8fe7f0322b1c272dedfdfd03ae9f3" translate="yes" xml:space="preserve">
          <source>On a node with a measure function aspect ratio works as though the measure function measures the flex basis</source>
          <target state="translated">在一个具有测量函数的节点上,纵横比的工作原理就像测量函数测量柔性基础一样。</target>
        </trans-unit>
        <trans-unit id="633c063def9deefbb853ff87983f194f0b4635f2" translate="yes" xml:space="preserve">
          <source>On a node with a set flex basis aspect ratio controls the size of the node in the cross axis if unset</source>
          <target state="translated">在一个节点上,如果未设置弹性基础纵横比,则控制节点在横轴上的大小。</target>
        </trans-unit>
        <trans-unit id="edb14111a94a3f48ed9916a12a74bf14b2178cda" translate="yes" xml:space="preserve">
          <source>On a node with a set width/height aspect ratio control the size of the unset dimension</source>
          <target state="translated">在一个设置了高宽比的节点上,控制未设置的尺寸。</target>
        </trans-unit>
        <trans-unit id="1b088ad8bc3cdfffcf41e0294b135f48d3e44085" translate="yes" xml:space="preserve">
          <source>On a node with flex grow/shrink aspect ratio controls the size of the node in the cross axis if unset</source>
          <target state="translated">在一个节点上,如果取消设置,则用flex grow/shrink纵横比控制节点在横轴上的大小。</target>
        </trans-unit>
        <trans-unit id="cf738dc73871a6ba5c4db2961503318dc1698793" translate="yes" xml:space="preserve">
          <source>On devices before SDK version 23, the permissions are automatically granted if they appear in the manifest, so &lt;code&gt;check&lt;/code&gt; and &lt;code&gt;request&lt;/code&gt; should always resolve to &lt;code&gt;PermissionsAndroid.RESULTS.GRANTED&lt;/code&gt;.</source>
          <target state="translated">在SDK版本23之前的设备上，如果权限出现在清单中，则会自动授予这些权限，因此 &lt;code&gt;check&lt;/code&gt; 和 &lt;code&gt;request&lt;/code&gt; 应始终解析为 &lt;code&gt;PermissionsAndroid.RESULTS.GRANTED&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="27c7916f2665a916e4de70e6ee398ee36fe97fb4" translate="yes" xml:space="preserve">
          <source>On iOS devices, open the file &lt;a href=&quot;https://github.com/facebook/react-native/blob/master/Libraries/WebSocket/RCTWebSocketExecutor.m&quot;&gt;&lt;code&gt;RCTWebSocketExecutor.m&lt;/code&gt;&lt;/a&gt; and change &quot;localhost&quot; to the IP address of your computer, then select &quot;Debug JS Remotely&quot; from the Developer Menu.</source>
          <target state="translated">在iOS设备上，打开文件&lt;a href=&quot;https://github.com/facebook/react-native/blob/master/Libraries/WebSocket/RCTWebSocketExecutor.m&quot;&gt; &lt;code&gt;RCTWebSocketExecutor.m&lt;/code&gt; &lt;/a&gt;，并将&amp;ldquo; localhost&amp;rdquo;更改为计算机的IP地址，然后从&amp;ldquo;开发人员&amp;rdquo;菜单中选择&amp;ldquo;远程调试JS&amp;rdquo;。</target>
        </trans-unit>
        <trans-unit id="9cead5883f80178b2439980dc7ee9f4ad151ec58" translate="yes" xml:space="preserve">
          <source>On iOS unbundling will create a single indexed file that react native will load one module at a time. On Android, by default it will create a set of files for each module. You can force Android to create a single file, like iOS, but using multiple files can be more performant and requires less memory.</source>
          <target state="translated">在iOS上,unbundling会创建一个单一的索引文件,react native会一次加载一个模块。在Android上,默认情况下,它会为每个模块创建一组文件。你可以像iOS一样强制Android创建一个单一的文件,但是使用多个文件可以提高性能,并且需要更少的内存。</target>
        </trans-unit>
        <trans-unit id="878af4b6749aaaf99555c47b3b1cf71c2d411527" translate="yes" xml:space="preserve">
          <source>On iOS you can specify any number of buttons. Each button can optionally specify a style, which is one of 'default', 'cancel' or 'destructive'.</source>
          <target state="translated">在iOS上,你可以指定任意数量的按钮。每个按钮都可以选择指定一个样式,可以是 &quot;默认&quot;、&quot;取消 &quot;或 &quot;破坏性 &quot;中的一种。</target>
        </trans-unit>
        <trans-unit id="64f44f511a51de48e4140adbdfd311743f415191" translate="yes" xml:space="preserve">
          <source>On iOS, &lt;code&gt;AsyncStorage&lt;/code&gt; is backed by native code that stores small values in a serialized dictionary and larger values in separate files. On Android, &lt;code&gt;AsyncStorage&lt;/code&gt; will use either &lt;a href=&quot;http://rocksdb.org/&quot;&gt;RocksDB&lt;/a&gt; or SQLite based on what is available.</source>
          <target state="translated">在iOS上， &lt;code&gt;AsyncStorage&lt;/code&gt; 由本机代码支持，本机代码将较小的值存储在序列化的字典中，将较大的值存储在单独的文件中。在Android上， &lt;code&gt;AsyncStorage&lt;/code&gt; 将根据可用资源使用&lt;a href=&quot;http://rocksdb.org/&quot;&gt;RocksDB&lt;/a&gt;或SQLite。</target>
        </trans-unit>
        <trans-unit id="483598f501856299a3a56c8918c8577b77229d15" translate="yes" xml:space="preserve">
          <source>On iOS, &lt;code&gt;zIndex&lt;/code&gt; may require &lt;code&gt;View&lt;/code&gt;s to be siblings of each other for it to work as expected.</source>
          <target state="translated">在iOS上， &lt;code&gt;zIndex&lt;/code&gt; 可能要求 &lt;code&gt;View&lt;/code&gt; 彼此相同，以使其按预期工作。</target>
        </trans-unit>
        <trans-unit id="fc385a5ce7ddd584a623ea8e9998b125474add02" translate="yes" xml:space="preserve">
          <source>On iOS, each time you adjust the width or height of an Image component it is re-cropped and scaled from the original image. This can be very expensive, especially for large images. Instead, use the &lt;code&gt;transform: [{scale}]&lt;/code&gt; style property to animate the size. An example of when you might do this is when you tap an image and zoom it in to full screen.</source>
          <target state="translated">在iOS上，每次您调整Image组件的宽度或高度时，都会从原始图像重新裁剪和缩放它。这可能非常昂贵，尤其是对于大图像。而是使用 &lt;code&gt;transform: [{scale}]&lt;/code&gt; 样式属性来设置大小的动画。例如，当您点击图像并将其放大到全屏时，便可以执行此操作。</target>
        </trans-unit>
        <trans-unit id="01e7520cc85651f6fcac907dc898ec8c39021264" translate="yes" xml:space="preserve">
          <source>On iOS, in the General tab and Deployment Info section of Xcode enable the Device Orientation you want to support (ensure you have selected iPhone from the Devices menu when making the changes). For Android, open the AndroidManifest.xml file and within the activity element add &lt;code&gt;'android:screenOrientation=&quot;portrait&quot;'&lt;/code&gt; to lock to portrait or &lt;code&gt;'android:screenOrientation=&quot;landscape&quot;'&lt;/code&gt; to lock to landscape.</source>
          <target state="translated">在iOS上，在Xcode的&amp;ldquo;常规&amp;rdquo;选项卡和&amp;ldquo;部署信息&amp;rdquo;部分中，启用要支持的设备方向（确保在进行更改时已从&amp;ldquo;设备&amp;rdquo;菜单中选择了iPhone）。对于Android，打开AndroidManifest.xml文件，然后在activity元素中添加 &lt;code&gt;'android:screenOrientation=&quot;portrait&quot;'&lt;/code&gt; 锁定为纵向或 &lt;code&gt;'android:screenOrientation=&quot;landscape&quot;'&lt;/code&gt; 锁定为横向。</target>
        </trans-unit>
        <trans-unit id="800c06becdfc67c238462a7d4952a228d83beca6" translate="yes" xml:space="preserve">
          <source>On iOS, the &lt;code&gt;CameraRoll&lt;/code&gt; API requires the &lt;code&gt;RCTCameraRoll&lt;/code&gt; library to be linked. You can refer to &lt;a href=&quot;linking-libraries-ios&quot;&gt;Linking Libraries (iOS)&lt;/a&gt; to learn more.</source>
          <target state="translated">在iOS上， &lt;code&gt;CameraRoll&lt;/code&gt; API需要链接 &lt;code&gt;RCTCameraRoll&lt;/code&gt; 库。您可以参考&lt;a href=&quot;linking-libraries-ios&quot;&gt;链接库（iOS）&lt;/a&gt;了解更多信息。</target>
        </trans-unit>
        <trans-unit id="eb03b8755a2d5976083e52b28bf54055ddb77664" translate="yes" xml:space="preserve">
          <source>On iOS, the &lt;code&gt;Version&lt;/code&gt; is a result of &lt;code&gt;-[UIDevice systemVersion]&lt;/code&gt;, which is a string with the current version of the operating system. An example of the system version is &quot;10.3&quot;. For example, to detect the major version number on iOS:</source>
          <target state="translated">在iOS上， &lt;code&gt;Version&lt;/code&gt; 是 &lt;code&gt;-[UIDevice systemVersion]&lt;/code&gt; 的结果，它是操作系统当前版本的字符串。系统版本的示例是&amp;ldquo; 10.3&amp;rdquo;。例如，要在iOS上检测主要版本号：</target>
        </trans-unit>
        <trans-unit id="601cd82e13af6fb4a741167a8abe609a6ba97a34" translate="yes" xml:space="preserve">
          <source>On iOS, the tag can be any image URI (including local, remote asset-library and base64 data URIs) or a local video file URI (remote or data URIs are not supported for saving video at this time).</source>
          <target state="translated">在iOS上,标签可以是任何图像URI(包括本地、远程资产库和base64数据URI)或本地视频文件URI(暂不支持远程或数据URI保存视频)。</target>
        </trans-unit>
        <trans-unit id="7af03ed36799cc407f7cefa87fdec97c658055e5" translate="yes" xml:space="preserve">
          <source>On iOS, this is useful for animations and interactions that do not modify this component's dimensions nor its children; for example, when translating the position of a static view, rasterization allows the renderer to reuse a cached bitmap of a static view and quickly composite it during each frame.</source>
          <target state="translated">在iOS上,这对于那些既不修改这个组件的尺寸,也不修改其子代的动画和交互是很有用的;例如,当转换静态视图的位置时,栅格化允许渲染器重用静态视图的缓存位图,并在每一帧中快速合成它。</target>
        </trans-unit>
        <trans-unit id="b5cdf50d2f9b3540e22c04a119667836e6860e7a" translate="yes" xml:space="preserve">
          <source>On iOS, you can nest views within your Text component. Here's an example:</source>
          <target state="translated">在iOS上,你可以在Text组件中嵌套视图。下面是一个例子。</target>
        </trans-unit>
        <trans-unit id="09d54ef8557cc8a79cdb9d125ffede002c47147b" translate="yes" xml:space="preserve">
          <source>On mobile phones it's hard to be very precise when pressing buttons. Make sure all interactive elements are 44x44 or larger. One way to do this is to leave enough space for the element, &lt;code&gt;padding&lt;/code&gt;, &lt;code&gt;minWidth&lt;/code&gt; and &lt;code&gt;minHeight&lt;/code&gt; style values can be useful for that. Alternatively, you can use &lt;a href=&quot;touchablewithoutfeedback#hitslop&quot;&gt;&lt;code&gt;hitSlop&lt;/code&gt; prop&lt;/a&gt; to increase interactive area without affecting the layout. Here's a demo:</source>
          <target state="translated">在手机上，按下按钮时很难精确。确保所有互动元素均为44x44或更大。一种方法是为元素保留足够的空间， &lt;code&gt;padding&lt;/code&gt; ， &lt;code&gt;minWidth&lt;/code&gt; 和 &lt;code&gt;minHeight&lt;/code&gt; 样式值对此很有用。或者，您可以使用&lt;a href=&quot;touchablewithoutfeedback#hitslop&quot;&gt; &lt;code&gt;hitSlop&lt;/code&gt; 道具&lt;/a&gt;来增加交互式区域，而不影响布局。这是一个演示：</target>
        </trans-unit>
        <trans-unit id="19683774cbe45aaa00899fab0e3dea2dc22fef88" translate="yes" xml:space="preserve">
          <source>On the infrastructure side, the reason is that it allows us to attach metadata to this object. For example if you are using &lt;code&gt;require('./my-icon.png')&lt;/code&gt;, then we add information about its actual location and size (don't rely on this fact, it might change in the future!). This is also future proofing, for example we may want to support sprites at some point, instead of outputting &lt;code&gt;{uri: ...}&lt;/code&gt;, we can output &lt;code&gt;{uri: ..., crop: {left: 10, top: 50, width: 20, height: 40}}&lt;/code&gt; and transparently support spriting on all the existing call sites.</source>
          <target state="translated">在基础架构方面，原因是它允许我们将元数据附加到该对象。例如，如果您使用 &lt;code&gt;require('./my-icon.png')&lt;/code&gt; ，那么我们将添加有关其实际位置和大小的信息（不要依赖这个事实，将来可能会改变！）。这也是将来的证明，例如，我们可能希望在某些时候支持sprites，而不是输出 &lt;code&gt;{uri: ...}&lt;/code&gt; ，而可以输出 &lt;code&gt;{uri: ..., crop: {left: 10, top: 50, width: 20, height: 40}}&lt;/code&gt; 并透明地支持在所有现有呼叫站点上进行拼写。</target>
        </trans-unit>
        <trans-unit id="e1bc6e232de7728a905515c8accd95d54837d70c" translate="yes" xml:space="preserve">
          <source>On the left side, you'll see a set of threads which correspond to the timeline rows on the right. There are a few threads we care about for our purposes: the UI thread (which has your package name or the name UI Thread), &lt;code&gt;mqt_js&lt;/code&gt;, and &lt;code&gt;mqt_native_modules&lt;/code&gt;. If you're running on Android 5+, we also care about the Render Thread.</source>
          <target state="translated">在左侧，您将看到一组与右侧时间线行相对应的线程。我们关心一些线程以供我们使用：UI线程（具有您的程序包名称或名称UI线程）， &lt;code&gt;mqt_js&lt;/code&gt; 和 &lt;code&gt;mqt_native_modules&lt;/code&gt; 。如果您在Android 5+上运行，我们也会关注渲染线程。</target>
        </trans-unit>
        <trans-unit id="28fa19745a7512e90cafc29e2779852c5d0c853c" translate="yes" xml:space="preserve">
          <source>On the other hand, this has a performance downside. Imagine you have a very long list of items you want to display, maybe several screens worth of content. Creating JS components and native views for everything all at once, much of which may not even be shown, will contribute to slow rendering and increased memory usage.</source>
          <target state="translated">另一方面,这有一个性能上的缺点。想象一下,你有一个非常长的项目列表,你想显示的内容,可能有好几个屏幕的内容。一次性为所有内容创建JS组件和原生视图,其中很多内容可能根本就没有显示出来,这将导致渲染速度慢,内存使用量增加。</target>
        </trans-unit>
        <trans-unit id="9e2fa8c13b471573c501f594b1762d155d5ae232" translate="yes" xml:space="preserve">
          <source>On the user side, this lets you annotate the object with useful attributes such as the dimension of the image in order to compute the size it's going to be displayed in. Feel free to use it as your data structure to store more information about your image.</source>
          <target state="translated">在用户方面,这让你可以用有用的属性来注释对象,比如图像的尺寸,以便计算出它要显示的尺寸。你可以随意使用它作为你的数据结构来存储更多关于你的图像的信息。</target>
        </trans-unit>
        <trans-unit id="b67effc4df15fed33944764e63303ff24823ae06" translate="yes" xml:space="preserve">
          <source>On the web, the usual way to set a font family and size for the entire document is to take advantage of inherited CSS properties like so:</source>
          <target state="translated">在网络上,通常设置整个文档的字体族和大小的方法是利用继承的CSS属性,比如这样。</target>
        </trans-unit>
        <trans-unit id="820dfbae38dc6f651e598e8deb2156dd02dc33f3" translate="yes" xml:space="preserve">
          <source>Once setup has finalized and you're presented with the Welcome screen, proceed to the next step.</source>
          <target state="translated">一旦设置完成,您将看到欢迎屏幕,继续下一步。</target>
        </trans-unit>
        <trans-unit id="6b2fae18d31e3b5e790d236bceb099a2178c4d78" translate="yes" xml:space="preserve">
          <source>Once the trace starts collecting, perform the animation or interaction you care about. At the end of the trace, systrace will give you a link to the trace which you can open in your browser.</source>
          <target state="translated">一旦跟踪开始收集,执行你关心的动画或交互。在跟踪结束后,systrace会给你一个链接,你可以在浏览器中打开该跟踪。</target>
        </trans-unit>
        <trans-unit id="63fc1a3a418eeb2936f0091dfb1e76b0fa6fcc61" translate="yes" xml:space="preserve">
          <source>Once you have an emulator running, to run the integration tests:</source>
          <target state="translated">一旦你有一个模拟器运行,运行集成测试。</target>
        </trans-unit>
        <trans-unit id="5a7e1172e055756e0ccc13432a28988634a3ee0b" translate="yes" xml:space="preserve">
          <source>Once you have your React Native project initialized, you can run &lt;code&gt;react-native run-ios&lt;/code&gt; inside the newly created project directory. If everything is set up correctly, you should see your new app running in the iOS Simulator shortly.</source>
          <target state="translated">初始化React Native项目后，您可以在新创建的项目目录中运行 &lt;code&gt;react-native run-ios&lt;/code&gt; 。如果一切设置正确，您很快就会在iOS Simulator中看到新应用程序正在运行。</target>
        </trans-unit>
        <trans-unit id="9c214897f7c5341fbc508a6b3aba0dd7aab37d72" translate="yes" xml:space="preserve">
          <source>Once you open a pull request, this is how you can expect maintainers to review it:</source>
          <target state="translated">一旦你打开了一个拉取请求,这就是你可以期待维护者审查它的方式。</target>
        </trans-unit>
        <trans-unit id="8e4d52fc5ce3ba8e2449d641b68706b66af22441" translate="yes" xml:space="preserve">
          <source>Once you publish the app on the Play Store, you will need to republish your app under a different package name (losing all downloads and ratings) if you want to change the signing key at any point. So backup your keystore and don't forget the passwords.</source>
          <target state="translated">一旦您在Play Store上发布应用,如果您想在任何时候更改签名密钥,您将需要以不同的包名重新发布您的应用(失去所有下载和评级)。所以要备份你的keystore,不要忘记密码。</target>
        </trans-unit>
        <trans-unit id="68c480b09c86ccb4820523ff1822132e5e3a8911" translate="yes" xml:space="preserve">
          <source>Once you reach your React-powered activity inside the app, it should load the JavaScript code from the development server and display:</source>
          <target state="translated">一旦你在应用内部达到你的React驱动的活动,它应该从开发服务器加载JavaScript代码并显示。</target>
        </trans-unit>
        <trans-unit id="3a49eeb3fb6c13f6cd401408dcaea6d8c65b9200" translate="yes" xml:space="preserve">
          <source>Once you've set these up, you can launch your app on an Android Virtual Device by running &lt;code&gt;npm run android&lt;/code&gt;, or on the iOS Simulator by running &lt;code&gt;npm run ios&lt;/code&gt; (macOS only).</source>
          <target state="translated">设置完这些后，您可以通过运行 &lt;code&gt;npm run android&lt;/code&gt; 在Android虚拟设备上启动应用程序，或者通过运行 &lt;code&gt;npm run ios&lt;/code&gt; 在iOS Simulator上启动应用程序（仅适用于macOS）。</target>
        </trans-unit>
        <trans-unit id="cbe67342194619da4ff7e2f5ed112c961279943c" translate="yes" xml:space="preserve">
          <source>One case where I have used this is for animating in a modal (sliding down from top and fading in a translucent overlay) while initializing and perhaps receiving responses for several network requests, rendering the contents of the modal, and updating the view where the modal was opened from. See the Animations guide for more information about how to use LayoutAnimation.</source>
          <target state="translated">我曾经使用过的一个案例是在一个模态中制作动画(从顶部向下滑动并在半透明覆盖中渐变),同时初始化并可能接收几个网络请求的响应,渲染模态的内容,并更新模态从哪里打开的视图。有关如何使用LayoutAnimation的更多信息,请参见动画指南。</target>
        </trans-unit>
        <trans-unit id="41de1fa48e43a6265cb53f48753c01978663836a" translate="yes" xml:space="preserve">
          <source>One common pattern is to make your component accept a &lt;code&gt;style&lt;/code&gt; prop which in turn is used to style subcomponents. You can use this to make styles &quot;cascade&quot; the way they do in CSS.</source>
          <target state="translated">一种常见的模式是使您的组件接受 &lt;code&gt;style&lt;/code&gt; 支持，该样式支持又用于对子组件进行样式设置。您可以使用它来使样式&amp;ldquo;级联&amp;rdquo;，就像它们在CSS中一样。</target>
        </trans-unit>
        <trans-unit id="375926ff54dc430830ca673dedca519682928b6c" translate="yes" xml:space="preserve">
          <source>One common question is how to handle the &quot;state&quot; of your React Native application. The most popular library for this is &lt;a href=&quot;http://redux.js.org/&quot;&gt;Redux&lt;/a&gt;. Don't be afraid of how often Redux uses the word &quot;reducer&quot; - it's a pretty simple library, and there's also a nice &lt;a href=&quot;https://egghead.io/courses/getting-started-with-redux&quot;&gt;series of videos&lt;/a&gt; explaining it.</source>
          <target state="translated">一个常见的问题是如何处理React Native应用程序的&amp;ldquo;状态&amp;rdquo;。最受欢迎的库是&lt;a href=&quot;http://redux.js.org/&quot;&gt;Redux&lt;/a&gt;。不要担心Redux多久使用一次&amp;ldquo; reducer&amp;rdquo;一词-这是一个非常简单的库，并且还有很多不错&lt;a href=&quot;https://egghead.io/courses/getting-started-with-redux&quot;&gt;的视频&lt;/a&gt;对此进行了解释。</target>
        </trans-unit>
        <trans-unit id="d0f9e92a2fc4a8d4483718419a3b4ca01123b283" translate="yes" xml:space="preserve">
          <source>One great way you can contribute to the project without writing any code is to help triage issues and pull requests as they come in.</source>
          <target state="translated">你可以在不写任何代码的情况下为项目做出贡献,其中一个很好的方法就是在问题和拉取请求进来的时候帮助他们分流。</target>
        </trans-unit>
        <trans-unit id="7abca6337d8819557cf45aaca55d74fde4c85892" translate="yes" xml:space="preserve">
          <source>One of the easier ways to do this is to open the view in the storyboard and right click on the new link. Select something such as the &lt;code&gt;Touch Up Inside&lt;/code&gt; event, drag that to the storyboard and then select the created method from the list provided.</source>
          <target state="translated">一种简单的方法是在情节提要中打开视图，然后右键单击新链接。选择诸如&amp;ldquo; &lt;code&gt;Touch Up Inside&lt;/code&gt; &amp;rdquo;事件之类的内容，将其拖到情节提要中，然后从提供的列表中选择创建的方法。</target>
        </trans-unit>
        <trans-unit id="62ad0ad6d3a92db3fb69ec96322a9daf3b615a74" translate="yes" xml:space="preserve">
          <source>One of the most common uses for a list view is displaying data that you fetch from a server. To do that, you will need to &lt;a href=&quot;network&quot;&gt;learn about networking in React Native&lt;/a&gt;.</source>
          <target state="translated">列表视图最常见的用途之一是显示您从服务器获取的数据。为此，您将需要&lt;a href=&quot;network&quot;&gt;了解React Native中的网络&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="ae1e97658309746e3edf620bc258cf8fc553b668" translate="yes" xml:space="preserve">
          <source>One reason why well-built native apps feel so smooth is by avoiding expensive operations during interactions and animations. In React Native, we currently have a limitation that there is only a single JS execution thread, but you can use &lt;code&gt;InteractionManager&lt;/code&gt; to make sure long-running work is scheduled to start after any interactions/animations have completed.</source>
          <target state="translated">精心构建的本机应用程序如此流畅的原因之一是避免在交互和动画期间进行昂贵的操作。在React Native中，当前存在一个限制，即只有一个JS执行线程，但是您可以使用 &lt;code&gt;InteractionManager&lt;/code&gt; 来确保安排长时间运行的工作以在任何交互/动画完成后开始。</target>
        </trans-unit>
        <trans-unit id="82fbeacd6f71b171f925dda8de57900857209145" translate="yes" xml:space="preserve">
          <source>One solution to this is to allow for JavaScript-based animations to be offloaded to the main thread. If we were to do the same thing as in the above example with this approach, we might calculate a list of all x-offsets for the new scene when we are starting the transition and send them to the main thread to execute in an optimized way. Now that the JavaScript thread is freed of this responsibility, it's not a big deal if it drops a few frames while rendering the scene -- you probably won't even notice because you will be too distracted by the pretty transition.</source>
          <target state="translated">一个解决方案是允许将基于JavaScript的动画卸载到主线程。如果我们要用这种方法做和上面例子中一样的事情,我们可能会在开始过渡的时候计算出一个新场景的所有x-offsets的列表,并将它们以优化的方式发送给主线程执行。现在JavaScript线程已经摆脱了这个责任,如果它在渲染场景时掉了几帧也没什么大不了的--你可能根本不会注意到,因为你会因为漂亮的过渡而分心。</target>
        </trans-unit>
        <trans-unit id="999a83830342bb71dd64fbe3deaca1d4d7d98753" translate="yes" xml:space="preserve">
          <source>Only animatable components can be animated. These special components do the magic of binding the animated values to the properties, and do targeted native updates to avoid the cost of the react render and reconciliation process on every frame. They also handle cleanup on unmount so they are safe by default.</source>
          <target state="translated">只有可动画化的组件才能进行动画化。这些特殊的组件会将动画值绑定到属性上,并进行有针对性的原生更新,以避免每一帧的react渲染和调和过程的代价。它们还能处理卸载时的清理工作,所以它们默认是安全的。</target>
        </trans-unit>
        <trans-unit id="36f494ecf8194204f825de20f3d169a0339f6c16" translate="yes" xml:space="preserve">
          <source>Only called for multiline text inputs.</source>
          <target state="translated">只在多行文字输入时调用。</target>
        </trans-unit>
        <trans-unit id="a8b092c822c371f6dbeb229dd56331c9a48640c6" translate="yes" xml:space="preserve">
          <source>Only called from native code. Starts a headless task.</source>
          <target state="translated">只从本地代码调用。启动一个无头任务。</target>
        </trans-unit>
        <trans-unit id="2dff57ae74e043e0f2b06bc8e0d24bf10d1f4549" translate="yes" xml:space="preserve">
          <source>Only re-render changed rows - the rowHasChanged function provided to the data source tells the ListView if it needs to re-render a row because the source data has changed - see ListViewDataSource for more details.</source>
          <target state="translated">只重新渲染已更改的行--提供给数据源的 rowHasChanged 函数告诉 ListView 是否因为源数据发生了变化而需要重新渲染一行--更多细节请参见 ListViewDataSource。</target>
        </trans-unit>
        <trans-unit id="897770dd61027cef6bb900ca1131640bfd745ffd" translate="yes" xml:space="preserve">
          <source>Only the images that are actually used will be packaged into your app.</source>
          <target state="translated">只有实际使用的图片才会被打包到你的应用中。</target>
        </trans-unit>
        <trans-unit id="8f6a49cf1332bb3f265c79bf622d0daeec7e847f" translate="yes" xml:space="preserve">
          <source>Opacity is controlled by wrapping the children in an Animated.View, which is added to the view hierarchy. Be aware that this can affect layout.</source>
          <target state="translated">不透明度是通过将子代包裹在Animated.View中来控制的,而Animated.View是添加到视图层次结构中的。请注意,这可能会影响布局。</target>
        </trans-unit>
        <trans-unit id="fae0d535829dc5e73be271a32077f0beccf6af10" translate="yes" xml:space="preserve">
          <source>Open &lt;code&gt;App.js&lt;/code&gt; in your text editor of choice and edit some lines.</source>
          <target state="translated">在您选择的文本编辑器中打开 &lt;code&gt;App.js&lt;/code&gt; 并编辑一些行。</target>
        </trans-unit>
        <trans-unit id="8ebdd564af88b9fe69a4d0c308edb7892cc11628" translate="yes" xml:space="preserve">
          <source>Open &lt;code&gt;android/app/src/main/java/com/{yourAppName}/MainApplication.java&lt;/code&gt; and replace the original &lt;code&gt;onCreate&lt;/code&gt; function:</source>
          <target state="translated">打开 &lt;code&gt;android/app/src/main/java/com/{yourAppName}/MainApplication.java&lt;/code&gt; 并替换原始的 &lt;code&gt;onCreate&lt;/code&gt; 函数：</target>
        </trans-unit>
        <trans-unit id="1bf483d40edc2dda37c08b2c1afe6618ae450f54" translate="yes" xml:space="preserve">
          <source>Open a dialog to share text content.</source>
          <target state="translated">打开对话框,分享文本内容。</target>
        </trans-unit>
        <trans-unit id="97faaadb2e2485cb8c2d38aae18097501bae7ea6" translate="yes" xml:space="preserve">
          <source>Open a new Command Prompt window to ensure the new environment variable is loaded before proceeding to the next step.</source>
          <target state="translated">打开一个新的命令提示符窗口,以确保在进行下一步之前加载新的环境变量。</target>
        </trans-unit>
        <trans-unit id="055001dc424e48bb966782d9f00b5f94e02409ce" translate="yes" xml:space="preserve">
          <source>Open a terminal and type &lt;code&gt;/sbin/ifconfig&lt;/code&gt; to find your machine's IP address.</source>
          <target state="translated">打开终端，然后输入 &lt;code&gt;/sbin/ifconfig&lt;/code&gt; 来找到您机器的IP地址。</target>
        </trans-unit>
        <trans-unit id="fad1e10ae7b1fdb0a493631465d5ff2c90d76a09" translate="yes" xml:space="preserve">
          <source>Open an Administrator Command Prompt (right click Command Prompt and select &quot;Run as Administrator&quot;), then run the following command:</source>
          <target state="translated">打开管理员命令提示符(右击命令提示符,选择 &quot;以管理员身份运行&quot;),然后运行以下命令。</target>
        </trans-unit>
        <trans-unit id="ae249ced65d4d94aa4f9d837e894db946c1f76ca" translate="yes" xml:space="preserve">
          <source>Open the &lt;strong&gt;Report navigator&lt;/strong&gt; tab, select the last &lt;strong&gt;Build&lt;/strong&gt; and search for &lt;code&gt;xip.io&lt;/code&gt;. The IP address which gets embedded in the app should match your machines IP address plus the domain &lt;code&gt;.xip.io&lt;/code&gt; (e.g. 10.0.1.123.xip.io)</source>
          <target state="translated">打开&lt;strong&gt;报告导航&lt;/strong&gt;选项卡中，选择最后&lt;strong&gt;生成&lt;/strong&gt;和搜索 &lt;code&gt;xip.io&lt;/code&gt; 。嵌入到应用程序中的IP地址应与您的计算机的IP地址以及域名 &lt;code&gt;.xip.io&lt;/code&gt; 相匹配（例如10.0.1.123.xip.io）</target>
        </trans-unit>
        <trans-unit id="2b6b80e044d9b4262f96e563b5b1573da7eb1e18" translate="yes" xml:space="preserve">
          <source>Open the System pane under &lt;strong&gt;System and Security&lt;/strong&gt; in the Windows Control Panel, then click on &lt;strong&gt;Change settings...&lt;/strong&gt;. Open the &lt;strong&gt;Advanced&lt;/strong&gt; tab and click on &lt;strong&gt;Environment Variables...&lt;/strong&gt;. Click on &lt;strong&gt;New...&lt;/strong&gt; to create a new &lt;code&gt;ANDROID_HOME&lt;/code&gt; user variable that points to the path to your Android SDK:</source>
          <target state="translated">在Windows控制面板中的&amp;ldquo; &lt;strong&gt;系统和安全性&amp;rdquo;&lt;/strong&gt;下，打开&amp;ldquo;系统&amp;rdquo;窗格，然后单击&amp;ldquo; &lt;strong&gt;更改设置...&amp;rdquo;&lt;/strong&gt;。打开&amp;ldquo; &lt;strong&gt;高级&amp;rdquo;&lt;/strong&gt;选项卡，然后单击&amp;ldquo; &lt;strong&gt;环境变量...&amp;rdquo;&lt;/strong&gt;。单击&amp;ldquo; &lt;strong&gt;新建...&amp;rdquo;&lt;/strong&gt;以创建一个新的 &lt;code&gt;ANDROID_HOME&lt;/code&gt; 用户变量，该变量指向您的Android SDK的路径：</target>
        </trans-unit>
        <trans-unit id="c79011122119fc71d52265d271112b06ae6129b6" translate="yes" xml:space="preserve">
          <source>Open the command prompt and type &lt;code&gt;ipconfig&lt;/code&gt; to find your machine's IP address (&lt;a href=&quot;http://windows.microsoft.com/en-us/windows/using-command-line-tools-networking-information&quot;&gt;more info&lt;/a&gt;).</source>
          <target state="translated">打开命令提示符，然后键入 &lt;code&gt;ipconfig&lt;/code&gt; 来找到您机器的IP地址（&lt;a href=&quot;http://windows.microsoft.com/en-us/windows/using-command-line-tools-networking-information&quot;&gt;更多信息&lt;/a&gt;）。</target>
        </trans-unit>
        <trans-unit id="5f4f76aa723d822244368c7dd58a338f0228ccad" translate="yes" xml:space="preserve">
          <source>Open the in-app &lt;a href=&quot;debugging#accessing-the-in-app-developer-menu&quot;&gt;Developer menu&lt;/a&gt;.</source>
          <target state="translated">开启应用程式内&lt;a href=&quot;debugging#accessing-the-in-app-developer-menu&quot;&gt;开发人员选单&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="77d5215e829fa4fe16cc2b01e85ec49f679f3a43" translate="yes" xml:space="preserve">
          <source>Open the in-app developer menu and choose &quot;Show Inspector&quot;. It will bring up an overlay that lets you tap on any UI element and see information about it:</source>
          <target state="translated">打开应用内开发者菜单,选择 &quot;显示检查器&quot;。它将会弹出一个覆盖面,让你点击任何UI元素,并查看相关信息。</target>
        </trans-unit>
        <trans-unit id="fe6cb8635f87d0e2add1e3aa3c449fc7ff5d6b21" translate="yes" xml:space="preserve">
          <source>Open the project in Android Studio and resolve any dependency issues. The IDE should guide you through this steps after hovering your pointer over the red lines.</source>
          <target state="translated">在Android Studio中打开项目,解决任何依赖问题。将指针悬停在红线上后,IDE应该会引导你完成这个步骤。</target>
        </trans-unit>
        <trans-unit id="98b04707f3c5540310b148eb0181361372411f97" translate="yes" xml:space="preserve">
          <source>Open your &lt;code&gt;android/app/src/main/AndroidManifest.xml&lt;/code&gt; file.</source>
          <target state="translated">打开您的 &lt;code&gt;android/app/src/main/AndroidManifest.xml&lt;/code&gt; 文件。</target>
        </trans-unit>
        <trans-unit id="c98ac7df7f88aec9fb8afe85ca64c73aa80b4fb8" translate="yes" xml:space="preserve">
          <source>Open your React Native app on your device.</source>
          <target state="translated">在设备上打开你的React Native应用。</target>
        </trans-unit>
        <trans-unit id="1521d7c932e843066f546c6588e08986565f39fe" translate="yes" xml:space="preserve">
          <source>Opening external links</source>
          <target state="translated">打开外部链接</target>
        </trans-unit>
        <trans-unit id="d8ffeeedae99878303bcc6b33b874efdc4cf03e6" translate="yes" xml:space="preserve">
          <source>Opening tab in chrome &lt;a href=&quot;chrome://tracing&quot;&gt;chrome://tracing&lt;/a&gt;</source>
          <target state="translated">chrome &lt;a href=&quot;chrome://tracing&quot;&gt;chrome：// tracing中的&amp;ldquo;&lt;/a&gt;打开&amp;rdquo;选项卡</target>
        </trans-unit>
        <trans-unit id="367dc8280f1c23a92a737793ffd9698bea9fb574" translate="yes" xml:space="preserve">
          <source>Opens the drawer.</source>
          <target state="translated">打开抽屉。</target>
        </trans-unit>
        <trans-unit id="b961abd5043e620e9999191bb33845148df4c95a" translate="yes" xml:space="preserve">
          <source>Opens the standard Android date picker dialog.</source>
          <target state="translated">打开标准的Android日期选择器对话框。</target>
        </trans-unit>
        <trans-unit id="fa800150a748be9f8910787aad0785ff3f2cb532" translate="yes" xml:space="preserve">
          <source>Opens the standard Android time picker dialog.</source>
          <target state="translated">打开标准的Android时间选择器对话框。</target>
        </trans-unit>
        <trans-unit id="535600629c7816fa7b39e8fcec50a06d23236abc" translate="yes" xml:space="preserve">
          <source>Optimized.js</source>
          <target state="translated">Optimized.js</target>
        </trans-unit>
        <trans-unit id="b822029d4db1f225e06d878d91e1807a35630ccc" translate="yes" xml:space="preserve">
          <source>Optimizing for zero listeners</source>
          <target state="translated">优化零听众</target>
        </trans-unit>
        <trans-unit id="40b0519cc38e61f7177aed208c6c3f340c1fc654" translate="yes" xml:space="preserve">
          <source>Optional animation when changing the status bar hidden property.</source>
          <target state="translated">当改变状态栏的隐藏属性时,可选择动画。</target>
        </trans-unit>
        <trans-unit id="8bc3954f57525051cfd18ae0cc14aa3a83daf9d5" translate="yes" xml:space="preserve">
          <source>Optional custom style for multi-item rows generated when &lt;code&gt;numColumns &amp;gt; 1&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;numColumns &amp;gt; 1&lt;/code&gt; 时生成的多项目行的可选自定义样式。</target>
        </trans-unit>
        <trans-unit id="9c950c46556191100cb896f7f02759b36b541ab2" translate="yes" xml:space="preserve">
          <source>Optional horizontal mode.</source>
          <target state="translated">可选择水平模式。</target>
        </trans-unit>
        <trans-unit id="7a96447fec2a30e4b551fd678abc6a5598e15eb3" translate="yes" xml:space="preserve">
          <source>Optional key to keep track of section re-ordering. If you don't plan on re-ordering sections, the array index will be used by default.</source>
          <target state="translated">可选的键,用于跟踪章节的重新排序。如果你不打算重新排序,默认使用数组索引。</target>
        </trans-unit>
        <trans-unit id="a42b8e00352b5660b90696f4b05c93033fc1d1b5" translate="yes" xml:space="preserve">
          <source>Optional props:</source>
          <target state="translated">可选道具。</target>
        </trans-unit>
        <trans-unit id="010e1c7312e9b90801ec49c9d468b8acdee6e24a" translate="yes" xml:space="preserve">
          <source>Optionally define an arbitrary item renderer for this section, overriding the default &lt;a href=&quot;sectionlist#renderitem&quot;&gt;&lt;code&gt;renderItem&lt;/code&gt;&lt;/a&gt; for the list.</source>
          <target state="translated">（可选）为此部分定义一个任意项目渲染器，以覆盖列表的默认&lt;a href=&quot;sectionlist#renderitem&quot;&gt; &lt;code&gt;renderItem&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="763d65307296453d46880e66c1fa8c41685c1271" translate="yes" xml:space="preserve">
          <source>Optionally define an arbitrary item separator for this section, overriding the default &lt;a href=&quot;sectionlist#itemseparatorcomponent&quot;&gt;&lt;code&gt;ItemSeparatorComponent&lt;/code&gt;&lt;/a&gt; for the list.</source>
          <target state="translated">（可选）为此部分定义一个任意的项目分隔符，以覆盖列表的默认&lt;a href=&quot;sectionlist#itemseparatorcomponent&quot;&gt; &lt;code&gt;ItemSeparatorComponent&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="dbef5dfba5ca9021c0412414355b7d10c955e8a5" translate="yes" xml:space="preserve">
          <source>Optionally define an arbitrary key extractor for this section, overriding the default &lt;a href=&quot;sectionlist#keyextractor&quot;&gt;&lt;code&gt;keyExtractor&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">（可选）为此部分定义一个任意键提取器，以覆盖默认的&lt;a href=&quot;sectionlist#keyextractor&quot;&gt; &lt;code&gt;keyExtractor&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="ff11fc111cb0ad51b9c144c6f9538e1c0e687eeb" translate="yes" xml:space="preserve">
          <source>Optionally provide a list of buttons. Tapping any button will fire the respective onPress callback and dismiss the alert. By default, the only button will be an 'OK' button.</source>
          <target state="translated">可选择提供一个按钮列表。点击任何按钮都会启动各自的onPress回调并解除警报。默认情况下,唯一的按钮是 &quot;OK &quot;按钮。</target>
        </trans-unit>
        <trans-unit id="cb456f6a24c3e34562dd4ece251be2e05f7bdbf6" translate="yes" xml:space="preserve">
          <source>Optionally restricts the set of canceled notifications to those notifications whose &lt;code&gt;userInfo&lt;/code&gt; fields match the corresponding fields in the &lt;code&gt;userInfo&lt;/code&gt; argument.</source>
          <target state="translated">（可选）将取消的通知集限制为 &lt;code&gt;userInfo&lt;/code&gt; 字段与 &lt;code&gt;userInfo&lt;/code&gt; 参数中的相应字段匹配的那些通知。</target>
        </trans-unit>
        <trans-unit id="6bf5da9c080bee3a8142586c412aa39971137eee" translate="yes" xml:space="preserve">
          <source>Options</source>
          <target state="translated">Options</target>
        </trans-unit>
        <trans-unit id="a0762e6d59290d3d745c06059a8fdd8db1d8b2d5" translate="yes" xml:space="preserve">
          <source>Other app extensions</source>
          <target state="translated">其他应用扩展</target>
        </trans-unit>
        <trans-unit id="3e855e8ac1ea176ae02571193faa4b45bca76638" translate="yes" xml:space="preserve">
          <source>Other configuration options are as follows:</source>
          <target state="translated">其他配置选项如下:</target>
        </trans-unit>
        <trans-unit id="6196adf569a1022a6b31e62f8fd97059836c3a97" translate="yes" xml:space="preserve">
          <source>Other native methods</source>
          <target state="translated">其他本地方法</target>
        </trans-unit>
        <trans-unit id="210ea0ecdbd7e355869cfc2087dec46165e8335f" translate="yes" xml:space="preserve">
          <source>Other types of app extensions have greater memory limits than the Today widget. For instance, Custom Keyboard extensions are limited to 48 MB, and Share extensions are limited to 120 MB. Implementing such app extensions with React Native is more viable. One proof of concept example is &lt;a href=&quot;https://github.com/andrewsardone/react-native-ios-share-extension&quot;&gt;react-native-ios-share-extension&lt;/a&gt;.</source>
          <target state="translated">其他类型的应用程序扩展程序的内存限制比&amp;ldquo;今日&amp;rdquo;窗口小部件更大。例如，自定义键盘扩展名限制为48 MB，共享扩展名限制为120 MB。使用React Native实施此类应用程序扩展更加可行。概念证明示例之一是&lt;a href=&quot;https://github.com/andrewsardone/react-native-ios-share-extension&quot;&gt;react-native-ios-share-extension&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="3f0edc7fc58f4b1625621597e9cd1d20b940abad" translate="yes" xml:space="preserve">
          <source>Other ways of cross-language interaction (events and native modules)</source>
          <target state="translated">其他跨语言交互方式(事件和本地模块)。</target>
        </trans-unit>
        <trans-unit id="8d7bf5bf136e81f9388c1f4eca050d6d94e965d7" translate="yes" xml:space="preserve">
          <source>Others</source>
          <target state="translated">Others</target>
        </trans-unit>
        <trans-unit id="207b6a767c872c79f5c03c0d407b55aed7d74cb2" translate="yes" xml:space="preserve">
          <source>Our development process</source>
          <target state="translated">我们的开发流程</target>
        </trans-unit>
        <trans-unit id="f9691824e48dfab546b156c658d9032c8b783eaa" translate="yes" xml:space="preserve">
          <source>Our linter will catch most styling issues that may exist in your code. You can check the status of your code styling by simply running &lt;code&gt;npm run lint&lt;/code&gt;.</source>
          <target state="translated">我们的linter可以捕获您的代码中可能存在的大多数样式问题。您可以通过简单地运行 &lt;code&gt;npm run lint&lt;/code&gt; 来检查代码样式的状态。</target>
        </trans-unit>
        <trans-unit id="df1cd3ace2b4ffcf4ecf28eb34458e7a193a99f7" translate="yes" xml:space="preserve">
          <source>Override the native component used to render the WebView. Enables a custom native WebView which uses the same JavaScript as the original WebView.</source>
          <target state="translated">覆盖用于渲染WebView的本地组件。启用一个自定义的本地WebView,它使用与原始WebView相同的JavaScript。</target>
        </trans-unit>
        <trans-unit id="f0dffb734be8e3978062e3b1df751493ce824bab" translate="yes" xml:space="preserve">
          <source>Overrides automatic detection based on the file extension.</source>
          <target state="translated">覆盖基于文件扩展名的自动检测。</target>
        </trans-unit>
        <trans-unit id="99a870f8c9df8c8ce67a9bfe112be58373b675a7" translate="yes" xml:space="preserve">
          <source>Overrides the text that's read by the screen reader when the user interacts with the element. By default, the label is constructed by traversing all the children and accumulating all the &lt;code&gt;Text&lt;/code&gt; nodes separated by space.</source>
          <target state="translated">当用户与元素进行交互时，覆盖由屏幕阅读器读取的文本。默认情况下，通过遍历所有子项并累积所有用空格分隔的 &lt;code&gt;Text&lt;/code&gt; 节点来构造标签。</target>
        </trans-unit>
        <trans-unit id="0efc2e6be4c23b9a513d7ce0dcff8ed80e8912e7" translate="yes" xml:space="preserve">
          <source>Overview</source>
          <target state="translated">Overview</target>
        </trans-unit>
        <trans-unit id="d79e8e0de159d03879e42e9b9eff9e92d6b50162" translate="yes" xml:space="preserve">
          <source>Padding between the inline image, if any, and the text input itself.</source>
          <target state="translated">内嵌图像(如果有)和文本输入本身之间的填充。</target>
        </trans-unit>
        <trans-unit id="4610303267058b76ca96d316c378516070eec93c" translate="yes" xml:space="preserve">
          <source>PanResponder</source>
          <target state="translated">PanResponder</target>
        </trans-unit>
        <trans-unit id="28a20b1d0387fcb104a410bd4004bbed530ad477" translate="yes" xml:space="preserve">
          <source>PanResponder.create()</source>
          <target state="translated">PanResponder.create()</target>
        </trans-unit>
        <trans-unit id="3803d0148031d6e3fc5e68aa29cd0d7ee738451c" translate="yes" xml:space="preserve">
          <source>Param &lt;code&gt;animated&lt;/code&gt; (&lt;code&gt;true&lt;/code&gt; by default) defines whether the list should do an animation while scrolling.</source>
          <target state="translated">&lt;code&gt;animated&lt;/code&gt; 参数（默认情况下为 &lt;code&gt;true&lt;/code&gt; ）定义列表在滚动时是否应进行动画处理。</target>
        </trans-unit>
        <trans-unit id="2dc468d7ef40b21791b5a20194d2af0cbac7d47e" translate="yes" xml:space="preserve">
          <source>Param &lt;code&gt;offset&lt;/code&gt; expects the offset to scroll to. In case of &lt;code&gt;horizontal&lt;/code&gt; is true, the offset is the x-value, in any other case the offset is the y-value.</source>
          <target state="translated">参数 &lt;code&gt;offset&lt;/code&gt; 期望偏移量滚动到。如果 &lt;code&gt;horizontal&lt;/code&gt; 为true，则偏移量为x值，在其他情况下，偏移量为y值。</target>
        </trans-unit>
        <trans-unit id="a975eea30db9fa05003e3b5097688bd49ec7e01b" translate="yes" xml:space="preserve">
          <source>Parameters</source>
          <target state="translated">Parameters</target>
        </trans-unit>
        <trans-unit id="381c775599d6e4185d4410725809e360928357cd" translate="yes" xml:space="preserve">
          <source>Parameters:</source>
          <target state="translated">Parameters:</target>
        </trans-unit>
        <trans-unit id="ad10f6027643d66f81d4d3e8e1c54064e5035ae8" translate="yes" xml:space="preserve">
          <source>Passing properties from React Native to native</source>
          <target state="translated">将属性从React Native传递到本地</target>
        </trans-unit>
        <trans-unit id="d6c5933ae3f31403539f4c284d6ffe568b46df61" translate="yes" xml:space="preserve">
          <source>Passing properties from native to React Native</source>
          <target state="translated">将属性从native传递到React Native</target>
        </trans-unit>
        <trans-unit id="7693a2c69a1c5f873046d7814851e04661509ac3" translate="yes" xml:space="preserve">
          <source>Percent of viewport that must be covered for a partially occluded item to count as &quot;viewable&quot;, 0-100. Fully visible items are always considered viewable. A value of 0 means that a single pixel in the viewport makes the item viewable, and a value of 100 means that an item must be either entirely visible or cover the entire viewport to count as viewable.</source>
          <target state="translated">部分被遮挡的物品必须覆盖视口的百分比才能算作 &quot;可查看&quot;,0-100。完全可见的项目总是被认为是可查看的。值为0意味着视口中的一个像素就能使项目可查看,值为100意味着项目必须完全可见或覆盖整个视口才能算作可查看。</target>
        </trans-unit>
        <trans-unit id="f0c49bf301e173dbac5ded7261ef81b0640c9165" translate="yes" xml:space="preserve">
          <source>Perform cache interrogation. Returns a mapping from URL to cache status, such as &quot;disk&quot; or &quot;memory&quot;. If a requested URL is not in the mapping, it means it's not in the cache.</source>
          <target state="translated">执行缓存查询。返回从URL到缓存状态的映射,如 &quot;磁盘 &quot;或 &quot;内存&quot;。如果请求的URL不在映射中,则意味着它不在缓存中。</target>
        </trans-unit>
        <trans-unit id="63c904559993935c470f516c8b549ca7f3640dbb" translate="yes" xml:space="preserve">
          <source>Performance</source>
          <target state="translated">Performance</target>
        </trans-unit>
        <trans-unit id="167baeea556e8859411e41c9abd488de9a1c3d6c" translate="yes" xml:space="preserve">
          <source>Performance Monitor</source>
          <target state="translated">性能监控</target>
        </trans-unit>
        <trans-unit id="f24ec6a3ee76a5c1160a8335e156974fea6e26fc" translate="yes" xml:space="preserve">
          <source>Performance#ListView initial rendering is too slow or scroll performance is bad for large lists</source>
          <target state="translated">性能#ListView初始渲染太慢或滚动性能不好,对于大的列表来说。</target>
        </trans-unit>
        <trans-unit id="0d4966abf770c34ec9a177e590ed4a5fe778bb2a" translate="yes" xml:space="preserve">
          <source>Performance#Profiling Android UI Performance with systrace</source>
          <target state="translated">性能#用systrace分析Android UI性能。</target>
        </trans-unit>
        <trans-unit id="fa1d3f8934e03a4f5015bb88d1cdd2ad8ec331fa" translate="yes" xml:space="preserve">
          <source>Performance#Running in development mode (dev=true)</source>
          <target state="translated">性能#在开发模式下运行(dev=true)</target>
        </trans-unit>
        <trans-unit id="34e8f1892ff346a054e3ad5bfe540400e9ff0e7d" translate="yes" xml:space="preserve">
          <source>Performance#Using console.log statements</source>
          <target state="translated">性能#使用 console.log 语句</target>
        </trans-unit>
        <trans-unit id="4025c94a694ff3f5f82b10823a55e1ade044634c" translate="yes" xml:space="preserve">
          <source>Performance:</source>
          <target state="translated">Performance:</target>
        </trans-unit>
        <trans-unit id="d06d55570938d12f87db3bf2b48caa9de22d9c67" translate="yes" xml:space="preserve">
          <source>Permissions</source>
          <target state="translated">Permissions</target>
        </trans-unit>
        <trans-unit id="6dffd96356c2d74b9df318f49231cddd4fefa59e" translate="yes" xml:space="preserve">
          <source>Permissions that require prompting the user</source>
          <target state="translated">需要提示用户的权限。</target>
        </trans-unit>
        <trans-unit id="1456782f9d84c088052b0184a83d08bdda6111a0" translate="yes" xml:space="preserve">
          <source>PermissionsAndroid</source>
          <target state="translated">PermissionsAndroid</target>
        </trans-unit>
        <trans-unit id="346a8845e0312dfab2b74a7f76fa2d93bea358a9" translate="yes" xml:space="preserve">
          <source>PermissionsAndroid.check()</source>
          <target state="translated">PermissionsAndroid.check()</target>
        </trans-unit>
        <trans-unit id="bdcbd8a5e36955a31b52f5fcd40195be4f7ce4a0" translate="yes" xml:space="preserve">
          <source>PermissionsAndroid.constructor()</source>
          <target state="translated">PermissionsAndroid.constructor()</target>
        </trans-unit>
        <trans-unit id="2d776a9e458dc7722fc417ded1d9e3c34aa79b0a" translate="yes" xml:space="preserve">
          <source>PermissionsAndroid.request()</source>
          <target state="translated">PermissionsAndroid.request()</target>
        </trans-unit>
        <trans-unit id="1bfe0471dc76f9b27049258f0bbefdb69b92cb86" translate="yes" xml:space="preserve">
          <source>PermissionsAndroid.requestMultiple()</source>
          <target state="translated">PermissionsAndroid.requestMultiple()</target>
        </trans-unit>
        <trans-unit id="5dde5e68fc6399acba182cb45c810b19cbc1fd7e" translate="yes" xml:space="preserve">
          <source>Persisting data:</source>
          <target state="translated">坚持数据。</target>
        </trans-unit>
        <trans-unit id="b02207772cf2cece553f7b02ed57f1adacb58c6e" translate="yes" xml:space="preserve">
          <source>Picker</source>
          <target state="translated">Picker</target>
        </trans-unit>
        <trans-unit id="4e2f297f5e861c87b3876aed595cefd1f74273e6" translate="yes" xml:space="preserve">
          <source>Picker#enabled</source>
          <target state="translated">Picker#enabled</target>
        </trans-unit>
        <trans-unit id="fc6926b5127d540f0e0218369cc4ec75f1911402" translate="yes" xml:space="preserve">
          <source>Picker#itemStyle</source>
          <target state="translated">Picker#itemStyle</target>
        </trans-unit>
        <trans-unit id="82276da1cd6a4011b16357435e6f9069a27a1220" translate="yes" xml:space="preserve">
          <source>Picker#mode</source>
          <target state="translated">Picker#mode</target>
        </trans-unit>
        <trans-unit id="7cf43cab90840cb284ebd214c293cb1698051132" translate="yes" xml:space="preserve">
          <source>Picker#onValueChange</source>
          <target state="translated">Picker#onValueChange</target>
        </trans-unit>
        <trans-unit id="221020d50c468ef248eccc69123f02328eeca365" translate="yes" xml:space="preserve">
          <source>Picker#prompt</source>
          <target state="translated">Picker#prompt</target>
        </trans-unit>
        <trans-unit id="a531a37ee5b204f9eb42bc7559b7f3c7a1f1af6d" translate="yes" xml:space="preserve">
          <source>Picker#selectedValue</source>
          <target state="translated">Picker#selectedValue</target>
        </trans-unit>
        <trans-unit id="37b030bcfc41e41810fce9e65ee2997036bde5a5" translate="yes" xml:space="preserve">
          <source>Picker#style</source>
          <target state="translated">Picker#style</target>
        </trans-unit>
        <trans-unit id="699dd589d1af4a9a36f43f9633d93d7627c5eecf" translate="yes" xml:space="preserve">
          <source>Picker#testID</source>
          <target state="translated">Picker#testID</target>
        </trans-unit>
        <trans-unit id="1171775a2e719407e4f61254cd257e381c2bfb70" translate="yes" xml:space="preserve">
          <source>PickerIOS</source>
          <target state="translated">PickerIOS</target>
        </trans-unit>
        <trans-unit id="396daf96ea3c4d8646108e29050836761c96cc90" translate="yes" xml:space="preserve">
          <source>PickerIOS#itemStyle</source>
          <target state="translated">PickerIOS#itemStyle</target>
        </trans-unit>
        <trans-unit id="fab285dd412e58b0c6d0b3b9d04965a2a395bf5f" translate="yes" xml:space="preserve">
          <source>PickerIOS#onValueChange</source>
          <target state="translated">PickerIOS#onValueChange</target>
        </trans-unit>
        <trans-unit id="be5af61f40ff279dbcbd5d5f30594bb1ce2217bc" translate="yes" xml:space="preserve">
          <source>PickerIOS#selectedValue</source>
          <target state="translated">PickerIOS#selectedValue</target>
        </trans-unit>
        <trans-unit id="f904931df25bc7c0fb88bf68c34fa9721d71ab9a" translate="yes" xml:space="preserve">
          <source>Pixel grid snapping</source>
          <target state="translated">像素网格捕捉</target>
        </trans-unit>
        <trans-unit id="8d47d3d7c7027bb791fa3152831d125196298688" translate="yes" xml:space="preserve">
          <source>PixelRatio</source>
          <target state="translated">PixelRatio</target>
        </trans-unit>
        <trans-unit id="8b46285afdedb5bf247d3bfae9637a4127f94028" translate="yes" xml:space="preserve">
          <source>PixelRatio class gives access to the device pixel density.</source>
          <target state="translated">PixelRatio类提供了对设备像素密度的访问。</target>
        </trans-unit>
        <trans-unit id="6bc65b2ae8063579fc85f6926c89b9502ad4a6f6" translate="yes" xml:space="preserve">
          <source>PixelRatio.get()</source>
          <target state="translated">PixelRatio.get()</target>
        </trans-unit>
        <trans-unit id="9107aa96a6b1555ff2898ae16dec790d8d616a5d" translate="yes" xml:space="preserve">
          <source>PixelRatio.get() === 1</source>
          <target state="translated">PixelRatio.get()===1</target>
        </trans-unit>
        <trans-unit id="ac62908c0ec322b2f67ea984a6c9c708ef443c74" translate="yes" xml:space="preserve">
          <source>PixelRatio.get() === 1.5</source>
          <target state="translated">PixelRatio.get()===1.5。</target>
        </trans-unit>
        <trans-unit id="1fbba80fe0f42e2998317c11e161a0df3168dc5b" translate="yes" xml:space="preserve">
          <source>PixelRatio.get() === 2</source>
          <target state="translated">PixelRatio.get()===2</target>
        </trans-unit>
        <trans-unit id="0b2e4b0599db41b7b10fb1b26f2f1520f2181abf" translate="yes" xml:space="preserve">
          <source>PixelRatio.get() === 3</source>
          <target state="translated">PixelRatio.get()===3</target>
        </trans-unit>
        <trans-unit id="42d8f0b0874d314818404c86e295a5707721556b" translate="yes" xml:space="preserve">
          <source>PixelRatio.get() === 3.5</source>
          <target state="translated">PixelRatio.get()===3.5。</target>
        </trans-unit>
        <trans-unit id="26b9aa437a90700bcaabfed86a64d70b5b10da05" translate="yes" xml:space="preserve">
          <source>PixelRatio.getFontScale()</source>
          <target state="translated">PixelRatio.getFontScale()</target>
        </trans-unit>
        <trans-unit id="dcade915e3709e5aac990126eeadb0341310d023" translate="yes" xml:space="preserve">
          <source>PixelRatio.getPixelSizeForLayoutSize()</source>
          <target state="translated">PixelRatio.getPixelSizeForLayoutSize()</target>
        </trans-unit>
        <trans-unit id="8b5f71bd156e379e42ef086520bffdf1db200f7c" translate="yes" xml:space="preserve">
          <source>PixelRatio.roundToNearestPixel()</source>
          <target state="translated">PixelRatio.roundToNearestPixel()</target>
        </trans-unit>
        <trans-unit id="ec274202e0e8d5613a7419c54a7cb5836b844045" translate="yes" xml:space="preserve">
          <source>PixelRatio.startDetecting()</source>
          <target state="translated">PixelRatio.startDetecting()</target>
        </trans-unit>
        <trans-unit id="c8a7355ac0e1c553efa29af9a4872d4d6fba6c1f" translate="yes" xml:space="preserve">
          <source>Place the &lt;code&gt;my-release-key.keystore&lt;/code&gt; file under the &lt;code&gt;android/app&lt;/code&gt; directory in your project folder.</source>
          <target state="translated">将 &lt;code&gt;my-release-key.keystore&lt;/code&gt; 文件放置在项目文件夹中 &lt;code&gt;android/app&lt;/code&gt; 目录下。</target>
        </trans-unit>
        <trans-unit id="a1423919d77187f68ee30671eed621fd1ddcfde0" translate="yes" xml:space="preserve">
          <source>Place the closing &lt;code&gt;&amp;gt;&lt;/code&gt; of opening tags on the same line as the last prop</source>
          <target state="translated">将开始标签的结束 &lt;code&gt;&amp;gt;&lt;/code&gt; 与最后一个道具放在同一行</target>
        </trans-unit>
        <trans-unit id="ecb0419fd146a3eb65568fe31e74871dc54c1a64" translate="yes" xml:space="preserve">
          <source>Place the closing &lt;code&gt;/&amp;gt;&lt;/code&gt; of self-closing tags on their own line and left-align them with the opening &lt;code&gt;&amp;lt;&lt;/code&gt;</source>
          <target state="translated">将自动关闭标签的结束 &lt;code&gt;/&amp;gt;&lt;/code&gt; 放在自己的行上，并将其与开头 &lt;code&gt;&amp;lt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="6f7ef2e7c21e1925b1e28323bc6a2576570a539b" translate="yes" xml:space="preserve">
          <source>Plain text input alert</source>
          <target state="translated">纯文本输入提醒</target>
        </trans-unit>
        <trans-unit id="123a7f2fcc9ae7cbbbd7c7627a483853a9708dab" translate="yes" xml:space="preserve">
          <source>Platform</source>
          <target state="translated">Platform</target>
        </trans-unit>
        <trans-unit id="484ee72495b2dc27dfcfee0917436b2f438a6990" translate="yes" xml:space="preserve">
          <source>Platform Specific Code</source>
          <target state="translated">平台专用代码</target>
        </trans-unit>
        <trans-unit id="1cd44dd6a109faa1957ccc010e1e0b9770877217" translate="yes" xml:space="preserve">
          <source>Platform module</source>
          <target state="translated">平台模块</target>
        </trans-unit>
        <trans-unit id="8f8655bbd342cc6db4d0db71f8bbf64f0be302ae" translate="yes" xml:space="preserve">
          <source>Platform-specific extensions</source>
          <target state="translated">特定平台扩展</target>
        </trans-unit>
        <trans-unit id="49d4c795ef60f095a7bfc055b33509d996711701" translate="yes" xml:space="preserve">
          <source>Please make sure the following is done when submitting a pull request:</source>
          <target state="translated">在提交拉取请求时,请确保完成以下工作。</target>
        </trans-unit>
        <trans-unit id="93f64ed5980e17965f6a2fed571e7973d87d9a74" translate="yes" xml:space="preserve">
          <source>Please make sure you use the correct Android SDK path. You can find the actual location of the SDK in the Android Studio &quot;Preferences&quot; dialog, under &lt;strong&gt;Appearance &amp;amp; Behavior&lt;/strong&gt; &amp;rarr; &lt;strong&gt;System Settings&lt;/strong&gt; &amp;rarr; &lt;strong&gt;Android SDK&lt;/strong&gt;.</source>
          <target state="translated">请确保您使用正确的Android SDK路径。您可以在&amp;ldquo; &lt;strong&gt;外观和行为&amp;rdquo;&lt;/strong&gt; &amp;rarr;&amp;ldquo; &lt;strong&gt;系统设置&amp;rdquo;&lt;/strong&gt; &amp;rarr;&amp;ldquo; &lt;strong&gt;Android SDK&lt;/strong&gt; &amp;rdquo;下的&amp;ldquo; Android Studio&amp;rdquo;&amp;ldquo;首选项&amp;rdquo;对话框中找到SDK的实际位置。</target>
        </trans-unit>
        <trans-unit id="e757116c607c0527d4bca3b66ef4ec45f4eab5a2" translate="yes" xml:space="preserve">
          <source>Please note that the following corner specific, border radius style properties are currently ignored by iOS's image component:</source>
          <target state="translated">请注意,目前iOS的图像组件忽略了以下特定的角、边框半径样式属性。</target>
        </trans-unit>
        <trans-unit id="cac95ff7375eafb6ab5afc40aa10e42a379549a5" translate="yes" xml:space="preserve">
          <source>Point Gradle to your Android SDK:</source>
          <target state="translated">将Gradle指向你的Android SDK。</target>
        </trans-unit>
        <trans-unit id="9c731db2ddef58e64dd4b4066d2fc71aa56909ea" translate="yes" xml:space="preserve">
          <source>PointPropType</source>
          <target state="translated">PointPropType</target>
        </trans-unit>
        <trans-unit id="c65de7239130b2221dc156af1c9b5fa8125b9bf3" translate="yes" xml:space="preserve">
          <source>Polyfills</source>
          <target state="translated">Polyfills</target>
        </trans-unit>
        <trans-unit id="b23d9f407909a89e09f1125225ab8d02bcf5148f" translate="yes" xml:space="preserve">
          <source>Pop back to the previous scene.</source>
          <target state="translated">弹回之前的场景。</target>
        </trans-unit>
        <trans-unit id="2d60c6d00e6c3c25fb460f0cd64f67ff6c162caf" translate="yes" xml:space="preserve">
          <source>Popular Libraries</source>
          <target state="translated">热门图书馆</target>
        </trans-unit>
        <trans-unit id="1494ffb23d007acab36dcac635262b01b4fed7ee" translate="yes" xml:space="preserve">
          <source>Port already in use</source>
          <target state="translated">已在使用的端口</target>
        </trans-unit>
        <trans-unit id="8519233a540d2c71a26e7ad3f6b51ca644a9cd50" translate="yes" xml:space="preserve">
          <source>Possible values are one of:</source>
          <target state="translated">可能的价值是:</target>
        </trans-unit>
        <trans-unit id="87ff4b7a61554a9ebc43ceb221d83016297b535d" translate="yes" xml:space="preserve">
          <source>Possible values for &lt;code&gt;AccessibilityTraits&lt;/code&gt; are:</source>
          <target state="translated">&lt;code&gt;AccessibilityTraits&lt;/code&gt; 的可能值为：</target>
        </trans-unit>
        <trans-unit id="39e849057e9f69810f25650388a64223fde2dcee" translate="yes" xml:space="preserve">
          <source>Possible values for &lt;code&gt;dataDetectorTypes&lt;/code&gt; are:</source>
          <target state="translated">&lt;code&gt;dataDetectorTypes&lt;/code&gt; 的可能值为：</target>
        </trans-unit>
        <trans-unit id="2a06ab92b282878510f2e83ba8903cadd6ba3ac9" translate="yes" xml:space="preserve">
          <source>Possible values for &lt;code&gt;mixedContentMode&lt;/code&gt; are:</source>
          <target state="translated">&lt;code&gt;mixedContentMode&lt;/code&gt; 的可能值为：</target>
        </trans-unit>
        <trans-unit id="480e304ec0039594f1ab247f17a72a8adc46287f" translate="yes" xml:space="preserve">
          <source>Possible values for &lt;code&gt;textContentType&lt;/code&gt; are:</source>
          <target state="translated">&lt;code&gt;textContentType&lt;/code&gt; 的可能值为：</target>
        </trans-unit>
        <trans-unit id="b2ef221e3193ecc713338eb88d02a0cab9694e2a" translate="yes" xml:space="preserve">
          <source>Possible values:</source>
          <target state="translated">可能的数值:</target>
        </trans-unit>
        <trans-unit id="73b57dd42240d1b86736a7ac780a1bf1debf19d0" translate="yes" xml:space="preserve">
          <source>Predefined animations</source>
          <target state="translated">预定义动画</target>
        </trans-unit>
        <trans-unit id="4762ba59deef70f9a765e1f7d76fac6fd66daa72" translate="yes" xml:space="preserve">
          <source>Prefer &lt;code&gt;&quot;&lt;/code&gt; over &lt;code&gt;'&lt;/code&gt; for string literal props</source>
          <target state="translated">对于字符串文字道具，请优先使用 &lt;code&gt;&quot;&lt;/code&gt; 优先于 &lt;code&gt;'&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="ba4f38ede2cced8410f4a5bc70a7f8b04ea5d452" translate="yes" xml:space="preserve">
          <source>Prefer &lt;code&gt;'&lt;/code&gt; over &lt;code&gt;&quot;&lt;/code&gt;</source>
          <target state="translated">身高 &lt;code&gt;'&lt;/code&gt; 超过 &lt;code&gt;&quot;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="d4bca210769431e0089fde1a4bdc0e52603129f5" translate="yes" xml:space="preserve">
          <source>Prefetches a remote image for later use by downloading it to the disk cache</source>
          <target state="translated">通过下载远程图像到磁盘缓存中,预设远程图像供以后使用。</target>
        </trans-unit>
        <trans-unit id="f2146246962eee5bcacac637efdd8e699b007b27" translate="yes" xml:space="preserve">
          <source>Preparing the Android device</source>
          <target state="translated">准备Android设备</target>
        </trans-unit>
        <trans-unit id="eed036e414a34a0c245858652e6d88f14c3faefb" translate="yes" xml:space="preserve">
          <source>Prerequisites</source>
          <target state="translated">Prerequisites</target>
        </trans-unit>
        <trans-unit id="09cf7d997f72b055e6d64110fe6f531d98b78378" translate="yes" xml:space="preserve">
          <source>Press the &lt;code&gt;R&lt;/code&gt; key twice or select &lt;code&gt;Reload&lt;/code&gt; from the Developer Menu (&lt;code&gt;Ctrl + M&lt;/code&gt;) to see your changes!</source>
          <target state="translated">按两次 &lt;code&gt;R&lt;/code&gt; 键或从&amp;ldquo;开发人员&amp;rdquo;菜单中选择&amp;ldquo; &lt;code&gt;Reload&lt;/code&gt; &amp;rdquo;（ &lt;code&gt;Ctrl + M&lt;/code&gt; ）以查看所做的更改！</target>
        </trans-unit>
        <trans-unit id="68cc48ec31a09d87b013dc12fb9b8ae5ad6e4ef9" translate="yes" xml:space="preserve">
          <source>Press the &lt;code&gt;R&lt;/code&gt; key twice or select &lt;code&gt;Reload&lt;/code&gt; from the Developer Menu (&lt;code&gt;⌘M&lt;/code&gt;) to see your changes!</source>
          <target state="translated">按两次 &lt;code&gt;R&lt;/code&gt; 键或从&amp;ldquo;开发人员&amp;rdquo;菜单（ &lt;code&gt;⌘M&lt;/code&gt; ）中选择&amp;ldquo; &lt;code&gt;Reload&lt;/code&gt; &amp;rdquo; 以查看所做的更改！</target>
        </trans-unit>
        <trans-unit id="072727fc2298cbab0a6ed8178e835fb0133c153a" translate="yes" xml:space="preserve">
          <source>Pro Tip</source>
          <target state="translated">专业提示</target>
        </trans-unit>
        <trans-unit id="cea5295b78ec1b99a624dda73a7e6d10f18cdf3f" translate="yes" xml:space="preserve">
          <source>Profiling</source>
          <target state="translated">Profiling</target>
        </trans-unit>
        <trans-unit id="ef459a9dfd411df56cbae974c6c31288de458449" translate="yes" xml:space="preserve">
          <source>Profiling Android UI Performance with &lt;code&gt;systrace&lt;/code&gt;</source>
          <target state="translated">使用 &lt;code&gt;systrace&lt;/code&gt; 分析Android UI性能</target>
        </trans-unit>
        <trans-unit id="24095dac5626ef9b91b1afaf2df02d51edae51c6" translate="yes" xml:space="preserve">
          <source>Programmatically changing selected index</source>
          <target state="translated">程式化地改变所选指数</target>
        </trans-unit>
        <trans-unit id="5d5edb2541e0633566266f69c5540159640d5eeb" translate="yes" xml:space="preserve">
          <source>Progress view top offset</source>
          <target state="translated">进度视图顶部偏移</target>
        </trans-unit>
        <trans-unit id="66922e7eddfa9370b159c23ab51e99367800284f" translate="yes" xml:space="preserve">
          <source>ProgressBarAndroid</source>
          <target state="translated">ProgressBarAndroid</target>
        </trans-unit>
        <trans-unit id="367c57137f48b3157a345ef5b6431b28f3cc98f8" translate="yes" xml:space="preserve">
          <source>ProgressBarAndroid#animating</source>
          <target state="translated">ProgressBarAndroid#animating</target>
        </trans-unit>
        <trans-unit id="61f30e1f864a19baf098a3f8bec2f04ec5bf2796" translate="yes" xml:space="preserve">
          <source>ProgressBarAndroid#color</source>
          <target state="translated">ProgressBarAndroid#color</target>
        </trans-unit>
        <trans-unit id="e43041a141c0b8474b0d5df1563909f61c6e2ded" translate="yes" xml:space="preserve">
          <source>ProgressBarAndroid#indeterminate</source>
          <target state="translated">ProgressBarAndroid#indeterminate</target>
        </trans-unit>
        <trans-unit id="5d8fa1d85777f73e3ea5eb682d1ea50b287c9f6f" translate="yes" xml:space="preserve">
          <source>ProgressBarAndroid#progress</source>
          <target state="translated">ProgressBarAndroid#progress</target>
        </trans-unit>
        <trans-unit id="638d5534aba447beac37fb7c21803e53c9bdbd3e" translate="yes" xml:space="preserve">
          <source>ProgressBarAndroid#styleAttr</source>
          <target state="translated">ProgressBarAndroid#styleAttr</target>
        </trans-unit>
        <trans-unit id="125efc3b29553f8d5a835ba2ee87e025ac379ab1" translate="yes" xml:space="preserve">
          <source>ProgressBarAndroid#testID</source>
          <target state="translated">ProgressBarAndroid#testID</target>
        </trans-unit>
        <trans-unit id="eba4f3ed497dc60f01345e0502852e732213ff6a" translate="yes" xml:space="preserve">
          <source>ProgressViewIOS</source>
          <target state="translated">ProgressViewIOS</target>
        </trans-unit>
        <trans-unit id="4113a9ffc5eb8f02259252130cac9db56ac467e0" translate="yes" xml:space="preserve">
          <source>ProgressViewIOS#progress</source>
          <target state="translated">ProgressViewIOS#progress</target>
        </trans-unit>
        <trans-unit id="939cd1b60d39f0c120828c0929edd1efd086eb3f" translate="yes" xml:space="preserve">
          <source>ProgressViewIOS#progressImage</source>
          <target state="translated">ProgressViewIOS#progressImage</target>
        </trans-unit>
        <trans-unit id="4e5f3aba2a356f81a23dc9760087a8fdf1a83ab3" translate="yes" xml:space="preserve">
          <source>ProgressViewIOS#progressTintColor</source>
          <target state="translated">ProgressViewIOS#progressTintColor</target>
        </trans-unit>
        <trans-unit id="324fcc5637cca1ec243d380044a33ceb47f40f9e" translate="yes" xml:space="preserve">
          <source>ProgressViewIOS#progressViewStyle</source>
          <target state="translated">ProgressViewIOS#progressViewStyle</target>
        </trans-unit>
        <trans-unit id="f40b31ee042c8380eb1885f8068686980b2a1af1" translate="yes" xml:space="preserve">
          <source>ProgressViewIOS#trackImage</source>
          <target state="translated">ProgressViewIOS#trackImage</target>
        </trans-unit>
        <trans-unit id="bd872116eabd89b23bfe7493dd5991279a4cac0a" translate="yes" xml:space="preserve">
          <source>ProgressViewIOS#trackTintColor</source>
          <target state="translated">ProgressViewIOS#trackTintColor</target>
        </trans-unit>
        <trans-unit id="3844e3665d5919c240b087d6daabd12e1fed6c0b" translate="yes" xml:space="preserve">
          <source>Proguard is a tool that can slightly reduce the size of the APK. It does this by stripping parts of the React Native Java bytecode (and its dependencies) that your app is not using.</source>
          <target state="translated">Proguard是一个可以稍微缩小APK大小的工具。它通过剥离您的应用程序不使用的React Native Java字节码(及其依赖关系)的部分来实现。</target>
        </trans-unit>
        <trans-unit id="3d14ac7e01e4f9228a26a989869daa3b27c0ca42" translate="yes" xml:space="preserve">
          <source>Project with Native Code Required</source>
          <target state="translated">需要本地代码的项目</target>
        </trans-unit>
        <trans-unit id="ac7e2d7112173ded50cfbcb78eff89966cacccd2" translate="yes" xml:space="preserve">
          <source>Projects built with native code</source>
          <target state="translated">用本地代码建立的项目</target>
        </trans-unit>
        <trans-unit id="78bdcaeee0f93f6995a21ba03e23c190eb82f959" translate="yes" xml:space="preserve">
          <source>Projects with Native Code Only</source>
          <target state="translated">只有本地代码的项目</target>
        </trans-unit>
        <trans-unit id="b1d472e424c03ff52490d1edc8a0e23f95babb92" translate="yes" xml:space="preserve">
          <source>Promises</source>
          <target state="translated">Promises</target>
        </trans-unit>
        <trans-unit id="7863a34e32af67c4dc5cda2d979d745e0c71c1d7" translate="yes" xml:space="preserve">
          <source>Prompt string for this picker, used on Android in dialog mode as the title of the dialog.</source>
          <target state="translated">该选取器的提示字符串,在Android的对话框模式下作为对话框的标题使用。</target>
        </trans-unit>
        <trans-unit id="b896ba8d43ed01c77a10f51d33aa72054fddd85a" translate="yes" xml:space="preserve">
          <source>Prompts the user to enable a permission and returns a promise resolving to a string value (see result strings above) indicating whether the user allowed or denied the request or does not want to be asked again.</source>
          <target state="translated">提示用户启用一个权限,并返回一个承诺,解析为一个字符串值(见上面的结果字符串),表示用户是允许还是拒绝请求,或者不想再被询问。</target>
        </trans-unit>
        <trans-unit id="97a2ee787393f235b5321198e2c450f90d4962d7" translate="yes" xml:space="preserve">
          <source>Prompts the user to enable multiple permissions in the same dialog and returns an object with the permissions as keys and strings as values (see result strings above) indicating whether the user allowed or denied the request or does not want to be asked again.</source>
          <target state="translated">提示用户在同一个对话框中启用多个权限,并返回一个以权限为键和以字符串为值的对象(见上面的结果字符串),表示用户是否允许或拒绝该请求或不想再被询问。</target>
        </trans-unit>
        <trans-unit id="bc6c88db2f0703a9e2461a4a8060ccf1cb881998" translate="yes" xml:space="preserve">
          <source>Properties</source>
          <target state="translated">Properties</target>
        </trans-unit>
        <trans-unit id="25bd212d8a73a0cbb9e0a379ec09b8495b145405" translate="yes" xml:space="preserve">
          <source>Properties are the simplest way of cross-component communication. So we need a way to pass properties both from native to React Native, and from React Native to native.</source>
          <target state="translated">属性是跨组件通信的最简单方式。所以我们需要一种方法来传递属性,既可以从native到React Native,也可以从React Native到native。</target>
        </trans-unit>
        <trans-unit id="89ad6cd1388d8c22b0665deeec262a866e7c38e5" translate="yes" xml:space="preserve">
          <source>Properties that are to be reflected in JavaScript needs to be exposed as setter method annotated with &lt;code&gt;@ReactProp&lt;/code&gt; (or &lt;code&gt;@ReactPropGroup&lt;/code&gt;). Setter method should take view to be updated (of the current view type) as a first argument and property value as a second argument. Setter should be declared as a &lt;code&gt;void&lt;/code&gt; method and should be &lt;code&gt;public&lt;/code&gt;. Property type sent to JS is determined automatically based on the type of value argument of the setter. The following type of values are currently supported: &lt;code&gt;boolean&lt;/code&gt;, &lt;code&gt;int&lt;/code&gt;, &lt;code&gt;float&lt;/code&gt;, &lt;code&gt;double&lt;/code&gt;, &lt;code&gt;String&lt;/code&gt;, &lt;code&gt;Boolean&lt;/code&gt;, &lt;code&gt;Integer&lt;/code&gt;, &lt;code&gt;ReadableArray&lt;/code&gt;, &lt;code&gt;ReadableMap&lt;/code&gt;.</source>
          <target state="translated">需要在JavaScript中反映的属性需要以 &lt;code&gt;@ReactProp&lt;/code&gt; （或 &lt;code&gt;@ReactPropGroup&lt;/code&gt; ）注释的setter方法公开。 Setter方法应将要更新的视图（当前视图类型）作为第一个参数，并将属性值作为第二个参数。 Setter应该声明为 &lt;code&gt;void&lt;/code&gt; 方法，并且应该是 &lt;code&gt;public&lt;/code&gt; 。发送到JS的属性类型是根据setter的value参数的类型自动确定的。当前支持以下类型的值： &lt;code&gt;boolean&lt;/code&gt; ， &lt;code&gt;int&lt;/code&gt; ， &lt;code&gt;float&lt;/code&gt; ， &lt;code&gt;double&lt;/code&gt; ， &lt;code&gt;String&lt;/code&gt; ， &lt;code&gt;Boolean&lt;/code&gt; ， &lt;code&gt;Integer&lt;/code&gt; ， &lt;code&gt;ReadableArray&lt;/code&gt; ， &lt;code&gt;ReadableMap&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="9ae33a7d0ecb82cae8f04aafab20bf90425b7b8c" translate="yes" xml:space="preserve">
          <source>Property</source>
          <target state="translated">Property</target>
        </trans-unit>
        <trans-unit id="f1b3349134d6da968741597319ae66566b4ff346" translate="yes" xml:space="preserve">
          <source>Proposing a change</source>
          <target state="translated">提议改变</target>
        </trans-unit>
        <trans-unit id="e5561bc237fb41709bb2e8b651d704c1664ae03e" translate="yes" xml:space="preserve">
          <source>Props</source>
          <target state="translated">Props</target>
        </trans-unit>
        <trans-unit id="f10ede6c440c30c6f3c938bb860405d40448d57a" translate="yes" xml:space="preserve">
          <source>Props passed to &lt;code&gt;NavigatorIOS&lt;/code&gt; will set the default configuration for the navigation bar. Props passed as properties to a route object will set the configuration for that route's navigation bar, overriding any props passed to the &lt;code&gt;NavigatorIOS&lt;/code&gt; component.</source>
          <target state="translated">传递给 &lt;code&gt;NavigatorIOS&lt;/code&gt; 的道具将设置导航栏的默认配置。作为属性传递给路线对象的道具将设置该路线的导航栏的配置，从而覆盖传递给 &lt;code&gt;NavigatorIOS&lt;/code&gt; 组件的所有道具。</target>
        </trans-unit>
        <trans-unit id="45c925a67750dc3c20858b6429a3f1f08ed299bb" translate="yes" xml:space="preserve">
          <source>Provides a cubic bezier curve, equivalent to CSS Transitions' &lt;code&gt;transition-timing-function&lt;/code&gt;.</source>
          <target state="translated">提供三次贝塞尔曲线，等效于CSS Transitions的 &lt;code&gt;transition-timing-function&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="6a93e086fc7fba5ea6baa3a04e05c0229e4265b8" translate="yes" xml:space="preserve">
          <source>Provides a general interface to interact with both incoming and outgoing app links.</source>
          <target state="translated">提供了一个通用接口,用于与传入和传出的应用程序链接进行交互。</target>
        </trans-unit>
        <trans-unit id="55421118894e142fe163e04973cd07025f3dd2c0" translate="yes" xml:space="preserve">
          <source>Provides a scrolling container that can host multiple components and views.</source>
          <target state="translated">提供一个滚动容器,可以承载多个组件和视图。</target>
        </trans-unit>
        <trans-unit id="3688a0494802150d4e1d944b0fa76933debce247" translate="yes" xml:space="preserve">
          <source>Provides a simple bouncing effect.</source>
          <target state="translated">提供简单的弹跳效果。</target>
        </trans-unit>
        <trans-unit id="8a0dacafb6667b68cd2b1d3725af7a301383c155" translate="yes" xml:space="preserve">
          <source>Provides a simple way to present content above an enclosing view.</source>
          <target state="translated">提供了一种简单的方式来展示一个包围视图上面的内容。</target>
        </trans-unit>
        <trans-unit id="880cbd3bce6d12ec39cca50e24e003668803e1ed" translate="yes" xml:space="preserve">
          <source>Provides a view that moves out of the way of the virtual keyboard automatically.</source>
          <target state="translated">提供了一个自动移出虚拟键盘的视图。</target>
        </trans-unit>
        <trans-unit id="188015fab559d3b6aae898e33ce672f74b937a93" translate="yes" xml:space="preserve">
          <source>Provides access to the device pixel density.</source>
          <target state="translated">提供对设备像素密度的访问。</target>
        </trans-unit>
        <trans-unit id="aeec9140eebcc86ed92ac868442323c4b4b95648" translate="yes" xml:space="preserve">
          <source>Provides access to the local camera roll / gallery.</source>
          <target state="translated">提供访问本地相机卷/图库的功能。</target>
        </trans-unit>
        <trans-unit id="8af1f64c746bdf9179aea81610b674599deea662" translate="yes" xml:space="preserve">
          <source>Provides access to the permissions model introduced in Android M.</source>
          <target state="translated">提供对Android M中引入的权限模型的访问。</target>
        </trans-unit>
        <trans-unit id="9a0bbc1222ce5515c4d50977a9f6f5e4bcb51707" translate="yes" xml:space="preserve">
          <source>Provides additional metadata like &lt;code&gt;index&lt;/code&gt; if you need it, as well as a more generic &lt;code&gt;separators.updateProps&lt;/code&gt; function which let you set whatever props you want to change the rendering of either the leading separator or trailing separator in case the more common &lt;code&gt;highlight&lt;/code&gt; and &lt;code&gt;unhighlight&lt;/code&gt; (which set the &lt;code&gt;highlighted: boolean&lt;/code&gt; prop) are insufficient for your use case.</source>
          <target state="translated">提供了像其他元数据 &lt;code&gt;index&lt;/code&gt; ，如果你需要它，以及一个更通用的 &lt;code&gt;separators.updateProps&lt;/code&gt; 功能，让你设置你想改变无论是领先的分离器或在落后的情况下分离比较常见的渲染任何道具 &lt;code&gt;highlight&lt;/code&gt; 和 &lt;code&gt;unhighlight&lt;/code&gt; （其设置 &lt;code&gt;highlighted: boolean&lt;/code&gt; 属性）对于您的用例而言是不够的。</target>
        </trans-unit>
        <trans-unit id="5b988dca8fd48b476698b713b9be98d17fb3725c" translate="yes" xml:space="preserve">
          <source>Provides additional traits to screen reader. By default no traits are provided unless specified otherwise in element.</source>
          <target state="translated">为屏幕阅读器提供额外的特征。除非在元素中另有规定,否则默认情况下不提供任何特征。</target>
        </trans-unit>
        <trans-unit id="455adea9ab1792f8913913bf5f8d9d6f53759a0d" translate="yes" xml:space="preserve">
          <source>Provides an abstraction layer similar to CSS stylesheets.</source>
          <target state="translated">提供一个类似于CSS样式表的抽象层。</target>
        </trans-unit>
        <trans-unit id="1d4e83876a925fd377513f7bebb1d0fd2381d5a5" translate="yes" xml:space="preserve">
          <source>Provides an initial value that will change when the user starts typing. Useful for simple use-cases where you do not want to deal with listening to events and updating the value prop to keep the controlled state in sync.</source>
          <target state="translated">提供一个初始值,当用户开始输入时,该值会发生变化。对于简单的使用情况很有用,在这些情况下,你不需要处理监听事件和更新值道具来保持受控状态的同步。</target>
        </trans-unit>
        <trans-unit id="5b9f9744f5cbfccd72ac37a052deb6894cce3186" translate="yes" xml:space="preserve">
          <source>Provides an interface for getting device dimensions.</source>
          <target state="translated">提供一个获取设备尺寸的接口。</target>
        </trans-unit>
        <trans-unit id="22830a229ef17aea443656c2e3ad4396554b19d6" translate="yes" xml:space="preserve">
          <source>Provides an interface for setting and getting content from the clipboard on both iOS and Android.</source>
          <target state="translated">提供了一个在iOS和Android上设置和获取剪贴板内容的界面。</target>
        </trans-unit>
        <trans-unit id="04ccc8d113c8ee75b2cc0f08737a461e8a2aa94d" translate="yes" xml:space="preserve">
          <source>Provides efficient data processing and access to the &lt;code&gt;ListView&lt;/code&gt; component. A &lt;code&gt;ListViewDataSource&lt;/code&gt; is created with functions for extracting data from the input blob, and comparing elements (with default implementations for convenience). The input blob can be as simple as an array of strings, or an object with rows nested inside section objects.</source>
          <target state="translated">提供有效的数据处理和对 &lt;code&gt;ListView&lt;/code&gt; 组件的访问。创建的 &lt;code&gt;ListViewDataSource&lt;/code&gt; 具有用于从输入Blob中提取数据并比较元素的功能（为方便起见，使用默认实现）。输入Blob可以像字符串数组一样简单，也可以像是将行嵌套在section对象内部的对象一样简单。</target>
        </trans-unit>
        <trans-unit id="a394e225c975153b8ec3b30e1c74d4cbeebdc035" translate="yes" xml:space="preserve">
          <source>Provides you with a list of the app&amp;rsquo;s notifications that are still displayed in Notification Center</source>
          <target state="translated">为您提供仍在通知中心显示的应用程序通知列表</target>
        </trans-unit>
        <trans-unit id="80302e5e618e94be54303777bcdd4fb66ace85e7" translate="yes" xml:space="preserve">
          <source>Pull requests</source>
          <target state="translated">拉动请求</target>
        </trans-unit>
        <trans-unit id="3110d5715ed52cab470d2301146695216c1de424" translate="yes" xml:space="preserve">
          <source>Pull requests like these usually have the label 'Needs response from author'. If there has been no reply in the last 30 days, close it with a response like the following:</source>
          <target state="translated">像这样的拉取请求通常会有 &quot;需要作者回复 &quot;的标签。如果在过去的30天内没有回复,就用下面这样的回复来关闭它。</target>
        </trans-unit>
        <trans-unit id="73e510c476a322b7d7e1f945dc3449f8fb8485aa" translate="yes" xml:space="preserve">
          <source>Pull to Refresh.</source>
          <target state="translated">拉动刷新。</target>
        </trans-unit>
        <trans-unit id="ea130c56ea7f482c6eeb4654059860a84f24305d" translate="yes" xml:space="preserve">
          <source>PushNotificationIOS</source>
          <target state="translated">PushNotificationIOS</target>
        </trans-unit>
        <trans-unit id="e1de678680540b26391b60bd657ff8e71e96db80" translate="yes" xml:space="preserve">
          <source>PushNotificationIOS.abandonPermissions()</source>
          <target state="translated">PushNotificationIOS.abandonPermissions()</target>
        </trans-unit>
        <trans-unit id="e12d19cd0c53f746180fda55b3abc4bcb699e046" translate="yes" xml:space="preserve">
          <source>PushNotificationIOS.addEventListener()</source>
          <target state="translated">PushNotificationIOS.addEventListener()</target>
        </trans-unit>
        <trans-unit id="0b5cb154833ce65726f3ad704a57bcb2fe4f9d6e" translate="yes" xml:space="preserve">
          <source>PushNotificationIOS.cancelAllLocalNotifications()</source>
          <target state="translated">PushNotificationIOS.cancelAllLocalNotifications()</target>
        </trans-unit>
        <trans-unit id="18ab449732b296ecc54bd0815a84595970936abc" translate="yes" xml:space="preserve">
          <source>PushNotificationIOS.cancelLocalNotifications()</source>
          <target state="translated">PushNotificationIOS.cancelLocalNotifications()</target>
        </trans-unit>
        <trans-unit id="bd00c33490be906a6417b620c4ac64a2062e5637" translate="yes" xml:space="preserve">
          <source>PushNotificationIOS.checkPermissions()</source>
          <target state="translated">PushNotificationIOS.checkPermissions()</target>
        </trans-unit>
        <trans-unit id="cf4fc0fc99d8d9c6cd44ae65e24f2cc7b354ff7b" translate="yes" xml:space="preserve">
          <source>PushNotificationIOS.constructor()</source>
          <target state="translated">PushNotificationIOS.constructor()</target>
        </trans-unit>
        <trans-unit id="fba72252fa9aa3cb5e7d9541e92160c04c0f498a" translate="yes" xml:space="preserve">
          <source>PushNotificationIOS.finish()</source>
          <target state="translated">PushNotificationIOS.finish()</target>
        </trans-unit>
        <trans-unit id="23330113b90274b9dd2b0ff8770e43d5458827ec" translate="yes" xml:space="preserve">
          <source>PushNotificationIOS.getAlert()</source>
          <target state="translated">PushNotificationIOS.getAlert()</target>
        </trans-unit>
        <trans-unit id="e07d741ef0345895aa914483792a68dc79e4fbb8" translate="yes" xml:space="preserve">
          <source>PushNotificationIOS.getApplicationIconBadgeNumber()</source>
          <target state="translated">PushNotificationIOS.getApplicationIconBadgeNumber()</target>
        </trans-unit>
        <trans-unit id="2450a5ff0048ed34b07ea02d4c5934d2889c5216" translate="yes" xml:space="preserve">
          <source>PushNotificationIOS.getBadgeCount()</source>
          <target state="translated">PushNotificationIOS.getBadgeCount()</target>
        </trans-unit>
        <trans-unit id="f16ddb251190eec26473189409f1a923ea8380c1" translate="yes" xml:space="preserve">
          <source>PushNotificationIOS.getCategory()</source>
          <target state="translated">PushNotificationIOS.getCategory()</target>
        </trans-unit>
        <trans-unit id="a3bca079ba26c069d1d340a877e9d9680209b542" translate="yes" xml:space="preserve">
          <source>PushNotificationIOS.getContentAvailable()</source>
          <target state="translated">PushNotificationIOS.getContentAvailable()</target>
        </trans-unit>
        <trans-unit id="db05c2625290215b48de5e036eff46cad8fedfbf" translate="yes" xml:space="preserve">
          <source>PushNotificationIOS.getData()</source>
          <target state="translated">PushNotificationIOS.getData()</target>
        </trans-unit>
        <trans-unit id="90c7645e7e5905d74f8949a6949c979979ec522c" translate="yes" xml:space="preserve">
          <source>PushNotificationIOS.getDeliveredNotifications()</source>
          <target state="translated">PushNotificationIOS.getDeliveredNotifications()</target>
        </trans-unit>
        <trans-unit id="5333bd66eac6db3f8eed75283f1d2da6b71bb642" translate="yes" xml:space="preserve">
          <source>PushNotificationIOS.getInitialNotification()</source>
          <target state="translated">PushNotificationIOS.getInitialNotification()</target>
        </trans-unit>
        <trans-unit id="998f8afa3b45e5af134daf584382ed5e2f30202a" translate="yes" xml:space="preserve">
          <source>PushNotificationIOS.getMessage()</source>
          <target state="translated">PushNotificationIOS.getMessage()</target>
        </trans-unit>
        <trans-unit id="575afdc80060b9770ff23d45394f26b475275ab3" translate="yes" xml:space="preserve">
          <source>PushNotificationIOS.getScheduledLocalNotifications()</source>
          <target state="translated">PushNotificationIOS.getScheduledLocalNotifications()</target>
        </trans-unit>
        <trans-unit id="6dbd11a5ccbd869efd6c4c8b4636d7b05ecb4a68" translate="yes" xml:space="preserve">
          <source>PushNotificationIOS.getSound()</source>
          <target state="translated">PushNotificationIOS.getSound()</target>
        </trans-unit>
        <trans-unit id="d68fb2a26967de4e014249eba98a18c413a9f629" translate="yes" xml:space="preserve">
          <source>PushNotificationIOS.presentLocalNotification()</source>
          <target state="translated">PushNotificationIOS.presentLocalNotification()</target>
        </trans-unit>
        <trans-unit id="dde8cd9545152ee63b65edc5dbd5254d1517e6e9" translate="yes" xml:space="preserve">
          <source>PushNotificationIOS.removeAllDeliveredNotifications()</source>
          <target state="translated">PushNotificationIOS.removeAllDeliveredNotifications()</target>
        </trans-unit>
        <trans-unit id="63106b457bf900a4cb72f31371501c36c5872a5e" translate="yes" xml:space="preserve">
          <source>PushNotificationIOS.removeDeliveredNotifications()</source>
          <target state="translated">PushNotificationIOS.removeDeliveredNotifications()</target>
        </trans-unit>
        <trans-unit id="2758ad67ab527b4dd462ac81e50f7ed1c20aca94" translate="yes" xml:space="preserve">
          <source>PushNotificationIOS.removeEventListener()</source>
          <target state="translated">PushNotificationIOS.removeEventListener()</target>
        </trans-unit>
        <trans-unit id="aaa6376053b23a2f0fcfbe2f37f767c769e97f56" translate="yes" xml:space="preserve">
          <source>PushNotificationIOS.requestPermissions()</source>
          <target state="translated">PushNotificationIOS.requestPermissions()</target>
        </trans-unit>
        <trans-unit id="db4a64f0a632e5d76bb870451743da363297f604" translate="yes" xml:space="preserve">
          <source>PushNotificationIOS.scheduleLocalNotification()</source>
          <target state="translated">PushNotificationIOS.scheduleLocalNotification()</target>
        </trans-unit>
        <trans-unit id="6a08b9c60c604a13a9b3bee680a7eabe49d80052" translate="yes" xml:space="preserve">
          <source>PushNotificationIOS.setApplicationIconBadgeNumber()</source>
          <target state="translated">PushNotificationIOS.setApplicationIconBadgeNumber()</target>
        </trans-unit>
        <trans-unit id="c475ee60fc1db4407f668f6f022d1bc04e0623e0" translate="yes" xml:space="preserve">
          <source>Query whether a screen reader is currently enabled. Returns a promise which resolves to a boolean. The result is &lt;code&gt;true&lt;/code&gt; when a screen reader is enabled and &lt;code&gt;false&lt;/code&gt; otherwise.</source>
          <target state="translated">查询当前是否启用了屏幕阅读器。返回解析为布尔值的promise。启用屏幕阅读器时，结果为 &lt;code&gt;true&lt;/code&gt; ，否则为 &lt;code&gt;false&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="f3b1be8c4a78ff7cff83e84ec4e1b998ffb7c9d8" translate="yes" xml:space="preserve">
          <source>Questions should absolutely be asked on Stack Overflow rather than GitHub. Maintainers should encourage contributors to ask on Stack Overflow, before closing the issue. Feel free to also answer some &lt;a href=&quot;https://stackoverflow.com/tags/react-native&quot;&gt;questions on Stack Overflow&lt;/a&gt;, you'll get rep!</source>
          <target state="translated">绝对应该在Stack Overflow而不是GitHub上提问。维护人员应鼓励贡献者在结束问题之前就堆栈溢出进行询问。您也可以&lt;a href=&quot;https://stackoverflow.com/tags/react-native&quot;&gt;在Stack Overflow上&lt;/a&gt;回答一些问题，您将获得代表！</target>
        </trans-unit>
        <trans-unit id="455083cac2ae96eabe3895762b6080aa09e6afa4" translate="yes" xml:space="preserve">
          <source>Quick Start</source>
          <target state="translated">快速入门</target>
        </trans-unit>
        <trans-unit id="30db29361a35d1b08aeb3c27b8711a3458469d2a" translate="yes" xml:space="preserve">
          <source>Rasterization incurs an off-screen drawing pass and the bitmap consumes memory. Test and measure when using this property.</source>
          <target state="translated">栅格化会产生屏幕外的绘制通道,位图会消耗内存。使用此属性时要进行测试和测量。</target>
        </trans-unit>
        <trans-unit id="cc8727bcb4419d55ca1374599e5c4c8f0f93bedc" translate="yes" xml:space="preserve">
          <source>Rate-limited row rendering - By default, only one row is rendered per event-loop (customizable with the &lt;code&gt;pageSize&lt;/code&gt; prop). This breaks up the work into smaller chunks to reduce the chance of dropping frames while rendering rows.</source>
          <target state="translated">限速行渲染-默认情况下，每个事件循环仅渲染一行（可通过 &lt;code&gt;pageSize&lt;/code&gt; 属性进行自定义）。这样可以将工作分解为较小的块，以减少渲染行时丢帧的机会。</target>
        </trans-unit>
        <trans-unit id="0b8d9d4504138b82d751a5f283a8095308246310" translate="yes" xml:space="preserve">
          <source>React Developer Tools</source>
          <target state="translated">React开发工具</target>
        </trans-unit>
        <trans-unit id="ac81992b1b421bce8e30d7cdba9eefa40ae7ca2a" translate="yes" xml:space="preserve">
          <source>React Native Documentation</source>
          <target state="translated">React Native文档</target>
        </trans-unit>
        <trans-unit id="cf4971fef74056c8be1ddb73372b3b58e98ff78f" translate="yes" xml:space="preserve">
          <source>React Native allows you to determine, in JS, the size of the RN app and provide it to the owner of the hosting &lt;code&gt;RCTRootView&lt;/code&gt;. The owner is then responsible for re-laying out the subviews and keeping the UI consistent. We achieve this with &lt;code&gt;RCTRootView&lt;/code&gt;'s flexibility modes.</source>
          <target state="translated">React Native允许您在JS中确定RN应用程序的大小，并将其提供给托管 &lt;code&gt;RCTRootView&lt;/code&gt; 的所有者。然后，所有者负责重新布局子视图并保持UI一致。我们使用 &lt;code&gt;RCTRootView&lt;/code&gt; 的灵活性模式来实现。</target>
        </trans-unit>
        <trans-unit id="ac2608784f82dcb558c57237500a49a74ec5ce12" translate="yes" xml:space="preserve">
          <source>React Native also requires a recent version of the &lt;a href=&quot;http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html&quot;&gt;Java SE Development Kit (JDK)&lt;/a&gt;, as well as Python 2. Both can be installed using Chocolatey.</source>
          <target state="translated">React Native还需要&lt;a href=&quot;http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html&quot;&gt;Java SE Development Kit（JDK）&lt;/a&gt;和Python 2 的最新版本。两者都可以使用Chocolatey安装。</target>
        </trans-unit>
        <trans-unit id="07ba54aff6adeb969b9d417c3a4c59fccf829516" translate="yes" xml:space="preserve">
          <source>React Native also supports &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/WebSocket&quot;&gt;WebSockets&lt;/a&gt;, a protocol which provides full-duplex communication channels over a single TCP connection.</source>
          <target state="translated">React Native还支持&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/WebSocket&quot;&gt;WebSockets&lt;/a&gt;，该协议可通过单个TCP连接提供全双工通信通道。</target>
        </trans-unit>
        <trans-unit id="8ca5d5e49afab1628e2f9ff9738f2534c0c6e2da" translate="yes" xml:space="preserve">
          <source>React Native content with fixed size</source>
          <target state="translated">具有固定大小的React Native内容</target>
        </trans-unit>
        <trans-unit id="03111f5739192894e6ffc5505e58d5a3504926e9" translate="yes" xml:space="preserve">
          <source>React Native content with flexible size</source>
          <target state="translated">具有灵活尺寸的React Native内容</target>
        </trans-unit>
        <trans-unit id="5898b1d775af2086dc485b8ee726cb955536f8d9" translate="yes" xml:space="preserve">
          <source>React Native does not compile when being used as a CocoaPod</source>
          <target state="translated">当作为CocoaPod使用时,React Native不能编译。</target>
        </trans-unit>
        <trans-unit id="6a9689ff32c5321c5260d6ecf09f9dd861e9c859" translate="yes" xml:space="preserve">
          <source>React Native enables you to perform cross-language function calls. You can execute custom native code from JS and vice versa. Unfortunately, depending on the side we are working on, we achieve the same goal in different ways. For native - we use events mechanism to schedule an execution of a handler function in JS, while for React Native we directly call methods exported by native modules.</source>
          <target state="translated">React Native使你能够执行跨语言的函数调用。你可以从JS中执行自定义的本地代码,反之亦然。遗憾的是,根据我们工作的侧重点,我们以不同的方式实现相同的目标。对于原生--我们使用事件机制来安排JS中处理函数的执行,而对于React Native,我们直接调用原生模块导出的方法。</target>
        </trans-unit>
        <trans-unit id="2ca2618fe5a4051ea24cb0b4d7090f3d2f5ceb0c" translate="yes" xml:space="preserve">
          <source>React Native has a &lt;a href=&quot;https://github.com/facebook/react-native/tree/master/local-cli&quot;&gt;&lt;code&gt;local-cli&lt;/code&gt;&lt;/a&gt; folder with a file named &lt;a href=&quot;https://github.com/facebook/react-native/blob/master/local-cli/cliEntry.js&quot;&gt;&lt;code&gt;cliEntry.js&lt;/code&gt;&lt;/a&gt;. Here, the commands are read from &lt;code&gt;commands.js&lt;/code&gt; and added as possible CLI commands. &lt;em&gt;E.G.&lt;/em&gt; the &lt;code&gt;react-native link&lt;/code&gt; command, exists in the &lt;a href=&quot;https://github.com/facebook/react-native/blob/master/local-cli/link/&quot;&gt;&lt;code&gt;react-native/local-cli/link&lt;/code&gt;&lt;/a&gt; folder, and is required in &lt;code&gt;commands.js&lt;/code&gt;, which will register it as a documented command to be exposed to the CLI.</source>
          <target state="translated">React Native有一个&lt;a href=&quot;https://github.com/facebook/react-native/tree/master/local-cli&quot;&gt; &lt;code&gt;local-cli&lt;/code&gt; &lt;/a&gt;文件夹，其中包含一个名为&lt;a href=&quot;https://github.com/facebook/react-native/blob/master/local-cli/cliEntry.js&quot;&gt; &lt;code&gt;cliEntry.js&lt;/code&gt; &lt;/a&gt;的文件。在这里，从commands.js中读取 &lt;code&gt;commands.js&lt;/code&gt; 并将其添加为可能的CLI命令。&lt;em&gt;例如&lt;/em&gt;， &lt;code&gt;react-native link&lt;/code&gt; 命令存在于&lt;a href=&quot;https://github.com/facebook/react-native/blob/master/local-cli/link/&quot;&gt; &lt;code&gt;react-native/local-cli/link&lt;/code&gt; &lt;/a&gt;文件夹中，在 &lt;code&gt;commands.js&lt;/code&gt; 中是必需的，它将注册为文档化的命令以显示给CLI。</target>
        </trans-unit>
        <trans-unit id="73ce3cd086a9047921aeff1492ac6ef322b314d1" translate="yes" xml:space="preserve">
          <source>React Native implements a polyfill for WebSockets. These &lt;a href=&quot;https://github.com/facebook/react-native/blob/master/Libraries/Core/InitializeCore.js&quot;&gt;polyfills&lt;/a&gt; are initialized as part of the react-native module that you include in your application through &lt;code&gt;import React from 'react'&lt;/code&gt;. If you load another module that requires WebSockets, such as &lt;a href=&quot;https://github.com/facebook/react-native/issues/3645&quot;&gt;Firebase&lt;/a&gt;, be sure to load/require it after react-native:</source>
          <target state="translated">React Native为WebSockets实现了一个polyfill。通过 &lt;code&gt;import React from 'react'&lt;/code&gt; &lt;a href=&quot;https://github.com/facebook/react-native/blob/master/Libraries/Core/InitializeCore.js&quot;&gt;可以&lt;/a&gt;将这些polyfill初始化为您在应用程序中包含的react-native模块的一部分。如果您加载另一个需要WebSockets的模块，例如&lt;a href=&quot;https://github.com/facebook/react-native/issues/3645&quot;&gt;Firebase&lt;/a&gt;，请确保在react-native之后加载/要求它：</target>
        </trans-unit>
        <trans-unit id="62c7f3bcca6c31ed80ce4729c07394d18dd66225" translate="yes" xml:space="preserve">
          <source>React Native is also contributed to by a core team of engineers from several companies outside of Facebook, as well as many other open source &lt;a href=&quot;https://github.com/facebook/react-native/graphs/contributors&quot;&gt;contributors&lt;/a&gt;. The core team coordinates open source releases through the &lt;a href=&quot;https://github.com/react-native-community/react-native-releases&quot;&gt;&lt;code&gt;react-native-releases&lt;/code&gt;&lt;/a&gt; repository on GitHub.</source>
          <target state="translated">来自Facebook以外多家公司的核心工程师团队以及许多其他开源&lt;a href=&quot;https://github.com/facebook/react-native/graphs/contributors&quot;&gt;贡献者&lt;/a&gt;也为React Native做出了贡献。核心团队通过GitHub上的&lt;a href=&quot;https://github.com/react-native-community/react-native-releases&quot;&gt; &lt;code&gt;react-native-releases&lt;/code&gt; &lt;/a&gt;存储库协调开源发布。</target>
        </trans-unit>
        <trans-unit id="16c9989d1bcf6dcbf471824ea0139746af2f4162" translate="yes" xml:space="preserve">
          <source>React Native is great when you are starting a new mobile app from scratch. However, it also works well for adding a single view or user flow to existing native applications. With a few steps, you can add new React Native based features, screens, views, etc.</source>
          <target state="translated">当你从头开始一个新的移动应用时,React Native非常棒。然而,它也可以很好地将单个视图或用户流添加到现有的原生应用程序中。通过几个步骤,你可以添加新的基于React Native的功能、屏幕、视图等。</target>
        </trans-unit>
        <trans-unit id="68c50e4c90ab7c0e0d3825d793507ec345a79a09" translate="yes" xml:space="preserve">
          <source>React Native is inspired by React, so the basic idea of the information flow is similar. The flow in React is one-directional. We maintain a hierarchy of components, in which each component depends only on its parent and its own internal state. We do this with properties: data is passed from a parent to its children in a top-down manner. If an ancestor component relies on the state of its descendant, one should pass down a callback to be used by the descendant to update the ancestor.</source>
          <target state="translated">React Native的灵感来自于React,所以信息流的基本思路是相似的。React中的信息流是单向的。我们维护了一个组件的层次结构,其中每个组件只依赖于它的父级和它自己的内部状态。我们通过属性来实现这一点:数据从父体以自上而下的方式传递给它的子体。如果一个祖先组件依赖于它的子代的状态,就应该向下传递一个回调,让子代用来更新祖先。</target>
        </trans-unit>
        <trans-unit id="2c84ad346c9c35b2d45eec49831e7313fba7240b" translate="yes" xml:space="preserve">
          <source>React Native is like React, but it uses native components instead of web components as building blocks. So to understand the basic structure of a React Native app, you need to understand some of the basic React concepts, like JSX, components, &lt;code&gt;state&lt;/code&gt;, and &lt;code&gt;props&lt;/code&gt;. If you already know React, you still need to learn some React-Native-specific stuff, like the native components. This tutorial is aimed at all audiences, whether you have React experience or not.</source>
          <target state="translated">React Native类似于React，但是它使用本地组件而不是Web组件作为构建块。因此，要了解React Native应用程序的基本结构，您需要了解一些基本的React概念，例如JSX，组件， &lt;code&gt;state&lt;/code&gt; 和 &lt;code&gt;props&lt;/code&gt; 。如果您已经了解React，那么您仍然需要学习一些React-Native特有的知识，例如本机组件。本教程面向所有受众，无论您是否具有React经验。</target>
        </trans-unit>
        <trans-unit id="bfa3176e9b1f82348ef28e16a8ffeac7a2ee0e97" translate="yes" xml:space="preserve">
          <source>React Native is one of Facebook's first open source projects that is both under very active development and is also being used to ship code to everybody using Facebook's mobile apps. If you're interested in contributing to React Native, hopefully this document makes the process for contributing clear.</source>
          <target state="translated">React Native是Facebook最早的开源项目之一,它既在非常积极的开发中,也被用来向大家运送代码,使用Facebook的移动应用。如果你有兴趣为React Native做贡献,希望这篇文档能让你清楚贡献的流程。</target>
        </trans-unit>
        <trans-unit id="2f6da74bda24a7ec0c53aad5b2b6669e03cda165" translate="yes" xml:space="preserve">
          <source>React Native provides a module that detects the platform in which the app is running. You can use the detection logic to implement platform-specific code. Use this option when only small parts of a component are platform-specific.</source>
          <target state="translated">React Native提供了一个检测应用运行平台的模块。您可以使用检测逻辑来实现平台特定的代码。当一个组件只有小部分是平台特定的时候,可以使用这个选项。</target>
        </trans-unit>
        <trans-unit id="a51253a9ed6a6dadb60316d6e4e2bf2e2d3ab5b3" translate="yes" xml:space="preserve">
          <source>React Native provides a number of built-in components. You will find a full list of components and APIs on the sidebar to the left. If you're not sure where to get started, take a look at the following categories:</source>
          <target state="translated">React Native提供了许多内置组件。你可以在左侧的侧栏上找到组件和API的完整列表。如果你不知道从哪里开始,可以看看下面的类别。</target>
        </trans-unit>
        <trans-unit id="6911fe7605c9b3a12467de81be3e29e3f9283506" translate="yes" xml:space="preserve">
          <source>React Native provides a suite of components for presenting lists of data. Generally, you'll want to use either &lt;a href=&quot;flatlist&quot;&gt;FlatList&lt;/a&gt; or &lt;a href=&quot;sectionlist&quot;&gt;SectionList&lt;/a&gt;.</source>
          <target state="translated">React Native提供了一套用于显示数据列表的组件。通常，您将要使用&lt;a href=&quot;flatlist&quot;&gt;FlatList&lt;/a&gt;或&lt;a href=&quot;sectionlist&quot;&gt;SectionList&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="45174f540a9960d5218e3a5aedc3a3c1c2edce5d" translate="yes" xml:space="preserve">
          <source>React Native provides a unified way of managing images and other media assets in your iOS and Android apps. To add a static image to your app, place it somewhere in your source code tree and reference it like this:</source>
          <target state="translated">React Native提供了一种统一的方式来管理iOS和Android应用中的图片和其他媒体资产。要将静态图片添加到你的应用中,请将其放置在你的源代码树的某个地方,并像这样引用。</target>
        </trans-unit>
        <trans-unit id="d9b8247785a9a76b6ba4a3c4ad96d60f9de9f836" translate="yes" xml:space="preserve">
          <source>React Native provides facilities to make it easier to test integrated components that require both native and JS components to communicate across the bridge. The two main components are &lt;code&gt;RCTTestRunner&lt;/code&gt; and &lt;code&gt;RCTTestModule&lt;/code&gt;. &lt;code&gt;RCTTestRunner&lt;/code&gt; sets up the ReactNative environment and provides facilities to run the tests as &lt;code&gt;XCTestCase&lt;/code&gt;s in Xcode (&lt;code&gt;runTest:module&lt;/code&gt; is the simplest method). &lt;code&gt;RCTTestModule&lt;/code&gt; is exported to JS as &lt;code&gt;NativeModules.TestModule&lt;/code&gt;.</source>
          <target state="translated">React Native提供了一些工具，可以简化测试需要本机和JS组件通过网桥进行通信的集成组件的过程。两个主要组件是 &lt;code&gt;RCTTestRunner&lt;/code&gt; 和 &lt;code&gt;RCTTestModule&lt;/code&gt; 。 &lt;code&gt;RCTTestRunner&lt;/code&gt; 设置了ReactNative环境，并提供了以Xcode中的 &lt;code&gt;XCTestCase&lt;/code&gt; 的形式运行测试的工具（ &lt;code&gt;runTest:module&lt;/code&gt; 是最简单的方法）。 &lt;code&gt;RCTTestModule&lt;/code&gt; 作为 &lt;code&gt;NativeModules.TestModule&lt;/code&gt; 导出到JS 。</target>
        </trans-unit>
        <trans-unit id="147541db6a4f87d8df4298a997281eb4b711cdd9" translate="yes" xml:space="preserve">
          <source>React Native provides the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API&quot;&gt;Fetch API&lt;/a&gt; for your networking needs. Fetch will seem familiar if you have used &lt;code&gt;XMLHttpRequest&lt;/code&gt; or other networking APIs before. You may refer to MDN's guide on &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API/Using_Fetch&quot;&gt;Using Fetch&lt;/a&gt; for additional information.</source>
          <target state="translated">React Native提供了&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API&quot;&gt;Fetch API&lt;/a&gt;来满足您的网络需求。如果您以前使用过 &lt;code&gt;XMLHttpRequest&lt;/code&gt; 或其他网络API，则提取似乎很熟悉。您可以参考MDN的《&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API/Using_Fetch&quot;&gt;使用提取》&lt;/a&gt;指南获取更多信息。</target>
        </trans-unit>
        <trans-unit id="955833e7abe130f447a2f103981ba5420d08f445" translate="yes" xml:space="preserve">
          <source>React Native provides two complementary animation systems: &lt;a href=&quot;animations#animated-api&quot;&gt;&lt;code&gt;Animated&lt;/code&gt;&lt;/a&gt; for granular and interactive control of specific values, and &lt;a href=&quot;animations#layoutanimation-api&quot;&gt;&lt;code&gt;LayoutAnimation&lt;/code&gt;&lt;/a&gt; for animated global layout transactions.</source>
          <target state="translated">反应原住民提供两种互补的动画系统：&lt;a href=&quot;animations#animated-api&quot;&gt; &lt;code&gt;Animated&lt;/code&gt; &lt;/a&gt;为特定值的颗粒和交互式控制，并&lt;a href=&quot;animations#layoutanimation-api&quot;&gt; &lt;code&gt;LayoutAnimation&lt;/code&gt; &lt;/a&gt;为动画全球布局的交易。</target>
        </trans-unit>
        <trans-unit id="3d1997d2007d297c88ff6c5a745f9e51ab7710c9" translate="yes" xml:space="preserve">
          <source>React Native provides two ways to easily organize your code and separate it by platform:</source>
          <target state="translated">React Native提供了两种方式来轻松组织你的代码,并按平台进行分离。</target>
        </trans-unit>
        <trans-unit id="f9797c7d9024909a275710549a58ce7f03cc8848" translate="yes" xml:space="preserve">
          <source>React Native requires a recent version of the Java SE Development Kit (JDK). &lt;a href=&quot;http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html&quot;&gt;Download and install JDK 8 or newer&lt;/a&gt; if needed.</source>
          <target state="translated">React Native需要Java SE开发工具包（JDK）的最新版本。如果需要&lt;a href=&quot;http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html&quot;&gt;，请下载并安装JDK 8或更高版本&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="fecd003d1c93624e94be4522348a999da504f23b" translate="yes" xml:space="preserve">
          <source>React Native ships with the &lt;a href=&quot;https://babeljs.io&quot;&gt;Babel JavaScript compiler&lt;/a&gt;. Check &lt;a href=&quot;https://babeljs.io/docs/plugins/#transform-plugins&quot;&gt;Babel documentation&lt;/a&gt; on its supported transformations for more details.</source>
          <target state="translated">&lt;a href=&quot;https://babeljs.io&quot;&gt;Babel JavaScript编译器&lt;/a&gt;随附有React Native 。有关更多信息，请查阅&lt;a href=&quot;https://babeljs.io/docs/plugins/#transform-plugins&quot;&gt;Babel文档中&lt;/a&gt;有关其支持的转换的信息。</target>
        </trans-unit>
        <trans-unit id="65c8816820b5e961da45700827da3c1f97267242" translate="yes" xml:space="preserve">
          <source>React Native still has the concept of style inheritance, but limited to text subtrees. In this case, the second part will be both bold and red.</source>
          <target state="translated">React Native仍然有样式继承的概念,但仅限于文本子树。在这种情况下,第二部分将同时采用粗体和红色。</target>
        </trans-unit>
        <trans-unit id="8a1ee6e19529899c752f263fd783095cddc79efd" translate="yes" xml:space="preserve">
          <source>React Native supports &lt;code&gt;rgb()&lt;/code&gt; and &lt;code&gt;rgba()&lt;/code&gt; in both hexadecimal and functional notation:</source>
          <target state="translated">React Native支持十六进制和功能表示法的 &lt;code&gt;rgb()&lt;/code&gt; 和 &lt;code&gt;rgba()&lt;/code&gt; ：</target>
        </trans-unit>
        <trans-unit id="d13d26cd4455c7bb023b4f3255f3decd5a601122" translate="yes" xml:space="preserve">
          <source>React Native supports a few keyboard shortcuts in the iOS Simulator. They are described below. To enable them, open the Hardware menu, select Keyboard, and make sure that &quot;Connect Hardware Keyboard&quot; is checked.</source>
          <target state="translated">React Native支持iOS模拟器中的一些键盘快捷键。下面将对它们进行介绍。要启用它们,请打开硬件菜单,选择键盘,并确保 &quot;连接硬件键盘 &quot;被选中。</target>
        </trans-unit>
        <trans-unit id="fd494e0414b8c98d70a8fb1421016ef40e5f66f1" translate="yes" xml:space="preserve">
          <source>React Native uses the wildcard DNS service &lt;strong&gt;xip.io&lt;/strong&gt; to address your device. Some routers have security features to prevent DNS Servers to resolve anything in the local IP range.</source>
          <target state="translated">React Native使用通配符DNS服务&lt;strong&gt;xip.io&lt;/strong&gt;来寻址您的设备。某些路由器具有安全功能，可防止DNS服务器解析本地IP范围内的任何内容。</target>
        </trans-unit>
        <trans-unit id="c63ef8ae4540186872f0bb6d8dda3c6c1fecb0e4" translate="yes" xml:space="preserve">
          <source>React Native will automatically pick up the right file based on the running platform.</source>
          <target state="translated">React Native会根据运行平台自动拾取正确的文件。</target>
        </trans-unit>
        <trans-unit id="22afcf1b96c3a370340668bcbdcff36d23ea4710" translate="yes" xml:space="preserve">
          <source>React Native will not expose any methods of &lt;code&gt;CalendarManager&lt;/code&gt; to JavaScript unless explicitly told to. This is done using the &lt;code&gt;RCT_EXPORT_METHOD()&lt;/code&gt; macro:</source>
          <target state="translated">除非明确告知，否则React Native不会将 &lt;code&gt;CalendarManager&lt;/code&gt; 的任何方法公开给JavaScript。这是使用 &lt;code&gt;RCT_EXPORT_METHOD()&lt;/code&gt; 宏完成的：</target>
        </trans-unit>
        <trans-unit id="a4a20ba54858fbaec65996155932c701efd142f4" translate="yes" xml:space="preserve">
          <source>React Navigation</source>
          <target state="translated">React导航</target>
        </trans-unit>
        <trans-unit id="6264dd4d1629fa0d0d1ceb041022d277beb970a8" translate="yes" xml:space="preserve">
          <source>React Navigation routers make it easy to override navigation logic or integrate it into redux. Because routers can be nested inside each other, developers can override navigation logic for one area of the app without making widespread changes.</source>
          <target state="translated">React Navigation 路由器可以轻松覆盖导航逻辑或将其集成到 redux 中。因为路由器可以互相嵌套,所以开发者可以覆盖应用中某一区域的导航逻辑,而不做大范围的改变。</target>
        </trans-unit>
        <trans-unit id="93e602b8a83e6f48a3384407ed72cd3af12621a0" translate="yes" xml:space="preserve">
          <source>React component that wraps the Android-only &lt;a href=&quot;https://developer.android.com/reference/android/support/v7/widget/Toolbar.html&quot;&gt;&lt;code&gt;Toolbar&lt;/code&gt; widget&lt;/a&gt;. A Toolbar can display a logo, navigation icon (e.g. hamburger menu), a title &amp;amp; subtitle and a list of actions. The title and subtitle are expanded so the logo and navigation icons are displayed on the left, title and subtitle in the middle and the actions on the right.</source>
          <target state="translated">包装了仅Android &lt;a href=&quot;https://developer.android.com/reference/android/support/v7/widget/Toolbar.html&quot;&gt; &lt;code&gt;Toolbar&lt;/code&gt; 小部件的&lt;/a&gt; React组件。工具栏可以显示徽标，导航图标（例如，汉堡菜单），标题和副标题以及操作列表。标题和副标题被展开，因此徽标和导航图标显示在左侧，标题和副标题显示在中间，操作显示在右侧。</target>
        </trans-unit>
        <trans-unit id="6fdb5811f21f0c43e01c7bdb4897828b0a32e290" translate="yes" xml:space="preserve">
          <source>React component that wraps the platform &lt;code&gt;DrawerLayout&lt;/code&gt; (Android only). The Drawer (typically used for navigation) is rendered with &lt;code&gt;renderNavigationView&lt;/code&gt; and direct children are the main view (where your content goes). The navigation view is initially not visible on the screen, but can be pulled in from the side of the window specified by the &lt;code&gt;drawerPosition&lt;/code&gt; prop and its width can be set by the &lt;code&gt;drawerWidth&lt;/code&gt; prop.</source>
          <target state="translated">包装平台 &lt;code&gt;DrawerLayout&lt;/code&gt; 的 React组件（仅适用于 Android）。Drawer（通常用于导航）是通过 &lt;code&gt;renderNavigationView&lt;/code&gt; 渲染的，直接子级是主视图（您的内容所在的位置）。导航视图最初在屏幕上不可见，但是可以从 &lt;code&gt;drawerPosition&lt;/code&gt; 道具指定的窗口一侧拉入，其宽度可以由 &lt;code&gt;drawerWidth&lt;/code&gt; 宽度道具设置。</target>
        </trans-unit>
        <trans-unit id="bf3dc2782eb12c95b89d05cfff229cc41327cf9f" translate="yes" xml:space="preserve">
          <source>React style object.</source>
          <target state="translated">React风格对象。</target>
        </trans-unit>
        <trans-unit id="8a896b33105b3433759f07778d6a094994ddd77c" translate="yes" xml:space="preserve">
          <source>ReactNative</source>
          <target state="translated">ReactNative</target>
        </trans-unit>
        <trans-unit id="e9fd327ae8d3c16a809bd67771713a0b46b18237" translate="yes" xml:space="preserve">
          <source>Read more about &lt;a href=&quot;https://github.com/facebook/react-native/blob/master/ReactAndroid/src/main/java/com/facebook/react/bridge/ReadableMap.java&quot;&gt;ReadableMap&lt;/a&gt; and &lt;a href=&quot;https://github.com/facebook/react-native/blob/master/ReactAndroid/src/main/java/com/facebook/react/bridge/ReadableArray.java&quot;&gt;ReadableArray&lt;/a&gt;</source>
          <target state="translated">阅读有关&lt;a href=&quot;https://github.com/facebook/react-native/blob/master/ReactAndroid/src/main/java/com/facebook/react/bridge/ReadableMap.java&quot;&gt;ReadableMap&lt;/a&gt;和&lt;a href=&quot;https://github.com/facebook/react-native/blob/master/ReactAndroid/src/main/java/com/facebook/react/bridge/ReadableArray.java&quot;&gt;ReadableArray的&lt;/a&gt;更多信息</target>
        </trans-unit>
        <trans-unit id="2bef910ce156d737e8bd786154ac6d1867fdab75" translate="yes" xml:space="preserve">
          <source>Read more about interpolation in the &lt;a href=&quot;animations#interpolation&quot;&gt;Animation&lt;/a&gt; guide.</source>
          <target state="translated">在&lt;a href=&quot;animations#interpolation&quot;&gt;动画&lt;/a&gt;指南中了解有关插值的更多信息。</target>
        </trans-unit>
        <trans-unit id="6f998916f72149b69bbbc92f229b0fb6de0e65a6" translate="yes" xml:space="preserve">
          <source>Read the guides on Native Modules (&lt;a href=&quot;native-modules-ios&quot;&gt;iOS&lt;/a&gt;, &lt;a href=&quot;native-modules-android&quot;&gt;Android&lt;/a&gt;) and Native UI Components (&lt;a href=&quot;native-components-ios&quot;&gt;iOS&lt;/a&gt;, &lt;a href=&quot;native-components-android&quot;&gt;Android&lt;/a&gt;) if you are interested in extending native functionality.</source>
          <target state="translated">如果您对扩展本机功能感兴趣，请阅读本机模块（&lt;a href=&quot;native-modules-ios&quot;&gt;iOS&lt;/a&gt;，&lt;a href=&quot;native-modules-android&quot;&gt;Android&lt;/a&gt;）和本机UI组件（&lt;a href=&quot;native-components-ios&quot;&gt;iOS&lt;/a&gt;，&lt;a href=&quot;native-components-android&quot;&gt;Android&lt;/a&gt;）上的指南。</target>
        </trans-unit>
        <trans-unit id="e4cd8f72fe822839c2f5fc3f963146ea1e7d8f45" translate="yes" xml:space="preserve">
          <source>Read through the &lt;a href=&quot;http://facebook.github.io/react-native/&quot;&gt;React Native docs&lt;/a&gt;. If you find anything that is confusing or can be improved, you can make edits by clicking &quot;Edit&quot; at the top of most docs.</source>
          <target state="translated">通读&lt;a href=&quot;http://facebook.github.io/react-native/&quot;&gt;React Native文档&lt;/a&gt;。如果您发现任何令人困惑或可以改进的地方，可以通过单击大多数文档顶部的&amp;ldquo;编辑&amp;rdquo;进行编辑。</target>
        </trans-unit>
        <trans-unit id="a8e9c0678e3d8e255267f3dede08a0df85d24519" translate="yes" xml:space="preserve">
          <source>Read through the &lt;a href=&quot;https://facebook.github.io/react-native/&quot;&gt;React Native docs&lt;/a&gt;. If you find anything that is confusing or can be improved, you can make edits by clicking &quot;Edit&quot; at the top of most docs.</source>
          <target state="translated">通读&lt;a href=&quot;https://facebook.github.io/react-native/&quot;&gt;React Native文档&lt;/a&gt;。如果您发现任何令人困惑或可以改进的地方，可以通过单击大多数文档顶部的&amp;ldquo;编辑&amp;rdquo;进行编辑。</target>
        </trans-unit>
        <trans-unit id="f80a83a128e889c5cbecf50338182cc394217dea" translate="yes" xml:space="preserve">
          <source>Red-green-blue</source>
          <target state="translated">Red-green-blue</target>
        </trans-unit>
        <trans-unit id="bca712724e2b6a9c09fb16e779c8c8852b87856a" translate="yes" xml:space="preserve">
          <source>RedBoxes and YellowBoxes are automatically disabled in release (production) builds.</source>
          <target state="translated">RedBoxes和YellowBoxes在发布(生产)版本中会被自动禁用。</target>
        </trans-unit>
        <trans-unit id="d0b44e05cc60c4aae202e937477304b4adfaa2eb" translate="yes" xml:space="preserve">
          <source>Refactoring the above code to use a promise instead of callbacks looks like this:</source>
          <target state="translated">将上面的代码重构为使用承诺而不是回调,看起来像这样。</target>
        </trans-unit>
        <trans-unit id="a9a5b32e85108a1bc6ff9fb29b3d80a1f2598b08" translate="yes" xml:space="preserve">
          <source>Refer to the &lt;a href=&quot;animations#animated-api&quot;&gt;Animations&lt;/a&gt; guide to see additional examples of &lt;code&gt;Animated&lt;/code&gt; in action.</source>
          <target state="translated">请参阅&amp;ldquo; &lt;a href=&quot;animations#animated-api&quot;&gt;动画&amp;rdquo;&lt;/a&gt;指南，以查看 &lt;code&gt;Animated&lt;/code&gt; 实例的其他示例。</target>
        </trans-unit>
        <trans-unit id="db1c784524e1b54011a95823026161f7c8517fe0" translate="yes" xml:space="preserve">
          <source>Reference</source>
          <target state="translated">Reference</target>
        </trans-unit>
        <trans-unit id="3e9ac17fc180bff8a7bb455b533de3de62529c8a" translate="yes" xml:space="preserve">
          <source>RefreshControl</source>
          <target state="translated">RefreshControl</target>
        </trans-unit>
        <trans-unit id="aaf8cfffbe74b7c2b12b426d9237b93f1edb7bf1" translate="yes" xml:space="preserve">
          <source>RefreshControl#colors</source>
          <target state="translated">RefreshControl#colors</target>
        </trans-unit>
        <trans-unit id="939e7bd0f2feb07d938de640577c2c9bf82061df" translate="yes" xml:space="preserve">
          <source>RefreshControl#enabled</source>
          <target state="translated">RefreshControl#enabled</target>
        </trans-unit>
        <trans-unit id="7242c8f9230df79737f9c8e28b6a937b58c180a7" translate="yes" xml:space="preserve">
          <source>RefreshControl#onRefresh</source>
          <target state="translated">RefreshControl#onRefresh</target>
        </trans-unit>
        <trans-unit id="c0dafaa3f11192d33640cfc6cf1676700a1361c0" translate="yes" xml:space="preserve">
          <source>RefreshControl#progressBackgroundColor</source>
          <target state="translated">RefreshControl#progressBackgroundColor</target>
        </trans-unit>
        <trans-unit id="02bbd8dfbf0a40afcbc87cea9deea36715bb7db8" translate="yes" xml:space="preserve">
          <source>RefreshControl#progressViewOffset</source>
          <target state="translated">RefreshControl#progressViewOffset</target>
        </trans-unit>
        <trans-unit id="025afd98a270745f44520a9bb5c60d4351606c98" translate="yes" xml:space="preserve">
          <source>RefreshControl#refreshing</source>
          <target state="translated">RefreshControl#refreshing</target>
        </trans-unit>
        <trans-unit id="e8ab371c1aa04c04db34f1fdf40c5a038b3e6b39" translate="yes" xml:space="preserve">
          <source>RefreshControl#size</source>
          <target state="translated">RefreshControl#size</target>
        </trans-unit>
        <trans-unit id="357cb8127be667b0b8967327390d1555cd081d85" translate="yes" xml:space="preserve">
          <source>RefreshControl#tintColor</source>
          <target state="translated">RefreshControl#tintColor</target>
        </trans-unit>
        <trans-unit id="8c40e0600e0b92f70c8dfc62cca2d6575bf9b189" translate="yes" xml:space="preserve">
          <source>RefreshControl#title</source>
          <target state="translated">RefreshControl#title</target>
        </trans-unit>
        <trans-unit id="4727ab46f7c886447595f677fae9025485bbe05d" translate="yes" xml:space="preserve">
          <source>RefreshControl#titleColor</source>
          <target state="translated">RefreshControl#titleColor</target>
        </trans-unit>
        <trans-unit id="37ff643f77aa449cc425e0fbdaa728de903a1e81" translate="yes" xml:space="preserve">
          <source>Register a headless task. A headless task is a bit of code that runs without a UI. @param taskKey the key associated with this task @param task a promise returning function that takes some data passed from the native side as the only argument; when the promise is resolved or rejected the native side is notified of this event and it may decide to destroy the JS context.</source>
          <target state="translated">注册一个无头任务。无头任务是一段没有UI运行的代码。@param taskKey 这个任务相关联的key @param task 一个承诺返回函数,它把从本机端传递过来的一些数据作为唯一的参数;当承诺被解析或拒绝时,本机端会被通知这个事件,它可能会决定销毁JS上下文。</target>
        </trans-unit>
        <trans-unit id="35b8cbca5b052e6c7adca51fb0091b777651ee62" translate="yes" xml:space="preserve">
          <source>Register for an &lt;a href=&quot;https://developer.apple.com/&quot;&gt;Apple developer account&lt;/a&gt; if you don't have one yet.</source>
          <target state="translated">如果您还没有&lt;a href=&quot;https://developer.apple.com/&quot;&gt;苹果开发者帐户&lt;/a&gt;，请注册一个。</target>
        </trans-unit>
        <trans-unit id="d6e124360a35d02b920b19d2c23d98d520942eff" translate="yes" xml:space="preserve">
          <source>Register the Module</source>
          <target state="translated">注册模块</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
