<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="zh-CN" datatype="htmlbody" original="angularjs">
    <body>
      <group id="angularjs">
        <trans-unit id="7422e70c60bc15b4ce5aee88f1fa3d09ecfa4487" translate="yes" xml:space="preserve">
          <source>AngularJS simplifies application development by presenting a higher level of abstraction to the developer. Like any abstraction, it comes at a cost of flexibility. In other words, not every app is a good fit for AngularJS. AngularJS was built with the CRUD application in mind. Luckily CRUD applications represent the majority of web applications. To understand what AngularJS is good at, though, it helps to understand when an app is not a good fit for AngularJS.</source>
          <target state="translated">AngularJS通过向开发者展示更高层次的抽象来简化应用开发。像任何抽象一样,它也是以灵活性为代价的。换句话说,不是每个应用都适合AngularJS。AngularJS是以CRUD应用为中心构建的。幸运的是,CRUD应用代表了大多数Web应用。不过要想了解AngularJS擅长什么,了解一个应用何时不适合AngularJS是有帮助的。</target>
        </trans-unit>
        <trans-unit id="fe3ac4e24f01511fd93bb16d06effbc2d6379f34" translate="yes" xml:space="preserve">
          <source>AngularJS strongly relies on contextual escaping for the security of bindings: disabling or modifying this might cause cross site scripting (XSS) vulnerabilities. For libraries owners, changes to this service will also influence users, so be extra careful and document your changes.</source>
          <target state="translated">AngularJS强烈依赖上下文转义来保证绑定的安全性:禁用或修改此功能可能会导致跨站点脚本(XSS)漏洞。对于库主来说,对这个服务的修改也会影响用户,所以要格外小心,并记录你的修改。</target>
        </trans-unit>
        <trans-unit id="4431411ecab45405bde7dd419d71acb67b3391ca" translate="yes" xml:space="preserve">
          <source>AngularJS supports i18n/l10n for &lt;a href=&quot;../api/ng/filter/date&quot;&gt;date&lt;/a&gt;, &lt;a href=&quot;../api/ng/filter/number&quot;&gt;number&lt;/a&gt; and &lt;a href=&quot;../api/ng/filter/currency&quot;&gt;currency&lt;/a&gt; filters.</source>
          <target state="translated">AngularJS支持i18n / l10n用于&lt;a href=&quot;../api/ng/filter/date&quot;&gt;日期&lt;/a&gt;，&lt;a href=&quot;../api/ng/filter/number&quot;&gt;数字&lt;/a&gt;和&lt;a href=&quot;../api/ng/filter/currency&quot;&gt;货币&lt;/a&gt;过滤器。</target>
        </trans-unit>
        <trans-unit id="3a4ebceac2caf5ebdf9c2c4c4dc59c26f35d27a5" translate="yes" xml:space="preserve">
          <source>AngularJS takes another approach. It attempts to minimize the impedance mismatch between document centric HTML and what an application needs by creating new HTML constructs. AngularJS teaches the browser new syntax through a construct we call &lt;em&gt;directives&lt;/em&gt;. Examples include:</source>
          <target state="translated">AngularJS采用另一种方法。它试图通过创建新的HTML结构来最小化以文档为中心的HTML与应用程序所需的阻抗不匹配。AngularJS通过我们称为&lt;em&gt;伪指令&lt;/em&gt;的结构向浏览器教授新的语法。示例包括：</target>
        </trans-unit>
        <trans-unit id="769e07375c5ab3bf0b0051ac78640da73f4c7868" translate="yes" xml:space="preserve">
          <source>AngularJS templates work differently. First the template (which is the uncompiled HTML along with any additional markup or directives) is compiled on the browser. The compilation step produces a live view. Any changes to the view are immediately reflected in the model, and any changes in the model are propagated to the view. The model is the single-source-of-truth for the application state, greatly simplifying the programming model for the developer. You can think of the view as simply an instant projection of your model.</source>
          <target state="translated">AngularJS模板的工作方式不同。首先,模板(即未编译的HTML以及任何附加标记或指令)在浏览器上进行编译。编译步骤会产生一个实时视图。对视图的任何更改都会立即反映在模型中,而模型中的任何更改也会传播到视图中。该模型是应用程序状态的单一真实来源,极大地简化了开发人员的编程模型。你可以把视图简单地看作是模型的即时投影。</target>
        </trans-unit>
        <trans-unit id="bfc125702fe4d5d98bdb594a33013e8322f09d18" translate="yes" xml:space="preserve">
          <source>AngularJS will detect if it has been loaded into the browser more than once and only allow the first loaded script to be bootstrapped and will report a warning to the browser console for each of the subsequent scripts. This prevents strange results in applications, where otherwise multiple instances of AngularJS try to work on the DOM.</source>
          <target state="translated">AngularJS会检测是否被加载到浏览器中超过一次,并且只允许第一次加载的脚本被引导,并且会向浏览器控制台报告后续每个脚本的警告。这可以防止应用程序中出现奇怪的结果,否则多个AngularJS实例会尝试在DOM上工作。</target>
        </trans-unit>
        <trans-unit id="015dbed2a049b3782ded1815109d25f8af8a31a3" translate="yes" xml:space="preserve">
          <source>AngularJS will strip the prefix, before processing the JSON.</source>
          <target state="translated">AngularJS会在处理JSON之前,将前缀剥离。</target>
        </trans-unit>
        <trans-unit id="3086e18c373e1b050a89b62431f812b993b265f5" translate="yes" xml:space="preserve">
          <source>AngularJS's &lt;a href=&quot;../api/ng/filter/currency&quot;&gt;currency filter&lt;/a&gt; allows you to use the default currency symbol from the &lt;a href=&quot;../api/ng/service/%24locale&quot;&gt;locale service&lt;/a&gt;, or you can provide the filter with a custom currency symbol.</source>
          <target state="translated">AngularJS的&lt;a href=&quot;../api/ng/filter/currency&quot;&gt;货币过滤器&lt;/a&gt;允许您使用&lt;a href=&quot;../api/ng/service/%24locale&quot;&gt;区域设置服务中&lt;/a&gt;的默认货币符号，也可以为过滤器提供自定义货币符号。</target>
        </trans-unit>
        <trans-unit id="a08db1303b33928851568ddd60cd23f21541a8af" translate="yes" xml:space="preserve">
          <source>AngularJS's &lt;a href=&quot;../api/ng/service/%24compile&quot;&gt;HTML compiler&lt;/a&gt; allows the developer to teach the browser new HTML syntax. The compiler allows you to attach behavior to any HTML element or attribute and even create new HTML elements or attributes with custom behavior. AngularJS calls these behavior extensions &lt;a href=&quot;../api/ng/provider/%24compileprovider#directive.html&quot;&gt;directives&lt;/a&gt;.</source>
          <target state="translated">AngularJS的&lt;a href=&quot;../api/ng/service/%24compile&quot;&gt;HTML编译器&lt;/a&gt;允许开发人员教浏览器新的HTML语法。编译器允许您将行为附加到任何HTML元素或属性，甚至可以创建具有自定义行为的新HTML元素或属性。AngularJS调用这些行为扩展&lt;a href=&quot;../api/ng/provider/%24compileprovider#directive.html&quot;&gt;指令&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="f50b6286f749aa08025813527659c6fc74af40dd" translate="yes" xml:space="preserve">
          <source>AngularJS's jqLite</source>
          <target state="translated">AngularJS的jqLite</target>
        </trans-unit>
        <trans-unit id="e609b570c930b204946ccb899b6f09e78d1083ec" translate="yes" xml:space="preserve">
          <source>AngularJS's sweet spot</source>
          <target state="translated">AngularJS的甜蜜点</target>
        </trans-unit>
        <trans-unit id="18bb073a29d517b8a3a42b434c49bfbd5a2b2a13" translate="yes" xml:space="preserve">
          <source>AngularJS's wrapper for &lt;code&gt;window.setInterval&lt;/code&gt;. The &lt;code&gt;fn&lt;/code&gt; function is executed every &lt;code&gt;delay&lt;/code&gt; milliseconds.</source>
          <target state="translated">AngularJS的 &lt;code&gt;window.setInterval&lt;/code&gt; 包装器。该 &lt;code&gt;fn&lt;/code&gt; 功能每执行 &lt;code&gt;delay&lt;/code&gt; 毫秒。</target>
        </trans-unit>
        <trans-unit id="f3ddbcf960e64f545ec9cb831b76819fde7f2373" translate="yes" xml:space="preserve">
          <source>AngularJS's wrapper for &lt;code&gt;window.setTimeout&lt;/code&gt;. The &lt;code&gt;fn&lt;/code&gt; function is wrapped into a try/catch block and delegates any exceptions to &lt;a href=&quot;%24exceptionhandler&quot;&gt;$exceptionHandler&lt;/a&gt; service.</source>
          <target state="translated">AngularJS的 &lt;code&gt;window.setTimeout&lt;/code&gt; 包装。该 &lt;code&gt;fn&lt;/code&gt; 功能被包裹成一个try / catch块和代表任何例外&lt;a href=&quot;%24exceptionhandler&quot;&gt;$ exceptionHandler的&lt;/a&gt;服务。</target>
        </trans-unit>
        <trans-unit id="e28ca8ee33fee303615de7b48a3ebaeeb4dda2c4" translate="yes" xml:space="preserve">
          <source>AngularJS's wrapper for &lt;code&gt;window.setTimeout&lt;/code&gt;. The &lt;code&gt;fn&lt;/code&gt; function is wrapped into a try/catch block and delegates any exceptions to &lt;a href=&quot;service/%24exceptionhandler&quot;&gt;$exceptionHandler&lt;/a&gt; service.</source>
          <target state="translated">AngularJS的 &lt;code&gt;window.setTimeout&lt;/code&gt; 包装。该 &lt;code&gt;fn&lt;/code&gt; 功能被包裹成一个try / catch块和代表任何例外&lt;a href=&quot;service/%24exceptionhandler&quot;&gt;$ exceptionHandler的&lt;/a&gt;服务。</target>
        </trans-unit>
        <trans-unit id="edf5ebe5a67b68ae5fca138a2a5dfbc8054af2c8" translate="yes" xml:space="preserve">
          <source>AngularStrap for Bootstrap 3</source>
          <target state="translated">AngularStrap for Bootstrap 3</target>
        </trans-unit>
        <trans-unit id="aba9a35ec9eedc8eb79e6d0f03cd4eef93153ee8" translate="yes" xml:space="preserve">
          <source>Animating between value changes</source>
          <target state="translated">价值变化之间的动画</target>
        </trans-unit>
        <trans-unit id="62afd21e88769f01ba1c9330803baad57564d6e9" translate="yes" xml:space="preserve">
          <source>Animation</source>
          <target state="translated">Animation</target>
        </trans-unit>
        <trans-unit id="7f5f07bd5a091d92689e50573c0da813d4d14d72" translate="yes" xml:space="preserve">
          <source>Animation Anchoring (via ng-animate-ref)</source>
          <target state="translated">动画锚定(通过ng-animate-ref)</target>
        </trans-unit>
        <trans-unit id="c77dcdedc0f40e8dac08a08c8bef7255abb90e75" translate="yes" xml:space="preserve">
          <source>Animations</source>
          <target state="translated">Animations</target>
        </trans-unit>
        <trans-unit id="4fe25ebece61799897136d3106b7e79fe6ccfbc5" translate="yes" xml:space="preserve">
          <source>Animations are not available unless you include the &lt;a href=&quot;../api/nganimate&quot;&gt;&lt;code&gt;ngAnimate&lt;/code&gt; module&lt;/a&gt; as a dependency of your application.</source>
          <target state="translated">除非您将&lt;a href=&quot;../api/nganimate&quot;&gt; &lt;code&gt;ngAnimate&lt;/code&gt; 模块&lt;/a&gt;作为应用程序的依赖项包含在内，否则动画不可用。</target>
        </trans-unit>
        <trans-unit id="c0594ee2973edc0be64f9dfa8e39acbf86b8a72a" translate="yes" xml:space="preserve">
          <source>Animations in &lt;code&gt;ngShow&lt;/code&gt;/&lt;code&gt;ngHide&lt;/code&gt; work with the show and hide events that are triggered when the directive expression is true and false. This system works like the animation system present with &lt;code&gt;ngClass&lt;/code&gt; except that you must also include the &lt;code&gt;!important&lt;/code&gt; flag to override the display property so that the elements are not actually hidden during the animation.</source>
          <target state="translated">&lt;code&gt;ngShow&lt;/code&gt; / &lt;code&gt;ngHide&lt;/code&gt; 中的动画处理show和hide事件，这些事件在指令表达式为true和false时触发。该系统的工作方式与 &lt;code&gt;ngClass&lt;/code&gt; 附带的动画系统类似，不同之处在于，您还必须包括 &lt;code&gt;!important&lt;/code&gt; 标志以覆盖display属性，以便在动画过程中实际上不会隐藏元素。</target>
        </trans-unit>
        <trans-unit id="0b2a60876cb65fb0147911bedc0ad0bf15f7d3ff" translate="yes" xml:space="preserve">
          <source>Animations in AngularJS are completely based on CSS classes. As long as you have a CSS class attached to an HTML element within your application, you can apply animations to it. Let's say for example that we have an HTML template with a repeater like so:</source>
          <target state="translated">AngularJS中的动画完全是基于CSS类的。只要你在应用中的HTML元素上附加了一个CSS类,你就可以对它应用动画。比如说,我们有一个HTML模板,它的重复器是这样的。</target>
        </trans-unit>
        <trans-unit id="fff49af586e2c4e9b3f2dd501fcc0aaac06fb0d6" translate="yes" xml:space="preserve">
          <source>Animations in ngForm are triggered when any of the associated CSS classes are added and removed. These classes are: &lt;code&gt;.ng-pristine&lt;/code&gt;, &lt;code&gt;.ng-dirty&lt;/code&gt;, &lt;code&gt;.ng-invalid&lt;/code&gt; and &lt;code&gt;.ng-valid&lt;/code&gt; as well as any other validations that are performed within the form. Animations in ngForm are similar to how they work in ngClass and animations can be hooked into using CSS transitions, keyframes as well as JS animations.</source>
          <target state="translated">添加或删除任何关联的CSS类时，都会触发ngForm中的动画。这些类是： &lt;code&gt;.ng-pristine&lt;/code&gt; ， &lt;code&gt;.ng-dirty&lt;/code&gt; ， &lt;code&gt;.ng-invalid&lt;/code&gt; 和 &lt;code&gt;.ng-valid&lt;/code&gt; 以及在表单中执行的任何其他验证。ngForm中的动画类似于它们在ngClass中的工作方式，并且可以使用CSS过渡，关键帧以及JS动画将动画挂钩。</target>
        </trans-unit>
        <trans-unit id="67b5c3728edc0e75f5c55a0c0056f00846acd15f" translate="yes" xml:space="preserve">
          <source>Animations on app bootstrap / page load</source>
          <target state="translated">应用程序bootstrap/页面加载时的动画。</target>
        </trans-unit>
        <trans-unit id="2177639f84412abd63d8ce1ffb0f9712bb859c76" translate="yes" xml:space="preserve">
          <source>Animations within custom directives can also be established by injecting &lt;code&gt;$animate&lt;/code&gt; directly into your directive and making calls to it when needed.</source>
          <target state="translated">也可以通过将 &lt;code&gt;$animate&lt;/code&gt; 直接注入到指令中并在需要时对其进行调用来建立自定义指令中的动画。</target>
        </trans-unit>
        <trans-unit id="29559d5d09175ad58fe92108a5edad256c28781a" translate="yes" xml:space="preserve">
          <source>Animations within models are triggered when any of the associated CSS classes are added and removed on the input element which is attached to the model. These classes include: &lt;code&gt;.ng-pristine&lt;/code&gt;, &lt;code&gt;.ng-dirty&lt;/code&gt;, &lt;code&gt;.ng-invalid&lt;/code&gt; and &lt;code&gt;.ng-valid&lt;/code&gt; as well as any other validations that are performed on the model itself. The animations that are triggered within ngModel are similar to how they work in ngClass and animations can be hooked into using CSS transitions, keyframes as well as JS animations.</source>
          <target state="translated">在关联到模型的输入元素上添加和删除任何关联的CSS类时，将触发模型内的动画。这些类包括： &lt;code&gt;.ng-pristine&lt;/code&gt; ， &lt;code&gt;.ng-dirty&lt;/code&gt; ， &lt;code&gt;.ng-invalid&lt;/code&gt; 和 &lt;code&gt;.ng-valid&lt;/code&gt; 以及对模型本身执行的任何其他验证。ngModel中触发的动画与它们在ngClass中的工作方式相似，并且可以使用CSS过渡，关键帧以及JS动画将动画挂接到钩子中。</target>
        </trans-unit>
        <trans-unit id="1859b1a59db69babc41c14f59a24c34e903944a3" translate="yes" xml:space="preserve">
          <source>Annotated constructor function.</source>
          <target state="translated">注释的构造函数。</target>
        </trans-unit>
        <trans-unit id="f2c8d59d42e7c3db1d26f04eb9b0478f66b9b7d5" translate="yes" xml:space="preserve">
          <source>Another scenario is adding a directive programmatically to a compiled element and then executing compile again. See the following &lt;strong&gt;faulty example&lt;/strong&gt;:</source>
          <target state="translated">另一种情况是将指令以编程方式添加到已编译元素中，然后再次执行编译。请参见以下&lt;strong&gt;错误示例&lt;/strong&gt;：</target>
        </trans-unit>
        <trans-unit id="969a0ecaa65eb289d9a2e9d6090f5991d37b5286" translate="yes" xml:space="preserve">
          <source>Another solution is to use a &lt;code&gt;track by&lt;/code&gt; clause, because then &lt;code&gt;ngOptions&lt;/code&gt; will track the identity of the item not by reference, but by the result of the &lt;code&gt;track by&lt;/code&gt; expression. For example, if your collection items have an id property, you would &lt;code&gt;track by item.id&lt;/code&gt;.</source>
          <target state="translated">另一种解决方案是使用 &lt;code&gt;track by&lt;/code&gt; 子句，因为 &lt;code&gt;ngOptions&lt;/code&gt; 不会通过引用而是 &lt;code&gt;track by&lt;/code&gt; 表达式的跟踪结果来跟踪项的标识。例如，如果您的收集项目具有id属性，则可以 &lt;code&gt;track by item.id&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="35ba7d28b3ce7cc7d01f098476d04b91469e1cbe" translate="yes" xml:space="preserve">
          <source>Another use-case for &lt;code&gt;ngOn&lt;/code&gt; is listening to &lt;a href=&quot;https://developer.mozilla.org/docs/Web/Guide/Events/Creating_and_triggering_events&quot;&gt;custom events&lt;/a&gt; fired by &lt;a href=&quot;https://developer.mozilla.org/docs/Web/Web_Components/Using_custom_elements&quot;&gt;custom elements&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;ngOn&lt;/code&gt; 的另一个用例是监听&lt;a href=&quot;https://developer.mozilla.org/docs/Web/Guide/Events/Creating_and_triggering_events&quot;&gt;自&lt;/a&gt;&lt;a href=&quot;https://developer.mozilla.org/docs/Web/Web_Components/Using_custom_elements&quot;&gt;定义元素&lt;/a&gt;触发的自定义事件。</target>
        </trans-unit>
        <trans-unit id="c3bdf53bf457c9fc3e92bc2d910f483e037f083e" translate="yes" xml:space="preserve">
          <source>Any JavaScript object (including arrays and primitive types) to filter.</source>
          <target state="translated">任何要过滤的JavaScript对象(包括数组和基元类型)。</target>
        </trans-unit>
        <trans-unit id="de4518bc294ed54cea1f8963368f0e3c1241d4ef" translate="yes" xml:space="preserve">
          <source>Any exception emitted from the &lt;a href=&quot;%24rootscope.scope#%24on.html&quot;&gt;listeners&lt;/a&gt; will be passed onto the &lt;a href=&quot;../service/%24exceptionhandler&quot;&gt;$exceptionHandler&lt;/a&gt; service.</source>
          <target state="translated">&lt;a href=&quot;%24rootscope.scope#%24on.html&quot;&gt;侦听器&lt;/a&gt;发出的任何异常都将传递到&lt;a href=&quot;../service/%24exceptionhandler&quot;&gt;$ exceptionHandler&lt;/a&gt;服务。</target>
        </trans-unit>
        <trans-unit id="eca8010205016887bae956d6ae88be83c9bd4978" translate="yes" xml:space="preserve">
          <source>Any exceptions from the execution of the expression are forwarded to the &lt;a href=&quot;../service/%24exceptionhandler&quot;&gt;$exceptionHandler&lt;/a&gt; service.</source>
          <target state="translated">执行表达式时产生的任何异常都会转发到&lt;a href=&quot;../service/%24exceptionhandler&quot;&gt;$ exceptionHandler&lt;/a&gt;服务。</target>
        </trans-unit>
        <trans-unit id="136f3a6017ec892c22b97b38e6ce1b5592c356e0" translate="yes" xml:space="preserve">
          <source>Any external event on a directive/component will not trigger a digest while the hosting scope is suspended - even if the event handler calls &lt;code&gt;$apply()&lt;/code&gt; or &lt;code&gt;$rootScope.$digest()&lt;/code&gt;.</source>
          <target state="translated">挂起宿主作用域时，指令/组件上的任何外部事件都不会触发摘要-即使事件处理程序调用 &lt;code&gt;$apply()&lt;/code&gt; 或 &lt;code&gt;$rootScope.$digest()&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="6e3b668fd7f49731bcb3c1e067c00ebcd8e78ada" translate="yes" xml:space="preserve">
          <source>Any other characters in the &lt;code&gt;format&lt;/code&gt; string will be output as-is.</source>
          <target state="translated">&lt;code&gt;format&lt;/code&gt; 字符串中的任何其他字符将原样输出。</target>
        </trans-unit>
        <trans-unit id="422ef3807aa704fa02f9a1d220d6afe5c46512c0" translate="yes" xml:space="preserve">
          <source>Any pending &lt;code&gt;ngModelOptions&lt;/code&gt; changes will take place immediately when an enclosing form is submitted. Note that &lt;code&gt;ngClick&lt;/code&gt; events will occur before the model is updated. Use &lt;code&gt;ngSubmit&lt;/code&gt; to have access to the updated model.</source>
          <target state="translated">提交 &lt;code&gt;ngModelOptions&lt;/code&gt; 任何未完成的ngModelOptions更改都将立即发生。请注意， &lt;code&gt;ngClick&lt;/code&gt; 事件将在更新模型之前发生。使用 &lt;code&gt;ngSubmit&lt;/code&gt; 可以访问更新的模型。</target>
        </trans-unit>
        <trans-unit id="185b074a10fc46555a5d70fddc56be15b7205ef5" translate="yes" xml:space="preserve">
          <source>Any pending changes will take place immediately when an enclosing form is submitted via the &lt;code&gt;submit&lt;/code&gt; event. Note that &lt;code&gt;ngClick&lt;/code&gt; events will occur before the model is updated. Use &lt;code&gt;ngSubmit&lt;/code&gt; to have access to the updated model.</source>
          <target state="translated">通过 &lt;code&gt;submit&lt;/code&gt; 事件提交附表时，任何未决的更改将立即发生。请注意， &lt;code&gt;ngClick&lt;/code&gt; 事件将在更新模型之前发生。使用 &lt;code&gt;ngSubmit&lt;/code&gt; 可以访问更新的模型。</target>
        </trans-unit>
        <trans-unit id="8f782e9cb5bbdcbf217e9814a968f5294ded104d" translate="yes" xml:space="preserve">
          <source>Any time your application needs to react to a change in the current URL or if you want to change the current URL in the browser.</source>
          <target state="translated">当您的应用程序需要对当前URL的变化做出反应时,或者您想在浏览器中更改当前URL时。</target>
        </trans-unit>
        <trans-unit id="b848ee45c3ed822427c3aa6d8e5ae09ef5cd1527" translate="yes" xml:space="preserve">
          <source>Any uncaught exception in AngularJS expressions is delegated to this service. The default implementation simply delegates to &lt;code&gt;$log.error&lt;/code&gt; which logs it into the browser console.</source>
          <target state="translated">AngularJS表达式中任何未捕获的异常都委托给此服务。默认的实现只是将 &lt;code&gt;$log.error&lt;/code&gt; 委托给浏览器控制台。</target>
        </trans-unit>
        <trans-unit id="4b18dc74f28f4ae563b1962fe286aa979fa3353d" translate="yes" xml:space="preserve">
          <source>Any url about to be assigned to a[href] via data-binding is first normalized and turned into an absolute url. Afterwards, the url is matched against the &lt;code&gt;aHrefSanitizationTrustedUrlList&lt;/code&gt; regular expression. If a match is found, the original url is written into the dom. Otherwise, the absolute url is prefixed with &lt;code&gt;'unsafe:'&lt;/code&gt; string and only then is it written into the DOM.</source>
          <target state="translated">Any url about to be assigned to a[href] via data-binding is first normalized and turned into an absolute url. Afterwards, the url is matched against the &lt;code&gt;aHrefSanitizationTrustedUrlList&lt;/code&gt; regular expression. If a match is found, the original url is written into the dom. Otherwise, the absolute url is prefixed with &lt;code&gt;'unsafe:'&lt;/code&gt; string and only then is it written into the DOM.</target>
        </trans-unit>
        <trans-unit id="66d8a5005f5b7a5ddb9208ba220fe6b30ba308b2" translate="yes" xml:space="preserve">
          <source>Any url about to be assigned to a[href] via data-binding is first normalized and turned into an absolute url. Afterwards, the url is matched against the &lt;code&gt;aHrefSanitizationWhitelist&lt;/code&gt; regular expression. If a match is found, the original url is written into the dom. Otherwise, the absolute url is prefixed with &lt;code&gt;'unsafe:'&lt;/code&gt; string and only then is it written into the DOM.</source>
          <target state="translated">首先将要通过数据绑定分配给a [href]的所有URL进行规范化，然后转换为绝对URL。然后，将URL与 &lt;code&gt;aHrefSanitizationWhitelist&lt;/code&gt; 正则表达式匹配。如果找到匹配项，则将原始网址写入dom。否则，绝对URL的前缀为 &lt;code&gt;'unsafe:'&lt;/code&gt; 字符串，然后才将其写入DOM。</target>
        </trans-unit>
        <trans-unit id="2946adf5d679433deeba77fd311b6476cc2a4b48" translate="yes" xml:space="preserve">
          <source>Any url about to be assigned to img[src] via data-binding is first normalized and turned into an absolute url. Afterwards, the url is matched against the &lt;code&gt;imgSrcSanitizationTrustedUrlList&lt;/code&gt; regular expression. If a match is found, the original url is written into the dom. Otherwise, the absolute url is prefixed with &lt;code&gt;'unsafe:'&lt;/code&gt; string and only then is it written into the DOM.</source>
          <target state="translated">Any url about to be assigned to img[src] via data-binding is first normalized and turned into an absolute url. Afterwards, the url is matched against the &lt;code&gt;imgSrcSanitizationTrustedUrlList&lt;/code&gt; regular expression. If a match is found, the original url is written into the dom. Otherwise, the absolute url is prefixed with &lt;code&gt;'unsafe:'&lt;/code&gt; string and only then is it written into the DOM.</target>
        </trans-unit>
        <trans-unit id="d3d6dd2884ca2cb0baa2409af0223b0a1c7c139d" translate="yes" xml:space="preserve">
          <source>Any url about to be assigned to img[src] via data-binding is first normalized and turned into an absolute url. Afterwards, the url is matched against the &lt;code&gt;imgSrcSanitizationWhitelist&lt;/code&gt; regular expression. If a match is found, the original url is written into the dom. Otherwise, the absolute url is prefixed with &lt;code&gt;'unsafe:'&lt;/code&gt; string and only then is it written into the DOM.</source>
          <target state="translated">首先将要通过数据绑定分配给img [src]的所有URL进行规范化，然后转换为绝对URL。然后，将URL与 &lt;code&gt;imgSrcSanitizationWhitelist&lt;/code&gt; 正则表达式匹配。如果找到匹配项，则将原始网址写入dom。否则，绝对URL的前缀为 &lt;code&gt;'unsafe:'&lt;/code&gt; 字符串，然后才将其写入DOM。</target>
        </trans-unit>
        <trans-unit id="43f5d990f54d41e9398585a561e89b92ddaadd53" translate="yes" xml:space="preserve">
          <source>Apart from the &lt;strong&gt;Top Level Component&lt;/strong&gt; (&lt;a href=&quot;../service/%24routerrootcomponent&quot;&gt;&lt;code&gt;$routerRootComponent&lt;/code&gt;&lt;/a&gt;) which is associated with the &lt;a href=&quot;../service/%24rootrouter&quot;&gt;&lt;code&gt;$rootRouter&lt;/code&gt;&lt;/a&gt;, every &lt;strong&gt;Routing Component&lt;/strong&gt; is associated with a &lt;code&gt;ChildRouter&lt;/code&gt;, which manages the routing for that &lt;strong&gt;Routing Component&lt;/strong&gt;.</source>
          <target state="translated">除了与&lt;a href=&quot;../service/%24routerrootcomponent&quot;&gt; &lt;code&gt;$routerRootComponent&lt;/code&gt; &lt;/a&gt;关联的&lt;strong&gt;顶级组件&lt;/strong&gt;（$ routerRootComponent）&lt;a href=&quot;../service/%24rootrouter&quot;&gt; &lt;code&gt;$rootRouter&lt;/code&gt; &lt;/a&gt;，每个&lt;strong&gt;路由组件&lt;/strong&gt;都与一个 &lt;code&gt;ChildRouter&lt;/code&gt; 关联，后者管理该&lt;strong&gt;路由组件的路由&lt;/strong&gt;。</target>
        </trans-unit>
        <trans-unit id="e402e007d5cf0eceb8bba2547d33af36db64dcdf" translate="yes" xml:space="preserve">
          <source>Apart from the ternary operator (&lt;code&gt;a ? b : c&lt;/code&gt;), you cannot write a control flow statement in an expression. The reason behind this is core to the AngularJS philosophy that application logic should be in controllers, not the views. If you need a real conditional, loop, or to throw from a view expression, delegate to a JavaScript method instead.</source>
          <target state="translated">除了三元运算符（ &lt;code&gt;a ? b : c&lt;/code&gt; ），您不能在表达式中编写控制流语句。这背后的原因是AngularJS哲学的核心，即应用程序逻辑应该在控制器中，而不是视图中。如果您需要真正的条件，循环或从视图表达式中抛出，请委托给JavaScript方法。</target>
        </trans-unit>
        <trans-unit id="d71de8152541f4a1b7fda48b87f3fe315656e14c" translate="yes" xml:space="preserve">
          <source>Application Structure</source>
          <target state="translated">应用结构</target>
        </trans-unit>
        <trans-unit id="7fe601ec2e88419589f9146418e8e7af8c971aaa" translate="yes" xml:space="preserve">
          <source>Application Structure &amp;amp; Style Guides</source>
          <target state="translated">应用程序结构和样式指南</target>
        </trans-unit>
        <trans-unit id="e47fe9ae51aadfdd2d85b572285710bb9d6644ca" translate="yes" xml:space="preserve">
          <source>Application developers are free to define their own services by registering the service's name and &lt;strong&gt;service factory function&lt;/strong&gt;, with an AngularJS module.</source>
          <target state="translated">应用程序开发人员可以通过使用AngularJS模块注册服务的名称和&lt;strong&gt;服务工厂函数&lt;/strong&gt;来自由定义自己的服务。</target>
        </trans-unit>
        <trans-unit id="157fcee1bf70241b8658bd19f019bbfffbd57a6b" translate="yes" xml:space="preserve">
          <source>Application developers will rarely need to call this method directly. It is used internally, by &lt;a href=&quot;ngmodel.ngmodelcontroller#%24setValidity.html&quot;&gt;NgModelController.$setValidity()&lt;/a&gt;, to propagate a control's validity state to the parent &lt;code&gt;FormController&lt;/code&gt;.</source>
          <target state="translated">应用程序开发人员几乎不需要直接调用此方法。&lt;a href=&quot;ngmodel.ngmodelcontroller#%24setValidity.html&quot;&gt;NgModelController。$ setValidity（）&lt;/a&gt;在内部使用它，将控件的有效性状态传播到父 &lt;code&gt;FormController&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="53162fc7151bee0f7c7ba8c31bf1c2355dfc4550" translate="yes" xml:space="preserve">
          <source>Architecture, file structure, components, one-way dataflow and best practices</source>
          <target state="translated">架构、文件结构、组件、单向数据流和最佳实践。</target>
        </trans-unit>
        <trans-unit id="c83a0088927a1633acaed10f539ea98bb1e204c3" translate="yes" xml:space="preserve">
          <source>Argument names</source>
          <target state="translated">论据名称</target>
        </trans-unit>
        <trans-unit id="cbb9fa252e60809efa55a7ad83aea5438ef56753" translate="yes" xml:space="preserve">
          <source>Arguments</source>
          <target state="translated">Arguments</target>
        </trans-unit>
        <trans-unit id="f2d1a651267110941a7e3eba6df9faa2ed02c04d" translate="yes" xml:space="preserve">
          <source>Array containing URLs whose origins are trusted to receive the XSRF token. See the &lt;a href=&quot;../service/%24http#security-considerations.html&quot;&gt;Security Considerations&lt;/a&gt; sections for more details on XSRF.</source>
          <target state="translated">包含URL的数组，URL的来源可信任来接收XSRF令牌。有关XSRF的更多详细信息，请参阅&amp;ldquo; &lt;a href=&quot;../service/%24http#security-considerations.html&quot;&gt;安全注意事项&amp;rdquo;&lt;/a&gt;部分。</target>
        </trans-unit>
        <trans-unit id="32c9d1434f0741f3d270e0c58ec7b6e77a762138" translate="yes" xml:space="preserve">
          <source>Array containing service factories for all synchronous or asynchronous &lt;a href=&quot;../service/%24http&quot;&gt;$http&lt;/a&gt; pre-processing of request or postprocessing of responses.</source>
          <target state="translated">包含服务工厂的数组，用于所有同步或异步&lt;a href=&quot;../service/%24http&quot;&gt;$ http&lt;/a&gt;的请求预处理或响应的后处理。</target>
        </trans-unit>
        <trans-unit id="557b5657af00498abd22b4555192836bb6d9557e" translate="yes" xml:space="preserve">
          <source>Array of config objects for currently pending requests. This is primarily meant to be used for debugging purposes.</source>
          <target state="translated">当前待处理请求的配置对象阵列。这主要是用来调试的。</target>
        </trans-unit>
        <trans-unit id="dda0d43b5dd90aadcea7413aa4213f341abd201c" translate="yes" xml:space="preserve">
          <source>Array of expressions that will be individually watched using &lt;a href=&quot;%24rootscope.scope#%24watch.html&quot;&gt;$watch()&lt;/a&gt;</source>
          <target state="translated">可以使用&lt;a href=&quot;%24rootscope.scope#%24watch.html&quot;&gt;$ watch（）&lt;/a&gt;单独监视的表达式数组</target>
        </trans-unit>
        <trans-unit id="16a28eaf7d1396d70aa69a55073aa5ed0d533006" translate="yes" xml:space="preserve">
          <source>Array of functions to execute whenever a change to &lt;a href=&quot;ngmodel.ngmodelcontroller#%24viewValue.html&quot;&gt;&lt;code&gt;$viewValue&lt;/code&gt;&lt;/a&gt; has caused a change to &lt;a href=&quot;ngmodel.ngmodelcontroller#%24modelValue.html&quot;&gt;&lt;code&gt;$modelValue&lt;/code&gt;&lt;/a&gt;. It is called with no arguments, and its return value is ignored. This can be used in place of additional $watches against the model value.</source>
          <target state="translated">功能阵列来执行，只要更改&lt;a href=&quot;ngmodel.ngmodelcontroller#%24viewValue.html&quot;&gt; &lt;code&gt;$viewValue&lt;/code&gt; &lt;/a&gt;已经引起了改变&lt;a href=&quot;ngmodel.ngmodelcontroller#%24modelValue.html&quot;&gt; &lt;code&gt;$modelValue&lt;/code&gt; &lt;/a&gt;。它不带任何参数调用，并且其返回值被忽略。可以使用它代替模型值的其他$ watchs。</target>
        </trans-unit>
        <trans-unit id="1424ab51b27d79e61339e273ce91fa793a8714e8" translate="yes" xml:space="preserve">
          <source>Array of functions to execute, as a pipeline, whenever the bound ngModel expression changes programmatically. The &lt;code&gt;$formatters&lt;/code&gt; are not called when the value of the control is changed by user interaction.</source>
          <target state="translated">绑定的ngModel表达式以编程方式更改时要作为管道执行的函数数组。在 &lt;code&gt;$formatters&lt;/code&gt; 当控件的值是通过用户交互更改不叫。</target>
        </trans-unit>
        <trans-unit id="02b2ca54d88c554ca4e1087c37aecbf0eac12226" translate="yes" xml:space="preserve">
          <source>Array of functions to execute, as a pipeline, whenever the control updates the ngModelController with a new &lt;a href=&quot;ngmodel.ngmodelcontroller#%24viewValue.html&quot;&gt;&lt;code&gt;$viewValue&lt;/code&gt;&lt;/a&gt; from the DOM, usually via user input. See &lt;a href=&quot;ngmodel.ngmodelcontroller#%24setViewValue.html&quot;&gt;&lt;code&gt;$setViewValue()&lt;/code&gt;&lt;/a&gt; for a detailed lifecycle explanation. Note that the &lt;code&gt;$parsers&lt;/code&gt; are not called when the bound ngModel expression changes programmatically.</source>
          <target state="translated">每当控件通过DOM（通常通过用户输入）使用来自DOM 的新&lt;a href=&quot;ngmodel.ngmodelcontroller#%24viewValue.html&quot;&gt; &lt;code&gt;$viewValue&lt;/code&gt; &lt;/a&gt;更新ngModelController时，作为管道执行的函数数组。有关详细的生命周期说明，请参见&lt;a href=&quot;ngmodel.ngmodelcontroller#%24setViewValue.html&quot;&gt; &lt;code&gt;$setViewValue()&lt;/code&gt; &lt;/a&gt;。请注意，当绑定的ngModel表达式以编程方式更改时，不会调用 &lt;code&gt;$parsers&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="8aa61e073a4c0baab4b05c142ba71754be4dbe3a" translate="yes" xml:space="preserve">
          <source>Array of keys to assign to regex matches in request url described above.</source>
          <target state="translated">分配给上述请求url中的regex匹配的键数组。</target>
        </trans-unit>
        <trans-unit id="dce6ae97df369ff12e95dc68ff11901fddbd2a92" translate="yes" xml:space="preserve">
          <source>Array of keys to assign to regex matches in request url described on &lt;a href=&quot;../../ngmock/service/%24httpbackend&quot;&gt;$httpBackend mock&lt;/a&gt;.</source>
          <target state="translated">分配给正则表达式匹配项的键数组，在&lt;a href=&quot;../../ngmock/service/%24httpbackend&quot;&gt;$ httpBackend模拟中&lt;/a&gt;描述的请求url中。</target>
        </trans-unit>
        <trans-unit id="9c6621304506b22ca9a68ad77ea41a030e17c566" translate="yes" xml:space="preserve">
          <source>Array of messages logged using &lt;a href=&quot;../../ng/service/%24log#debug.html&quot;&gt;&lt;code&gt;debug()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">使用&lt;a href=&quot;../../ng/service/%24log#debug.html&quot;&gt; &lt;code&gt;debug()&lt;/code&gt; &lt;/a&gt;记录的消息数组。</target>
        </trans-unit>
        <trans-unit id="57ea05d19a68d43106644cbce6da8d34187676e8" translate="yes" xml:space="preserve">
          <source>Array of messages logged using &lt;a href=&quot;../../ng/service/%24log#error.html&quot;&gt;&lt;code&gt;error()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">使用&lt;a href=&quot;../../ng/service/%24log#error.html&quot;&gt; &lt;code&gt;error()&lt;/code&gt; &lt;/a&gt;记录的消息数组。</target>
        </trans-unit>
        <trans-unit id="8151a9ffd2283d4619d532eaaac736b5d01ab54f" translate="yes" xml:space="preserve">
          <source>Array of messages logged using &lt;a href=&quot;../../ng/service/%24log#info.html&quot;&gt;&lt;code&gt;info()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">使用&lt;a href=&quot;../../ng/service/%24log#info.html&quot;&gt; &lt;code&gt;info()&lt;/code&gt; &lt;/a&gt;记录的消息数组。</target>
        </trans-unit>
        <trans-unit id="69d8c243e53bd946f150a38a73b18a8f0819eed0" translate="yes" xml:space="preserve">
          <source>Array of messages logged using &lt;a href=&quot;../../ng/service/%24log#log.html&quot;&gt;&lt;code&gt;log()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">使用&lt;a href=&quot;../../ng/service/%24log#log.html&quot;&gt; &lt;code&gt;log()&lt;/code&gt; &lt;/a&gt;记录的消息数组。</target>
        </trans-unit>
        <trans-unit id="787bf1b8fa54bd835ba5079f6b4ece639ed7b9ed" translate="yes" xml:space="preserve">
          <source>Array of messages logged using &lt;a href=&quot;../../ng/service/%24log#warn.html&quot;&gt;&lt;code&gt;warn()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">使用&lt;a href=&quot;../../ng/service/%24log#warn.html&quot;&gt; &lt;code&gt;warn()&lt;/code&gt; &lt;/a&gt;记录的消息数组。</target>
        </trans-unit>
        <trans-unit id="0fb4bcb40bc5316de7a202017017eaefa3df7c7b" translate="yes" xml:space="preserve">
          <source>Array/array-like, string or number to be limited.</source>
          <target state="translated">Array/array-like,字符串或数量要限制。</target>
        </trans-unit>
        <trans-unit id="647955f61de2f76c3b41b2e5804a604deead0bcb" translate="yes" xml:space="preserve">
          <source>Articles, Videos, and Projects</source>
          <target state="translated">文章、视频和项目</target>
        </trans-unit>
        <trans-unit id="7275de9628a1cc80191841f09611cfb2af505dfb" translate="yes" xml:space="preserve">
          <source>As &lt;code&gt;ngRepeat&lt;/code&gt; does its thing, each time a new item is added into the list, &lt;code&gt;ngRepeat&lt;/code&gt; will add an &lt;code&gt;ng-enter&lt;/code&gt; class to the element that is being added. When removed it will apply an &lt;code&gt;ng-leave&lt;/code&gt; class and when moved around it will apply an &lt;code&gt;ng-move&lt;/code&gt; class.</source>
          <target state="translated">随着 &lt;code&gt;ngRepeat&lt;/code&gt; 的工作，每次将新项添加到列表中时， &lt;code&gt;ngRepeat&lt;/code&gt; 都会向要添加的元素中添加 &lt;code&gt;ng-enter&lt;/code&gt; 类。删除后将应用 &lt;code&gt;ng-leave&lt;/code&gt; 类，而移动时将应用 &lt;code&gt;ng-move&lt;/code&gt; 类。</target>
        </trans-unit>
        <trans-unit id="0695df435dac0ab2843253e78e2827b4f1a7f956" translate="yes" xml:space="preserve">
          <source>As a best practice, consider adding an &lt;code&gt;ng-strict-di&lt;/code&gt; directive on the same element as &lt;code&gt;ng-app&lt;/code&gt;:</source>
          <target state="translated">最佳做法是考虑在与 &lt;code&gt;ng-app&lt;/code&gt; 相同的元素上添加 &lt;code&gt;ng-strict-di&lt;/code&gt; 指令：</target>
        </trans-unit>
        <trans-unit id="e65d701eca158f6dc26450435f4a299e994565af" translate="yes" xml:space="preserve">
          <source>As a result of &lt;code&gt;ngBind&lt;/code&gt;, &lt;code&gt;ngBindHtml&lt;/code&gt; or &lt;code&gt;{{...}}&lt;/code&gt; interpolations, binding data and CSS class &lt;code&gt;ng-binding&lt;/code&gt; are attached to the corresponding element.</source>
          <target state="translated">作为 &lt;code&gt;ngBind&lt;/code&gt; ， &lt;code&gt;ngBindHtml&lt;/code&gt; 或 &lt;code&gt;{{...}}&lt;/code&gt; 插值的结果，绑定数据和CSS类 &lt;code&gt;ng-binding&lt;/code&gt; 被附加到相应的元素。</target>
        </trans-unit>
        <trans-unit id="67db5c7bc5d719b0ac857083a55a856d06e77a01" translate="yes" xml:space="preserve">
          <source>As a result of that, &lt;a href=&quot;../directive/ngview&quot;&gt;ngView&lt;/a&gt; creates new scope and reinstantiates the controller.</source>
          <target state="translated">结果，&lt;a href=&quot;../directive/ngview&quot;&gt;ngView&lt;/a&gt;会创建新的作用域并重新实例化控制器。</target>
        </trans-unit>
        <trans-unit id="2325450d98839f1a7cf5c6905e3d4f5721cb3fd3" translate="yes" xml:space="preserve">
          <source>As already mentioned in the intro, the Provider recipe is the core recipe type and all the other recipe types are just syntactic sugar on top of it. It is the most verbose recipe with the most abilities, but for most services it's overkill.</source>
          <target state="translated">正如前言中已经提到的,Provider recipe是核心的recipe类型,其他的recipe类型都只是在它上面的语法糖。它是最啰嗦的配方,能力最强,但对于大多数服务来说,它是矫枉过正的。</target>
        </trans-unit>
        <trans-unit id="6ef852d71fd5d9cc1d2ec23dccfd5e8aa5b6791e" translate="yes" xml:space="preserve">
          <source>As already mentioned, the component helper makes it easier to structure your application with a component-based architecture. But what makes a component beyond the options that the component helper has?</source>
          <target state="translated">如前所述,组件帮助器使你更容易用基于组件的架构来构建你的应用程序。但是,是什么让组件超越了组件帮助器所拥有的选项呢?</target>
        </trans-unit>
        <trans-unit id="66190f01e31088a12a65092a98ca24475f550877" translate="yes" xml:space="preserve">
          <source>As an array of injection names, where the last item in the array is the function to call.</source>
          <target state="translated">作为一个注入名称的数组,数组中最后一项是要调用的函数。</target>
        </trans-unit>
        <trans-unit id="ab19f6eb4ea00d87f713b79c4d8c813abaeab501" translate="yes" xml:space="preserve">
          <source>As an example, &lt;a href=&quot;../directive/ngbindhtml&quot;&gt;ngBindHtml&lt;/a&gt; uses &lt;a href=&quot;%24sce#parseAsHtml.html&quot;&gt;$sce.parseAsHtml(binding expression)&lt;/a&gt;. Here's the actual code (slightly simplified):</source>
          <target state="translated">例如，&lt;a href=&quot;../directive/ngbindhtml&quot;&gt;ngBindHtml&lt;/a&gt;使用&lt;a href=&quot;%24sce#parseAsHtml.html&quot;&gt;$ sce.parseAsHtml（binding expression）&lt;/a&gt;。这是实际的代码（略有简化）：</target>
        </trans-unit>
        <trans-unit id="07153bae5bff22d9000ae9eab846630c563316f9" translate="yes" xml:space="preserve">
          <source>As applications grow in size and complexity, it becomes unrealistic to rely on manual testing to verify the correctness of new features, catch bugs and notice regressions. Unit tests are the first line of defense for catching bugs, but sometimes issues come up with integration between components which can't be captured in a unit test. End-to-end tests are made to find these problems.</source>
          <target state="translated">随着应用程序的规模和复杂性的增长,依靠手动测试来验证新功能的正确性、捕捉错误和注意回归变得不现实。单元测试是捕捉bug的第一道防线,但有时组件之间的集成会出现一些问题,这些问题无法在单元测试中捕获。端到端测试就是为了发现这些问题。</target>
        </trans-unit>
        <trans-unit id="6d7a55120448d479c287c566c8d98fb08b5ccd50" translate="yes" xml:space="preserve">
          <source>As discussed in the &lt;a href=&quot;concepts&quot;&gt;Concepts&lt;/a&gt; section of this guide, any objects (or primitives) assigned to the scope become model properties. Any methods assigned to the scope are available in the template/view, and can be invoked via AngularJS expressions and &lt;code&gt;ng&lt;/code&gt; event handler directives (e.g. &lt;a href=&quot;../api/ng/directive/ngclick&quot;&gt;ngClick&lt;/a&gt;).</source>
          <target state="translated">如本指南的&amp;ldquo; &lt;a href=&quot;concepts&quot;&gt;概念&amp;rdquo;&lt;/a&gt;部分所述，分配给该范围的任何对象（或原语）都将成为模型属性。分配给范围的任何方法都可以在模板/视图中找到，并且可以通过AngularJS表达式和 &lt;code&gt;ng&lt;/code&gt; 事件处理程序指令（例如&lt;a href=&quot;../api/ng/directive/ngclick&quot;&gt;ngClick&lt;/a&gt;）调用。</target>
        </trans-unit>
        <trans-unit id="543566b9bcbd90fce5b7b69e2eb29f4197ad9e3d" translate="yes" xml:space="preserve">
          <source>As mentioned in the syntax for plural and select, the embedded messages can contain AngularJS interpolation syntax. Since you can use MessageFormat extensions in AngularJS interpolation, this allows you to nest plural and gender expressions in any order.</source>
          <target state="translated">正如在复数和选择的语法中提到的,嵌入的消息可以包含AngularJS插值语法。由于您可以在AngularJS插值中使用MessageFormat扩展,这允许您以任何顺序嵌套复数和性别表达。</target>
        </trans-unit>
        <trans-unit id="a72e1e24aff22427a315dbc60e5118663742eedc" translate="yes" xml:space="preserve">
          <source>As new &lt;code&gt;action&lt;/code&gt;s are inserted, the template &lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt; element needs to be cloned and inserted into &lt;code&gt;ul&lt;/code&gt;. But cloning the &lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt; element is not enough. It also needs to compile the &lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt; so that its directives, like &lt;code&gt;{{action.description}}&lt;/code&gt;, evaluate against the right &lt;a href=&quot;../api/ng/type/%24rootscope.scope&quot;&gt;scope&lt;/a&gt;.</source>
          <target state="translated">在插入新 &lt;code&gt;action&lt;/code&gt; s时，需要克隆template &lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt; 元素并将其插入 &lt;code&gt;ul&lt;/code&gt; 。但是，克隆 &lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt; 元素还不够。它还需要编译 &lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt; ,以便其指令（如 &lt;code&gt;{{action.description}}&lt;/code&gt; ）根据正确的&lt;a href=&quot;../api/ng/type/%24rootscope.scope&quot;&gt;作用域&lt;/a&gt;进行评估。</target>
        </trans-unit>
        <trans-unit id="0ec13f23302b7d1dd1ac45a02e83f66da3e707c4" translate="yes" xml:space="preserve">
          <source>As of version 1.2, AngularJS ships with SCE enabled by default.</source>
          <target state="translated">从1.2版本开始,AngularJS默认启用SCE。</target>
        </trans-unit>
        <trans-unit id="b8080a15a0ddec2d77c43863b3384640745b7f2b" translate="yes" xml:space="preserve">
          <source>As opposed to unit-testing, in an end-to-end testing scenario or in scenario when an application is being developed with the real backend api replaced with a mock, it is often desirable for certain category of requests to bypass the mock and issue a real http request (e.g. to fetch templates or static files from the webserver). To configure the backend with this behavior use the &lt;code&gt;passThrough&lt;/code&gt; request handler of &lt;code&gt;when&lt;/code&gt; instead of &lt;code&gt;respond&lt;/code&gt;.</source>
          <target state="translated">与单元测试相反，在端到端测试方案中或在开发使用真实后端api替代了模拟程序的应用程序的情况下，某些类别的请求通常希望绕过模拟程序并发出请求真实的http请求（例如，从Web服务器获取模板或静态文件）。为了这种行为设定后端使用 &lt;code&gt;passThrough&lt;/code&gt; 的请求处理程序 &lt;code&gt;when&lt;/code&gt; ，而不是 &lt;code&gt;respond&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="f031cf7748d485e3e97d83ef88851314a68f2046" translate="yes" xml:space="preserve">
          <source>As the name suggests, the &lt;strong&gt;isolate scope&lt;/strong&gt; of the directive isolates everything except models that you've explicitly added to the &lt;code&gt;scope: {}&lt;/code&gt; hash object. This is helpful when building reusable components because it prevents a component from changing your model state except for the models that you explicitly pass in.</source>
          <target state="translated">顾名思义，该伪指令的&lt;strong&gt;隔离范围&lt;/strong&gt;隔离了所有已明确添加到该 &lt;code&gt;scope: {}&lt;/code&gt; 模型，这些模型除外：{}哈希对象。这在构建可重用组件时很有用，因为它可以防止组件更改您的模型状态（明确传递的模型除外）。</target>
        </trans-unit>
        <trans-unit id="1d9cf083e1eebce068119ed3315973988cd233c8" translate="yes" xml:space="preserve">
          <source>As you can see, the &lt;code&gt;repeated-item&lt;/code&gt; class is present on the element that will be repeated and this class will be used as a reference within our application's CSS and/or JavaScript animation code to tell AngularJS to perform an animation.</source>
          <target state="translated">如您所见， &lt;code&gt;repeated-item&lt;/code&gt; 类存在于将要重复的元素上，并且该类将用作我们应用程序的CSS和/或JavaScript动画代码中的引用，以告诉AngularJS执行动画。</target>
        </trans-unit>
        <trans-unit id="de4fc7d19e5e0a6d0ac18488a8fccba793d3b358" translate="yes" xml:space="preserve">
          <source>Asking for dependencies solves the issue of hard coding, but it also means that the injector needs to be passed throughout the application. Passing the injector breaks the &lt;a href=&quot;http://en.wikipedia.org/wiki/Law_of_Demeter&quot;&gt;Law of Demeter&lt;/a&gt;. To remedy this, we use a declarative notation in our HTML templates, to hand the responsibility of creating components over to the injector, as in this example:</source>
          <target state="translated">要求依赖性解决了硬编码的问题，但这也意味着需要在整个应用程序中传递注入器。通过喷射器会破坏&lt;a href=&quot;http://en.wikipedia.org/wiki/Law_of_Demeter&quot;&gt;德米特律&lt;/a&gt;。为了解决这个问题，我们在HTML模板中使用了一个声明性的符号，将创建组件的责任移交给注射器，如下例所示：</target>
        </trans-unit>
        <trans-unit id="602dca52ef2fb38805f8af26bdf588f7fcb1e4e4" translate="yes" xml:space="preserve">
          <source>Assert that all of the logging methods have no logged messages. If any messages are present, an exception is thrown.</source>
          <target state="translated">假设所有的日志记录方法都没有记录的消息。如果有任何消息,就会抛出异常。</target>
        </trans-unit>
        <trans-unit id="0e32c36e98ffeeb8e37e062d05cb463a7f175dbe" translate="yes" xml:space="preserve">
          <source>Assignable AngularJS expression to data-bind to.</source>
          <target state="translated">可指定AngularJS表达式来进行数据绑定。</target>
        </trans-unit>
        <trans-unit id="fa624932ddb296ac5007e5591dd9bfb041b6cb1e" translate="yes" xml:space="preserve">
          <source>Assigning a property to &lt;code&gt;$scope&lt;/code&gt; creates or updates the model.</source>
          <target state="translated">将属性分配给 &lt;code&gt;$scope&lt;/code&gt; 创建或更新模型。</target>
        </trans-unit>
        <trans-unit id="adc58ef773100f1ac890b76704547adbe78e189d" translate="yes" xml:space="preserve">
          <source>Associates the provided element with a host parent element to allow the element to be animated even if it exists outside of the DOM structure of the AngularJS application. By doing so, any animation triggered via &lt;code&gt;$animate&lt;/code&gt; can be issued on the element despite being outside the realm of the application or within another application. Say for example if the application was bootstrapped on an element that is somewhere inside of the &lt;code&gt;&amp;lt;body&amp;gt;&lt;/code&gt; tag, but we wanted to allow for an element to be situated as a direct child of &lt;code&gt;document.body&lt;/code&gt;, then this can be achieved by pinning the element via &lt;code&gt;$animate.pin(element)&lt;/code&gt;. Keep in mind that calling &lt;code&gt;$animate.pin(element, parentElement)&lt;/code&gt; will not actually insert into the DOM anywhere; it will just create the association.</source>
          <target state="translated">将提供的元素与宿主父元素相关联，以允许对该元素进行动画处理，即使该元素存在于AngularJS应用程序的DOM结构之外。这样，即使在应用程序范围之外或在另一个应用程序内，通过 &lt;code&gt;$animate&lt;/code&gt; 触发的任何动画都可以在该元素上发布。假设例如，如果应用程序是在 &lt;code&gt;&amp;lt;body&amp;gt;&lt;/code&gt; 标记内部某个元素上引导的，但是我们希望允许该元素作为 &lt;code&gt;document.body&lt;/code&gt; 的直接子元素放置，则可以通过固定通过 &lt;code&gt;$animate.pin(element)&lt;/code&gt; 。请记住，调用 &lt;code&gt;$animate.pin(element, parentElement)&lt;/code&gt; 实际上不会在任何地方插入DOM；它只会创建关联。</target>
        </trans-unit>
        <trans-unit id="8a319250e7a62a6449653025f2ab2f88895ac77d" translate="yes" xml:space="preserve">
          <source>Asynchronous Loading</source>
          <target state="translated">异步加载</target>
        </trans-unit>
        <trans-unit id="5bbd06015f69fbcbcdb24725f6bb1567275ce22b" translate="yes" xml:space="preserve">
          <source>At a high level, directives are markers on a DOM element (such as an attribute, element name, comment or CSS class) that tell AngularJS's &lt;strong&gt;HTML compiler&lt;/strong&gt; (&lt;a href=&quot;../api/ng/service/%24compile&quot;&gt;&lt;code&gt;$compile&lt;/code&gt;&lt;/a&gt;) to attach a specified behavior to that DOM element (e.g. via event listeners), or even to transform the DOM element and its children.</source>
          <target state="translated">在高层次上，伪指令是DOM元素（例如属性，元素名称，注释或CSS类）上的标记，它们告诉AngularJS的&lt;strong&gt;HTML编译器&lt;/strong&gt;（&lt;a href=&quot;../api/ng/service/%24compile&quot;&gt; &lt;code&gt;$compile&lt;/code&gt; &lt;/a&gt;）将指定的行为附加到该DOM元素（例如，通过事件侦听器） ，甚至可以转换DOM元素及其子元素。</target>
        </trans-unit>
        <trans-unit id="fded031893dd4b58525b3e28e5c62e3f06e82a91" translate="yes" xml:space="preserve">
          <source>At first glance, it looks like removing the original &lt;code&gt;addMouseover&lt;/code&gt; attribute is all there is needed to make this example work. However, if the directive element or its children have other directives attached, they will be compiled and linked again, because the compiler doesn't keep track of which directives have been assigned to which elements.</source>
          <target state="translated">乍一看，看起来只有删除原始的 &lt;code&gt;addMouseover&lt;/code&gt; 属性，才能使此示例正常工作。但是，如果指令元素或其子元素附加了其他指令，则它们将再次编译并链接，因为编译器无法跟踪已将哪些指令分配给了哪些元素。</target>
        </trans-unit>
        <trans-unit id="16d656728db993e2d91d65f16fd40b8735a327f3" translate="yes" xml:space="preserve">
          <source>At first it might not be obvious why this extra complexity is worth the trouble. The payoff comes in the way of guarantees that promise and deferred APIs make, see &lt;a href=&quot;https://github.com/kriskowal/uncommonjs/blob/master/promises/specification.md&quot;&gt;https://github.com/kriskowal/uncommonjs/blob/master/promises/specification.md&lt;/a&gt;.</source>
          <target state="translated">乍一看，这种额外的复杂性值得解决的原因可能并不明显。收益来自保证API和承诺API的保证，请参见&lt;a href=&quot;https://github.com/kriskowal/uncommonjs/blob/master/promises/specification.md&quot;&gt;https://github.com/kriskowal/uncommonjs/blob/master/promises/specification.md&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="e100b35ab6c0fe1f3d2cdccfdad5402c15024472" translate="yes" xml:space="preserve">
          <source>At runtime the &lt;a href=&quot;../api/ng/directive/ngrepeat&quot;&gt;&lt;code&gt;ngRepeat&lt;/code&gt;&lt;/a&gt; watches the expression and as items are added to the array it clones the &lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt; element, creates a new &lt;a href=&quot;../api/ng/type/%24rootscope.scope&quot;&gt;scope&lt;/a&gt; for the cloned &lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt; element and calls the link function on the cloned &lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt;.</source>
          <target state="translated">在运行时，&lt;a href=&quot;../api/ng/directive/ngrepeat&quot;&gt; &lt;code&gt;ngRepeat&lt;/code&gt; &lt;/a&gt;手表的表达和作为项目被添加到阵列中它克隆的 &lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt; 元素，创建一个新的&lt;a href=&quot;../api/ng/type/%24rootscope.scope&quot;&gt;范围&lt;/a&gt;为克隆的 &lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt; 元件和克隆调用链接功能 &lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="31dab9e3efd9dd8deab1758a62454f3f213bdba8" translate="yes" xml:space="preserve">
          <source>At runtime: &lt;a href=&quot;../api/ng/service/%24animate#enabled.html&quot;&gt;$animate.enabled()&lt;/a&gt;</source>
          <target state="translated">在运行时：&lt;a href=&quot;../api/ng/service/%24animate#enabled.html&quot;&gt;$ animate.enabled（）&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="f67e221630aa693d76075a22c1ba1f64147ff501" translate="yes" xml:space="preserve">
          <source>At the end of &lt;code&gt;$apply&lt;/code&gt;, AngularJS performs a &lt;a href=&quot;../api/ng/type/%24rootscope.scope#%24digest.html&quot;&gt;$digest&lt;/a&gt; cycle on the root scope, which then propagates throughout all child scopes. During the &lt;code&gt;$digest&lt;/code&gt; cycle, all &lt;code&gt;$watch&lt;/code&gt;ed expressions or functions are checked for model mutation and if a mutation is detected, the &lt;code&gt;$watch&lt;/code&gt; listener is called.</source>
          <target state="translated">在 &lt;code&gt;$apply&lt;/code&gt; 的末尾，AngularJS 在根作用域上执行&lt;a href=&quot;../api/ng/type/%24rootscope.scope#%24digest.html&quot;&gt;$ digest&lt;/a&gt;循环，然后在整个子作用域中传播。在 &lt;code&gt;$digest&lt;/code&gt; 周期内，将检查所有 &lt;code&gt;$watch&lt;/code&gt; watched表达式或函数是否存在模型突变，如果检测到突变，则会调用 &lt;code&gt;$watch&lt;/code&gt; 侦听器。</target>
        </trans-unit>
        <trans-unit id="811060f5b400ba59f43a01f37e35d2b7526adfec" translate="yes" xml:space="preserve">
          <source>At this point you may wonder why the compile process has separate compile and link phases. The short answer is that compile and link separation is needed any time a change in a model causes a change in the &lt;strong&gt;structure&lt;/strong&gt; of the DOM.</source>
          <target state="translated">此时，您可能想知道为什么编译过程具有单独的编译和链接阶段。简短的答案是，每当模型更改导致DOM &lt;strong&gt;结构&lt;/strong&gt;更改时，都需要进行编译和链接分离。</target>
        </trans-unit>
        <trans-unit id="7d38f6daaef849032ab49cae508751fbd896de2c" translate="yes" xml:space="preserve">
          <source>Attaching new behavior to DOM elements, such as DOM event handling.</source>
          <target state="translated">为DOM元素附加新的行为,如DOM事件处理。</target>
        </trans-unit>
        <trans-unit id="f18ef5bd3a9704f6d7f339924ddd7e7a2c353300" translate="yes" xml:space="preserve">
          <source>Attribute values are not merged</source>
          <target state="translated">属性值不合并</target>
        </trans-unit>
        <trans-unit id="a6652617f2c799eb11ee727b16c5646c48af6905" translate="yes" xml:space="preserve">
          <source>Attributes</source>
          <target state="translated">Attributes</target>
        </trans-unit>
        <trans-unit id="9cf83f638488303498c3d24f3e3e27d978f4e28e" translate="yes" xml:space="preserve">
          <source>Attributes such as &lt;code&gt;disabled&lt;/code&gt; are called &lt;code&gt;boolean&lt;/code&gt; attributes, because their presence means &lt;code&gt;true&lt;/code&gt; and their absence means &lt;code&gt;false&lt;/code&gt;. We cannot use normal attribute bindings with them, because the HTML specification does not require browsers to preserve the values of boolean attributes. This means that if we put an AngularJS interpolation expression into such an attribute then the binding information would be lost, because the browser ignores the attribute value.</source>
          <target state="translated">诸如 &lt;code&gt;disabled&lt;/code&gt; 类的属性称为 &lt;code&gt;boolean&lt;/code&gt; 属性，因为它们的存在表示 &lt;code&gt;true&lt;/code&gt; ,而它们的缺失表示 &lt;code&gt;false&lt;/code&gt; 。我们不能将常规属性绑定与它们一起使用，因为HTML规范不需要浏览器保留布尔属性的值。这意味着，如果将AngularJS插值表达式放入此类属性中，则绑定信息将丢失，因为浏览器会忽略该属性值。</target>
        </trans-unit>
        <trans-unit id="ec94b23d4cf5e5552507a5899b9e011b45a154d6" translate="yes" xml:space="preserve">
          <source>Augment the $delegate</source>
          <target state="translated">增加$delegate</target>
        </trans-unit>
        <trans-unit id="41869ae502e1528f5e860a994dc5f7a5715f3cc3" translate="yes" xml:space="preserve">
          <source>Automatic Initialization</source>
          <target state="translated">自动初始化</target>
        </trans-unit>
        <trans-unit id="cf01601ec7b755876c4207df91db99430e5fd491" translate="yes" xml:space="preserve">
          <source>Automatic value adjustment also means that a range input element can never have the &lt;code&gt;required&lt;/code&gt;, &lt;code&gt;min&lt;/code&gt;, or &lt;code&gt;max&lt;/code&gt; errors.</source>
          <target state="translated">Automatic value adjustment also means that a range input element can never have the &lt;code&gt;required&lt;/code&gt; , &lt;code&gt;min&lt;/code&gt; , or &lt;code&gt;max&lt;/code&gt; errors.</target>
        </trans-unit>
        <trans-unit id="1105b837870d87e705ed3933cf58b23765b1ac5f" translate="yes" xml:space="preserve">
          <source>Available task types:</source>
          <target state="translated">现有任务类型:</target>
        </trans-unit>
        <trans-unit id="b158354eab7dcfad40f037bfff4be8583770ec91" translate="yes" xml:space="preserve">
          <source>Back to the initial question: How does the &lt;code&gt;InvoiceController&lt;/code&gt; get a reference to the &lt;code&gt;currencyConverter&lt;/code&gt; function? In AngularJS, this is done by simply defining arguments on the constructor function. With this, the injector is able to create the objects in the right order and pass the previously created objects into the factories of the objects that depend on them. In our example, the &lt;code&gt;InvoiceController&lt;/code&gt; has an argument named &lt;code&gt;currencyConverter&lt;/code&gt;. By this, AngularJS knows about the dependency between the controller and the service and calls the controller with the service instance as argument.</source>
          <target state="translated">回到最初的问题： &lt;code&gt;InvoiceController&lt;/code&gt; 如何获得对 &lt;code&gt;currencyConverter&lt;/code&gt; 函数的引用？在AngularJS中，这是通过在构造函数上简单定义参数来完成的。这样，注入器就可以按正确的顺序创建对象，并将先前创建的对象传递到依赖它们的对象的工厂中。在我们的示例中， &lt;code&gt;InvoiceController&lt;/code&gt; 有一个名为 &lt;code&gt;currencyConverter&lt;/code&gt; 的参数。这样，AngularJS知道了控制器和服务之间的依赖关系，并以服务实例作为参数来调用控制器。</target>
        </trans-unit>
        <trans-unit id="d9c883a905731bc3ab1e5b1797dcc17a576c4565" translate="yes" xml:space="preserve">
          <source>Back to top</source>
          <target state="translated">返回顶部</target>
        </trans-unit>
        <trans-unit id="667908f902838bdc241aa234ee74229ead2f1562" translate="yes" xml:space="preserve">
          <source>Backend definitions</source>
          <target state="translated">后端定义</target>
        </trans-unit>
        <trans-unit id="dd04a0ffb87db83b44ae4c32b0c0f5c8813e323e" translate="yes" xml:space="preserve">
          <source>Backend definitions allow you to define a fake backend for your application which doesn't assert if a particular request was made or not, it just returns a trained response if a request is made. The test will pass whether or not the request gets made during testing.</source>
          <target state="translated">后台定义允许你为你的应用定义一个假的后台,它不会断言某个特定的请求是否被提出,它只是在请求被提出时返回一个训练好的响应。在测试过程中,无论请求是否被发出,测试都会通过。</target>
        </trans-unit>
        <trans-unit id="59f299125e1e43938ff9695b8c50f5b33268fea4" translate="yes" xml:space="preserve">
          <source>Base href constraints</source>
          <target state="translated">基本的href限制</target>
        </trans-unit>
        <trans-unit id="f8401938c390cf3e82bf20e8f5b954ce826b2925" translate="yes" xml:space="preserve">
          <source>Based on the context, other options may exist to mark a value as trusted / configure the behavior of &lt;a href=&quot;../service/%24sce&quot;&gt;&lt;code&gt;$sce&lt;/code&gt;&lt;/a&gt;. For example, to restrict the &lt;code&gt;RESOURCE_URL&lt;/code&gt; context to specific origins, use the &lt;a href=&quot;../provider/%24scedelegateprovider#resourceUrlWhitelist.html&quot;&gt;resourceUrlWhitelist()&lt;/a&gt; and &lt;a href=&quot;../provider/%24scedelegateprovider#resourceUrlBlacklist.html&quot;&gt;resourceUrlBlacklist()&lt;/a&gt;.</source>
          <target state="translated">根据上下文，可能存在其他选项来将值标记为受信任/配置&lt;a href=&quot;../service/%24sce&quot;&gt; &lt;code&gt;$sce&lt;/code&gt; &lt;/a&gt;的行为。例如，要将 &lt;code&gt;RESOURCE_URL&lt;/code&gt; 上下文限制为特定来源，请使用&lt;a href=&quot;../provider/%24scedelegateprovider#resourceUrlWhitelist.html&quot;&gt;resourceUrlWhitelist（）&lt;/a&gt;和&lt;a href=&quot;../provider/%24scedelegateprovider#resourceUrlBlacklist.html&quot;&gt;resourceUrlBlacklist（）&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="966128c4ac23ffe813426a6e232622f047cdaa69" translate="yes" xml:space="preserve">
          <source>Based on the context, other options may exist to mark a value as trusted / configure the behavior of &lt;a href=&quot;../service/%24sce&quot;&gt;&lt;code&gt;$sce&lt;/code&gt;&lt;/a&gt;. For example, to restrict the &lt;code&gt;RESOURCE_URL&lt;/code&gt; context to specific origins, use the &lt;a href=&quot;../provider/%24scedelegateprovider#trustedResourceUrlList.html&quot;&gt;trustedResourceUrlList()&lt;/a&gt; and &lt;a href=&quot;../provider/%24scedelegateprovider#bannedResourceUrlList.html&quot;&gt;bannedResourceUrlList()&lt;/a&gt;.</source>
          <target state="translated">Based on the context, other options may exist to mark a value as trusted / configure the behavior of &lt;a href=&quot;../service/%24sce&quot;&gt; &lt;code&gt;$sce&lt;/code&gt; &lt;/a&gt;. For example, to restrict the &lt;code&gt;RESOURCE_URL&lt;/code&gt; context to specific origins, use the &lt;a href=&quot;../provider/%24scedelegateprovider#trustedResourceUrlList.html&quot;&gt;trustedResourceUrlList()&lt;/a&gt; and &lt;a href=&quot;../provider/%24scedelegateprovider#bannedResourceUrlList.html&quot;&gt;bannedResourceUrlList()&lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="aa2c96dacf00c451ef465f6115a45a20bccf1256" translate="yes" xml:space="preserve">
          <source>Basic</source>
          <target state="translated">Basic</target>
        </trans-unit>
        <trans-unit id="b20cbc384159fd820ed034fd3615298ec09f5902" translate="yes" xml:space="preserve">
          <source>Basic Usage</source>
          <target state="translated">基本使用方法</target>
        </trans-unit>
        <trans-unit id="a630ca8deb35f0b3fd6f775e263194a67f9726ee" translate="yes" xml:space="preserve">
          <source>Basic transclusion</source>
          <target state="translated">基本的转归</target>
        </trans-unit>
        <trans-unit id="cb3a8802da5b3164771a468d78ff7995a249f08a" translate="yes" xml:space="preserve">
          <source>Basic usage</source>
          <target state="translated">基本用途</target>
        </trans-unit>
        <trans-unit id="a8f4a3a1f0d4e06e71d9546076fd38b396b53d8c" translate="yes" xml:space="preserve">
          <source>Be aware that a scope may not be included in digests if it has a suspended ancestor, even if &lt;code&gt;$isSuspended()&lt;/code&gt; returns false.</source>
          <target state="translated">请注意，即使 &lt;code&gt;$isSuspended()&lt;/code&gt; 返回false ，范围也可能不包含在摘要中（如果祖先已暂停）。</target>
        </trans-unit>
        <trans-unit id="eb178cd3edcfd7946fd6725c07d458de69029a68" translate="yes" xml:space="preserve">
          <source>Be aware that the attribute values to match against cannot be expressions. They are interpreted as literal string values to match against. For example, &lt;strong&gt;&lt;code&gt;ng-switch-when=&quot;someVal&quot;&lt;/code&gt;&lt;/strong&gt; will match against the string &lt;code&gt;&quot;someVal&quot;&lt;/code&gt; not against the value of the expression &lt;code&gt;$scope.someVal&lt;/code&gt;.</source>
          <target state="translated">请注意，要匹配的属性值不能是表达式。它们被解释为要匹配的文字字符串值。例如，&lt;strong&gt; &lt;code&gt;ng-switch-when=&quot;someVal&quot;&lt;/code&gt; &lt;/strong&gt;将匹配字符串 &lt;code&gt;&quot;someVal&quot;&lt;/code&gt; 而不是表达式 &lt;code&gt;$scope.someVal&lt;/code&gt; 的值。</target>
        </trans-unit>
        <trans-unit id="d57c89c178c1084f792baa907f8b2cd67bfc1260" translate="yes" xml:space="preserve">
          <source>Be aware that the controller will be instantiated and attached to the scope as specified in the component definition object. If you do not provide a &lt;code&gt;$scope&lt;/code&gt; object in the &lt;code&gt;locals&lt;/code&gt; param then the helper will create a new isolated scope as a child of &lt;code&gt;$rootScope&lt;/code&gt;.</source>
          <target state="translated">请注意，控制器将被实例化并附加到组件定义对象中指定的范围。如果您未在 &lt;code&gt;locals&lt;/code&gt; 参数中提供 &lt;code&gt;$scope&lt;/code&gt; 对象，则帮助程序将创建一个新的隔离范围作为 &lt;code&gt;$rootScope&lt;/code&gt; 的子级。</target>
        </trans-unit>
        <trans-unit id="6ed3cc776f278e962e755c71673491d092cfea71" translate="yes" xml:space="preserve">
          <source>Be aware that, before AngularJS 1.7.0, &lt;code&gt;a[href]&lt;/code&gt; and &lt;code&gt;img[src]&lt;/code&gt; used to sanitize their interpolated values directly rather than rely upon &lt;a href=&quot;%24sce#getTrusted.html&quot;&gt;&lt;code&gt;$sce.getTrusted&lt;/code&gt;&lt;/a&gt;. &lt;strong&gt;As of 1.7.0, this is no longer the case.&lt;/strong&gt; Now such interpolations are marked as requiring &lt;code&gt;$sce.URL&lt;/code&gt; (for &lt;code&gt;a[href]&lt;/code&gt;) or &lt;code&gt;$sce.MEDIA_URL&lt;/code&gt; (for &lt;code&gt;img[src]&lt;/code&gt;), so that the sanitization happens (via &lt;code&gt;$sce.getTrusted...&lt;/code&gt;) when the &lt;code&gt;$interpolate&lt;/code&gt; service evaluates the expressions.</source>
          <target state="translated">请注意，在AngularJS 1.7.0之前， &lt;code&gt;a[href]&lt;/code&gt; 和 &lt;code&gt;img[src]&lt;/code&gt; 用于直接清理其插值，而不是依赖于&lt;a href=&quot;%24sce#getTrusted.html&quot;&gt; &lt;code&gt;$sce.getTrusted&lt;/code&gt; &lt;/a&gt;。&lt;strong&gt;从1.7.0版开始，情况不再如此。&lt;/strong&gt;现在，这样的插值被标记为需要 &lt;code&gt;$sce.URL&lt;/code&gt; （对于 &lt;code&gt;a[href]&lt;/code&gt; ）或 &lt;code&gt;$sce.MEDIA_URL&lt;/code&gt; （对于 &lt;code&gt;img[src]&lt;/code&gt; ），以便在 &lt;code&gt;$interpolate&lt;/code&gt; 时进行清理（​​通过 &lt;code&gt;$sce.getTrusted...&lt;/code&gt; ）。服务评估表达式。</target>
        </trans-unit>
        <trans-unit id="2dc590986ab9f4a1c9c7cd048d14ee382cfa0665" translate="yes" xml:space="preserve">
          <source>Be careful when using &lt;code&gt;select&lt;/code&gt;&lt;strong&gt;&lt;code&gt;as&lt;/code&gt;&lt;/strong&gt; and &lt;strong&gt;&lt;code&gt;track by&lt;/code&gt;&lt;/strong&gt; in the same expression.</source>
          <target state="translated">在同一表达式中使用 &lt;code&gt;select&lt;/code&gt; &lt;strong&gt; &lt;code&gt;as&lt;/code&gt; &lt;/strong&gt;和&lt;strong&gt; &lt;code&gt;track by&lt;/code&gt; &lt;/strong&gt;时要小心。</target>
        </trans-unit>
        <trans-unit id="756d08e3929f443998e8b33d291e1c7ac910d9d7" translate="yes" xml:space="preserve">
          <source>Be ready to update rapidly when new security-centric patches are available.</source>
          <target state="translated">当有新的以安全为中心的补丁时,要做好快速更新的准备。</target>
        </trans-unit>
        <trans-unit id="064da4156fc4de43ba0aa3698866646d47db5fcc" translate="yes" xml:space="preserve">
          <source>Be sure to check all relative links, images, scripts etc. AngularJS requires you to specify the url base in the head of your main html file (&lt;code&gt;&amp;lt;base href=&quot;/my-base/index.html&quot;&amp;gt;&lt;/code&gt;) unless &lt;code&gt;html5Mode.requireBase&lt;/code&gt; is set to &lt;code&gt;false&lt;/code&gt; in the html5Mode definition object passed to &lt;code&gt;$locationProvider.html5Mode()&lt;/code&gt;. With that, relative urls will always be resolved to this base url, even if the initial url of the document was different.</source>
          <target state="translated">确保检查所有相关链接，图像，脚本等。AngularJS要求您在主html文件（ &lt;code&gt;&amp;lt;base href=&quot;/my-base/index.html&quot;&amp;gt;&lt;/code&gt; ）的开头指定url base，除非 &lt;code&gt;html5Mode.requireBase&lt;/code&gt; 在传递给 &lt;code&gt;$locationProvider.html5Mode()&lt;/code&gt; 的html5Mode定义对象中将设置为 &lt;code&gt;false&lt;/code&gt; 。这样，即使文档的初始URL不同，相对URL仍将始终解析为该基本URL。</target>
        </trans-unit>
        <trans-unit id="c6ccae1d4f176aa022cf0467d0a41874c687b05c" translate="yes" xml:space="preserve">
          <source>Bear in mind that calling &lt;code&gt;$http.jsonp&lt;/code&gt; gives the remote server (and, if the request is not secured, any Man-in-the-Middle attackers) instant remote code execution in your application: the result of these requests is handed off to the browser as a regular &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; tag.</source>
          <target state="translated">请记住，调用 &lt;code&gt;$http.jsonp&lt;/code&gt; 在应用程序中立即执行远程服务器（如果请求不受保护，则是任何中间人攻击者）都可以立即执行远程代码：这些请求的结果将传递给浏览器作为常规 &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; 标记。</target>
        </trans-unit>
        <trans-unit id="913a9f820820f8fa1cd66701b894a4992b1a3a57" translate="yes" xml:space="preserve">
          <source>Because &lt;code&gt;$location&lt;/code&gt; uses getters/setters, you can use &lt;code&gt;ng-model-options=&quot;{ getterSetter: true }&quot;&lt;/code&gt; to bind it to &lt;code&gt;ngModel&lt;/code&gt;:</source>
          <target state="translated">因为 &lt;code&gt;$location&lt;/code&gt; 使用getters / setter，所以可以使用 &lt;code&gt;ng-model-options=&quot;{ getterSetter: true }&quot;&lt;/code&gt; 将其绑定到 &lt;code&gt;ngModel&lt;/code&gt; ：</target>
        </trans-unit>
        <trans-unit id="66918714be29738338a327fa4d2ac2597587dfb7" translate="yes" xml:space="preserve">
          <source>Because AngularJS separates logic from the view layer, it keeps controllers easy to test. Let's take a look at how we might test the controller below, which provides &lt;code&gt;$scope.grade&lt;/code&gt;, which sets a property on the scope based on the length of the password.</source>
          <target state="translated">由于AngularJS将逻辑与视图层分开，因此使控制器易于测试。让我们看一下如何测试下面的控制器，该控制器提供 &lt;code&gt;$scope.grade&lt;/code&gt; ，该控制器根据密码的长度在作用域上设置一个属性。</target>
        </trans-unit>
        <trans-unit id="1af7e1fd57a13d91c70dd236e289a06c3575397f" translate="yes" xml:space="preserve">
          <source>Because calling the &lt;code&gt;then&lt;/code&gt; method of a promise returns a new derived promise, it is easily possible to create a chain of promises:</source>
          <target state="translated">因为调用promise 的 &lt;code&gt;then&lt;/code&gt; 方法会返回新的派生promise，所以很容易创建promise的链：</target>
        </trans-unit>
        <trans-unit id="9672864e0e40f75d7a0f50f10bc9d756a2e191b3" translate="yes" xml:space="preserve">
          <source>Because controllers are not available on the global scope, we need to use &lt;a href=&quot;../api/ngmock/function/angular.mock.inject&quot;&gt;&lt;code&gt;angular.mock.inject&lt;/code&gt;&lt;/a&gt; to inject our controller first. The first step is to use the &lt;code&gt;module&lt;/code&gt; function, which is provided by angular-mocks. This loads in the module it's given, so it is available in your tests. We pass this into &lt;code&gt;beforeEach&lt;/code&gt;, which is a function Jasmine provides that lets us run code before each test. Then we can use &lt;code&gt;inject&lt;/code&gt; to access &lt;code&gt;$controller&lt;/code&gt;, the service that is responsible for instantiating controllers.</source>
          <target state="translated">由于控制器在全局范围内不可用，因此我们需要使用&lt;a href=&quot;../api/ngmock/function/angular.mock.inject&quot;&gt; &lt;code&gt;angular.mock.inject&lt;/code&gt; &lt;/a&gt;首先注入控制器。第一步是使用 &lt;code&gt;module&lt;/code&gt; 功能，该功能由角度模拟提供。这将加载给定的模块，因此可以在测试中使用。我们将其传递给 &lt;code&gt;beforeEach&lt;/code&gt; ，这是Jasmine提供的功能，可让我们在每次测试之前运行代码。然后，我们可以使用 &lt;code&gt;inject&lt;/code&gt; 访问 &lt;code&gt;$controller&lt;/code&gt; ，该服务负责实例化控制器。</target>
        </trans-unit>
        <trans-unit id="75d8d0e2449a8a637f5cd0e710800e69e1f06b91" translate="yes" xml:space="preserve">
          <source>Because ngAria hooks into the &lt;code&gt;ng-disabled&lt;/code&gt; directive, developers do not have to do anything to enable this feature. The &lt;code&gt;aria-disabled&lt;/code&gt; attribute is automatically managed simply as a silent side-effect of using &lt;code&gt;ng-disabled&lt;/code&gt; with the ngAria module.</source>
          <target state="translated">Because ngAria hooks into the &lt;code&gt;ng-disabled&lt;/code&gt; directive, developers do not have to do anything to enable this feature. The &lt;code&gt;aria-disabled&lt;/code&gt; attribute is automatically managed simply as a silent side-effect of using &lt;code&gt;ng-disabled&lt;/code&gt; with the ngAria module.</target>
        </trans-unit>
        <trans-unit id="e4f9e4a032b3c265ca8bc0abd382f689fad90b1d" translate="yes" xml:space="preserve">
          <source>Because of rewriting capability in HTML5 mode, your users will be able to open regular url links in legacy browsers and hashbang links in modern browser:</source>
          <target state="translated">由于HTML5模式下的重写能力,您的用户将能够在传统浏览器中打开常规的网址链接,在现代浏览器中打开哈希邦链接。</target>
        </trans-unit>
        <trans-unit id="2bf8e5fddffa8c784285c98c1c4d48d93b7de849" translate="yes" xml:space="preserve">
          <source>Because of these caveats, we recommend avoiding this style of annotation.</source>
          <target state="translated">由于这些注意事项,我们建议避免使用这种风格的注释。</target>
        </trans-unit>
        <trans-unit id="f831e48daf5bfcb79f6cbc1cd4201ba14ebde551" translate="yes" xml:space="preserve">
          <source>Because template loading is asynchronous the compiler will suspend compilation of directives on that element for later when the template has been resolved. In the meantime it will continue to compile and link sibling and parent elements as though this element had not contained any directives.</source>
          <target state="translated">由于模板加载是异步的,编译器将暂停对该元素指令的编译,待以后模板解析完毕后再进行编译。同时,它将继续编译和链接同级元素和父元素,就像这个元素没有包含任何指令一样。</target>
        </trans-unit>
        <trans-unit id="c2686aeaeb26c6b0f88a3e35dc78028d0d367579" translate="yes" xml:space="preserve">
          <source>Because the constants are fixed, they get applied before other provide methods. See &lt;a href=&quot;../../auto/service/%24provide#constant.html&quot;&gt;$provide.constant()&lt;/a&gt;.</source>
          <target state="translated">因为常量是固定的，所以它们在其他提供方法之前应用。参见&lt;a href=&quot;../../auto/service/%24provide#constant.html&quot;&gt;$ provide.constant（）&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="fe7c5eb34e275ba1c5c585a6d36df4df0abd8a0c" translate="yes" xml:space="preserve">
          <source>Because the view is just a projection of the model, the controller is completely separated from the view and unaware of it. This makes testing a snap because it is easy to test your controller in isolation without the view and the related DOM/browser dependency.</source>
          <target state="translated">因为视图只是模型的投影,控制器与视图完全分离,不知道它的存在。这使得测试变得非常简单,因为没有视图和相关的DOM/浏览器依赖,就可以轻松地隔离测试你的控制器。</target>
        </trans-unit>
        <trans-unit id="d2474582b13c2c5cbe322f103e9aa433011581de" translate="yes" xml:space="preserve">
          <source>Because these messages can themselves contain AngularJS expressions, you could also write this as follows:</source>
          <target state="translated">因为这些消息本身可以包含AngularJS表达式,你也可以这样写。</target>
        </trans-unit>
        <trans-unit id="e949293bb3141d39921183faafd54e8bcb4089c2" translate="yes" xml:space="preserve">
          <source>Becomes:</source>
          <target state="translated">Becomes:</target>
        </trans-unit>
        <trans-unit id="eac5d76c03a8af1becda5e52ec3a36ad44266321" translate="yes" xml:space="preserve">
          <source>Before animating, &lt;code&gt;ngAnimate&lt;/code&gt; checks if the animated element is inside the application DOM tree. If not, no animation is run. Usually, this is not a problem since most apps use the &lt;code&gt;html&lt;/code&gt; or &lt;code&gt;body&lt;/code&gt; elements as their root.</source>
          <target state="translated">在制作动画之前， &lt;code&gt;ngAnimate&lt;/code&gt; 检查动画元素是否在应用程序DOM树内。如果不是，则不运行动画。通常，这不是问题，因为大多数应用程序都将 &lt;code&gt;html&lt;/code&gt; 或 &lt;code&gt;body&lt;/code&gt; 元素用作其根。</target>
        </trans-unit>
        <trans-unit id="f9dea2dff9695dcee2903587ddf4721df61dee63" translate="yes" xml:space="preserve">
          <source>Before compilation</source>
          <target state="translated">汇编前</target>
        </trans-unit>
        <trans-unit id="f741ff2771fb251149a44e53c3845e34e949b99f" translate="yes" xml:space="preserve">
          <source>Before compilation:</source>
          <target state="translated">编制前:</target>
        </trans-unit>
        <trans-unit id="d2ed330fba12b5acc7c29421a0cc662fa9ec96e4" translate="yes" xml:space="preserve">
          <source>Before we can write a directive, we need to know how AngularJS's &lt;a href=&quot;compiler&quot;&gt;HTML compiler&lt;/a&gt; determines when to use a given directive.</source>
          <target state="translated">在编写指令之前，我们需要了解AngularJS的&lt;a href=&quot;compiler&quot;&gt;HTML编译器&lt;/a&gt;如何确定何时使用给定指令。</target>
        </trans-unit>
        <trans-unit id="a4244aeaf237de0bd45b29f36dc3172737bcea80" translate="yes" xml:space="preserve">
          <source>Before you start creating interceptors, be sure to understand the &lt;a href=&quot;%24q&quot;&gt;$q and deferred/promise APIs&lt;/a&gt;.</source>
          <target state="translated">在开始创建拦截器之前，请确保了解&lt;a href=&quot;%24q&quot;&gt;$ q和deferred / promise API&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="c9130bc666cd2fae643b177fd9066f63c8444f18" translate="yes" xml:space="preserve">
          <source>Below is a more detailed breakdown of the attributes handled by ngAria:</source>
          <target state="translated">下面是ngAria处理的属性的更详细的分解。</target>
        </trans-unit>
        <trans-unit id="11bbabfeedc954ff982e0a78487164bd01cf2aef" translate="yes" xml:space="preserve">
          <source>Below is a pseudo code showing how a simplified dialog component may work.</source>
          <target state="translated">下面是一段伪代码,展示了一个简化的对话框组件如何工作。</target>
        </trans-unit>
        <trans-unit id="8780b9b9f2ecc23a18832842a6331d7e904cf4bd" translate="yes" xml:space="preserve">
          <source>Below is a quick example of animations being enabled for &lt;code&gt;ngShow&lt;/code&gt; and &lt;code&gt;ngHide&lt;/code&gt;:</source>
          <target state="translated">以下是为 &lt;code&gt;ngShow&lt;/code&gt; 和 &lt;code&gt;ngHide&lt;/code&gt; 启用动画的快速示例：</target>
        </trans-unit>
        <trans-unit id="be1db57587b85598644961ce203ff84d2d516194" translate="yes" xml:space="preserve">
          <source>Below is the corresponding code using the &lt;code&gt;$compile&lt;/code&gt; service. This should help give you an idea of what AngularJS does internally.</source>
          <target state="translated">以下是使用 &lt;code&gt;$compile&lt;/code&gt; 服务的相应代码。这应该有助于您了解AngularJS在内部的功能。</target>
        </trans-unit>
        <trans-unit id="95b8e9add7e9e88cd1012d17110827a722b230cd" translate="yes" xml:space="preserve">
          <source>Besides making it possible to bind different data to the scope inside a directive, using an isolated scope has another effect.</source>
          <target state="translated">除了可以在指令内将不同的数据绑定到作用域外,使用隔离的作用域还有另一个效果。</target>
        </trans-unit>
        <trans-unit id="93406408f653eced71823f50bb1a33f720c1359a" translate="yes" xml:space="preserve">
          <source>Besides the new file that contains the controller code, we also added an &lt;a href=&quot;../api/ng/directive/ngcontroller&quot;&gt;&lt;code&gt;ng-controller&lt;/code&gt;&lt;/a&gt; directive to the HTML. This directive tells AngularJS that the new &lt;code&gt;InvoiceController&lt;/code&gt; is responsible for the element with the directive and all of the element's children. The syntax &lt;code&gt;InvoiceController as invoice&lt;/code&gt; tells AngularJS to instantiate the controller and save it in the variable &lt;code&gt;invoice&lt;/code&gt; in the current scope.</source>
          <target state="translated">除了包含控制器代码的新文件之外，我们还向HTML 添加了&lt;a href=&quot;../api/ng/directive/ngcontroller&quot;&gt; &lt;code&gt;ng-controller&lt;/code&gt; &lt;/a&gt;指令。该指令告诉AngularJS，新的 &lt;code&gt;InvoiceController&lt;/code&gt; 负责使用该指令的元素以及该元素的所有子元素。 &lt;code&gt;InvoiceController as invoice&lt;/code&gt; 的语法告诉AngularJS实例化控制器并将其保存在当前作用域的变量 &lt;code&gt;invoice&lt;/code&gt; 中。</target>
        </trans-unit>
        <trans-unit id="5dce4dc5831fd9122f1e8fb1725d04397f36283e" translate="yes" xml:space="preserve">
          <source>Besides these few cases, you should use &lt;a href=&quot;../../../guide/component&quot;&gt;Components&lt;/a&gt; or &lt;a href=&quot;../../../guide/controller&quot;&gt;Controllers&lt;/a&gt; rather than &lt;code&gt;ngInit&lt;/code&gt; to initialize values on a scope.</source>
          <target state="translated">除了这几种情况，您应该使用&lt;a href=&quot;../../../guide/component&quot;&gt;Components&lt;/a&gt;或&lt;a href=&quot;../../../guide/controller&quot;&gt;Controllers&lt;/a&gt;而不是 &lt;code&gt;ngInit&lt;/code&gt; 来初始化作用域上的值。</target>
        </trans-unit>
        <trans-unit id="bd3e4ab482cc2518af6697be2e20841e8a579b32" translate="yes" xml:space="preserve">
          <source>Beware that using &lt;code&gt;angular.module('myModule', [])&lt;/code&gt; will create the module &lt;code&gt;myModule&lt;/code&gt; and overwrite any existing module named &lt;code&gt;myModule&lt;/code&gt;. Use &lt;code&gt;angular.module('myModule')&lt;/code&gt; to retrieve an existing module.</source>
          <target state="translated">请注意，使用 &lt;code&gt;angular.module('myModule', [])&lt;/code&gt; 将创建模块 &lt;code&gt;myModule&lt;/code&gt; 并覆盖任何名为 &lt;code&gt;myModule&lt;/code&gt; 的现有模块。使用 &lt;code&gt;angular.module('myModule')&lt;/code&gt; 检索现有模块。</target>
        </trans-unit>
        <trans-unit id="8807c9bb60191c14db0f1b18c1ea78b4f82dbc02" translate="yes" xml:space="preserve">
          <source>Bind to built-in DOM events</source>
          <target state="translated">绑定到内置的DOM事件</target>
        </trans-unit>
        <trans-unit id="657d28f8e1850fbaf57c9e8970ad485efff54816" translate="yes" xml:space="preserve">
          <source>Bind to custom DOM events</source>
          <target state="translated">绑定到自定义DOM事件</target>
        </trans-unit>
        <trans-unit id="d5b9dbf27d5fc4d4a4c313e066f87df8c57477db" translate="yes" xml:space="preserve">
          <source>Binding expressions to arbitrary properties poses a security risk, as properties like &lt;code&gt;innerHTML&lt;/code&gt; can insert potentially dangerous HTML into the application, e.g. script tags that execute malicious code. For this reason, &lt;code&gt;ngProp&lt;/code&gt; applies Strict Contextual Escaping with the &lt;a href=&quot;../service/%24sce&quot;&gt;$sce service&lt;/a&gt;. This means vulnerable properties require their content to be &quot;trusted&quot;, based on the context of the property. For example, the &lt;code&gt;innerHTML&lt;/code&gt; is in the &lt;code&gt;HTML&lt;/code&gt; context, and the &lt;code&gt;iframe.src&lt;/code&gt; property is in the &lt;code&gt;RESOURCE_URL&lt;/code&gt; context, which requires that values written to this property are trusted as a &lt;code&gt;RESOURCE_URL&lt;/code&gt;.</source>
          <target state="translated">将表达式绑定到任意属性会带来安全风险，因为诸如 &lt;code&gt;innerHTML&lt;/code&gt; 之类的属性可能会将潜在危险的HTML插入应用程序中，例如，执行恶意代码的脚本标签。因此， &lt;code&gt;ngProp&lt;/code&gt; 通过&lt;a href=&quot;../service/%24sce&quot;&gt;$ sce服务&lt;/a&gt;应用严格的上下文转义。这意味着，基于属性的上下文，易受攻击的属性要求其内容&amp;ldquo;受信任&amp;rdquo;。例如， &lt;code&gt;innerHTML&lt;/code&gt; 在 &lt;code&gt;HTML&lt;/code&gt; 上下文中，而 &lt;code&gt;iframe.src&lt;/code&gt; 属性在 &lt;code&gt;RESOURCE_URL&lt;/code&gt; 上下文中，这要求写入此属性的值作为 &lt;code&gt;RESOURCE_URL&lt;/code&gt; 被信任。</target>
        </trans-unit>
        <trans-unit id="3c95abad5a4fb01b2daa804b21d3bcaa9976b850" translate="yes" xml:space="preserve">
          <source>Binding select to a non-string value via ngModel parsing / formatting</source>
          <target state="translated">通过ngModel解析/格式化将选择绑定到一个非字符串的值。</target>
        </trans-unit>
        <trans-unit id="87c4c92c7cc5c40f37665ead791df5e9d4951a3e" translate="yes" xml:space="preserve">
          <source>Binding the view into the model, which other directives such as &lt;code&gt;input&lt;/code&gt;, &lt;code&gt;textarea&lt;/code&gt; or &lt;code&gt;select&lt;/code&gt; require.</source>
          <target state="translated">将视图绑定到模型中，这是其他指令（例如 &lt;code&gt;input&lt;/code&gt; ， &lt;code&gt;textarea&lt;/code&gt; 或 &lt;code&gt;select&lt;/code&gt; )所需要的。</target>
        </trans-unit>
        <trans-unit id="bb8d1dbec2383b2ace68d315a5505325a07603fe" translate="yes" xml:space="preserve">
          <source>Binding to a getter/setter</source>
          <target state="translated">绑定到getter/setter</target>
        </trans-unit>
        <trans-unit id="25ace093925e2814896e0582fd4ff55182dce1a7" translate="yes" xml:space="preserve">
          <source>Binding to boolean attributes</source>
          <target state="translated">绑定到布尔属性</target>
        </trans-unit>
        <trans-unit id="8bce3a109839f438e000945b18acdd32b0210c8c" translate="yes" xml:space="preserve">
          <source>Binding to camelCase properties</source>
          <target state="translated">绑定camelCase属性</target>
        </trans-unit>
        <trans-unit id="99b5983ad3dd8a0fefc84a6eff022b8d33c135fe" translate="yes" xml:space="preserve">
          <source>Binding to different contexts</source>
          <target state="translated">绑定到不同的环境中</target>
        </trans-unit>
        <trans-unit id="d0561b07cc318a1f09fc9de10ee57ff0d9c80f3a" translate="yes" xml:space="preserve">
          <source>Binding to form and control state</source>
          <target state="translated">对形式和控制状态的约束</target>
        </trans-unit>
        <trans-unit id="ebd58a4a7b83d78b2f35d5de1c469945d20cbdfa" translate="yes" xml:space="preserve">
          <source>Binding to innerHTML with ngSanitize</source>
          <target state="translated">用ngSanitize绑定到innerHTML。</target>
        </trans-unit>
        <trans-unit id="b6fc4d77d0ae47604bdf44f931ee45b700a34949" translate="yes" xml:space="preserve">
          <source>Binds the given expression to the value of the element.</source>
          <target state="translated">将给定的表达式与元素的值绑定。</target>
        </trans-unit>
        <trans-unit id="0b9d2b2362bc33581ba11fddcb0cf0590ebd3a7a" translate="yes" xml:space="preserve">
          <source>Blog</source>
          <target state="translated">Blog</target>
        </trans-unit>
        <trans-unit id="4a7fdd8c17425252332ea0e89a35722b72d83135" translate="yes" xml:space="preserve">
          <source>Books</source>
          <target state="translated">Books</target>
        </trans-unit>
        <trans-unit id="89ec4ec2bf400e823f3ca49d0cb938b0fedd7bab" translate="yes" xml:space="preserve">
          <source>Bootstrap</source>
          <target state="translated">Bootstrap</target>
        </trans-unit>
        <trans-unit id="443f17a7b86f51793bfee7a9b599be7411962f49" translate="yes" xml:space="preserve">
          <source>Both approaches described above require you to prepare different &lt;code&gt;index.html&lt;/code&gt; pages or JavaScript files for each locale that your app may use. You also need to configure your server to serve the correct file that corresponds to the desired locale.</source>
          <target state="translated">上述两种方法都要求您为应用程序可能使用的每种语言环境准备不同的 &lt;code&gt;index.html&lt;/code&gt; 页面或JavaScript文件。您还需要配置服务器以提供与所需语言环境相对应的正确文件。</target>
        </trans-unit>
        <trans-unit id="6ca64c991bfb8f51ff1d5093045e9b7f736452f5" translate="yes" xml:space="preserve">
          <source>Both controllers and directives have reference to the scope, but not to each other. This arrangement isolates the controller from the directive as well as from the DOM. This is an important point since it makes the controllers view agnostic, which greatly improves the testing story of the applications.</source>
          <target state="translated">控制器和指令都有对作用域的引用,但不是相互引用。这种安排将控制器与指令以及DOM隔离开来。这是一个重要的点,因为它使控制器的视图不可知,这大大改善了应用程序的测试故事。</target>
        </trans-unit>
        <trans-unit id="40dcb3b95121f56d8a5d3c7eb1620ecb8cb8dc8b" translate="yes" xml:space="preserve">
          <source>Both methods return the &lt;code&gt;requestHandler&lt;/code&gt; object for possible overrides.</source>
          <target state="translated">这两个方法都返回 &lt;code&gt;requestHandler&lt;/code&gt; 对象以进行可能的覆盖。</target>
        </trans-unit>
        <trans-unit id="d46a182956cbe1896d122a91a94ab7a7d4100cc8" translate="yes" xml:space="preserve">
          <source>Both objects or values are of the same type and all of their properties are equal by comparing them with &lt;code&gt;angular.equals&lt;/code&gt;.</source>
          <target state="translated">通过将它们与 &lt;code&gt;angular.equals&lt;/code&gt; 相比较，这两个对象或值都属于同一类型，并且它们的所有属性都相等。</target>
        </trans-unit>
        <trans-unit id="3e5005cfde41f6cbdc44666fa883267220053196" translate="yes" xml:space="preserve">
          <source>Both objects or values pass &lt;code&gt;===&lt;/code&gt; comparison.</source>
          <target state="translated">对象或值都通过 &lt;code&gt;===&lt;/code&gt; 比较。</target>
        </trans-unit>
        <trans-unit id="a125206df8681fa85102404723fa7cd9d26dd16c" translate="yes" xml:space="preserve">
          <source>Both requests and responses can be transformed using transformation functions: &lt;code&gt;transformRequest&lt;/code&gt; and &lt;code&gt;transformResponse&lt;/code&gt;. These properties can be a single function that returns the transformed value (&lt;code&gt;function(data, headersGetter, status)&lt;/code&gt;) or an array of such transformation functions, which allows you to &lt;code&gt;push&lt;/code&gt; or &lt;code&gt;unshift&lt;/code&gt; a new transformation function into the transformation chain.</source>
          <target state="translated">请求和响应都可以使用以下转换函数进行转换： &lt;code&gt;transformRequest&lt;/code&gt; 和 &lt;code&gt;transformResponse&lt;/code&gt; 。这些属性可以是返回转换后的值的单个函数（ &lt;code&gt;function(data, headersGetter, status)&lt;/code&gt; ），也可以是此类转换函数的数组，允许您 &lt;code&gt;push&lt;/code&gt; 新的转换函数推入或 &lt;code&gt;unshift&lt;/code&gt; 转换链。</target>
        </trans-unit>
        <trans-unit id="75b4106a74d08ca7beaa672015bdedf0fbb0610c" translate="yes" xml:space="preserve">
          <source>Both server and the client must cooperate in order to eliminate these threats. AngularJS comes pre-configured with strategies that address these issues, but for this to work backend server cooperation is required.</source>
          <target state="translated">为了消除这些威胁,服务器和客户端都必须合作。AngularJS 预先配置了解决这些问题的策略,但要做到这一点,需要后端服务器的合作。</target>
        </trans-unit>
        <trans-unit id="d7a06053351dcacb0958c1d7874174fafa3e176f" translate="yes" xml:space="preserve">
          <source>Both services use the array notation to declare their dependencies.</source>
          <target state="translated">两个服务都使用数组符号来声明它们的依赖关系。</target>
        </trans-unit>
        <trans-unit id="453b6ec0bdcf074f42019bd759bd4f46fe479c1d" translate="yes" xml:space="preserve">
          <source>Both values are NaN. (In JavaScript, NaN == NaN =&amp;gt; false. But we consider two NaN as equal)</source>
          <target state="translated">两个值均为NaN。（在JavaScript中，NaN == NaN =&amp;gt; false。但是我们认为两个NaN相等）</target>
        </trans-unit>
        <trans-unit id="8238aa1fee0718d12fd25bfcbae5d91e5efcde6e" translate="yes" xml:space="preserve">
          <source>Both values represent the same regular expression (In JavaScript, /abc/ == /abc/ =&amp;gt; false. But we consider two regular expressions as equal when their textual representation matches).</source>
          <target state="translated">这两个值表示相同的正则表达式（在JavaScript中，/ abc / == / abc / =&amp;gt; false。但是当它们的文本表示形式匹配时，我们认为两个正则表达式相等）。</target>
        </trans-unit>
        <trans-unit id="236ab44b7fba5a5f64f75f18c707a81aa8471a1c" translate="yes" xml:space="preserve">
          <source>BreezeJS</source>
          <target state="translated">BreezeJS</target>
        </trans-unit>
        <trans-unit id="a0cdfd5795b7e2c68f3f565bde94c8cda195a6da" translate="yes" xml:space="preserve">
          <source>Broadcasted after a URL was changed.</source>
          <target state="translated">在URL被更改后播报。</target>
        </trans-unit>
        <trans-unit id="5717f71e7e0404413a5bac0d197a4f54f36c5557" translate="yes" xml:space="preserve">
          <source>Broadcasted after a route change has happened successfully. The &lt;code&gt;resolve&lt;/code&gt; dependencies are now available in the &lt;code&gt;current.locals&lt;/code&gt; property.</source>
          <target state="translated">路由更改成功发生后广播。该 &lt;code&gt;resolve&lt;/code&gt; 依赖关系现在处于可用 &lt;code&gt;current.locals&lt;/code&gt; 财产。</target>
        </trans-unit>
        <trans-unit id="db63277f54c549ffb9ccc9b41975c00069d4fd0b" translate="yes" xml:space="preserve">
          <source>Broadcasted before a URL will change.</source>
          <target state="translated">广播之前的URL会改变。</target>
        </trans-unit>
        <trans-unit id="a528b7c196e8ddc0cb9c7f059079eae85e556a77" translate="yes" xml:space="preserve">
          <source>Broadcasted before a route change. At this point the route services starts resolving all of the dependencies needed for the route change to occur. Typically this involves fetching the view template as well as any dependencies defined in &lt;code&gt;resolve&lt;/code&gt; route property. Once all of the dependencies are resolved &lt;code&gt;$routeChangeSuccess&lt;/code&gt; is fired.</source>
          <target state="translated">在更改路线之前广播。此时，路由服务开始解决发生路由更改所需的所有依赖关系。通常，这涉及获取视图模板以及在 &lt;code&gt;resolve&lt;/code&gt; route属性中定义的所有依赖项。解决所有依赖关系后，将触发 &lt;code&gt;$routeChangeSuccess&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="0e142877d6ef7e5d1e6c077814dcc5637d27b1f7" translate="yes" xml:space="preserve">
          <source>Broadcasted if a redirection function fails or any redirection or resolve promises are rejected.</source>
          <target state="translated">如果重定向功能失败或任何重定向或解析承诺被拒绝,则进行广播。</target>
        </trans-unit>
        <trans-unit id="5cfcce92d36aeb1c520e9b5db15f22bee58c5791" translate="yes" xml:space="preserve">
          <source>Broadcasted if the same instance of a route (including template, controller instance, resolved dependencies, etc.) is being reused. This can happen if either &lt;code&gt;reloadOnSearch&lt;/code&gt; or &lt;code&gt;reloadOnUrl&lt;/code&gt; has been set to &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">如果路由的同一实例（包括模板，控制器实例，已解决的依存关系等）被重用，则进行广播。如果将 &lt;code&gt;reloadOnSearch&lt;/code&gt; 或 &lt;code&gt;reloadOnUrl&lt;/code&gt; 设置为 &lt;code&gt;false&lt;/code&gt; ,则会发生这种情况。</target>
        </trans-unit>
        <trans-unit id="5a8322d960d47320dc5989c276e6b8166c048003" translate="yes" xml:space="preserve">
          <source>Broadcasted when a scope and its children are being destroyed.</source>
          <target state="translated">当一个范围和它的孩子被摧毁时,广播。</target>
        </trans-unit>
        <trans-unit id="7d70e82b9c499004d1850cf08803f0ce4e7e5cfd" translate="yes" xml:space="preserve">
          <source>Browser in HTML5 Fallback mode (Hashbang mode)</source>
          <target state="translated">浏览器处于HTML5回退模式(Hashbang模式)。</target>
        </trans-unit>
        <trans-unit id="ecc6c180b9874f1a6748cfecac7f942eda9570d6" translate="yes" xml:space="preserve">
          <source>Browser in HTML5 mode</source>
          <target state="translated">浏览器在HTML5模式下</target>
        </trans-unit>
        <trans-unit id="e37c900dcb84282abb18dc7216453ee2a12ba08a" translate="yes" xml:space="preserve">
          <source>Browsers that support range (latest Chrome, Safari, Firefox, Edge) treat &lt;code&gt;input[range]&lt;/code&gt; in a way that never allows the input to hold an invalid value. That means:</source>
          <target state="translated">Browsers that support range (latest Chrome, Safari, Firefox, Edge) treat &lt;code&gt;input[range]&lt;/code&gt; in a way that never allows the input to hold an invalid value. That means:</target>
        </trans-unit>
        <trans-unit id="e83b0bc612367cc74978d533e0e30cf24b965e7c" translate="yes" xml:space="preserve">
          <source>Built-in validation tokens:</source>
          <target state="translated">内置验证令牌。</target>
        </trans-unit>
        <trans-unit id="02e264495bc8c8e6e9753884128090bbb591476a" translate="yes" xml:space="preserve">
          <source>But &lt;a href=&quot;../api/ng/directive/ngrepeat&quot;&gt;ngRepeat&lt;/a&gt; has a dilemma.</source>
          <target state="translated">但是&lt;a href=&quot;../api/ng/directive/ngrepeat&quot;&gt;ngRepeat&lt;/a&gt;有一个难题。</target>
        </trans-unit>
        <trans-unit id="59c3592d94e357cca81ab82eb84d5087a88626ed" translate="yes" xml:space="preserve">
          <source>But given that the token is just a string literal, sticking with the Value recipe is still more appropriate as it makes the code easier to follow.</source>
          <target state="translated">但考虑到token只是一个字符串文字,坚持使用Value配方还是比较合适的,因为它让代码更容易遵循。</target>
        </trans-unit>
        <trans-unit id="fce344d9abbbab9562c13cd7f34c0b9da8dd4d9c" translate="yes" xml:space="preserve">
          <source>But unlike &lt;a href=&quot;%24provide#value.html&quot;&gt;value&lt;/a&gt;, a constant can be injected into a module configuration function (see &lt;a href=&quot;../../ng/type/angular.module#config.html&quot;&gt;&lt;code&gt;angular.Module&lt;/code&gt;&lt;/a&gt;) and it cannot be overridden by an AngularJS &lt;a href=&quot;%24provide#decorator.html&quot;&gt;decorator&lt;/a&gt;.</source>
          <target state="translated">但是与&lt;a href=&quot;%24provide#value.html&quot;&gt;值&lt;/a&gt;不同的是，常量可以注入模块配置函数中（参见&lt;a href=&quot;../../ng/type/angular.module#config.html&quot;&gt; &lt;code&gt;angular.Module&lt;/code&gt; &lt;/a&gt;），不能被AngularJS &lt;a href=&quot;%24provide#decorator.html&quot;&gt;装饰器&lt;/a&gt;覆盖。</target>
        </trans-unit>
        <trans-unit id="405847fd05efd79761c86b02e94559369547dbc6" translate="yes" xml:space="preserve">
          <source>By adding an &lt;code&gt;$inject&lt;/code&gt; property onto a function the injection parameters can be specified.</source>
          <target state="translated">通过将 &lt;code&gt;$inject&lt;/code&gt; 属性添加到函数中，可以指定注入参数。</target>
        </trans-unit>
        <trans-unit id="2fa2da9f3a76efbcb9284be63afad1a9da922618" translate="yes" xml:space="preserve">
          <source>By default $animate doesn't trigger any animations. This is because the &lt;code&gt;ngAnimate&lt;/code&gt; module isn't included and only when it is active then the animation hooks that &lt;code&gt;$animate&lt;/code&gt; triggers will be functional. Once active then all structural &lt;code&gt;ng-&lt;/code&gt; directives will trigger animations as they perform their DOM-related operations (enter, leave and move). Other directives such as &lt;code&gt;ngClass&lt;/code&gt;, &lt;code&gt;ngShow&lt;/code&gt;, &lt;code&gt;ngHide&lt;/code&gt; and &lt;code&gt;ngMessages&lt;/code&gt; also provide support for animations.</source>
          <target state="translated">默认情况下，$ animate不会触发任何动画。这是因为不包含 &lt;code&gt;ngAnimate&lt;/code&gt; 模块，只有当该模块处于活动状态时， &lt;code&gt;$animate&lt;/code&gt; 才会挂钩$ animate触发器将起作用。一旦激活，所有结构 &lt;code&gt;ng-&lt;/code&gt; 指令将在执行与DOM相关的操作（进入，离开和移动）时触发动画。其他指令（例如 &lt;code&gt;ngClass&lt;/code&gt; ， &lt;code&gt;ngShow&lt;/code&gt; ， &lt;code&gt;ngHide&lt;/code&gt; 和 &lt;code&gt;ngMessages&lt;/code&gt; )也提供动画支持。</target>
        </trans-unit>
        <trans-unit id="6a63f23b39aeafeeeef2f721b04b4097b6810a86" translate="yes" xml:space="preserve">
          <source>By default AngularJS attaches information about binding and scopes to DOM nodes, and adds CSS classes to data-bound elements:</source>
          <target state="translated">默认情况下,AngularJS会将绑定和作用域的信息附加到DOM节点上,并为数据绑定的元素添加CSS类。</target>
        </trans-unit>
        <trans-unit id="370ccd1eb19dc0d611cfd9491b8afea309b7a0df" translate="yes" xml:space="preserve">
          <source>By default AngularJS compiles and executes all directives inside comments and element classes. In order to perform this task, the AngularJS compiler must look for directives by:</source>
          <target state="translated">默认情况下,AngularJS会编译并执行注释和元素类内的所有指令。为了执行这项任务,AngularJS编译器必须通过以下方式查找指令。</target>
        </trans-unit>
        <trans-unit id="1e2842d70be7f65d0a8c45bdabb3581c644cabee" translate="yes" xml:space="preserve">
          <source>By default you don't need to override anything in CSS and the animations will work around the display style.</source>
          <target state="translated">默认情况下,你不需要在CSS中覆盖任何东西,动画将围绕显示风格工作。</target>
        </trans-unit>
        <trans-unit id="cfc9fd29727c805e8bcd27c2fd78719670ad599e" translate="yes" xml:space="preserve">
          <source>By default you don't need to override in CSS anything and the animations will work around the display style.</source>
          <target state="translated">默认情况下,你不需要在CSS中覆盖任何东西,动画将围绕显示风格工作。</target>
        </trans-unit>
        <trans-unit id="8e2db882ad5f7a39f81879fd1d5e758ebc4f4597" translate="yes" xml:space="preserve">
          <source>By default, &lt;a href=&quot;../service/%24anchorscroll&quot;&gt;$anchorScroll()&lt;/a&gt; will automatically detect changes to &lt;a href=&quot;../service/%24location#hash.html&quot;&gt;$location.hash()&lt;/a&gt; and scroll to the element matching the new hash.</source>
          <target state="translated">默认情况下，&lt;a href=&quot;../service/%24anchorscroll&quot;&gt;$ anchorScroll（）&lt;/a&gt;将自动检测对&lt;a href=&quot;../service/%24location#hash.html&quot;&gt;$ location.hash（）的&lt;/a&gt;更改，并滚动到与新哈希匹配的元素。</target>
        </trans-unit>
        <trans-unit id="eb7793000636bd074d047602162058c73e34ad5e" translate="yes" xml:space="preserve">
          <source>By default, &lt;code&gt;$sce&lt;/code&gt; will throw an error if it detects untrusted HTML content, and will not bind the content. However, if you include the &lt;a href=&quot;../../ngsanitize&quot;&gt;ngSanitize module&lt;/a&gt;, it will try to sanitize the potentially dangerous HTML, e.g. strip non-trusted tags and attributes when binding to &lt;code&gt;innerHTML&lt;/code&gt;.</source>
          <target state="translated">By default, &lt;code&gt;$sce&lt;/code&gt; will throw an error if it detects untrusted HTML content, and will not bind the content. However, if you include the &lt;a href=&quot;../../ngsanitize&quot;&gt;ngSanitize module&lt;/a&gt;, it will try to sanitize the potentially dangerous HTML, e.g. strip non-trusted tags and attributes when binding to &lt;code&gt;innerHTML&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="c70a53728f1b21d2741de003d4f7d107644ad595" translate="yes" xml:space="preserve">
          <source>By default, &lt;code&gt;$sce&lt;/code&gt; will throw an error if it detects untrusted HTML content, and will not bind the content. However, if you include the &lt;a href=&quot;../../ngsanitize&quot;&gt;ngSanitize module&lt;/a&gt;, it will try to sanitize the potentially dangerous HTML, e.g. strip non-whitelisted tags and attributes when binding to &lt;code&gt;innerHTML&lt;/code&gt;.</source>
          <target state="translated">默认情况下，如果 &lt;code&gt;$sce&lt;/code&gt; 检测到不受信任的HTML内容，将抛出错误，并且不会绑定该内容。但是，如果包含&lt;a href=&quot;../../ngsanitize&quot;&gt;ngSanitize模块&lt;/a&gt;，它将尝试清除潜在危险的HTML，例如，在绑定到 &lt;code&gt;innerHTML&lt;/code&gt; 时删除未列入白名单的标签和属性。</target>
        </trans-unit>
        <trans-unit id="79c69d18163b4e263908e7612db7c38c1f192b89" translate="yes" xml:space="preserve">
          <source>By default, &lt;code&gt;ngMessages&lt;/code&gt; will only display one message for a particular key/value collection at any time. If more than one message (or error) key is currently true, then which message is shown is determined by the order of messages in the HTML template code (messages declared first are prioritised). This mechanism means the developer does not have to prioritize messages using custom JavaScript code.</source>
          <target state="translated">默认情况下， &lt;code&gt;ngMessages&lt;/code&gt; 在任何时候都只会显示一条消息，用于特定的键/值集合。如果当前有多个消息（或错误）键为真，则显示的消息由HTML模板代码中的消息顺序确定（优先声明的消息优先）。这种机制意味着开发人员不必使用自定义JavaScript代码优先处理消息。</target>
        </trans-unit>
        <trans-unit id="24c1da0bbb6770f2b962ebbc35b060bf09623b8f" translate="yes" xml:space="preserve">
          <source>By default, &lt;code&gt;ngModel&lt;/code&gt; watches the model by reference, not value. This is important to know when binding inputs to models that are objects (e.g. &lt;code&gt;Date&lt;/code&gt;) or collections (e.g. arrays). If only properties of the object or collection change, &lt;code&gt;ngModel&lt;/code&gt; will not be notified and so the input will not be re-rendered.</source>
          <target state="translated">默认情况下， &lt;code&gt;ngModel&lt;/code&gt; 通过引用而非值监视模型。了解何时将输入绑定到对象（例如 &lt;code&gt;Date&lt;/code&gt; ）或集合（例如数组）的模型，这一点很重要。如果仅对象或集合的属性发生更改，则不会通知 &lt;code&gt;ngModel&lt;/code&gt; ，因此不会重新呈现输入。</target>
        </trans-unit>
        <trans-unit id="7190d37e5aa54069ede2834cb78f273c5c43c428" translate="yes" xml:space="preserve">
          <source>By default, &lt;code&gt;ngModel&lt;/code&gt; watches the model by reference, not value. This is important to know when binding the select to a model that is an object or a collection.</source>
          <target state="translated">默认情况下， &lt;code&gt;ngModel&lt;/code&gt; 通过引用而非值监视模型。了解将选择绑定到作为对象或集合的模型时，这一点很重要。</target>
        </trans-unit>
        <trans-unit id="6903112b079eaf8ffdf3aec857a1afc48c94199d" translate="yes" xml:space="preserve">
          <source>By default, AngularJS only loads templates from the same domain and protocol as the application document. This is done by calling &lt;a href=&quot;%24sce#getTrustedResourceUrl.html&quot;&gt;$sce.getTrustedResourceUrl&lt;/a&gt; on the template URL. To load templates from other domains and/or protocols, you may either &lt;a href=&quot;../provider/%24scedelegateprovider#resourceUrlWhitelist.html&quot;&gt;whitelist them&lt;/a&gt; or &lt;a href=&quot;%24sce#trustAsResourceUrl.html&quot;&gt;wrap it&lt;/a&gt; into a trusted value.</source>
          <target state="translated">默认情况下，AngularJS仅从与应用程序文档相同的域和协议中加载模板。这是通过在模板URL上调用&lt;a href=&quot;%24sce#getTrustedResourceUrl.html&quot;&gt;$ sce.getTrustedResourceUrl&lt;/a&gt;来完成的。要从其他域和/或协议中加载模板，您可以将其&lt;a href=&quot;../provider/%24scedelegateprovider#resourceUrlWhitelist.html&quot;&gt;列入白名单&lt;/a&gt;或&lt;a href=&quot;%24sce#trustAsResourceUrl.html&quot;&gt;将其包装&lt;/a&gt;为可信值。</target>
        </trans-unit>
        <trans-unit id="6f1df63e0012ca7f538b0d74fdaec979f00c64c9" translate="yes" xml:space="preserve">
          <source>By default, AngularJS only loads templates from the same domain and protocol as the application document. This is done by calling &lt;a href=&quot;%24sce#getTrustedResourceUrl.html&quot;&gt;$sce.getTrustedResourceUrl&lt;/a&gt; on the template URL. To load templates from other domains and/or protocols, you may either add them to the &lt;a href=&quot;../provider/%24scedelegateprovider#trustedResourceUrlList.html&quot;&gt;trustedResourceUrlList&lt;/a&gt; or &lt;a href=&quot;%24sce#trustAsResourceUrl.html&quot;&gt;wrap them&lt;/a&gt; into trusted values.</source>
          <target state="translated">By default, AngularJS only loads templates from the same domain and protocol as the application document. This is done by calling &lt;a href=&quot;%24sce#getTrustedResourceUrl.html&quot;&gt;$sce.getTrustedResourceUrl&lt;/a&gt; on the template URL. To load templates from other domains and/or protocols, you may either add them to the &lt;a href=&quot;../provider/%24scedelegateprovider#trustedResourceUrlList.html&quot;&gt;trustedResourceUrlList&lt;/a&gt; or &lt;a href=&quot;%24sce#trustAsResourceUrl.html&quot;&gt;wrap them&lt;/a&gt; into trusted values.</target>
        </trans-unit>
        <trans-unit id="1966d304ab081cea6a8b5d7d37a52d0b976b638f" translate="yes" xml:space="preserve">
          <source>By default, animations are disabled when the AngularJS app &lt;a href=&quot;bootstrap&quot;&gt;bootstraps&lt;/a&gt;. If you are using the &lt;a href=&quot;../api/ng/directive/ngapp&quot;&gt;&lt;code&gt;ngApp&lt;/code&gt;&lt;/a&gt; directive, this happens in the &lt;code&gt;DOMContentLoaded&lt;/code&gt; event, so immediately after the page has been loaded. Animations are disabled, so that UI and content are instantly visible. Otherwise, with many animations on the page, the loading process may become too visually overwhelming, and the performance may suffer.</source>
          <target state="translated">默认情况下，当AngularJS应用&lt;a href=&quot;bootstrap&quot;&gt;启动&lt;/a&gt;时，动画是禁用的。如果您使用的是&lt;a href=&quot;../api/ng/directive/ngapp&quot;&gt; &lt;code&gt;ngApp&lt;/code&gt; &lt;/a&gt;指令，则这会在 &lt;code&gt;DOMContentLoaded&lt;/code&gt; 事件中发生，因此在页面加载后立即发生。动画被禁用，因此UI和内容立即可见。否则，页面上会有许多动画，加载过程可能在视觉上变得不堪重负，并且性能可能会受到影响。</target>
        </trans-unit>
        <trans-unit id="df4843033cbd0e8a2de04acc71992eef26af1ccc" translate="yes" xml:space="preserve">
          <source>By default, any &lt;code&gt;ngAnimate&lt;/code&gt;-enabled directives will assume that &lt;code&gt;transition&lt;/code&gt; / &lt;code&gt;animation&lt;/code&gt; styles on the element are part of an &lt;code&gt;ngAnimate&lt;/code&gt; animation. This can lead to problems when the styles are actually for animations that are independent of &lt;code&gt;ngAnimate&lt;/code&gt;.</source>
          <target state="translated">默认情况下，任何启用 &lt;code&gt;ngAnimate&lt;/code&gt; 的指令都将假定元素上的 &lt;code&gt;transition&lt;/code&gt; / &lt;code&gt;animation&lt;/code&gt; 样式是 &lt;code&gt;ngAnimate&lt;/code&gt; 动画的一部分。当样式实际上是与 &lt;code&gt;ngAnimate&lt;/code&gt; 无关的动画时，这可能会导致问题。</target>
        </trans-unit>
        <trans-unit id="a89e6cd1f35ad33962ebab128b602ce984b62740" translate="yes" xml:space="preserve">
          <source>By default, any change to the content will trigger a model update and form validation. You can override this behavior using the &lt;a href=&quot;../api/ng/directive/ngmodeloptions&quot;&gt;ngModelOptions&lt;/a&gt; directive to bind only to specified list of events. I.e. &lt;code&gt;ng-model-options=&quot;{ updateOn: 'blur' }&quot;&lt;/code&gt; will update and validate only after the control loses focus. You can set several events using a space delimited list. I.e. &lt;code&gt;ng-model-options=&quot;{ updateOn: 'mousedown blur' }&quot;&lt;/code&gt;</source>
          <target state="translated">默认情况下，对内容的任何更改都会触发模型更新和表单验证。您可以使用&lt;a href=&quot;../api/ng/directive/ngmodeloptions&quot;&gt;ngModelOptions&lt;/a&gt;指令覆盖此行为，以仅绑定到指定的事件列表。即 &lt;code&gt;ng-model-options=&quot;{ updateOn: 'blur' }&quot;&lt;/code&gt; 仅在控件失去焦点之后才会更新和验证。您可以使用空格分隔的列表设置多个事件。即 &lt;code&gt;ng-model-options=&quot;{ updateOn: 'mousedown blur' }&quot;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="500f830c32748a1f53ff5f9a7775baaecd3aa39e" translate="yes" xml:space="preserve">
          <source>By default, ngMock will create an injector per test case to ensure your tests do not affect each other. However, if we want to use &lt;code&gt;beforeAll()&lt;/code&gt;, ngMock will have to create the injector before any test cases are run, and share that injector through all the cases for that &lt;code&gt;describe&lt;/code&gt;. That is where &lt;a href=&quot;../api/ngmock/function/angular.mock.module.sharedinjector&quot;&gt;module.sharedInjector()&lt;/a&gt; comes in. When it's called within a &lt;code&gt;describe&lt;/code&gt; block, a single injector is shared between all hooks and test cases run in that block.</source>
          <target state="translated">默认情况下，ngMock将为每个测试用例创建一个注入器，以确保您的测试不会相互影响。但是，如果我们要使用 &lt;code&gt;beforeAll()&lt;/code&gt; ，则ngMock将必须在运行任何测试用例之前创建注入器，并通过该 &lt;code&gt;describe&lt;/code&gt; 的所有用例共享该注入器。那就是&lt;a href=&quot;../api/ngmock/function/angular.mock.module.sharedinjector&quot;&gt;module.sharedInjector（）&lt;/a&gt;进入的地方。在 &lt;code&gt;describe&lt;/code&gt; 块中调用它时，所有挂钩之间都共享一个注入器，并且该块中运行的测试用例。</target>
        </trans-unit>
        <trans-unit id="85a705fceaf0b765e21238642283db4e9a9de198" translate="yes" xml:space="preserve">
          <source>By default, query parameters on request URLs are parsed into the &lt;code&gt;params&lt;/code&gt; object. So a request URL of &lt;code&gt;/list?q=searchstr&amp;amp;orderby=-name&lt;/code&gt; would set &lt;code&gt;params&lt;/code&gt; to be &lt;code&gt;{q: 'searchstr', orderby: '-name'}&lt;/code&gt;.</source>
          <target state="translated">默认情况下，请求URL上的查询参数被解析为 &lt;code&gt;params&lt;/code&gt; 对象。因此， &lt;code&gt;/list?q=searchstr&amp;amp;orderby=-name&lt;/code&gt; 的请求URL 会将 &lt;code&gt;params&lt;/code&gt; 设置为 &lt;code&gt;{q: 'searchstr', orderby: '-name'}&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="7198ac8768b77ff593616dc4b6e2aca0b18676a4" translate="yes" xml:space="preserve">
          <source>By default, the &quot;required&quot; error on the ngModelController is only set on a required select when the empty option is selected. This example adds a custom directive that also sets the error when the unknown option is selected.</source>
          <target state="translated">默认情况下,ngModelController上的 &quot;必填 &quot;错误只有在选择空选项时才会在必填选择时设置。这个例子增加了一个自定义指令,当选择未知选项时也会设置错误。</target>
        </trans-unit>
        <trans-unit id="e221e45c15e66ddc82e3f4a4feda670a95e982cd" translate="yes" xml:space="preserve">
          <source>By default, the &lt;a href=&quot;../type/%24rootscope.scope#%24watch.html&quot;&gt;&lt;code&gt;$watch&lt;/code&gt;&lt;/a&gt; method is used for tracking changes, and the equality check is based on object identity. However, if an object literal or an array literal is passed as the binding expression, the equality check is done by value (using the &lt;a href=&quot;../function/angular.equals&quot;&gt;&lt;code&gt;angular.equals&lt;/code&gt;&lt;/a&gt; function). It's also possible to watch the evaluated value shallowly with &lt;a href=&quot;../type/%24rootscope.scope#%24watchCollection.html&quot;&gt;&lt;code&gt;$watchCollection&lt;/code&gt;&lt;/a&gt;: use &lt;code&gt;=*&lt;/code&gt; or &lt;code&gt;=*attr&lt;/code&gt;</source>
          <target state="translated">默认情况下，&lt;a href=&quot;../type/%24rootscope.scope#%24watch.html&quot;&gt; &lt;code&gt;$watch&lt;/code&gt; &lt;/a&gt;方法用于跟踪更改，并且相等性检查基于对象标识。但是，如果将对象文字或数组文字作为绑定表达式传递，则相等检查将通过值（使用&lt;a href=&quot;../function/angular.equals&quot;&gt; &lt;code&gt;angular.equals&lt;/code&gt; &lt;/a&gt;函数）完成。也可以使用&lt;a href=&quot;../type/%24rootscope.scope#%24watchCollection.html&quot;&gt; &lt;code&gt;$watchCollection&lt;/code&gt; &lt;/a&gt;浅看一下评估值：use &lt;code&gt;=*&lt;/code&gt; 或 &lt;code&gt;=*attr&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="0973385c3a816fcb28f0098577f72a074edba112" translate="yes" xml:space="preserve">
          <source>By default, the &lt;a href=&quot;../type/%24rootscope.scope#%24watch.html&quot;&gt;&lt;code&gt;$watch&lt;/code&gt;&lt;/a&gt; method is used for tracking changes, and the equality check is based on object identity. It's also possible to watch the evaluated value shallowly with &lt;a href=&quot;../type/%24rootscope.scope#%24watchCollection.html&quot;&gt;&lt;code&gt;$watchCollection&lt;/code&gt;&lt;/a&gt;: use &lt;code&gt;&amp;lt;*&lt;/code&gt; or &lt;code&gt;&amp;lt;*attr&lt;/code&gt;</source>
          <target state="translated">默认情况下，&lt;a href=&quot;../type/%24rootscope.scope#%24watch.html&quot;&gt; &lt;code&gt;$watch&lt;/code&gt; &lt;/a&gt;方法用于跟踪更改，并且相等性检查基于对象标识。也可以使用&lt;a href=&quot;../type/%24rootscope.scope#%24watchCollection.html&quot;&gt; &lt;code&gt;$watchCollection&lt;/code&gt; &lt;/a&gt;地查看评估值：使用 &lt;code&gt;&amp;lt;*&lt;/code&gt; 或 &lt;code&gt;&amp;lt;*attr&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="eb24723013a0e6e79cb996d2a10e6b4c5257acc0" translate="yes" xml:space="preserve">
          <source>By default, the &lt;code&gt;.ng-hide&lt;/code&gt; class will style the element with &lt;code&gt;display: none !important&lt;/code&gt;. If you wish to change the hide behavior with &lt;code&gt;ngShow&lt;/code&gt;/&lt;code&gt;ngHide&lt;/code&gt;, you can simply overwrite the styles for the &lt;code&gt;.ng-hide&lt;/code&gt; CSS class. Note that the selector that needs to be used is actually &lt;code&gt;.ng-hide:not(.ng-hide-animate)&lt;/code&gt; to cope with extra animation classes that can be added.</source>
          <target state="translated">默认情况下， &lt;code&gt;.ng-hide&lt;/code&gt; 类将使用 &lt;code&gt;display: none !important&lt;/code&gt; 设置元素的样式：none！important。如果要使用 &lt;code&gt;ngShow&lt;/code&gt; / &lt;code&gt;ngHide&lt;/code&gt; 更改隐藏行为，则可以简单地覆盖 &lt;code&gt;.ng-hide&lt;/code&gt; CSS类的样式。请注意，实际上需要使用的选择器是 &lt;code&gt;.ng-hide:not(.ng-hide-animate)&lt;/code&gt; 来应对可以添加的额外动画类。</target>
        </trans-unit>
        <trans-unit id="fce47139951721d70fff4365f4ba57737c92ef63" translate="yes" xml:space="preserve">
          <source>By default, the template URL is restricted to the same domain and protocol as the application document. This is done by calling &lt;a href=&quot;../service/%24sce#getTrustedResourceUrl.html&quot;&gt;$sce.getTrustedResourceUrl&lt;/a&gt; on it. To load templates from other domains or protocols you may either &lt;a href=&quot;../provider/%24scedelegateprovider#resourceUrlWhitelist.html&quot;&gt;whitelist them&lt;/a&gt; or &lt;a href=&quot;../service/%24sce#trustAsResourceUrl.html&quot;&gt;wrap them&lt;/a&gt; as trusted values. Refer to AngularJS's &lt;a href=&quot;../service/%24sce&quot;&gt;Strict Contextual Escaping&lt;/a&gt;.</source>
          <target state="translated">默认情况下，模板URL限于与应用程序文档相同的域和协议。这是通过在其上调用&lt;a href=&quot;../service/%24sce#getTrustedResourceUrl.html&quot;&gt;$ sce.getTrustedResourceUrl&lt;/a&gt;来完成的。要从其他域或协议中加载模板，您可以将其&lt;a href=&quot;../provider/%24scedelegateprovider#resourceUrlWhitelist.html&quot;&gt;列入白名单&lt;/a&gt;或&lt;a href=&quot;../service/%24sce#trustAsResourceUrl.html&quot;&gt;将其包装&lt;/a&gt;为可信值。请参阅AngularJS的&lt;a href=&quot;../service/%24sce&quot;&gt;严格上下文转义&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="e18e1c3fdfab2d20000435b337eb4b86046b1731" translate="yes" xml:space="preserve">
          <source>By default, the template URL is restricted to the same domain and protocol as the application document. This is done by calling &lt;a href=&quot;../service/%24sce#getTrustedResourceUrl.html&quot;&gt;$sce.getTrustedResourceUrl&lt;/a&gt; on it. To load templates from other domains or protocols you may either add them to your &lt;a href=&quot;../provider/%24scedelegateprovider#trustedResourceUrlList.html&quot;&gt;trusted resource URL list&lt;/a&gt; or &lt;a href=&quot;../service/%24sce#trustAsResourceUrl.html&quot;&gt;wrap them&lt;/a&gt; as trusted values. Refer to AngularJS's &lt;a href=&quot;../service/%24sce&quot;&gt;Strict Contextual Escaping&lt;/a&gt;.</source>
          <target state="translated">By default, the template URL is restricted to the same domain and protocol as the application document. This is done by calling &lt;a href=&quot;../service/%24sce#getTrustedResourceUrl.html&quot;&gt;$sce.getTrustedResourceUrl&lt;/a&gt; on it. To load templates from other domains or protocols you may either add them to your &lt;a href=&quot;../provider/%24scedelegateprovider#trustedResourceUrlList.html&quot;&gt;trusted resource URL list&lt;/a&gt; or &lt;a href=&quot;../service/%24sce#trustAsResourceUrl.html&quot;&gt;wrap them&lt;/a&gt; as trusted values. Refer to AngularJS's &lt;a href=&quot;../service/%24sce&quot;&gt;Strict Contextual Escaping&lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="32e44cbd14ed433730fe544c3bfd62ca5f7ab6e5" translate="yes" xml:space="preserve">
          <source>By default, trailing slashes will be stripped from the calculated URLs, which can pose problems with server backends that do not expect that behavior. This can be disabled by configuring the &lt;code&gt;$resourceProvider&lt;/code&gt; like this:</source>
          <target state="translated">默认情况下，将从计算得出的URL中删除尾部的斜杠，这可能会给服务器后端带来一些问题，这些后端无法预期这种行为。可以通过如下配置 &lt;code&gt;$resourceProvider&lt;/code&gt; 来禁用它：</target>
        </trans-unit>
        <trans-unit id="523150288e3d3cbcdab71e7b4b769b8742b51985" translate="yes" xml:space="preserve">
          <source>By enabling this setting without taking other precautions, you might expose your application to click-hijacking attacks. In these attacks, sanitized svg elements could be positioned outside of the containing element and be rendered over other elements on the page (e.g. a login link). Such behavior can then result in phishing incidents.</source>
          <target state="translated">启用此设置而不采取其他预防措施,您可能会使您的应用程序受到点击劫持攻击。在这些攻击中,经过消毒的 svg 元素可能会被定位在包含元素之外,并呈现在页面上的其他元素上(例如登录链接)。这种行为可能会导致钓鱼事件。</target>
        </trans-unit>
        <trans-unit id="aa28a200094d0f8e4952a2572b5bf5b51a4cfccf" translate="yes" xml:space="preserve">
          <source>By implementing these methods, your component can hook into its lifecycle.</source>
          <target state="translated">通过实现这些方法,你的组件可以挂入它的生命周期。</target>
        </trans-unit>
        <trans-unit id="29c9ccc283e35e9d7b41129880c9316c7594e9f5" translate="yes" xml:space="preserve">
          <source>By listening to this event, you can remove event listeners that might cause memory leaks. Listeners registered to scopes and elements are automatically cleaned up when they are destroyed, but if you registered a listener on a service, or registered a listener on a DOM node that isn't being deleted, you'll have to clean it up yourself or you risk introducing a memory leak.</source>
          <target state="translated">通过监听这个事件,你可以删除可能导致内存泄漏的事件监听器。注册在作用域和元素上的监听器在被销毁后会自动清理,但如果你在服务上注册了一个监听器,或者在没有被删除的DOM节点上注册了一个监听器,你就必须自己清理,否则就有可能引入内存泄漏。</target>
        </trans-unit>
        <trans-unit id="c171fe9b3aaa70bdfa6d6276dcd49d45e27676fa" translate="yes" xml:space="preserve">
          <source>By setting &lt;code&gt;transition: 0s&lt;/code&gt;, &lt;code&gt;ngAnimate&lt;/code&gt; will ignore the existing transition styles, and not try to animate them (Javascript animations will still execute, though). This can be used to prevent &lt;a href=&quot;animations#preventing-collisions-with-existing-animations-and-third-party-libraries.html&quot;&gt;issues with existing animations interfering with &lt;code&gt;ngAnimate&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">通过设置 &lt;code&gt;transition: 0s&lt;/code&gt; ， &lt;code&gt;ngAnimate&lt;/code&gt; 将忽略现有的过渡样式，而不尝试对其进行动画处理（尽管Javascript动画仍将执行）。这可以用来防止&lt;a href=&quot;animations#preventing-collisions-with-existing-animations-and-third-party-libraries.html&quot;&gt;现有动画干扰 &lt;code&gt;ngAnimate&lt;/code&gt; 的问题&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="763c7e134cede96adf42badc199f39b157262036" translate="yes" xml:space="preserve">
          <source>By setting the &lt;code&gt;getterSetter&lt;/code&gt; property to true you are telling ngModel that the &lt;code&gt;ngModel&lt;/code&gt; expression on the scope refers to a &quot;getter/setter&quot; function rather than the value itself.</source>
          <target state="translated">通过将 &lt;code&gt;getterSetter&lt;/code&gt; 属性设置为true，您将告诉ngModel 范围内的 &lt;code&gt;ngModel&lt;/code&gt; 表达式引用的是&amp;ldquo; getter / setter&amp;rdquo;函数，而不是值本身。</target>
        </trans-unit>
        <trans-unit id="d37d16187a12d14dca29958bee98c95dd2595b03" translate="yes" xml:space="preserve">
          <source>By using &lt;code&gt;!important&lt;/code&gt;, the show and hide behavior will work as expected despite any clash between CSS selector specificity (when &lt;code&gt;!important&lt;/code&gt; isn't used with any conflicting styles). If a developer chooses to override the styling to change how to hide an element then it is just a matter of using &lt;code&gt;!important&lt;/code&gt; in their own CSS code.</source>
          <target state="translated">通过使用 &lt;code&gt;!important&lt;/code&gt; ，尽管CSS选择器特异性之间存在任何冲突（当 &lt;code&gt;!important&lt;/code&gt; 不与任何冲突的样式一起使用时），显示和隐藏行为仍将按预期工作。如果开发人员选择覆盖样式以更改隐藏元素的方式，则只需在自己的CSS代码中使用 &lt;code&gt;!important&lt;/code&gt; 即可。</target>
        </trans-unit>
        <trans-unit id="ab7870cd0f2f0c17b236bdc86d6ea708504a5cb8" translate="yes" xml:space="preserve">
          <source>CSS + JS Animations Together</source>
          <target state="translated">CSS+JS动画一起用</target>
        </trans-unit>
        <trans-unit id="43bd3c1e45e7e9c523e66a4eeb74db09cdd9706e" translate="yes" xml:space="preserve">
          <source>CSS Anchoring relies on transitions and keyframes and the internal code is intelligent enough to figure out what CSS classes differ between the starting element and the destination element. These different CSS classes will be added/removed on the anchor element and a transition will be applied (the transition that is provided in the anchor class). Long story short, ngAnimate will figure out what classes to add and remove which will make the transition of the element as smooth and automatic as possible. Be sure to use simple CSS classes that do not rely on DOM nesting structure so that the anchor element appears the same as the starting element (since the cloned element is placed inside of root element which is likely close to the body element).</source>
          <target state="translated">CSS Anchoring依赖于过渡和关键帧,内部代码足够智能,可以找出起始元素和目标元素之间有哪些CSS类不同。这些不同的CSS类将被添加/删除在锚元素上,并应用一个过渡(锚类中提供的过渡)。长话短说,ngAnimate会想出要添加和删除哪些类,这将使元素的过渡尽可能的平滑和自动。一定要使用简单的CSS类,不依赖DOM嵌套结构,这样锚元素看起来就和起始元素一样了(因为克隆的元素放在根元素里面,而根元素很可能靠近主体元素)。</target>
        </trans-unit>
        <trans-unit id="0f55d5c092d0ff662c046991d7571e5ba312c6ba" translate="yes" xml:space="preserve">
          <source>CSS Class-based Animations</source>
          <target state="translated">基于CSS类的动画</target>
        </trans-unit>
        <trans-unit id="bbe967875f19b43ebcf8ae9cc8592cc142b0fc64" translate="yes" xml:space="preserve">
          <source>CSS Staggering Animations</source>
          <target state="translated">CSS交错动画</target>
        </trans-unit>
        <trans-unit id="21444efa9494abd66434381371c755d1d31f0244" translate="yes" xml:space="preserve">
          <source>CSS classes</source>
          <target state="translated">CSS类</target>
        </trans-unit>
        <trans-unit id="4785c5decce46adb9da8916ce47b654ac25c1fa0" translate="yes" xml:space="preserve">
          <source>CSS-based Animations</source>
          <target state="translated">基于CSS的动画</target>
        </trans-unit>
        <trans-unit id="b0a851e9310143c493ee5626ebda91ac22925d52" translate="yes" xml:space="preserve">
          <source>CSS-based animations with ngAnimate are unique since they require no JavaScript code at all. By using a CSS class that we reference between our HTML and CSS code we can create an animation that will be picked up by AngularJS when an underlying directive performs an operation.</source>
          <target state="translated">ngAnimate基于CSS的动画是独一无二的,因为它们完全不需要JavaScript代码。通过使用我们在HTML和CSS代码之间引用的CSS类,我们可以创建一个动画,当一个底层指令执行操作时,AngularJS将接收到这个动画。</target>
        </trans-unit>
        <trans-unit id="f2cd38d164b13f9a7249cbfb4a4b5ef9fc8b5c5d" translate="yes" xml:space="preserve">
          <source>Cache name of the template.</source>
          <target state="translated">模板的缓存名称。</target>
        </trans-unit>
        <trans-unit id="4841830df2aa5c0a9fdc5cf539d835c1b65395ec" translate="yes" xml:space="preserve">
          <source>Cache object identified by the cacheId or undefined if no such cache.</source>
          <target state="translated">由cacheId标识的缓存对象,如果没有缓存,则未定义。</target>
        </trans-unit>
        <trans-unit id="322c7ca089e85e4cdaa343c933e86bd05885e89f" translate="yes" xml:space="preserve">
          <source>Cached responses are returned asynchronously, in the same way as responses from the server.</source>
          <target state="translated">缓存的响应是异步返回的,与服务器的响应方式相同。</target>
        </trans-unit>
        <trans-unit id="60790f7c84170a8b87051d7e857118ffeb0465ee" translate="yes" xml:space="preserve">
          <source>Caching</source>
          <target state="translated">Caching</target>
        </trans-unit>
        <trans-unit id="78d83114a9f21cb004c811c700f1ebf657586754" translate="yes" xml:space="preserve">
          <source>Call &lt;a href=&quot;../api/ng/function/angular.bootstrap&quot;&gt;&lt;code&gt;angular.bootstrap&lt;/code&gt;&lt;/a&gt; to &lt;a href=&quot;compiler&quot;&gt;compile&lt;/a&gt; the element into an executable, bi-directionally bound application.</source>
          <target state="translated">呼叫&lt;a href=&quot;../api/ng/function/angular.bootstrap&quot;&gt; &lt;code&gt;angular.bootstrap&lt;/code&gt; &lt;/a&gt;到&lt;a href=&quot;compiler&quot;&gt;编译&lt;/a&gt;元素为可执行文件，双向绑定的应用程序。</target>
        </trans-unit>
        <trans-unit id="b162081de98877f8d47457aad07d35f7c7120470" translate="yes" xml:space="preserve">
          <source>Call this method as a setter to enable/disable eager instantiation of the &lt;a href=&quot;../service/%24route&quot;&gt;$route&lt;/a&gt; service upon application bootstrap. You can also call it as a getter (i.e. without any arguments) to get the current value of the &lt;code&gt;eagerInstantiationEnabled&lt;/code&gt; flag.</source>
          <target state="translated">将此方法作为设置器调用，以在应用程序引导时启用/禁用&lt;a href=&quot;../service/%24route&quot;&gt;$ route&lt;/a&gt;服务的即时实例化。您也可以将其称为getter（即不带任何参数）以获取 &lt;code&gt;eagerInstantiationEnabled&lt;/code&gt; 标志的当前值。</target>
        </trans-unit>
        <trans-unit id="e14131abb69b67447b042d7e96d77593367604f4" translate="yes" xml:space="preserve">
          <source>Call this method to determine if this scope has been explicitly suspended. It will not tell you whether an ancestor has been suspended. To determine if this scope will be excluded from a digest triggered at the $rootScope, for example, you must check all its ancestors:</source>
          <target state="translated">调用此方法来确定此作用域是否已被显式暂停。它不会告诉你一个祖先是否已经被暂停。例如,要确定这个作用域是否会被从$rootScope触发的摘要中排除,您必须检查它的所有祖先。</target>
        </trans-unit>
        <trans-unit id="f35d12cb9238244359750cfa0d0a76f474d059bf" translate="yes" xml:space="preserve">
          <source>Call this method to enable / disable the strict component bindings check. If enabled, the compiler will enforce that all scope / controller bindings of a &lt;a href=&quot;%24compileprovider#directive.html&quot;&gt;directive&lt;/a&gt; / &lt;a href=&quot;%24compileprovider#component.html&quot;&gt;component&lt;/a&gt; that are not set as optional with &lt;code&gt;?&lt;/code&gt;, must be provided when the directive is instantiated. If not provided, the compiler will throw the &lt;a href=&quot;https://code.angularjs.org/1.7.8/docs/api/ng/provider/error/%24compile/missingattr&quot;&gt;$compile:missingattr error&lt;/a&gt;.</source>
          <target state="translated">调用此方法以启用/禁用严格组件绑定检查。如果启用，编译器将强制未将 &lt;code&gt;?&lt;/code&gt; 设置为可选的&lt;a href=&quot;%24compileprovider#directive.html&quot;&gt;指令&lt;/a&gt; / &lt;a href=&quot;%24compileprovider#component.html&quot;&gt;组件的&lt;/a&gt;所有作用域/控制器绑定。实例化指令时必须提供。如果未提供，则编译器将抛出&lt;a href=&quot;https://code.angularjs.org/1.7.8/docs/api/ng/provider/error/%24compile/missingattr&quot;&gt;$ compile：missingattr错误&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="bc607bf3e373e4f665a14de95e82b50012f066fc" translate="yes" xml:space="preserve">
          <source>Call this method to enable / disable the strict component bindings check. If enabled, the compiler will enforce that all scope / controller bindings of a &lt;a href=&quot;%24compileprovider#directive.html&quot;&gt;directive&lt;/a&gt; / &lt;a href=&quot;%24compileprovider#component.html&quot;&gt;component&lt;/a&gt; that are not set as optional with &lt;code&gt;?&lt;/code&gt;, must be provided when the directive is instantiated. If not provided, the compiler will throw the &lt;a href=&quot;https://code.angularjs.org/1.8.2/docs/api/ng/provider/error/%24compile/missingattr&quot;&gt;$compile:missingattr error&lt;/a&gt;.</source>
          <target state="translated">Call this method to enable / disable the strict component bindings check. If enabled, the compiler will enforce that all scope / controller bindings of a &lt;a href=&quot;%24compileprovider#directive.html&quot;&gt;directive&lt;/a&gt; / &lt;a href=&quot;%24compileprovider#component.html&quot;&gt;component&lt;/a&gt; that are not set as optional with &lt;code&gt;?&lt;/code&gt; , must be provided when the directive is instantiated. If not provided, the compiler will throw the &lt;a href=&quot;https://code.angularjs.org/1.8.2/docs/api/ng/provider/error/%24compile/missingattr&quot;&gt;$compile:missingattr error&lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="cc4eaaf9dbe4e310951ac61cd764aaa491556cb9" translate="yes" xml:space="preserve">
          <source>Call this method to enable/disable various debug runtime information in the compiler such as adding binding information and a reference to the current scope on to DOM elements. If enabled, the compiler will add the following to DOM elements that have been bound to the scope</source>
          <target state="translated">调用此方法来启用/禁用编译器中的各种调试运行时信息,如在DOM元素上添加绑定信息和对当前作用域的引用。如果启用,编译器将在已经绑定到作用域的DOM元素上添加以下信息。</target>
        </trans-unit>
        <trans-unit id="1440403750e2ed45b458c5ac229f85fb683fa150" translate="yes" xml:space="preserve">
          <source>Callback called whenever the return value of any expression in &lt;code&gt;watchExpressions&lt;/code&gt; changes The &lt;code&gt;newValues&lt;/code&gt; array contains the current values of the &lt;code&gt;watchExpressions&lt;/code&gt;, with the indexes matching those of &lt;code&gt;watchExpression&lt;/code&gt; and the &lt;code&gt;oldValues&lt;/code&gt; array contains the previous values of the &lt;code&gt;watchExpressions&lt;/code&gt;, with the indexes matching those of &lt;code&gt;watchExpression&lt;/code&gt; The &lt;code&gt;scope&lt;/code&gt; refers to the current scope.</source>
          <target state="translated">回调调用每当在任何表达式中的返回值 &lt;code&gt;watchExpressions&lt;/code&gt; 变化 &lt;code&gt;newValues&lt;/code&gt; 数组包含的当前值 &lt;code&gt;watchExpressions&lt;/code&gt; ，具有匹配那些的索引 &lt;code&gt;watchExpression&lt;/code&gt; 和 &lt;code&gt;oldValues&lt;/code&gt; 数组包含的先前值 &lt;code&gt;watchExpressions&lt;/code&gt; ，具有匹配那些的索引 &lt;code&gt;watchExpression&lt;/code&gt; 的 &lt;code&gt;scope&lt;/code&gt; 是指当前作用域。</target>
        </trans-unit>
        <trans-unit id="d70eaf5bd89066c1b42f522abbd8dee8568dd708" translate="yes" xml:space="preserve">
          <source>Callback called whenever the value of &lt;code&gt;watchExpression&lt;/code&gt; changes.</source>
          <target state="translated">当 &lt;code&gt;watchExpression&lt;/code&gt; 的值更改时调用回调。</target>
        </trans-unit>
        <trans-unit id="2c689cdead0e90f013714cd4077f4ea01b650f8c" translate="yes" xml:space="preserve">
          <source>Callbacks and Promises</source>
          <target state="translated">回调和承诺</target>
        </trans-unit>
        <trans-unit id="6f75995f3b255bdefeacf9e236456a83f540b1a9" translate="yes" xml:space="preserve">
          <source>Called when the view needs to be updated. It is expected that the user of the ng-model directive will implement this method.</source>
          <target state="translated">当视图需要更新时调用。预计ng-model指令的用户会实现这个方法。</target>
        </trans-unit>
        <trans-unit id="63675a1d70484b5f1fc1c3405a8ded5f332fcc61" translate="yes" xml:space="preserve">
          <source>Calling &lt;code&gt;$digest()&lt;/code&gt; directly on a descendant of a suspended scope will still run the watchers for that scope and its descendants. When digesting we only check whether the current scope is locally suspended, rather than checking whether it has a suspended ancestor.</source>
          <target state="translated">直接在挂起的作用域的后代上调用 &lt;code&gt;$digest()&lt;/code&gt; 仍将运行该作用域及其后代的观察程序。进行摘要时，我们仅检查当前范围是否在本地暂停，而不检查其是否具有暂停的祖先。</target>
        </trans-unit>
        <trans-unit id="49fc3e72976c3ca65e702be767e99bb84f601ccf" translate="yes" xml:space="preserve">
          <source>Calling &lt;code&gt;$resume()&lt;/code&gt; on a scope that has a suspended ancestor will not cause the scope to be included in future digests until all its ancestors have been resumed.</source>
          <target state="translated">在具有暂停的祖先的作用域上调用 &lt;code&gt;$resume()&lt;/code&gt; 不会导致将该作用域包括在将来的摘要中，直到恢复了其所有祖先。</target>
        </trans-unit>
        <trans-unit id="20c938d13e09b0f80b5576ad14ce6af88219cf0d" translate="yes" xml:space="preserve">
          <source>Calling the linking function returns the element of the template. It is either the original element passed in, or the clone of the element if the &lt;code&gt;cloneAttachFn&lt;/code&gt; is provided.</source>
          <target state="translated">调用链接函数将返回模板的元素。它是传入的原始元素，或者是提供了 &lt;code&gt;cloneAttachFn&lt;/code&gt; 的元素的克隆。</target>
        </trans-unit>
        <trans-unit id="e6781591ce11dba9f9d2938ebe354ec4a507a51c" translate="yes" xml:space="preserve">
          <source>Calling these methods invoke &lt;a href=&quot;../../ng/service/%24http&quot;&gt;&lt;code&gt;$http&lt;/code&gt;&lt;/a&gt; with the specified http method, destination and parameters. When the data is returned from the server then the object is an instance of the resource class. The actions &lt;code&gt;save&lt;/code&gt;, &lt;code&gt;remove&lt;/code&gt; and &lt;code&gt;delete&lt;/code&gt; are available on it as methods with the &lt;code&gt;$&lt;/code&gt; prefix. This allows you to easily perform CRUD operations (create, read, update, delete) on server-side data like this:</source>
          <target state="translated">调用这些方法将使用指定的http方法，目标和参数来调用&lt;a href=&quot;../../ng/service/%24http&quot;&gt; &lt;code&gt;$http&lt;/code&gt; &lt;/a&gt;。从服务器返回数据时，该对象是资源类的实例。这些动作 &lt;code&gt;save&lt;/code&gt; ， &lt;code&gt;remove&lt;/code&gt; 和 &lt;code&gt;delete&lt;/code&gt; 可用它作为与方法 &lt;code&gt;$&lt;/code&gt; 前缀。这使您可以轻松地对服务器端数据执行CRUD操作（创建，读取，更新，删除），如下所示：</target>
        </trans-unit>
        <trans-unit id="31893b7919db92062b0a54add3dc3c1b08b461ce" translate="yes" xml:space="preserve">
          <source>Calling these methods invokes &lt;code&gt;$http&lt;/code&gt; on the &lt;code&gt;url&lt;/code&gt; template with the given HTTP &lt;code&gt;method&lt;/code&gt;, &lt;code&gt;params&lt;/code&gt; and &lt;code&gt;headers&lt;/code&gt;.</source>
          <target state="translated">调用这些方法将使用给定的HTTP &lt;code&gt;method&lt;/code&gt; ， &lt;code&gt;params&lt;/code&gt; 和 &lt;code&gt;headers&lt;/code&gt; 在 &lt;code&gt;url&lt;/code&gt; 模板上调用 &lt;code&gt;$http&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="91a3b32b3f576fa1a25afa0ab7e2394916694e74" translate="yes" xml:space="preserve">
          <source>Calling this function with false disables the compilation of directives on comments for the whole application. This results in a compilation performance gain, as the compiler doesn't have to check comments when looking for directives. This should however only be used if you are sure that no comment directives are used in the application (including any 3rd party directives).</source>
          <target state="translated">用false调用这个函数会禁用整个应用程序的注释指令的编译。这将导致编译性能的提高,因为编译器在查找指令时不需要检查注释。但是,只有当你确定应用程序中没有使用注释指令(包括任何第三方指令)时,才可以使用这个函数。</target>
        </trans-unit>
        <trans-unit id="fbbb4b5eaa44b0b5551e31e4b0525bc03141436e" translate="yes" xml:space="preserve">
          <source>Calling this function with false disables the compilation of directives on element classes for the whole application. This results in a compilation performance gain, as the compiler doesn't have to check element classes when looking for directives. This should however only be used if you are sure that no class directives are used in the application (including any 3rd party directives).</source>
          <target state="translated">用false调用这个函数会禁用整个应用程序的元素类指令的编译。这将导致编译性能的提高,因为编译器在寻找指令时不必检查元素类。但是,只有当你确定应用程序中没有使用类指令(包括任何第三方指令)时,才可以使用这个函数。</target>
        </trans-unit>
        <trans-unit id="1a4aefee23fa0c2ddc499c67e421bc097332c1e9" translate="yes" xml:space="preserve">
          <source>Can I disable SCE completely?</source>
          <target state="translated">我可以完全禁用SCE吗?</target>
        </trans-unit>
        <trans-unit id="38a4b640b107f7de6465c3ff929cb568050eaed3" translate="yes" xml:space="preserve">
          <source>Can be one of:</source>
          <target state="translated">可以是一个。</target>
        </trans-unit>
        <trans-unit id="3816f23c92cddb7d9eb035e560daee147a023eaf" translate="yes" xml:space="preserve">
          <source>Cancel an update and reset the input element's value to prevent an update to the &lt;code&gt;$modelValue&lt;/code&gt;, which may be caused by a pending debounced event or because the input is waiting for some future event.</source>
          <target state="translated">取消更新并重置输入元素的值，以防止更新 &lt;code&gt;$modelValue&lt;/code&gt; ，这可能是由于未决的反跳事件或输入正在等待某个将来的事件引起的。</target>
        </trans-unit>
        <trans-unit id="da189d192d9888fffe6e40083bb8393ace97b3e9" translate="yes" xml:space="preserve">
          <source>Cancelling requests</source>
          <target state="translated">撤销请求</target>
        </trans-unit>
        <trans-unit id="838a9d672c095a05992dfe53058bf7ccd9ff411d" translate="yes" xml:space="preserve">
          <source>Cancels a task associated with the &lt;code&gt;promise&lt;/code&gt;.</source>
          <target state="translated">取消与 &lt;code&gt;promise&lt;/code&gt; 相关的任务。</target>
        </trans-unit>
        <trans-unit id="5fc80b14e6aaae3cc1ada473f23aa327b69f4333" translate="yes" xml:space="preserve">
          <source>Cancels a task associated with the &lt;code&gt;promise&lt;/code&gt;. As a result of this, the promise will be resolved with a rejection.</source>
          <target state="translated">取消与 &lt;code&gt;promise&lt;/code&gt; 相关的任务。结果，诺言将被拒绝解决。</target>
        </trans-unit>
        <trans-unit id="edecf4dc2de919262a28ba9a2f7840added3c399" translate="yes" xml:space="preserve">
          <source>Cancels the provided animation and applies the end state of the animation. Note that this does not cancel the underlying operation, e.g. the setting of classes or adding the element to the DOM.</source>
          <target state="translated">取消提供的动画并应用动画的结束状态。请注意,这不会取消底层的操作,例如类的设置或将元素添加到DOM中。</target>
        </trans-unit>
        <trans-unit id="43a94b1cd16e828fd25f079b0c6f119d1c492ce3" translate="yes" xml:space="preserve">
          <source>Case Studies</source>
          <target state="translated">案例研究</target>
        </trans-unit>
        <trans-unit id="f2e31c0705378a0ca912d442b249a5361708204c" translate="yes" xml:space="preserve">
          <source>Causes &lt;code&gt;$route&lt;/code&gt; service to reload the current route even if &lt;a href=&quot;../../ng/service/%24location&quot;&gt;$location&lt;/a&gt; hasn't changed.</source>
          <target state="translated">原因 &lt;code&gt;$route&lt;/code&gt; 服务重新加载，即使当前路径&lt;a href=&quot;../../ng/service/%24location&quot;&gt;$位置&lt;/a&gt;并没有改变。</target>
        </trans-unit>
        <trans-unit id="60afdcebb41362038962725243c0aed09552fc50" translate="yes" xml:space="preserve">
          <source>Causes &lt;code&gt;$route&lt;/code&gt; service to update the current URL, replacing current route parameters with those specified in &lt;code&gt;newParams&lt;/code&gt;. Provided property names that match the route's path segment definitions will be interpolated into the location's path, while remaining properties will be treated as query params.</source>
          <target state="translated">使 &lt;code&gt;$route&lt;/code&gt; 服务更新当前URL，用 &lt;code&gt;newParams&lt;/code&gt; 中指定的参数替换当前路由参数。所提供的与路线的路径段定义匹配的属性名称将被插入到位置的路径中，而其余属性将被视为查询参数。</target>
        </trans-unit>
        <trans-unit id="bcaa33a7ae44bd5042c37a9cdbea7f843b1cf7c8" translate="yes" xml:space="preserve">
          <source>Caveats</source>
          <target state="translated">Caveats</target>
        </trans-unit>
        <trans-unit id="72d71a668e56adbe90d2fa9fb6ee8972c0b66e4a" translate="yes" xml:space="preserve">
          <source>Chaining promises</source>
          <target state="translated">链式承诺</target>
        </trans-unit>
        <trans-unit id="58e493046d8fd6e3081b6c746a33e60405b9effa" translate="yes" xml:space="preserve">
          <source>Change path when called with parameter and return &lt;code&gt;$location&lt;/code&gt;.</source>
          <target state="translated">使用参数调用时更改路径并返回 &lt;code&gt;$location&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="dca2424dc0deb99a58c19e534f338127124d9aab" translate="yes" xml:space="preserve">
          <source>Change path, search and hash, when called with parameter and return &lt;code&gt;$location&lt;/code&gt;.</source>
          <target state="translated">当使用参数调用时，更改路径，搜索和哈希，并返回 &lt;code&gt;$location&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="da91b66135a4f77c9cc08ce3eaa7130f2a6d2b72" translate="yes" xml:space="preserve">
          <source>Change search part when called with parameter and return &lt;code&gt;$location&lt;/code&gt;.</source>
          <target state="translated">使用参数调用时更改搜索部分，并返回 &lt;code&gt;$location&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="c02c34ae53310357e58911c775459e9c3de3ba96" translate="yes" xml:space="preserve">
          <source>Change the URL.</source>
          <target state="translated">更改URL。</target>
        </trans-unit>
        <trans-unit id="927385537fbe1015a617be665c6693f672fb3a52" translate="yes" xml:space="preserve">
          <source>Change the history state object when called with one parameter and return &lt;code&gt;$location&lt;/code&gt;. The state object is later passed to &lt;code&gt;pushState&lt;/code&gt; or &lt;code&gt;replaceState&lt;/code&gt;.</source>
          <target state="translated">使用一个参数调用时更改历史状态对象，并返回 &lt;code&gt;$location&lt;/code&gt; 。状态对象随后传递给 &lt;code&gt;pushState&lt;/code&gt; 或 &lt;code&gt;replaceState&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="1fa9f4c8eaa824574dae37f62154980d60ca28a4" translate="yes" xml:space="preserve">
          <source>Change the validity state of the form, and notify the parent form (if any).</source>
          <target state="translated">改变表格的有效性状态,并通知上级表格(如有)。</target>
        </trans-unit>
        <trans-unit id="667e7970ed20e88c4e980d20c8d0629557dd7400" translate="yes" xml:space="preserve">
          <source>Change the validity state, and notify the form.</source>
          <target state="translated">改变有效期状态,并通知表格。</target>
        </trans-unit>
        <trans-unit id="164b3d4809f98d0458414f1bf9cf3c9dcba16bb5" translate="yes" xml:space="preserve">
          <source>Changelog</source>
          <target state="translated">Changelog</target>
        </trans-unit>
        <trans-unit id="1403f945a22ede84f416992deee9c6911dc2c57f" translate="yes" xml:space="preserve">
          <source>Changes the address bar.</source>
          <target state="translated">更改地址栏。</target>
        </trans-unit>
        <trans-unit id="318dfbf2d67fa7b4fded5ca142121201dcf2c9ef" translate="yes" xml:space="preserve">
          <source>Changes the address in the browser's address bar.</source>
          <target state="translated">更改浏览器地址栏中的地址。</target>
        </trans-unit>
        <trans-unit id="5b764ac2b679596bebc6492993329bbb0d3fd0d8" translate="yes" xml:space="preserve">
          <source>Changes the hash fragment when called with a parameter and returns &lt;code&gt;$location&lt;/code&gt;.</source>
          <target state="translated">使用参数调用时更改哈希片段，并返回 &lt;code&gt;$location&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="c0bb203b42d991b17fac172d8578a01b132de763" translate="yes" xml:space="preserve">
          <source>Changes to the model inside &lt;code&gt;$doCheck&lt;/code&gt; will trigger new turns of the digest loop, which will cause the changes to be propagated throughout the application. Angular does not allow the &lt;code&gt;ngDoCheck&lt;/code&gt; hook to trigger a change outside of the component. It will either throw an error or do nothing depending upon the state of &lt;code&gt;enableProdMode()&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;$doCheck&lt;/code&gt; 对模型的更改将触发摘要循环的新变化，这将导致更改在整个应用程序中传播。Angular不允许 &lt;code&gt;ngDoCheck&lt;/code&gt; 挂钩触发组件外部的更改。根据 &lt;code&gt;enableProdMode()&lt;/code&gt; 的状态，它将抛出错误或不执行任何操作。</target>
        </trans-unit>
        <trans-unit id="7409e3021a2ae10433e51958a73352a869dfdffa" translate="yes" xml:space="preserve">
          <source>Changing parameters dynamically</source>
          <target state="translated">动态改变参数</target>
        </trans-unit>
        <trans-unit id="5e785584860674d65fa52977c48c6a2d8ab7530e" translate="yes" xml:space="preserve">
          <source>ChildRouter</source>
          <target state="translated">ChildRouter</target>
        </trans-unit>
        <trans-unit id="395f9525e05660c43c121056b86241cf54b50bdc" translate="yes" xml:space="preserve">
          <source>Choose: &lt;code&gt;angular-[version].js&lt;/code&gt; for a human-readable file, suitable for development and debugging.</source>
          <target state="translated">选择： &lt;code&gt;angular-[version].js&lt;/code&gt; 以获取易于阅读的文件，适合开发和调试。</target>
        </trans-unit>
        <trans-unit id="2d01471977547f403988a18fa90d7812ed92cad5" translate="yes" xml:space="preserve">
          <source>Choose: &lt;code&gt;angular-[version].min.js&lt;/code&gt; for a compressed and obfuscated file, suitable for use in production.</source>
          <target state="translated">选择： &lt;code&gt;angular-[version].min.js&lt;/code&gt; 以获取压缩和混淆的文件，适用于生产。</target>
        </trans-unit>
        <trans-unit id="e0fa5d9e8c5bdec155184c067e6fec7c8bb15af2" translate="yes" xml:space="preserve">
          <source>Choosing between ngRepeat and ngOptions</source>
          <target state="translated">在 ngRepeat 和 ngOptions 之间进行选择。</target>
        </trans-unit>
        <trans-unit id="6f950f66f6524d1d6d701a16679a2f3ae7d90d78" translate="yes" xml:space="preserve">
          <source>Chrome Accessibility Developer Tools</source>
          <target state="translated">Chrome 无障碍开发者工具</target>
        </trans-unit>
        <trans-unit id="71c207df916db009b3057f6560a48a47fcc25310" translate="yes" xml:space="preserve">
          <source>Class actions return an empty instance (with the additional properties listed below). Instance actions return a promise for the operation.</source>
          <target state="translated">类操作返回一个空的实例(具有下面列出的附加属性)。实例动作返回操作的承诺。</target>
        </trans-unit>
        <trans-unit id="6ec0ce07d9481bf4db4c020b148a12c1b4c3112a" translate="yes" xml:space="preserve">
          <source>Class and ngClass animation hooks</source>
          <target state="translated">类和ng类动画钩子</target>
        </trans-unit>
        <trans-unit id="2a0863a04b4ee272c83f2a94dd23442cc0eb6c51" translate="yes" xml:space="preserve">
          <source>Class-based animations (animations that are triggered via &lt;code&gt;ngClass&lt;/code&gt;, &lt;code&gt;ngShow&lt;/code&gt;, &lt;code&gt;ngHide&lt;/code&gt; and some other directives) have a slightly different naming convention. Class-based animations are basic enough that a standard transition or keyframe can be referenced on the class being added and removed.</source>
          <target state="translated">基于类的动画（通过 &lt;code&gt;ngClass&lt;/code&gt; ， &lt;code&gt;ngShow&lt;/code&gt; ， &lt;code&gt;ngHide&lt;/code&gt; 和其他一些指令触发的动画）的命名约定略有不同。基于类的动画足够基本，可以在要添加和删除的类上引用标准过渡或关键帧。</target>
        </trans-unit>
        <trans-unit id="9191759140319ff20e9dd16485bf237db76b0c98" translate="yes" xml:space="preserve">
          <source>Clears the cache object of any entries.</source>
          <target state="translated">清除缓存对象的任何条目。</target>
        </trans-unit>
        <trans-unit id="e515212a1c11de2835082ada05e6ec961879403e" translate="yes" xml:space="preserve">
          <source>Click here &lt;a href=&quot;../../ng/service/%24animate&quot;&gt;to learn more about animations with &lt;code&gt;$animate&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">单击此处&lt;a href=&quot;../../ng/service/%24animate&quot;&gt;以了解有关 &lt;code&gt;$animate&lt;/code&gt; &lt;/a&gt;更多信息。</target>
        </trans-unit>
        <trans-unit id="f4fed55c7291e2ae4022dc03f74858153d78fbbe" translate="yes" xml:space="preserve">
          <source>Click here &lt;a href=&quot;../../nganimate/service/%24animatecss&quot;&gt;to read the documentation for $animateCss&lt;/a&gt;.</source>
          <target state="translated">单击此处&lt;a href=&quot;../../nganimate/service/%24animatecss&quot;&gt;阅读$ animateCss的文档&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="32484b33993cf9537f02013fd9f85c2ec6cd936f" translate="yes" xml:space="preserve">
          <source>Clicking on the &quot;show&quot; button will open the dialog. The dialog will have a title, which is data bound to &lt;code&gt;username&lt;/code&gt;, and it will also have a body which we would like to transclude into the dialog.</source>
          <target state="translated">单击&amp;ldquo;显示&amp;rdquo;按钮将打开对话框。对话框将具有标题，该标题是绑定到 &lt;code&gt;username&lt;/code&gt; 的数据，并且还将具有我们要包含在对话框中的主体。</target>
        </trans-unit>
        <trans-unit id="c724973f7e774a94420a9f7d99e10433c417d579" translate="yes" xml:space="preserve">
          <source>Clicks on a link in the page.</source>
          <target state="translated">点击页面中的链接。</target>
        </trans-unit>
        <trans-unit id="730424b9edeae148b8ff6d50d8ca98ceee4c119c" translate="yes" xml:space="preserve">
          <source>Clicks on a link.</source>
          <target state="translated">点击一个链接。</target>
        </trans-unit>
        <trans-unit id="9ab2e40fdeb36ffa03fcf8447b001724a990908a" translate="yes" xml:space="preserve">
          <source>Clicks the back or forward button (or clicks a History link).</source>
          <target state="translated">点击后退或前进按钮(或点击历史链接)。</target>
        </trans-unit>
        <trans-unit id="74d1f7b3edab4ca6a434b8e934d29da720f08e4a" translate="yes" xml:space="preserve">
          <source>Clicks the back or forward button in the browser (or clicks a History link).</source>
          <target state="translated">在浏览器中点击后退或前进按钮(或点击历史记录链接)。</target>
        </trans-unit>
        <trans-unit id="bbfa773e5a63a5ea58c9b6207e608ca0120e592a" translate="yes" xml:space="preserve">
          <source>Close</source>
          <target state="translated">Close</target>
        </trans-unit>
        <trans-unit id="09ef3902bc825a92dc2ab7a4572699d9bb63ce7f" translate="yes" xml:space="preserve">
          <source>Code licensed under &lt;a href=&quot;https://github.com/angular/angular.js/blob/master/LICENSE&quot;&gt;The MIT License&lt;/a&gt;. Documentation licensed under &lt;a href=&quot;http://creativecommons.org/licenses/by/3.0/&quot;&gt;CC BY 3.0&lt;/a&gt;.</source>
          <target state="translated">根据&lt;a href=&quot;https://github.com/angular/angular.js/blob/master/LICENSE&quot;&gt;MIT许可许可的&lt;/a&gt;代码。根据&lt;a href=&quot;http://creativecommons.org/licenses/by/3.0/&quot;&gt;CC BY 3.0&lt;/a&gt;许可的文档。</target>
        </trans-unit>
        <trans-unit id="2dfc49fb8ca872a4cafc6a47501eb288da5ef7b5" translate="yes" xml:space="preserve">
          <source>CoffeeScript Tutorial</source>
          <target state="translated">咖啡脚本教程</target>
        </trans-unit>
        <trans-unit id="c548b316d570083f3666806fff6f562e7eab1bab" translate="yes" xml:space="preserve">
          <source>Combines multiple promises into a single promise that is resolved when all of the input promises are resolved.</source>
          <target state="translated">将多个承诺组合成一个承诺,当所有的输入承诺都被解析时,这个承诺就会被解析。</target>
        </trans-unit>
        <trans-unit id="fd5f82d40e47be64b2bc3a51357dc831a7c9ccc1" translate="yes" xml:space="preserve">
          <source>Combining directives with different scope defintions</source>
          <target state="translated">结合具有不同范围定义的指令</target>
        </trans-unit>
        <trans-unit id="3030caa6c289f4c08d71dfe3a1f33564ff7465d0" translate="yes" xml:space="preserve">
          <source>Commit a pending update to the &lt;code&gt;$modelValue&lt;/code&gt;.</source>
          <target state="translated">提交对 &lt;code&gt;$modelValue&lt;/code&gt; 的挂起更新。</target>
        </trans-unit>
        <trans-unit id="a521630b4593fb9bacca2130761b0f7eae72e200" translate="yes" xml:space="preserve">
          <source>Commit all form controls pending updates to the &lt;code&gt;$modelValue&lt;/code&gt;.</source>
          <target state="translated">提交所有表单控件，以等待对 &lt;code&gt;$modelValue&lt;/code&gt; 更新。</target>
        </trans-unit>
        <trans-unit id="7dcd19b6ea69063f828f5ff860efae73d6849a4b" translate="yes" xml:space="preserve">
          <source>Common Accessibility Patterns</source>
          <target state="translated">常见的无障碍模式</target>
        </trans-unit>
        <trans-unit id="dcd05a800dce1c0a95f1b07835a587a1fa065ad4" translate="yes" xml:space="preserve">
          <source>Community Resources</source>
          <target state="translated">社区资源</target>
        </trans-unit>
        <trans-unit id="f087c397aade898e8ebf5017a565387063b4caf7" translate="yes" xml:space="preserve">
          <source>Comparator which is used in determining if values retrieved using &lt;code&gt;expression&lt;/code&gt; (when it is not a function) should be considered a match based on the expected value (from the filter expression) and actual value (from the object in the array).</source>
          <target state="translated">基于期望值（来自过滤器表达式）和实际值（来自数组中的对象），用于确定是否使用 &lt;code&gt;expression&lt;/code&gt; （不是函数）检索的值的比较器应视为匹配项。</target>
        </trans-unit>
        <trans-unit id="666fd1f458daf70bc53cddeb4eeb774d87e18c31" translate="yes" xml:space="preserve">
          <source>Compare for object equality using &lt;a href=&quot;../function/angular.equals&quot;&gt;&lt;code&gt;angular.equals&lt;/code&gt;&lt;/a&gt; instead of comparing for reference equality.</source>
          <target state="translated">使用&lt;a href=&quot;../function/angular.equals&quot;&gt; &lt;code&gt;angular.equals&lt;/code&gt; &lt;/a&gt;比较对象相等性，而不是比较引用相等性。</target>
        </trans-unit>
        <trans-unit id="3877d9f9528e5e589937b6c5e2e2222e153bc4a4" translate="yes" xml:space="preserve">
          <source>Comparing $location to window.location</source>
          <target state="translated">将$location与window.location进行比较</target>
        </trans-unit>
        <trans-unit id="e9bfd3462dbe8e77bcf76ca7642f0a152f0c0338" translate="yes" xml:space="preserve">
          <source>Comparison between Directive definition and Component definition</source>
          <target state="translated">指令定义和组件定义的比较</target>
        </trans-unit>
        <trans-unit id="53cb52234319d0132a4da6be7bbd0b5b04aa75f1" translate="yes" xml:space="preserve">
          <source>Comparison of the two approaches</source>
          <target state="translated">两种方法的比较</target>
        </trans-unit>
        <trans-unit id="70d88717d38b547780477523d9cbf84942fc4774" translate="yes" xml:space="preserve">
          <source>Comparison with life-cycle hooks in the new Angular</source>
          <target state="translated">与新Angular中的生命周期钩子的比较</target>
        </trans-unit>
        <trans-unit id="17ab47599110d104d7ae0defacdd1ff429aa3f51" translate="yes" xml:space="preserve">
          <source>Compile the element, but restrict the maximum priority, so that any already compiled directives (including the &lt;code&gt;addOptions&lt;/code&gt; directive) are not compiled again.</source>
          <target state="translated">编译元素，但限制最大优先级，以使不再编译任何已经编译的指令（包括 &lt;code&gt;addOptions&lt;/code&gt; 指令）。</target>
        </trans-unit>
        <trans-unit id="341a20e237ff5c4b89204a3d4d8c8af5f8aa63bb" translate="yes" xml:space="preserve">
          <source>Compiler</source>
          <target state="translated">Compiler</target>
        </trans-unit>
        <trans-unit id="1782e5208f00a046cef2996ed8671fed74f08a08" translate="yes" xml:space="preserve">
          <source>Compiler is an AngularJS service which traverses the DOM looking for attributes. The compilation process happens in two phases.</source>
          <target state="translated">编译器是一个AngularJS服务,它遍历DOM寻找属性。编译过程分两个阶段进行。</target>
        </trans-unit>
        <trans-unit id="fa46964e2997513f5edb8da69c2a884d9e0d6812" translate="yes" xml:space="preserve">
          <source>Compiles a string with markup into an interpolation function. This service is used by the HTML &lt;a href=&quot;%24compile&quot;&gt;$compile&lt;/a&gt; service for data binding. See &lt;a href=&quot;../provider/%24interpolateprovider&quot;&gt;$interpolateProvider&lt;/a&gt; for configuring the interpolation markup.</source>
          <target state="translated">将带有标记的字符串编译为插值函数。HTML &lt;a href=&quot;%24compile&quot;&gt;$ compile&lt;/a&gt;服务使用此服务进行数据绑定。有关配置插值标记，请参见&lt;a href=&quot;../provider/%24interpolateprovider&quot;&gt;$ interpolateProvider&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="eca1135b84c5a41b83e29f018e5f8bc1af9b4725" translate="yes" xml:space="preserve">
          <source>Compiles a string with markup into an interpolation function. This service is used by the HTML &lt;a href=&quot;service/%24compile&quot;&gt;$compile&lt;/a&gt; service for data binding. See &lt;a href=&quot;provider/%24interpolateprovider&quot;&gt;$interpolateProvider&lt;/a&gt; for configuring the interpolation markup.</source>
          <target state="translated">将带有标记的字符串编译为插值函数。HTML &lt;a href=&quot;service/%24compile&quot;&gt;$ compile&lt;/a&gt;服务使用此服务进行数据绑定。有关配置插值标记，请参见&lt;a href=&quot;provider/%24interpolateprovider&quot;&gt;$ interpolateProvider&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="35e0dd7e6479d72ea347ebf52f30653b69adb513" translate="yes" xml:space="preserve">
          <source>Compiles an HTML string or DOM into a template and produces a template function, which can then be used to link &lt;a href=&quot;../type/%24rootscope.scope&quot;&gt;&lt;code&gt;scope&lt;/code&gt;&lt;/a&gt; and the template together.</source>
          <target state="translated">将HTML字符串或DOM编译为模板，并生成模板函数，然后可将其用于将&lt;a href=&quot;../type/%24rootscope.scope&quot;&gt; &lt;code&gt;scope&lt;/code&gt; &lt;/a&gt;和模板链接在一起。</target>
        </trans-unit>
        <trans-unit id="443f4ce80e9a994956ec0834e6c655a3bb098864" translate="yes" xml:space="preserve">
          <source>Compiles an HTML string or DOM into a template and produces a template function, which can then be used to link &lt;a href=&quot;type/%24rootscope.scope&quot;&gt;&lt;code&gt;scope&lt;/code&gt;&lt;/a&gt; and the template together.</source>
          <target state="translated">将HTML字符串或DOM编译为模板，并生成模板函数，然后可将其用于将&lt;a href=&quot;type/%24rootscope.scope&quot;&gt; &lt;code&gt;scope&lt;/code&gt; &lt;/a&gt;和模板链接在一起。</target>
        </trans-unit>
        <trans-unit id="952c4e08cf22564bbdb9648e98a02a3602d26f59" translate="yes" xml:space="preserve">
          <source>Complementary Libraries</source>
          <target state="translated">补充图书馆</target>
        </trans-unit>
        <trans-unit id="1660cae935161f6c4359132ab0d198129c40fd5d" translate="yes" xml:space="preserve">
          <source>Complete list of shortcut methods:</source>
          <target state="translated">完整的快捷方法列表。</target>
        </trans-unit>
        <trans-unit id="ddddba8622d54a1019f55ac5d840e4b03ae004df" translate="yes" xml:space="preserve">
          <source>Completely Replace the $delegate</source>
          <target state="translated">完全替换$delegate</target>
        </trans-unit>
        <trans-unit id="78347206801a061c0decedac37c91767431b4537" translate="yes" xml:space="preserve">
          <source>Complex Models (objects or collections)</source>
          <target state="translated">复杂模型(对象或集合)</target>
        </trans-unit>
        <trans-unit id="c92c529e0731c57efd7550480196484040b33c3e" translate="yes" xml:space="preserve">
          <source>Component</source>
          <target state="translated">Component</target>
        </trans-unit>
        <trans-unit id="a85196f04b4052b5f8e757116e9ed52d626cea29" translate="yes" xml:space="preserve">
          <source>Component definition object (a simplified &lt;a href=&quot;../service/%24compile#directive-definition-object.html&quot;&gt;directive definition object&lt;/a&gt;)</source>
          <target state="translated">组件定义对象（简化的&lt;a href=&quot;../service/%24compile#directive-definition-object.html&quot;&gt;指令定义对象&lt;/a&gt;）</target>
        </trans-unit>
        <trans-unit id="52b1bdba92bb54788ab2cdeee061c0e16d336346" translate="yes" xml:space="preserve">
          <source>Component definition object (a simplified &lt;a href=&quot;../service/%24compile#directive-definition-object.html&quot;&gt;directive definition object&lt;/a&gt;), with the following properties (all optional):</source>
          <target state="translated">组件定义对象（简化的&lt;a href=&quot;../service/%24compile#directive-definition-object.html&quot;&gt;指令定义对象&lt;/a&gt;），具有以下属性（所有可选）：</target>
        </trans-unit>
        <trans-unit id="77dc9cfc7cb3b52a950028db1a5820bbb36a0ff5" translate="yes" xml:space="preserve">
          <source>Component definitions are very simple and do not require as much configuration as defining general directives. Component definitions usually consist only of a template and a controller backing it.</source>
          <target state="translated">组件的定义非常简单,不需要像定义一般指令那样进行大量的配置。组件定义通常只由一个模板和一个控制器支持组成。</target>
        </trans-unit>
        <trans-unit id="4fe71f615894962f769e3b09ee4b063dd3104c07" translate="yes" xml:space="preserve">
          <source>Component-based application architecture</source>
          <target state="translated">基于组件的应用架构</target>
        </trans-unit>
        <trans-unit id="412108d00dc3d78512b7f514b082a1dc5a2a25c0" translate="yes" xml:space="preserve">
          <source>ComponentInstruction</source>
          <target state="translated">ComponentInstruction</target>
        </trans-unit>
        <trans-unit id="9289473eeedaee09d76c8cf1b6994d8550debf46" translate="yes" xml:space="preserve">
          <source>Components</source>
          <target state="translated">Components</target>
        </trans-unit>
        <trans-unit id="052de9b4663f1da6b0dad6763f0e84f04970f1d5" translate="yes" xml:space="preserve">
          <source>Components are also useful as route templates (e.g. when using &lt;a href=&quot;../api/ngroute&quot;&gt;ngRoute&lt;/a&gt;). In a component-based application, every view is a component:</source>
          <target state="translated">组件也可用作路由模板（例如，使用&lt;a href=&quot;../api/ngroute&quot;&gt;ngRoute时&lt;/a&gt;）。在基于组件的应用程序中，每个视图都是一个组件：</target>
        </trans-unit>
        <trans-unit id="8baa065a5cba8d6c52c78a61ff9c9163ba5e3d7e" translate="yes" xml:space="preserve">
          <source>Components as route templates</source>
          <target state="translated">作为路线模板的组件</target>
        </trans-unit>
        <trans-unit id="bf44683e2124b402afd1667eddfc51003f631e51" translate="yes" xml:space="preserve">
          <source>Components can be registered using the &lt;a href=&quot;../api/ng/provider/%24compileprovider#component.html&quot;&gt;&lt;code&gt;.component()&lt;/code&gt;&lt;/a&gt; method of an AngularJS module (returned by &lt;a href=&quot;module&quot;&gt;&lt;code&gt;angular.module()&lt;/code&gt;&lt;/a&gt;). The method takes two arguments:</source>
          <target state="translated">可以使用AngularJS模块的&lt;a href=&quot;module&quot;&gt; &lt;code&gt;angular.module()&lt;/code&gt; &lt;/a&gt;方法注册&lt;a href=&quot;../api/ng/provider/%24compileprovider#component.html&quot;&gt; &lt;code&gt;.component()&lt;/code&gt; &lt;/a&gt;由angular.module（）返回）。该方法有两个参数：</target>
        </trans-unit>
        <trans-unit id="1ede4134b45566bbb53a326a5ba30ed2337d4b16" translate="yes" xml:space="preserve">
          <source>Components that have their dependencies injected allow them to be easily mocked on a test by test basis, without having to mess with any global variables that could inadvertently affect another test.</source>
          <target state="translated">注入了依赖关系的组件可以让它们很容易地在测试的基础上被嘲弄,而不必弄乱任何全局变量,以免无意中影响另一个测试。</target>
        </trans-unit>
        <trans-unit id="db2bb3f2d36cc8fea7cbf33806f6b7360ab29060" translate="yes" xml:space="preserve">
          <source>Comprehensive Directive API</source>
          <target state="translated">综合指令API</target>
        </trans-unit>
        <trans-unit id="c05bafdb56031bb64da1f1d1861f60118932c605" translate="yes" xml:space="preserve">
          <source>Concept</source>
          <target state="translated">Concept</target>
        </trans-unit>
        <trans-unit id="cc8d5c03c91b4ff4e34ca056bb24f3fb67fdffdd" translate="yes" xml:space="preserve">
          <source>Conceptual Overview</source>
          <target state="translated">概念性概述</target>
        </trans-unit>
        <trans-unit id="e39262defe80a83fac1b793497417432c8b1a879" translate="yes" xml:space="preserve">
          <source>Conclusion</source>
          <target state="translated">Conclusion</target>
        </trans-unit>
        <trans-unit id="71c2b150a06049925dc940ff0b7ba9b28de4537b" translate="yes" xml:space="preserve">
          <source>Configure $http service to combine processing of multiple http responses received at around the same time via &lt;a href=&quot;../type/%24rootscope.scope#%24applyAsync.html&quot;&gt;$rootScope.$applyAsync&lt;/a&gt;. This can result in significant performance improvement for bigger applications that make many HTTP requests concurrently (common during application bootstrap).</source>
          <target state="translated">配置$ http服务以合并对通过&lt;a href=&quot;../type/%24rootscope.scope#%24applyAsync.html&quot;&gt;$ rootScope。$ applyAsync几乎&lt;/a&gt;同时接收到的多个http响应的处理。对于可以同时发出许多HTTP请求的较大应用程序，这可以显着提高性能（在应用程序引导期间很常见）。</target>
        </trans-unit>
        <trans-unit id="7896d76d615866e43aa8573a41f4d68ecbe909a3" translate="yes" xml:space="preserve">
          <source>Configure $parse service to add literal values that will be present as literal at expressions.</source>
          <target state="translated">配置$parse服务,以添加将在表达式中作为文字值出现的文字值。</target>
        </trans-unit>
        <trans-unit id="401014f049aff69ca01aa4c69560adc72e65a93d" translate="yes" xml:space="preserve">
          <source>Configure several aspects of error handling in AngularJS if used as a setter or return the current configuration if used as a getter. The following options are supported:</source>
          <target state="translated">如果作为setter使用,则配置AngularJS中错误处理的几个方面;如果作为getter使用,则返回当前配置。支持以下选项。</target>
        </trans-unit>
        <trans-unit id="7ed62ca7d00be1bd9be3f6f28effdd940c0a125d" translate="yes" xml:space="preserve">
          <source>Configures the mock implementation of &lt;a href=&quot;../../ng/service/%24exceptionhandler&quot;&gt;&lt;code&gt;$exceptionHandler&lt;/code&gt;&lt;/a&gt; to rethrow or to log errors passed to the &lt;code&gt;$exceptionHandler&lt;/code&gt;.</source>
          <target state="translated">将&lt;a href=&quot;../../ng/service/%24exceptionhandler&quot;&gt; &lt;code&gt;$exceptionHandler&lt;/code&gt; &lt;/a&gt;的模拟实现配置为重新抛出或记录传递给 &lt;code&gt;$exceptionHandler&lt;/code&gt; 错误。</target>
        </trans-unit>
        <trans-unit id="fa7b44a578c9b66e6eac734e95b3a649678bb56b" translate="yes" xml:space="preserve">
          <source>Configures the mock implementation of &lt;a href=&quot;../ng/service/%24exceptionhandler&quot;&gt;&lt;code&gt;$exceptionHandler&lt;/code&gt;&lt;/a&gt; to rethrow or to log errors passed to the &lt;code&gt;$exceptionHandler&lt;/code&gt;.</source>
          <target state="translated">将&lt;a href=&quot;../ng/service/%24exceptionhandler&quot;&gt; &lt;code&gt;$exceptionHandler&lt;/code&gt; &lt;/a&gt;的模拟实现配置为重新抛出或记录传递给 &lt;code&gt;$exceptionHandler&lt;/code&gt; 错误。</target>
        </trans-unit>
        <trans-unit id="ab33277d4bc70753dadfe4b4b47939a3bafacc65" translate="yes" xml:space="preserve">
          <source>Configures the mock implementation of &lt;a href=&quot;ng/service/%24exceptionhandler&quot;&gt;&lt;code&gt;$exceptionHandler&lt;/code&gt;&lt;/a&gt; to rethrow or to log errors passed to the &lt;code&gt;$exceptionHandler&lt;/code&gt;.</source>
          <target state="translated">将&lt;a href=&quot;ng/service/%24exceptionhandler&quot;&gt; &lt;code&gt;$exceptionHandler&lt;/code&gt; &lt;/a&gt;的模拟实现配置为重新抛出或记录传递给 &lt;code&gt;$exceptionHandler&lt;/code&gt; 错误。</target>
        </trans-unit>
        <trans-unit id="ef688c3bf06b49c7583d5229b5b135310e872abe" translate="yes" xml:space="preserve">
          <source>Configuring ngPluralize</source>
          <target state="translated">配置ngPluralize</target>
        </trans-unit>
        <trans-unit id="25493fa5f58d0b23af0328cbcc8d72f1b7096ef8" translate="yes" xml:space="preserve">
          <source>Configuring ngPluralize with offset</source>
          <target state="translated">用偏移配置ngPluralize</target>
        </trans-unit>
        <trans-unit id="614cb97d5550e6a973dc4d4e5e71bacf0e254a0a" translate="yes" xml:space="preserve">
          <source>Connecting to the scope</source>
          <target state="translated">连接到范围</target>
        </trans-unit>
        <trans-unit id="bd1ca2146ad14cf9d26b89eef58c53c8846544f1" translate="yes" xml:space="preserve">
          <source>Consider a base href set as follows: &lt;code&gt;&amp;lt;base href=&quot;/base/&quot;&amp;gt;&lt;/code&gt; (i.e. the application exists in the &quot;folder&quot; called &lt;code&gt;/base&lt;/code&gt;). The URL &lt;code&gt;/base&lt;/code&gt; is actually outside the application (it refers to the &lt;code&gt;base&lt;/code&gt; file found in the root &lt;code&gt;/&lt;/code&gt; folder).</source>
          <target state="translated">考虑如下的基本href集： &lt;code&gt;&amp;lt;base href=&quot;/base/&quot;&amp;gt;&lt;/code&gt; （即，该应用程序存在于名为 &lt;code&gt;/base&lt;/code&gt; 的&amp;ldquo;文件夹&amp;rdquo;中）。 URL &lt;code&gt;/base&lt;/code&gt; 实际上在应用程序外部（它是指在根目录 &lt;code&gt;/&lt;/code&gt; 文件夹中找到的 &lt;code&gt;base&lt;/code&gt; 文件）。</target>
        </trans-unit>
        <trans-unit id="b75dc57f6ba4e3ce850116dfdcb6fffec204312d" translate="yes" xml:space="preserve">
          <source>Consider a text input with an autocomplete list (for fruit), where the items are objects with a name and an id. A user enters &lt;code&gt;ap&lt;/code&gt; and then selects &lt;code&gt;Apricot&lt;/code&gt; from the list. Based on this, the autocomplete widget will call &lt;code&gt;$setViewValue({name: 'Apricot', id: 443})&lt;/code&gt;, but the rendered value will still be &lt;code&gt;ap&lt;/code&gt;. The widget can then call &lt;code&gt;ctrl.$processModelValue()&lt;/code&gt; to run the model -&amp;gt; view pipeline again, which formats the object to the string &lt;code&gt;Apricot&lt;/code&gt;, then updates the &lt;code&gt;$viewValue&lt;/code&gt;, and finally renders it in the DOM.</source>
          <target state="translated">考虑带有自动完成列表（用于水果）的文本输入，其中的项目是具有名称和ID的对象。用户输入 &lt;code&gt;ap&lt;/code&gt; ，然后从列表中选择&amp;ldquo; &lt;code&gt;Apricot&lt;/code&gt; &amp;rdquo;。基于此，自动完成窗口小部件将调用 &lt;code&gt;$setViewValue({name: 'Apricot', id: 443})&lt;/code&gt; ，但是呈现的值仍为 &lt;code&gt;ap&lt;/code&gt; 。然后，小部件可以调用 &lt;code&gt;ctrl.$processModelValue()&lt;/code&gt; 再次运行模型-&amp;gt;视图管道，该管道将对象格式化为字符串 &lt;code&gt;Apricot&lt;/code&gt; ，然后更新 &lt;code&gt;$viewValue&lt;/code&gt; ，最后将其呈现在DOM中。</target>
        </trans-unit>
        <trans-unit id="a18df99124cdd530d7ee713a96afbde420b4e68f" translate="yes" xml:space="preserve">
          <source>Consider the following example, which illustrates a typical use case of &lt;code&gt;ngMessages&lt;/code&gt;. Within the form &lt;code&gt;myForm&lt;/code&gt; we have a text input named &lt;code&gt;myField&lt;/code&gt; which is bound to the scope variable &lt;code&gt;field&lt;/code&gt; using the &lt;a href=&quot;ng/directive/ngmodel&quot;&gt;ngModel&lt;/a&gt; directive.</source>
          <target state="translated">考虑以下示例，该示例说明了 &lt;code&gt;ngMessages&lt;/code&gt; 的典型用例。在 &lt;code&gt;myForm&lt;/code&gt; 表单中，我们有一个名为 &lt;code&gt;myField&lt;/code&gt; 的文本输入，它使用&lt;a href=&quot;ng/directive/ngmodel&quot;&gt;ngModel&lt;/a&gt;指令绑定到范围变量 &lt;code&gt;field&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="067758acc9cf591a779af4e3d644186dd0af02ba" translate="yes" xml:space="preserve">
          <source>Consider this module, which includes a &lt;code&gt;willBreak&lt;/code&gt; service that uses implicit DI:</source>
          <target state="translated">考虑以下模块，该模块包括使用隐式DI 的 &lt;code&gt;willBreak&lt;/code&gt; 服务：</target>
        </trans-unit>
        <trans-unit id="8067f2d7407363afa44d0fb08f79e6b26296396e" translate="yes" xml:space="preserve">
          <source>Consider using &lt;a href=&quot;../api/ng/directive/ngcsp&quot;&gt;CSP&lt;/a&gt; (but don't rely only on CSP)</source>
          <target state="translated">考虑使用&lt;a href=&quot;../api/ng/directive/ngcsp&quot;&gt;CSP&lt;/a&gt;（但不仅仅依赖CSP）</target>
        </trans-unit>
        <trans-unit id="733fd2b4c4e1bca4c7d0e3c2e1c341bcd1d34269" translate="yes" xml:space="preserve">
          <source>Constant</source>
          <target state="translated">Constant</target>
        </trans-unit>
        <trans-unit id="d694aced80a769dd56d5ff19d56f4662c3bdd367" translate="yes" xml:space="preserve">
          <source>Constant Recipe</source>
          <target state="translated">恒定配方</target>
        </trans-unit>
        <trans-unit id="baf6a951c27a9234a81559df8b9c866456740fa7" translate="yes" xml:space="preserve">
          <source>Constant value.</source>
          <target state="translated">定值:</target>
        </trans-unit>
        <trans-unit id="b99e72117469b9970f18ba5d75fe3d0de1866186" translate="yes" xml:space="preserve">
          <source>Constant, message, exception or an object representing the rejection reason.</source>
          <target state="translated">常量、消息、异常或代表拒绝原因的对象。</target>
        </trans-unit>
        <trans-unit id="64d5e2c2aff5afc784db4e0bcb2cdc6862d0f0f0" translate="yes" xml:space="preserve">
          <source>Construction function for creating new instance of the service.</source>
          <target state="translated">用于创建新的服务实例的构造函数。</target>
        </trans-unit>
        <trans-unit id="e4b290eee7ee9eca877a7e01bf49e3ec181e017e" translate="yes" xml:space="preserve">
          <source>Content Security Policy</source>
          <target state="translated">内容安全政策</target>
        </trans-unit>
        <trans-unit id="cc11b3a28fa30ae6d3d3ad1438824cbd5224ba5c" translate="yes" xml:space="preserve">
          <source>Context</source>
          <target state="translated">Context</target>
        </trans-unit>
        <trans-unit id="802338f12e55179b2d6cd860935bf05175261d07" translate="yes" xml:space="preserve">
          <source>Context which &lt;code&gt;fn&lt;/code&gt; should be evaluated in.</source>
          <target state="translated">应该在其中评估 &lt;code&gt;fn&lt;/code&gt; 的上下文。</target>
        </trans-unit>
        <trans-unit id="18b017e5b4b89d6ff684844a26fb098545f160cf" translate="yes" xml:space="preserve">
          <source>Contribute</source>
          <target state="translated">Contribute</target>
        </trans-unit>
        <trans-unit id="4e9871e0a8defabedbf3524a3226fa9d74385b59" translate="yes" xml:space="preserve">
          <source>Contributing to AngularJS</source>
          <target state="translated">对AngularJS的贡献</target>
        </trans-unit>
        <trans-unit id="86cf9b9a051872b3598a096da04f48dd25d0af73" translate="yes" xml:space="preserve">
          <source>Control of the AngularJS templates makes applications vulnerable even if there was a completely secure sandbox:</source>
          <target state="translated">对AngularJS模板的控制,即使有一个完全安全的沙盒,也会让应用变得脆弱。</target>
        </trans-unit>
        <trans-unit id="a36a5ffa6e0dcfb64fac1b2b3d6fb176de9689de" translate="yes" xml:space="preserve">
          <source>Controller</source>
          <target state="translated">Controller</target>
        </trans-unit>
        <trans-unit id="99ffd59ebbf0e37afa0e0d929b94eba513e392bc" translate="yes" xml:space="preserve">
          <source>Controller &amp;mdash; The &lt;code&gt;ngController&lt;/code&gt; directive specifies a Controller class; the class contains business logic behind the application to decorate the scope with functions and values</source>
          <target state="translated">Controller &amp;mdash; &lt;code&gt;ngController&lt;/code&gt; 指令指定一个Controller类；该类包含应用程序背后的业务逻辑，以使用功能和值来装饰范围</target>
        </trans-unit>
        <trans-unit id="ccb3847c75d985adc6744eb79ac9c9cee18abe79" translate="yes" xml:space="preserve">
          <source>Controller constructor fn (optionally decorated with DI annotations in the array notation).</source>
          <target state="translated">控制器构造函数fn(可选择在数组符号中用DI注释装饰)。</target>
        </trans-unit>
        <trans-unit id="c27dec249f237841f7387d65d26a7c0ce88c6c18" translate="yes" xml:space="preserve">
          <source>Controller constructor function.</source>
          <target state="translated">控制器构造函数。</target>
        </trans-unit>
        <trans-unit id="9d19a84c7ff095475b0ae33d1170893261391e4f" translate="yes" xml:space="preserve">
          <source>Controller constructor function. The controller is instantiated before the pre-linking phase and can be accessed by other directives (see &lt;code&gt;require&lt;/code&gt; attribute). This allows the directives to communicate with each other and augment each other's behavior. The controller is injectable (and supports bracket notation) with the following locals:</source>
          <target state="translated">控制器构造函数。控制器在预链接阶段之前实例化，并且可以由其他指令访问（请参阅 &lt;code&gt;require&lt;/code&gt; 属性）。这使指令可以相互通信并增强彼此的行为。控制器可通过以下本地注入（并支持括号表示法）：</target>
        </trans-unit>
        <trans-unit id="a9aaeb41d0885b4404238f900eeab9f49522f6e5" translate="yes" xml:space="preserve">
          <source>Controller methods can also take arguments, as demonstrated in the following variation of the previous example.</source>
          <target state="translated">控制器方法也可以接受参数,就像下面这个例子的变化一样。</target>
        </trans-unit>
        <trans-unit id="e71925aefd89c1562fed9afbd32f746da1e7c9c5" translate="yes" xml:space="preserve">
          <source>Controller methods can be created through direct assignment to scope (see the &lt;code&gt;chiliSpicy&lt;/code&gt; method)</source>
          <target state="translated">可以通过直接分配作用域来创建控制器方法（请参阅 &lt;code&gt;chiliSpicy&lt;/code&gt; 方法）</target>
        </trans-unit>
        <trans-unit id="abab164d91275a7c27f69b9901af5a808932f134" translate="yes" xml:space="preserve">
          <source>Controller name to check.</source>
          <target state="translated">要检查的控制器名称。</target>
        </trans-unit>
        <trans-unit id="d164658172a7f4d47214d163beff14e7b08173e9" translate="yes" xml:space="preserve">
          <source>Controller name, or an object map of controllers where the keys are the names and the values are the constructors.</source>
          <target state="translated">控制器名称,或控制器的对象图,其中键是名称,值是构造函数。</target>
        </trans-unit>
        <trans-unit id="fd28161568c4e8e181bf8b34d2eb64190067fd07" translate="yes" xml:space="preserve">
          <source>Controllers</source>
          <target state="translated">Controllers</target>
        </trans-unit>
        <trans-unit id="fbc681066b21fc1c3641cf2f3c220b9b2bb08d7e" translate="yes" xml:space="preserve">
          <source>Controllers and Scopes</source>
          <target state="translated">控制器和范围</target>
        </trans-unit>
        <trans-unit id="911140cd3f21770764dea61bf3752956262c1067" translate="yes" xml:space="preserve">
          <source>Controllers are &quot;classes&quot; or &quot;constructor functions&quot; that are responsible for providing the application behavior that supports the declarative markup in the template. The recommended way of declaring Controllers is using the array notation:</source>
          <target state="translated">Controllers是 &quot;类 &quot;或 &quot;构造函数&quot;,负责提供支持模板中声明性标记的应用行为。推荐使用数组符号来声明Controller的方式。</target>
        </trans-unit>
        <trans-unit id="5b5d98f528a42620b2cc0825785014474de8791d" translate="yes" xml:space="preserve">
          <source>Controllers can be attached to the DOM in different ways. For each of them, AngularJS will instantiate a new Controller object, using the specified Controller's &lt;strong&gt;constructor function&lt;/strong&gt;:</source>
          <target state="translated">控制器可以通过不同的方式连接到DOM。对于每一个，AngularJS将使用指定的Controller的&lt;strong&gt;构造函数&lt;/strong&gt;实例化一个新的Controller对象：</target>
        </trans-unit>
        <trans-unit id="1c6d830a012a42e0e3e98e8d7391642d69b5f9c0" translate="yes" xml:space="preserve">
          <source>Controllers define methods (behavior) that can mutate the model (properties on the scope).</source>
          <target state="translated">控制器定义了可以突变模型(范围上的属性)的方法(行为)。</target>
        </trans-unit>
        <trans-unit id="70c782bc574579d2517b6cec8967686212a0d454" translate="yes" xml:space="preserve">
          <source>Controllers may register &lt;a href=&quot;../api/ng/type/%24rootscope.scope#%24watch.html&quot;&gt;watches&lt;/a&gt; on the model. These watches execute immediately after the controller behavior executes.</source>
          <target state="translated">控制器可以在模型上注册&lt;a href=&quot;../api/ng/type/%24rootscope.scope#%24watch.html&quot;&gt;手表&lt;/a&gt;。这些监视将在执行控制器行为后立即执行。</target>
        </trans-unit>
        <trans-unit id="058997bd1ff2c8ff837142c06062cc669ac555e1" translate="yes" xml:space="preserve">
          <source>Controllers use scopes to expose controller methods to templates (see &lt;a href=&quot;../api/ng/directive/ngcontroller&quot;&gt;ng-controller&lt;/a&gt;).</source>
          <target state="translated">控制器使用范围将控制器方法公开给模板（请参阅&lt;a href=&quot;../api/ng/directive/ngcontroller&quot;&gt;ng-controller&lt;/a&gt;）。</target>
        </trans-unit>
        <trans-unit id="7dd94c9d2ce116f0c4c53ed1b007067b7b712d4c" translate="yes" xml:space="preserve">
          <source>Controls (&lt;code&gt;input&lt;/code&gt;, &lt;code&gt;select&lt;/code&gt;, &lt;code&gt;textarea&lt;/code&gt;) are ways for a user to enter data. A Form is a collection of controls for the purpose of grouping related controls together.</source>
          <target state="translated">控件（ &lt;code&gt;input&lt;/code&gt; ， &lt;code&gt;select&lt;/code&gt; ， &lt;code&gt;textarea&lt;/code&gt; ）是用户输入数据的方式。表单是控件的集合，用于将相关控件分组在一起。</target>
        </trans-unit>
        <trans-unit id="e170fcf2efd35c14b97e47909e1264edfdda6632" translate="yes" xml:space="preserve">
          <source>Convert the &lt;code&gt;:&lt;/code&gt;, &lt;code&gt;-&lt;/code&gt;, or &lt;code&gt;_&lt;/code&gt;-delimited name to &lt;code&gt;camelCase&lt;/code&gt;.</source>
          <target state="translated">将 &lt;code&gt;:&lt;/code&gt; ， &lt;code&gt;-&lt;/code&gt; 或 &lt;code&gt;_&lt;/code&gt; 分隔的名称转换为 &lt;code&gt;camelCase&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="933184608bdac4f3c6c004f83098137beaa3d86f" translate="yes" xml:space="preserve">
          <source>Converts AngularJS &lt;a href=&quot;../../../guide/expression&quot;&gt;expression&lt;/a&gt; into a function.</source>
          <target state="translated">将AngularJS &lt;a href=&quot;../../../guide/expression&quot;&gt;表达式&lt;/a&gt;转换为函数。</target>
        </trans-unit>
        <trans-unit id="2eea8ad796d2916c4ebaeca90af5bde7b4d8a77a" translate="yes" xml:space="preserve">
          <source>Converts AngularJS &lt;a href=&quot;../../../guide/expression&quot;&gt;expression&lt;/a&gt; into a function. This is like &lt;a href=&quot;%24parse&quot;&gt;$parse&lt;/a&gt; and is identical when the expression is a literal constant. Otherwise, it wraps the expression in a call to &lt;a href=&quot;%24sce#getTrusted.html&quot;&gt;$sce.getTrusted(&lt;em&gt;type&lt;/em&gt;, &lt;em&gt;result&lt;/em&gt;)&lt;/a&gt;</source>
          <target state="translated">将AngularJS &lt;a href=&quot;../../../guide/expression&quot;&gt;表达式&lt;/a&gt;转换为函数。就像&lt;a href=&quot;%24parse&quot;&gt;$ parse&lt;/a&gt;一样，当表达式是文字常量时也相同。否则，它将表达式包装在对&lt;a href=&quot;%24sce#getTrusted.html&quot;&gt;$ sce.getTrusted（&lt;/a&gt;&lt;em&gt;type&lt;/em&gt;，&lt;em&gt;result&lt;/em&gt;）的调用中&lt;em&gt;&lt;/em&gt;&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="f52436d3294322d69775a94b63db34d958c64e34" translate="yes" xml:space="preserve">
          <source>Converts AngularJS &lt;a href=&quot;../../guide/expression&quot;&gt;expression&lt;/a&gt; into a function.</source>
          <target state="translated">将AngularJS &lt;a href=&quot;../../guide/expression&quot;&gt;表达式&lt;/a&gt;转换为函数。</target>
        </trans-unit>
        <trans-unit id="241b70e1e8de1ff6cda970c4d284ff5a349664ae" translate="yes" xml:space="preserve">
          <source>Converts an attribute name (e.g. dash/colon/underscore-delimited string, optionally prefixed with &lt;code&gt;x-&lt;/code&gt; or &lt;code&gt;data-&lt;/code&gt;) to its normalized, camelCase form.</source>
          <target state="translated">将属性名称（例如，破折号/冒号/下划线分隔的字符串，可选以 &lt;code&gt;x-&lt;/code&gt; 或 &lt;code&gt;data-&lt;/code&gt; 前缀）转换为其规范化的camelCase形式。</target>
        </trans-unit>
        <trans-unit id="0849392d519f4aa3fac0a65873ae6d050016e1fe" translate="yes" xml:space="preserve">
          <source>Converts string to lowercase.</source>
          <target state="translated">将字符串转换为小写。</target>
        </trans-unit>
        <trans-unit id="b79ed60a960e0da09dfacee4601fd97afa217eb9" translate="yes" xml:space="preserve">
          <source>Converts string to uppercase.</source>
          <target state="translated">将字符串转换为大写字母。</target>
        </trans-unit>
        <trans-unit id="c872753511d558c4ce512746cf585786dd025a3c" translate="yes" xml:space="preserve">
          <source>Core Concepts</source>
          <target state="translated">核心概念</target>
        </trans-unit>
        <trans-unit id="2e84aab6976a7309d079e90c2b70df72a431d11c" translate="yes" xml:space="preserve">
          <source>Counts all the direct and indirect child scopes of the current scope.</source>
          <target state="translated">计算当前作用域的所有直接和间接子作用域。</target>
        </trans-unit>
        <trans-unit id="443961121af9afe27d68ec052ba843a27eaf31a0" translate="yes" xml:space="preserve">
          <source>Counts all the watchers of direct and indirect child scopes of the current scope.</source>
          <target state="translated">统计当前作用域的直接和间接子作用域的所有监视者。</target>
        </trans-unit>
        <trans-unit id="a16536d78dc34897436003938234d72482a1d526" translate="yes" xml:space="preserve">
          <source>Courses</source>
          <target state="translated">Courses</target>
        </trans-unit>
        <trans-unit id="389e36945902ac4da978f24ea80f3d5bbd64c891" translate="yes" xml:space="preserve">
          <source>Crawling your app</source>
          <target state="translated">抓取您的应用程序</target>
        </trans-unit>
        <trans-unit id="45608ebdcb44d27d42f32d60acd39e85de71b39c" translate="yes" xml:space="preserve">
          <source>Create a new injector that can provide components defined in our &lt;code&gt;myModule&lt;/code&gt; module and request our &lt;code&gt;greeter&lt;/code&gt; service from the injector. (This is usually done automatically by AngularJS bootstrap).</source>
          <target state="translated">创建一个新的注射器，该注射器可以提供在 &lt;code&gt;myModule&lt;/code&gt; 模块中定义的组件， &lt;code&gt;greeter&lt;/code&gt; 注射器请求我们的问候服务。（这通常由AngularJS引导程序自动完成）。</target>
        </trans-unit>
        <trans-unit id="971013bc0a9711b010a8dd9b707cb3697b7f4d5f" translate="yes" xml:space="preserve">
          <source>Create a new instance of JS type. The method takes a constructor function, invokes the new operator, and supplies all of the arguments to the constructor function as specified by the constructor annotation.</source>
          <target state="translated">创建一个JS类型的新实例。该方法接受一个构造函数,调用new操作符,并提供构造函数的所有参数,由构造函数注解指定。</target>
        </trans-unit>
        <trans-unit id="9cc6657b1652167630bc2a55c743f36c28dcc171" translate="yes" xml:space="preserve">
          <source>Creates a &lt;code&gt;Deferred&lt;/code&gt; object which represents a task which will finish in the future.</source>
          <target state="translated">创建一个 &lt;code&gt;Deferred&lt;/code&gt; 对象，该对象表示将在将来完成的任务。</target>
        </trans-unit>
        <trans-unit id="d11bba0687af96cbd2d8bb53eeba0343f2e22377" translate="yes" xml:space="preserve">
          <source>Creates a deep copy of &lt;code&gt;source&lt;/code&gt;, which should be an object or an array. This functions is used internally, mostly in the change-detection code. It is not intended as an all-purpose copy function, and has several limitations (see below).</source>
          <target state="translated">创建 &lt;code&gt;source&lt;/code&gt; 的深层副本，该副本应该是对象或数组。此函数在内部使用，主要在更改检测代码中使用。它不打算用作通用复制功能，并且有一些限制（请参阅下文）。</target>
        </trans-unit>
        <trans-unit id="afa1484b840a9ffabd1ceb69c929659784229740" translate="yes" xml:space="preserve">
          <source>Creates a new array or string containing only a specified number of elements. The elements are taken from either the beginning or the end of the source array, string or number, as specified by the value and sign (positive or negative) of &lt;code&gt;limit&lt;/code&gt;. Other array-like objects are also supported (e.g. array subclasses, NodeLists, jqLite/jQuery collections etc). If a number is used as input, it is converted to a string.</source>
          <target state="translated">创建仅包含指定数量的元素的新数组或字符串。元素从源数组，字符串或数字的开头或结尾开始，由 &lt;code&gt;limit&lt;/code&gt; 的值和符号（正或负）指定。还支持其他类似数组的对象（例如，数组子类，NodeList，jqLit​​e / jQuery集合等）。如果将数字用作输入，则会将其转换为字符串。</target>
        </trans-unit>
        <trans-unit id="be3c2e6c2da6bbf270113921436fdebc0aadccf9" translate="yes" xml:space="preserve">
          <source>Creates a new backend definition for DELETE requests. For more info see &lt;code&gt;when()&lt;/code&gt;.</source>
          <target state="translated">为DELETE请求创建一个新的后端定义。有关更多信息，请参见 &lt;code&gt;when()&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="e535501af031225c35fb51be3e57cd8b30dbbd81" translate="yes" xml:space="preserve">
          <source>Creates a new backend definition for GET requests. For more info see &lt;code&gt;when()&lt;/code&gt;.</source>
          <target state="translated">为GET请求创建一个新的后端定义。有关更多信息，请参见 &lt;code&gt;when()&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="356cc2f1fc79ace6115ff3114750774f5192302f" translate="yes" xml:space="preserve">
          <source>Creates a new backend definition for HEAD requests. For more info see &lt;code&gt;when()&lt;/code&gt;.</source>
          <target state="translated">为HEAD请求创建一个新的后端定义。有关更多信息，请参见 &lt;code&gt;when()&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="049cbbc849e59668c71cc30e7a114207708c87cf" translate="yes" xml:space="preserve">
          <source>Creates a new backend definition for JSONP requests. For more info see &lt;code&gt;when()&lt;/code&gt;.</source>
          <target state="translated">为JSONP请求创建新的后端定义。有关更多信息，请参见 &lt;code&gt;when()&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="6a1e3e71e874615b87146e6893453eeadfaf6659" translate="yes" xml:space="preserve">
          <source>Creates a new backend definition for PATCH requests. For more info see &lt;code&gt;when()&lt;/code&gt;.</source>
          <target state="translated">为PATCH请求创建一个新的后端定义。有关更多信息，请参见 &lt;code&gt;when()&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="eda4d8b9cd6e902637dd9ad1e48fec7c8bb7cd5c" translate="yes" xml:space="preserve">
          <source>Creates a new backend definition for POST requests. For more info see &lt;code&gt;when()&lt;/code&gt;.</source>
          <target state="translated">为POST请求创建一个新的后端定义。有关更多信息，请参见 &lt;code&gt;when()&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="25a82e38306940d53cc0431c2027b19ad9784508" translate="yes" xml:space="preserve">
          <source>Creates a new backend definition for PUT requests. For more info see &lt;code&gt;when()&lt;/code&gt;.</source>
          <target state="translated">为PUT请求创建一个新的后端定义。有关更多信息，请参见 &lt;code&gt;when()&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="15f03f22d3c9680dc729ef2ccf8e1606ba4e48fa" translate="yes" xml:space="preserve">
          <source>Creates a new backend definition that compares only with the requested route.</source>
          <target state="translated">创建一个新的后端定义,该定义只与申请的途径进行比较。</target>
        </trans-unit>
        <trans-unit id="f48cdf8dae7db1d48c0c6ef4dea9caf8360e67d3" translate="yes" xml:space="preserve">
          <source>Creates a new backend definition.</source>
          <target state="translated">创建一个新的后台定义。</target>
        </trans-unit>
        <trans-unit id="e4122c824ad9684d95a45783de97719b5e6982d9" translate="yes" xml:space="preserve">
          <source>Creates a new child &lt;a href=&quot;%24rootscope.scope&quot;&gt;scope&lt;/a&gt;.</source>
          <target state="translated">创建一个新的子&lt;a href=&quot;%24rootscope.scope&quot;&gt;范围&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="de053e738e592f1089fb9a006cc3b78b9a9bb916" translate="yes" xml:space="preserve">
          <source>Creates a new request expectation for DELETE requests. For more info see &lt;code&gt;expect()&lt;/code&gt;.</source>
          <target state="translated">为DELETE请求创建一个新的请求期望。有关更多信息，请参见 &lt;code&gt;expect()&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="e36dcfb22e2a05490dc118fb61c929695cfc0cd2" translate="yes" xml:space="preserve">
          <source>Creates a new request expectation for GET requests. For more info see &lt;code&gt;expect()&lt;/code&gt;.</source>
          <target state="translated">为GET请求创建一个新的请求期望。有关更多信息，请参见 &lt;code&gt;expect()&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="caa7758c7686ac3d104ccfccb9c7de838c640b7d" translate="yes" xml:space="preserve">
          <source>Creates a new request expectation for HEAD requests. For more info see &lt;code&gt;expect()&lt;/code&gt;.</source>
          <target state="translated">为HEAD请求创建一个新的请求期望。有关更多信息，请参见 &lt;code&gt;expect()&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="dbdab2ed8f022128732b490b699f2be275275bdd" translate="yes" xml:space="preserve">
          <source>Creates a new request expectation for JSONP requests. For more info see &lt;code&gt;expect()&lt;/code&gt;.</source>
          <target state="translated">为JSONP请求创建新的请求期望。有关更多信息，请参见 &lt;code&gt;expect()&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="9a3d06136b6563a9d9eca8d2c71cc5612b1d724c" translate="yes" xml:space="preserve">
          <source>Creates a new request expectation for PATCH requests. For more info see &lt;code&gt;expect()&lt;/code&gt;.</source>
          <target state="translated">为PATCH请求创建新的请求期望。有关更多信息，请参见 &lt;code&gt;expect()&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="ee017574d4a1cc6b2b83a364ba45ecf9253c34cd" translate="yes" xml:space="preserve">
          <source>Creates a new request expectation for POST requests. For more info see &lt;code&gt;expect()&lt;/code&gt;.</source>
          <target state="translated">为POST请求创建一个新的请求期望。有关更多信息，请参见 &lt;code&gt;expect()&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="5406609dce34fb161e5e19a023b5cd524a033c97" translate="yes" xml:space="preserve">
          <source>Creates a new request expectation for PUT requests. For more info see &lt;code&gt;expect()&lt;/code&gt;.</source>
          <target state="translated">为PUT请求创建一个新的请求期望。有关更多信息，请参见 &lt;code&gt;expect()&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="0be9180abbbad424813f1fc95de7b10c2c836e34" translate="yes" xml:space="preserve">
          <source>Creates a new request expectation that compares only with the requested route.</source>
          <target state="translated">创建一个新的请求期望值,该期望值仅与请求途径进行比较。</target>
        </trans-unit>
        <trans-unit id="a30b5b3ceb57067554cf2b1480796fa683e821bd" translate="yes" xml:space="preserve">
          <source>Creates a new request expectation.</source>
          <target state="translated">创建一个新的请求期望。</target>
        </trans-unit>
        <trans-unit id="b87ac50e12a922afd057ef55f3f8b4babfd88906" translate="yes" xml:space="preserve">
          <source>Creates a promise that is resolved as rejected with the specified &lt;code&gt;reason&lt;/code&gt;. This api should be used to forward rejection in a chain of promises. If you are dealing with the last promise in a promise chain, you don't need to worry about it.</source>
          <target state="translated">创建一个由于指定 &lt;code&gt;reason&lt;/code&gt; 而被拒绝的承诺。此api应该用于在承诺链中转发拒绝。如果您正在处理承诺链中的最后一个承诺，则无需担心。</target>
        </trans-unit>
        <trans-unit id="2d3b67b5019f3d6a71328d9460125c9c206f73df" translate="yes" xml:space="preserve">
          <source>Creates an injector object that can be used for retrieving services as well as for dependency injection (see &lt;a href=&quot;../../../guide/di&quot;&gt;dependency injection&lt;/a&gt;).</source>
          <target state="translated">创建一个注入器对象，该注入器对象可用于检索服务以及进行依赖项注入（请参阅&lt;a href=&quot;../../../guide/di&quot;&gt;依赖项注入&lt;/a&gt;）。</target>
        </trans-unit>
        <trans-unit id="7356a349c1f5567bb5bd540f22f1fb39ae0a858c" translate="yes" xml:space="preserve">
          <source>Creates an injector object that can be used for retrieving services as well as for dependency injection (see &lt;a href=&quot;../../guide/di&quot;&gt;dependency injection&lt;/a&gt;).</source>
          <target state="translated">创建一个注入器对象，该注入器对象可用于检索服务以及进行依赖项注入（请参阅&lt;a href=&quot;../../guide/di&quot;&gt;依赖项注入&lt;/a&gt;）。</target>
        </trans-unit>
        <trans-unit id="8695fdeaecdde9d69786b268e43f9db9c6275ac8" translate="yes" xml:space="preserve">
          <source>Creates and configures &lt;a href=&quot;../service/%24sanitize&quot;&gt;&lt;code&gt;$sanitize&lt;/code&gt;&lt;/a&gt; instance.</source>
          <target state="translated">创建并配置&lt;a href=&quot;../service/%24sanitize&quot;&gt; &lt;code&gt;$sanitize&lt;/code&gt; &lt;/a&gt;实例。</target>
        </trans-unit>
        <trans-unit id="02881b14df84f6433db6e90021eea6be086eb518" translate="yes" xml:space="preserve">
          <source>Creates and configures &lt;a href=&quot;ngsanitize/service/%24sanitize&quot;&gt;&lt;code&gt;$sanitize&lt;/code&gt;&lt;/a&gt; instance.</source>
          <target state="translated">创建并配置&lt;a href=&quot;ngsanitize/service/%24sanitize&quot;&gt; &lt;code&gt;$sanitize&lt;/code&gt; &lt;/a&gt;实例。</target>
        </trans-unit>
        <trans-unit id="7b5cfadde58f93508e998389a777198ca3f108c0" translate="yes" xml:space="preserve">
          <source>Creates and configures &lt;a href=&quot;service/%24sanitize&quot;&gt;&lt;code&gt;$sanitize&lt;/code&gt;&lt;/a&gt; instance.</source>
          <target state="translated">创建并配置&lt;a href=&quot;service/%24sanitize&quot;&gt; &lt;code&gt;$sanitize&lt;/code&gt; &lt;/a&gt;实例。</target>
        </trans-unit>
        <trans-unit id="edbda21e00ea49fe435ceaf70927ac4e177701c4" translate="yes" xml:space="preserve">
          <source>Creates and wires objects and functions</source>
          <target state="translated">创建和连接对象和功能</target>
        </trans-unit>
        <trans-unit id="ffcaf8830fe68d1b1f68ba57b8709c9d5b6199de" translate="yes" xml:space="preserve">
          <source>Creating Directives</source>
          <target state="translated">创建指令</target>
        </trans-unit>
        <trans-unit id="a700dae1bd51c2c95667196a1753a5f50b43b0b7" translate="yes" xml:space="preserve">
          <source>Creating Directives that Communicate</source>
          <target state="translated">创建传达指令</target>
        </trans-unit>
        <trans-unit id="8fbe66dd12a5b3a3552d7672f77f9a38a3123301" translate="yes" xml:space="preserve">
          <source>Creating Services</source>
          <target state="translated">创建服务</target>
        </trans-unit>
        <trans-unit id="c10c8a9d5669bca0e2013728d5dfd0cb881a0713" translate="yes" xml:space="preserve">
          <source>Creating a Directive that Adds Event Listeners</source>
          <target state="translated">创建一个添加事件监听器的指令</target>
        </trans-unit>
        <trans-unit id="f13dcfd72af44ef370551b4c95c6f4d5f8e82c46" translate="yes" xml:space="preserve">
          <source>Creating a Directive that Manipulates the DOM</source>
          <target state="translated">创建一个操纵DOM的指令。</target>
        </trans-unit>
        <trans-unit id="4908e625ec5c3fbe3253cd44e110565c0a03e356" translate="yes" xml:space="preserve">
          <source>Creating a Directive that Wraps Other Elements</source>
          <target state="translated">创建一个包裹其他元素的指令。</target>
        </trans-unit>
        <trans-unit id="00480fa3f76205fbcff45fe1d9ab6fe1895c433a" translate="yes" xml:space="preserve">
          <source>Creating aliases for these properties is possible with &lt;a href=&quot;nginit&quot;&gt;&lt;code&gt;ngInit&lt;/code&gt;&lt;/a&gt;. This may be useful when, for instance, nesting ngRepeats.</source>
          <target state="translated">可以使用&lt;a href=&quot;nginit&quot;&gt; &lt;code&gt;ngInit&lt;/code&gt; &lt;/a&gt;为这些属性创建别名。例如，在嵌套ngRepeats时，这可能很有用。</target>
        </trans-unit>
        <trans-unit id="4273e44c3ccf98604f4bbe4a2ea0575d5e6e7b94" translate="yes" xml:space="preserve">
          <source>Creating and configuring a Component</source>
          <target state="translated">创建和配置一个组件</target>
        </trans-unit>
        <trans-unit id="d2c811c7456325eb8da1fc874215e55532d587bd" translate="yes" xml:space="preserve">
          <source>Creating custom actions</source>
          <target state="translated">创建自定义动作</target>
        </trans-unit>
        <trans-unit id="b9844587b0d135a1f842558883719b722f871819" translate="yes" xml:space="preserve">
          <source>Creating custom filters</source>
          <target state="translated">创建自定义过滤器</target>
        </trans-unit>
        <trans-unit id="b5746d62259c2e464d484d43c4e1554d32d064d9" translate="yes" xml:space="preserve">
          <source>Creating local properties on widget scope creates two problems:</source>
          <target state="translated">在小组件范围上创建本地属性会产生两个问题。</target>
        </trans-unit>
        <trans-unit id="e2a4b56bb483692f538a3505e58481eb966e8ce9" translate="yes" xml:space="preserve">
          <source>Creation versus Retrieval</source>
          <target state="translated">创建与检索</target>
        </trans-unit>
        <trans-unit id="5af074006d430540128f3bf6a44cb8c6f303320b" translate="yes" xml:space="preserve">
          <source>Cross Site Request Forgery (XSRF) Protection</source>
          <target state="translated">跨站请求伪造(XSRF)保护措施</target>
        </trans-unit>
        <trans-unit id="c8673739ea7c8a0f8b25ce9b61f288f6a98b1451" translate="yes" xml:space="preserve">
          <source>Cross Site Request Forgery (XSRF/CSRF)</source>
          <target state="translated">跨站请求伪造(XSRF/CSRF)</target>
        </trans-unit>
        <trans-unit id="7fef8120d67245c18d2d3c23d1ec55c168fe972d" translate="yes" xml:space="preserve">
          <source>Currency symbol</source>
          <target state="translated">货币符号</target>
        </trans-unit>
        <trans-unit id="3dd4bbd8be3d3584f64ec9d144ad17acc82acc08" translate="yes" xml:space="preserve">
          <source>Currency symbol or identifier to be displayed.</source>
          <target state="translated">要显示的货币符号或标识符。</target>
        </trans-unit>
        <trans-unit id="8fc66fe26d9d8793cd1000496300cf9f2f548b32" translate="yes" xml:space="preserve">
          <source>Current RegExp if called without value or self for chaining otherwise.</source>
          <target state="translated">当前正则表达式,如果调用时没有值,或者调用自变量进行链式连接,否则。</target>
        </trans-unit>
        <trans-unit id="f226ae8b1558106c8adc6746637c3dbe2b31d834" translate="yes" xml:space="preserve">
          <source>Current route information.</source>
          <target state="translated">当前的路线信息。</target>
        </trans-unit>
        <trans-unit id="1c94bf3985b8bccc15be49b6d0743db478a47075" translate="yes" xml:space="preserve">
          <source>Current value when called without a new value or self for chaining otherwise.</source>
          <target state="translated">调用时的当前值,没有新的值,否则调用self进行连锁。</target>
        </trans-unit>
        <trans-unit id="6334d13a652b9fde3f48f69b6ce9c655418ee599" translate="yes" xml:space="preserve">
          <source>Current/previous route information.</source>
          <target state="translated">当前/以前的路线信息。</target>
        </trans-unit>
        <trans-unit id="0c6c0c1904e8345998b07d175a1de44245761ead" translate="yes" xml:space="preserve">
          <source>Currently, ngAria interfaces with the following directives:</source>
          <target state="translated">目前,ngAria与以下指令接口。</target>
        </trans-unit>
        <trans-unit id="4edef8165e277d94077897e6b7f0af7494905313" translate="yes" xml:space="preserve">
          <source>Currently, the &lt;strong&gt;Component Router&lt;/strong&gt; module must be installed via &lt;code&gt;npm&lt;/code&gt;/&lt;code&gt;yarn&lt;/code&gt;, it is not available on Bower or the Google CDN.</source>
          <target state="translated">当前，&lt;strong&gt;组件路由器&lt;/strong&gt;模块必须通过 &lt;code&gt;npm&lt;/code&gt; / &lt;code&gt;yarn&lt;/code&gt; 安装，在Bower或Google CDN上不可用。</target>
        </trans-unit>
        <trans-unit id="11e09346e5e227c0f25baf70a4c23438004527d4" translate="yes" xml:space="preserve">
          <source>Currently, the ngMessages module only contains the code for the &lt;code&gt;ngMessages&lt;/code&gt;, &lt;code&gt;ngMessagesInclude&lt;/code&gt;&lt;code&gt;ngMessage&lt;/code&gt;, &lt;code&gt;ngMessageExp&lt;/code&gt; and &lt;code&gt;ngMessageDefault&lt;/code&gt; directives.</source>
          <target state="translated">当前，ngMessages模块仅包含 &lt;code&gt;ngMessages&lt;/code&gt; ， &lt;code&gt;ngMessagesInclude&lt;/code&gt; &lt;code&gt;ngMessage&lt;/code&gt; ， &lt;code&gt;ngMessageExp&lt;/code&gt; 和 &lt;code&gt;ngMessageDefault&lt;/code&gt; 指令的代码。</target>
        </trans-unit>
        <trans-unit id="74d5d1b5bbf2644cec8eb6da6dea035b822c7813" translate="yes" xml:space="preserve">
          <source>Custom Validation</source>
          <target state="translated">自定义验证</target>
        </trans-unit>
        <trans-unit id="9b15bde65e9d230027d2d89ae778a8a3108d5df6" translate="yes" xml:space="preserve">
          <source>Custom error message displayed after the user interacted with a control (i.e. when &lt;code&gt;$touched&lt;/code&gt; is set)</source>
          <target state="translated">用户与控件交互后显示的自定义错误消息（即，设置了 &lt;code&gt;$touched&lt;/code&gt; 时）</target>
        </trans-unit>
        <trans-unit id="b78660829b757d40d1cf02c5a67f5153479dc66e" translate="yes" xml:space="preserve">
          <source>Custom error message displayed upon submitting the form (&lt;code&gt;$submitted&lt;/code&gt; is set), even if the user didn't interact with a control</source>
          <target state="translated">提交表单后会显示自定义错误消息（设置了 &lt;code&gt;$submitted&lt;/code&gt; ），即使用户未与控件进行交互</target>
        </trans-unit>
        <trans-unit id="d33be98b55db6c87b9f4e29aaa56cfc52eb74725" translate="yes" xml:space="preserve">
          <source>Custom model update triggers</source>
          <target state="translated">自定义模型更新触发</target>
        </trans-unit>
        <trans-unit id="7a16736ffe7d57250d06a87b758621a6d4a77ba3" translate="yes" xml:space="preserve">
          <source>DOM control structures for repeating, showing and hiding DOM fragments.</source>
          <target state="translated">用于重复、显示和隐藏DOM片段的DOM控制结构。</target>
        </trans-unit>
        <trans-unit id="9a03bb780a978fe1bf04b76b90365ca5e1cd807d" translate="yes" xml:space="preserve">
          <source>DOM element which is the root of AngularJS application.</source>
          <target state="translated">DOM元素,是AngularJS应用的根。</target>
        </trans-unit>
        <trans-unit id="854d235e232e068ef083bf90af82bc89c9fe562d" translate="yes" xml:space="preserve">
          <source>Dart</source>
          <target state="translated">Dart</target>
        </trans-unit>
        <trans-unit id="f20dcbd9b08fb9703f8879bef939587ab26fc293" translate="yes" xml:space="preserve">
          <source>Data Binding</source>
          <target state="translated">数据绑定</target>
        </trans-unit>
        <trans-unit id="7865e224a6bf57800137c76704b7833654f7c47d" translate="yes" xml:space="preserve">
          <source>Data Binding in AngularJS Templates</source>
          <target state="translated">AngularJS模板中的数据绑定</target>
        </trans-unit>
        <trans-unit id="1ab20277bfa22894e79f0856de3b27a40d577c50" translate="yes" xml:space="preserve">
          <source>Data Binding in Classical Template Systems</source>
          <target state="translated">经典模板系统中的数据绑定</target>
        </trans-unit>
        <trans-unit id="ac99f5c112abda52d4e6d7eedc74c9f89d12480b" translate="yes" xml:space="preserve">
          <source>Data Modeling &lt;a href=&quot;https://github.com/js-data/js-data-angular&quot;&gt;JS-Data-Angular&lt;/a&gt;</source>
          <target state="translated">数据建模&lt;a href=&quot;https://github.com/js-data/js-data-angular&quot;&gt;JS-Data-Angular&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="d38cca5da9c7df446a12182ab09218cd420e4017" translate="yes" xml:space="preserve">
          <source>Data binding</source>
          <target state="translated">数据绑定</target>
        </trans-unit>
        <trans-unit id="156ab9c87cd161d279876149b77acd0b58d8fe2b" translate="yes" xml:space="preserve">
          <source>Data binding, as in &lt;code&gt;{{}}&lt;/code&gt;.</source>
          <target state="translated">数据绑定，如 &lt;code&gt;{{}}&lt;/code&gt; 中所示。</target>
        </trans-unit>
        <trans-unit id="e6ebec9e3c5afe4e96b7b5d0a2b400ca889458eb" translate="yes" xml:space="preserve">
          <source>Data properties used by the &lt;a href=&quot;../function/angular.element#methods.html&quot;&gt;&lt;code&gt;scope()&lt;/code&gt;/&lt;code&gt;isolateScope()&lt;/code&gt; methods&lt;/a&gt; to return the element's scope.</source>
          <target state="translated">&lt;a href=&quot;../function/angular.element#methods.html&quot;&gt; &lt;code&gt;scope()&lt;/code&gt; / &lt;code&gt;isolateScope()&lt;/code&gt; 方法&lt;/a&gt;用于返回元素范围的数据属性。</target>
        </trans-unit>
        <trans-unit id="f722ccac00c1317dd3e7eb7f3ac23bac8fb4eb14" translate="yes" xml:space="preserve">
          <source>Data-binding in AngularJS apps is the automatic synchronization of data between the model and view components. The way that AngularJS implements data-binding lets you treat the model as the single-source-of-truth in your application. The view is a projection of the model at all times. When the model changes, the view reflects the change, and vice versa.</source>
          <target state="translated">AngularJS应用程序中的数据绑定是模型和视图组件之间数据的自动同步。AngularJS实现数据绑定的方式让您可以将模型视为应用程序中的单一真实来源。视图在任何时候都是模型的投影。当模型发生变化时,视图就会反映出这种变化,反之亦然。</target>
        </trans-unit>
        <trans-unit id="77a57d575cbd23f1439b67b6fdff07165e77bcc2" translate="yes" xml:space="preserve">
          <source>Date to format either as Date object, milliseconds (string or number) or various ISO 8601 datetime string formats (e.g. yyyy-MM-ddTHH:mm:ss.sssZ and its shorter versions like yyyy-MM-ddTHH:mmZ, yyyy-MM-dd or yyyyMMddTHHmmssZ). If no timezone is specified in the string input, the time is considered to be in the local timezone.</source>
          <target state="translated">日期要格式化为Date对象、毫秒(字符串或数字)或各种ISO 8601日期时间字符串格式(例如yyyy-MM-ddTHH:mm:ss.ssZ及其更短的版本,如yyyy-MM-ddTHH:mmZ、yyyy-MM-dd或yyyyMMddTHHmmssZ)。如果在输入的字符串中没有指定时区,时间将被认为是当地时区。</target>
        </trans-unit>
        <trans-unit id="1ebe58a75d08e8dfda58bd2413fc709aa1379c08" translate="yes" xml:space="preserve">
          <source>Debouncing updates</source>
          <target state="translated">退弹更新</target>
        </trans-unit>
        <trans-unit id="a2e23b650a15e5c693ca1445133d5ee60d9d20b4" translate="yes" xml:space="preserve">
          <source>Decorators</source>
          <target state="translated">Decorators</target>
        </trans-unit>
        <trans-unit id="5e42ebfd421aa36ad532cb84814016fb095d849b" translate="yes" xml:space="preserve">
          <source>Decorators are a design pattern that is used to separate modification or &lt;em&gt;decoration&lt;/em&gt; of a class without modifying the original source code. In AngularJS, decorators are functions that allow a service, directive or filter to be modified prior to its usage.</source>
          <target state="translated">装饰器是一种设计模式，用于分隔类的修改或&lt;em&gt;修饰&lt;/em&gt;而无需修改原始源代码。在AngularJS中，装饰器是允许在使用服务，指令或过滤器之前对其进行修改的函数。</target>
        </trans-unit>
        <trans-unit id="a7868dadf07f1c7850edc7089cb77140b698014a" translate="yes" xml:space="preserve">
          <source>Decorators have different rules for different services. This is because services are registered in different ways. Services are selected by name, however filters and directives are selected by appending &lt;code&gt;&quot;Filter&quot;&lt;/code&gt; or &lt;code&gt;&quot;Directive&quot;&lt;/code&gt; to the end of the name. The &lt;code&gt;$delegate&lt;/code&gt; provided is dictated by the type of service.</source>
          <target state="translated">装饰器针对不同的服务具有不同的规则。这是因为服务是以不同的方式注册的。通过名称选择服务，但是通过在名称末尾附加 &lt;code&gt;&quot;Filter&quot;&lt;/code&gt; 或 &lt;code&gt;&quot;Directive&quot;&lt;/code&gt; 来选择过滤器和指令。提供的 &lt;code&gt;$delegate&lt;/code&gt; 由服务类型决定。</target>
        </trans-unit>
        <trans-unit id="09211fe2da464fdb5a53e646de8838c5aaa9ef4f" translate="yes" xml:space="preserve">
          <source>Deeply extends the destination object &lt;code&gt;dst&lt;/code&gt; by copying own enumerable properties from the &lt;code&gt;src&lt;/code&gt; object(s) to &lt;code&gt;dst&lt;/code&gt;. You can specify multiple &lt;code&gt;src&lt;/code&gt; objects. If you want to preserve original objects, you can do so by passing an empty object as the target: &lt;code&gt;var object = angular.merge({}, object1, object2)&lt;/code&gt;.</source>
          <target state="translated">通过将自己的可枚举属性从 &lt;code&gt;src&lt;/code&gt; 对象复制到 &lt;code&gt;dst&lt;/code&gt; 来深度扩展目标对象 &lt;code&gt;dst&lt;/code&gt; 。您可以指定多个 &lt;code&gt;src&lt;/code&gt; 对象。如果要保留原始对象，可以通过传递一个空对象作为目标来实现： &lt;code&gt;var object = angular.merge({}, object1, object2)&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="48d349eb48cca72baf0fba3472796293caf10dff" translate="yes" xml:space="preserve">
          <source>Default &lt;a href=&quot;%24http&quot;&gt;&lt;code&gt;$http&lt;/code&gt;&lt;/a&gt; params serializer that converts objects to strings according to the following rules:</source>
          <target state="translated">默认的&lt;a href=&quot;%24http&quot;&gt; &lt;code&gt;$http&lt;/code&gt; &lt;/a&gt; params序列化程序，根据以下规则将对象转换为字符串：</target>
        </trans-unit>
        <trans-unit id="e18582a087571d146a0e46c24129165fcade2bbe" translate="yes" xml:space="preserve">
          <source>Default &lt;a href=&quot;service/%24http&quot;&gt;&lt;code&gt;$http&lt;/code&gt;&lt;/a&gt; params serializer that converts objects to strings according to the following rules:</source>
          <target state="translated">默认的&lt;a href=&quot;service/%24http&quot;&gt; &lt;code&gt;$http&lt;/code&gt; &lt;/a&gt; params序列化程序，根据以下规则将对象转换为字符串：</target>
        </trans-unit>
        <trans-unit id="272d05ca374dc5c4d632482aeb433788c4ec30ec" translate="yes" xml:space="preserve">
          <source>Default Transformations</source>
          <target state="translated">默认变换</target>
        </trans-unit>
        <trans-unit id="e5f063eb61d4592c613ead4c13dd985673caf4ef" translate="yes" xml:space="preserve">
          <source>Default events, extra triggers, and catch-all debounce values</source>
          <target state="translated">默认事件,额外的触发器,以及覆盖性的debounce值。</target>
        </trans-unit>
        <trans-unit id="31d4d566cb937a1de4b2420380b5397c1828e7ea" translate="yes" xml:space="preserve">
          <source>Default implementation of $animate that doesn't perform any animations, instead just synchronously performs DOM updates and resolves the returned runner promise.</source>
          <target state="translated">默认实现$animate不执行任何动画,而只是同步执行DOM更新并解析返回的runner承诺。</target>
        </trans-unit>
        <trans-unit id="2c5bb4ffb680656f0530a451ee96703523ca759b" translate="yes" xml:space="preserve">
          <source>Default values for &lt;code&gt;url&lt;/code&gt; parameters. These can be overridden in &lt;code&gt;actions&lt;/code&gt; methods. If a parameter value is a function, it will be called every time a param value needs to be obtained for a request (unless the param was overridden). The function will be passed the current data value as an argument.</source>
          <target state="translated">&lt;code&gt;url&lt;/code&gt; 参数的默认值。这些可以在 &lt;code&gt;actions&lt;/code&gt; 方法中覆盖。如果参数值是一个函数，则每次需要为请求获取参数值时都将调用该参数值（除非该参数被覆盖）。该函数将作为参数传递当前数据值。</target>
        </trans-unit>
        <trans-unit id="317bbd656753a9dd8ea52dce97e89a2822b25653" translate="yes" xml:space="preserve">
          <source>Default:</source>
          <target state="translated">Default:</target>
        </trans-unit>
        <trans-unit id="1edc1c012a2ea4113df21912c28c7ea3c9ec3a61" translate="yes" xml:space="preserve">
          <source>Default: &lt;code&gt;'!'&lt;/code&gt;</source>
          <target state="translated">默认值： &lt;code&gt;'!'&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="5f38409cbc5f1ef34d4d1682cfb27697f30ae623" translate="yes" xml:space="preserve">
          <source>Default: true. When used without argument, it returns the current value.</source>
          <target state="translated">默认值:true。在没有参数的情况下使用时,返回当前值。</target>
        </trans-unit>
        <trans-unit id="f8652ebd1a1875dc842cac2cb6d36ca46a049174" translate="yes" xml:space="preserve">
          <source>Defaults to &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">默认为 &lt;code&gt;false&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="797eed95d0237127f8eda8c263a529ceb7fafcb9" translate="yes" xml:space="preserve">
          <source>Defaults to false. If no value is specified, returns the current configured value.</source>
          <target state="translated">默认值为false,如果没有指定值,则返回当前配置值。如果没有指定数值,则返回当前配置的数值。</target>
        </trans-unit>
        <trans-unit id="fcabacc99098c666fe2451c159c66618bff14d10" translate="yes" xml:space="preserve">
          <source>Deferred Bootstrap</source>
          <target state="translated">推迟的Bootstrap</target>
        </trans-unit>
        <trans-unit id="74c52f18a0d6437fe8a1f390cd629d4d1f6fb607" translate="yes" xml:space="preserve">
          <source>Define an animation on the affected elements.</source>
          <target state="translated">在受影响的元素上定义一个动画。</target>
        </trans-unit>
        <trans-unit id="0d1872060c4b7a4227a5bb96f09173f2a080f3cf" translate="yes" xml:space="preserve">
          <source>Defines an animation hook that can be later used with &lt;a href=&quot;../service/%24animate&quot;&gt;$animate&lt;/a&gt; service and directives that use this service.</source>
          <target state="translated">定义一个动画钩子，以后可以与&lt;a href=&quot;../service/%24animate&quot;&gt;$ animate&lt;/a&gt;服务和使用该服务的指令一起使用。</target>
        </trans-unit>
        <trans-unit id="6cbc7c52232bf21d30296e7e147625b5fda618ff" translate="yes" xml:space="preserve">
          <source>Defines the security context for DOM properties bound by ng-prop-*.</source>
          <target state="translated">定义了由ng-prop-*绑定的DOM属性的安全上下文。</target>
        </trans-unit>
        <trans-unit id="32989cdf0067cee754e3070b85d64e05afb480b3" translate="yes" xml:space="preserve">
          <source>Delay in milliseconds.</source>
          <target state="translated">延迟时间为毫秒。</target>
        </trans-unit>
        <trans-unit id="3302581e2ec4f0f6eeb35f27969f476b33fc5b38" translate="yes" xml:space="preserve">
          <source>Delegates to &lt;a href=&quot;%24scedelegate#getTrusted.html&quot;&gt;&lt;code&gt;$sceDelegate.getTrusted&lt;/code&gt;&lt;/a&gt;. As such, takes any input, and either returns a value that's safe to use in the specified context, or throws an exception. This function is aware of trusted values created by the &lt;code&gt;trustAs&lt;/code&gt; function and its shorthands, and when contexts are appropriate, returns the unwrapped value as-is. Finally, this function can also throw when there is no way to turn &lt;code&gt;maybeTrusted&lt;/code&gt; in a safe value (e.g., no sanitization is available or possible.)</source>
          <target state="translated">代表&lt;a href=&quot;%24scedelegate#getTrusted.html&quot;&gt; &lt;code&gt;$sceDelegate.getTrusted&lt;/code&gt; &lt;/a&gt;。这样，可以接受任何输入，并返回可以在指定上下文中安全使用的值，或者引发异常。该函数知道 &lt;code&gt;trustAs&lt;/code&gt; 函数及其速记创建的可信值，并且当上下文合适时，按原样返回未包装的值。最后，当无法将 &lt;code&gt;maybeTrusted&lt;/code&gt; 为安全值时（例如，没有可用的或可能的消毒方法），此函数也可能引发。</target>
        </trans-unit>
        <trans-unit id="f25baa776bc468f235f2d35f9972a7ad7ed42aa2" translate="yes" xml:space="preserve">
          <source>Delegates to &lt;a href=&quot;%24scedelegate#trustAs.html&quot;&gt;&lt;code&gt;$sceDelegate.trustAs&lt;/code&gt;&lt;/a&gt;. As such, returns a wrapped object that represents your value, and the trust you have in its safety for the given context. AngularJS can then use that value as-is in bindings of the specified secure context. This is used in bindings for &lt;code&gt;ng-bind-html&lt;/code&gt;, &lt;code&gt;ng-include&lt;/code&gt;, and most &lt;code&gt;src&lt;/code&gt; attribute interpolations. See &lt;a href=&quot;%24sce&quot;&gt;$sce&lt;/a&gt; for strict contextual escaping.</source>
          <target state="translated">代表&lt;a href=&quot;%24scedelegate#trustAs.html&quot;&gt; &lt;code&gt;$sceDelegate.trustAs&lt;/code&gt; &lt;/a&gt;。这样，将返回一个包装的对象，该对象表示您的值，以及在给定上下文中对其安全性所具有的信任。然后，AngularJS可以在指定的安全上下文的绑定中按原样使用该值。在 &lt;code&gt;ng-bind-html&lt;/code&gt; ， &lt;code&gt;ng-include&lt;/code&gt; 和大多数 &lt;code&gt;src&lt;/code&gt; 属性插值的绑定中使用。请参阅&lt;a href=&quot;%24sce&quot;&gt;$ sce&lt;/a&gt;以获取严格的上下文转义。</target>
        </trans-unit>
        <trans-unit id="37499fbdb55b6f4f8b4ca5691cd7ea820e28edff" translate="yes" xml:space="preserve">
          <source>Demonstration of nesting</source>
          <target state="translated">筑巢示范</target>
        </trans-unit>
        <trans-unit id="0562f32dc56f5c702810cbe010068ddd38dbd69a" translate="yes" xml:space="preserve">
          <source>Dependencies</source>
          <target state="translated">Dependencies</target>
        </trans-unit>
        <trans-unit id="6e0ef472d186db187fa4eb4f242e7f5f04004e20" translate="yes" xml:space="preserve">
          <source>Dependencies and Order of execution</source>
          <target state="translated">依赖性和执行顺序</target>
        </trans-unit>
        <trans-unit id="83a3432efddfe802976a8d09a38d176492fb9172" translate="yes" xml:space="preserve">
          <source>Dependency Annotation</source>
          <target state="translated">依赖性注解</target>
        </trans-unit>
        <trans-unit id="3aefbe2f210572802298b2ad0347dc9e423d2690" translate="yes" xml:space="preserve">
          <source>Dependency Injection</source>
          <target state="translated">依赖性注入</target>
        </trans-unit>
        <trans-unit id="bac2d51482e3737a082e50bda9cc403b422810db" translate="yes" xml:space="preserve">
          <source>Dependency Injection (DI) is a software design pattern that deals with how components get hold of their dependencies.</source>
          <target state="translated">依赖注入(DI)是一种软件设计模式,它涉及到组件如何获得他们的依赖关系。</target>
        </trans-unit>
        <trans-unit id="6a2482ebf1a4a0d728e1de1670f37f634d9570f4" translate="yes" xml:space="preserve">
          <source>Dependency Injection in AngularJS</source>
          <target state="translated">AngularJS中的依赖注入</target>
        </trans-unit>
        <trans-unit id="4047c105d9cf170d730f33a2033d59df30b22746" translate="yes" xml:space="preserve">
          <source>Dependency Injection is pervasive throughout AngularJS. You can use it when defining components or when providing &lt;code&gt;run&lt;/code&gt; and &lt;code&gt;config&lt;/code&gt; blocks for a module.</source>
          <target state="translated">依赖注入遍及整个AngularJS。您可以在定义组件或为模块提供 &lt;code&gt;run&lt;/code&gt; 和 &lt;code&gt;config&lt;/code&gt; 块时使用它。</target>
        </trans-unit>
        <trans-unit id="327a55f82dc6818877a68e37b722bb7f2360b633" translate="yes" xml:space="preserve">
          <source>Deployment</source>
          <target state="translated">Deployment</target>
        </trans-unit>
        <trans-unit id="8201f6ff0e5004a4bfccdbd8144af27f2013f8eb" translate="yes" xml:space="preserve">
          <source>Deregister a control from the form.</source>
          <target state="translated">从表格中取消注册一个控件。</target>
        </trans-unit>
        <trans-unit id="2af89a89cef15b822c0d0acc729909c302781d81" translate="yes" xml:space="preserve">
          <source>Deregisters an event listener based on the event which has been associated with the provided element. This method can be used in three different ways depending on the arguments:</source>
          <target state="translated">根据与所提供的元素相关联的事件,取消注册一个事件监听器。根据参数的不同,这个方法有三种不同的使用方式。</target>
        </trans-unit>
        <trans-unit id="55f8ebc805e65b5b71ddafdae390e3be2bcd69af" translate="yes" xml:space="preserve">
          <source>Description</source>
          <target state="translated">Description</target>
        </trans-unit>
        <trans-unit id="e3f132e020453df1a9acbebf0586c70543cd8c33" translate="yes" xml:space="preserve">
          <source>Deserialized JSON string.</source>
          <target state="translated">反序列化JSON字符串。</target>
        </trans-unit>
        <trans-unit id="4cd052d554151d1dc02fd9731f9a485e9108a179" translate="yes" xml:space="preserve">
          <source>Deserialized cookie value.</source>
          <target state="translated">反序列化的cookie值。</target>
        </trans-unit>
        <trans-unit id="1a80bbcd8ea1a814fe2e5d77c9178e1038921990" translate="yes" xml:space="preserve">
          <source>Deserializes a JSON string.</source>
          <target state="translated">反序列化JSON字符串。</target>
        </trans-unit>
        <trans-unit id="c27667616e652be84cc2c1b6b99515c219d63d79" translate="yes" xml:space="preserve">
          <source>Design Principles of AngularJS (video)</source>
          <target state="translated">AngularJS的设计原理(视频</target>
        </trans-unit>
        <trans-unit id="dfc06cd40e8bbe5fdfe5911a99ffee939388a01e" translate="yes" xml:space="preserve">
          <source>Destination into which the source is copied. If provided, must be of the same type as &lt;code&gt;source&lt;/code&gt;.</source>
          <target state="translated">源复制到的目标。如果提供，则必须与 &lt;code&gt;source&lt;/code&gt; 具有相同的类型。</target>
        </trans-unit>
        <trans-unit id="888c51c1c5c27c5b36b8738901ae380a900d1853" translate="yes" xml:space="preserve">
          <source>Destination object.</source>
          <target state="translated">目的地对象:</target>
        </trans-unit>
        <trans-unit id="a1e2c0b92bdd88f0fcb0c37a3c357ef7f0dfaccb" translate="yes" xml:space="preserve">
          <source>Destroys the &lt;a href=&quot;%24cachefactory.cache&quot;&gt;Cache&lt;/a&gt; object entirely, removing it from the &lt;a href=&quot;../service/%24cachefactory&quot;&gt;$cacheFactory&lt;/a&gt; set.</source>
          <target state="translated">完全销毁&lt;a href=&quot;%24cachefactory.cache&quot;&gt;Cache&lt;/a&gt;对象，将其从&lt;a href=&quot;../service/%24cachefactory&quot;&gt;$ cacheFactory&lt;/a&gt;集中删除。</target>
        </trans-unit>
        <trans-unit id="dc3decbb93847518f1a049dcf49d0d7c6560bcc6" translate="yes" xml:space="preserve">
          <source>Details</source>
          <target state="translated">Details</target>
        </trans-unit>
        <trans-unit id="3d2a0d7f87ba443d5d9d80e16047385ccffb8fd6" translate="yes" xml:space="preserve">
          <source>Determines if a reference is a &lt;code&gt;Function&lt;/code&gt;.</source>
          <target state="translated">确定引用是否为 &lt;code&gt;Function&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="4113c903a447369d1069839fa1070f046a4c3170" translate="yes" xml:space="preserve">
          <source>Determines if a reference is a &lt;code&gt;Number&lt;/code&gt;.</source>
          <target state="translated">确定引用是否为 &lt;code&gt;Number&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="e163b7686cbd75d6ac0afa43f59a2a1afdecef9a" translate="yes" xml:space="preserve">
          <source>Determines if a reference is a &lt;code&gt;String&lt;/code&gt;.</source>
          <target state="translated">确定引用是否为 &lt;code&gt;String&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="1cf350f5a8069497935175567e278f51b713aa42" translate="yes" xml:space="preserve">
          <source>Determines if a reference is a DOM element (or wrapped jQuery element).</source>
          <target state="translated">确定一个引用是否是一个DOM元素(或封装的jQuery元素)。</target>
        </trans-unit>
        <trans-unit id="d525fdf8b5a9d0d2c0f715b9068dd493ccd6f25b" translate="yes" xml:space="preserve">
          <source>Determines if a reference is an &lt;code&gt;Array&lt;/code&gt;.</source>
          <target state="translated">确定引用是否为 &lt;code&gt;Array&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="b2be2458af6292b2bcac1469ec435b958dd083b5" translate="yes" xml:space="preserve">
          <source>Determines if a reference is an &lt;code&gt;Object&lt;/code&gt;. Unlike &lt;code&gt;typeof&lt;/code&gt; in JavaScript, &lt;code&gt;null&lt;/code&gt;s are not considered to be objects. Note that JavaScript arrays are objects.</source>
          <target state="translated">确定引用是否为 &lt;code&gt;Object&lt;/code&gt; 。与JavaScript中的 &lt;code&gt;typeof&lt;/code&gt; 不同， &lt;code&gt;null&lt;/code&gt; 不被视为对象。请注意，JavaScript数组是对象。</target>
        </trans-unit>
        <trans-unit id="f1973ee38e2820392df6987b25ac623a3df111fa" translate="yes" xml:space="preserve">
          <source>Determines if a reference is defined.</source>
          <target state="translated">确定是否定义了一个引用。</target>
        </trans-unit>
        <trans-unit id="5acbddde98e2e5498cdcbbd393b69655ebfab3fd" translate="yes" xml:space="preserve">
          <source>Determines if a reference is undefined.</source>
          <target state="translated">确定一个引用是否未定义。</target>
        </trans-unit>
        <trans-unit id="f3d374285cfc5534564499c4ffd11134b73c0553" translate="yes" xml:space="preserve">
          <source>Determines if a value is a date.</source>
          <target state="translated">确定一个值是否为日期。</target>
        </trans-unit>
        <trans-unit id="03fe2f186b89e2d26eec4a0369aec723c0e6b2e2" translate="yes" xml:space="preserve">
          <source>Determines if two objects or two values are equivalent. Supports value types, regular expressions, arrays and objects.</source>
          <target state="translated">判断两个对象或两个值是否相等。支持值类型、正则表达式、数组和对象。</target>
        </trans-unit>
        <trans-unit id="9e4bd027f55486bc01eb5c3e7f889479826c89f5" translate="yes" xml:space="preserve">
          <source>Develop</source>
          <target state="translated">Develop</target>
        </trans-unit>
        <trans-unit id="45e199c34f2e47d26bd6cf3b0bc418229f9353d7" translate="yes" xml:space="preserve">
          <source>Developer Guide</source>
          <target state="translated">开发者指南</target>
        </trans-unit>
        <trans-unit id="8b51dbd8f299bc7c073294b641b3f766d5ad2466" translate="yes" xml:space="preserve">
          <source>Didn't find what you're looking for here? Check out the &lt;a href=&quot;guide/external-resources&quot;&gt;External AngularJS resources guide&lt;/a&gt;.</source>
          <target state="translated">找不到您想要的东西吗？查阅《&lt;a href=&quot;guide/external-resources&quot;&gt;外部AngularJS》资源指南&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="2886baaf05b749277028afeb9b687e96ffae3fa3" translate="yes" xml:space="preserve">
          <source>Differences between Kris Kowal's Q and $q</source>
          <target state="translated">Kris Kowal的Q和$q之间的差异。</target>
        </trans-unit>
        <trans-unit id="0a4e32e999a601265a21ab8df0f84e0f0c01e628" translate="yes" xml:space="preserve">
          <source>Differences from the ICU MessageFormat syntax</source>
          <target state="translated">与ICU MessageFormat语法的区别</target>
        </trans-unit>
        <trans-unit id="82ee6eee6c53c6516212864425aaba8fdf0037c2" translate="yes" xml:space="preserve">
          <source>Different DOM between &lt;code&gt;template&lt;/code&gt; and &lt;code&gt;templateUrl&lt;/code&gt;: &lt;a href=&quot;https://github.com/angular/angular.js/issues/14326&quot;&gt;#10612&lt;/a&gt;</source>
          <target state="translated">&lt;code&gt;template&lt;/code&gt; 之间的不同DOM和 &lt;code&gt;templateUrl&lt;/code&gt; ：&lt;a href=&quot;https://github.com/angular/angular.js/issues/14326&quot;&gt;＃10612&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="164e0b79063f11a2936cf830fb48b8c7054cc118" translate="yes" xml:space="preserve">
          <source>Directive</source>
          <target state="translated">Directive</target>
        </trans-unit>
        <trans-unit id="fda754562558210f994489b54b2697a96dc73fa2" translate="yes" xml:space="preserve">
          <source>Directive Definition Object</source>
          <target state="translated">指令定义对象</target>
        </trans-unit>
        <trans-unit id="e9cd5ca17a7c95f80bd097f0322c1ccdcc4c3d5b" translate="yes" xml:space="preserve">
          <source>Directive Info</source>
          <target state="translated">指令信息</target>
        </trans-unit>
        <trans-unit id="67e1beffb6df3ce747606244ee286332d2ea20a6" translate="yes" xml:space="preserve">
          <source>Directive Support</source>
          <target state="translated">指令支持</target>
        </trans-unit>
        <trans-unit id="1f833a7af0a6aaa31ef34696128cfbeafe3eed41" translate="yes" xml:space="preserve">
          <source>Directive components in ng</source>
          <target state="translated">ng中的指令组件</target>
        </trans-unit>
        <trans-unit id="4cc0bdd0eee78ccef5ca412ee771d3f81c05f4a4" translate="yes" xml:space="preserve">
          <source>Directive components in ngAnimate</source>
          <target state="translated">ngAnimate中的指令组件</target>
        </trans-unit>
        <trans-unit id="844df4f4bdaa7d4d1ccd12b056cbe1adfcc021cb" translate="yes" xml:space="preserve">
          <source>Directive components in ngComponentRouter</source>
          <target state="translated">ngComponentRouter中的指令组件。</target>
        </trans-unit>
        <trans-unit id="de98d7620ad6306ead111be196ed86e3671c7290" translate="yes" xml:space="preserve">
          <source>Directive components in ngMessages</source>
          <target state="translated">ngMessages中的指令组件</target>
        </trans-unit>
        <trans-unit id="3e59659ae9dccbcaae81c53c6bc245083968f924" translate="yes" xml:space="preserve">
          <source>Directive components in ngRoute</source>
          <target state="translated">ngRoute中的指令组件</target>
        </trans-unit>
        <trans-unit id="91447be933b3e2599ebeeeffc119c8212eeed0af" translate="yes" xml:space="preserve">
          <source>Directive components in ngTouch</source>
          <target state="translated">ngTouch中的指令组件</target>
        </trans-unit>
        <trans-unit id="d6115f4adc06b0e052bc4ff5724424c7b78aeddd" translate="yes" xml:space="preserve">
          <source>Directive controllers can provide the following methods that are called by AngularJS at points in the life-cycle of the directive:</source>
          <target state="translated">指令控制器可以提供以下方法,这些方法在指令的生命周期中的各个点被AngularJS调用。</target>
        </trans-unit>
        <trans-unit id="302daa750770cb865e5e869c5d3fb8ea941e26e5" translate="yes" xml:space="preserve">
          <source>Directive name, or an object map of directives where the keys are the names and the values are the factories.</source>
          <target state="translated">指令名称,或指令的对象图,其中键是名称,值是工厂。</target>
        </trans-unit>
        <trans-unit id="7490be6dee2947f333e03a7200032b150a8f8592" translate="yes" xml:space="preserve">
          <source>Directive that instantiates &lt;a href=&quot;../type/form.formcontroller&quot;&gt;FormController&lt;/a&gt;.</source>
          <target state="translated">实例化&lt;a href=&quot;../type/form.formcontroller&quot;&gt;FormController的&lt;/a&gt;指令。</target>
        </trans-unit>
        <trans-unit id="d24b0ceb64605261d7559cd1d1e867e4d882600f" translate="yes" xml:space="preserve">
          <source>Directive that instantiates &lt;a href=&quot;type/form.formcontroller&quot;&gt;FormController&lt;/a&gt;.</source>
          <target state="translated">实例化的指令 &lt;a href=&quot;type/form.formcontroller&quot;&gt;FormController的&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="8735ba9d320dcda668a0816d217511ecea07ecf0" translate="yes" xml:space="preserve">
          <source>Directive that marks the insertion point for the transcluded DOM of the nearest parent directive that uses transclusion.</source>
          <target state="translated">标记使用transclusion的最近的父指令的transcluded DOM的插入点的指令。</target>
        </trans-unit>
        <trans-unit id="746cc62cda06834c2b42e5ffe56a1badbb306cd7" translate="yes" xml:space="preserve">
          <source>Directive types</source>
          <target state="translated">指令类型</target>
        </trans-unit>
        <trans-unit id="28c82071e940360118b0611d5c912a71c32a0100" translate="yes" xml:space="preserve">
          <source>Directives</source>
          <target state="translated">Directives</target>
        </trans-unit>
        <trans-unit id="336c7042caff79e8e52e079db85c30958078de48" translate="yes" xml:space="preserve">
          <source>Directives are not deduplicated before compilation</source>
          <target state="translated">指令在编译前没有被重复复制。</target>
        </trans-unit>
        <trans-unit id="0050d5ca31968a90a87b0b2b5fe12a4a6f033632" translate="yes" xml:space="preserve">
          <source>Directives are not re-compiled</source>
          <target state="translated">指令不会被重新编译</target>
        </trans-unit>
        <trans-unit id="8d67d16379fb0c5fb472d4b6392bed6f0a88bbfa" translate="yes" xml:space="preserve">
          <source>Directives can require the controllers of other directives to enable communication between each other. This can be achieved in a component by providing an object mapping for the &lt;code&gt;require&lt;/code&gt; property. The object keys specify the property names under which the required controllers (object values) will be bound to the requiring component's controller.</source>
          <target state="translated">指令可能需要其他指令的控制器来实现彼此之间的通信。这可以通过为组件提供对象映射来在组件中实现。 &lt;code&gt;require&lt;/code&gt; 属性。对象键指定属性名称，在这些属性名称下，所需的控制器（对象值）将绑定到所需组件的控制器。</target>
        </trans-unit>
        <trans-unit id="b5ec19ceda57dbf701f9e59456ca25e9c7b1a674" translate="yes" xml:space="preserve">
          <source>Directives in AngularJS are responsible for encapsulating complex functionality within custom HTML tags, attributes, classes or comments. Unit tests are very important for directives because the components you create with directives may be used throughout your application and in many different contexts.</source>
          <target state="translated">AngularJS中的指令负责将复杂的功能封装在自定义HTML标签、属性、类或注释中。单元测试对于指令来说非常重要,因为您使用指令创建的组件可能会在整个应用程序中和许多不同的上下文中使用。</target>
        </trans-unit>
        <trans-unit id="bdc211594d3e011463f460b1b6ff16a3553721bd" translate="yes" xml:space="preserve">
          <source>Directives like &lt;a href=&quot;../api/ng/directive/ngclick&quot;&gt;&lt;code&gt;ngClick&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../api/ng/directive/ngfocus&quot;&gt;&lt;code&gt;ngFocus&lt;/code&gt;&lt;/a&gt; expose a &lt;code&gt;$event&lt;/code&gt; object within the scope of that expression. The object is an instance of a &lt;a href=&quot;http://api.jquery.com/category/events/event-object/&quot;&gt;jQuery Event Object&lt;/a&gt; when jQuery is present or a similar jqLite object.</source>
          <target state="translated">&lt;a href=&quot;../api/ng/directive/ngclick&quot;&gt; &lt;code&gt;ngClick&lt;/code&gt; &lt;/a&gt;和&lt;a href=&quot;../api/ng/directive/ngfocus&quot;&gt; &lt;code&gt;ngFocus&lt;/code&gt; &lt;/a&gt;等指令公开了 &lt;code&gt;$event&lt;/code&gt; 在该表达式的范围内对象。当存在jQuery或类似的jqLit​​e对象时，该对象是&lt;a href=&quot;http://api.jquery.com/category/events/event-object/&quot;&gt;jQuery事件对象&lt;/a&gt;的实例。</target>
        </trans-unit>
        <trans-unit id="6434913d2a02f2df51c8dfef0163eab8e24c7df1" translate="yes" xml:space="preserve">
          <source>Directives often have a &lt;strong&gt;link function&lt;/strong&gt;. A link function allows the directive to register listeners to the specific cloned DOM element instance as well as to copy content into the DOM from the scope.</source>
          <target state="translated">指令通常有一个 &lt;strong&gt;链接功能&lt;/strong&gt;。链接功能允许指令将侦听器注册到特定的克隆DOM元素实例，以及将内容从作用域复制到DOM中。</target>
        </trans-unit>
        <trans-unit id="033d63aa44ddfb57d03dea3272e0203cf62b3238" translate="yes" xml:space="preserve">
          <source>Directives that Create Scopes</source>
          <target state="translated">创建作用域的指令</target>
        </trans-unit>
        <trans-unit id="a74321a33161090e50af4b36d898258f47549ad8" translate="yes" xml:space="preserve">
          <source>Directives that use transclusion are treated specially by the compiler. Before their compile function is called, the contents of the directive's element are removed from the element and provided via a transclusion function. The directive's template is then appended to the directive's element, to which it can then insert the transcluded content into its template.</source>
          <target state="translated">使用transclusion的指令会被编译器特殊处理。在调用它们的编译函数之前,指令的元素的内容被从元素中删除,并通过transclusion函数提供。然后将指令的模板附加到指令的元素上,再将转包容的内容插入到其模板中。</target>
        </trans-unit>
        <trans-unit id="4bdab4ccc71e22e8ec90abeea9ccfd1df46ff179" translate="yes" xml:space="preserve">
          <source>Directives that want to modify the DOM typically use the &lt;code&gt;link&lt;/code&gt; option to register DOM listeners as well as update the DOM. It is executed after the template has been cloned and is where directive logic will be put.</source>
          <target state="translated">想要修改DOM的指令通常使用 &lt;code&gt;link&lt;/code&gt; 选项来注册DOM侦听器以及更新DOM。它是在克隆模板之后执行的，并且将在其中放置指令逻辑。</target>
        </trans-unit>
        <trans-unit id="e5140a8ef3a9bc2683f73052c7fd79865733a8ce" translate="yes" xml:space="preserve">
          <source>Dirty checking can be done with three strategies: By reference, by collection contents, and by value. The strategies differ in the kinds of changes they detect, and in their performance characteristics.</source>
          <target state="translated">查脏可以用三种策略。通过参考,通过集合内容,和通过价值。这些策略在检测变化的种类和性能特征上有所不同。</target>
        </trans-unit>
        <trans-unit id="f7eed9ee6c74c9630f8e771d832431d6115feaf3" translate="yes" xml:space="preserve">
          <source>Dirty checking the scope for property changes is a common operation in AngularJS and for this reason the dirty checking function must be efficient. Care should be taken that the dirty checking function does not do any DOM access, as DOM access is orders of magnitude slower than property access on JavaScript object.</source>
          <target state="translated">对属性变化的作用域进行脏检查是AngularJS中常见的操作,为此脏检查函数必须高效。需要注意的是,dirty检查函数不做任何DOM访问,因为DOM访问比JavaScript对象上的属性访问要慢几个数量级。</target>
        </trans-unit>
        <trans-unit id="14f2ccf9e7d630a13a9a51eb1a154be01aba9e61" translate="yes" xml:space="preserve">
          <source>Disable comment and css class directives</source>
          <target state="translated">禁用注释和css类指令</target>
        </trans-unit>
        <trans-unit id="17f67c438b25665408ced77a0f973ff152910ec2" translate="yes" xml:space="preserve">
          <source>Disabling Debug Data</source>
          <target state="translated">禁用调试数据</target>
        </trans-unit>
        <trans-unit id="4c52842f01d8ff2a00e9728305157459d5a938ec" translate="yes" xml:space="preserve">
          <source>Disabling Specific Attributes</source>
          <target state="translated">禁用特定属性</target>
        </trans-unit>
        <trans-unit id="de84716cee60c5cb4c6d2f6f25d3ac55ddcd7e00" translate="yes" xml:space="preserve">
          <source>Disabling attributes</source>
          <target state="translated">禁用属性</target>
        </trans-unit>
        <trans-unit id="20ef6ef888eb023c4461090d2f38a7acea56c9fa" translate="yes" xml:space="preserve">
          <source>Disabling auto-escaping is extremely dangerous, it usually creates a Cross Site Scripting (XSS) vulnerability in your application.</source>
          <target state="translated">禁用自动逃逸是非常危险的,它通常会在你的应用程序中创建一个跨站点脚本(XSS)漏洞。</target>
        </trans-unit>
        <trans-unit id="1f51a2a3fb5aa9f0b2bf05d11e6cc36721611e66" translate="yes" xml:space="preserve">
          <source>Disabling ngAria on Specific Elements</source>
          <target state="translated">在特定元素上禁用ngAria</target>
        </trans-unit>
        <trans-unit id="e408de586a7e2622fd333d5e79f8788540adc05a" translate="yes" xml:space="preserve">
          <source>Disallow argument name annotation inference.</source>
          <target state="translated">不允许参数名注解推理。</target>
        </trans-unit>
        <trans-unit id="85016ac7fabd0f269f3323d663fd847b3d8b64a4" translate="yes" xml:space="preserve">
          <source>Discuss</source>
          <target state="translated">Discuss</target>
        </trans-unit>
        <trans-unit id="22d9c848e577ae1fec59456eee03bc9ea644ba34" translate="yes" xml:space="preserve">
          <source>Dispatches an event &lt;code&gt;name&lt;/code&gt; downwards to all child scopes (and their children) notifying the registered &lt;a href=&quot;%24rootscope.scope#%24on.html&quot;&gt;&lt;code&gt;$rootScope.Scope&lt;/code&gt;&lt;/a&gt; listeners.</source>
          <target state="translated">向所有子范围（及其子范围）向下分配事件 &lt;code&gt;name&lt;/code&gt; ，通知已注册的&lt;a href=&quot;%24rootscope.scope#%24on.html&quot;&gt; &lt;code&gt;$rootScope.Scope&lt;/code&gt; &lt;/a&gt;侦听器。</target>
        </trans-unit>
        <trans-unit id="522ab92da5006452539dc8ace74860c58110db39" translate="yes" xml:space="preserve">
          <source>Dispatches an event &lt;code&gt;name&lt;/code&gt; upwards through the scope hierarchy notifying the registered &lt;a href=&quot;%24rootscope.scope#%24on.html&quot;&gt;&lt;code&gt;$rootScope.Scope&lt;/code&gt;&lt;/a&gt; listeners.</source>
          <target state="translated">通过作用域层次结构向上调度事件 &lt;code&gt;name&lt;/code&gt; 通知已注册的&lt;a href=&quot;%24rootscope.scope#%24on.html&quot;&gt; &lt;code&gt;$rootScope.Scope&lt;/code&gt; &lt;/a&gt;侦听器。</target>
        </trans-unit>
        <trans-unit id="d77fffba57484870bc54fe43094d3c654c48c5c8" translate="yes" xml:space="preserve">
          <source>Displaying a default message</source>
          <target state="translated">显示默认信息</target>
        </trans-unit>
        <trans-unit id="6a1d6df1044462482aefb148d802e6a902833016" translate="yes" xml:space="preserve">
          <source>Displaying multiple messages at the same time</source>
          <target state="translated">同时显示多个信息</target>
        </trans-unit>
        <trans-unit id="8fcd11662cedbe647c35df6e222817acbf87bac8" translate="yes" xml:space="preserve">
          <source>Do not bootstrap your app on an element with a directive that uses &lt;a href=&quot;../api/ng/service/%24compile#transclusion.html&quot;&gt;transclusion&lt;/a&gt;, such as &lt;a href=&quot;../api/ng/directive/ngif&quot;&gt;&lt;code&gt;ngIf&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../api/ng/directive/nginclude&quot;&gt;&lt;code&gt;ngInclude&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../api/ngroute/directive/ngview&quot;&gt;&lt;code&gt;ngView&lt;/code&gt;&lt;/a&gt;. Doing this misplaces the app &lt;a href=&quot;../api/ng/service/%24rootelement&quot;&gt;&lt;code&gt;$rootElement&lt;/code&gt;&lt;/a&gt; and the app's &lt;a href=&quot;../api/auto/service/%24injector&quot;&gt;injector&lt;/a&gt;, causing animations to stop working and making the injector inaccessible from outside the app.</source>
          <target state="translated">不要将应用程序引导到使用&lt;a href=&quot;../api/ng/service/%24compile#transclusion.html&quot;&gt;包含&lt;/a&gt;&lt;a href=&quot;../api/ng/directive/ngif&quot;&gt; &lt;code&gt;ngIf&lt;/code&gt; &lt;/a&gt;指令的元素（例如ngIf，&lt;a href=&quot;../api/ng/directive/nginclude&quot;&gt; &lt;code&gt;ngInclude&lt;/code&gt; &lt;/a&gt;和&lt;a href=&quot;../api/ngroute/directive/ngview&quot;&gt; &lt;code&gt;ngView&lt;/code&gt; )上&lt;/a&gt;。这样做会放错应用程序&lt;a href=&quot;../api/ng/service/%24rootelement&quot;&gt; &lt;code&gt;$rootElement&lt;/code&gt; &lt;/a&gt;和应用程序的&lt;a href=&quot;../api/auto/service/%24injector&quot;&gt;注射器的位置&lt;/a&gt;，从而导致动画停止工作并使注射器无法从应用程序外部访问。</target>
        </trans-unit>
        <trans-unit id="734e169c6f35eeaf3a86656e7f1c0d72ba2de6cc" translate="yes" xml:space="preserve">
          <source>Do not mix client and server templates</source>
          <target state="translated">不要混合客户端和服务器模板</target>
        </trans-unit>
        <trans-unit id="19e892e136c9dc029952e0d0040cde8bbcc0893d" translate="yes" xml:space="preserve">
          <source>Do not run user input through &lt;code&gt;$scope.$eval&lt;/code&gt; (or any of the other expression parsing functions listed above)</source>
          <target state="translated">不要通过 &lt;code&gt;$scope.$eval&lt;/code&gt; （或上面列出的任何其他其他表达式解析函数）运行用户输入</target>
        </trans-unit>
        <trans-unit id="a1222a753c501c7c58fabe9476767ef0ea0a4fda" translate="yes" xml:space="preserve">
          <source>Do not use a directive that uses &lt;a href=&quot;../service/%24compile#transclusion.html&quot;&gt;transclusion&lt;/a&gt; on the same element as &lt;code&gt;ngApp&lt;/code&gt;. This includes directives such as &lt;a href=&quot;ngif&quot;&gt;&lt;code&gt;ngIf&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;nginclude&quot;&gt;&lt;code&gt;ngInclude&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../../ngroute/directive/ngview&quot;&gt;&lt;code&gt;ngView&lt;/code&gt;&lt;/a&gt;. Doing this misplaces the app &lt;a href=&quot;../service/%24rootelement&quot;&gt;&lt;code&gt;$rootElement&lt;/code&gt;&lt;/a&gt; and the app's &lt;a href=&quot;../../auto/service/%24injector&quot;&gt;injector&lt;/a&gt;, causing animations to stop working and making the injector inaccessible from outside the app.</source>
          <target state="translated">请勿使用在与 &lt;code&gt;ngApp&lt;/code&gt; 相同的元素上使用&lt;a href=&quot;../service/%24compile#transclusion.html&quot;&gt;包含&lt;/a&gt;的指令。这包括&lt;a href=&quot;ngif&quot;&gt; &lt;code&gt;ngIf&lt;/code&gt; &lt;/a&gt;，&lt;a href=&quot;nginclude&quot;&gt; &lt;code&gt;ngInclude&lt;/code&gt; &lt;/a&gt;和&lt;a href=&quot;../../ngroute/directive/ngview&quot;&gt; &lt;code&gt;ngView&lt;/code&gt; &lt;/a&gt;等指令。这样做会放错应用程序&lt;a href=&quot;../service/%24rootelement&quot;&gt; &lt;code&gt;$rootElement&lt;/code&gt; &lt;/a&gt;和应用程序的&lt;a href=&quot;../../auto/service/%24injector&quot;&gt;注射器的位置&lt;/a&gt;，从而导致动画停止工作并使注射器无法从应用程序外部访问。</target>
        </trans-unit>
        <trans-unit id="a6b92442e50d6cf9ef2638015c4dcbb08c6765ea" translate="yes" xml:space="preserve">
          <source>Do not use controllers to:</source>
          <target state="translated">不要用控制器来。</target>
        </trans-unit>
        <trans-unit id="c4e0abe2eab7806b524f5f539063aa767372787f" translate="yes" xml:space="preserve">
          <source>Do not use user input to generate templates dynamically</source>
          <target state="translated">不要使用用户输入来动态生成模板。</target>
        </trans-unit>
        <trans-unit id="cd9568f76d3ffc3f4943b3b399abc721db51ae70" translate="yes" xml:space="preserve">
          <source>Does this mean that CSS and JS animations cannot be used together? Do JS-based animations always have higher priority? We can make up for the lack of CSS animations by using the &lt;code&gt;$animateCss&lt;/code&gt; service to trigger our own tweaked-out, CSS-based animations directly from our own JS-based animation code:</source>
          <target state="translated">这是否意味着CSS和JS动画不能同时使用？基于JS的动画是否总是具有更高的优先级？我们可以通过使用 &lt;code&gt;$animateCss&lt;/code&gt; 服务直接从我们自己的基于JS的动画代码中触发经过调整的基于CSS的动画来弥补CSS动画的不足：</target>
        </trans-unit>
        <trans-unit id="13dee9f67e174a94349cf987cddd8a72fc3af4b8" translate="yes" xml:space="preserve">
          <source>Double Compilation</source>
          <target state="translated">双合集</target>
        </trans-unit>
        <trans-unit id="46cf9c3355e52010c4d12ff1852420f2537d0b53" translate="yes" xml:space="preserve">
          <source>Double Compilation, and how to avoid it</source>
          <target state="translated">双重汇编,以及如何避免它</target>
        </trans-unit>
        <trans-unit id="c28ddab1c668724f14783f5d982dad57dfddbb6f" translate="yes" xml:space="preserve">
          <source>Double compilation occurs when an already compiled part of the DOM gets compiled again. This is an undesired effect and can lead to misbehaving directives, performance issues, and memory leaks. A common scenario where this happens is a directive that calls &lt;code&gt;$compile&lt;/code&gt; in a directive link function on the directive element. In the following &lt;strong&gt;faulty example&lt;/strong&gt;, a directive adds a mouseover behavior to a button with &lt;code&gt;ngClick&lt;/code&gt; on it:</source>
          <target state="translated">当DOM的一个已编译部分再次被编译时，就会发生双重编译。这是不希望的结果，并可能导致指令行为不当，性能问题和内存泄漏。发生这种情况的常见情况是在指令元素上的指令链接函数中调用 &lt;code&gt;$compile&lt;/code&gt; 的指令。在以下&lt;strong&gt;错误示例中&lt;/strong&gt;，指令将鼠标悬停行为添加到带有 &lt;code&gt;ngClick&lt;/code&gt; 的按钮上：</target>
        </trans-unit>
        <trans-unit id="2fe3ba6f7aec148d2830c036bfffa7e3396f913f" translate="yes" xml:space="preserve">
          <source>Double compilation occurs when an already compiled part of the DOM gets compiled again. This is an undesired effect and can lead to misbehaving directives, performance issues, and memory leaks. Refer to the Compiler Guide &lt;a href=&quot;../../../guide/compiler#double-compilation-and-how-to-avoid-it.html&quot;&gt;section on double compilation&lt;/a&gt; for an in-depth explanation and ways to avoid it.</source>
          <target state="translated">当DOM的一个已编译部分再次被编译时，就会发生双重编译。这是不希望的结果，并可能导致指令行为不当，性能问题和内存泄漏。有关详细说明和避免方法，请参阅&lt;a href=&quot;../../../guide/compiler#double-compilation-and-how-to-avoid-it.html&quot;&gt;双重编译&lt;/a&gt;的《编译器指南》部分。</target>
        </trans-unit>
        <trans-unit id="b56ef3a0351d8185f34ae1615da191674f9fba40" translate="yes" xml:space="preserve">
          <source>Double compilation should therefore be avoided. In the above example, only the new element should be compiled:</source>
          <target state="translated">因此,应避免重复编译。在上面的例子中,只有新的元素应该被编译。</target>
        </trans-unit>
        <trans-unit id="a479c9c34e878d07b4d67a73a48f432ad7dc53c8" translate="yes" xml:space="preserve">
          <source>Download</source>
          <target state="translated">Download</target>
        </trans-unit>
        <trans-unit id="6591272ff03229f7f47a34cd608993dac9711a87" translate="yes" xml:space="preserve">
          <source>Due to the differences in change-detection, you may get many more calls to &lt;code&gt;$doCheck&lt;/code&gt; in AngularJS than you would to &lt;code&gt;ngDoCheck&lt;/code&gt; in Angular.</source>
          <target state="translated">由于更改检测的差异，在AngularJS中对 &lt;code&gt;$doCheck&lt;/code&gt; 调用可能比在Angular中对 &lt;code&gt;ngDoCheck&lt;/code&gt; 的调用更多。</target>
        </trans-unit>
        <trans-unit id="690ee2fd00601f8dae9435fe866cd934f63d5b6f" translate="yes" xml:space="preserve">
          <source>During a property comparison, properties of &lt;code&gt;function&lt;/code&gt; type and properties with names that begin with &lt;code&gt;$&lt;/code&gt; are ignored.</source>
          <target state="translated">在属性比较期间，将忽略 &lt;code&gt;function&lt;/code&gt; 类型的属性和名称以 &lt;code&gt;$&lt;/code&gt; 开头的属性。</target>
        </trans-unit>
        <trans-unit id="d17774f2703ffb3b3466892ed055619a54364b52" translate="yes" xml:space="preserve">
          <source>During application bootstrap, before AngularJS goes off creating all services, it configures and instantiates all providers. We call this the configuration phase of the application life-cycle. During this phase, services aren't accessible because they haven't been created yet.</source>
          <target state="translated">在应用引导期间,在AngularJS去创建所有服务之前,它会配置和实例化所有的提供者。我们将此称为应用生命周期的配置阶段。在这个阶段,服务是无法访问的,因为它们还没有被创建。</target>
        </trans-unit>
        <trans-unit id="291ab189948f99ffa87d61aff0be223080b9841a" translate="yes" xml:space="preserve">
          <source>During template linking, directives register &lt;a href=&quot;../api/ng/type/%24rootscope.scope#%24watch.html&quot;&gt;watches&lt;/a&gt; on the scope. These watches will be used to propagate model values to the DOM.</source>
          <target state="translated">在模板链接期间，伪指令在作用域上注册&lt;a href=&quot;../api/ng/type/%24rootscope.scope#%24watch.html&quot;&gt;监视&lt;/a&gt;。这些监视将用于将模型值传播到DOM。</target>
        </trans-unit>
        <trans-unit id="45531da9cbed4e6e4ee65fe4cf35c23297ce9dea" translate="yes" xml:space="preserve">
          <source>During testing this implementation is swapped with &lt;a href=&quot;../../ngmock/service/%24httpbackend&quot;&gt;mock $httpBackend&lt;/a&gt; which can be trained with responses.</source>
          <target state="translated">在测试过程中，此实现与&lt;a href=&quot;../../ngmock/service/%24httpbackend&quot;&gt;模拟$ httpBackend&lt;/a&gt;交换，后者可以通过响应进行训练。</target>
        </trans-unit>
        <trans-unit id="84cba5a8d27805fd2532e7744606781e2d24ef87" translate="yes" xml:space="preserve">
          <source>During the compilation phase, the &lt;a href=&quot;compiler&quot;&gt;compiler&lt;/a&gt; matches &lt;a href=&quot;../api/ng/provider/%24compileprovider#directive.html&quot;&gt;directives&lt;/a&gt; against the DOM template. The directives usually fall into one of two categories:</source>
          <target state="translated">在编译阶段，&lt;a href=&quot;compiler&quot;&gt;编译器&lt;/a&gt;将&lt;a href=&quot;../api/ng/provider/%24compileprovider#directive.html&quot;&gt;指令&lt;/a&gt;与DOM模板进行匹配。指令通常分为两类之一：</target>
        </trans-unit>
        <trans-unit id="552c6c3ebea05d341417ee364fae8ea2af019067" translate="yes" xml:space="preserve">
          <source>During the compilation phase:</source>
          <target state="translated">在汇编阶段:</target>
        </trans-unit>
        <trans-unit id="a493125bd9c880c4ca97eb29a7017d3a9e3e64ce" translate="yes" xml:space="preserve">
          <source>During the compilation process the &lt;a href=&quot;../api/ng/service/%24compile&quot;&gt;compiler&lt;/a&gt; uses the &lt;a href=&quot;../api/ng/service/%24interpolate&quot;&gt;$interpolate&lt;/a&gt; service to see if text nodes and element attributes contain interpolation markup with embedded expressions.</source>
          <target state="translated">在编译过程中，&lt;a href=&quot;../api/ng/service/%24compile&quot;&gt;编译器&lt;/a&gt;使用&lt;a href=&quot;../api/ng/service/%24interpolate&quot;&gt;$ interpolate&lt;/a&gt;服务查看文本节点和元素属性是否包含带有嵌入式表达式的插值标记。</target>
        </trans-unit>
        <trans-unit id="6439c34c3206ba861da0f9bf5fc84e0b928b58c7" translate="yes" xml:space="preserve">
          <source>During the config: &lt;a href=&quot;../api/ng/provider/%24animateprovider#classNameFilter.html&quot;&gt;$animateProvider.classNameFilter()&lt;/a&gt;</source>
          <target state="translated">在配置过程中：&lt;a href=&quot;../api/ng/provider/%24animateprovider#classNameFilter.html&quot;&gt;$ animateProvider.classNameFilter（）&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="60166faf8b960cb144a5a5dfe16f5efce800297f" translate="yes" xml:space="preserve">
          <source>During the config: &lt;a href=&quot;../api/ng/provider/%24animateprovider#customFilter.html&quot;&gt;$animateProvider.customFilter()&lt;/a&gt;</source>
          <target state="translated">在配置过程中：&lt;a href=&quot;../api/ng/provider/%24animateprovider#customFilter.html&quot;&gt;$ animateProvider.customFilter（）&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="88d16957e61a3abc0b2789679717c815f5765897" translate="yes" xml:space="preserve">
          <source>During the runtime phase:</source>
          <target state="translated">在运行阶段。</target>
        </trans-unit>
        <trans-unit id="ac637ea8f1b2151f1dfdc40a4954ea8a48a7d7d3" translate="yes" xml:space="preserve">
          <source>During unit testing, we want our unit tests to run quickly and have no external dependencies so we don&amp;rsquo;t want to send &lt;a href=&quot;https://developer.mozilla.org/en/xmlhttprequest&quot;&gt;XHR&lt;/a&gt; or &lt;a href=&quot;http://en.wikipedia.org/wiki/JSONP&quot;&gt;JSONP&lt;/a&gt; requests to a real server. All we really need is to verify whether a certain request has been sent or not, or alternatively just let the application make requests, respond with pre-trained responses and assert that the end result is what we expect it to be.</source>
          <target state="translated">在单元测试期间，我们希望单元测试能够快速运行并且没有外部依赖性，因此我们不想将&lt;a href=&quot;https://developer.mozilla.org/en/xmlhttprequest&quot;&gt;XHR&lt;/a&gt;或&lt;a href=&quot;http://en.wikipedia.org/wiki/JSONP&quot;&gt;JSONP&lt;/a&gt;请求发送到真实服务器。我们真正需要做的只是验证是否已发送某个请求，或者只是让应用程序发出请求，以经过预先训练的响应进行响应，并断言最终结果就是我们期望的结果。</target>
        </trans-unit>
        <trans-unit id="871ea4da49e00d79d13d56d3eec2853372598b41" translate="yes" xml:space="preserve">
          <source>Dynamic Messaging</source>
          <target state="translated">动态消息传递</target>
        </trans-unit>
        <trans-unit id="bac036281464cca8457fab7f160594b9b956bffb" translate="yes" xml:space="preserve">
          <source>Dynamic responses</source>
          <target state="translated">动态反应</target>
        </trans-unit>
        <trans-unit id="ddfdb597e007e1dc4eda14345e693ee956382336" translate="yes" xml:space="preserve">
          <source>Dynamically changing an interpolated value</source>
          <target state="translated">动态改变内插值</target>
        </trans-unit>
        <trans-unit id="7ffa068184121937557c12ca97fdaa8b198c8c8e" translate="yes" xml:space="preserve">
          <source>E.g. the markup &lt;code&gt;{{ 12 | currency }}&lt;/code&gt; formats the number 12 as a currency using the &lt;a href=&quot;../api/ng/filter/currency&quot;&gt;&lt;code&gt;currency&lt;/code&gt;&lt;/a&gt; filter. The resulting value is &lt;code&gt;$12.00&lt;/code&gt;.</source>
          <target state="translated">例如，标记 &lt;code&gt;{{ 12 | currency }}&lt;/code&gt; 使用&lt;a href=&quot;../api/ng/filter/currency&quot;&gt; &lt;code&gt;currency&lt;/code&gt; &lt;/a&gt;过滤器将数字12格式化为货币。结果为 &lt;code&gt;$12.00&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="706f3f2c466550baf6f8cff74045985c0b276d2f" translate="yes" xml:space="preserve">
          <source>E.g. the markup &lt;code&gt;{{ 1234 | number:2 }}&lt;/code&gt; formats the number 1234 with 2 decimal points using the &lt;a href=&quot;../api/ng/filter/number&quot;&gt;&lt;code&gt;number&lt;/code&gt;&lt;/a&gt; filter. The resulting value is &lt;code&gt;1,234.00&lt;/code&gt;.</source>
          <target state="translated">例如标记 &lt;code&gt;{{ 1234 | number:2 }}&lt;/code&gt; 使用&lt;a href=&quot;../api/ng/filter/number&quot;&gt; &lt;code&gt;number&lt;/code&gt; &lt;/a&gt;过滤器将数字1234格式化为2个小数点。结果为 &lt;code&gt;1,234.00&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="a2a94632ee79f879ff70c670fc140a79667aac46" translate="yes" xml:space="preserve">
          <source>E2E Testing</source>
          <target state="translated">E2E测试</target>
        </trans-unit>
        <trans-unit id="46cb077541331f9a16fef73d47f33279ef781780" translate="yes" xml:space="preserve">
          <source>ES6, Webpack, and JSPM Starter Project</source>
          <target state="translated">ES6、Webpack和JSPM入门项目</target>
        </trans-unit>
        <trans-unit id="ba63fe9fd9974e102c02ef7d910d4b8dddc1fa17" translate="yes" xml:space="preserve">
          <source>ES6/Typescript Best Practices</source>
          <target state="translated">ES6/Typeescript最佳实践</target>
        </trans-unit>
        <trans-unit id="648a21d0cd9f5c2567ffd87e39c8a17cf279fb77" translate="yes" xml:space="preserve">
          <source>Each &lt;a href=&quot;../directive/form&quot;&gt;form&lt;/a&gt; directive creates an instance of &lt;code&gt;FormController&lt;/code&gt;.</source>
          <target state="translated">每个&lt;a href=&quot;../directive/form&quot;&gt;form&lt;/a&gt;指令创建一个 &lt;code&gt;FormController&lt;/code&gt; 的实例。</target>
        </trans-unit>
        <trans-unit id="d1c0d67675138588c0dc00ee3cda517b7f653e50" translate="yes" xml:space="preserve">
          <source>Each AngularJS application has exactly one &lt;a href=&quot;../api/ng/service/%24rootscope&quot;&gt;root scope&lt;/a&gt;, but may have any number of child scopes.</source>
          <target state="translated">每个AngularJS应用程序都只有一个&lt;a href=&quot;../api/ng/service/%24rootscope&quot;&gt;根范围&lt;/a&gt;，但可以具有任意数量的子范围。</target>
        </trans-unit>
        <trans-unit id="829715aa8f2829bcf5c7f7ab2b1d5e696bd672e1" translate="yes" xml:space="preserve">
          <source>Each directive's &lt;code&gt;compile&lt;/code&gt; functions are executed. Each &lt;code&gt;compile&lt;/code&gt; function has a chance to modify the DOM. Each &lt;code&gt;compile&lt;/code&gt; function returns a &lt;code&gt;link&lt;/code&gt; function. These functions are composed into a &quot;combined&quot; link function, which invokes each directive's returned &lt;code&gt;link&lt;/code&gt; function.</source>
          <target state="translated">每个指令的 &lt;code&gt;compile&lt;/code&gt; 功能都将执行。每个 &lt;code&gt;compile&lt;/code&gt; 功能都有机会修改DOM。每个 &lt;code&gt;compile&lt;/code&gt; 函数都返回一个 &lt;code&gt;link&lt;/code&gt; 函数。这些函数组成一个&amp;ldquo;组合&amp;rdquo;链接函数，该函数调用每个指令的返回 &lt;code&gt;link&lt;/code&gt; 函数。</target>
        </trans-unit>
        <trans-unit id="03ce87fe012858dd28022ce0344110a91c5c56e7" translate="yes" xml:space="preserve">
          <source>Each element in these arrays must be one of the following:</source>
          <target state="translated">这些数组中的每一个元素必须是下列之一:</target>
        </trans-unit>
        <trans-unit id="0788a57602c88bc63b92f1ea44577c3c1372677f" translate="yes" xml:space="preserve">
          <source>Each function in the &lt;code&gt;$validators&lt;/code&gt; object receives the &lt;code&gt;modelValue&lt;/code&gt; and the &lt;code&gt;viewValue&lt;/code&gt; as parameters. AngularJS will then call &lt;code&gt;$setValidity&lt;/code&gt; internally with the function's return value (&lt;code&gt;true&lt;/code&gt;: valid, &lt;code&gt;false&lt;/code&gt;: invalid). The validation functions are executed every time an input is changed (&lt;code&gt;$setViewValue&lt;/code&gt; is called) or whenever the bound &lt;code&gt;model&lt;/code&gt; changes. Validation happens after successfully running &lt;code&gt;$parsers&lt;/code&gt; and &lt;code&gt;$formatters&lt;/code&gt;, respectively. Failed validators are stored by key in &lt;a href=&quot;../api/ng/type/ngmodel.ngmodelcontroller#%24error&quot;&gt;&lt;code&gt;ngModelController.$error&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;$validators&lt;/code&gt; 对象中的每个函数都将 &lt;code&gt;modelValue&lt;/code&gt; 和 &lt;code&gt;viewValue&lt;/code&gt; 作为参数。然后，AngularJS将使用函数的返回值在内部调用 &lt;code&gt;$setValidity&lt;/code&gt; （ &lt;code&gt;true&lt;/code&gt; ：有效， &lt;code&gt;false&lt;/code&gt; ：无效）。每次更改输入（调用 &lt;code&gt;$setViewValue&lt;/code&gt; ）或绑定 &lt;code&gt;model&lt;/code&gt; 更改时，都会执行验证函数。分别在成功运行 &lt;code&gt;$parsers&lt;/code&gt; 和 &lt;code&gt;$formatters&lt;/code&gt; 之后进行验证。验证器失败通过密钥存储在&lt;a href=&quot;../api/ng/type/ngmodel.ngmodelcontroller#%24error&quot;&gt; &lt;code&gt;ngModelController.$error&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="12306c46ee9f9ac44368ea23daa3a0afc971061b" translate="yes" xml:space="preserve">
          <source>Each function in the &lt;code&gt;$validators&lt;/code&gt; object receives the &lt;code&gt;modelValue&lt;/code&gt; and the &lt;code&gt;viewValue&lt;/code&gt; as parameters. AngularJS will then call &lt;code&gt;$setValidity&lt;/code&gt; internally with the function's return value (&lt;code&gt;true&lt;/code&gt;: valid, &lt;code&gt;false&lt;/code&gt;: invalid). The validation functions are executed every time an input is changed (&lt;code&gt;$setViewValue&lt;/code&gt; is called) or whenever the bound &lt;code&gt;model&lt;/code&gt; changes. Validation happens after successfully running &lt;code&gt;$parsers&lt;/code&gt; and &lt;code&gt;$formatters&lt;/code&gt;, respectively. Failed validators are stored by key in &lt;a href=&quot;../api/ng/type/ngmodel.ngmodelcontroller#%24error.html&quot;&gt;&lt;code&gt;ngModelController.$error&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">Each function in the &lt;code&gt;$validators&lt;/code&gt; object receives the &lt;code&gt;modelValue&lt;/code&gt; and the &lt;code&gt;viewValue&lt;/code&gt; as parameters. AngularJS will then call &lt;code&gt;$setValidity&lt;/code&gt; internally with the function's return value ( &lt;code&gt;true&lt;/code&gt; : valid, &lt;code&gt;false&lt;/code&gt; : invalid). The validation functions are executed every time an input is changed ( &lt;code&gt;$setViewValue&lt;/code&gt; is called) or whenever the bound &lt;code&gt;model&lt;/code&gt; changes. Validation happens after successfully running &lt;code&gt;$parsers&lt;/code&gt; and &lt;code&gt;$formatters&lt;/code&gt; , respectively. Failed validators are stored by key in &lt;a href=&quot;../api/ng/type/ngmodel.ngmodelcontroller#%24error.html&quot;&gt; &lt;code&gt;ngModelController.$error&lt;/code&gt; &lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="1a059e84dcbee7d4310b371af5bf3f354749be0d" translate="yes" xml:space="preserve">
          <source>Each item in the &lt;strong&gt;RouteConfig&lt;/strong&gt; for a &lt;strong&gt;Routing Component&lt;/strong&gt; is an instance of this type. It can have the following properties:</source>
          <target state="translated">&lt;strong&gt;路由组件&lt;/strong&gt;的&lt;strong&gt;RouteConfig&lt;/strong&gt;中的每个项目都是这种类型的实例。它可以具有以下属性：&lt;strong&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="72b188f1d17688bd4f986f5bc1d938df3660b4a5" translate="yes" xml:space="preserve">
          <source>Each key value in the parameter object is first bound to url template if present and then any excess keys are appended to the url search query after the &lt;code&gt;?&lt;/code&gt;.</source>
          <target state="translated">如果存在，则将参数对象中的每个键值首先绑定到url模板，然后将所有多余的键附加到 &lt;code&gt;?&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="c4db4dc45436f4f1a0c0c82c0e2621975a9bac1c" translate="yes" xml:space="preserve">
          <source>Each module can only be loaded once per injector. Usually an AngularJS app has only one injector and modules are only loaded once. Each test has its own injector and modules are loaded multiple times.</source>
          <target state="translated">每个模块在每个注入器中只能加载一次。通常一个AngularJS应用只有一个注入器,模块只能加载一次。每个测试都有自己的注入器,模块会被多次加载。</target>
        </trans-unit>
        <trans-unit id="b8c6e4ddcbc08750f981caaf013164d265bbf24d" translate="yes" xml:space="preserve">
          <source>Each provide access to a &lt;code&gt;$delegate&lt;/code&gt;, which is the instantiated service/directive/filter, prior to being passed to the service that required it.</source>
          <target state="translated">每个对象都提供对 &lt;code&gt;$delegate&lt;/code&gt; 访问权，该$ delegate是实例化的服务/指令/过滤器，然后再传递给需要它的服务。</target>
        </trans-unit>
        <trans-unit id="dda93b9c00ecb491f2d026174b8fa5dbb60e68ea" translate="yes" xml:space="preserve">
          <source>Each recipe belongs to an &lt;a href=&quot;../api/ng/type/angular.module&quot;&gt;AngularJS module&lt;/a&gt;. An AngularJS module is a bag that holds one or more recipes. And since manually keeping track of module dependencies is no fun, a module can contain information about dependencies on other modules as well.</source>
          <target state="translated">每个配方都属于&lt;a href=&quot;../api/ng/type/angular.module&quot;&gt;AngularJS模块&lt;/a&gt;。AngularJS模块是一个包含一个或多个配方的包。而且，由于手动跟踪模块的依赖性并不好玩，因此模块也可以包含有关其他模块的依赖性的信息。</target>
        </trans-unit>
        <trans-unit id="9f3ae98a5b0c131a547a93b487b4c98012168788" translate="yes" xml:space="preserve">
          <source>Each version of AngularJS 1 up to, but not including 1.6, contained an expression sandbox, which reduced the surface area of the vulnerability but never removed it. &lt;strong&gt;In AngularJS 1.6 we removed this sandbox as developers kept relying upon it as a security feature even though it was always possible to access arbitrary JavaScript code if one could control the AngularJS templates or expressions of applications.&lt;/strong&gt;</source>
          <target state="translated">直到但不包括1.6的每个AngularJS 1版本都包含一个表达式沙箱，该沙箱减少了漏洞的表面积，但从未删除。&lt;strong&gt;在AngularJS 1.6中，我们删除了此沙箱，因为即使有人可以控制AngularJS模板或应用程序的表达，始终可以访问任意JavaScript代码，但开发人员一直依赖它作为安全功能。&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="b51b7017f03b60f98505f01afc9017f64fb597b6" translate="yes" xml:space="preserve">
          <source>Each web application you build is composed of objects that collaborate to get stuff done. These objects need to be instantiated and wired together for the app to work. In AngularJS apps most of these objects are instantiated and wired together automatically by the &lt;a href=&quot;../api/auto/service/%24injector&quot;&gt;injector service&lt;/a&gt;.</source>
          <target state="translated">您构建的每个Web应用程序均由协作完成工作的对象组成。这些对象需要实例化并连接在一起才能使应用程序正常工作。在AngularJS应用程序中，大多数这些对象都被&lt;a href=&quot;../api/auto/service/%24injector&quot;&gt;注入器服务&lt;/a&gt;实例化并自动连接在一起。</target>
        </trans-unit>
        <trans-unit id="e08245380fe45ed1dc1a39461e8430df197a0e09" translate="yes" xml:space="preserve">
          <source>Earlier we mentioned that we also have special purpose objects that are different from services. These objects extend the framework as plugins and therefore must implement interfaces specified by AngularJS. These interfaces are Controller, Directive, Filter and Animation.</source>
          <target state="translated">前面我们提到,我们还有不同于服务的特殊目的对象。这些对象作为插件扩展了框架,因此必须实现AngularJS指定的接口。这些接口分别是Controller、Directive、Filter和Animation。</target>
        </trans-unit>
        <trans-unit id="dca48544769c52bf3b58c672f5cd3b5c747bc2f2" translate="yes" xml:space="preserve">
          <source>Effects of DOM Element re-use</source>
          <target state="translated">DOM元素重复使用的效果</target>
        </trans-unit>
        <trans-unit id="c199d835c658f8ab6c23a79e307ea446a630dc73" translate="yes" xml:space="preserve">
          <source>Either a wrapped jQuery/jqLite node or a DOMElement</source>
          <target state="translated">无论是一个封装的jQuery/jqLite节点,还是一个DOME元素。</target>
        </trans-unit>
        <trans-unit id="c5dbec72523ae614966440682a91c6aefb466e1e" translate="yes" xml:space="preserve">
          <source>Element or HTML string to compile into a template function.</source>
          <target state="translated">要编译成模板函数的元素或HTML字符串。</target>
        </trans-unit>
        <trans-unit id="9cbfd00aa5e38787a6022e42110687cd2450a209" translate="yes" xml:space="preserve">
          <source>Else compare the types themselves alphabetically.</source>
          <target state="translated">否则按字母顺序比较类型本身。</target>
        </trans-unit>
        <trans-unit id="92f004dc1ae3f95af43091d25f176aad7eb1a397" translate="yes" xml:space="preserve">
          <source>Else if one of the values is null, consider it &quot;greater than&quot; the other.</source>
          <target state="translated">如果其中一个值为空,则认为它 &quot;大于 &quot;另一个值。</target>
        </trans-unit>
        <trans-unit id="55716b221770b19d94c322e504ec2f031d1a376c" translate="yes" xml:space="preserve">
          <source>Email us at &lt;a href=&quot;mailto:security@angularjs.org&quot;&gt;security@angularjs.org&lt;/a&gt; to report any potential security issues in AngularJS.</source>
          <target state="translated">给我们发送电子邮件至&lt;a href=&quot;mailto:security@angularjs.org&quot;&gt;security@angularjs.org，&lt;/a&gt;以报告AngularJS中的任何潜在安全问题。</target>
        </trans-unit>
        <trans-unit id="099bc2374fc25e458767acd089b2e0b4bbe06521" translate="yes" xml:space="preserve">
          <source>Embedding interpolation markup inside expressions</source>
          <target state="translated">在表达式中嵌入插值标记</target>
        </trans-unit>
        <trans-unit id="b2d9626fab94fe46dbc23e11d5145543e8c891df" translate="yes" xml:space="preserve">
          <source>Emitted every time the ngInclude content is reloaded.</source>
          <target state="translated">每当ngInclude内容被重新加载时发出。</target>
        </trans-unit>
        <trans-unit id="d69747c18e6a7823e2827479f46edbc548e716c8" translate="yes" xml:space="preserve">
          <source>Emitted every time the ngInclude content is requested.</source>
          <target state="translated">每当请求ngInclude内容时就会发出。</target>
        </trans-unit>
        <trans-unit id="ccb5524240b958659fec098886cb27f13b421044" translate="yes" xml:space="preserve">
          <source>Emitted every time the ngView content is reloaded.</source>
          <target state="translated">每当ngView内容被重新加载时发出。</target>
        </trans-unit>
        <trans-unit id="5352199744d0f4dd2b1904c169630303a8240bd4" translate="yes" xml:space="preserve">
          <source>Emitted when a template HTTP request yields an erroneous response (status &amp;lt; 200 || status &amp;gt; 299)</source>
          <target state="translated">当模板HTTP请求产生错误响应时发出（状态&amp;lt;200 ||状态&amp;gt; 299）</target>
        </trans-unit>
        <trans-unit id="faf2ad99147d30fa634f5fda5836e1dedfa19477" translate="yes" xml:space="preserve">
          <source>Enable animations outside of the application DOM tree: &lt;a href=&quot;../api/ng/service/%24animate#pin.html&quot;&gt;$animate.pin()&lt;/a&gt;</source>
          <target state="translated">在应用程序DOM树之外启用动画：&lt;a href=&quot;../api/ng/service/%24animate#pin.html&quot;&gt;$ animate.pin（）&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="a2ab88d7ccb6db7d12a00ccd002d5025b4173f0a" translate="yes" xml:space="preserve">
          <source>Enable or disable SVG support in the sanitizer.</source>
          <target state="translated">在 sanitizer 中启用或禁用 SVG 支持。</target>
        </trans-unit>
        <trans-unit id="f1d9379845b51d7e57e166ae34919d84964f1127" translate="yes" xml:space="preserve">
          <source>Enables a subset of svg to be supported by the sanitizer.</source>
          <target state="translated">启用svg的一个子集,以被消毒器支持。</target>
        </trans-unit>
        <trans-unit id="143c725b84ea6f36aaaba38361a8a7f2268adbf9" translate="yes" xml:space="preserve">
          <source>Enables binding AngularJS expressions to onsubmit events.</source>
          <target state="translated">可以将AngularJS表达式绑定到onsubmit事件。</target>
        </trans-unit>
        <trans-unit id="c80853334b84e1e011526ce6f6d2efcbb632d3b2" translate="yes" xml:space="preserve">
          <source>Enables/disables SCE and returns the current value.</source>
          <target state="translated">启用/禁用SCE并返回当前值。</target>
        </trans-unit>
        <trans-unit id="1bfefb111e5dac345b0aa3b3c4a4f406e1870b9d" translate="yes" xml:space="preserve">
          <source>Enables/disables various ARIA attributes</source>
          <target state="translated">启用/禁用各种ARIA属性</target>
        </trans-unit>
        <trans-unit id="7abd6ccf643ae77e58fc651912d7d14afe3ed6be" translate="yes" xml:space="preserve">
          <source>End-to-end tests can use modules to override configuration.</source>
          <target state="translated">端到端测试可以使用模块来覆盖配置。</target>
        </trans-unit>
        <trans-unit id="fe10676ae39073acdfb80a439f4190fce12dba21" translate="yes" xml:space="preserve">
          <source>Enter a name in the Live Preview text box; the greeting below the text box changes instantly.</source>
          <target state="translated">在 &quot;实时预览 &quot;文本框中输入名称,文本框下方的问候语会立即改变。</target>
        </trans-unit>
        <trans-unit id="205fcd69afe3a8ebda34fa883e6cd9e9b086948b" translate="yes" xml:space="preserve">
          <source>Enter the AngularJS execution context by calling &lt;a href=&quot;scope&quot;&gt;scope&lt;/a&gt;&lt;code&gt;.&lt;/code&gt;&lt;a href=&quot;../api/ng/type/%24rootscope.scope#%24apply.html&quot;&gt;$apply&lt;/a&gt;&lt;code&gt;(stimulusFn)&lt;/code&gt;, where &lt;code&gt;stimulusFn&lt;/code&gt; is the work you wish to do in the AngularJS execution context.</source>
          <target state="translated">通过调用&lt;a href=&quot;scope&quot;&gt;scope&lt;/a&gt;输入AngularJS执行上下文 &lt;code&gt;.&lt;/code&gt; &lt;a href=&quot;../api/ng/type/%24rootscope.scope#%24apply.html&quot;&gt;$ apply &lt;/a&gt; &lt;code&gt;(stimulusFn)&lt;/code&gt; ，其中 &lt;code&gt;stimulusFn&lt;/code&gt; 是您希望在AngularJS执行上下文中进行的工作。</target>
        </trans-unit>
        <trans-unit id="a5a37a82bd01c55087378b21c459ede66319d8f7" translate="yes" xml:space="preserve">
          <source>Error Reference</source>
          <target state="translated">错误参考</target>
        </trans-unit>
        <trans-unit id="a25c35bd8f4f9cad8579a43221ea776b2a563e82" translate="yes" xml:space="preserve">
          <source>Escaped Interpolation</source>
          <target state="translated">逃逸插值</target>
        </trans-unit>
        <trans-unit id="218d2e528de2ed5dec55ef5059999f6d6c7e1a86" translate="yes" xml:space="preserve">
          <source>Escaped interpolation markers are only replaced with the actual interpolation markers in rendered output when the $interpolate service processes the text. So, for HTML elements interpolated by &lt;a href=&quot;%24compile&quot;&gt;$compile&lt;/a&gt;, or otherwise interpolated with the &lt;code&gt;mustHaveExpression&lt;/code&gt; parameter set to &lt;code&gt;true&lt;/code&gt;, the interpolated text must contain an unescaped interpolation expression. As such, this is typically useful only when user-data is used in rendering a template from the server, or when otherwise untrusted data is used by a directive.</source>
          <target state="translated">当$ interpolate服务处理文本时，转义的插值标记仅在呈现的输出中替换为实际的插值标记。因此，对于通过&lt;a href=&quot;%24compile&quot;&gt;$ compile&lt;/a&gt;插值的HTML元素，或通过 &lt;code&gt;mustHaveExpression&lt;/code&gt; 参数设置为 &lt;code&gt;true&lt;/code&gt; 插值的HTML元素，插值的文本必须包含未转义的插值表达式。因此，这通常仅在用户数据用于从服务器渲染模板时使用，或者在指令使用不信任数据时才有用。</target>
        </trans-unit>
        <trans-unit id="4d57d4ba2f3a7f358a90f37c48fff5bd229f3431" translate="yes" xml:space="preserve">
          <source>Escaping / Quoting</source>
          <target state="translated">逃避/引用</target>
        </trans-unit>
        <trans-unit id="fea6dd1103565fa6cc8bae9d51b299f77b6e645c" translate="yes" xml:space="preserve">
          <source>Evaluate the &lt;code&gt;greeting&lt;/code&gt;&lt;a href=&quot;expression&quot;&gt;expression&lt;/a&gt; against the scope retrieved above, and assign the result to the text of the enclosing DOM element.</source>
          <target state="translated">根据上面检索的范围评估 &lt;code&gt;greeting&lt;/code&gt; &lt;a href=&quot;expression&quot;&gt;表达式&lt;/a&gt;，并将结果分配给封闭的DOM元素的文本。</target>
        </trans-unit>
        <trans-unit id="cda22f8a7b7689be1d88d76ef009399f12f6bf88" translate="yes" xml:space="preserve">
          <source>Evaluate the given expression when the user changes the input. The expression is evaluated immediately, unlike the JavaScript onchange event which only triggers at the end of a change (usually, when the user leaves the form element or presses the return key).</source>
          <target state="translated">当用户更改输入时,对给定的表达式进行评估。表达式会立即被评估,不像JavaScript的onchange事件,它只在更改结束时触发(通常是在用户离开表单元素或按下返回键时)。</target>
        </trans-unit>
        <trans-unit id="f056dd1c6d8bd104d6ba75bafcd760d12a08ca72" translate="yes" xml:space="preserve">
          <source>Evaluated as &lt;a href=&quot;../../../guide/expression&quot;&gt;expression&lt;/a&gt;. The expression value should evaluate to an object or an array which is observed on each &lt;a href=&quot;%24rootscope.scope#%24digest.html&quot;&gt;$digest&lt;/a&gt; cycle. Any shallow change within the collection will trigger a call to the &lt;code&gt;listener&lt;/code&gt;.</source>
          <target state="translated">评估为&lt;a href=&quot;../../../guide/expression&quot;&gt;表达式&lt;/a&gt;。表达式值应计算为在每个&lt;a href=&quot;%24rootscope.scope#%24digest.html&quot;&gt;$ digest&lt;/a&gt;循环中观察到的对象或数组。集合中的任何浅层更改都会触发对 &lt;code&gt;listener&lt;/code&gt; 的调用。</target>
        </trans-unit>
        <trans-unit id="a86c33fdabaa7b7c9f6110edee9f0ffd2acc28e1" translate="yes" xml:space="preserve">
          <source>Evaluates the expression and inserts the resulting HTML into the element in a secure way. By default, the resulting HTML content will be sanitized using the &lt;a href=&quot;../../ngsanitize/service/%24sanitize&quot;&gt;$sanitize&lt;/a&gt; service. To utilize this functionality, ensure that &lt;code&gt;$sanitize&lt;/code&gt; is available, for example, by including &lt;a href=&quot;../../ngsanitize&quot;&gt;&lt;code&gt;ngSanitize&lt;/code&gt;&lt;/a&gt; in your module's dependencies (not in core AngularJS). In order to use &lt;a href=&quot;../../ngsanitize&quot;&gt;&lt;code&gt;ngSanitize&lt;/code&gt;&lt;/a&gt; in your module's dependencies, you need to include &quot;angular-sanitize.js&quot; in your application.</source>
          <target state="translated">计算表达式并将生成的HTML以安全的方式插入到元素中。默认情况下，将使用&lt;a href=&quot;../../ngsanitize/service/%24sanitize&quot;&gt;$ sanitize&lt;/a&gt;服务对生成的HTML内容进行清理。要利用此功能，请确保 &lt;code&gt;$sanitize&lt;/code&gt; 可用，例如，通过将&lt;a href=&quot;../../ngsanitize&quot;&gt; &lt;code&gt;ngSanitize&lt;/code&gt; &lt;/a&gt;包含在模块的依赖项中（而不是在核心AngularJS中）。为了在模块的依赖&lt;a href=&quot;../../ngsanitize&quot;&gt; &lt;code&gt;ngSanitize&lt;/code&gt; &lt;/a&gt;中使用ngSanitize，您需要在应用程序中包含&amp;ldquo; angular-sanitize.js&amp;rdquo;。</target>
        </trans-unit>
        <trans-unit id="9076a3c6b5f726943b0322ab3cf79864f11e9902" translate="yes" xml:space="preserve">
          <source>Evaluates the expression and inserts the resulting HTML into the element in a secure way. By default, the resulting HTML content will be sanitized using the &lt;a href=&quot;../ngsanitize/service/%24sanitize&quot;&gt;$sanitize&lt;/a&gt; service. To utilize this functionality, ensure that &lt;code&gt;$sanitize&lt;/code&gt; is available, for example, by including &lt;a href=&quot;../ngsanitize&quot;&gt;&lt;code&gt;ngSanitize&lt;/code&gt;&lt;/a&gt; in your module's dependencies (not in core AngularJS). In order to use &lt;a href=&quot;../ngsanitize&quot;&gt;&lt;code&gt;ngSanitize&lt;/code&gt;&lt;/a&gt; in your module's dependencies, you need to include &quot;angular-sanitize.js&quot; in your application.</source>
          <target state="translated">计算表达式并将生成的HTML以安全的方式插入到元素中。默认情况下，将使用&lt;a href=&quot;../ngsanitize/service/%24sanitize&quot;&gt;$ sanitize&lt;/a&gt;服务对生成的HTML内容进行清理。要利用此功能，请确保 &lt;code&gt;$sanitize&lt;/code&gt; 可用，例如，通过将&lt;a href=&quot;../ngsanitize&quot;&gt; &lt;code&gt;ngSanitize&lt;/code&gt; &lt;/a&gt;包含在模块的依赖项中（而不是在核心AngularJS中）。为了在模块的依赖&lt;a href=&quot;../ngsanitize&quot;&gt; &lt;code&gt;ngSanitize&lt;/code&gt; &lt;/a&gt;中使用ngSanitize，您需要在应用程序中包含&amp;ldquo; angular-sanitize.js&amp;rdquo;。</target>
        </trans-unit>
        <trans-unit id="4fae0324b81717cfd0179935deb08738f4958c28" translate="yes" xml:space="preserve">
          <source>Event name to broadcast.</source>
          <target state="translated">要广播的事件名称。</target>
        </trans-unit>
        <trans-unit id="9ae944309054d536d760fa0eef00f071c6363b43" translate="yes" xml:space="preserve">
          <source>Event name to emit.</source>
          <target state="translated">要发出的事件名称。</target>
        </trans-unit>
        <trans-unit id="9a3b19e98675ab2f955bd6ef73c0dffd2dc79c70" translate="yes" xml:space="preserve">
          <source>Event name to listen on.</source>
          <target state="translated">要收听的事件名称。</target>
        </trans-unit>
        <trans-unit id="efd8912106134f28159a082b13ebc510cdb36ce0" translate="yes" xml:space="preserve">
          <source>Event object (see &lt;a href=&quot;%24rootscope.scope#%24on.html&quot;&gt;&lt;code&gt;$rootScope.Scope&lt;/code&gt;&lt;/a&gt;).</source>
          <target state="translated">事件对象（请参阅&lt;a href=&quot;%24rootscope.scope#%24on.html&quot;&gt; &lt;code&gt;$rootScope.Scope&lt;/code&gt; &lt;/a&gt;）。</target>
        </trans-unit>
        <trans-unit id="5256cf2d05f2a2afff96813dfafbe9056fe17f54" translate="yes" xml:space="preserve">
          <source>Event object, see &lt;a href=&quot;%24rootscope.scope#%24on.html&quot;&gt;&lt;code&gt;$rootScope.Scope&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">事件对象，请参见&lt;a href=&quot;%24rootscope.scope#%24on.html&quot;&gt; &lt;code&gt;$rootScope.Scope&lt;/code&gt; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="89991e609ea2e58df8701321c81f1c2b67ca16f0" translate="yes" xml:space="preserve">
          <source>Event that triggered the update.</source>
          <target state="translated">触发更新的事件。</target>
        </trans-unit>
        <trans-unit id="c5497bca58468ae64aed6c0fd921109217988db3" translate="yes" xml:space="preserve">
          <source>Events</source>
          <target state="translated">Events</target>
        </trans-unit>
        <trans-unit id="dc6ee5b710b84a06b1994d13c09750db60be49d9" translate="yes" xml:space="preserve">
          <source>Every application has a single root &lt;a href=&quot;../type/%24rootscope.scope&quot;&gt;scope&lt;/a&gt;. All other scopes are descendant scopes of the root scope. Scopes provide separation between the model and the view, via a mechanism for watching the model for changes. They also provide event emission/broadcast and subscription facility. See the &lt;a href=&quot;../../../guide/scope&quot;&gt;developer guide on scopes&lt;/a&gt;.</source>
          <target state="translated">每个应用程序都有一个根&lt;a href=&quot;../type/%24rootscope.scope&quot;&gt;范围&lt;/a&gt;。所有其他作用域是根作用域的后代作用域。范围通过监视模型变化的机制提供了模型和视图之间的分离。他们还提供事件发射/广播和订阅功能。请参阅&lt;a href=&quot;../../../guide/scope&quot;&gt;有关范围&lt;/a&gt;的开发人员指南。</target>
        </trans-unit>
        <trans-unit id="c6fed10186b9a7e4a176e17c80c83b6d2a93e97a" translate="yes" xml:space="preserve">
          <source>Every application has a single root &lt;a href=&quot;type/%24rootscope.scope&quot;&gt;scope&lt;/a&gt;. All other scopes are descendant scopes of the root scope. Scopes provide separation between the model and the view, via a mechanism for watching the model for changes. They also provide event emission/broadcast and subscription facility. See the &lt;a href=&quot;../../guide/scope&quot;&gt;developer guide on scopes&lt;/a&gt;.</source>
          <target state="translated">每个应用程序都有一个根&lt;a href=&quot;type/%24rootscope.scope&quot;&gt;范围&lt;/a&gt;。所有其他作用域是根作用域的后代作用域。范围通过监视模型变化的机制提供了模型和视图之间的分离。他们还提供事件发射/广播和订阅功能。请参阅&lt;a href=&quot;../../guide/scope&quot;&gt;有关范围&lt;/a&gt;的开发人员指南。</target>
        </trans-unit>
        <trans-unit id="8932161648474502d4579225b7a5010ba4feeb3a" translate="yes" xml:space="preserve">
          <source>Everything you need to build a CRUD app in a cohesive set: Data-binding, basic templating directives, form validation, routing, deep-linking, reusable components and dependency injection.</source>
          <target state="translated">构建一个CRUD应用程序所需的一切都在一个凝聚的集合中。数据绑定、基本模板指令、表单验证、路由、深度链接、可重用组件和依赖注入。</target>
        </trans-unit>
        <trans-unit id="9eed938865a4ca53d208e8ce6cf848543e153677" translate="yes" xml:space="preserve">
          <source>Exact matches always win over keyword matches. Therefore, if you define both &lt;code&gt;=0&lt;/code&gt; and &lt;code&gt;zero&lt;/code&gt;, when the value of the expression is zero, the &lt;code&gt;=0&lt;/code&gt; message is the one that will be selected. (The duplicate keyword categories are helpful when used with the optional &lt;code&gt;offset&lt;/code&gt; syntax described later.)</source>
          <target state="translated">完全匹配始终会胜过关键字匹配。因此，如果同时定义 &lt;code&gt;=0&lt;/code&gt; 和 &lt;code&gt;zero&lt;/code&gt; ，则当表达式的值为零时，将选择 &lt;code&gt;=0&lt;/code&gt; 消息。（与稍后描述的可选 &lt;code&gt;offset&lt;/code&gt; 语法一起使用时，重复的关键字类别会很有帮助。）</target>
        </trans-unit>
        <trans-unit id="1b2e441413acb202181b009a7cb2e30e8082e0bf" translate="yes" xml:space="preserve">
          <source>Exact matches are written as the equal sign followed by the exact value. &lt;code&gt;=0&lt;/code&gt;, &lt;code&gt;=1&lt;/code&gt;, &lt;code&gt;=2&lt;/code&gt; and &lt;code&gt;=123&lt;/code&gt; are all examples of exact matches. Note that there should be no space between the equal sign and the numeric value.</source>
          <target state="translated">精确匹配记为等号，后跟精确值。 &lt;code&gt;=0&lt;/code&gt; ， &lt;code&gt;=1&lt;/code&gt; ， &lt;code&gt;=2&lt;/code&gt; 和 &lt;code&gt;=123&lt;/code&gt; 都是完全匹配的示例。请注意，等号和数值之间不应有空格。</target>
        </trans-unit>
        <trans-unit id="0f01ed56a1e32a05e5ef96e4d779f34784af9a96" translate="yes" xml:space="preserve">
          <source>Example</source>
          <target state="translated">Example</target>
        </trans-unit>
        <trans-unit id="17aeb04f751fae1ae3f4ad0b2a7c8e59cbb96c5e" translate="yes" xml:space="preserve">
          <source>Example Applications</source>
          <target state="translated">应用实例</target>
        </trans-unit>
        <trans-unit id="7c784376e50e16848980dbe227261dcf8fd3cd3c" translate="yes" xml:space="preserve">
          <source>Example configuration</source>
          <target state="translated">配置示例</target>
        </trans-unit>
        <trans-unit id="916ba94adedad329829de9e3198135460b08ea09" translate="yes" xml:space="preserve">
          <source>Example of a component tree</source>
          <target state="translated">组件树的例子</target>
        </trans-unit>
        <trans-unit id="1ee0a88badf0098cd9392d2a3a772e37baa2fda5" translate="yes" xml:space="preserve">
          <source>Example of what a typical jasmine tests looks like with the inject method.</source>
          <target state="translated">一个典型的茉莉花测试的例子是什么样子的注入方法。</target>
        </trans-unit>
        <trans-unit id="07f064f0c6b85d5dffb3101177b89f9992c1c9c7" translate="yes" xml:space="preserve">
          <source>Example test:</source>
          <target state="translated">测试示例:</target>
        </trans-unit>
        <trans-unit id="c63737abd7347a7ae582cb9fbdf37d6c0e5b251e" translate="yes" xml:space="preserve">
          <source>Example:</source>
          <target state="translated">Example:</target>
        </trans-unit>
        <trans-unit id="62dfa7f10882e77a87092f507d379f2402d87987" translate="yes" xml:space="preserve">
          <source>Example: &lt;code&gt;&amp;lt;a href=&quot;/ext/link?a=b&quot; target=&quot;_self&quot;&amp;gt;link&amp;lt;/a&amp;gt;&lt;/code&gt;</source>
          <target state="translated">示例： &lt;code&gt;&amp;lt;a href=&quot;/ext/link?a=b&quot; target=&quot;_self&quot;&amp;gt;link&amp;lt;/a&amp;gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="c32374b44f69dd61e35af260b06e3345095cb0e9" translate="yes" xml:space="preserve">
          <source>Example: &lt;code&gt;&amp;lt;a href=&quot;/not-my-base/link&quot;&amp;gt;link&amp;lt;/a&amp;gt;&lt;/code&gt;</source>
          <target state="translated">示例： &lt;code&gt;&amp;lt;a href=&quot;/not-my-base/link&quot;&amp;gt;link&amp;lt;/a&amp;gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="5706b247d2f0a121689f2b656388525706d03e11" translate="yes" xml:space="preserve">
          <source>Example: &lt;code&gt;&amp;lt;a href=&quot;http://angularjs.org/&quot;&amp;gt;link&amp;lt;/a&amp;gt;&lt;/code&gt;</source>
          <target state="translated">示例： &lt;code&gt;&amp;lt;a href=&quot;http://angularjs.org/&quot;&amp;gt;link&amp;lt;/a&amp;gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="eb01bf04c9a0e8a71c45816513df424f1c7ffedb" translate="yes" xml:space="preserve">
          <source>Examples</source>
          <target state="translated">Examples</target>
        </trans-unit>
        <trans-unit id="7bb6af775c57b33034454a0b76f9d211912e7f56" translate="yes" xml:space="preserve">
          <source>Exception associated with the error.</source>
          <target state="translated">与错误相关的异常。</target>
        </trans-unit>
        <trans-unit id="3c931b480d9d9bfc8842e1d02f1f24126be988bc" translate="yes" xml:space="preserve">
          <source>Execute this function after injector creation. Useful for application initialization.</source>
          <target state="translated">在创建注射器后执行此函数。用于应用程序的初始化。</target>
        </trans-unit>
        <trans-unit id="086045d75cb70d0de25ecacb2e252ee609998080" translate="yes" xml:space="preserve">
          <source>Execute this function on module load. Useful for service configuration.</source>
          <target state="translated">在模块加载时执行此功能。用于服务配置。</target>
        </trans-unit>
        <trans-unit id="60db8af3d71e63425912639e5639bd857a345c69" translate="yes" xml:space="preserve">
          <source>Executed after the child elements are linked.</source>
          <target state="translated">在子元素被链接后执行。</target>
        </trans-unit>
        <trans-unit id="2f8e9afcb55d879e3172b4ff3edb0f541f0a203d" translate="yes" xml:space="preserve">
          <source>Executed before the child elements are linked. Not safe to do DOM transformation since the compiler linking function will fail to locate the correct elements for linking.</source>
          <target state="translated">在子元素被链接之前执行。做DOM转换时不安全,因为编译器的链接函数将无法找到正确的元素进行链接。</target>
        </trans-unit>
        <trans-unit id="a474756a35892f6f1337f53303e90f0d73ff2f19" translate="yes" xml:space="preserve">
          <source>Executes the &lt;code&gt;expression&lt;/code&gt; on the current scope and returns the result. Any exceptions in the expression are propagated (uncaught). This is useful when evaluating AngularJS expressions.</source>
          <target state="translated">在当前作用域上执行 &lt;code&gt;expression&lt;/code&gt; 并返回结果。表达式中的任何异常都会传播（未捕获）。这在评估AngularJS表达式时很有用。</target>
        </trans-unit>
        <trans-unit id="4d7dabbbb9314a685e95e955e06bc8dd0125cef5" translate="yes" xml:space="preserve">
          <source>Executes the expression on the current scope at a later point in time.</source>
          <target state="translated">在以后的时间点执行当前作用域的表达式。</target>
        </trans-unit>
        <trans-unit id="9df4399b6f3ff9926ed5500724ef427c968e367d" translate="yes" xml:space="preserve">
          <source>Exposes the current URL in the browser address bar, so you can</source>
          <target state="translated">在浏览器地址栏中显示当前的URL,所以你可以</target>
        </trans-unit>
        <trans-unit id="628cde53fd14624d568dab4d3637fdef86c20b64" translate="yes" xml:space="preserve">
          <source>Expression evaluation is forgiving to undefined and null. In JavaScript, evaluating &lt;code&gt;a.b.c&lt;/code&gt; throws an exception if &lt;code&gt;a&lt;/code&gt; is not an object. While this makes sense for a general purpose language, the expression evaluations are primarily used for data binding, which often look like this:</source>
          <target state="translated">表达式评估宽恕undefined和null。在JavaScript中，如果 &lt;code&gt;a&lt;/code&gt; 不是对象，则评估 &lt;code&gt;a.b.c&lt;/code&gt; 会引发异常。尽管这对于通用语言是有意义的，但是表达式评估主要用于数据绑定，通常看起来像这样：</target>
        </trans-unit>
        <trans-unit id="0accf77dcec253c18fdfdc78fc6ec09ea004edfb" translate="yes" xml:space="preserve">
          <source>Expression that is evaluated on each &lt;a href=&quot;%24rootscope.scope#%24digest.html&quot;&gt;$digest&lt;/a&gt; cycle. A change in the return value triggers a call to the &lt;code&gt;listener&lt;/code&gt;.</source>
          <target state="translated">在每个&lt;a href=&quot;%24rootscope.scope#%24digest.html&quot;&gt;$ digest&lt;/a&gt;循环上评估的表达式。返回值的更改会触发对 &lt;code&gt;listener&lt;/code&gt; 的调用。</target>
        </trans-unit>
        <trans-unit id="85ae6863e6e6040f384b4b6dc569f9eb4a64e58c" translate="yes" xml:space="preserve">
          <source>Expression to evaluate when a new partial is loaded.</source>
          <target state="translated">当一个新的部分被加载时要评估的表达式。</target>
        </trans-unit>
        <trans-unit id="77456688d291ad4f5b4e8d91f041eeb7a5e2de52" translate="yes" xml:space="preserve">
          <source>Expression to evaluate whenever the view updates.</source>
          <target state="translated">每当视图更新时要评估的表达式。</target>
        </trans-unit>
        <trans-unit id="ae5fccd8dcd8fc317f8edfc8259af86cd2967a29" translate="yes" xml:space="preserve">
          <source>Expressions</source>
          <target state="translated">Expressions</target>
        </trans-unit>
        <trans-unit id="cf78f62fb7990fb89d458935ffb1846f90b586a1" translate="yes" xml:space="preserve">
          <source>Expressions, like the one defined for the &lt;code&gt;ngClick&lt;/code&gt; directive in the example below, are evaluated with respect to the current scope. Therefore, there is no risk of inadvertently coding in a dependency on a global value in such an expression.</source>
          <target state="translated">表达式（如以下示例中为 &lt;code&gt;ngClick&lt;/code&gt; 指令定义的表达式）将根据当前作用域进行求值。因此，不存在在这样的表达式中无意地依赖于全局值进行编码的风险。</target>
        </trans-unit>
        <trans-unit id="7baf9e4023c205c51428907b8b5f7094a18f4b9f" translate="yes" xml:space="preserve">
          <source>Extends the built-in list of valid attributes, i.e. attributes that are considered safe and are not stripped off during sanitization.</source>
          <target state="translated">扩展了内置的有效属性列表,即被认为是安全的属性,在消毒过程中不会被剥离。</target>
        </trans-unit>
        <trans-unit id="c966928e5c88a4a9f1ab15febec0c95a059f8e2a" translate="yes" xml:space="preserve">
          <source>Extends the built-in lists of valid HTML/SVG elements, i.e. elements that are considered safe and are not stripped off during sanitization. You can extend the following lists of elements:</source>
          <target state="translated">扩展有效的HTML/SVG元素的内置列表,即那些被认为是安全的元素,在消毒过程中不会被剥离。您可以扩展以下元素列表。</target>
        </trans-unit>
        <trans-unit id="2b14b339ebedbd999c77e9b9f5c7d22127b40d2f" translate="yes" xml:space="preserve">
          <source>Extends the destination object &lt;code&gt;dst&lt;/code&gt; by copying own enumerable properties from the &lt;code&gt;src&lt;/code&gt; object(s) to &lt;code&gt;dst&lt;/code&gt;. You can specify multiple &lt;code&gt;src&lt;/code&gt; objects. If you want to preserve original objects, you can do so by passing an empty object as the target: &lt;code&gt;var object = angular.extend({}, object1, object2)&lt;/code&gt;.</source>
          <target state="translated">通过将自己的可枚举属性从 &lt;code&gt;src&lt;/code&gt; 对象复制到 &lt;code&gt;dst&lt;/code&gt; 来扩展目标对象 &lt;code&gt;dst&lt;/code&gt; 。您可以指定多个 &lt;code&gt;src&lt;/code&gt; 对象。如果要保留原始对象，可以通过传递一个空对象作为目标来实现： &lt;code&gt;var object = angular.extend({}, object1, object2)&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="ed06ca00010de70fa6e3ffdb999c3f9e5c99bcb6" translate="yes" xml:space="preserve">
          <source>External AngularJS resources</source>
          <target state="translated">外部AngularJS资源</target>
        </trans-unit>
        <trans-unit id="be313f8149a2d30f8327ee70864cf3d4946285a6" translate="yes" xml:space="preserve">
          <source>External Resources</source>
          <target state="translated">外部资源</target>
        </trans-unit>
        <trans-unit id="39ad1c4756a089e469b5ec792fe50629bec8336f" translate="yes" xml:space="preserve">
          <source>Extract the contents of the element where the directive appears and make it available to the directive. The contents are compiled and provided to the directive as a &lt;strong&gt;transclusion function&lt;/strong&gt;. See the &lt;a href=&quot;%24compile#transclusion.html&quot;&gt;Transclusion&lt;/a&gt; section below.</source>
          <target state="translated">提取指令出现的元素的内容，并使其可用于指令。内容被编译并作为&lt;strong&gt;包含函数&lt;/strong&gt;提供给指令。见&lt;a href=&quot;%24compile#transclusion.html&quot;&gt;Transclusion&lt;/a&gt;节。</target>
        </trans-unit>
        <trans-unit id="03688ba6aa340b87549088aa5739944cb6b1dc73" translate="yes" xml:space="preserve">
          <source>FAQ</source>
          <target state="translated">FAQ</target>
        </trans-unit>
        <trans-unit id="e47b9b1021034a56b7d5f70d92d0481524e78f69" translate="yes" xml:space="preserve">
          <source>Factory</source>
          <target state="translated">Factory</target>
        </trans-unit>
        <trans-unit id="3156b346a064c1db3b4dfdc8e539af534a00f477" translate="yes" xml:space="preserve">
          <source>Factory Methods</source>
          <target state="translated">工厂方法</target>
        </trans-unit>
        <trans-unit id="ef4319d2d02cf8972a8e4e597c5b497d7352cc3d" translate="yes" xml:space="preserve">
          <source>Factory Recipe</source>
          <target state="translated">工厂配方</target>
        </trans-unit>
        <trans-unit id="c8e6696140d2e75575a027e3db926b81e7fa86b8" translate="yes" xml:space="preserve">
          <source>Factory and Service are the most commonly used recipes. The only difference between them is that the Service recipe works better for objects of a custom type, while the Factory can produce JavaScript primitives and functions.</source>
          <target state="translated">Factory和Service是最常用的配方。它们之间唯一的区别是,Service配方对自定义类型的对象效果更好,而Factory可以产生JavaScript基元和函数。</target>
        </trans-unit>
        <trans-unit id="028dd1450ba58561838de3f298fd05498d14e273" translate="yes" xml:space="preserve">
          <source>Factory function for creating new instance of an animation.</source>
          <target state="translated">工厂函数,用于创建新的动画实例。</target>
        </trans-unit>
        <trans-unit id="3ee6fd00a202d032c40a78907b76870f53db49dc" translate="yes" xml:space="preserve">
          <source>Factory function for creating new instance of directives.</source>
          <target state="translated">用于创建新的指令实例的工厂函数。</target>
        </trans-unit>
        <trans-unit id="00b5e72ae89de1590849f21e6c25c0567db4d3f8" translate="yes" xml:space="preserve">
          <source>Factory function for creating new instance of filter.</source>
          <target state="translated">用于创建新的过滤器实例的工厂函数。</target>
        </trans-unit>
        <trans-unit id="cc3812a493330e545d9923589baae8e606e23d7f" translate="yes" xml:space="preserve">
          <source>Factory function used to create XMLHttpRequest objects.</source>
          <target state="translated">用于创建XMLHttpRequest对象的工厂函数。</target>
        </trans-unit>
        <trans-unit id="66507c8df90678391bccbb22d7912a1e54a7b768" translate="yes" xml:space="preserve">
          <source>Factory that constructs &lt;a href=&quot;../type/%24cachefactory.cache&quot;&gt;Cache&lt;/a&gt; objects and gives access to them.</source>
          <target state="translated">构造&lt;a href=&quot;../type/%24cachefactory.cache&quot;&gt;Cache&lt;/a&gt;对象并提供对其访问权限的工厂。</target>
        </trans-unit>
        <trans-unit id="6a2e0291c6da34749a8ac6df7b544977c583fc48" translate="yes" xml:space="preserve">
          <source>Factory that constructs &lt;a href=&quot;type/%24cachefactory.cache&quot;&gt;Cache&lt;/a&gt; objects and gives access to them.</source>
          <target state="translated">构造&lt;a href=&quot;type/%24cachefactory.cache&quot;&gt;Cache&lt;/a&gt;对象并提供对其访问权限的工厂。</target>
        </trans-unit>
        <trans-unit id="33ad5a927dac4ab275ae4ea2e1b605163a18a5a6" translate="yes" xml:space="preserve">
          <source>Failed interpolated expressions in &lt;code&gt;ng-href&lt;/code&gt; attributes can easily go unnoticed. We can decorate &lt;code&gt;ngHref&lt;/code&gt; to warn us of those conditions.</source>
          <target state="translated">&lt;code&gt;ng-href&lt;/code&gt; 属性中失败的插值表达式很容易被忽略。我们可以装饰 &lt;code&gt;ngHref&lt;/code&gt; 来警告我们这些情况。</target>
        </trans-unit>
        <trans-unit id="022a478813680131790030507e1c1390d5280b3b" translate="yes" xml:space="preserve">
          <source>Fake HTTP backend implementation suitable for end-to-end testing or backend-less development of applications that use the &lt;a href=&quot;../../ng/service/%24http&quot;&gt;$http service&lt;/a&gt;.</source>
          <target state="translated">伪HTTP后端实现，适用于使用&lt;a href=&quot;../../ng/service/%24http&quot;&gt;$ http服务&lt;/a&gt;的应用程序的端到端测试或无后端开发。</target>
        </trans-unit>
        <trans-unit id="576115681ace0f2ae10133aafeaa28843f3bceae" translate="yes" xml:space="preserve">
          <source>Fake HTTP backend implementation suitable for end-to-end testing or backend-less development of applications that use the &lt;a href=&quot;../ng/service/%24http&quot;&gt;$http service&lt;/a&gt;.</source>
          <target state="translated">伪HTTP后端实现，适用于使用&lt;a href=&quot;../ng/service/%24http&quot;&gt;$ http服务&lt;/a&gt;的应用程序的端到端测试或无后端开发。</target>
        </trans-unit>
        <trans-unit id="b961aa07954a84612068135eb6d91115ca7b9b12" translate="yes" xml:space="preserve">
          <source>Fake HTTP backend implementation suitable for end-to-end testing or backend-less development of applications that use the &lt;a href=&quot;ng/service/%24http&quot;&gt;$http service&lt;/a&gt;.</source>
          <target state="translated">伪HTTP后端实现，适用于使用&lt;a href=&quot;ng/service/%24http&quot;&gt;$ http服务&lt;/a&gt;的应用程序的端到端测试或无后端开发。</target>
        </trans-unit>
        <trans-unit id="2bea11d5d7c3b57fb31b4af107d8e23ff5f192ac" translate="yes" xml:space="preserve">
          <source>Fake HTTP backend implementation suitable for unit testing applications that use the &lt;a href=&quot;../../ng/service/%24http&quot;&gt;$http service&lt;/a&gt;.</source>
          <target state="translated">伪HTTP后端实现，适用于使用&lt;a href=&quot;../../ng/service/%24http&quot;&gt;$ http服务的&lt;/a&gt;单元测试应用程序。</target>
        </trans-unit>
        <trans-unit id="dc58c413dd761b834fc17ee464cbf2c2b1de608e" translate="yes" xml:space="preserve">
          <source>Fake HTTP backend implementation suitable for unit testing applications that use the &lt;a href=&quot;../ng/service/%24http&quot;&gt;$http service&lt;/a&gt;.</source>
          <target state="translated">伪HTTP后端实现，适用于使用&lt;a href=&quot;../ng/service/%24http&quot;&gt;$ http服务的&lt;/a&gt;单元测试应用程序。</target>
        </trans-unit>
        <trans-unit id="0f28b305a959cfe601c149a9dfacea0ea1a23943" translate="yes" xml:space="preserve">
          <source>Fake HTTP backend implementation suitable for unit testing applications that use the &lt;a href=&quot;ng/service/%24http&quot;&gt;$http service&lt;/a&gt;.</source>
          <target state="translated">伪HTTP后端实现，适用于使用&lt;a href=&quot;ng/service/%24http&quot;&gt;$ http服务的&lt;/a&gt;单元测试应用程序。</target>
        </trans-unit>
        <trans-unit id="2b6546af28f173c1cc2dec94a741c3e78cbdbce9" translate="yes" xml:space="preserve">
          <source>Fallback for legacy browsers</source>
          <target state="translated">传统浏览器的回退</target>
        </trans-unit>
        <trans-unit id="28db5b5a50621fb409af99bca4f8b752427e4a5c" translate="yes" xml:space="preserve">
          <source>Feature &amp;amp; Bug Tracker</source>
          <target state="translated">功能和错误跟踪器</target>
        </trans-unit>
        <trans-unit id="37565aacce4ed29b047384a80a69fe751d32457a" translate="yes" xml:space="preserve">
          <source>Features / Recipe type</source>
          <target state="translated">特点/配方类型</target>
        </trans-unit>
        <trans-unit id="04e7c6a718bae0ab2d3f26efc985083798ff0736" translate="yes" xml:space="preserve">
          <source>Feel free also mix transitions and keyframes together as well as any other CSS classes on the same element.</source>
          <target state="translated">也可以自由地将过渡和关键帧混合在一起,以及在同一元素上的任何其他CSS类。</target>
        </trans-unit>
        <trans-unit id="5c17b605508aeec026cd4b0eba633087d6e85345" translate="yes" xml:space="preserve">
          <source>Feel free to use other structural directives such as ng-if and ng-switch to further control what messages are active and when. Be careful, if you place ng-message on the same element as these structural directives, AngularJS may not be able to determine if a message is active or not. Therefore it is best to place the ng-message on a child element of the structural directive.</source>
          <target state="translated">可以自由使用其他结构指令,如ng-if和ng-switch来进一步控制什么消息是激活的,什么时候激活。要注意,如果你把ng-message和这些结构指令放在同一个元素上,AngularJS可能无法确定消息是否处于激活状态。因此最好将ng-message放在结构指令的子元素上。</target>
        </trans-unit>
        <trans-unit id="b5c660cb22aa8077dd6a3d7e39e98d1eba6cd24e" translate="yes" xml:space="preserve">
          <source>Fetches, compiles and includes an external HTML fragment.</source>
          <target state="translated">获取、编译并包含一个外部HTML片段。</target>
        </trans-unit>
        <trans-unit id="d7decf1aa22b02ae8abf9a96849ee423eee838e4" translate="yes" xml:space="preserve">
          <source>Filter</source>
          <target state="translated">Filter</target>
        </trans-unit>
        <trans-unit id="958cb2148933330b690b4c6657039b40197736c4" translate="yes" xml:space="preserve">
          <source>Filter components in ng</source>
          <target state="translated">ng中的过滤器组件</target>
        </trans-unit>
        <trans-unit id="313a96c8d6aa3fcf071911deb5c09c4a10f87451" translate="yes" xml:space="preserve">
          <source>Filter components in ngSanitize</source>
          <target state="translated">ngSanitize中的过滤组件</target>
        </trans-unit>
        <trans-unit id="0fa8c3951ddd4bf377d1a463b75966dd0eab1fcd" translate="yes" xml:space="preserve">
          <source>Filter name - this must be a valid AngularJS expression identifier</source>
          <target state="translated">过滤器名称--这必须是一个有效的AngularJS表达式标识。</target>
        </trans-unit>
        <trans-unit id="590dca26d3697ff206c7510b4a1ea098ac9d1127" translate="yes" xml:space="preserve">
          <source>Filter output &amp;mdash; Use &lt;a href=&quot;filter&quot;&gt;AngularJS filters&lt;/a&gt; instead.</source>
          <target state="translated">过滤器输出-改用&lt;a href=&quot;filter&quot;&gt;AngularJS过滤器&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="96e578211aa295317cf257310712fa28ccd8f6c6" translate="yes" xml:space="preserve">
          <source>Filters</source>
          <target state="translated">Filters</target>
        </trans-unit>
        <trans-unit id="699dd39da1d524706c0ac40e80676a65a7ee3d75" translate="yes" xml:space="preserve">
          <source>Filters are just functions which transform input to an output. However filters need to be Dependency Injected. To achieve this a filter definition consists of a factory function which is annotated with dependencies and is responsible for creating a filter function.</source>
          <target state="translated">过滤器只是将输入转化为输出的函数。然而,过滤器需要被注入依赖关系(Dependency Injected)。为了达到这个目的,过滤器的定义由一个工厂函数组成,这个工厂函数被注解为依赖关系,并负责创建一个过滤器函数。</target>
        </trans-unit>
        <trans-unit id="4f123f5fc885990f073d8e875ec587859f544592" translate="yes" xml:space="preserve">
          <source>Filters are used for formatting data displayed to the user.</source>
          <target state="translated">过滤器用于格式化显示给用户的数据。</target>
        </trans-unit>
        <trans-unit id="529dad0d0ff38bfbf459af3aac0d7bf3af26d043" translate="yes" xml:space="preserve">
          <source>Filters can be applied to expressions in view templates using the following syntax:</source>
          <target state="translated">可以使用以下语法将过滤器应用于视图模板中的表达式。</target>
        </trans-unit>
        <trans-unit id="b0c6a437ea6f5579b59312d1da2316b3e28c48c6" translate="yes" xml:space="preserve">
          <source>Filters can be applied to the result of another filter. This is called &quot;chaining&quot; and uses the following syntax:</source>
          <target state="translated">过滤器可以应用于另一个过滤器的结果。这就是所谓的 &quot;链式&quot;,使用的语法如下:</target>
        </trans-unit>
        <trans-unit id="55335aa85bcb3866e73d19fd2d724a8e66a43b7f" translate="yes" xml:space="preserve">
          <source>Filters format the value of an expression for display to the user. They can be used in view templates, controllers or services. AngularJS comes with a collection of &lt;a href=&quot;../api/ng/filter&quot;&gt;built-in filters&lt;/a&gt;, but it is easy to define your own as well.</source>
          <target state="translated">筛选器格式化表达式的值以显示给用户。它们可以在视图模板，控制器或服务中使用。AngularJS附带了一组&lt;a href=&quot;../api/ng/filter&quot;&gt;内置过滤器&lt;/a&gt;，但是定义自己的过滤器也很容易。</target>
        </trans-unit>
        <trans-unit id="682562f1b49ae6b0a648c1ac925de5d406869964" translate="yes" xml:space="preserve">
          <source>Filters may have arguments. The syntax for this is</source>
          <target state="translated">过滤器可以有参数。这方面的语法是</target>
        </trans-unit>
        <trans-unit id="30c736d62b49c588e1fe0f61717e96ddba143772" translate="yes" xml:space="preserve">
          <source>Filters that are marked as &lt;code&gt;$stateful&lt;/code&gt; are also executed on each $digest. See &lt;a href=&quot;filter#stateful-filters.html&quot;&gt;Stateful filters&lt;/a&gt; for more information. Note that no AngularJS core filters are $stateful.</source>
          <target state="translated">标记为 &lt;code&gt;$stateful&lt;/code&gt; 过滤器也会在每个$ digest上执行。有关更多信息，请参见&lt;a href=&quot;filter#stateful-filters.html&quot;&gt;有状态过滤器&lt;/a&gt;。请注意，没有AngularJS核心过滤器是有状态的。</target>
        </trans-unit>
        <trans-unit id="20d457ead64e7d7328649c07d1839f14e1100651" translate="yes" xml:space="preserve">
          <source>Finally, &lt;strong&gt;the banned resource URL list overrides the trusted resource URL list&lt;/strong&gt; and has the final say.</source>
          <target state="translated">Finally, &lt;strong&gt;the banned resource URL list overrides the trusted resource URL list&lt;/strong&gt; and has the final say.</target>
        </trans-unit>
        <trans-unit id="66c30abd8d699d84caba4d7a205c80691b2213c7" translate="yes" xml:space="preserve">
          <source>Finally, &lt;strong&gt;the blacklist overrides the whitelist&lt;/strong&gt; and has the final say.</source>
          <target state="translated">最后，&lt;strong&gt;黑名单将覆盖白名单&lt;/strong&gt;并拥有最终发言权。</target>
        </trans-unit>
        <trans-unit id="3b6d818fbadda9b37e12f8c2201c1880d5bffeaf" translate="yes" xml:space="preserve">
          <source>Finally, Jasmine provides matchers which let you make assertions:</source>
          <target state="translated">最后,Jasmine提供了匹配器,让你进行断言。</target>
        </trans-unit>
        <trans-unit id="b20b914a19775c7d6d718aa11a19eb2c2aea25c1" translate="yes" xml:space="preserve">
          <source>Finally, in an attempt to simplify things, if a predicate returns an object as the extracted value for an item, &lt;code&gt;orderBy&lt;/code&gt; will try to convert that object to a primitive value, before passing it to the comparator. The following rules govern the conversion:</source>
          <target state="translated">最后，为简化操作，如果谓词返回对象作为项目的提取值，则 &lt;code&gt;orderBy&lt;/code&gt; 将尝试将该对象转换为原始值，然后再将其传递给比较器。以下规则控制转换：</target>
        </trans-unit>
        <trans-unit id="07f4fb01f5ca9fb0f54a74c5ff4ac147e27960d5" translate="yes" xml:space="preserve">
          <source>Finally, load the module in your application by adding it as a dependent module:</source>
          <target state="translated">最后,将该模块作为一个依赖模块添加到你的应用程序中。</target>
        </trans-unit>
        <trans-unit id="fdccbab2920c960c12560765b2c4dd6408e9e441" translate="yes" xml:space="preserve">
          <source>Find out more information about each directive by reading the &lt;a href=&quot;../guide/accessibility&quot;&gt;ngAria Developer Guide&lt;/a&gt;.</source>
          <target state="translated">阅读《&lt;a href=&quot;../guide/accessibility&quot;&gt;ngAria开发人员指南》&lt;/a&gt;以找到有关每个指令的更多信息。</target>
        </trans-unit>
        <trans-unit id="ffa9aa79cbd2923d9b3db7b608c702e52b23423e" translate="yes" xml:space="preserve">
          <source>Finds links in text input and turns them into html links. Supports &lt;code&gt;http/https/ftp/sftp/mailto&lt;/code&gt; and plain email address links.</source>
          <target state="translated">在文本输入中查找链接，并将其转换为html链接。支持 &lt;code&gt;http/https/ftp/sftp/mailto&lt;/code&gt; 和纯电子邮件地址链接。</target>
        </trans-unit>
        <trans-unit id="b477acda5b9a9fa11e6ec90588718df5fca3ceb9" translate="yes" xml:space="preserve">
          <source>Fire up a screen reader such as VoiceOver or NVDA to check for ARIA support. &lt;a href=&quot;http://webaim.org/articles/screenreader_testing/&quot;&gt;Helpful screen reader tips.&lt;/a&gt;</source>
          <target state="translated">启动屏幕阅读器，例如VoiceOver或NVDA，以检查是否支持ARIA。&lt;a href=&quot;http://webaim.org/articles/screenreader_testing/&quot;&gt;有用的屏幕阅读器提示。&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="255e96fff7006defdcfa0768091004d2cadf02d1" translate="yes" xml:space="preserve">
          <source>First create an AngularJS module that will hold the service definition. (The empty array passed as the second parameter means that this module does not depend on any other modules.)</source>
          <target state="translated">首先创建一个AngularJS模块,用来存放服务定义。(作为第二个参数传递的空数组意味着这个模块不依赖于任何其他模块。)</target>
        </trans-unit>
        <trans-unit id="d323989dc2db49f0060887626146a6c49dae68b2" translate="yes" xml:space="preserve">
          <source>First let's talk about the &lt;a href=&quot;../api/ng/provider/%24compileprovider#directive.html&quot;&gt;API for registering directives&lt;/a&gt;. Much like controllers, directives are registered on modules. To register a directive, you use the &lt;code&gt;module.directive&lt;/code&gt; API. &lt;code&gt;module.directive&lt;/code&gt; takes the &lt;a href=&quot;directive#matching-directives.html&quot;&gt;normalized&lt;/a&gt; directive name followed by a &lt;strong&gt;factory function.&lt;/strong&gt; This factory function should return an object with the different options to tell &lt;code&gt;$compile&lt;/code&gt; how the directive should behave when matched.</source>
          <target state="translated">首先，让我们谈谈&lt;a href=&quot;../api/ng/provider/%24compileprovider#directive.html&quot;&gt;注册指令&lt;/a&gt;的API。就像控制器一样，指令在模块上注册。要注册指令，请使用 &lt;code&gt;module.directive&lt;/code&gt; API。 &lt;code&gt;module.directive&lt;/code&gt; 采用&lt;a href=&quot;directive#matching-directives.html&quot;&gt;标准化的&lt;/a&gt;指令名称，后跟&lt;strong&gt;工厂函数。&lt;/strong&gt;这个工厂函数应该返回一个带有不同选项的对象来告诉 &lt;code&gt;$compile&lt;/code&gt; 该指令在匹配时应如何表现。</target>
        </trans-unit>
        <trans-unit id="ae0317278d634cdf9897fb0dfd8c37d7e85a15db" translate="yes" xml:space="preserve">
          <source>First, download the file:</source>
          <target state="translated">首先,下载文件。</target>
        </trans-unit>
        <trans-unit id="4eed0a516dc6dad6334d232395f61bdc71c7a4f5" translate="yes" xml:space="preserve">
          <source>First, get the file:</source>
          <target state="translated">首先,获取文件。</target>
        </trans-unit>
        <trans-unit id="9c40c3b47461dae52bbb2ce1715c3e7c4122872e" translate="yes" xml:space="preserve">
          <source>First, there is a new JavaScript file that contains a &lt;a href=&quot;controller&quot;&gt;controller&lt;/a&gt;. More accurately, the file specifies a constructor function that will be used to create the actual controller instance. The purpose of controllers is to expose variables and functionality to expressions and directives.</source>
          <target state="translated">首先，有一个包含&lt;a href=&quot;controller&quot;&gt;controller&lt;/a&gt;的新JavaScript文件。更准确地说，该文件指定了一个构造函数，该函数将用于创建实际的控制器实例。控制器的目的是将变量和功能公开给表达式和指令。</target>
        </trans-unit>
        <trans-unit id="77d9204eade0f099f5e0ab2bbd55d4646d3a83bf" translate="yes" xml:space="preserve">
          <source>Flickering when using ngHide to toggle between elements</source>
          <target state="translated">当使用ngHide在元素之间切换时,会出现闪烁。</target>
        </trans-unit>
        <trans-unit id="b5ab32c1bf51cc481c9ab3c08fe93a1b77113b2e" translate="yes" xml:space="preserve">
          <source>Flickering when using ngShow to toggle between elements</source>
          <target state="translated">当使用ngShow在元素之间切换时,会出现闪烁。</target>
        </trans-unit>
        <trans-unit id="dd43887b63ddf9f9facc6f00c39c0b0cb59061d5" translate="yes" xml:space="preserve">
          <source>Flushes all currently pending tasks and executes the corresponding callbacks.</source>
          <target state="translated">刷新所有当前待处理的任务,并执行相应的回调。</target>
        </trans-unit>
        <trans-unit id="a90504300f4ff98f08eb7ca5fb07f8b7ddb64a04" translate="yes" xml:space="preserve">
          <source>Flushes pending requests using the trained responses. Requests are flushed in the order they were made, but it is also possible to skip one or more requests (for example to have them flushed later). This is useful for simulating scenarios where responses arrive from the server in any order.</source>
          <target state="translated">使用训练有素的响应来刷新待处理的请求。请求按其发出的顺序刷新,但也可以跳过一个或多个请求(例如,稍后再刷新)。这对于模拟响应以任何顺序从服务器到达的场景非常有用。</target>
        </trans-unit>
        <trans-unit id="638b971934a555c5935d2b23812b0728737ef511" translate="yes" xml:space="preserve">
          <source>Flushes the queue of pending tasks.</source>
          <target state="translated">清空待处理任务的队列。</target>
        </trans-unit>
        <trans-unit id="8fccbd9b557140b0032b7f8e325d55f44d855fc4" translate="yes" xml:space="preserve">
          <source>Flushing HTTP requests</source>
          <target state="translated">刷新HTTP请求</target>
        </trans-unit>
        <trans-unit id="a9fc15bcc3e40c2b04001a849fdf3aa1b08d270c" translate="yes" xml:space="preserve">
          <source>Follow &lt;a href=&quot;../service/%24sce#resourceUrlPatternItem.html&quot;&gt;this link&lt;/a&gt; for a description of the items allowed in this array.</source>
          <target state="translated">单击&lt;a href=&quot;../service/%24sce#resourceUrlPatternItem.html&quot;&gt;此链接&lt;/a&gt;以获取此数组中允许的项目的描述。</target>
        </trans-unit>
        <trans-unit id="094d6476ce6c9b2413458a029d80353731b269a4" translate="yes" xml:space="preserve">
          <source>Following the AngularJS expression, you would denote the plural extension syntax by the &lt;code&gt;, plural,&lt;/code&gt; syntax element. The spaces there are optional.</source>
          <target state="translated">继AngularJS表达，你会表示由复数扩展语法 &lt;code&gt;, plural,&lt;/code&gt; 语法元素。那里的空格是可选的。</target>
        </trans-unit>
        <trans-unit id="77b5d91136a3bc63a58e377a55c5cfbbe4b179c4" translate="yes" xml:space="preserve">
          <source>For CSS that's safe to source into the application. Currently unused. Feel free to use it in your own directives.</source>
          <target state="translated">对于可以安全的源码到应用程序中的CSS。目前尚未使用。可以在自己的指令中随意使用。</target>
        </trans-unit>
        <trans-unit id="93453f79c27232e1015010a01e85d73371266175" translate="yes" xml:space="preserve">
          <source>For HTML that's safe to source into the application. The &lt;a href=&quot;../directive/ngbindhtml&quot;&gt;ngBindHtml&lt;/a&gt; directive uses this context for bindings. If an unsafe value is encountered and the &lt;a href=&quot;../../ngsanitize&quot;&gt;$sanitize&lt;/a&gt; module is present this will sanitize the value instead of throwing an error.</source>
          <target state="translated">对于可以安全地导入到应用程序中的HTML。该&lt;a href=&quot;../directive/ngbindhtml&quot;&gt;ngBindHtml&lt;/a&gt;指令使用该环境的绑定。如果遇到不安全的值并且存在&lt;a href=&quot;../../ngsanitize&quot;&gt;$ sanitize&lt;/a&gt;模块，这将对值进行消毒，而不是引发错误。</target>
        </trans-unit>
        <trans-unit id="26c9ca3b2c358ad13d5820190c1ba8d9939ab41e" translate="yes" xml:space="preserve">
          <source>For JavaScript that is safe to execute in your application's context. Currently unused. Feel free to use it in your own directives.</source>
          <target state="translated">用于在你的应用程序的上下文中安全执行的JavaScript。目前尚未使用。欢迎在你自己的指令中使用它。</target>
        </trans-unit>
        <trans-unit id="c53dc4f36928109e16191d24a777b2f91435bd6c" translate="yes" xml:space="preserve">
          <source>For URLs that are not only safe to follow as links, but whose contents are also safe to include in your application. Examples include &lt;code&gt;ng-include&lt;/code&gt;, &lt;code&gt;src&lt;/code&gt; / &lt;code&gt;ngSrc&lt;/code&gt; bindings for tags other than &lt;code&gt;IMG&lt;/code&gt; (e.g. &lt;code&gt;IFRAME&lt;/code&gt;, &lt;code&gt;OBJECT&lt;/code&gt;, etc.)</source>
          <target state="translated">对于不仅可以安全地用作链接的URL，而且其内容也可以安全地包含在应用程序中的URL。示例包括除 &lt;code&gt;IMG&lt;/code&gt; 之外的其他标签（例如 &lt;code&gt;IFRAME&lt;/code&gt; ， &lt;code&gt;OBJECT&lt;/code&gt; 等）的 &lt;code&gt;ng-include&lt;/code&gt; ， &lt;code&gt;src&lt;/code&gt; / &lt;code&gt;ngSrc&lt;/code&gt; 绑定</target>
        </trans-unit>
        <trans-unit id="679d8901367dd69ff1b551c6d19359134975c76f" translate="yes" xml:space="preserve">
          <source>For URLs that are safe to follow as links. Is automatically converted from string by sanitizing when needed. Note that &lt;code&gt;$sce.URL&lt;/code&gt; makes a stronger statement about the URL than &lt;code&gt;$sce.MEDIA_URL&lt;/code&gt; does and therefore contexts requiring values trusted for &lt;code&gt;$sce.URL&lt;/code&gt; can be used anywhere that values trusted for &lt;code&gt;$sce.MEDIA_URL&lt;/code&gt; are required.</source>
          <target state="translated">对于可以安全作为链接的URL。在需要时通过清除从字符串自动转换。需要注意的是 &lt;code&gt;$sce.URL&lt;/code&gt; 使有关的URL不是一个强硬的声明 &lt;code&gt;$sce.MEDIA_URL&lt;/code&gt; 做，因此需要值上下文值得信赖的 &lt;code&gt;$sce.URL&lt;/code&gt; 可以在任何地方使用，价值观值得信赖的 &lt;code&gt;$sce.MEDIA_URL&lt;/code&gt; 是必需的。</target>
        </trans-unit>
        <trans-unit id="460be5bd6859be623406a9b95efc4d427c933c3d" translate="yes" xml:space="preserve">
          <source>For URLs that are safe to render as media. Is automatically converted from string by sanitizing when needed.</source>
          <target state="translated">对于可以安全呈现为媒体的URL。在需要的时候,会自动从字符串中经过消毒转换。</target>
        </trans-unit>
        <trans-unit id="56a3631774eba60c1d32538706994f443230d184" translate="yes" xml:space="preserve">
          <source>For a full breakdown of each method available on &lt;code&gt;$animate&lt;/code&gt;, see the &lt;a href=&quot;../api/ng/service/%24animate&quot;&gt;API documentation&lt;/a&gt;.</source>
          <target state="translated">有关 &lt;code&gt;$animate&lt;/code&gt; 上可用的每种方法的完整细分，请参阅&lt;a href=&quot;../api/ng/service/%24animate&quot;&gt;API文档&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="ee537291a987f36791c6713c21d3132becf867bb" translate="yes" xml:space="preserve">
          <source>For a full breakdown of the steps involved during each animation event, refer to the &lt;a href=&quot;../api/ng/service/%24animate&quot;&gt;&lt;code&gt;$animate&lt;/code&gt; API docs&lt;/a&gt;.</source>
          <target state="translated">有关每个动画事件所涉及步骤的完整细分，请参阅&lt;a href=&quot;../api/ng/service/%24animate&quot;&gt; &lt;code&gt;$animate&lt;/code&gt; API文档&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="0c2ee5a6e688447faa7359cb736c719caeff0771" translate="yes" xml:space="preserve">
          <source>For a full breakdown of the steps involved during each animation event, refer to the &lt;a href=&quot;ng/service/%24animate&quot;&gt;&lt;code&gt;$animate&lt;/code&gt; API docs&lt;/a&gt;.</source>
          <target state="translated">有关每个动画事件所涉及步骤的完整细分，请参阅&lt;a href=&quot;ng/service/%24animate&quot;&gt; &lt;code&gt;$animate&lt;/code&gt; API文档&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="9eb4e7bb485c4f2c498bc194e7c524491dc3a750" translate="yes" xml:space="preserve">
          <source>For a higher level of abstraction, please check out the &lt;a href=&quot;../../ngresource/service/%24resource&quot;&gt;$resource&lt;/a&gt; service.</source>
          <target state="translated">要获得更高的抽象水平，请查看&lt;a href=&quot;../../ngresource/service/%24resource&quot;&gt;$ resource&lt;/a&gt;服务。</target>
        </trans-unit>
        <trans-unit id="d076559b1af0412b2156be6fe715805d27e234d9" translate="yes" xml:space="preserve">
          <source>For an overview of this service and the functionnality it provides in AngularJS, see the main page for &lt;a href=&quot;%24sce&quot;&gt;SCE&lt;/a&gt;. The current page is targeted for developers who need to alter how SCE works in their application, which shouldn't be needed in most cases.</source>
          <target state="translated">有关此服务及其在AngularJS中提供的功能的概述，请参见&lt;a href=&quot;%24sce&quot;&gt;SCE&lt;/a&gt;主页。当前页面面向需要更改SCE在其应用程序中的工作方式的开发人员，而在大多数情况下则不需要。</target>
        </trans-unit>
        <trans-unit id="b35f9509f0816b491b39c105cf33a4c232d76568" translate="yes" xml:space="preserve">
          <source>For basic examples, how to use &lt;code&gt;ngModel&lt;/code&gt;, see:</source>
          <target state="translated">有关基本示例，如何使用 &lt;code&gt;ngModel&lt;/code&gt; ，请参见：</target>
        </trans-unit>
        <trans-unit id="18cb02d5b2d6faa6bcd2abc7c6cf94b02170c3a3" translate="yes" xml:space="preserve">
          <source>For best practices on using &lt;code&gt;ngModel&lt;/code&gt;, see:</source>
          <target state="translated">有关使用 &lt;code&gt;ngModel&lt;/code&gt; 的最佳实践，请参阅：</target>
        </trans-unit>
        <trans-unit id="77d34f60b8e72f532f193ec3320fc033253270d4" translate="yes" xml:space="preserve">
          <source>For browsers that support the HTML5 history API, &lt;code&gt;$location&lt;/code&gt; uses the HTML5 history API to write path and search. If the history API is not supported by a browser, &lt;code&gt;$location&lt;/code&gt; supplies a Hashbang URL. This frees you from having to worry about whether the browser viewing your app supports the history API or not; the &lt;code&gt;$location&lt;/code&gt; service makes this transparent to you.</source>
          <target state="translated">对于支持HTML5历史记录API的浏览器， &lt;code&gt;$location&lt;/code&gt; 使用HTML5历史记录API来编写路径和搜索。如果浏览器不支持历史记录API，则 &lt;code&gt;$location&lt;/code&gt; 提供一个Hashbang URL。这使您不必担心查看应用程序的浏览器是否支持历史API。在 &lt;code&gt;$location&lt;/code&gt; 服务使这个透明的你。</target>
        </trans-unit>
        <trans-unit id="667b86f65118c83e9387d50ae6fab23e51925cb5" translate="yes" xml:space="preserve">
          <source>For cases where the attribute name is the same as the value you want to bind to inside the directive's scope, you can use this shorthand syntax:</source>
          <target state="translated">对于属性名与你想在指令的作用域内绑定的值相同的情况,你可以使用这个速记语法。</target>
        </trans-unit>
        <trans-unit id="214f9ccc5f52486bf94285f84eb26c0f1f87ae2a" translate="yes" xml:space="preserve">
          <source>For dynamically creating &lt;code&gt;href&lt;/code&gt; attributes for a tags, see the &lt;a href=&quot;nghref&quot;&gt;&lt;code&gt;ngHref&lt;/code&gt;&lt;/a&gt; directive.</source>
          <target state="translated">有关为标签动态创建 &lt;code&gt;href&lt;/code&gt; 属性的信息，请参见&lt;a href=&quot;nghref&quot;&gt; &lt;code&gt;ngHref&lt;/code&gt; &lt;/a&gt;指令。</target>
        </trans-unit>
        <trans-unit id="d2cb21c62c7124bee8beb4118b76b5e301e11b61" translate="yes" xml:space="preserve">
          <source>For example consider a directive that uses transclusion and isolated scope. The DOM hierarchy might look like this:</source>
          <target state="translated">例如,考虑一个使用transclusion和隔离范围的指令。DOM的层次结构可能是这样的。</target>
        </trans-unit>
        <trans-unit id="37c999fd77efd0888b9cb38aaca6a3de81ed8a47" translate="yes" xml:space="preserve">
          <source>For example given the following fragment of HTML</source>
          <target state="translated">例如给定以下HTML片段</target>
        </trans-unit>
        <trans-unit id="7928c96ad76339cd8a1a495f2757512494975f25" translate="yes" xml:space="preserve">
          <source>For example if we wanted to do a CSS animation for &lt;code&gt;ngHide&lt;/code&gt; then we place an animation on the &lt;code&gt;.ng-hide&lt;/code&gt; CSS class:</source>
          <target state="translated">例如，如果我们想为 &lt;code&gt;ngHide&lt;/code&gt; 制作CSS动画，则将动画放在 &lt;code&gt;.ng-hide&lt;/code&gt; CSS类上：</target>
        </trans-unit>
        <trans-unit id="68db25a901df945b32772fe453b1fa47d47a8252" translate="yes" xml:space="preserve">
          <source>For example if your server needs to return:</source>
          <target state="translated">例如,如果你的服务器需要返回。</target>
        </trans-unit>
        <trans-unit id="da9cd80863fc9d60fc99be6bca25f3975ab8cf3f" translate="yes" xml:space="preserve">
          <source>For example on *nix, to create an angular.js file that contains localization rules for german locale, you can do the following:</source>
          <target state="translated">例如,在*nix上,要创建一个包含德语本地化规则的angular.js文件,你可以执行以下操作。</target>
        </trans-unit>
        <trans-unit id="e64d608c66f058026befe85feab000c0e8eb56f7" translate="yes" xml:space="preserve">
          <source>For example, &lt;code&gt;[{id: 'foo'}, {id: 'bar'}] | orderBy:'id'&lt;/code&gt; would result in &lt;code&gt;[{id: 'bar'}, {id: 'foo'}]&lt;/code&gt;.</source>
          <target state="translated">例如， &lt;code&gt;[{id: 'foo'}, {id: 'bar'}] | orderBy:'id'&lt;/code&gt; 将导致 &lt;code&gt;[{id: 'bar'}, {id: 'foo'}]&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="8dd342ed97c8f1fdb9f8a8fbf2799eee0ccdcc8c" translate="yes" xml:space="preserve">
          <source>For example, an element acts as a loading spinner. It has an infinite css animation on it, and also an &lt;a href=&quot;../api/ng/directive/ngif&quot;&gt;&lt;code&gt;ngIf&lt;/code&gt;&lt;/a&gt; directive, for which no animations are defined:</source>
          <target state="translated">例如，一个元素充当加载微调器。它上面有一个无限的css动画，还有一个&lt;a href=&quot;../api/ng/directive/ngif&quot;&gt; &lt;code&gt;ngIf&lt;/code&gt; &lt;/a&gt;指令，没有为其定义动画：</target>
        </trans-unit>
        <trans-unit id="7cf18d17856b16f1490eddc7ee8f166885da6706" translate="yes" xml:space="preserve">
          <source>For example, considering this template:</source>
          <target state="translated">例如,考虑到这个模板。</target>
        </trans-unit>
        <trans-unit id="5c917b642410469c8ea7e90f8a294d625b0e2286" translate="yes" xml:space="preserve">
          <source>For example, given &lt;code&gt;&amp;lt;my-component my-attr=&quot;parentModel&quot;&amp;gt;&lt;/code&gt; and directive definition of &lt;code&gt;scope: { localModel:'&amp;lt;myAttr' }&lt;/code&gt;, then the isolated scope property &lt;code&gt;localModel&lt;/code&gt; will reflect the value of &lt;code&gt;parentModel&lt;/code&gt; on the parent scope. Any changes to &lt;code&gt;parentModel&lt;/code&gt; will be reflected in &lt;code&gt;localModel&lt;/code&gt;, but changes in &lt;code&gt;localModel&lt;/code&gt; will not reflect in &lt;code&gt;parentModel&lt;/code&gt;. There are however two caveats:</source>
          <target state="translated">例如，给定 &lt;code&gt;&amp;lt;my-component my-attr=&quot;parentModel&quot;&amp;gt;&lt;/code&gt; 和的指令定义 &lt;code&gt;scope: { localModel:'&amp;lt;myAttr' }&lt;/code&gt; ，那么分离的范围属性 &lt;code&gt;localModel&lt;/code&gt; 将反映的值 &lt;code&gt;parentModel&lt;/code&gt; 上的父范围。对 &lt;code&gt;parentModel&lt;/code&gt; 的任何更改都将反映在 &lt;code&gt;localModel&lt;/code&gt; 中，但是 &lt;code&gt;localModel&lt;/code&gt; 中的更改将不会反映在 &lt;code&gt;parentModel&lt;/code&gt; 中。但是，有两个警告：</target>
        </trans-unit>
        <trans-unit id="f49496495571ad1faf93be95dab230558d27e175" translate="yes" xml:space="preserve">
          <source>For example, if &lt;code&gt;mode.rewriteLinks&lt;/code&gt; is set to &lt;code&gt;'internal-link'&lt;/code&gt;:</source>
          <target state="translated">例如，如果 &lt;code&gt;mode.rewriteLinks&lt;/code&gt; 设置为 &lt;code&gt;'internal-link'&lt;/code&gt; ：</target>
        </trans-unit>
        <trans-unit id="c8160364ec09deefcb004bae9314f54d4f6ba323" translate="yes" xml:space="preserve">
          <source>For example, if an input control is added that is already &lt;code&gt;$dirty&lt;/code&gt; and has &lt;code&gt;$error&lt;/code&gt; properties, calling &lt;code&gt;$setDirty()&lt;/code&gt; and &lt;code&gt;$validate()&lt;/code&gt; afterwards will propagate the state to the parent form.</source>
          <target state="translated">例如，如果添加的输入控件已经是 &lt;code&gt;$dirty&lt;/code&gt; 并且具有 &lt;code&gt;$error&lt;/code&gt; 属性，则随后调用 &lt;code&gt;$setDirty()&lt;/code&gt; 和 &lt;code&gt;$validate()&lt;/code&gt; 会将状态传播到父窗体。</target>
        </trans-unit>
        <trans-unit id="4100a3af8d122712b1181599580e9e97e167970c" translate="yes" xml:space="preserve">
          <source>For example, it can be used for specifying the &quot;Accept&quot; header that is sent to the server, when requesting a template.</source>
          <target state="translated">例如,当请求模板时,它可以用来指定发送给服务器的 &quot;接受 &quot;头。</target>
        </trans-unit>
        <trans-unit id="b6c81880bfa28e2a7d53ec485327343074412001" translate="yes" xml:space="preserve">
          <source>For example, routes like &lt;code&gt;/color/:color/largecode/:largecode*\/edit&lt;/code&gt; will match &lt;code&gt;/color/brown/largecode/code/with/slashes/edit&lt;/code&gt; and extract:</source>
          <target state="translated">例如， &lt;code&gt;/color/:color/largecode/:largecode*\/edit&lt;/code&gt; 将匹配 &lt;code&gt;/color/brown/largecode/code/with/slashes/edit&lt;/code&gt; 并提取：</target>
        </trans-unit>
        <trans-unit id="1b54425e1ee99911055acc84ab0ce4f407e3493d" translate="yes" xml:space="preserve">
          <source>For example, the following forms are all equivalent and match the &lt;a href=&quot;../api/ng/directive/ngbind&quot;&gt;&lt;code&gt;ngBind&lt;/code&gt;&lt;/a&gt; directive:</source>
          <target state="translated">例如，以下形式都是等效的，并且与&lt;a href=&quot;../api/ng/directive/ngbind&quot;&gt; &lt;code&gt;ngBind&lt;/code&gt; &lt;/a&gt;指令匹配：</target>
        </trans-unit>
        <trans-unit id="8a1d556c82b4cdccf6ac8ff718e0e8e16f73d570" translate="yes" xml:space="preserve">
          <source>For example, the parameter &lt;code&gt;_myService_&lt;/code&gt; would be resolved as the reference &lt;code&gt;myService&lt;/code&gt;. Since it is available in the function body as &lt;code&gt;_myService_&lt;/code&gt;, we can then assign it to a variable defined in an outer scope.</source>
          <target state="translated">例如，参数 &lt;code&gt;_myService_&lt;/code&gt; 将解析为引用 &lt;code&gt;myService&lt;/code&gt; 。由于它在函数体中以 &lt;code&gt;_myService_&lt;/code&gt; 的形式提供，因此我们可以将其分配给在外部作用域中定义的变量。</target>
        </trans-unit>
        <trans-unit id="0c9ab0c654c0f4dd1405a9253a4855d8cd4a37ec" translate="yes" xml:space="preserve">
          <source>For example, the transclude object &lt;code&gt;{ slotA: '?myCustomElement' }&lt;/code&gt; maps &lt;code&gt;&amp;lt;my-custom-element&amp;gt;&lt;/code&gt; elements to the &lt;code&gt;slotA&lt;/code&gt; slot, which can be accessed via the &lt;code&gt;$transclude&lt;/code&gt; function or via the &lt;a href=&quot;../directive/ngtransclude&quot;&gt;&lt;code&gt;ngTransclude&lt;/code&gt;&lt;/a&gt; directive.</source>
          <target state="translated">例如， &lt;code&gt;{ slotA: '?myCustomElement' }&lt;/code&gt; 对象{slotA：'？myCustomElement'}将 &lt;code&gt;&amp;lt;my-custom-element&amp;gt;&lt;/code&gt; 元素映射到 &lt;code&gt;slotA&lt;/code&gt; 插槽，可以通过 &lt;code&gt;$transclude&lt;/code&gt; &lt;a href=&quot;../directive/ngtransclude&quot;&gt; &lt;code&gt;ngTransclude&lt;/code&gt; &lt;/a&gt;函数或ngTransclude指令对其进行访问。</target>
        </trans-unit>
        <trans-unit id="63e8ba7e3633e731a37f59a5f71a0246863d5260" translate="yes" xml:space="preserve">
          <source>For example, these are valid expressions in AngularJS:</source>
          <target state="translated">例如,这些都是AngularJS中的有效表达式。</target>
        </trans-unit>
        <trans-unit id="96705da955a8375dd1945d20693b46a51ee66c61" translate="yes" xml:space="preserve">
          <source>For example, to bind to &lt;code&gt;viewBox&lt;/code&gt;, we can write:</source>
          <target state="translated">例如，要绑定到 &lt;code&gt;viewBox&lt;/code&gt; ，我们可以编写：</target>
        </trans-unit>
        <trans-unit id="0ccfc76b489a9482967cab3c080c55bf14ba5ead" translate="yes" xml:space="preserve">
          <source>For example, we could fix the example above by instead writing:</source>
          <target state="translated">例如,我们可以修正上面的例子,改写。</target>
        </trans-unit>
        <trans-unit id="e7d01ec6314e26035b376c51a5d51073e752c597" translate="yes" xml:space="preserve">
          <source>For example, you can specify a new &lt;code&gt;update&lt;/code&gt; action that uses the &lt;code&gt;PUT&lt;/code&gt; HTTP verb:</source>
          <target state="translated">例如，您可以指定一个新的使用 &lt;code&gt;PUT&lt;/code&gt; HTTP动词的 &lt;code&gt;update&lt;/code&gt; 操作：</target>
        </trans-unit>
        <trans-unit id="24b9b4933809e915effa8985612fb6a246c52bde" translate="yes" xml:space="preserve">
          <source>For example, you should not use interpolation in the value of the &lt;code&gt;style&lt;/code&gt; attribute (e.g. &lt;code&gt;style=&quot;color: {{ 'orange' }}; font-weight: {{ 'bold' }};&quot;&lt;/code&gt;) &lt;strong&gt;and&lt;/strong&gt; at the same time use a directive that changes the content of that attribute, such as &lt;code&gt;ngStyle&lt;/code&gt;.</source>
          <target state="translated">例如，不应该在的值中使用的内插 &lt;code&gt;style&lt;/code&gt; 属性（例如 &lt;code&gt;style=&quot;color: {{ 'orange' }}; font-weight: {{ 'bold' }};&quot;&lt;/code&gt; ）&lt;strong&gt;和&lt;/strong&gt;在同一时间使用更改该属性内容的指令，例如 &lt;code&gt;ngStyle&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="059c3e8cce263b2945a18ac90b2637e10a8026b1" translate="yes" xml:space="preserve">
          <source>For example:</source>
          <target state="translated">例如:</target>
        </trans-unit>
        <trans-unit id="3d34c040e0936e358901f3aa689af5cf27ff974b" translate="yes" xml:space="preserve">
          <source>For example: &lt;code&gt;(name, age) in {'adam':10, 'amalie':12}&lt;/code&gt;.</source>
          <target state="translated">例如： &lt;code&gt;(name, age) in {'adam':10, 'amalie':12}&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="ed802f940e232dd5f65c3ca8779aee1a29358982" translate="yes" xml:space="preserve">
          <source>For example: &lt;code&gt;album in artist.albums&lt;/code&gt;.</source>
          <target state="translated">例如： &lt;code&gt;album in artist.albums&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="681d399129810dbe00c67bb783ff5c6fc3cb9abd" translate="yes" xml:space="preserve">
          <source>For example: &lt;code&gt;item in items | filter : x | orderBy : order | limitTo : limit as results track by item.id&lt;/code&gt; .</source>
          <target state="translated">例如： &lt;code&gt;item in items | filter : x | orderBy : order | limitTo : limit as results track by item.id&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="3361e3ce4a7b68bb7099adb908017c58b77d7659" translate="yes" xml:space="preserve">
          <source>For example: &lt;code&gt;item in items | filter:x as results&lt;/code&gt; will store the fragment of the repeated items as &lt;code&gt;results&lt;/code&gt;, but only after the items have been processed through the filter.</source>
          <target state="translated">例如： &lt;code&gt;item in items | filter:x as results&lt;/code&gt; 将重复项的片段存储为 &lt;code&gt;results&lt;/code&gt; ，但仅在通过过滤器处理了这些项之后。</target>
        </trans-unit>
        <trans-unit id="94485d1a8b6086205e13bc75af843d115c8cdeb9" translate="yes" xml:space="preserve">
          <source>For extra convenience, &lt;code&gt;whenRoute&lt;/code&gt; and &lt;code&gt;expectRoute&lt;/code&gt; shortcuts are available. These methods offer colon delimited matching of the url path, ignoring the query string and trailing slashes. This allows declarations similar to how application routes are configured with &lt;code&gt;$routeProvider&lt;/code&gt;. Because these methods convert the definition url to regex, declaration order is important. Combined with query parameter parsing, the following is possible:</source>
          <target state="translated">为了提供更多便利，当 &lt;code&gt;whenRoute&lt;/code&gt; 和 &lt;code&gt;expectRoute&lt;/code&gt; 快捷方式可用时。这些方法提供了URL路径的冒号分隔匹配，而忽略了查询字符串和尾部斜杠。这允许进行类似于使用 &lt;code&gt;$routeProvider&lt;/code&gt; 配置应用程序路由的声明。由于这些方法将定义url转换为regex，因此声明顺序很重要。与查询参数解析结合使用，可能会发生以下情况：</target>
        </trans-unit>
        <trans-unit id="072be915c36eea0008ba664485e0bec787e012a1" translate="yes" xml:space="preserve">
          <source>For folks with a jQuery background</source>
          <target state="translated">对于有jQuery背景的人来说</target>
        </trans-unit>
        <trans-unit id="d4be5a755dc40ef55c3ed316c05fba77165d707c" translate="yes" xml:space="preserve">
          <source>For further information check out the guide on &lt;a href=&quot;../../../guide/directive#matching-directives.html&quot;&gt;Matching Directives&lt;/a&gt;</source>
          <target state="translated">有关更多信息，请查看&amp;ldquo; &lt;a href=&quot;../../../guide/directive#matching-directives.html&quot;&gt;匹配指令&lt;/a&gt; &amp;rdquo;指南</target>
        </trans-unit>
        <trans-unit id="4ec6b925164277672546a7d8d723f7a6f4124b26" translate="yes" xml:space="preserve">
          <source>For further information check out the guide on &lt;a href=&quot;../../../guide/directive#matching-directives.html&quot;&gt;Matching Directives&lt;/a&gt;.</source>
          <target state="translated">For further information check out the guide on &lt;a href=&quot;../../../guide/directive#matching-directives.html&quot;&gt;Matching Directives&lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="4b43ddc504c929290eacba4d8a365ed1210996ec" translate="yes" xml:space="preserve">
          <source>For historical reasons, this method will also flush non-&lt;code&gt;$timeout&lt;/code&gt; pending tasks, such as &lt;a href=&quot;../../ng/service/%24q&quot;&gt;&lt;code&gt;$q&lt;/code&gt;&lt;/a&gt; promises and tasks scheduled via &lt;a href=&quot;../../ng/type/%24rootscope.scope#%24applyAsync.html&quot;&gt;$applyAsync&lt;/a&gt; and &lt;a href=&quot;../../ng/type/%24rootscope.scope#%24evalAsync.html&quot;&gt;$evalAsync&lt;/a&gt;.</source>
          <target state="translated">由于历史原因，该方法还将刷新非 &lt;code&gt;$timeout&lt;/code&gt; 挂起的任务，例如&lt;a href=&quot;../../ng/service/%24q&quot;&gt; &lt;code&gt;$q&lt;/code&gt; &lt;/a&gt; promise和通过&lt;a href=&quot;../../ng/type/%24rootscope.scope#%24applyAsync.html&quot;&gt;$ applyAsync&lt;/a&gt;和&lt;a href=&quot;../../ng/type/%24rootscope.scope#%24evalAsync.html&quot;&gt;$ evalAsync&lt;/a&gt;调度的任务。</target>
        </trans-unit>
        <trans-unit id="96d5709584b09a9673009d4b874368aa832eb8de" translate="yes" xml:space="preserve">
          <source>For historical reasons, this method will also verify non-&lt;code&gt;$timeout&lt;/code&gt; pending tasks, such as pending &lt;a href=&quot;../../ng/service/%24http&quot;&gt;&lt;code&gt;$http&lt;/code&gt;&lt;/a&gt; requests, in-progress &lt;a href=&quot;../../ngroute/service/%24route&quot;&gt;&lt;code&gt;$route&lt;/code&gt;&lt;/a&gt; transitions, unresolved &lt;a href=&quot;../../ng/service/%24q&quot;&gt;&lt;code&gt;$q&lt;/code&gt;&lt;/a&gt; promises and tasks scheduled via &lt;a href=&quot;../../ng/type/%24rootscope.scope#%24applyAsync.html&quot;&gt;$applyAsync&lt;/a&gt; and &lt;a href=&quot;../../ng/type/%24rootscope.scope#%24evalAsync.html&quot;&gt;$evalAsync&lt;/a&gt;.</source>
          <target state="translated">由于历史原因，此方法还将验证非 &lt;code&gt;$timeout&lt;/code&gt; 待处理任务，例如待处理的&lt;a href=&quot;../../ng/service/%24http&quot;&gt; &lt;code&gt;$http&lt;/code&gt; &lt;/a&gt;请求，进行中的&lt;a href=&quot;../../ngroute/service/%24route&quot;&gt; &lt;code&gt;$route&lt;/code&gt; &lt;/a&gt;转换，未解决的&lt;a href=&quot;../../ng/service/%24q&quot;&gt; &lt;code&gt;$q&lt;/code&gt; &lt;/a&gt; promise和通过&lt;a href=&quot;../../ng/type/%24rootscope.scope#%24applyAsync.html&quot;&gt;$ applyAsync&lt;/a&gt;和&lt;a href=&quot;../../ng/type/%24rootscope.scope#%24evalAsync.html&quot;&gt;$ evalAsync&lt;/a&gt;计划的任务。</target>
        </trans-unit>
        <trans-unit id="e79547ae737496ef4b830c418e98203529ffd5b3" translate="yes" xml:space="preserve">
          <source>For in-depth discussion about DI, see &lt;a href=&quot;http://en.wikipedia.org/wiki/Dependency_injection&quot;&gt;Dependency Injection&lt;/a&gt; at Wikipedia, &lt;a href=&quot;http://martinfowler.com/articles/injection.html&quot;&gt;Inversion of Control&lt;/a&gt; by Martin Fowler, or read about DI in your favorite software design pattern book.</source>
          <target state="translated">有关DI的深入讨论，请参阅Wikipedia上的&lt;a href=&quot;http://en.wikipedia.org/wiki/Dependency_injection&quot;&gt;依赖注入&lt;/a&gt;，Martin Fowler &lt;a href=&quot;http://martinfowler.com/articles/injection.html&quot;&gt;的控制反转&lt;/a&gt;，或在您喜欢的软件设计模式书中阅读有关DI的内容。</target>
        </trans-unit>
        <trans-unit id="4c4430f0a9c683776764888172731ad0be5f3a21" translate="yes" xml:space="preserve">
          <source>For information on how the compiler works, see the &lt;a href=&quot;../../../guide/compiler&quot;&gt;AngularJS HTML Compiler&lt;/a&gt; section of the Developer Guide.</source>
          <target state="translated">有关编译器如何工作的信息，请参阅《开发人员指南》的&amp;ldquo; &lt;a href=&quot;../../../guide/compiler&quot;&gt;AngularJS HTML编译器&amp;rdquo;&lt;/a&gt;部分。</target>
        </trans-unit>
        <trans-unit id="fcbd9cf327acae20f4980fb68635ba5be10e8a9e" translate="yes" xml:space="preserve">
          <source>For instance in a long running Single Page Application (SPA), one user may &quot;log out&quot;, but then another user may access the application without refreshing, in which case all the cached data is still available.</source>
          <target state="translated">例如在一个长期运行的单页应用程序(SPA)中,一个用户可能会 &quot;注销&quot;,但另一个用户可能会在不刷新的情况下访问该应用程序,在这种情况下,所有的缓存数据仍然可用。</target>
        </trans-unit>
        <trans-unit id="9c5ae6d931fb112afe199ee277a04174d9d1b69e" translate="yes" xml:space="preserve">
          <source>For instance, the required directive does this to work out if the input has data or not.</source>
          <target state="translated">例如,所需指令这样做是为了计算出输入是否有数据。</target>
        </trans-unit>
        <trans-unit id="1ed68e337042bafa1e8676ab786bd6c545ca56f2" translate="yes" xml:space="preserve">
          <source>For instance, what if we wanted to create a directive that lets a user drag an element?</source>
          <target state="translated">例如,如果我们想创建一个允许用户拖动元素的指令,该怎么办?</target>
        </trans-unit>
        <trans-unit id="83e081f1429ea35f9cc98daf2caa2c7900084512" translate="yes" xml:space="preserve">
          <source>For more about how to configure services, see &lt;a href=&quot;../../../guide/providers#provider-recipe.html&quot;&gt;Provider Recipe&lt;/a&gt;.</source>
          <target state="translated">有关如何配置服务的更多信息，请参见&lt;a href=&quot;../../../guide/providers#provider-recipe.html&quot;&gt;提供者食谱&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="3c9f8258461de9d031c72dc478ab759f9f3d6a71" translate="yes" xml:space="preserve">
          <source>For more details on the &lt;code&gt;link&lt;/code&gt; option refer to the &lt;a href=&quot;../api/ng/service/%24compile#-link-.html&quot;&gt;&lt;code&gt;$compile&lt;/code&gt; API&lt;/a&gt; page.</source>
          <target state="translated">有关 &lt;code&gt;link&lt;/code&gt; 选项的更多详细信息，请参见&lt;a href=&quot;../api/ng/service/%24compile#-link-.html&quot;&gt; &lt;code&gt;$compile&lt;/code&gt; API&lt;/a&gt;页面。</target>
        </trans-unit>
        <trans-unit id="03fb612774d8f4c26b5bffdddde2f8da0d09c268" translate="yes" xml:space="preserve">
          <source>For more details, please refer to our &lt;a href=&quot;https://docs.google.com/a/google.com/document/d/1pbtW2yvtmFBikfRrJd8VAsabiFkKezmYZ_PbgdjQOVU/edit&quot;&gt;design doc&lt;/a&gt;. You can read more about the ICU MessageFormat syntax at &lt;a href=&quot;http://userguide.icu-project.org/formatparse/messages#TOC-MessageFormat&quot;&gt;Formatting Messages | ICU User Guide&lt;/a&gt;.</source>
          <target state="translated">有关更多详细信息，请参阅我们的&lt;a href=&quot;https://docs.google.com/a/google.com/document/d/1pbtW2yvtmFBikfRrJd8VAsabiFkKezmYZ_PbgdjQOVU/edit&quot;&gt;设计文档&lt;/a&gt;。您可以在&amp;ldquo; &lt;a href=&quot;http://userguide.icu-project.org/formatparse/messages#TOC-MessageFormat&quot;&gt;设置消息格式&amp;rdquo; |&amp;ldquo;&lt;/a&gt;更多信息&amp;rdquo;中了解有关ICU MessageFormat语法的更多信息。ICU用户指南。</target>
        </trans-unit>
        <trans-unit id="f6b5d56555aab13e3ab69162ff339401d9009f51" translate="yes" xml:space="preserve">
          <source>For more examples, and an in-depth guide, see the &lt;a href=&quot;../../../guide/component&quot;&gt;component guide&lt;/a&gt;.</source>
          <target state="translated">有关更多示例和深入指南，请参阅&lt;a href=&quot;../../../guide/component&quot;&gt;组件指南&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="e45ef233283f4eb561fb40a1c85a858803109abf" translate="yes" xml:space="preserve">
          <source>For more information about how AngularJS filters work, and how to create your own filters, see &lt;a href=&quot;../../../guide/filter&quot;&gt;Filters&lt;/a&gt; in the AngularJS Developer Guide.</source>
          <target state="translated">有关AngularJS过滤器如何工作以及如何创建自己的过滤器的更多信息，请参阅《 AngularJS开发人员指南》中的&lt;a href=&quot;../../../guide/filter&quot;&gt;过滤器&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="b5c7cb088f3bf1b4252226980a33761384c56cfe" translate="yes" xml:space="preserve">
          <source>For more information on Protractor, view &lt;a href=&quot;http://angular.github.io/protractor/#/getting-started&quot;&gt;getting started&lt;/a&gt; or the &lt;a href=&quot;http://angular.github.io/protractor/#/api&quot;&gt;api docs&lt;/a&gt;.</source>
          <target state="translated">有关量角器的更多信息，请查看&lt;a href=&quot;http://angular.github.io/protractor/#/getting-started&quot;&gt;入门&lt;/a&gt;或&lt;a href=&quot;http://angular.github.io/protractor/#/api&quot;&gt;api docs&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="f7d9777dd9e23921be5e65fe03cbf4547e45948c" translate="yes" xml:space="preserve">
          <source>For more information please visit &lt;a href=&quot;../api/ng/service/%24sce&quot;&gt;&lt;code&gt;$sce&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../api/ngsanitize/service/%24sanitize&quot;&gt;&lt;code&gt;$sanitize&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">有关更多信息，请访问&lt;a href=&quot;../api/ng/service/%24sce&quot;&gt; &lt;code&gt;$sce&lt;/code&gt; &lt;/a&gt;和&lt;a href=&quot;../api/ngsanitize/service/%24sanitize&quot;&gt; &lt;code&gt;$sanitize&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="5007e5f43b46ae511f7cfe86c43883e38fb85306" translate="yes" xml:space="preserve">
          <source>For more information please visit &lt;a href=&quot;https://www.whitehatsec.com/blog/web-storage-security/&quot;&gt;Web Storage Security&lt;/a&gt;.</source>
          <target state="translated">有关更多信息，请访问&lt;a href=&quot;https://www.whitehatsec.com/blog/web-storage-security/&quot;&gt;Web存储安全性&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="17050d011e437da353406dbb3de303d540a80ce8" translate="yes" xml:space="preserve">
          <source>For more information see &lt;a href=&quot;../../../guide/%24location&quot;&gt;Developer Guide: Using $location&lt;/a&gt;</source>
          <target state="translated">有关更多信息，请参见&lt;a href=&quot;../../../guide/%24location&quot;&gt;开发人员指南：使用$ location。&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="d42a33c1c8d9f173d6a9033c03f236de6cab9c91" translate="yes" xml:space="preserve">
          <source>For more information, see the &lt;a href=&quot;../../../guide/bootstrap&quot;&gt;Bootstrap guide&lt;/a&gt;.</source>
          <target state="translated">有关更多信息，请参见&lt;a href=&quot;../../../guide/bootstrap&quot;&gt;Bootstrap指南&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="84f28113af9b7c7d485ded6f76a10650aebf1bfa" translate="yes" xml:space="preserve">
          <source>For more information, see the &lt;a href=&quot;di#using-strict-dependency-injection.html&quot;&gt;DI Guide&lt;/a&gt;.</source>
          <target state="translated">有关更多信息，请参见&lt;a href=&quot;di#using-strict-dependency-injection.html&quot;&gt;DI指南&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="9ec0f18a27efe3a5bbaaa7c9a76fdead7442a493" translate="yes" xml:space="preserve">
          <source>For more on dependencies, see the &lt;a href=&quot;di&quot;&gt;dependency injection&lt;/a&gt; docs.</source>
          <target state="translated">有关依赖的更多信息，请参见&lt;a href=&quot;di&quot;&gt;依赖注入&lt;/a&gt;文档。</target>
        </trans-unit>
        <trans-unit id="ae1dd7c814f6a02ea749e951d697e01de287e16d" translate="yes" xml:space="preserve">
          <source>For more on the &lt;code&gt;restrict&lt;/code&gt; property, see the &lt;a href=&quot;../api/ng/service/%24compile#directive-definition-object.html&quot;&gt;API docs&lt;/a&gt;.</source>
          <target state="translated">有关 &lt;code&gt;restrict&lt;/code&gt; 属性的更多信息，请参阅&lt;a href=&quot;../api/ng/service/%24compile#directive-definition-object.html&quot;&gt;API docs&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="08deef231a5f13117b873e36e123085e74358098" translate="yes" xml:space="preserve">
          <source>For more see the docs pages on &lt;a href=&quot;../api/ng/provider/%24compileprovider#commentDirectivesEnabled.html&quot;&gt;&lt;code&gt;$compileProvider.commentDirectivesEnabled&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../api/ng/provider/%24compileprovider#cssClassDirectivesEnabled.html&quot;&gt;&lt;code&gt;$compileProvider.cssClassDirectivesEnabled&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">有关更多信息，请参见&lt;a href=&quot;../api/ng/provider/%24compileprovider#commentDirectivesEnabled.html&quot;&gt; &lt;code&gt;$compileProvider.commentDirectivesEnabled&lt;/code&gt; &lt;/a&gt;和&lt;a href=&quot;../api/ng/provider/%24compileprovider#cssClassDirectivesEnabled.html&quot;&gt; &lt;code&gt;$compileProvider.cssClassDirectivesEnabled&lt;/code&gt; &lt;/a&gt;上的文档页面。</target>
        </trans-unit>
        <trans-unit id="1b9e3aa3cc39fa5b8b3356d069b3b85b223b9d68" translate="yes" xml:space="preserve">
          <source>For more see the docs pages on &lt;a href=&quot;../api/ng/provider/%24compileprovider#debugInfoEnabled.html&quot;&gt;&lt;code&gt;$compileProvider&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../api/ng/function/angular.reloadwithdebuginfo&quot;&gt;&lt;code&gt;angular.reloadWithDebugInfo&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">有关更多信息，请参见&lt;a href=&quot;../api/ng/provider/%24compileprovider#debugInfoEnabled.html&quot;&gt; &lt;code&gt;$compileProvider&lt;/code&gt; &lt;/a&gt;和&lt;a href=&quot;../api/ng/function/angular.reloadwithdebuginfo&quot;&gt; &lt;code&gt;angular.reloadWithDebugInfo&lt;/code&gt; &lt;/a&gt;上的文档页面。</target>
        </trans-unit>
        <trans-unit id="fb0970fb80040dd5e4119122a4b3d870ad0ab13b" translate="yes" xml:space="preserve">
          <source>For mutations to be properly observed, you should make them only within the &lt;a href=&quot;../api/ng/type/%24rootscope.scope#%24apply.html&quot;&gt;scope.$apply()&lt;/a&gt;. AngularJS APIs do this implicitly, so no extra &lt;code&gt;$apply&lt;/code&gt; call is needed when doing synchronous work in controllers, or asynchronous work with &lt;a href=&quot;../api/ng/service/%24http&quot;&gt;$http&lt;/a&gt;, &lt;a href=&quot;../api/ng/service/%24timeout&quot;&gt;$timeout&lt;/a&gt; or &lt;a href=&quot;../api/ng/service/%24interval&quot;&gt;$interval&lt;/a&gt; services.</source>
          <target state="translated">为了正确观察到突变，应仅在&lt;a href=&quot;../api/ng/type/%24rootscope.scope#%24apply.html&quot;&gt;scope。$ apply（）中&lt;/a&gt;进行突变。AngularJS API隐式地执行此操作，因此在控制器中进行同步工作或使用&lt;a href=&quot;../api/ng/service/%24http&quot;&gt;$ http&lt;/a&gt;，&lt;a href=&quot;../api/ng/service/%24timeout&quot;&gt;$ timeout&lt;/a&gt;或&lt;a href=&quot;../api/ng/service/%24interval&quot;&gt;$ interval&lt;/a&gt;服务进行异步工作时，不需要额外的 &lt;code&gt;$apply&lt;/code&gt; 调用。</target>
        </trans-unit>
        <trans-unit id="70cabd8c2e94395b437f880992a54a0646b1ec62" translate="yes" xml:space="preserve">
          <source>For ngAria to do its magic, simply include the module &lt;code&gt;ngAria&lt;/code&gt; as a dependency. The following directives are supported: &lt;code&gt;ngModel&lt;/code&gt;, &lt;code&gt;ngChecked&lt;/code&gt;, &lt;code&gt;ngReadonly&lt;/code&gt;, &lt;code&gt;ngRequired&lt;/code&gt;, &lt;code&gt;ngValue&lt;/code&gt;, &lt;code&gt;ngDisabled&lt;/code&gt;, &lt;code&gt;ngShow&lt;/code&gt;, &lt;code&gt;ngHide&lt;/code&gt;, &lt;code&gt;ngClick&lt;/code&gt;, &lt;code&gt;ngDblClick&lt;/code&gt;, and &lt;code&gt;ngMessages&lt;/code&gt;.</source>
          <target state="translated">为了使ngAria发挥作用，只需将 &lt;code&gt;ngAria&lt;/code&gt; 模块作为依赖项即可。支持以下指令： &lt;code&gt;ngModel&lt;/code&gt; ， &lt;code&gt;ngChecked&lt;/code&gt; ， &lt;code&gt;ngReadonly&lt;/code&gt; ， &lt;code&gt;ngRequired&lt;/code&gt; ， &lt;code&gt;ngValue&lt;/code&gt; ， &lt;code&gt;ngDisabled&lt;/code&gt; ， &lt;code&gt;ngShow&lt;/code&gt; ， &lt;code&gt;ngHide&lt;/code&gt; ， &lt;code&gt;ngClick&lt;/code&gt; ， &lt;code&gt;ngDblClick&lt;/code&gt; 和 &lt;code&gt;ngMessages&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="7935b6948cbce976a835b91d5bd505582812c0c4" translate="yes" xml:space="preserve">
          <source>For purposes of global error handling, authentication, or any kind of synchronous or asynchronous pre-processing of request or postprocessing of responses, it is desirable to be able to intercept requests before they are handed to the server and responses before they are handed over to the application code that initiated these requests. The interceptors leverage the &lt;a href=&quot;%24q&quot;&gt;promise APIs&lt;/a&gt; to fulfill this need for both synchronous and asynchronous pre-processing.</source>
          <target state="translated">出于全局错误处理，身份验证或请求的任何同步或异步预处理或响应的后处理目的，希望能够在将请求移交给服务器之前拦截请求，并在将请求移交给服务器之前将响应拦截发起这些请求的应用程序代码。拦截器利用&lt;a href=&quot;%24q&quot;&gt;promise API&lt;/a&gt;满足同步和异步预处理的这一需求。</target>
        </trans-unit>
        <trans-unit id="b64ebc99af83053596191ba8428a4a73a05f9e05" translate="yes" xml:space="preserve">
          <source>For testing AngularJS applications there are certain tools that you should use that will make testing much easier to set up and run.</source>
          <target state="translated">对于测试AngularJS应用程序,你应该使用某些工具,这些工具将使测试更容易设置和运行。</target>
        </trans-unit>
        <trans-unit id="a0981365eff2fc36be0abaf1d7aab40944bee960" translate="yes" xml:space="preserve">
          <source>For the best result, the &lt;code&gt;angular.js&lt;/code&gt; script must be loaded in the head section of the html document; alternatively, the css rule above must be included in the external stylesheet of the application.</source>
          <target state="translated">为了获得最佳结果，必须将 &lt;code&gt;angular.js&lt;/code&gt; 脚本加载到html文档的头部；或者，上述css规则必须包含在应用程序的外部样式表中。</target>
        </trans-unit>
        <trans-unit id="1cbfa677b41097f6715ec9bae88d486586566c4e" translate="yes" xml:space="preserve">
          <source>For the case of HTML, you might use a library, either on the client side, or on the server side, to sanitize unsafe HTML before binding to the value and rendering it in the document.</source>
          <target state="translated">对于HTML,你可以在客户端或服务器端使用一个库,在绑定到值并在文档中呈现之前,对不安全的HTML进行消毒。</target>
        </trans-unit>
        <trans-unit id="807df2e76c7472af78eccb593edb0cfe6ff5aaf1" translate="yes" xml:space="preserve">
          <source>For the following examples, we'll use the prefix &lt;code&gt;my&lt;/code&gt; (e.g. &lt;code&gt;myCustomer&lt;/code&gt;).</source>
          <target state="translated">对于以下示例，我们将使用前缀 &lt;code&gt;my&lt;/code&gt; （例如 &lt;code&gt;myCustomer&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="960d746344ec6d94fdf45b4493cec7cf2ec6fcad" translate="yes" xml:space="preserve">
          <source>For the general details about this service in AngularJS, read the main page for &lt;a href=&quot;../service/%24sce&quot;&gt;Strict Contextual Escaping (SCE)&lt;/a&gt;.</source>
          <target state="translated">有关AngularJS中此服务的一般详细信息，请阅读&lt;a href=&quot;../service/%24sce&quot;&gt;Strict Contextual Escaping（SCE）的&lt;/a&gt;主页。</target>
        </trans-unit>
        <trans-unit id="18276b32129c935a3f68b3699c65cc3ed663b628" translate="yes" xml:space="preserve">
          <source>For this reason, AngularJS prevents the default action (form submission to the server) unless the &lt;code&gt;&amp;lt;form&amp;gt;&lt;/code&gt; element has an &lt;code&gt;action&lt;/code&gt; attribute specified.</source>
          <target state="translated">因此，除非 &lt;code&gt;&amp;lt;form&amp;gt;&lt;/code&gt; 元素指定了 &lt;code&gt;action&lt;/code&gt; 属性，否则AngularJS会阻止默认操作（将表单提交到服务器）。</target>
        </trans-unit>
        <trans-unit id="59a0dc0f6babb8c929909c5324c52ffba8f70e1b" translate="yes" xml:space="preserve">
          <source>For this reason, AngularJS provides special &lt;code&gt;ng&lt;/code&gt;-prefixed directives for the following boolean attributes: &lt;a href=&quot;../api/ng/directive/ngdisabled&quot;&gt;&lt;code&gt;disabled&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../api/ng/directive/ngrequired&quot;&gt;&lt;code&gt;required&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../api/ng/directive/ngselected&quot;&gt;&lt;code&gt;selected&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../api/ng/directive/ngchecked&quot;&gt;&lt;code&gt;checked&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../api/ng/directive/ngreadonly&quot;&gt;&lt;code&gt;readOnly&lt;/code&gt;&lt;/a&gt; , and &lt;a href=&quot;../api/ng/directive/ngopen&quot;&gt;&lt;code&gt;open&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">因此，AngularJS为以下布尔属性提供特殊的 &lt;code&gt;ng&lt;/code&gt; 前缀指令：&lt;a href=&quot;../api/ng/directive/ngdisabled&quot;&gt; &lt;code&gt;disabled&lt;/code&gt; &lt;/a&gt;，&lt;a href=&quot;../api/ng/directive/ngrequired&quot;&gt; &lt;code&gt;required&lt;/code&gt; &lt;/a&gt;，&lt;a href=&quot;../api/ng/directive/ngselected&quot;&gt; &lt;code&gt;selected&lt;/code&gt; &lt;/a&gt;，&lt;a href=&quot;../api/ng/directive/ngchecked&quot;&gt; &lt;code&gt;checked&lt;/code&gt; &lt;/a&gt;，&lt;a href=&quot;../api/ng/directive/ngreadonly&quot;&gt; &lt;code&gt;readOnly&lt;/code&gt; &lt;/a&gt;和&lt;a href=&quot;../api/ng/directive/ngopen&quot;&gt; &lt;code&gt;open&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="3230a2f947a8018219006b3929f539fd927003d2" translate="yes" xml:space="preserve">
          <source>For this, inject a dependency with the name &lt;code&gt;&amp;lt;filterName&amp;gt;Filter&lt;/code&gt; into your controller/service/directive. E.g. a filter called &lt;code&gt;number&lt;/code&gt; is injected by using the dependency &lt;code&gt;numberFilter&lt;/code&gt;. The injected argument is a function that takes the value to format as first argument, and filter parameters starting with the second argument.</source>
          <target state="translated">为此，将名称为 &lt;code&gt;&amp;lt;filterName&amp;gt;Filter&lt;/code&gt; 的依赖项注入到控制器/服务/指令中。例如，通过使用依赖项 &lt;code&gt;numberFilter&lt;/code&gt; 注入了一个名为 &lt;code&gt;number&lt;/code&gt; 的过滤器。注入的参数是一个函数，该函数将要格式化的值用作第一个参数，并从第二个参数开始过滤参数。</target>
        </trans-unit>
        <trans-unit id="79c0422145c2571f4818e372784001318ee45548" translate="yes" xml:space="preserve">
          <source>For those elements using ngModel, ngAria will dynamically bind and update the following ARIA attributes (if they have not been explicitly specified by the developer):</source>
          <target state="translated">对于那些使用ngModel的元素,ngAria将动态绑定并更新以下ARIA属性(如果开发者没有明确指定)。</target>
        </trans-unit>
        <trans-unit id="5364d19c24f92cd90b7c73685bff662a0a4cfa1a" translate="yes" xml:space="preserve">
          <source>For unit testing applications that use &lt;code&gt;$http&lt;/code&gt; service, see &lt;a href=&quot;../../ngmock/service/%24httpbackend&quot;&gt;$httpBackend mock&lt;/a&gt;.</source>
          <target state="translated">有关使用 &lt;code&gt;$http&lt;/code&gt; 服务的单元测试应用程序，请参见&lt;a href=&quot;../../ngmock/service/%24httpbackend&quot;&gt;$ httpBackend模拟&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="052fb3b37ae2bbf010c88dd3bc6c08df91652edd" translate="yes" xml:space="preserve">
          <source>Forgiving</source>
          <target state="translated">Forgiving</target>
        </trans-unit>
        <trans-unit id="abc67155e14921e60c9bacfaf13e79f8e7ecfc81" translate="yes" xml:space="preserve">
          <source>Form and controls provide validation services, so that the user can be notified of invalid input before submitting a form. This provides a better user experience than server-side validation alone because the user gets instant feedback on how to correct the error. Keep in mind that while client-side validation plays an important role in providing good user experience, it can easily be circumvented and thus can not be trusted. Server-side validation is still necessary for a secure application.</source>
          <target state="translated">表单和控件提供验证服务,以便在提交表单之前通知用户无效的输入。这比单纯的服务器端验证提供了更好的用户体验,因为用户可以得到关于如何纠正错误的即时反馈。请记住,虽然客户端验证在提供良好的用户体验方面发挥了重要作用,但它很容易被规避,因此不能被信任。服务器端验证对于一个安全的应用来说仍然是必要的。</target>
        </trans-unit>
        <trans-unit id="1eedca47903886a532d39ee2257b013bc5c557cd" translate="yes" xml:space="preserve">
          <source>Format input &amp;mdash; Use &lt;a href=&quot;forms&quot;&gt;AngularJS form controls&lt;/a&gt; instead.</source>
          <target state="translated">格式输入-改用&lt;a href=&quot;forms&quot;&gt;AngularJS表单控件&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="b9fd294ed8b67f7239254353f7b9ddfee62002f1" translate="yes" xml:space="preserve">
          <source>Format of items in &lt;a href=&quot;../provider/%24scedelegateprovider#resourceUrlWhitelist.html&quot;&gt;resourceUrlWhitelist&lt;/a&gt;/&lt;a href=&quot;../provider/%24scedelegateprovider#resourceUrlBlacklist.html&quot;&gt;Blacklist&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;../provider/%24scedelegateprovider#resourceUrlWhitelist.html&quot;&gt;resourceUrlWhitelist&lt;/a&gt; / &lt;a href=&quot;../provider/%24scedelegateprovider#resourceUrlBlacklist.html&quot;&gt;Blacklist&lt;/a&gt;中项目的格式</target>
        </trans-unit>
        <trans-unit id="d29adb3f4ca339ebdff8dbe1aaae081f33e02725" translate="yes" xml:space="preserve">
          <source>Format of items in &lt;a href=&quot;../provider/%24scedelegateprovider#trustedResourceUrlList.html&quot;&gt;trustedResourceUrlList&lt;/a&gt;/&lt;a href=&quot;../provider/%24scedelegateprovider#bannedResourceUrlList.html&quot;&gt;bannedResourceUrlList&lt;/a&gt;</source>
          <target state="translated">Format of items in &lt;a href=&quot;../provider/%24scedelegateprovider#trustedResourceUrlList.html&quot;&gt;trustedResourceUrlList&lt;/a&gt;/&lt;a href=&quot;../provider/%24scedelegateprovider#bannedResourceUrlList.html&quot;&gt;bannedResourceUrlList&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="8e17b9df66528716e814be197136b7a326516c1c" translate="yes" xml:space="preserve">
          <source>Formats &lt;code&gt;date&lt;/code&gt; to a string based on the requested &lt;code&gt;format&lt;/code&gt;.</source>
          <target state="translated">根据请求的 &lt;code&gt;format&lt;/code&gt; 将 &lt;code&gt;date&lt;/code&gt; 格式化为字符串。</target>
        </trans-unit>
        <trans-unit id="eb856525f448d550db676ecb20ddcdce2f9183a5" translate="yes" xml:space="preserve">
          <source>Formats a number as a currency (ie $1,234.56). When no currency symbol is provided, default symbol for current locale is used.</source>
          <target state="translated">将一个数字格式化为货币(例如:1,234.56美元)。当没有提供货币符号时,将使用当前地区的默认符号。</target>
        </trans-unit>
        <trans-unit id="69675ca3093ae5e95c7f23454bbb0ec2a3e3a132" translate="yes" xml:space="preserve">
          <source>Formats a number as text.</source>
          <target state="translated">将数字格式化为文本。</target>
        </trans-unit>
        <trans-unit id="43567c9dea743d47cb7123053dbe369243a548e8" translate="yes" xml:space="preserve">
          <source>Formatted number.</source>
          <target state="translated">格式化的数字。</target>
        </trans-unit>
        <trans-unit id="a511d54043ebc3e9c36c28add78796a0f3f9f424" translate="yes" xml:space="preserve">
          <source>Formatted string or the input if input is not recognized as date/millis.</source>
          <target state="translated">格式化的字符串或输入,如果输入不被识别为日期/千分表。</target>
        </trans-unit>
        <trans-unit id="feaca5c695540ca4a17380a6775827911844a0ef" translate="yes" xml:space="preserve">
          <source>Formatters are used to format / convert the &lt;a href=&quot;ngmodel.ngmodelcontroller#%24modelValue.html&quot;&gt;&lt;code&gt;$modelValue&lt;/code&gt;&lt;/a&gt; for display in the control.</source>
          <target state="translated">格式化程序用于格式化/转换&lt;a href=&quot;ngmodel.ngmodelcontroller#%24modelValue.html&quot;&gt; &lt;code&gt;$modelValue&lt;/code&gt; &lt;/a&gt;以便在控件中显示。</target>
        </trans-unit>
        <trans-unit id="e6e18ee88ca6b32cea05d0e3080d8f655d9521b6" translate="yes" xml:space="preserve">
          <source>Formatting rules (see Description). If not specified, &lt;code&gt;mediumDate&lt;/code&gt; is used.</source>
          <target state="translated">格式化规则（请参阅描述）。如果未指定，则使用 &lt;code&gt;mediumDate&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="3f0b06a027f8381260596b559c5a0e8d57007109" translate="yes" xml:space="preserve">
          <source>Formatting the value of time and datetime-local</source>
          <target state="translated">格式化时间和日期时间-本地的值。</target>
        </trans-unit>
        <trans-unit id="4bec9575721b2739ed1e7c56eb6c8471084fcbcf" translate="yes" xml:space="preserve">
          <source>Forms</source>
          <target state="translated">Forms</target>
        </trans-unit>
        <trans-unit id="34e426cd3274227d580489998337e732030d7d3c" translate="yes" xml:space="preserve">
          <source>Free Course</source>
          <target state="translated">免费课程</target>
        </trans-unit>
        <trans-unit id="b1cc7a14b45bb59084312de228fdaae722b439c3" translate="yes" xml:space="preserve">
          <source>From a testability point of view, the separation of the controller and the view is desirable, because it allows us to test the behavior without being distracted by the rendering details.</source>
          <target state="translated">从可测试性的角度来看,控制器和视图的分离是可取的,因为它允许我们测试行为而不被渲染细节所干扰。</target>
        </trans-unit>
        <trans-unit id="ff161838502e7c8b317b65fb969c906dab1f4586" translate="yes" xml:space="preserve">
          <source>From the perspective of dealing with error handling, deferred and promise APIs are to asynchronous programming what &lt;code&gt;try&lt;/code&gt;, &lt;code&gt;catch&lt;/code&gt; and &lt;code&gt;throw&lt;/code&gt; keywords are to synchronous programming.</source>
          <target state="translated">从处理错误处理的角度来看，延迟和承诺API对于异步编程而言是 &lt;code&gt;try&lt;/code&gt; ， &lt;code&gt;catch&lt;/code&gt; 和 &lt;code&gt;throw&lt;/code&gt; 关键字对于异步编程而言。</target>
        </trans-unit>
        <trans-unit id="d73e691376909588e8dda5cc25ad70145db6e2ea" translate="yes" xml:space="preserve">
          <source>Fulfills multiple requests</source>
          <target state="translated">满足多个请求</target>
        </trans-unit>
        <trans-unit id="f1e410ad1472b42cb42cc98962428637290b6706" translate="yes" xml:space="preserve">
          <source>Function</source>
          <target state="translated">Function</target>
        </trans-unit>
        <trans-unit id="7e9e8ac7651cc9a1d61043f76ffdf8a16490138a" translate="yes" xml:space="preserve">
          <source>Function components in ng</source>
          <target state="translated">ng中的功能组件</target>
        </trans-unit>
        <trans-unit id="299be8740244752c39ca3ccf8a970cee133c25c2" translate="yes" xml:space="preserve">
          <source>Function components in ngMock</source>
          <target state="translated">ngMock中的功能组件</target>
        </trans-unit>
        <trans-unit id="c76a84b175d34bf214149af2c9e8f9e13e2e4fcc" translate="yes" xml:space="preserve">
          <source>Function for creating new instance of the service.</source>
          <target state="translated">用于创建新的服务实例的功能。</target>
        </trans-unit>
        <trans-unit id="7090d50b6c70bb19d3d516b59283dff809cdae61" translate="yes" xml:space="preserve">
          <source>Function for which dependent service names need to be retrieved as described above.</source>
          <target state="translated">如上所述,需要检索依赖服务名称的功能。</target>
        </trans-unit>
        <trans-unit id="c4ac49e1d1511eed6fbb89bab7baa0e4b33a477d" translate="yes" xml:space="preserve">
          <source>Function that will be called whenever the interpolated value of the attribute changes. See the &lt;a href=&quot;../../../guide/interpolation#how-text-and-attribute-bindings-work.html&quot;&gt;Interpolation guide&lt;/a&gt; for more info.</source>
          <target state="translated">每当属性的插值更改时将调用的函数。有关更多信息，请参见&lt;a href=&quot;../../../guide/interpolation#how-text-and-attribute-bindings-work.html&quot;&gt;插值指南&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="b463c12a5f308c5c4aafc3e574eff48f177aef97" translate="yes" xml:space="preserve">
          <source>Function that wraps the &lt;code&gt;fn&lt;/code&gt; with all the specified bindings.</source>
          <target state="translated">用所有指定的绑定包装 &lt;code&gt;fn&lt;/code&gt; 的函数。</target>
        </trans-unit>
        <trans-unit id="fca9f3655fbd49d7d73e9fc899dae1611e2d1e66" translate="yes" xml:space="preserve">
          <source>Function to be bound.</source>
          <target state="translated">要绑定的功能。</target>
        </trans-unit>
        <trans-unit id="719583f650cbb51ca93d209fd7733efacca091e6" translate="yes" xml:space="preserve">
          <source>Function to call when the event is emitted.</source>
          <target state="translated">事件发生时调用的函数。</target>
        </trans-unit>
        <trans-unit id="195099197fbc90af0bf8f3534cf2c2ffbe52076f" translate="yes" xml:space="preserve">
          <source>Function which is responsible for resolving or rejecting the newly created promise. The first parameter is a function which resolves the promise, the second parameter is a function which rejects the promise.</source>
          <target state="translated">负责解析或拒绝新创建的承诺的函数。第一个参数是解析承诺的函数,第二个参数是拒绝承诺的函数。</target>
        </trans-unit>
        <trans-unit id="dbcc17581b648df6a6e5ecca84fd052cd7f998ad" translate="yes" xml:space="preserve">
          <source>Fundamentals in 60 Minutes (video)</source>
          <target state="translated">60分钟的基础知识(视频</target>
        </trans-unit>
        <trans-unit id="bafd4b54282745a2bed1442852b73f4b3189a77a" translate="yes" xml:space="preserve">
          <source>Further Reading</source>
          <target state="translated">进一步阅读</target>
        </trans-unit>
        <trans-unit id="03be4828bd04065e742a929df12bd3febf535195" translate="yes" xml:space="preserve">
          <source>Future route information.</source>
          <target state="translated">未来的路线信息。</target>
        </trans-unit>
        <trans-unit id="4f00f495f1b31beea48aec4250e15a8cb8f378e0" translate="yes" xml:space="preserve">
          <source>Games and GUI editors are examples of applications with intensive and tricky DOM manipulation. These kinds of apps are different from CRUD apps, and as a result are probably not a good fit for AngularJS. In these cases it may be better to use a library with a lower level of abstraction, such as &lt;code&gt;jQuery&lt;/code&gt;.</source>
          <target state="translated">游戏和GUI编辑器是具有密集而棘手的DOM操作的应用程序示例。这些应用程序与CRUD应用程序不同，因此可能不适合AngularJS。在这些情况下，最好使用抽象级别较低的库，例如 &lt;code&gt;jQuery&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="8a754c61c2ced0c5ff79a1827e02c9d643d6d926" translate="yes" xml:space="preserve">
          <source>Gender</source>
          <target state="translated">Gender</target>
        </trans-unit>
        <trans-unit id="022ad2aec8e03d3aeffcc6353469c736894859fc" translate="yes" xml:space="preserve">
          <source>Gender (aka select) Syntax</source>
          <target state="translated">性别(又称选择)语法</target>
        </trans-unit>
        <trans-unit id="9239ee2cda84eca4c3440e2a7b50148af67da3d4" translate="yes" xml:space="preserve">
          <source>General</source>
          <target state="translated">General</target>
        </trans-unit>
        <trans-unit id="37a13a917db9fd6aaad1b1420d262dd85b0845b4" translate="yes" xml:space="preserve">
          <source>General Learning Resources</source>
          <target state="translated">一般学习资源</target>
        </trans-unit>
        <trans-unit id="fbfff011ffdaef489b35073be8fbf243896fd8d0" translate="yes" xml:space="preserve">
          <source>General Use</source>
          <target state="translated">一般用途</target>
        </trans-unit>
        <trans-unit id="ed7feb5b4fe5b0b70af5a852a8c4193e523ae7ea" translate="yes" xml:space="preserve">
          <source>General overview of the API</source>
          <target state="translated">API概述</target>
        </trans-unit>
        <trans-unit id="098a776c18aed363a9dd217893658630e8cd72e8" translate="yes" xml:space="preserve">
          <source>General usage</source>
          <target state="translated">一般用途</target>
        </trans-unit>
        <trans-unit id="8245f1469399dc21184c708cfafeb02fe22720e6" translate="yes" xml:space="preserve">
          <source>Get access to a cache object by the &lt;code&gt;cacheId&lt;/code&gt; used when it was created.</source>
          <target state="translated">通过创建时使用的 &lt;code&gt;cacheId&lt;/code&gt; 获取对缓存对象的访问。</target>
        </trans-unit>
        <trans-unit id="e2634d2ab675dfb52782612c8c407712d90ab4ae" translate="yes" xml:space="preserve">
          <source>Get information about all the caches that have been created</source>
          <target state="translated">获取所有已创建的缓存信息。</target>
        </trans-unit>
        <trans-unit id="b7660cf3196f07e0a3ec7d200a945203c052a995" translate="yes" xml:space="preserve">
          <source>Getter and setter methods</source>
          <target state="translated">Getter和setter方法</target>
        </trans-unit>
        <trans-unit id="9633645141a566c014c4723a2e74a10b5b9548d9" translate="yes" xml:space="preserve">
          <source>Getters (calls to methods without parameters) return decoded values for the following methods &lt;code&gt;path()&lt;/code&gt;, &lt;code&gt;search()&lt;/code&gt;, &lt;code&gt;hash()&lt;/code&gt;.</source>
          <target state="translated">Getter（对不带参数的方法的调用）返回以下方法 &lt;code&gt;path()&lt;/code&gt; ， &lt;code&gt;search()&lt;/code&gt; ， &lt;code&gt;hash()&lt;/code&gt; 的解码值。</target>
        </trans-unit>
        <trans-unit id="9a0f73ca6aa746ede1e77153dd3bf5bb16e841ab" translate="yes" xml:space="preserve">
          <source>Getting Help</source>
          <target state="translated">获得帮助</target>
        </trans-unit>
        <trans-unit id="5442e2b64fa09764b9f593867e59a97292c84059" translate="yes" xml:space="preserve">
          <source>GitHub</source>
          <target state="translated">GitHub</target>
        </trans-unit>
        <trans-unit id="125fce7f6e4e46718b4324a9e531f51dac5b5239" translate="yes" xml:space="preserve">
          <source>Gitter</source>
          <target state="translated">Gitter</target>
        </trans-unit>
        <trans-unit id="8f89c3a7b049617c085d0669638c1304642c269d" translate="yes" xml:space="preserve">
          <source>Give your directive the &lt;code&gt;terminal&lt;/code&gt; property and a higher priority than directives that should not be compiled twice. In the example, the compiler will only compile directives which have a priority of 100 or higher.</source>
          <target state="translated">给您的指令以 &lt;code&gt;terminal&lt;/code&gt; 属性和比不应编译两次的指令更高的优先级。在该示例中，编译器将仅编译优先级为100或更高的指令。</target>
        </trans-unit>
        <trans-unit id="a4944830e9ab64a911c6a61e799488b1d408b662" translate="yes" xml:space="preserve">
          <source>Given a function, the injector can infer the names of the services to inject by examining the function declaration and extracting the parameter names. In the above example, &lt;code&gt;$scope&lt;/code&gt; and &lt;code&gt;greeter&lt;/code&gt; are two services which need to be injected into the function.</source>
          <target state="translated">给定一个函数，注入器可以通过检查函数声明并提取参数名称来推断要注入的服务的名称。在上面的示例中， &lt;code&gt;$scope&lt;/code&gt; 和 &lt;code&gt;greeter&lt;/code&gt; 是需要注入到函数中的两个服务。</target>
        </trans-unit>
        <trans-unit id="8e22639ca85295c0d8a371689da6f4b5266c177d" translate="yes" xml:space="preserve">
          <source>Given a template &lt;code&gt;/path/:verb&lt;/code&gt; and parameter &lt;code&gt;{verb: 'greet', salutation: 'Hello'}&lt;/code&gt; results in URL &lt;code&gt;/path/greet?salutation=Hello&lt;/code&gt;.</source>
          <target state="translated">给定模板 &lt;code&gt;/path/:verb&lt;/code&gt; 和参数 &lt;code&gt;{verb: 'greet', salutation: 'Hello'}&lt;/code&gt; 会生成URL &lt;code&gt;/path/greet?salutation=Hello&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="da53969ab67a277a2236b7677eabc9291e416b28" translate="yes" xml:space="preserve">
          <source>Given an expression that starts with &lt;code&gt;::&lt;/code&gt;, when a digest loop is entered and expression is dirty-checked, store the value as V</source>
          <target state="translated">给定一个以 &lt;code&gt;::&lt;/code&gt; 开头的表达式，当进入摘要循环并且对该表达式进行脏检查时，将该值存储为V</target>
        </trans-unit>
        <trans-unit id="fd29881d160148e4919339fe869d1ba4998c6ef7" translate="yes" xml:space="preserve">
          <source>Given an object and a security context in which to assign it, returns a value that's safe to use in this context, which was represented by the parameter. To do so, this function either unwraps the safe type it has been given (for instance, a &lt;a href=&quot;%24scedelegate#trustAs.html&quot;&gt;&lt;code&gt;$sceDelegate.trustAs&lt;/code&gt;&lt;/a&gt; result), or it might try to sanitize the value given, depending on the context and sanitizer availablility.</source>
          <target state="translated">给定对象和在其中分配对象的安全上下文，将返回一个可以在该上下文中安全使用的值，该值由参数表示。为此，此函数要么解开已给定的安全类型（例如，&lt;a href=&quot;%24scedelegate#trustAs.html&quot;&gt; &lt;code&gt;$sceDelegate.trustAs&lt;/code&gt; &lt;/a&gt;结果），要么根据上下文和清理程序的可用性尝试清理给定的值。</target>
        </trans-unit>
        <trans-unit id="9a257da8c321c097fe8fe5cc955c19057fa2bffc" translate="yes" xml:space="preserve">
          <source>Given the following error object for our example (which informs us that the field &lt;code&gt;myField&lt;/code&gt; currently has both the &lt;code&gt;required&lt;/code&gt; and &lt;code&gt;email&lt;/code&gt; errors):</source>
          <target state="translated">对于我们的示例，给出以下错误对象（它通知我们 &lt;code&gt;myField&lt;/code&gt; 字段当前同时具有 &lt;code&gt;required&lt;/code&gt; 和 &lt;code&gt;email&lt;/code&gt; 错误）：</target>
        </trans-unit>
        <trans-unit id="f9f18e9100167b3cbe391107f9b9896237d584ce" translate="yes" xml:space="preserve">
          <source>Given the nature of &lt;code&gt;ngModelOptions&lt;/code&gt;, the value displayed inside input fields in the view might be different from the value in the actual model. This means that if you update the model you should also invoke &lt;a href=&quot;../type/ngmodel.ngmodelcontroller#%24rollbackViewValue.html&quot;&gt;&lt;code&gt;ngModel.NgModelController&lt;/code&gt;&lt;/a&gt; on the relevant input field in order to make sure it is synchronized with the model and that any debounced action is canceled.</source>
          <target state="translated">鉴于 &lt;code&gt;ngModelOptions&lt;/code&gt; 的性质，视图中输入字段内显示的值可能与实际模型中的值不同。这意味着，如果更新模型，还应该在相关的输入字段上调用&lt;a href=&quot;../type/ngmodel.ngmodelcontroller#%24rollbackViewValue.html&quot;&gt; &lt;code&gt;ngModel.NgModelController&lt;/code&gt; &lt;/a&gt;，以确保它与模型同步并且取消了任何反跳动作。</target>
        </trans-unit>
        <trans-unit id="120a32f853f560c1d2bd012c26941580cd618e1e" translate="yes" xml:space="preserve">
          <source>Given this array of items on the $scope:</source>
          <target state="translated">鉴于$scope上的这个项目数组。</target>
        </trans-unit>
        <trans-unit id="660a89b0fbdf53826bcc57234ddbd04675201f3d" translate="yes" xml:space="preserve">
          <source>Given this complex combination of CSS classes, styles and options, &lt;code&gt;$animateCss&lt;/code&gt; will figure everything out and make the animation happen.</source>
          <target state="translated">鉴于CSS类，样式和选项的这种复杂组合， &lt;code&gt;$animateCss&lt;/code&gt; 将解决所有问题并使动画发生。</target>
        </trans-unit>
        <trans-unit id="f77562ae0f3df5f61f357418891b85a82b5f1b10" translate="yes" xml:space="preserve">
          <source>Google+</source>
          <target state="translated">Google+</target>
        </trans-unit>
        <trans-unit id="99e8c59f379e7741fc044ae1510082583a27eb98" translate="yes" xml:space="preserve">
          <source>Grouping of HTML into reusable components.</source>
          <target state="translated">将HTML分组为可重复使用的组件。</target>
        </trans-unit>
        <trans-unit id="3ba448f1c251a3f30a4894252c910f2f06e1790f" translate="yes" xml:space="preserve">
          <source>Grouping related tests within &lt;code&gt;describe&lt;/code&gt; blocks and describing each individual test within an &lt;code&gt;it&lt;/code&gt; call keeps your tests self documenting.</source>
          <target state="translated">在 &lt;code&gt;describe&lt;/code&gt; 块内对相关测试进行分组，并在 &lt;code&gt;it&lt;/code&gt; 调用内描述每个测试，以使您的测试能够自我记录。</target>
        </trans-unit>
        <trans-unit id="bf073fae640ded81eeb7a4cee70faff4a623c16c" translate="yes" xml:space="preserve">
          <source>Guide</source>
          <target state="translated">Guide</target>
        </trans-unit>
        <trans-unit id="4857fab7166afc1434fd0e5b087340d9d836a21f" translate="yes" xml:space="preserve">
          <source>Guide: Forms</source>
          <target state="translated">指南。表格</target>
        </trans-unit>
        <trans-unit id="082638bfa9b018580d30a942ed8e17ec72bfee8f" translate="yes" xml:space="preserve">
          <source>HTML &lt;code&gt;select&lt;/code&gt; element with AngularJS data-binding.</source>
          <target state="translated">具有AngularJS数据绑定的HTML &lt;code&gt;select&lt;/code&gt; 元素。</target>
        </trans-unit>
        <trans-unit id="1ed7cdfdbf49bfaa13fce98fe7cec3a1c300e160" translate="yes" xml:space="preserve">
          <source>HTML Compiler</source>
          <target state="translated">HTML编译器</target>
        </trans-unit>
        <trans-unit id="8103e94886ef5d4fe535735e02a17a98d0a0dda5" translate="yes" xml:space="preserve">
          <source>HTML Sanitization</source>
          <target state="translated">HTML消毒</target>
        </trans-unit>
        <trans-unit id="dcfc59be6d6b598114227a2015e59e2456f6c3a9" translate="yes" xml:space="preserve">
          <source>HTML checkbox.</source>
          <target state="translated">HTML复选框。</target>
        </trans-unit>
        <trans-unit id="956dfc4aa08de7e5a58a5878e750adab8be1a7a5" translate="yes" xml:space="preserve">
          <source>HTML compilation happens in three phases:</source>
          <target state="translated">HTML编译分三个阶段进行。</target>
        </trans-unit>
        <trans-unit id="365711f3aa530a2399266a71af0d94bbd34fb790" translate="yes" xml:space="preserve">
          <source>HTML compiler</source>
          <target state="translated">HTML编译器</target>
        </trans-unit>
        <trans-unit id="9eb40b7d07d13c87ed32d2291d04e9ac3fc3ab1c" translate="yes" xml:space="preserve">
          <source>HTML has a lot of constructs for formatting the HTML for static documents in a declarative fashion. For example if something needs to be centered, there is no need to provide instructions to the browser how the window size needs to be divided in half so that the center is found, and that this center needs to be aligned with the text's center. Simply add an &lt;code&gt;align=&quot;center&quot;&lt;/code&gt; attribute to any element to achieve the desired behavior. Such is the power of declarative language.</source>
          <target state="translated">HTML具有许多用于以声明方式格式化静态文档的HTML的结构。例如，如果某些内容需要居中，则无需向浏览器提供说明如何将窗口大小分成两半才能找到中心，并且该中心必须与文本的中心对齐。只需将 &lt;code&gt;align=&quot;center&quot;&lt;/code&gt; 属性添加到任何元素即可实现所需的行为。这就是声明性语言的力量。</target>
        </trans-unit>
        <trans-unit id="bd11a5d2ff3115a84c7177fab98a96885225b6f0" translate="yes" xml:space="preserve">
          <source>HTML input element control. When used together with &lt;a href=&quot;directive/ngmodel&quot;&gt;&lt;code&gt;ngModel&lt;/code&gt;&lt;/a&gt;, it provides data-binding, input state control, and validation. Input control follows HTML5 input types and polyfills the HTML5 validation behavior for older browsers.</source>
          <target state="translated">HTML输入元素控件。与&lt;a href=&quot;directive/ngmodel&quot;&gt; &lt;code&gt;ngModel&lt;/code&gt; &lt;/a&gt;一起使用时，它提供数据绑定，输入状态控制和验证。输入控件遵循HTML5输入类型，并填充旧浏览器的HTML5验证行为。</target>
        </trans-unit>
        <trans-unit id="75cd325edf2be9c413b3f9e3b95e9fce9dfbe8ca" translate="yes" xml:space="preserve">
          <source>HTML input element control. When used together with &lt;a href=&quot;ngmodel&quot;&gt;&lt;code&gt;ngModel&lt;/code&gt;&lt;/a&gt;, it provides data-binding, input state control, and validation. Input control follows HTML5 input types and polyfills the HTML5 validation behavior for older browsers.</source>
          <target state="translated">HTML输入元素控件。与&lt;a href=&quot;ngmodel&quot;&gt; &lt;code&gt;ngModel&lt;/code&gt; &lt;/a&gt;一起使用时，它提供数据绑定，输入状态控制和验证。输入控件遵循HTML5输入类型，并填充旧浏览器的HTML5验证行为。</target>
        </trans-unit>
        <trans-unit id="b52ce58ede873fa3ffe8c4f4b95938da98b79e53" translate="yes" xml:space="preserve">
          <source>HTML input.</source>
          <target state="translated">HTML输入。</target>
        </trans-unit>
        <trans-unit id="3002c557c6e602f4fc52a7ef3b7fe2ffd052cecd" translate="yes" xml:space="preserve">
          <source>HTML link rewriting</source>
          <target state="translated">HTML链接重写</target>
        </trans-unit>
        <trans-unit id="0e0f1476dcc9c91e2471380aac237c3c16762a4f" translate="yes" xml:space="preserve">
          <source>HTML markup that may:</source>
          <target state="translated">HTML标记,可。</target>
        </trans-unit>
        <trans-unit id="f58f18b2a197f082495e5aabb52b36faf0d3e7ac" translate="yes" xml:space="preserve">
          <source>HTML radio button.</source>
          <target state="translated">HTML单选按钮。</target>
        </trans-unit>
        <trans-unit id="673e4be38003649fd68400ae693d19b8570e48ea" translate="yes" xml:space="preserve">
          <source>HTML string or DOMElement to be wrapped into jQuery.</source>
          <target state="translated">将HTML字符串或DOME元素封装到jQuery中。</target>
        </trans-unit>
        <trans-unit id="28dfba92f8df7dc9094d96723e46d403afe9cf5f" translate="yes" xml:space="preserve">
          <source>HTML textarea element control with AngularJS data-binding. The data-binding and validation properties of this element are exactly the same as those of the &lt;a href=&quot;directive/input&quot;&gt;input element&lt;/a&gt;.</source>
          <target state="translated">带有AngularJS数据绑定的HTML textarea元素控件。此元素的数据绑定和验证属性与&lt;a href=&quot;directive/input&quot;&gt;input元素&lt;/a&gt;的数据绑定和验证属性完全相同。</target>
        </trans-unit>
        <trans-unit id="90fae27fbf7cecfb835c5ded77341c01b96b78d4" translate="yes" xml:space="preserve">
          <source>HTML textarea element control with AngularJS data-binding. The data-binding and validation properties of this element are exactly the same as those of the &lt;a href=&quot;input&quot;&gt;input element&lt;/a&gt;.</source>
          <target state="translated">带有AngularJS数据绑定的HTML textarea元素控件。此元素的数据绑定和验证属性与&lt;a href=&quot;input&quot;&gt;input元素&lt;/a&gt;的数据绑定和验证属性完全相同。</target>
        </trans-unit>
        <trans-unit id="380dca5d29ff8bcbe21b89ea209d96e274ac2a42" translate="yes" xml:space="preserve">
          <source>HTML with additional markup</source>
          <target state="translated">带附加标记的HTML</target>
        </trans-unit>
        <trans-unit id="23e0aec9dcd186ca573c4b402ff2facf4bbfa786" translate="yes" xml:space="preserve">
          <source>HTML5 constraint validation and allowInvalid</source>
          <target state="translated">HTML5约束验证和allowInvalid。</target>
        </trans-unit>
        <trans-unit id="919928d7bcf7b5802913b51423e1f3fc331681f0" translate="yes" xml:space="preserve">
          <source>HTML5 mode</source>
          <target state="translated">HTML5模式</target>
        </trans-unit>
        <trans-unit id="147cce8975179e5500fc1bb079891e026beac7f0" translate="yes" xml:space="preserve">
          <source>HTTP Requests</source>
          <target state="translated">HTTP请求</target>
        </trans-unit>
        <trans-unit id="6e5a031619e754e2aaded2be7edff5361ccb3202" translate="yes" xml:space="preserve">
          <source>HTTP backend used by the &lt;a href=&quot;%24http&quot;&gt;service&lt;/a&gt; that delegates to XMLHttpRequest object or JSONP and deals with browser incompatibilities.</source>
          <target state="translated">委托给XMLHttpRequest对象或JSONP并处理浏览器不兼容性的&lt;a href=&quot;%24http&quot;&gt;服务&lt;/a&gt;使用的HTTP后端。</target>
        </trans-unit>
        <trans-unit id="0843ce217fdeb5d4a43dd425f0f9a5e92422e97d" translate="yes" xml:space="preserve">
          <source>HTTP backend used by the &lt;a href=&quot;service/%24http&quot;&gt;service&lt;/a&gt; that delegates to XMLHttpRequest object or JSONP and deals with browser incompatibilities.</source>
          <target state="translated">委托给XMLHttpRequest对象或JSONP并处理浏览器不兼容性的&lt;a href=&quot;service/%24http&quot;&gt;服务&lt;/a&gt;使用的HTTP后端。</target>
        </trans-unit>
        <trans-unit id="11ed26cd0ecb017842889c5368f7817eb65b4c04" translate="yes" xml:space="preserve">
          <source>HTTP headers or function that receives http header object and returns true if the headers match the current definition.</source>
          <target state="translated">HTTP头文件或接收http头文件对象的函数,如果头文件符合当前定义,则返回true。</target>
        </trans-unit>
        <trans-unit id="e9f0ada937e7482930d25244a71bfc57dc18e31b" translate="yes" xml:space="preserve">
          <source>HTTP headers or function that receives http header object and returns true if the headers match the current expectation.</source>
          <target state="translated">HTTP头文件或接收http头文件对象的函数,如果头文件符合当前的期望,则返回true。</target>
        </trans-unit>
        <trans-unit id="4da8efbb95087f4efaddd53fa5a5d02998d8073e" translate="yes" xml:space="preserve">
          <source>HTTP headers.</source>
          <target state="translated">HTTP头文件。</target>
        </trans-unit>
        <trans-unit id="69dcbdcaea66e534100430f491b74862af6545a6" translate="yes" xml:space="preserve">
          <source>HTTP method of the request (GET, POST, PUT, ..)</source>
          <target state="translated">请求的HTTP方法(GET,POST,PUT,...)。</target>
        </trans-unit>
        <trans-unit id="e7f701abbb4892632f63163af61f703f4d792e54" translate="yes" xml:space="preserve">
          <source>HTTP method.</source>
          <target state="translated">HTTP方法。</target>
        </trans-unit>
        <trans-unit id="739b34082ae180864afd2da55be339a290e09a21" translate="yes" xml:space="preserve">
          <source>HTTP request body or function that receives data string and returns true if the data is as expected, or Object if request body is in JSON format.</source>
          <target state="translated">接收数据字符串的HTTP请求体或函数,如果数据符合预期,则返回true,如果请求体是JSON格式,则返回Object。</target>
        </trans-unit>
        <trans-unit id="d86c6c3cef60e8657176cf9663c203f4df35ae7e" translate="yes" xml:space="preserve">
          <source>HTTP request body or function that receives data string and returns true if the data is as expected.</source>
          <target state="translated">接收数据字符串的HTTP请求体或函数,如果数据符合预期,则返回true。</target>
        </trans-unit>
        <trans-unit id="b3becea06d0acfa7255eb772d6dcbbb225cf0343" translate="yes" xml:space="preserve">
          <source>HTTP url or function that receives a url and returns true if the url matches the current definition.</source>
          <target state="translated">HTTP url或接收url的函数,如果url符合当前定义,则返回true。</target>
        </trans-unit>
        <trans-unit id="f52106e31df4471f850e4bc7609166aea45564e9" translate="yes" xml:space="preserve">
          <source>HTTP url or function that receives a url and returns true if the url matches the current expectation.</source>
          <target state="translated">HTTP url或函数,接收一个url,如果url符合当前的期望,则返回true。</target>
        </trans-unit>
        <trans-unit id="99507adf96330288819643c1bf1b9641131bf84a" translate="yes" xml:space="preserve">
          <source>HTTP url or function that receives an url and returns true if the url matches the current expectation.</source>
          <target state="translated">HTTP url或函数,接收一个url,如果url符合当前的期望,则返回true。</target>
        </trans-unit>
        <trans-unit id="ce3a987c846205d185fc2edc4fe91e7d5c5a336c" translate="yes" xml:space="preserve">
          <source>HTTP url string that supports colon param matching.</source>
          <target state="translated">支持冒号匹配的HTTP url字符串。</target>
        </trans-unit>
        <trans-unit id="f9d5d6116a9799462a571a9c71dd9f844beb5ac1" translate="yes" xml:space="preserve">
          <source>Hash with custom settings that should extend the default &lt;code&gt;$resourceProvider&lt;/code&gt; behavior. The supported options are:</source>
          <target state="translated">使用自定义设置进行哈希处理，以扩展默认的 &lt;code&gt;$resourceProvider&lt;/code&gt; 行为。支持的选项有：</target>
        </trans-unit>
        <trans-unit id="23feba264c938cd5a816b433a94ce03d183ea1f6" translate="yes" xml:space="preserve">
          <source>Hash with declaration of custom actions that will be available in addition to the default set of resource actions (see below). If a custom action has the same key as a default action (e.g. &lt;code&gt;save&lt;/code&gt;), then the default action will be &lt;em&gt;overwritten&lt;/em&gt;, and not extended.</source>
          <target state="translated">除了默认的资源操作集（请参阅下文）之外，还提供带有自定义操作的声明的散列。如果自定义动作与默认动作具有相同的键（例如 &lt;code&gt;save&lt;/code&gt; ），则默认动作将被&lt;em&gt;覆盖&lt;/em&gt;，并且不会扩展。</target>
        </trans-unit>
        <trans-unit id="cfaff8179045261bcc9e2cdcac0ab24460c6b352" translate="yes" xml:space="preserve">
          <source>Hashbang and HTML5 Modes</source>
          <target state="translated">Hashbang和HTML5模式</target>
        </trans-unit>
        <trans-unit id="1b0dd8a962c1421c7d52d29272d65b7f22a06a41" translate="yes" xml:space="preserve">
          <source>Hashbang mode</source>
          <target state="translated">散列式模式</target>
        </trans-unit>
        <trans-unit id="152790ca6a4f5a814b879804ca53c1db52354436" translate="yes" xml:space="preserve">
          <source>Hashbang mode (default mode)</source>
          <target state="translated">杂项模式(默认模式</target>
        </trans-unit>
        <trans-unit id="dc65de69cf1204a0d8f6a65f23b5cbdc59c7f6f2" translate="yes" xml:space="preserve">
          <source>Helper directive that makes it possible to create control groups inside a &lt;a href=&quot;directive/form&quot;&gt;&lt;code&gt;form&lt;/code&gt;&lt;/a&gt; directive. These &quot;child forms&quot; can be used, for example, to determine the validity of a sub-group of controls.</source>
          <target state="translated">Helper指令，可以在&lt;a href=&quot;directive/form&quot;&gt; &lt;code&gt;form&lt;/code&gt; &lt;/a&gt;指令内创建控制组。这些&amp;ldquo;子形式&amp;rdquo;可用于例如确定控件子组的有效性。</target>
        </trans-unit>
        <trans-unit id="15d728397a26dc6b863f20082f5868fb493c86c9" translate="yes" xml:space="preserve">
          <source>Helper directive that makes it possible to create control groups inside a &lt;a href=&quot;form&quot;&gt;&lt;code&gt;form&lt;/code&gt;&lt;/a&gt; directive. These &quot;child forms&quot; can be used, for example, to determine the validity of a sub-group of controls.</source>
          <target state="translated">Helper指令，可以在&lt;a href=&quot;form&quot;&gt; &lt;code&gt;form&lt;/code&gt; &lt;/a&gt;指令内创建控制组。这些&amp;ldquo;子形式&amp;rdquo;可用于例如确定控件子组的有效性。</target>
        </trans-unit>
        <trans-unit id="eace3f9f2323bbf0fc546742d11cd0621ca25ee4" translate="yes" xml:space="preserve">
          <source>Here a some examples of creating constants:</source>
          <target state="translated">这里有一些创建常量的例子。</target>
        </trans-unit>
        <trans-unit id="5e4c893051b4707f0e5b1249e7e81bc432fd4fb1" translate="yes" xml:space="preserve">
          <source>Here are a few examples of how you would usually define components:</source>
          <target state="translated">下面是几个例子,说明你通常如何定义组件。</target>
        </trans-unit>
        <trans-unit id="22cfeeec8cbcab5dc8c92c408c3caa8cfedfcb3d" translate="yes" xml:space="preserve">
          <source>Here are some examples of creating value services.</source>
          <target state="translated">下面是一些创造价值服务的例子。</target>
        </trans-unit>
        <trans-unit id="2572f0dbd83dbe653e314f42e4e17d11e1e31488" translate="yes" xml:space="preserve">
          <source>Here is a directive which makes any element draggable. Notice the &lt;code&gt;draggable&lt;/code&gt; attribute on the &lt;code&gt;&amp;lt;span&amp;gt;&lt;/code&gt; element.</source>
          <target state="translated">这是一个使任何元素都可拖动的指令。注意 &lt;code&gt;&amp;lt;span&amp;gt;&lt;/code&gt; 元素上的 &lt;code&gt;draggable&lt;/code&gt; 属性。</target>
        </trans-unit>
        <trans-unit id="62a4417e4f911e91ec77edfd2357c79ffed4f432" translate="yes" xml:space="preserve">
          <source>Here is a simple form for editing user contact information. Adding, removing, clearing, and greeting are methods declared on the controller (see source tab). These methods can easily be called from the AngularJS markup. Any changes to the data are automatically reflected in the View without the need for a manual update.</source>
          <target state="translated">这里是一个简单的编辑用户联系信息的表单。添加、删除、清除和问候是在控制器上声明的方法(见源标签)。这些方法可以从AngularJS标记中轻松调用。对数据的任何更改都会自动反映在View中,而不需要手动更新。</target>
        </trans-unit>
        <trans-unit id="34352a17a8a9151e3590aa194b3aa02094f7b560" translate="yes" xml:space="preserve">
          <source>Here is a tab pane example built from components:</source>
          <target state="translated">这里是一个由组件构建的标签窗格示例。</target>
        </trans-unit>
        <trans-unit id="1d069503fae353633f357af5e3a2b89070c3ed31" translate="yes" xml:space="preserve">
          <source>Here is an example of a simple test:</source>
          <target state="translated">下面是一个简单测试的例子。</target>
        </trans-unit>
        <trans-unit id="50474d9c5b7e0f79dfee63bb5d1c04123879a0cc" translate="yes" xml:space="preserve">
          <source>Here is an example of loading a bundle of modules, with a utility method called &lt;code&gt;getScript&lt;/code&gt;:</source>
          <target state="translated">这是一个使用名为 &lt;code&gt;getScript&lt;/code&gt; 的实用程序方法加载模块捆绑包的示例：</target>
        </trans-unit>
        <trans-unit id="5880ff63c8f632463ae878d297d5b56bfbfbdc24" translate="yes" xml:space="preserve">
          <source>Here is an example of manually initializing AngularJS:</source>
          <target state="translated">下面是一个手动初始化AngularJS的例子。</target>
        </trans-unit>
        <trans-unit id="8c04abad1ef15232b7d33e41e2d2c33485dde663" translate="yes" xml:space="preserve">
          <source>Here is an example of registering a service</source>
          <target state="translated">下面是一个注册服务的例子</target>
        </trans-unit>
        <trans-unit id="5e759d842c3481da215b710834ed2ca1a95f87df" translate="yes" xml:space="preserve">
          <source>Here is an example of registering a service using &lt;a href=&quot;%24provide#service.html&quot;&gt;$provide.service(class)&lt;/a&gt;.</source>
          <target state="translated">这是使用&lt;a href=&quot;%24provide#service.html&quot;&gt;$ provide.service（class）&lt;/a&gt;注册服务的示例。</target>
        </trans-unit>
        <trans-unit id="1a29f24b6a2342f727b445e40478dc68dee15260" translate="yes" xml:space="preserve">
          <source>Here is an example of using the injector service:</source>
          <target state="translated">下面是一个使用注射器服务的例子。</target>
        </trans-unit>
        <trans-unit id="c6658c30a573eda1a06af398c5b3162bb3669f48" translate="yes" xml:space="preserve">
          <source>Here is an example of what the template definition for the &lt;code&gt;dialog&lt;/code&gt; widget may look like.</source>
          <target state="translated">这是 &lt;code&gt;dialog&lt;/code&gt; 小部件的模板定义的示例。</target>
        </trans-unit>
        <trans-unit id="efb89522d8e99553f459d6f83b6cca9501f43b08" translate="yes" xml:space="preserve">
          <source>Here is the explanation of how the &lt;code&gt;Hello world&lt;/code&gt; example achieves the data-binding effect when the user enters text into the text field.</source>
          <target state="translated">这是当用户在文本字段中输入文本时， &lt;code&gt;Hello world&lt;/code&gt; 示例如何实现数据绑定效果的说明。</target>
        </trans-unit>
        <trans-unit id="dddbe54fb40a9da471f8ece2fdb9b87dab4acbf1" translate="yes" xml:space="preserve">
          <source>Here is what a secure configuration for this scenario might look like:</source>
          <target state="translated">以下是这种情况下的安全配置可能是这样的。</target>
        </trans-unit>
        <trans-unit id="e3c1dfdb750e0373bfa4303b6efe8294d9bfd88d" translate="yes" xml:space="preserve">
          <source>Here we decorate the &lt;a href=&quot;../../ng/service/%24log&quot;&gt;$log&lt;/a&gt; service to convert warnings to errors by intercepting calls to &lt;a href=&quot;../../ng/service/%24log#error.html&quot;&gt;$log.warn()&lt;/a&gt;.</source>
          <target state="translated">在这里，我们装饰&lt;a href=&quot;../../ng/service/%24log&quot;&gt;$ log&lt;/a&gt;服务，以通过拦截对&lt;a href=&quot;../../ng/service/%24log#error.html&quot;&gt;$ log.warn（）的&lt;/a&gt;调用将警告转换为错误。</target>
        </trans-unit>
        <trans-unit id="e815a124520499322845f10059e60c7b540cfceb" translate="yes" xml:space="preserve">
          <source>Here we pass an array whose elements consist of a list of strings (the names of the dependencies) followed by the function itself.</source>
          <target state="translated">这里我们传递一个数组,其元素由一个字符串列表(依赖关系的名称)和函数本身组成。</target>
        </trans-unit>
        <trans-unit id="68c7479252208403902f6aa1ed6ea1da9bebafb9" translate="yes" xml:space="preserve">
          <source>Here we've seen the main use cases for directives. Each of these samples acts as a good starting point for creating your own directives.</source>
          <target state="translated">在这里我们已经看到了指令的主要用例。这些示例中的每一个都是创建你自己的指令的良好起点。</target>
        </trans-unit>
        <trans-unit id="60e05935ab8bb78195f78bcb2800807eccda1fc0" translate="yes" xml:space="preserve">
          <source>Here you can see two &lt;code&gt;$location&lt;/code&gt; instances that show the difference between &lt;strong&gt;Html5 mode&lt;/strong&gt; and &lt;strong&gt;Html5 Fallback mode&lt;/strong&gt;. Note that to simulate different levels of browser support, the &lt;code&gt;$location&lt;/code&gt; instances are connected to a fakeBrowser service, which you don't have to set up in actual projects.</source>
          <target state="translated">在这里，您可以看到两个 &lt;code&gt;$location&lt;/code&gt; 实例，它们显示了&lt;strong&gt;Html5模式&lt;/strong&gt;和&lt;strong&gt;Html5后备模式&lt;/strong&gt;之间的区别。请注意，要模拟不同级别的浏览器支持，将 &lt;code&gt;$location&lt;/code&gt; 实例连接到fakeBrowser服务，您无需在实际项目中进行设置。</target>
        </trans-unit>
        <trans-unit id="85689592e66dcddab07a025f0a7c7fa876676daf" translate="yes" xml:space="preserve">
          <source>Here's an example directive declared with a Directive Definition Object:</source>
          <target state="translated">下面是一个用指令定义对象声明的指令示例。</target>
        </trans-unit>
        <trans-unit id="98ab52376054b0ae6a09ea8fc36acb184a3cb5d2" translate="yes" xml:space="preserve">
          <source>Here's an example of a binding in a privileged context:</source>
          <target state="translated">下面是一个在特权上下文中绑定的例子。</target>
        </trans-unit>
        <trans-unit id="bc027285afdb7e2491e24d412648e4821006ff8a" translate="yes" xml:space="preserve">
          <source>Here's an example where you might see flickering:</source>
          <target state="translated">下面是一个你可能看到闪烁的例子。</target>
        </trans-unit>
        <trans-unit id="7c311fcba1d54c9fe55032b814cda6cb881db5cd" translate="yes" xml:space="preserve">
          <source>Here, &lt;code&gt;EXPRESSION&lt;/code&gt; is an AngularJS expression that evaluates to the gender of the person that is used to select the message that should be displayed.</source>
          <target state="translated">在这里， &lt;code&gt;EXPRESSION&lt;/code&gt; 是一个AngularJS表达式，其值用于评估用于选择应显示的消息的人员的性别。</target>
        </trans-unit>
        <trans-unit id="e23108d1c2e1059fd8d1e90bb0a080a1d96f5b9d" translate="yes" xml:space="preserve">
          <source>Here, &lt;code&gt;NUMERIC_EXPRESSION&lt;/code&gt; is an expression that evaluates to a numeric value based on which the displayed message should change based on pluralization rules.</source>
          <target state="translated">此处， &lt;code&gt;NUMERIC_EXPRESSION&lt;/code&gt; 是一个表达式，其计算结果为数值，基于该数值，显示的消息应基于复数规则进行更改。</target>
        </trans-unit>
        <trans-unit id="73eb7dfae55511c85ac87046d8ad655d3b07d514" translate="yes" xml:space="preserve">
          <source>History state object that was before it was changed.</source>
          <target state="translated">历史状态的对象,在它被改变之前是。</target>
        </trans-unit>
        <trans-unit id="b5c1c159a3e483ad357e69c27c87a0816f3f5eba" translate="yes" xml:space="preserve">
          <source>Holds the list of modules which the injector will load before the current module is loaded.</source>
          <target state="translated">保存在当前模块被加载之前,喷射器将加载的模块列表。</target>
        </trans-unit>
        <trans-unit id="c20a5f818418ae5d1d96d68d2a880b61a688edbd" translate="yes" xml:space="preserve">
          <source>How directives are compiled</source>
          <target state="translated">指令是如何编译的</target>
        </trans-unit>
        <trans-unit id="b4be41c74e5a460177988dde73728bedd08a211a" translate="yes" xml:space="preserve">
          <source>How do I use animations in my own directives?</source>
          <target state="translated">如何在自己的指令中使用动画?</target>
        </trans-unit>
        <trans-unit id="683b2a3eb2b6d989ff0fc60d2e062d97e39208a2" translate="yes" xml:space="preserve">
          <source>How does AngularJS support i18n/l10n?</source>
          <target state="translated">AngularJS如何支持i18n/l10n?</target>
        </trans-unit>
        <trans-unit id="e21860bf37328b97ebb0ddd904694c78e4a7b382" translate="yes" xml:space="preserve">
          <source>How does it work?</source>
          <target state="translated">它是如何工作的?</target>
        </trans-unit>
        <trans-unit id="88ed97b08c81463ee06f53f3b6c1779c600aa1c6" translate="yes" xml:space="preserve">
          <source>How is the element transported?</source>
          <target state="translated">元素是如何运输的?</target>
        </trans-unit>
        <trans-unit id="8faafbf047891a8907eb94c858a2397c59b48b6b" translate="yes" xml:space="preserve">
          <source>How is the morphing handled?</source>
          <target state="translated">如何处理变形?</target>
        </trans-unit>
        <trans-unit id="f0b1fc1ac088c2160c01191d7d56a0bae6f8e3aa" translate="yes" xml:space="preserve">
          <source>How text and attribute bindings work</source>
          <target state="translated">文本和属性绑定如何工作</target>
        </trans-unit>
        <trans-unit id="6348c07b83ad0bb6dae1ec6cd1b77c21662b9a62" translate="yes" xml:space="preserve">
          <source>How the Options are handled</source>
          <target state="translated">如何处理期权</target>
        </trans-unit>
        <trans-unit id="2a6cb3a378b1a04b05ce40f114a5850c30af8933" translate="yes" xml:space="preserve">
          <source>How the string representation is computed</source>
          <target state="translated">字符串表示法是如何计算的</target>
        </trans-unit>
        <trans-unit id="4aa425ac030122afe10e7f53638d920844d71819" translate="yes" xml:space="preserve">
          <source>How they work</source>
          <target state="translated">它们是如何工作的</target>
        </trans-unit>
        <trans-unit id="6e13b2dba241833a9f148d24533b2b4f0e74bb53" translate="yes" xml:space="preserve">
          <source>How to (selectively) enable, disable and skip animations</source>
          <target state="translated">如何(有选择地)启用、禁用和跳过动画。</target>
        </trans-unit>
        <trans-unit id="a25fb8be7987e971198c72036edd9325e925e49a" translate="yes" xml:space="preserve">
          <source>How to benefit from one-time binding</source>
          <target state="translated">如何从一次性约束中获益</target>
        </trans-unit>
        <trans-unit id="cd8d1af145e22f4071b3803ea34db2257342448d" translate="yes" xml:space="preserve">
          <source>How to use decorators</source>
          <target state="translated">如何使用装饰剂</target>
        </trans-unit>
        <trans-unit id="c2a2f74412612724a85fc7c3904fcb3d54c23855" translate="yes" xml:space="preserve">
          <source>How would you ensure that every place that used these types of bindings was bound to a value that was sanitized by your library (or returned as safe for rendering by your server?) How can you ensure that you didn't accidentally delete the line that sanitized the value, or renamed some properties/fields and forgot to update the binding to the sanitized value?</source>
          <target state="translated">你如何确保每一个使用这些类型的绑定的地方都绑定到一个被你的库sanitized的值上(或者被你的服务器作为安全的渲染返回?)你如何确保你不会不小心删除了sanitized值的行,或者重命名了一些属性/字段,而忘记更新绑定到sanitized值?</target>
        </trans-unit>
        <trans-unit id="69e8e5e39cfe987166eee61d96837365193ccc8b" translate="yes" xml:space="preserve">
          <source>However &lt;code&gt;isolated&lt;/code&gt; scope creates a new problem: if a transcluded DOM is a child of the widget isolated scope then it will not be able to bind to anything. For this reason the transcluded scope is a child of the original scope, before the widget created an isolated scope for its local variables. This makes the transcluded and widget isolated scope siblings.</source>
          <target state="translated">但是， &lt;code&gt;isolated&lt;/code&gt; 范围会带来一个新问题：如果被嵌入的DOM是小部件隔离范围的子级，那么它将无法绑定到任何东西。因此，在小部件为其局部变量创建隔离范围之前，已包含范围是原始范围的子级。这将使包含在内且与窗口小部件隔离的作用域同级。</target>
        </trans-unit>
        <trans-unit id="60975c6582a2823450029e613dcd8a25e14ebad5" translate="yes" xml:space="preserve">
          <source>However it's more likely that you'll just use &lt;a href=&quot;../directive/ngapp&quot;&gt;ngApp&lt;/a&gt; or &lt;a href=&quot;angular.bootstrap&quot;&gt;&lt;code&gt;angular.bootstrap&lt;/code&gt;&lt;/a&gt; to simplify this process for you.</source>
          <target state="translated">但是，您更有可能仅使用&lt;a href=&quot;../directive/ngapp&quot;&gt;ngApp&lt;/a&gt;或&lt;a href=&quot;angular.bootstrap&quot;&gt; &lt;code&gt;angular.bootstrap&lt;/code&gt; &lt;/a&gt;为您简化此过程。</target>
        </trans-unit>
        <trans-unit id="999f598a92635af8c6759e6c95a25535ddb1aa15" translate="yes" xml:space="preserve">
          <source>However this method will not work with JavaScript minifiers/obfuscators because of how they rename parameters.</source>
          <target state="translated">然而,这个方法将不能与JavaScript minifiers/obfuscators一起使用,因为它们是如何重命名参数的。</target>
        </trans-unit>
        <trans-unit id="74b78a2717429ba3b6055f58ec7371c056ceb4fc" translate="yes" xml:space="preserve">
          <source>However, &lt;a href=&quot;https://developer.mozilla.org/docs/Web/Web_Components/Using_custom_elements&quot;&gt;custom elements&lt;/a&gt; often use custom properties to hold data, and &lt;code&gt;ngProp&lt;/code&gt; can be used to provide input to these custom elements.</source>
          <target state="translated">但是，&lt;a href=&quot;https://developer.mozilla.org/docs/Web/Web_Components/Using_custom_elements&quot;&gt;自定义元素&lt;/a&gt;通常使用自定义属性来保存数据，并且 &lt;code&gt;ngProp&lt;/code&gt; 可以用于向这些自定义元素提供输入。</target>
        </trans-unit>
        <trans-unit id="6c6bf585a28c6122be3e1b01347c02c5c70bc897" translate="yes" xml:space="preserve">
          <source>However, &lt;code&gt;step&lt;/code&gt; is currently only fully implemented by Firefox. Other browsers have problems when the step value changes dynamically - they do not adjust the element value correctly, but instead may set the &lt;code&gt;stepMismatch&lt;/code&gt; error. If that's the case, the AngularJS will set the &lt;code&gt;step&lt;/code&gt; error on the input, and set the model to &lt;code&gt;undefined&lt;/code&gt;.</source>
          <target state="translated">However, &lt;code&gt;step&lt;/code&gt; is currently only fully implemented by Firefox. Other browsers have problems when the step value changes dynamically - they do not adjust the element value correctly, but instead may set the &lt;code&gt;stepMismatch&lt;/code&gt; error. If that's the case, the AngularJS will set the &lt;code&gt;step&lt;/code&gt; error on the input, and set the model to &lt;code&gt;undefined&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="9ef1218d8c362088f0bcdd7920f20b4f50be4419" translate="yes" xml:space="preserve">
          <source>However, if the method is used programmatically, for example by adding dynamically created controls, or controls that have been previously removed without destroying their corresponding DOM element, it's the developers responsibility to make sure the current state propagates to the parent form.</source>
          <target state="translated">但是,如果该方法是以编程方式使用的,例如,通过添加动态创建的控件,或者之前已经删除的控件,而不破坏其对应的DOM元素,那么开发人员有责任确保当前状态传播到父表单中。</target>
        </trans-unit>
        <trans-unit id="7833f0d3d950db315e3b6d2099d681792715c7c0" translate="yes" xml:space="preserve">
          <source>However, including generic messages may not be useful enough to match all input fields, therefore, &lt;code&gt;ngMessages&lt;/code&gt; provides the ability to override messages defined in the remote template by redefining them within the directive container.</source>
          <target state="translated">但是，包括通用消息可能不足以匹配所有输入字段，因此， &lt;code&gt;ngMessages&lt;/code&gt; 提供了通过在指令容器内重新定义消息来覆盖远程模板中定义的消息的功能。</target>
        </trans-unit>
        <trans-unit id="877ce4a445ea5e831a4f4c27b0f0efa155233b3c" translate="yes" xml:space="preserve">
          <source>However, the declarative language is also limited, as it does not allow you to teach the browser new syntax. For example, there is no easy way to get the browser to align the text at 1/3 the position instead of 1/2. What is needed is a way to teach the browser new HTML syntax.</source>
          <target state="translated">然而,声明式语言也是有限的,因为它不允许你教浏览器新的语法。例如,没有简单的方法让浏览器将文本排列在1/3的位置而不是1/2的位置。需要的是一种教给浏览器新的HTML语法的方法。</target>
        </trans-unit>
        <trans-unit id="3c9c0adee926699e18a27b00b88771ce6b3e9fc7" translate="yes" xml:space="preserve">
          <source>However, the more traditional CommonJS-style usage is still available, and documented below.</source>
          <target state="translated">不过,更传统的CommonJS风格的用法还是可以使用的,下面会有记录。</target>
        </trans-unit>
        <trans-unit id="00996f9232afaff711c6ebfe08928b5cfb6f6845" translate="yes" xml:space="preserve">
          <source>However, there are a few limitations compared to array iteration:</source>
          <target state="translated">然而,与数组迭代相比,有一些限制。</target>
        </trans-unit>
        <trans-unit id="9641eba78bfe582ed3a2749197725f94c33dd851" translate="yes" xml:space="preserve">
          <source>Html-linkified and &lt;a href=&quot;../service/%24sanitize&quot;&gt;sanitized&lt;/a&gt; text.</source>
          <target state="translated">HTML链接和&lt;a href=&quot;../service/%24sanitize&quot;&gt;消毒的&lt;/a&gt;文本。</target>
        </trans-unit>
        <trans-unit id="c65236654eb6a81fbfab2170b0857f54bfc87642" translate="yes" xml:space="preserve">
          <source>I'm in a hurry. How do I get a Hello World module working?</source>
          <target state="translated">我很着急。如何让Hello World模块发挥作用?</target>
        </trans-unit>
        <trans-unit id="28163d85350de7d518abda78cb07443850692d4d" translate="yes" xml:space="preserve">
          <source>I.e. &lt;code&gt;ng-model-options=&quot;{ debounce: 500 }&quot;&lt;/code&gt; will wait for half a second since the last content change before triggering the model update and form validation.</source>
          <target state="translated">即 &lt;code&gt;ng-model-options=&quot;{ debounce: 500 }&quot;&lt;/code&gt; 自上次内容更改以来将等待半秒钟，然后触发模型更新和表单验证。</target>
        </trans-unit>
        <trans-unit id="9ede6c3f478034a42df63b47c4dc0ad321990f8a" translate="yes" xml:space="preserve">
          <source>I.e. &lt;code&gt;ng-model-options=&quot;{ updateOn: 'default blur' }&quot;&lt;/code&gt;</source>
          <target state="translated">即 &lt;code&gt;ng-model-options=&quot;{ updateOn: 'default blur' }&quot;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="4129e8cbc1ebb2a2fb072b2b3daaef96575a5cc8" translate="yes" xml:space="preserve">
          <source>I.e. &lt;code&gt;ng-model-options=&quot;{ updateOn: 'default blur', debounce: { default: 500, blur: 0 } }&quot;&lt;/code&gt;</source>
          <target state="translated">即 &lt;code&gt;ng-model-options=&quot;{ updateOn: 'default blur', debounce: { default: 500, blur: 0 } }&quot;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="9072e6f660aab84e10c71086d8bd8d9d0e39518a" translate="yes" xml:space="preserve">
          <source>IE9 and other browsers that do not support the &lt;code&gt;range&lt;/code&gt; type fall back to a text input without any default values for &lt;code&gt;min&lt;/code&gt;, &lt;code&gt;max&lt;/code&gt; and &lt;code&gt;step&lt;/code&gt;. Model binding, validation and number parsing are nevertheless supported.</source>
          <target state="translated">IE9 and other browsers that do not support the &lt;code&gt;range&lt;/code&gt; type fall back to a text input without any default values for &lt;code&gt;min&lt;/code&gt; , &lt;code&gt;max&lt;/code&gt; and &lt;code&gt;step&lt;/code&gt; . Model binding, validation and number parsing are nevertheless supported.</target>
        </trans-unit>
        <trans-unit id="a68fa8efe4a09d8c0c63ae60426d9366434bccb2" translate="yes" xml:space="preserve">
          <source>IRC</source>
          <target state="translated">IRC</target>
        </trans-unit>
        <trans-unit id="d7b1a1f2be81b4fe52f63eaaeeb40a859c845e0f" translate="yes" xml:space="preserve">
          <source>Id for the &lt;code&gt;value&lt;/code&gt;.</source>
          <target state="translated">为 &lt;code&gt;value&lt;/code&gt; 编号。</target>
        </trans-unit>
        <trans-unit id="ec130e4d2cb91fe9bf063ea20a216bdcc71a84d6" translate="yes" xml:space="preserve">
          <source>Id of the key-value pair to delete.</source>
          <target state="translated">要删除的键值对的ID。</target>
        </trans-unit>
        <trans-unit id="7db857bacad045bd1f61b8fda21770e9d10e3b24" translate="yes" xml:space="preserve">
          <source>Id to use for lookup.</source>
          <target state="translated">用来查询的ID。</target>
        </trans-unit>
        <trans-unit id="4f2fb5d7f9da16cbc1d14fa704825b095fc9c79b" translate="yes" xml:space="preserve">
          <source>Identifier name for a reference to the controller in the directive's scope. This allows the controller to be referenced from the directive template. This is especially useful when a directive is used as component, i.e. with an &lt;code&gt;isolate&lt;/code&gt; scope. It's also possible to use it in a directive without an &lt;code&gt;isolate&lt;/code&gt; / &lt;code&gt;new&lt;/code&gt; scope, but you need to be aware that the &lt;code&gt;controllerAs&lt;/code&gt; reference might overwrite a property that already exists on the parent scope.</source>
          <target state="translated">指令范围内对控制器的引用的标识符名称。这允许从指令模板引用控制器。当指令用作组件（即具有 &lt;code&gt;isolate&lt;/code&gt; 范围）时，这尤其有用。也可以在没有 &lt;code&gt;isolate&lt;/code&gt; / &lt;code&gt;new&lt;/code&gt; 作用域的指令中使用它，但是您需要注意， &lt;code&gt;controllerAs&lt;/code&gt; 引用可能会覆盖父作用域上已经存在的属性。</target>
        </trans-unit>
        <trans-unit id="79983926c885cfae871f9f76c7c14c825447c715" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;mode.rewriteLinks&lt;/code&gt; is set to &lt;code&gt;false&lt;/code&gt; in the &lt;code&gt;mode&lt;/code&gt; configuration object passed to &lt;code&gt;$locationProvider.html5Mode()&lt;/code&gt;, the browser will perform a full page reload for every link. &lt;code&gt;mode.rewriteLinks&lt;/code&gt; can also be set to a string, which will enable link rewriting only on anchor elements that have the given attribute.</source>
          <target state="translated">如果在传递给 &lt;code&gt;$locationProvider.html5Mode()&lt;/code&gt; 的 &lt;code&gt;mode&lt;/code&gt; 配置对象 &lt;code&gt;mode.rewriteLinks&lt;/code&gt; 设置为 &lt;code&gt;false&lt;/code&gt; ，则浏览器将为每个链接执行整页重新加载。 &lt;code&gt;mode.rewriteLinks&lt;/code&gt; 也可以设置为字符串，这将仅对具有给定属性的锚元素启用链接重写。</target>
        </trans-unit>
        <trans-unit id="613bfcabdb198dcf4290d1a13f26a43dcfef57c7" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;ng-click&lt;/code&gt; or &lt;code&gt;ng-dblclick&lt;/code&gt; is encountered, ngAria will add &lt;code&gt;tabindex=&quot;0&quot;&lt;/code&gt; to any element not in a node blacklist: &lt;em&gt; Button &lt;/em&gt; Anchor &lt;em&gt; Input &lt;/em&gt; Textarea &lt;em&gt; Select &lt;/em&gt; Details/Summary To fix widespread accessibility problems with &lt;code&gt;ng-click&lt;/code&gt; on &lt;code&gt;div&lt;/code&gt; elements, ngAria will dynamically bind a keypress event by default as long as the element isn't in the node blacklist. You can turn this functionality on or off with the &lt;code&gt;bindKeypress&lt;/code&gt; configuration option. ngAria will also add the &lt;code&gt;button&lt;/code&gt; role to communicate to users of assistive technologies. This can be disabled with the &lt;code&gt;bindRoleForClick&lt;/code&gt; configuration option. For &lt;code&gt;ng-dblclick&lt;/code&gt;, you must still manually add &lt;code&gt;ng-keypress&lt;/code&gt; and a role to non-interactive elements such as &lt;code&gt;div&lt;/code&gt; or &lt;code&gt;taco-button&lt;/code&gt; to enable keyboard access.</source>
          <target state="translated">如果遇到 &lt;code&gt;ng-click&lt;/code&gt; 或 &lt;code&gt;ng-dblclick&lt;/code&gt; dblclick，ngAria会将 &lt;code&gt;tabindex=&quot;0&quot;&lt;/code&gt; 添加到不在节点黑名单中的任何元素：&lt;em&gt;按钮&lt;/em&gt;锚定&lt;em&gt;输入&lt;/em&gt; Textarea &lt;em&gt;选择&lt;/em&gt;详细信息/摘要要修复 &lt;code&gt;ng-click&lt;/code&gt; &lt;code&gt;div&lt;/code&gt; 元素上的广泛可访问性问题，请单击 ngAria默认情况下，只要元素不在节点黑名单中，它将动态绑定一个keypress事件。您可以使用 &lt;code&gt;bindKeypress&lt;/code&gt; 配置选项打开或关闭此功能。 ngAria还将添加 &lt;code&gt;button&lt;/code&gt; 角色，以与辅助技术的用户进行交流。可以使用 &lt;code&gt;bindRoleForClick&lt;/code&gt; 禁用它配置选项。对于 &lt;code&gt;ng-dblclick&lt;/code&gt; ，您仍然必须手动将 &lt;code&gt;ng-keypress&lt;/code&gt; 和一个角色添加到非交互式元素（例如 &lt;code&gt;div&lt;/code&gt; 或 &lt;code&gt;taco-button&lt;/code&gt; )中以启用键盘访问。</target>
        </trans-unit>
        <trans-unit id="60f9ef56696025d8f02f54a53f118da87247ee51" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;ng-click&lt;/code&gt; or &lt;code&gt;ng-dblclick&lt;/code&gt; is encountered, ngAria will add &lt;code&gt;tabindex=&quot;0&quot;&lt;/code&gt; to any element not in the list of built in aria nodes: &lt;em&gt; Button &lt;/em&gt; Anchor &lt;em&gt; Input &lt;/em&gt; Textarea &lt;em&gt; Select &lt;/em&gt; Details/Summary To fix widespread accessibility problems with &lt;code&gt;ng-click&lt;/code&gt; on &lt;code&gt;div&lt;/code&gt; elements, ngAria will dynamically bind a keypress event by default as long as the element isn't in a node from the list of built in aria nodes. You can turn this functionality on or off with the &lt;code&gt;bindKeypress&lt;/code&gt; configuration option. ngAria will also add the &lt;code&gt;button&lt;/code&gt; role to communicate to users of assistive technologies. This can be disabled with the &lt;code&gt;bindRoleForClick&lt;/code&gt; configuration option. For &lt;code&gt;ng-dblclick&lt;/code&gt;, you must still manually add &lt;code&gt;ng-keypress&lt;/code&gt; and a role to non-interactive elements such as &lt;code&gt;div&lt;/code&gt; or &lt;code&gt;taco-button&lt;/code&gt; to enable keyboard access.</source>
          <target state="translated">If &lt;code&gt;ng-click&lt;/code&gt; or &lt;code&gt;ng-dblclick&lt;/code&gt; is encountered, ngAria will add &lt;code&gt;tabindex=&quot;0&quot;&lt;/code&gt; to any element not in the list of built in aria nodes: &lt;em&gt; Button &lt;/em&gt; Anchor &lt;em&gt; Input &lt;/em&gt; Textarea &lt;em&gt; Select &lt;/em&gt; Details/Summary To fix widespread accessibility problems with &lt;code&gt;ng-click&lt;/code&gt; on &lt;code&gt;div&lt;/code&gt; elements, ngAria will dynamically bind a keypress event by default as long as the element isn't in a node from the list of built in aria nodes. You can turn this functionality on or off with the &lt;code&gt;bindKeypress&lt;/code&gt; configuration option. ngAria will also add the &lt;code&gt;button&lt;/code&gt; role to communicate to users of assistive technologies. This can be disabled with the &lt;code&gt;bindRoleForClick&lt;/code&gt; configuration option. For &lt;code&gt;ng-dblclick&lt;/code&gt; , you must still manually add &lt;code&gt;ng-keypress&lt;/code&gt; and a role to non-interactive elements such as &lt;code&gt;div&lt;/code&gt; or &lt;code&gt;taco-button&lt;/code&gt; to enable keyboard access.</target>
        </trans-unit>
        <trans-unit id="c95cf37a17f0d52871a2a1d59d4540b01148df2b" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;ngTrim&lt;/code&gt; is set to &lt;code&gt;&quot;false&quot;&lt;/code&gt; then whitespace around both the separator and each list item is respected. This implies that the user of the directive is responsible for dealing with whitespace but also allows you to use whitespace as a delimiter, such as a tab or newline character.</source>
          <target state="translated">如果 &lt;code&gt;ngTrim&lt;/code&gt; 设置为 &lt;code&gt;&quot;false&quot;&lt;/code&gt; 则将遵守分隔符和每个列表项周围的空格。这意味着该指令的用户负责处理空格，但也允许您将空格用作定界符，例如制表符或换行符。</target>
        </trans-unit>
        <trans-unit id="0829e8f931b8f25cd2b158be8e0b6def23ee7c6e" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;paramValue&lt;/code&gt; is &lt;code&gt;null&lt;/code&gt;, the property specified via the first argument will be deleted.</source>
          <target state="translated">如果 &lt;code&gt;paramValue&lt;/code&gt; 为 &lt;code&gt;null&lt;/code&gt; ，则将删除通过第一个参数指定的属性。</target>
        </trans-unit>
        <trans-unit id="5e5b3c116b7e282c2308f6ef1608442867791f58" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;paramValue&lt;/code&gt; is &lt;code&gt;true&lt;/code&gt;, the property specified via the first argument will be added with no value nor trailing equal sign.</source>
          <target state="translated">如果 &lt;code&gt;paramValue&lt;/code&gt; 为 &lt;code&gt;true&lt;/code&gt; ，则将通过第一个参数指定的属性添加为不带值或尾随等号的属性。</target>
        </trans-unit>
        <trans-unit id="5f8a14370aff7380ce331b7293fef1918515ff58" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;paramValue&lt;/code&gt; is an array, it will override the property of the &lt;code&gt;search&lt;/code&gt; component of &lt;code&gt;$location&lt;/code&gt; specified via the first argument.</source>
          <target state="translated">如果 &lt;code&gt;paramValue&lt;/code&gt; 是一个数组，它将覆盖通过第一个参数指定的 &lt;code&gt;$location&lt;/code&gt; &lt;code&gt;search&lt;/code&gt; 组件的属性。</target>
        </trans-unit>
        <trans-unit id="743650dbdbf5002c9eecb5f7379f1f0d2090bf89" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;redirectTo&lt;/code&gt; is a function, it will be called with the following parameters:</source>
          <target state="translated">如果 &lt;code&gt;redirectTo&lt;/code&gt; 是一个函数，则将使用以下参数调用它：</target>
        </trans-unit>
        <trans-unit id="777d9335c56dfe211081978a0fbb3906b4202502" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;search&lt;/code&gt; is a string or number, then &lt;code&gt;paramValue&lt;/code&gt; will override only a single search property.</source>
          <target state="translated">如果 &lt;code&gt;search&lt;/code&gt; 是字符串或数字，则 &lt;code&gt;paramValue&lt;/code&gt; 将仅覆盖单个搜索属性。</target>
        </trans-unit>
        <trans-unit id="8201c46ffa0db4f644f5e56359950eb7fb2a8045" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;source&lt;/code&gt; is identical to &lt;code&gt;destination&lt;/code&gt; an exception will be thrown.</source>
          <target state="translated">如果 &lt;code&gt;source&lt;/code&gt; 与 &lt;code&gt;destination&lt;/code&gt; 相同，则将引发异常。</target>
        </trans-unit>
        <trans-unit id="8ed2725402e420ab1c414cd2715251710a33f8e1" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;source&lt;/code&gt; is not an object or array (inc. &lt;code&gt;null&lt;/code&gt; and &lt;code&gt;undefined&lt;/code&gt;), &lt;code&gt;source&lt;/code&gt; is returned.</source>
          <target state="translated">如果 &lt;code&gt;source&lt;/code&gt; 不是对象或数组（包括 &lt;code&gt;null&lt;/code&gt; 和 &lt;code&gt;undefined&lt;/code&gt; ），则返回 &lt;code&gt;source&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="a624c93008a0a64091b974be67c1370e20df5fd0" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;template&lt;/code&gt; is a function, it will be called with the following parameters:</source>
          <target state="translated">如果 &lt;code&gt;template&lt;/code&gt; 是函数，则将使用以下参数调用它：</target>
        </trans-unit>
        <trans-unit id="9f1b3360d3b66afd04318f5feac73437fb4929da" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;template&lt;/code&gt; is a function, then it is &lt;a href=&quot;../../auto/service/%24injector#invoke.html&quot;&gt;injected&lt;/a&gt; with the following locals:</source>
          <target state="translated">如果 &lt;code&gt;template&lt;/code&gt; 是一个函数，则将其&lt;a href=&quot;../../auto/service/%24injector#invoke.html&quot;&gt;注入&lt;/a&gt;以下本地变量：</target>
        </trans-unit>
        <trans-unit id="b743c62930c10b8e90047d6d33a622a656d9a6ba" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;templateUrl&lt;/code&gt; is a function, it will be called with the following parameters:</source>
          <target state="translated">如果 &lt;code&gt;templateUrl&lt;/code&gt; 是一个函数，则将使用以下参数调用它：</target>
        </trans-unit>
        <trans-unit id="33c8b5674d0af42566982cc240093a252e34747e" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;templateUrl&lt;/code&gt; is a function, then it is &lt;a href=&quot;../../auto/service/%24injector#invoke.html&quot;&gt;injected&lt;/a&gt; with the following locals:</source>
          <target state="translated">如果 &lt;code&gt;templateUrl&lt;/code&gt; 是一个函数，则将其&lt;a href=&quot;../../auto/service/%24injector#invoke.html&quot;&gt;注入&lt;/a&gt;以下本地变量：</target>
        </trans-unit>
        <trans-unit id="72f42dc0c99690482b2dac1ed67fcce01c622d32" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;true&lt;/code&gt;, reverse the sorting order.</source>
          <target state="translated">如果为 &lt;code&gt;true&lt;/code&gt; ，则反转排序顺序。</target>
        </trans-unit>
        <trans-unit id="e5e1755ef85cb15eebe562cc36b63807bafca0ca" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;window.name&lt;/code&gt; contains prefix &lt;code&gt;NG_DEFER_BOOTSTRAP!&lt;/code&gt; when &lt;a href=&quot;../api/ng/function/angular.bootstrap&quot;&gt;&lt;code&gt;angular.bootstrap&lt;/code&gt;&lt;/a&gt; is called, the bootstrap process will be paused until &lt;code&gt;angular.resumeBootstrap()&lt;/code&gt; is called.</source>
          <target state="translated">如果 &lt;code&gt;window.name&lt;/code&gt; 包含前缀 &lt;code&gt;NG_DEFER_BOOTSTRAP!&lt;/code&gt; 调用&lt;a href=&quot;../api/ng/function/angular.bootstrap&quot;&gt; &lt;code&gt;angular.bootstrap&lt;/code&gt; &lt;/a&gt;时，引导过程将暂停直到 &lt;code&gt;angular.resumeBootstrap()&lt;/code&gt; 为止。</target>
        </trans-unit>
        <trans-unit id="a7fff279b5c9622029c122de3c8da07fa6ebeda1" translate="yes" xml:space="preserve">
          <source>If V is not undefined, mark the result of the expression as stable and schedule a task to deregister the watch for this expression when we exit the digest loop</source>
          <target state="translated">如果V不是未定义的,则将表达式的结果标记为稳定,并安排一个任务,当我们退出消化循环时,取消对这个表达式的监视。</target>
        </trans-unit>
        <trans-unit id="345464413875ecc47aaed72ea3eeb05292b2706f" translate="yes" xml:space="preserve">
          <source>If XSRF prefix is detected, strip it (see &lt;a href=&quot;../service/%24http#security-considerations.html&quot;&gt;Security Considerations in the $http docs&lt;/a&gt;).</source>
          <target state="translated">如果检测到XSRF前缀，请删除它（请参阅&lt;a href=&quot;../service/%24http#security-considerations.html&quot;&gt;$ http docs中的&amp;ldquo;安全注意事项&amp;rdquo;&lt;/a&gt;）。</target>
        </trans-unit>
        <trans-unit id="99e0d1f20619d41f43e4adbe88a0fc055defdf60" translate="yes" xml:space="preserve">
          <source>If XSRF prefix is detected, strip it (see Security Considerations section below).</source>
          <target state="translated">如果检测到XSRF前缀,则对其进行剥离(参见下面的安全注意事项部分)。</target>
        </trans-unit>
        <trans-unit id="52b7eeb7ca086390168cbaa4c3ea07248c32233b" translate="yes" xml:space="preserve">
          <source>If a custom comparator still can't distinguish between two items, then they will be sorted based on their index using the built-in comparator.</source>
          <target state="translated">如果自定义比较器仍然无法区分两个项目,那么将使用内置比较器根据它们的索引进行排序。</target>
        </trans-unit>
        <trans-unit id="022ac35ee6ebafd19f7c4c717fbf1ccf2712e7bc" translate="yes" xml:space="preserve">
          <source>If a destination is provided, all of its elements (for arrays) or properties (for objects) are deleted and then all elements/properties from the source are copied to it.</source>
          <target state="translated">如果提供了一个目标,那么它的所有元素(对于数组)或属性(对于对象)都会被删除,然后源的所有元素/属性都会被复制到它上面。</target>
        </trans-unit>
        <trans-unit id="502bbbf8d84c6abdf7c8fd468936fe84d3df6d5a" translate="yes" xml:space="preserve">
          <source>If a form has only one input field then hitting enter in this field triggers form submit (&lt;code&gt;ngSubmit&lt;/code&gt;)</source>
          <target state="translated">如果表单只有一个输入字段，则在此字段中按回车会触发表单提交（ &lt;code&gt;ngSubmit&lt;/code&gt; ）</target>
        </trans-unit>
        <trans-unit id="adb660bb29eb456fd541995beb9da63bcee77be2" translate="yes" xml:space="preserve">
          <source>If a function has an &lt;code&gt;$inject&lt;/code&gt; property and its value is an array of strings, then the strings represent names of services to be injected into the function.</source>
          <target state="translated">如果一个函数具有 &lt;code&gt;$inject&lt;/code&gt; 属性，并且其值是一个字符串数组，则这些字符串表示要注入到该函数中的服务的名称。</target>
        </trans-unit>
        <trans-unit id="cd412985992305562d7e70ff27e4c810956645c3" translate="yes" xml:space="preserve">
          <source>If a module has already been loaded into the injector then it will not be loaded again.</source>
          <target state="translated">如果一个模块已经被加载到注射器中,那么它将不会被再次加载。</target>
        </trans-unit>
        <trans-unit id="26dc0654df6e7e0d396bfd5ad28c4b667f98d931" translate="yes" xml:space="preserve">
          <source>If a parent scope is suspended then all its descendants will be also excluded from future digests whether or not they have been suspended themselves. Note that this also applies to isolate child scopes.</source>
          <target state="translated">如果一个父作用域被暂停,那么它的所有子作用域也将被从未来的摘要中排除,无论它们自己是否被暂停。请注意,这也适用于孤立的子作用域。</target>
        </trans-unit>
        <trans-unit id="f325902be8527e0c6ea4b6c889b0905040354cc2" translate="yes" xml:space="preserve">
          <source>If a request didn't match any expectation or if the expectation doesn't have the response defined, the backend definitions are evaluated in sequential order to see if any of them match the request. The response from the first matched definition is returned.</source>
          <target state="translated">如果一个请求没有匹配任何期望值,或者期望值没有定义响应,那么后端定义将按顺序评估,看是否有任何定义与请求匹配。第一个匹配的定义的响应被返回。</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
