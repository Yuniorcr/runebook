<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="zh-CN" datatype="htmlbody" original="cpp">
    <body>
      <group id="cpp">
        <trans-unit id="03dcb59cbb2ff368f0a42a3ec69944a9d4f34163" translate="yes" xml:space="preserve">
          <source>Returns the result of division of &lt;code&gt;lhs&lt;/code&gt; by &lt;code&gt;rhs&lt;/code&gt;.</source>
          <target state="translated">返回 &lt;code&gt;lhs&lt;/code&gt; 除以 &lt;code&gt;rhs&lt;/code&gt; 的结果。</target>
        </trans-unit>
        <trans-unit id="85d78c913115f00e10769aab5178fc2a0c672543" translate="yes" xml:space="preserve">
          <source>Returns the result of equality comparison between &lt;code&gt;lhs&lt;/code&gt; and &lt;code&gt;rhs&lt;/code&gt;.</source>
          <target state="translated">返回 &lt;code&gt;lhs&lt;/code&gt; 和 &lt;code&gt;rhs&lt;/code&gt; 之间相等比较的结果。</target>
        </trans-unit>
        <trans-unit id="7282e4c27e79564b836e48d63e126ae093797316" translate="yes" xml:space="preserve">
          <source>Returns the result of multiplying &lt;code&gt;lhs&lt;/code&gt; by &lt;code&gt;rhs&lt;/code&gt; (or whatever &lt;code&gt;operator*&lt;/code&gt; is overloaded to do).</source>
          <target state="translated">返回相乘的结果 &lt;code&gt;lhs&lt;/code&gt; 由 &lt;code&gt;rhs&lt;/code&gt; （或任何 &lt;code&gt;operator*&lt;/code&gt; 超载做）。</target>
        </trans-unit>
        <trans-unit id="78f4ed611a4f405d5e32f333fb574dcb6d8d584f" translate="yes" xml:space="preserve">
          <source>Returns the result of negating &lt;code&gt;arg&lt;/code&gt; (or whatever the unary &lt;code&gt;operator-&lt;/code&gt; is overloaded to do).</source>
          <target state="translated">返回对 &lt;code&gt;arg&lt;/code&gt; 求反的结果（或任何一元运算 &lt;code&gt;operator-&lt;/code&gt; 要重载）。</target>
        </trans-unit>
        <trans-unit id="875720805b3df50fda82f43a079aa0b15fa70e43" translate="yes" xml:space="preserve">
          <source>Returns the result of non-equality comparison between &lt;code&gt;lhs&lt;/code&gt; and &lt;code&gt;rhs&lt;/code&gt;.</source>
          <target state="translated">返回 &lt;code&gt;lhs&lt;/code&gt; 和 &lt;code&gt;rhs&lt;/code&gt; 之间的非相等比较结果。</target>
        </trans-unit>
        <trans-unit id="336b4ba6e4e0aa78b82be614532b4d74203d30ef" translate="yes" xml:space="preserve">
          <source>Returns the result of specific arithmetic operation.</source>
          <target state="translated">返回特定算术运算的结果。</target>
        </trans-unit>
        <trans-unit id="b525d075a5f67e324f33e7dd7cda9257a636e2d9" translate="yes" xml:space="preserve">
          <source>Returns the result of subtracting &lt;code&gt;rhs&lt;/code&gt; from &lt;code&gt;lhs&lt;/code&gt; (or whatever &lt;code&gt;operator-&lt;/code&gt; if overloaded to do).</source>
          <target state="translated">返回从 &lt;code&gt;lhs&lt;/code&gt; 中减去 &lt;code&gt;rhs&lt;/code&gt; 的结果（或任何 &lt;code&gt;operator-&lt;/code&gt; 如果过载，则返回）。</target>
        </trans-unit>
        <trans-unit id="b49d529fbd2b427b6dddb2c5e8941d4e6cb0c563" translate="yes" xml:space="preserve">
          <source>Returns the root directory of the generic-format path. If the path (in generic format) does not include root directory, returns &lt;code&gt;path()&lt;/code&gt;.</source>
          <target state="translated">返回通用格式路径的根目录。如果路径（通用格式）不包含根目录，则返回 &lt;code&gt;path()&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="133d5f67f6c88049f9795b28968927491d2846d7" translate="yes" xml:space="preserve">
          <source>Returns the root name of the generic-format path. If the path (in generic format) does not include root name, returns &lt;code&gt;path()&lt;/code&gt;.</source>
          <target state="translated">返回通用格式路径的根名称。如果路径（通用格式）不包含根名称，则返回 &lt;code&gt;path()&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="0b44c8377c4f396d6dda638d397eab6f23a5398f" translate="yes" xml:space="preserve">
          <source>Returns the root path of the path. If the path does not include root path, returns &lt;code&gt;path()&lt;/code&gt;.</source>
          <target state="translated">返回路径的根路径。如果该路径不包含根路径，则返回 &lt;code&gt;path()&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="585647f583397b20795f7946a8cc3f9bc4081c42" translate="yes" xml:space="preserve">
          <source>Returns the size of the given container &lt;code&gt;c&lt;/code&gt; or array &lt;code&gt;array&lt;/code&gt;.</source>
          <target state="translated">返回给定容器 &lt;code&gt;c&lt;/code&gt; 或数组 &lt;code&gt;array&lt;/code&gt; 的大小。</target>
        </trans-unit>
        <trans-unit id="85e91e2a179c6157d3612306839727bdc8a92d95" translate="yes" xml:space="preserve">
          <source>Returns the size of the sequence in bytes.</source>
          <target state="translated">返回序列的大小,单位为字节。</target>
        </trans-unit>
        <trans-unit id="085de6f1a4028fd3bfd623816ba4c76bc359ae7a" translate="yes" xml:space="preserve">
          <source>Returns the size of the stored initial seed sequence.</source>
          <target state="translated">返回存储的初始种子序列的大小。</target>
        </trans-unit>
        <trans-unit id="8f918b826b106b878ecb7fd2c10be5c245778c0e" translate="yes" xml:space="preserve">
          <source>Returns the size of the view if the view is bounded.</source>
          <target state="translated">如果视图是有边界的,则返回视图的大小。</target>
        </trans-unit>
        <trans-unit id="d91d3d0c4f8e44e6e8cfffce7bc191f0350f4557" translate="yes" xml:space="preserve">
          <source>Returns the smaller of the given values.</source>
          <target state="translated">返回给定值中较小的一个。</target>
        </trans-unit>
        <trans-unit id="093ef039d6fc581e3dd5bda7a8b01bb4e4b5b7ad" translate="yes" xml:space="preserve">
          <source>Returns the smallest duration &lt;code&gt;t&lt;/code&gt; representable in &lt;code&gt;ToDuration&lt;/code&gt; that is greater or equal to &lt;code&gt;d&lt;/code&gt;.</source>
          <target state="translated">返回大于或等于 &lt;code&gt;d&lt;/code&gt; 的 &lt;code&gt;ToDuration&lt;/code&gt; 可表示的最小持续时间 &lt;code&gt;t&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="d52d579f6de1c80db285131b472aac9a590166ce" translate="yes" xml:space="preserve">
          <source>Returns the smallest possible &lt;code&gt;year&lt;/code&gt;, that is, &lt;code&gt;&lt;a href=&quot;../year&quot;&gt;std::chrono::year&lt;/a&gt;(-32767)&lt;/code&gt;.</source>
          <target state="translated">返回最小的 &lt;code&gt;year&lt;/code&gt; ，即 &lt;code&gt;&lt;a href=&quot;../year&quot;&gt;std::chrono::year&lt;/a&gt;(-32767)&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="1177ca955cbf8a34005878518c49835ad32bb877" translate="yes" xml:space="preserve">
          <source>Returns the smallest time point &lt;code&gt;t&lt;/code&gt; representable in &lt;code&gt;ToDuration&lt;/code&gt; that is greater or equal to &lt;code&gt;tp&lt;/code&gt;.</source>
          <target state="translated">返回最小的时间点 &lt;code&gt;t&lt;/code&gt; 中表示的 &lt;code&gt;ToDuration&lt;/code&gt; 是大于或等于 &lt;code&gt;tp&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="2c7a7b1cb3599d004f091fea0e029165c4e8f151" translate="yes" xml:space="preserve">
          <source>Returns the smallest value that G's operator() may return. The value is strictly less than &lt;code&gt;G::max()&lt;/code&gt;.</source>
          <target state="translated">返回G的operator（）可能返回的最小值。该值严格小于 &lt;code&gt;G::max()&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="c0831994761462bff1fd6037b70388f9abbb5781" translate="yes" xml:space="preserve">
          <source>Returns the special value &quot;positive infinity&quot;, as represented by the floating-point type &lt;code&gt;T&lt;/code&gt;. Only meaningful if &lt;code&gt;&lt;a href=&quot;../numeric_limits&quot;&gt;std::numeric_limits&lt;/a&gt;&amp;lt;T&amp;gt;::has_infinity == true&lt;/code&gt;. In IEEE 754, the most common binary representation of floating-point numbers, the positive infinity is the value with all bits of the exponent set and all bits of the fraction cleared.</source>
          <target state="translated">返回特殊值&amp;ldquo;正无穷大&amp;rdquo;，由浮点类型 &lt;code&gt;T&lt;/code&gt; 表示。仅在 &lt;code&gt;&lt;a href=&quot;../numeric_limits&quot;&gt;std::numeric_limits&lt;/a&gt;&amp;lt;T&amp;gt;::has_infinity == true&lt;/code&gt; 时才有意义。在IEEE 754中，浮点数最常见的二进制表示形式，正无穷大是指指数集的所有位都被清除且分数的所有位都被清除的值。</target>
        </trans-unit>
        <trans-unit id="2bce02d15814aec567e12d7175ab166495414834" translate="yes" xml:space="preserve">
          <source>Returns the special value &quot;quiet &lt;a href=&quot;https://en.wikipedia.org/wiki/NaN&quot;&gt;not-a-number&lt;/a&gt;&quot;, as represented by the floating-point type &lt;code&gt;T&lt;/code&gt;. Only meaningful if &lt;code&gt;&lt;a href=&quot;../numeric_limits&quot;&gt;std::numeric_limits&lt;/a&gt;&amp;lt;T&amp;gt;::has_quiet_NaN == true&lt;/code&gt;. In IEEE 754, the most common binary representation of floating-point numbers, any value with all bits of the exponent set and at least one bit of the fraction set represents a NaN. It is implementation-defined which values of the fraction represent quiet or signaling NaNs, and whether the sign bit is meaningful.</source>
          <target state="translated">返回特殊值&amp;ldquo; quiet &lt;a href=&quot;https://en.wikipedia.org/wiki/NaN&quot;&gt;not-a-number&lt;/a&gt; &amp;rdquo;，如浮点类型 &lt;code&gt;T&lt;/code&gt; 所示。仅在 &lt;code&gt;&lt;a href=&quot;../numeric_limits&quot;&gt;std::numeric_limits&lt;/a&gt;&amp;lt;T&amp;gt;::has_quiet_NaN == true&lt;/code&gt; 时才有意义。在IEEE 754中，浮点数的最常见二进制表示形式是：具有指数集的所有位和分数集的至少一位的任何值表示NaN。由实现定义，该分数的哪个值表示静默或信令NaN，以及符号位是否有意义。</target>
        </trans-unit>
        <trans-unit id="75b4ec948fc38898ca158011eb77bf1e30c8a9de" translate="yes" xml:space="preserve">
          <source>Returns the special value &quot;signaling &lt;a href=&quot;https://en.wikipedia.org/wiki/NaN&quot;&gt;not-a-number&lt;/a&gt;&quot;, as represented by the floating-point type &lt;code&gt;T&lt;/code&gt;. Only meaningful if &lt;code&gt;&lt;a href=&quot;../numeric_limits&quot;&gt;std::numeric_limits&lt;/a&gt;&amp;lt;T&amp;gt;::has_signaling_NaN == true&lt;/code&gt;. In IEEE 754, the most common binary representation of floating-point numbers, any value with all bits of the exponent set and at least one bit of the fraction set represents a NaN. It is implementation-defined which values of the fraction represent quiet or signaling NaNs, and whether the sign bit is meaningful.</source>
          <target state="translated">返回特殊值&amp;ldquo; signaling &lt;a href=&quot;https://en.wikipedia.org/wiki/NaN&quot;&gt;not-a-number&lt;/a&gt; &amp;rdquo;，以浮点类型 &lt;code&gt;T&lt;/code&gt; 表示。仅在 &lt;code&gt;&lt;a href=&quot;../numeric_limits&quot;&gt;std::numeric_limits&lt;/a&gt;&amp;lt;T&amp;gt;::has_signaling_NaN == true&lt;/code&gt; 时才有意义。在IEEE 754中，浮点数的最常见二进制表示形式是：具有指数集的所有位和分数集的至少一位的任何值表示NaN。由实现定义，该分数的哪些值表示静默或用信号通知NaN，以及符号位是否有意义。</target>
        </trans-unit>
        <trans-unit id="1d966c6fbd5a14aecf42147325c657cd02208c3b" translate="yes" xml:space="preserve">
          <source>Returns the stored duration.</source>
          <target state="translated">返回存储的持续时间。</target>
        </trans-unit>
        <trans-unit id="876ffef01a8477837ee8a640ab4a18c8114387c6" translate="yes" xml:space="preserve">
          <source>Returns the stored error category.</source>
          <target state="translated">返回存储的错误类别。</target>
        </trans-unit>
        <trans-unit id="9d07134d5cf7d55b30a68d4f60eeeead919b6df0" translate="yes" xml:space="preserve">
          <source>Returns the stored error code.</source>
          <target state="translated">返回存储的错误代码。</target>
        </trans-unit>
        <trans-unit id="e50a78a7c8f65eef8efc0215e84cf77a2239db34" translate="yes" xml:space="preserve">
          <source>Returns the stored pointer.</source>
          <target state="translated">返回存储的指针。</target>
        </trans-unit>
        <trans-unit id="6e76437c9da1ef7b6d8133968891bded8116b105" translate="yes" xml:space="preserve">
          <source>Returns the stored reference.</source>
          <target state="translated">返回存储的引用。</target>
        </trans-unit>
        <trans-unit id="d797ef2f230d2d8d65e3ca87bd8cf5517717a47e" translate="yes" xml:space="preserve">
          <source>Returns the substring from the beginning of &lt;a href=&quot;filename&quot;&gt;&lt;code&gt;filename()&lt;/code&gt;&lt;/a&gt; up to and not including the last period (&lt;code&gt;.&lt;/code&gt;) character, with the following exceptions:</source>
          <target state="translated">返回从&lt;a href=&quot;filename&quot;&gt; &lt;code&gt;filename()&lt;/code&gt; &lt;/a&gt;的开头到最后一个句点（ &lt;code&gt;.&lt;/code&gt; ）字符（不包括最后一个字符）的子字符串，以下情况除外：</target>
        </trans-unit>
        <trans-unit id="af4f12acf9eed987d20278e420b31f08024edec2" translate="yes" xml:space="preserve">
          <source>Returns the sum of &lt;code&gt;lhs&lt;/code&gt; and &lt;code&gt;rhs&lt;/code&gt;.</source>
          <target state="translated">返回 &lt;code&gt;lhs&lt;/code&gt; 和 &lt;code&gt;rhs&lt;/code&gt; 的总和。</target>
        </trans-unit>
        <trans-unit id="617a20189d7c6b1aec644802e36d40caf43425d7" translate="yes" xml:space="preserve">
          <source>Returns the time zone pointer for the time zone designated by &lt;code&gt;name&lt;/code&gt;.</source>
          <target state="translated">返回由 &lt;code&gt;name&lt;/code&gt; 指定的时区的时区指针。</target>
        </trans-unit>
        <trans-unit id="a22b18625a3c1559e51355f6c94504a5147f1173" translate="yes" xml:space="preserve">
          <source>Returns the type of the stored function.</source>
          <target state="translated">返回存储函数的类型。</target>
        </trans-unit>
        <trans-unit id="b90da109a7cd57bb3436fa012220c6196cf694d5" translate="yes" xml:space="preserve">
          <source>Returns the underlying base iterator.</source>
          <target state="translated">返回底层迭代器。</target>
        </trans-unit>
        <trans-unit id="bc30cbe098ecc9d81481847c32e0723b01a083e4" translate="yes" xml:space="preserve">
          <source>Returns the underlying base iterator. That is &lt;code&gt;&lt;a href=&quot;../reverse_iterator&quot;&gt;std::reverse_iterator&lt;/a&gt;(it).base() == it&lt;/code&gt;.</source>
          <target state="translated">返回基础的基础迭代器。那是 &lt;code&gt;&lt;a href=&quot;../reverse_iterator&quot;&gt;std::reverse_iterator&lt;/a&gt;(it).base() == it&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="9481a59c003da5e7f87785ded055343488b15667" translate="yes" xml:space="preserve">
          <source>Returns the underlying engine.</source>
          <target state="translated">返回底层引擎。</target>
        </trans-unit>
        <trans-unit id="3ebf76603603bad4394125ecd772b29ed85c2680" translate="yes" xml:space="preserve">
          <source>Returns the underlying implementation-defined native handle object.</source>
          <target state="translated">返回底层实现定义的本地句柄对象。</target>
        </trans-unit>
        <trans-unit id="5c6084ff7b53cf76e2ea1476dc9fe76f57b948e9" translate="yes" xml:space="preserve">
          <source>Returns the uppercase form of &lt;code&gt;ch&lt;/code&gt; if one is listed in the locale, otherwise returns &lt;code&gt;ch&lt;/code&gt; unchanged.</source>
          <target state="translated">返回的大写形式 &lt;code&gt;ch&lt;/code&gt; 如果在语言环境中列出，否则返回 &lt;code&gt;ch&lt;/code&gt; 不变。</target>
        </trans-unit>
        <trans-unit id="28208fa722bf87d3628c4300c69fa486d0702dcd" translate="yes" xml:space="preserve">
          <source>Returns the value &lt;code&gt;t&lt;/code&gt; representable in &lt;code&gt;ToDuration&lt;/code&gt; that is the closest to &lt;code&gt;d&lt;/code&gt;. If there are two such values, returns the even value (that is, the value &lt;code&gt;t&lt;/code&gt; such that &lt;code&gt;t % 2 == 0&lt;/code&gt;).</source>
          <target state="translated">返回在 &lt;code&gt;ToDuration&lt;/code&gt; 中可表示的最接近 &lt;code&gt;d&lt;/code&gt; 的值 &lt;code&gt;t&lt;/code&gt; 。如果有两个这样的值，则返回偶数值（即 &lt;code&gt;t&lt;/code&gt; 使得 &lt;code&gt;t % 2 == 0&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="e6f8ac72940fce8b334f45e0ad077a2d6cc47519" translate="yes" xml:space="preserve">
          <source>Returns the value of the bit at the position &lt;code&gt;pos&lt;/code&gt;.</source>
          <target state="translated">返回位置 &lt;code&gt;pos&lt;/code&gt; 上的位的值。</target>
        </trans-unit>
        <trans-unit id="774879d960694b9d5667848888e4fb4226c3e74a" translate="yes" xml:space="preserve">
          <source>Returns the value of the default memory resource pointer.</source>
          <target state="translated">返回默认内存资源指针的值。</target>
        </trans-unit>
        <trans-unit id="4fcf5e7fc6b2038496c474896fb07e47feb78a84" translate="yes" xml:space="preserve">
          <source>Returns the value of the referenced bit.</source>
          <target state="translated">返回被引用位的值。</target>
        </trans-unit>
        <trans-unit id="04ec66d7ca0c58062b715a2242cbdceda9402ce4" translate="yes" xml:space="preserve">
          <source>Returns the weekday value stored in &lt;code&gt;*this&lt;/code&gt;.</source>
          <target state="translated">返回存储在 &lt;code&gt;*this&lt;/code&gt; 中的工作日值。</target>
        </trans-unit>
        <trans-unit id="26e284ea26164b9c8c430c54d4ab6e3482e57631" translate="yes" xml:space="preserve">
          <source>Returns the wrapped value. This function enables &lt;code&gt;std::integral_constant&lt;/code&gt; to serve as a source of compile-time function objects.</source>
          <target state="translated">返回包装的值。此函数使 &lt;code&gt;std::integral_constant&lt;/code&gt; 可以用作编译时函数对象的源。</target>
        </trans-unit>
        <trans-unit id="ec317a0c618a00783b65ef01c344c671c0c98ccb" translate="yes" xml:space="preserve">
          <source>Returns the year value stored in &lt;code&gt;*this&lt;/code&gt;.</source>
          <target state="translated">返回存储在 &lt;code&gt;*this&lt;/code&gt; 中的年份值。</target>
        </trans-unit>
        <trans-unit id="93bf104fe6b74cb3c929a5649d33c831bd74379a" translate="yes" xml:space="preserve">
          <source>Returns the zero-based index of the alternative that is currently held by the variant.</source>
          <target state="translated">返回变体当前持有的备选方案的零基指数。</target>
        </trans-unit>
        <trans-unit id="cb6c9d35c2a93a09af93fc95a1c618a790d37b2c" translate="yes" xml:space="preserve">
          <source>Returns true if the atomic operations on all objects of this type are lock-free, false otherwise.</source>
          <target state="translated">如果对该类型所有对象的原子操作是无锁的,则返回true,否则返回false。</target>
        </trans-unit>
        <trans-unit id="e65cebe674230d59ac8923f2ba16f831847a0826" translate="yes" xml:space="preserve">
          <source>Returns unspecified value not equal to &lt;code&gt;Traits::eof()&lt;/code&gt; on success, &lt;code&gt;Traits::eof()&lt;/code&gt; on failure.</source>
          <target state="translated">如果成功，则返回不等于 &lt;code&gt;Traits::eof()&lt;/code&gt; 未指定值，如果失败，则返回 &lt;code&gt;Traits::eof()&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="7b9d2d182455d63762414ba5104580e163fa4341" translate="yes" xml:space="preserve">
          <source>Returns whether &lt;code&gt;lhs&lt;/code&gt;'s base engine is equal to &lt;code&gt;rhs&lt;/code&gt;'s base engine or not.</source>
          <target state="translated">返回 &lt;code&gt;lhs&lt;/code&gt; 的基本引擎是否等于 &lt;code&gt;rhs&lt;/code&gt; 的基本引擎。</target>
        </trans-unit>
        <trans-unit id="bcf6a7fa371ccfbaf9ec607c5cba9566ef77aa26" translate="yes" xml:space="preserve">
          <source>Returns whether the given container is empty.</source>
          <target state="translated">返回给定容器是否为空。</target>
        </trans-unit>
        <trans-unit id="2a54ab117b8775c13fec8afbd910451aa91a3103" translate="yes" xml:space="preserve">
          <source>Returns zero on success. Otherwise &lt;code&gt;&lt;a href=&quot;../c&quot;&gt;EOF&lt;/a&gt;&lt;/code&gt; is returned and the error indicator of the file stream is set.</source>
          <target state="translated">成功返回零。否则，返回 &lt;code&gt;&lt;a href=&quot;../c&quot;&gt;EOF&lt;/a&gt;&lt;/code&gt; 并设置文件流的错误指示符。</target>
        </trans-unit>
        <trans-unit id="7749fcf802c472b6c2f5bd0556805e456ffd5674" translate="yes" xml:space="preserve">
          <source>Returns:</source>
          <target state="translated">Returns:</target>
        </trans-unit>
        <trans-unit id="a4e184e80388458881aad54bf402ea36f6f4ea52" translate="yes" xml:space="preserve">
          <source>Returns: &lt;code&gt;s&lt;/code&gt;</source>
          <target state="translated">返回： &lt;code&gt;s&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="46130b151acfa71a4f164ee3519a58c1360be134" translate="yes" xml:space="preserve">
          <source>Returns: The previous locale used by &lt;code&gt;u&lt;/code&gt; if any</source>
          <target state="translated">返回： &lt;code&gt;u&lt;/code&gt; 使用的先前语言环境（如果有）</target>
        </trans-unit>
        <trans-unit id="da6f5a6268552104c82633df2ad5b36704b7b4cf" translate="yes" xml:space="preserve">
          <source>Returns: The previous locale used by &lt;code&gt;v&lt;/code&gt; if any.</source>
          <target state="translated">返回： &lt;code&gt;v&lt;/code&gt; 所使用的先前语言环境（如果有）。</target>
        </trans-unit>
        <trans-unit id="d7b8f099da9a2d411e8085d03a23ba7307422285" translate="yes" xml:space="preserve">
          <source>Returns: a character such that for any character &lt;code&gt;C&lt;/code&gt; considered to be equivalent to &lt;code&gt;c&lt;/code&gt; without regard to case, then &lt;code&gt;v.translate_nocase(c) == v.translate_nocase(C)&lt;/code&gt;.</source>
          <target state="translated">返回：一个对于不考虑大小写而被认为等效于 &lt;code&gt;c&lt;/code&gt; 的任何字符 &lt;code&gt;C&lt;/code&gt; 的字符，则 &lt;code&gt;v.translate_nocase(c) == v.translate_nocase(C)&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="c0cf5999dd0eabdd512520638dfbbe017e37bbaf" translate="yes" xml:space="preserve">
          <source>Returns: a character such that for any character &lt;code&gt;d&lt;/code&gt; considered to be equivalent to &lt;code&gt;c&lt;/code&gt;, then &lt;code&gt;v.translate(c) == v.translate(d)&lt;/code&gt;.</source>
          <target state="translated">返回：一个字符，使得对于任何字符 &lt;code&gt;d&lt;/code&gt; 被认为是等同于 &lt;code&gt;c&lt;/code&gt; ，然后 &lt;code&gt;v.translate(c) == v.translate(d)&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="3ca57ed1d8e3a67c110c19414384074a64c3bd90" translate="yes" xml:space="preserve">
          <source>Returns: a sort key for the character sequence designated by the iterator range &lt;code&gt;[F1, F2)&lt;/code&gt; such that if the character sequence &lt;code&gt;[G1, G2)&lt;/code&gt; sorts before the character sequence &lt;code&gt;[H1, H2)&lt;/code&gt; without regard to case, then &lt;code&gt;v.transform_primary(G1, G2) &amp;lt; v.transform_primary(H1, H2)&lt;/code&gt;.</source>
          <target state="translated">返回：用于由迭代器范围 &lt;code&gt;[F1, F2)&lt;/code&gt; 指定的字符序列的排序键，这样，如果字符序列 &lt;code&gt;[G1, G2)&lt;/code&gt; 在字符序列 &lt;code&gt;[H1, H2)&lt;/code&gt; 不考虑大小写而排序，则 &lt;code&gt;v.transform_primary(G1, G2) &amp;lt; v.transform_primary(H1, H2)&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="2f35499fb66ee9c529a0ce69d6a486cb5e887704" translate="yes" xml:space="preserve">
          <source>Returns: a sort key for the character sequence designated by the iterator range &lt;code&gt;[F1, F2)&lt;/code&gt; such that if the character sequence &lt;code&gt;[G1, G2)&lt;/code&gt; sorts before the character sequence &lt;code&gt;[H1, H2)&lt;/code&gt;, then &lt;code&gt;v.transform(G1, G2) &amp;lt; v.transform(H1, H2)&lt;/code&gt;.</source>
          <target state="translated">返回：用于由迭代器范围 &lt;code&gt;[F1, F2)&lt;/code&gt; 指定的字符序列的排序键，这样，如果字符序列 &lt;code&gt;[G1, G2)&lt;/code&gt; 在字符序列 &lt;code&gt;[H1, H2)&lt;/code&gt; 之前排序，则 &lt;code&gt;v.transform(G1, G2) &amp;lt; v.transform(H1, H2)&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="4ceab92f8ea99e032315873d59ef7bf909c33a18" translate="yes" xml:space="preserve">
          <source>Returns: a value &lt;code&gt;e&lt;/code&gt; such that &lt;code&gt;X​::​eq_int_type(e, X​::​to_int_type(c))&lt;/code&gt; is false for all values &lt;code&gt;c&lt;/code&gt;</source>
          <target state="translated">返回：一个值 &lt;code&gt;e&lt;/code&gt; ，使得 &lt;code&gt;X​::​eq_int_type(e, X​::​to_int_type(c))&lt;/code&gt; 是对于所有的值假 &lt;code&gt;c&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="0bfae7aec82cd7cad2c241c57261bf7c2ec85c8b" translate="yes" xml:space="preserve">
          <source>Returns: some value &lt;code&gt;e&lt;/code&gt;, constrained by the definitions of &lt;code&gt;X::to_char_type&lt;/code&gt; and &lt;code&gt;X::eq_int_type&lt;/code&gt;</source>
          <target state="translated">返回：一些值 &lt;code&gt;e&lt;/code&gt; ，受 &lt;code&gt;X::to_char_type&lt;/code&gt; 和 &lt;code&gt;X::eq_int_type&lt;/code&gt; 的定义约束</target>
        </trans-unit>
        <trans-unit id="586356d7a229fbe99b8c67b460fde30f75cdf11c" translate="yes" xml:space="preserve">
          <source>Returns: the smallest &lt;code&gt;i&lt;/code&gt; such that &lt;code&gt;X​::​eq(p[i], CharT())&lt;/code&gt; is true</source>
          <target state="translated">返回：使 &lt;code&gt;X​::​eq(p[i], CharT())&lt;/code&gt; 为true 的最小 &lt;code&gt;i&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="e1b84cd0f4a2717c874dc64db89207b5b2afe067" translate="yes" xml:space="preserve">
          <source>Returns: the smallest &lt;code&gt;i&lt;/code&gt; such that &lt;code&gt;p[i] == 0&lt;/code&gt;. Complexity is linear in &lt;code&gt;i&lt;/code&gt;.</source>
          <target state="translated">返回：使得 &lt;code&gt;p[i] == 0&lt;/code&gt; 的最小 &lt;code&gt;i&lt;/code&gt; 。 &lt;code&gt;i&lt;/code&gt; 中的复杂度是线性的。</target>
        </trans-unit>
        <trans-unit id="4d11c8317f846bd6df80edb484618d736a4dd097" translate="yes" xml:space="preserve">
          <source>Returns: whether &lt;code&gt;c&lt;/code&gt; is a member of one of the character classes designated by &lt;code&gt;cl&lt;/code&gt; or not.</source>
          <target state="translated">返回： &lt;code&gt;c&lt;/code&gt; 是否为 &lt;code&gt;cl&lt;/code&gt; 指定的字符类之一的成员。</target>
        </trans-unit>
        <trans-unit id="bf5f200f7863579a19ebbae6b7f03e26f06106c2" translate="yes" xml:space="preserve">
          <source>Returns: whether &lt;code&gt;c&lt;/code&gt; is to be treated as equal to &lt;code&gt;d&lt;/code&gt;</source>
          <target state="translated">返回：是否将 &lt;code&gt;c&lt;/code&gt; 视为等于 &lt;code&gt;d&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="c8966b98a16d17f720a124beca943b4e6836a118" translate="yes" xml:space="preserve">
          <source>Returns: whether &lt;code&gt;c&lt;/code&gt; is to be treated as less than &lt;code&gt;d&lt;/code&gt;</source>
          <target state="translated">返回值：是否将 &lt;code&gt;c&lt;/code&gt; 视为小于 &lt;code&gt;d&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="96f99d9b768c1e64b8479d02a0b2c54f8a71cd44" translate="yes" xml:space="preserve">
          <source>Reverse iterator to the element following the last element.</source>
          <target state="translated">反向迭代到最后一个元素之后的元素。</target>
        </trans-unit>
        <trans-unit id="2803e975dea75f6ec40edf15f00190d864eea7f8" translate="yes" xml:space="preserve">
          <source>Reverse iterator to the first element.</source>
          <target state="translated">反向迭代到第一个元素。</target>
        </trans-unit>
        <trans-unit id="9abb0afb9b6ad570941253de1412d82917589c89" translate="yes" xml:space="preserve">
          <source>Reverses the order of the elements in the container. No references or iterators become invalidated.</source>
          <target state="translated">颠倒容器中元素的顺序。任何引用或迭代器都不会失效。</target>
        </trans-unit>
        <trans-unit id="f07f0239cd49dc1e6e0280d87432a68d4f852d26" translate="yes" xml:space="preserve">
          <source>ReversibleContainer</source>
          <target state="translated">ReversibleContainer</target>
        </trans-unit>
        <trans-unit id="834f71f3f271492f7a56dcc9326dd1fc88267c90" translate="yes" xml:space="preserve">
          <source>Rewording inheriting constructors</source>
          <target state="translated">重述继承构造函数</target>
        </trans-unit>
        <trans-unit id="4c7a9cedbc1dc3ad80c286f4b5cc8d0e22dc20cb" translate="yes" xml:space="preserve">
          <source>Riemann zeta function</source>
          <target state="translated">黎曼zeta函数</target>
        </trans-unit>
        <trans-unit id="fe82ba6f5d66b495587b08ed97ce387d2c4f2f77" translate="yes" xml:space="preserve">
          <source>Right-to-left</source>
          <target state="translated">Right-to-left</target>
        </trans-unit>
        <trans-unit id="49ed666d70b8888deb29d586a94141023306b421" translate="yes" xml:space="preserve">
          <source>Rounding style cannot be determined</source>
          <target state="translated">无法确定四舍五入方式</target>
        </trans-unit>
        <trans-unit id="6abd4b64458aebfbceaa796c4c1d3b4fa05c8ddf" translate="yes" xml:space="preserve">
          <source>Rounding toward nearest representable value</source>
          <target state="translated">四舍五入到最接近的可表示值。</target>
        </trans-unit>
        <trans-unit id="f804baa0b9d2ab33c5089427cf82dca999fd78ca" translate="yes" xml:space="preserve">
          <source>Rounding toward negative infinity</source>
          <target state="translated">趋向负无穷大</target>
        </trans-unit>
        <trans-unit id="df15d911c2038de84de4758382ce422f9f72dd3f" translate="yes" xml:space="preserve">
          <source>Rounding toward positive infinity</source>
          <target state="translated">正无穷大的四舍五入</target>
        </trans-unit>
        <trans-unit id="158e7ea05786cecfa8341bfe9b942802e206bd09" translate="yes" xml:space="preserve">
          <source>Rounding toward zero</source>
          <target state="translated">四舍五入为零</target>
        </trans-unit>
        <trans-unit id="e2573475649d335ded7b5572dcc8e8ae0d17abdc" translate="yes" xml:space="preserve">
          <source>Rule of five</source>
          <target state="translated">五人行规则</target>
        </trans-unit>
        <trans-unit id="d44c9d4a6f4d64a33049ca829ddc0e65cc22ecc5" translate="yes" xml:space="preserve">
          <source>Rule of three</source>
          <target state="translated">三分法则</target>
        </trans-unit>
        <trans-unit id="5f79a5c57474a6b48e9bbb8949233ba1d5a4e0e2" translate="yes" xml:space="preserve">
          <source>Rule of three/five/zero</source>
          <target state="translated">三/五/零规则</target>
        </trans-unit>
        <trans-unit id="ffccabef044b8080354b7b42c46234d0ba4de6f7" translate="yes" xml:space="preserve">
          <source>Rule of zero</source>
          <target state="translated">零规则</target>
        </trans-unit>
        <trans-unit id="d7dd5f9933ecc8c067dbea0a7376d229940f810e" translate="yes" xml:space="preserve">
          <source>RunTime Type Identification</source>
          <target state="translated">运行时间类型识别</target>
        </trans-unit>
        <trans-unit id="d7ce630298bb0f0d32988acc69fe3f19192fff9b" translate="yes" xml:space="preserve">
          <source>Runtime overhead</source>
          <target state="translated">运行时开销</target>
        </trans-unit>
        <trans-unit id="0056c02caf65dc65ef6829dab9b01341fe08d2ea" translate="yes" xml:space="preserve">
          <source>Runtime type identification</source>
          <target state="translated">运行时类型识别</target>
        </trans-unit>
        <trans-unit id="19259b880fb6ca47a883d0f25e9e152c7ddc185c" translate="yes" xml:space="preserve">
          <source>Runtime type information utilities</source>
          <target state="translated">运行时类型信息实用程序</target>
        </trans-unit>
        <trans-unit id="48cf6fde2143f8fc379b0d92e7ad0e99193762de" translate="yes" xml:space="preserve">
          <source>Rvalue reference</source>
          <target state="translated">R值参考</target>
        </trans-unit>
        <trans-unit id="e5592cd0fb417300cbaac9ee976b933b1a98a51d" translate="yes" xml:space="preserve">
          <source>Rvalue references</source>
          <target state="translated">R值参考</target>
        </trans-unit>
        <trans-unit id="f8a89a8d3cb56875e30f7eddd2007fbf07addb63" translate="yes" xml:space="preserve">
          <source>Rvalue references can be used to &lt;a href=&quot;reference_initialization#Lifetime_of_a_temporary&quot;&gt;extend the lifetimes&lt;/a&gt; of temporary objects (note, lvalue references to const can extend the lifetimes of temporary objects too, but they are not modifiable through them):</source>
          <target state="translated">Rvalue引用可用于&lt;a href=&quot;reference_initialization#Lifetime_of_a_temporary&quot;&gt;延长&lt;/a&gt;临时对象的生存时间（请注意，对const的lvalue引用也可以延长临时对象的生存时间，但不能通过它们进行修改）：</target>
        </trans-unit>
        <trans-unit id="05a2bf8d36793aa8bab6e0777cef4331bd455a0a" translate="yes" xml:space="preserve">
          <source>Rvalue-reference or pointer to the current element.</source>
          <target state="translated">Rvalue-引用或指向当前元素的指针。</target>
        </trans-unit>
        <trans-unit id="02aa629c8b16cd17a44f3a0efec2feed43937642" translate="yes" xml:space="preserve">
          <source>S</source>
          <target state="translated">S</target>
        </trans-unit>
        <trans-unit id="99ccba96b6ef0e235a4c8577bd670239479a2ae5" translate="yes" xml:space="preserve">
          <source>S (b</source>
          <target state="translated">S(b)</target>
        </trans-unit>
        <trans-unit id="535830dcd538178615f9fc300712a30d4e0428b0" translate="yes" xml:space="preserve">
          <source>S = -&amp;Sigma;n-1</source>
          <target state="translated">S =-&amp;Sigma;n-1</target>
        </trans-unit>
        <trans-unit id="6e6d43281a16ef5a5dead88ad98f3e36adbb9abf" translate="yes" xml:space="preserve">
          <source>S. Meyers (1996) &quot;More Effective C++&quot; Item 13</source>
          <target state="translated">S.Meyers(1996年)&quot;更有效的C++&quot; 项目13</target>
        </trans-unit>
        <trans-unit id="09727c14bfcfb9af33d5654fa5b75511c035ca53" translate="yes" xml:space="preserve">
          <source>SBO</source>
          <target state="translated">SBO</target>
        </trans-unit>
        <trans-unit id="e0e1e9bb21dd6bf2ca9e0ec4ae5e68aeafe63a3a" translate="yes" xml:space="preserve">
          <source>SCHAR_MAXSHRT_MAXINT_MAXLONG_MAXLLONG_MAX</source>
          <target state="translated">SCHAR_MAXSHRT_MAXINT_MAXLONG_MAXLLONG_MAX</target>
        </trans-unit>
        <trans-unit id="0c1c4579f2c3ffdd09da47704048a8f99de86d92" translate="yes" xml:space="preserve">
          <source>SCHAR_MINSHRT_MININT_MINLONG_MINLLONG_MIN</source>
          <target state="translated">SCHAR_MINSHRT_MININT_MINLONG_MINLLONG_MIN</target>
        </trans-unit>
        <trans-unit id="150a2746d9e59e986b58baa96d09d397cddbbd1c" translate="yes" xml:space="preserve">
          <source>SCNd8SCNd16SCNd32SCNd64SCNdLEAST8SCNdLEAST16SCNdLEAST32SCNdLEAST64SCNdFAST8SCNdFAST16SCNdFAST32SCNdFAST64SCNdMAXSCNdPTR</source>
          <target state="translated">SCNd8SCNd16SCNd32SCNd64SCNdLEAST8SCNdLEAST16SCNdLEAST32SCNdLEAST64SCNdFAST8SCNdFAST16SCNdFAST32SCNdFAST64SCNdMAXSCNdPTR</target>
        </trans-unit>
        <trans-unit id="6d04b55aadc6ab9c5bbc2aa7259245c75e68b744" translate="yes" xml:space="preserve">
          <source>SCNd&lt;b&gt;x&lt;/b&gt;</source>
          <target state="translated">SCNd&lt;b&gt;x&lt;/b&gt;</target>
        </trans-unit>
        <trans-unit id="3dd91f84d0faf1a7978dad2e71c905da0953b4bb" translate="yes" xml:space="preserve">
          <source>SCNdFAST&lt;b&gt;x&lt;/b&gt;</source>
          <target state="translated">SCNdFAST&lt;b&gt;x&lt;/b&gt;</target>
        </trans-unit>
        <trans-unit id="31c5cc7de51ea969f267e338f9664c295f050b1c" translate="yes" xml:space="preserve">
          <source>SCNdLEAST&lt;b&gt;x&lt;/b&gt;</source>
          <target state="translated">SCNdLEAST&lt;b&gt;x&lt;/b&gt;</target>
        </trans-unit>
        <trans-unit id="954af9691203e55c28f455fe350cb91ac544605d" translate="yes" xml:space="preserve">
          <source>SCNdMAX</source>
          <target state="translated">SCNdMAX</target>
        </trans-unit>
        <trans-unit id="130aefc4b4c263044102a86d820fa5fa1b1267bc" translate="yes" xml:space="preserve">
          <source>SCNdPTR</source>
          <target state="translated">SCNdPTR</target>
        </trans-unit>
        <trans-unit id="5189e3a97427b6b0bfdaa21b92591de45b1d523c" translate="yes" xml:space="preserve">
          <source>SCNi8SCNi16SCNi32SCNi64SCNiLEAST8SCNiLEAST16SCNiLEAST32SCNiLEAST64SCNiFAST8SCNiFAST16SCNiFAST32SCNiFAST64SCNiMAXSCNiPTR</source>
          <target state="translated">SCNi8SCNi16SCNi32SCNi64SCNiLEAST8SCNiLEAST16SCNiLEAST32SCNiLEAST64SCNiFAST8SCNiFAST16SCNiFAST32SCNiFAST64SCNiMAXSCNiPTR</target>
        </trans-unit>
        <trans-unit id="27443f5d3060bebbc97c2ae3ad46791875b6f35f" translate="yes" xml:space="preserve">
          <source>SCNi&lt;b&gt;x&lt;/b&gt;</source>
          <target state="translated">SCNi&lt;b&gt;x&lt;/b&gt;</target>
        </trans-unit>
        <trans-unit id="3333b86b76b7339b77825f7f7d8a7feabb8e8fb0" translate="yes" xml:space="preserve">
          <source>SCNiFAST&lt;b&gt;x&lt;/b&gt;</source>
          <target state="translated">SCNiFAST&lt;b&gt;x&lt;/b&gt;</target>
        </trans-unit>
        <trans-unit id="2ec5adaf2b1bc307dc3d7f5c6e0e39ce1b1461a0" translate="yes" xml:space="preserve">
          <source>SCNiLEAST&lt;b&gt;x&lt;/b&gt;</source>
          <target state="translated">SCNiLEAST&lt;b&gt;x&lt;/b&gt;</target>
        </trans-unit>
        <trans-unit id="322b1af9a53c72c177fbf3ea5885fc063c2ee978" translate="yes" xml:space="preserve">
          <source>SCNiMAX</source>
          <target state="translated">SCNiMAX</target>
        </trans-unit>
        <trans-unit id="1bca168cd6b75e54e9556697d1fefb33e9be5462" translate="yes" xml:space="preserve">
          <source>SCNiPTR</source>
          <target state="translated">SCNiPTR</target>
        </trans-unit>
        <trans-unit id="b48b8e6f1d3c9fc7d857d945fdd996c4b393273f" translate="yes" xml:space="preserve">
          <source>SCNo8SCNo16SCNo32SCNo64SCNoLEAST8SCNoLEAST16SCNoLEAST32SCNoLEAST64SCNoFAST8SCNoFAST16SCNoFAST32SCNoFAST64SCNoMAXSCNoPTR</source>
          <target state="translated">SCNo8SCNo16SCNo32SCNo64SCNoLEAST8SCNoLEAST16SCNoLEAST32SCNoLEAST64SCNoFAST8SCNoFAST16SCNoFAST32SCNoFAST64SCNoMAXSCNoPTR</target>
        </trans-unit>
        <trans-unit id="7ec6b9b949b7e74e362fe8e3617e5f1254b8993a" translate="yes" xml:space="preserve">
          <source>SCNo&lt;b&gt;x&lt;/b&gt;</source>
          <target state="translated">SCNo&lt;b&gt;x&lt;/b&gt;</target>
        </trans-unit>
        <trans-unit id="c2aa75357781bdcd5db86111157ab4458a8d31f7" translate="yes" xml:space="preserve">
          <source>SCNoFAST&lt;b&gt;x&lt;/b&gt;</source>
          <target state="translated">SCNoFAST&lt;b&gt;x&lt;/b&gt;</target>
        </trans-unit>
        <trans-unit id="48241bcacb32921016825bbe262366c64825ba9f" translate="yes" xml:space="preserve">
          <source>SCNoLEAST&lt;b&gt;x&lt;/b&gt;</source>
          <target state="translated">SCNoLEAST&lt;b&gt;x&lt;/b&gt;</target>
        </trans-unit>
        <trans-unit id="dd57c71f9af34a05df64b2cb0852af74079c8e77" translate="yes" xml:space="preserve">
          <source>SCNoMAX</source>
          <target state="translated">SCNoMAX</target>
        </trans-unit>
        <trans-unit id="6ee478f14171bc68088d3a2d62f00688c4e93a83" translate="yes" xml:space="preserve">
          <source>SCNoPTR</source>
          <target state="translated">SCNoPTR</target>
        </trans-unit>
        <trans-unit id="f2fb012963bc207bbb835a88833057af83f04485" translate="yes" xml:space="preserve">
          <source>SCNu8SCNu16SCNu32SCNu64SCNuLEAST8SCNuLEAST16SCNuLEAST32SCNuLEAST64SCNuFAST8SCNuFAST16SCNuFAST32SCNuFAST64SCNuMAXSCNuPTR</source>
          <target state="translated">SCNu8SCNu16SCNu32SCNu64SCNuLEAST8SCNuLEAST16SCNuLEAST32SCNuLEAST64SCNuFAST8SCNuFAST16SCNuFAST32SCNuFAST64SCNuMAXSCNuPTR</target>
        </trans-unit>
        <trans-unit id="82d2cfea406b75d643446d58e315fa444c32a554" translate="yes" xml:space="preserve">
          <source>SCNu&lt;b&gt;x&lt;/b&gt;</source>
          <target state="translated">SCNu&lt;b&gt;x&lt;/b&gt;</target>
        </trans-unit>
        <trans-unit id="e9291e6fe3e56533e850c78bc70f169efe028e26" translate="yes" xml:space="preserve">
          <source>SCNuFAST&lt;b&gt;x&lt;/b&gt;</source>
          <target state="translated">SCNuFAST&lt;b&gt;x&lt;/b&gt;</target>
        </trans-unit>
        <trans-unit id="c2482617647b1a07313a59631c1399e21f866b25" translate="yes" xml:space="preserve">
          <source>SCNuLEAST&lt;b&gt;x&lt;/b&gt;</source>
          <target state="translated">SCNuLEAST&lt;b&gt;x&lt;/b&gt;</target>
        </trans-unit>
        <trans-unit id="77a1bea67b77d4f2b90e2e18413d19c05eb1afcf" translate="yes" xml:space="preserve">
          <source>SCNuMAX</source>
          <target state="translated">SCNuMAX</target>
        </trans-unit>
        <trans-unit id="66f3921dcb65715e758f659e948b555986f1dc25" translate="yes" xml:space="preserve">
          <source>SCNuPTR</source>
          <target state="translated">SCNuPTR</target>
        </trans-unit>
        <trans-unit id="f7f7de19350f1e6976985a7e13886132a89f23bb" translate="yes" xml:space="preserve">
          <source>SCNx8SCNx16SCNx32SCNx64SCNxLEAST8SCNxLEAST16SCNxLEAST32SCNxLEAST64SCNxFAST8SCNxFAST16SCNxFAST32SCNxFAST64SCNxMAXSCNxPTR</source>
          <target state="translated">SCNx8SCNx16SCNx32SCNx64SCNxLEAST8SCNxLEAST16SCNxLEAST32SCNxLEAST64SCNxFAST8SCNxFAST16SCNxFAST32SCNxFAST64SCNxMAXSCNxPTR</target>
        </trans-unit>
        <trans-unit id="ff05862f1b9f3256053ef1a0a82cfa0412a700b5" translate="yes" xml:space="preserve">
          <source>SCNx&lt;b&gt;x&lt;/b&gt;</source>
          <target state="translated">SCNx&lt;b&gt;x&lt;/b&gt;</target>
        </trans-unit>
        <trans-unit id="da030e2b848d9fb4ff0dfef8744f6ff50635067a" translate="yes" xml:space="preserve">
          <source>SCNxFAST&lt;b&gt;x&lt;/b&gt;</source>
          <target state="translated">SCNxFAST&lt;b&gt;x&lt;/b&gt;</target>
        </trans-unit>
        <trans-unit id="dc927540afddc8460a68daa198c325339d793206" translate="yes" xml:space="preserve">
          <source>SCNxLEAST&lt;b&gt;x&lt;/b&gt;</source>
          <target state="translated">SCNxLEAST&lt;b&gt;x&lt;/b&gt;</target>
        </trans-unit>
        <trans-unit id="6d951cfaf38ab5146110920c0c300a03b43579d0" translate="yes" xml:space="preserve">
          <source>SCNxMAX</source>
          <target state="translated">SCNxMAX</target>
        </trans-unit>
        <trans-unit id="b28ed0a5c405253f7f22d9a0ed2013840fd1e090" translate="yes" xml:space="preserve">
          <source>SCNxPTR</source>
          <target state="translated">SCNxPTR</target>
        </trans-unit>
        <trans-unit id="cbc7e0a19e1921df2bb4f7d98a66cf6142b0f475" translate="yes" xml:space="preserve">
          <source>SEEK_SETSEEK_CURSEEK_END</source>
          <target state="translated">SEEK_SETSEEK_CURSEEK_END</target>
        </trans-unit>
        <trans-unit id="e470d50f0a19acfd2bf99e89c59b5d419fff7097" translate="yes" xml:space="preserve">
          <source>SFINAE</source>
          <target state="translated">SFINAE</target>
        </trans-unit>
        <trans-unit id="a4987582417fa8d350d09c41eb8cd2418585e91d" translate="yes" xml:space="preserve">
          <source>SIGABRTSIGFPESIGILLSIGINTSIGSEGVSIGTERM</source>
          <target state="translated">SIGABRTSIGFPESIGILLSIGINTSIGSEGVSIGTERM</target>
        </trans-unit>
        <trans-unit id="e85f8b5c7eac9f932a93cbf9d03712194c0da0e2" translate="yes" xml:space="preserve">
          <source>SIGTERM</source>
          <target state="translated">SIGTERM</target>
        </trans-unit>
        <trans-unit id="c14418b849b6f44f556b64e716d39aa40f64e3c9" translate="yes" xml:space="preserve">
          <source>SIGTERM, SIGSEGV, SIGINT, SIGILL, SIGABRT, SIGFPE</source>
          <target state="translated">SIGTERM、SIGSEGV、SIGINT、SIGILL、SIGABRT、SIGFPE。</target>
        </trans-unit>
        <trans-unit id="0dc45828951839d51ed09a34e9ec04114252f1c0" translate="yes" xml:space="preserve">
          <source>SIG_ATOMIC_MAX</source>
          <target state="translated">SIG_ATOMIC_MAX</target>
        </trans-unit>
        <trans-unit id="ed5fe11c179ff72e658bdf95049d44be1deebeae" translate="yes" xml:space="preserve">
          <source>SIG_ATOMIC_MIN</source>
          <target state="translated">SIG_ATOMIC_MIN</target>
        </trans-unit>
        <trans-unit id="11ba97d97359684906853156cac74443ad3705c5" translate="yes" xml:space="preserve">
          <source>SIG_DFL, SIG_IGN</source>
          <target state="translated">SIG_DFL,SIG_IGN</target>
        </trans-unit>
        <trans-unit id="6895a2910b6ef7a004e7772ca3f499a19fa27cde" translate="yes" xml:space="preserve">
          <source>SIG_DFLSIG_IGN</source>
          <target state="translated">SIG_DFLSIG_IGN</target>
        </trans-unit>
        <trans-unit id="acd6ee1f7bbae2aab00eb4fc3df100932eee5d46" translate="yes" xml:space="preserve">
          <source>SIG_ERR</source>
          <target state="translated">SIG_ERR</target>
        </trans-unit>
        <trans-unit id="6a03d61729004eed59186d910c6f0d01251b936b" translate="yes" xml:space="preserve">
          <source>SIG_IGN</source>
          <target state="translated">SIG_IGN</target>
        </trans-unit>
        <trans-unit id="256c9f9a067e633db18da0ec81de7b585e074898" translate="yes" xml:space="preserve">
          <source>SIZE_MAX</source>
          <target state="translated">SIZE_MAX</target>
        </trans-unit>
        <trans-unit id="6b120e14066922d2c95dfb4dc0409090007a4356" translate="yes" xml:space="preserve">
          <source>SOFT HYPHEN</source>
          <target state="translated">柔软的HYPHEN</target>
        </trans-unit>
        <trans-unit id="35adac21ea20f23e44a0f9718d8d1c8194e953c8" translate="yes" xml:space="preserve">
          <source>SOO</source>
          <target state="translated">SOO</target>
        </trans-unit>
        <trans-unit id="5fa55a6001cc9852171849c95c4031c7b8464066" translate="yes" xml:space="preserve">
          <source>SSO</source>
          <target state="translated">SSO</target>
        </trans-unit>
        <trans-unit id="d77543daa1a67aba4224a92c3a2e905f4d7d3caf" translate="yes" xml:space="preserve">
          <source>SUPERSCRIPT TWO - MICRO SIGN</source>
          <target state="translated">超级样本二-微量签名</target>
        </trans-unit>
        <trans-unit id="ecc39ffd33475d94ae9c3663ce19924217f5ad56" translate="yes" xml:space="preserve">
          <source>SYRIAC LETTER BETH - GREEK DASIA</source>
          <target state="translated">SYRIAC LETTER BETH-GREEK DASIA(希腊语)</target>
        </trans-unit>
        <trans-unit id="9f9ffea621b762dbfb7be294c8d40ffe49bec187" translate="yes" xml:space="preserve">
          <source>Safely converts pointers and references to classes up, down, and sideways along the inheritance hierarchy.</source>
          <target state="translated">安全地转换指向类的指针和引用,沿着继承层次结构向上、向下和横向。</target>
        </trans-unit>
        <trans-unit id="b76aee974c5bb8b37f0f7cb657a1de3a091c77c3" translate="yes" xml:space="preserve">
          <source>Same</source>
          <target state="translated">Same</target>
        </trans-unit>
        <trans-unit id="a744c69a2ecd83490fd88d463f1cfbe827dbb30e" translate="yes" xml:space="preserve">
          <source>Same applies to dot operator following an integer or floating-point user-defined literal:</source>
          <target state="translated">同样的道理也适用于整数或浮点用户定义文字后面的点运算符。</target>
        </trans-unit>
        <trans-unit id="66a5254cea4091f8ebcab7a4aa66c35896845aed" translate="yes" xml:space="preserve">
          <source>Same applies to the lifetime of the object pointed to by the captured &lt;code&gt;this&lt;/code&gt; pointer.</source>
          <target state="translated">这同样适用于由捕获的 &lt;code&gt;this&lt;/code&gt; 指针指向的对象的生存期。</target>
        </trans-unit>
        <trans-unit id="3c7b71f021b8cdf1bd6c0b20d7e10412fb74444f" translate="yes" xml:space="preserve">
          <source>Same as &lt;code&gt;p&lt;/code&gt;'s construction</source>
          <target state="translated">与 &lt;code&gt;p&lt;/code&gt; 的构造相同</target>
        </trans-unit>
        <trans-unit id="b6c01bbf4fe382bbcb4f95f2825434f25228cf1c" translate="yes" xml:space="preserve">
          <source>Same as glvalue (below).</source>
          <target state="translated">与glvalue(如下)相同。</target>
        </trans-unit>
        <trans-unit id="84f78fbebf7e3bcf9865660ef89b13869f35e07f" translate="yes" xml:space="preserve">
          <source>Same as rvalue (below).</source>
          <target state="translated">同r值(下同)。</target>
        </trans-unit>
        <trans-unit id="c0f78a1b71ae77c728d70862a9e3368568083194" translate="yes" xml:space="preserve">
          <source>Same as swapping the underlying container.</source>
          <target state="translated">和交换底层容器一样。</target>
        </trans-unit>
        <trans-unit id="054e7e20cdfbca536050cb79e89a02a85759a9a9" translate="yes" xml:space="preserve">
          <source>Same as the corresponding operation on the wrapped container.</source>
          <target state="translated">与对被包装容器的相应操作相同。</target>
        </trans-unit>
        <trans-unit id="0e1da25a3233f63ae21f226c776372740cc6993a" translate="yes" xml:space="preserve">
          <source>Same as underlying container (typically constant).</source>
          <target state="translated">与底层容器相同(通常为常数)。</target>
        </trans-unit>
        <trans-unit id="e7796be95ee97968bc00eac447bfca361f350fb8" translate="yes" xml:space="preserve">
          <source>Sampling distributions</source>
          <target state="translated">抽样分布</target>
        </trans-unit>
        <trans-unit id="9aa4ace930e13f1369da3a2f415ac3d312db56cf" translate="yes" xml:space="preserve">
          <source>Satisfaction of an atomic constraint is checked by substituting the parameter mapping and template arguments into the expression &lt;code&gt;E&lt;/code&gt;. If the substitution results in an invalid type or expression, the constraint is not satisfied. Otherwise, &lt;code&gt;E&lt;/code&gt;, after any lvalue-to-rvalue conversion, shall be a prvalue constant expression of type &lt;code&gt;bool&lt;/code&gt; , and the constraint is satisfied if and only if it evaluates to &lt;code&gt;true&lt;/code&gt;.</source>
          <target state="translated">通过将参数映射和模板参数代入表达式 &lt;code&gt;E&lt;/code&gt; 来检查原子约束的满足性。如果替换导致无效的类型或表达式，则不满足约束。否则，在任何从左值到右值的转换之后， &lt;code&gt;E&lt;/code&gt; 将是 &lt;code&gt;bool&lt;/code&gt; 类型的prvalue常量表达式，并且当且仅当其评估为 &lt;code&gt;true&lt;/code&gt; 时，才满足约束。</target>
        </trans-unit>
        <trans-unit id="7a79fb659ab4ca153a9d632c0dbfaa99b80dbe0d" translate="yes" xml:space="preserve">
          <source>Satisfies &lt;a href=&quot;nullablepointer&quot;&gt;NullablePointer&lt;/a&gt;, &lt;a href=&quot;randomaccessiterator&quot;&gt;LegacyRandomAccessIterator&lt;/a&gt;, and &lt;a href=&quot;contiguousiterator&quot;&gt;LegacyContiguousIterator&lt;/a&gt; (see &lt;a href=&quot;allocator#Fancy_pointers&quot;&gt;fancy pointers&lt;/a&gt; below)</source>
          <target state="translated">满足&lt;a href=&quot;nullablepointer&quot;&gt;NullablePointer&lt;/a&gt;，&lt;a href=&quot;randomaccessiterator&quot;&gt;LegacyRandomAccessIterator&lt;/a&gt;和&lt;a href=&quot;contiguousiterator&quot;&gt;LegacyContiguousIterator&lt;/a&gt;（请参见下面的&lt;a href=&quot;allocator#Fancy_pointers&quot;&gt;花式指针&lt;/a&gt;）</target>
        </trans-unit>
        <trans-unit id="c939f8b440f4e444c93888c7523c6a753295690a" translate="yes" xml:space="preserve">
          <source>Saves a copy of the current pointer &lt;code&gt;old_ptr = current_ptr&lt;/code&gt;</source>
          <target state="translated">保存当前指针的副本 &lt;code&gt;old_ptr = current_ptr&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="6dcd124e9d2652692f02ca05f075f2889be740f0" translate="yes" xml:space="preserve">
          <source>Saves the current execution context into a variable &lt;code&gt;env&lt;/code&gt; of type &lt;code&gt;&lt;a href=&quot;jmp_buf&quot;&gt;std::jmp_buf&lt;/a&gt;&lt;/code&gt;. This variable can later be used to restore the current execution context by &lt;code&gt;&lt;a href=&quot;longjmp&quot;&gt;std::longjmp&lt;/a&gt;&lt;/code&gt; function. That is, when a call to &lt;code&gt;&lt;a href=&quot;longjmp&quot;&gt;std::longjmp&lt;/a&gt;&lt;/code&gt; function is made, the execution continues at the particular call site that constructed the &lt;code&gt;&lt;a href=&quot;jmp_buf&quot;&gt;std::jmp_buf&lt;/a&gt;&lt;/code&gt; variable passed to &lt;code&gt;&lt;a href=&quot;longjmp&quot;&gt;std::longjmp&lt;/a&gt;&lt;/code&gt;. In that case &lt;code&gt;setjmp&lt;/code&gt; returns the value passed to &lt;code&gt;&lt;a href=&quot;longjmp&quot;&gt;std::longjmp&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">将当前执行上下文保存到 &lt;code&gt;&lt;a href=&quot;jmp_buf&quot;&gt;std::jmp_buf&lt;/a&gt;&lt;/code&gt; 类型的变量 &lt;code&gt;env&lt;/code&gt; 中。以后可以使用此变量通过 &lt;code&gt;&lt;a href=&quot;longjmp&quot;&gt;std::longjmp&lt;/a&gt;&lt;/code&gt; 函数恢复当前的执行上下文。也就是说，当调用 &lt;code&gt;&lt;a href=&quot;longjmp&quot;&gt;std::longjmp&lt;/a&gt;&lt;/code&gt; 函数时，执行在构造传递给 &lt;code&gt;&lt;a href=&quot;longjmp&quot;&gt;std::longjmp&lt;/a&gt;&lt;/code&gt; 的 &lt;code&gt;&lt;a href=&quot;jmp_buf&quot;&gt;std::jmp_buf&lt;/a&gt;&lt;/code&gt; 变量的特定调用站点处继续。在这种情况下， &lt;code&gt;setjmp&lt;/code&gt; 返回传递给 &lt;code&gt;&lt;a href=&quot;longjmp&quot;&gt;std::longjmp&lt;/a&gt;&lt;/code&gt; 的值。</target>
        </trans-unit>
        <trans-unit id="f0e38625398ddd28f177386b7df9d368b87ce9c8" translate="yes" xml:space="preserve">
          <source>Scalar types and arrays of TriviallyCopyable objects are TriviallyCopyable as well, as well as the &lt;a href=&quot;../language/cv&quot;&gt;const&lt;/a&gt;-qualified (but not &lt;a href=&quot;../language/cv&quot;&gt;volatile&lt;/a&gt;-qualified) versions of such types.</source>
          <target state="translated">TriviallyCopyable对象的标量类型和数组也是TriviallyCopyable的，以及此类类型的&lt;a href=&quot;../language/cv&quot;&gt;const&lt;/a&gt;限定（但不是&lt;a href=&quot;../language/cv&quot;&gt;volatile&lt;/a&gt;限定）版本。</target>
        </trans-unit>
        <trans-unit id="94a0975d11ee0823098d55f8c5543d8c95757535" translate="yes" xml:space="preserve">
          <source>Scan an array of mailboxes, and process only the ones intended for us, without unnecessary synchronization. This example uses atomic-fence synchronization.</source>
          <target state="translated">扫描一个数组的邮箱,只处理对我们来说有意义的邮箱,而不需要进行不必要的同步。这个例子使用了原子栅栏同步。</target>
        </trans-unit>
        <trans-unit id="39320a9f36bca32338b46a710d9f674ca8c85e52" translate="yes" xml:space="preserve">
          <source>Scans the null-terminated byte string pointed to by &lt;code&gt;dest&lt;/code&gt; for any character from the null-terminated byte string pointed to by &lt;code&gt;breakset&lt;/code&gt;, and returns a pointer to that character.</source>
          <target state="translated">从 &lt;code&gt;dest&lt;/code&gt; 指向的以null终止的字节字符串中扫描 &lt;code&gt;breakset&lt;/code&gt; 指向的以NULL终止的字节字符串中的任何字符，并返回指向该字符的指针。</target>
        </trans-unit>
        <trans-unit id="4651a34e4df9619783ad372f905d6d3b84e9d76d" translate="yes" xml:space="preserve">
          <source>Scope</source>
          <target state="translated">Scope</target>
        </trans-unit>
        <trans-unit id="3c0fabcd3460b1386add05b5b912787b96bceeaa" translate="yes" xml:space="preserve">
          <source>Scope begins at the</source>
          <target state="translated">范围始于</target>
        </trans-unit>
        <trans-unit id="4317efd965faa4c9e59bd6003e10dbe6e565fc82" translate="yes" xml:space="preserve">
          <source>Scope resolution</source>
          <target state="translated">范围决议</target>
        </trans-unit>
        <trans-unit id="931b2f0203a11cf4f16ccf11a8abc5d164f83cd5" translate="yes" xml:space="preserve">
          <source>Scope-Bound Resource Management</source>
          <target state="translated">范围限制的资源管理</target>
        </trans-unit>
        <trans-unit id="6144de524b9c3009de80c6ebb469d9da9d780fe8" translate="yes" xml:space="preserve">
          <source>Scoped enumerations</source>
          <target state="translated">范围列举</target>
        </trans-unit>
        <trans-unit id="bce06414177f72ab70e6387b6af9f8ceef0d6049" translate="yes" xml:space="preserve">
          <source>Search</source>
          <target state="translated">Search</target>
        </trans-unit>
        <trans-unit id="f2535d6e767f49b8124024bcd11da510f6f782bd" translate="yes" xml:space="preserve">
          <source>Search an array of characters.</source>
          <target state="translated">搜索一个字符数组。</target>
        </trans-unit>
        <trans-unit id="081570b66f26a6217e51edfae5b2f5f442c3bbc8" translate="yes" xml:space="preserve">
          <source>Searchers</source>
          <target state="translated">Searchers</target>
        </trans-unit>
        <trans-unit id="be80c5d8537a2b3c995d81bdb8d3ae633186fea1" translate="yes" xml:space="preserve">
          <source>Searchers implementing several string searching algorithms are provided and can be used either directly or with &lt;code&gt;&lt;a href=&quot;../algorithm/search&quot;&gt;std::search&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">提供了实现几种字符串搜索算法的搜索器，这些搜索器可以直接使用，也可以与 &lt;code&gt;&lt;a href=&quot;../algorithm/search&quot;&gt;std::search&lt;/a&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="33c71193b71000219f2bd6b9f54cb3bf29a41ddc" translate="yes" xml:space="preserve">
          <source>Searches for character &lt;code&gt;ch&lt;/code&gt; within the first &lt;code&gt;count&lt;/code&gt; characters of the sequence pointed to by &lt;code&gt;p&lt;/code&gt;.</source>
          <target state="translated">在 &lt;code&gt;p&lt;/code&gt; 指向的序列的第一个 &lt;code&gt;count&lt;/code&gt; 字符内搜索字符 &lt;code&gt;ch&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="37caebe595bd3a25fdffa0ec8c5c448832c11501" translate="yes" xml:space="preserve">
          <source>Searches for the last occurrence of the sequence &lt;code&gt;[s_first, s_last)&lt;/code&gt; in the range &lt;code&gt;[first, last)&lt;/code&gt;.</source>
          <target state="translated">在范围 &lt;code&gt;[first, last)&lt;/code&gt; 搜索序列 &lt;code&gt;[s_first, s_last)&lt;/code&gt; 的最后一次出现。</target>
        </trans-unit>
        <trans-unit id="754ce955d614da4c802b64da2e1c3ddc6bee054d" translate="yes" xml:space="preserve">
          <source>Searches the</source>
          <target state="translated">搜索</target>
        </trans-unit>
        <trans-unit id="769049f398e61b7f7ad4e6b14c38a23da9c22170" translate="yes" xml:space="preserve">
          <source>Searches the range &lt;code&gt;[first, last)&lt;/code&gt; for any of the elements in the range &lt;code&gt;[s_first, s_last)&lt;/code&gt;.</source>
          <target state="translated">在 &lt;code&gt;[first, last)&lt;/code&gt; 范围内搜索 &lt;code&gt;[s_first, s_last)&lt;/code&gt; 范围内的任何元素。</target>
        </trans-unit>
        <trans-unit id="1e308cb25d0ed13526c73f64ffe66b93da65e203" translate="yes" xml:space="preserve">
          <source>Searches the range &lt;code&gt;[first, last)&lt;/code&gt; for the first sequence of count identical elements, each equal to the given value value.</source>
          <target state="translated">在范围 &lt;code&gt;[first, last)&lt;/code&gt; 搜索计数相同元素的第一序列，每个元素等于给定值。</target>
        </trans-unit>
        <trans-unit id="7fa3cd6cb9bf46973989d4709c8226edf99fa4ae" translate="yes" xml:space="preserve">
          <source>Searches the range &lt;code&gt;[first, last)&lt;/code&gt; for two consecutive identical elements.</source>
          <target state="translated">在范围 &lt;code&gt;[first, last)&lt;/code&gt; 搜索两个连续的相同元素。</target>
        </trans-unit>
        <trans-unit id="7c36d1e16b84bc65d65582ef2f66c0a6af5df9a5" translate="yes" xml:space="preserve">
          <source>Second version</source>
          <target state="translated">第二版</target>
        </trans-unit>
        <trans-unit id="3b7372ecf5cd839751ecadd7eb6342e697de5920" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;../../language/delete&quot;&gt;delete-expression&lt;/a&gt; for exact details on the overload resolution rules between alignment-aware and alignment-unaware overloads of usual (non-placement) deallocation functions.</source>
          <target state="translated">请参阅&lt;a href=&quot;../../language/delete&quot;&gt;delete-expression&lt;/a&gt;以获取有关常规（非放置）释放函数的对齐感知和不对齐感知的重载之间的重载解析规则的确切详细信息。</target>
        </trans-unit>
        <trans-unit id="ae818aabc9d932654ddcaaf489a23a68152adf27" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;../../language/implicit_cast#Integral_conversions&quot;&gt;integral conversions&lt;/a&gt;.</source>
          <target state="translated">请参阅&lt;a href=&quot;../../language/implicit_cast#Integral_conversions&quot;&gt;积分转换&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="6378dcdb16aa74b2d40b16a1e6ee4135e9695749" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;../ios_base/iostate&quot;&gt;&lt;code&gt;ios_base::iostate&lt;/code&gt;&lt;/a&gt; for the list of conditions that set &lt;code&gt;badbit&lt;/code&gt;.</source>
          <target state="translated">有关设置 &lt;code&gt;badbit&lt;/code&gt; 的条件的列表，请参见&lt;a href=&quot;../ios_base/iostate&quot;&gt; &lt;code&gt;ios_base::iostate&lt;/code&gt; &lt;/a&gt; iostate。</target>
        </trans-unit>
        <trans-unit id="dee8fd6f97edfa7a7cf0f34968b55a706acc4284" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;../ios_base/iostate&quot;&gt;&lt;code&gt;ios_base::iostate&lt;/code&gt;&lt;/a&gt; for the list of conditions that set &lt;code&gt;eofbit&lt;/code&gt;.</source>
          <target state="translated">有关设置 &lt;code&gt;eofbit&lt;/code&gt; 的条件列表，请参见&lt;a href=&quot;../ios_base/iostate&quot;&gt; &lt;code&gt;ios_base::iostate&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="f9ae9ac7299d29baeec9d43cbba4ba0ce1c9aa6e" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;../ios_base/iostate&quot;&gt;&lt;code&gt;ios_base::iostate&lt;/code&gt;&lt;/a&gt; for the list of conditions that set &lt;code&gt;failbit&lt;/code&gt; or &lt;code&gt;badbit&lt;/code&gt;.</source>
          <target state="translated">有关设置 &lt;code&gt;failbit&lt;/code&gt; 或 &lt;code&gt;badbit&lt;/code&gt; 的条件的列表，请参见&lt;a href=&quot;../ios_base/iostate&quot;&gt; &lt;code&gt;ios_base::iostate&lt;/code&gt; &lt;/a&gt; iostate。</target>
        </trans-unit>
        <trans-unit id="c25f06c677695c66cf5160af1585d19e44dae901" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;../ios_base/iostate&quot;&gt;&lt;code&gt;ios_base::iostate&lt;/code&gt;&lt;/a&gt; for the list of conditions that set the stream status bits.</source>
          <target state="translated">有关设置流状态位的条件的列表，请参见&lt;a href=&quot;../ios_base/iostate&quot;&gt; &lt;code&gt;ios_base::iostate&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="174c2342f47ac83dd4dd125d8e0118900b8a0e79" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;../language/data_members#Standard_layout&quot;&gt;Standard layout&lt;/a&gt;.</source>
          <target state="translated">请参阅&lt;a href=&quot;../language/data_members#Standard_layout&quot;&gt;标准布局&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="e50ce5cb884f5a58dd6c6ce681c3eba7330d42fa" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;../language/template_argument_deduction&quot;&gt;template argument deduction&lt;/a&gt; for the special rules behind forwarding references (&lt;code&gt;T&amp;amp;&amp;amp;&lt;/code&gt; used as a function parameter) and &lt;a href=&quot;../language/reference#Forwarding_references&quot;&gt;forwarding references&lt;/a&gt; for other detail.</source>
          <target state="translated">有关转发引用（ &lt;code&gt;T&amp;amp;&amp;amp;&lt;/code&gt; 用作函数参数）后面的特殊规则，请参见&lt;a href=&quot;../language/template_argument_deduction&quot;&gt;模板参数推导&lt;/a&gt;；有关其他详细信息，请&lt;a href=&quot;../language/reference#Forwarding_references&quot;&gt;参见转发引用&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="39bd03185bceffe6a43d25662a58dc151998d110" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;../memory/shared_ptr/atomic2&quot;&gt;std::atomic&amp;lt;std::shared_ptr&amp;gt;&lt;/a&gt; and &lt;a href=&quot;../memory/weak_ptr/atomic2&quot;&gt;std::atomic&amp;lt;std::weak_ptr&amp;gt;&lt;/a&gt; for details.</source>
          <target state="translated">有关详细信息，请参见&lt;a href=&quot;../memory/shared_ptr/atomic2&quot;&gt;std :: atomic &amp;lt;std :: shared_ptr&amp;gt;&lt;/a&gt;和&lt;a href=&quot;../memory/weak_ptr/atomic2&quot;&gt;std :: atomic &amp;lt;std :: weak_ptr&amp;gt;&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="e167622e5c42d7bf8a95ec5740e244c7093b646f" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;../types/climits#Limits_of_floating_point_types&quot;&gt;Limits of floating point types&lt;/a&gt; and &lt;a href=&quot;../types/numeric_limits&quot;&gt;std::numeric_limits&lt;/a&gt; for additional details, limits, and properties of the floating-point types.</source>
          <target state="translated">有关&lt;a href=&quot;../types/climits#Limits_of_floating_point_types&quot;&gt;浮点类型&lt;/a&gt;的更多详细信息，限制和属性，请参见浮点类型的限制和&lt;a href=&quot;../types/numeric_limits&quot;&gt;std :: numeric_limits&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="2274fab11ee4834d5966c40c307e91c5df243ce8" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;classes&quot;&gt;classes&lt;/a&gt; for general overview of the syntax. If class-key is &lt;code&gt;union&lt;/code&gt;, the declaration introduces a &lt;a href=&quot;union&quot;&gt;union type&lt;/a&gt;.</source>
          <target state="translated">有关语法的一般概述，请参见&lt;a href=&quot;classes&quot;&gt;类&lt;/a&gt;。如果class-key是 &lt;code&gt;union&lt;/code&gt; ，则声明将引入&lt;a href=&quot;union&quot;&gt;union type&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="7ba0349c426a2f24e3620c1aa021d44618face46" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;default_comparisons&quot;&gt;default comparisons&lt;/a&gt; for details.</source>
          <target state="translated">有关详细信息，请参见&lt;a href=&quot;default_comparisons&quot;&gt;默认比较&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="429a878af958318f5598c06dd5a9dc47b55c4f9e" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;derived_class&quot;&gt;derived classes&lt;/a&gt; for the meaning of public, protected, and private inheritance.</source>
          <target state="translated">有关公共，保护和私有继承的含义，请参见&lt;a href=&quot;derived_class&quot;&gt;派生类&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="914ee0d12625d0d50c9171297ac04778b61de7f4" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;elaborated_type_specifier&quot;&gt;elaborated type specifier&lt;/a&gt; for details.</source>
          <target state="translated">有关&lt;a href=&quot;elaborated_type_specifier&quot;&gt;详细&lt;/a&gt;信息，请参见详细的类型说明符。</target>
        </trans-unit>
        <trans-unit id="ced721a5d7f98361f7017a972c098ee6051d9a7a" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;escape&quot;&gt;escape sequences&lt;/a&gt;</source>
          <target state="translated">查看&lt;a href=&quot;escape&quot;&gt;转义序列&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="44c333ad00625ae699f2584f163b982fd72ac7a1" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;except_spec&quot;&gt;dynamic exception specification&lt;/a&gt;.</source>
          <target state="translated">请参阅&lt;a href=&quot;except_spec&quot;&gt;动态异常规范&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="74cdc7b25c3c97c3a8434eb20f61651a5eb87ae3" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;fe_round&quot;&gt;floating-point rounding macros&lt;/a&gt; for the effects of rounding.</source>
          <target state="translated">有关&lt;a href=&quot;fe_round&quot;&gt;舍入&lt;/a&gt;的影响，请参见浮点舍入宏。</target>
        </trans-unit>
        <trans-unit id="29e4344e032e36ed94ddfee614e0e36909dc87e6" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;function#Return_type_deduction&quot;&gt;function#Return_type_deduction&lt;/a&gt;.</source>
          <target state="translated">参见&lt;a href=&quot;function#Return_type_deduction&quot;&gt;function＃Return_type_deduction&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="8283046607e90210c1c29d8f4f84a8fab2d1ede3" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;http://en.cppreference.com/w/cpp/experimental/special_math&quot;&gt;Mathematical special functions&lt;/a&gt; for the ISO/IEC 29124:2010 version of this library.</source>
          <target state="translated">请参见此库的ISO / IEC 29124：2010版本的&lt;a href=&quot;http://en.cppreference.com/w/cpp/experimental/special_math&quot;&gt;数学特殊功能&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="b0aae26af8fe26013b5446f34d12625d4c3f4ca0" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;implicit_cast#Integral_conversions&quot;&gt;Integral conversions&lt;/a&gt; for implicit conversions from &lt;code&gt;bool&lt;/code&gt; to other types and &lt;a href=&quot;implicit_cast#Boolean_conversions&quot;&gt;boolean conversions&lt;/a&gt; for the implicit conversions from other types to &lt;code&gt;bool&lt;/code&gt;.</source>
          <target state="translated">有关从 &lt;code&gt;bool&lt;/code&gt; 到其他类型的隐式转换，请参见&lt;a href=&quot;implicit_cast#Integral_conversions&quot;&gt;积分转换&lt;/a&gt;；有关从其他类型到 &lt;code&gt;bool&lt;/code&gt; 的隐式转换，请参阅&lt;a href=&quot;implicit_cast#Boolean_conversions&quot;&gt;布尔转换&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="37d388b1ae038b8ac6156d9085ce7d62388e00ee" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;lambda#Lambda_capture&quot;&gt;below&lt;/a&gt; for the detailed description of captures.</source>
          <target state="translated">有关捕获的详细说明，请参见&lt;a href=&quot;lambda#Lambda_capture&quot;&gt;下文&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="4cad14c22748843bfa2798b2b209a13ead862881" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;member_template#Conversion_function_templates&quot;&gt;member template&lt;/a&gt; for other rules regarding conversion function templates.</source>
          <target state="translated">有关转换函数模板的其他规则，请参见&lt;a href=&quot;member_template#Conversion_function_templates&quot;&gt;成员&lt;/a&gt;模板。</target>
        </trans-unit>
        <trans-unit id="ad0d65393aca93e974d44085f5919bd7839c0d28" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;namespace&quot;&gt;namespace&lt;/a&gt; for details.</source>
          <target state="translated">有关详细信息，请参见&lt;a href=&quot;namespace&quot;&gt;名称空间&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="102f8e37106ae040bb5f89e22fa071d096f41648" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;objects#Alignment&quot;&gt;alignment&lt;/a&gt; for the meaning and properties of the value returned by &lt;code&gt;alignof&lt;/code&gt;.</source>
          <target state="translated">有关 &lt;code&gt;alignof&lt;/code&gt; 返回的值的含义和属性，请参见&lt;a href=&quot;objects#Alignment&quot;&gt;alignment&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="55b4bb18224bfdfff99896bdba23ef4d69d413d1" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;operators#Assignment_operator&quot;&gt;assignment operator overloading&lt;/a&gt; for additional detail on the expected behavior of a user-defined copy-assignment operator.</source>
          <target state="translated">有关用户定义的副本分配运算符的预期行为的更多详细信息，请参见&lt;a href=&quot;operators#Assignment_operator&quot;&gt;赋值运算符重载&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="cb67647e0da113c3fbe9fee863f0d9d63fe13a8d" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;operators#Assignment_operator&quot;&gt;assignment operator overloading&lt;/a&gt; for additional detail on the expected behavior of a user-defined move-assignment operator.</source>
          <target state="translated">有关用户定义的移动分配运算符的预期行为的更多详细信息，请参见&lt;a href=&quot;operators#Assignment_operator&quot;&gt;分配运算符重载&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="d5493d4122dd67d4c17caa6d5ef78b487507ea02" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;qualified_lookup&quot;&gt;qualified lookup&lt;/a&gt; for the details of the name lookup for qualified identifiers.</source>
          <target state="translated">有关合格标识符的名称查找的详细信息，请参见&lt;a href=&quot;qualified_lookup&quot;&gt;合格查询&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="24c313aec15f752b8eef19d4f89751a772bc838e" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;static&quot;&gt;static data members&lt;/a&gt; for additional rules about inline static members.</source>
          <target state="translated">有关内联静态成员的其他规则，请参见&lt;a href=&quot;static&quot;&gt;静态数据&lt;/a&gt;成员。</target>
        </trans-unit>
        <trans-unit id="605869828b172cc97a29434e43b6498562b03788" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;template_argument_deduction&quot;&gt;template argument deduction&lt;/a&gt; for details.</source>
          <target state="translated">有关详细信息，请参见&lt;a href=&quot;template_argument_deduction&quot;&gt;模板参数推导&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="283313eb9b1d55b39e9f5d89e00fc3a1bf6de70e" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;throw&quot;&gt; throw exceptions&lt;/a&gt; for more information about throw-expressions</source>
          <target state="translated">有关&lt;a href=&quot;throw&quot;&gt;抛出&lt;/a&gt;表达式的更多信息，请参见抛出异常。</target>
        </trans-unit>
        <trans-unit id="69df8ac605b2aefcade71d4a0331b3b48494c6a9" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;try_catch&quot;&gt; try-catch block&lt;/a&gt; for more information about</source>
          <target state="translated">有关更多信息，请参见&lt;a href=&quot;try_catch&quot;&gt;try-catch块&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="17f682c920cda25dc371eb3bc3ea16fcc0afeebf" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;using_declaration&quot;&gt;using declaration&lt;/a&gt;.</source>
          <target state="translated">请参阅&lt;a href=&quot;using_declaration&quot;&gt;使用声明&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="b7daaa65ada396227e4a622fdcc20e20911f6b1c" translate="yes" xml:space="preserve">
          <source>See &lt;code&gt;&lt;a href=&quot;../../atomic/kill_dependency&quot;&gt;std::kill_dependency&lt;/a&gt;&lt;/code&gt; for example usage.</source>
          <target state="translated">有关用法示例，请参见 &lt;code&gt;&lt;a href=&quot;../../atomic/kill_dependency&quot;&gt;std::kill_dependency&lt;/a&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="47b8073db41056b2af9125a4b55737d9e0d4b080" translate="yes" xml:space="preserve">
          <source>See &lt;code&gt;&lt;a href=&quot;../error/terminate&quot;&gt;std::terminate&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;../error/exception/unexpected&quot;&gt;std::unexpected&lt;/a&gt;&lt;/code&gt; for the handling of errors that arise during exception handling.</source>
          <target state="translated">有关异常处理期间出现的错误的处理，请参见 &lt;code&gt;&lt;a href=&quot;../error/terminate&quot;&gt;std::terminate&lt;/a&gt;&lt;/code&gt; 和 &lt;code&gt;&lt;a href=&quot;../error/exception/unexpected&quot;&gt;std::unexpected&lt;/a&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="cf502c77fe0dc9f40d34f9c7f2c4d63957dc4f8b" translate="yes" xml:space="preserve">
          <source>See &lt;code&gt;&lt;a href=&quot;../math/math_errhandling&quot;&gt;math_errhandling&lt;/a&gt;&lt;/code&gt; for further details.</source>
          <target state="translated">有关更多详细信息，请参见 &lt;code&gt;&lt;a href=&quot;../math/math_errhandling&quot;&gt;math_errhandling&lt;/a&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="bd9cdf06a8071ae98a7163dd1f7bbfd07f483e5f" translate="yes" xml:space="preserve">
          <source>See &lt;code&gt;&lt;a href=&quot;condition_variable&quot;&gt;std::condition_variable&lt;/a&gt;&lt;/code&gt; for the description of the semantics of condition variables.</source>
          <target state="translated">有关条件变量的语义的描述，请参见 &lt;code&gt;&lt;a href=&quot;condition_variable&quot;&gt;std::condition_variable&lt;/a&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="67373bb92cd7ecbf243edb9d60ad6f00f86a6052" translate="yes" xml:space="preserve">
          <source>See Also</source>
          <target state="translated">另见</target>
        </trans-unit>
        <trans-unit id="2d8243a2c0e464492c9d563c4f92c56ae3421bcc" translate="yes" xml:space="preserve">
          <source>See also</source>
          <target state="translated">另见</target>
        </trans-unit>
        <trans-unit id="f79bb58417489ef566fe0f186f5e68a673856c4b" translate="yes" xml:space="preserve">
          <source>See also &lt;a href=&quot;../types/integer&quot;&gt;Fixed width integer types&lt;/a&gt;.(since C++11).</source>
          <target state="translated">另请参见&lt;a href=&quot;../types/integer&quot;&gt;固定宽度整数类型&lt;/a&gt;。（从C ++ 11开始）。</target>
        </trans-unit>
        <trans-unit id="724eeee50828e55ed4fb99b05ec0d10f041d0b32" translate="yes" xml:space="preserve">
          <source>See also &lt;a href=&quot;template_argument_deduction#Deduction_from_a_function_call&quot;&gt;template argument deduction&lt;/a&gt; and &lt;code&gt;&lt;a href=&quot;../utility/forward&quot;&gt;std::forward&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">另请参见&lt;a href=&quot;template_argument_deduction#Deduction_from_a_function_call&quot;&gt;模板参数推导&lt;/a&gt;和 &lt;code&gt;&lt;a href=&quot;../utility/forward&quot;&gt;std::forward&lt;/a&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="29bf3e42f6bade0c2ad8b91112d660163e3f9bb3" translate="yes" xml:space="preserve">
          <source>See also &lt;code&gt;&lt;a href=&quot;kill_dependency&quot;&gt;std::kill_dependency&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;[[&lt;a href=&quot;../language/attributes/carries_dependency&quot;&gt;carries_dependency&lt;/a&gt;]]&lt;/code&gt; for fine-grained dependency chain control.</source>
          <target state="translated">另请参阅 &lt;code&gt;&lt;a href=&quot;kill_dependency&quot;&gt;std::kill_dependency&lt;/a&gt;&lt;/code&gt; 和 &lt;code&gt;[[&lt;a href=&quot;../language/attributes/carries_dependency&quot;&gt;carries_dependency&lt;/a&gt;]]&lt;/code&gt; 以进行细粒度的依赖链控制。</target>
        </trans-unit>
        <trans-unit id="99a9b1a0ad5fb2550b4eaca7c7ed9743c7009041" translate="yes" xml:space="preserve">
          <source>See also &lt;code&gt;&lt;a href=&quot;numeric_limits&quot;&gt;std::numeric_limits&lt;/a&gt;&lt;/code&gt; interface.</source>
          <target state="translated">另请参见 &lt;code&gt;&lt;a href=&quot;numeric_limits&quot;&gt;std::numeric_limits&lt;/a&gt;&lt;/code&gt; 接口。</target>
        </trans-unit>
        <trans-unit id="3fe39f07296abb94820a0213f51053afc2b83f28" translate="yes" xml:space="preserve">
          <source>See also the implementations in &lt;a href=&quot;https://github.com/gcc-mirror/gcc/blob/d9375e490072d1aae73a93949aa158fcd2a27018/libstdc%20%20-v3/include/bits/stl_algo.h#L1125-L1187&quot;&gt;libstdc++&lt;/a&gt; and &lt;a href=&quot;https://github.com/llvm-mirror/libcxx/blob/a12cb9d211019d99b5875b6d8034617cbc24c2cc/include/algorithm#L2259-L2291&quot;&gt;libc++&lt;/a&gt;.</source>
          <target state="translated">另请参见&lt;a href=&quot;https://github.com/gcc-mirror/gcc/blob/d9375e490072d1aae73a93949aa158fcd2a27018/libstdc%20%20-v3/include/bits/stl_algo.h#L1125-L1187&quot;&gt;libstdc ++&lt;/a&gt;和&lt;a href=&quot;https://github.com/llvm-mirror/libcxx/blob/a12cb9d211019d99b5875b6d8034617cbc24c2cc/include/algorithm#L2259-L2291&quot;&gt;libc ++中的实现&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="abcd5647b5dbfde0bf3b5841d67951f24a735a10" translate="yes" xml:space="preserve">
          <source>See also the implementations in &lt;a href=&quot;https://github.com/gcc-mirror/gcc/blob/d9375e490072d1aae73a93949aa158fcd2a27018/libstdc%20%20-v3/include/bits/stl_algo.h#L1207&quot;&gt;libstdc++&lt;/a&gt; and &lt;a href=&quot;https://github.com/llvm-mirror/libcxx/blob/a12cb9d211019d99b5875b6d8034617cbc24c2cc/include/algorithm#L2298&quot;&gt;libc++&lt;/a&gt;.</source>
          <target state="translated">另请参见&lt;a href=&quot;https://github.com/gcc-mirror/gcc/blob/d9375e490072d1aae73a93949aa158fcd2a27018/libstdc%20%20-v3/include/bits/stl_algo.h#L1207&quot;&gt;libstdc ++&lt;/a&gt;和&lt;a href=&quot;https://github.com/llvm-mirror/libcxx/blob/a12cb9d211019d99b5875b6d8034617cbc24c2cc/include/algorithm#L2298&quot;&gt;libc ++中的实现&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="9ad1a04d56e3d6822bfa65c3769d0ddd0aa829c4" translate="yes" xml:space="preserve">
          <source>See also the implementations in &lt;a href=&quot;https://github.com/gcc-mirror/gcc/blob/d9375e490072d1aae73a93949aa158fcd2a27018/libstdc%20%20-v3/include/bits/stl_algo.h#L1249&quot;&gt;libstdc++&lt;/a&gt; and &lt;a href=&quot;https://github.com/llvm-mirror/libcxx/blob/a12cb9d211019d99b5875b6d8034617cbc24c2cc/include/algorithm#L2417&quot;&gt;libc++&lt;/a&gt;.</source>
          <target state="translated">另请参见&lt;a href=&quot;https://github.com/gcc-mirror/gcc/blob/d9375e490072d1aae73a93949aa158fcd2a27018/libstdc%20%20-v3/include/bits/stl_algo.h#L1249&quot;&gt;libstdc ++&lt;/a&gt;和&lt;a href=&quot;https://github.com/llvm-mirror/libcxx/blob/a12cb9d211019d99b5875b6d8034617cbc24c2cc/include/algorithm#L2417&quot;&gt;libc ++中的实现&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="7972791dec6e10e047e38baff6fab2a8513c7838" translate="yes" xml:space="preserve">
          <source>See also the implementations in &lt;a href=&quot;https://github.com/gcc-mirror/gcc/blob/d9375e490072d1aae73a93949aa158fcd2a27018/libstdc%20%20-v3/include/bits/stl_algo.h#L1461&quot;&gt;libstdc++&lt;/a&gt; and &lt;a href=&quot;https://github.com/llvm-mirror/libcxx/blob/a12cb9d211019d99b5875b6d8034617cbc24c2cc/include/algorithm#L2482&quot;&gt;libc++&lt;/a&gt;.</source>
          <target state="translated">另请参见&lt;a href=&quot;https://github.com/gcc-mirror/gcc/blob/d9375e490072d1aae73a93949aa158fcd2a27018/libstdc%20%20-v3/include/bits/stl_algo.h#L1461&quot;&gt;libstdc ++&lt;/a&gt;和&lt;a href=&quot;https://github.com/llvm-mirror/libcxx/blob/a12cb9d211019d99b5875b6d8034617cbc24c2cc/include/algorithm#L2482&quot;&gt;libc ++中的实现&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="10ed34d430c362ea64daf3b6f9f28052ab07af01" translate="yes" xml:space="preserve">
          <source>SeedSequence</source>
          <target state="translated">SeedSequence</target>
        </trans-unit>
        <trans-unit id="3f0cf8e2782befc24fe377038ac19de212006a14" translate="yes" xml:space="preserve">
          <source>Seeds the pseudo-random number generator used by &lt;code&gt;&lt;a href=&quot;rand&quot;&gt;std::rand()&lt;/a&gt;&lt;/code&gt; with the value &lt;code&gt;seed&lt;/code&gt;.</source>
          <target state="translated">使用值 &lt;code&gt;seed&lt;/code&gt; 播种 &lt;code&gt;&lt;a href=&quot;rand&quot;&gt;std::rand()&lt;/a&gt;&lt;/code&gt; 使用的伪随机数生成器。</target>
        </trans-unit>
        <trans-unit id="1e1921a75e80a596c9a940068df630bd1b9feed6" translate="yes" xml:space="preserve">
          <source>Selection statements</source>
          <target state="translated">选择声明</target>
        </trans-unit>
        <trans-unit id="29b9ea4555f2e87f0b5e1a8666aa986618f09c19" translate="yes" xml:space="preserve">
          <source>Selection statements choose between one of several flows of control.</source>
          <target state="translated">选择声明在几种控制流中选择一种。</target>
        </trans-unit>
        <trans-unit id="776c569a16268c74debac2a7f912b4ace14fe2d5" translate="yes" xml:space="preserve">
          <source>Selects &lt;code&gt;n&lt;/code&gt; elements from the sequence [first; last) such that each possible sample has equal probability of appearance, and writes those selected elements into the output iterator &lt;code&gt;out&lt;/code&gt;. Random numbers are generated using the random number generator &lt;code&gt;g&lt;/code&gt;.</source>
          <target state="translated">从序列中选择 &lt;code&gt;n&lt;/code&gt; 个元素[first; 最后一个），以使每个可能的样本都具有相同的出现概率，并将这些选定的元素写入输出迭代器 &lt;code&gt;out&lt;/code&gt; 中。使用随机数生成器 &lt;code&gt;g&lt;/code&gt; 生成随机数。</target>
        </trans-unit>
        <trans-unit id="fe03c3515833357d89e7094df960e757cae3bc1d" translate="yes" xml:space="preserve">
          <source>Semantics</source>
          <target state="translated">Semantics</target>
        </trans-unit>
        <trans-unit id="fcb3a84856a9093f8cbfaa3811dd4b157eac0989" translate="yes" xml:space="preserve">
          <source>Semiregular</source>
          <target state="translated">Semiregular</target>
        </trans-unit>
        <trans-unit id="5ab18e1afa30ee21a995753ce9370cb63f6c68b4" translate="yes" xml:space="preserve">
          <source>Semiregular wrapper</source>
          <target state="translated">半圆形包装物</target>
        </trans-unit>
        <trans-unit id="8d982da36907626a11a5ba3e814abbe3a393e179" translate="yes" xml:space="preserve">
          <source>Semiregular wrapper (C++20)</source>
          <target state="translated">半规则包装器(C++20)</target>
        </trans-unit>
        <trans-unit id="058beef7599ef0fca7a043fe7e6842246cc841f4" translate="yes" xml:space="preserve">
          <source>Sends signal sig to the program. The signal handler (specified using the &lt;code&gt;&lt;a href=&quot;signal&quot;&gt;std::signal()&lt;/a&gt;&lt;/code&gt; function) is invoked.</source>
          <target state="translated">发送信号信号到程序。信号处理程序（使用 &lt;code&gt;&lt;a href=&quot;signal&quot;&gt;std::signal()&lt;/a&gt;&lt;/code&gt; 函数指定）被调用。</target>
        </trans-unit>
        <trans-unit id="1b723f9a0711150c35ac643e01416774bd288ff8" translate="yes" xml:space="preserve">
          <source>Sentinel</source>
          <target state="translated">Sentinel</target>
        </trans-unit>
        <trans-unit id="ade75186a4f45f23ca1cb8f7cad6a1638de0d6e0" translate="yes" xml:space="preserve">
          <source>Separates the thread of execution from the thread object, allowing execution to continue independently. Any allocated resources will be freed once the thread exits.</source>
          <target state="translated">将执行的线程与线程对象分离,允许执行独立地继续。一旦线程退出,任何分配的资源将被释放。</target>
        </trans-unit>
        <trans-unit id="627861d895f61db64e072c3541f0299ce0be392b" translate="yes" xml:space="preserve">
          <source>Sequence containers</source>
          <target state="translated">序列容器</target>
        </trans-unit>
        <trans-unit id="5f156be6c395dbb2a3a82e5a5a15edfff2ce72c6" translate="yes" xml:space="preserve">
          <source>Sequence containers implement data structures which can be accessed sequentially.</source>
          <target state="translated">序列容器实现了可以依次访问的数据结构。</target>
        </trans-unit>
        <trans-unit id="586248de4df6f2fb686141acbe275f15919cdcd3" translate="yes" xml:space="preserve">
          <source>Sequence containers in the standard library</source>
          <target state="translated">标准库中的序列容器</target>
        </trans-unit>
        <trans-unit id="1dd2a98d87981aeed996e59fae4a850b7b8cce75" translate="yes" xml:space="preserve">
          <source>SequenceContainer</source>
          <target state="translated">SequenceContainer</target>
        </trans-unit>
        <trans-unit id="cb196565d6396245ad6a50208b3e628e5f581b0b" translate="yes" xml:space="preserve">
          <source>Sequenced-before</source>
          <target state="translated">Sequenced-before</target>
        </trans-unit>
        <trans-unit id="64cf851b8491eff8f5a5c736de201846803398a1" translate="yes" xml:space="preserve">
          <source>Sequential ordering may be necessary for multiple producer-multiple consumer situations where all consumers must observe the actions of all producers occurring in the same order.</source>
          <target state="translated">对于多个生产者-多个消费者的情况,顺序排序可能是必要的,因为在这种情况下,所有消费者必须观察到所有生产者的行动以相同的顺序发生。</target>
        </trans-unit>
        <trans-unit id="9a3c02107bfafa471d5b3be0bbb231a73bba241c" translate="yes" xml:space="preserve">
          <source>Sequentially-consistent ordering</source>
          <target state="translated">顺序一致的排序</target>
        </trans-unit>
        <trans-unit id="f9dd132139144d6bb8d37bb56baaf697a3046e5a" translate="yes" xml:space="preserve">
          <source>Set group ID to file's user group ID on execution</source>
          <target state="translated">执行时将组ID设置为文件的用户组ID</target>
        </trans-unit>
        <trans-unit id="e1637e859e4377992588527df8ff19bd1c80c203" translate="yes" xml:space="preserve">
          <source>Set operations (on sorted ranges)</source>
          <target state="translated">设置操作(对排序范围)</target>
        </trans-unit>
        <trans-unit id="89aff6dc709371a1e75349cff7f89ce318bf48f3" translate="yes" xml:space="preserve">
          <source>Set user ID to file owner user ID on execution</source>
          <target state="translated">执行时将用户ID设置为文件所有者的用户ID。</target>
        </trans-unit>
        <trans-unit id="5a7c71125a1b285d19cc080c75758da9c81b3646" translate="yes" xml:space="preserve">
          <source>Sets &lt;code&gt;e == E()&lt;/code&gt;.</source>
          <target state="translated">设置 &lt;code&gt;e == E()&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="5472e26bd7acfe2a9e13b0c0a52960a1f0c432c5" translate="yes" xml:space="preserve">
          <source>Sets &lt;code&gt;e == E(q)&lt;/code&gt;.</source>
          <target state="translated">设置 &lt;code&gt;e == E(q)&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="c0afe1632304164b54c66cff4a98eb13baed5d65" translate="yes" xml:space="preserve">
          <source>Sets &lt;code&gt;e == E(s)&lt;/code&gt;.</source>
          <target state="translated">设置 &lt;code&gt;e == E(s)&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="23d22a46a8394d6e4f18b68e1628cb04aa3fe300" translate="yes" xml:space="preserve">
          <source>Sets all bits to &lt;code&gt;true&lt;/code&gt; or to specified value.</source>
          <target state="translated">将所有位设置为 &lt;code&gt;true&lt;/code&gt; 或指定值。</target>
        </trans-unit>
        <trans-unit id="43384d288b4c5906f92816e5a1a730f85b8f1fb4" translate="yes" xml:space="preserve">
          <source>Sets bits to &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">将位设置为 &lt;code&gt;false&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="df702a27723655552b5082b9500508a154b9a7a9" translate="yes" xml:space="preserve">
          <source>Sets input position indicator of the current associated &lt;code&gt;streambuf&lt;/code&gt; object. In case of failure, calls &lt;code&gt;setstate(&lt;a href=&quot;../ios_base/iostate&quot;&gt;std::ios_base::failbit&lt;/a&gt;)&lt;/code&gt;.</source>
          <target state="translated">设置当前关联的 &lt;code&gt;streambuf&lt;/code&gt; 对象的输入位置指示符。如果失败，请调用 &lt;code&gt;setstate(&lt;a href=&quot;../ios_base/iostate&quot;&gt;std::ios_base::failbit&lt;/a&gt;)&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="990595a0ab4c45f3eb5d0fcf59aa896be2bd913a" translate="yes" xml:space="preserve">
          <source>Sets the associated locale of the stream to the given one. Before returning, each function, registered by &lt;code&gt;&lt;a href=&quot;register_callback&quot;&gt;register_callback()&lt;/a&gt;&lt;/code&gt; is called with &lt;code&gt;imbue_event&lt;/code&gt; as a parameter.</source>
          <target state="translated">将流的关联语言环境设置为给定的语言环境。返回之前，使用 &lt;code&gt;imbue_event&lt;/code&gt; 作为参数调用由 &lt;code&gt;&lt;a href=&quot;register_callback&quot;&gt;register_callback()&lt;/a&gt;&lt;/code&gt; 注册的每个函数。</target>
        </trans-unit>
        <trans-unit id="995344713122a7e40f3d1c41777d1c25df014b44" translate="yes" xml:space="preserve">
          <source>Sets the associated stream buffer to &lt;code&gt;sb&lt;/code&gt; and initializes the internal state.</source>
          <target state="translated">将关联的流缓冲区设置为 &lt;code&gt;sb&lt;/code&gt; 并初始化内部状态。</target>
        </trans-unit>
        <trans-unit id="b7a3958ed34eda423f1812162bb7ead7f8f7386b" translate="yes" xml:space="preserve">
          <source>Sets the associated stream buffer to &lt;code&gt;sb&lt;/code&gt; without clearing the error state.</source>
          <target state="translated">将关联的流缓冲区设置为 &lt;code&gt;sb&lt;/code&gt; 而不清除错误状态。</target>
        </trans-unit>
        <trans-unit id="dc84cbf09f54497d82bb5b62d2a2d517c0f640e5" translate="yes" xml:space="preserve">
          <source>Sets the file position indicator and the multibyte parsing state (if any) for the C file stream &lt;code&gt;stream&lt;/code&gt; according to the value pointed to by &lt;code&gt;pos&lt;/code&gt;.</source>
          <target state="translated">设置文件位置指示器和多字节解析状态（如果有的话）为C文件流 &lt;code&gt;stream&lt;/code&gt; 根据由指向的值 &lt;code&gt;pos&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="e8981596fc41bcb7790694f68d1d762fd8c679d5" translate="yes" xml:space="preserve">
          <source>Sets the file position indicator for the file stream &lt;code&gt;stream&lt;/code&gt;.</source>
          <target state="translated">设置文件流 &lt;code&gt;stream&lt;/code&gt; 的文件位置指示符。</target>
        </trans-unit>
        <trans-unit id="dd531265ea608469a544e2f55635683ca3d4497c" translate="yes" xml:space="preserve">
          <source>Sets the formatting flags to specified settings.</source>
          <target state="translated">将格式化标志设置为指定的设置。</target>
        </trans-unit>
        <trans-unit id="79eb6b783a4567ddc5405a0414a0c6ec9ca40fb5" translate="yes" xml:space="preserve">
          <source>Sets the handler for signal &lt;code&gt;sig&lt;/code&gt;. The signal handler can be set so that default handling will occur, signal is ignored, or a user-defined function is called.</source>
          <target state="translated">设置信号 &lt;code&gt;sig&lt;/code&gt; 的处理程序。可以设置信号处理程序，以便进行默认处理，忽略信号或调用用户定义的函数。</target>
        </trans-unit>
        <trans-unit id="09a2100140edfd67ac8ff2932600ec68a127f06e" translate="yes" xml:space="preserve">
          <source>Sets the initial value of an object to zero.</source>
          <target state="translated">将对象的初始值设为零。</target>
        </trans-unit>
        <trans-unit id="e1eb3620fe2b05e18c0f858094a88945ee7f3c72" translate="yes" xml:space="preserve">
          <source>Sets the initial values of the &lt;a href=&quot;storage_duration&quot;&gt;static&lt;/a&gt; variables to a compile-time constant.</source>
          <target state="translated">将&lt;a href=&quot;storage_duration&quot;&gt;静态&lt;/a&gt;变量的初始值设置为编译时常量。</target>
        </trans-unit>
        <trans-unit id="b1ca0346b3e08f30a6472d9f167a325e8d1e4753" translate="yes" xml:space="preserve">
          <source>Sets the internal buffer to use for I/O operations performed on the C stream &lt;code&gt;stream&lt;/code&gt;.</source>
          <target state="translated">设置内部缓冲区以用于在C流 &lt;code&gt;stream&lt;/code&gt; 上执行的I / O操作。</target>
        </trans-unit>
        <trans-unit id="cd02608b401728e9aec88e6cbdb388fde515882f" translate="yes" xml:space="preserve">
          <source>Sets the number of buckets to &lt;code&gt;count&lt;/code&gt; and rehashes the container, i.e. puts the elements into appropriate buckets considering that total number of buckets has changed. If the new number of buckets makes load factor more than maximum load factor (&lt;code&gt;count &amp;lt; size() / max_load_factor()&lt;/code&gt;), then the new number of buckets is at least &lt;code&gt;size() / max_load_factor()&lt;/code&gt;.</source>
          <target state="translated">设置要 &lt;code&gt;count&lt;/code&gt; 和刷新容器的存储桶数，即，考虑到存储桶总数已更改，将元素放入适当的存储桶中。如果新的存储桶数使负载系数大于最大负载系数（ &lt;code&gt;count &amp;lt; size() / max_load_factor()&lt;/code&gt; ），则新的存储桶数至少为 &lt;code&gt;size() / max_load_factor()&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="44ffba405c63cb8f4ea0d962441828c7289a2a74" translate="yes" xml:space="preserve">
          <source>Sets the number of buckets to the number needed to accomodate at least &lt;code&gt;count&lt;/code&gt; elements without exceeding maximum load factor and rehashes the container, i.e. puts the elements into appropriate buckets considering that total number of buckets has changed. Effectively calls &lt;code&gt;rehash(&lt;a href=&quot;../../numeric/math/ceil&quot;&gt;std::ceil&lt;/a&gt;(count / max_load_factor()))&lt;/code&gt;.</source>
          <target state="translated">将存储桶的数量设置为至少容纳不超过最大负载因子的元素 &lt;code&gt;count&lt;/code&gt; 并重新包装容器所需的数量，即，考虑到存储桶的总数已更改，将存储元素放入适当的存储桶中。有效地调用 &lt;code&gt;rehash(&lt;a href=&quot;../../numeric/math/ceil&quot;&gt;std::ceil&lt;/a&gt;(count / max_load_factor()))&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="872d658af6ea90478845715a23df835aadd67a4f" translate="yes" xml:space="preserve">
          <source>Sets the numeric base of the stream. When used in an expression &lt;code&gt;out &amp;lt;&amp;lt; setbase(base)&lt;/code&gt; or &lt;code&gt;in &amp;gt;&amp;gt; setbase(base)&lt;/code&gt;, changes the &lt;code&gt;basefield&lt;/code&gt; flag of the stream &lt;code&gt;out&lt;/code&gt; or &lt;code&gt;in&lt;/code&gt;, depending on the value of &lt;code&gt;base&lt;/code&gt;:</source>
          <target state="translated">设置流的数字基数。在表达式 &lt;code&gt;out &amp;lt;&amp;lt; setbase(base)&lt;/code&gt; 或 &lt;code&gt;in &amp;gt;&amp;gt; setbase(base)&lt;/code&gt; &lt;code&gt;in&lt;/code&gt; ，根据 &lt;code&gt;base&lt;/code&gt; 的值更改 &lt;code&gt;out&lt;/code&gt; 或in流的 &lt;code&gt;basefield&lt;/code&gt; 标志：</target>
        </trans-unit>
        <trans-unit id="4458ba443567a1698e8223d365c93646c1809952" translate="yes" xml:space="preserve">
          <source>Sets the output position indicator of the current associated &lt;code&gt;streambuf&lt;/code&gt; object.</source>
          <target state="translated">设置当前关联的 &lt;code&gt;streambuf&lt;/code&gt; 对象的输出位置指示器。</target>
        </trans-unit>
        <trans-unit id="f848851d17ce421067d84a2f77e7deaea69e3c90" translate="yes" xml:space="preserve">
          <source>Sets the position indicator of the input and/or output sequence relative to some other position.</source>
          <target state="translated">设置输入和/或输出序列相对于其他位置的位置指示器。</target>
        </trans-unit>
        <trans-unit id="3a8ee43d265a420d1f758efe248a25c59cb316ca" translate="yes" xml:space="preserve">
          <source>Sets the position indicator of the input and/or output sequence to an absolute position.</source>
          <target state="translated">将输入和/或输出序列的位置指示器设置为绝对位置。</target>
        </trans-unit>
        <trans-unit id="13053efd8b77ed7f7e086552a051ef07d0612487" translate="yes" xml:space="preserve">
          <source>Sets the stream error flags &lt;code&gt;state&lt;/code&gt; in addition to currently set flags. Essentially calls &lt;code&gt;clear(rdstate() | state)&lt;/code&gt;. May throw an exception.</source>
          <target state="translated">除了当前设置的标志之外，还设置流错误标志的 &lt;code&gt;state&lt;/code&gt; 。本质上调用 &lt;code&gt;clear(rdstate() | state)&lt;/code&gt; 。可能会引发异常。</target>
        </trans-unit>
        <trans-unit id="7a6e53a3b1a7551e0adedf2f964d9589e2d7700d" translate="yes" xml:space="preserve">
          <source>Sets the stream error state flags by assigning them the value of &lt;code&gt;state&lt;/code&gt;. By default, assigns &lt;code&gt;&lt;a href=&quot;../ios_base/iostate&quot;&gt;std::ios_base::goodbit&lt;/a&gt;&lt;/code&gt; which has the effect of clearing all error state flags.</source>
          <target state="translated">通过为 &lt;code&gt;state&lt;/code&gt; 错误赋值state来设置流错误状态标志。默认情况下，分配 &lt;code&gt;&lt;a href=&quot;../ios_base/iostate&quot;&gt;std::ios_base::goodbit&lt;/a&gt;&lt;/code&gt; ，其作用是清除所有错误状态标志。</target>
        </trans-unit>
        <trans-unit id="31107c4e3971ba07d2b23b105a5b48d627e90338" translate="yes" xml:space="preserve">
          <source>Sets the values of the pointers defining the get area. Specifically, after the call &lt;code&gt;eback() == gbeg&lt;/code&gt;, &lt;code&gt;gptr() == gcurr&lt;/code&gt;, &lt;code&gt;egptr() == gend&lt;/code&gt;.</source>
          <target state="translated">设置定义获取区域的指针的值。具体来说，在调用 &lt;code&gt;eback() == gbeg&lt;/code&gt; ， &lt;code&gt;gptr() == gcurr&lt;/code&gt; ， &lt;code&gt;egptr() == gend&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="3c80d20a12ae08a03e22ce68dd881ce0d84f3b63" translate="yes" xml:space="preserve">
          <source>Sets the values of the pointers defining the put area. Specifically, after the call &lt;code&gt;pbase() == pbeg&lt;/code&gt;, &lt;code&gt;pptr() == pbeg&lt;/code&gt;, &lt;code&gt;epptr() == pend&lt;/code&gt;.</source>
          <target state="translated">设置定义放置区域的指针的值。具体来说，在调用 &lt;code&gt;pbase() == pbeg&lt;/code&gt; ， &lt;code&gt;pptr() == pbeg&lt;/code&gt; ， &lt;code&gt;epptr() == pend&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="5199b18d2d2b0a0af45438d34940fd5e1b006963" translate="yes" xml:space="preserve">
          <source>Sets whether the standard C++ streams are synchronized to the standard C streams after each input/output operation.</source>
          <target state="translated">设置每次输入/输出操作后,是否将标准C++流同步到标准C流。</target>
        </trans-unit>
        <trans-unit id="64e31adef7a3933fd26bffedd7b084d8fec7dcc6" translate="yes" xml:space="preserve">
          <source>Setting the result</source>
          <target state="translated">设置结果</target>
        </trans-unit>
        <trans-unit id="236b5bbbb7e1393bb181a9a22a43242bd679e759" translate="yes" xml:space="preserve">
          <source>Several C++ compilers transform suitable memory-copying loops to &lt;code&gt;std::memcpy&lt;/code&gt; calls.</source>
          <target state="translated">一些C ++编译器将合适的内存复制循环转换为 &lt;code&gt;std::memcpy&lt;/code&gt; 调用。</target>
        </trans-unit>
        <trans-unit id="20e064cb02a2e6366e9769ca91b6159a518d574a" translate="yes" xml:space="preserve">
          <source>Several alias templates, that perform arithmetic operations on &lt;code&gt;ratio&lt;/code&gt; objects at compile-time are provided.</source>
          <target state="translated">提供了几个别名模板，它们在编译时对 &lt;code&gt;ratio&lt;/code&gt; 对象执行算术运算。</target>
        </trans-unit>
        <trans-unit id="8795d93d5e0421a57d6b71c2c710d10c8092b33e" translate="yes" xml:space="preserve">
          <source>Several class templates, that perform comparison operations on &lt;code&gt;ratio&lt;/code&gt; objects at compile-time are provided.</source>
          <target state="translated">提供了几个在编译时对 &lt;code&gt;ratio&lt;/code&gt; 对象执行比较操作的类模板。</target>
        </trans-unit>
        <trans-unit id="c26bd0ea0f59b8ae2c73c9e1a142bd1fcfdbf81d" translate="yes" xml:space="preserve">
          <source>Several cleanup steps are performed:</source>
          <target state="translated">进行了几个清理步骤。</target>
        </trans-unit>
        <trans-unit id="2afe923e6efa1a1608806b55078e16f7523db71b" translate="yes" xml:space="preserve">
          <source>Several convenience classes are predefined in the header &lt;code&gt;&amp;lt;stdexcept&amp;gt;&lt;/code&gt; to report particular error conditions. These classes can be divided into two categories:</source>
          <target state="translated">标头 &lt;code&gt;&amp;lt;stdexcept&amp;gt;&lt;/code&gt; 中预定义了几个便利类，以报告特定的错误情况。这些类可以分为两类：</target>
        </trans-unit>
        <trans-unit id="c4648776dcbe754ec199fc020a5d382f56667916" translate="yes" xml:space="preserve">
          <source>Several convenience typedefs that correspond to the SI ratios are provided by the standard library:</source>
          <target state="translated">标准库提供了几个对应SI比率的方便类型定义。</target>
        </trans-unit>
        <trans-unit id="096f451fac0362d4ca2620596aca61e92e355777" translate="yes" xml:space="preserve">
          <source>Several functions and macro constants for signal management are provided.</source>
          <target state="translated">提供了几种信号管理的功能和宏常数。</target>
        </trans-unit>
        <trans-unit id="0116e99087157300ae52a7a94e87ce089818304c" translate="yes" xml:space="preserve">
          <source>Several specializations for common character sequence types are defined:</source>
          <target state="translated">定义了几种常见字符序列类型的特殊化。</target>
        </trans-unit>
        <trans-unit id="b6d52405699141b6d980e9aac92099ec2171d14c" translate="yes" xml:space="preserve">
          <source>Several specializations for common character sequence types are provided:</source>
          <target state="translated">提供了几种常见字符序列类型的特殊化。</target>
        </trans-unit>
        <trans-unit id="5e4842d83deb970b14592b06aac5a6de2b59130f" translate="yes" xml:space="preserve">
          <source>Several specializations for common character types are provided:</source>
          <target state="translated">提供了几种常见字符类型的特殊化。</target>
        </trans-unit>
        <trans-unit id="b1a5848f4dd2490f2d5769aac542fd551b4e177f" translate="yes" xml:space="preserve">
          <source>Several specializations of &lt;code&gt;&lt;a href=&quot;string/basic_string&quot;&gt;std::basic_string&lt;/a&gt;&lt;/code&gt; are provided for commonly-used types:</source>
          <target state="translated">为常用类型提供了 &lt;code&gt;&lt;a href=&quot;string/basic_string&quot;&gt;std::basic_string&lt;/a&gt;&lt;/code&gt; 几种专业化：</target>
        </trans-unit>
        <trans-unit id="6ebda6bee6f8e82c2d1bf625330591c499530bd5" translate="yes" xml:space="preserve">
          <source>Several specializations of &lt;code&gt;&lt;a href=&quot;string/basic_string_view&quot;&gt;std::basic_string_view&lt;/a&gt;&lt;/code&gt; are provided for commonly-used types:</source>
          <target state="translated">为常用类型提供了 &lt;code&gt;&lt;a href=&quot;string/basic_string_view&quot;&gt;std::basic_string_view&lt;/a&gt;&lt;/code&gt; 几种专业化：</target>
        </trans-unit>
        <trans-unit id="f9ae4d382f3f173206dd82ede2629eb16f42a22b" translate="yes" xml:space="preserve">
          <source>Several specific popular algorithms are predefined.</source>
          <target state="translated">预先定义了几种特定的流行算法。</target>
        </trans-unit>
        <trans-unit id="93f03b20c634996625d4716bcc756c52b32b3d54" translate="yes" xml:space="preserve">
          <source>Several standard library functions indicate errors by writing positive integers to &lt;code&gt;errno&lt;/code&gt;. Typically, the value of &lt;code&gt;errno&lt;/code&gt; is set to one of the error codes, listed in &lt;code&gt;&amp;lt;cerrno&amp;gt;&lt;/code&gt; as macro constants that begin with the letter &lt;code&gt;E&lt;/code&gt;, followed by uppercase letters or digits.</source>
          <target state="translated">几个标准库函数通过将正整数写入 &lt;code&gt;errno&lt;/code&gt; 来指示错误。通常， &lt;code&gt;errno&lt;/code&gt; 的值设置为错误代码之一，在 &lt;code&gt;&amp;lt;cerrno&amp;gt;&lt;/code&gt; 中列出为以字母 &lt;code&gt;E&lt;/code&gt; 开头，后跟大写字母或数字的宏常量。</target>
        </trans-unit>
        <trans-unit id="17bd9dc914c33e15ed5ac3d96acb6e3cd62e8b38" translate="yes" xml:space="preserve">
          <source>Several typedefs for common character types are provided:</source>
          <target state="translated">提供了几种常见字符类型的类型定义。</target>
        </trans-unit>
        <trans-unit id="49157ea525f663890f621bd2ab2c9be20931cd0e" translate="yes" xml:space="preserve">
          <source>Several utilities are provided to create and access raw storage.</source>
          <target state="translated">提供了几个实用程序来创建和访问原始存储。</target>
        </trans-unit>
        <trans-unit id="f184e7fb63088309cbd0a9fe3300a64508bc0131" translate="yes" xml:space="preserve">
          <source>Several utilities that provided early functional support are deprecated in C++11 and removed in C++17 (old negators are deprecated in C++17 and removed in C++20):</source>
          <target state="translated">一些提供早期功能支持的实用程序在C++11中被废弃,在C++17中被删除(旧的否定者在C++17中被废弃,在C++20中被删除)。</target>
        </trans-unit>
        <trans-unit id="4b6768882a645687cc1622eb5df417b554b27c00" translate="yes" xml:space="preserve">
          <source>Several ways to generate a NaN (the output string is compiler-specific).</source>
          <target state="translated">生成NaN的几种方法(输出字符串是编译器特有的)。</target>
        </trans-unit>
        <trans-unit id="a68c6d89cb2cb95ce1d60e96889a9fa5dc8212d4" translate="yes" xml:space="preserve">
          <source>Shared locking</source>
          <target state="translated">共享锁定</target>
        </trans-unit>
        <trans-unit id="73451d10ad1723ad84471a2028b592eaced1e7fb" translate="yes" xml:space="preserve">
          <source>Shared mutexes are usually used in situations when multiple readers can access the same resource at the same time without causing data races, but only one writer can do so.</source>
          <target state="translated">共享mutexes通常用于多个读者可以同时访问同一资源而不会造成数据竞赛,但只有一个写者可以这样做的情况。</target>
        </trans-unit>
        <trans-unit id="5eb61d2dff132f2129980e537c9cfdac411b9d16" translate="yes" xml:space="preserve">
          <source>Shared mutexes do not support direct transition from shared to unique ownership mode: the shared lock has to be relinquished with &lt;code&gt;&lt;a href=&quot;unlock_shared&quot;&gt;unlock_shared()&lt;/a&gt;&lt;/code&gt; before exclusive ownership may be obtained with &lt;code&gt;lock()&lt;/code&gt;. &lt;a href=&quot;http://www.boost.org/doc/libs/release/doc/html/thread/synchronization.html#thread.synchronization.mutex_types.upgrade_mutex&quot;&gt;boost::upgrade_mutex&lt;/a&gt; may be used for this purpose.</source>
          <target state="translated">共享互斥锁不支持从共享到唯一所有权模式的直接转换：必须先使用 &lt;code&gt;&lt;a href=&quot;unlock_shared&quot;&gt;unlock_shared()&lt;/a&gt;&lt;/code&gt; 放弃共享锁，然后才能使用 &lt;code&gt;lock()&lt;/code&gt; 获得独占所有权。&lt;a href=&quot;http://www.boost.org/doc/libs/release/doc/html/thread/synchronization.html#thread.synchronization.mutex_types.upgrade_mutex&quot;&gt;boost :: upgrade_mutex&lt;/a&gt;可以用于此目的。</target>
        </trans-unit>
        <trans-unit id="556bc706b4b99c6eab454da0451b24573397c809" translate="yes" xml:space="preserve">
          <source>Shared mutexes do not support direct transition from shared to unique ownership mode: the shared lock has to be relinquished with &lt;code&gt;&lt;a href=&quot;unlock_shared&quot;&gt;unlock_shared()&lt;/a&gt;&lt;/code&gt; before exclusive ownership may be obtained with &lt;code&gt;lock()&lt;/code&gt;. &lt;a href=&quot;https://www.boost.org/doc/libs/release/doc/html/thread/synchronization.html#thread.synchronization.mutex_types.upgrade_mutex&quot;&gt;boost::upgrade_mutex&lt;/a&gt; may be used for this purpose.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="37a0431da83771aa22d91f0f6aadf1383e976f46" translate="yes" xml:space="preserve">
          <source>SharedMutex</source>
          <target state="translated">SharedMutex</target>
        </trans-unit>
        <trans-unit id="57a75cc42950df8e7be8033d9c108015544f09cd" translate="yes" xml:space="preserve">
          <source>SharedTimedMutex</source>
          <target state="translated">SharedTimedMutex</target>
        </trans-unit>
        <trans-unit id="f02680b3393117ec07357eb9f1a55eb3ffb43839" translate="yes" xml:space="preserve">
          <source>Shifts the elements in the range &lt;code&gt;[first, last)&lt;/code&gt; by &lt;code&gt;n&lt;/code&gt; positions.</source>
          <target state="translated">位移范围内的元素 &lt;code&gt;[first, last)&lt;/code&gt; 由 &lt;code&gt;n&lt;/code&gt; 位置。</target>
        </trans-unit>
        <trans-unit id="0aa2fd65f221fb441668eabd3b7d043130d5f61e" translate="yes" xml:space="preserve">
          <source>Shows the given error message and renders the program ill-formed.</source>
          <target state="translated">显示给定的错误信息,并使程序变形。</target>
        </trans-unit>
        <trans-unit id="115bd61002d38ae0f96bbafaa3faad3d6f1cd957" translate="yes" xml:space="preserve">
          <source>Sign modifiers</source>
          <target state="translated">符号修饰符</target>
        </trans-unit>
        <trans-unit id="577457386419e49cc011db96f147d3e3e75e3f09" translate="yes" xml:space="preserve">
          <source>Signal handler</source>
          <target state="translated">信号处理机</target>
        </trans-unit>
        <trans-unit id="a84a6ab629fde6a64e054e143bd33f5477fde80c" translate="yes" xml:space="preserve">
          <source>Signal handlers are expected to have &lt;a href=&quot;../../language/language_linkage&quot;&gt;C linkage&lt;/a&gt; and, in general, only use the features from the common subset of C and C++. It is implementation-defined if a function with C++ linkage can be used as a signal handler.</source>
          <target state="translated">信号处理程序应该具有&lt;a href=&quot;../../language/language_linkage&quot;&gt;C链接，&lt;/a&gt;并且通常只使用C和C ++的公共子集中的功能。是否可以将具有C ++链接的函数用作信号处理程序，由实现定义。</target>
        </trans-unit>
        <trans-unit id="2d946cd91c48d2465b1861bb4f63d569ff6618d1" translate="yes" xml:space="preserve">
          <source>Signal types</source>
          <target state="translated">信号类型</target>
        </trans-unit>
        <trans-unit id="2346a18ea3002ff04eca3a130c7f40e65c56f0c9" translate="yes" xml:space="preserve">
          <source>Signals</source>
          <target state="translated">Signals</target>
        </trans-unit>
        <trans-unit id="f4ba37e52b5e712f327df4086478be0bb37e10af" translate="yes" xml:space="preserve">
          <source>Signals an erroneous condition and executes an error handler.</source>
          <target state="translated">发出错误条件的信号,并执行错误处理程序。</target>
        </trans-unit>
        <trans-unit id="99645a25e106b37349c4a9e5cf923d508621ff34" translate="yes" xml:space="preserve">
          <source>Signed integer arithmetic is defined to use two's complement; there are no undefined results.</source>
          <target state="translated">有符号整数算术被定义为使用二的补码,没有未定义的结果。</target>
        </trans-unit>
        <trans-unit id="5fc62c21332a22fd75bd285de995cb4fccf6af62" translate="yes" xml:space="preserve">
          <source>Signed integer type (usually &lt;code&gt;&lt;a href=&quot;../types/ptrdiff_t&quot;&gt;std::ptrdiff_t&lt;/a&gt;&lt;/code&gt;)</source>
          <target state="translated">有符号整数类型（通常为 &lt;code&gt;&lt;a href=&quot;../types/ptrdiff_t&quot;&gt;std::ptrdiff_t&lt;/a&gt;&lt;/code&gt; ）</target>
        </trans-unit>
        <trans-unit id="83cbfd47b41a4ebb43e27ff9728af42d399bbda3" translate="yes" xml:space="preserve">
          <source>Signed integers : maximum value</source>
          <target state="translated">有符号的整数:最大值</target>
        </trans-unit>
        <trans-unit id="46aa2d10272ed1c7e156088e86d214a184422894" translate="yes" xml:space="preserve">
          <source>Signed integers : minimum value</source>
          <target state="translated">有符号的整数:最小值</target>
        </trans-unit>
        <trans-unit id="7add2e2fdaaac8a1396e22391085b13ed07cb9bd" translate="yes" xml:space="preserve">
          <source>Signed overflow</source>
          <target state="translated">签字的溢出部分</target>
        </trans-unit>
        <trans-unit id="950ab1101b17ae5a4d17079adf2c1a753a563569" translate="yes" xml:space="preserve">
          <source>SignedIntegral</source>
          <target state="translated">SignedIntegral</target>
        </trans-unit>
        <trans-unit id="57623bc18a34da85f689f9b07a9ba0fe9841f116" translate="yes" xml:space="preserve">
          <source>Similar to other cast expressions, the result is:</source>
          <target state="translated">与其他投射表达式类似,结果是:。</target>
        </trans-unit>
        <trans-unit id="cac5ae9e99757e61c6a90cda939d609dbc62d711" translate="yes" xml:space="preserve">
          <source>Similar to other nested scopes, the name of a template parameter hides the same name from the outer scope for the duration of its own:</source>
          <target state="translated">与其他嵌套的作用域类似,模板参数的名称在自己的作用域的持续时间内对外部作用域隐藏了相同的名称。</target>
        </trans-unit>
        <trans-unit id="ab34722f320413e959a59dbf8a947c6022642672" translate="yes" xml:space="preserve">
          <source>Similar to protected inheritance, private inheritance may also be used for controlled polymorphism: within the members of the derived (but not within further-derived classes), derived IS-A base.</source>
          <target state="translated">与受保护的继承类似,私有继承也可以用于受控的多态性:在派生的成员内(但不在进一步派生的类内),派生IS-A基。</target>
        </trans-unit>
        <trans-unit id="65db8c5edde8bf68dee1cacb22bbacf452f01291" translate="yes" xml:space="preserve">
          <source>Similar to the use of &lt;code&gt;swap&lt;/code&gt; (described in &lt;a href=&quot;../named_req/swappable&quot;&gt;Swappable&lt;/a&gt;), typical use of the &lt;code&gt;begin&lt;/code&gt; function in generic context is an equivalent of &lt;code&gt;using std::begin; begin(arg);&lt;/code&gt;, which allows both the &lt;a href=&quot;../language/adl&quot;&gt;ADL&lt;/a&gt;-selected overloads for user-defined types and the standard library function templates to appear in the same overload set.</source>
          <target state="translated">与使用 &lt;code&gt;swap&lt;/code&gt; （在&lt;a href=&quot;../named_req/swappable&quot;&gt;Swappable中&lt;/a&gt;描述）相似，在通用上下文中 &lt;code&gt;begin&lt;/code&gt; 函数的典型用法等同于 &lt;code&gt;using std::begin; begin(arg);&lt;/code&gt; ，这允许用户定义类型的&lt;a href=&quot;../language/adl&quot;&gt;ADL&lt;/a&gt;选择的重载和标准库函数模板都出现在同一重载集中。</target>
        </trans-unit>
        <trans-unit id="960d524c56dc7eea207997f2fd93dc3344684d27" translate="yes" xml:space="preserve">
          <source>Similar to the use of &lt;code&gt;swap&lt;/code&gt; (described in &lt;a href=&quot;../named_req/swappable&quot;&gt;Swappable&lt;/a&gt;), typical use of the &lt;code&gt;end&lt;/code&gt; function in generic context is an equivalent of &lt;code&gt;using std::end; end(arg);&lt;/code&gt;, which lets both the &lt;a href=&quot;../language/adl&quot;&gt;ADL&lt;/a&gt;-selected overloads for user-defined types and the standard library function templates to appear in the same overload set.</source>
          <target state="translated">与 &lt;code&gt;swap&lt;/code&gt; 的使用类似（在&lt;a href=&quot;../named_req/swappable&quot;&gt;Swappable中&lt;/a&gt;描述），在通用上下文中对 &lt;code&gt;end&lt;/code&gt; 函数的典型用法等同于 &lt;code&gt;using std::end; end(arg);&lt;/code&gt; ，它允许用户定义类型的&lt;a href=&quot;../language/adl&quot;&gt;ADL&lt;/a&gt;选择的重载和标准库函数模板都出现在同一重载集中。</target>
        </trans-unit>
        <trans-unit id="e9a4d7ed9741e60fb0d8c1ef96f19d3ca3529036" translate="yes" xml:space="preserve">
          <source>Similarly, if an object is created in the storage of a class member or array element, the created object is only a subobject (member or element) of the original object's containing object if:</source>
          <target state="translated">同样,如果在类成员或数组元素的存储中创建了一个对象,那么创建的对象只是原对象的包含对象的一个子对象(成员或元素),如果。</target>
        </trans-unit>
        <trans-unit id="7479f5fc17cb0f2873e10124edd6bb55ddb644e2" translate="yes" xml:space="preserve">
          <source>Similarly, in a template definition, a dependent name that is not a member of the</source>
          <target state="translated">同样,在一个模板定义中,一个不属于</target>
        </trans-unit>
        <trans-unit id="0078135187246fe8bb297259663e248d2026c8e8" translate="yes" xml:space="preserve">
          <source>Similarly, in the case of an ambiguity between a expression statement with a function-style cast expression (3) as its leftmost subexpression and a declaration statement, the ambiguity is resolved by treating it as a declaration. This disambiguation is purely syntactic: it doesn't consider the meaning of names occurring in the statement other than whether they are type names.</source>
          <target state="translated">同样,在一个以函数式投递表达式(3)作为其最左边的子表达式的表达式语句与一个声明语句之间存在歧义的情况下,通过将其视为声明来解决歧义。这种歧义是纯粹的句法:它除了考虑语句中出现的名称是否是类型名之外,并不考虑它们的含义。</target>
        </trans-unit>
        <trans-unit id="482ca159f5a9e05f0355ea23bd2b1dca91576d34" translate="yes" xml:space="preserve">
          <source>Similarly, the decimal value 0.3, which is between 0x1.3333333333333*2-2</source>
          <target state="translated">同理,十进制值0.3,也就是0x1.333333333*2-2之间。</target>
        </trans-unit>
        <trans-unit id="c89741be4b5567d1abddb43c7960bf1492274817" translate="yes" xml:space="preserve">
          <source>Similarly, the object on which a member function is being called is prepended to the argument list as the</source>
          <target state="translated">同样地,被调用的成员函数所对应的对象也被作为</target>
        </trans-unit>
        <trans-unit id="44c42f7a157d61d5df84ae12ff944cc8a7f796d4" translate="yes" xml:space="preserve">
          <source>Similarly, they should not be directly used with standard algorithms when the iterator's value type is &lt;code&gt;char&lt;/code&gt; or &lt;code&gt;signed char&lt;/code&gt;. Instead, convert the value to &lt;code&gt;unsigned char&lt;/code&gt; first:</source>
          <target state="translated">同样，当迭代器的值类型为 &lt;code&gt;char&lt;/code&gt; 或 &lt;code&gt;signed char&lt;/code&gt; 时，不应将它们直接与标准算法一起使用。相反，请先将值转换为 &lt;code&gt;unsigned char&lt;/code&gt; ：</target>
        </trans-unit>
        <trans-unit id="555f4661a1c9474d8436af0119724e3bb946b92e" translate="yes" xml:space="preserve">
          <source>Simple declaration</source>
          <target state="translated">简单声明</target>
        </trans-unit>
        <trans-unit id="e22e3bdd3d9fe2365a2a7c845db318164b219429" translate="yes" xml:space="preserve">
          <source>Simple requirements</source>
          <target state="translated">简单要求</target>
        </trans-unit>
        <trans-unit id="a61f6c3644c94b95e9501c6216722561ceaeda20" translate="yes" xml:space="preserve">
          <source>Simply happens-before</source>
          <target state="translated">简单的发生在之前</target>
        </trans-unit>
        <trans-unit id="2bfece18772a73e9e86bc04ddb99403446d3714b" translate="yes" xml:space="preserve">
          <source>Since &lt;a href=&quot;emplace&quot;&gt;emplace&lt;/a&gt; and unhinted &lt;a href=&quot;insert&quot;&gt;insert&lt;/a&gt; always insert at the upper bound, the order of equivalent elements in the equal range is the order of insertion unless hinted &lt;a href=&quot;insert&quot;&gt;insert&lt;/a&gt; or &lt;a href=&quot;emplace_hint&quot;&gt;emplace_hint&lt;/a&gt; was used to insert an element at a different position.</source>
          <target state="translated">由于&lt;a href=&quot;emplace&quot;&gt;布设&lt;/a&gt;和unhinted &lt;a href=&quot;insert&quot;&gt;刀片&lt;/a&gt;总是在上界插入，在相等当量范围的元素的顺序是插入的顺序进行，除非暗示&lt;a href=&quot;insert&quot;&gt;插入&lt;/a&gt;或&lt;a href=&quot;emplace_hint&quot;&gt;emplace_hint&lt;/a&gt;使用在不同的位置以插入的元件。</target>
        </trans-unit>
        <trans-unit id="c085f0eb950f92da79964d5ad79765742cef364f" translate="yes" xml:space="preserve">
          <source>Since &lt;code&gt;U&lt;/code&gt; is not deduced, it must be provided as a template argument when calling this function.</source>
          <target state="translated">由于不推导 &lt;code&gt;U&lt;/code&gt; ，因此在调用此函数时必须将U作为模板参数提供。</target>
        </trans-unit>
        <trans-unit id="a4fd9ce185a2267e216b09c9fc53119a294a6f13" translate="yes" xml:space="preserve">
          <source>Since &lt;code&gt;std::size_t&lt;/code&gt; is an unsigned type, an equivalent definition is:</source>
          <target state="translated">由于 &lt;code&gt;std::size_t&lt;/code&gt; 是无符号类型，因此等效定义为：</target>
        </trans-unit>
        <trans-unit id="843699963892a9d8456a647280dafa700ecdc937" translate="yes" xml:space="preserve">
          <source>Since C++11, &lt;code&gt;auto&lt;/code&gt; is no longer a storage class specifier; it is used to indicate type deduction.</source>
          <target state="translated">从C ++ 11开始， &lt;code&gt;auto&lt;/code&gt; 不再是存储类说明符。它用于指示类型推导。</target>
        </trans-unit>
        <trans-unit id="285604ae9a85be58f4823b4cb9df0815028c2dfd" translate="yes" xml:space="preserve">
          <source>Since C++11, value-initializing a class without a user-provided constructor, which has a member of a class type with a user-provided constructor zeroes out the member before calling its constructor:</source>
          <target state="translated">从C++11开始,对一个没有用户提供构造函数的类进行值初始化,而这个类的成员有一个用户提供构造函数的类类型,在调用它的构造函数之前,将这个成员清零。</target>
        </trans-unit>
        <trans-unit id="aabd76632c3d8473aa4688d0b37f3aced9e7b198" translate="yes" xml:space="preserve">
          <source>Since in a call context considers only parameters for which there are explicit call arguments, those function parameter packs, ellipsis parameters, and parameters with default arguments, for which there is no explicit call argument, are ignored:</source>
          <target state="translated">由于在调用上下文中只考虑有显式调用参数的参数,所以那些没有显式调用参数的函数参数包、省略号参数和有缺省参数的参数都会被忽略。</target>
        </trans-unit>
        <trans-unit id="bce6909434e4eba25b5845a8222d3e359b346452" translate="yes" xml:space="preserve">
          <source>Since its representation may by optimized, &lt;code&gt;&lt;a href=&quot;vector&quot;&gt;std::vector&lt;/a&gt;&amp;lt;bool&amp;gt;&lt;/code&gt; does not necessarily meet all &lt;a href=&quot;../named_req/container&quot;&gt;Container&lt;/a&gt; or &lt;a href=&quot;../named_req/sequencecontainer&quot;&gt;SequenceContainer&lt;/a&gt; requirements. For example, because &lt;code&gt;&lt;a href=&quot;vector&quot;&gt;std::vector&lt;/a&gt;&amp;lt;bool&amp;gt;::iterator&lt;/code&gt; is implementation-defined, it may not satisfy the &lt;a href=&quot;../named_req/forwarditerator&quot;&gt;LegacyForwardIterator&lt;/a&gt; requirement. Use of algorithms such as &lt;code&gt;&lt;a href=&quot;../algorithm/search&quot;&gt;std::search&lt;/a&gt;&lt;/code&gt; that require &lt;a href=&quot;../named_req/forwarditerator&quot;&gt;LegacyForwardIterators&lt;/a&gt; may result in &lt;a href=&quot;http://www.boost.org/doc/libs/1_52_0/libs/dynamic_bitset/dynamic_bitset.html#rationale&quot;&gt;either compile-time or run-time errors&lt;/a&gt;.</source>
          <target state="translated">由于可以通过优化其表示形式，因此 &lt;code&gt;&lt;a href=&quot;vector&quot;&gt;std::vector&lt;/a&gt;&amp;lt;bool&amp;gt;&lt;/code&gt; 不一定满足所有&lt;a href=&quot;../named_req/container&quot;&gt;Container&lt;/a&gt;或&lt;a href=&quot;../named_req/sequencecontainer&quot;&gt;SequenceContainer&lt;/a&gt;要求。例如，由于 &lt;code&gt;&lt;a href=&quot;vector&quot;&gt;std::vector&lt;/a&gt;&amp;lt;bool&amp;gt;::iterator&lt;/code&gt; 是实现定义的，因此它可能不满足&lt;a href=&quot;../named_req/forwarditerator&quot;&gt;LegacyForwardIterator的&lt;/a&gt;要求。使用需要&lt;a href=&quot;../named_req/forwarditerator&quot;&gt;LegacyForwardIterators的&lt;/a&gt; &lt;code&gt;&lt;a href=&quot;../algorithm/search&quot;&gt;std::search&lt;/a&gt;&lt;/code&gt; 之类的算法可能会导致&lt;a href=&quot;http://www.boost.org/doc/libs/1_52_0/libs/dynamic_bitset/dynamic_bitset.html#rationale&quot;&gt;编译时错误或运行时错误&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="5148339a5605d2cadb5f2b285d4fe698f6e6fcf6" translate="yes" xml:space="preserve">
          <source>Since its representation may by optimized, &lt;code&gt;&lt;a href=&quot;vector&quot;&gt;std::vector&lt;/a&gt;&amp;lt;bool&amp;gt;&lt;/code&gt; does not necessarily meet all &lt;a href=&quot;../named_req/container&quot;&gt;Container&lt;/a&gt; or &lt;a href=&quot;../named_req/sequencecontainer&quot;&gt;SequenceContainer&lt;/a&gt; requirements. For example, because &lt;code&gt;&lt;a href=&quot;vector&quot;&gt;std::vector&lt;/a&gt;&amp;lt;bool&amp;gt;::iterator&lt;/code&gt; is implementation-defined, it may not satisfy the &lt;a href=&quot;../named_req/forwarditerator&quot;&gt;LegacyForwardIterator&lt;/a&gt; requirement. Use of algorithms such as &lt;code&gt;&lt;a href=&quot;../algorithm/search&quot;&gt;std::search&lt;/a&gt;&lt;/code&gt; that require &lt;a href=&quot;../named_req/forwarditerator&quot;&gt;LegacyForwardIterators&lt;/a&gt; may result in &lt;a href=&quot;https://www.boost.org/doc/libs/1_52_0/libs/dynamic_bitset/dynamic_bitset.html#rationale&quot;&gt;either compile-time or run-time errors&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="59120bf45bf0e3dc09f7ad3363dc1b08094ba734" translate="yes" xml:space="preserve">
          <source>Since language linkage is part of every function type, pointers to functions maintain language linkage as well. Language linkage of function types (which represents calling convention) and language linkage of function names (which represents name mangling) are independent of each other:</source>
          <target state="translated">由于语言链接是每个函数类型的一部分,所以函数的指针也会保持语言链接。函数类型的语言链接(代表调用习惯)和函数名的语言链接(代表名称混杂)是相互独立的。</target>
        </trans-unit>
        <trans-unit id="00aa71d9edfae3bc000e4211aec722c02ac23c61" translate="yes" xml:space="preserve">
          <source>Since many of regex operations are locale-sensitive (when &lt;code&gt;&lt;a href=&quot;syntax_option_type&quot;&gt;std::regex_constants::collate&lt;/a&gt;&lt;/code&gt; flag is set), the regex_traits class typically holds an instance of a &lt;code&gt;&lt;a href=&quot;../locale/locale&quot;&gt;std::locale&lt;/a&gt;&lt;/code&gt; as a private member.</source>
          <target state="translated">由于许多正则表达式操作都对语言环境敏感（设置了 &lt;code&gt;&lt;a href=&quot;syntax_option_type&quot;&gt;std::regex_constants::collate&lt;/a&gt;&lt;/code&gt; 标志时），因此regex_traits类通常将 &lt;code&gt;&lt;a href=&quot;../locale/locale&quot;&gt;std::locale&lt;/a&gt;&lt;/code&gt; 的实例作为私有成员保存。</target>
        </trans-unit>
        <trans-unit id="e1154928a5e14f8714e9865148a4606da277f324" translate="yes" xml:space="preserve">
          <source>Since message has to be a string literal, it cannot contain dynamic information or even a &lt;a href=&quot;constant_expression&quot;&gt;constant expression&lt;/a&gt; that is not a string literal itself. In particular, it cannot contain the &lt;a href=&quot;name&quot;&gt;name&lt;/a&gt; of the &lt;a href=&quot;template_parameters&quot;&gt;template type argument&lt;/a&gt;.</source>
          <target state="translated">由于message必须是字符串文字，因此它不能包含动态信息，甚至不能包含不是字符串文字本身的&lt;a href=&quot;constant_expression&quot;&gt;常量表达式&lt;/a&gt;。特别是，它不能包含&lt;a href=&quot;name&quot;&gt;名称&lt;/a&gt;中的&lt;a href=&quot;template_parameters&quot;&gt;模板类型参数&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="22c8aa4c1624c1e165427ced739188017b6400e5" translate="yes" xml:space="preserve">
          <source>Since ranking of conversion sequences operates with types and value categories only, a &lt;a href=&quot;bit_field&quot;&gt;bit field&lt;/a&gt; can bind to a reference argument for the purpose of ranking, but if that function gets selected, it will be ill-formed.</source>
          <target state="translated">由于转换序列的排名仅适用于类型和值类别，因此&lt;a href=&quot;bit_field&quot;&gt;位字段&lt;/a&gt;可以绑定到参考自变量以进行排名，但是如果选择了该函数，它将格式错误。</target>
        </trans-unit>
        <trans-unit id="4460285e125395b2552b4be6766da2d831503ab6" translate="yes" xml:space="preserve">
          <source>Since reallocation may take place, &lt;code&gt;emplace_back&lt;/code&gt; requires the element type to be &lt;a href=&quot;../../named_req/moveinsertable&quot;&gt;MoveInsertable&lt;/a&gt; for vectors.</source>
          <target state="translated">由于可能发生重新分配，因此 &lt;code&gt;emplace_back&lt;/code&gt; 要求元素类型对于矢量必须为&lt;a href=&quot;../../named_req/moveinsertable&quot;&gt;MoveInsertable&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="e40de4f7be410b2629d9d803e2b1896eb7796159" translate="yes" xml:space="preserve">
          <source>Since the &lt;code&gt;shared_ptr&lt;/code&gt; obtains its deleter (a &lt;code&gt;&lt;a href=&quot;../default_delete&quot;&gt;std::default_delete&lt;/a&gt;&amp;lt;T[]&amp;gt;&lt;/code&gt; object) from the &lt;code&gt;unique_ptr&lt;/code&gt;, the array will be correctly deallocated.</source>
          <target state="translated">由于 &lt;code&gt;shared_ptr&lt;/code&gt; 从 &lt;code&gt;unique_ptr&lt;/code&gt; 获得了其删除器（ &lt;code&gt;&lt;a href=&quot;../default_delete&quot;&gt;std::default_delete&lt;/a&gt;&amp;lt;T[]&amp;gt;&lt;/code&gt; 对象），因此将正确释放数组。</target>
        </trans-unit>
        <trans-unit id="1620299a964087a7c68a2c6947cce22ccf933751" translate="yes" xml:space="preserve">
          <source>Since the introduction of user-defined literals, the code that uses &lt;a href=&quot;http://en.cppreference.com/w/c/types/integer.html&quot;&gt;format macro constants for fixed-width integer types&lt;/a&gt; with no space after the preceding string literal became invalid: &lt;code&gt;&lt;a href=&quot;../io/c/fprintf&quot;&gt;std::printf&lt;/a&gt;(&quot;%&quot;&lt;a href=&quot;../types/integer&quot;&gt;PRId64&lt;/a&gt;&quot;\n&quot;,&lt;a href=&quot;../types/integer&quot;&gt;INT64_MIN&lt;/a&gt;);&lt;/code&gt; has to be replaced by &lt;code&gt;&lt;a href=&quot;../io/c/fprintf&quot;&gt;std::printf&lt;/a&gt;(&quot;%&quot; &lt;a href=&quot;../types/integer&quot;&gt;PRId64&lt;/a&gt;&quot;\n&quot;,&lt;a href=&quot;../types/integer&quot;&gt;INT64_MIN&lt;/a&gt;);&lt;/code&gt;</source>
          <target state="translated">自从引入用户定义的文字以来，使用&lt;a href=&quot;http://en.cppreference.com/w/c/types/integer.html&quot;&gt;格式宏常量的固定宽度整数类型&lt;/a&gt;的代码在前面的字符串文字之后没有空格的代码将变得无效： &lt;code&gt;&lt;a href=&quot;../io/c/fprintf&quot;&gt;std::printf&lt;/a&gt;(&quot;%&quot;&lt;a href=&quot;../types/integer&quot;&gt;PRId64&lt;/a&gt;&quot;\n&quot;,&lt;a href=&quot;../types/integer&quot;&gt;INT64_MIN&lt;/a&gt;);&lt;/code&gt; 必须替换为 &lt;code&gt;&lt;a href=&quot;../io/c/fprintf&quot;&gt;std::printf&lt;/a&gt;(&quot;%&quot; &lt;a href=&quot;../types/integer&quot;&gt;PRId64&lt;/a&gt;&quot;\n&quot;,&lt;a href=&quot;../types/integer&quot;&gt;INT64_MIN&lt;/a&gt;);&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="6605890e57506cfb54ca1476387e076094c45493" translate="yes" xml:space="preserve">
          <source>Since this meaning of the keyword &lt;code&gt;inline&lt;/code&gt; is non-binding, compilers are free to use inline substitution for any function that's not marked inline, and are free to generate function calls to any function marked inline. Those optimization choices do not change the rules regarding multiple definitions and shared statics listed above.</source>
          <target state="translated">由于关键字 &lt;code&gt;inline&lt;/code&gt; 的含义是非绑定的，因此编译器可以自由地对未标记为inline的任何函数使用内联替换，并且可以自由地对标记为inline的任何函数生成函数调用。这些优化选择不会更改上面列出的有关多个定义和共享静态的规则。</target>
        </trans-unit>
        <trans-unit id="dc80190c0d22504d80be6153894b93b31cfb604d" translate="yes" xml:space="preserve">
          <source>Since variant is never permitted to allocate dynamic memory, previous value cannot be retained in these situations.</source>
          <target state="translated">由于变体永远不允许分配动态内存,所以在这些情况下不能保留以前的值。</target>
        </trans-unit>
        <trans-unit id="c45f24beb57e38b698d3ce8c5ae37ca439685549" translate="yes" xml:space="preserve">
          <source>Since virtual members are part of the interface component of pImpl, mocking a pImpl implies mocking the interface component alone. A testable pImpl is typically designed to allow full test coverage through the available interface.</source>
          <target state="translated">由于虚拟成员是pImpl的接口组件的一部分,所以模拟pImpl意味着单独模拟接口组件。一个可测试的pImpl通常被设计成允许通过可用的接口进行全面的测试覆盖。</target>
        </trans-unit>
        <trans-unit id="01023f649513952abe496b73748117186e5a306e" translate="yes" xml:space="preserve">
          <source>Single character is preceded by a space.</source>
          <target state="translated">单个字符前有一个空格。</target>
        </trans-unit>
        <trans-unit id="54f240da1d0f429d9b1906f5ac8b6dd8cc37d07d" translate="yes" xml:space="preserve">
          <source>Single digit is preceded by a space.</source>
          <target state="translated">单个数字前有一个空格。</target>
        </trans-unit>
        <trans-unit id="fef55c5b9eaee331f66eae74df02c2af41eafb71" translate="yes" xml:space="preserve">
          <source>Single-object version, &lt;code&gt;unique_ptr&amp;lt;T&amp;gt;&lt;/code&gt;</source>
          <target state="translated">单对象版本 &lt;code&gt;unique_ptr&amp;lt;T&amp;gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="22d0803f659b9a68120fc2d5a3996d0572f0d784" translate="yes" xml:space="preserve">
          <source>Single-writer/multiple-reader lock can be made with fetch_add. Note that this simplistic implementation is not lockout-free.</source>
          <target state="translated">可以用fetch_add进行单写/多读锁定。注意,这种简单的实现并不是无锁的。</target>
        </trans-unit>
        <trans-unit id="ef575e12952f61f9bac204b82b00f1839b3ca9e3" translate="yes" xml:space="preserve">
          <source>Singular iterators</source>
          <target state="translated">单数迭代器</target>
        </trans-unit>
        <trans-unit id="5b347a3919b8069efdf614137abd1e4d916c644e" translate="yes" xml:space="preserve">
          <source>Six deduction guides are provided for &lt;code&gt;zoned_time&lt;/code&gt;. They normalize &lt;code&gt;Duration&lt;/code&gt; to a minimum resolution of &lt;code&gt;&lt;a href=&quot;../duration&quot;&gt;std::chrono::seconds&lt;/a&gt;&lt;/code&gt;, and provide correct handling for time zone names specified using types convertible to &lt;code&gt;&lt;a href=&quot;../../string/basic_string_view&quot;&gt;std::string_view&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">为 &lt;code&gt;zoned_time&lt;/code&gt; 提供了六个推导指南。它们将 &lt;code&gt;Duration&lt;/code&gt; 标准化为 &lt;code&gt;&lt;a href=&quot;../duration&quot;&gt;std::chrono::seconds&lt;/a&gt;&lt;/code&gt; 的最小分辨率，并提供对使用可转换为 &lt;code&gt;&lt;a href=&quot;../../string/basic_string_view&quot;&gt;std::string_view&lt;/a&gt;&lt;/code&gt; 类型指定的时区名称的正确处理。</target>
        </trans-unit>
        <trans-unit id="381b9cba23adca3666e3c1bed8420bdccab985a9" translate="yes" xml:space="preserve">
          <source>Six global basic_ostream objects are provided by the standard library.</source>
          <target state="translated">标准库提供了六个全局的basic_ostream对象。</target>
        </trans-unit>
        <trans-unit id="b7152342a267362add3c0d7f69f720f7a9c76c9e" translate="yes" xml:space="preserve">
          <source>Size</source>
          <target state="translated">Size</target>
        </trans-unit>
        <trans-unit id="1089a09be10396c011527de780e9b49cb3308d4a" translate="yes" xml:space="preserve">
          <source>Size in bits</source>
          <target state="translated">尺寸(位)</target>
        </trans-unit>
        <trans-unit id="ba8a0e2cd42b491da31e41308e9287bdfe97bf7c" translate="yes" xml:space="preserve">
          <source>Sized deallocation</source>
          <target state="translated">规模化重新分配</target>
        </trans-unit>
        <trans-unit id="a6ceb63258d717a681c569cf041196fa6b5c1c87" translate="yes" xml:space="preserve">
          <source>SizedRange</source>
          <target state="translated">SizedRange</target>
        </trans-unit>
        <trans-unit id="961842b5d2fd3472c9d52acdca1dc7c3ffb770d1" translate="yes" xml:space="preserve">
          <source>SizedSentinel</source>
          <target state="translated">SizedSentinel</target>
        </trans-unit>
        <trans-unit id="32f8bf96a0bd875194723dd6f7b3b0d18f1291fa" translate="yes" xml:space="preserve">
          <source>Sizes may be rounded to an unspecified granularity.</source>
          <target state="translated">尺寸可以四舍五入到一个未指定的粒度。</target>
        </trans-unit>
        <trans-unit id="338622e75d7f5d93bff486ccb15b9f19545a1937" translate="yes" xml:space="preserve">
          <source>Skip directories that would otherwise result in permission denied errors.</source>
          <target state="translated">跳过那些会导致权限拒绝错误的目录。</target>
        </trans-unit>
        <trans-unit id="39ce73047a637a26adee194ba2061f2e02dd69d0" translate="yes" xml:space="preserve">
          <source>Skip subdirectories (default behavior)</source>
          <target state="translated">跳过子目录(默认行为</target>
        </trans-unit>
        <trans-unit id="2460e6fd123cf1efd38917ed660654cd31ec9506" translate="yes" xml:space="preserve">
          <source>Skips &lt;code&gt;count&lt;/code&gt; characters in the get area. This is done by advancing the</source>
          <target state="translated">跳过 &lt;code&gt;count&lt;/code&gt; 获取区域中的字符。这是通过推进</target>
        </trans-unit>
        <trans-unit id="301d79d18fe92372bfd14f52cdb1fb9deb17a4a4" translate="yes" xml:space="preserve">
          <source>Slice/mask/indirect index accesses do not chain: &lt;code&gt;v[v==n][&lt;a href=&quot;slice&quot;&gt;std::slice&lt;/a&gt;(0,5,2)] = x;&lt;/code&gt; is an error because &lt;code&gt;&lt;a href=&quot;mask_array&quot;&gt;std::mask_array&lt;/a&gt;&lt;/code&gt; (the type of &lt;code&gt;v[v==n]&lt;/code&gt;) does not have &lt;code&gt;operator[]&lt;/code&gt;.</source>
          <target state="translated">切片/掩码/间接索引访问不链接： &lt;code&gt;v[v==n][&lt;a href=&quot;slice&quot;&gt;std::slice&lt;/a&gt;(0,5,2)] = x;&lt;/code&gt; 是一个错误，因为 &lt;code&gt;&lt;a href=&quot;mask_array&quot;&gt;std::mask_array&lt;/a&gt;&lt;/code&gt; （ &lt;code&gt;v[v==n]&lt;/code&gt; 的类型）没有 &lt;code&gt;operator[]&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="7449b96680387cef7a35514f8b4cc968d87552e7" translate="yes" xml:space="preserve">
          <source>Small Buffer Optimization</source>
          <target state="translated">小缓冲区优化</target>
        </trans-unit>
        <trans-unit id="2dda9285d4bfd3311fa52a7391e1f10b968de46c" translate="yes" xml:space="preserve">
          <source>Small Object Optimization</source>
          <target state="translated">小对象优化</target>
        </trans-unit>
        <trans-unit id="657c4b92030f950f98c992a4f6c147e40488cb5d" translate="yes" xml:space="preserve">
          <source>Small String Optimization</source>
          <target state="translated">小字符串优化</target>
        </trans-unit>
        <trans-unit id="5280487b4a39af03996e3bd19a8268c63c1877bd" translate="yes" xml:space="preserve">
          <source>Smart pointer non-member operations</source>
          <target state="translated">智能指针非成员操作</target>
        </trans-unit>
        <trans-unit id="bf0fcdc3a447c0f10f6f532765bcc76c84847421" translate="yes" xml:space="preserve">
          <source>Smart pointers</source>
          <target state="translated">聪明的点子</target>
        </trans-unit>
        <trans-unit id="81da943626b80ddf7742b25bead2b748e84981fc" translate="yes" xml:space="preserve">
          <source>Smart pointers (e.g. &lt;code&gt;&lt;a href=&quot;memory/shared_ptr&quot;&gt;std::shared_ptr&lt;/a&gt;&lt;/code&gt;), allocators (e.g. &lt;code&gt;&lt;a href=&quot;memory/allocator&quot;&gt;std::allocator&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;std::memory_resource&lt;/code&gt;), C-style memory management (e.g. &lt;code&gt;&lt;a href=&quot;memory/c/malloc&quot;&gt;std::malloc&lt;/a&gt;&lt;/code&gt;).</source>
          <target state="translated">智能指针（例如 &lt;code&gt;&lt;a href=&quot;memory/shared_ptr&quot;&gt;std::shared_ptr&lt;/a&gt;&lt;/code&gt; ），分配器（例如 &lt;code&gt;&lt;a href=&quot;memory/allocator&quot;&gt;std::allocator&lt;/a&gt;&lt;/code&gt; 或 &lt;code&gt;std::memory_resource&lt;/code&gt; ），C风格的内存管理（例如 &lt;code&gt;&lt;a href=&quot;memory/c/malloc&quot;&gt;std::malloc&lt;/a&gt;&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="5237636d1bbbca8bfd0e9212d068f275af782a07" translate="yes" xml:space="preserve">
          <source>Smart pointers enable automatic, exception-safe, object lifetime management.</source>
          <target state="translated">智能指针实现了自动、异常安全、对象寿命管理。</target>
        </trans-unit>
        <trans-unit id="99d962452bf23cfce358191ab2ce40997d4a7521" translate="yes" xml:space="preserve">
          <source>So that all but the first inclusion of the header in any translation unit are excluded from compilation. All modern compilers record the fact that a header file uses an include guard and do not re-parse the file if it is encountered again, as long as the guard is still defined. (see e.g. &lt;a href=&quot;https://gcc.gnu.org/onlinedocs/cpp/Once-Only-Headers.html&quot;&gt;gcc&lt;/a&gt;).</source>
          <target state="translated">这样，除了头翻译之外的所有翻译单元中的所有内容都不会被编译。所有现代的编译器都记录了这样的事实，即头文件使用包含保护，并且只要仍然定义了保护，就不会再次解析该文件（如果再次遇到该文件）。（参见例如&lt;a href=&quot;https://gcc.gnu.org/onlinedocs/cpp/Once-Only-Headers.html&quot;&gt;gcc&lt;/a&gt;）。</target>
        </trans-unit>
        <trans-unit id="10279063fcdbb5e2692d2226f688d7b65ac2fb32" translate="yes" xml:space="preserve">
          <source>Socket is connected</source>
          <target state="translated">插座连接</target>
        </trans-unit>
        <trans-unit id="a4db4b6c518a0310c7a9175dae07831f11097843" translate="yes" xml:space="preserve">
          <source>Some I/O functions call &lt;code&gt;width(0)&lt;/code&gt; before returning, see &lt;code&gt;&lt;a href=&quot;../manip/setw&quot;&gt;std::setw&lt;/a&gt;&lt;/code&gt; (this results in this field having effect on the next I/O function only, and not on any subsequent I/O).</source>
          <target state="translated">一些I / O函数在返回之前会调用 &lt;code&gt;width(0)&lt;/code&gt; ，请参见 &lt;code&gt;&lt;a href=&quot;../manip/setw&quot;&gt;std::setw&lt;/a&gt;&lt;/code&gt; （这导致该字段仅对下一个I / O函数有效，而对任何后续I / O无效）。</target>
        </trans-unit>
        <trans-unit id="5adbe247c42621c892c4aa15bf359467135fbfb1" translate="yes" xml:space="preserve">
          <source>Some compilers don't implement instantiation units (also known as &lt;a href=&quot;http://docs.oracle.com/cd/E18659_01/html/821-1383/bkagr.html#scrolltoc&quot;&gt;template repositories&lt;/a&gt; or &lt;a href=&quot;http://www-01.ibm.com/support/knowledgecenter/SSXVZZ_12.1.0/com.ibm.xlcpp121.linux.doc/compiler_ref/fcat_template.html?lang=en&quot;&gt;template registries&lt;/a&gt;) and simply compile each template instantiation at Phase 7, storing the code in the object file where it is implicitly or explicitly requested, and then the linker collapses these compiled instantiations into one at Phase 9.</source>
          <target state="translated">一些编译器不实现实例化单元（也称为&lt;a href=&quot;http://docs.oracle.com/cd/E18659_01/html/821-1383/bkagr.html#scrolltoc&quot;&gt;模板存储库&lt;/a&gt;或&lt;a href=&quot;http://www-01.ibm.com/support/knowledgecenter/SSXVZZ_12.1.0/com.ibm.xlcpp121.linux.doc/compiler_ref/fcat_template.html?lang=en&quot;&gt;模板注册表&lt;/a&gt;），而只是在阶段7编译每个模板实例化，将代码存储在隐式或显式请求其的目标文件中，然后链接程序将这些编译器折叠在阶段9实例化为一个。</target>
        </trans-unit>
        <trans-unit id="14ce76ac65287c65e88319fb4aba06495844ed75" translate="yes" xml:space="preserve">
          <source>Some compilers don't implement instantiation units (also known as &lt;a href=&quot;https://docs.oracle.com/cd/E18659_01/html/821-1383/bkagr.html#scrolltoc&quot;&gt;template repositories&lt;/a&gt; or &lt;a href=&quot;https://www-01.ibm.com/support/knowledgecenter/SSXVZZ_12.1.0/com.ibm.xlcpp121.linux.doc/compiler_ref/fcat_template.html?lang=en&quot;&gt;template registries&lt;/a&gt;) and simply compile each template instantiation at Phase 7, storing the code in the object file where it is implicitly or explicitly requested, and then the linker collapses these compiled instantiations into one at Phase 9.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4c54e7b53f7cadf1e6c3559a8ef1472882f98a89" translate="yes" xml:space="preserve">
          <source>Some existing implementations have a bug where they may occasionally return &lt;code&gt;1.0&lt;/code&gt; if &lt;code&gt;RealType&lt;/code&gt; is &lt;code&gt;float&lt;/code&gt;&lt;a href=&quot;https://gcc.gnu.org/bugzilla/show_bug.cgi?id=63176&quot;&gt;GCC #63176&lt;/a&gt;&lt;a href=&quot;http://llvm.org/bugs/show_bug.cgi?id=18767&quot;&gt;LLVM #18767&lt;/a&gt;. This is &lt;a href=&quot;http://open-std.org/JTC1/SC22/WG21/docs/lwg-active.html#2524&quot;&gt;LWG issue 2524 &lt;/a&gt;</source>
          <target state="translated">一些现有的实现存在一个错误，如果 &lt;code&gt;RealType&lt;/code&gt; 是 &lt;code&gt;float&lt;/code&gt; &lt;a href=&quot;https://gcc.gnu.org/bugzilla/show_bug.cgi?id=63176&quot;&gt;GCC＃63176 &lt;/a&gt;&lt;a href=&quot;http://llvm.org/bugs/show_bug.cgi?id=18767&quot;&gt;LLVM＃18767&lt;/a&gt;，它们有时可能会返回 &lt;code&gt;1.0&lt;/code&gt; 。这是&lt;a href=&quot;http://open-std.org/JTC1/SC22/WG21/docs/lwg-active.html#2524&quot;&gt;LWG问题2524&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="300fe6759395b59e23469a2542f0a7be3c5a278b" translate="yes" xml:space="preserve">
          <source>Some existing implementations have a bug where they may occasionally return &lt;code&gt;1.0&lt;/code&gt; if &lt;code&gt;RealType&lt;/code&gt; is &lt;code&gt;float&lt;/code&gt;&lt;a href=&quot;https://gcc.gnu.org/bugzilla/show_bug.cgi?id=63176&quot;&gt;GCC #63176&lt;/a&gt;&lt;a href=&quot;https://llvm.org/bugs/show_bug.cgi?id=18767&quot;&gt;LLVM #18767&lt;/a&gt;. This is &lt;a href=&quot;http://open-std.org/JTC1/SC22/WG21/docs/lwg-active.html#2524&quot;&gt;LWG issue 2524 &lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5ec2aada0af03043ccc865c1099f969a15be807a" translate="yes" xml:space="preserve">
          <source>Some existing implementations have a bug where they may occasionally return b if &lt;code&gt;RealType&lt;/code&gt; is &lt;code&gt;float&lt;/code&gt;&lt;a href=&quot;https://gcc.gnu.org/bugzilla/show_bug.cgi?id=63176&quot;&gt;GCC #63176&lt;/a&gt;&lt;a href=&quot;http://llvm.org/bugs/show_bug.cgi?id=18767&quot;&gt;LLVM #18767&lt;/a&gt;. This is caused by &lt;a href=&quot;http://open-std.org/JTC1/SC22/WG21/docs/lwg-active.html#2524&quot;&gt;LWG issue 2524 &lt;/a&gt;</source>
          <target state="translated">一些现有的实现存在一个错误，如果 &lt;code&gt;RealType&lt;/code&gt; 为 &lt;code&gt;float&lt;/code&gt; &lt;a href=&quot;https://gcc.gnu.org/bugzilla/show_bug.cgi?id=63176&quot;&gt;GCC＃63176 &lt;/a&gt;&lt;a href=&quot;http://llvm.org/bugs/show_bug.cgi?id=18767&quot;&gt;LLVM＃18767&lt;/a&gt;，它们有时可能会返回b 。这是由&lt;a href=&quot;http://open-std.org/JTC1/SC22/WG21/docs/lwg-active.html#2524&quot;&gt;LWG问题2524&lt;/a&gt;引起的</target>
        </trans-unit>
        <trans-unit id="09d1ded25c026c40e02987ac8df04982fc0235a4" translate="yes" xml:space="preserve">
          <source>Some existing implementations have a bug where they may occasionally return b if &lt;code&gt;RealType&lt;/code&gt; is &lt;code&gt;float&lt;/code&gt;&lt;a href=&quot;https://gcc.gnu.org/bugzilla/show_bug.cgi?id=63176&quot;&gt;GCC #63176&lt;/a&gt;&lt;a href=&quot;https://llvm.org/bugs/show_bug.cgi?id=18767&quot;&gt;LLVM #18767&lt;/a&gt;. This is caused by &lt;a href=&quot;http://open-std.org/JTC1/SC22/WG21/docs/lwg-active.html#2524&quot;&gt;LWG issue 2524 &lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8ae96e14b066d0ec8a8395d164b310c7927bac50" translate="yes" xml:space="preserve">
          <source>Some file systems do not support hard links regardless of the operating system: the FAT file system used on memory cards and flash drives, for example.</source>
          <target state="translated">有些文件系统不支持硬链接,不管是什么操作系统:例如,存储卡和闪存驱动器上使用的FAT文件系统。</target>
        </trans-unit>
        <trans-unit id="25651c80339ed821602271ae6cf24d89af5e9ee0" translate="yes" xml:space="preserve">
          <source>Some file systems do not support symbolic links regardless of the operating system, for example the FAT system used on some memory cards and flash drives.</source>
          <target state="translated">有些文件系统不支持符号链接,无论操作系统如何,例如一些存储卡和闪存驱动器上使用的FAT系统。</target>
        </trans-unit>
        <trans-unit id="b5842b00ee9574c370ef65e50ea3aa3f71da0f84" translate="yes" xml:space="preserve">
          <source>Some file systems limit the number of links per file.</source>
          <target state="translated">有些文件系统限制每个文件的链接数量。</target>
        </trans-unit>
        <trans-unit id="3baebc4d02301b876a42c09dafb12fd777d30fb5" translate="yes" xml:space="preserve">
          <source>Some forms of &lt;code&gt;dynamic_cast&lt;/code&gt; rely on &lt;a href=&quot;https://en.wikipedia.org/wiki/Run-time_type_information&quot;&gt;runtime type identification&lt;/a&gt; (RTTI), that is, information about each polymorphic class in the compiled program. Compilers typically have options to disable the inclusion of this information.</source>
          <target state="translated">某些形式的 &lt;code&gt;dynamic_cast&lt;/code&gt; 依赖&lt;a href=&quot;https://en.wikipedia.org/wiki/Run-time_type_information&quot;&gt;运行时类型标识&lt;/a&gt;（RTTI），即有关已编译程序中每个多态类的信息。编译器通常具有禁止包含此信息的选项。</target>
        </trans-unit>
        <trans-unit id="f45f2bc9dd0eef9a815d996c8598d556c1d75b2f" translate="yes" xml:space="preserve">
          <source>Some implementations (such as MSVC, IBM, Oracle) produce a human-readable type name. Others, most notably gcc and clang, return the mangled name. The mangled name can be converted to human-readable form using implementation-specific API such as &lt;a href=&quot;https://gcc.gnu.org/onlinedocs/libstdc%20%20/manual/ext_demangling.html&quot;&gt;abi::__cxa_demangle&lt;/a&gt; directly or through &lt;a href=&quot;http://www.boost.org/doc/libs/release/libs/core/doc/html/core/demangle.html&quot;&gt;boost::core::demangle&lt;/a&gt;. It can also be piped through the commandline utility &lt;code&gt;c++filt -t&lt;/code&gt;.</source>
          <target state="translated">一些实现（例如MSVC，IBM，Oracle）会产生易于理解的类型名称。其他（最著名的是gcc和clang）返回错误的名称。可以使用特定于实现的API（例如&lt;a href=&quot;https://gcc.gnu.org/onlinedocs/libstdc%20%20/manual/ext_demangling.html&quot;&gt;abi :: __ cxa_demangle&lt;/a&gt;直接或通过&lt;a href=&quot;http://www.boost.org/doc/libs/release/libs/core/doc/html/core/demangle.html&quot;&gt;boost :: core :: demangle）&lt;/a&gt;将整齐的名称转换为人类可读的形式。也可以通过命令行实用程序传递它 &lt;code&gt;c++filt -t&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="67cb9e8d9be1e7475a979adc86692320d39af69a" translate="yes" xml:space="preserve">
          <source>Some implementations (such as MSVC, IBM, Oracle) produce a human-readable type name. Others, most notably gcc and clang, return the mangled name. The mangled name can be converted to human-readable form using implementation-specific API such as &lt;a href=&quot;https://gcc.gnu.org/onlinedocs/libstdc%20%20/manual/ext_demangling.html&quot;&gt;abi::__cxa_demangle&lt;/a&gt; directly or through &lt;a href=&quot;https://www.boost.org/doc/libs/release/libs/core/doc/html/core/demangle.html&quot;&gt;boost::core::demangle&lt;/a&gt;. It can also be piped through the commandline utility &lt;code&gt;c++filt -t&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6e9f769d3f52ad14152cedf0345bfc21cff89b9b" translate="yes" xml:space="preserve">
          <source>Some implementations also throw &lt;code&gt;&lt;a href=&quot;../../error/length_error/length_error&quot;&gt;std::length_error&lt;/a&gt;&lt;/code&gt; when &lt;code&gt;push_back&lt;/code&gt; causes a reallocation that would exceed &lt;code&gt;&lt;a href=&quot;max_size&quot;&gt;max_size&lt;/a&gt;&lt;/code&gt;, due to implicitly calling an equivalent of &lt;code&gt;reserve(size()+1)&lt;/code&gt;.</source>
          <target state="translated">当由于隐式调用等效的 &lt;code&gt;reserve(size()+1)&lt;/code&gt; 导致 &lt;code&gt;push_back&lt;/code&gt; 导致重新分配超过 &lt;code&gt;&lt;a href=&quot;max_size&quot;&gt;max_size&lt;/a&gt;&lt;/code&gt; 时，某些实现还会引发 &lt;code&gt;&lt;a href=&quot;../../error/length_error/length_error&quot;&gt;std::length_error&lt;/a&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="1211a18140d5c923fb6d564901b0cd227d7c8de1" translate="yes" xml:space="preserve">
          <source>Some implementations are able to delete any facet, including the locale-specific facets with protected destructors. Other implementations require the facet to have a public destructor, similar to the the locale-independent facets from &lt;code&gt;&amp;lt;codecvt&amp;gt;&lt;/code&gt;.</source>
          <target state="translated">一些实现能够删除任何构面，包括具有受保护的析构函数的特定于语言环境的构面。其他实现要求该方面具有公共析构函数，类似于 &lt;code&gt;&amp;lt;codecvt&amp;gt;&lt;/code&gt; 中与语言环境无关的方面。</target>
        </trans-unit>
        <trans-unit id="23bf9c695f08640c97ac98dea8399ad1f810bbb1" translate="yes" xml:space="preserve">
          <source>Some implementations are able to delete any facet, including the locale-specific facets with protected destructors. Other implementations require the facet to have a public destructor, similar to the the locale-independent facets from &lt;code&gt;&amp;lt;codecvt&amp;gt;&lt;/code&gt;. This is &lt;a href=&quot;http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-closed.html#721&quot;&gt;LWG issue 721&lt;/a&gt;.</source>
          <target state="translated">一些实现能够删除任何构面，包括具有受保护的析构函数的特定于语言环境的构面。其他实现要求该方面具有公共析构函数，类似于 &lt;code&gt;&amp;lt;codecvt&amp;gt;&lt;/code&gt; 中与语言环境无关的方面。这是&lt;a href=&quot;http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-closed.html#721&quot;&gt; LWG问题721&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="ba520fb2c503cdc25ec5b9b6f3a0f079c16b72d8" translate="yes" xml:space="preserve">
          <source>Some implementations handle &lt;code&gt;timeptr-&amp;gt;tm_mday==0&lt;/code&gt; as meaning the last day of the preceding month.</source>
          <target state="translated">一些实现将 &lt;code&gt;timeptr-&amp;gt;tm_mday==0&lt;/code&gt; 视为上个月的最后一天。</target>
        </trans-unit>
        <trans-unit id="6438dffce87e65a616bf990b409e64a0fe8a0484" translate="yes" xml:space="preserve">
          <source>Some implementations may occasionally return infinity if &lt;code&gt;RealType&lt;/code&gt; is &lt;code&gt;float&lt;/code&gt;. This is &lt;a href=&quot;http://open-std.org/JTC1/SC22/WG21/docs/lwg-active.html#2524&quot;&gt;LWG issue 2524&lt;/a&gt;.</source>
          <target state="translated">如果 &lt;code&gt;RealType&lt;/code&gt; 为 &lt;code&gt;float&lt;/code&gt; ,则某些实现有时可能会返回无穷大。这是&lt;a href=&quot;http://open-std.org/JTC1/SC22/WG21/docs/lwg-active.html#2524&quot;&gt;LWG问题2524&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="69d9a9a13766d236996c1d2bb4d126a13661dd61" translate="yes" xml:space="preserve">
          <source>Some locales offer additional character classes that detect non-ASCII digits.</source>
          <target state="translated">一些地区提供了额外的字符类,可以检测非ASCII数字。</target>
        </trans-unit>
        <trans-unit id="d2984dbcf7994a8b794a77e7494406d337036fa6" translate="yes" xml:space="preserve">
          <source>Some member functions are</source>
          <target state="translated">一些成员功能是</target>
        </trans-unit>
        <trans-unit id="a7d6cdd50583dc42bfdb814089c96c038db55e75" translate="yes" xml:space="preserve">
          <source>Some member functions are special: under certain circumstances they are defined by the compiler even if not defined by the user. They are:</source>
          <target state="translated">有些成员函数是特殊的:在某些情况下,即使用户没有定义,编译器也会定义它们。这些函数是:</target>
        </trans-unit>
        <trans-unit id="837173a7f0c46c404633f2871fb260cf5e1fc724" translate="yes" xml:space="preserve">
          <source>Some non-standard libraries define a type trait &quot;BitwiseMovable&quot; or &quot;Relocatable&quot;, which describes a type that doesn't have:</source>
          <target state="translated">一些非标准库定义了一个类型特征 &quot;BitwiseMovable &quot;或 &quot;Relocatable&quot;,它描述了一个没有的类型。</target>
        </trans-unit>
        <trans-unit id="be708867f7f47ff2e9f45f6a8f29ccfdd0cce8fd" translate="yes" xml:space="preserve">
          <source>Some of the &lt;a href=&quot;../io&quot;&gt;I/O streams member functions&lt;/a&gt; return and manipulate objects of member typedef &lt;code&gt;pos_type&lt;/code&gt;. For streams, these member typedefs are provided by the template parameter &lt;code&gt;Traits&lt;/code&gt;, which defaults to &lt;code&gt;&lt;a href=&quot;../string/char_traits&quot;&gt;std::char_traits&lt;/a&gt;&lt;/code&gt;, which define their &lt;code&gt;pos_type&lt;/code&gt;s to be specializations of &lt;code&gt;std::fpos&lt;/code&gt;. The behavior of the I/O streams library is implementation-defined when &lt;code&gt;Traits::pos_type&lt;/code&gt; is not &lt;code&gt;std::fpos&amp;lt;&lt;a href=&quot;../string/multibyte/mbstate_t&quot;&gt;std::mbstate_t&lt;/a&gt;&amp;gt;&lt;/code&gt; (aka &lt;code&gt;std::streampos&lt;/code&gt; or &lt;code&gt;std::wstreampos&lt;/code&gt;).</source>
          <target state="translated">一些&lt;a href=&quot;../io&quot;&gt;I / O流成员函数&lt;/a&gt;返回并操纵成员typedef &lt;code&gt;pos_type&lt;/code&gt; 的对象。对于流，这些成员typedef由模板参数 &lt;code&gt;Traits&lt;/code&gt; 提供，该参数默认为 &lt;code&gt;&lt;a href=&quot;../string/char_traits&quot;&gt;std::char_traits&lt;/a&gt;&lt;/code&gt; ，该参数将其 &lt;code&gt;pos_type&lt;/code&gt; 定义为 &lt;code&gt;std::fpos&lt;/code&gt; 。当 &lt;code&gt;Traits::pos_type&lt;/code&gt; 不是 &lt;code&gt;std::fpos&amp;lt;&lt;a href=&quot;../string/multibyte/mbstate_t&quot;&gt;std::mbstate_t&lt;/a&gt;&amp;gt;&lt;/code&gt; （aka &lt;code&gt;std::streampos&lt;/code&gt; 或 &lt;code&gt;std::wstreampos&lt;/code&gt; ）时，I / O流库的行为由实现定义。</target>
        </trans-unit>
        <trans-unit id="42f4721337bfcd1c4414747ff2568f867f2077d7" translate="yes" xml:space="preserve">
          <source>Some of the operators have &lt;a href=&quot;operator_alternative&quot;&gt;alternate spellings&lt;/a&gt; (e.g., &lt;code&gt;and&lt;/code&gt; for &lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt;, &lt;code&gt;or&lt;/code&gt; for &lt;code&gt;||&lt;/code&gt;, &lt;code&gt;not&lt;/code&gt; for &lt;code&gt;!&lt;/code&gt;, etc.).</source>
          <target state="translated">部分经营者有&lt;a href=&quot;operator_alternative&quot;&gt;替代拼写&lt;/a&gt;（例如， &lt;code&gt;and&lt;/code&gt; 为 &lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt; ， &lt;code&gt;or&lt;/code&gt; 为 &lt;code&gt;||&lt;/code&gt; ， &lt;code&gt;not&lt;/code&gt; 为 &lt;code&gt;!&lt;/code&gt; 等）。</target>
        </trans-unit>
        <trans-unit id="765e9b729b33e7053ac6c10ee70ba3f6b6995835" translate="yes" xml:space="preserve">
          <source>Some of the standard-required facets, such as the UTF-8/UTF-32 conversion facet &lt;code&gt;&lt;a href=&quot;../codecvt&quot;&gt;std::codecvt&lt;/a&gt;&amp;lt;char32_t, char, &lt;a href=&quot;../../string/multibyte/mbstate_t&quot;&gt;std::mbstate_t&lt;/a&gt;&amp;gt;&lt;/code&gt;, have no equivalents in the &quot;C&quot; locale, but they are nevertheless present in the locale returned by &lt;code&gt;std::locale::classic()&lt;/code&gt;, as in any other locale constructed in a C++ program.</source>
          <target state="translated">一些标准要求的方面，例如UTF-8 / UTF-32转换方面 &lt;code&gt;&lt;a href=&quot;../codecvt&quot;&gt;std::codecvt&lt;/a&gt;&amp;lt;char32_t, char, &lt;a href=&quot;../../string/multibyte/mbstate_t&quot;&gt;std::mbstate_t&lt;/a&gt;&amp;gt;&lt;/code&gt; ，在&amp;ldquo; C&amp;rdquo;语言环境中没有等效项，但是它们仍然存在在由 &lt;code&gt;std::locale::classic()&lt;/code&gt; 返回的语言环境中，就像在C ++程序中构造的任何其他语言环境中一样。</target>
        </trans-unit>
        <trans-unit id="caa174c46ca2ec6d14f7d14a1986d4b238a9d0ec" translate="yes" xml:space="preserve">
          <source>Some of these requirements are being formalized in C++20 using the &lt;a href=&quot;language/constraints&quot;&gt;concepts&lt;/a&gt; language feature. Until then, the burden is on the programmer to ensure that library templates are instantiated with template arguments that satisfy these requirements. Failure to do so may result in very complex compiler diagnostics.</source>
          <target state="translated">其中一些要求已使用C ++ 20的&lt;a href=&quot;language/constraints&quot;&gt;概念&lt;/a&gt;进行形式化语言功能。在此之前，程序员要负担确保用满足这些要求的模板参数实例化库模板。否则可能会导致编译器诊断非常复杂。</target>
        </trans-unit>
        <trans-unit id="dfcefe079222e4c23d3487cf53ffb814bc175ca7" translate="yes" xml:space="preserve">
          <source>Some operating systems do not support hard links at all or support them only for regular files.</source>
          <target state="translated">有些操作系统根本不支持硬链接,或者只支持普通文件的硬链接。</target>
        </trans-unit>
        <trans-unit id="cd02034e447f5be2058fe371e17584fad666449c" translate="yes" xml:space="preserve">
          <source>Some operating systems do not support symbolic links at all or support them only for regular files.</source>
          <target state="translated">有些操作系统根本不支持符号链接,或者只支持普通文件的符号链接。</target>
        </trans-unit>
        <trans-unit id="a6d76a7395176458beb737711e50d3138c198101" translate="yes" xml:space="preserve">
          <source>Some operating systems require symlink creation to identify that the link is to a directory. Portable code should use (2) to create directory symlinks rather than (1), even though there is no distinction on POSIX systems.</source>
          <target state="translated">有些操作系统需要创建符号链接来识别链接是指向一个目录的。可移植的代码应该使用(2)而不是(1)来创建目录符号链接,尽管在POSIX系统上没有区别。</target>
        </trans-unit>
        <trans-unit id="fb8327d50eb27e2d33c783ff01dfd4bd720a5528" translate="yes" xml:space="preserve">
          <source>Some operations on floating-point numbers are affected by and modify the state of &lt;a href=&quot;../numeric/fenv&quot;&gt;the floating-point environment&lt;/a&gt; (most notably, the rounding direction).</source>
          <target state="translated">浮点数上的某些操作会受到&lt;a href=&quot;../numeric/fenv&quot;&gt;浮点环境&lt;/a&gt;的状态的影响并对其进行修改（最显着的是舍入方向）。</target>
        </trans-unit>
        <trans-unit id="b438936ace997fb03408714f0cc8c0d6e4e62b22" translate="yes" xml:space="preserve">
          <source>Some permission bits may be ignored on some systems, and changing some bits may automatically change others (e.g. on platforms without owner/group/all distinction, setting any of the three write bits set all three).</source>
          <target state="translated">某些权限位在某些系统上可能会被忽略,改变某些位可能会自动改变其他位(例如在没有所有者/组/所有区分的平台上,设置三个写位中的任何一个都会设置这三个位)。</target>
        </trans-unit>
        <trans-unit id="5fc481c89819102012a9d0f89914c46dff389023" translate="yes" xml:space="preserve">
          <source>Some range adaptors wrap their element or function object with the &lt;a href=&quot;ranges/semiregular_wrapper&quot;&gt;semiregular wrapper&lt;/a&gt;.</source>
          <target state="translated">一些范围适配器使用&lt;a href=&quot;ranges/semiregular_wrapper&quot;&gt;半规则包装&lt;/a&gt;器包装其元素或函数对象。</target>
        </trans-unit>
        <trans-unit id="f7ab779158c707137836b8aca6e4154cf5a7a3c2" translate="yes" xml:space="preserve">
          <source>Some requirements are optional: the template &lt;code&gt;&lt;a href=&quot;../memory/allocator_traits&quot;&gt;std::allocator_traits&lt;/a&gt;&lt;/code&gt; supplies the default implementations for all optional requirements, and all standard library containers and other allocator-aware classes access the allocator through &lt;code&gt;std::allocator_traits&lt;/code&gt;, not directly.</source>
          <target state="translated">一些要求是可选的：模板 &lt;code&gt;&lt;a href=&quot;../memory/allocator_traits&quot;&gt;std::allocator_traits&lt;/a&gt;&lt;/code&gt; 提供所有可选要求的默认实现，并且所有标准库容器和其他支持分配器的类都通过 &lt;code&gt;std::allocator_traits&lt;/code&gt; 访问分配器，而不是直接访问分配器。</target>
        </trans-unit>
        <trans-unit id="1edcbd0864e00de6bc3ed666e900623b2628f887" translate="yes" xml:space="preserve">
          <source>Some return types of functions of &lt;a href=&quot;../header/functional&quot;&gt;&lt;code&gt;&amp;lt;functional&amp;gt;&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;../header/functional&quot;&gt; &lt;code&gt;&amp;lt;functional&amp;gt;&lt;/code&gt; 的&lt;/a&gt;某些函数返回类型</target>
        </trans-unit>
        <trans-unit id="17e1b6b6fdfa075b5d4bcbe52a9b4bcc63b8b045" translate="yes" xml:space="preserve">
          <source>Some standard library function object adaptors, such as &lt;code&gt;&lt;a href=&quot;not1&quot;&gt;std::not1&lt;/a&gt;&lt;/code&gt;, require the function objects they adapt to have certain types defined; &lt;code&gt;&lt;a href=&quot;not1&quot;&gt;std::not1&lt;/a&gt;&lt;/code&gt; requires the function object being adapted to have a type named &lt;code&gt;argument_type&lt;/code&gt;. Deriving function objects that take one argument from &lt;code&gt;unary_function&lt;/code&gt; is an easy way to make them compatible with those adaptors.</source>
          <target state="translated">一些标准的库函数对象适配器，例如 &lt;code&gt;&lt;a href=&quot;not1&quot;&gt;std::not1&lt;/a&gt;&lt;/code&gt; ，要求它们适应的函数对象具有定义的某些类型。 &lt;code&gt;&lt;a href=&quot;not1&quot;&gt;std::not1&lt;/a&gt;&lt;/code&gt; 要求将函数对象修改为具有名为 &lt;code&gt;argument_type&lt;/code&gt; 的类型。从 &lt;code&gt;unary_function&lt;/code&gt; 派生带有一个参数的函数对象是使它们与那些适配器兼容的简单方法。</target>
        </trans-unit>
        <trans-unit id="09b957f5dade6785ca0c00036e5b0d560f353891" translate="yes" xml:space="preserve">
          <source>Some standard library function object adaptors, such as &lt;code&gt;&lt;a href=&quot;not2&quot;&gt;std::not2&lt;/a&gt;&lt;/code&gt;, require the function objects they adapt to have certain types defined; &lt;code&gt;&lt;a href=&quot;not2&quot;&gt;std::not2&lt;/a&gt;&lt;/code&gt; requires the function object being adapted to have two types named &lt;code&gt;first_argument_type&lt;/code&gt; and &lt;code&gt;second_argument_type&lt;/code&gt;. Deriving function objects that take two arguments from &lt;code&gt;binary_function&lt;/code&gt; is an easy way to make them compatible with those adaptors.</source>
          <target state="translated">一些标准的库函数对象适配器，例如 &lt;code&gt;&lt;a href=&quot;not2&quot;&gt;std::not2&lt;/a&gt;&lt;/code&gt; ，要求它们适应的函数对象具有定义的某些类型。 &lt;code&gt;&lt;a href=&quot;not2&quot;&gt;std::not2&lt;/a&gt;&lt;/code&gt; 要求将函数对象修改为具有两种类型，分别名为 &lt;code&gt;first_argument_type&lt;/code&gt; 和 &lt;code&gt;second_argument_type&lt;/code&gt; 。从 &lt;code&gt;binary_function&lt;/code&gt; 派生带有两个参数的函数对象是使它们与那些适配器兼容的简单方法。</target>
        </trans-unit>
        <trans-unit id="7f250b829207ebe1245ad903482a0b2738133c9e" translate="yes" xml:space="preserve">
          <source>Sometimes it's safe to throw an exception even while &lt;code&gt;std::uncaught_exception() == true&lt;/code&gt;. For example, if &lt;a href=&quot;../../language/throw#Stack_unwinding&quot;&gt;stack unwinding&lt;/a&gt; causes an object to be destructed, the destructor for that object could run code that throws an exception as long as the exception is caught by some catch block before escaping the destructor.</source>
          <target state="translated">有时即使在 &lt;code&gt;std::uncaught_exception() == true&lt;/code&gt; 也可以引发异常。例如，如果&lt;a href=&quot;../../language/throw#Stack_unwinding&quot;&gt;堆栈展开&lt;/a&gt;导致对象被破坏，则该对象的析构函数可以运行引发异常的代码，只要该异常在转义析构函数之前被某些catch块捕获即可。</target>
        </trans-unit>
        <trans-unit id="11110b24bcb6cedda127c754fb50036327560b2e" translate="yes" xml:space="preserve">
          <source>Sortable</source>
          <target state="translated">Sortable</target>
        </trans-unit>
        <trans-unit id="13696f439559b7aa831e1895b1974678571e434f" translate="yes" xml:space="preserve">
          <source>Sorting operations</source>
          <target state="translated">分拣操作</target>
        </trans-unit>
        <trans-unit id="4e278b12f4f35189855f7d8b8761299f2cee21cb" translate="yes" xml:space="preserve">
          <source>Sorts some of the elements in the range &lt;code&gt;[first, last)&lt;/code&gt; in ascending order, storing the result in the range &lt;code&gt;[d_first, d_last)&lt;/code&gt;.</source>
          <target state="translated">以升序对 &lt;code&gt;[first, last)&lt;/code&gt; 范围内的某些元素进行排序，并将结果存储在 &lt;code&gt;[d_first, d_last)&lt;/code&gt; 范围内。</target>
        </trans-unit>
        <trans-unit id="ec2affa5e1e0bfa4da3bd5957467157ce4eec8f9" translate="yes" xml:space="preserve">
          <source>Sorts the elements in ascending order. The order of equal elements is preserved. The first version uses &lt;code&gt;operator&amp;lt;&lt;/code&gt; to compare the elements, the second version uses the given comparison function &lt;code&gt;comp&lt;/code&gt;.</source>
          <target state="translated">按升序对元素进行排序。相等元素的顺序被保留。第一个版本使用 &lt;code&gt;operator&amp;lt;&lt;/code&gt; 来比较元素，第二个版本使用给定的比较函数 &lt;code&gt;comp&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="f9ee61d95eb7ca033304a6c28affa88aea2875d6" translate="yes" xml:space="preserve">
          <source>Sorts the elements in the range &lt;code&gt;[first, last)&lt;/code&gt; in ascending order. The order of equal elements is not guaranteed to be preserved.</source>
          <target state="translated">按升序对 &lt;code&gt;[first, last)&lt;/code&gt; 范围内的元素进行排序。相等元素的顺序不能保证得到保留。</target>
        </trans-unit>
        <trans-unit id="f7fd2050346980b84ef2af829697dc3f0ed185be" translate="yes" xml:space="preserve">
          <source>Sorts the elements in the range &lt;code&gt;[first, last)&lt;/code&gt; in ascending order. The order of equivalent elements is guaranteed to be preserved.</source>
          <target state="translated">按升序对 &lt;code&gt;[first, last)&lt;/code&gt; 范围内的元素进行排序。保证等效元素的顺序得以保留。</target>
        </trans-unit>
        <trans-unit id="da63b0d03cf0983af48537a59297f919f164f1bd" translate="yes" xml:space="preserve">
          <source>Sorts the given array pointed to by &lt;code&gt;ptr&lt;/code&gt; in ascending order. The array contains &lt;code&gt;count&lt;/code&gt; elements of &lt;code&gt;size&lt;/code&gt; bytes. Function pointed to by &lt;code&gt;comp&lt;/code&gt; is used for object comparison.</source>
          <target state="translated">按 &lt;code&gt;ptr&lt;/code&gt; 指向的给定数组按升序排序。该数组包含 &lt;code&gt;size&lt;/code&gt; 字节的 &lt;code&gt;count&lt;/code&gt; 元素。 &lt;code&gt;comp&lt;/code&gt; 指向的函数用于对象比较。</target>
        </trans-unit>
        <trans-unit id="1062d4ec3477261e4a029a283ebcf5e673c0c76e" translate="yes" xml:space="preserve">
          <source>Source file inclusion</source>
          <target state="translated">源文件收录</target>
        </trans-unit>
        <trans-unit id="737413ce7a08697aa3d4382b04c67b58abda52ab" translate="yes" xml:space="preserve">
          <source>Space overhead: pImpl adds one pointer to the public component and, if any private member needs access to a public member, another pointer is either added to the implementation component or passed as a parameter for each call to the private member that requires it. If stateful custom allocators are supported, the allocator instance also has to be stored.</source>
          <target state="translated">空间开销:pImpl向公有组件添加一个指针,如果任何私有成员需要访问公有成员,则另一个指针要么添加到实现组件中,要么作为每次调用需要私有成员的参数传递。如果支持有状态的自定义分配器,还必须存储分配器实例。</target>
        </trans-unit>
        <trans-unit id="e0d61499cc942eb1278687007fde841d4bb2b516" translate="yes" xml:space="preserve">
          <source>Special categories</source>
          <target state="translated">特殊类别</target>
        </trans-unit>
        <trans-unit id="9ff426b0abd95de6e45376aa10b2853795200f0f" translate="yes" xml:space="preserve">
          <source>Special mathematical functions</source>
          <target state="translated">特殊数学函数</target>
        </trans-unit>
        <trans-unit id="827e6674de363a70897b99e51fffefdb810a4c6e" translate="yes" xml:space="preserve">
          <source>Special member functions</source>
          <target state="translated">特别成员职能</target>
        </trans-unit>
        <trans-unit id="471ddcb69cf1017797006b55d79f5f809498401a" translate="yes" xml:space="preserve">
          <source>Special member functions along with the &lt;a href=&quot;default_comparisons&quot;&gt;comparison operators&lt;/a&gt;(since C++20) are the only functions that can be</source>
          <target state="translated">特殊成员函数以及&lt;a href=&quot;default_comparisons&quot;&gt;比较运算符&lt;/a&gt;（自C ++ 20起）是唯一可以</target>
        </trans-unit>
        <trans-unit id="288289b7c043a255232197a83ad1c7f6a2f423f4" translate="yes" xml:space="preserve">
          <source>Special operators</source>
          <target state="translated">特殊运营商</target>
        </trans-unit>
        <trans-unit id="33035fa15c251880c6ca4666e10791e819d68abe" translate="yes" xml:space="preserve">
          <source>Special rules for &quot;C&quot; linkage</source>
          <target state="translated">&quot;C &quot;型连接的特殊规则</target>
        </trans-unit>
        <trans-unit id="eedd5b116274ae72545327b12c1f13a7daad71f8" translate="yes" xml:space="preserve">
          <source>Special rvalue category, see pending member function call.</source>
          <target state="translated">特殊r值类,见待定成员函数调用。</target>
        </trans-unit>
        <trans-unit id="b0f090c0f44aceac36d2c9eb988dd8280d3ee8e3" translate="yes" xml:space="preserve">
          <source>Specialization</source>
          <target state="translated">Specialization</target>
        </trans-unit>
        <trans-unit id="257368682d0c8829b4ef3064212d06ea74f41e65" translate="yes" xml:space="preserve">
          <source>Specialization &lt;code&gt;&lt;a href=&quot;../container/vector&quot;&gt;std::vector&lt;/a&gt;&amp;lt;bool&amp;gt;&lt;/code&gt;</source>
          <target state="translated">专业化 &lt;code&gt;&lt;a href=&quot;../container/vector&quot;&gt;std::vector&lt;/a&gt;&amp;lt;bool&amp;gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="e647f7352410c64aa331edaf62ef052333f79c68" translate="yes" xml:space="preserve">
          <source>Specialization &lt;code&gt;&lt;a href=&quot;../types/numeric_limits&quot;&gt;std::numeric_limits&lt;/a&gt;&amp;lt;bool&amp;gt;&lt;/code&gt;</source>
          <target state="translated">专业化 &lt;code&gt;&lt;a href=&quot;../types/numeric_limits&quot;&gt;std::numeric_limits&lt;/a&gt;&amp;lt;bool&amp;gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="7b0ccfc71697ff533aa930f7710e55cb2073cb26" translate="yes" xml:space="preserve">
          <source>Specialization must be declared before the first use that would cause implicit instantiation, in every translation unit where such use occurs:</source>
          <target state="translated">专门化必须在会导致隐式实例化的第一次使用之前声明,在每个发生这种使用的翻译单元中。</target>
        </trans-unit>
        <trans-unit id="e6e6a1cdf4edea6046f6580c6738f01dd9e2eb68" translate="yes" xml:space="preserve">
          <source>Specializations</source>
          <target state="translated">Specializations</target>
        </trans-unit>
        <trans-unit id="667dbdfed67d185499ee8e7b7611aa3094f35afa" translate="yes" xml:space="preserve">
          <source>Specializations for floating-point types</source>
          <target state="translated">浮点类型的专业化</target>
        </trans-unit>
        <trans-unit id="1e564affdb1d23ebeeab32e35cfcdb3ef5d27755" translate="yes" xml:space="preserve">
          <source>Specializations for integral types</source>
          <target state="translated">整型的专业性</target>
        </trans-unit>
        <trans-unit id="81d786495f28b64fb15d8f1b253ae6a120395aae" translate="yes" xml:space="preserve">
          <source>Specializations of &lt;code&gt;&lt;a href=&quot;../atomic/atomic&quot;&gt;std::atomic&lt;/a&gt;&lt;/code&gt; for floating point types</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../atomic/atomic&quot;&gt;std::atomic&lt;/a&gt;&lt;/code&gt; 专业化浮点类型</target>
        </trans-unit>
        <trans-unit id="52623e5481935e9f4fe12a1d8fde12df3283eaeb" translate="yes" xml:space="preserve">
          <source>Specializations of &lt;code&gt;&lt;a href=&quot;../atomic/atomic&quot;&gt;std::atomic&lt;/a&gt;&lt;/code&gt; for integral types</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../atomic/atomic&quot;&gt;std::atomic&lt;/a&gt;&lt;/code&gt; 整数类型的专业化</target>
        </trans-unit>
        <trans-unit id="b0cad4dac395f6b45cc7974188363bedca342e95" translate="yes" xml:space="preserve">
          <source>Specializations of &lt;code&gt;&lt;a href=&quot;../atomic/atomic&quot;&gt;std::atomic&lt;/a&gt;&lt;/code&gt; for pointer types</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../atomic/atomic&quot;&gt;std::atomic&lt;/a&gt;&lt;/code&gt; 的指针类型专长</target>
        </trans-unit>
        <trans-unit id="377f7d31027e1bb1b02cf7940a0a9917ef71c589" translate="yes" xml:space="preserve">
          <source>Specializations of &lt;code&gt;&lt;a href=&quot;../hash&quot;&gt;std::hash&lt;/a&gt;&lt;/code&gt; should define an &lt;code&gt;operator()&lt;/code&gt; that:</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../hash&quot;&gt;std::hash&lt;/a&gt;&lt;/code&gt; 专业化应该定义一个 &lt;code&gt;operator()&lt;/code&gt; ：</target>
        </trans-unit>
        <trans-unit id="36c0df18df7950df4493024cd46642126fc345b1" translate="yes" xml:space="preserve">
          <source>Specializations of &lt;code&gt;&lt;a href=&quot;numeric_limits&quot;&gt;std::numeric_limits&lt;/a&gt;&lt;/code&gt; are provided for all arithmetic types.</source>
          <target state="translated">为所有算术类型提供了 &lt;code&gt;&lt;a href=&quot;numeric_limits&quot;&gt;std::numeric_limits&lt;/a&gt;&lt;/code&gt; 专业化。</target>
        </trans-unit>
        <trans-unit id="dbea40d88457b94b63f4441c672d628c0bd77376" translate="yes" xml:space="preserve">
          <source>Specializations of &lt;code&gt;std::atomic_ref&lt;/code&gt; for floating-point types</source>
          <target state="translated">&lt;code&gt;std::atomic_ref&lt;/code&gt; 专业化，用于浮点类型</target>
        </trans-unit>
        <trans-unit id="f9a3fe8a7a8d6f63e8edd13971f4a8b970846637" translate="yes" xml:space="preserve">
          <source>Specializations of &lt;code&gt;std::atomic_ref&lt;/code&gt; for integral types</source>
          <target state="translated">&lt;code&gt;std::atomic_ref&lt;/code&gt; 对整数类型的专业化</target>
        </trans-unit>
        <trans-unit id="ea1a6c692ae02c74631a5647ff24a474c733394a" translate="yes" xml:space="preserve">
          <source>Specializations of &lt;code&gt;std::atomic_ref&lt;/code&gt; for pointer types</source>
          <target state="translated">&lt;code&gt;std::atomic_ref&lt;/code&gt; 的指针类型专业化</target>
        </trans-unit>
        <trans-unit id="10c93d4df33d89a3d3b9956b10ec16964e8e76ff" translate="yes" xml:space="preserve">
          <source>Specializations of function templates that use return type deduction must use the same return type placeholders.</source>
          <target state="translated">使用返回类型演绎的函数模板的特殊化必须使用相同的返回类型占位符。</target>
        </trans-unit>
        <trans-unit id="6fc6d385e979957bd666e908f38acd5a72c6379a" translate="yes" xml:space="preserve">
          <source>Specializations of the class template &lt;code&gt;std::fpos&lt;/code&gt; identify absolute positions in a stream or in a file. Each object of type &lt;code&gt;fpos&lt;/code&gt; holds the byte position in the stream (typically as a private member of type &lt;code&gt;&lt;a href=&quot;streamoff&quot;&gt;std::streamoff&lt;/a&gt;&lt;/code&gt;) and the current shift state, a value of type &lt;code&gt;State&lt;/code&gt; (typically &lt;code&gt;&lt;a href=&quot;../string/multibyte/mbstate_t&quot;&gt;std::mbstate_t&lt;/a&gt;&lt;/code&gt;).</source>
          <target state="translated">类模板 &lt;code&gt;std::fpos&lt;/code&gt; 特长标识流或文件中的绝对位置。类型的每个对象 &lt;code&gt;fpos&lt;/code&gt; 保持流（通常为类型的私有成员在字节位置 &lt;code&gt;&lt;a href=&quot;streamoff&quot;&gt;std::streamoff&lt;/a&gt;&lt;/code&gt; ）和当前移位状态类型的值 &lt;code&gt;State&lt;/code&gt; （通常 &lt;code&gt;&lt;a href=&quot;../string/multibyte/mbstate_t&quot;&gt;std::mbstate_t&lt;/a&gt;&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="dcb381e699d0f5d7bab1d45e7515b1ded9af4a69" translate="yes" xml:space="preserve">
          <source>Specialized algorithms</source>
          <target state="translated">专门的算法</target>
        </trans-unit>
        <trans-unit id="c100660f26a9d1f8adf27e8599e6a7912bf7468b" translate="yes" xml:space="preserve">
          <source>Specialized member functions</source>
          <target state="translated">专门的成员职能</target>
        </trans-unit>
        <trans-unit id="be5330502c84077d0a164ee3df4702dd3df1710f" translate="yes" xml:space="preserve">
          <source>Specializes &lt;code&gt;&lt;a href=&quot;../utility/hash&quot;&gt;std::hash&lt;/a&gt;&lt;/code&gt; for &lt;code&gt;&lt;a href=&quot;../container/vector&quot;&gt;std::vector&lt;/a&gt;&amp;lt;bool&amp;gt;&lt;/code&gt;</source>
          <target state="translated">专用于 &lt;code&gt;&lt;a href=&quot;../container/vector&quot;&gt;std::vector&lt;/a&gt;&amp;lt;bool&amp;gt;&lt;/code&gt; &amp;lt;bool&amp;gt;的 &lt;code&gt;&lt;a href=&quot;../utility/hash&quot;&gt;std::hash&lt;/a&gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="929faefa4be755f2446f61c5b58a7a6bf54b5e98" translate="yes" xml:space="preserve">
          <source>Specializes &lt;code&gt;&lt;a href=&quot;../utility/hash&quot;&gt;std::hash&lt;/a&gt;&lt;/code&gt; for &lt;code&gt;&lt;a href=&quot;../error/error_code&quot;&gt;std::error_code&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">专用于 &lt;code&gt;&lt;a href=&quot;../error/error_code&quot;&gt;std::error_code&lt;/a&gt;&lt;/code&gt; &lt;code&gt;&lt;a href=&quot;../utility/hash&quot;&gt;std::hash&lt;/a&gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="92884ecc4dc1ad9f0b6ada755479b29b96b1923c" translate="yes" xml:space="preserve">
          <source>Specializes &lt;code&gt;&lt;a href=&quot;../utility/hash&quot;&gt;std::hash&lt;/a&gt;&lt;/code&gt; for &lt;code&gt;&lt;a href=&quot;../memory/unique_ptr&quot;&gt;std::unique_ptr&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;../memory/shared_ptr&quot;&gt;std::shared_ptr&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">专门为 &lt;code&gt;&lt;a href=&quot;../memory/unique_ptr&quot;&gt;std::unique_ptr&lt;/a&gt;&lt;/code&gt; ， &lt;code&gt;&lt;a href=&quot;../memory/shared_ptr&quot;&gt;std::shared_ptr&lt;/a&gt;&lt;/code&gt; &lt;code&gt;&lt;a href=&quot;../utility/hash&quot;&gt;std::hash&lt;/a&gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="24c368abf6dc5ee77bbd5a19b5d872d8c1b483c8" translate="yes" xml:space="preserve">
          <source>Specializes &lt;code&gt;&lt;a href=&quot;../utility/hash&quot;&gt;std::hash&lt;/a&gt;&lt;/code&gt; for &lt;code&gt;&lt;a href=&quot;../string/basic_string&quot;&gt;std::string&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;../string/basic_string&quot;&gt;std::u16string&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;../string/basic_string&quot;&gt;std::u32string&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;../string/basic_string&quot;&gt;std::wstring&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">专业 &lt;code&gt;&lt;a href=&quot;../utility/hash&quot;&gt;std::hash&lt;/a&gt;&lt;/code&gt; 了 &lt;code&gt;&lt;a href=&quot;../string/basic_string&quot;&gt;std::string&lt;/a&gt;&lt;/code&gt; ， &lt;code&gt;&lt;a href=&quot;../string/basic_string&quot;&gt;std::u16string&lt;/a&gt;&lt;/code&gt; ， &lt;code&gt;&lt;a href=&quot;../string/basic_string&quot;&gt;std::u32string&lt;/a&gt;&lt;/code&gt; ， &lt;code&gt;&lt;a href=&quot;../string/basic_string&quot;&gt;std::wstring&lt;/a&gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="1edf31ebee30072fed71727277770c7e7c4dd605" translate="yes" xml:space="preserve">
          <source>Specializes &lt;code&gt;&lt;a href=&quot;../utility/hash&quot;&gt;std::hash&lt;/a&gt;&lt;/code&gt; for &lt;code&gt;&lt;a href=&quot;../thread/thread/id&quot;&gt;std::thread::id&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">专用于 &lt;code&gt;&lt;a href=&quot;../thread/thread/id&quot;&gt;std::thread::id&lt;/a&gt;&lt;/code&gt; &lt;code&gt;&lt;a href=&quot;../utility/hash&quot;&gt;std::hash&lt;/a&gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="0ad1e738230665a0185ea33fbf613ac5e62f5c47" translate="yes" xml:space="preserve">
          <source>Specializes &lt;code&gt;&lt;a href=&quot;../utility/hash&quot;&gt;std::hash&lt;/a&gt;&lt;/code&gt; for &lt;code&gt;&lt;a href=&quot;../types/type_index&quot;&gt;std::type_index&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">专用于 &lt;code&gt;&lt;a href=&quot;../types/type_index&quot;&gt;std::type_index&lt;/a&gt;&lt;/code&gt; &lt;code&gt;&lt;a href=&quot;../utility/hash&quot;&gt;std::hash&lt;/a&gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="d1ce044002508eef713f870c694c01793be9dab2" translate="yes" xml:space="preserve">
          <source>Specializes &lt;code&gt;&lt;a href=&quot;../utility/hash&quot;&gt;std::hash&lt;/a&gt;&lt;/code&gt; for &lt;code&gt;&lt;a href=&quot;../utility/bitset&quot;&gt;std::bitset&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">专用于 &lt;code&gt;&lt;a href=&quot;../utility/bitset&quot;&gt;std::bitset&lt;/a&gt;&lt;/code&gt; &lt;code&gt;&lt;a href=&quot;../utility/hash&quot;&gt;std::hash&lt;/a&gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="10203904019075a8eaa7d7a2cf3d7d0f3719dbe4" translate="yes" xml:space="preserve">
          <source>Specializes the &lt;code&gt;&lt;a href=&quot;../../algorithm/swap&quot;&gt;std::swap&lt;/a&gt;&lt;/code&gt; algorithm for &lt;code&gt;&lt;a href=&quot;../array&quot;&gt;std::array&lt;/a&gt;&lt;/code&gt;. Swaps the contents of &lt;code&gt;lhs&lt;/code&gt; and &lt;code&gt;rhs&lt;/code&gt;. Calls &lt;code&gt;lhs.swap(rhs)&lt;/code&gt;.</source>
          <target state="translated">专用于 &lt;code&gt;&lt;a href=&quot;../array&quot;&gt;std::array&lt;/a&gt;&lt;/code&gt; 的 &lt;code&gt;&lt;a href=&quot;../../algorithm/swap&quot;&gt;std::swap&lt;/a&gt;&lt;/code&gt; 算法。交换 &lt;code&gt;lhs&lt;/code&gt; 和 &lt;code&gt;rhs&lt;/code&gt; 的内容。调用 &lt;code&gt;lhs.swap(rhs)&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="a374bafcebddec1398aa41e1afd2fd5ce478d640" translate="yes" xml:space="preserve">
          <source>Specializes the &lt;code&gt;&lt;a href=&quot;../../algorithm/swap&quot;&gt;std::swap&lt;/a&gt;&lt;/code&gt; algorithm for &lt;code&gt;&lt;a href=&quot;../basic_fstream&quot;&gt;std::basic_fstream&lt;/a&gt;&lt;/code&gt;. Exchanges the state of &lt;code&gt;lhs&lt;/code&gt; with that of &lt;code&gt;rhs&lt;/code&gt;. Effectively calls &lt;code&gt;lhs.swap(rhs)&lt;/code&gt;.</source>
          <target state="translated">专用于 &lt;code&gt;&lt;a href=&quot;../basic_fstream&quot;&gt;std::basic_fstream&lt;/a&gt;&lt;/code&gt; 的 &lt;code&gt;&lt;a href=&quot;../../algorithm/swap&quot;&gt;std::swap&lt;/a&gt;&lt;/code&gt; 算法。与 &lt;code&gt;rhs&lt;/code&gt; 交换 &lt;code&gt;lhs&lt;/code&gt; 的状态。有效地调用 &lt;code&gt;lhs.swap(rhs)&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="14fd4179daf4c10d5aca433c91fb556e4214b53b" translate="yes" xml:space="preserve">
          <source>Specializes the &lt;code&gt;&lt;a href=&quot;../../algorithm/swap&quot;&gt;std::swap&lt;/a&gt;&lt;/code&gt; algorithm for &lt;code&gt;&lt;a href=&quot;../basic_ifstream&quot;&gt;std::basic_ifstream&lt;/a&gt;&lt;/code&gt;. Exchanges the state of &lt;code&gt;lhs&lt;/code&gt; with that of &lt;code&gt;rhs&lt;/code&gt;. Effectively calls &lt;code&gt;lhs.swap(rhs)&lt;/code&gt;.</source>
          <target state="translated">专用于 &lt;code&gt;&lt;a href=&quot;../basic_ifstream&quot;&gt;std::basic_ifstream&lt;/a&gt;&lt;/code&gt; 的 &lt;code&gt;&lt;a href=&quot;../../algorithm/swap&quot;&gt;std::swap&lt;/a&gt;&lt;/code&gt; 算法。与 &lt;code&gt;rhs&lt;/code&gt; 交换 &lt;code&gt;lhs&lt;/code&gt; 的状态。有效地调用 &lt;code&gt;lhs.swap(rhs)&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="6c980d649f1c3fd00981e147ecf386dbdc2a6a3e" translate="yes" xml:space="preserve">
          <source>Specializes the &lt;code&gt;&lt;a href=&quot;../../algorithm/swap&quot;&gt;std::swap&lt;/a&gt;&lt;/code&gt; algorithm for &lt;code&gt;&lt;a href=&quot;../basic_istringstream&quot;&gt;std::basic_istringstream&lt;/a&gt;&lt;/code&gt;. Exchanges the state of &lt;code&gt;lhs&lt;/code&gt; with that of &lt;code&gt;rhs&lt;/code&gt;. Effectively calls &lt;code&gt;lhs.swap(rhs)&lt;/code&gt;.</source>
          <target state="translated">专用于 &lt;code&gt;&lt;a href=&quot;../basic_istringstream&quot;&gt;std::basic_istringstream&lt;/a&gt;&lt;/code&gt; 的 &lt;code&gt;&lt;a href=&quot;../../algorithm/swap&quot;&gt;std::swap&lt;/a&gt;&lt;/code&gt; 算法。与 &lt;code&gt;rhs&lt;/code&gt; 交换 &lt;code&gt;lhs&lt;/code&gt; 的状态。有效地调用 &lt;code&gt;lhs.swap(rhs)&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="f09853eb90e71e2ecdcbc85d2086b5e9df32a0b5" translate="yes" xml:space="preserve">
          <source>Specializes the &lt;code&gt;&lt;a href=&quot;../../algorithm/swap&quot;&gt;std::swap&lt;/a&gt;&lt;/code&gt; algorithm for &lt;code&gt;&lt;a href=&quot;../basic_ofstream&quot;&gt;std::basic_ofstream&lt;/a&gt;&lt;/code&gt;. Exchanges the state of &lt;code&gt;lhs&lt;/code&gt; with that of &lt;code&gt;rhs&lt;/code&gt;. Effectively calls &lt;code&gt;lhs.swap(rhs)&lt;/code&gt;.</source>
          <target state="translated">专用于 &lt;code&gt;&lt;a href=&quot;../basic_ofstream&quot;&gt;std::basic_ofstream&lt;/a&gt;&lt;/code&gt; 的 &lt;code&gt;&lt;a href=&quot;../../algorithm/swap&quot;&gt;std::swap&lt;/a&gt;&lt;/code&gt; 算法。与 &lt;code&gt;rhs&lt;/code&gt; 交换 &lt;code&gt;lhs&lt;/code&gt; 的状态。有效地调用 &lt;code&gt;lhs.swap(rhs)&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="144a7d7a089e07620f9fa29a59e74050d09800b3" translate="yes" xml:space="preserve">
          <source>Specializes the &lt;code&gt;&lt;a href=&quot;../../algorithm/swap&quot;&gt;std::swap&lt;/a&gt;&lt;/code&gt; algorithm for &lt;code&gt;&lt;a href=&quot;../basic_ostringstream&quot;&gt;std::basic_ostringstream&lt;/a&gt;&lt;/code&gt;. Exchanges the state of &lt;code&gt;lhs&lt;/code&gt; with that of &lt;code&gt;rhs&lt;/code&gt;. Effectively calls &lt;code&gt;lhs.swap(rhs)&lt;/code&gt;.</source>
          <target state="translated">专用于 &lt;code&gt;&lt;a href=&quot;../basic_ostringstream&quot;&gt;std::basic_ostringstream&lt;/a&gt;&lt;/code&gt; 的 &lt;code&gt;&lt;a href=&quot;../../algorithm/swap&quot;&gt;std::swap&lt;/a&gt;&lt;/code&gt; 算法。与 &lt;code&gt;rhs&lt;/code&gt; 交换 &lt;code&gt;lhs&lt;/code&gt; 的状态。有效地调用 &lt;code&gt;lhs.swap(rhs)&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="3d276b1eee4a17a3edc097fb2a067fce5bc607db" translate="yes" xml:space="preserve">
          <source>Specializes the &lt;code&gt;&lt;a href=&quot;../../algorithm/swap&quot;&gt;std::swap&lt;/a&gt;&lt;/code&gt; algorithm for &lt;code&gt;&lt;a href=&quot;../basic_string&quot;&gt;std::basic_string&lt;/a&gt;&lt;/code&gt;. Swaps the contents of &lt;code&gt;lhs&lt;/code&gt; and &lt;code&gt;rhs&lt;/code&gt;. Equivalent to &lt;code&gt;lhs.swap(rhs)&lt;/code&gt;.</source>
          <target state="translated">专用于 &lt;code&gt;&lt;a href=&quot;../basic_string&quot;&gt;std::basic_string&lt;/a&gt;&lt;/code&gt; 的 &lt;code&gt;&lt;a href=&quot;../../algorithm/swap&quot;&gt;std::swap&lt;/a&gt;&lt;/code&gt; 算法。交换 &lt;code&gt;lhs&lt;/code&gt; 和 &lt;code&gt;rhs&lt;/code&gt; 的内容。等效于 &lt;code&gt;lhs.swap(rhs)&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="11e5d4812028e7a563bd32972648c719eb6f83a0" translate="yes" xml:space="preserve">
          <source>Specializes the &lt;code&gt;&lt;a href=&quot;../../algorithm/swap&quot;&gt;std::swap&lt;/a&gt;&lt;/code&gt; algorithm for &lt;code&gt;&lt;a href=&quot;../basic_stringstream&quot;&gt;std::basic_stringstream&lt;/a&gt;&lt;/code&gt;. Exchanges the state of &lt;code&gt;lhs&lt;/code&gt; with that of &lt;code&gt;rhs&lt;/code&gt;. Effectively calls &lt;code&gt;lhs.swap(rhs)&lt;/code&gt;.</source>
          <target state="translated">专用于 &lt;code&gt;&lt;a href=&quot;../basic_stringstream&quot;&gt;std::basic_stringstream&lt;/a&gt;&lt;/code&gt; 的 &lt;code&gt;&lt;a href=&quot;../../algorithm/swap&quot;&gt;std::swap&lt;/a&gt;&lt;/code&gt; 算法。与 &lt;code&gt;rhs&lt;/code&gt; 交换 &lt;code&gt;lhs&lt;/code&gt; 的状态。有效地调用 &lt;code&gt;lhs.swap(rhs)&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="b38379cc0d135eb904af1e44b19ca4a4a225d92c" translate="yes" xml:space="preserve">
          <source>Specializes the &lt;code&gt;&lt;a href=&quot;../../algorithm/swap&quot;&gt;std::swap&lt;/a&gt;&lt;/code&gt; algorithm for &lt;code&gt;&lt;a href=&quot;../deque&quot;&gt;std::deque&lt;/a&gt;&lt;/code&gt;. Swaps the contents of &lt;code&gt;lhs&lt;/code&gt; and &lt;code&gt;rhs&lt;/code&gt;. Calls &lt;code&gt;lhs.swap(rhs)&lt;/code&gt;.</source>
          <target state="translated">专用于 &lt;code&gt;&lt;a href=&quot;../deque&quot;&gt;std::deque&lt;/a&gt;&lt;/code&gt; 的 &lt;code&gt;&lt;a href=&quot;../../algorithm/swap&quot;&gt;std::swap&lt;/a&gt;&lt;/code&gt; 算法。交换 &lt;code&gt;lhs&lt;/code&gt; 和 &lt;code&gt;rhs&lt;/code&gt; 的内容。调用 &lt;code&gt;lhs.swap(rhs)&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="3425e599adf74f2b78d5db4942f7824d31bb0cea" translate="yes" xml:space="preserve">
          <source>Specializes the &lt;code&gt;&lt;a href=&quot;../../algorithm/swap&quot;&gt;std::swap&lt;/a&gt;&lt;/code&gt; algorithm for &lt;code&gt;&lt;a href=&quot;../forward_list&quot;&gt;std::forward_list&lt;/a&gt;&lt;/code&gt;. Swaps the contents of &lt;code&gt;lhs&lt;/code&gt; and &lt;code&gt;rhs&lt;/code&gt;. Calls &lt;code&gt;lhs.swap(rhs)&lt;/code&gt;.</source>
          <target state="translated">专用于 &lt;code&gt;&lt;a href=&quot;../forward_list&quot;&gt;std::forward_list&lt;/a&gt;&lt;/code&gt; 的 &lt;code&gt;&lt;a href=&quot;../../algorithm/swap&quot;&gt;std::swap&lt;/a&gt;&lt;/code&gt; 算法。交换 &lt;code&gt;lhs&lt;/code&gt; 和 &lt;code&gt;rhs&lt;/code&gt; 的内容。调用 &lt;code&gt;lhs.swap(rhs)&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="16ec64ededba9da81e174ff8ce23dac9e2f45778" translate="yes" xml:space="preserve">
          <source>Specializes the &lt;code&gt;&lt;a href=&quot;../../algorithm/swap&quot;&gt;std::swap&lt;/a&gt;&lt;/code&gt; algorithm for &lt;code&gt;&lt;a href=&quot;../list&quot;&gt;std::list&lt;/a&gt;&lt;/code&gt;. Swaps the contents of &lt;code&gt;lhs&lt;/code&gt; and &lt;code&gt;rhs&lt;/code&gt;. Calls &lt;code&gt;lhs.swap(rhs)&lt;/code&gt;.</source>
          <target state="translated">专用于 &lt;code&gt;&lt;a href=&quot;../list&quot;&gt;std::list&lt;/a&gt;&lt;/code&gt; 的 &lt;code&gt;&lt;a href=&quot;../../algorithm/swap&quot;&gt;std::swap&lt;/a&gt;&lt;/code&gt; 算法。交换 &lt;code&gt;lhs&lt;/code&gt; 和 &lt;code&gt;rhs&lt;/code&gt; 的内容。调用 &lt;code&gt;lhs.swap(rhs)&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="68611ad0297c8b865b1e69bf87f9494a059b776e" translate="yes" xml:space="preserve">
          <source>Specializes the &lt;code&gt;&lt;a href=&quot;../../algorithm/swap&quot;&gt;std::swap&lt;/a&gt;&lt;/code&gt; algorithm for &lt;code&gt;&lt;a href=&quot;../map&quot;&gt;std::map&lt;/a&gt;&lt;/code&gt;. Swaps the contents of &lt;code&gt;lhs&lt;/code&gt; and &lt;code&gt;rhs&lt;/code&gt;. Calls &lt;code&gt;lhs.swap(rhs)&lt;/code&gt;.</source>
          <target state="translated">专用于 &lt;code&gt;&lt;a href=&quot;../map&quot;&gt;std::map&lt;/a&gt;&lt;/code&gt; 的 &lt;code&gt;&lt;a href=&quot;../../algorithm/swap&quot;&gt;std::swap&lt;/a&gt;&lt;/code&gt; 算法。交换 &lt;code&gt;lhs&lt;/code&gt; 和 &lt;code&gt;rhs&lt;/code&gt; 的内容。调用 &lt;code&gt;lhs.swap(rhs)&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="fcbfdb7046d6b717fd839db9eb8989c022e7861d" translate="yes" xml:space="preserve">
          <source>Specializes the &lt;code&gt;&lt;a href=&quot;../../algorithm/swap&quot;&gt;std::swap&lt;/a&gt;&lt;/code&gt; algorithm for &lt;code&gt;&lt;a href=&quot;../match_results&quot;&gt;std::match_results&lt;/a&gt;&lt;/code&gt;. Exchanges the contents of &lt;code&gt;x1&lt;/code&gt; with those of &lt;code&gt;x2&lt;/code&gt;. Effectively calls &lt;code&gt;x1.swap(x2)&lt;/code&gt;.</source>
          <target state="translated">专用于 &lt;code&gt;&lt;a href=&quot;../match_results&quot;&gt;std::match_results&lt;/a&gt;&lt;/code&gt; 的 &lt;code&gt;&lt;a href=&quot;../../algorithm/swap&quot;&gt;std::swap&lt;/a&gt;&lt;/code&gt; 算法。将 &lt;code&gt;x1&lt;/code&gt; 的内容与 &lt;code&gt;x2&lt;/code&gt; 的内容交换。有效地调用 &lt;code&gt;x1.swap(x2)&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="348e920b666cb2b95dfb021675885057cfedbfa5" translate="yes" xml:space="preserve">
          <source>Specializes the &lt;code&gt;&lt;a href=&quot;../../algorithm/swap&quot;&gt;std::swap&lt;/a&gt;&lt;/code&gt; algorithm for &lt;code&gt;&lt;a href=&quot;../multimap&quot;&gt;std::multimap&lt;/a&gt;&lt;/code&gt;. Swaps the contents of &lt;code&gt;lhs&lt;/code&gt; and &lt;code&gt;rhs&lt;/code&gt;. Calls &lt;code&gt;lhs.swap(rhs)&lt;/code&gt;.</source>
          <target state="translated">专攻 &lt;code&gt;&lt;a href=&quot;../../algorithm/swap&quot;&gt;std::swap&lt;/a&gt;&lt;/code&gt; 于 &lt;code&gt;&lt;a href=&quot;../multimap&quot;&gt;std::multimap&lt;/a&gt;&lt;/code&gt; std :: swap算法。交换 &lt;code&gt;lhs&lt;/code&gt; 和 &lt;code&gt;rhs&lt;/code&gt; 的内容。调用 &lt;code&gt;lhs.swap(rhs)&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="a66cdab60bbc874750a1df6ce467f9bf1858001d" translate="yes" xml:space="preserve">
          <source>Specializes the &lt;code&gt;&lt;a href=&quot;../../algorithm/swap&quot;&gt;std::swap&lt;/a&gt;&lt;/code&gt; algorithm for &lt;code&gt;&lt;a href=&quot;../multiset&quot;&gt;std::multiset&lt;/a&gt;&lt;/code&gt;. Swaps the contents of &lt;code&gt;lhs&lt;/code&gt; and &lt;code&gt;rhs&lt;/code&gt;. Calls &lt;code&gt;lhs.swap(rhs)&lt;/code&gt;.</source>
          <target state="translated">专攻 &lt;code&gt;&lt;a href=&quot;../../algorithm/swap&quot;&gt;std::swap&lt;/a&gt;&lt;/code&gt; 于 &lt;code&gt;&lt;a href=&quot;../multiset&quot;&gt;std::multiset&lt;/a&gt;&lt;/code&gt; std :: swap算法。交换 &lt;code&gt;lhs&lt;/code&gt; 和 &lt;code&gt;rhs&lt;/code&gt; 的内容。调用 &lt;code&gt;lhs.swap(rhs)&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="ae0a18b802f0a1c4ce8ee99c449a083dabdc8bee" translate="yes" xml:space="preserve">
          <source>Specializes the &lt;code&gt;&lt;a href=&quot;../../algorithm/swap&quot;&gt;std::swap&lt;/a&gt;&lt;/code&gt; algorithm for &lt;code&gt;&lt;a href=&quot;../packaged_task&quot;&gt;std::packaged_task&lt;/a&gt;&lt;/code&gt;. Exchanges the state of &lt;code&gt;lhs&lt;/code&gt; with that of &lt;code&gt;rhs&lt;/code&gt;. Effectively calls &lt;code&gt;lhs.swap(rhs)&lt;/code&gt;.</source>
          <target state="translated">专攻 &lt;code&gt;&lt;a href=&quot;../../algorithm/swap&quot;&gt;std::swap&lt;/a&gt;&lt;/code&gt; 于 &lt;code&gt;&lt;a href=&quot;../packaged_task&quot;&gt;std::packaged_task&lt;/a&gt;&lt;/code&gt; std :: swap算法。与 &lt;code&gt;rhs&lt;/code&gt; 交换 &lt;code&gt;lhs&lt;/code&gt; 的状态。有效地调用 &lt;code&gt;lhs.swap(rhs)&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="4b01140469becbcad3df73849ca87a41d0e904b5" translate="yes" xml:space="preserve">
          <source>Specializes the &lt;code&gt;&lt;a href=&quot;../../algorithm/swap&quot;&gt;std::swap&lt;/a&gt;&lt;/code&gt; algorithm for &lt;code&gt;&lt;a href=&quot;../priority_queue&quot;&gt;std::priority_queue&lt;/a&gt;&lt;/code&gt;. Swaps the contents of &lt;code&gt;lhs&lt;/code&gt; and &lt;code&gt;rhs&lt;/code&gt;. Calls &lt;code&gt;lhs.swap(rhs)&lt;/code&gt;.</source>
          <target state="translated">专攻 &lt;code&gt;&lt;a href=&quot;../../algorithm/swap&quot;&gt;std::swap&lt;/a&gt;&lt;/code&gt; 于 &lt;code&gt;&lt;a href=&quot;../priority_queue&quot;&gt;std::priority_queue&lt;/a&gt;&lt;/code&gt; std :: swap算法。交换 &lt;code&gt;lhs&lt;/code&gt; 和 &lt;code&gt;rhs&lt;/code&gt; 的内容。调用 &lt;code&gt;lhs.swap(rhs)&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="d0ca2b58e0a53194c4a1dc67a48572272d61d66f" translate="yes" xml:space="preserve">
          <source>Specializes the &lt;code&gt;&lt;a href=&quot;../../algorithm/swap&quot;&gt;std::swap&lt;/a&gt;&lt;/code&gt; algorithm for &lt;code&gt;&lt;a href=&quot;../promise&quot;&gt;std::promise&lt;/a&gt;&lt;/code&gt;. Exchanges the shared state of &lt;code&gt;lhs&lt;/code&gt; with that of &lt;code&gt;rhs&lt;/code&gt;. Effectively calls &lt;code&gt;lhs.swap(rhs)&lt;/code&gt;.</source>
          <target state="translated">专攻 &lt;code&gt;&lt;a href=&quot;../../algorithm/swap&quot;&gt;std::swap&lt;/a&gt;&lt;/code&gt; 于 &lt;code&gt;&lt;a href=&quot;../promise&quot;&gt;std::promise&lt;/a&gt;&lt;/code&gt; 算法。交换的共享状态 &lt;code&gt;lhs&lt;/code&gt; 与的 &lt;code&gt;rhs&lt;/code&gt; 。有效地调用 &lt;code&gt;lhs.swap(rhs)&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="4dc613f89602630345443f1c0041e1fabdefa79d" translate="yes" xml:space="preserve">
          <source>Specializes the &lt;code&gt;&lt;a href=&quot;../../algorithm/swap&quot;&gt;std::swap&lt;/a&gt;&lt;/code&gt; algorithm for &lt;code&gt;&lt;a href=&quot;../queue&quot;&gt;std::queue&lt;/a&gt;&lt;/code&gt;. Swaps the contents of &lt;code&gt;lhs&lt;/code&gt; and &lt;code&gt;rhs&lt;/code&gt;. Calls &lt;code&gt;lhs.swap(rhs)&lt;/code&gt;.</source>
          <target state="translated">专攻 &lt;code&gt;&lt;a href=&quot;../../algorithm/swap&quot;&gt;std::swap&lt;/a&gt;&lt;/code&gt; 于 &lt;code&gt;&lt;a href=&quot;../queue&quot;&gt;std::queue&lt;/a&gt;&lt;/code&gt; 算法。交换 &lt;code&gt;lhs&lt;/code&gt; 和 &lt;code&gt;rhs&lt;/code&gt; 的内容。调用 &lt;code&gt;lhs.swap(rhs)&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="4b0c41f14ec24dff0b21fa6fe23b1d7d8f579137" translate="yes" xml:space="preserve">
          <source>Specializes the &lt;code&gt;&lt;a href=&quot;../../algorithm/swap&quot;&gt;std::swap&lt;/a&gt;&lt;/code&gt; algorithm for &lt;code&gt;&lt;a href=&quot;../set&quot;&gt;std::set&lt;/a&gt;&lt;/code&gt;. Swaps the contents of &lt;code&gt;lhs&lt;/code&gt; and &lt;code&gt;rhs&lt;/code&gt;. Calls &lt;code&gt;lhs.swap(rhs)&lt;/code&gt;.</source>
          <target state="translated">专攻 &lt;code&gt;&lt;a href=&quot;../../algorithm/swap&quot;&gt;std::swap&lt;/a&gt;&lt;/code&gt; 于 &lt;code&gt;&lt;a href=&quot;../set&quot;&gt;std::set&lt;/a&gt;&lt;/code&gt; 算法。交换 &lt;code&gt;lhs&lt;/code&gt; 和 &lt;code&gt;rhs&lt;/code&gt; 的内容。调用 &lt;code&gt;lhs.swap(rhs)&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="16678edb55e165fd3aac9bc1f30b29146586e4a2" translate="yes" xml:space="preserve">
          <source>Specializes the &lt;code&gt;&lt;a href=&quot;../../algorithm/swap&quot;&gt;std::swap&lt;/a&gt;&lt;/code&gt; algorithm for &lt;code&gt;&lt;a href=&quot;../shared_lock&quot;&gt;std::shared_lock&lt;/a&gt;&lt;/code&gt;. Exchanges the state of &lt;code&gt;lhs&lt;/code&gt; with that of &lt;code&gt;rhs&lt;/code&gt;. Effectively calls &lt;code&gt;lhs.swap(rhs)&lt;/code&gt;.</source>
          <target state="translated">专用于 &lt;code&gt;&lt;a href=&quot;../../algorithm/swap&quot;&gt;std::swap&lt;/a&gt;&lt;/code&gt; 算法 &lt;code&gt;&lt;a href=&quot;../shared_lock&quot;&gt;std::shared_lock&lt;/a&gt;&lt;/code&gt; 。与 &lt;code&gt;rhs&lt;/code&gt; 交换 &lt;code&gt;lhs&lt;/code&gt; 的状态。有效地调用 &lt;code&gt;lhs.swap(rhs)&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="6b09f2e1442d1482454c8d40093f682389f57dfa" translate="yes" xml:space="preserve">
          <source>Specializes the &lt;code&gt;&lt;a href=&quot;../../algorithm/swap&quot;&gt;std::swap&lt;/a&gt;&lt;/code&gt; algorithm for &lt;code&gt;&lt;a href=&quot;../shared_ptr&quot;&gt;std::shared_ptr&lt;/a&gt;&lt;/code&gt;. Swaps the pointers of &lt;code&gt;lhs&lt;/code&gt; and &lt;code&gt;rhs&lt;/code&gt;. Calls &lt;code&gt;lhs.swap(rhs)&lt;/code&gt;.</source>
          <target state="translated">专用于 &lt;code&gt;&lt;a href=&quot;../../algorithm/swap&quot;&gt;std::swap&lt;/a&gt;&lt;/code&gt; 算法 &lt;code&gt;&lt;a href=&quot;../shared_ptr&quot;&gt;std::shared_ptr&lt;/a&gt;&lt;/code&gt; 。交换 &lt;code&gt;lhs&lt;/code&gt; 和 &lt;code&gt;rhs&lt;/code&gt; 的指针。调用 &lt;code&gt;lhs.swap(rhs)&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="c702d5c420dc39e28437791aec8f6f4e42699182" translate="yes" xml:space="preserve">
          <source>Specializes the &lt;code&gt;&lt;a href=&quot;../../algorithm/swap&quot;&gt;std::swap&lt;/a&gt;&lt;/code&gt; algorithm for &lt;code&gt;&lt;a href=&quot;../stack&quot;&gt;std::stack&lt;/a&gt;&lt;/code&gt;. Swaps the contents of &lt;code&gt;lhs&lt;/code&gt; and &lt;code&gt;rhs&lt;/code&gt;. Calls &lt;code&gt;lhs.swap(rhs)&lt;/code&gt;.</source>
          <target state="translated">专用于 &lt;code&gt;&lt;a href=&quot;../../algorithm/swap&quot;&gt;std::swap&lt;/a&gt;&lt;/code&gt; 算法 &lt;code&gt;&lt;a href=&quot;../stack&quot;&gt;std::stack&lt;/a&gt;&lt;/code&gt; 。交换 &lt;code&gt;lhs&lt;/code&gt; 和 &lt;code&gt;rhs&lt;/code&gt; 的内容。调用 &lt;code&gt;lhs.swap(rhs)&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="2ce2db2f2cdd5c943018c47e72511be6601b08af" translate="yes" xml:space="preserve">
          <source>Specializes the &lt;code&gt;&lt;a href=&quot;../../algorithm/swap&quot;&gt;std::swap&lt;/a&gt;&lt;/code&gt; algorithm for &lt;code&gt;&lt;a href=&quot;../unique_lock&quot;&gt;std::unique_lock&lt;/a&gt;&lt;/code&gt;. Exchanges the state of &lt;code&gt;lhs&lt;/code&gt; with that of &lt;code&gt;rhs&lt;/code&gt;. Effectively calls &lt;code&gt;lhs.swap(rhs)&lt;/code&gt;.</source>
          <target state="translated">专用于 &lt;code&gt;&lt;a href=&quot;../../algorithm/swap&quot;&gt;std::swap&lt;/a&gt;&lt;/code&gt; 算法 &lt;code&gt;&lt;a href=&quot;../unique_lock&quot;&gt;std::unique_lock&lt;/a&gt;&lt;/code&gt; 。与 &lt;code&gt;rhs&lt;/code&gt; 交换 &lt;code&gt;lhs&lt;/code&gt; 的状态。有效地调用 &lt;code&gt;lhs.swap(rhs)&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="7c3d9c626acc7ec9ede7b418ff9991a65bf9ef4a" translate="yes" xml:space="preserve">
          <source>Specializes the &lt;code&gt;&lt;a href=&quot;../../algorithm/swap&quot;&gt;std::swap&lt;/a&gt;&lt;/code&gt; algorithm for &lt;code&gt;&lt;a href=&quot;../unique_ptr&quot;&gt;std::unique_ptr&lt;/a&gt;&lt;/code&gt;. Swaps the pointers of &lt;code&gt;lhs&lt;/code&gt; and &lt;code&gt;rhs&lt;/code&gt;. Calls &lt;code&gt;lhs.swap(rhs)&lt;/code&gt;.</source>
          <target state="translated">专用于 &lt;code&gt;&lt;a href=&quot;../../algorithm/swap&quot;&gt;std::swap&lt;/a&gt;&lt;/code&gt; 算法 &lt;code&gt;&lt;a href=&quot;../unique_ptr&quot;&gt;std::unique_ptr&lt;/a&gt;&lt;/code&gt; 。交换 &lt;code&gt;lhs&lt;/code&gt; 和 &lt;code&gt;rhs&lt;/code&gt; 的指针。调用 &lt;code&gt;lhs.swap(rhs)&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="1d8e50681a06d76bec134dd34f752390f238bfdb" translate="yes" xml:space="preserve">
          <source>Specializes the &lt;code&gt;&lt;a href=&quot;../../algorithm/swap&quot;&gt;std::swap&lt;/a&gt;&lt;/code&gt; algorithm for &lt;code&gt;&lt;a href=&quot;../unordered_map&quot;&gt;std::unordered_map&lt;/a&gt;&lt;/code&gt;. Swaps the contents of &lt;code&gt;lhs&lt;/code&gt; and &lt;code&gt;rhs&lt;/code&gt;. Calls &lt;code&gt;lhs.swap(rhs)&lt;/code&gt;.</source>
          <target state="translated">专用于 &lt;code&gt;&lt;a href=&quot;../../algorithm/swap&quot;&gt;std::swap&lt;/a&gt;&lt;/code&gt; 算法 &lt;code&gt;&lt;a href=&quot;../unordered_map&quot;&gt;std::unordered_map&lt;/a&gt;&lt;/code&gt; 。交换 &lt;code&gt;lhs&lt;/code&gt; 和 &lt;code&gt;rhs&lt;/code&gt; 的内容。调用 &lt;code&gt;lhs.swap(rhs)&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="53efb070e9c5b714af093163836a104b272133f1" translate="yes" xml:space="preserve">
          <source>Specializes the &lt;code&gt;&lt;a href=&quot;../../algorithm/swap&quot;&gt;std::swap&lt;/a&gt;&lt;/code&gt; algorithm for &lt;code&gt;&lt;a href=&quot;../unordered_multimap&quot;&gt;std::unordered_multimap&lt;/a&gt;&lt;/code&gt;. Swaps the contents of &lt;code&gt;lhs&lt;/code&gt; and &lt;code&gt;rhs&lt;/code&gt;. Calls &lt;code&gt;lhs.swap(rhs)&lt;/code&gt;.</source>
          <target state="translated">专用于 &lt;code&gt;&lt;a href=&quot;../unordered_multimap&quot;&gt;std::unordered_multimap&lt;/a&gt;&lt;/code&gt; 的 &lt;code&gt;&lt;a href=&quot;../../algorithm/swap&quot;&gt;std::swap&lt;/a&gt;&lt;/code&gt; 算法。交换 &lt;code&gt;lhs&lt;/code&gt; 和 &lt;code&gt;rhs&lt;/code&gt; 的内容。调用 &lt;code&gt;lhs.swap(rhs)&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="e76cd152ab11af0238bc62fc1e18423ba39b562a" translate="yes" xml:space="preserve">
          <source>Specializes the &lt;code&gt;&lt;a href=&quot;../../algorithm/swap&quot;&gt;std::swap&lt;/a&gt;&lt;/code&gt; algorithm for &lt;code&gt;&lt;a href=&quot;../unordered_multiset&quot;&gt;std::unordered_multiset&lt;/a&gt;&lt;/code&gt;. Swaps the contents of &lt;code&gt;lhs&lt;/code&gt; and &lt;code&gt;rhs&lt;/code&gt;. Calls &lt;code&gt;lhs.swap(rhs)&lt;/code&gt;.</source>
          <target state="translated">专用于 &lt;code&gt;&lt;a href=&quot;../unordered_multiset&quot;&gt;std::unordered_multiset&lt;/a&gt;&lt;/code&gt; 的 &lt;code&gt;&lt;a href=&quot;../../algorithm/swap&quot;&gt;std::swap&lt;/a&gt;&lt;/code&gt; 算法。交换 &lt;code&gt;lhs&lt;/code&gt; 和 &lt;code&gt;rhs&lt;/code&gt; 的内容。调用 &lt;code&gt;lhs.swap(rhs)&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="e51a278bf9c5106974b28e471705f51023452d39" translate="yes" xml:space="preserve">
          <source>Specializes the &lt;code&gt;&lt;a href=&quot;../../algorithm/swap&quot;&gt;std::swap&lt;/a&gt;&lt;/code&gt; algorithm for &lt;code&gt;&lt;a href=&quot;../unordered_set&quot;&gt;std::unordered_set&lt;/a&gt;&lt;/code&gt;. Swaps the contents of &lt;code&gt;lhs&lt;/code&gt; and &lt;code&gt;rhs&lt;/code&gt;. Calls &lt;code&gt;lhs.swap(rhs)&lt;/code&gt;.</source>
          <target state="translated">专用于 &lt;code&gt;&lt;a href=&quot;../unordered_set&quot;&gt;std::unordered_set&lt;/a&gt;&lt;/code&gt; 的 &lt;code&gt;&lt;a href=&quot;../../algorithm/swap&quot;&gt;std::swap&lt;/a&gt;&lt;/code&gt; 算法。交换 &lt;code&gt;lhs&lt;/code&gt; 和 &lt;code&gt;rhs&lt;/code&gt; 的内容。调用 &lt;code&gt;lhs.swap(rhs)&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="17706eccbf62ab82782b8202ae83243d762b0bc9" translate="yes" xml:space="preserve">
          <source>Specializes the &lt;code&gt;&lt;a href=&quot;../../algorithm/swap&quot;&gt;std::swap&lt;/a&gt;&lt;/code&gt; algorithm for &lt;code&gt;&lt;a href=&quot;../valarray&quot;&gt;std::valarray&lt;/a&gt;&lt;/code&gt;. Swaps the contents of &lt;code&gt;lhs&lt;/code&gt; and &lt;code&gt;rhs&lt;/code&gt;. Calls &lt;code&gt;lhs.swap(rhs)&lt;/code&gt;.</source>
          <target state="translated">专用于 &lt;code&gt;&lt;a href=&quot;../valarray&quot;&gt;std::valarray&lt;/a&gt;&lt;/code&gt; 的 &lt;code&gt;&lt;a href=&quot;../../algorithm/swap&quot;&gt;std::swap&lt;/a&gt;&lt;/code&gt; 算法。交换内容 &lt;code&gt;lhs&lt;/code&gt; 和 &lt;code&gt;rhs&lt;/code&gt; 。调用 &lt;code&gt;lhs.swap(rhs)&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="762ba2bac666c73f3f396229a66d00033365c9d3" translate="yes" xml:space="preserve">
          <source>Specializes the &lt;code&gt;&lt;a href=&quot;../../algorithm/swap&quot;&gt;std::swap&lt;/a&gt;&lt;/code&gt; algorithm for &lt;code&gt;&lt;a href=&quot;../vector&quot;&gt;std::vector&lt;/a&gt;&lt;/code&gt;. Swaps the contents of &lt;code&gt;lhs&lt;/code&gt; and &lt;code&gt;rhs&lt;/code&gt;. Calls &lt;code&gt;lhs.swap(rhs)&lt;/code&gt;.</source>
          <target state="translated">专用于 &lt;code&gt;&lt;a href=&quot;../vector&quot;&gt;std::vector&lt;/a&gt;&lt;/code&gt; 的 &lt;code&gt;&lt;a href=&quot;../../algorithm/swap&quot;&gt;std::swap&lt;/a&gt;&lt;/code&gt; 算法。交换内容 &lt;code&gt;lhs&lt;/code&gt; 和 &lt;code&gt;rhs&lt;/code&gt; 。调用 &lt;code&gt;lhs.swap(rhs)&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="2371af2f2d7914c984098900b4eed95ae1383bbc" translate="yes" xml:space="preserve">
          <source>Specializes the &lt;code&gt;&lt;a href=&quot;../../algorithm/swap&quot;&gt;std::swap&lt;/a&gt;&lt;/code&gt; algorithm for &lt;code&gt;&lt;a href=&quot;../weak_ptr&quot;&gt;std::weak_ptr&lt;/a&gt;&lt;/code&gt;. Swaps the pointers of &lt;code&gt;lhs&lt;/code&gt; and &lt;code&gt;rhs&lt;/code&gt;. Calls &lt;code&gt;lhs.swap(rhs)&lt;/code&gt;.</source>
          <target state="translated">专用于 &lt;code&gt;&lt;a href=&quot;../weak_ptr&quot;&gt;std::weak_ptr&lt;/a&gt;&lt;/code&gt; 的 &lt;code&gt;&lt;a href=&quot;../../algorithm/swap&quot;&gt;std::swap&lt;/a&gt;&lt;/code&gt; 算法。交换的指针 &lt;code&gt;lhs&lt;/code&gt; 和 &lt;code&gt;rhs&lt;/code&gt; 。调用 &lt;code&gt;lhs.swap(rhs)&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="84fd25a7b30671a6417f94003de811a3e983ac78" translate="yes" xml:space="preserve">
          <source>Specializes the &lt;code&gt;&lt;a href=&quot;../hash&quot;&gt;std::hash&lt;/a&gt;&lt;/code&gt; algorithm for &lt;code&gt;std::monostate&lt;/code&gt;.</source>
          <target state="translated">专攻 &lt;code&gt;&lt;a href=&quot;../hash&quot;&gt;std::hash&lt;/a&gt;&lt;/code&gt; 于 &lt;code&gt;std::monostate&lt;/code&gt; std :: hash算法。</target>
        </trans-unit>
        <trans-unit id="efef95e91be1d84c2538bd2f5d8be0bfb5e24588" translate="yes" xml:space="preserve">
          <source>Specific error categories</source>
          <target state="translated">具体错误类别</target>
        </trans-unit>
        <trans-unit id="95c59c79b4cdd1fc7b8e82868c219069dbfbbe1c" translate="yes" xml:space="preserve">
          <source>Specifically,</source>
          <target state="translated">Specifically,</target>
        </trans-unit>
        <trans-unit id="602bc4c034950f0ade4842b450786dbf7326e87f" translate="yes" xml:space="preserve">
          <source>Specifically, &lt;code&gt;&lt;a href=&quot;convertibleto&quot;&gt;ConvertibleTo&lt;/a&gt;&amp;lt;From, To&amp;gt;&lt;/code&gt; is satisfied only if, given a function &lt;code&gt;fun&lt;/code&gt; of type &lt;code&gt;From ()&lt;/code&gt; such that the expression &lt;code&gt;fun()&lt;/code&gt; is equality-preserving (see below),</source>
          <target state="translated">具体而言， &lt;code&gt;&lt;a href=&quot;convertibleto&quot;&gt;ConvertibleTo&lt;/a&gt;&amp;lt;From, To&amp;gt;&lt;/code&gt; 被满足仅当给定一个功能 &lt;code&gt;fun&lt;/code&gt; 类型的 &lt;code&gt;From ()&lt;/code&gt; ，使得表达 &lt;code&gt;fun()&lt;/code&gt; 是平等保留（见下文），</target>
        </trans-unit>
        <trans-unit id="db78dbdb71aaa90916530b98b58ced9ba6564cdc" translate="yes" xml:space="preserve">
          <source>Specifically, &lt;code&gt;std::reference_wrapper&lt;/code&gt; is a &lt;a href=&quot;../../named_req/copyconstructible&quot;&gt;CopyConstructible&lt;/a&gt; and &lt;a href=&quot;../../named_req/copyassignable&quot;&gt;CopyAssignable&lt;/a&gt; wrapper around a reference to object or reference to function of type &lt;code&gt;T&lt;/code&gt;. Instances of &lt;code&gt;std::reference_wrapper&lt;/code&gt; are objects (they can be copied or stored in containers) but they are implicitly convertible to &lt;code&gt;T&amp;amp;&lt;/code&gt;, so that they can be used as arguments with the functions that take the underlying type by reference.</source>
          <target state="translated">具体来说， &lt;code&gt;std::reference_wrapper&lt;/code&gt; 是一个&lt;a href=&quot;../../named_req/copyconstructible&quot;&gt;CopyConstructible&lt;/a&gt;和&lt;a href=&quot;../../named_req/copyassignable&quot;&gt;CopyAssignable&lt;/a&gt;包装器，围绕对对象的引用或对类型的函数的引用 &lt;code&gt;T&lt;/code&gt; 的。 &lt;code&gt;std::reference_wrapper&lt;/code&gt; 实例是对象（可以将其复制或存储在容器中），但可以隐式转换为 &lt;code&gt;T&amp;amp;&lt;/code&gt; ，因此它们可以用作通过引用采用基础类型的函数的参数。</target>
        </trans-unit>
        <trans-unit id="1df412f45187c35d9893c7c5b5cd27a2f6d6a112" translate="yes" xml:space="preserve">
          <source>Specifically, &lt;code&gt;std::rotate&lt;/code&gt; swaps the elements in the range &lt;code&gt;[first, last)&lt;/code&gt; in such a way that the element &lt;code&gt;n_first&lt;/code&gt; becomes the first element of the new range and &lt;code&gt;n_first - 1&lt;/code&gt; becomes the last element.</source>
          <target state="translated">具体来说， &lt;code&gt;std::rotate&lt;/code&gt; 交换范围 &lt;code&gt;[first, last)&lt;/code&gt; 中的元素，以使元素 &lt;code&gt;n_first&lt;/code&gt; 成为新范围的第一个元素，而 &lt;code&gt;n_first - 1&lt;/code&gt; 成为最后一个元素。</target>
        </trans-unit>
        <trans-unit id="f84f5f4badf21edc006628f5798445653f43f512" translate="yes" xml:space="preserve">
          <source>Specifically, first &lt;code&gt;P&lt;/code&gt; is converted to disjunctive normal form and &lt;code&gt;Q&lt;/code&gt; is converted to conjunctive normal form. &lt;code&gt;P&lt;/code&gt; subsumes &lt;code&gt;Q&lt;/code&gt; if and only if:</source>
          <target state="translated">具体而言，首先将 &lt;code&gt;P&lt;/code&gt; 转换为析取范式，然后将 &lt;code&gt;Q&lt;/code&gt; 转换为析取范式。 &lt;code&gt;P&lt;/code&gt; 涵括 &lt;code&gt;Q&lt;/code&gt; 当且仅当：</target>
        </trans-unit>
        <trans-unit id="5cba85f77aa7430cfee47126ca01127a3952aa86" translate="yes" xml:space="preserve">
          <source>Specifically, partial ordering takes place in the following situations:</source>
          <target state="translated">具体来说,部分排序发生在以下情况。</target>
        </trans-unit>
        <trans-unit id="9a4be71b2931c171b2d4e3c19119a4720e801cc3" translate="yes" xml:space="preserve">
          <source>Specifically, these functions return.</source>
          <target state="translated">具体来说,这些函数返回:</target>
        </trans-unit>
        <trans-unit id="d9ff7d39e693899b2fb01c2af7e0b9aad8efd43b" translate="yes" xml:space="preserve">
          <source>Specifically:</source>
          <target state="translated">Specifically:</target>
        </trans-unit>
        <trans-unit id="675adfe3476229cd237b4d2fd189146d41be73b2" translate="yes" xml:space="preserve">
          <source>Specifiers</source>
          <target state="translated">Specifiers</target>
        </trans-unit>
        <trans-unit id="a1caa2edff634e8bec98acd995f893dc449a0d6e" translate="yes" xml:space="preserve">
          <source>Specifies available file open flags. It is a &lt;a href=&quot;../../named_req/bitmasktype&quot;&gt;BitmaskType&lt;/a&gt;, the following constants are defined:</source>
          <target state="translated">指定可用的文件打开标志。它是一个&lt;a href=&quot;../../named_req/bitmasktype&quot;&gt;BitmaskType&lt;/a&gt;，定义了以下常量：</target>
        </trans-unit>
        <trans-unit id="2850fef006b6b944b6497794aaefb91b462abe2d" translate="yes" xml:space="preserve">
          <source>Specifies available formatting flags. It is a &lt;a href=&quot;../../named_req/bitmasktype&quot;&gt;BitmaskType&lt;/a&gt;. The following constants are defined:</source>
          <target state="translated">指定可用的格式标志。它是一个&lt;a href=&quot;../../named_req/bitmasktype&quot;&gt;BitmaskType&lt;/a&gt;。定义了以下常量：</target>
        </trans-unit>
        <trans-unit id="cb779dd079a8d3e459e51752dd5d4816b0f83b35" translate="yes" xml:space="preserve">
          <source>Specifies file seeking direction type. The following constants are defined:</source>
          <target state="translated">指定文件查找方向类型。定义了以下常数。</target>
        </trans-unit>
        <trans-unit id="3499f44ebeefc016594ac5c37f09b8d9129d27da" translate="yes" xml:space="preserve">
          <source>Specifies preconditions, postconditions, and assertions for functions.</source>
          <target state="translated">指定函数的前提条件、后置条件和断言。</target>
        </trans-unit>
        <trans-unit id="2143bad35d1f2fbbd47539662a7a179dc7bf47ab" translate="yes" xml:space="preserve">
          <source>Specifies state of a future as returned by &lt;code&gt;wait_for&lt;/code&gt; and &lt;code&gt;wait_until&lt;/code&gt; functions of &lt;code&gt;&lt;a href=&quot;future&quot;&gt;std::future&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;shared_future&quot;&gt;std::shared_future&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">指定 &lt;code&gt;&lt;a href=&quot;future&quot;&gt;std::future&lt;/a&gt;&lt;/code&gt; 和 &lt;code&gt;&lt;a href=&quot;shared_future&quot;&gt;std::shared_future&lt;/a&gt;&lt;/code&gt; &lt;code&gt;wait_until&lt;/code&gt; 的 &lt;code&gt;wait_for&lt;/code&gt; 和wait_until函数返回的未来状态。</target>
        </trans-unit>
        <trans-unit id="da11e8ee385feb14fbf004b5f791712dc0780517" translate="yes" xml:space="preserve">
          <source>Specifies stream state flags. It is a &lt;a href=&quot;../../named_req/bitmasktype&quot;&gt;BitmaskType&lt;/a&gt;, the following constants are defined:</source>
          <target state="translated">指定流状态标志。它是一个&lt;a href=&quot;../../named_req/bitmasktype&quot;&gt;BitmaskType&lt;/a&gt;，定义了以下常量：</target>
        </trans-unit>
        <trans-unit id="71f6b5a60b0b269826814ffa140e352effb52a5e" translate="yes" xml:space="preserve">
          <source>Specifies that &lt;code&gt;&lt;a href=&quot;../errc&quot;&gt;std::errc&lt;/a&gt;&lt;/code&gt; is an error condition enum. This enables implicit conversion to &lt;code&gt;&lt;a href=&quot;../error_condition&quot;&gt;std::error_condition&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">指定 &lt;code&gt;&lt;a href=&quot;../errc&quot;&gt;std::errc&lt;/a&gt;&lt;/code&gt; 是错误条件枚举。这样可以隐式转换为 &lt;code&gt;&lt;a href=&quot;../error_condition&quot;&gt;std::error_condition&lt;/a&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="40209fd8a369aa7fc6403e72f4b4716656d7082e" translate="yes" xml:space="preserve">
          <source>Specifies that &lt;code&gt;&lt;a href=&quot;../future_errc&quot;&gt;std::future_errc&lt;/a&gt;&lt;/code&gt; is an error code enum. This enables &lt;code&gt;&lt;a href=&quot;../../error/error_code&quot;&gt;std::error_code&lt;/a&gt;&lt;/code&gt; automatic conversions.</source>
          <target state="translated">指定 &lt;code&gt;&lt;a href=&quot;../future_errc&quot;&gt;std::future_errc&lt;/a&gt;&lt;/code&gt; 是错误代码枚举。这将启用 &lt;code&gt;&lt;a href=&quot;../../error/error_code&quot;&gt;std::error_code&lt;/a&gt;&lt;/code&gt; 自动转换。</target>
        </trans-unit>
        <trans-unit id="412fe6ca3230fdc26500228eca990cd8bb20c0fb" translate="yes" xml:space="preserve">
          <source>Specifies that &lt;code&gt;^&lt;/code&gt; shall match the beginning of a line and &lt;code&gt;$&lt;/code&gt; shall match the end of a line, if the ECMAScript engine is selected.</source>
          <target state="translated">如果选择了ECMAScript引擎，则指定 &lt;code&gt;^&lt;/code&gt; 匹配行的开头， &lt;code&gt;$&lt;/code&gt; 匹配行的结尾。</target>
        </trans-unit>
        <trans-unit id="ce22337568229feaeef44935c6a25aeef4047a6f" translate="yes" xml:space="preserve">
          <source>Specifies that a &lt;a href=&quot;virtual&quot;&gt;virtual function&lt;/a&gt; cannot be overridden in a derived class or that a class cannot be &lt;a href=&quot;derived_class&quot;&gt;inherited from&lt;/a&gt;.</source>
          <target state="translated">指定不能在派生类中重写&lt;a href=&quot;virtual&quot;&gt;虚拟函数&lt;/a&gt;，或者不能从&lt;a href=&quot;derived_class&quot;&gt;继承&lt;/a&gt;类。</target>
        </trans-unit>
        <trans-unit id="d6652410dc292c5007f2fda79d6e08c4ff46aed4" translate="yes" xml:space="preserve">
          <source>Specifies that a &lt;a href=&quot;virtual&quot;&gt;virtual function&lt;/a&gt; overrides another virtual function.</source>
          <target state="translated">指定一个&lt;a href=&quot;virtual&quot;&gt;虚拟功能将&lt;/a&gt;覆盖另一个虚拟功能。</target>
        </trans-unit>
        <trans-unit id="58a189457ac13432965bf5e933104b789fcc04df" translate="yes" xml:space="preserve">
          <source>Specifies that a type is &lt;a href=&quot;../language/data_members#Standard_layout&quot;&gt;standard layout type&lt;/a&gt;. Standard layout types are useful for communicating with code written in other programming languages.</source>
          <target state="translated">指定类型为&lt;a href=&quot;../language/data_members#Standard_layout&quot;&gt;标准布局类型&lt;/a&gt;。标准布局类型对于与其他编程语言编写的代码进行通信很有用。</target>
        </trans-unit>
        <trans-unit id="97f2db1cf7b23349d1adeebe865a180e6747d323" translate="yes" xml:space="preserve">
          <source>Specifies that a type is a</source>
          <target state="translated">指定一个类型是一个</target>
        </trans-unit>
        <trans-unit id="e2ab2c1f43001817230ea7b5da552514bf9545e0" translate="yes" xml:space="preserve">
          <source>Specifies that a type is a trivial type.</source>
          <target state="translated">指定一个类型是一个微不足道的类型。</target>
        </trans-unit>
        <trans-unit id="2e72390ff2950300b0856757bee126466769677f" translate="yes" xml:space="preserve">
          <source>Specifies that an instance of the type can be assigned from an &lt;a href=&quot;../language/value_category&quot;&gt;rvalue&lt;/a&gt; argument.</source>
          <target state="translated">指定可以&lt;a href=&quot;../language/value_category&quot;&gt;从右值&lt;/a&gt;参数分配该类型的实例。</target>
        </trans-unit>
        <trans-unit id="ca72e6c27c36bc11e82dd994ddb760bc39ee3df1" translate="yes" xml:space="preserve">
          <source>Specifies that an instance of the type can be constructed from an &lt;a href=&quot;../language/value_category&quot;&gt;rvalue&lt;/a&gt; argument.</source>
          <target state="translated">指定可以&lt;a href=&quot;../language/value_category&quot;&gt;从右值&lt;/a&gt;参数构造类型的实例。</target>
        </trans-unit>
        <trans-unit id="fada4cd707b398cb1a5f86f68cfc3038b346c42e" translate="yes" xml:space="preserve">
          <source>Specifies that an instance of the type can be copy-assigned from an &lt;a href=&quot;../language/value_category&quot;&gt;lvalue expression&lt;/a&gt;.</source>
          <target state="translated">指定可以&lt;a href=&quot;../language/value_category&quot;&gt;从左值表达式&lt;/a&gt;复制分配该类型的实例。</target>
        </trans-unit>
        <trans-unit id="dd59f96e22ded7e4286f96c96495f1e28b8bb0ff" translate="yes" xml:space="preserve">
          <source>Specifies that an instance of the type can be copy-constructed from an &lt;a href=&quot;../language/value_category&quot;&gt;lvalue expression&lt;/a&gt;.</source>
          <target state="translated">指定可以&lt;a href=&quot;../language/value_category&quot;&gt;从左值表达式&lt;/a&gt;复制构造该类型的实例。</target>
        </trans-unit>
        <trans-unit id="8ac12f39fb79216f7e1a02d97e0b63af88a4643a" translate="yes" xml:space="preserve">
          <source>Specifies that an instance of the type can be copy-constructed in-place by a given allocator.</source>
          <target state="translated">指定该类型的实例可以由给定的分配器在原地复制构建。</target>
        </trans-unit>
        <trans-unit id="03fae4eb0c4ad42c583a672e2e545d274ab592b7" translate="yes" xml:space="preserve">
          <source>Specifies that an instance of the type can be default constructed.</source>
          <target state="translated">指定该类型的实例可以被默认构造。</target>
        </trans-unit>
        <trans-unit id="b23f9e379358b39515cc638465e5eef9c060039a" translate="yes" xml:space="preserve">
          <source>Specifies that an instance of the type can be default-constructed in-place by a given allocator.</source>
          <target state="translated">指定该类型的实例可以由给定的分配器在原地默认构造。</target>
        </trans-unit>
        <trans-unit id="50aa7b3d1e4fcbdf2207bccb8a04a767175e6369" translate="yes" xml:space="preserve">
          <source>Specifies that an instance of the type can be destructed.</source>
          <target state="translated">指定该类型的实例可以被销毁。</target>
        </trans-unit>
        <trans-unit id="3d47e9869a2643d9f79cb28f6a04ee15b388eb74" translate="yes" xml:space="preserve">
          <source>Specifies that an object of the type can be constructed from a given set of arguments in uninitialized storage by a given allocator.</source>
          <target state="translated">指定该类型的对象可以由给定的分配器在未初始化的存储中从给定的参数集构造。</target>
        </trans-unit>
        <trans-unit id="7f0f9886e068ff9ff576b4c801087069812b4ba9" translate="yes" xml:space="preserve">
          <source>Specifies that an object of the type can be constructed into uninitialized storage from an rvalue of that type by a given allocator.</source>
          <target state="translated">指定该类型的对象可以由给定的分配器从该类型的r值构造成未初始化的存储。</target>
        </trans-unit>
        <trans-unit id="70d20b70339dff5e1ba087d45352207cfaace310" translate="yes" xml:space="preserve">
          <source>Specifies that an object of the type can be destroyed by a given &lt;a href=&quot;allocator&quot;&gt;Allocator&lt;/a&gt;.</source>
          <target state="translated">指定给定的&lt;a href=&quot;allocator&quot;&gt;Allocator&lt;/a&gt;可以销毁该类型的对象。</target>
        </trans-unit>
        <trans-unit id="27c439236dbcdd96b8d9abb6b7e6d97a9cfc0caa" translate="yes" xml:space="preserve">
          <source>Specifies that the type can be used as the template argument of &lt;code&gt;&lt;a href=&quot;../numeric/valarray&quot;&gt;std::valarray&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">指定类型可以用作 &lt;code&gt;&lt;a href=&quot;../numeric/valarray&quot;&gt;std::valarray&lt;/a&gt;&lt;/code&gt; 的模板参数。</target>
        </trans-unit>
        <trans-unit id="baa189d189bb2fc05ffc4c0f6cb568c1117f8841" translate="yes" xml:space="preserve">
          <source>Specifies that the type is POD (Plain Old Data) type. This means the type is compatible with the types used in the C programming language, that is, can be exchanged with C libraries directly, in its binary form.</source>
          <target state="translated">指定该类型为POD(Plain Old Data)类型。这意味着该类型与C编程语言中使用的类型兼容,即可以直接与C库交换,以二进制形式存在。</target>
        </trans-unit>
        <trans-unit id="6aae228780e11235e1b16e156a121c9f3fdc04a2" translate="yes" xml:space="preserve">
          <source>Specifies that the type is a pointer-like object which can be compared to &lt;code&gt;&lt;a href=&quot;../types/nullptr_t&quot;&gt;std::nullptr_t&lt;/a&gt;&lt;/code&gt; objects.</source>
          <target state="translated">指定类型为可以与 &lt;code&gt;&lt;a href=&quot;../types/nullptr_t&quot;&gt;std::nullptr_t&lt;/a&gt;&lt;/code&gt; 对象进行比较的类似指针的对象。</target>
        </trans-unit>
        <trans-unit id="3541d77f9d2355ee7b5c6624cc3612f9b80fd905" translate="yes" xml:space="preserve">
          <source>Specifies the &lt;a href=&quot;objects#Alignment&quot;&gt;alignment requirement&lt;/a&gt; of a type or an object.</source>
          <target state="translated">指定类型或对象的&lt;a href=&quot;objects#Alignment&quot;&gt;对齐要求&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="b77403e83293931543e74e71906ebdf304265e72" translate="yes" xml:space="preserve">
          <source>Specifies the current rounding direction of floating-point arithmetic operations.</source>
          <target state="translated">指定当前浮点算术运算的取整方向。</target>
        </trans-unit>
        <trans-unit id="7d379181a80eaa4855639c972b4a9c64ce8af284" translate="yes" xml:space="preserve">
          <source>Specifies the event type which is passed to functions registered by &lt;code&gt;&lt;a href=&quot;register_callback&quot;&gt;register_callback()&lt;/a&gt;&lt;/code&gt; on specific events. The following constants are defined:</source>
          <target state="translated">指定在特定事件上传递给 &lt;code&gt;&lt;a href=&quot;register_callback&quot;&gt;register_callback()&lt;/a&gt;&lt;/code&gt; 注册的函数的事件类型。定义了以下常量：</target>
        </trans-unit>
        <trans-unit id="fca0d9d3165620a22e1ca17eeba63839f6f29489" translate="yes" xml:space="preserve">
          <source>Specifies the launch policy for a task executed by the &lt;code&gt;&lt;a href=&quot;async&quot;&gt;std::async&lt;/a&gt;&lt;/code&gt; function. &lt;code&gt;std::launch&lt;/code&gt; is an enumeration used as &lt;a href=&quot;../named_req/bitmasktype&quot;&gt;BitmaskType&lt;/a&gt;.</source>
          <target state="translated">指定由 &lt;code&gt;&lt;a href=&quot;async&quot;&gt;std::async&lt;/a&gt;&lt;/code&gt; 函数执行的任务的启动策略。 &lt;code&gt;std::launch&lt;/code&gt; 是用作&lt;a href=&quot;../named_req/bitmasktype&quot;&gt;BitmaskType&lt;/a&gt;的枚举。</target>
        </trans-unit>
        <trans-unit id="48b0001fd2a02fb0f468013a53302aefe8836854" translate="yes" xml:space="preserve">
          <source>Specifies the precision in which all floating-point arithmetic operations other than assignment and cast are done.</source>
          <target state="translated">指定除赋值和转置以外的所有浮点算术运算的精度。</target>
        </trans-unit>
        <trans-unit id="f50baf895b35222407d8333cfba86a5891605e65" translate="yes" xml:space="preserve">
          <source>Specifies whether a function could throw exceptions.</source>
          <target state="translated">指定函数是否可以抛出异常。</target>
        </trans-unit>
        <trans-unit id="2b26298b40d0f4780093d39d638a913d5430e82b" translate="yes" xml:space="preserve">
          <source>Splicing maps and sets (&lt;code&gt;&lt;a href=&quot;container/map/extract&quot;&gt;std::map::extract&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;container/map/merge&quot;&gt;std::map::merge&lt;/a&gt;&lt;/code&gt;, &lt;a href=&quot;container/map/insert&quot;&gt;&lt;code&gt;std::map::insert(node_type)&lt;/code&gt;&lt;/a&gt;, etc)</source>
          <target state="translated">拼接地图和集合（ &lt;code&gt;&lt;a href=&quot;container/map/extract&quot;&gt;std::map::extract&lt;/a&gt;&lt;/code&gt; ， &lt;code&gt;&lt;a href=&quot;container/map/merge&quot;&gt;std::map::merge&lt;/a&gt;&lt;/code&gt; ，&lt;a href=&quot;container/map/insert&quot;&gt; &lt;code&gt;std::map::insert(node_type)&lt;/code&gt; &lt;/a&gt;等）</target>
        </trans-unit>
        <trans-unit id="d128c542a0977a832c33da77100282c39f685850" translate="yes" xml:space="preserve">
          <source>Stack is not unwound: destructors of variables with automatic &lt;a href=&quot;../../language/storage_duration&quot;&gt; storage duration&lt;/a&gt; are not called.</source>
          <target state="translated">不会取消堆栈：不调用具有自动&lt;a href=&quot;../../language/storage_duration&quot;&gt;存储持续时间&lt;/a&gt;的变量的析构函数。</target>
        </trans-unit>
        <trans-unit id="4567779bd1675996144b2748fafeb695d8826f97" translate="yes" xml:space="preserve">
          <source>Stack unwinding</source>
          <target state="translated">堆栈放线</target>
        </trans-unit>
        <trans-unit id="7734fcdf94be5e3e0e62cbe34bf10da82bd57664" translate="yes" xml:space="preserve">
          <source>Stage 1: conversion specifier selection</source>
          <target state="translated">阶段1:转换指定器选择</target>
        </trans-unit>
        <trans-unit id="f229abe33b912ba3dfcb35234eca7eda55ea2436" translate="yes" xml:space="preserve">
          <source>Stage 2: character extraction</source>
          <target state="translated">第二阶段:字符提取</target>
        </trans-unit>
        <trans-unit id="f1af41900429ff41a2249450493e1008b35eef80" translate="yes" xml:space="preserve">
          <source>Stage 2: locale-specific conversion</source>
          <target state="translated">第二阶段:因地制宜的转换</target>
        </trans-unit>
        <trans-unit id="32f4145279ebf203d787e38ce057d611157577de" translate="yes" xml:space="preserve">
          <source>Stage 3: conversion and storage</source>
          <target state="translated">第三阶段:转换和储存</target>
        </trans-unit>
        <trans-unit id="a4131d11d9a0e8c35b6c408e01ffdce46ef839c7" translate="yes" xml:space="preserve">
          <source>Stage 3: padding</source>
          <target state="translated">阶段3:填充</target>
        </trans-unit>
        <trans-unit id="f99aab4a8642dbb54c9c31ed3e6c1b7e1ea21d61" translate="yes" xml:space="preserve">
          <source>Stage 4: output</source>
          <target state="translated">第四阶段:产出</target>
        </trans-unit>
        <trans-unit id="2dfa66079d9b7229409430972fd5f1567d78a3b6" translate="yes" xml:space="preserve">
          <source>Standard</source>
          <target state="translated">Standard</target>
        </trans-unit>
        <trans-unit id="4f8403e30afda69e5d85ce78b52a98f57c10276f" translate="yes" xml:space="preserve">
          <source>Standard algorithms such as &lt;code&gt;&lt;a href=&quot;../algorithm/sort&quot;&gt;std::sort&lt;/a&gt;&lt;/code&gt; and containers such as &lt;code&gt;&lt;a href=&quot;../container/set&quot;&gt;std::set&lt;/a&gt;&lt;/code&gt; expect &lt;code&gt;operator&amp;lt;&lt;/code&gt; to be defined, by default, for the user-provided types, and expect it to implement strict weak ordering (thus satisfying the &lt;a href=&quot;../named_req/compare&quot;&gt;Compare&lt;/a&gt; requirements). An idiomatic way to implement strict weak ordering for a structure is to use lexicographical comparison provided by &lt;code&gt;&lt;a href=&quot;../utility/tuple/tie&quot;&gt;std::tie&lt;/a&gt;&lt;/code&gt;:</source>
          <target state="translated">默认情况下，标准算法（例如 &lt;code&gt;&lt;a href=&quot;../algorithm/sort&quot;&gt;std::sort&lt;/a&gt;&lt;/code&gt; 和容器（例如 &lt;code&gt;&lt;a href=&quot;../container/set&quot;&gt;std::set&lt;/a&gt;&lt;/code&gt; 期望为用户提供的类型定义 &lt;code&gt;operator&amp;lt;&lt;/code&gt; ，并期望其实现严格的弱排序（从而满足&amp;ldquo; &lt;a href=&quot;../named_req/compare&quot;&gt;比较&amp;rdquo;&lt;/a&gt;要求）。实现结构的严格弱排序的惯用方式是使用 &lt;code&gt;&lt;a href=&quot;../utility/tuple/tie&quot;&gt;std::tie&lt;/a&gt;&lt;/code&gt; 提供的字典比较：</target>
        </trans-unit>
        <trans-unit id="5328552aac39954649b5d41d7c9d3dceb11e3086" translate="yes" xml:space="preserve">
          <source>Standard approach to preventing multiple inclusion of the same header is by using &lt;a href=&quot;https://en.wikipedia.org/wiki/Include_guard&quot;&gt;include guards&lt;/a&gt;:</source>
          <target state="translated">防止多次包含同一标头的标准方法是使用&lt;a href=&quot;https://en.wikipedia.org/wiki/Include_guard&quot;&gt;include防护&lt;/a&gt;：</target>
        </trans-unit>
        <trans-unit id="09a6dcfa27a50519251182ae7d40e7305827e30f" translate="yes" xml:space="preserve">
          <source>Standard attributes</source>
          <target state="translated">标准属性</target>
        </trans-unit>
        <trans-unit id="71d764f76d4965fc86057a5939b4a260bac04aff" translate="yes" xml:space="preserve">
          <source>Standard exception objects</source>
          <target state="translated">标准异常对象</target>
        </trans-unit>
        <trans-unit id="4699acdfb53b46562b7b56c7205e17320756dba8" translate="yes" xml:space="preserve">
          <source>Standard layout</source>
          <target state="translated">标准布局</target>
        </trans-unit>
        <trans-unit id="24cdc73cf5d5cd6b52d459b131965c7490f35646" translate="yes" xml:space="preserve">
          <source>Standard layout types have the following special properties:</source>
          <target state="translated">标准布局类型具有以下特殊属性。</target>
        </trans-unit>
        <trans-unit id="360c57caedbd1d1ff38dde144677c893d6ad3792" translate="yes" xml:space="preserve">
          <source>Standard library</source>
          <target state="translated">标准库</target>
        </trans-unit>
        <trans-unit id="78b65c784c24e64adb5fb181fab92370d4eb9c22" translate="yes" xml:space="preserve">
          <source>Standard library concepts</source>
          <target state="translated">标准图书馆概念</target>
        </trans-unit>
        <trans-unit id="30310cff7697d93c13896a3a67af260d5ac15abe" translate="yes" xml:space="preserve">
          <source>Standard library header &amp;lt;algorithm&amp;gt;</source>
          <target state="translated">标准库头文件&amp;lt;算法&amp;gt;</target>
        </trans-unit>
        <trans-unit id="5344d1cec2faadaebd419c796e19f8c028b4dc6c" translate="yes" xml:space="preserve">
          <source>Standard library header &amp;lt;any&amp;gt;</source>
          <target state="translated">标准库头文件&amp;lt;any&amp;gt;</target>
        </trans-unit>
        <trans-unit id="c9625d8b6cb5d990c798ad2022e9bdd3dc5447d1" translate="yes" xml:space="preserve">
          <source>Standard library header &amp;lt;array&amp;gt;</source>
          <target state="translated">标准库头文件&amp;lt;array&amp;gt;</target>
        </trans-unit>
        <trans-unit id="a530bd05fce769575e24496fcfdd72538bb4d119" translate="yes" xml:space="preserve">
          <source>Standard library header &amp;lt;atomic&amp;gt;</source>
          <target state="translated">标准库头文件&amp;lt;atomic&amp;gt;</target>
        </trans-unit>
        <trans-unit id="f10a243ee71eb95d0ac0c027199b1c5806f1c4b5" translate="yes" xml:space="preserve">
          <source>Standard library header &amp;lt;bit&amp;gt;</source>
          <target state="translated">标准库头文件&amp;lt;bit&amp;gt;</target>
        </trans-unit>
        <trans-unit id="3db9347fa205973e43295f2a661f44267dfdb525" translate="yes" xml:space="preserve">
          <source>Standard library header &amp;lt;bitset&amp;gt;</source>
          <target state="translated">标准库头文件&amp;lt;bitset&amp;gt;</target>
        </trans-unit>
        <trans-unit id="aa3dbcd5aa2ae89b3545f3ea6c49ddc3c5666f8c" translate="yes" xml:space="preserve">
          <source>Standard library header &amp;lt;cassert&amp;gt;</source>
          <target state="translated">标准库头文件&amp;lt;cassert&amp;gt;</target>
        </trans-unit>
        <trans-unit id="df3cee2bf7a87d57f1feab1408c95b1ec3e6bffd" translate="yes" xml:space="preserve">
          <source>Standard library header &amp;lt;ccomplex&amp;gt;</source>
          <target state="translated">标准库头文件&amp;lt;ccomplex&amp;gt;</target>
        </trans-unit>
        <trans-unit id="08d91eea93243071941079aeece2a92fb3bfe82c" translate="yes" xml:space="preserve">
          <source>Standard library header &amp;lt;cctype&amp;gt;</source>
          <target state="translated">标准库头文件&amp;lt;cctype&amp;gt;</target>
        </trans-unit>
        <trans-unit id="c331f5c576ec7ee184ffeabece835d0638a5381d" translate="yes" xml:space="preserve">
          <source>Standard library header &amp;lt;cerrno&amp;gt;</source>
          <target state="translated">标准库头文件&amp;lt;cerrno&amp;gt;</target>
        </trans-unit>
        <trans-unit id="830e9e4da6bf32e8dfee8a84aac3326ded51b59b" translate="yes" xml:space="preserve">
          <source>Standard library header &amp;lt;cfenv&amp;gt;</source>
          <target state="translated">标准库头文件&amp;lt;cfenv&amp;gt;</target>
        </trans-unit>
        <trans-unit id="ad562de008a9052d500945091f82459b8008e4b2" translate="yes" xml:space="preserve">
          <source>Standard library header &amp;lt;cfloat&amp;gt;</source>
          <target state="translated">标准库头文件&amp;lt;cfloat&amp;gt;</target>
        </trans-unit>
        <trans-unit id="d546c38369695420f59e87bf6a807dfe86de89e7" translate="yes" xml:space="preserve">
          <source>Standard library header &amp;lt;charconv&amp;gt;</source>
          <target state="translated">标准库头文件&amp;lt;charconv&amp;gt;</target>
        </trans-unit>
        <trans-unit id="f756f3f41db8d5458a4516da178bff0063c084a8" translate="yes" xml:space="preserve">
          <source>Standard library header &amp;lt;chrono&amp;gt;</source>
          <target state="translated">标准库头文件&amp;lt;chrono&amp;gt;</target>
        </trans-unit>
        <trans-unit id="e916a895ce400df95c2636c67692899fd43470cd" translate="yes" xml:space="preserve">
          <source>Standard library header &amp;lt;cinttypes&amp;gt;</source>
          <target state="translated">标准库头文件&amp;lt;cinttypes&amp;gt;</target>
        </trans-unit>
        <trans-unit id="6597f1b7afbc44e2063e8ac6c6d9660786f3b9c5" translate="yes" xml:space="preserve">
          <source>Standard library header &amp;lt;ciso646&amp;gt;</source>
          <target state="translated">标准库头文件&amp;lt;ciso646&amp;gt;</target>
        </trans-unit>
        <trans-unit id="d666b426218283af2a00e6c438e0180e8a245379" translate="yes" xml:space="preserve">
          <source>Standard library header &amp;lt;climits&amp;gt;</source>
          <target state="translated">标准库头文件&amp;lt;climits&amp;gt;</target>
        </trans-unit>
        <trans-unit id="1631ea3f206efa9ef405b40cdbc5a15718f6515a" translate="yes" xml:space="preserve">
          <source>Standard library header &amp;lt;clocale&amp;gt;</source>
          <target state="translated">标准库头文件&amp;lt;clocale&amp;gt;</target>
        </trans-unit>
        <trans-unit id="92713620a0b61bdd61d2d29e019839c9f2901a7d" translate="yes" xml:space="preserve">
          <source>Standard library header &amp;lt;cmath&amp;gt;</source>
          <target state="translated">标准库头文件&amp;lt;cmath&amp;gt;</target>
        </trans-unit>
        <trans-unit id="906f1f5f3a4714d9c3d8e2754c1217c810037ed5" translate="yes" xml:space="preserve">
          <source>Standard library header &amp;lt;codecvt&amp;gt;</source>
          <target state="translated">标准库头文件&amp;lt;codecvt&amp;gt;</target>
        </trans-unit>
        <trans-unit id="9c276a1d54c8cb82e3e38bf0b647dae253b3bfe8" translate="yes" xml:space="preserve">
          <source>Standard library header &amp;lt;compare&amp;gt;</source>
          <target state="translated">标准库头文件&amp;lt;compare&amp;gt;</target>
        </trans-unit>
        <trans-unit id="aa1c30a31bd0f54b89b18d77ca14ad7cdbc8ee08" translate="yes" xml:space="preserve">
          <source>Standard library header &amp;lt;complex&amp;gt;</source>
          <target state="translated">标准库头文件&amp;lt;complex&amp;gt;</target>
        </trans-unit>
        <trans-unit id="b0369b803a0638ae66301a82f5a513d5664dd188" translate="yes" xml:space="preserve">
          <source>Standard library header &amp;lt;concepts&amp;gt;</source>
          <target state="translated">标准库头文件&amp;lt;concepts&amp;gt;</target>
        </trans-unit>
        <trans-unit id="233e3073fb8f89c94465d27d51856227467c314f" translate="yes" xml:space="preserve">
          <source>Standard library header &amp;lt;condition_variable&amp;gt;</source>
          <target state="translated">标准库头文件&amp;lt;condition_variable&amp;gt;</target>
        </trans-unit>
        <trans-unit id="351a759a265e3e8e556c5d972856fb61ba8bdc8b" translate="yes" xml:space="preserve">
          <source>Standard library header &amp;lt;contract&amp;gt;</source>
          <target state="translated">标准库头文件&amp;lt;contract&amp;gt;</target>
        </trans-unit>
        <trans-unit id="43eaa00ef27cc10c810d1383719652104d09d428" translate="yes" xml:space="preserve">
          <source>Standard library header &amp;lt;csetjmp&amp;gt;</source>
          <target state="translated">标准库头文件&amp;lt;csetjmp&amp;gt;</target>
        </trans-unit>
        <trans-unit id="12033a038a7443be07e73859625c633d9bfdff93" translate="yes" xml:space="preserve">
          <source>Standard library header &amp;lt;csignal&amp;gt;</source>
          <target state="translated">标准库头文件&amp;lt;csignal&amp;gt;</target>
        </trans-unit>
        <trans-unit id="ec12d91f53956a9a0af121e45d4189f320f61565" translate="yes" xml:space="preserve">
          <source>Standard library header &amp;lt;cstdalign&amp;gt;</source>
          <target state="translated">标准库头文件&amp;lt;cstdalign&amp;gt;</target>
        </trans-unit>
        <trans-unit id="ea6a5851554b8ff8e984144b36d2d1c13bea0008" translate="yes" xml:space="preserve">
          <source>Standard library header &amp;lt;cstdarg&amp;gt;</source>
          <target state="translated">标准库头文件&amp;lt;cstdarg&amp;gt;</target>
        </trans-unit>
        <trans-unit id="3f80662ebf89f08df7d8af0e8e6a2176995d6f27" translate="yes" xml:space="preserve">
          <source>Standard library header &amp;lt;cstdbool&amp;gt;</source>
          <target state="translated">标准库头文件&amp;lt;cstdbool&amp;gt;</target>
        </trans-unit>
        <trans-unit id="079d44f3fc59b40b54b5f8acafa551a74edc2e22" translate="yes" xml:space="preserve">
          <source>Standard library header &amp;lt;cstddef&amp;gt;</source>
          <target state="translated">标准库头文件&amp;lt;cstddef&amp;gt;</target>
        </trans-unit>
        <trans-unit id="63e3266e930172336eb078485a75b8919264ca78" translate="yes" xml:space="preserve">
          <source>Standard library header &amp;lt;cstdint&amp;gt;</source>
          <target state="translated">标准库头文件&amp;lt;cstdint&amp;gt;</target>
        </trans-unit>
        <trans-unit id="11d5cb8c021822da90fafef999077828ad8ab5a7" translate="yes" xml:space="preserve">
          <source>Standard library header &amp;lt;cstdio&amp;gt;</source>
          <target state="translated">标准库头文件&amp;lt;cstdio&amp;gt;</target>
        </trans-unit>
        <trans-unit id="577206f7a97d3603251f05ecf1edf20e6acf0962" translate="yes" xml:space="preserve">
          <source>Standard library header &amp;lt;cstdlib&amp;gt;</source>
          <target state="translated">标准库头文件&amp;lt;cstdlib&amp;gt;</target>
        </trans-unit>
        <trans-unit id="1a90b5389499364b47d1a36742b91c24b0310d26" translate="yes" xml:space="preserve">
          <source>Standard library header &amp;lt;cstring&amp;gt;</source>
          <target state="translated">标准库头文件&amp;lt;cstring&amp;gt;</target>
        </trans-unit>
        <trans-unit id="299970c7900bda638ac85a38e14969c15293ee41" translate="yes" xml:space="preserve">
          <source>Standard library header &amp;lt;ctgmath&amp;gt;</source>
          <target state="translated">标准库头文件&amp;lt;ctgmath&amp;gt;</target>
        </trans-unit>
        <trans-unit id="ff6fbcd4e55e5c106b2c07aa666868d9a3dfb1db" translate="yes" xml:space="preserve">
          <source>Standard library header &amp;lt;ctime&amp;gt;</source>
          <target state="translated">标准库头文件&amp;lt;ctime&amp;gt;</target>
        </trans-unit>
        <trans-unit id="48a271bfc9dada552cf9be719f164a3fd49ea12d" translate="yes" xml:space="preserve">
          <source>Standard library header &amp;lt;cuchar&amp;gt;</source>
          <target state="translated">标准库头文件&amp;lt;cuchar&amp;gt;</target>
        </trans-unit>
        <trans-unit id="2f9df7f6c4488b01abfd0e614a3f1e92e9212b2b" translate="yes" xml:space="preserve">
          <source>Standard library header &amp;lt;cwchar&amp;gt;</source>
          <target state="translated">标准库头文件&amp;lt;cwchar&amp;gt;</target>
        </trans-unit>
        <trans-unit id="c01c30d663c313a1e2a4b054a60a033f651b189b" translate="yes" xml:space="preserve">
          <source>Standard library header &amp;lt;cwctype&amp;gt;</source>
          <target state="translated">标准库头文件&amp;lt;cwctype&amp;gt;</target>
        </trans-unit>
        <trans-unit id="f4629e786fd7addb2685516f54f1e8ce49e41b1c" translate="yes" xml:space="preserve">
          <source>Standard library header &amp;lt;deque&amp;gt;</source>
          <target state="translated">标准库头文件&amp;lt;deque&amp;gt;</target>
        </trans-unit>
        <trans-unit id="60e438e3415d1f8cbdf62bee12e375ef78c1f51d" translate="yes" xml:space="preserve">
          <source>Standard library header &amp;lt;exception&amp;gt;</source>
          <target state="translated">标准库头文件&amp;lt;exception&amp;gt;</target>
        </trans-unit>
        <trans-unit id="6ba10e4b6a68932b7c60073bb46b3f5aed140231" translate="yes" xml:space="preserve">
          <source>Standard library header &amp;lt;execution&amp;gt;</source>
          <target state="translated">标准库头文件&amp;lt;execution&amp;gt;</target>
        </trans-unit>
        <trans-unit id="faefee713db48bf27967466e82c31d0610246f30" translate="yes" xml:space="preserve">
          <source>Standard library header &amp;lt;filesystem&amp;gt;</source>
          <target state="translated">标准库头文件&amp;lt;文件系统&amp;gt;</target>
        </trans-unit>
        <trans-unit id="1d875954e0a2ef650c43a6671a35a6dbc76f36db" translate="yes" xml:space="preserve">
          <source>Standard library header &amp;lt;forward_list&amp;gt;</source>
          <target state="translated">标准库头文件&amp;lt;forward_list&amp;gt;</target>
        </trans-unit>
        <trans-unit id="ac325916c78f0414563b9a70f6eb5b7a57c42025" translate="yes" xml:space="preserve">
          <source>Standard library header &amp;lt;fstream&amp;gt;</source>
          <target state="translated">标准库头文件&amp;lt;fstream&amp;gt;</target>
        </trans-unit>
        <trans-unit id="f7b68d46c5e7472cabb6595bb9ce1d93b67ba991" translate="yes" xml:space="preserve">
          <source>Standard library header &amp;lt;functional&amp;gt;</source>
          <target state="translated">标准库头文件&amp;lt;functional&amp;gt;</target>
        </trans-unit>
        <trans-unit id="d96aaf61f1d6e7f54dd7956941708c503c0be452" translate="yes" xml:space="preserve">
          <source>Standard library header &amp;lt;future&amp;gt;</source>
          <target state="translated">标准库头文件&amp;lt;future&amp;gt;</target>
        </trans-unit>
        <trans-unit id="a00067ade34a10bd1a45c15e2e0ef910df4114d2" translate="yes" xml:space="preserve">
          <source>Standard library header &amp;lt;initializer_list&amp;gt;</source>
          <target state="translated">标准库头文件&amp;lt;initializer_list&amp;gt;</target>
        </trans-unit>
        <trans-unit id="a91d48c0f4a86cd2f4d47246198afd343d656523" translate="yes" xml:space="preserve">
          <source>Standard library header &amp;lt;iomanip&amp;gt;</source>
          <target state="translated">标准库头文件&amp;lt;iomanip&amp;gt;</target>
        </trans-unit>
        <trans-unit id="bc322e45cd1fed81b3bab917180b6baf54106d5b" translate="yes" xml:space="preserve">
          <source>Standard library header &amp;lt;ios&amp;gt;</source>
          <target state="translated">标准库头文件&amp;lt;ios&amp;gt;</target>
        </trans-unit>
        <trans-unit id="cf0dd7c7b613409eda7d05ab59a1390748609d4d" translate="yes" xml:space="preserve">
          <source>Standard library header &amp;lt;iosfwd&amp;gt;</source>
          <target state="translated">标准库头文件&amp;lt;iosfwd&amp;gt;</target>
        </trans-unit>
        <trans-unit id="32094c5a92210cb3de27616406d1b148df67a476" translate="yes" xml:space="preserve">
          <source>Standard library header &amp;lt;iostream&amp;gt;</source>
          <target state="translated">标准库头文件&amp;lt;iostream&amp;gt;</target>
        </trans-unit>
        <trans-unit id="b908fd7d41deb24ead7593991fb25cf90f6502a9" translate="yes" xml:space="preserve">
          <source>Standard library header &amp;lt;istream&amp;gt;</source>
          <target state="translated">标准库头文件&amp;lt;istream&amp;gt;</target>
        </trans-unit>
        <trans-unit id="399fcfa6fe77d3965437ae6534d0e2a7a9bc1026" translate="yes" xml:space="preserve">
          <source>Standard library header &amp;lt;iterator&amp;gt;</source>
          <target state="translated">标准库头文件&amp;lt;iterator&amp;gt;</target>
        </trans-unit>
        <trans-unit id="96367d7ad1f1162a7e8b08e3a07859319a2699fa" translate="yes" xml:space="preserve">
          <source>Standard library header &amp;lt;limits&amp;gt;</source>
          <target state="translated">标准库头文件&amp;lt;limits&amp;gt;</target>
        </trans-unit>
        <trans-unit id="724dedb2749e1d51c8dc5d7fbe651bbca2f5fa73" translate="yes" xml:space="preserve">
          <source>Standard library header &amp;lt;list&amp;gt;</source>
          <target state="translated">标准库头文件&amp;lt;list&amp;gt;</target>
        </trans-unit>
        <trans-unit id="2b992a0581c637592ab75f131008e805ea39ebca" translate="yes" xml:space="preserve">
          <source>Standard library header &amp;lt;locale&amp;gt;</source>
          <target state="translated">标准库头文件&amp;lt;locale&amp;gt;</target>
        </trans-unit>
        <trans-unit id="d7054a59522cc13caf893f31a9f9cad637811cec" translate="yes" xml:space="preserve">
          <source>Standard library header &amp;lt;map&amp;gt;</source>
          <target state="translated">标准库头文件&amp;lt;map&amp;gt;</target>
        </trans-unit>
        <trans-unit id="f45cf910d7be8b33b2c672801cf7d3369acdf3d3" translate="yes" xml:space="preserve">
          <source>Standard library header &amp;lt;memory&amp;gt;</source>
          <target state="translated">标准库头文件&amp;lt;memory&amp;gt;</target>
        </trans-unit>
        <trans-unit id="719d1944cc64a805fb7c6ce11306559e6f26a70f" translate="yes" xml:space="preserve">
          <source>Standard library header &amp;lt;memory_resource&amp;gt;</source>
          <target state="translated">标准库头文件&amp;lt;memory_resource&amp;gt;</target>
        </trans-unit>
        <trans-unit id="905738ae8c67056cdb44f49cd4526170f8dc668f" translate="yes" xml:space="preserve">
          <source>Standard library header &amp;lt;mutex&amp;gt;</source>
          <target state="translated">标准库头文件&amp;lt;mutex&amp;gt;</target>
        </trans-unit>
        <trans-unit id="3868c3bf80a77fad928a4182e9475d99185f519e" translate="yes" xml:space="preserve">
          <source>Standard library header &amp;lt;new&amp;gt;</source>
          <target state="translated">标准库头文件&amp;lt;新&amp;gt;</target>
        </trans-unit>
        <trans-unit id="927c3b2f40db408bdeb32453b1c2c882400a9e67" translate="yes" xml:space="preserve">
          <source>Standard library header &amp;lt;numeric&amp;gt;</source>
          <target state="translated">标准库头文件&amp;lt;数字&amp;gt;</target>
        </trans-unit>
        <trans-unit id="03d0b5be06821d285dfcef64f0faaf8b939037c5" translate="yes" xml:space="preserve">
          <source>Standard library header &amp;lt;optional&amp;gt;</source>
          <target state="translated">标准库头文件&amp;lt;可选&amp;gt;</target>
        </trans-unit>
        <trans-unit id="25440f88b2737d09c41a26279353c4381e83dd15" translate="yes" xml:space="preserve">
          <source>Standard library header &amp;lt;ostream&amp;gt;</source>
          <target state="translated">标准库头文件&amp;lt;ostream&amp;gt;</target>
        </trans-unit>
        <trans-unit id="c4b011ab900fefd40ff0629146651abfc03db5fb" translate="yes" xml:space="preserve">
          <source>Standard library header &amp;lt;queue&amp;gt;</source>
          <target state="translated">标准库头文件&amp;lt;queue&amp;gt;</target>
        </trans-unit>
        <trans-unit id="4c6d9f52d447ecd9024e3ca364c76ecb28adc8ba" translate="yes" xml:space="preserve">
          <source>Standard library header &amp;lt;random&amp;gt;</source>
          <target state="translated">标准库头文件&amp;lt;random&amp;gt;</target>
        </trans-unit>
        <trans-unit id="6eb3b8e90d58778b73b7097c2a4ad368ba35093b" translate="yes" xml:space="preserve">
          <source>Standard library header &amp;lt;ranges&amp;gt;</source>
          <target state="translated">标准库头文件&amp;lt;ranges&amp;gt;</target>
        </trans-unit>
        <trans-unit id="cd292d1c47c7882b2cf07a12511af1ff4ef92afe" translate="yes" xml:space="preserve">
          <source>Standard library header &amp;lt;ratio&amp;gt;</source>
          <target state="translated">标准库头文件&amp;lt;ratio&amp;gt;</target>
        </trans-unit>
        <trans-unit id="5d31d2b6b6a47547e02d0b141ea0800237510092" translate="yes" xml:space="preserve">
          <source>Standard library header &amp;lt;regex&amp;gt;</source>
          <target state="translated">标准库头文件&amp;lt;regex&amp;gt;</target>
        </trans-unit>
        <trans-unit id="eb47001f264dcc1c680176fb2843fa65dbb6ecb6" translate="yes" xml:space="preserve">
          <source>Standard library header &amp;lt;scoped_allocator&amp;gt;</source>
          <target state="translated">标准库头文件&amp;lt;scoped_allocator&amp;gt;</target>
        </trans-unit>
        <trans-unit id="d8f139b7202096f839805ef1e717c3e2bb313603" translate="yes" xml:space="preserve">
          <source>Standard library header &amp;lt;set&amp;gt;</source>
          <target state="translated">标准库头文件&amp;lt;set&amp;gt;</target>
        </trans-unit>
        <trans-unit id="40e6565c7672a21b3d9bc0d6f36b31b6ea208c94" translate="yes" xml:space="preserve">
          <source>Standard library header &amp;lt;shared_mutex&amp;gt;</source>
          <target state="translated">标准库头文件&amp;lt;shared_mutex&amp;gt;</target>
        </trans-unit>
        <trans-unit id="8015c2c01a1ae801b223f37fac713ab5b7537d09" translate="yes" xml:space="preserve">
          <source>Standard library header &amp;lt;span&amp;gt;</source>
          <target state="translated">标准库头文件&amp;lt;span&amp;gt;</target>
        </trans-unit>
        <trans-unit id="111a2709c0e03fd25e235fce2df43647ac8b4ddc" translate="yes" xml:space="preserve">
          <source>Standard library header &amp;lt;sstream&amp;gt;</source>
          <target state="translated">标准库头文件&amp;lt;sstream&amp;gt;</target>
        </trans-unit>
        <trans-unit id="00ce51fe4c6946cc68da2bccc13751e6d3cff9a2" translate="yes" xml:space="preserve">
          <source>Standard library header &amp;lt;stack&amp;gt;</source>
          <target state="translated">标准库头文件&amp;lt;stack&amp;gt;</target>
        </trans-unit>
        <trans-unit id="e263b215d26df4051400712c1d1de85fe0e78519" translate="yes" xml:space="preserve">
          <source>Standard library header &amp;lt;stdexcept&amp;gt;</source>
          <target state="translated">标准库头文件&amp;lt;stdexcept&amp;gt;</target>
        </trans-unit>
        <trans-unit id="82fa68079e46872ba6371e43ee90f4c324eeed1f" translate="yes" xml:space="preserve">
          <source>Standard library header &amp;lt;streambuf&amp;gt;</source>
          <target state="translated">标准库头文件&amp;lt;streambuf&amp;gt;</target>
        </trans-unit>
        <trans-unit id="8802568376c0ff3f8ebe2167589ad64374bffc42" translate="yes" xml:space="preserve">
          <source>Standard library header &amp;lt;string&amp;gt;</source>
          <target state="translated">标准库头文件&amp;lt;string&amp;gt;</target>
        </trans-unit>
        <trans-unit id="16e8da8e6bf9aa0ee9b3bb707adae835fa5ba169" translate="yes" xml:space="preserve">
          <source>Standard library header &amp;lt;string_view&amp;gt;</source>
          <target state="translated">标准库头文件&amp;lt;string_view&amp;gt;</target>
        </trans-unit>
        <trans-unit id="9041d59548ad1a70e69dc40c13beb14f42758389" translate="yes" xml:space="preserve">
          <source>Standard library header &amp;lt;strstream&amp;gt;</source>
          <target state="translated">标准库头文件&amp;lt;strstream&amp;gt;</target>
        </trans-unit>
        <trans-unit id="7b78926579795f08a3525c13e9088a103cc9745d" translate="yes" xml:space="preserve">
          <source>Standard library header &amp;lt;syncstream&amp;gt;</source>
          <target state="translated">标准库头文件&amp;lt;syncstream&amp;gt;</target>
        </trans-unit>
        <trans-unit id="05dd2bbc57d39045b9c15efa3feb0a2d5d844556" translate="yes" xml:space="preserve">
          <source>Standard library header &amp;lt;system_error&amp;gt;</source>
          <target state="translated">标准库头文件&amp;lt;system_error&amp;gt;</target>
        </trans-unit>
        <trans-unit id="75920c437b550c3b1db353e1208e7d540dfb2bf0" translate="yes" xml:space="preserve">
          <source>Standard library header &amp;lt;thread&amp;gt;</source>
          <target state="translated">标准库头文件&amp;lt;thread&amp;gt;</target>
        </trans-unit>
        <trans-unit id="86d8f634b2e8d69b06effca9680a02ca8aa34506" translate="yes" xml:space="preserve">
          <source>Standard library header &amp;lt;tuple&amp;gt;</source>
          <target state="translated">标准库头文件&amp;lt;tuple&amp;gt;</target>
        </trans-unit>
        <trans-unit id="ccd913703c6d50f2e44b16e9b267aabab9c224e1" translate="yes" xml:space="preserve">
          <source>Standard library header &amp;lt;type_traits&amp;gt;</source>
          <target state="translated">标准库头文件&amp;lt;type_traits&amp;gt;</target>
        </trans-unit>
        <trans-unit id="56e7fbf2767165dddaca2e7ba21050eeb330c81d" translate="yes" xml:space="preserve">
          <source>Standard library header &amp;lt;typeindex&amp;gt;</source>
          <target state="translated">标准库头文件&amp;lt;typeindex&amp;gt;</target>
        </trans-unit>
        <trans-unit id="2772bbfb508fb75267220342312055d9d30838d1" translate="yes" xml:space="preserve">
          <source>Standard library header &amp;lt;typeinfo&amp;gt;</source>
          <target state="translated">标准库头文件&amp;lt;typeinfo&amp;gt;</target>
        </trans-unit>
        <trans-unit id="7030b6512b57104f0b8d85ba95160e019cfe54a3" translate="yes" xml:space="preserve">
          <source>Standard library header &amp;lt;unordered_map&amp;gt;</source>
          <target state="translated">标准库头文件&amp;lt;unordered_map&amp;gt;</target>
        </trans-unit>
        <trans-unit id="b18e2c06223adba975bd8ec9c619568c802d1fa0" translate="yes" xml:space="preserve">
          <source>Standard library header &amp;lt;unordered_set&amp;gt;</source>
          <target state="translated">标准库头文件&amp;lt;unordered_set&amp;gt;</target>
        </trans-unit>
        <trans-unit id="ab8030be3b81a9a57ebdc4f4ee783c00d8db9ddc" translate="yes" xml:space="preserve">
          <source>Standard library header &amp;lt;utility&amp;gt;</source>
          <target state="translated">标准库头文件&amp;lt;utility&amp;gt;</target>
        </trans-unit>
        <trans-unit id="6f0f7734302859b53edd0f1002e029c78892838a" translate="yes" xml:space="preserve">
          <source>Standard library header &amp;lt;valarray&amp;gt;</source>
          <target state="translated">标准库头文件&amp;lt;valarray&amp;gt;</target>
        </trans-unit>
        <trans-unit id="e625455d2631c1ace87ec154d71694548b6588b6" translate="yes" xml:space="preserve">
          <source>Standard library header &amp;lt;variant&amp;gt;</source>
          <target state="translated">标准库头文件&amp;lt;variant&amp;gt;</target>
        </trans-unit>
        <trans-unit id="8a1baf0e66b18f753027746ddac2bc1ed49cc5e4" translate="yes" xml:space="preserve">
          <source>Standard library header &amp;lt;vector&amp;gt;</source>
          <target state="translated">标准库头文件&amp;lt;vector&amp;gt;</target>
        </trans-unit>
        <trans-unit id="1ffd6a8eb705dc937a7fe0d0e6b35bf87ff1db29" translate="yes" xml:space="preserve">
          <source>Standard library header &amp;lt;version&amp;gt;</source>
          <target state="translated">标准库头文件&amp;lt;version&amp;gt;</target>
        </trans-unit>
        <trans-unit id="654d328591592d08dc8271315e1ebea904bb6852" translate="yes" xml:space="preserve">
          <source>Standard library headers</source>
          <target state="translated">标准库头</target>
        </trans-unit>
        <trans-unit id="c3dac9dbde4233c05e9af6bd14d756cda62d81a6" translate="yes" xml:space="preserve">
          <source>Standard library implementations (but not the users) may define additional execution policies as an extension. The semantics of parallel algorithms invoked with an execution policy object of implementation-defined type is implementation-defined.</source>
          <target state="translated">标准库的实现(但不是用户)可以定义额外的执行策略作为扩展。用执行定义类型的执行策略对象调用的并行算法的语义由执行定义。</target>
        </trans-unit>
        <trans-unit id="7f59b13f4443014dd818d6d62e0ca50de93aac7f" translate="yes" xml:space="preserve">
          <source>Standard library specializations of &lt;code&gt;&lt;a href=&quot;../regex_traits&quot;&gt;std::regex_traits&lt;/a&gt;&lt;/code&gt; execute &lt;code&gt;&lt;a href=&quot;../../string/char_traits&quot;&gt;std::char_traits&lt;/a&gt;&amp;lt;CharT&amp;gt;::length(p);&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../regex_traits&quot;&gt;std::regex_traits&lt;/a&gt;&lt;/code&gt; 标准库专业执行 &lt;code&gt;&lt;a href=&quot;../../string/char_traits&quot;&gt;std::char_traits&lt;/a&gt;&amp;lt;CharT&amp;gt;::length(p);&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="b7f11a5bc54d097a97edced7adee37d68edf2a87" translate="yes" xml:space="preserve">
          <source>Standard library specializations of &lt;code&gt;&lt;a href=&quot;../regex_traits&quot;&gt;std::regex_traits&lt;/a&gt;&lt;/code&gt; return &lt;code&gt;&lt;a href=&quot;../../locale/use_facet&quot;&gt;std::use_facet&lt;/a&gt;&amp;lt;&lt;a href=&quot;../../locale/collate&quot;&gt;std::collate&lt;/a&gt;&amp;lt;CharT&amp;gt;&amp;gt;(getloc()).transform(str.data(), str.data() + str.length())&lt;/code&gt; for some temporary string &lt;code&gt;str&lt;/code&gt; constructed as &lt;code&gt;string_type str(first, last)&lt;/code&gt;.</source>
          <target state="translated">标准库专业化 &lt;code&gt;&lt;a href=&quot;../regex_traits&quot;&gt;std::regex_traits&lt;/a&gt;&lt;/code&gt; 返回 &lt;code&gt;&lt;a href=&quot;../../locale/use_facet&quot;&gt;std::use_facet&lt;/a&gt;&amp;lt;&lt;a href=&quot;../../locale/collate&quot;&gt;std::collate&lt;/a&gt;&amp;lt;CharT&amp;gt;&amp;gt;(getloc()).transform(str.data(), str.data() + str.length())&lt;/code&gt; 对于一些构造为 &lt;code&gt;string_type str(first, last)&lt;/code&gt; 临时字符串 &lt;code&gt;str&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="54c2e99d8ea2e28058e6a2c145dd8bbb69247703" translate="yes" xml:space="preserve">
          <source>Standard library specializations of &lt;code&gt;&lt;a href=&quot;../regex_traits&quot;&gt;std::regex_traits&lt;/a&gt;&lt;/code&gt; return &lt;code&gt;&lt;a href=&quot;../../locale/use_facet&quot;&gt;std::use_facet&lt;/a&gt;&amp;lt;&lt;a href=&quot;../../locale/ctype&quot;&gt;std::ctype&lt;/a&gt;&amp;lt;CharT&amp;gt;&amp;gt;(getloc()).tolower(c)&lt;/code&gt;, that is, convert &lt;code&gt;c&lt;/code&gt; to lowercase, using the currently imbued locale.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../regex_traits&quot;&gt;std::regex_traits&lt;/a&gt;&lt;/code&gt; 标准库专业化返回 &lt;code&gt;&lt;a href=&quot;../../locale/use_facet&quot;&gt;std::use_facet&lt;/a&gt;&amp;lt;&lt;a href=&quot;../../locale/ctype&quot;&gt;std::ctype&lt;/a&gt;&amp;lt;CharT&amp;gt;&amp;gt;(getloc()).tolower(c)&lt;/code&gt; ，即，使用当前插入的语言环境将 &lt;code&gt;c&lt;/code&gt; 转换为小写。</target>
        </trans-unit>
        <trans-unit id="c5144e981c6c6484149dff7f4f0beecce8e30139" translate="yes" xml:space="preserve">
          <source>Standard library specializations of &lt;code&gt;&lt;a href=&quot;../regex_traits&quot;&gt;std::regex_traits&lt;/a&gt;&lt;/code&gt; return &lt;code&gt;c&lt;/code&gt; unmodified.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../regex_traits&quot;&gt;std::regex_traits&lt;/a&gt;&lt;/code&gt; 标准库专业返回未经修改的 &lt;code&gt;c&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="12d5d651a15ccfe72706786c2855cd1678d884f1" translate="yes" xml:space="preserve">
          <source>Standard practice is to use the result of a call to &lt;code&gt;time(0)&lt;/code&gt; as the seed. However, &lt;code&gt;time()&lt;/code&gt; returns a &lt;code&gt;time_t&lt;/code&gt; value, and &lt;code&gt;time_t&lt;/code&gt; is not guaranteed to be an integral type. In practice, though, every major implementation defines &lt;code&gt;time_t&lt;/code&gt; to be an integral type, and this is also what POSIX requires.</source>
          <target state="translated">标准做法是使用对 &lt;code&gt;time(0)&lt;/code&gt; 的调用结果作为种子。但是， &lt;code&gt;time()&lt;/code&gt; 返回一个 &lt;code&gt;time_t&lt;/code&gt; 值，并且不能保证 &lt;code&gt;time_t&lt;/code&gt; 是整数类型。但是实际上，每个主要实现都将 &lt;code&gt;time_t&lt;/code&gt; 定义为整数类型，这也是POSIX所需要的。</target>
        </trans-unit>
        <trans-unit id="f96278355d7a86fd4872e0419bd210178419944b" translate="yes" xml:space="preserve">
          <source>Standard specializations</source>
          <target state="translated">标准专业</target>
        </trans-unit>
        <trans-unit id="50d93a9bc9b3b9d66c4edb7cde0b8c0cb17652e2" translate="yes" xml:space="preserve">
          <source>Standard specializations for basic types</source>
          <target state="translated">基本类型的标准专业</target>
        </trans-unit>
        <trans-unit id="e17d7dcf6519a0eb9d420c2f744d5d6623aba9f6" translate="yes" xml:space="preserve">
          <source>Standard specializations for library types</source>
          <target state="translated">图书馆类型的标准专门化</target>
        </trans-unit>
        <trans-unit id="ed6715a35349ec5186a2258a1fc2b8a7e6600fb4" translate="yes" xml:space="preserve">
          <source>Standard-compliant IEEE 754 floating-point implementations are required to detect the floating-point underflow, and have two alternative situations where this can be done.</source>
          <target state="translated">符合标准的IEEE 754浮点实现需要检测浮点下溢,并有两种可供选择的情况。</target>
        </trans-unit>
        <trans-unit id="e26cb26c5dd59e71ed80fc7cfcfda7a8c768940d" translate="yes" xml:space="preserve">
          <source>Standard-compliant IEEE 754 floating-point implementations of subnormal numbers are required to detect the loss of accuracy associated with the creation of such number, if it occurs, and may do so in one of the two distinct ways:</source>
          <target state="translated">符合标准的IEEE 754次方数的浮点实现需要检测与创建此类数字相关的精度损失,如果发生,可以通过两种不同的方式之一进行检测。</target>
        </trans-unit>
        <trans-unit id="ffb57ea5ef3c29b0f002a0ec25815bd661eb3ebf" translate="yes" xml:space="preserve">
          <source>StandardLayoutType</source>
          <target state="translated">StandardLayoutType</target>
        </trans-unit>
        <trans-unit id="f7730d7471c71dacebca7e0efdb78a6fa0cf6783" translate="yes" xml:space="preserve">
          <source>Standing Document 6</source>
          <target state="translated">常设文件6</target>
        </trans-unit>
        <trans-unit id="b1dd515aa2381f04476ea569b39d96a450fd3318" translate="yes" xml:space="preserve">
          <source>Start and termination</source>
          <target state="translated">开始和终止</target>
        </trans-unit>
        <trans-unit id="4f9106212988ffb212518950c1b57cd1a214ebec" translate="yes" xml:space="preserve">
          <source>Start of the match sequence.</source>
          <target state="translated">匹配序列的开始。</target>
        </trans-unit>
        <trans-unit id="a72502067518684f9deeec70cf119fd26326cd33" translate="yes" xml:space="preserve">
          <source>State</source>
          <target state="translated">State</target>
        </trans-unit>
        <trans-unit id="8599e6e165d2bcb838c46be096bed576d7097ec1" translate="yes" xml:space="preserve">
          <source>State functions</source>
          <target state="translated">国家职能</target>
        </trans-unit>
        <trans-unit id="de775277311a1f15adade206c2c728fd44d33fe4" translate="yes" xml:space="preserve">
          <source>State not recoverable</source>
          <target state="translated">不可收回的国家</target>
        </trans-unit>
        <trans-unit id="5653cebc057d4791ce07031ad9286e729de6d691" translate="yes" xml:space="preserve">
          <source>Statements</source>
          <target state="translated">Statements</target>
        </trans-unit>
        <trans-unit id="ac9ab88c4da84329c3b27c4e3b5bb1de7c492136" translate="yes" xml:space="preserve">
          <source>Statements are fragments of the C++ program that are executed in sequence. The body of any function is a sequence of statements. For example:</source>
          <target state="translated">语句是C++程序中按顺序执行的片段。任何函数的主体都是一连串的语句。例如</target>
        </trans-unit>
        <trans-unit id="94cc4f19c494bbef2c1d56c06acf5a9829ac16cc" translate="yes" xml:space="preserve">
          <source>Static Assertion</source>
          <target state="translated">静态断言</target>
        </trans-unit>
        <trans-unit id="bb550afd1ebb32356a77de0371e760348130ef0c" translate="yes" xml:space="preserve">
          <source>Static data member definition</source>
          <target state="translated">静态数据成员定义</target>
        </trans-unit>
        <trans-unit id="46bd22af5dd67ebd874efc2e0ac50e03cd30c502" translate="yes" xml:space="preserve">
          <source>Static data members</source>
          <target state="translated">静态数据成员</target>
        </trans-unit>
        <trans-unit id="97afd45f475da08d8c0f908949451f73e1e2051f" translate="yes" xml:space="preserve">
          <source>Static data members and unnamed bit-fields are skipped during aggregate initialization.</source>
          <target state="translated">静态数据成员和未命名的位字段在聚合初始化时被跳过。</target>
        </trans-unit>
        <trans-unit id="eb38fc7b36b66e06d5bf9efbc0bb09a0026e8e85" translate="yes" xml:space="preserve">
          <source>Static data members are not associated with any object. They exist even if no objects of the class have been defined. There is only one instance of the static data member in the entire program with static &lt;a href=&quot;storage_duration&quot;&gt;storage duration&lt;/a&gt;, unless the keyword &lt;a href=&quot;../keyword/thread_local&quot;&gt;&lt;code&gt;thread_local&lt;/code&gt;&lt;/a&gt; is used, in which case there is one such object per thread with thread storage duration(since C++11).</source>
          <target state="translated">静态数据成员不与任何对象关联。即使没有定义该类的对象，它们也存在。除非使用关键字&lt;a href=&quot;../keyword/thread_local&quot;&gt; &lt;code&gt;thread_local&lt;/code&gt; &lt;/a&gt;，否则整个程序中只有一个静态数据成员实例具有静态&lt;a href=&quot;storage_duration&quot;&gt;存储持续时间&lt;/a&gt;，除非使用关键字thread_local，在这种情况下，每个线程具有一个这样的对象，具有线程存储持续时间（自C ++ 11起）。</target>
        </trans-unit>
        <trans-unit id="5a10105f9c5b523dd7b45c238796e10e4690c992" translate="yes" xml:space="preserve">
          <source>Static data members cannot be &lt;code&gt;mutable&lt;/code&gt;.</source>
          <target state="translated">静态数据成员不能是 &lt;code&gt;mutable&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="371b57153df1ed513114ab949e27cebd491c8434" translate="yes" xml:space="preserve">
          <source>Static data members of a class in namespace scope have &lt;a href=&quot;storage_duration&quot;&gt;external linkage&lt;/a&gt; if the class itself has external linkage (i.e. is not a member of &lt;a href=&quot;namespace#Unnamed_namespaces&quot;&gt;unnamed namespace&lt;/a&gt;). Local classes (classes defined inside functions) and unnamed classes, including member classes of unnamed classes, cannot have static data members.</source>
          <target state="translated">在命名空间范围的一类的静态数据成员具有&lt;a href=&quot;storage_duration&quot;&gt;外部链接&lt;/a&gt;如果类本身具有外部键（即不是成员&lt;a href=&quot;namespace#Unnamed_namespaces&quot;&gt;具名命名空间&lt;/a&gt;）。本地类（在函数内部定义的类）和未命名类（包括未命名类的成员类）不能具有静态数据成员。</target>
        </trans-unit>
        <trans-unit id="66c70953f1f5a5d30cc40fb358b4d5f32a610e70" translate="yes" xml:space="preserve">
          <source>Static initialization</source>
          <target state="translated">静态初始化</target>
        </trans-unit>
        <trans-unit id="f30eb0885bcec4fd1755afedbe57f9601ef1f529" translate="yes" xml:space="preserve">
          <source>Static local variables</source>
          <target state="translated">静态局部变量</target>
        </trans-unit>
        <trans-unit id="d1c5547b3f51ba366a4284d49631b8e01791d63a" translate="yes" xml:space="preserve">
          <source>Static member functions</source>
          <target state="translated">静态成员功能</target>
        </trans-unit>
        <trans-unit id="2af32f47f8018d9be8b0b47c61a0cc38f2d5c6d1" translate="yes" xml:space="preserve">
          <source>Static member functions are not associated with any object. When called, they have no &lt;code&gt;this&lt;/code&gt; pointer.</source>
          <target state="translated">静态成员函数不与任何对象关联。调用时，它们没有 &lt;code&gt;this&lt;/code&gt; 指针。</target>
        </trans-unit>
        <trans-unit id="b6b778cb1881bdfe8ba589dfa1d7e64a8648b347" translate="yes" xml:space="preserve">
          <source>Static member functions cannot be &lt;code&gt;virtual&lt;/code&gt;, &lt;code&gt;const&lt;/code&gt;, or &lt;code&gt;volatile&lt;/code&gt;.</source>
          <target state="translated">静态成员函数不能是 &lt;code&gt;virtual&lt;/code&gt; ， &lt;code&gt;const&lt;/code&gt; 或 &lt;code&gt;volatile&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="fc21ad13d962a86f6af81e2532633a2953381105" translate="yes" xml:space="preserve">
          <source>Static members obey the &lt;a href=&quot;access&quot;&gt;class member access rules (private, protected, public)&lt;/a&gt;.</source>
          <target state="translated">静态成员服从&lt;a href=&quot;access&quot;&gt;类成员访问规则（私有，受保护，公共）&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="ad5e53a8243d18db544d0e4aef917bd32945122b" translate="yes" xml:space="preserve">
          <source>Static members of a class are not associated with the objects of the class: they are independent variables with &lt;a href=&quot;storage_duration&quot;&gt;static or thread (since C++11) storage duration&lt;/a&gt; or regular functions.</source>
          <target state="translated">类的静态成员不与该类的对象关联：它们是具有&lt;a href=&quot;storage_duration&quot;&gt;静态或线程（自C ++ 11起）存储持续时间&lt;/a&gt;或常规函数的自变量。</target>
        </trans-unit>
        <trans-unit id="eb3a67571fc5f93c2c2097d93c994d457dbd23db" translate="yes" xml:space="preserve">
          <source>Static non-local initialization</source>
          <target state="translated">静态非本地初始化</target>
        </trans-unit>
        <trans-unit id="9574eed3a2fa1c67fc0230215243b3da4ecc1747" translate="yes" xml:space="preserve">
          <source>Static type</source>
          <target state="translated">静态类型</target>
        </trans-unit>
        <trans-unit id="c45b18c0f0f4b3cf24da66312054a56ccf27d9c5" translate="yes" xml:space="preserve">
          <source>Std</source>
          <target state="translated">Std</target>
        </trans-unit>
        <trans-unit id="d5aa1dfd94faedad10f0a8dc6dfafde4729ce588" translate="yes" xml:space="preserve">
          <source>Storage allocator used by &lt;code&gt;X&lt;/code&gt;, or &lt;code&gt;std::allocator_type&amp;lt;X::value_type&amp;gt;&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;X&lt;/code&gt; 或 &lt;code&gt;std::allocator_type&amp;lt;X::value_type&amp;gt;&lt;/code&gt; 使用的存储分配器</target>
        </trans-unit>
        <trans-unit id="ec15fc4dbb2ee73ac6af794fcba5534c45a6a4be" translate="yes" xml:space="preserve">
          <source>Storage class specifiers</source>
          <target state="translated">存储类指定器</target>
        </trans-unit>
        <trans-unit id="f67686a12828f8c435b9873713c43fb5b2da0449" translate="yes" xml:space="preserve">
          <source>Storage class specifiers are not allowed in friend function declarations. A function that is defined in the friend declaration has external linkage, a function that was previously defined, keeps the linkage it was defined with.</source>
          <target state="translated">朋友函数声明中不允许使用存储类指定符。朋友声明中定义的函数有外部链接,之前定义的函数,保留它定义的链接。</target>
        </trans-unit>
        <trans-unit id="7d2e5a537eb298ee43ba92a7262f494050e37b01" translate="yes" xml:space="preserve">
          <source>Storage class specifiers, except for &lt;code&gt;thread_local&lt;/code&gt;, are not allowed on &lt;a href=&quot;template_specialization&quot;&gt;explicit specializations&lt;/a&gt; and &lt;a href=&quot;class_template#Explicit_instantiation&quot;&gt;explicit instantiations&lt;/a&gt;:</source>
          <target state="translated">在&lt;a href=&quot;template_specialization&quot;&gt;显式的专业化&lt;/a&gt;和&lt;a href=&quot;class_template#Explicit_instantiation&quot;&gt;显式的实例化中&lt;/a&gt;，除 &lt;code&gt;thread_local&lt;/code&gt; 外，不允许存储类说明符：</target>
        </trans-unit>
        <trans-unit id="054b352055da9aba89fd42abb819a5be6e8dda75" translate="yes" xml:space="preserve">
          <source>Storage duration</source>
          <target state="translated">储存时间</target>
        </trans-unit>
        <trans-unit id="ee607356de208b84b5b4f1b3aa07ccd66969aa16" translate="yes" xml:space="preserve">
          <source>Storage duration and linkage</source>
          <target state="translated">储存期限和联系</target>
        </trans-unit>
        <trans-unit id="ab679a7d893805c39464b199136b607026da7bb7" translate="yes" xml:space="preserve">
          <source>Storage occupied by trivially destructible objects &lt;a href=&quot;../language/lifetime#Storage_reuse&quot;&gt;may be reused&lt;/a&gt; without calling the destructor.</source>
          <target state="translated">琐碎可破坏对象占用的存储空间&lt;a href=&quot;../language/lifetime#Storage_reuse&quot;&gt;可以在&lt;/a&gt;不调用析构函数的情况下重新使用。</target>
        </trans-unit>
        <trans-unit id="d7302554a147c8f1ef58779b6dcfb25b50489faa" translate="yes" xml:space="preserve">
          <source>Storage reuse</source>
          <target state="translated">储存再利用</target>
        </trans-unit>
        <trans-unit id="7eff65dcae7f41c301872cc53e3deb0f34e8823a" translate="yes" xml:space="preserve">
          <source>Stores information about the type and permissions of a file.</source>
          <target state="translated">存储文件的类型和权限信息。</target>
        </trans-unit>
        <trans-unit id="2da9e099a998176bcb262c98bedcd788bd461bcd" translate="yes" xml:space="preserve">
          <source>Stores the &lt;code&gt;value&lt;/code&gt; into the shared state without making the state ready immediately. The state is made ready when the current thread exits, after all variables with thread-local storage duration have been destroyed.</source>
          <target state="translated">将 &lt;code&gt;value&lt;/code&gt; 存储到共享状态，而无需立即使状态就绪。在销毁了所有具有线程本地存储持续时间的变量之后，当前线程退出时，状态变为就绪。</target>
        </trans-unit>
        <trans-unit id="185739e7299f86de0648cf745f16fe6aa8f259af" translate="yes" xml:space="preserve">
          <source>Stores the exception pointer &lt;code&gt;p&lt;/code&gt; into the shared state without making the state ready immediately. The state is made ready when the current thread exits, after all variables with thread-local storage duration have been destroyed.</source>
          <target state="translated">将异常指针 &lt;code&gt;p&lt;/code&gt; 存储到共享状态，而无需立即使状态就绪。在销毁了所有具有线程本地存储持续时间的变量之后，当前线程退出时，状态变为就绪。</target>
        </trans-unit>
        <trans-unit id="7f4f9fe73fb68dcc407f1e0ef33265a27a253cac" translate="yes" xml:space="preserve">
          <source>Straightforward implementation of &lt;code&gt;std::basic_ios&lt;/code&gt; stores only the following members (which all depend on the template parameters and thus cannot be part of &lt;code&gt;&lt;a href=&quot;ios_base&quot;&gt;std::ios_base&lt;/a&gt;&lt;/code&gt;):</source>
          <target state="translated">&lt;code&gt;std::basic_ios&lt;/code&gt; 直接实现仅存储以下成员（它们均取决于模板参数，因此不能成为 &lt;code&gt;&lt;a href=&quot;ios_base&quot;&gt;std::ios_base&lt;/a&gt;&lt;/code&gt; 一部分）：</target>
        </trans-unit>
        <trans-unit id="4da38c43ed7080f8a49dff900d3cff58aefb2a07" translate="yes" xml:space="preserve">
          <source>Stream I/O functions</source>
          <target state="translated">流I/O功能</target>
        </trans-unit>
        <trans-unit id="27d49e129b02b87ad3e682b42ebfdf9bf5a57eca" translate="yes" xml:space="preserve">
          <source>Stream Iterators</source>
          <target state="translated">流式迭代器</target>
        </trans-unit>
        <trans-unit id="f92543e2fc6c9b6b0c1348fe72efaf553f416cfd" translate="yes" xml:space="preserve">
          <source>Stream extraction and insertion</source>
          <target state="translated">流提取和插入</target>
        </trans-unit>
        <trans-unit id="4117e115ebe03d0f0cc37b33d0ce1b9feb2ef514" translate="yes" xml:space="preserve">
          <source>Stream insertion/extraction operators</source>
          <target state="translated">流插入/提取操作员</target>
        </trans-unit>
        <trans-unit id="4efdedd0ec1a3401856545ce2cc8c17664fa2bf2" translate="yes" xml:space="preserve">
          <source>Stream ioctl() timeout</source>
          <target state="translated">流ioctl()超时</target>
        </trans-unit>
        <trans-unit id="e4c27387ff9f1b49239b2a3296d0f1c69f4d91d5" translate="yes" xml:space="preserve">
          <source>Stream iterators</source>
          <target state="translated">流迭代器</target>
        </trans-unit>
        <trans-unit id="c67c540c988e57a5f4befbaef40deda7583ff172" translate="yes" xml:space="preserve">
          <source>Stream repositioning operations &lt;code&gt;&lt;a href=&quot;fseek&quot;&gt;std::fseek&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;fsetpos&quot;&gt;std::fsetpos&lt;/a&gt;&lt;/code&gt;, and &lt;code&gt;&lt;a href=&quot;rewind&quot;&gt;std::rewind&lt;/a&gt;&lt;/code&gt; discard the effects of &lt;code&gt;ungetc&lt;/code&gt;.</source>
          <target state="translated">流重新定位操作 &lt;code&gt;&lt;a href=&quot;fseek&quot;&gt;std::fseek&lt;/a&gt;&lt;/code&gt; ， &lt;code&gt;&lt;a href=&quot;fsetpos&quot;&gt;std::fsetpos&lt;/a&gt;&lt;/code&gt; 和 &lt;code&gt;&lt;a href=&quot;rewind&quot;&gt;std::rewind&lt;/a&gt;&lt;/code&gt; 丢弃 &lt;code&gt;ungetc&lt;/code&gt; 的影响。</target>
        </trans-unit>
        <trans-unit id="c5dff59c7e8474e86f09f5231350118743b2ca36" translate="yes" xml:space="preserve">
          <source>Stream repositioning operations &lt;code&gt;&lt;a href=&quot;fseek&quot;&gt;std::fseek&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;fsetpos&quot;&gt;std::fsetpos&lt;/a&gt;&lt;/code&gt;, and &lt;code&gt;&lt;a href=&quot;rewind&quot;&gt;std::rewind&lt;/a&gt;&lt;/code&gt; discard the effects of &lt;code&gt;ungetwc&lt;/code&gt;.</source>
          <target state="translated">流重新定位操作 &lt;code&gt;&lt;a href=&quot;fseek&quot;&gt;std::fseek&lt;/a&gt;&lt;/code&gt; ， &lt;code&gt;&lt;a href=&quot;fsetpos&quot;&gt;std::fsetpos&lt;/a&gt;&lt;/code&gt; 和 &lt;code&gt;&lt;a href=&quot;rewind&quot;&gt;std::rewind&lt;/a&gt;&lt;/code&gt; 丢弃 &lt;code&gt;ungetwc&lt;/code&gt; 的影响。</target>
        </trans-unit>
        <trans-unit id="68075f452f35232e13e6ccd0643d8f58364296fe" translate="yes" xml:space="preserve">
          <source>Stream-based I/O</source>
          <target state="translated">基于流的I/O</target>
        </trans-unit>
        <trans-unit id="f5f5e1a47da510fa4386d462c1aa32523fb29a1e" translate="yes" xml:space="preserve">
          <source>Strict aliasing</source>
          <target state="translated">严格的别名</target>
        </trans-unit>
        <trans-unit id="ca0097c41d010531d07269f98771f7552ca6ec4e" translate="yes" xml:space="preserve">
          <source>Strict total ordering relation:</source>
          <target state="translated">严格的总排序关系。</target>
        </trans-unit>
        <trans-unit id="a95223de1ad301f6e7666d5804a6b78f32f20dc0" translate="yes" xml:space="preserve">
          <source>StrictTotallyOrderedStrictTotallyOrderedWith</source>
          <target state="translated">StrictTotallyOrderedStrictTotallyOrderedWith</target>
        </trans-unit>
        <trans-unit id="d2cf8bb476d3824fdc86b7f80f14dd73afec32f3" translate="yes" xml:space="preserve">
          <source>StrictWeakOrder</source>
          <target state="translated">StrictWeakOrder</target>
        </trans-unit>
        <trans-unit id="db0a185fa483bab1a27815a0aad3de4ddd23c346" translate="yes" xml:space="preserve">
          <source>String I/O implementation</source>
          <target state="translated">字符串I/O实现</target>
        </trans-unit>
        <trans-unit id="fa36590c2f94b03fb1fdfe69ed29015d079c3c83" translate="yes" xml:space="preserve">
          <source>String and stream conversions</source>
          <target state="translated">字符串和流转换</target>
        </trans-unit>
        <trans-unit id="41d8cba12ab83e606dc848af9a593af42eacf80b" translate="yes" xml:space="preserve">
          <source>String containing the substring &lt;code&gt;[pos, pos+count)&lt;/code&gt;.</source>
          <target state="translated">包含子字符串 &lt;code&gt;[pos, pos+count)&lt;/code&gt; 的字符串。</target>
        </trans-unit>
        <trans-unit id="28e031acc885a0faad2e48479ddf43e3a5c3bc69" translate="yes" xml:space="preserve">
          <source>String conversions</source>
          <target state="translated">字符串转换</target>
        </trans-unit>
        <trans-unit id="d26b1bbd9eee2dfd3f5c0a081017d1db1f7dfe02" translate="yes" xml:space="preserve">
          <source>String examination</source>
          <target state="translated">字符串检查</target>
        </trans-unit>
        <trans-unit id="4f8131be0a54d163595856a74881c0952b86c731" translate="yes" xml:space="preserve">
          <source>String literals can be used to &lt;a href=&quot;aggregate_initialization&quot;&gt;initialize character arrays&lt;/a&gt;. If an array is initialized like &lt;code&gt;char str[] = &quot;foo&quot;;&lt;/code&gt;, &lt;code&gt;str&lt;/code&gt; will contain a copy of the string &lt;code&gt;&quot;foo&quot;&lt;/code&gt;.</source>
          <target state="translated">字符串文字可用于&lt;a href=&quot;aggregate_initialization&quot;&gt;初始化字符数组&lt;/a&gt;。如果数组的初始化像 &lt;code&gt;char str[] = &quot;foo&quot;;&lt;/code&gt; ， &lt;code&gt;str&lt;/code&gt; 将包含字符串 &lt;code&gt;&quot;foo&quot;&lt;/code&gt; 的副本。</target>
        </trans-unit>
        <trans-unit id="992ce5d61dd55466d37181c4d6e57b2e90b9eaa5" translate="yes" xml:space="preserve">
          <source>String literals have &lt;a href=&quot;storage_duration&quot;&gt;static storage duration&lt;/a&gt;, and thus exist in memory for the life of the program.</source>
          <target state="translated">字符串文字具有&lt;a href=&quot;storage_duration&quot;&gt;静态的存储持续时间&lt;/a&gt;，因此在程序生命周期内存在内存中。</target>
        </trans-unit>
        <trans-unit id="7a8ce38efd037714bf10ba473a6eba0fcb37596d" translate="yes" xml:space="preserve">
          <source>String literals placed side-by-side are concatenated at &lt;a href=&quot;translation_phases&quot;&gt;translation phase 6&lt;/a&gt; (after the preprocessor). That is, &lt;code&gt;&quot;Hello,&quot; &quot; world!&quot;&lt;/code&gt; yields the (single) string &lt;code&gt;&quot;Hello, world!&quot;&lt;/code&gt;. If the two strings have the same encoding prefix (or neither has one), the resulting string will have the same encoding prefix (or no prefix).</source>
          <target state="translated">并排放置的字符串文字在&lt;a href=&quot;translation_phases&quot;&gt;转换阶段6&lt;/a&gt;（在预处理器之后）被串联。也就是说， &lt;code&gt;&quot;Hello,&quot; &quot; world!&quot;&lt;/code&gt; 产生（单个）字符串 &lt;code&gt;&quot;Hello, world!&quot;&lt;/code&gt; 。如果两个字符串具有相同的编码前缀（或都不具有一个），则所得字符串将具有相同的编码前缀（或没有前缀）。</target>
        </trans-unit>
        <trans-unit id="411f94c6ca34e4478bca225615707da562686a1d" translate="yes" xml:space="preserve">
          <source>String manipulation</source>
          <target state="translated">字符串操作</target>
        </trans-unit>
        <trans-unit id="766f45c1227c8c7d13e31b3c8218c7c441dc99b1" translate="yes" xml:space="preserve">
          <source>String operations</source>
          <target state="translated">字符串操作</target>
        </trans-unit>
        <trans-unit id="3816c4beac471c733eed1d91c213f8c2b6a29262" translate="yes" xml:space="preserve">
          <source>Strings</source>
          <target state="translated">Strings</target>
        </trans-unit>
        <trans-unit id="85aec181db33cf00bdd54f1cb9ce01b7d7ff51de" translate="yes" xml:space="preserve">
          <source>Strings library</source>
          <target state="translated">字符串库</target>
        </trans-unit>
        <trans-unit id="0c0ec7dd80d15f28024dcdf6ef00a96517fd3337" translate="yes" xml:space="preserve">
          <source>Strong equality</source>
          <target state="translated">强有力的平等</target>
        </trans-unit>
        <trans-unit id="2a2cba0627fce84913a263b1689bcc1a5f52e879" translate="yes" xml:space="preserve">
          <source>Strong exception guarantee</source>
          <target state="translated">强大的例外保证</target>
        </trans-unit>
        <trans-unit id="e6e1cc7391bbf33d477f2846d55201bd5dc45d0b" translate="yes" xml:space="preserve">
          <source>Strong ordering</source>
          <target state="translated">强大的订单</target>
        </trans-unit>
        <trans-unit id="b23ece5c063f8e292de60a2d5bc21311633d6bab" translate="yes" xml:space="preserve">
          <source>Strongly happens-before</source>
          <target state="translated">强烈发生-之前</target>
        </trans-unit>
        <trans-unit id="7f9dcf8956ae1c0d6f55e5d5d3036df614ef80f7" translate="yes" xml:space="preserve">
          <source>Structure holding a calendar date and time broken down into its components.</source>
          <target state="translated">将日历上的日期和时间分解为各个部分的结构。</target>
        </trans-unit>
        <trans-unit id="6829a88eb9844dcc19a2c6962557c4417821a67d" translate="yes" xml:space="preserve">
          <source>Structure holding an interval broken down into seconds and nanoseconds.</source>
          <target state="translated">保持一个细分为秒和纳秒的时间间隔的结构。</target>
        </trans-unit>
        <trans-unit id="973b2408e7e7197be8a8e1752c113a94b7f7898b" translate="yes" xml:space="preserve">
          <source>Structured binding declaration</source>
          <target state="translated">结构化绑定声明</target>
        </trans-unit>
        <trans-unit id="bc78a4804f98729f1fc5b2a33b36920a69e741f5" translate="yes" xml:space="preserve">
          <source>Structured binding declaration (since C++17)</source>
          <target state="translated">结构化绑定声明(自C++17起</target>
        </trans-unit>
        <trans-unit id="0d6798b48c01e645bbcf19570110d23f14c8b068" translate="yes" xml:space="preserve">
          <source>Subobjects</source>
          <target state="translated">Subobjects</target>
        </trans-unit>
        <trans-unit id="b1bd6eaaf0ebc0fa2da36cbd85120b995ab0f777" translate="yes" xml:space="preserve">
          <source>Subscript</source>
          <target state="translated">Subscript</target>
        </trans-unit>
        <trans-unit id="c1583fa3ea82816d07fd7988b265e391b3ed9264" translate="yes" xml:space="preserve">
          <source>Subscript operator is overloaded by many standard container classes.</source>
          <target state="translated">下标操作符被许多标准容器类重载。</target>
        </trans-unit>
        <trans-unit id="4355b7045e1b93f4ce4ee9fe614f3e36f42492fe" translate="yes" xml:space="preserve">
          <source>Substitution Failure Is Not An Error</source>
          <target state="translated">替换失败不是错误</target>
        </trans-unit>
        <trans-unit id="5a0ac414a99278539760176a2a901e652944aa12" translate="yes" xml:space="preserve">
          <source>Substitution failure (that is, failure to replace template parameters with the deduced or provided template arguments) of a function template removes the function template from the &lt;a href=&quot;overload_resolution&quot;&gt;overload set&lt;/a&gt;. This allows a number of ways to manipulate overload sets using template metaprogramming: see &lt;a href=&quot;sfinae&quot;&gt;SFINAE&lt;/a&gt; for details.</source>
          <target state="translated">函数模板的替换失败（即无法用推导或提供的模板参数替换模板参数）会将函数模板从&lt;a href=&quot;overload_resolution&quot;&gt;重载集中&lt;/a&gt;删除。这允许使用模板元编程通过多种方式来处理过载集：有关详细信息，请参见&lt;a href=&quot;sfinae&quot;&gt;SFINAE&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="591c5df87c474f7001b9a4b343441ece26f906a9" translate="yes" xml:space="preserve">
          <source>Substitution occurs in.</source>
          <target state="translated">替换发生在:</target>
        </trans-unit>
        <trans-unit id="22318c19ebfcbe8742eb22bc4dd2a56e26bc5ca5" translate="yes" xml:space="preserve">
          <source>Substitution proceeds in lexical order and stops when a failure is encountered.</source>
          <target state="translated">替换按词性顺序进行,遇到失败时停止。</target>
        </trans-unit>
        <trans-unit id="0a045f4c6f39f937114f65c98c1c2c42cae38a88" translate="yes" xml:space="preserve">
          <source>Subsumption relationship defines partial order of constraints, which is used to determine:</source>
          <target state="translated">归并关系定义了部分约束顺序,用于确定。</target>
        </trans-unit>
        <trans-unit id="444502efceec69003dab264c206c253cf80e3d8d" translate="yes" xml:space="preserve">
          <source>Subviews</source>
          <target state="translated">Subviews</target>
        </trans-unit>
        <trans-unit id="6bcbfb9f1192e212a275dd730eb5425c37042275" translate="yes" xml:space="preserve">
          <source>Successive characters obtained from the input iterator &lt;code&gt;in&lt;/code&gt; are matched against the character sequences obtained from &lt;code&gt;&lt;a href=&quot;../use_facet&quot;&gt;std::use_facet&lt;/a&gt;&amp;lt;&lt;a href=&quot;../numpunct&quot;&gt;std::numpunct&lt;/a&gt;&amp;lt;charT&amp;gt;&amp;gt;(str.getloc()).falsename()&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;../use_facet&quot;&gt;std::use_facet&lt;/a&gt;&amp;lt;&lt;a href=&quot;../numpunct&quot;&gt;std::numpunct&lt;/a&gt;&amp;lt;charT&amp;gt; &amp;gt;(str.getloc()).truename()&lt;/code&gt; only as necessary as to identify the unique match. The input iterator &lt;code&gt;in&lt;/code&gt; is compared to &lt;code&gt;end&lt;/code&gt; only when necessary to obtain a character.</source>
          <target state="translated">从输入迭代器 &lt;code&gt;in&lt;/code&gt; 获得的连续字符与从 &lt;code&gt;&lt;a href=&quot;../use_facet&quot;&gt;std::use_facet&lt;/a&gt;&amp;lt;&lt;a href=&quot;../numpunct&quot;&gt;std::numpunct&lt;/a&gt;&amp;lt;charT&amp;gt;&amp;gt;(str.getloc()).falsename()&lt;/code&gt; 和 &lt;code&gt;&lt;a href=&quot;../use_facet&quot;&gt;std::use_facet&lt;/a&gt;&amp;lt;&lt;a href=&quot;../numpunct&quot;&gt;std::numpunct&lt;/a&gt;&amp;lt;charT&amp;gt; &amp;gt;(str.getloc()).truename()&lt;/code&gt; 获得的字符序列匹配&amp;lt;charT&amp;gt;&amp;gt;（str.getloc（））。truename（）仅用于标识唯一匹配。仅在需要获取字符时才将输入迭代器 &lt;code&gt;in&lt;/code&gt; 与 &lt;code&gt;end&lt;/code&gt; 进行比较。</target>
        </trans-unit>
        <trans-unit id="02dd1aa421985efb1844e6484a1dadac82aaf55c" translate="yes" xml:space="preserve">
          <source>Such expressions can be used as non-type template arguments, array sizes, and in other contexts that require constant expressions, e.g.</source>
          <target state="translated">这样的表达式可以用作非类型模板参数、数组大小以及其他需要常量表达式的上下文中,如</target>
        </trans-unit>
        <trans-unit id="21363a6ad79a6a39e59b2152a0df07dbc463441d" translate="yes" xml:space="preserve">
          <source>Such operator can be defined in the class body, which has the effect of generating a separate non-template &lt;code&gt;operator&amp;lt;&amp;lt;&lt;/code&gt; for each &lt;code&gt;T&lt;/code&gt; and makes that non-template &lt;code&gt;operator&amp;lt;&amp;lt;&lt;/code&gt; a friend of its &lt;code&gt;Foo&amp;lt;T&amp;gt;&lt;/code&gt;</source>
          <target state="translated">可以在类主体中定义此类运算符，其作用是为每个 &lt;code&gt;T&lt;/code&gt; 生成单独的非模板 &lt;code&gt;operator&amp;lt;&amp;lt;&lt;/code&gt; ，并使该非模板 &lt;code&gt;operator&amp;lt;&amp;lt;&lt;/code&gt; 为其 &lt;code&gt;Foo&amp;lt;T&amp;gt;&lt;/code&gt; 的朋友</target>
        </trans-unit>
        <trans-unit id="b03105f26235b8bb335ef3b1058edc0bbb2150d1" translate="yes" xml:space="preserve">
          <source>Such operator will be deleted if overload resolution over x &amp;lt;=&amp;gt; y (considering also operator&amp;lt;=&amp;gt; with reversed order of parameters) fails, or if this operator@ is not applicable to the result of that x&amp;lt;=&amp;gt;y. Otherwise, the defaulted operator@ calls &lt;code&gt;x &amp;lt;=&amp;gt; y @ 0&lt;/code&gt; if an operator&amp;lt;=&amp;gt; with the original order of parameters was selected by overload resolution, or &lt;code&gt;0 @ y &amp;lt;=&amp;gt; x&lt;/code&gt; otherwise:</source>
          <target state="translated">如果x &amp;lt;=&amp;gt; y上的重载解析失败（也考虑具有相反顺序的operator &amp;lt;=&amp;gt;），或者如果该operator @不适用于该x &amp;lt;=&amp;gt; y的结果，则将删除此类运算符。否则，如果通过重载分辨率选择了具有原始参数顺序的operator &amp;lt;=&amp;gt; ，则默认的operator @会调用 &lt;code&gt;x &amp;lt;=&amp;gt; y @ 0&lt;/code&gt; ，否则，则调用 &lt;code&gt;0 @ y &amp;lt;=&amp;gt; x&lt;/code&gt; ：</target>
        </trans-unit>
        <trans-unit id="f59b30f2283f05ae65b26b5ae58feb0b51a1b44e" translate="yes" xml:space="preserve">
          <source>Such pointer may be used as the right-hand operand of the &lt;a href=&quot;operator_member_access&quot;&gt;pointer-to-member access operators&lt;/a&gt;&lt;code&gt;operator.*&lt;/code&gt; and &lt;code&gt;operator-&amp;gt;*&lt;/code&gt;. The &lt;a href=&quot;value_category#Pending_member_function_call&quot;&gt;resulting expression&lt;/a&gt; can be used only as the left-hand operand of a function-call operator:</source>
          <target state="translated">此类指针可用作&lt;a href=&quot;operator_member_access&quot;&gt;成员访问指针运算&lt;/a&gt; &lt;code&gt;operator.*&lt;/code&gt; 和 &lt;code&gt;operator-&amp;gt;*&lt;/code&gt; 的右侧操作数。将&lt;a href=&quot;value_category#Pending_member_function_call&quot;&gt;所得的表达&lt;/a&gt;，可以使用仅作为函数调用操作者的左边的操作数：</target>
        </trans-unit>
        <trans-unit id="4a86835bbedf2d82f06941a7eca5e62c9d3bb06d" translate="yes" xml:space="preserve">
          <source>Such pointer may be used as the right-hand operand of the &lt;a href=&quot;operator_member_access&quot;&gt;pointer-to-member access operators&lt;/a&gt;&lt;code&gt;operator.*&lt;/code&gt; and &lt;code&gt;operator-&amp;gt;*&lt;/code&gt;:</source>
          <target state="translated">此类指针可用作&lt;a href=&quot;operator_member_access&quot;&gt;成员访问指针运算&lt;/a&gt; &lt;code&gt;operator.*&lt;/code&gt; 和 &lt;code&gt;operator-&amp;gt;*&lt;/code&gt; 的右侧操作数：</target>
        </trans-unit>
        <trans-unit id="525c748fc518254c41cc517df9846906fa547dd6" translate="yes" xml:space="preserve">
          <source>Such threads can still be guaranteed to make progress by blocking with forward progress guarantee delegation: if a thread P blocks in this manner on the completion of a set of threads S, then at least one thread in S will offer a forward progress guarantee that is same or stronger than P. Once that thread completes, another thread in S will be similarly strengthened. Once the set is empty, P will unblock.</source>
          <target state="translated">这样的线程仍然可以通过阻塞与前向进度保证委托来保证进度:如果一个线程P在一组线程S完成时以这种方式阻塞,那么S中至少有一个线程将提供与P相同或更强的前向进度保证,一旦该线程完成,S中的另一个线程将同样得到加强。一旦该集合为空,P将解封。</target>
        </trans-unit>
        <trans-unit id="885db975a310a3bb649f91e5771f94988987874d" translate="yes" xml:space="preserve">
          <source>Suffix</source>
          <target state="translated">Suffix</target>
        </trans-unit>
        <trans-unit id="a155b76eeff83c1b360d01d1d9f1a602a79c9a17" translate="yes" xml:space="preserve">
          <source>Suffix/postfix &lt;a href=&quot;operator_incdec&quot;&gt;increment and decrement&lt;/a&gt;</source>
          <target state="translated">后缀/后缀&lt;a href=&quot;operator_incdec&quot;&gt;递增和递减&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="19171fbcdbee77041c634a610bfe878ef0ce0cc9" translate="yes" xml:space="preserve">
          <source>Sun Studio 12 Asm Statements</source>
          <target state="translated">Sun Studio 12 Asm Statements</target>
        </trans-unit>
        <trans-unit id="14b6c11b5ace8897cf95dd45dac490e5c600cea0" translate="yes" xml:space="preserve">
          <source>Support for functions that take an arbitrary number of parameters (via e.g. &lt;code&gt;&lt;a href=&quot;utility/variadic/va_start&quot;&gt;va_start&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;utility/variadic/va_arg&quot;&gt;va_arg&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;utility/variadic/va_end&quot;&gt;va_end&lt;/a&gt;&lt;/code&gt;).</source>
          <target state="translated">支持带有任意数量参数的函数（例如 &lt;code&gt;&lt;a href=&quot;utility/variadic/va_start&quot;&gt;va_start&lt;/a&gt;&lt;/code&gt; ， &lt;code&gt;&lt;a href=&quot;utility/variadic/va_arg&quot;&gt;va_arg&lt;/a&gt;&lt;/code&gt; ， &lt;code&gt;&lt;a href=&quot;utility/variadic/va_end&quot;&gt;va_end&lt;/a&gt;&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="182a3d18bc1ed1dddb8e31853aeb6af1e8a0f41e" translate="yes" xml:space="preserve">
          <source>Support of subnormal values cannot be determined</source>
          <target state="translated">无法确定次正常值的支持率</target>
        </trans-unit>
        <trans-unit id="b43556e57ddc8fd912e77789b8be419ca8952ed4" translate="yes" xml:space="preserve">
          <source>Supported facets</source>
          <target state="translated">支持的方面</target>
        </trans-unit>
        <trans-unit id="e1fa93264c642e6139202201a55bd0e027398ffd" translate="yes" xml:space="preserve">
          <source>Supported operations</source>
          <target state="translated">支持的业务</target>
        </trans-unit>
        <trans-unit id="a9f4e1ca1505826ce533842453633c496fbcc06f" translate="yes" xml:space="preserve">
          <source>Suppresses warnings on unused entities.</source>
          <target state="translated">抑制对未使用实体的警告。</target>
        </trans-unit>
        <trans-unit id="1a4cb3f45ae9718b61a344bc44ccbb234548bd2f" translate="yes" xml:space="preserve">
          <source>Swap will replace the allocator only if &lt;code&gt;&lt;a href=&quot;../memory/allocator_traits&quot;&gt;std::allocator_traits&lt;/a&gt;&amp;lt;allocator_type&amp;gt;::propagate_on_container_swap::value&lt;/code&gt; is &lt;code&gt;true&lt;/code&gt;. Specifically, it will exchange the allocator instances through an unqualified call to the non-member function swap, see &lt;a href=&quot;swappable&quot;&gt;Swappable&lt;/a&gt;.</source>
          <target state="translated">仅当 &lt;code&gt;&lt;a href=&quot;../memory/allocator_traits&quot;&gt;std::allocator_traits&lt;/a&gt;&amp;lt;allocator_type&amp;gt;::propagate_on_container_swap::value&lt;/code&gt; 为 &lt;code&gt;true&lt;/code&gt; 时,交换将替换分配器。具体来说，它将通过对非成员函数swap的不合格调用来交换分配器实例，请参见&lt;a href=&quot;swappable&quot;&gt;Swappable&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="2d99a0e5c0a9ee8ca98669825be4b7a2c66f5f90" translate="yes" xml:space="preserve">
          <source>Swap, forward and move</source>
          <target state="translated">交换、前进和移动</target>
        </trans-unit>
        <trans-unit id="05c1d85c002e28643f01e9daa1e79b8890fdda4c" translate="yes" xml:space="preserve">
          <source>Swappable</source>
          <target state="translated">Swappable</target>
        </trans-unit>
        <trans-unit id="6b34e97f93836d5c33eae87b0dff11e13379be29" translate="yes" xml:space="preserve">
          <source>SwappableSwappableWith</source>
          <target state="translated">SwappableSwappableWith</target>
        </trans-unit>
        <trans-unit id="3129fb81987fb272c265d1cd137eafd6477ca2ca" translate="yes" xml:space="preserve">
          <source>Swaps &lt;code&gt;first&lt;/code&gt; with &lt;code&gt;other.first&lt;/code&gt; and &lt;code&gt;second&lt;/code&gt; with &lt;code&gt;other.second&lt;/code&gt;.</source>
          <target state="translated">互换 &lt;code&gt;first&lt;/code&gt; 与 &lt;code&gt;other.first&lt;/code&gt; 和 &lt;code&gt;second&lt;/code&gt; 与 &lt;code&gt;other.second&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="46949daeb4adb6e15c19a65c88f33a850a883f5f" translate="yes" xml:space="preserve">
          <source>Swaps the content of two &lt;code&gt;any&lt;/code&gt; objects.</source>
          <target state="translated">交换两个 &lt;code&gt;any&lt;/code&gt; 对象的内容。</target>
        </trans-unit>
        <trans-unit id="fe4d8941704ab78369e432742b37c716fb6b94d8" translate="yes" xml:space="preserve">
          <source>Swaps the contents (both native and generic format) of &lt;code&gt;*this&lt;/code&gt; and &lt;code&gt;other&lt;/code&gt;.</source>
          <target state="translated">交换 &lt;code&gt;*this&lt;/code&gt; 和 &lt;code&gt;other&lt;/code&gt; 的内容（本机格式和通用格式）。</target>
        </trans-unit>
        <trans-unit id="c66074c19195e8d22fd5cfbc04ba7660d205b20e" translate="yes" xml:space="preserve">
          <source>Swaps the contents of &lt;code&gt;lhs&lt;/code&gt; and &lt;code&gt;rhs&lt;/code&gt;. Equivalent to &lt;code&gt;lhs.swap(rhs)&lt;/code&gt;.</source>
          <target state="translated">交换 &lt;code&gt;lhs&lt;/code&gt; 和 &lt;code&gt;rhs&lt;/code&gt; 的内容。等效于 &lt;code&gt;lhs.swap(rhs)&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="f5b50cb7ed1a1f2555712b311ea6515482f921bc" translate="yes" xml:space="preserve">
          <source>Swaps the contents of &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt;.</source>
          <target state="translated">交换 &lt;code&gt;x&lt;/code&gt; 和 &lt;code&gt;y&lt;/code&gt; 的内容。</target>
        </trans-unit>
        <trans-unit id="3025dc5a0136ff8b6b3463e082445e487801a56c" translate="yes" xml:space="preserve">
          <source>Swaps the contents of &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt;. Equivalent to &lt;code&gt;x.swap(y)&lt;/code&gt;.</source>
          <target state="translated">交换 &lt;code&gt;x&lt;/code&gt; 和 &lt;code&gt;y&lt;/code&gt; 的内容。等效于 &lt;code&gt;x.swap(y)&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="39a37ca052dbf59922f3df1878e2f1d4dab4556f" translate="yes" xml:space="preserve">
          <source>Swaps the contents with those of &lt;code&gt;other&lt;/code&gt;.</source>
          <target state="translated">与 &lt;code&gt;other&lt;/code&gt; 交换内容。</target>
        </trans-unit>
        <trans-unit id="bafd3277089c568f441f3a36e08ea4ed9188dfe6" translate="yes" xml:space="preserve">
          <source>Swaps the managed objects and associated deleters of &lt;code&gt;*this&lt;/code&gt; and another &lt;code&gt;unique_ptr&lt;/code&gt; object &lt;code&gt;other&lt;/code&gt;.</source>
          <target state="translated">交换 &lt;code&gt;*this&lt;/code&gt; 和另一个 &lt;code&gt;unique_ptr&lt;/code&gt; 对象 &lt;code&gt;other&lt;/code&gt; 的托管对象和关联的删除器。</target>
        </trans-unit>
        <trans-unit id="a3d1188493c20906244358c4de7315ef4603ceeb" translate="yes" xml:space="preserve">
          <source>Swaps the state and the contents of &lt;code&gt;*this&lt;/code&gt; and &lt;code&gt;rhs&lt;/code&gt;.</source>
          <target state="translated">交换 &lt;code&gt;*this&lt;/code&gt; 和 &lt;code&gt;rhs&lt;/code&gt; 的状态和内容。</target>
        </trans-unit>
        <trans-unit id="e9c2ea3679f877cd2374a4920f575171ae6dca64" translate="yes" xml:space="preserve">
          <source>Swaps the value in the position &lt;code&gt;first&lt;/code&gt; and the value in the position &lt;code&gt;last-1&lt;/code&gt; and makes the subrange &lt;code&gt;[first, last-1)&lt;/code&gt; into a</source>
          <target state="translated">交换 &lt;code&gt;first&lt;/code&gt; 位置的值和 &lt;code&gt;last-1&lt;/code&gt; 位置的值，并使子范围 &lt;code&gt;[first, last-1)&lt;/code&gt; 成为a</target>
        </trans-unit>
        <trans-unit id="cb09cfe768ac5b78438066756631c25180f3bab3" translate="yes" xml:space="preserve">
          <source>Swaps the values of the elements the given iterators are pointing to.</source>
          <target state="translated">交换给定迭代器指向的元素的值。</target>
        </trans-unit>
        <trans-unit id="161bcece44d78f71a4f003092121d67d0ab5d642" translate="yes" xml:space="preserve">
          <source>Swaps two &lt;code&gt;variant&lt;/code&gt; objects.</source>
          <target state="translated">交换两个 &lt;code&gt;variant&lt;/code&gt; 对象。</target>
        </trans-unit>
        <trans-unit id="3f6ad43437efe3f1f457bebcc0c6ca88eeeb0171" translate="yes" xml:space="preserve">
          <source>Switch and goto are not allowed to jump into a branch of constexpr if statement.</source>
          <target state="translated">Switch和goto不允许跳入constexpr if语句的分支。</target>
        </trans-unit>
        <trans-unit id="84353db6d9e8f7c963a844d9880e97431ba69dd8" translate="yes" xml:space="preserve">
          <source>Symbols declared inside a namespace block are placed in a named scope that prevents them from being mistaken for identically-named symbols in other scopes.</source>
          <target state="translated">在命名空间块中声明的符号被放置在一个命名的作用域中,以防止它们被误认为是其他作用域中相同名称的符号。</target>
        </trans-unit>
        <trans-unit id="1708e8cb2dc2bc2a9736cd2e80f3b93534413b5d" translate="yes" xml:space="preserve">
          <source>Symlinks are not followed: if &lt;code&gt;old_p&lt;/code&gt; is a symlink, it is itself renamed, not its target. If &lt;code&gt;new_p&lt;/code&gt; is an existing symlink, it is itself erased, not its target.</source>
          <target state="translated">不遵循符号链接：如果 &lt;code&gt;old_p&lt;/code&gt; 是符号链接，则它本身会被重命名，而不是其目标。如果 &lt;code&gt;new_p&lt;/code&gt; 是现有的符号链接，则其本身将被擦除，而不是其目标。</target>
        </trans-unit>
        <trans-unit id="e6603020623945d110a59e6535ec15891594b9d9" translate="yes" xml:space="preserve">
          <source>Synchronized blocks</source>
          <target state="translated">同步区块</target>
        </trans-unit>
        <trans-unit id="264cc97c04d4dd288f7b8d52441434b3d6f796e8" translate="yes" xml:space="preserve">
          <source>Synchronized blocks are not transactions (unlike the atomic blocks below) and may call transaction-unsafe functions.</source>
          <target state="translated">同步块不是事务(与下面的原子块不同),可以调用事务不安全的函数。</target>
        </trans-unit>
        <trans-unit id="2d4065b4c63a635d07eda74bc4ecf84cec1ab74c" translate="yes" xml:space="preserve">
          <source>Synchronized output</source>
          <target state="translated">同步输出</target>
        </trans-unit>
        <trans-unit id="678d1aed3562116c3434743edc141fd1affe2688" translate="yes" xml:space="preserve">
          <source>Synchronizes the controlled character sequence (the buffers) with the associated character sequence.</source>
          <target state="translated">将受控的字符序列(缓冲区)与关联的字符序列同步。</target>
        </trans-unit>
        <trans-unit id="b3405f14edc4065f66c994c9d5d69885a3408f74" translate="yes" xml:space="preserve">
          <source>Synchronizes the input buffer with the associated data source.</source>
          <target state="translated">将输入缓冲区与相关数据源同步。</target>
        </trans-unit>
        <trans-unit id="36c0630a340d2960affa1c4d2360b0e2c06793fb" translate="yes" xml:space="preserve">
          <source>Synopsis</source>
          <target state="translated">Synopsis</target>
        </trans-unit>
        <trans-unit id="0b4a6369cc47acd5ca23eef4e71b18705b9a52f1" translate="yes" xml:space="preserve">
          <source>Synospis</source>
          <target state="translated">Synospis</target>
        </trans-unit>
        <trans-unit id="17c7ba7676ad1ad6dd1c4e6b997adcae910262c9" translate="yes" xml:space="preserve">
          <source>Syntax</source>
          <target state="translated">Syntax</target>
        </trans-unit>
        <trans-unit id="c3bad23f83eae7e38e2e9c0816279a52be410261" translate="yes" xml:space="preserve">
          <source>System error</source>
          <target state="translated">系统错误</target>
        </trans-unit>
        <trans-unit id="c2c53d66948214258a26ca9ca845d7ac0c17f8e7" translate="yes" xml:space="preserve">
          <source>T</source>
          <target state="translated">T</target>
        </trans-unit>
        <trans-unit id="cc46072906546a69cdff466e38285847984778ab" translate="yes" xml:space="preserve">
          <source>T and U model &lt;code&gt;Common&amp;lt;T, U&amp;gt;&lt;/code&gt; only if, given equality-preserving expressions &lt;code&gt;t1&lt;/code&gt;, &lt;code&gt;t2&lt;/code&gt;, &lt;code&gt;u1&lt;/code&gt; and &lt;code&gt;u2&lt;/code&gt; such that &lt;code&gt;decltype((t1))&lt;/code&gt; and &lt;code&gt;decltype((t2))&lt;/code&gt; are both &lt;code&gt;T&lt;/code&gt; and &lt;code&gt;decltype((u1))&lt;/code&gt; and &lt;code&gt;decltype((u2))&lt;/code&gt; are both &lt;code&gt;U&lt;/code&gt;,</source>
          <target state="translated">T和U模型仅在给定保持相等的表达式 &lt;code&gt;t1&lt;/code&gt; ， &lt;code&gt;t2&lt;/code&gt; ， &lt;code&gt;u1&lt;/code&gt; 和 &lt;code&gt;u2&lt;/code&gt; 使得 &lt;code&gt;decltype((t1))&lt;/code&gt; 和 &lt;code&gt;decltype((t2))&lt;/code&gt; 均为 &lt;code&gt;T&lt;/code&gt; 和 &lt;code&gt;decltype((u1))&lt;/code&gt; 的情况下对 &lt;code&gt;Common&amp;lt;T, U&amp;gt;&lt;/code&gt; 建模和 &lt;code&gt;decltype((u2))&lt;/code&gt; 均为 &lt;code&gt;U&lt;/code&gt; ，</target>
        </trans-unit>
        <trans-unit id="f6300a60075c19a15c0be3e2d7fca0143ba49de7" translate="yes" xml:space="preserve">
          <source>T and U model &lt;code&gt;CommonReference&amp;lt;T, U&amp;gt;&lt;/code&gt; only if, given equality-preserving expressions &lt;code&gt;t1&lt;/code&gt;, &lt;code&gt;t2&lt;/code&gt;, &lt;code&gt;u1&lt;/code&gt; and &lt;code&gt;u2&lt;/code&gt; such that &lt;code&gt;decltype((t1))&lt;/code&gt; and &lt;code&gt;decltype((t2))&lt;/code&gt; are both &lt;code&gt;T&lt;/code&gt; and &lt;code&gt;decltype((u1))&lt;/code&gt; and &lt;code&gt;decltype((u2))&lt;/code&gt; are both &lt;code&gt;U&lt;/code&gt;,</source>
          <target state="translated">T和U模型仅在给定保持相等的表达式 &lt;code&gt;t1&lt;/code&gt; ， &lt;code&gt;t2&lt;/code&gt; ， &lt;code&gt;u1&lt;/code&gt; 和 &lt;code&gt;u2&lt;/code&gt; 使得 &lt;code&gt;decltype((t1))&lt;/code&gt; 和 &lt;code&gt;decltype((t2))&lt;/code&gt; 既是 &lt;code&gt;T&lt;/code&gt; 又是 &lt;code&gt;decltype((u1))&lt;/code&gt; 的情况下建模 &lt;code&gt;CommonReference&amp;lt;T, U&amp;gt;&lt;/code&gt; 和 &lt;code&gt;decltype((u2))&lt;/code&gt; 均为 &lt;code&gt;U&lt;/code&gt; ，</target>
        </trans-unit>
        <trans-unit id="b53c771c25daa8d30e1e76628baca20eb6a18d75" translate="yes" xml:space="preserve">
          <source>T is &lt;a href=&quot;copyinsertable&quot;&gt;CopyInsertable&lt;/a&gt; and &lt;a href=&quot;copyassignable&quot;&gt;CopyAssignable&lt;/a&gt;</source>
          <target state="translated">T是&lt;a href=&quot;copyinsertable&quot;&gt;CopyInsertable&lt;/a&gt;和&lt;a href=&quot;copyassignable&quot;&gt;CopyAssignable&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="660ec12bc6e5a1e7982309431632c35fe746b923" translate="yes" xml:space="preserve">
          <source>T is a specialization of std::pair</source>
          <target state="translated">T是std::pair的特殊化。</target>
        </trans-unit>
        <trans-unit id="bbf4ff0e53e541effb1e235b11c19303e4bc1591" translate="yes" xml:space="preserve">
          <source>T is not a specialization of std::pair</source>
          <target state="translated">T不是std::pair的特化。</target>
        </trans-unit>
        <trans-unit id="9a2bbd623250bcdc2f4256f3c667f1311bd1ea45" translate="yes" xml:space="preserve">
          <source>T&amp;amp;</source>
          <target state="translated">T&amp;amp;</target>
        </trans-unit>
        <trans-unit id="6e5fca6c212eb7f30524d15a6dc91bbbc02e869b" translate="yes" xml:space="preserve">
          <source>T1, T2</source>
          <target state="translated">T1、T2</target>
        </trans-unit>
        <trans-unit id="f43137848b69e68deafd2185ce622e6a39c55145" translate="yes" xml:space="preserve">
          <source>T&lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt;ref&lt;code&gt;(&lt;/code&gt;object&lt;code&gt;) &lt;/code&gt;&lt;code&gt;;&lt;/code&gt;</source>
          <target state="translated">T &lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt; ref &lt;code&gt;(&lt;/code&gt; object &lt;code&gt;) &lt;/code&gt; &lt;code&gt;;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="ef9a78c2915f5528e6505eb949b5d58b569182c0" translate="yes" xml:space="preserve">
          <source>T&lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt;ref&lt;code&gt;=&lt;/code&gt;&lt;code&gt;{ &lt;/code&gt;arg1, arg2, ...&lt;code&gt;};&lt;/code&gt;</source>
          <target state="translated">T &lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt; ref &lt;code&gt;=&lt;/code&gt; &lt;code&gt;{ &lt;/code&gt; arg1，arg2，... &lt;code&gt;};&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="58403cefdd9cce7fb1b1abb61fee8f704e81cefc" translate="yes" xml:space="preserve">
          <source>T&lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt;ref&lt;code&gt;=&lt;/code&gt;object&lt;code&gt;;&lt;/code&gt;</source>
          <target state="translated">T&lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt;ref&lt;code&gt;=&lt;/code&gt;object&lt;code&gt;;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="9431801b45a6671a5d7b975963f60b42024ed42f" translate="yes" xml:space="preserve">
          <source>T&lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt;ref&lt;code&gt;{&lt;/code&gt;arg1, arg2, ...&lt;code&gt;} &lt;/code&gt;&lt;code&gt;;&lt;/code&gt;</source>
          <target state="translated">T &lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt; ref &lt;code&gt;{&lt;/code&gt; arg1，arg2，... &lt;code&gt;} &lt;/code&gt; &lt;code&gt;;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="5a78744dbead2041514127933b52bd90d2354990" translate="yes" xml:space="preserve">
          <source>T&lt;code&gt;&amp;amp;&lt;/code&gt;ref&lt;code&gt;(&lt;/code&gt;object&lt;code&gt;) &lt;/code&gt;&lt;code&gt;;&lt;/code&gt;</source>
          <target state="translated">T &lt;code&gt;&amp;amp;&lt;/code&gt; ref &lt;code&gt;(&lt;/code&gt; 对象 &lt;code&gt;) &lt;/code&gt; &lt;code&gt;;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="a52fff1be29878c152fa370ba2e77e69a8b66be8" translate="yes" xml:space="preserve">
          <source>T&lt;code&gt;&amp;amp;&lt;/code&gt;ref&lt;code&gt;=&lt;/code&gt;&lt;code&gt;{ &lt;/code&gt;arg1, arg2, ...&lt;code&gt;};&lt;/code&gt;</source>
          <target state="translated">T &lt;code&gt;&amp;amp;&lt;/code&gt; ref &lt;code&gt;=&lt;/code&gt; &lt;code&gt;{ &lt;/code&gt; arg1，arg2，... &lt;code&gt;};&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="dec3d4801dd098b9864d27b532b2c378206f708e" translate="yes" xml:space="preserve">
          <source>T&lt;code&gt;&amp;amp;&lt;/code&gt;ref&lt;code&gt;=&lt;/code&gt;object&lt;code&gt;;&lt;/code&gt;</source>
          <target state="translated">T&lt;code&gt;&amp;amp;&lt;/code&gt;ref&lt;code&gt;=&lt;/code&gt;object&lt;code&gt;;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="479a67ea0aebcaef66ddb9c2ab92083a0b606dd2" translate="yes" xml:space="preserve">
          <source>T&lt;code&gt;&amp;amp;&lt;/code&gt;ref&lt;code&gt;{ &lt;/code&gt;arg1, arg2, ...&lt;code&gt;} &lt;/code&gt;&lt;code&gt;;&lt;/code&gt;</source>
          <target state="translated">T &lt;code&gt;&amp;amp;&lt;/code&gt; ref &lt;code&gt;{ &lt;/code&gt; arg1，arg2，... &lt;code&gt;} &lt;/code&gt; &lt;code&gt;;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="ee407094b576204d3e9ff1a1ef6f03f2f02a76f7" translate="yes" xml:space="preserve">
          <source>T&lt;code&gt;( &lt;/code&gt;arg1, arg2, ...&lt;code&gt;)&lt;/code&gt;.</source>
          <target state="translated">T &lt;code&gt;( &lt;/code&gt; arg1，arg2，... &lt;code&gt;)&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="f501dc40cc73438d58b2dbe4beef5b6d5c77c35b" translate="yes" xml:space="preserve">
          <source>T&lt;code&gt;( &lt;/code&gt;other&lt;code&gt;)&lt;/code&gt;</source>
          <target state="translated">T &lt;code&gt;( &lt;/code&gt; 其他 &lt;code&gt;)&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="161a744b49ef6011a7ff0e37cc55aabe270180c8" translate="yes" xml:space="preserve">
          <source>T&lt;code&gt;()&lt;/code&gt;</source>
          <target state="translated">T&lt;code&gt;()&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="ee6c63fec9c61b160ec6024c893178ae87a7b869" translate="yes" xml:space="preserve">
          <source>T&lt;code&gt;()&lt;/code&gt;&lt;code&gt;;&lt;/code&gt;</source>
          <target state="translated">T&lt;code&gt;()&lt;/code&gt;&lt;code&gt;;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="29ee971a37413b2bbd54f8424d9f7659e197f9c2" translate="yes" xml:space="preserve">
          <source>T&lt;code&gt;{ &lt;/code&gt;arg1, arg2, ...&lt;code&gt;}&lt;/code&gt;</source>
          <target state="translated">T &lt;code&gt;{ &lt;/code&gt; arg1，arg2，... &lt;code&gt;}&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="fadaca5a938ae44efac53c8c00d48b1226cd5101" translate="yes" xml:space="preserve">
          <source>T&lt;code&gt;{} &lt;/code&gt;&lt;code&gt;;&lt;/code&gt;</source>
          <target state="translated">T &lt;code&gt;{} &lt;/code&gt; &lt;code&gt;;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="704b2797979fc2cf181e0b0022c2c1aa42a47fd9" translate="yes" xml:space="preserve">
          <source>T&lt;code&gt;{}&lt;/code&gt;</source>
          <target state="translated">T&lt;code&gt;{}&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="1f253ae3f8717d2493fc839cb70cdefdfc61ad41" translate="yes" xml:space="preserve">
          <source>TMP</source>
          <target state="translated">TMP</target>
        </trans-unit>
        <trans-unit id="ca5c7a79c25392e9261be4500084c2271c6fc9bc" translate="yes" xml:space="preserve">
          <source>TMP_MAX</source>
          <target state="translated">TMP_MAX</target>
        </trans-unit>
        <trans-unit id="0e6ee3d11aac2536c0d557b99d27e8db4bb8e627" translate="yes" xml:space="preserve">
          <source>Tag type used to identify the destroying delete form of &lt;a href=&quot;operator_delete&quot;&gt;&lt;code&gt;operator delete&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">标签类型，用于标识&lt;a href=&quot;operator_delete&quot;&gt; &lt;code&gt;operator delete&lt;/code&gt; &lt;/a&gt;的破坏性删除形式。</target>
        </trans-unit>
        <trans-unit id="c9d8b8edbb3576235d034b9dc26918683ab8bf3c" translate="yes" xml:space="preserve">
          <source>Tagged tuples</source>
          <target state="translated">标签:元组</target>
        </trans-unit>
        <trans-unit id="8177f361688582b655f06aa8c611cdca7f6344ce" translate="yes" xml:space="preserve">
          <source>Takes a single argument &lt;code&gt;key&lt;/code&gt; of type &lt;code&gt;Key&lt;/code&gt;.</source>
          <target state="translated">采用类型为 &lt;code&gt;Key&lt;/code&gt; 的单个参数 &lt;code&gt;key&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="22c108f2e2290618334ae1bdda09c993c77d2243" translate="yes" xml:space="preserve">
          <source>Takes one template type parameter (additional template parameters are optional and allowed)</source>
          <target state="translated">取一个模板类型参数(额外的模板参数是可选的,允许使用)。</target>
        </trans-unit>
        <trans-unit id="8649cc453a7e81b2900bc0a1d7daee7ff8a39513" translate="yes" xml:space="preserve">
          <source>Takes two template type parameters (additional template parameters are optional and allowed)</source>
          <target state="translated">取两个模板类型参数(额外的模板参数是可选的,并且允许)。</target>
        </trans-unit>
        <trans-unit id="14ae799bf325e27219d4ab3dc8ddcea9a6895d3c" translate="yes" xml:space="preserve">
          <source>Tangent is an analytical function on the complex plain and has no branch cuts. It is periodic with respect to the real component, with period &amp;pi;i, and has poles of the first order along the real line, at coordinates (&amp;pi;(1/2 + n), 0). However no common floating-point representation is able to represent &amp;pi;/2 exactly, thus there is no value of the argument for which a pole error occurs.  Mathematical definition of the tangent is tan z =</source>
          <target state="translated">切线是复杂平原上的分析函数，没有分支切口。它相对于实数分量是周期性的，周期为&amp;pi;i，并且在坐标（&amp;pi;（1/2 + n），0）处具有沿实线的一阶极点。但是，没有通用的浮点表示法能够精确地表示&amp;pi;/ 2，因此不存在发生极点误差的参数值。切线的数学定义为tan z =</target>
        </trans-unit>
        <trans-unit id="4b891e43fd714701379334fa86fe6cdd601c66db" translate="yes" xml:space="preserve">
          <source>Target access</source>
          <target state="translated">目标访问</target>
        </trans-unit>
        <trans-unit id="a578e2926fd3399f91a9bf9c3cd2f37d9c064719" translate="yes" xml:space="preserve">
          <source>Tarray&lt;code&gt;[&lt;/code&gt;N&lt;code&gt;] = {&lt;/code&gt;other&lt;code&gt;};&lt;/code&gt;</source>
          <target state="translated">Tarray &lt;code&gt;[&lt;/code&gt; N &lt;code&gt;] = {&lt;/code&gt; 其他 &lt;code&gt;};&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="3ec1ae061c27325c7ecb543adf91235e22cbc9ed" translate="yes" xml:space="preserve">
          <source>Template</source>
          <target state="translated">Template</target>
        </trans-unit>
        <trans-unit id="df44c520fa404c47fb9c3a2fa460f9f6b5a92d1b" translate="yes" xml:space="preserve">
          <source>Template Meta Programming</source>
          <target state="translated">模板元编程</target>
        </trans-unit>
        <trans-unit id="a5f5d8926b48548b87471b3b504f71aa41a2c5f9" translate="yes" xml:space="preserve">
          <source>Template Parameters</source>
          <target state="translated">模板参数</target>
        </trans-unit>
        <trans-unit id="45f8ada88f0feca34f6f71100875096825e76c58" translate="yes" xml:space="preserve">
          <source>Template aliases</source>
          <target state="translated">模板别名</target>
        </trans-unit>
        <trans-unit id="caca60d6981d2b988a9916fd062c816f7d6cd2ae" translate="yes" xml:space="preserve">
          <source>Template argument deduction</source>
          <target state="translated">模板论证演绎</target>
        </trans-unit>
        <trans-unit id="d8261e155b7964ea0c5c0dbb05cec222ffaa203b" translate="yes" xml:space="preserve">
          <source>Template argument deduction attempts to determine template arguments (types for type template parameters &lt;code&gt;T&lt;/code&gt;i, templates for template template parameters &lt;code&gt;TT&lt;/code&gt;i, and values for non-type template parameters &lt;code&gt;I&lt;/code&gt;i), which can be substituted into each parameter &lt;code&gt;P&lt;/code&gt; to produce the type</source>
          <target state="translated">模板参数推导尝试确定模板参数（类型模板参数 &lt;code&gt;T&lt;/code&gt; i的类型，模板模板参数 &lt;code&gt;TT&lt;/code&gt; i的模板以及非类型模板参数 &lt;code&gt;I&lt;/code&gt; i的值），可以将其替换为每个参数 &lt;code&gt;P&lt;/code&gt; 以产生类型</target>
        </trans-unit>
        <trans-unit id="bc1107a314a5a9280ec0248d4fdc19f3040c0000" translate="yes" xml:space="preserve">
          <source>Template argument deduction for class templates</source>
          <target state="translated">类模板的模板参数扣减</target>
        </trans-unit>
        <trans-unit id="d1eb3324cb08470182136c50093a4f24735ee4ee" translate="yes" xml:space="preserve">
          <source>Template argument deduction for class templates takes place in declarations and in explicit cast expressions; see &lt;a href=&quot;deduction_guide&quot;&gt;class template argument deduction&lt;/a&gt; for details.</source>
          <target state="translated">类模板的模板参数推导发生在声明和显式强制转换表达式中。有关详细信息，请参见&lt;a href=&quot;deduction_guide&quot;&gt;类模板参数推导&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="8647f32c4462a684e87c28a515f4f9f8bb64fe31" translate="yes" xml:space="preserve">
          <source>Template argument deduction is also performed when the name of a class template is used as the type of an object being constructed:</source>
          <target state="translated">当类模板的名称被用作被构造对象的类型时,也会进行模板参数推导。</target>
        </trans-unit>
        <trans-unit id="94ba7965884a8778a58214e334e4b77b327dbbf2" translate="yes" xml:space="preserve">
          <source>Template argument deduction is used during &lt;a href=&quot;function_template&quot;&gt;partial ordering of overloaded function templates&lt;/a&gt;.</source>
          <target state="translated">模板参数推导用于&lt;a href=&quot;function_template&quot;&gt;重载函数模板的部分排序&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="021b7fe06e4148b5e0923a0f571d8cfcb6d1d1c9" translate="yes" xml:space="preserve">
          <source>Template argument deduction is used during &lt;a href=&quot;overload_resolution&quot;&gt;overload resolution&lt;/a&gt;, when generating specializations from a candidate template function. &lt;code&gt;P&lt;/code&gt; and &lt;code&gt;A&lt;/code&gt; are the same as in a regular function call:</source>
          <target state="translated">从候选模板函数生成特化时，在&lt;a href=&quot;overload_resolution&quot;&gt;重载解析&lt;/a&gt;期间使用模板参数推导。 &lt;code&gt;P&lt;/code&gt; 和 &lt;code&gt;A&lt;/code&gt; 与常规函数调用中的相同：</target>
        </trans-unit>
        <trans-unit id="a7ca94beae95ff3d5d1f84a863c4f4d7d10504e5" translate="yes" xml:space="preserve">
          <source>Template argument deduction is used in &lt;a href=&quot;declarations&quot;&gt;declarations&lt;/a&gt; of variables, when deducing the meaning of the &lt;b&gt;&lt;a href=&quot;auto&quot;&gt;auto specifier&lt;/a&gt;&lt;/b&gt; from the variable's initializer.</source>
          <target state="translated">从变量的初始值设定项推导&lt;b&gt;&lt;a href=&quot;auto&quot;&gt;自动说明符&lt;/a&gt;&lt;/b&gt;的含义时，模板自变量推导用于变量的&lt;a href=&quot;declarations&quot;&gt;声明&lt;/a&gt;。&lt;b&gt;&lt;/b&gt;</target>
        </trans-unit>
        <trans-unit id="0ab922d0c264f2678cc14178cbe3b3a2aaa8b213" translate="yes" xml:space="preserve">
          <source>Template argument deduction is used in &lt;a href=&quot;function_template#Explicit_instantiation&quot;&gt;explicit instantiations&lt;/a&gt;, &lt;a href=&quot;template_specialization&quot;&gt;explicit specializations&lt;/a&gt;, and those &lt;a href=&quot;friend#Template_friends&quot;&gt;friend declarations&lt;/a&gt; where the declarator-id happens to refer to a specialization of a function template (for example, &lt;code&gt;friend ostream&amp;amp; operator&amp;lt;&amp;lt; &amp;lt;&amp;gt; (...)&lt;/code&gt;), if not all template arguments are explicitly specified or defaulted, template argument deduction is used to determine which template's specialization is referred to.</source>
          <target state="translated">模板参数推导用于&lt;a href=&quot;function_template#Explicit_instantiation&quot;&gt;显式实例化&lt;/a&gt;，&lt;a href=&quot;template_specialization&quot;&gt;显式专业化&lt;/a&gt;以及在声明 &lt;code&gt;friend ostream&amp;amp; operator&amp;lt;&amp;lt; &amp;lt;&amp;gt; (...)&lt;/code&gt; id恰好指向功能模板的专业化的那些&lt;a href=&quot;friend#Template_friends&quot;&gt;朋友声明&lt;/a&gt;中（例如，friend ostream＆operator &amp;lt;&amp;lt; &amp;lt;&amp;gt;（...）），如果并非所有模板参数都明确指定或默认，模板参数推导用于确定所引用的模板的专业化程度。</target>
        </trans-unit>
        <trans-unit id="a3d42493811e1d60b682098b0b94617aea28bfcc" translate="yes" xml:space="preserve">
          <source>Template argument deduction is used in declarations of &lt;a href=&quot;functions&quot;&gt;functions&lt;/a&gt;, when deducing the meaning of the &lt;a href=&quot;auto&quot;&gt;auto&lt;/a&gt; specifier in the function's return type, from the return statement.</source>
          <target state="translated">模板参数推导是在声明中使用&lt;a href=&quot;functions&quot;&gt;的功能&lt;/a&gt;，演绎的含义是，当&lt;a href=&quot;auto&quot;&gt;汽车&lt;/a&gt;在函数的返回类型说明符，从return语句。</target>
        </trans-unit>
        <trans-unit id="7b8140b3f1c13e487f6303e128091147759d3453" translate="yes" xml:space="preserve">
          <source>Template argument deduction is used when determining if a &lt;a href=&quot;../memory/new/operator_delete&quot;&gt;deallocation function&lt;/a&gt; template specialization matches a given placement form of &lt;code&gt;operator new&lt;/code&gt;.</source>
          <target state="translated">在确定&lt;a href=&quot;../memory/new/operator_delete&quot;&gt;解除分配功能&lt;/a&gt;模板的特殊性是否与 &lt;code&gt;operator new&lt;/code&gt; 的给定放置形式匹配时，使用模板自变量推导。</target>
        </trans-unit>
        <trans-unit id="b30b6f11850a4b69e5c82442ee4977df7c35d742" translate="yes" xml:space="preserve">
          <source>Template argument deduction is used when selecting &lt;a href=&quot;cast_operator&quot;&gt;user-defined conversion function&lt;/a&gt; template arguments.</source>
          <target state="translated">选择&lt;a href=&quot;cast_operator&quot;&gt;用户定义的转换函数&lt;/a&gt;模板参数时，将使用模板参数推导。</target>
        </trans-unit>
        <trans-unit id="784e859c9570b3743b308b59311190ef5b96f971" translate="yes" xml:space="preserve">
          <source>Template argument deduction is used when taking an &lt;a href=&quot;overloaded_address&quot;&gt;address of a overload set&lt;/a&gt;, which includes function templates.</source>
          <target state="translated">当采用包含函数模板&lt;a href=&quot;overloaded_address&quot;&gt;的重载集&lt;/a&gt;的地址时，将使用模板参数推导。</target>
        </trans-unit>
        <trans-unit id="d46a2bb0daf61718a14fe7d647244512540a80df" translate="yes" xml:space="preserve">
          <source>Template argument deduction takes place after the function template &lt;a href=&quot;lookup&quot;&gt;name lookup&lt;/a&gt; (which may involve &lt;a href=&quot;adl&quot;&gt;argument-dependent lookup&lt;/a&gt;) and before &lt;a href=&quot;function_template#Template_argument_substitution&quot;&gt;template argument substitution&lt;/a&gt; (which may involve &lt;a href=&quot;sfinae&quot;&gt;SFINAE&lt;/a&gt;) and &lt;a href=&quot;overload_resolution&quot;&gt;overload resolution&lt;/a&gt;.</source>
          <target state="translated">模板参数推导发生在函数模板&lt;a href=&quot;lookup&quot;&gt;名称查找&lt;/a&gt;（可能涉及&lt;a href=&quot;adl&quot;&gt;参数依赖查找&lt;/a&gt;）之后，&lt;a href=&quot;function_template#Template_argument_substitution&quot;&gt;模板参数替换&lt;/a&gt;（可能涉及&lt;a href=&quot;sfinae&quot;&gt;SFINAE&lt;/a&gt;）和&lt;a href=&quot;overload_resolution&quot;&gt;重载解析之前&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="9cc4c883fb9b243ff19f8109f0263f72db75c7ab" translate="yes" xml:space="preserve">
          <source>Template argument deduction takes place after the function template &lt;a href=&quot;lookup&quot;&gt;name lookup&lt;/a&gt; (which may involve &lt;a href=&quot;adl&quot;&gt;argument-dependent lookup&lt;/a&gt;) and before &lt;a href=&quot;overload_resolution&quot;&gt;overload resolution&lt;/a&gt;.</source>
          <target state="translated">模板参数推导发生在函数模板&lt;a href=&quot;lookup&quot;&gt;名称查找之后&lt;/a&gt;（可能涉及&lt;a href=&quot;adl&quot;&gt;依赖于参数的查找&lt;/a&gt;），并且在&lt;a href=&quot;overload_resolution&quot;&gt;重载解析&lt;/a&gt;之前进行。</target>
        </trans-unit>
        <trans-unit id="f2066a0f0eb39482438496a80f76796effd02820" translate="yes" xml:space="preserve">
          <source>Template argument lists</source>
          <target state="translated">模板参数列表</target>
        </trans-unit>
        <trans-unit id="e9449cf668b334bd388dd84fab3562fa1c4de76a" translate="yes" xml:space="preserve">
          <source>Template argument substitution</source>
          <target state="translated">模板参数替换</target>
        </trans-unit>
        <trans-unit id="a9799ad420934ea9199f67000a327e674f897581" translate="yes" xml:space="preserve">
          <source>Template arguments</source>
          <target state="translated">模板参数</target>
        </trans-unit>
        <trans-unit id="f1d3b836e1b1c2984f2611a0dd02d3350041ad2a" translate="yes" xml:space="preserve">
          <source>Template arguments of a function template may be obtained from.</source>
          <target state="translated">函数模板的模板参数可以从以下地方获得。</target>
        </trans-unit>
        <trans-unit id="0a6226598cf2e2ba90359b0f5427dce4a74f9148" translate="yes" xml:space="preserve">
          <source>Template declarations (&lt;a href=&quot;class_template&quot;&gt;class&lt;/a&gt;, &lt;a href=&quot;function_template&quot;&gt;function&lt;/a&gt;, and &lt;a href=&quot;variable_template&quot;&gt;variables&lt;/a&gt;(since C++14)) can appear inside a &lt;a href=&quot;class&quot;&gt;member specification&lt;/a&gt; of any class, struct, or union that aren't &lt;a href=&quot;class#Local_classes&quot;&gt;local classes&lt;/a&gt;.</source>
          <target state="translated">模板声明（&lt;a href=&quot;class_template&quot;&gt;类&lt;/a&gt;，&lt;a href=&quot;function_template&quot;&gt;函数&lt;/a&gt;和&lt;a href=&quot;variable_template&quot;&gt;变量&lt;/a&gt;（自C ++ 14起））可以出现在不是&lt;a href=&quot;class#Local_classes&quot;&gt;本地类&lt;/a&gt;的任何类，结构或联合的&lt;a href=&quot;class&quot;&gt;成员规范&lt;/a&gt;内。</target>
        </trans-unit>
        <trans-unit id="5d3e4d385a0a47bf71b99c56c3cae38ff61af816" translate="yes" xml:space="preserve">
          <source>Template definition</source>
          <target state="translated">模板定义</target>
        </trans-unit>
        <trans-unit id="1123fb8fb4f7d6610d019c3d869ba19bf4e459dc" translate="yes" xml:space="preserve">
          <source>Template friend operators</source>
          <target state="translated">模板好友操作者</target>
        </trans-unit>
        <trans-unit id="0369ea2ee9ff567354532b828c23169851ad589d" translate="yes" xml:space="preserve">
          <source>Template friends</source>
          <target state="translated">模板朋友</target>
        </trans-unit>
        <trans-unit id="954ab955f2a4e981e2a42027ac3b702c33779a3e" translate="yes" xml:space="preserve">
          <source>Template name</source>
          <target state="translated">模板名称</target>
        </trans-unit>
        <trans-unit id="8f1c92453a495d014a71c7b055869feba9395bd3" translate="yes" xml:space="preserve">
          <source>Template non-type arguments</source>
          <target state="translated">模板非类型参数</target>
        </trans-unit>
        <trans-unit id="4c635002659404447d4c7e2ab8abd988522ff7bb" translate="yes" xml:space="preserve">
          <source>Template parameter</source>
          <target state="translated">模板参数</target>
        </trans-unit>
        <trans-unit id="158f89ebdcef88d4b325fe5c789cce36a70e806b" translate="yes" xml:space="preserve">
          <source>Template parameter list</source>
          <target state="translated">模板参数列表</target>
        </trans-unit>
        <trans-unit id="6e20fe4a2857b8358f1ccd8985d9145db81f9591" translate="yes" xml:space="preserve">
          <source>Template parameter pack (appears in &lt;a href=&quot;type_alias&quot;&gt;alias template&lt;/a&gt;, &lt;a href=&quot;class_template&quot;&gt;class template&lt;/a&gt; and &lt;a href=&quot;function_template&quot;&gt;function template&lt;/a&gt; parameter lists).</source>
          <target state="translated">模板参数包（出现在&lt;a href=&quot;type_alias&quot;&gt;别名模板&lt;/a&gt;，&lt;a href=&quot;class_template&quot;&gt;类模板&lt;/a&gt;和&lt;a href=&quot;function_template&quot;&gt;功能模板&lt;/a&gt;参数列表中）。</target>
        </trans-unit>
        <trans-unit id="84344a875baa3f63cc16a697c88ae0a96722df2e" translate="yes" xml:space="preserve">
          <source>Template parameter scope</source>
          <target state="translated">模板参数范围</target>
        </trans-unit>
        <trans-unit id="169528213450496bf8081e48bcf48a1c7a41eda9" translate="yes" xml:space="preserve">
          <source>Template parameters</source>
          <target state="translated">模板参数</target>
        </trans-unit>
        <trans-unit id="0edccc1d1dd08de6c12a8dfe9520a49934e55347" translate="yes" xml:space="preserve">
          <source>Template parameters and arguments</source>
          <target state="translated">模板参数和参数</target>
        </trans-unit>
        <trans-unit id="98bc23c9456db71ba2bceaf2673d07299b1c8963" translate="yes" xml:space="preserve">
          <source>Template parameters and template arguments</source>
          <target state="translated">模板参数和模板参数</target>
        </trans-unit>
        <trans-unit id="1e5e58ea037a2428a3329abe77243fae65638428" translate="yes" xml:space="preserve">
          <source>Template specializations of &lt;code&gt;&lt;a href=&quot;../../utility/hash&quot;&gt;std::hash&lt;/a&gt;&lt;/code&gt; for the various view classes for hashing views.</source>
          <target state="translated">各种视图类的 &lt;code&gt;&lt;a href=&quot;../../utility/hash&quot;&gt;std::hash&lt;/a&gt;&lt;/code&gt; 模板专业化，用于哈希视图。</target>
        </trans-unit>
        <trans-unit id="4ec627c749ee6afdaa31903df6588d3408de6241" translate="yes" xml:space="preserve">
          <source>Template template arguments</source>
          <target state="translated">模板模板参数</target>
        </trans-unit>
        <trans-unit id="aa36d3224fbf7f05abd3bc8b6d198706bc54e99c" translate="yes" xml:space="preserve">
          <source>Template template parameter</source>
          <target state="translated">模板模板参数</target>
        </trans-unit>
        <trans-unit id="e92b938702fb48797a6c0a42d95e30ea695a76f0" translate="yes" xml:space="preserve">
          <source>Template type argument cannot be deduced from the type of a non-type template argument:</source>
          <target state="translated">模板类型参数不能从非类型模板参数的类型推导出来。</target>
        </trans-unit>
        <trans-unit id="b3272d29aacc7e69853e8119de9e0103ff80f8cb" translate="yes" xml:space="preserve">
          <source>Template type arguments</source>
          <target state="translated">模板类型参数</target>
        </trans-unit>
        <trans-unit id="1147ee04573a7cd067766e4b59abbd08612715a4" translate="yes" xml:space="preserve">
          <source>Templated entity</source>
          <target state="translated">模板化实体</target>
        </trans-unit>
        <trans-unit id="f25b700ed9f092123a43acb205a6869342cf9dd6" translate="yes" xml:space="preserve">
          <source>Templates</source>
          <target state="translated">Templates</target>
        </trans-unit>
        <trans-unit id="4037e0f46eaecd5f8b76cb0d91a186ad57a8adf8" translate="yes" xml:space="preserve">
          <source>Templates are parametrized by one or more &lt;a href=&quot;template_parameters&quot;&gt;template parameters&lt;/a&gt;, of three kinds: type template parameters, non-type template parameters, and template template parameters.</source>
          <target state="translated">模板由三种类型的一个或多个&lt;a href=&quot;template_parameters&quot;&gt;模板参数设置参数&lt;/a&gt;：类型模板参数，非类型模板参数和模板模板参数。</target>
        </trans-unit>
        <trans-unit id="5dd47d975501c17b1a1ca16d301aae785c1f28b2" translate="yes" xml:space="preserve">
          <source>Temporary materialization</source>
          <target state="translated">暂时的物质化</target>
        </trans-unit>
        <trans-unit id="87fdc9da30b92d4a08598b93f4ff2ca23dd3687d" translate="yes" xml:space="preserve">
          <source>Temporary materialization occurs in the following situations:</source>
          <target state="translated">暂时物化在以下情况下发生。</target>
        </trans-unit>
        <trans-unit id="0084b2c9da7ea557315059b130689d4497b1a547" translate="yes" xml:space="preserve">
          <source>Temporary object lifetime</source>
          <target state="translated">临时对象寿命</target>
        </trans-unit>
        <trans-unit id="3b266d3f9ca89db726a727b7e50ba573b837fc17" translate="yes" xml:space="preserve">
          <source>Temporary objects are created when a prvalue is &lt;a href=&quot;implicit_cast#Temporary_materialization&quot;&gt;materialized&lt;/a&gt; so that it can be used as a glvalue, which occurs(since C++17) in the following situations:</source>
          <target state="translated">当prvalue是创建临时对象&lt;a href=&quot;implicit_cast#Temporary_materialization&quot;&gt;物化&lt;/a&gt;，以便它可以被用作glvalue，其发生（因为C ++ 17）在下列情况下：</target>
        </trans-unit>
        <trans-unit id="b57510c542f5a993e2618bd5690916e7fa2112f8" translate="yes" xml:space="preserve">
          <source>Terminates the current function and returns the specified value (if any) to its caller.</source>
          <target state="translated">终止当前函数并将指定的值(如果有)返回给调用者。</target>
        </trans-unit>
        <trans-unit id="53cfde24b063bc9582b42597d027b0b8dffcfacd" translate="yes" xml:space="preserve">
          <source>Terminating functions</source>
          <target state="translated">终止职能</target>
        </trans-unit>
        <trans-unit id="ddf71a1eb1ddc085dfce1004387d01a5ff9cc02b" translate="yes" xml:space="preserve">
          <source>Termination (e.g. &lt;code&gt;&lt;a href=&quot;utility/program/abort&quot;&gt;std::abort&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;utility/program/atexit&quot;&gt;std::atexit&lt;/a&gt;&lt;/code&gt;), environment (e.g. &lt;code&gt;&lt;a href=&quot;utility/program/system&quot;&gt;std::system&lt;/a&gt;&lt;/code&gt;), signals (e.g. &lt;code&gt;&lt;a href=&quot;utility/program/raise&quot;&gt;std::raise&lt;/a&gt;&lt;/code&gt;).</source>
          <target state="translated">终止（例如 &lt;code&gt;&lt;a href=&quot;utility/program/abort&quot;&gt;std::abort&lt;/a&gt;&lt;/code&gt; ， &lt;code&gt;&lt;a href=&quot;utility/program/atexit&quot;&gt;std::atexit&lt;/a&gt;&lt;/code&gt; ），环境（例如 &lt;code&gt;&lt;a href=&quot;utility/program/system&quot;&gt;std::system&lt;/a&gt;&lt;/code&gt; ），信号（例如 &lt;code&gt;&lt;a href=&quot;utility/program/raise&quot;&gt;std::raise&lt;/a&gt;&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="e8c520bcd2f6ebd89c7fb968b08b7787bde36d95" translate="yes" xml:space="preserve">
          <source>Test for the stringstream's setbuf functionality.</source>
          <target state="translated">测试字符串流的setbuf功能。</target>
        </trans-unit>
        <trans-unit id="22d0fe21a5525b59123ac9716f8c51966f199982" translate="yes" xml:space="preserve">
          <source>Tests two locales for equality. Named locales are considered equal if their names are equal. Unnamed locales are considered equal if they are copies of each other.</source>
          <target state="translated">测试两个区域是否平等。如果它们的名字相同,则命名的区域被认为是相等的。未命名的区域,如果它们是彼此的副本,则被认为是相等的。</target>
        </trans-unit>
        <trans-unit id="660f799d669d5b7231f67c281132ba4f5cffb5db" translate="yes" xml:space="preserve">
          <source>Text file busy</source>
          <target state="translated">文本文件繁忙</target>
        </trans-unit>
        <trans-unit id="4ceaad237ce0d960d8aadd10ab31382cc8cdd772" translate="yes" xml:space="preserve">
          <source>Thanks to &lt;a href=&quot;../language/operator_member_access#Built-in_member_access_operators&quot;&gt;pseudo destructor call&lt;/a&gt;, all scalar types meet the requirement of Destructible, while array types and reference types do not. Note that &lt;code&gt;&lt;a href=&quot;../types/is_destructible&quot;&gt;std::is_destructible&lt;/a&gt;&lt;/code&gt; allows arrays and reference types.</source>
          <target state="translated">多亏了&lt;a href=&quot;../language/operator_member_access#Built-in_member_access_operators&quot;&gt;伪析构函数调用&lt;/a&gt;，所有标量类型都满足Destructible的要求，而数组类型和引用类型却不满足。注意 &lt;code&gt;&lt;a href=&quot;../types/is_destructible&quot;&gt;std::is_destructible&lt;/a&gt;&lt;/code&gt; 允许数组和引用类型。</target>
        </trans-unit>
        <trans-unit id="991c0d6625cff5b8f151f80564a5913700404658" translate="yes" xml:space="preserve">
          <source>That is, depending on whether the destination type is wider or narrower, signed integers are sign-extended&lt;sup id=&quot;cite_ref-1&quot;&gt;&lt;a href=&quot;implicit_cast#cite_note-1&quot;&gt;[footnote 1]&lt;/a&gt;&lt;/sup&gt; or truncated and unsigned integers are zero-extended or truncated respectively.</source>
          <target state="translated">也就是说，根据目标类型是更宽还是更窄，带符号的整数将进行符号扩展&lt;sup id=&quot;cite_ref-1&quot;&gt;&lt;a href=&quot;implicit_cast#cite_note-1&quot;&gt;[脚注1]&lt;/a&gt;&lt;/sup&gt;或截断，而无符号整数分别被零扩展或截断。</target>
        </trans-unit>
        <trans-unit id="93ef0dd827103681fcee453b78be2ff14e1a261d" translate="yes" xml:space="preserve">
          <source>The</source>
          <target state="translated">The</target>
        </trans-unit>
        <trans-unit id="7f99f89abc7064489bc92e58f82cd9a4f80c8567" translate="yes" xml:space="preserve">
          <source>The &quot;unspecified when and how&quot; wording makes it possible to &lt;a href=&quot;../../language/new#Allocation&quot;&gt;combine or optimize away heap allocations&lt;/a&gt; made by the standard library containers, even though such optimizations are disallowed for direct calls to &lt;code&gt;::operator new&lt;/code&gt;. For example, this is implemented by libc++ (&lt;a href=&quot;https://github.com/llvm-mirror/libcxx/blob/master@%7B2017-02-09%7D/include/memory#L1766-L1772&quot;&gt;[1]&lt;/a&gt; and &lt;a href=&quot;https://github.com/llvm-mirror/libcxx/blob/master@%7B2017-02-09%7D/include/new#L211-L217&quot;&gt;[2]&lt;/a&gt;).</source>
          <target state="translated">即使未直接调用 &lt;code&gt;::operator new&lt;/code&gt; ,也不允许使用&amp;ldquo;未指定的时间和方式&amp;rdquo;来&lt;a href=&quot;../../language/new#Allocation&quot;&gt;组合或优化&lt;/a&gt;标准库容器分配的堆分配。例如，这是由libc ++（&lt;a href=&quot;https://github.com/llvm-mirror/libcxx/blob/master@%7B2017-02-09%7D/include/memory#L1766-L1772&quot;&gt;[1]&lt;/a&gt;和&lt;a href=&quot;https://github.com/llvm-mirror/libcxx/blob/master@%7B2017-02-09%7D/include/new#L211-L217&quot;&gt;[2]&lt;/a&gt;）实现的。</target>
        </trans-unit>
        <trans-unit id="ec8b503e021f77990d950dce6036517b5a03066c" translate="yes" xml:space="preserve">
          <source>The 'c' in the name refers to &quot;character&quot; (&lt;a href=&quot;http://www.stroustrup.com/bs_faq2.html#cout&quot;&gt;stroustrup.com FAQ&lt;/a&gt;); &lt;code&gt;cerr&lt;/code&gt; means &quot;character error (stream)&quot; and &lt;code&gt;wcerr&lt;/code&gt; means &quot;wide character error (stream)&quot;</source>
          <target state="translated">名称中的&amp;ldquo; c&amp;rdquo;是指&amp;ldquo;字符&amp;rdquo;（&lt;a href=&quot;http://www.stroustrup.com/bs_faq2.html#cout&quot;&gt;stroustrup.com常见问题解答&lt;/a&gt;）； &lt;code&gt;cerr&lt;/code&gt; 表示&amp;ldquo;字符错误（流）&amp;rdquo;，而 &lt;code&gt;wcerr&lt;/code&gt; 表示&amp;ldquo;宽字符错误（流）&amp;rdquo;</target>
        </trans-unit>
        <trans-unit id="8a8fecf5384bb58f5f1f3c578eb7a6b317ee79fc" translate="yes" xml:space="preserve">
          <source>The 'c' in the name refers to &quot;character&quot; (&lt;a href=&quot;http://www.stroustrup.com/bs_faq2.html#cout&quot;&gt;stroustrup.com FAQ&lt;/a&gt;); &lt;code&gt;cin&lt;/code&gt; means &quot;character input&quot; and &lt;code&gt;wcin&lt;/code&gt; means &quot;wide character input&quot;</source>
          <target state="translated">名称中的&amp;ldquo; c&amp;rdquo;是指&amp;ldquo;字符&amp;rdquo;（&lt;a href=&quot;http://www.stroustrup.com/bs_faq2.html#cout&quot;&gt;stroustrup.com常见问题解答&lt;/a&gt;）； &lt;code&gt;cin&lt;/code&gt; 表示&amp;ldquo;字符输入&amp;rdquo;，而 &lt;code&gt;wcin&lt;/code&gt; 表示&amp;ldquo;宽字符输入&amp;rdquo;</target>
        </trans-unit>
        <trans-unit id="7f79cbf5556a15f45028f844ce3055e0744314bd" translate="yes" xml:space="preserve">
          <source>The 'c' in the name refers to &quot;character&quot; (&lt;a href=&quot;http://www.stroustrup.com/bs_faq2.html#cout&quot;&gt;stroustrup.com FAQ&lt;/a&gt;); &lt;code&gt;clog&lt;/code&gt; means &quot;character log&quot; and &lt;code&gt;wclog&lt;/code&gt; means &quot;wide character log&quot;</source>
          <target state="translated">名称中的&amp;ldquo; c&amp;rdquo;是指&amp;ldquo;字符&amp;rdquo;（&lt;a href=&quot;http://www.stroustrup.com/bs_faq2.html#cout&quot;&gt;stroustrup.com常见问题解答&lt;/a&gt;）； &lt;code&gt;clog&lt;/code&gt; 表示&amp;ldquo;字符日志&amp;rdquo;，而 &lt;code&gt;wclog&lt;/code&gt; 表示&amp;ldquo;宽字符日志&amp;rdquo;</target>
        </trans-unit>
        <trans-unit id="b39ed7ebcf3324b6b14cde3229744c18d31dabe6" translate="yes" xml:space="preserve">
          <source>The 'c' in the name refers to &quot;character&quot; (&lt;a href=&quot;http://www.stroustrup.com/bs_faq2.html#cout&quot;&gt;stroustrup.com FAQ&lt;/a&gt;); &lt;code&gt;cout&lt;/code&gt; means &quot;character output&quot; and &lt;code&gt;wcout&lt;/code&gt; means &quot;wide character output&quot;</source>
          <target state="translated">名称中的&amp;ldquo; c&amp;rdquo;是指&amp;ldquo;字符&amp;rdquo;（&lt;a href=&quot;http://www.stroustrup.com/bs_faq2.html#cout&quot;&gt;stroustrup.com常见问题解答&lt;/a&gt;）； &lt;code&gt;cout&lt;/code&gt; 表示&amp;ldquo;字符输出&amp;rdquo;，而 &lt;code&gt;wcout&lt;/code&gt; 表示&amp;ldquo;宽字符输出&amp;rdquo;</target>
        </trans-unit>
        <trans-unit id="eff5189172eae02363633052a355d76231baa69f" translate="yes" xml:space="preserve">
          <source>The (1,3) versions use &lt;code&gt;operator&amp;lt;&lt;/code&gt; to compare the values, the (2,4) versions use the given comparison function &lt;code&gt;comp&lt;/code&gt;.</source>
          <target state="translated">（1,3）版本使用 &lt;code&gt;operator&amp;lt;&lt;/code&gt; 比较值，（2,4）版本使用给定的比较函数 &lt;code&gt;comp&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="dafcf0eaeb756f05d2a7ee64ed4d401cfeaa9f16" translate="yes" xml:space="preserve">
          <source>The (1,3) versions use &lt;code&gt;operator&amp;lt;&lt;/code&gt; to compare the values, whereas the (2,4) versions use the given comparison function &lt;code&gt;comp&lt;/code&gt;.</source>
          <target state="translated">（1,3）版本使用 &lt;code&gt;operator&amp;lt;&lt;/code&gt; 比较值，而（2,4）版本使用给定的比较函数 &lt;code&gt;comp&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="72d965e72fed1724b83c60ac53dfc7b1420fc061" translate="yes" xml:space="preserve">
          <source>The 10000th consecutive invocation of a default-constructed &lt;code&gt;std::mt19937&lt;/code&gt; is required to produce the value &lt;code&gt;4123659995&lt;/code&gt;.</source>
          <target state="translated">需要使用第10000次连续调用默认构造的 &lt;code&gt;std::mt19937&lt;/code&gt; 来产生值 &lt;code&gt;4123659995&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="e984147075a8e19185c784f917a48a1255282c00" translate="yes" xml:space="preserve">
          <source>The 10000th consecutive invocation of a default-constructed &lt;code&gt;std::mt19937_64&lt;/code&gt; is required to produce the value &lt;code&gt;9981545732273789042&lt;/code&gt;.</source>
          <target state="translated">需要使用第10000次连续调用默认构造的 &lt;code&gt;std::mt19937_64&lt;/code&gt; 来生成值 &lt;code&gt;9981545732273789042&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="22a2a7106aa748d02361b5b68e6c3538fa1a14a6" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../../language/implicit_cast&quot;&gt;implicit conversion&lt;/a&gt; from floating-point to integral types also rounds towards zero, but is limited to the values that can be represented by the target type.</source>
          <target state="translated">从浮点类型到整数类型的&lt;a href=&quot;../../language/implicit_cast&quot;&gt;隐式转换&lt;/a&gt;也将舍入为零，但仅限于可以由目标类型表示的值。</target>
        </trans-unit>
        <trans-unit id="bc7ca13e4dd512b9edc6ada98b8b9e3bb683e777" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../../language/operator_comparison#Three-way_comparison&quot;&gt;built-in operator &amp;lt;=&amp;gt;&lt;/a&gt; between floating-point values uses this ordering: the positive zero and the negative zero compare &lt;code&gt;equivalent&lt;/code&gt;, but can be distinguished, and NaN values compare &lt;code&gt;unordered&lt;/code&gt; with any other value.</source>
          <target state="translated">浮点值之间的&lt;a href=&quot;../../language/operator_comparison#Three-way_comparison&quot;&gt;内置运算符&amp;lt;=&amp;gt;&lt;/a&gt;使用以下顺序：正零和负零比较 &lt;code&gt;equivalent&lt;/code&gt; ，但可以区分，并且NaN值与任何其他值 &lt;code&gt;unordered&lt;/code&gt; 比较。</target>
        </trans-unit>
        <trans-unit id="d000eea4291a415d9c69d5748511309341684c13" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../../named_req/allocator&quot;&gt;Allocator&lt;/a&gt; to use.</source>
          <target state="translated">要使用的&lt;a href=&quot;../../named_req/allocator&quot;&gt;分配器&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="bd79d33be09689ea727915a9822da9a6d0521504" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../algorithm&quot;&gt;parallel algorithms&lt;/a&gt; from the C++ standard library block with forward progress delegation on the completion of an unspecified set of library-managed threads.</source>
          <target state="translated">C ++标准库中的&lt;a href=&quot;../algorithm&quot;&gt;并行算法&lt;/a&gt;在完成一组未指定的库管理线程时具有向前进度委派。</target>
        </trans-unit>
        <trans-unit id="7f384097a3ae4467a606ee3b68db7ca3598cd80c" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../basic_istream/sentry&quot;&gt;&lt;code&gt;basic_istream::sentry&lt;/code&gt;&lt;/a&gt; constructor, executed at the beginning of every formatted input function: unless the &lt;code&gt;skipws&lt;/code&gt; bit is unset (e.g. by issuing &lt;code&gt;&lt;a href=&quot;../manip/skipws&quot;&gt;std::noskipws&lt;/a&gt;&lt;/code&gt;), sentry reads and discards the leading whitespace characters. If the end of the input stream is reached during this operation, both &lt;code&gt;eofbit&lt;/code&gt; and &lt;code&gt;failbit&lt;/code&gt; are set, and no input takes place.</source>
          <target state="translated">该&lt;a href=&quot;../basic_istream/sentry&quot;&gt; &lt;code&gt;basic_istream::sentry&lt;/code&gt; &lt;/a&gt;构造，在每一个格式化输入函数的开始执行：除非 &lt;code&gt;skipws&lt;/code&gt; 位未设置（例如，通过发出 &lt;code&gt;&lt;a href=&quot;../manip/skipws&quot;&gt;std::noskipws&lt;/a&gt;&lt;/code&gt; ），哨兵读取并丢弃前导空格字符。如果在此操作过程中到达输入流的末尾，则将同时设置 &lt;code&gt;eofbit&lt;/code&gt; 和 &lt;code&gt;failbit&lt;/code&gt; ，并且不会发生输入。</target>
        </trans-unit>
        <trans-unit id="199af1ea4bea41c373d1d6f366f0d224e116dc92" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../basic_istream/sentry&quot;&gt;&lt;code&gt;basic_istream::sentry&lt;/code&gt;&lt;/a&gt; constructor, executed at the beginning of every input function, if either &lt;code&gt;eofbit&lt;/code&gt; or &lt;code&gt;badbit&lt;/code&gt; is already set on the stream, or if the end of stream is encountered while consuming leading whitespace.</source>
          <target state="translated">该&lt;a href=&quot;../basic_istream/sentry&quot;&gt; &lt;code&gt;basic_istream::sentry&lt;/code&gt; &lt;/a&gt;构造，在每个输入功能的开始执行，如果任一 &lt;code&gt;eofbit&lt;/code&gt; 或 &lt;code&gt;badbit&lt;/code&gt; 已经设置在流，或者如果流的末尾，同时消耗前导空格遇到。</target>
        </trans-unit>
        <trans-unit id="d96f80b80220186129523ee520a0da3f49221e7e" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../basic_ostream/sentry&quot;&gt;&lt;code&gt;basic_ostream::sentry&lt;/code&gt;&lt;/a&gt; constructor, executed at the beginning of every output function, under implementation-defined conditions.</source>
          <target state="translated">该&lt;a href=&quot;../basic_ostream/sentry&quot;&gt; &lt;code&gt;basic_ostream::sentry&lt;/code&gt; &lt;/a&gt;构造，在每个输出函数的开始执行，实现定义的条件下。</target>
        </trans-unit>
        <trans-unit id="67ebf820ed34aa7b8ca3afede0441918c21cb408" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../language/converting_constructor&quot;&gt;converting constructor&lt;/a&gt; template of &lt;code&gt;std::default_delete&lt;/code&gt; makes possible the implicit conversion from &lt;code&gt;&lt;a href=&quot;unique_ptr&quot;&gt;std::unique_ptr&lt;/a&gt;&amp;lt;Derived&amp;gt;&lt;/code&gt; to &lt;code&gt;&lt;a href=&quot;unique_ptr&quot;&gt;std::unique_ptr&lt;/a&gt;&amp;lt;Base&amp;gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;std::default_delete&lt;/code&gt; 的&lt;a href=&quot;../language/converting_constructor&quot;&gt;转换构造函数&lt;/a&gt;模板使从 &lt;code&gt;&lt;a href=&quot;unique_ptr&quot;&gt;std::unique_ptr&lt;/a&gt;&amp;lt;Derived&amp;gt;&lt;/code&gt; &amp;lt;Derived&amp;gt;到 &lt;code&gt;&lt;a href=&quot;unique_ptr&quot;&gt;std::unique_ptr&lt;/a&gt;&amp;lt;Base&amp;gt;&lt;/code&gt; &amp;lt;Base&amp;gt;的隐式转换成为可能。</target>
        </trans-unit>
        <trans-unit id="cb78bdf488984400241ded004fa4fc61ae9f25cd" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../language/new&quot;&gt;new-expression&lt;/a&gt; is the only way to create an object or an array of objects with dynamic storage duration, that is, with lifetime not restricted to the scope in which it is created. A new-expression obtains storage by calling an allocation function. A &lt;a href=&quot;../language/delete&quot;&gt;delete-expression&lt;/a&gt; destroys a most derived object or an array created by a new-expression and calls the deallocation function. The default allocation and deallocation functions, along with related functions, types, and objects, are declared in the header &lt;code&gt;&amp;lt;new&amp;gt;&lt;/code&gt;.</source>
          <target state="translated">的&lt;a href=&quot;../language/new&quot;&gt;新的表达&lt;/a&gt;是创建一个对象或具有动态存储持续时间，即对象的数组的唯一方式，与不局限于在其中被创建的范围的寿命。new表达式通过调用分配函数来获取存储。甲&lt;a href=&quot;../language/delete&quot;&gt;delete表达式&lt;/a&gt;销毁大多数派生的对象或由一个新的表达式创建一个数组并调用释放函数。默认的分配和释放函数以及相关的函数，类型和对象在标头 &lt;code&gt;&amp;lt;new&amp;gt;&lt;/code&gt; 中声明。</target>
        </trans-unit>
        <trans-unit id="309aca672b29807c4114477b4882bf35957b6215" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../types#Type_modifications&quot;&gt;type modifications and transformations&lt;/a&gt; all satisfy &lt;strong&gt;TransformationTrait&lt;/strong&gt;.</source>
          <target state="translated">的&lt;a href=&quot;../types#Type_modifications&quot;&gt;类型的改变和变形&lt;/a&gt;均满足&lt;strong&gt;TransformationTrait&lt;/strong&gt;。</target>
        </trans-unit>
        <trans-unit id="51a3397d80b8ebe672bc53b120dbbf572747d85e" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;alignas&quot;&gt;&lt;code&gt;alignas&lt;/code&gt; specifier&lt;/a&gt; is a part of the attribute specifier sequence, although it has different syntax. It may appear where the &lt;code&gt;[[...]]&lt;/code&gt; attributes appear and may mix with them (provided it is used where &lt;code&gt;alignas&lt;/code&gt; is permitted).</source>
          <target state="translated">尽管&lt;a href=&quot;alignas&quot;&gt; &lt;code&gt;alignas&lt;/code&gt; 说明&lt;/a&gt;符具有不同的语法，但它是属性说明符序列的一部分。它可能出现在 &lt;code&gt;[[...]]&lt;/code&gt; 属性出现的地方，并可能与它们混合（假设在允许 &lt;code&gt;alignas&lt;/code&gt; 的地方使用它）。</target>
        </trans-unit>
        <trans-unit id="29ea1c4abb344140ca1bcb71ac4c71ee678785ca" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;attributes/contract&quot;&gt;contract attributes&lt;/a&gt; use a special attribute syntax. Each contract attribute must be in its own attribute specifier (&lt;code&gt;[[]]&lt;/code&gt;). Multiple contract attribute specifiers can be applied to the same entity.</source>
          <target state="translated">该&lt;a href=&quot;attributes/contract&quot;&gt;合同属性&lt;/a&gt;使用一种特殊的属性语法。每个合同属性必须位于其自己的属性说明符（ &lt;code&gt;[[]]&lt;/code&gt; ）中。多个合同属性说明符可以应用于同一实体。</target>
        </trans-unit>
        <trans-unit id="0514e99e818aef28d34a3920ed0faa60a58c9c07" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;break&quot;&gt;break&lt;/a&gt; statement, when encountered in statement exits the switch statement:</source>
          <target state="translated">该&lt;a href=&quot;break&quot;&gt;破&lt;/a&gt;声明，在声明中遇到时退出switch语句：</target>
        </trans-unit>
        <trans-unit id="0f7e1b4bfb4e870274e353c9c7a72c2da4c1c7a2" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;constraints&quot;&gt;requires-expressions&lt;/a&gt; are also unevaluated expressions.</source>
          <target state="translated">在&lt;a href=&quot;constraints&quot;&gt;需要表达式&lt;/a&gt;也未评估的表达式。</target>
        </trans-unit>
        <trans-unit id="4bd00385fb62722a0d9108affa4f29eb6e8ab044" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;duration/zero&quot;&gt;zero&lt;/a&gt;, &lt;a href=&quot;duration/min&quot;&gt;min&lt;/a&gt;, and &lt;a href=&quot;duration/max&quot;&gt;max&lt;/a&gt; methods in &lt;code&gt;&lt;a href=&quot;duration&quot;&gt;std::chrono::duration&lt;/a&gt;&lt;/code&gt; forward their work to these methods.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;duration&quot;&gt;std::chrono::duration&lt;/a&gt;&lt;/code&gt; 的&lt;a href=&quot;duration/zero&quot;&gt;zero方法&lt;/a&gt;，&lt;a href=&quot;duration/min&quot;&gt;min&lt;/a&gt;方法和&lt;a href=&quot;duration/max&quot;&gt;max&lt;/a&gt;方法将其工作转发给这些方法。</target>
        </trans-unit>
        <trans-unit id="f913643a12b0d0e00b4ddb338d2afdcf084e81f8" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;explicit&quot;&gt;explicit bool conversion&lt;/a&gt; can also be used to resolve the safe bool problem.</source>
          <target state="translated">在&lt;a href=&quot;explicit&quot;&gt;明确的布尔转换&lt;/a&gt;也可以用来解决安全问题布尔。</target>
        </trans-unit>
        <trans-unit id="8e2f5aca60ecf6a78733b0021ae9fcf6d42f4b7f" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;explicit_cast&quot;&gt;explicit cast&lt;/a&gt; (C-style and function-style) allows casting from a derived lvalue to reference to its private base, or from a pointer to derived to a pointer to its private base.</source>
          <target state="translated">的&lt;a href=&quot;explicit_cast&quot;&gt;显式转换&lt;/a&gt;（C-风格和函数样式）允许从派生左值投射到参考其专用基站，或者从一个指针到衍生的指针其专用基站。</target>
        </trans-unit>
        <trans-unit id="9dbf4257871ad796d81b6aa61568a2a7f80c91ba" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;http://en.cppreference.com/w/cpp/experimental/concurrency&quot;&gt;Concurrency TS&lt;/a&gt; offers atomic smart pointer classes &lt;code&gt;atomic_shared_ptr&lt;/code&gt; and &lt;code&gt;atomic_weak_ptr&lt;/code&gt; as a replacement for the use of these functions.</source>
          <target state="translated">该&lt;a href=&quot;http://en.cppreference.com/w/cpp/experimental/concurrency&quot;&gt;并发TS&lt;/a&gt;提供原子智能指针类 &lt;code&gt;atomic_shared_ptr&lt;/code&gt; 和 &lt;code&gt;atomic_weak_ptr&lt;/code&gt; 为使用这些功能的替代品。</target>
        </trans-unit>
        <trans-unit id="08ddf054b9d98118850acc7743563e5e0b4e9519" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;http://pubs.opengroup.org/onlinepubs/9699919799/functions/lgamma.html&quot;&gt;POSIX version of lgamma&lt;/a&gt; is not thread-safe: each execution of the function stores the sign of the gamma function of &lt;code&gt;arg&lt;/code&gt; in the static external variable &lt;code&gt;signgam&lt;/code&gt;. Some implementations provide &lt;code&gt;lgamma_r&lt;/code&gt;, which takes a pointer to user-provided storage for singgam as the second parameter, and is thread-safe.</source>
          <target state="translated">该&lt;a href=&quot;http://pubs.opengroup.org/onlinepubs/9699919799/functions/lgamma.html&quot;&gt;lgamma函数的POSIX版本&lt;/a&gt;不是线程安全的：函数存储的每个执行的gamma函数的符号 &lt;code&gt;arg&lt;/code&gt; 在静态外部变量 &lt;code&gt;signgam&lt;/code&gt; 。某些实现提供 &lt;code&gt;lgamma_r&lt;/code&gt; ，该对象将指向singgam用户提供的存储的指针作为第二个参数，并且是线程安全的。</target>
        </trans-unit>
        <trans-unit id="7b9eae232676e01d5fd6170668f3da0c95ea6118" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;http://www.boost.org/doc/libs/release/doc/html/boost/intrusive/pointer_traits.html&quot;&gt;Boost.Intrusive library version&lt;/a&gt; of this function returns &lt;code&gt;pointer(&lt;a href=&quot;../addressof&quot;&gt;std::addressof&lt;/a&gt;(r))&lt;/code&gt; if Ptr::pointer_to does not exist.</source>
          <target state="translated">如果Ptr :: pointer_to不存在，则此函数的&lt;a href=&quot;http://www.boost.org/doc/libs/release/doc/html/boost/intrusive/pointer_traits.html&quot;&gt;Boost.Intrusive库版本&lt;/a&gt;将返回 &lt;code&gt;pointer(&lt;a href=&quot;../addressof&quot;&gt;std::addressof&lt;/a&gt;(r))&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="010635233092fde8e055bbf80d2c12bb918dcd10" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;https://en.wikipedia.org/wiki/Pendulum_(mathematics)&quot;&gt;period of a pendulum&lt;/a&gt; of length l, given acceleration due to gravity g, and initial angle &amp;theta; equals 4&amp;radic;l/gK(sin2</source>
          <target state="translated">长度为l &lt;a href=&quot;https://en.wikipedia.org/wiki/Pendulum_(mathematics)&quot;&gt;的摆&lt;/a&gt;的周期，由于重力g而给定加速度，并且初始角度&amp;theta;等于4&amp;radic;l/ gK（sin2</target>
        </trans-unit>
        <trans-unit id="bf6229a76911ef4666d6688afffc70d953c9182d" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;https://pubs.opengroup.org/onlinepubs/9699919799/functions/lgamma.html&quot;&gt;POSIX version of lgamma&lt;/a&gt; is not thread-safe: each execution of the function stores the sign of the gamma function of &lt;code&gt;arg&lt;/code&gt; in the static external variable &lt;code&gt;signgam&lt;/code&gt;. Some implementations provide &lt;code&gt;lgamma_r&lt;/code&gt;, which takes a pointer to user-provided storage for singgam as the second parameter, and is thread-safe.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3c1b8fdbe6f999bd3bde041a408fe4f61954baca" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;https://www.boost.org/doc/libs/1_69_0/doc/html/boost/container/vector.html&quot;&gt;Boost.Container version of &lt;code&gt;vector&lt;/code&gt;&lt;/a&gt; does not specialize for &lt;code&gt;bool&lt;/code&gt;.</source>
          <target state="translated">&lt;a href=&quot;https://www.boost.org/doc/libs/1_69_0/doc/html/boost/container/vector.html&quot;&gt; &lt;code&gt;vector&lt;/code&gt; &lt;/a&gt;的Boost.Container版本不专门用于 &lt;code&gt;bool&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="7dba612c41dab6989a995d0df3b97341d96b4162" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;https://www.boost.org/doc/libs/release/doc/html/boost/intrusive/pointer_traits.html&quot;&gt;Boost.Intrusive library version&lt;/a&gt; of this function returns &lt;code&gt;pointer(&lt;a href=&quot;../addressof&quot;&gt;std::addressof&lt;/a&gt;(r))&lt;/code&gt; if Ptr::pointer_to does not exist.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="25b6c7d0f7829048a23706dba4d464728152672c" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;lifetime&quot;&gt;lifetime&lt;/a&gt; of a union member begins when the member is made active. If another member was active previously, its lifetime ends.</source>
          <target state="translated">工会成员的&lt;a href=&quot;lifetime&quot;&gt;生命周期&lt;/a&gt;始于使该成员成为活动成员。如果以前有其他成员处于活动状态，则其生存期将结束。</target>
        </trans-unit>
        <trans-unit id="75569aea6242143bafa72b9244654b2f1ffee9b6" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;locale&quot;&gt;localizations library&lt;/a&gt; provides support for string conversions (e.g. &lt;code&gt;&lt;a href=&quot;locale/wstring_convert&quot;&gt;std::wstring_convert&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;std::toupper&lt;/code&gt;) as well as functions that classify characters (e.g. &lt;code&gt;std::isspace&lt;/code&gt; or &lt;code&gt;std::isdigit&lt;/code&gt;).</source>
          <target state="translated">的&lt;a href=&quot;locale&quot;&gt;本地化库&lt;/a&gt;提供了对字符串转换（例如 &lt;code&gt;&lt;a href=&quot;locale/wstring_convert&quot;&gt;std::wstring_convert&lt;/a&gt;&lt;/code&gt; 或 &lt;code&gt;std::toupper&lt;/code&gt; ）以及函数分类字符（例如 &lt;code&gt;std::isspace&lt;/code&gt; 或 &lt;code&gt;std::isdigit&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="6392fcea478e829169e87444fc4c60b8cb4b9864" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;namespace#Using-declarations&quot;&gt;using-declaration&lt;/a&gt; carries over the set of known default arguments, and if more arguments are added later to the function's namespace, those defaults are also visible anywhere the using-declaration is visible.</source>
          <target state="translated">在&lt;a href=&quot;namespace#Using-declarations&quot;&gt;使用声明&lt;/a&gt;带出一套称为默认参数，如果多个参数是后来添加到函数的命名空间，这些默认值也是可见的任何地方使用声明是可见的。</target>
        </trans-unit>
        <trans-unit id="69cb2d817c289d67773a04ab2bae52ceb82957ab" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;sizeof...&quot;&gt;sizeof...&lt;/a&gt; operator is classified as a pack expansion as well.</source>
          <target state="translated">该&lt;a href=&quot;sizeof...&quot;&gt;的sizeof ...&lt;/a&gt;操作符，以及列为一包扩展。</target>
        </trans-unit>
        <trans-unit id="9047dc8b99e11f74d359b855ae4a29a09c1fbb0c" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;this&quot;&gt;this&lt;/a&gt; pointer is not allowed in default arguments:</source>
          <target state="translated">在&lt;a href=&quot;this&quot;&gt;这个&lt;/a&gt;指针是不允许在默认参数：</target>
        </trans-unit>
        <trans-unit id="ebb064a9427a1fa7970d44bed331bc5281f03c83" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;types&quot;&gt;types&lt;/a&gt;&lt;code&gt;char&lt;/code&gt;, &lt;code&gt;unsigned char&lt;/code&gt;, and &lt;code&gt;signed char&lt;/code&gt; use one byte for both storage and &lt;a href=&quot;objects&quot;&gt;value representation&lt;/a&gt;. The number of bits in a byte is accessible as &lt;code&gt;&lt;a href=&quot;../types/climits&quot;&gt;CHAR_BIT&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;../types/numeric_limits&quot;&gt;std::numeric_limits&lt;/a&gt;&amp;lt;unsigned char&amp;gt;::digits&lt;/code&gt;.</source>
          <target state="translated">该&lt;a href=&quot;types&quot;&gt;类型的&lt;/a&gt; &lt;code&gt;char&lt;/code&gt; ， &lt;code&gt;unsigned char&lt;/code&gt; 和 &lt;code&gt;signed char&lt;/code&gt; 使用一个字节的存储和&lt;a href=&quot;objects&quot;&gt;值表示&lt;/a&gt;。字节中的位数可以通过 &lt;code&gt;&lt;a href=&quot;../types/climits&quot;&gt;CHAR_BIT&lt;/a&gt;&lt;/code&gt; 或 &lt;code&gt;&lt;a href=&quot;../types/numeric_limits&quot;&gt;std::numeric_limits&lt;/a&gt;&amp;lt;unsigned char&amp;gt;::digits&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="7deaf166831ce5c7a13969ac2e92d63024ee5c2e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;#define&lt;/code&gt; directives define the identifier as macro, that is instruct the compiler to replace all successive occurrences of identifier with replacement-list, which can be optionally additionally processed. If the identifier is already defined as any type of macro, the program is ill-formed unless the definitions are identical.</source>
          <target state="translated">所述 &lt;code&gt;#define&lt;/code&gt; 指令定义的标识符作为宏，即指示编译器与更换列表，其可以额外地任选地替换处理的标识符的所有连续出现。如果标识符已定义为任何类型的宏，则除非定义相同，否则程序格式错误。</target>
        </trans-unit>
        <trans-unit id="287587d438d07ca409150386008ca217010582fb" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;#undef&lt;/code&gt; directive undefines the identifier, that is cancels previous definition of the identifier by &lt;code&gt;#define&lt;/code&gt; directive. If the identifier does not have associated macro, the directive is ignored.</source>
          <target state="translated">的 &lt;code&gt;#undef&lt;/code&gt; 指令取消定义的标识符，即通过取消标识符的先前定义 &lt;code&gt;#define&lt;/code&gt; 指令。如果标识符没有关联的宏，则忽略该指令。</target>
        </trans-unit>
        <trans-unit id="b5eee63a87c12a11bb1c8a0a0749af63ec71ad7e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;/&lt;/code&gt; character is used as the directory separator.</source>
          <target state="translated">的 &lt;code&gt;/&lt;/code&gt; 字符被用作目录分隔符。</target>
        </trans-unit>
        <trans-unit id="29ef5aafaaf469702d40ab87247fd921b47e112e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;../bitset&quot;&gt;std::bitset&lt;/a&gt;&lt;/code&gt; class includes &lt;code&gt;std::bitset::reference&lt;/code&gt; as a publicly-accessible nested class. This class is used as a proxy object to allow users to interact with individual bits of a bitset, since standard C++ types (like references and pointers) are not built with enough precision to specify individual bits.</source>
          <target state="translated">所述 &lt;code&gt;&lt;a href=&quot;../bitset&quot;&gt;std::bitset&lt;/a&gt;&lt;/code&gt; 类包括： &lt;code&gt;std::bitset::reference&lt;/code&gt; 作为一个公共可访问的嵌套类。此类用作代理对象，以允许用户与位集中的各个位进行交互，因为标准C ++类型（如引用和指针）的构建精度不足以指定各个位。</target>
        </trans-unit>
        <trans-unit id="ff91fcef49846bb86b26acc3f9bb92f3953489ca" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;../chrono/time_point&quot;&gt;std::chrono::time_point&lt;/a&gt;&lt;/code&gt; type of the clock. C1 and C2 shall refer to the same epoch.</source>
          <target state="translated">时钟的 &lt;code&gt;&lt;a href=&quot;../chrono/time_point&quot;&gt;std::chrono::time_point&lt;/a&gt;&lt;/code&gt; 类型。C1和C2应指代相同的纪元。</target>
        </trans-unit>
        <trans-unit id="af79d3235b89d256527053836a204ade24c05400" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;../complex&quot;&gt;std::complex&lt;/a&gt;&lt;/code&gt; literal with the real part zero and imaginary part &lt;code&gt;arg&lt;/code&gt;.</source>
          <target state="translated">该 &lt;code&gt;&lt;a href=&quot;../complex&quot;&gt;std::complex&lt;/a&gt;&lt;/code&gt; 文字与实部零部和虚部 &lt;code&gt;arg&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="2731448977f0cbf91abc6a9042bd867718792a0a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;../hash&quot;&gt;std::hash&lt;/a&gt;&lt;/code&gt; class should be &lt;a href=&quot;../../named_req/defaultconstructible&quot;&gt;DefaultConstructible&lt;/a&gt;, &lt;a href=&quot;../../named_req/copyconstructible&quot;&gt;CopyConstructible&lt;/a&gt;, and &lt;a href=&quot;../../named_req/destructible&quot;&gt;Destructible&lt;/a&gt;.</source>
          <target state="translated">该 &lt;code&gt;&lt;a href=&quot;../hash&quot;&gt;std::hash&lt;/a&gt;&lt;/code&gt; 类应该是&lt;a href=&quot;../../named_req/defaultconstructible&quot;&gt;缺省构造&lt;/a&gt;，&lt;a href=&quot;../../named_req/copyconstructible&quot;&gt;复制构造&lt;/a&gt;和&lt;a href=&quot;../../named_req/destructible&quot;&gt;可破坏&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="256311ca8ebf43604948d87d24e1085571bf6f9d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;../manip/get_money&quot;&gt;std::get_money&lt;/a&gt;&lt;/code&gt; I/O manipulator and &lt;a href=&quot;../../locale/money_get/get&quot;&gt;&lt;code&gt;money_get::get&lt;/code&gt;&lt;/a&gt; function, if the end of the stream is reached before the last character needed to parse the expected monetary value was processed.</source>
          <target state="translated">该 &lt;code&gt;&lt;a href=&quot;../manip/get_money&quot;&gt;std::get_money&lt;/a&gt;&lt;/code&gt; I / O手和&lt;a href=&quot;../../locale/money_get/get&quot;&gt; &lt;code&gt;money_get::get&lt;/code&gt; &lt;/a&gt;的功能，如果解析预期货币价值所需要的最后一个字符进行处理之前到达流的末尾。</target>
        </trans-unit>
        <trans-unit id="855c845c4c3a199f90f14aaf76eca19e27247859" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;../manip/get_time&quot;&gt;std::get_time&lt;/a&gt;&lt;/code&gt; I/O manipulator and any of the &lt;code&gt;&lt;a href=&quot;../../locale/time_get&quot;&gt;std::time_get&lt;/a&gt;&lt;/code&gt; parsing functions: &lt;a href=&quot;../../locale/time_get/get&quot;&gt;&lt;code&gt;time_get::get&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../../locale/time_get/get_time&quot;&gt;&lt;code&gt;time_get::get_time&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../../locale/time_get/get_date&quot;&gt;&lt;code&gt;time_get::get_date&lt;/code&gt;&lt;/a&gt;, etc., if the end of the stream is reached before the last character needed to parse the expected date/time value was processed.</source>
          <target state="translated">该 &lt;code&gt;&lt;a href=&quot;../manip/get_time&quot;&gt;std::get_time&lt;/a&gt;&lt;/code&gt; I / O手和任何的 &lt;code&gt;&lt;a href=&quot;../../locale/time_get&quot;&gt;std::time_get&lt;/a&gt;&lt;/code&gt; 解析功能：&lt;a href=&quot;../../locale/time_get/get&quot;&gt; &lt;code&gt;time_get::get&lt;/code&gt; &lt;/a&gt;，&lt;a href=&quot;../../locale/time_get/get_time&quot;&gt; &lt;code&gt;time_get::get_time&lt;/code&gt; &lt;/a&gt;，&lt;a href=&quot;../../locale/time_get/get_date&quot;&gt; &lt;code&gt;time_get::get_date&lt;/code&gt; &lt;/a&gt;等，如果最后一个字符之前到达流的末尾需要解析预期的日期/时间值。</target>
        </trans-unit>
        <trans-unit id="1b35cd52c40c238d2e9a4ff26960212d9fbf9298" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;../range/bidirectionalrange&quot;&gt;BidirectionalRange&lt;/a&gt;&lt;/code&gt; concept is a refinement of &lt;a href=&quot;range&quot;&gt;&lt;code&gt;Range&lt;/code&gt;&lt;/a&gt; for which &lt;code&gt;ranges::begin&lt;/code&gt; returns a model of &lt;a href=&quot;https://en.cppreference.com/mwiki/index.php?title=cpp/iterator/BidirectionalIterator&amp;amp;action=edit&amp;amp;redlink=1&quot;&gt;&lt;code&gt;BidirectionalIterator&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">该 &lt;code&gt;&lt;a href=&quot;../range/bidirectionalrange&quot;&gt;BidirectionalRange&lt;/a&gt;&lt;/code&gt; 概念的细化&lt;a href=&quot;range&quot;&gt; &lt;code&gt;Range&lt;/code&gt; &lt;/a&gt;针对 &lt;code&gt;ranges::begin&lt;/code&gt; 回报的典范&lt;a href=&quot;https://en.cppreference.com/mwiki/index.php?title=cpp/iterator/BidirectionalIterator&amp;amp;action=edit&amp;amp;redlink=1&quot;&gt; &lt;code&gt;BidirectionalIterator&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="1bf354f8099857c98c4c162bdb943e1320618bc8" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;../range/forwardrange&quot;&gt;ForwardRange&lt;/a&gt;&lt;/code&gt; concept is a refinement of &lt;a href=&quot;range&quot;&gt;&lt;code&gt;Range&lt;/code&gt;&lt;/a&gt; for which &lt;code&gt;ranges::begin&lt;/code&gt; returns a model of &lt;a href=&quot;https://en.cppreference.com/mwiki/index.php?title=cpp/iterator/ForwardIterator&amp;amp;action=edit&amp;amp;redlink=1&quot;&gt;&lt;code&gt;ForwardIterator&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">该 &lt;code&gt;&lt;a href=&quot;../range/forwardrange&quot;&gt;ForwardRange&lt;/a&gt;&lt;/code&gt; 概念的细化&lt;a href=&quot;range&quot;&gt; &lt;code&gt;Range&lt;/code&gt; &lt;/a&gt;针对 &lt;code&gt;ranges::begin&lt;/code&gt; 回报的典范&lt;a href=&quot;https://en.cppreference.com/mwiki/index.php?title=cpp/iterator/ForwardIterator&amp;amp;action=edit&amp;amp;redlink=1&quot;&gt; &lt;code&gt;ForwardIterator&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="c51d556d7d72ec5f4c07fd94f97a33c4dda222f7" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;../range/inputrange&quot;&gt;InputRange&lt;/a&gt;&lt;/code&gt; concept is a refinement of &lt;a href=&quot;range&quot;&gt;&lt;code&gt;Range&lt;/code&gt;&lt;/a&gt; for which &lt;code&gt;ranges::begin&lt;/code&gt; returns a model of &lt;a href=&quot;https://en.cppreference.com/mwiki/index.php?title=cpp/iterator/InputIterator&amp;amp;action=edit&amp;amp;redlink=1&quot;&gt;&lt;code&gt;InputIterator&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">该 &lt;code&gt;&lt;a href=&quot;../range/inputrange&quot;&gt;InputRange&lt;/a&gt;&lt;/code&gt; 概念的细化&lt;a href=&quot;range&quot;&gt; &lt;code&gt;Range&lt;/code&gt; &lt;/a&gt;针对 &lt;code&gt;ranges::begin&lt;/code&gt; 回报的典范&lt;a href=&quot;https://en.cppreference.com/mwiki/index.php?title=cpp/iterator/InputIterator&amp;amp;action=edit&amp;amp;redlink=1&quot;&gt; &lt;code&gt;InputIterator&lt;/code&gt; 的&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="8dea9bfb485f84e3103496966c620db434adb7a3" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;../range/outputrange&quot;&gt;OutputRange&lt;/a&gt;&lt;/code&gt; concept is a refinement of &lt;a href=&quot;range&quot;&gt;&lt;code&gt;Range&lt;/code&gt;&lt;/a&gt; for which &lt;code&gt;ranges::begin&lt;/code&gt; returns a model of &lt;a href=&quot;https://en.cppreference.com/mwiki/index.php?title=cpp/iterator/OutputIterator&amp;amp;action=edit&amp;amp;redlink=1&quot;&gt;&lt;code&gt;OutputIterator&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">该 &lt;code&gt;&lt;a href=&quot;../range/outputrange&quot;&gt;OutputRange&lt;/a&gt;&lt;/code&gt; 概念的细化&lt;a href=&quot;range&quot;&gt; &lt;code&gt;Range&lt;/code&gt; &lt;/a&gt;针对 &lt;code&gt;ranges::begin&lt;/code&gt; 回报模型&lt;a href=&quot;https://en.cppreference.com/mwiki/index.php?title=cpp/iterator/OutputIterator&amp;amp;action=edit&amp;amp;redlink=1&quot;&gt; &lt;code&gt;OutputIterator&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="582b57be33c23d5adc91c4522e8fff2b7e87b04d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;../range/randomaccessrange&quot;&gt;RandomAccessRange&lt;/a&gt;&lt;/code&gt; concept is a refinement of &lt;a href=&quot;range&quot;&gt;&lt;code&gt;Range&lt;/code&gt;&lt;/a&gt; for which &lt;code&gt;ranges::begin&lt;/code&gt; returns a model of &lt;a href=&quot;https://en.cppreference.com/mwiki/index.php?title=cpp/iterator/RandomAccessIterator&amp;amp;action=edit&amp;amp;redlink=1&quot;&gt;&lt;code&gt;RandomAccessIterator&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">该 &lt;code&gt;&lt;a href=&quot;../range/randomaccessrange&quot;&gt;RandomAccessRange&lt;/a&gt;&lt;/code&gt; 概念的细化&lt;a href=&quot;range&quot;&gt; &lt;code&gt;Range&lt;/code&gt; &lt;/a&gt;针对 &lt;code&gt;ranges::begin&lt;/code&gt; 回报的典范&lt;a href=&quot;https://en.cppreference.com/mwiki/index.php?title=cpp/iterator/RandomAccessIterator&amp;amp;action=edit&amp;amp;redlink=1&quot;&gt; &lt;code&gt;RandomAccessIterator&lt;/code&gt; 的&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="1f98db1655ef0f271fb435a6239101324463dabb" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;../vector&quot;&gt;std::vector&lt;/a&gt;&amp;lt;bool&amp;gt;&lt;/code&gt; specialization defines &lt;code&gt;&lt;a href=&quot;../vector&quot;&gt;std::vector&lt;/a&gt;&amp;lt;bool&amp;gt;::reference&lt;/code&gt; as a publicly-accessible nested class. &lt;code&gt;&lt;a href=&quot;../vector&quot;&gt;std::vector&lt;/a&gt;&amp;lt;bool&amp;gt;::reference&lt;/code&gt; proxies the behavior of references to a single bit in &lt;code&gt;&lt;a href=&quot;../vector&quot;&gt;std::vector&lt;/a&gt;&amp;lt;bool&amp;gt;&lt;/code&gt;.</source>
          <target state="translated">所述 &lt;code&gt;&lt;a href=&quot;../vector&quot;&gt;std::vector&lt;/a&gt;&amp;lt;bool&amp;gt;&lt;/code&gt; 专业化定义 &lt;code&gt;&lt;a href=&quot;../vector&quot;&gt;std::vector&lt;/a&gt;&amp;lt;bool&amp;gt;::reference&lt;/code&gt; 作为一个公共可访问的嵌套类。 &lt;code&gt;&lt;a href=&quot;../vector&quot;&gt;std::vector&lt;/a&gt;&amp;lt;bool&amp;gt;::reference&lt;/code&gt; 引用对 &lt;code&gt;&lt;a href=&quot;../vector&quot;&gt;std::vector&lt;/a&gt;&amp;lt;bool&amp;gt;&lt;/code&gt; 单个位的引用行为。</target>
        </trans-unit>
        <trans-unit id="7bea81b9244b70065719191c6c0629d573941f04" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;duration&quot;&gt;std::chrono::duration&lt;/a&gt;&lt;/code&gt; literal.</source>
          <target state="translated">该 &lt;code&gt;&lt;a href=&quot;duration&quot;&gt;std::chrono::duration&lt;/a&gt;&lt;/code&gt; 文字。</target>
        </trans-unit>
        <trans-unit id="d4172c516b68500c9770e2bdf9941b5988e6ff32" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;sputc&quot;&gt;sputc()&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;sputn&quot;&gt;sputn()&lt;/a&gt;&lt;/code&gt; call this function in case of an overflow (&lt;code&gt;pptr() == nullptr&lt;/code&gt; or &lt;code&gt;pptr() &amp;gt;= epptr()&lt;/code&gt;).</source>
          <target state="translated">所述 &lt;code&gt;&lt;a href=&quot;sputc&quot;&gt;sputc()&lt;/a&gt;&lt;/code&gt; 和 &lt;code&gt;&lt;a href=&quot;sputn&quot;&gt;sputn()&lt;/a&gt;&lt;/code&gt; 调用此函数中的溢出的情况下（ &lt;code&gt;pptr() == nullptr&lt;/code&gt; 或 &lt;code&gt;pptr() &amp;gt;= epptr()&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="7f6967c213bc2e93fe61b8bd41eb28f5ebb0dfd3" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;CommonRange&lt;/code&gt; concept is a refinement of &lt;a href=&quot;range&quot;&gt;&lt;code&gt;Range&lt;/code&gt;&lt;/a&gt; for which &lt;code&gt;ranges::begin&lt;/code&gt; and &lt;code&gt;ranges::end&lt;/code&gt; return the same type (e.g. all standard library containers).</source>
          <target state="translated">该 &lt;code&gt;CommonRange&lt;/code&gt; 概念的细化&lt;a href=&quot;range&quot;&gt; &lt;code&gt;Range&lt;/code&gt; &lt;/a&gt;针对 &lt;code&gt;ranges::begin&lt;/code&gt; 和 &lt;code&gt;ranges::end&lt;/code&gt; 返还相同种类（例如，所有标准库容器）。</target>
        </trans-unit>
        <trans-unit id="0abeef975f9212d53e66b1527efeb888666e8efc" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Constructible&lt;/code&gt; concept specifies that a variable of type &lt;code&gt;T&lt;/code&gt; can be initialized with the given set of argument types &lt;code&gt;Args...&lt;/code&gt;.</source>
          <target state="translated">可 &lt;code&gt;Constructible&lt;/code&gt; 概念指定可以使用给定参数类型集 &lt;code&gt;Args...&lt;/code&gt; 初始化类型 &lt;code&gt;T&lt;/code&gt; 的变量。</target>
        </trans-unit>
        <trans-unit id="3f7de4726e679b44af8c8d284cb95faef91bff36" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ContiguousRange&lt;/code&gt; concept is a refinement of &lt;a href=&quot;range&quot;&gt;&lt;code&gt;Range&lt;/code&gt;&lt;/a&gt; for which &lt;code&gt;ranges::begin&lt;/code&gt; returns a model of &lt;a href=&quot;https://en.cppreference.com/mwiki/index.php?title=cpp/iterator/ContiguousIterator&amp;amp;action=edit&amp;amp;redlink=1&quot;&gt;&lt;code&gt;ContiguousIterator&lt;/code&gt;&lt;/a&gt; and the customization point &lt;code&gt;ranges::data&lt;/code&gt; is usable.</source>
          <target state="translated">所述 &lt;code&gt;ContiguousRange&lt;/code&gt; 概念是细化&lt;a href=&quot;range&quot;&gt; &lt;code&gt;Range&lt;/code&gt; &lt;/a&gt;为哪些 &lt;code&gt;ranges::begin&lt;/code&gt; 返回的模型&lt;a href=&quot;https://en.cppreference.com/mwiki/index.php?title=cpp/iterator/ContiguousIterator&amp;amp;action=edit&amp;amp;redlink=1&quot;&gt; &lt;code&gt;ContiguousIterator&lt;/code&gt; &lt;/a&gt;和定制点 &lt;code&gt;ranges::data&lt;/code&gt; 是可用的。</target>
        </trans-unit>
        <trans-unit id="95ecc9e88401481b0a24b03216493707c334d31f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;DefaultConstructible&lt;/code&gt; concept provides a shorthand for the common case when the question is whether a type can be constructed with no arguments.</source>
          <target state="translated">所述 &lt;code&gt;DefaultConstructible&lt;/code&gt; 概念提供了通常情况下的简写时，问题是是否一个类型可以不带参数来构造。</target>
        </trans-unit>
        <trans-unit id="2c0205c222ca9d21e9d05367ef4c2ea7fd533e2a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;EXIT_SUCCESS&lt;/code&gt; and &lt;code&gt;EXIT_FAILURE&lt;/code&gt; macros expand into integral expressions that can be used as arguments to the &lt;code&gt;&lt;a href=&quot;exit&quot;&gt;std::exit&lt;/a&gt;&lt;/code&gt; function (and, therefore, as the values to return from the &lt;a href=&quot;../../language/main_function&quot;&gt;main function&lt;/a&gt;), and indicate program execution status.</source>
          <target state="translated">该 &lt;code&gt;EXIT_SUCCESS&lt;/code&gt; 和 &lt;code&gt;EXIT_FAILURE&lt;/code&gt; 宏扩展成可以作为参数传递给积分表达式 &lt;code&gt;&lt;a href=&quot;exit&quot;&gt;std::exit&lt;/a&gt;&lt;/code&gt; 功能（和，因此，作为值从返回&lt;a href=&quot;../../language/main_function&quot;&gt;主功能&lt;/a&gt;），并指示程序执行状态。</target>
        </trans-unit>
        <trans-unit id="2d5615a09c39393c229b9c18967835ce479d5d69" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;FP_NORMAL&lt;/code&gt;, &lt;code&gt;FP_SUBNORMAL&lt;/code&gt;, &lt;code&gt;FP_ZERO&lt;/code&gt;, &lt;code&gt;FP_INFINITE&lt;/code&gt;, &lt;code&gt;FP_NAN&lt;/code&gt; macros each represent a distinct category of floating-point numbers. They all expand to an integer constant expression.</source>
          <target state="translated">的 &lt;code&gt;FP_NORMAL&lt;/code&gt; ， &lt;code&gt;FP_SUBNORMAL&lt;/code&gt; ， &lt;code&gt;FP_ZERO&lt;/code&gt; ， &lt;code&gt;FP_INFINITE&lt;/code&gt; ， &lt;code&gt;FP_NAN&lt;/code&gt; 宏各自表示浮点数的一个不同的类别。它们都扩展为整数常量表达式。</target>
        </trans-unit>
        <trans-unit id="4771d6adfbe4d104e6fadb4ac1ec96d29484beb4" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;HUGE_VALF&lt;/code&gt;, &lt;code&gt;HUGE_VAL&lt;/code&gt; and &lt;code&gt;HUGE_VALL&lt;/code&gt; macros expand to positive floating point constant expressions which compare equal to the values returned by floating-point functions and operators in case of overflow (see &lt;code&gt;&lt;a href=&quot;math_errhandling&quot;&gt;math_errhandling&lt;/a&gt;&lt;/code&gt;).</source>
          <target state="translated">的 &lt;code&gt;HUGE_VALF&lt;/code&gt; ， &lt;code&gt;HUGE_VAL&lt;/code&gt; 和 &lt;code&gt;HUGE_VALL&lt;/code&gt; 宏扩展为正的浮点数常量表达式，其比较等于由浮点功能和操作员在溢出的情况下，返回的值（见 &lt;code&gt;&lt;a href=&quot;math_errhandling&quot;&gt;math_errhandling&lt;/a&gt;&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="b53889e1fa8ec514487167aa966e17170b8cc75a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Hash&lt;/code&gt; and &lt;code&gt;KeyEqual&lt;/code&gt; objects must be &lt;a href=&quot;../../named_req/swappable&quot;&gt;Swappable&lt;/a&gt;, and they are exchanged using unqualified calls to non-member &lt;code&gt;swap&lt;/code&gt;.</source>
          <target state="translated">该 &lt;code&gt;Hash&lt;/code&gt; 和 &lt;code&gt;KeyEqual&lt;/code&gt; 对象必须是&lt;a href=&quot;../../named_req/swappable&quot;&gt;可交换的&lt;/a&gt;，并且他们使用的非会员不合格的通话交换 &lt;code&gt;swap&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="c876028ed259f9708a4f843ab3d6aab2c902892f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Invocable&lt;/code&gt; concept specifies that a callable type &lt;code&gt;F&lt;/code&gt; can be called with a set of argument types &lt;code&gt;Args...&lt;/code&gt; using the function template &lt;code&gt;&lt;a href=&quot;../utility/functional/invoke&quot;&gt;std::invoke&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">该 &lt;code&gt;Invocable&lt;/code&gt; 的概念指定一个可调用类型 &lt;code&gt;F&lt;/code&gt; 可以用一组参数类型被称为 &lt;code&gt;Args...&lt;/code&gt; 用函数模板 &lt;code&gt;&lt;a href=&quot;../utility/functional/invoke&quot;&gt;std::invoke&lt;/a&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="a8c6d2bb20815cb4086648b5791bd3296ece4645" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Pred&lt;/code&gt; objects must be &lt;a href=&quot;../../named_req/swappable&quot;&gt;Swappable&lt;/a&gt;, and they are exchanged using unqualified call to non-member &lt;code&gt;swap&lt;/code&gt;.</source>
          <target state="translated">的 &lt;code&gt;Pred&lt;/code&gt; 对象必须&lt;a href=&quot;../../named_req/swappable&quot;&gt;可交换&lt;/a&gt;，以及他们正在使用不合格的呼叫到非成员交换 &lt;code&gt;swap&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="0fdd47f91dc15f27f84bdafb62f28f3485f1e1f3" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Regular&lt;/code&gt; concept specifies that a type is</source>
          <target state="translated">在 &lt;code&gt;Regular&lt;/code&gt; 概念指定一个类型是</target>
        </trans-unit>
        <trans-unit id="0ce0e6d69f4d620d6fcae2b4f8fef1abc8b43a5b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;RegularInvocable&lt;/code&gt; concept adds to the &lt;code&gt;Invocable&lt;/code&gt; concept by requiring the &lt;code&gt;invoke&lt;/code&gt; expression to be equality preserving and not modify either the function object or the arguments.</source>
          <target state="translated">该 &lt;code&gt;RegularInvocable&lt;/code&gt; 概念增加了 &lt;code&gt;Invocable&lt;/code&gt; 的通过要求概念 &lt;code&gt;invoke&lt;/code&gt; 表达式是平等保存和不能修改任一功能对象或参数。</target>
        </trans-unit>
        <trans-unit id="cf8e461967237e596e17c697c486009a5fe11770" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;SIG_DFL&lt;/code&gt; and &lt;code&gt;SIG_IGN&lt;/code&gt; macros expand into integral expressions that are not equal to an address of any function. The macros define signal handling strategies for &lt;code&gt;&lt;a href=&quot;signal&quot;&gt;std::signal&lt;/a&gt;()&lt;/code&gt; function.</source>
          <target state="translated">该 &lt;code&gt;SIG_DFL&lt;/code&gt; 和 &lt;code&gt;SIG_IGN&lt;/code&gt; 宏扩展到那些不等于任何函数的地址积分表达式。宏定义 &lt;code&gt;&lt;a href=&quot;signal&quot;&gt;std::signal&lt;/a&gt;()&lt;/code&gt; 函数的信号处理策略。</target>
        </trans-unit>
        <trans-unit id="6de9aff3c7faf216d8e471183c6456f97bd54cbf" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Semiregular&lt;/code&gt; concept specifies that a type is both copyable and default constructible. It is satisfied by types that behave similarly to built-in types like &lt;code&gt;int&lt;/code&gt;, except that they need not support comparison with &lt;code&gt;==&lt;/code&gt;.</source>
          <target state="translated">该 &lt;code&gt;Semiregular&lt;/code&gt; 概念指定一个类型是既能够复制和缺省构造。行为类似于 &lt;code&gt;int&lt;/code&gt; 之类的内置类型的类型可以满足它，只是它们不需要支持与 &lt;code&gt;==&lt;/code&gt; 的比较。</target>
        </trans-unit>
        <trans-unit id="37ff8b0ffac4e36092586c172067e58bd7864950" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;T&lt;/code&gt; in &lt;code&gt;std::shared_ptr&amp;lt;T&amp;gt;&lt;/code&gt; may be a function type: in this case it manages a pointer to function, rather than an object pointer. This is sometimes used to keep a dynamic library or a plugin loaded as long as any of its functions are referenced:</source>
          <target state="translated">该 &lt;code&gt;T&lt;/code&gt; 在 &lt;code&gt;std::shared_ptr&amp;lt;T&amp;gt;&lt;/code&gt; 可以是函数类型：在这种情况下它管理的指针功能，而不是一个对象的指针。只要引用了动态库或插件的任何功能，有时就可以使用它来保持加载状态：</target>
        </trans-unit>
        <trans-unit id="65eaac4daf1baa4af15a6bc0e49ad6bf3b7e19d8" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ViewableRange&lt;/code&gt; concept is a refinement of &lt;a href=&quot;range&quot;&gt;&lt;code&gt;Range&lt;/code&gt;&lt;/a&gt; that describes a range that can be safely converted into a &lt;a href=&quot;view&quot;&gt;&lt;code&gt;View&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">该 &lt;code&gt;ViewableRange&lt;/code&gt; 概念的细化&lt;a href=&quot;range&quot;&gt; &lt;code&gt;Range&lt;/code&gt; &lt;/a&gt;描述可以安全地转换成一个范围内&lt;a href=&quot;view&quot;&gt; &lt;code&gt;View&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="0be369a359e4171939ff31f6da284f95c50dd77d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;alignas&lt;/code&gt; specifier may be applied to the declaration of a variable or a non-bitfield class data member, or it can be applied to the declaration or definition of a &lt;a href=&quot;classes&quot;&gt;class/struct/union&lt;/a&gt; or &lt;a href=&quot;enum&quot;&gt;enumeration&lt;/a&gt;. It cannot be applied to a function parameter or to the exception parameter of a catch clause.</source>
          <target state="translated">所述 &lt;code&gt;alignas&lt;/code&gt; 说明符可以被应用到一个变量的声明或非位域类的数据成员，或者它可以被应用到的声明或定义&lt;a href=&quot;classes&quot;&gt;类/结构/联合&lt;/a&gt;或&lt;a href=&quot;enum&quot;&gt;枚举&lt;/a&gt;。它不能应用于功能参数或catch子句的异常参数。</target>
        </trans-unit>
        <trans-unit id="bff8ba6726cb421edc960040f88c5cf3e47f9038" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;allocator_traits&lt;/code&gt; class template provides the standardized way to access various properties of &lt;a href=&quot;../named_req/allocator&quot;&gt;Allocators&lt;/a&gt;. The standard containers and other standard library components access allocators through this template, which makes it possible to use any class type as an allocator, as long as the user-provided specialization of &lt;code&gt;allocator_traits&lt;/code&gt; implements all required functionality.</source>
          <target state="translated">该 &lt;code&gt;allocator_traits&lt;/code&gt; 类模板提供了标准化的方式来访问各种属性&lt;a href=&quot;../named_req/allocator&quot;&gt;分配器&lt;/a&gt;。标准容器和其他标准库组件通过此模板访问分配器，只要用户提供的 &lt;code&gt;allocator_traits&lt;/code&gt; 专业化实现了所有必需的功能，就可以使用任何类类型作为分配器。</target>
        </trans-unit>
        <trans-unit id="04038d9c6f5ffb5436ba1d17bbcd6c392bc7d37c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;auto&lt;/code&gt; keyword may also be used in a nested-name-specifier. A nested-name-specifier of the form &lt;code&gt;auto::&lt;/code&gt; is a placeholder that is replaced by a class or enumeration type following the rules for &lt;a href=&quot;http://en.cppreference.com/w/cpp/experimental/constraints&quot;&gt;constrained type&lt;/a&gt; placeholder deduction.</source>
          <target state="translated">该 &lt;code&gt;auto&lt;/code&gt; 关键字，也可以在嵌套名称指定中使用。形式为 &lt;code&gt;auto::&lt;/code&gt; 的嵌套名称说明符是一个占位符，它按照&lt;a href=&quot;http://en.cppreference.com/w/cpp/experimental/constraints&quot;&gt;约束类型&lt;/a&gt;占位符推导的规则由类或枚举类型替换。</target>
        </trans-unit>
        <trans-unit id="f01f0aaa02136abf45c219eced918e6c249526ba" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;auto&lt;/code&gt; specifier may also be used in a &lt;a href=&quot;structured_binding&quot;&gt;structured binding&lt;/a&gt; declaration.</source>
          <target state="translated">该 &lt;code&gt;auto&lt;/code&gt; 符也可以在使用&lt;a href=&quot;structured_binding&quot;&gt;结构化绑定&lt;/a&gt;声明。</target>
        </trans-unit>
        <trans-unit id="eebf15af9f37cc17089284009c20c5353fc1d4ac" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;auto&lt;/code&gt; specifier may also be used with a function declarator that is followed by a trailing return type, in which case the declared return type is that trailing return type (which may again be a placeholder type).</source>
          <target state="translated">的 &lt;code&gt;auto&lt;/code&gt; 说明符还可以与一个函数声明被后跟一个尾部返回类型，在这种情况下，声明的返回类型是尾随返回类型（其可以再次是一个占位符类型）使用。</target>
        </trans-unit>
        <trans-unit id="da5417a4a1f6900885b530dcd22d3e6b960789b1" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;begin&lt;/code&gt; and &lt;code&gt;end&lt;/code&gt; data members indicate the range - &lt;code&gt;[begin, end)&lt;/code&gt; - in which the &lt;code&gt;offset&lt;/code&gt; and &lt;code&gt;abbrev&lt;/code&gt; are in effect for the time zone associated with this &lt;code&gt;sys_info&lt;/code&gt;.</source>
          <target state="translated">的 &lt;code&gt;begin&lt;/code&gt; 和 &lt;code&gt;end&lt;/code&gt; 的数据成员指示的范围内- &lt;code&gt;[begin, end)&lt;/code&gt; - ，其中， &lt;code&gt;offset&lt;/code&gt; 和 &lt;code&gt;abbrev&lt;/code&gt; 是在与此相关联的时区效应 &lt;code&gt;sys_info&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="08cdecbd98343fa04c3717e4b9bc77c4fd79a3f8" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;char_traits&lt;/code&gt; class is a traits class template that abstracts basic character and string operations for a given character type. The defined operation set is such that generic algorithms almost always can be implemented in terms of it. It is thus possible to use such algorithms with almost any possible character or string type, just by supplying a customized &lt;code&gt;char_traits&lt;/code&gt; class.</source>
          <target state="translated">该 &lt;code&gt;char_traits&lt;/code&gt; 类是一个traits类模板，抽象基本字符和字符串操作对于给定的字符类型。定义的操作集使得通用算法几乎总是可以根据它来实现。因此，仅通过提供定制的 &lt;code&gt;char_traits&lt;/code&gt; 类，便可以将这种算法用于几乎所有可能的字符或字符串类型。</target>
        </trans-unit>
        <trans-unit id="177963573909d55c891e3520852061007eb9c66e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;char_traits&lt;/code&gt; class template satisfies the requirements of &lt;a href=&quot;../named_req/chartraits&quot;&gt;CharTraits&lt;/a&gt;.</source>
          <target state="translated">该 &lt;code&gt;char_traits&lt;/code&gt; 类模板满足要求&lt;a href=&quot;../named_req/chartraits&quot;&gt;CharTraits&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="44b0b21e5f03504b17b1b60754c40fb0b2f0fa8a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;char_traits&lt;/code&gt; class template serves as a basis for explicit instantiations. The user can &lt;a href=&quot;http://en.cppreference.com/w/cpp/language/extending_std&quot;&gt;provide a specialization&lt;/a&gt; for any custom character types. Several specializations are defined for the standard character types.</source>
          <target state="translated">该 &lt;code&gt;char_traits&lt;/code&gt; 类模板充当明确的实例化的基础。用户可以为任何自定义字符类型&lt;a href=&quot;http://en.cppreference.com/w/cpp/language/extending_std&quot;&gt;提供特殊化&lt;/a&gt;。为标准字符类型定义了几种专业化。</target>
        </trans-unit>
        <trans-unit id="7b0ebde42f38090479a8212aa43f128f736af213" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;chi_squared_distribution&lt;/code&gt; produces random numbers x&amp;gt;0 according to the &lt;a href=&quot;https://en.wikipedia.org/wiki/Chi-squared_distribution&quot;&gt;Chi-squared distribution&lt;/a&gt;:  f(x;n) =</source>
          <target state="translated">所述 &lt;code&gt;chi_squared_distribution&lt;/code&gt; 根据产生的随机数x&amp;gt; 0 &lt;a href=&quot;https://en.wikipedia.org/wiki/Chi-squared_distribution&quot;&gt;卡方分布&lt;/a&gt;：F（X N）=</target>
        </trans-unit>
        <trans-unit id="5102ccf4e38654c4fd4d26ea6f891ab30afa39bf" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;chrono&lt;/code&gt; library defines three main types as well as utility functions and common typedefs.</source>
          <target state="translated">的 &lt;code&gt;chrono&lt;/code&gt; 库定义三种主要类型以及效用函数和公共的typedef。</target>
        </trans-unit>
        <trans-unit id="b6766d205bb5b455d579d758141a563b95b3d67c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;chrono&lt;/code&gt; library, a flexible collection of types that track time with varying degrees of precision (e.g. &lt;code&gt;&lt;a href=&quot;chrono/time_point&quot;&gt;std::chrono::time_point&lt;/a&gt;&lt;/code&gt;).</source>
          <target state="translated">该 &lt;code&gt;chrono&lt;/code&gt; 库，类型灵活的集合，跟踪时间有不同程度的精度（如 &lt;code&gt;&lt;a href=&quot;chrono/time_point&quot;&gt;std::chrono::time_point&lt;/a&gt;&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="0a52f6a677651b00292edc29fa2de13e4ac2f9ec" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;condition_variable&lt;/code&gt; class is a synchronization primitive that can be used to block a thread, or multiple threads at the same time, until another thread both modifies a shared variable (the</source>
          <target state="translated">所述 &lt;code&gt;condition_variable&lt;/code&gt; 类是原始的同步可以被用来阻止一个线程，或者在同一时间的多个线程，直到另一个线程都修改的共享变量（</target>
        </trans-unit>
        <trans-unit id="b215c4b6c6a9b5c07215f55013e1367ef3ea0332" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;condition_variable_any&lt;/code&gt; class is a generalization of &lt;code&gt;&lt;a href=&quot;condition_variable&quot;&gt;std::condition_variable&lt;/a&gt;&lt;/code&gt;. Whereas &lt;code&gt;&lt;a href=&quot;condition_variable&quot;&gt;std::condition_variable&lt;/a&gt;&lt;/code&gt; works only on &lt;code&gt;&lt;a href=&quot;unique_lock&quot;&gt;std::unique_lock&lt;/a&gt;&amp;lt;&lt;a href=&quot;mutex&quot;&gt;std::mutex&lt;/a&gt;&amp;gt;&lt;/code&gt;, &lt;code&gt;condition_variable_any&lt;/code&gt; can operate on any lock that meets the &lt;a href=&quot;../named_req/basiclockable&quot;&gt;BasicLockable&lt;/a&gt; requirements.</source>
          <target state="translated">该 &lt;code&gt;condition_variable_any&lt;/code&gt; 类是一个泛化 &lt;code&gt;&lt;a href=&quot;condition_variable&quot;&gt;std::condition_variable&lt;/a&gt;&lt;/code&gt; 。而 &lt;code&gt;&lt;a href=&quot;condition_variable&quot;&gt;std::condition_variable&lt;/a&gt;&lt;/code&gt; 仅在 &lt;code&gt;&lt;a href=&quot;unique_lock&quot;&gt;std::unique_lock&lt;/a&gt;&amp;lt;&lt;a href=&quot;mutex&quot;&gt;std::mutex&lt;/a&gt;&amp;gt;&lt;/code&gt; ，而 &lt;code&gt;condition_variable_any&lt;/code&gt; 可以在满足&lt;a href=&quot;../named_req/basiclockable&quot;&gt;BasicLockable&lt;/a&gt;要求的任何锁上进行操作。</target>
        </trans-unit>
        <trans-unit id="1cf2d3a260a3d32021ce59105ae016547705dee9" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;const&lt;/code&gt; overloads that return element sequences create a new &lt;code&gt;&lt;a href=&quot;../valarray&quot;&gt;std::valarray&lt;/a&gt;&lt;/code&gt; object. The non-&lt;code&gt;const&lt;/code&gt; overloads return classes holding references to the array elements.</source>
          <target state="translated">返回元素序列的 &lt;code&gt;const&lt;/code&gt; 重载会创建一个新的 &lt;code&gt;&lt;a href=&quot;../valarray&quot;&gt;std::valarray&lt;/a&gt;&lt;/code&gt; 对象。非 &lt;code&gt;const&lt;/code&gt; 重载返回的类包含对数组元素的引用。</target>
        </trans-unit>
        <trans-unit id="dd55baa6e491928bab686e3cd64f2e9dfe961be7" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;const&lt;/code&gt; qualifier used on a declaration of a non-local non-volatile non-&lt;a href=&quot;variable_template&quot;&gt;template&lt;/a&gt;(since C++14)non-&lt;a href=&quot;inline&quot;&gt;inline&lt;/a&gt;(since C++17) variable that is not declared &lt;code&gt;extern&lt;/code&gt; gives it &lt;a href=&quot;storage_duration#Linkage&quot;&gt;internal linkage&lt;/a&gt;. This is different from C where const file scope variables have external linkage.</source>
          <target state="translated">的 &lt;code&gt;const&lt;/code&gt; 在非本地非易失性非的声明中使用限定符&lt;a href=&quot;variable_template&quot;&gt;模板&lt;/a&gt;（因为C ++ 14）非&lt;a href=&quot;inline&quot;&gt;内嵌&lt;/a&gt;（因为C ++ 17），其被未声明的变量 &lt;code&gt;extern&lt;/code&gt; 给它&lt;a href=&quot;storage_duration#Linkage&quot;&gt;内部连接&lt;/a&gt;。这与const文件范围变量具有外部链接的C不同。</target>
        </trans-unit>
        <trans-unit id="9e69cf0356decd5627b692a11a1d92f42afc3d01" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;consteval&lt;/code&gt; specifier declares a function or function template to be an</source>
          <target state="translated">该 &lt;code&gt;consteval&lt;/code&gt; 符声明的函数或函数模板是一个</target>
        </trans-unit>
        <trans-unit id="35815ab767098ba84898163f2b361dc56dd3ae30" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;constexpr&lt;/code&gt; specifier declares that it is possible to evaluate the value of the function or variable at compile time. Such variables and functions can then be used where only compile time &lt;a href=&quot;constant_expression&quot;&gt;constant expressions&lt;/a&gt; are allowed (provided that appropriate function arguments are given). A &lt;code&gt;constexpr&lt;/code&gt; specifier used in an object declaration  or non-static member function(until C++14) implies &lt;code&gt;const&lt;/code&gt;. A &lt;code&gt;constexpr&lt;/code&gt; specifier used in a function  or &lt;a href=&quot;static&quot;&gt;static&lt;/a&gt; member variable(since C++17) declaration implies &lt;code&gt;inline&lt;/code&gt;. If any declaration of a function or function template has a &lt;code&gt;constexpr&lt;/code&gt; specifier, then every declaration must contain that specifier.</source>
          <target state="translated">该 &lt;code&gt;constexpr&lt;/code&gt; 指定符，它可以评估在编译时函数或变量的值。这样的变量和函数可以在仅允许编译&lt;a href=&quot;constant_expression&quot;&gt;时常量表达式的&lt;/a&gt;情况下使用（前提是给出了适当的函数参数）。在对象声明或非静态成员函数（直到C ++ 14）中使用的 &lt;code&gt;constexpr&lt;/code&gt; 说明符暗含 &lt;code&gt;const&lt;/code&gt; 。在函数或&lt;a href=&quot;static&quot;&gt;静态&lt;/a&gt;成员变量（自C ++ 17起）声明中使用的 &lt;code&gt;constexpr&lt;/code&gt; 说明符暗含 &lt;code&gt;inline&lt;/code&gt; 。如果函数或函数模板的任何声明都有 &lt;code&gt;constexpr&lt;/code&gt; 说明符，则每个声明都必须包含该说明符。</target>
        </trans-unit>
        <trans-unit id="de7d028befc7b72b5d7baad4130ff394635f4af2" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;continue&lt;/code&gt; statement causes a jump, as if by &lt;a href=&quot;goto&quot;&gt;goto&lt;/a&gt; to the end of the loop body (it may only appear within the loop body of &lt;a href=&quot;for&quot;&gt;for&lt;/a&gt;, &lt;a href=&quot;range-for&quot;&gt;range-for&lt;/a&gt;, &lt;a href=&quot;while&quot;&gt;while&lt;/a&gt;, and &lt;a href=&quot;do&quot;&gt;do-while&lt;/a&gt; loops).</source>
          <target state="translated">在 &lt;code&gt;continue&lt;/code&gt; 语句导致跳转，仿佛被&lt;a href=&quot;goto&quot;&gt;转到&lt;/a&gt;循环体的末尾（它可能只的循环体中出现&lt;a href=&quot;for&quot;&gt;的&lt;/a&gt;，&lt;a href=&quot;range-for&quot;&gt;范围换&lt;/a&gt;，&lt;a href=&quot;while&quot;&gt;同时&lt;/a&gt;，和&lt;a href=&quot;do&quot;&gt;做，而&lt;/a&gt;循环）。</target>
        </trans-unit>
        <trans-unit id="8dca88435ad03881fbd9b4dc716ca855832c1e5b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;double&lt;/code&gt; version of &lt;code&gt;std::round&lt;/code&gt; behaves as if implemented as follows:</source>
          <target state="translated">&lt;code&gt;std::round&lt;/code&gt; 的 &lt;code&gt;double&lt;/code&gt; 版本的行为就像实现如下：</target>
        </trans-unit>
        <trans-unit id="05595bba0a787573762c012c73d8da365cd8a32d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;error_type&lt;/code&gt; is a type that describes errors that may occur during regular expression parsing.</source>
          <target state="translated">的 &lt;code&gt;error_type&lt;/code&gt; 是描述正则表达式分析过程中可能出现的错误类型。</target>
        </trans-unit>
        <trans-unit id="932d4e1dcebe4a218d1fd9f57208e42aa699239e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;extern&lt;/code&gt; keyword can also be used to specify &lt;a href=&quot;language_linkage&quot;&gt;language linkage&lt;/a&gt; and &lt;a href=&quot;class_template&quot;&gt;explicit template instantiation declarations&lt;/a&gt;, but it's not a storage class specifier in those cases (except when a declaration is directly contained in a language linkage specification, in which case the declaration is treated as if it contains the &lt;code&gt;extern&lt;/code&gt; specifier).</source>
          <target state="translated">该 &lt;code&gt;extern&lt;/code&gt; 关键字也可用于指定&lt;a href=&quot;language_linkage&quot;&gt;语言联动&lt;/a&gt;和&lt;a href=&quot;class_template&quot;&gt;明确的模板实例声明&lt;/a&gt;，但它不是在这些情况下，存储类说明（当声明直接包含在语言链接规范，在这种情况下，声明将被视为如果除它包含 &lt;code&gt;extern&lt;/code&gt; 说明符）。</target>
        </trans-unit>
        <trans-unit id="52649288e6377fb98d3ed6678b3819788af177ba" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;fill&lt;/code&gt; character is provided for those implementation-defined format specifiers and for the user-defined overrides of &lt;code&gt;do_put()&lt;/code&gt; that use padding and filling logic. Such implementations typically make use of the formatting flags from &lt;code&gt;str&lt;/code&gt;.</source>
          <target state="translated">该 &lt;code&gt;fill&lt;/code&gt; 字符被提供用于那些实现定义的格式说明和用于用户定义的覆盖 &lt;code&gt;do_put()&lt;/code&gt; 在使用填充和填充逻辑。这样的实现通常利用 &lt;code&gt;str&lt;/code&gt; 中的格式标志。</target>
        </trans-unit>
        <trans-unit id="ceb8fdf893c64b9bf5b9166ad2341a9ce3a4fc89" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;flags&lt;/code&gt; bitmask determines which format specifiers and escape sequences are recognized.</source>
          <target state="translated">该 &lt;code&gt;flags&lt;/code&gt; 位掩码确定的格式说明符和转义序列被识别。</target>
        </trans-unit>
        <trans-unit id="60a0827b559dc3609b6079d5a14b629f858e635e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;get&lt;/code&gt; method waits until the &lt;code&gt;future&lt;/code&gt; has a valid result and (depending on which template is used) retrieves it. It effectively calls &lt;code&gt;&lt;a href=&quot;wait&quot;&gt;wait()&lt;/a&gt;&lt;/code&gt; in order to wait for the result.</source>
          <target state="translated">该 &lt;code&gt;get&lt;/code&gt; 方法等待，直到 &lt;code&gt;future&lt;/code&gt; 有一个有效的结果，并且（取决于所使用的模板）进行检索。它有效地调用 &lt;code&gt;&lt;a href=&quot;wait&quot;&gt;wait()&lt;/a&gt;&lt;/code&gt; 以便等待结果。</target>
        </trans-unit>
        <trans-unit id="fa10112d4d243c9e88153a1eadcc7cb485d5a648" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;get&lt;/code&gt; method waits until the &lt;code&gt;shared_future&lt;/code&gt; has a valid result and (depending on which template is used) retrieves it. It effectively calls &lt;code&gt;&lt;a href=&quot;wait&quot;&gt;wait()&lt;/a&gt;&lt;/code&gt; in order to wait for the result.</source>
          <target state="translated">该 &lt;code&gt;get&lt;/code&gt; 方法等待，直到 &lt;code&gt;shared_future&lt;/code&gt; 有一个有效的结果，并且（取决于所使用的模板）进行检索。它有效地调用 &lt;code&gt;&lt;a href=&quot;wait&quot;&gt;wait()&lt;/a&gt;&lt;/code&gt; 以便等待结果。</target>
        </trans-unit>
        <trans-unit id="2786a7f9bc87460e17c0440169fb55a2685fc146" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;goto&lt;/code&gt; statement cannot transfer control into a &lt;a href=&quot;try_catch&quot;&gt;try-block&lt;/a&gt; or into a catch-clause, but can transfer control out of a try-block or a catch-clause (the rules above regarding automatic variables in scope are followed).</source>
          <target state="translated">所述 &lt;code&gt;goto&lt;/code&gt; 语句不能转移控制到&lt;a href=&quot;try_catch&quot;&gt;试块&lt;/a&gt;或成追赶条款，但可以传输控制try块或catch子句（上文关于范围自动变量遵守规则）的进行。</target>
        </trans-unit>
        <trans-unit id="031e15ddd6649548e06689a0db9c2fd9bd1bf8f1" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;initializer&lt;/code&gt; is not optional if.</source>
          <target state="translated">该 &lt;code&gt;initializer&lt;/code&gt; 是不可选的，如果。</target>
        </trans-unit>
        <trans-unit id="7f965e1c24153a443cd599dc6dec3772ab145903" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;inline&lt;/code&gt; specifier, when used in a &lt;a href=&quot;declarations#Specifiers&quot;&gt;decl-specifier-seq&lt;/a&gt; of a variable with static storage duration (static class member or namespace-scope variable), declares the variable to be an</source>
          <target state="translated">的 &lt;code&gt;inline&lt;/code&gt; 说明符，在使用时&lt;a href=&quot;declarations#Specifiers&quot;&gt;DECL说明符-SEQ&lt;/a&gt;具有静态存储的持续时间（静态类成员或命名空间范围的变量）的变量的，声明变量是一个</target>
        </trans-unit>
        <trans-unit id="bde3e8856747d6351599372bdacbbefb9c1e2210" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;inline&lt;/code&gt; specifier, when used in a function's &lt;a href=&quot;declarations#Specifiers&quot;&gt;decl-specifier-seq&lt;/a&gt;, declares the function to be an</source>
          <target state="translated">该 &lt;code&gt;inline&lt;/code&gt; 符，在函数中使用时&lt;a href=&quot;declarations#Specifiers&quot;&gt;DECL说明符-SEQ&lt;/a&gt;，声明函数是一个</target>
        </trans-unit>
        <trans-unit id="8aa05d61d78251587e3d9f7bde2b8eaec9c423a2" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;int&lt;/code&gt; parameter is a dummy parameter used to differentiate between prefix and postfix versions of the operators. When the user-defined postfix operator is called, the value passed in that parameter is always zero, although it may be changed by calling the operator using function call notation (e.g., &lt;code&gt;a.operator++(2)&lt;/code&gt; or &lt;code&gt;operator++(a, 2)&lt;/code&gt;).</source>
          <target state="translated">的 &lt;code&gt;int&lt;/code&gt; 参数是所使用的运算符的前缀和后缀的版本之间进行区分的伪参数。调用用户定义的后缀运算符时，尽管可以通过使用函数调用符号来调用该运算符（例如， &lt;code&gt;a.operator++(2)&lt;/code&gt; 或 &lt;code&gt;operator++(a, 2)&lt;/code&gt; ）来更改该参数中传递的值，但该值始终为零。。</target>
        </trans-unit>
        <trans-unit id="92968e121e7165e31286647fba30664ab9bc7316" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;local_time&lt;/code&gt; associated with &lt;code&gt;tp&lt;/code&gt; and this time zone.</source>
          <target state="translated">与 &lt;code&gt;tp&lt;/code&gt; 和该时区关联的 &lt;code&gt;local_time&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="f8457b952a5ed2dd70613e9c33c791fd7241a61e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;localeconv&lt;/code&gt; function obtains a pointer to a static object of type &lt;code&gt;&lt;a href=&quot;lconv&quot;&gt;std::lconv&lt;/a&gt;&lt;/code&gt;, which represents numeric and monetary formatting rules of the current C locale.</source>
          <target state="translated">的 &lt;code&gt;localeconv&lt;/code&gt; 函数获取的指针类型的静态对象 &lt;code&gt;&lt;a href=&quot;lconv&quot;&gt;std::lconv&lt;/a&gt;&lt;/code&gt; ，这表示当前C语言环境的数字和货币的格式规则。</target>
        </trans-unit>
        <trans-unit id="871c1b9d3287d86d418a876a89b0359bd3b24165" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;lock_guard&lt;/code&gt; class is non-copyable.</source>
          <target state="translated">该 &lt;code&gt;lock_guard&lt;/code&gt; 类是不可复制的。</target>
        </trans-unit>
        <trans-unit id="b612fa95299520ae1c9eb4dbe4d246807c386150" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;main()&lt;/code&gt; function</source>
          <target state="translated">在 &lt;code&gt;main()&lt;/code&gt; 函数</target>
        </trans-unit>
        <trans-unit id="7373830865d083f56e567e0e35241e9449625781" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;main&lt;/code&gt; function has several special properties:</source>
          <target state="translated">在 &lt;code&gt;main&lt;/code&gt; 功能上有几个特殊属性：</target>
        </trans-unit>
        <trans-unit id="43f74c21d245cac408b403b1479529ca4f6979ad" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;main&lt;/code&gt; function is called at program startup after &lt;a href=&quot;initialization&quot;&gt;initialization&lt;/a&gt; of the non-local objects with static &lt;a href=&quot;storage_duration&quot;&gt;storage duration&lt;/a&gt;. It is the designated entry point to a program that is executed in</source>
          <target state="translated">的 &lt;code&gt;main&lt;/code&gt; 功能是在程序启动后调用&lt;a href=&quot;initialization&quot;&gt;初始化&lt;/a&gt;静态的非本地对象的&lt;a href=&quot;storage_duration&quot;&gt;存储时间&lt;/a&gt;。它是在其中执行的程序的指定入口点</target>
        </trans-unit>
        <trans-unit id="89ff7175fcc410342462f2eea4a20828de71c2e9" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;mutex&lt;/code&gt; class is a synchronization primitive that can be used to protect shared data from being simultaneously accessed by multiple threads.</source>
          <target state="translated">所述 &lt;code&gt;mutex&lt;/code&gt; 类是原始的同步可以被用来保护从由多个线程同时被访问的共享数据。</target>
        </trans-unit>
        <trans-unit id="b4bc2f666b0fcf62423756e2f92296de1749b231" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;n&lt;/code&gt;th predecessor of iterator &lt;code&gt;it&lt;/code&gt;.</source>
          <target state="translated">第 &lt;code&gt;n&lt;/code&gt; 个迭代器 &lt;code&gt;it&lt;/code&gt; 的前身。</target>
        </trans-unit>
        <trans-unit id="a315e0d4269377bcca03d5a9cce5ae4498e0c870" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;n&lt;/code&gt;th successor of iterator &lt;code&gt;it&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;it&lt;/code&gt; 的第 &lt;code&gt;n&lt;/code&gt; 个继承者。</target>
        </trans-unit>
        <trans-unit id="eea079380ac363ae07705954b7f4d3fea5a10329" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;new&lt;/code&gt; expression attempts to allocate storage and then attempts to construct and initialize either a single unnamed object, or an unnamed array of objects in the allocated storage. The new-expression returns a prvalue pointer to the constructed object or, if an array of objects was constructed, a pointer to the initial element of the array.</source>
          <target state="translated">的 &lt;code&gt;new&lt;/code&gt; 表达尝试分配存储，然后尝试建立和初始化一个单一的未命名的对象，或在分配的存储对象的未命名的阵列。new-expression返回指向构造对象的prvalue指针，或者，如果构造了对象数组，则返回指向数组初始元素的指针。</target>
        </trans-unit>
        <trans-unit id="ead8e378038e6652b84ea0044d098289ae5652ce" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;noexcept&lt;/code&gt; operator does not evaluate expression.</source>
          <target state="translated">该 &lt;code&gt;noexcept&lt;/code&gt; 运营商并不计算表达式。</target>
        </trans-unit>
        <trans-unit id="d2ca9dcb6d4e088c8b11fa6caa39ac36140cdbf7" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;noexcept&lt;/code&gt; operator performs a compile-time check that returns true if an expression is declared to not throw any exceptions.</source>
          <target state="translated">该 &lt;code&gt;noexcept&lt;/code&gt; 运营商进行编译时检查，则返回true，如果一个表达式声明不抛出任何异常。</target>
        </trans-unit>
        <trans-unit id="50c513953b1f92f60c692964e4a72e25a368f1b7" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;numeric_limits&lt;/code&gt; class template provides a standardized way to query various properties of arithmetic types (e.g. the largest possible value for type &lt;code&gt;int&lt;/code&gt; is &lt;code&gt;std::numeric_limits&amp;lt;int&amp;gt;::max()&lt;/code&gt;).</source>
          <target state="translated">所述 &lt;code&gt;numeric_limits&lt;/code&gt; 类模板提供一个标准化的方法来算术类型的查询各种属性（例如，用于类型的最大可能值 &lt;code&gt;int&lt;/code&gt; 是 &lt;code&gt;std::numeric_limits&amp;lt;int&amp;gt;::max()&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="7fe11954ad007a4af379951d73b5527c3769ef5f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;offset&lt;/code&gt; and &lt;code&gt;abbrev&lt;/code&gt; data member indicate the UTC offset and time zone abbreviation, respectively, in effect for the associated time zone and &lt;code&gt;&lt;a href=&quot;time_point&quot;&gt;std::chrono::time_point&lt;/a&gt;&lt;/code&gt;. Note that time zone abbreviations are not unique.</source>
          <target state="translated">的 &lt;code&gt;offset&lt;/code&gt; 和 &lt;code&gt;abbrev&lt;/code&gt; 数据成员指示UTC偏差和时区缩写，分别在为相关的时区和效果 &lt;code&gt;&lt;a href=&quot;time_point&quot;&gt;std::chrono::time_point&lt;/a&gt;&lt;/code&gt; 。请注意，时区缩写不是唯一的。</target>
        </trans-unit>
        <trans-unit id="f78f379de0f1937dfed883c08e0f94ce9e47e089" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;openmode&lt;/code&gt; argument, required by the base class function signature, is usually ignored, because &lt;code&gt;std::basic_filebuf&lt;/code&gt; maintains only one file position.</source>
          <target state="translated">基类函数签名所需的 &lt;code&gt;openmode&lt;/code&gt; 参数通常被忽略，因为 &lt;code&gt;std::basic_filebuf&lt;/code&gt; 仅维护一个文件位置。</target>
        </trans-unit>
        <trans-unit id="7134e77fbf2616c72ce53c638efa5b4083c7a3f8" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;optional&lt;/code&gt; object</source>
          <target state="translated">在 &lt;code&gt;optional&lt;/code&gt; 对象</target>
        </trans-unit>
        <trans-unit id="7e31417a62218983d2ccade81e8afcf7ba3d979c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;pointer_traits&lt;/code&gt; class template provides the standardized way to access certain properties of pointer-like types (&lt;a href=&quot;../named_req/allocator#Fancy_pointers&quot;&gt;fancy pointers&lt;/a&gt;, such as &lt;a href=&quot;http://www.boost.org/doc/libs/release/doc/html/interprocess/offset_ptr.html&quot;&gt;boost::interprocess::offset_ptr&lt;/a&gt;). The standard template &lt;code&gt;&lt;a href=&quot;allocator_traits&quot;&gt;std::allocator_traits&lt;/a&gt;&lt;/code&gt; relies on &lt;code&gt;pointer_traits&lt;/code&gt; to determine the defaults for various typedefs required by &lt;a href=&quot;../named_req/allocator&quot;&gt;Allocator&lt;/a&gt;.</source>
          <target state="translated">所述 &lt;code&gt;pointer_traits&lt;/code&gt; 类模板提供了标准化的方式来指针状类型（访问某些性质&lt;a href=&quot;../named_req/allocator#Fancy_pointers&quot;&gt;花式指针&lt;/a&gt;，诸如&lt;a href=&quot;http://www.boost.org/doc/libs/release/doc/html/interprocess/offset_ptr.html&quot;&gt;升压::进程间:: offset_ptr&lt;/a&gt;）。标准模板 &lt;code&gt;&lt;a href=&quot;allocator_traits&quot;&gt;std::allocator_traits&lt;/a&gt;&lt;/code&gt; 依赖于 &lt;code&gt;pointer_traits&lt;/code&gt; 来确定&lt;a href=&quot;../named_req/allocator&quot;&gt;Allocator&lt;/a&gt;所需的各种typedef的默认值。</target>
        </trans-unit>
        <trans-unit id="ca2280a6d4e3d5c449692c02d9ca052320c436fe" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;pointer_traits&lt;/code&gt; class template provides the standardized way to access certain properties of pointer-like types (&lt;a href=&quot;../named_req/allocator#Fancy_pointers&quot;&gt;fancy pointers&lt;/a&gt;, such as &lt;a href=&quot;https://www.boost.org/doc/libs/release/doc/html/interprocess/offset_ptr.html&quot;&gt;boost::interprocess::offset_ptr&lt;/a&gt;). The standard template &lt;code&gt;&lt;a href=&quot;allocator_traits&quot;&gt;std::allocator_traits&lt;/a&gt;&lt;/code&gt; relies on &lt;code&gt;pointer_traits&lt;/code&gt; to determine the defaults for various typedefs required by &lt;a href=&quot;../named_req/allocator&quot;&gt;Allocator&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aed9526a12ac6c0b94706d8d2d4fea2631766202" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;proj&lt;/code&gt; function helps model the Riemann sphere by mapping all infinities to one (give or take the sign of the imaginary zero), and should be used just before any operation, especially comparisons, that might give spurious results for any of the other infinities.</source>
          <target state="translated">该 &lt;code&gt;proj&lt;/code&gt; 功能可以通过映射所有无穷大的黎曼球体模型一个（给予或采取虚零的符号），并应任何操作，尤其是比较，这可能会给虚假的结果对于任何其他无穷的前刚刚使用。</target>
        </trans-unit>
        <trans-unit id="16a8dc17771b5740dbb0cfbe04c9fb979e594017" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;recursive_mutex&lt;/code&gt; class is a synchronization primitive that can be used to protect shared data from being simultaneously accessed by multiple threads.</source>
          <target state="translated">所述 &lt;code&gt;recursive_mutex&lt;/code&gt; 类是原始的同步可以被用来保护从由多个线程同时被访问的共享数据。</target>
        </trans-unit>
        <trans-unit id="75793db3b7c87aa4e287a2f638dfc7ae867a0afd" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;recursive_timed_mutex&lt;/code&gt; class is a synchronization primitive that can be used to protect shared data from being simultaneously accessed by multiple threads.</source>
          <target state="translated">所述 &lt;code&gt;recursive_timed_mutex&lt;/code&gt; 类是原始的同步可以被用来保护从由多个线程同时被访问的共享数据。</target>
        </trans-unit>
        <trans-unit id="579b829a50621b7a0aafe11e52a8bf5b7d048cfa" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;recursive_timed_mutex&lt;/code&gt; class satisfies all requirements of &lt;a href=&quot;../named_req/timedmutex&quot;&gt;TimedMutex&lt;/a&gt; and &lt;a href=&quot;../named_req/standardlayouttype&quot;&gt;StandardLayoutType&lt;/a&gt;.</source>
          <target state="translated">该 &lt;code&gt;recursive_timed_mutex&lt;/code&gt; 类满足所有要求&lt;a href=&quot;../named_req/timedmutex&quot;&gt;TimedMutex&lt;/a&gt;和&lt;a href=&quot;../named_req/standardlayouttype&quot;&gt;StandardLayoutType&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="0f502cafc006683857dcfb81fd4ded261d5ae887" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;reference&lt;/code&gt; type for an input iterator that is not also a &lt;a href=&quot;forwarditerator&quot;&gt;LegacyForwardIterator&lt;/a&gt; does not have to be a reference type: dereferencing an input iterator may return a proxy object or &lt;code&gt;value_type&lt;/code&gt; itself by value (as in the case of &lt;a href=&quot;../iterator/istreambuf_iterator&quot;&gt;&lt;code&gt;std::istreambuf_iterator&lt;/code&gt;&lt;/a&gt;).</source>
          <target state="translated">既不是&lt;a href=&quot;forwarditerator&quot;&gt;LegacyForwardIterator&lt;/a&gt;的输入迭代器的 &lt;code&gt;reference&lt;/code&gt; 类型也不必是引用类型：取消引用输入迭代器可以按值返回代理对象或 &lt;code&gt;value_type&lt;/code&gt; 本身（例如&lt;a href=&quot;../iterator/istreambuf_iterator&quot;&gt; &lt;code&gt;std::istreambuf_iterator&lt;/code&gt; &lt;/a&gt;的情况）。</target>
        </trans-unit>
        <trans-unit id="2c035e01c3dbc28696d2904643638e7f98ef9463" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;save&lt;/code&gt; data member, if nonzero, indicates that the time zone is on daylight saving time at the specified time point. In this case, &lt;code&gt;offset - save&lt;/code&gt; is a suggestion of what offset this time zone might use if it were off daylight saving time. However, this information is not authoritative: the only way to ascertain the actual offset is to query the time zone with a time point that is actually off daylight savings time (i.e. returns a &lt;code&gt;sys_info&lt;/code&gt; such that &lt;code&gt;save == 0min&lt;/code&gt;).</source>
          <target state="translated">该 &lt;code&gt;save&lt;/code&gt; 数据成员，如果非零，表示该时区是在夏时制时间在指定的时间点。在这种情况下， &lt;code&gt;offset - save&lt;/code&gt; 表示该时区在夏令时以外可能使用的偏移量。但是，此信息不是权威性的：确定实际偏移量的唯一方法是查询时区，该时区实际上偏离夏时制（即返回 &lt;code&gt;sys_info&lt;/code&gt; ，使 &lt;code&gt;save == 0min&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="7b88227d0e2029df0809a94b40cd5604a4dddbed" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;scalbln&lt;/code&gt; function is provided because the factor required to scale from the smallest positive floating-point value to the largest finite one may be greater than 32767, the standard-guaranteed &lt;code&gt;&lt;a href=&quot;../../types/climits&quot;&gt;INT_MAX&lt;/a&gt;&lt;/code&gt;. In particular, for the 80-bit &lt;code&gt;long double&lt;/code&gt;, the factor is 32828.</source>
          <target state="translated">所述 &lt;code&gt;scalbln&lt;/code&gt; 因为所需的因子来缩放从最小的正浮点值到最大的有限的可以是大于32767，标准保证提供功能 &lt;code&gt;&lt;a href=&quot;../../types/climits&quot;&gt;INT_MAX&lt;/a&gt;&lt;/code&gt; 。特别是对于80位 &lt;code&gt;long double&lt;/code&gt; ，该因子是32828。</target>
        </trans-unit>
        <trans-unit id="b1f9bffd993af74895ea24d6e5a6c3c209ca9f45" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;scoped_lock&lt;/code&gt; class is non-copyable.</source>
          <target state="translated">该 &lt;code&gt;scoped_lock&lt;/code&gt; 的类是不可复制的。</target>
        </trans-unit>
        <trans-unit id="6b60c9e939da9755686b6ae70e02cdd28175c2b5" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;setlocale&lt;/code&gt; function installs the specified system locale or its portion as the new C locale. The modifications remain in effect and influences the execution of all locale-sensitive C library functions until the next call to &lt;code&gt;setlocale&lt;/code&gt;. If &lt;code&gt;locale&lt;/code&gt; is a null pointer, &lt;code&gt;setlocale&lt;/code&gt; queries the current C locale without modifying it.</source>
          <target state="translated">所述 &lt;code&gt;setlocale&lt;/code&gt; 函数安装指定的系统区域或者其作为新的C语言环境的部分。修改一直有效，并影响所有对语言环境敏感的C库函数的执行，直到下一次调用 &lt;code&gt;setlocale&lt;/code&gt; 为止。如果 &lt;code&gt;locale&lt;/code&gt; 是空指针，则 &lt;code&gt;setlocale&lt;/code&gt; 会查询当前的C语言环境而不修改它。</target>
        </trans-unit>
        <trans-unit id="6b876cb1d68297596d892c9e79612cc1d718ee4d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;shared_lock&lt;/code&gt; class is movable, but not copyable -- it meets the requirements of &lt;a href=&quot;../named_req/moveconstructible&quot;&gt;MoveConstructible&lt;/a&gt; and &lt;a href=&quot;../named_req/moveassignable&quot;&gt;MoveAssignable&lt;/a&gt; but not of &lt;a href=&quot;../named_req/copyconstructible&quot;&gt;CopyConstructible&lt;/a&gt; or &lt;a href=&quot;../named_req/copyassignable&quot;&gt;CopyAssignable&lt;/a&gt;.</source>
          <target state="translated">该 &lt;code&gt;shared_lock&lt;/code&gt; 类是可移动的，但不可拷贝-它满足的要求&lt;a href=&quot;../named_req/moveconstructible&quot;&gt;MoveConstructible&lt;/a&gt;和&lt;a href=&quot;../named_req/moveassignable&quot;&gt;MoveAssignable&lt;/a&gt;但不&lt;a href=&quot;../named_req/copyconstructible&quot;&gt;复制构造&lt;/a&gt;或&lt;a href=&quot;../named_req/copyassignable&quot;&gt;CopyAssignable&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="3ba0072c5cc0f9ffc4d13a71fa58acfb63fc0bd7" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;shared_mutex&lt;/code&gt; class is a synchronization primitive that can be used to protect shared data from being simultaneously accessed by multiple threads. In contrast to other mutex types which facilitate exclusive access, a shared_mutex has two levels of access:</source>
          <target state="translated">所述 &lt;code&gt;shared_mutex&lt;/code&gt; 类是原始的同步可以被用来保护从由多个线程同时被访问的共享数据。与促进互斥访问的其他互斥锁类型相反，shared_mutex具有两种访问级别：</target>
        </trans-unit>
        <trans-unit id="c101aca05b9e44dae7ff87f787fe7276b486c130" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;shared_mutex&lt;/code&gt; class satisfies all requirements of &lt;a href=&quot;../named_req/sharedmutex&quot;&gt;SharedMutex&lt;/a&gt; and &lt;a href=&quot;../named_req/standardlayouttype&quot;&gt;StandardLayoutType&lt;/a&gt;.</source>
          <target state="translated">该 &lt;code&gt;shared_mutex&lt;/code&gt; 类满足所有要求&lt;a href=&quot;../named_req/sharedmutex&quot;&gt;SharedMutex&lt;/a&gt;和&lt;a href=&quot;../named_req/standardlayouttype&quot;&gt;StandardLayoutType&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="0fd15329728ea18d0504ccf1f956107ca292faec" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;shared_timed_mutex&lt;/code&gt; class is a synchronization primitive that can be used to protect shared data from being simultaneously accessed by multiple threads. In contrast to other mutex types which facilitate exclusive access, a shared_timed_mutex has two levels of access:</source>
          <target state="translated">所述 &lt;code&gt;shared_timed_mutex&lt;/code&gt; 类是原始的同步可以被用来保护从由多个线程同时被访问的共享数据。与有助于互斥访问的其他互斥锁类型相比，shared_timed_mutex具有两种访问级别：</target>
        </trans-unit>
        <trans-unit id="06999549f90a0f72f27c3eb6c97153c19f2420bb" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;shared_timed_mutex&lt;/code&gt; class satisfies all requirements of &lt;a href=&quot;../named_req/sharedtimedmutex&quot;&gt;SharedTimedMutex&lt;/a&gt; and &lt;a href=&quot;../named_req/standardlayouttype&quot;&gt;StandardLayoutType&lt;/a&gt;.</source>
          <target state="translated">该 &lt;code&gt;shared_timed_mutex&lt;/code&gt; 类满足所有要求&lt;a href=&quot;../named_req/sharedtimedmutex&quot;&gt;SharedTimedMutex&lt;/a&gt;和&lt;a href=&quot;../named_req/standardlayouttype&quot;&gt;StandardLayoutType&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="8ccaf14b5121e6a6f684cf1f7b72304970279974" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;showbase&lt;/code&gt; flag affects the behavior of integer output (see &lt;code&gt;&lt;a href=&quot;../../locale/num_put/put&quot;&gt;std::num_put::put&lt;/a&gt;&lt;/code&gt;), monetary input (see &lt;code&gt;&lt;a href=&quot;../../locale/money_get/get&quot;&gt;std::money_get::get&lt;/a&gt;&lt;/code&gt;) and monetary output (see &lt;code&gt;&lt;a href=&quot;../../locale/money_put/put&quot;&gt;std::money_put::put&lt;/a&gt;&lt;/code&gt;).</source>
          <target state="translated">该 &lt;code&gt;showbase&lt;/code&gt; 标志影响整数输出的行为（见 &lt;code&gt;&lt;a href=&quot;../../locale/num_put/put&quot;&gt;std::num_put::put&lt;/a&gt;&lt;/code&gt; ），货币输入（见 &lt;code&gt;&lt;a href=&quot;../../locale/money_get/get&quot;&gt;std::money_get::get&lt;/a&gt;&lt;/code&gt; ）和货币输出（见 &lt;code&gt;&lt;a href=&quot;../../locale/money_put/put&quot;&gt;std::money_put::put&lt;/a&gt;&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="3362f7e2786e23b0e207bf341b6ffbe082ce3138" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;size_type&lt;/code&gt; parameter type in these guides in an refers to the &lt;code&gt;size_type&lt;/code&gt; member type of the type deduced by the deduction guide.</source>
          <target state="translated">所述 &lt;code&gt;size_type&lt;/code&gt; 参数类型中在这些指南指 &lt;code&gt;size_type&lt;/code&gt; 构件类型由扣导向推导出的类型。</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
