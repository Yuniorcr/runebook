<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="zh-CN" datatype="htmlbody" original="cpp">
    <body>
      <group id="cpp">
        <trans-unit id="53a0a261ebfc0f1a7a7170e67bdddcdb68c6dea0" translate="yes" xml:space="preserve">
          <source>Past-the-end iterator for the new range of values (if this is not &lt;code&gt;end&lt;/code&gt;, then it points to an unspecified value, and so do iterators to any values between this iterator and &lt;code&gt;end&lt;/code&gt;).</source>
          <target state="translated">新值范围的最新迭代器（如果不是 &lt;code&gt;end&lt;/code&gt; ，则指向未指定的值，迭代器也指向此迭代器和 &lt;code&gt;end&lt;/code&gt; 之间的任何值）。</target>
        </trans-unit>
        <trans-unit id="209fb9ddb37807d60128b4f0a2c9c342ca9bef9b" translate="yes" xml:space="preserve">
          <source>Path equality and equivalence have different semantics.</source>
          <target state="translated">路径平等和等价有不同的语义。</target>
        </trans-unit>
        <trans-unit id="278d3d482f0154f969d1faa7956e1e7b204c6b2d" translate="yes" xml:space="preserve">
          <source>Path relative to the &lt;a href=&quot;root_path&quot;&gt;root path&lt;/a&gt;.</source>
          <target state="translated">相对于&lt;a href=&quot;root_path&quot;&gt;根路径的路径&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="71f0d391ca957b663b2fb89ac2b56a4d1147c830" translate="yes" xml:space="preserve">
          <source>Paths are implicitly convertible to and from &lt;code&gt;&lt;a href=&quot;../string/basic_string&quot;&gt;std::basic_string&lt;/a&gt;&lt;/code&gt;s, which makes it possible to use them with over files APIs, e.g. as an argument to &lt;code&gt;&lt;a href=&quot;../io/basic_ifstream/open&quot;&gt;std::ifstream::open&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">路径可隐式地与 &lt;code&gt;&lt;a href=&quot;../string/basic_string&quot;&gt;std::basic_string&lt;/a&gt;&lt;/code&gt; 转换，这使得可以将它们与over文件API一起使用，例如，作为 &lt;code&gt;&lt;a href=&quot;../io/basic_ifstream/open&quot;&gt;std::ifstream::open&lt;/a&gt;&lt;/code&gt; 的参数。</target>
        </trans-unit>
        <trans-unit id="d9f0ad8924eee8effc5bbce4372099bdeb2cbc64" translate="yes" xml:space="preserve">
          <source>Pending member function call</source>
          <target state="translated">待定的成员函数调用</target>
        </trans-unit>
        <trans-unit id="51cda9fe8367c873831b2031532f7adce59a1197" translate="yes" xml:space="preserve">
          <source>Performing a class member access that designates a non-static data member or a non-static member function on a glvalue that does not actually designate an object of the appropriate type - such as one obtained through a &lt;code&gt;reinterpret_cast&lt;/code&gt; - results in undefined behavior:</source>
          <target state="translated">在不能实际指定适当类型的对象（例如通过 &lt;code&gt;reinterpret_cast&lt;/code&gt; 获得的对象）的glvalue上执行指定非静态数据成员或非静态成员函数的类成员访问将导致未定义的行为：</target>
        </trans-unit>
        <trans-unit id="c1f063c0cd01d1aaabfb88b1af15e0d0b6e911c8" translate="yes" xml:space="preserve">
          <source>Performs add and subtract operations involving a &lt;code&gt;time_point&lt;/code&gt;.</source>
          <target state="translated">执行涉及 &lt;code&gt;time_point&lt;/code&gt; 的加法和减法操作。</target>
        </trans-unit>
        <trans-unit id="10d483c2205a4a757d085232bdad93f21f3b166f" translate="yes" xml:space="preserve">
          <source>Performs atomic addition. Atomically adds &lt;code&gt;arg&lt;/code&gt; to the value pointed to by &lt;code&gt;obj&lt;/code&gt; and returns the value &lt;code&gt;obj&lt;/code&gt; held previously. The operation is performed as if the following was executed:</source>
          <target state="translated">执行原子加法。以原子方式将 &lt;code&gt;arg&lt;/code&gt; 添加到 &lt;code&gt;obj&lt;/code&gt; 指向的值，并返回值 &lt;code&gt;obj&lt;/code&gt; 之前举行。就像执行以下操作一样执行该操作：</target>
        </trans-unit>
        <trans-unit id="30b1dae446c5b7593254ad6366e3cf470d031678" translate="yes" xml:space="preserve">
          <source>Performs atomic subtraction. Atomically subtracts &lt;code&gt;arg&lt;/code&gt; from the value pointed to by &lt;code&gt;obj&lt;/code&gt; and returns the value &lt;code&gt;obj&lt;/code&gt; held previously. The operation is performed as if the following was executed:</source>
          <target state="translated">执行原子减法。原子减去 &lt;code&gt;arg&lt;/code&gt; 从价值的指向 &lt;code&gt;obj&lt;/code&gt; 和返回值 &lt;code&gt;obj&lt;/code&gt; 之前举行。就像执行以下操作一样执行该操作：</target>
        </trans-unit>
        <trans-unit id="c52f7e90e59de80b9706a14d188069c7698f7d6b" translate="yes" xml:space="preserve">
          <source>Performs basic arithmetic operations between two durations or between a duration and a tick count.</source>
          <target state="translated">执行两个持续时间之间或持续时间与刻度线之间的基本算术运算。</target>
        </trans-unit>
        <trans-unit id="183d374bebe439e7db4be5cb95a45d69282a57dc" translate="yes" xml:space="preserve">
          <source>Performs binary AND, OR, XOR and NOT.</source>
          <target state="translated">执行二进制 AND、OR、XOR 和 NOT。</target>
        </trans-unit>
        <trans-unit id="e4f3500d257a3eb02de3f4efaee8bd335bde376c" translate="yes" xml:space="preserve">
          <source>Performs binary AND, OR, and XOR between two bitsets, &lt;code&gt;lhs&lt;/code&gt; and &lt;code&gt;rhs&lt;/code&gt;.</source>
          <target state="translated">在两个位集 &lt;code&gt;lhs&lt;/code&gt; 和 &lt;code&gt;rhs&lt;/code&gt; 之间执行二进制AND，OR和XOR 。</target>
        </trans-unit>
        <trans-unit id="7431f30f7f2b881484e6560e6c12827ac30edbb1" translate="yes" xml:space="preserve">
          <source>Performs binary shift left and binary shift right. Zeroes are shifted in.</source>
          <target state="translated">执行二进制左移和二进制右移。零点被移入。</target>
        </trans-unit>
        <trans-unit id="8916b3c66a5cb60067c0fd61d02517a0fb71dbe0" translate="yes" xml:space="preserve">
          <source>Performs comparison operations on &lt;code&gt;optional&lt;/code&gt; objects.</source>
          <target state="translated">对 &lt;code&gt;optional&lt;/code&gt; 对象执行比较操作。</target>
        </trans-unit>
        <trans-unit id="e1c4ee1e6775de840bbf5cc899c2d9dd79702fe7" translate="yes" xml:space="preserve">
          <source>Performs compile-time assertion checking.</source>
          <target state="translated">执行编译时断言检查。</target>
        </trans-unit>
        <trans-unit id="24de277139e866d975315e41db4e0959f0e8333e" translate="yes" xml:space="preserve">
          <source>Performs compound assignments between two durations with the same period or between a duration and a tick count value.</source>
          <target state="translated">在具有相同周期的两个持续时间之间或在一个持续时间和一个刻度值之间执行复合赋值。</target>
        </trans-unit>
        <trans-unit id="3363c88d9d999d25f7a5bb4ab9d7c71c3d168234" translate="yes" xml:space="preserve">
          <source>Performs correctly even if the copied character ranges overlap, i.e. &lt;code&gt;src&lt;/code&gt; is in [&lt;code&gt;dest&lt;/code&gt;, &lt;code&gt;dest + count&lt;/code&gt;).</source>
          <target state="translated">即使复制的字符范围重叠，即 &lt;code&gt;src&lt;/code&gt; 在[ &lt;code&gt;dest&lt;/code&gt; ， &lt;code&gt;dest + count&lt;/code&gt; ）中，也可以正确执行。</target>
        </trans-unit>
        <trans-unit id="e4ba5ff18809f625dffd211b201477809172431a" translate="yes" xml:space="preserve">
          <source>Performs multibyte to wide conversion, using the codecvt facet supplied at construction.</source>
          <target state="translated">使用构造时提供的codecvt面,执行多字节到宽的转换。</target>
        </trans-unit>
        <trans-unit id="74d714da572d85fb7e69a3edc8d391e566c083bd" translate="yes" xml:space="preserve">
          <source>Performs stream input and output operations on pseudo-random number distribution &lt;code&gt;d&lt;/code&gt;.</source>
          <target state="translated">对伪随机数分布 &lt;code&gt;d&lt;/code&gt; 执行流输入和输出操作。</target>
        </trans-unit>
        <trans-unit id="1145a97020306298786de6ec24b63e040c489199" translate="yes" xml:space="preserve">
          <source>Performs stream input or output on the path &lt;code&gt;p&lt;/code&gt;. &lt;code&gt;&lt;a href=&quot;../../io/manip/quoted&quot;&gt;std::quoted&lt;/a&gt;&lt;/code&gt; is used so that spaces do not cause truncation when later read by stream input operator.</source>
          <target state="translated">在路径 &lt;code&gt;p&lt;/code&gt; 上执行流输入或输出。 &lt;code&gt;&lt;a href=&quot;../../io/manip/quoted&quot;&gt;std::quoted&lt;/a&gt;&lt;/code&gt; 用于避免流输入运算符稍后读取时空格引起的截断。</target>
        </trans-unit>
        <trans-unit id="9b29cb631b9b97715e5de6f40a6f5200ff9f3e56" translate="yes" xml:space="preserve">
          <source>Performs stream output operation on error code &lt;code&gt;ec&lt;/code&gt;.</source>
          <target state="translated">对错误代码 &lt;code&gt;ec&lt;/code&gt; 执行流输出操作。</target>
        </trans-unit>
        <trans-unit id="40064c133ea9e590f48b22c9dd2c24a2261fb25e" translate="yes" xml:space="preserve">
          <source>Performs type-safe access to the contained object.</source>
          <target state="translated">执行对所包含对象的类型安全访问。</target>
        </trans-unit>
        <trans-unit id="4c066ce90c79eb22454994d74956cbecc73c7e86" translate="yes" xml:space="preserve">
          <source>Performs wide to multibyte conversion, using the &lt;code&gt;codecvt&lt;/code&gt; facet supplied at construction.</source>
          <target state="translated">使用构造时提供的 &lt;code&gt;codecvt&lt;/code&gt; 方面执行从宽到多字节的转换。</target>
        </trans-unit>
        <trans-unit id="d016004473e0e58d7682856755147e33256bb813" translate="yes" xml:space="preserve">
          <source>Permission denied</source>
          <target state="translated">拒绝批准</target>
        </trans-unit>
        <trans-unit id="ff9458c2e9f1b3bd919c8ba7cde8f2a7dd4b60f3" translate="yes" xml:space="preserve">
          <source>Permissions may not necessarily be implemented as bits, but they are treated that way conceptually.</source>
          <target state="translated">权限不一定是以位来实现的,但在概念上是这样处理的。</target>
        </trans-unit>
        <trans-unit id="a2f24d32c584ac1cc0ae3793f8787ed50c35e122" translate="yes" xml:space="preserve">
          <source>Permissions will be completely replaced by the argument to &lt;code&gt;permissions()&lt;/code&gt; (default behavior)</source>
          <target state="translated">权限将完全由 &lt;code&gt;permissions()&lt;/code&gt; 的参数替换（默认行为）</target>
        </trans-unit>
        <trans-unit id="2cf092a603c8bf7fae552d6e038782dc15099c62" translate="yes" xml:space="preserve">
          <source>Permutable</source>
          <target state="translated">Permutable</target>
        </trans-unit>
        <trans-unit id="d01f3bdcebf331d17384d9e5c22991b46b8a2544" translate="yes" xml:space="preserve">
          <source>Permutation operations</source>
          <target state="translated">替换运算</target>
        </trans-unit>
        <trans-unit id="8e086fa3837f92effda2f189c65d872aaf2923d5" translate="yes" xml:space="preserve">
          <source>Phase 1</source>
          <target state="translated">第一阶段</target>
        </trans-unit>
        <trans-unit id="330708acff87bb6907139071d5b459ded3e2d04a" translate="yes" xml:space="preserve">
          <source>Phase 2</source>
          <target state="translated">第二阶段</target>
        </trans-unit>
        <trans-unit id="681032fd51c92a246ce412b39048b4ee77dca634" translate="yes" xml:space="preserve">
          <source>Phase 3</source>
          <target state="translated">第三阶段</target>
        </trans-unit>
        <trans-unit id="78d44d36dd0ef3c8fc841ed57f6811ad23d3444a" translate="yes" xml:space="preserve">
          <source>Phase 4</source>
          <target state="translated">第四阶段</target>
        </trans-unit>
        <trans-unit id="53f56e33fd048af3ea5f5836a9ebc4271647e4f2" translate="yes" xml:space="preserve">
          <source>Phase 5</source>
          <target state="translated">第五阶段</target>
        </trans-unit>
        <trans-unit id="d95c8c6e048db1b43f633d810e6911867dafdf1a" translate="yes" xml:space="preserve">
          <source>Phase 6</source>
          <target state="translated">第六阶段</target>
        </trans-unit>
        <trans-unit id="35a6e111a7e2e8fab957c5ce32c74294af54929f" translate="yes" xml:space="preserve">
          <source>Phase 7</source>
          <target state="translated">第七阶段</target>
        </trans-unit>
        <trans-unit id="f992983641f78a8c013798273706bbac409bc020" translate="yes" xml:space="preserve">
          <source>Phase 8</source>
          <target state="translated">第八阶段</target>
        </trans-unit>
        <trans-unit id="156e180c3c9ca1d335879d8d7ee2a51f0db9cf21" translate="yes" xml:space="preserve">
          <source>Phase 9</source>
          <target state="translated">第九阶段</target>
        </trans-unit>
        <trans-unit id="8dec91782cf447c62f887433fae8bdce01c3fe91" translate="yes" xml:space="preserve">
          <source>Phases of translation</source>
          <target state="translated">翻译阶段</target>
        </trans-unit>
        <trans-unit id="07e464f5998fa85728fa5e1a1bb5e63f3853d71d" translate="yes" xml:space="preserve">
          <source>Placement new</source>
          <target state="translated">安置新职位</target>
        </trans-unit>
        <trans-unit id="60e6d239b2483569229a169894d525b0cecf1c39" translate="yes" xml:space="preserve">
          <source>Plot of binomial distribution with probability of success of each trial exactly 0.5, illustrating the relationship with the pascal triangle (the probabilities that none, 1, 2, 3, or all four of the 4 trials will be successful in this case are 1:4:6:4:1).</source>
          <target state="translated">二项式分布图,每次试验成功的概率恰好是0.5,说明与帕斯卡三角形的关系(在这种情况下,4次试验中没有一次、1次、2次、3次或全部4次试验成功的概率是1:4:6:4:1)。</target>
        </trans-unit>
        <trans-unit id="c1415dc522d7779649a6456c9f3b3c3feccd7270" translate="yes" xml:space="preserve">
          <source>Pm</source>
          <target state="translated">Pm</target>
        </trans-unit>
        <trans-unit id="be0813d9bb5496f0d5533fee53776e91237df8de" translate="yes" xml:space="preserve">
          <source>Point of declaration</source>
          <target state="translated">申报点</target>
        </trans-unit>
        <trans-unit id="bc5de071a8adc9ea913c6f9e5f0005a2d40cc14d" translate="yes" xml:space="preserve">
          <source>Pointer</source>
          <target state="translated">Pointer</target>
        </trans-unit>
        <trans-unit id="401cef63156459953ba9ecc39b378d92a1c4df85" translate="yes" xml:space="preserve">
          <source>Pointer categories</source>
          <target state="translated">指针类别</target>
        </trans-unit>
        <trans-unit id="e949a9338620645eea4d2a45d6573a07fea1a3c1" translate="yes" xml:space="preserve">
          <source>Pointer comparison operators</source>
          <target state="translated">指针比较运算符</target>
        </trans-unit>
        <trans-unit id="1dad7ddcfc4dd1845430d750452929c090145667" translate="yes" xml:space="preserve">
          <source>Pointer conversions</source>
          <target state="translated">指针转换</target>
        </trans-unit>
        <trans-unit id="220f1fd327711e96e3028b6709d46b742350f010" translate="yes" xml:space="preserve">
          <source>Pointer declaration</source>
          <target state="translated">指针声明</target>
        </trans-unit>
        <trans-unit id="507370d4d891ec50b13734e460fa7676dd112d1c" translate="yes" xml:space="preserve">
          <source>Pointer or reference to the contained value.</source>
          <target state="translated">指向包含值的指针或引用。</target>
        </trans-unit>
        <trans-unit id="502927a57f75427d5d0348f3db625a5715c26063" translate="yes" xml:space="preserve">
          <source>Pointer to &lt;code&gt;arg&lt;/code&gt;.</source>
          <target state="translated">指向 &lt;code&gt;arg&lt;/code&gt; 的指针。</target>
        </trans-unit>
        <trans-unit id="c1efdcae629601a80fc4240acbeecbc12f77bb6f" translate="yes" xml:space="preserve">
          <source>Pointer to IMPLementation</source>
          <target state="translated">指向执行的指针</target>
        </trans-unit>
        <trans-unit id="106def4670ec0827470f489e115609f14aba4d97" translate="yes" xml:space="preserve">
          <source>Pointer to a narrow null-terminated string identifying the C locale after applying the changes, if any, or null pointer on failure.</source>
          <target state="translated">指向一个窄的空端字符串的指针,该字符串在应用更改后标识了C语言环境(如果有的话),或者在失败时指向空指针。</target>
        </trans-unit>
        <trans-unit id="7e051b01b4a3b676d8d937ba8eeb414966a415c5" translate="yes" xml:space="preserve">
          <source>Pointer to a null-terminated byte string corresponding to the &lt;code&gt;&lt;a href=&quot;../../error/errno&quot;&gt;errno&lt;/a&gt;&lt;/code&gt; error code &lt;code&gt;errnum&lt;/code&gt;.</source>
          <target state="translated">指向与 &lt;code&gt;&lt;a href=&quot;../../error/errno&quot;&gt;errno&lt;/a&gt;&lt;/code&gt; 错误代码 &lt;code&gt;errnum&lt;/code&gt; 对应的以空终止的字节字符串的指针。</target>
        </trans-unit>
        <trans-unit id="9e79c93dcbbccb192a990f531993ec6357402c9d" translate="yes" xml:space="preserve">
          <source>Pointer to a null-terminated string with explanatory information.</source>
          <target state="translated">指向包含解释信息的空端字符串的指针。</target>
        </trans-unit>
        <trans-unit id="05eeb6466674025812c06718c64857711547c9fd" translate="yes" xml:space="preserve">
          <source>Pointer to a null-terminated string with explanatory information. The pointer is guaranteed to be valid at least until the exception object from which it is obtained is destroyed, or until a non-const member function on the exception object is called.</source>
          <target state="translated">指针指向一个带有解释信息的空端字符串。至少在获取该指针的异常对象被销毁之前,或者在异常对象上的非const成员函数被调用之前,保证该指针有效。</target>
        </trans-unit>
        <trans-unit id="df62f1ab5417a7f0ff9ed3e2f220fb5e603072d1" translate="yes" xml:space="preserve">
          <source>Pointer to a static internal &lt;code&gt;&lt;a href=&quot;tm&quot;&gt;std::tm&lt;/a&gt;&lt;/code&gt; object on success, or null pointer otherwise. The structure may be shared between &lt;code&gt;std::gmtime&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;localtime&quot;&gt;std::localtime&lt;/a&gt;&lt;/code&gt;, and &lt;code&gt;&lt;a href=&quot;ctime&quot;&gt;std::ctime&lt;/a&gt;&lt;/code&gt; and may be overwritten on each invocation.</source>
          <target state="translated">成功时指向静态内部 &lt;code&gt;&lt;a href=&quot;tm&quot;&gt;std::tm&lt;/a&gt;&lt;/code&gt; 对象的指针，否则返回null指针。该结构可以在 &lt;code&gt;std::gmtime&lt;/code&gt; ， &lt;code&gt;&lt;a href=&quot;localtime&quot;&gt;std::localtime&lt;/a&gt;&lt;/code&gt; 和 &lt;code&gt;&lt;a href=&quot;ctime&quot;&gt;std::ctime&lt;/a&gt;&lt;/code&gt; 之间共享，并且可能在每次调用时被覆盖。</target>
        </trans-unit>
        <trans-unit id="741241b75fe5a199c0ab0dd397fe61cdd3f55460" translate="yes" xml:space="preserve">
          <source>Pointer to a static null-terminated character string holding the textual representation of date and time. The string may be shared between &lt;code&gt;std::asctime&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;ctime&quot;&gt;std::ctime&lt;/a&gt;&lt;/code&gt;, and may be overwritten on each invocation of any of those functions.</source>
          <target state="translated">指向以空值结尾的静态字符串的指针，该字符串包含日期和时间的文本表示形式。该字符串可以在 &lt;code&gt;std::asctime&lt;/code&gt; 和 &lt;code&gt;&lt;a href=&quot;ctime&quot;&gt;std::ctime&lt;/a&gt;&lt;/code&gt; 之间共享，并且在任何这些函数的每次调用时都可能被覆盖。</target>
        </trans-unit>
        <trans-unit id="2a7b4726f6fc99f23b9e14868b5b1c846eaaf3b6" translate="yes" xml:space="preserve">
          <source>Pointer to a static null-terminated character string holding the textual representation of date and time. The string may be shared between &lt;code&gt;std::asctime&lt;/code&gt; and &lt;code&gt;std::ctime&lt;/code&gt;, and may be overwritten on each invocation of any of those functions.</source>
          <target state="translated">指向以空值结尾的静态字符串的指针，该字符串包含日期和时间的文本表示形式。该字符串可以在 &lt;code&gt;std::asctime&lt;/code&gt; 和 &lt;code&gt;std::ctime&lt;/code&gt; 之间共享，并且在任何这些函数的每次调用时都可能被覆盖。</target>
        </trans-unit>
        <trans-unit id="17f25ceb95e972356eab5499d3f8f0ef814efd37" translate="yes" xml:space="preserve">
          <source>Pointer to data member of an accessible unambiguous non-virtual base class can be &lt;a href=&quot;implicit_cast&quot;&gt;implicitly converted&lt;/a&gt; to pointer to the same data member of a derived class:</source>
          <target state="translated">指向可访问的明确非虚拟基类的数据成员的指针可以&lt;a href=&quot;implicit_cast&quot;&gt;隐式转换&lt;/a&gt;为指向派生类的相同数据成员的指针：</target>
        </trans-unit>
        <trans-unit id="ae030652318897b4b4780b15cd8c3cb1c33c2ea6" translate="yes" xml:space="preserve">
          <source>Pointer to member function of a base class can be &lt;a href=&quot;implicit_cast&quot;&gt;implicitly converted&lt;/a&gt; to pointer to the same member function of a derived class:</source>
          <target state="translated">指向基类成员函数的指针可以&lt;a href=&quot;implicit_cast&quot;&gt;隐式转换&lt;/a&gt;为指向派生类相同成员函数的指针：</target>
        </trans-unit>
        <trans-unit id="7d771ea67f2c2f9e746f144dec854fc3e63934c8" translate="yes" xml:space="preserve">
          <source>Pointer to object of any type can be &lt;a href=&quot;implicit_cast&quot;&gt;implicitly converted&lt;/a&gt; to pointer to &lt;code&gt;void&lt;/code&gt; (optionally &lt;a href=&quot;cv&quot;&gt;cv-qualified&lt;/a&gt;); the pointer value is unchanged. The reverse conversion, which requires &lt;a href=&quot;static_cast&quot;&gt;static_cast&lt;/a&gt; or &lt;a href=&quot;explicit_cast&quot;&gt;explicit cast&lt;/a&gt;, yields the original pointer value:</source>
          <target state="translated">指向任何类型对象的指针都可以&lt;a href=&quot;implicit_cast&quot;&gt;隐式转换&lt;/a&gt;为 &lt;code&gt;void&lt;/code&gt; 的指针（可选&lt;a href=&quot;cv&quot;&gt;cv-qualified&lt;/a&gt;）；指针值不变。反向转换需要&lt;a href=&quot;static_cast&quot;&gt;static_cast&lt;/a&gt;或&lt;a href=&quot;explicit_cast&quot;&gt;显式&lt;/a&gt;强制转换，产生原始指针值：</target>
        </trans-unit>
        <trans-unit id="2ea44b54c22457c3498224bce9d6c3df4e5f7f8e" translate="yes" xml:space="preserve">
          <source>Pointer to the associated &lt;code&gt;std::strsteambuf&lt;/code&gt;, with constness cast away.</source>
          <target state="translated">指向关联的 &lt;code&gt;std::strsteambuf&lt;/code&gt; 指针，并丢弃了constness。</target>
        </trans-unit>
        <trans-unit id="8d72222d72010255cb609e9d2a6a19d72b7a6fd1" translate="yes" xml:space="preserve">
          <source>Pointer to the associated mutex or &lt;code&gt;&lt;a href=&quot;../../types/null&quot;&gt;NULL&lt;/a&gt;&lt;/code&gt; if there was no associated mutex.</source>
          <target state="translated">指向关联的互斥锁的指针；如果没有关联的互斥锁，则指向 &lt;code&gt;&lt;a href=&quot;../../types/null&quot;&gt;NULL&lt;/a&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="1fd0d9c2fb1a501a4d096e7e7c81a3fa102fb353" translate="yes" xml:space="preserve">
          <source>Pointer to the associated mutex or a null pointer if there is no associated mutex.</source>
          <target state="translated">指向关联的mutex的指针,如果没有关联的mutex,则为空指针。</target>
        </trans-unit>
        <trans-unit id="bb739690cf069bb92d8977a1b39e0650fd730f57" translate="yes" xml:space="preserve">
          <source>Pointer to the beginning of the buffer in the associated &lt;code&gt;std::strsteambuf&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;../../types/null&quot;&gt;NULL&lt;/a&gt;&lt;/code&gt; if no buffer is available.</source>
          <target state="translated">指针到缓冲区中的相关年初 &lt;code&gt;std::strsteambuf&lt;/code&gt; 或 &lt;code&gt;&lt;a href=&quot;../../types/null&quot;&gt;NULL&lt;/a&gt;&lt;/code&gt; 如果没有缓冲区可用。</target>
        </trans-unit>
        <trans-unit id="d3c9d2b8760066cd06193590fdb96c90b14ef460" translate="yes" xml:space="preserve">
          <source>Pointer to the beginning of the next token or &lt;code&gt;&lt;a href=&quot;../../types/null&quot;&gt;NULL&lt;/a&gt;&lt;/code&gt; if there are no more tokens.</source>
          <target state="translated">指向下一个标记的开头的指针；如果没有更多的标记，则指向 &lt;code&gt;&lt;a href=&quot;../../types/null&quot;&gt;NULL&lt;/a&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="bff190117aa548f41e1c46c1d9a87485d2bb232b" translate="yes" xml:space="preserve">
          <source>Pointer to the beginning of the next token or null pointer if there are no more tokens.</source>
          <target state="translated">指向下一个标记的开始的指针,如果没有更多的标记,则为空指针。</target>
        </trans-unit>
        <trans-unit id="b5c9f035f457196c057c82d7390795936f5d502d" translate="yes" xml:space="preserve">
          <source>Pointer to the current &lt;code&gt;&lt;a href=&quot;lconv&quot;&gt;std::lconv&lt;/a&gt;&lt;/code&gt; object.</source>
          <target state="translated">指向当前 &lt;code&gt;&lt;a href=&quot;lconv&quot;&gt;std::lconv&lt;/a&gt;&lt;/code&gt; 对象的指针。</target>
        </trans-unit>
        <trans-unit id="e104cb5d7009c23ea923d1d221d79faf2d495206" translate="yes" xml:space="preserve">
          <source>Pointer to the first byte of a memory block suitably aligned and sufficient to hold an array of &lt;code&gt;n&lt;/code&gt; objects of type &lt;code&gt;T&lt;/code&gt;.</source>
          <target state="translated">指向适当对齐并足以容纳 &lt;code&gt;T&lt;/code&gt; 类型的 &lt;code&gt;n&lt;/code&gt; 个对象的数组的存储块的第一个字节的指针。</target>
        </trans-unit>
        <trans-unit id="ac77b36fb18de28499e5f8deffcf36f34c5eaf4b" translate="yes" xml:space="preserve">
          <source>Pointer to the first character in &lt;code&gt;[beg, end)&lt;/code&gt; that does not satisfy the mask, or &lt;code&gt;end&lt;/code&gt; if no such character was found.</source>
          <target state="translated">指向 &lt;code&gt;[beg, end)&lt;/code&gt; 中不满足掩码的第一个字符，如果没有找到该字符则指向 &lt;code&gt;end&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="9dae36e2355fa38c1c60579edf9133cfbb61b1b8" translate="yes" xml:space="preserve">
          <source>Pointer to the first character in &lt;code&gt;[beg, end)&lt;/code&gt; that doesn't satisfy the mask, or &lt;code&gt;end&lt;/code&gt; if no such character was found.</source>
          <target state="translated">指向 &lt;code&gt;[beg, end)&lt;/code&gt; 中不满足掩码的第一个字符，如果没有找到该字符则指向 &lt;code&gt;end&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="7f45940b623df5f14b6f86f6ea0be9eb450298c1" translate="yes" xml:space="preserve">
          <source>Pointer to the first character in &lt;code&gt;[beg, end)&lt;/code&gt; that satisfies the mask, or &lt;code&gt;end&lt;/code&gt; if no such character was found.</source>
          <target state="translated">指向 &lt;code&gt;[beg, end)&lt;/code&gt; 中满足掩码的第一个字符，如果没有找到该字符则指向 &lt;code&gt;end&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="cc73e3cdae64ac7123b31602d1b60bce60462fac" translate="yes" xml:space="preserve">
          <source>Pointer to the first character in &lt;code&gt;dest&lt;/code&gt;, that is also in &lt;code&gt;breakset&lt;/code&gt;, or null pointer if no such character exists.</source>
          <target state="translated">指向 &lt;code&gt;dest&lt;/code&gt; 中第一个字符的指针，也就是 &lt;code&gt;breakset&lt;/code&gt; 中的指针；如果不存在这样的字符，则为 null指针。</target>
        </trans-unit>
        <trans-unit id="6ebaf2a6a20f7b6c7586e0484fcb32649bd4a5f5" translate="yes" xml:space="preserve">
          <source>Pointer to the first character in &lt;code&gt;dest&lt;/code&gt;, that is also in &lt;code&gt;str&lt;/code&gt;, or &lt;code&gt;&lt;a href=&quot;../../types/null&quot;&gt;NULL&lt;/a&gt;&lt;/code&gt; if no such character exists.</source>
          <target state="translated">指针在第一字符 &lt;code&gt;dest&lt;/code&gt; ，这也是在 &lt;code&gt;str&lt;/code&gt; ，或 &lt;code&gt;&lt;a href=&quot;../../types/null&quot;&gt;NULL&lt;/a&gt;&lt;/code&gt; 如果没有这样的字符存在。</target>
        </trans-unit>
        <trans-unit id="8fe9e35434f828d3a11ae11da261d3e71214675f" translate="yes" xml:space="preserve">
          <source>Pointer to the first character of the found substring in &lt;code&gt;dest&lt;/code&gt;, or &lt;code&gt;&lt;a href=&quot;../../types/null&quot;&gt;NULL&lt;/a&gt;&lt;/code&gt; if no such substring is found. If &lt;code&gt;src&lt;/code&gt; points to an empty string, &lt;code&gt;dest&lt;/code&gt; is returned.</source>
          <target state="translated">指针的第一个字符发现子串 &lt;code&gt;dest&lt;/code&gt; 中，或 &lt;code&gt;&lt;a href=&quot;../../types/null&quot;&gt;NULL&lt;/a&gt;&lt;/code&gt; 如果没有这样的字符串中找到。如果 &lt;code&gt;src&lt;/code&gt; 指向空字符串，则返回 &lt;code&gt;dest&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="21046068df7df1393a0867547b1fe1121d3fa933" translate="yes" xml:space="preserve">
          <source>Pointer to the first character of the found substring in &lt;code&gt;str&lt;/code&gt;, or &lt;code&gt;&lt;a href=&quot;../../types/null&quot;&gt;NULL&lt;/a&gt;&lt;/code&gt; if no such character is found. If &lt;code&gt;target&lt;/code&gt; points to an empty string, &lt;code&gt;str&lt;/code&gt; is returned.</source>
          <target state="translated">指针的第一个字符发现子串 &lt;code&gt;str&lt;/code&gt; ，或 &lt;code&gt;&lt;a href=&quot;../../types/null&quot;&gt;NULL&lt;/a&gt;&lt;/code&gt; 如果没有这样的字符被发现。如果 &lt;code&gt;target&lt;/code&gt; 指向空字符串，则返回 &lt;code&gt;str&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="2d213221626fcc9a52e9468236f49e1462f46457" translate="yes" xml:space="preserve">
          <source>Pointer to the first element of an array of &lt;code&gt;argc + 1&lt;/code&gt; pointers, of which the last one is null and the previous ones, if any, point to &lt;a href=&quot;../string/multibyte&quot;&gt;null-terminated multibyte strings&lt;/a&gt; that represent the arguments passed to the program from the execution environment. If &lt;code&gt;argv[0]&lt;/code&gt; is not a null pointer (or, equivalently, if &lt;code&gt;argc&lt;/code&gt; &amp;gt; 0), it points to a string that represents the name used to invoke the program, or to an empty string.</source>
          <target state="translated">指向 &lt;code&gt;argc + 1&lt;/code&gt; 指针数组的第一个元素的指针，其中最后一个为null，而前一个（如果有的话）指向以&lt;a href=&quot;../string/multibyte&quot;&gt;空字符结尾的多字节字符串&lt;/a&gt;，这些字符串表示从执行环境传递给程序的参数。如果 &lt;code&gt;argv[0]&lt;/code&gt; 不是空指针（或者等效地，如果 &lt;code&gt;argc&lt;/code&gt; &amp;gt; 0），则指向表示用来调用程序的名称的字符串或空字符串。</target>
        </trans-unit>
        <trans-unit id="405e5d4054459c9f481d32fb4025569549fc54c2" translate="yes" xml:space="preserve">
          <source>Pointer to the found character in &lt;code&gt;str&lt;/code&gt;, or &lt;code&gt;&lt;a href=&quot;../../types/null&quot;&gt;NULL&lt;/a&gt;&lt;/code&gt; if no such character is found.</source>
          <target state="translated">指向 &lt;code&gt;str&lt;/code&gt; 中找到的字符的指针，如果找不到这样的字符，则为 &lt;code&gt;&lt;a href=&quot;../../types/null&quot;&gt;NULL&lt;/a&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="8636ad44b682f9d39f8b49ddb2c33563cc416821" translate="yes" xml:space="preserve">
          <source>Pointer to the found character in &lt;code&gt;str&lt;/code&gt;, or a null pointer if no such character is found.</source>
          <target state="translated">指向 &lt;code&gt;str&lt;/code&gt; 中找到的字符的指针，如果未找到该字符，则返回null指针。</target>
        </trans-unit>
        <trans-unit id="8c4f765e2320d24e28834fd57258bdf60d616f3d" translate="yes" xml:space="preserve">
          <source>Pointer to the found character in &lt;code&gt;str&lt;/code&gt;, or null pointer if no such character is found.</source>
          <target state="translated">指向 &lt;code&gt;str&lt;/code&gt; 中找到的字符的指针，如果找不到这样的字符，则返回null指针。</target>
        </trans-unit>
        <trans-unit id="9eb2d90a2241298d211bf11c5eba0e1de683f4a8" translate="yes" xml:space="preserve">
          <source>Pointer to the found element or null pointer if the element has not been found.</source>
          <target state="translated">找到元素的指针,如果没有找到元素,则为空指针。</target>
        </trans-unit>
        <trans-unit id="b1e8c4f8ecb8e493cc67d3b4ab6c8ee17ceb8a9d" translate="yes" xml:space="preserve">
          <source>Pointer to the location of the character, or &lt;code&gt;&lt;a href=&quot;../../types/null&quot;&gt;NULL&lt;/a&gt;&lt;/code&gt; if no such character is found.</source>
          <target state="translated">指向字符位置的指针；如果找不到此类字符，则为 &lt;code&gt;&lt;a href=&quot;../../types/null&quot;&gt;NULL&lt;/a&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="21825601c681d15ea8978fbec39c4ef272eee665" translate="yes" xml:space="preserve">
          <source>Pointer to the location of the wide character, or a null pointer if no such character is found.</source>
          <target state="translated">指向宽字符位置的指针,如果没有找到宽字符,则为空指针。</target>
        </trans-unit>
        <trans-unit id="0f2d455ab9fda4d538794a886137505c44c33676" translate="yes" xml:space="preserve">
          <source>Pointer to the managed object or &lt;code&gt;nullptr&lt;/code&gt; if no object is owned.</source>
          <target state="translated">指向托管对象的指针；如果没有任何对象，则指向 &lt;code&gt;nullptr&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="0e417a6cc34557591c16fa3e0b6f964f03e642eb" translate="yes" xml:space="preserve">
          <source>Pointer to the managed object or &lt;code&gt;nullptr&lt;/code&gt; if there was no managed object, i.e. the value which would be returned by &lt;code&gt;&lt;a href=&quot;get&quot;&gt;get()&lt;/a&gt;&lt;/code&gt; before the call.</source>
          <target state="translated">指向托管对象的指针；如果没有托管对象，则指向 &lt;code&gt;nullptr&lt;/code&gt; ，即调用之前 &lt;code&gt;&lt;a href=&quot;get&quot;&gt;get()&lt;/a&gt;&lt;/code&gt; 返回的值。</target>
        </trans-unit>
        <trans-unit id="3d669cee12e866ccbdc5f883c29bb6d1ae60a22d" translate="yes" xml:space="preserve">
          <source>Pointer to the newly-created object of type &lt;code&gt;T&lt;/code&gt;.</source>
          <target state="translated">指向类型 &lt;code&gt;T&lt;/code&gt; 的新创建对象的指针。</target>
        </trans-unit>
        <trans-unit id="1007a66b7ed24271d8dae695470699ebb3d90623" translate="yes" xml:space="preserve">
          <source>Pointer to the underlying character storage.</source>
          <target state="translated">指向底层字符存储的指针。</target>
        </trans-unit>
        <trans-unit id="bb998ae306d857b07235d60d52ea2604f7849467" translate="yes" xml:space="preserve">
          <source>Pointer to the underlying element storage. For non-empty containers, the returned pointer compares equal to the address of the first element.</source>
          <target state="translated">指向底层元素存储的指针。对于非空容器,返回的指针比较等于第一个元素的地址。</target>
        </trans-unit>
        <trans-unit id="43b7ef925b00e3b3c5b65aa2f44518ac04b67235" translate="yes" xml:space="preserve">
          <source>Pointer to the underlying raw file device.</source>
          <target state="translated">指向底层原始文件设备的指针。</target>
        </trans-unit>
        <trans-unit id="6288fb6475a348852c9329d26259a5d291d0784a" translate="yes" xml:space="preserve">
          <source>Pointer to the underlying raw string device.</source>
          <target state="translated">指向底层原始字符串设备的指针。</target>
        </trans-unit>
        <trans-unit id="9b4fc7eea0b85cedd66733caf9832ba1e1ccb12f" translate="yes" xml:space="preserve">
          <source>Pointer to the value stored in the pointed-to variant or null pointer on error.</source>
          <target state="translated">指向存储在point-to变体中的值的指针,或者错误时为空指针。</target>
        </trans-unit>
        <trans-unit id="f6a38e0ced31a70dd505d085d69e083b8e83b46a" translate="yes" xml:space="preserve">
          <source>Pointer traits</source>
          <target state="translated">指针特征</target>
        </trans-unit>
        <trans-unit id="d959136208a22120a2769984e2738fb200d3839c" translate="yes" xml:space="preserve">
          <source>Pointer-to-member</source>
          <target state="translated">Pointer-to-member</target>
        </trans-unit>
        <trans-unit id="6b201b2e51331914c7c6d9d0a9f7efd62f7338a7" translate="yes" xml:space="preserve">
          <source>Pointer-to-member conversions</source>
          <target state="translated">指针到成员的转换</target>
        </trans-unit>
        <trans-unit id="c5b722fc5ad9faac57dfe90f51b7e6e51ad5a968" translate="yes" xml:space="preserve">
          <source>Pointers</source>
          <target state="translated">Pointers</target>
        </trans-unit>
        <trans-unit id="8e0102ec9f49bbfbd11df50c78b20aed752d493f" translate="yes" xml:space="preserve">
          <source>Pointers and references to an abstract class can be declared.</source>
          <target state="translated">可以声明指向抽象类的指针和引用。</target>
        </trans-unit>
        <trans-unit id="b747222dad01bb7496378552c66f09a51682d7ce" translate="yes" xml:space="preserve">
          <source>Pointers may appear as operands to the built-in indirection operator (unary &lt;code&gt;operator*&lt;/code&gt;), which returns the &lt;a href=&quot;value_category&quot;&gt;lvalue expression&lt;/a&gt; identifying the pointed-to object:</source>
          <target state="translated">指针可能显示为内置间接操作符（一元 &lt;code&gt;operator*&lt;/code&gt; ）的操作数，该操作符返回标识所指向对象的&lt;a href=&quot;value_category&quot;&gt;左值表达式&lt;/a&gt;：</target>
        </trans-unit>
        <trans-unit id="7324a9c3bb73a069fd86296c2d3c8eff5bf1e09e" translate="yes" xml:space="preserve">
          <source>Pointers of every type have a special value known as</source>
          <target state="translated">每个类型的指针都有一个特殊的值,称为</target>
        </trans-unit>
        <trans-unit id="eadf97520961ba4bce4e3272957d3d88b76ad695" translate="yes" xml:space="preserve">
          <source>Pointers returned by allocation functions such as &lt;code&gt;&lt;a href=&quot;../memory/c/malloc&quot;&gt;std::malloc&lt;/a&gt;&lt;/code&gt; are suitably aligned for any object, which means they are aligned at least as strictly as &lt;code&gt;std::max_align_t&lt;/code&gt;.</source>
          <target state="translated">由分配函数（例如 &lt;code&gt;&lt;a href=&quot;../memory/c/malloc&quot;&gt;std::malloc&lt;/a&gt;&lt;/code&gt; 返回的指针适用于任何对象，这意味着它们的对齐至少与 &lt;code&gt;std::max_align_t&lt;/code&gt; 严格一样。</target>
        </trans-unit>
        <trans-unit id="89ce73c84ed030f8becc3c2f0d29d4123b20c1f9" translate="yes" xml:space="preserve">
          <source>Pointers to arrays of unknown bound cannot participate in &lt;a href=&quot;operator_arithmetic#Additive_operators&quot;&gt;pointer arithmetic&lt;/a&gt; and cannot be used on the left of the &lt;a href=&quot;operator_member_access#Built-in_subscript_operator&quot;&gt;subscript operator&lt;/a&gt;, but can be dereferenced. Pointers and references to arrays of unknown bound cannot be used in &lt;a href=&quot;function#Parameter_list&quot;&gt;function parameters&lt;/a&gt;(until C++14).</source>
          <target state="translated">指向未知边界数组的指针不能参与&lt;a href=&quot;operator_arithmetic#Additive_operators&quot;&gt;指针算术&lt;/a&gt;，并且不能在下&lt;a href=&quot;operator_member_access#Built-in_subscript_operator&quot;&gt;标运算符&lt;/a&gt;的左侧使用，但可以取消引用。在&lt;a href=&quot;function#Parameter_list&quot;&gt;函数参数中&lt;/a&gt;不能使用指向未知边界数组的指针和引用（直到C ++ 14）。</target>
        </trans-unit>
        <trans-unit id="8997b3a58418ca35d08322acca258398b3551d8f" translate="yes" xml:space="preserve">
          <source>Pointers to class objects may also appear as the left-hand operands of the member access operators &lt;a href=&quot;operator_member_access#Built-in_member_access_operators&quot;&gt;operator-&amp;gt;&lt;/a&gt; and &lt;a href=&quot;operator_member_access#Built-in_pointer-to-member_access_operators&quot;&gt;operator-&amp;gt;*&lt;/a&gt;.</source>
          <target state="translated">指向类对象的指针也可能显示为成员访问运算&lt;a href=&quot;operator_member_access#Built-in_member_access_operators&quot;&gt;符operator-&amp;gt;&lt;/a&gt;和&lt;a href=&quot;operator_member_access#Built-in_pointer-to-member_access_operators&quot;&gt;operator-&amp;gt; *&lt;/a&gt;的左侧操作数。</target>
        </trans-unit>
        <trans-unit id="b9610e9c523b3b30a4feffab978ca5f56b5bd2f7" translate="yes" xml:space="preserve">
          <source>Pointers to data members</source>
          <target state="translated">数据成员的指针</target>
        </trans-unit>
        <trans-unit id="b82bc7e72d8d51c0188462e092d842450c228f3d" translate="yes" xml:space="preserve">
          <source>Pointers to functions</source>
          <target state="translated">指向函数的指针</target>
        </trans-unit>
        <trans-unit id="cd9440e65c03eec8586c193595d8efd5d1435bc4" translate="yes" xml:space="preserve">
          <source>Pointers to functions and pointers to member functions are not subject to &lt;code&gt;const_cast&lt;/code&gt;.</source>
          <target state="translated">函数指针和成员函数指针不受 &lt;code&gt;const_cast&lt;/code&gt; 的约束。</target>
        </trans-unit>
        <trans-unit id="f1c198366ed3f18c43f829eacc744c35cb919409" translate="yes" xml:space="preserve">
          <source>Pointers to member functions</source>
          <target state="translated">成员函数的指针</target>
        </trans-unit>
        <trans-unit id="7f14911c46acdfa1438c9db71d7719c27603ad66" translate="yes" xml:space="preserve">
          <source>Pointers to member functions may be used as callbacks or as function objects, often after applying &lt;code&gt;&lt;a href=&quot;../utility/functional/mem_fn&quot;&gt;std::mem_fn&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;../utility/functional/bind&quot;&gt;std::bind&lt;/a&gt;&lt;/code&gt;:</source>
          <target state="translated">指向成员函数的指针通常在应用 &lt;code&gt;&lt;a href=&quot;../utility/functional/mem_fn&quot;&gt;std::mem_fn&lt;/a&gt;&lt;/code&gt; 或 &lt;code&gt;&lt;a href=&quot;../utility/functional/bind&quot;&gt;std::bind&lt;/a&gt;&lt;/code&gt; 之后可用作回调或函数对象：</target>
        </trans-unit>
        <trans-unit id="883144f9b49fc07a095e4294d84c214853439c3a" translate="yes" xml:space="preserve">
          <source>Pointers to members</source>
          <target state="translated">指向成员</target>
        </trans-unit>
        <trans-unit id="8c422669e276a985567791cf3a6c9c3667be56c4" translate="yes" xml:space="preserve">
          <source>Pointers to non-throwing functions are &lt;a href=&quot;implicit_cast#Function_pointer_conversions&quot;&gt;implicitly convertible&lt;/a&gt;(since C++17)can be assigned(until C++17) to pointers to potentially-throwing functions, but not the other way around.</source>
          <target state="translated">非抛出函数的指针是&lt;a href=&quot;implicit_cast#Function_pointer_conversions&quot;&gt;隐式可转换的&lt;/a&gt;（因为C ++ 17起），可以将其分配给（直到C ++ 17）指向潜在抛出函数的指针，但不能相反。</target>
        </trans-unit>
        <trans-unit id="00b7228167bc78f725c1aa6170713523c3e87add" translate="yes" xml:space="preserve">
          <source>Pointers to objects</source>
          <target state="translated">对象的指针</target>
        </trans-unit>
        <trans-unit id="ef8f0afc3f73a99fbae90bff8831647b6c3782f4" translate="yes" xml:space="preserve">
          <source>Pointers to storage without an object that were cast to possibly cv-qualified &lt;code&gt;void*&lt;/code&gt; can only be &lt;a href=&quot;static_cast&quot;&gt;&lt;code&gt;static_cast&lt;/code&gt;&lt;/a&gt; to pointers to possibly cv-qualified &lt;code&gt;char&lt;/code&gt;, possibly cv-qualified &lt;code&gt;unsigned char&lt;/code&gt;, or possibly cv-qualified &lt;a href=&quot;../types/byte&quot;&gt;&lt;code&gt;std::byte&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">不带对象的存储的指针被&lt;a href=&quot;static_cast&quot;&gt; &lt;code&gt;static_cast&lt;/code&gt; &lt;/a&gt;为cv限定的 &lt;code&gt;void*&lt;/code&gt; 只能是static_cast指向可能具有cv限定的 &lt;code&gt;char&lt;/code&gt; ，可能具有cv限定的 &lt;code&gt;unsigned char&lt;/code&gt; 或具有cv限定的&lt;a href=&quot;../types/byte&quot;&gt; &lt;code&gt;std::byte&lt;/code&gt; &lt;/a&gt;指针。</target>
        </trans-unit>
        <trans-unit id="b2fba1862b8c837cec195a93f7f91b200ee05d3d" translate="yes" xml:space="preserve">
          <source>Pointers to transaction-safe functions and pointers to transaction-safe member functions are implicitly convertible to pointers to functions and pointers to member functions respectively. It is unspecified if the resulting pointer compares equal to the original.</source>
          <target state="translated">事务安全函数的指针和事务安全成员函数的指针分别隐式地转换为函数的指针和成员函数的指针。如果产生的指针与原来的指针比较相等,则没有说明。</target>
        </trans-unit>
        <trans-unit id="ee25cfd40679ceda92c701097a34e138aa84fe43" translate="yes" xml:space="preserve">
          <source>Pointers to void</source>
          <target state="translated">指针指向无效</target>
        </trans-unit>
        <trans-unit id="6073ce8abb343010670eb5f6310d7d502bbeac8c" translate="yes" xml:space="preserve">
          <source>Pointers to void are used to pass objects of unknown type, which is common in C interfaces: &lt;code&gt;&lt;a href=&quot;../memory/c/malloc&quot;&gt;std::malloc&lt;/a&gt;&lt;/code&gt; returns &lt;code&gt;void*&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;../algorithm/qsort&quot;&gt;std::qsort&lt;/a&gt;&lt;/code&gt; expects a user-provided callback that accepts two &lt;code&gt;const void*&lt;/code&gt; arguments. &lt;a href=&quot;http://pubs.opengroup.org/onlinepubs/9699919799/functions/pthread_create.html&quot;&gt;pthread_create&lt;/a&gt; expects a user-provided callback that accepts and returns &lt;code&gt;void*&lt;/code&gt;. In all cases, it is the caller's responsibility to cast the pointer to the correct type before use.</source>
          <target state="translated">指向void的指针用于传递未知类型的对象，这在C接口中很常见： &lt;code&gt;&lt;a href=&quot;../memory/c/malloc&quot;&gt;std::malloc&lt;/a&gt;&lt;/code&gt; 返回 &lt;code&gt;void*&lt;/code&gt; ， &lt;code&gt;&lt;a href=&quot;../algorithm/qsort&quot;&gt;std::qsort&lt;/a&gt;&lt;/code&gt; 期望用户提供一个接受两个 &lt;code&gt;const void*&lt;/code&gt; 参数的回调。&lt;a href=&quot;http://pubs.opengroup.org/onlinepubs/9699919799/functions/pthread_create.html&quot;&gt;pthread_create&lt;/a&gt;需要一个用户提供的回调，该回调接受并返回 &lt;code&gt;void*&lt;/code&gt; 。在所有情况下，调用者都有责任在使用前将指针强制转换为正确的类型。</target>
        </trans-unit>
        <trans-unit id="ffd084b46468279617f54e4624fea677c3547184" translate="yes" xml:space="preserve">
          <source>Pointers to void are used to pass objects of unknown type, which is common in C interfaces: &lt;code&gt;&lt;a href=&quot;../memory/c/malloc&quot;&gt;std::malloc&lt;/a&gt;&lt;/code&gt; returns &lt;code&gt;void*&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;../algorithm/qsort&quot;&gt;std::qsort&lt;/a&gt;&lt;/code&gt; expects a user-provided callback that accepts two &lt;code&gt;const void*&lt;/code&gt; arguments. &lt;a href=&quot;https://pubs.opengroup.org/onlinepubs/9699919799/functions/pthread_create.html&quot;&gt;pthread_create&lt;/a&gt; expects a user-provided callback that accepts and returns &lt;code&gt;void*&lt;/code&gt;. In all cases, it is the caller's responsibility to cast the pointer to the correct type before use.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d354f7564de295656ca72e55dc6f7cffeb82a2db" translate="yes" xml:space="preserve">
          <source>Poisson distributions</source>
          <target state="translated">鱼类分布情况</target>
        </trans-unit>
        <trans-unit id="f1f8e7db6309cddc0c5732e9a9ba58aaec05d533" translate="yes" xml:space="preserve">
          <source>Pole error</source>
          <target state="translated">极点误差</target>
        </trans-unit>
        <trans-unit id="b0d042fd98c607a113e1de0917255c86503669b3" translate="yes" xml:space="preserve">
          <source>Pole error may occur if &lt;code&gt;arg&lt;/code&gt; is -1.</source>
          <target state="translated">如果 &lt;code&gt;arg&lt;/code&gt; 为-1，则可能会发生极点错误。</target>
        </trans-unit>
        <trans-unit id="b17e2690e7349805c990c7c5df9303f661668615" translate="yes" xml:space="preserve">
          <source>Pole error may occur if &lt;code&gt;arg&lt;/code&gt; is zero.</source>
          <target state="translated">如果 &lt;code&gt;arg&lt;/code&gt; 为零，则可能会发生极点错误。</target>
        </trans-unit>
        <trans-unit id="122adbd5a657cad5a4eda6aa2024033436d6f138" translate="yes" xml:space="preserve">
          <source>Polymorphic allocators and memory resources</source>
          <target state="translated">多态分配器和内存资源</target>
        </trans-unit>
        <trans-unit id="a410bf5a1cec8abcb9037eb08c4da9a189234456" translate="yes" xml:space="preserve">
          <source>Polymorphic objects</source>
          <target state="translated">多态对象</target>
        </trans-unit>
        <trans-unit id="0507350e1ff0be2d293357a2de17b15f12a2e1a9" translate="yes" xml:space="preserve">
          <source>Populates and returns an object of type &lt;a href=&quot;space_info&quot;&gt;space_info&lt;/a&gt;, set from the members of the POSIX &lt;code&gt;struct statvfs&lt;/code&gt; as follows.</source>
          <target state="translated">填充并返回一个&lt;a href=&quot;space_info&quot;&gt;space_info&lt;/a&gt;类型的对象，该对象是从POSIX &lt;code&gt;struct statvfs&lt;/code&gt; 的成员中设置的，如下所示。</target>
        </trans-unit>
        <trans-unit id="e1e9e23d9c9279a97defda521d3d276a672ebcc3" translate="yes" xml:space="preserve">
          <source>Position of the first character not equal to any of the characters in the given string, or &lt;code&gt;&lt;a href=&quot;npos&quot;&gt;npos&lt;/a&gt;&lt;/code&gt; if no such character is found.</source>
          <target state="translated">第一个字符的位置不等于给定字符串中的任何字符；如果找不到这样的字符， &lt;code&gt;&lt;a href=&quot;npos&quot;&gt;npos&lt;/a&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="f8b3946c1066221ab59f803f680ae44b71d07b3c" translate="yes" xml:space="preserve">
          <source>Position of the first character of the found substring or &lt;code&gt;&lt;a href=&quot;npos&quot;&gt;npos&lt;/a&gt;&lt;/code&gt; if no such substring is found.</source>
          <target state="translated">找到的子字符串或 &lt;code&gt;&lt;a href=&quot;npos&quot;&gt;npos&lt;/a&gt;&lt;/code&gt; 的第一个字符的位置（如果未找到这样的子字符串）。</target>
        </trans-unit>
        <trans-unit id="2e9234e1e1ae2d680755936cbf92bb210b08eac5" translate="yes" xml:space="preserve">
          <source>Position of the first character of the found substring or &lt;code&gt;&lt;a href=&quot;npos&quot;&gt;npos&lt;/a&gt;&lt;/code&gt; if no such substring is found. Note that this is an offset from the start of the string, not the end.</source>
          <target state="translated">找到的子字符串或 &lt;code&gt;&lt;a href=&quot;npos&quot;&gt;npos&lt;/a&gt;&lt;/code&gt; 的第一个字符的位置（如果未找到这样的子字符串）。请注意，这是从字符串开头而不是结尾开始的偏移量。</target>
        </trans-unit>
        <trans-unit id="82926c5ed89ca7ef042104a3dd17caf0de0bf0c9" translate="yes" xml:space="preserve">
          <source>Position of the first character of the found substring, or &lt;code&gt;&lt;a href=&quot;npos&quot;&gt;npos&lt;/a&gt;&lt;/code&gt; if no such substring is found.</source>
          <target state="translated">找到的子字符串的第一个字符的位置；如果找不到这样的子字符串， &lt;code&gt;&lt;a href=&quot;npos&quot;&gt;npos&lt;/a&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="58c2e322e5856c0cb8077b012578950a1a05d1a0" translate="yes" xml:space="preserve">
          <source>Position of the first occurrence of any character of the substring, or &lt;code&gt;&lt;a href=&quot;npos&quot;&gt;npos&lt;/a&gt;&lt;/code&gt; if no such character is found.</source>
          <target state="translated">子字符串的任何字符首次出现的位置；如果未找到该字符， &lt;code&gt;&lt;a href=&quot;npos&quot;&gt;npos&lt;/a&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="f89f214ac11a3751b70ccb18260b1080b9592c31" translate="yes" xml:space="preserve">
          <source>Position of the found character or &lt;code&gt;&lt;a href=&quot;npos&quot;&gt;npos&lt;/a&gt;&lt;/code&gt; if no such character is found.</source>
          <target state="translated">找到的字符或 &lt;code&gt;&lt;a href=&quot;npos&quot;&gt;npos&lt;/a&gt;&lt;/code&gt; 的位置（如果找不到这样的字符）。</target>
        </trans-unit>
        <trans-unit id="c04e15937d1a51aa382dd521ed1eb52b92a5c774" translate="yes" xml:space="preserve">
          <source>Position of the last character not equal to any of the characters in the given string, or &lt;code&gt;&lt;a href=&quot;npos&quot;&gt;npos&lt;/a&gt;&lt;/code&gt; if no such character is found.</source>
          <target state="translated">最后一个字符的位置不等于给定字符串中的任何字符；如果找不到这样的字符， &lt;code&gt;&lt;a href=&quot;npos&quot;&gt;npos&lt;/a&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="cbb7430040ceecb3978fef4dd073148ef77466ad" translate="yes" xml:space="preserve">
          <source>Position of the last occurrence of any character of the substring, or &lt;code&gt;&lt;a href=&quot;npos&quot;&gt;npos&lt;/a&gt;&lt;/code&gt; if no such character is found.</source>
          <target state="translated">子字符串的任何字符的最后一次出现的位置；如果未找到该字符， &lt;code&gt;&lt;a href=&quot;npos&quot;&gt;npos&lt;/a&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="86ba514122e17b32a635c456e65393d5e7dd0078" translate="yes" xml:space="preserve">
          <source>Positioning</source>
          <target state="translated">Positioning</target>
        </trans-unit>
        <trans-unit id="da9ebb96d6456e6e0214a89210dd04cd1b71df2c" translate="yes" xml:space="preserve">
          <source>Positive value if &lt;code&gt;lhs&lt;/code&gt; appears after &lt;code&gt;rhs&lt;/code&gt; in lexicographical order.</source>
          <target state="translated">如果 &lt;code&gt;lhs&lt;/code&gt; 按字典顺序在 &lt;code&gt;rhs&lt;/code&gt; 之后出现，则为正值。</target>
        </trans-unit>
        <trans-unit id="714e8e0d9935902a6887a396fa6d2f712afabcf0" translate="yes" xml:space="preserve">
          <source>Positive value if &lt;code&gt;lhs&lt;/code&gt; is</source>
          <target state="translated">如果 &lt;code&gt;lhs&lt;/code&gt; 为正值</target>
        </trans-unit>
        <trans-unit id="f07de6b6e7f7f4c9848913bcbea3c04d282f1f3e" translate="yes" xml:space="preserve">
          <source>Positive value if &lt;code&gt;s1&lt;/code&gt; is</source>
          <target state="translated">如果 &lt;code&gt;s1&lt;/code&gt; 为正值</target>
        </trans-unit>
        <trans-unit id="c8da30a556cc6a558610c8a6fdf30e74fd738d9f" translate="yes" xml:space="preserve">
          <source>Positive value if the first differing byte in &lt;code&gt;lhs&lt;/code&gt; is greater than the corresponding byte in &lt;code&gt;rhs&lt;/code&gt;.</source>
          <target state="translated">如果 &lt;code&gt;lhs&lt;/code&gt; 中的第一个不同字节大于 &lt;code&gt;rhs&lt;/code&gt; 中的相应字节，则为正值。</target>
        </trans-unit>
        <trans-unit id="2c5624e422d114bf4c07e574d33c43264c084cff" translate="yes" xml:space="preserve">
          <source>Positive value if the value of the first differing wide character in &lt;code&gt;lhs&lt;/code&gt; is greater than the value of the corresponding wide character in &lt;code&gt;rhs&lt;/code&gt;: &lt;code&gt;rhs&lt;/code&gt; precedes &lt;code&gt;lhs&lt;/code&gt; in lexicographical order.</source>
          <target state="translated">如果第一个不同的宽字符的值（以 &lt;code&gt;lhs&lt;/code&gt; 为单位）大于相应的宽字符的值（以 &lt;code&gt;rhs&lt;/code&gt; 为单位），则为正值： &lt;code&gt;rhs&lt;/code&gt; 以字典顺序在 &lt;code&gt;lhs&lt;/code&gt; 之前。</target>
        </trans-unit>
        <trans-unit id="22699cd695b19df35f40c030da01dbad38091e8e" translate="yes" xml:space="preserve">
          <source>Possible Implementation</source>
          <target state="translated">可能的实施</target>
        </trans-unit>
        <trans-unit id="00d014f6e89348741eecc9997521bd010438349e" translate="yes" xml:space="preserve">
          <source>Possible implementation</source>
          <target state="translated">可能的实施</target>
        </trans-unit>
        <trans-unit id="a78bac5dbecd72e3a2b6b9a7c6387b18bbb07e9b" translate="yes" xml:space="preserve">
          <source>Possible implementation of &lt;code&gt;mbstate_t&lt;/code&gt; is a struct type holding an array representing the incomplete multibyte character, an integer counter indicating the number of bytes in the array that have been processed, and a representation of the current shift state.</source>
          <target state="translated">&lt;code&gt;mbstate_t&lt;/code&gt; 的可能实现是一种结构类型，该结构类型包含一个表示不完整的多字节字符的数组，一个整数计数器，表示该数组中已处理的字节数以及当前移位状态的表示。</target>
        </trans-unit>
        <trans-unit id="fef4f19dbc69bc7fa8ed2879ac59a6eb92531a56" translate="yes" xml:space="preserve">
          <source>Possible output:</source>
          <target state="translated">可能的产出:</target>
        </trans-unit>
        <trans-unit id="e68bf1ee5fb7ebaa2c60990e3a4313fdbc43ee4a" translate="yes" xml:space="preserve">
          <source>Possibly const value of type &lt;code&gt;X&lt;/code&gt;</source>
          <target state="translated">类型 &lt;code&gt;X&lt;/code&gt; 的常量值</target>
        </trans-unit>
        <trans-unit id="c78f87bc6e30cc3d7c639f338588006b1df69867" translate="yes" xml:space="preserve">
          <source>Possibly const value of type &lt;code&gt;X&lt;/code&gt; when type &lt;code&gt;X::key_compare::is_transparent&lt;/code&gt; exists</source>
          <target state="translated">当 &lt;code&gt;X::key_compare::is_transparent&lt;/code&gt; 存在时，可能是 &lt;code&gt;X&lt;/code&gt; 类型的const值</target>
        </trans-unit>
        <trans-unit id="b801bf3c3f479a3d017aa24607f9e949752972a8" translate="yes" xml:space="preserve">
          <source>Post-conditions</source>
          <target state="translated">Post-conditions</target>
        </trans-unit>
        <trans-unit id="dba3afaa7e3ccf2691afef5136eb2331ecad912a" translate="yes" xml:space="preserve">
          <source>Post-increment</source>
          <target state="translated">Post-increment</target>
        </trans-unit>
        <trans-unit id="4a33ada7833e60337527816ecffe126bac77ffb5" translate="yes" xml:space="preserve">
          <source>Post: C().empty() == true</source>
          <target state="translated">岗位。C().empty()==true</target>
        </trans-unit>
        <trans-unit id="935988d8aabd70e6e17594844fbe4dfb47a845f1" translate="yes" xml:space="preserve">
          <source>Post: a == C(a)</source>
          <target state="translated">职位:a ==C(a)</target>
        </trans-unit>
        <trans-unit id="569bc86b2a2f98fe054699b3b0aa05f0876ef81b" translate="yes" xml:space="preserve">
          <source>Post: a == b</source>
          <target state="translated">员额:a ==b</target>
        </trans-unit>
        <trans-unit id="aa536d0211c0fef5dc061c78a2b2f8be7b6e0bb9" translate="yes" xml:space="preserve">
          <source>Postcondition:</source>
          <target state="translated">Postcondition:</target>
        </trans-unit>
        <trans-unit id="d8634e6f132ac80533665408e1979d7cf23e4b92" translate="yes" xml:space="preserve">
          <source>Postcondition: &lt;code&gt;d.param() == p&lt;/code&gt;</source>
          <target state="translated">后置条件： &lt;code&gt;d.param() == p&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="82ecf35c1a8706936b0e8617bb976a01dca6b88c" translate="yes" xml:space="preserve">
          <source>Postconditions</source>
          <target state="translated">Postconditions</target>
        </trans-unit>
        <trans-unit id="779a08778b546cc01e4f490dfca4c982a8f25744" translate="yes" xml:space="preserve">
          <source>Postconditions:</source>
          <target state="translated">Postconditions:</target>
        </trans-unit>
        <trans-unit id="25766a5bae056013827d0b4d2af70bb06346b62d" translate="yes" xml:space="preserve">
          <source>Potential exceptions</source>
          <target state="translated">潜在的例外情况</target>
        </trans-unit>
        <trans-unit id="3b3a2228beca8f49314c3fcd02a2b8475fe33e8f" translate="yes" xml:space="preserve">
          <source>Power functions</source>
          <target state="translated">电源功能</target>
        </trans-unit>
        <trans-unit id="290521a86bdefe7230bf95eab0f7dc26f5f47447" translate="yes" xml:space="preserve">
          <source>Pragma directive controls implementation-specific behavior of the compiler, such as disabling compiler warnings or changing alignment requirements. Any pragma that is not recognized is ignored.</source>
          <target state="translated">Pragma指令控制编译器的特定实现行为,例如禁用编译器警告或改变对齐要求。任何不被识别的pragma都会被忽略。</target>
        </trans-unit>
        <trans-unit id="db110193cf4704a68ac76522997460ef9d33fd6e" translate="yes" xml:space="preserve">
          <source>Pre-2011 C++ followed the C model, but restored the name &quot;rvalue&quot; to non-lvalue expressions, made functions into lvalues, and added the rule that references can bind to lvalues, but only references to const can bind to rvalues. Several non-lvalue C expressions became lvalue expressions in C++.</source>
          <target state="translated">2011年以前的C++沿用了C模型,但对非lvalue表达式恢复了 &quot;rvalue &quot;这个名称,把函数变成了lvalue,并增加了引用可以绑定到lvalue,但只有引用const可以绑定到rvalue的规则。一些非lvalue的C表达式在C++中变成了lvalue表达式。</target>
        </trans-unit>
        <trans-unit id="60b1ae7a18fa0640d04646f99fe80ba3f35e9a17" translate="yes" xml:space="preserve">
          <source>Pre-condition</source>
          <target state="translated">Pre-condition</target>
        </trans-unit>
        <trans-unit id="2622d6b55c869bdb8a6059863ab2859b84b011cc" translate="yes" xml:space="preserve">
          <source>Pre-increment</source>
          <target state="translated">Pre-increment</target>
        </trans-unit>
        <trans-unit id="5ad216c7802dab8280c48dbc52be49edac86980e" translate="yes" xml:space="preserve">
          <source>Pre: T must be &lt;a href=&quot;copyinsertable&quot;&gt;CopyInsertable&lt;/a&gt;</source>
          <target state="translated">前提：T必须是&lt;a href=&quot;copyinsertable&quot;&gt;CopyInsertable&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="3c3a86736b899c9affc0e179e88236d9561581cc" translate="yes" xml:space="preserve">
          <source>Pre: T must be &lt;a href=&quot;equalitycomparable&quot;&gt;EqualityComparable&lt;/a&gt;</source>
          <target state="translated">上一篇：T必须是&lt;a href=&quot;equalitycomparable&quot;&gt;EqualityComparable的&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="ab86fb82a986460447b29bbb55ca5b9bf867bad6" translate="yes" xml:space="preserve">
          <source>Precedence</source>
          <target state="translated">Precedence</target>
        </trans-unit>
        <trans-unit id="d328b896ce45a273d4761ff13c59c36bf6405865" translate="yes" xml:space="preserve">
          <source>Precedence and associativity are compile-time concepts and are independent from &lt;a href=&quot;eval_order&quot;&gt;order of evaluation&lt;/a&gt;, which is a runtime concept.</source>
          <target state="translated">优先级和关联性是编译时概念，并且与运行时概念&lt;a href=&quot;eval_order&quot;&gt;评估的顺序&lt;/a&gt;无关。</target>
        </trans-unit>
        <trans-unit id="3dd4db5ce7ea626f59e720f0c27096a22aa1ecd0" translate="yes" xml:space="preserve">
          <source>Precision</source>
          <target state="translated">Precision</target>
        </trans-unit>
        <trans-unit id="646ad9740d80073615a87f1e15d4c39112839036" translate="yes" xml:space="preserve">
          <source>Precondition</source>
          <target state="translated">Precondition</target>
        </trans-unit>
        <trans-unit id="2999ac3ba2bc477f3afc51730a9b2e061a97bc1d" translate="yes" xml:space="preserve">
          <source>Precondition:</source>
          <target state="translated">Precondition:</target>
        </trans-unit>
        <trans-unit id="3e9e6889bb8f4623acbbcf4674f69009bc88434a" translate="yes" xml:space="preserve">
          <source>Preconditions and postconditions are collectively called</source>
          <target state="translated">先决条件和后决条件统称为</target>
        </trans-unit>
        <trans-unit id="e42ec15ba1c3ad18c4c1f8ca973ef75f0142de9d" translate="yes" xml:space="preserve">
          <source>Preconditions:</source>
          <target state="translated">Preconditions:</target>
        </trans-unit>
        <trans-unit id="755d0fb58f888971d45aecc98562855a286dff7f" translate="yes" xml:space="preserve">
          <source>Predefined execution policies for parallel versions of the algorithms</source>
          <target state="translated">为算法的并行版本预定义的执行策略。</target>
        </trans-unit>
        <trans-unit id="a736be4bbfebe3160daae16f87e30915c41e06a7" translate="yes" xml:space="preserve">
          <source>Predefined generators</source>
          <target state="translated">预定义发电机</target>
        </trans-unit>
        <trans-unit id="75f2e4344f7133573ec1e2a5657aee298b86d10a" translate="yes" xml:space="preserve">
          <source>Predefined macros</source>
          <target state="translated">预定义宏</target>
        </trans-unit>
        <trans-unit id="f4ff31c92f7dca4f72432a1af9a6a5ec6c5ee5cd" translate="yes" xml:space="preserve">
          <source>Predefined random number generators</source>
          <target state="translated">预定义随机数生成器</target>
        </trans-unit>
        <trans-unit id="71c35a62f0da8b066fc3ea68b8cfbbf75618b8a1" translate="yes" xml:space="preserve">
          <source>Predefined standard stream objects</source>
          <target state="translated">预定义的标准流对象</target>
        </trans-unit>
        <trans-unit id="9eee28bfd739e1debf4d3b892d013537ae16da9f" translate="yes" xml:space="preserve">
          <source>Predicate</source>
          <target state="translated">Predicate</target>
        </trans-unit>
        <trans-unit id="0e6000a83320dfd08fff8ba58509740e164f29c7" translate="yes" xml:space="preserve">
          <source>Predicate is typically used with algorithms that take input data (individual objects/containers) and a predicate, which is then called on input data to decide on further course of action. Some examples of predicate usage in C++ standard library are:</source>
          <target state="translated">谓词通常与算法一起使用,这些算法接收输入数据(单个对象/容器)和一个谓词,然后对输入数据进行调用,以决定进一步的行动方案。在C++标准库中,使用谓词的一些例子有:1:</target>
        </trans-unit>
        <trans-unit id="af25fa09ce46d49eb67a92a80d4337b94a9a6590" translate="yes" xml:space="preserve">
          <source>Prefix &lt;a href=&quot;operator_incdec&quot;&gt;increment and decrement&lt;/a&gt;</source>
          <target state="translated">前缀&lt;a href=&quot;operator_incdec&quot;&gt;递增和递减&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="ff075ee89070b678c3e79c8363a0e3d8017577b2" translate="yes" xml:space="preserve">
          <source>Prefix versions of the built-in operators return</source>
          <target state="translated">内置操作符return的前缀版本</target>
        </trans-unit>
        <trans-unit id="9d4c68c11d780fd882c671bb15dfc340f69aa42f" translate="yes" xml:space="preserve">
          <source>Prepares the argument list needed to create an object of the given type &lt;code&gt;T&lt;/code&gt; by means of &lt;a href=&quot;uses_allocator&quot;&gt;uses-allocator construction&lt;/a&gt;.</source>
          <target state="translated">通过&lt;a href=&quot;uses_allocator&quot;&gt;uses-allocator构造&lt;/a&gt;准备创建给定类型 &lt;code&gt;T&lt;/code&gt; 的对象所需的参数列表。</target>
        </trans-unit>
        <trans-unit id="1f41a0dbe8592683435fed7c29a92966b72fd7cc" translate="yes" xml:space="preserve">
          <source>Prepares the stream for formatted input.</source>
          <target state="translated">准备格式化输入的流。</target>
        </trans-unit>
        <trans-unit id="45f7938dc8567dca15b76d644c0796c47b249b99" translate="yes" xml:space="preserve">
          <source>Prepares the stream for formatted output.</source>
          <target state="translated">准备好格式化输出的流。</target>
        </trans-unit>
        <trans-unit id="b13364fb5d6feff1c8f34a1dea2e791d8059905e" translate="yes" xml:space="preserve">
          <source>Prepends a &lt;code&gt;T&lt;/code&gt; constructed with &lt;code&gt;&lt;a href=&quot;../utility/forward&quot;&gt;std::forward&lt;/a&gt;&amp;lt;Args&amp;gt;(args)...&lt;/code&gt;</source>
          <target state="translated">准备一个用 &lt;code&gt;&lt;a href=&quot;../utility/forward&quot;&gt;std::forward&lt;/a&gt;&amp;lt;Args&amp;gt;(args)...&lt;/code&gt; &amp;lt;Args&amp;gt;（args）构造的 &lt;code&gt;T&lt;/code&gt; ...</target>
        </trans-unit>
        <trans-unit id="9cd4d22db2184099b75c1ae40fce939fd4a812e0" translate="yes" xml:space="preserve">
          <source>Prepends a copy of &lt;code&gt;rv&lt;/code&gt;, possibly using move semantics</source>
          <target state="translated">准备 &lt;code&gt;rv&lt;/code&gt; 的副本，可能使用move语义</target>
        </trans-unit>
        <trans-unit id="c6e30d4f1210f70fc516a028bc8c46c51657b500" translate="yes" xml:space="preserve">
          <source>Prepends a copy of &lt;code&gt;t&lt;/code&gt;</source>
          <target state="translated">附上 &lt;code&gt;t&lt;/code&gt; 的副本</target>
        </trans-unit>
        <trans-unit id="7fa9308afb9ddf840546b871e028077e01bf66cb" translate="yes" xml:space="preserve">
          <source>Prepends the given element &lt;code&gt;value&lt;/code&gt; to the beginning of the container.</source>
          <target state="translated">将给定的元素 &lt;code&gt;value&lt;/code&gt; 添加到容器的开头。</target>
        </trans-unit>
        <trans-unit id="690b8706d3e1f79bde61f6dc644048c260a4aafe" translate="yes" xml:space="preserve">
          <source>Preprocessor</source>
          <target state="translated">Preprocessor</target>
        </trans-unit>
        <trans-unit id="74419c3d7a94db8c36eddeafd3e7fa4e7dab34a1" translate="yes" xml:space="preserve">
          <source>Preprocessor macros</source>
          <target state="translated">前处理程序宏</target>
        </trans-unit>
        <trans-unit id="2cadb737a3c128ae8bea9f580dfb32f139a93360" translate="yes" xml:space="preserve">
          <source>Previous owner died</source>
          <target state="translated">前主人去世</target>
        </trans-unit>
        <trans-unit id="4f4bbb5e0cb36ae9eddced10ea643518cae66105" translate="yes" xml:space="preserve">
          <source>Previous signal handler on success or &lt;code&gt;&lt;a href=&quot;sig_err&quot;&gt;SIG_ERR&lt;/a&gt;&lt;/code&gt; on failure (setting a signal handler can be disabled on some implementations).</source>
          <target state="translated">成功时使用先前的信号处理程序，失败时使用 &lt;code&gt;&lt;a href=&quot;sig_err&quot;&gt;SIG_ERR&lt;/a&gt;&lt;/code&gt; （在某些实现中可以禁用设置信号处理程序）。</target>
        </trans-unit>
        <trans-unit id="a9a96ec019494d5b8b041c1d2468061ae66e35d5" translate="yes" xml:space="preserve">
          <source>Primary</source>
          <target state="translated">Primary</target>
        </trans-unit>
        <trans-unit id="b81c3b2406a040705cea018bdc1408c0675f3ad3" translate="yes" xml:space="preserve">
          <source>Primary categories</source>
          <target state="translated">主要类别</target>
        </trans-unit>
        <trans-unit id="610cd0ab8c3ab5b15fdfa49aabc7a8429ee0623d" translate="yes" xml:space="preserve">
          <source>Primary expressions</source>
          <target state="translated">主要表现形式</target>
        </trans-unit>
        <trans-unit id="a2d83338b8e29ac2309be82d56e0443145d5a534" translate="yes" xml:space="preserve">
          <source>Primary expressions are any of the following:</source>
          <target state="translated">主要表现形式有以下几种:</target>
        </trans-unit>
        <trans-unit id="28dda6eaafce0f04d7da7ca7af888f4098747176" translate="yes" xml:space="preserve">
          <source>Primary template</source>
          <target state="translated">主要模板</target>
        </trans-unit>
        <trans-unit id="e5b8721b54492cfe7442ac77139b87555d01cc17" translate="yes" xml:space="preserve">
          <source>Primary type categories</source>
          <target state="translated">主要类型类别</target>
        </trans-unit>
        <trans-unit id="ffafa88c6f976297b9421ad4171675a387b485a2" translate="yes" xml:space="preserve">
          <source>Primitives</source>
          <target state="translated">Primitives</target>
        </trans-unit>
        <trans-unit id="fdcb0c29e349affc468fbe04893dfb1a8788329e" translate="yes" xml:space="preserve">
          <source>Prints a textual description of the error code currently stored in the system variable &lt;code&gt;&lt;a href=&quot;../../error/errno&quot;&gt;errno&lt;/a&gt;&lt;/code&gt; to &lt;code&gt;&lt;a href=&quot;../c&quot;&gt;stderr&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">将当前存储在系统变量 &lt;code&gt;&lt;a href=&quot;../../error/errno&quot;&gt;errno&lt;/a&gt;&lt;/code&gt; 中的错误代码的文本描述 &lt;code&gt;&lt;a href=&quot;../c&quot;&gt;stderr&lt;/a&gt;&lt;/code&gt; 到stderr。</target>
        </trans-unit>
        <trans-unit id="85efb3ad9f12618fd579b4e182cb87fc553de0b4" translate="yes" xml:space="preserve">
          <source>Prior &lt;code&gt;&lt;a href=&quot;unlock&quot;&gt;unlock()&lt;/a&gt;&lt;/code&gt; operation on the same mutex</source>
          <target state="translated">先前在同一互斥 &lt;code&gt;&lt;a href=&quot;unlock&quot;&gt;unlock()&lt;/a&gt;&lt;/code&gt; 操作</target>
        </trans-unit>
        <trans-unit id="2557b80b9ddaa2e3af5806757ac28361ae5dd7b1" translate="yes" xml:space="preserve">
          <source>Prior &lt;code&gt;&lt;a href=&quot;unlock&quot;&gt;unlock()&lt;/a&gt;&lt;/code&gt; operations on the same mutex</source>
          <target state="translated">先前在同一互斥 &lt;code&gt;&lt;a href=&quot;unlock&quot;&gt;unlock()&lt;/a&gt;&lt;/code&gt; 操作</target>
        </trans-unit>
        <trans-unit id="f3ad407a801bcab6d08ae9af05f29dbf44f0d236" translate="yes" xml:space="preserve">
          <source>Prior &lt;code&gt;m.unlock()&lt;/code&gt; operations on the same mutex</source>
          <target state="translated">同一互斥 &lt;code&gt;m.unlock()&lt;/code&gt; 先前m.unlock（）操作</target>
        </trans-unit>
        <trans-unit id="586aa094d23c73e66fdb393424cab4c5ec13250e" translate="yes" xml:space="preserve">
          <source>Prior to C++03 (which introduced &lt;a href=&quot;value_initialization&quot;&gt;value initialization&lt;/a&gt;), the expression &lt;code&gt;new T()&lt;/code&gt; as well as a member initializer naming a base or a member with the initializer in the form of an empty pair of parentheses was classified as default initialization, but specified &lt;a href=&quot;zero_initialization&quot;&gt;zero initialization&lt;/a&gt; for non-class types.</source>
          <target state="translated">在C ++ 03（引入了&lt;a href=&quot;value_initialization&quot;&gt;值初始化&lt;/a&gt;）之前，表达式 &lt;code&gt;new T()&lt;/code&gt; 以及以空括号对的形式命名基址或成员的成员初始化器被归类为默认初始化，但是为非类类型指定&lt;a href=&quot;zero_initialization&quot;&gt;零初始化&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="36495fdb7c9bc047248d980fb3033ad613c29035" translate="yes" xml:space="preserve">
          <source>Prior to C++20, including &lt;a href=&quot;ciso646&quot;&gt;&lt;code&gt;&amp;lt;ciso646&amp;gt;&lt;/code&gt;&lt;/a&gt; is sometimes used for this purpose.</source>
          <target state="translated">在C ++ 20之前，包括&lt;a href=&quot;ciso646&quot;&gt; &lt;code&gt;&amp;lt;ciso646&amp;gt;&lt;/code&gt; &lt;/a&gt;有时用于此目的。</target>
        </trans-unit>
        <trans-unit id="b96bc2fa1287c534fdaf29b60bc90d9ede6166c6" translate="yes" xml:space="preserve">
          <source>Prior to C++20, including &lt;code&gt;&amp;lt;ciso646&amp;gt;&lt;/code&gt; was sometimes used as a technique for obtaining definitions of implementation-specific library version macros without causing other effects. As of C++20, the header &lt;a href=&quot;version&quot;&gt;&lt;code&gt;&amp;lt;version&amp;gt;&lt;/code&gt;&lt;/a&gt; was added for this purpose.</source>
          <target state="translated">在C ++ 20之前，有时使用 &lt;code&gt;&amp;lt;ciso646&amp;gt;&lt;/code&gt; 作为获取特定于实现的库版本宏的定义的技术，而不会引起其他影响。从C ++ 20开始，为此添加了标题&lt;a href=&quot;version&quot;&gt; &lt;code&gt;&amp;lt;version&amp;gt;&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="0bb7f5c22220620a4cbb93872f53caa4b0bb3f9f" translate="yes" xml:space="preserve">
          <source>Prior to C++20, the C++ Standard allowed any signed integer representation, and the minimum guaranteed range of N-bit signed integers was from -(2N-1</source>
          <target state="translated">在C++20之前,C++标准允许任何有符号的整数表示,N位有符号整数的最小保证范围是从-(2N-1)</target>
        </trans-unit>
        <trans-unit id="ce6528b08da9027e71f0461910097a8416ed03ba" translate="yes" xml:space="preserve">
          <source>Prior to calling &lt;code&gt;va_arg&lt;/code&gt;, &lt;code&gt;ap&lt;/code&gt; must be initialized by a call to either &lt;code&gt;&lt;a href=&quot;va_start&quot;&gt;va_start&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;va_copy&quot;&gt;va_copy&lt;/a&gt;&lt;/code&gt;, with no intervening call to &lt;code&gt;&lt;a href=&quot;va_end&quot;&gt;va_end&lt;/a&gt;&lt;/code&gt;. Each invocation of the &lt;code&gt;va_arg&lt;/code&gt; macro modifies &lt;code&gt;ap&lt;/code&gt; to point to the next variable argument.</source>
          <target state="translated">在调用 &lt;code&gt;va_arg&lt;/code&gt; 之前，必须通过调用 &lt;code&gt;&lt;a href=&quot;va_start&quot;&gt;va_start&lt;/a&gt;&lt;/code&gt; 或 &lt;code&gt;&lt;a href=&quot;va_copy&quot;&gt;va_copy&lt;/a&gt;&lt;/code&gt; 来初始化 &lt;code&gt;ap&lt;/code&gt; ，而不能干预 &lt;code&gt;&lt;a href=&quot;va_end&quot;&gt;va_end&lt;/a&gt;&lt;/code&gt; 。每次调用 &lt;code&gt;va_arg&lt;/code&gt; 宏都会修改 &lt;code&gt;ap&lt;/code&gt; 以指向下一个变量参数。</target>
        </trans-unit>
        <trans-unit id="78d8fbfbd118d1d3d4df7bcfce2536f17f07cf5e" translate="yes" xml:space="preserve">
          <source>Private inheritance</source>
          <target state="translated">私人继承</target>
        </trans-unit>
        <trans-unit id="fb4ffd080efe28380e63bd79f1bfd72d2a668041" translate="yes" xml:space="preserve">
          <source>Private inheritance can also be used to implement the composition relationship (the base class subobject is an implementation detail of the derived class object). Using a member offers better encapsulation and is generally preferred unless the derived class requires access to protected members (including constructors) of the base, needs to override a virtual member of the base, needs the base to be constructed before and destructed after some other base subobject, needs to share a virtual base or needs to control the construction of a virtual base. Use of members to implement composition is also not applicable in the case of multiple inheritance from a &lt;a href=&quot;parameter_pack&quot;&gt;parameter pack&lt;/a&gt; or when the identities of the base classes are determined at compile time through template metaprogramming.</source>
          <target state="translated">私有继承也可以用于实现组成关系（基类子对象是派生类对象的实现细节）。使用成员可以提供更好的封装，并且通常是首选方法，除非派生类需要访问基础的受保护成员（包括构造函数），需要覆盖基础的虚拟成员，需要在其他基础之前构建和销毁基础子对象，需要共享虚拟基础或需要控制虚拟基础的构建。在从&lt;a href=&quot;parameter_pack&quot;&gt;参数包&lt;/a&gt;进行多重继承的情况下，或者在编译时通过模板元编程确定基类的标识时，使用成员来实现组合也不适用。</target>
        </trans-unit>
        <trans-unit id="218e29f2f69f8947e31270f51b805ca53bc75c61" translate="yes" xml:space="preserve">
          <source>Private inheritance is commonly used in policy-based design, since policies are usually empty classes, and using them as bases both enables static polymorphism and leverages &lt;a href=&quot;ebo&quot;&gt;empty-base optimization&lt;/a&gt;.</source>
          <target state="translated">私有继承通常用于基于策略的设计中，因为策略通常是空类，并且将它们用作基础既可以实现静态多态性，又可以利用&lt;a href=&quot;ebo&quot;&gt;空基优化&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="afb9ea2d123e66166eec4988195c8534b10061b4" translate="yes" xml:space="preserve">
          <source>Private member access</source>
          <target state="translated">私人会员访问</target>
        </trans-unit>
        <trans-unit id="7bda3a3abd8117060b1e19a8bee14ecb87b8b483" translate="yes" xml:space="preserve">
          <source>Private member functions</source>
          <target state="translated">私人成员功能</target>
        </trans-unit>
        <trans-unit id="a50c5ae71a8d2a0ec645344479dc67203a5c787b" translate="yes" xml:space="preserve">
          <source>Private members form the implementation of a class, as well as the private interface for the other members of the class.</source>
          <target state="translated">私有成员构成了一个类的实现,也构成了类的其他成员的私有接口。</target>
        </trans-unit>
        <trans-unit id="b1513c51029a00390dd31722274823a1adb93267" translate="yes" xml:space="preserve">
          <source>Process control</source>
          <target state="translated">过程控制</target>
        </trans-unit>
        <trans-unit id="25a8e99b2b428303422345fdac98cd9fee9d875b" translate="yes" xml:space="preserve">
          <source>Processor time used by the program so far or &lt;code&gt;(clock_t)(-1)&lt;/code&gt; if that information is unavailable or its value cannot be represented.</source>
          <target state="translated">到目前为止，程序使用的处理器时间；如果该信息不可用或无法表示其值，则为 &lt;code&gt;(clock_t)(-1)&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="69927f368c2cab595e7fed0136b4b16eae67a3ac" translate="yes" xml:space="preserve">
          <source>Produce cv-/ref-qualified function types themselves.</source>
          <target state="translated">自己生产cv-/ref-限定的函数类型。</target>
        </trans-unit>
        <trans-unit id="284f4cc441a5ef32ce3012d58e2c3ab4502645b9" translate="yes" xml:space="preserve">
          <source>Produces cv-/ref-qualified function types themselves.</source>
          <target state="translated">生成cv-/ref-限定的函数类型本身。</target>
        </trans-unit>
        <trans-unit id="7398ece277148cc970bc562b87404185d1c68358" translate="yes" xml:space="preserve">
          <source>Produces random boolean values, according to the discrete probability function. The probability of &lt;code&gt;true&lt;/code&gt; is  P(b|p) =</source>
          <target state="translated">根据离散概率函数产生随机布尔值。 &lt;code&gt;true&lt;/code&gt; 概率为P（b | p）=</target>
        </trans-unit>
        <trans-unit id="d79179f3d7bd11bb14d0dcd523adf792f92db1a6" translate="yes" xml:space="preserve">
          <source>Produces random floating-point values i, uniformly distributed on the interval &lt;code&gt;[a, b)&lt;/code&gt;, that is, distributed according to the probability density function:  P(i|a,b) =</source>
          <target state="translated">产生均匀分布在区间 &lt;code&gt;[a, b)&lt;/code&gt; 上的随机浮点值i，即根据概率密度函数P（i | a，b）=</target>
        </trans-unit>
        <trans-unit id="6ccdf511dded895fa8cc1bb3ea28fed0a8ac43ae" translate="yes" xml:space="preserve">
          <source>Produces random floating-point values x, distributed according to probability density function:  \(p(x|n) = \frac{1}{\sqrt{n\pi} } \cdot \frac{\Gamma(\frac{n+1}{2})}{\Gamma(\frac{n}{2})} \cdot (1+\frac{x^2}{n})^{-\frac{n+1}{2} } \)p(x|n) =</source>
          <target state="translated">生成随机浮点值x,按照概率密度函数分布。\(p(x|n)=\frac{1}{\sqrt{n\pi}}。\dcdot \frac{\Gamma(\frac{n+1}{2})}{\Gamma(\frac{n}{2})}\cdot (1+/frac{x^2}{n})^{-/frac{n+1}{2}。}\\)p(x|n)=。</target>
        </trans-unit>
        <trans-unit id="2895130a362344adad80f31acdc04091208a8b95" translate="yes" xml:space="preserve">
          <source>Produces random integer values i, uniformly distributed on the closed interval &lt;code&gt;[a, b]&lt;/code&gt;, that is, distributed according to the discrete probability function  P(i|a,b) =</source>
          <target state="translated">产生均匀分布在闭合区间 &lt;code&gt;[a, b]&lt;/code&gt; 上的随机整数i，即根据离散概率函数P（i | a，b）=</target>
        </trans-unit>
        <trans-unit id="e81e5a0f719516c20e3b7efd9738e594c83a31fe" translate="yes" xml:space="preserve">
          <source>Produces random non-negative floating-point values x, distributed according to probability density function:  P(x|&amp;lambda;) = &amp;lambda;e.</source>
          <target state="translated">产生随机的非负浮点值x，其根据概率密度函数P（x |&amp;lambda;）=&amp;lambda;e分布。</target>
        </trans-unit>
        <trans-unit id="6a29b8a830dc5414bf0e054d92718bbeaa426c2e" translate="yes" xml:space="preserve">
          <source>Produces random non-negative integer values i, distributed according to discrete probability function:  \(P(i | \mu) = \frac{e^{-\mu}\mu^i}{i!}\)P(i|&amp;mu;) =</source>
          <target state="translated">产生随机的非负整数值i，根据离散概率函数分布：\（P（i | \ mu）= \ frac {e ^ {-\ mu} \ mu ^ i} {i！} \）P（i |&amp;mu;）=</target>
        </trans-unit>
        <trans-unit id="0c1a0e643df72c6810bdbb23dd51b4ccb1dde162" translate="yes" xml:space="preserve">
          <source>Produces random non-negative integer values i, distributed according to discrete probability function:  \(P(i|k, p) = \binom{k + i - 1}{i} \cdot p^k \cdot (1 - p)^i\)P(i|k,p) =</source>
          <target state="translated">产生随机的非负整数值i,按照离散概率函数分布。\(P(i|k,p)=binom{k+i-1}{i})\cdot p^k cdot (1-p)^i/)P(i|k,p)=</target>
        </trans-unit>
        <trans-unit id="34429cceb32abba04a6f2aee71c8ba2abbfe6ca8" translate="yes" xml:space="preserve">
          <source>Produces random non-negative integer values i, distributed according to discrete probability function:  \(P(i|p) = p \cdot (1-p)^i\)P(i|p) = p &amp;middot; (1 &amp;minus; p).</source>
          <target state="translated">产生随机的非负整数值i，根据离散概率函数分布：\（P（i | p）= p \ cdot（1-p）^ i \）P（i | p）= p&amp;middot;（1 &amp;minus; p ）。</target>
        </trans-unit>
        <trans-unit id="66a3aab27d6b43e1ed61d5002c62d00e0e214cdd" translate="yes" xml:space="preserve">
          <source>Produces random non-negative integer values i, distributed according to discrete probability function:  \(P(i|t,p) = \binom{t}{i} \cdot p^i \cdot (1-p)^{t-i}\)P(i|t,p) =</source>
          <target state="translated">产生随机的非负整数值i,按照离散概率函数分布。\(P(i|t,p)=binom{t}{i})\cdot p^i cdot (1-p)^{t-i}/)P(i|t,p)=</target>
        </trans-unit>
        <trans-unit id="5f99cacd1d4a892532f1a1b21ce9a90820ab9bb6" translate="yes" xml:space="preserve">
          <source>Produces random numbers according to a Cauchy distribution (also called Lorentz distribution):  f(x; a,b) =</source>
          <target state="translated">根据考奇分布(也叫洛伦兹分布)产生随机数:f(x;a,b)=。</target>
        </trans-unit>
        <trans-unit id="1677f8975b324726ee392f3049ad663b3cc666ef" translate="yes" xml:space="preserve">
          <source>Produces random numbers according to the &lt;a href=&quot;https://en.wikipedia.org/wiki/F-distribution&quot;&gt;f-distribution&lt;/a&gt;:  p(x;m,n) =</source>
          <target state="translated">根据&lt;a href=&quot;https://en.wikipedia.org/wiki/F-distribution&quot;&gt;f分布&lt;/a&gt;产生随机数：p（x; m，n）=</target>
        </trans-unit>
        <trans-unit id="bceadad56e5130f57d1438ef98fed7735937185e" translate="yes" xml:space="preserve">
          <source>Produces random numbers according to the &lt;a href=&quot;https://en.wikipedia.org/wiki/Generalized_extreme_value_distribution&quot;&gt;extreme value distribution&lt;/a&gt; (it is also known as Gumbel Type I, log-Weibull, Fisher-Tippett Type I):  p(x;a,b) =</source>
          <target state="translated">根据&lt;a href=&quot;https://en.wikipedia.org/wiki/Generalized_extreme_value_distribution&quot;&gt;极值分布&lt;/a&gt;生成随机数（也称为Gumbel类型I，log-Weibull，Fisher-Tippett类型I）：p（x; a，b）=</target>
        </trans-unit>
        <trans-unit id="74f7fe6d9c8f974b224518a3fbdc53623257e1db" translate="yes" xml:space="preserve">
          <source>Produces random positive floating-point values x, distributed according to probability density function:  \(\mathsf{p}(x\mid\alpha,\beta) = \frac{e^{-x/\beta} }{\beta^\alpha\cdot\Gamma(\alpha)}\cdot x^{\alpha-1} \)P(x|&amp;alpha;,&amp;beta;) =</source>
          <target state="translated">产生随机正浮点值x，根据概率密度函数分布：\（\ mathsf {p}（x \ mid \ alpha，\ beta）= \ frac {e ^ {-x / \ beta}} {\ beta ^ \ alpha \ cdot \ Gamma（\ alpha）} \ cdot x ^ {\ alpha-1} \）P（x |&amp;alpha;，&amp;beta;）=</target>
        </trans-unit>
        <trans-unit id="1e8d9313490c82ca81623307ec10d5f0ca9c7e23" translate="yes" xml:space="preserve">
          <source>Program support utilities</source>
          <target state="translated">方案支助公用事业</target>
        </trans-unit>
        <trans-unit id="bd74641b834d4b980ea6b99d6f71d4205f5d04af" translate="yes" xml:space="preserve">
          <source>Program termination</source>
          <target state="translated">程序终止</target>
        </trans-unit>
        <trans-unit id="1aea5d7b0affef03e96f9261c5e3d01e8ed3063f" translate="yes" xml:space="preserve">
          <source>Program utilities</source>
          <target state="translated">程序工具</target>
        </trans-unit>
        <trans-unit id="741e22a3e35f0e2227bf409a8d132fe861e03cef" translate="yes" xml:space="preserve">
          <source>Programs with &lt;a href=&quot;ub&quot;&gt;undefined behavior&lt;/a&gt;, e.g. due to access to an array out of bounds, modification of a const object, &lt;a href=&quot;eval_order&quot;&gt;evaluation order&lt;/a&gt; violations, etc, are free from the as-if rule: they often change observable behavior when recompiled with different optimization settings. For example, if a test for signed integer overflow relies on the result of that overflow, e.g. &lt;code&gt;if(n+1 &amp;lt; n) abort();&lt;/code&gt;, &lt;a href=&quot;http://blog.llvm.org/2011/05/what-every-c-programmer-should-know_14.html&quot;&gt;it is removed entirely by some compilers&lt;/a&gt; because &lt;a href=&quot;operator_arithmetic#Overflows&quot;&gt;signed overflow is undefined behavior&lt;/a&gt; and the optimizer is free to assume it never happens and the test is redundant.</source>
          <target state="translated">具有&lt;a href=&quot;ub&quot;&gt;未定义行为的&lt;/a&gt;程序（例如，由于超出范围访问数组，修改const对象，违反&lt;a href=&quot;eval_order&quot;&gt;评估顺序&lt;/a&gt;等）不受&amp;ldquo;当下&amp;rdquo;规则的约束：使用不同的优化设置重新编译时，它们通常会更改可观察到的行为。例如，如果有符号整数溢出的测试依赖于该溢出的结果，例如 &lt;code&gt;if(n+1 &amp;lt; n) abort();&lt;/code&gt; ，&lt;a href=&quot;http://blog.llvm.org/2011/05/what-every-c-programmer-should-know_14.html&quot;&gt;它会被某些编译器完全删除，&lt;/a&gt;因为带&lt;a href=&quot;operator_arithmetic#Overflows&quot;&gt;符号的溢出是未定义的行为&lt;/a&gt;，优化器可以自由地假设它永远不会发生，并且测试是多余的。</target>
        </trans-unit>
        <trans-unit id="823ace5db3022669aeee67759a8fd354aa4543af" translate="yes" xml:space="preserve">
          <source>Progress guarantee</source>
          <target state="translated">进度保证</target>
        </trans-unit>
        <trans-unit id="fe5671922bc7f67cfabfa60ab97a9542ac21f39f" translate="yes" xml:space="preserve">
          <source>Promise</source>
          <target state="translated">Promise</target>
        </trans-unit>
        <trans-unit id="bc6c88db2f0703a9e2461a4a8060ccf1cb881998" translate="yes" xml:space="preserve">
          <source>Properties</source>
          <target state="translated">Properties</target>
        </trans-unit>
        <trans-unit id="351f56a6fefd5127c90506d3e91990f1d7631787" translate="yes" xml:space="preserve">
          <source>Properties:</source>
          <target state="translated">Properties:</target>
        </trans-unit>
        <trans-unit id="6537d3e70b32d4615c40b4a0c2abdf1f23e1ecf8" translate="yes" xml:space="preserve">
          <source>Property queries</source>
          <target state="translated">财产查询</target>
        </trans-unit>
        <trans-unit id="bfa418f784d01002997fded247f5e9e4c3ab6762" translate="yes" xml:space="preserve">
          <source>Proportional to</source>
          <target state="translated">相当于</target>
        </trans-unit>
        <trans-unit id="91dbbf032ad21e4946eb671d31585c25617d8da0" translate="yes" xml:space="preserve">
          <source>Protected inheritance</source>
          <target state="translated">保护性继承</target>
        </trans-unit>
        <trans-unit id="bfeee6ec842d770cd3002e93350981d15b8e69e0" translate="yes" xml:space="preserve">
          <source>Protected inheritance may be used for &quot;controlled polymorphism&quot;: within the members of Derived, as well as within the members of all further-derived classes, the derived class IS-A base: references and pointers to Derived may be used where references and pointers to Base are expected.</source>
          <target state="translated">受保护的继承可以用于 &quot;受控的多态性&quot;:在Derived的成员内,以及在所有进一步派生类的成员内,派生类IS-A base:对Derived的引用和指针可以用于预期对Base的引用和指针的地方。</target>
        </trans-unit>
        <trans-unit id="e0cdd5aa6f8c0eb0ac4911b493400386e2f149c7" translate="yes" xml:space="preserve">
          <source>Protected member access</source>
          <target state="translated">受保护的成员访问</target>
        </trans-unit>
        <trans-unit id="8067d13f0b7577f4d8730118ce88d437e443ab43" translate="yes" xml:space="preserve">
          <source>Protected member functions</source>
          <target state="translated">受保护的成员职能</target>
        </trans-unit>
        <trans-unit id="f943de0cb4025273b5c3675bdc528322c9ee2ee7" translate="yes" xml:space="preserve">
          <source>Protected member objects</source>
          <target state="translated">受保护的成员对象</target>
        </trans-unit>
        <trans-unit id="e43c04b0ce27d91785cddc777e7c8fdc291200c6" translate="yes" xml:space="preserve">
          <source>Protected members form the interface for the derived classes (which is distinct from the public interface of the class).</source>
          <target state="translated">受保护的成员构成了派生类的接口(它与类的公共接口不同)。</target>
        </trans-unit>
        <trans-unit id="a31583107f763ed101ab870682277a15652cc1cb" translate="yes" xml:space="preserve">
          <source>Protocol error</source>
          <target state="translated">错误协议</target>
        </trans-unit>
        <trans-unit id="59bb2975367cf35f9a618efe163f6de98389a1c2" translate="yes" xml:space="preserve">
          <source>Protocol not available</source>
          <target state="translated">议定书不详</target>
        </trans-unit>
        <trans-unit id="05ba63ff22fffa946a6c1e3e8b9d184a5a911e55" translate="yes" xml:space="preserve">
          <source>Protocol not supported</source>
          <target state="translated">不支持的协议</target>
        </trans-unit>
        <trans-unit id="3ff5f085a157b60cb28dba0860f39cd3e12b11e1" translate="yes" xml:space="preserve">
          <source>Protocol wrong type for socket</source>
          <target state="translated">套接字的协议类型错误</target>
        </trans-unit>
        <trans-unit id="89bd0bbc8dba110ebd6107978c6bf2926400a21f" translate="yes" xml:space="preserve">
          <source>Prototype examples (for &lt;code&gt;class T&lt;/code&gt;)</source>
          <target state="translated">原型示例（针对 &lt;code&gt;class T&lt;/code&gt; ）</target>
        </trans-unit>
        <trans-unit id="912607a96502c985d59aad3c32a512562883226b" translate="yes" xml:space="preserve">
          <source>Provide automatic comparison operators</source>
          <target state="translated">提供自动比较操作员</target>
        </trans-unit>
        <trans-unit id="36f47783eb436bfec79c2ae8a4b06844533f9db1" translate="yes" xml:space="preserve">
          <source>Provides a hint to the implementation to reschedule the execution of threads, allowing other threads to run.</source>
          <target state="translated">为实现提供一个提示,重新安排线程的执行时间,让其他线程运行。</target>
        </trans-unit>
        <trans-unit id="8480054becd3b689a3eeb794e61d5c93e7d94e05" translate="yes" xml:space="preserve">
          <source>Provides a specialization of the &lt;code&gt;&lt;a href=&quot;../../memory/uses_allocator&quot;&gt;std::uses_allocator&lt;/a&gt;&lt;/code&gt; type trait for &lt;code&gt;&lt;a href=&quot;../packaged_task&quot;&gt;std::packaged_task&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">为 &lt;code&gt;&lt;a href=&quot;../packaged_task&quot;&gt;std::packaged_task&lt;/a&gt;&lt;/code&gt; 提供 &lt;code&gt;&lt;a href=&quot;../../memory/uses_allocator&quot;&gt;std::uses_allocator&lt;/a&gt;&lt;/code&gt; 类型特征的特化。</target>
        </trans-unit>
        <trans-unit id="e47ec25866e740283661bcf153e7a91ae5a664d2" translate="yes" xml:space="preserve">
          <source>Provides a specialization of the &lt;code&gt;&lt;a href=&quot;../../memory/uses_allocator&quot;&gt;std::uses_allocator&lt;/a&gt;&lt;/code&gt; type trait for &lt;code&gt;&lt;a href=&quot;../promise&quot;&gt;std::promise&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">为 &lt;code&gt;&lt;a href=&quot;../promise&quot;&gt;std::promise&lt;/a&gt;&lt;/code&gt; 提供 &lt;code&gt;&lt;a href=&quot;../../memory/uses_allocator&quot;&gt;std::uses_allocator&lt;/a&gt;&lt;/code&gt; 类型特征的特殊化。</target>
        </trans-unit>
        <trans-unit id="292f5513776420dfd0bc6f98a1c28b2a7114b54f" translate="yes" xml:space="preserve">
          <source>Provides a transparent specialization of the &lt;code&gt;&lt;a href=&quot;../../memory/uses_allocator&quot;&gt;std::uses_allocator&lt;/a&gt;&lt;/code&gt; type trait for &lt;code&gt;&lt;a href=&quot;../priority_queue&quot;&gt;std::priority_queue&lt;/a&gt;&lt;/code&gt;: the container adaptor uses allocator if and only if the underlying container does.</source>
          <target state="translated">为 &lt;code&gt;&lt;a href=&quot;../priority_queue&quot;&gt;std::priority_queue&lt;/a&gt;&lt;/code&gt; 提供 &lt;code&gt;&lt;a href=&quot;../../memory/uses_allocator&quot;&gt;std::uses_allocator&lt;/a&gt;&lt;/code&gt; 类型特征的透明特化：容器适配器在且仅当基础容器使用时才使用分配器。</target>
        </trans-unit>
        <trans-unit id="a42ef848c5b4f8e760719477188f58cf5628b7b2" translate="yes" xml:space="preserve">
          <source>Provides a transparent specialization of the &lt;code&gt;&lt;a href=&quot;../../memory/uses_allocator&quot;&gt;std::uses_allocator&lt;/a&gt;&lt;/code&gt; type trait for &lt;code&gt;&lt;a href=&quot;../queue&quot;&gt;std::queue&lt;/a&gt;&lt;/code&gt;: the container adaptor uses allocator if and only if the underlying container does.</source>
          <target state="translated">为 &lt;code&gt;&lt;a href=&quot;../queue&quot;&gt;std::queue&lt;/a&gt;&lt;/code&gt; 提供 &lt;code&gt;&lt;a href=&quot;../../memory/uses_allocator&quot;&gt;std::uses_allocator&lt;/a&gt;&lt;/code&gt; 类型特征的透明特化：容器适配器在且仅当基础容器使用分配器时才使用分配器。</target>
        </trans-unit>
        <trans-unit id="718e235b8892f53c849015dd0d07915ec7007542" translate="yes" xml:space="preserve">
          <source>Provides a transparent specialization of the &lt;code&gt;&lt;a href=&quot;../../memory/uses_allocator&quot;&gt;std::uses_allocator&lt;/a&gt;&lt;/code&gt; type trait for &lt;code&gt;&lt;a href=&quot;../stack&quot;&gt;std::stack&lt;/a&gt;&lt;/code&gt;: the container adaptor uses allocator if and only if the underlying container does.</source>
          <target state="translated">为 &lt;code&gt;&lt;a href=&quot;../stack&quot;&gt;std::stack&lt;/a&gt;&lt;/code&gt; 提供 &lt;code&gt;&lt;a href=&quot;../../memory/uses_allocator&quot;&gt;std::uses_allocator&lt;/a&gt;&lt;/code&gt; 类型特征的透明特化：容器适配器在且仅当基础容器使用时才使用分配器。</target>
        </trans-unit>
        <trans-unit id="d9c44274836fb1e7e47b7c3e058df06af507396f" translate="yes" xml:space="preserve">
          <source>Provides a way to request the compiler to generate consistent relational operators for a class.</source>
          <target state="translated">提供了一种要求编译器为一个类生成一致的关系运算符的方法。</target>
        </trans-unit>
        <trans-unit id="c56f5be2a40a27ce61131015ecbaf9739189dafd" translate="yes" xml:space="preserve">
          <source>Provides access to the iterator passed in the constructor of this raw_storage_iterator.</source>
          <target state="translated">提供对这个raw_storage_iterator的构造函数中传递的迭代器的访问。</target>
        </trans-unit>
        <trans-unit id="73bd20a1573f60afd74db9205597036242b208ef" translate="yes" xml:space="preserve">
          <source>Provides access to the number of alternatives in a possibly cv-qualified variant as a compile-time constant expression.</source>
          <target state="translated">作为编译时的常量表达式,提供了对一个可能的cv限定变体中的备选数量的访问。</target>
        </trans-unit>
        <trans-unit id="49b2719c04143ff4e98c41f5c2c605d201c9a5df" translate="yes" xml:space="preserve">
          <source>Provides access to the number of elements in a static-extent &lt;code&gt;span&lt;/code&gt; as a compile-time constant expression. If the &lt;code&gt;span&lt;/code&gt; has dynamic extent, the &lt;code&gt;tuple_size&lt;/code&gt; specialization is an incomplete type.</source>
          <target state="translated">提供对静态范围 &lt;code&gt;span&lt;/code&gt; 元素数量的访问，作为编译时常量表达式。如果 &lt;code&gt;span&lt;/code&gt; 具有动态范围，则 &lt;code&gt;tuple_size&lt;/code&gt; 特殊化是不完整的类型。</target>
        </trans-unit>
        <trans-unit id="d9044a41cab0332a1f6811c177613a94f5cded96" translate="yes" xml:space="preserve">
          <source>Provides access to the number of elements in a tuple as a compile-time constant expression.</source>
          <target state="translated">提供对元组中元素数量的访问,作为编译时的常量表达式。</target>
        </trans-unit>
        <trans-unit id="3b2c69871fe2effc8a08eb7e581545d11ecd8782" translate="yes" xml:space="preserve">
          <source>Provides access to the number of elements in an &lt;code&gt;&lt;a href=&quot;../array&quot;&gt;std::array&lt;/a&gt;&lt;/code&gt; as a compile-time constant expression.</source>
          <target state="translated">提供对 &lt;code&gt;&lt;a href=&quot;../array&quot;&gt;std::array&lt;/a&gt;&lt;/code&gt; 中元素数量的访问，作为编译时常量表达式。</target>
        </trans-unit>
        <trans-unit id="9daf1d9a933818d15da540f468677243e6d04656" translate="yes" xml:space="preserve">
          <source>Provides an instance of &lt;code&gt;A&lt;/code&gt; to be used by the container that is copy-constructed from the one that uses &lt;code&gt;a&lt;/code&gt; currently. Usually returns either a copy of &lt;code&gt;a&lt;/code&gt; or a default-constructed &lt;code&gt;A()&lt;/code&gt;.</source>
          <target state="translated">提供的一个实例 &lt;code&gt;A&lt;/code&gt; 到由作为拷贝构造从使用一个容器中使用 &lt;code&gt;a&lt;/code&gt; 目前。通常返回 &lt;code&gt;a&lt;/code&gt; 或默认构造的 &lt;code&gt;A()&lt;/code&gt; 的副本。</target>
        </trans-unit>
        <trans-unit id="605708618ea8792e48fabbe7a7f2e34c3c5698cd" translate="yes" xml:space="preserve">
          <source>Provides compile-time indexed access to the type of the elements of the array using tuple-like interface.</source>
          <target state="translated">使用类似元组的接口,提供对数组元素类型的编译时索引访问。</target>
        </trans-unit>
        <trans-unit id="e1018457a744777cbab68b6efb67f37930382f13" translate="yes" xml:space="preserve">
          <source>Provides compile-time indexed access to the type of the elements of the span using tuple-like interface. The program is ill-formed if &lt;code&gt;I &amp;gt;= N&lt;/code&gt; or if &lt;code&gt;N == &lt;a href=&quot;dynamic_extent&quot;&gt;std::dynamic_extent&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">使用类似元组的接口，提供对跨度元素类型的编译时索引访问。如果 &lt;code&gt;I &amp;gt;= N&lt;/code&gt; 或 &lt;code&gt;N == &lt;a href=&quot;dynamic_extent&quot;&gt;std::dynamic_extent&lt;/a&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="7df6df4f6ac05a60981477a88d49a4c8e1f8b8e0" translate="yes" xml:space="preserve">
          <source>Provides compile-time indexed access to the types of the alternatives of the possibly cv-qualified variant, combining cv-qualifications of the variant (if any) with the cv-qualifications of the alternative.</source>
          <target state="translated">提供编译时索引访问可能的cv限定变体的替代品的类型,将变体的cv限定(如果有的话)与替代品的cv限定结合起来。</target>
        </trans-unit>
        <trans-unit id="8f5d62a478bb6d0d78a4f635d0643e95b2b93818" translate="yes" xml:space="preserve">
          <source>Provides compile-time indexed access to the types of the elements of the tuple.</source>
          <target state="translated">提供编译时对元组元素类型的索引访问。</target>
        </trans-unit>
        <trans-unit id="fa0bda45a8b32f906b856e8bfef2723365da27e2" translate="yes" xml:space="preserve">
          <source>Provides consistent interface to handle errors through the &lt;a href=&quot;../language/throw&quot;&gt;throw expression&lt;/a&gt;.</source>
          <target state="translated">提供一致的接口以通过&lt;a href=&quot;../language/throw&quot;&gt;throw表达式&lt;/a&gt;处理错误。</target>
        </trans-unit>
        <trans-unit id="0432bc3dbc26a29cee331e15137aa0959b40ef8a" translate="yes" xml:space="preserve">
          <source>Provides conversions from C &lt;a href=&quot;../string/byte&quot;&gt;byte&lt;/a&gt; and &lt;a href=&quot;../string/wide&quot;&gt;wide&lt;/a&gt; strings to &lt;code&gt;&lt;a href=&quot;../types/integer&quot;&gt;std::intmax_t&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;../types/integer&quot;&gt;std::uintmax_t&lt;/a&gt;&lt;/code&gt;, overloads some &lt;a href=&quot;../numeric/math&quot;&gt;math functions&lt;/a&gt; for &lt;code&gt;&lt;a href=&quot;../types/integer&quot;&gt;std::intmax_t&lt;/a&gt;&lt;/code&gt; and provide &lt;a href=&quot;../io/c&quot;&gt;C style input/output&lt;/a&gt; format macros for the types declared in &lt;a href=&quot;cstdint&quot;&gt;&lt;code&gt;&amp;lt;cstdint&amp;gt;&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">提供从C &lt;a href=&quot;../string/byte&quot;&gt;字节&lt;/a&gt;和&lt;a href=&quot;../string/wide&quot;&gt;宽&lt;/a&gt;字符串到 &lt;code&gt;&lt;a href=&quot;../types/integer&quot;&gt;std::intmax_t&lt;/a&gt;&lt;/code&gt; 和 &lt;code&gt;&lt;a href=&quot;../types/integer&quot;&gt;std::uintmax_t&lt;/a&gt;&lt;/code&gt; ，为 &lt;code&gt;&lt;a href=&quot;../types/integer&quot;&gt;std::intmax_t&lt;/a&gt;&lt;/code&gt; 重载一些&lt;a href=&quot;../numeric/math&quot;&gt;数学函数&lt;/a&gt;，并为&lt;a href=&quot;cstdint&quot;&gt; &lt;code&gt;&amp;lt;cstdint&amp;gt;&lt;/code&gt; 中&lt;/a&gt;声明的类型提供&lt;a href=&quot;../io/c&quot;&gt;C风格的输入/输出&lt;/a&gt;格式宏。</target>
        </trans-unit>
        <trans-unit id="cc539c7b8a6d1afa363070f7caae3b108581c2e3" translate="yes" xml:space="preserve">
          <source>Provides for linkage between modules written in different programming languages.</source>
          <target state="translated">提供不同编程语言编写的模块之间的联系。</target>
        </trans-unit>
        <trans-unit id="a2fa6fe6cbd2ce83fb03d226122e055e5ac14480" translate="yes" xml:space="preserve">
          <source>Provides member typedef &lt;code&gt;type&lt;/code&gt;, which is defined as &lt;code&gt;T&lt;/code&gt; if &lt;code&gt;B&lt;/code&gt; is &lt;code&gt;true&lt;/code&gt; at compile time, or as &lt;code&gt;F&lt;/code&gt; if &lt;code&gt;B&lt;/code&gt; is &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">提供构件的typedef &lt;code&gt;type&lt;/code&gt; ，其被定义为 &lt;code&gt;T&lt;/code&gt; 如果 &lt;code&gt;B&lt;/code&gt; 是 &lt;code&gt;true&lt;/code&gt; 在编译时，或作为 &lt;code&gt;F&lt;/code&gt; 如果 &lt;code&gt;B&lt;/code&gt; 是 &lt;code&gt;false&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="f8c7046a49c81423fad18ec20009bb885a08851e" translate="yes" xml:space="preserve">
          <source>Provides the member constant &lt;code&gt;value&lt;/code&gt; equal to the &lt;a href=&quot;../language/objects#Alignment&quot;&gt;alignment requirement&lt;/a&gt; of the type &lt;code&gt;T&lt;/code&gt;, as if obtained by an &lt;code&gt;alignof&lt;/code&gt; expression. If &lt;code&gt;T&lt;/code&gt; is an array type, returns the alignment requirements of the element type. If &lt;code&gt;T&lt;/code&gt; is a reference type, returns the alignment requirements of the type referred to.</source>
          <target state="translated">提供等于 &lt;code&gt;T&lt;/code&gt; 类型的&lt;a href=&quot;../language/objects#Alignment&quot;&gt;对齐要求&lt;/a&gt;的成员常 &lt;code&gt;value&lt;/code&gt; ，就好像是由 &lt;code&gt;alignof&lt;/code&gt; 表达式获得的一样。如果 &lt;code&gt;T&lt;/code&gt; 是数组类型，则返回元素类型的对齐要求。如果 &lt;code&gt;T&lt;/code&gt; 是引用类型，则返回所引用类型的对齐要求。</target>
        </trans-unit>
        <trans-unit id="475fffff872f4c4426c4612901a68e18bae668e6" translate="yes" xml:space="preserve">
          <source>Provides the member constant &lt;code&gt;value&lt;/code&gt; that is equal to &lt;code&gt;true&lt;/code&gt;, if &lt;code&gt;T&lt;/code&gt; is the type &lt;code&gt;&lt;a href=&quot;nullptr_t&quot;&gt;std::nullptr_t&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;const &lt;a href=&quot;nullptr_t&quot;&gt;std::nullptr_t&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;volatile &lt;a href=&quot;nullptr_t&quot;&gt;std::nullptr_t&lt;/a&gt;&lt;/code&gt;, or &lt;code&gt;const volatile &lt;a href=&quot;nullptr_t&quot;&gt;std::nullptr_t&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">如果 &lt;code&gt;T&lt;/code&gt; 为类型 &lt;code&gt;&lt;a href=&quot;nullptr_t&quot;&gt;std::nullptr_t&lt;/a&gt;&lt;/code&gt; ， &lt;code&gt;const &lt;a href=&quot;nullptr_t&quot;&gt;std::nullptr_t&lt;/a&gt;&lt;/code&gt; &lt;a href=&quot;nullptr_t&quot;&gt;std :: nullptr_t&lt;/a&gt;， &lt;code&gt;volatile &lt;a href=&quot;nullptr_t&quot;&gt;std::nullptr_t&lt;/a&gt;&lt;/code&gt; &lt;a href=&quot;nullptr_t&quot;&gt;std :: nullptr_t&lt;/a&gt;或 &lt;code&gt;const volatile &lt;a href=&quot;nullptr_t&quot;&gt;std::nullptr_t&lt;/a&gt;&lt;/code&gt; &lt;a href=&quot;nullptr_t&quot;&gt;std :: nullptr_t&lt;/a&gt;，则提供等于 &lt;code&gt;true&lt;/code&gt; 的成员常 &lt;code&gt;value&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="7ce165e06fc0b5e145ff49b98a793613379da1e4" translate="yes" xml:space="preserve">
          <source>Provides the member constant &lt;code&gt;value&lt;/code&gt; which is equal to &lt;code&gt;true&lt;/code&gt;, if &lt;code&gt;T&lt;/code&gt; is &lt;a href=&quot;execution_policy_tag_t&quot;&gt;a standard execution policy type&lt;/a&gt;, or an implementation-defined execution policy type. Otherwise, &lt;code&gt;value&lt;/code&gt; is equal to &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">如果 &lt;code&gt;T&lt;/code&gt; 是&lt;a href=&quot;execution_policy_tag_t&quot;&gt;标准执行策略类型&lt;/a&gt;或实现定义的执行策略类型，则提供等于 &lt;code&gt;true&lt;/code&gt; 的成员常 &lt;code&gt;value&lt;/code&gt; 。否则， &lt;code&gt;value&lt;/code&gt; 等于 &lt;code&gt;false&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="a3986600082198d59640bc0d5712ce60136d8837" translate="yes" xml:space="preserve">
          <source>Provides the member typedef &lt;code&gt;type&lt;/code&gt; that names &lt;code&gt;T&lt;/code&gt; (i.e., the identity transformation).</source>
          <target state="translated">提供名称为 &lt;code&gt;T&lt;/code&gt; 的成员typedef &lt;code&gt;type&lt;/code&gt; （即，身份转换）。</target>
        </trans-unit>
        <trans-unit id="aa77003ba7128d55985620f7c23b63385a04d503" translate="yes" xml:space="preserve">
          <source>Provides the member typedef &lt;code&gt;type&lt;/code&gt; which is the same as &lt;code&gt;T&lt;/code&gt;, except it has a cv-qualifier added (unless &lt;code&gt;T&lt;/code&gt; is a function, a reference, or already has this cv-qualifier).</source>
          <target state="translated">提供与 &lt;code&gt;T&lt;/code&gt; 相同的成员typedef &lt;code&gt;type&lt;/code&gt; ，除了它添加了cv限定符（除非 &lt;code&gt;T&lt;/code&gt; 是函数，引用或已经具有此cv限定符）。</target>
        </trans-unit>
        <trans-unit id="ad8f5a632335756cbf366e1ed2ed250ef5a4a3af" translate="yes" xml:space="preserve">
          <source>Provides the member typedef &lt;code&gt;type&lt;/code&gt; which is the same as &lt;code&gt;T&lt;/code&gt;, except that its topmost cv-qualifiers are removed.</source>
          <target state="translated">提供与 &lt;code&gt;T&lt;/code&gt; 相同的成员typedef &lt;code&gt;type&lt;/code&gt; ，只是除去其最上面的cv限定符。</target>
        </trans-unit>
        <trans-unit id="3f083f4c62ca8ccad08802af4d95600947099c84" translate="yes" xml:space="preserve">
          <source>Provides the member typedef &lt;code&gt;type&lt;/code&gt; which is the type pointed to by &lt;code&gt;T&lt;/code&gt;, or, if &lt;code&gt;T&lt;/code&gt; is not a pointer, then &lt;code&gt;type&lt;/code&gt; is the same as &lt;code&gt;T&lt;/code&gt;.</source>
          <target state="translated">提供成员typedef &lt;code&gt;type&lt;/code&gt; ，该类型是 &lt;code&gt;T&lt;/code&gt; 指向的类型，或者，如果 &lt;code&gt;T&lt;/code&gt; 不是指针，则 &lt;code&gt;type&lt;/code&gt; 与 &lt;code&gt;T&lt;/code&gt; 相同。</target>
        </trans-unit>
        <trans-unit id="cb08dea25102c2fb47a408b0b5a807c0f5af5c70" translate="yes" xml:space="preserve">
          <source>Provides the nested type &lt;code&gt;type&lt;/code&gt;, which is a &lt;a href=&quot;../named_req/trivialtype&quot;&gt;trivial&lt;/a&gt;&lt;a href=&quot;../named_req/standardlayouttype&quot;&gt;standard-layout&lt;/a&gt; type of a size and alignment suitable for use as uninitialized storage for an object of any of the types listed in &lt;code&gt;Types&lt;/code&gt;. The size of the storage is at least &lt;code&gt;Len&lt;/code&gt;. &lt;code&gt;std::aligned_union&lt;/code&gt; also determines the strictest (largest) alignment requirement among all &lt;code&gt;Types&lt;/code&gt; and makes it available as the constant &lt;code&gt;alignment_value&lt;/code&gt;.</source>
          <target state="translated">提供嵌套的类型 &lt;code&gt;type&lt;/code&gt; ，这是一种&lt;a href=&quot;../named_req/trivialtype&quot;&gt;普通的&lt;/a&gt;&lt;a href=&quot;../named_req/standardlayouttype&quot;&gt;标准布局&lt;/a&gt;类型，其大小和对齐方式适合用作 &lt;code&gt;Types&lt;/code&gt; 中列出的任何类型的对象的未初始化存储。存储空间的大小至少为 &lt;code&gt;Len&lt;/code&gt; 。 &lt;code&gt;std::aligned_union&lt;/code&gt; 还可以确定所有 &lt;code&gt;Types&lt;/code&gt; 最严格（最大）的对齐要求，并将其用作常量 &lt;code&gt;alignment_value&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="47d0e9165817dd1babf43392a7c8df6a74c0bdaa" translate="yes" xml:space="preserve">
          <source>Provides the nested type &lt;code&gt;type&lt;/code&gt;, which is a &lt;a href=&quot;../named_req/trivialtype&quot;&gt;trivial&lt;/a&gt;&lt;a href=&quot;../named_req/standardlayouttype&quot;&gt;standard-layout&lt;/a&gt; type suitable for use as uninitialized storage for any object whose size is at most &lt;code&gt;Len&lt;/code&gt; and whose &lt;a href=&quot;../language/objects#Alignment&quot;&gt;alignment requirement&lt;/a&gt; is a divisor of &lt;code&gt;Align&lt;/code&gt;.</source>
          <target state="translated">提供嵌套类型 &lt;code&gt;type&lt;/code&gt; ，这是一个&lt;a href=&quot;../named_req/trivialtype&quot;&gt;普通的&lt;/a&gt;&lt;a href=&quot;../named_req/standardlayouttype&quot;&gt;标准布局&lt;/a&gt;类型，适用于任何大小最大为 &lt;code&gt;Len&lt;/code&gt; 且&lt;a href=&quot;../language/objects#Alignment&quot;&gt;对齐要求&lt;/a&gt;为 &lt;code&gt;Align&lt;/code&gt; 除数的对象的未初始化存储。</target>
        </trans-unit>
        <trans-unit id="50ed5f8f2a50a6e52a45fc4e2eda4b05b7541ba3" translate="yes" xml:space="preserve">
          <source>Pseudo-random integral value between &lt;code&gt;​0​&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;rand_max&quot;&gt;RAND_MAX&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">伪随机之间的积分值 &lt;code&gt;​0​&lt;/code&gt; 和 &lt;code&gt;&lt;a href=&quot;rand_max&quot;&gt;RAND_MAX&lt;/a&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="ec5a7109434fde15be7042621fb38dd5bd8bc899" translate="yes" xml:space="preserve">
          <source>Pseudo-random number generation</source>
          <target state="translated">伪随机数生成</target>
        </trans-unit>
        <trans-unit id="6b7ccd93599e991d1acbed07dff9f25d05ef1e0a" translate="yes" xml:space="preserve">
          <source>Public inheritance</source>
          <target state="translated">公共继承</target>
        </trans-unit>
        <trans-unit id="b444db0546e692b8faecb6c665a9df7b8d3978c2" translate="yes" xml:space="preserve">
          <source>Public inheritance models the subtyping relationship of object-oriented programming: the derived class object IS-A base class object. References and pointers to a derived object are expected to be usable by any code that expects references or pointers to any of its public bases (see &lt;a href=&quot;https://en.wikipedia.org/wiki/Liskov_substitution_principle&quot;&gt;LSP&lt;/a&gt;) or, in &lt;a href=&quot;https://en.wikipedia.org/wiki/Design_by_contract&quot;&gt;DbC&lt;/a&gt; terms, a derived class should maintain class invariants of its public bases, should not strengthen any precondition or weaken any postcondition of a member function it &lt;a href=&quot;virtual&quot;&gt;overrides&lt;/a&gt;.</source>
          <target state="translated">公共继承模型化了面向对象编程的子类型关系：派生类对象IS-A基类对象。期望任何指向其公共基础的引用或指针的代码都可以使用对派生对象的引用和指针（请参见&lt;a href=&quot;https://en.wikipedia.org/wiki/Liskov_substitution_principle&quot;&gt;LSP&lt;/a&gt;），或者用&lt;a href=&quot;https://en.wikipedia.org/wiki/Design_by_contract&quot;&gt;DbC&lt;/a&gt;术语，派生类应维护其公共基础的类不变式，而不应增强它&lt;a href=&quot;virtual&quot;&gt;覆盖&lt;/a&gt;的成员函数的任何前提或削弱它的任何后置条件。</target>
        </trans-unit>
        <trans-unit id="615d2f2503c727f65242099efd876bcbe3bbd031" translate="yes" xml:space="preserve">
          <source>Public member access</source>
          <target state="translated">公众成员访问</target>
        </trans-unit>
        <trans-unit id="a7028dbf031c0a3ff5632d06bd63bfafd7aef31d" translate="yes" xml:space="preserve">
          <source>Public member functions</source>
          <target state="translated">公共成员职能</target>
        </trans-unit>
        <trans-unit id="cd392bda3dab3678a454d8bc7758de84525c8077" translate="yes" xml:space="preserve">
          <source>Public members form a part of the public interface of the class (other parts of the public interface are the non-member functions found by &lt;a href=&quot;adl&quot;&gt;ADL&lt;/a&gt;).</source>
          <target state="translated">公共成员构成该类的公共接口的一部分（公共接口的其他部分是&lt;a href=&quot;adl&quot;&gt;ADL&lt;/a&gt;找到的非成员函数）。</target>
        </trans-unit>
        <trans-unit id="654ddca2dc5ccfa3ac68fe766682e26bc3023948" translate="yes" xml:space="preserve">
          <source>Publicly and unambiguously derived from a specialization of &lt;code&gt;intergral_constant&lt;/code&gt;, known as its</source>
          <target state="translated">公开明确地源自 &lt;code&gt;intergral_constant&lt;/code&gt; 的专业化，即</target>
        </trans-unit>
        <trans-unit id="55bf0508e5a9bb3ca49d0a9b45f47445909e6331" translate="yes" xml:space="preserve">
          <source>Publicly inheriting from &lt;code&gt;std::enable_shared_from_this&amp;lt;T&amp;gt;&lt;/code&gt; provides the type &lt;code&gt;T&lt;/code&gt; with a member function &lt;code&gt;shared_from_this&lt;/code&gt;. If an object &lt;code&gt;t&lt;/code&gt; of type &lt;code&gt;T&lt;/code&gt; is managed by a &lt;code&gt;&lt;a href=&quot;shared_ptr&quot;&gt;std::shared_ptr&lt;/a&gt;&amp;lt;T&amp;gt;&lt;/code&gt; named &lt;code&gt;pt&lt;/code&gt;, then calling &lt;code&gt;T::shared_from_this&lt;/code&gt; will return a new &lt;code&gt;&lt;a href=&quot;shared_ptr&quot;&gt;std::shared_ptr&lt;/a&gt;&amp;lt;T&amp;gt;&lt;/code&gt; that shares ownership of &lt;code&gt;t&lt;/code&gt; with &lt;code&gt;pt&lt;/code&gt;.</source>
          <target state="translated">从 &lt;code&gt;std::enable_shared_from_this&amp;lt;T&amp;gt;&lt;/code&gt; 公开继承为类型 &lt;code&gt;T&lt;/code&gt; 提供成员函数 &lt;code&gt;shared_from_this&lt;/code&gt; 。如果类型 &lt;code&gt;T&lt;/code&gt; 的对象 &lt;code&gt;t&lt;/code&gt; 由名为 &lt;code&gt;pt&lt;/code&gt; 的 &lt;code&gt;&lt;a href=&quot;shared_ptr&quot;&gt;std::shared_ptr&lt;/a&gt;&amp;lt;T&amp;gt;&lt;/code&gt; &amp;lt;T&amp;gt;管理，则调用 &lt;code&gt;T::shared_from_this&lt;/code&gt; 将返回一个新的 &lt;code&gt;&lt;a href=&quot;shared_ptr&quot;&gt;std::shared_ptr&lt;/a&gt;&amp;lt;T&amp;gt;&lt;/code&gt; &amp;lt;T&amp;gt;与 &lt;code&gt;pt&lt;/code&gt; 共享 &lt;code&gt;t&lt;/code&gt; 的所有权。</target>
        </trans-unit>
        <trans-unit id="1c6eeb93fdd61d8b7161c26132c39da743f2a407" translate="yes" xml:space="preserve">
          <source>Pure output-only iterator is allowed to declare its &lt;code&gt;iterator_traits&amp;lt;X&amp;gt;::value_type&lt;/code&gt;, &lt;code&gt;iterator_traits&amp;lt;X&amp;gt;::difference_type&lt;/code&gt;, &lt;code&gt;iterator_traits&amp;lt;X&amp;gt;::pointer&lt;/code&gt;, and &lt;code&gt;iterator_traits&amp;lt;X&amp;gt;::reference&lt;/code&gt; to be &lt;code&gt;void&lt;/code&gt; (and iterators such as &lt;code&gt;&lt;a href=&quot;../iterator/back_insert_iterator&quot;&gt;std::back_insert_iterator&lt;/a&gt;&lt;/code&gt; do just that).</source>
          <target state="translated">允许纯纯的仅输出迭代器将其 &lt;code&gt;iterator_traits&amp;lt;X&amp;gt;::value_type&lt;/code&gt; ， &lt;code&gt;iterator_traits&amp;lt;X&amp;gt;::difference_type&lt;/code&gt; ， &lt;code&gt;iterator_traits&amp;lt;X&amp;gt;::pointer&lt;/code&gt; 和 &lt;code&gt;iterator_traits&amp;lt;X&amp;gt;::reference&lt;/code&gt; 为 &lt;code&gt;void&lt;/code&gt; （并且迭代器如 &lt;code&gt;&lt;a href=&quot;../iterator/back_insert_iterator&quot;&gt;std::back_insert_iterator&lt;/a&gt;&lt;/code&gt; 就是这样做的。</target>
        </trans-unit>
        <trans-unit id="51ba3c120a77197d7ba891c9f4a54a8198c83fe1" translate="yes" xml:space="preserve">
          <source>Pure virtual destructors</source>
          <target state="translated">纯虚拟毁灭者</target>
        </trans-unit>
        <trans-unit id="8d69e31ae7a393f0b987a94f34bdc5cc5d2cd714" translate="yes" xml:space="preserve">
          <source>Pushes a new element on top of the stack. The element is constructed in-place, i.e. no copy or move operations are performed. The constructor of the element is called with exactly the same arguments as supplied to the function.</source>
          <target state="translated">将一个新元素推到堆栈顶部。元素是在原地构建的,即不进行复制或移动操作。元素的构造函数被调用,其参数与提供给函数的参数完全相同。</target>
        </trans-unit>
        <trans-unit id="32ad47cd1f435b5d3ef247850cbb8ecd20790dad" translate="yes" xml:space="preserve">
          <source>Pushes a new element to the end of the queue. The element is constructed in-place, i.e. no copy or move operations are performed. The constructor of the element is called with exactly the same arguments as supplied to the function.</source>
          <target state="translated">将一个新元素推送到队列的末端。元素是在原地构建的,即不进行复制或移动操作。元素的构造函数被调用,其参数与提供给函数的参数完全相同。</target>
        </trans-unit>
        <trans-unit id="a24624cfe16d4e33a8abb0dc694cab16642e8f70" translate="yes" xml:space="preserve">
          <source>Pushes a new element to the priority queue. The element is constructed in-place, i.e. no copy or move operations are performed. The constructor of the element is called with exactly the same arguments as supplied to the function.</source>
          <target state="translated">将一个新元素推送到优先级队列中。元素是在原地构建的,即不进行复制或移动操作。元素的构造函数被调用,其参数与提供给函数的参数完全相同。</target>
        </trans-unit>
        <trans-unit id="a2797d021ee45ddab7ed7efda6ca975b7476cac0" translate="yes" xml:space="preserve">
          <source>Pushes the given element &lt;code&gt;value&lt;/code&gt; to the end of the queue.</source>
          <target state="translated">将给定的元素 &lt;code&gt;value&lt;/code&gt; 推送到队列的末尾。</target>
        </trans-unit>
        <trans-unit id="739008a7b6bb5f27e725477db8d619cfb571322e" translate="yes" xml:space="preserve">
          <source>Pushes the given element &lt;code&gt;value&lt;/code&gt; to the priority queue.</source>
          <target state="translated">将给定的元素 &lt;code&gt;value&lt;/code&gt; 推送到优先级队列。</target>
        </trans-unit>
        <trans-unit id="6a39fb5c76f9ce806ee0dbb38b704d1ddc0bf7a7" translate="yes" xml:space="preserve">
          <source>Pushes the given element &lt;code&gt;value&lt;/code&gt; to the top of the stack.</source>
          <target state="translated">将给定的元素 &lt;code&gt;value&lt;/code&gt; 入堆栈的顶部。</target>
        </trans-unit>
        <trans-unit id="4511d07323783a484fe71d8458998eea79646348" translate="yes" xml:space="preserve">
          <source>Put area</source>
          <target state="translated">放置区域</target>
        </trans-unit>
        <trans-unit id="89e6b0d4d6d270d13ba6d6bf949d3b4053be2912" translate="yes" xml:space="preserve">
          <source>Putback</source>
          <target state="translated">Putback</target>
        </trans-unit>
        <trans-unit id="0b344af530974663597c633484dda4054459a9d7" translate="yes" xml:space="preserve">
          <source>Puts back a character back to the get area.</source>
          <target state="translated">将一个角色放回得到区域。</target>
        </trans-unit>
        <trans-unit id="1a0122429b6ec04f9e9e13a6faf83a9aa7edab9b" translate="yes" xml:space="preserve">
          <source>Puts the character &lt;code&gt;ch&lt;/code&gt; back to the input stream so the next extracted character will be &lt;code&gt;ch&lt;/code&gt;.</source>
          <target state="translated">将字符 &lt;code&gt;ch&lt;/code&gt; 放回输入流，因此下一个提取的字符将为 &lt;code&gt;ch&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="4bc8ef6e14d1a18556b0d1717f1d7deb251217b6" translate="yes" xml:space="preserve">
          <source>Qualification conversions</source>
          <target state="translated">资格转换</target>
        </trans-unit>
        <trans-unit id="75d473df538a38876caa1d19238d65ed85d72d56" translate="yes" xml:space="preserve">
          <source>Qualified &lt;a href=&quot;lookup&quot;&gt;name lookup&lt;/a&gt; that examines the enclosing namespace will include the names from the inline namespaces even if the same name is present in the enclosing namespace.</source>
          <target state="translated">检查封闭名称空间的合格&lt;a href=&quot;lookup&quot;&gt;名称查找&lt;/a&gt;将包括内联名称空间中的名称，即使封闭名称空间中存在相同的名称也是如此。</target>
        </trans-unit>
        <trans-unit id="a62cc48bfab9d85ef11cfa0e0f46014722f2cb48" translate="yes" xml:space="preserve">
          <source>Qualified identifiers</source>
          <target state="translated">有条件的标识符</target>
        </trans-unit>
        <trans-unit id="592d7c648032dfee328456d2dc9abd0834df60d5" translate="yes" xml:space="preserve">
          <source>Qualified lookup within the scope of a &lt;a href=&quot;namespace&quot;&gt;namespace&lt;/a&gt;&lt;code&gt;N&lt;/code&gt; first considers all declarations that are located in &lt;code&gt;N&lt;/code&gt; and all declarations that are located in the &lt;a href=&quot;namespace#Inline_namespaces&quot;&gt;inline namespace members&lt;/a&gt; of &lt;code&gt;N&lt;/code&gt; (and, transitively, in their inline namespace members). If there are no declarations in that set then it considers declarations in all namespaces named by &lt;a href=&quot;namespace#Using-directives&quot;&gt;using-directives&lt;/a&gt; found in &lt;code&gt;N&lt;/code&gt; and in all transitive inline namespace members of &lt;code&gt;N&lt;/code&gt;. The rules are applied recursively:</source>
          <target state="translated">一的范围内的合格查找&lt;a href=&quot;namespace&quot;&gt;命名空间&lt;/a&gt; &lt;code&gt;N&lt;/code&gt; 第一认为位于所有声明 &lt;code&gt;N&lt;/code&gt; 并且位于所有声明&lt;a href=&quot;namespace#Inline_namespaces&quot;&gt;内联的命名空间的成员&lt;/a&gt;的 &lt;code&gt;N&lt;/code&gt; （以及传递地，在它们的内联的命名空间的成员）。如果该集合中没有声明，则它将考虑所有在 &lt;code&gt;N&lt;/code&gt; 中&lt;a href=&quot;namespace#Using-directives&quot;&gt;使用using指令&lt;/a&gt;命名的命名空间中以及 &lt;code&gt;N&lt;/code&gt; 的所有传递内联命名空间成员中的声明。规则是递归应用的：</target>
        </trans-unit>
        <trans-unit id="267803cf0627299d78cd6cd0aa7095dc839ea1f8" translate="yes" xml:space="preserve">
          <source>Qualified name lookup</source>
          <target state="translated">限定名称查询</target>
        </trans-unit>
        <trans-unit id="f4d12cab30981cea4718b91f6b39368f75eba495" translate="yes" xml:space="preserve">
          <source>Qualified name lookup can be used to access a class member that is hidden by a nested declaration or by a derived class. A call to a qualified member function is never virtual.</source>
          <target state="translated">限定名查询可以用来访问被嵌套声明或派生类所隐藏的类成员。对限定名成员函数的调用绝不是虚拟的。</target>
        </trans-unit>
        <trans-unit id="2644b7d942f174a4bbf0bc8675c1badf9352393e" translate="yes" xml:space="preserve">
          <source>Queries</source>
          <target state="translated">Queries</target>
        </trans-unit>
        <trans-unit id="b2d47fefb72fdf3ae19050bffefa3a003d28a51e" translate="yes" xml:space="preserve">
          <source>Queries alignment requirements of a type.</source>
          <target state="translated">查询一个类型的对齐要求。</target>
        </trans-unit>
        <trans-unit id="81b48ff136746bb560fd6f4129c95da81d912900" translate="yes" xml:space="preserve">
          <source>Queries information of a type.</source>
          <target state="translated">查询某一类型的信息。</target>
        </trans-unit>
        <trans-unit id="16bebbd20f166f2a5ea26c1b0af5de0e236903be" translate="yes" xml:space="preserve">
          <source>Queries size of the object or type.</source>
          <target state="translated">查询对象或类型的大小。</target>
        </trans-unit>
        <trans-unit id="79b86f09354c28013748dc8b4bb0fd4913044f7d" translate="yes" xml:space="preserve">
          <source>Queries the contained type.</source>
          <target state="translated">查询包含的类型。</target>
        </trans-unit>
        <trans-unit id="f838f0aa0677c4b435d276c95b86e63e13fe9d73" translate="yes" xml:space="preserve">
          <source>Queries the number of elements in a &lt;a href=&quot;parameter_pack&quot;&gt;parameter pack&lt;/a&gt;.</source>
          <target state="translated">查询&lt;a href=&quot;parameter_pack&quot;&gt;参数包&lt;/a&gt;中元素的数量。</target>
        </trans-unit>
        <trans-unit id="c2fd55e9aeddc47d74762a33cb4d7b4f5599dad1" translate="yes" xml:space="preserve">
          <source>Queries the number of elements in a parameter pack.</source>
          <target state="translated">查询参数包中的元素数量。</target>
        </trans-unit>
        <trans-unit id="06576556d1ad802f247cad11ae748be47b70cd9c" translate="yes" xml:space="preserve">
          <source>R</source>
          <target state="translated">R</target>
        </trans-unit>
        <trans-unit id="ae267208ff2f424566cc85f48f343c3a6db268b1" translate="yes" xml:space="preserve">
          <source>RAII</source>
          <target state="translated">RAII</target>
        </trans-unit>
        <trans-unit id="39b3a26be84a95796b9a96ea22160902d9481c49" translate="yes" xml:space="preserve">
          <source>RAII can be summarized as follows:</source>
          <target state="translated">RAII可以总结如下:</target>
        </trans-unit>
        <trans-unit id="56c09d4f221d97a7d6b2fd44ae8a947e5e6c38d2" translate="yes" xml:space="preserve">
          <source>RAII does not apply to the management of the resources that are not acquired before use: CPU time, cores, and cache capacity, entropy pool capacity, network bandwidth, electric power consumption, stack memory.</source>
          <target state="translated">RAII不适用于使用前未获取的资源的管理。CPU时间、核心和缓存容量、熵池容量、网络带宽、电力消耗、堆栈内存。</target>
        </trans-unit>
        <trans-unit id="61f03399664d74f13f34bbbf23c4e901cda3ffc9" translate="yes" xml:space="preserve">
          <source>RAII guarantees that the resource is available to any function that may access the object (resource availability is a &lt;a href=&quot;https://en.wikipedia.org/wiki/Class_invariant&quot;&gt;class invariant&lt;/a&gt;, eliminating redundant runtime tests). It also guarantees that all resources are released when the lifetime of their controlling object ends, in reverse order of acquisition. Likewise, if resource acquisition fails (the constructor exits with an exception), all resources acquired by every fully-constructed member and base subobject are released in reverse order of initialization. This leverages the core language features (&lt;a href=&quot;lifetime&quot;&gt;object lifetime&lt;/a&gt;, &lt;a href=&quot;statements&quot;&gt;scope exit&lt;/a&gt;, &lt;a href=&quot;constructor#Initialization_order&quot;&gt;order of initialization&lt;/a&gt; and &lt;a href=&quot;throw#Stack_unwinding&quot;&gt;stack unwinding&lt;/a&gt;) to eliminate resource leaks and guarantee exception safety. Another name for this technique is</source>
          <target state="translated">RAII保证资源可用于可能访问该对象的任何函数（资源可用性是&lt;a href=&quot;https://en.wikipedia.org/wiki/Class_invariant&quot;&gt;类不变的&lt;/a&gt;，从而消除了冗余的运行时测试）。它还可以确保在其控制对象的生存期结束时以获取的相反顺序释放所有资源。同样，如果资源获取失败（构造函数异常退出），则每个完全构造的成员和基础子对象获取的所有资源将以相反的初始化顺序释放。这利用了核心语言功能（&lt;a href=&quot;lifetime&quot;&gt;对象生存期&lt;/a&gt;，&lt;a href=&quot;statements&quot;&gt;范围退出&lt;/a&gt;，&lt;a href=&quot;constructor#Initialization_order&quot;&gt;初始化顺序&lt;/a&gt;和&lt;a href=&quot;throw#Stack_unwinding&quot;&gt;堆栈展开）&lt;/a&gt;），以消除资源泄漏并确保异常安全。这种技术的另一个名字是</target>
        </trans-unit>
        <trans-unit id="f3be8941500d349cc7eb1cfaec50ff047fdaddc9" translate="yes" xml:space="preserve">
          <source>RAII in Stroustrup's C++ FAQ</source>
          <target state="translated">在Stroustrup的C++FAQ中的RAII。</target>
        </trans-unit>
        <trans-unit id="7cd72c18ecc72527ffc7db119290d9fafdfaada3" translate="yes" xml:space="preserve">
          <source>RAND_MAX</source>
          <target state="translated">RAND_MAX</target>
        </trans-unit>
        <trans-unit id="df8e5cb1fbb906f15052798c446df0ed08dfeb91" translate="yes" xml:space="preserve">
          <source>RTTI</source>
          <target state="translated">RTTI</target>
        </trans-unit>
        <trans-unit id="6c995967dddb04d30accdab7790a588d559ea696" translate="yes" xml:space="preserve">
          <source>RVO</source>
          <target state="translated">RVO</target>
        </trans-unit>
        <trans-unit id="ab4c72ff208fddd834e7f607e86972514a6c3972" translate="yes" xml:space="preserve">
          <source>Raises a value to a power.</source>
          <target state="translated">将一个值提高到一个幂。</target>
        </trans-unit>
        <trans-unit id="29d31f8e86794328666fa65d8666f3d844922e24" translate="yes" xml:space="preserve">
          <source>Random Number Generation</source>
          <target state="translated">随机数生成</target>
        </trans-unit>
        <trans-unit id="c88e9c9e69807e65fd9437d5099a054ec28a66fd" translate="yes" xml:space="preserve">
          <source>Random access - constant O(1)</source>
          <target state="translated">随机访问--常数O(1)</target>
        </trans-unit>
        <trans-unit id="4ad416a69fe05a2ce31042fa3deef41deb37dd9d" translate="yes" xml:space="preserve">
          <source>Random number distributions</source>
          <target state="translated">随机数分布</target>
        </trans-unit>
        <trans-unit id="378c21c2a957349e6aa58385e51da05f8befba3b" translate="yes" xml:space="preserve">
          <source>Random number distributions (e.g. &lt;a href=&quot;random/uniform_int_distribution&quot;&gt;uniform&lt;/a&gt;, &lt;a href=&quot;random/normal_distribution&quot;&gt;normal&lt;/a&gt;, or &lt;a href=&quot;random/poisson_distribution&quot;&gt;poisson distributions&lt;/a&gt;) which convert the output of URBGs into various statistical distributions</source>
          <target state="translated">随机数分布（例如&lt;a href=&quot;random/uniform_int_distribution&quot;&gt;均匀&lt;/a&gt;分布，&lt;a href=&quot;random/normal_distribution&quot;&gt;正态分布&lt;/a&gt;或&lt;a href=&quot;random/poisson_distribution&quot;&gt;泊松分布&lt;/a&gt;）可将URBG的输出转换为各种统计分布</target>
        </trans-unit>
        <trans-unit id="a42e01ea37bedde658e89fbc4618bd2c75fe5035" translate="yes" xml:space="preserve">
          <source>Random number distributions satisfy &lt;a href=&quot;../named_req/randomnumberdistribution&quot;&gt;RandomNumberDistribution&lt;/a&gt;.</source>
          <target state="translated">随机数分布满足&lt;a href=&quot;../named_req/randomnumberdistribution&quot;&gt;RandomNumberDistribution&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="6c4deabc20a0cd2da58a1bcb397b4023398a8f17" translate="yes" xml:space="preserve">
          <source>Random number engine adaptors</source>
          <target state="translated">随机数引擎适配器</target>
        </trans-unit>
        <trans-unit id="5003089c797b569321c47e658b07eb8069433f38" translate="yes" xml:space="preserve">
          <source>Random number engine adaptors generate pseudo-random numbers using another random number engine as entropy source. They are generally used to alter the spectral characteristics of the underlying engine.</source>
          <target state="translated">随机数引擎适配器使用另一个随机数引擎作为熵源生成伪随机数。它们通常用于改变底层引擎的频谱特性。</target>
        </trans-unit>
        <trans-unit id="60bda0a6389ce2eaeecc4f9c29006ad31244762b" translate="yes" xml:space="preserve">
          <source>Random number engines</source>
          <target state="translated">随机数引擎</target>
        </trans-unit>
        <trans-unit id="75bb66fc02b5262b9475367669f1ccdc2d430469" translate="yes" xml:space="preserve">
          <source>Random number engines generate pseudo-random numbers using seed data as entropy source. Several different classes of pseudo-random number generation algorithms are implemented as templates that can be customized.</source>
          <target state="translated">随机数引擎使用种子数据作为熵源生成伪随机数。几种不同类别的伪随机数生成算法都是作为模板实现的,可以自定义。</target>
        </trans-unit>
        <trans-unit id="dff3a0335dcc982ad6d70cdca46532b5785f3f4c" translate="yes" xml:space="preserve">
          <source>Random number generators and distributions</source>
          <target state="translated">随机数生成器和分布</target>
        </trans-unit>
        <trans-unit id="8873b2df9a109b83098f322bb00889d4946e2a8e" translate="yes" xml:space="preserve">
          <source>RandomAccessIterator</source>
          <target state="translated">RandomAccessIterator</target>
        </trans-unit>
        <trans-unit id="ec0c4b9e4435e53cdb0cbbec4115460a0f22a488" translate="yes" xml:space="preserve">
          <source>RandomAccessRange</source>
          <target state="translated">RandomAccessRange</target>
        </trans-unit>
        <trans-unit id="82916f1dbbdcee145d460824c8df630bb4c08f45" translate="yes" xml:space="preserve">
          <source>RandomNumberDistribution</source>
          <target state="translated">RandomNumberDistribution</target>
        </trans-unit>
        <trans-unit id="71c088d031705978625f855c9cd4d2d9c6ba384d" translate="yes" xml:space="preserve">
          <source>RandomNumberEngine</source>
          <target state="translated">RandomNumberEngine</target>
        </trans-unit>
        <trans-unit id="bdce701db10f2a6a990b71db9d3710fecd1f6d05" translate="yes" xml:space="preserve">
          <source>RandomNumberEngineAdaptor</source>
          <target state="translated">RandomNumberEngineAdaptor</target>
        </trans-unit>
        <trans-unit id="a16c5bbe4bf996740f257aa1e81bd57e4c52c8dd" translate="yes" xml:space="preserve">
          <source>Range</source>
          <target state="translated">Range</target>
        </trans-unit>
        <trans-unit id="d7c3ef6248b14ebb84f8d7b59e2d4c7f6b2c11f7" translate="yes" xml:space="preserve">
          <source>Range access</source>
          <target state="translated">范围访问</target>
        </trans-unit>
        <trans-unit id="7f4a03451da3a3b22ae74a67a84165f6da9ef0e3" translate="yes" xml:space="preserve">
          <source>Range access, primitives, requirements, utilities and adaptors</source>
          <target state="translated">范围准入、基元、要求、公用事业和适配器。</target>
        </trans-unit>
        <trans-unit id="9f1c559cd0d7b522cdef02a4c051dde257b73e76" translate="yes" xml:space="preserve">
          <source>Range adaptors</source>
          <target state="translated">范围适配器</target>
        </trans-unit>
        <trans-unit id="4062f62dc83456f28bcc0a19f88a62f67ef77d78" translate="yes" xml:space="preserve">
          <source>Range adaptors accept &lt;a href=&quot;ranges/viewablerange&quot;&gt;&lt;code&gt;ViewableRange&lt;/code&gt;&lt;/a&gt; as their first arguments and returns a &lt;a href=&quot;ranges/view&quot;&gt;&lt;code&gt;View&lt;/code&gt;&lt;/a&gt;. They can also be chained using the pipe operator: if &lt;code&gt;C&lt;/code&gt; and &lt;code&gt;D&lt;/code&gt; are a range adaptors and &lt;code&gt;R&lt;/code&gt; is a &lt;a href=&quot;ranges/viewablerange&quot;&gt;&lt;code&gt;ViewableRange&lt;/code&gt;&lt;/a&gt;, these two expressions are equivalent:</source>
          <target state="translated">范围适配器接受&lt;a href=&quot;ranges/viewablerange&quot;&gt; &lt;code&gt;ViewableRange&lt;/code&gt; &lt;/a&gt;作为其第一个参数，并返回&lt;a href=&quot;ranges/view&quot;&gt; &lt;code&gt;View&lt;/code&gt; &lt;/a&gt;。也可以使用管道运算符将它们链接起来：如果 &lt;code&gt;C&lt;/code&gt; 和 &lt;code&gt;D&lt;/code&gt; 是范围适配器，而 &lt;code&gt;R&lt;/code&gt; 是&lt;a href=&quot;ranges/viewablerange&quot;&gt; &lt;code&gt;ViewableRange&lt;/code&gt; &lt;/a&gt;，则这两个表达式是等效的：</target>
        </trans-unit>
        <trans-unit id="7fe11cf73fc9809608e6634837be124f2c354a55" translate="yes" xml:space="preserve">
          <source>Range allows for a positive leap second. Two leap seconds in the same minute are not allowed (the range 0..61 was a defect introduced in C89 and corrected in C99)</source>
          <target state="translated">范围允许一个正闰秒。不允许在同一分钟内出现两个闰秒(0...61的范围是C89中引入的一个缺陷,在C99中得到纠正)</target>
        </trans-unit>
        <trans-unit id="8c5ebcfa76fa9fcb6d1c4ad738db0703d791aa99" translate="yes" xml:space="preserve">
          <source>Range concepts</source>
          <target state="translated">范围概念</target>
        </trans-unit>
        <trans-unit id="b6a2342a836fe9c8230bf65e4558f0b9e4f68cf9" translate="yes" xml:space="preserve">
          <source>Range error due to overflow</source>
          <target state="translated">溢出导致的范围错误</target>
        </trans-unit>
        <trans-unit id="de112ad2a3e15627f3e2c881b1c1bf4687ea0fa6" translate="yes" xml:space="preserve">
          <source>Range error due to underflow</source>
          <target state="translated">溢出不足导致的范围误差</target>
        </trans-unit>
        <trans-unit id="7f6207afbc5fb4f2b31854cc06b2eb7682a16127" translate="yes" xml:space="preserve">
          <source>Range factories</source>
          <target state="translated">牧场工厂</target>
        </trans-unit>
        <trans-unit id="cb49c762941ab6d144ffed832b4d945676fae7d6" translate="yes" xml:space="preserve">
          <source>Range iterators</source>
          <target state="translated">范围迭代器</target>
        </trans-unit>
        <trans-unit id="f53c2d131febb348823fab8a8a7d0f0c49482130" translate="yes" xml:space="preserve">
          <source>Range of values</source>
          <target state="translated">价值范围</target>
        </trans-unit>
        <trans-unit id="77e67487e9cb8bf2a5778f171bf816c7161b5db1" translate="yes" xml:space="preserve">
          <source>Range primitives</source>
          <target state="translated">范围基元</target>
        </trans-unit>
        <trans-unit id="206c6df2313ea7052c090a71b5f6b408c985f0d1" translate="yes" xml:space="preserve">
          <source>Range-based &lt;code&gt;for&lt;/code&gt; loop</source>
          <target state="translated">基于范围的 &lt;code&gt;for&lt;/code&gt; 循环</target>
        </trans-unit>
        <trans-unit id="86a8c0aa1d63073e207764df76d37e1df1002276" translate="yes" xml:space="preserve">
          <source>Range-based for loop</source>
          <target state="translated">基于范围的循环</target>
        </trans-unit>
        <trans-unit id="7c304ff567e27d0e3c4edcc94ff694e22315d604" translate="yes" xml:space="preserve">
          <source>Range-based for loop (since C++11)</source>
          <target state="translated">基于范围的for循环(自C++11起)</target>
        </trans-unit>
        <trans-unit id="0d5fda95e3940bc09dc1ccc22666813c0b54f73d" translate="yes" xml:space="preserve">
          <source>Ranges</source>
          <target state="translated">Ranges</target>
        </trans-unit>
        <trans-unit id="da214618f8e4cf6dfdea2a4032f3997846623733" translate="yes" xml:space="preserve">
          <source>Ranges TS</source>
          <target state="translated">幅度TS</target>
        </trans-unit>
        <trans-unit id="76cf69c326b709b413539c7865cb01eae1cc9a1a" translate="yes" xml:space="preserve">
          <source>Ranges library</source>
          <target state="translated">量程库</target>
        </trans-unit>
        <trans-unit id="ffb0867df897a205167c9d668210420f065af48a" translate="yes" xml:space="preserve">
          <source>Ranges library (C++20)</source>
          <target state="translated">Ranges库(C++20)</target>
        </trans-unit>
        <trans-unit id="3adf7ca6e2d92a42ec0e12fe21ca6072c22e8dbc" translate="yes" xml:space="preserve">
          <source>Ranking of implicit conversion sequences</source>
          <target state="translated">隐性转换序列的排序</target>
        </trans-unit>
        <trans-unit id="5bbec7dc583ab121b0ee3263e2680e6770efefef" translate="yes" xml:space="preserve">
          <source>Rarely overloaded operators</source>
          <target state="translated">罕见的过载操作者</target>
        </trans-unit>
        <trans-unit id="f1732969097813a9d981ac5899ac77e45adac224" translate="yes" xml:space="preserve">
          <source>Rationale for &lt;code&gt;std::uncaught_exceptions&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;std::uncaught_exceptions&lt;/code&gt; 原理</target>
        </trans-unit>
        <trans-unit id="4a3abccd82276b992cc6481563903c3d1a3ba8da" translate="yes" xml:space="preserve">
          <source>Raw pointer that represents the same address as &lt;code&gt;p&lt;/code&gt; does.</source>
          <target state="translated">表示与 &lt;code&gt;p&lt;/code&gt; 相同地址的原始指针。</target>
        </trans-unit>
        <trans-unit id="ce9a4a772a88d49b6a63f78245488ac96b3f98ab" translate="yes" xml:space="preserve">
          <source>Raw string literals</source>
          <target state="translated">原始字符串字数</target>
        </trans-unit>
        <trans-unit id="7675afc29f19cdcd6280287a1701c921c58e4602" translate="yes" xml:space="preserve">
          <source>Re-enabling shared_from_this</source>
          <target state="translated">重新启用shared_from_this</target>
        </trans-unit>
        <trans-unit id="ac2ce76a0d7a849831382bd4993f066da6056c88" translate="yes" xml:space="preserve">
          <source>Reaching the end of a catch clause for a function-try-block on a destructor also automatically rethrows the current exception as if by &lt;code&gt;throw;&lt;/code&gt;, but a return statement is allowed.</source>
          <target state="translated">到达析构函数上的try-block的catch子句的结尾时，也会自动抛出当前异常，就像通过 &lt;code&gt;throw;&lt;/code&gt; ，但允许使用return语句。</target>
        </trans-unit>
        <trans-unit id="2c53f5957c4edf865a1a2ec4f7cc355fce0d7043" translate="yes" xml:space="preserve">
          <source>Read from start</source>
          <target state="translated">从头读起</target>
        </trans-unit>
        <trans-unit id="fd7967994dfc943a9d75a158de2c9b6edcab50b2" translate="yes" xml:space="preserve">
          <source>Read-only file system</source>
          <target state="translated">只读文件系统</target>
        </trans-unit>
        <trans-unit id="2fb35a181814bf32ad3e2a2300c2bd3a4815ec2f" translate="yes" xml:space="preserve">
          <source>Read-only methods never invalidate iterators or references. Methods which modify the contents of a container may invalidate iterators and/or references, as summarized in this table.</source>
          <target state="translated">只读方法永远不会使迭代器或引用无效。修改容器内容的方法可能会使迭代器和/或引用无效,本表对此进行了总结。</target>
        </trans-unit>
        <trans-unit id="06af0a4deb4cddc8d563087bcb0d08a78915bbd1" translate="yes" xml:space="preserve">
          <source>Readable</source>
          <target state="translated">Readable</target>
        </trans-unit>
        <trans-unit id="1b1cb8761aae66ff9f85a2060c7e62fc247902a7" translate="yes" xml:space="preserve">
          <source>Reads &lt;code&gt;&lt;a href=&quot;../c&quot;&gt;stdin&lt;/a&gt;&lt;/code&gt; into given character string until a newline character is found or end-of-file occurs.</source>
          <target state="translated">将 &lt;code&gt;&lt;a href=&quot;../c&quot;&gt;stdin&lt;/a&gt;&lt;/code&gt; 读取到给定的字符串中，直到找到换行符或出现文件结尾。</target>
        </trans-unit>
        <trans-unit id="f73edbbe3039f7f207f0800e0022a861d1c62d02" translate="yes" xml:space="preserve">
          <source>Reads a single character by calling &lt;code&gt;sbuf_-&amp;gt;sgetc()&lt;/code&gt; where &lt;code&gt;sbuf_&lt;/code&gt; is the stored pointer to the stream buffer.</source>
          <target state="translated">通过调用 &lt;code&gt;sbuf_-&amp;gt;sgetc()&lt;/code&gt; 读取单个字符，其中 &lt;code&gt;sbuf_&lt;/code&gt; 是存储到流缓冲区的指针。</target>
        </trans-unit>
        <trans-unit id="e51e5fe380b1ccae7d7e57a06cec95c5639a9afa" translate="yes" xml:space="preserve">
          <source>Reads a value from the underlying stream and stores it into the iterator object. If the read fails, the iterator becomes the end-of-stream iterator.</source>
          <target state="translated">从底层流中读取一个值,并将其存储到迭代器对象中。如果读取失败,迭代器就会变成流的末端迭代器。</target>
        </trans-unit>
        <trans-unit id="56a59b97cbb0a982d9686aeb31565312afe0f5f6" translate="yes" xml:space="preserve">
          <source>Reads at most &lt;code&gt;count - 1&lt;/code&gt; characters from the given file stream and stores them in the character array pointed to by &lt;code&gt;str&lt;/code&gt;. Reading stops if end-of-file occurs or a newline character is found, in which case &lt;code&gt;str&lt;/code&gt; will contain that newline character. If no errors occur, writes a null character at the position immediately after the last character written to &lt;code&gt;str&lt;/code&gt;.</source>
          <target state="translated">从给定的文件流中读取最多 &lt;code&gt;count - 1&lt;/code&gt; 字符，并将它们存储在 &lt;code&gt;str&lt;/code&gt; 指向的字符数组中。如果出现文件结尾或找到换行符，则读取停止，在这种情况下， &lt;code&gt;str&lt;/code&gt; 将包含该换行符。如果没有错误发生，则在最后一个写入 &lt;code&gt;str&lt;/code&gt; 的字符之后的位置立即写入一个空字符。</target>
        </trans-unit>
        <trans-unit id="a053a84cc889b5d3c92765d188b2591de5606290" translate="yes" xml:space="preserve">
          <source>Reads at most &lt;code&gt;count - 1&lt;/code&gt; wide characters from the given file stream and stores them in &lt;code&gt;str&lt;/code&gt;. The produced wide string is always null-terminated. Parsing stops if end-of-file occurs or a newline wide character is found, in which case &lt;code&gt;str&lt;/code&gt; will contain that wide newline character.</source>
          <target state="translated">从给定的文件流中读取最多 &lt;code&gt;count - 1&lt;/code&gt; 宽字符，并将它们存储在 &lt;code&gt;str&lt;/code&gt; 中。产生的宽字符串始终为空终止。如果出现文件末尾或找到换行符，则解析将停止，在这种情况下， &lt;code&gt;str&lt;/code&gt; 将包含该换行符。</target>
        </trans-unit>
        <trans-unit id="577d417b88723fd8d0664a0440d1fc3c6b1a5869" translate="yes" xml:space="preserve">
          <source>Reads data from the a variety of sources, interprets it according to &lt;code&gt;format&lt;/code&gt; and stores the results into given locations.</source>
          <target state="translated">从各种来源读取数据，根据 &lt;code&gt;format&lt;/code&gt; 对其进行解释，然后将结果存储到给定的位置。</target>
        </trans-unit>
        <trans-unit id="63c3f38917027942bdf2defee55f33a1a1676ada" translate="yes" xml:space="preserve">
          <source>Reads data from the a variety of sources, interprets it according to &lt;code&gt;format&lt;/code&gt; and stores the results into locations defined by &lt;code&gt;vlist&lt;/code&gt;.</source>
          <target state="translated">从各种来源读取数据，根据 &lt;code&gt;format&lt;/code&gt; 对其进行解释，然后将结果存储到 &lt;code&gt;vlist&lt;/code&gt; 定义的位置。</target>
        </trans-unit>
        <trans-unit id="27cfbcc600cedc647b7ae7ca401efa5b8aa65c15" translate="yes" xml:space="preserve">
          <source>Reads from &lt;code&gt;is&lt;/code&gt; the textual representation of &lt;code&gt;v&lt;/code&gt;'s current state, such that if that state was previously written via &lt;code&gt;os &amp;lt;&amp;lt; x&lt;/code&gt;, then &lt;code&gt;x == v&lt;/code&gt;. If &lt;code&gt;is&lt;/code&gt;'s fmtflags are not set to &lt;code&gt;ios_base::dec&lt;/code&gt;, the behavior may be undefined.</source>
          <target state="translated">从中读取 &lt;code&gt;is&lt;/code&gt; &lt;code&gt;v&lt;/code&gt; 的当前状态的文本表示形式，因此，如果该状态先前是通过 &lt;code&gt;os &amp;lt;&amp;lt; x&lt;/code&gt; 写入的，则 &lt;code&gt;x == v&lt;/code&gt; 。如果 &lt;code&gt;is&lt;/code&gt; 的fmtflags没有设置 &lt;code&gt;ios_base::dec&lt;/code&gt; ，该行为可能是不确定的。</target>
        </trans-unit>
        <trans-unit id="1105bfa2f97c0025444b1268d025ba3852fb5ff5" translate="yes" xml:space="preserve">
          <source>Reads more data into the input area.</source>
          <target state="translated">读取更多数据到输入区域。</target>
        </trans-unit>
        <trans-unit id="35c091085ddf2a849b8a391fdf7055621c82a62b" translate="yes" xml:space="preserve">
          <source>Reads one character and advances the input sequence by one character.</source>
          <target state="translated">读取一个字符,并将输入序列前进一个字符。</target>
        </trans-unit>
        <trans-unit id="23c38ea2c487abe47e92f3c69e5c258945798974" translate="yes" xml:space="preserve">
          <source>Reads one character from the input sequence.</source>
          <target state="translated">从输入序列中读取一个字符。</target>
        </trans-unit>
        <trans-unit id="6ed85e4ba2a41e6a7c2a4eb07b9f3010021d38f6" translate="yes" xml:space="preserve">
          <source>Reads the next character from &lt;code&gt;&lt;a href=&quot;../c&quot;&gt;stdin&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">从 &lt;code&gt;&lt;a href=&quot;../c&quot;&gt;stdin&lt;/a&gt;&lt;/code&gt; 读取下一个字符。</target>
        </trans-unit>
        <trans-unit id="04fa5044ec53f8a703fd7455a62c3da5684f9b3f" translate="yes" xml:space="preserve">
          <source>Reads the next character from the get area of the buffer.</source>
          <target state="translated">从缓冲区的get区域读取下一个字符。</target>
        </trans-unit>
        <trans-unit id="7fb5856ecddcc3bd86f84bd6111937e1222d9a2c" translate="yes" xml:space="preserve">
          <source>Reads the next character from the given input stream.</source>
          <target state="translated">从给定的输入流中读取下一个字符。</target>
        </trans-unit>
        <trans-unit id="4826074ff2b7b03c776ae943c9ef75a5805efa42" translate="yes" xml:space="preserve">
          <source>Reads the next wide character from &lt;code&gt;&lt;a href=&quot;../c&quot;&gt;stdin&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">从 &lt;code&gt;&lt;a href=&quot;../c&quot;&gt;stdin&lt;/a&gt;&lt;/code&gt; 读取下一个宽字符。</target>
        </trans-unit>
        <trans-unit id="a84d93c4e41037a71622e042bcd5082f7de2ea49" translate="yes" xml:space="preserve">
          <source>Reads the next wide character from the given input stream. &lt;code&gt;getwc()&lt;/code&gt; may be implemented as a macro and may evaluate &lt;code&gt;stream&lt;/code&gt; more than once.</source>
          <target state="translated">从给定的输入流中读取下一个宽字符。 &lt;code&gt;getwc()&lt;/code&gt; 可以实现为宏，并且可以多次评估 &lt;code&gt;stream&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="172e576faf926bc95477bcc5330edc5ea547d862" translate="yes" xml:space="preserve">
          <source>Reads up to &lt;code&gt;count&lt;/code&gt; objects into the array &lt;code&gt;buffer&lt;/code&gt; from the given input stream &lt;code&gt;stream&lt;/code&gt; as if by calling &lt;code&gt;&lt;a href=&quot;fgetc&quot;&gt;std::fgetc&lt;/a&gt;&lt;/code&gt;&lt;code&gt;size&lt;/code&gt; times for each object, and storing the results, in the order obtained, into the successive positions of &lt;code&gt;buffer&lt;/code&gt;, which is reinterpreted as an array of &lt;code&gt;unsigned char&lt;/code&gt;. The file position indicator for the stream is advanced by the number of characters read.</source>
          <target state="translated">最多读取 &lt;code&gt;count&lt;/code&gt; 对象到阵列 &lt;code&gt;buffer&lt;/code&gt; 从给定输入流 &lt;code&gt;stream&lt;/code&gt; ，仿佛调用 &lt;code&gt;&lt;a href=&quot;fgetc&quot;&gt;std::fgetc&lt;/a&gt;&lt;/code&gt; &lt;code&gt;size&lt;/code&gt; 倍为每个对象，并存储结果，在获得的，进入的连续位置的顺序 &lt;code&gt;buffer&lt;/code&gt; ，其被重新解释为 &lt;code&gt;unsigned char&lt;/code&gt; 数组。流的文件位置指示符以读取的字符数超前。</target>
        </trans-unit>
        <trans-unit id="e4716526bbfcb1c5d4b25028aeddc94ccd5f2fd7" translate="yes" xml:space="preserve">
          <source>Real floating-point numbers may be used with &lt;a href=&quot;operator_arithmetic&quot;&gt;arithmetic operators&lt;/a&gt; + - / * and various mathematical functions from &lt;a href=&quot;../numeric/math&quot;&gt;cmath&lt;/a&gt;. Both built-in operators and library functions may raise floating-point exceptions and set &lt;code&gt;&lt;a href=&quot;../error/errno&quot;&gt;errno&lt;/a&gt;&lt;/code&gt; as described in &lt;a href=&quot;../numeric/math/math_errhandling&quot;&gt;&lt;code&gt;math_errhandling&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">实数浮点数可与&lt;a href=&quot;operator_arithmetic&quot;&gt;算术运算符&lt;/a&gt; +-/ *和&lt;a href=&quot;../numeric/math&quot;&gt;cmath中的&lt;/a&gt;各种数学函数一起使用。内置运算符和库函数都可能引发浮点异常并按照&lt;a href=&quot;../numeric/math/math_errhandling&quot;&gt; &lt;code&gt;math_errhandling&lt;/code&gt; 中的说明&lt;/a&gt;设置 &lt;code&gt;&lt;a href=&quot;../error/errno&quot;&gt;errno&lt;/a&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="0867910adec06db4e930f4b0105a1c9dd2023a55" translate="yes" xml:space="preserve">
          <source>RealType</source>
          <target state="translated">RealType</target>
        </trans-unit>
        <trans-unit id="2f2c95bf96c3f011423d6400df0d37e5fb611fae" translate="yes" xml:space="preserve">
          <source>Reallocates the given area of memory. It must be previously allocated by &lt;code&gt;&lt;a href=&quot;malloc&quot;&gt;std::malloc()&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;calloc&quot;&gt;std::calloc()&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;std::realloc()&lt;/code&gt; and not yet freed with &lt;code&gt;&lt;a href=&quot;free&quot;&gt;std::free()&lt;/a&gt;&lt;/code&gt;, otherwise, the results are undefined.</source>
          <target state="translated">重新分配给定的内存区域。它必须事先由 &lt;code&gt;&lt;a href=&quot;malloc&quot;&gt;std::malloc()&lt;/a&gt;&lt;/code&gt; ， &lt;code&gt;&lt;a href=&quot;calloc&quot;&gt;std::calloc()&lt;/a&gt;&lt;/code&gt; 或 &lt;code&gt;std::realloc()&lt;/code&gt; 分配，并且尚未使用 &lt;code&gt;&lt;a href=&quot;free&quot;&gt;std::free()&lt;/a&gt;&lt;/code&gt; 释放，否则结果不确定。</target>
        </trans-unit>
        <trans-unit id="b6a696a9ccf543570482fbf55faf1be43572be52" translate="yes" xml:space="preserve">
          <source>Reallocations are usually costly operations in terms of performance. The &lt;code&gt;&lt;a href=&quot;vector/reserve&quot;&gt;reserve()&lt;/a&gt;&lt;/code&gt; function can be used to eliminate reallocations if the number of elements is known beforehand.</source>
          <target state="translated">就性能而言，重新分配通常是昂贵的操作。的 &lt;code&gt;&lt;a href=&quot;vector/reserve&quot;&gt;reserve()&lt;/a&gt;&lt;/code&gt; 函数可以被使用，如果元件的数目是预先已知的，以消除重新分配。</target>
        </trans-unit>
        <trans-unit id="4336931a3ff30bbc12f00f35ed60f2278fb56607" translate="yes" xml:space="preserve">
          <source>Rearranges elements such that the range &lt;code&gt;[first, middle)&lt;/code&gt; contains the sorted &lt;code&gt;middle - first&lt;/code&gt; smallest elements in the range &lt;code&gt;[first, last)&lt;/code&gt;.</source>
          <target state="translated">重新排列元素，以使范围 &lt;code&gt;[first, middle)&lt;/code&gt; 包含范围 &lt;code&gt;[first, last)&lt;/code&gt; 的排序 &lt;code&gt;middle - first&lt;/code&gt; 最小元素。</target>
        </trans-unit>
        <trans-unit id="2bac6ad11995f27faa6724f5490a285260ce0cbb" translate="yes" xml:space="preserve">
          <source>Recursive directory iterators do not follow directory symlinks by default. To enable this behavior, specify &lt;code&gt;directory_options::follow_directory_symlink&lt;/code&gt; among the &lt;code&gt;options&lt;/code&gt; option set.</source>
          <target state="translated">默认情况下，递归目录迭代器不遵循目录符号链接。要启用此行为， &lt;code&gt;directory_options::follow_directory_symlink&lt;/code&gt; 在 &lt;code&gt;options&lt;/code&gt; 选项集中指定directory_options :: follow_directory_symlink。</target>
        </trans-unit>
        <trans-unit id="8025c57614ca148f214e43807dee765ef8aac503" translate="yes" xml:space="preserve">
          <source>Recursively copy subdirectories and their content</source>
          <target state="translated">递归复制子目录及其内容。</target>
        </trans-unit>
        <trans-unit id="8dc0ab131d0de1e36a3c4bfc9ab78d9178422a2b" translate="yes" xml:space="preserve">
          <source>Reduces (&lt;a href=&quot;https://en.wikipedia.org/wiki/Fold_(higher-order_function)&quot;&gt;folds&lt;/a&gt;) a &lt;a href=&quot;parameter_pack&quot;&gt;parameter pack&lt;/a&gt; over a binary operator.</source>
          <target state="translated">在二进制运算符上减少（&lt;a href=&quot;https://en.wikipedia.org/wiki/Fold_(higher-order_function)&quot;&gt;折叠&lt;/a&gt;）&lt;a href=&quot;parameter_pack&quot;&gt;参数包&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="db1c784524e1b54011a95823026161f7c8517fe0" translate="yes" xml:space="preserve">
          <source>Reference</source>
          <target state="translated">Reference</target>
        </trans-unit>
        <trans-unit id="1f538f81d7b2e2c8d4604fe2236abd82b7939929" translate="yes" xml:space="preserve">
          <source>Reference cannot be default-initialized.</source>
          <target state="translated">引用不能被默认初始化。</target>
        </trans-unit>
        <trans-unit id="27feef4318d1a9f2d1479db178e06a1cc3b6bd88" translate="yes" xml:space="preserve">
          <source>Reference collapsing</source>
          <target state="translated">参考折叠</target>
        </trans-unit>
        <trans-unit id="7b44b65dadfdf409d2cab602ae94b0489188f130" translate="yes" xml:space="preserve">
          <source>Reference constant expression</source>
          <target state="translated">参考常数表达式</target>
        </trans-unit>
        <trans-unit id="6d6fbbd4527db8853381a9578272288f3dd5e652" translate="yes" xml:space="preserve">
          <source>Reference declaration</source>
          <target state="translated">参考声明</target>
        </trans-unit>
        <trans-unit id="41a65f69b82ff9e1b9f2da1c9556c7c69286e1f6" translate="yes" xml:space="preserve">
          <source>Reference initialization</source>
          <target state="translated">参考文献初始化</target>
        </trans-unit>
        <trans-unit id="68ce85717a9cc701a75f83c7315c20db4c210ad3" translate="yes" xml:space="preserve">
          <source>Reference initialization by conversion</source>
          <target state="translated">通过转换进行参考初始化</target>
        </trans-unit>
        <trans-unit id="e1a4bd71fe89bdef1bfdadeeabef8e213394e315" translate="yes" xml:space="preserve">
          <source>Reference members cannot be bound to temporaries in a default member initializer (note; same rule exists for &lt;a href=&quot;constructor#Explanation&quot;&gt;member initializer lists&lt;/a&gt;).</source>
          <target state="translated">引用成员不能绑定到默认成员初始化程序中的临时对象（请注意；&lt;a href=&quot;constructor#Explanation&quot;&gt;成员初始化程序列表&lt;/a&gt;存在相同的规则）。</target>
        </trans-unit>
        <trans-unit id="bf1ac69d4c8bdd1332bcbbc1de0f08c8d6036b6b" translate="yes" xml:space="preserve">
          <source>Reference members cannot be bound to temporaries in a member initializer list:</source>
          <target state="translated">引用成员不能绑定到成员初始化器列表中的时态。</target>
        </trans-unit>
        <trans-unit id="98fb8f32aad4f44f917c852edd96707f23ae8d45" translate="yes" xml:space="preserve">
          <source>Reference members cannot be initialized with a default member initializer if it has a subexpression that would execute aggregate initialization which would use the same initializer:</source>
          <target state="translated">参考成员不能用默认成员初始化器初始化,如果它有一个子表达式会执行集合初始化,而集合初始化会使用相同的初始化器。</target>
        </trans-unit>
        <trans-unit id="300b43522daabfc29a69871fe5117abbca2f0664" translate="yes" xml:space="preserve">
          <source>Reference or pointer to the element previous to &lt;code&gt;current&lt;/code&gt;.</source>
          <target state="translated">对 &lt;code&gt;current&lt;/code&gt; 之前的元素的引用或指针。</target>
        </trans-unit>
        <trans-unit id="bb616147807ea22f629d7cf6b432e14a0abd5d12" translate="yes" xml:space="preserve">
          <source>Reference to &lt;code&gt;lo&lt;/code&gt; if &lt;code&gt;v&lt;/code&gt; is less than &lt;code&gt;lo&lt;/code&gt;, reference to &lt;code&gt;hi&lt;/code&gt; if &lt;code&gt;hi&lt;/code&gt; is less than &lt;code&gt;v&lt;/code&gt;, otherwise reference to &lt;code&gt;v&lt;/code&gt;.</source>
          <target state="translated">参照 &lt;code&gt;lo&lt;/code&gt; 如果 &lt;code&gt;v&lt;/code&gt; 低于 &lt;code&gt;lo&lt;/code&gt; ，参考 &lt;code&gt;hi&lt;/code&gt; 如果 &lt;code&gt;hi&lt;/code&gt; 小于 &lt;code&gt;v&lt;/code&gt; ，否则参照 &lt;code&gt;v&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="3c1af32a621e0dc61f39b572bda60cd992c6eda2" translate="yes" xml:space="preserve">
          <source>Reference to the &lt;code&gt;&lt;a href=&quot;../sub_match&quot;&gt;std::sub_match&lt;/a&gt;&lt;/code&gt; representing the specified matched subrange within the target sequence.</source>
          <target state="translated">对表示目标序列内指定的匹配子范围的 &lt;code&gt;&lt;a href=&quot;../sub_match&quot;&gt;std::sub_match&lt;/a&gt;&lt;/code&gt; 引用。</target>
        </trans-unit>
        <trans-unit id="ff5aef3c5ac0ab4a17255adaecb01327a021965c" translate="yes" xml:space="preserve">
          <source>Reference to the first element.</source>
          <target state="translated">参考第一个要素;</target>
        </trans-unit>
        <trans-unit id="2121364055c5d049898852aa6298f567138e3187" translate="yes" xml:space="preserve">
          <source>Reference to the last character, equivalent to &lt;code&gt;operator[](size() - 1)&lt;/code&gt;.</source>
          <target state="translated">引用最后一个字符，等效于 &lt;code&gt;operator[](size() - 1)&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="86d9a4349709b508a9aaaf5de52cb05544b0602c" translate="yes" xml:space="preserve">
          <source>Reference to the last element.</source>
          <target state="translated">参考最后一个要素。</target>
        </trans-unit>
        <trans-unit id="584953079692211eac629f65d34a8e9981275436" translate="yes" xml:space="preserve">
          <source>Reference to the mapped value of the new element if no element with key &lt;code&gt;key&lt;/code&gt; existed. Otherwise a reference to the mapped value of the existing element whose key is equivalent to &lt;code&gt;key&lt;/code&gt;.</source>
          <target state="translated">如果不存在带有key &lt;code&gt;key&lt;/code&gt; 的元素，则引用新元素的映射值。否则，引用其键与 &lt;code&gt;key&lt;/code&gt; 等效的现有元素的映射值。</target>
        </trans-unit>
        <trans-unit id="5e2c81626a532f8c811b084dadd4f32d2cb46c6d" translate="yes" xml:space="preserve">
          <source>Reference to the mapped value of the requested element.</source>
          <target state="translated">所请求元素的映射值的参考。</target>
        </trans-unit>
        <trans-unit id="c05d1f4ddea6c28b0f8fe979de9aceb16ace389d" translate="yes" xml:space="preserve">
          <source>Reference to the requested character.</source>
          <target state="translated">所需字符的参考。</target>
        </trans-unit>
        <trans-unit id="9b7fad21bb7d84bd1b65191e7b964a8c397568f5" translate="yes" xml:space="preserve">
          <source>Reference to the requested element.</source>
          <target state="translated">对所要求的元素的引用。</target>
        </trans-unit>
        <trans-unit id="37d6ca6de6b155b7aedc1c3a9ef5026d7653e9aa" translate="yes" xml:space="preserve">
          <source>Reference to the top element as if obtained by a call to &lt;code&gt;c.front()&lt;/code&gt;.</source>
          <target state="translated">引用top元素，就像通过调用 &lt;code&gt;c.front()&lt;/code&gt; 获得的一样。</target>
        </trans-unit>
        <trans-unit id="215cd2bfbba25cba3bf021306bec0c2ebe741d49" translate="yes" xml:space="preserve">
          <source>Reference to the type of &lt;code&gt;is&lt;/code&gt;</source>
          <target state="translated">参考类型 &lt;code&gt;is&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="32a911304a265bc778f45e5add8d9c230a4b386e" translate="yes" xml:space="preserve">
          <source>Reference to the type of &lt;code&gt;os&lt;/code&gt;</source>
          <target state="translated">引用 &lt;code&gt;os&lt;/code&gt; 的类型</target>
        </trans-unit>
        <trans-unit id="8219b6b7fef06639b92a8cb4dde218abcab975ef" translate="yes" xml:space="preserve">
          <source>Reference to the unmatched prefix.</source>
          <target state="translated">参考未匹配的前缀。</target>
        </trans-unit>
        <trans-unit id="65a152a7c1c23ecb4f75fb8ec6782609a06d1935" translate="yes" xml:space="preserve">
          <source>Reference to the unmatched suffix.</source>
          <target state="translated">参照不匹配的后缀。</target>
        </trans-unit>
        <trans-unit id="3b1ffaef65ca860b97bee71cdbd9992f99a1a2a2" translate="yes" xml:space="preserve">
          <source>Reference to the value stored in the variant.</source>
          <target state="translated">参考存储在变量中的值。</target>
        </trans-unit>
        <trans-unit id="f7ee77f060b5f6ac81a59365671f09dde8caf32a" translate="yes" xml:space="preserve">
          <source>Reference types cannot be &lt;a href=&quot;cv&quot;&gt;cv-qualified&lt;/a&gt; at the top level; there is no syntax for that in declaration, and if a qualification is introduced through a typedef, decltype, or template type argument, it is ignored.</source>
          <target state="translated">引用类型不能在最高级别获得&lt;a href=&quot;cv&quot;&gt;简历资格&lt;/a&gt;；声明中没有用于该语法的语法，并且如果通过typedef，decltype或template type参数引入了限定，则将忽略该限定。</target>
        </trans-unit>
        <trans-unit id="1ae627fdd27471d3add24f91a6176b4dd52e067b" translate="yes" xml:space="preserve">
          <source>Reference variables can be declared constexpr (their initializers have to be &lt;a href=&quot;constant_expression#Constant_expression&quot;&gt;reference constant expressions&lt;/a&gt;):</source>
          <target state="translated">引用变量可以声明为constexpr（它们的初始化器必须是&lt;a href=&quot;constant_expression#Constant_expression&quot;&gt;引用常量表达式&lt;/a&gt;）：</target>
        </trans-unit>
        <trans-unit id="3d594001d3b207cf8936c157a55b924fe6cbde4b" translate="yes" xml:space="preserve">
          <source>Reference wrappers</source>
          <target state="translated">参考包装纸</target>
        </trans-unit>
        <trans-unit id="32ca59359d68e4bed09b8b2dcfd781b2d40f33c6" translate="yes" xml:space="preserve">
          <source>Reference wrappers allow reference arguments to be stored in copyable function objects:</source>
          <target state="translated">引用包装器允许将引用参数存储在可复制的函数对象中。</target>
        </trans-unit>
        <trans-unit id="5d20d0fee3b91643dd8d272ac33d01ca95179d82" translate="yes" xml:space="preserve">
          <source>References</source>
          <target state="translated">References</target>
        </trans-unit>
        <trans-unit id="b12235bfcfd32e3c6e3dba2478e0a7aa390916c9" translate="yes" xml:space="preserve">
          <source>References and iterators to the erased element are invalidated.</source>
          <target state="translated">对被擦除元素的引用和迭代器无效。</target>
        </trans-unit>
        <trans-unit id="92b71789a3e861d85bf1071c7bdb1e7aaeb7bb57" translate="yes" xml:space="preserve">
          <source>References and iterators to the erased elements are invalidated. Other iterators and references are not invalidated.</source>
          <target state="translated">对被擦除元素的引用和迭代器无效。其他迭代器和引用不会失效。</target>
        </trans-unit>
        <trans-unit id="2ddd3de3decde5911ce920de5b1ff764dec1014d" translate="yes" xml:space="preserve">
          <source>References and iterators to the erased elements are invalidated. Other references and iterators are not affected.</source>
          <target state="translated">对被擦除元素的引用和迭代器无效。其他引用和迭代器不受影响。</target>
        </trans-unit>
        <trans-unit id="4f84f9f702cfb99fda1b35476741bc40b9241b24" translate="yes" xml:space="preserve">
          <source>References and pointers to arrays of unknown bound can be formed, but cannot be initialized or assigned from arrays and pointers to arrays of known bound. Note that in the C programming language, pointers to arrays of unknown bound are compatible with pointers to arrays of known bound and are thus convertible and assignable in both directions.</source>
          <target state="translated">可以形成对未知边界的数组的引用和指针,但不能从已知边界的数组和指针初始化或赋值。注意,在C语言编程中,未知边界数组的指针与已知边界数组的指针是兼容的,因此可以双向转换和赋值。</target>
        </trans-unit>
        <trans-unit id="dd858acfd18eaa9d41f9da42dceed8685f9f2271" translate="yes" xml:space="preserve">
          <source>References and pointers to cv-qualified types may be &lt;a href=&quot;implicit_cast#Qualification_conversions&quot;&gt; implicitly converted&lt;/a&gt; to references and pointers to</source>
          <target state="translated">对cv限定类型的引用和指针可以&lt;a href=&quot;implicit_cast#Qualification_conversions&quot;&gt;隐式转换&lt;/a&gt;为对cv限定类型的引用和指针</target>
        </trans-unit>
        <trans-unit id="35208b59cda9bc20d29c307afb8c790f330b5fac" translate="yes" xml:space="preserve">
          <source>References and pointers to either key or data stored in the container are only invalidated by erasing that element, even when the corresponding iterator is invalidated.</source>
          <target state="translated">对存储在容器中的键或数据的引用和指针只有通过擦除该元素才会无效,即使相应的迭代器无效。</target>
        </trans-unit>
        <trans-unit id="097b0424e0fd1eade52cd9bbfd9205f87765f5d4" translate="yes" xml:space="preserve">
          <source>References appear without initializers only in function parameter declaration, in function return type declaration, in the declaration of a class member, and with the &lt;code&gt;extern&lt;/code&gt; specifier.</source>
          <target state="translated">只有在函数参数声明，函数返回类型声明，类成员的声明以及带有 &lt;code&gt;extern&lt;/code&gt; 说明符的情况下，引用才会在没有初始化程序的情况下出现。</target>
        </trans-unit>
        <trans-unit id="440e81f160b61869c1254fad3dcd60d70b523797" translate="yes" xml:space="preserve">
          <source>References are initialized in the following situations:</source>
          <target state="translated">在以下情况下,引用会被初始化。</target>
        </trans-unit>
        <trans-unit id="98084945dc68ad770d916fcc848a11e333adb57e" translate="yes" xml:space="preserve">
          <source>References are not objects; they do not necessarily occupy storage, although the compiler may allocate storage if it is necessary to implement the desired semantics (e.g. a non-static data member of reference type usually increases the size of the class by the amount necessary to store a memory address).</source>
          <target state="translated">引用不是对象;它们不一定占用存储空间,尽管编译器可能会分配存储空间,如果它是实现所需语义的必要条件(例如,引用类型的非静态数据成员通常会增加类的大小,其数量是存储内存地址所需的)。</target>
        </trans-unit>
        <trans-unit id="359a47ac6d4301bdc353a06c78cad3d50b052e74" translate="yes" xml:space="preserve">
          <source>References become invalid on &lt;a href=&quot;resize&quot;&gt;resize&lt;/a&gt; or when the array is destructed.</source>
          <target state="translated">引用于无效 &lt;a href=&quot;resize&quot;&gt;调整大小&lt;/a&gt;或销毁数组时，。</target>
        </trans-unit>
        <trans-unit id="b97517b39ff305f026aef47f8f8154f2883ca30f" translate="yes" xml:space="preserve">
          <source>References cannot be value-initialized.</source>
          <target state="translated">引用不能进行值初始化。</target>
        </trans-unit>
        <trans-unit id="084f870de5376a14cc6b9d5dd50fedb1c1d6123f" translate="yes" xml:space="preserve">
          <source>Regardless of the value of &lt;code&gt;FLT_EVAL_METHOD&lt;/code&gt;, any floating-point expression may be</source>
          <target state="translated">无论 &lt;code&gt;FLT_EVAL_METHOD&lt;/code&gt; 的值如何，任何浮点表达式都可以是</target>
        </trans-unit>
        <trans-unit id="35eb0b15cd46ea358a89d8eebda9ffec29959244" translate="yes" xml:space="preserve">
          <source>Regardless of threads, evaluation A</source>
          <target state="translated">无论线程如何,评价A</target>
        </trans-unit>
        <trans-unit id="83da3dc1d543053c8cc335d5b0bee13d5eab2ad3" translate="yes" xml:space="preserve">
          <source>RegexTraits</source>
          <target state="translated">RegexTraits</target>
        </trans-unit>
        <trans-unit id="fee4e49bbebfed2e579b3eae6b7d5a414faef611" translate="yes" xml:space="preserve">
          <source>RegexTraits is satisfied by the following standard library classes:</source>
          <target state="translated">RegexTraits由以下标准库类来满足。</target>
        </trans-unit>
        <trans-unit id="ab32bb4b29de49f39b504707aa00b09b6d3d0aaa" translate="yes" xml:space="preserve">
          <source>Registers a user-defined function which will be called by &lt;code&gt;&lt;a href=&quot;imbue&quot;&gt;imbue()&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;../basic_ios/copyfmt&quot;&gt;std::basic_ios::copyfmt()&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;~ios_base()&lt;/code&gt;. Every registered callback is called every time: the event type (a value of type &lt;code&gt;&lt;a href=&quot;event&quot;&gt;event&lt;/a&gt;&lt;/code&gt;) is passed as its first argument, and may be used to distinguish between the callers.</source>
          <target state="translated">寄存器将由被称为用户定义的函数 &lt;code&gt;&lt;a href=&quot;imbue&quot;&gt;imbue()&lt;/a&gt;&lt;/code&gt; ， &lt;code&gt;&lt;a href=&quot;../basic_ios/copyfmt&quot;&gt;std::basic_ios::copyfmt()&lt;/a&gt;&lt;/code&gt; 和 &lt;code&gt;~ios_base()&lt;/code&gt; 。每个注册的回调被称为每次：事件类型（类型的值 &lt;code&gt;&lt;a href=&quot;event&quot;&gt;event&lt;/a&gt;&lt;/code&gt; ）作为它的第一个参数传递，并且可以使用呼叫者之间进行区分。</target>
        </trans-unit>
        <trans-unit id="647f9a2fc24c9fcf6f8c61b48d3233e6f5988648" translate="yes" xml:space="preserve">
          <source>Registers the function pointed to by &lt;code&gt;func&lt;/code&gt; to be called on normal program termination (via &lt;code&gt;&lt;a href=&quot;exit&quot;&gt;std::exit()&lt;/a&gt;&lt;/code&gt; or returning from the &lt;a href=&quot;../../language/main_function&quot;&gt;main function&lt;/a&gt;).</source>
          <target state="translated">注册 &lt;code&gt;func&lt;/code&gt; 指向的函数，以在正常程序终止时调用该函数（通过 &lt;code&gt;&lt;a href=&quot;exit&quot;&gt;std::exit()&lt;/a&gt;&lt;/code&gt; 或从&lt;a href=&quot;../../language/main_function&quot;&gt;main函数&lt;/a&gt;返回）。</target>
        </trans-unit>
        <trans-unit id="3773ae25ede3442e65c215fda5078ec33b2ed76a" translate="yes" xml:space="preserve">
          <source>Registers the function pointed to by &lt;code&gt;func&lt;/code&gt; to be called on quick program termination (via &lt;code&gt;&lt;a href=&quot;quick_exit&quot;&gt;std::quick_exit&lt;/a&gt;&lt;/code&gt;).</source>
          <target state="translated">注册 &lt;code&gt;func&lt;/code&gt; 指向的函数，以在程序快速终止时调用该函数（通过 &lt;code&gt;&lt;a href=&quot;quick_exit&quot;&gt;std::quick_exit&lt;/a&gt;&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="8d4e4ef3ea5252ec5235e4b1dd463ae9c302422c" translate="yes" xml:space="preserve">
          <source>Regular</source>
          <target state="translated">Regular</target>
        </trans-unit>
        <trans-unit id="5735772f427c0feca7155da053476c1faa961ebe" translate="yes" xml:space="preserve">
          <source>Regular &lt;code&gt;&lt;a href=&quot;malloc&quot;&gt;std::malloc&lt;/a&gt;&lt;/code&gt; aligns memory suitable for any object type (which, in practice, means that it is aligned to &lt;code&gt;alignof(&lt;a href=&quot;../../types/max_align_t&quot;&gt;std::max_align_t&lt;/a&gt;)&lt;/code&gt;). This function is useful for over-aligned allocations, such as to SSE, cache line, or VM page boundary.</source>
          <target state="translated">常规的 &lt;code&gt;&lt;a href=&quot;malloc&quot;&gt;std::malloc&lt;/a&gt;&lt;/code&gt; 对齐适合于任何对象类型的内存（实际上，这意味着它与 &lt;code&gt;alignof(&lt;a href=&quot;../../types/max_align_t&quot;&gt;std::max_align_t&lt;/a&gt;)&lt;/code&gt; ）。此功能对于过度对齐的分配（例如到SSE，缓存行或VM页面边界）很有用。</target>
        </trans-unit>
        <trans-unit id="0e3a57dd80ce3c13736d20fba014e9e474dddbfc" translate="yes" xml:space="preserve">
          <source>Regular Expressions library</source>
          <target state="translated">正则表达式库</target>
        </trans-unit>
        <trans-unit id="3172c4ae8fee97c04bb506eac2e6f47443f5a679" translate="yes" xml:space="preserve">
          <source>Regular expressions</source>
          <target state="translated">正则表达式</target>
        </trans-unit>
        <trans-unit id="6a1c5c68a9d2affa19c55b186b4b3e672555ae81" translate="yes" xml:space="preserve">
          <source>Regular expressions library</source>
          <target state="translated">正则表达式库</target>
        </trans-unit>
        <trans-unit id="20587220d5c297affc4c00aadd4d7834ac66981c" translate="yes" xml:space="preserve">
          <source>Rehashing invalidates iterator and might cause the elements to be re-arranged in different buckets but it doesn't invalidate references to the elements.</source>
          <target state="translated">重洗会使迭代器无效,可能会导致元素在不同的桶中重新排列,但不会使元素的引用无效。</target>
        </trans-unit>
        <trans-unit id="87888d23469b7f6d228494b46e08d60caa4d0782" translate="yes" xml:space="preserve">
          <source>Reinitializes the internal state of the random-number engine using new seed value.</source>
          <target state="translated">使用新的种子值重新初始化随机数引擎的内部状态。</target>
        </trans-unit>
        <trans-unit id="698db0adc115596c93355f23cc1ceccc67c8c08a" translate="yes" xml:space="preserve">
          <source>Reinitializes the internal state of the underlying engine using a new seed value.</source>
          <target state="translated">使用新的种子值重新初始化底层引擎的内部状态。</target>
        </trans-unit>
        <trans-unit id="55b60a9953670049da788380b0b2bae6e6404a3b" translate="yes" xml:space="preserve">
          <source>Reinterprets the objects pointed to by &lt;code&gt;lhs&lt;/code&gt; and &lt;code&gt;rhs&lt;/code&gt; as arrays of &lt;code&gt;unsigned char&lt;/code&gt; and compares the first &lt;code&gt;count&lt;/code&gt; characters of these arrays. The comparison is done lexicographically.</source>
          <target state="translated">将 &lt;code&gt;lhs&lt;/code&gt; 和 &lt;code&gt;rhs&lt;/code&gt; 指向的对象重新解释为 &lt;code&gt;unsigned char&lt;/code&gt; 数组，并比较第一个 &lt;code&gt;count&lt;/code&gt; 这些数组字符。比较是按字典顺序进行的。</target>
        </trans-unit>
        <trans-unit id="33a5a7571bf686aab9c742d3d618a2dde6a4506e" translate="yes" xml:space="preserve">
          <source>Relation</source>
          <target state="translated">Relation</target>
        </trans-unit>
        <trans-unit id="40fa22a00ce265dc796c706bf3adebe616b0341c" translate="yes" xml:space="preserve">
          <source>Relational operators</source>
          <target state="translated">关系运算符</target>
        </trans-unit>
        <trans-unit id="9bbdd9148b3036b1321dc79327ce52e01191a05a" translate="yes" xml:space="preserve">
          <source>Relational operators and comparison</source>
          <target state="translated">关系运算符和比较</target>
        </trans-unit>
        <trans-unit id="00a2a14b494539349e2aa89d4c2db0bddf6cf85c" translate="yes" xml:space="preserve">
          <source>Relationship with &lt;code&gt;volatile&lt;/code&gt;</source>
          <target state="translated">与 &lt;code&gt;volatile&lt;/code&gt; 关系</target>
        </trans-unit>
        <trans-unit id="09186002606defe5579c74a3fbc3a38a6f54bc26" translate="yes" xml:space="preserve">
          <source>Relationship with C library macro constants</source>
          <target state="translated">与C库宏常量的关系</target>
        </trans-unit>
        <trans-unit id="270247ce92fda8c33fe83a9443baeafcac5df91b" translate="yes" xml:space="preserve">
          <source>Relationship with std::fpos</source>
          <target state="translated">与std::fpos的关系</target>
        </trans-unit>
        <trans-unit id="d8d06320b3cf84590422c4f7500f0c9997914cea" translate="yes" xml:space="preserve">
          <source>Relationship with the main function</source>
          <target state="translated">与主要职能的关系</target>
        </trans-unit>
        <trans-unit id="a5c5cb0dd39fd5f8960a126f776dbc3b14c78315" translate="yes" xml:space="preserve">
          <source>Relaxed operation: there are no synchronization or ordering constraints imposed on other reads or writes, only this operation's atomicity is guaranteed (see &lt;a href=&quot;memory_order#Relaxed_ordering&quot;&gt;Relaxed ordering&lt;/a&gt; below)</source>
          <target state="translated">宽松的操作：没有对其他读取或写入施加任何同步或排序约束，仅保证此操作的原子性（请参见下面的&lt;a href=&quot;memory_order#Relaxed_ordering&quot;&gt;宽松的排序&lt;/a&gt;）</target>
        </trans-unit>
        <trans-unit id="332a6fa800dab748056c239b8ee0efb205f4447c" translate="yes" xml:space="preserve">
          <source>Relaxed ordering</source>
          <target state="translated">轻松订购</target>
        </trans-unit>
        <trans-unit id="b0af66f7a6b8d1e0d15d08e2d9c5e7281f7582d2" translate="yes" xml:space="preserve">
          <source>Relaxing constraints on &lt;code&gt;constexpr&lt;/code&gt; functions / &lt;code&gt;constexpr&lt;/code&gt; member functions and implicit &lt;code&gt;const&lt;/code&gt;</source>
          <target state="translated">放松对 &lt;code&gt;constexpr&lt;/code&gt; 函数/ &lt;code&gt;constexpr&lt;/code&gt; 成员函数和隐式 &lt;code&gt;const&lt;/code&gt; 的约束</target>
        </trans-unit>
        <trans-unit id="9815b94f028f1e8c53989319af091cc24620423b" translate="yes" xml:space="preserve">
          <source>Release all allocated memory</source>
          <target state="translated">释放所有分配的内存</target>
        </trans-unit>
        <trans-unit id="da73e242e9ab0a435466a19472cdff51dac15489" translate="yes" xml:space="preserve">
          <source>Release operation</source>
          <target state="translated">释放操作</target>
        </trans-unit>
        <trans-unit id="e58453a35482a76c4a6c848eaa246de1ef9209c7" translate="yes" xml:space="preserve">
          <source>Release sequence</source>
          <target state="translated">释放顺序</target>
        </trans-unit>
        <trans-unit id="d1d1207cbd03d1b413657584c3395f5bd0ed2f5e" translate="yes" xml:space="preserve">
          <source>Release-Acquire ordering</source>
          <target state="translated">释义-咨询订购</target>
        </trans-unit>
        <trans-unit id="f39c9974a3cea1d56e06409a4e0aafdeca8e0911" translate="yes" xml:space="preserve">
          <source>Release-Consume ordering</source>
          <target state="translated">释放-消费订购</target>
        </trans-unit>
        <trans-unit id="50f7ad8512ef3c92ae62b9f6e1ca2908a7fc66a7" translate="yes" xml:space="preserve">
          <source>Releases all allocated memory by calling the &lt;code&gt;deallocate&lt;/code&gt; function on the upstream memory resource as necessary.</source>
          <target state="translated">通过根据需要在上游内存资源上调用 &lt;code&gt;deallocate&lt;/code&gt; 函数释放所有已分配的内存。</target>
        </trans-unit>
        <trans-unit id="eae3a8fc2dc19ffd6b7cbef1c80b3dba482b060c" translate="yes" xml:space="preserve">
          <source>Releases all memory owned by this resource by calling the &lt;code&gt;deallocate&lt;/code&gt; function of the upstream memory resource as needed.</source>
          <target state="translated">通过根据需要调用上游内存资源的 &lt;code&gt;deallocate&lt;/code&gt; 函数来释放此资源拥有的所有内存。</target>
        </trans-unit>
        <trans-unit id="213778813372579eb02b4a920b3e0988d80a6dca" translate="yes" xml:space="preserve">
          <source>Releases any shared state. This means.</source>
          <target state="translated">释放任何共享状态。这意味着:</target>
        </trans-unit>
        <trans-unit id="4fb02a4330e8f3837855d7fdc7d3c3f0801bfff8" translate="yes" xml:space="preserve">
          <source>Releases the calling thread's ownership of the mutex and</source>
          <target state="translated">释放调用线程对mutex和</target>
        </trans-unit>
        <trans-unit id="8ca635067166e4da1016c9fc5113531d946c3230" translate="yes" xml:space="preserve">
          <source>Releases the held pointer. After the call &lt;code&gt;*this&lt;/code&gt; holds the null pointer.</source>
          <target state="translated">释放保持的指针。调用之后 &lt;code&gt;*this&lt;/code&gt; 将保留空指针。</target>
        </trans-unit>
        <trans-unit id="6deefee17f27ab11c5fc69b6e4b470cbda211d98" translate="yes" xml:space="preserve">
          <source>Releases the lock held by the execution agent. Throws no exceptions.</source>
          <target state="translated">释放由执行代理持有的锁。不抛出异常。</target>
        </trans-unit>
        <trans-unit id="dfb38798746934f262a3b8a9d8373bfb778503a2" translate="yes" xml:space="preserve">
          <source>Releases the mutex from shared ownership by the calling thread.</source>
          <target state="translated">将mutex从调用线程的共享所有权中释放出来。</target>
        </trans-unit>
        <trans-unit id="647da988abf58030cf2496242ac479daa8e306a1" translate="yes" xml:space="preserve">
          <source>Releases the ownership of the managed object if any. &lt;code&gt;&lt;a href=&quot;get&quot;&gt;get()&lt;/a&gt;&lt;/code&gt; returns &lt;code&gt;nullptr&lt;/code&gt; after the call.</source>
          <target state="translated">释放托管对象的所有权（如果有）。调用之后， &lt;code&gt;&lt;a href=&quot;get&quot;&gt;get()&lt;/a&gt;&lt;/code&gt; 返回 &lt;code&gt;nullptr&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="2779702647127de53a1fd378df2e35adfa9ae518" translate="yes" xml:space="preserve">
          <source>Releases the ownership of the owned mutex.</source>
          <target state="translated">释放所拥有的mutex的所有权。</target>
        </trans-unit>
        <trans-unit id="f27a2da706447f06f1eb6907007212ef9ca2d054" translate="yes" xml:space="preserve">
          <source>Releases the ownership of the owned mutexes.</source>
          <target state="translated">释放所拥有的mutexes的所有权。</target>
        </trans-unit>
        <trans-unit id="5ac79e9179b6d82d4e5f31ce43c1485c62961651" translate="yes" xml:space="preserve">
          <source>Releases the reference to the managed object. After the call &lt;code&gt;*this&lt;/code&gt; manages no object.</source>
          <target state="translated">释放对托管对象的引用。通话后 &lt;code&gt;*this&lt;/code&gt; 管理任何对象。</target>
        </trans-unit>
        <trans-unit id="d7020f448aaf8aacc8b4d63537e375e865fff9d8" translate="yes" xml:space="preserve">
          <source>Remarks</source>
          <target state="translated">Remarks</target>
        </trans-unit>
        <trans-unit id="97ac05d3ac2bbfa1017829af6bb1a1d9a399e202" translate="yes" xml:space="preserve">
          <source>Removes a single generic-format filename component (as returned by &lt;a href=&quot;filename&quot;&gt;&lt;code&gt;filename&lt;/code&gt;&lt;/a&gt;) from the given generic-format path.</source>
          <target state="translated">从给定的通用格式路径中删除单个通用格式文件名组件（由&lt;a href=&quot;filename&quot;&gt; &lt;code&gt;filename&lt;/code&gt; &lt;/a&gt;返回）。</target>
        </trans-unit>
        <trans-unit id="2f2b04707c98afe8aea846d5b8301c1a3bd172ed" translate="yes" xml:space="preserve">
          <source>Removes all</source>
          <target state="translated">移除所有</target>
        </trans-unit>
        <trans-unit id="4f8de84cab405093266028614412ac4a5b9c8965" translate="yes" xml:space="preserve">
          <source>Removes all characters from the string as if by executing &lt;code&gt;erase(begin(), end())&lt;/code&gt;.</source>
          <target state="translated">从字符串中删除所有字符，就像通过执行 &lt;code&gt;erase(begin(), end())&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="635f870858042a8684a038907c9cf636a6a15c21" translate="yes" xml:space="preserve">
          <source>Removes all elements satisfying specific criteria from the range &lt;code&gt;[first, last)&lt;/code&gt; and returns a past-the-end iterator for the new end of the range.</source>
          <target state="translated">从范围 &lt;code&gt;[first, last)&lt;/code&gt; 删除所有满足特定条件的元素，并为该范围的新末端返回一个过去的迭代器。</target>
        </trans-unit>
        <trans-unit id="cb250410dcae3a3e23c63fcc076af1a3294aa768" translate="yes" xml:space="preserve">
          <source>Removes all elements satisfying specific criteria. The first version removes all elements that are equal to &lt;code&gt;value&lt;/code&gt;, the second version removes all elements for which predicate &lt;code&gt;p&lt;/code&gt; returns &lt;code&gt;true&lt;/code&gt;.</source>
          <target state="translated">删除所有满足特定条件的元素。第一个版本删除所有等于 &lt;code&gt;value&lt;/code&gt; 的元素，第二个版本删除谓词 &lt;code&gt;p&lt;/code&gt; 返回 &lt;code&gt;true&lt;/code&gt; 的所有元素。</target>
        </trans-unit>
        <trans-unit id="340d677d50a5e88d981737c6031356c74a6ef8d5" translate="yes" xml:space="preserve">
          <source>Removes an element from the front of the queue. Effectively calls &lt;code&gt;c.pop_front()&lt;/code&gt;.</source>
          <target state="translated">从队列的开头删除一个元素。有效地调用 &lt;code&gt;c.pop_front()&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="a15448364f167fb0857196da13fae2493a7d7eec" translate="yes" xml:space="preserve">
          <source>Removes specified characters from the string.</source>
          <target state="translated">从字符串中删除指定的字符。</target>
        </trans-unit>
        <trans-unit id="47c4dc3b9295eb94760fc911ffa31f4a7600ee2c" translate="yes" xml:space="preserve">
          <source>Removes specified elements from the container.</source>
          <target state="translated">从容器中删除指定的元素。</target>
        </trans-unit>
        <trans-unit id="b04a532fae552b85b1592806b7712d100dd19a5a" translate="yes" xml:space="preserve">
          <source>Removes the first element of the container. If there are no elements in the container, the behavior is undefined.</source>
          <target state="translated">移除容器的第一个元素。如果容器中没有元素,则行为未定义。</target>
        </trans-unit>
        <trans-unit id="564482467dd499ff8f0906819cd9fd4e71217330" translate="yes" xml:space="preserve">
          <source>Removes the last character from the string.</source>
          <target state="translated">删除字符串中的最后一个字符。</target>
        </trans-unit>
        <trans-unit id="f35fe59c743e7cc9f3907f410c3d5e865b8ff585" translate="yes" xml:space="preserve">
          <source>Removes the last element of the container.</source>
          <target state="translated">移除容器的最后一个元素。</target>
        </trans-unit>
        <trans-unit id="498bb16c978d9d423aa797edb6da8c2f91d6582e" translate="yes" xml:space="preserve">
          <source>Removes the reachable status of the object, referenced by the pointer &lt;code&gt;p&lt;/code&gt;, if it was previously set by &lt;code&gt;&lt;a href=&quot;declare_reachable&quot;&gt;std::declare_reachable&lt;/a&gt;&lt;/code&gt;. If the object was declared reachable multiple times, equal number of calls to &lt;code&gt;undeclare_reachable&lt;/code&gt; would be needed to remove this status. Once the object is not declared reachable and has no pointers referencing it, it may be reclaimed by garbage collector or reported as a leak by a leak detector.</source>
          <target state="translated">如果指针 &lt;code&gt;p&lt;/code&gt; 所引用的对象的可访问状态先前由 &lt;code&gt;&lt;a href=&quot;declare_reachable&quot;&gt;std::declare_reachable&lt;/a&gt;&lt;/code&gt; 设置，则删除该状态。如果多次声明该对象可访问，则对 &lt;code&gt;undeclare_reachable&lt;/code&gt; 的调用次数相等才能删除此状态。一旦该对象未声明为可访问且没有引用该对象的指针，则该对象可能会被垃圾回收器回收，或被泄漏检测器报告为泄漏。</target>
        </trans-unit>
        <trans-unit id="b457efca2472c9cbdf821df9e9a582d31c870ce3" translate="yes" xml:space="preserve">
          <source>Removes the top element from the priority queue. Effectively calls &lt;code&gt;&lt;a href=&quot;../../algorithm/pop_heap&quot;&gt;std::pop_heap&lt;/a&gt;(c.begin(), c.end(), comp); c.pop_back();&lt;/code&gt;</source>
          <target state="translated">从优先级队列中删除顶部元素。有效地调用 &lt;code&gt;&lt;a href=&quot;../../algorithm/pop_heap&quot;&gt;std::pop_heap&lt;/a&gt;(c.begin(), c.end(), comp); c.pop_back();&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="e22143efe77b6d5c03cfdaeae00a3e48ce4fa7c3" translate="yes" xml:space="preserve">
          <source>Removes the top element from the stack. Effectively calls &lt;code&gt;c.pop_back()&lt;/code&gt;.</source>
          <target state="translated">从堆栈中删除顶部元素。有效地调用 &lt;code&gt;c.pop_back()&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="8117ca41e1d1b6fbb693ddfee59c7dd1a6f1c20b" translate="yes" xml:space="preserve">
          <source>Removing const/volatile from &lt;code&gt;const volatile int *&lt;/code&gt; does not modify the type, because the pointer itself is neither const nor volatile.</source>
          <target state="translated">从 &lt;code&gt;const volatile int *&lt;/code&gt; 删除const / volatile *中不会修改类型，因为指针本身既不是const也不是volatile。</target>
        </trans-unit>
        <trans-unit id="ff836fccf669f3ed03101955601d31883f3f5608" translate="yes" xml:space="preserve">
          <source>Removing is done by shifting (by means of move assignment) the elements in the range in such a way that the elements that are not to be removed appear in the beginning of the range. Relative order of the elements that remain is preserved and the</source>
          <target state="translated">移除是通过移动(通过移动分配)范围内的元素,使不被移除的元素出现在范围的开头。保留的元素的相对顺序被保留下来,并且这些元素的位置也被保留下来。</target>
        </trans-unit>
        <trans-unit id="507ee4f64bdbc422b60c6b4d5e5b36bb5d2d8ac4" translate="yes" xml:space="preserve">
          <source>Removing is done by shifting the elements in the range in such a way that elements to be erased are overwritten. Relative order of the elements that remain is preserved and the</source>
          <target state="translated">移除是通过移动范围内的元素,使要删除的元素被覆盖。剩余元素的相对顺序被保留下来,并且这些元素的数量也被保留下来。</target>
        </trans-unit>
        <trans-unit id="66c9c4c7ff544773710c0a5efab3a0ecd1d8bbec" translate="yes" xml:space="preserve">
          <source>Rename &lt;code&gt;shared_mutex&lt;/code&gt; to &lt;code&gt;&lt;a href=&quot;thread/shared_timed_mutex&quot;&gt;shared_timed_mutex&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">将 &lt;code&gt;shared_mutex&lt;/code&gt; 重命名为 &lt;code&gt;&lt;a href=&quot;thread/shared_timed_mutex&quot;&gt;shared_timed_mutex&lt;/a&gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="d904a43e3041cecabf55b02ef9c2bf93ff1d2055" translate="yes" xml:space="preserve">
          <source>Rename fails if.</source>
          <target state="translated">重命名失败,如果:</target>
        </trans-unit>
        <trans-unit id="ced9a8bd86a9ec2b8206f92e8e66797e18d67a46" translate="yes" xml:space="preserve">
          <source>Renders the entire program meaningless if certain rules of the language are violated.</source>
          <target state="translated">如果违反了语言的某些规则,就会使整个程序失去意义。</target>
        </trans-unit>
        <trans-unit id="e850548abc9c832eb91f2efcf13f90104fe81565" translate="yes" xml:space="preserve">
          <source>Reorders the elements in the given range &lt;code&gt;[first, last)&lt;/code&gt; such that each possible permutation of those elements has equal probability of appearance.</source>
          <target state="translated">对给定范围内的元素重新排序 &lt;code&gt;[first, last)&lt;/code&gt; ，以使这些元素的每个可能排列都具有相同的出现概率。</target>
        </trans-unit>
        <trans-unit id="91c2de576f962d7363fec8d9784d3ecc380e6c4d" translate="yes" xml:space="preserve">
          <source>Replace the existing file</source>
          <target state="translated">替换现有文件</target>
        </trans-unit>
        <trans-unit id="2fcae0ca3b5c5437d4e2ef57e50493a2ccc6aa1f" translate="yes" xml:space="preserve">
          <source>Replace the existing file only if it is older than the file being copied</source>
          <target state="translated">只有当现有文件比被复制的文件旧时,才会替换现有文件</target>
        </trans-unit>
        <trans-unit id="2a745201834920e7f0ed91d93aed5716b56c5855" translate="yes" xml:space="preserve">
          <source>Replaces a single filename component with &lt;code&gt;replacement&lt;/code&gt;.</source>
          <target state="translated">替换单个文件名部分 &lt;code&gt;replacement&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="618b75fbb8942f1eaf7115630d64df9f681dcba8" translate="yes" xml:space="preserve">
          <source>Replaces all elements satisfying specific criteria with &lt;code&gt;new_value&lt;/code&gt; in the range &lt;code&gt;[first, last)&lt;/code&gt;.</source>
          <target state="translated">将所有满足特定条件的元素替换为 &lt;code&gt;[first, last)&lt;/code&gt; 范围内的 &lt;code&gt;new_value&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="28c58f294cc35422ed916a63badc0cf40eaa6ad9" translate="yes" xml:space="preserve">
          <source>Replaces contents of &lt;code&gt;*this&lt;/code&gt; with the contents of &lt;code&gt;other&lt;/code&gt;.</source>
          <target state="translated">将 &lt;code&gt;*this&lt;/code&gt; 的内容替换为 &lt;code&gt;other&lt;/code&gt; 的内容。</target>
        </trans-unit>
        <trans-unit id="d4529fd126edacf175b34afaf9e56b1a90587849" translate="yes" xml:space="preserve">
          <source>Replaces elements in &lt;code&gt;a&lt;/code&gt; with &lt;code&gt;n&lt;/code&gt; copies of &lt;code&gt;t&lt;/code&gt;</source>
          <target state="translated">在替代对象元件 &lt;code&gt;a&lt;/code&gt; 与 &lt;code&gt;n&lt;/code&gt; 的副本 &lt;code&gt;t&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="88b59c52f891daf09842eefd7a9ad71b18734ea7" translate="yes" xml:space="preserve">
          <source>Replaces elements in a with a copy of &lt;code&gt;[i, j)&lt;/code&gt;</source>
          <target state="translated">用 &lt;code&gt;[i, j)&lt;/code&gt; 的副本替换a中的元素</target>
        </trans-unit>
        <trans-unit id="8e672f4bbf61cf149c372b799e4128eed20f1760" translate="yes" xml:space="preserve">
          <source>Replaces the contents of the container adaptor with those of &lt;code&gt;other&lt;/code&gt;.</source>
          <target state="translated">用 &lt;code&gt;other&lt;/code&gt; 的替换容器适配器的内容。</target>
        </trans-unit>
        <trans-unit id="69183af5908f3d3232ddc98f83f335544cdff8e7" translate="yes" xml:space="preserve">
          <source>Replaces the contents of the container.</source>
          <target state="translated">替换容器中的内容。</target>
        </trans-unit>
        <trans-unit id="f18aaab9db971281746cef0cbfd3d29cfd35cd3e" translate="yes" xml:space="preserve">
          <source>Replaces the contents of the directory entry (path and cached attributes, if any) with the contents of &lt;code&gt;other&lt;/code&gt;.</source>
          <target state="translated">与内容替换的目录项的内容（路径和缓存的属性，如果有的话） &lt;code&gt;other&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="b6abfb604d4532bdf5831c7d99c6e519993fa303" translate="yes" xml:space="preserve">
          <source>Replaces the contents of the numeric array.</source>
          <target state="translated">替换数字数组的内容。</target>
        </trans-unit>
        <trans-unit id="91b6f6a42695be27f44fe7bdfdbbf26f1752e3cb" translate="yes" xml:space="preserve">
          <source>Replaces the contents of the pair.</source>
          <target state="translated">替换该对的内容。</target>
        </trans-unit>
        <trans-unit id="8a03ca57ce87f56830afb992813b381d5a7a864e" translate="yes" xml:space="preserve">
          <source>Replaces the contents of the string.</source>
          <target state="translated">替换字符串的内容。</target>
        </trans-unit>
        <trans-unit id="b45dcfc5aa55d54c1510d9d3cf4baf069f1ca787" translate="yes" xml:space="preserve">
          <source>Replaces the contents of the tuple with the contents of another tuple or a pair.</source>
          <target state="translated">将元组的内容替换为另一个元组或一对的内容。</target>
        </trans-unit>
        <trans-unit id="2b1ab2c8c43bc7d2408fabb4754e968c4315a020" translate="yes" xml:space="preserve">
          <source>Replaces the contents to the &lt;code&gt;path&lt;/code&gt; object by a new pathname constructed from the given character sequence.</source>
          <target state="translated">用从给定字符序列构造的新路径名替换 &lt;code&gt;path&lt;/code&gt; 对象的内容。</target>
        </trans-unit>
        <trans-unit id="879df88886f1831ef0fd436593adabf5a6d9745e" translate="yes" xml:space="preserve">
          <source>Replaces the contents with error code &lt;code&gt;ec&lt;/code&gt; and corresponding category &lt;code&gt;ecat&lt;/code&gt;.</source>
          <target state="translated">用错误代码 &lt;code&gt;ec&lt;/code&gt; 和相应的类别 &lt;code&gt;ecat&lt;/code&gt; 替换内容。</target>
        </trans-unit>
        <trans-unit id="4e832b2ff4b35c356c64f745bf9b528ef6c88dba" translate="yes" xml:space="preserve">
          <source>Replaces the current locale with &lt;code&gt;loc&lt;/code&gt;. The regular expression does not match any character sequence after the call.</source>
          <target state="translated">用 &lt;code&gt;loc&lt;/code&gt; 替换当前语言环境。调用后，正则表达式与任何字符序列都不匹配。</target>
        </trans-unit>
        <trans-unit id="9b3d68e2fcbde1639e676dc9fd1422ad8af45393" translate="yes" xml:space="preserve">
          <source>Replaces the current locale with a copy of &lt;code&gt;loc&lt;/code&gt;. If &lt;code&gt;loc&lt;/code&gt; is different than the current locale, then all cached data is invalidated.</source>
          <target state="translated">用 &lt;code&gt;loc&lt;/code&gt; 的副本替换当前语言环境。如果 &lt;code&gt;loc&lt;/code&gt; 与当前语言环境不同，则所有缓存的数据均无效。</target>
        </trans-unit>
        <trans-unit id="5ad0a36d2199bb51b34b7ca2c6b0137b44f39688" translate="yes" xml:space="preserve">
          <source>Replaces the current locale. Effectively calls &lt;code&gt;ios_base::imbue(loc)&lt;/code&gt; and if there is an associated stream buffer (&lt;code&gt;rdbuf() != 0&lt;/code&gt;), then calls &lt;code&gt;rdbuf()-&amp;gt;pubimbue(loc)&lt;/code&gt;.</source>
          <target state="translated">替换当前的语言环境。有效地调用 &lt;code&gt;ios_base::imbue(loc)&lt;/code&gt; ，如果存在关联的流缓冲区（ &lt;code&gt;rdbuf() != 0&lt;/code&gt; ），则调用 &lt;code&gt;rdbuf()-&amp;gt;pubimbue(loc)&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="bf71578af88666026ac7fc84f244d2f566590499" translate="yes" xml:space="preserve">
          <source>Replaces the current state with that of &lt;code&gt;other&lt;/code&gt;, except for the associated &lt;code&gt;rdbuf&lt;/code&gt;. &lt;code&gt;other&lt;/code&gt; is in valid, but unspecified state after the call. After the call to this function, &lt;code&gt;&lt;a href=&quot;rdbuf&quot;&gt;rdbuf()&lt;/a&gt;&lt;/code&gt; returns &lt;code&gt;&lt;a href=&quot;../../types/null&quot;&gt;NULL&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;other.rdbuf()&lt;/code&gt; returns the same value as before the call, and &lt;code&gt;other.tie()&lt;/code&gt; returns 0.</source>
          <target state="translated">将当前状态替换为 &lt;code&gt;other&lt;/code&gt; 状态（关联的 &lt;code&gt;rdbuf&lt;/code&gt; 除外）。通话后， &lt;code&gt;other&lt;/code&gt; 处于有效状态，但状态未指定。调用此函数后， &lt;code&gt;&lt;a href=&quot;rdbuf&quot;&gt;rdbuf()&lt;/a&gt;&lt;/code&gt; 返回 &lt;code&gt;&lt;a href=&quot;../../types/null&quot;&gt;NULL&lt;/a&gt;&lt;/code&gt; ， &lt;code&gt;other.rdbuf()&lt;/code&gt; 返回与调用前相同的值， &lt;code&gt;other.tie()&lt;/code&gt; 返回0。</target>
        </trans-unit>
        <trans-unit id="b8cc7fdc951d51928bb13da79534541221260e5f" translate="yes" xml:space="preserve">
          <source>Replaces the error code and corresponding category with those representing error code enum &lt;code&gt;e&lt;/code&gt;.</source>
          <target state="translated">取代了错误代码和相应的类别与那些代表错误代码枚举 &lt;code&gt;e&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="3df13328907d77fff1515cc923a70d9b3709895e" translate="yes" xml:space="preserve">
          <source>Replaces the error code and error category with default values.</source>
          <target state="translated">用默认值替换错误代码和错误类别。</target>
        </trans-unit>
        <trans-unit id="d13ab2ad9ca24939426bd7daa47ad3816bd3a16a" translate="yes" xml:space="preserve">
          <source>Replaces the extension with &lt;code&gt;replacement&lt;/code&gt; or removes it when the default value of &lt;code&gt;replacement&lt;/code&gt; is used.</source>
          <target state="translated">使用默认 &lt;code&gt;replacement&lt;/code&gt; 值将扩展替换为 &lt;code&gt;replacement&lt;/code&gt; 或删除扩展。</target>
        </trans-unit>
        <trans-unit id="19946cf14751cea8eea56057d66e77e8cdeb23a9" translate="yes" xml:space="preserve">
          <source>Replaces the global C++ locale with &lt;code&gt;loc&lt;/code&gt;, which means all future calls to the &lt;code&gt;&lt;a href=&quot;../locale&quot;&gt;std::locale&lt;/a&gt;&lt;/code&gt; default constructor will now return a copy of &lt;code&gt;loc&lt;/code&gt;. If &lt;code&gt;loc&lt;/code&gt; has a name, also replaces the C locale as if by &lt;code&gt;&lt;a href=&quot;../setlocale&quot;&gt;std::setlocale&lt;/a&gt;(&lt;a href=&quot;../lc_categories&quot;&gt;LC_ALL&lt;/a&gt;, loc.name().c_str());&lt;/code&gt;. This function is the only way to modify the global C++ locale, which is otherwise equivalent to &lt;code&gt;&lt;a href=&quot;classic&quot;&gt;std::locale::classic&lt;/a&gt;()&lt;/code&gt; at program startup.</source>
          <target state="translated">用 &lt;code&gt;loc&lt;/code&gt; 替换全局C ++语言环境，这意味着将来对 &lt;code&gt;&lt;a href=&quot;../locale&quot;&gt;std::locale&lt;/a&gt;&lt;/code&gt; 默认构造函数的所有调用现在都将返回 &lt;code&gt;loc&lt;/code&gt; 的副本。如果 &lt;code&gt;loc&lt;/code&gt; 有一个名称，也用 &lt;code&gt;&lt;a href=&quot;../setlocale&quot;&gt;std::setlocale&lt;/a&gt;(&lt;a href=&quot;../lc_categories&quot;&gt;LC_ALL&lt;/a&gt;, loc.name().c_str());&lt;/code&gt; 替换C语言环境（LC_ALL，loc.name（）。c_str（））; 。此函数是修改全局C ++语言环境的唯一方法，否则它等效于程序启动时的 &lt;code&gt;&lt;a href=&quot;classic&quot;&gt;std::locale::classic&lt;/a&gt;()&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="4c99fb8b37e96440a75eee4eab903d9e80d42a8a" translate="yes" xml:space="preserve">
          <source>Replaces the held pointer by &lt;code&gt;p&lt;/code&gt;. If the currently held pointer is not null pointer, &lt;code&gt;delete get()&lt;/code&gt; is called.</source>
          <target state="translated">用 &lt;code&gt;p&lt;/code&gt; 替换保持的指针。如果当前持有的指针不是空指针，则调用 &lt;code&gt;delete get()&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="880ee0939fff5ffaeeb6663d37ef7aebbcd7cf8b" translate="yes" xml:space="preserve">
          <source>Replaces the managed object with an object pointed to by &lt;code&gt;ptr&lt;/code&gt;. Optional deleter &lt;code&gt;d&lt;/code&gt; can be supplied, which is later used to destroy the new object when no &lt;code&gt;shared_ptr&lt;/code&gt; objects own it. By default, &lt;a href=&quot;../../language/delete&quot;&gt;&lt;code&gt;delete&lt;/code&gt;&lt;/a&gt; expression is used as deleter. Proper &lt;a href=&quot;../../language/delete&quot;&gt;&lt;code&gt;delete&lt;/code&gt;&lt;/a&gt; expression corresponding to the supplied type is always selected, this is the reason why the function is implemented as template using a separate parameter &lt;code&gt;Y&lt;/code&gt;.</source>
          <target state="translated">用 &lt;code&gt;ptr&lt;/code&gt; 指向的对象替换托管对象。可以提供可选的deleter &lt;code&gt;d&lt;/code&gt; ，稍后在没有 &lt;code&gt;shared_ptr&lt;/code&gt; 对象拥有新对象时将其销毁。默认情况下，&lt;a href=&quot;../../language/delete&quot;&gt; &lt;code&gt;delete&lt;/code&gt; &lt;/a&gt;表达式用作删除器。始终选择与提供的类型相对应的正确&lt;a href=&quot;../../language/delete&quot;&gt; &lt;code&gt;delete&lt;/code&gt; &lt;/a&gt;表达式，这就是为什么使用单独的参数 &lt;code&gt;Y&lt;/code&gt; 将函数实现为模板的原因。</target>
        </trans-unit>
        <trans-unit id="a3ad70d6f6d2a9d87751802fe1734672dbbf2331" translate="yes" xml:space="preserve">
          <source>Replaces the managed object with the one managed by &lt;code&gt;r&lt;/code&gt;.</source>
          <target state="translated">将托管对象替换为 &lt;code&gt;r&lt;/code&gt; 托管的对象。</target>
        </trans-unit>
        <trans-unit id="8b174c8f75780af2fc57dc67054c1dcf54482d7a" translate="yes" xml:space="preserve">
          <source>Replaces the managed object with the one managed by &lt;code&gt;r&lt;/code&gt;. The object is shared with &lt;code&gt;r&lt;/code&gt;. If &lt;code&gt;r&lt;/code&gt; manages no object, &lt;code&gt;*this&lt;/code&gt; manages no object too.</source>
          <target state="translated">将托管对象替换为 &lt;code&gt;r&lt;/code&gt; 托管的对象。该对象与 &lt;code&gt;r&lt;/code&gt; 共享。如果 &lt;code&gt;r&lt;/code&gt; 不管理任何对象，则 &lt;code&gt;*this&lt;/code&gt; 也不管理任何对象。</target>
        </trans-unit>
        <trans-unit id="bd87b22f9ce93d0be18341b6951a15999f5258a7" translate="yes" xml:space="preserve">
          <source>Replaces the managed object.</source>
          <target state="translated">替换被管理对象。</target>
        </trans-unit>
        <trans-unit id="ef191bf8ac75bdbda1c674ae7110deffb4baef6a" translate="yes" xml:space="preserve">
          <source>Replaces the part of the string indicated by either &lt;code&gt;[pos, pos + count)&lt;/code&gt; or &lt;code&gt;[first, last)&lt;/code&gt; with a new string.</source>
          <target state="translated">用新字符串替换 &lt;code&gt;[pos, pos + count)&lt;/code&gt; 或 &lt;code&gt;[first, last)&lt;/code&gt; 指示的字符串部分。</target>
        </trans-unit>
        <trans-unit id="6da92aa24c946dcc754df898d6149645914780cf" translate="yes" xml:space="preserve">
          <source>Replaces the stored exception with the one held in &lt;code&gt;other&lt;/code&gt;.</source>
          <target state="translated">替换在举行的一个存储异常 &lt;code&gt;other&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="18f1255d0adbb4064f0af1c9ee7a19f687e1dd7b" translate="yes" xml:space="preserve">
          <source>Replaces the value of &lt;code&gt;obj&lt;/code&gt; with &lt;code&gt;new_value&lt;/code&gt; and returns the old value of &lt;code&gt;obj&lt;/code&gt;.</source>
          <target state="translated">用 &lt;code&gt;new_value&lt;/code&gt; 替换 &lt;code&gt;obj&lt;/code&gt; 的值，并返回 &lt;code&gt;obj&lt;/code&gt; 的旧值。</target>
        </trans-unit>
        <trans-unit id="2200b44f26713f435344f02925e6087bf00c1e25" translate="yes" xml:space="preserve">
          <source>Replaces the view with that of &lt;code&gt;view&lt;/code&gt;.</source>
          <target state="translated">用view替换 &lt;code&gt;view&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="d54f3dfed1488935d7c52054cea01eb56aeaf7df" translate="yes" xml:space="preserve">
          <source>Replacing text macros</source>
          <target state="translated">替换文本宏</target>
        </trans-unit>
        <trans-unit id="de5576ae0077415670fba38b4e973f9219df5aae" translate="yes" xml:space="preserve">
          <source>Report an error (default behavior)</source>
          <target state="translated">报告错误(默认行为</target>
        </trans-unit>
        <trans-unit id="cc21b7fcd2210c11c9de0b884b8af20aeb6375df" translate="yes" xml:space="preserve">
          <source>Reports the maximum allocation size supported by the outer allocator, by calling &lt;code&gt;&lt;a href=&quot;../allocator_traits&quot;&gt;std::allocator_traits&lt;/a&gt;&amp;lt;OuterAlloc&amp;gt;::max_size(outer_allocator())&lt;/code&gt;.</source>
          <target state="translated">通过调用 &lt;code&gt;&lt;a href=&quot;../allocator_traits&quot;&gt;std::allocator_traits&lt;/a&gt;&amp;lt;OuterAlloc&amp;gt;::max_size(outer_allocator())&lt;/code&gt; 报告外部分配器支持的最大分配大小。</target>
        </trans-unit>
        <trans-unit id="11a42e54adfed88e2edfe70efda28bbed8a216cc" translate="yes" xml:space="preserve">
          <source>Repositions &lt;code&gt;&lt;a href=&quot;../basic_streambuf/gptr&quot;&gt;std::basic_streambuf::gptr&lt;/a&gt;&lt;/code&gt; and/or &lt;code&gt;&lt;a href=&quot;../basic_streambuf/pptr&quot;&gt;std::basic_streambuf::pptr&lt;/a&gt;&lt;/code&gt;, if possible, to the position indicated by &lt;code&gt;sp&lt;/code&gt;.</source>
          <target state="translated">将 &lt;code&gt;&lt;a href=&quot;../basic_streambuf/gptr&quot;&gt;std::basic_streambuf::gptr&lt;/a&gt;&lt;/code&gt; 和/或 &lt;code&gt;&lt;a href=&quot;../basic_streambuf/pptr&quot;&gt;std::basic_streambuf::pptr&lt;/a&gt;&lt;/code&gt; 到 &lt;code&gt;sp&lt;/code&gt; 指示的位置。</target>
        </trans-unit>
        <trans-unit id="e83fc3ab42798d2a8c07af47feff66646b3866f2" translate="yes" xml:space="preserve">
          <source>Repositions &lt;code&gt;&lt;a href=&quot;../basic_streambuf/gptr&quot;&gt;std::basic_streambuf::gptr&lt;/a&gt;&lt;/code&gt; and/or &lt;code&gt;&lt;a href=&quot;../basic_streambuf/pptr&quot;&gt;std::basic_streambuf::pptr&lt;/a&gt;&lt;/code&gt;, if possible, to the position that corresponds to exactly &lt;code&gt;off&lt;/code&gt; characters from beginning, end, or current position of the get and/or put area of the buffer.</source>
          <target state="translated">将 &lt;code&gt;&lt;a href=&quot;../basic_streambuf/gptr&quot;&gt;std::basic_streambuf::gptr&lt;/a&gt;&lt;/code&gt; 和/或 &lt;code&gt;&lt;a href=&quot;../basic_streambuf/pptr&quot;&gt;std::basic_streambuf::pptr&lt;/a&gt;&lt;/code&gt; 重新定位到与缓冲区的get和/或put区域的开始，结尾或当前位置开始完全 &lt;code&gt;off&lt;/code&gt; 字符相对应的位置。</target>
        </trans-unit>
        <trans-unit id="2ac0641425ccffae41678552c1163b00ffe67ff9" translate="yes" xml:space="preserve">
          <source>Repositions the</source>
          <target state="translated">重新定位</target>
        </trans-unit>
        <trans-unit id="052fd56b4ead08eb06f7c5d41c83db7837c358cc" translate="yes" xml:space="preserve">
          <source>Repositions the file pointer, if possible, to the position indicated by &lt;code&gt;sp&lt;/code&gt;.</source>
          <target state="translated">如果可能，将文件指针重新定位到 &lt;code&gt;sp&lt;/code&gt; 指示的位置。</target>
        </trans-unit>
        <trans-unit id="9b11325c2589354702e1662a98ad6fbe9e6883d0" translate="yes" xml:space="preserve">
          <source>Repositions the file pointer, if possible, to the position that corresponds to exactly &lt;code&gt;off&lt;/code&gt; characters from beginning, end, or current position of the file (depending on the value of &lt;code&gt;dir&lt;/code&gt;.</source>
          <target state="translated">如果可能，将文件指针重新定位到与文件的开头，结尾或当前位置完全 &lt;code&gt;off&lt;/code&gt; 字符相对应的位置（取决于 &lt;code&gt;dir&lt;/code&gt; 的值）。</target>
        </trans-unit>
        <trans-unit id="360bc539904b3901915f57b0aead8cb40373f0de" translate="yes" xml:space="preserve">
          <source>Representation</source>
          <target state="translated">Representation</target>
        </trans-unit>
        <trans-unit id="60cf7479969284de43e3ef3c900c3f40f5d8f1c3" translate="yes" xml:space="preserve">
          <source>Represents a character classification and is capable of holding an implementation specific set returned by &lt;code&gt;lookup_classname&lt;/code&gt;. Must be a &lt;a href=&quot;../named_req/bitmasktype&quot;&gt;BitmaskType&lt;/a&gt;.</source>
          <target state="translated">表示字符分类，并且能够保存由 &lt;code&gt;lookup_classname&lt;/code&gt; 返回的特定于实现的集合。必须为&lt;a href=&quot;../named_req/bitmasktype&quot;&gt;BitmaskType&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="8b98478a419a269d4c5494e0c4ad4b363b5cf1f3" translate="yes" xml:space="preserve">
          <source>Represents a directory entry. The object stores a &lt;code&gt;path&lt;/code&gt; as a member and may also store additional file attributes (hard link count, status, symlink status file size, and last write time) during directory iteration.</source>
          <target state="translated">代表目录条目。该对象将 &lt;code&gt;path&lt;/code&gt; 存储为成员，并且还可以在目录迭代期间存储其他文件属性（硬链接数，状态，符号链接状态文件大小和上次写入时间）。</target>
        </trans-unit>
        <trans-unit id="2847d1283befde0d8bfb244e99658270d8ac8791" translate="yes" xml:space="preserve">
          <source>Represents file time.</source>
          <target state="translated">代表文件时间。</target>
        </trans-unit>
        <trans-unit id="ebc6169d1804307dba7baec52c117c7460669ebf" translate="yes" xml:space="preserve">
          <source>Represents the filesystem information as determined by &lt;a href=&quot;space&quot;&gt;space&lt;/a&gt;.</source>
          <target state="translated">表示由&lt;a href=&quot;space&quot;&gt;space&lt;/a&gt;确定的文件系统信息。</target>
        </trans-unit>
        <trans-unit id="d008bdf0f0d206235df435983aa3e7528e62afda" translate="yes" xml:space="preserve">
          <source>Requests the removal of unused capacity.</source>
          <target state="translated">请求清除未使用的能力;</target>
        </trans-unit>
        <trans-unit id="09a428f93ec07a73d726f8bd037ecacfaaf8b044" translate="yes" xml:space="preserve">
          <source>Requirements</source>
          <target state="translated">Requirements</target>
        </trans-unit>
        <trans-unit id="0d8f3993addaf8e899b3c59e63854cff7e0eb7d1" translate="yes" xml:space="preserve">
          <source>Requirements may refer to the template parameters that are in scope, to the local parameters introduced in the parameter-list, and to any other declarations that are visible from the enclosing context.</source>
          <target state="translated">需求可以指范围内的模板参数,也可以指参数列表中引入的本地参数,还可以指从包围上下文中可见的任何其他声明。</target>
        </trans-unit>
        <trans-unit id="07bdc031513dce1fb2a64d8eb7bcb9daa882171f" translate="yes" xml:space="preserve">
          <source>Requirements on &lt;a href=&quot;index&quot;&gt;standard library headers&lt;/a&gt;</source>
          <target state="translated">对&lt;a href=&quot;index&quot;&gt;标准库头的&lt;/a&gt;要求</target>
        </trans-unit>
        <trans-unit id="1f8dbc12b297c32f580a44ea38a02ec009a78fea" translate="yes" xml:space="preserve">
          <source>Requirements on &lt;a href=&quot;language/memory_model&quot;&gt;multi-threaded executions and data races&lt;/a&gt;</source>
          <target state="translated">对&lt;a href=&quot;language/memory_model&quot;&gt;多线程执行和数据竞争的要求&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="81a161b98b768be8dd2aa59a15736e9e78710e77" translate="yes" xml:space="preserve">
          <source>Requirements on the &lt;a href=&quot;language/main_function&quot;&gt;&lt;code&gt;main&lt;/code&gt;&lt;/a&gt; function</source>
          <target state="translated">&lt;a href=&quot;language/main_function&quot;&gt; &lt;code&gt;main&lt;/code&gt; &lt;/a&gt;功能要求</target>
        </trans-unit>
        <trans-unit id="63c2178c36666b52b538ae4daf84c57f71791918" translate="yes" xml:space="preserve">
          <source>Requires</source>
          <target state="translated">Requires</target>
        </trans-unit>
        <trans-unit id="41d4117b84f0b33be5f762a3de23b4514ac6a40a" translate="yes" xml:space="preserve">
          <source>Requires clauses</source>
          <target state="translated">需要的条款</target>
        </trans-unit>
        <trans-unit id="8652c4da3dc8061f0f50572e1c360d02a0e58cd8" translate="yes" xml:space="preserve">
          <source>Requires expressions</source>
          <target state="translated">需要表达式</target>
        </trans-unit>
        <trans-unit id="f3b5a76925d43fdbb53b48f2da84a49a93d7975d" translate="yes" xml:space="preserve">
          <source>Requires that 0 &amp;le; p &amp;le; 1 and 0 &amp;le; t.</source>
          <target state="translated">要求0&amp;le;p&amp;le;1和0&amp;le;t。</target>
        </trans-unit>
        <trans-unit id="58c99fe6c0186ccc2e44bb3d6890e9a1601fd99e" translate="yes" xml:space="preserve">
          <source>Requires that 0 &amp;lt; lambda.</source>
          <target state="translated">要求0 &amp;lt;lambda。</target>
        </trans-unit>
        <trans-unit id="397d93b3982a8fc2b5cce2cc49c595d2b0c06bc7" translate="yes" xml:space="preserve">
          <source>Requires that 0 &amp;lt; mean.</source>
          <target state="translated">要求0 &amp;lt;平均值。</target>
        </trans-unit>
        <trans-unit id="96aa197e588604a76bc9719a811c2574a38900f3" translate="yes" xml:space="preserve">
          <source>Requires that 0 &amp;lt; p &amp;le; 1 and 0 &amp;lt; k.</source>
          <target state="translated">要求0 &amp;lt;p&amp;le;1和0 &amp;lt;k。</target>
        </trans-unit>
        <trans-unit id="e07d5bfcdf176dad718eb6fcf21d087b4d96cd6a" translate="yes" xml:space="preserve">
          <source>Requires that 0 &amp;lt; p &amp;lt; 1.</source>
          <target state="translated">要求0 &amp;lt;p &amp;lt;1。</target>
        </trans-unit>
        <trans-unit id="674eba18406f7a07f7c1349d4a5f2229f90cdfc3" translate="yes" xml:space="preserve">
          <source>Requires that &lt;code&gt;&lt;a href=&quot;../../types/is_copy_constructible&quot;&gt;std::is_copy_constructible&lt;/a&gt;&amp;lt;Ti&amp;gt;::value&lt;/code&gt; is &lt;code&gt;true&lt;/code&gt; for all &lt;code&gt;i&lt;/code&gt;.</source>
          <target state="translated">要求 &lt;code&gt;&lt;a href=&quot;../../types/is_copy_constructible&quot;&gt;std::is_copy_constructible&lt;/a&gt;&amp;lt;Ti&amp;gt;::value&lt;/code&gt; 对所有 &lt;code&gt;i&lt;/code&gt; 均为 &lt;code&gt;true&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="5ea7d0931cf135cbe6bf5d1f73ebc6569c5b6ba6" translate="yes" xml:space="preserve">
          <source>Requires that &lt;code&gt;&lt;a href=&quot;../../types/is_move_constructible&quot;&gt;std::is_move_constructible&lt;/a&gt;&amp;lt;Ti&amp;gt;::value&lt;/code&gt; is &lt;code&gt;true&lt;/code&gt; for all &lt;code&gt;i&lt;/code&gt;.</source>
          <target state="translated">要求 &lt;code&gt;&lt;a href=&quot;../../types/is_move_constructible&quot;&gt;std::is_move_constructible&lt;/a&gt;&amp;lt;Ti&amp;gt;::value&lt;/code&gt; 对所有 &lt;code&gt;i&lt;/code&gt; 均为 &lt;code&gt;true&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="90d7438b77852a9154b3a481a4c5cf2be4bf13d3" translate="yes" xml:space="preserve">
          <source>Requires that &lt;code&gt;&lt;a href=&quot;../types/decay&quot;&gt;std::decay&lt;/a&gt;&amp;lt;T&amp;gt;::type&lt;/code&gt; is &lt;a href=&quot;../named_req/copyconstructible&quot;&gt;CopyConstructible&lt;/a&gt;.</source>
          <target state="translated">要求 &lt;code&gt;&lt;a href=&quot;../types/decay&quot;&gt;std::decay&lt;/a&gt;&amp;lt;T&amp;gt;::type&lt;/code&gt; 是&lt;a href=&quot;../named_req/copyconstructible&quot;&gt;CopyConstructible&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="c96db6fe8e545460f4be3d8e606a04eb3630029f" translate="yes" xml:space="preserve">
          <source>Requires that &lt;code&gt;from &amp;lt;= from_end &amp;amp;&amp;amp; to &amp;lt;= to_end&lt;/code&gt; and that &lt;code&gt;state&lt;/code&gt; either representing the initial shift state or obtained by converting the preceding characters in the sequence.</source>
          <target state="translated">要求 &lt;code&gt;from &amp;lt;= from_end &amp;amp;&amp;amp; to &amp;lt;= to_end&lt;/code&gt; 并且该 &lt;code&gt;state&lt;/code&gt; 代表初始换挡状态或通过转换序列中的先前字符而获得。</target>
        </trans-unit>
        <trans-unit id="cac05ce174c8eb4cb5eb7ff6fbe11d4c74830225" translate="yes" xml:space="preserve">
          <source>Requires that &lt;code&gt;get_deleter()(get())&lt;/code&gt; does not throw exceptions.</source>
          <target state="translated">要求 &lt;code&gt;get_deleter()(get())&lt;/code&gt; 不引发异常。</target>
        </trans-unit>
        <trans-unit id="0052230ab5a1f5c10fb5ebdbe6cff855e6c20d8b" translate="yes" xml:space="preserve">
          <source>Requires that a &amp;le; b and b-a &amp;le; std::numeric_limits&amp;lt;RealType&amp;gt;::max().</source>
          <target state="translated">要求a&amp;le;b和ba&amp;le;std :: numeric_limits &amp;lt;RealType&amp;gt; :: max（）。</target>
        </trans-unit>
        <trans-unit id="c06cfdadfbed7855f39290e5e505459d07775307" translate="yes" xml:space="preserve">
          <source>Requires: &lt;code&gt;p&lt;/code&gt; not in &lt;code&gt;[s,s+n)&lt;/code&gt;</source>
          <target state="translated">要求： &lt;code&gt;p&lt;/code&gt; 不在 &lt;code&gt;[s,s+n)&lt;/code&gt; 中</target>
        </trans-unit>
        <trans-unit id="c5957465db8860423fda4366954767439b6edf20" translate="yes" xml:space="preserve">
          <source>Reserved macro names</source>
          <target state="translated">保留的宏名称</target>
        </trans-unit>
        <trans-unit id="ed1beabd25888481ef7e7320f042c946ece8ae71" translate="yes" xml:space="preserve">
          <source>Resets the error flags and the &lt;code&gt;EOF&lt;/code&gt; indicator for the given file stream.</source>
          <target state="translated">重置给定文件流的错误标志和 &lt;code&gt;EOF&lt;/code&gt; 指示器。</target>
        </trans-unit>
        <trans-unit id="a888a6f6a29ecf00d51530e3511d749b1fd644b5" translate="yes" xml:space="preserve">
          <source>Resets the internal state of the distribution object. After a call to this function, the next call to &lt;code&gt;&lt;a href=&quot;operator()&quot;&gt;operator()&lt;/a&gt;&lt;/code&gt; on the distribution object will not be dependent on previous calls to &lt;code&gt;&lt;a href=&quot;operator()&quot;&gt;operator()&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">重置分发对象的内部状态。调用此函数后，下一个对分发对象上的 &lt;code&gt;&lt;a href=&quot;operator()&quot;&gt;operator()&lt;/a&gt;&lt;/code&gt; 的调用将不依赖于先前对 &lt;code&gt;&lt;a href=&quot;operator()&quot;&gt;operator()&lt;/a&gt;&lt;/code&gt; 的调用。</target>
        </trans-unit>
        <trans-unit id="5300aeccf7cf0c0f2e7be1ca381d0cf179ff9003" translate="yes" xml:space="preserve">
          <source>Resets the internal state of the distribution object. After a call to this function, the next call to &lt;code&gt;operator()&lt;/code&gt; on the distribution object will not be dependent on previous calls to &lt;code&gt;operator()&lt;/code&gt;.</source>
          <target state="translated">重置分发对象的内部状态。调用此函数后，下一个对分发对象上的 &lt;code&gt;operator()&lt;/code&gt; 的调用将不依赖于先前对 &lt;code&gt;operator()&lt;/code&gt; 的调用。</target>
        </trans-unit>
        <trans-unit id="727f7d0ef24d2dc40d3e440671d9a8ae1b3c466a" translate="yes" xml:space="preserve">
          <source>Resets the internal state of the distribution. The next call to &lt;code&gt;operator()&lt;/code&gt; on &lt;code&gt;d&lt;/code&gt; will not depend on values produced by any engine prior to &lt;code&gt;reset()&lt;/code&gt;.</source>
          <target state="translated">重置分发的内部状态。 &lt;code&gt;d&lt;/code&gt; 上对 &lt;code&gt;operator()&lt;/code&gt; 的下一次调用将不取决于任何引擎在 &lt;code&gt;reset()&lt;/code&gt; 之前产生的值。</target>
        </trans-unit>
        <trans-unit id="93ffc731b5b3277e8c0ef8a946c693d0f41ba1c3" translate="yes" xml:space="preserve">
          <source>Resets the state abandoning the results of previous executions. New shared state is constructed.</source>
          <target state="translated">重置状态,放弃之前的执行结果。构建新的共享状态。</target>
        </trans-unit>
        <trans-unit id="8d24ac965c60eb16c2f52e726963bfd242eaa2de" translate="yes" xml:space="preserve">
          <source>Resizes the container to contain &lt;code&gt;count&lt;/code&gt; elements.</source>
          <target state="translated">调整容器的大小以包含 &lt;code&gt;count&lt;/code&gt; 元素。</target>
        </trans-unit>
        <trans-unit id="5f2f5f969a5ac32748ade89b3baea2483adfbf60" translate="yes" xml:space="preserve">
          <source>Resizes the string to contain &lt;code&gt;count&lt;/code&gt; characters.</source>
          <target state="translated">调整字符串的大小以包含 &lt;code&gt;count&lt;/code&gt; 字符。</target>
        </trans-unit>
        <trans-unit id="20b94fbed531540997834b23e804cf1bef331d9e" translate="yes" xml:space="preserve">
          <source>Resizes the valarray to contain &lt;code&gt;count&lt;/code&gt; elements and assigns &lt;code&gt;value&lt;/code&gt; to each element.</source>
          <target state="translated">调整valarray的大小以包含 &lt;code&gt;count&lt;/code&gt; 元素，并为每个元素分配 &lt;code&gt;value&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="8129d5e98af0ecf86dd6edb307a5f0cff0cc3304" translate="yes" xml:space="preserve">
          <source>Resource Acquisition Is Initialization</source>
          <target state="translated">资源获取是初始化</target>
        </trans-unit>
        <trans-unit id="e0b796ded4a0d39c45dff51e9ab8b3830740661f" translate="yes" xml:space="preserve">
          <source>Resource acquisition is initialization</source>
          <target state="translated">资源获取是初始化</target>
        </trans-unit>
        <trans-unit id="4d2b9449646a0ee5d5e77b1f7dfdbd7898f4fbf0" translate="yes" xml:space="preserve">
          <source>Resource deadlock would occur</source>
          <target state="translated">将出现资源僵局</target>
        </trans-unit>
        <trans-unit id="d9abc300c6e1d878a14615dcfd536a7617e8e97c" translate="yes" xml:space="preserve">
          <source>Resource unavailable, try again</source>
          <target state="translated">资源不可用,请重试</target>
        </trans-unit>
        <trans-unit id="6ed6fb8992c88b4662804ffa0f8489faa0d4121b" translate="yes" xml:space="preserve">
          <source>Restores the distribution parameters and internal state with data read from &lt;code&gt;is&lt;/code&gt;. The formatting flags of &lt;code&gt;is&lt;/code&gt; are unchanged. The data must have been written using a stream with the same locale, &lt;code&gt;CharT&lt;/code&gt; and &lt;code&gt;Traits&lt;/code&gt; stream template parameters, otherwise the behavior is undefined. If bad input is encountered, &lt;code&gt;is.setstate(std::ios::failbit)&lt;/code&gt; is called, which may throw &lt;code&gt;&lt;a href=&quot;../io/ios_base/failure&quot;&gt;std::ios_base::failure&lt;/a&gt;&lt;/code&gt;. &lt;code&gt;d&lt;/code&gt; is unchanged in that case.</source>
          <target state="translated">使用从 &lt;code&gt;is&lt;/code&gt; 中读取的数据恢复分发参数和内部状态。的格式化标志 &lt;code&gt;is&lt;/code&gt; 不变。必须使用具有相同语言环境， &lt;code&gt;CharT&lt;/code&gt; 和 &lt;code&gt;Traits&lt;/code&gt; 流模板参数的流写入数据，否则行为是不确定的。如果遇到错误的输入， &lt;code&gt;is.setstate(std::ios::failbit)&lt;/code&gt; ，这可能会引发 &lt;code&gt;&lt;a href=&quot;../io/ios_base/failure&quot;&gt;std::ios_base::failure&lt;/a&gt;&lt;/code&gt; 。在这种情况下， &lt;code&gt;d&lt;/code&gt; 不变。</target>
        </trans-unit>
        <trans-unit id="38ad8517f1dfe99e4d87fbdbdd90a3a14b28b872" translate="yes" xml:space="preserve">
          <source>Restrictions</source>
          <target state="translated">Restrictions</target>
        </trans-unit>
        <trans-unit id="5faa59d4bc3756040b8ce9e673c09f929e6ee9ba" translate="yes" xml:space="preserve">
          <source>Result</source>
          <target state="translated">Result</target>
        </trans-unit>
        <trans-unit id="299a15e6a23badee14ff1ded59c353807a27199b" translate="yes" xml:space="preserve">
          <source>Result too large</source>
          <target state="translated">结果太大</target>
        </trans-unit>
        <trans-unit id="612e12d29278b5519294bc25cdaddffec6d0f1c6" translate="yes" xml:space="preserve">
          <source>Results</source>
          <target state="translated">Results</target>
        </trans-unit>
        <trans-unit id="cea123540a55db38b484da4807ab7cb4a974db66" translate="yes" xml:space="preserve">
          <source>Rethrows the stored exception. If there is no stored exceptions (i.e. &lt;code&gt;&lt;a href=&quot;nested_ptr&quot;&gt;nested_ptr()&lt;/a&gt;&lt;/code&gt; returns null pointer), then &lt;code&gt;&lt;a href=&quot;../terminate&quot;&gt;std::terminate&lt;/a&gt;&lt;/code&gt; is called.</source>
          <target state="translated">抛出存储的异常。如果没有存储的异常（即 &lt;code&gt;&lt;a href=&quot;nested_ptr&quot;&gt;nested_ptr()&lt;/a&gt;&lt;/code&gt; 返回空指针），则调用 &lt;code&gt;&lt;a href=&quot;../terminate&quot;&gt;std::terminate&lt;/a&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="478da4354d2afc323b67dd66ca609cf070d557f6" translate="yes" xml:space="preserve">
          <source>Retrieve single elements or portions of the array.</source>
          <target state="translated">检索数组中的单个元素或部分元素。</target>
        </trans-unit>
        <trans-unit id="810745f90ecb529e1df313ec5ba81d5685c14792" translate="yes" xml:space="preserve">
          <source>Retrieves a copy of the &lt;a href=&quot;../month&quot;&gt;&lt;code&gt;month&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../weekday_indexed&quot;&gt;&lt;code&gt;weekday_indexed&lt;/code&gt;&lt;/a&gt; objects stored in &lt;code&gt;*this&lt;/code&gt;.</source>
          <target state="translated">检索存储在 &lt;code&gt;*this&lt;/code&gt; 中的&lt;a href=&quot;../month&quot;&gt; &lt;code&gt;month&lt;/code&gt; &lt;/a&gt;和&lt;a href=&quot;../weekday_indexed&quot;&gt; &lt;code&gt;weekday_indexed&lt;/code&gt; &lt;/a&gt;对象的副本。</target>
        </trans-unit>
        <trans-unit id="edd61d33d926cd2e0f4ffd706e5146f3ddbca4cd" translate="yes" xml:space="preserve">
          <source>Retrieves a copy of the &lt;a href=&quot;../month&quot;&gt;&lt;code&gt;month&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../weekday_last&quot;&gt;&lt;code&gt;weekday_last&lt;/code&gt;&lt;/a&gt; objects stored in &lt;code&gt;*this&lt;/code&gt;.</source>
          <target state="translated">检索存储在 &lt;code&gt;*this&lt;/code&gt; 中的&lt;a href=&quot;../month&quot;&gt; &lt;code&gt;month&lt;/code&gt; &lt;/a&gt;和&lt;a href=&quot;../weekday_last&quot;&gt; &lt;code&gt;weekday_last&lt;/code&gt; &lt;/a&gt;对象的副本。</target>
        </trans-unit>
        <trans-unit id="341782330e03c8f3862f1071aaf678ed94e1dda6" translate="yes" xml:space="preserve">
          <source>Retrieves a copy of the &lt;code&gt;std::chrono::month&lt;/code&gt; object stored in &lt;code&gt;*this&lt;/code&gt;.</source>
          <target state="translated">检索存储在 &lt;code&gt;*this&lt;/code&gt; 中的 &lt;code&gt;std::chrono::month&lt;/code&gt; 对象的副本。</target>
        </trans-unit>
        <trans-unit id="1154f92c0c4185c47b26d010690870436bae2369" translate="yes" xml:space="preserve">
          <source>Retrieves a copy of the &lt;code&gt;std::chrono::weekday&lt;/code&gt; object stored in &lt;code&gt;*this&lt;/code&gt;.</source>
          <target state="translated">检索存储在 &lt;code&gt;*this&lt;/code&gt; 中的 &lt;code&gt;std::chrono::weekday&lt;/code&gt; 对象的副本。</target>
        </trans-unit>
        <trans-unit id="1b3164e2e5e2a0ffa4cc8774ebc37cee3f819de0" translate="yes" xml:space="preserve">
          <source>Retrieves the field values stored in this &lt;code&gt;year_month_day_last&lt;/code&gt; object.</source>
          <target state="translated">检索存储在 &lt;code&gt;year_month_day_last&lt;/code&gt; 对象中的字段值。</target>
        </trans-unit>
        <trans-unit id="4fa99b560c685b2de8135d23b85d2f5728e5d655" translate="yes" xml:space="preserve">
          <source>Retrieves the field values stored in this &lt;code&gt;year_month_weekday&lt;/code&gt; object.</source>
          <target state="translated">检索存储在 &lt;code&gt;year_month_weekday&lt;/code&gt; 对象中的字段值。</target>
        </trans-unit>
        <trans-unit id="c241cf0fec1b383402b612900e62489f3218349e" translate="yes" xml:space="preserve">
          <source>Retrieves the field values stored in this &lt;code&gt;year_month_weekday_last&lt;/code&gt; object.</source>
          <target state="translated">检索存储在 &lt;code&gt;year_month_weekday_last&lt;/code&gt; 对象中的字段值。</target>
        </trans-unit>
        <trans-unit id="86e5af707a587a9d63db364050c45295bcda7433" translate="yes" xml:space="preserve">
          <source>Retrieves the month and day values stored in this &lt;code&gt;month_day&lt;/code&gt; object.</source>
          <target state="translated">检索存储在此 &lt;code&gt;month_day&lt;/code&gt; 对象中的月和日值。</target>
        </trans-unit>
        <trans-unit id="a04d47e1bb2d4306e543fd34db98a85565bcf6df" translate="yes" xml:space="preserve">
          <source>Retrieves the stored time zone pointer.</source>
          <target state="translated">检索存储的时区指针。</target>
        </trans-unit>
        <trans-unit id="f8416bd1bba852414cf31f9f7ce33b3bc75aa8c7" translate="yes" xml:space="preserve">
          <source>Retrieves the year and month values stored in this &lt;code&gt;year_month&lt;/code&gt; object.</source>
          <target state="translated">检索存储在 &lt;code&gt;year_month&lt;/code&gt; 对象中的年和月值。</target>
        </trans-unit>
        <trans-unit id="d488335efe677fc140bc1087f3b17bf5d1247856" translate="yes" xml:space="preserve">
          <source>Retrieves the year, month and day values stored in this &lt;code&gt;year_month_day&lt;/code&gt; object.</source>
          <target state="translated">检索存储在 &lt;code&gt;year_month_day&lt;/code&gt; 对象中的年，月和日值。</target>
        </trans-unit>
        <trans-unit id="24f096b221f9534bcad007f2b5a32b490950b5b5" translate="yes" xml:space="preserve">
          <source>Return</source>
          <target state="translated">Return</target>
        </trans-unit>
        <trans-unit id="88f2b3f5a0eff8fce83b5ded45c3cac6f39abfd9" translate="yes" xml:space="preserve">
          <source>Return Type</source>
          <target state="translated">返回类型</target>
        </trans-unit>
        <trans-unit id="4ed1a51e3c7c6cf43a3633b3e58f69e74b9dd263" translate="yes" xml:space="preserve">
          <source>Return Value</source>
          <target state="translated">返回值</target>
        </trans-unit>
        <trans-unit id="e20ebfe1c5cd7adb32327bf554149ef3dc300428" translate="yes" xml:space="preserve">
          <source>Return Value Optimization</source>
          <target state="translated">回报价值优化</target>
        </trans-unit>
        <trans-unit id="027b87ed7cdb8ad1b1bbfbf20caf8edfcd00f17f" translate="yes" xml:space="preserve">
          <source>Return memory to the pool</source>
          <target state="translated">将内存返回到池中</target>
        </trans-unit>
        <trans-unit id="21f2dc0e7803f71f5ca6b614da1ff4266539743d" translate="yes" xml:space="preserve">
          <source>Return the &lt;code&gt;n&lt;/code&gt;th predecessor of iterator &lt;code&gt;it&lt;/code&gt;.</source>
          <target state="translated">返回 &lt;code&gt;it&lt;/code&gt; 的第 &lt;code&gt;n&lt;/code&gt; 个迭代器it。</target>
        </trans-unit>
        <trans-unit id="ac3f5d58e44083deb51c0570a203115e6d39457a" translate="yes" xml:space="preserve">
          <source>Return the &lt;code&gt;n&lt;/code&gt;th successor of iterator &lt;code&gt;it&lt;/code&gt;.</source>
          <target state="translated">返回 &lt;code&gt;n&lt;/code&gt; 次迭代的继任者 &lt;code&gt;it&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="41b1fb407b7fa442b77381701968fb175362cf78" translate="yes" xml:space="preserve">
          <source>Return type</source>
          <target state="translated">返回类型</target>
        </trans-unit>
        <trans-unit id="405e9fcb7cee13b054cfb8ad1b2225903096dc38" translate="yes" xml:space="preserve">
          <source>Return type deduction</source>
          <target state="translated">返还型扣款</target>
        </trans-unit>
        <trans-unit id="e41758d5c4632d7b15eaeb29adcd95b61edcd798" translate="yes" xml:space="preserve">
          <source>Return type deduction for normal functions</source>
          <target state="translated">普通函数的返回类型扣减</target>
        </trans-unit>
        <trans-unit id="b99edceffec9e7477ae4f66857ad0feb76f9fb71" translate="yes" xml:space="preserve">
          <source>Return type. If not present it's implied by the function return statements (or void if it doesn't return any value)</source>
          <target state="translated">返回类型。如果不存在,则由函数返回语句暗示(如果不返回任何值,则为void)。</target>
        </trans-unit>
        <trans-unit id="232f3db04c4faa620bfbfc11fd3689a472ef9881" translate="yes" xml:space="preserve">
          <source>Return value</source>
          <target state="translated">返回值</target>
        </trans-unit>
        <trans-unit id="f3d7c9610d9fd6e95cf7be845697f6014183c350" translate="yes" xml:space="preserve">
          <source>Return value optimization is mandatory and no longer considered as copy elision; see above.</source>
          <target state="translated">返回值优化是必须的,不再考虑复制洗练,见上文。</target>
        </trans-unit>
        <trans-unit id="9d42e2f739c476b4724ed40443cd1bdc8b0b0c31" translate="yes" xml:space="preserve">
          <source>Return values</source>
          <target state="translated">返回值</target>
        </trans-unit>
        <trans-unit id="7b57a983192aed1ae8478f185e1932c3258eb180" translate="yes" xml:space="preserve">
          <source>Returned iterator points at the copy of &lt;code&gt;rv&lt;/code&gt; inserted into &lt;code&gt;a&lt;/code&gt;</source>
          <target state="translated">在副本返回的迭代点 &lt;code&gt;rv&lt;/code&gt; 插入 &lt;code&gt;a&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="524f9b62aa155861ce75b12ae0cad27c2086c769" translate="yes" xml:space="preserve">
          <source>Returned iterator points at the copy of &lt;code&gt;t&lt;/code&gt; inserted into &lt;code&gt;a&lt;/code&gt;</source>
          <target state="translated">在副本返回的迭代点 &lt;code&gt;t&lt;/code&gt; 插入 &lt;code&gt;a&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="19d1416565151e295523ac527a8f43e1da2b920c" translate="yes" xml:space="preserve">
          <source>Returned iterator points at the copy of the first element inserted into &lt;code&gt;a&lt;/code&gt; or is &lt;code&gt;p&lt;/code&gt; for &lt;code&gt;n==0&lt;/code&gt;</source>
          <target state="translated">返回的迭代器指向插入到 &lt;code&gt;a&lt;/code&gt; 或is中的 &lt;code&gt;p&lt;/code&gt; 一个元素的副本（对于 &lt;code&gt;n==0&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="c4585900ba4e949b764c04121c09f228d09ce63f" translate="yes" xml:space="preserve">
          <source>Returned iterator points at the copy of the first element inserted into &lt;code&gt;a&lt;/code&gt; or is &lt;code&gt;p&lt;/code&gt; if &lt;code&gt;il&lt;/code&gt; is empty.</source>
          <target state="translated">返回的迭代器指向插入到 &lt;code&gt;a&lt;/code&gt; 或 &lt;code&gt;p&lt;/code&gt; 中的第一个元素的副本（如果 &lt;code&gt;il&lt;/code&gt; 为空）。</target>
        </trans-unit>
        <trans-unit id="2ad496d62afc4519b1b04cd9b30a985b0c1fdd95" translate="yes" xml:space="preserve">
          <source>Returned iterator points at the element constructed from &lt;code&gt;args&lt;/code&gt; into &lt;code&gt;a&lt;/code&gt;</source>
          <target state="translated">在元件从构成返回的迭代点 &lt;code&gt;args&lt;/code&gt; 成 &lt;code&gt;a&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="752d1525c51ff56026c40b5d2cf1a4f120012cd4" translate="yes" xml:space="preserve">
          <source>Returned iterator points at the element that was immediately following &lt;code&gt;q&lt;/code&gt; prior to erasure, or &lt;code&gt;a.end()&lt;/code&gt; if no such element exists.</source>
          <target state="translated">返回的迭代器指向擦除之前紧接 &lt;code&gt;q&lt;/code&gt; 之后的元素，如果不存在则 &lt;code&gt;a.end()&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="eddb85ccd2f9833a1c82585f27d5cd07d3c75689" translate="yes" xml:space="preserve">
          <source>Returned iterator points at the element that was pointed by &lt;code&gt;q2&lt;/code&gt; prior to any erasure, or &lt;code&gt;a.end()&lt;/code&gt; if no such element exists.</source>
          <target state="translated">返回的迭代器指向任何擦除之前由 &lt;code&gt;q2&lt;/code&gt; 指向的元素，如果不存在则 &lt;code&gt;a.end()&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="15f6ded0a15edbd792d645ece89baed28bf1ac4c" translate="yes" xml:space="preserve">
          <source>Returning by value may involve construction and copy/move of a temporary object, unless &lt;a href=&quot;copy_elision&quot;&gt;copy elision&lt;/a&gt; is used. Specifically, the conditions for copy/move are as follows:</source>
          <target state="translated">按值返回可能涉及构造和复制/移动临时对象，除非使用&lt;a href=&quot;copy_elision&quot;&gt;复制省略&lt;/a&gt;。具体来说，复制/移动的条件如下：</target>
        </trans-unit>
        <trans-unit id="b9e17a7da7755b1715217e80d2bfe02de58c0a2d" translate="yes" xml:space="preserve">
          <source>Returning from the &lt;a href=&quot;../../language/main_function&quot;&gt;main function&lt;/a&gt;, either by a &lt;code&gt;return&lt;/code&gt; statement or by reaching the end of the function performs the normal function termination (calls the destructors of the variables with automatic &lt;a href=&quot;../../language/storage_duration&quot;&gt; storage durations&lt;/a&gt;) and then executes &lt;code&gt;std::exit&lt;/code&gt;, passing the argument of the return statement (or &lt;code&gt;​0​&lt;/code&gt; if implicit return was used) as &lt;code&gt;exit_code&lt;/code&gt;.</source>
          <target state="translated">从&lt;a href=&quot;../../language/main_function&quot;&gt;main函数&lt;/a&gt;返回，或者通过 &lt;code&gt;return&lt;/code&gt; 语句或者到达函数的结尾执行正常的函数终止（使用自动&lt;a href=&quot;../../language/storage_duration&quot;&gt;存储持续时间&lt;/a&gt;调用变量的析构函数），然后执行 &lt;code&gt;std::exit&lt;/code&gt; ，并传递return参数声明（或 &lt;code&gt;​0​&lt;/code&gt; 如果使用隐式返回）作为 &lt;code&gt;exit_code&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="9fbfc396e2c30ff31efa137e5792c967ee123199" translate="yes" xml:space="preserve">
          <source>Returns &lt;a href=&quot;objects#Alignment&quot;&gt;the alignment&lt;/a&gt;, in bytes, required for any instance of the type indicated by &lt;a href=&quot;type-id#Type_naming&quot;&gt;type-id&lt;/a&gt;, which is either complete type, an array type, or a reference type.</source>
          <target state="translated">返回由&lt;a href=&quot;type-id#Type_naming&quot;&gt;type-id&lt;/a&gt;指示的任何类型实例&lt;a href=&quot;objects#Alignment&quot;&gt;的对齐方式&lt;/a&gt;，以字节为单位，它是完整类型，数组类型或引用类型。</target>
        </trans-unit>
        <trans-unit id="348cc7dc84e54a513d9e9968e060b47854dd9d11" translate="yes" xml:space="preserve">
          <source>Returns &lt;code&gt;*this&lt;/code&gt;, which is now a copy of &lt;code&gt;other&lt;/code&gt;.</source>
          <target state="translated">返回 &lt;code&gt;*this&lt;/code&gt; ，现在是 &lt;code&gt;other&lt;/code&gt; 的副本。</target>
        </trans-unit>
        <trans-unit id="6a2d9028adbd56974b6b84a3554c3bdfd60e8e46" translate="yes" xml:space="preserve">
          <source>Returns &lt;code&gt;0&lt;/code&gt; if &lt;code&gt;*this&lt;/code&gt; does not represent the result of a successful match.</source>
          <target state="translated">如果 &lt;code&gt;*this&lt;/code&gt; 不表示成功匹配的结果，则返回 &lt;code&gt;0&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="657a094b10cdc274018462b06f54ca3fa1ab6f8f" translate="yes" xml:space="preserve">
          <source>Returns &lt;code&gt;&lt;a href=&quot;../forward&quot;&gt;std::forward&lt;/a&gt;&amp;lt;T&amp;gt;(t)&lt;/code&gt;.</source>
          <target state="translated">返回 &lt;code&gt;&lt;a href=&quot;../forward&quot;&gt;std::forward&lt;/a&gt;&amp;lt;T&amp;gt;(t)&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="b89661b79490440147cc747b0b4c745e3fb16be4" translate="yes" xml:space="preserve">
          <source>Returns &lt;code&gt;false&lt;/code&gt; if and only if the variant holds a value.</source>
          <target state="translated">当且仅当变量包含值时，才返回 &lt;code&gt;false&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="ce1b5cefbd279e9d9d799c7084e6f876d25f4e94" translate="yes" xml:space="preserve">
          <source>Returns &lt;code&gt;false&lt;/code&gt; otherwise.</source>
          <target state="translated">否则返回 &lt;code&gt;false&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="caff5dee6102d357a2abb03226077ddf3bdd5bc0" translate="yes" xml:space="preserve">
          <source>Returns &lt;code&gt;p&lt;/code&gt; such that &lt;code&gt;D(p).param() == p&lt;/code&gt;</source>
          <target state="translated">返回 &lt;code&gt;p&lt;/code&gt; 使得 &lt;code&gt;D(p).param() == p&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="ce54f7d92348d62480b8f44fad721d4d55bd4e67" translate="yes" xml:space="preserve">
          <source>Returns &lt;code&gt;true&lt;/code&gt; if a match exists, &lt;code&gt;false&lt;/code&gt; otherwise. In either case, the object &lt;code&gt;m&lt;/code&gt; is updated, as follows:</source>
          <target state="translated">如果存在匹配项，则返回 &lt;code&gt;true&lt;/code&gt; ，否则返回 &lt;code&gt;false&lt;/code&gt; 。无论哪种情况，对象 &lt;code&gt;m&lt;/code&gt; 都会更新，如下所示：</target>
        </trans-unit>
        <trans-unit id="423b663109ec653c815f28a2e8138317db6b8112" translate="yes" xml:space="preserve">
          <source>Returns &lt;code&gt;true&lt;/code&gt; if an error has occurred on the associated stream. Specifically, returns &lt;code&gt;true&lt;/code&gt; if &lt;code&gt;badbit&lt;/code&gt; or &lt;code&gt;failbit&lt;/code&gt; is set in &lt;code&gt;&lt;a href=&quot;rdstate&quot;&gt;rdstate()&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">如果相关流发生错误，则返回 &lt;code&gt;true&lt;/code&gt; 。具体地讲，返回 &lt;code&gt;true&lt;/code&gt; 如果 &lt;code&gt;badbit&lt;/code&gt; 或 &lt;code&gt;failbit&lt;/code&gt; 在设定 &lt;code&gt;&lt;a href=&quot;rdstate&quot;&gt;rdstate()&lt;/a&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="21382c59b8fbd47952cbe99a503db72ebbf67485" translate="yes" xml:space="preserve">
          <source>Returns &lt;code&gt;true&lt;/code&gt; if an error has occurred on the associated stream. Specifically, returns &lt;code&gt;true&lt;/code&gt; if &lt;code&gt;badbit&lt;/code&gt; or &lt;code&gt;failbit&lt;/code&gt; is set in &lt;code&gt;rdstate()&lt;/code&gt;.</source>
          <target state="translated">如果相关流发生错误，则返回 &lt;code&gt;true&lt;/code&gt; 。具体地讲，返回 &lt;code&gt;true&lt;/code&gt; 如果 &lt;code&gt;badbit&lt;/code&gt; 或 &lt;code&gt;failbit&lt;/code&gt; 在设定 &lt;code&gt;rdstate()&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="677115426004f5c622e2fdac2e7f78fe361e3c29" translate="yes" xml:space="preserve">
          <source>Returns &lt;code&gt;true&lt;/code&gt; if non-recoverable error has occurred on the associated stream. Specifically, returns &lt;code&gt;true&lt;/code&gt; if &lt;a href=&quot;../ios_base/iostate&quot;&gt;&lt;code&gt;badbit&lt;/code&gt;&lt;/a&gt; is set in &lt;code&gt;rdstate()&lt;/code&gt;.</source>
          <target state="translated">如果关联的流上发生了不可恢复的错误，则返回 &lt;code&gt;true&lt;/code&gt; 。具体地讲，返回 &lt;code&gt;true&lt;/code&gt; 如果&lt;a href=&quot;../ios_base/iostate&quot;&gt; &lt;code&gt;badbit&lt;/code&gt; &lt;/a&gt;在设置 &lt;code&gt;rdstate()&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="5095fc2b423a79130651d491d389d5a201f0235e" translate="yes" xml:space="preserve">
          <source>Returns &lt;code&gt;true&lt;/code&gt; if the associated stream has reached end-of-file. Specifically, returns &lt;code&gt;true&lt;/code&gt; if &lt;code&gt;eofbit&lt;/code&gt; is set in &lt;code&gt;&lt;a href=&quot;rdstate&quot;&gt;rdstate()&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">如果关联的流已到达文件末尾，则返回 &lt;code&gt;true&lt;/code&gt; 。具体来说，如果在 &lt;code&gt;&lt;a href=&quot;rdstate&quot;&gt;rdstate()&lt;/a&gt;&lt;/code&gt; 中设置了 &lt;code&gt;eofbit&lt;/code&gt; ，则返回 &lt;code&gt;true&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="7c65558038b2fbe265a1ebce462f93b617b0dd51" translate="yes" xml:space="preserve">
          <source>Returns &lt;code&gt;true&lt;/code&gt; if the character is classified as a blank character, &lt;code&gt;false&lt;/code&gt; otherwise.</source>
          <target state="translated">如果字符被分类为空白字符，则返回 &lt;code&gt;true&lt;/code&gt; ，否则返回 &lt;code&gt;false&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="26e2601b1af2a913e0d311a5bed9ad0474aac329" translate="yes" xml:space="preserve">
          <source>Returns &lt;code&gt;true&lt;/code&gt; if the character is classified as a control character, &lt;code&gt;false&lt;/code&gt; otherwise.</source>
          <target state="translated">如果字符被分类为控制字符，则返回 &lt;code&gt;true&lt;/code&gt; ，否则返回 &lt;code&gt;false&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="978b058aa31c4a0a1bd8c2ef70b1f1f2c2486956" translate="yes" xml:space="preserve">
          <source>Returns &lt;code&gt;true&lt;/code&gt; if the character is classified as a digit, &lt;code&gt;false&lt;/code&gt; otherwise.</source>
          <target state="translated">如果字符被分类为数字，则返回 &lt;code&gt;true&lt;/code&gt; ，否则返回 &lt;code&gt;false&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="d5b3184dbe096f21b012bac15b9cdd6238ce8723" translate="yes" xml:space="preserve">
          <source>Returns &lt;code&gt;true&lt;/code&gt; if the character is classified as a hexadecimal digit, &lt;code&gt;false&lt;/code&gt; otherwise.</source>
          <target state="translated">如果字符被分类为十六进制，则返回 &lt;code&gt;true&lt;/code&gt; ，否则返回 &lt;code&gt;false&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="d7ce10f3719eaab6be24e7a355cfa5003ccda8f3" translate="yes" xml:space="preserve">
          <source>Returns &lt;code&gt;true&lt;/code&gt; if the character is classified as a whitespace character, &lt;code&gt;false&lt;/code&gt; otherwise.</source>
          <target state="translated">如果字符被归类为空白字符，则返回 &lt;code&gt;true&lt;/code&gt; ，否则返回 &lt;code&gt;false&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="f50905994b335567050e180b52c780552a7e1317" translate="yes" xml:space="preserve">
          <source>Returns &lt;code&gt;true&lt;/code&gt; if the character is classified as alphabetic, &lt;code&gt;false&lt;/code&gt; otherwise.</source>
          <target state="translated">如果字符被分类为字母，则返回 &lt;code&gt;true&lt;/code&gt; ，否则返回 &lt;code&gt;false&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="766a31c3c1d3c2b10252ce2683b652670a8370ce" translate="yes" xml:space="preserve">
          <source>Returns &lt;code&gt;true&lt;/code&gt; if the character is classified as alphanumeric, &lt;code&gt;false&lt;/code&gt; otherwise.</source>
          <target state="translated">如果字符被分类为字母数字，则返回 &lt;code&gt;true&lt;/code&gt; ，否则返回 &lt;code&gt;false&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="759ef4ce510ee3f6b402f95235e43d011f83c842" translate="yes" xml:space="preserve">
          <source>Returns &lt;code&gt;true&lt;/code&gt; if the character is classified as graphic, &lt;code&gt;false&lt;/code&gt; otherwise.</source>
          <target state="translated">如果字符被归类为图形，则返回 &lt;code&gt;true&lt;/code&gt; ，否则返回 &lt;code&gt;false&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="407307b2bcbc029df72ce3929bb086da9b9742ad" translate="yes" xml:space="preserve">
          <source>Returns &lt;code&gt;true&lt;/code&gt; if the character is classified as lowercase, &lt;code&gt;false&lt;/code&gt; otherwise.</source>
          <target state="translated">如果字符被分类为小写，则返回 &lt;code&gt;true&lt;/code&gt; ，否则返回 &lt;code&gt;false&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="264844cf9a2a08c1a8569b0ad808fabb8cd24fd4" translate="yes" xml:space="preserve">
          <source>Returns &lt;code&gt;true&lt;/code&gt; if the character is classified as printable, &lt;code&gt;false&lt;/code&gt; otherwise.</source>
          <target state="translated">如果字符被归类为可打印，则返回 &lt;code&gt;true&lt;/code&gt; ，否则返回 &lt;code&gt;false&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="926f5168b6d529374c027f003364f04e34eac293" translate="yes" xml:space="preserve">
          <source>Returns &lt;code&gt;true&lt;/code&gt; if the character is classified as punctuation, &lt;code&gt;false&lt;/code&gt; otherwise.</source>
          <target state="translated">如果字符被分类为标点，则返回 &lt;code&gt;true&lt;/code&gt; ，否则返回 &lt;code&gt;false&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="563b35548971a5b4c7f6405cc3a98887babe4fab" translate="yes" xml:space="preserve">
          <source>Returns &lt;code&gt;true&lt;/code&gt; if the character is classified as uppercase, &lt;code&gt;false&lt;/code&gt; otherwise.</source>
          <target state="translated">如果字符被分类为大写，则返回 &lt;code&gt;true&lt;/code&gt; ，否则返回 &lt;code&gt;false&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="36b40827ae37f8973d0e316de3bf83161f857a7b" translate="yes" xml:space="preserve">
          <source>Returns &lt;code&gt;true&lt;/code&gt; if the facet &lt;code&gt;Facet&lt;/code&gt; was installed in the locale &lt;code&gt;loc&lt;/code&gt;, &lt;code&gt;false&lt;/code&gt; otherwise.</source>
          <target state="translated">如果构面 &lt;code&gt;Facet&lt;/code&gt; 已安装在语言环境 &lt;code&gt;loc&lt;/code&gt; 中，则返回 &lt;code&gt;true&lt;/code&gt; ,否则返回 &lt;code&gt;false&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="9adedfadab46fd3082f0680559c8a5402abb017f" translate="yes" xml:space="preserve">
          <source>Returns &lt;code&gt;true&lt;/code&gt; if the iterator encountered the end-of-file condition, that is, if an earlier call to &lt;code&gt;&lt;a href=&quot;../../io/basic_streambuf/sputc&quot;&gt;std::basic_streambuf::sputc&lt;/a&gt;&lt;/code&gt; (made by &lt;a href=&quot;operator=&quot;&gt;&lt;code&gt;operator=&lt;/code&gt;&lt;/a&gt;) returned &lt;code&gt;Traits::eof&lt;/code&gt;.</source>
          <target state="translated">如果迭代器遇到文件结束条件，即，如果先前对 &lt;code&gt;&lt;a href=&quot;../../io/basic_streambuf/sputc&quot;&gt;std::basic_streambuf::sputc&lt;/a&gt;&lt;/code&gt; （由&lt;a href=&quot;operator=&quot;&gt; &lt;code&gt;operator=&lt;/code&gt; &lt;/a&gt;进行的调用）的调用返回 &lt;code&gt;Traits::eof&lt;/code&gt; ，则返回 &lt;code&gt;true&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="6ff43ff3b9e92850db2793da0e0a370105b8f45b" translate="yes" xml:space="preserve">
          <source>Returns &lt;code&gt;true&lt;/code&gt; if the most recent call to &lt;code&gt;&lt;a href=&quot;open&quot;&gt;open()&lt;/a&gt;&lt;/code&gt; succeeded and there has been no call to &lt;code&gt;&lt;a href=&quot;close&quot;&gt;close()&lt;/a&gt;&lt;/code&gt; since then.</source>
          <target state="translated">如果最近一次对 &lt;code&gt;&lt;a href=&quot;open&quot;&gt;open()&lt;/a&gt;&lt;/code&gt; 的调用成功并且此后没有对 &lt;code&gt;&lt;a href=&quot;close&quot;&gt;close()&lt;/a&gt;&lt;/code&gt; 的调用，则返回 &lt;code&gt;true&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="d8542b8429a54567347711db60dc170c180796eb" translate="yes" xml:space="preserve">
          <source>Returns &lt;code&gt;true&lt;/code&gt; if the next increment will cause the directory currently referred to by &lt;code&gt;*this&lt;/code&gt; to be iterated into.</source>
          <target state="translated">如果下一个增量将导致 &lt;code&gt;*this&lt;/code&gt; 当前引用的目录迭代，则返回 &lt;code&gt;true&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="1c3752b4867edc3e29b031e769f6912671674cfb" translate="yes" xml:space="preserve">
          <source>Returns &lt;code&gt;true&lt;/code&gt; if the sorted range &lt;code&gt;[first2, last2)&lt;/code&gt; is a &lt;a href=&quot;https://en.wikipedia.org/wiki/subsequence&quot;&gt;subsequence&lt;/a&gt; of the sorted range &lt;code&gt;[first1, last1)&lt;/code&gt;. (A subsequence need not be contiguous.).</source>
          <target state="translated">返回 &lt;code&gt;true&lt;/code&gt; 如果有序范围 &lt;code&gt;[first2, last2)&lt;/code&gt; 是一个&lt;a href=&quot;https://en.wikipedia.org/wiki/subsequence&quot;&gt;序列&lt;/a&gt;排序范围内的 &lt;code&gt;[first1, last1)&lt;/code&gt; 。（子序列不必是连续的。）。</target>
        </trans-unit>
        <trans-unit id="21333b59318ca88e1dcef763e8b7908d6d667701" translate="yes" xml:space="preserve">
          <source>Returns &lt;code&gt;true&lt;/code&gt; if the the most recent I/O operation on the stream completed successfully. Specifically, returns result of &lt;code&gt;rdstate() == 0&lt;/code&gt;.</source>
          <target state="translated">如果流上的最新I / O操作成功完成，则返回 &lt;code&gt;true&lt;/code&gt; 。具体来说，返回 &lt;code&gt;rdstate() == 0&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="dbda86a4dd19967ab0484b47ef3fd906bf6e7eb5" translate="yes" xml:space="preserve">
          <source>Returns &lt;code&gt;true&lt;/code&gt; if the type of this &lt;code&gt;type_info&lt;/code&gt; precedes the type of &lt;code&gt;rhs&lt;/code&gt; in the implementation's collation order. No guarantees are given; in particular, the collation order can change between the invocations of the same program.</source>
          <target state="translated">如果此 &lt;code&gt;type_info&lt;/code&gt; 的类型在实现的排序顺序中位于 &lt;code&gt;rhs&lt;/code&gt; 的类型之前，则返回 &lt;code&gt;true&lt;/code&gt; 。不提供任何保证；特别是，排序顺序可以在同一程序的调用之间改变。</target>
        </trans-unit>
        <trans-unit id="a03f89994b0fb2f078a428efbe6e1a80a91406c1" translate="yes" xml:space="preserve">
          <source>Returns &lt;code&gt;true&lt;/code&gt; if there exists a permutation of the elements in the range &lt;code&gt;[first1, last1)&lt;/code&gt; that makes that range equal to the range &lt;code&gt;[first2,last2)&lt;/code&gt;, where &lt;code&gt;last2&lt;/code&gt; denotes &lt;code&gt;first2 + (last1 - first1)&lt;/code&gt; if it was not given.</source>
          <target state="translated">返回 &lt;code&gt;true&lt;/code&gt; ，如果存在的范围内的元件的排列 &lt;code&gt;[first1, last1)&lt;/code&gt; 即，范围等于范围使 &lt;code&gt;[first2,last2)&lt;/code&gt; ，其中 &lt;code&gt;last2&lt;/code&gt; 表示 &lt;code&gt;first2 + (last1 - first1)&lt;/code&gt; 如果未给它。</target>
        </trans-unit>
        <trans-unit id="b3c6de90b23169d6f174b12ffb8d2aaeca2a0c12" translate="yes" xml:space="preserve">
          <source>Returns &lt;code&gt;y&lt;/code&gt;, no longer a part of a dependency tree.</source>
          <target state="translated">返回 &lt;code&gt;y&lt;/code&gt; ，不再是依赖关系树的一部分。</target>
        </trans-unit>
        <trans-unit id="f00c416c84e5e1b2db0adca496145b109d5010c8" translate="yes" xml:space="preserve">
          <source>Returns &lt;code&gt;​0​&lt;/code&gt; if the character sequence is not the name of a character class recognized by &lt;code&gt;X&lt;/code&gt;.</source>
          <target state="translated">返回 &lt;code&gt;​0​&lt;/code&gt; ，如果字符序列不是被识别的字符类的名称 &lt;code&gt;X&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="f27bc1ee14d96f619d547ee20ae3553c5ad692e2" translate="yes" xml:space="preserve">
          <source>Returns a &lt;a href=&quot;value_category&quot;&gt;prvalue&lt;/a&gt; of type &lt;code&gt;bool&lt;/code&gt;.</source>
          <target state="translated">返回类型为 &lt;code&gt;bool&lt;/code&gt; 的&lt;a href=&quot;value_category&quot;&gt;prvalue&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="74c54e791bb590575ab977595cd071c97fa914e8" translate="yes" xml:space="preserve">
          <source>Returns a &lt;code&gt;&lt;a href=&quot;../basic_string_view&quot;&gt;std::basic_string_view&lt;/a&gt;&lt;/code&gt;, constructed as if by &lt;code&gt;&lt;a href=&quot;../basic_string_view&quot;&gt;std::basic_string_view&lt;/a&gt;&amp;lt;CharT, Traits&amp;gt;(data(), size())&lt;/code&gt;.</source>
          <target state="translated">返回一个 &lt;code&gt;&lt;a href=&quot;../basic_string_view&quot;&gt;std::basic_string_view&lt;/a&gt;&lt;/code&gt; ，就像由 &lt;code&gt;&lt;a href=&quot;../basic_string_view&quot;&gt;std::basic_string_view&lt;/a&gt;&amp;lt;CharT, Traits&amp;gt;(data(), size())&lt;/code&gt; 构造。</target>
        </trans-unit>
        <trans-unit id="d521580712f007b0ee2aa294ddba7a7588d37a82" translate="yes" xml:space="preserve">
          <source>Returns a &lt;code&gt;&lt;a href=&quot;../duration&quot;&gt;duration&lt;/a&gt;&lt;/code&gt; representing the amount of time between &lt;code&gt;*this&lt;/code&gt; and the &lt;code&gt;clock&lt;/code&gt;'s epoch.</source>
          <target state="translated">返回一个 &lt;code&gt;&lt;a href=&quot;../duration&quot;&gt;duration&lt;/a&gt;&lt;/code&gt; 该持续时间表示 &lt;code&gt;*this&lt;/code&gt; 和 &lt;code&gt;clock&lt;/code&gt; 纪元之间的时间。</target>
        </trans-unit>
        <trans-unit id="9a3e51e8d33ad07948f02967372466f5f87fa47f" translate="yes" xml:space="preserve">
          <source>Returns a &lt;code&gt;&lt;a href=&quot;../shared_ptr&quot;&gt;std::shared_ptr&lt;/a&gt;&amp;lt;T&amp;gt;&lt;/code&gt; that shares ownership of &lt;code&gt;*this&lt;/code&gt; with all existing &lt;code&gt;&lt;a href=&quot;../shared_ptr&quot;&gt;std::shared_ptr&lt;/a&gt;&lt;/code&gt; that refer to &lt;code&gt;*this&lt;/code&gt;.</source>
          <target state="translated">返回一个 &lt;code&gt;&lt;a href=&quot;../shared_ptr&quot;&gt;std::shared_ptr&lt;/a&gt;&amp;lt;T&amp;gt;&lt;/code&gt; 该股份所有权 &lt;code&gt;*this&lt;/code&gt; 与所有现有 &lt;code&gt;&lt;a href=&quot;../shared_ptr&quot;&gt;std::shared_ptr&lt;/a&gt;&lt;/code&gt; 引用 &lt;code&gt;*this&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="9c32a5549cdd6db2b59c473b5be6eb6e49bcefcb" translate="yes" xml:space="preserve">
          <source>Returns a &lt;code&gt;&lt;a href=&quot;../weak_ptr&quot;&gt;std::weak_ptr&lt;/a&gt;&amp;lt;T&amp;gt;&lt;/code&gt; that tracks ownership of &lt;code&gt;*this&lt;/code&gt; by all existing &lt;code&gt;&lt;a href=&quot;../shared_ptr&quot;&gt;std::shared_ptr&lt;/a&gt;&lt;/code&gt; that refer to &lt;code&gt;*this&lt;/code&gt;.</source>
          <target state="translated">返回一个 &lt;code&gt;&lt;a href=&quot;../weak_ptr&quot;&gt;std::weak_ptr&lt;/a&gt;&amp;lt;T&amp;gt;&lt;/code&gt; ，该跟踪跟踪所有现有的引用 &lt;code&gt;*this&lt;/code&gt; 的 &lt;code&gt;&lt;a href=&quot;../shared_ptr&quot;&gt;std::shared_ptr&lt;/a&gt;&lt;/code&gt; 对 &lt;code&gt;*this&lt;/code&gt; 的所有权。</target>
        </trans-unit>
        <trans-unit id="675f523241ec3f01b2a36ebd7b1175560bd4556c" translate="yes" xml:space="preserve">
          <source>Returns a &lt;code&gt;future&lt;/code&gt; which shares the same shared state as &lt;code&gt;*this&lt;/code&gt;.</source>
          <target state="translated">返回一个 &lt;code&gt;future&lt;/code&gt; 这股相同的共享状态 &lt;code&gt;*this&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="ebf510f38013ed0fde358a7dd564f35ae062463e" translate="yes" xml:space="preserve">
          <source>Returns a &lt;code&gt;time_point&lt;/code&gt; object representing the current point in time.</source>
          <target state="translated">返回代表当前时间点的 &lt;code&gt;time_point&lt;/code&gt; 对象。</target>
        </trans-unit>
        <trans-unit id="b8fa136e4597b284ff55e1a920c98e99b09c75c9" translate="yes" xml:space="preserve">
          <source>Returns a &lt;code&gt;time_point&lt;/code&gt; with the largest possible duration, i.e. &lt;code&gt;time_point(std::chrono::duration::max())&lt;/code&gt;.</source>
          <target state="translated">返回一个 &lt;code&gt;time_point&lt;/code&gt; 具有最大可能的持续时间，即 &lt;code&gt;time_point(std::chrono::duration::max())&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="682b27f03cef4d4cd685edc2b1214f48a737053a" translate="yes" xml:space="preserve">
          <source>Returns a &lt;code&gt;time_point&lt;/code&gt; with the smallest possible duration, i.e. &lt;code&gt;time_point(std::chrono::duration::min())&lt;/code&gt;.</source>
          <target state="translated">返回一个 &lt;code&gt;time_point&lt;/code&gt; 用尽可能小的持续时间，即 &lt;code&gt;time_point(std::chrono::duration::min())&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="e6c8c1066b88010504b23ecf215c59a7444680bd" translate="yes" xml:space="preserve">
          <source>Returns a complex number with magnitude &lt;code&gt;r&lt;/code&gt; and phase angle &lt;code&gt;theta&lt;/code&gt;.</source>
          <target state="translated">返回幅度为 &lt;code&gt;r&lt;/code&gt; 和相位角为 &lt;code&gt;theta&lt;/code&gt; 的复数。</target>
        </trans-unit>
        <trans-unit id="5c2eb94ea57d430b4e4333a82aff75e8100c67be" translate="yes" xml:space="preserve">
          <source>Returns a const reference to the character at specified location &lt;code&gt;pos&lt;/code&gt;.</source>
          <target state="translated">返回对指定位置 &lt;code&gt;pos&lt;/code&gt; 处字符的const引用。</target>
        </trans-unit>
        <trans-unit id="3a79cbfa2d61285b70ab87f34052d42e6b772617" translate="yes" xml:space="preserve">
          <source>Returns a constant of type &lt;code&gt;&lt;a href=&quot;../types/size_t&quot;&gt;std::size_t&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">返回类型为 &lt;code&gt;&lt;a href=&quot;../types/size_t&quot;&gt;std::size_t&lt;/a&gt;&lt;/code&gt; 的常量。</target>
        </trans-unit>
        <trans-unit id="4d0963a3c6426ccf7883b34bb28e1079108f6d44" translate="yes" xml:space="preserve">
          <source>Returns a copy of &lt;code&gt;dest&lt;/code&gt;.</source>
          <target state="translated">返回 &lt;code&gt;dest&lt;/code&gt; 的副本。</target>
        </trans-unit>
        <trans-unit id="882cad8c6f486ccf932d4f67b968ca2734465b13" translate="yes" xml:space="preserve">
          <source>Returns a copy of &lt;code&gt;out&lt;/code&gt; after the last sample that was output, that is, end of the sample range.</source>
          <target state="translated">在输出的最后一个样本之后（即样本范围的结尾）返回 &lt;code&gt;out&lt;/code&gt; 的副本。</target>
        </trans-unit>
        <trans-unit id="940b8a4d5ece7dda312895f7e83a3f14bb17b5ae" translate="yes" xml:space="preserve">
          <source>Returns a copy of the allocator that was passed in as the constructor argument or replaced through the assignment operator.</source>
          <target state="translated">返回作为构造参数传入或通过赋值操作符替换的分配器的副本。</target>
        </trans-unit>
        <trans-unit id="7dfbf02899d5bec78ed9485277f3ecf2f9b4c65d" translate="yes" xml:space="preserve">
          <source>Returns a default-constructed &lt;code&gt;polymorphic_allocator&lt;/code&gt; object.</source>
          <target state="translated">返回默认构造的 &lt;code&gt;polymorphic_allocator&lt;/code&gt; 对象。</target>
        </trans-unit>
        <trans-unit id="10d3167f9bca50e543fda014512bf607e1bcc462" translate="yes" xml:space="preserve">
          <source>Returns a duration with the largest possible value.</source>
          <target state="translated">返回一个尽可能大的持续时间。</target>
        </trans-unit>
        <trans-unit id="8dec05bb80a5b9a36bfdc239a696f226f965ba67" translate="yes" xml:space="preserve">
          <source>Returns a duration with the lowest possible value.</source>
          <target state="translated">返回一个尽可能小的持续时间。</target>
        </trans-unit>
        <trans-unit id="ed1bcc15a23e8a369c7c6d383a31838ab61ee2ac" translate="yes" xml:space="preserve">
          <source>Returns a function object that compares objects of type std::map::value_type (key-value pairs) by using &lt;code&gt;&lt;a href=&quot;key_comp&quot;&gt;key_comp&lt;/a&gt;&lt;/code&gt; to compare the first components of the pairs.</source>
          <target state="translated">返回一个函数对象，该函数对象通过使用 &lt;code&gt;&lt;a href=&quot;key_comp&quot;&gt;key_comp&lt;/a&gt;&lt;/code&gt; 比较两个std :: map :: value_type（键-值对）类型的对象来比较这些对的第一个组件。</target>
        </trans-unit>
        <trans-unit id="e597c4b17630b85d7e8fb96dd60d367240151608" translate="yes" xml:space="preserve">
          <source>Returns a function object that compares objects of type std::multimap::value_type (key-value pairs) by using &lt;code&gt;&lt;a href=&quot;key_comp&quot;&gt;key_comp&lt;/a&gt;&lt;/code&gt; to compare the first components of the pairs.</source>
          <target state="translated">返回一个函数对象，该函数对象通过使用 &lt;code&gt;&lt;a href=&quot;key_comp&quot;&gt;key_comp&lt;/a&gt;&lt;/code&gt; 比较这些对的第一个组成部分来比较std :: multimap :: value_type（键-值对）类型的对象。</target>
        </trans-unit>
        <trans-unit id="c50eaa26c7fc93d72a8ea2e3e2294758404e4e84" translate="yes" xml:space="preserve">
          <source>Returns a future object associated with the same shared state as &lt;code&gt;*this&lt;/code&gt;.</source>
          <target state="translated">返回与 &lt;code&gt;*this&lt;/code&gt; 相同共享状态关联的将来对象。</target>
        </trans-unit>
        <trans-unit id="f98d3f768bac72ebcd99e28a8718c3656053b52b" translate="yes" xml:space="preserve">
          <source>Returns a new valarray of the same size with elements whose positions are shifted by &lt;code&gt;count&lt;/code&gt; elements. The new position of each element is i&amp;minus;count where i is the previous position. The value of shifted in elements is &lt;code&gt;T()&lt;/code&gt;.</source>
          <target state="translated">返回一个大小相同的新valarray，其元素的位置由 &lt;code&gt;count&lt;/code&gt; 元素移动。每个元素的新位置是i-count，其中i是上一个位置。元素中的shifted的值为 &lt;code&gt;T()&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="271abdf07ddeaf75d3a71561faa0a6c38ad00b2f" translate="yes" xml:space="preserve">
          <source>Returns a new valarray of the same size with elements whose positions are shifted circularly by &lt;code&gt;count&lt;/code&gt; elements. The new position of each element is (i&amp;minus;count) mod s where i is the previous position and s is &lt;code&gt;size()&lt;/code&gt;.</source>
          <target state="translated">返回一个具有相同大小的新valarray，其元素的位置被 &lt;code&gt;count&lt;/code&gt; 元素循环移位。每个元素的新位置是（i-count）mod s，其中i是先前位置，s是 &lt;code&gt;size()&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="06586b4501151cb8720a38036b2aff7dc0f5a7e5" translate="yes" xml:space="preserve">
          <source>Returns a new valarray of the same size with values which are acquired by applying function &lt;code&gt;func&lt;/code&gt; to the previous values of the elements.</source>
          <target state="translated">返回一个具有相同大小的新valarray，其值通过将函数 &lt;code&gt;func&lt;/code&gt; 应用于元素的先前值来获取。</target>
        </trans-unit>
        <trans-unit id="874fb83ddc55b65ec08d0e7ebd5f2fe277c5c61c" translate="yes" xml:space="preserve">
          <source>Returns a pair consisting of an iterator to the inserted element, or the already-existing element if no insertion happened, and a &lt;code&gt;bool&lt;/code&gt; denoting whether the insertion took place. True for Insertion, False for No Insertion.</source>
          <target state="translated">返回一个由以下组成的对：插入对象的迭代器；如果未发生插入，则返回已存在的元素；以及 &lt;code&gt;bool&lt;/code&gt; 表示是否发生了插入。插入时为True，不插入时为False。</target>
        </trans-unit>
        <trans-unit id="f61cd9bf9097edc37645ff9e78e472dc81b619e4" translate="yes" xml:space="preserve">
          <source>Returns a pair of iterators &lt;code&gt;i, j&lt;/code&gt;, where &lt;code&gt;i&lt;/code&gt; is &lt;code&gt;&lt;a href=&quot;../../algorithm/search&quot;&gt;std::search&lt;/a&gt;(first, last, pat_first, pat_last, pred)&lt;/code&gt; and &lt;code&gt;j&lt;/code&gt; is &lt;code&gt;&lt;a href=&quot;../../iterator/next&quot;&gt;std::next&lt;/a&gt;(i, &lt;a href=&quot;../../iterator/distance&quot;&gt;std::distance&lt;/a&gt;(pat_first, pat_last))&lt;/code&gt; unless &lt;code&gt;std::search&lt;/code&gt; returned &lt;code&gt;last&lt;/code&gt; (no match), in which case &lt;code&gt;j&lt;/code&gt; equals &lt;code&gt;last&lt;/code&gt; as well.</source>
          <target state="translated">返回一对迭代器 &lt;code&gt;i, j&lt;/code&gt; ，其中 &lt;code&gt;i&lt;/code&gt; 是 &lt;code&gt;&lt;a href=&quot;../../algorithm/search&quot;&gt;std::search&lt;/a&gt;(first, last, pat_first, pat_last, pred)&lt;/code&gt; ， &lt;code&gt;j&lt;/code&gt; 是 &lt;code&gt;&lt;a href=&quot;../../iterator/next&quot;&gt;std::next&lt;/a&gt;(i, &lt;a href=&quot;../../iterator/distance&quot;&gt;std::distance&lt;/a&gt;(pat_first, pat_last))&lt;/code&gt; 除非 &lt;code&gt;std::search&lt;/code&gt; 返回 &lt;code&gt;last&lt;/code&gt; （不匹配），在这种情况下 &lt;code&gt;j&lt;/code&gt; 也等于 &lt;code&gt;last&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="9d528f2083b6e9c859529d0399a8f25b6324a704" translate="yes" xml:space="preserve">
          <source>Returns a path referencing the same file system location as &lt;code&gt;p&lt;/code&gt;, for which &lt;a href=&quot;path/is_absrel&quot;&gt;&lt;code&gt;is_absolute()&lt;/code&gt;&lt;/a&gt; is &lt;code&gt;true&lt;/code&gt;. The non-throwing overload returns default-constructed path if an error occurs.</source>
          <target state="translated">返回引用与 &lt;code&gt;p&lt;/code&gt; 相同的文件系统位置的路径，其&lt;a href=&quot;path/is_absrel&quot;&gt; &lt;code&gt;is_absolute()&lt;/code&gt; &lt;/a&gt;为 &lt;code&gt;true&lt;/code&gt; 。如果发生错误，则非抛出重载将返回默认构造的路径。</target>
        </trans-unit>
        <trans-unit id="f01cf36354038c7c072a1143d7fce9c8c73a6def" translate="yes" xml:space="preserve">
          <source>Returns a pointer &lt;code&gt;p&lt;/code&gt; to a static storage duration object of a type derived from &lt;code&gt;&lt;a href=&quot;memory_resource&quot;&gt;std::pmr::memory_resource&lt;/a&gt;&lt;/code&gt;, with the following properties:</source>
          <target state="translated">返回指向静态存储持续时间对象的指针 &lt;code&gt;p&lt;/code&gt; ，该对象的类型派生自 &lt;code&gt;&lt;a href=&quot;memory_resource&quot;&gt;std::pmr::memory_resource&lt;/a&gt;&lt;/code&gt; ，具有以下属性：</target>
        </trans-unit>
        <trans-unit id="73e01f0e0725da82fea9d158acb3a7293f22650e" translate="yes" xml:space="preserve">
          <source>Returns a pointer or a reference to the current element.</source>
          <target state="translated">返回一个指向当前元素的指针或引用。</target>
        </trans-unit>
        <trans-unit id="5010dfcbcaf07d101399327b7e253c1c90fc863b" translate="yes" xml:space="preserve">
          <source>Returns a pointer or reference to the current match.</source>
          <target state="translated">返回指向当前匹配的指针或引用。</target>
        </trans-unit>
        <trans-unit id="425f36a8f139e91b1e5f81d3bc4d16590c9b5049" translate="yes" xml:space="preserve">
          <source>Returns a pointer to a &lt;code&gt;memory_resource&lt;/code&gt; that doesn't perform any allocation.</source>
          <target state="translated">返回一个不执行任何分配的 &lt;code&gt;memory_resource&lt;/code&gt; 的指针。</target>
        </trans-unit>
        <trans-unit id="8e0548530825742a0c9ccf7b1ba73938e0359f73" translate="yes" xml:space="preserve">
          <source>Returns a pointer to a &lt;code&gt;memory_resource&lt;/code&gt; that uses the global &lt;code&gt;&lt;a href=&quot;new/operator_new&quot;&gt;operator new&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;new/operator_delete&quot;&gt;operator delete&lt;/a&gt;&lt;/code&gt; to allocate memory.</source>
          <target state="translated">返回一个指向 &lt;code&gt;memory_resource&lt;/code&gt; 的指针，该指针使用全局 &lt;code&gt;&lt;a href=&quot;new/operator_new&quot;&gt;operator new&lt;/a&gt;&lt;/code&gt; 和 &lt;code&gt;&lt;a href=&quot;new/operator_delete&quot;&gt;operator delete&lt;/a&gt;&lt;/code&gt; 分配内存。</target>
        </trans-unit>
        <trans-unit id="8c94bdb1bb0f8cbd2cf6ff3790697b88b7882df2" translate="yes" xml:space="preserve">
          <source>Returns a pointer to a null-terminated byte string that specifies the name of the error category.</source>
          <target state="translated">返回指定错误类别名称的null-terminated字节字符串的指针。</target>
        </trans-unit>
        <trans-unit id="de42586b0859fcdf6349910ffbd482e3d1b0c5e0" translate="yes" xml:space="preserve">
          <source>Returns a pointer to a null-terminated character array with data equivalent to those stored in the string.</source>
          <target state="translated">返回一个指向空端字符数组的指针,该数组中的数据与字符串中存储的数据相等。</target>
        </trans-unit>
        <trans-unit id="dad3569bcab42bd0a4be81e74a29a7f11e533994" translate="yes" xml:space="preserve">
          <source>Returns a pointer to one past the last element in the initializer list, i.e. &lt;code&gt;begin() + size()&lt;/code&gt;.</source>
          <target state="translated">返回一个指向初始化程序列表中最后一个元素之后的指针，即 &lt;code&gt;begin() + size()&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="959206470c23e4a765bf69c87ccd7d2bf13e59eb" translate="yes" xml:space="preserve">
          <source>Returns a pointer to the associated &lt;code&gt;&lt;a href=&quot;../strstreambuf&quot;&gt;std::strstreambuf&lt;/a&gt;&lt;/code&gt;, casting away its constness (despite the const qualifier on the member function).</source>
          <target state="translated">返回指向关联的 &lt;code&gt;&lt;a href=&quot;../strstreambuf&quot;&gt;std::strstreambuf&lt;/a&gt;&lt;/code&gt; 的指针，丢弃其常量（尽管成员函数上的const限定符）。</target>
        </trans-unit>
        <trans-unit id="e6ac54904c6a07b3637978a0b736646efc6afaff" translate="yes" xml:space="preserve">
          <source>Returns a pointer to the associated mutex, or a null pointer if there is no associated mutex.</source>
          <target state="translated">返回指向关联的mutex的指针,如果没有关联的mutex,则返回空指针。</target>
        </trans-unit>
        <trans-unit id="a16f244e0e59e18d6f043924b343eae9ec25951f" translate="yes" xml:space="preserve">
          <source>Returns a pointer to the beginning of the sequence.</source>
          <target state="translated">返回指向序列开头的指针。</target>
        </trans-unit>
        <trans-unit id="f6c26924571ec0e6f13d7c8aef8806943c91120c" translate="yes" xml:space="preserve">
          <source>Returns a pointer to the block of memory containing the elements of the container.</source>
          <target state="translated">返回一个指向包含容器元素的内存块的指针。</target>
        </trans-unit>
        <trans-unit id="a4272464b976b7a256cc4c7466f606ea9fd0b9ba" translate="yes" xml:space="preserve">
          <source>Returns a pointer to the first element in the initializer list.</source>
          <target state="translated">返回初始化列表中第一个元素的指针。</target>
        </trans-unit>
        <trans-unit id="a0d37902c6c105794cf5675d216d645f74d6ae06" translate="yes" xml:space="preserve">
          <source>Returns a pointer to the managed object or &lt;code&gt;nullptr&lt;/code&gt; if no object is owned.</source>
          <target state="translated">返回指向托管对象的指针；如果没有对象，则返回 &lt;code&gt;nullptr&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="20cbb28c57d9c1a1979b2f0d6baf11360c14bc34" translate="yes" xml:space="preserve">
          <source>Returns a pointer to the stored callable function target.</source>
          <target state="translated">返回一个指向存储的可调用函数目标的指针。</target>
        </trans-unit>
        <trans-unit id="6bd5301b4d36bdb16542a82649ecb95ef4cf17ce" translate="yes" xml:space="preserve">
          <source>Returns a pointer to the stored exception, if any.</source>
          <target state="translated">返回存储异常的指针(如果有)。</target>
        </trans-unit>
        <trans-unit id="d476bc044773606e462dca24f10d2c9f5a01727f" translate="yes" xml:space="preserve">
          <source>Returns a pointer to the textual description of the system error code &lt;code&gt;errnum&lt;/code&gt;, identical to the description that would be printed by &lt;code&gt;&lt;a href=&quot;../../io/c/perror&quot;&gt;std::perror()&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">返回一个指向系统错误代码 &lt;code&gt;errnum&lt;/code&gt; 的文本描述的指针，该指针与 &lt;code&gt;&lt;a href=&quot;../../io/c/perror&quot;&gt;std::perror()&lt;/a&gt;&lt;/code&gt; 将打印的描述相同。</target>
        </trans-unit>
        <trans-unit id="619e808e304792b4daf7a340d59928fd3c8e94ed" translate="yes" xml:space="preserve">
          <source>Returns a pointer to the underlying &lt;code&gt;std::basic_syncbuf&lt;/code&gt;.</source>
          <target state="translated">返回指向基础 &lt;code&gt;std::basic_syncbuf&lt;/code&gt; 的指针。</target>
        </trans-unit>
        <trans-unit id="d1a33accdc70e7b133677bf7dae44f38c54f71d5" translate="yes" xml:space="preserve">
          <source>Returns a pointer to the underlying array serving as character storage. The pointer is such that the range &lt;code&gt;[data(); data() + size())&lt;/code&gt; is valid and the values in it correspond to the values stored in the string.</source>
          <target state="translated">返回指向用作字符存储的基础数组的指针。指针的范围是 &lt;code&gt;[data(); data() + size())&lt;/code&gt; 有效，并且其中的值与存储在字符串中的值相对应。</target>
        </trans-unit>
        <trans-unit id="2e82d5ecec9a6b6b185289c81c2c2fb649e8678c" translate="yes" xml:space="preserve">
          <source>Returns a pointer to the underlying character array. The pointer is such that the range [data(); data() + size()) is valid and the values in it correspond to the values of the view.</source>
          <target state="translated">返回一个指向底层字符数组的指针。指针的范围[data();data()+size())是有效的,并且其中的值与视图的值相对应。</target>
        </trans-unit>
        <trans-unit id="4e0e4313d38e0679677e13b7fea64fedc116deeb" translate="yes" xml:space="preserve">
          <source>Returns a pointer to the underlying memory resource</source>
          <target state="translated">返回指向底层内存资源的指针。</target>
        </trans-unit>
        <trans-unit id="9e9abf103eb99b7dcfcc50105afadbd5bc180e3c" translate="yes" xml:space="preserve">
          <source>Returns a pointer to the upstream memory resource</source>
          <target state="translated">返回指向上游内存资源的指针。</target>
        </trans-unit>
        <trans-unit id="0a7cfc00154c5d3f847b5c024451c910991d5fca" translate="yes" xml:space="preserve">
          <source>Returns a pointer to the upstream memory resource. This is the same value as the &lt;code&gt;upstream&lt;/code&gt; argument passed to the constructor of this object.</source>
          <target state="translated">返回指向上游内存资源的指针。该值与传递给该对象的构造函数的 &lt;code&gt;upstream&lt;/code&gt; 参数相同。</target>
        </trans-unit>
        <trans-unit id="99942d493edcf9bc5732d65d313920b2eeda49fa" translate="yes" xml:space="preserve">
          <source>Returns a pointer to the wrapped &lt;code&gt;&lt;a href=&quot;../basic_streambuf&quot;&gt;std::basic_streambuf&lt;/a&gt;&lt;/code&gt;, obtained by calling &lt;a href=&quot;../basic_syncbuf/get_wrapped&quot;&gt;&lt;code&gt;get_wrapped()&lt;/code&gt;&lt;/a&gt; on the underlying &lt;code&gt;std::basic_syncbuf&lt;/code&gt;.</source>
          <target state="translated">返回指向包装&lt;a href=&quot;../basic_syncbuf/get_wrapped&quot;&gt; &lt;code&gt;get_wrapped()&lt;/code&gt; &lt;/a&gt; &lt;code&gt;&lt;a href=&quot;../basic_streambuf&quot;&gt;std::basic_streambuf&lt;/a&gt;&lt;/code&gt; 的指针，该指针是通过在基础 &lt;code&gt;std::basic_syncbuf&lt;/code&gt; 上调用get_wrapped（）获得的。</target>
        </trans-unit>
        <trans-unit id="b2701742b82d1fb1da31f76f241df07bd12fff04" translate="yes" xml:space="preserve">
          <source>Returns a pointer to the wrapped &lt;code&gt;&lt;a href=&quot;../basic_streambuf&quot;&gt;std::basic_streambuf&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">返回一个指向包装 &lt;code&gt;&lt;a href=&quot;../basic_streambuf&quot;&gt;std::basic_streambuf&lt;/a&gt;&lt;/code&gt; 的指针。</target>
        </trans-unit>
        <trans-unit id="5ff3fa8082b5fd8de8830e4e32c32aced092f249" translate="yes" xml:space="preserve">
          <source>Returns a pseudo-random integral value between &lt;code&gt;​0​&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;rand_max&quot;&gt;RAND_MAX&lt;/a&gt;&lt;/code&gt; (0 and &lt;code&gt;RAND_MAX&lt;/code&gt; included).</source>
          <target state="translated">返回之间的伪随机积分值 &lt;code&gt;​0​&lt;/code&gt; 和 &lt;code&gt;&lt;a href=&quot;rand_max&quot;&gt;RAND_MAX&lt;/a&gt;&lt;/code&gt; （0和 &lt;code&gt;RAND_MAX&lt;/code&gt; 包括在内）。</target>
        </trans-unit>
        <trans-unit id="4ea65e7d825b34532f11cbd83f6e5aacc16ddb65" translate="yes" xml:space="preserve">
          <source>Returns a range containing all elements equivalent to &lt;code&gt;value&lt;/code&gt; in the range &lt;code&gt;[first, last)&lt;/code&gt;.</source>
          <target state="translated">返回一个范围，该范围包含等于 &lt;code&gt;[first, last)&lt;/code&gt; 范围内的 &lt;code&gt;value&lt;/code&gt; 所有元素。</target>
        </trans-unit>
        <trans-unit id="7bcbccd9f884d3cfa0ab2d8b09eb1aa0298e15b7" translate="yes" xml:space="preserve">
          <source>Returns a range containing all elements with the given key in the container. The range is defined by two iterators, one pointing to the first element that is</source>
          <target state="translated">返回一个包含容器中给定键的所有元素的范围。这个范围由两个迭代器定义,其中一个迭代器指向第一个元素,而这个元素就是</target>
        </trans-unit>
        <trans-unit id="22a7e4d6cb9b903ac910558116f99ad67e4b32fd" translate="yes" xml:space="preserve">
          <source>Returns a reference or pointer to the element previous to &lt;code&gt;current&lt;/code&gt;.</source>
          <target state="translated">返回对 &lt;code&gt;current&lt;/code&gt; 之前的元素的引用或指针。</target>
        </trans-unit>
        <trans-unit id="0ed2a2402d606adae64c28820fe5b226bdf11b09" translate="yes" xml:space="preserve">
          <source>Returns a reference to the &quot;C&quot; locale.</source>
          <target state="translated">返回对 &quot;C &quot;区域的引用。</target>
        </trans-unit>
        <trans-unit id="e4cb6a18dd4195785792bd0db2a04902067ab807" translate="yes" xml:space="preserve">
          <source>Returns a reference to the &lt;code&gt;idx&lt;/code&gt;-th element of the sequence. The behavior is undefined if &lt;code&gt;idx&lt;/code&gt; is out of range (i.e., if it is greater than or equal to &lt;code&gt;size()&lt;/code&gt;).</source>
          <target state="translated">返回对序列的 &lt;code&gt;idx&lt;/code&gt; -th元素的引用。如果 &lt;code&gt;idx&lt;/code&gt; 超出范围（即，如果它大于或等于 &lt;code&gt;size()&lt;/code&gt; ），则行为是不确定的。</target>
        </trans-unit>
        <trans-unit id="e4671426e3ffd64afe4bc49db3db05d0d172617f" translate="yes" xml:space="preserve">
          <source>Returns a reference to the character at specified location &lt;code&gt;pos&lt;/code&gt;. Bounds checking is performed, exception of type &lt;code&gt;&lt;a href=&quot;../../error/out_of_range/out_of_range&quot;&gt;std::out_of_range&lt;/a&gt;&lt;/code&gt; will be thrown on invalid access.</source>
          <target state="translated">返回对指定位置 &lt;code&gt;pos&lt;/code&gt; 处字符的引用。执行边界检查，无效访问将引发类型为 &lt;code&gt;&lt;a href=&quot;../../error/out_of_range/out_of_range&quot;&gt;std::out_of_range&lt;/a&gt;&lt;/code&gt; 异常。</target>
        </trans-unit>
        <trans-unit id="8485acf199bdc9bdeaa1e3d669de04e628a02081" translate="yes" xml:space="preserve">
          <source>Returns a reference to the character at specified location &lt;code&gt;pos&lt;/code&gt;. No bounds checking is performed. If &lt;code&gt;pos &amp;gt; size()&lt;/code&gt;, the behavior is undefined.</source>
          <target state="translated">返回对指定位置 &lt;code&gt;pos&lt;/code&gt; 处字符的引用。不执行边界检查。如果 &lt;code&gt;pos &amp;gt; size()&lt;/code&gt; ，则行为未定义。</target>
        </trans-unit>
        <trans-unit id="2dbaafa3b108acdcfe5d3b3487a7bc102e963f13" translate="yes" xml:space="preserve">
          <source>Returns a reference to the element at specified location &lt;code&gt;pos&lt;/code&gt;, with bounds checking.</source>
          <target state="translated">返回对指定位置 &lt;code&gt;pos&lt;/code&gt; 上元素的引用，并进行边界检查。</target>
        </trans-unit>
        <trans-unit id="b2665679f497339d0516c0ad5a688e867f71aa37" translate="yes" xml:space="preserve">
          <source>Returns a reference to the element at specified location &lt;code&gt;pos&lt;/code&gt;. No bounds checking is performed.</source>
          <target state="translated">返回对在指定位置 &lt;code&gt;pos&lt;/code&gt; 的元素的引用。不执行边界检查。</target>
        </trans-unit>
        <trans-unit id="db154e8ab62b6272156b1705e3eb48ea36661560" translate="yes" xml:space="preserve">
          <source>Returns a reference to the element at specified relative location.</source>
          <target state="translated">返回指定相对位置的元素引用。</target>
        </trans-unit>
        <trans-unit id="40b11148e9f16b408786d3ab577d77a530ef2afd" translate="yes" xml:space="preserve">
          <source>Returns a reference to the facet. The reference returned by this function is valid as long as any &lt;code&gt;&lt;a href=&quot;locale&quot;&gt;std::locale&lt;/a&gt;&lt;/code&gt; object exists that implements &lt;code&gt;Facet&lt;/code&gt;.</source>
          <target state="translated">返回对构面的引用。只要存在实现 &lt;code&gt;Facet&lt;/code&gt; 的任何 &lt;code&gt;&lt;a href=&quot;locale&quot;&gt;std::locale&lt;/a&gt;&lt;/code&gt; 对象，此函数返回的引用都是有效的。</target>
        </trans-unit>
        <trans-unit id="7d828e0486984b6d976355023bfcaeb9faf1ec60" translate="yes" xml:space="preserve">
          <source>Returns a reference to the first element in the container.</source>
          <target state="translated">返回对容器中第一个元素的引用。</target>
        </trans-unit>
        <trans-unit id="5c12b4cdecf8215d253b8464d67f21ea11028fe9" translate="yes" xml:space="preserve">
          <source>Returns a reference to the first element in the span.</source>
          <target state="translated">返回span中第一个元素的引用。</target>
        </trans-unit>
        <trans-unit id="97b513b9f306c41c7d8fe7059ec8dfe2aeaaa8f7" translate="yes" xml:space="preserve">
          <source>Returns a reference to the last element in the span.</source>
          <target state="translated">返回span中最后一个元素的引用。</target>
        </trans-unit>
        <trans-unit id="646a2d3fd42a91e8ad7197c63c0f185cd748f5b9" translate="yes" xml:space="preserve">
          <source>Returns a reference to the mapped value of the element with key equivalent to &lt;code&gt;key&lt;/code&gt;. If no such element exists, an exception of type &lt;code&gt;&lt;a href=&quot;../../error/out_of_range/out_of_range&quot;&gt;std::out_of_range&lt;/a&gt;&lt;/code&gt; is thrown.</source>
          <target state="translated">返回对元素映射值的引用，其键等于 &lt;code&gt;key&lt;/code&gt; 。如果不存在这样的元素，则引发类型为 &lt;code&gt;&lt;a href=&quot;../../error/out_of_range/out_of_range&quot;&gt;std::out_of_range&lt;/a&gt;&lt;/code&gt; 的异常。</target>
        </trans-unit>
        <trans-unit id="d170667d4ac4fe5d7797a97703e4b3d937cef369" translate="yes" xml:space="preserve">
          <source>Returns a reference to the value that is mapped to a key equivalent to &lt;code&gt;key&lt;/code&gt;, performing an insertion if such key does not already exist.</source>
          <target state="translated">返回对该值的引用，该值映射到等效于 &lt;code&gt;key&lt;/code&gt; 的键，如果该键尚不存在，则执行插入。</target>
        </trans-unit>
        <trans-unit id="d34824e7e6ac6749c5f13f5cccf791766b7b08f5" translate="yes" xml:space="preserve">
          <source>Returns a reverse iterator to the character following the last character of the reversed string. It corresponds to the character preceding the first character of the non-reversed string. This character acts as a placeholder, attempting to access it results in undefined behavior.</source>
          <target state="translated">返回一个反转迭代器,指向反转字符串的最后一个字符后的字符。它对应于非反转字符串的第一个字符之前的字符。这个字符作为一个占位符,试图访问它将导致未定义的行为。</target>
        </trans-unit>
        <trans-unit id="3656633a67960294e04771fc73f5b90d8313f859" translate="yes" xml:space="preserve">
          <source>Returns a reverse iterator to the character following the last character of the reversed view. It corresponds to the character preceding the first character of the non-reversed view. This character acts as a placeholder, attempting to access it results in undefined behavior.</source>
          <target state="translated">返回反转视图中最后一个字符后面的字符的反转迭代器,它对应于非反转视图中第一个字符前面的字符。它对应于非反转视图的第一个字符之前的字符。这个字符作为一个占位符,试图访问它将导致未定义的行为。</target>
        </trans-unit>
        <trans-unit id="6e776c5a06edbf66c14ca8e3edcd3f32fa3b6f7d" translate="yes" xml:space="preserve">
          <source>Returns a reverse iterator to the element following the last element of the reversed container. It corresponds to the element preceding the first element of the non-reversed container. This element acts as a placeholder, attempting to access it results in undefined behavior.</source>
          <target state="translated">返回反转容器的最后一个元素后面的元素的反向迭代器,它对应于非反转容器的第一个元素。它对应于非反向容器的第一个元素之前的元素。这个元素作为一个占位符,试图访问它将导致未定义的行为。</target>
        </trans-unit>
        <trans-unit id="e90548751849ff411afa18606cc114c74e350044" translate="yes" xml:space="preserve">
          <source>Returns a reverse iterator to the element following the last element of the reversed span. It corresponds to the element preceding the first element of the non-reversed span. This element acts as a placeholder, attempting to access it results in undefined behavior.</source>
          <target state="translated">返回反向迭代到反向跨度的最后一个元素之后的元素。它对应于非反向跨度的第一个元素之前的元素。这个元素作为一个占位符,试图访问它将导致未定义的行为。</target>
        </trans-unit>
        <trans-unit id="f6ba54c6f29cc40a4cb0fe0bff90ad373f071710" translate="yes" xml:space="preserve">
          <source>Returns a reverse iterator to the first character of the reversed string. It corresponds to the last character of the non-reversed string.</source>
          <target state="translated">返回反转字符串的第一个字符的反向迭代器。它对应于非反转字符串的最后一个字符。</target>
        </trans-unit>
        <trans-unit id="32d3c95198e3442e4602619163e5f3a9aef69381" translate="yes" xml:space="preserve">
          <source>Returns a reverse iterator to the first character of the reversed view. It corresponds to the last character of the non-reversed view.</source>
          <target state="translated">返回反转视图的第一个字符的反转迭代器,对应于非反转视图的最后一个字符。它对应于非反转视图的最后一个字符。</target>
        </trans-unit>
        <trans-unit id="9ba58e4344771a7422534d10f9de9f0066c77731" translate="yes" xml:space="preserve">
          <source>Returns a reverse iterator to the first element of the reversed container. It corresponds to the last element of the non-reversed container. If the container is empty, the returned iterator is equal to &lt;code&gt;&lt;a href=&quot;rend&quot;&gt;rend()&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">将反向迭代器返回到反向容器的第一个元素。它对应于非反转容器的最后一个元素。如果容器为空，则返回的迭代器等于 &lt;code&gt;&lt;a href=&quot;rend&quot;&gt;rend()&lt;/a&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="dd9d865bb5369a4a4318a00eeefea3103301d43f" translate="yes" xml:space="preserve">
          <source>Returns a reverse iterator to the first element of the reversed span. It corresponds to the last element of the non-reversed span. If the span is empty, the returned iterator is equal to &lt;code&gt;rend()&lt;/code&gt;.</source>
          <target state="translated">返回反向迭代器到反向范围的第一个元素。它对应于不可逆跨度的最后一个元素。如果范围为空，则返回的迭代器等于 &lt;code&gt;rend()&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="e032cdd7b192f435986dc2e4de6428bf733bea7f" translate="yes" xml:space="preserve">
          <source>Returns a rvalue-reference or pointer to the current element.</source>
          <target state="translated">返回一个rvalue-reference或指向当前元素的指针。</target>
        </trans-unit>
        <trans-unit id="fe181d9986125a7c774aa98095351ee1179c50da" translate="yes" xml:space="preserve">
          <source>Returns a string describing the assertion level of the violated contract.</source>
          <target state="translated">返回一个描述被违反合同的断言级别的字符串。</target>
        </trans-unit>
        <trans-unit id="2cdd203798f9286fe3ab20e1299670ed579e1b69" translate="yes" xml:space="preserve">
          <source>Returns a string describing the given error condition for the error category represented by &lt;code&gt;*this&lt;/code&gt;.</source>
          <target state="translated">返回一个字符串，该字符串描述由 &lt;code&gt;*this&lt;/code&gt; 表示的错误类别的给定错误条件。</target>
        </trans-unit>
        <trans-unit id="a6ceb037e01c531ca11be8953bed0bac16f9646d" translate="yes" xml:space="preserve">
          <source>Returns a string representing the indicated sub-match.</source>
          <target state="translated">返回代表指定子匹配的字符串。</target>
        </trans-unit>
        <trans-unit id="49b612ca607ffd20db39e26dc4aa3c96e7319403" translate="yes" xml:space="preserve">
          <source>Returns a string representing the specified match or sub match.</source>
          <target state="translated">返回代表指定匹配或子匹配的字符串。</target>
        </trans-unit>
        <trans-unit id="03ac5a4f212325483c6400c65d1609005b779e1e" translate="yes" xml:space="preserve">
          <source>Returns a substring &lt;code&gt;[pos, pos+count)&lt;/code&gt;. If the requested substring extends past the end of the string, or if &lt;code&gt;count == npos&lt;/code&gt;, the returned substring is &lt;code&gt;[pos, &lt;/code&gt;&lt;a href=&quot;size&quot;&gt;&lt;code&gt;size()&lt;/code&gt;&lt;/a&gt;&lt;code&gt;)&lt;/code&gt;.</source>
          <target state="translated">返回一个子字符串 &lt;code&gt;[pos, pos+count)&lt;/code&gt; 。如果请求的子字符串超出了字符串的末尾，或者如果 &lt;code&gt;count == npos&lt;/code&gt; ，则返回的子字符串为 &lt;code&gt;[pos, &lt;/code&gt; &lt;a href=&quot;size&quot;&gt; &lt;code&gt;size()&lt;/code&gt; &lt;/a&gt; &lt;code&gt;)&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="910086cfe4a1dfcf618515bdc47158c3676aa6cb" translate="yes" xml:space="preserve">
          <source>Returns a time point representing the current point in time.</source>
          <target state="translated">返回一个代表当前时间点的时间点。</target>
        </trans-unit>
        <trans-unit id="290c0f71c0ee220714bce8a060889a5ee63fa289" translate="yes" xml:space="preserve">
          <source>Returns a time point representing the current point in time. The result is calculated as if by &lt;code&gt;&lt;a href=&quot;from_sys&quot;&gt;std::chrono::utc_clock::from_sys&lt;/a&gt;(&lt;a href=&quot;../system_clock/now&quot;&gt;std::chrono::system_clock::now&lt;/a&gt;())&lt;/code&gt;. Implementations may use a more accurate value of UTC time.</source>
          <target state="translated">返回代表当前时间点的时间点。结果的计算方式类似于 &lt;code&gt;&lt;a href=&quot;from_sys&quot;&gt;std::chrono::utc_clock::from_sys&lt;/a&gt;(&lt;a href=&quot;../system_clock/now&quot;&gt;std::chrono::system_clock::now&lt;/a&gt;())&lt;/code&gt; 。实现可能使用更准确的UTC时间值。</target>
        </trans-unit>
        <trans-unit id="438720a98b939f160da72cb0ee999770274722ff" translate="yes" xml:space="preserve">
          <source>Returns a time point representing the current point in time. The result is calculated as if by &lt;code&gt;&lt;a href=&quot;from_utc&quot;&gt;std::chrono::gps_clock::from_utc&lt;/a&gt;(&lt;a href=&quot;../utc_clock/now&quot;&gt;std::chrono::utc_clock::now&lt;/a&gt;())&lt;/code&gt;. Implementations may use a more accurate value of GPS time.</source>
          <target state="translated">返回代表当前时间点的时间点。结果就像 &lt;code&gt;&lt;a href=&quot;from_utc&quot;&gt;std::chrono::gps_clock::from_utc&lt;/a&gt;(&lt;a href=&quot;../utc_clock/now&quot;&gt;std::chrono::utc_clock::now&lt;/a&gt;())&lt;/code&gt; 。实施可以使用更精确的GPS时间值。</target>
        </trans-unit>
        <trans-unit id="cb36ff441435e0d54ebea93ab202922aa250be49" translate="yes" xml:space="preserve">
          <source>Returns a time point representing the current point in time. The result is calculated as if by &lt;code&gt;&lt;a href=&quot;from_utc&quot;&gt;std::chrono::tai_clock::from_utc&lt;/a&gt;(&lt;a href=&quot;../utc_clock/now&quot;&gt;std::chrono::utc_clock::now&lt;/a&gt;())&lt;/code&gt;. Implementations may use a more accurate value of TAI time.</source>
          <target state="translated">返回代表当前时间点的时间点。结果的计算方式类似于 &lt;code&gt;&lt;a href=&quot;from_utc&quot;&gt;std::chrono::tai_clock::from_utc&lt;/a&gt;(&lt;a href=&quot;../utc_clock/now&quot;&gt;std::chrono::utc_clock::now&lt;/a&gt;())&lt;/code&gt; 。实施可以使用更准确的TAI时间值。</target>
        </trans-unit>
        <trans-unit id="3b5a4c5644a89e01b774bcce4d2365ade1b73f35" translate="yes" xml:space="preserve">
          <source>Returns a time zone pointer for the default time zone (UTC).</source>
          <target state="translated">返回默认时区(UTC)的时区指针。</target>
        </trans-unit>
        <trans-unit id="a8403fc0c4e506c29ae4218ebecb8e7716db67ad" translate="yes" xml:space="preserve">
          <source>Returns a unique (program-wide) index value that can be used to access one &lt;code&gt;long&lt;/code&gt; and one &lt;code&gt;void*&lt;/code&gt; elements in the private storage of &lt;code&gt;std::ios_base&lt;/code&gt; by calling &lt;code&gt;&lt;a href=&quot;iword&quot;&gt;iword()&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;pword&quot;&gt;pword()&lt;/a&gt;&lt;/code&gt;. The call to &lt;code&gt;xalloc&lt;/code&gt; does not allocate memory.</source>
          <target state="translated">返回唯一的（程序范围内的）索引值，该值可通过调用 &lt;code&gt;&lt;a href=&quot;iword&quot;&gt;iword()&lt;/a&gt;&lt;/code&gt; 和 &lt;code&gt;&lt;a href=&quot;pword&quot;&gt;pword()&lt;/a&gt;&lt;/code&gt; 来访问 &lt;code&gt;std::ios_base&lt;/code&gt; 的私有存储中的一个 &lt;code&gt;long&lt;/code&gt; &lt;code&gt;void*&lt;/code&gt; 和一个void *元素。对 &lt;code&gt;xalloc&lt;/code&gt; 的调用不会分配内存。</target>
        </trans-unit>
        <trans-unit id="4afdb1bce5fa35b070eb3ea8cfb88eb4d3e33273" translate="yes" xml:space="preserve">
          <source>Returns a value in the closed interval &lt;code&gt;[E::min(), E::max()]&lt;/code&gt;. Has amortized constant complexity.</source>
          <target state="translated">返回封闭时间间隔 &lt;code&gt;[E::min(), E::max()]&lt;/code&gt; 。摊销不变的复杂性。</target>
        </trans-unit>
        <trans-unit id="d874f19a26f9ad6764f9c8d0632e7a9722b58449" translate="yes" xml:space="preserve">
          <source>Returns a value in the closed interval &lt;code&gt;[G::min(), G::max()]&lt;/code&gt;. Has amortized constant complexity.</source>
          <target state="translated">返回封闭时间间隔 &lt;code&gt;[G::min(), G::max()]&lt;/code&gt; 。摊销不变的复杂性。</target>
        </trans-unit>
        <trans-unit id="b3fc4ae486fd2727b227ca55636203554c6ce098" translate="yes" xml:space="preserve">
          <source>Returns a value not equivalent to any valid value of type &lt;code&gt;char_type&lt;/code&gt;.</source>
          <target state="translated">返回不等于 &lt;code&gt;char_type&lt;/code&gt; 类型的任何有效值的值。</target>
        </trans-unit>
        <trans-unit id="33f9bb911051172743f8a9431ca9627ef632db68" translate="yes" xml:space="preserve">
          <source>Returns a value of &lt;code&gt;&lt;a href=&quot;id&quot;&gt;std::thread::id&lt;/a&gt;&lt;/code&gt; identifying the thread associated with &lt;code&gt;*this&lt;/code&gt;.</source>
          <target state="translated">返回值 &lt;code&gt;&lt;a href=&quot;id&quot;&gt;std::thread::id&lt;/a&gt;&lt;/code&gt; 标识与 &lt;code&gt;*this&lt;/code&gt; 关联的线程。</target>
        </trans-unit>
        <trans-unit id="d411b1f72a375b561985434690018ec29f250373" translate="yes" xml:space="preserve">
          <source>Returns a value of type &lt;code&gt;&lt;a href=&quot;../../types/size_t&quot;&gt;std::size_t&lt;/a&gt;&lt;/code&gt; that represents the hash value of &lt;code&gt;key&lt;/code&gt;.</source>
          <target state="translated">返回类型为 &lt;code&gt;&lt;a href=&quot;../../types/size_t&quot;&gt;std::size_t&lt;/a&gt;&lt;/code&gt; 的值，该值表示 &lt;code&gt;key&lt;/code&gt; 的哈希值。</target>
        </trans-unit>
        <trans-unit id="442e42c7b7955540a814b6a421ae4c5ecda6a7bc" translate="yes" xml:space="preserve">
          <source>Returns a value of type &lt;code&gt;&lt;a href=&quot;../types/size_t&quot;&gt;std::size_t&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">返回类型为 &lt;code&gt;&lt;a href=&quot;../types/size_t&quot;&gt;std::size_t&lt;/a&gt;&lt;/code&gt; 的值。</target>
        </trans-unit>
        <trans-unit id="e6e56a50f45a92b52174ad0d943d9c6e8d34eaa8" translate="yes" xml:space="preserve">
          <source>Returns a value of type &lt;code&gt;new_type&lt;/code&gt;.</source>
          <target state="translated">返回类型为 &lt;code&gt;new_type&lt;/code&gt; 的值。</target>
        </trans-unit>
        <trans-unit id="a11264ea73e8b71499dc4fa4ab0fbc55c8a65ced" translate="yes" xml:space="preserve">
          <source>Returns a view of the substring &lt;code&gt;[pos, pos + rcount)&lt;/code&gt;, where &lt;code&gt;rcount&lt;/code&gt; is the smaller of &lt;code&gt;count&lt;/code&gt; and &lt;code&gt;size() - pos&lt;/code&gt;.</source>
          <target state="translated">返回子字符串 &lt;code&gt;[pos, pos + rcount)&lt;/code&gt; 的视图，其中 &lt;code&gt;rcount&lt;/code&gt; 是 &lt;code&gt;count&lt;/code&gt; 和 &lt;code&gt;size() - pos&lt;/code&gt; 的较小者。</target>
        </trans-unit>
        <trans-unit id="dc33f9a01fa7703049b843df04316f99e95a0756" translate="yes" xml:space="preserve">
          <source>Returns a zero-length duration.</source>
          <target state="translated">返回一个零长度的持续时间。</target>
        </trans-unit>
        <trans-unit id="5028852b7a9f3094e44699116e8b1a3b55283adb" translate="yes" xml:space="preserve">
          <source>Returns a zero-length representation.</source>
          <target state="translated">返回一个零长度的表示。</target>
        </trans-unit>
        <trans-unit id="09d077b32c2691b6d7fffbccdef2f724c0697878" translate="yes" xml:space="preserve">
          <source>Returns an absolute (although not necessarily canonical) pathname referencing the same file as &lt;code&gt;p&lt;/code&gt;.</source>
          <target state="translated">返回一个绝对（尽管不一定是规范的）路径名，该路径名引用与 &lt;code&gt;p&lt;/code&gt; 相同的文件。</target>
        </trans-unit>
        <trans-unit id="097c5a99872db70d1352c8ee1e7080a670fac084" translate="yes" xml:space="preserve">
          <source>Returns an explanatory byte string. This explanatory string contains the explanatory string passed at the time of construction. Implementations are encouraged to include the pathnames of &lt;code&gt;&lt;a href=&quot;path&quot;&gt;path1()&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;path&quot;&gt;path2()&lt;/a&gt;&lt;/code&gt; in native format and the &lt;code&gt;&lt;a href=&quot;../../error/system_error/what&quot;&gt;std::system_error::what()&lt;/a&gt;&lt;/code&gt; string inside the returned string as well.</source>
          <target state="translated">返回说明性的字节字符串。该说明字符串包含在构造时通过的说明字符串。鼓励实现在本机格式中包括 &lt;code&gt;&lt;a href=&quot;path&quot;&gt;path1()&lt;/a&gt;&lt;/code&gt; 和 &lt;code&gt;&lt;a href=&quot;path&quot;&gt;path2()&lt;/a&gt;&lt;/code&gt; 的路径名，并在返回的字符串中包括 &lt;code&gt;&lt;a href=&quot;../../error/system_error/what&quot;&gt;std::system_error::what()&lt;/a&gt;&lt;/code&gt; 字符串。</target>
        </trans-unit>
        <trans-unit id="6d4e35eb62ff8430d06c060cd2a7c698e9eb925b" translate="yes" xml:space="preserve">
          <source>Returns an explanatory message for the stored error code and error category. Effectively calls &lt;code&gt;category().message(value())&lt;/code&gt;.</source>
          <target state="translated">返回有关存储的错误代码和错误类别的说明性消息。有效地调用 &lt;code&gt;category().message(value())&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="169011eab0784e2bb8ba4076138b46b4cdf5b672" translate="yes" xml:space="preserve">
          <source>Returns an implementation defined null-terminated character string containing the name of the type. No guarantees are given; in particular, the returned string can be identical for several types and change between invocations of the same program.</source>
          <target state="translated">返回一个包含类型名称的执行定义的空头字符串。不提供任何保证;特别是,返回的字符串可能对多个类型完全相同,并在同一程序的调用之间发生变化。</target>
        </trans-unit>
        <trans-unit id="b27aa6c95080a23f5c796aab8a422ae595b3a704" translate="yes" xml:space="preserve">
          <source>Returns an implementation-defined string describing the predicate of the violated contract.</source>
          <target state="translated">返回一个执行定义的字符串,描述被违反合同的谓词。</target>
        </trans-unit>
        <trans-unit id="47ef43bd183c1221f7d6751fb0df8366104ed1a6" translate="yes" xml:space="preserve">
          <source>Returns an iterator pointing to the first element in the range &lt;code&gt;[first, last)&lt;/code&gt; that is</source>
          <target state="translated">返回一个迭代器，该迭代器指向 &lt;code&gt;[first, last)&lt;/code&gt; 范围内的第一个元素，即</target>
        </trans-unit>
        <trans-unit id="d8ed8f52c7f9d8abcfffa37638ec3826bcee39d2" translate="yes" xml:space="preserve">
          <source>Returns an iterator referring to the first &lt;code&gt;std::chrono::tzdb&lt;/code&gt; in the container.</source>
          <target state="translated">返回引用容器中第一个 &lt;code&gt;std::chrono::tzdb&lt;/code&gt; 的迭代器。</target>
        </trans-unit>
        <trans-unit id="cac8796e5d454984fb57ed6a0cf3316880617201" translate="yes" xml:space="preserve">
          <source>Returns an iterator to the beginning of the given container &lt;code&gt;c&lt;/code&gt; or array &lt;code&gt;array&lt;/code&gt;. These templates rely on &lt;code&gt;C::begin()&lt;/code&gt; having a reasonable implementation.</source>
          <target state="translated">返回给定容器 &lt;code&gt;c&lt;/code&gt; 或数组 &lt;code&gt;array&lt;/code&gt; 的开头的迭代器。这些模板依赖于 &lt;code&gt;C::begin()&lt;/code&gt; 具有合理的实现。</target>
        </trans-unit>
        <trans-unit id="200111369d1eeb84564640727237304222749952" translate="yes" xml:space="preserve">
          <source>Returns an iterator to the beginning of the list of sub-matches. If match was successful, the iterator will point to the entire matched expression.</source>
          <target state="translated">返回一个迭代器,指向子匹配列表的开头。如果匹配成功,迭代器将指向整个匹配的表达式。</target>
        </trans-unit>
        <trans-unit id="8a18ce23dbd62f8766ed62924720905ca243b4c0" translate="yes" xml:space="preserve">
          <source>Returns an iterator to the character following the last character of the string. This character acts as a placeholder, attempting to access it results in undefined behavior.</source>
          <target state="translated">返回一个迭代器,指向字符串最后一个字符后的字符。这个字符作为一个占位符,试图访问它将导致未定义的行为。</target>
        </trans-unit>
        <trans-unit id="88e70725cfc468dda90f1b4f0b4f105f78e7a287" translate="yes" xml:space="preserve">
          <source>Returns an iterator to the character following the last character of the view. This character acts as a placeholder, attempting to access it results in undefined behavior.</source>
          <target state="translated">返回一个迭代器到视图最后一个字符后的字符。这个字符作为一个占位符,试图访问它将导致未定义的行为。</target>
        </trans-unit>
        <trans-unit id="aa3c2f196f36a90d5196d932caf1b9332d4a4d39" translate="yes" xml:space="preserve">
          <source>Returns an iterator to the element before the first element of the container. This element acts as a placeholder, attempting to access it results in undefined behavior. The only usage cases are in functions &lt;code&gt;&lt;a href=&quot;insert_after&quot;&gt;insert_after()&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;emplace_after&quot;&gt;emplace_after()&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;erase_after&quot;&gt;erase_after()&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;splice_after&quot;&gt;splice_after()&lt;/a&gt;&lt;/code&gt; and the increment operator: incrementing the before-begin iterator gives exactly the same iterator as obtained from &lt;code&gt;&lt;a href=&quot;begin&quot;&gt;begin()&lt;/a&gt;&lt;/code&gt;/&lt;code&gt;&lt;a href=&quot;begin&quot;&gt;cbegin()&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">返回容器的第一个元素之前的元素的迭代器。该元素充当占位符，尝试访问它会导致未定义的行为。唯一的使用情况是在功能 &lt;code&gt;&lt;a href=&quot;insert_after&quot;&gt;insert_after()&lt;/a&gt;&lt;/code&gt; ， &lt;code&gt;&lt;a href=&quot;emplace_after&quot;&gt;emplace_after()&lt;/a&gt;&lt;/code&gt; ， &lt;code&gt;&lt;a href=&quot;erase_after&quot;&gt;erase_after()&lt;/a&gt;&lt;/code&gt; ， &lt;code&gt;&lt;a href=&quot;splice_after&quot;&gt;splice_after()&lt;/a&gt;&lt;/code&gt; 和递增运算符：递增之前，开始迭代给出完全相同的迭代器从获得的 &lt;code&gt;&lt;a href=&quot;begin&quot;&gt;begin()&lt;/a&gt;&lt;/code&gt; / &lt;code&gt;&lt;a href=&quot;begin&quot;&gt;cbegin()&lt;/a&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="c2b7e59f3a5a7cfd9bff3b170a41f303af54e526" translate="yes" xml:space="preserve">
          <source>Returns an iterator to the element following the last element of the bucket with index &lt;code&gt;n&lt;/code&gt;. . This element acts as a placeholder, attempting to access it results in undefined behavior.</source>
          <target state="translated">将迭代器返回到索引为 &lt;code&gt;n&lt;/code&gt; 的存储桶最后一个元素之后的元素。。该元素充当占位符，尝试访问它会导致未定义的行为。</target>
        </trans-unit>
        <trans-unit id="528b29ca7f9c6500dcdd37a0040d44c4d9d99fc8" translate="yes" xml:space="preserve">
          <source>Returns an iterator to the element following the last element of the container.</source>
          <target state="translated">返回到容器的最后一个元素后面的元素的迭代器。</target>
        </trans-unit>
        <trans-unit id="cca4b763f9c5e0916a4e213ac068d0bbefc2d27d" translate="yes" xml:space="preserve">
          <source>Returns an iterator to the element following the last element of the span.</source>
          <target state="translated">返回一个迭代器到span的最后一个元素后面的元素。</target>
        </trans-unit>
        <trans-unit id="79c5fd75b8a1e3b470f3a927f675d3bb75482f80" translate="yes" xml:space="preserve">
          <source>Returns an iterator to the end (i.e. the element after the last element) of the given container &lt;code&gt;c&lt;/code&gt; or array &lt;code&gt;array&lt;/code&gt;. These templates rely on &lt;code&gt;C::end()&lt;/code&gt; having a reasonable implementation.</source>
          <target state="translated">将迭代器返回给定容器 &lt;code&gt;c&lt;/code&gt; 或数组 &lt;code&gt;array&lt;/code&gt; 的末尾（即最后一个元素之后的元素）。这些模板依赖于具有合理实现的 &lt;code&gt;C::end()&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="a4415dbc1b12f4898ab1846841726049b88fe997" translate="yes" xml:space="preserve">
          <source>Returns an iterator to the end of the list of sub-matches.</source>
          <target state="translated">返回一个迭代器到子匹配列表的末尾。</target>
        </trans-unit>
        <trans-unit id="1921abee0e26ecd5c8b82910f4191f212c876b66" translate="yes" xml:space="preserve">
          <source>Returns an iterator to the first character of the string.</source>
          <target state="translated">返回到字符串的第一个字符的迭代器。</target>
        </trans-unit>
        <trans-unit id="cf0e8cb8298ba60b6f900dac5dd33047be4e2ef6" translate="yes" xml:space="preserve">
          <source>Returns an iterator to the first character of the view.</source>
          <target state="translated">返回到视图的第一个字符的迭代器。</target>
        </trans-unit>
        <trans-unit id="9cc8c7b646216bde3e068394ceb4f9534af88119" translate="yes" xml:space="preserve">
          <source>Returns an iterator to the first element of the bucket with index &lt;code&gt;n&lt;/code&gt;.</source>
          <target state="translated">返回索引为 &lt;code&gt;n&lt;/code&gt; 的存储桶的第一个元素的迭代器。</target>
        </trans-unit>
        <trans-unit id="86903693516c601450ff4f34cf4b232b1f695e7d" translate="yes" xml:space="preserve">
          <source>Returns an iterator to the first element of the container.</source>
          <target state="translated">返回到容器的第一个元素的迭代器。</target>
        </trans-unit>
        <trans-unit id="81c543a407309416aae5e3e2a54ea6d33b32b843" translate="yes" xml:space="preserve">
          <source>Returns an iterator to the first element of the span.</source>
          <target state="translated">返回到跨度的第一个元素的迭代器。</target>
        </trans-unit>
        <trans-unit id="586a75c92e5a6a45b3124bd38308df2f23fc9f7b" translate="yes" xml:space="preserve">
          <source>Returns an iterator to the inserted element.</source>
          <target state="translated">返回插入元素的迭代器。</target>
        </trans-unit>
        <trans-unit id="75b6a322e6db7d26e701286c5eeccfc5f40ec3cb" translate="yes" xml:space="preserve">
          <source>Returns an iterator to the newly inserted element.</source>
          <target state="translated">返回一个新插入元素的迭代器。</target>
        </trans-unit>
        <trans-unit id="6f620ca14ec6fc7905911cd1adc6e6683f766686" translate="yes" xml:space="preserve">
          <source>Returns an iterator to the reverse-beginning of the given container &lt;code&gt;c&lt;/code&gt; or array &lt;code&gt;array&lt;/code&gt;.</source>
          <target state="translated">将迭代器返回给定容器 &lt;code&gt;c&lt;/code&gt; 或数组 &lt;code&gt;array&lt;/code&gt; 的反向开头。</target>
        </trans-unit>
        <trans-unit id="a7bc601d5cfece22ab64bbb9558aad3c5df09c1c" translate="yes" xml:space="preserve">
          <source>Returns an iterator to the reverse-end of the given container &lt;code&gt;c&lt;/code&gt; or array &lt;code&gt;array&lt;/code&gt;.</source>
          <target state="translated">返回给定容器 &lt;code&gt;c&lt;/code&gt; 或数组 &lt;code&gt;array&lt;/code&gt; 的后端的迭代器。</target>
        </trans-unit>
        <trans-unit id="4c8f3b9b9af9a512ff3ca3dcf2accf9a42acf1cd" translate="yes" xml:space="preserve">
          <source>Returns an object &lt;code&gt;manip&lt;/code&gt; of unspecified type such that, given a &lt;code&gt;&lt;a href=&quot;../io/basic_istream&quot;&gt;std::basic_istream&lt;/a&gt;&amp;lt;CharT, Traits&amp;gt;&lt;/code&gt; object &lt;code&gt;is&lt;/code&gt;, the expression &lt;code&gt;is &amp;gt;&amp;gt; manip&lt;/code&gt; calls &lt;code&gt;from_stream&lt;/code&gt; (unqualified, to enable &lt;a href=&quot;../language/adl&quot;&gt;argument-dependent lookup&lt;/a&gt;) as follows:</source>
          <target state="translated">返回一个对象 &lt;code&gt;manip&lt;/code&gt; 未指定的类型，例如，给定 &lt;code&gt;&lt;a href=&quot;../io/basic_istream&quot;&gt;std::basic_istream&lt;/a&gt;&amp;lt;CharT, Traits&amp;gt;&lt;/code&gt; 对象 &lt;code&gt;is&lt;/code&gt; ，所述表达 &lt;code&gt;is &amp;gt;&amp;gt; manip&lt;/code&gt; 呼叫 &lt;code&gt;from_stream&lt;/code&gt; （不合格的，以启用&lt;a href=&quot;../language/adl&quot;&gt;依赖参数的查找&lt;/a&gt;）如下：</target>
        </trans-unit>
        <trans-unit id="2b912c70b7e5cf1f387d4db4c0abd36d06e03d33" translate="yes" xml:space="preserve">
          <source>Returns an object of unspecified type such that if &lt;code&gt;in&lt;/code&gt; is the name of an input stream of type &lt;code&gt;&lt;a href=&quot;../basic_istream&quot;&gt;std::basic_istream&lt;/a&gt;&amp;lt;CharT, Traits&amp;gt;&lt;/code&gt;, then the expression &lt;code&gt;in &amp;gt;&amp;gt; get_money(mon, intl)&lt;/code&gt; behaves as if the following code was executed:</source>
          <target state="translated">返回一个未指定类型的对象，使得如果 &lt;code&gt;in&lt;/code&gt; 是类型 &lt;code&gt;&lt;a href=&quot;../basic_istream&quot;&gt;std::basic_istream&lt;/a&gt;&amp;lt;CharT, Traits&amp;gt;&lt;/code&gt; 的输入流的名称，则 &lt;code&gt;in &amp;gt;&amp;gt; get_money(mon, intl)&lt;/code&gt; 的表达式的行为就像执行以下代码一样：</target>
        </trans-unit>
        <trans-unit id="f7b8eb9dae19e297d78a02f22054f0345a6009a9" translate="yes" xml:space="preserve">
          <source>Returns an object of unspecified type such that if &lt;code&gt;in&lt;/code&gt; is the name of an input stream of type &lt;code&gt;&lt;a href=&quot;../basic_istream&quot;&gt;std::basic_istream&lt;/a&gt;&amp;lt;CharT, Traits&amp;gt;&lt;/code&gt;, then the expression &lt;code&gt;in &amp;gt;&amp;gt; get_time(tmb, fmt)&lt;/code&gt; behaves as if the following code was executed:</source>
          <target state="translated">返回未指定类型的对象，使得如果 &lt;code&gt;in&lt;/code&gt; 是类型 &lt;code&gt;&lt;a href=&quot;../basic_istream&quot;&gt;std::basic_istream&lt;/a&gt;&amp;lt;CharT, Traits&amp;gt;&lt;/code&gt; 的输入流的名称，则 &lt;code&gt;in &amp;gt;&amp;gt; get_time(tmb, fmt)&lt;/code&gt; 的表达式的行为就像执行以下代码一样：</target>
        </trans-unit>
        <trans-unit id="dd93f4216c896a7a95c5f72ce6a6efdd30d9da0e" translate="yes" xml:space="preserve">
          <source>Returns an object of unspecified type such that if &lt;code&gt;out&lt;/code&gt; is the name of an output stream of type &lt;code&gt;&lt;a href=&quot;../basic_ostream&quot;&gt;std::basic_ostream&lt;/a&gt;&amp;lt;CharT, Traits&amp;gt;&lt;/code&gt;, then the expression &lt;code&gt;out &amp;lt;&amp;lt; put_money(mon, intl)&lt;/code&gt; behaves as if the following code was executed:</source>
          <target state="translated">返回一个未指定类型的对象，使得如果 &lt;code&gt;out&lt;/code&gt; 是类型 &lt;code&gt;&lt;a href=&quot;../basic_ostream&quot;&gt;std::basic_ostream&lt;/a&gt;&amp;lt;CharT, Traits&amp;gt;&lt;/code&gt; 的输出流的名称，则表达式 &lt;code&gt;out &amp;lt;&amp;lt; put_money(mon, intl)&lt;/code&gt; 行为就像执行以下代码一样：</target>
        </trans-unit>
        <trans-unit id="62ae4c6be8fd20ac15bf4f697cecf21538c27d50" translate="yes" xml:space="preserve">
          <source>Returns an object of unspecified type such that if &lt;code&gt;out&lt;/code&gt; is the name of an output stream of type &lt;code&gt;&lt;a href=&quot;../basic_ostream&quot;&gt;std::basic_ostream&lt;/a&gt;&amp;lt;CharT, Traits&amp;gt;&lt;/code&gt;, then the expression &lt;code&gt;out &amp;lt;&amp;lt; put_time(tmb, fmt)&lt;/code&gt; behaves as if the following code was executed:</source>
          <target state="translated">返回一个未指定类型的对象，使得如果 &lt;code&gt;out&lt;/code&gt; 是类型 &lt;code&gt;&lt;a href=&quot;../basic_ostream&quot;&gt;std::basic_ostream&lt;/a&gt;&amp;lt;CharT, Traits&amp;gt;&lt;/code&gt; 的输出流的名称，则表达式 &lt;code&gt;out &amp;lt;&amp;lt; put_time(tmb, fmt)&lt;/code&gt; 行为就像执行以下代码一样：</target>
        </trans-unit>
        <trans-unit id="2f02d5f45ccc2a86bb7523ba5517f4a5124fbbfb" translate="yes" xml:space="preserve">
          <source>Returns an object of unspecified type such that if &lt;code&gt;out&lt;/code&gt; is the name of an output stream of type &lt;code&gt;&lt;a href=&quot;../basic_ostream&quot;&gt;std::basic_ostream&lt;/a&gt;&amp;lt;CharT, Traits&amp;gt;&lt;/code&gt;, then the expression &lt;code&gt;out &amp;lt;&amp;lt; setfill(n)&lt;/code&gt; behaves as if the following code was executed:</source>
          <target state="translated">返回未指定类型的对象，使得如果 &lt;code&gt;out&lt;/code&gt; 是类型 &lt;code&gt;&lt;a href=&quot;../basic_ostream&quot;&gt;std::basic_ostream&lt;/a&gt;&amp;lt;CharT, Traits&amp;gt;&lt;/code&gt; 的输出流的名称，则表达式 &lt;code&gt;out &amp;lt;&amp;lt; setfill(n)&lt;/code&gt; 行为就像执行以下代码一样：</target>
        </trans-unit>
        <trans-unit id="ac046e2119792d5bea1b8409425faada550bc7cc" translate="yes" xml:space="preserve">
          <source>Returns an object of unspecified type such that if &lt;code&gt;str&lt;/code&gt; is the name of a stream of type &lt;code&gt;&lt;a href=&quot;../basic_ostream&quot;&gt;std::basic_ostream&lt;/a&gt;&amp;lt;CharT, Traits&amp;gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;../basic_istream&quot;&gt;std::basic_istream&lt;/a&gt;&amp;lt;CharT, Traits&amp;gt;&lt;/code&gt;, then the expression &lt;code&gt;str &amp;lt;&amp;lt; resetiosflags(mask)&lt;/code&gt; or &lt;code&gt;str &amp;gt;&amp;gt; resetiosflags(mask)&lt;/code&gt; behaves as if the following code was executed:</source>
          <target state="translated">返回一个未指定类型的对象，如果 &lt;code&gt;str&lt;/code&gt; 是类型 &lt;code&gt;&lt;a href=&quot;../basic_ostream&quot;&gt;std::basic_ostream&lt;/a&gt;&amp;lt;CharT, Traits&amp;gt;&lt;/code&gt; 或 &lt;code&gt;&lt;a href=&quot;../basic_istream&quot;&gt;std::basic_istream&lt;/a&gt;&amp;lt;CharT, Traits&amp;gt;&lt;/code&gt; 的流的名称，则表达式 &lt;code&gt;str &amp;lt;&amp;lt; resetiosflags(mask)&lt;/code&gt; 或 &lt;code&gt;str &amp;gt;&amp;gt; resetiosflags(mask)&lt;/code&gt; 行为就像执行以下代码一样：</target>
        </trans-unit>
        <trans-unit id="8cfe440bb0461e50d9d52051f74e3742bee2cffb" translate="yes" xml:space="preserve">
          <source>Returns an object of unspecified type such that if &lt;code&gt;str&lt;/code&gt; is the name of a stream of type &lt;code&gt;&lt;a href=&quot;../basic_ostream&quot;&gt;std::basic_ostream&lt;/a&gt;&amp;lt;CharT, Traits&amp;gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;../basic_istream&quot;&gt;std::basic_istream&lt;/a&gt;&amp;lt;CharT, Traits&amp;gt;&lt;/code&gt;, then the expression &lt;code&gt;str &amp;lt;&amp;lt; setiosflags(mask)&lt;/code&gt; or &lt;code&gt;str &amp;gt;&amp;gt; setiosflags(mask)&lt;/code&gt; behaves as if the following code was executed:</source>
          <target state="translated">返回未指定类型的对象，如果 &lt;code&gt;str&lt;/code&gt; 是类型 &lt;code&gt;&lt;a href=&quot;../basic_ostream&quot;&gt;std::basic_ostream&lt;/a&gt;&amp;lt;CharT, Traits&amp;gt;&lt;/code&gt; 或 &lt;code&gt;&lt;a href=&quot;../basic_istream&quot;&gt;std::basic_istream&lt;/a&gt;&amp;lt;CharT, Traits&amp;gt;&lt;/code&gt; 的流的名称，则表达式 &lt;code&gt;str &amp;lt;&amp;lt; setiosflags(mask)&lt;/code&gt; 或 &lt;code&gt;str &amp;gt;&amp;gt; setiosflags(mask)&lt;/code&gt; 行为就像执行以下代码一样：</target>
        </trans-unit>
        <trans-unit id="84088dd4200032f3ae3d59597c68a3a9c3126c37" translate="yes" xml:space="preserve">
          <source>Returns an object of unspecified type such that if &lt;code&gt;str&lt;/code&gt; is the name of an output stream of type &lt;code&gt;&lt;a href=&quot;../basic_ostream&quot;&gt;std::basic_ostream&lt;/a&gt;&amp;lt;CharT, Traits&amp;gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;../basic_istream&quot;&gt;std::basic_istream&lt;/a&gt;&amp;lt;CharT, Traits&amp;gt;&lt;/code&gt;, then the expression &lt;code&gt;str &amp;lt;&amp;lt; setbase(base)&lt;/code&gt; or &lt;code&gt;str &amp;gt;&amp;gt; setbase(base)&lt;/code&gt; behaves as if the following code was executed:</source>
          <target state="translated">返回未指定类型的对象，如果 &lt;code&gt;str&lt;/code&gt; 是类型为 &lt;code&gt;&lt;a href=&quot;../basic_ostream&quot;&gt;std::basic_ostream&lt;/a&gt;&amp;lt;CharT, Traits&amp;gt;&lt;/code&gt; 或 &lt;code&gt;&lt;a href=&quot;../basic_istream&quot;&gt;std::basic_istream&lt;/a&gt;&amp;lt;CharT, Traits&amp;gt;&lt;/code&gt; 的输出流的名称，则表达式 &lt;code&gt;str &amp;lt;&amp;lt; setbase(base)&lt;/code&gt; 或 &lt;code&gt;str &amp;gt;&amp;gt; setbase(base)&lt;/code&gt; 行为就像执行以下代码一样：</target>
        </trans-unit>
        <trans-unit id="99e9158854aa614a650002c301d40ccfd60b2bd3" translate="yes" xml:space="preserve">
          <source>Returns an object of unspecified type such that if &lt;code&gt;str&lt;/code&gt; is the name of an output stream of type &lt;code&gt;&lt;a href=&quot;../basic_ostream&quot;&gt;std::basic_ostream&lt;/a&gt;&amp;lt;CharT, Traits&amp;gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;../basic_istream&quot;&gt;std::basic_istream&lt;/a&gt;&amp;lt;CharT, Traits&amp;gt;&lt;/code&gt;, then the expression &lt;code&gt;str &amp;lt;&amp;lt; setw(n)&lt;/code&gt; or &lt;code&gt;str &amp;gt;&amp;gt; setw(n)&lt;/code&gt; behaves as if the following code was executed:</source>
          <target state="translated">返回未指定类型的对象，如果 &lt;code&gt;str&lt;/code&gt; 是类型为 &lt;code&gt;&lt;a href=&quot;../basic_ostream&quot;&gt;std::basic_ostream&lt;/a&gt;&amp;lt;CharT, Traits&amp;gt;&lt;/code&gt; 或 &lt;code&gt;&lt;a href=&quot;../basic_istream&quot;&gt;std::basic_istream&lt;/a&gt;&amp;lt;CharT, Traits&amp;gt;&lt;/code&gt; 的输出流的名称，则表达式 &lt;code&gt;str &amp;lt;&amp;lt; setw(n)&lt;/code&gt; 或 &lt;code&gt;str &amp;gt;&amp;gt; setw(n)&lt;/code&gt; 行为就像执行以下代码一样：</target>
        </trans-unit>
        <trans-unit id="18f6da15b1f512ded981aab319c724a1a686be4a" translate="yes" xml:space="preserve">
          <source>Returns an object of unspecified type such that if &lt;code&gt;str&lt;/code&gt; is the name of an output stream of type &lt;code&gt;&lt;a href=&quot;../basic_ostream&quot;&gt;std::basic_ostream&lt;/a&gt;&amp;lt;CharT, Traits&amp;gt;&lt;/code&gt; or an input stream of type &lt;code&gt;&lt;a href=&quot;../basic_istream&quot;&gt;std::basic_istream&lt;/a&gt;&amp;lt;CharT, Traits&amp;gt;&lt;/code&gt;, then the expression &lt;code&gt;str &amp;lt;&amp;lt; setprecision(n)&lt;/code&gt; or &lt;code&gt;str &amp;gt;&amp;gt; setprecision(n)&lt;/code&gt; behaves as if the following code was executed:</source>
          <target state="translated">返回一个未指定类型的对象，例如，如果 &lt;code&gt;str&lt;/code&gt; 是类型 &lt;code&gt;&lt;a href=&quot;../basic_ostream&quot;&gt;std::basic_ostream&lt;/a&gt;&amp;lt;CharT, Traits&amp;gt;&lt;/code&gt; 的输出流的名称或类型 &lt;code&gt;&lt;a href=&quot;../basic_istream&quot;&gt;std::basic_istream&lt;/a&gt;&amp;lt;CharT, Traits&amp;gt;&lt;/code&gt; 的输入流的名称，则表达式 &lt;code&gt;str &amp;lt;&amp;lt; setprecision(n)&lt;/code&gt; 或 &lt;code&gt;str &amp;gt;&amp;gt; setprecision(n)&lt;/code&gt; 行为就像执行以下代码一样：</target>
        </trans-unit>
        <trans-unit id="b745e79c4379e75f4b180783dac4652e2d1e31fd" translate="yes" xml:space="preserve">
          <source>Returns an object of unspecified type such that the described behavior takes place.</source>
          <target state="translated">返回一个未指定类型的对象,使所述行为发生。</target>
        </trans-unit>
        <trans-unit id="85f3b9be5010fe45a01d94049a49a73fba0bd2d5" translate="yes" xml:space="preserve">
          <source>Returns an unspecified value such that for all &lt;code&gt;type_info&lt;/code&gt; objects referring to the same type, their hash_code() is the same.</source>
          <target state="translated">返回一个未指定的值，以便对于引用相同类型的所有 &lt;code&gt;type_info&lt;/code&gt; 对象，其hash_code（）相同。</target>
        </trans-unit>
        <trans-unit id="27f99fe4340eabdc7811882cacea94a1c7fd3d9d" translate="yes" xml:space="preserve">
          <source>Returns input position indicator of the current associated &lt;code&gt;streambuf&lt;/code&gt; object.</source>
          <target state="translated">返回当前关联的 &lt;code&gt;streambuf&lt;/code&gt; 对象的输入位置指示符。</target>
        </trans-unit>
        <trans-unit id="645f3739a8fcf9f946430acd5a736ee49d0acd26" translate="yes" xml:space="preserve">
          <source>Returns or changes the current path.</source>
          <target state="translated">返回或更改当前路径。</target>
        </trans-unit>
        <trans-unit id="88f0fb449a1cd691627d7c97f4f3346b7f85be4e" translate="yes" xml:space="preserve">
          <source>Returns path relative to root-path, that is, a pathname composed of every generic-format component of &lt;code&gt;*this&lt;/code&gt; after root-path. If &lt;code&gt;*this&lt;/code&gt; is an empty path, returns an empty path.</source>
          <target state="translated">返回相对于根路径的路径，即在根路径之后由 &lt;code&gt;*this&lt;/code&gt; 的每个通用格式组成的路径名。如果 &lt;code&gt;*this&lt;/code&gt; 是空路径，则返回空路径。</target>
        </trans-unit>
        <trans-unit id="ba0c27ff4a8dd6ec2622e7f7648f3ce5fe04921f" translate="yes" xml:space="preserve">
          <source>Returns pointer to the underlying array serving as element storage. The pointer is such that range &lt;code&gt;[data(); data() + size())&lt;/code&gt; is always a valid range, even if the container is empty (&lt;code&gt;data()&lt;/code&gt; is not dereferenceable in that case).</source>
          <target state="translated">返回指向用作元素存储的基础数组的指针。指针的范围是 &lt;code&gt;[data(); data() + size())&lt;/code&gt; 即使容器为空，data（）+ size（））始终是有效范围 &lt;code&gt;data()&lt;/code&gt; 在这种情况下，data（）不可取消引用）。</target>
        </trans-unit>
        <trans-unit id="b324337bca6901739a0d6b464df4f250bd943ee6" translate="yes" xml:space="preserve">
          <source>Returns pointer to the underlying raw file device object.</source>
          <target state="translated">返回指向底层原始文件设备对象的指针。</target>
        </trans-unit>
        <trans-unit id="899a681f8d781c317b804221f5bd5e62e3e295f7" translate="yes" xml:space="preserve">
          <source>Returns pointer to the underlying raw string device object.</source>
          <target state="translated">返回指向底层原始字符串设备对象的指针。</target>
        </trans-unit>
        <trans-unit id="bbab3130428af2187064993ce0ff0633b9865970" translate="yes" xml:space="preserve">
          <source>Returns pointers defining the get area.</source>
          <target state="translated">返回定义get区域的指针。</target>
        </trans-unit>
        <trans-unit id="7ff65b99b68790d89d1b7f93e946711c279d836e" translate="yes" xml:space="preserve">
          <source>Returns pointers defining the put area.</source>
          <target state="translated">返回定义put区域的指针。</target>
        </trans-unit>
        <trans-unit id="2ead22d770dec43a4abc3fa0576b69c55c48423b" translate="yes" xml:space="preserve">
          <source>Returns reference to the first character in the string. The behavior is undefined if &lt;code&gt;empty() == true&lt;/code&gt;.</source>
          <target state="translated">返回对字符串中第一个字符的引用。如果 &lt;code&gt;empty() == true&lt;/code&gt; 则行为未定义。</target>
        </trans-unit>
        <trans-unit id="d3aca74d080d5f0df6dd88cb7cecd9178e16210d" translate="yes" xml:space="preserve">
          <source>Returns reference to the first character in the view. The behavior is undefined if &lt;code&gt;empty() == true&lt;/code&gt;.</source>
          <target state="translated">返回对视图中第一个字符的引用。如果 &lt;code&gt;empty() == true&lt;/code&gt; 则行为未定义。</target>
        </trans-unit>
        <trans-unit id="fe6e6d4bb4638ec9eec365c440bfa8428c43edb6" translate="yes" xml:space="preserve">
          <source>Returns reference to the first element in the queue. This element will be the first element to be removed on a call to &lt;code&gt;&lt;a href=&quot;pop&quot;&gt;pop()&lt;/a&gt;&lt;/code&gt;. Effectively calls &lt;code&gt;c.front()&lt;/code&gt;.</source>
          <target state="translated">返回对队列中第一个元素的引用。该元素将是调用 &lt;code&gt;&lt;a href=&quot;pop&quot;&gt;pop()&lt;/a&gt;&lt;/code&gt; 时要删除的第一个元素。有效地调用 &lt;code&gt;c.front()&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="685fcd428312fe7cf891319fce7b32a5fb2ebf4b" translate="yes" xml:space="preserve">
          <source>Returns reference to the last character in the string. The behavior is undefined if &lt;code&gt;empty() == true&lt;/code&gt;.</source>
          <target state="translated">返回对字符串中最后一个字符的引用。如果 &lt;code&gt;empty() == true&lt;/code&gt; 则行为未定义。</target>
        </trans-unit>
        <trans-unit id="95e1b6b4db52c2a0da5c0151cb59f69be8e586e4" translate="yes" xml:space="preserve">
          <source>Returns reference to the last character in the view. The behavior is undefined if &lt;code&gt;empty() == true&lt;/code&gt;.</source>
          <target state="translated">返回对视图中最后一个字符的引用。如果 &lt;code&gt;empty() == true&lt;/code&gt; 则行为未定义。</target>
        </trans-unit>
        <trans-unit id="0acce844c6988b7cde0bbbcd9f8641e1222008a4" translate="yes" xml:space="preserve">
          <source>Returns reference to the last element in the container.</source>
          <target state="translated">返回容器中最后一个元素的引用。</target>
        </trans-unit>
        <trans-unit id="22141daf79385233d4a90fa547f9520188030385" translate="yes" xml:space="preserve">
          <source>Returns reference to the last element in the queue. This is the most recently pushed element. Effectively calls &lt;code&gt;c.back()&lt;/code&gt;.</source>
          <target state="translated">返回对队列中最后一个元素的引用。这是最近推送的元素。有效地调用 &lt;code&gt;c.back()&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="7fbac0774d223179a0d9fd48476894789da372d7" translate="yes" xml:space="preserve">
          <source>Returns reference to the top element in the priority queue. This element will be removed on a call to &lt;code&gt;&lt;a href=&quot;pop&quot;&gt;pop()&lt;/a&gt;&lt;/code&gt;. If default comparison function is used, the returned element is also the greatest among the elements in the queue.</source>
          <target state="translated">返回对优先级队列中顶部元素的引用。调用 &lt;code&gt;&lt;a href=&quot;pop&quot;&gt;pop()&lt;/a&gt;&lt;/code&gt; 时将删除此元素。如果使用默认比较功能，则返回的元素在队列中的元素中也是最大的。</target>
        </trans-unit>
        <trans-unit id="b11acf765aab7757073dbe00d2e0ec3e73b49e31" translate="yes" xml:space="preserve">
          <source>Returns reference to the top element in the stack. This is the most recently pushed element. This element will be removed on a call to &lt;code&gt;&lt;a href=&quot;pop&quot;&gt;pop()&lt;/a&gt;&lt;/code&gt;. Effectively calls &lt;code&gt;c.back()&lt;/code&gt;.</source>
          <target state="translated">返回对堆栈顶部元素的引用。这是最近推送的元素。调用 &lt;code&gt;&lt;a href=&quot;pop&quot;&gt;pop()&lt;/a&gt;&lt;/code&gt; 时将删除此元素。有效地调用 &lt;code&gt;c.back()&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="749c2334f29b2b96a440124d9ec5143c2f80d479" translate="yes" xml:space="preserve">
          <source>Returns the</source>
          <target state="translated">返回</target>
        </trans-unit>
        <trans-unit id="24a933bb361ee34ade953c61fca95a6c080c75cf" translate="yes" xml:space="preserve">
          <source>Returns the &amp;lambda; distribution parameter the distribution was constructed with. The parameter defines the rate of events, per unit. The default value is &lt;code&gt;1.0&lt;/code&gt;.</source>
          <target state="translated">返回构造分布的&amp;lambda;分布参数。该参数定义每单位的事件发生率。默认值为 &lt;code&gt;1.0&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="ed55f59c4892907c94ccb9730fac56d6ca2de3a6" translate="yes" xml:space="preserve">
          <source>Returns the &amp;mu; parameter the distribution was constructed with. The parameter defines mean number of occurrences of the event. The default value is &lt;code&gt;1.0&lt;/code&gt;.</source>
          <target state="translated">返回构造分布的&amp;mu;参数。该参数定义事件的平均发生次数。默认值为 &lt;code&gt;1.0&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="b9c45ae490f535ee7d89f5866489bc962cf0532a" translate="yes" xml:space="preserve">
          <source>Returns the &lt;code&gt;&lt;a href=&quot;../error_type&quot;&gt;std::regex_constants::error_type&lt;/a&gt;&lt;/code&gt; that was passed to the &lt;code&gt;&lt;a href=&quot;../regex_error&quot;&gt;std::regex_error&lt;/a&gt;&lt;/code&gt; constructor.</source>
          <target state="translated">返回传递给 &lt;code&gt;&lt;a href=&quot;../regex_error&quot;&gt;std::regex_error&lt;/a&gt;&lt;/code&gt; 构造函数的 &lt;code&gt;&lt;a href=&quot;../error_type&quot;&gt;std::regex_constants::error_type&lt;/a&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="39bd6d2de32f188b7f0663a5b0f9e255670df522" translate="yes" xml:space="preserve">
          <source>Returns the absolute value of the duration &lt;code&gt;d&lt;/code&gt;. Specifically, if &lt;code&gt;d &amp;gt;= d.zero()&lt;/code&gt;, return &lt;code&gt;d&lt;/code&gt;, otherwise return &lt;code&gt;-d&lt;/code&gt;.</source>
          <target state="translated">返回持续时间 &lt;code&gt;d&lt;/code&gt; 的绝对值。具体来说，如果 &lt;code&gt;d &amp;gt;= d.zero()&lt;/code&gt; ，则返回 &lt;code&gt;d&lt;/code&gt; ，否则返回 &lt;code&gt;-d&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="c7d0ddd379d72b6ec77e0397d65e38b17936b0ee" translate="yes" xml:space="preserve">
          <source>Returns the actual address of &lt;code&gt;x&lt;/code&gt; even in presence of overloaded &lt;code&gt;operator&amp;amp;&lt;/code&gt;.</source>
          <target state="translated">即使存在重载的 &lt;code&gt;operator&amp;amp;&lt;/code&gt; ,也返回 &lt;code&gt;x&lt;/code&gt; 的实际地址。</target>
        </trans-unit>
        <trans-unit id="0df3b1d17f703d365105b0c7b9d331124b75f356" translate="yes" xml:space="preserve">
          <source>Returns the allocator associated with the container.</source>
          <target state="translated">返回与容器相关联的分配器。</target>
        </trans-unit>
        <trans-unit id="d10d84f70be461c9481d105927dfb422fcca4c80" translate="yes" xml:space="preserve">
          <source>Returns the allocator associated with the object.</source>
          <target state="translated">返回与对象相关联的分配器。</target>
        </trans-unit>
        <trans-unit id="7e581fa261ec06cd26166d0d72700fac65659b5a" translate="yes" xml:space="preserve">
          <source>Returns the allocator associated with the string.</source>
          <target state="translated">返回与字符串相关联的分配器。</target>
        </trans-unit>
        <trans-unit id="ed42ce13836b8d9516eb4d394b49d2d721c61a7a" translate="yes" xml:space="preserve">
          <source>Returns the approximate processor time used by the process since the beginning of an implementation-defined era related to the program's execution. To convert result value to seconds divide it by &lt;code&gt;&lt;a href=&quot;clocks_per_sec&quot;&gt;CLOCKS_PER_SEC&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">返回自与程序执行相关的实现定义时代开始以来，进程使用的近似处理器时间。要将结果值转换为秒，请用 &lt;code&gt;&lt;a href=&quot;clocks_per_sec&quot;&gt;CLOCKS_PER_SEC&lt;/a&gt;&lt;/code&gt; 除。</target>
        </trans-unit>
        <trans-unit id="ef39635d8a06519f1db7f1bcddd385d01aac249c" translate="yes" xml:space="preserve">
          <source>Returns the associated locale.</source>
          <target state="translated">Returns the associated locale.</target>
        </trans-unit>
        <trans-unit id="513d5f438ffdc8f18910f6f09b0dd8507830709d" translate="yes" xml:space="preserve">
          <source>Returns the average number of elements per bucket, that is, &lt;code&gt;&lt;a href=&quot;size&quot;&gt;size()&lt;/a&gt;&lt;/code&gt; divided by &lt;code&gt;&lt;a href=&quot;bucket_count&quot;&gt;bucket_count()&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">返回每个存储桶的平均元素数，即 &lt;code&gt;&lt;a href=&quot;size&quot;&gt;size()&lt;/a&gt;&lt;/code&gt; 除以 &lt;code&gt;&lt;a href=&quot;bucket_count&quot;&gt;bucket_count()&lt;/a&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="56b434aabc853b13888b50cb0807e7e7480ac954" translate="yes" xml:space="preserve">
          <source>Returns the classification table that matches the classification used by the minimal &quot;C&quot; locale.</source>
          <target state="translated">返回与最小 &quot;C &quot;区所使用的分类匹配的分类表。</target>
        </trans-unit>
        <trans-unit id="84bb6f37ea8c28053dc9c4bc5f84e5ffe2db38cc" translate="yes" xml:space="preserve">
          <source>Returns the classification table that was provided in the constructor of this instance of &lt;code&gt;&lt;a href=&quot;../ctype&quot;&gt;std::ctype&lt;/a&gt;&amp;lt;char&amp;gt;&lt;/code&gt;, or returns a copy of &lt;code&gt;classic_table()&lt;/code&gt; if none was provided.</source>
          <target state="translated">返回此 &lt;code&gt;&lt;a href=&quot;../ctype&quot;&gt;std::ctype&lt;/a&gt;&amp;lt;char&amp;gt;&lt;/code&gt; 实例的构造函数中提供的分类表，如果未提供，则返回 &lt;code&gt;classic_table()&lt;/code&gt; 的副本。</target>
        </trans-unit>
        <trans-unit id="cec5508c3658b5da405d0d139d93a5210bf5311b" translate="yes" xml:space="preserve">
          <source>Returns the contained value if &lt;code&gt;*this&lt;/code&gt; has a value, otherwise returns &lt;code&gt;default_value&lt;/code&gt;.</source>
          <target state="translated">如果 &lt;code&gt;*this&lt;/code&gt; 有一个值，则返回包含的值，否则返回 &lt;code&gt;default_value&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="5175e5486ea3b7acf946c0bccd84c0bfca4593bd" translate="yes" xml:space="preserve">
          <source>Returns the current calendar time encoded as a &lt;code&gt;&lt;a href=&quot;time_t&quot;&gt;std::time_t&lt;/a&gt;&lt;/code&gt; object, and also stores it in the object pointed to by &lt;code&gt;arg&lt;/code&gt;, unless &lt;code&gt;arg&lt;/code&gt; is a null pointer.</source>
          <target state="translated">返回编码为 &lt;code&gt;&lt;a href=&quot;time_t&quot;&gt;std::time_t&lt;/a&gt;&lt;/code&gt; 对象的当前日历时间，并将其存储在 &lt;code&gt;arg&lt;/code&gt; 指向的对象中，除非 &lt;code&gt;arg&lt;/code&gt; 为空指针。</target>
        </trans-unit>
        <trans-unit id="d7d1f5b5fc29fcb3aca822d082591189208bc01b" translate="yes" xml:space="preserve">
          <source>Returns the current locale associated with the regular expression.</source>
          <target state="translated">返回与正则表达式相关联的当前语言环境。</target>
        </trans-unit>
        <trans-unit id="126617a3b6e024763851c89f7f7cbaeff67a5b00" translate="yes" xml:space="preserve">
          <source>Returns the current locale associated with the stream.</source>
          <target state="translated">返回与流相关联的当前locale。</target>
        </trans-unit>
        <trans-unit id="27eff443a8cc3749bd05823eeaaa013d89cc3d44" translate="yes" xml:space="preserve">
          <source>Returns the current locale of the traits object.</source>
          <target state="translated">返回traits对象的当前locale。</target>
        </trans-unit>
        <trans-unit id="a57a239fd3f60e2e159c6e3807675647141046c9" translate="yes" xml:space="preserve">
          <source>Returns the current stream error state.</source>
          <target state="translated">返回当前流的错误状态。</target>
        </trans-unit>
        <trans-unit id="c91da68dbeda44f9527bff1069dec2d6a9f7d0fc" translate="yes" xml:space="preserve">
          <source>Returns the current value of the conversion state, which is stored in this &lt;code&gt;wbuffer_convert&lt;/code&gt; object. The conversion state may be explicitly set in the constructor and is updated by all conversion operations.</source>
          <target state="translated">返回转换状态的当前值，该值存储在此 &lt;code&gt;wbuffer_convert&lt;/code&gt; 对象中。转换状态可以在构造函数中显式设置，并由所有转换操作更新。</target>
        </trans-unit>
        <trans-unit id="9a54919eb90bfe15dbd7231e299286868aa275d6" translate="yes" xml:space="preserve">
          <source>Returns the current value of the conversion state, which is stored in this &lt;code&gt;wstring_convert&lt;/code&gt; object. The conversion state may be explicitly set in the constructor and is updated by all conversion operations.</source>
          <target state="translated">返回转换状态的当前值，该值存储在此 &lt;code&gt;wstring_convert&lt;/code&gt; 对象中。转换状态可以在构造函数中显式设置，并由所有转换操作更新。</target>
        </trans-unit>
        <trans-unit id="21e7330c7492003ef581c54529e1ec213ca6eba1" translate="yes" xml:space="preserve">
          <source>Returns the current value of the file position indicator for the file stream &lt;code&gt;stream&lt;/code&gt;.</source>
          <target state="translated">返回文件流 &lt;code&gt;stream&lt;/code&gt; 的文件位置指示符的当前值。</target>
        </trans-unit>
        <trans-unit id="87a9bd38db27dfa2e570d960db5258d67df118c7" translate="yes" xml:space="preserve">
          <source>Returns the currently installed &lt;code&gt;&lt;a href=&quot;terminate_handler&quot;&gt;std::terminate_handler&lt;/a&gt;&lt;/code&gt;, which may be a null pointer.</source>
          <target state="translated">返回当前安装的 &lt;code&gt;&lt;a href=&quot;terminate_handler&quot;&gt;std::terminate_handler&lt;/a&gt;&lt;/code&gt; ，它可以是空指针。</target>
        </trans-unit>
        <trans-unit id="3a909107c485a18aeb0e65b097d2b7b246b4da8f" translate="yes" xml:space="preserve">
          <source>Returns the currently installed &lt;code&gt;&lt;a href=&quot;unexpected_handler&quot;&gt;std::unexpected_handler&lt;/a&gt;&lt;/code&gt;, which may be a null pointer.</source>
          <target state="translated">返回当前安装的 &lt;code&gt;&lt;a href=&quot;unexpected_handler&quot;&gt;std::unexpected_handler&lt;/a&gt;&lt;/code&gt; ，它可以是空指针。</target>
        </trans-unit>
        <trans-unit id="0eebac854ef06908098ab562e43be843daac0023" translate="yes" xml:space="preserve">
          <source>Returns the currently installed new-handler, which may be a null pointer.</source>
          <target state="translated">返回当前安装的新处理程序,它可能是一个空指针。</target>
        </trans-unit>
        <trans-unit id="9a34da4bdbca25b8220ad85f7c7e98ad92ec7676" translate="yes" xml:space="preserve">
          <source>Returns the day value stored in &lt;code&gt;*this&lt;/code&gt;.</source>
          <target state="translated">返回存储在 &lt;code&gt;*this&lt;/code&gt; 中的日期值。</target>
        </trans-unit>
        <trans-unit id="2f2d3ebe5de9ccb237377ca395e5cab852dd42c8" translate="yes" xml:space="preserve">
          <source>Returns the default error condition for the current error value.</source>
          <target state="translated">返回当前错误值的默认错误条件。</target>
        </trans-unit>
        <trans-unit id="6a6643039f6b1a81b1d288317143a6d97779523c" translate="yes" xml:space="preserve">
          <source>Returns the deleter object which would be used for destruction of the managed object.</source>
          <target state="translated">返回用于销毁被管理对象的deleter对象。</target>
        </trans-unit>
        <trans-unit id="97e9f158ded27d6c46baac7e76586825738ed0f7" translate="yes" xml:space="preserve">
          <source>Returns the difference between &lt;code&gt;lhs&lt;/code&gt; and &lt;code&gt;rhs&lt;/code&gt;.</source>
          <target state="translated">返回 &lt;code&gt;lhs&lt;/code&gt; 和 &lt;code&gt;rhs&lt;/code&gt; 之间的差。</target>
        </trans-unit>
        <trans-unit id="0e4112e6cef8ec5e45a8ed312a62346d0a591f75" translate="yes" xml:space="preserve">
          <source>Returns the directory location suitable for temporary files.</source>
          <target state="translated">返回适合临时文件的目录位置。</target>
        </trans-unit>
        <trans-unit id="0ac314227e51139a4635ec7a906c7d111cdbaf08" translate="yes" xml:space="preserve">
          <source>Returns the distance between two iterator adaptors.</source>
          <target state="translated">返回两个迭代适配器之间的距离。</target>
        </trans-unit>
        <trans-unit id="5c7d44f3da5724df89d31964d01fb30cfb367391" translate="yes" xml:space="preserve">
          <source>Returns the distribution parameters the distribution has been constructed with.</source>
          <target state="translated">返回已经构建的分布参数。</target>
        </trans-unit>
        <trans-unit id="c892fc6d996e686fd08a5a6f686dcd06605ec628" translate="yes" xml:space="preserve">
          <source>Returns the distribution parameters with which the distribution was constructed.</source>
          <target state="translated">返回构建分布的分布参数。</target>
        </trans-unit>
        <trans-unit id="c21dab5affe00ddcef46241bec377a01d0a48bad" translate="yes" xml:space="preserve">
          <source>Returns the distribution parameters.</source>
          <target state="translated">返回分布参数。</target>
        </trans-unit>
        <trans-unit id="4199c030677b8e2d438f4d0fef3c0ba01cafd759" translate="yes" xml:space="preserve">
          <source>Returns the element at index &lt;code&gt;i&lt;/code&gt;, i.e. &lt;code&gt;get()[i]&lt;/code&gt;.</source>
          <target state="translated">返回索引 &lt;code&gt;i&lt;/code&gt; 处的元素，即 &lt;code&gt;get()[i]&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="915f0c38069cb7df2ab7c3a84b3fb3580e130db6" translate="yes" xml:space="preserve">
          <source>Returns the error category of the error value.</source>
          <target state="translated">返回错误值的错误类别。</target>
        </trans-unit>
        <trans-unit id="2cbec075c92a3ac9691e962fa7ddb74b8c07a692" translate="yes" xml:space="preserve">
          <source>Returns the error condition for the given error code.</source>
          <target state="translated">返回给定错误代码的错误条件。</target>
        </trans-unit>
        <trans-unit id="924bb1f8b0cc4979f07050dc78c49d9966575da7" translate="yes" xml:space="preserve">
          <source>Returns the explanatory string.</source>
          <target state="translated">返回解释字符串。</target>
        </trans-unit>
        <trans-unit id="b3ea672d21dccc9d34eeff89242d53f7276c2a31" translate="yes" xml:space="preserve">
          <source>Returns the extension of the filename component of the generic-format view of &lt;code&gt;*this&lt;/code&gt;.</source>
          <target state="translated">返回 &lt;code&gt;*this&lt;/code&gt; 的通用格式视图的文件名部分的扩展名。</target>
        </trans-unit>
        <trans-unit id="6f3ef8abc7ee80bd57fe84e7a246d450bbdb3c5c" translate="yes" xml:space="preserve">
          <source>Returns the filename identified by the generic-format path stripped of its extension.</source>
          <target state="translated">返回由去掉扩展名的通用格式路径确定的文件名。</target>
        </trans-unit>
        <trans-unit id="af2cc6e15e70315b07bf74a90889f17910a00792" translate="yes" xml:space="preserve">
          <source>Returns the first element in the range &lt;code&gt;[first, last)&lt;/code&gt; that satisfies specific criteria:</source>
          <target state="translated">返回满足特定条件的 &lt;code&gt;[first, last)&lt;/code&gt; 范围内的第一个元素：</target>
        </trans-unit>
        <trans-unit id="5e08a83e9f29b4b57e3621250241e9fbff764140" translate="yes" xml:space="preserve">
          <source>Returns the first mismatching pair of elements from two ranges: one defined by &lt;code&gt;[first1, last1)&lt;/code&gt; and another defined by &lt;code&gt;[first2,last2)&lt;/code&gt;. If &lt;code&gt;last2&lt;/code&gt; is not provided (overloads (1-4)), it denotes &lt;code&gt;first2 + (last1 - first1)&lt;/code&gt;.</source>
          <target state="translated">返回两个范围内的第一个不匹配的元素对：一个由 &lt;code&gt;[first1, last1)&lt;/code&gt; 定义，另一个由 &lt;code&gt;[first2,last2)&lt;/code&gt; 定义。如果未提供 &lt;code&gt;last2&lt;/code&gt; （超载（1-4）），则表示 &lt;code&gt;first2 + (last1 - first1)&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="7d67c154b2b7d09d2b77a7995af0498339b0310f" translate="yes" xml:space="preserve">
          <source>Returns the full path the directory entry refers to.</source>
          <target state="translated">返回目录条目所指向的完整路径。</target>
        </trans-unit>
        <trans-unit id="3dae28d0e440f9aae0f69e92b84bb4bf9b6a1c2c" translate="yes" xml:space="preserve">
          <source>Returns the function object that compares the keys, which is a copy of this container's &lt;a href=&quot;map&quot;&gt;constructor&lt;/a&gt; argument &lt;code&gt;comp&lt;/code&gt;.</source>
          <target state="translated">返回比较键的函数对象，该对象是此容器的&lt;a href=&quot;map&quot;&gt;构造函数&lt;/a&gt;参数 &lt;code&gt;comp&lt;/code&gt; 的副本。</target>
        </trans-unit>
        <trans-unit id="73fa0faeee4c7f26cb770a1d0af6ec6366f293a9" translate="yes" xml:space="preserve">
          <source>Returns the function object that compares the keys, which is a copy of this container's &lt;a href=&quot;multimap&quot;&gt;constructor&lt;/a&gt; argument &lt;code&gt;comp&lt;/code&gt;.</source>
          <target state="translated">返回比较键的函数对象，该对象是此容器的&lt;a href=&quot;multimap&quot;&gt;构造函数&lt;/a&gt;参数 &lt;code&gt;comp&lt;/code&gt; 的副本。</target>
        </trans-unit>
        <trans-unit id="d4c7d0113970949f52a17cd98e4c6612f8fa1105" translate="yes" xml:space="preserve">
          <source>Returns the function object that compares the keys, which is a copy of this container's &lt;a href=&quot;multiset&quot;&gt;constructor&lt;/a&gt; argument &lt;code&gt;comp&lt;/code&gt;. It is the same as &lt;code&gt;&lt;a href=&quot;value_comp&quot;&gt;value_comp&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">返回比较键的函数对象，该对象是此容器的&lt;a href=&quot;multiset&quot;&gt;构造函数&lt;/a&gt;参数 &lt;code&gt;comp&lt;/code&gt; 的副本。它与 &lt;code&gt;&lt;a href=&quot;value_comp&quot;&gt;value_comp&lt;/a&gt;&lt;/code&gt; 相同。</target>
        </trans-unit>
        <trans-unit id="3e79c5694a5ca13d3ef6595a32fd93a2d24d054d" translate="yes" xml:space="preserve">
          <source>Returns the function object that compares the keys, which is a copy of this container's &lt;a href=&quot;set&quot;&gt;constructor&lt;/a&gt; argument &lt;code&gt;comp&lt;/code&gt;. It is the same as &lt;code&gt;&lt;a href=&quot;value_comp&quot;&gt;value_comp&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">返回比较键的函数对象，该对象是此容器的&lt;a href=&quot;set&quot;&gt;构造函数&lt;/a&gt;参数 &lt;code&gt;comp&lt;/code&gt; 的副本。它与 &lt;code&gt;&lt;a href=&quot;value_comp&quot;&gt;value_comp&lt;/a&gt;&lt;/code&gt; 相同。</target>
        </trans-unit>
        <trans-unit id="2d0818688267b234089d835fee6194568cd3c654" translate="yes" xml:space="preserve">
          <source>Returns the function object that compares the values. It is the same as &lt;code&gt;&lt;a href=&quot;key_comp&quot;&gt;key_comp&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">返回比较值的函数对象。它与 &lt;code&gt;&lt;a href=&quot;key_comp&quot;&gt;key_comp&lt;/a&gt;&lt;/code&gt; 相同。</target>
        </trans-unit>
        <trans-unit id="6351e5540742614ebe1cd3ef60c325759a9d3773" translate="yes" xml:space="preserve">
          <source>Returns the function that compares keys for equality.</source>
          <target state="translated">返回比较键值是否相等的函数。</target>
        </trans-unit>
        <trans-unit id="a6651bce5b64948ab9c2d3de79cd11eee7b577ab" translate="yes" xml:space="preserve">
          <source>Returns the function that hashes the keys.</source>
          <target state="translated">返回散列键的函数。</target>
        </trans-unit>
        <trans-unit id="c89b74edc29e895ee4e2da2cbd4352cdee9f5007" translate="yes" xml:space="preserve">
          <source>Returns the generic-format filename component of the path.</source>
          <target state="translated">返回路径中通用格式的文件名组件。</target>
        </trans-unit>
        <trans-unit id="394ba36818f14f9d54ebeb1e3c44f770b406a844" translate="yes" xml:space="preserve">
          <source>Returns the greater of the given values.</source>
          <target state="translated">返回给定值中较大的一个。</target>
        </trans-unit>
        <trans-unit id="2ac65e1429bba404fbf3b56ab10fabbd6cf039d1" translate="yes" xml:space="preserve">
          <source>Returns the greatest duration &lt;code&gt;t&lt;/code&gt; representable in &lt;code&gt;ToDuration&lt;/code&gt; that is less or equal to &lt;code&gt;d&lt;/code&gt;.</source>
          <target state="translated">返回的最大持续时间 &lt;code&gt;t&lt;/code&gt; 中的可表示 &lt;code&gt;ToDuration&lt;/code&gt; 即小于或等于 &lt;code&gt;d&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="e49acd04a83ec324a942890fa83f1e6d994063c0" translate="yes" xml:space="preserve">
          <source>Returns the hash code of the associated &lt;code&gt;&lt;a href=&quot;../type_info&quot;&gt;std::type_info&lt;/a&gt;&lt;/code&gt; object. Equivalent to calling &lt;a href=&quot;../type_info/hash_code&quot;&gt;&lt;code&gt;type_info::hash_code&lt;/code&gt;&lt;/a&gt; directly.</source>
          <target state="translated">返回关联的 &lt;code&gt;&lt;a href=&quot;../type_info&quot;&gt;std::type_info&lt;/a&gt;&lt;/code&gt; 对象的哈希码。等效于直接调用&lt;a href=&quot;../type_info/hash_code&quot;&gt; &lt;code&gt;type_info::hash_code&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="6efa4a7cdd4adc256985d83d2fa1766c18f7b83c" translate="yes" xml:space="preserve">
          <source>Returns the implementation defined underlying thread handle.</source>
          <target state="translated">返回执行中定义的底层线程句柄。</target>
        </trans-unit>
        <trans-unit id="f5d9a4522bda0a936f4f0368dbd1d4e72b85b2d2" translate="yes" xml:space="preserve">
          <source>Returns the index of the bucket for key &lt;code&gt;key&lt;/code&gt;. Elements (if any) with keys equivalent to &lt;code&gt;key&lt;/code&gt; are always found in this bucket. The returned value is valid only for instances of the container for which &lt;code&gt;&lt;a href=&quot;bucket_count&quot;&gt;bucket_count()&lt;/a&gt;&lt;/code&gt; returns the same value.</source>
          <target state="translated">返回桶关键的索引 &lt;code&gt;key&lt;/code&gt; 。始终在此存储桶中找到具有与key等效的 &lt;code&gt;key&lt;/code&gt; 的元素（如果有）。返回值仅对 &lt;code&gt;&lt;a href=&quot;bucket_count&quot;&gt;bucket_count()&lt;/a&gt;&lt;/code&gt; 返回相同值的容器实例有效。</target>
        </trans-unit>
        <trans-unit id="47b50815c5ef1820d57ea614477f63a6cc6e95f2" translate="yes" xml:space="preserve">
          <source>Returns the internal pathname in generic pathname format, converted to specific string type. Conversion, if any, is specified as follows:</source>
          <target state="translated">返回通用路径名格式的内部路径名,并转换为特定的字符串类型。如果需要转换,请按以下方式指定。</target>
        </trans-unit>
        <trans-unit id="2d42ace4dfa5061849f9fc93a61b842e0e4472f2" translate="yes" xml:space="preserve">
          <source>Returns the internal pathname in native pathname format, converted to specific string type. Conversion, if any, is performed as follows:</source>
          <target state="translated">返回本地路径名格式的内部路径名,并转换为特定的字符串类型。如有转换,则按以下方式进行。</target>
        </trans-unit>
        <trans-unit id="3b4e119d6f8bcb1df619f769f8bfc0db4d6921b3" translate="yes" xml:space="preserve">
          <source>Returns the inverse of the referenced bit.</source>
          <target state="translated">返回被引用位的反值。</target>
        </trans-unit>
        <trans-unit id="7898101876be6783d6c5cdd7cb145ed9928e3ae3" translate="yes" xml:space="preserve">
          <source>Returns the iterator initialized with &lt;code&gt;bound_&lt;/code&gt; if this view is bounded, or the sentinel initialized with &lt;code&gt;bound_&lt;/code&gt; if this view is unbounded.</source>
          <target state="translated">返回的迭代器初始化 &lt;code&gt;bound_&lt;/code&gt; 如果这种观点是有界的，或者定点与初始化 &lt;code&gt;bound_&lt;/code&gt; 如果这种观点是无限的。</target>
        </trans-unit>
        <trans-unit id="be11bbfa6b6b8a6a788e21ad8bb48054c6c29500" translate="yes" xml:space="preserve">
          <source>Returns the iterator initialized with &lt;code&gt;value_&lt;/code&gt;</source>
          <target state="translated">返回用 &lt;code&gt;value_&lt;/code&gt; 初始化的迭代器</target>
        </trans-unit>
        <trans-unit id="0e6153a918b75dcf65903cab44e6937a0be0d9df" translate="yes" xml:space="preserve">
          <source>Returns the iterator initialized with &lt;code&gt;{*this, ranges::find_if(base_, &lt;a href=&quot;../utility/functional/ref&quot;&gt;std::ref&lt;/a&gt;(*pred_))}.&lt;/code&gt; In order to provide the amortized constant time complexity required by the &lt;a href=&quot;range&quot;&gt;&lt;code&gt;Range&lt;/code&gt;&lt;/a&gt; concept, this function caches the result within the &lt;code&gt;filter_view&lt;/code&gt; object for use on subsequent calls.</source>
          <target state="translated">返回使用 &lt;code&gt;{*this, ranges::find_if(base_, &lt;a href=&quot;../utility/functional/ref&quot;&gt;std::ref&lt;/a&gt;(*pred_))}.&lt;/code&gt; 初始化的迭代器。为了提供&lt;a href=&quot;range&quot;&gt; &lt;code&gt;Range&lt;/code&gt; &lt;/a&gt;概念所需的摊销的恒定时间复杂度，此函数将结果缓存在 &lt;code&gt;filter_view&lt;/code&gt; 对象中，以用于后续调用。</target>
        </trans-unit>
        <trans-unit id="1a0a09ea622b641e8e53e77e42a5fead717ad4a2" translate="yes" xml:space="preserve">
          <source>Returns the largest possible &lt;code&gt;year&lt;/code&gt;, that is, &lt;code&gt;&lt;a href=&quot;../year&quot;&gt;std::chrono::year&lt;/a&gt;(32767)&lt;/code&gt;.</source>
          <target state="translated">返回最大可能 &lt;code&gt;year&lt;/code&gt; ，即 &lt;code&gt;&lt;a href=&quot;../year&quot;&gt;std::chrono::year&lt;/a&gt;(32767)&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="395e0aac0548f5b4f3c90d369ef77a8e3c5e4cf3" translate="yes" xml:space="preserve">
          <source>Returns the largest possible representation.</source>
          <target state="translated">返回最大可能的表示方式。</target>
        </trans-unit>
        <trans-unit id="6ae0866e270dfda35cf58c63b5ff5908d0a12d81" translate="yes" xml:space="preserve">
          <source>Returns the largest possible rounding error in ULPs (units in the last place) as defined by ISO 10967, which can vary from 0.5 (rounding to the nearest digit) to 1.0 (rounding to zero or to infinity). It is only meaningful if &lt;code&gt;&lt;a href=&quot;../numeric_limits&quot;&gt;std::numeric_limits&lt;/a&gt;&amp;lt;T&amp;gt;::is_integer == false&lt;/code&gt;.</source>
          <target state="translated">返回ISO 10967定义的ULP（最后一个单位）中最大的舍入误差，范围从0.5（四舍五入到最接近的数字）到1.0（四舍五入到零或无穷大）。仅当 &lt;code&gt;&lt;a href=&quot;../numeric_limits&quot;&gt;std::numeric_limits&lt;/a&gt;&amp;lt;T&amp;gt;::is_integer == false&lt;/code&gt; 时才有意义。</target>
        </trans-unit>
        <trans-unit id="4a7e3d0587c79c8aee9cebd08d6ed40775e55213" translate="yes" xml:space="preserve">
          <source>Returns the largest time point &lt;code&gt;t&lt;/code&gt; representable in &lt;code&gt;ToDuration&lt;/code&gt; that is smaller or equal to &lt;code&gt;tp&lt;/code&gt;.</source>
          <target state="translated">返回最大的时间点 &lt;code&gt;t&lt;/code&gt; 中表示的 &lt;code&gt;ToDuration&lt;/code&gt; 是小于或等于 &lt;code&gt;tp&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="57fcfff97781b1a6c8875ce5abe02ecadd9a8acc" translate="yes" xml:space="preserve">
          <source>Returns the largest value that G's operator() may return. The value is strictly greater than &lt;code&gt;G::min()&lt;/code&gt;</source>
          <target state="translated">返回G的operator（）可能返回的最大值。该值严格大于 &lt;code&gt;G::min()&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="1719308a7a082d9cdab9f0db78594e920128d800" translate="yes" xml:space="preserve">
          <source>Returns the length of a wide string, that is the number of non-null wide characters that precede the terminating null wide character.</source>
          <target state="translated">返回宽字符串的长度,也就是在结束的空宽字符之前的非空宽字符的数量。</target>
        </trans-unit>
        <trans-unit id="8388aba4880ce317608f53440a2bf9b4fe7da3e5" translate="yes" xml:space="preserve">
          <source>Returns the length of the character sequence pointed to by &lt;code&gt;s&lt;/code&gt;, that is, the position of the terminating null character (&lt;code&gt;CharT()&lt;/code&gt;).</source>
          <target state="translated">返回 &lt;code&gt;s&lt;/code&gt; 指向的字符序列的长度，即终止空字符（ &lt;code&gt;CharT()&lt;/code&gt; ）的位置。</target>
        </trans-unit>
        <trans-unit id="2a3b9c0a60c4d34bff18ac8a4fad9e8264434c21" translate="yes" xml:space="preserve">
          <source>Returns the length of the given byte string, that is, the number of characters in a character array whose first element is pointed to by &lt;code&gt;str&lt;/code&gt; up to and not including the first null character. The behavior is undefined if there is no null character in the character array pointed to by &lt;code&gt;str&lt;/code&gt;.</source>
          <target state="translated">返回给定字节字符串的长度，即，字符数组中字符的数量，该字符数组的第一个元素由 &lt;code&gt;str&lt;/code&gt; 指向，并且不包括第一个null字符。如果 &lt;code&gt;str&lt;/code&gt; 指向的字符数组中没有空字符，则该行为是不确定的。</target>
        </trans-unit>
        <trans-unit id="adde90905d8e5647b754a9ef5e7816b0ac6c89c5" translate="yes" xml:space="preserve">
          <source>Returns the length of the maximum initial segment (span) of the byte string pointed to by &lt;code&gt;dest&lt;/code&gt;, that consists of only the characters found in byte string pointed to by &lt;code&gt;src&lt;/code&gt;.</source>
          <target state="translated">返回由 &lt;code&gt;dest&lt;/code&gt; 指向的字节字符串的最大初始段（跨度）的长度，该长度仅由 &lt;code&gt;src&lt;/code&gt; 指向的字节字符串中的字符组成。</target>
        </trans-unit>
        <trans-unit id="873c1d7e1a62028ef2efb999cba0ae22ccf7b127" translate="yes" xml:space="preserve">
          <source>Returns the length of the maximum initial segment of the byte string pointed to by &lt;code&gt;dest&lt;/code&gt;, that consists of only the characters</source>
          <target state="translated">返回由 &lt;code&gt;dest&lt;/code&gt; 指向的字节字符串的最大初始段的长度，该长度仅包含字符</target>
        </trans-unit>
        <trans-unit id="cd874c8f829aec557cab43dde4fea18e303b214e" translate="yes" xml:space="preserve">
          <source>Returns the length of the maximum initial segment of the wide string pointed to by &lt;code&gt;dest&lt;/code&gt;, that consists of only the characters</source>
          <target state="translated">返回由 &lt;code&gt;dest&lt;/code&gt; 指向的宽字符串的最大初始段的长度，该段仅包含字符</target>
        </trans-unit>
        <trans-unit id="84cfb1d10d156ad85db1a941437a837070c48ee2" translate="yes" xml:space="preserve">
          <source>Returns the length of the maximum initial segment of the wide string pointed to by &lt;code&gt;dest&lt;/code&gt;, that consists of only the characters found in wide string pointed to by &lt;code&gt;src&lt;/code&gt;.</source>
          <target state="translated">返回 &lt;code&gt;dest&lt;/code&gt; 指向的宽字符串的最大初始段的长度，该长度仅由 &lt;code&gt;src&lt;/code&gt; 指向的宽字符串中的字符组成。</target>
        </trans-unit>
        <trans-unit id="b596ecd99bf2165d05a62b8913dab5e01bf9744a" translate="yes" xml:space="preserve">
          <source>Returns the length of the specified sub-match.</source>
          <target state="translated">返回指定子匹配的长度。</target>
        </trans-unit>
        <trans-unit id="c7e5951d261f5f6ba1380d657965073b0cbe0231" translate="yes" xml:space="preserve">
          <source>Returns the location of the source code where the contract violation happened. If the name is unknown, an implementation may return 0 instead.</source>
          <target state="translated">返回发生违约的源代码的位置。如果名称不详,一个实现可以返回0。</target>
        </trans-unit>
        <trans-unit id="135c7cc96d127453a23afbfbf11182d966328d5e" translate="yes" xml:space="preserve">
          <source>Returns the logical AND of &lt;code&gt;lhs&lt;/code&gt; and &lt;code&gt;rhs&lt;/code&gt;.</source>
          <target state="translated">返回 &lt;code&gt;lhs&lt;/code&gt; 和 &lt;code&gt;rhs&lt;/code&gt; 的逻辑与。</target>
        </trans-unit>
        <trans-unit id="bbba8e56929229b9538d5be275ac41c1219d32a6" translate="yes" xml:space="preserve">
          <source>Returns the logical NOT of &lt;code&gt;arg&lt;/code&gt;.</source>
          <target state="translated">返回 &lt;code&gt;arg&lt;/code&gt; 的逻辑NOT 。</target>
        </trans-unit>
        <trans-unit id="4c72ca9fadd6b0ac5bc49503349fddffed0e7076" translate="yes" xml:space="preserve">
          <source>Returns the logical OR of &lt;code&gt;lhs&lt;/code&gt; and &lt;code&gt;rhs&lt;/code&gt;.</source>
          <target state="translated">返回 &lt;code&gt;lhs&lt;/code&gt; 和 &lt;code&gt;rhs&lt;/code&gt; 的逻辑或。</target>
        </trans-unit>
        <trans-unit id="d84a91bedfe94de171ef1e12eaed19b8bc33cd32" translate="yes" xml:space="preserve">
          <source>Returns the logical complement of the result of calling &lt;code&gt;pred(x)&lt;/code&gt;.</source>
          <target state="translated">返回调用 &lt;code&gt;pred(x)&lt;/code&gt; 结果的逻辑补码。</target>
        </trans-unit>
        <trans-unit id="64bc9d1fd51560b5534a2335be3b83a71e7eeed0" translate="yes" xml:space="preserve">
          <source>Returns the logical complement of the result of calling &lt;code&gt;pred(x, y)&lt;/code&gt;.</source>
          <target state="translated">返回调用 &lt;code&gt;pred(x, y)&lt;/code&gt; 的结果的逻辑补码。</target>
        </trans-unit>
        <trans-unit id="25f362a8ab8f6843b05eb6b866462005692e22b1" translate="yes" xml:space="preserve">
          <source>Returns the lowercase form of &lt;code&gt;ch&lt;/code&gt; if one is listed in the locale, otherwise return &lt;code&gt;ch&lt;/code&gt; unchanged.</source>
          <target state="translated">返回的小写形式 &lt;code&gt;ch&lt;/code&gt; 如果在语言环境中列出，否则返回 &lt;code&gt;ch&lt;/code&gt; 不变。</target>
        </trans-unit>
        <trans-unit id="eea72ed87bffba768a19518a154402a11f041465" translate="yes" xml:space="preserve">
          <source>Returns the lowest and the greatest of the given values.</source>
          <target state="translated">返回给定值的最低和最大。</target>
        </trans-unit>
        <trans-unit id="a93fa886fd8eb701f1ae23c98b2c265bed143be7" translate="yes" xml:space="preserve">
          <source>Returns the lowest finite value representable by the numeric type &lt;code&gt;T&lt;/code&gt;, that is, a finite value &lt;code&gt;x&lt;/code&gt; such that there is no other finite value &lt;code&gt;y&lt;/code&gt; where &lt;code&gt;y &amp;lt; x&lt;/code&gt;. This is different from &lt;code&gt;&lt;a href=&quot;../numeric_limits&quot;&gt;std::numeric_limits&lt;/a&gt;&amp;lt;T&amp;gt;::min()&lt;/code&gt; for floating-point types. Only meaningful for bounded types.</source>
          <target state="translated">返回由数字类型 &lt;code&gt;T&lt;/code&gt; 表示的最低有限值，即有限值 &lt;code&gt;x&lt;/code&gt; ，使得在 &lt;code&gt;y &amp;lt; x&lt;/code&gt; 情况下没有其他有限值 &lt;code&gt;y&lt;/code&gt; 。这与 &lt;code&gt;&lt;a href=&quot;../numeric_limits&quot;&gt;std::numeric_limits&lt;/a&gt;&amp;lt;T&amp;gt;::min()&lt;/code&gt; &amp;lt;T&amp;gt; :: min（）的浮点类型不同。仅对有界类型有意义。</target>
        </trans-unit>
        <trans-unit id="4561e1e89a1a77f40ba5fe1fb242d82535e7ebd8" translate="yes" xml:space="preserve">
          <source>Returns the lowest possible representation.</source>
          <target state="translated">返回可能的最低表示方式。</target>
        </trans-unit>
        <trans-unit id="0a9e0a78388e07bdf79568d141b6449f2b351ed4" translate="yes" xml:space="preserve">
          <source>Returns the machine epsilon, that is, the difference between &lt;code&gt;1.0&lt;/code&gt; and the next value representable by the floating-point type &lt;code&gt;T&lt;/code&gt;. It is only meaningful if &lt;code&gt;&lt;a href=&quot;../numeric_limits&quot;&gt;std::numeric_limits&lt;/a&gt;&amp;lt;T&amp;gt;::is_integer == false&lt;/code&gt;.</source>
          <target state="translated">返回机器epsilon，即 &lt;code&gt;1.0&lt;/code&gt; 与浮点类型 &lt;code&gt;T&lt;/code&gt; 可以表示的下一个值之间的差。仅当 &lt;code&gt;&lt;a href=&quot;../numeric_limits&quot;&gt;std::numeric_limits&lt;/a&gt;&amp;lt;T&amp;gt;::is_integer == false&lt;/code&gt; 时才有意义。</target>
        </trans-unit>
        <trans-unit id="cf4a4d88f3c6d0d2a7eb36edffded27ac2cb8917" translate="yes" xml:space="preserve">
          <source>Returns the magnitude of the complex number &lt;code&gt;z&lt;/code&gt;.</source>
          <target state="translated">返回复数 &lt;code&gt;z&lt;/code&gt; 的大小。</target>
        </trans-unit>
        <trans-unit id="a508032ce2b347a3dee22de1ebf8237cd5dbfa59" translate="yes" xml:space="preserve">
          <source>Returns the matched character sequence as an object of the underlying &lt;code&gt;&lt;a href=&quot;../../string/basic_string&quot;&gt;std::basic_string&lt;/a&gt;&lt;/code&gt; type. If the &lt;code&gt;matched&lt;/code&gt; member is</source>
          <target state="translated">返回匹配的字符序列作为基础 &lt;code&gt;&lt;a href=&quot;../../string/basic_string&quot;&gt;std::basic_string&lt;/a&gt;&lt;/code&gt; 类型的对象。如果 &lt;code&gt;matched&lt;/code&gt; 成员是</target>
        </trans-unit>
        <trans-unit id="6777e797a0dde9d70cf8fb8454e487feaf7461d9" translate="yes" xml:space="preserve">
          <source>Returns the maximum finite value representable by the numeric type &lt;code&gt;T&lt;/code&gt;. Meaningful for all bounded types.</source>
          <target state="translated">返回由数字类型 &lt;code&gt;T&lt;/code&gt; 表示的最大有限值。对所有有界类型有意义。</target>
        </trans-unit>
        <trans-unit id="7ec54ab677f3b0b7cde77849d3e88ecffefde235" translate="yes" xml:space="preserve">
          <source>Returns the maximum number of buckets the container is able to hold due to system or library implementation limitations.</source>
          <target state="translated">返回由于系统或库实现的限制,容器能够容纳的最大数量的桶。</target>
        </trans-unit>
        <trans-unit id="e5ca74813341c79dd49c5f5360af1d21eba60605" translate="yes" xml:space="preserve">
          <source>Returns the maximum number of elements the container is able to hold due to system or library implementation limitations, i.e. &lt;code&gt;&lt;a href=&quot;../../iterator/distance&quot;&gt;std::distance&lt;/a&gt;(begin(), end())&lt;/code&gt; for the largest container.</source>
          <target state="translated">返回由于系统或库实现限制，容器可以容纳的最大元素数，即最大容器的 &lt;code&gt;&lt;a href=&quot;../../iterator/distance&quot;&gt;std::distance&lt;/a&gt;(begin(), end())&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="6cb4509918aeb6ecfe35d6a4d1a2107449158e39" translate="yes" xml:space="preserve">
          <source>Returns the maximum number of elements the string is able to hold due to system or library implementation limitations, i.e. ​&lt;code&gt;&lt;a href=&quot;../../iterator/distance&quot;&gt;std::distance&lt;/a&gt;(begin(), end())&lt;/code&gt;​ for the largest string.</source>
          <target state="translated">返回元素的最大数量的字符串能够保持由于系统或库实现的限制，即 &lt;code&gt;&lt;a href=&quot;../../iterator/distance&quot;&gt;std::distance&lt;/a&gt;(begin(), end())&lt;/code&gt; 为最大的字符串。</target>
        </trans-unit>
        <trans-unit id="d9bf4d2ffcdb08e2888ee7df5435214b4ee76a81" translate="yes" xml:space="preserve">
          <source>Returns the maximum number of submatches the &lt;code&gt;match_results&lt;/code&gt; type is able to hold due to system or library implementation limitations, i.e. &lt;code&gt;&lt;a href=&quot;../../iterator/distance&quot;&gt;std::distance&lt;/a&gt;(begin(), end())&lt;/code&gt; for the largest number of submatches.</source>
          <target state="translated">返回由于系统或库实现限制， &lt;code&gt;match_results&lt;/code&gt; 类型能够容纳的最大子匹配数，即 &lt;code&gt;&lt;a href=&quot;../../iterator/distance&quot;&gt;std::distance&lt;/a&gt;(begin(), end())&lt;/code&gt; 最大子匹配数的&lt;a href=&quot;../../iterator/distance&quot;&gt;std :: distance&lt;/a&gt;（begin（），end（））。</target>
        </trans-unit>
        <trans-unit id="81ebbf51d4203b58774423b501e0eafed181534c" translate="yes" xml:space="preserve">
          <source>Returns the maximum theoretically possible value of &lt;code&gt;n&lt;/code&gt;, for which the call &lt;code&gt;allocate(n, 0)&lt;/code&gt; could succeed.</source>
          <target state="translated">返回最大理论上可能的值 &lt;code&gt;n&lt;/code&gt; ，对于此值，调用 &lt;code&gt;allocate(n, 0)&lt;/code&gt; 可能成功。</target>
        </trans-unit>
        <trans-unit id="85815fc14613c1ee8993e485ec8efeb258f0f836" translate="yes" xml:space="preserve">
          <source>Returns the maximum value potentially generated by the distribution.</source>
          <target state="translated">返回分布可能产生的最大值。</target>
        </trans-unit>
        <trans-unit id="8402b1f6712e911eadb8a087aa174527e99f4aaa" translate="yes" xml:space="preserve">
          <source>Returns the maximum value potentially generated by the engine adaptor. This value is equal to 2w</source>
          <target state="translated">返回发动机适配器可能产生的最大数值。该值等于2w</target>
        </trans-unit>
        <trans-unit id="4cf5acd412dc0901d48980f12630e2945d5b9263" translate="yes" xml:space="preserve">
          <source>Returns the maximum value potentially generated by the engine adaptor. This value is equal to &lt;code&gt;e.max()&lt;/code&gt; where &lt;code&gt;e&lt;/code&gt; is the underlying engine.</source>
          <target state="translated">返回引擎适配器可能生成的最大值。此值等于 &lt;code&gt;e.max()&lt;/code&gt; ，其中 &lt;code&gt;e&lt;/code&gt; 是基础引擎。</target>
        </trans-unit>
        <trans-unit id="c21aa7ebce516ecae56ba26f27d3cf3f7756ebfa" translate="yes" xml:space="preserve">
          <source>Returns the maximum value potentially generated by the random-number engine. This value is equal to 2w</source>
          <target state="translated">返回随机数引擎可能产生的最大数值。这个值等于2w</target>
        </trans-unit>
        <trans-unit id="43bbe3e859cd8d065ac4465590d4060f03a32add" translate="yes" xml:space="preserve">
          <source>Returns the maximum value potentially generated by the random-number engine. This value is equal to &lt;code&gt;&lt;a href=&quot;../../../types/numeric_limits&quot;&gt;std::numeric_limits&lt;/a&gt;&amp;lt;unsigned int&amp;gt;::max()&lt;/code&gt;.</source>
          <target state="translated">返回可能由随机数引擎生成的最大值。该值等于 &lt;code&gt;&lt;a href=&quot;../../../types/numeric_limits&quot;&gt;std::numeric_limits&lt;/a&gt;&amp;lt;unsigned int&amp;gt;::max()&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="7af58bc1ff40680ea570ca3046b0ec168770e6a4" translate="yes" xml:space="preserve">
          <source>Returns the maximum value potentially generated by the random-number engine. This value is one less than &lt;code&gt;modulus&lt;/code&gt;.</source>
          <target state="translated">返回可能由随机数引擎生成的最大值。该值比 &lt;code&gt;modulus&lt;/code&gt; 小1 。</target>
        </trans-unit>
        <trans-unit id="9e4e20b50ccf9a93c57e36c7c58e309acf7abedc" translate="yes" xml:space="preserve">
          <source>Returns the memory at &lt;code&gt;p&lt;/code&gt; to the pool. It is unspecified if or under what circumstances this operation will result in a call to &lt;code&gt;deallocate()&lt;/code&gt; on the upstream memory resource.</source>
          <target state="translated">将 &lt;code&gt;p&lt;/code&gt; 处的内存返回给池。未指定此操作是否或在什么情况下会导致调用上游内存资源上的 &lt;code&gt;deallocate()&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="e7704180180c21daba09fd65be84a2381320f189" translate="yes" xml:space="preserve">
          <source>Returns the memory resource pointer used by this polymorphic allocator.</source>
          <target state="translated">返回该多态分配器使用的内存资源指针。</target>
        </trans-unit>
        <trans-unit id="ca2d5329cb6c4a279c924dcdbad3c370faae5e09" translate="yes" xml:space="preserve">
          <source>Returns the message corresponding to the current error value and category.</source>
          <target state="translated">返回当前错误值和类别对应的消息。</target>
        </trans-unit>
        <trans-unit id="3c85237897f6adfce31db4c47af2b9b9f7f85715" translate="yes" xml:space="preserve">
          <source>Returns the minimum finite value representable by the numeric type &lt;code&gt;T&lt;/code&gt;.</source>
          <target state="translated">返回由数字类型 &lt;code&gt;T&lt;/code&gt; 表示的最小有限值。</target>
        </trans-unit>
        <trans-unit id="21d502a35e3d5f22d1f9b4d2dd602a62dcfac8e3" translate="yes" xml:space="preserve">
          <source>Returns the minimum positive &lt;a href=&quot;https://en.wikipedia.org/wiki/Denormal_number&quot;&gt;subnormal value&lt;/a&gt; of the type &lt;code&gt;T&lt;/code&gt;, if &lt;code&gt;&lt;a href=&quot;../numeric_limits&quot;&gt;std::numeric_limits&lt;/a&gt;&amp;lt;T&amp;gt;::has_denorm != &lt;a href=&quot;float_denorm_style&quot;&gt;std::denorm_absent&lt;/a&gt;&lt;/code&gt;, otherwise returns &lt;code&gt;&lt;a href=&quot;../numeric_limits&quot;&gt;std::numeric_limits&lt;/a&gt;&amp;lt;T&amp;gt;::min()&lt;/code&gt;. Only meaningful for floating-point types.</source>
          <target state="translated">如果 &lt;code&gt;&lt;a href=&quot;../numeric_limits&quot;&gt;std::numeric_limits&lt;/a&gt;&amp;lt;T&amp;gt;::has_denorm != &lt;a href=&quot;float_denorm_style&quot;&gt;std::denorm_absent&lt;/a&gt;&lt;/code&gt; &amp;lt;T&amp;gt; :: has_denorm！= &lt;a href=&quot;float_denorm_style&quot;&gt;std :: denorm_absent&lt;/a&gt;，则返回类型 &lt;code&gt;T&lt;/code&gt; 的最小正子正&lt;a href=&quot;https://en.wikipedia.org/wiki/Denormal_number&quot;&gt;态值&lt;/a&gt;，否则返回 &lt;code&gt;&lt;a href=&quot;../numeric_limits&quot;&gt;std::numeric_limits&lt;/a&gt;&amp;lt;T&amp;gt;::min()&lt;/code&gt; &amp;lt;T&amp;gt; :: min（）。仅对浮点类型有意义。</target>
        </trans-unit>
        <trans-unit id="bcf7dd695d5e27b364f46aa5575e9546a63223ea" translate="yes" xml:space="preserve">
          <source>Returns the minimum value potentially generated by the distribution.</source>
          <target state="translated">返回分布可能产生的最小值。</target>
        </trans-unit>
        <trans-unit id="2730b089c4be641767c7a9e223cbfecb4c64dfaf" translate="yes" xml:space="preserve">
          <source>Returns the minimum value potentially generated by the engine adaptor. This value is equal to 0u.</source>
          <target state="translated">返回发动机适配器可能产生的最小值。该值等于0u。</target>
        </trans-unit>
        <trans-unit id="c0119f36535e91743242c18cf3dbe67a8b4f7c84" translate="yes" xml:space="preserve">
          <source>Returns the minimum value potentially generated by the engine adaptor. This value is equal to &lt;code&gt;e.min()&lt;/code&gt; where &lt;code&gt;e&lt;/code&gt; is the underlying engine.</source>
          <target state="translated">返回可能由引擎适配器生成的最小值。此值等于 &lt;code&gt;e.min()&lt;/code&gt; ，其中 &lt;code&gt;e&lt;/code&gt; 是基础引擎。</target>
        </trans-unit>
        <trans-unit id="8f0a963ec6c9b85f526c2f118e867e0083d44244" translate="yes" xml:space="preserve">
          <source>Returns the minimum value potentially generated by the random-number engine. This value is equal to &lt;code&gt;0u&lt;/code&gt;.</source>
          <target state="translated">返回可能由随机数引擎生成的最小值。该值等于 &lt;code&gt;0u&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="1b660d7384e7bbb9429636a82bc8003c63f80d29" translate="yes" xml:space="preserve">
          <source>Returns the minimum value potentially generated by the random-number engine. This value is equal to &lt;code&gt;1u&lt;/code&gt; if &lt;code&gt;increment&lt;/code&gt; is &lt;code&gt;0u&lt;/code&gt;, and is equal to &lt;code&gt;0u&lt;/code&gt; otherwise.</source>
          <target state="translated">返回可能由随机数引擎生成的最小值。如果 &lt;code&gt;increment&lt;/code&gt; 为 &lt;code&gt;0u&lt;/code&gt; ，那么此值等于 &lt;code&gt;1u&lt;/code&gt; ;否则，等于 &lt;code&gt;0u&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="eb494f8a3655b2e51ce879a04bba74dae8348331" translate="yes" xml:space="preserve">
          <source>Returns the month value stored in &lt;code&gt;*this&lt;/code&gt;.</source>
          <target state="translated">返回存储在 &lt;code&gt;*this&lt;/code&gt; 中的月份值。</target>
        </trans-unit>
        <trans-unit id="fe8c3f5f4aab4e1d7f1f2a3d3f8f07aa9b64e9e5" translate="yes" xml:space="preserve">
          <source>Returns the n distribution parameter (number of the degrees of freedom) the distribution was constructed with. The default value is &lt;code&gt;1.0&lt;/code&gt;.</source>
          <target state="translated">返回构造分布的n分布参数（自由度数）。默认值为 &lt;code&gt;1.0&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="aff82fc5606930ee56d524d123f441f0c3dfca38" translate="yes" xml:space="preserve">
          <source>Returns the n parameter the distribution was constructed with. It specifies the &lt;a href=&quot;https://en.wikipedia.org/wiki/Degrees_of_freedom_(statistics)&quot;&gt;degrees of freedom&lt;/a&gt; of the distribution. The default value is &lt;code&gt;1.0&lt;/code&gt;.</source>
          <target state="translated">返回构造分布的n参数。它指定分布&lt;a href=&quot;https://en.wikipedia.org/wiki/Degrees_of_freedom_(statistics)&quot;&gt;的自由度&lt;/a&gt;。默认值为 &lt;code&gt;1.0&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="43622c2e65b163151e1cba2739c6700a85e42d47" translate="yes" xml:space="preserve">
          <source>Returns the name of the associated &lt;code&gt;&lt;a href=&quot;../type_info&quot;&gt;std::type_info&lt;/a&gt;&lt;/code&gt; object. Equivalent to calling &lt;code&gt;&lt;a href=&quot;../type_info/name&quot;&gt;std::type_info::name()&lt;/a&gt;&lt;/code&gt; directly.</source>
          <target state="translated">返回关联的 &lt;code&gt;&lt;a href=&quot;../type_info&quot;&gt;std::type_info&lt;/a&gt;&lt;/code&gt; 对象的名称。等效于直接调用 &lt;code&gt;&lt;a href=&quot;../type_info/name&quot;&gt;std::type_info::name()&lt;/a&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="63731644d4e27d814c2ac43f92333a23087d8080" translate="yes" xml:space="preserve">
          <source>Returns the name of the function where the contract violation happened. If the name is unknown, an implementation may return an empty &lt;code&gt;string_view&lt;/code&gt; instead.</source>
          <target state="translated">返回发生违约的函数的名称。如果名称未知，则实现可能会返回一个空的 &lt;code&gt;string_view&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="bf652de1b26ef0e84557a7ea04a12ba82348ce00" translate="yes" xml:space="preserve">
          <source>Returns the name of the locale, which is the name by which it is known to the operating system, such as &quot;POSIX&quot; or &quot;en_US.UTF8&quot; or &quot;English_United States.1252&quot;. If the locale is not a copy of a system-supplied locale, the string &quot;*&quot; is returned.</source>
          <target state="translated">返回locale的名称,也就是操作系统所知道的名称,比如 &quot;POSIX &quot;或 &quot;en_US.UTF8 &quot;或 &quot;English_United States.1252&quot;。如果locale不是系统提供的locale的副本,则返回字符串 &quot;*&quot;。</target>
        </trans-unit>
        <trans-unit id="d71a634f49e0ffa83725a83c23069eb0ae2d604f" translate="yes" xml:space="preserve">
          <source>Returns the name of the the source file where the contract violation happened. If the name is unknown, an implementation may return an empty &lt;code&gt;string_view&lt;/code&gt; instead.</source>
          <target state="translated">返回发生违约的源文件的名称。如果名称未知，则实现可能会返回一个空的 &lt;code&gt;string_view&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="5f4d724ca50edcb9194d4a32504fbd81f36987d6" translate="yes" xml:space="preserve">
          <source>Returns the nearest time point to &lt;code&gt;tp&lt;/code&gt; representable in &lt;code&gt;ToDuration&lt;/code&gt;, rounding to even in halfway cases.</source>
          <target state="translated">返回 &lt;code&gt;ToDuration&lt;/code&gt; 中可表示的 &lt;code&gt;tp&lt;/code&gt; 的最近时间点，在中途情况下四舍五入为偶数。</target>
        </trans-unit>
        <trans-unit id="5751c1d8f24591fb51c2d8e65267444e2348b9a0" translate="yes" xml:space="preserve">
          <source>Returns the negation of &lt;code&gt;arg&lt;/code&gt;.</source>
          <target state="translated">返回 &lt;code&gt;arg&lt;/code&gt; 的取反。</target>
        </trans-unit>
        <trans-unit id="9b401f52e7fcb85ca5c4f9c0b12d938c010d8106" translate="yes" xml:space="preserve">
          <source>Returns the next representable value of &lt;code&gt;from&lt;/code&gt; in the direction of &lt;code&gt;to&lt;/code&gt;.</source>
          <target state="translated">返回的下一个可表示值 &lt;code&gt;from&lt;/code&gt; 在的方向 &lt;code&gt;to&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="3d741cc6a5787f9ea5fe51617aca9334f39d2ecd" translate="yes" xml:space="preserve">
          <source>Returns the number of &lt;code&gt;CharT&lt;/code&gt; elements in the string, i.e. &lt;code&gt;&lt;a href=&quot;../../iterator/distance&quot;&gt;std::distance&lt;/a&gt;(begin(), end())&lt;/code&gt;.</source>
          <target state="translated">返回字符串中 &lt;code&gt;CharT&lt;/code&gt; 元素的数量，即 &lt;code&gt;&lt;a href=&quot;../../iterator/distance&quot;&gt;std::distance&lt;/a&gt;(begin(), end())&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="932e08759fc4cfc84672fe4b27730fefadf9db78" translate="yes" xml:space="preserve">
          <source>Returns the number of &lt;code&gt;CharT&lt;/code&gt; elements in the view, i.e. &lt;code&gt;&lt;a href=&quot;../../iterator/distance&quot;&gt;std::distance&lt;/a&gt;(begin(), end())&lt;/code&gt;.</source>
          <target state="translated">返回视图中 &lt;code&gt;CharT&lt;/code&gt; 元素的数量，即 &lt;code&gt;&lt;a href=&quot;../../iterator/distance&quot;&gt;std::distance&lt;/a&gt;(begin(), end())&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="2f65442fe83ff47a779816ef1f75fc1c4a93759f" translate="yes" xml:space="preserve">
          <source>Returns the number of &lt;code&gt;shared_ptr&lt;/code&gt; instances that share ownership of the managed object, or &lt;code&gt;​0​&lt;/code&gt; if the managed object has already been deleted, i.e. &lt;code&gt;*this&lt;/code&gt; is empty.</source>
          <target state="translated">返回数量 &lt;code&gt;shared_ptr&lt;/code&gt; 实例的管理对象的股权，或 &lt;code&gt;​0​&lt;/code&gt; ，如果被管理的对象已经被删除，即 &lt;code&gt;*this&lt;/code&gt; 是空的。</target>
        </trans-unit>
        <trans-unit id="63562fc895320772383f007a9ac77da6cff58945" translate="yes" xml:space="preserve">
          <source>Returns the number of bits that are set to &lt;code&gt;true&lt;/code&gt;.</source>
          <target state="translated">返回设置为 &lt;code&gt;true&lt;/code&gt; 的位数。</target>
        </trans-unit>
        <trans-unit id="06908c113c8a2a587a4a9f8de59e23e0265d014c" translate="yes" xml:space="preserve">
          <source>Returns the number of bits that the bitset can hold.</source>
          <target state="translated">返回比特组可以容纳的比特数。</target>
        </trans-unit>
        <trans-unit id="017832020bb0e12bdcd6e1b453a407187835ffb6" translate="yes" xml:space="preserve">
          <source>Returns the number of buckets in the container.</source>
          <target state="translated">返回容器中水桶的数量。</target>
        </trans-unit>
        <trans-unit id="98ad1bbdae22924b87fb4ba4fa35c8ef28cff5cf" translate="yes" xml:space="preserve">
          <source>Returns the number of characters available in the get area. If a read position is available, effectively returns &lt;code&gt;egptr() - gptr()&lt;/code&gt;, the size of the get area. In this case, the number of bytes returned is the number of bytes that can be extracted from the buffer without calling &lt;code&gt;&lt;a href=&quot;underflow&quot;&gt;underflow()&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">返回获取区域中可用的字符数。如果有读取位置可用，则有效地返回 &lt;code&gt;egptr() - gptr()&lt;/code&gt; ，即获取区域的大小。在这种情况下，返回的字节数是无需调用 &lt;code&gt;&lt;a href=&quot;underflow&quot;&gt;underflow()&lt;/a&gt;&lt;/code&gt; 即可从缓冲区中提取的字节数。</target>
        </trans-unit>
        <trans-unit id="7a3d766de30a99eee2e3353eecb1102ef2b578b2" translate="yes" xml:space="preserve">
          <source>Returns the number of characters extracted by the last &lt;a href=&quot;../../named_req/unformattedinputfunction&quot;&gt;unformatted input operation&lt;/a&gt;.</source>
          <target state="translated">返回上一次&lt;a href=&quot;../../named_req/unformattedinputfunction&quot;&gt;未经格式化的输入操作&lt;/a&gt;提取的字符数。</target>
        </trans-unit>
        <trans-unit id="d1f21c9deda5b327f120782cefaf8663259a75e9" translate="yes" xml:space="preserve">
          <source>Returns the number of characters in the match, i.e. &lt;code&gt;&lt;a href=&quot;../../iterator/distance&quot;&gt;std::distance&lt;/a&gt;(first, second)&lt;/code&gt; if the match is valid, 0 otherwise.</source>
          <target state="translated">返回匹配中的字符数，如果匹配有效，则返回 &lt;code&gt;&lt;a href=&quot;../../iterator/distance&quot;&gt;std::distance&lt;/a&gt;(first, second)&lt;/code&gt; ，否则返回0。</target>
        </trans-unit>
        <trans-unit id="2e513954d3ca355624799c17f9e8acfbfd285f0f" translate="yes" xml:space="preserve">
          <source>Returns the number of characters that the string has currently allocated space for.</source>
          <target state="translated">返回字符串当前分配的字符数。</target>
        </trans-unit>
        <trans-unit id="b771834e440230f8fdd3401bf841c930002186f5" translate="yes" xml:space="preserve">
          <source>Returns the number of characters that were output in the put area of the associated &lt;code&gt;&lt;a href=&quot;../strstreambuf&quot;&gt;std::strstreambuf&lt;/a&gt;&lt;/code&gt;. Effectively calls &lt;code&gt;rdbuf()-&amp;gt;pcount()&lt;/code&gt;.</source>
          <target state="translated">返回在关联的 &lt;code&gt;&lt;a href=&quot;../strstreambuf&quot;&gt;std::strstreambuf&lt;/a&gt;&lt;/code&gt; 的put区域中输出的字符数。有效地调用 &lt;code&gt;rdbuf()-&amp;gt;pcount()&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="8b453516fa4fd1d8ddb3adeaee4563f2bac41eb3" translate="yes" xml:space="preserve">
          <source>Returns the number of characters written to the output sequence.</source>
          <target state="translated">返回写入输出序列的字符数。</target>
        </trans-unit>
        <trans-unit id="aebd7b77d5d4d5408464f5c6dfc238e7fb1a2daf" translate="yes" xml:space="preserve">
          <source>Returns the number of concurrent threads supported by the implementation. The value should be considered only a hint.</source>
          <target state="translated">返回实现所支持的并发线程数。这个值应该被认为只是一个提示。</target>
        </trans-unit>
        <trans-unit id="174b7586f5d4312f65e02b03a8c1e26e46f220f8" translate="yes" xml:space="preserve">
          <source>Returns the number of different &lt;code&gt;shared_ptr&lt;/code&gt; instances (&lt;code&gt;this&lt;/code&gt; included) managing the current object. If there is no managed object, &lt;code&gt;​0​&lt;/code&gt; is returned.</source>
          <target state="translated">返回管理当前对象的不同 &lt;code&gt;shared_ptr&lt;/code&gt; 实例（包括 &lt;code&gt;this&lt;/code&gt; 实例）的数量。如果没有管理对象， &lt;code&gt;​0​&lt;/code&gt; 被返回。</target>
        </trans-unit>
        <trans-unit id="38b8fad439f710a3feabdc127a55e6aac93bc0ae" translate="yes" xml:space="preserve">
          <source>Returns the number of directories from the starting directory to the currently iterated directory, i.e. the current depth of the directory hierarchy.</source>
          <target state="translated">返回从起始目录到当前迭代目录的目录数,即当前目录层次结构的深度。</target>
        </trans-unit>
        <trans-unit id="dc53d735298482bde24a7c4ec081dd352beb5364" translate="yes" xml:space="preserve">
          <source>Returns the number of elements in &lt;code&gt;Ints&lt;/code&gt;. Equivalent to &lt;code&gt;sizeof...(Ints)&lt;/code&gt;.</source>
          <target state="translated">返回 &lt;code&gt;Ints&lt;/code&gt; 中的元素数。相当于 &lt;code&gt;sizeof...(Ints)&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="03d068eb7b84955218d0cac9ee86af5b33bafdf1" translate="yes" xml:space="preserve">
          <source>Returns the number of elements in a &lt;a href=&quot;parameter_pack&quot;&gt;parameter pack&lt;/a&gt;.</source>
          <target state="translated">返回&lt;a href=&quot;parameter_pack&quot;&gt;参数包&lt;/a&gt;中元素的数量。</target>
        </trans-unit>
        <trans-unit id="a43f59de23159724dc26eb4cb86352bd210998e9" translate="yes" xml:space="preserve">
          <source>Returns the number of elements in the bucket with index &lt;code&gt;n&lt;/code&gt;.</source>
          <target state="translated">返回索引为 &lt;code&gt;n&lt;/code&gt; 的存储桶中的元素数。</target>
        </trans-unit>
        <trans-unit id="a28ca1ab56894a2bc9256c2016002a73e49bb113" translate="yes" xml:space="preserve">
          <source>Returns the number of elements in the container, i.e. &lt;code&gt;&lt;a href=&quot;../../iterator/distance&quot;&gt;std::distance&lt;/a&gt;(begin(), end())&lt;/code&gt;.</source>
          <target state="translated">返回容器中元素的数量，即 &lt;code&gt;&lt;a href=&quot;../../iterator/distance&quot;&gt;std::distance&lt;/a&gt;(begin(), end())&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="98acced69a33fdceef1c882d99fe06881b91001a" translate="yes" xml:space="preserve">
          <source>Returns the number of elements in the initializer list, i.e. &lt;code&gt;&lt;a href=&quot;../../iterator/distance&quot;&gt;std::distance&lt;/a&gt;(begin(), end())&lt;/code&gt;.</source>
          <target state="translated">返回初始化列表中元素的数量，即 &lt;code&gt;&lt;a href=&quot;../../iterator/distance&quot;&gt;std::distance&lt;/a&gt;(begin(), end())&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="f0895409c4a96c66249936eb82061635a917fc7b" translate="yes" xml:space="preserve">
          <source>Returns the number of elements in the range &lt;code&gt;[first, last)&lt;/code&gt; satisfying specific criteria.</source>
          <target state="translated">返回满足特定条件的 &lt;code&gt;[first, last)&lt;/code&gt; 范围内的元素数。</target>
        </trans-unit>
        <trans-unit id="7d5495fb69cdfe811773acd6a923ecb64de1b37d" translate="yes" xml:space="preserve">
          <source>Returns the number of elements in the span.</source>
          <target state="translated">返回跨度中元素的数量。</target>
        </trans-unit>
        <trans-unit id="4f1d41dfc7754764a4936ef4e09527e042a9d113" translate="yes" xml:space="preserve">
          <source>Returns the number of elements in the underlying container, that is, &lt;code&gt;c.size()&lt;/code&gt;.</source>
          <target state="translated">返回基础容器中元素的数量，即 &lt;code&gt;c.size()&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="d68130cd8a1a766b06ac25df710fcd56506b5248" translate="yes" xml:space="preserve">
          <source>Returns the number of elements in the valarray.</source>
          <target state="translated">返回valarray中元素的数量。</target>
        </trans-unit>
        <trans-unit id="3ec9ea4e2b9bd7b23f1513bec6579b6ddaf86d5e" translate="yes" xml:space="preserve">
          <source>Returns the number of elements that the container has currently allocated space for.</source>
          <target state="translated">返回容器当前已分配空间的元素数量。</target>
        </trans-unit>
        <trans-unit id="7257c0fd76399238d036f9bd52cc9a64d0d7568e" translate="yes" xml:space="preserve">
          <source>Returns the number of elements with key that compares</source>
          <target state="translated">Returns the number of elements with key that compares.</target>
        </trans-unit>
        <trans-unit id="5de8b03df52da9de7e5e03103eb97836a2ae02a7" translate="yes" xml:space="preserve">
          <source>Returns the number of hard links for the filesystem object identified by path &lt;code&gt;p&lt;/code&gt;.</source>
          <target state="translated">返回由路径 &lt;code&gt;p&lt;/code&gt; 标识的文件系统对象的硬链接数。</target>
        </trans-unit>
        <trans-unit id="5cb46613d39c3e41d2278c75f7ca7217a515434a" translate="yes" xml:space="preserve">
          <source>Returns the number of hops from &lt;code&gt;first&lt;/code&gt; to &lt;code&gt;last&lt;/code&gt;.</source>
          <target state="translated">返回从 &lt;code&gt;first&lt;/code&gt; 到 &lt;code&gt;last&lt;/code&gt; 的跳数。</target>
        </trans-unit>
        <trans-unit id="4a7568fe2e7ce0ac1f110bbd315439ee6ee7dd86" translate="yes" xml:space="preserve">
          <source>Returns the number of marked sub-expressions (also known as capture groups) within the regular expression.</source>
          <target state="translated">返回正则表达式中标记的子表达式(也称为捕获组)的数量。</target>
        </trans-unit>
        <trans-unit id="56804e4401fb018410a93e90f2e6bcb525e89a10" translate="yes" xml:space="preserve">
          <source>Returns the number of source characters that were processed by the most recent &lt;code&gt;&lt;a href=&quot;from_bytes&quot;&gt;from_bytes()&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;to_bytes&quot;&gt;to_bytes()&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">返回最近的 &lt;code&gt;&lt;a href=&quot;from_bytes&quot;&gt;from_bytes()&lt;/a&gt;&lt;/code&gt; 或 &lt;code&gt;&lt;a href=&quot;to_bytes&quot;&gt;to_bytes()&lt;/a&gt;&lt;/code&gt; 处理的源字符数。</target>
        </trans-unit>
        <trans-unit id="9db4d647cbc0a34e02a6f5eaa8ef3eb94a196197" translate="yes" xml:space="preserve">
          <source>Returns the number of submatches, i.e. &lt;code&gt;&lt;a href=&quot;../../iterator/distance&quot;&gt;std::distance&lt;/a&gt;(begin(), end())&lt;/code&gt;.</source>
          <target state="translated">返回子匹配的数量，即 &lt;code&gt;&lt;a href=&quot;../../iterator/distance&quot;&gt;std::distance&lt;/a&gt;(begin(), end())&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="c5c39e6c4fd31ae0cdd5fcf52af7564c373e1ce5" translate="yes" xml:space="preserve">
          <source>Returns the number of ticks for this duration.</source>
          <target state="translated">返回该持续时间的滴答次数。</target>
        </trans-unit>
        <trans-unit id="a7fe96f5c66294e8341691e7f9477fbbb3c0f662" translate="yes" xml:space="preserve">
          <source>Returns the options that affect the directory iteration. The options can only be supplied when constructing the directory iterator.</source>
          <target state="translated">返回影响目录迭代的选项。这些选项只能在构造目录迭代器时提供。</target>
        </trans-unit>
        <trans-unit id="0920249e93b7f3344c500733d97d00607385b9dd" translate="yes" xml:space="preserve">
          <source>Returns the options that control the pooling behavior of this resource</source>
          <target state="translated">返回控制该资源池行为的选项。</target>
        </trans-unit>
        <trans-unit id="f1387e8b7ead6c351e6c717632dab29a4f22bf8e" translate="yes" xml:space="preserve">
          <source>Returns the options that controls the pooling behavior of this resource.</source>
          <target state="translated">返回控制该资源池行为的选项。</target>
        </trans-unit>
        <trans-unit id="3e4b1931c1cabd2139a4c13ee3369a5995cabc55" translate="yes" xml:space="preserve">
          <source>Returns the output position indicator of the current associated &lt;code&gt;streambuf&lt;/code&gt; object.</source>
          <target state="translated">返回当前关联的 &lt;code&gt;streambuf&lt;/code&gt; 对象的输出位置指示符。</target>
        </trans-unit>
        <trans-unit id="12aebbd1c28a2803f63003944239c810c025c38f" translate="yes" xml:space="preserve">
          <source>Returns the p distribution parameter the distribution was constructed with. The parameter defines the probability of a trial generating &lt;code&gt;true&lt;/code&gt;. The default value is &lt;code&gt;0.5&lt;/code&gt;.</source>
          <target state="translated">返回构造分布的p分布参数。该参数定义了试验生成 &lt;code&gt;true&lt;/code&gt; 的概率。默认值为 &lt;code&gt;0.5&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="3baf563df393fafeea323ae7e229a4a84660aa02" translate="yes" xml:space="preserve">
          <source>Returns the p parameter the distribution was constructed with. It defines the probability of generating &lt;code&gt;true&lt;/code&gt;. The default value is &lt;code&gt;0.5&lt;/code&gt;.</source>
          <target state="translated">返回构造分布的p参数。它定义了生成 &lt;code&gt;true&lt;/code&gt; 的概率。默认值为 &lt;code&gt;0.5&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="e2de0569a7215a4910b7cd8bacd7edde4dd891e6" translate="yes" xml:space="preserve">
          <source>Returns the parameters passed to the slice on construction - start, size and stride respectively.</source>
          <target state="translated">返回在构造时传递给切片的参数--分别是start、size和stride。</target>
        </trans-unit>
        <trans-unit id="c51020f12a51f6f101e0f62f279e4b40bfd1cdf9" translate="yes" xml:space="preserve">
          <source>Returns the parameters passed to the slice on construction - start, sizes and strides respectively.</source>
          <target state="translated">返回在构造时传递给切片的参数--分别是起始点、尺寸和步长。</target>
        </trans-unit>
        <trans-unit id="7579288dcd4058707c83d5af637573b3d46876ec" translate="yes" xml:space="preserve">
          <source>Returns the parameters the distribution has been constructed with.</source>
          <target state="translated">返回已经构建的分布参数。</target>
        </trans-unit>
        <trans-unit id="0a74612f310625d9f24a40d92035f119ba202cd9" translate="yes" xml:space="preserve">
          <source>Returns the parameters the distribution was constructed with.</source>
          <target state="translated">Returns the parameters the distribution was constructed with.</target>
        </trans-unit>
        <trans-unit id="32a2165771f5bc8f32f8b8d18effcb4bfd1e3299" translate="yes" xml:space="preserve">
          <source>Returns the past-the-end iterator of the &lt;code&gt;tzdb_list&lt;/code&gt;. Attempting to dereference this iterator results in undefined behavior.</source>
          <target state="translated">返回 &lt;code&gt;tzdb_list&lt;/code&gt; 的最新迭代器。尝试取消引用此迭代器会导致未定义的行为。</target>
        </trans-unit>
        <trans-unit id="f489031c3712347aeb02fe102e74033aed5ba361" translate="yes" xml:space="preserve">
          <source>Returns the path to the parent directory.</source>
          <target state="translated">返回父目录的路径。</target>
        </trans-unit>
        <trans-unit id="d72e0a0de6b27210c5d8173027623c174ddb1628" translate="yes" xml:space="preserve">
          <source>Returns the paths that were stored in the exception object.</source>
          <target state="translated">返回存储在异常对象中的路径。</target>
        </trans-unit>
        <trans-unit id="c29b4c8f5a0f7ecc30c93502dfe1b21f499a4d6b" translate="yes" xml:space="preserve">
          <source>Returns the payload object object held by the exception object.</source>
          <target state="translated">返回异常对象所持有的有效载荷对象对象。</target>
        </trans-unit>
        <trans-unit id="fac79435ff8b5f43fce78d6fa9195abbb5d34db1" translate="yes" xml:space="preserve">
          <source>Returns the platform dependent error value.</source>
          <target state="translated">返回依赖于平台的错误值。</target>
        </trans-unit>
        <trans-unit id="eb450bce8b1ae6ae650550321099bc64a5c809dd" translate="yes" xml:space="preserve">
          <source>Returns the pointer that is held by &lt;code&gt;*this&lt;/code&gt;.</source>
          <target state="translated">返回 &lt;code&gt;*this&lt;/code&gt; 持有的指针。</target>
        </trans-unit>
        <trans-unit id="b538bee84f4de41049a64b846c6b0597cecc3861" translate="yes" xml:space="preserve">
          <source>Returns the pointer to the beginning of the buffer, after freezing it. Effectively calls &lt;code&gt;rdbuf()-&amp;gt;str()&lt;/code&gt;.</source>
          <target state="translated">冻结后，将指针返回到缓冲区的开头。有效地调用 &lt;code&gt;rdbuf()-&amp;gt;str()&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="5778e4440cb9d3b18aea817f6e2114a76d6c51cf" translate="yes" xml:space="preserve">
          <source>Returns the position of the first character of the specified sub-match.</source>
          <target state="translated">返回指定子匹配的第一个字符的位置。</target>
        </trans-unit>
        <trans-unit id="21e0589db00cc1e4d7a1735a64ac57916b57d527" translate="yes" xml:space="preserve">
          <source>Returns the previous value of the default memory resource pointer.</source>
          <target state="translated">返回默认内存资源指针的前值。</target>
        </trans-unit>
        <trans-unit id="558cb056c529e0c218f09ed9a1aa012a0041bd19" translate="yes" xml:space="preserve">
          <source>Returns the product of &lt;code&gt;lhs&lt;/code&gt; and &lt;code&gt;rhs&lt;/code&gt;.</source>
          <target state="translated">返回 &lt;code&gt;lhs&lt;/code&gt; 和 &lt;code&gt;rhs&lt;/code&gt; 的乘积。</target>
        </trans-unit>
        <trans-unit id="3f481c14ac7ba99d44abf1406a844e2495748b7c" translate="yes" xml:space="preserve">
          <source>Returns the projection of the complex number &lt;code&gt;z&lt;/code&gt; onto the Riemann sphere.</source>
          <target state="translated">返回复数 &lt;code&gt;z&lt;/code&gt; 在黎曼球面上的投影。</target>
        </trans-unit>
        <trans-unit id="ca7e521f336ebf18b29aa4306c2f184230918ff9" translate="yes" xml:space="preserve">
          <source>Returns the regular expression syntax flags as set in the constructor or the last call to &lt;code&gt;&lt;a href=&quot;assign&quot;&gt;assign()&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">返回构造函数中设置的正则表达式语法标志，或者返回对 &lt;code&gt;&lt;a href=&quot;assign&quot;&gt;assign()&lt;/a&gt;&lt;/code&gt; 的最后一次调用。</target>
        </trans-unit>
        <trans-unit id="9b401d695fbe6b4e8d7f86294ca7a058b2f923ee" translate="yes" xml:space="preserve">
          <source>Returns the remainder of the division of &lt;code&gt;lhs&lt;/code&gt; by &lt;code&gt;rhs&lt;/code&gt; (or whatever &lt;code&gt;operator%&lt;/code&gt; is overloaded to do).</source>
          <target state="translated">返回 &lt;code&gt;lhs&lt;/code&gt; 除以 &lt;code&gt;rhs&lt;/code&gt; 的余数（或任何要重载的 &lt;code&gt;operator%&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="1b6419ca3c44ea1f1777445c553a6bc2c9e0089b" translate="yes" xml:space="preserve">
          <source>Returns the remainder of the division of &lt;code&gt;lhs&lt;/code&gt; by &lt;code&gt;rhs&lt;/code&gt;.</source>
          <target state="translated">返回 &lt;code&gt;lhs&lt;/code&gt; 除以 &lt;code&gt;rhs&lt;/code&gt; 的余数。</target>
        </trans-unit>
        <trans-unit id="a489ac4058841d39dab0c237cb1cdd4e08726447" translate="yes" xml:space="preserve">
          <source>Returns the result of &lt;code&gt;!arg&lt;/code&gt;.</source>
          <target state="translated">返回 &lt;code&gt;!arg&lt;/code&gt; 的结果。</target>
        </trans-unit>
        <trans-unit id="b76179239a4827522c804788032dd6df8986a6c1" translate="yes" xml:space="preserve">
          <source>Returns the result of &lt;code&gt;&lt;a href=&quot;../forward&quot;&gt;std::forward&lt;/a&gt;&amp;lt;T&amp;gt;(lhs) | &lt;a href=&quot;../forward&quot;&gt;std::forward&lt;/a&gt;&amp;lt;U&amp;gt;(rhs)&lt;/code&gt;.</source>
          <target state="translated">返回 &lt;code&gt;&lt;a href=&quot;../forward&quot;&gt;std::forward&lt;/a&gt;&amp;lt;T&amp;gt;(lhs) | &lt;a href=&quot;../forward&quot;&gt;std::forward&lt;/a&gt;&amp;lt;U&amp;gt;(rhs)&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="e3169d401e9ba1c9966abac7c38bdf384ee457be" translate="yes" xml:space="preserve">
          <source>Returns the result of &lt;code&gt;&lt;a href=&quot;../forward&quot;&gt;std::forward&lt;/a&gt;&amp;lt;T&amp;gt;(lhs) || &lt;a href=&quot;../forward&quot;&gt;std::forward&lt;/a&gt;&amp;lt;U&amp;gt;(rhs)&lt;/code&gt;.</source>
          <target state="translated">返回 &lt;code&gt;&lt;a href=&quot;../forward&quot;&gt;std::forward&lt;/a&gt;&amp;lt;T&amp;gt;(lhs) || &lt;a href=&quot;../forward&quot;&gt;std::forward&lt;/a&gt;&amp;lt;U&amp;gt;(rhs)&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="0a5d626166e8a69eec141f44dddc99650199dcb4" translate="yes" xml:space="preserve">
          <source>Returns the result of &lt;code&gt;lhs &amp;amp; rhs&lt;/code&gt;.</source>
          <target state="translated">返回 &lt;code&gt;lhs &amp;amp; rhs&lt;/code&gt; 的结果。</target>
        </trans-unit>
        <trans-unit id="13ca9f4975e27b5beba29e3e0f960c3933519d65" translate="yes" xml:space="preserve">
          <source>Returns the result of &lt;code&gt;lhs &amp;amp;&amp;amp; rhs&lt;/code&gt;.</source>
          <target state="translated">返回 &lt;code&gt;lhs &amp;amp;&amp;amp; rhs&lt;/code&gt; 的结果。</target>
        </trans-unit>
        <trans-unit id="a7d145e63fa2070ddfd405d7654d30fbd3b53a31" translate="yes" xml:space="preserve">
          <source>Returns the result of &lt;code&gt;lhs &amp;gt; rhs&lt;/code&gt;.</source>
          <target state="translated">返回 &lt;code&gt;lhs &amp;gt; rhs&lt;/code&gt; 的结果。</target>
        </trans-unit>
        <trans-unit id="c4395605546acf7773a50bc05011299181cb0bda" translate="yes" xml:space="preserve">
          <source>Returns the result of &lt;code&gt;lhs &amp;gt;= rhs&lt;/code&gt;.</source>
          <target state="translated">返回 &lt;code&gt;lhs &amp;gt;= rhs&lt;/code&gt; 的结果。</target>
        </trans-unit>
        <trans-unit id="21281ea5ea6191827c7ce24db046ecbddf019afe" translate="yes" xml:space="preserve">
          <source>Returns the result of &lt;code&gt;lhs &amp;lt; rhs&lt;/code&gt;.</source>
          <target state="translated">返回 &lt;code&gt;lhs &amp;lt; rhs&lt;/code&gt; 的结果。</target>
        </trans-unit>
        <trans-unit id="7a1b4c262bc32ab82d1eee3be90a8fd94044ca72" translate="yes" xml:space="preserve">
          <source>Returns the result of &lt;code&gt;lhs &amp;lt;= rhs&lt;/code&gt;.</source>
          <target state="translated">返回 &lt;code&gt;lhs &amp;lt;= rhs&lt;/code&gt; 的结果。</target>
        </trans-unit>
        <trans-unit id="75d694a506550ea0d1606c7df8eff438679ea94c" translate="yes" xml:space="preserve">
          <source>Returns the result of &lt;code&gt;lhs ^ rhs&lt;/code&gt;.</source>
          <target state="translated">返回 &lt;code&gt;lhs ^ rhs&lt;/code&gt; 的结果。</target>
        </trans-unit>
        <trans-unit id="fb9a3a707cbe1cab27e132fd73f574d2c1d57ae3" translate="yes" xml:space="preserve">
          <source>Returns the result of &lt;code&gt;~arg&lt;/code&gt;.</source>
          <target state="translated">返回的结果 &lt;code&gt;~arg&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="4343aabbcd37404f3c59d2ed2b9b7984b4344a4f" translate="yes" xml:space="preserve">
          <source>Returns the result of a boolean operation.</source>
          <target state="translated">返回布尔运算的结果。</target>
        </trans-unit>
        <trans-unit id="881482ab3fc01aadc81a9cce7653ade6fa55e47b" translate="yes" xml:space="preserve">
          <source>Returns the result of bitwise AND of &lt;code&gt;lhs&lt;/code&gt; and &lt;code&gt;rhs&lt;/code&gt;.</source>
          <target state="translated">返回 &lt;code&gt;lhs&lt;/code&gt; 和 &lt;code&gt;rhs&lt;/code&gt; 的按位与的结果。</target>
        </trans-unit>
        <trans-unit id="1955211d206c743e21181b5e7367a478de7b30bc" translate="yes" xml:space="preserve">
          <source>Returns the result of bitwise NOT of &lt;code&gt;arg&lt;/code&gt;.</source>
          <target state="translated">返回 &lt;code&gt;arg&lt;/code&gt; 的按位NOT的结果。</target>
        </trans-unit>
        <trans-unit id="cef577051dec53f03ac9d053acd5c8654673a6a6" translate="yes" xml:space="preserve">
          <source>Returns the result of bitwise OR of &lt;code&gt;lhs&lt;/code&gt; and &lt;code&gt;rhs&lt;/code&gt;.</source>
          <target state="translated">返回 &lt;code&gt;lhs&lt;/code&gt; 和 &lt;code&gt;rhs&lt;/code&gt; 的按位或结果。</target>
        </trans-unit>
        <trans-unit id="def2c8843906d0e76afc76ad5a526a6557cc0a5a" translate="yes" xml:space="preserve">
          <source>Returns the result of bitwise XOR of &lt;code&gt;lhs&lt;/code&gt; and &lt;code&gt;rhs&lt;/code&gt;.</source>
          <target state="translated">返回 &lt;code&gt;lhs&lt;/code&gt; 和 &lt;code&gt;rhs&lt;/code&gt; 的按位XOR结果。</target>
        </trans-unit>
        <trans-unit id="8a77208cdf7204fc6a54fb3082c0aa1a0bec55ff" translate="yes" xml:space="preserve">
          <source>Returns the result of dividing &lt;code&gt;lhs&lt;/code&gt; by &lt;code&gt;rhs&lt;/code&gt; (or whatever &lt;code&gt;operator/&lt;/code&gt; is overloaded to do).</source>
          <target state="translated">返回将 &lt;code&gt;lhs&lt;/code&gt; 除以 &lt;code&gt;rhs&lt;/code&gt; （或任何要重载的 &lt;code&gt;operator/&lt;/code&gt; ）的结果。</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
