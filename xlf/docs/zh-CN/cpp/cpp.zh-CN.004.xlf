<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="zh-CN" datatype="htmlbody" original="cpp">
    <body>
      <group id="cpp">
        <trans-unit id="8391c2c17f2f4f13c610d9f810ea10436298326c" translate="yes" xml:space="preserve">
          <source>2) Replaces the contents with a copy of &lt;code&gt;str&lt;/code&gt;. Equivalent to &lt;code&gt;*this = str;&lt;/code&gt;. In particular, allocator propagation may take place.(since C++11)</source>
          <target state="translated">2）用 &lt;code&gt;str&lt;/code&gt; 的副本替换内容。等效于 &lt;code&gt;*this = str;&lt;/code&gt; 。特别是可能发生分配器传播。（自C ++ 11起）</target>
        </trans-unit>
        <trans-unit id="55f5b0316d675d818ea9ce9e4ccf85ef81a1eb0e" translate="yes" xml:space="preserve">
          <source>2) Replaces the contents with copies of those in the range &lt;code&gt;[first, last)&lt;/code&gt;.</source>
          <target state="translated">2）将内容替换为 &lt;code&gt;[first, last)&lt;/code&gt; 范围内的内容的副本。</target>
        </trans-unit>
        <trans-unit id="d972332734e8b5d2c5018aca70fe2138a08cfe8f" translate="yes" xml:space="preserve">
          <source>2) Replaces the contents with those of &lt;code&gt;str&lt;/code&gt; using move semantics. &lt;code&gt;str&lt;/code&gt; is in a valid but unspecified state afterwards. If &lt;code&gt;std::allocator_traits&amp;lt;Allocator&amp;gt;::propagate_on_container_move_assignment()&lt;/code&gt; is &lt;code&gt;true&lt;/code&gt;, the target allocator is replaced by a copy of the source allocator. If it is &lt;code&gt;false&lt;/code&gt; and the source and the target allocators do not compare equal, the target cannot take ownership of the source memory and must assign each character individually, allocating additional memory using its own allocator as needed. Unlike other container move assignments, references, pointers, and iterators to &lt;code&gt;str&lt;/code&gt; may be invalidated.</source>
          <target state="translated">2）使用移动语义将内容替换为 &lt;code&gt;str&lt;/code&gt; 的内容。 &lt;code&gt;str&lt;/code&gt; 处于有效但未指定的状态。如果 &lt;code&gt;std::allocator_traits&amp;lt;Allocator&amp;gt;::propagate_on_container_move_assignment()&lt;/code&gt; 为 &lt;code&gt;true&lt;/code&gt; ，则将目标分配器替换为源分配器的副本。如果为 &lt;code&gt;false&lt;/code&gt; ，并且源分配器和目标分配器的比较不相等，则目标无法获得源内存的所有权，必须单独分配每个字符，并根据需要使用其自己的分配器分配其他内存。与其他容器移动分配不同，对 &lt;code&gt;str&lt;/code&gt; 的引用，指针和迭代器可能无效。</target>
        </trans-unit>
        <trans-unit id="d8aa53b7f74bebffc4fbda5847fc2a84f6c97988" translate="yes" xml:space="preserve">
          <source>2) Replaces the file position state with the value of &lt;code&gt;st&lt;/code&gt;.</source>
          <target state="translated">2）将文件位置状态替换为 &lt;code&gt;st&lt;/code&gt; 的值。</target>
        </trans-unit>
        <trans-unit id="00c2b558ca04a505b3df69c0f209e5d8c8b87e51" translate="yes" xml:space="preserve">
          <source>2) Resolves ambiguity according to the value of &lt;code&gt;z&lt;/code&gt;:</source>
          <target state="translated">2）根据 &lt;code&gt;z&lt;/code&gt; 的值解决歧义：</target>
        </trans-unit>
        <trans-unit id="68e2fa5afec319a37b25ba54d39a3436371cf00c" translate="yes" xml:space="preserve">
          <source>2) Restores the distribution parameters and internal state with data read from &lt;code&gt;ist&lt;/code&gt;. The formatting flags of &lt;code&gt;ist&lt;/code&gt; are unchanged. The data must have been written using a stream with the same locale, &lt;code&gt;CharT&lt;/code&gt; and &lt;code&gt;Traits&lt;/code&gt; template parameters, otherwise the behavior is undefined. If bad input is encountered, &lt;code&gt;ist.setstate(std::ios::failbit)&lt;/code&gt; is called, which may throw &lt;code&gt;&lt;a href=&quot;../../../io/ios_base/failure&quot;&gt;std::ios_base::failure&lt;/a&gt;&lt;/code&gt;. &lt;code&gt;d&lt;/code&gt; is unchanged in that case.</source>
          <target state="translated">2）使用从 &lt;code&gt;ist&lt;/code&gt; 读取的数据恢复分发参数和内部状态。 &lt;code&gt;ist&lt;/code&gt; 的格式标记未更改。必须使用具有相同语言环境， &lt;code&gt;CharT&lt;/code&gt; 和 &lt;code&gt;Traits&lt;/code&gt; 模板参数的流写入数据，否则行为是不确定的。如果遇到错误的输入， &lt;code&gt;ist.setstate(std::ios::failbit)&lt;/code&gt; ，这可能会引发 &lt;code&gt;&lt;a href=&quot;../../../io/ios_base/failure&quot;&gt;std::ios_base::failure&lt;/a&gt;&lt;/code&gt; 。在这种情况下， &lt;code&gt;d&lt;/code&gt; 不变。</target>
        </trans-unit>
        <trans-unit id="12ce85ecd6eacf5e22a64dc9082d8c8da89ac681" translate="yes" xml:space="preserve">
          <source>2) Restores the internal state of the pseudo-random number engine &lt;code&gt;e&lt;/code&gt; from the serialized representation, which was created by an earlier call to &lt;code&gt;operator&amp;lt;&amp;lt;&lt;/code&gt; using a stream with the same imbued locale and the same &lt;code&gt;CharT&lt;/code&gt; and &lt;code&gt;Traits&lt;/code&gt;. If the input cannot be deserialized, &lt;code&gt;e&lt;/code&gt; is left unchanged and &lt;code&gt;failbit&lt;/code&gt; is raised on &lt;code&gt;ist&lt;/code&gt;</source>
          <target state="translated">2）从序列化表示中恢复伪随机数引擎 &lt;code&gt;e&lt;/code&gt; 的内部状态，该序列化是通过使用具有相同注入区域设置，相同 &lt;code&gt;CharT&lt;/code&gt; 和 &lt;code&gt;Traits&lt;/code&gt; 的流对 &lt;code&gt;operator&amp;lt;&amp;lt;&lt;/code&gt; 的较早调用而创建的。如果输入无法反序列化， &lt;code&gt;e&lt;/code&gt; 保持不变，并 &lt;code&gt;failbit&lt;/code&gt; 上引发 &lt;code&gt;ist&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="b643562f5497c25a66a27bfb34dea13cd6b925a7" translate="yes" xml:space="preserve">
          <source>2) Restores the internal state of the pseudo-random number engine adaptor &lt;code&gt;e&lt;/code&gt; from the serialized representation, which was created by an earlier call to &lt;code&gt;operator&amp;lt;&amp;lt;&lt;/code&gt; using a stream with the same imbued locale and the same &lt;code&gt;CharT&lt;/code&gt; and &lt;code&gt;Traits&lt;/code&gt;. If the input cannot be deserialized, &lt;code&gt;e&lt;/code&gt; is left unchanged and &lt;code&gt;failbit&lt;/code&gt; is raised on &lt;code&gt;ist&lt;/code&gt;</source>
          <target state="translated">2）从序列化表示中恢复伪随机数引擎适配器 &lt;code&gt;e&lt;/code&gt; 的内部状态，该序列化是通过使用具有相同注入区域设置和相同 &lt;code&gt;CharT&lt;/code&gt; 和 &lt;code&gt;Traits&lt;/code&gt; 的流对 &lt;code&gt;operator&amp;lt;&amp;lt;&lt;/code&gt; 的较早调用而创建的。如果输入无法反序列化， &lt;code&gt;e&lt;/code&gt; 保持不变，并 &lt;code&gt;failbit&lt;/code&gt; 上引发 &lt;code&gt;ist&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="a8a9c718bf3f1c50f601c7a42168cf9675fd5b33" translate="yes" xml:space="preserve">
          <source>2) Results in &lt;code&gt;container-&amp;gt;push_back(std::move(value))&lt;/code&gt;</source>
          <target state="translated">2）结果在 &lt;code&gt;container-&amp;gt;push_back(std::move(value))&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="f4f49d2a78a32ec92ef629659a6ef39651123985" translate="yes" xml:space="preserve">
          <source>2) Results in &lt;code&gt;container-&amp;gt;push_front(std::move(value))&lt;/code&gt;</source>
          <target state="translated">2）结果在 &lt;code&gt;container-&amp;gt;push_front(std::move(value))&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="88d460ebcb4a7e227650a141fb844f9ae792cd96" translate="yes" xml:space="preserve">
          <source>2) Results in &lt;code&gt;iter = container-&amp;gt;insert(iter, std::move(value)); ++iter;&lt;/code&gt;</source>
          <target state="translated">2）结果为 &lt;code&gt;iter = container-&amp;gt;insert(iter, std::move(value)); ++iter;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="516b0aee43907957ab96c5142d8c0766a5dbe91a" translate="yes" xml:space="preserve">
          <source>2) Rethrows the currently handled exception. Abandons the execution of the current catch block and passes control to the next matching exception handler (but not to another catch clause after the same try block: its compound-statement is considered to have been 'exited'), reusing the existing exception object: no new objects are made. This form is only allowed when an exception is presently being handled (it calls &lt;code&gt;&lt;a href=&quot;../error/terminate&quot;&gt;std::terminate&lt;/a&gt;&lt;/code&gt; if used otherwise). The catch clause associated with a &lt;a href=&quot;function-try-block&quot;&gt;function-try-block&lt;/a&gt; must exit via rethrowing if used on a constructor.</source>
          <target state="translated">2）抛出当前处理的异常。放弃当前catch块的执行，并将控制权传递给下一个匹配的异常处理程序（但不传递给同一try块之后的另一个catch子句：其复合语句被视为已&amp;ldquo;退出&amp;rdquo;），重新使用现有的异常对象：没有新的对象。仅当当前正在处理异常时才允许使用此格式（如果使用异常，则调用 &lt;code&gt;&lt;a href=&quot;../error/terminate&quot;&gt;std::terminate&lt;/a&gt;&lt;/code&gt; ）。如果在构造函数上使用，与&lt;a href=&quot;function-try-block&quot;&gt;function-try-block&lt;/a&gt;相关的catch子句必须通过重新抛出退出。</target>
        </trans-unit>
        <trans-unit id="26438c9c057589edffd553b839a29cc2990f931f" translate="yes" xml:space="preserve">
          <source>2) Returns &lt;code&gt;!(*this == rhs)&lt;/code&gt;</source>
          <target state="translated">2）返回 &lt;code&gt;!(*this == rhs)&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="92ca7ae99ad5913e1af0f0bbf6f9c1d65dc3dae9" translate="yes" xml:space="preserve">
          <source>2) Returns &lt;code&gt;!(lhs == rhs)&lt;/code&gt;</source>
          <target state="translated">2）返回 &lt;code&gt;!(lhs == rhs)&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="30afc5c8f541051bb4c57d5c54e5be145efd2b96" translate="yes" xml:space="preserve">
          <source>2) Returns &lt;code&gt;*this&lt;/code&gt; made relative to &lt;code&gt;base&lt;/code&gt;.</source>
          <target state="translated">2）返回相对于 &lt;code&gt;base&lt;/code&gt; 的 &lt;code&gt;*this&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="e3acac0b6d2e53b82e830799ae6da07212d04f42" translate="yes" xml:space="preserve">
          <source>2) Returns &lt;code&gt;&lt;a href=&quot;reverse_iterator&quot;&gt;std::reverse_iterator&lt;/a&gt;&amp;lt;T*&amp;gt;&lt;/code&gt; to the reverse-beginning of the array &lt;code&gt;array&lt;/code&gt;.</source>
          <target state="translated">2）将 &lt;code&gt;&lt;a href=&quot;reverse_iterator&quot;&gt;std::reverse_iterator&lt;/a&gt;&amp;lt;T*&amp;gt;&lt;/code&gt; 返回到数组 &lt;code&gt;array&lt;/code&gt; 的反向开始。</target>
        </trans-unit>
        <trans-unit id="64e1b994f736103a0d5e098cbbbeaa4e06129696" translate="yes" xml:space="preserve">
          <source>2) Returns &lt;code&gt;&lt;a href=&quot;reverse_iterator&quot;&gt;std::reverse_iterator&lt;/a&gt;&amp;lt;T*&amp;gt;&lt;/code&gt; to the reverse-end of the array &lt;code&gt;array&lt;/code&gt;.</source>
          <target state="translated">2）将 &lt;code&gt;&lt;a href=&quot;reverse_iterator&quot;&gt;std::reverse_iterator&lt;/a&gt;&amp;lt;T*&amp;gt;&lt;/code&gt; 返回到数组 &lt;code&gt;array&lt;/code&gt; 的后端。</target>
        </trans-unit>
        <trans-unit id="8a4b5c8e19fea5024a1dcc49ddfbbf4cf4cab932" translate="yes" xml:space="preserve">
          <source>2) Returns &lt;code&gt;false&lt;/code&gt;</source>
          <target state="translated">2）返回 &lt;code&gt;false&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="2d25ac2f6942aefebe5cc0c771c9533e84a2d592" translate="yes" xml:space="preserve">
          <source>2) Returns &lt;code&gt;p&lt;/code&gt; made relative to &lt;code&gt;base&lt;/code&gt;. Resolves symlinks and normalizes both &lt;code&gt;p&lt;/code&gt; and &lt;code&gt;base&lt;/code&gt; before other processing. Effectively returns &lt;code&gt;weakly_canonical(p).lexically_relative(weakly_canonical(base))&lt;/code&gt; or &lt;code&gt;weakly_canonical(p, ec).lexically_relative(weakly_canonical(base, ec))&lt;/code&gt;, except the error code form returns &lt;code&gt;path()&lt;/code&gt; at the first error occurrence, if any.</source>
          <target state="translated">2）返回相对于 &lt;code&gt;base&lt;/code&gt; 的 &lt;code&gt;p&lt;/code&gt; 。在其他处理之前解析符号链接并规范化 &lt;code&gt;p&lt;/code&gt; 和 &lt;code&gt;base&lt;/code&gt; 。有效地返回 &lt;code&gt;weakly_canonical(p).lexically_relative(weakly_canonical(base))&lt;/code&gt; 或 &lt;code&gt;weakly_canonical(p, ec).lexically_relative(weakly_canonical(base, ec))&lt;/code&gt; ，但错误代码形式在第一次出现错误时返回 &lt;code&gt;path()&lt;/code&gt; (如有）。</target>
        </trans-unit>
        <trans-unit id="83221ec8f90b5a4723cfa7e220ac05808e72fdf1" translate="yes" xml:space="preserve">
          <source>2) Returns &lt;code&gt;true&lt;/code&gt; if &lt;code&gt;lhs&lt;/code&gt; and &lt;code&gt;rhs&lt;/code&gt; are not equal, &lt;code&gt;false&lt;/code&gt; otherwise.</source>
          <target state="translated">2）如果 &lt;code&gt;lhs&lt;/code&gt; 和 &lt;code&gt;rhs&lt;/code&gt; 不相等，则返回 &lt;code&gt;true&lt;/code&gt; ，否则返回 &lt;code&gt;false&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="3cd0abb5956f8b68030ed2093a06101c77846543" translate="yes" xml:space="preserve">
          <source>2) Returns &lt;code&gt;true&lt;/code&gt; if &lt;code&gt;lhs&lt;/code&gt; is</source>
          <target state="translated">2）如果 &lt;code&gt;lhs&lt;/code&gt; 是，则返回 &lt;code&gt;true&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="c5a778d30fccc8ec1566cb66ced23b2892bdb820" translate="yes" xml:space="preserve">
          <source>2) Returns &lt;code&gt;true&lt;/code&gt; if both &lt;code&gt;&lt;a href=&quot;in&quot;&gt;do_in()&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;out&quot;&gt;do_out()&lt;/a&gt;&lt;/code&gt; return &lt;code&gt;std::codecvt_base::noconv&lt;/code&gt; for all valid inputs.</source>
          <target state="translated">2）如果 &lt;code&gt;&lt;a href=&quot;in&quot;&gt;do_in()&lt;/a&gt;&lt;/code&gt; 和 &lt;code&gt;&lt;a href=&quot;out&quot;&gt;do_out()&lt;/a&gt;&lt;/code&gt; 都为所有有效输入返回 &lt;code&gt;std::codecvt_base::noconv&lt;/code&gt; ，则返回 &lt;code&gt;true&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="e77c30e0fa90c18c95cdcfc1da799d5f6016daba" translate="yes" xml:space="preserve">
          <source>2) Returns &lt;code&gt;true&lt;/code&gt; if lhs is greater than rhs, &lt;code&gt;false&lt;/code&gt; otherwise.</source>
          <target state="translated">2）如果lhs大于rhs，则返回 &lt;code&gt;true&lt;/code&gt; ，否则返回 &lt;code&gt;false&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="48be6dacbaf7388f10e8de845fe77d895de78af4" translate="yes" xml:space="preserve">
          <source>2) Returns &lt;code&gt;true&lt;/code&gt; if the stream has no errors and is ready for I/O operations. Specifically, returns &lt;code&gt;!fail()&lt;/code&gt;.</source>
          <target state="translated">2）如果流没有错误并且可以进行I / O操作，则返回 &lt;code&gt;true&lt;/code&gt; 。具体来说，返回 &lt;code&gt;!fail()&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="762d160a639ed47eeb92d2c2c6a7aafa24873bb3" translate="yes" xml:space="preserve">
          <source>2) Returns &lt;code&gt;​0​&lt;/code&gt; on success, &lt;code&gt;-1&lt;/code&gt; otherwise. The base class version returns &lt;code&gt;​0​&lt;/code&gt;.</source>
          <target state="translated">2）返回 &lt;code&gt;​0​&lt;/code&gt; 成功， &lt;code&gt;-1&lt;/code&gt; 否则。基类版本返回 &lt;code&gt;​0​&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="66573d89c9a3008cd075232e504c463488cb532d" translate="yes" xml:space="preserve">
          <source>2) Returns a &lt;code&gt;bitset&amp;lt;N&amp;gt;&lt;/code&gt; containing the result of binary OR on corresponding pairs of bits of &lt;code&gt;lhs&lt;/code&gt; and &lt;code&gt;rhs&lt;/code&gt;.</source>
          <target state="translated">2）返回一个 &lt;code&gt;bitset&amp;lt;N&amp;gt;&lt;/code&gt; 其中包含在 &lt;code&gt;lhs&lt;/code&gt; 和 &lt;code&gt;rhs&lt;/code&gt; 的相应位对上的二进制或结果。</target>
        </trans-unit>
        <trans-unit id="3ba6959d321f862e02b03b004377d2fb52fb3818" translate="yes" xml:space="preserve">
          <source>2) Returns a &lt;code&gt;year&lt;/code&gt; whose year value is the negation of that of &lt;code&gt;*this&lt;/code&gt;.</source>
          <target state="translated">2）返回一个 &lt;code&gt;year&lt;/code&gt; 该年份的值等于 &lt;code&gt;*this&lt;/code&gt; 的年份。</target>
        </trans-unit>
        <trans-unit id="67b3079f22afff50aa564be73562ad64837f5523" translate="yes" xml:space="preserve">
          <source>2) Returns a default-constructed &lt;a href=&quot;../directory_iterator&quot;&gt;&lt;code&gt;directory_iterator&lt;/code&gt;&lt;/a&gt;, which serves as the end iterator. The argument is ignored.</source>
          <target state="translated">2）返回一个默认构造的&lt;a href=&quot;../directory_iterator&quot;&gt; &lt;code&gt;directory_iterator&lt;/code&gt; &lt;/a&gt;，它用作结束迭代器。该参数被忽略。</target>
        </trans-unit>
        <trans-unit id="e34c79461484febbceafa098cb208a0bb2cd9f56" translate="yes" xml:space="preserve">
          <source>2) Returns a default-constructed &lt;a href=&quot;../recursive_directory_iterator&quot;&gt;&lt;code&gt;recursive_directory_iterator&lt;/code&gt;&lt;/a&gt;, which serves as the end iterator. The argument is ignored.</source>
          <target state="translated">2）返回一个默认构造的&lt;a href=&quot;../recursive_directory_iterator&quot;&gt; &lt;code&gt;recursive_directory_iterator&lt;/code&gt; &lt;/a&gt;，它用作结束迭代器。该参数被忽略。</target>
        </trans-unit>
        <trans-unit id="47aed59f34ac1bd3202e0e3fc97867fbe31dbf46" translate="yes" xml:space="preserve">
          <source>2) Returns a numeric array of &lt;code&gt;bool&lt;/code&gt; containing elements each of which is obtained by applying the indicated comparison operator to &lt;code&gt;lhsv&lt;/code&gt; and the corresponding value of &lt;code&gt;rhs&lt;/code&gt; .</source>
          <target state="translated">2）返回 &lt;code&gt;bool&lt;/code&gt; 的数字数组，其中包含元素，每个元素都是通过将指示的比较运算符应用于 &lt;code&gt;lhsv&lt;/code&gt; 和相应的 &lt;code&gt;rhs&lt;/code&gt; 值而获得的。</target>
        </trans-unit>
        <trans-unit id="cc704d1c42183b0c73e7522741b146fa164f7f50" translate="yes" xml:space="preserve">
          <source>2) Returns a pointer to the beginning of the &lt;code&gt;array&lt;/code&gt;.</source>
          <target state="translated">2）返回一个指向 &lt;code&gt;array&lt;/code&gt; 开头的指针。</target>
        </trans-unit>
        <trans-unit id="350ac100a15d145bd87da82000afa024dd9fbd66" translate="yes" xml:space="preserve">
          <source>2) Returns a pointer to the current &lt;code&gt;&lt;a href=&quot;../match_results&quot;&gt;std::match_results&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">2）返回指向当前 &lt;code&gt;&lt;a href=&quot;../match_results&quot;&gt;std::match_results&lt;/a&gt;&lt;/code&gt; 的指针。</target>
        </trans-unit>
        <trans-unit id="506a20237313f2c82ad97328770e6018e02606f8" translate="yes" xml:space="preserve">
          <source>2) Returns a pointer to the end of the array &lt;code&gt;array&lt;/code&gt;.</source>
          <target state="translated">2）返回一个指向数组 &lt;code&gt;array&lt;/code&gt; 末尾的指针。</target>
        </trans-unit>
        <trans-unit id="8dae6713ed6251680c0d1f1ccf90281e5966181b" translate="yes" xml:space="preserve">
          <source>2) Returns a pointer to the object owned by &lt;code&gt;*this&lt;/code&gt;, i.e. &lt;code&gt;get()&lt;/code&gt;.</source>
          <target state="translated">2）返回指向 &lt;code&gt;*this&lt;/code&gt; 拥有的对象的指针，即 &lt;code&gt;get()&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="4f4fe41136a0d797668375e878d70d661fd05508" translate="yes" xml:space="preserve">
          <source>2) Returns a reference to the contained value.</source>
          <target state="translated">2)返回对包含值的引用。</target>
        </trans-unit>
        <trans-unit id="798b546c2dd4437c5b2cef49d04028fbf7e65964" translate="yes" xml:space="preserve">
          <source>2) Returns a reference to the first &lt;code&gt;std::chrono::tzdb&lt;/code&gt; object held by the &lt;code&gt;tzdb_list&lt;/code&gt; singleton. Equivalent to &lt;code&gt;std::chrono::get_tzdb_list().front()&lt;/code&gt;.</source>
          <target state="translated">2）返回对 &lt;code&gt;tzdb_list&lt;/code&gt; 单例所拥有的第一个 &lt;code&gt;std::chrono::tzdb&lt;/code&gt; 对象的引用。等效于 &lt;code&gt;std::chrono::get_tzdb_list().front()&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="588aa1d3a713e3c976e8b811a2ec64cec501ee66" translate="yes" xml:space="preserve">
          <source>2) Returns a value of type &lt;code&gt;&lt;a href=&quot;../time_base&quot;&gt;std::time_base::dateorder&lt;/a&gt;&lt;/code&gt;, which describes the default date format used by this locale (expected by &lt;code&gt;&lt;a href=&quot;get_date&quot;&gt;get_date()&lt;/a&gt;&lt;/code&gt; and produced by &lt;code&gt;&lt;a href=&quot;../../chrono/c/strftime&quot;&gt;std::strftime()&lt;/a&gt;&lt;/code&gt; with format specifier &lt;code&gt;'%x'&lt;/code&gt;).</source>
          <target state="translated">2）返回类型为 &lt;code&gt;&lt;a href=&quot;../time_base&quot;&gt;std::time_base::dateorder&lt;/a&gt;&lt;/code&gt; 的值，该值描述此语言环境使用的默认日期格式（由 &lt;code&gt;&lt;a href=&quot;get_date&quot;&gt;get_date()&lt;/a&gt;&lt;/code&gt; 期望，由 &lt;code&gt;&lt;a href=&quot;../../chrono/c/strftime&quot;&gt;std::strftime()&lt;/a&gt;&lt;/code&gt; ，格式说明符为 &lt;code&gt;'%x'&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="ea94db201f751ed9cb97ddd5bc62214b4ec98591" translate="yes" xml:space="preserve">
          <source>2) Returns an &lt;code&gt;&lt;a href=&quot;../../string/basic_string&quot;&gt;std::string&lt;/a&gt;&lt;/code&gt; holding, in each &lt;code&gt;char&lt;/code&gt; element, the number of digits in each group of the numeric output formatted by &lt;a href=&quot;../num_put/put&quot;&gt;&lt;code&gt;num_put::put()&lt;/code&gt;&lt;/a&gt; (and, therefore, &lt;a href=&quot;../../io/basic_ostream/operator_ltlt&quot;&gt;&lt;code&gt;basic_ostream::operator&amp;lt;&amp;lt;&lt;/code&gt;&lt;/a&gt;)</source>
          <target state="translated">2）返回一个 &lt;code&gt;&lt;a href=&quot;../../string/basic_string&quot;&gt;std::string&lt;/a&gt;&lt;/code&gt; ，在每个 &lt;code&gt;char&lt;/code&gt; 元素中，以&lt;a href=&quot;../num_put/put&quot;&gt; &lt;code&gt;num_put::put()&lt;/code&gt; &lt;/a&gt;格式（因此，&lt;a href=&quot;../../io/basic_ostream/operator_ltlt&quot;&gt; &lt;code&gt;basic_ostream::operator&amp;lt;&amp;lt;&lt;/code&gt; &lt;/a&gt;）格式化每组数字输出中的位数。</target>
        </trans-unit>
        <trans-unit id="77e59afe50d770c0295182779e46a141c9d1cf63" translate="yes" xml:space="preserve">
          <source>2) Returns an iterator one past the last element of the path. Dereferencing this iterator is undefined behavior.</source>
          <target state="translated">2)返回一个经过路径最后一个元素的迭代器。Dereferencing这个迭代器是未定义的行为。</target>
        </trans-unit>
        <trans-unit id="eb4f3ba0ac2bd3ce2cbe950ba8232429bb8eb092" translate="yes" xml:space="preserve">
          <source>2) Returns an iterator pointing to the first element that compares</source>
          <target state="translated">2)返回一个指向第一个元素的迭代器,该迭代器比较了</target>
        </trans-unit>
        <trans-unit id="72ed9d6d08781485225f3096900ed434af13eb8d" translate="yes" xml:space="preserve">
          <source>2) Returns an iterator to the character following the last character of the view. Equivalent to &lt;code&gt;sv.end()&lt;/code&gt;.</source>
          <target state="translated">2）将迭代器返回到视图的最后一个字符之后的字符。等效于 &lt;code&gt;sv.end()&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="d7cac8eb55cdb675a9398f7f2b4bdfa43a3c7ff9" translate="yes" xml:space="preserve">
          <source>2) Returns an iterator to the element following the last element of the span. Equivalent to &lt;code&gt;s.end()&lt;/code&gt;.</source>
          <target state="translated">2）将迭代器返回到范围的最后一个元素之后的元素。等效于 &lt;code&gt;s.end()&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="9bd6d6589506956e23a5e2a9a1ff6a171e4f6a54" translate="yes" xml:space="preserve">
          <source>2) Returns status of the entry, as if determined by a &lt;a href=&quot;../status&quot;&gt;symlink_status&lt;/a&gt; call (symlinks are not followed)</source>
          <target state="translated">2）返回条目的状态，就像由&lt;a href=&quot;../status&quot;&gt;symlink_status&lt;/a&gt;调用确定一样（不遵循符号链接）</target>
        </trans-unit>
        <trans-unit id="e54c83ae65a74a9b190132d6cd903e49997eb107" translate="yes" xml:space="preserve">
          <source>2) Returns the</source>
          <target state="translated">2)返回</target>
        </trans-unit>
        <trans-unit id="b8d3c6dce0679b1b8a24fe8e08411367b4c8f7a0" translate="yes" xml:space="preserve">
          <source>2) Returns the &amp;beta; distribution parameter. It is also known as the scale parameter. The default value is &lt;code&gt;1.0&lt;/code&gt;.</source>
          <target state="translated">2）返回&amp;beta;分布参数。也称为比例参数。默认值为 &lt;code&gt;1.0&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="0e39147e488e17ede3f2e916406eef021f8304a9" translate="yes" xml:space="preserve">
          <source>2) Returns the b distribution parameter (scale). The default value is &lt;code&gt;0.0&lt;/code&gt;.</source>
          <target state="translated">2）返回b分布参数（比例）。默认值为 &lt;code&gt;0.0&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="2a1c40654e49142d3480db2bab15da801206336f" translate="yes" xml:space="preserve">
          <source>2) Returns the b parameter. It defines the scale of the distribution. The default value is &lt;code&gt;1.0&lt;/code&gt;.</source>
          <target state="translated">2）返回b参数。它定义了分布的规模。默认值为 &lt;code&gt;1.0&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="4384308f7cc6a52ea5418f2de8024a3c3a3c2c6b" translate="yes" xml:space="preserve">
          <source>2) Returns the character to be used as the decimal separator between integer and fractional parts.</source>
          <target state="translated">2)返回整数和小数部分之间的小数分隔符。</target>
        </trans-unit>
        <trans-unit id="8961e82863ed0805c731bebeee2322f77d00efe2" translate="yes" xml:space="preserve">
          <source>2) Returns the character to be used as the separator between digit groups when parsing or formatting integers and integral parts of floating-point values.</source>
          <target state="translated">2)当解析或格式化整数和浮点值的积分部分时,返回数字组之间的分隔符。</target>
        </trans-unit>
        <trans-unit id="3e73b8cb6dc92025602bb774def09663c95d6b93" translate="yes" xml:space="preserve">
          <source>2) Returns the character to be used as the separator between digit groups when parsing or formatting the integral parts of monetary values.</source>
          <target state="translated">2)当解析或格式化货币价值的积分部分时,返回用于数字组之间的分隔符。</target>
        </trans-unit>
        <trans-unit id="4736b20e57c9d91e8b07f86c4a28b0f5b7549949" translate="yes" xml:space="preserve">
          <source>2) Returns the character to use as the decimal point separator in monetary I/O if the format uses fractions (that is, if &lt;code&gt;&lt;a href=&quot;frac_digits&quot;&gt;do_frac_digits()&lt;/a&gt;&lt;/code&gt; is greater than zero). For typical U.S. locales, it is the character &lt;code&gt;'.'&lt;/code&gt; (or &lt;code&gt;L'.'&lt;/code&gt;)</source>
          <target state="translated">2）如果格式使用小数（即，如果 &lt;code&gt;&lt;a href=&quot;frac_digits&quot;&gt;do_frac_digits()&lt;/a&gt;&lt;/code&gt; 大于零），则返回用作货币I / O中小数点分隔符的字符。对于典型的美国语言环境，它是字符 &lt;code&gt;'.'&lt;/code&gt; （或 &lt;code&gt;L'.'&lt;/code&gt; ）</target>
        </trans-unit>
        <trans-unit id="b554cfad13c768d6c6936e57bea479631302cc17" translate="yes" xml:space="preserve">
          <source>2) Returns the deviation &amp;sigma; distribution parameter. The default value is &lt;code&gt;1.0&lt;/code&gt;.</source>
          <target state="translated">2）返回偏差&amp;sigma;分布参数。默认值为 &lt;code&gt;1.0&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="a16f7e36cd153c7134e59830023018cf12b3111a" translate="yes" xml:space="preserve">
          <source>2) Returns the k distribution parameter. It defines the number of desired outcomes. The default value is &lt;code&gt;1&lt;/code&gt;.</source>
          <target state="translated">2）返回k分布参数。它定义了所需结果的数量。默认值为 &lt;code&gt;1&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="b21a8bb9b9b3a04278f3900bbbd3b199805e705d" translate="yes" xml:space="preserve">
          <source>2) Returns the list of probability densities at the boundaries of the intervals.</source>
          <target state="translated">2)返回区间边界的概率密度列表。</target>
        </trans-unit>
        <trans-unit id="26a8967f9cce057e3e53621ae15b1f2057d7a692" translate="yes" xml:space="preserve">
          <source>2) Returns the list of probability densities of the intervals.</source>
          <target state="translated">2)返回区间的概率密度列表。</target>
        </trans-unit>
        <trans-unit id="754e3d9a4f9435aca8034f9cad895b0773aa5893" translate="yes" xml:space="preserve">
          <source>2) Returns the log-deviation s distribution parameter. The default value is &lt;code&gt;1.0&lt;/code&gt;.</source>
          <target state="translated">2）返回log-deviation的分布参数。默认值为 &lt;code&gt;1.0&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="569144734182803819c2b1f446596d1d1bc31778" translate="yes" xml:space="preserve">
          <source>2) Returns the maximum value that &lt;code&gt;do_length(state, from, from_end, 1)&lt;/code&gt; can return for any valid range &lt;code&gt;[from, from_end)&lt;/code&gt; and any valid &lt;code&gt;state&lt;/code&gt;.</source>
          <target state="translated">2）返回 &lt;code&gt;do_length(state, from, from_end, 1)&lt;/code&gt; 对于任何有效范围 &lt;code&gt;[from, from_end)&lt;/code&gt; 和任何有效 &lt;code&gt;state&lt;/code&gt; 可以返回的最大值。</target>
        </trans-unit>
        <trans-unit id="2f8e55cc906769114f45735cef4925644dc0a387" translate="yes" xml:space="preserve">
          <source>2) Returns the n (the second degree of freedom) distribution parameter. The default value is &lt;code&gt;1.0&lt;/code&gt;.</source>
          <target state="translated">2）返回n（第二自由度）分布参数。默认值为 &lt;code&gt;1.0&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="630d3485cc733125051ccc35d473642df2403363" translate="yes" xml:space="preserve">
          <source>2) Returns the native-format representation of the pathname by reference.</source>
          <target state="translated">2)通过引用返回路径名的本机格式表示。</target>
        </trans-unit>
        <trans-unit id="a7208a0a65b27afbe2949c62cf9109c3f234ff6e" translate="yes" xml:space="preserve">
          <source>2) Returns the number of digits to be displayed after the decimal point when printing monetary values</source>
          <target state="translated">2)打印货币价值时,返回小数点后显示的位数。</target>
        </trans-unit>
        <trans-unit id="8939e2e3255d359791ad89a0ba7144c75377fcbc" translate="yes" xml:space="preserve">
          <source>2) Returns the number of elements with key that compares equivalent to the specified argument &lt;code&gt;x&lt;/code&gt;. This overload only participates in overload resolution if the qualified-id &lt;code&gt;Hash::transparent_key_equal&lt;/code&gt; is valid and denotes a type. This assumes that such Hash is callable with both K and Key type, and that its key_equal is transparent, which, together, allows calling this function without constructing an instance of &lt;code&gt;Key&lt;/code&gt;.</source>
          <target state="translated">2）返回键值等于指定参数 &lt;code&gt;x&lt;/code&gt; 的元素数。仅当qualified-id &lt;code&gt;Hash::transparent_key_equal&lt;/code&gt; 有效且表示类型时，此重载才参与重载解析。假设这种Hash可以同时使用K和Key类型进行调用，并且其key_equal是透明的，这一起允许在不构造 &lt;code&gt;Key&lt;/code&gt; 实例的情况下调用此函数。</target>
        </trans-unit>
        <trans-unit id="9886b36293703ed26c455b85b7846e216f3a6fe0" translate="yes" xml:space="preserve">
          <source>2) Returns the number of elements with key that compares equivalent to the value &lt;code&gt;x&lt;/code&gt;. This overload only participates in overload resolution if the qualified-id &lt;code&gt;Compare::is_transparent&lt;/code&gt; is valid and denotes a type. They allow calling this function without constructing an instance of &lt;code&gt;Key&lt;/code&gt;.</source>
          <target state="translated">2）返回键值等于 &lt;code&gt;x&lt;/code&gt; 的元素数。仅当合格ID &lt;code&gt;Compare::is_transparent&lt;/code&gt; 有效且表示类型时，此重载才参与重载解析。它们允许在不构造 &lt;code&gt;Key&lt;/code&gt; 实例的情况下调用此函数。</target>
        </trans-unit>
        <trans-unit id="3226377a15a6ccddbefc7c046fcde51186e3a0fb" translate="yes" xml:space="preserve">
          <source>2) Returns the number of files and directories that were deleted (which may be zero if &lt;code&gt;p&lt;/code&gt; did not exist to begin with). The overload that takes &lt;code&gt;error_code&amp;amp;&lt;/code&gt; argument returns &lt;code&gt;static_cast&amp;lt;&lt;a href=&quot;../types/integer&quot;&gt;std::uintmax_t&lt;/a&gt;&amp;gt;(-1)&lt;/code&gt; on error.</source>
          <target state="translated">2）返回已删除的文件和目录的数量（如果 &lt;code&gt;p&lt;/code&gt; 开头不存在，则可能为零）。接受 &lt;code&gt;error_code&amp;amp;&lt;/code&gt; 参数的重载在错误时返回 &lt;code&gt;static_cast&amp;lt;&lt;a href=&quot;../types/integer&quot;&gt;std::uintmax_t&lt;/a&gt;&amp;gt;(-1)&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="2ada8a9006c100c5271456adbb709585239f2993" translate="yes" xml:space="preserve">
          <source>2) Returns the pattern that determines the grouping of the digits in the monetary output, with the same exact meaning as &lt;code&gt;&lt;a href=&quot;../numpunct/grouping&quot;&gt;std::numpunct::do_grouping&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">2）返回确定货币输出中数字分组的模式，其确切含义与 &lt;code&gt;&lt;a href=&quot;../numpunct/grouping&quot;&gt;std::numpunct::do_grouping&lt;/a&gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="32130ac3baff2871f6e8f13f30c7ab4d36aeca4a" translate="yes" xml:space="preserve">
          <source>2) Returns the pointer to the current character (</source>
          <target state="translated">2)返回当前字符的指针(</target>
        </trans-unit>
        <trans-unit id="f5360db51f28dbcd38bdf26ba565406cd6213bcb" translate="yes" xml:space="preserve">
          <source>2) Returns the stored &lt;code&gt;std::chrono::day&lt;/code&gt; value.</source>
          <target state="translated">2）返回存储的 &lt;code&gt;std::chrono::day&lt;/code&gt; 值。</target>
        </trans-unit>
        <trans-unit id="cad58dfef066540adfa02f66b3a706acd79aa932" translate="yes" xml:space="preserve">
          <source>2) Returns the stored &lt;code&gt;std::chrono::month&lt;/code&gt; value.</source>
          <target state="translated">2）返回存储的 &lt;code&gt;std::chrono::month&lt;/code&gt; 值。</target>
        </trans-unit>
        <trans-unit id="c6aba27c3fb9f5c674debbeb61e48936205d14bd" translate="yes" xml:space="preserve">
          <source>2) Returns the string used as the currency identifier by this locale. If &lt;code&gt;International&lt;/code&gt; (the second template parameter of &lt;code&gt;std::moneypunct&lt;/code&gt;) is &lt;code&gt;false&lt;/code&gt;, the identifier is usually a single (wide) character, such as &lt;code&gt;&quot;￥&quot;&lt;/code&gt; or &lt;code&gt;&quot;$&quot;&lt;/code&gt;. If &lt;code&gt;International&lt;/code&gt; is &lt;code&gt;true&lt;/code&gt;, the identifier is usually a four-character string holding the three-character &lt;a href=&quot;https://en.wikipedia.org/wiki/ISO_4217&quot;&gt;ISO 4217&lt;/a&gt; currency code followed by a space (&lt;code&gt;&quot;JPY &quot;&lt;/code&gt; or &lt;code&gt;&quot;USD &quot;&lt;/code&gt;)</source>
          <target state="translated">2）返回此语言环境用作货币标识符的字符串。如果 &lt;code&gt;International&lt;/code&gt; （ &lt;code&gt;std::moneypunct&lt;/code&gt; 的第二个模板参数）为 &lt;code&gt;false&lt;/code&gt; ，则标识符通常为单个（宽）字符，例如 &lt;code&gt;&quot;￥&quot;&lt;/code&gt; 或 &lt;code&gt;&quot;$&quot;&lt;/code&gt; 。如果 &lt;code&gt;International&lt;/code&gt; 为 &lt;code&gt;true&lt;/code&gt; ，则标识符通常是四个字符的字符串，其中包含三个字符的&lt;a href=&quot;https://en.wikipedia.org/wiki/ISO_4217&quot;&gt;ISO 4217&lt;/a&gt;货币代码，后跟一个空格（ &lt;code&gt;&quot;JPY &quot;&lt;/code&gt; 或 &lt;code&gt;&quot;USD &quot;&lt;/code&gt; ）</target>
        </trans-unit>
        <trans-unit id="e7887877b659c0a6b382ef0cf51d12c66fa1c192" translate="yes" xml:space="preserve">
          <source>2) Returns the t distribution parameter. It identifies the number of trials. The default value is &lt;code&gt;1&lt;/code&gt;.</source>
          <target state="translated">2）返回t分布参数。它标识试验次数。默认值为 &lt;code&gt;1&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="2b66ebd4cece8d564e6d69a38f8b8cf7bb39a807" translate="yes" xml:space="preserve">
          <source>2) Returns the value of the &lt;a href=&quot;fe_round&quot;&gt;floating point rounding macro&lt;/a&gt; that corresponds to the current rounding direction.</source>
          <target state="translated">2）返回与当前舍入方向相对应的&lt;a href=&quot;fe_round&quot;&gt;浮点舍入宏&lt;/a&gt;的值。</target>
        </trans-unit>
        <trans-unit id="04ebaa70e4b5ae1242601266262488efa93190b5" translate="yes" xml:space="preserve">
          <source>2) Returns true if any of the bits in &lt;code&gt;*this&lt;/code&gt; and &lt;code&gt;rhs&lt;/code&gt; are not equal.</source>
          <target state="translated">2）如果 &lt;code&gt;*this&lt;/code&gt; 和 &lt;code&gt;rhs&lt;/code&gt; 中的任何位不相等，则返回true 。</target>
        </trans-unit>
        <trans-unit id="684706ea115b5dd7bb203b7172a34dcaa9b23da0" translate="yes" xml:space="preserve">
          <source>2) Rvalue overload is deleted to prevent taking the address of &lt;code&gt;const&lt;/code&gt; rvalues.</source>
          <target state="translated">2）删除右值重载，以防止获取 &lt;code&gt;const&lt;/code&gt; 右值的地址。</target>
        </trans-unit>
        <trans-unit id="d86238bbc8e36a925c9f80302fa4069c3f0285ea" translate="yes" xml:space="preserve">
          <source>2) Same as (1) but may also propagate exceptions thrown by &lt;code&gt;pred&lt;/code&gt;</source>
          <target state="translated">2）与（1）相同，但也可能传播 &lt;code&gt;pred&lt;/code&gt; 抛出的异常</target>
        </trans-unit>
        <trans-unit id="57e247ebdf60c709e9ae22b0dda69f06a24842e0" translate="yes" xml:space="preserve">
          <source>2) Same as (1) but returns &lt;code&gt;local_days&lt;/code&gt; instead. Equivalent to &lt;code&gt;return local_days(sys_days(*this).time_since_epoch());&lt;/code&gt;.</source>
          <target state="translated">2）与（1）相同，但返回 &lt;code&gt;local_days&lt;/code&gt; 。等效于 &lt;code&gt;return local_days(sys_days(*this).time_since_epoch());&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="787ba623083b654803cc944b335d98a13f139e8d" translate="yes" xml:space="preserve">
          <source>2) Same as (1) except that the behavior is as if the POSIX &lt;a href=&quot;http://pubs.opengroup.org/onlinepubs/9699919799/functions/lstat.html&quot;&gt;lstat&lt;/a&gt; is used (symlinks are not followed):</source>
          <target state="translated">2）与（1）相同，除了行为类似于使用POSIX &lt;a href=&quot;http://pubs.opengroup.org/onlinepubs/9699919799/functions/lstat.html&quot;&gt;lstat&lt;/a&gt;（不遵循符号链接）：</target>
        </trans-unit>
        <trans-unit id="9f60da33f6d9ebea7c44566f862bef1b340c47b0" translate="yes" xml:space="preserve">
          <source>2) Same as (1) except that the behavior is as if the POSIX &lt;a href=&quot;https://pubs.opengroup.org/onlinepubs/9699919799/functions/lstat.html&quot;&gt;lstat&lt;/a&gt; is used (symlinks are not followed):</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1af966e118b06a72069dac8f7adf8f4ef42e3077" translate="yes" xml:space="preserve">
          <source>2) Same as (1), but executed according to &lt;code&gt;policy&lt;/code&gt;. This overload does not participate in overload resolution unless &lt;code&gt;&lt;a href=&quot;../algorithm/is_execution_policy&quot;&gt;std::is_execution_policy_v&lt;/a&gt;&amp;lt;&lt;a href=&quot;../types/decay&quot;&gt;std::decay_t&lt;/a&gt;&amp;lt;ExecutionPolicy&amp;gt;&amp;gt;&lt;/code&gt; is true</source>
          <target state="translated">2）与（1）相同，但根据 &lt;code&gt;policy&lt;/code&gt; 执行。除非 &lt;code&gt;&lt;a href=&quot;../algorithm/is_execution_policy&quot;&gt;std::is_execution_policy_v&lt;/a&gt;&amp;lt;&lt;a href=&quot;../types/decay&quot;&gt;std::decay_t&lt;/a&gt;&amp;lt;ExecutionPolicy&amp;gt;&amp;gt;&lt;/code&gt; 为true，否则此重载不参与重载解决方案</target>
        </trans-unit>
        <trans-unit id="c8683577e7b56386701932faf733e071045d7c48" translate="yes" xml:space="preserve">
          <source>2) Same as (1), but executed according to &lt;code&gt;policy&lt;/code&gt;. This overload does not participate in overload resolution unless &lt;code&gt;&lt;a href=&quot;../algorithm/is_execution_policy&quot;&gt;std::is_execution_policy_v&lt;/a&gt;&amp;lt;&lt;a href=&quot;../types/decay&quot;&gt;std::decay_t&lt;/a&gt;&amp;lt;ExecutionPolicy&amp;gt;&amp;gt;&lt;/code&gt; is true.</source>
          <target state="translated">2）与（1）相同，但根据 &lt;code&gt;policy&lt;/code&gt; 执行。除非 &lt;code&gt;&lt;a href=&quot;../algorithm/is_execution_policy&quot;&gt;std::is_execution_policy_v&lt;/a&gt;&amp;lt;&lt;a href=&quot;../types/decay&quot;&gt;std::decay_t&lt;/a&gt;&amp;lt;ExecutionPolicy&amp;gt;&amp;gt;&lt;/code&gt; 为true，否则此重载不会参与重载解决方案。</target>
        </trans-unit>
        <trans-unit id="1654a4224b07ce94f8df3a08a02ac31f28af9634" translate="yes" xml:space="preserve">
          <source>2) Same as (1), but executed according to &lt;code&gt;policy&lt;/code&gt;. This overload does not participate in overload resolution unless &lt;code&gt;&lt;a href=&quot;is_execution_policy&quot;&gt;std::is_execution_policy_v&lt;/a&gt;&amp;lt;&lt;a href=&quot;../types/decay&quot;&gt;std::decay_t&lt;/a&gt;&amp;lt;ExecutionPolicy&amp;gt;&amp;gt;&lt;/code&gt; is true</source>
          <target state="translated">2）与（1）相同，但根据 &lt;code&gt;policy&lt;/code&gt; 执行。除非 &lt;code&gt;&lt;a href=&quot;is_execution_policy&quot;&gt;std::is_execution_policy_v&lt;/a&gt;&amp;lt;&lt;a href=&quot;../types/decay&quot;&gt;std::decay_t&lt;/a&gt;&amp;lt;ExecutionPolicy&amp;gt;&amp;gt;&lt;/code&gt; 为true，否则此重载不参与重载解决方案</target>
        </trans-unit>
        <trans-unit id="8521ba6b576268e0c550134ea77e3e28433962a8" translate="yes" xml:space="preserve">
          <source>2) Same as (1), but executed according to &lt;code&gt;policy&lt;/code&gt;. This overload only participates in overload resolution if &lt;code&gt;&lt;a href=&quot;is_execution_policy&quot;&gt;std::is_execution_policy_v&lt;/a&gt;&amp;lt;&lt;a href=&quot;../types/decay&quot;&gt;std::decay_t&lt;/a&gt;&amp;lt;ExecutionPolicy&amp;gt;&amp;gt;&lt;/code&gt; is true</source>
          <target state="translated">2）与（1）相同，但根据 &lt;code&gt;policy&lt;/code&gt; 执行。如果 &lt;code&gt;&lt;a href=&quot;is_execution_policy&quot;&gt;std::is_execution_policy_v&lt;/a&gt;&amp;lt;&lt;a href=&quot;../types/decay&quot;&gt;std::decay_t&lt;/a&gt;&amp;lt;ExecutionPolicy&amp;gt;&amp;gt;&lt;/code&gt; 为true，则此重载仅参与重载解决方案</target>
        </trans-unit>
        <trans-unit id="2124cbf53740fd55ccaf10707b644f6d1c12182c" translate="yes" xml:space="preserve">
          <source>2) Same as (1), but executed according to &lt;code&gt;policy&lt;/code&gt;. This overload only participates in overload resolution if &lt;code&gt;&lt;a href=&quot;is_execution_policy&quot;&gt;std::is_execution_policy_v&lt;/a&gt;&amp;lt;&lt;a href=&quot;../types/decay&quot;&gt;std::decay_t&lt;/a&gt;&amp;lt;ExecutionPolicy&amp;gt;&amp;gt;&lt;/code&gt; is true.</source>
          <target state="translated">2）与（1）相同，但根据 &lt;code&gt;policy&lt;/code&gt; 执行。如果 &lt;code&gt;&lt;a href=&quot;is_execution_policy&quot;&gt;std::is_execution_policy_v&lt;/a&gt;&amp;lt;&lt;a href=&quot;../types/decay&quot;&gt;std::decay_t&lt;/a&gt;&amp;lt;ExecutionPolicy&amp;gt;&amp;gt;&lt;/code&gt; 为true，则此重载仅参与重载解决方案。</target>
        </trans-unit>
        <trans-unit id="ebe57bded2a9a79d759a27216ef62cd996223a04" translate="yes" xml:space="preserve">
          <source>2) Same as (1), but may also fail spuriously.</source>
          <target state="translated">2)同(1),但也可能虚假失败。</target>
        </trans-unit>
        <trans-unit id="fb44f4f0eddcc4027b2c0e9421a0ee805eb12d71" translate="yes" xml:space="preserve">
          <source>2) Same as (1), but returns &lt;code&gt;local_days&lt;/code&gt; instead of &lt;code&gt;sys_days&lt;/code&gt;. Equivalent to &lt;code&gt;local_days(sys_days(*this).time_since_epoch())&lt;/code&gt;.</source>
          <target state="translated">2）与（1）相同，但返回 &lt;code&gt;local_days&lt;/code&gt; 而不是 &lt;code&gt;sys_days&lt;/code&gt; 。等效于 &lt;code&gt;local_days(sys_days(*this).time_since_epoch())&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="a008aea8c4be4287c7f35d50f7f1955a8a9ab4d8" translate="yes" xml:space="preserve">
          <source>2) Same as (1), but the conversion is also &lt;code&gt;noexcept&lt;/code&gt;.</source>
          <target state="translated">2）与（1）相同，但转换也为 &lt;code&gt;noexcept&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="2b819c4b56ae1847eca755461645ce664da870ec" translate="yes" xml:space="preserve">
          <source>2) Same as (1), but uses &lt;code&gt;&lt;a href=&quot;is_constructible&quot;&gt;std::is_trivially_constructible&lt;/a&gt;&amp;lt;T, T&amp;amp;&amp;amp;&amp;gt;&lt;/code&gt;.</source>
          <target state="translated">2）与（1）相同，但使用 &lt;code&gt;&lt;a href=&quot;is_constructible&quot;&gt;std::is_trivially_constructible&lt;/a&gt;&amp;lt;T, T&amp;amp;&amp;amp;&amp;gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="158d4174fc7bb0b591092979e26bc0885b332afe" translate="yes" xml:space="preserve">
          <source>2) Same as (1), but uses &lt;code&gt;&lt;a href=&quot;is_constructible&quot;&gt;std::is_trivially_constructible&lt;/a&gt;&amp;lt;T, const T&amp;amp;&amp;gt;&lt;/code&gt;.</source>
          <target state="translated">2）与（1）相同，但使用 &lt;code&gt;&lt;a href=&quot;is_constructible&quot;&gt;std::is_trivially_constructible&lt;/a&gt;&amp;lt;T, const T&amp;amp;&amp;gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="2455df7b2175063ab628cedb488b1ec74f8ce49e" translate="yes" xml:space="preserve">
          <source>2) Same as (1), but uses &lt;code&gt;comp&lt;/code&gt; to compare the values.</source>
          <target state="translated">2）与（1）相同，但使用 &lt;code&gt;comp&lt;/code&gt; 比较值。</target>
        </trans-unit>
        <trans-unit id="39d0d7b7ea9ff9127aed6deb2d0c6e2be24394f1" translate="yes" xml:space="preserve">
          <source>2) Same as (1), except that the attributes of the new directory are copied from &lt;code&gt;existing_p&lt;/code&gt; (which must be a directory that exists). It is OS-dependent which attributes are copied: on POSIX systems, the attributes are copied as if by</source>
          <target state="translated">2）与（1）相同，不同之处在于新目录的属性是从 &lt;code&gt;existing_p&lt;/code&gt; （必须是存在的目录）复制的。取决于属性的是复制哪些属性：在POSIX系统上，属性的复制就像通过</target>
        </trans-unit>
        <trans-unit id="2341cc9c6fc2861406e421041432094a4694bfee" translate="yes" xml:space="preserve">
          <source>2) Same as 1), but uses &lt;code&gt;&lt;a href=&quot;is_assignable&quot;&gt;std::is_trivially_assignable&lt;/a&gt;&amp;lt;T&amp;amp;, T&amp;amp;&amp;amp;&amp;gt;&lt;/code&gt;</source>
          <target state="translated">2）与1）相同，但使用 &lt;code&gt;&lt;a href=&quot;is_assignable&quot;&gt;std::is_trivially_assignable&lt;/a&gt;&amp;lt;T&amp;amp;, T&amp;amp;&amp;amp;&amp;gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="5b7a7f1c4d66140d59703ce2be9bd8d7b0dd5ce5" translate="yes" xml:space="preserve">
          <source>2) Same as 1), but uses &lt;code&gt;&lt;a href=&quot;is_assignable&quot;&gt;std::is_trivially_assignable&lt;/a&gt;&amp;lt;T&amp;amp;, const T&amp;amp;&amp;gt;&lt;/code&gt;</source>
          <target state="translated">2）与1）相同，但使用 &lt;code&gt;&lt;a href=&quot;is_assignable&quot;&gt;std::is_trivially_assignable&lt;/a&gt;&amp;lt;T&amp;amp;, const T&amp;amp;&amp;gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="d88bfbdbb36791f1cf47a00b69cd034575faa322" translate="yes" xml:space="preserve">
          <source>2) Same as &lt;code&gt;getline(input, str, input.widen('\n'))&lt;/code&gt;, that is, the default delimiter is the endline character.</source>
          <target state="translated">2）与 &lt;code&gt;getline(input, str, input.widen('\n'))&lt;/code&gt; ，也就是说，默认的分隔符是结束符。</target>
        </trans-unit>
        <trans-unit id="2a60510c8e118ec323113052c9e5cc32ed9184d2" translate="yes" xml:space="preserve">
          <source>2) Same as &lt;code&gt;ostreambuf_iterator(stream.rdbuf())&lt;/code&gt;</source>
          <target state="translated">2）与 &lt;code&gt;ostreambuf_iterator(stream.rdbuf())&lt;/code&gt; 相同</target>
        </trans-unit>
        <trans-unit id="ae067033883014113425e5c4744db861b7d52f7a" translate="yes" xml:space="preserve">
          <source>2) Same, but &lt;code&gt;type&lt;/code&gt; cannot include parentheses:</source>
          <target state="translated">2）相同，但 &lt;code&gt;type&lt;/code&gt; 不能包含括号：</target>
        </trans-unit>
        <trans-unit id="6d22cf7ab9fd315890290eaf83df26949f2ed10d" translate="yes" xml:space="preserve">
          <source>2) Searches for the file in implementation-defined manner. The intent of this syntax is to search for the files that are not controlled by the implementation. Typical implementations first search the directory where the current file resides and, only if the file is not found, search the standard include directories as with (1).</source>
          <target state="translated">2)以实现定义的方式搜索文件。这种语法的目的是搜索不受实现控制的文件。典型的实现首先搜索当前文件所在的目录,只有在没有找到文件的情况下,才会像(1)那样搜索标准的包含目录。</target>
        </trans-unit>
        <trans-unit id="83e5006ee900293f9b17ba0a56fb606c36cc67ec" translate="yes" xml:space="preserve">
          <source>2) Seeds the underlying engine with the seed value &lt;code&gt;s&lt;/code&gt;. Effectively calls &lt;code&gt;e.seed(value)&lt;/code&gt;, where &lt;code&gt;e&lt;/code&gt; is the underlying engine.</source>
          <target state="translated">2）使用种子值 &lt;code&gt;s&lt;/code&gt; 播种基础引擎。有效地调用 &lt;code&gt;e.seed(value)&lt;/code&gt; ，其中 &lt;code&gt;e&lt;/code&gt; 是基础引擎。</target>
        </trans-unit>
        <trans-unit id="070208aa54c5c3954acc1133746650d7456b1255" translate="yes" xml:space="preserve">
          <source>2) Sets file permissions to &lt;code&gt;perm&lt;/code&gt;.</source>
          <target state="translated">2）将文件权限设置为 &lt;code&gt;perm&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="4d8dff5e60439f19fbad0a1038c513b3b1664a7a" translate="yes" xml:space="preserve">
          <source>2) Sets file type to &lt;code&gt;type&lt;/code&gt;.</source>
          <target state="translated">2）将文件类型设置为 &lt;code&gt;type&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="cf5a1b8f6cba4055279c48e656c448a9fd8e8e35" translate="yes" xml:space="preserve">
          <source>2) Sets the &lt;code&gt;floatfield&lt;/code&gt; of the stream &lt;code&gt;str&lt;/code&gt; to &lt;code&gt;scientific&lt;/code&gt; as if by calling &lt;code&gt;str.setf(&lt;a href=&quot;../ios_base/fmtflags&quot;&gt;std::ios_base::scientific&lt;/a&gt;, &lt;a href=&quot;../ios_base/fmtflags&quot;&gt;std::ios_base::floatfield&lt;/a&gt;)&lt;/code&gt;</source>
          <target state="translated">2）像调用 &lt;code&gt;str.setf(&lt;a href=&quot;../ios_base/fmtflags&quot;&gt;std::ios_base::scientific&lt;/a&gt;, &lt;a href=&quot;../ios_base/fmtflags&quot;&gt;std::ios_base::floatfield&lt;/a&gt;)&lt;/code&gt; &lt;a href=&quot;../ios_base/fmtflags&quot;&gt;std :: ios_base :: scientific&lt;/a&gt;，&lt;a href=&quot;../ios_base/fmtflags&quot;&gt;std :: ios_base :: floatfield&lt;/a&gt;） &lt;code&gt;floatfield&lt;/code&gt; ，将流 &lt;code&gt;str&lt;/code&gt; 的floatfield设置为 &lt;code&gt;scientific&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="99f73e99b187c8783f2c722bce29a1143d224da1" translate="yes" xml:space="preserve">
          <source>2) Sets the associated parameter set to &lt;code&gt;params&lt;/code&gt;.</source>
          <target state="translated">2）将关联的参数集设置为 &lt;code&gt;params&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="a2e381e457457391dbb433f5bac59ef2a2057289" translate="yes" xml:space="preserve">
          <source>2) Sets the associated stream buffer to &lt;code&gt;sb&lt;/code&gt;. The error state is cleared by calling &lt;code&gt;&lt;a href=&quot;clear&quot;&gt;clear()&lt;/a&gt;&lt;/code&gt;. Returns the associated stream buffer before the operation. If there is no associated stream buffer, returns a null pointer.</source>
          <target state="translated">2）将关联的流缓冲区设置为 &lt;code&gt;sb&lt;/code&gt; 。通过调用 &lt;code&gt;&lt;a href=&quot;clear&quot;&gt;clear()&lt;/a&gt;&lt;/code&gt; 清除错误状态。返回操作之前的关联流缓冲区。如果没有关联的流缓冲区，则返回空指针。</target>
        </trans-unit>
        <trans-unit id="3cd279df430bb5b0e476b556bd51490847c7b224" translate="yes" xml:space="preserve">
          <source>2) Sets the bit at position &lt;code&gt;pos&lt;/code&gt; to &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">2）将位置 &lt;code&gt;pos&lt;/code&gt; 的位设置为 &lt;code&gt;false&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="b8b32bc3c8c48c3006f1655e8b5b333cd56c1c36" translate="yes" xml:space="preserve">
          <source>2) Sets the bit at position &lt;code&gt;pos&lt;/code&gt; to the value &lt;code&gt;value&lt;/code&gt;.</source>
          <target state="translated">2）将位置 &lt;code&gt;pos&lt;/code&gt; 的位设置为值 &lt;code&gt;value&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="c47fc2c83cdaef8884ec3896c7e1ab60732f5c0e" translate="yes" xml:space="preserve">
          <source>2) Sets the bits to the result of binary OR on corresponding pairs of bits of &lt;code&gt;*this&lt;/code&gt; and &lt;code&gt;other&lt;/code&gt;.</source>
          <target state="translated">2）将位设置为 &lt;code&gt;*this&lt;/code&gt; 和 &lt;code&gt;other&lt;/code&gt; 的对应位对上的二进制或结果。</target>
        </trans-unit>
        <trans-unit id="daafd4dc2b436ef899267802eb37328bbf36e368" translate="yes" xml:space="preserve">
          <source>2) Sets the current tied stream to &lt;code&gt;str&lt;/code&gt;. Returns the tied stream before the operation. If there is no tied stream, a null pointer is returned.</source>
          <target state="translated">2）将当前绑定流设置为 &lt;code&gt;str&lt;/code&gt; 。返回操作之前的绑定流。如果没有绑定的流，则返回空指针。</target>
        </trans-unit>
        <trans-unit id="77ef7fdb4c58ab14628d94dcbe6a4c1c1b4ed5c8" translate="yes" xml:space="preserve">
          <source>2) Sets the exception mask to &lt;code&gt;except&lt;/code&gt;.</source>
          <target state="translated">2）将例外掩码设置为 &lt;code&gt;except&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="fe88e0919da14b89eabe35a9907df557c195fc76" translate="yes" xml:space="preserve">
          <source>2) Sets the field width to the given one. Returns the previous field width.</source>
          <target state="translated">2)将字段宽度设置为给定的字段宽度。返回之前的字段宽度。</target>
        </trans-unit>
        <trans-unit id="89465e990db1d146cca41beafec452ffb5abc825" translate="yes" xml:space="preserve">
          <source>2) Sets the imaginary part to &lt;code&gt;value&lt;/code&gt;.</source>
          <target state="translated">2）将虚部设置为 &lt;code&gt;value&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="b62840a247fe057f7a18395f3da8e01892fcb3b0" translate="yes" xml:space="preserve">
          <source>2) Sets the maximum load factor to &lt;code&gt;ml&lt;/code&gt;.</source>
          <target state="translated">2）将最大负载系数设置为 &lt;code&gt;ml&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="60a12819ebc66ac9d400a09d83bc6795b16636bc" translate="yes" xml:space="preserve">
          <source>2) Sets the precision to the given one. Returns the previous precision.</source>
          <target state="translated">2)将精度设置为给定精度。返回之前的精度。</target>
        </trans-unit>
        <trans-unit id="d6f51212b959249e62b31b51142e82969ad6fe1c" translate="yes" xml:space="preserve">
          <source>2) Sets the real part to &lt;code&gt;value&lt;/code&gt;.</source>
          <target state="translated">2）将实部设置为 &lt;code&gt;value&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="a1f9add7f2592687e514ad4fdcadfd417e5bed21" translate="yes" xml:space="preserve">
          <source>2) Similar to (1), but it yields a specialization of &lt;a href=&quot;https://en.cppreference.com/mwiki/index.php?title=cpp/ranges/subrange&amp;amp;action=edit&amp;amp;redlink=1&quot;&gt;&lt;code&gt;ranges::subrange&lt;/code&gt;&lt;/a&gt; when the the same condition is met.</source>
          <target state="translated">2）与（1）类似，但是当满足相同条件时，它会产生&lt;a href=&quot;https://en.cppreference.com/mwiki/index.php?title=cpp/ranges/subrange&amp;amp;action=edit&amp;amp;redlink=1&quot;&gt; &lt;code&gt;ranges::subrange&lt;/code&gt; &lt;/a&gt;的特殊化。</target>
        </trans-unit>
        <trans-unit id="10aec6917ed97b26abd3c7faee4f84f08daa3b28" translate="yes" xml:space="preserve">
          <source>2) Specialization for pointers. If &lt;code&gt;T&lt;/code&gt; is an object type, provides a member type &lt;code&gt;value_type&lt;/code&gt; equal to &lt;code&gt;&lt;a href=&quot;../types/remove_cv&quot;&gt;std::remove_cv_t&lt;/a&gt;&amp;lt;T&amp;gt;&lt;/code&gt;. Otherwise, there is no member &lt;code&gt;value_type&lt;/code&gt;.</source>
          <target state="translated">2）指针的专业化。如果 &lt;code&gt;T&lt;/code&gt; 是对象类型，则提供等于 &lt;code&gt;&lt;a href=&quot;../types/remove_cv&quot;&gt;std::remove_cv_t&lt;/a&gt;&amp;lt;T&amp;gt;&lt;/code&gt; &amp;lt;T&amp;gt;的成员类型 &lt;code&gt;value_type&lt;/code&gt; 。否则，没有成员 &lt;code&gt;value_type&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="45c18ec003fcf5c20890b10f5b1f5fbdbd2e3fbd" translate="yes" xml:space="preserve">
          <source>2) Specialization for pointers. Provides a member type &lt;code&gt;difference_type&lt;/code&gt; equal to &lt;code&gt;&lt;a href=&quot;../types/ptrdiff_t&quot;&gt;std::ptrdiff_t&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">2）指针的专业化。提供等于 &lt;code&gt;&lt;a href=&quot;../types/ptrdiff_t&quot;&gt;std::ptrdiff_t&lt;/a&gt;&lt;/code&gt; 的成员类型 &lt;code&gt;difference_type&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="25d86a47c6b899b1f1df9adcb96e0ab88206f967" translate="yes" xml:space="preserve">
          <source>2) Specialization for type &lt;code&gt;void&lt;/code&gt; is provided, it declares the typedef &lt;code&gt;element_type&lt;/code&gt;, but no member functions.</source>
          <target state="translated">2）提供了 &lt;code&gt;void&lt;/code&gt; 类型的专门化，它声明了typedef &lt;code&gt;element_type&lt;/code&gt; ，但没有成员函数。</target>
        </trans-unit>
        <trans-unit id="65a6768970698c58445ab21fb7c4dc1771866f7c" translate="yes" xml:space="preserve">
          <source>2) Static or thread-local object of class type that is initialized by a constructor call, if the constructor is &lt;a href=&quot;constexpr&quot;&gt;constexpr&lt;/a&gt; and all constructor arguments (including implicit conversions) are &lt;a href=&quot;constant_expression&quot;&gt;constant expressions&lt;/a&gt;, and if the initializers in the constructor's initializer list and the brace-or-equal initializers of the class members only contain constant expressions.</source>
          <target state="translated">2）通过构造函数调用初始化的类类型的静态或线程局部对象，如果构造函数为&lt;a href=&quot;constexpr&quot;&gt;constexpr，&lt;/a&gt;并且所有构造函数参数（包括隐式转换）均为&lt;a href=&quot;constant_expression&quot;&gt;常量表达式&lt;/a&gt;，并且构造函数的初始化列表中的初始化和大括号-类成员的等号初始化程序仅包含常量表达式。</target>
        </trans-unit>
        <trans-unit id="9ec197091834ee7983cb09b5df85878fb3b9ec6c" translate="yes" xml:space="preserve">
          <source>2) Suitably declared &lt;a href=&quot;name#Unqualified_identifiers&quot;&gt;unqualified identifiers&lt;/a&gt; (e.g. &lt;code&gt;n&lt;/code&gt; or &lt;code&gt;cout&lt;/code&gt;)</source>
          <target state="translated">2）适当声明的&lt;a href=&quot;name#Unqualified_identifiers&quot;&gt;不合格标识符&lt;/a&gt;（例如 &lt;code&gt;n&lt;/code&gt; 或 &lt;code&gt;cout&lt;/code&gt; ）</target>
        </trans-unit>
        <trans-unit id="b9af18f09c2ee1b5cddd8be9c39c6ceeb0373660" translate="yes" xml:space="preserve">
          <source>2) Swaps the arrays &lt;code&gt;a&lt;/code&gt; and &lt;code&gt;b&lt;/code&gt;. In effect calls &lt;code&gt;&lt;a href=&quot;swap_ranges&quot;&gt;std::swap_ranges&lt;/a&gt;(a, a+N, b)&lt;/code&gt;. This overload does not participate in overload resolution unless &lt;code&gt;&lt;a href=&quot;../types/is_swappable&quot;&gt;std::is_swappable_v&lt;/a&gt;&amp;lt;T2&amp;gt;&lt;/code&gt; is &lt;code&gt;true&lt;/code&gt;.(since C++17)</source>
          <target state="translated">2）交换数组 &lt;code&gt;a&lt;/code&gt; 和 &lt;code&gt;b&lt;/code&gt; 。实际上调用 &lt;code&gt;&lt;a href=&quot;swap_ranges&quot;&gt;std::swap_ranges&lt;/a&gt;(a, a+N, b)&lt;/code&gt; 。除非 &lt;code&gt;&lt;a href=&quot;../types/is_swappable&quot;&gt;std::is_swappable_v&lt;/a&gt;&amp;lt;T2&amp;gt;&lt;/code&gt; 为 &lt;code&gt;true&lt;/code&gt; ,否则此重载不参与重载解析。（自C ++ 17起）</target>
        </trans-unit>
        <trans-unit id="3079d4646f618c386a0708d5fd966b77ead14111" translate="yes" xml:space="preserve">
          <source>2) The</source>
          <target state="translated">(2)</target>
        </trans-unit>
        <trans-unit id="b793c688c914f8efd311b91fa7fe03541be021f3" translate="yes" xml:space="preserve">
          <source>2) The &lt;code&gt;enable_view&lt;/code&gt; variable template is used to indicate that whether a &lt;a href=&quot;range&quot;&gt;&lt;code&gt;Range&lt;/code&gt;&lt;/a&gt; is a &lt;code&gt;&lt;a href=&quot;../range/view&quot;&gt;View&lt;/a&gt;&lt;/code&gt;, as follows:</source>
          <target state="translated">2） &lt;code&gt;enable_view&lt;/code&gt; 变量模板用于指示&lt;a href=&quot;range&quot;&gt; &lt;code&gt;Range&lt;/code&gt; &lt;/a&gt;是否为 &lt;code&gt;&lt;a href=&quot;../range/view&quot;&gt;View&lt;/a&gt;&lt;/code&gt; ，如下所示：</target>
        </trans-unit>
        <trans-unit id="950c7bd5b13b8129416b8148a9c0282c83ea9997" translate="yes" xml:space="preserve">
          <source>2) The &lt;code&gt;explicit&lt;/code&gt; specifier may be used with a constant expression. The function is explicit if and only if that constant expression evaluates to &lt;code&gt;true&lt;/code&gt;.</source>
          <target state="translated">2） &lt;code&gt;explicit&lt;/code&gt; 说明符可以与常量表达式一起使用。当且仅当该常数表达式的值为 &lt;code&gt;true&lt;/code&gt; 时，该函数才是显式的。</target>
        </trans-unit>
        <trans-unit id="b4767755beb1e73cb3990ecf20a0c7d3d41705d3" translate="yes" xml:space="preserve">
          <source>2) The &lt;code&gt;register&lt;/code&gt; specifier is only allowed for objects declared at block scope and in function parameter lists. It indicates automatic storage duration, which is the default for these kinds of declarations. Additionally, the presence of this keyword may be used as a hint for the optimizer to store the value of this variable in a CPU register. This keyword was deprecated in C++11.</source>
          <target state="translated">2） &lt;code&gt;register&lt;/code&gt; 说明符仅允许在块范围和功能参数列表中声明的对象使用。它指示自动存储持续时间，这是此类声明的默认值。此外，此关键字的存在可以用作优化程序的提示，以将优化程序的值存储在CPU寄存器中。在C ++ 11中不推荐使用此关键字。</target>
        </trans-unit>
        <trans-unit id="8290887e0e90e327b45b2d6d2c9b24ed2b76d9cf" translate="yes" xml:space="preserve">
          <source>2) The b distribution parameter (scale).</source>
          <target state="translated">2)b分布参数(比例)。</target>
        </trans-unit>
        <trans-unit id="1a6f30ed216fc867166296b947e88c6b600594a5" translate="yes" xml:space="preserve">
          <source>2) The base class version of this function has no effect. The derived classes may override this function in order to be informed about the changes of the locale. The derived class may cache the locale and member facets between calls to &lt;code&gt;imbue()&lt;/code&gt;.</source>
          <target state="translated">2）此函数的基类版本无效。派生的类可以重写此功能，以便通知有关语言环境的更改。派生的类可以在对 &lt;code&gt;imbue()&lt;/code&gt; 的调用之间缓存区域设置和成员构面。</target>
        </trans-unit>
        <trans-unit id="14f9537c60c7b804288e7d756fa9eea92d2a2a54" translate="yes" xml:space="preserve">
          <source>2) The base class version of this function has no effect. The derived classes may override this function to allow absolute positioning of the position indicator.</source>
          <target state="translated">2)基类版本的这个函数没有效果。派生类可以重写此函数,允许位置指示器的绝对定位。</target>
        </trans-unit>
        <trans-unit id="9210537b543c7ccb676ed8876ffff77435659859" translate="yes" xml:space="preserve">
          <source>2) The base class version of this function has no effect. The derived classes may override this function to allow relative positioning of the position indicator.</source>
          <target state="translated">2)基类版本的这个函数没有效果。派生类可以重写此函数,允许位置指示器的相对定位。</target>
        </trans-unit>
        <trans-unit id="489cbc60d9e4ff2e05e82f993298aae5d533030c" translate="yes" xml:space="preserve">
          <source>2) The base class version of this function has no effect. The derived classes may override this function to allow removal or replacement of the controlled character sequence (the buffer) with a user-provided array, or for any other implementation-specific purpose.</source>
          <target state="translated">2)这个函数的基类版本没有效果。派生类可以重写这个函数,允许用用户提供的数组删除或替换受控字符序列(缓冲区),或者用于任何其他特定的实现目的。</target>
        </trans-unit>
        <trans-unit id="de1ce89e13aae48a39f38fea924ee26418e5a148" translate="yes" xml:space="preserve">
          <source>2) The base class version of this function has no effect. The derived classes may override this function to allow synchronizing the underlying device with the buffers.</source>
          <target state="translated">2)这个函数的基类版本没有效果。派生类可以重写此函数,允许将底层设备与缓冲区同步。</target>
        </trans-unit>
        <trans-unit id="9fe09d21a907cdcf7d545368a26b8685b7df2a85" translate="yes" xml:space="preserve">
          <source>2) The caller attempts to putback a different character from the one retrieved earlier (&lt;code&gt;pbackfail()&lt;/code&gt; is called with the character that needs to be put back), in which case</source>
          <target state="translated">2）调用方尝试回退与先前检索到的字符不同的字符 &lt;code&gt;pbackfail()&lt;/code&gt; 使用需要回退的字符调用pbackfail（）），在这种情况下</target>
        </trans-unit>
        <trans-unit id="9f5d083c5637aa1678ab08f5602c6f753d6d8e5b" translate="yes" xml:space="preserve">
          <source>2) The caller attempts to putback a different character from the one retrieved earlier (&lt;code&gt;pbackfail()&lt;/code&gt; is called with the character that needs to be put back). In this situation, the purpose of &lt;code&gt;pbackfail()&lt;/code&gt; is to place the character &lt;code&gt;c&lt;/code&gt; into the get area at the position just before &lt;a href=&quot;gptr&quot;&gt;&lt;code&gt;basic_streambuf::gptr()&lt;/code&gt;&lt;/a&gt;, and, if possible, to modify the associated character sequence to reflect this change. This may involve backing up the get area as in the first variant.</source>
          <target state="translated">2）调用方尝试回退与先前检索到的字符不同的字符（ &lt;code&gt;pbackfail()&lt;/code&gt; 需要回退该字符）。在这种情况下， &lt;code&gt;pbackfail()&lt;/code&gt; 的目的是将字符 &lt;code&gt;c&lt;/code&gt; 放入get区域中&lt;a href=&quot;gptr&quot;&gt; &lt;code&gt;basic_streambuf::gptr()&lt;/code&gt; &lt;/a&gt;之前的位置，并在可能的情况下修改关联的字符序列以反映此更改。如在第一变体中那样，这可能涉及备份获取区域。</target>
        </trans-unit>
        <trans-unit id="7cc89399707702f1779e5368a5c0ea82b8b2ae57" translate="yes" xml:space="preserve">
          <source>2) The concept &lt;code&gt;StrictTotallyOrderedWith&amp;lt;T, U&amp;gt;&lt;/code&gt; specifies that the comparison operators &lt;code&gt;==,!=,&amp;lt;,&amp;gt;,&amp;lt;=,&amp;gt;=&lt;/code&gt; on (possibly mixed) &lt;code&gt;T&lt;/code&gt; and &lt;code&gt;U&lt;/code&gt; operands yield results consistent with a strict total order. Comparing mixed operands yields results equivalent to comparing the operands converted to their common type.</source>
          <target state="translated">2）概念 &lt;code&gt;StrictTotallyOrderedWith&amp;lt;T, U&amp;gt;&lt;/code&gt; 指定 &lt;code&gt;T&lt;/code&gt; 和 &lt;code&gt;U&lt;/code&gt; 操作数（可能是混合的）上的比较运算符 &lt;code&gt;==,!=,&amp;lt;,&amp;gt;,&amp;lt;=,&amp;gt;=&lt;/code&gt; 产生与严格总顺序一致的结果。比较混合操作数产生的结果等同于比较转换为它们的普通类型的操作数。</target>
        </trans-unit>
        <trans-unit id="f1e8c720cabc3e6d248f5d6b3fbe38dd3202d194" translate="yes" xml:space="preserve">
          <source>2) The copy assignment operator is deleted; &lt;code&gt;basic_filebuf&lt;/code&gt; is not &lt;a href=&quot;../../named_req/copyassignable&quot;&gt;CopyAssignable&lt;/a&gt;.</source>
          <target state="translated">2）删除副本分配运算符； &lt;code&gt;basic_filebuf&lt;/code&gt; 不是&lt;a href=&quot;../../named_req/copyassignable&quot;&gt;CopyAssignable&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="9a63ad58af1bf84a2a92c4abcc14be43a779582a" translate="yes" xml:space="preserve">
          <source>2) The copy assignment operator is deleted; &lt;code&gt;basic_stringbuf&lt;/code&gt; is not &lt;a href=&quot;../../named_req/copyassignable&quot;&gt;CopyAssignable&lt;/a&gt;.</source>
          <target state="translated">2）删除副本分配运算符； &lt;code&gt;basic_stringbuf&lt;/code&gt; 不是&lt;a href=&quot;../../named_req/copyassignable&quot;&gt;CopyAssignable&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="d0d21c7d0475cf5df4659c95a45488e713b12ffb" translate="yes" xml:space="preserve">
          <source>2) The copy constructor is defaulted (makes a bitwise copy of the tick count).</source>
          <target state="translated">2)复制构造函数是默认的(对tick计数进行位式复制)。</target>
        </trans-unit>
        <trans-unit id="5e25cd324c0b4b9ecaec01218a96f7b5b9a97d5c" translate="yes" xml:space="preserve">
          <source>2) The copy constructor is deleted: &lt;code&gt;std::seed_seq&lt;/code&gt; is not copyable.</source>
          <target state="translated">2）复制构造函数被删除： &lt;code&gt;std::seed_seq&lt;/code&gt; 是不可复制的。</target>
        </trans-unit>
        <trans-unit id="08ad7891ad7f0d7821788e8bf342fd9ee9291913" translate="yes" xml:space="preserve">
          <source>2) The copy constructor is deleted; &lt;code&gt;&lt;a href=&quot;../atomic_flag&quot;&gt;std::atomic_flag&lt;/a&gt;&lt;/code&gt; is not copyable.</source>
          <target state="translated">2）复制构造函数被删除； &lt;code&gt;&lt;a href=&quot;../atomic_flag&quot;&gt;std::atomic_flag&lt;/a&gt;&lt;/code&gt; 不可复制。</target>
        </trans-unit>
        <trans-unit id="17290718c8349e1e2c025dae201d8975e42af596" translate="yes" xml:space="preserve">
          <source>2) The copy constructor is deleted; &lt;code&gt;std::basic_filebuf&lt;/code&gt; is not &lt;a href=&quot;../../named_req/copyconstructible&quot;&gt;CopyConstructible&lt;/a&gt;</source>
          <target state="translated">2）复制构造函数被删除； &lt;code&gt;std::basic_filebuf&lt;/code&gt; 不是&lt;a href=&quot;../../named_req/copyconstructible&quot;&gt;CopyConstructible&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="eefd9b2d10ed93c62bbd922dbbaad8de45efe224" translate="yes" xml:space="preserve">
          <source>2) The copy constructor is protected, and is deleted. Input streams are not copyable.</source>
          <target state="translated">2)复制构造函数受保护,被删除。输入流是不能复制的。</target>
        </trans-unit>
        <trans-unit id="a2c4271a1901edd678bd8ec31a1788d4eb0a2900" translate="yes" xml:space="preserve">
          <source>2) The copy constructor is protected, and is deleted. Output streams are not copyable.</source>
          <target state="translated">2)复制构造函数受保护,被删除。输出流是不能复制的。</target>
        </trans-unit>
        <trans-unit id="cfe26d4fa627a1587125f8a89a2ee75c1a944b93" translate="yes" xml:space="preserve">
          <source>2) The default constructor is protected: only derived classes may construct &lt;code&gt;std::ios_base&lt;/code&gt;. The internal state is undefined after the construction. The derived class must call &lt;a href=&quot;../basic_ios/init&quot;&gt;&lt;code&gt;basic_ios::init()&lt;/code&gt;&lt;/a&gt; to complete initialization before first use or before destructor; otherwise the behavior is undefined.</source>
          <target state="translated">2）默认构造函数受保护：只有派生类可以构造 &lt;code&gt;std::ios_base&lt;/code&gt; 。构造后内部状态未定义。派生类必须在第一次使用之前或在析构函数之前调用&lt;a href=&quot;../basic_ios/init&quot;&gt; &lt;code&gt;basic_ios::init()&lt;/code&gt; &lt;/a&gt;来完成初始化。否则，行为是不确定的。</target>
        </trans-unit>
        <trans-unit id="529a7ebc0c45dfd108d48d65115f536369081f55" translate="yes" xml:space="preserve">
          <source>2) The definition of an inline function or variable(since C++17) must be present in the translation unit where it is accessed (not necessarily before the point of access).</source>
          <target state="translated">2)一个内联函数或变量的定义(自C++17起)必须存在于它被访问的翻译单元中(不一定在访问点之前)。</target>
        </trans-unit>
        <trans-unit id="2cd86adb5facff344b42dfbbad25e5bc6252a398" translate="yes" xml:space="preserve">
          <source>2) The deviation &amp;sigma; distribution parameter.</source>
          <target state="translated">2）偏差&amp;sigma;分布参数。</target>
        </trans-unit>
        <trans-unit id="86710c51236c9a5163f0d4a5fa18d71634ee3f9e" translate="yes" xml:space="preserve">
          <source>2) The execution policy type used as a unique type to disambiguate parallel algorithm overloading and indicate that a parallel algorithm's execution may be parallelized. The invocations of element access functions in parallel algorithms invoked with this policy (usually specified as &lt;code&gt;&lt;a href=&quot;execution_policy_tag&quot;&gt;std::execution::par&lt;/a&gt;&lt;/code&gt;) are permitted to execute in either the invoking thread or in a thread implicitly created by the library to support parallel algorithm execution. Any such invocations executing in the same thread are indeterminately sequenced with respect to each other.</source>
          <target state="translated">2）执行策略类型用作唯一类型，以消除并行算法过载的歧义，并指示并行算法的执行可以并行化。使用此策略（通常指定为 &lt;code&gt;&lt;a href=&quot;execution_policy_tag&quot;&gt;std::execution::par&lt;/a&gt;&lt;/code&gt; ）调用的并行算法中的元素访问函数的调用，可以在调用线程中执行，也可以在库隐式创建的线程中执行，以支持并行算法执行。在同一线程中执行的任何此类调用都相对于彼此不确定地排序。</target>
        </trans-unit>
        <trans-unit id="96746981c0d5232419ee12cdfeeb5a231b82c80f" translate="yes" xml:space="preserve">
          <source>2) The exponent syntax for hexadecimal floating-point literal</source>
          <target state="translated">2)十六进制浮点文字的指数语法。</target>
        </trans-unit>
        <trans-unit id="cbf30cf8905eae41f89d2b7e6cf429ccc5aa78e4" translate="yes" xml:space="preserve">
          <source>2) The expression &lt;code&gt;view::filter(E, P)&lt;/code&gt; is</source>
          <target state="translated">2）表达式 &lt;code&gt;view::filter(E, P)&lt;/code&gt; 是</target>
        </trans-unit>
        <trans-unit id="b5c63534cd94f69bdc3e117d5503a36fbc1dda7a" translate="yes" xml:space="preserve">
          <source>2) The expression of a &lt;a href=&quot;decltype&quot;&gt;decltype&lt;/a&gt;-specifier:</source>
          <target state="translated">2）&lt;a href=&quot;decltype&quot;&gt;decltype -specifier&lt;/a&gt;的表达式：</target>
        </trans-unit>
        <trans-unit id="4739a2426c595a401e800dc1225729611896ba2f" translate="yes" xml:space="preserve">
          <source>2) The first operand must be an expression of pointer to complete class type &lt;code&gt;T*&lt;/code&gt;.</source>
          <target state="translated">2）第一个操作数必须是完整类类型 &lt;code&gt;T*&lt;/code&gt; 的指针表达式。</target>
        </trans-unit>
        <trans-unit id="f2af795c7d5bb9f0a87c417eb44bb2189e5facca" translate="yes" xml:space="preserve">
          <source>2) The form with brace-enclosed list inside the square brackets is only used to call an overloaded &lt;code&gt;operator[]&lt;/code&gt;</source>
          <target state="translated">2）方括号内带有大括号括起来的列表的形式仅用于调用重载 &lt;code&gt;operator[]&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="dd6b710a6029adf010e772119c69ce0fcd260658" translate="yes" xml:space="preserve">
          <source>2) The format character sequence is defined by the characters in &lt;code&gt;fmt&lt;/code&gt;. The resulting character sequence is copied to &lt;code&gt;out&lt;/code&gt;.</source>
          <target state="translated">2）格式字符序列由 &lt;code&gt;fmt&lt;/code&gt; 中的字符定义。结果字符序列被复制到 &lt;code&gt;out&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="8f0e2f66751993cfa31f02e0999c593fdd8fa23c" translate="yes" xml:space="preserve">
          <source>2) The input is performed as a series of simple formatted extractions. Whitespace skipping is the same for each of them.</source>
          <target state="translated">2)输入是以一系列简单的格式化提取的方式进行的。每种格式的跳空都是一样的。</target>
        </trans-unit>
        <trans-unit id="208b880632c15b8a0391499a7047133f8c2cbfa2" translate="yes" xml:space="preserve">
          <source>2) The k distribution parameter.</source>
          <target state="translated">2)k分布参数。</target>
        </trans-unit>
        <trans-unit id="97953aa781e3453c2f633e5ab6cd39cc03c48465" translate="yes" xml:space="preserve">
          <source>2) The list of probability densities at the boundaries of the intervals.</source>
          <target state="translated">2)区间边界的概率密度列表。</target>
        </trans-unit>
        <trans-unit id="10593803365fb6897be674b2da020e1166ff0c08" translate="yes" xml:space="preserve">
          <source>2) The list of probability densities of the intervals.</source>
          <target state="translated">2)区间的概率密度列表。</target>
        </trans-unit>
        <trans-unit id="a48f0fe6e25df28c9399e861a734cfa34f2cea35" translate="yes" xml:space="preserve">
          <source>2) The log-deviation s distribution parameter.</source>
          <target state="translated">2)对数差s分布参数。</target>
        </trans-unit>
        <trans-unit id="0c46a443ec6b4f56f41d8d853075c97ec49a517e" translate="yes" xml:space="preserve">
          <source>2) The members declared after the specifier have protected member access</source>
          <target state="translated">2)在指定者之后声明的成员具有受保护的成员访问权。</target>
        </trans-unit>
        <trans-unit id="b7753c2a669f5dcffda1888b9670b0695adb2af3" translate="yes" xml:space="preserve">
          <source>2) The move assignment operator exchanges all data members of the base class, except for &lt;code&gt;rdbuf()&lt;/code&gt;, with &lt;code&gt;rhs&lt;/code&gt;, as if by calling &lt;code&gt;swap(*rhs)&lt;/code&gt;. This move assignment operator is protected: it is only called by the move assignment operators of the derived movable output stream classes &lt;code&gt;&lt;a href=&quot;../basic_ofstream&quot;&gt;std::basic_ofstream&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;../basic_ostringstream&quot;&gt;std::basic_ostringstream&lt;/a&gt;&lt;/code&gt;, which know how to correctly move-assign the associated streambuffers.</source>
          <target state="translated">2）移动分配运算符与 &lt;code&gt;rhs&lt;/code&gt; &lt;code&gt;swap(*rhs)&lt;/code&gt; 基类的所有数据成员（除了 &lt;code&gt;rdbuf()&lt;/code&gt; 之外），就像通过调用swap（* rhs）一样。此移动分配运算符受到保护：它仅由派生的可移动输出流类 &lt;code&gt;&lt;a href=&quot;../basic_ofstream&quot;&gt;std::basic_ofstream&lt;/a&gt;&lt;/code&gt; 和 &lt;code&gt;&lt;a href=&quot;../basic_ostringstream&quot;&gt;std::basic_ostringstream&lt;/a&gt;&lt;/code&gt; 的移动分配运算符调用，它们知道如何正确地移动分配关联的流缓冲区。</target>
        </trans-unit>
        <trans-unit id="5ce749b0f73c8cb8352129428b67e0a96b2a6a64" translate="yes" xml:space="preserve">
          <source>2) The move assignment operator exchanges the gcount() values and all data members of the base class, except for &lt;code&gt;rdbuf()&lt;/code&gt;, with &lt;code&gt;rhs&lt;/code&gt;, as if by calling &lt;code&gt;swap(*rhs)&lt;/code&gt;. This move assignment operator is protected: it is only called by the move assignment operators of the derived movable input stream classes &lt;code&gt;&lt;a href=&quot;../basic_ifstream&quot;&gt;std::basic_ifstream&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;../basic_istringstream&quot;&gt;std::basic_istringstream&lt;/a&gt;&lt;/code&gt;, which know how to correctly move-assign the associated streambuffers.</source>
          <target state="translated">2）移动赋值运算符与rhs交换gcount（）值和基类的所有数据成员（除了 &lt;code&gt;rdbuf()&lt;/code&gt; )与 &lt;code&gt;rhs&lt;/code&gt; &lt;code&gt;swap(*rhs)&lt;/code&gt; ，就像通过调用swap（* rhs）一样。此移动分配运算符受保护：它仅由派生的可移动输入流类 &lt;code&gt;&lt;a href=&quot;../basic_ifstream&quot;&gt;std::basic_ifstream&lt;/a&gt;&lt;/code&gt; 和 &lt;code&gt;&lt;a href=&quot;../basic_istringstream&quot;&gt;std::basic_istringstream&lt;/a&gt;&lt;/code&gt; 的移动分配运算符调用，它们知道如何正确地移动分配关联的流缓冲区。</target>
        </trans-unit>
        <trans-unit id="cb032184de4bbe34484b6d70d20a6e29f4d859c6" translate="yes" xml:space="preserve">
          <source>2) The n (the second degree of freedom) distribution parameter.</source>
          <target state="translated">2)n(第二自由度)分布参数。</target>
        </trans-unit>
        <trans-unit id="99aa6ef75bd26ba2de70b65023abcfea43c79ddd" translate="yes" xml:space="preserve">
          <source>2) The name of the &lt;code&gt;std::chrono::time_zone&lt;/code&gt; for which this &lt;code&gt;link&lt;/code&gt; object provides an alternative name.</source>
          <target state="translated">2）此 &lt;code&gt;link&lt;/code&gt; 对象为其提供备用名称的 &lt;code&gt;std::chrono::time_zone&lt;/code&gt; 的名称。</target>
        </trans-unit>
        <trans-unit id="7fad383a36eccd125aeacc9525f3bf6c33c8a7df" translate="yes" xml:space="preserve">
          <source>2) The new pointer offset &lt;code&gt;newoff&lt;/code&gt; of type &lt;code&gt;off_type&lt;/code&gt; is determined</source>
          <target state="translated">2）确定类型为 &lt;code&gt;off_type&lt;/code&gt; 的新指针偏移量 &lt;code&gt;newoff&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="5aec990e14101c0bcd77f4e22cf6a7cfb2367418" translate="yes" xml:space="preserve">
          <source>2) The non-member &lt;code&gt;any_cast&lt;/code&gt; functions provide type-safe access to the contained object.</source>
          <target state="translated">2）非成员的 &lt;code&gt;any_cast&lt;/code&gt; 函数提供对所包含对象的类型安全访问。</target>
        </trans-unit>
        <trans-unit id="582c67ddf6f62ce1c1ef7f0f690cb6a06c0edb34" translate="yes" xml:space="preserve">
          <source>2) The number of uncaught exception objects in the current thread.</source>
          <target state="translated">2)当前线程中未捕获的异常对象数量。</target>
        </trans-unit>
        <trans-unit id="7f51319659c9a755cf2ce8b0c57e0fcc6d543174" translate="yes" xml:space="preserve">
          <source>2) The old value of the iterator.</source>
          <target state="translated">2)迭代器的旧值。</target>
        </trans-unit>
        <trans-unit id="dff5eafdffdb27565dbaeb4c69f6dd5798db7cee" translate="yes" xml:space="preserve">
          <source>2) The overload that does not take a &lt;code&gt;&lt;a href=&quot;../error/error_code&quot;&gt;std::error_code&lt;/a&gt;&amp;amp;&lt;/code&gt; parameter throws &lt;a href=&quot;filesystem_error&quot;&gt;&lt;code&gt;filesystem_error&lt;/code&gt;&lt;/a&gt; on underlying OS API errors, constructed with &lt;code&gt;p&lt;/code&gt; as the first path argument and the OS error code as the error code argument. The overload taking a &lt;code&gt;&lt;a href=&quot;../error/error_code&quot;&gt;std::error_code&lt;/a&gt;&amp;amp;&lt;/code&gt; parameter sets it to the OS API error code if an OS API call fails, and executes &lt;code&gt;ec.clear()&lt;/code&gt; if no errors occur. Any overload not marked &lt;code&gt;noexcept&lt;/code&gt; may throw &lt;code&gt;&lt;a href=&quot;../memory/new/bad_alloc&quot;&gt;std::bad_alloc&lt;/a&gt;&lt;/code&gt; if memory allocation fails.</source>
          <target state="translated">2）不带 &lt;code&gt;&lt;a href=&quot;../error/error_code&quot;&gt;std::error_code&lt;/a&gt;&amp;amp;&lt;/code&gt; 参数的重载会在底层OS API错误上引发&lt;a href=&quot;filesystem_error&quot;&gt; &lt;code&gt;filesystem_error&lt;/code&gt; &lt;/a&gt;，该错误由 &lt;code&gt;p&lt;/code&gt; 作为第一个路径参数，而OS错误代码作为错误代码参数构造。如果OS API调用失败，则采用 &lt;code&gt;&lt;a href=&quot;../error/error_code&quot;&gt;std::error_code&lt;/a&gt;&amp;amp;&lt;/code&gt; 参数的重载会将其设置为OS API错误代码，如果没有错误发生，则执行 &lt;code&gt;ec.clear()&lt;/code&gt; 。如果内存分配失败，任何未标记为 &lt;code&gt;noexcept&lt;/code&gt; 的重载都可能引发 &lt;code&gt;&lt;a href=&quot;../memory/new/bad_alloc&quot;&gt;std::bad_alloc&lt;/a&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="83271095603ab7c6322a5e8f3914d379855a298a" translate="yes" xml:space="preserve">
          <source>2) The overload that does not take a &lt;code&gt;&lt;a href=&quot;../error/error_code&quot;&gt;std::error_code&lt;/a&gt;&amp;amp;&lt;/code&gt; parameter throws &lt;a href=&quot;filesystem_error&quot;&gt;&lt;code&gt;filesystem_error&lt;/code&gt;&lt;/a&gt; on underlying OS API errors, constructed with &lt;code&gt;p&lt;/code&gt; as the first path argument, &lt;code&gt;existing_p&lt;/code&gt; as the second path argument, and the OS error code as the error code argument. The overload taking a &lt;code&gt;&lt;a href=&quot;../error/error_code&quot;&gt;std::error_code&lt;/a&gt;&amp;amp;&lt;/code&gt; parameter sets it to the OS API error code if an OS API call fails, and executes &lt;code&gt;ec.clear()&lt;/code&gt; if no errors occur. Any overload not marked &lt;code&gt;noexcept&lt;/code&gt; may throw &lt;code&gt;&lt;a href=&quot;../memory/new/bad_alloc&quot;&gt;std::bad_alloc&lt;/a&gt;&lt;/code&gt; if memory allocation fails.</source>
          <target state="translated">2）不带 &lt;code&gt;&lt;a href=&quot;../error/error_code&quot;&gt;std::error_code&lt;/a&gt;&amp;amp;&lt;/code&gt; 参数的重载会在底层OS API错误上引发&lt;a href=&quot;filesystem_error&quot;&gt; &lt;code&gt;filesystem_error&lt;/code&gt; &lt;/a&gt;，该错误由 &lt;code&gt;p&lt;/code&gt; 作为第一个路径参数， &lt;code&gt;existing_p&lt;/code&gt; 作为第二个路径参数以及OS错误代码作为错误代码参数构造。如果OS API调用失败，则采用 &lt;code&gt;&lt;a href=&quot;../error/error_code&quot;&gt;std::error_code&lt;/a&gt;&amp;amp;&lt;/code&gt; 参数的重载会将其设置为OS API错误代码，如果没有错误发生，则执行 &lt;code&gt;ec.clear()&lt;/code&gt; 。如果内存分配失败，任何未标记为 &lt;code&gt;noexcept&lt;/code&gt; 的重载都可能引发 &lt;code&gt;&lt;a href=&quot;../memory/new/bad_alloc&quot;&gt;std::bad_alloc&lt;/a&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="fedfe40539ff845ce724bcdefe4c0b4b5d1b5ab2" translate="yes" xml:space="preserve">
          <source>2) The pointer to the current character (</source>
          <target state="translated">2)当前字符的指针(</target>
        </trans-unit>
        <trans-unit id="69cbd3e5e4d3a9ed59133e0252cfe374d2de3548" translate="yes" xml:space="preserve">
          <source>2) The previous value of the iterator.</source>
          <target state="translated">2)迭代器的前值。</target>
        </trans-unit>
        <trans-unit id="561da9d0b8eb74564b3a716e4ed759c78b513270" translate="yes" xml:space="preserve">
          <source>2) The program is ill-formed if &lt;code&gt;&lt;a href=&quot;../../types/is_constructible&quot;&gt;std::is_constructible_v&lt;/a&gt;&amp;lt;T, U&amp;amp;&amp;gt;&lt;/code&gt; is &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">2）如果 &lt;code&gt;&lt;a href=&quot;../../types/is_constructible&quot;&gt;std::is_constructible_v&lt;/a&gt;&amp;lt;T, U&amp;amp;&amp;gt;&lt;/code&gt; 为 &lt;code&gt;false&lt;/code&gt; ，则程序格式错误。</target>
        </trans-unit>
        <trans-unit id="eca0f0583779e3e634f1c30803b6db16b0c89fa9" translate="yes" xml:space="preserve">
          <source>2) The random number generator is the function object &lt;code&gt;r&lt;/code&gt;.</source>
          <target state="translated">2）随机数生成器是函数对象 &lt;code&gt;r&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="35e25ae4654ad718f8a3bffc69a7bad39d1064e8" translate="yes" xml:space="preserve">
          <source>2) The reference stored as value in the shared state.</source>
          <target state="translated">2)作为值存储在共享状态中的引用。</target>
        </trans-unit>
        <trans-unit id="4dd94f6e52cf209cce4446ec0ad840b5d75fceea" translate="yes" xml:space="preserve">
          <source>2) The relative form of the path</source>
          <target state="translated">2)路径的相对形式</target>
        </trans-unit>
        <trans-unit id="14e40c14e23a63774678bf09d3818d732824ff47" translate="yes" xml:space="preserve">
          <source>2) The result of &lt;a href=&quot;https://en.wikipedia.org/wiki/Fold_(higher-order_function)&quot;&gt;left fold&lt;/a&gt; of the given range over &lt;code&gt;op&lt;/code&gt;</source>
          <target state="translated">2）给定范围在 &lt;code&gt;op&lt;/code&gt; 上的&lt;a href=&quot;https://en.wikipedia.org/wiki/Fold_(higher-order_function)&quot;&gt;左折&lt;/a&gt;结果</target>
        </trans-unit>
        <trans-unit id="3381c306fe1c5e44690c74135fdd2c831b92183b" translate="yes" xml:space="preserve">
          <source>2) The result of &lt;code&gt;!lhs.equal(rhs)&lt;/code&gt;.</source>
          <target state="translated">2） &lt;code&gt;!lhs.equal(rhs)&lt;/code&gt; 的结果。</target>
        </trans-unit>
        <trans-unit id="7078d6b39da2557d2cfb099d99aaeab3db9616ea" translate="yes" xml:space="preserve">
          <source>2) The resulting absolute position as defined by the position indicator. The base class version returns &lt;code&gt;pos_type(off_type(-1))&lt;/code&gt;.</source>
          <target state="translated">2）由位置指示器定义的最终绝对位置。基类版本返回 &lt;code&gt;pos_type(off_type(-1))&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="0e07d028ef438d861afc0f1edd39bd5977ee4657" translate="yes" xml:space="preserve">
          <source>2) The return type is &lt;code&gt;R&lt;/code&gt;. If &lt;code&gt;R&lt;/code&gt; is (possibly cv-qualified) &lt;code&gt;void&lt;/code&gt;, the result of the &lt;code&gt;invoke&lt;/code&gt; expression is discarded.</source>
          <target state="translated">2）返回类型是 &lt;code&gt;R&lt;/code&gt; 。如果 &lt;code&gt;R&lt;/code&gt; 为（可能是cv限定的） &lt;code&gt;void&lt;/code&gt; ，则将 &lt;code&gt;invoke&lt;/code&gt; 表达式的结果。</target>
        </trans-unit>
        <trans-unit id="181a8cbb0dd338fa6fde71b3b9f2a20764e605be" translate="yes" xml:space="preserve">
          <source>2) The return type meets the requirements of constant &lt;a href=&quot;../../named_req/randomaccessiterator&quot;&gt;LegacyRandomAccessIterator&lt;/a&gt;.</source>
          <target state="translated">2）返回类型满足常量&lt;a href=&quot;../../named_req/randomaccessiterator&quot;&gt;LegacyRandomAccessIterator&lt;/a&gt;的要求。</target>
        </trans-unit>
        <trans-unit id="c42ab30e0dcd2fd028e8b3702d8a26313fc2f43e" translate="yes" xml:space="preserve">
          <source>2) The stored pointer, i.e., &lt;code&gt;get()&lt;/code&gt;</source>
          <target state="translated">2）存储的指针，即 &lt;code&gt;get()&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="8a5d5eedbfa032d05689dff895c55d7f69642213" translate="yes" xml:space="preserve">
          <source>2) The t distribution parameter.</source>
          <target state="translated">2)t分布参数。</target>
        </trans-unit>
        <trans-unit id="90f6ebb11f7b879e1a2203264460377befcb1ed5" translate="yes" xml:space="preserve">
          <source>2) The transformed &lt;code&gt;A&lt;/code&gt; can be another pointer or pointer to member type that can be converted to the deduced &lt;code&gt;A&lt;/code&gt; via a &lt;a href=&quot;implicit_cast#Qualification_conversions&quot;&gt;qualification conversions&lt;/a&gt;or a function pointer conversion(since C++17):</source>
          <target state="translated">2）转换后的 &lt;code&gt;A&lt;/code&gt; 可以是可以通过&lt;a href=&quot;implicit_cast#Qualification_conversions&quot;&gt;限定转换&lt;/a&gt;或函数指针转换（自C ++ 17起）转换为推导的 &lt;code&gt;A&lt;/code&gt; 的另一种指针或指向成员类型的指针：</target>
        </trans-unit>
        <trans-unit id="07df329930b026a6f5fd1751d93dbb43466ead78" translate="yes" xml:space="preserve">
          <source>2) The underlying iterator is initialized with &lt;code&gt;x&lt;/code&gt;.</source>
          <target state="translated">2）基础迭代器使用 &lt;code&gt;x&lt;/code&gt; 初始化。</target>
        </trans-unit>
        <trans-unit id="7f5f72f52c7e8c564188399cb1ef1e5c4a31bca9" translate="yes" xml:space="preserve">
          <source>2) The value of the</source>
          <target state="translated">(2)价值</target>
        </trans-unit>
        <trans-unit id="b137e4833770fca0acf1fbd8939ba1635543491d" translate="yes" xml:space="preserve">
          <source>2) The value of the b parameter.</source>
          <target state="translated">2)b参数的值。</target>
        </trans-unit>
        <trans-unit id="246b1340a1e80fa9e2f300866c54dea20d6847c5" translate="yes" xml:space="preserve">
          <source>2) The version of this function in the specialization of &lt;code&gt;&lt;a href=&quot;../pointer_traits&quot;&gt;std::pointer_traits&lt;/a&gt;&lt;/code&gt; for pointer types returns &lt;code&gt;&lt;a href=&quot;../addressof&quot;&gt;std::addressof&lt;/a&gt;(r)&lt;/code&gt;</source>
          <target state="translated">2）专门针对指针类型的 &lt;code&gt;&lt;a href=&quot;../pointer_traits&quot;&gt;std::pointer_traits&lt;/a&gt;&lt;/code&gt; 的此函数的版本返回 &lt;code&gt;&lt;a href=&quot;../addressof&quot;&gt;std::addressof&lt;/a&gt;(r)&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="7dc2591abff722b9450a8c74df7c5f201c0d140c" translate="yes" xml:space="preserve">
          <source>2) Then attempts to classify the character in the imbued locale by calling &lt;code&gt;&lt;a href=&quot;../../locale/use_facet&quot;&gt;std::use_facet&lt;/a&gt;&amp;lt;&lt;a href=&quot;../../locale/ctype&quot;&gt;std::ctype&lt;/a&gt;&amp;lt;CharT&amp;gt;&amp;gt;(getloc()).is(m, c)&lt;/code&gt;. If that returned &lt;code&gt;true&lt;/code&gt;, &lt;code&gt;true&lt;/code&gt; is returned by &lt;code&gt;isctype()&lt;/code&gt;.</source>
          <target state="translated">2）然后尝试通过调用 &lt;code&gt;&lt;a href=&quot;../../locale/use_facet&quot;&gt;std::use_facet&lt;/a&gt;&amp;lt;&lt;a href=&quot;../../locale/ctype&quot;&gt;std::ctype&lt;/a&gt;&amp;lt;CharT&amp;gt;&amp;gt;(getloc()).is(m, c)&lt;/code&gt; 语言环境中对字符进行分类。如果返回 &lt;code&gt;true&lt;/code&gt; ， &lt;code&gt;true&lt;/code&gt; 被返回 &lt;code&gt;isctype()&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="a820a48acae67c57a408630003c72d23b5246a78" translate="yes" xml:space="preserve">
          <source>2) Then, direct base classes are initialized in left-to-right order as they appear in this class's base-specifier list</source>
          <target state="translated">2)然后,直接基类按照本类基规范列表中出现的从左到右的顺序进行初始化。</target>
        </trans-unit>
        <trans-unit id="4c3eecd413e417961bcb5a2f9c21daa3a6a178a8" translate="yes" xml:space="preserve">
          <source>2) There is no other side effect X to M where A</source>
          <target state="translated">2)对M没有其他副作用X,其中A</target>
        </trans-unit>
        <trans-unit id="a88fc3e49ead65c6e85be6221f3afd1cf04a39d3" translate="yes" xml:space="preserve">
          <source>2) This overload only participates in overload resolution if T is a specialization of std::pair. For &lt;code&gt;T = &lt;a href=&quot;../utility/pair&quot;&gt;std::pair&lt;/a&gt;&amp;lt;T1, T2&amp;gt;&lt;/code&gt;, equivalent to</source>
          <target state="translated">2）如果T是std :: pair的特化，则此重载仅参与重载解析。对于 &lt;code&gt;T = &lt;a href=&quot;../utility/pair&quot;&gt;std::pair&lt;/a&gt;&amp;lt;T1, T2&amp;gt;&lt;/code&gt; ，等于</target>
        </trans-unit>
        <trans-unit id="8efa49525e665271a26732b061954aa9e798e3b4" translate="yes" xml:space="preserve">
          <source>2) Through a</source>
          <target state="translated">(2)通过一个</target>
        </trans-unit>
        <trans-unit id="397f7293066a1b923f53b2bbda4edb83f5fcee95" translate="yes" xml:space="preserve">
          <source>2) Throws &lt;code&gt;&lt;a href=&quot;../../error/out_of_range/out_of_range&quot;&gt;std::out_of_range&lt;/a&gt;&lt;/code&gt; if &lt;code&gt;pos&lt;/code&gt; does not correspond to a valid position within the bitset</source>
          <target state="translated">2）如果 &lt;code&gt;pos&lt;/code&gt; 不对应于位集中的有效位置，则抛出 &lt;code&gt;&lt;a href=&quot;../../error/out_of_range/out_of_range&quot;&gt;std::out_of_range&lt;/a&gt;&lt;/code&gt; out_of_range</target>
        </trans-unit>
        <trans-unit id="fe12b00471782d3abe332b068facbae269da8878" translate="yes" xml:space="preserve">
          <source>2) Throws &lt;code&gt;&lt;a href=&quot;../../error/out_of_range/out_of_range&quot;&gt;std::out_of_range&lt;/a&gt;&lt;/code&gt; if &lt;code&gt;pos&lt;/code&gt; does not correspond to a valid position within the bitset.</source>
          <target state="translated">2）如果 &lt;code&gt;pos&lt;/code&gt; 不对应于位集中的有效位置，则抛出 &lt;code&gt;&lt;a href=&quot;../../error/out_of_range/out_of_range&quot;&gt;std::out_of_range&lt;/a&gt;&lt;/code&gt; out_of_range。</target>
        </trans-unit>
        <trans-unit id="e43b7e9cee947139e2e922b0e4d3005ec198aefd" translate="yes" xml:space="preserve">
          <source>2) Throws any exception thrown by the constructor of &lt;code&gt;T&lt;/code&gt;.</source>
          <target state="translated">2）抛出 &lt;code&gt;T&lt;/code&gt; 的构造函数抛出的任何异常。</target>
        </trans-unit>
        <trans-unit id="d7de87e6665156bf82e0c82660acd2d3ddcb1982" translate="yes" xml:space="preserve">
          <source>2) Throws nothing</source>
          <target state="translated">2)什么也不扔</target>
        </trans-unit>
        <trans-unit id="d5f42bf81f9fa4ac5617a479c682553058d7f909" translate="yes" xml:space="preserve">
          <source>2) Throws nothing.</source>
          <target state="translated">2)什么也不扔。</target>
        </trans-unit>
        <trans-unit id="0aa8ff3d596328fb6ad4bd526319cc23a22db45f" translate="yes" xml:space="preserve">
          <source>2) To form a &lt;a href=&quot;pointer&quot;&gt;pointer to non-static member&lt;/a&gt;.</source>
          <target state="translated">2）形成&lt;a href=&quot;pointer&quot;&gt;指向非静态成员&lt;/a&gt;的指针。</target>
        </trans-unit>
        <trans-unit id="b4abc5107f2e2f3e76cbfd525f378aead236b0cb" translate="yes" xml:space="preserve">
          <source>2) Trailing return type declaration: trailing return type is only allowed on the outermost function declarator. The decl-specifier-seq in this case must contain the keyword &lt;code&gt;auto&lt;/code&gt;</source>
          <target state="translated">2）尾随返回类型声明：尾随返回类型仅允许在最外面的函数声明器上使用。在这种情况下，decl-specifier-seq必须包含关键字 &lt;code&gt;auto&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="302ab7f6af0594883108e1d3845c83b71c408a4a" translate="yes" xml:space="preserve">
          <source>2) Transfers the element pointed to by &lt;code&gt;it&lt;/code&gt; from &lt;code&gt;other&lt;/code&gt; into &lt;code&gt;*this&lt;/code&gt;. The element is inserted before the element pointed to by &lt;code&gt;pos&lt;/code&gt;.</source>
          <target state="translated">2）通过转让指向的元件 &lt;code&gt;it&lt;/code&gt; 从 &lt;code&gt;other&lt;/code&gt; 进 &lt;code&gt;*this&lt;/code&gt; 。将该元素插入 &lt;code&gt;pos&lt;/code&gt; 指向的元素之前。</target>
        </trans-unit>
        <trans-unit id="a1776a89f9cd0f98f22ff560bf94f4fc7cf05476" translate="yes" xml:space="preserve">
          <source>2) Type-based non-throwing accessor: Equivalent to (1) with &lt;code&gt;I&lt;/code&gt; being the zero-based index of &lt;code&gt;T&lt;/code&gt; in &lt;code&gt;Types...&lt;/code&gt;. The call is ill-formed if &lt;code&gt;T&lt;/code&gt; is not a unique element of &lt;code&gt;Types...&lt;/code&gt;.</source>
          <target state="translated">2）基于类型的非投掷存取：与相当于（1） &lt;code&gt;I&lt;/code&gt; 是的基于零的索引 &lt;code&gt;T&lt;/code&gt; 在 &lt;code&gt;Types...&lt;/code&gt; 。如果 &lt;code&gt;T&lt;/code&gt; 不是 &lt;code&gt;Types...&lt;/code&gt; 的唯一元素，则调用格式错误。</target>
        </trans-unit>
        <trans-unit id="56276b30aff93b4c918ce9dcc07191cd1b1bd869" translate="yes" xml:space="preserve">
          <source>2) Type-based value accessor: If &lt;code&gt;v&lt;/code&gt; holds the alternative &lt;code&gt;T&lt;/code&gt;, returns a reference to the value stored in &lt;code&gt;v&lt;/code&gt;. Otherwise, throws &lt;code&gt;&lt;a href=&quot;bad_variant_access&quot;&gt;std::bad_variant_access&lt;/a&gt;&lt;/code&gt;. The call is ill-formed if &lt;code&gt;T&lt;/code&gt; is not a unique element of &lt;code&gt;Types...&lt;/code&gt;.</source>
          <target state="translated">2）基于类型的值访问器：如果 &lt;code&gt;v&lt;/code&gt; 持有替代 &lt;code&gt;T&lt;/code&gt; ，则返回对 &lt;code&gt;v&lt;/code&gt; 中存储的值的引用。否则，抛出 &lt;code&gt;&lt;a href=&quot;bad_variant_access&quot;&gt;std::bad_variant_access&lt;/a&gt;&lt;/code&gt; 。如果 &lt;code&gt;T&lt;/code&gt; 不是 &lt;code&gt;Types...&lt;/code&gt; 的唯一元素，则调用格式错误。</target>
        </trans-unit>
        <trans-unit id="2a28ac043b5a92413f90ca050cb84f25029dc5d9" translate="yes" xml:space="preserve">
          <source>2) UTF-8 character literal, e.g. &lt;code&gt;u8'a'&lt;/code&gt;. Such literal has type &lt;code&gt;char&lt;/code&gt;(until C++20)&lt;code&gt;char8_t&lt;/code&gt;(since C++20) and the value equal to ISO 10646 code point value of c-char, provided that the code point value is representable with a single UTF-8 code unit (that is, c-char is in the range 0x0-0x7F, inclusive). If c-char is not representable with a single UTF-8 code unit, the program is ill-formed.</source>
          <target state="translated">2）UTF-8字符文字，例如 &lt;code&gt;u8'a'&lt;/code&gt; 。此类文字的类型为 &lt;code&gt;char&lt;/code&gt; （直到C ++ 20） &lt;code&gt;char8_t&lt;/code&gt; （自C ++ 20起），并且值等于c-char的ISO 10646代码点值，条件是该代码点值可以用单个UTF-8代码表示单位（即c-char的范围为0x0-0x7F（包括0x0-0x7F）。如果c-char无法用单个UTF-8代码单元表示，则程序格式错误。</target>
        </trans-unit>
        <trans-unit id="be9e88a87a39032aa3c067ba42a4b3d35179387c" translate="yes" xml:space="preserve">
          <source>2) Unary left fold (... op E) becomes (((E</source>
          <target state="translated">2)一元左折(......op E)成为(((E</target>
        </trans-unit>
        <trans-unit id="41961fb00708d365837720af730227f1e7508793" translate="yes" xml:space="preserve">
          <source>2) Underflow occurs (and &lt;code&gt;&lt;a href=&quot;../../numeric/fenv/fe_exceptions&quot;&gt;FE_UNDERFLOW&lt;/a&gt;&lt;/code&gt; may be raised) if after the rounding of the result to the target floating-point type (that is, rounding to &lt;code&gt;&lt;a href=&quot;../numeric_limits&quot;&gt;std::numeric_limits&lt;/a&gt;&amp;lt;T&amp;gt;::digits&lt;/code&gt; bits), the result's absolute value is smaller than &lt;code&gt;&lt;a href=&quot;../numeric_limits&quot;&gt;std::numeric_limits&lt;/a&gt;&amp;lt;T&amp;gt;::min()&lt;/code&gt;. Formally, the absolute value of a nonzero result computed as though the exponent range were unbounded is smaller than &lt;code&gt;&lt;a href=&quot;../numeric_limits&quot;&gt;std::numeric_limits&lt;/a&gt;&amp;lt;T&amp;gt;::min()&lt;/code&gt;. Such implementation detects tinyness after rounding (e.g. SuperSparc)</source>
          <target state="translated">2）如果在将结果舍入为目标浮点类型（即，舍入为 &lt;code&gt;&lt;a href=&quot;../numeric_limits&quot;&gt;std::numeric_limits&lt;/a&gt;&amp;lt;T&amp;gt;::digits&lt;/code&gt; &amp;lt;T&amp;gt; :: digits位）后，结果的绝对值较小，则会发生下溢（并且可能会提高 &lt;code&gt;&lt;a href=&quot;../../numeric/fenv/fe_exceptions&quot;&gt;FE_UNDERFLOW&lt;/a&gt;&lt;/code&gt; ）比 &lt;code&gt;&lt;a href=&quot;../numeric_limits&quot;&gt;std::numeric_limits&lt;/a&gt;&amp;lt;T&amp;gt;::min()&lt;/code&gt; &amp;lt;T&amp;gt; :: min（）更大。形式上，计算为指数范围不受限制的非零结果的绝对值小于 &lt;code&gt;&lt;a href=&quot;../numeric_limits&quot;&gt;std::numeric_limits&lt;/a&gt;&amp;lt;T&amp;gt;::min()&lt;/code&gt; &amp;lt;T&amp;gt; :: min（）。这样的实现在四舍五入后检测到细小程度（例如SuperSparc）</target>
        </trans-unit>
        <trans-unit id="056c7ca31755058b072f2f89c93270a864830745" translate="yes" xml:space="preserve">
          <source>2) Used to obtain the sentinel type of the type &lt;code&gt;T&lt;/code&gt;.</source>
          <target state="translated">2）用于获取类型 &lt;code&gt;T&lt;/code&gt; 的前哨类型。</target>
        </trans-unit>
        <trans-unit id="c1b0681dd646343ae259502e821d37cfe07693da" translate="yes" xml:space="preserve">
          <source>2) Uses &lt;a href=&quot;list_initialization&quot;&gt;copy-list-initialization&lt;/a&gt; to construct the return value of the function.</source>
          <target state="translated">2）使用&lt;a href=&quot;list_initialization&quot;&gt;copy-list-initialization&lt;/a&gt;构造函数的返回值。</target>
        </trans-unit>
        <trans-unit id="11c95151bab62e4037704f2e8ebaf4a0bf219403" translate="yes" xml:space="preserve">
          <source>2) Uses the delete expression as the deleter. A valid delete expression must be available, i.e. &lt;code&gt;delete ptr&lt;/code&gt; must be well formed, have well-defined behavior and not throw any exceptions. Equivalent to &lt;code&gt;shared_ptr&amp;lt;T&amp;gt;(ptr).swap(*this);&lt;/code&gt;.</source>
          <target state="translated">2）使用删除表达式作为删除器。有效的delete表达式必须可用，即 &lt;code&gt;delete ptr&lt;/code&gt; 必须格式正确，具有明确定义的行为且不会引发任何异常。等效于 &lt;code&gt;shared_ptr&amp;lt;T&amp;gt;(ptr).swap(*this);&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="4e138513d3ab1d7c6f9259e0ed42b6bf151df482" translate="yes" xml:space="preserve">
          <source>2) Value assignment, equivalent to &lt;code&gt;store(desired)&lt;/code&gt;</source>
          <target state="translated">2）值分配，等于 &lt;code&gt;store(desired)&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="a10df013e9f0915b14bc450f19b61d3443e16f51" translate="yes" xml:space="preserve">
          <source>2) Variable template for &lt;code&gt;empty_view&lt;/code&gt;.</source>
          <target state="translated">2） &lt;code&gt;empty_view&lt;/code&gt; 的变量模板。</target>
        </trans-unit>
        <trans-unit id="e3a2875ae0d9153472ecdc37f03b5d1c3ad03471" translate="yes" xml:space="preserve">
          <source>2) Virtual destructor is usually required in a base class</source>
          <target state="translated">2)基类中通常需要虚拟析构器</target>
        </trans-unit>
        <trans-unit id="c29a0e8b717ed75e29ab47bcc40fdaa82b2309d1" translate="yes" xml:space="preserve">
          <source>2) When a named &lt;a href=&quot;reference#Rvalue_references&quot;&gt;rvalue reference&lt;/a&gt; variable is declared with an initializer</source>
          <target state="translated">2）使用初始化程序声明命名的&lt;a href=&quot;reference#Rvalue_references&quot;&gt;右值引用&lt;/a&gt;变量时</target>
        </trans-unit>
        <trans-unit id="c8ce328e0bb39ff88d5896c9ea941531a6c56240" translate="yes" xml:space="preserve">
          <source>2) When two functions with the same unqualified name are declared in different namespaces, and both have &lt;code&gt;&quot;C&quot;&lt;/code&gt; language linkage, the declarations refer to the same function.</source>
          <target state="translated">2）当在不同的名称空间中声明具有相同非限定名称的两个函数，并且它们都具有 &lt;code&gt;&quot;C&quot;&lt;/code&gt; 语言链接时，这些声明引用的是同一函数。</target>
        </trans-unit>
        <trans-unit id="a96294adb5fa3f90b21afdca0b3c8233e6403754" translate="yes" xml:space="preserve">
          <source>2) Wide string literal. The type of a &lt;code&gt;L&quot;...&quot;&lt;/code&gt; string literal is &lt;code&gt;const wchar_t[N]&lt;/code&gt;, where &lt;code&gt;N&lt;/code&gt; is the size of the string in code units of the execution wide encoding, including the null terminator.</source>
          <target state="translated">2）宽字符串文字。的类型的 &lt;code&gt;L&quot;...&quot;&lt;/code&gt; 字符串是 &lt;code&gt;const wchar_t[N]&lt;/code&gt; ，其中 &lt;code&gt;N&lt;/code&gt; 是在执行宽编码，包括空终止的代码单元的字符串的大小。</target>
        </trans-unit>
        <trans-unit id="d8b7ed238c60758453d42719ed9f033ea33dcb89" translate="yes" xml:space="preserve">
          <source>2) Wraps a const member function with no parameters.</source>
          <target state="translated">2)包裹一个没有参数的const成员函数。</target>
        </trans-unit>
        <trans-unit id="82be08f8e41bb938b3c303da8f2c0cf4ad97e7ae" translate="yes" xml:space="preserve">
          <source>2) Writes &lt;code&gt;count&lt;/code&gt; characters to the output sequence from the character array whose first element is pointed to by &lt;code&gt;s&lt;/code&gt;. The characters are written as if by repeated calls to &lt;code&gt;&lt;a href=&quot;sputc&quot;&gt;sputc()&lt;/a&gt;&lt;/code&gt;. Writing stops when either &lt;code&gt;count&lt;/code&gt; characters are written or a call to &lt;code&gt;&lt;a href=&quot;sputc&quot;&gt;sputc()&lt;/a&gt;&lt;/code&gt; would have returned &lt;code&gt;Traits::eof()&lt;/code&gt;.</source>
          <target state="translated">2）将 &lt;code&gt;count&lt;/code&gt; 字符写入第一个元素由 &lt;code&gt;s&lt;/code&gt; 指向的字符数组的输出序列。字符的编写就像是通过重复调用 &lt;code&gt;&lt;a href=&quot;sputc&quot;&gt;sputc()&lt;/a&gt;&lt;/code&gt; 一样。当写入 &lt;code&gt;count&lt;/code&gt; 字符或调用 &lt;code&gt;&lt;a href=&quot;sputc&quot;&gt;sputc()&lt;/a&gt;&lt;/code&gt; 会返回 &lt;code&gt;Traits::eof()&lt;/code&gt; 时，写入停止。</target>
        </trans-unit>
        <trans-unit id="66af2655e87a9e9c59e356b783a2d60c640f92a8" translate="yes" xml:space="preserve">
          <source>2) Writes characters to the output sequence &lt;code&gt;out&lt;/code&gt; which represent the value of &lt;code&gt;v&lt;/code&gt;, formatted as requested by the formatting flags &lt;code&gt;str.flags()&lt;/code&gt; and the &lt;code&gt;&lt;a href=&quot;../numpunct&quot;&gt;std::numpunct&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;../ctype&quot;&gt;std::ctype&lt;/a&gt;&lt;/code&gt; facets of the locale imbued in the stream &lt;code&gt;str&lt;/code&gt;. This function is called by all formatted output stream operators, such as &lt;code&gt;&lt;a href=&quot;../../io/cout&quot;&gt;std::cout&lt;/a&gt; &amp;lt;&amp;lt; n;&lt;/code&gt;.</source>
          <target state="translated">2）将表示 &lt;code&gt;v&lt;/code&gt; 值的 &lt;code&gt;str.flags()&lt;/code&gt; 输出序列中 &lt;code&gt;out&lt;/code&gt; 该字符的值按照格式标志str.flags（）以及流 &lt;code&gt;str&lt;/code&gt; 中插入的语言环境的 &lt;code&gt;&lt;a href=&quot;../numpunct&quot;&gt;std::numpunct&lt;/a&gt;&lt;/code&gt; 和 &lt;code&gt;&lt;a href=&quot;../ctype&quot;&gt;std::ctype&lt;/a&gt;&lt;/code&gt; 构面的要求进行格式化。所有格式化的输出流运算符都将调用此函数，例如 &lt;code&gt;&lt;a href=&quot;../../io/cout&quot;&gt;std::cout&lt;/a&gt; &amp;lt;&amp;lt; n;&lt;/code&gt; &amp;lt;&amp;lt; n; 。</target>
        </trans-unit>
        <trans-unit id="fb68e180bc5c9076b0953a9a46e57364a26f7b3a" translate="yes" xml:space="preserve">
          <source>2) Writes the results to a file stream &lt;code&gt;stream&lt;/code&gt;.</source>
          <target state="translated">2）将结果写入文件流 &lt;code&gt;stream&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="e9d0bd4175c1bf2f0c0c43a79ba1a6a29c0912cf" translate="yes" xml:space="preserve">
          <source>2) Yields the size in bytes of the object representation of the type of expression, if that expression is evaluated.</source>
          <target state="translated">2)产生表达式类型的对象表示的大小,以字节为单位,如果该表达式被评估。</target>
        </trans-unit>
        <trans-unit id="58f04a4a1a97eaf9db591eff20c86cd6c7270539" translate="yes" xml:space="preserve">
          <source>2) a copy of the &lt;code&gt;std::chrono::weekday_indexed&lt;/code&gt; object stored in &lt;code&gt;*this&lt;/code&gt;</source>
          <target state="translated">2）存储在 &lt;code&gt;*this&lt;/code&gt; 中的 &lt;code&gt;std::chrono::weekday_indexed&lt;/code&gt; 对象的副本</target>
        </trans-unit>
        <trans-unit id="d34a26780a58ee4350b0f0c7a2e4d9baecbeb883" translate="yes" xml:space="preserve">
          <source>2) a copy of the &lt;code&gt;std::chrono::weekday_last&lt;/code&gt; object stored in &lt;code&gt;*this&lt;/code&gt;</source>
          <target state="translated">2）存储在 &lt;code&gt;*this&lt;/code&gt; 中的 &lt;code&gt;std::chrono::weekday_last&lt;/code&gt; 对象的副本</target>
        </trans-unit>
        <trans-unit id="a7b1f6c13fab1c610bcf2ea7c0fa72e2704508d1" translate="yes" xml:space="preserve">
          <source>2) a copy of this duration object, with the number of ticks negated</source>
          <target state="translated">2)这个持续时间对象的一个副本,其中的ticks数被否定。</target>
        </trans-unit>
        <trans-unit id="dcb5152138c7fa69e4b774009c9b97f2edbf85ae" translate="yes" xml:space="preserve">
          <source>2) a declaration of a function at block scope (that's not a &lt;a href=&quot;namespace#Using-declarations&quot;&gt;using-declaration&lt;/a&gt;)</source>
          <target state="translated">2）在块范围内声明函数（不是&lt;a href=&quot;namespace#Using-declarations&quot;&gt;using-declaration&lt;/a&gt;）</target>
        </trans-unit>
        <trans-unit id="1a77efcd1ed046f4a26409e7bf6b31f5ae0d09f8" translate="yes" xml:space="preserve">
          <source>2) a function directly invoked by the exception handling mechanism while handling an exception that has not yet been caught exits via an exception (e.g. a destructor of some local object, or a copy constructor constructing a catch-clause parameter)</source>
          <target state="translated">2)在处理一个尚未被捕获的异常时,被异常处理机制直接调用的函数,通过异常退出(如某个局部对象的析构器,或复制构造catch-clause参数的构造函数)。</target>
        </trans-unit>
        <trans-unit id="d6739c9b1964142e8846c31adb098c5b9114a60a" translate="yes" xml:space="preserve">
          <source>2) additional copies of &lt;code&gt;value&lt;/code&gt; are appended</source>
          <target state="translated">2）的额外拷贝 &lt;code&gt;value&lt;/code&gt; 被附加</target>
        </trans-unit>
        <trans-unit id="0be286efeb0ed06601c983729d7755efd172d770" translate="yes" xml:space="preserve">
          <source>2) adds &lt;code&gt;const&lt;/code&gt;.</source>
          <target state="translated">2）添加 &lt;code&gt;const&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="77c1cb5073f792c06543a1b7139e1e7603aca7e7" translate="yes" xml:space="preserve">
          <source>2) all C streams are flushed and closed</source>
          <target state="translated">2)所有的C流都被冲洗和封闭了</target>
        </trans-unit>
        <trans-unit id="d6324e66394574789cab02decb32e99d55fbb6dd" translate="yes" xml:space="preserve">
          <source>2) allocated buffer size (the beginning of the buffer does not need a special data member, it may be stored in the inherited pointer &lt;code&gt;&lt;a href=&quot;basic_streambuf/gptr&quot;&gt;eback()&lt;/a&gt;&lt;/code&gt;)</source>
          <target state="translated">2）分配的缓冲区大小（缓冲区的开始不需要特殊的数据成员，它可以存储在继承的指针 &lt;code&gt;&lt;a href=&quot;basic_streambuf/gptr&quot;&gt;eback()&lt;/a&gt;&lt;/code&gt; 中）</target>
        </trans-unit>
        <trans-unit id="2b1167aa9a7c025f6231e3af912f3af7dfa5d094" translate="yes" xml:space="preserve">
          <source>2) an object of type &lt;code&gt;&lt;a href=&quot;reference&quot;&gt;std::bitset::reference&lt;/a&gt;&lt;/code&gt;, which allows writing to the requested bit.</source>
          <target state="translated">2）类型为 &lt;code&gt;&lt;a href=&quot;reference&quot;&gt;std::bitset::reference&lt;/a&gt;&lt;/code&gt; 的对象，该对象允许写入请求的位。</target>
        </trans-unit>
        <trans-unit id="cf7b40054eb1c9e4f754b5453651c07e5d31d0b3" translate="yes" xml:space="preserve">
          <source>2) attempts to convert the &lt;code&gt;externT&lt;/code&gt; characters from the character array defined by &lt;code&gt;[from, from_end)&lt;/code&gt;, given initial conversion state &lt;code&gt;state&lt;/code&gt;, to at most &lt;code&gt;max&lt;/code&gt;&lt;code&gt;internT&lt;/code&gt; characters, and returns the number of &lt;code&gt;externT&lt;/code&gt; characters that such conversion would consume. Modifies &lt;code&gt;state&lt;/code&gt; as if by executing &lt;code&gt;do_in(state, from, from_end, from, to, to+max, to)&lt;/code&gt; for some imaginary &lt;code&gt;[to, to+max)&lt;/code&gt; output buffer.</source>
          <target state="translated">2）在给定初始转换状态 &lt;code&gt;state&lt;/code&gt; 的情况下，尝试将 &lt;code&gt;[from, from_end)&lt;/code&gt; 定义的字符数组中的 &lt;code&gt;externT&lt;/code&gt; 字符转换为最多 &lt;code&gt;max&lt;/code&gt; 个 &lt;code&gt;internT&lt;/code&gt; 字符，并返回此类转换将消耗的 &lt;code&gt;externT&lt;/code&gt; 字符数。好像通过对某些假想的 &lt;code&gt;[to, to+max)&lt;/code&gt; 输出缓冲区执行 &lt;code&gt;do_in(state, from, from_end, from, to, to+max, to)&lt;/code&gt; 来修改 &lt;code&gt;state&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="01558284619f4fae390cae47f474668f6cbe82d9" translate="yes" xml:space="preserve">
          <source>2) attribute with a namespace, such as &lt;code&gt;[[gnu::unused]]&lt;/code&gt;</source>
          <target state="translated">2）具有名称空间的属性，例如 &lt;code&gt;[[gnu::unused]]&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="d38cc158f020fe363e0e7d5e3c35d177e155dae2" translate="yes" xml:space="preserve">
          <source>2) average case linear worst case quadratic in distance between &lt;code&gt;first&lt;/code&gt; and &lt;code&gt;last&lt;/code&gt;</source>
          <target state="translated">2）平均情况直线之间的距离最坏的情况下二次 &lt;code&gt;first&lt;/code&gt; 和 &lt;code&gt;last&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="2cf7ae39809692ef985348cfe0b01a2972cbd32b" translate="yes" xml:space="preserve">
          <source>2) bitwise AND</source>
          <target state="translated">2)位性AND</target>
        </trans-unit>
        <trans-unit id="917e9313c6fe9305ed1ce14d0a1c000bca25cdc7" translate="yes" xml:space="preserve">
          <source>2) by the members and friends(until C++17) of any class derived from &lt;code&gt;Base&lt;/code&gt;, but only when operating on an object of a type that is derived from &lt;code&gt;Base&lt;/code&gt; (including &lt;code&gt;this&lt;/code&gt;)</source>
          <target state="translated">2）由从 &lt;code&gt;Base&lt;/code&gt; 派生的任何类的成员和朋友（直到C ++ 17），但仅当对从 &lt;code&gt;Base&lt;/code&gt; 派生的类型的对象（包括 &lt;code&gt;this&lt;/code&gt; ）进行操作时</target>
        </trans-unit>
        <trans-unit id="b0521420c91cdfff77257c87adc6c76f6433608a" translate="yes" xml:space="preserve">
          <source>2) calls &lt;code&gt;&lt;a href=&quot;../byte/strtof&quot;&gt;std::strtod&lt;/a&gt;(str.c_str(), &amp;amp;ptr)&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;../wide/wcstof&quot;&gt;std::wcstod&lt;/a&gt;(str.c_str(), &amp;amp;ptr)&lt;/code&gt;</source>
          <target state="translated">2）调用 &lt;code&gt;&lt;a href=&quot;../byte/strtof&quot;&gt;std::strtod&lt;/a&gt;(str.c_str(), &amp;amp;ptr)&lt;/code&gt; 或 &lt;code&gt;&lt;a href=&quot;../wide/wcstof&quot;&gt;std::wcstod&lt;/a&gt;(str.c_str(), &amp;amp;ptr)&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="ecc50aee5b5ce757053b94146270424166e2c821" translate="yes" xml:space="preserve">
          <source>2) calls &lt;code&gt;&lt;a href=&quot;../byte/strtol&quot;&gt;std::strtol&lt;/a&gt;(str.c_str(), &amp;amp;ptr, base)&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;../wide/wcstol&quot;&gt;std::wcstol&lt;/a&gt;(str.c_str(), &amp;amp;ptr, base)&lt;/code&gt;</source>
          <target state="translated">2）调用 &lt;code&gt;&lt;a href=&quot;../byte/strtol&quot;&gt;std::strtol&lt;/a&gt;(str.c_str(), &amp;amp;ptr, base)&lt;/code&gt; 或 &lt;code&gt;&lt;a href=&quot;../wide/wcstol&quot;&gt;std::wcstol&lt;/a&gt;(str.c_str(), &amp;amp;ptr, base)&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="3c249120747da0d4828fd641dcd88f54ce3314ec" translate="yes" xml:space="preserve">
          <source>2) calls &lt;code&gt;&lt;a href=&quot;../byte/strtoul&quot;&gt;std::strtoull&lt;/a&gt;(str.c_str(), &amp;amp;ptr, base)&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;../wide/wcstoul&quot;&gt;std::wcstoull&lt;/a&gt;(str.c_str(), &amp;amp;ptr, base)&lt;/code&gt;</source>
          <target state="translated">2）调用 &lt;code&gt;&lt;a href=&quot;../byte/strtoul&quot;&gt;std::strtoull&lt;/a&gt;(str.c_str(), &amp;amp;ptr, base)&lt;/code&gt; 或 &lt;code&gt;&lt;a href=&quot;../wide/wcstoul&quot;&gt;std::wcstoull&lt;/a&gt;(str.c_str(), &amp;amp;ptr, base)&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="f476f1b473d513799e1fda6615dbe01673d2b3bb" translate="yes" xml:space="preserve">
          <source>2) calls &lt;code&gt;buf.set_emit_on_sync(false)&lt;/code&gt;</source>
          <target state="translated">2）调用 &lt;code&gt;buf.set_emit_on_sync(false)&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="dc3e098ebd99b1fbf8ea67cf00bf2d155646c454" translate="yes" xml:space="preserve">
          <source>2) case label in a &lt;a href=&quot;switch&quot;&gt;switch&lt;/a&gt; statement;</source>
          <target state="translated">2）&lt;a href=&quot;switch&quot;&gt;switch&lt;/a&gt;语句中的案例标签；</target>
        </trans-unit>
        <trans-unit id="3a69a6f3529b5647edf421af5578258207f416ec" translate="yes" xml:space="preserve">
          <source>2) class types with trivial default constructors and trivial destructors declared without initializers</source>
          <target state="translated">2)类类型具有琐碎的默认构造函数和琐碎的反构造函数,没有初始化器的声明</target>
        </trans-unit>
        <trans-unit id="cacc01b059fe15e1b8839f6d680fd21c86299d7e" translate="yes" xml:space="preserve">
          <source>2) compound statements;</source>
          <target state="translated">2)复合报表。</target>
        </trans-unit>
        <trans-unit id="47e0994774c3ad8efaaa35e819143ffb77306134" translate="yes" xml:space="preserve">
          <source>2) const rvalue reference overload is deleted to disallow rvalue arguments</source>
          <target state="translated">2)删去const rvalue引用重载,不允许使用rvalue参数。</target>
        </trans-unit>
        <trans-unit id="9268cbb9d1e8f2ae2abf9d99805de2adbac5a42a" translate="yes" xml:space="preserve">
          <source>2) constructs an object of type &lt;code&gt;&lt;a href=&quot;../../types/decay&quot;&gt;std::decay_t&lt;/a&gt;&amp;lt;ValueType&amp;gt;&lt;/code&gt;, &lt;a href=&quot;../../language/direct_initialization&quot;&gt;direct-non-list-initialized&lt;/a&gt; from &lt;code&gt;il, &lt;a href=&quot;../forward&quot;&gt;std::forward&lt;/a&gt;&amp;lt;Args&amp;gt;(args)...&lt;/code&gt;, as the contained object. This overload only participates in overload resolution if &lt;code&gt;&lt;a href=&quot;../../types/is_constructible&quot;&gt;std::is_constructible_v&lt;/a&gt;&amp;lt;&lt;a href=&quot;../../types/decay&quot;&gt;std::decay_t&lt;/a&gt;&amp;lt;ValueType&amp;gt;, &lt;a href=&quot;../initializer_list&quot;&gt;std::initializer_list&lt;/a&gt;&amp;lt;U&amp;gt;&amp;amp;, Args...&amp;gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;../../types/is_copy_constructible&quot;&gt;std::is_copy_constructible_v&lt;/a&gt;&amp;lt;&lt;a href=&quot;../../types/decay&quot;&gt;std::decay_t&lt;/a&gt;&amp;lt;ValueType&amp;gt;&amp;gt;&lt;/code&gt; are both &lt;code&gt;true&lt;/code&gt;.</source>
          <target state="translated">2）构建体类型的对象 &lt;code&gt;&lt;a href=&quot;../../types/decay&quot;&gt;std::decay_t&lt;/a&gt;&amp;lt;ValueType&amp;gt;&lt;/code&gt; ，&lt;a href=&quot;../../language/direct_initialization&quot;&gt;直接非列表初始化&lt;/a&gt;从 &lt;code&gt;il, &lt;a href=&quot;../forward&quot;&gt;std::forward&lt;/a&gt;&amp;lt;Args&amp;gt;(args)...&lt;/code&gt; ，作为所包含的对象。仅当 &lt;code&gt;&lt;a href=&quot;../../types/is_constructible&quot;&gt;std::is_constructible_v&lt;/a&gt;&amp;lt;&lt;a href=&quot;../../types/decay&quot;&gt;std::decay_t&lt;/a&gt;&amp;lt;ValueType&amp;gt;, &lt;a href=&quot;../initializer_list&quot;&gt;std::initializer_list&lt;/a&gt;&amp;lt;U&amp;gt;&amp;amp;, Args...&amp;gt;&lt;/code&gt; 和 &lt;code&gt;&lt;a href=&quot;../../types/is_copy_constructible&quot;&gt;std::is_copy_constructible_v&lt;/a&gt;&amp;lt;&lt;a href=&quot;../../types/decay&quot;&gt;std::decay_t&lt;/a&gt;&amp;lt;ValueType&amp;gt;&amp;gt;&lt;/code&gt; 是都是 &lt;code&gt;true&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="f6b432dab38092bde1f129853c4eec5b529f802a" translate="yes" xml:space="preserve">
          <source>2) constructs the container with the contents of the range &lt;code&gt;[first, last)&lt;/code&gt;. Sets &lt;code&gt;max_load_factor()&lt;/code&gt; to 1.0.</source>
          <target state="translated">2）用范围 &lt;code&gt;[first, last)&lt;/code&gt; 的内容构造容器。将 &lt;code&gt;max_load_factor()&lt;/code&gt; 设置为1.0。</target>
        </trans-unit>
        <trans-unit id="62f4f2991fefcca16e226626cf3ebd69b1d81898" translate="yes" xml:space="preserve">
          <source>2) constructs the container with the contents of the range &lt;code&gt;[first, last)&lt;/code&gt;. Sets &lt;code&gt;max_load_factor()&lt;/code&gt; to 1.0. If multiple elements in the range have keys that compare equivalent, it is unspecified which element is inserted (pending &lt;a href=&quot;http://wg21.link/lwg2844&quot;&gt;LWG2844&lt;/a&gt;).</source>
          <target state="translated">2）用范围 &lt;code&gt;[first, last)&lt;/code&gt; 的内容构造容器。将 &lt;code&gt;max_load_factor()&lt;/code&gt; 设置为1.0。如果范围中的多个元素具有比较等效项的键，则未指定要插入哪个元素（待定&lt;a href=&quot;http://wg21.link/lwg2844&quot;&gt;LWG2844&lt;/a&gt;）。</target>
        </trans-unit>
        <trans-unit id="5d77c666dae232bb4a839f2c318c7defedbce010" translate="yes" xml:space="preserve">
          <source>2) control information: flags that control formatting of both input and output sequences and the imbued locale</source>
          <target state="translated">2)控制信息:控制输入和输出序列的格式化以及注入的locale的标志。</target>
        </trans-unit>
        <trans-unit id="473e0ed1d382ee82a31f797c07d4f95fa3c33b65" translate="yes" xml:space="preserve">
          <source>2) copy constructor is deleted; &lt;code&gt;&lt;a href=&quot;../facet&quot;&gt;std::locale::facet&lt;/a&gt;&lt;/code&gt; is not copyable.</source>
          <target state="translated">2）复制构造函数被删除； &lt;code&gt;&lt;a href=&quot;../facet&quot;&gt;std::locale::facet&lt;/a&gt;&lt;/code&gt; 不可复制。</target>
        </trans-unit>
        <trans-unit id="9bd8f9603471cf7f157350f038ce21151ef6f49b" translate="yes" xml:space="preserve">
          <source>2) copy constructor is deleted; &lt;code&gt;&lt;a href=&quot;../id&quot;&gt;std::locale::id&lt;/a&gt;&lt;/code&gt; is not copyable.</source>
          <target state="translated">2）复制构造函数被删除； &lt;code&gt;&lt;a href=&quot;../id&quot;&gt;std::locale::id&lt;/a&gt;&lt;/code&gt; 不可复制。</target>
        </trans-unit>
        <trans-unit id="396006b0bd215875c55d5929e74c63edfb2ed272" translate="yes" xml:space="preserve">
          <source>2) disables the &lt;code&gt;showbase&lt;/code&gt; flag in the stream &lt;code&gt;str&lt;/code&gt; as if by calling &lt;code&gt;str.unsetf(&lt;a href=&quot;../ios_base/fmtflags&quot;&gt;std::ios_base::showbase&lt;/a&gt;)&lt;/code&gt;.</source>
          <target state="translated">2）禁用流 &lt;code&gt;str&lt;/code&gt; 中的 &lt;code&gt;showbase&lt;/code&gt; 标志，就像通过调用 &lt;code&gt;str.unsetf(&lt;a href=&quot;../ios_base/fmtflags&quot;&gt;std::ios_base::showbase&lt;/a&gt;)&lt;/code&gt; &lt;a href=&quot;../ios_base/fmtflags&quot;&gt;std :: ios_base :: showbase&lt;/a&gt;）一样。</target>
        </trans-unit>
        <trans-unit id="ea089be7fb3dd90f719ef73bf77145d14addb599" translate="yes" xml:space="preserve">
          <source>2) disables the &lt;code&gt;showpoint&lt;/code&gt; flag in the stream &lt;code&gt;str&lt;/code&gt; as if by calling &lt;code&gt;str.unsetf(&lt;a href=&quot;../ios_base/fmtflags&quot;&gt;std::ios_base::showpoint&lt;/a&gt;)&lt;/code&gt;</source>
          <target state="translated">2）禁用流 &lt;code&gt;str&lt;/code&gt; 中的 &lt;code&gt;showpoint&lt;/code&gt; 标志，就像通过调用 &lt;code&gt;str.unsetf(&lt;a href=&quot;../ios_base/fmtflags&quot;&gt;std::ios_base::showpoint&lt;/a&gt;)&lt;/code&gt; &lt;a href=&quot;../ios_base/fmtflags&quot;&gt;std :: ios_base :: showpoint&lt;/a&gt;）</target>
        </trans-unit>
        <trans-unit id="f8d6e35d033a29ee999c97df16b555d1e1f857e0" translate="yes" xml:space="preserve">
          <source>2) disables the &lt;code&gt;showpos&lt;/code&gt; flag in the stream &lt;code&gt;str&lt;/code&gt; as if by calling &lt;code&gt;str.unsetf(&lt;a href=&quot;../ios_base/fmtflags&quot;&gt;std::ios_base::showpos&lt;/a&gt;)&lt;/code&gt;.</source>
          <target state="translated">2）禁用流 &lt;code&gt;str&lt;/code&gt; 中的 &lt;code&gt;showpos&lt;/code&gt; 标志，就像通过调用 &lt;code&gt;str.unsetf(&lt;a href=&quot;../ios_base/fmtflags&quot;&gt;std::ios_base::showpos&lt;/a&gt;)&lt;/code&gt; &lt;a href=&quot;../ios_base/fmtflags&quot;&gt;std :: ios_base :: showpos&lt;/a&gt;）一样。</target>
        </trans-unit>
        <trans-unit id="01e2d044e2d50726f863fa86ebcfc98bb6b76a02" translate="yes" xml:space="preserve">
          <source>2) disables the &lt;code&gt;skipws&lt;/code&gt; flag in the stream &lt;code&gt;str&lt;/code&gt; as if by calling &lt;code&gt;str.unsetf(&lt;a href=&quot;../ios_base/fmtflags&quot;&gt;std::ios_base::skipws&lt;/a&gt;)&lt;/code&gt;.</source>
          <target state="translated">2）就像通过调用 &lt;code&gt;str.unsetf(&lt;a href=&quot;../ios_base/fmtflags&quot;&gt;std::ios_base::skipws&lt;/a&gt;)&lt;/code&gt; &lt;a href=&quot;../ios_base/fmtflags&quot;&gt;std :: ios_base :: skipws&lt;/a&gt;）禁用流 &lt;code&gt;str&lt;/code&gt; 中的 &lt;code&gt;skipws&lt;/code&gt; 标志。</target>
        </trans-unit>
        <trans-unit id="830ed3861a4df7ae908b1e848e8fa4ea0500a122" translate="yes" xml:space="preserve">
          <source>2) disables the &lt;code&gt;unitbuf&lt;/code&gt; flag in the stream &lt;code&gt;str&lt;/code&gt; as if by calling &lt;code&gt;str.unsetf(&lt;a href=&quot;../ios_base/fmtflags&quot;&gt;std::ios_base::unitbuf&lt;/a&gt;)&lt;/code&gt;.</source>
          <target state="translated">2）禁用流 &lt;code&gt;str&lt;/code&gt; 中的 &lt;code&gt;unitbuf&lt;/code&gt; 标志，就像通过调用 &lt;code&gt;str.unsetf(&lt;a href=&quot;../ios_base/fmtflags&quot;&gt;std::ios_base::unitbuf&lt;/a&gt;)&lt;/code&gt; &lt;a href=&quot;../ios_base/fmtflags&quot;&gt;std :: ios_base :: unitbuf&lt;/a&gt;）一样。</target>
        </trans-unit>
        <trans-unit id="df759cba18f24a52c289d053ce0420ec880cefe1" translate="yes" xml:space="preserve">
          <source>2) disables the &lt;code&gt;uppercase&lt;/code&gt; flag in the stream &lt;code&gt;str&lt;/code&gt; as if by calling &lt;code&gt;str.unsetf(&lt;a href=&quot;../ios_base/fmtflags&quot;&gt;std::ios_base::uppercase&lt;/a&gt;)&lt;/code&gt;.</source>
          <target state="translated">2）禁用流 &lt;code&gt;str&lt;/code&gt; 中的 &lt;code&gt;uppercase&lt;/code&gt; 标志，就像通过调用 &lt;code&gt;str.unsetf(&lt;a href=&quot;../ios_base/fmtflags&quot;&gt;std::ios_base::uppercase&lt;/a&gt;)&lt;/code&gt; &lt;a href=&quot;../ios_base/fmtflags&quot;&gt;std :: ios_base :: uppercase&lt;/a&gt;）一样。</target>
        </trans-unit>
        <trans-unit id="80336a7030dd6d36dd046135aa4d22da3f45e952" translate="yes" xml:space="preserve">
          <source>2) disjunctions</source>
          <target state="translated">(2)分词</target>
        </trans-unit>
        <trans-unit id="5c21314f84712eeb476d7ec135879bf2bfabaa49" translate="yes" xml:space="preserve">
          <source>2) division</source>
          <target state="translated">2)分割</target>
        </trans-unit>
        <trans-unit id="8128a517db1b59c5831edee42b0cf151beb26496" translate="yes" xml:space="preserve">
          <source>2) elaborated type specifier for a enumeration type</source>
          <target state="translated">2)枚举类型的详细类型说明者。</target>
        </trans-unit>
        <trans-unit id="8377f82ef52c02c38207b4d52ec015819e7bd77b" translate="yes" xml:space="preserve">
          <source>2) floating-point literal, returns a floating-point duration equivalent to &lt;code&gt;&lt;a href=&quot;duration&quot;&gt;std::chrono::hours&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">2）浮点文字，返回等于 &lt;code&gt;&lt;a href=&quot;duration&quot;&gt;std::chrono::hours&lt;/a&gt;&lt;/code&gt; 的浮点持续时间</target>
        </trans-unit>
        <trans-unit id="b12f1f31e0a00498b42c89d5162c64b275deed11" translate="yes" xml:space="preserve">
          <source>2) floating-point literal, returns a floating-point duration equivalent to &lt;code&gt;&lt;a href=&quot;duration&quot;&gt;std::chrono::microseconds&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">2）浮点文字，返回等于 &lt;code&gt;&lt;a href=&quot;duration&quot;&gt;std::chrono::microseconds&lt;/a&gt;&lt;/code&gt; 的浮点持续时间</target>
        </trans-unit>
        <trans-unit id="bf29beb4a159551ee80a7ff99c9dff5b717bc0c3" translate="yes" xml:space="preserve">
          <source>2) floating-point literal, returns a floating-point duration equivalent to &lt;code&gt;&lt;a href=&quot;duration&quot;&gt;std::chrono::milliseconds&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">2）浮点文字，返回等于 &lt;code&gt;&lt;a href=&quot;duration&quot;&gt;std::chrono::milliseconds&lt;/a&gt;&lt;/code&gt; 的浮点持续时间</target>
        </trans-unit>
        <trans-unit id="0f0d687244388427a907f0080302cf11c3885f50" translate="yes" xml:space="preserve">
          <source>2) floating-point literal, returns a floating-point duration equivalent to &lt;code&gt;&lt;a href=&quot;duration&quot;&gt;std::chrono::minutes&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">2）浮点文字，返回等于 &lt;code&gt;&lt;a href=&quot;duration&quot;&gt;std::chrono::minutes&lt;/a&gt;&lt;/code&gt; 的浮点持续时间</target>
        </trans-unit>
        <trans-unit id="7b9aff7642fac0c3d46f0b1ce848886720f4a928" translate="yes" xml:space="preserve">
          <source>2) floating-point literal, returns a floating-point duration equivalent to &lt;code&gt;&lt;a href=&quot;duration&quot;&gt;std::chrono::nanoseconds&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">2）浮点文字，返回等于 &lt;code&gt;&lt;a href=&quot;duration&quot;&gt;std::chrono::nanoseconds&lt;/a&gt;&lt;/code&gt; 的浮点持续时间</target>
        </trans-unit>
        <trans-unit id="e222c60ec7dacdbddc32c2115494185b0615426b" translate="yes" xml:space="preserve">
          <source>2) floating-point literal, returns a floating-point duration equivalent to &lt;code&gt;&lt;a href=&quot;duration&quot;&gt;std::chrono::seconds&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">2）浮点文字，返回等于 &lt;code&gt;&lt;a href=&quot;duration&quot;&gt;std::chrono::seconds&lt;/a&gt;&lt;/code&gt; 的浮点持续时间</target>
        </trans-unit>
        <trans-unit id="2ee8b074561a5f3f646fcbcedde42cf80cc7620c" translate="yes" xml:space="preserve">
          <source>2) forms a literal &lt;code&gt;&lt;a href=&quot;../complex&quot;&gt;std::complex&lt;/a&gt;&amp;lt;float&amp;gt;&lt;/code&gt; with the real part zero and imaginary part &lt;code&gt;arg&lt;/code&gt;</source>
          <target state="translated">2）形成一个文字 &lt;code&gt;&lt;a href=&quot;../complex&quot;&gt;std::complex&lt;/a&gt;&amp;lt;float&amp;gt;&lt;/code&gt; ，其实部为零，虚部为 &lt;code&gt;arg&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="79b55506fece8f977c8c2b7f39816a4ddf769c23" translate="yes" xml:space="preserve">
          <source>2) if &lt;code&gt;E2&lt;/code&gt; is a pointer to member function, the result is a special kind of prvalue designating that member function that can only be used as the left-hand operand of a member function call operator, and for no other purpose;</source>
          <target state="translated">2）如果 &lt;code&gt;E2&lt;/code&gt; 是指向成员函数的指针，则结果是一种特殊的prvalue，它指定该成员函数只能用作成员函数调用运算符的左侧操作数，而不能用于其他目的；</target>
        </trans-unit>
        <trans-unit id="3f4528db942063533e667fd6958b5f4ed40d06f3" translate="yes" xml:space="preserve">
          <source>2) if &lt;code&gt;T&lt;/code&gt; is a pointer to member function of class &lt;code&gt;T0&lt;/code&gt; that takes no arguments, then &lt;code&gt;argument_type&lt;/code&gt; is &lt;code&gt;T0*&lt;/code&gt;, possibly cv-qualified</source>
          <target state="translated">2）如果 &lt;code&gt;T&lt;/code&gt; 是指向不带任何参数的类 &lt;code&gt;T0&lt;/code&gt; 的成员函数的指针，则 &lt;code&gt;argument_type&lt;/code&gt; 为 &lt;code&gt;T0*&lt;/code&gt; ，可能是cv限定的</target>
        </trans-unit>
        <trans-unit id="4d3e032823b314823fde43f6d99a328a7b9894f9" translate="yes" xml:space="preserve">
          <source>2) if &lt;code&gt;T&lt;/code&gt; is a pointer to member function of class &lt;code&gt;T0&lt;/code&gt; that takes one argument &lt;code&gt;A1&lt;/code&gt;, then &lt;code&gt;second_argument_type&lt;/code&gt; is &lt;code&gt;A1&lt;/code&gt;, possibly cv-qualified</source>
          <target state="translated">2）如果 &lt;code&gt;T&lt;/code&gt; 是使用一个参数 &lt;code&gt;A1&lt;/code&gt; 的类 &lt;code&gt;T0&lt;/code&gt; 的成员函数的指针，则 &lt;code&gt;second_argument_type&lt;/code&gt; 是 &lt;code&gt;A1&lt;/code&gt; ，可能是cv限定的</target>
        </trans-unit>
        <trans-unit id="d98e4582962c58e5be233886dc5d9025bc1d8d0c" translate="yes" xml:space="preserve">
          <source>2) if &lt;code&gt;T&lt;/code&gt; is a pointer to member function of class &lt;code&gt;T0&lt;/code&gt; that takes one argument, then &lt;code&gt;first_argument_type&lt;/code&gt; is &lt;code&gt;T0*&lt;/code&gt;, possibly cv-qualified</source>
          <target state="translated">2）如果 &lt;code&gt;T&lt;/code&gt; 是指向带有一个参数的类 &lt;code&gt;T0&lt;/code&gt; 的成员函数的指针，则 &lt;code&gt;first_argument_type&lt;/code&gt; 为 &lt;code&gt;T0*&lt;/code&gt; ，可能是cv限定的</target>
        </trans-unit>
        <trans-unit id="8f4d29ee073785a8e8a69bfa088887f404fc9621" translate="yes" xml:space="preserve">
          <source>2) if the encoding represented by this &lt;code&gt;codecvt&lt;/code&gt; facet is state-dependent, and &lt;code&gt;state&lt;/code&gt; represents a conversion state that is not the initial shift state, writes the characters necessary to return to the initial shift state. The characters are written to a character array whose first element is pointed to by &lt;code&gt;to&lt;/code&gt;. No more than &lt;code&gt;to_end-to&lt;/code&gt; characters are written. The parameter &lt;code&gt;to_next&lt;/code&gt; is updated to point one past the last character written.</source>
          <target state="translated">2）如果此 &lt;code&gt;codecvt&lt;/code&gt; 构面表示的编码与 &lt;code&gt;state&lt;/code&gt; ，并且state表示不是初始转换状态的转换状态，请写入返回初始转换状态所需的字符。字符被写入一个字符数组，其第一个元素由 &lt;code&gt;to&lt;/code&gt; 。不超过 &lt;code&gt;to_end-to&lt;/code&gt; 写入字符。参数 &lt;code&gt;to_next&lt;/code&gt; 更新为指向最后写入的字符后的一个。</target>
        </trans-unit>
        <trans-unit id="28d8548256bf1d499db58bc732188e8cdc34c77d" translate="yes" xml:space="preserve">
          <source>2) if the encoding represented by this codecvt facet maps each internal character to the same, constant number of external characters, returns that number. If the encoding is variable-length (e.g. UTF-8 or UTF-16), returns &lt;code&gt;​0​&lt;/code&gt;. If the encoding is state-dependent, returns &lt;code&gt;-1&lt;/code&gt;.</source>
          <target state="translated">2）如果此编解码器构面表示的编码将每个内部字符映射到相同，恒定数量的外部字符，则返回该数字。如果编码是可变长度（例如UTF-8或UTF-16），返回 &lt;code&gt;​0​&lt;/code&gt; 。如果编码与状态有关，则返回 &lt;code&gt;-1&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="08eeb0877191f1272e5eed218f6c93d52d399e44" translate="yes" xml:space="preserve">
          <source>2) initialization of an object of non-class type with a single brace-enclosed initializer (note: for class types and other uses of braced-init-list, see &lt;a href=&quot;list_initialization&quot;&gt;list-initialization&lt;/a&gt;)</source>
          <target state="translated">2）使用单个大括号括起来的初始化程序初始化非类类型的对象（注意：有关类类型和大括号初始化列表的其他用法，请参见&lt;a href=&quot;list_initialization&quot;&gt;列表初始化&lt;/a&gt;）</target>
        </trans-unit>
        <trans-unit id="585964c490ac88716b76a845d5cadea440830d95" translate="yes" xml:space="preserve">
          <source>2) initialization of an unnamed temporary with a</source>
          <target state="translated">2)对一个未命名的临时机构进行初始化,并添加一个</target>
        </trans-unit>
        <trans-unit id="1b6bff53e82250c6f4273af8416bffa5d1585880" translate="yes" xml:space="preserve">
          <source>2) iterator pointing to the character immediately following the character erased, or &lt;code&gt;end()&lt;/code&gt; if no such character exists</source>
          <target state="translated">2）迭代器指向立即删​​除的字符之后的字符，如果不存在此类字符，则返回 &lt;code&gt;end()&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="8b678b5b22484ed40a0467b3073907ad86d0cfa2" translate="yes" xml:space="preserve">
          <source>2) linear in size of &lt;code&gt;str&lt;/code&gt;</source>
          <target state="translated">2） &lt;code&gt;str&lt;/code&gt; 大小线性</target>
        </trans-unit>
        <trans-unit id="1a4523cc0aae262f701a5c62cdf70900862b2ab7" translate="yes" xml:space="preserve">
          <source>2) linear in the size of &lt;code&gt;this&lt;/code&gt; (formally, each CharT has to be destroyed). If allocators do not compare equal and do not propagate, then also linear in the size of &lt;code&gt;str&lt;/code&gt; (copy must be made)</source>
          <target state="translated">2）线性中的大小 &lt;code&gt;this&lt;/code&gt; （正式地说，每个图表已被破坏）。如果分配器的比较不相等且不传播，则 &lt;code&gt;str&lt;/code&gt; 的大小也呈线性（必须进行复制）</target>
        </trans-unit>
        <trans-unit id="4e280b0c39065f539943713b34d12de8fe15d5b8" translate="yes" xml:space="preserve">
          <source>2) log(a.size())</source>
          <target state="translated">2)log(a.size())</target>
        </trans-unit>
        <trans-unit id="1379bd25758af5980d6e604ffcaf7e06c26ae1d6" translate="yes" xml:space="preserve">
          <source>2) lvalue of any type &lt;code&gt;T&lt;/code&gt; may be converted to a lvalue or rvalue reference to the same type &lt;code&gt;T&lt;/code&gt;, more or less cv-qualified. Likewise, an rvalue may be converted to a more or less cv-qualified rvalue reference. The result of a reference &lt;code&gt;const_cast&lt;/code&gt; refers to the original object if expression is a glvalue and to the &lt;a href=&quot;implicit_cast#Temporary_materialization&quot;&gt;materialized temporary&lt;/a&gt; otherwise(since C++17).</source>
          <target state="translated">2）任何类型的左值 &lt;code&gt;T&lt;/code&gt; 可以被转换为一个左值或右值引用到相同类型 &lt;code&gt;T&lt;/code&gt; ，更多或更少的CV-合格。同样，右值可以转换为或多或少的cv限定右值引用。如果expression是glvalue，则引用 &lt;code&gt;const_cast&lt;/code&gt; 的结果将引用原始对象，否则将引用实例&lt;a href=&quot;implicit_cast#Temporary_materialization&quot;&gt;化的临时对象&lt;/a&gt;（自C ++ 17起）。</target>
        </trans-unit>
        <trans-unit id="7f9e3952e5b6d2c8c74148b79121eba39f85c9e8" translate="yes" xml:space="preserve">
          <source>2) may throw &lt;code&gt;&lt;a href=&quot;../../../io/ios_base/failure&quot;&gt;std::ios_base::failure&lt;/a&gt;&lt;/code&gt; on bad input.</source>
          <target state="translated">2）可能在输入 &lt;code&gt;&lt;a href=&quot;../../../io/ios_base/failure&quot;&gt;std::ios_base::failure&lt;/a&gt;&lt;/code&gt; 时引发std :: ios_base :: failure。</target>
        </trans-unit>
        <trans-unit id="aa25d9823fb0d85b3d522883742bda293bd67276" translate="yes" xml:space="preserve">
          <source>2) may throw &lt;code&gt;&lt;a href=&quot;../../io/ios_base/failure&quot;&gt;std::ios_base::failure&lt;/a&gt;&lt;/code&gt; if no characters are extracted from &lt;code&gt;is&lt;/code&gt; (e.g the stream is at end of file, or consists of whitespace only), or if an exception is thrown during input.</source>
          <target state="translated">2）可以抛出 &lt;code&gt;&lt;a href=&quot;../../io/ios_base/failure&quot;&gt;std::ios_base::failure&lt;/a&gt;&lt;/code&gt; 如果没有字符被提取从 &lt;code&gt;is&lt;/code&gt; （例如流位于文件的末尾，或仅由空白的），或者如果一个异常被输入期间抛出。</target>
        </trans-unit>
        <trans-unit id="45c022142f0968e893d85127c3f2d5f098a97b3f" translate="yes" xml:space="preserve">
          <source>2) meets the &lt;a href=&quot;../../named_req/transformationtrait&quot;&gt;TransformationTrait&lt;/a&gt; requirements with a member typedef &lt;code&gt;type&lt;/code&gt; equal to the type of the alternative with index &lt;code&gt;I&lt;/code&gt;</source>
          <target state="translated">2）满足&lt;a href=&quot;../../named_req/transformationtrait&quot;&gt;TransformationTrait&lt;/a&gt;要求，成员typedef &lt;code&gt;type&lt;/code&gt; 等于具有索引 &lt;code&gt;I&lt;/code&gt; 的替代类型</target>
        </trans-unit>
        <trans-unit id="d8bcea9e674521c4899dd60c9eca9cb5f872efd5" translate="yes" xml:space="preserve">
          <source>2) meets the &lt;a href=&quot;../../named_req/unarytypetrait&quot;&gt;UnaryTypeTrait&lt;/a&gt; requirements with a BaseCharacteristic of &lt;code&gt;std::integral_constant&amp;lt;std::size_t, sizeof...(Types)&amp;gt;&lt;/code&gt;</source>
          <target state="translated">2）符合&lt;a href=&quot;../../named_req/unarytypetrait&quot;&gt;UnaryTypeTrait&lt;/a&gt;要求，其BaseCharacteristic为 &lt;code&gt;std::integral_constant&amp;lt;std::size_t, sizeof...(Types)&amp;gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="7b0922619c98ef3bf3372e9384eca35939556879" translate="yes" xml:space="preserve">
          <source>2) member functions</source>
          <target state="translated">2)成员职能</target>
        </trans-unit>
        <trans-unit id="fb4b2188b3d1b79a923bf27b35991a95b8e14a70" translate="yes" xml:space="preserve">
          <source>2) namespace-scoped friend functions (and function templates) that are declared in an associated class are visible through ADL even if they are not visible through ordinary lookup</source>
          <target state="translated">2)在关联类中声明的命名空间范围的友函数(和函数模板)通过ADL可见,即使它们通过普通的查找不可见。</target>
        </trans-unit>
        <trans-unit id="d915fbc4ed419e4439c5ad936fe45e0dedcaae04" translate="yes" xml:space="preserve">
          <source>2) negated argument, &lt;code&gt;&lt;a href=&quot;../complex&quot;&gt;std::complex&lt;/a&gt;&amp;lt;T&amp;gt;(-val.real(), -val.imag())&lt;/code&gt;</source>
          <target state="translated">2）取反的参数， &lt;code&gt;&lt;a href=&quot;../complex&quot;&gt;std::complex&lt;/a&gt;&amp;lt;T&amp;gt;(-val.real(), -val.imag())&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="16e923e3764201cfaef48dd9a7a680923e571a7c" translate="yes" xml:space="preserve">
          <source>2) non-void specialization, used to communicate objects between threads</source>
          <target state="translated">2)非虚空特化,用于线程之间的对象通信。</target>
        </trans-unit>
        <trans-unit id="3d1c3db64b3d601282a0882fa99ed29819cb2aef" translate="yes" xml:space="preserve">
          <source>2) none.</source>
          <target state="translated">2)无。</target>
        </trans-unit>
        <trans-unit id="97c56d63e57e1af1443f0668c051f87f45a87914" translate="yes" xml:space="preserve">
          <source>2) on the right-hand-side of an assignment expression</source>
          <target state="translated">2)在赋值表达式的右边</target>
        </trans-unit>
        <trans-unit id="39de1086ff80ca534b5ee60f09d0d884373b7078" translate="yes" xml:space="preserve">
          <source>2) op ...) op E</source>
          <target state="translated">2)关于...)关于E</target>
        </trans-unit>
        <trans-unit id="dacfb6cd3e6ec129fc896095f6537b2598811395" translate="yes" xml:space="preserve">
          <source>2) or, if not that, (only in context of non-class initialization by conversion), the standard conversion sequence from the return type of F1 to the type being initialized is</source>
          <target state="translated">2)或者,如果不是这样,(仅在非类通过转换初始化的上下文中),从F1的返回类型到被初始化的类型的标准转换序列就是</target>
        </trans-unit>
        <trans-unit id="42eeea1f07d3ce5dda592abea703417ac1f6924d" translate="yes" xml:space="preserve">
          <source>2) p made proximate against base</source>
          <target state="translated">(2)p近似于基地</target>
        </trans-unit>
        <trans-unit id="645ee1721eafcc6400b43f5e73a9f28be73534dc" translate="yes" xml:space="preserve">
          <source>2) postfix decrement (post-decrement)</source>
          <target state="translated">2)后缀减量(后减量</target>
        </trans-unit>
        <trans-unit id="499d2c537c0841899b7c2716bd8ba882c873094b" translate="yes" xml:space="preserve">
          <source>2) prefix decrement (pre-decrement)</source>
          <target state="translated">2)前缀减法</target>
        </trans-unit>
        <trans-unit id="2908071c8896ac2f011ed5dcba01e5a36aebb624" translate="yes" xml:space="preserve">
          <source>2) removes the topmost &lt;code&gt;const&lt;/code&gt;.</source>
          <target state="translated">2）删除最上面的 &lt;code&gt;const&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="8d00c166bfa15f423524d248b38172b36c084eb2" translate="yes" xml:space="preserve">
          <source>2) replaces current settings with given ones.</source>
          <target state="translated">2)用给定的设置替换当前的设置。</target>
        </trans-unit>
        <trans-unit id="4db887dd9860a46694236e4cae62ff9e065fb444" translate="yes" xml:space="preserve">
          <source>2) replaces the associated byte stream with &lt;code&gt;bytebuf&lt;/code&gt; .</source>
          <target state="translated">2）用 &lt;code&gt;bytebuf&lt;/code&gt; 替换关联的字节流。</target>
        </trans-unit>
        <trans-unit id="2fe6d5892d176d177b26eff6ead780f12b24b413" translate="yes" xml:space="preserve">
          <source>2) returns &lt;code&gt;false&lt;/code&gt;</source>
          <target state="translated">2）返回 &lt;code&gt;false&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="71e3b774300d2eebd3845a90f2b9e3f07562f569" translate="yes" xml:space="preserve">
          <source>2) returns &lt;code&gt;static_cast&amp;lt;const OuterAlloc&amp;amp;&amp;gt;(*this)&lt;/code&gt;.</source>
          <target state="translated">2）返回 &lt;code&gt;static_cast&amp;lt;const OuterAlloc&amp;amp;&amp;gt;(*this)&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="c8070e737f861b063b5a5931976bab26eba33624" translate="yes" xml:space="preserve">
          <source>2) returns &lt;code&gt;std::u8string_view{str, len}&lt;/code&gt;</source>
          <target state="translated">2）返回 &lt;code&gt;std::u8string_view{str, len}&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="741e74c6d31e5f009d234037c3e5515d65a95079" translate="yes" xml:space="preserve">
          <source>2) returns &lt;code&gt;std::u8string{str, len}&lt;/code&gt;</source>
          <target state="translated">2）返回 &lt;code&gt;std::u8string{str, len}&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="72cef41fc2856e5795da50c38e552f85c1551ef4" translate="yes" xml:space="preserve">
          <source>2) right shift of lhs by rhs bits</source>
          <target state="translated">2)将lhs位右移至rhs位。</target>
        </trans-unit>
        <trans-unit id="4b78590ed44f9576a3024115fa5bf682c65bbc4e" translate="yes" xml:space="preserve">
          <source>2) rvalues can be bound to non-const implicit object parameter (unless this is for a ref-qualified member function)(since C++11) and do not affect the ranking of the implicit conversions.</source>
          <target state="translated">2)r值可以绑定到非const的隐式对象参数上(除非是针对ref-qualified的成员函数)(从C++11开始),并且不影响隐式转换的排序。</target>
        </trans-unit>
        <trans-unit id="4983d8348f815ac7500fbb734db536a9ef8cbf55" translate="yes" xml:space="preserve">
          <source>2) same as (1), but the evaluation of the assignment expression will not call any operation that is not trivial. For the purposes of this check, a call to &lt;code&gt;&lt;a href=&quot;../utility/declval&quot;&gt;std::declval&lt;/a&gt;&lt;/code&gt; is considered trivial and not considered an &lt;a href=&quot;../language/definition#ODR-use&quot;&gt;odr-use&lt;/a&gt; of &lt;code&gt;&lt;a href=&quot;../utility/declval&quot;&gt;std::declval&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">2）与（1）相同，但是赋值表达式的求值将不会调用任何不平凡的操作。出于此检查的目的，对 &lt;code&gt;&lt;a href=&quot;../utility/declval&quot;&gt;std::declval&lt;/a&gt;&lt;/code&gt; 的调用被认为是微不足道的，而不是对 &lt;code&gt;&lt;a href=&quot;../utility/declval&quot;&gt;std::declval&lt;/a&gt;&lt;/code&gt; 的&lt;a href=&quot;../language/definition#ODR-use&quot;&gt;odr使用&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="040bf5037ee6e2b0b7c99f42d9d6e90979f99631" translate="yes" xml:space="preserve">
          <source>2) same as 1), and additionally &lt;code&gt;&lt;a href=&quot;remove_all_extents&quot;&gt;std::remove_all_extents&lt;/a&gt;&amp;lt;T&amp;gt;::type&lt;/code&gt; is either a non-class type or a class type with a trivial destructor.</source>
          <target state="translated">2）与1）相同，此外 &lt;code&gt;&lt;a href=&quot;remove_all_extents&quot;&gt;std::remove_all_extents&lt;/a&gt;&amp;lt;T&amp;gt;::type&lt;/code&gt; 是非类类型或具有琐碎析构函数的类类型。</target>
        </trans-unit>
        <trans-unit id="5fde760dde32ffe3dbeb0423cd83e67b12e713fb" translate="yes" xml:space="preserve">
          <source>2) same as 1), but the formatted replacement is performed as if by calling &lt;a href=&quot;match_results/format&quot;&gt;&lt;code&gt;out = m.format(out, fmt, fmt + char_traits&amp;lt;charT&amp;gt;::length(fmt), flags)&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">2）与1）相同，但是格式化替换的执行方式类似于通过调用&lt;a href=&quot;match_results/format&quot;&gt; &lt;code&gt;out = m.format(out, fmt, fmt + char_traits&amp;lt;charT&amp;gt;::length(fmt), flags)&lt;/code&gt; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="fa0f781ec9fd767be727083ea0b6bc0d022b3634" translate="yes" xml:space="preserve">
          <source>2) same as 1), but the variable definition does not call any operation that is not trivial. For the purposes of this check, the call to &lt;code&gt;&lt;a href=&quot;../utility/declval&quot;&gt;std::declval&lt;/a&gt;&lt;/code&gt; is considered trivial.</source>
          <target state="translated">2）与1）相同，但是变量定义不会调用任何不重要的操作。为了进行此检查，对 &lt;code&gt;&lt;a href=&quot;../utility/declval&quot;&gt;std::declval&lt;/a&gt;&lt;/code&gt; 的调用被认为是微不足道的。</target>
        </trans-unit>
        <trans-unit id="9bf77a6ee39f03c968c06bdd069b8f0fab44acc1" translate="yes" xml:space="preserve">
          <source>2) sets the &lt;code&gt;adjustfield&lt;/code&gt; of the stream &lt;code&gt;str&lt;/code&gt; to &lt;code&gt;right&lt;/code&gt; as if by calling &lt;code&gt;str.setf(&lt;a href=&quot;../ios_base/fmtflags&quot;&gt;std::ios_base::right&lt;/a&gt;, &lt;a href=&quot;../ios_base/fmtflags&quot;&gt;std::ios_base::adjustfield&lt;/a&gt;)&lt;/code&gt;.</source>
          <target state="translated">2）就像调用 &lt;code&gt;str.setf(&lt;a href=&quot;../ios_base/fmtflags&quot;&gt;std::ios_base::right&lt;/a&gt;, &lt;a href=&quot;../ios_base/fmtflags&quot;&gt;std::ios_base::adjustfield&lt;/a&gt;)&lt;/code&gt; &lt;a href=&quot;../ios_base/fmtflags&quot;&gt;std :: ios_base :: right&lt;/a&gt;，&lt;a href=&quot;../ios_base/fmtflags&quot;&gt;std :: ios_base :: adjustfield&lt;/a&gt;） &lt;code&gt;adjustfield&lt;/code&gt; ，将流 &lt;code&gt;str&lt;/code&gt; 的Adjustfield设置为 &lt;code&gt;right&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="6ea314d9ffcbac359db2b200393e32fbd3767e53" translate="yes" xml:space="preserve">
          <source>2) sets the &lt;code&gt;basefield&lt;/code&gt; of the stream &lt;code&gt;str&lt;/code&gt; to &lt;code&gt;hex&lt;/code&gt; as if by calling &lt;code&gt;str.setf(&lt;a href=&quot;../ios_base/fmtflags&quot;&gt;std::ios_base::hex&lt;/a&gt;, &lt;a href=&quot;../ios_base/fmtflags&quot;&gt;std::ios_base::basefield&lt;/a&gt;)&lt;/code&gt;.</source>
          <target state="translated">2）就像调用 &lt;code&gt;str.setf(&lt;a href=&quot;../ios_base/fmtflags&quot;&gt;std::ios_base::hex&lt;/a&gt;, &lt;a href=&quot;../ios_base/fmtflags&quot;&gt;std::ios_base::basefield&lt;/a&gt;)&lt;/code&gt; &lt;a href=&quot;../ios_base/fmtflags&quot;&gt;std :: ios_base :: hex&lt;/a&gt;，&lt;a href=&quot;../ios_base/fmtflags&quot;&gt;std :: ios_base :: basefield&lt;/a&gt;） &lt;code&gt;basefield&lt;/code&gt; ，将流 &lt;code&gt;str&lt;/code&gt; 的基字段设置为 &lt;code&gt;hex&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="fd06baac4e12d446a33abcc0a3f84fb823191950" translate="yes" xml:space="preserve">
          <source>2) sets the fill character to &lt;code&gt;ch&lt;/code&gt;, returns previous value of the fill character</source>
          <target state="translated">2）将填充字符设置为 &lt;code&gt;ch&lt;/code&gt; ，返回填充字符的上一个值</target>
        </trans-unit>
        <trans-unit id="5544c78645ec7a0b4e796edd30f176b5b185272d" translate="yes" xml:space="preserve">
          <source>2) sets the input position indicator to position &lt;code&gt;off&lt;/code&gt;, relative to position, defined by &lt;code&gt;dir&lt;/code&gt;. Specifically, executes &lt;code&gt;rdbuf()-&amp;gt;pubseekoff(off, dir, &lt;a href=&quot;../ios_base/openmode&quot;&gt;std::ios_base::in&lt;/a&gt;)&lt;/code&gt;.</source>
          <target state="translated">2）将输入位置指示器设置为相对于由 &lt;code&gt;dir&lt;/code&gt; 定义的位置为 &lt;code&gt;off&lt;/code&gt; 。具体来说，执行 &lt;code&gt;rdbuf()-&amp;gt;pubseekoff(off, dir, &lt;a href=&quot;../ios_base/openmode&quot;&gt;std::ios_base::in&lt;/a&gt;)&lt;/code&gt; &lt;a href=&quot;../ios_base/openmode&quot;&gt;std :: ios_base :: in&lt;/a&gt;）。</target>
        </trans-unit>
        <trans-unit id="9c863ac3c9ba4c51f67bffe142fd6d2825fa6de7" translate="yes" xml:space="preserve">
          <source>2) sets the output position indicator to offset &lt;code&gt;off&lt;/code&gt; relative to &lt;code&gt;dir&lt;/code&gt; by calling &lt;code&gt;rdbuf()-&amp;gt;pubseekoff(off, dir, &lt;a href=&quot;../ios_base/openmode&quot;&gt;std::ios_base::out&lt;/a&gt;)&lt;/code&gt;.</source>
          <target state="translated">2）将输出位置指示器，以抵消 &lt;code&gt;off&lt;/code&gt; 相对于 &lt;code&gt;dir&lt;/code&gt; 通过调用 &lt;code&gt;rdbuf()-&amp;gt;pubseekoff(off, dir, &lt;a href=&quot;../ios_base/openmode&quot;&gt;std::ios_base::out&lt;/a&gt;)&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="422c09505cfb974f530d194e14890378649b74da" translate="yes" xml:space="preserve">
          <source>2) simple by-copy capture that is a &lt;a href=&quot;parameter_pack&quot;&gt;pack expansion&lt;/a&gt;</source>
          <target state="translated">2）简单的按拷贝捕获即&lt;a href=&quot;parameter_pack&quot;&gt;打包扩展&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="62337324964c46f8ae9d574acd9e8ea18781c64c" translate="yes" xml:space="preserve">
          <source>2) substring &lt;code&gt;[pos2, pos2 + count2)&lt;/code&gt; of &lt;code&gt;str&lt;/code&gt;, except if &lt;code&gt;count2==npos&lt;/code&gt; or if would extend past &lt;code&gt;str.size()&lt;/code&gt;, &lt;code&gt;[pos2, str.size())&lt;/code&gt; is used.</source>
          <target state="translated">2）子串 &lt;code&gt;[pos2, pos2 + count2)&lt;/code&gt; 的 &lt;code&gt;str&lt;/code&gt; ，除非 &lt;code&gt;count2==npos&lt;/code&gt; ，或者如果将延伸过去 &lt;code&gt;str.size()&lt;/code&gt; ， &lt;code&gt;[pos2, str.size())&lt;/code&gt; 被使用。</target>
        </trans-unit>
        <trans-unit id="cb0d0968e5aceea7da38db43e4ede65eb85ea624" translate="yes" xml:space="preserve">
          <source>2) subtraction</source>
          <target state="translated">2)减法</target>
        </trans-unit>
        <trans-unit id="85eba9dd44e727bee6ef5572598d349081d2c4ed" translate="yes" xml:space="preserve">
          <source>2) terminate the program (e.g. by calling &lt;code&gt;&lt;a href=&quot;../../error/terminate&quot;&gt;std::terminate&lt;/a&gt;&lt;/code&gt;)</source>
          <target state="translated">2）终止程序（例如通过调用 &lt;code&gt;&lt;a href=&quot;../../error/terminate&quot;&gt;std::terminate&lt;/a&gt;&lt;/code&gt; ）</target>
        </trans-unit>
        <trans-unit id="2e38f68a7a5ee1660aed123acffe528717b1858a" translate="yes" xml:space="preserve">
          <source>2) the &lt;a href=&quot;fe_round&quot;&gt;floating point rounding macro&lt;/a&gt; describing the current rounding direction or a negative value if the direction cannot be determined.</source>
          <target state="translated">2）&lt;a href=&quot;fe_round&quot;&gt;浮点取整宏&lt;/a&gt;描述当前取整方向，如果无法确定方向，则为负值。</target>
        </trans-unit>
        <trans-unit id="61cdf37d9e22d6701ff8a91312cc3be8a510bbc3" translate="yes" xml:space="preserve">
          <source>2) the equals sign followed by an expression</source>
          <target state="translated">2)表达式后面的等号。</target>
        </trans-unit>
        <trans-unit id="6849194d4d225f049cba72ebb81aec654d5b7f9c" translate="yes" xml:space="preserve">
          <source>2) the exception thrown by &lt;code&gt;std::unexpected_handler&lt;/code&gt; still violates the exception specification:</source>
          <target state="translated">2） &lt;code&gt;std::unexpected_handler&lt;/code&gt; 抛出的异常仍然违反异常规范：</target>
        </trans-unit>
        <trans-unit id="d732e7f4be12377ae50409a2eaff4e24e66a812f" translate="yes" xml:space="preserve">
          <source>2) the integral number of minutes &lt;code&gt;since_midnight&lt;/code&gt; is after &lt;code&gt;(00:00:00 + hours())&lt;/code&gt;.</source>
          <target state="translated">2） &lt;code&gt;since_midnight&lt;/code&gt; 的分钟总数在 &lt;code&gt;(00:00:00 + hours())&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="63345f37c9e05c2005df6177be1f792d4d248c46" translate="yes" xml:space="preserve">
          <source>2) the prefix is a single character</source>
          <target state="translated">2)前缀是一个单字</target>
        </trans-unit>
        <trans-unit id="bfa7f660ebffe298de690d4fab7feb1a53102985" translate="yes" xml:space="preserve">
          <source>2) the prefix is a single character. Effectively returns &lt;code&gt;!empty() &amp;amp;&amp;amp; Traits::eq(front(), x)&lt;/code&gt;</source>
          <target state="translated">2）前缀是单个字符。有效地返回 &lt;code&gt;!empty() &amp;amp;&amp;amp; Traits::eq(front(), x)&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="6702473a4d8bb1b1d89df01f1d19448729deb164" translate="yes" xml:space="preserve">
          <source>2) the previous byte stream.</source>
          <target state="translated">2)前一个字节流。</target>
        </trans-unit>
        <trans-unit id="28f08b05497ffb72cbe3e2c7c0b6212dfa1f47ff" translate="yes" xml:space="preserve">
          <source>2) the static version of the initialization produces the same value in the initialized variable as would be produced by the dynamic initialization if all variables not required to be initialized statically were initialized dynamically.</source>
          <target state="translated">2)静态版本的初始化在初始化变量中产生的值与动态初始化产生的值相同,如果所有不需要静态初始化的变量都是动态初始化的。</target>
        </trans-unit>
        <trans-unit id="8d94628f33dfdde218a3cdc0aaec377ed0669117" translate="yes" xml:space="preserve">
          <source>2) the suffix is a single character</source>
          <target state="translated">2)后缀是一个单字</target>
        </trans-unit>
        <trans-unit id="620c5465e17ddd3a791e6b26fc6d5cca3448c79c" translate="yes" xml:space="preserve">
          <source>2) the suffix is a single character. Effectively returns &lt;code&gt;!empty() &amp;amp;&amp;amp; Traits::eq(back(), x)&lt;/code&gt;</source>
          <target state="translated">2）后缀是单个字符。有效地返回 &lt;code&gt;!empty() &amp;amp;&amp;amp; Traits::eq(back(), x)&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="30957c44c756ec33162837ef900bb78b3e525036" translate="yes" xml:space="preserve">
          <source>2) throws &lt;code&gt;&lt;a href=&quot;../../error/out_of_range/out_of_range&quot;&gt;std::out_of_range&lt;/a&gt;&lt;/code&gt; if &lt;code&gt;pos&lt;/code&gt; does not correspond to a valid position within the bitset.</source>
          <target state="translated">2）如果 &lt;code&gt;pos&lt;/code&gt; 不对应于位集中的有效位置，则抛出 &lt;code&gt;&lt;a href=&quot;../../error/out_of_range/out_of_range&quot;&gt;std::out_of_range&lt;/a&gt;&lt;/code&gt; out_of_range。</target>
        </trans-unit>
        <trans-unit id="083e3f94c31c2f99fb9a39f11563a44aae36fff7" translate="yes" xml:space="preserve">
          <source>2) total size of the new array would exceed implementation-defined maximum value.</source>
          <target state="translated">2)新数组的总大小将超过执行定义的最大值。</target>
        </trans-unit>
        <trans-unit id="18b66566486cc99d527e4485b441b36c5c6fe953" translate="yes" xml:space="preserve">
          <source>2) unary left fold</source>
          <target state="translated">2)单一的左折</target>
        </trans-unit>
        <trans-unit id="96201f4eb7637c46af19688b2e4dde22bd2fd7ab" translate="yes" xml:space="preserve">
          <source>2) unary minus (negation).</source>
          <target state="translated">2)单式减法(否定式)。</target>
        </trans-unit>
        <trans-unit id="b2f68d3087fdc4bafce8692c0f66f6935f2ad59e" translate="yes" xml:space="preserve">
          <source>2) value is converted to a string as if by &lt;code&gt;&lt;a href=&quot;../io/c/printf&quot;&gt;std::printf&lt;/a&gt;&lt;/code&gt; in the default (&quot;C&quot;) locale. The conversion specifier is &lt;code&gt;f&lt;/code&gt; or &lt;code&gt;e&lt;/code&gt; (resolving in favor of &lt;code&gt;f&lt;/code&gt; in case of a tie), chosen according to the requirement for a shortest representation: the string representation consists of the smallest number of characters such that there is at least one digit before the radix point (if present) and parsing the representation using the corresponding &lt;a href=&quot;from_chars&quot;&gt;&lt;code&gt;std::from_chars&lt;/code&gt;&lt;/a&gt; function recovers value exactly. If there are several such representations, one with the smallest difference to &lt;code&gt;value&lt;/code&gt; is chosen, resolving any remaining ties using rounding according to &lt;code&gt;&lt;a href=&quot;../types/numeric_limits/float_round_style&quot;&gt;std::round_to_nearest&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">2）将值转换为字符串，就像通过默认（&amp;ldquo; C&amp;rdquo;）语言环境中的 &lt;code&gt;&lt;a href=&quot;../io/c/printf&quot;&gt;std::printf&lt;/a&gt;&lt;/code&gt; 。转换说明符为 &lt;code&gt;f&lt;/code&gt; 或 &lt;code&gt;e&lt;/code&gt; （在出现平局的情况下优先选择 &lt;code&gt;f&lt;/code&gt; ），根据对最短表示形式的要求进行选择：字符串表示形式由最少数量的字符组成，因此在字符串前至少有一位数字小数点（如果存在），并使用相应的&lt;a href=&quot;from_chars&quot;&gt; &lt;code&gt;std::from_chars&lt;/code&gt; &lt;/a&gt;函数解析表示形式，即可准确恢复值。如果存在多个这样的表示形式，则选择与 &lt;code&gt;value&lt;/code&gt; 差异最小的一种表示形式，并根据 &lt;code&gt;&lt;a href=&quot;../types/numeric_limits/float_round_style&quot;&gt;std::round_to_nearest&lt;/a&gt;&lt;/code&gt; 使用舍入法解决任何剩余的平局</target>
        </trans-unit>
        <trans-unit id="cf3e79486507c8bb6a0d07aedec8a96331370665" translate="yes" xml:space="preserve">
          <source>2) when an object with dynamic storage duration is created by a &lt;a href=&quot;new&quot;&gt;new-expression&lt;/a&gt; with no initializer or when an object is created by a new-expression with the initializer consisting of an empty pair of parentheses(until C++03);</source>
          <target state="translated">2）当动态存储持续时间的对象是由没有初始化程序的&lt;a href=&quot;new&quot;&gt;new表达式&lt;/a&gt;创建的，或者当对象是由带有空括号对的初始化程序的new表达式创建的（直到C ++ 03）；</target>
        </trans-unit>
        <trans-unit id="0b6215cf3787fe42bfd61b320c1fbb2949360c37" translate="yes" xml:space="preserve">
          <source>2) when the &lt;a href=&quot;overloaded_address&quot;&gt;address of a function template specialization&lt;/a&gt; is taken</source>
          <target state="translated">2）当&lt;a href=&quot;overloaded_address&quot;&gt;一个函数模板专业化地址&lt;/a&gt;取</target>
        </trans-unit>
        <trans-unit id="309961c401f19c5969dc3218b3cbe7bde15a51e3" translate="yes" xml:space="preserve">
          <source>2) within the &lt;a href=&quot;function&quot;&gt;declaration&lt;/a&gt; of a non-static member function anywhere after the (optional) cv-qualifier sequence, including &lt;a href=&quot;except_spec&quot;&gt;dynamic exception specification&lt;/a&gt;(deprecated), &lt;a href=&quot;noexcept_spec&quot;&gt;noexcept specification&lt;/a&gt;(C++11), and the trailing return type(since C++11)</source>
          <target state="translated">2）在（可选）cv限定符序列之后的任何位置的非静态成员函数的&lt;a href=&quot;function&quot;&gt;声明&lt;/a&gt;内，包括&lt;a href=&quot;except_spec&quot;&gt;动态异常规范&lt;/a&gt;（不建议使用），&lt;a href=&quot;noexcept_spec&quot;&gt;noexcept规范&lt;/a&gt;（C ++ 11）和尾随返回类型（自C ++起） 11）</target>
        </trans-unit>
        <trans-unit id="7bc012a5869f0d7cc3571080bd458da9a19bcb7f" translate="yes" xml:space="preserve">
          <source>2) zero or one</source>
          <target state="translated">2)零或一</target>
        </trans-unit>
        <trans-unit id="b68032e197ec2f3a82f44aed13bbe55f177daa36" translate="yes" xml:space="preserve">
          <source>2)(until C++11)when a named variable of a scalar type &lt;code&gt;T&lt;/code&gt; is declared with the initializer consisting of an equals sign followed by a brace-enclosed expression (Note: as of C++11, this is classified as &lt;a href=&quot;list_initialization&quot;&gt;list initialization&lt;/a&gt;, and narrowing conversion is not allowed).</source>
          <target state="translated">2）（直到C ++ 11），当标量类型 &lt;code&gt;T&lt;/code&gt; 的命名变量用由等号后跟花括号括起来的表达式组成的初始化程序声明时（注意：从C ++ 11开始，这被分类为&lt;a href=&quot;list_initialization&quot;&gt;列表初始化&lt;/a&gt;，并且不允许缩小转换）。</target>
        </trans-unit>
        <trans-unit id="c98e8d57709194b724950d3113eba02c58efa92c" translate="yes" xml:space="preserve">
          <source>2)&lt;a href=&quot;cast_operator&quot;&gt;user-defined conversion function&lt;/a&gt;;</source>
          <target state="translated">2）&lt;a href=&quot;cast_operator&quot;&gt;用户定义的转换功能&lt;/a&gt;；</target>
        </trans-unit>
        <trans-unit id="91986c83bc299300b48be931117bb4e5bb08ac39" translate="yes" xml:space="preserve">
          <source>2)&lt;a href=&quot;continue&quot;&gt;continue&lt;/a&gt; in the statement will execute iteration_expression</source>
          <target state="translated">2）&lt;a href=&quot;continue&quot;&gt;继续&lt;/a&gt;在语句中将执行迭代_表达式</target>
        </trans-unit>
        <trans-unit id="a33439daf73c7fbc692eaa66fa48355cfaeecb68" translate="yes" xml:space="preserve">
          <source>2)&lt;a href=&quot;continue&quot;&gt;continue&lt;/a&gt; statement;</source>
          <target state="translated">2）&lt;a href=&quot;continue&quot;&gt;继续&lt;/a&gt;声明；</target>
        </trans-unit>
        <trans-unit id="b01e8220c5eaa6f43f0caa381375a0b71590a265" translate="yes" xml:space="preserve">
          <source>2)&lt;a href=&quot;do&quot;&gt;do-while&lt;/a&gt; loop;</source>
          <target state="translated">2）&lt;a href=&quot;do&quot;&gt;do-while&lt;/a&gt;循环；</target>
        </trans-unit>
        <trans-unit id="f5c2df16cf17af221fc1d03b553776874dc28aef" translate="yes" xml:space="preserve">
          <source>2)&lt;a href=&quot;escape&quot;&gt;Escape sequences&lt;/a&gt; and universal character names in character literals and non-raw string literals are expanded and converted to the</source>
          <target state="translated">2）扩展字符文字和非原始字符串文字中的&lt;a href=&quot;escape&quot;&gt;转义序列&lt;/a&gt;和通用字符名称，并将其转换为</target>
        </trans-unit>
        <trans-unit id="51138821a0d6f922459861204dc6af4353b9aef7" translate="yes" xml:space="preserve">
          <source>2)&lt;a href=&quot;function-try-block&quot;&gt;function-try-block&lt;/a&gt; (which is a regular function body wrapped in a try/catch block)</source>
          <target state="translated">2）&lt;a href=&quot;function-try-block&quot;&gt;function-try-block&lt;/a&gt;（这是包装在try / catch块中的常规函数​​体）</target>
        </trans-unit>
        <trans-unit id="eec7dc365cda0c10c4fff1e5f84f467fccf9fe50" translate="yes" xml:space="preserve">
          <source>2)&lt;a href=&quot;if&quot;&gt;if&lt;/a&gt; statement with an else clause;</source>
          <target state="translated">2）&lt;a href=&quot;if&quot;&gt;if&lt;/a&gt;语句带有else子句；</target>
        </trans-unit>
        <trans-unit id="a9a965269fa27f6f5a50240a851257ecf688076a" translate="yes" xml:space="preserve">
          <source>2)&lt;a href=&quot;namespace#Inline_namespaces&quot;&gt;Inline namespace definition&lt;/a&gt; for the namespace ns_name. Declarations inside ns_name will be visible in its enclosing namespace.</source>
          <target state="translated">2）&lt;a href=&quot;namespace#Inline_namespaces&quot;&gt;命名&lt;/a&gt;空间ns_name的内联命名空间定义。ns_name中的声明将在其封闭的命名空间中可见。</target>
        </trans-unit>
        <trans-unit id="188a0d073dc039d6e86eac5be9dd98834331e16d" translate="yes" xml:space="preserve">
          <source>2)&lt;a href=&quot;this&quot;&gt;&lt;code&gt;*this&lt;/code&gt;&lt;/a&gt; is odr-used if &lt;code&gt;this&lt;/code&gt; appears as a</source>
          <target state="translated">2）&lt;a href=&quot;this&quot;&gt; &lt;code&gt;*this&lt;/code&gt; &lt;/a&gt;是ODR使用的，如果 &lt;code&gt;this&lt;/code&gt; 出现作为</target>
        </trans-unit>
        <trans-unit id="167daa046c9063e2ff86329a1abd25df65a907cb" translate="yes" xml:space="preserve">
          <source>2)&lt;b&gt;Pointer to member declarator&lt;/b&gt;: the declaration &lt;code&gt;S C::* D;&lt;/code&gt; declares &lt;code&gt;D&lt;/code&gt; as a pointer to non-static member of &lt;code&gt;C&lt;/code&gt; of type determined by decl-specifier-seq&lt;code&gt;S&lt;/code&gt;.</source>
          <target state="translated">2）&lt;b&gt;指向成员声明者的指针&lt;/b&gt;：声明 &lt;code&gt;S C::* D;&lt;/code&gt; 声明 &lt;code&gt;D&lt;/code&gt; 为指向由decl-specifier-seq &lt;code&gt;S&lt;/code&gt; 确定的 &lt;code&gt;C&lt;/code&gt; 类型的非静态成员的指针。</target>
        </trans-unit>
        <trans-unit id="61f159f773894aa1dfa2d0261f590d402930ff0d" translate="yes" xml:space="preserve">
          <source>2)&lt;b&gt;Promotion&lt;/b&gt;: integral promotion, floating-point promotion</source>
          <target state="translated">2）&lt;b&gt;促销&lt;/b&gt;：积分促销，浮点促销</target>
        </trans-unit>
        <trans-unit id="20497d82cd2021b3351ca3f338cd20fcfa75f8d7" translate="yes" xml:space="preserve">
          <source>2)&lt;b&gt;Read-read coherence&lt;/b&gt;: if a value computation A of some atomic M (a read)</source>
          <target state="translated">2）&lt;b&gt;读-读相干性&lt;/b&gt;：如果某个原子M的值计算A（读）</target>
        </trans-unit>
        <trans-unit id="a1f77cbb89c6cb2d76ae40c6c9354f6b5cf1ed3e" translate="yes" xml:space="preserve">
          <source>2)&lt;b&gt;Rvalue reference declarator&lt;/b&gt;: the declaration &lt;code&gt;S&amp;amp;&amp;amp; D;&lt;/code&gt; declares &lt;code&gt;D&lt;/code&gt; as an</source>
          <target state="translated">2）&lt;b&gt;右值引用声明符&lt;/b&gt;： &lt;code&gt;S&amp;amp;&amp;amp; D;&lt;/code&gt; 声明；声明 &lt;code&gt;D&lt;/code&gt; 为</target>
        </trans-unit>
        <trans-unit id="17aa2b86cd788ca1bca9d7dc2dc4748a8898c88c" translate="yes" xml:space="preserve">
          <source>2)&lt;code&gt;!(a == b)&lt;/code&gt;</source>
          <target state="translated">2） &lt;code&gt;!(a == b)&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="68d0b5297e5c8c8128bb182e4423740892d91c7a" translate="yes" xml:space="preserve">
          <source>2)&lt;code&gt;!(lhs == rhs)&lt;/code&gt;</source>
          <target state="translated">2） &lt;code&gt;!(lhs == rhs)&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="a4d0f7d78504e926245fc71573216fb642484916" translate="yes" xml:space="preserve">
          <source>2)&lt;code&gt;!(x == y)&lt;/code&gt;</source>
          <target state="translated">2） &lt;code&gt;!(x == y)&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="209c1b247609e7892d029b3ba1cf5a71fa9e1033" translate="yes" xml:space="preserve">
          <source>2)&lt;code&gt;!(x == y)&lt;/code&gt;.</source>
          <target state="translated">2） &lt;code&gt;!(x == y)&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="3ac5cc2c6f8787cccabf54bfdcf6c6c7da70ac51" translate="yes" xml:space="preserve">
          <source>2)&lt;code&gt;&quot;C&quot;&lt;/code&gt;, which makes it possible to link with functions written in the C programming language, and to define, in a C++ program, functions that can be called from the modules written in C.</source>
          <target state="translated">2） &lt;code&gt;&quot;C&quot;&lt;/code&gt; ，它可以链接用C编程语言编写的函数，并可以在C ++程序中定义可以从用C编写的模块调用的函数。</target>
        </trans-unit>
        <trans-unit id="efa2f1dfeca7c20055549fb5a0e6e60b313f6708" translate="yes" xml:space="preserve">
          <source>2)&lt;code&gt;&amp;amp;a[i+j] == &amp;amp;a[i] + j&lt;/code&gt; This means that valarray elements are adjacent in memory.</source>
          <target state="translated">2） &lt;code&gt;&amp;amp;a[i+j] == &amp;amp;a[i] + j&lt;/code&gt; 这意味着valarray元素在内存中相邻。</target>
        </trans-unit>
        <trans-unit id="c663ca95a48b238acac9a191fcaf1233ad371a51" translate="yes" xml:space="preserve">
          <source>2)&lt;code&gt;&lt;a href=&quot;../c/fgetc&quot;&gt;std::fgetc&lt;/a&gt;(f)&lt;/code&gt; and &lt;code&gt;str.rdbuf()-&amp;gt;sbumpc()&lt;/code&gt;</source>
          <target state="translated">2） &lt;code&gt;&lt;a href=&quot;../c/fgetc&quot;&gt;std::fgetc&lt;/a&gt;(f)&lt;/code&gt; 和 &lt;code&gt;str.rdbuf()-&amp;gt;sbumpc()&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="03dc35247d364d06cd2ed344c06491dcca58915d" translate="yes" xml:space="preserve">
          <source>2)&lt;code&gt;&lt;a href=&quot;../new/bad_alloc&quot;&gt;std::bad_alloc&lt;/a&gt;&lt;/code&gt; if required additional memory could not be obtained. May throw implementation-defined exception for other errors. &lt;code&gt;delete ptr&lt;/code&gt; is called if an exception occurs.</source>
          <target state="translated">2） &lt;code&gt;&lt;a href=&quot;../new/bad_alloc&quot;&gt;std::bad_alloc&lt;/a&gt;&lt;/code&gt; 如果无法获得所需的额外内存。可能会为其他错误引发实现定义的异常。如果发生异常，则调用 &lt;code&gt;delete ptr&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="21b412f899d6bd8e2db71c5f644078ec3ba1fff8" translate="yes" xml:space="preserve">
          <source>2)&lt;code&gt;&lt;a href=&quot;../weekday_last&quot;&gt;std::chrono::weekday_last&lt;/a&gt;(*this)&lt;/code&gt;</source>
          <target state="translated">2)&lt;code&gt;&lt;a href=&quot;../weekday_last&quot;&gt;std::chrono::weekday_last&lt;/a&gt;(*this)&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="d6a8d61a4904228a32c2542301d01e717400a174" translate="yes" xml:space="preserve">
          <source>2)&lt;code&gt;&lt;a href=&quot;../year&quot;&gt;std::chrono::year&lt;/a&gt;(-int(*this))&lt;/code&gt;</source>
          <target state="translated">2)&lt;code&gt;&lt;a href=&quot;../year&quot;&gt;std::chrono::year&lt;/a&gt;(-int(*this))&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="9da2081446b74e8533d68b5bed358389c881ed97" translate="yes" xml:space="preserve">
          <source>2)&lt;code&gt;&lt;a href=&quot;clock_time_conversion&quot;&gt;std::chrono::clock_time_conversion&lt;/a&gt;&amp;lt;Dest, &lt;a href=&quot;system_clock&quot;&gt;std::chrono::system_clock&lt;/a&gt;&amp;gt;{}(&lt;br/&gt; &lt;p&gt;&lt;a href=&quot;clock_time_conversion&quot;&gt;std::chrono::clock_time_conversion&lt;/a&gt;&amp;lt;&lt;a href=&quot;system_clock&quot;&gt;std::chrono::system_clock&lt;/a&gt;, &lt;a href=&quot;utc_clock&quot;&gt;std::chrono::utc_clock&lt;/a&gt;&amp;gt;{}(&lt;br/&gt; &lt;a href=&quot;clock_time_conversion&quot;&gt;std::chrono::clock_time_conversion&lt;/a&gt;.&lt;/p&gt;
&amp;lt;&lt;a href=&quot;utc_clock&quot;&gt;std::chrono::utc_clock&lt;/a&gt;, Source&amp;gt;{}(t)))&lt;/code&gt;</source>
          <target state="translated">2） &lt;code&gt;&lt;a href=&quot;clock_time_conversion&quot;&gt;std::chrono::clock_time_conversion&lt;/a&gt;&amp;lt;Dest, &lt;a href=&quot;system_clock&quot;&gt;std::chrono::system_clock&lt;/a&gt;&amp;gt;{}(&lt;br/&gt; &lt;p&gt;&lt;a href=&quot;clock_time_conversion&quot;&gt;std::chrono::clock_time_conversion&lt;/a&gt;&amp;lt;&lt;a href=&quot;system_clock&quot;&gt;std::chrono::system_clock&lt;/a&gt;, &lt;a href=&quot;utc_clock&quot;&gt;std::chrono::utc_clock&lt;/a&gt;&amp;gt;{}(&lt;br/&gt; &lt;a href=&quot;clock_time_conversion&quot;&gt;std::chrono::clock_time_conversion&lt;/a&gt;.&lt;/p&gt; &amp;lt;&lt;a href=&quot;utc_clock&quot;&gt;std::chrono::utc_clock&lt;/a&gt;, Source&amp;gt;{}(t)))&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="5bdc15719dd74f0c6f4f73fa3a42e8e5560d74df" translate="yes" xml:space="preserve">
          <source>2)&lt;code&gt;&lt;a href=&quot;clock_time_conversion&quot;&gt;std::chrono::clock_time_conversion&lt;/a&gt;&amp;lt;Dest, &lt;a href=&quot;utc_clock&quot;&gt;std::chrono::utc_clock&lt;/a&gt;&amp;gt;{}(&lt;br/&gt; &lt;a href=&quot;clock_time_conversion&quot;&gt;std::chrono::clock_time_conversion&lt;/a&gt;&amp;lt;&lt;a href=&quot;utc_clock&quot;&gt;std::chrono::utc_clock&lt;/a&gt;, Source&amp;gt;{}(t))&lt;/code&gt;</source>
          <target state="translated">2） &lt;code&gt;&lt;a href=&quot;clock_time_conversion&quot;&gt;std::chrono::clock_time_conversion&lt;/a&gt;&amp;lt;Dest, &lt;a href=&quot;utc_clock&quot;&gt;std::chrono::utc_clock&lt;/a&gt;&amp;gt;{}(&lt;br/&gt; &lt;a href=&quot;clock_time_conversion&quot;&gt;std::chrono::clock_time_conversion&lt;/a&gt;&amp;lt;&lt;a href=&quot;utc_clock&quot;&gt;std::chrono::utc_clock&lt;/a&gt;, Source&amp;gt;{}(t))&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="5fd0a1f3909570ced0b9ae890fc9b11f99be42db" translate="yes" xml:space="preserve">
          <source>2)&lt;code&gt;&lt;a href=&quot;year_month&quot;&gt;std::chrono::year_month&lt;/a&gt;(y, &lt;a href=&quot;month&quot;&gt;std::chrono::month&lt;/a&gt;(m))&lt;/code&gt;</source>
          <target state="translated">2） &lt;code&gt;&lt;a href=&quot;year_month&quot;&gt;std::chrono::year_month&lt;/a&gt;(y, &lt;a href=&quot;month&quot;&gt;std::chrono::month&lt;/a&gt;(m))&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="acd9d7e3b8118ba59ea394984d0f99cabfe6ecf8" translate="yes" xml:space="preserve">
          <source>2)&lt;code&gt;CD(CD(lhs).count() - CD(rhs).count())&lt;/code&gt;</source>
          <target state="translated">2） &lt;code&gt;CD(CD(lhs).count() - CD(rhs).count())&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="6534086490d8319b71fa9e9d4a9d0d77a3840b06" translate="yes" xml:space="preserve">
          <source>2)&lt;code&gt;O(N log N)&lt;/code&gt; swaps &lt;code&gt;and O(N)&lt;/code&gt; applications of the predicate.</source>
          <target state="translated">2）谓词的 &lt;code&gt;O(N log N)&lt;/code&gt; 交换 &lt;code&gt;and O(N)&lt;/code&gt; 应用。</target>
        </trans-unit>
        <trans-unit id="7ef2cb96bd5ccf1761333f5951c2e5db040dcda2" translate="yes" xml:space="preserve">
          <source>2)&lt;code&gt;O(N log N)&lt;/code&gt; swaps and &lt;code&gt;O(N)&lt;/code&gt; applications of the predicate</source>
          <target state="translated">2）谓词的 &lt;code&gt;O(N log N)&lt;/code&gt; 交换和 &lt;code&gt;O(N)&lt;/code&gt; 应用</target>
        </trans-unit>
        <trans-unit id="3d75bb5849e659c2d768f741007272a5d59e85c6" translate="yes" xml:space="preserve">
          <source>2)&lt;code&gt;T&lt;/code&gt; has a constructor which takes &lt;code&gt;Alloc&lt;/code&gt; as the last argument.</source>
          <target state="translated">2） &lt;code&gt;T&lt;/code&gt; 有一个构造函数，该构造函数将 &lt;code&gt;Alloc&lt;/code&gt; 作为最后一个参数。</target>
        </trans-unit>
        <trans-unit id="8e17b88d3502f3955838e6da2af2c9bb9a1f0be1" translate="yes" xml:space="preserve">
          <source>2)&lt;code&gt;atomic_ref&lt;/code&gt; is not &lt;a href=&quot;../../named_req/copyassignable&quot;&gt;CopyAssignable&lt;/a&gt;.</source>
          <target state="translated">2） &lt;code&gt;atomic_ref&lt;/code&gt; 不是&lt;a href=&quot;../../named_req/copyassignable&quot;&gt;CopyAssignable&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="df09275d22528baad4008ee4c1661aebfd696ae3" translate="yes" xml:space="preserve">
          <source>2)&lt;code&gt;auto&amp;amp;&amp;amp;&lt;/code&gt; except when deduced from a brace-enclosed initializer list:</source>
          <target state="translated">2） &lt;code&gt;auto&amp;amp;&amp;amp;&lt;/code&gt; ，但从用大括号括起来的初始化程序列表推导时除外：</target>
        </trans-unit>
        <trans-unit id="bdf62302556c80a37217ea882bfdeb070d3a3b9a" translate="yes" xml:space="preserve">
          <source>2)&lt;code&gt;bitset&amp;lt;N&amp;gt;(lhs) |= rhs&lt;/code&gt;</source>
          <target state="translated">2） &lt;code&gt;bitset&amp;lt;N&amp;gt;(lhs) |= rhs&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="1e8de1aa93764c63662e23a0edbf0abcb986bed0" translate="yes" xml:space="preserve">
          <source>2)&lt;code&gt;cmp != 0&lt;/code&gt;</source>
          <target state="translated">2） &lt;code&gt;cmp != 0&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="ce8a5a15e0bb9875702e4b0d55ed84209615564e" translate="yes" xml:space="preserve">
          <source>2)&lt;code&gt;dangling&lt;/code&gt; can be constructed from arguments of arbitrary number and arbitrary non-void type. The construction does not have any side-effect itself.</source>
          <target state="translated">2）可以从任意数量和任意非空类型的参数构造 &lt;code&gt;dangling&lt;/code&gt; 。该构造本身没有任何副作用。</target>
        </trans-unit>
        <trans-unit id="fc3f48befd81e28228ddc5beb272800d1793f5a1" translate="yes" xml:space="preserve">
          <source>2)&lt;code&gt;false&lt;/code&gt;</source>
          <target state="translated">2)&lt;code&gt;false&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="ccc3be7b97f38d22a1e17f0b013935646b992a0a" translate="yes" xml:space="preserve">
          <source>2)&lt;code&gt;false&lt;/code&gt; if the path is absolute, &lt;code&gt;true&lt;/code&gt; otherwise.</source>
          <target state="translated">2）如果路径是绝对的，则为 &lt;code&gt;false&lt;/code&gt; ，否则为 &lt;code&gt;true&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="03e0208607adbd050c3d708e8ff2fd0e1c9f6ce3" translate="yes" xml:space="preserve">
          <source>2)&lt;code&gt;false&lt;/code&gt; if the predicate &lt;code&gt;pred&lt;/code&gt; still evaluates to &lt;code&gt;false&lt;/code&gt; after the &lt;code&gt;rel_time&lt;/code&gt; timeout expired, otherwise &lt;code&gt;true&lt;/code&gt;.</source>
          <target state="translated">2） &lt;code&gt;false&lt;/code&gt; 如果断言 &lt;code&gt;pred&lt;/code&gt; 仍然计算结果为 &lt;code&gt;false&lt;/code&gt; 后 &lt;code&gt;rel_time&lt;/code&gt; 超时过期，否则 &lt;code&gt;true&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="2937f73af771d7d2711fc006ab6b9eb827e0884c" translate="yes" xml:space="preserve">
          <source>2)&lt;code&gt;false&lt;/code&gt; if the predicate &lt;code&gt;pred&lt;/code&gt; still evaluates to &lt;code&gt;false&lt;/code&gt; after the &lt;code&gt;timeout_time&lt;/code&gt; timeout expired, otherwise &lt;code&gt;true&lt;/code&gt;. If the timeout had already expired, evaluates and returns the result of &lt;code&gt;pred&lt;/code&gt;.</source>
          <target state="translated">2） &lt;code&gt;false&lt;/code&gt; 如果断言 &lt;code&gt;pred&lt;/code&gt; 仍然计算结果为 &lt;code&gt;false&lt;/code&gt; 后 &lt;code&gt;timeout_time&lt;/code&gt; 超时过期，否则 &lt;code&gt;true&lt;/code&gt; 。如果超时已经到期，则评估并返回 &lt;code&gt;pred&lt;/code&gt; 的结果。</target>
        </trans-unit>
        <trans-unit id="c5b309196039b593e5bde33ca66e5d1ebc71780a" translate="yes" xml:space="preserve">
          <source>2)&lt;code&gt;from_stream(is, fmt.c_str(), tp, &lt;a href=&quot;../memory/addressof&quot;&gt;std::addressof&lt;/a&gt;(abbrev))&lt;/code&gt;</source>
          <target state="translated">2） &lt;code&gt;from_stream(is, fmt.c_str(), tp, &lt;a href=&quot;../memory/addressof&quot;&gt;std::addressof&lt;/a&gt;(abbrev))&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="0de3c1229e14304085c63b87dea1a3d01bbe7dbf" translate="yes" xml:space="preserve">
          <source>2)&lt;code&gt;get()&lt;/code&gt;.</source>
          <target state="translated">2)&lt;code&gt;get()&lt;/code&gt;.</target>
        </trans-unit>
        <trans-unit id="956bf8794e664c4a6a56406efc55a69e5ffb8ffd" translate="yes" xml:space="preserve">
          <source>2)&lt;code&gt;greater&lt;/code&gt; if &lt;code&gt;v&lt;/code&gt; is &lt;code&gt;less&lt;/code&gt;, &lt;code&gt;less&lt;/code&gt; if &lt;code&gt;v&lt;/code&gt; is &lt;code&gt;greater&lt;/code&gt;, otherwise &lt;code&gt;v&lt;/code&gt;.</source>
          <target state="translated">2） &lt;code&gt;greater&lt;/code&gt; 如果 &lt;code&gt;v&lt;/code&gt; 是 &lt;code&gt;less&lt;/code&gt; ， &lt;code&gt;less&lt;/code&gt; 如果 &lt;code&gt;v&lt;/code&gt; 是 &lt;code&gt;greater&lt;/code&gt; ，否则 &lt;code&gt;v&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="ea990990d655c174dfc674caf5fec20a3b3cb7e2" translate="yes" xml:space="preserve">
          <source>2)&lt;code&gt;high&lt;/code&gt;</source>
          <target state="translated">2)&lt;code&gt;high&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="557907f628f8a4df2207aeeacb4ddc1348607b0f" translate="yes" xml:space="preserve">
          <source>2)&lt;code&gt;int(x) != int(y)&lt;/code&gt;</source>
          <target state="translated">2） &lt;code&gt;int(x) != int(y)&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="5b739feb81f47d8bb969efaec0e9c7cb1af19ded" translate="yes" xml:space="preserve">
          <source>2)&lt;code&gt;is&lt;/code&gt;</source>
          <target state="translated">2)&lt;code&gt;is&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="bd88b678e478307587a341bc9a067cec7e1cf414" translate="yes" xml:space="preserve">
          <source>2)&lt;code&gt;ist&lt;/code&gt;</source>
          <target state="translated">2)&lt;code&gt;ist&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="a17307ad800cb24e7fb176aba00747b738ae261e" translate="yes" xml:space="preserve">
          <source>2)&lt;code&gt;last&lt;/code&gt;</source>
          <target state="translated">2)&lt;code&gt;last&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="ac7880d21715c5fae0f76e62a180d1664762db29" translate="yes" xml:space="preserve">
          <source>2)&lt;code&gt;lhs.base() != rhs.base()&lt;/code&gt;</source>
          <target state="translated">2） &lt;code&gt;lhs.base() != rhs.base()&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="8babffe6e9283750603d7f4b5b90a1f65de68877" translate="yes" xml:space="preserve">
          <source>2)&lt;code&gt;log(c.size()) + &lt;a href=&quot;../../iterator/distance&quot;&gt;std::distance&lt;/a&gt;(first, last)&lt;/code&gt;</source>
          <target state="translated">2） &lt;code&gt;log(c.size()) + &lt;a href=&quot;../../iterator/distance&quot;&gt;std::distance&lt;/a&gt;(first, last)&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="7de9d64257b17c86d839e38026fb3af4bb82075b" translate="yes" xml:space="preserve">
          <source>2)&lt;code&gt;obj-&amp;gt;compare_exchange_strong(*expected, desired)&lt;/code&gt;</source>
          <target state="translated">2） &lt;code&gt;obj-&amp;gt;compare_exchange_strong(*expected, desired)&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="3635cbb0f0f5968f893eefee0ff5678b7314d6af" translate="yes" xml:space="preserve">
          <source>2)&lt;code&gt;obj-&amp;gt;fetch_add(arg, order)&lt;/code&gt;</source>
          <target state="translated">2） &lt;code&gt;obj-&amp;gt;fetch_add(arg, order)&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="6886be927e5d544963384275f42886f76a4d3987" translate="yes" xml:space="preserve">
          <source>2)&lt;code&gt;obj-&amp;gt;fetch_and(arg, order)&lt;/code&gt;</source>
          <target state="translated">2） &lt;code&gt;obj-&amp;gt;fetch_and(arg, order)&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="ef2212d45844f497c1aab8e8e06c470b1fb768a9" translate="yes" xml:space="preserve">
          <source>2)&lt;code&gt;obj-&amp;gt;fetch_or(arg, order)&lt;/code&gt;</source>
          <target state="translated">2） &lt;code&gt;obj-&amp;gt;fetch_or(arg, order)&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="ce9500af54b795a690eff591da1cf50d8028a244" translate="yes" xml:space="preserve">
          <source>2)&lt;code&gt;obj-&amp;gt;fetch_sub(arg, order)&lt;/code&gt;</source>
          <target state="translated">2） &lt;code&gt;obj-&amp;gt;fetch_sub(arg, order)&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="e1ab3c7bfffc76f60244e1dab4c05c3208eb605b" translate="yes" xml:space="preserve">
          <source>2)&lt;code&gt;obj-&amp;gt;fetch_xor(arg, order)&lt;/code&gt;</source>
          <target state="translated">2） &lt;code&gt;obj-&amp;gt;fetch_xor(arg, order)&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="8470e7cea6faca21bb2b1d45ce7c0bfb7552ffa9" translate="yes" xml:space="preserve">
          <source>2)&lt;code&gt;other.get_id()&lt;/code&gt; equal to &lt;code&gt;&lt;a href=&quot;id&quot;&gt;std::thread::id()&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;get_id&quot;&gt;get_id()&lt;/a&gt;&lt;/code&gt; returns the value of &lt;code&gt;other.get_id()&lt;/code&gt; prior to the start of construction</source>
          <target state="translated">2） &lt;code&gt;other.get_id()&lt;/code&gt; 等于 &lt;code&gt;&lt;a href=&quot;id&quot;&gt;std::thread::id()&lt;/a&gt;&lt;/code&gt; 和 &lt;code&gt;&lt;a href=&quot;get_id&quot;&gt;get_id()&lt;/a&gt;&lt;/code&gt; 返回的值 &lt;code&gt;other.get_id()&lt;/code&gt; 之前开始建造</target>
        </trans-unit>
        <trans-unit id="2a7c7251cece5e074050666e58aec5887c5eb70e" translate="yes" xml:space="preserve">
          <source>2)&lt;code&gt;p&lt;/code&gt;</source>
          <target state="translated">2)&lt;code&gt;p&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="c885b043f15502c71fdc41eb13ad0dab35453eff" translate="yes" xml:space="preserve">
          <source>2)&lt;code&gt;promise&lt;/code&gt; is not copy-assignable.</source>
          <target state="translated">2） &lt;code&gt;promise&lt;/code&gt; 不可复制转让。</target>
        </trans-unit>
        <trans-unit id="2f45cff909050496aac313641faf97c17c2ead19" translate="yes" xml:space="preserve">
          <source>2)&lt;code&gt;ref(t.get())&lt;/code&gt;</source>
          <target state="translated">2)&lt;code&gt;ref(t.get())&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="a07e188a9620802a099d9fca724f54d2fd5fdd28" translate="yes" xml:space="preserve">
          <source>2)&lt;code&gt;s.end()&lt;/code&gt;</source>
          <target state="translated">2)&lt;code&gt;s.end()&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="5b12866528a2c911c1f5c811b5f59fc449c53c93" translate="yes" xml:space="preserve">
          <source>2)&lt;code&gt;std::chrono::get_tzdb_list().front()&lt;/code&gt;.</source>
          <target state="translated">2)&lt;code&gt;std::chrono::get_tzdb_list().front()&lt;/code&gt;.</target>
        </trans-unit>
        <trans-unit id="a4a610da0c2483e0dcc93c17aca83b8098bacc9e" translate="yes" xml:space="preserve">
          <source>2)&lt;code&gt;std::pmr::vector&lt;/code&gt; is an alias template that uses a &lt;a href=&quot;../memory/polymorphic_allocator&quot;&gt;polymorphic allocator&lt;/a&gt;</source>
          <target state="translated">2） &lt;code&gt;std::pmr::vector&lt;/code&gt; 是使用&lt;a href=&quot;../memory/polymorphic_allocator&quot;&gt;多态分配器&lt;/a&gt;的别名模板</target>
        </trans-unit>
        <trans-unit id="63687de7020d8df795b2441c184eae9b671e1dfa" translate="yes" xml:space="preserve">
          <source>2)&lt;code&gt;sv.end()&lt;/code&gt;</source>
          <target state="translated">2)&lt;code&gt;sv.end()&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="ea97bdab6c615953d04cb8f009a67d59f3778984" translate="yes" xml:space="preserve">
          <source>2)&lt;code&gt;this&lt;/code&gt;</source>
          <target state="translated">2)&lt;code&gt;this&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="cd92d0ea25d947deb6fe0798ff216199799c8b60" translate="yes" xml:space="preserve">
          <source>2)&lt;code&gt;true&lt;/code&gt; if &lt;code&gt;*this&lt;/code&gt; and &lt;code&gt;rhs&lt;/code&gt; do not refer to the same object, &lt;code&gt;false&lt;/code&gt; otherwise.</source>
          <target state="translated">2）如果 &lt;code&gt;*this&lt;/code&gt; 和 &lt;code&gt;rhs&lt;/code&gt; 没有引用同一对象，则为 &lt;code&gt;true&lt;/code&gt; ，否则为 &lt;code&gt;false&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="6cbbc40c9ec2fec480131704cdcb6a50f9fcc740" translate="yes" xml:space="preserve">
          <source>2)&lt;code&gt;true&lt;/code&gt; if &lt;code&gt;a&lt;/code&gt; is</source>
          <target state="translated">2）如果 &lt;code&gt;a&lt;/code&gt; 为 &lt;code&gt;true&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="f2481e7d7710cf162f60ff612735fe1d03ebc175" translate="yes" xml:space="preserve">
          <source>2)&lt;code&gt;true&lt;/code&gt; if &lt;code&gt;lhs&lt;/code&gt; and &lt;code&gt;rhs&lt;/code&gt; are not equal, &lt;code&gt;false&lt;/code&gt; otherwise.</source>
          <target state="translated">2）如果 &lt;code&gt;lhs&lt;/code&gt; 和 &lt;code&gt;rhs&lt;/code&gt; 不相等，则为 &lt;code&gt;true&lt;/code&gt; ，否则为 &lt;code&gt;false&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="c4f5f0094da64c29d409c1ba2c415bfff00d7719" translate="yes" xml:space="preserve">
          <source>2)&lt;code&gt;true&lt;/code&gt; if &lt;code&gt;lhs&lt;/code&gt; is</source>
          <target state="translated">2）如果 &lt;code&gt;lhs&lt;/code&gt; 是，则为 &lt;code&gt;true&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="8872cc369fa854f8baf4c05b786ced317e80c56e" translate="yes" xml:space="preserve">
          <source>2)&lt;code&gt;true&lt;/code&gt; if &lt;code&gt;path() != rhs.path()&lt;/code&gt;, &lt;code&gt;false&lt;/code&gt; otherwise.</source>
          <target state="translated">2） &lt;code&gt;true&lt;/code&gt; ，如果 &lt;code&gt;path() != rhs.path()&lt;/code&gt; ， &lt;code&gt;false&lt;/code&gt; 否则。</target>
        </trans-unit>
        <trans-unit id="d8ac909094e680682b3c146b6aea624f8b106cd2" translate="yes" xml:space="preserve">
          <source>2)&lt;code&gt;true&lt;/code&gt; if &lt;code&gt;v&lt;/code&gt; is &lt;code&gt;greater&lt;/code&gt; or &lt;code&gt;equivalent&lt;/code&gt;, and &lt;code&gt;false&lt;/code&gt; if &lt;code&gt;v&lt;/code&gt; is &lt;code&gt;less&lt;/code&gt;</source>
          <target state="translated">2） &lt;code&gt;true&lt;/code&gt; 如果 &lt;code&gt;v&lt;/code&gt; 是 &lt;code&gt;greater&lt;/code&gt; 或 &lt;code&gt;equivalent&lt;/code&gt; ，和 &lt;code&gt;false&lt;/code&gt; 如果 &lt;code&gt;v&lt;/code&gt; 是 &lt;code&gt;less&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="f7670f5df5ce0244c44ee6d7e0007f11e6492346" translate="yes" xml:space="preserve">
          <source>2)&lt;code&gt;true&lt;/code&gt; if &lt;code&gt;v&lt;/code&gt; is &lt;code&gt;greater&lt;/code&gt; or &lt;code&gt;equivalent&lt;/code&gt;, and &lt;code&gt;false&lt;/code&gt; if &lt;code&gt;v&lt;/code&gt; is &lt;code&gt;less&lt;/code&gt; or &lt;code&gt;unordered&lt;/code&gt;</source>
          <target state="translated">2） &lt;code&gt;true&lt;/code&gt; 如果 &lt;code&gt;v&lt;/code&gt; 是 &lt;code&gt;greater&lt;/code&gt; 或 &lt;code&gt;equivalent&lt;/code&gt; ，和 &lt;code&gt;false&lt;/code&gt; 如果 &lt;code&gt;v&lt;/code&gt; 是 &lt;code&gt;less&lt;/code&gt; 或 &lt;code&gt;unordered&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="e7a6df0daf1bf3e22bd7340faab527a0fe8ed4c5" translate="yes" xml:space="preserve">
          <source>2)&lt;code&gt;true&lt;/code&gt; if &lt;code&gt;v&lt;/code&gt; is &lt;code&gt;greater&lt;/code&gt;, &lt;code&gt;equivalent&lt;/code&gt;, or &lt;code&gt;equal&lt;/code&gt;, and &lt;code&gt;false&lt;/code&gt; if &lt;code&gt;v&lt;/code&gt; is &lt;code&gt;less&lt;/code&gt;</source>
          <target state="translated">2） &lt;code&gt;true&lt;/code&gt; 如果 &lt;code&gt;v&lt;/code&gt; 是 &lt;code&gt;greater&lt;/code&gt; ， &lt;code&gt;equivalent&lt;/code&gt; ，或 &lt;code&gt;equal&lt;/code&gt; ，并且 &lt;code&gt;false&lt;/code&gt; 如果 &lt;code&gt;v&lt;/code&gt; 是 &lt;code&gt;less&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="5faf547f449d141528b8c168939dd4a1baba058e" translate="yes" xml:space="preserve">
          <source>2)&lt;code&gt;true&lt;/code&gt; if &lt;code&gt;v&lt;/code&gt; is &lt;code&gt;greater&lt;/code&gt;, and &lt;code&gt;false&lt;/code&gt; if &lt;code&gt;v&lt;/code&gt; is &lt;code&gt;less&lt;/code&gt; or &lt;code&gt;equivalent&lt;/code&gt;</source>
          <target state="translated">2） &lt;code&gt;true&lt;/code&gt; 如果 &lt;code&gt;v&lt;/code&gt; 是 &lt;code&gt;greater&lt;/code&gt; ，和 &lt;code&gt;false&lt;/code&gt; 如果 &lt;code&gt;v&lt;/code&gt; 是 &lt;code&gt;less&lt;/code&gt; 或 &lt;code&gt;equivalent&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="2a8ff1a288f926bf97b773c82282a1aa87ed35ac" translate="yes" xml:space="preserve">
          <source>2)&lt;code&gt;true&lt;/code&gt; if &lt;code&gt;v&lt;/code&gt; is &lt;code&gt;greater&lt;/code&gt;, and &lt;code&gt;false&lt;/code&gt; if &lt;code&gt;v&lt;/code&gt; is &lt;code&gt;less&lt;/code&gt;, &lt;code&gt;equivalent&lt;/code&gt;, or &lt;code&gt;equal&lt;/code&gt;</source>
          <target state="translated">2） &lt;code&gt;true&lt;/code&gt; 如果 &lt;code&gt;v&lt;/code&gt; 是 &lt;code&gt;greater&lt;/code&gt; ，和 &lt;code&gt;false&lt;/code&gt; 如果 &lt;code&gt;v&lt;/code&gt; 是 &lt;code&gt;less&lt;/code&gt; ， &lt;code&gt;equivalent&lt;/code&gt; ，或 &lt;code&gt;equal&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="ca5b6c3deda05ece1e197fb794aa33090cfb1f07" translate="yes" xml:space="preserve">
          <source>2)&lt;code&gt;true&lt;/code&gt; if &lt;code&gt;v&lt;/code&gt; is &lt;code&gt;greater&lt;/code&gt;, and &lt;code&gt;false&lt;/code&gt; if &lt;code&gt;v&lt;/code&gt; is &lt;code&gt;less&lt;/code&gt;, &lt;code&gt;equivalent&lt;/code&gt;, or &lt;code&gt;unordered&lt;/code&gt;</source>
          <target state="translated">2） &lt;code&gt;true&lt;/code&gt; 如果 &lt;code&gt;v&lt;/code&gt; 是 &lt;code&gt;greater&lt;/code&gt; ，和 &lt;code&gt;false&lt;/code&gt; 如果 &lt;code&gt;v&lt;/code&gt; 是 &lt;code&gt;less&lt;/code&gt; ， &lt;code&gt;equivalent&lt;/code&gt; ，或 &lt;code&gt;unordered&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="ebad42849438542001adc103e3fce9deb7075cca" translate="yes" xml:space="preserve">
          <source>2)&lt;code&gt;true&lt;/code&gt; if &lt;code&gt;v&lt;/code&gt; is &lt;code&gt;less&lt;/code&gt; or &lt;code&gt;equivalent&lt;/code&gt;, and &lt;code&gt;false&lt;/code&gt; if &lt;code&gt;v&lt;/code&gt; is &lt;code&gt;greater&lt;/code&gt;</source>
          <target state="translated">2） &lt;code&gt;true&lt;/code&gt; 如果 &lt;code&gt;v&lt;/code&gt; 是 &lt;code&gt;less&lt;/code&gt; 或 &lt;code&gt;equivalent&lt;/code&gt; ，和 &lt;code&gt;false&lt;/code&gt; 如果 &lt;code&gt;v&lt;/code&gt; 是 &lt;code&gt;greater&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="6c796b516162af0e3e1844f636929b827becd470" translate="yes" xml:space="preserve">
          <source>2)&lt;code&gt;true&lt;/code&gt; if &lt;code&gt;v&lt;/code&gt; is &lt;code&gt;less&lt;/code&gt; or &lt;code&gt;equivalent&lt;/code&gt;, and &lt;code&gt;false&lt;/code&gt; if &lt;code&gt;v&lt;/code&gt; is &lt;code&gt;greater&lt;/code&gt; or &lt;code&gt;unordered&lt;/code&gt;</source>
          <target state="translated">2） &lt;code&gt;true&lt;/code&gt; 如果 &lt;code&gt;v&lt;/code&gt; 是 &lt;code&gt;less&lt;/code&gt; 或 &lt;code&gt;equivalent&lt;/code&gt; ，和 &lt;code&gt;false&lt;/code&gt; 如果 &lt;code&gt;v&lt;/code&gt; 是 &lt;code&gt;greater&lt;/code&gt; 或 &lt;code&gt;unordered&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="aa349488701da2b5bb041f0c069dc832a540a62e" translate="yes" xml:space="preserve">
          <source>2)&lt;code&gt;true&lt;/code&gt; if &lt;code&gt;v&lt;/code&gt; is &lt;code&gt;less&lt;/code&gt;, &lt;code&gt;equivalent&lt;/code&gt;, or &lt;code&gt;equal&lt;/code&gt;, and &lt;code&gt;false&lt;/code&gt; if &lt;code&gt;v&lt;/code&gt; is &lt;code&gt;greater&lt;/code&gt;</source>
          <target state="translated">2） &lt;code&gt;true&lt;/code&gt; 如果 &lt;code&gt;v&lt;/code&gt; 是 &lt;code&gt;less&lt;/code&gt; ， &lt;code&gt;equivalent&lt;/code&gt; ，或 &lt;code&gt;equal&lt;/code&gt; ，并且 &lt;code&gt;false&lt;/code&gt; 如果 &lt;code&gt;v&lt;/code&gt; 是 &lt;code&gt;greater&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="cb543f0b0635803b005cff8b3d70792484822295" translate="yes" xml:space="preserve">
          <source>2)&lt;code&gt;true&lt;/code&gt; if &lt;code&gt;v&lt;/code&gt; is &lt;code&gt;less&lt;/code&gt;, and &lt;code&gt;false&lt;/code&gt; if &lt;code&gt;v&lt;/code&gt; is &lt;code&gt;greater&lt;/code&gt; or &lt;code&gt;equivalent&lt;/code&gt;</source>
          <target state="translated">2） &lt;code&gt;true&lt;/code&gt; 如果 &lt;code&gt;v&lt;/code&gt; 是 &lt;code&gt;less&lt;/code&gt; ，和 &lt;code&gt;false&lt;/code&gt; 如果 &lt;code&gt;v&lt;/code&gt; 是 &lt;code&gt;greater&lt;/code&gt; 或 &lt;code&gt;equivalent&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="0fafe82d07cce3a72ad60f1082ad877e38a7a846" translate="yes" xml:space="preserve">
          <source>2)&lt;code&gt;true&lt;/code&gt; if &lt;code&gt;v&lt;/code&gt; is &lt;code&gt;less&lt;/code&gt;, and &lt;code&gt;false&lt;/code&gt; if &lt;code&gt;v&lt;/code&gt; is &lt;code&gt;greater&lt;/code&gt;, &lt;code&gt;equivalent&lt;/code&gt;, or &lt;code&gt;equal&lt;/code&gt;</source>
          <target state="translated">2） &lt;code&gt;true&lt;/code&gt; 如果 &lt;code&gt;v&lt;/code&gt; 是 &lt;code&gt;less&lt;/code&gt; ，和 &lt;code&gt;false&lt;/code&gt; 如果 &lt;code&gt;v&lt;/code&gt; 是 &lt;code&gt;greater&lt;/code&gt; ， &lt;code&gt;equivalent&lt;/code&gt; ，或 &lt;code&gt;equal&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="f1c04c48f2380be99a3959e21acedbd7706ca6e7" translate="yes" xml:space="preserve">
          <source>2)&lt;code&gt;true&lt;/code&gt; if &lt;code&gt;v&lt;/code&gt; is &lt;code&gt;less&lt;/code&gt;, and &lt;code&gt;false&lt;/code&gt; if &lt;code&gt;v&lt;/code&gt; is &lt;code&gt;greater&lt;/code&gt;, &lt;code&gt;equivalent&lt;/code&gt;, or &lt;code&gt;unordered&lt;/code&gt;</source>
          <target state="translated">2） &lt;code&gt;true&lt;/code&gt; 如果 &lt;code&gt;v&lt;/code&gt; 是 &lt;code&gt;less&lt;/code&gt; ，和 &lt;code&gt;false&lt;/code&gt; 如果 &lt;code&gt;v&lt;/code&gt; 是 &lt;code&gt;greater&lt;/code&gt; ， &lt;code&gt;equivalent&lt;/code&gt; ，或 &lt;code&gt;unordered&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="669fedb296937f0eb00beb590eb4c8e5d76deae6" translate="yes" xml:space="preserve">
          <source>2)&lt;code&gt;true&lt;/code&gt; if any of the bits are set to &lt;code&gt;true&lt;/code&gt;, otherwise &lt;code&gt;false&lt;/code&gt;</source>
          <target state="translated">2） &lt;code&gt;true&lt;/code&gt; 如果任何位被设置为 &lt;code&gt;true&lt;/code&gt; ，否则 &lt;code&gt;false&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="287cc9eae751ada4e1dd47095ac82f3074353eca" translate="yes" xml:space="preserve">
          <source>2)&lt;code&gt;true&lt;/code&gt; if the &lt;code&gt;lhs&lt;/code&gt; and &lt;code&gt;rhs&lt;/code&gt; refer to different time points, &lt;code&gt;false&lt;/code&gt; otherwise.</source>
          <target state="translated">2）如果 &lt;code&gt;lhs&lt;/code&gt; 和 &lt;code&gt;rhs&lt;/code&gt; 指的是不同的时间点，则为 &lt;code&gt;true&lt;/code&gt; ，否则为 &lt;code&gt;false&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="e0fc69e6e56c78afd9b58a19ea3fabc3b75c644b" translate="yes" xml:space="preserve">
          <source>2)&lt;code&gt;true&lt;/code&gt; if the contents of the containers are not equal, &lt;code&gt;false&lt;/code&gt; otherwise</source>
          <target state="translated">2）如果容器中的内容不相等则为 &lt;code&gt;true&lt;/code&gt; ，否则为 &lt;code&gt;false&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="4f110d7fa78436badfd4c486f7d495c5b954c0b2" translate="yes" xml:space="preserve">
          <source>2)&lt;code&gt;true&lt;/code&gt; if the engine adaptors are not equivalent, &lt;code&gt;false&lt;/code&gt; otherwise.</source>
          <target state="translated">2）如果引擎适配器不相同，则为 &lt;code&gt;true&lt;/code&gt; ，否则为 &lt;code&gt;false&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="7d308c5dcea009527f8637c73b94b3c8d7fa352f" translate="yes" xml:space="preserve">
          <source>2)&lt;code&gt;true&lt;/code&gt; if the engines are not equivalent, &lt;code&gt;false&lt;/code&gt; otherwise.</source>
          <target state="translated">2）如果引擎不相同，则为 &lt;code&gt;true&lt;/code&gt; ，否则为 &lt;code&gt;false&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="f3f37d6d416c5b842473de2bb0dcf54960dd993b" translate="yes" xml:space="preserve">
          <source>2)&lt;code&gt;true&lt;/code&gt; if the error category or error value compare are not equal.</source>
          <target state="translated">2）如果错误类别或错误值比较不相等，则为 &lt;code&gt;true&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="7b7acf72ef6740f62149d3e00aa8746801dafb3a" translate="yes" xml:space="preserve">
          <source>2)&lt;code&gt;unsigned(x) != unsigned(y)&lt;/code&gt;</source>
          <target state="translated">2） &lt;code&gt;unsigned(x) != unsigned(y)&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="35e660f8192c1e06658f32d65e5f4c81fc545b6d" translate="yes" xml:space="preserve">
          <source>2)&lt;code&gt;value&lt;/code&gt; is moved into the new element.</source>
          <target state="translated">2）将 &lt;code&gt;value&lt;/code&gt; 移到新元素中。</target>
        </trans-unit>
        <trans-unit id="a2034b68d3bb5a2db84b6d1ac1a90557d76f11fd" translate="yes" xml:space="preserve">
          <source>2)&lt;code&gt;view::iota(E)&lt;/code&gt; and &lt;code&gt;view::iota(E, F)&lt;/code&gt; are</source>
          <target state="translated">2） &lt;code&gt;view::iota(E)&lt;/code&gt; 和 &lt;code&gt;view::iota(E, F)&lt;/code&gt; 是</target>
        </trans-unit>
        <trans-unit id="ef4883b8e5c4ddc733a492033816ad54c6b64921" translate="yes" xml:space="preserve">
          <source>2)&lt;code&gt;x.date() != y.date()&lt;/code&gt;</source>
          <target state="translated">2） &lt;code&gt;x.date() != y.date()&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="5086dbfca06a7a641a147fcc1f91aacab45b4881" translate="yes" xml:space="preserve">
          <source>2)&lt;code&gt;x.month() != y.month()&lt;/code&gt;</source>
          <target state="translated">2） &lt;code&gt;x.month() != y.month()&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="cd1daf01bf695865810181b1ceec896f7ede3b9d" translate="yes" xml:space="preserve">
          <source>2)&lt;code&gt;x.name() != y.name()&lt;/code&gt;.</source>
          <target state="translated">2） &lt;code&gt;x.name() != y.name()&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="f72e378da18db8d2186d4ae16a5b235f978d73c8" translate="yes" xml:space="preserve">
          <source>2)digit-sequence representing a whole number with a decimal separator, in this case the exponent is optional: &lt;code&gt;1.&lt;/code&gt;, &lt;code&gt;1.e-2&lt;/code&gt;</source>
          <target state="translated">2）由十进制分隔符表示整数的数字序列，在这种情况下，指数是可选的： &lt;code&gt;1.&lt;/code&gt; ， &lt;code&gt;1.e-2&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="446e6652a695015432d0d61d79646a32852def09" translate="yes" xml:space="preserve">
          <source>2)lhs must be an expression of type pointer to class type &lt;code&gt;T*&lt;/code&gt;.</source>
          <target state="translated">2）lhs必须是指向类类型 &lt;code&gt;T*&lt;/code&gt; 的类型指针的表达式。</target>
        </trans-unit>
        <trans-unit id="d173a9d60b71f0cf3b81d723c7bcb2084845d154" translate="yes" xml:space="preserve">
          <source>2)root-directory (if any)</source>
          <target state="translated">2)根目录(如有)</target>
        </trans-unit>
        <trans-unit id="ccbc1bba81b28ef9c3dc15ca80a9ef2fa5bf6618" translate="yes" xml:space="preserve">
          <source>2*arg</source>
          <target state="translated">2*arg</target>
        </trans-unit>
        <trans-unit id="a57d6ad1b24fb56cef62c7ce08063a39f49da8fd" translate="yes" xml:space="preserve">
          <source>2, 4-8) (none)</source>
          <target state="translated">2、4-8)(无)</target>
        </trans-unit>
        <trans-unit id="2eeedb90968ab94c40f7bd7f3be7d59b5e08f0e0" translate="yes" xml:space="preserve">
          <source>2,3) A copy of the pointed-to shared pointer.</source>
          <target state="translated">2,3)指向共享指针的副本。</target>
        </trans-unit>
        <trans-unit id="1fbf20b3e41b170f4a6146dae9e7a474742f472e" translate="yes" xml:space="preserve">
          <source>2,3) Applies the operator between each element of the valarray and the scalar.</source>
          <target state="translated">2,3)在valarray的每个元素和标量之间应用运算符。</target>
        </trans-unit>
        <trans-unit id="7f541936d449a0b44e0a16f37b1f62331d08f498" translate="yes" xml:space="preserve">
          <source>2,3) Assigns &lt;code&gt;cx.real()&lt;/code&gt; and &lt;code&gt;cx.imag()&lt;/code&gt; to the real and the imaginary parts of the complex number respectively.</source>
          <target state="translated">2,3）将 &lt;code&gt;cx.real()&lt;/code&gt; 和 &lt;code&gt;cx.imag()&lt;/code&gt; ）分别分配给复数的实部和虚部。</target>
        </trans-unit>
        <trans-unit id="0a5e4af74c00b93030ced3220c542f8aa2ec422a" translate="yes" xml:space="preserve">
          <source>2,3) Expands to an integer constant expression with value</source>
          <target state="translated">2,3)展开为一个整数常数表达式,其值为。</target>
        </trans-unit>
        <trans-unit id="9ba5a933a3a33bf4477ec8b7b37691aae4e37c7a" translate="yes" xml:space="preserve">
          <source>2,3) Same as (1), but accepts any &lt;code&gt;&lt;a href=&quot;../../string/basic_string&quot;&gt;std::basic_string&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;../../string/basic_string_view&quot;&gt;std::basic_string_view&lt;/a&gt;&lt;/code&gt;, null-terminated multicharacter string, or an input iterator pointing to a null-terminated multicharacter sequence. Equivalent to &lt;code&gt;return operator/=(path(source));&lt;/code&gt;.</source>
          <target state="translated">2,3）与（1）相同，但是接受任何 &lt;code&gt;&lt;a href=&quot;../../string/basic_string&quot;&gt;std::basic_string&lt;/a&gt;&lt;/code&gt; ， &lt;code&gt;&lt;a href=&quot;../../string/basic_string_view&quot;&gt;std::basic_string_view&lt;/a&gt;&lt;/code&gt; ，以空字符终止的多字符字符串或指向以空字符终止的多字符序列的输入迭代器。等效于 &lt;code&gt;return operator/=(path(source));&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="bf1a28ef18e811865e16ae09ce175a696143c037" translate="yes" xml:space="preserve">
          <source>2,3) Same as (1), but the object constructed is a possibly-multidimensional array whose every non-array element is initialized as if by the expression &lt;code&gt;&lt;a href=&quot;../allocator_traits&quot;&gt;std::allocator_traits&lt;/a&gt;&amp;lt;A2&amp;gt;::construct(a2, pv)&lt;/code&gt; where &lt;code&gt;a2&lt;/code&gt; of type &lt;code&gt;A2&lt;/code&gt; is the copy of the allocator rebound to manage objects of type &lt;code&gt;&lt;a href=&quot;../../types/remove_cv&quot;&gt;std::remove_cv_t&lt;/a&gt;&amp;lt;&lt;a href=&quot;../../types/remove_all_extents&quot;&gt;std::remove_all_extents_t&lt;/a&gt;&amp;lt;T&amp;gt;&amp;gt;&lt;/code&gt;. The overload (2) creates an array of size &lt;code&gt;N&lt;/code&gt; along its first dimension. The array elements are initialized in ascending order of their addresses, and when their lifetime ends are destroyed in the reverse order of their original construction.</source>
          <target state="translated">2,3）与（1）相同，但是构造的对象是一个可能为多维的数组，其每个非数组元素都好像通过表达式 &lt;code&gt;&lt;a href=&quot;../allocator_traits&quot;&gt;std::allocator_traits&lt;/a&gt;&amp;lt;A2&amp;gt;::construct(a2, pv)&lt;/code&gt; 进行初始化，其中 &lt;code&gt;a2&lt;/code&gt; &lt;code&gt;A2&lt;/code&gt; 类型的是分配器反弹的副本，用于管理 &lt;code&gt;&lt;a href=&quot;../../types/remove_cv&quot;&gt;std::remove_cv_t&lt;/a&gt;&amp;lt;&lt;a href=&quot;../../types/remove_all_extents&quot;&gt;std::remove_all_extents_t&lt;/a&gt;&amp;lt;T&amp;gt;&amp;gt;&lt;/code&gt; 类型的对象。重载（2）沿其第一维创建大小为 &lt;code&gt;N&lt;/code&gt; 的数组。数组元素以其地址的升序进行初始化，并且当其生存期结束时，将以其原始构造的相反顺序对其进行破坏。</target>
        </trans-unit>
        <trans-unit id="018f274ddc47293c462130d5bd238bc492ecf46c" translate="yes" xml:space="preserve">
          <source>2,3) Same as (1), but the object constructed is a possibly-multidimensional array whose non-array elements of type &lt;code&gt;std::remove_all_extents_t&amp;lt;T&amp;gt;&lt;/code&gt; are value-initialized as if by placement-new expression &lt;code&gt;::new(pv) &lt;a href=&quot;../../types/remove_all_extents&quot;&gt;std::remove_all_extents_t&lt;/a&gt;&amp;lt;T&amp;gt;()&lt;/code&gt;. The overload (2) creates an array of size &lt;code&gt;N&lt;/code&gt; along the first dimension. The array elements are initialized in ascending order of their addresses, and when their lifetime ends are destroyed in the reverse order of their original construction.</source>
          <target state="translated">2,3）与（1）相同，但是构造的对象是可能是多维数组，其类型 &lt;code&gt;std::remove_all_extents_t&amp;lt;T&amp;gt;&lt;/code&gt; 的非数组元素被值初始化，就像通过放置新表达式 &lt;code&gt;::new(pv) &lt;a href=&quot;../../types/remove_all_extents&quot;&gt;std::remove_all_extents_t&lt;/a&gt;&amp;lt;T&amp;gt;()&lt;/code&gt; 。重载（2）沿第一维创建大小为 &lt;code&gt;N&lt;/code&gt; 的数组。数组元素以其地址的升序进行初始化，并且当其生存期结束时，将以其原始构造的相反顺序对其进行破坏。</target>
        </trans-unit>
        <trans-unit id="3d453906f3db33d3d81c44ff93850c3210eb625f" translate="yes" xml:space="preserve">
          <source>2,4) Elements are compared using the given binary predicate &lt;code&gt;p&lt;/code&gt;. The behavior is undefined if it is not an equivalence relation.</source>
          <target state="translated">2,4）使用给定的二元谓词 &lt;code&gt;p&lt;/code&gt; 比较元素。如果行为不是等价关系，则该行为是不确定的。</target>
        </trans-unit>
        <trans-unit id="a9fd0b8ea9fe33311db94688fbdc0e5e98eb140e" translate="yes" xml:space="preserve">
          <source>2,4) O(N) applications of the predicate, and O(N log N) swaps, where N = last - first.</source>
          <target state="translated">2,4)O(N)谓词的应用,以及O(N log N)交换,其中N=last-first。</target>
        </trans-unit>
        <trans-unit id="82bfbd27f6c900324f67720ca2a407bd89554dd7" translate="yes" xml:space="preserve">
          <source>2,4) Performs &lt;code&gt;*d_first = *first;&lt;/code&gt;. For every &lt;code&gt;d&lt;/code&gt; in &lt;code&gt;[1, last - first - 1]&lt;/code&gt;, assigns &lt;code&gt;*(first + d) - *(first + d - 1)&lt;/code&gt; (overload (2)) or &lt;code&gt;op(*(first + d), *(first + d - 1))&lt;/code&gt; (overload (4)) to &lt;code&gt;*(d_first + d)&lt;/code&gt;. This is executed according to &lt;code&gt;policy&lt;/code&gt;. This overload only participates in overload resolution if &lt;code&gt;&lt;a href=&quot;is_execution_policy&quot;&gt;std::is_execution_policy_v&lt;/a&gt;&amp;lt;&lt;a href=&quot;../types/decay&quot;&gt;std::decay_t&lt;/a&gt;&amp;lt;ExecutionPolicy&amp;gt;&amp;gt;&lt;/code&gt; is true.</source>
          <target state="translated">2,4）执行 &lt;code&gt;*d_first = *first;&lt;/code&gt; 。对于每个 &lt;code&gt;d&lt;/code&gt; 在 &lt;code&gt;[1, last - first - 1]&lt;/code&gt; ，受让人 &lt;code&gt;*(first + d) - *(first + d - 1)&lt;/code&gt; （过载（2））或 &lt;code&gt;op(*(first + d), *(first + d - 1))&lt;/code&gt; （重载（4））到 &lt;code&gt;*(d_first + d)&lt;/code&gt; 。这是根据 &lt;code&gt;policy&lt;/code&gt; 执行的。如果 &lt;code&gt;&lt;a href=&quot;is_execution_policy&quot;&gt;std::is_execution_policy_v&lt;/a&gt;&amp;lt;&lt;a href=&quot;../types/decay&quot;&gt;std::decay_t&lt;/a&gt;&amp;lt;ExecutionPolicy&amp;gt;&amp;gt;&lt;/code&gt; 为true，则此重载仅参与重载解决方案。</target>
        </trans-unit>
        <trans-unit id="f2c70c4348c997f8ada3083a9866ea3442c47537" translate="yes" xml:space="preserve">
          <source>2,4) Same as (1) and (3), respectively, but executed according to &lt;code&gt;policy&lt;/code&gt; and the moves may be performed in any order. These overloads does not participate in overload resolution unless &lt;code&gt;&lt;a href=&quot;is_execution_policy&quot;&gt;std::is_execution_policy_v&lt;/a&gt;&amp;lt;&lt;a href=&quot;../types/decay&quot;&gt;std::decay_t&lt;/a&gt;&amp;lt;ExecutionPolicy&amp;gt;&amp;gt;&lt;/code&gt; is true.</source>
          <target state="translated">2,4）分别与（1）和（3）相同，但是根据 &lt;code&gt;policy&lt;/code&gt; 执行，并且可以按任意顺序执行移动。除非 &lt;code&gt;&lt;a href=&quot;is_execution_policy&quot;&gt;std::is_execution_policy_v&lt;/a&gt;&amp;lt;&lt;a href=&quot;../types/decay&quot;&gt;std::decay_t&lt;/a&gt;&amp;lt;ExecutionPolicy&amp;gt;&amp;gt;&lt;/code&gt; 为true，否则这些重载不会参与重载解决方案。</target>
        </trans-unit>
        <trans-unit id="7e23a0134ee56102030a6d7a6f0b48bf5b193fa4" translate="yes" xml:space="preserve">
          <source>2,4) Same as (1,3), but executed according to &lt;code&gt;policy&lt;/code&gt;. These overloads do not participate in overload resolution unless &lt;code&gt;&lt;a href=&quot;is_execution_policy&quot;&gt;std::is_execution_policy_v&lt;/a&gt;&amp;lt;&lt;a href=&quot;../types/decay&quot;&gt;std::decay_t&lt;/a&gt;&amp;lt;ExecutionPolicy&amp;gt;&amp;gt;&lt;/code&gt; is true</source>
          <target state="translated">2,4）与（1,3）相同，但根据 &lt;code&gt;policy&lt;/code&gt; 执行。这些重载不参与重载解析，除非 &lt;code&gt;&lt;a href=&quot;is_execution_policy&quot;&gt;std::is_execution_policy_v&lt;/a&gt;&amp;lt;&lt;a href=&quot;../types/decay&quot;&gt;std::decay_t&lt;/a&gt;&amp;lt;ExecutionPolicy&amp;gt;&amp;gt;&lt;/code&gt; 为true</target>
        </trans-unit>
        <trans-unit id="24d59d8f6154a1aa99b7e79fa09bf73989c0371f" translate="yes" xml:space="preserve">
          <source>2,4) Same as (1,3), but executed according to &lt;code&gt;policy&lt;/code&gt;. These overloads do not participate in overload resolution unless &lt;code&gt;&lt;a href=&quot;is_execution_policy&quot;&gt;std::is_execution_policy_v&lt;/a&gt;&amp;lt;&lt;a href=&quot;../types/decay&quot;&gt;std::decay_t&lt;/a&gt;&amp;lt;ExecutionPolicy&amp;gt;&amp;gt;&lt;/code&gt; is true.</source>
          <target state="translated">2,4）与（1,3）相同，但根据 &lt;code&gt;policy&lt;/code&gt; 执行。除非 &lt;code&gt;&lt;a href=&quot;is_execution_policy&quot;&gt;std::is_execution_policy_v&lt;/a&gt;&amp;lt;&lt;a href=&quot;../types/decay&quot;&gt;std::decay_t&lt;/a&gt;&amp;lt;ExecutionPolicy&amp;gt;&amp;gt;&lt;/code&gt; 为true，否则这些重载不参与重载解析。</target>
        </trans-unit>
        <trans-unit id="86b93d93131c4d8e7de7d3ec5d3cdb6efa1deaf7" translate="yes" xml:space="preserve">
          <source>2,4) Same as (1,3), but executed according to &lt;code&gt;policy&lt;/code&gt;. This overload only participates in overload resolution if &lt;code&gt;&lt;a href=&quot;is_execution_policy&quot;&gt;std::is_execution_policy_v&lt;/a&gt;&amp;lt;&lt;a href=&quot;../types/decay&quot;&gt;std::decay_t&lt;/a&gt;&amp;lt;ExecutionPolicy&amp;gt;&amp;gt;&lt;/code&gt; is true</source>
          <target state="translated">2,4）与（1,3）相同，但根据 &lt;code&gt;policy&lt;/code&gt; 执行。如果 &lt;code&gt;&lt;a href=&quot;is_execution_policy&quot;&gt;std::is_execution_policy_v&lt;/a&gt;&amp;lt;&lt;a href=&quot;../types/decay&quot;&gt;std::decay_t&lt;/a&gt;&amp;lt;ExecutionPolicy&amp;gt;&amp;gt;&lt;/code&gt; 为true，则此重载仅参与重载解决方案</target>
        </trans-unit>
        <trans-unit id="86f3e31fcf2db7c0bc61ea56eb43cb46106da43c" translate="yes" xml:space="preserve">
          <source>2,4) Same as (1,3), except the mapped value is constructed from &lt;code&gt;value_type(std::move(k), &lt;a href=&quot;../../utility/forward&quot;&gt;std::forward&lt;/a&gt;&amp;lt;M&amp;gt;(obj))&lt;/code&gt;</source>
          <target state="translated">2,4）与（1,3）相同，除了映射的值是由 &lt;code&gt;value_type(std::move(k), &lt;a href=&quot;../../utility/forward&quot;&gt;std::forward&lt;/a&gt;&amp;lt;M&amp;gt;(obj))&lt;/code&gt; &lt;a href=&quot;../../utility/forward&quot;&gt;std :: forward&lt;/a&gt; &amp;lt;M&amp;gt;（obj））构造的</target>
        </trans-unit>
        <trans-unit id="918d9a24234a4b6eaab57e11c9c3d0527b8bc575" translate="yes" xml:space="preserve">
          <source>2,4) The object of type &lt;code&gt;string_type&lt;/code&gt; to use as the representation of &lt;code&gt;false&lt;/code&gt;. The standard specializations of &lt;code&gt;std::numpunct&lt;/code&gt; return &lt;code&gt;&quot;false&quot;&lt;/code&gt; and &lt;code&gt;L&quot;false&quot;&lt;/code&gt;.</source>
          <target state="translated">2,4）类型为 &lt;code&gt;string_type&lt;/code&gt; 的对象用作 &lt;code&gt;false&lt;/code&gt; 的表示形式。 &lt;code&gt;std::numpunct&lt;/code&gt; 的标准专业返回 &lt;code&gt;&quot;false&quot;&lt;/code&gt; 和 &lt;code&gt;L&quot;false&quot;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="d44bfea873efca969b40fd5f871fa83ea6d17e4e" translate="yes" xml:space="preserve">
          <source>2,4) The value of the atomic variable before the modification. Formally, the value immediately preceding the effects of this function in the &lt;a href=&quot;../memory_order#Modification_order&quot;&gt;modification order&lt;/a&gt; of &lt;code&gt;*this&lt;/code&gt;.</source>
          <target state="translated">2,4）修改前原子变量的值。形式上，值立即在此功能的影响前述&lt;a href=&quot;../memory_order#Modification_order&quot;&gt;修饰顺序&lt;/a&gt;的 &lt;code&gt;*this&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="4ae83859a203ce9166a88c2baacaa761e0e817c2" translate="yes" xml:space="preserve">
          <source>2,4) The value of the referenced object before the modification.</source>
          <target state="translated">2,4)修改前被引用对象的值。</target>
        </trans-unit>
        <trans-unit id="e08c409333299d333c6484f0c8e738bbbac6725b" translate="yes" xml:space="preserve">
          <source>2,4) a copy of the &lt;code&gt;day&lt;/code&gt; made before modification</source>
          <target state="translated">2,4）修改前 &lt;code&gt;day&lt;/code&gt; 的副本</target>
        </trans-unit>
        <trans-unit id="19f62009cf80411e41d4843867ad567578f32188" translate="yes" xml:space="preserve">
          <source>2,4) a copy of the &lt;code&gt;month&lt;/code&gt; made before modification</source>
          <target state="translated">2,4）修改前所制作 &lt;code&gt;month&lt;/code&gt; 的副本</target>
        </trans-unit>
        <trans-unit id="e33ea80cde798ea0598cf06c35fd6879cd8fe605" translate="yes" xml:space="preserve">
          <source>2,4) a copy of the &lt;code&gt;time_point&lt;/code&gt; made before modification</source>
          <target state="translated">2,4）修改前制作的 &lt;code&gt;time_point&lt;/code&gt; 的副本</target>
        </trans-unit>
        <trans-unit id="3791d25d6538cdfe2b33ae1eb6bb04fcf70cc2dc" translate="yes" xml:space="preserve">
          <source>2,4) a copy of the &lt;code&gt;weekday&lt;/code&gt; made before modification</source>
          <target state="translated">2,4）修改前制作的 &lt;code&gt;weekday&lt;/code&gt; 副本</target>
        </trans-unit>
        <trans-unit id="e542c06cfbd7a826f7b1876b6eb5154d84d94242" translate="yes" xml:space="preserve">
          <source>2,4) a copy of the &lt;code&gt;year&lt;/code&gt; made before modification</source>
          <target state="translated">2,4）修改前的 &lt;code&gt;year&lt;/code&gt; 副本</target>
        </trans-unit>
        <trans-unit id="2d94fdd2ad152c7fecf4d370a5a9d9ea672955ad" translate="yes" xml:space="preserve">
          <source>2,4) a copy of the duration made before modification</source>
          <target state="translated">2,4)修改前所做的期限副本</target>
        </trans-unit>
        <trans-unit id="6799429717fc8f4c3da105fa656767ff8d9b555f" translate="yes" xml:space="preserve">
          <source>2,4) type is &lt;a href=&quot;decltype&quot;&gt;&lt;code&gt;decltype(e)&lt;/code&gt;&lt;/a&gt;, where &lt;code&gt;e&lt;/code&gt; is the initializer.</source>
          <target state="translated">2,4）类型为&lt;a href=&quot;decltype&quot;&gt; &lt;code&gt;decltype(e)&lt;/code&gt; &lt;/a&gt;，其中 &lt;code&gt;e&lt;/code&gt; 是初始值设定项。</target>
        </trans-unit>
        <trans-unit id="216b22061fff2e1006cda85a67ec6ef180591376" translate="yes" xml:space="preserve">
          <source>2,4)&lt;code&gt;*this&lt;/code&gt;</source>
          <target state="translated">2,4)&lt;code&gt;*this&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="82a86776052eec0eab672ec07043fdf2b3dd0395" translate="yes" xml:space="preserve">
          <source>2,4)&lt;code&gt;O(&lt;a href=&quot;../iterator/distance&quot;&gt;std::distance&lt;/a&gt;(first1, last1) + &lt;a href=&quot;../iterator/distance&quot;&gt;std::distance&lt;/a&gt;(first2, last2))&lt;/code&gt;</source>
          <target state="translated">2,4） &lt;code&gt;O(&lt;a href=&quot;../iterator/distance&quot;&gt;std::distance&lt;/a&gt;(first1, last1) + &lt;a href=&quot;../iterator/distance&quot;&gt;std::distance&lt;/a&gt;(first2, last2))&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="7ab87de2e789914e676e6d2bb6b8a4775bf3a9c7" translate="yes" xml:space="preserve">
          <source>2,4)&lt;code&gt;O(N log N)&lt;/code&gt; comparisons.</source>
          <target state="translated">2,4） &lt;code&gt;O(N log N)&lt;/code&gt; 比较。</target>
        </trans-unit>
        <trans-unit id="e9aa2496405f6a2ea1fcb56cc9009f28d2f0dcb0" translate="yes" xml:space="preserve">
          <source>2,4)&lt;code&gt;O(last-first)&lt;/code&gt; applications of the corresponding predicate.</source>
          <target state="translated">2,4）相应谓词的 &lt;code&gt;O(last-first)&lt;/code&gt; 应用。</target>
        </trans-unit>
        <trans-unit id="5b9f0b74be025b0dc4b7ef0dc2adf927918206f7" translate="yes" xml:space="preserve">
          <source>2,4)&lt;code&gt;end&lt;/code&gt;</source>
          <target state="translated">2,4)&lt;code&gt;end&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="8de80d6dff656985a666188baa2ab5f4106fee86" translate="yes" xml:space="preserve">
          <source>2,4)&lt;code&gt;end&lt;/code&gt;.</source>
          <target state="translated">2,4)&lt;code&gt;end&lt;/code&gt;.</target>
        </trans-unit>
        <trans-unit id="00383d73e24daabb7d9b6599e85970721380f34f" translate="yes" xml:space="preserve">
          <source>2,4)&lt;code&gt;high&lt;/code&gt;</source>
          <target state="translated">2,4)&lt;code&gt;high&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="716afc08a0831396510b7316c8cd1087855f0db7" translate="yes" xml:space="preserve">
          <source>2,4,5,6) Throws any exception thrown by the constructor of the contained type.</source>
          <target state="translated">2,4,5,6)抛出任何由包含类型的构造函数抛出的异常。</target>
        </trans-unit>
        <trans-unit id="92d1d705523a7a8cb79bfb49d3e6d4bf49999160" translate="yes" xml:space="preserve">
          <source>2,4,6) Same as (1,3,5), but executed according to &lt;code&gt;policy&lt;/code&gt;. These overloads do not participate in overload resolution unless &lt;code&gt;&lt;a href=&quot;is_execution_policy&quot;&gt;std::is_execution_policy_v&lt;/a&gt;&amp;lt;&lt;a href=&quot;../types/decay&quot;&gt;std::decay_t&lt;/a&gt;&amp;lt;ExecutionPolicy&amp;gt;&amp;gt;&lt;/code&gt; is true</source>
          <target state="translated">2,4,6）与（1,3,5）相同，但根据 &lt;code&gt;policy&lt;/code&gt; 执行。这些重载不参与重载解析，除非 &lt;code&gt;&lt;a href=&quot;is_execution_policy&quot;&gt;std::is_execution_policy_v&lt;/a&gt;&amp;lt;&lt;a href=&quot;../types/decay&quot;&gt;std::decay_t&lt;/a&gt;&amp;lt;ExecutionPolicy&amp;gt;&amp;gt;&lt;/code&gt; 为true</target>
        </trans-unit>
        <trans-unit id="53cefd5728cb595aa61919f16f02740aa20b127d" translate="yes" xml:space="preserve">
          <source>2,4,6) Same as (1,3,5), but executed according to &lt;code&gt;policy&lt;/code&gt;. This overload only participates in overload resolution if &lt;code&gt;&lt;a href=&quot;is_execution_policy&quot;&gt;std::is_execution_policy_v&lt;/a&gt;&amp;lt;&lt;a href=&quot;../types/decay&quot;&gt;std::decay_t&lt;/a&gt;&amp;lt;ExecutionPolicy&amp;gt;&amp;gt;&lt;/code&gt; is true</source>
          <target state="translated">2,4,6）与（1,3,5）相同，但根据 &lt;code&gt;policy&lt;/code&gt; 执行。如果 &lt;code&gt;&lt;a href=&quot;is_execution_policy&quot;&gt;std::is_execution_policy_v&lt;/a&gt;&amp;lt;&lt;a href=&quot;../types/decay&quot;&gt;std::decay_t&lt;/a&gt;&amp;lt;ExecutionPolicy&amp;gt;&amp;gt;&lt;/code&gt; 为true，则此重载仅参与重载解决方案</target>
        </trans-unit>
        <trans-unit id="39c0eb8a2d4bcf5102382b35a0547b3dc653b8ad" translate="yes" xml:space="preserve">
          <source>2,4,6) Same as (1,3,5), but uses &lt;code&gt;r&lt;/code&gt; as the source range, as if using &lt;code&gt;ranges::begin(r)&lt;/code&gt; as &lt;code&gt;first&lt;/code&gt; and &lt;code&gt;ranges::end(r)&lt;/code&gt; as &lt;code&gt;last&lt;/code&gt;.</source>
          <target state="translated">2,4,6）与（1,3,5）相同，但是将 &lt;code&gt;r&lt;/code&gt; 用作源范围，就像使用 &lt;code&gt;ranges::begin(r)&lt;/code&gt; 作为 &lt;code&gt;first&lt;/code&gt; 以及将 &lt;code&gt;ranges::end(r)&lt;/code&gt; 作为 &lt;code&gt;last&lt;/code&gt; 一样。</target>
        </trans-unit>
        <trans-unit id="f16da40abb78f97ba13b5d63ffc526f9398f845f" translate="yes" xml:space="preserve">
          <source>2,4,6)&lt;code&gt;O(last-first)&lt;/code&gt; applications of the predicate</source>
          <target state="translated">2,4,6）谓词的 &lt;code&gt;O(last-first)&lt;/code&gt; 应用</target>
        </trans-unit>
        <trans-unit id="f8e4aead195ed743595e6e6ae9859d5e747fcf09" translate="yes" xml:space="preserve">
          <source>2,4,6,8) Same as (1,3,5,7), but executed according to &lt;code&gt;policy&lt;/code&gt;. This overload only participates in overload resolution if &lt;code&gt;&lt;a href=&quot;is_execution_policy&quot;&gt;std::is_execution_policy_v&lt;/a&gt;&amp;lt;&lt;a href=&quot;../types/decay&quot;&gt;std::decay_t&lt;/a&gt;&amp;lt;ExecutionPolicy&amp;gt;&amp;gt;&lt;/code&gt; is true</source>
          <target state="translated">2,4,6,8）与（1,3,5,7）相同，但根据 &lt;code&gt;policy&lt;/code&gt; 执行。如果 &lt;code&gt;&lt;a href=&quot;is_execution_policy&quot;&gt;std::is_execution_policy_v&lt;/a&gt;&amp;lt;&lt;a href=&quot;../types/decay&quot;&gt;std::decay_t&lt;/a&gt;&amp;lt;ExecutionPolicy&amp;gt;&amp;gt;&lt;/code&gt; 为true，则此重载仅参与重载解决方案</target>
        </trans-unit>
        <trans-unit id="ad1b343f55d0b389cca0a209a5ee49a16e5f70d1" translate="yes" xml:space="preserve">
          <source>2,4,6,8) same, but the complexity is specified as O(x), rather than &quot;at most x&quot;</source>
          <target state="translated">2,4,6,8)相同,但复杂度指定为O(x),而不是 &quot;最多x&quot;。</target>
        </trans-unit>
        <trans-unit id="3e6a52365e1b13ced4b61bed6e82ccaa4dd25594" translate="yes" xml:space="preserve">
          <source>2,6) Subtracts &lt;code&gt;other&lt;/code&gt; from &lt;code&gt;*this&lt;/code&gt;.</source>
          <target state="translated">2,6）从 &lt;code&gt;*this&lt;/code&gt; 中减去 &lt;code&gt;other&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="b8fedb0dda8560210a9d701d71d490f5698436c7" translate="yes" xml:space="preserve">
          <source>2,6) when an object with dynamic storage duration is created by a &lt;a href=&quot;new&quot;&gt;new-expression&lt;/a&gt; with the initializer consisting of an empty pair of parentheses or braces(since C++11);</source>
          <target state="translated">2,6）当具有动态存储持续时间的对象由带有以空括号或大括号组成的&lt;a href=&quot;new&quot;&gt;new表达式&lt;/a&gt;的new表达式创建时（自C ++ 11起）；</target>
        </trans-unit>
        <trans-unit id="b63fd28bc6d3336dcf79fecc0debc624e0e77a98" translate="yes" xml:space="preserve">
          <source>2-1074</source>
          <target state="translated">2-1074</target>
        </trans-unit>
        <trans-unit id="94963ab36f819bd40319201d4921403178e34b4b" translate="yes" xml:space="preserve">
          <source>2-149</source>
          <target state="translated">2-149</target>
        </trans-unit>
        <trans-unit id="516e471b863562f9eb4fdd5c58c36fa25d326323" translate="yes" xml:space="preserve">
          <source>2-3) (none)</source>
          <target state="translated">2-3)(无)</target>
        </trans-unit>
        <trans-unit id="0aa8dcbb8de0bf30bc36092ba04ce217c33a893d" translate="yes" xml:space="preserve">
          <source>2-3) &lt;code&gt;bool&lt;/code&gt;</source>
          <target state="translated">2-3） &lt;code&gt;bool&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="740751042416ade8ac442d2d79ce8b0d75bc3c1b" translate="yes" xml:space="preserve">
          <source>2-3) Assigns the state of &lt;code&gt;other&lt;/code&gt;.</source>
          <target state="translated">2-3）分配 &lt;code&gt;other&lt;/code&gt; 的状态。</target>
        </trans-unit>
        <trans-unit id="889691d541af4e86b741adf70af8ab79df8a09da" translate="yes" xml:space="preserve">
          <source>2-3) Constructs a &lt;code&gt;polymorphic_allocator&lt;/code&gt; using &lt;code&gt;other.resource()&lt;/code&gt; as the underlying memory resource.</source>
          <target state="translated">2-3）使用 &lt;code&gt;other.resource()&lt;/code&gt; 作为基础内存资源构造一个 &lt;code&gt;polymorphic_allocator&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="7bfc152513f74bc3f451b1d8fa223f5179a67f6e" translate="yes" xml:space="preserve">
          <source>2-3) Copies (2) or moves (3) content of &lt;code&gt;other&lt;/code&gt; into a new instance, so that any content is equivalent in both type and value to those of &lt;code&gt;other&lt;/code&gt; prior to the constructor call, or empty if &lt;code&gt;other&lt;/code&gt; is empty. Formally,</source>
          <target state="translated">2-3）将 &lt;code&gt;other&lt;/code&gt; 的内容复制（2）或将其移动（3）到新实例中，以便任何内容的类型和值都与构造函数调用之前的 &lt;code&gt;other&lt;/code&gt; 内容相同，或者如果 &lt;code&gt;other&lt;/code&gt; 为空，则为空。正式地，</target>
        </trans-unit>
        <trans-unit id="4ef6e9ddbb0060905f916920d28833ac56897878" translate="yes" xml:space="preserve">
          <source>2-3) Copy and move constructors are defaulted.</source>
          <target state="translated">2-3)复制和移动构造函数是默认的。</target>
        </trans-unit>
        <trans-unit id="e5ec3fa89ad90a7aa3abfd97ec4476c90c5eb7dc" translate="yes" xml:space="preserve">
          <source>2-3) First, performs the same steps as the default constructor, then associates the stream with a file by calling &lt;code&gt;rdbuf()-&amp;gt;open(filename, mode | &lt;a href=&quot;../ios_base/openmode&quot;&gt;std::ios_base::in&lt;/a&gt;)&lt;/code&gt; (see &lt;code&gt;&lt;a href=&quot;../basic_filebuf/open&quot;&gt;std::basic_filebuf::open&lt;/a&gt;&lt;/code&gt; for the details on the effects of that call). If the &lt;code&gt;open()&lt;/code&gt; call returns a null pointer, sets &lt;code&gt;setstate(failbit)&lt;/code&gt;. Overload (3) is only provided if &lt;code&gt;std::filesystem::path::value_type&lt;/code&gt; is not &lt;code&gt;char&lt;/code&gt;.(since C++17)</source>
          <target state="translated">2-3）首先，执行与默认构造函数相同的步骤，然后通过调用 &lt;code&gt;rdbuf()-&amp;gt;open(filename, mode | &lt;a href=&quot;../ios_base/openmode&quot;&gt;std::ios_base::in&lt;/a&gt;)&lt;/code&gt; 将流与文件关联（请参阅 &lt;code&gt;&lt;a href=&quot;../basic_filebuf/open&quot;&gt;std::basic_filebuf::open&lt;/a&gt;&lt;/code&gt; 以获取有关该调用效果的详细信息）。如果 &lt;code&gt;open()&lt;/code&gt; 调用返回空指针，则设置 &lt;code&gt;setstate(failbit)&lt;/code&gt; 。仅当 &lt;code&gt;std::filesystem::path::value_type&lt;/code&gt; 不是 &lt;code&gt;char&lt;/code&gt; 时才提供重载（3）（从C ++ 17开始）</target>
        </trans-unit>
        <trans-unit id="af710b1b50adee94452ffb3c81b729f9644bd669" translate="yes" xml:space="preserve">
          <source>2-3) First, performs the same steps as the default constructor, then associates the stream with a file by calling &lt;code&gt;rdbuf()-&amp;gt;open(filename, mode | &lt;a href=&quot;../ios_base/openmode&quot;&gt;std::ios_base::out&lt;/a&gt;)&lt;/code&gt; (see &lt;code&gt;&lt;a href=&quot;../basic_filebuf/open&quot;&gt;std::basic_filebuf::open&lt;/a&gt;&lt;/code&gt; for the details on the effects of that call). If the &lt;code&gt;open()&lt;/code&gt; call returns a null pointer, sets &lt;code&gt;setstate(failbit)&lt;/code&gt;. Overload (3) is only provided if &lt;code&gt;std::filesystem::path::value_type&lt;/code&gt; is not &lt;code&gt;char&lt;/code&gt;.(since C++17)</source>
          <target state="translated">2-3）首先，执行与默认构造函数相同的步骤，然后通过调用 &lt;code&gt;rdbuf()-&amp;gt;open(filename, mode | &lt;a href=&quot;../ios_base/openmode&quot;&gt;std::ios_base::out&lt;/a&gt;)&lt;/code&gt; 将流与文件关联（请参阅 &lt;code&gt;&lt;a href=&quot;../basic_filebuf/open&quot;&gt;std::basic_filebuf::open&lt;/a&gt;&lt;/code&gt; 以获取有关该调用效果的详细信息）。如果 &lt;code&gt;open()&lt;/code&gt; 调用返回空指针，则设置 &lt;code&gt;setstate(failbit)&lt;/code&gt; 。仅当 &lt;code&gt;std::filesystem::path::value_type&lt;/code&gt; 不是 &lt;code&gt;char&lt;/code&gt; 时才提供重载（3）（从C ++ 17开始）</target>
        </trans-unit>
        <trans-unit id="a4cc98c07fb98634c349771cc526894afed8857f" translate="yes" xml:space="preserve">
          <source>2-3) First, performs the same steps as the default constructor, then associates the stream with a file by calling &lt;code&gt;rdbuf()-&amp;gt;open(filename, mode)&lt;/code&gt; (see &lt;code&gt;&lt;a href=&quot;../basic_filebuf/open&quot;&gt;std::basic_filebuf::open&lt;/a&gt;&lt;/code&gt; for the details on the effects of that call). If the &lt;code&gt;open()&lt;/code&gt; call returns a null pointer, sets &lt;code&gt;setstate(failbit)&lt;/code&gt;. Overload (3) is only provided if &lt;code&gt;std::filesystem::path::value_type&lt;/code&gt; is not &lt;code&gt;char&lt;/code&gt;.(since C++17)</source>
          <target state="translated">2-3）首先，执行与默认构造函数相同的步骤，然后通过调用 &lt;code&gt;rdbuf()-&amp;gt;open(filename, mode)&lt;/code&gt; 将流与文件关联（有关效果的详细信息，请参见 &lt;code&gt;&lt;a href=&quot;../basic_filebuf/open&quot;&gt;std::basic_filebuf::open&lt;/a&gt;&lt;/code&gt; 该呼叫）。如果 &lt;code&gt;open()&lt;/code&gt; 调用返回空指针，则设置 &lt;code&gt;setstate(failbit)&lt;/code&gt; 。仅当 &lt;code&gt;std::filesystem::path::value_type&lt;/code&gt; 不是 &lt;code&gt;char&lt;/code&gt; 时才提供重载（3）（从C ++ 17开始）</target>
        </trans-unit>
        <trans-unit id="ac1a3cb5611393a23cd5b6bae53cdf7081154423" translate="yes" xml:space="preserve">
          <source>2-3) Linear in &lt;code&gt;count&lt;/code&gt;</source>
          <target state="translated">2-3）线性 &lt;code&gt;count&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="0653ebee98127d5677f6e705dbde0779dcb5a981" translate="yes" xml:space="preserve">
          <source>2-3) These deduction guides are provided for &lt;code&gt;&lt;a href=&quot;../basic_string&quot;&gt;std::basic_string&lt;/a&gt;&lt;/code&gt; to allow deduction from a &lt;code&gt;&lt;a href=&quot;../basic_string_view&quot;&gt;std::basic_string_view&lt;/a&gt;&lt;/code&gt;. The &lt;code&gt;size_type&lt;/code&gt; parameter type in (3) refers to the &lt;code&gt;size_type&lt;/code&gt; member type of the type deduced by the deduction guide. These overloads only participate in overload resolution if &lt;code&gt;Alloc&lt;/code&gt; satisfies &lt;a href=&quot;../../named_req/allocator&quot;&gt;Allocator&lt;/a&gt;.</source>
          <target state="translated">2-3）这些推导指南是为 &lt;code&gt;&lt;a href=&quot;../basic_string&quot;&gt;std::basic_string&lt;/a&gt;&lt;/code&gt; 提供的，以允许从 &lt;code&gt;&lt;a href=&quot;../basic_string_view&quot;&gt;std::basic_string_view&lt;/a&gt;&lt;/code&gt; 进行推导。（3）中的 &lt;code&gt;size_type&lt;/code&gt; 参数类型是指由推导指南推导的类型的 &lt;code&gt;size_type&lt;/code&gt; 成员类型。这些重载仅在 &lt;code&gt;Alloc&lt;/code&gt; 满足&lt;a href=&quot;../../named_req/allocator&quot;&gt;Allocator的情况下&lt;/a&gt;才参与重载解析。</target>
        </trans-unit>
        <trans-unit id="bc443359bc7da4318780f5fab12b2865c734117b" translate="yes" xml:space="preserve">
          <source>2-3) Throws nothing.</source>
          <target state="translated">2-3)什么也不投。</target>
        </trans-unit>
        <trans-unit id="587c3d9cdb15c3845ebca72f800e9ac08fe5a765" translate="yes" xml:space="preserve">
          <source>2-3)&lt;code&gt;&lt;a href=&quot;../regex_error&quot;&gt;std::regex_error&lt;/a&gt;&lt;/code&gt; if the supplied regular expression is not valid.</source>
          <target state="translated">2-3） &lt;code&gt;&lt;a href=&quot;../regex_error&quot;&gt;std::regex_error&lt;/a&gt;&lt;/code&gt; 如果提供的正则表达式无效。</target>
        </trans-unit>
        <trans-unit id="5453310cbaed08a6a438ac8591e07014d55e7a8e" translate="yes" xml:space="preserve">
          <source>2-4) Replaces the managed object with an object pointed to by &lt;code&gt;ptr&lt;/code&gt;. &lt;code&gt;Y&lt;/code&gt; must be a complete type and implicitly convertible to &lt;code&gt;T&lt;/code&gt;. Additionally:</source>
          <target state="translated">2-4）用 &lt;code&gt;ptr&lt;/code&gt; 指向的对象替换托管对象。 &lt;code&gt;Y&lt;/code&gt; 必须是一个完整的类型和隐式转换为 &lt;code&gt;T&lt;/code&gt; 。另外：</target>
        </trans-unit>
        <trans-unit id="c3b4b5e4cfda469127ab508c67ab25aa8ac7bd9a" translate="yes" xml:space="preserve">
          <source>2-4) in the specialization for arrays behave the same as the constructors that take a pointer parameter in the primary template except that they additionally do not participate in overload resolution unless one of the following is true:</source>
          <target state="translated">2-4)中的数组专门化中的构造函数的行为与在主模板中取指针参数的构造函数相同,只是它们不参与过载解析,除非以下情况之一为真。</target>
        </trans-unit>
        <trans-unit id="bab11a81a191ef4f40ffd3d426d5a68fccc4e31e" translate="yes" xml:space="preserve">
          <source>2-4) linear in &lt;code&gt;count&lt;/code&gt;</source>
          <target state="translated">2-4）线性 &lt;code&gt;count&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="07f1cf8e1830909c73f8514ca9ae21b1aaf53359" translate="yes" xml:space="preserve">
          <source>2-5) First, copies the list of the requested submatch out of the &lt;code&gt;submatches&lt;/code&gt; or &lt;code&gt;submatch&lt;/code&gt; argument into the member list stored in the iterator and constructs the member &lt;code&gt;&lt;a href=&quot;../regex_iterator&quot;&gt;std::regex_iterator&lt;/a&gt;&lt;/code&gt; by passing &lt;code&gt;a&lt;/code&gt;, &lt;code&gt;b&lt;/code&gt;, &lt;code&gt;re&lt;/code&gt;, and &lt;code&gt;m&lt;/code&gt; to its four-argument constructor (that constructor performs the initial call to &lt;code&gt;&lt;a href=&quot;../regex_search&quot;&gt;std::regex_search&lt;/a&gt;&lt;/code&gt;) and sets the internal counter of submatches to zero.</source>
          <target state="translated">2-5）首先，将子 &lt;code&gt;submatches&lt;/code&gt; 或子 &lt;code&gt;submatch&lt;/code&gt; 参数中所请求的子匹配的列表复制到迭代器中存储的成员列表中，并通过将 &lt;code&gt;a&lt;/code&gt; ， &lt;code&gt;b&lt;/code&gt; ， &lt;code&gt;re&lt;/code&gt; 和 &lt;code&gt;m&lt;/code&gt; 传递给它的四个成员来构造成员 &lt;code&gt;&lt;a href=&quot;../regex_iterator&quot;&gt;std::regex_iterator&lt;/a&gt;&lt;/code&gt; 参数构造函数（该构造函数执行对 &lt;code&gt;&lt;a href=&quot;../regex_search&quot;&gt;std::regex_search&lt;/a&gt;&lt;/code&gt; 的初始调用）并将子匹配的内部计数器设置为零。</target>
        </trans-unit>
        <trans-unit id="cd7f0186fa34163a5969c15d6ebcb56229957b74" translate="yes" xml:space="preserve">
          <source>2-5) The overload that does not take a &lt;code&gt;&lt;a href=&quot;../../error/error_code&quot;&gt;std::error_code&lt;/a&gt;&amp;amp;&lt;/code&gt; parameter throws &lt;a href=&quot;../filesystem_error&quot;&gt;&lt;code&gt;filesystem_error&lt;/code&gt;&lt;/a&gt; on underlying OS API errors, constructed with &lt;code&gt;p&lt;/code&gt; as the first path argument and the OS error code as the error code argument. The overload taking a &lt;code&gt;&lt;a href=&quot;../../error/error_code&quot;&gt;std::error_code&lt;/a&gt;&amp;amp;&lt;/code&gt; parameter sets it to the OS API error code if an OS API call fails, and executes &lt;code&gt;ec.clear()&lt;/code&gt; if no errors occur. Any overload not marked &lt;code&gt;noexcept&lt;/code&gt; may throw &lt;code&gt;&lt;a href=&quot;../../memory/new/bad_alloc&quot;&gt;std::bad_alloc&lt;/a&gt;&lt;/code&gt; if memory allocation fails.</source>
          <target state="translated">2-5）不带 &lt;code&gt;&lt;a href=&quot;../../error/error_code&quot;&gt;std::error_code&lt;/a&gt;&amp;amp;&lt;/code&gt; 参数的重载会在底层OS API错误上引发&lt;a href=&quot;../filesystem_error&quot;&gt; &lt;code&gt;filesystem_error&lt;/code&gt; &lt;/a&gt;，该错误由 &lt;code&gt;p&lt;/code&gt; 作为第一个路径参数，而OS错误代码作为错误代码参数构造。如果OS API调用失败，则采用 &lt;code&gt;&lt;a href=&quot;../../error/error_code&quot;&gt;std::error_code&lt;/a&gt;&amp;amp;&lt;/code&gt; 参数的重载会将其设置为OS API错误代码，如果没有错误发生，则执行 &lt;code&gt;ec.clear()&lt;/code&gt; 。如果内存分配失败，任何未标记为 &lt;code&gt;noexcept&lt;/code&gt; 的重载都可能引发 &lt;code&gt;&lt;a href=&quot;../../memory/new/bad_alloc&quot;&gt;std::bad_alloc&lt;/a&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="a93e93a5dcf699744c91784f301e4092ebc0ed6f" translate="yes" xml:space="preserve">
          <source>2-6) Throws any exception thrown by the constructor or assignment operator of &lt;code&gt;T&lt;/code&gt;. If an exception is thrown, the initialization state of &lt;code&gt;*this&lt;/code&gt; (and of &lt;code&gt;other&lt;/code&gt; in case of (2-3) and (5-6) ) is unchanged, i.e. if the object contained a value, it still contains a value, and the other way round. The contents of &lt;code&gt;value&lt;/code&gt; and the contained values of &lt;code&gt;*this&lt;/code&gt; and &lt;code&gt;other&lt;/code&gt; depend on the exception safety guarantees of the operation from which the exception originates (copy-constructor, move-assignment, etc.).</source>
          <target state="translated">2-6）抛出 &lt;code&gt;T&lt;/code&gt; 的构造函数或赋值运算符引发的任何异常。如果引发异常，则 &lt;code&gt;*this&lt;/code&gt; （以及（2-3）和（5-6）情况下的 &lt;code&gt;other&lt;/code&gt; 状态）的初始化状态不变，即，如果对象包含一个值，则它仍然包含一个值，并且另一边。 &lt;code&gt;*this&lt;/code&gt; 和 &lt;code&gt;other&lt;/code&gt; 的 &lt;code&gt;value&lt;/code&gt; 的内容以及所包含的值取决于产生异常的操作（复制构造函数，移动分配等）的异常安全保证。</target>
        </trans-unit>
        <trans-unit id="8168f14f6082b85346fd88fc93ff27220a67c1bd" translate="yes" xml:space="preserve">
          <source>2-6)&lt;code&gt;*this&lt;/code&gt;</source>
          <target state="translated">2-6)&lt;code&gt;*this&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="6fca03c9c3234b4ce9edc76e008229226b7c4185" translate="yes" xml:space="preserve">
          <source>2. Omitted, in which case it is &lt;code&gt;int&lt;/code&gt; for scoped enumerations or an implementation-defined integral type capable of representing all values of the enum (for unscoped enumerations).</source>
          <target state="translated">2.省略，在这种情况下，它是范围枚举的 &lt;code&gt;int&lt;/code&gt; 或能够表示枚举的所有值的实现定义的整数类型（对于无范围的枚举）。</target>
        </trans-unit>
        <trans-unit id="bb9bcd435bd2ebea492b9adefdaf2a99e9f2889f" translate="yes" xml:space="preserve">
          <source>2. Otherwise, if either argument is &lt;code&gt;double&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;../complex&quot;&gt;std::complex&lt;/a&gt;&amp;lt;double&amp;gt;&lt;/code&gt; or integer type, then both arguments are cast to &lt;code&gt;&lt;a href=&quot;../complex&quot;&gt;std::complex&lt;/a&gt;&amp;lt;double&amp;gt;&lt;/code&gt;</source>
          <target state="translated">2.否则，如果任一参数为 &lt;code&gt;double&lt;/code&gt; ， &lt;code&gt;&lt;a href=&quot;../complex&quot;&gt;std::complex&lt;/a&gt;&amp;lt;double&amp;gt;&lt;/code&gt; 或整数类型，则两个参数都将转换为 &lt;code&gt;&lt;a href=&quot;../complex&quot;&gt;std::complex&lt;/a&gt;&amp;lt;double&amp;gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="0a030694b1f0fe28d4604a6643a9438aff3bca99" translate="yes" xml:space="preserve">
          <source>2. Returns a value of type &lt;code&gt;&lt;a href=&quot;../types/size_t&quot;&gt;std::size_t&lt;/a&gt;&lt;/code&gt; that represents the hash value of the parameter.</source>
          <target state="translated">2.返回类型为 &lt;code&gt;&lt;a href=&quot;../types/size_t&quot;&gt;std::size_t&lt;/a&gt;&lt;/code&gt; 的值，该值表示参数的哈希值。</target>
        </trans-unit>
        <trans-unit id="6e7999ab528fc5eee95f558f2a5f5551abee5281" translate="yes" xml:space="preserve">
          <source>2.1 Phases of translation [lex.phases]</source>
          <target state="translated">2.1 翻译阶段[lex.phase]</target>
        </trans-unit>
        <trans-unit id="3da874ea4f4f8acb8fd90317fef0f6203e8d2b8e" translate="yes" xml:space="preserve">
          <source>2.2 Phases of translation [lex.phases]</source>
          <target state="translated">2.2 翻译阶段[lex.phase]</target>
        </trans-unit>
        <trans-unit id="a36d13b57797389bde90bd9f90d71624172b9ee5" translate="yes" xml:space="preserve">
          <source>20) If defined, called by the custom array form of &lt;a href=&quot;../../language/new&quot;&gt;placement new[] &lt;/a&gt; expression with the matching signature if allocating an array of objects of type T.</source>
          <target state="translated">20）如果已定义，则在分配类型为T的对象的数组时，以具有匹配签名的&lt;a href=&quot;../../language/new&quot;&gt;布局new []&lt;/a&gt;表达式的自定义数组形式进行调用。</target>
        </trans-unit>
        <trans-unit id="e069377af238426154821ca13205027e4508e443" translate="yes" xml:space="preserve">
          <source>20) Returns &lt;code&gt;bool(opt) ? value == *opt : false&lt;/code&gt;.</source>
          <target state="translated">20）返回 &lt;code&gt;bool(opt) ? value == *opt : false&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="9082079c7fd7d756a2ca1dea888cbb83753b7b38" translate="yes" xml:space="preserve">
          <source>20)&lt;code&gt;&lt;a href=&quot;year_month_day&quot;&gt;std::chrono::year_month_day&lt;/a&gt;(ym.year(), ym.month(), d)&lt;/code&gt;</source>
          <target state="translated">20） &lt;code&gt;&lt;a href=&quot;year_month_day&quot;&gt;std::chrono::year_month_day&lt;/a&gt;(ym.year(), ym.month(), d)&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="ad1384880a61d5d618b57013cff8835b92cb787f" translate="yes" xml:space="preserve">
          <source>20.4 Tuples [tuple]</source>
          <target state="translated">20.4 图组[元组]</target>
        </trans-unit>
        <trans-unit id="db4f17f6a672f5349653a3ec9fd1f4670b78bdc1" translate="yes" xml:space="preserve">
          <source>20.5.1.3 Freestanding implementations (p: 458)</source>
          <target state="translated">20.5.1.3 独立执行(第458页)</target>
        </trans-unit>
        <trans-unit id="18b0171738e934d28c51bcaf474b7720a328bae3" translate="yes" xml:space="preserve">
          <source>201210L</source>
          <target state="translated">201210L</target>
        </trans-unit>
        <trans-unit id="28faf88dd60cdf723204487a4f7df0aafc48b579" translate="yes" xml:space="preserve">
          <source>201304L</source>
          <target state="translated">201304L</target>
        </trans-unit>
        <trans-unit id="a6773c442ad40a34d6d049c0a3b43e047b8faf73" translate="yes" xml:space="preserve">
          <source>201309L</source>
          <target state="translated">201309L</target>
        </trans-unit>
        <trans-unit id="22e1780cf464ae56301359d6053c77eece6bf03c" translate="yes" xml:space="preserve">
          <source>201402L</source>
          <target state="translated">201402L</target>
        </trans-unit>
        <trans-unit id="570780b72403d061c69a2c525c832b5dcab07c2d" translate="yes" xml:space="preserve">
          <source>201411L</source>
          <target state="translated">201411L</target>
        </trans-unit>
        <trans-unit id="a86efe0a5f51a64efd9d09ae4295c2df7832c101" translate="yes" xml:space="preserve">
          <source>201505L</source>
          <target state="translated">201505L</target>
        </trans-unit>
        <trans-unit id="2c6c6b5fbca54afe21f48f9914d33b2fb3a8de15" translate="yes" xml:space="preserve">
          <source>201510L</source>
          <target state="translated">201510L</target>
        </trans-unit>
        <trans-unit id="8c9556aee6c253eb2033ecd408d371fb236ecb14" translate="yes" xml:space="preserve">
          <source>201603L</source>
          <target state="translated">201603L</target>
        </trans-unit>
        <trans-unit id="8baf514ae5246c02581735d581edda919cc8495d" translate="yes" xml:space="preserve">
          <source>201606L</source>
          <target state="translated">201606L</target>
        </trans-unit>
        <trans-unit id="839656e8a730180b7d5b1cabbc6ba903b5f6645d" translate="yes" xml:space="preserve">
          <source>201611L</source>
          <target state="translated">201611L</target>
        </trans-unit>
        <trans-unit id="6558e2e4db996ec157f4f4d4a3660c06b5769758" translate="yes" xml:space="preserve">
          <source>201703L</source>
          <target state="translated">201703L</target>
        </trans-unit>
        <trans-unit id="29f571fe0fb8e73e4d69b21fc4b7e306595a9d00" translate="yes" xml:space="preserve">
          <source>201711L</source>
          <target state="translated">201711L</target>
        </trans-unit>
        <trans-unit id="811750e354c2e1f1ba98b25a78490cf52f54fe34" translate="yes" xml:space="preserve">
          <source>201806L</source>
          <target state="translated">201806L</target>
        </trans-unit>
        <trans-unit id="1b640a5a2b2026a8e1225ac802370770ed8f0a73" translate="yes" xml:space="preserve">
          <source>201811L</source>
          <target state="translated">201811L</target>
        </trans-unit>
        <trans-unit id="538a51da7bb400f7f64247da30ed80832acc1598" translate="yes" xml:space="preserve">
          <source>201902L</source>
          <target state="translated">201902L</target>
        </trans-unit>
        <trans-unit id="4d26f186658c382630f11aff54a5a188c8cbadb2" translate="yes" xml:space="preserve">
          <source>21) If defined, and if (17) is not defined, called by the usual single-object &lt;a href=&quot;../../language/delete&quot;&gt;delete-expressions&lt;/a&gt; if deallocating an object of type T.</source>
          <target state="translated">21）如果已定义，并且如果未定义（17），&lt;a href=&quot;../../language/delete&quot;&gt;则&lt;/a&gt;在取消分配T类型的对象时，由通常的单对象delete-expressions调用。</target>
        </trans-unit>
        <trans-unit id="5c687b9d6d81e1ea6f8820127b8762a31537aafb" translate="yes" xml:space="preserve">
          <source>21) If defined, called by the custom single-object &lt;a href=&quot;../../language/new&quot;&gt;placement new&lt;/a&gt; expression with the matching signature if allocating an object of type T if its alignment requirement exceeds &lt;code&gt;__STDCPP_DEFAULT_NEW_ALIGNMENT__&lt;/code&gt;. If this overload is not provided, but allocator-unaware member form (19) is, allocator-unaware member overload is called instead.</source>
          <target state="translated">21）如果已定义，则在其对齐要求超过 &lt;code&gt;__STDCPP_DEFAULT_NEW_ALIGNMENT__&lt;/code&gt; 的情况下分配类型T的对象时，由具有匹配签名的自定义单对象&lt;a href=&quot;../../language/new&quot;&gt;放置新&lt;/a&gt;表达式调用。如果未提供此重载，但提供了不分配器成员形式（19），则会调用不分配器成员过载。</target>
        </trans-unit>
        <trans-unit id="36b65a43bf6055bd665cc844c1788411523c60c2" translate="yes" xml:space="preserve">
          <source>21) Returns &lt;code&gt;bool(opt) ? *opt != value : true&lt;/code&gt;.</source>
          <target state="translated">21）返回 &lt;code&gt;bool(opt) ? *opt != value : true&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="a9ac7d2cda4a2ae92fcfcd611a816af9bfca61f8" translate="yes" xml:space="preserve">
          <source>21)&lt;code&gt;&lt;a href=&quot;year_month_day&quot;&gt;std::chrono::year_month_day&lt;/a&gt;(ym.year(), ym.month(), &lt;a href=&quot;day&quot;&gt;std::chrono::day&lt;/a&gt;(d))&lt;/code&gt;</source>
          <target state="translated">21） &lt;code&gt;&lt;a href=&quot;year_month_day&quot;&gt;std::chrono::year_month_day&lt;/a&gt;(ym.year(), ym.month(), &lt;a href=&quot;day&quot;&gt;std::chrono::day&lt;/a&gt;(d))&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="dda19e5a3ed35617e12ccce718920ea28415853f" translate="yes" xml:space="preserve">
          <source>22) If defined, and if (18) is not defined, called by the usual array &lt;a href=&quot;../../language/delete&quot;&gt;delete[]-expressions&lt;/a&gt; if deallocating an array of objects of type T.</source>
          <target state="translated">22）如果已定义且未定义（18），&lt;a href=&quot;../../language/delete&quot;&gt;则&lt;/a&gt;在取消分配T类型的对象数组时，由常规数组delete [] -expressions 调用。</target>
        </trans-unit>
        <trans-unit id="9859b0ada183b94584f103ed56619889d5739710" translate="yes" xml:space="preserve">
          <source>22) If defined, called by the custom array form of &lt;a href=&quot;../../language/new&quot;&gt;placement new[] &lt;/a&gt; expression with the matching signature if allocating an array of objects of type T. if its alignment requirement exceeds &lt;code&gt;__STDCPP_DEFAULT_NEW_ALIGNMENT__&lt;/code&gt;. If this overload is not provided, but allocator-unaware member form (20) is, allocator-unaware member overload is called instead.</source>
          <target state="translated">22）如果已定义，则在分配类型为T的对象的数组时，如果其对齐要求超过 &lt;code&gt;__STDCPP_DEFAULT_NEW_ALIGNMENT__&lt;/code&gt; ,则由具有匹配签名的&lt;a href=&quot;../../language/new&quot;&gt;placement new []&lt;/a&gt;表达式的自定义数组形式调用。如果未提供此重载，但提供了不分配器成员形式（20），则会调用不分配器成员过载。</target>
        </trans-unit>
        <trans-unit id="a5a5e9ec9432a7b6777283f2cd1eac168d5c4020" translate="yes" xml:space="preserve">
          <source>22) Returns &lt;code&gt;bool(opt) ? value != *opt : true&lt;/code&gt;.</source>
          <target state="translated">22）返回 &lt;code&gt;bool(opt) ? value != *opt : true&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="8dc6ff218c8bdb4582de327769a00b45673ff8c4" translate="yes" xml:space="preserve">
          <source>22,24)&lt;code&gt;&lt;a href=&quot;year_month_day&quot;&gt;std::chrono::year_month_day&lt;/a&gt;(y, md.month(), md.day())&lt;/code&gt;</source>
          <target state="translated">22,24） &lt;code&gt;&lt;a href=&quot;year_month_day&quot;&gt;std::chrono::year_month_day&lt;/a&gt;(y, md.month(), md.day())&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="c554e18f1f7efcd614d3a775eaa00548f94bb604" translate="yes" xml:space="preserve">
          <source>23) Returns &lt;code&gt;bool(opt) ? *opt &amp;lt; value : true&lt;/code&gt;.</source>
          <target state="translated">23）返回 &lt;code&gt;bool(opt) ? *opt &amp;lt; value : true&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="63c937d92e7f2c97253aa685c09999050bc61791" translate="yes" xml:space="preserve">
          <source>23,24) If defined, and if (19,20) are not defined, called in preference to allocator-unaware members if the alignment requirement exceeds &lt;code&gt;__STDCPP_DEFAULT_NEW_ALIGNMENT__&lt;/code&gt;.</source>
          <target state="translated">23,24）如果已定义且未定义（19,20），则在对齐要求超过 &lt;code&gt;__STDCPP_DEFAULT_NEW_ALIGNMENT__&lt;/code&gt; 的情况下，优先向无分配者的成员调用。</target>
        </trans-unit>
        <trans-unit id="bf06d7fc10ff49bfeadb22775c70dfc06e9b84bd" translate="yes" xml:space="preserve">
          <source>23,25)&lt;code&gt;&lt;a href=&quot;year_month_day&quot;&gt;std::chrono::year_month_day&lt;/a&gt;(&lt;a href=&quot;year&quot;&gt;std::chrono::year&lt;/a&gt;(y), md.month(), md.day())&lt;/code&gt;</source>
          <target state="translated">23,25） &lt;code&gt;&lt;a href=&quot;year_month_day&quot;&gt;std::chrono::year_month_day&lt;/a&gt;(&lt;a href=&quot;year&quot;&gt;std::chrono::year&lt;/a&gt;(y), md.month(), md.day())&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="2ad1b6658bf460d78521a43b6624d60b4d50cb84" translate="yes" xml:space="preserve">
          <source>24) Returns &lt;code&gt;bool(opt) ? value &amp;lt; *opt : false&lt;/code&gt;.</source>
          <target state="translated">24）返回 &lt;code&gt;bool(opt) ? value &amp;lt; *opt : false&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="2f1edab4092b028014791e589c249930e7c2f2ea" translate="yes" xml:space="preserve">
          <source>24-bit RANLUX generator by Martin L&amp;uuml;scher and Fred James, 1994.</source>
          <target state="translated">MartinL&amp;uuml;scher和Fred James的24位RANLUX发生器，1994年。</target>
        </trans-unit>
        <trans-unit id="6744f34128a774233270686b8f8d4a1f82f7137a" translate="yes" xml:space="preserve">
          <source>24-hour format</source>
          <target state="translated">24小时制</target>
        </trans-unit>
        <trans-unit id="4a0accf14cd80c6d8c7dbffc298bb4b2d07c4c08" translate="yes" xml:space="preserve">
          <source>25) If defined, called by the custom single-object &lt;a href=&quot;../../language/new&quot;&gt;placement new&lt;/a&gt; expression with the matching signature if the object's constructor throws an exception. If this function is not provided, and a matching (15) is not provided either, no deallocation function is called.</source>
          <target state="translated">25）如果定义，则如果对象的构造函数引发异常，则由具有匹配签名的自定义单对象&lt;a href=&quot;../../language/new&quot;&gt;放置新&lt;/a&gt;表达式调用。如果未提供此函数，也未提供匹配（15），则不会调用释放函数。</target>
        </trans-unit>
        <trans-unit id="fe16ddc062ab560dc4c18cbd4db2ff6d25ea9478" translate="yes" xml:space="preserve">
          <source>25) Returns &lt;code&gt;bool(opt) ? *opt &amp;lt;= value : true&lt;/code&gt;.</source>
          <target state="translated">25）返回 &lt;code&gt;bool(opt) ? *opt &amp;lt;= value : true&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="0cdc19fa8cfab3913be1bb9e9d6243bd831b9f65" translate="yes" xml:space="preserve">
          <source>26) If defined, called by the custom array form of &lt;a href=&quot;../../language/new&quot;&gt;placement new[] &lt;/a&gt; expression with the matching signature if any of the objects' constructors throws an exception (after executing the destructors for all objects that were constructed successfully). If this function is not provided, and a matching (16) is not provided either, no deallocation function is called.</source>
          <target state="translated">26）如果定义，则由对象&lt;a href=&quot;../../language/new&quot;&gt;new []&lt;/a&gt;的自定义数组形式的表达式调用，并带有匹配的签名，如果任何对象的构造函数抛出异常（在对成功构造的所有对象执行析构函数之后）。如果未提供此功能，并且也未提供匹配（16），则不会调用释放函数。</target>
        </trans-unit>
        <trans-unit id="f369615dab0da56359caf5ac2d7325c47c4f2e65" translate="yes" xml:space="preserve">
          <source>26) Returns &lt;code&gt;bool(opt) ? value &amp;lt;= *opt : false&lt;/code&gt;.</source>
          <target state="translated">26）返回 &lt;code&gt;bool(opt) ? value &amp;lt;= *opt : false&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="1997cc535be30b9938fc6401ebda36b2512111ec" translate="yes" xml:space="preserve">
          <source>26)&lt;code&gt;&lt;a href=&quot;year_month_day_last&quot;&gt;std::chrono::year_month_day_last&lt;/a&gt;(ym.year(), &lt;a href=&quot;month_day_last&quot;&gt;std::chrono::month_day_last&lt;/a&gt;(ym.month()))&lt;/code&gt;</source>
          <target state="translated">26） &lt;code&gt;&lt;a href=&quot;year_month_day_last&quot;&gt;std::chrono::year_month_day_last&lt;/a&gt;(ym.year(), &lt;a href=&quot;month_day_last&quot;&gt;std::chrono::month_day_last&lt;/a&gt;(ym.month()))&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="f48468f12b58ba04a79b8034682b682e54eacc0e" translate="yes" xml:space="preserve">
          <source>27) Returns &lt;code&gt;bool(opt) ? *opt &amp;gt; value : false&lt;/code&gt;.</source>
          <target state="translated">27）返回 &lt;code&gt;bool(opt) ? *opt &amp;gt; value : false&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="45c9dc4681c196ab01796a0295947eab8f490743" translate="yes" xml:space="preserve">
          <source>27,29)&lt;code&gt;&lt;a href=&quot;year_month_day_last&quot;&gt;std::chrono::year_month_day_last&lt;/a&gt;(y, mdl)&lt;/code&gt;</source>
          <target state="translated">27,29） &lt;code&gt;&lt;a href=&quot;year_month_day_last&quot;&gt;std::chrono::year_month_day_last&lt;/a&gt;(y, mdl)&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="7853db86124acd126bbb4b74a3853f85b1a4d90b" translate="yes" xml:space="preserve">
          <source>27-30) If defined, &lt;a href=&quot;../../language/delete&quot;&gt;delete-expressions&lt;/a&gt; does not execute the destructor for *p before placing a call to &lt;code&gt;operator delete&lt;/code&gt;. Instead, direct invocation of the destructor such as by &lt;code&gt;p-&amp;gt;~T();&lt;/code&gt; becomes the responsibility of this user-defined operator delete.</source>
          <target state="translated">27-30）如果已定义，则在调用 &lt;code&gt;operator delete&lt;/code&gt; 之前，&lt;a href=&quot;../../language/delete&quot;&gt;delete-expressions&lt;/a&gt;不会为* p执行析构函数。而是直接调用析构函数，例如通过 &lt;code&gt;p-&amp;gt;~T();&lt;/code&gt; 成为此用户定义的运算符删除的责任。</target>
        </trans-unit>
        <trans-unit id="0e46112e4fed32117edbd51fcc6057597df7a5e3" translate="yes" xml:space="preserve">
          <source>28) Returns &lt;code&gt;bool(opt) ? value &amp;gt; *opt : true&lt;/code&gt;.</source>
          <target state="translated">28）返回 &lt;code&gt;bool(opt) ? value &amp;gt; *opt : true&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="84fc5e5ce62c45455d09d92f5a6c243264a6032c" translate="yes" xml:space="preserve">
          <source>28,30)&lt;code&gt;&lt;a href=&quot;year_month_day_last&quot;&gt;std::chrono::year_month_day_last&lt;/a&gt;(&lt;a href=&quot;year&quot;&gt;std::chrono::year&lt;/a&gt;(y), mdl)&lt;/code&gt;</source>
          <target state="translated">28,30） &lt;code&gt;&lt;a href=&quot;year_month_day_last&quot;&gt;std::chrono::year_month_day_last&lt;/a&gt;(&lt;a href=&quot;year&quot;&gt;std::chrono::year&lt;/a&gt;(y), mdl)&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="55c84e953fbaeb30e380ed10fb458eea7ca66da9" translate="yes" xml:space="preserve">
          <source>29) Returns &lt;code&gt;bool(opt) ? *opt &amp;gt;= value : false&lt;/code&gt;.</source>
          <target state="translated">29）返回 &lt;code&gt;bool(opt) ? *opt &amp;gt;= value : false&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="7ee1b608113c55f0834af57e55d70aa3dd86701f" translate="yes" xml:space="preserve">
          <source>2a) however, the exception specification allows &lt;code&gt;&lt;a href=&quot;../bad_exception&quot;&gt;std::bad_exception&lt;/a&gt;&lt;/code&gt;: the thrown exception object is destroyed, and &lt;code&gt;&lt;a href=&quot;../bad_exception&quot;&gt;std::bad_exception&lt;/a&gt;&lt;/code&gt; is constructed by the C++ runtime and thrown instead.</source>
          <target state="translated">2a）但是，异常规范允许 &lt;code&gt;&lt;a href=&quot;../bad_exception&quot;&gt;std::bad_exception&lt;/a&gt;&lt;/code&gt; ：抛出的异常对象被破坏，并且 &lt;code&gt;&lt;a href=&quot;../bad_exception&quot;&gt;std::bad_exception&lt;/a&gt;&lt;/code&gt; 由C ++运行时构造并抛出。</target>
        </trans-unit>
        <trans-unit id="5cb9439c87e44f0eee76910f343289a5fc58e58c" translate="yes" xml:space="preserve">
          <source>2b) the exception specification does not allow &lt;code&gt;&lt;a href=&quot;../bad_exception&quot;&gt;std::bad_exception&lt;/a&gt;&lt;/code&gt;: &lt;code&gt;&lt;a href=&quot;../terminate&quot;&gt;std::terminate&lt;/a&gt;()&lt;/code&gt; is called.</source>
          <target state="translated">2b）异常规范不允许 &lt;code&gt;&lt;a href=&quot;../bad_exception&quot;&gt;std::bad_exception&lt;/a&gt;&lt;/code&gt; ： &lt;code&gt;&lt;a href=&quot;../terminate&quot;&gt;std::terminate&lt;/a&gt;()&lt;/code&gt; 被调用。</target>
        </trans-unit>
        <trans-unit id="ec9980ec2e616ee3315db433b1e89c30f9377afb" translate="yes" xml:space="preserve">
          <source>2c) if &lt;code&gt;T1&lt;/code&gt; is allocator-aware (&lt;code&gt;&lt;a href=&quot;../uses_allocator&quot;&gt;std::uses_allocator&lt;/a&gt;&amp;lt;T1, inner_allocator_type&amp;gt;::value==true&lt;/code&gt;), and its constructor takes the allocator as the last argument (&lt;code&gt;&lt;a href=&quot;../../types/is_constructible&quot;&gt;std::is_constructible&lt;/a&gt;&amp;lt;T1, Args1..., inner_allocator_type&amp;amp;&amp;gt;::value==true&lt;/code&gt;), then &lt;code&gt;xprime&lt;/code&gt; is &lt;code&gt;&lt;a href=&quot;../../utility/tuple/tuple_cat&quot;&gt;std::tuple_cat&lt;/a&gt;(&lt;a href=&quot;../../utility/tuple&quot;&gt;std::tuple&lt;/a&gt;&amp;lt;Args1&amp;amp;&amp;amp;...&amp;gt;(std::move(x)), &lt;a href=&quot;../../utility/tuple&quot;&gt;std::tuple&lt;/a&gt;&amp;lt;inner_allocator_type&amp;amp;&amp;gt;(inner_allocator()))&lt;/code&gt;.  Same rules apply to &lt;code&gt;T2&lt;/code&gt; and the replacement of &lt;code&gt;y&lt;/code&gt; with &lt;code&gt;yprime&lt;/code&gt;  Once &lt;code&gt;xprime&lt;/code&gt; and &lt;code&gt;yprime&lt;/code&gt; are constructed, constructs the pair &lt;code&gt;p&lt;/code&gt; in allocated storage by calling</source>
          <target state="translated">2c）如果 &lt;code&gt;T1&lt;/code&gt; 是分配器感知的（ &lt;code&gt;&lt;a href=&quot;../uses_allocator&quot;&gt;std::uses_allocator&lt;/a&gt;&amp;lt;T1, inner_allocator_type&amp;gt;::value==true&lt;/code&gt; ），并且其构造函数将分配器作为最后一个参数（ &lt;code&gt;&lt;a href=&quot;../../types/is_constructible&quot;&gt;std::is_constructible&lt;/a&gt;&amp;lt;T1, Args1..., inner_allocator_type&amp;amp;&amp;gt;::value==true&lt;/code&gt; ），则 &lt;code&gt;xprime&lt;/code&gt; 是 &lt;code&gt;&lt;a href=&quot;../../utility/tuple/tuple_cat&quot;&gt;std::tuple_cat&lt;/a&gt;(&lt;a href=&quot;../../utility/tuple&quot;&gt;std::tuple&lt;/a&gt;&amp;lt;Args1&amp;amp;&amp;amp;...&amp;gt;(std::move(x)), &lt;a href=&quot;../../utility/tuple&quot;&gt;std::tuple&lt;/a&gt;&amp;lt;inner_allocator_type&amp;amp;&amp;gt;(inner_allocator()))&lt;/code&gt; 。相同的规则适用于 &lt;code&gt;T2&lt;/code&gt; ,并且用 &lt;code&gt;yprime&lt;/code&gt; 替换 &lt;code&gt;y&lt;/code&gt; 一旦构造了 &lt;code&gt;xprime&lt;/code&gt; 和 &lt;code&gt;yprime&lt;/code&gt; ，就构造了对 &lt;code&gt;p&lt;/code&gt; 通过调用在分配的存储中</target>
        </trans-unit>
        <trans-unit id="7eb05f281d790790f78faabeb621483c68bf74dd" translate="yes" xml:space="preserve">
          <source>2i</source>
          <target state="translated">2i</target>
        </trans-unit>
        <trans-unit id="9a858fdd0a0969f96224393e42f1671ec2f233ef" translate="yes" xml:space="preserve">
          <source>2n</source>
          <target state="translated">2n</target>
        </trans-unit>
        <trans-unit id="2dcaeb9e7ed7e579aa8b8ba6e8829281084ce59d" translate="yes" xml:space="preserve">
          <source>2s2</source>
          <target state="translated">2s2</target>
        </trans-unit>
        <trans-unit id="77de68daecd823babbb58edb1c8e14d7106e83bb" translate="yes" xml:space="preserve">
          <source>3</source>
          <target state="translated">3</target>
        </trans-unit>
        <trans-unit id="93ed9c6938b1842bf41a4b8540f19c023806ca02" translate="yes" xml:space="preserve">
          <source>3) (for data members only, not member functions) When used in &lt;a href=&quot;expressions#Unevaluated_expressions&quot;&gt;unevaluated operands&lt;/a&gt;.</source>
          <target state="translated">3）（仅用于数据成员，不用于成员函数）在&lt;a href=&quot;expressions#Unevaluated_expressions&quot;&gt;未求值的操作数中使用时&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="4fd3dc7487f8a80579d5f8be29c2412440b68dd8" translate="yes" xml:space="preserve">
          <source>3) (none).</source>
          <target state="translated">3)(无)。</target>
        </trans-unit>
        <trans-unit id="f412c21f9fd850859756cf6f8cde85c9cc2a4f8c" translate="yes" xml:space="preserve">
          <source>3) &lt;code&gt;(bool)(std::get&amp;lt;0&amp;gt;(lhs) &amp;lt; std::get&amp;lt;0&amp;gt;(rhs)) || (!(bool)(std::get&amp;lt;0&amp;gt;(rhs) &amp;lt; std::get&amp;lt;0&amp;gt;(lhs)) &amp;amp;&amp;amp; lhstail &amp;lt; rhstail)&lt;/code&gt;, where &lt;code&gt;lhstail&lt;/code&gt; is lhs without its first element, and &lt;code&gt;rhstail&lt;/code&gt; is rhs without its first element. For two empty tuples, returns &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">3） &lt;code&gt;(bool)(std::get&amp;lt;0&amp;gt;(lhs) &amp;lt; std::get&amp;lt;0&amp;gt;(rhs)) || (!(bool)(std::get&amp;lt;0&amp;gt;(rhs) &amp;lt; std::get&amp;lt;0&amp;gt;(lhs)) &amp;amp;&amp;amp; lhstail &amp;lt; rhstail)&lt;/code&gt; ，其中 &lt;code&gt;lhstail&lt;/code&gt; 是LHS没有它的第一元件，和 &lt;code&gt;rhstail&lt;/code&gt; 是没有其第一右轴元件。对于两个空元组，返回 &lt;code&gt;false&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="e6a3ffaf1f8e433f953a495e10b6acbfb87664db" translate="yes" xml:space="preserve">
          <source>3) &lt;code&gt;&lt;a href=&quot;../../utility/functional/less&quot;&gt;std::less&lt;/a&gt;&amp;lt;CT&amp;gt;()(x.get(), y.get())&lt;/code&gt;, where &lt;code&gt;CT&lt;/code&gt; is &lt;code&gt;&lt;a href=&quot;../../types/common_type&quot;&gt;std::common_type&lt;/a&gt;&amp;lt;unique_ptr&amp;lt;T1, D1&amp;gt;::pointer, unique_ptr&amp;lt;T2, D2&amp;gt;::pointer&amp;gt;::type&lt;/code&gt;.</source>
          <target state="translated">3） &lt;code&gt;&lt;a href=&quot;../../utility/functional/less&quot;&gt;std::less&lt;/a&gt;&amp;lt;CT&amp;gt;()(x.get(), y.get())&lt;/code&gt; ，其中 &lt;code&gt;CT&lt;/code&gt; 是 &lt;code&gt;&lt;a href=&quot;../../types/common_type&quot;&gt;std::common_type&lt;/a&gt;&amp;lt;unique_ptr&amp;lt;T1, D1&amp;gt;::pointer, unique_ptr&amp;lt;T2, D2&amp;gt;::pointer&amp;gt;::type&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="2be4071f71740c496b54640b542bc8c3b487d937" translate="yes" xml:space="preserve">
          <source>3) &lt;code&gt;&lt;a href=&quot;weak_ptr&quot;&gt;std::weak_ptr&lt;/a&gt;&amp;lt;T&amp;gt;&lt;/code&gt;</source>
          <target state="translated">3） &lt;code&gt;&lt;a href=&quot;weak_ptr&quot;&gt;std::weak_ptr&lt;/a&gt;&amp;lt;T&amp;gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="6e1cbcd61f251bf7ac6d32239024455fbf326f65" translate="yes" xml:space="preserve">
          <source>3) &lt;code&gt;CT(lhs).count() &amp;lt; CT(rhs).count()&lt;/code&gt;.</source>
          <target state="translated">3） &lt;code&gt;CT(lhs).count() &amp;lt; CT(rhs).count()&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="87bee209fbf0b7f657eeac78da3fcefe66a99f50" translate="yes" xml:space="preserve">
          <source>3) A</source>
          <target state="translated">3)A</target>
        </trans-unit>
        <trans-unit id="8f333f080a1eab002bc9740bac51bf9769477bd2" translate="yes" xml:space="preserve">
          <source>3) A &lt;a href=&quot;structured_binding&quot;&gt;structured binding&lt;/a&gt; is odr-used if it appears as a</source>
          <target state="translated">3）如果&lt;a href=&quot;structured_binding&quot;&gt;结构化绑定&lt;/a&gt;显示为</target>
        </trans-unit>
        <trans-unit id="b188a6ff7ea0de5610c6653bc130c0fbd5477958" translate="yes" xml:space="preserve">
          <source>3) A &lt;code&gt;std::chrono::day&lt;/code&gt; value corresponding to the last day of the stored year and month.</source>
          <target state="translated">3）一个 &lt;code&gt;std::chrono::day&lt;/code&gt; 值，对应于所存储的年份和月份的最后一天。</target>
        </trans-unit>
        <trans-unit id="5a1c89bc54d1a6b6db2e7d3303f208fade04441e" translate="yes" xml:space="preserve">
          <source>3) A carries dependency into another evaluation X, and X carries dependency into B</source>
          <target state="translated">3)A将依赖性带入另一个评价X,而X将依赖性带入B。</target>
        </trans-unit>
        <trans-unit id="7af017b7c88a6276245e5bf115b539d97b0b7ffa" translate="yes" xml:space="preserve">
          <source>3) A declaration that consists solely of an elaborated type specifier always declares a class type named by identifier in the &lt;a href=&quot;scope&quot;&gt;scope&lt;/a&gt; that contains the declaration.</source>
          <target state="translated">3）仅由详细的类型说明符组成的声明始终在包含该声明的&lt;a href=&quot;scope&quot;&gt;范围内&lt;/a&gt;声明一个由标识符命名的类类型。</target>
        </trans-unit>
        <trans-unit id="39d0bb31e412d6eadcee39bd1861a2cc86e62eca" translate="yes" xml:space="preserve">
          <source>3) A non-type template &lt;a href=&quot;parameter_pack&quot;&gt;parameter pack&lt;/a&gt; with an optional name.</source>
          <target state="translated">3）具有可选名称的非类型模板&lt;a href=&quot;parameter_pack&quot;&gt;参数包&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="0d581f61df3255edce79e2bcf896c0f882f281e4" translate="yes" xml:space="preserve">
          <source>3) A non-type template argument or an array bound in which a subexpression references a template</source>
          <target state="translated">3)非类型模板参数或数组绑定,其中子表达式引用了模板</target>
        </trans-unit>
        <trans-unit id="fa8572e10980da3c78b1f6510cdbda7fceba97e6" translate="yes" xml:space="preserve">
          <source>3) A specialization for user-defined fancy pointer types may define an additional static member function.</source>
          <target state="translated">3)对用户定义的花式指针类型的专门化可以定义一个额外的静态成员函数。</target>
        </trans-unit>
        <trans-unit id="0c89d927e6bd97c96c485fc4a17feacc218eb28b" translate="yes" xml:space="preserve">
          <source>3) A standard conversion sequence &lt;code&gt;S1&lt;/code&gt; is</source>
          <target state="translated">3）标准转换序列 &lt;code&gt;S1&lt;/code&gt; 为</target>
        </trans-unit>
        <trans-unit id="a404e0480fce5bf74f08f5befd742384386fb31b" translate="yes" xml:space="preserve">
          <source>3) A string containing the latest remote database version.</source>
          <target state="translated">3)包含最新远程数据库版本的字符串。</target>
        </trans-unit>
        <trans-unit id="840f814d1ba6d22fe1578d48daf10220a13af485" translate="yes" xml:space="preserve">
          <source>3) A template template &lt;a href=&quot;parameter_pack&quot;&gt;parameter pack&lt;/a&gt; with an optional name.</source>
          <target state="translated">3）带有可选名称的模板模板&lt;a href=&quot;parameter_pack&quot;&gt;参数包&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="778baf7289829434b4c6c05167a0700403180cc6" translate="yes" xml:space="preserve">
          <source>3) A template template parameter pack with an optional name</source>
          <target state="translated">3)模板参数包,名称可选。</target>
        </trans-unit>
        <trans-unit id="770b543e148403ea4dededf7526f310ae3d46b3e" translate="yes" xml:space="preserve">
          <source>3) A type template &lt;a href=&quot;parameter_pack&quot;&gt;parameter pack&lt;/a&gt;.</source>
          <target state="translated">3）类型模板&lt;a href=&quot;parameter_pack&quot;&gt;参数包&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="14fdc9083f4eac7a50f08f933d275b687d9bb749" translate="yes" xml:space="preserve">
          <source>3) A value of any integral or enumeration type can be converted to a pointer type. A pointer converted to an integer of sufficient size and back to the same pointer type is guaranteed to have its original value, otherwise the resulting pointer cannot be dereferenced safely (the round-trip conversion in the opposite direction is not guaranteed; the same pointer may have multiple integer representations) The null pointer constant &lt;code&gt;&lt;a href=&quot;../types/null&quot;&gt;NULL&lt;/a&gt;&lt;/code&gt; or integer zero is not guaranteed to yield the null pointer value of the target type; &lt;a href=&quot;static_cast&quot;&gt;static_cast&lt;/a&gt; or &lt;a href=&quot;implicit_cast&quot;&gt;implicit conversion&lt;/a&gt; should be used for this purpose.</source>
          <target state="translated">3）任何整数或枚举类型的值都可以转换为指针类型。保证将指针转换为足够大的整数并返回相同的指针类型，才能保证其具有原始值，否则不能安全地取消对结果指针的引用（不保证在相反方向上的往返转换；同一指针可能具有多个整数表示）不保证空指针常量 &lt;code&gt;&lt;a href=&quot;../types/null&quot;&gt;NULL&lt;/a&gt;&lt;/code&gt; 或整数零会产生目标类型的空指针值；为此，应使用&lt;a href=&quot;static_cast&quot;&gt;static_cast&lt;/a&gt;或&lt;a href=&quot;implicit_cast&quot;&gt;隐式转换&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="f552c1726716c82fbccf7a2867e0be7c5de21a4c" translate="yes" xml:space="preserve">
          <source>3) An inline function or variable(since C++17) with &lt;a href=&quot;storage_duration&quot;&gt;external linkage&lt;/a&gt; (e.g. not declared &lt;code&gt;static&lt;/code&gt;) has the following additional properties:</source>
          <target state="translated">3）具有&lt;a href=&quot;storage_duration&quot;&gt;外部链接&lt;/a&gt;（例如，未声明为 &lt;code&gt;static&lt;/code&gt; ）的内联函数或变量（自C ++ 17起）具有以下附加属性：</target>
        </trans-unit>
        <trans-unit id="e125c75ae4a99ed3a1eb8a67cdd34c16a97207b5" translate="yes" xml:space="preserve">
          <source>3) Analyzes a string &lt;code&gt;s&lt;/code&gt;. Match results are returned in &lt;code&gt;m&lt;/code&gt;.</source>
          <target state="translated">3）分析一个字符串 &lt;code&gt;s&lt;/code&gt; 。匹配结果以 &lt;code&gt;m&lt;/code&gt; 返回。</target>
        </trans-unit>
        <trans-unit id="99c474666d172eea06f27f6e7791328349727abf" translate="yes" xml:space="preserve">
          <source>3) Any exception thrown by the move constructor of &lt;code&gt;value&lt;/code&gt;</source>
          <target state="translated">3） &lt;code&gt;value&lt;/code&gt; 的move构造函数抛出的任何异常</target>
        </trans-unit>
        <trans-unit id="277dd10cd98338b61305a206c3ba9cc041bb39c5" translate="yes" xml:space="preserve">
          <source>3) Any exceptions thrown by copy/move constructor of &lt;code&gt;f&lt;/code&gt; and by the allocator's &lt;code&gt;allocate&lt;/code&gt; function if memory allocation fails.</source>
          <target state="translated">3）如果内存分配失败，则 &lt;code&gt;f&lt;/code&gt; 的复制/移动构造函数和分配器的 &lt;code&gt;allocate&lt;/code&gt; 函数抛出的任何异常。</target>
        </trans-unit>
        <trans-unit id="c344ba4971b23645d12f07ff10b697bda0957870" translate="yes" xml:space="preserve">
          <source>3) Any exceptions thrown by the &lt;code&gt;Compare&lt;/code&gt; object.</source>
          <target state="translated">3） &lt;code&gt;Compare&lt;/code&gt; 对象抛出的任何异常。</target>
        </trans-unit>
        <trans-unit id="711b68a51c1768e3b8e3ae3b077cfbddb75664a9" translate="yes" xml:space="preserve">
          <source>3) Appends a substring &lt;code&gt;[pos, pos+count)&lt;/code&gt; of &lt;code&gt;str&lt;/code&gt;. If the requested substring lasts past the end of the string, or if &lt;code&gt;count == npos&lt;/code&gt;, the appended substring is &lt;code&gt;[pos, size())&lt;/code&gt;. If &lt;code&gt;pos &amp;gt; str.size()&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;../../error/out_of_range/out_of_range&quot;&gt;std::out_of_range&lt;/a&gt;&lt;/code&gt; is thrown.</source>
          <target state="translated">3）追加子串 &lt;code&gt;[pos, pos+count)&lt;/code&gt; 的 &lt;code&gt;str&lt;/code&gt; 。如果请求的子字符串超过字符串的末尾，或者 &lt;code&gt;count == npos&lt;/code&gt; ，则附加的子字符串为 &lt;code&gt;[pos, size())&lt;/code&gt; 。如果 &lt;code&gt;pos &amp;gt; str.size()&lt;/code&gt; ，则抛出 &lt;code&gt;&lt;a href=&quot;../../error/out_of_range/out_of_range&quot;&gt;std::out_of_range&lt;/a&gt;&lt;/code&gt; out_of_range。</target>
        </trans-unit>
        <trans-unit id="80e2a402b0577257e8c7923fedcad6eb1cc319fe" translate="yes" xml:space="preserve">
          <source>3) Applies &lt;code&gt;unary_op&lt;/code&gt; to each element in the range [first; last) and reduces the results (possibly permuted and aggregated in unspecified manner) along with the initial value &lt;code&gt;init&lt;/code&gt; over &lt;code&gt;binary_op&lt;/code&gt;.</source>
          <target state="translated">3）将 &lt;code&gt;unary_op&lt;/code&gt; 应用于[first; 最后一个），并减少与初始值沿结果（可能置换和在未指定的方式聚集的） &lt;code&gt;init&lt;/code&gt; 过 &lt;code&gt;binary_op&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="c31e7c2f08c0e946090d4f29f5797e5765024af1" translate="yes" xml:space="preserve">
          <source>3) Applies the offset &lt;code&gt;d&lt;/code&gt; to &lt;code&gt;pt&lt;/code&gt; in negative direction. Effectively returns &lt;code&gt;CT(ot.time_since_epoch() - d)&lt;/code&gt;, where &lt;code&gt;CT&lt;/code&gt; is the return type.</source>
          <target state="translated">3）在负方向 &lt;code&gt;pt&lt;/code&gt; 偏移量 &lt;code&gt;d&lt;/code&gt; 应用于pt。有效地返回 &lt;code&gt;CT(ot.time_since_epoch() - d)&lt;/code&gt; ，其中 &lt;code&gt;CT&lt;/code&gt; 是返回类型。</target>
        </trans-unit>
        <trans-unit id="4de92ce9b6ae9639e9b18c50ba6cdaf2bfe64abf" translate="yes" xml:space="preserve">
          <source>3) Assigns a null-terminated character string pointed to by &lt;code&gt;ptr&lt;/code&gt;. Equivalent to &lt;code&gt;assign(ptr);&lt;/code&gt;.</source>
          <target state="translated">3）分配由 &lt;code&gt;ptr&lt;/code&gt; 指向的以空字符结尾的字符串。等效于 &lt;code&gt;assign(ptr);&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="afa3c34805c67bd23f3ac1c048f464b6df724f6b" translate="yes" xml:space="preserve">
          <source>3) Assigns a null-terminated string pointed to by &lt;code&gt;s&lt;/code&gt;.</source>
          <target state="translated">3）分配一个以 &lt;code&gt;s&lt;/code&gt; 指向的空终止字符串。</target>
        </trans-unit>
        <trans-unit id="8d825df8ba69b54dafc39a8f5e95c82cb9c5a093" translate="yes" xml:space="preserve">
          <source>3) Assigns the pathname identified by detected-format character range &lt;code&gt;[first, last)&lt;/code&gt;.</source>
          <target state="translated">3）分配由检测格式字符范围 &lt;code&gt;[first, last)&lt;/code&gt; 标识的路径名。</target>
        </trans-unit>
        <trans-unit id="5e2f95e0668e5ea74a4004353550d86f7032a01d" translate="yes" xml:space="preserve">
          <source>3) Assigns the selected elements from &lt;code&gt;sl_arr&lt;/code&gt; to the referred to elements of &lt;code&gt;*this&lt;/code&gt;.</source>
          <target state="translated">3）将 &lt;code&gt;sl_arr&lt;/code&gt; 中的选定元素分配给 &lt;code&gt;*this&lt;/code&gt; 的引用元素。</target>
        </trans-unit>
        <trans-unit id="bcf8c246ad821da73e30c82a073b3e8a40983b64" translate="yes" xml:space="preserve">
          <source>3) Assigns the type and value of &lt;code&gt;rhs&lt;/code&gt;, as if by &lt;code&gt;any(&lt;a href=&quot;../forward&quot;&gt;std::forward&lt;/a&gt;&amp;lt;ValueType&amp;gt;(rhs)).swap(*this)&lt;/code&gt;. This overload only participates in overload resolution if &lt;code&gt;&lt;a href=&quot;../../types/decay&quot;&gt;std::decay_t&lt;/a&gt;&amp;lt;ValueType&amp;gt;&lt;/code&gt; is not the same type as &lt;code&gt;any&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;../../types/is_copy_constructible&quot;&gt;std::is_copy_constructible_v&lt;/a&gt;&amp;lt;&lt;a href=&quot;../../types/decay&quot;&gt;std::decay_t&lt;/a&gt;&amp;lt;ValueType&amp;gt;&amp;gt;&lt;/code&gt; is &lt;code&gt;true&lt;/code&gt;. .</source>
          <target state="translated">3）分配 &lt;code&gt;rhs&lt;/code&gt; 的类型和值，就像通过 &lt;code&gt;any(&lt;a href=&quot;../forward&quot;&gt;std::forward&lt;/a&gt;&amp;lt;ValueType&amp;gt;(rhs)).swap(*this)&lt;/code&gt; 。仅当 &lt;code&gt;&lt;a href=&quot;../../types/decay&quot;&gt;std::decay_t&lt;/a&gt;&amp;lt;ValueType&amp;gt;&lt;/code&gt; 与 &lt;code&gt;any&lt;/code&gt; 类型都不相同且 &lt;code&gt;&lt;a href=&quot;../../types/is_copy_constructible&quot;&gt;std::is_copy_constructible_v&lt;/a&gt;&amp;lt;&lt;a href=&quot;../../types/decay&quot;&gt;std::decay_t&lt;/a&gt;&amp;lt;ValueType&amp;gt;&amp;gt;&lt;/code&gt; 为 &lt;code&gt;true&lt;/code&gt; 时,此重载才参与重载解析。。</target>
        </trans-unit>
        <trans-unit id="72455795a2eb56051b09bfa5eae38d55c9855cf4" translate="yes" xml:space="preserve">
          <source>3) At the end of this phase, all preprocessor directives are removed from the source.</source>
          <target state="translated">3)在这一阶段结束时,所有的前处理程序指令都从源头中删除。</target>
        </trans-unit>
        <trans-unit id="b617b63b51df48825f9812a2ff92c4ab9db6bbd3" translate="yes" xml:space="preserve">
          <source>3) Atomic types are not copy/move constructible</source>
          <target state="translated">3)原子类型是不可复制/移动的构造类型</target>
        </trans-unit>
        <trans-unit id="125fa86e943fea4422d5e5c22612a46dba3c3dc2" translate="yes" xml:space="preserve">
          <source>3) Atomic variables are not &lt;a href=&quot;../../named_req/copyconstructible&quot;&gt;CopyConstructible&lt;/a&gt;.</source>
          <target state="translated">3）原子变量不是&lt;a href=&quot;../../named_req/copyconstructible&quot;&gt;CopyConstructible&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="df76596a0cd8cc957f4b28abfe1ee8efc6c0976e" translate="yes" xml:space="preserve">
          <source>3) Average case: &lt;code&gt;c.count(key)&lt;/code&gt;, worst case: &lt;code&gt;c.size()&lt;/code&gt;</source>
          <target state="translated">3）平均情况： &lt;code&gt;c.count(key)&lt;/code&gt; ，最坏情况： &lt;code&gt;c.size()&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="8a4709e9943c676621b3bd79567e41f762a7b9cb" translate="yes" xml:space="preserve">
          <source>3) Behaves the same as the reset member of the primary template, except that it will only participate in overload resolution if either</source>
          <target state="translated">3)行为与主模板的复位成员相同,只是它只有在以下两种情况下才会参与过载解决。</target>
        </trans-unit>
        <trans-unit id="db0a5cb60cad1b857e2dc32774d4170343af6876" translate="yes" xml:space="preserve">
          <source>3) Binary right fold (E op ... op I) becomes (E</source>
          <target state="translated">3)二元右折(E op......op I)变为(E</target>
        </trans-unit>
        <trans-unit id="a6c533dca72a273606f1a4bdcd3aae2cd8adcbd1" translate="yes" xml:space="preserve">
          <source>3) Both ranges must be sorted with the given comparison function &lt;code&gt;comp&lt;/code&gt;.</source>
          <target state="translated">3）两个范围都必须使用给定的比较函数 &lt;code&gt;comp&lt;/code&gt; 进行排序。</target>
        </trans-unit>
        <trans-unit id="9f24dab55a5be9d15ce3a2dfff9cf8e261471119" translate="yes" xml:space="preserve">
          <source>3) Called by non-array &lt;a href=&quot;../../language/new&quot;&gt;new-expressions&lt;/a&gt; to allocate storage required for a single object whose alignment requirement exceeds &lt;code&gt;__STDCPP_DEFAULT_NEW_ALIGNMENT__&lt;/code&gt;</source>
          <target state="translated">3）由非数组&lt;a href=&quot;../../language/new&quot;&gt;new表达式&lt;/a&gt;调用，以分配单个对象的对齐要求超过 &lt;code&gt;__STDCPP_DEFAULT_NEW_ALIGNMENT__&lt;/code&gt; 的所需存储空间</target>
        </trans-unit>
        <trans-unit id="517a2e7859fad342e8339288262270e3d64cd5ae" translate="yes" xml:space="preserve">
          <source>3) Calls every callback registered by &lt;code&gt;&lt;a href=&quot;../ios_base/register_callback&quot;&gt;register_callback()&lt;/a&gt;&lt;/code&gt; passing &lt;a href=&quot;../ios_base/event&quot;&gt;&lt;code&gt;copyfmt_event&lt;/code&gt;&lt;/a&gt; as parameter</source>
          <target state="translated">3）调用 &lt;code&gt;&lt;a href=&quot;../ios_base/register_callback&quot;&gt;register_callback()&lt;/a&gt;&lt;/code&gt; 注册的每个回调，并将&lt;a href=&quot;../ios_base/event&quot;&gt; &lt;code&gt;copyfmt_event&lt;/code&gt; &lt;/a&gt;作为参数传递</target>
        </trans-unit>
        <trans-unit id="138ee6153e3047f1d93689ab3206212aab811973" translate="yes" xml:space="preserve">
          <source>3) Calls the appropriate insertion operator, given an rvalue reference to an output stream object (equivalent to &lt;code&gt;os &amp;lt;&amp;lt; value&lt;/code&gt;). This function template does not participate in overload resolution unless the expression &lt;code&gt;os &amp;lt;&amp;lt; value&lt;/code&gt; is well-formed.(since C++17)</source>
          <target state="translated">3）调用适当的插入运算符，给定对输出流对象的右值引用（相当于 &lt;code&gt;os &amp;lt;&amp;lt; value&lt;/code&gt; ）。除非表达式 &lt;code&gt;os &amp;lt;&amp;lt; value&lt;/code&gt; 的格式正确，否则此函数模板不会参与重载解析。（自C ++ 17起）</target>
        </trans-unit>
        <trans-unit id="de070a5983dd60787ac4aa28adf1665de1e9000e" translate="yes" xml:space="preserve">
          <source>3) Catch-all handler, which is activated for any exception</source>
          <target state="translated">3)Catch-all处理程序,对任何异常情况都会被激活</target>
        </trans-unit>
        <trans-unit id="0dc4b2fd6e3b694b7ff8fd35f20434adce6f039f" translate="yes" xml:space="preserve">
          <source>3) Checks if none of the bits are set to &lt;code&gt;true&lt;/code&gt;</source>
          <target state="translated">3）检查是否所有位都设置为 &lt;code&gt;true&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="6982458057cdcb098a70a57ce003a934dc6a6555" translate="yes" xml:space="preserve">
          <source>3) Checks if the character &lt;code&gt;c&lt;/code&gt; is classified by the mask &lt;code&gt;m&lt;/code&gt;</source>
          <target state="translated">3）检查字符 &lt;code&gt;c&lt;/code&gt; 是否由掩码 &lt;code&gt;m&lt;/code&gt; 分类</target>
        </trans-unit>
        <trans-unit id="3f66e3e4edb359a08dd261ed52a0bda80001c7a1" translate="yes" xml:space="preserve">
          <source>3) Checks if unary predicate &lt;code&gt;p&lt;/code&gt; returns &lt;code&gt;true&lt;/code&gt; for at least one element in the range &lt;code&gt;[first, last)&lt;/code&gt;.</source>
          <target state="translated">3）检查一元谓词 &lt;code&gt;p&lt;/code&gt; 是否对范围 &lt;code&gt;[first, last)&lt;/code&gt; 中的至少一个元素返回 &lt;code&gt;true&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="a6ad21aeb5bc08ed6ed57f70c99d7834d64b675d" translate="yes" xml:space="preserve">
          <source>3) Checks if unary predicate &lt;code&gt;pred&lt;/code&gt; returns &lt;code&gt;true&lt;/code&gt; for at least one element in the range &lt;code&gt;[first, last)&lt;/code&gt; (after projecting with the projection &lt;code&gt;proj&lt;/code&gt;).</source>
          <target state="translated">3）检查一元谓词 &lt;code&gt;pred&lt;/code&gt; 是否在 &lt;code&gt;[first, last)&lt;/code&gt; 范围内的至少一个元素上返回 &lt;code&gt;true&lt;/code&gt; （使用投影 &lt;code&gt;proj&lt;/code&gt; 投影之后）。</target>
        </trans-unit>
        <trans-unit id="8551280e75bef1b3f4675121add3c0f3124fb646" translate="yes" xml:space="preserve">
          <source>3) Checks whether &lt;a href=&quot;root_directory&quot;&gt;&lt;code&gt;root_directory()&lt;/code&gt;&lt;/a&gt; is empty.</source>
          <target state="translated">3）检查&lt;a href=&quot;root_directory&quot;&gt; &lt;code&gt;root_directory()&lt;/code&gt; &lt;/a&gt;是否为空。</target>
        </trans-unit>
        <trans-unit id="cc9f436acf6b24c0d26142d074257a80ae6cc54c" translate="yes" xml:space="preserve">
          <source>3) Checks whether &lt;code&gt;lhs&lt;/code&gt; is</source>
          <target state="translated">3）检查 &lt;code&gt;lhs&lt;/code&gt; 是否</target>
        </trans-unit>
        <trans-unit id="24e17aba77f331c3ab3ac15c7858d72606dceab0" translate="yes" xml:space="preserve">
          <source>3) Checks whether &lt;code&gt;lhs&lt;/code&gt; is less than &lt;code&gt;rhs&lt;/code&gt;.</source>
          <target state="translated">3）检查 &lt;code&gt;lhs&lt;/code&gt; 是否小于 &lt;code&gt;rhs&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="d2f3181e798a05645e2751614f028ec0cfcd196d" translate="yes" xml:space="preserve">
          <source>3) Checks whether &lt;code&gt;lhs&lt;/code&gt; is less than &lt;code&gt;rhs&lt;/code&gt;. Equivalent to &lt;code&gt;lhs.compare(rhs) &amp;lt; 0&lt;/code&gt;.</source>
          <target state="translated">3）检查 &lt;code&gt;lhs&lt;/code&gt; 是否小于 &lt;code&gt;rhs&lt;/code&gt; 。等效于 &lt;code&gt;lhs.compare(rhs) &amp;lt; 0&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="fb940299605f34d29ed114c450d6d0424c55fa83" translate="yes" xml:space="preserve">
          <source>3) Compares a &lt;code&gt;[pos1, pos1+count1)&lt;/code&gt; substring of this string to a substring &lt;code&gt;[pos2, pos2+count2)&lt;/code&gt; of</source>
          <target state="translated">3）比较 &lt;code&gt;[pos1, pos1+count1)&lt;/code&gt; 此字符串的子串的子串 &lt;code&gt;[pos2, pos2+count2)&lt;/code&gt; 的</target>
        </trans-unit>
        <trans-unit id="4af7afc9d4203c77090cf48e632fdd4573df17e1" translate="yes" xml:space="preserve">
          <source>3) Compares a &lt;code&gt;sub_match&lt;/code&gt; with a null-terminated sequence of the underlying character type pointed to by &lt;code&gt;s&lt;/code&gt;. Equivalent to &lt;code&gt;str().compare(c)&lt;/code&gt;.</source>
          <target state="translated">3）比较 &lt;code&gt;sub_match&lt;/code&gt; 与 &lt;code&gt;s&lt;/code&gt; 指向的基础字符类型的以空终止的序列。等效于 &lt;code&gt;str().compare(c)&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="f69c1fbb422599bc962725dbb96d7bdaad883f11" translate="yes" xml:space="preserve">
          <source>3) Computes the</source>
          <target state="translated">3)计算</target>
        </trans-unit>
        <trans-unit id="a465bbf8b7710efdab73d9b8968c0c39cc33a3c0" translate="yes" xml:space="preserve">
          <source>3) Computes the inverse tangent of &lt;code&gt;vy&lt;/code&gt; and each value in the numeric array &lt;code&gt;x&lt;/code&gt;.</source>
          <target state="translated">3）计算 &lt;code&gt;vy&lt;/code&gt; 的反正切值和数字数组 &lt;code&gt;x&lt;/code&gt; 中的每个值。</target>
        </trans-unit>
        <trans-unit id="23b37ceb45df6ff2140af9f2e37a5581f8c59a28" translate="yes" xml:space="preserve">
          <source>3) Computes the values of &lt;code&gt;vbase&lt;/code&gt; raised to the power defined by the elements in the numeric array &lt;code&gt;exp&lt;/code&gt;.</source>
          <target state="translated">3）计算由数字数组 &lt;code&gt;exp&lt;/code&gt; 中元素定义的 &lt;code&gt;vbase&lt;/code&gt; 增加的vbase值。</target>
        </trans-unit>
        <trans-unit id="e286893b47fa45ff6c3363e04afec204645e51c3" translate="yes" xml:space="preserve">
          <source>3) Constant if &lt;code&gt;other&lt;/code&gt; refers to the same object as &lt;code&gt;*this&lt;/code&gt;, otherwise linear in &lt;code&gt;&lt;a href=&quot;../../iterator/distance&quot;&gt;std::distance&lt;/a&gt;(first, last)&lt;/code&gt;.</source>
          <target state="translated">3）如果 &lt;code&gt;other&lt;/code&gt; 指向与 &lt;code&gt;*this&lt;/code&gt; 相同的对象，则为常量，否则为 &lt;code&gt;&lt;a href=&quot;../../iterator/distance&quot;&gt;std::distance&lt;/a&gt;(first, last)&lt;/code&gt; 线性对象。</target>
        </trans-unit>
        <trans-unit id="e57bad1d757a6ed22cdc55d4717801ae6b025f43" translate="yes" xml:space="preserve">
          <source>3) Constructs a &lt;code&gt;std::basic_stringbuf&lt;/code&gt; object by performing the same initialization as 1), followed by initializing the associated character sequence as if by calling &lt;code&gt;&lt;a href=&quot;str&quot;&gt;str(new_str)&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">3）通过执行与1）相同的初始化，构造一个 &lt;code&gt;std::basic_stringbuf&lt;/code&gt; 对象，然后像调用 &lt;code&gt;&lt;a href=&quot;str&quot;&gt;str(new_str)&lt;/a&gt;&lt;/code&gt; 一样初始化关联的字符序列。</target>
        </trans-unit>
        <trans-unit id="00f3989c9581377f00769097da18714b0f548a59" translate="yes" xml:space="preserve">
          <source>3) Constructs a &lt;code&gt;std::default_delete&amp;lt;U[]&amp;gt;&lt;/code&gt; object from another &lt;code&gt;std::default_delete&amp;lt;U[]&amp;gt;&lt;/code&gt; object. This constructor will only participate in overload resolution if &lt;code&gt;U(*)[]&lt;/code&gt; is implicitly convertible to &lt;code&gt;T(*)[]&lt;/code&gt;.</source>
          <target state="translated">3）从另一个 &lt;code&gt;std::default_delete&amp;lt;U[]&amp;gt;&lt;/code&gt; 对象构造一个 &lt;code&gt;std::default_delete&amp;lt;U[]&amp;gt;&lt;/code&gt; default_delete &amp;lt;U []&amp;gt;对象。如果 &lt;code&gt;U(*)[]&lt;/code&gt; 可隐式转换为 &lt;code&gt;T(*)[]&lt;/code&gt; ,则此构造方法将仅参与重载解析。</target>
        </trans-unit>
        <trans-unit id="96dd5708df38048ad24e2fe617abdc01737563f0" translate="yes" xml:space="preserve">
          <source>3) Constructs a &lt;code&gt;std::packaged_task&lt;/code&gt; object with a shared state and a copy of the task, initialized with &lt;code&gt;&lt;a href=&quot;../../utility/forward&quot;&gt;std::forward&lt;/a&gt;&amp;lt;F&amp;gt;(f)&lt;/code&gt;. Uses the provided allocator to allocate memory necessary to store the task. This constructor does not participate in overload resolution if &lt;code&gt;&lt;a href=&quot;../../types/decay&quot;&gt;std::decay&lt;/a&gt;&amp;lt;F&amp;gt;::type&lt;/code&gt; is the same type as &lt;code&gt;&lt;a href=&quot;../packaged_task&quot;&gt;std::packaged_task&lt;/a&gt;&amp;lt;R(ArgTypes...)&amp;gt;&lt;/code&gt;.</source>
          <target state="translated">3）构造一个 &lt;code&gt;std::packaged_task&lt;/code&gt; 对象，该对象具有共享状态和该任务的副本，并使用 &lt;code&gt;&lt;a href=&quot;../../utility/forward&quot;&gt;std::forward&lt;/a&gt;&amp;lt;F&amp;gt;(f)&lt;/code&gt; 初始化。使用提供的分配器分配存储任务所需的内存。如果 &lt;code&gt;&lt;a href=&quot;../../types/decay&quot;&gt;std::decay&lt;/a&gt;&amp;lt;F&amp;gt;::type&lt;/code&gt; type与 &lt;code&gt;&lt;a href=&quot;../packaged_task&quot;&gt;std::packaged_task&lt;/a&gt;&amp;lt;R(ArgTypes...)&amp;gt;&lt;/code&gt; 具有相同的类型，则此构造方法不参与重载解析。</target>
        </trans-unit>
        <trans-unit id="cb8305cde77f61f5d205904b755db7179acca055" translate="yes" xml:space="preserve">
          <source>3) Constructs a &lt;code&gt;std::seed_seq&lt;/code&gt; with the initial seed sequence obtained by iterating over the range &lt;code&gt;[begin, end)&lt;/code&gt; and copying the values obtained by dereferencing the iterator, modulo 232</source>
          <target state="translated">3）构造一个 &lt;code&gt;std::seed_seq&lt;/code&gt; ，其初始种子序列是通过在范围 &lt;code&gt;[begin, end)&lt;/code&gt; 进行迭代并复制通过解引用迭代器获得的值（模232 ）而获得的</target>
        </trans-unit>
        <trans-unit id="13a04e470438cbc38e9779df6f1cea0bcdcef69e" translate="yes" xml:space="preserve">
          <source>3) Constructs a &lt;code&gt;time_point&lt;/code&gt; by converting &lt;code&gt;t&lt;/code&gt; to &lt;code&gt;duration&lt;/code&gt;. This constructor only participates in overload resolution if &lt;code&gt;Duration2&lt;/code&gt; is implicitly convertible to &lt;code&gt;duration&lt;/code&gt;.</source>
          <target state="translated">3）通过将 &lt;code&gt;t&lt;/code&gt; 转换为 &lt;code&gt;duration&lt;/code&gt; 来构造一个 &lt;code&gt;time_point&lt;/code&gt; 。如果 &lt;code&gt;Duration2&lt;/code&gt; 可隐式转换为 &lt;code&gt;duration&lt;/code&gt; ,则此构造方法仅参与重载解析。</target>
        </trans-unit>
        <trans-unit id="a2a1529ec0920516a4d3095830d89fe2d0a3f650" translate="yes" xml:space="preserve">
          <source>3) Constructs a &lt;code&gt;weekday&lt;/code&gt; object representing the day of the week &lt;code&gt;dp&lt;/code&gt; corresponds to. This constructor defines an implicit conversion from &lt;code&gt;std::chrono::sys_days&lt;/code&gt; to &lt;code&gt;weekday&lt;/code&gt;.</source>
          <target state="translated">3）构造一个表示 &lt;code&gt;dp&lt;/code&gt; 对应于星期几的 &lt;code&gt;weekday&lt;/code&gt; 对象。此构造函数定义了从 &lt;code&gt;std::chrono::sys_days&lt;/code&gt; 到 &lt;code&gt;weekday&lt;/code&gt; 的隐式转换。</target>
        </trans-unit>
        <trans-unit id="99a57aece3f0696c55f367ff55ed379ddd1a6cf7" translate="yes" xml:space="preserve">
          <source>3) Constructs a &lt;code&gt;year_month_day&lt;/code&gt; object that stores the year &lt;code&gt;ymdl.year()&lt;/code&gt;, month &lt;code&gt;ymdl.month()&lt;/code&gt; and day &lt;code&gt;ymdl.day()&lt;/code&gt;.</source>
          <target state="translated">3）构造一个 &lt;code&gt;year_month_day&lt;/code&gt; 对象，该对象存储年 &lt;code&gt;ymdl.year()&lt;/code&gt; ，月 &lt;code&gt;ymdl.month()&lt;/code&gt; 和日 &lt;code&gt;ymdl.day()&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="476b68f911e0029bec53a4f4a3685c41402606cb" translate="yes" xml:space="preserve">
          <source>3) Constructs a &lt;code&gt;year_month_weekday&lt;/code&gt; object corresponding to the date represented by &lt;code&gt;dp&lt;/code&gt;. For any &lt;code&gt;year_month_weekday&lt;/code&gt; object storing a valid date, converting it to &lt;code&gt;sys_days&lt;/code&gt; and back yields the same value. This constructor defines an implicit conversion from &lt;code&gt;sys_days&lt;/code&gt; to &lt;code&gt;year_month_weekday&lt;/code&gt;.</source>
          <target state="translated">3）构造一个与 &lt;code&gt;dp&lt;/code&gt; 表示的日期相对应的 &lt;code&gt;year_month_weekday&lt;/code&gt; 对象。对于任何存储有效日期的 &lt;code&gt;year_month_weekday&lt;/code&gt; 对象，将其转换为 &lt;code&gt;sys_days&lt;/code&gt; 并返回将产生相同的值。此构造函数定义从 &lt;code&gt;sys_days&lt;/code&gt; 到 &lt;code&gt;year_month_weekday&lt;/code&gt; 的隐式转换。</target>
        </trans-unit>
        <trans-unit id="91b0e2de75ca61ecc916b3d71ac67dbe804f50e5" translate="yes" xml:space="preserve">
          <source>3) Constructs a bitset using the characters in the &lt;code&gt;&lt;a href=&quot;../../string/basic_string&quot;&gt;std::basic_string&lt;/a&gt;&lt;/code&gt;&lt;code&gt;str&lt;/code&gt;. An optional starting position &lt;code&gt;pos&lt;/code&gt; and length &lt;code&gt;n&lt;/code&gt; can be provided, as well as characters denoting alternate values for set (&lt;code&gt;one&lt;/code&gt;) and unset (&lt;code&gt;zero&lt;/code&gt;) bits. &lt;code&gt;Traits::eq()&lt;/code&gt; is used to compare the character values.</source>
          <target state="translated">3）使用 &lt;code&gt;&lt;a href=&quot;../../string/basic_string&quot;&gt;std::basic_string&lt;/a&gt;&lt;/code&gt; &lt;code&gt;str&lt;/code&gt; 中的字符构造一个位集。可以提供可选的起始位置 &lt;code&gt;pos&lt;/code&gt; 和长度 &lt;code&gt;n&lt;/code&gt; ，以及表示设置（ &lt;code&gt;one&lt;/code&gt; ）和未设置（ &lt;code&gt;zero&lt;/code&gt; ）位的备用值的字符。 &lt;code&gt;Traits::eq()&lt;/code&gt; 用于比较字符值。</target>
        </trans-unit>
        <trans-unit id="2ecc8edae63177c476e693356ecaafbb380e0079" translate="yes" xml:space="preserve">
          <source>3) Constructs a copy of &lt;code&gt;other&lt;/code&gt;.</source>
          <target state="translated">3）构造 &lt;code&gt;other&lt;/code&gt; 的副本。</target>
        </trans-unit>
        <trans-unit id="2c604462fc4435d3e62e6e0e1364f0662b73eca6" translate="yes" xml:space="preserve">
          <source>3) Constructs a copy of &lt;code&gt;other&lt;/code&gt;. If &lt;code&gt;&lt;a href=&quot;../../types/is_copy_constructible&quot;&gt;std::is_trivially_copy_constructible_v&lt;/a&gt;&amp;lt;T&amp;gt;&lt;/code&gt; is &lt;code&gt;true&lt;/code&gt; , this copy constructor is a trivial copy constructor.</source>
          <target state="translated">3）构造 &lt;code&gt;other&lt;/code&gt; 的副本。如果 &lt;code&gt;&lt;a href=&quot;../../types/is_copy_constructible&quot;&gt;std::is_trivially_copy_constructible_v&lt;/a&gt;&amp;lt;T&amp;gt;&lt;/code&gt; 为 &lt;code&gt;true&lt;/code&gt; ，则此副本构造函数为简单的副本构造函数。</target>
        </trans-unit>
        <trans-unit id="b6551e4ab1347d774118033aacfc8b835d211089" translate="yes" xml:space="preserve">
          <source>3) Constructs a distribution object where the intervals are taken from the initializer list &lt;code&gt;bl&lt;/code&gt; and the weights generated by the function &lt;code&gt;fw&lt;/code&gt;.</source>
          <target state="translated">3）构造一个分布对象，其中的间隔取自初始化列表 &lt;code&gt;bl&lt;/code&gt; 以及函数 &lt;code&gt;fw&lt;/code&gt; 生成的权重。</target>
        </trans-unit>
        <trans-unit id="fe98fada32eafe7fee0c1f9b54c5d85a913e88ea" translate="yes" xml:space="preserve">
          <source>3) Constructs a distribution object where the intervals are taken from the initializer list &lt;code&gt;ilist&lt;/code&gt; and the weights generated by the function &lt;code&gt;fw&lt;/code&gt;.</source>
          <target state="translated">3）构造一个分布对象，其中的间隔取自初始化列表 &lt;code&gt;ilist&lt;/code&gt; 以及函数 &lt;code&gt;fw&lt;/code&gt; 生成的权重。</target>
        </trans-unit>
        <trans-unit id="9010ff91722191d49898f46fb2db293153fd9fcb" translate="yes" xml:space="preserve">
          <source>3) Constructs a duration with &lt;code&gt;r&lt;/code&gt; ticks. Note that this constructor only participates in overload resolution if &lt;code&gt;Rep2&lt;/code&gt; (the argument type) is implicitly convertible to &lt;code&gt;rep&lt;/code&gt; (the type of this duration's ticks) and</source>
          <target state="translated">3）构造一个带有 &lt;code&gt;r&lt;/code&gt; 个刻度的持续时间。请注意，仅当 &lt;code&gt;Rep2&lt;/code&gt; （参数类型）可隐式转换为 &lt;code&gt;rep&lt;/code&gt; （此持续时间的滴答声的类型）并且</target>
        </trans-unit>
        <trans-unit id="5fcbc718af2ff4abacd7d3b3cccb97a2e4243517" translate="yes" xml:space="preserve">
          <source>3) Constructs a numeric array with &lt;code&gt;count&lt;/code&gt; copies of &lt;code&gt;val&lt;/code&gt;.</source>
          <target state="translated">3）构造一个数字数组，其中包含 &lt;code&gt;val&lt;/code&gt; 的 &lt;code&gt;count&lt;/code&gt; 副本。</target>
        </trans-unit>
        <trans-unit id="c7e48481604863d0dfa95055a712627ab6abe30d" translate="yes" xml:space="preserve">
          <source>3) Constructs a regex from a sequence of &lt;code&gt;count&lt;/code&gt; characters, pointed to by &lt;code&gt;s&lt;/code&gt;.</source>
          <target state="translated">3）从由 &lt;code&gt;s&lt;/code&gt; 指向的一系列 &lt;code&gt;count&lt;/code&gt; 字符构造一个正则表达式。</target>
        </trans-unit>
        <trans-unit id="3df5c87f17409e414fcfbef003853974662da9be" translate="yes" xml:space="preserve">
          <source>3) Constructs a span that is a view over the range &lt;code&gt;[first, last)&lt;/code&gt;; equivalent to &lt;code&gt;span(first, last - first)&lt;/code&gt;.</source>
          <target state="translated">3）构造一个范围为 &lt;code&gt;[first, last)&lt;/code&gt; 范围内的视图；等效于 &lt;code&gt;span(first, last - first)&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="67ec80fdc38d323b47d618c8fc41ea3821841740" translate="yes" xml:space="preserve">
          <source>3) Constructs a view of the first &lt;code&gt;count&lt;/code&gt; characters of the character array starting with the element pointed by &lt;code&gt;s&lt;/code&gt;. &lt;code&gt;s&lt;/code&gt; can contain null characters. The behavior is undefined if &lt;code&gt;[s, s+count)&lt;/code&gt; is not a valid range (even though the constructor may not access any of the elements of this range). After construction, &lt;code&gt;&lt;a href=&quot;data&quot;&gt;data()&lt;/a&gt;&lt;/code&gt; is equal to &lt;code&gt;s&lt;/code&gt;, and &lt;code&gt;&lt;a href=&quot;size&quot;&gt;size()&lt;/a&gt;&lt;/code&gt; is equal to &lt;code&gt;count&lt;/code&gt;.</source>
          <target state="translated">3）构造一个从 &lt;code&gt;s&lt;/code&gt; 指向的元素开始的字符数组的第一个 &lt;code&gt;count&lt;/code&gt; 字符的视图。 &lt;code&gt;s&lt;/code&gt; 可以包含空字符。如果 &lt;code&gt;[s, s+count)&lt;/code&gt; 不是有效范围，则该行为是不确定的（即使构造方法可能无法访问此范围的任何元素）。构造后， &lt;code&gt;&lt;a href=&quot;data&quot;&gt;data()&lt;/a&gt;&lt;/code&gt; 等于 &lt;code&gt;s&lt;/code&gt; ， &lt;code&gt;&lt;a href=&quot;size&quot;&gt;size()&lt;/a&gt;&lt;/code&gt; 等于 &lt;code&gt;count&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="964a4bae8736a3a8075177aac2441d4c603692a7" translate="yes" xml:space="preserve">
          <source>3) Constructs error code from an error code enum &lt;code&gt;e&lt;/code&gt;. Equivalent to &lt;code&gt;*this = make_error_code(e)&lt;/code&gt;. The overload participates in overload resolutions only if &lt;code&gt;&lt;a href=&quot;is_error_code_enum&quot;&gt;std::is_error_code_enum&lt;/a&gt;&amp;lt;ErrorCodeEnum&amp;gt;::value == true&lt;/code&gt;.</source>
          <target state="translated">3）从错误代码枚举 &lt;code&gt;e&lt;/code&gt; 构造错误代码。等效于 &lt;code&gt;*this = make_error_code(e)&lt;/code&gt; 。仅当 &lt;code&gt;&lt;a href=&quot;is_error_code_enum&quot;&gt;std::is_error_code_enum&lt;/a&gt;&amp;lt;ErrorCodeEnum&amp;gt;::value == true&lt;/code&gt; ，重载才参与重载解决方案。</target>
        </trans-unit>
        <trans-unit id="a3eb138f76af62a7607422b7f4c883c461912cca" translate="yes" xml:space="preserve">
          <source>3) Constructs the &lt;code&gt;wstring_convert&lt;/code&gt; object with a specified conversion facet and specified shift state, using default-constructed values for the error strings</source>
          <target state="translated">3）使用默认构造的错误字符串值，使用指定的转换构面和指定的移位状态构造 &lt;code&gt;wstring_convert&lt;/code&gt; 对象</target>
        </trans-unit>
        <trans-unit id="a33d1d304b0a25cef109d968ef63330daaa9f944" translate="yes" xml:space="preserve">
          <source>3) Constructs the container with &lt;code&gt;count&lt;/code&gt;&lt;a href=&quot;../../named_req/defaultinsertable&quot;&gt;default-inserted&lt;/a&gt; instances of &lt;code&gt;T&lt;/code&gt;. No copies are made.</source>
          <target state="translated">3）用 &lt;code&gt;count&lt;/code&gt; 的&lt;a href=&quot;../../named_req/defaultinsertable&quot;&gt;默认插入&lt;/a&gt;实例 &lt;code&gt;T&lt;/code&gt; 构造容器。没有副本。</target>
        </trans-unit>
        <trans-unit id="830d36d02be6282ca0f8a0acac62fe5e14e68950" translate="yes" xml:space="preserve">
          <source>3) Constructs the distribution with weights in &lt;code&gt;weights&lt;/code&gt;. Effectively calls &lt;code&gt;discrete_distribution(weights.begin(), weights.end())&lt;/code&gt;.  4) Constructs the distribution with &lt;code&gt;count&lt;/code&gt; weights that are generated using function &lt;code&gt;unary_op&lt;/code&gt;. Each of the weights is equal to w.</source>
          <target state="translated">3）用权 &lt;code&gt;weights&lt;/code&gt; 构建分布。有效地调用了 &lt;code&gt;discrete_distribution(weights.begin(), weights.end())&lt;/code&gt; 。4）使用使用函数 &lt;code&gt;unary_op&lt;/code&gt; 生成的 &lt;code&gt;count&lt;/code&gt; 权重构造分布。每个权重等于w。</target>
        </trans-unit>
        <trans-unit id="3cd122753f7c40e2ec55d1daa7ae71573e4c662b" translate="yes" xml:space="preserve">
          <source>3) Constructs the engine and initializes the state by calling &lt;code&gt;s.generate(a, a+n*k)&lt;/code&gt; where a is an array of length n*k and k is ceil(w/32) and then, iteratively for i=-n,...,-1, setting each element of the engine state X</source>
          <target state="translated">3）构造引擎并通过调用 &lt;code&gt;s.generate(a, a+n*k)&lt;/code&gt; 初始化状态，其中a为长度为n * k的数组，k为ceil（w / 32），然后迭代i =- n，...，-1，设置引擎状态X的每个元素</target>
        </trans-unit>
        <trans-unit id="feefcacec5d3c35a3cd07177a9d51f945c665e9c" translate="yes" xml:space="preserve">
          <source>3) Constructs the string with a substring &lt;code&gt;[pos, pos+count)&lt;/code&gt; of &lt;code&gt;other&lt;/code&gt;. If &lt;code&gt;count == npos&lt;/code&gt;, if &lt;code&gt;count&lt;/code&gt; is not specified, or if the requested substring lasts past the end of the string, the resulting substring is &lt;code&gt;[pos, other.size())&lt;/code&gt;.</source>
          <target state="translated">3）构造一个子字符串 &lt;code&gt;[pos, pos+count)&lt;/code&gt; 的 &lt;code&gt;other&lt;/code&gt; 。如果 &lt;code&gt;count == npos&lt;/code&gt; ，如果未指定 &lt;code&gt;count&lt;/code&gt; ，或者所请求的子字符串超过字符串的末尾，则结果子字符串为 &lt;code&gt;[pos, other.size())&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="54929ae13db823098c100ac62d399b341043eb6f" translate="yes" xml:space="preserve">
          <source>3) Constructs the underlying engine with seed sequence &lt;code&gt;seq&lt;/code&gt;. This constructor only participate in overload resolution if &lt;code&gt;Sseq&lt;/code&gt; qualifies as a &lt;a href=&quot;../../../named_req/seedsequence&quot;&gt;SeedSequence&lt;/a&gt;. In particular, this constructor does not participate in overload resolution if &lt;code&gt;Sseq&lt;/code&gt; is implicitly convertible to &lt;code&gt;result_type&lt;/code&gt;.</source>
          <target state="translated">3）用种子序列 &lt;code&gt;seq&lt;/code&gt; 构造基础引擎。此构造只参加重载如果 &lt;code&gt;Sseq&lt;/code&gt; 资格作为一个&lt;a href=&quot;../../../named_req/seedsequence&quot;&gt;SeedSequence&lt;/a&gt;。特别是，如果 &lt;code&gt;Sseq&lt;/code&gt; 可隐式转换为 &lt;code&gt;result_type&lt;/code&gt; ，则此构造方法将不参与重载解析。</target>
        </trans-unit>
        <trans-unit id="7ff9e2d6bae24b89f3f3d60f64fe7f2302f8db90" translate="yes" xml:space="preserve">
          <source>3) Constructs with underlying error code &lt;code&gt;ev&lt;/code&gt; and associated error category &lt;code&gt;ecat&lt;/code&gt;.</source>
          <target state="translated">3）具有基础错误代码 &lt;code&gt;ev&lt;/code&gt; 和相关错误类别 &lt;code&gt;ecat&lt;/code&gt; 的构造。</target>
        </trans-unit>
        <trans-unit id="f812bfcbb7b7abc8f2a249295f4b678a65bf2709" translate="yes" xml:space="preserve">
          <source>3) Conversion that converts pointer-to-derived to pointer-to-base is better than the conversion of pointer-to-derived to pointer-to-void, and conversion of pointer-to-base to void is better than pointer-to-derived to void.</source>
          <target state="translated">3)将指针到派生的转换为指针到基的转换比将指针到派生的转换为指针到空的转换要好,指针到基的转换比指针到派生的转换要好。</target>
        </trans-unit>
        <trans-unit id="e63ec24229261a6479dd28ae8072057c214c2012" translate="yes" xml:space="preserve">
          <source>3) Converting constructor. Initializes each element of the tuple with the corresponding value in &lt;code&gt;&lt;a href=&quot;../forward&quot;&gt;std::forward&lt;/a&gt;&amp;lt;UTypes&amp;gt;(args)&lt;/code&gt;.</source>
          <target state="translated">3）转换构造函数。使用 &lt;code&gt;&lt;a href=&quot;../forward&quot;&gt;std::forward&lt;/a&gt;&amp;lt;UTypes&amp;gt;(args)&lt;/code&gt; 的相应值初始化元组的每个元素。</target>
        </trans-unit>
        <trans-unit id="af805f3b773460453ed30bf0c519ec57ec7edb30" translate="yes" xml:space="preserve">
          <source>3) Converts &lt;code&gt;other&lt;/code&gt; to a &lt;code&gt;std::chrono::sys_time&lt;/code&gt; as if by &lt;code&gt;zone-&amp;gt;to_sys(other)&lt;/code&gt; (where &lt;code&gt;zone&lt;/code&gt; is the non-static data member holding the stored time zone pointer) and assigns the result to the stored time point. The time zone pointer is unchanged. After this call, &lt;code&gt;get_local_time() == other&lt;/code&gt;.</source>
          <target state="translated">3）将 &lt;code&gt;other&lt;/code&gt; 转换为 &lt;code&gt;std::chrono::sys_time&lt;/code&gt; ，就像通过 &lt;code&gt;zone-&amp;gt;to_sys(other)&lt;/code&gt; （其中 &lt;code&gt;zone&lt;/code&gt; 是保存所存储的时区指针的非静态数据成员）一样，并将结果分配给所存储的时间点。时区指针不变。调用之后， &lt;code&gt;get_local_time() == other&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="fb3f848d2885d8f262ac8c726f9425d1c4e86823" translate="yes" xml:space="preserve">
          <source>3) Converts a signed decimal integer to a string with the same content as what &lt;code&gt;&lt;a href=&quot;../../io/c/fprintf&quot;&gt;std::sprintf&lt;/a&gt;(buf, &quot;%lld&quot;, value)&lt;/code&gt; would produce for sufficiently large &lt;code&gt;buf&lt;/code&gt;.</source>
          <target state="translated">3）将带符号的十进制整数转换为与 &lt;code&gt;&lt;a href=&quot;../../io/c/fprintf&quot;&gt;std::sprintf&lt;/a&gt;(buf, &quot;%lld&quot;, value)&lt;/code&gt; 对于足够大的 &lt;code&gt;buf&lt;/code&gt; 而言具有相同内容的字符串。</target>
        </trans-unit>
        <trans-unit id="e75aea4c132f1d76b2355f56c6289278e0523232" translate="yes" xml:space="preserve">
          <source>3) Converts a signed decimal integer to a wide string with the same content as what &lt;code&gt;&lt;a href=&quot;../../io/c/fwprintf&quot;&gt;std::swprintf&lt;/a&gt;(buf, sz, L&quot;%lld&quot;, value)&lt;/code&gt; would produce for sufficiently large &lt;code&gt;buf&lt;/code&gt;.</source>
          <target state="translated">3）将带符号的十进制整数转换为一个宽字符串，其内容与 &lt;code&gt;&lt;a href=&quot;../../io/c/fwprintf&quot;&gt;std::swprintf&lt;/a&gt;(buf, sz, L&quot;%lld&quot;, value)&lt;/code&gt; 对于足够大的 &lt;code&gt;buf&lt;/code&gt; 所产生的内容相同。</target>
        </trans-unit>
        <trans-unit id="dd8f5032db43607915e0d96906bf3d79af6eb796" translate="yes" xml:space="preserve">
          <source>3) Converts the (possibly wide) character &lt;code&gt;c&lt;/code&gt; to multibyte representation if the character can be represented with a single byte (for example, ASCII characters in UTF-8 encoding are single bytes). Returns &lt;code&gt;dflt&lt;/code&gt; if such conversion does not exist.</source>
          <target state="translated">3）如果可以用单个字节表示字符（例如，UTF-8编码的ASCII字符是单个字节），则将（可能是宽的）字符 &lt;code&gt;c&lt;/code&gt; 转换为多字节表示。如果这种转换不存在，则返回 &lt;code&gt;dflt&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="31f9446d0d45d092b3886a9085482b5ea7b4f82b" translate="yes" xml:space="preserve">
          <source>3) Converts the calendar date and time stored in the &lt;code&gt;&lt;a href=&quot;../../chrono/c/tm&quot;&gt;std::tm&lt;/a&gt;&lt;/code&gt; object pointed to by &lt;code&gt;t&lt;/code&gt; into a character string, according to the format conversion sequence formed by concatenating &lt;code&gt;'%'&lt;/code&gt;, the value of &lt;code&gt;modifier&lt;/code&gt; if not &lt;code&gt;'\0'&lt;/code&gt;, and the value of &lt;code&gt;format&lt;/code&gt;. The format is interpreted the same way as the function &lt;code&gt;&lt;a href=&quot;../../chrono/c/strftime&quot;&gt;std::strftime&lt;/a&gt;&lt;/code&gt;, except that the formats that are described as locale-dependent are defined by this locale, and additional format specifiers may be supported (the &lt;code&gt;fill&lt;/code&gt; argument is provided for these implementation-defined format specifiers to use). The string is written to the output iterator &lt;code&gt;out&lt;/code&gt;.</source>
          <target state="translated">3）将存储在日历的日期和时间 &lt;code&gt;&lt;a href=&quot;../../chrono/c/tm&quot;&gt;std::tm&lt;/a&gt;&lt;/code&gt; 对象指向 &lt;code&gt;t&lt;/code&gt; 成字符串，根据通过连接形成的格式转换序列 &lt;code&gt;'%'&lt;/code&gt; ，的值 &lt;code&gt;modifier&lt;/code&gt; 如果不是 &lt;code&gt;'\0'&lt;/code&gt; ，和 &lt;code&gt;format&lt;/code&gt; 的值。格式与功能 &lt;code&gt;&lt;a href=&quot;../../chrono/c/strftime&quot;&gt;std::strftime&lt;/a&gt;&lt;/code&gt; 解释方式相同，除了描述为与语言环境相关的格式由该语言环境定义，并且可以支持其他格式说明符（为这些实现定义的属性提供 &lt;code&gt;fill&lt;/code&gt; 参数）格式说明符）。该字符串将写入输出迭代器 &lt;code&gt;out&lt;/code&gt; 中。</target>
        </trans-unit>
        <trans-unit id="d88e37ff7b6eb3524e059b8810e273e70057345d" translate="yes" xml:space="preserve">
          <source>3) Converts the character &lt;code&gt;c&lt;/code&gt; to lower case if a lower case form is defined by this locale.</source>
          <target state="translated">3）如果此语言环境定义了小写形式，则将字符 &lt;code&gt;c&lt;/code&gt; 转换为小写。</target>
        </trans-unit>
        <trans-unit id="1d53e1f3c14ea87c07a93345c0b40052af556c2d" translate="yes" xml:space="preserve">
          <source>3) Converts the character &lt;code&gt;c&lt;/code&gt; to upper case if an upper case form is defined by this locale.</source>
          <target state="translated">3）如果此语言环境定义了大写形式，则将字符 &lt;code&gt;c&lt;/code&gt; 转换为大写。</target>
        </trans-unit>
        <trans-unit id="367ceb3385c6acfacdbf505e5a4a5dd25e4edee3" translate="yes" xml:space="preserve">
          <source>3) Converts the narrow string &lt;code&gt;str&lt;/code&gt; to wide_string.</source>
          <target state="translated">3）将窄字符串 &lt;code&gt;str&lt;/code&gt; 转换为wide_string。</target>
        </trans-unit>
        <trans-unit id="61921ae71470ece8e99faa506a905265438537f8" translate="yes" xml:space="preserve">
          <source>3) Converts the single-byte character &lt;code&gt;c&lt;/code&gt; to the corresponding wide character representation using the simplest reasonable transformation. Typically, this applies only to the characters whose multibyte encoding is a single byte (e.g. U+0000-U+007F in UTF-8).</source>
          <target state="translated">3）使用最简单的合理转换将单字节字符 &lt;code&gt;c&lt;/code&gt; 转换为相应的宽字符表示形式。通常，这仅适用于多字节编码为单个字节的字符（例如UTF-8中的U + 0000-U + 007F）。</target>
        </trans-unit>
        <trans-unit id="31c2af87cdf387057c1ad476332cd7f87f9f25b9" translate="yes" xml:space="preserve">
          <source>3) Converts the wide string &lt;code&gt;str&lt;/code&gt; to &lt;code&gt;byte_string&lt;/code&gt;.</source>
          <target state="translated">3）将宽字符串 &lt;code&gt;str&lt;/code&gt; 转换为 &lt;code&gt;byte_string&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="68e37c01f15885010341eed1f8525729244327e1" translate="yes" xml:space="preserve">
          <source>3) Copies a &lt;code&gt;regex_iterator&lt;/code&gt;.</source>
          <target state="translated">3）复制一个 &lt;code&gt;regex_iterator&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="9a6178933fbb19c7258b289edd5b4e450a3bbb69" translate="yes" xml:space="preserve">
          <source>3) Copy constructor is deleted.</source>
          <target state="translated">3)复制构造函数被删除。</target>
        </trans-unit>
        <trans-unit id="96208b9a778d7b0bcebef2b7c7aff7a8dc5a3deb" translate="yes" xml:space="preserve">
          <source>3) Copy constructor. Constructs the container with the copy of the contents of &lt;code&gt;other&lt;/code&gt;. If &lt;code&gt;alloc&lt;/code&gt; is not provided, allocator is obtained by calling &lt;code&gt;&lt;a href=&quot;../../memory/allocator_traits&quot;&gt;std::allocator_traits&lt;/a&gt;&amp;lt;allocator_type&amp;gt;::select_on_container_copy_construction(other.get_allocator())&lt;/code&gt;.</source>
          <target state="translated">3）复制构造函数。用 &lt;code&gt;other&lt;/code&gt; 的内容的副本构造容器。如果未提供 &lt;code&gt;alloc&lt;/code&gt; ，则通过调用 &lt;code&gt;&lt;a href=&quot;../../memory/allocator_traits&quot;&gt;std::allocator_traits&lt;/a&gt;&amp;lt;allocator_type&amp;gt;::select_on_container_copy_construction(other.get_allocator())&lt;/code&gt; 获得分配器。</target>
        </trans-unit>
        <trans-unit id="c55c22645cc620c02a81fb5ca61445338606b562" translate="yes" xml:space="preserve">
          <source>3) Copy-constructor. Constructs a match result with a copy of &lt;code&gt;rhs&lt;/code&gt;.</source>
          <target state="translated">3）复制构造函数。使用 &lt;code&gt;rhs&lt;/code&gt; 的副本构造匹配结果。</target>
        </trans-unit>
        <trans-unit id="efdb897683cf7111b40201a35236bb4fe024dc9f" translate="yes" xml:space="preserve">
          <source>3) Copy-constructor: initializes each allocator from the corresponding allocator of &lt;code&gt;other&lt;/code&gt;.</source>
          <target state="translated">3）Copy-constructor：从 &lt;code&gt;other&lt;/code&gt; 的对应分配器初始化每个分配器。</target>
        </trans-unit>
        <trans-unit id="a026ea4ae7c67343b1a2c863b4606ed80bd8ed23" translate="yes" xml:space="preserve">
          <source>3) Copy-constructs the underlying container &lt;code&gt;c&lt;/code&gt; with the contents of &lt;code&gt;cont&lt;/code&gt;. Copy-constructs the comparison functor &lt;code&gt;comp&lt;/code&gt; with the contents of &lt;code&gt;compare&lt;/code&gt;. Calls &lt;code&gt;&lt;a href=&quot;../../algorithm/make_heap&quot;&gt;std::make_heap&lt;/a&gt;(c.begin(), c.end(), comp)&lt;/code&gt;.  This is also the default constructor.(until C++11)</source>
          <target state="translated">3）使用 &lt;code&gt;cont&lt;/code&gt; 的内容复制构造基础容器 &lt;code&gt;c&lt;/code&gt; 。用 &lt;code&gt;compare&lt;/code&gt; 的内容复制构造比较函子 &lt;code&gt;comp&lt;/code&gt; 。调用 &lt;code&gt;&lt;a href=&quot;../../algorithm/make_heap&quot;&gt;std::make_heap&lt;/a&gt;(c.begin(), c.end(), comp)&lt;/code&gt; （c.begin（），c.end（），comp）。这也是默认的构造函数。（直到C ++ 11）</target>
        </trans-unit>
        <trans-unit id="256485a8519f254b2dc39000e98b72eb990ce7ed" translate="yes" xml:space="preserve">
          <source>3) Creates an optional object constructed in-place from &lt;code&gt;il&lt;/code&gt; and &lt;code&gt;args...&lt;/code&gt;. Equivalent to &lt;code&gt;return &lt;a href=&quot;../optional&quot;&gt;std::optional&lt;/a&gt;&amp;lt;T&amp;gt;(&lt;a href=&quot;../in_place&quot;&gt;std::in_place&lt;/a&gt;, il, &lt;a href=&quot;../forward&quot;&gt;std::forward&lt;/a&gt;&amp;lt;Args&amp;gt;(args)...);&lt;/code&gt;.</source>
          <target state="translated">3）创建一个从 &lt;code&gt;il&lt;/code&gt; 和 &lt;code&gt;args...&lt;/code&gt; 就地构造的可选对象。等效于 &lt;code&gt;return &lt;a href=&quot;../optional&quot;&gt;std::optional&lt;/a&gt;&amp;lt;T&amp;gt;(&lt;a href=&quot;../in_place&quot;&gt;std::in_place&lt;/a&gt;, il, &lt;a href=&quot;../forward&quot;&gt;std::forward&lt;/a&gt;&amp;lt;Args&amp;gt;(args)...);&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="7aa2dd3231d1498c19cd0271b11d4ff43cd4ac9a" translate="yes" xml:space="preserve">
          <source>3) Creates new &lt;code&gt;std::thread&lt;/code&gt; object and associates it with a thread of execution. The new thread of execution starts executing</source>
          <target state="translated">3）创建一个新的 &lt;code&gt;std::thread&lt;/code&gt; 对象，并将其与执行线程相关联。新的执行线程开始执行</target>
        </trans-unit>
        <trans-unit id="3624e9fc407de6e033f497636094f84ab9eb4ab4" translate="yes" xml:space="preserve">
          <source>3) Declares an unnamed parameter</source>
          <target state="translated">3)声明一个未命名的参数。</target>
        </trans-unit>
        <trans-unit id="82314d8e4577e9e1f4378af06c54f895d00398d2" translate="yes" xml:space="preserve">
          <source>3) Defaulted move constructor.</source>
          <target state="translated">3)默认的移动构造函数。</target>
        </trans-unit>
        <trans-unit id="08f8f359c5d1c597a7e97c802c134f8992f03134" translate="yes" xml:space="preserve">
          <source>3) Defines an</source>
          <target state="translated">3)定义了一个</target>
        </trans-unit>
        <trans-unit id="0bcda4427e20520699a650963f66ff8713a2c96d" translate="yes" xml:space="preserve">
          <source>3) Deleted default constructor: if it is selected by &lt;a href=&quot;overload_resolution&quot;&gt;overload resolution&lt;/a&gt;, the program fails to compile.</source>
          <target state="translated">3）删除默认构造函数：如果通过&lt;a href=&quot;overload_resolution&quot;&gt;重载分辨率&lt;/a&gt;选择它，则程序将无法编译。</target>
        </trans-unit>
        <trans-unit id="c8c622798603707f70de1bc37982045bcd4b7a94" translate="yes" xml:space="preserve">
          <source>3) Deriving from &lt;code&gt;view_base&lt;/code&gt; enables &lt;a href=&quot;range&quot;&gt;&lt;code&gt;Range&lt;/code&gt;&lt;/a&gt; types to model &lt;code&gt;&lt;a href=&quot;../range/view&quot;&gt;View&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">3）从 &lt;code&gt;view_base&lt;/code&gt; 派生可将&lt;a href=&quot;range&quot;&gt; &lt;code&gt;Range&lt;/code&gt; &lt;/a&gt;类型建模为 &lt;code&gt;&lt;a href=&quot;../range/view&quot;&gt;View&lt;/a&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="d760507a71a3d976887ec24433ae871eb44095f6" translate="yes" xml:space="preserve">
          <source>3) Designates the class, struct, or union named by the elaborated-class-specifier (see &lt;a href=&quot;elaborated_type_specifier&quot;&gt;elaborated type specifier&lt;/a&gt;) as a friend of this class. This means that the friend's member declarations and definitions can access private and protected members of this class and also that the friend can inherit from private and protected members of this class. The name of the class that is used in this friend declaration does not need to be previously declared.</source>
          <target state="translated">3）指定由elaborated-class-specifier（请参见&lt;a href=&quot;elaborated_type_specifier&quot;&gt;elaborated类型说明符&lt;/a&gt;）命名的类，结构或联合作为此类的朋友。这意味着好友的成员声明和定义可以访问此类的私有和受保护成员，并且好友可以从此类的私有和受保护成员继承。无需事先声明此好友声明中使用的类的名称。</target>
        </trans-unit>
        <trans-unit id="b69a0016830c846f181b39dcd147ee1a295aed28" translate="yes" xml:space="preserve">
          <source>3) Determines whether &lt;code&gt;Fn&lt;/code&gt; is callable with the arguments &lt;code&gt;ArgTypes...&lt;/code&gt; (same as (1)), and that such call is known not to throw any exceptions.</source>
          <target state="translated">3）确定 &lt;code&gt;Fn&lt;/code&gt; 是否可通过参数 &lt;code&gt;ArgTypes...&lt;/code&gt; （与（1）相同）进行调用，并且已知此类调用不会引发任何异常。</target>
        </trans-unit>
        <trans-unit id="85f4c27522c0349d0ae6adbeefa55004d2b19d37" translate="yes" xml:space="preserve">
          <source>3) Directly from within the body of a member function of X</source>
          <target state="translated">3)直接从X的某一成员函数的主体内部出发</target>
        </trans-unit>
        <trans-unit id="6d2317fc5f8f9714149de99823ef08e6b0ec3451" translate="yes" xml:space="preserve">
          <source>3) Drops the current</source>
          <target state="translated">3)掉落当前的</target>
        </trans-unit>
        <trans-unit id="371ba3aa6758a6944bc9b3944af0b40ae779e73b" translate="yes" xml:space="preserve">
          <source>3) Each comment is replaced by one space character.</source>
          <target state="translated">3)每条评论用一个空格字符代替。</target>
        </trans-unit>
        <trans-unit id="358db00ca9b7b7ee0f23a4c02934608814d1a665" translate="yes" xml:space="preserve">
          <source>3) Effectively calls &lt;code&gt;reset(m.release())&lt;/code&gt;. &lt;code&gt;auto_ptr_ref&lt;/code&gt; is an implementation-defined type that holds a reference to &lt;code&gt;auto_ptr&lt;/code&gt;. &lt;code&gt;&lt;a href=&quot;../auto_ptr&quot;&gt;std::auto_ptr&lt;/a&gt;&lt;/code&gt; is implicitly &lt;a href=&quot;operator_auto_ptr&quot;&gt;convertible to&lt;/a&gt; and &lt;a href=&quot;auto_ptr&quot;&gt;from&lt;/a&gt; this type. The implementation is allowed to provide the template with a different name or implement equivalent functionality in other ways.</source>
          <target state="translated">3）有效地调用 &lt;code&gt;reset(m.release())&lt;/code&gt; 。 &lt;code&gt;auto_ptr_ref&lt;/code&gt; 是实现定义的类型，其中包含对 &lt;code&gt;auto_ptr&lt;/code&gt; 的引用。 &lt;code&gt;&lt;a href=&quot;../auto_ptr&quot;&gt;std::auto_ptr&lt;/a&gt;&lt;/code&gt; 是隐式&lt;a href=&quot;operator_auto_ptr&quot;&gt;转换为&lt;/a&gt;和&lt;a href=&quot;auto_ptr&quot;&gt;从&lt;/a&gt;这种类型。允许实现为模板提供不同的名称或以其他方式实现等效功能。</target>
        </trans-unit>
        <trans-unit id="ea208722e0a45d69241102c67a42ab1b3451dbab" translate="yes" xml:space="preserve">
          <source>3) Elements are compared using the given binary comparison function &lt;code&gt;comp&lt;/code&gt; and the ranges must be sorted with respect to the same.</source>
          <target state="translated">3）使用给定的二进制比较函数 &lt;code&gt;comp&lt;/code&gt; 对元素进行比较，并且必须对范围进行排序。</target>
        </trans-unit>
        <trans-unit id="5d22482345876679aa9fdfb5d7b06e47e4ef8653" translate="yes" xml:space="preserve">
          <source>3) Elements are compared using the given binary comparison function &lt;code&gt;comp&lt;/code&gt;.</source>
          <target state="translated">3）使用给定的二进制比较函数 &lt;code&gt;comp&lt;/code&gt; 来比较元素。</target>
        </trans-unit>
        <trans-unit id="59b37effce3cec5b869a56a3839a873a040b696e" translate="yes" xml:space="preserve">
          <source>3) Elements are compared using the given binary predicate &lt;code&gt;p&lt;/code&gt;.</source>
          <target state="translated">3）使用给定的二进制谓词 &lt;code&gt;p&lt;/code&gt; 比较元素。</target>
        </trans-unit>
        <trans-unit id="17053674bbf2a8299fe18a28822bedb78c3e43d2" translate="yes" xml:space="preserve">
          <source>3) Elements are compared using the given binary predicate &lt;code&gt;p&lt;/code&gt;. The behavior is undefined if it is not an equivalence relation.</source>
          <target state="translated">3）使用给定的二进制谓词 &lt;code&gt;p&lt;/code&gt; 比较元素。如果行为不是等价关系，则该行为是不确定的。</target>
        </trans-unit>
        <trans-unit id="91ebae6040c235a28005697223fcadfa976d1c3f" translate="yes" xml:space="preserve">
          <source>3) Elements are compared using the given comparison function &lt;code&gt;comp&lt;/code&gt;.</source>
          <target state="translated">3）使用给定的比较函数 &lt;code&gt;comp&lt;/code&gt; 来比较元素。</target>
        </trans-unit>
        <trans-unit id="e6cf8873670f23aba3147d8e63b8ec2ca7a42a6a" translate="yes" xml:space="preserve">
          <source>3) Empty condition is equivalent to &lt;code&gt;while(true)&lt;/code&gt;</source>
          <target state="translated">3）空条件等于 &lt;code&gt;while(true)&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="febe29958b978cc0b5ed698897c04c8f1c90ad59" translate="yes" xml:space="preserve">
          <source>3) Equivalent to &lt;code&gt;*this = *this - dy;&lt;/code&gt;</source>
          <target state="translated">3）等效于 &lt;code&gt;*this = *this - dy;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="55215fb0ae7aa1bda84ea52ce0fbe8b05b033324" translate="yes" xml:space="preserve">
          <source>3) Equivalent to &lt;code&gt;--d_; return *this;&lt;/code&gt;</source>
          <target state="translated">3）相当于 &lt;code&gt;--d_; return *this;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="dfeae69bb12877f410f2084a8a1fec7071220c90" translate="yes" xml:space="preserve">
          <source>3) Equivalent to &lt;code&gt;--rep_; return *this;&lt;/code&gt;</source>
          <target state="translated">3）等效于 &lt;code&gt;--rep_; return *this;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="28ad7cdc9d8ad0b552ad9519fa54146bb4fbd6db" translate="yes" xml:space="preserve">
          <source>3) Equivalent to &lt;code&gt;compare(path(s))&lt;/code&gt;.</source>
          <target state="translated">3）等效于 &lt;code&gt;compare(path(s))&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="c1b42a201ef2b69b394c723dc2226ee5d29f1161" translate="yes" xml:space="preserve">
          <source>3) Equivalent to &lt;code&gt;construct(p, &lt;a href=&quot;../../utility/piecewise_construct&quot;&gt;std::piecewise_construct&lt;/a&gt;, &lt;a href=&quot;../../utility/tuple&quot;&gt;std::tuple&lt;/a&gt;&amp;lt;&amp;gt;(), &lt;a href=&quot;../../utility/tuple&quot;&gt;std::tuple&lt;/a&gt;&amp;lt;&amp;gt;())&lt;/code&gt;, that is, passes the inner allocator on to the pair's member types if they accept them. 4) Equivalent to</source>
          <target state="translated">3）等效于 &lt;code&gt;construct(p, &lt;a href=&quot;../../utility/piecewise_construct&quot;&gt;std::piecewise_construct&lt;/a&gt;, &lt;a href=&quot;../../utility/tuple&quot;&gt;std::tuple&lt;/a&gt;&amp;lt;&amp;gt;(), &lt;a href=&quot;../../utility/tuple&quot;&gt;std::tuple&lt;/a&gt;&amp;lt;&amp;gt;())&lt;/code&gt; ，也就是说，如果内部分配器接受该对成员类型，则将它们传递给它们。4）相当于</target>
        </trans-unit>
        <trans-unit id="ca271bc27bb8474ab419c4adc63a86f71a080cc3" translate="yes" xml:space="preserve">
          <source>3) Equivalent to &lt;code&gt;find(basic_string_view(s, count), pos)&lt;/code&gt;.</source>
          <target state="translated">3）等效于 &lt;code&gt;find(basic_string_view(s, count), pos)&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="518e357748186b4bbd10dce6b0caf559889d1367" translate="yes" xml:space="preserve">
          <source>3) Equivalent to &lt;code&gt;find_first_not_of(basic_string_view(s, count), pos)&lt;/code&gt;.</source>
          <target state="translated">3）等效于 &lt;code&gt;find_first_not_of(basic_string_view(s, count), pos)&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="689eda5bae81027f2f599a002893efef293ed99e" translate="yes" xml:space="preserve">
          <source>3) Equivalent to &lt;code&gt;find_first_of(basic_string_view(s, count), pos)&lt;/code&gt;.</source>
          <target state="translated">3）等效于 &lt;code&gt;find_first_of(basic_string_view(s, count), pos)&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="d655f76faa2a47414ae96366af6b3d45d8678096" translate="yes" xml:space="preserve">
          <source>3) Equivalent to &lt;code&gt;find_last_not_of(basic_string_view(s, count), pos)&lt;/code&gt;.</source>
          <target state="translated">3）等效于 &lt;code&gt;find_last_not_of(basic_string_view(s, count), pos)&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="94546a75c6157c8961a1d464fa70fbf18c1722ef" translate="yes" xml:space="preserve">
          <source>3) Equivalent to &lt;code&gt;find_last_of(basic_string_view(s, count), pos)&lt;/code&gt;.</source>
          <target state="translated">3）等效于 &lt;code&gt;find_last_of(basic_string_view(s, count), pos)&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="f2c9d9a6578fab3a1310fb014e51bb73b63b4a8a" translate="yes" xml:space="preserve">
          <source>3) Equivalent to &lt;code&gt;rep_ *= rhs; return *this;&lt;/code&gt;</source>
          <target state="translated">3）等效于 &lt;code&gt;rep_ *= rhs; return *this;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="b1f2c02c0a848dd1986f1a6b291721df46d46019" translate="yes" xml:space="preserve">
          <source>3) Equivalent to &lt;code&gt;rfind(basic_string_view(s, count), pos)&lt;/code&gt;.</source>
          <target state="translated">3）等效于 &lt;code&gt;rfind(basic_string_view(s, count), pos)&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="7e4ac87b75bbf9fe4e9f8ec0af038f5fdcb3e071" translate="yes" xml:space="preserve">
          <source>3) Equivalent to &lt;code&gt;substr(pos1, count1).compare(v.substr(pos2, count2))&lt;/code&gt;.</source>
          <target state="translated">3）等效于 &lt;code&gt;substr(pos1, count1).compare(v.substr(pos2, count2))&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="1c29ecc183143b7582767ac6c6b23b3d8ccc95ae" translate="yes" xml:space="preserve">
          <source>3) Equivalent to multiple alignas specifiers applied to the same declaration, one for each member of the &lt;a href=&quot;parameter_pack&quot;&gt;parameter pack&lt;/a&gt;, which can be either type or non-type parameter pack.</source>
          <target state="translated">3）等效于应用于同一声明的多个alignas声明符，每个&lt;a href=&quot;parameter_pack&quot;&gt;参数包&lt;/a&gt;成员一个，可以是类型参数包或非类型参数包。</target>
        </trans-unit>
        <trans-unit id="c2846db01371a2675f89c2fdde8bf5ebf2aaa44e" translate="yes" xml:space="preserve">
          <source>3) Equivalent to: &lt;code&gt;return compare_exchange_strong(expected, desired, order, fail_order);&lt;/code&gt;, where &lt;code&gt;fail_order&lt;/code&gt; is the same as &lt;code&gt;order&lt;/code&gt; except that &lt;code&gt;std:memory_order_acq_rel&lt;/code&gt; is replaced by &lt;code&gt;&lt;a href=&quot;../../atomic/memory_order&quot;&gt;std::memory_order_acquire&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;../../atomic/memory_order&quot;&gt;std::memory_order_release&lt;/a&gt;&lt;/code&gt; is replaced by &lt;code&gt;&lt;a href=&quot;../../atomic/memory_order&quot;&gt;std::memory_order_relaxed&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">3）等效于： &lt;code&gt;return compare_exchange_strong(expected, desired, order, fail_order);&lt;/code&gt; 其中 &lt;code&gt;fail_order&lt;/code&gt; 相同 &lt;code&gt;order&lt;/code&gt; 不同之处在于 &lt;code&gt;std:memory_order_acq_rel&lt;/code&gt; 被替换 &lt;code&gt;&lt;a href=&quot;../../atomic/memory_order&quot;&gt;std::memory_order_acquire&lt;/a&gt;&lt;/code&gt; 和 &lt;code&gt;&lt;a href=&quot;../../atomic/memory_order&quot;&gt;std::memory_order_release&lt;/a&gt;&lt;/code&gt; 被替换 &lt;code&gt;&lt;a href=&quot;../../atomic/memory_order&quot;&gt;std::memory_order_relaxed&lt;/a&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="300e574cb8d2b13ad4d80db6cdaab7e7dd27c5a7" translate="yes" xml:space="preserve">
          <source>3) Equivalent to: &lt;code&gt;return l = l ^ r;&lt;/code&gt;.</source>
          <target state="translated">3）等效于： &lt;code&gt;return l = l ^ r;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="c7f58ee1cc15a004eaa02255565eae7753771767" translate="yes" xml:space="preserve">
          <source>3) Equivalent to: &lt;code&gt;return std::byte(static_cast&amp;lt;unsigned int&amp;gt;(l) ^ static_cast&amp;lt;unsigned int&amp;gt;(r));&lt;/code&gt;.</source>
          <target state="translated">3）等效于： &lt;code&gt;return std::byte(static_cast&amp;lt;unsigned int&amp;gt;(l) ^ static_cast&amp;lt;unsigned int&amp;gt;(r));&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="7ae59c372c71c2577a6a605eb96f49235932b16a" translate="yes" xml:space="preserve">
          <source>3) Executes (1) for every element of &lt;code&gt;p&lt;/code&gt; that does not already exist. If &lt;code&gt;p&lt;/code&gt; already exists, the function does nothing (this condition is not treated as an error).</source>
          <target state="translated">3） &lt;code&gt;p&lt;/code&gt; 尚不存在的p的每个元素执行（1）。如果 &lt;code&gt;p&lt;/code&gt; 已经存在，则该函数不执行任何操作（此情况不会被视为错误）。</target>
        </trans-unit>
        <trans-unit id="c5b2efd0c240c794cc63ccee8608aa8fa2795f22" translate="yes" xml:space="preserve">
          <source>3) Explicit instantiation declaration (without template argument deduction if every non-default template parameter is explicitly specified)</source>
          <target state="translated">3)显式实例化声明(如果每一个非默认模板参数都是显式指定的,则不需要模板参数推导。</target>
        </trans-unit>
        <trans-unit id="da06a15019c259b377c2872d2d85209978de2728" translate="yes" xml:space="preserve">
          <source>3) Extracts characters from &lt;code&gt;in&lt;/code&gt; and appends them to &lt;code&gt;s&lt;/code&gt;, except that whenever an &lt;code&gt;escape&lt;/code&gt; character is extracted, it is ignored and the next character is appended to &lt;code&gt;s&lt;/code&gt;. Extraction stops when &lt;code&gt;!in==true&lt;/code&gt; or when an unescaped &lt;code&gt;delim&lt;/code&gt; character is found.</source>
          <target state="translated">3）从 &lt;code&gt;in&lt;/code&gt; 中提取字符并将它们附加到 &lt;code&gt;s&lt;/code&gt; 上，除了每当提取 &lt;code&gt;escape&lt;/code&gt; 字符时，它将被忽略并将下一个字符附加到 &lt;code&gt;s&lt;/code&gt; 上。当 &lt;code&gt;!in==true&lt;/code&gt; 或找到未转义的 &lt;code&gt;delim&lt;/code&gt; 字符时，提取将停止。</target>
        </trans-unit>
        <trans-unit id="5fba60a745b100066e65b0f865c19e1368649f58" translate="yes" xml:space="preserve">
          <source>3) Finds the first character equal to none of characters in character string pointed to by &lt;code&gt;s&lt;/code&gt;. The length of the string is determined by the first null character using &lt;code&gt;Traits::length(s)&lt;/code&gt;.</source>
          <target state="translated">3）查找第一个字符，该字符不等于 &lt;code&gt;s&lt;/code&gt; 指向的字符串中的任何字符。字符串的长度由第一个空字符使用 &lt;code&gt;Traits::length(s)&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="743c48cacd7f806bd5330d71c1fe59f65526abaa" translate="yes" xml:space="preserve">
          <source>3) Finds the first character equal to one of the characters in character string pointed to by &lt;code&gt;s&lt;/code&gt;. The length of the string is determined by the first null character using &lt;code&gt;Traits::length(s)&lt;/code&gt;.</source>
          <target state="translated">3）找到等于 &lt;code&gt;s&lt;/code&gt; 指向的字符串中的一个字符的第一个字符。字符串的长度由第一个空字符使用 &lt;code&gt;Traits::length(s)&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="1c4f9369d9aa41e3c2e70caf678cef11bd5c59bc" translate="yes" xml:space="preserve">
          <source>3) Finds the first substring equal to the character string pointed to by &lt;code&gt;s&lt;/code&gt;. The length of the string is determined by the first null character using &lt;code&gt;Traits::length(s)&lt;/code&gt;.</source>
          <target state="translated">3）查找等于 &lt;code&gt;s&lt;/code&gt; 指向的字符串的第一个子字符串。字符串的长度由第一个空字符使用 &lt;code&gt;Traits::length(s)&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="5f47c71c2880d2fbd432e526b56eb61b5a06792b" translate="yes" xml:space="preserve">
          <source>3) Finds the last character equal to none of characters in character string pointed to by &lt;code&gt;s&lt;/code&gt;. The length of the string is determined by the first null character using &lt;code&gt;Traits::length(s)&lt;/code&gt;.</source>
          <target state="translated">3）查找不等于 &lt;code&gt;s&lt;/code&gt; 指向的字符串中所有字符的最后一个字符。字符串的长度由第一个空字符使用 &lt;code&gt;Traits::length(s)&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="81dc74e59e430cbc397dc6041420bcec0328bf2d" translate="yes" xml:space="preserve">
          <source>3) Finds the last character equal to one of characters in character string pointed to by &lt;code&gt;s&lt;/code&gt;. The length of the string is determined by the first null character using &lt;code&gt;Traits::length(s)&lt;/code&gt;.</source>
          <target state="translated">3）查找等于 &lt;code&gt;s&lt;/code&gt; 指向的字符串中的一个字符的最后一个字符。字符串的长度由第一个空字符使用 &lt;code&gt;Traits::length(s)&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="8de8caf6e440fce8a707b30a798616333911f49f" translate="yes" xml:space="preserve">
          <source>3) Finds the last substring equal to the character string pointed to by &lt;code&gt;s&lt;/code&gt;. The length of the string is determined by the first null character using &lt;code&gt;Traits::length(s)&lt;/code&gt;.</source>
          <target state="translated">3）查找等于 &lt;code&gt;s&lt;/code&gt; 指向的字符串的最后一个子字符串。字符串的长度由第一个空字符使用 &lt;code&gt;Traits::length(s)&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="d8aa0b5faac0679b63d25e5d332bcf8124bbc228" translate="yes" xml:space="preserve">
          <source>3) First, destroys the currently contained value (if any). Then &lt;a href=&quot;../../language/direct_initialization&quot;&gt;direct-initializes&lt;/a&gt; the contained value as if constructing a value of type &lt;code&gt;T_I&lt;/code&gt; with the arguments &lt;code&gt;&lt;a href=&quot;../forward&quot;&gt;std::forward&lt;/a&gt;&amp;lt;Args&amp;gt;(args)...&lt;/code&gt;. If an exception is thrown, &lt;code&gt;*this&lt;/code&gt; may become &lt;a href=&quot;valueless_by_exception&quot;&gt;valueless_by_exception&lt;/a&gt;. This overload only participates in overload resolution if &lt;code&gt;std::is_constructible_v&amp;lt;T_I, Args...&amp;gt;&lt;/code&gt; is &lt;code&gt;true&lt;/code&gt;. The behavior is undefined if &lt;code&gt;I&lt;/code&gt; is not less than &lt;code&gt;sizeof...(Types)&lt;/code&gt;.</source>
          <target state="translated">3）首先，销毁当前包含的值（如果有）。然后&lt;a href=&quot;../../language/direct_initialization&quot;&gt;直接初始化&lt;/a&gt;包含的值， &lt;code&gt;T_I&lt;/code&gt; 使用参数 &lt;code&gt;&lt;a href=&quot;../forward&quot;&gt;std::forward&lt;/a&gt;&amp;lt;Args&amp;gt;(args)...&lt;/code&gt; 构造T_I类型的值一样。如果引发异常，则 &lt;code&gt;*this&lt;/code&gt; 可能成为&lt;a href=&quot;valueless_by_exception&quot;&gt;valueless_by_exception&lt;/a&gt;。仅当 &lt;code&gt;std::is_constructible_v&amp;lt;T_I, Args...&amp;gt;&lt;/code&gt; 为 &lt;code&gt;true&lt;/code&gt; 时，此重载才参与重载解析。如果 &lt;code&gt;I&lt;/code&gt; 不小于 &lt;code&gt;sizeof...(Types)&lt;/code&gt; 则行为是不确定的。</target>
        </trans-unit>
        <trans-unit id="b74c9c6cec2f0fc5a85adb2516f8f8d0411e086f" translate="yes" xml:space="preserve">
          <source>3) For all &lt;code&gt;i&lt;/code&gt;, assigns &lt;code&gt;std::get&amp;lt;i&amp;gt;(other)&lt;/code&gt; to &lt;code&gt;std::get&amp;lt;i&amp;gt;(*this)&lt;/code&gt;.</source>
          <target state="translated">3）对于所有 &lt;code&gt;i&lt;/code&gt; ，将 &lt;code&gt;std::get&amp;lt;i&amp;gt;(other)&lt;/code&gt; 分配给 &lt;code&gt;std::get&amp;lt;i&amp;gt;(*this)&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="fda0586ac2841e1c4bf77f4ed375e08016f88616" translate="yes" xml:space="preserve">
          <source>3) For arguments whose type is a &lt;a href=&quot;class_template&quot;&gt;class template&lt;/a&gt; specialization, in addition to the class rules, the following types are examined and their associated classes and namespaces are added to the set</source>
          <target state="translated">3）对于类型为&lt;a href=&quot;class_template&quot;&gt;类模板&lt;/a&gt;专业化的参数，除类规则外，还将检查以下类型并将其关联的类和名称空间添加到集合中</target>
        </trans-unit>
        <trans-unit id="9a96fde6dc6a721ec123f58887136dd6d5e5bae9" translate="yes" xml:space="preserve">
          <source>3) For user-defined string literals, let &lt;code&gt;str&lt;/code&gt; be the literal without ud-suffix:</source>
          <target state="translated">3）对于用户定义的字符串文字，令 &lt;code&gt;str&lt;/code&gt; 为不带ud-suffix的文字：</target>
        </trans-unit>
        <trans-unit id="ca581ff7dc4b7ab8bca2073141703488dd827412" translate="yes" xml:space="preserve">
          <source>3) Forcing a destructor to be generated by the compiler</source>
          <target state="translated">3)强制编译器生成一个析构器。</target>
        </trans-unit>
        <trans-unit id="a001493f7c64ebd5131c969f057200e92f277664" translate="yes" xml:space="preserve">
          <source>3) Generalized sum of &lt;code&gt;init&lt;/code&gt; and &lt;code&gt;unary_op(*first)&lt;/code&gt;, &lt;code&gt;unary_op(*(first+1))&lt;/code&gt;, ... &lt;code&gt;unary_op(*(last-1))&lt;/code&gt; over &lt;code&gt;binary_op&lt;/code&gt;,</source>
          <target state="translated">3）在 &lt;code&gt;unary_op(*first)&lt;/code&gt; ， &lt;code&gt;init&lt;/code&gt; 和unary_op（* first）， &lt;code&gt;unary_op(*(first+1))&lt;/code&gt; ，... &lt;code&gt;unary_op(*(last-1))&lt;/code&gt; 的 &lt;code&gt;binary_op&lt;/code&gt; 和</target>
        </trans-unit>
        <trans-unit id="ce3eea3f5ef8fb841547136c9dd4631e86f4c26f" translate="yes" xml:space="preserve">
          <source>3) Hexadecimal integer literal (base 16, the first digit is the most significant, the letters 'a' through 'f' represent values (decimal) 10 through 15)</source>
          <target state="translated">3)十六进制整数文字(基数为16,第一个数字是最重要的,字母'a'到'f'代表值(十进制)10到15)。</target>
        </trans-unit>
        <trans-unit id="18e078a9567ad63837bd7d87285b557739f3eebb" translate="yes" xml:space="preserve">
          <source>3) If &lt;code&gt;&lt;a href=&quot;is_constructible&quot;&gt;std::is_nothrow_constructible&lt;/a&gt;&amp;lt;T&amp;gt;::value&lt;/code&gt; is &lt;code&gt;true&lt;/code&gt;, provides the member constant &lt;code&gt;value&lt;/code&gt; equal to &lt;code&gt;true&lt;/code&gt;, otherwise &lt;code&gt;value&lt;/code&gt; is &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">3）如果 &lt;code&gt;&lt;a href=&quot;is_constructible&quot;&gt;std::is_nothrow_constructible&lt;/a&gt;&amp;lt;T&amp;gt;::value&lt;/code&gt; 为 &lt;code&gt;true&lt;/code&gt; ，则提供等于 &lt;code&gt;true&lt;/code&gt; 的成员常 &lt;code&gt;value&lt;/code&gt; ，否则 &lt;code&gt;value&lt;/code&gt; 为 &lt;code&gt;false&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="e94749bfa4a5a0b79c148b4ca19fb18bb64dba88" translate="yes" xml:space="preserve">
          <source>3) If &lt;code&gt;P&lt;/code&gt; is a class and &lt;code&gt;P&lt;/code&gt; has the form &lt;a href=&quot;templates#template-id&quot;&gt;simple-template-id&lt;/a&gt;, then the transformed &lt;code&gt;A&lt;/code&gt; can be a derived class of the deduced &lt;code&gt;A&lt;/code&gt;. Likewise, if &lt;code&gt;P&lt;/code&gt; is a pointer to a class of the form</source>
          <target state="translated">3）如果 &lt;code&gt;P&lt;/code&gt; 是一个类，并且 &lt;code&gt;P&lt;/code&gt; 具有形式&lt;a href=&quot;templates#template-id&quot;&gt;simple-template-id&lt;/a&gt;，则转换后的 &lt;code&gt;A&lt;/code&gt; 可以是推导的 &lt;code&gt;A&lt;/code&gt; 的派生类。同样，如果 &lt;code&gt;P&lt;/code&gt; 是指向以下形式的类的指针</target>
        </trans-unit>
        <trans-unit id="ef5a440cf5a7d96884abf3428d187a098ad5ef5e" translate="yes" xml:space="preserve">
          <source>3) If &lt;code&gt;P&lt;/code&gt; is a reference type, the type referred to by &lt;code&gt;P&lt;/code&gt; is used for deduction.</source>
          <target state="translated">3）如果 &lt;code&gt;P&lt;/code&gt; 是引用类型，则使用 &lt;code&gt;P&lt;/code&gt; 引用的类型进行推导。</target>
        </trans-unit>
        <trans-unit id="6bc253b23035e64331429769682cb2e482d523c1" translate="yes" xml:space="preserve">
          <source>3) If &lt;code&gt;bool(rhs) == false&lt;/code&gt; returns &lt;code&gt;false&lt;/code&gt;</source>
          <target state="translated">3）如果 &lt;code&gt;bool(rhs) == false&lt;/code&gt; 返回 &lt;code&gt;false&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="1807f237b62d7c0ff529f93d2db801fcd9c690de" translate="yes" xml:space="preserve">
          <source>3) If &lt;code&gt;lhs.first&amp;lt;rhs.first&lt;/code&gt;, returns &lt;code&gt;true&lt;/code&gt;. Otherwise, if &lt;code&gt;rhs.first&amp;lt;lhs.first&lt;/code&gt;, returns &lt;code&gt;false&lt;/code&gt;. Otherwise, if &lt;code&gt;lhs.second&amp;lt;rhs.second&lt;/code&gt;, returns &lt;code&gt;true&lt;/code&gt;. Otherwise, returns &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">3）如果 &lt;code&gt;lhs.first&amp;lt;rhs.first&lt;/code&gt; ，则返回 &lt;code&gt;true&lt;/code&gt; 。否则，如果 &lt;code&gt;rhs.first&amp;lt;lhs.first&lt;/code&gt; ，则返回 &lt;code&gt;false&lt;/code&gt; 。否则，如果 &lt;code&gt;lhs.second&amp;lt;rhs.second&lt;/code&gt; ，则返回 &lt;code&gt;true&lt;/code&gt; 。否则，返回 &lt;code&gt;false&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="67866eea868fe4a8c70c8483deec54f1cc4ac010" translate="yes" xml:space="preserve">
          <source>3) If &lt;code&gt;newoff + off &amp;lt; 0&lt;/code&gt; (the repositioning would move the pointer to before the beginning of the buffer) or if &lt;code&gt;newoff + off&lt;/code&gt; would point past the end of the buffer (or past the last initialized character in the buffer if overallocation is used), the function fails</source>
          <target state="translated">3）如果 &lt;code&gt;newoff + off &amp;lt; 0&lt;/code&gt; （重新定位会将指针移到缓冲区的开始之前），或者如果 &lt;code&gt;newoff + off&lt;/code&gt; 将指向缓冲区的末尾（如果使用了过度分配，则指向缓冲区的最后一个初始化字符） ），功能失败</target>
        </trans-unit>
        <trans-unit id="0df5689e29daebbe75d2f6ac6c767d39a929b0bf" translate="yes" xml:space="preserve">
          <source>3) If &lt;code&gt;newoff + off&lt;/code&gt; is negative or out of bounds of the initialized part of the buffer, the function fails</source>
          <target state="translated">3）如果 &lt;code&gt;newoff + off&lt;/code&gt; 为负或超出缓冲区初始化部分的范围，则该函数失败</target>
        </trans-unit>
        <trans-unit id="19ba36340ed98541145953df41d284633158ec39" translate="yes" xml:space="preserve">
          <source>3) If &lt;code&gt;other&lt;/code&gt; is empty, the constructed object is empty. Otherwise, the constructed object contains either the object contained in &lt;code&gt;other&lt;/code&gt;, or an object of the same type constructed from the object contained in &lt;code&gt;other&lt;/code&gt;, considering that object as an rvalue.</source>
          <target state="translated">3）如果 &lt;code&gt;other&lt;/code&gt; 为空，则构造对象为空。否则，构造的对象将包含 &lt;code&gt;other&lt;/code&gt; 中包含的对象，或从 &lt;code&gt;other&lt;/code&gt; 中包含的对象构造的相同类型的对象（将该对象视为右值）。</target>
        </trans-unit>
        <trans-unit id="cd2aa3e86b06b6154367fb110e80875de0a3964b" translate="yes" xml:space="preserve">
          <source>3) If &lt;code&gt;x.year() != y.year()&lt;/code&gt;, &lt;code&gt;x.year() &amp;lt; y.year()&lt;/code&gt;; otherwise if &lt;code&gt;x.month() != y.month()&lt;/code&gt;, &lt;code&gt;x.month() &amp;lt; y.month()&lt;/code&gt;; otherwise &lt;code&gt;x.day() &amp;lt; y.day()&lt;/code&gt;</source>
          <target state="translated">3）如果 &lt;code&gt;x.year() != y.year()&lt;/code&gt; ， &lt;code&gt;x.year() &amp;lt; y.year()&lt;/code&gt; ; 否则，如果 &lt;code&gt;x.month() != y.month()&lt;/code&gt; ，则 &lt;code&gt;x.month() &amp;lt; y.month()&lt;/code&gt; ；否则 &lt;code&gt;x.day() &amp;lt; y.day()&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="d0b5f4a61ac6473689f8135a405addb4bf6a0345" translate="yes" xml:space="preserve">
          <source>3) If &lt;code&gt;x.year() != y.year()&lt;/code&gt;, &lt;code&gt;x.year() &amp;lt; y.year()&lt;/code&gt;; otherwise, &lt;code&gt;x.month() &amp;lt; y.month()&lt;/code&gt;.</source>
          <target state="translated">3）如果 &lt;code&gt;x.year() != y.year()&lt;/code&gt; ， &lt;code&gt;x.year() &amp;lt; y.year()&lt;/code&gt; ; 否则， &lt;code&gt;x.month() &amp;lt; y.month()&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="91aa1ac09d5fdd2c721db5151ac9be65d3a40a3f" translate="yes" xml:space="preserve">
          <source>3) If a key equivalent to &lt;code&gt;k&lt;/code&gt; already exists in the container, does nothing. Otherwise, behaves like &lt;a href=&quot;emplace_hint&quot;&gt;emplace_hint&lt;/a&gt; except that the element is constructed as &lt;code&gt;value_type(std::piecewise_construct, std::forward_as_tuple(k), std::forward_as_tuple(std::forward&amp;lt;Args&amp;gt;(args)...))&lt;/code&gt;</source>
          <target state="translated">3）如果容器中已经存在等效于 &lt;code&gt;k&lt;/code&gt; 的键，则不执行任何操作。否则，除了元素被构造为 &lt;code&gt;value_type(std::piecewise_construct, std::forward_as_tuple(k), std::forward_as_tuple(std::forward&amp;lt;Args&amp;gt;(args)...))&lt;/code&gt; 之外，其行为类似于&lt;a href=&quot;emplace_hint&quot;&gt;emplace_hint &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="086bb4d0a1b953edf002802349143c605fdb99a8" translate="yes" xml:space="preserve">
          <source>3) If an exception is thrown, the transaction is committed normally.</source>
          <target state="translated">3)如果抛出异常,则事务正常提交。</target>
        </trans-unit>
        <trans-unit id="5af73dfc31bb8d64df3c5724de8db163c310bf9b" translate="yes" xml:space="preserve">
          <source>3) If any argument is a pack expansion, it must be the last argument in the list</source>
          <target state="translated">3)如果任何参数是一个包的扩展,它必须是列表中的最后一个参数。</target>
        </trans-unit>
        <trans-unit id="4748e891646a457897a2c3a6d8280513e474d98e" translate="yes" xml:space="preserve">
          <source>3) If new_type is a pointer or reference to &lt;code&gt;Base&lt;/code&gt;, and the type of expression is a pointer or reference to &lt;code&gt;Derived&lt;/code&gt;, where &lt;code&gt;Base&lt;/code&gt; is a unique, accessible base class of &lt;code&gt;Derived&lt;/code&gt;, the result is a pointer or reference to the &lt;code&gt;Base&lt;/code&gt; class subobject within the &lt;code&gt;Derived&lt;/code&gt; object pointed or identified by expression. (Note: an implicit conversion and &lt;code&gt;static_cast&lt;/code&gt; can perform this conversion as well.)</source>
          <target state="translated">3）如果new_type是指向的指针或引用 &lt;code&gt;Base&lt;/code&gt; ，和表达式的类型是指针或引用 &lt;code&gt;Derived&lt;/code&gt; ，其中 &lt;code&gt;Base&lt;/code&gt; 是一个独特的，可访问的基类的 &lt;code&gt;Derived&lt;/code&gt; ，其结果是一个指针或参考 &lt;code&gt;Base&lt;/code&gt; 内类子对象通过表达式指向或标识的 &lt;code&gt;Derived&lt;/code&gt; 对象。（注意：隐式转换和 &lt;code&gt;static_cast&lt;/code&gt; 也可以执行此转换。）</target>
        </trans-unit>
        <trans-unit id="9e5e61a20823b52cf2d425fddca3543d9f64af78" translate="yes" xml:space="preserve">
          <source>3) If new_type is an rvalue reference type, &lt;code&gt;static_cast&lt;/code&gt; converts the value of glvalue, class prvalue, or array prvalue(until C++17)any lvalue(since C++17)expression to</source>
          <target state="translated">3）如果new_type是右值引用类型，则 &lt;code&gt;static_cast&lt;/code&gt; 会将glvalue，类prvalue或数组prvalue（直到C ++ 17）的任何左值（自C ++ 17开始）表达式的值转换为</target>
        </trans-unit>
        <trans-unit id="9ec4ed623544cdc35eda94b168316c079c5a765d" translate="yes" xml:space="preserve">
          <source>3) If no characters were extracted for whatever reason (not even the discarded delimiter), &lt;code&gt;getline&lt;/code&gt; sets &lt;a href=&quot;../../io/ios_base/iostate&quot;&gt;&lt;code&gt;failbit&lt;/code&gt;&lt;/a&gt; and returns.</source>
          <target state="translated">3）如果出于任何原因（甚至没有丢弃的定界符）都没有提取字符，则 &lt;code&gt;getline&lt;/code&gt; 设置&lt;a href=&quot;../../io/ios_base/iostate&quot;&gt; &lt;code&gt;failbit&lt;/code&gt; &lt;/a&gt;并返回。</target>
        </trans-unit>
        <trans-unit id="1de74d7eeabbd39188b5931c52aa25d198f922c8" translate="yes" xml:space="preserve">
          <source>3) If no specializations match, the primary template is used</source>
          <target state="translated">3)如果没有专业匹配,则使用主模板。</target>
        </trans-unit>
        <trans-unit id="0a80c955f7945b93bfc82dd8cbfbecbc9435ea49" translate="yes" xml:space="preserve">
          <source>3) If one operand is pointer to</source>
          <target state="translated">3)如果一个操作数是指向</target>
        </trans-unit>
        <trans-unit id="df1474025a19d6acd889fb32730262ba99f1d4f7" translate="yes" xml:space="preserve">
          <source>3) If return-type-requirement is present, then:</source>
          <target state="translated">3)如果存在返回类型-要求,则:</target>
        </trans-unit>
        <trans-unit id="80f164dcbf1bf6e176fb4108c247e347c553d841" translate="yes" xml:space="preserve">
          <source>3) If the argument is an unparenthesized &lt;a href=&quot;name&quot;&gt;id-expression&lt;/a&gt; or an unparenthesized &lt;a href=&quot;operator_member_access&quot;&gt;class member access&lt;/a&gt; expression, then decltype yields the type of the entity named by this expression. If there is no such entity, or if the argument names a set of overloaded functions, the program is ill-formed.</source>
          <target state="translated">3）如果参数是未括号化的&lt;a href=&quot;name&quot;&gt;id表达式&lt;/a&gt;或未括号化的&lt;a href=&quot;operator_member_access&quot;&gt;类成员访问&lt;/a&gt;表达式，则decltype会产生该表达式命名的实体的类型。如果没有这样的实体，或者参数指定了一组重载函数，则程序格式错误。</target>
        </trans-unit>
        <trans-unit id="f51692ad66852966d7b1e054dde635a17d3a5a6b" translate="yes" xml:space="preserve">
          <source>3) If the candidate function has more than &lt;code&gt;M&lt;/code&gt; parameters and the &lt;code&gt;M+1&lt;/code&gt;'st parameter and all parameters that follow have default arguments, it is viable. For the rest of overload resolution, the parameter list is truncated at M.</source>
          <target state="translated">3）如果候选函数具有多个 &lt;code&gt;M&lt;/code&gt; 参数，并且第 &lt;code&gt;M+1&lt;/code&gt; 个参数以及其后的所有参数均具有默认参数，则它是可行的。对于其余的过载解决方案，参数列表在M处被截断。</target>
        </trans-unit>
        <trans-unit id="03d0370f5977c4c68bd33fce7688cacef8c7ef93" translate="yes" xml:space="preserve">
          <source>3) If the pointers are pointers to object and represent the same address, they</source>
          <target state="translated">3)如果指针是指向对象的指针,并且代表同一个地址,那么它们是</target>
        </trans-unit>
        <trans-unit id="99be6833ae341b08b300b24b7cd653a2949d68a3" translate="yes" xml:space="preserve">
          <source>3) If the type is a function type F, it is replaced by the type &quot;pointer to F&quot;</source>
          <target state="translated">3)如果类型是函数类型F,则用 &quot;指向F的指针 &quot;类型代替</target>
        </trans-unit>
        <trans-unit id="22721145066de589245fca01eb49ec62017cd25a" translate="yes" xml:space="preserve">
          <source>3) If the value of &lt;code&gt;lexically_relative(base)&lt;/code&gt; is not an empty path, return it. Otherwise return &lt;code&gt;*this&lt;/code&gt;.</source>
          <target state="translated">3）如果 &lt;code&gt;lexically_relative(base)&lt;/code&gt; 的值不是空路径，则将其返回。否则返回 &lt;code&gt;*this&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="119a07d4658a0a6516be001b781bcc4272659c92" translate="yes" xml:space="preserve">
          <source>3) If there are more than one expression in parentheses, new_type must be a class with a suitably declared &lt;a href=&quot;constructor&quot;&gt;constructor&lt;/a&gt;. This expression is a prvalue of type new_typedesignating a temporary(until C++17)whose result object is(since C++17)&lt;a href=&quot;direct_initialization&quot;&gt;direct-initialized&lt;/a&gt; with expressions.</source>
          <target state="translated">3）如果括号中有多个表达式，则new_type必须是具有适当声明的&lt;a href=&quot;constructor&quot;&gt;构造函数的类&lt;/a&gt;。此表达式是new_type类型的prvalue，表示临时（直到C ++ 17），其结果对象（自C ++ 17起）&lt;a href=&quot;direct_initialization&quot;&gt;直接&lt;/a&gt;由表达式初始化。</target>
        </trans-unit>
        <trans-unit id="e60aa24e7bd0dfc16a7572c5c73ae791cffaa4a3" translate="yes" xml:space="preserve">
          <source>3) If, within an object of non-union class type, two pointers point to different non-static data members with the same &lt;a href=&quot;access&quot;&gt;member access&lt;/a&gt;, or to subobjects or array elements of such members, recursively, the pointer to the later declared member</source>
          <target state="translated">3）如果在非统一类类型的对象内，两个指针递归指向具有相同&lt;a href=&quot;access&quot;&gt;成员访问权限的&lt;/a&gt;不同非静态数据成员，或此类成员的子对象或数组元素，则递归地指向后来声明的成员的指针</target>
        </trans-unit>
        <trans-unit id="e58698e166a9caf0503ebde7652c7737d0b733d7" translate="yes" xml:space="preserve">
          <source>3) Ignores all elements for which predicate &lt;code&gt;p&lt;/code&gt; returns &lt;code&gt;true&lt;/code&gt;.</source>
          <target state="translated">3）忽略所有谓词元素 &lt;code&gt;p&lt;/code&gt; 返回 &lt;code&gt;true&lt;/code&gt; 的。</target>
        </trans-unit>
        <trans-unit id="5e51728260b227dbe5a1a22bea06c587fc12f926" translate="yes" xml:space="preserve">
          <source>3) Implements &lt;code&gt;operator&amp;lt;=&lt;/code&gt; in terms of &lt;code&gt;operator&amp;lt;&lt;/code&gt;.</source>
          <target state="translated">3）实现 &lt;code&gt;operator&amp;lt;=&lt;/code&gt; 来讲 &lt;code&gt;operator&amp;lt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="dadd6f16c0b728768b490b7f262229e212a5c803" translate="yes" xml:space="preserve">
          <source>3) In a class definition, &lt;code&gt;final&lt;/code&gt; may appear as class-virt-specifier immediately after the name of the class, just before the colon that begins the base-clause, if used.</source>
          <target state="translated">3）在类定义中， &lt;code&gt;final&lt;/code&gt; 可能在类名之后紧接在开始基本子句的冒号之前显示为class-virt-specifier。</target>
        </trans-unit>
        <trans-unit id="4201ae0917c987e398845110d21d6318890f1e11" translate="yes" xml:space="preserve">
          <source>3) In a function call expression, when the function parameter has reference type</source>
          <target state="translated">3)在函数调用表达式中,当函数参数的引用类型为</target>
        </trans-unit>
        <trans-unit id="ab655fee316e27400bec8121994a361b2d320ee2" translate="yes" xml:space="preserve">
          <source>3) Informs the compiler that multiplication, division, and absolute value of complex numbers may use simplified mathematical formulas (x+iy)&amp;times;(u+iv) = (xu-yv)+i(yu+xv), (x+iy)/(u+iv) = [(xu+yv)+i(yu-xv)]/(u2</source>
          <target state="translated">3）通知编译器复数的乘法，除法和绝对值可以使用简化的数学公式（x + iy）&amp;times;（u + iv）=（xu-yv）+ i（yu + xv），（x + iy ）/（u + iv）= [（xu + yv）+ i（yu-xv）] /（u2</target>
        </trans-unit>
        <trans-unit id="b9bce6884c7af5520b8d268ea7b7f89893834131" translate="yes" xml:space="preserve">
          <source>3) Initializes &lt;code&gt;base_&lt;/code&gt; with &lt;code&gt;view::all(&lt;a href=&quot;../utility/forward&quot;&gt;std::forward&lt;/a&gt;&amp;lt;R&amp;gt;(r))&lt;/code&gt; and initializes &lt;code&gt;pred_&lt;/code&gt; with &lt;code&gt;std::​move(pred)&lt;/code&gt;.</source>
          <target state="translated">3）初始化 &lt;code&gt;base_&lt;/code&gt; 与 &lt;code&gt;view::all(&lt;a href=&quot;../utility/forward&quot;&gt;std::forward&lt;/a&gt;&amp;lt;R&amp;gt;(r))&lt;/code&gt; 和初始化 &lt;code&gt;pred_&lt;/code&gt; 用 &lt;code&gt;std::​move(pred)&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="f6ff8ebdb0b4a588f1d0b70d1c1e4c5e34fd0a1d" translate="yes" xml:space="preserve">
          <source>3) Initializes &lt;code&gt;first&lt;/code&gt; with &lt;code&gt;&lt;a href=&quot;../forward&quot;&gt;std::forward&lt;/a&gt;&amp;lt;U1&amp;gt;(x)&lt;/code&gt; and &lt;code&gt;second&lt;/code&gt; with &lt;code&gt;&lt;a href=&quot;../forward&quot;&gt;std::forward&lt;/a&gt;&amp;lt;U2&amp;gt;(y)&lt;/code&gt;.</source>
          <target state="translated">3）初始化 &lt;code&gt;first&lt;/code&gt; 与 &lt;code&gt;&lt;a href=&quot;../forward&quot;&gt;std::forward&lt;/a&gt;&amp;lt;U1&amp;gt;(x)&lt;/code&gt; 和 &lt;code&gt;second&lt;/code&gt; 与 &lt;code&gt;&lt;a href=&quot;../forward&quot;&gt;std::forward&lt;/a&gt;&amp;lt;U2&amp;gt;(y)&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="040ad719b13d0b757b1cbb72e508c554d548be29" translate="yes" xml:space="preserve">
          <source>3) Initializes &lt;code&gt;value_&lt;/code&gt; with &lt;code&gt;value&lt;/code&gt; and &lt;code&gt;bound_&lt;/code&gt; with &lt;code&gt;bound&lt;/code&gt;. This constructor is used to create bounded iota views, e.g. &lt;code&gt;iota(10, 20)&lt;/code&gt; yields numbers from 10 to 19.</source>
          <target state="translated">3）初始化 &lt;code&gt;value_&lt;/code&gt; 与 &lt;code&gt;value&lt;/code&gt; 和 &lt;code&gt;bound_&lt;/code&gt; 与 &lt;code&gt;bound&lt;/code&gt; 。该构造函数用于创建有界的iota视图，例如 &lt;code&gt;iota(10, 20)&lt;/code&gt; 产生的数字为10到19。</target>
        </trans-unit>
        <trans-unit id="c3c6f0b13c08ef174375cc6daaba8db4923159bb" translate="yes" xml:space="preserve">
          <source>3) Initializes multiple bases using a &lt;a href=&quot;parameter_pack#Base_specifiers_and_member_initializer_lists&quot;&gt;pack expansion&lt;/a&gt;</source>
          <target state="translated">3）使用 &lt;a href=&quot;parameter_pack#Base_specifiers_and_member_initializer_lists&quot;&gt;包扩展&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="de45a418929d5ac281d3dc92cf05db0c626eaab5" translate="yes" xml:space="preserve">
          <source>3) Initializes the error condition with error code &lt;code&gt;val&lt;/code&gt; and error category &lt;code&gt;cat&lt;/code&gt;.</source>
          <target state="translated">3）使用错误代码 &lt;code&gt;val&lt;/code&gt; 和错误类别初始化错误条件 &lt;code&gt;cat&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="45dcae9221ffb9ec9919501350f4a76a243888ac" translate="yes" xml:space="preserve">
          <source>3) Initializes the iterator and stores the value of &lt;code&gt;s&lt;/code&gt; in a data member. If &lt;code&gt;s&lt;/code&gt; is null, then end-of-stream iterator is constructed.</source>
          <target state="translated">3）初始化迭代器，并将 &lt;code&gt;s&lt;/code&gt; 的值存储在数据成员中。如果 &lt;code&gt;s&lt;/code&gt; 为null，则构造流结束迭代器。</target>
        </trans-unit>
        <trans-unit id="44906afb9363eaecfe4cb84873e486483d3b541e" translate="yes" xml:space="preserve">
          <source>3) Inserts the characters in the range &lt;code&gt;[s, s+count)&lt;/code&gt; at the position &lt;code&gt;index&lt;/code&gt;. The range can contain null characters.</source>
          <target state="translated">3）在位置 &lt;code&gt;[s, s+count)&lt;/code&gt; 范围内插入字符 &lt;code&gt;index&lt;/code&gt; 。该范围可以包含空字符。</target>
        </trans-unit>
        <trans-unit id="8b12c6c2ba3cb6246a33014dc234b4fb0cd5c695" translate="yes" xml:space="preserve">
          <source>3) It cannot be defined as deleted or declared with C &lt;a href=&quot;language_linkage&quot;&gt;language linkage&lt;/a&gt;(since C++17), &lt;a href=&quot;inline&quot;&gt;inline&lt;/a&gt;, &lt;a href=&quot;static&quot;&gt;static&lt;/a&gt;, or &lt;a href=&quot;constexpr&quot;&gt;constexpr&lt;/a&gt;</source>
          <target state="translated">3）不能定义为已删除或使用C &lt;a href=&quot;language_linkage&quot;&gt;语言链接&lt;/a&gt;声明（自C ++ 17起），&lt;a href=&quot;inline&quot;&gt;inline&lt;/a&gt;，&lt;a href=&quot;static&quot;&gt;static&lt;/a&gt;或&lt;a href=&quot;constexpr&quot;&gt;constexpr&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="15428be4fcb993ee6f6258c59a10daa1006cc23e" translate="yes" xml:space="preserve">
          <source>3) Iterator pointing to the first element inserted, or &lt;code&gt;pos&lt;/code&gt; if &lt;code&gt;count==0&lt;/code&gt;.</source>
          <target state="translated">3）迭代器指向第一元件插入或 &lt;code&gt;pos&lt;/code&gt; 如果 &lt;code&gt;count==0&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="83292122e3a0ca8a4e419d61132b33af01c55f4b" translate="yes" xml:space="preserve">
          <source>3) Iterator to the last element inserted, or &lt;code&gt;pos&lt;/code&gt; if &lt;code&gt;count==0&lt;/code&gt;.</source>
          <target state="translated">3）迭代的最后一个元素插入或 &lt;code&gt;pos&lt;/code&gt; 如果 &lt;code&gt;count==0&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="86650132452794ca72a06d35352364377c46886a" translate="yes" xml:space="preserve">
          <source>3) Less-than operator for variants:</source>
          <target state="translated">3)变体的Less-than运算符。</target>
        </trans-unit>
        <trans-unit id="ad1d235b6022b632bfd1ecf8353fb1f773b001d5" translate="yes" xml:space="preserve">
          <source>3) Linear in &lt;code&gt;&lt;a href=&quot;../../iterator/distance&quot;&gt;std::distance&lt;/a&gt;(first, last)&lt;/code&gt;</source>
          <target state="translated">3） &lt;code&gt;&lt;a href=&quot;../../iterator/distance&quot;&gt;std::distance&lt;/a&gt;(first, last)&lt;/code&gt; 线性（第一个，最后一个）</target>
        </trans-unit>
        <trans-unit id="04c6071f6596bd7e8bbddff803623c685bda15bc" translate="yes" xml:space="preserve">
          <source>3) Linear in &lt;code&gt;count&lt;/code&gt;</source>
          <target state="translated">3）线性 &lt;code&gt;count&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="c560ac0ad5a730cae89247a67aa496ace192c481" translate="yes" xml:space="preserve">
          <source>3) Linear in &lt;code&gt;count&lt;/code&gt; plus linear in the distance between &lt;code&gt;pos&lt;/code&gt; and end of the container.</source>
          <target state="translated">3） &lt;code&gt;count&lt;/code&gt; 线性加上 &lt;code&gt;pos&lt;/code&gt; 与容器末端之间的距离线性。</target>
        </trans-unit>
        <trans-unit id="5a139df81a0286fecf91448f4312bacb00685b92" translate="yes" xml:space="preserve">
          <source>3) Linear in &lt;code&gt;count&lt;/code&gt; plus linear in the lesser of the distances between &lt;code&gt;pos&lt;/code&gt; and either of the ends of the container.</source>
          <target state="translated">3）线性 &lt;code&gt;count&lt;/code&gt; 加上 &lt;code&gt;pos&lt;/code&gt; 与容器两端之间的距离中的较小者为线性。</target>
        </trans-unit>
        <trans-unit id="8068c94a235a98640c2d4d1bdc4cc9d21c073f98" translate="yes" xml:space="preserve">
          <source>3) Linear in &lt;code&gt;ilist.size()&lt;/code&gt;</source>
          <target state="translated">3）在 &lt;code&gt;ilist.size()&lt;/code&gt; 中为线性</target>
        </trans-unit>
        <trans-unit id="44f4ac8bda69ffee597405d7bfd5538cbc07ef19" translate="yes" xml:space="preserve">
          <source>3) Linear in size of &lt;code&gt;other&lt;/code&gt;</source>
          <target state="translated">3） &lt;code&gt;other&lt;/code&gt; 尺寸线性</target>
        </trans-unit>
        <trans-unit id="65888332e68ca1792c776ad0e92aa6e8f144ec5a" translate="yes" xml:space="preserve">
          <source>3) Linear in the size of &lt;code&gt;*this&lt;/code&gt; and &lt;code&gt;ilist&lt;/code&gt;.</source>
          <target state="translated">3） &lt;code&gt;*this&lt;/code&gt; 和 &lt;code&gt;ilist&lt;/code&gt; 大小线性。</target>
        </trans-unit>
        <trans-unit id="9976c7fa0c26c5aebc4ef6a454fb47e62e0b73b2" translate="yes" xml:space="preserve">
          <source>3) Literal operators with these parameter lists are the first-choice literal operator for user-defined floating-point literals</source>
          <target state="translated">3)使用这些参数列表的字面运算符是用户定义浮点字面运算符的首选。</target>
        </trans-unit>
        <trans-unit id="670c5df297f8149bf34051561218c28c5b7037c7" translate="yes" xml:space="preserve">
          <source>3) Locks the associated mutex by calling &lt;code&gt;m.lock()&lt;/code&gt;. The behavior is undefined if the current thread already owns the mutex except when the mutex is recursive.</source>
          <target state="translated">3）通过调用 &lt;code&gt;m.lock()&lt;/code&gt; 锁定关联的互斥锁。如果当前线程已经拥有该互斥锁，则该行为是不确定的，除非该互斥锁是递归的。</target>
        </trans-unit>
        <trans-unit id="9f4fbadacf39bbf3f9bcc1471343229056016eaf" translate="yes" xml:space="preserve">
          <source>3) Locks the associated mutex in shared mode by calling &lt;code&gt;m.lock_shared()&lt;/code&gt;. The behavior is undefined if this thread already owns the mutex in any mode.</source>
          <target state="translated">3）通过调用 &lt;code&gt;m.lock_shared()&lt;/code&gt; 将关联的互斥锁锁定为共享模式。如果此线程在任何模式下都已经拥有互斥体，则该行为是不确定的。</target>
        </trans-unit>
        <trans-unit id="cb3fb484080da1fee970fd8a475c6c772acae1a4" translate="yes" xml:space="preserve">
          <source>3) Logical inclusive OR</source>
          <target state="translated">3)逻辑包容OR</target>
        </trans-unit>
        <trans-unit id="a7ba55ea9804b266aca10a49cf13a6dec30af883" translate="yes" xml:space="preserve">
          <source>3) May throw any exception thrown by move-constructing any T_i in &lt;code&gt;Types...&lt;/code&gt;.</source>
          <target state="translated">3）可能会通过移动构造 &lt;code&gt;Types...&lt;/code&gt; 任何T_i引发任何异常。</target>
        </trans-unit>
        <trans-unit id="ca40123da837f0fee79c9b550ed45612562fb752" translate="yes" xml:space="preserve">
          <source>3) Move assignment operator. Replaces the contents with those of &lt;code&gt;other&lt;/code&gt; using move semantics.</source>
          <target state="translated">3）移动分配运算符。使用移动语义将内容替换为 &lt;code&gt;other&lt;/code&gt; 内容。</target>
        </trans-unit>
        <trans-unit id="5b47250dca512e9cbfd28a37162f550d375a96df" translate="yes" xml:space="preserve">
          <source>3) Move constructor.</source>
          <target state="translated">3)移动构造函数。</target>
        </trans-unit>
        <trans-unit id="ab9942e808a2d88c706e7eac74af13a25ba991ba" translate="yes" xml:space="preserve">
          <source>3) Move constructor. Constructs a path whose pathname, in both native and generic formats, is the same as that of &lt;code&gt;p&lt;/code&gt;, &lt;code&gt;p&lt;/code&gt; is left in valid but unspecified state.</source>
          <target state="translated">3）移动构造函数。构造一个路径，该路径的本机和通用格式的路径名都与 &lt;code&gt;p&lt;/code&gt; 相同， &lt;code&gt;p&lt;/code&gt; 保持有效但未指定状态。</target>
        </trans-unit>
        <trans-unit id="799e4c4e82132cadecf2ebc2ddbcdc904f042751" translate="yes" xml:space="preserve">
          <source>3) Move constructor. Constructs the promise with the shared state of &lt;code&gt;other&lt;/code&gt; using move semantics. After construction, &lt;code&gt;other&lt;/code&gt; has no shared state.</source>
          <target state="translated">3）移动构造函数。使用移动语义与 &lt;code&gt;other&lt;/code&gt; 的共享状态构造promise 。构造后， &lt;code&gt;other&lt;/code&gt; 没有共享状态。</target>
        </trans-unit>
        <trans-unit id="bde2905f8fda7b64e53c6f7498f3e51ad8fdcbed" translate="yes" xml:space="preserve">
          <source>3) Move constructor. If &lt;code&gt;other&lt;/code&gt; is not &lt;a href=&quot;valueless_by_exception&quot;&gt;valueless_by_exception&lt;/a&gt;, constructs a variant holding the same alternative as &lt;code&gt;other&lt;/code&gt; and &lt;a href=&quot;../../language/direct_initialization&quot;&gt;direct-initializes&lt;/a&gt; the contained value with &lt;code&gt;std::get&amp;lt;other.index()&amp;gt;(std::move(other))&lt;/code&gt;. Otherwise, initializes a &lt;code&gt;valueless_by_exception&lt;/code&gt; variant. This overload only participates in overload resolution if &lt;code&gt;&lt;a href=&quot;../../types/is_move_constructible&quot;&gt;std::is_move_constructible_v&lt;/a&gt;&amp;lt;T_i&amp;gt;&lt;/code&gt; is true for all &lt;code&gt;T_i&lt;/code&gt; in &lt;code&gt;Types...&lt;/code&gt;. It is trivial if &lt;code&gt;&lt;a href=&quot;../../types/is_move_constructible&quot;&gt;std::is_trivially_move_constructible_v&lt;/a&gt;&amp;lt;T_i&amp;gt;&lt;/code&gt; is true for all &lt;code&gt;T_i&lt;/code&gt; in &lt;code&gt;Types...&lt;/code&gt;.</source>
          <target state="translated">3）移动构造函数。如果 &lt;code&gt;other&lt;/code&gt; 不是&lt;a href=&quot;valueless_by_exception&quot;&gt;valueless_by_exception&lt;/a&gt;，则构造一个变量，该变量持有与 &lt;code&gt;other&lt;/code&gt; 相同的替代项，并使用 &lt;code&gt;std::get&amp;lt;other.index()&amp;gt;(std::move(other))&lt;/code&gt; &lt;a href=&quot;../../language/direct_initialization&quot;&gt;直接初始化&lt;/a&gt;包含的值。否则，初始化一个 &lt;code&gt;valueless_by_exception&lt;/code&gt; 变体。此重载仅参与重载决议，如果 &lt;code&gt;&lt;a href=&quot;../../types/is_move_constructible&quot;&gt;std::is_move_constructible_v&lt;/a&gt;&amp;lt;T_i&amp;gt;&lt;/code&gt; &amp;lt;T_i&amp;gt;是所有真正的 &lt;code&gt;T_i&lt;/code&gt; 在 &lt;code&gt;Types...&lt;/code&gt; 。它是平凡的，如果 &lt;code&gt;&lt;a href=&quot;../../types/is_move_constructible&quot;&gt;std::is_trivially_move_constructible_v&lt;/a&gt;&amp;lt;T_i&amp;gt;&lt;/code&gt; &amp;lt;T_i&amp;gt;的一切都是真实的 &lt;code&gt;T_i&lt;/code&gt; 在 &lt;code&gt;Types...&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="a86f7af723b648e64c975342ed4cc057730f5be8" translate="yes" xml:space="preserve">
          <source>3) Move constructor: If &lt;code&gt;other&lt;/code&gt; contains a value, initializes the contained value as if &lt;a href=&quot;../../language/direct_initialization&quot;&gt;direct-initializing&lt;/a&gt; (but not direct-list-initializing) an object of type &lt;code&gt;T&lt;/code&gt; with the expression &lt;code&gt;std::move(*other)&lt;/code&gt; and</source>
          <target state="translated">3）移动构造函数：如果 &lt;code&gt;other&lt;/code&gt; 包含一个值，则初始化所包含的值，就像使用表达式 &lt;code&gt;std::move(*other)&lt;/code&gt; &lt;a href=&quot;../../language/direct_initialization&quot;&gt;直接初始化&lt;/a&gt;（而不是直接列表初始化）类型 &lt;code&gt;T&lt;/code&gt; 的对象一样，并</target>
        </trans-unit>
        <trans-unit id="bb85cf7a1f9e7ee2dbe753e86c7632bc1cd9b12a" translate="yes" xml:space="preserve">
          <source>3) Move constructor: move-constructs a &lt;code&gt;std::basic_syncbuf&lt;/code&gt; object by moving all contents from another &lt;code&gt;std::basic_syncbuf&lt;/code&gt; object &lt;code&gt;rhs&lt;/code&gt;, including the temporary storage, the wrapped stream pointer, policy, and all other state (such as the mutex pointer). After move, &lt;code&gt;rhs&lt;/code&gt; is not associated with a stream, and &lt;code&gt;rhs.get_wrapped()==nullptr&lt;/code&gt;. The put area member pointers of the base class &lt;code&gt;&lt;a href=&quot;../basic_streambuf&quot;&gt;std::basic_streambuf&lt;/a&gt;&lt;/code&gt; of &lt;code&gt;rhs&lt;/code&gt; are guaranteed to be null. Destroying a moved-from &lt;code&gt;rhs&lt;/code&gt; will not produce any output.</source>
          <target state="translated">3）移动的构造：移动-构造一个 &lt;code&gt;std::basic_syncbuf&lt;/code&gt; 通过从另一移动所有内容对象 &lt;code&gt;std::basic_syncbuf&lt;/code&gt; 对象 &lt;code&gt;rhs&lt;/code&gt; ，包括临时存储，被包装的流指针，政策，和所有其他的状态（如互斥指针） 。移动之后， &lt;code&gt;rhs&lt;/code&gt; 不与流关联，并且 &lt;code&gt;rhs.get_wrapped()==nullptr&lt;/code&gt; 。基类的投放区域成员指针 &lt;code&gt;&lt;a href=&quot;../basic_streambuf&quot;&gt;std::basic_streambuf&lt;/a&gt;&lt;/code&gt; 的 &lt;code&gt;rhs&lt;/code&gt; 保证是零。销毁从 &lt;code&gt;rhs&lt;/code&gt; 中移出的东西不会产生任何输出。</target>
        </trans-unit>
        <trans-unit id="a3014b09e00db1e8e8f66806e4206bf583890196" translate="yes" xml:space="preserve">
          <source>3) Move constructor: move-constructs the first base class &lt;code&gt;basic_istream&lt;/code&gt; as &lt;code&gt;basic_istream&amp;lt;CharT,Traits&amp;gt;(std::move(rhs));&lt;/code&gt;, which in turn move-constructs and initializes the virtual base &lt;code&gt;&lt;a href=&quot;../basic_ios&quot;&gt;std::basic_ios&lt;/a&gt;&lt;/code&gt;. The initialization of the other base, &lt;code&gt;basic_ostream&lt;/code&gt;, is implementation-defined (e.g., a protected default constructor may be added to &lt;code&gt;&lt;a href=&quot;../basic_ostream&quot;&gt;std::basic_ostream&lt;/a&gt;&lt;/code&gt;, which does nothing) because move-construction cannot use &lt;code&gt;rhs&lt;/code&gt; twice. This move constructor is protected: it is called by the move constructors of the derived stream classes &lt;code&gt;&lt;a href=&quot;../basic_fstream&quot;&gt;std::basic_fstream&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;../basic_stringstream&quot;&gt;std::basic_stringstream&lt;/a&gt;&lt;/code&gt; before they move-construct and associate the stream buffer.</source>
          <target state="translated">3）移动构造函数：将第一个基类 &lt;code&gt;basic_istream&lt;/code&gt; 构造为 &lt;code&gt;basic_istream&amp;lt;CharT,Traits&amp;gt;(std::move(rhs));&lt;/code&gt; ，然后移动构造并初始化虚拟基础 &lt;code&gt;&lt;a href=&quot;../basic_ios&quot;&gt;std::basic_ios&lt;/a&gt;&lt;/code&gt; 。另一个基数 &lt;code&gt;basic_ostream&lt;/code&gt; 的初始化是实现定义的（例如，可以将受保护的默认构造函数添加到 &lt;code&gt;&lt;a href=&quot;../basic_ostream&quot;&gt;std::basic_ostream&lt;/a&gt;&lt;/code&gt; ，此函数什么都不做），因为move构造不能两次使用 &lt;code&gt;rhs&lt;/code&gt; 。此move构造函数受到保护：派生流类 &lt;code&gt;&lt;a href=&quot;../basic_fstream&quot;&gt;std::basic_fstream&lt;/a&gt;&lt;/code&gt; 和 &lt;code&gt;&lt;a href=&quot;../basic_stringstream&quot;&gt;std::basic_stringstream&lt;/a&gt;&lt;/code&gt; move构造函数在移动构造并关联流缓冲区之前调用它。</target>
        </trans-unit>
        <trans-unit id="20482acf4cb43ffb2b523d35fee40416682818a0" translate="yes" xml:space="preserve">
          <source>3) Move constructors. Moves a weak_ptr instance from &lt;code&gt;r&lt;/code&gt; into &lt;code&gt;*this&lt;/code&gt;. After this, &lt;code&gt;r&lt;/code&gt; is empty and &lt;code&gt;r.use_count()==0&lt;/code&gt;. The templated overload doesn't participate in the overload resolution unless &lt;code&gt;Y*&lt;/code&gt; is implicitly convertible to &lt;code&gt;T*&lt;/code&gt;</source>
          <target state="translated">3）移动构造函数。从 &lt;code&gt;r&lt;/code&gt; 移一个weak_ptr实例到 &lt;code&gt;*this&lt;/code&gt; 。此后， &lt;code&gt;r&lt;/code&gt; 为空，并且 &lt;code&gt;r.use_count()==0&lt;/code&gt; 。除非 &lt;code&gt;Y*&lt;/code&gt; 可隐式转换为 &lt;code&gt;T*&lt;/code&gt; 否则模板化的重载不参与重载解析</target>
        </trans-unit>
        <trans-unit id="c832b249444bf57f849b280268cf06acdcca18ef" translate="yes" xml:space="preserve">
          <source>3) Move-constructs a &lt;code&gt;std::basic_filebuf&lt;/code&gt; object by moving all contents from another &lt;code&gt;std::basic_filebuf&lt;/code&gt; object &lt;code&gt;rhs&lt;/code&gt;, including the buffers, the associated file, the locale, the openmode, the is_open variable, and all other state. After move, &lt;code&gt;rhs&lt;/code&gt; is not associated with a file and &lt;code&gt;rhs.is_open()==false&lt;/code&gt;. The member pointers of the base class &lt;code&gt;&lt;a href=&quot;../basic_streambuf&quot;&gt;std::basic_streambuf&lt;/a&gt;&lt;/code&gt; of &lt;code&gt;rhs&lt;/code&gt; and of the base class of &lt;code&gt;*this&lt;/code&gt; are guaranteed to point to different buffers (unless null).</source>
          <target state="translated">3）Move 通过移动另一个 &lt;code&gt;std::basic_filebuf&lt;/code&gt; 对象 &lt;code&gt;rhs&lt;/code&gt; 的所有内容来构造 &lt;code&gt;std::basic_filebuf&lt;/code&gt; 对象，包括缓冲区，关联的文件，语言环境，openmode，is_open变量和所有其他状态。移动后， &lt;code&gt;rhs&lt;/code&gt; 不与文件关联， &lt;code&gt;rhs.is_open()==false&lt;/code&gt; 。基类的成员的指针 &lt;code&gt;&lt;a href=&quot;../basic_streambuf&quot;&gt;std::basic_streambuf&lt;/a&gt;&lt;/code&gt; 的 &lt;code&gt;rhs&lt;/code&gt; 的基类的，并且 &lt;code&gt;*this&lt;/code&gt; 是保证指向不同的缓冲液（除非空）。</target>
        </trans-unit>
        <trans-unit id="2e36d88fd76fb51a1c6930542afcef0cf2138ad2" translate="yes" xml:space="preserve">
          <source>3) Move-constructs the underlying container &lt;code&gt;c&lt;/code&gt; with &lt;code&gt;std::move(cont)&lt;/code&gt;.</source>
          <target state="translated">3）用 &lt;code&gt;std::move(cont)&lt;/code&gt; 构造底层容器 &lt;code&gt;c&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="7bd22c8f7f1e8644439876601f5406f410be68be" translate="yes" xml:space="preserve">
          <source>3) Moves the elements in the range &lt;code&gt;(first, last)&lt;/code&gt; from &lt;code&gt;other&lt;/code&gt; into &lt;code&gt;*this&lt;/code&gt;. The elements are inserted after the element pointed to by &lt;code&gt;pos&lt;/code&gt;. The element pointed-to by &lt;code&gt;first&lt;/code&gt; is not moved. The behavior is undefined if &lt;code&gt;pos&lt;/code&gt; is an iterator in the range &lt;code&gt;(first,last)&lt;/code&gt;.</source>
          <target state="translated">3）将范围 &lt;code&gt;(first, last)&lt;/code&gt; 的元素从 &lt;code&gt;other&lt;/code&gt; 移至 &lt;code&gt;*this&lt;/code&gt; 。将这些元素插入到 &lt;code&gt;pos&lt;/code&gt; 指向的元素之后。该元件指向的通过 &lt;code&gt;first&lt;/code&gt; 不移动。如果 &lt;code&gt;pos&lt;/code&gt; 是 &lt;code&gt;(first,last)&lt;/code&gt; 范围内的迭代器，则行为未定义。</target>
        </trans-unit>
        <trans-unit id="0d9ad0647ad5c759b3ec9f1989561dc61f998495" translate="yes" xml:space="preserve">
          <source>3) Non-throwing &lt;a href=&quot;except_spec&quot;&gt;dynamic exception specification&lt;/a&gt; (unlike &lt;code&gt;noexcept(true)&lt;/code&gt; guarantees stack unwinding and may call &lt;code&gt;&lt;a href=&quot;../error/exception/unexpected&quot;&gt;std::unexpected&lt;/a&gt;&lt;/code&gt;)</source>
          <target state="translated">3）非抛出&lt;a href=&quot;except_spec&quot;&gt;动态异常规范&lt;/a&gt;（与 &lt;code&gt;noexcept(true)&lt;/code&gt; 不同，它保证了堆栈展开并且可以调用 &lt;code&gt;&lt;a href=&quot;../error/exception/unexpected&quot;&gt;std::unexpected&lt;/a&gt;&lt;/code&gt; ）</target>
        </trans-unit>
        <trans-unit id="b76732269d03ccd8485ad891bb696c1eba4abbdc" translate="yes" xml:space="preserve">
          <source>3) Nothing.</source>
          <target state="translated">3)无。</target>
        </trans-unit>
        <trans-unit id="4003a149764097ada52339a281c59e55001f55f7" translate="yes" xml:space="preserve">
          <source>3) Number of characters written if successful (not including the terminating null character) or a negative value if an error occurred.</source>
          <target state="translated">3)如果成功写入的字符数(不包括终止的空字符),如果发生错误,则为负值。</target>
        </trans-unit>
        <trans-unit id="199f53855c03aabdcac6f164ee51dd6230e50052" translate="yes" xml:space="preserve">
          <source>3) Number of elements removed.</source>
          <target state="translated">3)删除的元素数量。</target>
        </trans-unit>
        <trans-unit id="745cde883a1fe304fa578edf6da7aab7e013ee7d" translate="yes" xml:space="preserve">
          <source>3) Number of wide characters written (not counting the terminating null wide character) if successful or negative value if an encoding error occurred or if the number of characters to be generated was equal or greater than &lt;code&gt;size&lt;/code&gt; (including when &lt;code&gt;size&lt;/code&gt; is zero)</source>
          <target state="translated">3）如果成功，则写入的宽字符数（不计算终止的空宽字符），如果发生编码错误或要生成的字符数等于或大于 &lt;code&gt;size&lt;/code&gt; （包括 &lt;code&gt;size&lt;/code&gt; 为零），则为负值</target>
        </trans-unit>
        <trans-unit id="2662cd45cc5538f6af799495aa4fbbbd7a58c342" translate="yes" xml:space="preserve">
          <source>3) Number of wide characters written (not counting the terminating null wide character) if successful or negative value if an encoding error occurred or if the number of characters to be generated was equal or greater than &lt;code&gt;size&lt;/code&gt;.</source>
          <target state="translated">3）如果成功则写入的宽字符数（不计算终止的空宽字符），如果发生编码错误或者要生成的字符数等于或大于 &lt;code&gt;size&lt;/code&gt; ,则为负值。</target>
        </trans-unit>
        <trans-unit id="75ab421ee70fed4ed412a4d704fcf006774db642" translate="yes" xml:space="preserve">
          <source>3) O(NlogN) in general, where N is &lt;code&gt;size() + ilist.size()&lt;/code&gt;. Linear if &lt;code&gt;ilist&lt;/code&gt; is sorted with respect to &lt;code&gt;&lt;a href=&quot;value_comp&quot;&gt;value_comp()&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">3）通常为O（NlogN），其中N为 &lt;code&gt;size() + ilist.size()&lt;/code&gt; 。如果 &lt;code&gt;ilist&lt;/code&gt; 是根据 &lt;code&gt;&lt;a href=&quot;value_comp&quot;&gt;value_comp()&lt;/a&gt;&lt;/code&gt; 排序的，则为线性。</target>
        </trans-unit>
        <trans-unit id="fb9e7f6922c74f96dcd64727f3598e1705b1d870" translate="yes" xml:space="preserve">
          <source>3) Omitted trailing-return-type: the return type of the closure's &lt;code&gt;operator()&lt;/code&gt; is &lt;a href=&quot;template_argument_deduction&quot;&gt;deduced&lt;/a&gt; from &lt;a href=&quot;return&quot;&gt;&lt;code&gt;return&lt;/code&gt;&lt;/a&gt; statements as if for a function whose &lt;a href=&quot;function#Return_type_deduction&quot;&gt;return type is declared auto&lt;/a&gt;.</source>
          <target state="translated">3）省略尾随回报型：封闭的返回类型 &lt;code&gt;operator()&lt;/code&gt; 的&lt;a href=&quot;template_argument_deduction&quot;&gt;推导&lt;/a&gt;从&lt;a href=&quot;return&quot;&gt; &lt;code&gt;return&lt;/code&gt; &lt;/a&gt;报表如果其功能&lt;a href=&quot;function#Return_type_deduction&quot;&gt;返回类型声明汽车&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="b6e13d8366bd793510883424adeab2b27b28314b" translate="yes" xml:space="preserve">
          <source>3) Only copies the elements for which the predicate &lt;code&gt;pred&lt;/code&gt; returns &lt;code&gt;true&lt;/code&gt;. The relative order of the elements that are copied is preserved. The behavior is undefined if the source and the destination ranges overlap.</source>
          <target state="translated">3）仅复制谓词 &lt;code&gt;pred&lt;/code&gt; 返回 &lt;code&gt;true&lt;/code&gt; 的元素。将保留复制元素的相对顺序。如果源和目标范围重叠，则行为未定义。</target>
        </trans-unit>
        <trans-unit id="9106723e00be9201249bf6af1408d15a2c80d988" translate="yes" xml:space="preserve">
          <source>3) Opaque enum declaration for an unscoped enumeration must specify the underlying type.</source>
          <target state="translated">3)不透明的枚举声明,对于无范围的枚举必须指定底层类型。</target>
        </trans-unit>
        <trans-unit id="23973f1d942c2275f88c02ce2f4462cbc2b04733" translate="yes" xml:space="preserve">
          <source>3) Orders &lt;code&gt;*this&lt;/code&gt; and &lt;code&gt;rhs&lt;/code&gt; by the order of &lt;code&gt;this&lt;/code&gt; and &lt;code&gt;&amp;amp;rhs&lt;/code&gt;. Equivalent to &lt;code&gt;&lt;a href=&quot;../../utility/functional/less&quot;&gt;std::less&lt;/a&gt;&amp;lt;const error_category*&amp;gt;()(this, &amp;amp;rhs)&lt;/code&gt;.</source>
          <target state="translated">3）按 &lt;code&gt;this&lt;/code&gt; 和 &lt;code&gt;&amp;amp;rhs&lt;/code&gt; 的顺序对 &lt;code&gt;*this&lt;/code&gt; 和 &lt;code&gt;rhs&lt;/code&gt; 进行排序。等同于 &lt;code&gt;&lt;a href=&quot;../../utility/functional/less&quot;&gt;std::less&lt;/a&gt;&amp;lt;const error_category*&amp;gt;()(this, &amp;amp;rhs)&lt;/code&gt; &amp;lt;const error_category *&amp;gt;（）（this，＆rhs）。</target>
        </trans-unit>
        <trans-unit id="2b8de6cc0c7aed032be141148a8b722d842daa5d" translate="yes" xml:space="preserve">
          <source>3) Otherwise, checks whether &lt;code&gt;c&lt;/code&gt; equals &lt;code&gt;'_'&lt;/code&gt; and the bitmask &lt;code&gt;f&lt;/code&gt; includes the result of calling &lt;code&gt;&lt;a href=&quot;lookup_classname&quot;&gt;lookup_classname()&lt;/a&gt;&lt;/code&gt; for the character class &lt;code&gt;[:w:]&lt;/code&gt;, in which case &lt;code&gt;true&lt;/code&gt; is returned.</source>
          <target state="translated">3）否则，检查 &lt;code&gt;c&lt;/code&gt; 是否等于 &lt;code&gt;'_'&lt;/code&gt; ，并且位掩码 &lt;code&gt;f&lt;/code&gt; 包含为字符类 &lt;code&gt;[:w:]&lt;/code&gt; 调用 &lt;code&gt;&lt;a href=&quot;lookup_classname&quot;&gt;lookup_classname()&lt;/a&gt;&lt;/code&gt; 的结果，在这种情况下返回 &lt;code&gt;true&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="70f4c9c154011c2187f7759ba9e0a58967135971" translate="yes" xml:space="preserve">
          <source>3) Otherwise, if &lt;code&gt;E2&lt;/code&gt; and &lt;code&gt;E3&lt;/code&gt; have different types, at least one of which is a (possibly cv-qualified) class type, or both are glvalues of the same value category and have the same type except for cv-qualification, then an attempt is made to form an &lt;a href=&quot;implicit_cast&quot;&gt;implicit conversion sequence&lt;/a&gt; ignoring member access, whether an operand is a bit-field, or whether a conversion function is deleted(since C++14) from each of the operands to the</source>
          <target state="translated">3）否则，如果 &lt;code&gt;E2&lt;/code&gt; 和 &lt;code&gt;E3&lt;/code&gt; 具有不同的类型，其中至少一个是（可能是cv限定的）类类型，或者两者都是相同值类别的glvalue，并且具有除cv限定之外的相同类型，则试图形成一个&lt;a href=&quot;implicit_cast&quot;&gt;隐式转换序列，以&lt;/a&gt;忽略成员访问，操作数是否是位字段或是否从每个操作数到C删除转换函数（从C ++ 14开始）。</target>
        </trans-unit>
        <trans-unit id="e3e1f4bc9437f198420f3a42654833fe270a5008" translate="yes" xml:space="preserve">
          <source>3) Otherwise, if &lt;code&gt;T&lt;/code&gt; and &lt;code&gt;U&lt;/code&gt; are both &lt;code&gt;V&amp;amp;&lt;/code&gt; for some type &lt;code&gt;V&lt;/code&gt; that meets the syntactic requirements of &lt;code&gt;&lt;a href=&quot;../../concepts/moveconstructible&quot;&gt;MoveConstructible&lt;/a&gt;&amp;lt;V&amp;gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;../../concepts/assignable&quot;&gt;Assignable&lt;/a&gt;&amp;lt;V&amp;amp;, V&amp;gt;&lt;/code&gt;, exchanges the referenced values as if by &lt;code&gt;V v{std::move(t)}; t = std::move(u); u = std::move(v);&lt;/code&gt;. If the semantic requirements of either concept are not satisfied, the program is ill-formed; no diagnostic required.</source>
          <target state="translated">3）否则，如果对于满足 &lt;code&gt;&lt;a href=&quot;../../concepts/moveconstructible&quot;&gt;MoveConstructible&lt;/a&gt;&amp;lt;V&amp;gt;&lt;/code&gt; &amp;lt;V&amp;gt;和 &lt;code&gt;&lt;a href=&quot;../../concepts/assignable&quot;&gt;Assignable&lt;/a&gt;&amp;lt;V&amp;amp;, V&amp;gt;&lt;/code&gt; &amp;lt;V＆，V&amp;gt;语法要求的某些类型 &lt;code&gt;V&lt;/code&gt; ， &lt;code&gt;T&lt;/code&gt; 和 &lt;code&gt;U&lt;/code&gt; 均为 &lt;code&gt;V&amp;amp;&lt;/code&gt; ，则交换参考值，就像通过 &lt;code&gt;V v{std::move(t)}; t = std::move(u); u = std::move(v);&lt;/code&gt; t = std :: move（u）; u = std :: move（v）; 。如果不满足任何一个概念的语义要求，则程序格式错误；无需诊断。</target>
        </trans-unit>
        <trans-unit id="88c61c2e4aab2e466e58588f765636b5775a65dc" translate="yes" xml:space="preserve">
          <source>3) Otherwise, if either is a pointer to a virtual member function, the result is unspecified.</source>
          <target state="translated">3)否则,如果其中一个是指向虚拟成员函数的指针,则结果不详。</target>
        </trans-unit>
        <trans-unit id="6368464f68e30f03aa03ef43c24298e8b78b1d76" translate="yes" xml:space="preserve">
          <source>3) Otherwise, if the stream buffer mode is not dynamic or the stream buffer is currently frozen, the function fails and returns &lt;code&gt;&lt;a href=&quot;../c&quot;&gt;EOF&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">3）否则，如果流缓冲区模式不是动态的或当前已冻结流缓冲区，则该函数将失败并返回 &lt;code&gt;&lt;a href=&quot;../c&quot;&gt;EOF&lt;/a&gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="a6d0283f448702fd1a84893cf29fed278ede2c82" translate="yes" xml:space="preserve">
          <source>3) Otherwise, returns &lt;code&gt;Traits::eof()&lt;/code&gt;.</source>
          <target state="translated">3）否则，返回 &lt;code&gt;Traits::eof()&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="df96ecf19fcd5f311c11c51bc719bc29c39a8c66" translate="yes" xml:space="preserve">
          <source>3) Otherwise, the next pointer is assigned as if by &lt;code&gt;gptr() = eback()+newoff&lt;/code&gt; or &lt;code&gt;pptr() = pbase()+newoff&lt;/code&gt;.</source>
          <target state="translated">3）否则，下一个指针的分配就像 &lt;code&gt;gptr() = eback()+newoff&lt;/code&gt; 或 &lt;code&gt;pptr() = pbase()+newoff&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="f22651593e63fb4e87b2b2b71befdd326088533a" translate="yes" xml:space="preserve">
          <source>3) Performs atomic bitwise and. Equivalent to &lt;code&gt;fetch_and(arg)&lt;/code&gt; &amp;amp; arg.</source>
          <target state="translated">3）按位执行和。等效于 &lt;code&gt;fetch_and(arg)&lt;/code&gt; ＆arg。</target>
        </trans-unit>
        <trans-unit id="7cf61b6c18bada575e3f374e9983692fff35fc84" translate="yes" xml:space="preserve">
          <source>3) Performs atomic bitwise and. Equivalent to &lt;code&gt;return fetch_and(arg) &amp;amp; arg;&lt;/code&gt;.</source>
          <target state="translated">3）按位执行和。等效于 &lt;code&gt;return fetch_and(arg) &amp;amp; arg;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="b2a57e6a26fb685bd0f06d7735ce653db8cdf8a7" translate="yes" xml:space="preserve">
          <source>3) Performs atomic pre-decrement. Equivalent to &lt;code&gt;fetch_sub(1)-1&lt;/code&gt;</source>
          <target state="translated">3）执行原子减量。等效于 &lt;code&gt;fetch_sub(1)-1&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="a33f9787080e90df24bcc4e78fb7039f6e2e90e8" translate="yes" xml:space="preserve">
          <source>3) Performs atomic pre-decrement. Equivalent to &lt;code&gt;return fetch_sub(1) - 1;&lt;/code&gt;</source>
          <target state="translated">3）执行原子减量。等效于 &lt;code&gt;return fetch_sub(1) - 1;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="dce1f3cb4ef8a04d6922cc12c907cc7112350620" translate="yes" xml:space="preserve">
          <source>3) Preprocessor constant expression that evaluates to &lt;code&gt;1&lt;/code&gt; if the file name is found and &lt;code&gt;​0​&lt;/code&gt; if not. The program is ill-formed if the argument would not be a valid argument to the &lt;code&gt;#include&lt;/code&gt; directive.</source>
          <target state="translated">3）预处理器常量表达式计算结果为 &lt;code&gt;1&lt;/code&gt; ，如果该文件名是发现和 &lt;code&gt;​0​&lt;/code&gt; 如果不是。如果参数不是 &lt;code&gt;#include&lt;/code&gt; 指令的有效参数，则程序格式错误。</target>
        </trans-unit>
        <trans-unit id="0b8721f805f20b3b05c9fc921d29e29ad249bfbd" translate="yes" xml:space="preserve">
          <source>3) Prompting text which is sent to interactive devices will be shown before the program waits for input.</source>
          <target state="translated">3)在程序等待输入之前,将显示发送到交互设备的提示文字。</target>
        </trans-unit>
        <trans-unit id="3c0a3af8a4ffb7e108373f747a9b0226794ff8a5" translate="yes" xml:space="preserve">
          <source>3) Reads the data from null-terminated character string &lt;code&gt;buffer&lt;/code&gt;</source>
          <target state="translated">3）从以空终止的字符串 &lt;code&gt;buffer&lt;/code&gt; 读取数据</target>
        </trans-unit>
        <trans-unit id="1987c2e2bf2f178daacab600c61051e608bea8ac" translate="yes" xml:space="preserve">
          <source>3) Reads the data from null-terminated character string &lt;code&gt;buffer&lt;/code&gt;.</source>
          <target state="translated">3）从以空终止的字符串 &lt;code&gt;buffer&lt;/code&gt; 读取数据。</target>
        </trans-unit>
        <trans-unit id="8f00b2bef9860a58dc87b440b7afccf7db80d98a" translate="yes" xml:space="preserve">
          <source>3) Reads the data from null-terminated wide string &lt;code&gt;buffer&lt;/code&gt;</source>
          <target state="translated">3）从以空值终止的宽字符串 &lt;code&gt;buffer&lt;/code&gt; 读取数据</target>
        </trans-unit>
        <trans-unit id="17ff56ed2692b9b2018a3f5600ca3878c8e0e80f" translate="yes" xml:space="preserve">
          <source>3) Reads the data from null-terminated wide string &lt;code&gt;buffer&lt;/code&gt;.</source>
          <target state="translated">3）从以空终止的宽字符串 &lt;code&gt;buffer&lt;/code&gt; 读取数据。</target>
        </trans-unit>
        <trans-unit id="64312e0e2af20f65585c2deb188b505ac912b497" translate="yes" xml:space="preserve">
          <source>3) Removes all elements for which predicate &lt;code&gt;p&lt;/code&gt; returns &lt;code&gt;true&lt;/code&gt;.</source>
          <target state="translated">3）删除所有谓词 &lt;code&gt;p&lt;/code&gt; 返回 &lt;code&gt;true&lt;/code&gt; 的元素。</target>
        </trans-unit>
        <trans-unit id="310f5ebf8540a04bda8b40a1bc9d4dd5526e65b4" translate="yes" xml:space="preserve">
          <source>3) Removes all elements with the key equivalent to &lt;code&gt;key&lt;/code&gt;.</source>
          <target state="translated">3）移除与键等同于所有元素 &lt;code&gt;key&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="4415369549290e578edb60f8e1f33b4e74708761" translate="yes" xml:space="preserve">
          <source>3) Removes the characters in the range &lt;code&gt;[first, last)&lt;/code&gt;.</source>
          <target state="translated">3）删除 &lt;code&gt;[first, last)&lt;/code&gt; 范围内的字符。</target>
        </trans-unit>
        <trans-unit id="544c58ab324d92afbde9bd592b0d8902e8476d0b" translate="yes" xml:space="preserve">
          <source>3) Removes the element (if one exists) with the key equivalent to &lt;code&gt;key&lt;/code&gt;.</source>
          <target state="translated">3）移除键等于 &lt;code&gt;key&lt;/code&gt; 的元素（如果存在）。</target>
        </trans-unit>
        <trans-unit id="81c9303915ae21b5cd2b6b5570fd3e30353c9770" translate="yes" xml:space="preserve">
          <source>3) Replace each slash character in the root-name with &lt;code&gt;path::preferred_separator&lt;/code&gt;.</source>
          <target state="translated">3）用 &lt;code&gt;path::preferred_separator&lt;/code&gt; 替换根名称中的每个斜杠字符。</target>
        </trans-unit>
        <trans-unit id="6f9d84cda7d3d351025115d6a2983f6e3213f125" translate="yes" xml:space="preserve">
          <source>3) Replaces all elements for which predicate &lt;code&gt;p&lt;/code&gt; returns &lt;code&gt;true&lt;/code&gt;.</source>
          <target state="translated">3）替换所有谓词 &lt;code&gt;p&lt;/code&gt; 返回 &lt;code&gt;true&lt;/code&gt; 的元素。</target>
        </trans-unit>
        <trans-unit id="cc2407531d0f96aaaeadd7acec07ab09d97704c4" translate="yes" xml:space="preserve">
          <source>3) Replaces each value in &lt;code&gt;*this&lt;/code&gt; with a copy of &lt;code&gt;val&lt;/code&gt;.</source>
          <target state="translated">3）用 &lt;code&gt;val&lt;/code&gt; 的副本替换 &lt;code&gt;*this&lt;/code&gt; 中的每个值。</target>
        </trans-unit>
        <trans-unit id="b5a886685c3e16dded625568a49d963af8f0fb7f" translate="yes" xml:space="preserve">
          <source>3) Replaces the contents of &lt;code&gt;*this&lt;/code&gt; with a new path value constructed from detected-format &lt;code&gt;source&lt;/code&gt;, which is left in valid, but unspecified state. Equivalent to &lt;code&gt;assign(std::move(source))&lt;/code&gt;.</source>
          <target state="translated">3）用从检测格式 &lt;code&gt;source&lt;/code&gt; 构造的新路径值替换 &lt;code&gt;*this&lt;/code&gt; 的内容，该路径值保持有效但未指定状态。等效于 &lt;code&gt;assign(std::move(source))&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="576824a8f9ea5847e8fcc701cc58c3cc93280e22" translate="yes" xml:space="preserve">
          <source>3) Replaces the contents with a substring &lt;code&gt;[pos, pos+count)&lt;/code&gt; of &lt;code&gt;str&lt;/code&gt;. If the requested substring lasts past the end of the string, or if &lt;code&gt;count == npos&lt;/code&gt;, the resulting substring is &lt;code&gt;[pos, str.size())&lt;/code&gt;. If &lt;code&gt;pos &amp;gt; str.size()&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;../../error/out_of_range/out_of_range&quot;&gt;std::out_of_range&lt;/a&gt;&lt;/code&gt; is thrown.</source>
          <target state="translated">3）用子替换内容 &lt;code&gt;[pos, pos+count)&lt;/code&gt; 的 &lt;code&gt;str&lt;/code&gt; 。如果请求的子字符串超过字符串的结尾，或者 &lt;code&gt;count == npos&lt;/code&gt; ，则结果子字符串为 &lt;code&gt;[pos, str.size())&lt;/code&gt; 。如果 &lt;code&gt;pos &amp;gt; str.size()&lt;/code&gt; ，则抛出 &lt;code&gt;&lt;a href=&quot;../../error/out_of_range/out_of_range&quot;&gt;std::out_of_range&lt;/a&gt;&lt;/code&gt; out_of_range。</target>
        </trans-unit>
        <trans-unit id="03b2fcf1f7504d24271eb69478891bb5b7d2cabc" translate="yes" xml:space="preserve">
          <source>3) Replaces the contents with the elements from the initializer list &lt;code&gt;ilist&lt;/code&gt;.</source>
          <target state="translated">3）用初始化列表 &lt;code&gt;ilist&lt;/code&gt; 中的元素替换内容。</target>
        </trans-unit>
        <trans-unit id="13bb493e1a2a07b34e03b2b85046f26ec68eae8f" translate="yes" xml:space="preserve">
          <source>3) Replaces the contents with those identified by initializer list &lt;code&gt;ilist&lt;/code&gt;.</source>
          <target state="translated">3）将内容替换为由初始化列表 &lt;code&gt;ilist&lt;/code&gt; 标识的内容。</target>
        </trans-unit>
        <trans-unit id="ef480fdc4715540c535b67104f0be3a077d9ff0a" translate="yes" xml:space="preserve">
          <source>3) Replaces the contents with those of null-terminated character string pointed to by &lt;code&gt;s&lt;/code&gt; as if by &lt;code&gt;assign(s, Traits::length(s))&lt;/code&gt;.</source>
          <target state="translated">3）将内容替换为 &lt;code&gt;s&lt;/code&gt; 所指向的以null终止的字符串的内容，就好像由 &lt;code&gt;assign(s, Traits::length(s))&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="e269b1ba162c3802910e2880f4db900ea451a1f3" translate="yes" xml:space="preserve">
          <source>3) Returns &lt;code&gt;proximate(p, current_path(), ec)&lt;/code&gt;</source>
          <target state="translated">3）返回 &lt;code&gt;proximate(p, current_path(), ec)&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="fcd3e9270cb3648094c10618d20e91cf9291367f" translate="yes" xml:space="preserve">
          <source>3) Returns &lt;code&gt;static_cast&amp;lt;T&amp;gt;(std::move(*std::any_cast&amp;lt;U&amp;gt;(&amp;amp;operand)))&lt;/code&gt;.</source>
          <target state="translated">3）返回 &lt;code&gt;static_cast&amp;lt;T&amp;gt;(std::move(*std::any_cast&amp;lt;U&amp;gt;(&amp;amp;operand)))&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="3dae875d437b9ad5b93fadfd5f4be759cb67b989" translate="yes" xml:space="preserve">
          <source>3) Returns &lt;code&gt;std::regex_match(str, str + &lt;a href=&quot;../string/char_traits&quot;&gt;std::char_traits&lt;/a&gt;&amp;lt;charT&amp;gt;::length(str), m, e, flags)&lt;/code&gt;.</source>
          <target state="translated">3）返回 &lt;code&gt;std::regex_match(str, str + &lt;a href=&quot;../string/char_traits&quot;&gt;std::char_traits&lt;/a&gt;&amp;lt;charT&amp;gt;::length(str), m, e, flags)&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="8abe04d6a65d859a86311ce0c8798df947619f86" translate="yes" xml:space="preserve">
          <source>3) Returns &lt;code&gt;true&lt;/code&gt; if &lt;code&gt;lhs&lt;/code&gt; is</source>
          <target state="translated">3）如果 &lt;code&gt;lhs&lt;/code&gt; 是，则返回 &lt;code&gt;true&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="7918b80e898ded5d6e97ac97b077589e837608a6" translate="yes" xml:space="preserve">
          <source>3) Returns &lt;code&gt;true&lt;/code&gt; if lhs is less than or equal to rhs, &lt;code&gt;false&lt;/code&gt; otherwise.</source>
          <target state="translated">3）如果lhs小于或等于rhs，则返回 &lt;code&gt;true&lt;/code&gt; ，否则返回 &lt;code&gt;false&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="0b4b3fc69cba2c69b75d5370bf375d279f982337" translate="yes" xml:space="preserve">
          <source>3) Returns a &lt;code&gt;bitset&amp;lt;N&amp;gt;&lt;/code&gt; containing the result of binary XOR on corresponding pairs of bits of &lt;code&gt;lhs&lt;/code&gt; and &lt;code&gt;rhs&lt;/code&gt;.</source>
          <target state="translated">3）返回一个 &lt;code&gt;bitset&amp;lt;N&amp;gt;&lt;/code&gt; 其中包含对 &lt;code&gt;lhs&lt;/code&gt; 和 &lt;code&gt;rhs&lt;/code&gt; 的相应位对的二进制XOR结果。</target>
        </trans-unit>
        <trans-unit id="9a23ccf8edcb838b99e8ee8c314068aead06ea37" translate="yes" xml:space="preserve">
          <source>3) Returns a const-qualified iterator to the reverse-beginning of the container &lt;code&gt;c&lt;/code&gt;.</source>
          <target state="translated">3）将const限定的迭代器返回到容器 &lt;code&gt;c&lt;/code&gt; 的反向开始。</target>
        </trans-unit>
        <trans-unit id="389c919ddf46812630bd663635937fafcec64a1e" translate="yes" xml:space="preserve">
          <source>3) Returns a const-qualified iterator to the reverse-end of the container &lt;code&gt;c&lt;/code&gt;.</source>
          <target state="translated">3）将const限定的迭代器返回到容器 &lt;code&gt;c&lt;/code&gt; 的后端。</target>
        </trans-unit>
        <trans-unit id="bba8a7d67c95b0c502523c9d7a3e9ff7954f65f2" translate="yes" xml:space="preserve">
          <source>3) Returns a numeric array of &lt;code&gt;bool&lt;/code&gt; containing elements each of which is obtained by applying the indicated comparison operator to the corresponding value of &lt;code&gt;lhs&lt;/code&gt; and &lt;code&gt;rhsv&lt;/code&gt;.</source>
          <target state="translated">3）返回包含元素的 &lt;code&gt;bool&lt;/code&gt; 的数字数组，每个元素都是通过将指示的比较运算符应用于 &lt;code&gt;lhs&lt;/code&gt; 和 &lt;code&gt;rhsv&lt;/code&gt; 的对应值而获得的。</target>
        </trans-unit>
        <trans-unit id="347d9f13e5f0de90871565d57db2a0da42067b3a" translate="yes" xml:space="preserve">
          <source>3) Returns a string containing the latest remote database version.</source>
          <target state="translated">3)返回一个包含最新远程数据库版本的字符串。</target>
        </trans-unit>
        <trans-unit id="3125c23569a2a0a23a19892e81d51814a585e9fc" translate="yes" xml:space="preserve">
          <source>3) Returns exactly &lt;code&gt;std::begin(c)&lt;/code&gt;, with &lt;code&gt;c&lt;/code&gt; always treated as const-qualified. If &lt;code&gt;C&lt;/code&gt; is a standard &lt;a href=&quot;../named_req/container&quot;&gt;Container&lt;/a&gt;, this always returns &lt;code&gt;C::const_iterator&lt;/code&gt;.</source>
          <target state="translated">3）精确返回 &lt;code&gt;std::begin(c)&lt;/code&gt; ，其中 &lt;code&gt;c&lt;/code&gt; 始终被视为const限定的。如果 &lt;code&gt;C&lt;/code&gt; 是标准&lt;a href=&quot;../named_req/container&quot;&gt;容器&lt;/a&gt;，则始终返回 &lt;code&gt;C::const_iterator&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="59aa2d9d6dec20809b1d0a178cdfd88d91b8be3e" translate="yes" xml:space="preserve">
          <source>3) Returns exactly &lt;code&gt;std::end(c)&lt;/code&gt;, with &lt;code&gt;c&lt;/code&gt; always treated as const-qualified. If &lt;code&gt;C&lt;/code&gt; is a standard &lt;a href=&quot;../named_req/container&quot;&gt;Container&lt;/a&gt;, this always returns a &lt;code&gt;C::const_iterator&lt;/code&gt;.</source>
          <target state="translated">3）精确返回 &lt;code&gt;std::end(c)&lt;/code&gt; ，其中 &lt;code&gt;c&lt;/code&gt; 始终被视为const限定符。如果 &lt;code&gt;C&lt;/code&gt; 是标准&lt;a href=&quot;../named_req/container&quot;&gt;容器&lt;/a&gt;，则始终返回 &lt;code&gt;C::const_iterator&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="996196d6521c5c7b2c554427b75896857ce5f751" translate="yes" xml:space="preserve">
          <source>3) Returns the format structure (of type &lt;a href=&quot;../money_base&quot;&gt;&lt;code&gt;std::money_base::format&lt;/code&gt;&lt;/a&gt;) which describes the formatting of positive monetary values.</source>
          <target state="translated">3）返回描述正货币价值格式的格式结构（类型为&lt;a href=&quot;../money_base&quot;&gt; &lt;code&gt;std::money_base::format&lt;/code&gt; &lt;/a&gt;）。</target>
        </trans-unit>
        <trans-unit id="477bbd5c6845e534597a26535c28e03e8a1d8033" translate="yes" xml:space="preserve">
          <source>3) Returns the native-format representation of the pathname by value.</source>
          <target state="translated">3)按值返回路径名的本机格式表示。</target>
        </trans-unit>
        <trans-unit id="216c048ed4bc4f444c6c4082ca1c39abe2a50014" translate="yes" xml:space="preserve">
          <source>3) Returns the pointer one past the end of the get area.</source>
          <target state="translated">3)返回得到区域结束后的一个指针。</target>
        </trans-unit>
        <trans-unit id="8134a36d5fcae3e74503193ede20ea1921facc82" translate="yes" xml:space="preserve">
          <source>3) Returns the pointer one past the end of the put area.</source>
          <target state="translated">3)返回指针,过了投放区域的一端。</target>
        </trans-unit>
        <trans-unit id="bfe9a00312f690b0210d8e9e30a3959a15595212" translate="yes" xml:space="preserve">
          <source>3) Returns the shared pointer pointed-to by &lt;code&gt;p&lt;/code&gt;. As with the non-specialized &lt;code&gt;&lt;a href=&quot;../../atomic/atomic_load&quot;&gt;std::atomic_load_explicit&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;mo&lt;/code&gt; cannot be &lt;code&gt;&lt;a href=&quot;../../atomic/memory_order&quot;&gt;std::memory_order_release&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;../../atomic/memory_order&quot;&gt;std::memory_order_acq_rel&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">3）返回 &lt;code&gt;p&lt;/code&gt; 指向的共享指针。与非专业化 &lt;code&gt;&lt;a href=&quot;../../atomic/atomic_load&quot;&gt;std::atomic_load_explicit&lt;/a&gt;&lt;/code&gt; ， &lt;code&gt;mo&lt;/code&gt; 不能成为 &lt;code&gt;&lt;a href=&quot;../../atomic/memory_order&quot;&gt;std::memory_order_release&lt;/a&gt;&lt;/code&gt; 或 &lt;code&gt;&lt;a href=&quot;../../atomic/memory_order&quot;&gt;std::memory_order_acq_rel&lt;/a&gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="30ff31b55716571c59891a700329900acd714bc3" translate="yes" xml:space="preserve">
          <source>3) Returns the stored &lt;code&gt;std::chrono::day&lt;/code&gt; value.</source>
          <target state="translated">3）返回存储的 &lt;code&gt;std::chrono::day&lt;/code&gt; 值。</target>
        </trans-unit>
        <trans-unit id="407bd14ded9dfd8122000901458dcecf239dd014" translate="yes" xml:space="preserve">
          <source>3) Returns the stored &lt;code&gt;std::chrono::weekday&lt;/code&gt; value.</source>
          <target state="translated">3）返回存储的 &lt;code&gt;std::chrono::weekday&lt;/code&gt; 值。</target>
        </trans-unit>
        <trans-unit id="0b6d156648e07714726cb41e1c416ee8bbf5bae5" translate="yes" xml:space="preserve">
          <source>3) Returns the string that is used for formatting of negative monetary values.</source>
          <target state="translated">3)返回用于负货币值格式化的字符串。</target>
        </trans-unit>
        <trans-unit id="653086588b06d64a925a3b2058d67d280de70556" translate="yes" xml:space="preserve">
          <source>3) Returns the string that is used for formatting of positive monetary values.</source>
          <target state="translated">3)返回用于格式化正货币值的字符串。</target>
        </trans-unit>
        <trans-unit id="ad5ed1f6fd61797eb99ea91f52811e8b9c04cba8" translate="yes" xml:space="preserve">
          <source>3) Returns the string to be used as the representation of the boolean value &lt;code&gt;true&lt;/code&gt;.</source>
          <target state="translated">3）返回要用作布尔值 &lt;code&gt;true&lt;/code&gt; 表示形式的字符串。</target>
        </trans-unit>
        <trans-unit id="40ceb43e70d8dd1204d160e3ce8b5e87fa0a3ebb" translate="yes" xml:space="preserve">
          <source>3) Same as (1), but evaluations of both expressions from (1) are known not to throw exceptions</source>
          <target state="translated">3)与(1)相同,但已知对(1)的两个表达式的评价都不会抛出异常。</target>
        </trans-unit>
        <trans-unit id="75fdda12724b08f74cb742d27bc91e98893793ec" translate="yes" xml:space="preserve">
          <source>3) Same as (1), but uses &lt;code&gt;&lt;a href=&quot;is_constructible&quot;&gt;std::is_nothrow_constructible&lt;/a&gt;&amp;lt;T, T&amp;amp;&amp;amp;&amp;gt;&lt;/code&gt;.</source>
          <target state="translated">3）与（1）相同，但使用 &lt;code&gt;&lt;a href=&quot;is_constructible&quot;&gt;std::is_nothrow_constructible&lt;/a&gt;&amp;lt;T, T&amp;amp;&amp;amp;&amp;gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="4666db7c3270a52a92a3e4e85c6daac2091990b6" translate="yes" xml:space="preserve">
          <source>3) Same as (1), but uses &lt;code&gt;&lt;a href=&quot;is_constructible&quot;&gt;std::is_nothrow_constructible&lt;/a&gt;&amp;lt;T, const T&amp;amp;&amp;gt;&lt;/code&gt;.</source>
          <target state="translated">3）与（1）相同，但使用 &lt;code&gt;&lt;a href=&quot;is_constructible&quot;&gt;std::is_nothrow_constructible&lt;/a&gt;&amp;lt;T, const T&amp;amp;&amp;gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="5b74c80c3864f0ecdb94780d074fa5d1029adf44" translate="yes" xml:space="preserve">
          <source>3) Same as (2), but if &lt;code&gt;&lt;a href=&quot;../directory_options&quot;&gt;std::filesystem::directory_options::skip_permission_denied&lt;/a&gt;&lt;/code&gt; is set in &lt;code&gt;options&lt;/code&gt; and construction encounters a permissions denied error, constructs the end iterator and does not report an error.</source>
          <target state="translated">3）与（2）相同，但如果在 &lt;code&gt;options&lt;/code&gt; 设置了 &lt;code&gt;&lt;a href=&quot;../directory_options&quot;&gt;std::filesystem::directory_options::skip_permission_denied&lt;/a&gt;&lt;/code&gt; 并且构造遇到权限拒绝错误，则构造结束迭代器且不报告错误。</target>
        </trans-unit>
        <trans-unit id="29cb7d52643a6db784f8f2d44725bcdca11329ab" translate="yes" xml:space="preserve">
          <source>3) Same as (2). &lt;code&gt;Y*&lt;/code&gt; must be implicitly convertible to &lt;code&gt;T*&lt;/code&gt;.</source>
          <target state="translated">3）与（2）相同。 &lt;code&gt;Y*&lt;/code&gt; 必须隐式转换为 &lt;code&gt;T*&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="43d958e8ae30ecb323acdee3ad42ee7d8c5989b9" translate="yes" xml:space="preserve">
          <source>3) Same as 1), but uses &lt;code&gt;&lt;a href=&quot;is_assignable&quot;&gt;std::is_nothrow_assignable&lt;/a&gt;&amp;lt;T&amp;amp;, T&amp;amp;&amp;amp;&amp;gt;&lt;/code&gt;</source>
          <target state="translated">3）与1）相同，但使用 &lt;code&gt;&lt;a href=&quot;is_assignable&quot;&gt;std::is_nothrow_assignable&lt;/a&gt;&amp;lt;T&amp;amp;, T&amp;amp;&amp;amp;&amp;gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="f0b6e4619b9b66b516a340ac59b04dc8ecf3114d" translate="yes" xml:space="preserve">
          <source>3) Same as 1), but uses &lt;code&gt;&lt;a href=&quot;is_assignable&quot;&gt;std::is_nothrow_assignable&lt;/a&gt;&amp;lt;T&amp;amp;, const T&amp;amp;&amp;gt;&lt;/code&gt;</source>
          <target state="translated">3）与1）相同，但使用 &lt;code&gt;&lt;a href=&quot;is_assignable&quot;&gt;std::is_nothrow_assignable&lt;/a&gt;&amp;lt;T&amp;amp;, const T&amp;amp;&amp;gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="bf00c1915110a8f8302efd280a583c34435221bc" translate="yes" xml:space="preserve">
          <source>3) Same as &lt;code&gt;get(s, count, widen('\n'))&lt;/code&gt;, that is, reads at most &lt;code&gt;count-1&lt;/code&gt; characters and stores them into character string pointed to by &lt;code&gt;s&lt;/code&gt; until &lt;code&gt;'\n'&lt;/code&gt; is found.</source>
          <target state="translated">3）与 &lt;code&gt;get(s, count, widen('\n'))&lt;/code&gt; ，也就是说，最多读取 &lt;code&gt;count-1&lt;/code&gt; 个字符并将其存储到 &lt;code&gt;s&lt;/code&gt; 所指向的字符串中，直到找到 &lt;code&gt;'\n'&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="f35e1ceefb7704839e967552ca2749d9e731cbf4" translate="yes" xml:space="preserve">
          <source>3) Same as &lt;code&gt;noexcept(true)&lt;/code&gt;</source>
          <target state="translated">3）与 &lt;code&gt;noexcept(true)&lt;/code&gt; 相同（true）</target>
        </trans-unit>
        <trans-unit id="28927916b5f2d702653bd8d3cdb9d87d5f2105c2" translate="yes" xml:space="preserve">
          <source>3) Same rules apply to possibly multilevel pointers to data members and possibly multilevel pointers to arrays of known and unknown bound (arrays to cv-qualified elements are considered to be cv-qualified themselves)(since C++17)</source>
          <target state="translated">3)同样的规则适用于可能的多级指向数据成员的指针和可能的多级指向已知和未知边界的数组的指针(指向cv限定元素的数组本身被认为是cv限定的)(自C++17起)</target>
        </trans-unit>
        <trans-unit id="c88bdf1e6603ab75c1a66dc891e02f5dac9a3278" translate="yes" xml:space="preserve">
          <source>3) Seeds the underlying engine with the seed sequence &lt;code&gt;seq&lt;/code&gt;. Effectively calls &lt;code&gt;e.seed(seq)&lt;/code&gt;, where &lt;code&gt;e&lt;/code&gt; is the underlying engine. This template only participate in overload resolution if &lt;code&gt;Sseq&lt;/code&gt; qualifies as a &lt;a href=&quot;../../../named_req/seedsequence&quot;&gt;SeedSequence&lt;/a&gt;. In particular, this template does not participate in overload resolution if &lt;code&gt;Sseq&lt;/code&gt; is implicitly convertible to &lt;code&gt;result_type&lt;/code&gt;.</source>
          <target state="translated">3）使用种子序列 &lt;code&gt;seq&lt;/code&gt; 播种基础引擎。有效地调用 &lt;code&gt;e.seed(seq)&lt;/code&gt; ，其中 &lt;code&gt;e&lt;/code&gt; 是基础引擎。此模板只参加重载如果 &lt;code&gt;Sseq&lt;/code&gt; 资格作为一个&lt;a href=&quot;../../../named_req/seedsequence&quot;&gt;SeedSequence&lt;/a&gt;。特别是，如果 &lt;code&gt;Sseq&lt;/code&gt; 可隐式转换为 &lt;code&gt;result_type&lt;/code&gt; ，则此模板不会参与重载解析。</target>
        </trans-unit>
        <trans-unit id="66256b254b71b452daa6c3c11989098848af677f" translate="yes" xml:space="preserve">
          <source>3) Sets the &lt;code&gt;floatfield&lt;/code&gt; of the stream &lt;code&gt;str&lt;/code&gt; to &lt;code&gt;fixed&lt;/code&gt; and &lt;code&gt;scientific&lt;/code&gt; simultaneously as if by calling &lt;code&gt;str.setf(&lt;a href=&quot;../ios_base/fmtflags&quot;&gt;std::ios_base::fixed&lt;/a&gt; | &lt;a href=&quot;../ios_base/fmtflags&quot;&gt;std::ios_base::scientific&lt;/a&gt;, &lt;a href=&quot;../ios_base/fmtflags&quot;&gt;std::ios_base::floatfield&lt;/a&gt;)&lt;/code&gt;. This enables hexadecimal floating-point formatting.</source>
          <target state="translated">3）像调用 &lt;code&gt;str.setf(&lt;a href=&quot;../ios_base/fmtflags&quot;&gt;std::ios_base::fixed&lt;/a&gt; | &lt;a href=&quot;../ios_base/fmtflags&quot;&gt;std::ios_base::scientific&lt;/a&gt;, &lt;a href=&quot;../ios_base/fmtflags&quot;&gt;std::ios_base::floatfield&lt;/a&gt;)&lt;/code&gt; &lt;a href=&quot;../ios_base/fmtflags&quot;&gt;std :: ios_base :: fixed&lt;/a&gt; | &lt;a href=&quot;../ios_base/fmtflags&quot;&gt;std :: ios_base :: scientific&lt;/a&gt;，&lt;a href=&quot;../ios_base/fmtflags&quot;&gt;std :: ios_base :: floatfield&lt;/a&gt;） &lt;code&gt;floatfield&lt;/code&gt; ，将流 &lt;code&gt;str&lt;/code&gt; 的floatfield设置为 &lt;code&gt;fixed&lt;/code&gt; 和 &lt;code&gt;scientific&lt;/code&gt; 。这将启用十六进制浮点格式。</target>
        </trans-unit>
        <trans-unit id="539c675f402dc407efe8702c820cd3501d36e4b9" translate="yes" xml:space="preserve">
          <source>3) Sets the bits to the result of binary XOR on corresponding pairs of bits of &lt;code&gt;*this&lt;/code&gt; and &lt;code&gt;other&lt;/code&gt;.</source>
          <target state="translated">3）在 &lt;code&gt;*this&lt;/code&gt; 和 &lt;code&gt;other&lt;/code&gt; 的相应位对上，将这些位设置为二进制XOR的结果。</target>
        </trans-unit>
        <trans-unit id="0880c4c5eccb5f5716a83df72128c2a2e98bf13e" translate="yes" xml:space="preserve">
          <source>3) Shifts the elements towards the end of the range. If &lt;code&gt;n &amp;lt;= 0 || n &amp;gt;= last - first&lt;/code&gt;, there are no effects. Otherwise, for every integer &lt;code&gt;i&lt;/code&gt; in &lt;code&gt;[0, last - first - n)&lt;/code&gt;, moves the element originally at position &lt;code&gt;first + i&lt;/code&gt; to position &lt;code&gt;first + n + i&lt;/code&gt;. If &lt;code&gt;ForwardIt&lt;/code&gt; meets the &lt;a href=&quot;../named_req/bidirectionaliterator&quot;&gt;LegacyBidirectionalIterator&lt;/a&gt; requirements, then the moves are performed in decreasing order of &lt;code&gt;i&lt;/code&gt; starting from &lt;code&gt;last - first - n - 1&lt;/code&gt;.</source>
          <target state="translated">3）将元素移到范围的末尾。如果 &lt;code&gt;n &amp;lt;= 0 || n &amp;gt;= last - first&lt;/code&gt; ，没有效果。否则，对于每个整数 &lt;code&gt;i&lt;/code&gt; 在 &lt;code&gt;[0, last - first - n)&lt;/code&gt; ，原本在位置移动元件 &lt;code&gt;first + i&lt;/code&gt; 到位置 &lt;code&gt;first + n + i&lt;/code&gt; 。如果 &lt;code&gt;ForwardIt&lt;/code&gt; 满足&lt;a href=&quot;../named_req/bidirectionaliterator&quot;&gt;LegacyBidirectionalIterator的&lt;/a&gt;要求，则从 &lt;code&gt;i&lt;/code&gt; 的降序开始执行移动，从 &lt;code&gt;last - first - n - 1&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="3c9d0c2185c5586bd7bed52acf3ae314e951d96c" translate="yes" xml:space="preserve">
          <source>3) Specialization for array types. Provides a member type &lt;code&gt;value_type&lt;/code&gt; equal to &lt;code&gt;&lt;a href=&quot;../types/remove_cv&quot;&gt;std::remove_cv_t&lt;/a&gt;&amp;lt;&lt;a href=&quot;../types/remove_extent&quot;&gt;std::remove_extent_t&lt;/a&gt;&amp;lt;I&amp;gt;&amp;gt;&lt;/code&gt;.</source>
          <target state="translated">3）数组类型的专业化。提供等于 &lt;code&gt;&lt;a href=&quot;../types/remove_cv&quot;&gt;std::remove_cv_t&lt;/a&gt;&amp;lt;&lt;a href=&quot;../types/remove_extent&quot;&gt;std::remove_extent_t&lt;/a&gt;&amp;lt;I&amp;gt;&amp;gt;&lt;/code&gt; &amp;lt; &lt;a href=&quot;../types/remove_extent&quot;&gt;std :: remove_extent_t&lt;/a&gt; &amp;lt;I &amp;gt;&amp;gt;的成员类型 &lt;code&gt;value_type&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="58bd4662686ae1223f5baf954179e2d03f2c1d7f" translate="yes" xml:space="preserve">
          <source>3) Specialization for const-qualified types.</source>
          <target state="translated">3)对const-qualified类型的专门化。</target>
        </trans-unit>
        <trans-unit id="54ab7c739fef8476a189076fbf661003474506a2" translate="yes" xml:space="preserve">
          <source>3) Static or thread-local object (not necessarily of class type), that is not initialized by a constructor call, if the object is &lt;a href=&quot;value_initialization&quot;&gt;value-initialized&lt;/a&gt; or if every expression in its initializer is a constant expression.</source>
          <target state="translated">3）如果静态或线程局部对象（不一定是类类型），则不通过构造函数调用来初始化，如果该对象是&lt;a href=&quot;value_initialization&quot;&gt;值初始化的，&lt;/a&gt;或者其初始化程序中的每个表达式都是常量表达式。</target>
        </trans-unit>
        <trans-unit id="097d0b441067ba5d47d8543320b37efde3660d0b" translate="yes" xml:space="preserve">
          <source>3) Subtracts &lt;code&gt;d.count()&lt;/code&gt; days from &lt;code&gt;wd&lt;/code&gt;. Equivalent to &lt;code&gt;return wd + -d;&lt;/code&gt;</source>
          <target state="translated">3）从 &lt;code&gt;wd&lt;/code&gt; 减去 &lt;code&gt;d.count()&lt;/code&gt; 天。等效于 &lt;code&gt;return wd + -d;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="2f3dca6824ef61799f78ac90e853a90658e6bfab" translate="yes" xml:space="preserve">
          <source>3) Subtracts &lt;code&gt;ds.count()&lt;/code&gt; days from &lt;code&gt;d&lt;/code&gt;.</source>
          <target state="translated">3）从 &lt;code&gt;d&lt;/code&gt; 减去 &lt;code&gt;ds.count()&lt;/code&gt; 天。</target>
        </trans-unit>
        <trans-unit id="7037daccc56ce1933ba8a1fbeeb87a58e2f62d6d" translate="yes" xml:space="preserve">
          <source>3) Subtracts &lt;code&gt;ms.count()&lt;/code&gt; months from &lt;code&gt;m&lt;/code&gt; and returns the result. Equivalent to &lt;code&gt;return m + -ms;&lt;/code&gt;</source>
          <target state="translated">3）从 &lt;code&gt;m&lt;/code&gt; 中减去 &lt;code&gt;ms.count()&lt;/code&gt; 个月并返回结果。等效于 &lt;code&gt;return m + -ms;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="ed35f317e0d17207eecbd63ea299f598c773b64d" translate="yes" xml:space="preserve">
          <source>3) Subtracts &lt;code&gt;ys.count()&lt;/code&gt; years from &lt;code&gt;y&lt;/code&gt;.</source>
          <target state="translated">3）从 &lt;code&gt;y&lt;/code&gt; 减去 &lt;code&gt;ys.count()&lt;/code&gt; 年。</target>
        </trans-unit>
        <trans-unit id="05713a69cd3b7ea822c8c9b8e7caf63a80afbb9b" translate="yes" xml:space="preserve">
          <source>3) Suitably declared &lt;a href=&quot;name#Qualified_identifiers&quot;&gt;qualified identifiers&lt;/a&gt; (e.g. &lt;code&gt;&lt;a href=&quot;../string/basic_string/npos&quot;&gt;std::string::npos&lt;/a&gt;&lt;/code&gt;)</source>
          <target state="translated">3）适当声明的&lt;a href=&quot;name#Qualified_identifiers&quot;&gt;合格标识符&lt;/a&gt;（例如 &lt;code&gt;&lt;a href=&quot;../string/basic_string/npos&quot;&gt;std::string::npos&lt;/a&gt;&lt;/code&gt; ）</target>
        </trans-unit>
        <trans-unit id="4f76236eac167e2ccfa25151cd48c3dd1b1bd111" translate="yes" xml:space="preserve">
          <source>3) The</source>
          <target state="translated">(3)</target>
        </trans-unit>
        <trans-unit id="bfa5d73f47f7efd6871f71c1cedbefaef7874a84" translate="yes" xml:space="preserve">
          <source>3) The &lt;code&gt;static&lt;/code&gt; specifier is only allowed in the declarations of objects (except in function parameter lists), declarations of functions (except at block scope), and declarations of anonymous unions. When used in a declaration of a class member, it declares a &lt;a href=&quot;static&quot;&gt;static member&lt;/a&gt;. When used in a declaration of an object, it specifies static storage duration (except if accompanied by &lt;code&gt;thread_local&lt;/code&gt;). When used in a declaration at namespace scope, it specifies internal linkage.</source>
          <target state="translated">3）仅在对象声明（函数参数列表中除外），函数声明（块范围中除外）和匿名联合声明中才允许使用 &lt;code&gt;static&lt;/code&gt; 说明符。在类成员的声明中使用时，它声明一个&lt;a href=&quot;static&quot;&gt;静态成员&lt;/a&gt;。在对象的声明中使用时，它指定静态存储持续时间（除非 &lt;code&gt;thread_local&lt;/code&gt; ）。在命名空间范围的声明中使用时，它指定内部链接。</target>
        </trans-unit>
        <trans-unit id="a47e59365dd3deb1e9dc95fb2cf9637cc23e5693" translate="yes" xml:space="preserve">
          <source>3) The binary operation &lt;code&gt;binary_op&lt;/code&gt; is applied to pairs of elements from two ranges: one defined by &lt;code&gt;[first1, last1)&lt;/code&gt; and the other beginning at &lt;code&gt;first2&lt;/code&gt;.</source>
          <target state="translated">3）二进制运算 &lt;code&gt;binary_op&lt;/code&gt; 从两个范围施加到对元素组成：一个由下式定义 &lt;code&gt;[first1, last1)&lt;/code&gt; 并且在另一开头 &lt;code&gt;first2&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="99a25d1bfda3ab89fd10b1a019376ed17dbddf19" translate="yes" xml:space="preserve">
          <source>3) The buffer, which may be replaced by an external, user-provided buffer.</source>
          <target state="translated">3)缓冲区,可由外部的、用户提供的缓冲区代替。</target>
        </trans-unit>
        <trans-unit id="b9fea7e9e911871543216c2bca462ae2d68f713a" translate="yes" xml:space="preserve">
          <source>3) The comma operator (&lt;code&gt;,&lt;/code&gt;). The value for the empty pack is &lt;code&gt;void()&lt;/code&gt;</source>
          <target state="translated">3）逗号运算符（ &lt;code&gt;,&lt;/code&gt; ）。空包装的值是 &lt;code&gt;void()&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="106baa92685ed4789c9f3278b624715075f482d4" translate="yes" xml:space="preserve">
          <source>3) The copy constructor is deleted, &lt;code&gt;wbuffer_convert&lt;/code&gt; is not &lt;a href=&quot;../../named_req/copyconstructible&quot;&gt;CopyConstructible&lt;/a&gt;</source>
          <target state="translated">3）复制构造函数被删除， &lt;code&gt;wbuffer_convert&lt;/code&gt; 不是&lt;a href=&quot;../../named_req/copyconstructible&quot;&gt;CopyConstructible&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="57c540f15553b610f14a86f8853f67d76a13deaa" translate="yes" xml:space="preserve">
          <source>3) The copy constructor is deleted: &lt;code&gt;std::random_device&lt;/code&gt; is not copyable nor movable.</source>
          <target state="translated">3）复制构造函数被删除： &lt;code&gt;std::random_device&lt;/code&gt; 不可复制或不可移动。</target>
        </trans-unit>
        <trans-unit id="538902239ad978c74ef7a4bcaa6ed7a88a4c7c1c" translate="yes" xml:space="preserve">
          <source>3) The copy constructor was declared &lt;code&gt;private:&lt;/code&gt; and not defined until C++11 and is declared as deleted in C++11: I/O streams are not &lt;a href=&quot;../../named_req/copyconstructible&quot;&gt;CopyConstructible&lt;/a&gt;.</source>
          <target state="translated">3）复制构造函数被声明为 &lt;code&gt;private:&lt;/code&gt; 并且直到C ++ 11才被定义，并且在C ++ 11中被声明为已删除：I / O流不是&lt;a href=&quot;../../named_req/copyconstructible&quot;&gt;CopyConstructible&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="ef862ed2daae32aa871acb691d2af8257cf12604" translate="yes" xml:space="preserve">
          <source>3) The execution policy type used as a unique type to disambiguate parallel algorithm overloading and indicate that a parallel algorithm's execution may be parallelized, vectorized, or migrated across threads (such as by a parent-stealing scheduler). The invocations of element access functions in parallel algorithms invoked with this policy are permitted to execute in an unordered fashion in unspecified threads, and unsequenced with respect to one another within each thread.</source>
          <target state="translated">3)执行策略类型作为唯一的类型,用于歧义并行算法的超载,并表示并行算法的执行可以并行化、矢量化或跨线程迁移(如通过偷父调度器)。使用该策略调用的并行算法中元素访问函数的调用允许在未指定的线程中以无序的方式执行,并且在每个线程中彼此之间没有顺序。</target>
        </trans-unit>
        <trans-unit id="5b969fc5d4983cfa6b335ab96d4eaa577cf84b39" translate="yes" xml:space="preserve">
          <source>3) The members declared after the specifier have private member access</source>
          <target state="translated">3)在指定者之后声明的成员有私有成员访问权。</target>
        </trans-unit>
        <trans-unit id="a27c6d6d4626ae8c9e794867e6db9bdc8a12c3bb" translate="yes" xml:space="preserve">
          <source>3) The move constructor copies the value of &lt;code&gt;gcount()&lt;/code&gt; from &lt;code&gt;rhs&lt;/code&gt;, sets the gcount() value of rhs to zero, and uses &lt;code&gt;basic_ios&amp;lt;CharT, Traits&amp;gt;::move(rhs)&lt;/code&gt; to move all basic_ios members, except for the &lt;code&gt;rdbuf()&lt;/code&gt;, from &lt;code&gt;rhs&lt;/code&gt; into &lt;code&gt;*this&lt;/code&gt;. This move constructor is protected: it is called by the move constructors of movable input stream classes &lt;code&gt;&lt;a href=&quot;../basic_ifstream&quot;&gt;std::basic_ifstream&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;../basic_istringstream&quot;&gt;std::basic_istringstream&lt;/a&gt;&lt;/code&gt;, which know how to correctly move the associated stream buffer.</source>
          <target state="translated">3）此举构造拷贝的价值 &lt;code&gt;gcount()&lt;/code&gt; 从 &lt;code&gt;rhs&lt;/code&gt; ，设置RHS的gcount的（）值为零，和用途 &lt;code&gt;basic_ios&amp;lt;CharT, Traits&amp;gt;::move(rhs)&lt;/code&gt; 移动所有basic_ios成员，除了 &lt;code&gt;rdbuf()&lt;/code&gt; ，从 &lt;code&gt;rhs&lt;/code&gt; 到 &lt;code&gt;*this&lt;/code&gt; 。此move构造函数受到保护：它由可移动输入流类 &lt;code&gt;&lt;a href=&quot;../basic_ifstream&quot;&gt;std::basic_ifstream&lt;/a&gt;&lt;/code&gt; 和 &lt;code&gt;&lt;a href=&quot;../basic_istringstream&quot;&gt;std::basic_istringstream&lt;/a&gt;&lt;/code&gt; 的move构造函数调用，它们知道如何正确移动关联的流缓冲区。</target>
        </trans-unit>
        <trans-unit id="8253f464ab63b9544bb4b7a5ba673657dcaa92f7" translate="yes" xml:space="preserve">
          <source>3) The move constructor uses &lt;code&gt;basic_ios&amp;lt;CharT, Traits&amp;gt;::move(rhs)&lt;/code&gt; to move all basic_ios members, except for the &lt;code&gt;rdbuf()&lt;/code&gt;, from &lt;code&gt;rhs&lt;/code&gt; into &lt;code&gt;*this&lt;/code&gt;. This move constructor is protected: it is called by the move constructors of movable output stream classes &lt;code&gt;&lt;a href=&quot;../basic_ofstream&quot;&gt;std::basic_ofstream&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;../basic_ostringstream&quot;&gt;std::basic_ostringstream&lt;/a&gt;&lt;/code&gt;, which know how to correctly move the associated streambuffer.</source>
          <target state="translated">3）move构造函数使用 &lt;code&gt;basic_ios&amp;lt;CharT, Traits&amp;gt;::move(rhs)&lt;/code&gt; 将除 &lt;code&gt;rdbuf()&lt;/code&gt; 外的所有basic_ios成员从 &lt;code&gt;rhs&lt;/code&gt; 移至 &lt;code&gt;*this&lt;/code&gt; 。此move构造函数受到保护：它由可移动输出流类 &lt;code&gt;&lt;a href=&quot;../basic_ofstream&quot;&gt;std::basic_ofstream&lt;/a&gt;&lt;/code&gt; 和 &lt;code&gt;&lt;a href=&quot;../basic_ostringstream&quot;&gt;std::basic_ostringstream&lt;/a&gt;&lt;/code&gt; 的move构造函数调用，它们知道如何正确移动关联的流缓冲区。</target>
        </trans-unit>
        <trans-unit id="1c5f5e6303c3981281bdf12b22a9967c96eff97c" translate="yes" xml:space="preserve">
          <source>3) The numeric arguments &lt;code&gt;units&lt;/code&gt; is converted to a wide character string as if by &lt;code&gt;ct.widen(buf1, buf1 + &lt;a href=&quot;../../io/c/fprintf&quot;&gt;std::sprintf&lt;/a&gt;(buf1, &quot;%.0Lf&quot;, units), buf2)&lt;/code&gt;, where &lt;code&gt;ct&lt;/code&gt; is the &lt;code&gt;&lt;a href=&quot;../ctype&quot;&gt;std::ctype&lt;/a&gt;&lt;/code&gt; facet imbued in &lt;code&gt;str.getloc()&lt;/code&gt; and &lt;code&gt;buf1&lt;/code&gt; and &lt;code&gt;buf2&lt;/code&gt; are sufficiently large character buffers. The resulting character string &lt;code&gt;buf2&lt;/code&gt; is processed, formatted, and output to &lt;code&gt;out&lt;/code&gt; as desribed below.</source>
          <target state="translated">3）将数字参数 &lt;code&gt;units&lt;/code&gt; 转换为宽字符串，就像通过 &lt;code&gt;ct.widen(buf1, buf1 + &lt;a href=&quot;../../io/c/fprintf&quot;&gt;std::sprintf&lt;/a&gt;(buf1, &quot;%.0Lf&quot;, units), buf2)&lt;/code&gt; ，其中 &lt;code&gt;ct&lt;/code&gt; 是 &lt;code&gt;&lt;a href=&quot;../ctype&quot;&gt;std::ctype&lt;/a&gt;&lt;/code&gt; ::: &lt;code&gt;str.getloc()&lt;/code&gt; 在str.getloc（）中的ctype facet 和 &lt;code&gt;buf1&lt;/code&gt; 和 &lt;code&gt;buf2&lt;/code&gt; 是足够大的字符缓冲区。生成的字符串 &lt;code&gt;buf2&lt;/code&gt; 进行处理，格式化并输出到 &lt;code&gt;out&lt;/code&gt; ，如下所述。</target>
        </trans-unit>
        <trans-unit id="9d23036119f9057dac90391026d9f10d74793ec9" translate="yes" xml:space="preserve">
          <source>3) The pointer one past the end of the get area.</source>
          <target state="translated">3)指针一过得到区域的终点。</target>
        </trans-unit>
        <trans-unit id="4522f0a21976a2225b32579b72b1aea157568164" translate="yes" xml:space="preserve">
          <source>3) The pointer one past the end of the put area.</source>
          <target state="translated">3)指针一过推杆区的终点。</target>
        </trans-unit>
        <trans-unit id="5739e5b8d09abf81265c1829686de1ae25206b35" translate="yes" xml:space="preserve">
          <source>3) The program is ill-formed if &lt;code&gt;&lt;a href=&quot;../../types/is_constructible&quot;&gt;std::is_constructible_v&lt;/a&gt;&amp;lt;T, U&amp;gt;&lt;/code&gt; is &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">3）如果 &lt;code&gt;&lt;a href=&quot;../../types/is_constructible&quot;&gt;std::is_constructible_v&lt;/a&gt;&amp;lt;T, U&amp;gt;&lt;/code&gt; 为 &lt;code&gt;false&lt;/code&gt; ，则程序格式错误。</target>
        </trans-unit>
        <trans-unit id="6233aa93b494442e3d3982e63f956a5fb19dfba8" translate="yes" xml:space="preserve">
          <source>3) The proximate form of the path</source>
          <target state="translated">3)路径的近似形式</target>
        </trans-unit>
        <trans-unit id="f7c28efecd0b1bf8f774df7cb16171047445f27c" translate="yes" xml:space="preserve">
          <source>3) The random number generator is the function object &lt;code&gt;g&lt;/code&gt;.</source>
          <target state="translated">3）随机数生成器是函数对象 &lt;code&gt;g&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="e800546551b8927f2c5472761bbbcc6aea77c856" translate="yes" xml:space="preserve">
          <source>3) The result encoding in the case of &lt;code&gt;u8string()&lt;/code&gt; is always UTF-8.</source>
          <target state="translated">3）对于 &lt;code&gt;u8string()&lt;/code&gt; ），结果编码始终为UTF-8。</target>
        </trans-unit>
        <trans-unit id="8c7594a004dbf92a4cfa7dbf8383d65e67748ae8" translate="yes" xml:space="preserve">
          <source>3) The underlying iterator is initialized with that of &lt;code&gt;other&lt;/code&gt;.</source>
          <target state="translated">3）基础的迭代器用 &lt;code&gt;other&lt;/code&gt; 的初始化。</target>
        </trans-unit>
        <trans-unit id="37983c33230cd98fd38753f8dbad4d00fc819fa2" translate="yes" xml:space="preserve">
          <source>3) Then, non-static data members are initialized in order of declaration in the class definition.</source>
          <target state="translated">3)然后,按照类定义中声明的顺序对非静态数据成员进行初始化。</target>
        </trans-unit>
        <trans-unit id="09efa6229584955cc0d4f32db27a05bce6094a2d" translate="yes" xml:space="preserve">
          <source>3) This overload only participates in overload resolution if T is a specialization of std::pair. Equivalent to</source>
          <target state="translated">3)只有当T是std::pair的特殊化时,这个重载才会参与重载解析。相当于</target>
        </trans-unit>
        <trans-unit id="e8d1f320a7a5eb1a513d5f28ed9a79257cee0b53" translate="yes" xml:space="preserve">
          <source>3) Throws any exception thrown by the constructor of &lt;code&gt;T&lt;/code&gt;. Has the following</source>
          <target state="translated">3）抛出 &lt;code&gt;T&lt;/code&gt; 的构造函数抛出的任何异常。具有以下</target>
        </trans-unit>
        <trans-unit id="180d52fc736ff4085fc3cd183c0e31bace34a9e5" translate="yes" xml:space="preserve">
          <source>3) Transfers the elements in the range &lt;code&gt;[first, last)&lt;/code&gt; from &lt;code&gt;other&lt;/code&gt; into &lt;code&gt;*this&lt;/code&gt;. The elements are inserted before the element pointed to by &lt;code&gt;pos&lt;/code&gt;. The behavior is undefined if &lt;code&gt;pos&lt;/code&gt; is an iterator in the range &lt;code&gt;[first,last)&lt;/code&gt;.</source>
          <target state="translated">3）将 &lt;code&gt;[first, last)&lt;/code&gt; 范围内的元素从 &lt;code&gt;other&lt;/code&gt; 转移到 &lt;code&gt;*this&lt;/code&gt; 。元素插入 &lt;code&gt;pos&lt;/code&gt; 指向的元素之前。如果 &lt;code&gt;pos&lt;/code&gt; 是 &lt;code&gt;[first,last)&lt;/code&gt; 范围内的迭代器，则该行为是不确定的。</target>
        </trans-unit>
        <trans-unit id="3664df048e90beb28440427bae630d23ce78e957" translate="yes" xml:space="preserve">
          <source>3) Transfers the ownership of the object managed by &lt;code&gt;r&lt;/code&gt; to &lt;code&gt;*this&lt;/code&gt;. If &lt;code&gt;r&lt;/code&gt; manages no object, &lt;code&gt;*this&lt;/code&gt; manages no object too. After the assignment, &lt;code&gt;*this&lt;/code&gt; contains the pointer previously held by &lt;code&gt;r&lt;/code&gt;, and &lt;code&gt;use_count()==1&lt;/code&gt;; also &lt;code&gt;r&lt;/code&gt; is empty. Equivalent to &lt;code&gt;shared_ptr&amp;lt;T&amp;gt;(r).swap(*this)&lt;/code&gt;.</source>
          <target state="translated">3）将 &lt;code&gt;r&lt;/code&gt; 管理的对象的所有权转移到 &lt;code&gt;*this&lt;/code&gt; 。如果 &lt;code&gt;r&lt;/code&gt; 不管理任何对象，则 &lt;code&gt;*this&lt;/code&gt; 也不管理任何对象。分配后， &lt;code&gt;*this&lt;/code&gt; 包含先前由 &lt;code&gt;r&lt;/code&gt; 持有的指针，并且 &lt;code&gt;use_count()==1&lt;/code&gt; ； &lt;code&gt;r&lt;/code&gt; 也为空。等效于 &lt;code&gt;shared_ptr&amp;lt;T&amp;gt;(r).swap(*this)&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="8fb32edff5d6d482cde4402d55a0f26597a58a64" translate="yes" xml:space="preserve">
          <source>3) UTF-16 character literal, e.g. &lt;code&gt;u'貓'&lt;/code&gt;, but not &lt;code&gt;u'🍌'&lt;/code&gt; (&lt;code&gt;u'\U0001f34c'&lt;/code&gt;). Such literal has type &lt;code&gt;char16_t&lt;/code&gt; and the value equal to ISO 10646 code point value of c-char, provided that the code point value is representable with a single UTF-16 code unit (that is, c-char is in the range 0x0-0xFFFF, inclusive). If c-char is not representable with a single UTF-16 code unit, the program is ill-formed.</source>
          <target state="translated">3）UTF-16字符文字，例如 &lt;code&gt;u'貓'&lt;/code&gt; ，而不是 &lt;code&gt;u'🍌'&lt;/code&gt; （ &lt;code&gt;u'\U0001f34c'&lt;/code&gt; ）。此类文字的类型为 &lt;code&gt;char16_t&lt;/code&gt; ，其值等于c-char的ISO 10646代码点值，条件是该代码点值可用单个UTF-16代码单元表示（即，c-char的范围为0x0-0xFFFF） ， 包括的）。如果c-char无法用单个UTF-16代码单元表示，则程序格式错误。</target>
        </trans-unit>
        <trans-unit id="0eb1cd751938a22a6214ac1b9240979fd29cc6b0" translate="yes" xml:space="preserve">
          <source>3) UTF-8 encoded string literal. The type of a &lt;code&gt;u8&quot;...&quot;&lt;/code&gt; string literal is &lt;code&gt;const char[N]&lt;/code&gt;(until C++20)&lt;code&gt;const char8_t[N]&lt;/code&gt;(since C++20), where &lt;code&gt;N&lt;/code&gt; is the size of the string in UTF-8 code units including the null terminator.</source>
          <target state="translated">3）UTF-8编码的字符串文字。类型一的 &lt;code&gt;u8&quot;...&quot;&lt;/code&gt; 字符串文字 &lt;code&gt;const char[N]&lt;/code&gt; （直到C ++ 20） &lt;code&gt;const char8_t[N]&lt;/code&gt; （因为C ++ 20），其中 &lt;code&gt;N&lt;/code&gt; 是字符串的UTF-8的尺寸代码单元，包括空终止符。</target>
        </trans-unit>
        <trans-unit id="04ad1633cce0abf907d5083b7a4ffaf95348fe38" translate="yes" xml:space="preserve">
          <source>3) Uses a copy of &lt;code&gt;str&lt;/code&gt; as initial contents of the underlying string device. The underlying &lt;code&gt;basic_stringbuf&lt;/code&gt; object is constructed as &lt;code&gt;basic_stringbuf&amp;lt;Char,Traits,Allocator&amp;gt;(str, mode | ios_base::in)&lt;/code&gt;.</source>
          <target state="translated">3）使用 &lt;code&gt;str&lt;/code&gt; 的副本作为基础字符串设备的初始内容。基础 &lt;code&gt;basic_stringbuf&lt;/code&gt; 对象构造为 &lt;code&gt;basic_stringbuf&amp;lt;Char,Traits,Allocator&amp;gt;(str, mode | ios_base::in)&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="e835e4bcc4392bc0a331b564871e685c77ddf29f" translate="yes" xml:space="preserve">
          <source>3) Uses a copy of &lt;code&gt;str&lt;/code&gt; as initial contents of the underlying string device. The underlying &lt;code&gt;basic_stringbuf&lt;/code&gt; object is constructed as &lt;code&gt;basic_stringbuf&amp;lt;Char,Traits,Allocator&amp;gt;(str, mode | ios_base::out)&lt;/code&gt;.</source>
          <target state="translated">3）使用 &lt;code&gt;str&lt;/code&gt; 的副本作为基础字符串设备的初始内容。基础 &lt;code&gt;basic_stringbuf&lt;/code&gt; 对象构造为 &lt;code&gt;basic_stringbuf&amp;lt;Char,Traits,Allocator&amp;gt;(str, mode | ios_base::out)&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="83d42b2907d10c4217066cc14296a1b1547d6768" translate="yes" xml:space="preserve">
          <source>3) Uses a copy of &lt;code&gt;str&lt;/code&gt; as initial contents of the underlying string device. The underlying &lt;code&gt;basic_stringbuf&lt;/code&gt; object is constructed as &lt;code&gt;basic_stringbuf&amp;lt;Char,Traits,Allocator&amp;gt;(str, mode)&lt;/code&gt;.</source>
          <target state="translated">3）使用 &lt;code&gt;str&lt;/code&gt; 的副本作为基础字符串设备的初始内容。基础 &lt;code&gt;basic_stringbuf&lt;/code&gt; 对象构造为 &lt;code&gt;basic_stringbuf&amp;lt;Char,Traits,Allocator&amp;gt;(str, mode)&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="09bc43c84c31674f028769647df22694756ec5ee" translate="yes" xml:space="preserve">
          <source>3) Uses the &lt;a href=&quot;../../language/delete&quot;&gt;delete-expression&lt;/a&gt;&lt;code&gt;delete ptr&lt;/code&gt; if &lt;code&gt;T&lt;/code&gt; is not an array type; &lt;code&gt;delete[] ptr&lt;/code&gt; if &lt;code&gt;T&lt;/code&gt; is an array type(since C++17) as the deleter. &lt;code&gt;Y&lt;/code&gt; must be a complete type. The delete expression must be well-formed, have well-defined behavior and not throw any exceptions. This constructor additionally does not participate in overload resolution if the delete expression is not well-formed.(since C++17)</source>
          <target state="translated">3）如果 &lt;code&gt;T&lt;/code&gt; 不是数组类型，则使用&lt;a href=&quot;../../language/delete&quot;&gt;delete-expression &lt;/a&gt; &lt;code&gt;delete ptr&lt;/code&gt; ；如果 &lt;code&gt;T&lt;/code&gt; 是数组类型（从C ++ 17开始），则为 &lt;code&gt;delete[] ptr&lt;/code&gt; 。 &lt;code&gt;Y&lt;/code&gt; 必须是完整类型。 delete表达式必须格式正确，行为明确且不能引发任何异常。如果delete表达式的格式不正确，则此构造方法还不参与重载解析。（从C ++ 17开始）</target>
        </trans-unit>
        <trans-unit id="c395b404baa79c386b4d710ca413c2f1807e804e" translate="yes" xml:space="preserve">
          <source>3) Uses the specified deleter &lt;code&gt;d&lt;/code&gt; as the deleter. &lt;code&gt;Deleter&lt;/code&gt; must be callable for the type &lt;code&gt;T&lt;/code&gt;, i.e. &lt;code&gt;d(ptr)&lt;/code&gt; must be well formed, have well-defined behavior and not throw any exceptions. &lt;code&gt;Deleter&lt;/code&gt; must be &lt;a href=&quot;../../named_req/copyconstructible&quot;&gt;CopyConstructible&lt;/a&gt;, and its copy constructor and destructor must not throw exceptions. Equivalent to &lt;code&gt;shared_ptr&amp;lt;T&amp;gt;(ptr, d).swap(*this);&lt;/code&gt;.</source>
          <target state="translated">3）使用指定的删除器 &lt;code&gt;d&lt;/code&gt; 作为删除器。 &lt;code&gt;Deleter&lt;/code&gt; 必须是类型 &lt;code&gt;T&lt;/code&gt; 的可调用对象，即 &lt;code&gt;d(ptr)&lt;/code&gt; 的格式必须正确，行为明确，并且不会引发任何异常。 &lt;code&gt;Deleter&lt;/code&gt; 必须是&lt;a href=&quot;../../named_req/copyconstructible&quot;&gt;CopyConstructible&lt;/a&gt;，并且其复制构造函数和析构函数不得抛出异常。等效于 &lt;code&gt;shared_ptr&amp;lt;T&amp;gt;(ptr, d).swap(*this);&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="8035b06b4704ada294cf21d12af4d289132f3e32" translate="yes" xml:space="preserve">
          <source>3) When an array of any &lt;a href=&quot;types#Character_types&quot;&gt;character type&lt;/a&gt; is &lt;a href=&quot;aggregate_initialization#Character_arrays&quot;&gt;initialized with a string literal&lt;/a&gt; that is too short, the remainder of the array is zero-initialized.</source>
          <target state="translated">3）当任何的阵列&lt;a href=&quot;types#Character_types&quot;&gt;字符类型&lt;/a&gt;是&lt;a href=&quot;aggregate_initialization#Character_arrays&quot;&gt;用于字符串初始化&lt;/a&gt;太短，则阵列的剩余部分是零初始化。</target>
        </trans-unit>
        <trans-unit id="7f13d95ac4e8156c5779496326ed3f4e7b6fe42b" translate="yes" xml:space="preserve">
          <source>3) When two variables with &lt;code&gt;&quot;C&quot;&lt;/code&gt; language linkage and the same name that appear in different namespaces, they refer to the same variable.</source>
          <target state="translated">3）当两个具有 &lt;code&gt;&quot;C&quot;&lt;/code&gt; 语言链接且名称相同的变量出现在不同的命名空间中时，它们引用的是同一变量。</target>
        </trans-unit>
        <trans-unit id="4155f7c75562837f51e2a50206a32e961f0f059b" translate="yes" xml:space="preserve">
          <source>3) Wraps a non-const member function with a single parameter.</source>
          <target state="translated">3)用一个单一的参数包装一个非const成员函数。</target>
        </trans-unit>
        <trans-unit id="295654c8321ff1ec4c4e8a96eac87a6e3ed5f21e" translate="yes" xml:space="preserve">
          <source>3) Writes the results to a character string &lt;code&gt;buffer&lt;/code&gt;.</source>
          <target state="translated">3）将结果写入字符串 &lt;code&gt;buffer&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="4f587e6945116c94dad66390db735ce2ddace527" translate="yes" xml:space="preserve">
          <source>3) Writes the results to a wide string &lt;code&gt;buffer&lt;/code&gt;. At most &lt;code&gt;size-1&lt;/code&gt; wide characters are written followed by null wide character.</source>
          <target state="translated">3）将结果写入宽字符串 &lt;code&gt;buffer&lt;/code&gt; 。最多写入 &lt;code&gt;size-1&lt;/code&gt; 宽字符，后跟空宽字符。</target>
        </trans-unit>
        <trans-unit id="803e45e8f371490b430b8a7554b3a153af2d6267" translate="yes" xml:space="preserve">
          <source>3) adds &lt;code&gt;volatile&lt;/code&gt;.</source>
          <target state="translated">3）添加 &lt;code&gt;volatile&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="0283dee7c30148a16571de6fdc53d78b6a17c0c6" translate="yes" xml:space="preserve">
          <source>3) all names except for the functions and function templates are ignored (no collision with variables)</source>
          <target state="translated">3)除了函数和函数模板外,所有名称都被忽略(不与变量冲突)。</target>
        </trans-unit>
        <trans-unit id="b92787ecfa67da771730f619ea829e7c5b701fde" translate="yes" xml:space="preserve">
          <source>3) any declaration that is not a function or a function template (e.g. a function object or another variable whose name conflicts with the name of the function that's being looked up)</source>
          <target state="translated">3)任何不是函数或函数模板的声明(如函数对象或其他变量的名称与被查询的函数名称冲突)。</target>
        </trans-unit>
        <trans-unit id="658e8718bdcaedd95b8e191a1d44644c43f146f3" translate="yes" xml:space="preserve">
          <source>3) as a function call argument</source>
          <target state="translated">3)作为函数调用参数</target>
        </trans-unit>
        <trans-unit id="7edf1af248df188c9ec386cbc14ba718e90ef9b4" translate="yes" xml:space="preserve">
          <source>3) atomic constraints</source>
          <target state="translated">3)原子约束</target>
        </trans-unit>
        <trans-unit id="3e3283342f36405013afd4a4f53a71bf0470e73a" translate="yes" xml:space="preserve">
          <source>3) attribute with arguments, such as &lt;code&gt;[[deprecated(&quot;because&quot;)]]&lt;/code&gt;</source>
          <target state="translated">3）带参数的属性，例如 &lt;code&gt;[[deprecated(&quot;because&quot;)]]&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="6d691fb320f3108e5388841a4dc3ecd35f03a748" translate="yes" xml:space="preserve">
          <source>3) binary right fold</source>
          <target state="translated">3)二进制右折</target>
        </trans-unit>
        <trans-unit id="04a489ba555c6fcc3c9976d9b52269cfe1cff7db" translate="yes" xml:space="preserve">
          <source>3) bitwise OR</source>
          <target state="translated">3)位元OR</target>
        </trans-unit>
        <trans-unit id="652c10999778959225a32c8a85781e8e17e5cf95" translate="yes" xml:space="preserve">
          <source>3) braced-init-list: possibly empty, comma-separated list of expressions and other braced-init-lists</source>
          <target state="translated">3)braced-init-list:可能是空的,用逗号分隔的表达式列表和其他braced-init-list。</target>
        </trans-unit>
        <trans-unit id="4a92bfe20c2b41c2ffab2f58ee0fc0a40ff982ba" translate="yes" xml:space="preserve">
          <source>3) by-copy capture with an &lt;a href=&quot;initialization&quot;&gt;initializer&lt;/a&gt;</source>
          <target state="translated">3）使用&lt;a href=&quot;initialization&quot;&gt;初始化程序&lt;/a&gt;按副本捕获</target>
        </trans-unit>
        <trans-unit id="bc97f5c61121198677a9697e708fca91bc3491c3" translate="yes" xml:space="preserve">
          <source>3) calls &lt;code&gt;&lt;a href=&quot;../byte/strtof&quot;&gt;std::strtold&lt;/a&gt;(str.c_str(), &amp;amp;ptr)&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;../wide/wcstof&quot;&gt;std::wcstold&lt;/a&gt;(str.c_str(), &amp;amp;ptr)&lt;/code&gt;</source>
          <target state="translated">3）调用 &lt;code&gt;&lt;a href=&quot;../byte/strtof&quot;&gt;std::strtold&lt;/a&gt;(str.c_str(), &amp;amp;ptr)&lt;/code&gt; 或 &lt;code&gt;&lt;a href=&quot;../wide/wcstof&quot;&gt;std::wcstold&lt;/a&gt;(str.c_str(), &amp;amp;ptr)&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="8f57fc1089d4ab92c199a3abb2e4e84fe0b895d7" translate="yes" xml:space="preserve">
          <source>3) calls &lt;code&gt;&lt;a href=&quot;../byte/strtol&quot;&gt;std::strtoll&lt;/a&gt;(str.c_str(), &amp;amp;ptr, base)&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;../wide/wcstol&quot;&gt;std::wcstoll&lt;/a&gt;(str.c_str(), &amp;amp;ptr, base)&lt;/code&gt;</source>
          <target state="translated">3）调用 &lt;code&gt;&lt;a href=&quot;../byte/strtol&quot;&gt;std::strtoll&lt;/a&gt;(str.c_str(), &amp;amp;ptr, base)&lt;/code&gt; 或 &lt;code&gt;&lt;a href=&quot;../wide/wcstol&quot;&gt;std::wcstoll&lt;/a&gt;(str.c_str(), &amp;amp;ptr, base)&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="b58c2fe23c209a07cbd3e585d20b1c41b3e21888" translate="yes" xml:space="preserve">
          <source>3) characters in the range &lt;code&gt;[first2, last2)&lt;/code&gt;.</source>
          <target state="translated">3）范围 &lt;code&gt;[first2, last2)&lt;/code&gt; 中的字符。</target>
        </trans-unit>
        <trans-unit id="55c9063212dece2c40b250c09342ca588b514856" translate="yes" xml:space="preserve">
          <source>3) copy constructor. Constructs the container with the copy of the contents of &lt;code&gt;other&lt;/code&gt;, copies the load factor, the predicate, and the hash function as well. If &lt;code&gt;alloc&lt;/code&gt; is not provided, allocator is obtained by calling &lt;code&gt;&lt;a href=&quot;../../memory/allocator_traits&quot;&gt;std::allocator_traits&lt;/a&gt;&amp;lt;allocator_type&amp;gt;::select_on_container_copy_construction(other.get_allocator())&lt;/code&gt;.</source>
          <target state="translated">3）复制构造函数。用 &lt;code&gt;other&lt;/code&gt; 的内容的副本构造容器，同时也复制负载因子，谓词和hash函数。如果未提供 &lt;code&gt;alloc&lt;/code&gt; ，则通过调用 &lt;code&gt;&lt;a href=&quot;../../memory/allocator_traits&quot;&gt;std::allocator_traits&lt;/a&gt;&amp;lt;allocator_type&amp;gt;::select_on_container_copy_construction(other.get_allocator())&lt;/code&gt; 获得分配器。</target>
        </trans-unit>
        <trans-unit id="6893855af86b5c0cd63c25edcf00090090e8fc67" translate="yes" xml:space="preserve">
          <source>3) counts elements for which predicate &lt;code&gt;p&lt;/code&gt; returns &lt;code&gt;true&lt;/code&gt;.</source>
          <target state="translated">3）计算谓词 &lt;code&gt;p&lt;/code&gt; 返回 &lt;code&gt;true&lt;/code&gt; 的元素。</target>
        </trans-unit>
        <trans-unit id="760b93562a5dc4b1eb578d2151b6295f3cf52a06" translate="yes" xml:space="preserve">
          <source>3) cv-qualification rules are the same as for member of object operator, with one additional rule: a pointer to member that refers to a mutable member cannot be used to modify that member in a const object;</source>
          <target state="translated">3)cv-限定规则与对象操作符的成员相同,但多了一条规则:指向可变成员的成员指针不能用于修改const对象中的该成员。</target>
        </trans-unit>
        <trans-unit id="a0f626627b9f81f4e7e0997546307bc99fec13bb" translate="yes" xml:space="preserve">
          <source>3) cv-qualified versions of one of the above</source>
          <target state="translated">3)以上其中一项的cv限定版。</target>
        </trans-unit>
        <trans-unit id="1048b9840acffeb9919c9a3a9dd1d739a28b7cb3" translate="yes" xml:space="preserve">
          <source>3) default label in a &lt;a href=&quot;switch&quot;&gt;switch&lt;/a&gt; statement.</source>
          <target state="translated">3）&lt;a href=&quot;switch&quot;&gt;switch&lt;/a&gt;语句中的默认标签。</target>
        </trans-unit>
        <trans-unit id="b3ed4381a4c5a4a0a776d0e839431fab990896f2" translate="yes" xml:space="preserve">
          <source>3) explicitly deleted function definition</source>
          <target state="translated">3)显式删除的函数定义</target>
        </trans-unit>
        <trans-unit id="a97ff3ac0c9ec92446d737c4d9d5b54e6f2b8b3b" translate="yes" xml:space="preserve">
          <source>3) files created by &lt;code&gt;&lt;a href=&quot;../../io/c/tmpfile&quot;&gt;std::tmpfile&lt;/a&gt;&lt;/code&gt; are removed</source>
          <target state="translated">3）删除 &lt;code&gt;&lt;a href=&quot;../../io/c/tmpfile&quot;&gt;std::tmpfile&lt;/a&gt;&lt;/code&gt; 创建的文件</target>
        </trans-unit>
        <trans-unit id="eb4b749f55c8e582961149bc519050d0fdb8be68" translate="yes" xml:space="preserve">
          <source>3) forms a literal &lt;code&gt;&lt;a href=&quot;../complex&quot;&gt;std::complex&lt;/a&gt;&amp;lt;long double&amp;gt;&lt;/code&gt; with the real part zero and imaginary part &lt;code&gt;arg&lt;/code&gt;</source>
          <target state="translated">3）形成一个文字 &lt;code&gt;&lt;a href=&quot;../complex&quot;&gt;std::complex&lt;/a&gt;&amp;lt;long double&amp;gt;&lt;/code&gt; ，其实部为零，虚部为 &lt;code&gt;arg&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="65f35e330e5d2b7197814a8722f3d83824815d80" translate="yes" xml:space="preserve">
          <source>3) if &lt;code&gt;E2&lt;/code&gt; is a &lt;a href=&quot;static&quot;&gt;static member function&lt;/a&gt;, the result is an lvalue designating that static member function. Essentially, &lt;code&gt;E1&lt;/code&gt; is evaluated and discarded in this case;</source>
          <target state="translated">3）如果 &lt;code&gt;E2&lt;/code&gt; 是&lt;a href=&quot;static&quot;&gt;静态成员函数&lt;/a&gt;，则结果是一个表示该静态成员函数的左值。本质上，在这种情况下，对 &lt;code&gt;E1&lt;/code&gt; 进行评估并丢弃；</target>
        </trans-unit>
        <trans-unit id="e25fdb0857d791e3ee9fff7d173d5fcc148e102f" translate="yes" xml:space="preserve">
          <source>3) if &lt;code&gt;T&lt;/code&gt; is a class type with a member type &lt;code&gt;T::argument_type&lt;/code&gt;, then &lt;code&gt;argument_type&lt;/code&gt; is an alias of that.</source>
          <target state="translated">3）如果 &lt;code&gt;T&lt;/code&gt; 是具有成员类型 &lt;code&gt;T::argument_type&lt;/code&gt; 的类类型，则 &lt;code&gt;argument_type&lt;/code&gt; 是该类型的别名。</target>
        </trans-unit>
        <trans-unit id="ae210b7bef5f4480ec5f9f0fe776140f4e8d036d" translate="yes" xml:space="preserve">
          <source>3) if &lt;code&gt;T&lt;/code&gt; is a class type with a member type &lt;code&gt;T::first_argument_type&lt;/code&gt;, then &lt;code&gt;first_argument_type&lt;/code&gt; is an alias of that.</source>
          <target state="translated">3）如果 &lt;code&gt;T&lt;/code&gt; 是成员类型为 &lt;code&gt;T::first_argument_type&lt;/code&gt; 的类类型，则 &lt;code&gt;first_argument_type&lt;/code&gt; 是其别名。</target>
        </trans-unit>
        <trans-unit id="0806903e4bdd82779de06ae3f5540676a2dcfab4" translate="yes" xml:space="preserve">
          <source>3) if &lt;code&gt;T&lt;/code&gt; is a class type with a member type &lt;code&gt;T::second_argument_type&lt;/code&gt;, then &lt;code&gt;second_argument_type&lt;/code&gt; is an alias of that.</source>
          <target state="translated">3）如果 &lt;code&gt;T&lt;/code&gt; 是具有成员类型 &lt;code&gt;T::second_argument_type&lt;/code&gt; 的类类型，则 &lt;code&gt;second_argument_type&lt;/code&gt; 是其别名。</target>
        </trans-unit>
        <trans-unit id="5187a9b908ae317f2fa0d3270c45a1c06f97df60" translate="yes" xml:space="preserve">
          <source>3) if &lt;code&gt;T&lt;/code&gt; is an array type, each element of the array is value-initialized;</source>
          <target state="translated">3）如果 &lt;code&gt;T&lt;/code&gt; 是数组类型，则数组的每个元素都将值初始化；</target>
        </trans-unit>
        <trans-unit id="048ef5dbf48237f293fb0aacd098a3a77010af17" translate="yes" xml:space="preserve">
          <source>3) initialization of a prvalue temporary by &lt;a href=&quot;explicit_cast&quot;&gt;functional cast&lt;/a&gt; or with a parenthesized expression list</source>
          <target state="translated">3）通过&lt;a href=&quot;explicit_cast&quot;&gt;函数&lt;/a&gt;强制转换或带括号的表达式列表来初始化临时值</target>
        </trans-unit>
        <trans-unit id="a4101a4f5111b9bc9e8639bcdb38879ae15c070b" translate="yes" xml:space="preserve">
          <source>3) initialization of an object with dynamic storage duration with a &lt;a href=&quot;new&quot;&gt;new-expression&lt;/a&gt;, where the initializer is a brace-init-list</source>
          <target state="translated">3）使用&lt;a href=&quot;new&quot;&gt;new-expression&lt;/a&gt;初始化具有动态存储持续时间的对象，其中初始化器是brace-init-list</target>
        </trans-unit>
        <trans-unit id="6b17f8578d2fcc738f6a3ee08e2209758da8a73f" translate="yes" xml:space="preserve">
          <source>3) inserts &lt;code&gt;count&lt;/code&gt; copies of the &lt;code&gt;value&lt;/code&gt; after the element pointed to by &lt;code&gt;pos&lt;/code&gt;</source>
          <target state="translated">3）在 &lt;code&gt;pos&lt;/code&gt; 所指向的元素之后插入 &lt;code&gt;value&lt;/code&gt; &lt;code&gt;count&lt;/code&gt; 副本</target>
        </trans-unit>
        <trans-unit id="739382f91ea511bc575531ff12244cb1f7da1949" translate="yes" xml:space="preserve">
          <source>3) inserts &lt;code&gt;count&lt;/code&gt; copies of the &lt;code&gt;value&lt;/code&gt; before &lt;code&gt;pos&lt;/code&gt;</source>
          <target state="translated">3）在 &lt;code&gt;pos&lt;/code&gt; 之前插入 &lt;code&gt;value&lt;/code&gt; &lt;code&gt;count&lt;/code&gt; 副本</target>
        </trans-unit>
        <trans-unit id="50a391ff617f9d513ed9544c032250601e82fa2f" translate="yes" xml:space="preserve">
          <source>3) iterator pointing to the character &lt;code&gt;last&lt;/code&gt; pointed to before the erase, or &lt;code&gt;end()&lt;/code&gt; if no such character exists</source>
          <target state="translated">3）迭代器指向擦除之前 &lt;code&gt;last&lt;/code&gt; 指向的字符，如果不存在则返回 &lt;code&gt;end()&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="bc7972856cd774c97ade8a6c1051488492723094" translate="yes" xml:space="preserve">
          <source>3) linear in &lt;code&gt;count&lt;/code&gt;</source>
          <target state="translated">3）线性 &lt;code&gt;count&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="65ad8d83fcd2f6d74a5f43e50c748c4101d25c3d" translate="yes" xml:space="preserve">
          <source>3) linear in size of &lt;code&gt;other&lt;/code&gt;</source>
          <target state="translated">3） &lt;code&gt;other&lt;/code&gt; 尺寸线性</target>
        </trans-unit>
        <trans-unit id="8880501fa9d2e5a0f3c44a1480b013b5066ec13a" translate="yes" xml:space="preserve">
          <source>3) linear in size of &lt;code&gt;s&lt;/code&gt;</source>
          <target state="translated">3） &lt;code&gt;s&lt;/code&gt; 的线性</target>
        </trans-unit>
        <trans-unit id="f5919b81092eb362583fce5f28096ef4be37d0f6" translate="yes" xml:space="preserve">
          <source>3) meets the &lt;a href=&quot;../../named_req/transformationtrait&quot;&gt;TransformationTrait&lt;/a&gt; requirements with a member typedef &lt;code&gt;type&lt;/code&gt; that names, respectively, &lt;code&gt;&lt;a href=&quot;../../types/add_cv&quot;&gt;std::add_const_t&lt;/a&gt;&amp;lt;std::variant_alternative&amp;lt;I,T&amp;gt;&amp;gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;../../types/add_cv&quot;&gt;std::add_volatile_t&lt;/a&gt;&amp;lt;std::variant_alternative&amp;lt;I,T&amp;gt;&amp;gt;&lt;/code&gt;, and &lt;code&gt;&lt;a href=&quot;../../types/add_cv&quot;&gt;std::add_cv_t&lt;/a&gt;&amp;lt;std::variant_alternative&amp;lt;I,T&amp;gt;&amp;gt;&lt;/code&gt;</source>
          <target state="translated">3）通过成员typedef &lt;code&gt;type&lt;/code&gt; 分别满足 &lt;code&gt;&lt;a href=&quot;../../types/add_cv&quot;&gt;std::add_const_t&lt;/a&gt;&amp;lt;std::variant_alternative&amp;lt;I,T&amp;gt;&amp;gt;&lt;/code&gt; &amp;lt;std :: variant_alternative &amp;lt;I，T &amp;gt;&amp;gt;， &lt;code&gt;&lt;a href=&quot;../../types/add_cv&quot;&gt;std::add_volatile_t&lt;/a&gt;&amp;lt;std::variant_alternative&amp;lt;I,T&amp;gt;&amp;gt;&lt;/code&gt; &amp;lt;std :: variant_alternative &amp;lt;I，T &amp;gt;&amp;gt;和 &lt;code&gt;&lt;a href=&quot;../../types/add_cv&quot;&gt;std::add_cv_t&lt;/a&gt;&amp;lt;std::variant_alternative&amp;lt;I,T&amp;gt;&amp;gt;&lt;/code&gt; 满足&lt;a href=&quot;../../named_req/transformationtrait&quot;&gt;TransformationTrait&lt;/a&gt;要求:: add_cv_t &amp;lt;std :: variant_alternative &amp;lt;I，T &amp;gt;&amp;gt;</target>
        </trans-unit>
        <trans-unit id="7da20d5c8aa15b36c664a144aed60475997a65c7" translate="yes" xml:space="preserve">
          <source>3) meets the &lt;a href=&quot;../../named_req/unarytypetrait&quot;&gt;UnaryTypeTrait&lt;/a&gt; requirements with a BaseCharacteristic of &lt;code&gt;std::integral_constant&amp;lt;std::size_t, variant_size&amp;lt;T&amp;gt;&amp;gt;&lt;/code&gt;</source>
          <target state="translated">3）符合&lt;a href=&quot;../../named_req/unarytypetrait&quot;&gt;UnaryTypeTrait&lt;/a&gt;要求，其BaseCharacteristic为 &lt;code&gt;std::integral_constant&amp;lt;std::size_t, variant_size&amp;lt;T&amp;gt;&amp;gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="f140a0dadbf9861e93c2d7f748cf156f6e335408" translate="yes" xml:space="preserve">
          <source>3) nested types</source>
          <target state="translated">3)嵌套类型</target>
        </trans-unit>
        <trans-unit id="aace007f9daf107f5ee3d35b2c3626a157b0bafb" translate="yes" xml:space="preserve">
          <source>3) or, if not that, (only in context of initialization by conversion function for direct reference binding of a reference to function type), the return type of F1 is the same kind of reference (lvalue or rvalue) as the reference being initialized, and the return type of F2 is not</source>
          <target state="translated">3)或者,如果不是这样,(仅在转换函数初始化的上下文中,用于对函数类型的引用直接进行引用绑定),F1的返回类型与被初始化的引用是同一种引用(lvalue或rvalue),F2的返回类型不是</target>
        </trans-unit>
        <trans-unit id="edd8dcf20c7ac7372295c877853c3c50cd4a0d2f" translate="yes" xml:space="preserve">
          <source>3) pointer to user-provided allocation function</source>
          <target state="translated">3)用户提供的分配函数的指针。</target>
        </trans-unit>
        <trans-unit id="cf0da5f3045a63172f8ea6c259a1dc694fa07b5f" translate="yes" xml:space="preserve">
          <source>3) private storage: indexed extensible data structure that allows both &lt;code&gt;long&lt;/code&gt; and &lt;code&gt;void*&lt;/code&gt; members, which may be implemented as two arbitrary-length arrays or a single array of two-element structs or another container.</source>
          <target state="translated">3）私有存储：允许 &lt;code&gt;long&lt;/code&gt; 成员和 &lt;code&gt;void*&lt;/code&gt; 成员的索引可扩展数据结构，可以将其实现为两个任意长度的数组或两个元素结构的单个数组或另一个容器。</target>
        </trans-unit>
        <trans-unit id="322b17151b0745396c865a8bac191207b1f57b49" translate="yes" xml:space="preserve">
          <source>3) remainder</source>
          <target state="translated">(3)剩余部分</target>
        </trans-unit>
        <trans-unit id="2351f17694b79338b53c2d32168976a4792dffa5" translate="yes" xml:space="preserve">
          <source>3) removes the topmost &lt;code&gt;volatile&lt;/code&gt;.</source>
          <target state="translated">3）去除最上面的 &lt;code&gt;volatile&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="68f693d59bb82f6a335d7b8b6db09b00e73b4ebf" translate="yes" xml:space="preserve">
          <source>3) returns &lt;code&gt;&lt;a href=&quot;../basic_string&quot;&gt;std::u16string&lt;/a&gt;{str, len}&lt;/code&gt;</source>
          <target state="translated">3）返回 &lt;code&gt;&lt;a href=&quot;../basic_string&quot;&gt;std::u16string&lt;/a&gt;{str, len}&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="41bf597f82b1d1cad984db5bf1743e58d7e7fd73" translate="yes" xml:space="preserve">
          <source>3) returns &lt;code&gt;&lt;a href=&quot;../basic_string_view&quot;&gt;std::u16string_view&lt;/a&gt;{str, len}&lt;/code&gt;</source>
          <target state="translated">3）返回 &lt;code&gt;&lt;a href=&quot;../basic_string_view&quot;&gt;std::u16string_view&lt;/a&gt;{str, len}&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="7e108ba8ca31bd5a74bfc0038ace97fffddb4d2d" translate="yes" xml:space="preserve">
          <source>3) returns &lt;code&gt;array&lt;/code&gt;</source>
          <target state="translated">3）返回 &lt;code&gt;array&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="7de3f2600661414fd71954cabb9a03a6cda6f63d" translate="yes" xml:space="preserve">
          <source>3) returns &lt;code&gt;il.size() == 0&lt;/code&gt;</source>
          <target state="translated">3）返回 &lt;code&gt;il.size() == 0&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="f730a2a3ae2515ddc24201563e53cace850bcbe9" translate="yes" xml:space="preserve">
          <source>3) same as (1), but the evaluation of the assignment expression will not call any operation that is not noexcept.</source>
          <target state="translated">3)与(1)相同,但赋值表达式的评价不会调用任何非noexcept的操作。</target>
        </trans-unit>
        <trans-unit id="03d5a2a70ee8ca2243558b268e4e4f3b9f09b5aa" translate="yes" xml:space="preserve">
          <source>3) same as (2), but the conversion specified for the as-if printf is &lt;code&gt;f&lt;/code&gt; if &lt;code&gt;fmt&lt;/code&gt; is &lt;a href=&quot;chars_format&quot;&gt;&lt;code&gt;std::chars_format::fixed&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;e&lt;/code&gt; if &lt;code&gt;fmt&lt;/code&gt; is &lt;a href=&quot;chars_format&quot;&gt;&lt;code&gt;std::chars_format::scientific&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;a&lt;/code&gt; (but without leading &quot;0x&quot; in the result) if &lt;code&gt;fmt&lt;/code&gt; is &lt;a href=&quot;chars_format&quot;&gt;&lt;code&gt;std::chars_format::hex&lt;/code&gt;&lt;/a&gt;, and &lt;code&gt;g&lt;/code&gt; if &lt;code&gt;fmt&lt;/code&gt; is &lt;a href=&quot;chars_format&quot;&gt;&lt;code&gt;chars_format::general&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">3）同（2），但对于作为-如果printf的被指定的转化 &lt;code&gt;f&lt;/code&gt; 如果 &lt;code&gt;fmt&lt;/code&gt; IS &lt;a href=&quot;chars_format&quot;&gt; &lt;code&gt;std::chars_format::fixed&lt;/code&gt; &lt;/a&gt;， &lt;code&gt;e&lt;/code&gt; 如果 &lt;code&gt;fmt&lt;/code&gt; IS &lt;a href=&quot;chars_format&quot;&gt; &lt;code&gt;std::chars_format::scientific&lt;/code&gt; &lt;/a&gt;， &lt;code&gt;a&lt;/code&gt; （但没有前导&amp;ldquo;0x结果中的&amp;ldquo;&amp;rdquo;）（如果 &lt;code&gt;fmt&lt;/code&gt; 是&lt;a href=&quot;chars_format&quot;&gt; &lt;code&gt;std::chars_format::hex&lt;/code&gt; &lt;/a&gt;，则 &lt;code&gt;g&lt;/code&gt; ,如果 &lt;code&gt;fmt&lt;/code&gt; 是&lt;a href=&quot;chars_format&quot;&gt; &lt;code&gt;chars_format::general&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="8ca3056fd191501960dcfeda57e3b77eade0904b" translate="yes" xml:space="preserve">
          <source>3) same as 1), but the destructor is noexcept.</source>
          <target state="translated">3)与1)相同,但destructor是noexcept。</target>
        </trans-unit>
        <trans-unit id="062bfe9955207c02833ad59b374c43c1054ba514" translate="yes" xml:space="preserve">
          <source>3) same as 1), but the variable definition is &lt;code&gt;noexcept&lt;/code&gt;.</source>
          <target state="translated">3）与1）相同，但变量定义为 &lt;code&gt;noexcept&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="66679282225c2a9805ff609db87b9d14b1b16d41" translate="yes" xml:space="preserve">
          <source>3) same as &lt;code&gt;reduce(first, last, init, &lt;a href=&quot;../utility/functional/plus&quot;&gt;std::plus&lt;/a&gt;&amp;lt;&amp;gt;())&lt;/code&gt;</source>
          <target state="translated">3）与 &lt;code&gt;reduce(first, last, init, &lt;a href=&quot;../utility/functional/plus&quot;&gt;std::plus&lt;/a&gt;&amp;lt;&amp;gt;())&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="493d1c0f698618d6fcf449a293e4e494204001cd" translate="yes" xml:space="preserve">
          <source>3) selection statements;</source>
          <target state="translated">3)选择声明。</target>
        </trans-unit>
        <trans-unit id="e40a06b4c4c919cace92ac3e95bd905380d8d850" translate="yes" xml:space="preserve">
          <source>3) sequence of file-names, omitting any directory separators</source>
          <target state="translated">3)文件名的序列,省略任何目录分隔符。</target>
        </trans-unit>
        <trans-unit id="9dab6dd52eb6a5b6430a643119131d10af088428" translate="yes" xml:space="preserve">
          <source>3) sets the &lt;code&gt;adjustfield&lt;/code&gt; of the stream &lt;code&gt;str&lt;/code&gt; to &lt;code&gt;internal&lt;/code&gt; as if by calling &lt;code&gt;str.setf(&lt;a href=&quot;../ios_base/fmtflags&quot;&gt;std::ios_base::internal&lt;/a&gt;, &lt;a href=&quot;../ios_base/fmtflags&quot;&gt;std::ios_base::adjustfield&lt;/a&gt;)&lt;/code&gt;.</source>
          <target state="translated">3）设置 &lt;code&gt;adjustfield&lt;/code&gt; 流 &lt;code&gt;str&lt;/code&gt; 以 &lt;code&gt;internal&lt;/code&gt; ，仿佛调用 &lt;code&gt;str.setf(&lt;a href=&quot;../ios_base/fmtflags&quot;&gt;std::ios_base::internal&lt;/a&gt;, &lt;a href=&quot;../ios_base/fmtflags&quot;&gt;std::ios_base::adjustfield&lt;/a&gt;)&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="a030f7757853bd064515368512146c6208e9c3a5" translate="yes" xml:space="preserve">
          <source>3) sets the &lt;code&gt;basefield&lt;/code&gt; of the stream &lt;code&gt;str&lt;/code&gt; to &lt;code&gt;oct&lt;/code&gt; as if by calling &lt;code&gt;str.setf(&lt;a href=&quot;../ios_base/fmtflags&quot;&gt;std::ios_base::oct&lt;/a&gt;, &lt;a href=&quot;../ios_base/fmtflags&quot;&gt;std::ios_base::basefield&lt;/a&gt;)&lt;/code&gt;.</source>
          <target state="translated">3）就像调用 &lt;code&gt;str.setf(&lt;a href=&quot;../ios_base/fmtflags&quot;&gt;std::ios_base::oct&lt;/a&gt;, &lt;a href=&quot;../ios_base/fmtflags&quot;&gt;std::ios_base::basefield&lt;/a&gt;)&lt;/code&gt; &lt;a href=&quot;../ios_base/fmtflags&quot;&gt;std :: ios_base :: oct&lt;/a&gt;，&lt;a href=&quot;../ios_base/fmtflags&quot;&gt;std :: ios_base :: basefield&lt;/a&gt;） &lt;code&gt;basefield&lt;/code&gt; ，将流 &lt;code&gt;str&lt;/code&gt; 的基字段设置为 &lt;code&gt;oct&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="8b9f444b741cfcacfcfa162ebe7a6d19a187794e" translate="yes" xml:space="preserve">
          <source>3) the constructor or the destructor of a static or thread-local object throws an exception</source>
          <target state="translated">3)静态对象或线程本地对象的构造函数或破坏函数抛出一个异常</target>
        </trans-unit>
        <trans-unit id="d3a14c2c25daeecf9721e0c14c79c2509890a20e" translate="yes" xml:space="preserve">
          <source>3) the integral number of seconds &lt;code&gt;since_midnight&lt;/code&gt; is after &lt;code&gt;(00:00:00 + hours() + minutes())&lt;/code&gt;.</source>
          <target state="translated">3） &lt;code&gt;since_midnight&lt;/code&gt; 的秒数整数是 &lt;code&gt;(00:00:00 + hours() + minutes())&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="ae09ff8d6024c2ce661567593dee2e65e0a180e2" translate="yes" xml:space="preserve">
          <source>3) the number of initializer-clauses exceeds the number of elements to initialize.</source>
          <target state="translated">3)初始化器-条款的数量超过了要初始化的元素数量。</target>
        </trans-unit>
        <trans-unit id="99f391f7d7fd6d3e3aed88d7abe41b7608b6acbc" translate="yes" xml:space="preserve">
          <source>3) the prefix is a C-style string</source>
          <target state="translated">3)前缀是一个C型字符串</target>
        </trans-unit>
        <trans-unit id="ff4d37a601705f3d7c6ad760cc78a5d303d9b145" translate="yes" xml:space="preserve">
          <source>3) the prefix is a C-style string. Effectively returns &lt;code&gt;starts_with(basic_string_view(x))&lt;/code&gt;</source>
          <target state="translated">3）前缀是C样式的字符串。有效地返回 &lt;code&gt;starts_with(basic_string_view(x))&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="f0e9f99a03ccb78d7ba37682df275e5edfbc0f81" translate="yes" xml:space="preserve">
          <source>3) the suffix is a C-style string</source>
          <target state="translated">3)后缀是一个C型字符串</target>
        </trans-unit>
        <trans-unit id="90859d09b3d3abd69f86a6ae803a432705ce263f" translate="yes" xml:space="preserve">
          <source>3) the suffix is a C-style string. Effectively returns &lt;code&gt;ends_with(basic_string_view(x))&lt;/code&gt;</source>
          <target state="translated">3）后缀是C样式的字符串。有效地返回 &lt;code&gt;ends_with(basic_string_view(x))&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="30c54d48beb81bd741cbc614ddde246ff002abb9" translate="yes" xml:space="preserve">
          <source>3) throw exception of type &lt;code&gt;&lt;a href=&quot;bad_alloc&quot;&gt;std::bad_alloc&lt;/a&gt;&lt;/code&gt; or derived from &lt;code&gt;&lt;a href=&quot;bad_alloc&quot;&gt;std::bad_alloc&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">3）抛出类型为 &lt;code&gt;&lt;a href=&quot;bad_alloc&quot;&gt;std::bad_alloc&lt;/a&gt;&lt;/code&gt; 或从 &lt;code&gt;&lt;a href=&quot;bad_alloc&quot;&gt;std::bad_alloc&lt;/a&gt;&lt;/code&gt; 派生的异常。</target>
        </trans-unit>
        <trans-unit id="c4477776429f85888df04e99879179c77664579a" translate="yes" xml:space="preserve">
          <source>3) void specialization, used to communicate stateless events</source>
          <target state="translated">3)虚空特化,用于沟通无状态事件。</target>
        </trans-unit>
        <trans-unit id="f7a2a2b99877d43ec11afa3802d7fabc4254a28b" translate="yes" xml:space="preserve">
          <source>3) when &lt;a href=&quot;operator_other#Built-in_function_call_operator&quot;&gt;passing an argument&lt;/a&gt; to a function by value</source>
          <target state="translated">3）通过值&lt;a href=&quot;operator_other#Built-in_function_call_operator&quot;&gt;将参数&lt;/a&gt;传递给函数时</target>
        </trans-unit>
        <trans-unit id="ca998f5ae7afbeb398d907d4e1568527eb4c8fbf" translate="yes" xml:space="preserve">
          <source>3) when a &lt;a href=&quot;../memory/new/operator_delete&quot;&gt;placement operator delete&lt;/a&gt; that is a function template specialization is selected to match a placement operator new</source>
          <target state="translated">3）当选择作为功能模板特化的&lt;a href=&quot;../memory/new/operator_delete&quot;&gt;放置运算符删除&lt;/a&gt;以匹配新的放置运算符</target>
        </trans-unit>
        <trans-unit id="ba5d76df1540f5a2ad7124efb079b6d27a6bcdee" translate="yes" xml:space="preserve">
          <source>3) when a base class or a non-static data member is not mentioned in a constructor &lt;a href=&quot;constructor&quot;&gt;initializer list&lt;/a&gt; and that constructor is called.</source>
          <target state="translated">3）当构造函数&lt;a href=&quot;constructor&quot;&gt;初始化列表中&lt;/a&gt;未提及基类或非静态数据成员时，将调用该构造函数。</target>
        </trans-unit>
        <trans-unit id="88a8d15a551fe11ceb9affb6bfc4fea786e0d27b" translate="yes" xml:space="preserve">
          <source>3) within &lt;a href=&quot;data_members#Member_initialization&quot;&gt;default member initializer&lt;/a&gt;(since C++11)</source>
          <target state="translated">3）在&lt;a href=&quot;data_members#Member_initialization&quot;&gt;默认成员初始化程序中&lt;/a&gt;（自C ++ 11起）</target>
        </trans-unit>
        <trans-unit id="003ed6baf0ee44b4225c9005067d80bc0fd7c3a1" translate="yes" xml:space="preserve">
          <source>3) zero or one</source>
          <target state="translated">3)零或一</target>
        </trans-unit>
        <trans-unit id="80a03ff972d6d894bbb0e1e9623570323fe77a56" translate="yes" xml:space="preserve">
          <source>3)&lt;a href=&quot;../../language/converting_constructor&quot;&gt;Converting constructor&lt;/a&gt;. Constructs the object from a complex number of a different type.</source>
          <target state="translated">3）&lt;a href=&quot;../../language/converting_constructor&quot;&gt;转换构造函数&lt;/a&gt;。根据不同类型的复数构造对象。</target>
        </trans-unit>
        <trans-unit id="34ebe71d05fa1515274916febf5c9aa334da85c4" translate="yes" xml:space="preserve">
          <source>3)&lt;a href=&quot;../../language/copy_constructor&quot;&gt;Copy constructor&lt;/a&gt;. Constructs the container with the copy of the contents of &lt;code&gt;other&lt;/code&gt;. If &lt;code&gt;alloc&lt;/code&gt; is not provided, allocator is obtained by calling &lt;code&gt;&lt;a href=&quot;../../memory/allocator_traits&quot;&gt;std::allocator_traits&lt;/a&gt;&amp;lt;allocator_type&amp;gt;::select_on_container_copy_construction(other.get_allocator())&lt;/code&gt;.</source>
          <target state="translated">3）&lt;a href=&quot;../../language/copy_constructor&quot;&gt;复制构造函数&lt;/a&gt;。用 &lt;code&gt;other&lt;/code&gt; 的内容的副本构造容器。如果未提供 &lt;code&gt;alloc&lt;/code&gt; ，则通过调用 &lt;code&gt;&lt;a href=&quot;../../memory/allocator_traits&quot;&gt;std::allocator_traits&lt;/a&gt;&amp;lt;allocator_type&amp;gt;::select_on_container_copy_construction(other.get_allocator())&lt;/code&gt; 获得分配器。</target>
        </trans-unit>
        <trans-unit id="f2930629e5508933cf0fbf8a631b540b919d2a22" translate="yes" xml:space="preserve">
          <source>3)&lt;a href=&quot;../memory/new/operator_new&quot;&gt;allocation function&lt;/a&gt;;</source>
          <target state="translated">3）&lt;a href=&quot;../memory/new/operator_new&quot;&gt;分配功能&lt;/a&gt;；</target>
        </trans-unit>
        <trans-unit id="0a60eec6ef68d32907f86128f2d9f998e1595759" translate="yes" xml:space="preserve">
          <source>3)&lt;a href=&quot;access&quot;&gt;Access specifiers&lt;/a&gt;&lt;code&gt;public:&lt;/code&gt;, &lt;code&gt;protected:&lt;/code&gt;, and &lt;code&gt;private:&lt;/code&gt;</source>
          <target state="translated">3）&lt;a href=&quot;access&quot;&gt;访问说明符&lt;/a&gt; &lt;code&gt;public:&lt;/code&gt; ， &lt;code&gt;protected:&lt;/code&gt; 和 &lt;code&gt;private:&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="ea5b006c914513406213f5f5f6569ad1d6471537" translate="yes" xml:space="preserve">
          <source>3)&lt;a href=&quot;for&quot;&gt;for&lt;/a&gt; loop;</source>
          <target state="translated">3）&lt;a href=&quot;for&quot;&gt;for&lt;/a&gt;循环；</target>
        </trans-unit>
        <trans-unit id="3f914731c94ec7072589bdea0eb1de05a4fb29fa" translate="yes" xml:space="preserve">
          <source>3)&lt;a href=&quot;namespace#Unnamed_namespaces&quot;&gt;Unnamed namespace definition&lt;/a&gt;. Its members have potential scope from their point of declaration to the end of the translation unit, and have &lt;a href=&quot;storage_duration&quot;&gt;internal linkage&lt;/a&gt;.</source>
          <target state="translated">3）&lt;a href=&quot;namespace#Unnamed_namespaces&quot;&gt;未命名的命名空间定义&lt;/a&gt;。从声明的角度到翻译单元的末尾，其成员具有潜在的范围，并具有&lt;a href=&quot;storage_duration&quot;&gt;内部联系&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="24d0238fcca8074356e620b3e61cf1c23e9e578a" translate="yes" xml:space="preserve">
          <source>3)&lt;a href=&quot;operator_alternative&quot;&gt;Trigraph sequences&lt;/a&gt; are replaced by corresponding single-character representations.</source>
          <target state="translated">3）&lt;a href=&quot;operator_alternative&quot;&gt;Trigraph序列&lt;/a&gt;被相应的单字符表示形式代替。</target>
        </trans-unit>
        <trans-unit id="186935f90c2a2d47aa24834883a2b6cf13d0e96a" translate="yes" xml:space="preserve">
          <source>3)&lt;a href=&quot;parameter_pack&quot;&gt;Parameter pack&lt;/a&gt;, only appears in &lt;a href=&quot;function#Parameter_list&quot;&gt;parameter declarations&lt;/a&gt;.</source>
          <target state="translated">3）&lt;a href=&quot;parameter_pack&quot;&gt;参数包&lt;/a&gt;，仅出现在&lt;a href=&quot;function#Parameter_list&quot;&gt;参数声明中&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="8ac9cefd36a7e8cb498276532e1236485f6fe0c8" translate="yes" xml:space="preserve">
          <source>3)&lt;a href=&quot;return&quot;&gt;return&lt;/a&gt; statement with an optional expression;</source>
          <target state="translated">3）带有可选表达式的&lt;a href=&quot;return&quot;&gt;return&lt;/a&gt;语句；</target>
        </trans-unit>
        <trans-unit id="0d5704a9796efaca386f916b15a809d3bad39fd9" translate="yes" xml:space="preserve">
          <source>3)&lt;a href=&quot;switch&quot;&gt;switch&lt;/a&gt; statement.</source>
          <target state="translated">3）&lt;a href=&quot;switch&quot;&gt;切换&lt;/a&gt;语句。</target>
        </trans-unit>
        <trans-unit id="cb94de0bcb8492e48f1dc19ce4b95eb2fe7ea34a" translate="yes" xml:space="preserve">
          <source>3)&lt;b&gt;Conversion&lt;/b&gt;: integral conversion, floating-point conversion, floating-integral conversion, pointer conversion, pointer-to-member conversion, boolean conversion, user-defined conversion of a derived class to its base</source>
          <target state="translated">3）&lt;b&gt;转换&lt;/b&gt;：积分转换，浮点转换，浮点积分转换，指针转换，指针到成员转换，布尔值转换，用户定义的派生类到基类的转换</target>
        </trans-unit>
        <trans-unit id="b1fc0b76711dae95edf8d9e2aad2b35ac1298f6f" translate="yes" xml:space="preserve">
          <source>3)&lt;b&gt;Read-write coherence&lt;/b&gt;: if a value computation A of some atomic M (a read)</source>
          <target state="translated">3）&lt;b&gt;读写一致性&lt;/b&gt;：如果某个原子M的值计算A（读）</target>
        </trans-unit>
        <trans-unit id="0f479b86781470652259f260d7283ed76366bc7e" translate="yes" xml:space="preserve">
          <source>3)&lt;code&gt;&amp;amp;a[i] != &amp;amp;b[j]&lt;/code&gt;</source>
          <target state="translated">3） &lt;code&gt;&amp;amp;a[i] != &amp;amp;b[j]&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="daf6e681ae9fc502f0178f2bf8f9b8378995ef59" translate="yes" xml:space="preserve">
          <source>3)&lt;code&gt;*this&lt;/code&gt;</source>
          <target state="translated">3)&lt;code&gt;*this&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="11b6284f44475577270c81f0fcc53c5bc937506a" translate="yes" xml:space="preserve">
          <source>3)&lt;code&gt;&lt;a href=&quot;../../error/out_of_range/out_of_range&quot;&gt;std::out_of_range&lt;/a&gt;&lt;/code&gt; if &lt;code&gt;pos &amp;gt; other.size()&lt;/code&gt;</source>
          <target state="translated">3） &lt;code&gt;&lt;a href=&quot;../../error/out_of_range/out_of_range&quot;&gt;std::out_of_range&lt;/a&gt;&lt;/code&gt; &lt;code&gt;pos &amp;gt; other.size()&lt;/code&gt; 如果pos&amp;gt; other.size（）</target>
        </trans-unit>
        <trans-unit id="80be02499b71a5b42a6ad2cd00ad202c75cd9f8a" translate="yes" xml:space="preserve">
          <source>3)&lt;code&gt;&lt;a href=&quot;../../error/out_of_range/out_of_range&quot;&gt;std::out_of_range&lt;/a&gt;&lt;/code&gt; if &lt;code&gt;pos &amp;gt; str.size()&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;../../error/invalid_argument/invalid_argument&quot;&gt;std::invalid_argument&lt;/a&gt;&lt;/code&gt; if any character is not one or zero</source>
          <target state="translated">3） &lt;code&gt;&lt;a href=&quot;../../error/out_of_range/out_of_range&quot;&gt;std::out_of_range&lt;/a&gt;&lt;/code&gt; 如果 &lt;code&gt;pos &amp;gt; str.size()&lt;/code&gt; ， &lt;code&gt;&lt;a href=&quot;../../error/invalid_argument/invalid_argument&quot;&gt;std::invalid_argument&lt;/a&gt;&lt;/code&gt; 如果任何字符不是一个或零</target>
        </trans-unit>
        <trans-unit id="ee0ee61edbc835898bbe9e881b557190690360d9" translate="yes" xml:space="preserve">
          <source>3)&lt;code&gt;&lt;a href=&quot;../../error/system_error&quot;&gt;std::system_error&lt;/a&gt;&lt;/code&gt; if the thread could not be started. The exception may represent the error condition &lt;code&gt;std::errc::resource_unavailable_try_again&lt;/code&gt; or another implementation-specific error condition.</source>
          <target state="translated">3） &lt;code&gt;&lt;a href=&quot;../../error/system_error&quot;&gt;std::system_error&lt;/a&gt;&lt;/code&gt; 如果无法启动线程。异常可能表示错误条件 &lt;code&gt;std::errc::resource_unavailable_try_again&lt;/code&gt; 或其他特定于实现的错误条件。</target>
        </trans-unit>
        <trans-unit id="04b6bddd10bd85f982b7c7e02fa8e5ec50c3bb97" translate="yes" xml:space="preserve">
          <source>3)&lt;code&gt;&lt;a href=&quot;../../utility/functional/less&quot;&gt;std::less&lt;/a&gt;&amp;lt;V&amp;gt;()(lhs.get(), rhs.get())&lt;/code&gt;, where V is the &lt;a href=&quot;../../language/operator_comparison#Pointer_comparison_operators&quot;&gt;composite pointer type&lt;/a&gt; of &lt;code&gt;&lt;a href=&quot;../shared_ptr&quot;&gt;std::shared_ptr&lt;/a&gt;&amp;lt;T&amp;gt;::element_type*&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;../shared_ptr&quot;&gt;std::shared_ptr&lt;/a&gt;&amp;lt;U&amp;gt;::element_type*&lt;/code&gt;</source>
          <target state="translated">3） &lt;code&gt;&lt;a href=&quot;../../utility/functional/less&quot;&gt;std::less&lt;/a&gt;&amp;lt;V&amp;gt;()(lhs.get(), rhs.get())&lt;/code&gt; ，其中V是&lt;a href=&quot;../../language/operator_comparison#Pointer_comparison_operators&quot;&gt;复合指针类型&lt;/a&gt;的 &lt;code&gt;&lt;a href=&quot;../shared_ptr&quot;&gt;std::shared_ptr&lt;/a&gt;&amp;lt;T&amp;gt;::element_type*&lt;/code&gt; 和 &lt;code&gt;&lt;a href=&quot;../shared_ptr&quot;&gt;std::shared_ptr&lt;/a&gt;&amp;lt;U&amp;gt;::element_type*&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="b2ff6b581a992bc5ed00241f6be98110fc897f2c" translate="yes" xml:space="preserve">
          <source>3)&lt;code&gt;&lt;a href=&quot;../c/ungetc&quot;&gt;std::ungetc&lt;/a&gt;(c, f)&lt;/code&gt; and &lt;code&gt;str.rdbuf()-&amp;gt;sputbackc(c)&lt;/code&gt;</source>
          <target state="translated">3） &lt;code&gt;&lt;a href=&quot;../c/ungetc&quot;&gt;std::ungetc&lt;/a&gt;(c, f)&lt;/code&gt; 和 &lt;code&gt;str.rdbuf()-&amp;gt;sputbackc(c)&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="12c4fe0dced8910c1ebe55544adc6ae1452c2cc4" translate="yes" xml:space="preserve">
          <source>3)&lt;code&gt;&lt;a href=&quot;../day&quot;&gt;std::chrono::day&lt;/a&gt;(unsigned(d) - ds.count())&lt;/code&gt;</source>
          <target state="translated">3） &lt;code&gt;&lt;a href=&quot;../day&quot;&gt;std::chrono::day&lt;/a&gt;(unsigned(d) - ds.count())&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="a68e58864d24db1442e3fbde87a9c0a831b953b8" translate="yes" xml:space="preserve">
          <source>3)&lt;code&gt;&lt;a href=&quot;../new/bad_alloc&quot;&gt;std::bad_alloc&lt;/a&gt;&lt;/code&gt; if required additional memory could not be obtained. May throw implementation-defined exception for other errors. &lt;code&gt;delete ptr&lt;/code&gt; if &lt;code&gt;T&lt;/code&gt; is not an array type, &lt;code&gt;delete[] ptr&lt;/code&gt; otherwise)(since C++17) is called if an exception occurs.</source>
          <target state="translated">3） &lt;code&gt;&lt;a href=&quot;../new/bad_alloc&quot;&gt;std::bad_alloc&lt;/a&gt;&lt;/code&gt; 如果无法获得所需的额外内存。可能会为其他错误引发实现定义的异常。 &lt;code&gt;delete ptr&lt;/code&gt; 如果 &lt;code&gt;T&lt;/code&gt; 不是数组类型， &lt;code&gt;delete[] ptr&lt;/code&gt; 否则）（因为C ++ 17）如果发生异常时被调用。</target>
        </trans-unit>
        <trans-unit id="af5d815259c3b60276bf884c88405bc53b10a777" translate="yes" xml:space="preserve">
          <source>3)&lt;code&gt;&lt;a href=&quot;../year&quot;&gt;std::chrono::year&lt;/a&gt;(int(y) - ys.count())&lt;/code&gt;</source>
          <target state="translated">3） &lt;code&gt;&lt;a href=&quot;../year&quot;&gt;std::chrono::year&lt;/a&gt;(int(y) - ys.count())&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="22376aa5bc2befa5e18854f733111daf08cf9111" translate="yes" xml:space="preserve">
          <source>3)&lt;code&gt;&lt;a href=&quot;get_id&quot;&gt;get_id()&lt;/a&gt;&lt;/code&gt; not equal to &lt;code&gt;&lt;a href=&quot;id&quot;&gt;std::thread::id()&lt;/a&gt;&lt;/code&gt; (i.e. &lt;code&gt;&lt;a href=&quot;joinable&quot;&gt;joinable&lt;/a&gt;&lt;/code&gt; is &lt;code&gt;true&lt;/code&gt;)</source>
          <target state="translated">3） &lt;code&gt;&lt;a href=&quot;get_id&quot;&gt;get_id()&lt;/a&gt;&lt;/code&gt; 不等于 &lt;code&gt;&lt;a href=&quot;id&quot;&gt;std::thread::id()&lt;/a&gt;&lt;/code&gt; （即 &lt;code&gt;&lt;a href=&quot;joinable&quot;&gt;joinable&lt;/a&gt;&lt;/code&gt; 为 &lt;code&gt;true&lt;/code&gt; ）</target>
        </trans-unit>
        <trans-unit id="00464795ad06ca2789a7eb293b09e4790d31f33f" translate="yes" xml:space="preserve">
          <source>3)&lt;code&gt;bitset&amp;lt;N&amp;gt;(lhs) ^= rhs&lt;/code&gt;</source>
          <target state="translated">3） &lt;code&gt;bitset&amp;lt;N&amp;gt;(lhs) ^= rhs&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="54676b88618d9bf0a4f1322beff074c3d0b3a270" translate="yes" xml:space="preserve">
          <source>3)&lt;code&gt;cmp &amp;lt; 0&lt;/code&gt;</source>
          <target state="translated">3） &lt;code&gt;cmp &amp;lt; 0&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="03cbcb175c6041d32cc33d77f7d3646888c1168f" translate="yes" xml:space="preserve">
          <source>3)&lt;code&gt;find_if&lt;/code&gt; searches for an element for which predicate &lt;code&gt;p&lt;/code&gt; returns &lt;code&gt;true&lt;/code&gt;</source>
          <target state="translated">3） &lt;code&gt;find_if&lt;/code&gt; 搜索谓词 &lt;code&gt;p&lt;/code&gt; 返回 &lt;code&gt;true&lt;/code&gt; 的元素</target>
        </trans-unit>
        <trans-unit id="10c799d009d312c8c1e7d60be1224553fe978d1a" translate="yes" xml:space="preserve">
          <source>3)&lt;code&gt;from_stream(is, fmt.c_str(), tp, nullptr, &amp;amp;offset)&lt;/code&gt;</source>
          <target state="translated">3） &lt;code&gt;from_stream(is, fmt.c_str(), tp, nullptr, &amp;amp;offset)&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="91aa2433cb57e87ad1fedf9d9afb1081fd513bc3" translate="yes" xml:space="preserve">
          <source>3)&lt;code&gt;int(x) &amp;lt; int(y)&lt;/code&gt;</source>
          <target state="translated">3） &lt;code&gt;int(x) &amp;lt; int(y)&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="7ee42b1e4054bff3d4bc18fbb76e88e170b2c7ca" translate="yes" xml:space="preserve">
          <source>3)&lt;code&gt;lhs.base() &amp;gt; rhs.base()&lt;/code&gt;</source>
          <target state="translated">3） &lt;code&gt;lhs.base() &amp;gt; rhs.base()&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="8fe1c79e81a8df8bd999c7bb3f74c1117d4d23ab" translate="yes" xml:space="preserve">
          <source>3)&lt;code&gt;lhs.base() &amp;lt; rhs.base()&lt;/code&gt;</source>
          <target state="translated">3） &lt;code&gt;lhs.base() &amp;lt; rhs.base()&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="e67819b5769ff9ce78e7a0f8090966cdd8db4eda" translate="yes" xml:space="preserve">
          <source>3)&lt;code&gt;log(c.size()) + c.count(k)&lt;/code&gt;</source>
          <target state="translated">3） &lt;code&gt;log(c.size()) + c.count(k)&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="3043b605bf8664d093a88682bdeb768f76394119" translate="yes" xml:space="preserve">
          <source>3)&lt;code&gt;obj-&amp;gt;compare_exchange_weak(*expected, desired, succ, fail)&lt;/code&gt;</source>
          <target state="translated">3） &lt;code&gt;obj-&amp;gt;compare_exchange_weak(*expected, desired, succ, fail)&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="70be4c4f47064bf34fe1b11183a074306e30992d" translate="yes" xml:space="preserve">
          <source>3)&lt;code&gt;std::future&lt;/code&gt; is not &lt;a href=&quot;../../named_req/copyconstructible&quot;&gt;CopyConstructible&lt;/a&gt;.</source>
          <target state="translated">3） &lt;code&gt;std::future&lt;/code&gt; 不是&lt;a href=&quot;../../named_req/copyconstructible&quot;&gt;CopyConstructible&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="ad543b3625d76ef9b046adbca5547f55a88e8121" translate="yes" xml:space="preserve">
          <source>3)&lt;code&gt;true&lt;/code&gt; if &lt;code&gt;*this&lt;/code&gt; is less than &lt;code&gt;rhs&lt;/code&gt; as defined by the order of &lt;code&gt;this&lt;/code&gt; and &lt;code&gt;&amp;amp;rhs&lt;/code&gt;.</source>
          <target state="translated">3）如果 &lt;code&gt;*this&lt;/code&gt; 小于 &lt;code&gt;this&lt;/code&gt; 和 &lt;code&gt;&amp;amp;rhs&lt;/code&gt; 的顺序定义的 &lt;code&gt;rhs&lt;/code&gt; ，则为 &lt;code&gt;true&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="a88814c75f464c72593230dad55ac4babb59c5a8" translate="yes" xml:space="preserve">
          <source>3)&lt;code&gt;true&lt;/code&gt; if &lt;code&gt;lhs.category() &amp;lt; rhs.category()&lt;/code&gt;. Otherwise, &lt;code&gt;true&lt;/code&gt; if &lt;code&gt;lhs.category() == rhs.category() &amp;amp;&amp;amp; lhs.value() &amp;lt; rhs.value()&lt;/code&gt;. Otherwise, &lt;code&gt;false&lt;/code&gt;</source>
          <target state="translated">3）如果 &lt;code&gt;lhs.category() &amp;lt; rhs.category()&lt;/code&gt; &lt;code&gt;true&lt;/code&gt; 。否则， &lt;code&gt;true&lt;/code&gt; 如果 &lt;code&gt;lhs.category() == rhs.category() &amp;amp;&amp;amp; lhs.value() &amp;lt; rhs.value()&lt;/code&gt; 。否则为 &lt;code&gt;false&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="c72507023428e56ff45ee7b56e7dd4f83b81a696" translate="yes" xml:space="preserve">
          <source>3)&lt;code&gt;true&lt;/code&gt; if &lt;code&gt;lhs.category() &amp;lt; rhs.category()&lt;/code&gt;. Otherwise, &lt;code&gt;true&lt;/code&gt; if &lt;code&gt;lhs.category() == rhs.category() &amp;amp;&amp;amp; lhs.value() &amp;lt; rhs.value()&lt;/code&gt;. Otherwise, &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">3）如果 &lt;code&gt;lhs.category() &amp;lt; rhs.category()&lt;/code&gt; &lt;code&gt;true&lt;/code&gt; 。否则， &lt;code&gt;true&lt;/code&gt; 如果 &lt;code&gt;lhs.category() == rhs.category() &amp;amp;&amp;amp; lhs.value() &amp;lt; rhs.value()&lt;/code&gt; 。否则，为 &lt;code&gt;false&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="fa77abcbdcd2f48d164e5dd8000ad38d0f0cb146" translate="yes" xml:space="preserve">
          <source>3)&lt;code&gt;true&lt;/code&gt; if &lt;code&gt;path() &amp;lt; rhs.path()&lt;/code&gt;, &lt;code&gt;false&lt;/code&gt; otherwise.</source>
          <target state="translated">3） &lt;code&gt;true&lt;/code&gt; 如果 &lt;code&gt;path() &amp;lt; rhs.path()&lt;/code&gt; ， &lt;code&gt;false&lt;/code&gt; 否则。</target>
        </trans-unit>
        <trans-unit id="ee302b109c618e0a780fe3b5fbe71a7826b5e330" translate="yes" xml:space="preserve">
          <source>3)&lt;code&gt;true&lt;/code&gt; if none of the bits are set to &lt;code&gt;true&lt;/code&gt;, otherwise &lt;code&gt;false&lt;/code&gt;</source>
          <target state="translated">3） &lt;code&gt;true&lt;/code&gt; 如果没有位被设置为 &lt;code&gt;true&lt;/code&gt; ，否则 &lt;code&gt;false&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="7eaa355954b88254373deea6dae34705f8d24530" translate="yes" xml:space="preserve">
          <source>3)&lt;code&gt;true&lt;/code&gt; if the &lt;code&gt;lhs&lt;/code&gt; refers to time point</source>
          <target state="translated">3）如果 &lt;code&gt;lhs&lt;/code&gt; 指的是时间点，则为 &lt;code&gt;true&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="e9c102c6444ed9fc5851c91a8e4dc902adc0590c" translate="yes" xml:space="preserve">
          <source>3)&lt;code&gt;true&lt;/code&gt; if the contents of the &lt;code&gt;lhs&lt;/code&gt; are lexicographically</source>
          <target state="translated">3）如果按字典顺序列出了 &lt;code&gt;lhs&lt;/code&gt; 的内容，则为 &lt;code&gt;true&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="1dd7a248be501a4042d715962342e1a95b29904f" translate="yes" xml:space="preserve">
          <source>3)&lt;code&gt;unsigned(x) &amp;lt; unsigned(y)&lt;/code&gt;</source>
          <target state="translated">3） &lt;code&gt;unsigned(x) &amp;lt; unsigned(y)&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="9e2d0cf46781a3fb477eea2995343c50cf9b536b" translate="yes" xml:space="preserve">
          <source>3)&lt;code&gt;x.date() &amp;lt; y.date()&lt;/code&gt;</source>
          <target state="translated">3） &lt;code&gt;x.date() &amp;lt; y.date()&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="f089b779b450b4bef75dc0cf56ee5679085489e9" translate="yes" xml:space="preserve">
          <source>3)&lt;code&gt;x.month() &amp;lt; y.month() || (x.month() == y.month() &amp;amp;&amp;amp; x.day() &amp;lt; y.day())&lt;/code&gt;</source>
          <target state="translated">3） &lt;code&gt;x.month() &amp;lt; y.month() || (x.month() == y.month() &amp;amp;&amp;amp; x.day() &amp;lt; y.day())&lt;/code&gt;</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
