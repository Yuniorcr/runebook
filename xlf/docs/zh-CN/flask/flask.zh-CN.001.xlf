<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="zh-CN" datatype="htmlbody" original="flask">
    <body>
      <group id="flask">
        <trans-unit id="d518ee4676b80ad78627e3058478d5d42201367e" translate="yes" xml:space="preserve">
          <source>&amp;copy; 2007&amp;ndash;2020 Pallets</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0dea52dadc89b7a6bcb166da37a5fa2683706699" translate="yes" xml:space="preserve">
          <source>&amp;ldquo;Hello Flaskext!&amp;rdquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b9b929fe54087453b5f1d596ec5eb8001da93dd8" translate="yes" xml:space="preserve">
          <source>&amp;ldquo;Micro&amp;rdquo; does not mean that your whole web application has to fit into a single Python file (although it certainly can), nor does it mean that Flask is lacking in functionality. The &amp;ldquo;micro&amp;rdquo; in microframework means Flask aims to keep the core simple but extensible. Flask won&amp;rsquo;t make many decisions for you, such as what database to use. Those decisions that it does make, such as what templating engine to use, are easy to change. Everything else is up to you, so that Flask can be everything you need and nothing you don&amp;rsquo;t.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ed4056fbc79159bda157747a2241de3ef3b7ce60" translate="yes" xml:space="preserve">
          <source>(On Windows you need to use &lt;code&gt;set&lt;/code&gt; instead of &lt;code&gt;export&lt;/code&gt;.)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="531ce4e3f3b615cc5f55e3d17a55c173b8a0544a" translate="yes" xml:space="preserve">
          <source>(On Windows, use &lt;code&gt;set&lt;/code&gt; instead of &lt;code&gt;export&lt;/code&gt;.)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5a3f3fb8509928682231ec3231a525028a615239" translate="yes" xml:space="preserve">
          <source>(Want to just log errors and stack traces? See &lt;a href=&quot;../errorhandling/index#application-errors&quot;&gt;Application Errors&lt;/a&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d89981778b9525952a642f77e691311c6dd293e1" translate="yes" xml:space="preserve">
          <source>(default) accepts any text without a slash</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9ec858ed054f38cb94e160f72774fc041e6ff478" translate="yes" xml:space="preserve">
          <source>(nothing)</source>
          <target state="translated">(nothing)</target>
        </trans-unit>
        <trans-unit id="9130cb8188f0785b281988616eeb6d809089da04" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;#flask.Markup.unescape&quot;&gt;&lt;code&gt;unescape()&lt;/code&gt;&lt;/a&gt; the markup, remove tags, and normalize whitespace to single spaces.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="65805e6061a49425d7365ddd0434d4e5a2f82569" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;#flask.sessions.SessionInterface.make_null_session&quot;&gt;&lt;code&gt;make_null_session()&lt;/code&gt;&lt;/a&gt; will look here for the class that should be created when a null session is requested. Likewise the &lt;a href=&quot;#flask.sessions.SessionInterface.is_null_session&quot;&gt;&lt;code&gt;is_null_session()&lt;/code&gt;&lt;/a&gt; method will perform a typecheck against this type.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="94945113cc5354d56fa9306672a00c6ae72ad7fc" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;../api/index#flask.got_request_exception&quot;&gt;&lt;code&gt;got_request_exception&lt;/code&gt;&lt;/a&gt; is sent when an exception begins to be handled, but before an &lt;a href=&quot;../api/index#flask.Flask.errorhandler&quot;&gt;&lt;code&gt;errorhandler()&lt;/code&gt;&lt;/a&gt; is looked up or called.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c90890ea5636a5ad9069bb81946d398bbda8ae4e" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;../api/index#flask.request_finished&quot;&gt;&lt;code&gt;request_finished&lt;/code&gt;&lt;/a&gt; is sent after the &lt;a href=&quot;../api/index#flask.Flask.after_request&quot;&gt;&lt;code&gt;after_request()&lt;/code&gt;&lt;/a&gt; functions are called.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="19964118cb5b2e5624f5823a111f7dc156d2f2bc" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;../api/index#flask.request_started&quot;&gt;&lt;code&gt;request_started&lt;/code&gt;&lt;/a&gt; is sent before the &lt;a href=&quot;../api/index#flask.Flask.before_request&quot;&gt;&lt;code&gt;before_request()&lt;/code&gt;&lt;/a&gt; functions are called.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f6b1a894ddd6e86e9da54f95316a4cbddd7249b8" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;../api/index#flask.request_tearing_down&quot;&gt;&lt;code&gt;request_tearing_down&lt;/code&gt;&lt;/a&gt; is sent after the &lt;a href=&quot;../api/index#flask.Flask.teardown_request&quot;&gt;&lt;code&gt;teardown_request()&lt;/code&gt;&lt;/a&gt; functions are called.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e6242b0037b13d337d6bf273aa5b9e086b9e054e" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;http://www.gevent.org/&quot;&gt;Gevent&lt;/a&gt; is a coroutine-based Python networking library that uses &lt;a href=&quot;https://greenlet.readthedocs.io/en/latest/&quot;&gt;greenlet&lt;/a&gt; to provide a high-level synchronous API on top of &lt;a href=&quot;http://software.schmorp.de/pkg/libev.html&quot;&gt;libev&lt;/a&gt; event loop:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5a7895fa80d2b1575519c0724ceefb133c4410b9" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://docs.python.org/3/library/exceptions.html#KeyError&quot;&gt;&lt;strong&gt;KeyError&lt;/strong&gt;&lt;/a&gt; &amp;ndash; if the tag key is already registered and &lt;code&gt;force&lt;/code&gt; is not true.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2a6d17432cfe78a83c46a8088ca15fbe3d7e13ac" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://docs.sentry.io/platforms/python/guides/flask/&quot;&gt;Flask-specific documentation&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d565dd25cb8083f2f33a41f77fb0e5addce2af31" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://github.com/theskumar/python-dotenv#readme&quot;&gt;python-dotenv&lt;/a&gt; enables support for &lt;a href=&quot;../cli/index#dotenv&quot;&gt;Environment Variables From dotenv&lt;/a&gt; when running &lt;code&gt;flask&lt;/code&gt; commands.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d8bbab9e7bb34c6875207a31abfa28df9bf24b5d" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://gunicorn.org/&quot;&gt;Gunicorn&lt;/a&gt; &amp;lsquo;Green Unicorn&amp;rsquo; is a WSGI HTTP Server for UNIX. It&amp;rsquo;s a pre-fork worker model ported from Ruby&amp;rsquo;s Unicorn project. It supports both &lt;a href=&quot;https://eventlet.net/&quot;&gt;eventlet&lt;/a&gt; and &lt;a href=&quot;https://greenlet.readthedocs.io/en/latest/&quot;&gt;greenlet&lt;/a&gt;. Running a Flask application on this server is quite simple:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="472600c67ce8d07f654d3fb06359c8114c527085" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://gunicorn.org/&quot;&gt;Gunicorn&lt;/a&gt; provides many command-line options &amp;ndash; see &lt;code&gt;gunicorn -h&lt;/code&gt;. For example, to run a Flask application with 4 worker processes (&lt;code&gt;-w
4&lt;/code&gt;) binding to localhost port 4000 (&lt;code&gt;-b 127.0.0.1:4000&lt;/code&gt;):</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4f0956922c2e45871115bbce8982b5af8743e042" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://jquery.com/&quot;&gt;jQuery&lt;/a&gt; is a small JavaScript library commonly used to simplify working with the DOM and JavaScript in general. It is the perfect tool to make web applications more dynamic by exchanging JSON between server and client.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a4c27b2ebf441268b2d950ac6acef9ceff1aa4c7" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://palletsprojects.com/p/click/&quot;&gt;Click&lt;/a&gt; is a framework for writing command line applications. It provides the &lt;code&gt;flask&lt;/code&gt; command and allows adding custom management commands.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8d564eb9e722c60bb1317c271f9893fd46bcbb52" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://palletsprojects.com/p/itsdangerous/&quot;&gt;ItsDangerous&lt;/a&gt; securely signs data to ensure its integrity. This is used to protect Flask&amp;rsquo;s session cookie.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="11c160160d6e753a46072bceeac58d51f286b821" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://palletsprojects.com/p/jinja/&quot;&gt;Jinja&lt;/a&gt; is a template language that renders the pages your application serves.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="85e6cf18ea4adc5a960ddbdaff872146f4b90d84" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://palletsprojects.com/p/markupsafe/&quot;&gt;MarkupSafe&lt;/a&gt; comes with Jinja. It escapes untrusted input when rendering templates to avoid injection attacks.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="73c1564f44b95eaef06f6953c30e436ecdd78f8f" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://palletsprojects.com/p/werkzeug/&quot;&gt;Werkzeug&lt;/a&gt; implements WSGI, the standard Python interface between applications and servers.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cd6aa582b05147a13aef5aef69f0ddd14281f7a3" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://pypi.org/project/setuptools/&quot;&gt;Setuptools&lt;/a&gt;, is an extension library that is commonly used to distribute Python libraries and extensions. It extends distutils, a basic module installation system shipped with Python to also support various more complex constructs that make larger applications easier to distribute:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="70b8c0ff8ede71cb50dd0fde2a4413379c21a3d1" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://pythonhosted.org/blinker/&quot;&gt;Blinker&lt;/a&gt; provides support for &lt;a href=&quot;../signals/index#signals&quot;&gt;Signals&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5d23b01202033165611d8a0b5009d5738978cdcb" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://pythonhosted.org/watchdog/&quot;&gt;Watchdog&lt;/a&gt; provides a faster, more efficient reloader for the development server.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6681a129cdef8c8594d303500b6f2798522c70b4" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://simplejson.readthedocs.io/&quot;&gt;SimpleJSON&lt;/a&gt; is a fast JSON implementation that is compatible with Python&amp;rsquo;s &lt;code&gt;json&lt;/code&gt; module. It is preferred for JSON operations if it is installed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6e2e6ebfc4c24cd599c23777dfc091c4fe61a008" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://twistedmatrix.com/trac/wiki/TwistedWeb&quot;&gt;Twisted Web&lt;/a&gt; is the web server shipped with &lt;a href=&quot;https://twistedmatrix.com/trac/&quot;&gt;Twisted&lt;/a&gt;, a mature, non-blocking event-driven networking library. Twisted Web comes with a standard WSGI container which can be controlled from the command line using the &lt;code&gt;twistd&lt;/code&gt; utility:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="91d0073f5771c7940421d0a465d32609ca7e7490" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://uwsgi-docs.readthedocs.io/en/latest/&quot;&gt;uWSGI&lt;/a&gt; is a fast application server written in C. It is very configurable which makes it more complicated to setup than gunicorn.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8a702a0a0f8f564f77025fc649a80ff83ed90efb" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://werkzeug.palletsprojects.com/en/1.0.x/datastructures/#werkzeug.datastructures.MultiDict&quot;&gt;&lt;code&gt;MultiDict&lt;/code&gt;&lt;/a&gt; object containing all uploaded files. Each key in &lt;a href=&quot;#flask.Request.files&quot;&gt;&lt;code&gt;files&lt;/code&gt;&lt;/a&gt; is the name from the &lt;code&gt;&amp;lt;input type=&quot;file&quot; name=&quot;&quot;&amp;gt;&lt;/code&gt;. Each value in &lt;a href=&quot;#flask.Request.files&quot;&gt;&lt;code&gt;files&lt;/code&gt;&lt;/a&gt; is a Werkzeug &lt;a href=&quot;https://werkzeug.palletsprojects.com/en/1.0.x/datastructures/#werkzeug.datastructures.FileStorage&quot;&gt;&lt;code&gt;FileStorage&lt;/code&gt;&lt;/a&gt; object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a982f899a12f0c75094410af44e9c79a9d352e30" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://werkzeug.palletsprojects.com/en/1.0.x/exceptions/#werkzeug.exceptions.HTTPException&quot;&gt;&lt;code&gt;werkzeug.exceptions.HTTPException&lt;/code&gt;&lt;/a&gt; subclasses like &lt;a href=&quot;https://werkzeug.palletsprojects.com/en/1.0.x/exceptions/#werkzeug.exceptions.BadRequest&quot;&gt;&lt;code&gt;BadRequest&lt;/code&gt;&lt;/a&gt; and their HTTP codes are interchangeable when registering handlers. (&lt;code&gt;BadRequest.code == 400&lt;/code&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9edf23e4ac711ff478615faff3de2d150f268030" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://werkzeug.palletsprojects.com/en/1.0.x/exceptions/#werkzeug.exceptions.NotFound&quot;&gt;&lt;code&gt;NotFound&lt;/code&gt;&lt;/a&gt; if one or more passed paths fall out of its boundaries.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b85fcdb38da1ffb85aba4adb03f47b27e54851cd" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://www.fabfile.org/&quot;&gt;Fabric&lt;/a&gt; is a tool for Python similar to Makefiles but with the ability to execute commands on a remote server. In combination with a properly set up Python package (&lt;a href=&quot;../packages/index#larger-applications&quot;&gt;Larger Applications&lt;/a&gt;) and a good concept for configurations (&lt;a href=&quot;../../config/index#config&quot;&gt;Configuration Handling&lt;/a&gt;) it is very easy to deploy Flask applications to external servers.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="db3235b3038a6abb8495dbefb504d8e344e9f7fc" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;$('selector')&lt;/code&gt; selects an element and lets you operate on it.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b0396579b5b9d74c0379afb7dfa00a26771cad0c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;$(function() { ... })&lt;/code&gt; specifies code that should run once the browser is done loading the basic parts of the page.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a0fb748788b036951546b9f24a0392746d039718" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;$.getJSON(url, data, func)&lt;/code&gt; sends a &lt;code&gt;GET&lt;/code&gt; request to &lt;code&gt;url&lt;/code&gt; and will send the contents of the &lt;code&gt;data&lt;/code&gt; object as query parameters. Once the data arrived, it will call the given function with the return value as argument. Note that we can use the &lt;code&gt;$SCRIPT_ROOT&lt;/code&gt; variable here that we set earlier.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="18d0a75842f807413113f3534b792c8caf492559" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;$PREFIX&lt;/code&gt; is the prefix of your Python installation. This can be &lt;code&gt;/usr&lt;/code&gt; or the path to your virtualenv. You can print the value of &lt;code&gt;sys.prefix&lt;/code&gt; to see what the prefix is set to.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c86879e512bd6eb10dbfe3000ee0814d16515dfe" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&amp;lt;audio&amp;gt;&lt;/code&gt; tag</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c3c2d8fb0dfe9b8b241a7130b266b01781e9efa6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&amp;lt;br/&amp;gt;&lt;/code&gt; supported</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="98a447de4f3427fcef5d5b065b660c9bb6102327" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&amp;lt;script/&amp;gt;&lt;/code&gt; supported</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a31e55b12e715283a365d31dee75a3daf0749d76" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&amp;lt;tag/value/&lt;/code&gt; == &lt;code&gt;&amp;lt;tag&amp;gt;value&amp;lt;/tag&amp;gt;&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="746c7a855378092ae9fe449170ed2492ffcd04a6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&amp;lt;video&amp;gt;&lt;/code&gt; tag</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="975bbe635b6c36e7eaccc2480d58b079cc36907a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;FLASK_APP&lt;/code&gt; has three parts: an optional path that sets the current working directory, a Python file or dotted import path, and an optional variable name of the instance or factory. If the name is a factory, it can optionally be followed by arguments in parentheses. The following values demonstrate these parts:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a0fb11ea62bed1e4c80043b75cbe031ec488e5db" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;HttpOnly&lt;/code&gt; protects the contents of cookies from being read with JavaScript.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4ea84cea1412aa766be7124a8878cf5c9a8b9c5b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;SameSite&lt;/code&gt; restricts how cookies are sent with requests from external sites. Can be set to &lt;code&gt;'Lax'&lt;/code&gt; (recommended) or &lt;code&gt;'Strict'&lt;/code&gt;. &lt;code&gt;Lax&lt;/code&gt; prevents sending cookies with CSRF-prone requests from external sites, such as submitting a form. &lt;code&gt;Strict&lt;/code&gt; prevents sending cookies with all external requests, including following regular links.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d3236772a445c1872e5d1843904ac9000ff16548" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Secure&lt;/code&gt; limits cookies to HTTPS traffic only.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4e1f8c213629c6461c191d797f7b4c19c6c3b878" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;True&lt;/code&gt; if a file was loaded.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b1d31e569e2c6d2e7618b9d203b25d3d0acda5cb" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;True&lt;/code&gt; if the request is secure.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0ff433bc4ab49a9115a31137f879171a86eb554c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;True&lt;/code&gt; if the session is new, &lt;code&gt;False&lt;/code&gt; otherwise.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="91c1a517800b5131a9b335f5f0290beee96ddcf9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;True&lt;/code&gt; if the session object detected a modification. Be advised that modifications on mutable structures are not picked up automatically, in that situation you have to explicitly set the attribute to &lt;code&gt;True&lt;/code&gt; yourself. Here an example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ea87cc1d34278b8dddd0b42aefa3a09099b80ce8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;True&lt;/code&gt; if the signaling system is available. This is the case when &lt;a href=&quot;https://pypi.org/project/blinker/&quot;&gt;blinker&lt;/a&gt; is installed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8169c6a80ada381e17d402e3903aa1da3d7c2cbd" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;__name__&lt;/code&gt;: The name of a function is by default used as endpoint. If endpoint is provided explicitly this value is used. Additionally this will be prefixed with the name of the blueprint by default which cannot be customized from the function itself.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0a9df685baccd0775f17b1304c28201b1d6e8545" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;category_filter&lt;/code&gt; filters the messages down to only those matching the provided categories.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5f0ef33d69eaa4bfd51edf2610a408d765bb20c7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;datetime&lt;/code&gt; objects are serialized as &lt;a href=&quot;https://tools.ietf.org/html/rfc822.html&quot; id=&quot;index-4&quot;&gt;&lt;strong&gt;RFC 822&lt;/strong&gt;&lt;/a&gt; strings.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a1a8aec0fdea472b68178d0dc8c2e2ac58562f1f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;datetime&lt;/code&gt; objects are serialized as RFC 822 datetime strings. This is the same as the HTTP date format.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9630cfa9de15eee59ff35d285a289f503044a527" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;element.bind('event', func)&lt;/code&gt; specifies a function that should run when the user clicked on the element. If that function returns &lt;code&gt;false&lt;/code&gt;, the default behavior will not kick in (in this case, navigate to the &lt;code&gt;#&lt;/code&gt; URL).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6d3176be119a504dd754ba55119d4713b43fef8e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;get_X()&lt;/code&gt; creates resource &lt;code&gt;X&lt;/code&gt; if it does not exist, caching it as &lt;code&gt;g.X&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fb2784ba71d886313c08c5ab558d667082003f65" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;jsonify&lt;/code&gt; responses will be output with newlines, spaces, and indentation for easier reading by humans. Always enabled in debug mode.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9ad39dd664f6fb2f43a5f7941004b4d82a447efb" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;methods&lt;/code&gt;: If methods are not provided when the URL rule is added, Flask will look on the view function object itself if a &lt;code&gt;methods&lt;/code&gt; attribute exists. If it does, it will pull the information for the methods from there.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9a75c957764dd0ac561e48d56f98547b45faa26e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;provide_automatic_options&lt;/code&gt;: if this attribute is set Flask will either force enable or disable the automatic implementation of the HTTP &lt;code&gt;OPTIONS&lt;/code&gt; response. This can be useful when working with decorators that want to customize the &lt;code&gt;OPTIONS&lt;/code&gt; response on a per-view basis.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="10238de8f6fb16fd7d039ea5f0fce896ec3a6166" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;required_methods&lt;/code&gt;: if this attribute is set, Flask will always add these methods when registering a URL rule even if the methods were explicitly overridden in the &lt;code&gt;route()&lt;/code&gt; call.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="80a99a26d0ab1e08d56705aadc5ee2c98392c2d4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;teardown_X()&lt;/code&gt; closes or otherwise deallocates the resource if it exists. It is registered as a &lt;a href=&quot;../api/index#flask.Flask.teardown_appcontext&quot;&gt;&lt;code&gt;teardown_appcontext()&lt;/code&gt;&lt;/a&gt; handler.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3b5e60d40133ee70f88cc349bff1434e01260c96" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;uwsgi&lt;/code&gt; is designed to operate on WSGI callables found in python modules.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="57785c0779e7b30a41daa7c4f39e79f60ee523a6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;with_categories&lt;/code&gt; controls whether categories are returned with message text (&lt;code&gt;True&lt;/code&gt; gives a tuple, where &lt;code&gt;False&lt;/code&gt; gives just the message text).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="264a75f15e8768017378ff5aa7ec6d13020c47cd" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;403 Forbidden&lt;/em&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="586a59e4b962c9b6789d54ab5c4fb70be8626ea2" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;404 Not Found&lt;/em&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1a215ef6f36d7a15c9c4e28eadd90357881ee027" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;410 Gone&lt;/em&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d0089fa189954cfa234c9261f4e32598b6ca9227" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;500 Internal Server Error&lt;/em&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0c698feb1063fdd23757189804be5c20be3b972f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Case 1&lt;/strong&gt;: a module:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1ac7263ae26f8375bd73f43953ba8509bbf8115d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Case 2&lt;/strong&gt;: a package:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cc7899d748508c3f6d0376c833ed567b49ea1fb7" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Do not enable debug mode when deploying in production.&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="90464e2eb7a44300862e3bebd7dd58113e248b3b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Do not enable development when deploying in production.&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6095f8a459900b1bce961926ffcfed268a91f8e1" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Do not reveal the secret key when posting questions or committing code.&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dd6c015e544bb312da362ed087656a8ef19ebeb1" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Problem:&lt;/strong&gt; accessing resources gives IO errors</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e1d6e604546a2b5cc0e12efc04254d0aa00007d4" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Problem:&lt;/strong&gt; application dies with an error on print</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a7a3ecffdf761b753484f47d246a38db274b4435" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Problem:&lt;/strong&gt; application does not run, errorlog shows SystemExit ignored</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8cdaac50d9d45221b946902f26cbb6369824df2e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Problem:&lt;/strong&gt; application gives permission errors</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eb1917bcc07f14ce4521e82f28a99518998547b5" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Response&lt;/strong&gt; (&lt;em&gt;class&lt;/em&gt;) &amp;ndash; a Response class to use when instantiating a response. The default is &lt;a href=&quot;https://werkzeug.palletsprojects.com/en/1.0.x/wrappers/#werkzeug.wrappers.Response&quot;&gt;&lt;code&gt;werkzeug.wrappers.Response&lt;/code&gt;&lt;/a&gt; if unspecified.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="411b67c4fe1edc58c5eeee09275031bb5e53c7df" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Something that is untested is broken.&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5fc787f3e120c04b789d27fb663be30560c7e223" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;_anchor&lt;/strong&gt; &amp;ndash; if provided this is added as anchor to the URL.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f85b763a336db9c59a15b107acaccdc40fa95860" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;_external&lt;/strong&gt; &amp;ndash; if set to &lt;code&gt;True&lt;/code&gt;, an absolute URL is generated. Server address can be changed via &lt;code&gt;SERVER_NAME&lt;/code&gt; configuration variable which falls back to the &lt;code&gt;Host&lt;/code&gt; header, then to the IP and port of the request.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d1595e778c5a5688e14777098e30e5dd6b68c6cb" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;_method&lt;/strong&gt; &amp;ndash; if provided this explicitly specifies an HTTP method.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1447d3c985bc8df0dc058749bbebded427234294" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;_scheme&lt;/strong&gt; &amp;ndash; a string specifying the desired URL scheme. The &lt;code&gt;_external&lt;/code&gt; parameter must be set to &lt;code&gt;True&lt;/code&gt; or a &lt;a href=&quot;https://docs.python.org/3/library/exceptions.html#ValueError&quot;&gt;&lt;code&gt;ValueError&lt;/code&gt;&lt;/a&gt; is raised. The default behavior uses the same scheme as the current request, or &lt;code&gt;PREFERRED_URL_SCHEME&lt;/code&gt; from the &lt;a href=&quot;../config/index#config&quot;&gt;app configuration&lt;/a&gt; if no request context is available. As of Werkzeug 0.10, this also can be set to an empty string to build protocol-relative URLs.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="34c3e6a3ad0cd6fc2919296a83cdca75e56f4949" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;add_default_commands&lt;/strong&gt; &amp;ndash; if this is True then the default run and shell commands will be added.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9f23232a065d560810e918918df8dac4f8e60009" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;add_etags&lt;/strong&gt; &amp;ndash; set to &lt;code&gt;False&lt;/code&gt; to disable attaching of etags.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="608c490a3b7a7a5b5c6b7ddeecb0d80ef460a0fa" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;add_version_option&lt;/strong&gt; &amp;ndash; adds the &lt;code&gt;--version&lt;/code&gt; option.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e03bf5e3c42d15f81d4f67e808b36124061a65d8" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;app&lt;/strong&gt; &amp;ndash; App instance to use to configure the JSON decoder. Uses &lt;code&gt;current_app&lt;/code&gt; if not given, and falls back to the default encoder when not in an app context.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3b37a14f60ddc45460ae1a1c3cf7bb804d61f206" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;app&lt;/strong&gt; &amp;ndash; App instance to use to configure the JSON encoder. Uses &lt;code&gt;current_app&lt;/code&gt; if not given, and falls back to the default encoder when not in an app context.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dbf07ad6e8163af838c4a4bce1c3a7ac4b0d6c5d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;app&lt;/strong&gt; &amp;ndash; The application this blueprint is being registered with.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="37787e35d235832a5664b3d22f58d07ad3f70942" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;args&lt;/strong&gt; &amp;ndash; List of strings to invoke the command with.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="88cf87f171ef909b0a6ab39071d438ab199406f3" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;args&lt;/strong&gt; &amp;ndash; other positional arguments passed to &lt;a href=&quot;https://werkzeug.palletsprojects.com/en/1.0.x/test/#werkzeug.test.EnvironBuilder&quot;&gt;&lt;code&gt;EnvironBuilder&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d1bcb8aa084a30c31f73af5047e40564f8bb22f6" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;args&lt;/strong&gt; &amp;ndash; the arguments that should be used for parsing. If not provided, &lt;code&gt;sys.argv[1:]&lt;/code&gt; is used.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3a75994deebcb825c5077bcdeef7da54e5c68375" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;as_attachment&lt;/strong&gt; &amp;ndash; set to &lt;code&gt;True&lt;/code&gt; if you want to send this file with a &lt;code&gt;Content-Disposition: attachment&lt;/code&gt; header.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cebce9f13b390132727c9d5b7e56de78fe0916f8" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;as_tuple&lt;/strong&gt; &amp;ndash; Returns a tuple in the form &lt;code&gt;(environ, result)&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="23582261dff607d4d3e44b536500330ef7bdb924" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;attachment_filename&lt;/strong&gt; &amp;ndash; the filename for the attachment if it differs from the file&amp;rsquo;s filename.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2b6a8d9ecfbee14997e91e976ecbd1c424b8c4f4" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;attribute&lt;/strong&gt; &amp;ndash; the name of the variable of macro to access</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a228e2c624c314757358b46ea25ef7facc6dc542" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;base_url&lt;/strong&gt; &amp;ndash; Base URL where the app is being served, which &lt;code&gt;path&lt;/code&gt; is relative to. If not given, built from &lt;a href=&quot;../config/index#PREFERRED_URL_SCHEME&quot;&gt;&lt;code&gt;PREFERRED_URL_SCHEME&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;subdomain&lt;/code&gt;, &lt;a href=&quot;../config/index#SERVER_NAME&quot;&gt;&lt;code&gt;SERVER_NAME&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;../config/index#APPLICATION_ROOT&quot;&gt;&lt;code&gt;APPLICATION_ROOT&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e08852aa3e0cd48c5aed0e4b5f80a597e45b1b97" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;blueprint&lt;/strong&gt; &amp;ndash; The blueprint to register.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="60f5182daf9b0ea6fb9f318ff89d978dfc6d8de2" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;buffered&lt;/strong&gt; &amp;ndash; Set this to True to buffer the application run. This will automatically close the application for you as well.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5facf81498e0079ef55bd5885dca94b969d9d0d2" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;cache&lt;/strong&gt; &amp;ndash; Store the parsed JSON to return for subsequent calls.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2ac78ada69a3b300cd9537ca5ddd12a0fd5fc107" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;cache_timeout&lt;/strong&gt; &amp;ndash; the timeout in seconds for the headers. When &lt;code&gt;None&lt;/code&gt; (default), this value is set by &lt;a href=&quot;#flask.Flask.get_send_file_max_age&quot;&gt;&lt;code&gt;get_send_file_max_age()&lt;/code&gt;&lt;/a&gt; of &lt;a href=&quot;#flask.current_app&quot;&gt;&lt;code&gt;current_app&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b95bf3677403aad595b54105245fad6970996e9c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;category&lt;/strong&gt; &amp;ndash; the category for the message. The following values are recommended: &lt;code&gt;'message'&lt;/code&gt; for any kind of message, &lt;code&gt;'error'&lt;/code&gt; for errors, &lt;code&gt;'info'&lt;/code&gt; for information messages and &lt;code&gt;'warning'&lt;/code&gt; for warnings. However any kind of string can be used as category.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="82e097c0d2eec0c45ac59180d1b717bb03240315" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;category_filter&lt;/strong&gt; &amp;ndash; whitelist of categories to limit return values</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c985221253ea980e81e81f3f2a2fcf4887d98cd9" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;cli&lt;/strong&gt; &amp;ndash; Command object to invoke. Default is the app&amp;rsquo;s &lt;code&gt;cli&lt;/code&gt; group.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cfca5efe6070315aabe88f6e28752f88293b5ba8" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;code&lt;/strong&gt; &amp;ndash; the redirect status code. defaults to 302.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0cf85909f70be6f596494909631b27ba9f83ba88" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;code_or_exception&lt;/strong&gt; &amp;ndash; the code as integer for the handler, or an arbitrary exception</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cb0a12c6366f65d82e0b4aef42334074aa309e23" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;complete_var&lt;/strong&gt; &amp;ndash; the environment variable that controls the bash completion support. The default is &lt;code&gt;&quot;_&amp;lt;prog_name&amp;gt;_COMPLETE&quot;&lt;/code&gt; with prog_name in uppercase.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9accb05414012ef286c63ec9b579daea95d27af6" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;conditional&lt;/strong&gt; &amp;ndash; set to &lt;code&gt;True&lt;/code&gt; to enable conditional responses.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="436acc8b138a85e3690042f03a0e9f2f14edd79f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;context&lt;/strong&gt; &amp;ndash; the context as a dictionary that is updated in place to add extra variables.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bd01e1e0132c6d08fb0ecf0023b73a015ef8554c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;context&lt;/strong&gt; &amp;ndash; the variables that should be available in the context of the template.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="567ed41b221e0ca33f73ac9f8c40aff5a35564b1" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;create_app&lt;/strong&gt; &amp;ndash; an optional callback that is passed the script info and returns the loaded app.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6ff12fd0afca22f74b91d9848d29f3f36010bcd5" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;data&lt;/strong&gt; &amp;ndash; The request body, either as a string or a dict of form keys and values.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7563b4004e7b60a5c2bbaf7ee1b0854a837d3a09" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;debug&lt;/strong&gt; &amp;ndash; if given, enable or disable debug mode. See &lt;a href=&quot;#flask.Flask.debug&quot;&gt;&lt;code&gt;debug&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ba6db865977753c19ecb2e202717006b6d05e0de" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;default&lt;/strong&gt; &amp;ndash; Value to return if the attribute is not present, instead of raise a &lt;code&gt;KeyError&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8b4572637e651e0f86ec9a59440ad45428ed70ff" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;default&lt;/strong&gt; &amp;ndash; Value to return if the attribute is not present.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b527da7cfddf0d56f7594c808e2531d58ce6ddea" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;defaults&lt;/strong&gt; &amp;ndash; an optional dictionary of default values</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="966c23751131e64ded89a8b47948169db277bcc8" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;directory&lt;/strong&gt; &amp;ndash; the directory where all the files are stored.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b5b20d4a849059ef8928b86c8dac536a1639b541" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;directory&lt;/strong&gt; &amp;ndash; the trusted base directory.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bad95a09a377f167eef559ed125ab766f0f6c846" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;domain&lt;/strong&gt; &amp;ndash; if you want to set a cross-domain cookie. For example, &lt;code&gt;domain=&quot;.example.com&quot;&lt;/code&gt; will set a cookie that is readable by the domain &lt;code&gt;www.example.com&lt;/code&gt;, &lt;code&gt;foo.example.com&lt;/code&gt; etc. Otherwise, a cookie will only be readable by the domain that set it.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ee5560037f44164bef111fd58579a2a6e0b969be" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;endpoint&lt;/strong&gt; &amp;ndash; the endpoint for the registered URL rule. Flask itself assumes the name of the view function as endpoint</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b2eb3921e28e6378054eae42bee38e98f883a6c7" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;endpoint&lt;/strong&gt; &amp;ndash; the endpoint of the URL (name of the function)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="715d8c6a09bc16ccd980823bef52a18df5d84795" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;endpoint&lt;/strong&gt; &amp;ndash; the name of the endpoint</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5f892f1f744bf320a73a941e61f6e5b07ad9995f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;environ&lt;/strong&gt; &amp;ndash; A WSGI environment.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f1bcd7588bf2c2054cd86d8184e59ed8b857dd81" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;environ&lt;/strong&gt; &amp;ndash; a WSGI environment</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2c7f830e0dc9310dd0dcda54773ee2d85fbce1a1" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;exc&lt;/strong&gt; &amp;ndash; An unhandled exception raised while dispatching the request. Detected from the current exception information if not passed. Passed to each teardown function.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="71b5b11a26fc0578539c3ab4992d1a00c8775177" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;expires&lt;/strong&gt; &amp;ndash; should be a &lt;code&gt;datetime&lt;/code&gt; object or UNIX timestamp.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b14aac71e1eb0514b3b289e23e64c0f25473f3c1" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;extra&lt;/strong&gt; &amp;ndash; extra keyword arguments are forwarded to the context constructor. See &lt;code&gt;Context&lt;/code&gt; for more information.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5dca546864148d56bd3f25e8e7150140e9292f94" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;f&lt;/strong&gt; &amp;ndash; the WSGI callable to decorate</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1cb1c39ea52dc019fd095830470039c3288662ed" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;filename&lt;/strong&gt; &amp;ndash; the filename of the JSON file. This can either be an absolute filename or a filename relative to the root path.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="83ab7156117ed679a38cc0008eae23a622f8c40a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;filename&lt;/strong&gt; &amp;ndash; the filename of the config. This can either be an absolute filename or a filename relative to the root path.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3a5de9b615bfa684c62e5597d91b4a1055a872ca" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;filename&lt;/strong&gt; &amp;ndash; the filename relative to that directory to download.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6d322a6c67a48ebae00b57a4e147abbef3ca17a6" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;filename_or_fp&lt;/strong&gt; &amp;ndash; the filename of the file to send. This is relative to the &lt;a href=&quot;#flask.Flask.root_path&quot;&gt;&lt;code&gt;root_path&lt;/code&gt;&lt;/a&gt; if a relative path is specified. Alternatively a file object might be provided in which case &lt;code&gt;X-Sendfile&lt;/code&gt; might not work and fall back to the traditional method. Make sure that the file pointer is positioned at the start of data to send before calling &lt;a href=&quot;#flask.send_file&quot;&gt;&lt;code&gt;send_file()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b243c6201da775366011fe3e7e1e8c251530c231" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;first_registration&lt;/strong&gt; &amp;ndash; Whether this is the first time this blueprint has been registered on the application.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0c5c406c93fe42c8ef13ef5e92a06e3d3ba36e00" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;follow_redirects&lt;/strong&gt; &amp;ndash; Set this to True if the &lt;code&gt;Client&lt;/code&gt; should follow HTTP redirects.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6cb0062857f946730a45b909bd69cc590d53dd51" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;force&lt;/strong&gt; &amp;ndash; Ignore the mimetype and always try to parse JSON.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="92112810027c67d9b6792923b7dd2679b7f72e31" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;force&lt;/strong&gt; &amp;ndash; overwrite an existing tag. If false (default), a &lt;a href=&quot;https://docs.python.org/3/library/exceptions.html#KeyError&quot;&gt;&lt;code&gt;KeyError&lt;/code&gt;&lt;/a&gt; is raised.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6b17302a6588d2c188c83a62e198d63eea8ecba4" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;host&lt;/strong&gt; &amp;ndash; the hostname to listen on. Set this to &lt;code&gt;'0.0.0.0'&lt;/code&gt; to have the server available externally as well. Defaults to &lt;code&gt;'127.0.0.1'&lt;/code&gt; or the host in the &lt;code&gt;SERVER_NAME&lt;/code&gt; config variable if present.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="86c370d64230ab4ee40d4af15be746adee8d4b5a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;host_matching&lt;/strong&gt; &amp;ndash; set &lt;code&gt;url_map.host_matching&lt;/code&gt; attribute. Defaults to False.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c6abfc3fd60a142efad961727eba950cfe4696e2" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;httponly&lt;/strong&gt; &amp;ndash; disallow JavaScript to access the cookie. This is an extension to the cookie standard and probably not supported by all browsers.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dc1c4bf93cb56cb42972a3aa6f81234dcccf558a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;import_name&lt;/strong&gt; &amp;ndash; The name of the blueprint package, usually &lt;code&gt;__name__&lt;/code&gt;. This helps locate the &lt;code&gt;root_path&lt;/code&gt; for the blueprint.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bcb74794c3d0d61273113000a619afa0150c7bce" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;import_name&lt;/strong&gt; &amp;ndash; the name of the application package</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4f91914607be62ff620695373d2b333f2de9db31" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;index&lt;/strong&gt; &amp;ndash; index to insert the new tag in the tag order. Useful when the new tag is a special case of an existing tag. If &lt;code&gt;None&lt;/code&gt; (default), the tag is appended to the end of the order.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ba583a2c3dccbae2f348febde867610db8de4f9c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;installation manager&lt;/strong&gt;: &lt;strong&gt;pip&lt;/strong&gt; can install other libraries for you.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e237783436526a4dbaf8a1a8216564f65f960f82" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;instance_path&lt;/strong&gt; &amp;ndash; An alternative instance path for the application. By default the folder &lt;code&gt;'instance'&lt;/code&gt; next to the package or module is assumed to be the instance path.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a96923e1e1d0bb10ac916e97ee22707b6b284e21" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;instance_relative_config&lt;/strong&gt; &amp;ndash; if set to &lt;code&gt;True&lt;/code&gt; relative filenames for loading the config are assumed to be relative to the instance path instead of the application root.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="233542655672f9caab9f52e00cb2eee8eeb306f5" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;json&lt;/strong&gt; &amp;ndash; If given, this is serialized as JSON and passed as &lt;code&gt;data&lt;/code&gt;. Also defaults &lt;code&gt;content_type&lt;/code&gt; to &lt;code&gt;application/json&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="20bababe99e1be9594e2bb0c9974fe55cda58a3f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;key&lt;/strong&gt; &amp;ndash; the key (name) of the cookie to be set.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f8e0eef1f9bb1a0200cab8b9e78f7736ecd3e56f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;kwargs&lt;/strong&gt; &amp;ndash; Extra arguments passed to &lt;a href=&quot;https://docs.python.org/3/library/json.html#json.dumps&quot;&gt;&lt;code&gt;json.dumps()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="644840f93feb77f79303ee2c707aa05a89f72d47" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;kwargs&lt;/strong&gt; &amp;ndash; other keyword arguments passed to &lt;a href=&quot;https://werkzeug.palletsprojects.com/en/1.0.x/test/#werkzeug.test.EnvironBuilder&quot;&gt;&lt;code&gt;EnvironBuilder&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="328399b8acbd1e22ad94652c48f0592e8b8906b5" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;last_modified&lt;/strong&gt; &amp;ndash; set the &lt;code&gt;Last-Modified&lt;/code&gt; header to this value, a &lt;a href=&quot;https://docs.python.org/3/library/datetime.html#datetime.datetime&quot;&gt;&lt;code&gt;datetime&lt;/code&gt;&lt;/a&gt; or timestamp. If a file was passed, this overrides its mtime.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9e3edb5f3799659366d8469b680ec30ab00d3303" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;load_dotenv&lt;/strong&gt; &amp;ndash; Load the nearest &lt;code&gt;.env&lt;/code&gt; and &lt;code&gt;.flaskenv&lt;/code&gt; files to set environment variables. Will also change the working directory to the directory containing the first file found.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fb9259596f24c3b95d94b25aa3dad4cab66fe87d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;location&lt;/strong&gt; &amp;ndash; the location the response should redirect to.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cfa78e8e12ae03fa578950a522088cca5df93006" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;lowercase&lt;/strong&gt; &amp;ndash; a flag indicating if the keys of the resulting dictionary should be lowercase</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="341507770f7f23ece6752ad0185313bb18a98df1" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;max_age&lt;/strong&gt; &amp;ndash; should be a number of seconds, or &lt;code&gt;None&lt;/code&gt; (default) if the cookie should last only as long as the client&amp;rsquo;s browser session.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9b9e378667506600bae479abb7484f59412dc7e9" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;message&lt;/strong&gt; &amp;ndash; the message to be flashed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="83abaed0475e11c5dde04305f8e3692fc8f92c51" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;mimetype&lt;/strong&gt; &amp;ndash; the mimetype of the file if provided. If a file path is given, auto detection happens as fallback, otherwise an error will be raised.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8fca33211b8363f7bd1d42f537d4b3666e63820b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;mode&lt;/strong&gt; &amp;ndash; Open file in this mode. Only reading is supported, valid values are &amp;ldquo;r&amp;rdquo; (or &amp;ldquo;rt&amp;rdquo;) and &amp;ldquo;rb&amp;rdquo;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3221b90ec75d5af5e416ae14d47ed39a687dfadf" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;mode&lt;/strong&gt; &amp;ndash; resource file opening mode, default is &amp;lsquo;rb&amp;rsquo;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6eefdbc1e241938ab196d36c1a6a08cde6a760af" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;name&lt;/strong&gt; &amp;ndash; Name of attribute to get.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="71880a7d1a09f14383780d930ed9dd0b071ebdad" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;name&lt;/strong&gt; &amp;ndash; Name of attribute to pop.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9fae89b5d7a4b2e0d0b6f61434c499fa833bcfd4" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;name&lt;/strong&gt; &amp;ndash; The name of the blueprint. Will be prepended to each endpoint name.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ce95bfb5395d0eb5de5b2344a61f26643041f839" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;name&lt;/strong&gt; &amp;ndash; the optional name of the filter, otherwise the function name will be used.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5a8d0f4a1f689fc86b2632d5b129e0bd41e90051" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;name&lt;/strong&gt; &amp;ndash; the optional name of the global function, otherwise the function name will be used.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="23fcade274165f87a767fc3d9050b92cf7c48ed2" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;name&lt;/strong&gt; &amp;ndash; the optional name of the global, otherwise the function name will be used.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="76f060be3e4ec9eb75bc2094253c4413d21a3e9a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;name&lt;/strong&gt; &amp;ndash; the optional name of the test, otherwise the function name will be used.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3443af278f6c89d30edeaafaf6c849e230f0414a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;namespace&lt;/strong&gt; &amp;ndash; a configuration namespace</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="09f6744c9ffc17ea40fc7e54317b18225c43b912" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;obj&lt;/strong&gt; &amp;ndash; Object to serialize to JSON.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b9954097bf5706b9d236899858c29b202cafaedd" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;obj&lt;/strong&gt; &amp;ndash; an import name or object</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="45883785729a9ca6fff35a1f93ab5b82a6a65429" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;options&lt;/strong&gt; &amp;ndash; Additional keyword arguments are passed to &lt;a href=&quot;#flask.blueprints.BlueprintSetupState&quot;&gt;&lt;code&gt;BlueprintSetupState&lt;/code&gt;&lt;/a&gt;. They can be accessed in &lt;a href=&quot;#flask.Blueprint.record&quot;&gt;&lt;code&gt;record()&lt;/code&gt;&lt;/a&gt; callbacks.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="20c0918b0f29f6c5d49b69e6bcb7f6865e8d1a78" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;options&lt;/strong&gt; &amp;ndash; Keyword arguments forwarded from &lt;a href=&quot;#flask.Flask.register_blueprint&quot;&gt;&lt;code&gt;register_blueprint()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="63fd14ff3e936f5aa5b55e19b61fc482f5d9044f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;options&lt;/strong&gt; &amp;ndash; optional keyword arguments that are directly forwarded to &lt;a href=&quot;#flask.send_file&quot;&gt;&lt;code&gt;send_file()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0cfd35d594098c111cd3256a2ece7c2e59090363" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;options&lt;/strong&gt; &amp;ndash; the options to be forwarded to the underlying &lt;a href=&quot;https://werkzeug.palletsprojects.com/en/1.0.x/routing/#werkzeug.routing.Rule&quot;&gt;&lt;code&gt;Rule&lt;/code&gt;&lt;/a&gt; object. A change to Werkzeug is handling of method options. methods is a list of methods this rule should be limited to (&lt;code&gt;GET&lt;/code&gt;, &lt;code&gt;POST&lt;/code&gt; etc.). By default a rule just listens for &lt;code&gt;GET&lt;/code&gt; (and implicitly &lt;code&gt;HEAD&lt;/code&gt;). Starting with Flask 0.6, &lt;code&gt;OPTIONS&lt;/code&gt; is implicitly added and handled by the standard request handling.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="acde59954db3e79b78a4399703b7183b6850bfc1" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;options&lt;/strong&gt; &amp;ndash; the options to be forwarded to the underlying Werkzeug server. See &lt;a href=&quot;https://werkzeug.palletsprojects.com/en/1.0.x/serving/#werkzeug.serving.run_simple&quot;&gt;&lt;code&gt;werkzeug.serving.run_simple()&lt;/code&gt;&lt;/a&gt; for more information.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ea4b91c31816a15754693895030e4bc812d600a6" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;package registry&lt;/strong&gt;: setuptools registers your package with your Python installation. This makes it possible to query information provided by one package from another package. The best known feature of this system is the entry point support which allows one package to declare an &amp;ldquo;entry point&amp;rdquo; that another package can hook into to extend the other package.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4651aafe54b0b3efe08850be207249afdb946617" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;path&lt;/strong&gt; &amp;ndash; Load the file at this location instead of searching.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="616809a2b19be481cfef32d2c30be25b47a487a4" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;path&lt;/strong&gt; &amp;ndash; URL path being requested.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="64e3dcc1fc99ee5f72e7717ac10b6d90665f578c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;path&lt;/strong&gt; &amp;ndash; limits the cookie to a given path, per default it will span the whole domain.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1547b9b759195c1bf4fce9f654fb421c815e9ce6" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;pathnames&lt;/strong&gt; &amp;ndash; the untrusted pathnames relative to that directory.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9dbc57aa22e3ce50d65f9ec92b784d030742b924" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;port&lt;/strong&gt; &amp;ndash; the port of the webserver. Defaults to &lt;code&gt;5000&lt;/code&gt; or the port defined in the &lt;code&gt;SERVER_NAME&lt;/code&gt; config variable if present.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="62b17d46b038075847273f6d8e88c6e866ad377a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;prog_name&lt;/strong&gt; &amp;ndash; the program name that should be used. By default the program name is constructed by taking the file name from &lt;code&gt;sys.argv[0]&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ae0eeab87bd56487427841a3f0860c76160f7a52" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;provide_automatic_options&lt;/strong&gt; &amp;ndash; controls whether the &lt;code&gt;OPTIONS&lt;/code&gt; method should be added automatically. This can also be controlled by setting the &lt;code&gt;view_func.provide_automatic_options = False&lt;/code&gt; before adding the rule.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1b152617d548ba0b03f8171a3a574efefa172471" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;request&lt;/strong&gt; &amp;ndash; an instance of &lt;a href=&quot;#flask.Flask.request_class&quot;&gt;&lt;code&gt;request_class&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6ec94dfa7647b3552d6221d5884a774d1334e7af" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;resource&lt;/strong&gt; &amp;ndash; the name of the resource. To access resources within subfolders use forward slashes as separator.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ee9b13dbad768d5c2f557d9416f58257f023e6a8" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;response&lt;/strong&gt; &amp;ndash; a &lt;a href=&quot;#flask.Flask.response_class&quot;&gt;&lt;code&gt;response_class&lt;/code&gt;&lt;/a&gt; object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="94138dc48a11b641d919e8ad2fc83e01ba77f4f7" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;response&lt;/strong&gt; &amp;ndash; an instance of &lt;a href=&quot;#flask.Flask.response_class&quot;&gt;&lt;code&gt;response_class&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="838218d17dfba493873c47fbc2bfecfaece04b8b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;root_path&lt;/strong&gt; &amp;ndash; By default, the blueprint will automatically this based on &lt;code&gt;import_name&lt;/code&gt;. In certain situations this automatic detection can fail, so the path can be specified manually instead.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c7d4dd605a6153d7e6092a1f948e6ebf4e7a6269" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;root_path&lt;/strong&gt; &amp;ndash; Flask by default will automatically calculate the path to the root of the application. In certain situations this cannot be achieved (for instance if the package is a Python 3 namespace package) and needs to be manually defined.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0de3b7ef6cf94a3875eeec18bdf3efd8c4a41f40" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;root_path&lt;/strong&gt; &amp;ndash; path to which files are read relative from. When the config object is created by the application, this is the application&amp;rsquo;s &lt;a href=&quot;#flask.Flask.root_path&quot;&gt;&lt;code&gt;root_path&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9d3b8771cc9fe0c3d20ad6d12e73da6ced124021" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;rule&lt;/strong&gt; &amp;ndash; the URL rule as string</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6eaaddbe3c3e69fa5b71f13a9ebcc3cc5fccdd51" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;rv&lt;/strong&gt; &amp;ndash;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b95eaf1af945c8c6bd20efa56e9ede33cd08d71a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;s&lt;/strong&gt; &amp;ndash; JSON string to deserialize.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="42a589dce52343199459383329b4d931b13763f5" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;samesite&lt;/strong&gt; &amp;ndash; Limits the scope of the cookie such that it will only be attached to requests if those requests are &amp;ldquo;same-site&amp;rdquo;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ceddad5eb9b07ac149c718e003962beb5ca775d4" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;secure&lt;/strong&gt; &amp;ndash; If &lt;code&gt;True&lt;/code&gt;, the cookie will only be available via HTTPS</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fb43fa9182a4ffa8037c2310458a0feb63b724d5" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;session&lt;/strong&gt; &amp;ndash; the session to be saved (a &lt;code&gt;SecureCookie&lt;/code&gt; object)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cc698330dd71198b795cc28c41456151b3da349e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;set_debug_flag&lt;/strong&gt; &amp;ndash; Set the app&amp;rsquo;s debug flag based on the active environment</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1ff4595f55bb6d1a9c333e706d65881c01cb6e59" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;silent&lt;/strong&gt; &amp;ndash; Silence parsing errors and return &lt;code&gt;None&lt;/code&gt; instead.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b82bed6f63753e6ee4f8f3b99342863e4608a427" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;silent&lt;/strong&gt; &amp;ndash; set to &lt;code&gt;True&lt;/code&gt; if you want silent failure for missing files.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="64a139cf485a0698b6fc63a1906d5c4decb255b6" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;source&lt;/strong&gt; &amp;ndash; the source code of the template to be rendered</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2a1934ff83305c7b43db5df1d07634a8d55c23bd" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;standalone_mode&lt;/strong&gt; &amp;ndash; the default behavior is to invoke the script in standalone mode. Click will then handle exceptions and convert them into error messages and the function will never return but shut down the interpreter. If this is set to &lt;code&gt;False&lt;/code&gt; they will be propagated to the caller and the return value of this function is the return value of &lt;code&gt;invoke()&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bd6707148fd29a9b7cf10c41d91b2563ece080a5" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;start_response&lt;/strong&gt; &amp;ndash; A callable accepting a status code, a list of headers, and an optional exception context to start the response.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5a38b56ef2f5c4468fdb63f07a9ca3f865b531bf" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;static_folder&lt;/strong&gt; &amp;ndash; A folder with static files that should be served by the blueprint&amp;rsquo;s static route. The path is relative to the blueprint&amp;rsquo;s root path. Blueprint static files are disabled by default.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0792f5e1146067466be3321b475a3e54e270e8ed" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;static_folder&lt;/strong&gt; &amp;ndash; The folder with static files that is served at &lt;code&gt;static_url_path&lt;/code&gt;. Relative to the application &lt;code&gt;root_path&lt;/code&gt; or an absolute path. Defaults to &lt;code&gt;'static'&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9d75cee46de5939c97c2dbf9f3a5b4dcf51d690c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;static_host&lt;/strong&gt; &amp;ndash; the host to use when adding the static route. Defaults to None. Required when using &lt;code&gt;host_matching=True&lt;/code&gt; with a &lt;code&gt;static_folder&lt;/code&gt; configured.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="636e1339c26731ba765922a3fafce45cd370d8ab" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;static_url_path&lt;/strong&gt; &amp;ndash; The url to serve static files from. Defaults to &lt;code&gt;static_folder&lt;/code&gt;. If the blueprint does not have a &lt;code&gt;url_prefix&lt;/code&gt;, the app&amp;rsquo;s static route will take precedence, and the blueprint&amp;rsquo;s static files won&amp;rsquo;t be accessible.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f2c7eeb12209f130ea71e49d9876d5e23d174d1e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;static_url_path&lt;/strong&gt; &amp;ndash; can be used to specify a different path for the static files on the web. Defaults to the name of the &lt;code&gt;static_folder&lt;/code&gt; folder.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="43de4e96f5888d465bae1ccc9861692a8491c5df" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;subdomain&lt;/strong&gt; &amp;ndash; A subdomain that blueprint routes will match on by default.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="28bb932225862f7e5066663987e458c136fd1fd1" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;subdomain&lt;/strong&gt; &amp;ndash; Blueprint routes will match on this subdomain.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="89d1ddcdf4dce18e70405d776c3cffc8e5ae1ba0" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;subdomain&lt;/strong&gt; &amp;ndash; Subdomain name to append to &lt;a href=&quot;../config/index#SERVER_NAME&quot;&gt;&lt;code&gt;SERVER_NAME&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="28f1ce45cd5c09ca98e9ce5025533da7a78db9b2" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;subdomain_matching&lt;/strong&gt; &amp;ndash; consider the subdomain relative to &lt;a href=&quot;../config/index#SERVER_NAME&quot;&gt;&lt;code&gt;SERVER_NAME&lt;/code&gt;&lt;/a&gt; when matching routes. Defaults to False.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f046344fb991494cfc8ee13ae6fec25a29336574" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;support for dependencies&lt;/strong&gt;: a library or application can declare a list of other libraries it depends on which will be installed automatically for you.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="52010c2493a4864b79c4bbbae3428f0c5955aa55" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;tag_class&lt;/strong&gt; &amp;ndash; tag class to register. Will be instantiated with this serializer instance.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a75441c29c39f78a649f4538e43cf30ef8a11788" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;template_folder&lt;/strong&gt; &amp;ndash; A folder with templates that should be added to the app&amp;rsquo;s template search path. The path is relative to the blueprint&amp;rsquo;s root path. Blueprint templates are disabled by default. Blueprint templates have a lower precedence than those in the app&amp;rsquo;s templates folder.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b134dfa058aff59df5a8f3dad11fe5004684b1e3" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;template_folder&lt;/strong&gt; &amp;ndash; the folder that contains the templates that should be used by the application. Defaults to &lt;code&gt;'templates'&lt;/code&gt; folder in the root path of the application.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="78ad3456f1e1d5f215f966fc6df4dbf3b23a4564" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;template_name&lt;/strong&gt; &amp;ndash; the name of the template</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="be08cfdbf4304955f3c4f6d7159667d9ff895284" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;template_name_or_list&lt;/strong&gt; &amp;ndash; the name of the template to be rendered, or an iterable with template names the first one existing will be rendered</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8c7a73816a41bd97ccb7f96c095d7faf63ca4e09" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;trim_namespace&lt;/strong&gt; &amp;ndash; a flag indicating if the keys of the resulting dictionary should not include the namespace</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a1df9c9f71715518d521ca7c9ab97f53ddc18b9e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;url_defaults&lt;/strong&gt; &amp;ndash; A dict of default values that blueprint routes will receive by default.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="041e919e409b4a2e66d21f7ed719244b7a4ead48" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;url_defaults&lt;/strong&gt; &amp;ndash; Blueprint routes will use these default values for view arguments.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b9cc976587c1aac4187b91b7493c8a2420429fb2" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;url_prefix&lt;/strong&gt; &amp;ndash; A path to prepend to all of the blueprint&amp;rsquo;s URLs, to make them distinct from the rest of the app&amp;rsquo;s routes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f7f2fe1dd2fc43a6ea07decc9bd7de936fa594bb" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;url_prefix&lt;/strong&gt; &amp;ndash; Blueprint routes will be prefixed with this.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d52c3f8fa8bfa44568e1d2b8c68184d204345d41" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;url_scheme&lt;/strong&gt; &amp;ndash; Scheme to use instead of &lt;a href=&quot;../config/index#PREFERRED_URL_SCHEME&quot;&gt;&lt;code&gt;PREFERRED_URL_SCHEME&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7d5037fc2f8c82bc073044c9938dfef0ed80d7b1" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;value&lt;/strong&gt; &amp;ndash; the value of the cookie.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="026d77bd8f2cf9d11fd1fcf1941ef90e01ae50e6" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;values&lt;/strong&gt; &amp;ndash; the variable arguments of the URL rule</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="afe3909c51c5dd518fc5ec8446070e9a35f915b5" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;variable_name&lt;/strong&gt; &amp;ndash; name of the environment variable</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aa3c8e695730991824b688f4d438175f363598e0" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;view_func&lt;/strong&gt; &amp;ndash; the function to call when serving a request to the provided endpoint</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e293ef0644700b0ed58cc9cf00f447f987e009a0" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;with_categories&lt;/strong&gt; &amp;ndash; set to &lt;code&gt;True&lt;/code&gt; to also receive categories.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4335ddcceeadc3c2980168f3d242e2e9008f888d" translate="yes" xml:space="preserve">
          <source>A &amp;ldquo;favicon&amp;rdquo; is an icon used by browsers for tabs and bookmarks. This helps to distinguish your website and to give it a unique brand.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dc085f3b5d831be583daaae065343cf9dd73051f" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;../api/index#flask.Blueprint&quot;&gt;&lt;code&gt;Blueprint&lt;/code&gt;&lt;/a&gt; can add handlers for these events that are specific to the blueprint. The handlers for a blueprint will run if the blueprint owns the route that matches the request.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8cf6544702b00c1cf49361d5d7c487c20fdc22f2" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;https://click.palletsprojects.com/en/7.x/api/#click.testing.CliRunner&quot;&gt;&lt;code&gt;CliRunner&lt;/code&gt;&lt;/a&gt; for testing a Flask app&amp;rsquo;s CLI commands. Typically created using &lt;a href=&quot;#flask.Flask.test_cli_runner&quot;&gt;&lt;code&gt;test_cli_runner()&lt;/code&gt;&lt;/a&gt;. See &lt;a href=&quot;../testing/index#testing-cli&quot;&gt;Testing CLI Commands&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="20941e86e984d7a85b36ba57ef58dcb2bf4f9086" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;https://docs.python.org/3/library/datetime.html#datetime.timedelta&quot;&gt;&lt;code&gt;timedelta&lt;/code&gt;&lt;/a&gt; which is used as default cache_timeout for the &lt;a href=&quot;#flask.send_file&quot;&gt;&lt;code&gt;send_file()&lt;/code&gt;&lt;/a&gt; functions. The default is 12 hours.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b8edb7ada96e4aed24b77e4d67610d222c9cc85b" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;https://docs.python.org/3/library/datetime.html#datetime.timedelta&quot;&gt;&lt;code&gt;timedelta&lt;/code&gt;&lt;/a&gt; which is used to set the expiration date of a permanent session. The default is 31 days which makes a permanent session survive for roughly one month.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b457d5ab81cf21b08672a9090c915aa457cdc524" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;https://docs.python.org/3/library/stdtypes.html#dict&quot;&gt;&lt;code&gt;dict&lt;/code&gt;&lt;/a&gt; with the contents of all cookies transmitted with the request.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a499f563648ad62aa50de74d59d98dfbaac9bb50" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;https://werkzeug.palletsprojects.com/en/1.0.x/datastructures/#werkzeug.datastructures.CombinedMultiDict&quot;&gt;&lt;code&gt;werkzeug.datastructures.CombinedMultiDict&lt;/code&gt;&lt;/a&gt; that combines &lt;a href=&quot;#flask.Request.args&quot;&gt;&lt;code&gt;args&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#flask.Request.form&quot;&gt;&lt;code&gt;form&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c2fa30b4bddca6906d7577cce861c27765dae15c" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;https://werkzeug.palletsprojects.com/en/1.0.x/datastructures/#werkzeug.datastructures.Headers&quot;&gt;&lt;code&gt;Headers&lt;/code&gt;&lt;/a&gt; object representing the response headers.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6642f19f183bb71c8f314208a5214be3a49d9502" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;https://werkzeug.palletsprojects.com/en/1.0.x/datastructures/#werkzeug.datastructures.RequestCacheControl&quot;&gt;&lt;code&gt;RequestCacheControl&lt;/code&gt;&lt;/a&gt; object for the incoming cache control headers.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="19b9de965b0e40a9ffe87881eaa522535109a99f" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;&amp;lt;form&amp;gt;&lt;/code&gt; tag is marked with &lt;code&gt;enctype=multipart/form-data&lt;/code&gt; and an &lt;code&gt;&amp;lt;input type=file&amp;gt;&lt;/code&gt; is placed in that form.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ce4516b136c5bf25d0b2a0f5d2f80c7b2dd69d8e" translate="yes" xml:space="preserve">
          <source>A Gentle Introduction</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4d38a89fdf3cd17e8a79ed93a3db0e50a5e35ed0" translate="yes" xml:space="preserve">
          <source>A Minimal Application</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="39706d28b9141573035b4927993c2623672a7bbb" translate="yes" xml:space="preserve">
          <source>A Python web application based on WSGI has to have one central callable object that implements the actual application. In Flask this is an instance of the &lt;a href=&quot;../api/index#flask.Flask&quot;&gt;&lt;code&gt;Flask&lt;/code&gt;&lt;/a&gt; class. Each Flask application has to create an instance of this class itself and pass it the name of the module, but why can&amp;rsquo;t Flask do that itself?</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1f01334abc2e009bc8e41c2daeae9b2af970ed8f" translate="yes" xml:space="preserve">
          <source>A basic &lt;code&gt;setup.py&lt;/code&gt; file for a Flask application looks like this:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="538357571bbc255d4d781423e527f50d623c1218" translate="yes" xml:space="preserve">
          <source>A basic FastCGI configuration for lighttpd looks like that:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f48e6ec2be15786faa6c603c20ba50ae5511ef46" translate="yes" xml:space="preserve">
          <source>A basic Flask FastCGI configuration for nginx looks like this:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c2fd3ceedec9d8911f0a73dafbf7c92b1f515b0f" translate="yes" xml:space="preserve">
          <source>A basic flask nginx configuration looks like this:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9fd63952630dd4b6f44457e3b807f7fb40266af3" translate="yes" xml:space="preserve">
          <source>A blueprint can expose a folder with static files by providing the path to the folder on the filesystem with the &lt;code&gt;static_folder&lt;/code&gt; argument. It is either an absolute path or relative to the blueprint&amp;rsquo;s location:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="717fe32550a4264473932c96d8bf2285e92e14a5" translate="yes" xml:space="preserve">
          <source>A blueprint in Flask is not a pluggable app because it is not actually an application &amp;ndash; it&amp;rsquo;s a set of operations which can be registered on an application, even multiple times. Why not have multiple application objects? You can do that (see &lt;a href=&quot;../patterns/appdispatch/index#app-dispatch&quot;&gt;Application Dispatching&lt;/a&gt;), but your applications will have separate configs and will be managed at the WSGI layer.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="947b41ec478d3b35232e29596a89532b6866316e" translate="yes" xml:space="preserve">
          <source>A blueprint is an object that allows defining application functions without requiring an application object ahead of time. It uses the same decorators as &lt;a href=&quot;#flask.Flask&quot;&gt;&lt;code&gt;Flask&lt;/code&gt;&lt;/a&gt;, but defers the need for an application by recording them for later registration.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="baab44730efc2515b4d79e67f8f95a25efc365b7" translate="yes" xml:space="preserve">
          <source>A child template might look like this:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9ee10b23ae58442c19b92190b48d7d42664b8f84" translate="yes" xml:space="preserve">
          <source>A class-based view that dispatches request methods to the corresponding class methods. For example, if you implement a &lt;code&gt;get&lt;/code&gt; method, it will be used to handle &lt;code&gt;GET&lt;/code&gt; requests.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2b65be65d78a3f2f2bb402cc257ef307b4385c8c" translate="yes" xml:space="preserve">
          <source>A common pattern invented by the TurboGears guys a while back is a templating decorator. The idea of that decorator is that you return a dictionary with the values passed to the template from the view function and the template is automatically rendered. With that, the following three examples do exactly the same:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9f748c723ecbb5f9a1812f05b54ad30d86d7b35e" translate="yes" xml:space="preserve">
          <source>A common question is how to add a favicon to a Flask application. First, of course, you need an icon. It should be 16 &amp;times; 16 pixels and in the ICO file format. This is not a requirement but a de-facto standard supported by all relevant browsers. Put the icon in your static directory as &lt;code&gt;favicon.ico&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1959d4fdae056b89b355d80ffdb10f02de7a3b96" translate="yes" xml:space="preserve">
          <source>A common response format when writing an API is JSON. It&amp;rsquo;s easy to get started writing such an API with Flask. If you return a &lt;code&gt;dict&lt;/code&gt; from a view, it will be converted to a JSON response.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="323df0dc4b2114fb866b83451b32513e79d173af" translate="yes" xml:space="preserve">
          <source>A common use for &lt;a href=&quot;../api/index#flask.g&quot;&gt;&lt;code&gt;g&lt;/code&gt;&lt;/a&gt; is to manage resources during a request.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a84a122039e77a32723b3921b16cd5e8292d0f32" translate="yes" xml:space="preserve">
          <source>A compact representation for lossless serialization of non-standard JSON types. &lt;a href=&quot;#flask.sessions.SecureCookieSessionInterface&quot;&gt;&lt;code&gt;SecureCookieSessionInterface&lt;/code&gt;&lt;/a&gt; uses this to serialize the session data, but it may be useful in other places. It can be extended to support other types.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="12e436e4de42b803e4f825856478e4c148026932" translate="yes" xml:space="preserve">
          <source>A decorator that is used to register a custom template global function. You can specify a name for the global function, otherwise the function name will be used. Example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dcef09237708fa729080d1cd3a45f161f3a78173" translate="yes" xml:space="preserve">
          <source>A decorator that is used to register a function given an error code. Example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5ce20a3efb5f7382979a3a761cad531f9d44ce61" translate="yes" xml:space="preserve">
          <source>A decorator that is used to register a view function for a given URL rule. This does the same thing as &lt;a href=&quot;#flask.Flask.add_url_rule&quot;&gt;&lt;code&gt;add_url_rule()&lt;/code&gt;&lt;/a&gt; but is intended for decorator usage:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="48c9d6e1ce427a51f3730cd63f72dc320ca87c6c" translate="yes" xml:space="preserve">
          <source>A decorator that is used to register custom template filter. You can specify a name for the filter, otherwise the function name will be used. Example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="de84f30c0a9b1b31048271eb8625c12d3c8e17df" translate="yes" xml:space="preserve">
          <source>A decorator that is used to register custom template test. You can specify a name for the test, otherwise the function name will be used. Example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4c77f40c0399cd72328d9019d30c3986e5adb2a4" translate="yes" xml:space="preserve">
          <source>A decorator to register a function as an endpoint. Example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="900df345e72f33af46f34332213c6e5174cf5f03" translate="yes" xml:space="preserve">
          <source>A descriptor that calls &lt;code&gt;get_data()&lt;/code&gt; and &lt;code&gt;set_data()&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fd1b2762dcd919e1e0e00830acc726fd79b129e2" translate="yes" xml:space="preserve">
          <source>A dict of view arguments that matched the request. If an exception happened when matching, this will be &lt;code&gt;None&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8207f625528912a3f93634a66a8276a0959993ba" translate="yes" xml:space="preserve">
          <source>A dictionary of all registered error handlers. The key is &lt;code&gt;None&lt;/code&gt; for error handlers active on the application, otherwise the key is the name of the blueprint. Each key points to another dictionary where the key is the status code of the http exception. The special key &lt;code&gt;None&lt;/code&gt; points to a list of tuples where the first item is the class for the instance check and the second the error handler function.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="245ff3a9d696c535678c50df5309abfb18036b9e" translate="yes" xml:space="preserve">
          <source>A dictionary of all view functions registered. The keys will be function names which are also used to generate URLs and the values are the function objects themselves. To register a view function, use the &lt;a href=&quot;#flask.Flask.route&quot;&gt;&lt;code&gt;route()&lt;/code&gt;&lt;/a&gt; decorator.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4a31e3ecd44d38cbe93426a981e770094dd70627" translate="yes" xml:space="preserve">
          <source>A dictionary that will be jsonify&amp;rsquo;d before being returned.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="77bf2ac8d819c8f0bed5b57c455bee4354d82875" translate="yes" xml:space="preserve">
          <source>A dictionary with URL defaults that is added to each and every URL that was defined with the blueprint.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7e87505f9a6e000044a3690e919f8a858f0640eb" translate="yes" xml:space="preserve">
          <source>A dictionary with arbitrary data that can be associated with this script info.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fb2676a1158a218c2c1deb11c20b63a6c7788b31" translate="yes" xml:space="preserve">
          <source>A dictionary with defaults for this rule. See the example above for how defaults work.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3994a23152b5db01fb43f08862f57787a4d3df00" translate="yes" xml:space="preserve">
          <source>A dictionary with list of functions that are called without argument to populate the template context. The key of the dictionary is the name of the blueprint this function is active for, &lt;code&gt;None&lt;/code&gt; for all requests. Each returns a dictionary that the template context is updated with. To register a function here, use the &lt;a href=&quot;#flask.Flask.context_processor&quot;&gt;&lt;code&gt;context_processor()&lt;/code&gt;&lt;/a&gt; decorator.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="60db2de6d989f347ec7927eefb6e65b33ac9858f" translate="yes" xml:space="preserve">
          <source>A dictionary with lists of functions that are called after each request, even if an exception has occurred. The key of the dictionary is the name of the blueprint this function is active for, &lt;code&gt;None&lt;/code&gt; for all requests. These functions are not allowed to modify the request, and their return values are ignored. If an exception occurred while processing the request, it gets passed to each teardown_request function. To register a function here, use the &lt;a href=&quot;#flask.Flask.teardown_request&quot;&gt;&lt;code&gt;teardown_request()&lt;/code&gt;&lt;/a&gt; decorator.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3e17b27134f42815a9fd648cf168dcb75ebd0d63" translate="yes" xml:space="preserve">
          <source>A dictionary with lists of functions that are called before the &lt;a href=&quot;#flask.Flask.before_request_funcs&quot;&gt;&lt;code&gt;before_request_funcs&lt;/code&gt;&lt;/a&gt; functions. The key of the dictionary is the name of the blueprint this function is active for, or &lt;code&gt;None&lt;/code&gt; for all requests. To register a function, use &lt;a href=&quot;#flask.Flask.url_value_preprocessor&quot;&gt;&lt;code&gt;url_value_preprocessor()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b118ff8185ba397df2b956462f241589aa6546ab" translate="yes" xml:space="preserve">
          <source>A dictionary with lists of functions that can be used as URL value preprocessors. The key &lt;code&gt;None&lt;/code&gt; here is used for application wide callbacks, otherwise the key is the name of the blueprint. Each of these functions has the chance to modify the dictionary of URL values before they are used as the keyword arguments of the view function. For each function registered this one should also provide a &lt;a href=&quot;#flask.Flask.url_defaults&quot;&gt;&lt;code&gt;url_defaults()&lt;/code&gt;&lt;/a&gt; function that adds the parameters automatically again that were removed that way.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fcf777258e11b21b8302a1700ac3aff7438a3934" translate="yes" xml:space="preserve">
          <source>A dictionary with lists of functions that should be called after each request. The key of the dictionary is the name of the blueprint this function is active for, &lt;code&gt;None&lt;/code&gt; for all requests. This can for example be used to close database connections. To register a function here, use the &lt;a href=&quot;#flask.Flask.after_request&quot;&gt;&lt;code&gt;after_request()&lt;/code&gt;&lt;/a&gt; decorator.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="73dd1a44d8a77c7b6dcb8ecceaeb1e3e1bc1acb4" translate="yes" xml:space="preserve">
          <source>A dictionary with lists of functions that will be called at the beginning of each request. The key of the dictionary is the name of the blueprint this function is active for, or &lt;code&gt;None&lt;/code&gt; for all requests. To register a function, use the &lt;a href=&quot;#flask.Flask.before_request&quot;&gt;&lt;code&gt;before_request()&lt;/code&gt;&lt;/a&gt; decorator.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c5a03301ac45aae268d4c7d5a463a22071af9d73" translate="yes" xml:space="preserve">
          <source>A fabfile is what controls what Fabric executes. It is named &lt;code&gt;fabfile.py&lt;/code&gt; and executed by the &lt;code&gt;fab&lt;/code&gt; command. All the functions defined in that file will show up as &lt;code&gt;fab&lt;/code&gt; subcommands. They are executed on one or more hosts. These hosts can be defined either in the fabfile or on the command line. In this case we will add them to the fabfile.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="77fb4e9e2fa8aae0bcbaa9811970f8f98aaf8c87" translate="yes" xml:space="preserve">
          <source>A flag that indicates if the session interface is pickle based. This can be used by Flask extensions to make a decision in regards to how to deal with the session object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1c5d5e0cf304acde482ca37e6aa187d3d73b9897" translate="yes" xml:space="preserve">
          <source>A handler for &amp;ldquo;500 Internal Server Error&amp;rdquo; will not be used when running in debug mode. Instead, the interactive debugger will be shown.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="877fd45656589ff0abe332cf073dfb38833d201d" translate="yes" xml:space="preserve">
          <source>A helper function that decorates a function to retain the current request context. This is useful when working with greenlets. The moment the function is decorated a copy of the request context is created and then pushed when the function is called. The current session is also included in the copied request context.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a6f6d37781c521b83a8d6d38a8dd457d0554b477" translate="yes" xml:space="preserve">
          <source>A helper method that returns an expiration date for the session or &lt;code&gt;None&lt;/code&gt; if the session is linked to the browser session. The default implementation returns now + the permanent session lifetime configured on the application.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="af337e647b0908b71e085b15c36290a8021ba3e9" translate="yes" xml:space="preserve">
          <source>A helper method to register a rule (and optionally a view function) to the application. The endpoint is automatically prefixed with the blueprint&amp;rsquo;s name.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d16a96a51e68c5d63eb67bf46f156e82cc4875dd" translate="yes" xml:space="preserve">
          <source>A list of functions that are called when &lt;a href=&quot;#flask.url_for&quot;&gt;&lt;code&gt;url_for()&lt;/code&gt;&lt;/a&gt; raises a &lt;code&gt;BuildError&lt;/code&gt;. Each function registered here is called with &lt;code&gt;error&lt;/code&gt;, &lt;code&gt;endpoint&lt;/code&gt; and &lt;code&gt;values&lt;/code&gt;. If a function returns &lt;code&gt;None&lt;/code&gt; or raises a &lt;code&gt;BuildError&lt;/code&gt; the next function is tried.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="62166dcc5f18957b7025e155f6df8a637b3b6241" translate="yes" xml:space="preserve">
          <source>A list of functions that are called when the application context is destroyed. Since the application context is also torn down if the request ends this is the place to store code that disconnects from databases.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5725cfc79acde172d099c9e4e5a5c7afa1b78259" translate="yes" xml:space="preserve">
          <source>A list of functions that will be called at the beginning of the first request to this instance. To register a function, use the &lt;a href=&quot;#flask.Flask.before_first_request&quot;&gt;&lt;code&gt;before_first_request()&lt;/code&gt;&lt;/a&gt; decorator.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="638434024ce44dea060e4a13ec38eef4b806199e" translate="yes" xml:space="preserve">
          <source>A list of methods this view can handle.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d4813dc7dbccd523eb07c1573b9bf7469939f254" translate="yes" xml:space="preserve">
          <source>A list of shell context processor functions that should be run when a shell context is created.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fc46f637f28745b1eac15ee56b93a4eea06e86fa" translate="yes" xml:space="preserve">
          <source>A minimal Flask application looks something like this:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fcad68396d130250f6c207cc06348265369371af" translate="yes" xml:space="preserve">
          <source>A namespace object that can store data during an &lt;a href=&quot;../appcontext/index&quot;&gt;application context&lt;/a&gt;. This is an instance of &lt;a href=&quot;#flask.Flask.app_ctx_globals_class&quot;&gt;&lt;code&gt;Flask.app_ctx_globals_class&lt;/code&gt;&lt;/a&gt;, which defaults to &lt;a href=&quot;#flask.ctx._AppCtxGlobals&quot;&gt;&lt;code&gt;ctx._AppCtxGlobals&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="68ade762655aa55873b4a03c6bf0b34f6e963c3a" translate="yes" xml:space="preserve">
          <source>A note on cookie-based sessions: Flask will take the values you put into the session object and serialize them into a cookie. If you are finding some values do not persist across requests, cookies are indeed enabled, and you are not getting a clear error message, check the size of the cookie in your page responses compared to the size supported by web browsers.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1d550ed3186c925dbac6530c84342967ffa4f08f" translate="yes" xml:space="preserve">
          <source>A plain object. Used as a namespace for storing data during an application context.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9a07553b4c53b846f04dac7e59114abc4e157c81" translate="yes" xml:space="preserve">
          <source>A popular approach is to store configuration files for different servers in a separate version control repository and check them out on all servers. Then symlink the file that is active for the server into the location where it&amp;rsquo;s expected (eg: &lt;code&gt;/var/www/yourapplication&lt;/code&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c8244c56c78d01af5d79981d8b120e47277d5732" translate="yes" xml:space="preserve">
          <source>A proxy to the application handling the current request. This is useful to access the application without needing to import it, or if it can&amp;rsquo;t be imported, such as when using the application factory pattern or in blueprints and extensions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="80c351c8028197c250f2ad835ad88c6e52c9a82e" translate="yes" xml:space="preserve">
          <source>A python serializer for the payload. The default is a compact JSON derived serializer with support for some extra Python types such as datetime objects or tuples.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9b42bad88d454b45cd82ee1a8d3ba0b23f8e0bbe" translate="yes" xml:space="preserve">
          <source>A response object is created with the bytes as the body.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="47b0e2fc51dfad01a11e843e5b0f3d3293e3160e" translate="yes" xml:space="preserve">
          <source>A response object is created with the string encoded to UTF-8 as the body.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f665ba292928be380e7047549501f99ec244b9a4" translate="yes" xml:space="preserve">
          <source>A running MongoDB server and &lt;a href=&quot;https://flask-mongoengine.readthedocs.io&quot;&gt;Flask-MongoEngine&lt;/a&gt; are required.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bc1f6de9c518c33c5d1eaec0994cfaa9d6a70d4c" translate="yes" xml:space="preserve">
          <source>A secret key should be as random as possible. Your operating system has ways to generate pretty random data based on a cryptographic random generator. Use the following command to quickly generate a value for &lt;code&gt;Flask.secret_key&lt;/code&gt; (or &lt;a href=&quot;../config/index#SECRET_KEY&quot;&gt;&lt;code&gt;SECRET_KEY&lt;/code&gt;&lt;/a&gt;):</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b129545568738486b440e9a7ff56c6213f91ad86" translate="yes" xml:space="preserve">
          <source>A secret key that will be used for securely signing the session cookie and can be used for any other security related needs by extensions or your application. It should be a long random string of bytes, although unicode is accepted too. For example, copy the output of this to your config:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c83004bb384877de6b8aedb1f06bda3d62f1b310" translate="yes" xml:space="preserve">
          <source>A simple method would be to add a script tag to our page that sets a global variable to the prefix to the root of the application. Something like this:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="85f1b3a6db6815b953dc4ed0ab8e8ccb783f02dc" translate="yes" xml:space="preserve">
          <source>A standard Python &lt;a href=&quot;https://docs.python.org/3/library/logging.html#logging.Logger&quot;&gt;&lt;code&gt;Logger&lt;/code&gt;&lt;/a&gt; for the app, with the same name as &lt;a href=&quot;#flask.Flask.name&quot;&gt;&lt;code&gt;name&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4e6cbef69121802ea63d9627dc73ebafe3137d2a" translate="yes" xml:space="preserve">
          <source>A string that is ready to be safely inserted into an HTML or XML document, either because it was escaped or because it was marked safe.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="53686b42419f8f4dbe2ab7372fc0562d7a17ac82" translate="yes" xml:space="preserve">
          <source>A string with a response status.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8312ed623273d2bbf97ae1b91de3300621acd2f3" translate="yes" xml:space="preserve">
          <source>A template abstraction layer that would not take the unique features of the template engines away is a science on its own and a too large undertaking for a microframework like Flask.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8975cfcc10bef0093ca48dca76a64fc9c064c9b2" translate="yes" xml:space="preserve">
          <source>A very common example would be creating applications per subdomain. For instance you configure your webserver to dispatch all requests for all subdomains to your application and you then use the subdomain information to create user-specific instances. Once you have your server set up to listen on all subdomains you can use a very simple WSGI application to do the dynamic application creation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4bf6d9ecc409d8e72167f4acb805f0dda0a9936f" translate="yes" xml:space="preserve">
          <source>A very common pattern is to store user authorization information and database connections on the application context or the &lt;a href=&quot;../api/index#flask.g&quot;&gt;&lt;code&gt;flask.g&lt;/code&gt;&lt;/a&gt; object. The general pattern for this is to put the object on there on first usage and then to remove it on a teardown. Imagine for instance this code to get the current user:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b0e1c2e8cb52258c006921b3f9ef96e0b82b5fd6" translate="yes" xml:space="preserve">
          <source>A view can now raise that exception with an error message. Additionally some extra payload can be provided as a dictionary through the &lt;code&gt;payload&lt;/code&gt; parameter.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="009d6bc8881431b80879ec0792ab311b338d4fc4" translate="yes" xml:space="preserve">
          <source>A warning is raised if the size of the cookie header exceeds &lt;a href=&quot;#flask.Response.max_cookie_size&quot;&gt;&lt;code&gt;max_cookie_size&lt;/code&gt;&lt;/a&gt;, but the header will still be set.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="52205ce119095e91e587bedec05385e81a8334ef" translate="yes" xml:space="preserve">
          <source>A while ago many developers had the idea to read the incoming file in small chunks and store the upload progress in the database to be able to poll the progress with JavaScript from the client. Long story short: the client asks the server every 5 seconds how much it has transmitted already. Do you realize the irony? The client is asking for something it should already know.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="30a07f7b3bbff0aa5b2092f5e4d749547f6a51af" translate="yes" xml:space="preserve">
          <source>A working deployment with setuptools is the first step into more complex and more automated deployment scenarios. If you want to fully automate the process, also read the &lt;a href=&quot;../fabric/index#fabric-deployment&quot;&gt;Deploying with Fabric&lt;/a&gt; chapter.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="891d9413ccc83954f2ea96980ec8180731f1316c" translate="yes" xml:space="preserve">
          <source>AJAX with jQuery</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d93d10ff0fbef1b4aa0ddc24e10e907746d3c85a" translate="yes" xml:space="preserve">
          <source>API</source>
          <target state="translated">API</target>
        </trans-unit>
        <trans-unit id="b276f94cd8d0e74a21de6e5939b8c10ca9a975d6" translate="yes" xml:space="preserve">
          <source>API Reference</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7d5977939c64905e9a0e5f90931e54f7476dac2f" translate="yes" xml:space="preserve">
          <source>APIs with JSON</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="468b873f605e4145cc4e3acfa8d0fe4679f057af" translate="yes" xml:space="preserve">
          <source>About Responses</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a984dc1047c363a49ef23d22296179eca51a08ce" translate="yes" xml:space="preserve">
          <source>About the First Parameter</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b0ccbdac92041a3fa0f7869a9fd9b0a3df5f5e5d" translate="yes" xml:space="preserve">
          <source>Absolute path to the package on the filesystem. Used to look up resources contained in the package.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c07cfe24a9ec09966271c82da4347537504d1c55" translate="yes" xml:space="preserve">
          <source>Accessing &lt;code&gt;db&lt;/code&gt; will call &lt;code&gt;get_db&lt;/code&gt; internally, in the same way that &lt;a href=&quot;../api/index#flask.current_app&quot;&gt;&lt;code&gt;current_app&lt;/code&gt;&lt;/a&gt; works.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0dddabb232a4aaa6d37bd9600f9561d723401cd1" translate="yes" xml:space="preserve">
          <source>Accessing Request Data</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2850868565d5b47a5b973c2e462d8fc71b039b6b" translate="yes" xml:space="preserve">
          <source>Accessing and Modifying Sessions</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f3783082f0137f59df1cab159ae075bda60c4fd4" translate="yes" xml:space="preserve">
          <source>Activate the environment</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a75ddeed53a524edde151ba3c4787d4816c58571" translate="yes" xml:space="preserve">
          <source>Add in WSGI middlewares when the application is being created if necessary.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="87d0ba5dd26967ca3dd5b55d0c39f01f1278f98c" translate="yes" xml:space="preserve">
          <source>Add the following lines to the top of your &lt;code&gt;.wsgi&lt;/code&gt; file:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="93a2db68bacb8a024322f756c1ea89f8ea016b58" translate="yes" xml:space="preserve">
          <source>Add the following two functions to your &lt;code&gt;test_flaskr.py&lt;/code&gt; file:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9e7d40fdab3e79e7165991bc9998f958e37bc56e" translate="yes" xml:space="preserve">
          <source>Added &lt;a href=&quot;#ENV&quot;&gt;&lt;code&gt;ENV&lt;/code&gt;&lt;/a&gt; to reflect the &lt;code id=&quot;index-6&quot;&gt;FLASK_ENV&lt;/code&gt; environment variable.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d6034182326769eded1b010ed731e1198e02e1b7" translate="yes" xml:space="preserve">
          <source>Added &lt;a href=&quot;#MAX_COOKIE_SIZE&quot;&gt;&lt;code&gt;MAX_COOKIE_SIZE&lt;/code&gt;&lt;/a&gt; to control a warning from Werkzeug.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aa027a90c34da609b268658fc144f63ad08e3ad1" translate="yes" xml:space="preserve">
          <source>Added &lt;a href=&quot;#SESSION_COOKIE_SAMESITE&quot;&gt;&lt;code&gt;SESSION_COOKIE_SAMESITE&lt;/code&gt;&lt;/a&gt; to control the session cookie&amp;rsquo;s &lt;code&gt;SameSite&lt;/code&gt; option.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dd924e17ab60955a28522675ced687e361560e43" translate="yes" xml:space="preserve">
          <source>Adding HTTP Method Overrides</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7affb5674b8ae889619124d08682d0b24c2fc63d" translate="yes" xml:space="preserve">
          <source>Adding a favicon</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a6886107051f6296b301c835737605aa7c616a6a" translate="yes" xml:space="preserve">
          <source>Additional Notes</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e2a0e3fa912210406e5e52b83da112ca9a3a6b1e" translate="yes" xml:space="preserve">
          <source>Additional parameters:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9add2d256255839d07e8b0f22c208bd4534ee7d2" translate="yes" xml:space="preserve">
          <source>Additionally if you are in a view function of a blueprint or a rendered template and you want to link to another endpoint of the same blueprint, you can use relative redirects by prefixing the endpoint with a dot only:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6e864ed2640b8b686a1fa444db0f7f1c2ede9b0e" translate="yes" xml:space="preserve">
          <source>Additionally there is a convenient helper method (&lt;a href=&quot;https://pythonhosted.org/blinker/index.html#blinker.base.Signal.connected_to&quot;&gt;&lt;code&gt;connected_to()&lt;/code&gt;&lt;/a&gt;) that allows you to temporarily subscribe a function to a signal with a context manager on its own. Because the return value of the context manager cannot be specified that way, you have to pass the list in as an argument:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="328b25d62d10fd5c70e5a8517e3003fafc4b306b" translate="yes" xml:space="preserve">
          <source>Additionally, it is a good idea to provide a query function that combines getting the cursor, executing and fetching the results:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="127732c29c9f760c125cb94d6d574062abce1917" translate="yes" xml:space="preserve">
          <source>Additionally, you may pass optional keyword arguments that will then be passed to the application&amp;rsquo;s &lt;a href=&quot;#flask.Flask.test_client_class&quot;&gt;&lt;code&gt;test_client_class&lt;/code&gt;&lt;/a&gt; constructor. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c41c4c058075a99159d98df7edbd6d610ccc00bd" translate="yes" xml:space="preserve">
          <source>Advanced JavaScript APIs like Web Storage, Web Workers, Web Sockets, geolocation, and offline applications.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e08852c98886ad9736bc0e4e330820e9bc018643" translate="yes" xml:space="preserve">
          <source>After installation, failures leading to an Internal Server Error are automatically reported to Sentry and from there you can receive error notifications.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="818dc311a7b948e1bd4163f31be21530c088dc04" translate="yes" xml:space="preserve">
          <source>After the request is dispatched and a response is generated and sent, the request context is popped, which then pops the application context. Immediately before they are popped, the &lt;a href=&quot;../api/index#flask.Flask.teardown_request&quot;&gt;&lt;code&gt;teardown_request()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../api/index#flask.Flask.teardown_appcontext&quot;&gt;&lt;code&gt;teardown_appcontext()&lt;/code&gt;&lt;/a&gt; functions are executed. These execute even if an unhandled exception occurred during dispatch.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6a98c08486fa3c149bb2785aac365101720d6591" translate="yes" xml:space="preserve">
          <source>After the response is returned, the contexts are popped, which calls the &lt;a href=&quot;../api/index#flask.Flask.teardown_request&quot;&gt;&lt;code&gt;teardown_request()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../api/index#flask.Flask.teardown_appcontext&quot;&gt;&lt;code&gt;teardown_appcontext()&lt;/code&gt;&lt;/a&gt; functions. These functions are called even if an unhandled exception was raised at any point above.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d78392f79e5d33adbca1d23f20e3e6ce7cc1ec49" translate="yes" xml:space="preserve">
          <source>Ah yes, the good old problem of file uploads. The basic idea of file uploads is actually quite simple. It basically works like this:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f268864f45c6e3f315eaaf78468f53b4cb4c0952" translate="yes" xml:space="preserve">
          <source>All the other objects that are context bound can be used in the same way.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bc690de98c0fa022cc0df286ef0a014ef8a36240" translate="yes" xml:space="preserve">
          <source>All the template rendering in the code issued by the application &lt;code&gt;app&lt;/code&gt; in the body of the &lt;code&gt;with&lt;/code&gt; block will now be recorded in the &lt;code&gt;templates&lt;/code&gt; variable. Whenever a template is rendered, the template object as well as context are appended to it.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="507aeda80f656daba1b3289b226bdb1c488abd21" translate="yes" xml:space="preserve">
          <source>Also see the &lt;a href=&quot;../becomingbig/index#becomingbig&quot;&gt;Becoming Big&lt;/a&gt; section of the documentation for some inspiration for larger applications based on Flask.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6c138c145742327977f47edc9d06d1fb8f77b58d" translate="yes" xml:space="preserve">
          <source>Alternative error attach function to the &lt;a href=&quot;#flask.Flask.errorhandler&quot;&gt;&lt;code&gt;errorhandler()&lt;/code&gt;&lt;/a&gt; decorator that is more straightforward to use for non decorator usage.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1449967837a0f8f4f2767773f545dc5489fa6df1" translate="yes" xml:space="preserve">
          <source>Alternative way to use view functions. A subclass has to implement &lt;a href=&quot;#flask.views.View.dispatch_request&quot;&gt;&lt;code&gt;dispatch_request()&lt;/code&gt;&lt;/a&gt; which is called with the view arguments from the URL routing system. If &lt;a href=&quot;#flask.views.View.methods&quot;&gt;&lt;code&gt;methods&lt;/code&gt;&lt;/a&gt; is provided the methods do not have to be passed to the &lt;a href=&quot;#flask.Flask.add_url_rule&quot;&gt;&lt;code&gt;add_url_rule()&lt;/code&gt;&lt;/a&gt; method explicitly:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="16a9f9ac0ad45f893764dca63328a8a18a337d1b" translate="yes" xml:space="preserve">
          <source>Alternatively it can also be used around a specific generator:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f2e3c156eae7e4ca0c182f1eb6c2fca29b85396d" translate="yes" xml:space="preserve">
          <source>Alternatively you can also just test any of the context bound objects (such as &lt;a href=&quot;#flask.request&quot;&gt;&lt;code&gt;request&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;#flask.g&quot;&gt;&lt;code&gt;g&lt;/code&gt;&lt;/a&gt;) for truthness:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cea46e1c9b2aeb57996f86aa618a4207b57e71b4" translate="yes" xml:space="preserve">
          <source>Alternatively you can also replace the standard out in the .wsgi file with a different stream:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ce2f89670629847eb1b287b3acf601d237c323c0" translate="yes" xml:space="preserve">
          <source>Alternatively you can register &lt;code&gt;uploaded_file&lt;/code&gt; as &lt;code&gt;build_only&lt;/code&gt; rule and use the &lt;code&gt;SharedDataMiddleware&lt;/code&gt;. This also works with older versions of Flask:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1209a2348e6f6f0f951ea448d089b55c306ae4a6" translate="yes" xml:space="preserve">
          <source>Alternatively you can use &lt;strong&gt;python -m flask&lt;/strong&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3f5d4d0c1794ab8d85dc447dd48c6b661b53ecee" translate="yes" xml:space="preserve">
          <source>Always keep security in mind when building web applications.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="289ede90dd7a50f8dd5352e865474a0d7cdee654" translate="yes" xml:space="preserve">
          <source>Always sends the &lt;a href=&quot;#flask.got_request_exception&quot;&gt;&lt;code&gt;got_request_exception&lt;/code&gt;&lt;/a&gt; signal.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="847ed59d1e01df705057858a74719c5037938d57" translate="yes" xml:space="preserve">
          <source>An Easier Solution</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f423e3fcd05e8dc46c86b0cbca3a05651f9d0906" translate="yes" xml:space="preserve">
          <source>An alias for &lt;a href=&quot;https://pythonhosted.org/blinker/index.html#blinker.base.Namespace&quot;&gt;&lt;code&gt;blinker.base.Namespace&lt;/code&gt;&lt;/a&gt; if blinker is available, otherwise a dummy class that creates fake signals. This class is available for Flask extensions that want to provide the same fallback system as Flask itself.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="85acfaaa1d25e718c9bad28068ae4867c9912c4f" translate="yes" xml:space="preserve">
          <source>An application context is automatically pushed by &lt;a href=&quot;#flask.ctx.RequestContext.push&quot;&gt;&lt;code&gt;RequestContext.push()&lt;/code&gt;&lt;/a&gt; when handling a request, and when running a CLI command. Use this to manually create a context outside of these situations.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="db9a574fa10b39c1cfd2a8d50039899172a86858" translate="yes" xml:space="preserve">
          <source>An error handler for &lt;code&gt;Exception&lt;/code&gt; might seem useful for changing how all errors, even unhandled ones, are presented to the user. However, this is similar to doing &lt;code&gt;except Exception:&lt;/code&gt; in Python, it will capture &lt;em&gt;all&lt;/em&gt; otherwise unhandled errors, including all HTTP status codes. In most cases it will be safer to register handlers for more specific exceptions. Since &lt;code&gt;HTTPException&lt;/code&gt; instances are valid WSGI responses, you could also pass them through directly.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3cf7f03bc9cf3707b9e0a35fa42e6ebd435a7a93" translate="yes" xml:space="preserve">
          <source>An error handler for &lt;code&gt;HTTPException&lt;/code&gt; might be useful for turning the default HTML errors pages into JSON, for example. However, this handler will trigger for things you don&amp;rsquo;t cause directly, such as 404 and 405 errors during routing. Be sure to craft your handler carefully so you don&amp;rsquo;t lose information about the HTTP error.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="31553be53bb397057392a940613ecd9d65a72fe6" translate="yes" xml:space="preserve">
          <source>An error handler is a function that returns a response when a type of error is raised, similar to how a view is a function that returns a response when a request URL is matched. It is passed the instance of the error being handled, which is most likely a &lt;a href=&quot;https://werkzeug.palletsprojects.com/en/1.0.x/exceptions/#werkzeug.exceptions.HTTPException&quot;&gt;&lt;code&gt;HTTPException&lt;/code&gt;&lt;/a&gt;. An error handler for &amp;ldquo;500 Internal Server Error&amp;rdquo; will be passed uncaught exceptions in addition to explicit 500 errors.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7583cf64c46b4ac7bd718bfd4455b17f59b37498" translate="yes" xml:space="preserve">
          <source>An error handler is a normal view function that returns a response, but instead of being registered for a route, it is registered for an exception or HTTP status code that would be raised while trying to handle a request.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="babf81c1e676cd3c68fece610d7bb3758e7d05e3" translate="yes" xml:space="preserve">
          <source>An error handler is registered with the &lt;a href=&quot;../../api/index#flask.Flask.errorhandler&quot;&gt;&lt;code&gt;errorhandler()&lt;/code&gt;&lt;/a&gt; decorator or the &lt;a href=&quot;../../api/index#flask.Flask.register_error_handler&quot;&gt;&lt;code&gt;register_error_handler()&lt;/code&gt;&lt;/a&gt; method. A handler can be registered for a status code, like 404, or for an exception class.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e14cc8fbc30e28e618c2dc3eecbc26215104a2b7" translate="yes" xml:space="preserve">
          <source>An example task</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f6efc1688d5a45daa290e6d6cf264158bc711124" translate="yes" xml:space="preserve">
          <source>An example template might be this:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a0d6c061e1875fe92697103d688b473d28a68e1b" translate="yes" xml:space="preserve">
          <source>An important detail to keep in mind is how Flask deals with trailing slashes. The idea is to keep each URL unique so the following rules apply:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="db5b90452dd064b31721fc5161870ff65a1aed6c" translate="yes" xml:space="preserve">
          <source>An interesting pattern is also to use classes and inheritance for configuration:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="09f0293c81e7740c4bd123ab3e57e0c70615a643" translate="yes" xml:space="preserve">
          <source>An object containing all the etags in the &lt;code&gt;If-Match&lt;/code&gt; header.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2ac2d842f3e90047f4f1e54d903702a071851a89" translate="yes" xml:space="preserve">
          <source>An object containing all the etags in the &lt;code&gt;If-None-Match&lt;/code&gt; header.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3b562e8c6436c654e7061c45b6c3fe3434dbbf56" translate="yes" xml:space="preserve">
          <source>Anatomy of an Extension</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e94319c1bf020c401da5f3f38cbf5025e4617c04" translate="yes" xml:space="preserve">
          <source>And a user requests the following URI:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f7d26d21cdeed0981240f879769f3bcdfe79034a" translate="yes" xml:space="preserve">
          <source>And here is the &lt;code&gt;layout.html&lt;/code&gt; template which does the magic:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3fb8c7b4995666cd2e7120ed7c08c418f0cce52c" translate="yes" xml:space="preserve">
          <source>And here is the &lt;code&gt;login.html&lt;/code&gt; template which also inherits from &lt;code&gt;layout.html&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0f5d18a3536983dc4e531b9dcaec9bbbfaaaea40" translate="yes" xml:space="preserve">
          <source>And in the testcode:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1dba1cb85dcb715842f60c2067d240d784c1221c" translate="yes" xml:space="preserve">
          <source>And on PowerShell:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="56ad954bc5ec6a3d5f7af6316f565b18e4f67f08" translate="yes" xml:space="preserve">
          <source>And sure enough, these are the generated rules:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9c7d77850f3305d286ef176ad6e2e9c956efe4e4" translate="yes" xml:space="preserve">
          <source>And that&amp;rsquo;s just a small sample of issues you could be facing. So how do we deal with that sort of problem? By default if your application runs in production mode, Flask will display a very simple page for you and log the exception to the &lt;a href=&quot;../api/index#flask.Flask.logger&quot;&gt;&lt;code&gt;logger&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a6bfc1d25efcb26f880d506024421cf94ad2ccb3" translate="yes" xml:space="preserve">
          <source>And then a file that sets up an application which maps the functions to URLs:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b51c9c5b85631e4acc879d8a1bce348186845eb5" translate="yes" xml:space="preserve">
          <source>And then add this to your Flask app:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="533b002a87d2ada0769f6ee0fea913c8766087fc" translate="yes" xml:space="preserve">
          <source>And then to use it:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6e0ae17b7d6a99158683a033596570964168bdf9" translate="yes" xml:space="preserve">
          <source>And then when you want to render the template, use &lt;code&gt;admin/index.html&lt;/code&gt; as the name to look up the template by. If you encounter problems loading the correct templates enable the &lt;code&gt;EXPLAIN_TEMPLATE_LOADING&lt;/code&gt; config variable which will instruct Flask to print out the steps it goes through to locate templates on every &lt;code&gt;render_template&lt;/code&gt; call.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e0926bf13e68014c22b95c5b92238ab1ee81f50c" translate="yes" xml:space="preserve">
          <source>And then you can register it like this:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b18253d5b5036b46f7874c91258b409cd9052845" translate="yes" xml:space="preserve">
          <source>And this is what &lt;code&gt;views.py&lt;/code&gt; would look like:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1c739d246cd7cfddce1c486f15c60ae63ce3a75c" translate="yes" xml:space="preserve">
          <source>Another big problem is CSRF. This is a very complex topic and I won&amp;rsquo;t outline it here in detail just mention what it is and how to theoretically prevent it.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9d664dbb52b649d8964427320da489a5d20fd371" translate="yes" xml:space="preserve">
          <source>Another design decision with the Werkzeug routing system is that routes in Werkzeug try to ensure that URLs are unique. Werkzeug will go quite far with that in that it will automatically redirect to a canonical URL if a route is ambiguous.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="03fe96f9915fd131d685227fdc60d18426d288b7" translate="yes" xml:space="preserve">
          <source>Another method is using Google&amp;rsquo;s &lt;a href=&quot;https://developers.google.com/speed/libraries/&quot;&gt;AJAX Libraries API&lt;/a&gt; to load jQuery:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a2456b1a3a9821378311c6dec588b175df7e9dab" translate="yes" xml:space="preserve">
          <source>Another thing that becomes possible when you have an explicit object lying around in your code is that you can subclass the base class (&lt;a href=&quot;../api/index#flask.Flask&quot;&gt;&lt;code&gt;Flask&lt;/code&gt;&lt;/a&gt;) to alter specific behavior. This would not be possible without hacks if the object were created ahead of time for you based on a class that is not exposed to you.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ae7b0ced90a594a50519111fa1d63f8619905a17" translate="yes" xml:space="preserve">
          <source>Another thing that is very important are unquoted attributes. While Jinja2 can protect you from XSS issues by escaping HTML, there is one thing it cannot protect you from: XSS by attribute injection. To counter this possible attack vector, be sure to always quote your attributes with either double or single quotes when using Jinja expressions in them:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="718f58352cedf44e36e0f654d175821a4736704d" translate="yes" xml:space="preserve">
          <source>Any object with an &lt;code&gt;__html__&lt;/code&gt; method (like &lt;a href=&quot;#flask.Markup&quot;&gt;&lt;code&gt;Markup&lt;/code&gt;&lt;/a&gt;) will have that method called and then the return value is serialized as string.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0479bfa099a793b60ba5208efaa383042bc3c9c1" translate="yes" xml:space="preserve">
          <source>Anyways. To load such a file with Unicode you can use the built-in &lt;code&gt;str.decode()&lt;/code&gt; method:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d1baa5b3ea0aca60d8df85215f2f50bbe50e938a" translate="yes" xml:space="preserve">
          <source>Application Context</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0b382e09fb96276f58d69081b28a4a6e7d24739f" translate="yes" xml:space="preserve">
          <source>Application Discovery</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1befde27444168f0e15104dc1b3aed7343803483" translate="yes" xml:space="preserve">
          <source>Application Dispatching</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="482ce780a5a165b1acfc8f8173b16ab3c6c8c6e5" translate="yes" xml:space="preserve">
          <source>Application Errors</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1bbc88ce9d07e37b4bb0b9866ce7644caa8d1c0d" translate="yes" xml:space="preserve">
          <source>Application Factories</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="94eaee228802c36ccb1a20ce13dc259101e14953" translate="yes" xml:space="preserve">
          <source>Application Globals</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ec9fe4cad234fdd15a2851dbfe19cbf2c5368828" translate="yes" xml:space="preserve">
          <source>Application Object</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="232ecb9d5f268ee33ecdfed2a13f507af5beb63e" translate="yes" xml:space="preserve">
          <source>Application Setup</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="70b524dbe1132c4b96eabd899598de1aca99c423" translate="yes" xml:space="preserve">
          <source>Application dispatching is the process of combining multiple Flask applications on the WSGI level. You can combine not only Flask applications but any WSGI application. This would allow you to run a Django and a Flask application in the same interpreter side by side if you want. The usefulness of this depends on how the applications work internally.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a56c88741c7e75a94576f97ad9746d79e4d28901" translate="yes" xml:space="preserve">
          <source>Applications fail, servers fail. Sooner or later you will see an exception in production. Even if your code is 100% correct, you will still see exceptions from time to time. Why? Because everything else involved will fail. Here are some situations where perfectly fine code can lead to server errors:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d45766f0635638f2ac9ce97c726e692ce0ecbdd9" translate="yes" xml:space="preserve">
          <source>Applications need some kind of configuration. There are different settings you might want to change depending on the application environment like toggling the debug mode, setting the secret key, and other such environment-specific things.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="90073c69af9d03e9a79810f9c95f1f88d5c2cb59" translate="yes" xml:space="preserve">
          <source>Approved Extensions</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f44bc1a10c4bec381194608fd123a45248619d7b" translate="yes" xml:space="preserve">
          <source>Artwork License</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dfa73e1e38fc2d416312358f3e1de2d800c1d565" translate="yes" xml:space="preserve">
          <source>As an alternative, you can use &lt;a href=&quot;../../api/index#flask.after_this_request&quot;&gt;&lt;code&gt;after_this_request()&lt;/code&gt;&lt;/a&gt; to register callbacks that will execute after only the current request. This way you can defer code execution from anywhere in the application, based on the current request.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9ecf9e555ec328f54e5247ab141edcb313ea9b75" translate="yes" xml:space="preserve">
          <source>As in the declarative approach, you need to close the session after each request or application context shutdown. Put this into your application module:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="429d3190ab064762d7b5234e7814106f35e03fc0" translate="yes" xml:space="preserve">
          <source>As mentioned earlier, dependencies are pulled from PyPI. What if you want to depend on a package that cannot be found on PyPI and won&amp;rsquo;t be because it is an internal package you don&amp;rsquo;t want to share with anyone? Just do it as if there was a PyPI entry and provide a list of alternative locations where setuptools should look for tarballs:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eb64137b80238c32059106f4cddd486b74d8f58b" translate="yes" xml:space="preserve">
          <source>As of Flask 0.7 this function might not be executed at the end of the request in case an unhandled exception occurred.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fa7f26ffb521cfc0ecadd4e7f3c8f302e825a39f" translate="yes" xml:space="preserve">
          <source>As of Flask 0.9, this will also be passed an &lt;code&gt;exc&lt;/code&gt; keyword argument that has a reference to the exception that caused the teardown if there was one.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ebe672ca9561da98cf07399388755d626bf69a9e" translate="yes" xml:space="preserve">
          <source>As of Werkzeug 0.14 HTTP exceptions are automatically caught and converted to responses instead of failing.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1e52f8f55011c6536fc417782b079d231f951bf5" translate="yes" xml:space="preserve">
          <source>As you can see I also added an &lt;code&gt;index&lt;/code&gt; method here that renders a template. This template will load jQuery as above and have a little form where we can add two numbers and a link to trigger the function on the server side.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="29cdb0959749af801ddc6eca01d61d36324926d8" translate="yes" xml:space="preserve">
          <source>As you can see what you have to do is to create a subclass of &lt;a href=&quot;../api/index#flask.views.View&quot;&gt;&lt;code&gt;flask.views.View&lt;/code&gt;&lt;/a&gt; and implement &lt;a href=&quot;../api/index#flask.views.View.dispatch_request&quot;&gt;&lt;code&gt;dispatch_request()&lt;/code&gt;&lt;/a&gt;. Then we have to convert that class into an actual view function by using the &lt;a href=&quot;../api/index#flask.views.View.as_view&quot;&gt;&lt;code&gt;as_view()&lt;/code&gt;&lt;/a&gt; class method. The string you pass to that function is the name of the endpoint that view will then have. But this by itself is not helpful, so let&amp;rsquo;s refactor the code a bit:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7f480542440e3e9b25f0e27742f1cd4a8e4ba701" translate="yes" xml:space="preserve">
          <source>As you can see, if no template name is provided it will use the endpoint of the URL map with dots converted to slashes + &lt;code&gt;'.html'&lt;/code&gt;. Otherwise the provided template name is used. When the decorated function returns, the dictionary returned is passed to the template rendering function. If &lt;code&gt;None&lt;/code&gt; is returned, an empty dictionary is assumed, if something else than a dictionary is returned we return it from the function unchanged. That way you can still use the redirect function or return simple strings.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5c4862932ab4b825fb6f01d93b96faac82e20fa2" translate="yes" xml:space="preserve">
          <source>As your codebase grows, you are free to make the design decisions appropriate for your project. Flask will continue to provide a very simple glue layer to the best that Python has to offer. You can implement advanced patterns in SQLAlchemy or another database tool, introduce non-relational data persistence as appropriate, and take advantage of framework-agnostic tools built for WSGI, the Python web interface.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="df9635df2ab1616721bfddb6e3cb27a07c99352d" translate="yes" xml:space="preserve">
          <source>Assuming the number of &lt;code&gt;../&lt;/code&gt; is correct and you would join this with the &lt;code&gt;UPLOAD_FOLDER&lt;/code&gt; the user might have the ability to modify a file on the server&amp;rsquo;s filesystem he or she should not modify. This does require some knowledge about how the application looks like, but trust me, hackers are patient :)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0b1d5b963a3d02a52dae0984ed55325d9ee52447" translate="yes" xml:space="preserve">
          <source>At any time during a request, we can register a function to be called at the end of the request. For example you can remember the current language of the user in a cookie in a &lt;a href=&quot;../../api/index#flask.Flask.before_request&quot;&gt;&lt;code&gt;before_request()&lt;/code&gt;&lt;/a&gt; callback:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="322acaee058caa60e169e066cbcd8e93462dfb2d" translate="yes" xml:space="preserve">
          <source>At that point views can raise that error, but it would immediately result in an internal server error. The reason for this is that there is no handler registered for this error class. That however is easy to add:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c9a96008e518a9139314992c3ed94fb69a2219c1" translate="yes" xml:space="preserve">
          <source>At the end of a request, the request context is popped and all data associated with it is destroyed. If an error occurs during development, it is useful to delay destroying the data for debugging purposes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="74e0b9c80dca267a78a89ad68a2f6c73241b5973" translate="yes" xml:space="preserve">
          <source>Attention</source>
          <target state="translated">Attention</target>
        </trans-unit>
        <trans-unit id="a9c2465d40c6ff28cd0028a8b25fb8a625fe36a4" translate="yes" xml:space="preserve">
          <source>Auto-Sort JSON Keys</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="431768b965122900cb3abe050d3738818642ba2f" translate="yes" xml:space="preserve">
          <source>Autoescaping is the concept of automatically escaping special characters for you. Special characters in the sense of HTML (or XML, and thus XHTML) are &lt;code&gt;&amp;amp;&lt;/code&gt;, &lt;code&gt;&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;&lt;/code&gt;, &lt;code&gt;&quot;&lt;/code&gt; as well as &lt;code&gt;'&lt;/code&gt;. Because these characters carry specific meanings in documents on their own you have to replace them by so called &amp;ldquo;entities&amp;rdquo; if you want to use them for text. Not doing so would not only cause user frustration by the inability to use these characters in text, but can also lead to security problems. (see &lt;a href=&quot;../security/index#xss&quot;&gt;Cross-Site Scripting (XSS)&lt;/a&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b5a41840a815d8a5bb36e5aec0415e559e6edd94" translate="yes" xml:space="preserve">
          <source>Automatic Conversion</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="898bd70882d28216c8eaa47b2cb22b340d9a636b" translate="yes" xml:space="preserve">
          <source>Automatic escaping is enabled, so if &lt;code&gt;name&lt;/code&gt; contains HTML it will be escaped automatically. If you can trust a variable and you know that it will be safe HTML (for example because it came from a module that converts wiki markup to HTML) you can mark it as safe by using the &lt;a href=&quot;https://jinja.palletsprojects.com/en/2.11.x/api/#jinja2.Markup&quot;&gt;&lt;code&gt;Markup&lt;/code&gt;&lt;/a&gt; class or by using the &lt;code&gt;|safe&lt;/code&gt; filter in the template. Head over to the Jinja 2 documentation for more examples.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="635dad9cdab682202ef019467eedc43b2db6b953" translate="yes" xml:space="preserve">
          <source>Base Template</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d7af0727c1e939b73c0e17de1cc4586281bf2e99" translate="yes" xml:space="preserve">
          <source>Base class for defining type tags for &lt;a href=&quot;#flask.json.tag.TaggedJSONSerializer&quot;&gt;&lt;code&gt;TaggedJSONSerializer&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9286d334e6e100f71897534c374b139c406bf6ec" translate="yes" xml:space="preserve">
          <source>Base class for sessions based on signed cookies.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bd469c56906ea9e74e4f792af86add46cb4f5100" translate="yes" xml:space="preserve">
          <source>Basic Configuration</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a107e1836ce82fe9574c5042911e8e3638b91058" translate="yes" xml:space="preserve">
          <source>Basic Factories</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="91c71a0c161c3ad6867849ce33b18ad61cecc69c" translate="yes" xml:space="preserve">
          <source>Basic Principle</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9c212f3efd5bb5d69784cc276ebd4bee1712b7de" translate="yes" xml:space="preserve">
          <source>Basic Setup Script</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b20cbc384159fd820ed034fd3615298ec09f5902" translate="yes" xml:space="preserve">
          <source>Basic Usage</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4eb7f2e37f3e5a48905b7cc1e0e3480bac481332" translate="yes" xml:space="preserve">
          <source>Basic setup can be done by defining &lt;code&gt;MONGODB_SETTINGS&lt;/code&gt; on &lt;code&gt;app.config&lt;/code&gt; and creating a &lt;code&gt;MongoEngine&lt;/code&gt; instance.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="31d67a3d9dab80eee447b1ef5b8330cd90fbc902" translate="yes" xml:space="preserve">
          <source>Basic usage is outlined in the &lt;a href=&quot;../testing/index#testing&quot;&gt;Testing Flask Applications&lt;/a&gt; chapter.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5ebdcc5883245e308a52923dcb83fb481aef99f6" translate="yes" xml:space="preserve">
          <source>Basically this example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3da77b5a25e7609d5941425853c06683bc283931" translate="yes" xml:space="preserve">
          <source>Be careful when enabling this, as it is very difficult to undo if you set up or upgrade your key incorrectly.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e0aea438e5506ba10731c5e3c1eb32960490ea5b" translate="yes" xml:space="preserve">
          <source>Because SQLAlchemy is a common database abstraction layer and object relational mapper that requires a little bit of configuration effort, there is a Flask extension that handles that for you. This is recommended if you want to get started quickly.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f8a76bb5f330a4ddd98d1a4e197d37b503ba1110" translate="yes" xml:space="preserve">
          <source>Because SQLite3 is filesystem-based, we can easily use the &lt;a href=&quot;https://docs.python.org/3/library/tempfile.html#module-tempfile&quot;&gt;&lt;code&gt;tempfile&lt;/code&gt;&lt;/a&gt; module to create a temporary database and initialize it. The &lt;a href=&quot;https://docs.python.org/3/library/tempfile.html#tempfile.mkstemp&quot;&gt;&lt;code&gt;mkstemp()&lt;/code&gt;&lt;/a&gt; function does two things for us: it returns a low-level file handle and a random file name, the latter we use as database name. We just have to keep the &lt;code&gt;db_fd&lt;/code&gt; around so that we can use the &lt;a href=&quot;https://docs.python.org/3/library/os.html#os.close&quot;&gt;&lt;code&gt;os.close()&lt;/code&gt;&lt;/a&gt; function to close the file.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="03053882cbbd40735671a6a0246419440cdeb62c" translate="yes" xml:space="preserve">
          <source>Because blueprints can automatically prefix all URLs with a common string it&amp;rsquo;s easy to automatically do that for every function. Furthermore blueprints can have per-blueprint URL processors which removes a whole lot of logic from the &lt;a href=&quot;../../api/index#flask.Flask.url_defaults&quot;&gt;&lt;code&gt;url_defaults()&lt;/code&gt;&lt;/a&gt; function because it no longer has to check if the URL is really interested in a &lt;code&gt;'lang_code'&lt;/code&gt; parameter:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a7518eb9cac99d309b153989a9c66124299d72fa" translate="yes" xml:space="preserve">
          <source>Because the common pattern for file uploads exists almost unchanged in all applications dealing with uploads, there is also a Flask extension called &lt;a href=&quot;https://pythonhosted.org/Flask-Uploads/&quot;&gt;Flask-Uploads&lt;/a&gt; that implements a full fledged upload mechanism with white and blacklisting of extensions and more.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8e7c6e95260e22d70d78d585270c698ff3cc6d7f" translate="yes" xml:space="preserve">
          <source>Because the contexts are stacks, other contexts may be pushed to change the proxies during a request. While this is not a common pattern, it can be used in advanced applications to, for example, do internal redirects or chain different applications together.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9663e12afd3f3f464b408c3bdc0363d90b893bcc" translate="yes" xml:space="preserve">
          <source>Because you have Flask installed, you have setuptools available on your system. Flask already depends upon setuptools.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="919dac07248373ed4b099b9f81e3fb183ac920dd" translate="yes" xml:space="preserve">
          <source>Becoming Big</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="89ec4a3236b5dbb059e79dd553185c8dedfdf40f" translate="yes" xml:space="preserve">
          <source>Before each request, &lt;a href=&quot;../api/index#flask.Flask.before_request&quot;&gt;&lt;code&gt;before_request()&lt;/code&gt;&lt;/a&gt; functions are called. If one of these functions return a value, the other functions are skipped. The return value is treated as the response and the view function is not called.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="01f06cbbeba52066464fca94256f9c78e9879377" translate="yes" xml:space="preserve">
          <source>Before we get started, here a quick checklist of things we have to ensure upfront:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="773697863a1f19274a7dfd29269ef9ba65571ae6" translate="yes" xml:space="preserve">
          <source>Before you work on your project, activate the corresponding environment:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="da988a71250c443db442047cbf96e2efb65f766d" translate="yes" xml:space="preserve">
          <source>Besides the default client-side based sessions, if you want to handle sessions on the server-side instead, there are several Flask extensions that support this.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fd25541894888f37726e1f600a45fb7d7ef0a699" translate="yes" xml:space="preserve">
          <source>Besides using the test client as shown above, there is also the &lt;a href=&quot;../api/index#flask.Flask.test_request_context&quot;&gt;&lt;code&gt;test_request_context()&lt;/code&gt;&lt;/a&gt; method that can be used in combination with the &lt;code&gt;with&lt;/code&gt; statement to activate a request context temporarily. With this you can access the &lt;a href=&quot;../api/index#flask.request&quot;&gt;&lt;code&gt;request&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../api/index#flask.g&quot;&gt;&lt;code&gt;g&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../api/index#flask.session&quot;&gt;&lt;code&gt;session&lt;/code&gt;&lt;/a&gt; objects like in view functions. Here is a full example that demonstrates this approach:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a9f2010cd78892a4a87daaa8bd15390675aec382" translate="yes" xml:space="preserve">
          <source>Binds the app context to the current context.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c56c640305e7ac28f9122f43101dd9822c8a2ac6" translate="yes" xml:space="preserve">
          <source>Binds the request context to the current context.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ce7cb6bc22a89b2c6c5e6c013f51a9e7e9390e3a" translate="yes" xml:space="preserve">
          <source>Blinker API Changes</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="28523a50c311d95033bcd6fd0e09721675b39480" translate="yes" xml:space="preserve">
          <source>Blog Blueprint</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e187454ce032cd2b74b8cbc3b2f690806bdf8987" translate="yes" xml:space="preserve">
          <source>Blueprint Objects</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8869680c1558ac786aa3fd64f14a5e39ef4524f7" translate="yes" xml:space="preserve">
          <source>Blueprint Resource Folder</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="19df03c6577c532919c585ae6d4a950e40f55cb6" translate="yes" xml:space="preserve">
          <source>Blueprint Resources</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9d1763e90fc1c5206782d556f03d6d89e0f509b8" translate="yes" xml:space="preserve">
          <source>Blueprint local JSON decoder class to use. Set to &lt;code&gt;None&lt;/code&gt; to use the app&amp;rsquo;s &lt;code&gt;json_decoder&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f443a88ab0f754e6786c7c59e6380fc6cae7bf5c" translate="yes" xml:space="preserve">
          <source>Blueprint local JSON decoder class to use. Set to &lt;code&gt;None&lt;/code&gt; to use the app&amp;rsquo;s &lt;code&gt;json_encoder&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e26872b9648b776c064bd79ecbeb13d9a710f560" translate="yes" xml:space="preserve">
          <source>Blueprints and Views</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9b9934a2bb165a997112188dfcc8ed30bc79eba7" translate="yes" xml:space="preserve">
          <source>Blueprints can provide resources as well. Sometimes you might want to introduce a blueprint only for the resources it provides.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fbb06dcf201c264530fdf4fc015b64e6f5dc1dcc" translate="yes" xml:space="preserve">
          <source>Blueprints however can also be mounted at different locations:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e877154c7c59941449dd208a49e022478d7785d9" translate="yes" xml:space="preserve">
          <source>Blueprints in Flask are intended for these cases:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="68cf96389be6dd8a1eb52d5bfe610261c8c10c10" translate="yes" xml:space="preserve">
          <source>Blueprints instead provide separation at the Flask level, share application config, and can change an application object as necessary with being registered. The downside is that you cannot unregister a blueprint once an application was created without having to destroy the whole application object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="32da83077ee38787003fa60e4e6d4cc5dfea7fb1" translate="yes" xml:space="preserve">
          <source>Blueprints support the &lt;code&gt;errorhandler&lt;/code&gt; decorator just like the &lt;a href=&quot;../api/index#flask.Flask&quot;&gt;&lt;code&gt;Flask&lt;/code&gt;&lt;/a&gt; application object, so it is easy to make Blueprint-specific custom error pages.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5ad8e3e212daf47ac1270042fe516649f6d171fe" translate="yes" xml:space="preserve">
          <source>Both args and kwargs: Behavior undefined and will throw an exception.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a2bf4bcf38add73d606007219a80dd201626ca24" translate="yes" xml:space="preserve">
          <source>Browsers recognize various response headers in order to control security. We recommend reviewing each of the headers below for use in your application. The &lt;a href=&quot;https://github.com/GoogleCloudPlatform/flask-talisman&quot;&gt;Flask-Talisman&lt;/a&gt; extension can be used to manage HTTPS and the security headers for you.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b10ae17083002920b48a55b3bfde49290c0d8e24" translate="yes" xml:space="preserve">
          <source>Browsers will not allow JavaScript access to cookies marked as &amp;ldquo;HTTP only&amp;rdquo; for security.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5beb7ec44719f6a2a355f608eae77f829da17828" translate="yes" xml:space="preserve">
          <source>Browsers will only send cookies with requests over HTTPS if the cookie is marked &amp;ldquo;secure&amp;rdquo;. The application must be served over HTTPS for this to make sense.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e3d2578989b066f6d4e0e3d492f28b294aef6801" translate="yes" xml:space="preserve">
          <source>Building Extensions</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="24a17a340fbee0864ce0a8271da3ffb26fa7ec22" translate="yes" xml:space="preserve">
          <source>Building URLs</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3f67d141fd1b87061a795432bd6a02f61faa7895" translate="yes" xml:space="preserve">
          <source>Builtin Configuration Values</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="47093a2abfc52cd76841b5fbf3ca50afcf5cf0a6" translate="yes" xml:space="preserve">
          <source>But how do you run your application now? The naive &lt;code&gt;python
yourapplication/__init__.py&lt;/code&gt; will not work. Let&amp;rsquo;s just say that Python does not want modules in packages to be the startup file. But that is not a big problem, just add a new file called &lt;code&gt;setup.py&lt;/code&gt; next to the inner &lt;code&gt;yourapplication&lt;/code&gt; folder with the following contents:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2716a82e2c1adf6b0097dc58eab7f3e25a902033" translate="yes" xml:space="preserve">
          <source>But that&amp;rsquo;s about where similarities end. Jinja2 for example has an extensive filter system, a certain way to do template inheritance, support for reusable blocks (macros) that can be used from inside templates and also from Python code, uses Unicode for all operations, supports iterative template rendering, configurable syntax and more. On the other hand an engine like Genshi is based on XML stream evaluation, template inheritance by taking the availability of XPath into account and more. Mako on the other hand treats templates similar to Python modules.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0228d7a741a09feff13178679bff86e3565bf31c" translate="yes" xml:space="preserve">
          <source>But there is another very important reason why Flask depends on an explicit instantiation of that class: the package name. Whenever you create a Flask instance you usually pass it &lt;code&gt;__name__&lt;/code&gt; as package name. Flask depends on that information to properly load resources relative to your module. With Python&amp;rsquo;s outstanding support for reflection it can then access the package to figure out where the templates and static files are stored (see &lt;a href=&quot;../api/index#flask.Flask.open_resource&quot;&gt;&lt;code&gt;open_resource()&lt;/code&gt;&lt;/a&gt;). Now obviously there are frameworks around that do not need any configuration and will still be able to load templates relative to your application module. But they have to use the current working directory for that, which is a very unreliable way to determine where the application is. The current working directory is process-wide and if you are running multiple applications in one process (which could happen in a webserver without you knowing) the paths will be off. Worse: many webservers do not set the working directory to the directory of your application but to the document root which does not have to be the same folder.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e9c0a6f5ac7abfd4b33cc718933fabd02c8a453c" translate="yes" xml:space="preserve">
          <source>But there is more you can do, and we will cover some better setups to deal with errors.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cc57173736c33e36ad242c7b7809992d13821316" translate="yes" xml:space="preserve">
          <source>But, rather, in model.py (or equivalent):</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d40d812bb7e58370cc1c31b48503c3bfde276a18" translate="yes" xml:space="preserve">
          <source>By default a black and white error page is shown for each error code. If you want to customize the error page, you can use the &lt;a href=&quot;../api/index#flask.Flask.errorhandler&quot;&gt;&lt;code&gt;errorhandler()&lt;/code&gt;&lt;/a&gt; decorator:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="705af05a972476503093f5f52593005e3900f0f8" translate="yes" xml:space="preserve">
          <source>By default an &lt;a href=&quot;https://werkzeug.palletsprojects.com/en/1.0.x/datastructures/#werkzeug.datastructures.ImmutableMultiDict&quot;&gt;&lt;code&gt;ImmutableMultiDict&lt;/code&gt;&lt;/a&gt; is returned from this function. This can be changed by setting &lt;a href=&quot;#flask.Request.parameter_storage_class&quot;&gt;&lt;code&gt;parameter_storage_class&lt;/code&gt;&lt;/a&gt; to a different type. This might be necessary if the order of the form data is important.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aa324463dddeb7587a1bd5fa1deda99b3eadb17c" translate="yes" xml:space="preserve">
          <source>By default it will try to guess the mimetype for you, but you can also explicitly provide one. For extra security you probably want to send certain files as attachment (HTML for instance). The mimetype guessing requires a &lt;code&gt;filename&lt;/code&gt; or an &lt;code&gt;attachment_filename&lt;/code&gt; to be provided.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9244e5d670a2b2166553492f54e25b7c0a90b5c3" translate="yes" xml:space="preserve">
          <source>By default the rightmost part of the path is where it is exposed on the web. This can be changed with the &lt;code&gt;static_url_path&lt;/code&gt; argument. Because the folder is called &lt;code&gt;static&lt;/code&gt; here it will be available at the &lt;code&gt;url_prefix&lt;/code&gt; of the blueprint + &lt;code&gt;/static&lt;/code&gt;. If the blueprint has the prefix &lt;code&gt;/admin&lt;/code&gt;, the static URL will be &lt;code&gt;/admin/static&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e33bc041f1e2672ff9cdea25dfabb46bfc20b468" translate="yes" xml:space="preserve">
          <source>By default, Flask does not include a database abstraction layer, form validation or anything else where different libraries already exist that can handle that. Instead, Flask supports extensions to add such functionality to your application as if it was implemented in Flask itself. Numerous extensions provide database integration, form validation, upload handling, various open authentication technologies, and more. Flask may be &amp;ldquo;micro&amp;rdquo;, but it&amp;rsquo;s ready for production use on a variety of needs.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="abd5c518b32ef7d8499e45e0e2cb3ccec25fa1fb" translate="yes" xml:space="preserve">
          <source>By default, this function returns &lt;code&gt;SEND_FILE_MAX_AGE_DEFAULT&lt;/code&gt; from the configuration of &lt;a href=&quot;#flask.current_app&quot;&gt;&lt;code&gt;current_app&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1dc20db63d6a814114bebe0e66f4763c87871daf" translate="yes" xml:space="preserve">
          <source>By just creating a request context, you still don&amp;rsquo;t have run the code that is normally run before a request. This might result in your database being unavailable if you are connecting to the database in a before-request callback or the current user not being stored on the &lt;a href=&quot;../api/index#flask.g&quot;&gt;&lt;code&gt;g&lt;/code&gt;&lt;/a&gt; object etc.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e06655b31f31ab05d5e8ebc805ad257cfe3fc781" translate="yes" xml:space="preserve">
          <source>By using &lt;code&gt;client.get&lt;/code&gt; we can send an HTTP &lt;code&gt;GET&lt;/code&gt; request to the application with the given path. The return value will be a &lt;a href=&quot;../api/index#flask.Flask.response_class&quot;&gt;&lt;code&gt;response_class&lt;/code&gt;&lt;/a&gt; object. We can now use the &lt;a href=&quot;https://werkzeug.palletsprojects.com/en/1.0.x/wrappers/#werkzeug.wrappers.BaseResponse.data&quot;&gt;&lt;code&gt;data&lt;/code&gt;&lt;/a&gt; attribute to inspect the return value (as string) from the application. In this case, we ensure that &lt;code&gt;'No entries here so far'&lt;/code&gt; is part of the output.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="422f720e7d72716b7017e69268406be073cfc7c1" translate="yes" xml:space="preserve">
          <source>CGI</source>
          <target state="translated">CGI</target>
        </trans-unit>
        <trans-unit id="60790f7c84170a8b87051d7e857118ffeb0465ee" translate="yes" xml:space="preserve">
          <source>Caching</source>
          <target state="translated">Caching</target>
        </trans-unit>
        <trans-unit id="fa7a765eebede2924a55a0ecd02f377dfcd2431e" translate="yes" xml:space="preserve">
          <source>Caching Decorator</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2979c7cbb96018aa5c344fb9ca98f07e3c5830a1" translate="yes" xml:space="preserve">
          <source>Call a function from a blueprint when the application is setting up so that you have a place to modify attributes of the application (like hooking in before/after request handlers etc.)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2bd82f73e6a0f96f069750699a8705dc94d7d185" translate="yes" xml:space="preserve">
          <source>Callback function for URL defaults for all view functions of the application. It&amp;rsquo;s called with the endpoint and values and should update the values passed in place.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2d579239a51d202138f27cd6372c3f1eb4242b42" translate="yes" xml:space="preserve">
          <source>Callback function for URL defaults for this blueprint. It&amp;rsquo;s called with the endpoint and values and should update the values passed in place.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4bfc93a9f7e526c5ae8404a2bce0314c50bfc679" translate="yes" xml:space="preserve">
          <source>Callbacks and Errors</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0a53a6eeaf676904ee956eb0583a92a5487ca8f6" translate="yes" xml:space="preserve">
          <source>Called after the request is dispatched and the response is returned, right before the request context is popped.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1d5ffbeea0b81dd766563faf084ba7ad33acfb05" translate="yes" xml:space="preserve">
          <source>Called before the request is dispatched. Calls &lt;a href=&quot;#flask.Flask.url_value_preprocessors&quot;&gt;&lt;code&gt;url_value_preprocessors&lt;/code&gt;&lt;/a&gt; registered with the app and the current blueprint (if any). Then calls &lt;a href=&quot;#flask.Flask.before_request_funcs&quot;&gt;&lt;code&gt;before_request_funcs&lt;/code&gt;&lt;/a&gt; registered with the app and the blueprint.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5bf0c8d21a0f7c8bbd06e2aac344800a96e684ca" translate="yes" xml:space="preserve">
          <source>Called by &lt;a href=&quot;#flask.Flask.register_blueprint&quot;&gt;&lt;code&gt;Flask.register_blueprint()&lt;/code&gt;&lt;/a&gt; to register all views and callbacks registered on the blueprint with the application. Creates a &lt;a href=&quot;#flask.blueprints.BlueprintSetupState&quot;&gt;&lt;code&gt;BlueprintSetupState&lt;/code&gt;&lt;/a&gt; and calls each &lt;a href=&quot;#flask.Blueprint.record&quot;&gt;&lt;code&gt;record()&lt;/code&gt;&lt;/a&gt; callback with it.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6a507dfdcdaa46e8bb5483d6716bc5fba2501d26" translate="yes" xml:space="preserve">
          <source>Called if &lt;a href=&quot;#flask.Request.get_json&quot;&gt;&lt;code&gt;get_json()&lt;/code&gt;&lt;/a&gt; parsing fails and isn&amp;rsquo;t silenced. If this method returns a value, it is used as the return value for &lt;a href=&quot;#flask.Request.get_json&quot;&gt;&lt;code&gt;get_json()&lt;/code&gt;&lt;/a&gt;. The default implementation raises &lt;a href=&quot;https://werkzeug.palletsprojects.com/en/1.0.x/exceptions/#werkzeug.exceptions.BadRequest&quot;&gt;&lt;code&gt;BadRequest&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="04d0afb7ba8e052eb39bf8ad4b6fea283deb990a" translate="yes" xml:space="preserve">
          <source>Called right before the application context is popped.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2e14385bd719b9248e6758bc883d4544d8ee279e" translate="yes" xml:space="preserve">
          <source>Calls &lt;a href=&quot;#flask.Request.get_json&quot;&gt;&lt;code&gt;get_json()&lt;/code&gt;&lt;/a&gt; with default arguments.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="738ca101490e25936f15eb43d94d119890996786" translate="yes" xml:space="preserve">
          <source>Calls the blueprint&amp;rsquo;s &lt;a href=&quot;#flask.Blueprint.register&quot;&gt;&lt;code&gt;register()&lt;/code&gt;&lt;/a&gt; method after recording the blueprint in the application&amp;rsquo;s &lt;a href=&quot;#flask.Flask.blueprints&quot;&gt;&lt;code&gt;blueprints&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a2ab0c5086ad98412932b7183084c45853c63438" translate="yes" xml:space="preserve">
          <source>Can be overridden by a subclass to hook into the matching of the request.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6bbc19fbb36a9ea73894cf61e18bd57dc7392b74" translate="yes" xml:space="preserve">
          <source>Can be overridden in order to modify the response object before it&amp;rsquo;s sent to the WSGI server. By default this will call all the &lt;a href=&quot;#flask.Flask.after_request&quot;&gt;&lt;code&gt;after_request()&lt;/code&gt;&lt;/a&gt; decorated functions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c328a2f448b0c49ea943b45a5a2408ab39d7b8cb" translate="yes" xml:space="preserve">
          <source>Caution: zero-padded file modes</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="323cbbb5f4247a5ea61539fae440e7218cdda264" translate="yes" xml:space="preserve">
          <source>Celery Background Tasks</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9a4f54ac55f0c6ed996e0aef19fafdd20ab3d04c" translate="yes" xml:space="preserve">
          <source>Celery is a powerful task queue that can be used for simple background tasks as well as complex multi-stage programs and schedules. This guide will show you how to configure Celery using Flask, but assumes you&amp;rsquo;ve already read the &lt;a href=&quot;https://celery.readthedocs.io/en/latest/getting-started/first-steps-with-celery.html&quot;&gt;First Steps with Celery&lt;/a&gt; guide in the Celery documentation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5a51a2695422e1b5d3fcc0f1a5bb8ea8726564db" translate="yes" xml:space="preserve">
          <source>Celery is a separate Python package. Install it from PyPI using pip:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="855a4e5dbf42168858107dd9c3d3ac937288a59e" translate="yes" xml:space="preserve">
          <source>Certain configuration values are also forwarded to the &lt;a href=&quot;../api/index#flask.Flask&quot;&gt;&lt;code&gt;Flask&lt;/code&gt;&lt;/a&gt; object so you can read and write them from there:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="db21d3c3927dc58365d564728cd7ac2c802b0f45" translate="yes" xml:space="preserve">
          <source>Certain features and interactions are common enough that you will find them in most web applications. For example, many applications use a relational database and user authentication. They will open a database connection at the beginning of the request and get the information for the logged in user. At the end of the request, the database connection is closed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0258efae02185b002344d155e38f15aa764f2fba" translate="yes" xml:space="preserve">
          <source>Certain objects in Flask are global objects, but not of the usual kind. These objects are actually proxies to objects that are local to a specific context. What a mouthful. But that is actually quite easy to understand.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f54568b936358680a3fa49167eb17f0c78d85257" translate="yes" xml:space="preserve">
          <source>Changed in version 0.10: Bound to the application context instead of the request context.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="605745d8d5fd9d633eefde1ec4886c7742a12b50" translate="yes" xml:space="preserve">
          <source>Changed in version 0.10: The default port is now picked from the &lt;code&gt;SERVER_NAME&lt;/code&gt; variable.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bce2a66ad40b0d8fe9c5f63b44b357d8482257c4" translate="yes" xml:space="preserve">
          <source>Changed in version 0.10: This is now always available, even in imported templates.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="829a79c49973549437410fdb8545a5c2d0d5eda9" translate="yes" xml:space="preserve">
          <source>Changed in version 0.11: &lt;code&gt;Environment.auto_reload&lt;/code&gt; set in accordance with &lt;code&gt;TEMPLATES_AUTO_RELOAD&lt;/code&gt; configuration option.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fe5785d06d7ff21977b677d27b1b4f7ea2dc1294" translate="yes" xml:space="preserve">
          <source>Changed in version 0.11: Added &lt;code&gt;**kwargs&lt;/code&gt; to support passing additional keyword arguments to the constructor of &lt;a href=&quot;#flask.Flask.test_client_class&quot;&gt;&lt;code&gt;test_client_class&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ff6b071f85c139bb3678ddd1122227ced691247a" translate="yes" xml:space="preserve">
          <source>Changed in version 0.11: Added support for serializing top-level arrays. This introduces a security risk in ancient browsers. See &lt;a href=&quot;../security/index#json-security&quot;&gt;JSON Security&lt;/a&gt; for details.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4770479c09c8ed054c68088248739ac5d536f1bf" translate="yes" xml:space="preserve">
          <source>Changed in version 0.12: &lt;code&gt;app.test_client()&lt;/code&gt; includes preset default environment, which can be set after instantiation of the &lt;code&gt;app.test_client()&lt;/code&gt; object in &lt;code&gt;client.environ_base&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aaa607a4b5a05abeb2d9c1d31859a82dd97baaf0" translate="yes" xml:space="preserve">
          <source>Changed in version 0.12: The &lt;code&gt;attachment_filename&lt;/code&gt; is preferred over &lt;code&gt;filename&lt;/code&gt; for MIME-type detection.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dc28c13b8e5bdb67417e473e1e37e3f9d04c0937" translate="yes" xml:space="preserve">
          <source>Changed in version 0.12: The filename is no longer automatically inferred from file objects. If you want to use automatic mimetype and etag support, pass a filepath via &lt;code&gt;filename_or_fp&lt;/code&gt; or &lt;code&gt;attachment_filename&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2ba843f0522657a4ee3bd5d5b52d24edd74a1a30" translate="yes" xml:space="preserve">
          <source>Changed in version 0.2: &lt;code&gt;view_func&lt;/code&gt; parameter added.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="67e76ef75a3a7d325ec11d04f351eeb1ea8e1661" translate="yes" xml:space="preserve">
          <source>Changed in version 0.3: &lt;code&gt;category&lt;/code&gt; parameter added.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e45e6697f64cfeabcaa2210338ba66da387b2c55" translate="yes" xml:space="preserve">
          <source>Changed in version 0.3: &lt;code&gt;with_categories&lt;/code&gt; parameter added.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e140a8ee898c22d45901a012e83b5df79d99a03f" translate="yes" xml:space="preserve">
          <source>Changed in version 0.4: added support for &lt;code&gt;with&lt;/code&gt; block usage for the client.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9019df17febdb2683288bfb09551cf1184199f7d" translate="yes" xml:space="preserve">
          <source>Changed in version 0.5: As of Flask 0.5 the functions registered for after request execution are called in reverse order of registration.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b3217c39d85fd4fc74e1d0f98738c542c3a612c9" translate="yes" xml:space="preserve">
          <source>Changed in version 0.5: Autoescaping is no longer enabled for all templates. The following extensions for templates trigger autoescaping: &lt;code&gt;.html&lt;/code&gt;, &lt;code&gt;.htm&lt;/code&gt;, &lt;code&gt;.xml&lt;/code&gt;, &lt;code&gt;.xhtml&lt;/code&gt;. Templates loaded from a string will have autoescaping disabled.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6b7c944a5006e742b6d044a1f0f0ac33490ea3da" translate="yes" xml:space="preserve">
          <source>Changed in version 0.5: If a dict is provided as file in the dict for the &lt;code&gt;data&lt;/code&gt; parameter the content type has to be called &lt;code&gt;content_type&lt;/code&gt; now instead of &lt;code&gt;mimetype&lt;/code&gt;. This change was made for consistency with &lt;code&gt;werkzeug.FileWrapper&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3a8bf9e8650ef2d0afaa92378deff74f9a2f67ba" translate="yes" xml:space="preserve">
          <source>Changed in version 0.5: This method now accepts the same arguments as &lt;a href=&quot;https://werkzeug.palletsprojects.com/en/1.0.x/test/#werkzeug.test.EnvironBuilder&quot;&gt;&lt;code&gt;EnvironBuilder&lt;/code&gt;&lt;/a&gt;. Because of this the &lt;code&gt;environ&lt;/code&gt; parameter is now called &lt;code&gt;environ_overrides&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e24d1a61e980fb84afdfeb15acfe23eb1df54904" translate="yes" xml:space="preserve">
          <source>Changed in version 0.6: &lt;code&gt;OPTIONS&lt;/code&gt; is added automatically as method.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c0a270d26e90bce3a7f4d6a8d953b4b74728512c" translate="yes" xml:space="preserve">
          <source>Changed in version 0.7: Teardown events for the request and app contexts are called even if an unhandled error occurs. Other events may not be called depending on when an error occurs during dispatch. See &lt;a href=&quot;../reqcontext/index#callbacks-and-errors&quot;&gt;Callbacks and Errors&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8567838966398b020e1e7ddbc47f9d4bb21929c4" translate="yes" xml:space="preserve">
          <source>Changed in version 0.7: This no longer does the exception handling, this code was moved to the new &lt;a href=&quot;#flask.Flask.full_dispatch_request&quot;&gt;&lt;code&gt;full_dispatch_request()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="100dad4cffa367b16bbe9c971ead31a395b38090" translate="yes" xml:space="preserve">
          <source>Changed in version 0.7: mimetype guessing and etag support for file objects was deprecated because it was unreliable. Pass a filename if you are able to, otherwise attach an etag yourself. This functionality will be removed in Flask 1.0</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a67a8deb011a9e1086ccf017044f9389946bc237" translate="yes" xml:space="preserve">
          <source>Changed in version 0.9: &lt;code&gt;category_filter&lt;/code&gt; parameter added.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="061290043e887df579ac6aa26641297952336a94" translate="yes" xml:space="preserve">
          <source>Changed in version 0.9: Added the &lt;code&gt;exc&lt;/code&gt; argument.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2981bd33f703e7132d67ffdde50c672176b7bb13" translate="yes" xml:space="preserve">
          <source>Changed in version 0.9: Previous to Werkzeug 0.9 this would only contain form data for POST and PUT requests.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b31d7fbe8a6b93bcee6ad7be9feef6f47bcb54d6" translate="yes" xml:space="preserve">
          <source>Changed in version 0.9: Previously a tuple was interpreted as the arguments for the response object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b4499d4fa7acb2135451622491738d22bd80f909" translate="yes" xml:space="preserve">
          <source>Changed in version 0.9: This can now also be called without a request object when the URL adapter is created for the application context.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e1e6b6ea304c4bda574ec8ac5b4d88a5cbd059c4" translate="yes" xml:space="preserve">
          <source>Changed in version 0.9: This stream is now always available but might be consumed by the form parser later on. Previously the stream was only set if no parsing happened.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="017ee4d56d1d3a44df43b173e01e08ff0b1d3164" translate="yes" xml:space="preserve">
          <source>Changed in version 0.9: cache_timeout pulls its default from application config, when None.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ba97b2f008b120f3e2c95fa311d55ba95b383534" translate="yes" xml:space="preserve">
          <source>Changed in version 1.0.0: Behavior was simplified. The logger is always named &lt;code&gt;&quot;flask.app&quot;&lt;/code&gt;. The level is only set during configuration, it doesn&amp;rsquo;t check &lt;code&gt;app.debug&lt;/code&gt; each time. Only one format is used, not different ones depending on &lt;code&gt;app.debug&lt;/code&gt;. No handlers are removed, and a handler is only added if no handlers are already configured.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d27f1b352bfdba0e405bc337b1ece652a9ac37a9" translate="yes" xml:space="preserve">
          <source>Changed in version 1.0.3: &lt;code&gt;RoutingException&lt;/code&gt;, used internally for actions such as slash redirects during routing, is not passed to error handlers.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c708fa1c251665c0f9a94eaab8b8cda92a20ff61" translate="yes" xml:space="preserve">
          <source>Changed in version 1.0.3: &lt;code&gt;app&lt;/code&gt; can be passed directly, rather than requiring an app context for configuration.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7ce237b9573e46d9ea004a2c67342f99c4a9c5aa" translate="yes" xml:space="preserve">
          <source>Changed in version 1.0.3: Filenames are encoded with ASCII instead of Latin-1 for broader compatibility with WSGI servers.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="530747c1fe3c08a22d46307a57fb7025a4e93789" translate="yes" xml:space="preserve">
          <source>Changed in version 1.0: &lt;a href=&quot;../config/index#SERVER_NAME&quot;&gt;&lt;code&gt;SERVER_NAME&lt;/code&gt;&lt;/a&gt; no longer implicitly enables subdomain matching. Use &lt;code&gt;subdomain_matching&lt;/code&gt; instead.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="543ff53301533e4f550b7c462c3e84f798f89353" translate="yes" xml:space="preserve">
          <source>Changed in version 1.0: &lt;code&gt;LOGGER_NAME&lt;/code&gt; and &lt;code&gt;LOGGER_HANDLER_POLICY&lt;/code&gt; were removed. See &lt;a href=&quot;../logging/index&quot;&gt;Logging&lt;/a&gt; for information about configuration.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1c39da31ef3132ba1764bbf7452a641658a6f007" translate="yes" xml:space="preserve">
          <source>Changed in version 1.0: Added &lt;a href=&quot;#flask.Response.max_cookie_size&quot;&gt;&lt;code&gt;max_cookie_size&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="66673fd866ee44be9d7493ef63daa07913b84df4" translate="yes" xml:space="preserve">
          <source>Changed in version 1.0: Added &lt;code id=&quot;index-3&quot;&gt;FLASK_ENV&lt;/code&gt; to control the environment separately from debug mode. The development environment enables debug mode.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d59846f0a659e337ee9eb0a27ac6c91bc816a27a" translate="yes" xml:space="preserve">
          <source>Changed in version 1.0: Bad request errors are not trapped by default in debug mode.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0680913b099b08430879b04379e2a4ce8f80f962" translate="yes" xml:space="preserve">
          <source>Changed in version 1.0: Exceptions are looked up by code &lt;em&gt;and&lt;/em&gt; by MRO, so &lt;code&gt;HTTPExcpetion&lt;/code&gt; subclasses can be handled with a catch-all handler for the base &lt;code&gt;HTTPException&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eb9a24cca46fac3b3f7db186ff77e386118c0e72" translate="yes" xml:space="preserve">
          <source>Changed in version 1.0: If installed, python-dotenv will be used to load environment variables from &lt;code&gt;.env&lt;/code&gt; and &lt;code&gt;.flaskenv&lt;/code&gt; files.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f9f97fa236ed2f96e5a6afc6795ec71b3fc8004d" translate="yes" xml:space="preserve">
          <source>Changed in version 1.0: JSON support is added to the response, like the request. This is useful when testing to get the test client response data as JSON.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b1205bcf53e911b37e990649e7f0b43e7bc82bad" translate="yes" xml:space="preserve">
          <source>Changed in version 1.0: Key errors raised from request data like &lt;code&gt;form&lt;/code&gt; show the bad key in debug mode rather than a generic bad request message.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="480fb8f5c40da31a71e65735506f7dfdfa90271d" translate="yes" xml:space="preserve">
          <source>Changed in version 1.0: UTF-8 filenames, as specified in &lt;a href=&quot;https://tools.ietf.org/html/rfc2231#section-4&quot;&gt;RFC 2231&lt;/a&gt;, are supported.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f28613bd5a6640e621261a5fe7d88a4ed7d98c9c" translate="yes" xml:space="preserve">
          <source>Changed in version 1.1.0: &lt;code&gt;after_request&lt;/code&gt; functions and other finalization is done even for the default 500 response when there is no handler.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ae0cb9edb5bd9f9ec41e15eb67df147285fa701e" translate="yes" xml:space="preserve">
          <source>Changed in version 1.1.0: Always passes the &lt;code&gt;InternalServerError&lt;/code&gt; instance to the handler, setting &lt;code&gt;original_exception&lt;/code&gt; to the unhandled error.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c53c17602f66b9ee70164cde54aba4dabea3b107" translate="yes" xml:space="preserve">
          <source>Changed in version 1.1.0: Blueprints have a &lt;code&gt;cli&lt;/code&gt; group to register nested CLI commands. The &lt;code&gt;cli_group&lt;/code&gt; parameter controls the name of the group under the &lt;code&gt;flask&lt;/code&gt; command.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ef15a9b14f4d9a6be7679c58d803d719f0b92a43" translate="yes" xml:space="preserve">
          <source>Changed in version 1.1.0: Returns &lt;code&gt;False&lt;/code&gt; when python-dotenv is not installed, or when the given path isn&amp;rsquo;t a file.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="be7453bdec6d05c8ce6ed40c15218ee2b55257f0" translate="yes" xml:space="preserve">
          <source>Changed in version 1.1.0: The logger takes the same name as &lt;a href=&quot;#flask.Flask.name&quot;&gt;&lt;code&gt;name&lt;/code&gt;&lt;/a&gt; rather than hard-coding &lt;code&gt;&quot;flask.app&quot;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cb7624fdce9cd3a9c63df93c78790bef06f1883f" translate="yes" xml:space="preserve">
          <source>Changed in version 1.1.0: This is a &lt;code&gt;dict&lt;/code&gt; instead of an &lt;code&gt;ImmutableDict&lt;/code&gt; to allow easier configuration.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="936acd205fcb35799a07d5577e294a83787810ae" translate="yes" xml:space="preserve">
          <source>Changed in version 1.1: Filename may be a &lt;a href=&quot;https://docs.python.org/3/library/os.html#os.PathLike&quot;&gt;&lt;code&gt;PathLike&lt;/code&gt;&lt;/a&gt; object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dfe7793a1baf5db03eea81381b524729f16566d2" translate="yes" xml:space="preserve">
          <source>Changed in version 1.1: The current session object is used instead of reloading the original data. This prevents &lt;code&gt;flask.session&lt;/code&gt; pointing to an out-of-date object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="164b3d4809f98d0458414f1bf9cf3c9dcba16bb5" translate="yes" xml:space="preserve">
          <source>Changelog</source>
          <target state="translated">Changelog</target>
        </trans-unit>
        <trans-unit id="a6a550313950793f43fcdccc977fcc602b343eec" translate="yes" xml:space="preserve">
          <source>Changes the current working directory to the location of the first file found, with the assumption that it is in the top level project directory and will be where the Python path should import local packages from.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="10cfb8cc2efa818ff89d75f91707cfa564c685bc" translate="yes" xml:space="preserve">
          <source>Check if the given value should be tagged by this tag.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="641aac0c9684915aabd699c951d8ec617774e547" translate="yes" xml:space="preserve">
          <source>Check if the mimetype indicates JSON data, either &lt;em&gt;application/json&lt;/em&gt; or &lt;em&gt;application/*+json&lt;/em&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3a2bd2191dd53bf804cecbea6e6c0059fa22f6e3" translate="yes" xml:space="preserve">
          <source>Check out the &lt;a href=&quot;https://github.com/pallets/flask/tree/1.1.2/examples/javascript&quot;&gt;example source&lt;/a&gt; for a full application demonstrating the code on this page, as well as the same thing using &lt;code&gt;XMLHttpRequest&lt;/code&gt; and &lt;code&gt;fetch&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3acbe77462385c47c90f53a2ddeb65fd3178323e" translate="yes" xml:space="preserve">
          <source>Check whether an attribute is present.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="562f4457cdac9f9d83ad8c8bec00f0b64776ade9" translate="yes" xml:space="preserve">
          <source>Checks if a given object is a null session. Null sessions are not asked to be saved.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eed940608d7f5f1e191bc381759874f13f41547e" translate="yes" xml:space="preserve">
          <source>Checks if an HTTP exception should be trapped or not. By default this will return &lt;code&gt;False&lt;/code&gt; for all exceptions except for a bad request key error if &lt;code&gt;TRAP_BAD_REQUEST_ERRORS&lt;/code&gt; is set to &lt;code&gt;True&lt;/code&gt;. It also returns &lt;code&gt;True&lt;/code&gt; if &lt;code&gt;TRAP_HTTP_EXCEPTIONS&lt;/code&gt; is set to &lt;code&gt;True&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="996e31f727a5d55f1c2c9ecc6fab3703f07517ac" translate="yes" xml:space="preserve">
          <source>Child Template</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5d6c8c45e03fa1ec85b300a7838589e4acb12446" translate="yes" xml:space="preserve">
          <source>Circular Imports</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dabf48f5c37968ebc8b7067b43a4200f99b0bf66" translate="yes" xml:space="preserve">
          <source>Class used to generate nicer error messages if sessions are not available. Will still allow read-only access to the empty session but fail on setting.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dbe7859b2e1a88ecab20f8c8168b42e346ebba7a" translate="yes" xml:space="preserve">
          <source>Class-Based Views</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e89444d78a509a1079a310628ba8ab3a600c1fa3" translate="yes" xml:space="preserve">
          <source>Click &lt;em&gt;Apply&lt;/em&gt; to save the configuration, or &lt;em&gt;OK&lt;/em&gt; to save and close the window. Select the configuration in the main PyCharm window and click the play button next to it to run the server.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a5bc9d3b8f0532f468bf5a7abccc7961c2c502e1" translate="yes" xml:space="preserve">
          <source>Click comes with &lt;a href=&quot;https://click.palletsprojects.com/testing/&quot;&gt;utilities for testing&lt;/a&gt; your CLI commands. A &lt;a href=&quot;https://click.palletsprojects.com/en/7.x/api/#click.testing.CliRunner&quot;&gt;&lt;code&gt;CliRunner&lt;/code&gt;&lt;/a&gt; runs commands in isolation and captures the output in a &lt;a href=&quot;https://click.palletsprojects.com/en/7.x/api/#click.testing.Result&quot;&gt;&lt;code&gt;Result&lt;/code&gt;&lt;/a&gt; object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4b07517f2e8cd64be6c27681fd9e505c16a3ccab" translate="yes" xml:space="preserve">
          <source>Click is configured to load default values for command options from environment variables. The variables use the pattern &lt;code&gt;FLASK_COMMAND_OPTION&lt;/code&gt;. For example, to set the port for the run command, instead of &lt;code&gt;flask run --port 8000&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c911ef71110e243506968e28e6a274e9d363ebce" translate="yes" xml:space="preserve">
          <source>Click the + (&lt;em&gt;Add New Configuration&lt;/em&gt;) button and select &lt;em&gt;Python&lt;/em&gt;. Give the configuration a name such as &amp;ldquo;flask run&amp;rdquo;. For the &lt;code&gt;flask run&lt;/code&gt; command, check &amp;ldquo;Single instance only&amp;rdquo; since you can&amp;rsquo;t run the server more than once at the same time.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b92c64e81f38256df32ca5b73521725a71f7d1fa" translate="yes" xml:space="preserve">
          <source>Closes associated resources of this request object. This closes all file handles explicitly. You can also use the request object in a with statement which will automatically close it.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2d1f68976708b837c03478655407a1c18ea2131a" translate="yes" xml:space="preserve">
          <source>Closing the &lt;code&gt;&amp;lt;p&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;dt&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;dd&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;tr&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;td&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;th&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;tbody&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;thead&amp;gt;&lt;/code&gt;, or &lt;code&gt;&amp;lt;tfoot&amp;gt;&lt;/code&gt; tags.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="26aae42a54d179145601c0e2e0564e3fdc13b7de" translate="yes" xml:space="preserve">
          <source>Combining Applications</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="59b0754344014d9d6347724f39bcacbaf47c2e7d" translate="yes" xml:space="preserve">
          <source>Command Line</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="14c818412d017dcc7f2635ecf050b64a83410b23" translate="yes" xml:space="preserve">
          <source>Command Line Interface</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="df75135b9b55e9b43958302eae145b5e5ee8e9ac" translate="yes" xml:space="preserve">
          <source>Commands added using the Flask app&amp;rsquo;s &lt;code&gt;cli&lt;/code&gt;&lt;a href=&quot;../api/index#flask.cli.AppGroup.command&quot;&gt;&lt;code&gt;command()&lt;/code&gt;&lt;/a&gt; decorator will be executed with an application context pushed, so your command and extensions have access to the app and its configuration. If you create a command using the Click &lt;a href=&quot;https://click.palletsprojects.com/en/7.x/api/#click.command&quot;&gt;&lt;code&gt;command()&lt;/code&gt;&lt;/a&gt; decorator instead of the Flask decorator, you can use &lt;a href=&quot;../api/index#flask.cli.with_appcontext&quot;&gt;&lt;code&gt;with_appcontext()&lt;/code&gt;&lt;/a&gt; to get the same behavior.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fce06e20e5f7f74aacccab40b59b75a56c8f7305" translate="yes" xml:space="preserve">
          <source>Comments</source>
          <target state="translated">Comments</target>
        </trans-unit>
        <trans-unit id="07526cc884ff576fd27c4c2c8cbc43f0383ca45a" translate="yes" xml:space="preserve">
          <source>Common Error Codes</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="754164850f38c1ecdaf6b8ed894cb192bc36c5f4" translate="yes" xml:space="preserve">
          <source>Configuration</source>
          <target state="translated">Configuration</target>
        </trans-unit>
        <trans-unit id="c3636eba47dc98ed183b0a505511b3f0cb92c4a8" translate="yes" xml:space="preserve">
          <source>Configuration Basics</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2ca0acc8c987489855b6839a6449d80f5cf645df" translate="yes" xml:space="preserve">
          <source>Configuration Best Practices</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="947037540f91ad75a7410f76e2780e57172310f3" translate="yes" xml:space="preserve">
          <source>Configuration Handling</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c7b69eebde1920c1ad92c566ca3c31ff7d836748" translate="yes" xml:space="preserve">
          <source>Configuration and Conventions</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="07c89ed7f1376d563730caf4a704b3fe844e17b2" translate="yes" xml:space="preserve">
          <source>Configuration becomes more useful if you can store it in a separate file, ideally located outside the actual application package. This makes packaging and distributing your application possible via various package handling tools (&lt;a href=&quot;../patterns/distribute/index#distribute-deployment&quot;&gt;Deploying with Setuptools&lt;/a&gt;) and finally modifying the configuration file afterwards.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="980d5b1c06e8f4d113fc8db17751e044dea31a8c" translate="yes" xml:space="preserve">
          <source>Configuration values &lt;code&gt;APPLICATION_ROOT&lt;/code&gt; and &lt;code&gt;SERVER_NAME&lt;/code&gt; are only used when generating URLs outside of a request context.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="792c81a4cfdcb5b45d688cb03c2fd2e816f86d44" translate="yes" xml:space="preserve">
          <source>Configure</source>
          <target state="translated">Configure</target>
        </trans-unit>
        <trans-unit id="b6f09b9822b4fcc7ee7448f402f4626bb6d634c3" translate="yes" xml:space="preserve">
          <source>Configuring Apache</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8723c91a26f3282fe4650425efecae4ed51752a1" translate="yes" xml:space="preserve">
          <source>Configuring Editors</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="36bebb88549e20848eac184f7f24a372e60ed389" translate="yes" xml:space="preserve">
          <source>Configuring from Environment Variables</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="021beea13173e9cf21786fcd04772141b1cea519" translate="yes" xml:space="preserve">
          <source>Configuring from Files</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="17a00dd6d951e56894e460b8058ca64b1426b083" translate="yes" xml:space="preserve">
          <source>Configuring lighttpd</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2031ab4ee84e7e349fa32c5b2095aa6cafb6bd65" translate="yes" xml:space="preserve">
          <source>Configuring nginx</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="15e24671676e84438ca9c55f877c74c7ed8e2f78" translate="yes" xml:space="preserve">
          <source>Connect on Demand</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3cea5c66435a8314ec0ec1fa060f95e4a2f16488" translate="yes" xml:space="preserve">
          <source>Connection Reset Issue</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="27879abb1038347eda0c2acbe56b48df3e1e8613" translate="yes" xml:space="preserve">
          <source>Connects a URL rule. Works exactly like the &lt;a href=&quot;#flask.Flask.route&quot;&gt;&lt;code&gt;route()&lt;/code&gt;&lt;/a&gt; decorator. If a view_func is provided it will be registered with the endpoint.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c4e5233899505cdb1415bf52d9bb31c23e19a404" translate="yes" xml:space="preserve">
          <source>Consider an application like this:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="83cfba6e56880df7292464a3eb3187ef846ad8b6" translate="yes" xml:space="preserve">
          <source>Consider you have a function that loads a list of objects from the database and renders into a template:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ae72e42f4a286c599cb89ee099a31d8370cd2e1f" translate="yes" xml:space="preserve">
          <source>Consult each extension&amp;rsquo;s documentation for installation, configuration, and usage instructions. Generally, extensions pull their own configuration from &lt;a href=&quot;../api/index#flask.Flask.config&quot;&gt;&lt;code&gt;app.config&lt;/code&gt;&lt;/a&gt; and are passed an application instance during initialization. For example, an extension called &amp;ldquo;Flask-Foo&amp;rdquo; might be used like this:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b026d758e9428598f6aaf36a47b70b8dfedc05ed" translate="yes" xml:space="preserve">
          <source>Contains the incoming request data as string in case it came with a mimetype Werkzeug does not handle.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1f0b9e7737dbe888e3c4a34fd9fec25e884beb80" translate="yes" xml:space="preserve">
          <source>Content Security Policy (CSP)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6fc861b80fe824989e2d975a178656a309350316" translate="yes" xml:space="preserve">
          <source>Context Locals</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2a0542c7f5eaeec1627aaad6d002f4c17c9f6284" translate="yes" xml:space="preserve">
          <source>Context Preservation on Error</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6c5f9260c7d70c6083c18687eebff6f32db22de3" translate="yes" xml:space="preserve">
          <source>Context Processors</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="90dd65cc4d3b83da255e787a77e65059063439b9" translate="yes" xml:space="preserve">
          <source>Context locals are implemented in Werkzeug. See &lt;a href=&quot;https://werkzeug.palletsprojects.com/en/1.0.x/local/&quot;&gt;Context Locals&lt;/a&gt; for more information on how this works internally.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6ebb48a164609ce25aedfcfad30fac45d4336901" translate="yes" xml:space="preserve">
          <source>Continue to &lt;a href=&quot;../installation/index#installation&quot;&gt;Installation&lt;/a&gt;, the &lt;a href=&quot;../quickstart/index#quickstart&quot;&gt;Quickstart&lt;/a&gt;, or the &lt;a href=&quot;../advanced_foreword/index#advanced-foreword&quot;&gt;Foreword for Experienced Programmers&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c505cafa4a88fb39a2a239f6bb9cede7184e1a26" translate="yes" xml:space="preserve">
          <source>Control whether the cookie is sent with every response when &lt;code&gt;session.permanent&lt;/code&gt; is true. Sending the cookie every time (the default) can more reliably keep the session from expiring, but uses more bandwidth. Non-permanent sessions are not affected.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b39861c919d6bf2ea971382a2f4f27b9be0c9ae8" translate="yes" xml:space="preserve">
          <source>Controlling Autoescaping</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ab2b5b4018ef91761be4bdc4e6684063ef9f1144" translate="yes" xml:space="preserve">
          <source>Convert a tagged representation back to the original type.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fc055a9c6e9a09ade4d48479eabb98ffd004e579" translate="yes" xml:space="preserve">
          <source>Convert a value to a tagged representation if necessary.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7a708d5af0cab331869a43d779c1cf37f1e403cd" translate="yes" xml:space="preserve">
          <source>Convert escaped markup back into a text string. This replaces HTML entities with the characters they represent.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="50d962a4bc191ec08e3a320c4a10035f2cf7526e" translate="yes" xml:space="preserve">
          <source>Convert the JSON representation back to the correct type. The tag will already be removed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6ed2a5a6e468b40adaf19a2de9ae3b4071ea6a00" translate="yes" xml:space="preserve">
          <source>Convert the Python object to an object that is a valid JSON type. The tag will be added later.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="290425dbe558478e9b2edeb4618bed65fb78985e" translate="yes" xml:space="preserve">
          <source>Convert the characters &amp;amp;, &amp;lt;, &amp;gt;, &amp;lsquo;, and &amp;rdquo; in string s to HTML-safe sequences. Use this if you need to display text that might contain such characters in HTML. Marks return value as markup string.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9beb4e678615ef953631294bcc81ba85a12fbd0c" translate="yes" xml:space="preserve">
          <source>Convert the return value from a view function to an instance of &lt;a href=&quot;#flask.Flask.response_class&quot;&gt;&lt;code&gt;response_class&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4ca78e500522dd9b7d9714d1bf5a33d4a828bee6" translate="yes" xml:space="preserve">
          <source>Convert the value to a valid JSON type and add the tag structure around it.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="01951bf0b553cf3fa14d183b90fda4a932d6af5a" translate="yes" xml:space="preserve">
          <source>Converter types:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8b8224aeef50fb6f2c89422b6f816ea0ad33cd27" translate="yes" xml:space="preserve">
          <source>Converting to Centralized URL Map</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a69346065c5fd101c06b40f99ba7f2259fcbf29e" translate="yes" xml:space="preserve">
          <source>Converts the class into an actual view function that can be used with the routing system. Internally this generates a function on the fly which will instantiate the &lt;a href=&quot;#flask.views.View&quot;&gt;&lt;code&gt;View&lt;/code&gt;&lt;/a&gt; on each request and call the &lt;a href=&quot;#flask.views.View.dispatch_request&quot;&gt;&lt;code&gt;dispatch_request()&lt;/code&gt;&lt;/a&gt; method on it.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="524cf50b5df5f29161c0600989922de48abede70" translate="yes" xml:space="preserve">
          <source>Cookies</source>
          <target state="translated">Cookies</target>
        </trans-unit>
        <trans-unit id="eeb7ec02d038601642aaf465827fa51f8d9042df" translate="yes" xml:space="preserve">
          <source>Copy/Paste to Terminal</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f3461a68c7c56e18955464730df3878d145abaf4" translate="yes" xml:space="preserve">
          <source>Core Signals</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2abf006838b6a0c15a7627b50e09b20403721261" translate="yes" xml:space="preserve">
          <source>Create a &lt;a href=&quot;#flask.ctx.RequestContext&quot;&gt;&lt;code&gt;RequestContext&lt;/code&gt;&lt;/a&gt; for a WSGI environment created from the given values. This is mostly useful during testing, where you may want to run a function that uses request data without dispatching a full request.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ebed2a8b4bca78ceee896ecc18fb30be0fcde705" translate="yes" xml:space="preserve">
          <source>Create a &lt;a href=&quot;#flask.ctx.RequestContext&quot;&gt;&lt;code&gt;RequestContext&lt;/code&gt;&lt;/a&gt; representing a WSGI environment. Use a &lt;code&gt;with&lt;/code&gt; block to push the context, which will make &lt;a href=&quot;#flask.request&quot;&gt;&lt;code&gt;request&lt;/code&gt;&lt;/a&gt; point at this request.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9a8ae20dcb469eff099677004f5d85897334936f" translate="yes" xml:space="preserve">
          <source>Create a &lt;code&gt;bootstrap&lt;/code&gt; command that initializes new servers. It could initialize a new virtual environment, setup apache appropriately etc.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="de2a4373e8091ad2a37f9bc4f94c091368f63ff6" translate="yes" xml:space="preserve">
          <source>Create a CLI runner for testing CLI commands. See &lt;a href=&quot;../testing/index#testing-cli&quot;&gt;Testing CLI Commands&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7b68c520797adb62152ba5d3e1988b421c07abdc" translate="yes" xml:space="preserve">
          <source>Create a new Apache config for &lt;code&gt;yourapplication&lt;/code&gt; and activate it. Make sure to activate watching for changes of the &lt;code&gt;.wsgi&lt;/code&gt; file so that we can automatically reload the application by touching it. (See &lt;a href=&quot;../../deploying/mod_wsgi/index#mod-wsgi-deployment&quot;&gt;mod_wsgi (Apache)&lt;/a&gt; for more information)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f43d8d7a820db4cff416112c527769a8fee403e2" translate="yes" xml:space="preserve">
          <source>Create a new request object based on the values provided. If environ is given missing values are filled from there. This method is useful for small scripts when you need to simulate a request from an URL. Do not use this method for unittesting, there is a full featured client object (&lt;code&gt;Client&lt;/code&gt;) that allows to create multipart requests, support for cookies etc.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3d7bab9c458c379d7fb6249f2afb7b8b4c407669" translate="yes" xml:space="preserve">
          <source>Create a project folder and a &lt;code&gt;venv&lt;/code&gt; folder within:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="870e698752801b694402df7b56aab507f6d080d1" translate="yes" xml:space="preserve">
          <source>Create an &lt;a href=&quot;#flask.ctx.AppContext&quot;&gt;&lt;code&gt;AppContext&lt;/code&gt;&lt;/a&gt;. Use as a &lt;code&gt;with&lt;/code&gt; block to push the context, which will make &lt;a href=&quot;#flask.current_app&quot;&gt;&lt;code&gt;current_app&lt;/code&gt;&lt;/a&gt; point at this application.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="da9089a1f4a11bdfe489309552073a0f2b060b49" translate="yes" xml:space="preserve">
          <source>Create an environment</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ef8cf0d2a4c22bfce0baca51da251526b0f8c83c" translate="yes" xml:space="preserve">
          <source>Create an instance of &lt;a href=&quot;../api/index#flask.cli.FlaskGroup&quot;&gt;&lt;code&gt;FlaskGroup&lt;/code&gt;&lt;/a&gt; and pass it the factory:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e013e65fe07005958c797116954bebd302c45d60" translate="yes" xml:space="preserve">
          <source>Create the Jinja environment based on &lt;a href=&quot;#flask.Flask.jinja_options&quot;&gt;&lt;code&gt;jinja_options&lt;/code&gt;&lt;/a&gt; and the various Jinja-related methods of the app. Changing &lt;a href=&quot;#flask.Flask.jinja_options&quot;&gt;&lt;code&gt;jinja_options&lt;/code&gt;&lt;/a&gt; after this will have no effect. Also adds Flask-related globals and filters to the environment.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="854368d3b9542c7d97c318defcbd2b02990fdc66" translate="yes" xml:space="preserve">
          <source>Create the directory structure in &lt;code&gt;/var/www&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="336b904a19a00a7d7ac124035b144a9e7ab7c7f7" translate="yes" xml:space="preserve">
          <source>Create your application in a function and register blueprints on it. That way you can create multiple instances of your application with different configurations attached which makes unit testing a lot easier. You can use this to pass in configuration as needed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8ce090f48340be4922123e27fd9ba47d0369102d" translate="yes" xml:space="preserve">
          <source>Creates a URL adapter for the given request. The URL adapter is created at a point where the request context is not yet set up so the request is passed explicitly.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cc8687bae264c1191540124b0569a9a5df1b1449" translate="yes" xml:space="preserve">
          <source>Creates a copy of this request context with the same request object. This can be used to move a request context to a different greenlet. Because the actual request object is the same this cannot be used to move a request context to a different thread unless access to the request object is locked.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ac93ab01aaa2c2f3dd00b4b63b0c93557bfb37ba" translate="yes" xml:space="preserve">
          <source>Creates a new instance of a missing session. Instead of overriding this method we recommend replacing the &lt;a href=&quot;#flask.Flask.session_interface&quot;&gt;&lt;code&gt;session_interface&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="028dc9433d732ea25eea04a22fa6db725b7572b8" translate="yes" xml:space="preserve">
          <source>Creates a new signal for this namespace if blinker is available, otherwise returns a fake signal that has a send method that will do nothing but will fail with a &lt;a href=&quot;https://docs.python.org/3/library/exceptions.html#RuntimeError&quot;&gt;&lt;code&gt;RuntimeError&lt;/code&gt;&lt;/a&gt; for all other operations, including connecting.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3ab65be4424372df58669ae5a8bf9bc812477dda" translate="yes" xml:space="preserve">
          <source>Creates a new user</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f7bd41e9945d17a28dbd056f9f039d22cab8674b" translate="yes" xml:space="preserve">
          <source>Creates a null session which acts as a replacement object if the real session support could not be loaded due to a configuration error. This mainly aids the user experience because the job of the null session is to still support lookup without complaining but modifications are answered with a helpful error message of what failed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2ff796e806cf79a41e686d4636ed79f3495b2738" translate="yes" xml:space="preserve">
          <source>Creates a test client for this application. For information about unit testing head over to &lt;a href=&quot;../testing/index#testing&quot;&gt;Testing Flask Applications&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b87f18af03ea7704172f0c3251bd0b772f8956db" translate="yes" xml:space="preserve">
          <source>Creates an instance of &lt;a href=&quot;#flask.blueprints.BlueprintSetupState&quot;&gt;&lt;code&gt;BlueprintSetupState()&lt;/code&gt;&lt;/a&gt; object that is later passed to the register callback functions. Subclasses can override this to return a subclass of the setup state.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c7efd9805b7736b6b91d776f8053202ff54a9a90" translate="yes" xml:space="preserve">
          <source>Creates or opens a new session. Default implementation stores all session data in a signed cookie. This requires that the &lt;a href=&quot;#flask.Flask.secret_key&quot;&gt;&lt;code&gt;secret_key&lt;/code&gt;&lt;/a&gt; is set. Instead of overriding this method we recommend replacing the &lt;a href=&quot;#flask.Flask.session_interface&quot;&gt;&lt;code&gt;session_interface&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="041bf2b2d80bfcbdac102121d31a4e295f48905d" translate="yes" xml:space="preserve">
          <source>Creates the form data parser. Instantiates the &lt;a href=&quot;#flask.Request.form_data_parser_class&quot;&gt;&lt;code&gt;form_data_parser_class&lt;/code&gt;&lt;/a&gt; with some parameters.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fde0d1b29a3024624d92a7809d8899dc3ec40a21" translate="yes" xml:space="preserve">
          <source>Creates the loader for the Jinja2 environment. Can be used to override just the loader and keeping the rest unchanged. It&amp;rsquo;s discouraged to override this function. Instead one should override the &lt;a href=&quot;#flask.Flask.jinja_loader&quot;&gt;&lt;code&gt;jinja_loader()&lt;/code&gt;&lt;/a&gt; function instead.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="863436689eb43379a9e4f7029b6c931b26d44eeb" translate="yes" xml:space="preserve">
          <source>Creating Data</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9cd4d0074e8513650af5927e8e1e57714ecdfec7" translate="yes" xml:space="preserve">
          <source>Creating Signals</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d3096a1bfadf6a5390a3c7740c99ab21db9b03bc" translate="yes" xml:space="preserve">
          <source>Creating a &lt;code&gt;.cgi&lt;/code&gt; file</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="202bcc9482ac6bf984de4291478aa2d4a7004ee5" translate="yes" xml:space="preserve">
          <source>Creating a &lt;code&gt;.fcgi&lt;/code&gt; file</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="94a061fab3866a644b0c2d14fbada1672a5b15d0" translate="yes" xml:space="preserve">
          <source>Creating a &lt;code&gt;.wsgi&lt;/code&gt; file</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3a27b9a2d33638ae440e5363720830105001a306" translate="yes" xml:space="preserve">
          <source>Creating a Request Context</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d6ced0e943066859c844636b504bf3f94ff33bb9" translate="yes" xml:space="preserve">
          <source>Creating an app context automatically creates this object, which is made available as the &lt;code&gt;g&lt;/code&gt; proxy.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="05b07ee63db417ba7d303d36fcb2d96c92e11b00" translate="yes" xml:space="preserve">
          <source>Creating the first Fabfile</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d787b2d10725662437f6f86883d39caada12487f" translate="yes" xml:space="preserve">
          <source>Cross site scripting is the concept of injecting arbitrary HTML (and with it JavaScript) into the context of a website. To remedy this, developers have to properly escape text so that it cannot include arbitrary HTML tags. For more information on that have a look at the Wikipedia article on &lt;a href=&quot;https://en.wikipedia.org/wiki/Cross-site_scripting&quot;&gt;Cross-Site Scripting&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="05c240d8789c5452e6ca247f3420096c06587e74" translate="yes" xml:space="preserve">
          <source>Cross-Site Request Forgery (CSRF)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ba6857199648fdaee3fe1fa91cacdbd4e4ff17bb" translate="yes" xml:space="preserve">
          <source>Cross-Site Scripting (XSS)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7dddf3e94824ffd47f9e62529e8c106117e275a8" translate="yes" xml:space="preserve">
          <source>Currently, the answer is HTML5. There are very few reasons to use XHTML considering the latest developments in Web browsers. To summarize the reasons given above:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c48e024e0cec2f563e6f2442f0eebafd432290c2" translate="yes" xml:space="preserve">
          <source>Custom Commands</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8394a6d089573458fed901e2364c860b5809ed9b" translate="yes" xml:space="preserve">
          <source>Custom Error Pages</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8c9e25b3af1b776210f9e25278b4a11354555c7b" translate="yes" xml:space="preserve">
          <source>Custom Scripts</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9f35b65543115d20435f84af5be5337feadd84ec" translate="yes" xml:space="preserve">
          <source>Custom converters can be defined using &lt;a href=&quot;#flask.Flask.url_map&quot;&gt;&lt;code&gt;flask.Flask.url_map&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c083af7b5668ed424a691c18119e1aa24da7ae0b" translate="yes" xml:space="preserve">
          <source>Debug Mode</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e72121a338fc7b9db56f12991bf684adceb7d477" translate="yes" xml:space="preserve">
          <source>Debug Note</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="62d49dcbef2e47ed15aa63da66ea451dc658c1fe" translate="yes" xml:space="preserve">
          <source>Debug mode will be enabled when &lt;code id=&quot;index-1&quot;&gt;FLASK_ENV&lt;/code&gt; is &lt;code&gt;development&lt;/code&gt;, as described above. If you want to control debug mode separately, use &lt;code id=&quot;index-2&quot;&gt;FLASK_DEBUG&lt;/code&gt;. The value &lt;code&gt;1&lt;/code&gt; enables it, &lt;code&gt;0&lt;/code&gt; disables it.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="895b27c88016513d278a0ce3dc0663fae3829d58" translate="yes" xml:space="preserve">
          <source>Debugging</source>
          <target state="translated">Debugging</target>
        </trans-unit>
        <trans-unit id="96aada265c8a0699251db13adc60ecf78db42adc" translate="yes" xml:space="preserve">
          <source>Debugging Application Errors</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3484c6fcb53ac09a3fead481f71e452bc3f9e097" translate="yes" xml:space="preserve">
          <source>Declarative</source>
          <target state="translated">Declarative</target>
        </trans-unit>
        <trans-unit id="40ada97aca7c427ad624f8966c42530cc9acd1d3" translate="yes" xml:space="preserve">
          <source>Declaring Dependencies</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d94b5ca8135fe0b34894cc18d8bac9aafb732ed0" translate="yes" xml:space="preserve">
          <source>Decorate a function as responder that accepts the request as the last argument. This works like the &lt;code&gt;responder()&lt;/code&gt; decorator but the function is passed the request object as the last argument and the request object will be closed automatically:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cd194692420ba01cba1b988fd42b55c02d21995f" translate="yes" xml:space="preserve">
          <source>Decorating Views</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e341d7a9fbac220ffb71b033c23032421c1e7dfb" translate="yes" xml:space="preserve">
          <source>Decorating a function with a blueprint creates a deferred function that is called with &lt;a href=&quot;#flask.blueprints.BlueprintSetupState&quot;&gt;&lt;code&gt;BlueprintSetupState&lt;/code&gt;&lt;/a&gt; when the blueprint is registered on an application.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fd4aca9db99281c3e1879e390dcbc6189c4b7bb5" translate="yes" xml:space="preserve">
          <source>Decorator Based Signal Subscriptions</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d7c410ed08cd649b4845058755d627f755f950e7" translate="yes" xml:space="preserve">
          <source>Default Configuration</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fe2d9e588dfbd6a7b3aec5fb15feab080a1d2aad" translate="yes" xml:space="preserve">
          <source>Default configuration parameters.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0196e5ded7a96507722ab400f335ed4fa4dab0ed" translate="yes" xml:space="preserve">
          <source>Default: &lt;code&gt;'/'&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a13c1ac0c60a19d13e7486d480e0f5c5ce7cf090" translate="yes" xml:space="preserve">
          <source>Default: &lt;code&gt;'application/json'&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d91f926bbe3d04172b9b3e28a0d30f56d5d053ee" translate="yes" xml:space="preserve">
          <source>Default: &lt;code&gt;'http'&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2e3dddbaa713ca4e8e5cae2e3e402c704e602fbb" translate="yes" xml:space="preserve">
          <source>Default: &lt;code&gt;'production'&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c643885940b09552f0b0175e6458362f165f9f66" translate="yes" xml:space="preserve">
          <source>Default: &lt;code&gt;'session'&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="25a9084be6987615bf532ff3db85aaec6121b192" translate="yes" xml:space="preserve">
          <source>Default: &lt;code&gt;False&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8e4f64360906e7f1452e75f1085dc507b2bff801" translate="yes" xml:space="preserve">
          <source>Default: &lt;code&gt;None&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3c8ca82e4a52fce1712b0adec6141e66b586eb41" translate="yes" xml:space="preserve">
          <source>Default: &lt;code&gt;True&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="beb221267bc5495a3520e52977fe13781d45641a" translate="yes" xml:space="preserve">
          <source>Default: &lt;code&gt;True&lt;/code&gt; if &lt;a href=&quot;#ENV&quot;&gt;&lt;code&gt;ENV&lt;/code&gt;&lt;/a&gt; is &lt;code&gt;'development'&lt;/code&gt;, or &lt;code&gt;False&lt;/code&gt; otherwise.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4456f9ce9edff337e01369e566a6661c91dff4d1" translate="yes" xml:space="preserve">
          <source>Default: &lt;code&gt;True&lt;/code&gt; if &lt;a href=&quot;#flask.Flask.env&quot;&gt;&lt;code&gt;env&lt;/code&gt;&lt;/a&gt; is &lt;code&gt;'development'&lt;/code&gt;, or &lt;code&gt;False&lt;/code&gt; otherwise.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="571c9fa10a1cc419710c9227bca9459a764c992b" translate="yes" xml:space="preserve">
          <source>Default: &lt;code&gt;timedelta(days=31)&lt;/code&gt; (&lt;code&gt;2678400&lt;/code&gt; seconds)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d6f2eb0c347d29cd4fd0435471c2569489ab32c2" translate="yes" xml:space="preserve">
          <source>Default: &lt;code&gt;timedelta(hours=12)&lt;/code&gt; (&lt;code&gt;43200&lt;/code&gt; seconds)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3d6aee6c0e5f8e0c705a9c27ff500a7721719d95" translate="yes" xml:space="preserve">
          <source>Deferred Request Callbacks</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4191bbaa7c7ebba7b680dfcab193f76a3d7a5c0f" translate="yes" xml:space="preserve">
          <source>Define and Access the Database</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a6b009cac3c163d53b16bcba6adb508af0eb0e03" translate="yes" xml:space="preserve">
          <source>Define the entry point in &lt;code&gt;setup.py&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2b51ad281f3faf1267f0540a1afb8a394f48164a" translate="yes" xml:space="preserve">
          <source>Deletes a single user</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0562f32dc56f5c702810cbe010068ddd38dbd69a" translate="yes" xml:space="preserve">
          <source>Dependencies</source>
          <target state="translated">Dependencies</target>
        </trans-unit>
        <trans-unit id="a1b177b6f8cc8ec01616fc9e6645549a9600faef" translate="yes" xml:space="preserve">
          <source>Dependencies are declared in the &lt;code&gt;install_requires&lt;/code&gt; parameter as a list. Each item in that list is the name of a package that should be pulled from PyPI on installation. By default it will always use the most recent version, but you can also provide minimum and maximum version requirements. Here some examples:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aaf21660cc95d75cb418b238525459c62d0c2505" translate="yes" xml:space="preserve">
          <source>Depending on the error code it is less or more likely for the user to actually see such an error.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="01ecf467a026bf549b4931105862e9c223ea4863" translate="yes" xml:space="preserve">
          <source>Depending on the situation, an extension may choose to log to &lt;a href=&quot;../api/index#flask.Flask.logger&quot;&gt;&lt;code&gt;app.logger&lt;/code&gt;&lt;/a&gt; or its own named logger. Consult each extension&amp;rsquo;s documentation for details.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c652187dd8316dd7a76a32708cb4494136883efc" translate="yes" xml:space="preserve">
          <source>Depending on your API design, you may want to create JSON responses for types other than &lt;code&gt;dict&lt;/code&gt;. In that case, use the &lt;a href=&quot;../api/index#flask.json.jsonify&quot;&gt;&lt;code&gt;jsonify()&lt;/code&gt;&lt;/a&gt; function, which will serialize any supported JSON data type. Or look into Flask community extensions that support more complex applications.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e9f08b8f7e5ce8a1a056e1249da425838703f241" translate="yes" xml:space="preserve">
          <source>Depending on your project, it may be more useful to configure each logger you care about separately, instead of configuring only the root logger.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="533dc0526c50ec24defb1ea5ab54b0509d86a95a" translate="yes" xml:space="preserve">
          <source>Deploy to Production</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b9b08c85a94085816dfb4720d4c9df97093e04ec" translate="yes" xml:space="preserve">
          <source>Deploying Flask on AWS Elastic Beanstalk</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2b0ffd5f37a8e9660897e0f7d112a6c40d925769" translate="yes" xml:space="preserve">
          <source>Deploying Flask on Google App Engine</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dbff7693aad1b9d465dbd0bb656ce387fc8779dc" translate="yes" xml:space="preserve">
          <source>Deploying Flask on Heroku</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="14242242a003a494052717e6e1bba4c8abf020e2" translate="yes" xml:space="preserve">
          <source>Deploying on Azure (IIS)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="70dbd20fa74dccd549d1baddd83c6a217514f65a" translate="yes" xml:space="preserve">
          <source>Deploying on PythonAnywhere</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="830c35dde7b610b59d255bfb3ce6abf83a826b0f" translate="yes" xml:space="preserve">
          <source>Deploying to a Web Server</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="563685d42d790a91c34cd04871b91d18df903b8f" translate="yes" xml:space="preserve">
          <source>Deploying with Fabric</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ed48d82f7f3c3c94b230372cdc032df5a5a542a2" translate="yes" xml:space="preserve">
          <source>Deploying with Setuptools</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="75ea0f0f131646beaae8a786a5660a123ed0f564" translate="yes" xml:space="preserve">
          <source>Deployment Options</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="55f8ebc805e65b5b71ddafdae390e3be2bcd69af" translate="yes" xml:space="preserve">
          <source>Description</source>
          <target state="translated">Description</target>
        </trans-unit>
        <trans-unit id="f990604e5b5c7d7f580485e30d099b2729ecdf3e" translate="yes" xml:space="preserve">
          <source>Deserialize an object from a JSON-formatted string &lt;code&gt;s&lt;/code&gt;. If there is an app context pushed, use the current app&amp;rsquo;s configured decoder (&lt;a href=&quot;#flask.Flask.json_decoder&quot;&gt;&lt;code&gt;json_decoder&lt;/code&gt;&lt;/a&gt;), or fall back to the default &lt;a href=&quot;#flask.json.JSONDecoder&quot;&gt;&lt;code&gt;JSONDecoder&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7cb641b314418aeef441ea38e15fa297d758c2e0" translate="yes" xml:space="preserve">
          <source>Design Decisions in Flask</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8507bcec67aeb78c726b1d36b017e6b903cc4a33" translate="yes" xml:space="preserve">
          <source>Design notes, legal information and changelog are here for the interested.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ccf6f64343c2a95ab78e3f2145ceebadea0cfd83" translate="yes" xml:space="preserve">
          <source>Develop for the Web with Caution</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8a5788dc39a5268cde4953004c367427a99a7b40" translate="yes" xml:space="preserve">
          <source>Development / Production</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fc4a596c61c8ff4265a0bdc8aec42adf91ae57e8" translate="yes" xml:space="preserve">
          <source>Development Server</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9670c1a01b1a6d40746a2c8343271f9640fbfa2e" translate="yes" xml:space="preserve">
          <source>Development of the HTML5 specification was started in 2004 under the name &amp;ldquo;Web Applications 1.0&amp;rdquo; by the Web Hypertext Application Technology Working Group, or WHATWG (which was formed by the major browser vendors Apple, Mozilla, and Opera) with the goal of writing a new and improved HTML specification, based on existing browser behavior instead of unrealistic and backwards-incompatible specifications.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ef9a4fd3c12913b8d8f2d5b2f1e144d211e3fafb" translate="yes" xml:space="preserve">
          <source>Did you know that there the &amp;ldquo;404 Not Found&amp;rdquo; has a brother named &amp;ldquo;410 Gone&amp;rdquo;? Few people actually implement that, but the idea is that resources that previously existed and got deleted answer with 410 instead of 404. If you are not deleting documents permanently from the database but just mark them as deleted, do the user a favour and use the 410 code instead and display a message that what they were looking for was deleted for all eternity.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b7cfdfb49228eda86de24ebe3696407b0d6c6e25" translate="yes" xml:space="preserve">
          <source>Different python interpreters being used.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5ba9dcf4a6a6670d6de1f01c5deed27e08f2d463" translate="yes" xml:space="preserve">
          <source>Directories are scanned upwards from the directory you call &lt;code&gt;flask&lt;/code&gt; from to locate the files. The current working directory will be set to the location of the file, with the assumption that that is the top level project directory.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b667a1c66d5fa69a50f25506bc59090a2f81efa2" translate="yes" xml:space="preserve">
          <source>Disable dotenv</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ab40562d520188596aaf09cf4f5b86a2fcb3b834" translate="yes" xml:space="preserve">
          <source>Discuss with the community.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="34ff714bcb6da41d123d435181e70985ef355030" translate="yes" xml:space="preserve">
          <source>Dispatch by Path</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3bb8c5635612d55af5fbbbefbf96898c39ba711a" translate="yes" xml:space="preserve">
          <source>Dispatch by Subdomain</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d3b20052c385d5404f447adadfc45f0606d318a3" translate="yes" xml:space="preserve">
          <source>Dispatches the request and on top of that performs request pre and postprocessing as well as HTTP exception catching and error handling.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0b660a569f6b30711fc4ac343f925947ba3e446c" translate="yes" xml:space="preserve">
          <source>Dispatching by a path on the URL is very similar. Instead of looking at the &lt;code&gt;Host&lt;/code&gt; header to figure out the subdomain one simply looks at the request path up to the first slash:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4b27420a0ae855b3dcdc4b7f6a5fe47e87132383" translate="yes" xml:space="preserve">
          <source>Distributing Resources</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="911ab07ce036d8f4bc4c14a11044214831727c88" translate="yes" xml:space="preserve">
          <source>Do not attempt to use this class directly, instead use &lt;a href=&quot;#flask.Flask.test_request_context&quot;&gt;&lt;code&gt;test_request_context()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#flask.Flask.request_context&quot;&gt;&lt;code&gt;request_context()&lt;/code&gt;&lt;/a&gt; to create this object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7fdd40ec4deccd052c514dab94a0af1148a2ecf3" translate="yes" xml:space="preserve">
          <source>Do not enable &lt;a href=&quot;../config/index#PRESERVE_CONTEXT_ON_EXCEPTION&quot;&gt;&lt;code&gt;PRESERVE_CONTEXT_ON_EXCEPTION&lt;/code&gt;&lt;/a&gt; in production, as it will cause your application to leak memory on exceptions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="01deec9759baa67e1c18ed860d661a89f3bb8d63" translate="yes" xml:space="preserve">
          <source>Do not use &lt;code&gt;run()&lt;/code&gt; in a production setting. It is not intended to meet security and performance requirements for a production server. Instead, see &lt;a href=&quot;../deploying/index#deployment&quot;&gt;Deployment Options&lt;/a&gt; for WSGI server recommendations.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="125de58a9d457e204e1db1b20b98b0dde0c104c6" translate="yes" xml:space="preserve">
          <source>Do not use this command to run your application in production. Only use the development server during development. The development server is provided for convenience, but is not designed to be particularly secure, stable, or efficient. See &lt;a href=&quot;../deploying/index#deployment&quot;&gt;Deployment Options&lt;/a&gt; for how to run in production.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eb1784d1ac210f6e089f70f257f9ade70aeff6d2" translate="yes" xml:space="preserve">
          <source>Do not write code that needs the configuration at import time. If you limit yourself to request-only accesses to the configuration you can reconfigure the object later on as needed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a948b285d32a20eeb02885fbe2180dc20b88a0a8" translate="yes" xml:space="preserve">
          <source>Do you know where your application is? If you are developing the answer is quite simple: it&amp;rsquo;s on localhost port something and directly on the root of that server. But what if you later decide to move your application to a different location? For example to &lt;code&gt;http://example.com/myapp&lt;/code&gt;? On the server side this never was a problem because we were using the handy &lt;a href=&quot;../../api/index#flask.url_for&quot;&gt;&lt;code&gt;url_for()&lt;/code&gt;&lt;/a&gt; function that could answer that question for us, but if we are using jQuery we should not hardcode the path to the application but make that dynamic, so how can we do that?</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4f9095933912561f96f6400b90f6ef8100c5b8bc" translate="yes" xml:space="preserve">
          <source>Docstrings</source>
          <target state="translated">Docstrings</target>
        </trans-unit>
        <trans-unit id="9e9cf3221a30246219863f1d2366e36cb580debc" translate="yes" xml:space="preserve">
          <source>Documentation</source>
          <target state="translated">Documentation</target>
        </trans-unit>
        <trans-unit id="a40486d9b2f45f1bf8c19541879932a4c01ddbf6" translate="yes" xml:space="preserve">
          <source>Does the request dispatching. Matches the URL and returns the return value of the view or error handler. This does not have to be a response object. In order to convert the return value to a proper response object, call &lt;a href=&quot;#flask.make_response&quot;&gt;&lt;code&gt;make_response()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dc29792391a5089c5d49b05658acb8eef08967a1" translate="yes" xml:space="preserve">
          <source>Don&amp;rsquo;t forget that even if you enlist them in your &lt;code&gt;MANIFEST.in&lt;/code&gt; file, they won&amp;rsquo;t be installed for you unless you set the &lt;code&gt;include_package_data&lt;/code&gt; parameter of the &lt;code&gt;setup&lt;/code&gt; function to &lt;code&gt;True&lt;/code&gt;!</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="693a4c9e9a89655d0fae73a1e439d27103b053b2" translate="yes" xml:space="preserve">
          <source>Don&amp;rsquo;t pop the request context when an exception occurs. If not set, this is true if &lt;code&gt;DEBUG&lt;/code&gt; is true. This allows debuggers to introspect the request data on errors, and should normally not need to be set directly.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ddb78e099c7cece323a2fce684442682d15b4c58" translate="yes" xml:space="preserve">
          <source>Don&amp;rsquo;t read more than this many bytes from the incoming request data. If not set and the request does not specify a &lt;code&gt;CONTENT_LENGTH&lt;/code&gt;, no data will be read for security.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6d2948b288465419591697ee1c77d7daba99dc87" translate="yes" xml:space="preserve">
          <source>Due to the implicit self from the caller&amp;rsquo;s perspective you cannot use regular view decorators on the individual methods of the view however, keep this in mind.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e19f23432479b65facd9f7df1b58d14d2bbf7832" translate="yes" xml:space="preserve">
          <source>During a request, every call to &lt;code&gt;get_db()&lt;/code&gt; will return the same connection, and it will be closed automatically at the end of the request.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="003213e2a7a3322a29b606d17f754043f166faa9" translate="yes" xml:space="preserve">
          <source>During setup, the &lt;code&gt;TESTING&lt;/code&gt; config flag is activated. What this does is disable error catching during request handling, so that you get better error reports when performing test requests against the application.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="08485b8831a37d7ae6c20cf92647a5dc253fcc94" translate="yes" xml:space="preserve">
          <source>During testing, it can be useful to defer popping the contexts after the request ends, so that their data can be accessed in the test function. Use the &lt;a href=&quot;../api/index#flask.Flask.test_client&quot;&gt;&lt;code&gt;test_client()&lt;/code&gt;&lt;/a&gt; as a &lt;code&gt;with&lt;/code&gt; block to preserve the contexts until the &lt;code&gt;with&lt;/code&gt; block exits.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b6d16064f47fdc6d3948fcd18a134b1cd48c5ad2" translate="yes" xml:space="preserve">
          <source>Dynamic web applications also need static files. That&amp;rsquo;s usually where the CSS and JavaScript files are coming from. Ideally your web server is configured to serve them for you, but during development Flask can do that as well. Just create a folder called &lt;code&gt;static&lt;/code&gt; in your package or next to your module and it will be available at &lt;code&gt;/static&lt;/code&gt; on the application.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="199dd57b3df32b49f721b7342203a332300e1df2" translate="yes" xml:space="preserve">
          <source>ECMAScript 5 closed this vulnerability, so only extremely old browsers are still vulnerable. All of these browsers have &lt;a href=&quot;https://github.com/pallets/flask/issues/248#issuecomment-59934857&quot;&gt;other more serious vulnerabilities&lt;/a&gt;, so this behavior was changed and &lt;code&gt;jsonify()&lt;/code&gt; now supports serializing arrays.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f35a0a66536c1eb098c32ac6bdc33d97f387d051" translate="yes" xml:space="preserve">
          <source>ETags will also be attached automatically if a &lt;code&gt;filename&lt;/code&gt; is provided. You can turn this off by setting &lt;code&gt;add_etags=False&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ceb77775b90d60af0c851ed8bb9f46c38ba61508" translate="yes" xml:space="preserve">
          <source>Each &lt;code&gt;yield&lt;/code&gt; expression is directly sent to the browser. Note though that some WSGI middlewares might break streaming, so be careful there in debug environments with profilers and other things you might have enabled.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b826677f1ad0530922f6b5cad107cb853697ed88" translate="yes" xml:space="preserve">
          <source>Each of the techniques and examples below results in an &lt;code&gt;application&lt;/code&gt; object that can be run with any WSGI server. For production, see &lt;a href=&quot;../../deploying/index#deployment&quot;&gt;Deployment Options&lt;/a&gt;. For development, Werkzeug provides a builtin server for development available at &lt;a href=&quot;https://werkzeug.palletsprojects.com/en/1.0.x/serving/#werkzeug.serving.run_simple&quot;&gt;&lt;code&gt;werkzeug.serving.run_simple()&lt;/code&gt;&lt;/a&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5e0ac6815d3759a08b5026277eda8940c5c056ac" translate="yes" xml:space="preserve">
          <source>Eager to get started? This page gives a good introduction to Flask. It assumes you already have Flask installed. If you do not, head over to the &lt;a href=&quot;../installation/index#installation&quot;&gt;Installation&lt;/a&gt; section.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c537ae89dce66ac276f4bd6c238b3267cc4d0b44" translate="yes" xml:space="preserve">
          <source>Easy Querying</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1bf78e9414fd1146a27d6d0673c1e70798519c19" translate="yes" xml:space="preserve">
          <source>Either &lt;code&gt;(body, status, headers)&lt;/code&gt;, &lt;code&gt;(body, status)&lt;/code&gt;, or &lt;code&gt;(body, headers)&lt;/code&gt;, where &lt;code&gt;body&lt;/code&gt; is any of the other types allowed here, &lt;code&gt;status&lt;/code&gt; is a string or an integer, and &lt;code&gt;headers&lt;/code&gt; is a dictionary or a list of &lt;code&gt;(key, value)&lt;/code&gt; tuples. If &lt;code&gt;body&lt;/code&gt; is a &lt;a href=&quot;#flask.Flask.response_class&quot;&gt;&lt;code&gt;response_class&lt;/code&gt;&lt;/a&gt; instance, &lt;code&gt;status&lt;/code&gt; overwrites the exiting value and &lt;code&gt;headers&lt;/code&gt; are extended.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a9bd113dee92cff6478e76925b5a67562d2dc854" translate="yes" xml:space="preserve">
          <source>Either way, in our case here we only expect one or two servers and we can upload them ahead of time by hand.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="84fcecf06a1fe81abdca7fbff69090fc1250bd41" translate="yes" xml:space="preserve">
          <source>Either you can fill the config from a config file:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0d16fecec3b8ea720b4da2d2377ee01375c7c95a" translate="yes" xml:space="preserve">
          <source>Emacs: either use an encoding cookie or put this into your &lt;code&gt;.emacs&lt;/code&gt; file:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7f76c2025c37b59dda0f6fc1db7ebf6a6d237087" translate="yes" xml:space="preserve">
          <source>Email Errors to Admins</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="533a75753c90c3ededa9f4e61b72e9f3077ca942" translate="yes" xml:space="preserve">
          <source>Enable testing mode. Exceptions are propagated rather than handled by the the app&amp;rsquo;s error handlers. Extensions may also change their behavior to facilitate easier testing. You should enable this in your own tests.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b78b3978b94aceb057e4f8fadc5d43173e0dd23c" translate="yes" xml:space="preserve">
          <source>Enable this if you want to use the X-Sendfile feature. Keep in mind that the server has to support this. This only affects files sent with the &lt;a href=&quot;#flask.send_file&quot;&gt;&lt;code&gt;send_file()&lt;/code&gt;&lt;/a&gt; method.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1a12430ea5f508d50caa84d035c740c51c7c2f5a" translate="yes" xml:space="preserve">
          <source>Encoding and Decoding Yourself</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eeb4cd7ae37c8ec6b52e9c5df704488228c5e0ca" translate="yes" xml:space="preserve">
          <source>Endpoint Decorator</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="83ad3ca88d08cf0032b025e03ebc5f8c912823af" translate="yes" xml:space="preserve">
          <source>Environment Variables From dotenv</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c9cb81cb79b42acef70ba280d65e3c93920d2264" translate="yes" xml:space="preserve">
          <source>Environment Variables From virtualenv</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="05b5e4f8dac95635fa6818c0539b686d5dc44abe" translate="yes" xml:space="preserve">
          <source>Environment and Debug Features</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="308558adc2a5b3e3613035109b0c936cd6490357" translate="yes" xml:space="preserve">
          <source>Environment variables can be set on Linux or OS X with the export command in the shell before starting the server:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="017b53c42e43b39e1f5aabf6f7280c2f777243a2" translate="yes" xml:space="preserve">
          <source>Environments</source>
          <target state="translated">Environments</target>
        </trans-unit>
        <trans-unit id="d3e856491e1bc6fd30d79529b1024eb08ed1e4e9" translate="yes" xml:space="preserve">
          <source>Error Handlers</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e1eb3543d668adf6c024d2ed49c60f9dbfc782ef" translate="yes" xml:space="preserve">
          <source>Error Logging Tools</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="20791d12fa1fa30a50ea85f3ef8663e6597d50fb" translate="yes" xml:space="preserve">
          <source>Error handlers</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cdec94d9930dba7a87a9bceae416a8ba3c2f134b" translate="yes" xml:space="preserve">
          <source>Error handlers still respect the exception class hierarchy. If you register handlers for both &lt;code&gt;HTTPException&lt;/code&gt; and &lt;code&gt;Exception&lt;/code&gt;, the &lt;code&gt;Exception&lt;/code&gt; handler will not handle &lt;code&gt;HTTPException&lt;/code&gt; subclasses because it the &lt;code&gt;HTTPException&lt;/code&gt; handler is more specific.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d6f999f23354f1683e1429a3f7e63d1347345781" translate="yes" xml:space="preserve">
          <source>Errors in Custom Scripts</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5c61080c98ba61644c790d949caea6eb75a8fd94" translate="yes" xml:space="preserve">
          <source>Escape a string. Calls &lt;a href=&quot;#flask.escape&quot;&gt;&lt;code&gt;escape()&lt;/code&gt;&lt;/a&gt; and ensures that for subclasses the correct type is returned.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="90faedadf6cbc4354ba5bacea10f95f826641a56" translate="yes" xml:space="preserve">
          <source>Even though it did not run any actual tests, we already know that our &lt;code&gt;flaskr&lt;/code&gt; application is syntactically valid, otherwise the import would have died with an exception.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0753b4da3377b81eb95a865215d8cb1d2b964acf" translate="yes" xml:space="preserve">
          <source>Even though the interactive debugger does not work in forking environments (which makes it nearly impossible to use on production servers), it still allows the execution of arbitrary code. This makes it a major security risk and therefore it &lt;strong&gt;must never be used on production machines&lt;/strong&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a92872ebe335af81d26aa88871bec3597972f12e" translate="yes" xml:space="preserve">
          <source>Events and Signals</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7ac625818b3b1271f433452ffc81e8203b2f86a6" translate="yes" xml:space="preserve">
          <source>Every Python programmer hates them, and yet we just added some: circular imports (That&amp;rsquo;s when two modules depend on each other. In this case &lt;code&gt;views.py&lt;/code&gt; depends on &lt;code&gt;__init__.py&lt;/code&gt;). Be advised that this is a bad idea in general but here it is actually fine. The reason for this is that we are not actually using the views in &lt;code&gt;__init__.py&lt;/code&gt; and just ensuring the module is imported and we are doing that at the bottom of the file.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6bc4454be1928e28629ba6f372fa6357c111ba06" translate="yes" xml:space="preserve">
          <source>Example of module-based configuration:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3f8ab7311cf060a7b36d8e4837e43ee7a62c9296" translate="yes" xml:space="preserve">
          <source>Example subscriber:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="48de07fa94f40329fbebd9e57597d46bb49db0e2" translate="yes" xml:space="preserve">
          <source>Example usage for both:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5ab7721397827b925456d2a147cb5704105a62a7" translate="yes" xml:space="preserve">
          <source>Example usage:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c63737abd7347a7ae582cb9fbdf37d6c0e5b251e" translate="yes" xml:space="preserve">
          <source>Example:</source>
          <target state="translated">Example:</target>
        </trans-unit>
        <trans-unit id="29a9028915cca93417a879c1813bb5cd5c9e844e" translate="yes" xml:space="preserve">
          <source>Exceptions are re-raised rather than being handled by the app&amp;rsquo;s error handlers. If not set, this is implicitly true if &lt;code&gt;TESTING&lt;/code&gt; or &lt;code&gt;DEBUG&lt;/code&gt; is enabled.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="49ff9a3fdca032ed4d98fc6ac3021c2e22c955b1" translate="yes" xml:space="preserve">
          <source>Executes a function after this request. This is useful to modify response objects. The function is passed the response object and has to return the same or a new one.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="52fb03d0b6df9c8675509ec8b43832cdc59a1263" translate="yes" xml:space="preserve">
          <source>Expands a basic dictionary with session attributes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d39cea4c06ebe8e64c3c9b00c20aef174e194ea9" translate="yes" xml:space="preserve">
          <source>Expressions and Statements</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="656bcfe284e2da39c77d4fdab55b16ad3c654719" translate="yes" xml:space="preserve">
          <source>Extensions</source>
          <target state="translated">Extensions</target>
        </trans-unit>
        <trans-unit id="5a850c4a7f6071878c684e309ff4b1fdae68c1ee" translate="yes" xml:space="preserve">
          <source>Extensions are extra packages that add functionality to a Flask application. For example, an extension might add support for sending email or connecting to a database. Some extensions add entire new frameworks to help build certain types of applications, like a REST API.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="35ef9e0d39d36c86e46287c793b6a8163c6f6a6d" translate="yes" xml:space="preserve">
          <source>Extensions are packages that help you accomplish common tasks. For example, Flask-SQLAlchemy provides SQLAlchemy support that makes it simple and easy to use with Flask.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ff127d5b1010f9f82f3ec88e10ac79ec202051bb" translate="yes" xml:space="preserve">
          <source>Externally Visible Server</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="49bd1f7bce33a8da223ea7ca046f470b719fc306" translate="yes" xml:space="preserve">
          <source>Fabric 1.0 has to be installed locally. This tutorial assumes the latest version of Fabric.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="42efac530815d6792637c25ea08f41c3f7ddf65d" translate="yes" xml:space="preserve">
          <source>Fabric will now connect to all servers and run the commands as written down in the fabfile. First it will execute pack so that we have our tarball ready and then it will execute deploy and upload the source code to all servers and install it there. Thanks to the &lt;code&gt;setup.py&lt;/code&gt; file we will automatically pull in the required libraries into our virtual environment.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="19d28ee5c651574f219b3b7f8ecbfc5eddc2f232" translate="yes" xml:space="preserve">
          <source>Factor an application into a set of blueprints. This is ideal for larger applications; a project could instantiate an application object, initialize several extensions, and register a collection of blueprints.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ab8a69ff145a8161b2fb1bf4d78c1f5dfb69c533" translate="yes" xml:space="preserve">
          <source>Factories &amp;amp; Extensions</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8a92039eca1d52ebb1bbdc830e32a1822033e488" translate="yes" xml:space="preserve">
          <source>Factory Improvements</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e5703e970a05a2a2783a34de47e138b96e238231" translate="yes" xml:space="preserve">
          <source>Faking Resources and Context</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e3a5a0bdbde438449796dfbadacba89a6f5afbcf" translate="yes" xml:space="preserve">
          <source>FastCGI</source>
          <target state="translated">FastCGI</target>
        </trans-unit>
        <trans-unit id="3a55b4118364b95e5543633d3422a67be3b5ca5e" translate="yes" xml:space="preserve">
          <source>FastCGI deployments tend to be hard to debug on most web servers. Very often the only thing the server log tells you is something along the lines of &amp;ldquo;premature end of headers&amp;rdquo;. In order to debug the application the only thing that can really give you ideas why it breaks is switching to the correct user and executing the application by hand.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="31d8fd1a5fa75a518320fca490223d3265a21c5b" translate="yes" xml:space="preserve">
          <source>FastCGI is a deployment option on servers like &lt;a href=&quot;https://nginx.org/&quot;&gt;nginx&lt;/a&gt;, &lt;a href=&quot;https://www.lighttpd.net/&quot;&gt;lighttpd&lt;/a&gt;, and &lt;a href=&quot;http://cherokee-project.com/&quot;&gt;cherokee&lt;/a&gt;; see &lt;a href=&quot;../uwsgi/index&quot;&gt;uWSGI&lt;/a&gt; and &lt;a href=&quot;../wsgi-standalone/index&quot;&gt;Standalone WSGI Containers&lt;/a&gt; for other options. To use your WSGI application with any of them you will need a FastCGI server first. The most popular one is &lt;a href=&quot;https://pypi.org/project/flup/&quot;&gt;flup&lt;/a&gt; which we will use for this guide. Make sure to have it installed to follow along.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c09ab9ea91985578fea6798c7cff8723d2b9441b" translate="yes" xml:space="preserve">
          <source>File Uploads</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b4051ead58df2934293cc3ebbd08435e33e52795" translate="yes" xml:space="preserve">
          <source>Filter the flashed messages to one or more categories by providing those categories in &lt;code&gt;category_filter&lt;/code&gt;. This allows rendering categories in separate html blocks. The &lt;code&gt;with_categories&lt;/code&gt; and &lt;code&gt;category_filter&lt;/code&gt; arguments are distinct:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6312251a367ac7a0f52a5fbb72985571982b28cc" translate="yes" xml:space="preserve">
          <source>Filtering Flash Messages</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2d0017e9d51524cb3c6e068a73ecbb9611619463" translate="yes" xml:space="preserve">
          <source>Finding Extensions</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9698dff9608cc2d365b7ec76ba76253b42ece6b4" translate="yes" xml:space="preserve">
          <source>Firing Before/After Request</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2787e5842e17571de57f71d1b139e63963085bd5" translate="yes" xml:space="preserve">
          <source>First Deployment</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="45323d3473ef62b5b0e0ed5e05f9a86b189e7442" translate="yes" xml:space="preserve">
          <source>First we imported the &lt;a href=&quot;../api/index#flask.Flask&quot;&gt;&lt;code&gt;Flask&lt;/code&gt;&lt;/a&gt; class. An instance of this class will be our WSGI application.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7ed54dfcd30b6e2c6dec64cf59275915b6ed6381" translate="yes" xml:space="preserve">
          <source>First you need to create the CGI application file. Let&amp;rsquo;s call it &lt;code&gt;yourapplication.cgi&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4f86b142381e8923b00fe6d89c7fd087fb7c679f" translate="yes" xml:space="preserve">
          <source>First you need to create the FastCGI server file. Let&amp;rsquo;s call it &lt;code&gt;yourapplication.fcgi&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a2d94730c89b0f9f5654afd730e5a7357a7bb538" translate="yes" xml:space="preserve">
          <source>First, we need an application to test; we will use the application from the &lt;a href=&quot;https://flask.palletsprojects.com/en/1.1.x/tutorial/#tutorial&quot;&gt;Tutorial&lt;/a&gt;. If you don&amp;rsquo;t have that application yet, get the source code from &lt;a href=&quot;https://github.com/pallets/flask/tree/1.1.2/examples/tutorial&quot;&gt;the examples&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3a1237103746170aadab1582b59ffdcd5fce3033" translate="yes" xml:space="preserve">
          <source>Flashes a message to the next request. In order to remove the flashed message from the session and to display it to the user, the template has to call &lt;a href=&quot;#flask.get_flashed_messages&quot;&gt;&lt;code&gt;get_flashed_messages()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cd7933a74919977ce76e10d0054fc9b1128c8839" translate="yes" xml:space="preserve">
          <source>Flashing With Categories</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="184857a3477425828543a9f61fa5ec27aef8247f" translate="yes" xml:space="preserve">
          <source>Flask 0.7 introduces pluggable views inspired by the generic views from Django which are based on classes instead of functions. The main intention is that you can replace parts of the implementations and this way have customizable pluggable views.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d66f673bd05f637408e454ade54d953e23dde2ef" translate="yes" xml:space="preserve">
          <source>Flask 0.7 introduces the concept of URL processors. The idea is that you might have a bunch of resources with common parts in the URL that you don&amp;rsquo;t always explicitly want to provide. For instance you might have a bunch of URLs that have the language code in it but you don&amp;rsquo;t want to have to handle it in every single function yourself.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7336a5940cd7eaef29da9c7ed83389ae8a483e2c" translate="yes" xml:space="preserve">
          <source>Flask 0.8 introduces instance folders. Flask for a long time made it possible to refer to paths relative to the application&amp;rsquo;s folder directly (via &lt;code&gt;Flask.root_path&lt;/code&gt;). This was also how many developers loaded configurations stored next to the application. Unfortunately however this only works well if applications are not packages in which case the root path refers to the contents of the package.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6ca6e322ef9508c8f852221cb04dda494cc4c884" translate="yes" xml:space="preserve">
          <source>Flask Extension Development</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="db5cc1c927a8222d5daadad778e1c2e919b49f45" translate="yes" xml:space="preserve">
          <source>Flask Extensions</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="121515282ba7b4b45588478efeb96caa28c7733d" translate="yes" xml:space="preserve">
          <source>Flask automatically &lt;em&gt;pushes&lt;/em&gt; a request context when handling a request. View functions, error handlers, and other functions that run during a request will have access to the &lt;a href=&quot;../api/index#flask.request&quot;&gt;&lt;code&gt;request&lt;/code&gt;&lt;/a&gt; proxy, which points to the request object for the current request.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a8cf751ea16e9e36c28dac408c8275133b72b565" translate="yes" xml:space="preserve">
          <source>Flask automatically &lt;em&gt;pushes&lt;/em&gt; an application context when handling a request. View functions, error handlers, and other functions that run during a request will have access to &lt;a href=&quot;../api/index#flask.current_app&quot;&gt;&lt;code&gt;current_app&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2ebd986d793a85d37fb76d52f22349000a17f808" translate="yes" xml:space="preserve">
          <source>Flask can be used to serve Single-Page Applications (SPA) by placing static files produced by your frontend framework in a subfolder inside of your project. You will also need to create a catch-all endpoint that routes all requests to your SPA.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="962535d28a565e89a4b72774e6dead5c9009a579" translate="yes" xml:space="preserve">
          <source>Flask comes with a couple of signals and other extensions might provide more. Also keep in mind that signals are intended to notify subscribers and should not encourage subscribers to modify data. You will notice that there are signals that appear to do the same thing like some of the builtin decorators do (eg: &lt;a href=&quot;../api/index#flask.request_started&quot;&gt;&lt;code&gt;request_started&lt;/code&gt;&lt;/a&gt; is very similar to &lt;a href=&quot;../api/index#flask.Flask.before_request&quot;&gt;&lt;code&gt;before_request()&lt;/code&gt;&lt;/a&gt;). However, there are differences in how they work. The core &lt;a href=&quot;../api/index#flask.Flask.before_request&quot;&gt;&lt;code&gt;before_request()&lt;/code&gt;&lt;/a&gt; handler, for example, is executed in a specific order and is able to abort the request early by returning a response. In contrast all signal handlers are executed in undefined order and do not modify any data.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c2495a0e910d664897990cda168ba874b0ac057d" translate="yes" xml:space="preserve">
          <source>Flask comes with a handy &lt;a href=&quot;../../api/index#flask.abort&quot;&gt;&lt;code&gt;abort()&lt;/code&gt;&lt;/a&gt; function that aborts a request with an HTTP error code early. It will also provide a plain black and white error page for you with a basic description, but nothing fancy.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7bfbc50c634dc82c7a7509c6ab88140b7334267f" translate="yes" xml:space="preserve">
          <source>Flask configures Jinja2 to automatically escape all values unless explicitly told otherwise. This should rule out all XSS problems caused in templates, but there are still other places where you have to be careful:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="011f84949573277b9a231ea8fb197f9af7805953" translate="yes" xml:space="preserve">
          <source>Flask decides on one template engine: Jinja2. Why doesn&amp;rsquo;t Flask have a pluggable template engine interface? You can obviously use a different template engine, but Flask will still configure Jinja2 for you. While that limitation that Jinja2 is &lt;em&gt;always&lt;/em&gt; configured will probably go away, the decision to bundle one template engine and use that will not.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="349844a7d2c8432e99b406d743435a48b68ddf97" translate="yes" xml:space="preserve">
          <source>Flask depends on the &lt;a href=&quot;https://www.palletsprojects.com/p/jinja/&quot;&gt;Jinja&lt;/a&gt; template engine and the &lt;a href=&quot;https://www.palletsprojects.com/p/werkzeug/&quot;&gt;Werkzeug&lt;/a&gt; WSGI toolkit. The documentation for these libraries can be found at:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5f4785f37d3f33e82cf8e01880bffeab1c7bc723" translate="yes" xml:space="preserve">
          <source>Flask dispatches a request in multiple stages which can affect the request, response, and how errors are handled. The contexts are active during all of these stages.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a6b65d1799953f803b62a9ee3777c45ce8d89713" translate="yes" xml:space="preserve">
          <source>Flask extensions are usually named &amp;ldquo;Flask-Foo&amp;rdquo; or &amp;ldquo;Foo-Flask&amp;rdquo;. You can search PyPI for packages tagged with &lt;a href=&quot;https://pypi.org/search/?c=Framework+%3A%3A+Flask&quot;&gt;Framework :: Flask&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="984e9db92c2cd36a47948b3a990931a7d5df904e" translate="yes" xml:space="preserve">
          <source>Flask has a few assumptions about your application (which you can change of course) that give you basic and painless Unicode support:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="71a713f5f554d2d08db1fcf694d2bb2407e63b0b" translate="yes" xml:space="preserve">
          <source>Flask has great support for JSON, and is a popular choice for building JSON APIs. Making requests with JSON data and examining JSON data in responses is very convenient:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fe12eb4cba00e9cf730434bd7ac354dd2d25542e" translate="yes" xml:space="preserve">
          <source>Flask has many configuration values, with sensible defaults, and a few conventions when getting started. By convention, templates and static files are stored in subdirectories within the application&amp;rsquo;s Python source tree, with the names &lt;code&gt;templates&lt;/code&gt; and &lt;code&gt;static&lt;/code&gt; respectively. While this can be changed, you usually don&amp;rsquo;t have to, especially when getting started.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fc7225882d68f7184effec3b5f15fcdfff0f04a6" translate="yes" xml:space="preserve">
          <source>Flask includes many hooks to customize its behavior. Should you need more customization, the Flask class is built for subclassing. If you are interested in that, check out the &lt;a href=&quot;../becomingbig/index#becomingbig&quot;&gt;Becoming Big&lt;/a&gt; chapter. If you are curious about the Flask design principles, head over to the section about &lt;a href=&quot;../design/index#design&quot;&gt;Design Decisions in Flask&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d12b0ef17d6033f3181d63aa1007fac6cbf08de4" translate="yes" xml:space="preserve">
          <source>Flask inserts a couple of global functions and helpers into the Jinja2 context, additionally to the values that are present by default.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ccfc3dc53b9acb968e4ad36ab34b609bd1412605" translate="yes" xml:space="preserve">
          <source>Flask is a framework that takes advantage of the work already done by Werkzeug to properly interface WSGI (which can be a complex task at times). Thanks to recent developments in the Python package infrastructure, packages with dependencies are no longer an issue and there are very few reasons against having libraries that depend on others.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c22b3f6618cef75dd42bf0710bffc58dd1998440" translate="yes" xml:space="preserve">
          <source>Flask is no different from any other framework in that you the developer must build with caution, watching for exploits when building to your requirements.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c8e8957bc00d9f2d56468f15068253da3d81c9ca" translate="yes" xml:space="preserve">
          <source>Flask is now installed. Check out the &lt;a href=&quot;../quickstart/index&quot;&gt;Quickstart&lt;/a&gt; or go to the &lt;a href=&quot;https://flask.palletsprojects.com/en/1.1.x/&quot;&gt;Documentation Overview&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="be9956685dd3e8bf2b0d47b7543cdce26b6b46f1" translate="yes" xml:space="preserve">
          <source>Flask is usually used with the decorators. Decorators are simple and you have the URL right next to the function that is called for that specific URL. However there is a downside to this approach: it means all your code that uses decorators has to be imported upfront or Flask will never actually find your function.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7c3312274ffbbc81aa6441afc0527d6a114cb302" translate="yes" xml:space="preserve">
          <source>Flask itself does not provide caching for you, but &lt;a href=&quot;https://flask-caching.readthedocs.io/en/latest/&quot;&gt;Flask-Caching&lt;/a&gt;, an extension for Flask does. Flask-Caching supports various backends, and it is even possible to develop your own caching backend.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8e8ea4f79aa7d3767df2be47a3f7dcd8914540bc" translate="yes" xml:space="preserve">
          <source>Flask itself, and all the libraries you can find on PyPI are distributed with either setuptools or distutils.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="216a26977bf976ac27b44c2d9a5c3afd6a52c0ef" translate="yes" xml:space="preserve">
          <source>Flask leverages Jinja2 as its template engine. You are obviously free to use a different template engine, but you still have to install Jinja2 to run Flask itself. This requirement is necessary to enable rich extensions. An extension can depend on Jinja2 being present.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="797a4e89f4f35323c05d5147f201c0ff39c056ef" translate="yes" xml:space="preserve">
          <source>Flask provides &lt;a href=&quot;../api/index#flask.Flask.test_cli_runner&quot;&gt;&lt;code&gt;test_cli_runner()&lt;/code&gt;&lt;/a&gt; to create a &lt;a href=&quot;../api/index#flask.testing.FlaskCliRunner&quot;&gt;&lt;code&gt;FlaskCliRunner&lt;/code&gt;&lt;/a&gt; that passes the Flask app to the CLI automatically. Use its &lt;a href=&quot;../api/index#flask.testing.FlaskCliRunner.invoke&quot;&gt;&lt;code&gt;invoke()&lt;/code&gt;&lt;/a&gt; method to call commands in the same way they would be called from the command line.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d1f14fcd1f773fbf3404998311f0e848207d715d" translate="yes" xml:space="preserve">
          <source>Flask provides a way to test your application by exposing the Werkzeug test &lt;a href=&quot;https://werkzeug.palletsprojects.com/en/1.0.x/test/#werkzeug.test.Client&quot;&gt;&lt;code&gt;Client&lt;/code&gt;&lt;/a&gt; and handling the context locals for you. You can then use that with your favourite testing solution.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="592508769a663493ec87d7350733770daa63ae25" translate="yes" xml:space="preserve">
          <source>Flask provides the following Jinja2 filters in addition to the filters provided by Jinja2 itself:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7677418e6b0708f772ad69283cd9ec61046dcb75" translate="yes" xml:space="preserve">
          <source>Flask solves this issue with the &lt;em&gt;application context&lt;/em&gt;. Rather than referring to an &lt;code&gt;app&lt;/code&gt; directly, you use the &lt;a href=&quot;../api/index#flask.current_app&quot;&gt;&lt;code&gt;current_app&lt;/code&gt;&lt;/a&gt; proxy, which points to the application handling the current activity.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c464e39a968f5ed13ba3700778f653b853744270" translate="yes" xml:space="preserve">
          <source>Flask started in part to demonstrate how to build your own framework on top of existing well-used tools Werkzeug (WSGI) and Jinja (templating), and as it developed, it became useful to a wide audience. As you grow your codebase, don&amp;rsquo;t just use Flask &amp;ndash; understand it. Read the source. Flask&amp;rsquo;s code is written to be read; its documentation is published so you can use its internal APIs. Flask sticks to documented APIs in upstream libraries, and documents its internal utilities so that you can find the hook points needed for your project.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e0847a4729c2097676fe122c07038993b602337b" translate="yes" xml:space="preserve">
          <source>Flask uses &lt;code&gt;simplejson&lt;/code&gt; for the JSON implementation. Since simplejson is provided by both the standard library as well as extension, Flask will try simplejson first and then fall back to the stdlib json module. On top of that it will delegate access to the current application&amp;rsquo;s JSON encoders and decoders for easier customization.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="04b788af2413b20c6ad3c20dfd4c63fe9f8e44b0" translate="yes" xml:space="preserve">
          <source>Flask uses a concept of &lt;em&gt;blueprints&lt;/em&gt; for making application components and supporting common patterns within an application or across applications. Blueprints can greatly simplify how large applications work and provide a central means for Flask extensions to register operations on applications. A &lt;a href=&quot;../api/index#flask.Blueprint&quot;&gt;&lt;code&gt;Blueprint&lt;/code&gt;&lt;/a&gt; object works similarly to a &lt;a href=&quot;../api/index#flask.Flask&quot;&gt;&lt;code&gt;Flask&lt;/code&gt;&lt;/a&gt; application object, but it is not actually an application. Rather it is a &lt;em&gt;blueprint&lt;/em&gt; of how to construct or extend an application.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2ff93cdd56eadc6b49c0e952f58aa8c1fd9716d3" translate="yes" xml:space="preserve">
          <source>Flask uses standard Python &lt;a href=&quot;https://docs.python.org/3/library/logging.html#module-logging&quot;&gt;&lt;code&gt;logging&lt;/code&gt;&lt;/a&gt;. Messages about your Flask application are logged with &lt;a href=&quot;../api/index#flask.Flask.logger&quot;&gt;&lt;code&gt;app.logger&lt;/code&gt;&lt;/a&gt;, which takes the same name as &lt;a href=&quot;../api/index#flask.Flask.name&quot;&gt;&lt;code&gt;app.name&lt;/code&gt;&lt;/a&gt;. This logger can also be used to log your own messages.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="966cba7aad20c82412e3f9304afdaeaa3f924428" translate="yes" xml:space="preserve">
          <source>Flask uses the Werkzeug routing system which was designed to automatically order routes by complexity. This means that you can declare routes in arbitrary order and they will still work as expected. This is a requirement if you want to properly implement decorator based routing since decorators could be fired in undefined order when the application is split into multiple modules.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f64b76eb50c19b570be3d1b4da0a3c2a61849c6a" translate="yes" xml:space="preserve">
          <source>Flask uses thread local objects (context local objects in fact, they support greenlet contexts as well) for request, session and an extra object you can put your own things on (&lt;a href=&quot;../api/index#flask.g&quot;&gt;&lt;code&gt;g&lt;/code&gt;&lt;/a&gt;). Why is that and isn&amp;rsquo;t that a bad idea?</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e8f95c85455d7c537f929e2111aa40076fc9d4af" translate="yes" xml:space="preserve">
          <source>Flask will also automatically push an app context when running CLI commands registered with &lt;code&gt;Flask.cli&lt;/code&gt; using &lt;code&gt;@app.cli.command()&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="197c96d166d5f07e5e553d5a623a785e17727d4c" translate="yes" xml:space="preserve">
          <source>Flask will automatically detect the factory (&lt;code&gt;create_app&lt;/code&gt; or &lt;code&gt;make_app&lt;/code&gt;) in &lt;code&gt;myapp&lt;/code&gt;. You can also pass arguments to the factory like this:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="41635622907fe7eb6accd34a417b68f988a7414e" translate="yes" xml:space="preserve">
          <source>Flask will automatically load commands specified in the &lt;code&gt;flask.commands&lt;/code&gt;&lt;a href=&quot;https://packaging.python.org/tutorials/packaging-projects/#entry-points&quot;&gt;entry point&lt;/a&gt;. This is useful for extensions that want to add commands when they are installed. Entry points are specified in &lt;code&gt;setup.py&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="79fc3ae08938577b775d2129f2a713beb05d21f1" translate="yes" xml:space="preserve">
          <source>Flask will look for templates in the &lt;code&gt;templates&lt;/code&gt; folder. So if your application is a module, this folder is next to that module, if it&amp;rsquo;s a package it&amp;rsquo;s actually inside your package:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="47ed72509cd7ffd050f17838ecd2120f51b86190" translate="yes" xml:space="preserve">
          <source>Flask will never have a database layer. It will not have a form library or anything else in that direction. Flask itself just bridges to Werkzeug to implement a proper WSGI application and to Jinja2 to handle templating. It also binds to a few common standard library packages such as logging. Everything else is up for extensions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1868082db1e2cb6290f6a1a4b5973c897d996d1f" translate="yes" xml:space="preserve">
          <source>Flask will suppress any server error with a generic error page unless it is in debug mode. As such to enable just the interactive debugger without the code reloading, you have to invoke &lt;a href=&quot;#flask.Flask.run&quot;&gt;&lt;code&gt;run()&lt;/code&gt;&lt;/a&gt; with &lt;code&gt;debug=True&lt;/code&gt; and &lt;code&gt;use_reloader=False&lt;/code&gt;. Setting &lt;code&gt;use_debugger&lt;/code&gt; to &lt;code&gt;True&lt;/code&gt; without being in debug mode won&amp;rsquo;t catch any exceptions because there won&amp;rsquo;t be any to catch.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="81df7e8c0f93acb5a5a5ecf0b36c8528cbbae99e" translate="yes" xml:space="preserve">
          <source>Flask&amp;rsquo;s default cookie implementation validates that the cryptographic signature is not older than this value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b9b2f2fc826d2d34b827124bfc78bf5924d909cf" translate="yes" xml:space="preserve">
          <source>Flask, like Jinja2 and Werkzeug, is totally Unicode based when it comes to text. Not only these libraries, also the majority of web related Python libraries that deal with text. If you don&amp;rsquo;t know Unicode so far, you should probably read &lt;a href=&quot;https://www.joelonsoftware.com/2003/10/08/the-absolute-minimum-every-software-developer-absolutely-positively-must-know-about-unicode-and-character-sets-no-excuses/&quot;&gt;The Absolute Minimum Every Software Developer Absolutely, Positively Must Know About Unicode and Character Sets&lt;/a&gt;. This part of the documentation just tries to cover the very basics so that you have a pleasant experience with Unicode related things.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="da951b0087f383da0dadb1545c31347a1b494bce" translate="yes" xml:space="preserve">
          <source>Flask-MongoEngine adds helpful utilities on top of MongoEngine. Check out their &lt;a href=&quot;https://flask-mongoengine.readthedocs.io&quot;&gt;documentation&lt;/a&gt; as well.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c5f610c58c52a1e9bdc835cded1ae836455c1f50" translate="yes" xml:space="preserve">
          <source>Flask-SQLAlchemy Extension</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="44a37755d5acf7902c3c6e3b3f691c61af8d571d" translate="yes" xml:space="preserve">
          <source>Follow-up reads:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="45ba4780b08621c81336622af654cfda776db6c3" translate="yes" xml:space="preserve">
          <source>For Extension Developers</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d6336e424a4c221ea4a7c85e4aea50d64686baa9" translate="yes" xml:space="preserve">
          <source>For Python 3 add the following lines to the top of your &lt;code&gt;.wsgi&lt;/code&gt; file:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8b15b27d11c853c2b1e263cb44437a2e2829cb75" translate="yes" xml:space="preserve">
          <source>For RESTful APIs it&amp;rsquo;s especially helpful to execute a different function for each HTTP method. With the &lt;a href=&quot;../api/index#flask.views.MethodView&quot;&gt;&lt;code&gt;flask.views.MethodView&lt;/code&gt;&lt;/a&gt; you can easily do that. Each HTTP method maps to a function with the same name (just in lowercase):</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fb34ccf1fce26db178b23572af7020d4fcf94407" translate="yes" xml:space="preserve">
          <source>For a full list of methods and attributes of the request object, head over to the &lt;a href=&quot;../api/index#flask.Request&quot;&gt;&lt;code&gt;Request&lt;/code&gt;&lt;/a&gt; documentation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="852be1abc142c93285f091d4730ad4750901f0c8" translate="yes" xml:space="preserve">
          <source>For a more optimized setup, see &lt;a href=&quot;../uwsgi/index&quot;&gt;configuring uWSGI and NGINX&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bebceeec666b0a7aca2ebfb4e47773a6cab3a11f" translate="yes" xml:space="preserve">
          <source>For a test it would be nice to override this user from the outside without having to change some code. This can be accomplished with hooking the &lt;a href=&quot;../api/index#flask.appcontext_pushed&quot;&gt;&lt;code&gt;flask.appcontext_pushed&lt;/code&gt;&lt;/a&gt; signal:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e361326d2c4c5412fd98c0d28458fdeff67da3c6" translate="yes" xml:space="preserve">
          <source>For a while, it appeared that HTML was about to be replaced by XHTML. However, barely any websites on the Internet are actual XHTML (which is HTML processed using XML rules). There are a couple of major reasons why this is the case. One of them is Internet Explorer&amp;rsquo;s lack of proper XHTML support. The XHTML spec states that XHTML must be served with the MIME type &lt;em&gt;application/xhtml+xml&lt;/em&gt;, but Internet Explorer refuses to read files with that MIME type. While it is relatively easy to configure Web servers to serve XHTML properly, few people do. This is likely because properly using XHTML can be quite painful.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ae0456f3508c3cc308f522071d0398758e1e51cc" translate="yes" xml:space="preserve">
          <source>For all core Flask signals, the sender is the application that issued the signal. When you subscribe to a signal, be sure to also provide a sender unless you really want to listen for signals from all applications. This is especially true if you are developing an extension.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="602725e0805d60d6c95b054da78f128df24a8b1e" translate="yes" xml:space="preserve">
          <source>For clarity, the JSON serialization behavior has the following differences from &lt;a href=&quot;#flask.json.dumps&quot;&gt;&lt;code&gt;dumps()&lt;/code&gt;&lt;/a&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0d298197fabc90e461895f9a5bb6e0307c01b8b0" translate="yes" xml:space="preserve">
          <source>For example if your application is defined in &lt;code&gt;yourapplication/app.py&lt;/code&gt; you should create it with one of the two versions below:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3f886823d78ebe1c764bbf36533828ec0353bbf2" translate="yes" xml:space="preserve">
          <source>For example you could have your main application run on &lt;code&gt;/&lt;/code&gt; and your backend interface on &lt;code&gt;/backend&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e7965408e907b234adbb533b0d3875674b21916c" translate="yes" xml:space="preserve">
          <source>For example, &lt;code&gt;import y\bose\bm\bi\bt\be\b&lt;/code&gt; renders as &lt;code&gt;import yosemite&lt;/code&gt; in HTML, but the backspaces are applied when pasted into a terminal, and it becomes &lt;code&gt;import os&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1e43eb31fc813c5f923980877e2fb8078248f8b1" translate="yes" xml:space="preserve">
          <source>For example, here is a helper context manager that can be used in a unit test to determine which templates were rendered and what variables were passed to the template:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1ac7193f33e2a1a5285e969b8574eea26f749376" translate="yes" xml:space="preserve">
          <source>For example, here we use the &lt;a href=&quot;../api/index#flask.Flask.test_request_context&quot;&gt;&lt;code&gt;test_request_context()&lt;/code&gt;&lt;/a&gt; method to try out &lt;a href=&quot;../api/index#flask.url_for&quot;&gt;&lt;code&gt;url_for()&lt;/code&gt;&lt;/a&gt;. &lt;a href=&quot;../api/index#flask.Flask.test_request_context&quot;&gt;&lt;code&gt;test_request_context()&lt;/code&gt;&lt;/a&gt; tells Flask to behave as though it&amp;rsquo;s handling a request even while we use a Python shell. See &lt;a href=&quot;#context-locals&quot;&gt;Context Locals&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="883783a3b51480050247036b40d3fc0bad6bc871" translate="yes" xml:space="preserve">
          <source>For example, if an instance of &lt;a href=&quot;https://docs.python.org/3/library/exceptions.html#ConnectionRefusedError&quot;&gt;&lt;code&gt;ConnectionRefusedError&lt;/code&gt;&lt;/a&gt; is raised, and a handler is registered for &lt;a href=&quot;https://docs.python.org/3/library/exceptions.html#ConnectionError&quot;&gt;&lt;code&gt;ConnectionError&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;https://docs.python.org/3/library/exceptions.html#ConnectionRefusedError&quot;&gt;&lt;code&gt;ConnectionRefusedError&lt;/code&gt;&lt;/a&gt;, the more specific &lt;a href=&quot;https://docs.python.org/3/library/exceptions.html#ConnectionRefusedError&quot;&gt;&lt;code&gt;ConnectionRefusedError&lt;/code&gt;&lt;/a&gt; handler is called with the exception instance to generate the response.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c57a9c603517bcff04062afdd1207b6e304607bb" translate="yes" xml:space="preserve">
          <source>For example, in HTML4 &lt;code&gt;&amp;lt;title/Hello/&lt;/code&gt; theoretically parses exactly the same as &lt;code&gt;&amp;lt;title&amp;gt;Hello&amp;lt;/title&amp;gt;&lt;/code&gt;. However, since people were using XHTML-like tags along the lines of &lt;code&gt;&amp;lt;link /&amp;gt;&lt;/code&gt;, browser vendors implemented the XHTML syntax over the syntax defined by the specification.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5f7f169d696bd4859c7d62722e255e130a0d58b2" translate="yes" xml:space="preserve">
          <source>For example, this can be used to open a database connection, or to load the logged in user from the session.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b93ac1384be7b98f164f6c81fd59de15e924427b" translate="yes" xml:space="preserve">
          <source>For example, to support arbitrary iterators, you could implement default like this:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d940741039c1f345d0ac522ca3b87bf2df00afd6" translate="yes" xml:space="preserve">
          <source>For example, you can manage a database connection using this pattern:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2912df1f1980f249ef7de59b3463e780b0784332" translate="yes" xml:space="preserve">
          <source>For example, you may want to override how request parameters are handled to preserve their order:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="debb0beb540a42cd537f85fd337ef30b9b6414a7" translate="yes" xml:space="preserve">
          <source>For information as of why this is useful see &lt;a href=&quot;../cli/index#custom-scripts&quot;&gt;Custom Scripts&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="39f6b25f27aa04f48e67acdfcca4a18c3ff242a7" translate="yes" xml:space="preserve">
          <source>For information on how to use the request context from the interactive Python shell, see &lt;a href=&quot;../shell/index&quot;&gt;Working with the Shell&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3461ff5d08944821a6fef08ed0b1e78007fae30f" translate="yes" xml:space="preserve">
          <source>For instance you can place this in a &lt;code&gt;tasks&lt;/code&gt; module. While you can use Celery without any reconfiguration with Flask, it becomes a bit nicer by subclassing tasks and adding support for Flask&amp;rsquo;s application contexts and hooking it up with the Flask configuration.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="65a34159c97111fe467f921c0acffc6bf00f7353" translate="yes" xml:space="preserve">
          <source>For internal usage the view functions can have some attributes attached to customize behavior the view function would normally not have control over. The following attributes can be provided optionally to either override some defaults to &lt;a href=&quot;#flask.Flask.add_url_rule&quot;&gt;&lt;code&gt;add_url_rule()&lt;/code&gt;&lt;/a&gt; or general behavior:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1bb89b8293a721e777316826fb9dd84ef29a3d7a" translate="yes" xml:space="preserve">
          <source>For many web applications the complexity of the code is less an issue than the scaling for the number of users or data entries expected. Flask by itself is only limited in terms of scaling by your application code, the data store you want to use and the Python implementation and webserver you are running on.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c75b1524eea5e1c8ad9554a46a18aaa9f95b4603" translate="yes" xml:space="preserve">
          <source>For more information about SQLAlchemy, head over to the &lt;a href=&quot;https://www.sqlalchemy.org/&quot;&gt;website&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b6910140027c454811ffe6c060e59b7c75ca9740" translate="yes" xml:space="preserve">
          <source>For more information about WTForms, head over to the &lt;a href=&quot;https://wtforms.readthedocs.io/&quot;&gt;WTForms website&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="26c676cfe1bf09eefe3c640fa7269c515aa994c1" translate="yes" xml:space="preserve">
          <source>For more information about resource loading, see &lt;a href=&quot;#flask.Flask.open_resource&quot;&gt;&lt;code&gt;open_resource()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4d7c61701522358cd62c289e983d48bc5ce0e73d" translate="yes" xml:space="preserve">
          <source>For more information consult the &lt;a href=&quot;https://modwsgi.readthedocs.io/en/develop/index.html&quot;&gt;mod_wsgi documentation&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d497fb9a32dd07e38cff498dc23f3a5b9b6e151b" translate="yes" xml:space="preserve">
          <source>For more information consult the documentation of your webserver.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="65fc5cd0329a15e669f40a6314f74a4894796e31" translate="yes" xml:space="preserve">
          <source>For more information refer to &lt;a href=&quot;#url-route-registrations&quot;&gt;URL Route Registrations&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1e4242a17f6168eff05e582324129bcb3c3609fc" translate="yes" xml:space="preserve">
          <source>For more information see &lt;a href=&quot;../cli/index#cli&quot;&gt;Command Line Interface&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="96ffa420aafd2b0a1da48fb8d118ed5184307e18" translate="yes" xml:space="preserve">
          <source>For more information, head over to the &lt;a href=&quot;../quickstart/index#url-building&quot;&gt;Quickstart&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b238a8f8ecb3cfeee721d10a79e12c784d251cd9" translate="yes" xml:space="preserve">
          <source>For more on Flask extensions, have a look at &lt;a href=&quot;../extensions/index#extensions&quot;&gt;Extensions&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="08ccc04f4b09e557203832e162c4316053df6c3d" translate="yes" xml:space="preserve">
          <source>For most applications the following file should be sufficient:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2f219ada346b45d8c7667a14341443f29fecbadd" translate="yes" xml:space="preserve">
          <source>For most applications, it is undoubtedly better to use HTML5 than XHTML.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6cdd55ddc74118dd549ad90538568333e1aa5764" translate="yes" xml:space="preserve">
          <source>For some better examples, checkout the &lt;a href=&quot;../patterns/fileuploads/index#uploading-files&quot;&gt;Uploading Files&lt;/a&gt; pattern.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c3a85b2f0b6d32788dc4f65977fe3d87b39f063e" translate="yes" xml:space="preserve">
          <source>For static files, the path can be absolute or relative to the blueprint resource folder.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e34ba096e84b49ede4d12557b7a4c2049b6e00fa" translate="yes" xml:space="preserve">
          <source>For templates you can use the full power of Jinja2 templates. Head over to the official &lt;a href=&quot;http://jinja.pocoo.org/docs/templates/&quot;&gt;Jinja2 Template Documentation&lt;/a&gt; for more information.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dbe64a41a97c60888d18be39d069e4ea5673c865" translate="yes" xml:space="preserve">
          <source>For that, just add the following directive to your &lt;code&gt;Directory&lt;/code&gt; section:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5fdeec8470e6f1d3534ca076d60cc8dd75706b10" translate="yes" xml:space="preserve">
          <source>For the latter, this is where &lt;a href=&quot;../../api/index#flask.Flask.url_defaults&quot;&gt;&lt;code&gt;url_defaults()&lt;/code&gt;&lt;/a&gt; functions come in. They can automatically inject values into a call to &lt;a href=&quot;../../api/index#flask.url_for&quot;&gt;&lt;code&gt;url_for()&lt;/code&gt;&lt;/a&gt;. The code below checks if the language code is not yet in the dictionary of URL values and if the endpoint wants a value named &lt;code&gt;'lang_code'&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4010a72b1d3a75f8c224867c7f05a4021176a527" translate="yes" xml:space="preserve">
          <source>For the session cookie, if &lt;a href=&quot;../api/index#flask.session.permanent&quot;&gt;&lt;code&gt;session.permanent&lt;/code&gt;&lt;/a&gt; is set, then &lt;a href=&quot;../config/index#PERMANENT_SESSION_LIFETIME&quot;&gt;&lt;code&gt;PERMANENT_SESSION_LIFETIME&lt;/code&gt;&lt;/a&gt; is used to set the expiration. Flask&amp;rsquo;s default cookie implementation validates that the cryptographic signature is not older than this value. Lowering this value may help mitigate replay attacks, where intercepted cookies can be sent at a later time.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="84299e585343bb5542a8f50373462429504abc6a" translate="yes" xml:space="preserve">
          <source>For this also see &lt;a href=&quot;#about-responses&quot;&gt;About Responses&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0c59322c251a8060f91dbda9fc8d3fd2ab7ca665" translate="yes" xml:space="preserve">
          <source>For usage examples, read the &lt;a href=&quot;https://docs.python.org/3/library/json.html#module-json&quot;&gt;&lt;code&gt;json&lt;/code&gt;&lt;/a&gt; documentation in the standard library. The following extensions are by default applied to the stdlib&amp;rsquo;s JSON module:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="22aad63bbc23b36e8396af95652e151b02aca08d" translate="yes" xml:space="preserve">
          <source>For web applications it&amp;rsquo;s crucial to react to the data a client sends to the server. In Flask this information is provided by the global &lt;a href=&quot;../api/index#flask.request&quot;&gt;&lt;code&gt;request&lt;/code&gt;&lt;/a&gt; object. If you have some experience with Python you might be wondering how that object can be global and how Flask manages to still be threadsafe. The answer is context locals:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="19f942d75513250d44b0876d9d21389c4f0e9e9a" translate="yes" xml:space="preserve">
          <source>Forces the browser to honor the response content type instead of trying to detect it, which can be abused to generate a cross-site scripting (XSS) attack.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0a683f099c5cd32d972be2f3a92f5a845ceb5fd5" translate="yes" xml:space="preserve">
          <source>Foreword</source>
          <target state="translated">Foreword</target>
        </trans-unit>
        <trans-unit id="cb0f7cde9536262276c8be00c624483687467819" translate="yes" xml:space="preserve">
          <source>Foreword for Experienced Programmers</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3c4cf50500bc9cf1811c3a459e2c13addbb13630" translate="yes" xml:space="preserve">
          <source>Fork.</source>
          <target state="translated">Fork.</target>
        </trans-unit>
        <trans-unit id="8a397b07290b295ac7cd4c8e3f342c4fdab1857a" translate="yes" xml:space="preserve">
          <source>Form Validation with WTForms</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3613274d7a36f2cd58d7183913973cec6bfe359b" translate="yes" xml:space="preserve">
          <source>Forms in Templates</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5c78b545c79d47fb767247ccd24aa8a68ebc5b9d" translate="yes" xml:space="preserve">
          <source>Fortunately this is however very simple to change by wrapping the input stream.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4a0eb9cd9f3f87f33727b5283aad8418862e9fdf" translate="yes" xml:space="preserve">
          <source>From that point onwards there is so much that can be done to make deployment actually fun:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fed970f2b1c40dab4973dc1659618174a74fec91" translate="yes" xml:space="preserve">
          <source>From that point onwards you can work with the request object until you call &lt;code&gt;pop&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="71167a98b027eb8f37fc94a7b48be4b95f155ca7" translate="yes" xml:space="preserve">
          <source>Full example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="73bc5958e0adc87435e31b0dc3ad501d52e9b354" translate="yes" xml:space="preserve">
          <source>Function used internally to send static files from the static folder to the browser.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1fd4ccf95871981ebe5c324a17b16a4de4274ee7" translate="yes" xml:space="preserve">
          <source>Further Improving the Shell Experience</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0efedf0c6b670e2ce0672f0ef9c217cbf50d893b" translate="yes" xml:space="preserve">
          <source>Furthermore extensions can then easily depend on one template language being present. You can easily use your own templating language, but an extension could still depend on Jinja itself.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c8ec0684ee62f011eaa603defd807f7a55d3fcab" translate="yes" xml:space="preserve">
          <source>Furthermore this design makes it possible to use a factory function to create the application which is very helpful for unit testing and similar things (&lt;a href=&quot;../patterns/appfactories/index#app-factories&quot;&gt;Application Factories&lt;/a&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ef6cd29e26fd057dd9cc7b436f96304533c01d52" translate="yes" xml:space="preserve">
          <source>General Layout</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8ff31423daecd4d40fa050e94b7328135dc12b1c" translate="yes" xml:space="preserve">
          <source>Generally it&amp;rsquo;s recommended that you read the &lt;a href=&quot;../reqcontext/index#request-context&quot;&gt;The Request Context&lt;/a&gt; chapter of the documentation first.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f38d937b67a517c7b17571b0e3be0e7fe99cac39" translate="yes" xml:space="preserve">
          <source>Generally teardown functions must take every necessary step to avoid that they will fail. If they do execute code that might fail they will have to surround the execution of these code by try/except statements and log occurring errors.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9354224b16a6d7a2e49efc11b360a486260b6712" translate="yes" xml:space="preserve">
          <source>Generally there are three ways to define rules for the routing system:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1a6cd2908be4611e3e9a6d20324a5c5e9ca67465" translate="yes" xml:space="preserve">
          <source>Generates a URL to the given endpoint with the method provided.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="39f70a95cb7fa697ccd66951ba49c23b8169a6e4" translate="yes" xml:space="preserve">
          <source>Generating HTML from within Python is not fun, and actually pretty cumbersome because you have to do the HTML escaping on your own to keep the application secure. Because of that Flask configures the &lt;a href=&quot;http://jinja.pocoo.org/&quot;&gt;Jinja2&lt;/a&gt; template engine for you automatically.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8c2091cd919c6e15679a9de0df2481c15b476786" translate="yes" xml:space="preserve">
          <source>Generic Exception Handlers</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="526063035f490202532da79b4a74a58bc766ab80" translate="yes" xml:space="preserve">
          <source>Get an attribute by name, or a default value. Like &lt;a href=&quot;https://docs.python.org/3/library/stdtypes.html#dict.get&quot;&gt;&lt;code&gt;dict.get()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="120b79df9ef6109443e1f90eb2263e43de92e19f" translate="yes" xml:space="preserve">
          <source>Get and remove an attribute by name. Like &lt;a href=&quot;https://docs.python.org/3/library/stdtypes.html#dict.pop&quot;&gt;&lt;code&gt;dict.pop()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b094ad795c8dbb684d0c2fc284e1cb6c61154fa1" translate="yes" xml:space="preserve">
          <source>Get the value of an attribute if it is present, otherwise set and return a default value. Like &lt;a href=&quot;https://docs.python.org/3/library/stdtypes.html#dict.setdefault&quot;&gt;&lt;code&gt;dict.setdefault()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8639e1e9acc423435c672ae34940c40ad6cd364d" translate="yes" xml:space="preserve">
          <source>Getting started with Sentry</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e2944f09961f5a9ae869464e9228417549ec03a6" translate="yes" xml:space="preserve">
          <source>Getting the most out of WTForms with an Extension</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="17c6bf64bf960c6bdea9f0d103dff20d00bac154" translate="yes" xml:space="preserve">
          <source>Gevent</source>
          <target state="translated">Gevent</target>
        </trans-unit>
        <trans-unit id="3e7aaadc138b974d13e7102c656b91b34e978b7f" translate="yes" xml:space="preserve">
          <source>Given a context and a command name, this returns a &lt;code&gt;Command&lt;/code&gt; object if it exists or returns &lt;code&gt;None&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a83b225228b4c85eecbf276fcc574bd26c6627b4" translate="yes" xml:space="preserve">
          <source>Given a flask application in myapp.py, use the following command:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cf37cba8ba1e2ac4ef8c0aa3c1e79f1ab39f8ab3" translate="yes" xml:space="preserve">
          <source>Gives a list of all users</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0fe742f573d5b23041106b5bc954af4a6ac13614" translate="yes" xml:space="preserve">
          <source>Go to &lt;em&gt;Settings -&amp;gt; Preferences &amp;hellip;&lt;/em&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="74b73c5dad39ae6ea01d5c58570191b64a2e6ad0" translate="yes" xml:space="preserve">
          <source>Good applications and user interfaces are all about feedback. If the user does not get enough feedback they will probably end up hating the application. Flask provides a really simple way to give feedback to a user with the flashing system. The flashing system basically makes it possible to record a message at the end of a request and access it next request and only next request. This is usually combined with a layout template that does this. Note that browsers and sometimes web servers enforce a limit on cookie sizes. This means that flashing messages that are too large for session cookies causes message flashing to fail silently.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="89fa02cb05a5f5ba6570ea3afbb4e2b0516a34ac" translate="yes" xml:space="preserve">
          <source>Good applications and user interfaces are all about feedback. If the user does not get enough feedback they will probably end up hating the application. Flask provides a really simple way to give feedback to a user with the flashing system. The flashing system basically makes it possible to record a message at the end of a request and access it on the next (and only the next) request. This is usually combined with a layout template to expose the message.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="919642530da33bfbe2717d85dea4c123b2751556" translate="yes" xml:space="preserve">
          <source>Growing with Flask</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fd93c7d855d6c7d32aa7b74fbe15c55de7127ff7" translate="yes" xml:space="preserve">
          <source>Gunicorn</source>
          <target state="translated">Gunicorn</target>
        </trans-unit>
        <trans-unit id="bfc70d716210500886f45bba07e350857dc0128c" translate="yes" xml:space="preserve">
          <source>HTML versus XHTML</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5fa4afad6bbd90302287a6340127a9d9b97a655c" translate="yes" xml:space="preserve">
          <source>HTML/XHTML FAQ</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="43b487b9b6125c8580298b1c314887147fe68454" translate="yes" xml:space="preserve">
          <source>HTML4.01</source>
          <target state="translated">HTML4.01</target>
        </trans-unit>
        <trans-unit id="93444192491e31ec8001fcf32b5ec8e7a3030b8d" translate="yes" xml:space="preserve">
          <source>HTML5</source>
          <target state="translated">HTML5</target>
        </trans-unit>
        <trans-unit id="19feb5fc01dd877ff77844a63bc933293caf9569" translate="yes" xml:space="preserve">
          <source>HTML5 adds many new features that make Web applications easier to write and to use.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c52421ce541d2c1191bd95481f86bf0c9f651e55" translate="yes" xml:space="preserve">
          <source>HTML5 adds several new features, including semantic tags and the long-awaited &lt;code&gt;&amp;lt;audio&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;video&amp;gt;&lt;/code&gt; tags.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0a76f6c58d67e6163bc15f64fe7e33b9c9c20852" translate="yes" xml:space="preserve">
          <source>HTML5 has strictly defined parsing rules, but it also specifies exactly how a browser should react to parsing errors - unlike XHTML, which simply states parsing should abort. Some people are confused by apparently invalid syntax that still generates the expected results (for example, missing end tags or unquoted attribute values).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0d0e89ab8fb5de0b2f0ce37c01d8fe6ac1289b49" translate="yes" xml:space="preserve">
          <source>HTTP Methods</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a59d4db939b632ce4c9f5a7a491b7acc6640bc88" translate="yes" xml:space="preserve">
          <source>HTTP Public Key Pinning (HPKP)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="92b092172a89d9cb7710c23a35bcf58905e6ddfd" translate="yes" xml:space="preserve">
          <source>HTTP Strict Transport Security (HSTS)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="992a4a00b73bdef8e3e7db8dd2b16508514a7e0b" translate="yes" xml:space="preserve">
          <source>HTTP is based on bytes. Not only the protocol, also the system used to address documents on servers (so called URIs or URLs). However HTML which is usually transmitted on top of HTTP supports a large variety of character sets and which ones are used, are transmitted in an HTTP header. To not make this too complex Flask just assumes that if you are sending Unicode out you want it to be UTF-8 encoded. Flask will do the encoding and setting of the appropriate headers for you.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1dac7187341f9512582cd474dd42779d77be2bf7" translate="yes" xml:space="preserve">
          <source>Handle &lt;code&gt;BuildError&lt;/code&gt; on &lt;a href=&quot;#flask.url_for&quot;&gt;&lt;code&gt;url_for()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7484d7a15d53a01b0a6d16fba0b55fc292df89fa" translate="yes" xml:space="preserve">
          <source>Handle an exception that did not have an error handler associated with it, or that was raised from an error handler. This always causes a 500 &lt;code&gt;InternalServerError&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="72aebc3492e54170f8f60570483b96dcf23d1895" translate="yes" xml:space="preserve">
          <source>Handlers can be registered for any exception class, not just &lt;a href=&quot;https://werkzeug.palletsprojects.com/en/1.0.x/exceptions/#werkzeug.exceptions.HTTPException&quot;&gt;&lt;code&gt;HTTPException&lt;/code&gt;&lt;/a&gt; subclasses or HTTP status codes. Handlers can be registered for a specific class, or for all subclasses of a parent class.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="32ccefdb1c2c25390b19193b3c2d639cc2d6c7d6" translate="yes" xml:space="preserve">
          <source>Handlers registered on the blueprint take precedence over those registered globally on the application, assuming a blueprint is handling the request that raises the exception. However, the blueprint cannot handle 404 routing errors because the 404 occurs at the routing level before the blueprint can be determined.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5ba7685be3dc2228d202d7e0ceaea35806d9b5c9" translate="yes" xml:space="preserve">
          <source>Handles an HTTP exception. By default this will invoke the registered error handlers and fall back to returning the exception as response.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6c94476426e33912a7b4edacba6d1ed36bc700b6" translate="yes" xml:space="preserve">
          <source>Handling</source>
          <target state="translated">Handling</target>
        </trans-unit>
        <trans-unit id="d7e16c110185aed367037ee568f9aee84e279921" translate="yes" xml:space="preserve">
          <source>Have another debugger in mind? See &lt;a href=&quot;../errorhandling/index#working-with-debuggers&quot;&gt;Working with Debuggers&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2c1ee18c5b18313ce44c099aad0c4280f97e871a" translate="yes" xml:space="preserve">
          <source>Helper object to deal with Flask applications. This is usually not necessary to interface with as it&amp;rsquo;s used internally in the dispatching to click. In future versions of Flask this object will most likely play a bigger role. Typically it&amp;rsquo;s created automatically by the &lt;a href=&quot;#flask.cli.FlaskGroup&quot;&gt;&lt;code&gt;FlaskGroup&lt;/code&gt;&lt;/a&gt; but you can also manually create it and pass it onwards as click object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b00d5d42c3560a2c22733bc27cb6a6cb21211f1b" translate="yes" xml:space="preserve">
          <source>Here are some example log calls:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0931022beea83b3afc095873234631b7243eeca4" translate="yes" xml:space="preserve">
          <source>Here are some examples:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="96c0087be117090683f18bca7d084ad0ae2a6eee" translate="yes" xml:space="preserve">
          <source>Here are the parameters that &lt;a href=&quot;#flask.Flask.route&quot;&gt;&lt;code&gt;route()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#flask.Flask.add_url_rule&quot;&gt;&lt;code&gt;add_url_rule()&lt;/code&gt;&lt;/a&gt; accept. The only difference is that with the route parameter the view function is defined with the decorator instead of the &lt;code&gt;view_func&lt;/code&gt; parameter.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="59664846ffb98a6ebf28d906800702b7fce75a4d" translate="yes" xml:space="preserve">
          <source>Here are your options when growing your codebase or scaling your application.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bab08bb257fccab09b6805f507628b74a8ed9dde" translate="yes" xml:space="preserve">
          <source>Here is a basic introduction to how the &lt;code&gt;Markup&lt;/code&gt; class works:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="529a82251514d911561ecf0af9c012e76bc3ef3c" translate="yes" xml:space="preserve">
          <source>Here is a full example of how to configure Flask to preload the config from a module and then override the config from a file in the instance folder if it exists:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="01abff76f19ffcb24a01ff8f4d19b0b3563991d7" translate="yes" xml:space="preserve">
          <source>Here is a simple example of how you can use SQLite 3 with Flask:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7979c3c7d1fc4a7c69d0b22aa1f8ba37eac0aebd" translate="yes" xml:space="preserve">
          <source>Here is an example &lt;code&gt;database.py&lt;/code&gt; module for your application:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f96a9a39915c888332d35f65052b0d9119707f4b" translate="yes" xml:space="preserve">
          <source>Here is an example cache function. It generates the cache key from a specific prefix (actually a format string) and the current path of the request. Notice that we are using a function that first creates the decorator that then decorates the function. Sounds awful? Unfortunately it is a little bit more complex, but the code should still be straightforward to read.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f2b632cce10c358638a82ddcdc218d628c926834" translate="yes" xml:space="preserve">
          <source>Here is an example for a &amp;ldquo;404 Page Not Found&amp;rdquo; exception:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="66a2a5114052bdd62573ad7f12e3421e7731b791" translate="yes" xml:space="preserve">
          <source>Here is an example implementation for a &amp;ldquo;404 Page Not Found&amp;rdquo; exception:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="196dd282fd3a943f29215eaedc5157da8662a4b9" translate="yes" xml:space="preserve">
          <source>Here is an example model (put this into &lt;code&gt;models.py&lt;/code&gt;, e.g.):</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="12a6e5bd799454c7817a77c01df02472eeb88521" translate="yes" xml:space="preserve">
          <source>Here is an example of a configuration file that uses environment variables:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="32c4c2cffde17e8b9e6a384d41aac062af362f49" translate="yes" xml:space="preserve">
          <source>Here is an example of a configuration file:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bf05454ee73b985b8236fc836f9ab575e6b25ad3" translate="yes" xml:space="preserve">
          <source>Here is an example table and model (put this into &lt;code&gt;models.py&lt;/code&gt;):</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5fd5f5ad67d5ede190a7c0ff2b35f76abf6fea94" translate="yes" xml:space="preserve">
          <source>Here is an example template:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fc86141138a2bca4d4a2877158dc19f60644960a" translate="yes" xml:space="preserve">
          <source>Here is how a view can use that functionality:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b8280b6dab7e95d9198a58ecf112e27e66b640e9" translate="yes" xml:space="preserve">
          <source>Here is how you can use it:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3ee9c897f2be37bca8313318b413a0a0aacba622" translate="yes" xml:space="preserve">
          <source>Here is the &lt;code&gt;index.html&lt;/code&gt; template which inherits from &lt;code&gt;layout.html&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e2b08feac2a1913b4494e4928964c1e934ae725d" translate="yes" xml:space="preserve">
          <source>Here is the &lt;code&gt;register.html&lt;/code&gt; template for the function we used above, which takes advantage of the &lt;code&gt;_formhelpers.html&lt;/code&gt; template:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f4250cbaf6a70f66c3d3b3a261b5a74f3ee76610" translate="yes" xml:space="preserve">
          <source>Here is the code for that decorator:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1f1b1ce18b30b0e28019aaade27d4e6d5b79581c" translate="yes" xml:space="preserve">
          <source>Here the code:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bad8dad888b16ae9980034e2c75e2c01cc386daf" translate="yes" xml:space="preserve">
          <source>Here we check that HTML is allowed in the text but not in the title, which is the intended behavior.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="37e47e5bd52366016656e0092bd4089c97c1b82d" translate="yes" xml:space="preserve">
          <source>Here we look up the name of a template in the config.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="28fa75f4bf24f9c7190607285bee12e6152aefcb" translate="yes" xml:space="preserve">
          <source>Here&amp;rsquo;s a simple nginx configuration which proxies to an application served on localhost at port 8000, setting appropriate headers:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="266f08ac4ec357edbbcc87c64905df9f885eeaf2" translate="yes" xml:space="preserve">
          <source>Here&amp;rsquo;s an example &lt;code&gt;__init__.py&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="90a3932844aaefc6a3dac93da5198672a940fb3d" translate="yes" xml:space="preserve">
          <source>Here&amp;rsquo;s an example &lt;code&gt;_formhelpers.html&lt;/code&gt; template with such a macro:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bffaa03836e9d24c6a3869e87ce2e5bb80a0d23e" translate="yes" xml:space="preserve">
          <source>Here&amp;rsquo;s the example &lt;code&gt;database.py&lt;/code&gt; module for your application:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fa291d6d0149ef01662436167c1193b57d7c842e" translate="yes" xml:space="preserve">
          <source>Here, &lt;code&gt;error&lt;/code&gt; is the instance of &lt;code&gt;BuildError&lt;/code&gt;, and &lt;code&gt;endpoint&lt;/code&gt; and &lt;code&gt;values&lt;/code&gt; are the arguments passed into &lt;code&gt;url_for&lt;/code&gt;. Note that this is for building URLs outside the current application, and not for handling 404 NotFound errors.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8f2f97a4345749bf27f32e8e24fa74e2a5a75154" translate="yes" xml:space="preserve">
          <source>Hidden characters such as the backspace character (&lt;code&gt;\b&lt;/code&gt;, &lt;code&gt;^H&lt;/code&gt;) can cause text to render differently in HTML than how it is interpreted if &lt;a href=&quot;https://security.stackexchange.com/q/39118&quot;&gt;pasted into a terminal&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e87157723c34c744feedc125de7ca0448c2c92c2" translate="yes" xml:space="preserve">
          <source>History of HTML5</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ab32f1070a1d72abbffdd10095567593e0a5e0a2" translate="yes" xml:space="preserve">
          <source>History of XHTML</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e1993822ab994ac5d511a886b06b5bb38d31f8f7" translate="yes" xml:space="preserve">
          <source>Holds the path to the instance folder.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6a9f2ad3318d5023767a1899a377ee407450a192" translate="yes" xml:space="preserve">
          <source>Hook. Extend.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a2f12d7b800cf6cc6fb149d27038b0bbc7451863" translate="yes" xml:space="preserve">
          <source>Hooking in WSGI Middleware</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0dc31d2de482d0e2f889d3090aeacf7cc57ed56f" translate="yes" xml:space="preserve">
          <source>Hosted options</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="18a39a6d0f98a72c12a0931758ff6fd73b7da33c" translate="yes" xml:space="preserve">
          <source>How can you prevent that? Basically for each request that modifies content on the server you would have to either use a one-time token and store that in the cookie &lt;strong&gt;and&lt;/strong&gt; also transmit it with the form data. After receiving the data on the server again, you would then have to compare the two tokens and ensure they are equal.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="33c571c2482df1d76606439c867c2a60f80f6a2d" translate="yes" xml:space="preserve">
          <source>How the Context Works</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="afe184f305cda6085301e61fa0f7567846827e31" translate="yes" xml:space="preserve">
          <source>How to contribute to Flask</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="de45f6f0a2da8e60eae750338ca57f9ce8c7fe3b" translate="yes" xml:space="preserve">
          <source>How to generate good secret keys</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c8648573eb8989aeb828922f9607ff461ba4eaf8" translate="yes" xml:space="preserve">
          <source>However this requires that our server already has the &lt;code&gt;/var/www/yourapplication&lt;/code&gt; folder created and &lt;code&gt;/var/www/yourapplication/env&lt;/code&gt; to be a virtual environment. Furthermore are we not creating the configuration or &lt;code&gt;.wsgi&lt;/code&gt; file on the server. So how do we bootstrap a new server into our infrastructure?</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4e20dc778842f13f42a27f3dc1536160f3b3cb42" translate="yes" xml:space="preserve">
          <source>However, if the blueprint does not have a &lt;code&gt;url_prefix&lt;/code&gt;, it is not possible to access the blueprint&amp;rsquo;s static folder. This is because the URL would be &lt;code&gt;/static&lt;/code&gt; in this case, and the application&amp;rsquo;s &lt;code&gt;/static&lt;/code&gt; route takes precedence. Unlike template folders, blueprint static folders are not searched if the file does not exist in the application static folder.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d53d672d6e82f58cd69977da260d6994e5b9fd67" translate="yes" xml:space="preserve">
          <source>I won&amp;rsquo;t go into detail here about how jQuery works, just a very quick explanation of the little bit of code above:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="83c38317c2728b89aa5b994e15204bf11f68863b" translate="yes" xml:space="preserve">
          <source>If &lt;a href=&quot;#flask.Flask.propagate_exceptions&quot;&gt;&lt;code&gt;propagate_exceptions&lt;/code&gt;&lt;/a&gt; is &lt;code&gt;True&lt;/code&gt;, such as in debug mode, the error will be re-raised so that the debugger can display it. Otherwise, the original exception is logged, and an &lt;a href=&quot;https://werkzeug.palletsprojects.com/en/1.0.x/exceptions/#werkzeug.exceptions.InternalServerError&quot;&gt;&lt;code&gt;InternalServerError&lt;/code&gt;&lt;/a&gt; is returned.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d73563f425afc6cccf62dd18c4caa8095aa2f14d" translate="yes" xml:space="preserve">
          <source>If &lt;a href=&quot;#flask.sessions.SessionInterface.open_session&quot;&gt;&lt;code&gt;open_session()&lt;/code&gt;&lt;/a&gt; returns &lt;code&gt;None&lt;/code&gt; Flask will call into &lt;a href=&quot;#flask.sessions.SessionInterface.make_null_session&quot;&gt;&lt;code&gt;make_null_session()&lt;/code&gt;&lt;/a&gt; to create a session that acts as replacement if the session support cannot work because some requirement is not fulfilled. The default &lt;a href=&quot;#flask.sessions.NullSession&quot;&gt;&lt;code&gt;NullSession&lt;/code&gt;&lt;/a&gt; class that is created will complain that the secret key was not set.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1f6ba9d2828ca44174bbd6d652513f2f7151ba16" translate="yes" xml:space="preserve">
          <source>If &lt;a href=&quot;../api/index#flask.signals.signals_available&quot;&gt;&lt;code&gt;signals_available&lt;/code&gt;&lt;/a&gt; is true, the following signals are sent:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6435a8fad15f8208e40c19ff587755730cfbad02" translate="yes" xml:space="preserve">
          <source>If &lt;a href=&quot;../api/index#flask.signals.signals_available&quot;&gt;&lt;code&gt;signals_available&lt;/code&gt;&lt;/a&gt; is true, the following signals are sent: &lt;a href=&quot;../api/index#flask.appcontext_pushed&quot;&gt;&lt;code&gt;appcontext_pushed&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../api/index#flask.appcontext_tearing_down&quot;&gt;&lt;code&gt;appcontext_tearing_down&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;../api/index#flask.appcontext_popped&quot;&gt;&lt;code&gt;appcontext_popped&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a9379e74c8121313abe8e72a58aaa425e3e5a993" translate="yes" xml:space="preserve">
          <source>If &lt;a href=&quot;https://github.com/theskumar/python-dotenv#readme&quot;&gt;python-dotenv&lt;/a&gt; is installed, running the &lt;code&gt;flask&lt;/code&gt; command will set environment variables defined in the files &lt;code&gt;.env&lt;/code&gt; and &lt;code&gt;.flaskenv&lt;/code&gt;. This can be used to avoid having to set &lt;code&gt;FLASK_APP&lt;/code&gt; manually every time you open a new terminal, and to set configuration using environment variables similar to how some deployment services work.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b8c22e38f2591a439dd091afd294c3c02d99894d" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;FLASK_APP&lt;/code&gt; is not set, the command will try to import &amp;ldquo;app&amp;rdquo; or &amp;ldquo;wsgi&amp;rdquo; (as a &amp;ldquo;.py&amp;rdquo; file, or package) and try to detect an application instance or factory.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="77421760d1261f970b1769311a4b8b6cd975de2a" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;GET&lt;/code&gt; is present, Flask automatically adds support for the &lt;code&gt;HEAD&lt;/code&gt; method and handles &lt;code&gt;HEAD&lt;/code&gt; requests according to the &lt;a href=&quot;https://www.ietf.org/rfc/rfc2068.txt&quot;&gt;HTTP RFC&lt;/a&gt;. Likewise, &lt;code&gt;OPTIONS&lt;/code&gt; is automatically implemented for you.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a0c844f29923da60b3760a49fdfa670a08e7a602" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;as_text&lt;/code&gt; is set to &lt;code&gt;True&lt;/code&gt; the return value will be a decoded unicode string.</source>
          <target state="new"/>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
