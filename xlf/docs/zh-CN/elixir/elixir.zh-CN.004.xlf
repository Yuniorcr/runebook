<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="zh-CN" datatype="htmlbody" original="elixir">
    <body>
      <group id="elixir">
        <trans-unit id="f364101757fd7b07c462556f8631107344aea9a7" translate="yes" xml:space="preserve">
          <source>Anti-patterns</source>
          <target state="translated">Anti-patterns</target>
        </trans-unit>
        <trans-unit id="bf6f13831a7432164063eab288ffb17f48516527" translate="yes" xml:space="preserve">
          <source>Any Elixir code can be represented using Elixir data structures. The building block of Elixir macros is a tuple with three elements, for example:</source>
          <target state="translated">任何Elixir代码都可以使用Elixir数据结构来表示。Elixir宏的构件是一个有三个元素的元组,例如:</target>
        </trans-unit>
        <trans-unit id="cc4013b8d32a07ea1cafd334cef7889bf5c90d15" translate="yes" xml:space="preserve">
          <source>Any arbitrary configuration can also be passed to &lt;a href=&quot;#configure/1&quot;&gt;&lt;code&gt;configure/1&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;#start/1&quot;&gt;&lt;code&gt;start/1&lt;/code&gt;&lt;/a&gt;, and these options can then be used in places such as custom formatters. These other options will be ignored by ExUnit itself.</source>
          <target state="translated">也可以将任何任意配置传递给&lt;a href=&quot;#configure/1&quot;&gt; &lt;code&gt;configure/1&lt;/code&gt; &lt;/a&gt;或&lt;a href=&quot;#start/1&quot;&gt; &lt;code&gt;start/1&lt;/code&gt; &lt;/a&gt;，然后可以在诸如自定义格式化程序之类的地方使用这些选项。这些其他选项将被ExUnit本身忽略。</target>
        </trans-unit>
        <trans-unit id="ddb0b53128202d492ea01bc6e15be1d122ecf8de" translate="yes" xml:space="preserve">
          <source>Any developer can create their own &lt;a href=&quot;#content&quot;&gt;&lt;code&gt;Logger&lt;/code&gt;&lt;/a&gt; backend. Since &lt;a href=&quot;#content&quot;&gt;&lt;code&gt;Logger&lt;/code&gt;&lt;/a&gt; is an event manager powered by &lt;code&gt;:gen_event&lt;/code&gt;, writing a new backend is a matter of creating an event handler, as described in the &lt;a href=&quot;http://erlang.org/doc/man/gen_event.html&quot;&gt;&lt;code&gt;:gen_event&lt;/code&gt;&lt;/a&gt; documentation.</source>
          <target state="translated">任何开发人员都可以创建自己的&lt;a href=&quot;#content&quot;&gt; &lt;code&gt;Logger&lt;/code&gt; &lt;/a&gt;后端。由于&lt;a href=&quot;#content&quot;&gt; &lt;code&gt;Logger&lt;/code&gt; &lt;/a&gt;是由 &lt;code&gt;:gen_event&lt;/code&gt; 支持的事件管理器，因此如&lt;a href=&quot;http://erlang.org/doc/man/gen_event.html&quot;&gt; &lt;code&gt;:gen_event&lt;/code&gt; &lt;/a&gt;文档中所述，编写新的后端只需创建一个事件处理程序即可。</target>
        </trans-unit>
        <trans-unit id="0eda7adbc051844f9bb1f76988dfdbc8ee614b71" translate="yes" xml:space="preserve">
          <source>Any expression is allowed to serve as a default value, but it won&amp;rsquo;t be evaluated during the function definition. Every time the function is invoked and any of its default values have to be used, the expression for that default value will be evaluated:</source>
          <target state="translated">任何表达式都可以用作默认值，但是在函数定义期间不会对其进行求值。每次调用该函数且必须使用其任何默认值时，都会对该默认值的表达式求值：</target>
        </trans-unit>
        <trans-unit id="51294445c2892caace0f93beba65cca2df4db722" translate="yes" xml:space="preserve">
          <source>Any functions may be called when defining a module attribute.</source>
          <target state="translated">在定义模块属性时,可以调用任何函数。</target>
        </trans-unit>
        <trans-unit id="168da730b1d34c5154e469d6a2c57e8cc938548d" translate="yes" xml:space="preserve">
          <source>Any map/struct that contains the date fields</source>
          <target state="translated">任何包含日期字段的地图/结构</target>
        </trans-unit>
        <trans-unit id="6009b6eb66ee2e5f4fe90dd4f8cc38fa5add92f6" translate="yes" xml:space="preserve">
          <source>Any map/struct that contains the datetime fields</source>
          <target state="translated">任何包含日期时间字段的地图/结构。</target>
        </trans-unit>
        <trans-unit id="bdac0a5a4c31c821fbdf66fa2f00b8ebf1826565" translate="yes" xml:space="preserve">
          <source>Any map/struct that contains the naive_datetime fields</source>
          <target state="translated">任何包含naive_datetime字段的映射/结构。</target>
        </trans-unit>
        <trans-unit id="c72e818c080afa7ce37cf5ba8b92ceb1c5d794de" translate="yes" xml:space="preserve">
          <source>Any map/struct that contains the time fields</source>
          <target state="translated">任何包含时间字段的地图/结构</target>
        </trans-unit>
        <trans-unit id="f0169052fc32e3ac2806fe55bbfa851febc0b349" translate="yes" xml:space="preserve">
          <source>Any module is also able to define its own types and the modules in Elixir are no exception. For example, the &lt;a href=&quot;range&quot;&gt;&lt;code&gt;Range&lt;/code&gt;&lt;/a&gt; module defines a &lt;a href=&quot;t:Range.t/0&quot;&gt;&lt;code&gt;t/0&lt;/code&gt;&lt;/a&gt; type that represents a range: this type can be referred to as &lt;a href=&quot;range#t:t/0&quot;&gt;&lt;code&gt;Range.t/0&lt;/code&gt;&lt;/a&gt;. In a similar fashion, a string is &lt;a href=&quot;string#t:t/0&quot;&gt;&lt;code&gt;String.t/0&lt;/code&gt;&lt;/a&gt;, any enumerable can be &lt;a href=&quot;enum#t:t/0&quot;&gt;&lt;code&gt;Enum.t/0&lt;/code&gt;&lt;/a&gt;, and so on.</source>
          <target state="translated">任何模块都能够定义自己的类型，Elixir中的模块也不例外。例如，&lt;a href=&quot;range&quot;&gt; &lt;code&gt;Range&lt;/code&gt; &lt;/a&gt;模块定义了表示范围的&lt;a href=&quot;t:Range.t/0&quot;&gt; &lt;code&gt;t/0&lt;/code&gt; &lt;/a&gt;类型：此类型可以称为&lt;a href=&quot;range#t:t/0&quot;&gt; &lt;code&gt;Range.t/0&lt;/code&gt; &lt;/a&gt;。以类似的方式，字符串是&lt;a href=&quot;string#t:t/0&quot;&gt; &lt;code&gt;String.t/0&lt;/code&gt; &lt;/a&gt;，任何可枚举的都可以是&lt;a href=&quot;enum#t:t/0&quot;&gt; &lt;code&gt;Enum.t/0&lt;/code&gt; &lt;/a&gt;，依此类推。</target>
        </trans-unit>
        <trans-unit id="8630a55fc792a79de5fdbeb3cf17c110eb8b5440" translate="yes" xml:space="preserve">
          <source>Any module that contains a call to the &lt;a href=&quot;#defexception/1&quot;&gt;&lt;code&gt;defexception/1&lt;/code&gt;&lt;/a&gt; macro automatically implements the &lt;a href=&quot;exception#c:exception/1&quot;&gt;&lt;code&gt;Exception.exception/1&lt;/code&gt;&lt;/a&gt; callback expected by &lt;a href=&quot;#raise/2&quot;&gt;&lt;code&gt;raise/2&lt;/code&gt;&lt;/a&gt;. For more information, see &lt;a href=&quot;#defexception/1&quot;&gt;&lt;code&gt;defexception/1&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">任何包含对&lt;a href=&quot;#defexception/1&quot;&gt; &lt;code&gt;defexception/1&lt;/code&gt; &lt;/a&gt;宏的调用的模块都将自动实现&lt;a href=&quot;#raise/2&quot;&gt; &lt;code&gt;raise/2&lt;/code&gt; &lt;/a&gt;期望的&lt;a href=&quot;exception#c:exception/1&quot;&gt; &lt;code&gt;Exception.exception/1&lt;/code&gt; &lt;/a&gt;回调。有关更多信息，请参见&lt;a href=&quot;#defexception/1&quot;&gt; &lt;code&gt;defexception/1&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="75747731e474a8178e05e264cb1563d939c05224" translate="yes" xml:space="preserve">
          <source>Any other exit reason will cause the operating system process to exit with status &lt;code&gt;1&lt;/code&gt; and linked Erlang processes to crash.</source>
          <target state="translated">任何其他退出原因都将导致操作系统进程以状态 &lt;code&gt;1&lt;/code&gt; 退出，并且链接的Erlang进程崩溃。</target>
        </trans-unit>
        <trans-unit id="0f5f30288dbfabd82f00bbad3a6e84be7fe32c88" translate="yes" xml:space="preserve">
          <source>Any other value, such as a map or a four-element tuple, must be escaped (&lt;a href=&quot;macro#escape/1&quot;&gt;&lt;code&gt;Macro.escape/1&lt;/code&gt;&lt;/a&gt;) before being introduced into an AST.</source>
          <target state="translated">在引入AST之前，必须先对其他任何值（例如映射或四元素元组）进行转义（&lt;a href=&quot;macro#escape/1&quot;&gt; &lt;code&gt;Macro.escape/1&lt;/code&gt; &lt;/a&gt;）。</target>
        </trans-unit>
        <trans-unit id="21dbf38e245345b7875ff893e598c955362174cf" translate="yes" xml:space="preserve">
          <source>Any protocol module contains three extra functions:</source>
          <target state="translated">任何协议模块都包含三个额外的功能。</target>
        </trans-unit>
        <trans-unit id="9f90ff0f062168c098cc8f21cea2c19c727f8a1e" translate="yes" xml:space="preserve">
          <source>Appends a path to the end of the Erlang VM code path list.</source>
          <target state="translated">将一个路径添加到Erlang VM代码路径列表的末尾。</target>
        </trans-unit>
        <trans-unit id="b291beb8793f4f3308c463951165dad483715a6c" translate="yes" xml:space="preserve">
          <source>Application</source>
          <target state="translated">Application</target>
        </trans-unit>
        <trans-unit id="97e8780936863ac8125cd13898e95fb6c124a954" translate="yes" xml:space="preserve">
          <source>Application &lt;small&gt;behaviour&lt;/small&gt;</source>
          <target state="translated">应用&lt;small&gt;行为&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="1631e1c82584aae550c9008087504b1cc7b074ed" translate="yes" xml:space="preserve">
          <source>Application callback modules may also implement the optional callback &lt;a href=&quot;#c:prep_stop/1&quot;&gt;&lt;code&gt;prep_stop/1&lt;/code&gt;&lt;/a&gt;. If present, &lt;a href=&quot;#c:prep_stop/1&quot;&gt;&lt;code&gt;prep_stop/1&lt;/code&gt;&lt;/a&gt; is invoked before the supervision tree is terminated. Its argument is the state returned by &lt;a href=&quot;#c:start/2&quot;&gt;&lt;code&gt;start/2&lt;/code&gt;&lt;/a&gt;, if it did, or &lt;code&gt;[]&lt;/code&gt; otherwise, and its return value is passed to &lt;a href=&quot;#c:stop/1&quot;&gt;&lt;code&gt;stop/1&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">应用程序回调模块还可以实现可选的回调&lt;a href=&quot;#c:prep_stop/1&quot;&gt; &lt;code&gt;prep_stop/1&lt;/code&gt; &lt;/a&gt;。如果存在，则在终止监管树之前调用&lt;a href=&quot;#c:prep_stop/1&quot;&gt; &lt;code&gt;prep_stop/1&lt;/code&gt; &lt;/a&gt;。它的参数是&lt;a href=&quot;#c:start/2&quot;&gt; &lt;code&gt;start/2&lt;/code&gt; &lt;/a&gt;返回的状态（如果存在），否则为 &lt;code&gt;[]&lt;/code&gt; ，其返回值传递到&lt;a href=&quot;#c:stop/1&quot;&gt; &lt;code&gt;stop/1&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="1ce84d4d04cdd60bd8ab75207bda952026831b49" translate="yes" xml:space="preserve">
          <source>Application configuration</source>
          <target state="translated">应用配置</target>
        </trans-unit>
        <trans-unit id="eb463fa74d812fcc05af997894ad4ba18a4c240c" translate="yes" xml:space="preserve">
          <source>Application configuration - must be set before the &lt;code&gt;:logger&lt;/code&gt; application is started</source>
          <target state="translated">应用程序配置-必须在启动 &lt;code&gt;:logger&lt;/code&gt; 应用程序之前进行设置</target>
        </trans-unit>
        <trans-unit id="6bfdc5f066d27eac11710638a304662a34399413" translate="yes" xml:space="preserve">
          <source>Application environment</source>
          <target state="translated">应用环境</target>
        </trans-unit>
        <trans-unit id="133263b1a0a761afc7a839c1e0d9f30d4370bf27" translate="yes" xml:space="preserve">
          <source>Applications are &lt;em&gt;loaded&lt;/em&gt;, which means that the runtime finds and processes their resource files:</source>
          <target state="translated">应用程序已&lt;em&gt;加载&lt;/em&gt;，这意味着运行时将查找并处理其资源文件：</target>
        </trans-unit>
        <trans-unit id="72f9cc4dac3452357e96e709303ddb464195b4c3" translate="yes" xml:space="preserve">
          <source>Applications are also &lt;em&gt;started&lt;/em&gt;:</source>
          <target state="translated">应用程序也&lt;em&gt;开始了&lt;/em&gt;：</target>
        </trans-unit>
        <trans-unit id="8e022aa7ab84d060d734fd766d3347c2181f8ccb" translate="yes" xml:space="preserve">
          <source>Applications are specified in their &lt;a href=&quot;http://erlang.org/doc/man/app.html&quot;&gt;&lt;em&gt;resource file&lt;/em&gt;&lt;/a&gt;, which is a file called &lt;code&gt;APP.app&lt;/code&gt;, where &lt;code&gt;APP&lt;/code&gt; is the application name. For example, the application resource file of the OTP application &lt;code&gt;ex_unit&lt;/code&gt; is called &lt;code&gt;ex_unit.app&lt;/code&gt;.</source>
          <target state="translated">应用程序在其&lt;a href=&quot;http://erlang.org/doc/man/app.html&quot;&gt;&lt;em&gt;资源文件&lt;/em&gt;&lt;/a&gt;中指定，该&lt;em&gt;资源文件&lt;/em&gt;是名为 &lt;code&gt;APP.app&lt;/code&gt; 的文件，其中 &lt;code&gt;APP&lt;/code&gt; 是应用程序名称。例如，OTP应用程序 &lt;code&gt;ex_unit&lt;/code&gt; 的应用程序资源文件称为 &lt;code&gt;ex_unit.app&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="43a3c55fce58945b7955ada014ceb15badbab6c6" translate="yes" xml:space="preserve">
          <source>Applications are the idiomatic way to package software in Erlang/OTP. To get the idea, they are similar to the &quot;library&quot; concept common in other programming languages, but with some additional characteristics.</source>
          <target state="translated">应用程序是在Erlang/OTP中打包软件的惯用方式。要知道,它们类似于其他编程语言中常见的 &quot;库 &quot;概念,但有一些额外的特征。</target>
        </trans-unit>
        <trans-unit id="b4dbd62a16fa04d91bfc40f06c512edf333a1fbe" translate="yes" xml:space="preserve">
          <source>Applications with supervision tree</source>
          <target state="translated">监管树的应用</target>
        </trans-unit>
        <trans-unit id="bac054c1e14c519b199d2517df6a0101c94441d1" translate="yes" xml:space="preserve">
          <source>Applies the given function to each element in the &lt;code&gt;enumerable&lt;/code&gt;, storing the result in a list and passing it as the accumulator for the next computation. Uses the first element in the &lt;code&gt;enumerable&lt;/code&gt; as the starting value.</source>
          <target state="translated">将给定函数应用于 &lt;code&gt;enumerable&lt;/code&gt; 每个元素，将结果存储在列表中，并将其作为累加器传递给下一次计算。将 &lt;code&gt;enumerable&lt;/code&gt; 的第一个元素用作起始值。</target>
        </trans-unit>
        <trans-unit id="2f961980e9fba3a80a3fe84a5a33a282dd684b9a" translate="yes" xml:space="preserve">
          <source>Applies the given function to each element in the &lt;code&gt;enumerable&lt;/code&gt;, storing the result in a list and passing it as the accumulator for the next computation. Uses the given &lt;code&gt;acc&lt;/code&gt; as the starting value.</source>
          <target state="translated">将给定函数应用于 &lt;code&gt;enumerable&lt;/code&gt; 每个元素，将结果存储在列表中，并将其作为累加器传递给下一次计算。使用给定的 &lt;code&gt;acc&lt;/code&gt; 作为起始值。</target>
        </trans-unit>
        <trans-unit id="71a330535e646341a3e67bdc7aa7099b09d7d159" translate="yes" xml:space="preserve">
          <source>Applies the given function to the node metadata if it contains one.</source>
          <target state="translated">将给定的函数应用于节点元数据(如果它包含一个)。</target>
        </trans-unit>
        <trans-unit id="41ed7b8f7c8e97d4eaa49d91cf5d985f2894e409" translate="yes" xml:space="preserve">
          <source>ArgumentError</source>
          <target state="translated">ArgumentError</target>
        </trans-unit>
        <trans-unit id="05067852bd2137fdf10aad2ca39e484ed4d4c628" translate="yes" xml:space="preserve">
          <source>ArgumentError &lt;small&gt;exception&lt;/small&gt;</source>
          <target state="translated">ArgumentError &lt;small&gt;异常&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="cbb9fa252e60809efa55a7ad83aea5438ef56753" translate="yes" xml:space="preserve">
          <source>Arguments</source>
          <target state="translated">Arguments</target>
        </trans-unit>
        <trans-unit id="0953d0a8d8a481b72be4dd1a2e649d93e22bf086" translate="yes" xml:space="preserve">
          <source>Arguments given to the alias will be appended to the arguments of the last task in the list, if the last task is a function they will be given as a list of strings to the function.</source>
          <target state="translated">给别名的参数将附加到列表中最后一个任务的参数中,如果最后一个任务是一个函数,它们将以字符串列表的形式给函数。</target>
        </trans-unit>
        <trans-unit id="655bc33009493f707144bb646531efed13876152" translate="yes" xml:space="preserve">
          <source>Arithmetic addition.</source>
          <target state="translated">算术加法。</target>
        </trans-unit>
        <trans-unit id="9681d96eaf931c989e28ccf9f0440d77ba06dd99" translate="yes" xml:space="preserve">
          <source>Arithmetic division.</source>
          <target state="translated">算术除法。</target>
        </trans-unit>
        <trans-unit id="4a61e0447f1394155d9609b0e8ddd9ef54c528e0" translate="yes" xml:space="preserve">
          <source>Arithmetic multiplication.</source>
          <target state="translated">算术乘法。</target>
        </trans-unit>
        <trans-unit id="da79f19cf7e168e8190dfbc95a70f65090f55686" translate="yes" xml:space="preserve">
          <source>Arithmetic subtraction.</source>
          <target state="translated">算术减法。</target>
        </trans-unit>
        <trans-unit id="1a3bb43ad05ec69548de8b5dbef76098f6a10101" translate="yes" xml:space="preserve">
          <source>Arithmetic unary minus.</source>
          <target state="translated">算术单项减法。</target>
        </trans-unit>
        <trans-unit id="cf96a5cfba060ff295e5568cfb369fe78d6a4661" translate="yes" xml:space="preserve">
          <source>Arithmetic unary plus.</source>
          <target state="translated">算术单数加。</target>
        </trans-unit>
        <trans-unit id="5509c94c0f9f738717633e15c4c8dbc85e63a4c9" translate="yes" xml:space="preserve">
          <source>ArithmeticError</source>
          <target state="translated">ArithmeticError</target>
        </trans-unit>
        <trans-unit id="8a7db15e8806afedd47b1c010408683e54e7f2aa" translate="yes" xml:space="preserve">
          <source>ArithmeticError &lt;small&gt;exception&lt;/small&gt;</source>
          <target state="translated">ArithmeticError &lt;small&gt;异常&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="8a481eb9afcf30f19b235a484387c683a5bc9ce7" translate="yes" xml:space="preserve">
          <source>As &amp;ldquo;constants&amp;rdquo;</source>
          <target state="translated">作为&amp;ldquo;常量&amp;rdquo;</target>
        </trans-unit>
        <trans-unit id="5a534e4a24eb4e108c8c81b831db9cad75e840a4" translate="yes" xml:space="preserve">
          <source>As IEx evaluates its input line by line, it will first encounter &lt;code&gt;[1, [2], 3]&lt;/code&gt;. As a list is a valid expression, IEx will evaluate it immediately before looking at the next input line. Only then will IEx attempt to evaluate the now incomplete expression &lt;code&gt;|&amp;gt; List.flatten()&lt;/code&gt;, which on its own is missing its left operand. The evaluation thus fails with the above syntax error.</source>
          <target state="translated">当IEx逐行评估其输入时，它将首先遇到 &lt;code&gt;[1, [2], 3]&lt;/code&gt; 。由于列表是有效的表达式，因此IEx将在查看下一个输入行之前立即对其进行求值。只有这样， &lt;code&gt;|&amp;gt; List.flatten()&lt;/code&gt; 才会尝试计算现在不完整的表达式|&amp;gt; List.flatten（），该表达式本身缺少左操作数。因此，评估由于上述语法错误而失败。</target>
        </trans-unit>
        <trans-unit id="af041e603020699ecc4a407c05175708814edeb5" translate="yes" xml:space="preserve">
          <source>As a library author, it is your responsibility to make sure users are not required to use exceptions for control-flow in their applications. You can follow the same convention as Elixir here, using the name without &lt;code&gt;!&lt;/code&gt; for returning &lt;code&gt;:ok&lt;/code&gt;/&lt;code&gt;:error&lt;/code&gt; tuples and appending &lt;code&gt;!&lt;/code&gt; for a version of the function which raises an exception.</source>
          <target state="translated">作为图书馆作者，您有责任确保用户在应用程序中无需对控制流使用例外。您可以在此处遵循与Elixir相同的约定，使用名称不带 &lt;code&gt;!&lt;/code&gt; 返回 &lt;code&gt;:ok&lt;/code&gt; / &lt;code&gt;:error&lt;/code&gt; 元组并追加 &lt;code&gt;!&lt;/code&gt; 对于引发异常的函数版本。</target>
        </trans-unit>
        <trans-unit id="77c3cf325603a665b9b8eac02035614c9c18c7ae" translate="yes" xml:space="preserve">
          <source>As a provider</source>
          <target state="translated">作为提供者</target>
        </trans-unit>
        <trans-unit id="99a1d5c639e5fae94bea39706a508ae1b1b194aa" translate="yes" xml:space="preserve">
          <source>As a rule of thumb, use &lt;code&gt;and&lt;/code&gt;, &lt;code&gt;or&lt;/code&gt; and &lt;code&gt;not&lt;/code&gt; when you are expecting booleans. If any of the arguments are non-boolean, use &lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt;, &lt;code&gt;||&lt;/code&gt; and &lt;code&gt;!&lt;/code&gt;.</source>
          <target state="translated">由于拇指，使用规则 &lt;code&gt;and&lt;/code&gt; ， &lt;code&gt;or&lt;/code&gt; 和 &lt;code&gt;not&lt;/code&gt; 当你期待布尔值。如果任何参数不是布尔值，请使用 &lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt; ， &lt;code&gt;||&lt;/code&gt; 和 &lt;code&gt;!&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="9d342dd5680ead35a3c501294db776be8ca86c04" translate="yes" xml:space="preserve">
          <source>As a short summary, prefer to using the &lt;code&gt;:spawn&lt;/code&gt; and &lt;code&gt;:spawn_executable&lt;/code&gt; options mentioned below. The other two options, &lt;code&gt;:spawn_driver&lt;/code&gt; and &lt;code&gt;:fd&lt;/code&gt; are for advanced usage within the VM. Also consider using &lt;a href=&quot;system#cmd/3&quot;&gt;&lt;code&gt;System.cmd/3&lt;/code&gt;&lt;/a&gt; if all you want is to execute a program and retrieve its return value.</source>
          <target state="translated">作为简短的摘要，更喜欢使用 &lt;code&gt;:spawn_executable&lt;/code&gt; 的 &lt;code&gt;:spawn&lt;/code&gt; 和：spawn_executable选项。其他两个选项 &lt;code&gt;:spawn_driver&lt;/code&gt; 和 &lt;code&gt;:fd&lt;/code&gt; 用于VM内的高级用法。如果只想执行一个程序并获取其返回值，也可以考虑使用&lt;a href=&quot;system#cmd/3&quot;&gt; &lt;code&gt;System.cmd/3&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="cb104516ec4ba9c5daae1d819dfced70e5b80a3a" translate="yes" xml:space="preserve">
          <source>As a starting point, let&amp;rsquo;s define a release that includes both &lt;code&gt;:kv_server&lt;/code&gt; and &lt;code&gt;:kv&lt;/code&gt; applications. We will also add a version to it. Open up the &lt;code&gt;mix.exs&lt;/code&gt; in the umbrella root and add inside &lt;code&gt;def project&lt;/code&gt;:</source>
          <target state="translated">首先，让我们定义一个同时包含 &lt;code&gt;:kv_server&lt;/code&gt; 和 &lt;code&gt;:kv&lt;/code&gt; 应用程序的发行版。我们还将向其中添加一个版本。在伞根中打开 &lt;code&gt;mix.exs&lt;/code&gt; 并在 &lt;code&gt;def project&lt;/code&gt; 添加以下内容：</target>
        </trans-unit>
        <trans-unit id="71409663988da93d2218196a4f8d08db41758aae" translate="yes" xml:space="preserve">
          <source>As an alternative to &lt;code&gt;Enum&lt;/code&gt;, Elixir provides &lt;a href=&quot;https://hexdocs.pm/elixir/Stream.html&quot;&gt;the &lt;code&gt;Stream&lt;/code&gt; module&lt;/a&gt; which supports lazy operations:</source>
          <target state="translated">作为 &lt;code&gt;Enum&lt;/code&gt; 的替代，Elixir提供&lt;a href=&quot;https://hexdocs.pm/elixir/Stream.html&quot;&gt;了 &lt;code&gt;Stream&lt;/code&gt; 模块&lt;/a&gt;，该模块支持惰性操作：</target>
        </trans-unit>
        <trans-unit id="1e751881fcb15d693b8ad4d4a8a7706bd11e93e1" translate="yes" xml:space="preserve">
          <source>As an example, &lt;a href=&quot;https://hexdocs.pm/ex_unit/ExUnit.html&quot;&gt;&lt;code&gt;ExUnit&lt;/code&gt;&lt;/a&gt; stores the AST of every assertion, so when an assertion fails we can show code snippets to users. Without this option, each time the test module is compiled, we get a different MD5 of the module byte code, because the AST contains metadata, such as counters, specific to the compilation environment. By pruning the metadata, we ensure that the module is deterministic and reduce the amount of data &lt;a href=&quot;https://hexdocs.pm/ex_unit/ExUnit.html&quot;&gt;&lt;code&gt;ExUnit&lt;/code&gt;&lt;/a&gt; needs to keep around.</source>
          <target state="translated">例如，&lt;a href=&quot;https://hexdocs.pm/ex_unit/ExUnit.html&quot;&gt; &lt;code&gt;ExUnit&lt;/code&gt; &lt;/a&gt;存储每个断言的AST，因此，当断言失败时，我们可以向用户显示代码片段。如果没有此选项，则每次编译测试模块时，我们都会获得不同的模块字节代码MD5，因为AST包含特定于编译环境的元数据，例如计数器。通过修剪元数据，我们确保模块是确定性的，并减少了&lt;a href=&quot;https://hexdocs.pm/ex_unit/ExUnit.html&quot;&gt; &lt;code&gt;ExUnit&lt;/code&gt; &lt;/a&gt;需要保留的数据量。</target>
        </trans-unit>
        <trans-unit id="0349a9ec4dea6160dbbe7ca7df0fd8cda00d0b76" translate="yes" xml:space="preserve">
          <source>As an example, here is the implementation of &lt;code&gt;reduce&lt;/code&gt; for lists:</source>
          <target state="translated">作为一个例子，这里是实施 &lt;code&gt;reduce&lt;/code&gt; 对列表：</target>
        </trans-unit>
        <trans-unit id="464ac5e237ea0054e115f37d2c18ebb476327aba" translate="yes" xml:space="preserve">
          <source>As an example, when &lt;code&gt;Mix.shell.info(&quot;hello&quot;)&lt;/code&gt; is called, the following message will be sent to the calling process:</source>
          <target state="translated">例如，当 &lt;code&gt;Mix.shell.info(&quot;hello&quot;)&lt;/code&gt; ，以下消息将发送到调用进程：</target>
        </trans-unit>
        <trans-unit id="dc93e8a699323a5ad9c331b0b8b1db6ef13f00e3" translate="yes" xml:space="preserve">
          <source>As an interactive shell, IEx evaluates expressions. This has some interesting consequences that are worth discussing.</source>
          <target state="translated">作为一个交互式的shell,IEx会评估表达式。这有一些有趣的后果,值得讨论。</target>
        </trans-unit>
        <trans-unit id="85b7c3a4aee2708f25f8484199a1fbbe55745c55" translate="yes" xml:space="preserve">
          <source>As annotations</source>
          <target state="translated">作为注释</target>
        </trans-unit>
        <trans-unit id="b3d151430c89c74eb889709b00af1b8cd57bf29f" translate="yes" xml:space="preserve">
          <source>As before, if &lt;code&gt;heavy_fun/0&lt;/code&gt; fails, the whole computation will fail, including the parent process. If you don't want the task to fail then you must change the &lt;code&gt;heavy_fun/0&lt;/code&gt; code in the same way you would achieve it if you didn't have the async call. For example, to either return &lt;code&gt;{:ok, val} | :error&lt;/code&gt; results or, in more extreme cases, by using &lt;code&gt;try/rescue&lt;/code&gt;. In other words, an asynchronous task should be thought of as an extension of a process rather than a mechanism to isolate it from all errors.</source>
          <target state="translated">和以前一样，如果 &lt;code&gt;heavy_fun/0&lt;/code&gt; 失败，则整个计算将失败，包括父进程。如果您不希望任务失败，那么您必须以没有异步调用的方式来更改 &lt;code&gt;heavy_fun/0&lt;/code&gt; 代码。例如，要返回 &lt;code&gt;{:ok, val} | :error&lt;/code&gt; 结果，或者在更极端的情况下，使用 &lt;code&gt;try/rescue&lt;/code&gt; 。换句话说，应该将异步任务视为流程的扩展，而不是将其与所有错误隔离的机制。</target>
        </trans-unit>
        <trans-unit id="92c62ad7d5aa1057f77beb16eeaa0f4ad0108cba" translate="yes" xml:space="preserve">
          <source>As can be seen in the example above, &lt;code&gt;@doc&lt;/code&gt; and &lt;code&gt;@typedoc&lt;/code&gt; also accept a keyword list that serves as a way to provide arbitrary metadata about the entity. Tools like &lt;a href=&quot;https://hexdocs.pm/ex_doc/&quot;&gt;&lt;code&gt;ExDoc&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;https://hexdocs.pm/iex/IEx.html&quot;&gt;&lt;code&gt;IEx&lt;/code&gt;&lt;/a&gt; may use this information to display annotations. A common use case is &lt;code&gt;since&lt;/code&gt; that may be used to annotate in which version the function was introduced.</source>
          <target state="translated">从上面的示例中可以看出， &lt;code&gt;@doc&lt;/code&gt; 和 &lt;code&gt;@typedoc&lt;/code&gt; 也接受关键字列表，该列表用作提供有关实体的任意元数据的方式。诸如&lt;a href=&quot;https://hexdocs.pm/ex_doc/&quot;&gt; &lt;code&gt;ExDoc&lt;/code&gt; &lt;/a&gt;和&lt;a href=&quot;https://hexdocs.pm/iex/IEx.html&quot;&gt; &lt;code&gt;IEx&lt;/code&gt; 之&lt;/a&gt;类的工具可能会使用此信息来显示注释。一个通用的用例是 &lt;code&gt;since&lt;/code&gt; 可以用来注释该功能的引入版本。</target>
        </trans-unit>
        <trans-unit id="53c5b01ebc748740fa3a202be293afebe8d3531d" translate="yes" xml:space="preserve">
          <source>As hinted at the beginning of this chapter, sigils in Elixir are extensible. In fact, using the sigil &lt;code&gt;~r/foo/i&lt;/code&gt; is equivalent to calling &lt;code&gt;sigil_r&lt;/code&gt; with a binary and a char list as the argument:</source>
          <target state="translated">正如本章开始所暗示的那样，Elixir中的信号是可扩展的。实际上，使用 &lt;code&gt;sigil_r&lt;/code&gt; &lt;code&gt;~r/foo/i&lt;/code&gt; 等效于以二进制和char列表作为参数调用sigil_r：</target>
        </trans-unit>
        <trans-unit id="6c8f5fa4753404d9868b5d71ab1cbc0f0b9f0e9c" translate="yes" xml:space="preserve">
          <source>As illustrated in the example, it is possible to use these attributes more than once before an entity. However, the compiler will warn if used twice with binaries as that replaces the documentation text from the preceding use. Multiple uses with keyword lists will merge the lists into one.</source>
          <target state="translated">如本例所示,这些属性可以在一个实体前使用一次以上。然而,如果在二进制文件中使用两次,编译器会发出警告,因为这将取代前一次使用的文档文本。与关键字列表的多次使用将把列表合并为一个。</target>
        </trans-unit>
        <trans-unit id="4ba33298179402c80c62d07ca88b3e24f39778d2" translate="yes" xml:space="preserve">
          <source>As in &lt;a href=&quot;#for/1&quot;&gt;&lt;code&gt;for/1&lt;/code&gt;&lt;/a&gt;, variables bound inside &lt;a href=&quot;#with/1&quot;&gt;&lt;code&gt;with/1&lt;/code&gt;&lt;/a&gt; won't leak. Expressions without &lt;code&gt;&amp;lt;-&lt;/code&gt; may also be used in clauses. For instance, you can perform regular matches with the &lt;code&gt;=&lt;/code&gt; operator:</source>
          <target state="translated">与&lt;a href=&quot;#for/1&quot;&gt; &lt;code&gt;for/1&lt;/code&gt; 中一样&lt;/a&gt;，&lt;a href=&quot;#with/1&quot;&gt; &lt;code&gt;with/1&lt;/code&gt; &lt;/a&gt;绑定的变量不会泄漏。不带 &lt;code&gt;&amp;lt;-&lt;/code&gt; 的表达式也可以在子句中使用。例如，您可以使用 &lt;code&gt;=&lt;/code&gt; 运算符进行常规匹配：</target>
        </trans-unit>
        <trans-unit id="7618dfe0b48bdcbbc92fb053f674001960e2baaf" translate="yes" xml:space="preserve">
          <source>As many programming languages, Elixir also support operators as non-qualified calls with their precedence and associativity rules. Constructs such as &lt;code&gt;=&lt;/code&gt;, &lt;code&gt;when&lt;/code&gt;, &lt;code&gt;&amp;amp;&lt;/code&gt; and &lt;code&gt;@&lt;/code&gt; are simply treated as operators. See &lt;a href=&quot;operators&quot;&gt;the Operators page&lt;/a&gt; for a full reference.</source>
          <target state="translated">与许多编程语言一样，Elixir还通过优先级和关联性规则将运算符支持为非限定调用。诸如 &lt;code&gt;=&lt;/code&gt; ， &lt;code&gt;when&lt;/code&gt; ， &lt;code&gt;&amp;amp;&lt;/code&gt; 和 &lt;code&gt;@&lt;/code&gt; 之类的构造仅被视为运算符。请参阅&lt;a href=&quot;operators&quot;&gt;操作员页面&lt;/a&gt;以获取完整参考。</target>
        </trans-unit>
        <trans-unit id="37b8d1cf77312071adcc9e820be3a314b89ebb03" translate="yes" xml:space="preserve">
          <source>As mentioned before, only the expressions listed in this page are allowed in guards. However, we can take advantage of macros to write custom guards that can simplify our programs or make them more domain-specific. At the end of the day, what matters is that the &lt;em&gt;output&lt;/em&gt; of the macros (which is what will be compiled) boils down to a combinations of the allowed expressions.</source>
          <target state="translated">如前所述，警戒中仅允许使用此页面中列出的表达式。但是，我们可以利用宏来编写自定义防护，以简化程序或使它们更加针对特定领域。归根结底，重要的是宏的&lt;em&gt;输出&lt;/em&gt;（将要编译的内容）归结为允许的表达式的组合。</target>
        </trans-unit>
        <trans-unit id="8270045d7128d710af04fe8613d76eb301a527bc" translate="yes" xml:space="preserve">
          <source>As per the standard, a code point is a single Unicode Character, which may be represented by one or more bytes.</source>
          <target state="translated">按照标准,一个码点就是一个Unicode字符,可以用一个或多个字节来表示。</target>
        </trans-unit>
        <trans-unit id="676396c741582d57035ca27fdb32352c00e638d7" translate="yes" xml:space="preserve">
          <source>As seen as in the example above, &lt;code&gt;super&lt;/code&gt; can be used to call the default implementation.</source>
          <target state="translated">如所看到的，如上面的例子中， &lt;code&gt;super&lt;/code&gt; 可以用来调用默认的实现。</target>
        </trans-unit>
        <trans-unit id="1acf70e5576f741c3828bd3ef7c8c6ec15e18ff5" translate="yes" xml:space="preserve">
          <source>As seen in the example above, defining a callback is a matter of defining a specification for that callback, made of:</source>
          <target state="translated">从上面的例子可以看出,定义一个回调就是为这个回调定义一个规范,由。</target>
        </trans-unit>
        <trans-unit id="c17961654b5ef8c817d3bea42d0612f57d6bdfb6" translate="yes" xml:space="preserve">
          <source>As shown above, a map matches as long as the keys in the pattern exist in the given map. Therefore, an empty map matches all maps.</source>
          <target state="translated">如上图所示,只要模式中的键存在于给定地图中,地图就会匹配。因此,空地图匹配所有地图。</target>
        </trans-unit>
        <trans-unit id="3e87159a8128cba6f69d2d663e334e06403ae804" translate="yes" xml:space="preserve">
          <source>As specified in &lt;a href=&quot;https://tools.ietf.org/html/rfc3986#section-2.2&quot;&gt;RFC 3986, section 2.2&lt;/a&gt;, the following characters are reserved: &lt;code&gt;:&lt;/code&gt;, &lt;code&gt;/&lt;/code&gt;, &lt;code&gt;?&lt;/code&gt;, &lt;code&gt;#&lt;/code&gt;, &lt;code&gt;[&lt;/code&gt;, &lt;code&gt;]&lt;/code&gt;, &lt;code&gt;@&lt;/code&gt;, &lt;code&gt;!&lt;/code&gt;, &lt;code&gt;$&lt;/code&gt;, &lt;code&gt;&amp;amp;&lt;/code&gt;, &lt;code&gt;'&lt;/code&gt;, &lt;code&gt;(&lt;/code&gt;, &lt;code&gt;)&lt;/code&gt;, &lt;code&gt;*&lt;/code&gt;, &lt;code&gt;+&lt;/code&gt;, &lt;code&gt;,&lt;/code&gt;, &lt;code&gt;;&lt;/code&gt;, &lt;code&gt;=&lt;/code&gt;</source>
          <target state="translated">如在指定的&lt;a href=&quot;https://tools.ietf.org/html/rfc3986#section-2.2&quot;&gt;RFC 3986，第2.2节&lt;/a&gt;，下面的字符被保留： &lt;code&gt;:&lt;/code&gt; ， &lt;code&gt;/&lt;/code&gt; ， &lt;code&gt;?&lt;/code&gt; ， &lt;code&gt;#&lt;/code&gt; ， &lt;code&gt;[&lt;/code&gt; ， &lt;code&gt;]&lt;/code&gt; ， &lt;code&gt;@&lt;/code&gt; ， &lt;code&gt;!&lt;/code&gt; ， &lt;code&gt;$&lt;/code&gt; ， &lt;code&gt;&amp;amp;&lt;/code&gt; ， &lt;code&gt;'&lt;/code&gt; ， &lt;code&gt;(&lt;/code&gt; ， &lt;code&gt;)&lt;/code&gt; ， &lt;code&gt;*&lt;/code&gt; ， &lt;code&gt;+&lt;/code&gt; ， &lt;code&gt;,&lt;/code&gt; ， &lt;code&gt;;&lt;/code&gt; ， &lt;code&gt;=&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="6f34ca7664a4faf689aba327936c76b57db41870" translate="yes" xml:space="preserve">
          <source>As specified in &lt;a href=&quot;https://tools.ietf.org/html/rfc3986#section-2.3&quot;&gt;RFC 3986, section 2.3&lt;/a&gt;, the following characters are unreserved:</source>
          <target state="translated">如&lt;a href=&quot;https://tools.ietf.org/html/rfc3986#section-2.3&quot;&gt;RFC 3986第2.3节中&lt;/a&gt;所述，以下字符不保留：</target>
        </trans-unit>
        <trans-unit id="ae8c2d0eb718b47d6bdc235bbe27fe6688ec42f5" translate="yes" xml:space="preserve">
          <source>As specified in the standard, the separator &quot;T&quot; may be omitted if desired as there is no ambiguity within this function.</source>
          <target state="translated">按照标准的规定,如果需要,可以省略分隔符 &quot;T&quot;,因为这个函数没有任何歧义。</target>
        </trans-unit>
        <trans-unit id="172b9ef57ee22a616a5d576f366995c400978c73" translate="yes" xml:space="preserve">
          <source>As temporary storage</source>
          <target state="translated">作为临时仓库</target>
        </trans-unit>
        <trans-unit id="09bf92a059d2e30dbaaf2c6c71588317b92537a3" translate="yes" xml:space="preserve">
          <source>As the context is a map, it can be pattern matched on to extract information:</source>
          <target state="translated">由于上下文是一张地图,因此可以对其进行模式匹配来提取信息。</target>
        </trans-unit>
        <trans-unit id="aa7714894dcee21ed3c16ea2836ca8361fe264b6" translate="yes" xml:space="preserve">
          <source>As the name says, doctest is documentation first and a test later. Their goal is not to replace tests but to provide up to date documentation. You can read more about doctests in &lt;a href=&quot;https://hexdocs.pm/ex_unit/ExUnit.DocTest.html&quot;&gt;the &lt;code&gt;ExUnit.DocTest&lt;/code&gt; docs&lt;/a&gt;.</source>
          <target state="translated">顾名思义，doctest首先是文档，然后是测试。他们的目标不是替换测试，而是提供最新的文档。你可以阅读更多有关文档测试&lt;a href=&quot;https://hexdocs.pm/ex_unit/ExUnit.DocTest.html&quot;&gt;的 &lt;code&gt;ExUnit.DocTest&lt;/code&gt; 文档&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="4b3950445b3884bea63da00e819f70e116c9c457" translate="yes" xml:space="preserve">
          <source>As the name says, this function is useful to stream values from resources.</source>
          <target state="translated">顾名思义,这个函数对于从资源中流出值很有用。</target>
        </trans-unit>
        <trans-unit id="94f0af78270d1f9bb5f3fb4c7e50123a2d1e6b3c" translate="yes" xml:space="preserve">
          <source>As usual, we&amp;rsquo;ve passed a two-element tuple as a child specification, which in turn will invoke &lt;code&gt;Task.start_link/1&lt;/code&gt;.</source>
          <target state="translated">像往常一样，我们传递了一个由两个元素组成的元组作为子规范，该子规范又将调用 &lt;code&gt;Task.start_link/1&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="200471b29b35258f77b2250785934287d372a624" translate="yes" xml:space="preserve">
          <source>As we are now able to parse commands, we can finally start implementing the logic that runs the commands. Let&amp;rsquo;s add a stub definition for this function for now:</source>
          <target state="translated">由于我们现在能够解析命令，因此我们终于可以开始实现运行命令的逻辑。现在，我们为此函数添加一个存根定义：</target>
        </trans-unit>
        <trans-unit id="601235f1a3d19d8aa741732ca63364ee542ff5d9" translate="yes" xml:space="preserve">
          <source>As we have seen above, code points can be inserted into a string by their hexadecimal code:</source>
          <target state="translated">正如我们上面所看到的,代码点可以通过其十六进制代码插入字符串中。</target>
        </trans-unit>
        <trans-unit id="b744ff728795adae8a150cdd6bdfc7a23aebec3d" translate="yes" xml:space="preserve">
          <source>As we said in the previous section, the implementation of &lt;code&gt;Size&lt;/code&gt; for &lt;code&gt;Any&lt;/code&gt; is not one that can apply to any data type. That&amp;rsquo;s one of the reasons why &lt;code&gt;@fallback_to_any&lt;/code&gt; is an opt-in behaviour. For the majority of protocols, raising an error when a protocol is not implemented is the proper behaviour. That said, assuming we have implemented &lt;code&gt;Any&lt;/code&gt; as in the previous section:</source>
          <target state="translated">正如我们在上一节中所述， &lt;code&gt;Size&lt;/code&gt; for &lt;code&gt;Any&lt;/code&gt; 的实现并非可以应用于任何数据类型的实现。这就是 &lt;code&gt;@fallback_to_any&lt;/code&gt; 是一种选择行为的原因之一。对于大多数协议，当未实现协议时引发错误是正确的行为。就是说，假设我们像上一节一样实现了 &lt;code&gt;Any&lt;/code&gt; ：</target>
        </trans-unit>
        <trans-unit id="15c53c6aaf99d7b2cea9d0b0858060f9842a9b54" translate="yes" xml:space="preserve">
          <source>As we saw at the beginning of this chapter, only some values are valid quoted expressions in Elixir. For example, a map is not a valid quoted expression. Neither is a tuple with four elements. However, such values &lt;em&gt;can&lt;/em&gt; be expressed as a quoted expression:</source>
          <target state="translated">正如我们在本章开头所看到的，在Elixir中只有一些值是有效的带引号的表达式。例如，地图不是有效的带引号的表达式。具有四个元素的元组也不是。但是，这些值&lt;em&gt;可以&lt;/em&gt;表示为带引号的表达式：</target>
        </trans-unit>
        <trans-unit id="a70db684277fce0a661e1a1649e67da611b415a0" translate="yes" xml:space="preserve">
          <source>As we will see in later chapters, aliases also play a crucial role in macros, to guarantee they are hygienic.</source>
          <target state="translated">我们将在后面的章节中看到,别名在宏中也起着至关重要的作用,以保证宏的卫生性。</target>
        </trans-unit>
        <trans-unit id="4b0983ae2706b788ff3f58d0346e9d53db96d9c3" translate="yes" xml:space="preserve">
          <source>As well as with lists and tuples:</source>
          <target state="translated">以及与列表和元组。</target>
        </trans-unit>
        <trans-unit id="0f4afdbad8980e1dc31c0b805a2715e284761af4" translate="yes" xml:space="preserve">
          <source>As with any other function or macro call in Elixir, explicit parens can also be used around the arguments before the &lt;code&gt;do&lt;/code&gt;/&lt;code&gt;end&lt;/code&gt; block:</source>
          <target state="translated">与Elixir中的任何其他函数或宏调用一样，也可以在 &lt;code&gt;do&lt;/code&gt; / &lt;code&gt;end&lt;/code&gt; 块之前的参数周围使用显式括号：</target>
        </trans-unit>
        <trans-unit id="97fa256436a4dcbb72bdc937146524beaa952bd1" translate="yes" xml:space="preserve">
          <source>As with other functions in the &lt;a href=&quot;#content&quot;&gt;&lt;code&gt;String&lt;/code&gt;&lt;/a&gt; module, &lt;a href=&quot;#next_codepoint/1&quot;&gt;&lt;code&gt;next_codepoint/1&lt;/code&gt;&lt;/a&gt; works with binaries that are invalid UTF-8. If the string starts with a sequence of bytes that is not valid in UTF-8 encoding, the first element of the returned tuple is a binary with the first byte.</source>
          <target state="translated">与&lt;a href=&quot;#content&quot;&gt; &lt;code&gt;String&lt;/code&gt; &lt;/a&gt;模块中的其他函数一样，&lt;a href=&quot;#next_codepoint/1&quot;&gt; &lt;code&gt;next_codepoint/1&lt;/code&gt; &lt;/a&gt;可以用于无效UTF-8的二进制文件。如果字符串以在UTF-8编码中无效的字节序列开头，则返回的元组的第一个元素是带有第一个字节的二进制文件。</target>
        </trans-unit>
        <trans-unit id="3f6413773613da2d0a327678be51feae49a384ac" translate="yes" xml:space="preserve">
          <source>As with the &lt;a href=&quot;#compare/2&quot;&gt;&lt;code&gt;compare/2&lt;/code&gt;&lt;/a&gt; function both &lt;a href=&quot;#content&quot;&gt;&lt;code&gt;Time&lt;/code&gt;&lt;/a&gt; structs and other structures containing time can be used. If for instance a &lt;a href=&quot;naivedatetime&quot;&gt;&lt;code&gt;NaiveDateTime&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;datetime&quot;&gt;&lt;code&gt;DateTime&lt;/code&gt;&lt;/a&gt; is passed, only the hour, month, second, and microsecond is considered. Any additional information about a date or time zone is ignored when calculating the difference.</source>
          <target state="translated">与&lt;a href=&quot;#compare/2&quot;&gt; &lt;code&gt;compare/2&lt;/code&gt; &lt;/a&gt;函数一样，可以使用&lt;a href=&quot;#content&quot;&gt; &lt;code&gt;Time&lt;/code&gt; &lt;/a&gt;结构和其他包含时间的结构。例如，如果通过了&lt;a href=&quot;naivedatetime&quot;&gt; &lt;code&gt;NaiveDateTime&lt;/code&gt; &lt;/a&gt;或&lt;a href=&quot;datetime&quot;&gt; &lt;code&gt;DateTime&lt;/code&gt; &lt;/a&gt;，则仅考虑小时，月，秒和微秒。计算差异时，将忽略有关日期或时区的任何其他信息。</target>
        </trans-unit>
        <trans-unit id="bfac16304766e4e02a86d724f96fe90d475e9d00" translate="yes" xml:space="preserve">
          <source>As you can see &lt;code&gt;IO.inspect/2&lt;/code&gt; makes it possible to &amp;ldquo;spy&amp;rdquo; on values almost anywhere in your code without altering the result, making it very helpful inside of a pipeline like in the above case.</source>
          <target state="translated">如您所见， &lt;code&gt;IO.inspect/2&lt;/code&gt; 使得几乎可以在代码中的任何位置&amp;ldquo;监视&amp;rdquo;值而不会改变结果，这使其在管道内部非常有用，就像上面的情况一样。</target>
        </trans-unit>
        <trans-unit id="21f8fc70137800358c066550264ed73297889dbe" translate="yes" xml:space="preserve">
          <source>As you can see above, Elixir supports a special syntax for defining such lists: &lt;code&gt;[key: value]&lt;/code&gt;. Underneath it maps to the same list of tuples as above. Since keyword lists are lists, we can use all operations available to lists. For example, we can use &lt;code&gt;++&lt;/code&gt; to add new values to a keyword list:</source>
          <target state="translated">如上所示，Elixir支持用于定义此类列表的特殊语法： &lt;code&gt;[key: value]&lt;/code&gt; 。它的下面映射到与上述相同的元组列表。由于关键字列表是列表，因此我们可以使用列表可用的所有操作。例如，我们可以使用 &lt;code&gt;++&lt;/code&gt; 将新值添加到关键字列表：</target>
        </trans-unit>
        <trans-unit id="aa4170415b6c223620cdf1f88ee2130beff4adea" translate="yes" xml:space="preserve">
          <source>As you can see in the example, tuples are a compound type and each tuple is identified by the types inside it. To understand why &lt;code&gt;String.t&lt;/code&gt; is not written as &lt;code&gt;string&lt;/code&gt;, have another look at the &lt;a href=&quot;https://hexdocs.pm/elixir/typespecs.html#the-string-type&quot;&gt;typespecs docs&lt;/a&gt;.</source>
          <target state="translated">在示例中可以看到，元组是复合类型，每个元组都由其内部的类型标识。要了解为什么 &lt;code&gt;String.t&lt;/code&gt; 不是写为 &lt;code&gt;string&lt;/code&gt; ，请再次查看&lt;a href=&quot;https://hexdocs.pm/elixir/typespecs.html#the-string-type&quot;&gt;typespecs文档&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="6e385b1477b16c3d8afb0738a5dc664781fad0f5" translate="yes" xml:space="preserve">
          <source>As you can see, the &lt;code&gt;|&amp;gt;&lt;/code&gt; operator retains the same semantics as when the pipe is not used since both require the &lt;code&gt;fun.(...)&lt;/code&gt; notation.</source>
          <target state="translated">如您所见， &lt;code&gt;|&amp;gt;&lt;/code&gt; 运算符保留与不使用管道时相同的语义，因为两者都需要 &lt;code&gt;fun.(...)&lt;/code&gt; 表示法。</target>
        </trans-unit>
        <trans-unit id="30d1ce2388da1cbee1aee34fe86a268a3580437f" translate="yes" xml:space="preserve">
          <source>As you can see, we can modify the agent state in any way we want. Therefore, we most likely don&amp;rsquo;t want to access the Agent API throughout many different places in our code. Instead, we want to encapsulate all Agent-related functionality in a single module, which we will call &lt;code&gt;KV.Bucket&lt;/code&gt;. Before we implement it, let&amp;rsquo;s write some tests which will outline the API exposed by our module.</source>
          <target state="translated">如您所见，我们可以根据需要修改代理状态。因此，我们很可能不想在代码中的许多不同位置访问Agent API。相反，我们希望将所有与代理相关的功能封装在一个模块中，我们将其称为 &lt;code&gt;KV.Bucket&lt;/code&gt; 。在实现它之前，让我们写一些测试来概述模块所公开的API。</target>
        </trans-unit>
        <trans-unit id="210d4ba9daa92ffc70077cd3f9e0051375613c5f" translate="yes" xml:space="preserve">
          <source>As you grow more proficient in Elixir, you may want to explore the Erlang &lt;a href=&quot;http://erlang.org/doc/apps/stdlib/index.html&quot;&gt;STDLIB Reference Manual&lt;/a&gt; in more detail.</source>
          <target state="translated">随着您逐渐精通Elixir，您可能需要更详细地阅读《 Erlang &lt;a href=&quot;http://erlang.org/doc/apps/stdlib/index.html&quot;&gt;STDLIB参考手册》&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="42243c9d4edc16320cc7a5237930463fbe38b8c3" translate="yes" xml:space="preserve">
          <source>Asking questions</source>
          <target state="translated">提出问题</target>
        </trans-unit>
        <trans-unit id="e7490b91fb48bace99c9c58dc1ba9142c591d1b6" translate="yes" xml:space="preserve">
          <source>Assembling multiple releases</source>
          <target state="translated">组装多个版本</target>
        </trans-unit>
        <trans-unit id="5e68467c391c90ed39d1769e2c7fc777abc9ce10" translate="yes" xml:space="preserve">
          <source>Asserts &lt;code&gt;expression&lt;/code&gt; will cause an error.</source>
          <target state="translated">断言 &lt;code&gt;expression&lt;/code&gt; 将导致错误。</target>
        </trans-unit>
        <trans-unit id="21ea5a6283f658e3d8429f3c704fec015ff7ac86" translate="yes" xml:space="preserve">
          <source>Asserts &lt;code&gt;expression&lt;/code&gt; will exit.</source>
          <target state="translated">断言 &lt;code&gt;expression&lt;/code&gt; 将退出。</target>
        </trans-unit>
        <trans-unit id="51dd35c873c4195a1aa602ca5fc4593065d118d6" translate="yes" xml:space="preserve">
          <source>Asserts &lt;code&gt;expression&lt;/code&gt; will throw a value.</source>
          <target state="translated">断言 &lt;code&gt;expression&lt;/code&gt; 将抛出一个值。</target>
        </trans-unit>
        <trans-unit id="a4fccd55c6fefc18e898969890abca9f3867d90f" translate="yes" xml:space="preserve">
          <source>Asserts &lt;code&gt;value1&lt;/code&gt; and &lt;code&gt;value2&lt;/code&gt; are not within &lt;code&gt;delta&lt;/code&gt;.</source>
          <target state="translated">断言 &lt;code&gt;value1&lt;/code&gt; 和 &lt;code&gt;value2&lt;/code&gt; 不在 &lt;code&gt;delta&lt;/code&gt; 内。</target>
        </trans-unit>
        <trans-unit id="8e3419e6d5b518f88bf525f195c071962c45d888" translate="yes" xml:space="preserve">
          <source>Asserts &lt;code&gt;value&lt;/code&gt; is &lt;code&gt;nil&lt;/code&gt; or &lt;code&gt;false&lt;/code&gt; (that is, &lt;code&gt;value&lt;/code&gt; is not truthy).</source>
          <target state="translated">断言 &lt;code&gt;value&lt;/code&gt; 为 &lt;code&gt;nil&lt;/code&gt; 或 &lt;code&gt;false&lt;/code&gt; （即 &lt;code&gt;value&lt;/code&gt; 不真实）。</target>
        </trans-unit>
        <trans-unit id="b25f69bb32e51bfa75bcf7ba330376b516079f9a" translate="yes" xml:space="preserve">
          <source>Asserts &lt;code&gt;value&lt;/code&gt; is truthy, displaying the given &lt;code&gt;message&lt;/code&gt; otherwise.</source>
          <target state="translated">断言 &lt;code&gt;value&lt;/code&gt; 是真实的，否则显示给定的 &lt;code&gt;message&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="dfe5bb735de6540b2a06f98b0a42bdd8ef4828e5" translate="yes" xml:space="preserve">
          <source>Asserts a message matching &lt;code&gt;pattern&lt;/code&gt; was not received (i.e. it is not in the current process' mailbox).</source>
          <target state="translated">声明未收到消息匹配 &lt;code&gt;pattern&lt;/code&gt; （即它不在当前进程的邮箱中）。</target>
        </trans-unit>
        <trans-unit id="27e6e46a40f5aa357f1b1f71823ab2714d6dfc2c" translate="yes" xml:space="preserve">
          <source>Asserts against a larger timeout:</source>
          <target state="translated">断言对较大的超时。</target>
        </trans-unit>
        <trans-unit id="0dcb430556180c632dbd6a05ebad3939684ea882" translate="yes" xml:space="preserve">
          <source>Asserts its argument is a truthy value.</source>
          <target state="translated">断言其参数是一个真值。</target>
        </trans-unit>
        <trans-unit id="631f267df18019d097de2ba4fa501aea456587c9" translate="yes" xml:space="preserve">
          <source>Asserts that &lt;code&gt;value1&lt;/code&gt; and &lt;code&gt;value2&lt;/code&gt; differ by no more than &lt;code&gt;delta&lt;/code&gt;.</source>
          <target state="translated">断言 &lt;code&gt;value1&lt;/code&gt; 和 &lt;code&gt;value2&lt;/code&gt; 相差不超过 &lt;code&gt;delta&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="b3d081c32e7b0ecb8b1370d55ed5d56cfeed4172" translate="yes" xml:space="preserve">
          <source>Asserts that a message matching &lt;code&gt;pattern&lt;/code&gt; was not received (and won't be received) within the &lt;code&gt;timeout&lt;/code&gt; period, specified in milliseconds.</source>
          <target state="translated">断言在 &lt;code&gt;timeout&lt;/code&gt; 时间内未收到（也不会收到）消息匹配 &lt;code&gt;pattern&lt;/code&gt; ，以毫秒为单位。</target>
        </trans-unit>
        <trans-unit id="c8c7b2bb8b65a4ae00cb202f3465c2a6e04800c2" translate="yes" xml:space="preserve">
          <source>Asserts that a message matching &lt;code&gt;pattern&lt;/code&gt; was or is going to be received within the &lt;code&gt;timeout&lt;/code&gt; period, specified in milliseconds.</source>
          <target state="translated">断言在（以毫秒为单位）指定的 &lt;code&gt;timeout&lt;/code&gt; 期限内已经或将要收到消息匹配 &lt;code&gt;pattern&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="e4b2d80d77ed40f1fbbfa18c2d6aec035c3583ca" translate="yes" xml:space="preserve">
          <source>Asserts that a message matching &lt;code&gt;pattern&lt;/code&gt; was received and is in the current process' mailbox.</source>
          <target state="translated">断言已收到消息匹配 &lt;code&gt;pattern&lt;/code&gt; ，该模式位于当前进程的邮箱中。</target>
        </trans-unit>
        <trans-unit id="08e716a4d9543f0675eaa0e9aeb88e0dbd3e68b3" translate="yes" xml:space="preserve">
          <source>Asserts the &lt;code&gt;exception&lt;/code&gt; is raised during &lt;code&gt;function&lt;/code&gt; execution with the expected &lt;code&gt;message&lt;/code&gt;, which can be a &lt;a href=&quot;https://hexdocs.pm/elixir/Regex.html&quot;&gt;&lt;code&gt;Regex&lt;/code&gt;&lt;/a&gt; or an exact &lt;a href=&quot;https://hexdocs.pm/elixir/String.html&quot;&gt;&lt;code&gt;String&lt;/code&gt;&lt;/a&gt;. Returns the rescued exception, fails otherwise.</source>
          <target state="translated">断言在 &lt;code&gt;function&lt;/code&gt; 执行过程中使用预期的 &lt;code&gt;message&lt;/code&gt; 引发 &lt;code&gt;exception&lt;/code&gt; ，该消息可以是&lt;a href=&quot;https://hexdocs.pm/elixir/Regex.html&quot;&gt; &lt;code&gt;Regex&lt;/code&gt; &lt;/a&gt;或精确的&lt;a href=&quot;https://hexdocs.pm/elixir/String.html&quot;&gt; &lt;code&gt;String&lt;/code&gt; &lt;/a&gt;。返回挽救的异常，否则失败。</target>
        </trans-unit>
        <trans-unit id="f189bf2d977136873077301bfd1a2a270f543d21" translate="yes" xml:space="preserve">
          <source>Asserts the &lt;code&gt;exception&lt;/code&gt; is raised during &lt;code&gt;function&lt;/code&gt; execution. Returns the rescued exception, fails otherwise.</source>
          <target state="translated">断言在 &lt;code&gt;function&lt;/code&gt; 执行期间引发 &lt;code&gt;exception&lt;/code&gt; 。返回挽救的异常，否则失败。</target>
        </trans-unit>
        <trans-unit id="c6416f331120cf783e79cebf7095c44ed2cd766d" translate="yes" xml:space="preserve">
          <source>Assigns can also be used when compiled to a function:</source>
          <target state="translated">当编译成函数时,也可以使用赋值。</target>
        </trans-unit>
        <trans-unit id="e92203a0ace3ba65c682a54de5d568ec7a27a848" translate="yes" xml:space="preserve">
          <source>Associates the &lt;code&gt;port&lt;/code&gt; identifier with a &lt;code&gt;pid&lt;/code&gt;.</source>
          <target state="translated">将 &lt;code&gt;port&lt;/code&gt; 标识符与 &lt;code&gt;pid&lt;/code&gt; 关联。</target>
        </trans-unit>
        <trans-unit id="d20b5a26a1cdf631954b50a5206246dff93d9c8a" translate="yes" xml:space="preserve">
          <source>Associativity</source>
          <target state="translated">Associativity</target>
        </trans-unit>
        <trans-unit id="0706e10abd81eb18f13ab749dfc8f7c363cf456b" translate="yes" xml:space="preserve">
          <source>Assuming the &lt;code&gt;Stack&lt;/code&gt; GenServer mentioned in the docs for the &lt;a href=&quot;#content&quot;&gt;&lt;code&gt;GenServer&lt;/code&gt;&lt;/a&gt; module is registered as &lt;code&gt;Stack&lt;/code&gt; in the &lt;code&gt;:&quot;foo@my-machine&quot;&lt;/code&gt; and &lt;code&gt;:&quot;bar@my-machine&quot;&lt;/code&gt; nodes:</source>
          <target state="translated">假定在&lt;a href=&quot;#content&quot;&gt; &lt;code&gt;GenServer&lt;/code&gt; &lt;/a&gt;模块的文档中提到的 &lt;code&gt;Stack&lt;/code&gt; GenServer在以下位置的&amp;ldquo; &lt;code&gt;:&quot;foo@my-machine&quot;&lt;/code&gt; 和 &lt;code&gt;:&quot;bar@my-machine&quot;&lt;/code&gt; 节点中已注册为 &lt;code&gt;Stack&lt;/code&gt; ：</target>
        </trans-unit>
        <trans-unit id="3a5f997602b6a56d42f72e433af46958ffb188f5" translate="yes" xml:space="preserve">
          <source>Assuming we defined &lt;code&gt;TestCase&lt;/code&gt; in a file named &lt;code&gt;tests.exs&lt;/code&gt;, we can open it up by running &lt;code&gt;iex tests.exs&lt;/code&gt; and define our first tests:</source>
          <target state="translated">假设我们在名为 &lt;code&gt;tests.exs&lt;/code&gt; 的文件中定义了 &lt;code&gt;TestCase&lt;/code&gt; ，我们可以通过运行 &lt;code&gt;iex tests.exs&lt;/code&gt; 来打开它并定义我们的第一个测试：</target>
        </trans-unit>
        <trans-unit id="d95ac37a47c14d5f1acc4f76198a9b839014e3cc" translate="yes" xml:space="preserve">
          <source>Async or not, our new test should obviously fail, as none of the functionality is implemented in the module being tested:</source>
          <target state="translated">不管是不是异步,我们的新测试显然应该失败,因为在被测试的模块中没有实现任何功能。</target>
        </trans-unit>
        <trans-unit id="44790a848ce1e0b878b857a7d7bf4211e67c716a" translate="yes" xml:space="preserve">
          <source>At first, the process map has no keys, so sending a &lt;code&gt;:get&lt;/code&gt; message and then flushing the current process inbox returns &lt;code&gt;nil&lt;/code&gt;. Let&amp;rsquo;s send a &lt;code&gt;:put&lt;/code&gt; message and try it again:</source>
          <target state="translated">首先，流程图没有键，因此发送 &lt;code&gt;:get&lt;/code&gt; 消息，然后刷新当前流程收件箱将返回 &lt;code&gt;nil&lt;/code&gt; 。让我们发送 &lt;code&gt;:put&lt;/code&gt; 消息，然后重试：</target>
        </trans-unit>
        <trans-unit id="16f7256f734477a56caabe25739de6426b77ff24" translate="yes" xml:space="preserve">
          <source>At first, there is nothing in this example that actually reveals it is a macro. But what is happening is that, at compilation time, &lt;code&gt;squared(5)&lt;/code&gt; becomes &lt;code&gt;5 * 5&lt;/code&gt;. The argument &lt;code&gt;5&lt;/code&gt; is duplicated in the produced code, we can see this behaviour in practice though because our macro actually has a bug:</source>
          <target state="translated">最初，此示例中没有任何东西可以真正表明它是一个宏。但是发生的是，在编译时， &lt;code&gt;squared(5)&lt;/code&gt; 变为 &lt;code&gt;5 * 5&lt;/code&gt; 。参数 &lt;code&gt;5&lt;/code&gt; 在产生的代码中重复，尽管实际上我们的宏有一个bug，但实际上我们可以看到此行为：</target>
        </trans-unit>
        <trans-unit id="17e0c2ba6bf8585ab612f28b687b66ddbc446816" translate="yes" xml:space="preserve">
          <source>At the end of the chapter, we will also talk about Applications. As we will see, Mix has been packaging all of our code into an application, and we will learn how to customize our application to guarantee that our Supervisor and the Registry are up and running whenever our system starts.</source>
          <target state="translated">在本章的最后,我们还将谈论应用程序。我们会看到,Mix一直将我们所有的代码打包成一个应用程序,我们将学习如何定制我们的应用程序,以保证我们的Supervisor和注册表在系统启动时都能正常运行。</target>
        </trans-unit>
        <trans-unit id="7e1720c79764d1bd4a3c1260e363853f08ce78d4" translate="yes" xml:space="preserve">
          <source>At the end of the day, it is up to you and your team to figure out the best testing strategy for your applications. You need to balance code quality, confidence, and test suite runtime. For example, we may start with testing the server only with integration tests, but if the server continues to grow in future releases, or it becomes a part of the application with frequent bugs, it is important to consider breaking it apart and writing more intensive unit tests that don&amp;rsquo;t have the weight of an integration test.</source>
          <target state="translated">归根结底，您和您的团队需要为您的应用程序找出最佳的测试策略。您需要在代码质量，置信度和测试套件运行时之间取得平衡。例如，我们可能只通过集成测试来测试服务器，但是如果服务器在将来的版本中继续增长，或者它成为应用程序的一部分且包含频繁的错误，那么考虑将其分开并编写更密集的代码是很重要的没有集成测试权重的单元测试。</target>
        </trans-unit>
        <trans-unit id="2a3ffa5cb7dc9aa4c3ec3ff462d233d2b07bed27" translate="yes" xml:space="preserve">
          <source>At the end of the day, it&amp;rsquo;s up to your application to decide if an error while opening a file is exceptional or not. That&amp;rsquo;s why Elixir doesn&amp;rsquo;t impose exceptions on &lt;code&gt;File.read/1&lt;/code&gt; and many other functions. Instead, it leaves it up to the developer to choose the best way to proceed.</source>
          <target state="translated">归根结底，由您的应用程序决定打开文件时是否发生异常错误。这就是Elixir不对 &lt;code&gt;File.read/1&lt;/code&gt; 和许多其他函数施加异常的原因。取而代之的是，它留给开发人员选择最佳的进行方法。</target>
        </trans-unit>
        <trans-unit id="b873e6ad14549bcea5b5a36336f039751d9658a1" translate="yes" xml:space="preserve">
          <source>At the end of the day, tools like Observer are one of the reasons you want to always start processes inside supervision trees, even if they are temporary, to ensure they are always reachable and introspectable.</source>
          <target state="translated">最后,像Observer这样的工具是你想要始终在监督树内启动进程的原因之一,即使它们是临时性的,以确保它们始终是可到达和可反省的。</target>
        </trans-unit>
        <trans-unit id="e06f56d0fcde25a11eb9f4fd12e26af6e57cc715" translate="yes" xml:space="preserve">
          <source>At this point, we have learned four control structures: &lt;code&gt;case&lt;/code&gt;, &lt;code&gt;cond&lt;/code&gt;, &lt;code&gt;if&lt;/code&gt;, and &lt;code&gt;unless&lt;/code&gt;, and they were all wrapped in &lt;code&gt;do/end&lt;/code&gt; blocks. It happens we could also write &lt;code&gt;if&lt;/code&gt; as follows:</source>
          <target state="translated">至此，我们已经学习了四个控制结构： &lt;code&gt;case&lt;/code&gt; ， &lt;code&gt;cond&lt;/code&gt; ， &lt;code&gt;if&lt;/code&gt; 和 &lt;code&gt;unless&lt;/code&gt; ，它们都包装在 &lt;code&gt;do/end&lt;/code&gt; 块中。这种事，我们也可以这样写 &lt;code&gt;if&lt;/code&gt; 如下：</target>
        </trans-unit>
        <trans-unit id="0ac71a7b2e14e6b71166183a00716c799d7bccef" translate="yes" xml:space="preserve">
          <source>At this point, you may be wondering, how can we make two nodes start with two different routing tables? One option is to use the &lt;code&gt;--config&lt;/code&gt; flag in &lt;code&gt;mix run&lt;/code&gt;. For example, you could write two extra configuration files, &lt;code&gt;config/foo.exs&lt;/code&gt; and &lt;code&gt;config/bar.exs&lt;/code&gt;, with two distinct routing tables and then:</source>
          <target state="translated">此时，您可能想知道，我们如何使两个节点以两个不同的路由表开始？一种选择是在 &lt;code&gt;mix run&lt;/code&gt; 中使用 &lt;code&gt;--config&lt;/code&gt; 标志。例如，您可以编写两个额外的配置文件 &lt;code&gt;config/foo.exs&lt;/code&gt; 和 &lt;code&gt;config/bar.exs&lt;/code&gt; ，以及两个不同的路由表，然后：</target>
        </trans-unit>
        <trans-unit id="0dfd56da90b26d4f5fcb9d69b1cd07569e6e1396" translate="yes" xml:space="preserve">
          <source>At this point, you may be wondering: should you also locally name bucket processes? Remember buckets are started dynamically based on user input. Since local names MUST be atoms, we would have to dynamically create atoms, which is a bad idea since once an atom is defined, it is never erased nor garbage collected. This means that, if we create atoms dynamically based on user input, we will eventually run out of memory (or to be more precise, the VM will crash because it imposes a hard limit on the number of atoms). This limitation is precisely why we created our own registry (or why one would use Elixir&amp;rsquo;s built-in &lt;a href=&quot;https://hexdocs.pm/elixir/Registry.html&quot;&gt;&lt;code&gt;Registry&lt;/code&gt;&lt;/a&gt; module).</source>
          <target state="translated">此时，您可能想知道：您是否还应该在本地命名存储桶进程？请记住，存储桶是根据用户输入动态启动的。由于本地名称必须是原子，所以我们必须动态创建原子，这是个坏主意，因为一旦定义了原子，就永远不会擦除也不会收集垃圾。这意味着，如果我们根据用户输入动态创建原子，最终将耗尽内存（或更确切地说，VM会崩溃，因为它对原子数施加了硬性限制）。这一限制正是我们创建自己的注册表的原因（或者为什么要使用Elixir的内置&lt;a href=&quot;https://hexdocs.pm/elixir/Registry.html&quot;&gt; &lt;code&gt;Registry&lt;/code&gt; &lt;/a&gt;模块）。</target>
        </trans-unit>
        <trans-unit id="4f19fee95b461d9367b1c2a9128f16cd17a5edf3" translate="yes" xml:space="preserve">
          <source>At this point, you may be wondering: what exactly is an Elixir alias and how is it represented?</source>
          <target state="translated">这时,你可能会想知道:Elixir别名到底是什么,如何表示?</target>
        </trans-unit>
        <trans-unit id="41dded417052424bdcf3c39f6c8664147fae6806" translate="yes" xml:space="preserve">
          <source>Atom</source>
          <target state="translated">Atom</target>
        </trans-unit>
        <trans-unit id="f53a98286f82798d588f67a7f0db19f7aebc839e" translate="yes" xml:space="preserve">
          <source>Atoms</source>
          <target state="translated">Atoms</target>
        </trans-unit>
        <trans-unit id="2a69989a3d606e64bc701c17d1245c7fdba9b230" translate="yes" xml:space="preserve">
          <source>Atoms and tuples are allowed as keys.</source>
          <target state="translated">允许用原子和元组作为键。</target>
        </trans-unit>
        <trans-unit id="c3e82516bd38cc41825c1c56991455366d6b7205" translate="yes" xml:space="preserve">
          <source>Atoms are equal if their names are equal.</source>
          <target state="translated">如果原子的名称相等,则原子就相等。</target>
        </trans-unit>
        <trans-unit id="4e0ec53ea5b7d828ef6e5c43d6e21909c2587391" translate="yes" xml:space="preserve">
          <source>Atoms can be written either in &lt;code&gt;:snake_case&lt;/code&gt; or &lt;code&gt;:CamelCase&lt;/code&gt;, although the convention is to use the snake case version throughout Elixir.</source>
          <target state="translated">原子可以用 &lt;code&gt;:snake_case&lt;/code&gt; 或 &lt;code&gt;:CamelCase&lt;/code&gt; 编写，尽管惯例是在整个Elixir中使用蛇形盒。</target>
        </trans-unit>
        <trans-unit id="7823d59c9025838f9df163a9aa5632eb33e8f5f9" translate="yes" xml:space="preserve">
          <source>Atoms with foreign characters, such as whitespace, must be wrapped in quotes. This rule applies to keywords as well:</source>
          <target state="translated">带有外来字符的原子,如空格,必须用引号包起来。这条规则也适用于关键词。</target>
        </trans-unit>
        <trans-unit id="adfc32a230bc2cd9939f99a65ee1e1c430d56f45" translate="yes" xml:space="preserve">
          <source>Attaches information to exceptions for extra debugging.</source>
          <target state="translated">将信息附加到异常中,以便进行额外的调试。</target>
        </trans-unit>
        <trans-unit id="be4563947c24c97f1390cb029a949e02c2dd4bc2" translate="yes" xml:space="preserve">
          <source>Attempting to convert an invalid ISO calendar date will produce an error tuple.</source>
          <target state="translated">试图转换一个无效的ISO日历日期将产生一个错误元组。</target>
        </trans-unit>
        <trans-unit id="2cb1d997f70ceafe9419b46accfb019d8d855e4b" translate="yes" xml:space="preserve">
          <source>Attention! While the access syntax is allowed in maps via &lt;code&gt;map[key]&lt;/code&gt;, if your map is made of predefined atom keys, you should prefer to access those atom keys with &lt;code&gt;map.key&lt;/code&gt; instead of &lt;code&gt;map[key]&lt;/code&gt;, as &lt;code&gt;map.key&lt;/code&gt; will raise if the key is missing. This is important because, if a map has a predefined set of keys and a key is missing, it is most likely a bug in your software or a typo on the key name. For this reason, because structs are predefined in nature, they only allow the &lt;code&gt;struct.key&lt;/code&gt; syntax and they do not allow the &lt;code&gt;struct[key]&lt;/code&gt; access syntax. See the &lt;a href=&quot;map&quot;&gt;&lt;code&gt;Map&lt;/code&gt;&lt;/a&gt; module for more information.</source>
          <target state="translated">注意！虽然通过 &lt;code&gt;map[key]&lt;/code&gt; 在地图中允许使用访问语法，但是如果您的地图是由预定义的原子键组成的，则您最好使用 &lt;code&gt;map.key&lt;/code&gt; 而不是 &lt;code&gt;map[key]&lt;/code&gt; 来访问这些原子键，因为 &lt;code&gt;map.key&lt;/code&gt; 会在钥匙不见了。这一点很重要，因为如果地图具有一组预定义的键，并且缺少键，则很可能是软件中的错误或键名称上的错字。因此，由于结构是预定义的，因此它们仅允许 &lt;code&gt;struct.key&lt;/code&gt; 语法，而不允许 &lt;code&gt;struct[key]&lt;/code&gt; 访问语法。有关更多信息，请参见&lt;a href=&quot;map&quot;&gt; &lt;code&gt;Map&lt;/code&gt; &lt;/a&gt;模块。</target>
        </trans-unit>
        <trans-unit id="a6652617f2c799eb11ee727b16c5646c48af6905" translate="yes" xml:space="preserve">
          <source>Attributes</source>
          <target state="translated">Attributes</target>
        </trans-unit>
        <trans-unit id="5f97e36f103d67250ebb8f2ffecafc5a4f3670e6" translate="yes" xml:space="preserve">
          <source>Autocomplete</source>
          <target state="translated">Autocomplete</target>
        </trans-unit>
        <trans-unit id="59ca0e6a6a5c6fa7d8b2946ea7d9f3d1a2cddf19" translate="yes" xml:space="preserve">
          <source>Autocomplete may not be available on some Windows shells. You may need to pass the &lt;code&gt;--werl&lt;/code&gt; option when starting IEx, as in &lt;code&gt;iex --werl&lt;/code&gt; for it to work. &lt;code&gt;--werl&lt;/code&gt; may be permanently enabled by setting the &lt;code&gt;IEX_WITH_WERL&lt;/code&gt; environment variable.</source>
          <target state="translated">自动完成功能在某些Windows Shell上可能不可用。在启动IEx时，您可能需要传递 &lt;code&gt;--werl&lt;/code&gt; 选项，就像在 &lt;code&gt;iex --werl&lt;/code&gt; 中一样，它才能正常工作。 &lt;code&gt;--werl&lt;/code&gt; 可以通过设置来永久启用 &lt;code&gt;IEX_WITH_WERL&lt;/code&gt; 环境变量。</target>
        </trans-unit>
        <trans-unit id="51a4c659ece8f79813a8062061a37db34ec84e7f" translate="yes" xml:space="preserve">
          <source>Automatic code formatting</source>
          <target state="translated">自动代码格式化</target>
        </trans-unit>
        <trans-unit id="a5325c58f3190f03981f3d4b6e263a0fcae8b5bc" translate="yes" xml:space="preserve">
          <source>Available options are:</source>
          <target state="translated">可用的选项有:</target>
        </trans-unit>
        <trans-unit id="092cd6bcec2dc4f94a4fc33bc1ed3409700531e1" translate="yes" xml:space="preserve">
          <source>Avoid &lt;code&gt;use&lt;/code&gt; when an &lt;code&gt;import&lt;/code&gt; is enough</source>
          <target state="translated">&lt;code&gt;import&lt;/code&gt; 足够时避免 &lt;code&gt;use&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="41d25fe1a41fca091b7e6f07deb9576aa406ed90" translate="yes" xml:space="preserve">
          <source>Avoid application configuration</source>
          <target state="translated">避免应用配置</target>
        </trans-unit>
        <trans-unit id="7dd92d342635cd8bad5012751cc0ba8c68f401f5" translate="yes" xml:space="preserve">
          <source>Avoid macros</source>
          <target state="translated">避免使用巨集</target>
        </trans-unit>
        <trans-unit id="f82e2d945abfb2dbbf3f826fcc4d148cee063c63" translate="yes" xml:space="preserve">
          <source>Avoid spawning unsupervised processes</source>
          <target state="translated">避免产生不受监督的进程</target>
        </trans-unit>
        <trans-unit id="8ee9dc89a780c53fc8d9382fa5ad113c6c75cdf9" translate="yes" xml:space="preserve">
          <source>Avoid using exceptions for control-flow</source>
          <target state="translated">避免在控制流中使用异常</target>
        </trans-unit>
        <trans-unit id="29209be29de64c2bb9545649ddfd6abf62c0ea65" translate="yes" xml:space="preserve">
          <source>Avoid using processes for code organization</source>
          <target state="translated">避免使用流程来组织代码</target>
        </trans-unit>
        <trans-unit id="ee960a2bc0567e3f91ebc97f2955ec11939e5015" translate="yes" xml:space="preserve">
          <source>Avoid working with invalid data</source>
          <target state="translated">避免使用无效数据</target>
        </trans-unit>
        <trans-unit id="6bbd15d15dade34920aa898885177fb819b3bbad" translate="yes" xml:space="preserve">
          <source>Awaits a task reply and returns it.</source>
          <target state="translated">等待任务回复并返回。</target>
        </trans-unit>
        <trans-unit id="b3776d63ad7b7a84bfe20d9c6d4a53a2b25d0e43" translate="yes" xml:space="preserve">
          <source>Backends</source>
          <target state="translated">Backends</target>
        </trans-unit>
        <trans-unit id="607e2afde4148b04e8bd542f10f2849f8f644bf6" translate="yes" xml:space="preserve">
          <source>Backends added by this function are not persisted. Therefore if the Logger application or supervision tree is restarted, the backend won't be available. If you need this guarantee, then configure the backend via the application environment.</source>
          <target state="translated">通过该函数添加的后端不会被持久化。因此,如果重新启动记录仪应用程序或监督树,后端将不可用。如果您需要这种保证,则通过应用环境配置后端。</target>
        </trans-unit>
        <trans-unit id="43d581f1eb0812cfb36d4f0598607e6abe9c3fc9" translate="yes" xml:space="preserve">
          <source>Backends typically allow developers to supply such control strings via configuration files. This module provides &lt;a href=&quot;#compile/1&quot;&gt;&lt;code&gt;compile/1&lt;/code&gt;&lt;/a&gt;, which compiles the string into a format for fast operations at runtime and &lt;a href=&quot;#format/5&quot;&gt;&lt;code&gt;format/5&lt;/code&gt;&lt;/a&gt; to format the compiled pattern into an actual IO data.</source>
          <target state="translated">后端通常允许开发人员通过配置文件提供此类控制字符串。该模块提供&lt;a href=&quot;#compile/1&quot;&gt; &lt;code&gt;compile/1&lt;/code&gt; &lt;/a&gt;，它将字符串编译为一种格式，以便在运行时进行快速操作，而&lt;a href=&quot;#format/5&quot;&gt; &lt;code&gt;format/5&lt;/code&gt; &lt;/a&gt;则将编译后的模式格式化为实际的IO数据。</target>
        </trans-unit>
        <trans-unit id="01490bc8fe9235ceac536a8719e2fd8ca0b13630" translate="yes" xml:space="preserve">
          <source>BadArityError</source>
          <target state="translated">BadArityError</target>
        </trans-unit>
        <trans-unit id="1df44135a4f51a5f9d12b388a32c4c2e6d2a6b30" translate="yes" xml:space="preserve">
          <source>BadArityError &lt;small&gt;exception&lt;/small&gt;</source>
          <target state="translated">BadArityError &lt;small&gt;异常&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="5bb59613df97911bc039ac4ce8ed0b812a7d3491" translate="yes" xml:space="preserve">
          <source>BadBooleanError</source>
          <target state="translated">BadBooleanError</target>
        </trans-unit>
        <trans-unit id="57ba7227528009570f1b1d15380fc32ed086f39e" translate="yes" xml:space="preserve">
          <source>BadBooleanError &lt;small&gt;exception&lt;/small&gt;</source>
          <target state="translated">BadBooleanError &lt;small&gt;异常&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="a0852fff990851477fa9d2fdee0a9048bbbbdb7d" translate="yes" xml:space="preserve">
          <source>BadFunctionError</source>
          <target state="translated">BadFunctionError</target>
        </trans-unit>
        <trans-unit id="e756ec5075fbedd06423ae8813b13fdf69470cc6" translate="yes" xml:space="preserve">
          <source>BadFunctionError &lt;small&gt;exception&lt;/small&gt;</source>
          <target state="translated">BadFunctionError &lt;small&gt;异常&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="f157c6b78035669d35edd4f53d7a99803e6b19c9" translate="yes" xml:space="preserve">
          <source>BadMapError</source>
          <target state="translated">BadMapError</target>
        </trans-unit>
        <trans-unit id="a74cad8b7640a588410f7882a3ccc9f02553c083" translate="yes" xml:space="preserve">
          <source>BadMapError &lt;small&gt;exception&lt;/small&gt;</source>
          <target state="translated">BadMapError &lt;small&gt;异常&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="a7b05ea8ad05f0867a5f60c4ed382b666fac7e20" translate="yes" xml:space="preserve">
          <source>BadStructError</source>
          <target state="translated">BadStructError</target>
        </trans-unit>
        <trans-unit id="77be63d18634fd3f43204f653d7f4f7be7b6d9cf" translate="yes" xml:space="preserve">
          <source>BadStructError &lt;small&gt;exception&lt;/small&gt;</source>
          <target state="translated">BadStructError &lt;small&gt;异常&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="077fe9c54ed5ed26fa547f4ded3ef9a9bb066d65" translate="yes" xml:space="preserve">
          <source>Base</source>
          <target state="translated">Base</target>
        </trans-unit>
        <trans-unit id="b061ce422c6698d64988deeb26c5124d27241a6d" translate="yes" xml:space="preserve">
          <source>Base 16 alphabet</source>
          <target state="translated">基础16个字母</target>
        </trans-unit>
        <trans-unit id="d9713d603d3e619edcf68e9a83a17b392250a596" translate="yes" xml:space="preserve">
          <source>Base 32 (extended hex) alphabet</source>
          <target state="translated">基数32(扩展十六进制)字母</target>
        </trans-unit>
        <trans-unit id="f6d0d37e0e6abc4695da716daeb5b71bf9e4e8a9" translate="yes" xml:space="preserve">
          <source>Base 32 alphabet</source>
          <target state="translated">基数32字母</target>
        </trans-unit>
        <trans-unit id="2ace0138e855f83bb01e7ea6cfff3e40f0341e66" translate="yes" xml:space="preserve">
          <source>Base 64 (URL and filename safe) alphabet</source>
          <target state="translated">64基(URL和文件名安全)字母表</target>
        </trans-unit>
        <trans-unit id="a8bce8929575acb7ad98c820c9d117c8df047208" translate="yes" xml:space="preserve">
          <source>Base 64 alphabet</source>
          <target state="translated">基础64字母</target>
        </trans-unit>
        <trans-unit id="8f7bbf48e0f79ed0979b2afc3fafb20bb06f11dd" translate="yes" xml:space="preserve">
          <source>Basic EEx engine that ships with Elixir.</source>
          <target state="translated">Elixir附带的基本EEX引擎。</target>
        </trans-unit>
        <trans-unit id="3fea98561b7f996109a7e74c90044335541db19e" translate="yes" xml:space="preserve">
          <source>Basic arithmetic</source>
          <target state="translated">基本算术</target>
        </trans-unit>
        <trans-unit id="ab72076fa59e5852da2fccb552c3249d259cf025" translate="yes" xml:space="preserve">
          <source>Basic operators</source>
          <target state="translated">基本操作员</target>
        </trans-unit>
        <trans-unit id="3fc431b29bb2c2516db706b2f480a558166eba6d" translate="yes" xml:space="preserve">
          <source>Basic types</source>
          <target state="translated">基本类型</target>
        </trans-unit>
        <trans-unit id="5db51d4d8d4118f127c924c3d2f8f040e27fb0f4" translate="yes" xml:space="preserve">
          <source>Basic writing and formatting syntax</source>
          <target state="translated">基本写作和格式化语法</target>
        </trans-unit>
        <trans-unit id="6e3c900efbf268090f3977656c91979f9f90e7e4" translate="yes" xml:space="preserve">
          <source>Be aware that a negative &lt;code&gt;count&lt;/code&gt; implies the &lt;code&gt;enumerable&lt;/code&gt; will be enumerated twice: once to calculate the position, and a second time to do the actual splitting.</source>
          <target state="translated">要知道，一个负 &lt;code&gt;count&lt;/code&gt; 意味着 &lt;code&gt;enumerable&lt;/code&gt; 将被枚举两次：一次计算位置，和第二次做实际的分裂。</target>
        </trans-unit>
        <trans-unit id="c537de13da2b3fc86676babd1bbd74c778fed4a2" translate="yes" xml:space="preserve">
          <source>Be aware that this function can match within or across grapheme boundaries. For example, take the grapheme &quot;&amp;eacute;&quot; which is made of the characters &quot;e&quot; and the acute accent. The following returns &lt;code&gt;true&lt;/code&gt;:</source>
          <target state="translated">请注意，此功能可以在字素边界内或跨字素边界匹配。例如，使用由字符&amp;ldquo; e&amp;rdquo;和重音符号组成的字素&amp;ldquo;&amp;eacute;&amp;rdquo;。以下返回 &lt;code&gt;true&lt;/code&gt; ：</target>
        </trans-unit>
        <trans-unit id="fe3b9560a0f552cce44a7d701654dd7f10621bc4" translate="yes" xml:space="preserve">
          <source>Be aware that this function can split within or across grapheme boundaries. For example, take the grapheme &quot;&amp;eacute;&quot; which is made of the characters &quot;e&quot; and the acute accent. The following will split the string into two parts:</source>
          <target state="translated">请注意，此功能可能会在字素边界内或跨字素边界分裂。例如，使用由字符&amp;ldquo; e&amp;rdquo;和重音符号组成的字素&amp;ldquo;&amp;eacute;&amp;rdquo;。下面将字符串分为两部分：</target>
        </trans-unit>
        <trans-unit id="cf25f9df3bad9cb90f28a2c00f8a03ffb9eb9c29" translate="yes" xml:space="preserve">
          <source>Be careful when invoking this function as any project configuration won't be reloaded.</source>
          <target state="translated">在调用这个函数时要小心,因为任何项目配置都不会被重新加载。</target>
        </trans-unit>
        <trans-unit id="e18c280856e9dc54c0e0dc6a6cbf86bdcec2ba1b" translate="yes" xml:space="preserve">
          <source>Because &lt;a href=&quot;date&quot;&gt;&lt;code&gt;Date&lt;/code&gt;&lt;/a&gt; does not hold time information, data will be lost during the conversion.</source>
          <target state="translated">由于&lt;a href=&quot;date&quot;&gt; &lt;code&gt;Date&lt;/code&gt; &lt;/a&gt;不包含时间信息，因此转换期间数据将丢失。</target>
        </trans-unit>
        <trans-unit id="89a503aad4225c39937eafdaf3de6829d7a2c3d7" translate="yes" xml:space="preserve">
          <source>Because &lt;a href=&quot;date&quot;&gt;&lt;code&gt;Date&lt;/code&gt;&lt;/a&gt; does not hold time nor time zone information, data will be lost during the conversion.</source>
          <target state="translated">由于&amp;ldquo; &lt;a href=&quot;date&quot;&gt; &lt;code&gt;Date&lt;/code&gt; &lt;/a&gt; &amp;rdquo;不保存时间或时区信息，因此转换期间数据将丢失。</target>
        </trans-unit>
        <trans-unit id="ee3ed875cfa3017d3e47eeb02c53615d3ef66c7c" translate="yes" xml:space="preserve">
          <source>Because &lt;a href=&quot;naivedatetime&quot;&gt;&lt;code&gt;NaiveDateTime&lt;/code&gt;&lt;/a&gt; does not hold time zone information, any time zone related data will be lost during the conversion.</source>
          <target state="translated">由于&lt;a href=&quot;naivedatetime&quot;&gt; &lt;code&gt;NaiveDateTime&lt;/code&gt; &lt;/a&gt;不保存时区信息，因此在转换过程中所有与时区相关的数据都将丢失。</target>
        </trans-unit>
        <trans-unit id="9953ea4685d0c190284f858b1d39f874790b5054" translate="yes" xml:space="preserve">
          <source>Because &lt;a href=&quot;time&quot;&gt;&lt;code&gt;Time&lt;/code&gt;&lt;/a&gt; does not hold date information, data will be lost during the conversion.</source>
          <target state="translated">由于&lt;a href=&quot;time&quot;&gt; &lt;code&gt;Time&lt;/code&gt; &lt;/a&gt;不包含日期信息，因此转换期间数据将丢失。</target>
        </trans-unit>
        <trans-unit id="a4d4f5f9b7fb3d32cc67b90484bddec4871ac391" translate="yes" xml:space="preserve">
          <source>Because &lt;a href=&quot;time&quot;&gt;&lt;code&gt;Time&lt;/code&gt;&lt;/a&gt; does not hold date nor time zone information, data will be lost during the conversion.</source>
          <target state="translated">由于&amp;ldquo; &lt;a href=&quot;time&quot;&gt; &lt;code&gt;Time&lt;/code&gt; &lt;/a&gt; &amp;rdquo;不保存日期或时区信息，因此转换期间数据将丢失。</target>
        </trans-unit>
        <trans-unit id="78be6a8f5f24d82881c32f396a97e82cbdfa517d" translate="yes" xml:space="preserve">
          <source>Because a message may arrive before the timeout is set, even a timeout of &lt;code&gt;0&lt;/code&gt; milliseconds is not guaranteed to execute. To take another action immediately and unconditionally, use a &lt;code&gt;:continue&lt;/code&gt; instruction.</source>
          <target state="translated">由于消息可能在设置超时之前到达，因此即使 &lt;code&gt;0&lt;/code&gt; 毫秒的超时也无法保证执行。要立即无条件执行其他操作，请使用 &lt;code&gt;:continue&lt;/code&gt; 指令。</target>
        </trans-unit>
        <trans-unit id="4eb887b63f6f74f7dc70ebfb02ba9a98c81899af" translate="yes" xml:space="preserve">
          <source>Because code comments are handled apart from the code representation (AST), there are some situations where code comments are seen as ambiguous by the code formatter. For example, the comment in the anonymous function below</source>
          <target state="translated">因为代码注释是与代码表示(AST)分开处理的,所以在某些情况下,代码注释会被代码格式化器视为模棱两可。例如,在下面的匿名函数中的注释是</target>
        </trans-unit>
        <trans-unit id="cb95a029baf84de67bb48b3b03c76e87ea66bc98" translate="yes" xml:space="preserve">
          <source>Because private functions cannot be accessed externally, Elixir will warn if a private function has a &lt;code&gt;@doc&lt;/code&gt; attribute and will discard its content. However, you can add code comments to private functions, as with any other piece of code, and we recommend developers to do so whenever they believe it will add relevant information to the readers and maintainers of such code.</source>
          <target state="translated">由于私有函数无法从外部访问，因此，如果私有函数具有 &lt;code&gt;@doc&lt;/code&gt; 属性，Elixir将发出警告，并将丢弃其内容。但是，您可以像其他任何代码段一样，将代码注释添加到私有函数中，并且我们建议开发人员在认为会为此类代码的读者和维护者添加相关信息的情况下添加注释。</target>
        </trans-unit>
        <trans-unit id="63e17dd4459e7d876a444fbbbb7e7cf39c566595" translate="yes" xml:space="preserve">
          <source>Because processes are linked, we now see a message saying the parent process, which is the shell process, has received an EXIT signal from another process causing the shell to terminate. IEx detects this situation and starts a new shell session.</source>
          <target state="translated">因为进程是链接的,所以我们现在看到一条消息,说父进程,也就是shell进程收到了另一个进程的EXIT信号,导致shell终止。IEx检测到这种情况,就会启动一个新的shell会话。</target>
        </trans-unit>
        <trans-unit id="974c41adb42d893477152cfa18608582df7753a0" translate="yes" xml:space="preserve">
          <source>Because we have assigned the value of 1 to the variable x, this last example could also have been written as:</source>
          <target state="translated">因为我们已经给变量x赋值1,所以最后这个例子也可以写成。</target>
        </trans-unit>
        <trans-unit id="f4b97ed92549a1467b9e669e260cb145416087a8" translate="yes" xml:space="preserve">
          <source>Because we passed the &lt;code&gt;--sup&lt;/code&gt; flag, Mix automatically added &lt;code&gt;mod: {KVServer.Application, []}&lt;/code&gt;, specifying that &lt;code&gt;KVServer.Application&lt;/code&gt; is our application callback module. &lt;code&gt;KVServer.Application&lt;/code&gt; will start our application supervision tree.</source>
          <target state="translated">因为我们传递了 &lt;code&gt;--sup&lt;/code&gt; 标志，所以Mix自动添加了 &lt;code&gt;mod: {KVServer.Application, []}&lt;/code&gt; ，指定 &lt;code&gt;KVServer.Application&lt;/code&gt; 是我们的应用程序回调模块。 &lt;code&gt;KVServer.Application&lt;/code&gt; 将启动我们的应用程序监视树。</target>
        </trans-unit>
        <trans-unit id="0e079b753ab1db1c0b01fd308f3688e970fbe5e7" translate="yes" xml:space="preserve">
          <source>Before Erlang/OTP 21, the call is going to block until a connection happens. This was done to guarantee ordering. Starting with Erlang/OTP 21, both Erlang and Elixir do not block the call.</source>
          <target state="translated">在Erlang/OTP 21之前,呼叫要阻塞,直到发生连接。这样做是为了保证排序。从Erlang/OTP 21开始,Erlang和Elixir都不会阻塞调用。</target>
        </trans-unit>
        <trans-unit id="0bd87597929851d458fd795ea7da7ac0201de944" translate="yes" xml:space="preserve">
          <source>Before creating our new application, we must discuss how Mix handles dependencies. In practice, there are two kinds of dependencies we usually work with: internal and external dependencies. Mix supports mechanisms to work with both of them.</source>
          <target state="translated">在创建我们的新应用程序之前,我们必须讨论Mix如何处理依赖关系。在实践中,我们通常会处理两种依赖关系:内部依赖和外部依赖。Mix支持处理这两种依赖关系的机制。</target>
        </trans-unit>
        <trans-unit id="9e1d3d5382e86bf1a14e9500b332884bdb9faaa9" translate="yes" xml:space="preserve">
          <source>Before doing anything, Mix will compile the current application if needed, unless you pass &lt;code&gt;--no-compile&lt;/code&gt;.</source>
          <target state="translated">在执行任何操作之前，Mix将在需要时编译当前应用程序，除非您传递 &lt;code&gt;--no-compile&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="deff23ba4c089e0db16c965d3ed9a26698499445" translate="yes" xml:space="preserve">
          <source>Before moving on and adding more features to &lt;code&gt;KV.Bucket&lt;/code&gt;, let&amp;rsquo;s talk about ExUnit callbacks. As you may expect, all &lt;code&gt;KV.Bucket&lt;/code&gt; tests will require a bucket agent to be up and running. Luckily, ExUnit supports callbacks that allow us to skip such repetitive tasks.</source>
          <target state="translated">在继续向 &lt;code&gt;KV.Bucket&lt;/code&gt; 添加更多功能之前，我们先讨论一下ExUnit回调。如您所料，所有 &lt;code&gt;KV.Bucket&lt;/code&gt; 测试都需要启动并运行Bucket代理。幸运的是，ExUnit支持回调，使我们可以跳过此类重复性任务。</target>
        </trans-unit>
        <trans-unit id="961885446a9fe194662c4186d4c9a590779945e8" translate="yes" xml:space="preserve">
          <source>Before running the code, it invokes the &lt;code&gt;app.start&lt;/code&gt; task which compiles and loads your project. Then the target expression is profiled, together with all matching function calls using the Erlang trace BIFs. The tracing of the function calls for that is enabled when the profiling is begun, and disabled when profiling is stopped.</source>
          <target state="translated">在运行代码之前，它会调用 &lt;code&gt;app.start&lt;/code&gt; 任务，该任务将编译并加载您的项目。然后，使用Erlang跟踪BIF对目标表达式以及所有匹配的函数调用进行分析。该函数的跟踪要求在开始分析时启用该功能，而在停止分析时禁用该功能。</target>
        </trans-unit>
        <trans-unit id="98349800481aea068998de4b5050ab0150891107" translate="yes" xml:space="preserve">
          <source>Before running the code, it invokes the &lt;code&gt;app.start&lt;/code&gt; task which compiles and loads your project. Then the target expression is profiled, together with all matching function calls, by setting breakpoints containing counters. These can only be set on BEAM code so BIFs cannot be call count traced.</source>
          <target state="translated">在运行代码之前，它会调用 &lt;code&gt;app.start&lt;/code&gt; 任务，该任务将编译并加载您的项目。然后，通过设置包含计数器的断点，对目标表达式以及所有匹配的函数调用进行概要分析。这些只能在BEAM代码上设置，因此无法跟踪BIF。</target>
        </trans-unit>
        <trans-unit id="0c0b9f1f5eae004310d510256ead240f82165663" translate="yes" xml:space="preserve">
          <source>Before running the code, it invokes the &lt;code&gt;app.start&lt;/code&gt; task which compiles and loads your project. Then the target expression is profiled, together with all processes which are spawned by it. Other processes (e.g. those residing in the OTP application supervision tree) are not profiled.</source>
          <target state="translated">在运行代码之前，它会调用 &lt;code&gt;app.start&lt;/code&gt; 任务，该任务将编译并加载您的项目。然后，对目标表达式及其所产生的所有过程进行分析。未分析其他进程（例如，驻留在OTP应用程序监视树中的那些进程）。</target>
        </trans-unit>
        <trans-unit id="1031dca640f3e14f582133d487561b8ee04d85da" translate="yes" xml:space="preserve">
          <source>Before we added monitoring, if a bucket crashed, the registry would forever point to a bucket that no longer exists. If a user tried to read or write to the crashed bucket, it would fail. Any attempt at creating a new bucket with the same name would just return the PID of the crashed bucket. In other words, that registry entry for that bucket would forever be in a bad state. Once we added monitoring, the registry automatically removes the entry for the crashed bucket. Trying to lookup the crashed bucket now (correctly) says the bucket does not exist and a user of the system can successfully create a new one if desired.</source>
          <target state="translated">在我们添加监控之前,如果一个 bucket 崩溃,注册表将永远指向一个不再存在的 bucket。如果用户试图对崩溃的 bucket 进行读取或写入,就会失败。任何试图创建一个同名的新 bucket 的尝试都只会返回已崩溃 bucket 的 PID。换句话说,该 bucket 的注册表条目将永远处于不良状态。一旦我们添加了监控,注册表就会自动删除崩溃的 bucket 的条目。现在试图查找崩溃的 bucket(正确的)说该 bucket 不存在,如果需要的话,系统的用户可以成功创建一个新的 bucket。</target>
        </trans-unit>
        <trans-unit id="73411f78618a7af4cd67aad8b3e0200b03df8a87" translate="yes" xml:space="preserve">
          <source>Before we finish this brief introduction, you will notice that, even though we defined a variable &lt;code&gt;x&lt;/code&gt; inside our quote:</source>
          <target state="translated">在完成本简短介绍之前，您会注意到，即使我们在引号中定义了变量 &lt;code&gt;x&lt;/code&gt; ：</target>
        </trans-unit>
        <trans-unit id="9e016d24e4bd4f71c8ebd97643051b410bf7754a" translate="yes" xml:space="preserve">
          <source>Before we implement this function, let&amp;rsquo;s change our server to start using our new &lt;code&gt;parse/1&lt;/code&gt; and &lt;code&gt;run/1&lt;/code&gt; functions. Remember, our &lt;code&gt;read_line/1&lt;/code&gt; function was also crashing when the client closed the socket, so let&amp;rsquo;s take the opportunity to fix it, too. Open up &lt;code&gt;lib/kv_server.ex&lt;/code&gt; and replace the existing server definition:</source>
          <target state="translated">在实现此功能之前，让我们更改服务器以开始使用新的 &lt;code&gt;parse/1&lt;/code&gt; 和 &lt;code&gt;run/1&lt;/code&gt; 函数。记住，当客户端关闭套接字时，我们的 &lt;code&gt;read_line/1&lt;/code&gt; 函数也崩溃了，所以我们也趁此机会对其进行修复。打开 &lt;code&gt;lib/kv_server.ex&lt;/code&gt; 并替换现有的服务器定义：</target>
        </trans-unit>
        <trans-unit id="f3303e03cd7a934490164882116bb279452d10ec" translate="yes" xml:space="preserve">
          <source>Before we move on to the next chapter, let&amp;rsquo;s discuss the client/server dichotomy in agents. Let&amp;rsquo;s expand the &lt;code&gt;delete/2&lt;/code&gt; function we have just implemented:</source>
          <target state="translated">在继续下一章之前，让我们讨论代理中的客户端/服务器二分法。让我们扩展刚刚实现的 &lt;code&gt;delete/2&lt;/code&gt; 函数：</target>
        </trans-unit>
        <trans-unit id="c38b5c81b1c893dcec882d171436db1cd1a630dc" translate="yes" xml:space="preserve">
          <source>Behaves as &lt;a href=&quot;#monitor/2&quot;&gt;&lt;code&gt;monitor/2&lt;/code&gt;&lt;/a&gt; except that it allows an extra option to be given, namely &lt;code&gt;:allow_passive_connect&lt;/code&gt;.</source>
          <target state="translated">表现为&lt;a href=&quot;#monitor/2&quot;&gt; &lt;code&gt;monitor/2&lt;/code&gt; ,&lt;/a&gt;除了它允许提供一个附加选项，即 &lt;code&gt;:allow_passive_connect&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="e1590670ae5ba07b6059ef77a6163f923d148669" translate="yes" xml:space="preserve">
          <source>Behaves exactly like &lt;a href=&quot;#get_and_update/3&quot;&gt;&lt;code&gt;get_and_update/3&lt;/code&gt;&lt;/a&gt;, but raises a &lt;a href=&quot;keyerror&quot;&gt;&lt;code&gt;KeyError&lt;/code&gt;&lt;/a&gt; exception if &lt;code&gt;key&lt;/code&gt; is not present in &lt;code&gt;map&lt;/code&gt;.</source>
          <target state="translated">表现酷似&lt;a href=&quot;#get_and_update/3&quot;&gt; &lt;code&gt;get_and_update/3&lt;/code&gt; &lt;/a&gt;，但提出了一个&lt;a href=&quot;keyerror&quot;&gt; &lt;code&gt;KeyError&lt;/code&gt; 异常&lt;/a&gt;异常，如果 &lt;code&gt;key&lt;/code&gt; 不存在于 &lt;code&gt;map&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="171ca0385a0e84eb697558f3866b7cb4cf03fcb1" translate="yes" xml:space="preserve">
          <source>Behaviour</source>
          <target state="translated">Behaviour</target>
        </trans-unit>
        <trans-unit id="50adeaa74402f255e81a881e8e825fcfde5736a2" translate="yes" xml:space="preserve">
          <source>Behaviours</source>
          <target state="translated">Behaviours</target>
        </trans-unit>
        <trans-unit id="520b702bda3e42703a9629b3c841c1dac503dd33" translate="yes" xml:space="preserve">
          <source>Behaviours are frequently used with dynamic dispatching. For example, we could add a &lt;code&gt;parse!&lt;/code&gt; function to the &lt;code&gt;Parser&lt;/code&gt; module that dispatches to the given implementation and returns the &lt;code&gt;:ok&lt;/code&gt; result or raises in cases of &lt;code&gt;:error&lt;/code&gt;:</source>
          <target state="translated">行为经常与动态调度一起使用。例如，我们可以添加一个 &lt;code&gt;parse!&lt;/code&gt; &lt;code&gt;Parser&lt;/code&gt; 模块的函数，该模块调度到给定的实现并返回 &lt;code&gt;:ok&lt;/code&gt; 结果或在 &lt;code&gt;:error&lt;/code&gt; 情况下引发：</target>
        </trans-unit>
        <trans-unit id="c431c072b0cc17065274eb235452b6f56afb83ac" translate="yes" xml:space="preserve">
          <source>Behaviours can be referenced by modules to ensure they implement required specific function signatures defined by &lt;code&gt;@callback&lt;/code&gt;.</source>
          <target state="translated">行为可以由模块引用，以确保行为实现 &lt;code&gt;@callback&lt;/code&gt; 定义的所需特定功能签名。</target>
        </trans-unit>
        <trans-unit id="18891de861c3177370c1c4c8a6abb93b6d478d0c" translate="yes" xml:space="preserve">
          <source>Behaviours in Elixir (and Erlang) are a way to separate and abstract the generic part of a component (which becomes the &lt;em&gt;behaviour module&lt;/em&gt;) from the specific part (which becomes the &lt;em&gt;callback module&lt;/em&gt;).</source>
          <target state="translated">Elixir（和Erlang）中的行为是一种将组件的通用部分（变为&lt;em&gt;行为模块&lt;/em&gt;）与特定部分（变为&lt;em&gt;回调模块&lt;/em&gt;）分离和抽象的方法。</target>
        </trans-unit>
        <trans-unit id="59b495bc5ef8fa3525a42f910a73c32fc61ed8ab" translate="yes" xml:space="preserve">
          <source>Behaviours provide a way to:</source>
          <target state="translated">行为提供了一种方式:</target>
        </trans-unit>
        <trans-unit id="cc4b77c255d4ba04e467a0cc47a0e51ec0adef1c" translate="yes" xml:space="preserve">
          <source>Behind the scenes, &lt;code&gt;use&lt;/code&gt; requires the given module and then calls the &lt;code&gt;__using__/1&lt;/code&gt; callback on it allowing the module to inject some code into the current context. Some modules (for example, the above &lt;code&gt;ExUnit.Case&lt;/code&gt;, but also &lt;code&gt;Supervisor&lt;/code&gt; and &lt;code&gt;GenServer&lt;/code&gt;) use this mechanism to populate your module with some basic behaviour, which your module is intended to override or complete.</source>
          <target state="translated">在幕后， &lt;code&gt;use&lt;/code&gt; 需要给定的模块，然后在其上调用 &lt;code&gt;__using__/1&lt;/code&gt; 回调，以允许该模块向当前上下文中注入一些代码。一些模块（例如，上面的 &lt;code&gt;ExUnit.Case&lt;/code&gt; ，还有 &lt;code&gt;Supervisor&lt;/code&gt; 和 &lt;code&gt;GenServer&lt;/code&gt; ）使用此机制向模块中填充一些基本行为，这些行为将被模块覆盖或完成。</target>
        </trans-unit>
        <trans-unit id="603deb4a274e7852a27649e6771d381771e20617" translate="yes" xml:space="preserve">
          <source>Below we provide a more detailed look into the available options.</source>
          <target state="translated">下面我们为大家详细介绍一下可供选择的方案。</target>
        </trans-unit>
        <trans-unit id="fcad24575feed887abc51ccc85f8548bece28f68" translate="yes" xml:space="preserve">
          <source>Besides &lt;a href=&quot;#async/1&quot;&gt;&lt;code&gt;async/1&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#await/2&quot;&gt;&lt;code&gt;await/2&lt;/code&gt;&lt;/a&gt;, tasks can also be started as part of a supervision tree and dynamically spawned on remote nodes. We will explore all three scenarios next.</source>
          <target state="translated">除了&lt;a href=&quot;#async/1&quot;&gt; &lt;code&gt;async/1&lt;/code&gt; &lt;/a&gt;和&lt;a href=&quot;#await/2&quot;&gt; &lt;code&gt;await/2&lt;/code&gt; &lt;/a&gt;，任务也可以作为监督树的一部分启动，并在远程节点上动态产生。接下来，我们将探讨所有这三种情况。</target>
        </trans-unit>
        <trans-unit id="84bd8dd7435a7e50a7902eac99410b942c4d0240" translate="yes" xml:space="preserve">
          <source>Besides &lt;code&gt;@before_compile&lt;/code&gt;, there are other useful module attributes like &lt;code&gt;@on_definition&lt;/code&gt; and &lt;code&gt;@after_compile&lt;/code&gt;, which you can read more about in &lt;a href=&quot;https://hexdocs.pm/elixir/Module.html&quot;&gt;the docs for the &lt;code&gt;Module&lt;/code&gt; module&lt;/a&gt;. You can also find useful information about macros and the compilation environment in the documentation for the &lt;a href=&quot;https://hexdocs.pm/elixir/Macro.html&quot;&gt;&lt;code&gt;Macro&lt;/code&gt; module&lt;/a&gt; and &lt;a href=&quot;https://hexdocs.pm/elixir/Macro.Env.html&quot;&gt;&lt;code&gt;Macro.Env&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">除了 &lt;code&gt;@before_compile&lt;/code&gt; 之外，还有其他有用的模块属性，例如 &lt;code&gt;@on_definition&lt;/code&gt; 和 &lt;code&gt;@after_compile&lt;/code&gt; ，您可以&lt;a href=&quot;https://hexdocs.pm/elixir/Module.html&quot;&gt;在 &lt;code&gt;Module&lt;/code&gt; 模块的文档中&lt;/a&gt;阅读更多内容。您还可以在&lt;a href=&quot;https://hexdocs.pm/elixir/Macro.html&quot;&gt; &lt;code&gt;Macro&lt;/code&gt; 模块&lt;/a&gt;和&lt;a href=&quot;https://hexdocs.pm/elixir/Macro.Env.html&quot;&gt; &lt;code&gt;Macro.Env&lt;/code&gt; &lt;/a&gt;的文档中找到有关宏和编译环境的有用信息。</target>
        </trans-unit>
        <trans-unit id="b1e80b1ec582384418cc616d1f8343b52b2b4cd5" translate="yes" xml:space="preserve">
          <source>Besides &lt;code&gt;case&lt;/code&gt; and &lt;code&gt;cond&lt;/code&gt;, Elixir also provides the macros &lt;code&gt;if/2&lt;/code&gt; and &lt;code&gt;unless/2&lt;/code&gt; which are useful when you need to check for only one condition:</source>
          <target state="translated">除了 &lt;code&gt;case&lt;/code&gt; 和 &lt;code&gt;cond&lt;/code&gt; 之外，Elixir还提供了 &lt;code&gt;if/2&lt;/code&gt; 和 &lt;code&gt;unless/2&lt;/code&gt; 宏，这些宏在您仅需要检查一种情况时很有用：</target>
        </trans-unit>
        <trans-unit id="f6cdfaf2baa94aad4e65fa26be490d407b1c2ff9" translate="yes" xml:space="preserve">
          <source>Besides allowing pattern matching on struct fields, such as:</source>
          <target state="translated">除了允许对结构字段进行模式匹配外,如:。</target>
        </trans-unit>
        <trans-unit id="01bb2cd8bbff810bc2463c24d74581c14f3d6b3f" translate="yes" xml:space="preserve">
          <source>Besides environments, Mix supports targets. Targets are useful when a project needs to compile to different architectures and some of the dependencies are only available to some of them. By default, the target is &lt;code&gt;:host&lt;/code&gt; but it can be set via the &lt;code&gt;MIX_TARGET&lt;/code&gt; environment variable. The target can be read via &lt;a href=&quot;mix#target/0&quot;&gt;&lt;code&gt;Mix.target/0&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">除了环境之外，Mix还支持目标。当项目需要编译为不同的体系结构并且某些依赖项仅对其中一些可用时，目标很有用。默认情况下，目标是 &lt;code&gt;:host&lt;/code&gt; ,但是可以通过 &lt;code&gt;MIX_TARGET&lt;/code&gt; 环境变量来设置。可以通过&lt;a href=&quot;mix#target/0&quot;&gt; &lt;code&gt;Mix.target/0&lt;/code&gt; &lt;/a&gt;读取目标。</target>
        </trans-unit>
        <trans-unit id="57fd661d50a52343735a3a512de7f5de0c57eebb" translate="yes" xml:space="preserve">
          <source>Besides functions for opening, reading and writing files, the &lt;code&gt;File&lt;/code&gt; module has many functions to work with the file system. Those functions are named after their UNIX equivalents. For example, &lt;code&gt;File.rm/1&lt;/code&gt; can be used to remove files, &lt;code&gt;File.mkdir/1&lt;/code&gt; to create directories, &lt;code&gt;File.mkdir_p/1&lt;/code&gt; to create directories and all their parent chain. There are even &lt;code&gt;File.cp_r/2&lt;/code&gt; and &lt;code&gt;File.rm_rf/1&lt;/code&gt; to respectively copy and remove files and directories recursively (i.e., copying and removing the contents of the directories too).</source>
          <target state="translated">除了用于打开，读取和写入文件的功能外，&amp;ldquo; &lt;code&gt;File&lt;/code&gt; 模块还具有许多与文件系统配合使用的功能。这些函数以其UNIX等效项命名。例如，可以使用 &lt;code&gt;File.rm/1&lt;/code&gt; 删除文件，使用 &lt;code&gt;File.mkdir/1&lt;/code&gt; 创建目录，使用 &lt;code&gt;File.mkdir_p/1&lt;/code&gt; 创建目录及其所有父链。甚至还有 &lt;code&gt;File.cp_r/2&lt;/code&gt; 和 &lt;code&gt;File.rm_rf/1&lt;/code&gt; 分别递归地复制和删除文件和目录（即，也复制和删除目录的内容）。</target>
        </trans-unit>
        <trans-unit id="bf0bf58fef26f8d47abf58c4e98d942fe7e09d41" translate="yes" xml:space="preserve">
          <source>Besides getting a value and updating the agent state, agents allow us to get a value and update the agent state in one function call via &lt;code&gt;Agent.get_and_update/2&lt;/code&gt;. Let&amp;rsquo;s implement a &lt;code&gt;KV.Bucket.delete/2&lt;/code&gt; function that deletes a key from the bucket, returning its current value:</source>
          <target state="translated">除了获取值和更新代理状态之外，代理还允许我们通过 &lt;code&gt;Agent.get_and_update/2&lt;/code&gt; 在一个函数调用中获取值并更新代理状态。让我们实现一个 &lt;code&gt;KV.Bucket.delete/2&lt;/code&gt; 函数，该函数从存储桶中删除一个键，并返回其当前值：</target>
        </trans-unit>
        <trans-unit id="9789e063966a758871f9c998af33a9bf355ebc18" translate="yes" xml:space="preserve">
          <source>Besides lowercase sigils, Elixir supports uppercase sigils to deal with escaping characters and interpolation. While both &lt;code&gt;~s&lt;/code&gt; and &lt;code&gt;~S&lt;/code&gt; will return strings, the former allows escape codes and interpolation while the latter does not:</source>
          <target state="translated">除小写字母外，Elixir还支持大写字母以处理转义字符和插值。尽管这两个 &lt;code&gt;~s&lt;/code&gt; 和 &lt;code&gt;~S&lt;/code&gt; 将返回字符串，前者允许转义码和内插，而后者则没有：</target>
        </trans-unit>
        <trans-unit id="d7d97bd69019c17af96e7bec585780be62ea803d" translate="yes" xml:space="preserve">
          <source>Besides regular expressions, Elixir ships with three other sigils.</source>
          <target state="translated">除了正则表达式之外,Elixir还搭载了另外三种标志。</target>
        </trans-unit>
        <trans-unit id="fa2db308837aea27b007c38a306f2dbb8af757b6" translate="yes" xml:space="preserve">
          <source>Besides relying on pattern matching, &lt;code&gt;rescue&lt;/code&gt; clauses provide some conveniences around exceptions that allow one to rescue an exception by its name. All the following formats are valid patterns in &lt;code&gt;rescue&lt;/code&gt; clauses:</source>
          <target state="translated">除了依靠模式匹配之外， &lt;code&gt;rescue&lt;/code&gt; 子句还为异常提供了一些便利，使人们可以按其名称抢救异常。以下所有格式都是 &lt;code&gt;rescue&lt;/code&gt; 子句中的有效模式：</target>
        </trans-unit>
        <trans-unit id="3ce006769a3ad73d2aa5c3e5097589962e275bb7" translate="yes" xml:space="preserve">
          <source>Besides the &lt;code&gt;BREAK&lt;/code&gt; menu, one can type &lt;code&gt;Ctrl+G&lt;/code&gt; to get to the &lt;code&gt;User switch command&lt;/code&gt; menu. When reached, you can type &lt;code&gt;h&lt;/code&gt; to get more information.</source>
          <target state="translated">除了 &lt;code&gt;BREAK&lt;/code&gt; 菜单外，还可以键入 &lt;code&gt;Ctrl+G&lt;/code&gt; 进入&amp;ldquo; &lt;code&gt;User switch command&lt;/code&gt; 菜单。到达后，您可以键入 &lt;code&gt;h&lt;/code&gt; 以获取更多信息。</target>
        </trans-unit>
        <trans-unit id="17a296909c364def2f70ba9542fcca5af1be1690" translate="yes" xml:space="preserve">
          <source>Besides the booleans &lt;code&gt;true&lt;/code&gt; and &lt;code&gt;false&lt;/code&gt; Elixir also has the concept of a &quot;truthy&quot; or &quot;falsy&quot; value.</source>
          <target state="translated">除了布尔值 &lt;code&gt;true&lt;/code&gt; 和 &lt;code&gt;false&lt;/code&gt; 药剂也有一个&amp;ldquo;truthy&amp;rdquo;或&amp;ldquo;falsy&amp;rdquo;价值的概念。</target>
        </trans-unit>
        <trans-unit id="5b77eafa1881088ae45eaa4e4da415f6bbc48892" translate="yes" xml:space="preserve">
          <source>Besides the functions available in this module, the &lt;a href=&quot;kernel&quot;&gt;&lt;code&gt;Kernel&lt;/code&gt;&lt;/a&gt; module exposes and auto-imports some basic functionality related to processes available through the following functions:</source>
          <target state="translated">除了此模块中可用的功能之外，&lt;a href=&quot;kernel&quot;&gt; &lt;code&gt;Kernel&lt;/code&gt; &lt;/a&gt;模块还公开并自动导入与通过以下功能可用的过程相关的一些基本功能：</target>
        </trans-unit>
        <trans-unit id="24c285ef9b5dcc5c662b164a6b173b44cbf8936b" translate="yes" xml:space="preserve">
          <source>Besides the modules and functions libraries provide as part of their public interface, libraries may also implement important functionality that is not part of their API. While these modules and functions can be accessed, they are meant to be internal to the library and thus should not have documentation for end users.</source>
          <target state="translated">除了库提供的模块和函数作为其公共接口的一部分外,库还可能实现一些不属于其API的重要功能。虽然这些模块和功能可以被访问,但它们是库的内部功能,因此不应该为终端用户提供文档。</target>
        </trans-unit>
        <trans-unit id="d1e278a8ee8e14b171370d3d1993e61557fa885d" translate="yes" xml:space="preserve">
          <source>Besides the synchronous and asynchronous communication provided by &lt;a href=&quot;#call/3&quot;&gt;&lt;code&gt;call/3&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#cast/2&quot;&gt;&lt;code&gt;cast/2&lt;/code&gt;&lt;/a&gt;, &quot;regular&quot; messages sent by functions such as &lt;a href=&quot;kernel#send/2&quot;&gt;&lt;code&gt;Kernel.send/2&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;process#send_after/4&quot;&gt;&lt;code&gt;Process.send_after/4&lt;/code&gt;&lt;/a&gt; and similar, can be handled inside the &lt;a href=&quot;#c:handle_info/2&quot;&gt;&lt;code&gt;handle_info/2&lt;/code&gt;&lt;/a&gt; callback.</source>
          <target state="translated">除了&lt;a href=&quot;#call/3&quot;&gt; &lt;code&gt;call/3&lt;/code&gt; &lt;/a&gt;和&lt;a href=&quot;#cast/2&quot;&gt; &lt;code&gt;cast/2&lt;/code&gt; &lt;/a&gt;提供的同步和异步通信外，还可以在&lt;a href=&quot;#c:handle_info/2&quot;&gt; &lt;code&gt;handle_info/2&lt;/code&gt; &lt;/a&gt;回调内部处理由&lt;a href=&quot;kernel#send/2&quot;&gt; &lt;code&gt;Kernel.send/2&lt;/code&gt; &lt;/a&gt;，&lt;a href=&quot;process#send_after/4&quot;&gt; &lt;code&gt;Process.send_after/4&lt;/code&gt; &lt;/a&gt;等功能发送的&amp;ldquo;常规&amp;rdquo;消息。</target>
        </trans-unit>
        <trans-unit id="517337ce1caa7ff89458c6a131be85fc7edc22c4" translate="yes" xml:space="preserve">
          <source>Besides the tuple defined above, there are five Elixir literals that, when quoted, return themselves (and not a tuple). They are:</source>
          <target state="translated">除了上面定义的元组外,还有五个Elixir的字词,在引用时,会返回自己(而不是元组)。它们是:</target>
        </trans-unit>
        <trans-unit id="36c1c37f1ad939c92cf62bb17cfdd2a856f1bff4" translate="yes" xml:space="preserve">
          <source>Besides the tuple described above, Elixir has a few literals that are also part of its AST. Those literals return themselves when quoted. They are:</source>
          <target state="translated">除了上面描述的元组,Elixir还有一些字元也是其AST的一部分。这些字元在被引用时自己会返回。它们是:</target>
        </trans-unit>
        <trans-unit id="be7cb95beca4417119b196c5145eac30a92f05f3" translate="yes" xml:space="preserve">
          <source>Besides these boolean operators, Elixir also provides &lt;code&gt;||&lt;/code&gt;, &lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt; and &lt;code&gt;!&lt;/code&gt; which accept arguments of any type. For these operators, all values except &lt;code&gt;false&lt;/code&gt; and &lt;code&gt;nil&lt;/code&gt; will evaluate to true:</source>
          <target state="translated">除了这些布尔运算符，Elixir还提供 &lt;code&gt;||&lt;/code&gt; 。， &lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt; 和 &lt;code&gt;!&lt;/code&gt; 接受任何类型的参数。对于这些运算符，除 &lt;code&gt;false&lt;/code&gt; 和 &lt;code&gt;nil&lt;/code&gt; 外的所有值都将计算为true：</target>
        </trans-unit>
        <trans-unit id="eb8de9ce8757ee3c542141ac80ff3b33dc04edff" translate="yes" xml:space="preserve">
          <source>Best practices</source>
          <target state="translated">最佳做法</target>
        </trans-unit>
        <trans-unit id="21f3045d2e00281b8e684e3df830ced85cb7ac6f" translate="yes" xml:space="preserve">
          <source>Between &lt;code&gt;(&lt;/code&gt;/&lt;code&gt;)&lt;/code&gt;:</source>
          <target state="translated">在 &lt;code&gt;(&lt;/code&gt; / &lt;code&gt;)&lt;/code&gt; 之间：</target>
        </trans-unit>
        <trans-unit id="c2e583cf3da1aee0a9f017fc5ad1b43ad947c175" translate="yes" xml:space="preserve">
          <source>Between &lt;code&gt;fn/end&lt;/code&gt;:</source>
          <target state="translated">在 &lt;code&gt;fn/end&lt;/code&gt; 之间：</target>
        </trans-unit>
        <trans-unit id="b564736adfe95cd2b39d3044818184c7616b6b8d" translate="yes" xml:space="preserve">
          <source>Between &lt;code&gt;use ExUnit.Case&lt;/code&gt; and setup, add the following call:</source>
          <target state="translated">在 &lt;code&gt;use ExUnit.Case&lt;/code&gt; 和设置之间，添加以下调用：</target>
        </trans-unit>
        <trans-unit id="536a214ab9480c5673911e94b4e8775035965909" translate="yes" xml:space="preserve">
          <source>Beware that the Erlang VM does not terminate child processes when it shuts down. Therefore, if you use &lt;a href=&quot;#content&quot;&gt;&lt;code&gt;mix cmd&lt;/code&gt;&lt;/a&gt; to start long running processes and then shut down the VM, it is likely that those child processes won't be terminated with the VM.</source>
          <target state="translated">请注意，Erlang VM关闭时不会终止子进程。因此，如果使用&lt;a href=&quot;#content&quot;&gt; &lt;code&gt;mix cmd&lt;/code&gt; &lt;/a&gt;启动长时间运行的进程，然后关闭VM，则这些子进程很可能不会随VM终止。</target>
        </trans-unit>
        <trans-unit id="ac071b29fee9c70fb03e3c3c8147b7946ee31eea" translate="yes" xml:space="preserve">
          <source>Binaries (and bitstrings)</source>
          <target state="translated">二进制(和位串)</target>
        </trans-unit>
        <trans-unit id="b191af7fc34f7fbb5fbc2a69591b4e9bf648fbff" translate="yes" xml:space="preserve">
          <source>Binaries have a representation similar to tuples, except they are tagged with &lt;code&gt;:&amp;lt;&amp;lt;&amp;gt;&amp;gt;&lt;/code&gt; instead of &lt;code&gt;:{}&lt;/code&gt;:</source>
          <target state="translated">二进制文件具有类似于元组的表示，只是它们用 &lt;code&gt;:&amp;lt;&amp;lt;&amp;gt;&amp;gt;&lt;/code&gt; 而不是 &lt;code&gt;:{}&lt;/code&gt; 标记：</target>
        </trans-unit>
        <trans-unit id="49aff6fbacb348e58a8db3dc080372ebbadd0f28" translate="yes" xml:space="preserve">
          <source>Binaries, strings, and charlists</source>
          <target state="translated">二进制、字符串和字符串列表</target>
        </trans-unit>
        <trans-unit id="af15fd6b97639efd6a9b693a8880e6903d2f3cd2" translate="yes" xml:space="preserve">
          <source>Binary matching can be used by itself to extract information from binaries:</source>
          <target state="translated">二进制匹配本身可以用来从二进制文件中提取信息。</target>
        </trans-unit>
        <trans-unit id="2042acc40e9773f089632ff1fc5f3d54f8826ee5" translate="yes" xml:space="preserve">
          <source>Binary matching is a powerful feature in Elixir that is useful for extracting information from binaries as well as pattern matching.</source>
          <target state="translated">二进制匹配是Elixir中一个强大的功能,它对于从二进制文件中提取信息以及模式匹配非常有用。</target>
        </trans-unit>
        <trans-unit id="64a4a40cae012874b1a177797783b5c6ec4aefa1" translate="yes" xml:space="preserve">
          <source>Binary pattern matching provides a similar way to decompose a string:</source>
          <target state="translated">二进制模式匹配提供了一种类似的方式来分解字符串。</target>
        </trans-unit>
        <trans-unit id="8ea819ee42276da3a90285cc5b8c1cf028115def" translate="yes" xml:space="preserve">
          <source>Binary pattern matching, however, is simpler and more efficient, so pick the option that better suits your use case.</source>
          <target state="translated">然而,二进制模式匹配更简单、更高效,所以要选择更适合你的用例的选项。</target>
        </trans-unit>
        <trans-unit id="d61004333e425a59f39f73680dda0fe68656875f" translate="yes" xml:space="preserve">
          <source>Binary/Bitstring Matching</source>
          <target state="translated">二进制/比特串匹配</target>
        </trans-unit>
        <trans-unit id="c282b192a231740a4b0a7bb6f752b62b8492be4b" translate="yes" xml:space="preserve">
          <source>Binding and unquote fragments</source>
          <target state="translated">装订和未引用的片段</target>
        </trans-unit>
        <trans-unit id="45c425457bcdcfb5085aa625ded75d4bf3929b5b" translate="yes" xml:space="preserve">
          <source>Bitstring - a sequence of bits, created with &lt;a href=&quot;kernel.specialforms#%253C%253C%253E%253E/1&quot;&gt;&lt;code&gt;Kernel.SpecialForms.&amp;lt;&amp;lt;&amp;gt;&amp;gt;/1&lt;/code&gt;&lt;/a&gt;. When the number of bits is divisible by 8, they are called binaries and can be manipulated with Erlang's &lt;code&gt;:binary&lt;/code&gt; module</source>
          <target state="translated">位串-用&lt;a href=&quot;kernel.specialforms#%253C%253C%253E%253E/1&quot;&gt; &lt;code&gt;Kernel.SpecialForms.&amp;lt;&amp;lt;&amp;gt;&amp;gt;/1&lt;/code&gt; &lt;/a&gt;创建的位序列。当位数可以被8整除时，它们称为二进制文件，可以用Erlang的 &lt;code&gt;:binary&lt;/code&gt; 模块进行操作</target>
        </trans-unit>
        <trans-unit id="7ea9d52bc54bc6f374f2fad4f115fc7ac1b63024" translate="yes" xml:space="preserve">
          <source>Bitstring generators</source>
          <target state="translated">位串生成器</target>
        </trans-unit>
        <trans-unit id="f3c1518585255719399d723cff9097dc10d6275d" translate="yes" xml:space="preserve">
          <source>Bitstring generators are also supported and are very useful when you need to comprehend over bitstring streams. The example below receives a list of pixels from a binary with their respective red, green and blue values and converts them into tuples of three elements each:</source>
          <target state="translated">还支持位串生成器,当你需要理解位串流时,位串生成器非常有用。下面的例子是从二进制中接收一个像素列表,其中有各自的红、绿、蓝三色值,并将它们转换为三个元素的元组。</target>
        </trans-unit>
        <trans-unit id="beaa67a4353085a5a0b2c675dc039718337cb9d0" translate="yes" xml:space="preserve">
          <source>Bitstring generators are also supported and are very useful when you need to organize bitstring streams:</source>
          <target state="translated">还支持位串生成器,当你需要组织位串流时,它非常有用。</target>
        </trans-unit>
        <trans-unit id="afaf36b63e4b1dad0901ea18c5897446e09881ea" translate="yes" xml:space="preserve">
          <source>Bitstrings are compared byte by byte, incomplete bytes are compared bit by bit.</source>
          <target state="translated">位串是逐字节比较的,不完整的字节是逐位比较的。</target>
        </trans-unit>
        <trans-unit id="3f687d3e29fc77fc43b356662b1a2660353fff87" translate="yes" xml:space="preserve">
          <source>Bitwise</source>
          <target state="translated">Bitwise</target>
        </trans-unit>
        <trans-unit id="aad380f630b0abfaeebd6b63365cfb723443ad4d" translate="yes" xml:space="preserve">
          <source>Blames the invocation of the given module, function and arguments.</source>
          <target state="translated">归咎于给定模块、函数和参数的调用。</target>
        </trans-unit>
        <trans-unit id="6f46461436a8e71915de539b6c2a0b43e158d0cd" translate="yes" xml:space="preserve">
          <source>Blink: off.</source>
          <target state="translated">眨眼:关闭。</target>
        </trans-unit>
        <trans-unit id="ba5e3f453d009bde1d3539dbf1179df1faca9394" translate="yes" xml:space="preserve">
          <source>Blink: rapid. MS-DOS ANSI.SYS; 150 per minute or more; not widely supported.</source>
          <target state="translated">闪烁:快速。MS-DOS ANSI.SYS;每分钟150次或以上;不广泛支持。</target>
        </trans-unit>
        <trans-unit id="701dbab8ca66a57b0d87ff8fc2dc263f3150cedf" translate="yes" xml:space="preserve">
          <source>Blink: slow. Less than 150 per minute.</source>
          <target state="translated">眨眼:慢。每分钟不到150次。</target>
        </trans-unit>
        <trans-unit id="54c45c033f5eb914fae27a646cbd9e23d3750d19" translate="yes" xml:space="preserve">
          <source>Blocks</source>
          <target state="translated">Blocks</target>
        </trans-unit>
        <trans-unit id="2822489452326c302f28e1501fd6edcfc934d1fa" translate="yes" xml:space="preserve">
          <source>Blocks are multiple Elixir expressions separated by newlines or semi-colons. A new block may be created at any moment by using parentheses.</source>
          <target state="translated">块是由换行符或分号分隔的多个Elixir表达式。使用括号可随时创建一个新的块。</target>
        </trans-unit>
        <trans-unit id="d103eae36d19a85d68a720e19cf2a1c73ba893fb" translate="yes" xml:space="preserve">
          <source>Blocks are represented as a &lt;code&gt;__block__&lt;/code&gt; call with each line as a separate argument:</source>
          <target state="translated">块表示为 &lt;code&gt;__block__&lt;/code&gt; 调用，每行作为单独的参数：</target>
        </trans-unit>
        <trans-unit id="c3b2d105cf560a74b63402e4c3067e0eff5cac1a" translate="yes" xml:space="preserve">
          <source>Blocks examples</source>
          <target state="translated">块的例子</target>
        </trans-unit>
        <trans-unit id="36016951d6cf223fe79a2c8002262083d4f62b06" translate="yes" xml:space="preserve">
          <source>Boolean and.</source>
          <target state="translated">布尔和。</target>
        </trans-unit>
        <trans-unit id="c2e29c3c880739783d09b4fe1f081591e67b960c" translate="yes" xml:space="preserve">
          <source>Boolean not.</source>
          <target state="translated">Boolean not.</target>
        </trans-unit>
        <trans-unit id="39431fd4748e66e596621d8b72c4abb89473c694" translate="yes" xml:space="preserve">
          <source>Boolean or.</source>
          <target state="translated">布尔型或。</target>
        </trans-unit>
        <trans-unit id="0786cdff946e6084c50bb7df6cacd8ed965599fa" translate="yes" xml:space="preserve">
          <source>Booleans</source>
          <target state="translated">Booleans</target>
        </trans-unit>
        <trans-unit id="f2506581ad8aed3b0c1c03b8ace8bf389d0d1aef" translate="yes" xml:space="preserve">
          <source>Both &lt;a href=&quot;#new/3&quot;&gt;&lt;code&gt;new/3&lt;/code&gt;&lt;/a&gt; and sigil return a struct where the date fields can be accessed directly:</source>
          <target state="translated">这两种&lt;a href=&quot;#new/3&quot;&gt; &lt;code&gt;new/3&lt;/code&gt; &lt;/a&gt;和印记返回其中的日期字段可以直接访问一个结构：</target>
        </trans-unit>
        <trans-unit id="c5670efb08fea60db5c1dc778b7fa5fca46a8dfe" translate="yes" xml:space="preserve">
          <source>Both &lt;a href=&quot;#new/4&quot;&gt;&lt;code&gt;new/4&lt;/code&gt;&lt;/a&gt; and sigil return a struct where the time fields can be accessed directly:</source>
          <target state="translated">这两个&lt;a href=&quot;#new/4&quot;&gt; &lt;code&gt;new/4&lt;/code&gt; &lt;/a&gt;和印记返回在时间字段可以直接访问一个结构：</target>
        </trans-unit>
        <trans-unit id="e6db73dfc41eeeab376e55d7d970cd504e5c8628" translate="yes" xml:space="preserve">
          <source>Both &lt;a href=&quot;#start_link/3&quot;&gt;&lt;code&gt;start_link/3&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#start/3&quot;&gt;&lt;code&gt;start/3&lt;/code&gt;&lt;/a&gt; support the &lt;a href=&quot;#content&quot;&gt;&lt;code&gt;GenServer&lt;/code&gt;&lt;/a&gt; to register a name on start via the &lt;code&gt;:name&lt;/code&gt; option. Registered names are also automatically cleaned up on termination. The supported values are:</source>
          <target state="translated">无论&lt;a href=&quot;#start_link/3&quot;&gt; &lt;code&gt;start_link/3&lt;/code&gt; &lt;/a&gt;和&lt;a href=&quot;#start/3&quot;&gt; &lt;code&gt;start/3&lt;/code&gt; &lt;/a&gt;支持&lt;a href=&quot;#content&quot;&gt; &lt;code&gt;GenServer&lt;/code&gt; &lt;/a&gt;就通过启动注册名称 &lt;code&gt;:name&lt;/code&gt; 选项。注册名称也会在终止时自动清除。支持的值为：</target>
        </trans-unit>
        <trans-unit id="6a2c37b3cef4535145ce827a33ddc90d02fb5af8" translate="yes" xml:space="preserve">
          <source>Both alias and the regular stack are reenabled when this function is called.</source>
          <target state="translated">当这个函数被调用时,别名和常规栈都被重新启用。</target>
        </trans-unit>
        <trans-unit id="c950a48885327096ba9eaa9566182e792003879f" translate="yes" xml:space="preserve">
          <source>Both errors and warnings are a list of three-element tuples containing the file, line and the formatted error/warning.</source>
          <target state="translated">错误和警告都是一个包含文件、行和格式化错误/警告的三元素元组列表。</target>
        </trans-unit>
        <trans-unit id="ced4465ef3cf40ff59c16c913d6d37a1752d7479" translate="yes" xml:space="preserve">
          <source>Both key-based access syntaxes can be used with the nested update functions and macros in &lt;a href=&quot;kernel&quot;&gt;&lt;code&gt;Kernel&lt;/code&gt;&lt;/a&gt;, such as &lt;a href=&quot;kernel#get_in/2&quot;&gt;&lt;code&gt;Kernel.get_in/2&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;kernel#put_in/3&quot;&gt;&lt;code&gt;Kernel.put_in/3&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;kernel#update_in/3&quot;&gt;&lt;code&gt;Kernel.update_in/3&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;kernel#pop_in/2&quot;&gt;&lt;code&gt;Kernel.pop_in/2&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;kernel#get_and_update_in/3&quot;&gt;&lt;code&gt;Kernel.get_and_update_in/3&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">这两种基于密钥的访问语法都可以与&lt;a href=&quot;kernel&quot;&gt; &lt;code&gt;Kernel&lt;/code&gt; 中&lt;/a&gt;的嵌套更新功能和宏一起使用，例如&lt;a href=&quot;kernel#get_in/2&quot;&gt; &lt;code&gt;Kernel.get_in/2&lt;/code&gt; &lt;/a&gt;，&lt;a href=&quot;kernel#put_in/3&quot;&gt; &lt;code&gt;Kernel.put_in/3&lt;/code&gt; &lt;/a&gt;，&lt;a href=&quot;kernel#update_in/3&quot;&gt; &lt;code&gt;Kernel.update_in/3&lt;/code&gt; &lt;/a&gt;，&lt;a href=&quot;kernel#pop_in/2&quot;&gt; &lt;code&gt;Kernel.pop_in/2&lt;/code&gt; &lt;/a&gt;和&lt;a href=&quot;kernel#get_and_update_in/3&quot;&gt; &lt;code&gt;Kernel.get_and_update_in/3&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="d1725c5aa2fe9943dc5f589af21621f3d6dac806" translate="yes" xml:space="preserve">
          <source>Both keyword lists (list of two-element tuples where the first element is atom) and maps with atom keys support a keyword notation where the colon character &lt;code&gt;:&lt;/code&gt; is moved to the end of the atom. &lt;code&gt;%{hello: &quot;world&quot;}&lt;/code&gt; is equivalent to &lt;code&gt;%{:hello =&amp;gt; &quot;world&quot;}&lt;/code&gt; and &lt;code&gt;[foo: :bar]&lt;/code&gt; is equivalent to &lt;code&gt;[{:foo, :bar}]&lt;/code&gt;. This notation is a syntax sugar that emits the same AST representation. It will be explained in later sections.</source>
          <target state="translated">关键字列表（第一个元素是原子的双元素元组的列表）和带有原子键的映射都支持关键字符号，其中冒号 &lt;code&gt;:&lt;/code&gt; 被移到原子的末尾。 &lt;code&gt;%{hello: &quot;world&quot;}&lt;/code&gt; 等效于 &lt;code&gt;%{:hello =&amp;gt; &quot;world&quot;}&lt;/code&gt; ， &lt;code&gt;[foo: :bar]&lt;/code&gt; 等效于 &lt;code&gt;[{:foo, :bar}]&lt;/code&gt; 。该符号是发出相同AST表示的语法糖。将在后面的部分中说明。</target>
        </trans-unit>
        <trans-unit id="aeaad2964ed5e5302fd8d6cbf6876b036e35f28d" translate="yes" xml:space="preserve">
          <source>Both parameters can be a filename or an IO device opened with &lt;a href=&quot;#open/2&quot;&gt;&lt;code&gt;open/2&lt;/code&gt;&lt;/a&gt;. &lt;code&gt;bytes_count&lt;/code&gt; specifies the number of bytes to copy, the default being &lt;code&gt;:infinity&lt;/code&gt;.</source>
          <target state="translated">这两个参数都可以是文件名或使用&lt;a href=&quot;#open/2&quot;&gt; &lt;code&gt;open/2&lt;/code&gt; 打开&lt;/a&gt;的IO设备。 &lt;code&gt;bytes_count&lt;/code&gt; 指定要复制的字节数，默认为 &lt;code&gt;:infinity&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="b065bf9a58cf78ea7c21c2504ab89c6bf366d41d" translate="yes" xml:space="preserve">
          <source>Both these options accept a keyword list where the key is an atom defining the name of the switch and value is the &lt;code&gt;type&lt;/code&gt; of the switch (see the &quot;Types&quot; section below for more information).</source>
          <target state="translated">这两个选项都接受关键字列表，其中关键字是定义开关名称的原子，值是开关的 &lt;code&gt;type&lt;/code&gt; （有关更多信息，请参见下面的&amp;ldquo;类型&amp;rdquo;部分）。</target>
        </trans-unit>
        <trans-unit id="fe42655b432ab90415ad78eca77b12d1539f938b" translate="yes" xml:space="preserve">
          <source>Both warning behaviours could be changed by explicitly setting the &lt;code&gt;:warn&lt;/code&gt; option to &lt;code&gt;true&lt;/code&gt; or &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">通过将 &lt;code&gt;:warn&lt;/code&gt; 选项显式设置为 &lt;code&gt;true&lt;/code&gt; 或 &lt;code&gt;false&lt;/code&gt; ,可以更改两种警告行为。</target>
        </trans-unit>
        <trans-unit id="4804b38853ff3a7357a1b3869d1bda894f6fb5c8" translate="yes" xml:space="preserve">
          <source>Breaks a pipeline expression into a list.</source>
          <target state="translated">将管道表达式分解为一个列表。</target>
        </trans-unit>
        <trans-unit id="a3a49c6ab668c2b3b545008e5e7b0af2866999c8" translate="yes" xml:space="preserve">
          <source>Breaks and &lt;a href=&quot;https://hexdocs.pm/mix/Mix.Tasks.Test.html&quot;&gt;&lt;code&gt;mix test&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">断裂和&lt;a href=&quot;https://hexdocs.pm/mix/Mix.Tasks.Test.html&quot;&gt; &lt;code&gt;mix test&lt;/code&gt; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="9d9f59f6ab1ddf5fe748e2618c2c67b4cc598990" translate="yes" xml:space="preserve">
          <source>Bright (increased intensity) or bold.</source>
          <target state="translated">明亮(增加强度)或大胆。</target>
        </trans-unit>
        <trans-unit id="838f6cdccb12d9e52e7eaf582463cf22eb4cba90" translate="yes" xml:space="preserve">
          <source>Bug fixes and security patches</source>
          <target state="translated">错误修复和安全补丁</target>
        </trans-unit>
        <trans-unit id="c41f68079c3956a3a9d158dc0407d610d85618c9" translate="yes" xml:space="preserve">
          <source>Bugs: if an API has undesired behaviour, a program that depends on the buggy behaviour may break if the bug is fixed. We reserve the right to fix such bugs.</source>
          <target state="translated">错误:如果一个API有不受欢迎的行为,如果错误被修复,依赖该错误行为的程序可能会崩溃。我们保留修复此类错误的权利。</target>
        </trans-unit>
        <trans-unit id="a375cb36a8473ab5ec8546cdcf8ac0d2a5cb8b43" translate="yes" xml:space="preserve">
          <source>Build information can be added by appending a plus sign and a series of dot-separated identifiers immediately following the patch or pre-release version. Identifiers consist of only ASCII alphanumeric characters and hyphens (&lt;code&gt;[0-9A-Za-z-]&lt;/code&gt;):</source>
          <target state="translated">可以通过在补丁程序或预发行版本之后立即添加加号和一系列以点分隔的标识符来添加构建信息。标识符仅由ASCII字母数字字符和连字符（ &lt;code&gt;[0-9A-Za-z-]&lt;/code&gt; ）组成：</target>
        </trans-unit>
        <trans-unit id="a6e387e513a488787baf35f75987dd36421ea7d2" translate="yes" xml:space="preserve">
          <source>Build segments are ignored: if two versions differ only in their build segment they are considered to be equal.</source>
          <target state="translated">忽略构建段:如果两个版本仅在构建段上有差异,它们被认为是相等的。</target>
        </trans-unit>
        <trans-unit id="bad1e9b6552746278d7a8c6c088673f831353f0b" translate="yes" xml:space="preserve">
          <source>Build your first Elixir project</source>
          <target state="translated">建立您的第一个Elixir项目</target>
        </trans-unit>
        <trans-unit id="a7c7f9a08b1bad090b46d9ebf6e47a7e84c9421c" translate="yes" xml:space="preserve">
          <source>Building IO data is cheaper than concatenating binaries. Concatenating multiple pieces of IO data just means putting them together inside a list since IO data can be arbitrarily nested, and that's a cheap and efficient operation. Most of the IO-based APIs, such as &lt;code&gt;:gen_tcp&lt;/code&gt;, &lt;a href=&quot;#content&quot;&gt;&lt;code&gt;IO&lt;/code&gt;&lt;/a&gt;, etc, receive IO data and write it to the socket directly without converting it to binary.</source>
          <target state="translated">构建IO数据比连接二进制文件便宜。串联多个IO数据只是意味着将它们放到一个列表中，因为IO数据可以任意嵌套，并且这是一种廉价且高效的操作。大多数基于IO的API，例如 &lt;code&gt;:gen_tcp&lt;/code&gt; ，&lt;a href=&quot;#content&quot;&gt; &lt;code&gt;IO&lt;/code&gt; &lt;/a&gt;等，都会接收IO数据并将其直接写入套接字，而无需将其转换为二进制。</target>
        </trans-unit>
        <trans-unit id="c158d8129679833ab365e0432154a06c26bbe385" translate="yes" xml:space="preserve">
          <source>Building on top of the exit signals mentioned above, if the process started by the command line exits with any of the three reasons above, its exit is considered normal and the Operating System process will exit with status 0.</source>
          <target state="translated">在上述退出信号的基础上,如果由命令行启动的进程以上述三种原因中的任何一种退出,则认为其退出正常,操作系统进程将以状态0退出。</target>
        </trans-unit>
        <trans-unit id="54488c84dcebf713a9804555c846d54e655ff471" translate="yes" xml:space="preserve">
          <source>Building our own test case</source>
          <target state="translated">建立我们自己的测试案例</target>
        </trans-unit>
        <trans-unit id="5b816d21e0eec18041c314dcb38039717c983b72" translate="yes" xml:space="preserve">
          <source>Builds a naive datetime from date and time structs.</source>
          <target state="translated">从日期和时间结构中建立一个天真的日期时间。</target>
        </trans-unit>
        <trans-unit id="3802216eb98726ee9ca40c4c3bac375bd9485cbb" translate="yes" xml:space="preserve">
          <source>Builds a new ISO date.</source>
          <target state="translated">建立一个新的ISO日期。</target>
        </trans-unit>
        <trans-unit id="b5365600952fb4b419ca2ffa21c352a921992cfb" translate="yes" xml:space="preserve">
          <source>Builds a new ISO naive datetime.</source>
          <target state="translated">构建一个新的ISO天真的日期时间。</target>
        </trans-unit>
        <trans-unit id="ad04bee5eab482961a816bfa7021b7c0d60dd82a" translate="yes" xml:space="preserve">
          <source>Builds a new time.</source>
          <target state="translated">建立一个新的时间。</target>
        </trans-unit>
        <trans-unit id="e8ea57a5a998c38bcfc9ffa8c023a39dd669576d" translate="yes" xml:space="preserve">
          <source>Builds a path from &lt;code&gt;relative_to&lt;/code&gt; to &lt;code&gt;path&lt;/code&gt;.</source>
          <target state="translated">建立从 &lt;code&gt;relative_to&lt;/code&gt; 到 &lt;code&gt;path&lt;/code&gt; 的路径。</target>
        </trans-unit>
        <trans-unit id="22bdb46a287e3157896ab159a9b538b7fcd94ffb" translate="yes" xml:space="preserve">
          <source>Builds an escript for the project.</source>
          <target state="translated">为项目建立一个脚本。</target>
        </trans-unit>
        <trans-unit id="3596331ae831e5817637a172c927de54ca3c406d" translate="yes" xml:space="preserve">
          <source>Builds and overrides a child specification.</source>
          <target state="translated">构建并覆盖一个子规范。</target>
        </trans-unit>
        <trans-unit id="0943df460e764126fabb5f2d806ad8f731c23730" translate="yes" xml:space="preserve">
          <source>Builds the project structure for the given application.</source>
          <target state="translated">为给定的应用程序建立项目结构。</target>
        </trans-unit>
        <trans-unit id="9ce6098db87d0ac3e024a19c0c868db81217ca3a" translate="yes" xml:space="preserve">
          <source>Built-in protocols</source>
          <target state="translated">内置协议</target>
        </trans-unit>
        <trans-unit id="d424bfa2909fd88b6e78f50f994b1bd31b188869" translate="yes" xml:space="preserve">
          <source>Built-in time zone database that works only in Etc/UTC.</source>
          <target state="translated">内置时区数据库,仅在Etc/UTC中工作。</target>
        </trans-unit>
        <trans-unit id="4389d7f528857f621560c37a11c338ec93a16c7f" translate="yes" xml:space="preserve">
          <source>Built-in translation function.</source>
          <target state="translated">内置翻译功能。</target>
        </trans-unit>
        <trans-unit id="16eecec82d486c492cf075a47b6a4441bd83afc7" translate="yes" xml:space="preserve">
          <source>Built-in type</source>
          <target state="translated">内置式</target>
        </trans-unit>
        <trans-unit id="0f6bebd51ff8927e6e3679a7b2412429e9c60cb6" translate="yes" xml:space="preserve">
          <source>Built-in types</source>
          <target state="translated">内置类型</target>
        </trans-unit>
        <trans-unit id="3ce0e81919d4eeb06fc46e63df5ab62e9c33b1f7" translate="yes" xml:space="preserve">
          <source>But &lt;strong&gt;do&lt;/strong&gt;:</source>
          <target state="translated">但是，&lt;strong&gt;这样做&lt;/strong&gt;：</target>
        </trans-unit>
        <trans-unit id="94aeec5dec71ba6c72dd8ee87f32d3fcfa0e12f5" translate="yes" xml:space="preserve">
          <source>But let&amp;rsquo;s also try something different. Let&amp;rsquo;s write integration tests that rely on the global server names to exercise the whole stack from the TCP server to the bucket. Our integration tests will rely on global state and must be synchronous. With integration tests, we get coverage on how the components in our application work together at the cost of test performance. They are typically used to test the main flows in your application. For example, we should avoid using integration tests to test an edge case in our command parsing implementation.</source>
          <target state="translated">但是，让我们也尝试一些不同的东西。让我们编写依赖于全局服务器名称的集成测试，以测试从TCP服务器到存储桶的整个堆栈。我们的集成测试将依赖于全局状态，并且必须是同步的。通过集成测试，我们以测试性能为代价，了解了应用程序中的组件如何协同工作。它们通常用于测试应用程序中的主要流程。例如，我们应该避免在命令解析实现中使用集成测试来测试边缘情况。</target>
        </trans-unit>
        <trans-unit id="2104911582eed895c4670127fe6ced7d06c28a31" translate="yes" xml:space="preserve">
          <source>But this is recommended only for scripting and should be avoided in production code. Generally speaking, processes should always be started inside supervision trees.</source>
          <target state="translated">但这只推荐用于脚本编写,在生产代码中应该避免。一般来说,进程应该总是在监督树内启动。</target>
        </trans-unit>
        <trans-unit id="a957b50ab3b7a97450a9f30efde74d666b75a07a" translate="yes" xml:space="preserve">
          <source>But we are not done yet. So far we are supervising the registry but our application is also starting buckets. Since buckets are started dynamically, they have to be supervised by a special type of supervisor, called &lt;code&gt;DynamicSupervisor&lt;/code&gt;, which we will explore next.</source>
          <target state="translated">但是我们还没有完成。到目前为止，我们正在监督注册表，但是我们的应用程序也正在启动。由于存储桶是动态启动的，因此必须由一种称为 &lt;code&gt;DynamicSupervisor&lt;/code&gt; 的特殊类型的监控器进行监控，我们将在后面进行探讨。</target>
        </trans-unit>
        <trans-unit id="259915d984d09b8201e37a16fe47bc5e83ead48a" translate="yes" xml:space="preserve">
          <source>By calling &lt;a href=&quot;#register/3&quot;&gt;&lt;code&gt;register/3&lt;/code&gt;&lt;/a&gt;, different processes can register under a given key and associate any value under that key. In this case, let's register the current process under the key &lt;code&gt;&quot;hello&quot;&lt;/code&gt; and attach the &lt;code&gt;{IO, :inspect}&lt;/code&gt; tuple to it:</source>
          <target state="translated">通过调用&lt;a href=&quot;#register/3&quot;&gt; &lt;code&gt;register/3&lt;/code&gt; &lt;/a&gt;，不同的进程可以在给定的键下注册并关联该键下的任何值。在这种情况下，让我们在键 &lt;code&gt;&quot;hello&quot;&lt;/code&gt; 下注册当前进程，并将 &lt;code&gt;{IO, :inspect}&lt;/code&gt; 元组附加到该进程：</target>
        </trans-unit>
        <trans-unit id="35c51c698203bdb71ecbe3d1c4e04427369f9034" translate="yes" xml:space="preserve">
          <source>By convention, &lt;code&gt;gcd(0, 0)&lt;/code&gt; returns &lt;code&gt;0&lt;/code&gt;.</source>
          <target state="translated">按照约定， &lt;code&gt;gcd(0, 0)&lt;/code&gt; 返回 &lt;code&gt;0&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="4048bc8096f6b36395ad6e4a56b15f84086c68e9" translate="yes" xml:space="preserve">
          <source>By default Elixir supports all the module attributes supported by Erlang, but custom attributes can be used as well:</source>
          <target state="translated">默认情况下,Elixir支持Erlang支持的所有模块属性,但也可以使用自定义属性。</target>
        </trans-unit>
        <trans-unit id="29b4b62fb6ee1da01a3d45071c4e61941d60a2f2" translate="yes" xml:space="preserve">
          <source>By default functions starting with &lt;code&gt;_&lt;/code&gt; are not imported. If you really want to import a function starting with &lt;code&gt;_&lt;/code&gt; you must explicitly include it in the &lt;code&gt;:only&lt;/code&gt; selector.</source>
          <target state="translated">默认情况下，不导入以 &lt;code&gt;_&lt;/code&gt; 开头的函数。如果您确实要导入以 &lt;code&gt;_&lt;/code&gt; 开头的函数，则必须在 &lt;code&gt;:only&lt;/code&gt; 选择器中明确包含它。</target>
        </trans-unit>
        <trans-unit id="428db1ab9fef04afe30a2b4353b549c7fa27a980" translate="yes" xml:space="preserve">
          <source>By default it replaces all occurrences but this behaviour can be controlled through the &lt;code&gt;:global&lt;/code&gt; option; see the &quot;Options&quot; section below.</source>
          <target state="translated">默认情况下，它会替换所有出现的情况，但是可以通过 &lt;code&gt;:global&lt;/code&gt; 选项控制此行为。请参阅下面的&amp;ldquo;选项&amp;rdquo;部分。</target>
        </trans-unit>
        <trans-unit id="6b5c9ac97926d41c848960a670c7a3023e1508cb" translate="yes" xml:space="preserve">
          <source>By default they are stored in the app path inside the build directory. Umbrella applications have the manifest path set to the root of the build directory. Directories may be changed in future releases.</source>
          <target state="translated">默认情况下,它们存储在构建目录内的应用程序路径中。伞形应用程序的清单路径设置为构建目录的根目录。在未来的版本中可能会改变目录。</target>
        </trans-unit>
        <trans-unit id="e03fb74ffa75b5e845b130ed2ea480214ef77b84" translate="yes" xml:space="preserve">
          <source>By default this task works across all environments, unless &lt;code&gt;--only&lt;/code&gt; is given.</source>
          <target state="translated">默认情况下，除非 &lt;code&gt;--only&lt;/code&gt; ，否则此任务可在所有环境中运行。</target>
        </trans-unit>
        <trans-unit id="4b1fb5bfb4739bdd9aa579eb2c739f86cf625765" translate="yes" xml:space="preserve">
          <source>By default, &lt;a href=&quot;#content&quot;&gt;&lt;code&gt;EEx&lt;/code&gt;&lt;/a&gt; uses the &lt;a href=&quot;eex.smartengine&quot;&gt;&lt;code&gt;EEx.SmartEngine&lt;/code&gt;&lt;/a&gt; that provides some conveniences on top of the simple &lt;a href=&quot;eex.engine&quot;&gt;&lt;code&gt;EEx.Engine&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">默认情况下，&lt;a href=&quot;#content&quot;&gt; &lt;code&gt;EEx&lt;/code&gt; &lt;/a&gt;使用&lt;a href=&quot;eex.smartengine&quot;&gt; &lt;code&gt;EEx.SmartEngine&lt;/code&gt; &lt;/a&gt;，它在简单的&lt;a href=&quot;eex.engine&quot;&gt; &lt;code&gt;EEx.Engine&lt;/code&gt; &lt;/a&gt;之上提供了一些便利。</target>
        </trans-unit>
        <trans-unit id="9bdca89e148f6c41a836026b82ff88340bd20f20" translate="yes" xml:space="preserve">
          <source>By default, &lt;a href=&quot;#import_file/1&quot;&gt;&lt;code&gt;import_file/1&lt;/code&gt;&lt;/a&gt; fails when the given file does not exist. However, since &lt;a href=&quot;#import_file/1&quot;&gt;&lt;code&gt;import_file/1&lt;/code&gt;&lt;/a&gt; is expanded at compile-time, it's not possible to conditionally import a file since the macro is always expanded:</source>
          <target state="translated">默认情况下，当给定文件不存在时，&lt;a href=&quot;#import_file/1&quot;&gt; &lt;code&gt;import_file/1&lt;/code&gt; &lt;/a&gt;失败。但是，由于&lt;a href=&quot;#import_file/1&quot;&gt; &lt;code&gt;import_file/1&lt;/code&gt; &lt;/a&gt;是在编译时扩展的，因此由于宏总是被扩展，因此无法有条件地导入文件：</target>
        </trans-unit>
        <trans-unit id="adb610af913a885c5f8ec16a7315dfe5ad91f080" translate="yes" xml:space="preserve">
          <source>By default, &lt;a href=&quot;date#to_iso8601/2&quot;&gt;&lt;code&gt;Date.to_iso8601/2&lt;/code&gt;&lt;/a&gt; returns dates formatted in the &quot;extended&quot; format, for human readability. It also supports the &quot;basic&quot; format through passing the &lt;code&gt;:basic&lt;/code&gt; option.</source>
          <target state="translated">默认情况下，&lt;a href=&quot;date#to_iso8601/2&quot;&gt; &lt;code&gt;Date.to_iso8601/2&lt;/code&gt; &lt;/a&gt;返回以&amp;ldquo;扩展&amp;rdquo;格式设置的日期，以便于人类阅读。通过传递 &lt;code&gt;:basic&lt;/code&gt; 选项，它也支持&amp;ldquo;基本&amp;rdquo;格式。</target>
        </trans-unit>
        <trans-unit id="ccc1fef33702c4720574cd45b1815c6fd01a3c75" translate="yes" xml:space="preserve">
          <source>By default, &lt;a href=&quot;datetime#to_iso8601/2&quot;&gt;&lt;code&gt;DateTime.to_iso8601/2&lt;/code&gt;&lt;/a&gt; returns datetimes formatted in the &quot;extended&quot; format, for human readability. It also supports the &quot;basic&quot; format through passing the &lt;code&gt;:basic&lt;/code&gt; option.</source>
          <target state="translated">默认情况下，&lt;a href=&quot;datetime#to_iso8601/2&quot;&gt; &lt;code&gt;DateTime.to_iso8601/2&lt;/code&gt; &lt;/a&gt;返回以&amp;ldquo;扩展&amp;rdquo;格式格式化的日期时间，以便于人类阅读。通过传递 &lt;code&gt;:basic&lt;/code&gt; 选项，它也支持&amp;ldquo;基本&amp;rdquo;格式。</target>
        </trans-unit>
        <trans-unit id="31bee08f151471a3561e8ba12545f1a1c133d832" translate="yes" xml:space="preserve">
          <source>By default, &lt;a href=&quot;naivedatetime#to_iso8601/2&quot;&gt;&lt;code&gt;NaiveDateTime.to_iso8601/2&lt;/code&gt;&lt;/a&gt; returns naive datetimes formatted in the &quot;extended&quot; format, for human readability. It also supports the &quot;basic&quot; format through passing the &lt;code&gt;:basic&lt;/code&gt; option.</source>
          <target state="translated">默认情况下，&lt;a href=&quot;naivedatetime#to_iso8601/2&quot;&gt; &lt;code&gt;NaiveDateTime.to_iso8601/2&lt;/code&gt; &lt;/a&gt;返回以&amp;ldquo;扩展&amp;rdquo;格式设置的原始日期时间，以提高可读性。通过传递 &lt;code&gt;:basic&lt;/code&gt; 选项，它也支持&amp;ldquo;基本&amp;rdquo;格式。</target>
        </trans-unit>
        <trans-unit id="b515c8daeec8b46c7f7d220a1b811128e57e311e" translate="yes" xml:space="preserve">
          <source>By default, &lt;a href=&quot;time#to_iso8601/2&quot;&gt;&lt;code&gt;Time.to_iso8601/2&lt;/code&gt;&lt;/a&gt; returns times formatted in the &quot;extended&quot; format, for human readability. It also supports the &quot;basic&quot; format through passing the &lt;code&gt;:basic&lt;/code&gt; option.</source>
          <target state="translated">缺省情况下，&lt;a href=&quot;time#to_iso8601/2&quot;&gt; &lt;code&gt;Time.to_iso8601/2&lt;/code&gt; &lt;/a&gt;返回以&amp;ldquo;扩展&amp;rdquo;格式格式化的时间，以提高可读性。通过传递 &lt;code&gt;:basic&lt;/code&gt; 选项，它也支持&amp;ldquo;基本&amp;rdquo;格式。</target>
        </trans-unit>
        <trans-unit id="b8cda1125e6a420cc973a5e4e861c0de6be40f01" translate="yes" xml:space="preserve">
          <source>By default, Elixir imports functions and macros from the given module, except the ones starting with underscore (which are usually callbacks):</source>
          <target state="translated">默认情况下,Elixir会从给定模块中导入函数和宏,但以下划线开头的函数和宏除外(通常是回调函数)。</target>
        </trans-unit>
        <trans-unit id="94a6204986c6d52028cb274c78170f8522dfc345" translate="yes" xml:space="preserve">
          <source>By default, Elixir provides some basic types, such as &lt;code&gt;integer&lt;/code&gt; or &lt;code&gt;pid&lt;/code&gt;, as well as more complex types: for example, the &lt;code&gt;round/1&lt;/code&gt; function, which rounds a float to its nearest integer, takes a &lt;code&gt;number&lt;/code&gt; as an argument (an &lt;code&gt;integer&lt;/code&gt; or a &lt;code&gt;float&lt;/code&gt;) and returns an &lt;code&gt;integer&lt;/code&gt;. As you can see &lt;a href=&quot;https://hexdocs.pm/elixir/Kernel.html#round/1&quot;&gt;in its documentation&lt;/a&gt;, &lt;code&gt;round/1&lt;/code&gt;&amp;rsquo;s typed signature is written as:</source>
          <target state="translated">默认情况下，Elixir提供一些基本类型，例如 &lt;code&gt;integer&lt;/code&gt; 或 &lt;code&gt;pid&lt;/code&gt; 以及更复杂的类型：例如， &lt;code&gt;round/1&lt;/code&gt; 函数将浮点数舍入为最接近的整数，它使用 &lt;code&gt;number&lt;/code&gt; 作为参数（ &lt;code&gt;integer&lt;/code&gt; 或一个 &lt;code&gt;float&lt;/code&gt; ）并返回一个 &lt;code&gt;integer&lt;/code&gt; 。正如您&lt;a href=&quot;https://hexdocs.pm/elixir/Kernel.html#round/1&quot;&gt;在其文档中&lt;/a&gt;所看到的那样， &lt;code&gt;round/1&lt;/code&gt; 的键入签名写为：</target>
        </trans-unit>
        <trans-unit id="1d78fd453e9e78e2b87f694e9f9cc1959686ec03" translate="yes" xml:space="preserve">
          <source>By default, Elixir uses the record name as the first element of the tuple (the &quot;tag&quot;). However, a different tag can be specified when defining a record, as in the following example, in which we use &lt;code&gt;Customer&lt;/code&gt; as the second argument of &lt;a href=&quot;#defrecord/3&quot;&gt;&lt;code&gt;defrecord/3&lt;/code&gt;&lt;/a&gt;:</source>
          <target state="translated">默认情况下，Elixir使用记录名称作为元组的第一个元素（&amp;ldquo;标签&amp;rdquo;）。但是，在定义记录时可以指定其他标签，如以下示例所示，在该示例中，我们使用 &lt;code&gt;Customer&lt;/code&gt; 作为&lt;a href=&quot;#defrecord/3&quot;&gt; &lt;code&gt;defrecord/3&lt;/code&gt; &lt;/a&gt;的第二个参数：</target>
        </trans-unit>
        <trans-unit id="fecf0c12d9669a08a42b3ae280cf7c91a67014c4" translate="yes" xml:space="preserve">
          <source>By default, a SIGTERM from the operating system will automatically translate to &lt;a href=&quot;system#stop/0&quot;&gt;&lt;code&gt;System.stop/0&lt;/code&gt;&lt;/a&gt;. You can also have more explicit control over operating system signals via the &lt;a href=&quot;http://www.erlang.org/doc/man/os.html#set_signal-2&quot;&gt;&lt;code&gt;:os.set_signal/2&lt;/code&gt;&lt;/a&gt; function.</source>
          <target state="translated">默认情况下，来自操作系统的SIGTERM将自动转换为&lt;a href=&quot;system#stop/0&quot;&gt; &lt;code&gt;System.stop/0&lt;/code&gt; &lt;/a&gt;。您也可以通过&lt;a href=&quot;http://www.erlang.org/doc/man/os.html#set_signal-2&quot;&gt; &lt;code&gt;:os.set_signal/2&lt;/code&gt; &lt;/a&gt;函数来更明确地控制操作系统信号。</target>
        </trans-unit>
        <trans-unit id="d6e330cb0e08f49bb3e2e3203bfbe1f8002483ca" translate="yes" xml:space="preserve">
          <source>By default, a very simple wrapper around OTP's &lt;code&gt;cover&lt;/code&gt; is used as a tool, but it can be overridden as follows:</source>
          <target state="translated">默认情况下，OTP &lt;code&gt;cover&lt;/code&gt; 周围的包装非常简单，用作工具，但可以按以下方式覆盖它：</target>
        </trans-unit>
        <trans-unit id="6a9b40c40cdba277f891d9a5de3cd80838db5f8e" translate="yes" xml:space="preserve">
          <source>By default, both options are &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">默认情况下，两个选项均为 &lt;code&gt;false&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="f61d408262ba8f9487dfd034c6dee6a7168af604" translate="yes" xml:space="preserve">
          <source>By default, dependencies are fetched using the &lt;a href=&quot;https://hex.pm/&quot;&gt;Hex package manager&lt;/a&gt;:</source>
          <target state="translated">默认情况下，依赖关系是使用&lt;a href=&quot;https://hex.pm/&quot;&gt;Hex包管理器&lt;/a&gt;获取的：</target>
        </trans-unit>
        <trans-unit id="402ef1fd034af623e1289d8acec9995fa48d7ee2" translate="yes" xml:space="preserve">
          <source>By default, functions in the &lt;code&gt;IO&lt;/code&gt; module read from the standard input and write to the standard output. We can change that by passing, for example, &lt;code&gt;:stderr&lt;/code&gt; as an argument (in order to write to the standard error device):</source>
          <target state="translated">缺省情况下， &lt;code&gt;IO&lt;/code&gt; 模块中的功能从标准输入读取并写入标准输出。我们可以通过传递例如 &lt;code&gt;:stderr&lt;/code&gt; 作为参数来更改它（以写入标准错误设备）：</target>
        </trans-unit>
        <trans-unit id="4ed5dc3aa06cbe6867cbdf252c51bacfce3e2d13" translate="yes" xml:space="preserve">
          <source>By default, it attempts to open the file and line using the &lt;code&gt;file:line&lt;/code&gt; notation. For example, if your editor is called &lt;code&gt;subl&lt;/code&gt;, it will open the file as:</source>
          <target state="translated">默认情况下，它尝试使用 &lt;code&gt;file:line&lt;/code&gt; 表示法打开文件和行。例如，如果您的编辑器名为 &lt;code&gt;subl&lt;/code&gt; ，它将以以下方式打开文件：</target>
        </trans-unit>
        <trans-unit id="c829da1aa58fc9ca50895d425d34bf3c9320a86e" translate="yes" xml:space="preserve">
          <source>By default, it uses the default time zone database returned by &lt;a href=&quot;calendar#get_time_zone_database/0&quot;&gt;&lt;code&gt;Calendar.get_time_zone_database/0&lt;/code&gt;&lt;/a&gt;, which defaults to &lt;a href=&quot;calendar.utconlytimezonedatabase&quot;&gt;&lt;code&gt;Calendar.UTCOnlyTimeZoneDatabase&lt;/code&gt;&lt;/a&gt; which only handles &quot;Etc/UTC&quot; datetimes. Other time zone databases can be passed as argument or set globally. See the &quot;Time zone database&quot; section in the module docs.</source>
          <target state="translated">默认情况下，它使用&lt;a href=&quot;calendar#get_time_zone_database/0&quot;&gt; &lt;code&gt;Calendar.get_time_zone_database/0&lt;/code&gt; &lt;/a&gt;返回的默认时区数据库，该数据库默认为&lt;a href=&quot;calendar.utconlytimezonedatabase&quot;&gt; &lt;code&gt;Calendar.UTCOnlyTimeZoneDatabase&lt;/code&gt; &lt;/a&gt;，仅处理&amp;ldquo; Etc / UTC&amp;rdquo;日期时间。其他时区数据库可以作为参数传递或全局设置。请参阅模块文档中的&amp;ldquo;时区数据库&amp;rdquo;部分。</target>
        </trans-unit>
        <trans-unit id="e9dec0631c2a769f90c241506aa566e6abbea33c" translate="yes" xml:space="preserve">
          <source>By default, it uses the default time_zone returned by &lt;a href=&quot;calendar#get_time_zone_database/0&quot;&gt;&lt;code&gt;Calendar.get_time_zone_database/0&lt;/code&gt;&lt;/a&gt;, which defaults to &lt;a href=&quot;calendar.utconlytimezonedatabase&quot;&gt;&lt;code&gt;Calendar.UTCOnlyTimeZoneDatabase&lt;/code&gt;&lt;/a&gt; which only handles &quot;Etc/UTC&quot; datetimes. Other time zone databases can be passed as argument or set globally. See the &quot;Time zone database&quot; section in the module docs.</source>
          <target state="translated">默认情况下，它使用&lt;a href=&quot;calendar#get_time_zone_database/0&quot;&gt; &lt;code&gt;Calendar.get_time_zone_database/0&lt;/code&gt; &lt;/a&gt;返回的默认time_zone ，它默认为&lt;a href=&quot;calendar.utconlytimezonedatabase&quot;&gt; &lt;code&gt;Calendar.UTCOnlyTimeZoneDatabase&lt;/code&gt; &lt;/a&gt;，仅处理&amp;ldquo; Etc / UTC&amp;rdquo;日期时间。其他时区数据库可以作为参数传递或全局设置。请参阅模块文档中的&amp;ldquo;时区数据库&amp;rdquo;部分。</target>
        </trans-unit>
        <trans-unit id="9c13147ccfd35712f018a1f03ef31c9fbc8ad18d" translate="yes" xml:space="preserve">
          <source>By default, returns dates formatted in the &quot;extended&quot; format, for human readability. It also supports the &quot;basic&quot; format by passing the &lt;code&gt;:basic&lt;/code&gt; option.</source>
          <target state="translated">默认情况下，返回以&amp;ldquo;扩展&amp;rdquo;格式格式化的日期，以便于人类阅读。通过传递 &lt;code&gt;:basic&lt;/code&gt; 选项，它也支持&amp;ldquo;基本&amp;rdquo;格式。</target>
        </trans-unit>
        <trans-unit id="20a23cbb3ef91c7f640f08773138ca20ec0122ed" translate="yes" xml:space="preserve">
          <source>By default, returns datetimes formatted in the &quot;extended&quot; format, for human readability. It also supports the &quot;basic&quot; format by passing the &lt;code&gt;:basic&lt;/code&gt; option.</source>
          <target state="translated">默认情况下，返回以&amp;ldquo;扩展&amp;rdquo;格式格式化的日期时间，以便于人阅读。通过传递 &lt;code&gt;:basic&lt;/code&gt; 选项，它也支持&amp;ldquo;基本&amp;rdquo;格式。</target>
        </trans-unit>
        <trans-unit id="0d95b00ea148fc8f3ba77340beb5e5c599d4d480" translate="yes" xml:space="preserve">
          <source>By default, returns times formatted in the &quot;extended&quot; format, for human readability. It also supports the &quot;basic&quot; format by passing the &lt;code&gt;:basic&lt;/code&gt; option.</source>
          <target state="translated">默认情况下，返回以&amp;ldquo;扩展&amp;rdquo;格式格式化的时间，以便于人类阅读。通过传递 &lt;code&gt;:basic&lt;/code&gt; 选项，它也支持&amp;ldquo;基本&amp;rdquo;格式。</target>
        </trans-unit>
        <trans-unit id="79230ff1afddb9cbbca293f5d5dcc65fc02ebeae" translate="yes" xml:space="preserve">
          <source>By default, the &lt;code&gt;device&lt;/code&gt; is the standard output.</source>
          <target state="translated">默认情况下， &lt;code&gt;device&lt;/code&gt; 是标准输出。</target>
        </trans-unit>
        <trans-unit id="ee717eb9f32dadabdfe51a1c183f392e83d0ac3e" translate="yes" xml:space="preserve">
          <source>By default, the &lt;code&gt;device&lt;/code&gt; is the standard output. It returns &lt;code&gt;:ok&lt;/code&gt; if it succeeds.</source>
          <target state="translated">默认情况下， &lt;code&gt;device&lt;/code&gt; 是标准输出。如果成功，则返回 &lt;code&gt;:ok&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="152a3dd3601b47a2fc040c22f7db42fbbe85286d" translate="yes" xml:space="preserve">
          <source>By default, the Erlang VM runs in interactive mode, where modules are loaded as needed. In embedded mode the opposite happens, as all modules need to be loaded upfront or explicitly.</source>
          <target state="translated">默认情况下,Erlang虚拟机在交互模式下运行,模块根据需要加载。在嵌入式模式下,情况正好相反,因为所有模块都需要预先或显式加载。</target>
        </trans-unit>
        <trans-unit id="e13fb2c0bf54cc07fce73aa25bcefd707893e86c" translate="yes" xml:space="preserve">
          <source>By default, the contents of a &lt;code&gt;.iex.exs&lt;/code&gt; file in the same directory as you are starting IEx are automatically imported. See the section for &quot;.iex.exs&quot; in the &lt;a href=&quot;iex&quot;&gt;&lt;code&gt;IEx&lt;/code&gt;&lt;/a&gt; module docs for more information.</source>
          <target state="translated">默认情况下，将自动导入与启动IEx相同的目录中的 &lt;code&gt;.iex.exs&lt;/code&gt; 文件的内容。有关更多信息，请参见&lt;a href=&quot;iex&quot;&gt; &lt;code&gt;IEx&lt;/code&gt; &lt;/a&gt;模块文档中的&amp;ldquo; .iex.exs&amp;rdquo;部分。</target>
        </trans-unit>
        <trans-unit id="cdfad8bcd03f7fb8e453f58547c4b335ce6d4024" translate="yes" xml:space="preserve">
          <source>By default, the environment of an application is an empty list. In a Mix project you can set that key in &lt;code&gt;application/0&lt;/code&gt;:</source>
          <target state="translated">默认情况下，应用程序的环境为空列表。在Mix项目中，您可以在 &lt;code&gt;application/0&lt;/code&gt; 中设置该键：</target>
        </trans-unit>
        <trans-unit id="e9135e0a0bea88ce661f36edb920759a95dcfb15" translate="yes" xml:space="preserve">
          <source>By default, the function &lt;code&gt;start_link&lt;/code&gt; is invoked on the given module. Overall, the default values for the options are:</source>
          <target state="translated">默认情况下，函数 &lt;code&gt;start_link&lt;/code&gt; 在给定模块上调用。总体而言，这些选项的默认值为：</target>
        </trans-unit>
        <trans-unit id="98ef59d20d514a8b4d0714a0cd844e52ec39eb70" translate="yes" xml:space="preserve">
          <source>By default, the maximum number of atoms is &lt;code&gt;1_048_576&lt;/code&gt;. This limit can be raised or lowered using the VM option &lt;code&gt;+t&lt;/code&gt;.</source>
          <target state="translated">默认情况下，最大原子数为 &lt;code&gt;1_048_576&lt;/code&gt; 。可以使用VM选项 &lt;code&gt;+t&lt;/code&gt; 来提高或降低此限制。</target>
        </trans-unit>
        <trans-unit id="86266caa42c7dcf2b57a3b39797b6e7045f35720" translate="yes" xml:space="preserve">
          <source>By default, the number of stops in a breakpoint is 1. Any follow-up call won't stop the code execution unless another breakpoint is set.</source>
          <target state="translated">默认情况下,断点的停止次数为1,任何后续调用都不会停止代码执行,除非设置了另一个断点。</target>
        </trans-unit>
        <trans-unit id="20bf365c81414f9dd0f97d60214c83776220e730" translate="yes" xml:space="preserve">
          <source>By default, the patterns &lt;code&gt;*&lt;/code&gt; and &lt;code&gt;?&lt;/code&gt; do not match files starting with a dot &lt;code&gt;.&lt;/code&gt;. See the &lt;code&gt;:match_dot&lt;/code&gt; option in the &quot;Options&quot; section below.</source>
          <target state="translated">默认情况下，模式 &lt;code&gt;*&lt;/code&gt; 和 &lt;code&gt;?&lt;/code&gt; 与以点开头的文件不匹配 &lt;code&gt;.&lt;/code&gt; 。请参见下面&amp;ldquo;选项&amp;rdquo;部分的 &lt;code&gt;:match_dot&lt;/code&gt; 选项。</target>
        </trans-unit>
        <trans-unit id="62f836c1ca1f7ffa0fe44a5d83b70dadbe30aead" translate="yes" xml:space="preserve">
          <source>By default, this returns &lt;a href=&quot;mix.shell.io&quot;&gt;&lt;code&gt;Mix.Shell.IO&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">默认情况下，这将返回&lt;a href=&quot;mix.shell.io&quot;&gt; &lt;code&gt;Mix.Shell.IO&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="4039ff511c9b0c6e465576202aa05d0f1134bbb1" translate="yes" xml:space="preserve">
          <source>By default, this task starts the current application. If this is not desired, set the &lt;code&gt;:app&lt;/code&gt; configuration to nil.</source>
          <target state="translated">默认情况下，此任务将启动当前应用程序。如果不希望这样，请将 &lt;code&gt;:app&lt;/code&gt; 配置设置为nil。</target>
        </trans-unit>
        <trans-unit id="76c88cd6bc21370893bb9ca4286fa947e3185c6d" translate="yes" xml:space="preserve">
          <source>By forbidding hierarchies in favor of named setups, it is straightforward for the developer to glance at each describe block and know exactly the setup steps involved.</source>
          <target state="translated">通过禁止层次结构而采用命名设置,开发者可以直接看一眼每个描述块,就能知道具体的设置步骤。</target>
        </trans-unit>
        <trans-unit id="be8729ba3d997306cc7c2732e9d5715d7b733113" translate="yes" xml:space="preserve">
          <source>By modeling IO devices with processes, the Erlang</source>
          <target state="translated">通过用流程对IO设备进行建模,Erlang</target>
        </trans-unit>
        <trans-unit id="20fbb45a951d34847b2361b232cf1603416a2b67" translate="yes" xml:space="preserve">
          <source>By registering an attribute, a developer is able to customize how Elixir will store and accumulate the attribute values.</source>
          <target state="translated">通过注册一个属性,开发人员能够自定义Elixir将如何存储和积累属性值。</target>
        </trans-unit>
        <trans-unit id="3a533dc2f30d084da0ee799f07f2509ceacdcbfd" translate="yes" xml:space="preserve">
          <source>By specifying such dependencies, Mix will automatically install Hex (if it wasn't previously installed) and download a package suitable to your project. Note Hex expects the dependency requirement to always be given and it will warn otherwise.</source>
          <target state="translated">通过指定这样的依赖关系,Mix会自动安装Hex(如果之前没有安装的话),并下载一个适合你项目的包。注意 Hex 希望总是给出依赖性要求,否则会发出警告。</target>
        </trans-unit>
        <trans-unit id="28e75c4b609dc334804d7f657136c8679b6ee20a" translate="yes" xml:space="preserve">
          <source>By starting a new IEx session, we can now define our tests and run them:</source>
          <target state="translated">通过启动一个新的 IEx 会话,我们现在可以定义我们的测试并运行它们。</target>
        </trans-unit>
        <trans-unit id="6ed40a81a21966a2166b56cae05accc09ed2523e" translate="yes" xml:space="preserve">
          <source>By tagging a test, the tag value can be accessed in the context, allowing the developer to customize the test. Let's see an example:</source>
          <target state="translated">通过给测试打上标签,可以在上下文中访问标签值,允许开发人员自定义测试。我们来看一个例子。</target>
        </trans-unit>
        <trans-unit id="c72eb5d7c9a45f27e69792c0b3ad14f6fb4125b9" translate="yes" xml:space="preserve">
          <source>By the way, since we are now returning &lt;code&gt;{:error, :not_found}&lt;/code&gt;, we should amend the &lt;code&gt;write_line/2&lt;/code&gt; function in &lt;code&gt;KVServer&lt;/code&gt; to print such error as well:</source>
          <target state="translated">顺便说一句，由于我们现在返回 &lt;code&gt;{:error, :not_found}&lt;/code&gt; ，所以我们应该修改 &lt;code&gt;KVServer&lt;/code&gt; 中的 &lt;code&gt;write_line/2&lt;/code&gt; 函数以打印该错误：</target>
        </trans-unit>
        <trans-unit id="afd2b04041c5023417e7856e0350ac915e93bf70" translate="yes" xml:space="preserve">
          <source>By using &lt;a href=&quot;#content&quot;&gt;&lt;code&gt;Application&lt;/code&gt;&lt;/a&gt;, modules get a default implementation of &lt;a href=&quot;#c:stop/1&quot;&gt;&lt;code&gt;stop/1&lt;/code&gt;&lt;/a&gt; that ignores its argument and returns &lt;code&gt;:ok&lt;/code&gt;, but it can be overridden.</source>
          <target state="translated">通过使用&lt;a href=&quot;#content&quot;&gt; &lt;code&gt;Application&lt;/code&gt; &lt;/a&gt;，模块将获得&lt;a href=&quot;#c:stop/1&quot;&gt; &lt;code&gt;stop/1&lt;/code&gt; &lt;/a&gt;的默认实现，该默认实现将忽略其参数并返回 &lt;code&gt;:ok&lt;/code&gt; ，但可以将其覆盖。</target>
        </trans-unit>
        <trans-unit id="3f1539bdede002cb03f8125233616b6cf3691dc6" translate="yes" xml:space="preserve">
          <source>By using &lt;code&gt;~S&lt;/code&gt;, this problem can be avoided altogether:</source>
          <target state="translated">通过使用 &lt;code&gt;~S&lt;/code&gt; ，可以完全避免此问题：</target>
        </trans-unit>
        <trans-unit id="ace2af82bde9ed60e0b2eb329287e9e1f1b8c284" translate="yes" xml:space="preserve">
          <source>By using the &lt;code&gt;alias/2&lt;/code&gt; directive, we are changing the atom the alias expands to.</source>
          <target state="translated">通过使用 &lt;code&gt;alias/2&lt;/code&gt; 指令，我们可以更改别名扩展到的原子。</target>
        </trans-unit>
        <trans-unit id="3f1405ee5f9cba8a93cc7f0b13abb38e7a60f2e5" translate="yes" xml:space="preserve">
          <source>By using the functions in this module one can specify the children to be used under a supervisor, started with &lt;a href=&quot;supervisor#start_link/2&quot;&gt;&lt;code&gt;Supervisor.start_link/2&lt;/code&gt;&lt;/a&gt;:</source>
          <target state="translated">通过使用此模块中的功能，可以指定以&lt;a href=&quot;supervisor#start_link/2&quot;&gt; &lt;code&gt;Supervisor.start_link/2&lt;/code&gt; &lt;/a&gt;开头的主管下的子级：</target>
        </trans-unit>
        <trans-unit id="2c4df2c57a78ef2bacad336bf3270c7691b6b4a9" translate="yes" xml:space="preserve">
          <source>By using this module, the callbacks and assertions available for regular test cases will also be available.</source>
          <target state="translated">通过使用该模块,常规测试用例的回调和断言也将可用。</target>
        </trans-unit>
        <trans-unit id="b1570089a3b884d047ed831c82108ff3c320012d" translate="yes" xml:space="preserve">
          <source>Byte order marks</source>
          <target state="translated">字节序号</target>
        </trans-unit>
        <trans-unit id="eb1ba157957ddfdacc5b18a96c80b83156efc283" translate="yes" xml:space="preserve">
          <source>CLI exits</source>
          <target state="translated">CLI退出</target>
        </trans-unit>
        <trans-unit id="e0116c5110dfc390223e2cf0357726dcea588606" translate="yes" xml:space="preserve">
          <source>CNT - total number of invocations of the given function</source>
          <target state="translated">CNT-给定函数的总调用次数。</target>
        </trans-unit>
        <trans-unit id="5a1f679c89e760e380af7bd2f44ba411cf25722e" translate="yes" xml:space="preserve">
          <source>Calculates the bitwise AND of its arguments.</source>
          <target state="translated">计算其参数的位宽。</target>
        </trans-unit>
        <trans-unit id="84e4f0eeebc650c4d2644607d336f04cbb23d438" translate="yes" xml:space="preserve">
          <source>Calculates the bitwise NOT of its argument.</source>
          <target state="translated">计算其参数的位上NOT。</target>
        </trans-unit>
        <trans-unit id="82c78143ba33e97d749e3529f91d872adcb213b4" translate="yes" xml:space="preserve">
          <source>Calculates the bitwise OR of its arguments.</source>
          <target state="translated">计算其参数的位性OR。</target>
        </trans-unit>
        <trans-unit id="66848a208113faeb7ce19122ab8c270554db335f" translate="yes" xml:space="preserve">
          <source>Calculates the bitwise XOR of its arguments.</source>
          <target state="translated">计算其参数的位XOR。</target>
        </trans-unit>
        <trans-unit id="872e2eaef65c0a774ab638167d32944d779fe0db" translate="yes" xml:space="preserve">
          <source>Calculates the day and era from the given &lt;code&gt;year&lt;/code&gt;, &lt;code&gt;month&lt;/code&gt;, and &lt;code&gt;day&lt;/code&gt;.</source>
          <target state="translated">从给定的 &lt;code&gt;year&lt;/code&gt; ， &lt;code&gt;month&lt;/code&gt; 和 &lt;code&gt;day&lt;/code&gt; 计算日期和时代。</target>
        </trans-unit>
        <trans-unit id="59531be2cfe81760a8bcb2ad77fdb94258d79267" translate="yes" xml:space="preserve">
          <source>Calculates the day of the week from the given &lt;code&gt;year&lt;/code&gt;, &lt;code&gt;month&lt;/code&gt;, and &lt;code&gt;day&lt;/code&gt;.</source>
          <target state="translated">从给定的 &lt;code&gt;year&lt;/code&gt; ， &lt;code&gt;month&lt;/code&gt; 和 &lt;code&gt;day&lt;/code&gt; 计算星期几。</target>
        </trans-unit>
        <trans-unit id="977d26fb6d2c6237ad910b694ef77ece58a18321" translate="yes" xml:space="preserve">
          <source>Calculates the day of the week of a given &lt;code&gt;date&lt;/code&gt;.</source>
          <target state="translated">计算给定 &lt;code&gt;date&lt;/code&gt; 的星期几。</target>
        </trans-unit>
        <trans-unit id="48ab91160e20cbcc7db86d12c7c5d29ffe417d69" translate="yes" xml:space="preserve">
          <source>Calculates the day of the year from the given &lt;code&gt;year&lt;/code&gt;, &lt;code&gt;month&lt;/code&gt;, and &lt;code&gt;day&lt;/code&gt;.</source>
          <target state="translated">从给定的 &lt;code&gt;year&lt;/code&gt; ， &lt;code&gt;month&lt;/code&gt; 和 &lt;code&gt;day&lt;/code&gt; 计算一年中的一天。</target>
        </trans-unit>
        <trans-unit id="69bb790c7a94873e3a63a87bed9ab85d41e51ad2" translate="yes" xml:space="preserve">
          <source>Calculates the day of the year of a given &lt;code&gt;date&lt;/code&gt;.</source>
          <target state="translated">计算给定 &lt;code&gt;date&lt;/code&gt; 的一年中的哪一天。</target>
        </trans-unit>
        <trans-unit id="51f486811d7efdb5f59099bf0821d88cdd0fcdb3" translate="yes" xml:space="preserve">
          <source>Calculates the day-of-era and era for a given calendar &lt;code&gt;date&lt;/code&gt;.</source>
          <target state="translated">计算给定日历 &lt;code&gt;date&lt;/code&gt; 的时代和时代。</target>
        </trans-unit>
        <trans-unit id="31ffe77841021e9cd0d8d28a2ff0eb90596f7c2f" translate="yes" xml:space="preserve">
          <source>Calculates the difference between two dates, in a full number of days.</source>
          <target state="translated">计算两个日期之间的差值,以整数天为单位。</target>
        </trans-unit>
        <trans-unit id="1e22629218c7c2524d719a6aafb26320a9e33d6f" translate="yes" xml:space="preserve">
          <source>Calculates the quarter of the year from the given &lt;code&gt;year&lt;/code&gt;, &lt;code&gt;month&lt;/code&gt;, and &lt;code&gt;day&lt;/code&gt;.</source>
          <target state="translated">从给定的 &lt;code&gt;year&lt;/code&gt; ， &lt;code&gt;month&lt;/code&gt; 和 &lt;code&gt;day&lt;/code&gt; 计算一年的四分之一。</target>
        </trans-unit>
        <trans-unit id="ced99eb284fbbc4addff1f8982435da702405206" translate="yes" xml:space="preserve">
          <source>Calculates the quarter of the year of a given &lt;code&gt;date&lt;/code&gt;.</source>
          <target state="translated">计算给定 &lt;code&gt;date&lt;/code&gt; 的一年的四分之一。</target>
        </trans-unit>
        <trans-unit id="38a63816978a3500d8832c7b1f94a4f1bae97c63" translate="yes" xml:space="preserve">
          <source>Calculates the result of an arithmetic left bitshift.</source>
          <target state="translated">计算算术左位移位的结果。</target>
        </trans-unit>
        <trans-unit id="4efe33d70304152372f10ae59d4a94377d6ac6d6" translate="yes" xml:space="preserve">
          <source>Calculates the result of an arithmetic right bitshift.</source>
          <target state="translated">计算算术右位移位的结果。</target>
        </trans-unit>
        <trans-unit id="df000a9c3e0cbb692af58f43cb56584844928596" translate="yes" xml:space="preserve">
          <source>Calculates the year and era from the given &lt;code&gt;year&lt;/code&gt;.</source>
          <target state="translated">计算给定 &lt;code&gt;year&lt;/code&gt; 的年份和时代。</target>
        </trans-unit>
        <trans-unit id="c5b862a12e39e020b060e66f5c4acab9c33e37a6" translate="yes" xml:space="preserve">
          <source>Calculates the year-of-era and era for a given calendar year.</source>
          <target state="translated">计算给定历年的年代和时代。</target>
        </trans-unit>
        <trans-unit id="adab5090ac6a1b7b5420faac7be86c41721ba27c" translate="yes" xml:space="preserve">
          <source>Calendar</source>
          <target state="translated">Calendar</target>
        </trans-unit>
        <trans-unit id="d2846e6231c1d94a724f86fb32fe4ede252c7e62" translate="yes" xml:space="preserve">
          <source>Calendar &lt;small&gt;behaviour&lt;/small&gt;</source>
          <target state="translated">日历&lt;small&gt;行为&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="ef9e9ae658ec14ea6882de0157e1d6807db80ee5" translate="yes" xml:space="preserve">
          <source>Calendar.ISO</source>
          <target state="translated">Calendar.ISO</target>
        </trans-unit>
        <trans-unit id="f5c6e67829066a800fc5a7db8149d3747aa50714" translate="yes" xml:space="preserve">
          <source>Calendar.TimeZoneDatabase</source>
          <target state="translated">Calendar.TimeZoneDatabase</target>
        </trans-unit>
        <trans-unit id="97fb668d95f303af428dbebc65b8e7dcb0c6a7d1" translate="yes" xml:space="preserve">
          <source>Calendar.TimeZoneDatabase &lt;small&gt;behaviour&lt;/small&gt;</source>
          <target state="translated">Calendar.TimeZoneDatabase &lt;small&gt;行为&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="d8efcf40cde9eb544b2f246797c94807656d1da5" translate="yes" xml:space="preserve">
          <source>Calendar.UTCOnlyTimeZoneDatabase</source>
          <target state="translated">Calendar.UTCOnlyTimeZoneDatabase</target>
        </trans-unit>
        <trans-unit id="c7ed9654ce3205b4d11f855df757291b19bd05d6" translate="yes" xml:space="preserve">
          <source>Call &lt;a href=&quot;enum#to_list/1&quot;&gt;&lt;code&gt;Enum.to_list/1&lt;/code&gt;&lt;/a&gt; on the second argument before hand (v1.0)</source>
          <target state="translated">&lt;a href=&quot;enum#to_list/1&quot;&gt; &lt;code&gt;Enum.to_list/1&lt;/code&gt; &lt;/a&gt;在第二个参数上调用Enum.to_list / 1（v1.0）</target>
        </trans-unit>
        <trans-unit id="0ec5483fd7a38077d057ae7802d3cb47d7ef8aa0" translate="yes" xml:space="preserve">
          <source>Callback implementation for &lt;a href=&quot;eex.engine#c:handle_begin/1&quot;&gt;&lt;code&gt;EEx.Engine.handle_begin/1&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;eex.engine#c:handle_begin/1&quot;&gt; &lt;code&gt;EEx.Engine.handle_begin/1&lt;/code&gt; 的&lt;/a&gt;回调实现。</target>
        </trans-unit>
        <trans-unit id="c10d1f66343bff0367facdfabc09309b1db76d10" translate="yes" xml:space="preserve">
          <source>Callback implementation for &lt;a href=&quot;eex.engine#c:handle_body/1&quot;&gt;&lt;code&gt;EEx.Engine.handle_body/1&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;eex.engine#c:handle_body/1&quot;&gt; &lt;code&gt;EEx.Engine.handle_body/1&lt;/code&gt; 的&lt;/a&gt;回调实现。</target>
        </trans-unit>
        <trans-unit id="809f4f9c22dd6ee3ec66bf463f931344c3f340dd" translate="yes" xml:space="preserve">
          <source>Callback implementation for &lt;a href=&quot;eex.engine#c:handle_end/1&quot;&gt;&lt;code&gt;EEx.Engine.handle_end/1&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;eex.engine#c:handle_end/1&quot;&gt; &lt;code&gt;EEx.Engine.handle_end/1&lt;/code&gt; 的&lt;/a&gt;回调实现。</target>
        </trans-unit>
        <trans-unit id="3b8c930f53b6ae5c6504b04c2e084c2c472b9f22" translate="yes" xml:space="preserve">
          <source>Callback implementation for &lt;a href=&quot;eex.engine#c:handle_expr/3&quot;&gt;&lt;code&gt;EEx.Engine.handle_expr/3&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;eex.engine#c:handle_expr/3&quot;&gt; &lt;code&gt;EEx.Engine.handle_expr/3&lt;/code&gt; 的&lt;/a&gt;回调实现。</target>
        </trans-unit>
        <trans-unit id="d538426bfe18e63fe5c0d95dab134b723574484b" translate="yes" xml:space="preserve">
          <source>Callback implementation for &lt;a href=&quot;eex.engine#c:handle_text/2&quot;&gt;&lt;code&gt;EEx.Engine.handle_text/2&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;eex.engine#c:handle_text/2&quot;&gt; &lt;code&gt;EEx.Engine.handle_text/2&lt;/code&gt; 的&lt;/a&gt;回调实现。</target>
        </trans-unit>
        <trans-unit id="7f0b1ed3855a5c3236f255f01ab409ddde0f8818" translate="yes" xml:space="preserve">
          <source>Callback implementation for &lt;a href=&quot;eex.engine#c:init/1&quot;&gt;&lt;code&gt;EEx.Engine.init/1&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;eex.engine#c:init/1&quot;&gt; &lt;code&gt;EEx.Engine.init/1&lt;/code&gt; 的&lt;/a&gt;回调实现。</target>
        </trans-unit>
        <trans-unit id="cd7ab7f77ceb6a2945635de1386a402a7ef6ee53" translate="yes" xml:space="preserve">
          <source>Callback invoked after code upgrade, if the application environment has changed.</source>
          <target state="translated">如果应用环境发生了变化,在代码升级后调用回调。</target>
        </trans-unit>
        <trans-unit id="9fbe07680545fab8c38f764f99ebaad2d192e475" translate="yes" xml:space="preserve">
          <source>Callback invoked to start the supervisor and during hot code upgrades.</source>
          <target state="translated">启动主管和热码升级时调用回调。</target>
        </trans-unit>
        <trans-unit id="9fdc2cfe374fa5bde1e4e458854875e1709add1c" translate="yes" xml:space="preserve">
          <source>Callbacks</source>
          <target state="translated">Callbacks</target>
        </trans-unit>
        <trans-unit id="f6c42f7bb51b73d4b211ee83945d9879bce48368" translate="yes" xml:space="preserve">
          <source>Callbacks registered first will run last.</source>
          <target state="translated">先注册的回调将最后运行。</target>
        </trans-unit>
        <trans-unit id="66201e1b84a1d1a6ff96f16fa8793345ed84e782" translate="yes" xml:space="preserve">
          <source>Callbacks registered first will run last. Any overridable definition will be made concrete before the first callback runs. A definition may be made overridable again in another before compile callback and it will be made concrete one last time after after all callbacks run.</source>
          <target state="translated">先注册的回调将最后运行。任何可覆盖的定义将在第一个回调运行之前被具体化。一个定义可以在编译前的另一个回调中再次被覆盖,并且在所有回调运行后最后一次被具体化。</target>
        </trans-unit>
        <trans-unit id="d85b3a76866da7a60448467248c2cfd125983166" translate="yes" xml:space="preserve">
          <source>Callbacks set with &lt;a href=&quot;#after_suite/1&quot;&gt;&lt;code&gt;after_suite/1&lt;/code&gt;&lt;/a&gt; must accept a single argument, which is a map containing the results of the test suite's execution.</source>
          <target state="translated">使用&lt;a href=&quot;#after_suite/1&quot;&gt; &lt;code&gt;after_suite/1&lt;/code&gt; &lt;/a&gt;设置的回调必须接受单个参数，该参数是包含测试套件执行结果的映射。</target>
        </trans-unit>
        <trans-unit id="0faabceba35fd7a48636a9f242b76d779503989b" translate="yes" xml:space="preserve">
          <source>Called after an application has been stopped.</source>
          <target state="translated">在申请被停止后调用。</target>
        </trans-unit>
        <trans-unit id="63380a742a1ed6d808719b27ab046bd5083024b3" translate="yes" xml:space="preserve">
          <source>Called at the beginning of every template.</source>
          <target state="translated">在每个模板开始时调用。</target>
        </trans-unit>
        <trans-unit id="c3e6c4eb21e116160c46b9548a425a642cdad1e5" translate="yes" xml:space="preserve">
          <source>Called at the end of every template.</source>
          <target state="translated">在每个模板结束时调用。</target>
        </trans-unit>
        <trans-unit id="442535ed506cf7f3e8f4628a3a6c0adb928772c4" translate="yes" xml:space="preserve">
          <source>Called before stopping the application.</source>
          <target state="translated">在停止应用前调用。</target>
        </trans-unit>
        <trans-unit id="e32234ad249148d3b937bfee926f036a291cfa48" translate="yes" xml:space="preserve">
          <source>Called for the dynamic/code parts of a template.</source>
          <target state="translated">调用模板的动态/代码部分。</target>
        </trans-unit>
        <trans-unit id="03a90d4fa846b3199574f48f2a69056a02070095" translate="yes" xml:space="preserve">
          <source>Called for the text/static parts of a template.</source>
          <target state="translated">调用模板的文本/静态部分。</target>
        </trans-unit>
        <trans-unit id="efdaf943b92658db4a3efff473253de2372bcf86" translate="yes" xml:space="preserve">
          <source>Called from &lt;a href=&quot;exception#blame/3&quot;&gt;&lt;code&gt;Exception.blame/3&lt;/code&gt;&lt;/a&gt; to augment the exception struct.</source>
          <target state="translated">从&lt;a href=&quot;exception#blame/3&quot;&gt; &lt;code&gt;Exception.blame/3&lt;/code&gt; &lt;/a&gt;调用以增强异常结构。</target>
        </trans-unit>
        <trans-unit id="f0ca56a7a06bc47a8cf3a0a7612d281facc7aec4" translate="yes" xml:space="preserve">
          <source>Called when an application is started.</source>
          <target state="translated">在应用程序启动时调用。</target>
        </trans-unit>
        <trans-unit id="b8f234a1e4d68947a81625776c2d1d09281b09d9" translate="yes" xml:space="preserve">
          <source>Calling &lt;a href=&quot;kernel.specialforms#super/1&quot;&gt;&lt;code&gt;super/1&lt;/code&gt;&lt;/a&gt; on GenServer callbacks</source>
          <target state="translated">在GenServer回调中调用&lt;a href=&quot;kernel.specialforms#super/1&quot;&gt; &lt;code&gt;super/1&lt;/code&gt; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="351d7d149e48159d87db220bf823be28fe3f8023" translate="yes" xml:space="preserve">
          <source>Calling anonymous functions uses the dot in the AST with a single argument, mirroring the fact the function name is &quot;missing&quot; from right side of the dot:</source>
          <target state="translated">调用匿名函数时,使用AST中的单参数的点,反映了函数名从点的右侧 &quot;缺失 &quot;的事实。</target>
        </trans-unit>
        <trans-unit id="483676a4323ff474475176f21ccdb14d6acd93be" translate="yes" xml:space="preserve">
          <source>Calling this new &lt;code&gt;return_length/0&lt;/code&gt; will still return &lt;code&gt;3&lt;/code&gt; as result.</source>
          <target state="translated">调用此新的 &lt;code&gt;return_length/0&lt;/code&gt; 仍将返回 &lt;code&gt;3&lt;/code&gt; 作为结果。</target>
        </trans-unit>
        <trans-unit id="2f70240a7a73a837a65004029341593ba5615c20" translate="yes" xml:space="preserve">
          <source>Calls &lt;a href=&quot;https://hexdocs.pm/elixir/Kernel.SpecialForms.html#import/2&quot;&gt;&lt;code&gt;import/2&lt;/code&gt;&lt;/a&gt; with the given arguments, but only if the module is available.</source>
          <target state="translated">使用给定参数调用&lt;a href=&quot;https://hexdocs.pm/elixir/Kernel.SpecialForms.html#import/2&quot;&gt; &lt;code&gt;import/2&lt;/code&gt; &lt;/a&gt;，但仅在模块可用时调用。</target>
        </trans-unit>
        <trans-unit id="32b79b53c10b7818f97870494be94fb3c414206b" translate="yes" xml:space="preserve">
          <source>Calls &lt;a href=&quot;https://hexdocs.pm/elixir/Kernel.html#use/2&quot;&gt;&lt;code&gt;use/2&lt;/code&gt;&lt;/a&gt; with the given arguments, but only if the module is available.</source>
          <target state="translated">&lt;a href=&quot;https://hexdocs.pm/elixir/Kernel.html#use/2&quot;&gt; &lt;code&gt;use/2&lt;/code&gt; &lt;/a&gt;给定参数调用use / 2，但仅在模块可用时调用。</target>
        </trans-unit>
        <trans-unit id="aa43ce86529e7a9b7d32993a0bcab9a4c00c893f" translate="yes" xml:space="preserve">
          <source>Calls all servers locally registered as &lt;code&gt;name&lt;/code&gt; at the specified &lt;code&gt;nodes&lt;/code&gt;.</source>
          <target state="translated">调用在指定 &lt;code&gt;nodes&lt;/code&gt; 上本地注册为 &lt;code&gt;name&lt;/code&gt; 所有服务器。</target>
        </trans-unit>
        <trans-unit id="973a2b37cbb904055d8b2cb9085515443a94fcfb" translate="yes" xml:space="preserve">
          <source>Calls inside &lt;a href=&quot;#try/1&quot;&gt;&lt;code&gt;try/1&lt;/code&gt;&lt;/a&gt; are not tail recursive since the VM needs to keep the stacktrace in case an exception happens. To retrieve the stacktrace, access &lt;a href=&quot;#__STACKTRACE__/0&quot;&gt;&lt;code&gt;__STACKTRACE__/0&lt;/code&gt;&lt;/a&gt; inside the &lt;code&gt;rescue&lt;/code&gt; or &lt;code&gt;catch&lt;/code&gt; clause.</source>
          <target state="translated">&lt;a href=&quot;#try/1&quot;&gt; &lt;code&gt;try/1&lt;/code&gt; &lt;/a&gt;内部的调用不是尾部递归的，因为如果发生异常，VM需要保留堆栈跟踪。要检索&lt;a href=&quot;#__STACKTRACE__/0&quot;&gt; &lt;code&gt;__STACKTRACE__/0&lt;/code&gt; &lt;/a&gt;在 &lt;code&gt;rescue&lt;/code&gt; 或 &lt;code&gt;catch&lt;/code&gt; 子句中访问__STACKTRACE __ / 0。</target>
        </trans-unit>
        <trans-unit id="9e45c3b1dc9f022a7ca2feaa09407ac0c9c46f51" translate="yes" xml:space="preserve">
          <source>Calls the &lt;code&gt;exception/1&lt;/code&gt; function on the given argument (which has to be a module name like &lt;a href=&quot;argumenterror&quot;&gt;&lt;code&gt;ArgumentError&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;runtimeerror&quot;&gt;&lt;code&gt;RuntimeError&lt;/code&gt;&lt;/a&gt;) passing &lt;code&gt;attrs&lt;/code&gt; as the attributes in order to retrieve the exception struct.</source>
          <target state="translated">调用 &lt;code&gt;attrs&lt;/code&gt; 作为属性的给定参数（必须是模块名称，如&lt;a href=&quot;argumenterror&quot;&gt; &lt;code&gt;ArgumentError&lt;/code&gt; &lt;/a&gt;或&lt;a href=&quot;runtimeerror&quot;&gt; &lt;code&gt;RuntimeError&lt;/code&gt; &lt;/a&gt;）上的给定参数调用 &lt;code&gt;exception/1&lt;/code&gt; 函数，以检索异常结构。</target>
        </trans-unit>
        <trans-unit id="cf2cbc473a24499b6038ffab5fe859228e498845" translate="yes" xml:space="preserve">
          <source>Calls the overridden function when overriding it with &lt;a href=&quot;kernel#defoverridable/1&quot;&gt;&lt;code&gt;Kernel.defoverridable/1&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">当用&lt;a href=&quot;kernel#defoverridable/1&quot;&gt; &lt;code&gt;Kernel.defoverridable/1&lt;/code&gt; &lt;/a&gt;覆盖重写的函数时，调用它。</target>
        </trans-unit>
        <trans-unit id="4da0eb7496c45b4f2e06c9a592ed791d6921bdac" translate="yes" xml:space="preserve">
          <source>Calls the provided &lt;code&gt;empty_fallback&lt;/code&gt; function and returns its value if &lt;code&gt;enumerable&lt;/code&gt; is empty. The default &lt;code&gt;empty_fallback&lt;/code&gt; raises &lt;a href=&quot;enum.emptyerror&quot;&gt;&lt;code&gt;Enum.EmptyError&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">调用提供的 &lt;code&gt;empty_fallback&lt;/code&gt; 函数，如果 &lt;code&gt;enumerable&lt;/code&gt; 为空，则返回其值。默认的 &lt;code&gt;empty_fallback&lt;/code&gt; 引发&lt;a href=&quot;enum.emptyerror&quot;&gt; &lt;code&gt;Enum.EmptyError&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="8341f9c0dc9a43feb95e575c7d1ff19857e6cc50" translate="yes" xml:space="preserve">
          <source>Can be used to collect additional information about the exception or do some additional expensive computation.</source>
          <target state="translated">可以用来收集有关异常的额外信息,或者做一些额外的昂贵计算。</target>
        </trans-unit>
        <trans-unit id="e334a2ce3108e0febeb57230bd2cb23a051d7fbe" translate="yes" xml:space="preserve">
          <source>Can return values to be merged into the &lt;code&gt;context&lt;/code&gt;, to set up the state for tests. For more details, see the &quot;Context&quot; section shown above.</source>
          <target state="translated">可以返回要合并到 &lt;code&gt;context&lt;/code&gt; ，以设置测试状态。有关更多详细信息，请参见上面显示的&amp;ldquo;上下文&amp;rdquo;部分。</target>
        </trans-unit>
        <trans-unit id="0242ecee6ab6bf770b987438f3bfcd7060632331" translate="yes" xml:space="preserve">
          <source>Can return values to be merged into the context, to set up the state for tests. For more details, see the &quot;Context&quot; section shown above.</source>
          <target state="translated">可以返回要合并到上下文中的值,为测试设置状态。更多细节请参见上面所示的 &quot;上下文 &quot;部分。</target>
        </trans-unit>
        <trans-unit id="8716b1b959af99def374d9b25e8ba6c67f8e0642" translate="yes" xml:space="preserve">
          <source>Cancels a timer returned by &lt;a href=&quot;#send_after/3&quot;&gt;&lt;code&gt;send_after/3&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">取消&lt;a href=&quot;#send_after/3&quot;&gt; &lt;code&gt;send_after/3&lt;/code&gt; &lt;/a&gt;返回的计时器。</target>
        </trans-unit>
        <trans-unit id="772a4bcb6564702a3954bd84a80b8688f24e0663" translate="yes" xml:space="preserve">
          <source>Capture</source>
          <target state="translated">Capture</target>
        </trans-unit>
        <trans-unit id="7c8134e39c2398e58f343200b0596b236c139932" translate="yes" xml:space="preserve">
          <source>Captures</source>
          <target state="translated">Captures</target>
        </trans-unit>
        <trans-unit id="ee795a7fa93d1d3588ea4bf78c087bb3df764e96" translate="yes" xml:space="preserve">
          <source>Captures or creates an anonymous function.</source>
          <target state="translated">捕获或创建一个匿名函数。</target>
        </trans-unit>
        <trans-unit id="a1bd477e88eb362e3b6ca6a4a29b2702d3015ff6" translate="yes" xml:space="preserve">
          <source>Captures the given function.</source>
          <target state="translated">捕获给定的函数。</target>
        </trans-unit>
        <trans-unit id="aa83b0db7571a9b488496ed9d08b379219be7ce6" translate="yes" xml:space="preserve">
          <source>Carefully stops the Erlang runtime system.</source>
          <target state="translated">谨慎地停止Erlang运行时系统。</target>
        </trans-unit>
        <trans-unit id="3de7c7c7fd9020f41906a55076bb7100b700d996" translate="yes" xml:space="preserve">
          <source>Case, Callbacks and Assertions</source>
          <target state="translated">案例、回调和断言</target>
        </trans-unit>
        <trans-unit id="50ae5b37c236ae7f885890b3cfa7f117f01aadb1" translate="yes" xml:space="preserve">
          <source>CaseClauseError</source>
          <target state="translated">CaseClauseError</target>
        </trans-unit>
        <trans-unit id="fdf5275c868ecbada652e512ffc1fdefc861f736" translate="yes" xml:space="preserve">
          <source>CaseClauseError &lt;small&gt;exception&lt;/small&gt;</source>
          <target state="translated">CaseClauseError &lt;small&gt;异常&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="f3d4dffe4c9ebac969ee4f02157e5740619b3299" translate="yes" xml:space="preserve">
          <source>Casing</source>
          <target state="translated">Casing</target>
        </trans-unit>
        <trans-unit id="7ed67e7a3ac2c5f0b4ebfcbd5516cf4cb07f36ce" translate="yes" xml:space="preserve">
          <source>Casts all servers locally registered as &lt;code&gt;name&lt;/code&gt; at the specified nodes.</source>
          <target state="translated">将所有在本地注册为 &lt;code&gt;name&lt;/code&gt; 服务器转换为指定节点上的名称。</target>
        </trans-unit>
        <trans-unit id="a338872f01e247b728456edb7f0b896e06d6f40c" translate="yes" xml:space="preserve">
          <source>Catching thrown values</source>
          <target state="translated">捕捉抛出的值</target>
        </trans-unit>
        <trans-unit id="b1d7430e3b7ebe0c9345e291ab7d148a7c0b4616" translate="yes" xml:space="preserve">
          <source>Catching values of any kind</source>
          <target state="translated">捕捉任何类型的值</target>
        </trans-unit>
        <trans-unit id="bcaa33a7ae44bd5042c37a9cdbea7f843b1cf7c8" translate="yes" xml:space="preserve">
          <source>Caveats</source>
          <target state="translated">Caveats</target>
        </trans-unit>
        <trans-unit id="fb1ca31f7b105b5db3d68fcceddbb09d728d0d20" translate="yes" xml:space="preserve">
          <source>Change the assertion in &lt;code&gt;test/kv_test.exs&lt;/code&gt; to the following:</source>
          <target state="translated">将 &lt;code&gt;test/kv_test.exs&lt;/code&gt; 中的断言更改为以下内容：</target>
        </trans-unit>
        <trans-unit id="4a4854b634f3d16dfe0416ab69448c4d70e815bc" translate="yes" xml:space="preserve">
          <source>Changes the &lt;code&gt;mode&lt;/code&gt; for a given &lt;code&gt;file&lt;/code&gt;.</source>
          <target state="translated">更改给定 &lt;code&gt;file&lt;/code&gt; 的 &lt;code&gt;mode&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="1e48df922da0b08e16af81da8ffa6075f757955f" translate="yes" xml:space="preserve">
          <source>Changes the current Mix environment to &lt;code&gt;env&lt;/code&gt;.</source>
          <target state="translated">将当前的Mix环境更改为 &lt;code&gt;env&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="441d60b43c53fc069fbc6a19e176cade2240e17d" translate="yes" xml:space="preserve">
          <source>Changes the current Mix target to &lt;code&gt;target&lt;/code&gt;.</source>
          <target state="translated">将当前Mix目标更改为 &lt;code&gt;target&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="5d07d3f0b91ed23185354c26ccbebfdb380e8f21" translate="yes" xml:space="preserve">
          <source>Changes the current directory to the given &lt;code&gt;path&lt;/code&gt;, executes the given function and then reverts back to the previous path regardless of whether there is an exception.</source>
          <target state="translated">将当前目录更改为给定 &lt;code&gt;path&lt;/code&gt; ，执行给定功能，然后返回到先前路径，而不管是否存在异常。</target>
        </trans-unit>
        <trans-unit id="81244f5feba2a2ae578c67d52abe75adcd2c03c4" translate="yes" xml:space="preserve">
          <source>Changes the current working directory to the given path.</source>
          <target state="translated">将当前工作目录改为给定路径。</target>
        </trans-unit>
        <trans-unit id="dca7438f013e9357695dd4f7bbf67adfc6043e3a" translate="yes" xml:space="preserve">
          <source>Changes the filename used in stacktraces for the function or macro that follows the attribute, such as:</source>
          <target state="translated">改变属性后面的函数或宏在stacktraces中使用的文件名,例如。</target>
        </trans-unit>
        <trans-unit id="d49019da62eaa7b23d02a05fcc1a34795c0447dd" translate="yes" xml:space="preserve">
          <source>Changes the group given by the group ID &lt;code&gt;gid&lt;/code&gt; for a given &lt;code&gt;file&lt;/code&gt;. Returns &lt;code&gt;:ok&lt;/code&gt; on success, or &lt;code&gt;{:error, reason}&lt;/code&gt; on failure.</source>
          <target state="translated">更改给定 &lt;code&gt;file&lt;/code&gt; 的组ID &lt;code&gt;gid&lt;/code&gt; 所给定的组。如果成功返回 &lt;code&gt;:ok&lt;/code&gt; ，否则返回 &lt;code&gt;{:error, reason}&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="f8403cc6f3117f7214b1f5348fc78e244e7765be" translate="yes" xml:space="preserve">
          <source>Changes the list of command line arguments. Use it with caution, as it destroys any previous argv information.</source>
          <target state="translated">更改命令行参数列表。谨慎使用,因为它会破坏之前的 argv 信息。</target>
        </trans-unit>
        <trans-unit id="f78fe574885e1218644c8eb3ec719b0f72557786" translate="yes" xml:space="preserve">
          <source>Changes the owner given by the user ID &lt;code&gt;uid&lt;/code&gt; for a given &lt;code&gt;file&lt;/code&gt;. Returns &lt;code&gt;:ok&lt;/code&gt; on success, or &lt;code&gt;{:error, reason}&lt;/code&gt; on failure.</source>
          <target state="translated">更改给定 &lt;code&gt;file&lt;/code&gt; 的用户ID &lt;code&gt;uid&lt;/code&gt; 给定的所有者。如果成功返回 &lt;code&gt;:ok&lt;/code&gt; ，否则返回 &lt;code&gt;{:error, reason}&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="4a5a85be01bff52b55691c3e0e53685cf643afeb" translate="yes" xml:space="preserve">
          <source>Changes the time zone of a &lt;a href=&quot;#content&quot;&gt;&lt;code&gt;DateTime&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">更改&lt;a href=&quot;#content&quot;&gt; &lt;code&gt;DateTime&lt;/code&gt; &lt;/a&gt;的时区。</target>
        </trans-unit>
        <trans-unit id="284d1f54427e012e84088102ed1bc9f15dfbd47a" translate="yes" xml:space="preserve">
          <source>Char lists</source>
          <target state="translated">图表清单</target>
        </trans-unit>
        <trans-unit id="bf238be65bb5e7ebb05fdca2c63f71cc0a076a1a" translate="yes" xml:space="preserve">
          <source>Character classes</source>
          <target state="translated">角色类</target>
        </trans-unit>
        <trans-unit id="c51df18f8947669b0b6631dd0793cff088cde7c4" translate="yes" xml:space="preserve">
          <source>Chardata</source>
          <target state="translated">Chardata</target>
        </trans-unit>
        <trans-unit id="6995b6a69e7114b0d9f12f1dd5c41634206726e5" translate="yes" xml:space="preserve">
          <source>Charlists</source>
          <target state="translated">Charlists</target>
        </trans-unit>
        <trans-unit id="6c06cb03cc85ac5b58f555f3b3b633f044c1c86a" translate="yes" xml:space="preserve">
          <source>Charlists are always represented as themselves in the AST.</source>
          <target state="translated">Charlists在AST中总是以自己为代表。</target>
        </trans-unit>
        <trans-unit id="29fe510ad38d3c89583dde7f48d5a6ec1fc330d4" translate="yes" xml:space="preserve">
          <source>Charlists in Elixir are written in single-quotes, such as &lt;code&gt;'foo'&lt;/code&gt;. Any single-quote inside the string must be escaped with &lt;code&gt;\&lt;/code&gt;. Charlists are made of non-negative integers, where each integer represents a Unicode code point.</source>
          <target state="translated">Elixir中的字符列表用单引号括起来，例如 &lt;code&gt;'foo'&lt;/code&gt; 。字符串中的任何单引号都必须使用 &lt;code&gt;\&lt;/code&gt; 进行转义。字符列表由非负整数组成，其中每个整数代表一个Unicode代码点。</target>
        </trans-unit>
        <trans-unit id="692ca546041e0defb9df176c51dca7a9351edd04" translate="yes" xml:space="preserve">
          <source>Check &lt;a href=&quot;#compiler_options/1&quot;&gt;&lt;code&gt;compiler_options/1&lt;/code&gt;&lt;/a&gt; for more information.</source>
          <target state="translated">有关更多信息，请检查&lt;a href=&quot;#compiler_options/1&quot;&gt; &lt;code&gt;compiler_options/1&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="580e68b2106988dd01d5c2d7c8cd6275df6bffa6" translate="yes" xml:space="preserve">
          <source>Check &lt;a href=&quot;#def/2&quot;&gt;&lt;code&gt;def/2&lt;/code&gt;&lt;/a&gt; for more information.</source>
          <target state="translated">检查&lt;a href=&quot;#def/2&quot;&gt; &lt;code&gt;def/2&lt;/code&gt; &lt;/a&gt;了解更多信息。</target>
        </trans-unit>
        <trans-unit id="95077ccb031fbcb95d39307f645abe3b02d020d7" translate="yes" xml:space="preserve">
          <source>Check &lt;a href=&quot;#def/2&quot;&gt;&lt;code&gt;def/2&lt;/code&gt;&lt;/a&gt; for rules on naming and default arguments.</source>
          <target state="translated">检查&lt;a href=&quot;#def/2&quot;&gt; &lt;code&gt;def/2&lt;/code&gt; &lt;/a&gt;的命名规则和默认参数。</target>
        </trans-unit>
        <trans-unit id="16471b3c05acbe867b23d78e9ce516c95eaa45af" translate="yes" xml:space="preserve">
          <source>Check &lt;a href=&quot;#defmacro/2&quot;&gt;&lt;code&gt;defmacro/2&lt;/code&gt;&lt;/a&gt; for more information, and check &lt;a href=&quot;#def/2&quot;&gt;&lt;code&gt;def/2&lt;/code&gt;&lt;/a&gt; for rules on naming and default arguments.</source>
          <target state="translated">请检查&lt;a href=&quot;#defmacro/2&quot;&gt; &lt;code&gt;defmacro/2&lt;/code&gt; &lt;/a&gt;以获取更多信息，并检查&lt;a href=&quot;#def/2&quot;&gt; &lt;code&gt;def/2&lt;/code&gt; &lt;/a&gt;以获取有关命名规则和默认参数的信息。</target>
        </trans-unit>
        <trans-unit id="d696caf065aad7dda368b9ed69150792a031438c" translate="yes" xml:space="preserve">
          <source>Check &lt;a href=&quot;#ensure_loaded/1&quot;&gt;&lt;code&gt;ensure_loaded/1&lt;/code&gt;&lt;/a&gt; for more information on module loading and when to use &lt;a href=&quot;#ensure_loaded/1&quot;&gt;&lt;code&gt;ensure_loaded/1&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;#ensure_compiled/1&quot;&gt;&lt;code&gt;ensure_compiled/1&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">有关更多模块加载以及何时使用&lt;a href=&quot;#ensure_loaded/1&quot;&gt; &lt;code&gt;ensure_loaded/1&lt;/code&gt; &lt;/a&gt;或&lt;a href=&quot;#ensure_compiled/1&quot;&gt; &lt;code&gt;ensure_compiled/1&lt;/code&gt; &lt;/a&gt;信息，请检查&lt;a href=&quot;#ensure_loaded/1&quot;&gt; &lt;code&gt;ensure_loaded/1&lt;/code&gt; &lt;/a&gt;/ 1。</target>
        </trans-unit>
        <trans-unit id="223535a829f654f4ba1b94d2f73c385014b275bc" translate="yes" xml:space="preserve">
          <source>Check &lt;a href=&quot;#string_to_quoted/2&quot;&gt;&lt;code&gt;string_to_quoted/2&lt;/code&gt;&lt;/a&gt; for options information.</source>
          <target state="translated">检查&lt;a href=&quot;#string_to_quoted/2&quot;&gt; &lt;code&gt;string_to_quoted/2&lt;/code&gt; &lt;/a&gt;以获得选项信息。</target>
        </trans-unit>
        <trans-unit id="7c8d72337056863704c80e076ca875b05f4c79da" translate="yes" xml:space="preserve">
          <source>Check &lt;a href=&quot;#unescape_string/1&quot;&gt;&lt;code&gt;unescape_string/1&lt;/code&gt;&lt;/a&gt; if you want to use the same map as Elixir single- and double-quoted strings.</source>
          <target state="translated">如果要使用与Elixir单引号和双引号字符串相同的映射，请检查&lt;a href=&quot;#unescape_string/1&quot;&gt; &lt;code&gt;unescape_string/1&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="ee05709b378da3558eb634305561ffc48a326464" translate="yes" xml:space="preserve">
          <source>Check &lt;a href=&quot;#yield/2&quot;&gt;&lt;code&gt;yield/2&lt;/code&gt;&lt;/a&gt; for more information.</source>
          <target state="translated">有关更多信息，请检查&lt;a href=&quot;#yield/2&quot;&gt; &lt;code&gt;yield/2&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="785712997747226e23cf4b84e679095c307ba597" translate="yes" xml:space="preserve">
          <source>Check &lt;a href=&quot;file#open/2&quot;&gt;&lt;code&gt;File.open/2&lt;/code&gt;&lt;/a&gt; for other available options.</source>
          <target state="translated">检查&lt;a href=&quot;file#open/2&quot;&gt; &lt;code&gt;File.open/2&lt;/code&gt; &lt;/a&gt;是否有其他可用选项。</target>
        </trans-unit>
        <trans-unit id="f8d550f87c99e2d04e0824dc4af6695df840266f" translate="yes" xml:space="preserve">
          <source>Check &lt;a href=&quot;http://www.erlang.org/doc/man/file.html#open-2&quot;&gt;&lt;code&gt;:file.open/2&lt;/code&gt;&lt;/a&gt; for more information about such options and other performance considerations.</source>
          <target state="translated">检查&lt;a href=&quot;http://www.erlang.org/doc/man/file.html#open-2&quot;&gt; &lt;code&gt;:file.open/2&lt;/code&gt; &lt;/a&gt;以获取有关此类选项和其他性能注意事项的更多信息。</target>
        </trans-unit>
        <trans-unit id="0f5fa039b607cd582c6a4c955e7af1e177a34d30" translate="yes" xml:space="preserve">
          <source>Check &lt;a href=&quot;kernel.specialforms#quote/2&quot;&gt;&lt;code&gt;Kernel.SpecialForms.quote/2&lt;/code&gt;&lt;/a&gt; for more information.</source>
          <target state="translated">检查&lt;a href=&quot;kernel.specialforms#quote/2&quot;&gt; &lt;code&gt;Kernel.SpecialForms.quote/2&lt;/code&gt; &lt;/a&gt;以获得更多信息。</target>
        </trans-unit>
        <trans-unit id="9879b9cff677770f7fc6dce2a1ef0f51a801fd9d" translate="yes" xml:space="preserve">
          <source>Check &lt;a href=&quot;kernel.specialforms#try/1&quot;&gt;&lt;code&gt;Kernel.SpecialForms.try/1&lt;/code&gt;&lt;/a&gt; for more information.</source>
          <target state="translated">检查&lt;a href=&quot;kernel.specialforms#try/1&quot;&gt; &lt;code&gt;Kernel.SpecialForms.try/1&lt;/code&gt; &lt;/a&gt;了解更多信息。</target>
        </trans-unit>
        <trans-unit id="f8681dafec33d53ad1aff221f5baee38d09e6e9c" translate="yes" xml:space="preserve">
          <source>Check &lt;a href=&quot;list#myers_difference/2&quot;&gt;&lt;code&gt;List.myers_difference/2&lt;/code&gt;&lt;/a&gt; for more information.</source>
          <target state="translated">检查&lt;a href=&quot;list#myers_difference/2&quot;&gt; &lt;code&gt;List.myers_difference/2&lt;/code&gt; &lt;/a&gt;了解更多信息。</target>
        </trans-unit>
        <trans-unit id="e75e0fdd1c293bab75b6473bd2c4557b0ba22f15" translate="yes" xml:space="preserve">
          <source>Check out the &lt;a href=&quot;https://hexdocs.pm/elixir/Regex.html&quot;&gt;&lt;code&gt;Regex&lt;/code&gt; module&lt;/a&gt; for more information on other modifiers and the supported operations with regular expressions.</source>
          <target state="translated">请查看&lt;a href=&quot;https://hexdocs.pm/elixir/Regex.html&quot;&gt; &lt;code&gt;Regex&lt;/code&gt; 模块&lt;/a&gt;，以获取有关其他修饰符以及正则表达式支持的操作的更多信息。</target>
        </trans-unit>
        <trans-unit id="cbebd3b6561ff651e663b17bfb1588d294d1f922" translate="yes" xml:space="preserve">
          <source>Check the &lt;a href=&quot;process&quot;&gt;&lt;code&gt;Process&lt;/code&gt;&lt;/a&gt; module for more process-related functions.</source>
          <target state="translated">检查&lt;a href=&quot;process&quot;&gt; &lt;code&gt;Process&lt;/code&gt; &lt;/a&gt;模块以获取更多与过程相关的功能。</target>
        </trans-unit>
        <trans-unit id="a3840e7aee47b59321bae16ce0d7c094d2966b67" translate="yes" xml:space="preserve">
          <source>Check the &lt;a href=&quot;process&quot;&gt;&lt;code&gt;Process&lt;/code&gt;&lt;/a&gt; module for more process-related functions. For more information on linking, check &lt;a href=&quot;process#link/1&quot;&gt;&lt;code&gt;Process.link/1&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">检查&lt;a href=&quot;process&quot;&gt; &lt;code&gt;Process&lt;/code&gt; &lt;/a&gt;模块以获取更多与过程相关的功能。有关链接的更多信息，请检查&lt;a href=&quot;process#link/1&quot;&gt; &lt;code&gt;Process.link/1&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="240896e1c6f52924fd3b42c51075a7aa10e367b9" translate="yes" xml:space="preserve">
          <source>Check the implementation for &lt;a href=&quot;https://hexdocs.pm/logger/Logger.Backends.Console.html&quot;&gt;&lt;code&gt;Logger.Backends.Console&lt;/code&gt;&lt;/a&gt;, for examples on how to handle the recommendations in this section and how to process the existing options.</source>
          <target state="translated">检查&lt;a href=&quot;https://hexdocs.pm/logger/Logger.Backends.Console.html&quot;&gt; &lt;code&gt;Logger.Backends.Console&lt;/code&gt; &lt;/a&gt;的实现，以获取有关如何处理本节中的建议以及如何处理现有选项的示例。</target>
        </trans-unit>
        <trans-unit id="000a7110c0505a98fde3ef2e1bc528f24d4ff55d" translate="yes" xml:space="preserve">
          <source>Check the module doc for documentation on the valid parameters that will be interpolated in the pattern. If you pass &lt;code&gt;nil&lt;/code&gt; as the pattern, the pattern defaults to:</source>
          <target state="translated">检查模块文档，以获取有关将在模式中插入的有效参数的文档。如果将 &lt;code&gt;nil&lt;/code&gt; 作为模式传递，则模式默认为：</target>
        </trans-unit>
        <trans-unit id="baffb5f95d2d027ef564012567d5c8bd4d57d7b5" translate="yes" xml:space="preserve">
          <source>Checks if &lt;code&gt;character&lt;/code&gt; is a reserved one in a URI.</source>
          <target state="translated">检查 &lt;code&gt;character&lt;/code&gt; 是否是URI中的保留字符。</target>
        </trans-unit>
        <trans-unit id="4d43630cda829f9c5480cb619b0d9ba3fc02bfa4" translate="yes" xml:space="preserve">
          <source>Checks if &lt;code&gt;character&lt;/code&gt; is allowed unescaped in a URI.</source>
          <target state="translated">检查是否允许在URI中不转义 &lt;code&gt;character&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="642c5506cb97150c8b0c49957d1ec0c39ec37c4b" translate="yes" xml:space="preserve">
          <source>Checks if &lt;code&gt;character&lt;/code&gt; is an unreserved one in a URI.</source>
          <target state="translated">检查 &lt;code&gt;character&lt;/code&gt; 是否是URI中未保留的字符。</target>
        </trans-unit>
        <trans-unit id="bc5a3786cdb4b06c32ad1fea1d9dd0e8f286bf9a" translate="yes" xml:space="preserve">
          <source>Checks if &lt;code&gt;element&lt;/code&gt; exists within the &lt;code&gt;enumerable&lt;/code&gt;.</source>
          <target state="translated">检查 &lt;code&gt;element&lt;/code&gt; 是否存在于 &lt;code&gt;enumerable&lt;/code&gt; 中。</target>
        </trans-unit>
        <trans-unit id="34e9118ae59c73fb1d0e9850a5a925dc8f08a60c" translate="yes" xml:space="preserve">
          <source>Checks if &lt;code&gt;list&lt;/code&gt; is a charlist made only of printable ASCII characters.</source>
          <target state="translated">检查 &lt;code&gt;list&lt;/code&gt; 是否为仅由可打印ASCII字符组成的字符列表。</target>
        </trans-unit>
        <trans-unit id="51ba5162de69ab5b19b61f1d779e77a231f9273a" translate="yes" xml:space="preserve">
          <source>Checks if &lt;code&gt;map_set1&lt;/code&gt; and &lt;code&gt;map_set2&lt;/code&gt; have no members in common.</source>
          <target state="translated">检查 &lt;code&gt;map_set1&lt;/code&gt; 和 &lt;code&gt;map_set2&lt;/code&gt; 是否没有共同的成员。</target>
        </trans-unit>
        <trans-unit id="6de0146be0b596d291b6d034f7c054092ea93647" translate="yes" xml:space="preserve">
          <source>Checks if &lt;code&gt;map_set1&lt;/code&gt;'s members are all contained in &lt;code&gt;map_set2&lt;/code&gt;.</source>
          <target state="translated">检查 &lt;code&gt;map_set1&lt;/code&gt; 的成员是否全部包含在 &lt;code&gt;map_set2&lt;/code&gt; 中。</target>
        </trans-unit>
        <trans-unit id="860353a348e857f20a74b65256993cbd76ecfd45" translate="yes" xml:space="preserve">
          <source>Checks if &lt;code&gt;map_set&lt;/code&gt; contains &lt;code&gt;value&lt;/code&gt;.</source>
          <target state="translated">检查 &lt;code&gt;map_set&lt;/code&gt; 是否包含 &lt;code&gt;value&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="7d02d1acf553172c398ff3badaa55f9975d65496" translate="yes" xml:space="preserve">
          <source>Checks if &lt;code&gt;string&lt;/code&gt; contains any of the given &lt;code&gt;contents&lt;/code&gt;.</source>
          <target state="translated">检查 &lt;code&gt;string&lt;/code&gt; 是否包含任何给定的 &lt;code&gt;contents&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="fd0b0ab3712234c91e2a938e6cf5b5d74612661e" translate="yes" xml:space="preserve">
          <source>Checks if &lt;code&gt;string&lt;/code&gt; matches the given regular expression.</source>
          <target state="translated">检查 &lt;code&gt;string&lt;/code&gt; 匹配给定的正则表达式。</target>
        </trans-unit>
        <trans-unit id="c32e6246846b85caee2acf1229eb3f9ce12bff47" translate="yes" xml:space="preserve">
          <source>Checks if ANSI coloring is supported and enabled on this machine.</source>
          <target state="translated">检查本机是否支持和启用ANSI着色。</target>
        </trans-unit>
        <trans-unit id="598cd82c1f65bc6e00bf01f403ad5bf50ee82808" translate="yes" xml:space="preserve">
          <source>Checks if a module is open.</source>
          <target state="translated">检查模块是否打开。</target>
        </trans-unit>
        <trans-unit id="97952b511a27ef4ca31c8b021afb71a2e3a4d636" translate="yes" xml:space="preserve">
          <source>Checks if a string contains only printable characters up to &lt;code&gt;character_limit&lt;/code&gt;.</source>
          <target state="translated">检查字符串是否仅包含最多可打印字符 &lt;code&gt;character_limit&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="738ad3d07d9803b45243f29adefcce780279e603" translate="yes" xml:space="preserve">
          <source>Checks if a variable belongs to the environment.</source>
          <target state="translated">检查变量是否属于环境。</target>
        </trans-unit>
        <trans-unit id="9b7301ad49b99d36c204b6d78c9440851f9234b1" translate="yes" xml:space="preserve">
          <source>Checks if an &lt;code&gt;element&lt;/code&gt; exists within the &lt;code&gt;enumerable&lt;/code&gt;.</source>
          <target state="translated">检查 &lt;code&gt;enumerable&lt;/code&gt; 是否存在 &lt;code&gt;element&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="0c385aef6748980d6bd7e8fb950ad4f9d46b618a" translate="yes" xml:space="preserve">
          <source>Checks if an alias called &lt;code&gt;task&lt;/code&gt; exists.</source>
          <target state="translated">检查是否存在称为 &lt;code&gt;task&lt;/code&gt; 的别名。</target>
        </trans-unit>
        <trans-unit id="5e7e666e0c3d03945af8991776e375da93987b75" translate="yes" xml:space="preserve">
          <source>Checks if the current module defines the given type (private, opaque or not).</source>
          <target state="translated">检查当前模块是否定义了给定的类型(private,opaque or not)。</target>
        </trans-unit>
        <trans-unit id="889ecbb917f6d1b03f6c203ac51a025e0d0d4cb0" translate="yes" xml:space="preserve">
          <source>Checks if the element on the left-hand side is a member of the collection on the right-hand side.</source>
          <target state="translated">检查左手边的元素是否是右手边集合的成员。</target>
        </trans-unit>
        <trans-unit id="3a7758dda8842a876dc8bd8d7f91d3f50d8c1417" translate="yes" xml:space="preserve">
          <source>Checks if the given &lt;code&gt;data&lt;/code&gt; is a record of kind &lt;code&gt;kind&lt;/code&gt;.</source>
          <target state="translated">如果给定的检查 &lt;code&gt;data&lt;/code&gt; 是怎么样的一个记录 &lt;code&gt;kind&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="118f8426c42f72df84637b50990f8b910aead852" translate="yes" xml:space="preserve">
          <source>Checks if the given &lt;code&gt;data&lt;/code&gt; is a record.</source>
          <target state="translated">检查给定 &lt;code&gt;data&lt;/code&gt; 是否为记录。</target>
        </trans-unit>
        <trans-unit id="124c3e109b20d327475da3b493e383ae7cd3250b" translate="yes" xml:space="preserve">
          <source>Checks if the given module is loaded and is an implementation of the given protocol.</source>
          <target state="translated">检查给定模块是否被加载,是否是给定协议的实现。</target>
        </trans-unit>
        <trans-unit id="5a8b4e75b4856943a7b23d0e4a8d665c881560a7" translate="yes" xml:space="preserve">
          <source>Checks if the given module is loaded and is protocol.</source>
          <target state="translated">检查给定模块是否已加载,是否符合协议。</target>
        </trans-unit>
        <trans-unit id="713890b386025a6cc8d7c4048850fb4a3ab6191f" translate="yes" xml:space="preserve">
          <source>Checks if the given version matches the specification.</source>
          <target state="translated">检查给定的版本是否符合规格。</target>
        </trans-unit>
        <trans-unit id="ea84db153f8c1bc78f779caa23e3b2b9bc11b2d3" translate="yes" xml:space="preserve">
          <source>Checks if the module defines a function or macro of the given &lt;code&gt;kind&lt;/code&gt;.</source>
          <target state="translated">检查模块是否定义了给定 &lt;code&gt;kind&lt;/code&gt; 的函数或宏。</target>
        </trans-unit>
        <trans-unit id="92dc6ac545a0ed645ba9886a5695677e1e6e7604" translate="yes" xml:space="preserve">
          <source>Checks if the module defines the given function or macro.</source>
          <target state="translated">检查该模块是否定义了指定的函数或宏。</target>
        </trans-unit>
        <trans-unit id="3bea1813950d347f459ed2da2d1886b8aa3f7f12" translate="yes" xml:space="preserve">
          <source>Checks if the system will halt or not at the end of ARGV processing.</source>
          <target state="translated">检查系统在ARGV处理结束时是否会停止。</target>
        </trans-unit>
        <trans-unit id="437313cfd325500ea732df919e03e5de51e3289c" translate="yes" xml:space="preserve">
          <source>Checks if the task should be run recursively for all sub-apps in umbrella projects.</source>
          <target state="translated">检查任务是否应该对伞形项目中的所有子应用进行递归运行。</target>
        </trans-unit>
        <trans-unit id="c8fc6d1821d83fee2fd98b4e29b2eab8ee0991ba" translate="yes" xml:space="preserve">
          <source>Checks if there is a message matching the given clauses in the current process mailbox.</source>
          <target state="translated">检查当前进程邮箱中是否有与给定子句匹配的消息。</target>
        </trans-unit>
        <trans-unit id="79beead16967435820b57e591ccbecace1d1c3ce" translate="yes" xml:space="preserve">
          <source>Checks if two keywords are equal.</source>
          <target state="translated">检查两个关键词是否相同。</target>
        </trans-unit>
        <trans-unit id="73ce1f2860aa5f7e1244cc43d53173af401fa1c5" translate="yes" xml:space="preserve">
          <source>Checks if two maps are equal.</source>
          <target state="translated">检查两个地图是否相等。</target>
        </trans-unit>
        <trans-unit id="616eb9024590388233fa19552a45060a809c58ab" translate="yes" xml:space="preserve">
          <source>Checks if two ranges are disjoint.</source>
          <target state="translated">检查两个范围是否不相交。</target>
        </trans-unit>
        <trans-unit id="fc3b8041f2a764e72f9a99d83ff9d7edebb760d0" translate="yes" xml:space="preserve">
          <source>Checks if two sets are equal.</source>
          <target state="translated">检查两组是否相等。</target>
        </trans-unit>
        <trans-unit id="41c4661f5df293e90c7e8468bec27fa2820e5985" translate="yes" xml:space="preserve">
          <source>Checks the &lt;a href=&quot;macro#t:t/0&quot;&gt;&lt;code&gt;Macro.t/0&lt;/code&gt;&lt;/a&gt; for the specification of a valid quoted expression.</source>
          <target state="translated">检查&lt;a href=&quot;macro#t:t/0&quot;&gt; &lt;code&gt;Macro.t/0&lt;/code&gt; &lt;/a&gt;是否指定有效的带引号的表达式。</target>
        </trans-unit>
        <trans-unit id="666ba3e423d21e52f9fd2dec6cb05f41ff960a45" translate="yes" xml:space="preserve">
          <source>Checks whether &lt;code&gt;string&lt;/code&gt; contains only valid characters.</source>
          <target state="translated">检查 &lt;code&gt;string&lt;/code&gt; 是否仅包含有效字符。</target>
        </trans-unit>
        <trans-unit id="f6e9c56ca18d9754f5af26417de2a328548838cb" translate="yes" xml:space="preserve">
          <source>Child specification</source>
          <target state="translated">子女规格</target>
        </trans-unit>
        <trans-unit id="c3d58e131073765a8fbc52191251a770441a66e5" translate="yes" xml:space="preserve">
          <source>Choose a &lt;a href=&quot;https://choosealicense.com/&quot;&gt;license&lt;/a&gt;. The most common licenses in the Elixir community are the &lt;a href=&quot;https://choosealicense.com/licenses/mit/&quot;&gt;MIT License&lt;/a&gt; and the &lt;a href=&quot;https://choosealicense.com/licenses/apache-2.0/&quot;&gt;Apache License 2.0&lt;/a&gt;. The latter is also the one used by Elixir itself.</source>
          <target state="translated">选择一个&lt;a href=&quot;https://choosealicense.com/&quot;&gt;许可证&lt;/a&gt;。Elixir社区中最常见的许可证是&lt;a href=&quot;https://choosealicense.com/licenses/mit/&quot;&gt;MIT许可证&lt;/a&gt;和&lt;a href=&quot;https://choosealicense.com/licenses/apache-2.0/&quot;&gt;Apache许可证2.0&lt;/a&gt;。后者也是Elixir本身使用的一种。</target>
        </trans-unit>
        <trans-unit id="d746003f831879f4d9c00718df18aa77507218d3" translate="yes" xml:space="preserve">
          <source>Choose a versioning schema. Elixir requires versions to be in the format &lt;code&gt;MAJOR.MINOR.PATCH&lt;/code&gt; but the meaning of those numbers is up to you. Most projects choose &lt;a href=&quot;https://semver.org/&quot;&gt;Semantic Versioning&lt;/a&gt;.</source>
          <target state="translated">选择一个版本控制架构。Elixir要求版本的格式为 &lt;code&gt;MAJOR.MINOR.PATCH&lt;/code&gt; ,但这些数字的含义由您决定。大多数项目都选择&lt;a href=&quot;https://semver.org/&quot;&gt;语义版本控制&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="1339b412671e2da05add576032c5b579ea52376a" translate="yes" xml:space="preserve">
          <source>Choosing requirement R6 automatically excludes requirements R4, R5 and R7.</source>
          <target state="translated">选择需求R6自动排除需求R4、R5和R7。</target>
        </trans-unit>
        <trans-unit id="ef47da406dcfe37fc12040175eeecabe9f974ccd" translate="yes" xml:space="preserve">
          <source>Chunks the &lt;code&gt;enum&lt;/code&gt; by buffering elements for which &lt;code&gt;fun&lt;/code&gt; returns the same value.</source>
          <target state="translated">块中的 &lt;code&gt;enum&lt;/code&gt; 由其中缓冲元件 &lt;code&gt;fun&lt;/code&gt; 返回相同的值。</target>
        </trans-unit>
        <trans-unit id="09c64d73a45df2fc80159ff7084b07b4e192ed3b" translate="yes" xml:space="preserve">
          <source>Chunks the &lt;code&gt;enum&lt;/code&gt; with fine grained control when every chunk is emitted.</source>
          <target state="translated">发出每个块时，用细粒度控制将 &lt;code&gt;enum&lt;/code&gt; 块。</target>
        </trans-unit>
        <trans-unit id="f3199a3f0afc069c8d87ccec0cb9e42069a3b81e" translate="yes" xml:space="preserve">
          <source>Chunks the &lt;code&gt;enumerable&lt;/code&gt; with fine grained control when every chunk is emitted.</source>
          <target state="translated">发出每个块时，用细粒度控制将 &lt;code&gt;enumerable&lt;/code&gt; 块化。</target>
        </trans-unit>
        <trans-unit id="5130e70e6af041df0b4f02efa5896c71601680f4" translate="yes" xml:space="preserve">
          <source>Clauses also allow extra conditions to be specified via guards:</source>
          <target state="translated">条款还允许通过卫士指定额外的条件。</target>
        </trans-unit>
        <trans-unit id="4d21fa3b66fd85a0eae22c5b7627920962b58e23" translate="yes" xml:space="preserve">
          <source>Clears all invoked tasks, allowing them to be reinvoked.</source>
          <target state="translated">清除所有被调用的任务,允许它们重新被调用。</target>
        </trans-unit>
        <trans-unit id="b5501033c685e38d6fb36033a17bad897fb206fd" translate="yes" xml:space="preserve">
          <source>Clears line.</source>
          <target state="translated">清除线。</target>
        </trans-unit>
        <trans-unit id="b408d2632b8e891b143869b00518580273c47949" translate="yes" xml:space="preserve">
          <source>Clears out all messages sent to the shell's inbox and prints them out.</source>
          <target state="translated">清除所有发送到shell收件箱的信息并打印出来。</target>
        </trans-unit>
        <trans-unit id="8eb38935be80ed9039da3a39b11aa4d0c24919e9" translate="yes" xml:space="preserve">
          <source>Clears screen.</source>
          <target state="translated">清除屏幕。</target>
        </trans-unit>
        <trans-unit id="f02f33c6f3cdd9389808e91d095c2309fcb9224a" translate="yes" xml:space="preserve">
          <source>Clears the console screen.</source>
          <target state="translated">清除控制台屏幕。</target>
        </trans-unit>
        <trans-unit id="827e22262ec4bb7ded4eeadb9fb3aa8dc2c35bd9" translate="yes" xml:space="preserve">
          <source>Clears the dependency for the current environment.</source>
          <target state="translated">清除当前环境的依赖关系。</target>
        </trans-unit>
        <trans-unit id="9c4f3063144d0a8e09522b56e2ecffbfbfc5efbc" translate="yes" xml:space="preserve">
          <source>Client / Server APIs</source>
          <target state="translated">客户端/服务器API</target>
        </trans-unit>
        <trans-unit id="ee4f79f897434114271f46c13449ce1869f416ea" translate="yes" xml:space="preserve">
          <source>Client/Server in agents</source>
          <target state="translated">代理商的客户/服务器</target>
        </trans-unit>
        <trans-unit id="182072135056cbdedcd87bbad9287c89ec82bc4d" translate="yes" xml:space="preserve">
          <source>Clients and Servers - Learn You Some Erlang for Great Good!</source>
          <target state="translated">客户端和服务器--学点Erlang,好处多多</target>
        </trans-unit>
        <trans-unit id="5321f8adc0182546df611269506b6bc3b81f34df" translate="yes" xml:space="preserve">
          <source>Closes the &lt;code&gt;port&lt;/code&gt;.</source>
          <target state="translated">关闭 &lt;code&gt;port&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="08b2eefe6b6ef7fc70e6d5b483e21b4922d35e18" translate="yes" xml:space="preserve">
          <source>Closes the file referenced by &lt;code&gt;io_device&lt;/code&gt;. It mostly returns &lt;code&gt;:ok&lt;/code&gt;, except for some severe errors such as out of memory.</source>
          <target state="translated">关闭 &lt;code&gt;io_device&lt;/code&gt; 引用的文件。它主要返回 &lt;code&gt;:ok&lt;/code&gt; ，除了一些严重的错误（例如内存不足）。</target>
        </trans-unit>
        <trans-unit id="adac69379a626c2436948a4ef1792c7d719ef929" translate="yes" xml:space="preserve">
          <source>Code</source>
          <target state="translated">Code</target>
        </trans-unit>
        <trans-unit id="e9b5273619e7c9d59651c9302451ddc5bba79f43" translate="yes" xml:space="preserve">
          <source>Code comments</source>
          <target state="translated">代码注释</target>
        </trans-unit>
        <trans-unit id="407e0b95bcfcf898b9202ae04357406ff3f10f14" translate="yes" xml:space="preserve">
          <source>Code comments are aimed at developers reading the code. They are useful for marking improvements, leaving notes (for example, why you had to resort to a workaround due to a bug in a library), and so forth. They are tied to the source code: you can completely rewrite a function and remove all existing code comments, and it will continue to behave the same, with no change to either its behaviour or its documentation.</source>
          <target state="translated">代码注释是针对阅读代码的开发人员的。它们对于标记改进、留下注释(例如,为什么你不得不因为一个库中的错误而采用变通方法)等等都很有用。它们与源代码紧密相连:你可以完全重写一个函数,并删除所有现有的代码注释,它将继续保持同样的行为,其行为或文档都不会改变。</target>
        </trans-unit>
        <trans-unit id="3d0c84971ed8c269fff1364330b0cb908605d37f" translate="yes" xml:space="preserve">
          <source>Code loading on the Erlang VM</source>
          <target state="translated">在Erlang虚拟机上加载代码</target>
        </trans-unit>
        <trans-unit id="ec7909dcc79311e3f0b6979c6dc4d55422c72b61" translate="yes" xml:space="preserve">
          <source>Code points and grapheme cluster</source>
          <target state="translated">代码点和词组</target>
        </trans-unit>
        <trans-unit id="1aa5924d1c20fa9f241eb4e1b21f78f5905bf0bd" translate="yes" xml:space="preserve">
          <source>Code preloading. The VM has two mechanisms for loading code: interactive and embedded. By default, it runs in the interactive mode which dynamically loads modules when they are used for the first time. The first time your application calls &lt;code&gt;Enum.map/2&lt;/code&gt;, the VM will find the &lt;code&gt;Enum&lt;/code&gt; module and load it. There&amp;rsquo;s a downside. When you start a new server in production, it may need to load many other modules, causing the first requests to have an unusual spike in response time. Releases run in embedded mode, which loads all available modules upfront, guaranteeing your system is ready to handle requests after booting.</source>
          <target state="translated">代码预加载。VM具有两种加载代码的机制：交互式和嵌入式。默认情况下，它以交互模式运行，该模式在首次使用模块时会动态加载模块。您的应用程序第一次调用 &lt;code&gt;Enum.map/2&lt;/code&gt; 时，VM会找到并 &lt;code&gt;Enum&lt;/code&gt; 模块。有一个缺点。在生产环境中启动新服务器时，它可能需要加载许多其他模块，从而导致第一个请求的响应时间异常增加。版本以嵌入式模式运行，该模式会预先加载所有可用模块，从而确保您的系统已准备好在引导后处理请求。</target>
        </trans-unit>
        <trans-unit id="9bbbc29ce6e01c5f883b21207d4df5d189f562e4" translate="yes" xml:space="preserve">
          <source>Code to be executed can also be passed inline with the &lt;code&gt;-e&lt;/code&gt; option:</source>
          <target state="translated">也可以使用 &lt;code&gt;-e&lt;/code&gt; 选项内联传递要执行的代码：</target>
        </trans-unit>
        <trans-unit id="8925ef3817c5078333f965ac2c4f8fd3dec413cd" translate="yes" xml:space="preserve">
          <source>Code.LoadError</source>
          <target state="translated">Code.LoadError</target>
        </trans-unit>
        <trans-unit id="2793300c10721db92c5d2235001b12020b992cc1" translate="yes" xml:space="preserve">
          <source>Code.LoadError &lt;small&gt;exception&lt;/small&gt;</source>
          <target state="translated">Code.LoadError &lt;small&gt;异常&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="87076accf13c08a15b009170f620b176a4faca61" translate="yes" xml:space="preserve">
          <source>Code.fetch_docs/1</source>
          <target state="translated">Code.fetch_docs/1</target>
        </trans-unit>
        <trans-unit id="faada4c03778897c42585b08b0a16dfdfe932b0b" translate="yes" xml:space="preserve">
          <source>Collapse any new lines and whitespace following this node, emitting up to &lt;code&gt;max&lt;/code&gt; new lines.</source>
          <target state="translated">收起该节点之后的所有新行和空白，最多散发 &lt;code&gt;max&lt;/code&gt; 新行。</target>
        </trans-unit>
        <trans-unit id="91af54365271b68093cc58f58877c5e5fbf80e5a" translate="yes" xml:space="preserve">
          <source>Collectable</source>
          <target state="translated">Collectable</target>
        </trans-unit>
        <trans-unit id="d80c0d2f5db391e72e90f3887949506276cfb40c" translate="yes" xml:space="preserve">
          <source>Collectable &lt;small&gt;protocol&lt;/small&gt;</source>
          <target state="translated">可收集的&lt;small&gt;协议&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="efccae93725e6f5a9afb9579e21ff7b906852fd3" translate="yes" xml:space="preserve">
          <source>Collectable.command (0)</source>
          <target state="translated">Collectable.command (0)</target>
        </trans-unit>
        <trans-unit id="8647850dbe0b4bbf11c6e320d7b6ef187ee2db5e" translate="yes" xml:space="preserve">
          <source>Collectable.into (1)</source>
          <target state="translated">可收集.进入 (1)</target>
        </trans-unit>
        <trans-unit id="3f6e96c64cc87200f83a7abe1d28f9e91920b4d4" translate="yes" xml:space="preserve">
          <source>Collectable.t (0)</source>
          <target state="translated">Collectable.t (0)</target>
        </trans-unit>
        <trans-unit id="88d5e4cac104ffc3f02dd54f2f0f1074fd33fd9b" translate="yes" xml:space="preserve">
          <source>Colors</source>
          <target state="translated">Colors</target>
        </trans-unit>
        <trans-unit id="96e74053cae538c3ecd9d29799c5c9b0fceb9d72" translate="yes" xml:space="preserve">
          <source>Colors a document if the &lt;code&gt;color_key&lt;/code&gt; has a color in the options.</source>
          <target state="translated">如果 &lt;code&gt;color_key&lt;/code&gt; 选项中有颜色，则为文档上色。</target>
        </trans-unit>
        <trans-unit id="6e3d3bf1961b8057b125fc05310e2099de8793b0" translate="yes" xml:space="preserve">
          <source>Command line options</source>
          <target state="translated">命令行选项</target>
        </trans-unit>
        <trans-unit id="f67e000a046a21604b2818c94a17c7ddab8e2442" translate="yes" xml:space="preserve">
          <source>Command-line options</source>
          <target state="translated">命令行选项</target>
        </trans-unit>
        <trans-unit id="e49bd0922826a05729c3e5928e11f174c484ef82" translate="yes" xml:space="preserve">
          <source>Community and other resources</source>
          <target state="translated">社区和其他资源</target>
        </trans-unit>
        <trans-unit id="351b39c3cb9ffe473609505c1caefaf73bfad121" translate="yes" xml:space="preserve">
          <source>Compared to keyword lists, we can already see two differences:</source>
          <target state="translated">与关键词列表相比,我们已经可以看到两个区别。</target>
        </trans-unit>
        <trans-unit id="3c4dd5827aee0b7bc5bce155cef1a41295eb21d9" translate="yes" xml:space="preserve">
          <source>Compared to the &lt;a href=&quot;#cp/3&quot;&gt;&lt;code&gt;cp/3&lt;/code&gt;&lt;/a&gt;, this function is more low-level, allowing a copy from device to device limited by a number of bytes. On the other hand, &lt;a href=&quot;#cp/3&quot;&gt;&lt;code&gt;cp/3&lt;/code&gt;&lt;/a&gt; performs more extensive checks on both source and destination and it also preserves the file mode after copy.</source>
          <target state="translated">与&lt;a href=&quot;#cp/3&quot;&gt; &lt;code&gt;cp/3&lt;/code&gt; &lt;/a&gt;相比，此功能更底层，允许从设备到设备的复制受到字节数的限制。另一方面，&lt;a href=&quot;#cp/3&quot;&gt; &lt;code&gt;cp/3&lt;/code&gt; &lt;/a&gt;对源和目标执行更广泛的检查，并且在复制后还保留文件模式。</target>
        </trans-unit>
        <trans-unit id="4396ebd5f93ea927d7f38fcc76884b2d876b8c70" translate="yes" xml:space="preserve">
          <source>Compares log levels.</source>
          <target state="translated">比较对数水平。</target>
        </trans-unit>
        <trans-unit id="2bddca0648b60655df6f9b1bec6eaa161ae7af3b" translate="yes" xml:space="preserve">
          <source>Compares two &lt;a href=&quot;#content&quot;&gt;&lt;code&gt;NaiveDateTime&lt;/code&gt;&lt;/a&gt; structs.</source>
          <target state="translated">比较两个&lt;a href=&quot;#content&quot;&gt; &lt;code&gt;NaiveDateTime&lt;/code&gt; &lt;/a&gt;结构。</target>
        </trans-unit>
        <trans-unit id="221fa096c94059dac8cb4762f358f4aa7a03c1ff" translate="yes" xml:space="preserve">
          <source>Compares two date structs.</source>
          <target state="translated">比较两个日期结构。</target>
        </trans-unit>
        <trans-unit id="6782100a1e3b01bfa6aced20d6a89d3df7b1b892" translate="yes" xml:space="preserve">
          <source>Compares two datetime structs.</source>
          <target state="translated">比较两个数据时间结构。</target>
        </trans-unit>
        <trans-unit id="34b17d0b1be43ba0ceacc7bc5ba086b336622a11" translate="yes" xml:space="preserve">
          <source>Compares two time structs.</source>
          <target state="translated">对两个时间结构进行比较。</target>
        </trans-unit>
        <trans-unit id="aed844f61a9c1a83201e59d846227cc4ca353638" translate="yes" xml:space="preserve">
          <source>Compares two versions.</source>
          <target state="translated">比较两个版本。</target>
        </trans-unit>
        <trans-unit id="7dca07167ef3fe34550bf0509fc6fb45f893e74a" translate="yes" xml:space="preserve">
          <source>Comparing dates</source>
          <target state="translated">比较日期</target>
        </trans-unit>
        <trans-unit id="fb5333c90cc8d2bfbc9b665af90800832ab0f856" translate="yes" xml:space="preserve">
          <source>Comparing naive date times</source>
          <target state="translated">比较天真的日期时间</target>
        </trans-unit>
        <trans-unit id="72158d6e3482e00cedae532226bd81727e66a164" translate="yes" xml:space="preserve">
          <source>Comparing times</source>
          <target state="translated">比较时间</target>
        </trans-unit>
        <trans-unit id="9461d4c9f916ad7df5538225ed552fb6e7e3284b" translate="yes" xml:space="preserve">
          <source>Comparison operators</source>
          <target state="translated">比较运算符</target>
        </trans-unit>
        <trans-unit id="15ab192596c8ba15e4efa62ffe722828f388b1e3" translate="yes" xml:space="preserve">
          <source>Comparison to &lt;a href=&quot;kernel.specialforms#quote/2&quot;&gt;&lt;code&gt;Kernel.SpecialForms.quote/2&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">与&lt;a href=&quot;kernel.specialforms#quote/2&quot;&gt; &lt;code&gt;Kernel.SpecialForms.quote/2&lt;/code&gt; 的&lt;/a&gt;比较</target>
        </trans-unit>
        <trans-unit id="b40ad652f0b8e3e0fb8ff30d06417bb28cb7e636" translate="yes" xml:space="preserve">
          <source>Comparison with binary pattern matching</source>
          <target state="translated">与二进制模式匹配的比较</target>
        </trans-unit>
        <trans-unit id="7ea963a047168a722cbd246ebd47586d05f01b19" translate="yes" xml:space="preserve">
          <source>Comparisons in Elixir using &lt;a href=&quot;kernel#==/2&quot;&gt;&lt;code&gt;==/2&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;kernel#%253E/2&quot;&gt;&lt;code&gt;&amp;gt;/2&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;kernel#%253C/2&quot;&gt;&lt;code&gt;&amp;lt;/2&lt;/code&gt;&lt;/a&gt; and similar are structural and based on the &lt;a href=&quot;#content&quot;&gt;&lt;code&gt;Date&lt;/code&gt;&lt;/a&gt; struct fields. For proper comparison between dates, use the &lt;a href=&quot;#compare/2&quot;&gt;&lt;code&gt;compare/2&lt;/code&gt;&lt;/a&gt; function.</source>
          <target state="translated">使用&lt;a href=&quot;kernel#==/2&quot;&gt; &lt;code&gt;==/2&lt;/code&gt; &lt;/a&gt;，&lt;a href=&quot;kernel#%253E/2&quot;&gt; &lt;code&gt;&amp;gt;/2&lt;/code&gt; &lt;/a&gt;，&lt;a href=&quot;kernel#%253C/2&quot;&gt; &lt;code&gt;&amp;lt;/2&lt;/code&gt; &lt;/a&gt;和类似的方法在Elixir中进行比较是结构性的，并且基于&lt;a href=&quot;#content&quot;&gt; &lt;code&gt;Date&lt;/code&gt; &lt;/a&gt;结构域。为了正确地比较日期，请使用&lt;a href=&quot;#compare/2&quot;&gt; &lt;code&gt;compare/2&lt;/code&gt; &lt;/a&gt;函数。</target>
        </trans-unit>
        <trans-unit id="223f508a513f824a4ac2feecf7af48fa276819c5" translate="yes" xml:space="preserve">
          <source>Comparisons in Elixir using &lt;a href=&quot;kernel#==/2&quot;&gt;&lt;code&gt;==/2&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;kernel#%253E/2&quot;&gt;&lt;code&gt;&amp;gt;/2&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;kernel#%253C/2&quot;&gt;&lt;code&gt;&amp;lt;/2&lt;/code&gt;&lt;/a&gt; and similar are structural and based on the &lt;a href=&quot;#content&quot;&gt;&lt;code&gt;NaiveDateTime&lt;/code&gt;&lt;/a&gt; struct fields. For proper comparison between naive datetimes, use the &lt;a href=&quot;#compare/2&quot;&gt;&lt;code&gt;compare/2&lt;/code&gt;&lt;/a&gt; function.</source>
          <target state="translated">使用&lt;a href=&quot;kernel#==/2&quot;&gt; &lt;code&gt;==/2&lt;/code&gt; &lt;/a&gt;，&lt;a href=&quot;kernel#%253E/2&quot;&gt; &lt;code&gt;&amp;gt;/2&lt;/code&gt; &lt;/a&gt;，&lt;a href=&quot;kernel#%253C/2&quot;&gt; &lt;code&gt;&amp;lt;/2&lt;/code&gt; &lt;/a&gt;和类似的方法在Elixir中进行比较是结构性的，并且基于&lt;a href=&quot;#content&quot;&gt; &lt;code&gt;NaiveDateTime&lt;/code&gt; &lt;/a&gt;结构域。为了在原始日期时间之间进行正确的比较，请使用&lt;a href=&quot;#compare/2&quot;&gt; &lt;code&gt;compare/2&lt;/code&gt; &lt;/a&gt;函数。</target>
        </trans-unit>
        <trans-unit id="0bfda4dfed8330e94d2d4752354274648b44ba3b" translate="yes" xml:space="preserve">
          <source>Comparisons in Elixir using &lt;a href=&quot;kernel#==/2&quot;&gt;&lt;code&gt;==/2&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;kernel#%253E/2&quot;&gt;&lt;code&gt;&amp;gt;/2&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;kernel#%253C/2&quot;&gt;&lt;code&gt;&amp;lt;/2&lt;/code&gt;&lt;/a&gt; and similar are structural and based on the &lt;a href=&quot;#content&quot;&gt;&lt;code&gt;Time&lt;/code&gt;&lt;/a&gt; struct fields. For proper comparison between times, use the &lt;a href=&quot;#compare/2&quot;&gt;&lt;code&gt;compare/2&lt;/code&gt;&lt;/a&gt; function.</source>
          <target state="translated">使用&lt;a href=&quot;kernel#==/2&quot;&gt; &lt;code&gt;==/2&lt;/code&gt; &lt;/a&gt;，&lt;a href=&quot;kernel#%253E/2&quot;&gt; &lt;code&gt;&amp;gt;/2&lt;/code&gt; &lt;/a&gt;，&lt;a href=&quot;kernel#%253C/2&quot;&gt; &lt;code&gt;&amp;lt;/2&lt;/code&gt; &lt;/a&gt;和类似的方法在Elixir中进行比较是基于&lt;a href=&quot;#content&quot;&gt; &lt;code&gt;Time&lt;/code&gt; &lt;/a&gt;结构字段的结构化比较。为了正确地比较时间，请使用&lt;a href=&quot;#compare/2&quot;&gt; &lt;code&gt;compare/2&lt;/code&gt; &lt;/a&gt;函数。</target>
        </trans-unit>
        <trans-unit id="5d60c7dd62fdcf4abcc61a6a7d335b7117968b4d" translate="yes" xml:space="preserve">
          <source>Compatibility</source>
          <target state="translated">Compatibility</target>
        </trans-unit>
        <trans-unit id="c4a94cda45edff3876fed45dbc4c3cb4ce79baa3" translate="yes" xml:space="preserve">
          <source>Compatibility and Deprecations</source>
          <target state="translated">兼容性和废弃</target>
        </trans-unit>
        <trans-unit id="f42d7b50ca233e04dc35e582f6b9af961f23c004" translate="yes" xml:space="preserve">
          <source>Compatibility between Elixir and Erlang/OTP</source>
          <target state="translated">Elixir和Erlang/OTP之间的兼容性。</target>
        </trans-unit>
        <trans-unit id="8f74e2722c1f84edbd83275bae1006369ac7ea9d" translate="yes" xml:space="preserve">
          <source>Compatibility between non-major Elixir versions</source>
          <target state="translated">非主要Elixir版本之间的兼容性。</target>
        </trans-unit>
        <trans-unit id="1684199ac60e5587c6ced4c1cbb54268a896b641" translate="yes" xml:space="preserve">
          <source>Compatibility with OTP behaviours</source>
          <target state="translated">与OTP行为的兼容性</target>
        </trans-unit>
        <trans-unit id="aad755de429541e8ec1db943cf4102247f2bb5d3" translate="yes" xml:space="preserve">
          <source>Compilation</source>
          <target state="translated">Compilation</target>
        </trans-unit>
        <trans-unit id="3e7a794cfc66ce992a7ff5365bcfa7b7bd38cc57" translate="yes" xml:space="preserve">
          <source>Compilation environment macros (&lt;a href=&quot;kernel.specialforms#__CALLER__/0&quot;&gt;&lt;code&gt;__CALLER__/0&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;kernel.specialforms#__DIR__/0&quot;&gt;&lt;code&gt;__DIR__/0&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;kernel.specialforms#__ENV__/0&quot;&gt;&lt;code&gt;__ENV__/0&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;kernel.specialforms#__MODULE__/0&quot;&gt;&lt;code&gt;__MODULE__/0&lt;/code&gt;&lt;/a&gt;)</source>
          <target state="translated">编译环境宏（&lt;a href=&quot;kernel.specialforms#__CALLER__/0&quot;&gt; &lt;code&gt;__CALLER__/0&lt;/code&gt; &lt;/a&gt;，&lt;a href=&quot;kernel.specialforms#__DIR__/0&quot;&gt; &lt;code&gt;__DIR__/0&lt;/code&gt; &lt;/a&gt;，&lt;a href=&quot;kernel.specialforms#__ENV__/0&quot;&gt; &lt;code&gt;__ENV__/0&lt;/code&gt; &lt;/a&gt;和&lt;a href=&quot;kernel.specialforms#__MODULE__/0&quot;&gt; &lt;code&gt;__MODULE__/0&lt;/code&gt; &lt;/a&gt;）</target>
        </trans-unit>
        <trans-unit id="f657a919e86d30d7dc49c2990c4badfef6d2ae9b" translate="yes" xml:space="preserve">
          <source>Compile a string (&lt;code&gt;compile_string&lt;/code&gt;) or a file (&lt;code&gt;compile_file&lt;/code&gt;) into Elixir syntax tree. This is the API used by both functions above and is available to you if you want to provide your own ways of handling the compiled template.</source>
          <target state="translated">将字符串（ &lt;code&gt;compile_string&lt;/code&gt; ）或文件（ &lt;code&gt;compile_file&lt;/code&gt; ）编译为Elixir语法树。这是以上两个函数使用的API，如果您想提供自己的方式来处理已编译的模板，则可以使用该API。</target>
        </trans-unit>
        <trans-unit id="99d6c95e99f15d2782415966b874bf7ac7c480ec" translate="yes" xml:space="preserve">
          <source>Compile callbacks</source>
          <target state="translated">编译回调</target>
        </trans-unit>
        <trans-unit id="b9b345cfc373ededcbc96ee76cf173b0c38e656e" translate="yes" xml:space="preserve">
          <source>Compile options</source>
          <target state="translated">编译选项</target>
        </trans-unit>
        <trans-unit id="a4eb1e8f716939c9fd4a5a9009f8576e365876fc" translate="yes" xml:space="preserve">
          <source>CompileError</source>
          <target state="translated">CompileError</target>
        </trans-unit>
        <trans-unit id="f54ad90826f1166c75feaaf8212b1ffed6e2b140" translate="yes" xml:space="preserve">
          <source>CompileError &lt;small&gt;exception&lt;/small&gt;</source>
          <target state="translated">CompileError &lt;small&gt;异常&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="d3b37411d97ddaa5a4d151b734a15fb76e5fca29" translate="yes" xml:space="preserve">
          <source>Compiler front-end: improvements may be done to the compiler, introducing new warnings for ambiguous modes and providing more detailed error messages. Those can lead to compilation errors (when running with &lt;code&gt;--warning-as-errors&lt;/code&gt;) or tooling failures when asserting on specific error messages (although one should avoid such). We reserve the right to do such improvements.</source>
          <target state="translated">编译器前端：可以对编译器进行改进，为模棱两可的模式引入新的警告并提供更详细的错误消息。当断言特定错误消息时， &lt;code&gt;--warning-as-errors&lt;/code&gt; 可能导致编译错误（使用--warning-as-errors运行时）或工具失败（尽管应该避免这种情况）。我们保留进行此类改进的权利。</target>
        </trans-unit>
        <trans-unit id="e1be83a7756a5bb6c9b11d838efbdc2b010f2edd" translate="yes" xml:space="preserve">
          <source>Compilers</source>
          <target state="translated">Compilers</target>
        </trans-unit>
        <trans-unit id="6a97aec4e0f175d98451227716629a5e06e9daa5" translate="yes" xml:space="preserve">
          <source>Compiles Elixir source files.</source>
          <target state="translated">编译Elixir源文件。</target>
        </trans-unit>
        <trans-unit id="bec1c5e79e401a7466a08ba63018054233105899" translate="yes" xml:space="preserve">
          <source>Compiles Erlang source files.</source>
          <target state="translated">编译Erlang源文件。</target>
        </trans-unit>
        <trans-unit id="1f5b4ba2582167bc9dbc03751202b445126c211d" translate="yes" xml:space="preserve">
          <source>Compiles Yecc source files.</source>
          <target state="translated">编译Yecc源文件。</target>
        </trans-unit>
        <trans-unit id="0555a5fff463fa1be9a0f36abf14a298f2675629" translate="yes" xml:space="preserve">
          <source>Compiles a format string into a data structure that &lt;a href=&quot;#format/5&quot;&gt;&lt;code&gt;format/5&lt;/code&gt;&lt;/a&gt; can handle.</source>
          <target state="translated">将格式字符串编译为format &lt;a href=&quot;#format/5&quot;&gt; &lt;code&gt;format/5&lt;/code&gt; &lt;/a&gt;可以处理的数据结构。</target>
        </trans-unit>
        <trans-unit id="12d2667a1f41abc65eebfb8aca2ce483662f6d90" translate="yes" xml:space="preserve">
          <source>Compiles a requirement to its internal representation with &lt;a href=&quot;http://www.erlang.org/doc/man/ets.html#match_spec_compile-1&quot;&gt;&lt;code&gt;:ets.match_spec_compile/1&lt;/code&gt;&lt;/a&gt; for faster matching.</source>
          <target state="translated">使用&lt;a href=&quot;http://www.erlang.org/doc/man/ets.html#match_spec_compile-1&quot;&gt; &lt;code&gt;:ets.match_spec_compile/1&lt;/code&gt; &lt;/a&gt;将需求编译为内部表示，以加快匹配速度。</target>
        </trans-unit>
        <trans-unit id="f2cf002d6de77f196a3161337e5d01f628fa219c" translate="yes" xml:space="preserve">
          <source>Compiles the given file.</source>
          <target state="translated">编译给定文件。</target>
        </trans-unit>
        <trans-unit id="fe5d7e4a131dbe8c58cc4a04762428daf778a3f1" translate="yes" xml:space="preserve">
          <source>Compiles the given files.</source>
          <target state="translated">编译给定文件。</target>
        </trans-unit>
        <trans-unit id="a5664f86acdcfb847dd8e5c6fc454b47248e9f79" translate="yes" xml:space="preserve">
          <source>Compiles the given project.</source>
          <target state="translated">编译给定项目。</target>
        </trans-unit>
        <trans-unit id="ae26c039cef510e8b34ba14faf19222f446f7af5" translate="yes" xml:space="preserve">
          <source>Compiles the given string.</source>
          <target state="translated">编译给定的字符串。</target>
        </trans-unit>
        <trans-unit id="917e43c9d373a6e4c3419110429f241ad1a5803b" translate="yes" xml:space="preserve">
          <source>Compiles the quoted expression.</source>
          <target state="translated">编制引用的表达式。</target>
        </trans-unit>
        <trans-unit id="c23a1bc10af7479e16b7d2e120610e8416f989f4" translate="yes" xml:space="preserve">
          <source>Compiles the regular expression and raises &lt;a href=&quot;regex.compileerror&quot;&gt;&lt;code&gt;Regex.CompileError&lt;/code&gt;&lt;/a&gt; in case of errors.</source>
          <target state="translated">编译正则表达式，并在出现错误的情况下引发&lt;a href=&quot;regex.compileerror&quot;&gt; &lt;code&gt;Regex.CompileError&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="1e49c3744a3522b82c9288a53a5c637df4b01d82" translate="yes" xml:space="preserve">
          <source>Compiles the regular expression.</source>
          <target state="translated">编译正则表达式。</target>
        </trans-unit>
        <trans-unit id="ed2ff637c10fb1755e29c0eb2376d67d8e5a91b4" translate="yes" xml:space="preserve">
          <source>Comprehensions</source>
          <target state="translated">Comprehensions</target>
        </trans-unit>
        <trans-unit id="1310c30df240bc12f3591d11936eb9f7e6967dd7" translate="yes" xml:space="preserve">
          <source>Comprehensions allow you to quickly build a data structure from an enumerable or a bitstring.</source>
          <target state="translated">理解允许你从一个枚举或一个位串快速建立一个数据结构。</target>
        </trans-unit>
        <trans-unit id="dfe3133c5fadf89f0c4e372dfb9d3554729a6dc3" translate="yes" xml:space="preserve">
          <source>Comprehensions discard all elements for which the filter expression returns &lt;code&gt;false&lt;/code&gt; or &lt;code&gt;nil&lt;/code&gt;; all other values are selected.</source>
          <target state="translated">理解会丢弃过滤器表达式为其返回 &lt;code&gt;false&lt;/code&gt; 或 &lt;code&gt;nil&lt;/code&gt; 的所有元素；选择所有其他值。</target>
        </trans-unit>
        <trans-unit id="5b77c42be234abc320cd3adb104af1c94a8cbc7a" translate="yes" xml:space="preserve">
          <source>Comprehensions generally provide a much more concise representation than using the equivalent functions from the &lt;code&gt;Enum&lt;/code&gt; and &lt;code&gt;Stream&lt;/code&gt; modules. Furthermore, comprehensions also allow multiple generators and filters to be given. Here is an example that receives a list of directories and gets the size of each file in those directories:</source>
          <target state="translated">与使用 &lt;code&gt;Enum&lt;/code&gt; 和 &lt;code&gt;Stream&lt;/code&gt; 模块中的等效功能相比，综合通常提供更简洁的表示。此外，理解还允许给出多个生成器和滤波器。这是一个示例，该示例接收目录列表并获取这些目录中每个文件的大小：</target>
        </trans-unit>
        <trans-unit id="2a2326284774c69e81d063232192764ec8e7d87e" translate="yes" xml:space="preserve">
          <source>Computes the Jaro distance (similarity) between two strings.</source>
          <target state="translated">计算两个字符串之间的Jaro距离(相似度)。</target>
        </trans-unit>
        <trans-unit id="d58e9fd05f3363b68db438a625d16b10d703140f" translate="yes" xml:space="preserve">
          <source>Computes the bag distance between two strings.</source>
          <target state="translated">计算两根弦之间的袋距。</target>
        </trans-unit>
        <trans-unit id="7e5fa6baea52e5444c5ab52e6620ff1a5e2eaa64" translate="yes" xml:space="preserve">
          <source>Computes the modulo remainder of an integer division.</source>
          <target state="translated">计算整数除法的余数。</target>
        </trans-unit>
        <trans-unit id="1695adb6bedb251b98b5d02b3e294f80f6533ad8" translate="yes" xml:space="preserve">
          <source>Computes the remainder of an integer division.</source>
          <target state="translated">计算整数除法的余数。</target>
        </trans-unit>
        <trans-unit id="ca3e5ac4bfa4005f9e7c85636c6e23330025a032" translate="yes" xml:space="preserve">
          <source>Concatenates a list of aliases and returns a new alias only if the alias was already referenced.</source>
          <target state="translated">连接一个别名列表,只有在别名已经被引用的情况下才返回一个新的别名。</target>
        </trans-unit>
        <trans-unit id="79fdba952b89833ad044a47f954b778d9ac3754b" translate="yes" xml:space="preserve">
          <source>Concatenates a list of aliases and returns a new alias.</source>
          <target state="translated">连接一个别名列表并返回一个新的别名。</target>
        </trans-unit>
        <trans-unit id="7bfc55b10bbbaaa1172955e020d089c69f73a61a" translate="yes" xml:space="preserve">
          <source>Concatenates a list of documents returning a new document.</source>
          <target state="translated">连接一个文档列表,返回一个新文档。</target>
        </trans-unit>
        <trans-unit id="5b0b906d9626f876d63bb926f568d768133479d8" translate="yes" xml:space="preserve">
          <source>Concatenates a proper list and a term, returning a list.</source>
          <target state="translated">将一个合适的列表和一个术语连接起来,返回一个列表。</target>
        </trans-unit>
        <trans-unit id="602a2270158b7a64f1f9b30928698846da471ed5" translate="yes" xml:space="preserve">
          <source>Concatenates the enumerable on the &lt;code&gt;right&lt;/code&gt; with the enumerable on the &lt;code&gt;left&lt;/code&gt;.</source>
          <target state="translated">将 &lt;code&gt;right&lt;/code&gt; 的枚举与 &lt;code&gt;left&lt;/code&gt; 的枚举连接起来。</target>
        </trans-unit>
        <trans-unit id="17b31e6fe3e3ae89aaf0d1779930dec62c20d4ce" translate="yes" xml:space="preserve">
          <source>Concatenates two aliases and returns a new alias only if the alias was already referenced.</source>
          <target state="translated">连接两个别名,只有在别名已经被引用的情况下才返回一个新的别名。</target>
        </trans-unit>
        <trans-unit id="386735a5ef2326d96732530103099d26861648c4" translate="yes" xml:space="preserve">
          <source>Concatenates two aliases and returns a new alias.</source>
          <target state="translated">连接两个别名并返回一个新的别名。</target>
        </trans-unit>
        <trans-unit id="d9fca663b0cde911b53f590809a91e7d824fbc80" translate="yes" xml:space="preserve">
          <source>Concatenates two binaries.</source>
          <target state="translated">将两个二进制连接起来。</target>
        </trans-unit>
        <trans-unit id="0f2b5970a12dbb01ecd860bde29bb4c55faec263" translate="yes" xml:space="preserve">
          <source>Concatenates two document entities returning a new document.</source>
          <target state="translated">将两个文档实体连接起来,返回一个新文档。</target>
        </trans-unit>
        <trans-unit id="f8bc4ede142b49230daa5c308a51253e61b3acb4" translate="yes" xml:space="preserve">
          <source>Conceal. Not widely supported.</source>
          <target state="translated">隐蔽。未得到广泛支持。</target>
        </trans-unit>
        <trans-unit id="464963b89dcc6466af50e87b1ef88a9571abb6de" translate="yes" xml:space="preserve">
          <source>Concurrency and distribution</source>
          <target state="translated">并发和分配</target>
        </trans-unit>
        <trans-unit id="7cd453bb0f5341af9292ceae5a5c3162881bf52e" translate="yes" xml:space="preserve">
          <source>CondClauseError</source>
          <target state="translated">CondClauseError</target>
        </trans-unit>
        <trans-unit id="ee1067fabb817f815f6d1ba09137fd2a6703386f" translate="yes" xml:space="preserve">
          <source>CondClauseError &lt;small&gt;exception&lt;/small&gt;</source>
          <target state="translated">CondClauseError &lt;small&gt;异常&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="8851142da56fd885ce668a165b33fee7003e858d" translate="yes" xml:space="preserve">
          <source>Config</source>
          <target state="translated">Config</target>
        </trans-unit>
        <trans-unit id="be61fc18c63c243175cee5a20cbdc6209fe104d3" translate="yes" xml:space="preserve">
          <source>Config providers are typically used during releases to load external configuration while the system boots. This is done by starting the VM with the minimum amount of applications running, then invoking all of the providers, and then restarting the system. This requires a mutable configuration file on disk, as the results of the providers are written to the file system. For more information on runtime configuration, see &lt;a href=&quot;https://hexdocs.pm/mix/Mix.Tasks.Release.html&quot;&gt;&lt;code&gt;mix release&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">通常在发行版中使用配置提供程序在系统引导时加载外部配置。通过在运行最少应用程序的情况下启动VM，然后调用所有提供程序，然后重新启动系统来完成此操作。由于将提供程序的结果写入文件系统，因此这需要磁盘上的可变配置文件。有关运行时配置的更多信息，请参见&lt;a href=&quot;https://hexdocs.pm/mix/Mix.Tasks.Release.html&quot;&gt; &lt;code&gt;mix release&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="5fcd3c95e9636c8e66396624d0366fb4e126a6fc" translate="yes" xml:space="preserve">
          <source>Config.Provider</source>
          <target state="translated">Config.Provider</target>
        </trans-unit>
        <trans-unit id="44f0cb9ea6de4ecc8ddcc1c6279200cfa4b1dd4c" translate="yes" xml:space="preserve">
          <source>Config.Provider &lt;small&gt;behaviour&lt;/small&gt;</source>
          <target state="translated">Config.Provider &lt;small&gt;行为&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="9ada04c4b7a0b493079259a2091c99186d5d2a8d" translate="yes" xml:space="preserve">
          <source>Config.Reader</source>
          <target state="translated">Config.Reader</target>
        </trans-unit>
        <trans-unit id="754164850f38c1ecdaf6b8ed894cb192bc36c5f4" translate="yes" xml:space="preserve">
          <source>Configuration</source>
          <target state="translated">Configuration</target>
        </trans-unit>
        <trans-unit id="933619b0b6242cbc74cd30c08b880cf1aadc921f" translate="yes" xml:space="preserve">
          <source>Configuration and customization. Releases give developers fine grained control over system configuration and the VM flags used to start the system.</source>
          <target state="translated">配置和定制。发布版本让开发人员可以对系统配置和用于启动系统的虚拟机标志进行细粒度控制。</target>
        </trans-unit>
        <trans-unit id="6d11d00d9a62190558bb928d4cffeb8d72a5cbfa" translate="yes" xml:space="preserve">
          <source>Configuration and releases</source>
          <target state="translated">配置和发布</target>
        </trans-unit>
        <trans-unit id="304a1684e3b52f4fb102a5314a519b8e7696a2ea" translate="yes" xml:space="preserve">
          <source>Configuration files provide a mechanism for us to configure the environment of any application. Such configuration is done by the &lt;code&gt;config/config.exs&lt;/code&gt; file.</source>
          <target state="translated">配置文件为我们提供了一种配置任何应用程序环境的机制。此类配置由 &lt;code&gt;config/config.exs&lt;/code&gt; 文件完成。</target>
        </trans-unit>
        <trans-unit id="afb00b3a5bb013d5e19cf2138a2e20f7d4494b4e" translate="yes" xml:space="preserve">
          <source>Configuration for most built-in data types are supported: &lt;code&gt;:atom&lt;/code&gt;, &lt;code&gt;:string&lt;/code&gt;, &lt;code&gt;:binary&lt;/code&gt;, &lt;code&gt;:list&lt;/code&gt;, &lt;code&gt;:number&lt;/code&gt;, &lt;code&gt;:boolean&lt;/code&gt;, &lt;code&gt;:nil&lt;/code&gt;, etc. The default is:</source>
          <target state="translated">支持大多数内置数据类型的配置 &lt;code&gt;:atom&lt;/code&gt; ， &lt;code&gt;:string&lt;/code&gt; ， &lt;code&gt;:binary&lt;/code&gt; ， &lt;code&gt;:list&lt;/code&gt; ， &lt;code&gt;:number&lt;/code&gt; ， &lt;code&gt;:boolean&lt;/code&gt; ， &lt;code&gt;:nil&lt;/code&gt; 等。默认值为：</target>
        </trans-unit>
        <trans-unit id="35d5425d04246c4803ef5cf5e8d025d35dd3c648" translate="yes" xml:space="preserve">
          <source>Configures ExUnit.</source>
          <target state="translated">配置ExUnit。</target>
        </trans-unit>
        <trans-unit id="f86ca4f2497f02577bc94a87775d8f36d626720d" translate="yes" xml:space="preserve">
          <source>Configures IEx.</source>
          <target state="translated">配置IEx。</target>
        </trans-unit>
        <trans-unit id="39aba670500b643a046792d3d15815451b7382dd" translate="yes" xml:space="preserve">
          <source>Configures the given &lt;code&gt;key&lt;/code&gt; for the given &lt;code&gt;root_key&lt;/code&gt;.</source>
          <target state="translated">为给定的 &lt;code&gt;root_key&lt;/code&gt; 配置给定的 &lt;code&gt;key&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="dab905aea9ce47c3e8e30630f4f6fdec7eafa472" translate="yes" xml:space="preserve">
          <source>Configures the given &lt;code&gt;root_key&lt;/code&gt;.</source>
          <target state="translated">配置给定的 &lt;code&gt;root_key&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="931f9f9842f89caae33a5520f0561b2c38a9e395" translate="yes" xml:space="preserve">
          <source>Configures the given backend.</source>
          <target state="translated">配置指定的后台。</target>
        </trans-unit>
        <trans-unit id="f7ca95cd7d184c9f425b7a30f220923f9cfac8a1" translate="yes" xml:space="preserve">
          <source>Configures the logger.</source>
          <target state="translated">配置记录仪。</target>
        </trans-unit>
        <trans-unit id="2d88aa7d5d042401a88814d3d2e345c7830e2a8f" translate="yes" xml:space="preserve">
          <source>Configuring releases</source>
          <target state="translated">配置版本</target>
        </trans-unit>
        <trans-unit id="7297dda9d64e28b97aa3fde0b781b550726677f6" translate="yes" xml:space="preserve">
          <source>Configuring the shell</source>
          <target state="translated">配置外壳</target>
        </trans-unit>
        <trans-unit id="480ea81ed58de6247a0cec11d6c975007208ce9e" translate="yes" xml:space="preserve">
          <source>Connecting an Elixir shell to a remote node without Elixir is &lt;strong&gt;not&lt;/strong&gt; supported.</source>
          <target state="translated">&lt;strong&gt;不&lt;/strong&gt;支持将Elixir Shell连接到没有Elixir的远程节点。</target>
        </trans-unit>
        <trans-unit id="c0f664a4d1ec0a9ec3a687038c62cd4690e15c63" translate="yes" xml:space="preserve">
          <source>Consider a new application &lt;code&gt;:my_app&lt;/code&gt;. &lt;code&gt;:my_app&lt;/code&gt; contains a database engine which supports a pool of databases. The database engine needs to know the configuration for each of those databases, and that configuration is supplied by key-value pairs in environment of &lt;code&gt;:my_app&lt;/code&gt;.</source>
          <target state="translated">考虑一个新的应用程序 &lt;code&gt;:my_app&lt;/code&gt; 。 &lt;code&gt;:my_app&lt;/code&gt; 包含一个支持数据库池的数据库引擎。数据库引擎需要知道每个数据库的配置，并且该配置由 &lt;code&gt;:my_app&lt;/code&gt; 环境中的键值对提供。</target>
        </trans-unit>
        <trans-unit id="d7f69e049d11cfea430a186ac01ffac1bca0cfc8" translate="yes" xml:space="preserve">
          <source>Consider the following example:</source>
          <target state="translated">请看下面的例子。</target>
        </trans-unit>
        <trans-unit id="3d212d623893215a5c1ab44a4dc949acff16e8f9" translate="yes" xml:space="preserve">
          <source>Consider the implementation below:</source>
          <target state="translated">考虑下面的实施。</target>
        </trans-unit>
        <trans-unit id="7a7b310d2495e484fea1ff460e80d2fdad0204cf" translate="yes" xml:space="preserve">
          <source>Consider these two examples:</source>
          <target state="translated">请看这两个例子。</target>
        </trans-unit>
        <trans-unit id="2b2d8a64936d851f0d73e6380decdfbb4b3fdb12" translate="yes" xml:space="preserve">
          <source>Consider using &lt;a href=&quot;task.supervisor#async_stream/6&quot;&gt;&lt;code&gt;Task.Supervisor.async_stream/6&lt;/code&gt;&lt;/a&gt; to start tasks under a supervisor. If you find yourself trapping exits to handle exits inside the async stream, consider using &lt;a href=&quot;task.supervisor#async_stream_nolink/6&quot;&gt;&lt;code&gt;Task.Supervisor.async_stream_nolink/6&lt;/code&gt;&lt;/a&gt; to start tasks that are not linked to the calling process.</source>
          <target state="translated">考虑使用&lt;a href=&quot;task.supervisor#async_stream/6&quot;&gt; &lt;code&gt;Task.Supervisor.async_stream/6&lt;/code&gt; &lt;/a&gt;在主管下启动任务。如果发现自己陷在出口中以处理异步流中的出口，请考虑使用&lt;a href=&quot;task.supervisor#async_stream_nolink/6&quot;&gt; &lt;code&gt;Task.Supervisor.async_stream_nolink/6&lt;/code&gt; &lt;/a&gt;来启动未链接到调用进程的任务。</target>
        </trans-unit>
        <trans-unit id="6430b20394a2b43032f0df564046ae9e5ed61c04" translate="yes" xml:space="preserve">
          <source>Considers the next break as fit.</source>
          <target state="translated">认为下一次休息是合适的。</target>
        </trans-unit>
        <trans-unit id="39cbdd33812e96a59909005452966168ffe901bd" translate="yes" xml:space="preserve">
          <source>Console backend</source>
          <target state="translated">控制台后台</target>
        </trans-unit>
        <trans-unit id="81ff41187d9a55a0a0d410b37e2a03ec4014258e" translate="yes" xml:space="preserve">
          <source>Consolidation</source>
          <target state="translated">Consolidation</target>
        </trans-unit>
        <trans-unit id="781883259f97b814dbeb10bd2aa9654bde39c92f" translate="yes" xml:space="preserve">
          <source>Consolidation happens by changing the protocol &lt;code&gt;impl_for&lt;/code&gt; in the abstract format to have fast lookup rules. Usually the list of implementations to use during consolidation are retrieved with the help of &lt;a href=&quot;#extract_impls/2&quot;&gt;&lt;code&gt;extract_impls/2&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">通过将抽象格式的协议 &lt;code&gt;impl_for&lt;/code&gt; 更改为具有快速查找规则，可以进行合并。通常，合并过程中要使用的实现列表是通过&lt;a href=&quot;#extract_impls/2&quot;&gt; &lt;code&gt;extract_impls/2&lt;/code&gt; &lt;/a&gt;来检索的。</target>
        </trans-unit>
        <trans-unit id="ea5ee0077ba2637f156ee60a85375b364c21ab7b" translate="yes" xml:space="preserve">
          <source>Constructs such as &lt;code&gt;unless/2&lt;/code&gt;, &lt;code&gt;defmacro/2&lt;/code&gt;, &lt;code&gt;def/2&lt;/code&gt;, &lt;code&gt;defprotocol/2&lt;/code&gt;, and many others used throughout this getting started guide are implemented in pure Elixir, often as a macro. This means that the constructs being used to build the language can be used by developers to extend the language to the domains they are working on.</source>
          <target state="translated">&lt;code&gt;unless/2&lt;/code&gt; 在本入门指南中使用过，否则除非构造/ 2， &lt;code&gt;defmacro/2&lt;/code&gt; / 2，defmacro / 2， &lt;code&gt;def/2&lt;/code&gt; ， &lt;code&gt;defprotocol/2&lt;/code&gt; ，以及其他许多构造都是在纯Elixir中实现的，通常作为宏来实现。这意味着开发人员可以使用用于构建语言的结构将语言扩展到他们正在使用的域。</target>
        </trans-unit>
        <trans-unit id="f06815eccc7951b7a3293862d553938e6057b7dd" translate="yes" xml:space="preserve">
          <source>Consult &lt;a href=&quot;https://hexdocs.pm/elixir/guards.html&quot;&gt;the full documentation for guards&lt;/a&gt; for more information about guards, how they are used, and what expressions are allowed in them.</source>
          <target state="translated">有关警卫，警卫的使用方式以及警卫中允许使用的表达式的更多信息，请查阅&lt;a href=&quot;https://hexdocs.pm/elixir/guards.html&quot;&gt;警卫的完整文档&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="cc11b3a28fa30ae6d3d3ad1438824cbd5224ba5c" translate="yes" xml:space="preserve">
          <source>Context</source>
          <target state="translated">Context</target>
        </trans-unit>
        <trans-unit id="1bbfd156f85e030d051094c906e097817e15b4d1" translate="yes" xml:space="preserve">
          <source>Continues execution of the current process.</source>
          <target state="translated">继续执行当前的进程。</target>
        </trans-unit>
        <trans-unit id="9cf96af56061f48b77f2ca372e437a5cbfd34ccd" translate="yes" xml:space="preserve">
          <source>Controls an IO device process that wraps a string.</source>
          <target state="translated">控制一个包装字符串的IO设备进程。</target>
        </trans-unit>
        <trans-unit id="511bc588c44b169481c4ab2f5fa4baa6ea94d293" translate="yes" xml:space="preserve">
          <source>Convenience functions for defining supervisor specifications.</source>
          <target state="translated">定义主管规格的便利功能。</target>
        </trans-unit>
        <trans-unit id="1896f8c1898ba69ed8398e4cd445925ae4014f8a" translate="yes" xml:space="preserve">
          <source>Convenience functions for working with atoms.</source>
          <target state="translated">用于处理原子的便利功能。</target>
        </trans-unit>
        <trans-unit id="0dec42bbf61a109359c91148d0509bd563207899" translate="yes" xml:space="preserve">
          <source>Convenience to get the path relative to the current working directory.</source>
          <target state="translated">方便获取当前工作目录的相对路径。</target>
        </trans-unit>
        <trans-unit id="9398c3d1709bffcf5ee58dc22ca7bba010067260" translate="yes" xml:space="preserve">
          <source>Conveniences for formatting data for logs.</source>
          <target state="translated">方便对日志数据进行格式化。</target>
        </trans-unit>
        <trans-unit id="ac8dec653917d71f3e1fde2e3774b6870ed89c0c" translate="yes" xml:space="preserve">
          <source>Conveniences for spawning and awaiting tasks.</source>
          <target state="translated">方便产卵和等待任务。</target>
        </trans-unit>
        <trans-unit id="11a944db3534dab5708e3a3090c3d296632e9d28" translate="yes" xml:space="preserve">
          <source>Conveniences for working with macros.</source>
          <target state="translated">方便使用宏的工作。</target>
        </trans-unit>
        <trans-unit id="58e5e941c629021c4446da1893e95f1f6661c6be" translate="yes" xml:space="preserve">
          <source>Conveniences for working with processes and the process dictionary.</source>
          <target state="translated">方便处理流程和流程字典。</target>
        </trans-unit>
        <trans-unit id="2bb0c4c90fda78018fef946d3af1057c1a6f7f6f" translate="yes" xml:space="preserve">
          <source>Conveniently, Elixir allows developers to hide modules and functions from the documentation, by setting &lt;code&gt;@doc false&lt;/code&gt; to hide a particular function, or &lt;code&gt;@moduledoc false&lt;/code&gt; to hide the whole module. If a module is hidden, you may even document the functions in the module, but the module itself won't be listed in the documentation:</source>
          <target state="translated">方便地，Elixir允许开发人员通过将 &lt;code&gt;@doc false&lt;/code&gt; 设置为隐藏特定功能，或将 &lt;code&gt;@moduledoc false&lt;/code&gt; 设置为隐藏整个模块，从而从文档中隐藏模块和功能。如果模块是隐藏的，您甚至可以在模块中记录功能，但是模块本身不会在文档中列出：</target>
        </trans-unit>
        <trans-unit id="734c112fb013ffbcab9477e1420f148661879dd3" translate="yes" xml:space="preserve">
          <source>Converts &lt;a href=&quot;#t:day_fraction/0&quot;&gt;&lt;code&gt;day_fraction/0&lt;/code&gt;&lt;/a&gt; to the Calendar's time format.</source>
          <target state="translated">将&lt;a href=&quot;#t:day_fraction/0&quot;&gt; &lt;code&gt;day_fraction/0&lt;/code&gt; &lt;/a&gt;转换为Calendar的时间格式。</target>
        </trans-unit>
        <trans-unit id="c263dea4a8926f236fd6cf885211f470d0040f25" translate="yes" xml:space="preserve">
          <source>Converts &lt;a href=&quot;#t:iso_days/0&quot;&gt;&lt;code&gt;iso_days/0&lt;/code&gt;&lt;/a&gt; to the Calendar's datetime format.</source>
          <target state="translated">将&lt;a href=&quot;#t:iso_days/0&quot;&gt; &lt;code&gt;iso_days/0&lt;/code&gt; &lt;/a&gt;转换为日历的日期时间格式。</target>
        </trans-unit>
        <trans-unit id="2c5350eabc852769f746830f4fbed1c2624db80b" translate="yes" xml:space="preserve">
          <source>Converts &lt;code&gt;enumerable&lt;/code&gt; to a list.</source>
          <target state="translated">将 &lt;code&gt;enumerable&lt;/code&gt; 转换为列表。</target>
        </trans-unit>
        <trans-unit id="a74487f27205428d15f0451bc0d11babd1e1ca88" translate="yes" xml:space="preserve">
          <source>Converts &lt;code&gt;map&lt;/code&gt; to a list.</source>
          <target state="translated">将 &lt;code&gt;map&lt;/code&gt; 转换为列表。</target>
        </trans-unit>
        <trans-unit id="7f76385606d85b29a0ecab53642a1b53c3fb2af8" translate="yes" xml:space="preserve">
          <source>Converts &lt;code&gt;map_set&lt;/code&gt; to a list.</source>
          <target state="translated">将 &lt;code&gt;map_set&lt;/code&gt; 转换为列表。</target>
        </trans-unit>
        <trans-unit id="b4037010ef8b8f68c53234550440e37ebcec11b4" translate="yes" xml:space="preserve">
          <source>Converts &lt;code&gt;term&lt;/code&gt; into an algebra document.</source>
          <target state="translated">将 &lt;code&gt;term&lt;/code&gt; 转换为代数文档。</target>
        </trans-unit>
        <trans-unit id="2239811e8691306d987c87bb035ec0e285472797" translate="yes" xml:space="preserve">
          <source>Converts &lt;code&gt;term&lt;/code&gt; to a charlist.</source>
          <target state="translated">将 &lt;code&gt;term&lt;/code&gt; 转换为字符列表。</target>
        </trans-unit>
        <trans-unit id="9282cdf0f052d8c88bcaf95a8ca087cb35fb7850" translate="yes" xml:space="preserve">
          <source>Converts &lt;code&gt;term&lt;/code&gt; to a string.</source>
          <target state="translated">将 &lt;code&gt;term&lt;/code&gt; 转换为字符串。</target>
        </trans-unit>
        <trans-unit id="dcced501d6c07a24ff93c483518b8cc2d151f569" translate="yes" xml:space="preserve">
          <source>Converts &lt;code&gt;time&lt;/code&gt; from time unit &lt;code&gt;from_unit&lt;/code&gt; to time unit &lt;code&gt;to_unit&lt;/code&gt;.</source>
          <target state="translated">将 &lt;code&gt;time&lt;/code&gt; 从时间单位 &lt;code&gt;from_unit&lt;/code&gt; 转换为时间单位 &lt;code&gt;to_unit&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="4b45c5892f77b48c1c88133c4a37df2e1f1e3aa7" translate="yes" xml:space="preserve">
          <source>Converts IO data into a binary</source>
          <target state="translated">将IO数据转换为二进制数据</target>
        </trans-unit>
        <trans-unit id="1e80e49bd371488057e5eccaf5915dabe9cfd4b5" translate="yes" xml:space="preserve">
          <source>Converts a &lt;a href=&quot;#content&quot;&gt;&lt;code&gt;DateTime&lt;/code&gt;&lt;/a&gt; into &lt;a href=&quot;time&quot;&gt;&lt;code&gt;Time&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">将&lt;a href=&quot;#content&quot;&gt; &lt;code&gt;DateTime&lt;/code&gt; &lt;/a&gt;转换为&lt;a href=&quot;time&quot;&gt; &lt;code&gt;Time&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="79f2b0486144a184da614f47d1d9aa5bd5c88b86" translate="yes" xml:space="preserve">
          <source>Converts a &lt;a href=&quot;#content&quot;&gt;&lt;code&gt;DateTime&lt;/code&gt;&lt;/a&gt; into a &lt;a href=&quot;date&quot;&gt;&lt;code&gt;Date&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">将&lt;a href=&quot;#content&quot;&gt; &lt;code&gt;DateTime&lt;/code&gt; &lt;/a&gt;转换为&lt;a href=&quot;date&quot;&gt; &lt;code&gt;Date&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="0e51af90c033ac5546b2570c303b594fb7ef386c" translate="yes" xml:space="preserve">
          <source>Converts a &lt;a href=&quot;#content&quot;&gt;&lt;code&gt;File.Stat&lt;/code&gt;&lt;/a&gt; struct to a &lt;code&gt;:file_info&lt;/code&gt; record.</source>
          <target state="translated">将&lt;a href=&quot;#content&quot;&gt; &lt;code&gt;File.Stat&lt;/code&gt; &lt;/a&gt;结构转换为 &lt;code&gt;:file_info&lt;/code&gt; 记录。</target>
        </trans-unit>
        <trans-unit id="e71a4386d83ce453a946bfe6a893f35063f07d35" translate="yes" xml:space="preserve">
          <source>Converts a &lt;a href=&quot;#content&quot;&gt;&lt;code&gt;NaiveDateTime&lt;/code&gt;&lt;/a&gt; into &lt;a href=&quot;time&quot;&gt;&lt;code&gt;Time&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">将&lt;a href=&quot;#content&quot;&gt; &lt;code&gt;NaiveDateTime&lt;/code&gt; &lt;/a&gt;转换为&lt;a href=&quot;time&quot;&gt; &lt;code&gt;Time&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="83028e5e704a1dc83086bc5f2000e97670618390" translate="yes" xml:space="preserve">
          <source>Converts a &lt;a href=&quot;#content&quot;&gt;&lt;code&gt;NaiveDateTime&lt;/code&gt;&lt;/a&gt; into a &lt;a href=&quot;date&quot;&gt;&lt;code&gt;Date&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">将&lt;a href=&quot;#content&quot;&gt; &lt;code&gt;NaiveDateTime&lt;/code&gt; &lt;/a&gt;转换为&lt;a href=&quot;date&quot;&gt; &lt;code&gt;Date&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="2f9f5e5dfb5e1f309523442b6a2bb70c25fa00ad" translate="yes" xml:space="preserve">
          <source>Converts a &lt;a href=&quot;#content&quot;&gt;&lt;code&gt;NaiveDateTime&lt;/code&gt;&lt;/a&gt; struct to an Erlang datetime tuple.</source>
          <target state="translated">将&lt;a href=&quot;#content&quot;&gt; &lt;code&gt;NaiveDateTime&lt;/code&gt; &lt;/a&gt;结构转换为Erlang日期时间元组。</target>
        </trans-unit>
        <trans-unit id="8719af2c72dba20a75e23d17b6bea44825e5d5d1" translate="yes" xml:space="preserve">
          <source>Converts a &lt;code&gt;:file_info&lt;/code&gt; record into a &lt;a href=&quot;#content&quot;&gt;&lt;code&gt;File.Stat&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">将 &lt;code&gt;:file_info&lt;/code&gt; 记录转换为&lt;a href=&quot;#content&quot;&gt; &lt;code&gt;File.Stat&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="c2727fee5122159fbc0af23661dab2ef0c9c2631" translate="yes" xml:space="preserve">
          <source>Converts a &lt;code&gt;struct&lt;/code&gt; to map.</source>
          <target state="translated">将 &lt;code&gt;struct&lt;/code&gt; 转换为地图。</target>
        </trans-unit>
        <trans-unit id="254bf8d1b281f322924363fb1a83ad9e2361d7e3" translate="yes" xml:space="preserve">
          <source>Converts a charlist to an atom.</source>
          <target state="translated">将一个charlist转换为一个原子。</target>
        </trans-unit>
        <trans-unit id="e68efbd247250deb02e7332f2af7b7b7a3149d56" translate="yes" xml:space="preserve">
          <source>Converts a charlist to an existing atom. Raises an &lt;a href=&quot;argumenterror&quot;&gt;&lt;code&gt;ArgumentError&lt;/code&gt;&lt;/a&gt; if the atom does not exist.</source>
          <target state="translated">将字符列表转换为现有原子。如果原子不存在，则引发&lt;a href=&quot;argumenterror&quot;&gt; &lt;code&gt;ArgumentError&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="0a5d5cd9b05db0c45b6438328ca412df82f34ace" translate="yes" xml:space="preserve">
          <source>Converts a day fraction to this Calendar's representation of time.</source>
          <target state="translated">将一天的分数转换为本日历的时间表示。</target>
        </trans-unit>
        <trans-unit id="0e54c7b2dbe83fdf26bac6202e532577515f8965" translate="yes" xml:space="preserve">
          <source>Converts a given &lt;code&gt;datetime&lt;/code&gt; from one calendar to another.</source>
          <target state="translated">将给定的 &lt;code&gt;datetime&lt;/code&gt; 从一个日历转换为另一个日历。</target>
        </trans-unit>
        <trans-unit id="d8dc043a8b2c88ab996fe2e13bf007f26909078f" translate="yes" xml:space="preserve">
          <source>Converts a list of integers representing code points, lists or strings into a charlist.</source>
          <target state="translated">将代表代码点、列表或字符串的整数列表转换为charlist。</target>
        </trans-unit>
        <trans-unit id="6e5cc0b47448c4c5bcff4e00375ab0e486ccf2c4" translate="yes" xml:space="preserve">
          <source>Converts a list of integers representing code points, lists or strings into a string.</source>
          <target state="translated">将代表代码点、列表或字符串的整数列表转换为字符串。</target>
        </trans-unit>
        <trans-unit id="c987e9c958f5bc59b13e956f62b766e68b6fe8f4" translate="yes" xml:space="preserve">
          <source>Converts a list to a tuple.</source>
          <target state="translated">将一个列表转换为一个元组。</target>
        </trans-unit>
        <trans-unit id="02dde49cf9a6a46064141cae9a87851199d4ae33" translate="yes" xml:space="preserve">
          <source>Converts a string into a charlist.</source>
          <target state="translated">将一个字符串转换为一个charlist。</target>
        </trans-unit>
        <trans-unit id="947ec7e9bf96de02e99903966169c97ef903b0be" translate="yes" xml:space="preserve">
          <source>Converts a string to an atom.</source>
          <target state="translated">将一个字符串转换为一个原子。</target>
        </trans-unit>
        <trans-unit id="780538ea266d284ab56b9dc3c29cf37ce27a4b0f" translate="yes" xml:space="preserve">
          <source>Converts a string to an existing atom.</source>
          <target state="translated">将一个字符串转换为一个现有的原子。</target>
        </trans-unit>
        <trans-unit id="b5a8ad6e165d7ed1c7615d02f03e2dbeea23252b" translate="yes" xml:space="preserve">
          <source>Converts a tuple to a list.</source>
          <target state="translated">将元组转换为列表。</target>
        </trans-unit>
        <trans-unit id="13453b8d1508b3203babeb1e62e12b28c32edc34" translate="yes" xml:space="preserve">
          <source>Converts all characters in &lt;code&gt;string&lt;/code&gt; to Unicode normalization form identified by &lt;code&gt;form&lt;/code&gt;.</source>
          <target state="translated">将 &lt;code&gt;string&lt;/code&gt; 所有字符转换为由 &lt;code&gt;form&lt;/code&gt; 标识的Unicode规范化形式。</target>
        </trans-unit>
        <trans-unit id="d9b6510ebfe5cd9b4636c09de47097a06fbbf94e" translate="yes" xml:space="preserve">
          <source>Converts all characters in the given string to lowercase according to &lt;code&gt;mode&lt;/code&gt;.</source>
          <target state="translated">根据 &lt;code&gt;mode&lt;/code&gt; 将给定字符串中的所有字符转换为小写。</target>
        </trans-unit>
        <trans-unit id="27176c2f820ec7f891716f0f78755c8187c887d6" translate="yes" xml:space="preserve">
          <source>Converts all characters in the given string to uppercase according to &lt;code&gt;mode&lt;/code&gt;.</source>
          <target state="translated">根据 &lt;code&gt;mode&lt;/code&gt; 将给定字符串中的所有字符转换为大写。</target>
        </trans-unit>
        <trans-unit id="197e6c77a16aeec861dffc2a445548a230c5e211" translate="yes" xml:space="preserve">
          <source>Converts an Elixir term to an algebra document according to the &lt;a href=&quot;inspect&quot;&gt;&lt;code&gt;Inspect&lt;/code&gt;&lt;/a&gt; protocol.</source>
          <target state="translated">根据&lt;a href=&quot;inspect&quot;&gt; &lt;code&gt;Inspect&lt;/code&gt; &lt;/a&gt;协议将Elixir术语转换为代数文档。</target>
        </trans-unit>
        <trans-unit id="ad1541b2455219564d77382ed7fe2e73581b2fa4" translate="yes" xml:space="preserve">
          <source>Converts an Erlang date tuple but raises for invalid dates.</source>
          <target state="translated">转换一个Erlang日期元组,但会引发无效日期。</target>
        </trans-unit>
        <trans-unit id="6237472326aa97d4d91dbe7ea3d8a7f40e943982" translate="yes" xml:space="preserve">
          <source>Converts an Erlang date tuple to a &lt;a href=&quot;#content&quot;&gt;&lt;code&gt;Date&lt;/code&gt;&lt;/a&gt; struct.</source>
          <target state="translated">将Erlang日期元组转换为&lt;a href=&quot;#content&quot;&gt; &lt;code&gt;Date&lt;/code&gt; &lt;/a&gt;结构。</target>
        </trans-unit>
        <trans-unit id="0dc925bdd2a6249b07fa9efae38dfa76258fa019" translate="yes" xml:space="preserve">
          <source>Converts an Erlang datetime tuple to a &lt;a href=&quot;#content&quot;&gt;&lt;code&gt;NaiveDateTime&lt;/code&gt;&lt;/a&gt; struct.</source>
          <target state="translated">将Erlang日期时间元组转换为&lt;a href=&quot;#content&quot;&gt; &lt;code&gt;NaiveDateTime&lt;/code&gt; &lt;/a&gt;结构。</target>
        </trans-unit>
        <trans-unit id="8dd9ae9ebd84083585be7487d706b7eaa52e69ec" translate="yes" xml:space="preserve">
          <source>Converts an Erlang time tuple to a &lt;a href=&quot;#content&quot;&gt;&lt;code&gt;Time&lt;/code&gt;&lt;/a&gt; struct.</source>
          <target state="translated">将Erlang时间元组转换为&lt;a href=&quot;#content&quot;&gt; &lt;code&gt;Time&lt;/code&gt; &lt;/a&gt;结构。</target>
        </trans-unit>
        <trans-unit id="d582318b9473f2734864958a0821294f01f1b66d" translate="yes" xml:space="preserve">
          <source>Converts an atom to a charlist.</source>
          <target state="translated">将一个原子转换为一个charlist。</target>
        </trans-unit>
        <trans-unit id="7fa16e00cee3fcccbfdea7311d60ada14e4f260e" translate="yes" xml:space="preserve">
          <source>Converts an atom to a string.</source>
          <target state="translated">将一个原子转换为一个字符串。</target>
        </trans-unit>
        <trans-unit id="e841d0667d5d6ef74ab9e5853d985c4cea6b18cc" translate="yes" xml:space="preserve">
          <source>Converts chardata into a string.</source>
          <target state="translated">将chardata转换为字符串。</target>
        </trans-unit>
        <trans-unit id="a145202abf06e7ca92dcbfc3594ac19f06cf61b5" translate="yes" xml:space="preserve">
          <source>Converts given &lt;code&gt;time&lt;/code&gt; to a different calendar.</source>
          <target state="translated">将给定 &lt;code&gt;time&lt;/code&gt; 转换为其他日历。</target>
        </trans-unit>
        <trans-unit id="60bf168f1407388298d9b210e72535da75765532" translate="yes" xml:space="preserve">
          <source>Converts given &lt;code&gt;time&lt;/code&gt; to an Erlang time tuple.</source>
          <target state="translated">将给定 &lt;code&gt;time&lt;/code&gt; 转换为Erlang时间元组。</target>
        </trans-unit>
        <trans-unit id="3ac0da74aab610cfdee319e397f52884c7cca511" translate="yes" xml:space="preserve">
          <source>Converts the &lt;a href=&quot;calendar#t:iso_days/0&quot;&gt;&lt;code&gt;Calendar.iso_days/0&lt;/code&gt;&lt;/a&gt; format to the datetime format specified by this calendar.</source>
          <target state="translated">将&lt;a href=&quot;calendar#t:iso_days/0&quot;&gt; &lt;code&gt;Calendar.iso_days/0&lt;/code&gt; &lt;/a&gt;格式转换为此日历指定的日期时间格式。</target>
        </trans-unit>
        <trans-unit id="4b6111172b0ba4063d262291c6c3b2b09eac09ae" translate="yes" xml:space="preserve">
          <source>Converts the IO &lt;code&gt;device&lt;/code&gt; into an &lt;a href=&quot;io.stream&quot;&gt;&lt;code&gt;IO.Stream&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">将IO &lt;code&gt;device&lt;/code&gt; 转换为&lt;a href=&quot;io.stream&quot;&gt; &lt;code&gt;IO.Stream&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="4e89484d19f8b391081fcfbf11774ccd7e0029f8" translate="yes" xml:space="preserve">
          <source>Converts the IO &lt;code&gt;device&lt;/code&gt; into an &lt;a href=&quot;io.stream&quot;&gt;&lt;code&gt;IO.Stream&lt;/code&gt;&lt;/a&gt;. The operation is Unicode unsafe.</source>
          <target state="translated">将IO &lt;code&gt;device&lt;/code&gt; 转换为&lt;a href=&quot;io.stream&quot;&gt; &lt;code&gt;IO.Stream&lt;/code&gt; &lt;/a&gt;。该操作是Unicode不安全的。</target>
        </trans-unit>
        <trans-unit id="c8e6e16de8acf03faa5a8b241195a52aa4b1e29e" translate="yes" xml:space="preserve">
          <source>Converts the argument to a string according to the &lt;a href=&quot;string.chars&quot;&gt;&lt;code&gt;String.Chars&lt;/code&gt;&lt;/a&gt; protocol.</source>
          <target state="translated">根据&lt;a href=&quot;string.chars&quot;&gt; &lt;code&gt;String.Chars&lt;/code&gt; &lt;/a&gt;协议将参数转换为字符串。</target>
        </trans-unit>
        <trans-unit id="5b8fbdf0a0fa574e14e63c37f6a8ef88b3232cef" translate="yes" xml:space="preserve">
          <source>Converts the date into a string according to the calendar.</source>
          <target state="translated">根据日历将日期转换为字符串。</target>
        </trans-unit>
        <trans-unit id="227b186ae0acc44776906432dd066fbe4fde8846" translate="yes" xml:space="preserve">
          <source>Converts the datetime (with time zone) into a string according to the calendar.</source>
          <target state="translated">根据日历,将日期时间(包括时区)转换为一个字符串。</target>
        </trans-unit>
        <trans-unit id="92e2c5a23650305fee01a1fcd9a57ab26fc28d72" translate="yes" xml:space="preserve">
          <source>Converts the datetime (with time zone) into a string.</source>
          <target state="translated">将日期时间(含时区)转换为字符串。</target>
        </trans-unit>
        <trans-unit id="e1625d9cdfd25143785b1fa11bbd89706012c4af" translate="yes" xml:space="preserve">
          <source>Converts the datetime (without time zone) into a string according to the calendar.</source>
          <target state="translated">根据日历,将日期时间(不含时区)转换为一个字符串。</target>
        </trans-unit>
        <trans-unit id="717185aa13daa78bdde43f04c886115fa0e73941" translate="yes" xml:space="preserve">
          <source>Converts the datetime (without time zone) into a string.</source>
          <target state="translated">将日期时间(不含时区)转换为字符串。</target>
        </trans-unit>
        <trans-unit id="a2abe353af0045108936797a9195af1772dfd552" translate="yes" xml:space="preserve">
          <source>Converts the first character in the given string to uppercase and the remainder to lowercase according to &lt;code&gt;mode&lt;/code&gt;.</source>
          <target state="translated">根据 &lt;code&gt;mode&lt;/code&gt; 将给定字符串中的第一个字符转换为大写字母，其余转换为小写字母。</target>
        </trans-unit>
        <trans-unit id="d4564c56ea18e08e51a07042222eb171cff78504" translate="yes" xml:space="preserve">
          <source>Converts the given &lt;a href=&quot;naivedatetime&quot;&gt;&lt;code&gt;NaiveDateTime&lt;/code&gt;&lt;/a&gt; to &lt;a href=&quot;#content&quot;&gt;&lt;code&gt;DateTime&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">将给定的&lt;a href=&quot;naivedatetime&quot;&gt; &lt;code&gt;NaiveDateTime&lt;/code&gt; &lt;/a&gt;转换为&lt;a href=&quot;#content&quot;&gt; &lt;code&gt;DateTime&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="21e264a9524cd6e7dc80e416d4e36f478333a439" translate="yes" xml:space="preserve">
          <source>Converts the given &lt;code&gt;date&lt;/code&gt; from its calendar to the given &lt;code&gt;calendar&lt;/code&gt;.</source>
          <target state="translated">将给定 &lt;code&gt;date&lt;/code&gt; 从其日历转换为给定 &lt;code&gt;calendar&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="030c0774d22f233ba42fb12f10a1a70296d43037" translate="yes" xml:space="preserve">
          <source>Converts the given &lt;code&gt;date&lt;/code&gt; to &lt;a href=&quot;https://en.wikipedia.org/wiki/ISO_8601&quot;&gt;ISO 8601:2004&lt;/a&gt;.</source>
          <target state="translated">将给定 &lt;code&gt;date&lt;/code&gt; 转换为&lt;a href=&quot;https://en.wikipedia.org/wiki/ISO_8601&quot;&gt;ISO 8601：2004&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="f6c9bebf617d290f961736311cefb7f89e429aa0" translate="yes" xml:space="preserve">
          <source>Converts the given &lt;code&gt;date&lt;/code&gt; to an Erlang date tuple.</source>
          <target state="translated">将给定 &lt;code&gt;date&lt;/code&gt; 转换为Erlang日期元组。</target>
        </trans-unit>
        <trans-unit id="90042dc24d2d96d4b3dd9984c599920efaec9579" translate="yes" xml:space="preserve">
          <source>Converts the given &lt;code&gt;datetime&lt;/code&gt; into a &lt;a href=&quot;naivedatetime&quot;&gt;&lt;code&gt;NaiveDateTime&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">将给定的 &lt;code&gt;datetime&lt;/code&gt; 转换为&lt;a href=&quot;naivedatetime&quot;&gt; &lt;code&gt;NaiveDateTime&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="38607d070d5886f0af38c1f08b0fc3fd52cfa931" translate="yes" xml:space="preserve">
          <source>Converts the given &lt;code&gt;datetime&lt;/code&gt; to Unix time.</source>
          <target state="translated">将给定的 &lt;code&gt;datetime&lt;/code&gt; 转换为Unix时间。</target>
        </trans-unit>
        <trans-unit id="e7713cd000f48f06c03b261c1ce2b54eeac3472c" translate="yes" xml:space="preserve">
          <source>Converts the given &lt;code&gt;datetime&lt;/code&gt; to a string according to its calendar.</source>
          <target state="translated">根据日历将给定的 &lt;code&gt;datetime&lt;/code&gt; 转换为字符串。</target>
        </trans-unit>
        <trans-unit id="023233441b992e80b392f70911a5906ce4e0cba9" translate="yes" xml:space="preserve">
          <source>Converts the given &lt;code&gt;naive_datetime&lt;/code&gt; from one calendar to another.</source>
          <target state="translated">将给定的 &lt;code&gt;naive_datetime&lt;/code&gt; 从一个日历转换为另一个日历。</target>
        </trans-unit>
        <trans-unit id="8ec6376d2a13e24a0141c11d23138342f5fbc8b0" translate="yes" xml:space="preserve">
          <source>Converts the given &lt;code&gt;time&lt;/code&gt; to a string.</source>
          <target state="translated">将给定的 &lt;code&gt;time&lt;/code&gt; 转换为字符串。</target>
        </trans-unit>
        <trans-unit id="5e23f4682b8833610adb0fd47c62bcd1fdcc4cd9" translate="yes" xml:space="preserve">
          <source>Converts the given Unix time to &lt;a href=&quot;#content&quot;&gt;&lt;code&gt;DateTime&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">将给定的Unix时间转换为&lt;a href=&quot;#content&quot;&gt; &lt;code&gt;DateTime&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="612b4c3348db1df419a84869d47308c8a6a2a9d6" translate="yes" xml:space="preserve">
          <source>Converts the given atom or binary to underscore format.</source>
          <target state="translated">将给定的原子或二进制转换为下划线格式。</target>
        </trans-unit>
        <trans-unit id="e4c120019c6ce0243ca3ed4ef026a01e5af3d50a" translate="yes" xml:space="preserve">
          <source>Converts the given date into a string.</source>
          <target state="translated">将给定的日期转换为字符串。</target>
        </trans-unit>
        <trans-unit id="748850d792b313b153351dc3fad876e09a4a6167" translate="yes" xml:space="preserve">
          <source>Converts the given date to a string according to its calendar.</source>
          <target state="translated">根据日历将给定的日期转换为一个字符串。</target>
        </trans-unit>
        <trans-unit id="580ca61be38d506e1fbabba1567234376f9fb67a" translate="yes" xml:space="preserve">
          <source>Converts the given datetime (without time zone) into the &lt;a href=&quot;#t:iso_days/0&quot;&gt;&lt;code&gt;iso_days/0&lt;/code&gt;&lt;/a&gt; format.</source>
          <target state="translated">将给定的日期时间（无时区）转换为&lt;a href=&quot;#t:iso_days/0&quot;&gt; &lt;code&gt;iso_days/0&lt;/code&gt; &lt;/a&gt;格式。</target>
        </trans-unit>
        <trans-unit id="4ac5ca644110fb9234b585f20da953fc40183d3a" translate="yes" xml:space="preserve">
          <source>Converts the given datetime to &lt;a href=&quot;https://en.wikipedia.org/wiki/ISO_8601&quot;&gt;ISO 8601:2004&lt;/a&gt; format.</source>
          <target state="translated">将给定的日期时间转换为&lt;a href=&quot;https://en.wikipedia.org/wiki/ISO_8601&quot;&gt;ISO 8601：2004&lt;/a&gt;格式。</target>
        </trans-unit>
        <trans-unit id="98e2af74ab4f811ebccb7dfd38e2983ea26bd505" translate="yes" xml:space="preserve">
          <source>Converts the given expression AST to a string.</source>
          <target state="translated">将给定的表达式AST转换为字符串。</target>
        </trans-unit>
        <trans-unit id="1a63c1aa4ca02493d9e3dc44717b50d2c6cdc341" translate="yes" xml:space="preserve">
          <source>Converts the given naive datetime to &lt;a href=&quot;https://en.wikipedia.org/wiki/ISO_8601&quot;&gt;ISO 8601:2004&lt;/a&gt;.</source>
          <target state="translated">将给定的原始日期时间转换为&lt;a href=&quot;https://en.wikipedia.org/wiki/ISO_8601&quot;&gt;ISO 8601：2004&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="228c1561eef12bb4d3d95a29c1441ec5a4be11f6" translate="yes" xml:space="preserve">
          <source>Converts the given naive datetime to a string according to its calendar.</source>
          <target state="translated">根据日历将给定的naive datetime转换为字符串。</target>
        </trans-unit>
        <trans-unit id="c9286e3dd5d56cf4207fbf7300a7241dc950a591" translate="yes" xml:space="preserve">
          <source>Converts the given path to an absolute one. Unlike &lt;a href=&quot;#expand/1&quot;&gt;&lt;code&gt;expand/1&lt;/code&gt;&lt;/a&gt;, no attempt is made to resolve &lt;code&gt;..&lt;/code&gt;, &lt;code&gt;.&lt;/code&gt; or &lt;code&gt;~&lt;/code&gt;.</source>
          <target state="translated">将给定路径转换为绝对路径。与&lt;a href=&quot;#expand/1&quot;&gt; &lt;code&gt;expand/1&lt;/code&gt; &lt;/a&gt;不同，没有尝试解决 &lt;code&gt;..&lt;/code&gt; ， &lt;code&gt;.&lt;/code&gt; 或 &lt;code&gt;~&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="7f7f5abb6efabe13737c9ca4626a86c8733407bd" translate="yes" xml:space="preserve">
          <source>Converts the given string to CamelCase format.</source>
          <target state="translated">将给定的字符串转换为CamelCase格式。</target>
        </trans-unit>
        <trans-unit id="309d33e35d53f2e58eb95fc785af528ca7744f6d" translate="yes" xml:space="preserve">
          <source>Converts the given string to its quoted form.</source>
          <target state="translated">将给定的字符串转换为其引号形式。</target>
        </trans-unit>
        <trans-unit id="8bc0590b1dbce230536e4466653afeda26e0e2ec" translate="yes" xml:space="preserve">
          <source>Converts the given term to a charlist according to the &lt;a href=&quot;list.chars&quot;&gt;&lt;code&gt;List.Chars&lt;/code&gt;&lt;/a&gt; protocol.</source>
          <target state="translated">根据&lt;a href=&quot;list.chars&quot;&gt; &lt;code&gt;List.Chars&lt;/code&gt; &lt;/a&gt;协议将给定术语转换为字符列表。</target>
        </trans-unit>
        <trans-unit id="c044a36802721d40a5b50ee9d1fca02b69813080" translate="yes" xml:space="preserve">
          <source>Converts the given time into a string.</source>
          <target state="translated">将给定的时间转换为字符串。</target>
        </trans-unit>
        <trans-unit id="babee3dcd26752eb23edd13cb79aa04dd96a76e9" translate="yes" xml:space="preserve">
          <source>Converts the given time to &lt;a href=&quot;https://en.wikipedia.org/wiki/ISO_8601&quot;&gt;ISO 8601:2004&lt;/a&gt;.</source>
          <target state="translated">将给定时间转换为&lt;a href=&quot;https://en.wikipedia.org/wiki/ISO_8601&quot;&gt;ISO 8601：2004&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="8c7a03767b5d1566df3d146e4fbaef558f6a1090" translate="yes" xml:space="preserve">
          <source>Converts the given time to the &lt;a href=&quot;#t:day_fraction/0&quot;&gt;&lt;code&gt;day_fraction/0&lt;/code&gt;&lt;/a&gt; format.</source>
          <target state="translated">将给定时间转换为&lt;a href=&quot;#t:day_fraction/0&quot;&gt; &lt;code&gt;day_fraction/0&lt;/code&gt; &lt;/a&gt;格式。</target>
        </trans-unit>
        <trans-unit id="8bef9301d9edb5e35de1e260e607e1823667132d" translate="yes" xml:space="preserve">
          <source>Converts the path to an absolute one and expands any &lt;code&gt;.&lt;/code&gt; and &lt;code&gt;..&lt;/code&gt; characters and a leading &lt;code&gt;~&lt;/code&gt;.</source>
          <target state="translated">将路径转换为绝对路径并扩展任何路径 &lt;code&gt;.&lt;/code&gt; 和 &lt;code&gt;..&lt;/code&gt; 字符和前导 &lt;code&gt;~&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="23415e661cc9d41a024959347984730e2601bed2" translate="yes" xml:space="preserve">
          <source>Converts the time into a string according to the calendar.</source>
          <target state="translated">根据日历将时间转换为一个字符串。</target>
        </trans-unit>
        <trans-unit id="0a49d0c8f3285f335233220c5993daacbad3d3a5" translate="yes" xml:space="preserve">
          <source>Copies the contents in &lt;code&gt;source&lt;/code&gt; to &lt;code&gt;destination&lt;/code&gt; recursively, maintaining the source directory structure and modes.</source>
          <target state="translated">拷贝内容 &lt;code&gt;source&lt;/code&gt; 到 &lt;code&gt;destination&lt;/code&gt; 递归，保持源的目录结构和模式。</target>
        </trans-unit>
        <trans-unit id="abf53458642b38d338f60c6e1bf1d5064dfd444e" translate="yes" xml:space="preserve">
          <source>Copies the contents in &lt;code&gt;source_file&lt;/code&gt; to &lt;code&gt;destination_file&lt;/code&gt; preserving its modes.</source>
          <target state="translated">将 &lt;code&gt;source_file&lt;/code&gt; 中的内容复制到 &lt;code&gt;destination_file&lt;/code&gt; 并保留其模式。</target>
        </trans-unit>
        <trans-unit id="e3e9a52265052fb7c4cbfaaee0f1c813d805b775" translate="yes" xml:space="preserve">
          <source>Copies the contents of &lt;code&gt;source&lt;/code&gt; to &lt;code&gt;destination&lt;/code&gt;.</source>
          <target state="translated">将 &lt;code&gt;source&lt;/code&gt; 内容复制到 &lt;code&gt;destination&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="fb042f0b0cf7bbae523e4db50401acd89b538c94" translate="yes" xml:space="preserve">
          <source>Copies the given spec as a callback.</source>
          <target state="translated">复制给定的规格作为回调。</target>
        </trans-unit>
        <trans-unit id="5bd5c22751074967a6095132bfee44e6a2f51436" translate="yes" xml:space="preserve">
          <source>Count the code points in each string asynchronously, then add the counts together using reduce.</source>
          <target state="translated">异步计算每个字符串中的代码点,然后使用reduce将计数相加。</target>
        </trans-unit>
        <trans-unit id="80e13549b47a4dfc6e898a282920091b209c78be" translate="yes" xml:space="preserve">
          <source>Coverage</source>
          <target state="translated">Coverage</target>
        </trans-unit>
        <trans-unit id="028ea82f8e6a71263262972962b3eb339200a07d" translate="yes" xml:space="preserve">
          <source>Create a file at &lt;code&gt;lib/kv/router.ex&lt;/code&gt; with the following contents:</source>
          <target state="translated">在 &lt;code&gt;lib/kv/router.ex&lt;/code&gt; 中创建一个文件，其内容如下：</target>
        </trans-unit>
        <trans-unit id="1ef2cd8271ebb73d84add4da7d468bc9403cf8d4" translate="yes" xml:space="preserve">
          <source>Create a file at &lt;code&gt;test/kv/bucket_test.exs&lt;/code&gt; (remember the &lt;code&gt;.exs&lt;/code&gt; extension) with the following:</source>
          <target state="translated">使用以下命令在 &lt;code&gt;test/kv/bucket_test.exs&lt;/code&gt; （请记住 &lt;code&gt;.exs&lt;/code&gt; 扩展名）中创建一个文件：</target>
        </trans-unit>
        <trans-unit id="a8070c19ec35f828badfb0971876a3836aa01640" translate="yes" xml:space="preserve">
          <source>Create a new file at &lt;code&gt;lib/kv/registry.ex&lt;/code&gt; with the following contents:</source>
          <target state="translated">在 &lt;code&gt;lib/kv/registry.ex&lt;/code&gt; 中创建一个新文件，其内容如下：</target>
        </trans-unit>
        <trans-unit id="4d096b85c273e9bc8931277d2ffdc25ab305cfa5" translate="yes" xml:space="preserve">
          <source>Creates a PID from &lt;code&gt;string&lt;/code&gt;.</source>
          <target state="translated">从 &lt;code&gt;string&lt;/code&gt; 创建一个PID 。</target>
        </trans-unit>
        <trans-unit id="17c20052fb303436bdb11d8899b481f14df4590c" translate="yes" xml:space="preserve">
          <source>Creates a PID with 3 non-negative integers passed as arguments to the function.</source>
          <target state="translated">用3个非负整数作为参数传递给函数,创建一个PID。</target>
        </trans-unit>
        <trans-unit id="4ccd0821086d4ce314a99c2b1ec5d27e4161dbd2" translate="yes" xml:space="preserve">
          <source>Creates a Port from &lt;code&gt;string&lt;/code&gt;.</source>
          <target state="translated">从 &lt;code&gt;string&lt;/code&gt; 创建一个Port 。</target>
        </trans-unit>
        <trans-unit id="95deb48dcab4fa865482dbf5af752daa124b8bc8" translate="yes" xml:space="preserve">
          <source>Creates a Port from two non-negative integers.</source>
          <target state="translated">从两个非负整数创建一个端口。</target>
        </trans-unit>
        <trans-unit id="65524decb6cf29f2e8ddd1d1ebc67371ef0050b6" translate="yes" xml:space="preserve">
          <source>Creates a Reference from &lt;code&gt;string&lt;/code&gt;.</source>
          <target state="translated">从 &lt;code&gt;string&lt;/code&gt; 创建引用。</target>
        </trans-unit>
        <trans-unit id="80e84c042a84564fb45d3e4ea04bdde0d79343e7" translate="yes" xml:space="preserve">
          <source>Creates a Reference from its 4 non-negative integers components.</source>
          <target state="translated">从它的4个非负整数成分中创建一个引用。</target>
        </trans-unit>
        <trans-unit id="72a773275c1891d62c509356c702ed500fd44357" translate="yes" xml:space="preserve">
          <source>Creates a document represented by string.</source>
          <target state="translated">创建一个用字符串表示的文档。</target>
        </trans-unit>
        <trans-unit id="a25ffa072c9b4497ffa77caddb84e10a12c4fece" translate="yes" xml:space="preserve">
          <source>Creates a hard link &lt;code&gt;new&lt;/code&gt; to the file &lt;code&gt;existing&lt;/code&gt;.</source>
          <target state="translated">为 &lt;code&gt;existing&lt;/code&gt; 文件创建 &lt;code&gt;new&lt;/code&gt; 的硬链接。</target>
        </trans-unit>
        <trans-unit id="498fc9088eefd0b5d1f1097ae8face4e13b2235a" translate="yes" xml:space="preserve">
          <source>Creates a keyword list from an enumerable via the transformation function.</source>
          <target state="translated">通过转换函数从一个可枚举的关键字创建一个关键字列表。</target>
        </trans-unit>
        <trans-unit id="0cf02892cb76f3bfd617a2b9b66aa2c84f3221a2" translate="yes" xml:space="preserve">
          <source>Creates a keyword list from an enumerable.</source>
          <target state="translated">从一个可枚举的关键词中创建一个关键词列表。</target>
        </trans-unit>
        <trans-unit id="484073e0a88950e889b7cb4cdaaff39cb41a7044" translate="yes" xml:space="preserve">
          <source>Creates a link between the calling process and the given item (process or port).</source>
          <target state="translated">在调用的进程和给定的项目(进程或端口)之间建立链接。</target>
        </trans-unit>
        <trans-unit id="3845ba5590ad3018c23c28e5c890fa7cb6ca6f20" translate="yes" xml:space="preserve">
          <source>Creates a map from an &lt;code&gt;enumerable&lt;/code&gt; via the given transformation function.</source>
          <target state="translated">通过给定的转换函数根据 &lt;code&gt;enumerable&lt;/code&gt; 创建地图。</target>
        </trans-unit>
        <trans-unit id="1f569ea7402f94a429015887b7617e16fc743562" translate="yes" xml:space="preserve">
          <source>Creates a map from an &lt;code&gt;enumerable&lt;/code&gt;.</source>
          <target state="translated">根据 &lt;code&gt;enumerable&lt;/code&gt; 创建地图。</target>
        </trans-unit>
        <trans-unit id="ce89e48193f46f044fa2d633cfe5156548be0642" translate="yes" xml:space="preserve">
          <source>Creates a map.</source>
          <target state="translated">创建一个地图。</target>
        </trans-unit>
        <trans-unit id="bca0cb06c3c10839d539f0c9df1de4a58a5af887" translate="yes" xml:space="preserve">
          <source>Creates a module with the given name and defined by the given quoted expressions.</source>
          <target state="translated">用给定的名称创建一个模块,并由给定的引号表达式定义。</target>
        </trans-unit>
        <trans-unit id="f6fb16ff7d235494c11327d98497f4cf281e95fe" translate="yes" xml:space="preserve">
          <source>Creates a new empty dict.</source>
          <target state="translated">创建一个新的空的dict。</target>
        </trans-unit>
        <trans-unit id="1c9315ba3d69260c14b757669db279c4b74f54d8" translate="yes" xml:space="preserve">
          <source>Creates a new range.</source>
          <target state="translated">创建一个新的范围。</target>
        </trans-unit>
        <trans-unit id="a2eba7b5cc42b2afd7e58fcb27cbf5d6f7a5f7b2" translate="yes" xml:space="preserve">
          <source>Creates a new tuple.</source>
          <target state="translated">创建一个新的元组。</target>
        </trans-unit>
        <trans-unit id="7d7a85ef1ed1803d92c9416ace3552ee52d3a318" translate="yes" xml:space="preserve">
          <source>Creates a set from an enumerable via the transformation function.</source>
          <target state="translated">通过转换函数从一个枚举集创建一个集合。</target>
        </trans-unit>
        <trans-unit id="c912e955c1e13f472af8b11a6e720fa581a82ea3" translate="yes" xml:space="preserve">
          <source>Creates a set from an enumerable.</source>
          <target state="translated">从一个枚举集创建一个集合。</target>
        </trans-unit>
        <trans-unit id="92c9b57f1e2cecc049ffa0a17491ad60c9aea49d" translate="yes" xml:space="preserve">
          <source>Creates a stream that applies the given function to each element, emits the result and uses the same result as the accumulator for the next computation. Uses the first element in the enumerable as the starting value.</source>
          <target state="translated">创建一个流,将给定的函数应用于每个元素,发出结果,并将相同的结果作为下一次计算的累加器。使用枚举中的第一个元素作为起始值。</target>
        </trans-unit>
        <trans-unit id="3febf59f90e67bb54f793ba91dfddfb75ca065cb" translate="yes" xml:space="preserve">
          <source>Creates a stream that applies the given function to each element, emits the result and uses the same result as the accumulator for the next computation. Uses the given &lt;code&gt;acc&lt;/code&gt; as the starting value.</source>
          <target state="translated">创建一个将给定功能应用于每个元素的流，发出结果并将与累加器相同的结果用于下一次计算。使用给定的 &lt;code&gt;acc&lt;/code&gt; 作为起始值。</target>
        </trans-unit>
        <trans-unit id="368eb7731010419d3d1b8a5fa0a96992f65548c6" translate="yes" xml:space="preserve">
          <source>Creates a stream that cycles through the given enumerable, infinitely.</source>
          <target state="translated">创建一个流,在给定的枚举中无限循环。</target>
        </trans-unit>
        <trans-unit id="09a0edafbe5af88cdea45c406f8cf75648a29039" translate="yes" xml:space="preserve">
          <source>Creates a stream that drops every &lt;code&gt;nth&lt;/code&gt; element from the enumerable.</source>
          <target state="translated">创建一个流，该流从可枚举中删除 &lt;code&gt;nth&lt;/code&gt; 元素。</target>
        </trans-unit>
        <trans-unit id="a65e224893927d60f5f1aea1df74c6d4636b9d19" translate="yes" xml:space="preserve">
          <source>Creates a stream that emits a single value after &lt;code&gt;n&lt;/code&gt; milliseconds.</source>
          <target state="translated">创建一个在 &lt;code&gt;n&lt;/code&gt; 毫秒后发出单个值的流。</target>
        </trans-unit>
        <trans-unit id="e7bf644491bc4caaaa2f9796f5b0a4de1a1168a3" translate="yes" xml:space="preserve">
          <source>Creates a stream that emits a value after the given period &lt;code&gt;n&lt;/code&gt; in milliseconds.</source>
          <target state="translated">创建一个流，该流在给定的时间段 &lt;code&gt;n&lt;/code&gt; (以毫秒为单位）之后发出值。</target>
        </trans-unit>
        <trans-unit id="6b1bf40efcd55deb62653b37917ef53710fe8a67" translate="yes" xml:space="preserve">
          <source>Creates a stream that enumerates each enumerable in an enumerable.</source>
          <target state="translated">创建一个流,在一个枚举中枚举每一个枚举。</target>
        </trans-unit>
        <trans-unit id="1b7ed8a49c2a04606f29f4e01e9a43aba6e74367" translate="yes" xml:space="preserve">
          <source>Creates a stream that enumerates the first argument, followed by the second.</source>
          <target state="translated">创建一个流,枚举第一个参数,然后是第二个参数。</target>
        </trans-unit>
        <trans-unit id="5de27bcf3f438e8e62f7ff655930f9a342d628f0" translate="yes" xml:space="preserve">
          <source>Creates a stream that filters elements according to the given function on enumeration.</source>
          <target state="translated">创建一个流,根据给定的枚举函数过滤元素。</target>
        </trans-unit>
        <trans-unit id="a292d4224debffe065f234930161932a5927780b" translate="yes" xml:space="preserve">
          <source>Creates a stream that only emits elements if the result of calling &lt;code&gt;fun&lt;/code&gt; on the element is different from the (stored) result of calling &lt;code&gt;fun&lt;/code&gt; on the last emitted element.</source>
          <target state="translated">创建一个唯一的发射元件，如果调用的结果的流 &lt;code&gt;fun&lt;/code&gt; 的元素是从调用的（存储）结果不同 &lt;code&gt;fun&lt;/code&gt; 的最后一个发射元件上。</target>
        </trans-unit>
        <trans-unit id="58a5512f2444ff6976377bbee4eb5372d54fcd5c" translate="yes" xml:space="preserve">
          <source>Creates a stream that only emits elements if they are different from the last emitted element.</source>
          <target state="translated">创建一个只有在元素与上一个元素不同时才会发射的流。</target>
        </trans-unit>
        <trans-unit id="962425bd297f3b883238978c7ce6a85a752c07fc" translate="yes" xml:space="preserve">
          <source>Creates a stream that only emits elements if they are unique, by removing the elements for which function &lt;code&gt;fun&lt;/code&gt; returned duplicate elements.</source>
          <target state="translated">创建，只有当它们是唯一的，通过除去该功能的元素发出要素流 &lt;code&gt;fun&lt;/code&gt; 返回重复的元素。</target>
        </trans-unit>
        <trans-unit id="cdde751cd26237ff05d16e7de6b337007018fc9a" translate="yes" xml:space="preserve">
          <source>Creates a stream that only emits elements if they are unique.</source>
          <target state="translated">创建一个只有在元素是唯一的情况下才会发射的流。</target>
        </trans-unit>
        <trans-unit id="32be0a0b96ea6c99b90acb3b387e407fab509a1f" translate="yes" xml:space="preserve">
          <source>Creates a stream that takes every &lt;code&gt;nth&lt;/code&gt; element from the enumerable.</source>
          <target state="translated">创建一个从枚举中获取 &lt;code&gt;nth&lt;/code&gt; 元素的流。</target>
        </trans-unit>
        <trans-unit id="018a830e30f48f2abb4f6e375d5c3596f09ae1a1" translate="yes" xml:space="preserve">
          <source>Creates a stream that will apply the given function on enumeration.</source>
          <target state="translated">创建一个将给定函数应用于枚举的流。</target>
        </trans-unit>
        <trans-unit id="52a5b372e2b712a7fcefd3796ad7bb8aa811e396" translate="yes" xml:space="preserve">
          <source>Creates a stream that will apply the given function on every &lt;code&gt;nth&lt;/code&gt; element from the enumerable.</source>
          <target state="translated">创建一个流，该流将给定函数应用于枚举中的每个 &lt;code&gt;nth&lt;/code&gt; 元素。</target>
        </trans-unit>
        <trans-unit id="a1c7db814b0f2d86987998b90fdbe81b3fe20363" translate="yes" xml:space="preserve">
          <source>Creates a stream that will reject elements according to the given function on enumeration.</source>
          <target state="translated">根据给定的枚举函数,创建一个拒绝元素的流。</target>
        </trans-unit>
        <trans-unit id="d4e101ae0e59e353e2c11459f9cd83b9fb41375b" translate="yes" xml:space="preserve">
          <source>Creates a stream where each element in the enumerable will be wrapped in a tuple alongside its index.</source>
          <target state="translated">创建一个流,在这个流中,enumerable中的每一个元素将和它的索引一起被包裹在一个元组中。</target>
        </trans-unit>
        <trans-unit id="794b74194468fc9dd669423522605922875647a9" translate="yes" xml:space="preserve">
          <source>Creates a symbolic link &lt;code&gt;new&lt;/code&gt; to the file or directory &lt;code&gt;existing&lt;/code&gt;.</source>
          <target state="translated">创建一个 &lt;code&gt;new&lt;/code&gt; 的符号链接到 &lt;code&gt;existing&lt;/code&gt; 的文件或目录。</target>
        </trans-unit>
        <trans-unit id="37d7b6cf67d4f7ee7f942e6b2de56067571c402e" translate="yes" xml:space="preserve">
          <source>Creates a tuple of &lt;code&gt;size&lt;/code&gt; containing the given &lt;code&gt;data&lt;/code&gt; at every position.</source>
          <target state="translated">创建一个在每个位置包含给定 &lt;code&gt;data&lt;/code&gt; 的 &lt;code&gt;size&lt;/code&gt; 的元组。</target>
        </trans-unit>
        <trans-unit id="c12cdd291771a6531cab586dd7713827a9512c63" translate="yes" xml:space="preserve">
          <source>Creates a tuple.</source>
          <target state="translated">创建一个元组。</target>
        </trans-unit>
        <trans-unit id="981204be793902bce796c0cf3f7b3ba3f28ef48b" translate="yes" xml:space="preserve">
          <source>Creates an IO device.</source>
          <target state="translated">创建一个IO设备。</target>
        </trans-unit>
        <trans-unit id="0c34079208451017d540c9fb615f1989d707408b" translate="yes" xml:space="preserve">
          <source>Creates and updates structs.</source>
          <target state="translated">创建和更新结构。</target>
        </trans-unit>
        <trans-unit id="4b73576aa815a8d50bb5014bba09ef6ac2a8dadd" translate="yes" xml:space="preserve">
          <source>Creating Streams</source>
          <target state="translated">创建流</target>
        </trans-unit>
        <trans-unit id="9bf07eaecf55e49059496beb7aa95c4062a592c9" translate="yes" xml:space="preserve">
          <source>Creating a supervisor is not much different from creating a GenServer. We are going to define a module named &lt;code&gt;KV.Supervisor&lt;/code&gt;, which will use the Supervisor behaviour, inside the &lt;code&gt;lib/kv/supervisor.ex&lt;/code&gt; file:</source>
          <target state="translated">创建主管与创建GenServer并没有太大不同。我们将在 &lt;code&gt;lib/kv/supervisor.ex&lt;/code&gt; 文件中定义一个名为 &lt;code&gt;KV.Supervisor&lt;/code&gt; 的模块，该模块将使用Supervisor行为：</target>
        </trans-unit>
        <trans-unit id="89584c30004088bac7c1dae0caca5ec122b003e7" translate="yes" xml:space="preserve">
          <source>Crossed-out. Characters legible, but marked for deletion. Not widely supported.</source>
          <target state="translated">被划掉。字符可读,但标明要删除。未得到广泛支持。</target>
        </trans-unit>
        <trans-unit id="b32ee5eae663bc459ca55799e6c9e900ee825b77" translate="yes" xml:space="preserve">
          <source>Current working directory, exception on error.</source>
          <target state="translated">当前工作目录,出错时异常。</target>
        </trans-unit>
        <trans-unit id="a9e67a1612d3786289b31085caea29dd802d1a39" translate="yes" xml:space="preserve">
          <source>Current working directory.</source>
          <target state="translated">当前工作目录。</target>
        </trans-unit>
        <trans-unit id="f248a387f0f37e77ff666c2a85a59f7074c24d85" translate="yes" xml:space="preserve">
          <source>Currently &lt;code&gt;@deprecated&lt;/code&gt; only supports functions and macros. However you can use the &lt;code&gt;:deprecated&lt;/code&gt; key in the annotation metadata to annotate the docs of modules, types and callbacks too.</source>
          <target state="translated">当前 &lt;code&gt;@deprecated&lt;/code&gt; 仅支持函数和宏。但是，您也可以在注释元数据中使用 &lt;code&gt;:deprecated&lt;/code&gt; 键来注释模块，类型和回调的文档。</target>
        </trans-unit>
        <trans-unit id="51f90102aa9d37408ac2a331660c80b3de845ceb" translate="yes" xml:space="preserve">
          <source>Currently it defines types and the minimal implementation for a calendar behaviour in Elixir. The goal of the Calendar features in Elixir is to provide a base for interoperability instead of full-featured datetime API.</source>
          <target state="translated">目前,它为Elixir中的日历行为定义了类型和最低限度的实现。Elixir中的日历功能的目标是为互操作性提供一个基础,而不是全功能的日期时间API。</target>
        </trans-unit>
        <trans-unit id="58e947fb9b58beb32c0020272eaa3d95ced9ee44" translate="yes" xml:space="preserve">
          <source>Currently the only accepted PID is &lt;code&gt;self()&lt;/code&gt;.</source>
          <target state="translated">当前唯一接受的PID是 &lt;code&gt;self()&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="63f26076c7ac35014e638bc9d9a7df511fa73b4d" translate="yes" xml:space="preserve">
          <source>Currently we have two tests tagged with &lt;code&gt;@tag :distributed&lt;/code&gt;. The &amp;ldquo;server interaction&amp;rdquo; test in &lt;code&gt;KVServerTest&lt;/code&gt;, and the &amp;ldquo;route requests across nodes&amp;rdquo; in &lt;code&gt;KV.RouterTest&lt;/code&gt;. Both tests are failing since they require a routing table, which is currently empty.</source>
          <target state="translated">目前，我们有两个标记为 &lt;code&gt;@tag :distributed&lt;/code&gt; 测试。 &lt;code&gt;KVServerTest&lt;/code&gt; 中的&amp;ldquo;服务器交互&amp;rdquo;测试，以及KV.RouterTest中的&amp;ldquo;跨节点的路由请求&amp;rdquo; &lt;code&gt;KV.RouterTest&lt;/code&gt; 。两项测试均失败，因为它们需要路由表，该路由表当前为空。</target>
        </trans-unit>
        <trans-unit id="5bdaaebe2bbb603df00e4573b0900ccd99aa7d09" translate="yes" xml:space="preserve">
          <source>Custom Sigils</source>
          <target state="translated">自定义符号</target>
        </trans-unit>
        <trans-unit id="d797cab8a29cd6c10dc9372d1ab9213b989caf7f" translate="yes" xml:space="preserve">
          <source>Custom and overridden operators</source>
          <target state="translated">自定义和重写操作符</target>
        </trans-unit>
        <trans-unit id="00146f5b748062fe67c9600ecfcdf444284e0bcf" translate="yes" xml:space="preserve">
          <source>Custom attributes</source>
          <target state="translated">自定义属性</target>
        </trans-unit>
        <trans-unit id="e3fd71a31afaaf057b0fedc28ba72336f1780a64" translate="yes" xml:space="preserve">
          <source>Custom backends</source>
          <target state="translated">自定义后端</target>
        </trans-unit>
        <trans-unit id="abe70270d1f6e2920fe2d28c23289b5295fb962a" translate="yes" xml:space="preserve">
          <source>Custom configuration</source>
          <target state="translated">自定义配置</target>
        </trans-unit>
        <trans-unit id="170bc5dc5f750c41d4def27ed27eed6bf3c468fb" translate="yes" xml:space="preserve">
          <source>Custom editors are supported by using the &lt;code&gt;__FILE__&lt;/code&gt; and &lt;code&gt;__LINE__&lt;/code&gt; notations, for example:</source>
          <target state="translated">通过使用 &lt;code&gt;__FILE__&lt;/code&gt; 和 &lt;code&gt;__LINE__&lt;/code&gt; 表示法支持自定义编辑器，例如：</target>
        </trans-unit>
        <trans-unit id="642fb7c499e4524f98e2922e90ae2a2b071cfd52" translate="yes" xml:space="preserve">
          <source>Custom formatting</source>
          <target state="translated">自定义格式</target>
        </trans-unit>
        <trans-unit id="8eb31d3e78f5111c059041eed039c75877655487" translate="yes" xml:space="preserve">
          <source>Custom sigils</source>
          <target state="translated">定制标志</target>
        </trans-unit>
        <trans-unit id="b447a4b2b4a5635d3f0dd6f81cbcc0d90e8e4a6d" translate="yes" xml:space="preserve">
          <source>Custom types defined through &lt;code&gt;@type&lt;/code&gt; are exported and available outside the module they&amp;rsquo;re defined in:</source>
          <target state="translated">通过 &lt;code&gt;@type&lt;/code&gt; 定义的自定义类型将被导出，并在定义于以下模块的模块之外可用：</target>
        </trans-unit>
        <trans-unit id="8b25d03b9dabe02b1fafe8ede605cce72a76c6c5" translate="yes" xml:space="preserve">
          <source>Customization per environment can be done by accessing &lt;a href=&quot;https://hexdocs.pm/mix/Mix.html#env/0&quot;&gt;the &lt;code&gt;Mix.env&lt;/code&gt; function&lt;/a&gt; in your &lt;code&gt;mix.exs&lt;/code&gt; file, which returns the current environment as an atom. That&amp;rsquo;s what we have used in the &lt;code&gt;:start_permanent&lt;/code&gt; options:</source>
          <target state="translated">每环境定制可以通过访问来完成&lt;a href=&quot;https://hexdocs.pm/mix/Mix.html#env/0&quot;&gt;的 &lt;code&gt;Mix.env&lt;/code&gt; 功能&lt;/a&gt;在 &lt;code&gt;mix.exs&lt;/code&gt; 文件，返回当前环境作为一个原子。这就是我们在 &lt;code&gt;:start_permanent&lt;/code&gt; 选项中使用的：</target>
        </trans-unit>
        <trans-unit id="303c85db56e6f90f1fcaafbed47e91067f22fbe9" translate="yes" xml:space="preserve">
          <source>Data structures</source>
          <target state="translated">数据结构</target>
        </trans-unit>
        <trans-unit id="696ae3d17016ea7046f1ce357ae0b1f6103499a3" translate="yes" xml:space="preserve">
          <source>Data structures such as lists, tuples, and binaries are marked respectively by the delimiters &lt;code&gt;[...]&lt;/code&gt;, &lt;code&gt;{...}&lt;/code&gt;, and &lt;code&gt;&amp;lt;&amp;lt;...&amp;gt;&amp;gt;&lt;/code&gt;. Each element is separated by comma. A trailing comma is also allowed, such as in &lt;code&gt;[1, 2, 3,]&lt;/code&gt;.</source>
          <target state="translated">列表，元组和二进制文件等数据结构分别由定界符 &lt;code&gt;[...]&lt;/code&gt; ， &lt;code&gt;{...}&lt;/code&gt; 和 &lt;code&gt;&amp;lt;&amp;lt;...&amp;gt;&amp;gt;&lt;/code&gt; 标记。每个元素都用逗号分隔。还可以使用尾部逗号，例如 &lt;code&gt;[1, 2, 3,]&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="b6be514c02654c4ded06230fc9559da237b0aa77" translate="yes" xml:space="preserve">
          <source>Data types</source>
          <target state="translated">数据类型</target>
        </trans-unit>
        <trans-unit id="eb9a4bc1c0c153e4e4b042a79113b815b7e3021d" translate="yes" xml:space="preserve">
          <source>Date</source>
          <target state="translated">Date</target>
        </trans-unit>
        <trans-unit id="904c0db9491168bf7b0f96a8127a1e2e956e54ec" translate="yes" xml:space="preserve">
          <source>Date.Range</source>
          <target state="translated">Date.Range</target>
        </trans-unit>
        <trans-unit id="f1e5baf5ecc3589631088c40cbdd43061976ed8f" translate="yes" xml:space="preserve">
          <source>DateTime</source>
          <target state="translated">DateTime</target>
        </trans-unit>
        <trans-unit id="d0c32ae37c8ec0c5b70c6fbada27ade3b4484def" translate="yes" xml:space="preserve">
          <source>Debug options supported by the &lt;code&gt;start*&lt;/code&gt; functions</source>
          <target state="translated">&lt;code&gt;start*&lt;/code&gt; 功能支持的调试选项</target>
        </trans-unit>
        <trans-unit id="3dea78e2b42ff6c53cdfe32a0caf66a693083f61" translate="yes" xml:space="preserve">
          <source>Debugger</source>
          <target state="translated">Debugger</target>
        </trans-unit>
        <trans-unit id="895b27c88016513d278a0ce3dc0663fae3829d58" translate="yes" xml:space="preserve">
          <source>Debugging</source>
          <target state="translated">Debugging</target>
        </trans-unit>
        <trans-unit id="4dbfbf2c1ca5c9cbf7ff86eebf9f1e60dfaae3c2" translate="yes" xml:space="preserve">
          <source>Debugging with the :sys module</source>
          <target state="translated">使用:sys模块进行调试</target>
        </trans-unit>
        <trans-unit id="49bac63211bb6e767f6bd201454a7033e302753a" translate="yes" xml:space="preserve">
          <source>Decodes &lt;code&gt;string&lt;/code&gt; as &quot;x-www-form-urlencoded&quot;.</source>
          <target state="translated">将 &lt;code&gt;string&lt;/code&gt; 解码为&amp;ldquo; x-www-form-urlencoded&amp;rdquo;。</target>
        </trans-unit>
        <trans-unit id="f7d7142bd19e1c0ea0198316fec06393f6cb0ea2" translate="yes" xml:space="preserve">
          <source>Decodes a base 16 encoded string into a binary string.</source>
          <target state="translated">将一个16进制编码的字符串解码为二进制字符串。</target>
        </trans-unit>
        <trans-unit id="fb034015ded81968d20fd5f7e210338ebd758879" translate="yes" xml:space="preserve">
          <source>Decodes a base 32 encoded string into a binary string.</source>
          <target state="translated">将32基编码的字符串解码为二进制字符串。</target>
        </trans-unit>
        <trans-unit id="885c7e9658ad97e9a9af45bd4781416e206a6334" translate="yes" xml:space="preserve">
          <source>Decodes a base 32 encoded string with extended hexadecimal alphabet into a binary string.</source>
          <target state="translated">将一个以32为基数的扩展十六进制字母编码的字符串解码为二进制字符串。</target>
        </trans-unit>
        <trans-unit id="4b608e75a46b84e1feb5de2f9f73f4f8523e9f1d" translate="yes" xml:space="preserve">
          <source>Decodes a base 64 encoded string into a binary string.</source>
          <target state="translated">将一个64基编码的字符串解码为二进制字符串。</target>
        </trans-unit>
        <trans-unit id="b945eb1852da433ae69fcf285b6a56aed338e16f" translate="yes" xml:space="preserve">
          <source>Decodes a base 64 encoded string with URL and filename safe alphabet into a binary string.</source>
          <target state="translated">将带有URL和文件名安全字母的64基编码字符串解码为二进制字符串。</target>
        </trans-unit>
        <trans-unit id="12cd61b38813ead53840f88994a5a092cca61e7f" translate="yes" xml:space="preserve">
          <source>Decodes a query string into a map.</source>
          <target state="translated">将一个查询字符串解码为一个地图。</target>
        </trans-unit>
        <trans-unit id="624612278a208a23a0e8ccd36697aaa475bd3192" translate="yes" xml:space="preserve">
          <source>Decomposes a local or remote call into its remote part (when provided), function name and argument list.</source>
          <target state="translated">将一个本地或远程调用分解为远程部分(如果提供的话)、函数名和参数列表。</target>
        </trans-unit>
        <trans-unit id="7151035c3114809bda0193c2a85fa1a470935213" translate="yes" xml:space="preserve">
          <source>Default Unit</source>
          <target state="translated">默认单位</target>
        </trans-unit>
        <trans-unit id="6bcca2541d3f4eb99df509a0ef05a98d2f536b6d" translate="yes" xml:space="preserve">
          <source>Default arguments</source>
          <target state="translated">默认参数</target>
        </trans-unit>
        <trans-unit id="6593ff7fb992a5e5072fa654c1b194d94010d120" translate="yes" xml:space="preserve">
          <source>Default background color.</source>
          <target state="translated">默认背景色。</target>
        </trans-unit>
        <trans-unit id="6e98c72a394abdbcd4b12051bb239d5b6259e9ce" translate="yes" xml:space="preserve">
          <source>Default text color.</source>
          <target state="translated">默认文本颜色。</target>
        </trans-unit>
        <trans-unit id="89487e7c33b83cf47b069ff9b1fec8587ba1c7a6" translate="yes" xml:space="preserve">
          <source>Default translation for Erlang log messages.</source>
          <target state="translated">Erlang日志信息的默认翻译。</target>
        </trans-unit>
        <trans-unit id="e19bd89011e61a7bb0e77dd718395ff863fa6b57" translate="yes" xml:space="preserve">
          <source>Default values and required keys</source>
          <target state="translated">默认值和所需键</target>
        </trans-unit>
        <trans-unit id="0b6846959c6ecef6294ea2738ab118ae06eb0104" translate="yes" xml:space="preserve">
          <source>Defaults to &lt;code&gt;true&lt;/code&gt; for Elixir projects, &lt;code&gt;false&lt;/code&gt; for Erlang projects.</source>
          <target state="translated">对于Elixir项目，默认为 &lt;code&gt;true&lt;/code&gt; ；对于Erlang项目，默认为 &lt;code&gt;false&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="d3da7d067c0e2af23683cd3618963a0c016ef27c" translate="yes" xml:space="preserve">
          <source>Define a function from a string (&lt;code&gt;function_from_string&lt;/code&gt;) or a file (&lt;code&gt;function_from_file&lt;/code&gt;). This allows you to embed the template as a function inside a module which will then be compiled. This is the preferred API if you have access to the template at compilation time.</source>
          <target state="translated">从字符串（ &lt;code&gt;function_from_string&lt;/code&gt; ）或文件（ &lt;code&gt;function_from_file&lt;/code&gt; ）定义函数。这使您可以将模板作为函数嵌入模块中，然后再对其进行编译。如果您可以在编译时访问模板，则这是首选的API。</target>
        </trans-unit>
        <trans-unit id="7af570fa4ced5be1c1e832e70770e29cb3378f42" translate="yes" xml:space="preserve">
          <source>Define the function explicitly (v1.0)</source>
          <target state="translated">明确定义函数 (v1.0)</target>
        </trans-unit>
        <trans-unit id="bc125b89387e69b38c0b71432e6451758cd10e9b" translate="yes" xml:space="preserve">
          <source>Define the rollover moment for the given calendar.</source>
          <target state="translated">定义给定日历的翻转时刻。</target>
        </trans-unit>
        <trans-unit id="cdc8ce38051bdb795b598be018ffa7c0e1241cd3" translate="yes" xml:space="preserve">
          <source>Defined as</source>
          <target state="translated">定义为</target>
        </trans-unit>
        <trans-unit id="2c159947b8552c14519d220c3a6ddfaa0e00eeec" translate="yes" xml:space="preserve">
          <source>Defines ExUnit callbacks.</source>
          <target state="translated">定义ExUnit回调。</target>
        </trans-unit>
        <trans-unit id="3fba28715c151409c38236ee7000eb4ed16c82f1" translate="yes" xml:space="preserve">
          <source>Defines a &lt;a href=&quot;#content&quot;&gt;&lt;code&gt;File.Stream&lt;/code&gt;&lt;/a&gt; struct returned by &lt;a href=&quot;file#stream!/3&quot;&gt;&lt;code&gt;File.stream!/3&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">定义&lt;a href=&quot;file#stream!/3&quot;&gt; &lt;code&gt;File.stream!/3&lt;/code&gt; &lt;/a&gt;返回的&lt;a href=&quot;#content&quot;&gt; &lt;code&gt;File.Stream&lt;/code&gt; &lt;/a&gt;结构。</target>
        </trans-unit>
        <trans-unit id="718b6b621786a1acc4c26d42dbc485e26faf7eec" translate="yes" xml:space="preserve">
          <source>Defines a callback that runs once the test exits.</source>
          <target state="translated">定义测试退出后运行的回调。</target>
        </trans-unit>
        <trans-unit id="9200a3742bfb9e88c562c9f6f3ed2f69e18c6f67" translate="yes" xml:space="preserve">
          <source>Defines a callback to be run before all tests in a case.</source>
          <target state="translated">定义一个回调,在case的所有测试之前运行。</target>
        </trans-unit>
        <trans-unit id="4b6166591f75c5a4bf0202583ee95cba035668e8" translate="yes" xml:space="preserve">
          <source>Defines a callback to be run before each test in a case.</source>
          <target state="translated">定义一个回调,在案例中的每个测试之前运行。</target>
        </trans-unit>
        <trans-unit id="d5bc2aab7b6f9616afc524a405cb7757608452d9" translate="yes" xml:space="preserve">
          <source>Defines a function callback according to the given type specification.</source>
          <target state="translated">根据给定的类型规格定义一个函数回调。</target>
        </trans-unit>
        <trans-unit id="c5db38a50b427e41d0ad25365053a42c56f8a1f7" translate="yes" xml:space="preserve">
          <source>Defines a function that delegates to another module.</source>
          <target state="translated">定义一个委托给其他模块的函数。</target>
        </trans-unit>
        <trans-unit id="307e106c43982d5b12630cb72b848406b819c6c6" translate="yes" xml:space="preserve">
          <source>Defines a function with the given name and body.</source>
          <target state="translated">用给定的名称和主体定义一个函数。</target>
        </trans-unit>
        <trans-unit id="f063e0d1325de98da63498e5fe376536a4c88d2c" translate="yes" xml:space="preserve">
          <source>Defines a macro callback according to the given type specification.</source>
          <target state="translated">根据给定的类型规范定义一个宏回调。</target>
        </trans-unit>
        <trans-unit id="d1bdce6fb82524ea6dca239a6d1b4282ce120736" translate="yes" xml:space="preserve">
          <source>Defines a macro with the given name and body.</source>
          <target state="translated">用给定的名称和主体定义一个宏。</target>
        </trans-unit>
        <trans-unit id="45436ad823527d91893ee57c61d5208fd54f8f28" translate="yes" xml:space="preserve">
          <source>Defines a module given by name with the given contents.</source>
          <target state="translated">定义一个由名称赋予的模块,并赋予其内容。</target>
        </trans-unit>
        <trans-unit id="cf550b43951705ff60d293e8451b26e72a1b3d68" translate="yes" xml:space="preserve">
          <source>Defines a new bitstring.</source>
          <target state="translated">定义一个新的位串。</target>
        </trans-unit>
        <trans-unit id="5e5448d0355663eca910a26c7f674b96bdfb1318" translate="yes" xml:space="preserve">
          <source>Defines a not implemented test with a string.</source>
          <target state="translated">用一个字符串定义一个未实现的测试。</target>
        </trans-unit>
        <trans-unit id="3c2d3289caf113cf07d04f07d984ecc30b13bea4" translate="yes" xml:space="preserve">
          <source>Defines a private function with the given name and body.</source>
          <target state="translated">定义一个给定名称和主体的私有函数。</target>
        </trans-unit>
        <trans-unit id="08a09270f00cde41495279c24131c417ef5be1db" translate="yes" xml:space="preserve">
          <source>Defines a private macro with the given name and body.</source>
          <target state="translated">定义一个给定名称和主体的私有宏。</target>
        </trans-unit>
        <trans-unit id="234e236e77f17928fa5de859398ddc5049a5ff60" translate="yes" xml:space="preserve">
          <source>Defines a protocol.</source>
          <target state="translated">定义一个协议。</target>
        </trans-unit>
        <trans-unit id="cf0422852f7761d300210619550ed122f7749dee" translate="yes" xml:space="preserve">
          <source>Defines a range.</source>
          <target state="translated">定义一个范围。</target>
        </trans-unit>
        <trans-unit id="84d0bf0e5d21a052c34ad1cf8cc4fd2c0b2d922d" translate="yes" xml:space="preserve">
          <source>Defines a remote call, a call to an anonymous function, or an alias.</source>
          <target state="translated">定义了远程调用、对匿名函数的调用或别名。</target>
        </trans-unit>
        <trans-unit id="148ce01689924171178db559eb8519855c18cbf6" translate="yes" xml:space="preserve">
          <source>Defines a set of macros to create, access, and pattern match on a record.</source>
          <target state="translated">定义了一组宏,用于在记录上创建、访问和模式匹配。</target>
        </trans-unit>
        <trans-unit id="d43aa789386d3da190d548740ece58b49c1b5c28" translate="yes" xml:space="preserve">
          <source>Defines a struct.</source>
          <target state="translated">定义一个结构。</target>
        </trans-unit>
        <trans-unit id="6ff008b3bfc5f520079685bb6518c7f8c263c332" translate="yes" xml:space="preserve">
          <source>Defines a test with a string.</source>
          <target state="translated">用一个字符串定义一个测试。</target>
        </trans-unit>
        <trans-unit id="81a4f177d77d4b3501935507c322bb13c914958e" translate="yes" xml:space="preserve">
          <source>Defines an &lt;a href=&quot;#content&quot;&gt;&lt;code&gt;IO.Stream&lt;/code&gt;&lt;/a&gt; struct returned by &lt;a href=&quot;io#stream/2&quot;&gt;&lt;code&gt;IO.stream/2&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;io#binstream/2&quot;&gt;&lt;code&gt;IO.binstream/2&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">定义&lt;a href=&quot;io#stream/2&quot;&gt; &lt;code&gt;IO.stream/2&lt;/code&gt; &lt;/a&gt;和&lt;a href=&quot;io#binstream/2&quot;&gt; &lt;code&gt;IO.binstream/2&lt;/code&gt; &lt;/a&gt;返回的&lt;a href=&quot;#content&quot;&gt; &lt;code&gt;IO.Stream&lt;/code&gt; &lt;/a&gt;结构。</target>
        </trans-unit>
        <trans-unit id="61d9e7c667e3e371baebf26eb4a1e174baee751d" translate="yes" xml:space="preserve">
          <source>Defines an anonymous function.</source>
          <target state="translated">定义一个匿名函数。</target>
        </trans-unit>
        <trans-unit id="1f336908a8420d524aec43e1dfa0a8c9f56be6ac" translate="yes" xml:space="preserve">
          <source>Defines an exception.</source>
          <target state="translated">定义一个异常。</target>
        </trans-unit>
        <trans-unit id="47c4eab1a12c9a4e9e5bfc15095c4f5f1e7f8420" translate="yes" xml:space="preserve">
          <source>Defines an implementation for the given protocol.</source>
          <target state="translated">定义给定协议的实现。</target>
        </trans-unit>
        <trans-unit id="7574e6578cdcbcf5986b0221d662d60206450586" translate="yes" xml:space="preserve">
          <source>Defines and manipulates Mix projects.</source>
          <target state="translated">定义和操作Mix项目。</target>
        </trans-unit>
        <trans-unit id="c87324807b8cf7ca458804ea8ef4c07d69ba7fe6" translate="yes" xml:space="preserve">
          <source>Defines options for module compilation. This is used to configure both Elixir and Erlang compilers, as any other compilation pass added by external tools. For example:</source>
          <target state="translated">定义模块编译的选项。它用于配置Elixir和Erlang编译器,就像外部工具添加的任何其他编译通道一样。例如</target>
        </trans-unit>
        <trans-unit id="51d68b5790fad1de6d84cef24485698c5aa44718" translate="yes" xml:space="preserve">
          <source>Defines the given &lt;code&gt;module&lt;/code&gt; as a supervisor which will be started with the given arguments.</source>
          <target state="translated">将给定的 &lt;code&gt;module&lt;/code&gt; 定义为管理者，它将以给定的参数开始。</target>
        </trans-unit>
        <trans-unit id="a74b181531a071dccf103975ef9b5f457594135a" translate="yes" xml:space="preserve">
          <source>Defines the given &lt;code&gt;module&lt;/code&gt; as a worker which will be started with the given arguments.</source>
          <target state="translated">将给定的 &lt;code&gt;module&lt;/code&gt; 定义为将使用给定参数启动的工作程序。</target>
        </trans-unit>
        <trans-unit id="1e7e7a56a0498c33eb4666ce267e88fdd0443785" translate="yes" xml:space="preserve">
          <source>Defines the options used by the &lt;a href=&quot;inspect&quot;&gt;&lt;code&gt;Inspect&lt;/code&gt;&lt;/a&gt; protocol.</source>
          <target state="translated">定义&lt;a href=&quot;inspect&quot;&gt; &lt;code&gt;Inspect&lt;/code&gt; &lt;/a&gt;协议使用的选项。</target>
        </trans-unit>
        <trans-unit id="f752321778df74391c3378581723efb4dca5e78b" translate="yes" xml:space="preserve">
          <source>Defines warnings to request or suppress when using a version of &lt;code&gt;:dialyzer&lt;/code&gt; that supports module attributes.</source>
          <target state="translated">定义警告 &lt;code&gt;:dialyzer&lt;/code&gt; 使用支持模块属性的：dialyzer版本时，请求或禁止显示警告。</target>
        </trans-unit>
        <trans-unit id="99cdfc3cbea74f1f4372e3c3f255ee42a2f77809" translate="yes" xml:space="preserve">
          <source>Defining a protocol automatically defines a type named &lt;code&gt;t&lt;/code&gt;, which can be used as follows:</source>
          <target state="translated">定义协议会自动定义一个名为 &lt;code&gt;t&lt;/code&gt; 的类型，可以如下使用：</target>
        </trans-unit>
        <trans-unit id="eed610b2a524f1fea8a5a11a6b90ab2b660a40c7" translate="yes" xml:space="preserve">
          <source>Defining a specification</source>
          <target state="translated">定义规格</target>
        </trans-unit>
        <trans-unit id="375bfa92ccfe2bd509e0a5a5c9ecb19ed5761bbc" translate="yes" xml:space="preserve">
          <source>Defining behaviours</source>
          <target state="translated">界定行为</target>
        </trans-unit>
        <trans-unit id="1ea27e7345dd55520e1c3fd955a1961190ab35d0" translate="yes" xml:space="preserve">
          <source>Defining custom guard expressions</source>
          <target state="translated">定义自定义保护表达式</target>
        </trans-unit>
        <trans-unit id="67ee31ce55d3432708e003e7896d5c65897de368" translate="yes" xml:space="preserve">
          <source>Defining custom operators</source>
          <target state="translated">定义自定义运算符</target>
        </trans-unit>
        <trans-unit id="88f1538130a6f0b0a36142a4e1e014b6b0b27ac0" translate="yes" xml:space="preserve">
          <source>Defining custom types</source>
          <target state="translated">定义自定义类型</target>
        </trans-unit>
        <trans-unit id="da279c1a631ba36a0429ee2b6ef866ee7c040663" translate="yes" xml:space="preserve">
          <source>Defining extracted records with anonymous functions in the values</source>
          <target state="translated">在值中用匿名函数定义提取的记录。</target>
        </trans-unit>
        <trans-unit id="d271da3ed06fd6bd866bb6e79184abd537c3512e" translate="yes" xml:space="preserve">
          <source>Defining function specs this way works, but it quickly becomes annoying since we&amp;rsquo;re repeating the type &lt;code&gt;{number, String.t}&lt;/code&gt; over and over. We can use the &lt;code&gt;@type&lt;/code&gt; directive in order to declare our own custom type.</source>
          <target state="translated">以这种方式定义函数规范是可行的，但是由于我们一遍又一遍地重复类型 &lt;code&gt;{number, String.t}&lt;/code&gt; ，它很快变得令人讨厌。我们可以使用 &lt;code&gt;@type&lt;/code&gt; 指令来声明我们自己的自定义类型。</target>
        </trans-unit>
        <trans-unit id="9fec1dfeb38c397bddde90cce354ec968be3e685" translate="yes" xml:space="preserve">
          <source>Defining structs</source>
          <target state="translated">定义结构</target>
        </trans-unit>
        <trans-unit id="ac3516b411710c30e4cd006454c7f1994a4da34a" translate="yes" xml:space="preserve">
          <source>Delegation only works with functions; delegating macros is not supported.</source>
          <target state="translated">委托只适用于函数,不支持委托宏。</target>
        </trans-unit>
        <trans-unit id="e726a77011c0fe0cd388991d477e194ae9fd7af2" translate="yes" xml:space="preserve">
          <source>Deletes &lt;code&gt;value&lt;/code&gt; from &lt;code&gt;map_set&lt;/code&gt;.</source>
          <target state="translated">从 &lt;code&gt;map_set&lt;/code&gt; 中删除 &lt;code&gt;value&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="7197d992ec2d7887544bc401d08055b1f065eeeb" translate="yes" xml:space="preserve">
          <source>Deletes a path from the Erlang VM code path list. This is the list of directories the Erlang VM uses for finding module code.</source>
          <target state="translated">从 Erlang VM 代码路径列表中删除一个路径。这是 Erlang VM 用于查找模块代码的目录列表。</target>
        </trans-unit>
        <trans-unit id="23800ac90aacec2911367a4560daa8ed5fec9cb1" translate="yes" xml:space="preserve">
          <source>Deletes an environment variable.</source>
          <target state="translated">删除环境变量。</target>
        </trans-unit>
        <trans-unit id="28cada09dd4174a63836f40b25ecf14ff7e1c534" translate="yes" xml:space="preserve">
          <source>Deletes generated application files.</source>
          <target state="translated">删除生成的应用程序文件。</target>
        </trans-unit>
        <trans-unit id="6511b55cc1b351a9cd395e58f52ffa508ee0de39" translate="yes" xml:space="preserve">
          <source>Deletes the &lt;code&gt;key&lt;/code&gt; from the given &lt;code&gt;app&lt;/code&gt; environment.</source>
          <target state="translated">从给定的 &lt;code&gt;app&lt;/code&gt; 环境中删除 &lt;code&gt;key&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="cda458e47c2adb906a94c0b5117cdc3d628bc0de" translate="yes" xml:space="preserve">
          <source>Deletes the child specification identified by &lt;code&gt;child_id&lt;/code&gt;.</source>
          <target state="translated">删除 &lt;code&gt;child_id&lt;/code&gt; 标识的子规范。</target>
        </trans-unit>
        <trans-unit id="06519f5a98d8a9576fa45c95f0c76ae133cbfd51" translate="yes" xml:space="preserve">
          <source>Deletes the element at the given &lt;code&gt;index&lt;/code&gt; from &lt;code&gt;tuple&lt;/code&gt;. Raises an &lt;a href=&quot;argumenterror&quot;&gt;&lt;code&gt;ArgumentError&lt;/code&gt;&lt;/a&gt; if &lt;code&gt;index&lt;/code&gt; is negative or greater than or equal to the length of &lt;code&gt;tuple&lt;/code&gt;. Index is zero-based.</source>
          <target state="translated">从 &lt;code&gt;tuple&lt;/code&gt; 中删除给定 &lt;code&gt;index&lt;/code&gt; 处的元素。如果 &lt;code&gt;index&lt;/code&gt; 为负或大于或等于 &lt;code&gt;tuple&lt;/code&gt; 的长度，则引发&lt;a href=&quot;argumenterror&quot;&gt; &lt;code&gt;ArgumentError&lt;/code&gt; &lt;/a&gt;。索引从零开始。</target>
        </trans-unit>
        <trans-unit id="768479db33c4ea83d038f3e75c0b46d08cfff3a1" translate="yes" xml:space="preserve">
          <source>Deletes the entries in the keyword list for a &lt;code&gt;key&lt;/code&gt; with &lt;code&gt;value&lt;/code&gt;.</source>
          <target state="translated">删除关键字列表中的条目的 &lt;code&gt;key&lt;/code&gt; 与 &lt;code&gt;value&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="30f8ea2c4a41f9ff990549664a0c3e8cc979a2f3" translate="yes" xml:space="preserve">
          <source>Deletes the entries in the keyword list for a specific &lt;code&gt;key&lt;/code&gt;.</source>
          <target state="translated">删除关键字列表中特定 &lt;code&gt;key&lt;/code&gt; 的条目。</target>
        </trans-unit>
        <trans-unit id="e356fc985f5b4c45501dcdd4bf05b2d169dc820a" translate="yes" xml:space="preserve">
          <source>Deletes the entry in &lt;code&gt;map&lt;/code&gt; for a specific &lt;code&gt;key&lt;/code&gt;.</source>
          <target state="translated">删除 &lt;code&gt;map&lt;/code&gt; 中特定 &lt;code&gt;key&lt;/code&gt; 的条目。</target>
        </trans-unit>
        <trans-unit id="84bf7f6c44bf7d1a25fea2eb0b485822b94e4057" translate="yes" xml:space="preserve">
          <source>Deletes the first entry in the keyword list for a specific &lt;code&gt;key&lt;/code&gt;.</source>
          <target state="translated">删除关键字列表中特定 &lt;code&gt;key&lt;/code&gt; 的第一个条目。</target>
        </trans-unit>
        <trans-unit id="f8205134472497de5f123b07ed4ca04623561776" translate="yes" xml:space="preserve">
          <source>Deletes the given &lt;code&gt;element&lt;/code&gt; from the &lt;code&gt;list&lt;/code&gt;. Returns a new list without the element.</source>
          <target state="translated">从 &lt;code&gt;list&lt;/code&gt; 删除给定的 &lt;code&gt;element&lt;/code&gt; 。返回不包含元素的新列表。</target>
        </trans-unit>
        <trans-unit id="6931640e5585d21423be80c31e8281e15f83ebe2" translate="yes" xml:space="preserve">
          <source>Deletes the given &lt;code&gt;key&lt;/code&gt; from the process dictionary.</source>
          <target state="translated">从流程字典中删除给定的 &lt;code&gt;key&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="241d39fd9168ac37f5f1398b699e96cae08161ab" translate="yes" xml:space="preserve">
          <source>Deletes the module attribute that matches the given key.</source>
          <target state="translated">删除符合给定键的模块属性。</target>
        </trans-unit>
        <trans-unit id="a7699468279a4b12f6e55a5ad1b8c725c2c3ca8c" translate="yes" xml:space="preserve">
          <source>Demonitors the monitor identified by the given &lt;code&gt;reference&lt;/code&gt;.</source>
          <target state="translated">通过给定的 &lt;code&gt;reference&lt;/code&gt; 标识监视程序的监视器。</target>
        </trans-unit>
        <trans-unit id="0562f32dc56f5c702810cbe010068ddd38dbd69a" translate="yes" xml:space="preserve">
          <source>Dependencies</source>
          <target state="translated">Dependencies</target>
        </trans-unit>
        <trans-unit id="ca0bdefd221fdbfd10bc0f3013fa9c019ef6808e" translate="yes" xml:space="preserve">
          <source>Dependencies and umbrella projects</source>
          <target state="translated">依赖关系和总体项目</target>
        </trans-unit>
        <trans-unit id="0aeab4e8a30c470967346544f8d2eeabc88b3b63" translate="yes" xml:space="preserve">
          <source>Dependencies between applications in an umbrella project must still be explicitly defined and Mix makes it easy to do so. Open up &lt;code&gt;apps/kv_server/mix.exs&lt;/code&gt; and change the &lt;code&gt;deps/0&lt;/code&gt; function to the following:</source>
          <target state="translated">仍然必须明确定义伞形项目中应用程序之间的依赖关系，Mix使其易于实现。打开 &lt;code&gt;apps/kv_server/mix.exs&lt;/code&gt; 并将 &lt;code&gt;deps/0&lt;/code&gt; 函数更改为以下内容：</target>
        </trans-unit>
        <trans-unit id="20c4e61613e0bb2759ad45cedce4f0b014181be0" translate="yes" xml:space="preserve">
          <source>Dependencies must be specified in the &lt;code&gt;mix.exs&lt;/code&gt; file in one of the following formats:</source>
          <target state="translated">必须在 &lt;code&gt;mix.exs&lt;/code&gt; 文件中以下列格式之一指定依赖项：</target>
        </trans-unit>
        <trans-unit id="1313d46d93e4456c33c34bdf877a2b31296e6f6b" translate="yes" xml:space="preserve">
          <source>Dependencies within an umbrella project</source>
          <target state="translated">伞形项目内的依赖性</target>
        </trans-unit>
        <trans-unit id="2ae4f4df59c1f88916b85e951202eefbff4c7b68" translate="yes" xml:space="preserve">
          <source>Dependency definition options</source>
          <target state="translated">依赖定义选项</target>
        </trans-unit>
        <trans-unit id="ac1bc59655cdca7840ee9bf9d55721f13ebb7a55" translate="yes" xml:space="preserve">
          <source>Depending on the accumulator value, the result returned by &lt;a href=&quot;enumerable#reduce/3&quot;&gt;&lt;code&gt;Enumerable.reduce/3&lt;/code&gt;&lt;/a&gt; will change. Please check the &lt;a href=&quot;#t:result/0&quot;&gt;&lt;code&gt;result/0&lt;/code&gt;&lt;/a&gt; type documentation for more information.</source>
          <target state="translated">根据累加器的值，由&lt;a href=&quot;enumerable#reduce/3&quot;&gt; &lt;code&gt;Enumerable.reduce/3&lt;/code&gt; &lt;/a&gt;返回的结果将改变。请查看&lt;a href=&quot;#t:result/0&quot;&gt; &lt;code&gt;result/0&lt;/code&gt; &lt;/a&gt;类型文档以获取更多信息。</target>
        </trans-unit>
        <trans-unit id="4962f760a0cc6ed936dcedffadba8733dd81e124" translate="yes" xml:space="preserve">
          <source>Deploys a given module's BEAM code to a list of nodes.</source>
          <target state="translated">将指定模块的BEAM代码部署到节点列表中。</target>
        </trans-unit>
        <trans-unit id="f6ef72731d9f2999dced5cdda829d282f60229ed" translate="yes" xml:space="preserve">
          <source>Deprecated feature</source>
          <target state="translated">废弃的功能</target>
        </trans-unit>
        <trans-unit id="e5135ac9aa0f3adf0ead688638a7cada98f65645" translate="yes" xml:space="preserve">
          <source>Deprecated function to retrieve old documentation format.</source>
          <target state="translated">废弃的功能,用于检索旧的文档格式。</target>
        </trans-unit>
        <trans-unit id="355cf2e1caeb8e5de974f3e0ee6f449e9a16967c" translate="yes" xml:space="preserve">
          <source>Deprecated mechanism to retrieve the last exception stacktrace.</source>
          <target state="translated">废弃的检索最后一次异常堆栈跟踪的机制。</target>
        </trans-unit>
        <trans-unit id="34730e9bbd5c0ba7b7655973316eed44e39da85f" translate="yes" xml:space="preserve">
          <source>Deprecations</source>
          <target state="translated">Deprecations</target>
        </trans-unit>
        <trans-unit id="8189415262d9b40fadd78cc759dd14fdb9868384" translate="yes" xml:space="preserve">
          <source>Deps task</source>
          <target state="translated">部门任务</target>
        </trans-unit>
        <trans-unit id="1751cb6240f8427862c44d9fda1a1acebc588f2b" translate="yes" xml:space="preserve">
          <source>Derives the &lt;code&gt;protocol&lt;/code&gt; for &lt;code&gt;module&lt;/code&gt; with the given options.</source>
          <target state="translated">导出 &lt;code&gt;protocol&lt;/code&gt; 对 &lt;code&gt;module&lt;/code&gt; 用给定的选项。</target>
        </trans-unit>
        <trans-unit id="b1f507cfab066377ebfd776c06ce8c6ae1d1dfae" translate="yes" xml:space="preserve">
          <source>Deriving</source>
          <target state="translated">Deriving</target>
        </trans-unit>
        <trans-unit id="469b2320b22b8de425b1224d561debab3b7e4eec" translate="yes" xml:space="preserve">
          <source>Describes tests together.</source>
          <target state="translated">一起描述测试。</target>
        </trans-unit>
        <trans-unit id="373b67a9ef6e15b48984d2e64ecfb18feb928f40" translate="yes" xml:space="preserve">
          <source>Design principles</source>
          <target state="translated">设计原则</target>
        </trans-unit>
        <trans-unit id="9c5959e7ab4938c2e1595e724f3e5f686f3d536b" translate="yes" xml:space="preserve">
          <source>Destructures two lists, assigning each term in the right one to the matching term in the left one.</source>
          <target state="translated">重构两个列表,将右边列表中的每个术语分配给左边列表中的匹配术语。</target>
        </trans-unit>
        <trans-unit id="55519a961a5691717096efcabf1914eee5dab5a5" translate="yes" xml:space="preserve">
          <source>Determines if &lt;code&gt;integer&lt;/code&gt; is odd.</source>
          <target state="translated">确定 &lt;code&gt;integer&lt;/code&gt; 是否为奇数。</target>
        </trans-unit>
        <trans-unit id="026e5ca0dfda1ad25fabda732fd35af3e32e25b5" translate="yes" xml:space="preserve">
          <source>Determines if an &lt;code&gt;integer&lt;/code&gt; is even.</source>
          <target state="translated">确定 &lt;code&gt;integer&lt;/code&gt; 是否为偶数。</target>
        </trans-unit>
        <trans-unit id="ada7ef5eac5cda7b071d8c84d536d21adaaabe11" translate="yes" xml:space="preserve">
          <source>Determines if the &lt;code&gt;enumerable&lt;/code&gt; is empty.</source>
          <target state="translated">确定 &lt;code&gt;enumerable&lt;/code&gt; 是否为空。</target>
        </trans-unit>
        <trans-unit id="240590c512304822fc6f9051f63c5097957b51d1" translate="yes" xml:space="preserve">
          <source>Determines if the date given is valid according to the proleptic Gregorian calendar.</source>
          <target state="translated">判断所给的日期是否在公历上有效。</target>
        </trans-unit>
        <trans-unit id="b906ed370d76a314f78611272f97a7c5324fbfb8" translate="yes" xml:space="preserve">
          <source>Developers can also use tools like &lt;a href=&quot;https://github.com/bitwalker/distillery&quot;&gt;Distillery&lt;/a&gt; that build &lt;strong&gt;releases&lt;/strong&gt;. Releases are able to package all of your source code as well as the Erlang VM into a single directory. Releases also give you explicit control over how each application is started and in which order. They also provide a more streamlined mechanism for starting and stopping systems, debugging, logging, as well as system monitoring.</source>
          <target state="translated">开发人员还可以使用诸如&lt;a href=&quot;https://github.com/bitwalker/distillery&quot;&gt;Distillery之类的&lt;/a&gt;工具来构建&lt;strong&gt;发行版&lt;/strong&gt;。版本可以将您的所有源代码以及Erlang VM打包到一个目录中。发行版还使您可以明确控制每个应用程序的启动方式和启动顺序。它们还为启动和停止系统，调试，日志记录以及系统监视提供了更简化的机制。</target>
        </trans-unit>
        <trans-unit id="17f25608342d4ab77bb1907f884cfe439bc54de0" translate="yes" xml:space="preserve">
          <source>Developers may also implement their own backends, an option that is explored in more detail below.</source>
          <target state="translated">开发者也可以实现自己的后端,下面将详细探讨这个选项。</target>
        </trans-unit>
        <trans-unit id="0f26c5755a434f3e16da5992d7fb7b82ce5cc7eb" translate="yes" xml:space="preserve">
          <source>Developers may also use umbrella projects to break large business domains apart. The caution here is to make sure the domains don&amp;rsquo;t depend on each other (also known as cyclic dependencies). If you run into such situations, it means those applications are not as isolated from each other as you originally thought, and you have architectural and design issues to solve.</source>
          <target state="translated">开发人员还可以使用总括项目将大型业务领域分开。这里的警告是要确保域之间不相互依赖（也称为循环依赖）。如果遇到这种情况，则意味着这些应用程序之间的相互隔离程度不如您最初想象的那样，并且您需要解决体系结构和设计问题。</target>
        </trans-unit>
        <trans-unit id="b4df092ce16103b5263190978f954da4abebc038" translate="yes" xml:space="preserve">
          <source>Developers should avoid creating the &lt;a href=&quot;#content&quot;&gt;&lt;code&gt;DateTime&lt;/code&gt;&lt;/a&gt; struct directly and instead rely on the functions provided by this module as well as the ones in third-party calendar libraries.</source>
          <target state="translated">开发人员应避免直接创建&lt;a href=&quot;#content&quot;&gt; &lt;code&gt;DateTime&lt;/code&gt; &lt;/a&gt;结构，而应依赖于此模块提供的功能以及第三方日历库中的功能。</target>
        </trans-unit>
        <trans-unit id="9399f0af7289ccae2bbfba26b54d6beaa45eceaa" translate="yes" xml:space="preserve">
          <source>Developers should avoid creating the Date structs directly and instead rely on the functions provided by this module as well as the ones in third-party calendar libraries.</source>
          <target state="translated">开发者应避免直接创建Date结构,而应依赖该模块提供的函数以及第三方日历库中的函数。</target>
        </trans-unit>
        <trans-unit id="372765583e2c62003b134d7cd14c816d752b1af8" translate="yes" xml:space="preserve">
          <source>Developers should avoid creating the NaiveDateTime structs directly and instead, rely on the functions provided by this module as well as the ones in third-party calendar libraries.</source>
          <target state="translated">开发者应该避免直接创建NaiveDateTime结构,而应该依赖该模块提供的函数以及第三方日历库中的函数。</target>
        </trans-unit>
        <trans-unit id="055215a2dc231830ec70e2ea3ed245f009feefc1" translate="yes" xml:space="preserve">
          <source>Developers should avoid creating the Time structs directly and instead rely on the functions provided by this module as well as the ones in third-party calendar libraries.</source>
          <target state="translated">开发者应该避免直接创建时间结构,而应该依赖该模块提供的函数以及第三方日历库中的函数。</target>
        </trans-unit>
        <trans-unit id="a0f9f33bf587fbe7754189054b93906eb196c38a" translate="yes" xml:space="preserve">
          <source>Developers typically invoke &lt;a href=&quot;dynamicsupervisor#init/1&quot;&gt;&lt;code&gt;DynamicSupervisor.init/1&lt;/code&gt;&lt;/a&gt; at the end of their init callback to return the proper supervision flags.</source>
          <target state="translated">开发人员通常在其init回调的末尾调用&lt;a href=&quot;dynamicsupervisor#init/1&quot;&gt; &lt;code&gt;DynamicSupervisor.init/1&lt;/code&gt; &lt;/a&gt;以返回适当的监督标志。</target>
        </trans-unit>
        <trans-unit id="c23ae07b94722ec4976e1fcb3346ba8a18a11515" translate="yes" xml:space="preserve">
          <source>Developers typically invoke &lt;a href=&quot;supervisor#init/2&quot;&gt;&lt;code&gt;Supervisor.init/2&lt;/code&gt;&lt;/a&gt; at the end of their init callback to return the proper supervision flags.</source>
          <target state="translated">开发人员通常在其init回调的末尾调用&lt;a href=&quot;supervisor#init/2&quot;&gt; &lt;code&gt;Supervisor.init/2&lt;/code&gt; &lt;/a&gt;以返回适当的监督标志。</target>
        </trans-unit>
        <trans-unit id="c943b3eb860130726114a82a12d17559028bcef9" translate="yes" xml:space="preserve">
          <source>Developing in Elixir does not make your code free of race conditions. However, Elixir&amp;rsquo;s abstractions where nothing is shared by default make it easier to spot a race condition&amp;rsquo;s root cause.</source>
          <target state="translated">使用Elixir进行开发并不能使您的代码脱离竞争条件。但是，默认情况下不共享任何内容的Elixir抽象概念使发现竞争状况的根本原因变得更加容易。</target>
        </trans-unit>
        <trans-unit id="3550a4a38c380e14df95457cd13d6dabbd0c0b20" translate="yes" xml:space="preserve">
          <source>Dict</source>
          <target state="translated">Dict</target>
        </trans-unit>
        <trans-unit id="28a9d7ddb98e082ecef8831bdb74b74701f20d77" translate="yes" xml:space="preserve">
          <source>Differences from &lt;code&gt;defmodule&lt;/code&gt;</source>
          <target state="translated">与 &lt;code&gt;defmodule&lt;/code&gt; 的区别</target>
        </trans-unit>
        <trans-unit id="951f149c561762e46794ae9088e9246ba02fb48d" translate="yes" xml:space="preserve">
          <source>Differences to &lt;a href=&quot;#count/1&quot;&gt;&lt;code&gt;count/1&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">差异&lt;a href=&quot;#count/1&quot;&gt; &lt;code&gt;count/1&lt;/code&gt; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="7664bc212e56811cb62a63d951c16c5ee311e137" translate="yes" xml:space="preserve">
          <source>Directory separators must always be written as &lt;code&gt;/&lt;/code&gt;, even on Windows. You may call &lt;a href=&quot;path#expand/1&quot;&gt;&lt;code&gt;Path.expand/1&lt;/code&gt;&lt;/a&gt; to normalize the path before invoking this function.</source>
          <target state="translated">目录分隔符必须始终写为 &lt;code&gt;/&lt;/code&gt; ，即使在Windows上也是如此。您可以在调用此函数之前调用&lt;a href=&quot;path#expand/1&quot;&gt; &lt;code&gt;Path.expand/1&lt;/code&gt; &lt;/a&gt;以标准化路径。</target>
        </trans-unit>
        <trans-unit id="5095c2a8d43020f623949798775e0dea6df3427e" translate="yes" xml:space="preserve">
          <source>Disables logging for the current process.</source>
          <target state="translated">禁用当前进程的日志记录。</target>
        </trans-unit>
        <trans-unit id="3243542aa799d7700902fa9d17f21c898a51bd23" translate="yes" xml:space="preserve">
          <source>Dispatching happens in the process that calls &lt;a href=&quot;#dispatch/3&quot;&gt;&lt;code&gt;dispatch/3&lt;/code&gt;&lt;/a&gt; either serially or concurrently in case of multiple partitions (via spawned tasks). The registered processes are not involved in dispatching unless involving them is done explicitly (for example, by sending them a message in the callback).</source>
          <target state="translated">如果有多个分区（通过生成的任务），则在串行或同时调用&lt;a href=&quot;#dispatch/3&quot;&gt; &lt;code&gt;dispatch/3&lt;/code&gt; &lt;/a&gt;的过程中发生调度。除非显式完成已注册的进程（例如，通过在回调中向它们发送消息），否则它们不会参与调度。</target>
        </trans-unit>
        <trans-unit id="129dd56090745e370bed845813615f5c08f21b2a" translate="yes" xml:space="preserve">
          <source>Distributed tasks</source>
          <target state="translated">分布式任务</target>
        </trans-unit>
        <trans-unit id="aef0124ef44afd7de1feb0a9b09b0c6ee2798fe2" translate="yes" xml:space="preserve">
          <source>Distributed tasks and tags</source>
          <target state="translated">分布式任务和标签</target>
        </trans-unit>
        <trans-unit id="b4c7a18ac5c24ec1029c892a8a7fb3fbcc59af1d" translate="yes" xml:space="preserve">
          <source>Distributed tasks are exactly the same as supervised tasks. The only difference is that we pass the node name when spawning the task on the supervisor. Open up &lt;code&gt;lib/kv/supervisor.ex&lt;/code&gt; from the &lt;code&gt;:kv&lt;/code&gt; application. Let&amp;rsquo;s add a task supervisor as the last child of the tree:</source>
          <target state="translated">分布式任务与受监管任务完全相同。唯一的区别是，在主管上生成任务时，我们传递节点名称。从 &lt;code&gt;:kv&lt;/code&gt; 应用程序打开 &lt;code&gt;lib/kv/supervisor.ex&lt;/code&gt; 。让我们添加一个任务管理器作为树的最后一个子代：</target>
        </trans-unit>
        <trans-unit id="98348afa0d882c80ed7d05917265b30ff93c136a" translate="yes" xml:space="preserve">
          <source>Divides a string into parts based on a pattern.</source>
          <target state="translated">根据模式将一个字符串分成若干部分。</target>
        </trans-unit>
        <trans-unit id="4f19d3c5ba97dc473a0dd975ca453b2aa1eeca76" translate="yes" xml:space="preserve">
          <source>Divides a string into substrings at each Unicode whitespace occurrence with leading and trailing whitespace ignored. Groups of whitespace are treated as a single occurrence. Divisions do not occur on non-breaking whitespace.</source>
          <target state="translated">在每个Unicode空白处将字符串分割成子串,忽略前面和后面的空白。空格组被视为一个单一的出现。分割不会发生在非断裂的空白处。</target>
        </trans-unit>
        <trans-unit id="6e4d17c0fddf7977be47a1ef9b14e7b1d0cef265" translate="yes" xml:space="preserve">
          <source>Do not rely on the particular format returned by the &lt;code&gt;format*&lt;/code&gt; functions in this module. They may be changed in future releases in order to better suit Elixir's tool chain. In other words, by using the functions in this module it is guaranteed you will format exceptions as in the current Elixir version being used.</source>
          <target state="translated">不要依赖此模块中 &lt;code&gt;format*&lt;/code&gt; 函数返回的特定格式。为了将来更好地适应Elixir的工具链，可能会对其进行更改。换句话说，通过使用此模块中的函数，可以确保您将格式化异常，就像正在使用的当前Elixir版本一样。</target>
        </trans-unit>
        <trans-unit id="5be89a1272cff39c64911be3f9a33057d2a2263c" translate="yes" xml:space="preserve">
          <source>Do not use &lt;a href=&quot;mix.project#config/0&quot;&gt;&lt;code&gt;Mix.Project.config/0&lt;/code&gt;&lt;/a&gt; to find the runtime configuration. Use it only to configure aspects of your project (like compilation directories) and not your application runtime.</source>
          <target state="translated">不要使用&lt;a href=&quot;mix.project#config/0&quot;&gt; &lt;code&gt;Mix.Project.config/0&lt;/code&gt; &lt;/a&gt;查找运行时配置。仅用于配置项目的各个方面（例如编译目录），而不能用于配置应用程序运行时。</target>
        </trans-unit>
        <trans-unit id="a8d3dcf5e3a5a8a9d6963913c532d9b07e33dbf9" translate="yes" xml:space="preserve">
          <source>Do not use special match variables &lt;code&gt;:&quot;$_&quot;&lt;/code&gt; and &lt;code&gt;:&quot;$$&quot;&lt;/code&gt;, because they might not work as expected.</source>
          <target state="translated">不要使用特殊的匹配变量 &lt;code&gt;:&quot;$_&quot;&lt;/code&gt; 和 &lt;code&gt;:&quot;$$&quot;&lt;/code&gt; ，因为它们可能无法正常工作。</target>
        </trans-unit>
        <trans-unit id="9078c7f338a72de9ec9a277913417c733a31c6ad" translate="yes" xml:space="preserve">
          <source>Do not use this function to generate a sequence of numbers. If blocking the caller process is not necessary, use &lt;code&gt;Stream.iterate(0, &amp;amp; &amp;amp;1 + 1)&lt;/code&gt; instead.</source>
          <target state="translated">不要使用此函数生成数字序列。如果不需要阻止调用者进程，请改用 &lt;code&gt;Stream.iterate(0, &amp;amp; &amp;amp;1 + 1)&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="5e01c221d853296d84e769113c74b2df4ca129d1" translate="yes" xml:space="preserve">
          <source>Doctests</source>
          <target state="translated">Doctests</target>
        </trans-unit>
        <trans-unit id="fd6f84b7484c0cf7709bebbb23583c23abf1b083" translate="yes" xml:space="preserve">
          <source>Doctests are specified by an indentation of four spaces followed by the &lt;code&gt;iex&amp;gt;&lt;/code&gt; prompt in a documentation string. If a command spans multiple lines, you can use &lt;code&gt;...&amp;gt;&lt;/code&gt;, as in IEx. The expected result should start at the next line after &lt;code&gt;iex&amp;gt;&lt;/code&gt; or &lt;code&gt;...&amp;gt;&lt;/code&gt; line(s) and is terminated either by a newline or a new &lt;code&gt;iex&amp;gt;&lt;/code&gt; prefix.</source>
          <target state="translated">Doctest由缩进的四个空格指定，后跟文档字符串中的 &lt;code&gt;iex&amp;gt;&lt;/code&gt; 提示。如果命令跨越多行，则可以像IEx一样使用 &lt;code&gt;...&amp;gt;&lt;/code&gt; 。预期结果应从 &lt;code&gt;iex&amp;gt;&lt;/code&gt; 或 &lt;code&gt;...&amp;gt;&lt;/code&gt; 行之后的下一行开始，并以换行符或新的 &lt;code&gt;iex&amp;gt;&lt;/code&gt; 前缀终止。</target>
        </trans-unit>
        <trans-unit id="acfc0021db2710ad6e5c5976444819b508e6a8e7" translate="yes" xml:space="preserve">
          <source>Doctests, patterns and with</source>
          <target state="translated">实验、模式和与</target>
        </trans-unit>
        <trans-unit id="9e9cf3221a30246219863f1d2366e36cb580debc" translate="yes" xml:space="preserve">
          <source>Documentation</source>
          <target state="translated">Documentation</target>
        </trans-unit>
        <trans-unit id="dbeb3b73b289a45968e86a1c4e28757eddbb7b21" translate="yes" xml:space="preserve">
          <source>Documentation != Code comments</source>
          <target state="translated">文档 !=代码注释</target>
        </trans-unit>
        <trans-unit id="dc66ec30a9e7992a7f99224cd60ef6a9e6f7c515" translate="yes" xml:space="preserve">
          <source>Documentation in Elixir is usually attached to module attributes. Let's see an example:</source>
          <target state="translated">Elixir中的文档通常附加在模块属性中。我们来看一个例子。</target>
        </trans-unit>
        <trans-unit id="d46677a0ad1e404b917f0ea8b3b31b80c34ffa5f" translate="yes" xml:space="preserve">
          <source>Documentation metadata</source>
          <target state="translated">文件元数据</target>
        </trans-unit>
        <trans-unit id="fcb85c951e6d656fcd603d110a64fcd8866200d9" translate="yes" xml:space="preserve">
          <source>Documents in a group are attempted to be rendered together to the best of the renderer ability.</source>
          <target state="translated">一组文档中的文档会在渲染者的能力范围内尝试一起渲染。</target>
        </trans-unit>
        <trans-unit id="7bd6d91ba0fc6656f3596671325c2a8e0bccb23f" translate="yes" xml:space="preserve">
          <source>Does not load any of the implementations.</source>
          <target state="translated">不加载任何的实现。</target>
        </trans-unit>
        <trans-unit id="e1c5568ff1b2696956a80de3fbdad95c454b1c9a" translate="yes" xml:space="preserve">
          <source>Does not load any of the protocols.</source>
          <target state="translated">不加载任何协议。</target>
        </trans-unit>
        <trans-unit id="c263be485f93e4de275853028d24c5388efd78f6" translate="yes" xml:space="preserve">
          <source>Doing 0.1 * 0.1 should return 0.01, but because 0.1 is actually 0.1000000014, the result is 0.010000000000000002, and because this is not the closest representable number to 0.01, you'll get the wrong result for this operation</source>
          <target state="translated">做0.1*0.1应该返回0.01,但由于0.1实际上是0.1000000014,所以结果是0.010000000000000002,由于这不是最接近0.01的可表示数,所以你会得到这个操作的错误结果。</target>
        </trans-unit>
        <trans-unit id="576aa93d193455e3276b07f4cd2af71d8167c617" translate="yes" xml:space="preserve">
          <source>Doing it in reverse order will raise a syntax error:</source>
          <target state="translated">如果按相反的顺序进行,会引起语法错误。</target>
        </trans-unit>
        <trans-unit id="a56ad56b6280b6eca6747cdcbe707267d3443caf" translate="yes" xml:space="preserve">
          <source>Domain-specific languages</source>
          <target state="translated">特定领域的语言</target>
        </trans-unit>
        <trans-unit id="e6ab4e40cdc60406c301246d5709b2813b1c0221" translate="yes" xml:space="preserve">
          <source>Don&amp;rsquo;t drink the kool aid</source>
          <target state="translated">不要喝库尔援助</target>
        </trans-unit>
        <trans-unit id="bfd4ab20e5eed869032f79c7d0b2472213257269" translate="yes" xml:space="preserve">
          <source>Don&amp;rsquo;t forget that you can also check the &lt;a href=&quot;https://github.com/elixir-lang/elixir&quot;&gt;source code of Elixir itself&lt;/a&gt;, which is mostly written in Elixir (mainly the &lt;code&gt;lib&lt;/code&gt; directory), or &lt;a href=&quot;https://elixir-lang.org/docs.html&quot;&gt;explore Elixir&amp;rsquo;s documentation&lt;/a&gt;.</source>
          <target state="translated">别忘了，您还可以检查&lt;a href=&quot;https://github.com/elixir-lang/elixir&quot;&gt;Elixir本身&lt;/a&gt;的源代码（主要用Elixir（主要是 &lt;code&gt;lib&lt;/code&gt; 目录）编写），或者&lt;a href=&quot;https://elixir-lang.org/docs.html&quot;&gt;浏览Elixir的文档&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="8e3dff4b81533f75ceec6a97ebb6191aa309061e" translate="yes" xml:space="preserve">
          <source>Drops elements at the beginning of the &lt;code&gt;enumerable&lt;/code&gt; while &lt;code&gt;fun&lt;/code&gt; returns a truthy value.</source>
          <target state="translated">在 &lt;code&gt;enumerable&lt;/code&gt; 的开头删除元素，而 &lt;code&gt;fun&lt;/code&gt; 返回真实值。</target>
        </trans-unit>
        <trans-unit id="594f287d9f0bd3fb9ea891584418c737436dd38e" translate="yes" xml:space="preserve">
          <source>Drops the &lt;code&gt;amount&lt;/code&gt; of elements from the &lt;code&gt;enumerable&lt;/code&gt;.</source>
          <target state="translated">从 &lt;code&gt;enumerable&lt;/code&gt; 删除元素的 &lt;code&gt;amount&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="ab32b2e5c71cd1c17d36b26a0d25edc63a27b074" translate="yes" xml:space="preserve">
          <source>Drops the given &lt;code&gt;keys&lt;/code&gt; from &lt;code&gt;map&lt;/code&gt;.</source>
          <target state="translated">从 &lt;code&gt;map&lt;/code&gt; 中删除给定的 &lt;code&gt;keys&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="cdb8b8343fe7d1adbf36b056e528d2571ea6a12c" translate="yes" xml:space="preserve">
          <source>Drops the given keys from the keyword list.</source>
          <target state="translated">从关键字列表中删除给定的键。</target>
        </trans-unit>
        <trans-unit id="69c0475e80c404bbdc2d49a7a643fb10c6ace760" translate="yes" xml:space="preserve">
          <source>Due to immutability, loops in Elixir (as in any functional programming language) are written differently from imperative languages. For example, in an imperative language like C, one would write:</source>
          <target state="translated">由于不可变性,Elixir中的循环(与任何函数式编程语言一样)的写法与命令式语言不同。例如,在C语言这样的命令式语言中,人们会写:</target>
        </trans-unit>
        <trans-unit id="5cf07ff6fe7f2d796d09183c5eda29bcd66f1127" translate="yes" xml:space="preserve">
          <source>Due to their cons cell based representation, prepending an element to a list is always fast (constant time), while appending becomes slower as the list grows in size (linear time):</source>
          <target state="translated">由于它们基于cons单元格的表示方式,将一个元素预存入列表总是很快的(恒定时间),而随着列表大小的增加(线性时间),追加变得更慢。</target>
        </trans-unit>
        <trans-unit id="4f1ef09b3bb7845a809a8a0e2e38529155ed603e" translate="yes" xml:space="preserve">
          <source>Due to their laziness, streams are useful when working with large (or even infinite) collections. When chaining many operations with &lt;a href=&quot;enum&quot;&gt;&lt;code&gt;Enum&lt;/code&gt;&lt;/a&gt;, intermediate lists are created, while &lt;a href=&quot;#content&quot;&gt;&lt;code&gt;Stream&lt;/code&gt;&lt;/a&gt; creates a recipe of computations that are executed at a later moment. Let's see another example:</source>
          <target state="translated">由于它们的惰性，在处理大型（甚至无限）集合时，流非常有用。当用&lt;a href=&quot;enum&quot;&gt; &lt;code&gt;Enum&lt;/code&gt; &lt;/a&gt;链接许多操作时，会创建中间列表，而&lt;a href=&quot;#content&quot;&gt; &lt;code&gt;Stream&lt;/code&gt; &lt;/a&gt;会创建稍后执行的计算配方。让我们看另一个例子：</target>
        </trans-unit>
        <trans-unit id="9895fb241f7b45a9dc3e35cea835d242910bcea5" translate="yes" xml:space="preserve">
          <source>Due to this property, Elixir relies on functions starting with underscore to attach compile-time metadata to modules. Such functions are most often in the &lt;code&gt;__foo__&lt;/code&gt; format. For example, every module in Elixir has an &lt;a href=&quot;module#c:__info__/1&quot;&gt;&lt;code&gt;__info__/1&lt;/code&gt;&lt;/a&gt; function:</source>
          <target state="translated">由于此属性，Elixir依靠以下划线开头的函数将编译时元数据附加到模块。此类函数通常采用 &lt;code&gt;__foo__&lt;/code&gt; 格式。例如，Elixir中的每个模块都有一个&lt;a href=&quot;module#c:__info__/1&quot;&gt; &lt;code&gt;__info__/1&lt;/code&gt; &lt;/a&gt;函数：</target>
        </trans-unit>
        <trans-unit id="7d17d072820769c205a9be99134b8181cc1f8d63" translate="yes" xml:space="preserve">
          <source>Duplicated entries are removed, the latest one prevails. Unlike &lt;code&gt;Enum.into(enumerable, [])&lt;/code&gt;, &lt;code&gt;Keyword.new(enumerable)&lt;/code&gt; guarantees the keys are unique.</source>
          <target state="translated">重复的条目将被删除，以最新的为准。与 &lt;code&gt;Enum.into(enumerable, [])&lt;/code&gt; ， &lt;code&gt;Keyword.new(enumerable)&lt;/code&gt; 保证键是唯一的。</target>
        </trans-unit>
        <trans-unit id="076f63ae0f418e3862988b172f7c4cc5852450a8" translate="yes" xml:space="preserve">
          <source>Duplicated entries are removed, the latest one prevails. Unlike &lt;code&gt;Enum.into(enumerable, [], fun)&lt;/code&gt;, &lt;code&gt;Keyword.new(enumerable, fun)&lt;/code&gt; guarantees the keys are unique.</source>
          <target state="translated">重复的条目将被删除，以最新的为准。与 &lt;code&gt;Enum.into(enumerable, [], fun)&lt;/code&gt; ， &lt;code&gt;Keyword.new(enumerable, fun)&lt;/code&gt; 确保键是唯一的。</target>
        </trans-unit>
        <trans-unit id="64aa4fe0da505292ed7a57df0b239e0d4183ccec" translate="yes" xml:space="preserve">
          <source>Duplicated keys appear duplicated in the final list of keys.</source>
          <target state="translated">重复的键在最后的键列表中出现重复。</target>
        </trans-unit>
        <trans-unit id="efdd2fd6681b594f9b79a82e9b5aa48b4fbf5e9b" translate="yes" xml:space="preserve">
          <source>Duplicated keys are not removed.</source>
          <target state="translated">重复的钥匙不会被删除。</target>
        </trans-unit>
        <trans-unit id="ac53e68a8e0e729bf98aeec7ce7b6340de177d35" translate="yes" xml:space="preserve">
          <source>Duplicated keys are preserved in the new keyword list.</source>
          <target state="translated">重复的键在新的关键字列表中被保留。</target>
        </trans-unit>
        <trans-unit id="b3b6f1eeffe99ed90517ec6eae526962d142636d" translate="yes" xml:space="preserve">
          <source>Duplicated keys are removed; the latest one prevails.</source>
          <target state="translated">重复的钥匙被删除,以最新的钥匙为准。</target>
        </trans-unit>
        <trans-unit id="9ba8d07a9bc46aeb1c779fab12a8b4dd715ff170" translate="yes" xml:space="preserve">
          <source>Duplicates the given element &lt;code&gt;n&lt;/code&gt; times in a list.</source>
          <target state="translated">将给定元素在列表中复制 &lt;code&gt;n&lt;/code&gt; 次。</target>
        </trans-unit>
        <trans-unit id="612d35050e691a1a2b9f22fe6b8f2fde9cb8f9d1" translate="yes" xml:space="preserve">
          <source>Dynamic dispatch</source>
          <target state="translated">动态调度</target>
        </trans-unit>
        <trans-unit id="edd7dafc098b4b13db6ad466bd4e821198c0337f" translate="yes" xml:space="preserve">
          <source>Dynamic names</source>
          <target state="translated">动态名称</target>
        </trans-unit>
        <trans-unit id="46d2782a295d697a8b9e27c2d91c25f66bfd854d" translate="yes" xml:space="preserve">
          <source>Dynamic supervisors</source>
          <target state="translated">动态主管</target>
        </trans-unit>
        <trans-unit id="3aa9130077fcc44c7eb24ab3a909359998b572f0" translate="yes" xml:space="preserve">
          <source>DynamicSupervisor</source>
          <target state="translated">DynamicSupervisor</target>
        </trans-unit>
        <trans-unit id="4981d257018e7d749e02934b79c0b6bdb94f8f95" translate="yes" xml:space="preserve">
          <source>DynamicSupervisor &lt;small&gt;behaviour&lt;/small&gt;</source>
          <target state="translated">DynamicSupervisor &lt;small&gt;行为&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="7ba279830cac8f3b7ac440b34f16c258d525250e" translate="yes" xml:space="preserve">
          <source>Dynamically adds a child specification to &lt;code&gt;supervisor&lt;/code&gt; and starts that child.</source>
          <target state="translated">动态将子级规范添加到 &lt;code&gt;supervisor&lt;/code&gt; 并启动该子级。</target>
        </trans-unit>
        <trans-unit id="887cf55c60fc1c9af6689bd5e2a2c3b3766133c3" translate="yes" xml:space="preserve">
          <source>Dynamically supervised tasks</source>
          <target state="translated">动态监管的任务</target>
        </trans-unit>
        <trans-unit id="5b16ec2483e166fe049f665c022763eabe66f30f" translate="yes" xml:space="preserve">
          <source>EEx</source>
          <target state="translated">EEx</target>
        </trans-unit>
        <trans-unit id="af3993684170f3f24c787f9d7ffb881775da9c68" translate="yes" xml:space="preserve">
          <source>EEx has the concept of engines which allows you to modify or transform the code extracted from the given string or file.</source>
          <target state="translated">EEx具有引擎的概念,它允许你修改或转换从给定字符串或文件中提取的代码。</target>
        </trans-unit>
        <trans-unit id="818fc332cfd248836c5442317677dfe04bdbbd73" translate="yes" xml:space="preserve">
          <source>EEx stands for Embedded Elixir. It allows you to embed Elixir code inside a string in a robust way.</source>
          <target state="translated">EEx是Embedded Elixir的缩写。它允许你以一种强大的方式将Elixir代码嵌入到字符串中。</target>
        </trans-unit>
        <trans-unit id="22a24f67ecb347cc9015ff6237454fdbf0669653" translate="yes" xml:space="preserve">
          <source>EEx.Engine &lt;small&gt;behaviour&lt;/small&gt;</source>
          <target state="translated">EEx.Engine &lt;small&gt;行为&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="eebf2acaee05e7c09c816457012d68bbfc96c6f3" translate="yes" xml:space="preserve">
          <source>EEx.SmartEngine</source>
          <target state="translated">EEx.SmartEngine</target>
        </trans-unit>
        <trans-unit id="674e9c18d21c34b87c83982cf9afa4d95159a4be" translate="yes" xml:space="preserve">
          <source>EEx.SyntaxError</source>
          <target state="translated">EEx.SyntaxError</target>
        </trans-unit>
        <trans-unit id="49bba56082c8e3c9fff304ab7864ed3cb3a25fb5" translate="yes" xml:space="preserve">
          <source>EEx.SyntaxError &lt;small&gt;exception&lt;/small&gt;</source>
          <target state="translated">EEx.SyntaxError &lt;small&gt;异常&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="98d18c239604c617df6f8788536838fd25d8c03d" translate="yes" xml:space="preserve">
          <source>EEx: &lt;code&gt;&amp;lt;%=&lt;/code&gt; in middle and end expressions</source>
          <target state="translated">EEx：中间表达式和结尾表达式中的 &lt;code&gt;&amp;lt;%=&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="7eceb14d6ed554f3e39c3487db659c8d63e28acd" translate="yes" xml:space="preserve">
          <source>ETS</source>
          <target state="translated">ETS</target>
        </trans-unit>
        <trans-unit id="1500176ef8cc8bfbbaf08eb4c1316bcf890f3395" translate="yes" xml:space="preserve">
          <source>ETS (Erlang Term Storage)</source>
          <target state="translated">ETS (Erlang Term Storage)</target>
        </trans-unit>
        <trans-unit id="4f5a2cc3fa91eb59c67ada064593bcea69c5e3b4" translate="yes" xml:space="preserve">
          <source>ETS allows us to store any Elixir term in an in-memory table. Working with ETS tables is done via &lt;a href=&quot;http://www.erlang.org/doc/man/ets.html&quot;&gt;Erlang&amp;rsquo;s &lt;code&gt;:ets&lt;/code&gt; module&lt;/a&gt;:</source>
          <target state="translated">ETS允许我们将任何Elixir术语存储在内存表中。使用ETS表通过&lt;a href=&quot;http://www.erlang.org/doc/man/ets.html&quot;&gt;Erlang的 &lt;code&gt;:ets&lt;/code&gt; 模块完成&lt;/a&gt;：</target>
        </trans-unit>
        <trans-unit id="8e8dd8378100a7f6cf535d73f581bb5835a296a0" translate="yes" xml:space="preserve">
          <source>ETS as a cache</source>
          <target state="translated">ETS作为一个缓存</target>
        </trans-unit>
        <trans-unit id="0c6b672feadc74b2fa303a786fd5682cec52505f" translate="yes" xml:space="preserve">
          <source>ETS lets you create a table containing tuples. By default, ETS tables are protected, which means only the owner process may write to the table but any other process can read. ETS has some functionality to allow a table to be used as a simple database, a key-value store or as a cache mechanism.</source>
          <target state="translated">ETS可以让你创建一个包含元组的表。默认情况下,ETS表是受保护的,这意味着只有所有者进程可以向表写入,但任何其他进程都可以读取。ETS有一些功能,可以让表作为一个简单的数据库、一个键值存储或作为一个缓存机制使用。</target>
        </trans-unit>
        <trans-unit id="52adb6284390fce5741221672f061e71df403d05" translate="yes" xml:space="preserve">
          <source>ETS tables can also be named, allowing us to access them by a given name:</source>
          <target state="translated">ETS表也可以被命名,允许我们通过一个给定的名称来访问它们。</target>
        </trans-unit>
        <trans-unit id="362cea4d522d64f424e9ad3e438c8000b26fb5c9" translate="yes" xml:space="preserve">
          <source>Each &lt;code&gt;enumerable&lt;/code&gt; element is passed as argument to the given function &lt;code&gt;fun&lt;/code&gt; and processed by its own task. The tasks will be linked to the current process, similarly to &lt;a href=&quot;#async/1&quot;&gt;&lt;code&gt;async/1&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">每个 &lt;code&gt;enumerable&lt;/code&gt; 元素都作为参数传递给给定函数 &lt;code&gt;fun&lt;/code&gt; ，并由其自己的任务处理。任务将链接到当前进程，类似于&lt;a href=&quot;#async/1&quot;&gt; &lt;code&gt;async/1&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="c70223b508f5fb20c656733438516d9c4a38e207" translate="yes" xml:space="preserve">
          <source>Each application has an environment that stores the application&amp;rsquo;s specific configuration by key. For example, we could store the routing table in the &lt;code&gt;:kv&lt;/code&gt; application environment, giving it a default value and allowing other applications to change the table as needed.</source>
          <target state="translated">每个应用程序都有一个环境，该环境可以通过密钥存储应用程序的特定配置。例如，我们可以将路由表存储在 &lt;code&gt;:kv&lt;/code&gt; 应用程序环境中，为其指定默认值，并允许其他应用程序根据需要更改该表。</target>
        </trans-unit>
        <trans-unit id="30b77596010e1d94e168b64218473fa0c4476548" translate="yes" xml:space="preserve">
          <source>Each application in our system can be started and stopped. The rules for starting and stopping an application are also defined in the &lt;code&gt;.app&lt;/code&gt; file. When we invoke &lt;code&gt;iex -S mix&lt;/code&gt;, Mix compiles our application and then starts it.</source>
          <target state="translated">我们系统中的每个应用程序都可以启动和停止。 &lt;code&gt;.app&lt;/code&gt; 文件中还定义了启动和停止应用程序的规则。当我们调用 &lt;code&gt;iex -S mix&lt;/code&gt; 时，Mix会编译我们的应用程序，然后启动它。</target>
        </trans-unit>
        <trans-unit id="6ee7cee4e35c13e97e0b113c7ad93de2b2e9f9ff" translate="yes" xml:space="preserve">
          <source>Each element in &lt;code&gt;enumerable&lt;/code&gt; is passed as argument to the given function &lt;code&gt;fun&lt;/code&gt; and processed by its own task. The tasks will be spawned under the given &lt;code&gt;supervisor&lt;/code&gt; and linked to the current process, similarly to &lt;a href=&quot;#async/2&quot;&gt;&lt;code&gt;async/2&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;enumerable&lt;/code&gt; 每个元素都作为参数传递给给定函数 &lt;code&gt;fun&lt;/code&gt; ，并由其自己的任务处理。任务将在给定的 &lt;code&gt;supervisor&lt;/code&gt; 下生成，并链接到当前进程，类似于&lt;a href=&quot;#async/2&quot;&gt; &lt;code&gt;async/2&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="0bff2b054449ef93f88ae378fceaa7c3773b512d" translate="yes" xml:space="preserve">
          <source>Each element in &lt;code&gt;enumerable&lt;/code&gt; is passed as argument to the given function &lt;code&gt;fun&lt;/code&gt; and processed by its own task. The tasks will be spawned under the given &lt;code&gt;supervisor&lt;/code&gt; and will not be linked to the current process, similarly to &lt;a href=&quot;#async_nolink/2&quot;&gt;&lt;code&gt;async_nolink/2&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;enumerable&lt;/code&gt; 每个元素都作为参数传递给给定函数 &lt;code&gt;fun&lt;/code&gt; ，并由其自己的任务处理。任务将在给定的 &lt;code&gt;supervisor&lt;/code&gt; 下生成，并且不会链接到当前进程，类似于&lt;a href=&quot;#async_nolink/2&quot;&gt; &lt;code&gt;async_nolink/2&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="f8ff31374c6e0e1792073cfd7bf59921a2ee8196" translate="yes" xml:space="preserve">
          <source>Each element in &lt;code&gt;enumerable&lt;/code&gt; will be prepended to the given &lt;code&gt;args&lt;/code&gt; and processed by its own task. The tasks will be spawned under the given &lt;code&gt;supervisor&lt;/code&gt; and will not be linked to the current process, similarly to &lt;a href=&quot;#async_nolink/4&quot;&gt;&lt;code&gt;async_nolink/4&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;enumerable&lt;/code&gt; 每个元素都将放在给定的 &lt;code&gt;args&lt;/code&gt; 之前，并由其自己的任务处理。任务将在给定的 &lt;code&gt;supervisor&lt;/code&gt; 下生成，并且不会链接到当前进程，类似于&lt;a href=&quot;#async_nolink/4&quot;&gt; &lt;code&gt;async_nolink/4&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="3e074b39ec3a1ed372a909c0a3201829b19421e8" translate="yes" xml:space="preserve">
          <source>Each element of &lt;code&gt;enumerable&lt;/code&gt; will be prepended to the given &lt;code&gt;args&lt;/code&gt; and processed by its own task. The tasks will be linked to an intermediate process that is then linked to the current process. This means a failure in a task terminates the current process and a failure in the current process terminates all tasks.</source>
          <target state="translated">每个 &lt;code&gt;enumerable&lt;/code&gt; 元素都将放在给定的 &lt;code&gt;args&lt;/code&gt; 之前，并由其自己的任务处理。任务将链接到中间流程，然后再链接到当前流程。这意味着任务中的失败会终止当前进程，而当前过程中的失败会终止所有任务。</target>
        </trans-unit>
        <trans-unit id="ea81b39bec07b5eca51e7cb8e73b08cc88b185e5" translate="yes" xml:space="preserve">
          <source>Each element will be prepended to the given &lt;code&gt;args&lt;/code&gt; and processed by its own task. The tasks will be spawned under the given &lt;code&gt;supervisor&lt;/code&gt; and linked to the current process, similarly to &lt;a href=&quot;#async/4&quot;&gt;&lt;code&gt;async/4&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">每个元素都将放在给定的 &lt;code&gt;args&lt;/code&gt; 之前，并由其自己的任务处理。任务将在给定的 &lt;code&gt;supervisor&lt;/code&gt; 下生成并链接到当前进程，类似于&lt;a href=&quot;#async/4&quot;&gt; &lt;code&gt;async/4&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="77459e85ee4402d66fd92ef0b7844cafe8faeccd" translate="yes" xml:space="preserve">
          <source>Each entry in the registry is associated to the process that has registered the key. If the process crashes, the keys associated to that process are automatically removed. All key comparisons in the registry are done using the match operation (&lt;a href=&quot;kernel#===/2&quot;&gt;&lt;code&gt;===/2&lt;/code&gt;&lt;/a&gt;).</source>
          <target state="translated">注册表中的每个条目都与已注册密钥的进程相关联。如果该进程崩溃，则与该进程关联的密钥将自动删除。注册表中的所有键比较都是使用match操作（&lt;a href=&quot;kernel#===/2&quot;&gt; &lt;code&gt;===/2&lt;/code&gt; &lt;/a&gt;）完成的。</target>
        </trans-unit>
        <trans-unit id="f51dcc2b38618bcc3fe87f6cb31bfc9d58a91577" translate="yes" xml:space="preserve">
          <source>Each item in the list is a map with the following keys:</source>
          <target state="translated">列表中的每一个项目都是一张地图,其按键如下。</target>
        </trans-unit>
        <trans-unit id="532f0099dc0a59c8142722d964bd46289ef70cfc" translate="yes" xml:space="preserve">
          <source>Each key-value pair in the map is converted to a two-element tuple &lt;code&gt;{key, value}&lt;/code&gt; in the resulting list.</source>
          <target state="translated">映射中的每个键值对都将在结果列表中转换为包含两个元素的元组 &lt;code&gt;{key, value}&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="4934170f741619738531430df9405d17c3b39b24" translate="yes" xml:space="preserve">
          <source>Each module can be decorated with one or more attributes. The following ones are currently defined by Elixir:</source>
          <target state="translated">每个模块可以用一个或多个属性来装饰。目前Elixir定义的属性如下:</target>
        </trans-unit>
        <trans-unit id="9ac8e172618067a3e6bc12be54b49bfe15535ac3" translate="yes" xml:space="preserve">
          <source>Each module gets an &lt;code&gt;__info__/1&lt;/code&gt; function when it's compiled. The function takes one of the following items:</source>
          <target state="translated">每个模块在编译时都会获得 &lt;code&gt;__info__/1&lt;/code&gt; 函数。该函数采用以下项目之一：</target>
        </trans-unit>
        <trans-unit id="e4ebc93808a7013b1682e04607e3d5c0727d33dc" translate="yes" xml:space="preserve">
          <source>Each number given to a binary is meant to represent a byte and therefore must go up to 255. Binaries allow modifiers to be given to store numbers bigger than 255 or to convert a code point to its UTF-8 representation:</source>
          <target state="translated">给予二进制的每一个数字都是为了代表一个字节,因此必须达到255。二进制允许给出修饰符来存储大于255的数字,或将码点转换为UTF-8表示。</target>
        </trans-unit>
        <trans-unit id="372725c1f82abeb98e09b054fcea454db1d9af25" translate="yes" xml:space="preserve">
          <source>Each process started with the application must be listed as a child under the &lt;a href=&quot;supervisor&quot;&gt;&lt;code&gt;Supervisor&lt;/code&gt;&lt;/a&gt; above. We call those &quot;static processes&quot; because they are known upfront. For handling dynamic processes, such as the ones started during requests and other user inputs, look at the &lt;a href=&quot;dynamicsupervisor&quot;&gt;&lt;code&gt;DynamicSupervisor&lt;/code&gt;&lt;/a&gt; module.</source>
          <target state="translated">从应用程序启动的每个过程都必须在上面的&amp;ldquo; &lt;a href=&quot;supervisor&quot;&gt; &lt;code&gt;Supervisor&lt;/code&gt; &lt;/a&gt;下列为子项。我们称它们为&amp;ldquo;静态过程&amp;rdquo;，因为它们是预先已知的。要处理动态流程，例如在请求和其他用户输入期间启动的动态流程，请查看&lt;a href=&quot;dynamicsupervisor&quot;&gt; &lt;code&gt;DynamicSupervisor&lt;/code&gt; &lt;/a&gt;模块。</target>
        </trans-unit>
        <trans-unit id="a1a597396bbd78d869061e9cc988eca475a9257e" translate="yes" xml:space="preserve">
          <source>Each task has its own options and sometimes specific configuration to be defined in the &lt;code&gt;project/0&lt;/code&gt; function. You can use &lt;a href=&quot;mix.tasks.help&quot;&gt;&lt;code&gt;mix help&lt;/code&gt;&lt;/a&gt; to list all available tasks and &lt;code&gt;mix help NAME&lt;/code&gt; to show help for a particular task.</source>
          <target state="translated">每个任务都有其自己的选项，有时还需要在 &lt;code&gt;project/0&lt;/code&gt; 函数中定义特定的配置。您可以使用&lt;a href=&quot;mix.tasks.help&quot;&gt; &lt;code&gt;mix help&lt;/code&gt; &lt;/a&gt;列出所有可用任务，并使用 &lt;code&gt;mix help NAME&lt;/code&gt; 显示特定任务的帮助。</target>
        </trans-unit>
        <trans-unit id="bcac1b6f9d120c9722086c7e508489b0226da684" translate="yes" xml:space="preserve">
          <source>Each variable is identified by a tuple of two elements, where the first element is the variable name as an atom and the second element is its context, which may be an atom or an integer.</source>
          <target state="translated">每个变量由两个元素组成的元组来标识,其中第一个元素是作为原子的变量名,第二个元素是它的上下文,可以是一个原子或一个整数。</target>
        </trans-unit>
        <trans-unit id="68310c7d97bd5e9d47967e9e9edcb285e94d70ff" translate="yes" xml:space="preserve">
          <source>Eager to learn more? Keep reading!</source>
          <target state="translated">急于了解更多?请继续阅读!</target>
        </trans-unit>
        <trans-unit id="773015863b8b24712e29c53fe98994b9728f6381" translate="yes" xml:space="preserve">
          <source>Eager vs Lazy</source>
          <target state="translated">渴望与懒惰</target>
        </trans-unit>
        <trans-unit id="28ac06af2cb7839cf14f9821c41dfad421032a0a" translate="yes" xml:space="preserve">
          <source>Echo server</source>
          <target state="translated">回音服务器</target>
        </trans-unit>
        <trans-unit id="eeccb169551120a3e6a633e63e844185e028c154" translate="yes" xml:space="preserve">
          <source>Edit the file at &lt;code&gt;lib/kv/registry.ex&lt;/code&gt;, filling in the blanks for the client API:</source>
          <target state="translated">在 &lt;code&gt;lib/kv/registry.ex&lt;/code&gt; 上编辑文件，填写客户端API的空白：</target>
        </trans-unit>
        <trans-unit id="25857c2157bff6e7a9f798c89b04873173125f2d" translate="yes" xml:space="preserve">
          <source>Elements are compared using &lt;a href=&quot;kernel#===/2&quot;&gt;&lt;code&gt;===/2&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">使用&lt;a href=&quot;kernel#===/2&quot;&gt; &lt;code&gt;===/2&lt;/code&gt; &lt;/a&gt;比较元素。</target>
        </trans-unit>
        <trans-unit id="b1bc7fb1f226e6f6f3ef7ee47c49d49289229118" translate="yes" xml:space="preserve">
          <source>Elements are only emitted when &lt;code&gt;fun&lt;/code&gt; returns a new value or the &lt;code&gt;enum&lt;/code&gt; finishes.</source>
          <target state="translated">仅当 &lt;code&gt;fun&lt;/code&gt; 返回一个新值或 &lt;code&gt;enum&lt;/code&gt; 完成时才发出元素。</target>
        </trans-unit>
        <trans-unit id="c0c7bf14304705b88f3bf9ecdfcf919293c76e53" translate="yes" xml:space="preserve">
          <source>Elixir</source>
          <target state="translated">Elixir</target>
        </trans-unit>
        <trans-unit id="e5c4daa79e73a93f8dc527746d72ef1e1f99e8dd" translate="yes" xml:space="preserve">
          <source>Elixir 1.5.0 onwards</source>
          <target state="translated">Elixir 1.5.0起。</target>
        </trans-unit>
        <trans-unit id="67dd209de0ff8f0eac333c13b028cb684c348812" translate="yes" xml:space="preserve">
          <source>Elixir 1.9.0 onwards</source>
          <target state="translated">Elixir 1.9.0起。</target>
        </trans-unit>
        <trans-unit id="bff9443fa7cf4ae0bab8d5c8f1f4dab57c2d5acf" translate="yes" xml:space="preserve">
          <source>Elixir Forum</source>
          <target state="translated">Elixir论坛</target>
        </trans-unit>
        <trans-unit id="de61752fa33c065b078b47c60fdefbfedf94b579" translate="yes" xml:space="preserve">
          <source>Elixir allows developers to attach arbitrary metadata to the documentation. This is done by passing a keyword list to the relevant attribute (such as &lt;code&gt;@moduledoc&lt;/code&gt;, &lt;code&gt;@typedoc&lt;/code&gt;, and &lt;code&gt;@doc&lt;/code&gt;). A commonly used metadata is &lt;code&gt;:since&lt;/code&gt;, which annotates in which version that particular module, function, type, or callback was added, as shown in the example above.</source>
          <target state="translated">Elixir允许开发人员将任意元数据附加到文档。这是通过将关键字列表传递到相关属性（例如 &lt;code&gt;@moduledoc&lt;/code&gt; ， &lt;code&gt;@typedoc&lt;/code&gt; 和 &lt;code&gt;@doc&lt;/code&gt; ）来完成的。常用的元数据是 &lt;code&gt;:since&lt;/code&gt; ，它注释在哪个版本中添加了特定的模块，函数，类型或回调，如上面的示例所示。</target>
        </trans-unit>
        <trans-unit id="3c0ee4efd422df64d926e1699ce27c5bdf0b25e6" translate="yes" xml:space="preserve">
          <source>Elixir allows integers to contain &lt;code&gt;_&lt;/code&gt; to separate digits and provides conveniences to represent integers in other bases:</source>
          <target state="translated">Elixir允许整数包含 &lt;code&gt;_&lt;/code&gt; 来分隔数字，并提供了方便的以其他基数表示整数的方法：</target>
        </trans-unit>
        <trans-unit id="f75c26877ef871217ff6769618e4b459e83b4aa9" translate="yes" xml:space="preserve">
          <source>Elixir allows us to derive a protocol implementation based on the &lt;code&gt;Any&lt;/code&gt; implementation. Let&amp;rsquo;s first implement &lt;code&gt;Any&lt;/code&gt; as follows:</source>
          <target state="translated">Elixir允许我们基于 &lt;code&gt;Any&lt;/code&gt; 实现派生协议实现。让我们首先实现 &lt;code&gt;Any&lt;/code&gt; ，如下所示：</target>
        </trans-unit>
        <trans-unit id="83c382416abbdb750f7a0b52274c72d3eeffa512" translate="yes" xml:space="preserve">
          <source>Elixir allows variables to be rebound via static single assignment:</source>
          <target state="translated">Elixir允许变量通过静态单次赋值进行反弹。</target>
        </trans-unit>
        <trans-unit id="0e0d77b67e657e2b9066c1ff6972927494c31617" translate="yes" xml:space="preserve">
          <source>Elixir allows you to skip the leading &lt;code&gt;:&lt;/code&gt; for the atoms &lt;code&gt;false&lt;/code&gt;, &lt;code&gt;true&lt;/code&gt; and &lt;code&gt;nil&lt;/code&gt;.</source>
          <target state="translated">长生不老药允许您跳过引导 &lt;code&gt;:&lt;/code&gt; 对于原子 &lt;code&gt;false&lt;/code&gt; ， &lt;code&gt;true&lt;/code&gt; 和 &lt;code&gt;nil&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="39ff842a6a4a3cf98a11fae4fd4498e3695c470e" translate="yes" xml:space="preserve">
          <source>Elixir already provides mechanisms to write your everyday code in a simple and readable fashion by using its data structures and functions. Macros should only be used as a last resort. Remember that &lt;strong&gt;explicit is better than implicit&lt;/strong&gt;. &lt;strong&gt;Clear code is better than concise code.&lt;/strong&gt;</source>
          <target state="translated">Elixir已经提供了使用其数据结构和功能以简单易读的方式编写日常代码的机制。宏只能用作最后的手段。请记住，&lt;strong&gt;显式胜于隐式&lt;/strong&gt;。&lt;strong&gt;清晰的代码胜于简洁的代码。&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="c3c84bd869e800cf00a0f15faeb1fec6f09ff020" translate="yes" xml:space="preserve">
          <source>Elixir already provides mechanisms to write your everyday code in a simple and readable fashion by using its data structures and functions. Macros should only be used as a last resort. Remember that &lt;strong&gt;explicit is better than implicit&lt;/strong&gt;. &lt;strong&gt;Clear code is better than concise code&lt;/strong&gt;.</source>
          <target state="translated">Elixir已经提供了使用其数据结构和功能以简单易读的方式编写日常代码的机制。宏只能用作最后的手段。请记住，&lt;strong&gt;显式胜于隐式&lt;/strong&gt;。&lt;strong&gt;清晰的代码胜于简洁的代码&lt;/strong&gt;。</target>
        </trans-unit>
        <trans-unit id="04d508ddfa3159bfde64248d0cbc115d950cb551" translate="yes" xml:space="preserve">
          <source>Elixir also accepts by default the segment to be a literal string or a literal charlist, which are by default expanded to integers:</source>
          <target state="translated">Elixir 默认情况下也接受该段是一个字面字符串或字面字符表,默认情况下它们都被扩展为整数。</target>
        </trans-unit>
        <trans-unit id="738cbc7a97733fcad20b5d4c9dce828da97453d5" translate="yes" xml:space="preserve">
          <source>Elixir also allows developers to enforce certain keys must always be given when building the struct:</source>
          <target state="translated">Elixir还允许开发人员在构建结构体时强制执行某些键必须始终给出。</target>
        </trans-unit>
        <trans-unit id="b2aeb44fb689a73ee1106300bdf2d7f03241fd14" translate="yes" xml:space="preserve">
          <source>Elixir also contains an &lt;a href=&quot;#ensure_compiled/1&quot;&gt;&lt;code&gt;ensure_compiled/1&lt;/code&gt;&lt;/a&gt; function that is a superset of &lt;a href=&quot;#ensure_loaded/1&quot;&gt;&lt;code&gt;ensure_loaded/1&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">Elixir还包含一个&lt;a href=&quot;#ensure_compiled/1&quot;&gt; &lt;code&gt;ensure_compiled/1&lt;/code&gt; &lt;/a&gt;函数，它是&lt;a href=&quot;#ensure_loaded/1&quot;&gt; &lt;code&gt;ensure_loaded/1&lt;/code&gt; &lt;/a&gt;的超集。</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
