<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="zh-CN" datatype="htmlbody" original="groovy">
    <body>
      <group id="groovy">
        <trans-unit id="7d2d8961f859455e3fb30c095ca4f0b27f60c5a9" translate="yes" xml:space="preserve">
          <source>This property controls whether to include the destination classes directory in the classpath given to the compiler. The default value is &quot;true&quot;.</source>
          <target state="translated">此属性控制是否在给编译器的classpath中包含目标类目录。默认值为 &quot;true&quot;。</target>
        </trans-unit>
        <trans-unit id="f9f8e158e1fb916ac4a14cb9fc36f54eb916b032" translate="yes" xml:space="preserve">
          <source>This queue is backed by a &lt;a href=&quot;https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ConcurrentLinkedQueue.html&quot;&gt;ConcurrentLinkedQueue&lt;/a&gt; and is thread safe. The iterator will only return non-null values (reachable) and is based on the &quot;weakly consistent&quot; iterator of the underlying &lt;a href=&quot;https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ConcurrentLinkedQueue.html&quot;&gt;ConcurrentLinkedQueue&lt;/a&gt;.</source>
          <target state="translated">此队列由&lt;a href=&quot;https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ConcurrentLinkedQueue.html&quot;&gt;ConcurrentLinkedQueue&lt;/a&gt;支持，并且是线程安全的。迭代器将仅返回非null值（可访问），并且基于基础&lt;a href=&quot;https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ConcurrentLinkedQueue.html&quot;&gt;ConcurrentLinkedQueue&lt;/a&gt;的&amp;ldquo;弱一致性&amp;rdquo;迭代器。</target>
        </trans-unit>
        <trans-unit id="c0554c74e1813aa666f0f951e0bf2132582a22d5" translate="yes" xml:space="preserve">
          <source>This registry makes use of the &lt;a href=&quot;https://docs.oracle.com/javase/8/docs/api/java/util/ServiceLoader.html&quot;&gt;ServiceLoader&lt;/a&gt; facility. The preferred method for registering new &lt;a href=&quot;groovyrunner&quot;&gt;GroovyRunner&lt;/a&gt; providers is to place them in a provider-configuration file in the resource directory &lt;code&gt;META-INF/services&lt;/code&gt;. The preferred method for accessing the registered runners is by making use of the &lt;code&gt;Iterable&lt;/code&gt; interface using an enhanced for-loop.</source>
          <target state="translated">该注册表使用&lt;a href=&quot;https://docs.oracle.com/javase/8/docs/api/java/util/ServiceLoader.html&quot;&gt;ServiceLoader&lt;/a&gt;工具。注册新&lt;a href=&quot;groovyrunner&quot;&gt;GroovyRunner&lt;/a&gt;提供程序的首选方法是将它们放在资源目录 &lt;code&gt;META-INF/services&lt;/code&gt; 中的提供程序配置文件中。访问已注册跑步者的首选方法是使用带有增强的for循环的 &lt;code&gt;Iterable&lt;/code&gt; 接口。</target>
        </trans-unit>
        <trans-unit id="8a509478dc010fd7ae4333771f3db41a8b51de80" translate="yes" xml:space="preserve">
          <source>This results in an effective change in the default value, which each @Grab can still override</source>
          <target state="translated">这就导致了默认值的有效改变,每个@抓取者仍然可以覆盖这个默认值。</target>
        </trans-unit>
        <trans-unit id="cfdc0b86348d2b07a63a32744509bb44285b998d" translate="yes" xml:space="preserve">
          <source>This returns a mutable java.util.Collection of some sort, to which items are added.</source>
          <target state="translated">这将返回一个可突变的java.util.Collection,将项目添加到其中。</target>
        </trans-unit>
        <trans-unit id="a5c4d99849c9672226f265130f852668cd88b3e3" translate="yes" xml:space="preserve">
          <source>This sample script will be transformed at compile time to something that resembles this:</source>
          <target state="translated">这个示例脚本将在编译时被转换为类似于这样的东西。</target>
        </trans-unit>
        <trans-unit id="e3ee2c7dcf95a3334468fe4420194df7d4a7aad8" translate="yes" xml:space="preserve">
          <source>This servlet will run Groovy scripts as Groovlets. Groovlets are scripts with these objects implicit in their scope:</source>
          <target state="translated">这个servlet将作为Groovlets运行Groovy脚本。Groovlets是在其范围内隐含这些对象的脚本。</target>
        </trans-unit>
        <trans-unit id="1ab9a8edf6cf543cb8d1215adcda338da2a12a34" translate="yes" xml:space="preserve">
          <source>This sets the code statement of the closure.</source>
          <target state="translated">这设置了闭合的代码声明。</target>
        </trans-unit>
        <trans-unit id="b263e7ec3be6390e0bd666df48a0e6d983eab566" translate="yes" xml:space="preserve">
          <source>This sets the code statement of the closure. You can use this method in order to add more actions during the closure execution.</source>
          <target state="translated">这将设置闭包的代码语句。您可以使用此方法,以便在闭包执行过程中添加更多的操作。</target>
        </trans-unit>
        <trans-unit id="078efd6fdaa8e88c849374efacbd538d7db65f85" translate="yes" xml:space="preserve">
          <source>This signature hint uses abstract methods from some type (abstract class or interface) in order to infer the expected parameter types. This is especially useful for closure parameter type inference when implicit closure coercion is in action.</source>
          <target state="translated">这个签名提示使用来自某个类型(抽象类或接口)的抽象方法来推断预期的参数类型。当隐式闭包胁迫作用时,这对闭包参数类型推断特别有用。</target>
        </trans-unit>
        <trans-unit id="b5418e01c6e761a30ee1270adf06ce59a41f301e" translate="yes" xml:space="preserve">
          <source>This statement should make the code jump to surrounding while loop's start label Does not work from within Closures</source>
          <target state="translated">这条语句应该使代码跳转到周围的while循环的起始标签上,在Closures内不工作。</target>
        </trans-unit>
        <trans-unit id="407d9fcf7d0036cbc6e01d94cb02d01c231fd815" translate="yes" xml:space="preserve">
          <source>This statement will throw exception which will be caught and redirected to jump to surrounding while loop's start label Also works from within Closures but is a tiny bit slower</source>
          <target state="translated">这条语句将抛出异常,异常将被捕获并重定向跳转到周围的while循环的起始标签。</target>
        </trans-unit>
        <trans-unit id="75f4a79c481dc2cb5bbfc43df8b463419949a150" translate="yes" xml:space="preserve">
          <source>This strategy is used with the &lt;a href=&quot;builder&quot;&gt;Builder&lt;/a&gt; AST transform to create a builder helper class for the fluent and type-safe creation of instances of a specified class. It is modelled roughly on the design outlined here: http://michid.wordpress.com/2008/08/13/type-safe-builder-pattern-in-java/ You define classes which use the type-safe initializer pattern as follows:</source>
          <target state="translated">该策略与&lt;a href=&quot;builder&quot;&gt;Builder&lt;/a&gt; AST转换一起使用，以创建用于流畅且类型安全地创建指定类的实例的构建器帮助器类。它大致根据此处概述的设计建模：http://michid.wordpress.com/2008/08/13/type-safe-builder-pattern-in-java/您定义了使用类型安全的初始化器模式的类，如下：</target>
        </trans-unit>
        <trans-unit id="f27bf8b84e8738c2b4b0f1f9876f46dd72a605e8" translate="yes" xml:space="preserve">
          <source>This strategy is used with the &lt;a href=&quot;builder&quot;&gt;Builder&lt;/a&gt; AST transform to create a builder helper class for the fluent creation of instances of a specified class. It can be used at the class, static method or constructor levels. You use it as follows:</source>
          <target state="translated">该策略与&lt;a href=&quot;builder&quot;&gt;Builder&lt;/a&gt; AST转换一起使用，可以为流畅地创建指定类的实例创建构建器帮助器类。它可以在类，静态方法或构造函数级别使用。您可以按以下方式使用它：</target>
        </trans-unit>
        <trans-unit id="ed6bf569fc733575cb4369cf7054b4bb36aa6516" translate="yes" xml:space="preserve">
          <source>This strategy is used with the &lt;a href=&quot;builder&quot;&gt;Builder&lt;/a&gt; AST transform to modify your Groovy objects so that the setter methods for properties return the original object, thus allowing chained usage of the setters. You use it as follows:</source>
          <target state="translated">此策略与&lt;a href=&quot;builder&quot;&gt;Builder&lt;/a&gt; AST转换一起使用，以修改Groovy对象，以便属性的setter方法返回原始对象，从而允许对setter进行链式使用。您可以按以下方式使用它：</target>
        </trans-unit>
        <trans-unit id="25cbfaea1047a7e785b1eb392bc7238bc7c27b3a" translate="yes" xml:space="preserve">
          <source>This strategy is used with the &lt;a href=&quot;builder&quot;&gt;Builder&lt;/a&gt; AST transform to populate a builder helper class so that it can be used for the fluent creation of instances of a specified class. The specified class is not modified in any way and may be a Java class. You use it by creating and annotating an explicit builder class which will be filled in by during annotation processing with the appropriate build method and setters. An example is shown here:</source>
          <target state="translated">该策略与&lt;a href=&quot;builder&quot;&gt;Builder&lt;/a&gt; AST转换一起使用，以填充Builder助手类，以便可用于流畅创建指定类的实例。指定的类不会进行任何修改，并且可以是Java类。您可以通过创建并注释一个显式的构建器类来使用它，该类将在注释处理期间使用适当的构建方法和设置器进行填充。这里显示一个示例：</target>
        </trans-unit>
        <trans-unit id="aefa6c7294500282f8d4bb4eddcadf871ee1b4cc" translate="yes" xml:space="preserve">
          <source>This style is appropriate for final classes (where inheritance is not allowed) which have only &lt;code&gt;java.lang.Object&lt;/code&gt; as a super class. Most &lt;code&gt;@Immutable&lt;/code&gt; classes fall in to this category. For such classes, there is no need to introduce the &lt;code&gt;canEqual()&lt;/code&gt; method.</source>
          <target state="translated">此样式适用于仅具有 &lt;code&gt;java.lang.Object&lt;/code&gt; 作为超类的最终类（不允许继承）。大多数 &lt;code&gt;@Immutable&lt;/code&gt; 类都属于此类。对于此类，无需引入 &lt;code&gt;canEqual()&lt;/code&gt; 方法。</target>
        </trans-unit>
        <trans-unit id="802ac4dc77b8df6dda1da8c3fffeee2c99b224a0" translate="yes" xml:space="preserve">
          <source>This task can take the following arguments:</source>
          <target state="translated">该任务可采用以下参数:</target>
        </trans-unit>
        <trans-unit id="60d946e253765569f2bcdd4ca2526f06acf4975e" translate="yes" xml:space="preserve">
          <source>This transformation adds an instance of ReentrantReadWriteLock to the class.</source>
          <target state="translated">这个转换为该类添加了一个ReentrantReadWriteLock的实例。</target>
        </trans-unit>
        <trans-unit id="d3ce80b2ebfcdc75ae24268b035a5eaebda453e2" translate="yes" xml:space="preserve">
          <source>This transformation is not frequently needed but can be useful in certain testing scenarios or when using a third-party library or framework which relies upon package scoping.</source>
          <target state="translated">这种转换并不经常需要,但在某些测试场景中,或者在使用依赖于包范围的第三方库或框架时,这种转换是有用的。</target>
        </trans-unit>
        <trans-unit id="e94d4c2b6ad8a848ffe58957502849a9e3e7e841" translate="yes" xml:space="preserve">
          <source>This transformer focuses on ranges to produce optimized bytecode.</source>
          <target state="translated">这个变压器专注于范围,以产生优化的字节码。</target>
        </trans-unit>
        <trans-unit id="6fda571a0719db47e28eab288facbc6305d4dd4a" translate="yes" xml:space="preserve">
          <source>This visitor directly implements the &lt;a href=&quot;../../ast/groovycodevisitor&quot;&gt;GroovyCodeVisitor&lt;/a&gt; interface instead of using the &lt;a href=&quot;../../ast/codevisitorsupport&quot;&gt;CodeVisitorSupport&lt;/a&gt; class to make sure that future features of the language gets managed by this visitor.</source>
          <target state="translated">该游客直接实现&lt;a href=&quot;../../ast/groovycodevisitor&quot;&gt;GroovyCodeVisitor&lt;/a&gt;界面，而不是使用&lt;a href=&quot;../../ast/codevisitorsupport&quot;&gt;CodeVisitorSupport&lt;/a&gt;类，以确保未来的语言获取此访客管理功能。</target>
        </trans-unit>
        <trans-unit id="9f2eeb9355d53b5cbe12b0343f793c0ff95a4cf8" translate="yes" xml:space="preserve">
          <source>This visitor directly implements the &lt;a href=&quot;../../ast/groovycodevisitor&quot;&gt;GroovyCodeVisitor&lt;/a&gt; interface instead of using the &lt;a href=&quot;../../ast/codevisitorsupport&quot;&gt;CodeVisitorSupport&lt;/a&gt; class to make sure that future features of the language gets managed by this visitor. Thus, adding a new feature would result in a compilation error if this visitor is not updated.</source>
          <target state="translated">该游客直接实现&lt;a href=&quot;../../ast/groovycodevisitor&quot;&gt;GroovyCodeVisitor&lt;/a&gt;界面，而不是使用&lt;a href=&quot;../../ast/codevisitorsupport&quot;&gt;CodeVisitorSupport&lt;/a&gt;类，以确保未来的语言获取此访客管理功能。因此，如果不更新此访问者，添加新功能将导致编译错误。</target>
        </trans-unit>
        <trans-unit id="867203c84b164cf2c1604344961c3110c75104ff" translate="yes" xml:space="preserve">
          <source>This visitor is only intended to be executed once, during the &lt;a href=&quot;../control/compilephase#SEMANTIC_ANALYSIS&quot;&gt;CompilePhase.SEMANTIC_ANALYSIS&lt;/a&gt; phase of compilation.</source>
          <target state="translated">在编译的&lt;a href=&quot;../control/compilephase#SEMANTIC_ANALYSIS&quot;&gt;CompilePhase.SEMANTIC_ANALYSIS&lt;/a&gt;阶段，只能将该访问者执行一次。</target>
        </trans-unit>
        <trans-unit id="bd249cfc8649d3e5de4b8832a5786782f79ea5b1" translate="yes" xml:space="preserve">
          <source>This visitor is responsible for amending the AST with static compilation metadata or transform the AST so that a class or a method can be statically compiled. It may also throw errors specific to static compilation which are not considered as an error at the type check pass. For example, usage of spread operator is not allowed in statically compiled portions of code, while it may be statically checked. Static compilation relies on static type checking, which explains why this visitor extends the type checker visitor.</source>
          <target state="translated">这个访问者负责用静态编译元数据修改AST,或者转换AST,使一个类或一个方法可以被静态编译。它也可以抛出静态编译特有的错误,这些错误在类型检查时不被认为是错误。例如,在静态编译的部分代码中不允许使用spread操作符,而它可以被静态检查。静态编译依赖于静态类型检查,这就解释了为什么这个访问者扩展了类型检查器访问者。</target>
        </trans-unit>
        <trans-unit id="e79482b8e6c4004db766d4e5a7f36adefd3affb0" translate="yes" xml:space="preserve">
          <source>This will MODIFY the stacktrace of the exception instance and all its causes irreversibly</source>
          <target state="translated">这将不可逆地修改异常实例的堆栈跟踪和所有原因。</target>
        </trans-unit>
        <trans-unit id="dadfcb09dab169bd4e9fceb4279caaf34eec8a50" translate="yes" xml:space="preserve">
          <source>This will MODIFY the stacktrace of the root cause exception object and return it</source>
          <target state="translated">这将修改根原因异常对象的堆栈跟踪,并将其返回到</target>
        </trans-unit>
        <trans-unit id="3bc32a50ac2533b04b99e8ffacdbe550a5b58772" translate="yes" xml:space="preserve">
          <source>This will be pushed into the child grab annotations if the value is not set in the child annotation already.</source>
          <target state="translated">如果该值还没有在子注解中设置,将被推送到子抓取注解中。</target>
        </trans-unit>
        <trans-unit id="269062ef39b784c1871b5bc6f8081c5031dda5c3" translate="yes" xml:space="preserve">
          <source>This will let the Groovy compiler use compile time checks in the style of Java then perform static compilation, thus bypassing the Groovy meta object protocol.</source>
          <target state="translated">这将让Groovy编译器使用Java风格的编译时检查,然后进行静态编译,从而绕过Groovy元对象协议。</target>
        </trans-unit>
        <trans-unit id="124e7490fa2f3fcb70883343939eefae466b5290" translate="yes" xml:space="preserve">
          <source>This will let the Groovy compiler use compile time checks in the style of Java.</source>
          <target state="translated">这将让Groovy编译器使用Java风格的编译时检查。</target>
        </trans-unit>
        <trans-unit id="53525e1e41c6e79f2e258fd001a6806775bb1248" translate="yes" xml:space="preserve">
          <source>This will output an error if your class doesn't implement one of &lt;code&gt;Serializable&lt;/code&gt; or &lt;code&gt;Externalizable&lt;/code&gt;, will typically be significantly slower than the other approaches, also doesn't allow fields to be final, will take up more memory as even immutable classes like String will be cloned but does have the advantage that it performs deep cloning automatically.</source>
          <target state="translated">如果您的类未实现 &lt;code&gt;Serializable&lt;/code&gt; 或 &lt;code&gt;Externalizable&lt;/code&gt; 中的一种，则将输出错误，通常比其他方法慢得多，也不允许字段为final，将占用更多内存，因为即使像String这样的不可变类也将占用更多内存可以克隆，但确实具有自动执行深度克隆的优点。</target>
        </trans-unit>
        <trans-unit id="bd713244e15d9e687a8348a0165b20a800dd40e9" translate="yes" xml:space="preserve">
          <source>This will succeed, because the x and y variables declared in the delegate shadow the fields in the owner class.</source>
          <target state="translated">这将会成功,因为在委托中声明的x和y变量会对所有者类中的字段产生阴影。</target>
        </trans-unit>
        <trans-unit id="a3d75ff6b91b6558cffb7236fdd02abbc7a4b83f" translate="yes" xml:space="preserve">
          <source>This will work because the trait uses the dynamic backend, so there is no check at compile time that the</source>
          <target state="translated">这将会奏效,因为trait使用的是动态后端,所以在编译时不会检查到</target>
        </trans-unit>
        <trans-unit id="9684655d265f76f6794c2535f3c5435ed56bf620" translate="yes" xml:space="preserve">
          <source>This works in index overlay mode or chop mode. Chop mode reduces possibility of memory leak but causes a few more buffer copies as it chops up the buffer.</source>
          <target state="translated">这在索引叠加模式或切分模式下工作。切断模式减少了内存泄漏的可能性,但由于它切断了缓冲区,所以会导致更多的缓冲区拷贝。</target>
        </trans-unit>
        <trans-unit id="fa841ff5c73baba91ecf22e939500e4ef9753f2d" translate="yes" xml:space="preserve">
          <source>This wrapper is created by an iterator invoked for &lt;code&gt;ResultSetMetaData&lt;/code&gt;.</source>
          <target state="translated">该包装器是由为 &lt;code&gt;ResultSetMetaData&lt;/code&gt; 调用的迭代器创建的。</target>
        </trans-unit>
        <trans-unit id="a8d8e5ebb5306666d97e8f4d60a655322327b29c" translate="yes" xml:space="preserve">
          <source>This writer instance</source>
          <target state="translated">本作者实例</target>
        </trans-unit>
        <trans-unit id="1627afe6110225ce1b710cb71c8e30de59c46e04" translate="yes" xml:space="preserve">
          <source>ThreadInterrupt</source>
          <target state="translated">ThreadInterrupt</target>
        </trans-unit>
        <trans-unit id="5ba6001ddad0afa6bedcbf89257a453c96db6d8e" translate="yes" xml:space="preserve">
          <source>Threads executing a script should call this method after execution completes in order to unregister the consoleId.</source>
          <target state="translated">执行脚本的线程应该在执行完成后调用这个方法,以解除对控制台ID的注册。</target>
        </trans-unit>
        <trans-unit id="9700df244e193f82c2422193709daa9612417b91" translate="yes" xml:space="preserve">
          <source>Threads executing a script should call this method at the start of execution in order to set the id of the console that is hosting the thread of execution.</source>
          <target state="translated">执行脚本的线程应该在执行开始时调用这个方法,以便设置托管执行线程的控制台的id。</target>
        </trans-unit>
        <trans-unit id="b6aa53a6553dd1012b52cb24cf6d99327ccc2433" translate="yes" xml:space="preserve">
          <source>Threads executing a script should call this method at the start of execution in order to set the id of the console that is hosting the thread of execution. This should be called prior to any output that is generated. The consoleId will be passed to the callback.</source>
          <target state="translated">执行脚本的线程应该在执行开始时调用这个方法,以便设置托管执行线程的控制台的id。这个方法应该在生成任何输出之前被调用。consoleId将被传递给回调。</target>
        </trans-unit>
        <trans-unit id="d40b5bc0c1174fe4550ca03af2b533f9dd80c864" translate="yes" xml:space="preserve">
          <source>Throwable any exception causes by the delegate</source>
          <target state="translated">可抛出任何由委托人引起的异常。</target>
        </trans-unit>
        <trans-unit id="48a221292fcd772ca45977769854c5db23d37587" translate="yes" xml:space="preserve">
          <source>Throwable if caused by the delegate or the method</source>
          <target state="translated">如果是由委托人或方法引起的,则可抛出。</target>
        </trans-unit>
        <trans-unit id="0a7ed54d269e2bcdd9ac8558f557ce7bf145194e" translate="yes" xml:space="preserve">
          <source>Throwable if the coercion fails</source>
          <target state="translated">如果胁迫失败,可抛出。</target>
        </trans-unit>
        <trans-unit id="63836017c3eee811b51a17a66f892bbf8e59b4e8" translate="yes" xml:space="preserve">
          <source>Throwable if the type casting fails</source>
          <target state="translated">如果类型铸造失败,可抛出</target>
        </trans-unit>
        <trans-unit id="f25d9ac4cfffc25a38a73cfa965f24bc61ef2d38" translate="yes" xml:space="preserve">
          <source>Thrown to indicate a problem with command execution.</source>
          <target state="translated">抛出,表示命令执行有问题。</target>
        </trans-unit>
        <trans-unit id="18a271ae68bdb591e3e74ae9096304097b1ebfe7" translate="yes" xml:space="preserve">
          <source>Thrown when compilation fails from source errors.</source>
          <target state="translated">当源码错误导致编译失败时抛出。</target>
        </trans-unit>
        <trans-unit id="1cfd969c295138ad4bee91a22fd184cce7fc6f92" translate="yes" xml:space="preserve">
          <source>Thrown when configuration data is invalid.</source>
          <target state="translated">当配置数据无效时抛出。</target>
        </trans-unit>
        <trans-unit id="d46d8f47549af7ea9fd8f97fcd322d446872468b" translate="yes" xml:space="preserve">
          <source>Thrown when trying to parse the AST</source>
          <target state="translated">抛出,当试图解析AST</target>
        </trans-unit>
        <trans-unit id="5bdb9461cfb05d97efe47e7584c38f602962d42f" translate="yes" xml:space="preserve">
          <source>Throws a &lt;code&gt;GroovyRuntimeException&lt;/code&gt;, because an attribute can have no children.</source>
          <target state="translated">抛出 &lt;code&gt;GroovyRuntimeException&lt;/code&gt; ，因为属性不能有子级。</target>
        </trans-unit>
        <trans-unit id="df4aad88c6c997d3aad912bc6308a4bd72d82b3c" translate="yes" xml:space="preserve">
          <source>Throws a &lt;code&gt;GroovyRuntimeException&lt;/code&gt;, because attributes can have no children.</source>
          <target state="translated">抛出 &lt;code&gt;GroovyRuntimeException&lt;/code&gt; ，因为属性不能有子级。</target>
        </trans-unit>
        <trans-unit id="a507380e5d85260f661f8e9234c0784dc4c0b738" translate="yes" xml:space="preserve">
          <source>Throws a &lt;code&gt;GroovyRuntimeException&lt;/code&gt;, because it is not implemented yet.</source>
          <target state="translated">抛出 &lt;code&gt;GroovyRuntimeException&lt;/code&gt; ，因为尚未实现。</target>
        </trans-unit>
        <trans-unit id="9a8af8e628848b0d026013670f73312eecbf12d5" translate="yes" xml:space="preserve">
          <source>Throws a &lt;code&gt;GroovyRuntimeException&lt;/code&gt;, because this method is not implemented yet.</source>
          <target state="translated">抛出 &lt;code&gt;GroovyRuntimeException&lt;/code&gt; ，因为尚未实现此方法。</target>
        </trans-unit>
        <trans-unit id="9d8c171cdeca22bbbdf93f41123f22371802eb40" translate="yes" xml:space="preserve">
          <source>Throws an exception if value is null.</source>
          <target state="translated">如果值为空,则抛出异常。</target>
        </trans-unit>
        <trans-unit id="26bae70d31fe3986701fd480e494338dafcf7e7b" translate="yes" xml:space="preserve">
          <source>TimeDatumDuration represents a time period which results from an arithmetic operation between a TimeDuration object and a DatumDuration object</source>
          <target state="translated">TimeDatumDuration表示一个时间段,它是由一个TimeDuration对象和一个DatumDuration对象之间的算术运算产生的。</target>
        </trans-unit>
        <trans-unit id="0b67f206da456a717ae790b1d848abf5f51ac23a" translate="yes" xml:space="preserve">
          <source>TimedInterrupt</source>
          <target state="translated">TimedInterrupt</target>
        </trans-unit>
        <trans-unit id="9dee407a47ac74cfe60f0a59a2fa358e1c736c10" translate="yes" xml:space="preserve">
          <source>To be able to use a Closure in this way with your own subclass, you need to provide a doCall method with any signature you want to. This ensures that &lt;a href=&quot;#getMaximumNumberOfParameters()&quot;&gt;getMaximumNumberOfParameters()&lt;/a&gt; and &lt;a href=&quot;#getParameterTypes()&quot;&gt;getParameterTypes()&lt;/a&gt; will work too without any additional code. If no doCall method is provided a closure must be used in its long form like</source>
          <target state="translated">为了能够以这种方式将闭包与您自己的子类一起使用，您需要提供一个doCall方法，其中包含您想要的任何签名。这样可以确保&lt;a href=&quot;#getMaximumNumberOfParameters()&quot;&gt;getMaximumNumberOfParameters（）&lt;/a&gt;和&lt;a href=&quot;#getParameterTypes()&quot;&gt;getParameterTypes（）&lt;/a&gt;也可以工作，而无需任何其他代码。如果没有提供doCall方法，则必须以长格式使用闭包，例如</target>
        </trans-unit>
        <trans-unit id="ae78b4c71b65ec8ffe2b34198d00cff67b05c3f8" translate="yes" xml:space="preserve">
          <source>To change from the default PosixParser to the GnuParser, set this to false.</source>
          <target state="translated">要从默认的 PosixParser 改为 GnuParser,请将此设置为 false。</target>
        </trans-unit>
        <trans-unit id="5e656136ae006b0c24b672af6526ddaa6d1e5aa2" translate="yes" xml:space="preserve">
          <source>To change from the default PosixParser to the GnuParser, set this to false. Ignored if the parser is explicitly set.</source>
          <target state="translated">要从默认的 PosixParser 变为 GnuParser,请将此设置为 false。如果明确设置了解析器,则忽略。</target>
        </trans-unit>
        <trans-unit id="49df1716527867d00399bad2b6c719d501c33b27" translate="yes" xml:space="preserve">
          <source>To define a new static method on a class, as the static modifier is already used for instance methods, you must use another helper class, for example:</source>
          <target state="translated">要在一个类上定义一个新的静态方法,因为静态修饰符已经用于实例方法,你必须使用另一个帮助类,例如。</target>
        </trans-unit>
        <trans-unit id="04465546fecb72214ae62aeebed6a22db51f9e3f" translate="yes" xml:space="preserve">
          <source>To describe generic type signature see &lt;a href=&quot;#getGenericsTypes()&quot;&gt;getGenericsTypes()&lt;/a&gt; and &lt;a href=&quot;#setGenericsTypes(org.codehaus.groovy.ast.GenericsType)&quot;&gt;setGenericsTypes(GenericsType[])&lt;/a&gt;. These methods are not proxied, they describe the type signature used at the point of declaration or the type signatures provided by the class. If the type signatures provided by the class are needed, then a call to &lt;a href=&quot;#redirect()&quot;&gt;redirect()&lt;/a&gt; will help.</source>
          <target state="translated">要描述通用类型签名，请参见&lt;a href=&quot;#getGenericsTypes()&quot;&gt;getGenericsTypes（）&lt;/a&gt;和&lt;a href=&quot;#setGenericsTypes(org.codehaus.groovy.ast.GenericsType)&quot;&gt;setGenericsTypes（GenericsType []）&lt;/a&gt;。这些方法没有代理，它们描述了声明时使用的类型签名或类提供的类型签名。如果需要由类提供的类型签名，则对&lt;a href=&quot;#redirect()&quot;&gt;redirect（）&lt;/a&gt;的调用将有所帮助。</target>
        </trans-unit>
        <trans-unit id="a71bcc6f4e9acdf334dafc387d6f2ededb0ceb18" translate="yes" xml:space="preserve">
          <source>To determine the resulting type of for example a=exp1+exp2 we look at the conditions &lt;a href=&quot;#isIntCategory(org.codehaus.groovy.ast.ClassNode)&quot;&gt;isIntCategory(ClassNode)&lt;/a&gt;, &lt;a href=&quot;#isLongCategory(org.codehaus.groovy.ast.ClassNode)&quot;&gt;isLongCategory(ClassNode)&lt;/a&gt;, &lt;a href=&quot;#isBigIntCategory(org.codehaus.groovy.ast.ClassNode)&quot;&gt;isBigIntCategory(ClassNode)&lt;/a&gt;, &lt;a href=&quot;#isDoubleCategory(org.codehaus.groovy.ast.ClassNode)&quot;&gt;isDoubleCategory(ClassNode)&lt;/a&gt; and &lt;a href=&quot;#isBigDecCategory(org.codehaus.groovy.ast.ClassNode)&quot;&gt;isBigDecCategory(ClassNode)&lt;/a&gt; in that order. The first case applying to exp1 and exp2 is defining the result type of the expression.</source>
          <target state="translated">为了确定例如a = exp1 + exp2的结果类型，我们&lt;a href=&quot;#isIntCategory(org.codehaus.groovy.ast.ClassNode)&quot;&gt;依次&lt;/a&gt;查看条件isIntCategory（ClassNode），&lt;a href=&quot;#isLongCategory(org.codehaus.groovy.ast.ClassNode)&quot;&gt;isLongCategory（ClassNode）&lt;/a&gt;，&lt;a href=&quot;#isBigIntCategory(org.codehaus.groovy.ast.ClassNode)&quot;&gt;isBigIntCategory（ClassNode）&lt;/a&gt;，&lt;a href=&quot;#isDoubleCategory(org.codehaus.groovy.ast.ClassNode)&quot;&gt;isDoubleCategory（ClassNode）&lt;/a&gt;和&lt;a href=&quot;#isBigDecCategory(org.codehaus.groovy.ast.ClassNode)&quot;&gt;isBigDecCategory（ClassNode）&lt;/a&gt;。适用于exp1和exp2的第一种情况是定义表达式的结果类型。</target>
        </trans-unit>
        <trans-unit id="0cf3e0c3fa39ff0a63581fd2d8eabe2c54f7d7c2" translate="yes" xml:space="preserve">
          <source>To disallow clustered POSIX short options, set this to false.</source>
          <target state="translated">要不允许集群POSIX短选项,请将此设置为false。</target>
        </trans-unit>
        <trans-unit id="d84e8414c604dc7bdab48ac84bc0173b446cccb6" translate="yes" xml:space="preserve">
          <source>To enable the INDEX_OVERLAY parser do this: &lt;code&gt;&lt;pre&gt;
             parser = new JsonSlurper().setType(JsonParserType.INDEX_OVERLAY);
 &lt;/pre&gt;&lt;/code&gt; INDEX_OVERLAY should be your parser of choice.  CHAR_BUFFER is the parser of choice due to element of least surprise and need to mimic existing Slurper behavior as much as possible.  Use CHARACTER_SOURCE for large file parsing.  Use LAX if you want to enable relaxed JSON parsing, i.e., allow comments, no quote strings, etc.  Use CHAR_BUFFER for a non-fancy but super fast parser.</source>
          <target state="translated">要启用INDEX_OVERLAY解析器，请执行以下操作： &lt;code&gt;&lt;pre&gt; parser = new JsonSlurper().setType(JsonParserType.INDEX_OVERLAY); &lt;/pre&gt;&lt;/code&gt; INDEX_OVERLAY应该是您选择的解析器。CHAR_BUFFER是首选的解析器，这是因为它具有最少的惊喜，并且需要尽可能地模仿现有的Slurper行为。使用CHARACTER_SOURCE进行大文件解析。如果要启用轻松的JSON解析（即允许注释，不包含引号字符串等），请使用LAX。对于非特殊但超快速的解析器，请使用CHAR_BUFFER。</target>
        </trans-unit>
        <trans-unit id="1a2c835ff254c38312b96fe00f897cf43548e925" translate="yes" xml:space="preserve">
          <source>To generate a class that has all the fields and methods, except that fields are not initialized and methods are empty. It's intended for being used as a place holder during code generation of reference to the &quot;this&quot; class itself.</source>
          <target state="translated">生成一个拥有所有字段和方法的类,除了字段没有初始化,方法为空。它的目的是在生成引用 &quot;this &quot;类本身的代码时作为一个占位符。</target>
        </trans-unit>
        <trans-unit id="d1bad6efba1bb98fa88518f8af7c07634a968b27" translate="yes" xml:space="preserve">
          <source>To illustrate the 'canEqual' implementation style (see http://www.artima.com/lejava/articles/equality.html for further details), consider this class:</source>
          <target state="translated">为了说明'canEqual'的实现风格(更多细节请参见http://www.artima.com/lejava/articles/equality.html),请考虑这个类。</target>
        </trans-unit>
        <trans-unit id="4252d428a5850d62550271b505b254f6cf7f42fa" translate="yes" xml:space="preserve">
          <source>To make the programmer's intention clear, a leading closure must have an explicit parameter list, and must not follow a previous statement separated only by newlines.</source>
          <target state="translated">为了明确程序员的意图,前导闭包必须有一个明确的参数列表,并且不能跟在前面的语句后面,只能用换行符隔开。</target>
        </trans-unit>
        <trans-unit id="18a732b33852b42ca6172bd0448f6656a1b40a25" translate="yes" xml:space="preserve">
          <source>To make your web application more groovy, you must add the GroovyServlet to your application's web.xml configuration using any mapping you like, so long as it follows the pattern *.* (more on this below). Here is the web.xml entry:</source>
          <target state="translated">为了使你的web应用程序更加groovy,你必须使用任何你喜欢的映射将GroovyServlet添加到你的应用程序的web.xml配置中,只要它遵循*.*的模式(下文将详细介绍)。这里是web.xml条目。</target>
        </trans-unit>
        <trans-unit id="df2b52c6aed66519f9ac1df059a81d578aeda822" translate="yes" xml:space="preserve">
          <source>To support caches whose values are convertable, e.g. SoftReference, WeakReference</source>
          <target state="translated">支持其值可转换的缓存,例如软参考、弱参考。</target>
        </trans-unit>
        <trans-unit id="a8142b65797fa28cedc5dc48d5514829b45daa1c" translate="yes" xml:space="preserve">
          <source>To swap two children of node t...</source>
          <target state="translated">要交换节点t的两个子节点,...</target>
        </trans-unit>
        <trans-unit id="54d612333f0f3b60c6d5d444a98e028684b44f66" translate="yes" xml:space="preserve">
          <source>To understand how this annotation works, it is convenient to think in terms of the source code it replaces. The following is a typical usage of this annotation from Groovy:</source>
          <target state="translated">为了理解这个注解的工作原理,我们可以从它所替换的源代码的角度来考虑。以下是该注解在Groovy中的典型用法。</target>
        </trans-unit>
        <trans-unit id="672b408cd52386f1fdb677bb1d160d4843fdd50f" translate="yes" xml:space="preserve">
          <source>To use this annotation, declare &lt;code&gt;@WithReadLock&lt;/code&gt; on your method. The method may be either an instance method or a static method. The resulting method will allow multiple threads to read the information at the same time. However, if some other method obtains a write lock, then this method will force callers to wait until the write is complete.</source>
          <target state="translated">若要使用此批注， &lt;code&gt;@WithReadLock&lt;/code&gt; 在您的方法上声明@WithReadLock。该方法可以是实例方法或静态方法。结果方法将允许多个线程同时读取信息。但是，如果其他方法获得了写锁定，则此方法将强制调用方等待直到写完成。</target>
        </trans-unit>
        <trans-unit id="408ca7d8869745df42ef2f21e0079feb1a1816da" translate="yes" xml:space="preserve">
          <source>To use this annotation, declare &lt;code&gt;@WithWriteLock&lt;/code&gt; on your method. The method may be either an instance method or a static method. The resulting method will allow only one thread access to the method at a time, and will wait to access the method until any other read locks have been released.</source>
          <target state="translated">若要使用此批注， &lt;code&gt;@WithWriteLock&lt;/code&gt; 在您的方法上声明@WithWriteLock。该方法可以是实例方法或静态方法。生成的方法一次仅允许一个线程访问该方法，并且将等待访问该方法，直到释放了任何其他读取锁为止。</target>
        </trans-unit>
        <trans-unit id="66dc57021002f767eae421f31bb08c23cf61cda1" translate="yes" xml:space="preserve">
          <source>To use this, simply drop this as an UndoableEditListener into your document, and then create actions to call undo/redo as needed (checking can undo/redo first, of course).</source>
          <target state="translated">要使用它,只需将其作为一个UndoableEditListener放到你的文档中,然后根据需要创建动作来调用undo/redo(当然是先检查能否undo/redo)。</target>
        </trans-unit>
        <trans-unit id="1dbc7385badbfda548fb27e2160a33cf32c0f545" translate="yes" xml:space="preserve">
          <source>ToString</source>
          <target state="translated">ToString</target>
        </trans-unit>
        <trans-unit id="a1141eb96836ed960ae0be11b9889597388b5df0" translate="yes" xml:space="preserve">
          <source>Token</source>
          <target state="translated">Token</target>
        </trans-unit>
        <trans-unit id="e0c3629e55b41e2db5fbb0a85ee630d50c5f24e6" translate="yes" xml:space="preserve">
          <source>Tokenizes a CharSequence (with a whitespace as the delimiter).</source>
          <target state="translated">将一个CharSequence标记化(用空格作为定界符)。</target>
        </trans-unit>
        <trans-unit id="2231746f51d7a571de24160666f7ad22ecfde7b0" translate="yes" xml:space="preserve">
          <source>Tokenizes a CharSequence based on the given CharSequence.</source>
          <target state="translated">根据给定的CharSequence将CharSequence标记化。</target>
        </trans-unit>
        <trans-unit id="d41c373bd3209304cbb0063177ce1ca25699e86c" translate="yes" xml:space="preserve">
          <source>Tokenizes a CharSequence based on the given CharSequence. Each character in the CharSequence is a separate delimiter.</source>
          <target state="translated">根据给定的CharSequence标记一个CharSequence。CharSequence中的每个字符都是一个独立的定界符。</target>
        </trans-unit>
        <trans-unit id="485cb59327cdc97f9fcc7fa55be0ce061a14c52f" translate="yes" xml:space="preserve">
          <source>Tokenizes a CharSequence based on the given character delimiter.</source>
          <target state="translated">根据给定的字符定界符对CharSequence进行标记。</target>
        </trans-unit>
        <trans-unit id="5a5de83e916ee2b9432bcb92b7e2005bd1e5ef28" translate="yes" xml:space="preserve">
          <source>Tool for replacing Statement objects in an AST by other Statement instances. Within</source>
          <target state="translated">用其他语句实例替换AST中的语句对象的工具。在</target>
        </trans-unit>
        <trans-unit id="588b4294158d46f90691b1bf904a493ef8d55ac0" translate="yes" xml:space="preserve">
          <source>Tool for replacing VariableExpression instances in an AST by other VariableExpression instances. Regardless of a real change taking place in nested expressions, all considered expression (trees) will be replaced. This could be optimized to accelerate compilation. Within</source>
          <target state="translated">用于用其他VariableExpression实例替换AST中的VariableExpression实例的工具。无论嵌套表达式是否有实际变化,所有被考虑的表达式(树)都将被替换。这可以被优化以加快编译速度。在</target>
        </trans-unit>
        <trans-unit id="56dacb287f4c62a5a9b284103c5bcf37de43bd22" translate="yes" xml:space="preserve">
          <source>Transform a Number into a BigDecimal</source>
          <target state="translated">将一个数字转换为大十进制</target>
        </trans-unit>
        <trans-unit id="75087708c5e192b76776de9231f4bdd4121d7c9d" translate="yes" xml:space="preserve">
          <source>Transform a Number into a Double</source>
          <target state="translated">将一个数字转化为双数</target>
        </trans-unit>
        <trans-unit id="fdfa0d2bebdc4ee600b548d1025de9e80e5de167" translate="yes" xml:space="preserve">
          <source>Transform a Number into a Float</source>
          <target state="translated">将一个数字转化为一个浮点数</target>
        </trans-unit>
        <trans-unit id="8afa9cff8f1437db8f9e5691222663d945c48c70" translate="yes" xml:space="preserve">
          <source>Transform a Number into a Long</source>
          <target state="translated">将一个数字转化为一个长数字</target>
        </trans-unit>
        <trans-unit id="704fec8a8db922e2c8d520f696a6f84dc14fcbab" translate="yes" xml:space="preserve">
          <source>Transform a Number into an Integer</source>
          <target state="translated">将一个数字转化为一个整数</target>
        </trans-unit>
        <trans-unit id="a33959f3483a097a48c7190c690a46fda36c9fd4" translate="yes" xml:space="preserve">
          <source>Transform this Number into a BigInteger.</source>
          <target state="translated">将此Number转化为一个BigInteger。</target>
        </trans-unit>
        <trans-unit id="ce80138408bf6567796f4205749d52de2f970726" translate="yes" xml:space="preserve">
          <source>Transform this number to a the given type, using the 'as' operator.</source>
          <target state="translated">使用'as'运算符,将这个数字转换为给定类型。</target>
        </trans-unit>
        <trans-unit id="8c2e783edf40ce711ae38ce11942a2604caf8fe4" translate="yes" xml:space="preserve">
          <source>Transform this number to a the given type, using the 'as' operator. The following types are supported in addition to the default &lt;a href=&quot;#asType(java.lang.Object,%20java.lang.Class)&quot;&gt;asType(java.lang.Object, java.lang.Class)&lt;/a&gt;:</source>
          <target state="translated">使用&amp;ldquo; as&amp;rdquo;运算符将此数字转换为给定的类型。除了默认的&lt;a href=&quot;#asType(java.lang.Object,%20java.lang.Class)&quot;&gt;asType（java.lang.Object，java.lang.Class）&lt;/a&gt;之外，还支持以下类型：</target>
        </trans-unit>
        <trans-unit id="cea34fcac18efd885ddc98b2577cd88c5a73f15d" translate="yes" xml:space="preserve">
          <source>Transform try-with-resources to try-catch-finally Reference JLS &quot;14.20.3. try-with-resources&quot;(https://docs.oracle.com/javase/specs/jls/se7/html/jls-14.html)</source>
          <target state="translated">将 try-with-resources 转变为 try-catch-finally 参考 JLS &quot;14.20.3.try-with-resources&quot;(https://docs.oracle.com/javase/specs/jls/se7/html/jls-14.html)</target>
        </trans-unit>
        <trans-unit id="7960856c0ba211b73df403412344f06db89bd6b5" translate="yes" xml:space="preserve">
          <source>Transformation for declarative dependency management.</source>
          <target state="translated">声明式依赖管理的转换。</target>
        </trans-unit>
        <trans-unit id="48e7ea13738a956cf9a246610c3cfa5186e22258" translate="yes" xml:space="preserve">
          <source>Transformation logic is as follows:</source>
          <target state="translated">转化逻辑如下:</target>
        </trans-unit>
        <trans-unit id="4341a9b741eae81b6d97565b411d0789627597e5" translate="yes" xml:space="preserve">
          <source>Transformation to capture ASTBuilder from code statements.</source>
          <target state="translated">从代码语句中获取ASTBuilder的转换。</target>
        </trans-unit>
        <trans-unit id="e56e67ffd03b49008e6e665e6793fdd44cfd5f77" translate="yes" xml:space="preserve">
          <source>Transformer for VariableExpression the bytecode backend wouldn't be able to handle otherwise.</source>
          <target state="translated">变量表达式的变换器,否则字节码后端将无法处理。</target>
        </trans-unit>
        <trans-unit id="e730aa47b7d76fc72bb495e889fb04c90842cb5b" translate="yes" xml:space="preserve">
          <source>Transforms a CharSequence representing a URI into a URI object.</source>
          <target state="translated">将一个代表URI的CharSequence转换为URI对象。</target>
        </trans-unit>
        <trans-unit id="8c4ad73d4c10ff940bca864699f0b2a9e090114d" translate="yes" xml:space="preserve">
          <source>Transforms a CharSequence representing a URL into a URL object.</source>
          <target state="translated">将代表URL的CharSequence转换为URL对象。</target>
        </trans-unit>
        <trans-unit id="51e13b042786715960d25cf5bda33adc16241833" translate="yes" xml:space="preserve">
          <source>Transforms a String representing a URI into a URI object.</source>
          <target state="translated">将代表URI的字符串转换为URI对象。</target>
        </trans-unit>
        <trans-unit id="6b2563f190778bf99b5156666ff307191ec8b187" translate="yes" xml:space="preserve">
          <source>Transforms a String representing a URL into a URL object.</source>
          <target state="translated">将代表URL的字符串转换为URL对象。</target>
        </trans-unit>
        <trans-unit id="f4391e0126dbec6ce6beaed97d141a638b19e035" translate="yes" xml:space="preserve">
          <source>Transforms an instance-style Groovy class or interface to become a static-style conventional Groovy category.</source>
          <target state="translated">将一个实例风格的Groovy类或接口转换为静态风格的传统Groovy类。</target>
        </trans-unit>
        <trans-unit id="74c93e1a18d02a78651d4da9a362d83575847daa" translate="yes" xml:space="preserve">
          <source>Transforms each character from this reader by passing it to the given closure.</source>
          <target state="translated">通过将每个字符传递到给定的闭包中,将其从这个阅读器中转换出来。</target>
        </trans-unit>
        <trans-unit id="946b22cd936894528d42359813ebb489a8900711" translate="yes" xml:space="preserve">
          <source>Transforms each character from this reader by passing it to the given closure. The Closure should return each transformed character, which will be passed to the Writer. The reader and writer will both be closed before this method returns.</source>
          <target state="translated">通过传递给给定的闭包来转换该阅读器的每个字符。闭包应该返回每个转换后的字符,这些字符将被传递给写入器。在本方法返回之前,读取器和写入器都将被关闭。</target>
        </trans-unit>
        <trans-unit id="ca5ca47cf3fcae21660588b52955ea1cb9a25d38" translate="yes" xml:space="preserve">
          <source>Transforms expressions in a whole class. Transformed expressions are usually not visited.</source>
          <target state="translated">转换整个类中的表达式。变换后的表达式通常不会被访问。</target>
        </trans-unit>
        <trans-unit id="04ca0888dfa75521337c10358f25733f5a26803a" translate="yes" xml:space="preserve">
          <source>Transforms generics types from an old context to a new context using the given spec.</source>
          <target state="translated">使用给定的规范将属类类型从旧的上下文转换到新的上下文。</target>
        </trans-unit>
        <trans-unit id="125f06da78b277105f3dae57a31bb6f4bd83120a" translate="yes" xml:space="preserve">
          <source>Transforms generics types from an old context to a new context using the given spec. This method assumes all generics types will be placeholders. WARNING: The resulting generics types may or may not be placeholders after the transformation.</source>
          <target state="translated">使用给定的规范,将旧的语境中的泛型类型转换为新的语境。本方法假设所有的泛型类型都是占位符。警告:转换后产生的属类类型可能是占位符,也可能不是。</target>
        </trans-unit>
        <trans-unit id="3e373a6d4e6c34d2d7486347c403f053d525c949" translate="yes" xml:space="preserve">
          <source>Transforms the element to its text equivalent.</source>
          <target state="translated">将该元素转换为其文本等价物。</target>
        </trans-unit>
        <trans-unit id="9186fe8c9174fb8b74acbf8348d0b811a8f98b53" translate="yes" xml:space="preserve">
          <source>Transforms the element to its text equivalent. (The resulting string does not contain a xml declaration. Use &lt;code&gt;XmlUtil.serialize(element)&lt;/code&gt; if you need the declaration.)</source>
          <target state="translated">将元素转换为其等效的文本。（结果字符串不包含xml声明。如果需要声明，请使用 &lt;code&gt;XmlUtil.serialize(element)&lt;/code&gt; 。）</target>
        </trans-unit>
        <trans-unit id="a8e60b37e7dde3e4194b139163da056dea3569ee" translate="yes" xml:space="preserve">
          <source>Transforms the given expression into another expression</source>
          <target state="translated">将给定的表达式转换为另一个表达式</target>
        </trans-unit>
        <trans-unit id="9fbabd7bc1f2cb236e0e1a83b5f19b19054bb5cc" translate="yes" xml:space="preserve">
          <source>Transforms the lines from a reader with a Closure and write them to a writer.</source>
          <target state="translated">将行文从读者与Closure转变为作家。</target>
        </trans-unit>
        <trans-unit id="a3cc073c6659b903b23ae17aa0f835dc12ee87b7" translate="yes" xml:space="preserve">
          <source>Transforms the lines from a reader with a Closure and write them to a writer. Both Reader and Writer are closed after the operation.</source>
          <target state="translated">用Closure转换读者的行,并将其写入写入器。阅读器和写入器在操作后都被关闭。</target>
        </trans-unit>
        <trans-unit id="9a995e5ef7aacba2ad853df64c8bb348b0202741" translate="yes" xml:space="preserve">
          <source>Transforms the list of expressions</source>
          <target state="translated">转换表达式列表</target>
        </trans-unit>
        <trans-unit id="e161a35599cc6fbe49d548e6da46ca31cbd6238f" translate="yes" xml:space="preserve">
          <source>Transforms the list of expressions, and checks that all transformed expressions have the given type.</source>
          <target state="translated">转换表达式列表,并检查所有转换后的表达式是否具有给定类型。</target>
        </trans-unit>
        <trans-unit id="e7b84d2e49b044c067f5f567a24f055813ad4e9e" translate="yes" xml:space="preserve">
          <source>Translates GLS-defined unicode escapes into characters. Throws an exception in the event of an invalid unicode escape being detected.</source>
          <target state="translated">将GLS定义的unicode转义转换为字符。当检测到无效的unicode转义时,抛出一个异常。</target>
        </trans-unit>
        <trans-unit id="b741e298c29d39f477884d4dc9807ea5f4cada64" translate="yes" xml:space="preserve">
          <source>Translates a CharSequence by replacing characters from the sourceSet with characters from replacementSet.</source>
          <target state="translated">通过用替换Set中的字符替换源Set中的字符来翻译CharSequence。</target>
        </trans-unit>
        <trans-unit id="09aca1bf0e2d4e80e63a2d48ca8617036cb75afb" translate="yes" xml:space="preserve">
          <source>Translates a CharSequence by replacing characters from the sourceSet with characters from replacementSet. If the first character from sourceSet appears in the CharSequence, it will be replaced with the first character from replacementSet. If the second character from sourceSet appears in the CharSequence, it will be replaced with the second character from replacementSet. and so on for all provided replacement characters.</source>
          <target state="translated">通过用替换Set中的字符替换源Set中的字符来翻译CharSequence,如果源Set中的第一个字符出现在CharSequence中,那么它将被替换Set中的第一个字符所替换。如果来自源集的第一个字符出现在CharSequence中,那么它将被替换集的第一个字符所替换。如果来自源集的第二个字符出现在CharSequence中,它将被替换集的第二个字符所替换,以此类推,替换所有提供的替换字符。</target>
        </trans-unit>
        <trans-unit id="92dc8a1ee80e43d89bea268e6ae612caaca739ad" translate="yes" xml:space="preserve">
          <source>Translates all return statements into an invocation of the next iteration. This can be either - &quot;continue LOOP_LABEL&quot;: Outside closures - &quot;throw LOOP_EXCEPTION&quot;: Inside closures Moreover, before adding the recur statement the iteration parameters (originally the method args) are set to their new value. To prevent variable aliasing parameters will be copied into temp vars before they are changes so that their current iteration value can be used when setting other params. There's probably place for optimizing the amount of variable copying being done, e.g. parameters that are only handed through must not be copied at all.</source>
          <target state="translated">将所有的返回语句转化为下一次迭代的调用。这可以是--&quot;继续LOOP_LABEL&quot;。外部闭包-&quot;throw LOOP_EXCEPTION&quot;:此外,在添加递归语句之前,迭代参数(最初是方法args)被设置为新的值。为了防止变量别名,参数在改变之前会被复制到temp vars中,这样在设置其他参数时就可以使用它们当前的迭代值。可能有地方可以优化变量复制的数量,比如只交过的参数一定不要复制。</target>
        </trans-unit>
        <trans-unit id="021a9c5204e723d5ba811642a1a4b1439beb288b" translate="yes" xml:space="preserve">
          <source>Transposes an array of lists.</source>
          <target state="translated">转置一个数组的列表。</target>
        </trans-unit>
        <trans-unit id="429780a1e73a202f30225cbaf4c90b2dce8934cb" translate="yes" xml:space="preserve">
          <source>Transposes the given lists.</source>
          <target state="translated">对给定的列表进行转置。</target>
        </trans-unit>
        <trans-unit id="b8a38462faed0a17e8baa0245ca9c03be6b4e9ae" translate="yes" xml:space="preserve">
          <source>Transposes the given lists. So, &lt;code&gt;transpose([['a', 'b'], [1, 2]])&lt;/code&gt; is &lt;code&gt;[['a', 1], ['b', 2]]&lt;/code&gt; and &lt;code&gt;transpose([['a', 'b', 'c']])&lt;/code&gt; is &lt;code&gt;[['a'], ['b'], ['c']]&lt;/code&gt;.</source>
          <target state="translated">转置给定列表。因此， &lt;code&gt;transpose([['a', 'b'], [1, 2]])&lt;/code&gt; 是 &lt;code&gt;[['a', 1], ['b', 2]]&lt;/code&gt; 和 &lt;code&gt;transpose([['a', 'b', 'c']])&lt;/code&gt; 是 &lt;code&gt;[['a'], ['b'], ['c']]&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="99c47fa9a7558d82327483ea5054e3e6383cbc79" translate="yes" xml:space="preserve">
          <source>Traverse through each byte of the specified stream.</source>
          <target state="translated">遍历指定流的每个字节。</target>
        </trans-unit>
        <trans-unit id="c5d8f9af5847ee724893448b9d5fa7541795182d" translate="yes" xml:space="preserve">
          <source>Traverse through each byte of the specified stream. The stream is closed after the closure returns.</source>
          <target state="translated">遍历指定流的每个字节。在关闭返回后,流被关闭。</target>
        </trans-unit>
        <trans-unit id="996669841a320d36b4aad1deb6af08e0fd844def" translate="yes" xml:space="preserve">
          <source>Traverse through each byte of this Byte array.</source>
          <target state="translated">遍历这个Byte数组的每个字节。</target>
        </trans-unit>
        <trans-unit id="04c86ec9a24eff3934331f579c6d60d1da02aa4a" translate="yes" xml:space="preserve">
          <source>Traverse through each byte of this Byte array. Alias for each.</source>
          <target state="translated">遍历这个Byte数组的每一个字节。每个字节的别名。</target>
        </trans-unit>
        <trans-unit id="6c3aa0b8a02c28636201d0dfb2403a36e3d85448" translate="yes" xml:space="preserve">
          <source>Traverse through each byte of this File</source>
          <target state="translated">遍历该文件的每个字节</target>
        </trans-unit>
        <trans-unit id="29a22984c2b61b5e32afb9def3dad1dc36bc16d5" translate="yes" xml:space="preserve">
          <source>Traverse through each byte of this Path</source>
          <target state="translated">遍历此路径的每个字节</target>
        </trans-unit>
        <trans-unit id="3d9335e15f30c94a0aafae125e7d93b707e864ef" translate="yes" xml:space="preserve">
          <source>Traverse through each byte of this byte array.</source>
          <target state="translated">遍历这个字节数组的每个字节。</target>
        </trans-unit>
        <trans-unit id="0561516e26a5da855f11507b860fa252c436b7b9" translate="yes" xml:space="preserve">
          <source>Traverse through each byte of this byte array. Alias for each.</source>
          <target state="translated">遍历这个字节数组的每一个字节。每个字节的别名。</target>
        </trans-unit>
        <trans-unit id="a783be42b8da9ecb46270df5a59e0ba9e8d9a458" translate="yes" xml:space="preserve">
          <source>Traverse through each the specified stream reading bytes into a buffer and calling the 2 parameter closure with this buffer and the number of bytes.</source>
          <target state="translated">遍历每一个指定的流,将字节读入一个缓冲区,然后用这个缓冲区和字节数调用2个参数关闭。</target>
        </trans-unit>
        <trans-unit id="aab6a9d603e441470de1d569dd77ecfac658eb17" translate="yes" xml:space="preserve">
          <source>Traverse through the bytes of this File, bufferLen bytes at a time.</source>
          <target state="translated">每次以bufferLen为单位,遍历这个File的字节。</target>
        </trans-unit>
        <trans-unit id="3e1cf372721992fe2926cc83b69f959d7bd2006f" translate="yes" xml:space="preserve">
          <source>Traverse through the bytes of this Path, bufferLen bytes at a time.</source>
          <target state="translated">遍历这个Path的字节,一次一个bufferLen字节。</target>
        </trans-unit>
        <trans-unit id="d0ad88a0f3eb390c71f172220bdda59a2a5ab420" translate="yes" xml:space="preserve">
          <source>Treats the object as iterable, iterating through the values it represents and returns the first non-null result obtained from calling the closure, otherwise returns null.</source>
          <target state="translated">将对象视为可迭代对象,对其代表的值进行迭代,并返回调用闭包获得的第一个非空结果,否则返回null。</target>
        </trans-unit>
        <trans-unit id="e84d18ada755e7814a8d6439cf825065a96df38b" translate="yes" xml:space="preserve">
          <source>Treats the object as iterable, iterating through the values it represents and returns the first non-null result obtained from calling the closure, otherwise returns the defaultResult.</source>
          <target state="translated">将对象视为可迭代对象,对其代表的值进行迭代,并返回调用闭包获得的第一个非空结果,否则返回defaultResult。</target>
        </trans-unit>
        <trans-unit id="0696e8157d8699799b3999c6eb1fabb904c4c139" translate="yes" xml:space="preserve">
          <source>Tries to find a Groovy class.</source>
          <target state="translated">试图找到一个Groovy类。</target>
        </trans-unit>
        <trans-unit id="952daa819d9537d04bbc338ca0e0c8a831de1923" translate="yes" xml:space="preserve">
          <source>Tries to get a property on null, which will always fail</source>
          <target state="translated">试图在null上获取一个属性,但总是会失败。</target>
        </trans-unit>
        <trans-unit id="295f3bb1757d24f8e167e2b799f22ce60f7cb9ff" translate="yes" xml:space="preserve">
          <source>Tries to invoke a method on null, which will always fail</source>
          <target state="translated">试图在null上调用一个方法,但总是失败。</target>
        </trans-unit>
        <trans-unit id="166edb1cc77cf8106f58faf32fb0770b0e0584bf" translate="yes" xml:space="preserve">
          <source>Tries to set a property on null, which will always fail</source>
          <target state="translated">试图在null上设置一个属性,但总是会失败。</target>
        </trans-unit>
        <trans-unit id="9a443858613c621bd821729bded23e1b74f9e9c4" translate="yes" xml:space="preserve">
          <source>TriggerBinding</source>
          <target state="translated">TriggerBinding</target>
        </trans-unit>
        <trans-unit id="a815ee7c3fc31b1a2daca13ac84e5e82ffdec49a" translate="yes" xml:space="preserve">
          <source>True after the first &lt;a href=&quot;#configure(org.codehaus.groovy.control.CompilerConfiguration)&quot;&gt;configure(CompilerConfiguration)&lt;/a&gt; operation.</source>
          <target state="translated">在第一次&lt;a href=&quot;#configure(org.codehaus.groovy.control.CompilerConfiguration)&quot;&gt;configure（CompilerConfiguration）&lt;/a&gt;操作之后为true 。</target>
        </trans-unit>
        <trans-unit id="7a50a0d3473534648a785002a622dc00ec7fed92" translate="yes" xml:space="preserve">
          <source>True for say, a command-line arg, false for instance inside a String.</source>
          <target state="translated">比如说,命令行参数为真,比如说在String里面为假。</target>
        </trans-unit>
        <trans-unit id="78090b40546e47d7d9a00258e9d716df13573ec7" translate="yes" xml:space="preserve">
          <source>True if it has</source>
          <target state="translated">如果它有</target>
        </trans-unit>
        <trans-unit id="cab70c24c32d26d3c97db69fd55a4a7981318d89" translate="yes" xml:space="preserve">
          <source>True if it is</source>
          <target state="translated">如果是真的</target>
        </trans-unit>
        <trans-unit id="ffe4a32b2f41b406dadd81d8fcbfaac2a1a799d3" translate="yes" xml:space="preserve">
          <source>True if phase is finished</source>
          <target state="translated">阶段结束时为真</target>
        </trans-unit>
        <trans-unit id="1139dcd8b7f2592bc1b3d43bc0da4df8ece1b270" translate="yes" xml:space="preserve">
          <source>True if the method exists otherwise null</source>
          <target state="translated">如果该方法存在,则为true,否则为null</target>
        </trans-unit>
        <trans-unit id="a1718bc26fc6d410571d3c06dc4709ce65732b01" translate="yes" xml:space="preserve">
          <source>True it exists as a MetaProperty</source>
          <target state="translated">True 它作为一个MetaProperty存在</target>
        </trans-unit>
        <trans-unit id="45b4fd12cd3f795f3363a118bf4609a2ee47bbd9" translate="yes" xml:space="preserve">
          <source>Truncate the value</source>
          <target state="translated">将数值截断</target>
        </trans-unit>
        <trans-unit id="25fdf25b9c6828ec9ae054e3aa642d48b53f6138" translate="yes" xml:space="preserve">
          <source>Try to get the parameterized type from the cache.</source>
          <target state="translated">尝试从缓存中获取参数化类型。</target>
        </trans-unit>
        <trans-unit id="c99e2c6513ddec51ae0ca8ad752695367b1cdabc" translate="yes" xml:space="preserve">
          <source>Try to get the parameterized type from the cache. If no cached item found, cache and return the result of &lt;a href=&quot;#findParameterizedType(org.codehaus.groovy.ast.ClassNode,%20org.codehaus.groovy.ast.ClassNode,%20boolean)&quot;&gt;findParameterizedType(ClassNode, ClassNode, boolean)&lt;/a&gt;</source>
          <target state="translated">尝试从缓存中获取参数化类型。如果没有找到缓存的项目，则缓存并返回&lt;a href=&quot;#findParameterizedType(org.codehaus.groovy.ast.ClassNode,%20org.codehaus.groovy.ast.ClassNode,%20boolean)&quot;&gt;findParameterizedType（ClassNode，ClassNode，boolean）的结果&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="a58f064ab3ce1f5dabc1ae356de0953319b012aa" translate="yes" xml:space="preserve">
          <source>Try to get the value from cache.</source>
          <target state="translated">尝试从缓存中获取数值。</target>
        </trans-unit>
        <trans-unit id="68897e926ac90054d98971011f7d41b7f45ad78a" translate="yes" xml:space="preserve">
          <source>Try to get the value from cache. If not found, create the value by MemoizeCache.ValueProvider and put it into the cache, at last return the value.</source>
          <target state="translated">试着从缓存中获取该值。如果没有找到,则通过MemoizeCache.ValueProvider创建该值,并将其放入缓存中,最后返回该值。</target>
        </trans-unit>
        <trans-unit id="35997c6eeee8b256845d51fc8dbaed48cd32845b" translate="yes" xml:space="preserve">
          <source>Try to get the value from cache. If not found, create the value by MemoizeCache.ValueProvider and put it into the cache, at last return the value. The operation is completed atomically.</source>
          <target state="translated">试着从缓存中获取该值。如果没有找到,则通过MemoizeCache.ValueProvider创建值并放入缓存,最后返回值。这个操作是以原子方式完成的。</target>
        </trans-unit>
        <trans-unit id="a861a89ea5af181022b4982635ec3e234afa25d6" translate="yes" xml:space="preserve">
          <source>Try to get the value from cache. If not found, create the value by ValueProvider and put it into the cache, at last return the value.</source>
          <target state="translated">尝试从缓存中获取值。如果没有找到,则由ValueProvider创建值并放入缓存,最后返回值。</target>
        </trans-unit>
        <trans-unit id="82a9a14bc3424a18fd57527e12266d273e1583c6" translate="yes" xml:space="preserve">
          <source>Tuple-style constructors are provided which allow you to set properties in the same order as they are defined.</source>
          <target state="translated">提供了元组风格的构造函数,允许你按照定义的相同顺序设置属性。</target>
        </trans-unit>
        <trans-unit id="49b24d1713c61deb4c6017a8b4300a3d9787ef70" translate="yes" xml:space="preserve">
          <source>TupleConstructor</source>
          <target state="translated">TupleConstructor</target>
        </trans-unit>
        <trans-unit id="f1e4d25a4df31ed4ef545cff5a8adc582e6afafa" translate="yes" xml:space="preserve">
          <source>Turn a single bytes into two hex character representation.</source>
          <target state="translated">将一个单字节变成两个十六进制字符表示。</target>
        </trans-unit>
        <trans-unit id="49ecf28e6e75c79c1bae68b1e67567f955594445" translate="yes" xml:space="preserve">
          <source>Turns a CharSequence into a regular expression Pattern.</source>
          <target state="translated">将一个CharSequence变成一个正则表达式模式。</target>
        </trans-unit>
        <trans-unit id="8b5ecabf89feaced0f10cca1b75eaa9a0b97df26" translate="yes" xml:space="preserve">
          <source>Turns a String into a regular expression pattern</source>
          <target state="translated">将一个字符串变成一个正则表达式模式</target>
        </trans-unit>
        <trans-unit id="3cb3e98eb8e2e135669cad19465a644a497dbc69" translate="yes" xml:space="preserve">
          <source>Turns a single nibble into an ascii HEX digit.</source>
          <target state="translated">将单一的nibble转化为ascii HEX数字。</target>
        </trans-unit>
        <trans-unit id="fc0116a7d5ea421c8f159d2d2e5939674baf46e7" translate="yes" xml:space="preserve">
          <source>Turns debugging operation on or off.</source>
          <target state="translated">开启或关闭调试操作。</target>
        </trans-unit>
        <trans-unit id="076d1494a2d76e286cf6135673904d9758e1080c" translate="yes" xml:space="preserve">
          <source>Turns expressions of the form ConstantExpression(40) + ConstantExpression(2) into the simplified ConstantExpression(42) at compile time.</source>
          <target state="translated">在编译时将ConstantExpression(40)+ConstantExpression(2)形式的表达式转化为简化的ConstantExpression(42)。</target>
        </trans-unit>
        <trans-unit id="8d1e9f9c38f85c5a13ed1c5bca55c9086304104a" translate="yes" xml:space="preserve">
          <source>Turns on buffer chopping for index overlay.</source>
          <target state="translated">开启索引叠加的缓冲区切割。</target>
        </trans-unit>
        <trans-unit id="3f23af4f80e9b71be153d01230a09c00c5c672d0" translate="yes" xml:space="preserve">
          <source>Turns on buffer lazy chopping for index overlay.</source>
          <target state="translated">为索引叠加开启缓冲区懒惰切割。</target>
        </trans-unit>
        <trans-unit id="e1c5309cc34e3066bcf45513f134f1241f72fe9e" translate="yes" xml:space="preserve">
          <source>Turns on strict type checking for property (or field) types.</source>
          <target state="translated">开启对属性(或字段)类型的严格类型检查。</target>
        </trans-unit>
        <trans-unit id="3d779ac01b14791cd0e067402c2123f63a7e4449" translate="yes" xml:space="preserve">
          <source>Turns on strict type checking for property (or field) types. In strict mode, such types must also implement Serializable or Externalizable. If your properties have interface types that don't implement Serializable but all the concrete implementations do, or the type is of a non-Serializable class but the property will be null at runtime, then your instances will still be serializable but you can't turn on strict checking.</source>
          <target state="translated">开启属性(或字段)类型的严格类型检查。在严格模式下,这种类型还必须实现Serializable或Externalizable。如果你的属性的接口类型没有实现Serializable,但所有的具体实现都实现了,或者类型是一个非Serializable类,但属性在运行时将为空,那么你的实例仍然是可序列化的,但你不能开启严格检查。</target>
        </trans-unit>
        <trans-unit id="08c48a070a3135fc74b3a17e75f60854a7234b16" translate="yes" xml:space="preserve">
          <source>Turns parameter metadata generation on or off.</source>
          <target state="translated">打开或关闭参数元数据的生成。</target>
        </trans-unit>
        <trans-unit id="b81c265314f57d870e505aab6df53bdf75a8baae" translate="yes" xml:space="preserve">
          <source>Turns verbose operation on or off.</source>
          <target state="translated">开启或关闭啰嗦操作。</target>
        </trans-unit>
        <trans-unit id="e0c6ba0cfcda861420249d80571c19efdc4d8424" translate="yes" xml:space="preserve">
          <source>Two names joined by a dot.</source>
          <target state="translated">两个名字用一个点连接。</target>
        </trans-unit>
        <trans-unit id="098c0d36c4892c1fc2efff04f6208744a900cc92" translate="yes" xml:space="preserve">
          <source>Two names joined by a dot. If the base name is empty, returns the name unchanged.</source>
          <target state="translated">由点连接的两个名字。如果基本名称为空,则返回名称不变。</target>
        </trans-unit>
        <trans-unit id="3deb7456519697ecf4eefc455516c969a3681bae" translate="yes" xml:space="preserve">
          <source>Type</source>
          <target state="translated">Type</target>
        </trans-unit>
        <trans-unit id="ee41554ee4cbeca5f1934c97a4780476ff68846b" translate="yes" xml:space="preserve">
          <source>Type Params</source>
          <target state="translated">类型参数</target>
        </trans-unit>
        <trans-unit id="b1aa7266eb245f092e14535461141a1679d4fedb" translate="yes" xml:space="preserve">
          <source>Type conversion method for null.</source>
          <target state="translated">null的类型转换方法。</target>
        </trans-unit>
        <trans-unit id="0a44ab19456d90ec0420ca2845ee74b8f5a46aef" translate="yes" xml:space="preserve">
          <source>TypeCheckingMode.PASS</source>
          <target state="translated">TypeCheckingMode.PASS</target>
        </trans-unit>
        <trans-unit id="00d0c03442b1e588fce6ec02279c1bca5abe8087" translate="yes" xml:space="preserve">
          <source>TypeChooser</source>
          <target state="translated">TypeChooser</target>
        </trans-unit>
        <trans-unit id="93b9e289e2842469d001eccf7ad5d79f3c302dc9" translate="yes" xml:space="preserve">
          <source>Types</source>
          <target state="translated">Types</target>
        </trans-unit>
        <trans-unit id="a37965c6d74cd91c105a5af7d17ac48c2ae2ac45" translate="yes" xml:space="preserve">
          <source>Typical usage</source>
          <target state="translated">典型用途</target>
        </trans-unit>
        <trans-unit id="3d6f10497ff38408e44e31ef895db7d767331945" translate="yes" xml:space="preserve">
          <source>Typical usage (emulate partial arg processing of unix command: ls -alt *.groovy):</source>
          <target state="translated">典型的用法(模拟unix命令的部分arg处理:ls -alt *.groovy)。</target>
        </trans-unit>
        <trans-unit id="9f433de3a09f2cf5cd13a827c57725457d725e39" translate="yes" xml:space="preserve">
          <source>Typical usage:</source>
          <target state="translated">典型用途:</target>
        </trans-unit>
        <trans-unit id="5c52c57fea68cb05fc06ca7ba3b0557361b8e05b" translate="yes" xml:space="preserve">
          <source>Typical usages:</source>
          <target state="translated">典型用途:</target>
        </trans-unit>
        <trans-unit id="95eabe80298982d4b1ba57fa25a7982210efe573" translate="yes" xml:space="preserve">
          <source>Typically involves using Ant from the command-line and an Ant build file such as:</source>
          <target state="translated">通常涉及从命令行中使用Ant和Ant构建文件,如:。</target>
        </trans-unit>
        <trans-unit id="c1b02a795a625c7526382b68b7c26e2eb021c032" translate="yes" xml:space="preserve">
          <source>Typically this is used from the groovy command line agent but it can be invoked programmatically. To run this program from the command line please refer to the command line documentation at &lt;a href=&quot;http://docs.groovy-lang.org/docs/latest/html/documentation/#_running_groovy_from_the_commandline&quot;&gt; Running Groovy from the commandline&lt;/a&gt;.</source>
          <target state="translated">通常，这是从groovy命令行代理使用的，但是可以以编程方式调用它。要从命令行运行该程序，请参阅从命令行&lt;a href=&quot;http://docs.groovy-lang.org/docs/latest/html/documentation/#_running_groovy_from_the_commandline&quot;&gt;运行Groovy&lt;/a&gt;上的命令行文档。</target>
        </trans-unit>
        <trans-unit id="87aa37a3b20fd0c1d8d14c9ac653383c9dfb2129" translate="yes" xml:space="preserve">
          <source>Typing information for the CST system. The types here are those used by CSTNode, Token, and Reduction.</source>
          <target state="translated">CST系统的类型信息。这里的类型是CSTNode、Token和Reduction使用的类型。</target>
        </trans-unit>
        <trans-unit id="8e8d047a800c253985b7924ff1dd2669bf3267b5" translate="yes" xml:space="preserve">
          <source>URI for the URL of this source.</source>
          <target state="translated">该源的URL的URI。</target>
        </trans-unit>
        <trans-unit id="d19c4c6839e353f6795add33970264512f8d2711" translate="yes" xml:space="preserve">
          <source>URI for the file of this source.</source>
          <target state="translated">该源文件的URI。</target>
        </trans-unit>
        <trans-unit id="156b2656ed25a5b4d682b68f8fb3cfda1fe850ce" translate="yes" xml:space="preserve">
          <source>URISyntaxException</source>
          <target state="translated">URISyntaxException</target>
        </trans-unit>
        <trans-unit id="1c554c9c1bd7e994e0f7be208c560c95e7c5f7d5" translate="yes" xml:space="preserve">
          <source>URLClassLoader</source>
          <target state="translated">URLClassLoader</target>
        </trans-unit>
        <trans-unit id="5f2b4388ce038eab842ba31c91e7dead4b75d0aa" translate="yes" xml:space="preserve">
          <source>URLClassLoader.close</source>
          <target state="translated">URLClassLoader.close</target>
        </trans-unit>
        <trans-unit id="ab324df75517998be7784fd59659a7e7d8153f08" translate="yes" xml:space="preserve">
          <source>URLConnection.getInputStream</source>
          <target state="translated">URLConnection.getInputStream</target>
        </trans-unit>
        <trans-unit id="ce814b4c65110973cfd40e7ae6ca322b67161fd8" translate="yes" xml:space="preserve">
          <source>Uncapitalizes a string.</source>
          <target state="translated">取消字符串的大写字母。</target>
        </trans-unit>
        <trans-unit id="358d28bfab2b2b73eb26c1322f899192f5ea4faa" translate="yes" xml:space="preserve">
          <source>Undeclare a previously declared bean.</source>
          <target state="translated">取消声明一个先前声明的bean。</target>
        </trans-unit>
        <trans-unit id="1a9e4621c04aad4194f937843f9268faae35c192" translate="yes" xml:space="preserve">
          <source>Undefined.CLASS.class</source>
          <target state="translated">Undefined.CLASS.class</target>
        </trans-unit>
        <trans-unit id="c523f082b204b734f4f525f1f94854805519ade2" translate="yes" xml:space="preserve">
          <source>Undefined.EXCEPTION.class</source>
          <target state="translated">Undefined.EXCEPTION.class</target>
        </trans-unit>
        <trans-unit id="b81d784cf2d2b0d82b67553ee287251851828b2b" translate="yes" xml:space="preserve">
          <source>Undefined.STRING</source>
          <target state="translated">Undefined.STRING</target>
        </trans-unit>
        <trans-unit id="0aa0cc9d817a54c59f80352e91065444aedb3875" translate="yes" xml:space="preserve">
          <source>Under the hood the returned template is represented as a four argument closure where the three first arguments are &lt;a href=&quot;../lang/closure#curry&quot;&gt;curried&lt;/a&gt; in while generating the template.</source>
          <target state="translated">引擎盖下返回的模板被表示为一个四个参数闭合，其中三个第一参数被&lt;a href=&quot;../lang/closure#curry&quot;&gt;咖喱&lt;/a&gt;在同时产生的模板。</target>
        </trans-unit>
        <trans-unit id="67ceaed6309311d06fd36e0765d59dd1893542a3" translate="yes" xml:space="preserve">
          <source>Underlying reader from which to read the JSON tokens.</source>
          <target state="translated">读取JSON tokens的底层阅读器。</target>
        </trans-unit>
        <trans-unit id="f33e0303b36a1e3dcbcbabff9ca8e8a577ea8302" translate="yes" xml:space="preserve">
          <source>Underlying reader from which to read the JSON tokens. This reader is an instance of &lt;code&gt;LineColumnReader&lt;/code&gt;, to keep track of line and column positions.</source>
          <target state="translated">从其读取JSON令牌的基础阅读器。该阅读器是 &lt;code&gt;LineColumnReader&lt;/code&gt; 的一个实例，用于跟踪行和列的位置。</target>
        </trans-unit>
        <trans-unit id="e3ab098fe77f977311d2922fe030a058505734a1" translate="yes" xml:space="preserve">
          <source>Unescapes any Java literals found in the &lt;code&gt;String&lt;/code&gt; to a &lt;code&gt;Writer&lt;/code&gt;.</source>
          <target state="translated">将在 &lt;code&gt;String&lt;/code&gt; 中找到的所有Java文字转义到 &lt;code&gt;Writer&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="7173a50eeb4eea7e9ee80599fe3b630de058c7f5" translate="yes" xml:space="preserve">
          <source>Unescapes any Java literals found in the &lt;code&gt;String&lt;/code&gt;.</source>
          <target state="translated">取消转义 &lt;code&gt;String&lt;/code&gt; 中找到的所有Java文字。</target>
        </trans-unit>
        <trans-unit id="e7720ead48665ed7307d790485542a1cc5b1159f" translate="yes" xml:space="preserve">
          <source>Unescapes any Java literals found in the &lt;code&gt;String&lt;/code&gt;. For example, it will turn a sequence of &lt;code&gt;'\'&lt;/code&gt; and &lt;code&gt;'n'&lt;/code&gt; into a newline character, unless the &lt;code&gt;'\'&lt;/code&gt; is preceded by another &lt;code&gt;'\'&lt;/code&gt;.</source>
          <target state="translated">取消转义 &lt;code&gt;String&lt;/code&gt; 中找到的所有Java文字。例如，它将把序列 &lt;code&gt;'\'&lt;/code&gt; 和 &lt;code&gt;'n'&lt;/code&gt; 转换为换行符，除非在 &lt;code&gt;'\'&lt;/code&gt; 接另一个 &lt;code&gt;'\'&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="73638b542292ef17dc279dad9c58db96a2adfc59" translate="yes" xml:space="preserve">
          <source>Unescapes any JavaScript literals found in the &lt;code&gt;String&lt;/code&gt; to a &lt;code&gt;Writer&lt;/code&gt;.</source>
          <target state="translated">将在 &lt;code&gt;String&lt;/code&gt; 中找到的所有JavaScript文字转义到 &lt;code&gt;Writer&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="8a657986d819bc716f24eb07ea6bc59720443c72" translate="yes" xml:space="preserve">
          <source>Unescapes any JavaScript literals found in the &lt;code&gt;String&lt;/code&gt;.</source>
          <target state="translated">取消转义在 &lt;code&gt;String&lt;/code&gt; 中找到的所有JavaScript文字。</target>
        </trans-unit>
        <trans-unit id="2a5a159b63158b14b346ce6f1de97deac574af9e" translate="yes" xml:space="preserve">
          <source>Unicode files encoded in UTF-16 (low or big endian) or UTF-8 files with a Byte Order Marker are correctly discovered. For UTF-8 files with no BOM, if the buffer is wide enough, the charset should also be discovered.</source>
          <target state="translated">以UTF-16(low或big endian)编码的Unicode文件或带有字节顺序标记的UTF-8文件都会被正确地发现,对于没有BOM的UTF-8文件,如果缓冲区足够宽,也应该发现其字符集。对于没有BOM的UTF-8文件,如果缓冲区足够宽,也应该能发现字符集。</target>
        </trans-unit>
        <trans-unit id="0ddaaf780c9933a40a73cd6bf648ad0e2d36f1e3" translate="yes" xml:space="preserve">
          <source>Uninitialized variables</source>
          <target state="translated">未初始化的变量</target>
        </trans-unit>
        <trans-unit id="907124c8cce546a5106f790303c175c7a2445fd4" translate="yes" xml:space="preserve">
          <source>Unknown keys in the map are ignored, and if the values would not change the object, then the original object is returned. If a method called &lt;code&gt;copyWith&lt;/code&gt; that takes a single parameter already exists in the class, then this setting is ignored, and no method is generated.</source>
          <target state="translated">映射中的未知键将被忽略，如果值不会更改对象，则将返回原始对象。如果类中已经存在一个名为 &lt;code&gt;copyWith&lt;/code&gt; 的方法，该方法带有单个参数，则将忽略此设置，并且不会生成任何方法。</target>
        </trans-unit>
        <trans-unit id="633951cd1cb9dd188d325ff441878d65e53aecff" translate="yes" xml:space="preserve">
          <source>Unlike general impl in superclass, ctors are not intercepted but relayed unless interceptConstruction is set.</source>
          <target state="translated">与超类中的一般 impl 不同,ctors 不被拦截,而是被中继,除非设置了 interceptConstruction。</target>
        </trans-unit>
        <trans-unit id="76ccad54f4a2bc4290df16685e98eb453c363a97" translate="yes" xml:space="preserve">
          <source>Unlike the JsonBuilder class which creates a data structure in memory, which is handy in those situations where you want to alter the structure programatically before output, the StreamingJsonBuilder streams to a writer directly without any memory data structure. So if you don't need to modify the structure, and want a more memory-efficient approach, please use the StreamingJsonBuilder.</source>
          <target state="translated">与JsonBuilder类不同的是,JsonBuilder类在内存中创建了一个数据结构,这在那些想在输出前以程序方式改变结构的情况下很方便,而StreamingJsonBuilder则不需要任何内存数据结构,直接流式传输到写入器。所以,如果你不需要修改结构,想用更节省内存的方法,请使用StreamingJsonBuilder。</target>
        </trans-unit>
        <trans-unit id="94d56c1879d10c11985c086e8308f680797dce7c" translate="yes" xml:space="preserve">
          <source>Unlike the unix tr command, Groovy's tr command supports reverse ranges, e.g.:</source>
          <target state="translated">与unix的tr命令不同,Groovy的tr命令支持反向范围,例如:。</target>
        </trans-unit>
        <trans-unit id="c1627a2ad8ea0075811203051df1b622ca0c7a22" translate="yes" xml:space="preserve">
          <source>Unmarshal xml data from the given &lt;code&gt;String&lt;/code&gt; to object of the given type.</source>
          <target state="translated">将xml数据从给定的 &lt;code&gt;String&lt;/code&gt; 解组到给定类型的对象。</target>
        </trans-unit>
        <trans-unit id="132d6edf54929096d216bf4e33d5113f94170c57" translate="yes" xml:space="preserve">
          <source>UnsupportedEncodingException if an encoding exception occurs.</source>
          <target state="translated">如果发生编码异常,则为UnsupportedEncodingException。</target>
        </trans-unit>
        <trans-unit id="8dbf375a39011bc12d0d6a27d1d7e4dd5f2350d3" translate="yes" xml:space="preserve">
          <source>UnsupportedEncodingException if the encoding specified is not supported</source>
          <target state="translated">如果指定的编码不受支持,则出现UnsupportedEncodingException。</target>
        </trans-unit>
        <trans-unit id="d6b9cc70af4626956ac004db8653f110603b7231" translate="yes" xml:space="preserve">
          <source>UnsupportedOperationException</source>
          <target state="translated">UnsupportedOperationException</target>
        </trans-unit>
        <trans-unit id="6aa5000c9787f2ba744a04a2795e1f9eb366a60a" translate="yes" xml:space="preserve">
          <source>UnsupportedOperationException always</source>
          <target state="translated">总是出现不支持的操作异常</target>
        </trans-unit>
        <trans-unit id="cdd0e9c1ab204fa196b14063493d356ddaf75df1" translate="yes" xml:space="preserve">
          <source>UnsupportedOperationException as the method is not implemented</source>
          <target state="translated">UnsupportedOperationException,因为该方法没有实现。</target>
        </trans-unit>
        <trans-unit id="a8a233ef8621e6fda5efd94939dd7b1851348cbb" translate="yes" xml:space="preserve">
          <source>UnsupportedOperationException is always thrown when this method is invoked.</source>
          <target state="translated">当这个方法被调用时,总是会抛出UnsupportedOperationException。</target>
        </trans-unit>
        <trans-unit id="d2274c1226aa2add84d9591bb390d75d3a7aec1a" translate="yes" xml:space="preserve">
          <source>UnsupportedOperationException is always thrown when this method is invoked. The Project properties are immutable.</source>
          <target state="translated">当这个方法被调用时,总会抛出UnsupportedOperationException。项目属性是不可改变的。</target>
        </trans-unit>
        <trans-unit id="08804dd7f79993a0cb1420f81d15e24a087a0ffc" translate="yes" xml:space="preserve">
          <source>UnsupportedTemporalTypeException if the field is not supported</source>
          <target state="translated">如果不支持该字段,则出现UnsupportedTemporalTypeException异常。</target>
        </trans-unit>
        <trans-unit id="e6c541d24fb2da2a5fe0b80e0b818533c16a1d92" translate="yes" xml:space="preserve">
          <source>Unwraps a &lt;a href=&quot;../../../../../groovy/lang/groovyruntimeexception&quot;&gt;GroovyRuntimeException&lt;/a&gt;.</source>
          <target state="translated">展开&lt;a href=&quot;../../../../../groovy/lang/groovyruntimeexception&quot;&gt;GroovyRuntimeException&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="3d23c5e24d475e2a1477925371bebbe724868823" translate="yes" xml:space="preserve">
          <source>Unwraps a &lt;a href=&quot;../../../../../groovy/lang/groovyruntimeexception&quot;&gt;GroovyRuntimeException&lt;/a&gt;. This method is called by the handle to unwrap internal exceptions of the runtime.</source>
          <target state="translated">展开&lt;a href=&quot;../../../../../groovy/lang/groovyruntimeexception&quot;&gt;GroovyRuntimeException&lt;/a&gt;。句柄调用此方法以解开运行时的内部异常。</target>
        </trans-unit>
        <trans-unit id="e1025aab317284892442c0e15d899d1f3f04d135" translate="yes" xml:space="preserve">
          <source>Unwraps a &lt;a href=&quot;../../runtime/wrappers/wrapper&quot;&gt;Wrapper&lt;/a&gt;.</source>
          <target state="translated">打开&lt;a href=&quot;../../runtime/wrappers/wrapper&quot;&gt;包装器&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="c09e105e6a38154130dba7f39a0c640e803fceec" translate="yes" xml:space="preserve">
          <source>Unwraps a &lt;a href=&quot;../../runtime/wrappers/wrapper&quot;&gt;Wrapper&lt;/a&gt;. This method is called by the handle to unwrap a Wrapper, which we use to force method selection.</source>
          <target state="translated">打开&lt;a href=&quot;../../runtime/wrappers/wrapper&quot;&gt;包装器&lt;/a&gt;。句柄调用此方法以解开包装器，我们使用该包装器来强制选择方法。</target>
        </trans-unit>
        <trans-unit id="29e788b9fef175bbf33e0db9537982ca5309d9e5" translate="yes" xml:space="preserve">
          <source>Updates the designated column with an &lt;code&gt;Object&lt;/code&gt; value.</source>
          <target state="translated">用 &lt;code&gt;Object&lt;/code&gt; 值更新指定的列。</target>
        </trans-unit>
        <trans-unit id="86be734331bac56942a931a46361eed2259a9771" translate="yes" xml:space="preserve">
          <source>Updates the phase marker on all sources.</source>
          <target state="translated">更新所有来源的相位标记。</target>
        </trans-unit>
        <trans-unit id="329f4c82f07ee91c3b587240f7ac566ed54ed34c" translate="yes" xml:space="preserve">
          <source>Upon execution of this code:</source>
          <target state="translated">在执行这段代码后。</target>
        </trans-unit>
        <trans-unit id="0bb18642b70b9f8a9c12ccf39487328f306b8e19" translate="yes" xml:space="preserve">
          <source>Usage</source>
          <target state="translated">Usage</target>
        </trans-unit>
        <trans-unit id="bf7c9f421bb27664d8b9e4f9b5923644d341b24d" translate="yes" xml:space="preserve">
          <source>Usage message would be:</source>
          <target state="translated">使用信息将是:</target>
        </trans-unit>
        <trans-unit id="7668c9ff68ca4fd9db9c71a4b176fe0b4b9c45bc" translate="yes" xml:space="preserve">
          <source>Usage summary displayed as the first line when &lt;code&gt;cli.usage()&lt;/code&gt; is called.</source>
          <target state="translated">调用 &lt;code&gt;cli.usage()&lt;/code&gt; 时，使用情况摘要显示为第一行。</target>
        </trans-unit>
        <trans-unit id="861a0e430ffac5e4ae6e11b7a947f2c32d388cf4" translate="yes" xml:space="preserve">
          <source>Usage:</source>
          <target state="translated">Usage:</target>
        </trans-unit>
        <trans-unit id="2f9068f5f4018cf45879dd5abbe1e0066a29dde4" translate="yes" xml:space="preserve">
          <source>Use #parameterizeType instead</source>
          <target state="translated">使用#parameterizeType代替</target>
        </trans-unit>
        <trans-unit id="c33b3d71f3086eab951f7ef18cb9e92ecbe231c3" translate="yes" xml:space="preserve">
          <source>Use &lt;a href=&quot;#StaticImportVisitor(org.codehaus.groovy.ast.ClassNode,%20org.codehaus.groovy.control.SourceUnit)&quot;&gt;StaticImportVisitor(ClassNode,SourceUnit)&lt;/a&gt;.</source>
          <target state="translated">使用&lt;a href=&quot;#StaticImportVisitor(org.codehaus.groovy.ast.ClassNode,%20org.codehaus.groovy.control.SourceUnit)&quot;&gt;StaticImportVisitor（ClassNode，SourceUnit）&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="d191c335a49fae706e02fecbfc5190ad332ac833" translate="yes" xml:space="preserve">
          <source>Use &lt;a href=&quot;#VOCABULARY&quot;&gt;VOCABULARY&lt;/a&gt; instead.</source>
          <target state="translated">请改用&lt;a href=&quot;#VOCABULARY&quot;&gt;VOCABULARY&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="761ae5cfffd280dc72496219a2be433aa691fe13" translate="yes" xml:space="preserve">
          <source>Use &lt;a href=&quot;#buildSqlWithIndexedProps(java.lang.String)&quot;&gt;buildSqlWithIndexedProps(String)&lt;/a&gt; instead</source>
          <target state="translated">使用&lt;a href=&quot;#buildSqlWithIndexedProps(java.lang.String)&quot;&gt;buildSqlWithIndexedProps（String）&lt;/a&gt;代替</target>
        </trans-unit>
        <trans-unit id="65adf15e171242cc61cde9f004fa69166f43ce6d" translate="yes" xml:space="preserve">
          <source>Use &lt;a href=&quot;#findDGMMethodsByNameAndArguments(java.lang.ClassLoader,%20org.codehaus.groovy.ast.ClassNode,%20java.lang.String,%20org.codehaus.groovy.ast.ClassNode,%20java.util.List)&quot;&gt;findDGMMethodsByNameAndArguments(ClassLoader, ClassNode, String, ClassNode[], List)&lt;/a&gt; instead</source>
          <target state="translated">使用&lt;a href=&quot;#findDGMMethodsByNameAndArguments(java.lang.ClassLoader,%20org.codehaus.groovy.ast.ClassNode,%20java.lang.String,%20org.codehaus.groovy.ast.ClassNode,%20java.util.List)&quot;&gt;findDGMMethodsByNameAndArguments器（classloader，ClassNode，字符串，ClassNode []，列表）&lt;/a&gt;，而不是</target>
        </trans-unit>
        <trans-unit id="ee691bb611c640e1b354929b5feb1a99722bc92d" translate="yes" xml:space="preserve">
          <source>Use &lt;a href=&quot;#findDGMMethodsForClassNode(java.lang.ClassLoader,%20org.codehaus.groovy.ast.ClassNode,%20java.lang.String)&quot;&gt;findDGMMethodsForClassNode(ClassLoader, ClassNode, String)&lt;/a&gt; instead</source>
          <target state="translated">使用&lt;a href=&quot;#findDGMMethodsForClassNode(java.lang.ClassLoader,%20org.codehaus.groovy.ast.ClassNode,%20java.lang.String)&quot;&gt;findDGMMethodsForClassNode（ClassLoader，ClassNode，String）&lt;/a&gt;代替</target>
        </trans-unit>
        <trans-unit id="b161911654f75b98aeb3ddcf9ee2c0f1dcbed742" translate="yes" xml:space="preserve">
          <source>Use &lt;a href=&quot;#findDGMMethodsForClassNode(java.lang.ClassLoader,%20org.codehaus.groovy.ast.ClassNode,%20java.lang.String,%20java.util.TreeSet)&quot;&gt;findDGMMethodsForClassNode(ClassLoader, ClassNode, String, TreeSet)&lt;/a&gt; instead</source>
          <target state="translated">使用&lt;a href=&quot;#findDGMMethodsForClassNode(java.lang.ClassLoader,%20org.codehaus.groovy.ast.ClassNode,%20java.lang.String,%20java.util.TreeSet)&quot;&gt;findDGMMethodsForClassNode器（classloader，ClassNode，字符串，TreeSet的）&lt;/a&gt;，而不是</target>
        </trans-unit>
        <trans-unit id="5e85e6dcd31833f2a8db0cc3ca83cd61ea42ee32" translate="yes" xml:space="preserve">
          <source>Use &lt;a href=&quot;#visitMethod(org.codehaus.groovy.ast.MethodNode)&quot;&gt;visitMethod(MethodNode)&lt;/a&gt; instead.</source>
          <target state="translated">请改用&lt;a href=&quot;#visitMethod(org.codehaus.groovy.ast.MethodNode)&quot;&gt;visitMethod（MethodNode）&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="e4662c555b17dc8b0a98c8b4444245723dfdda21" translate="yes" xml:space="preserve">
          <source>Use &lt;a href=&quot;../jmx/groovymbean&quot;&gt;GroovyMBean&lt;/a&gt;</source>
          <target state="translated">使用&lt;a href=&quot;../jmx/groovymbean&quot;&gt;GroovyMBean&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="28921730658c5d27b44d528ccfdd2669d3f424c2" translate="yes" xml:space="preserve">
          <source>Use &lt;a href=&quot;../m12n/extensionmodulescanner#MODULE_META_INF_FILE&quot;&gt;ExtensionModuleScanner.MODULE_META_INF_FILE&lt;/a&gt; instead</source>
          <target state="translated">使用&lt;a href=&quot;../m12n/extensionmodulescanner#MODULE_META_INF_FILE&quot;&gt;ExtensionModuleScanner.MODULE_META_INF_FILE&lt;/a&gt;代替</target>
        </trans-unit>
        <trans-unit id="10c6e1dbd1c19878326c9b0cbf18ef6a28ff0bc4" translate="yes" xml:space="preserve">
          <source>Use &lt;a href=&quot;factorybuildersupport#dispatchNodeCall(java.lang.Object,%20java.lang.Object)&quot;&gt;FactoryBuilderSupport.dispatchNodeCall&lt;/a&gt; instead.</source>
          <target state="translated">请改用&lt;a href=&quot;factorybuildersupport#dispatchNodeCall(java.lang.Object,%20java.lang.Object)&quot;&gt;FactoryBuilderSupport.dispatchNodeCall&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="2b756b1fec64743f117cf4cdf8dd4544afaff442" translate="yes" xml:space="preserve">
          <source>Use BeanUtils.capitalize instead</source>
          <target state="translated">使用BeanUtils.capitalize代替</target>
        </trans-unit>
        <trans-unit id="16d1de8b221d1537f4b885a3026e5c0d0b7e7282" translate="yes" xml:space="preserve">
          <source>Use Cases:</source>
          <target state="translated">用例:</target>
        </trans-unit>
        <trans-unit id="c1106eefa33fb126c5ee936e3b5b6c0574f4d3c4" translate="yes" xml:space="preserve">
          <source>Use LAX for config files as it allows comments. Use INDEX_OVERLAY for REST calls, WebSocket messages, AJAX, inter process communication, etc. Use CHAR_BUFFER if eager parsing of ints, dates, longs, are appealing. Use CHARACTER_SOURCE if you are dealing with large JSON files over 2MB. INDEX_OVERLAY is highly tuned for object deserialization from JSON.</source>
          <target state="translated">对配置文件使用LAX,因为它允许注释。对于REST调用、WebSocket消息、AJAX、进程间通信等使用INDEX_OVERLAY。如果急于解析ints、dates、long等内容,可以使用CHAR_BUFFER。如果你要处理超过2MB的大JSON文件,请使用CHARACTER_SOURCE。INDEX_OVERLAY是针对JSON对象反序列化的高度调整。</target>
        </trans-unit>
        <trans-unit id="019bc08bd157e54f314c672862268bb0de89cafe" translate="yes" xml:space="preserve">
          <source>Use collectNested instead</source>
          <target state="translated">使用 collectNested 代替</target>
        </trans-unit>
        <trans-unit id="a3d973ef12f3c1b68ee47dc1e55e189bf974da91" translate="yes" xml:space="preserve">
          <source>Use it like this for batchSize of 20:</source>
          <target state="translated">批量大小为20时,可以这样使用。</target>
        </trans-unit>
        <trans-unit id="c25719584b0c55f883ce167c1e0c5621ac28771d" translate="yes" xml:space="preserve">
          <source>Use it like this:</source>
          <target state="translated">像这样使用。</target>
        </trans-unit>
        <trans-unit id="fc2e1568a76cdd357caf62200510d365a887efa9" translate="yes" xml:space="preserve">
          <source>Use one or more &lt;code&gt;@NamedDelegate&lt;/code&gt; annotations to explicitly identify such parameters as delegate parameters</source>
          <target state="translated">使用一个或多个 &lt;code&gt;@NamedDelegate&lt;/code&gt; 批注将此类参数明确标识为委托参数</target>
        </trans-unit>
        <trans-unit id="b57bd68c2c74b653a8d3c85cfce06a70a71098ea" translate="yes" xml:space="preserve">
          <source>Use one or more &lt;code&gt;@NamedParam&lt;/code&gt; annotations to explicitly identify such parameters</source>
          <target state="translated">使用一个或多个 &lt;code&gt;@NamedParam&lt;/code&gt; 批注明确标识此类参数</target>
        </trans-unit>
        <trans-unit id="c7241b5e894738cb83da0d3c64bcb47e900154eb" translate="yes" xml:space="preserve">
          <source>Use the &lt;a href=&quot;../test/groovyassert&quot;&gt;GroovyAssert&lt;/a&gt; class instead</source>
          <target state="translated">改用&lt;a href=&quot;../test/groovyassert&quot;&gt;GroovyAssert&lt;/a&gt;类</target>
        </trans-unit>
        <trans-unit id="d07b551d4ed6bf8ea7cc201ceffc1f1b3717d3df" translate="yes" xml:space="preserve">
          <source>Use the Iterable version of asList instead</source>
          <target state="translated">使用asList的Iterable版本来代替。</target>
        </trans-unit>
        <trans-unit id="421a6f349c924bea894f04b21efbb52bf70d5400" translate="yes" xml:space="preserve">
          <source>Use the Iterable version of collectEntries instead</source>
          <target state="translated">使用 collectEntries 的 Iterable 版本代替</target>
        </trans-unit>
        <trans-unit id="ab3acb515ed84dfcd3dcdcbbbeceed8b40edc280" translate="yes" xml:space="preserve">
          <source>Use the Iterable version of collectMany instead</source>
          <target state="translated">使用 collectMany 的 Iterable 版本来代替。</target>
        </trans-unit>
        <trans-unit id="635659b9365645027a03fdd5e16f6fdf30350a4d" translate="yes" xml:space="preserve">
          <source>Use the Iterable version of collectNested instead</source>
          <target state="translated">使用 collectNested 的 Iterable 版本代替</target>
        </trans-unit>
        <trans-unit id="8a1702e0053b79b66d1c7a490b231ebd1ab9ee16" translate="yes" xml:space="preserve">
          <source>Use the Iterable version of combinations instead</source>
          <target state="translated">使用组合的Iterable版本代替</target>
        </trans-unit>
        <trans-unit id="691ec7ab61b2e1a750ebe922046a99e6388f38b3" translate="yes" xml:space="preserve">
          <source>Use the Iterable version of countBy instead</source>
          <target state="translated">使用 countBy 的 Iterable 版本代替</target>
        </trans-unit>
        <trans-unit id="46f9620ab8e19b5a928b68267822923d92335f95" translate="yes" xml:space="preserve">
          <source>Use the Iterable version of eachPermutation instead</source>
          <target state="translated">使用eachPermutation的Iterable版本代替。</target>
        </trans-unit>
        <trans-unit id="22f1d4ff5c24984eb0a68c16f9deff49f570d923" translate="yes" xml:space="preserve">
          <source>Use the Iterable version of findResults instead</source>
          <target state="translated">使用 findResults 的 Iterable 版本代替。</target>
        </trans-unit>
        <trans-unit id="1e482d1aa0e64c87d17766deb0fb5b337d56679d" translate="yes" xml:space="preserve">
          <source>Use the Iterable version of flatten instead</source>
          <target state="translated">使用扁平化的Iterable版本来代替。</target>
        </trans-unit>
        <trans-unit id="2e34c06723b882409274135d479ad6e7f8f08f02" translate="yes" xml:space="preserve">
          <source>Use the Iterable version of groupBy instead</source>
          <target state="translated">使用 groupBy 的 Iterable 版本来代替。</target>
        </trans-unit>
        <trans-unit id="20c16b13520eaf3eb6e10bc0b1c84a4fb1bb2855" translate="yes" xml:space="preserve">
          <source>Use the Iterable version of join instead</source>
          <target state="translated">用Iterable版本的join代替</target>
        </trans-unit>
        <trans-unit id="f0fc3c4049c205eca3062c93c0df04bd6a1662a9" translate="yes" xml:space="preserve">
          <source>Use the Iterable version of max instead</source>
          <target state="translated">使用 max 的 Iterable 版本代替</target>
        </trans-unit>
        <trans-unit id="05f12821715d31a7c0b7d28ab48b8f96d424766a" translate="yes" xml:space="preserve">
          <source>Use the Iterable version of min instead</source>
          <target state="translated">使用 min 的 Iterable 版本代替</target>
        </trans-unit>
        <trans-unit id="8cd14230e49eb98758e85a7a45fd6b80d628bf91" translate="yes" xml:space="preserve">
          <source>Use the Iterable version of permutations instead</source>
          <target state="translated">使用Iterable版本的permutations代替</target>
        </trans-unit>
        <trans-unit id="becad649595ca66eeacee86d378ccabb6fc46223" translate="yes" xml:space="preserve">
          <source>Use the Iterable version of sort instead</source>
          <target state="translated">使用 Iterable 版本的 sort 来代替</target>
        </trans-unit>
        <trans-unit id="cbea34127ff02ac6c374cc402529ffc089215c9a" translate="yes" xml:space="preserve">
          <source>Use the Iterable version of sum instead</source>
          <target state="translated">使用Iterable版本的sum代替</target>
        </trans-unit>
        <trans-unit id="fa28ca9c78e328b2c862d4157dd2d3211ab0e20f" translate="yes" xml:space="preserve">
          <source>Use the Iterable version of toList instead</source>
          <target state="translated">使用 toList 的 Iterable 版本来代替。</target>
        </trans-unit>
        <trans-unit id="7692ff493b88e534487e3da884fe5f4d554fed63" translate="yes" xml:space="preserve">
          <source>Use the ProxyMetaClass for the given Closure.</source>
          <target state="translated">为给定的Closure使用ProxyMetaClass。</target>
        </trans-unit>
        <trans-unit id="f7a4a4373b97d7be36a555143a01eb2fe8ee763d" translate="yes" xml:space="preserve">
          <source>Use the ProxyMetaClass for the given Closure. Cares for balanced register/unregister.</source>
          <target state="translated">对给定的Closure使用ProxyMetaClass。照顾平衡注册/未注册。</target>
        </trans-unit>
        <trans-unit id="e838e1c18c34dce73f2913ab6a498c087d2e713e" translate="yes" xml:space="preserve">
          <source>Use the ProxyMetaClass for the given Closure. Cares for balanced setting/unsetting ProxyMetaClass.</source>
          <target state="translated">为给定的Closure使用ProxyMetaClass。照顾平衡设置/取消设置ProxyMetaClass。</target>
        </trans-unit>
        <trans-unit id="fb2c5bcc14dbceb109e63a26769be4a061db2ce7" translate="yes" xml:space="preserve">
          <source>Use this exception to mark a method implementation as being deprecated. Use the message to indicate the recommended way of calling the desired functionality. Make throwing this exception the only line in the method implementation, i.e. unlike the JavaDoc deprecated feature there is no relay to the new implementation but an early and deliberate halt of execution (&quot;fail early&quot;). This exception is supposed to be used in the SNAPSHOT releases only. Before release, all references to this exception should be resolved and the according methods removed.</source>
          <target state="translated">使用这个异常来标记一个方法实现被废弃。使用该消息来指示调用所需功能的推荐方式。使抛出这个异常成为方法实现中唯一的一行,即与JavaDoc废弃功能不同,没有中继到新的实现,而是提前故意停止执行(&quot;提前失败&quot;)。这个异常应该只在SNAPSHOT版本中使用。在发布之前,应该解析所有对这个异常的引用,并删除相应的方法。</target>
        </trans-unit>
        <trans-unit id="b79daf9f913ddc225b954998f828577070db8052" translate="yes" xml:space="preserve">
          <source>Use this method to tell if a variable is used in a closure, like in the following example:</source>
          <target state="translated">使用这个方法来判断一个变量是否在闭包中使用,就像下面的例子。</target>
        </trans-unit>
        <trans-unit id="11cc16f6cc3d33a92f0e7a37856cb94c86d26dca" translate="yes" xml:space="preserve">
          <source>Use this when calling a stored procedure that utilizes both output parameters and returns a single ResultSet.</source>
          <target state="translated">当调用一个利用两个输出参数并返回一个结果集的存储过程时,请使用该功能。</target>
        </trans-unit>
        <trans-unit id="ada0ccef28d8e09e8ada17bf5642688db66f4c2c" translate="yes" xml:space="preserve">
          <source>Use this when calling a stored procedure that utilizes both output parameters and returns multiple ResultSets.</source>
          <target state="translated">当调用一个同时使用两个输出参数并返回多个ResultSets的存储过程时,请使用该功能。</target>
        </trans-unit>
        <trans-unit id="dccbb537e68f6e74506ce56464d6184e72fa7582" translate="yes" xml:space="preserve">
          <source>Used for &lt;code&gt;break foo&lt;/code&gt; inside a loop to end the execution of the marked loop.</source>
          <target state="translated">用于循环内的 &lt;code&gt;break foo&lt;/code&gt; ,以结束标记循环的执行。</target>
        </trans-unit>
        <trans-unit id="800e3de23ddc8db6e55ac21138d1bc1adcbedeb4" translate="yes" xml:space="preserve">
          <source>Used for &lt;code&gt;break foo&lt;/code&gt; inside a loop to end the execution of the marked loop. This method will return the break label of the loop if there is one found for the name. If not, the current break label is returned.</source>
          <target state="translated">用于循环内的 &lt;code&gt;break foo&lt;/code&gt; ,以结束标记循环的执行。如果找到该名称，则此方法将返回循环的中断标签。如果不是，则返回当前的中断标签。</target>
        </trans-unit>
        <trans-unit id="9c5b0a938efa4340e38a259c1a6e465ec36692ec" translate="yes" xml:space="preserve">
          <source>Used for &lt;code&gt;continue foo&lt;/code&gt; inside a loop to continue the execution of the marked loop.</source>
          <target state="translated">用于在循环内继续执行 &lt;code&gt;continue foo&lt;/code&gt; 以继续执行标记的循环。</target>
        </trans-unit>
        <trans-unit id="ac82cfd7809b7eb2e6dfbaee1c23063b26aa6d46" translate="yes" xml:space="preserve">
          <source>Used for &lt;code&gt;continue foo&lt;/code&gt; inside a loop to continue the execution of the marked loop. This method will return the break label of the loop if there is one found for the name. If not, getLabel is used.</source>
          <target state="translated">用于在循环内继续执行 &lt;code&gt;continue foo&lt;/code&gt; 以继续执行标记的循环。如果找到该名称，则此方法将返回循环的中断标签。如果不是，则使用getLabel。</target>
        </trans-unit>
        <trans-unit id="3db3bfd8e17c1655e0b911ad20a9ba5fd08b5698" translate="yes" xml:space="preserve">
          <source>Used for pretty printing XML content and other XML related utilities.</source>
          <target state="translated">用于漂亮的打印XML内容和其他XML相关的实用程序。</target>
        </trans-unit>
        <trans-unit id="65a3efef82352e3e31abc7e360d6e0c6378897bb" translate="yes" xml:space="preserve">
          <source>Used in cases where a declaration cannot have commas, or ends with the &quot;in&quot; operator instead of '='.</source>
          <target state="translated">用于声明中不能有逗号,或以 &quot;in &quot;操作符代替'='结束的情况。</target>
        </trans-unit>
        <trans-unit id="e2583404231b0f00a595efe7c3687d8d1d52096c" translate="yes" xml:space="preserve">
          <source>Used internally - the default value is a marker value indicating that the attribute hasn't been set.</source>
          <target state="translated">内部使用--默认值是表示该属性尚未设置的标记值。</target>
        </trans-unit>
        <trans-unit id="23a8a9529a26d562779dfde02c95b5a897eb37f8" translate="yes" xml:space="preserve">
          <source>Used internally - the default value is a marker value indicating that the attribute hasn't been set. Normally set automatically during annotation processing to an automatically created nested helper class which holds serialization information used in pre-compiled scenarios. If set to the collector annotation, re-purposes the annotation itself to become the helper class (legacy approach used in Groovy 2.5 up to 2.5.2).</source>
          <target state="translated">内部使用--默认值是一个标记值,表示该属性尚未设置。通常在注解处理过程中自动设置为自动创建的嵌套帮助者类,该类持有预编译方案中使用的序列化信息。如果设置为收集器注解,则重新将注解本身变成帮助类(Groovy 2.5至2.5.2中使用的传统方法)。</target>
        </trans-unit>
        <trans-unit id="f3a40bca2bf49f8b57f6001bb38b31d33451b5b4" translate="yes" xml:space="preserve">
          <source>Used only as a lookahead predicate for nested type definitions.</source>
          <target state="translated">仅作为嵌套类型定义的看前谓词使用。</target>
        </trans-unit>
        <trans-unit id="85c2276aa9db74e5e78028f7210d9abcbe720c11" translate="yes" xml:space="preserve">
          <source>Used only as a lookahead predicate, before diving in and parsing a declaration.</source>
          <target state="translated">仅作为一个lookahead谓词使用,在进入并解析声明之前。</target>
        </trans-unit>
        <trans-unit id="2699654ea83274c3ae7589a892f49a80d3fa1412" translate="yes" xml:space="preserve">
          <source>Used only as a lookahead predicate, before diving in and parsing a declaration. A declaration can be unambiguously introduced with &quot;def&quot;, an annotation or a modifier token like &quot;final&quot;. It may also be introduced by a simple identifier whose first character is an uppercase letter, as in {String x}. A declaration can also be introduced with a built in type like 'int' or 'void'. Brackets (array and generic) are allowed, as in {List[] x} or {int[][] y}. Anything else is parsed as a statement of some sort (expression or command).</source>
          <target state="translated">在进入并解析声明之前,仅作为一个lookahead谓词使用。一个声明可以用 &quot;def&quot;、注释或修饰符(如 &quot;final&quot;)来明确地引入,也可以用一个简单的标识符(其第一个字符为大写字母)来引入,如{String x}。它也可以由一个简单的标识符引入,这个标识符的第一个字符是一个大写字母,如{String x}。声明也可以用内置的类型引入,如 &quot;int &quot;或 &quot;void&quot;。允许使用括号(数组和通用),如{List[]x}或{int[][]y}。其他任何内容都会被解析为某种声明(表达式或命令)。</target>
        </trans-unit>
        <trans-unit id="16451c37754fb290018b89a27428618ad89c0d23" translate="yes" xml:space="preserve">
          <source>Used to add a repository for resolving Grape dependencies.</source>
          <target state="translated">用于添加一个用于解析Grape依赖关系的存储库。</target>
        </trans-unit>
        <trans-unit id="784c080cd600be1323d62f76060e5dc519573d84" translate="yes" xml:space="preserve">
          <source>Used to check if a type is a float or Float.</source>
          <target state="translated">用于检查一个类型是浮点还是浮点。</target>
        </trans-unit>
        <trans-unit id="95906340ca3f93b1624029f1f6d515f45f4d4306" translate="yes" xml:space="preserve">
          <source>Used to check if a type is an double or Double.</source>
          <target state="translated">用于检查一个类型是双倍还是双倍。</target>
        </trans-unit>
        <trans-unit id="b0bf6fba721c89064bf530e8ae2f4a46cc19b0fe" translate="yes" xml:space="preserve">
          <source>Used to check if a type is an int or Integer.</source>
          <target state="translated">用于检查类型是int还是Integer。</target>
        </trans-unit>
        <trans-unit id="ce9b4549c563701dba683bbf4ea91fa78d9958e6" translate="yes" xml:space="preserve">
          <source>Used to determine if the given predicate closure is valid (i.e. returns &lt;code&gt;true&lt;/code&gt; for all items in this Array).</source>
          <target state="translated">用于确定给定的谓词闭包是否有效（即，对于此Array中的所有项目返回 &lt;code&gt;true&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="dafc0cc832dbc0e1ca1a5f988e8d34e6ae5fec68" translate="yes" xml:space="preserve">
          <source>Used to determine if the given predicate closure is valid (i.e. returns &lt;code&gt;true&lt;/code&gt; for all items in this data structure).</source>
          <target state="translated">用于确定给定的谓词闭包是否有效（即，对于此数据结构中的所有项目均返回 &lt;code&gt;true&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="dc41af13741ccefd013d558406224fce54562175" translate="yes" xml:space="preserve">
          <source>Used to determine if the given predicate closure is valid (i.e. returns &lt;code&gt;true&lt;/code&gt; for all items in this data structure). A simple example for a list:</source>
          <target state="translated">用于确定给定的谓词闭包是否有效（即，对于此数据结构中的所有项目均返回 &lt;code&gt;true&lt;/code&gt; ）。列表的一个简单示例：</target>
        </trans-unit>
        <trans-unit id="e7721a87c76faf0cafa1be78cb58598957afcf96" translate="yes" xml:space="preserve">
          <source>Used to determine if the given predicate closure is valid (i.e. returns &lt;code&gt;true&lt;/code&gt; for all items in this iterable).</source>
          <target state="translated">用于确定给定的谓词闭包是否有效（即，对于此iterable中的所有项目均返回 &lt;code&gt;true&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="cd0b9d8402f8516944bb9a0e631a72b5faddd72d" translate="yes" xml:space="preserve">
          <source>Used to determine if the given predicate closure is valid (i.e. returns &lt;code&gt;true&lt;/code&gt; for all items in this iterable). A simple example for a list:</source>
          <target state="translated">用于确定给定的谓词闭包是否有效（即，对于此iterable中的所有项目均返回 &lt;code&gt;true&lt;/code&gt; ）。列表的一个简单示例：</target>
        </trans-unit>
        <trans-unit id="608788190b33b0dfd6eeae47680606e1efa3aa7a" translate="yes" xml:space="preserve">
          <source>Used to determine if the given predicate closure is valid (i.e. returns &lt;code&gt;true&lt;/code&gt; for all items in this iterator).</source>
          <target state="translated">用于确定给定的谓词闭包是否有效（即，对于此迭代器中的所有项目均返回 &lt;code&gt;true&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="2ceaee0bb090f19a081b2b0fb3c6e104e625ebea" translate="yes" xml:space="preserve">
          <source>Used to determine if the given predicate closure is valid (i.e. returns &lt;code&gt;true&lt;/code&gt; for all items in this iterator). A simple example for a list:</source>
          <target state="translated">用于确定给定的谓词闭包是否有效（即，对于此迭代器中的所有项目均返回 &lt;code&gt;true&lt;/code&gt; ）。列表的一个简单示例：</target>
        </trans-unit>
        <trans-unit id="a4ccb78bec6bd13a1f3592500bb1aa085595ea83" translate="yes" xml:space="preserve">
          <source>Used to exclude an indirectly referenced artifact (a transitive dependency) from the classpath.</source>
          <target state="translated">用于从classpath中排除间接引用的工件(转义依赖)。</target>
        </trans-unit>
        <trans-unit id="97dbdcd42ad77444c4356fdae469876212fa5b70" translate="yes" xml:space="preserve">
          <source>Used to find strings and their ilk Finds the next non-escaped char</source>
          <target state="translated">用于查找字符串和它们的同类产品 查找下一个非逃逸的字符。</target>
        </trans-unit>
        <trans-unit id="055cdb8f1140a20d8dde7d3eaeb9530fa98ec8fc" translate="yes" xml:space="preserve">
          <source>Used to grab the referenced artifact and its dependencies and make it available on the Classpath.</source>
          <target state="translated">用于抓取被引用的工件及其依赖关系,并使其在Classpath上可用。</target>
        </trans-unit>
        <trans-unit id="165cc26c289219e4ee15ae9385bc52b4d6192d1b" translate="yes" xml:space="preserve">
          <source>Used to instruct the type checker that the call is a dynamic method call.</source>
          <target state="translated">用于指示类型检查器该调用是一个动态方法调用。</target>
        </trans-unit>
        <trans-unit id="4201116127c5ef1741b8f4efd13d2e9fb7550ecd" translate="yes" xml:space="preserve">
          <source>Used to instruct the type checker that the call is a dynamic method call. Calling this method automatically sets the handled flag to true.</source>
          <target state="translated">用于指示类型检查器该调用是一个动态方法调用。调用此方法会自动将handled标志设置为true。</target>
        </trans-unit>
        <trans-unit id="87509dbce8fd1343cd7b61930e05e528db8cce19" translate="yes" xml:space="preserve">
          <source>Used to instruct the type checker that the call is a dynamic method call. Calling this method automatically sets the handled flag to true. The expected return type of the dynamic method call is Object.</source>
          <target state="translated">用于指示类型检查器该调用是一个动态方法调用。调用此方法会自动将handled标志设置为true。动态方法调用的预期返回类型是Object。</target>
        </trans-unit>
        <trans-unit id="f765581ec17b613c3025dc48ba2b191e39a9fb4e" translate="yes" xml:space="preserve">
          <source>Used to look ahead for a constructor</source>
          <target state="translated">用于提前查看构造函数</target>
        </trans-unit>
        <trans-unit id="eb75932fd1166c46a706ed883487d17e7845885e" translate="yes" xml:space="preserve">
          <source>Used to mark a class as being a trait.</source>
          <target state="translated">用来标记一个类是一个特质。</target>
        </trans-unit>
        <trans-unit id="431b9fc313a7e3ce7cea73dd307896edf2bdd179" translate="yes" xml:space="preserve">
          <source>Used to modify the grape configuration for grab requests.</source>
          <target state="translated">用于修改抓取请求的葡萄配置。</target>
        </trans-unit>
        <trans-unit id="c22d276d8e3c2a07fd35c6d0c38a94e284c99c69" translate="yes" xml:space="preserve">
          <source>Used to provide custom property handling when getting, setting or initializing properties.</source>
          <target state="translated">用于在获取、设置或初始化属性时提供自定义属性处理。</target>
        </trans-unit>
        <trans-unit id="56b492f9ce15d0d8d66b0bc97d5e6ae44620450d" translate="yes" xml:space="preserve">
          <source>Used to represent compiled Groovy scripts. Such scripts may be executed repeatedly by Groovy's &lt;code&gt;ScriptEngine&lt;/code&gt; using the &lt;code&gt;eval&lt;/code&gt; method without reparsing overheads. Adapted from original by Mike Grogan and A. Sundararajan</source>
          <target state="translated">用于表示已编译的Groovy脚本。Groovy的 &lt;code&gt;ScriptEngine&lt;/code&gt; 可以使用 &lt;code&gt;eval&lt;/code&gt; 方法重复执行此类脚本，而无需重新计算开销。改编自Mike Grogan和A.Sundararajan的原著</target>
        </trans-unit>
        <trans-unit id="3b01da59b69469a42326082268ca108c89c6089e" translate="yes" xml:space="preserve">
          <source>Used to set whether default value processing is enabled (the default) or disabled.</source>
          <target state="translated">用于设置默认值处理是启用(默认)还是禁用。</target>
        </trans-unit>
        <trans-unit id="9069fe3b8cb19dea94c6c8439d3cc76ea0b4a127" translate="yes" xml:space="preserve">
          <source>Used to set whether default value processing is enabled (the default) or disabled. By default, every constructor parameter is given a default value. This value will be Java's default for primitive types (zero or false) and null for Objects, unless an initial value is given when declaring the property or field. A consequence of this design is that you can leave off parameters from the right if the default value will suffice. As far as Java interoperability is concerned, Groovy will create additional constructors under the covers representing the constructors with parameters left off, all the way from the constructor with all arguments to the no-arg constructor. However, when set to false, default values are not allowed for properties and fields. Only the constructor containing all arguments will be provided. In particular, a no-arg constructor won't be provided and since this is currently used by Groovy when using named-arguments, the named-argument style won't be available.</source>
          <target state="translated">用于设置默认值处理是启用(默认)还是禁用。默认情况下,每个构造函数参数都会被赋予一个默认值。这个值对于基元类型来说将是Java的默认值(0或false),对于对象来说将是空值,除非在声明属性或字段时给出一个初始值。这种设计的后果是,如果默认值就足够了,你可以不使用右边的参数。就Java的互操作性而言,Groovy会在封面下创建额外的构造函数,代表着留有参数的构造函数,从有所有参数的构造函数一直到无参数构造函数。但是,当设置为false时,不允许为属性和字段设置默认值。只有包含所有参数的构造函数才会被提供。特别是不会提供无参数的构造函数,由于目前Groovy在使用命名参数时使用的是无参数构造函数,所以命名参数样式将不可用。</target>
        </trans-unit>
        <trans-unit id="a886646c331ef07c338114ee226a98b5a6a7b538" translate="yes" xml:space="preserve">
          <source>Used to store the last regex match.</source>
          <target state="translated">用于存储最后的regex匹配。</target>
        </trans-unit>
        <trans-unit id="3b62ea0dc7e75426f46d979c6a2c5cd13a3ac161" translate="yes" xml:space="preserve">
          <source>Used when the field is not also &lt;code&gt;@Bindable&lt;/code&gt;.</source>
          <target state="translated">当字段也不是 &lt;code&gt;@Bindable&lt;/code&gt; 时使用。</target>
        </trans-unit>
        <trans-unit id="cbccbe2f23cfb90ef6977c08acaf49867835535f" translate="yes" xml:space="preserve">
          <source>Used within the Groovy's AntlrParserPlugin</source>
          <target state="translated">在Groovy的AntlrParserPlugin中使用。</target>
        </trans-unit>
        <trans-unit id="2770ca5abeb65f2508bd81a2133fbc4b06e1a528" translate="yes" xml:space="preserve">
          <source>Useful for finding constants in a string like true, false, etc.</source>
          <target state="translated">用于在字符串中寻找常量,如true、false等。</target>
        </trans-unit>
        <trans-unit id="5cee1a645690d4d273b52ec20adc0c25056fc823" translate="yes" xml:space="preserve">
          <source>Useful for handling Lists/Arrays vs normal properties.</source>
          <target state="translated">用于处理列表/数组与普通属性。</target>
        </trans-unit>
        <trans-unit id="a4f0ef60ad77dbdbfa1d65efc98adc9e61e9c0de" translate="yes" xml:space="preserve">
          <source>Useful for plug-in calls to non-default constructors.</source>
          <target state="translated">适用于插件对非默认构造函数的调用。</target>
        </trans-unit>
        <trans-unit id="348798742a1fae49e1212f341fdcda044d87bf2b" translate="yes" xml:space="preserve">
          <source>Useful helper method which handles resource management when executing a prepared query which returns a result set.</source>
          <target state="translated">当执行一个准备好的查询并返回一个结果集时,处理资源管理的有用的帮助程序方法。</target>
        </trans-unit>
        <trans-unit id="a435decf76a1ff1e8ebaabaa6f126f27107e0360" translate="yes" xml:space="preserve">
          <source>Useful helper method which handles resource management when executing a prepared query which returns a result set. Derived classes of Sql can override &quot;createPreparedQueryCommand&quot; and then call this method to access the ResultSet returned from the provided query.</source>
          <target state="translated">当执行一个返回结果集的准备好的查询时,处理资源管理的有用帮助方法。Sql的派生类可以覆盖 &quot;createPreparedQueryCommand&quot;,然后调用这个方法来访问从提供的查询中返回的结果集。</target>
        </trans-unit>
        <trans-unit id="e2d807f57a30308a6dbf0c6d0ae69ae9c7e167dd" translate="yes" xml:space="preserve">
          <source>Useful helper method which handles resource management when executing a query which returns a result set.</source>
          <target state="translated">当执行一个返回结果集的查询时,处理资源管理的有用助手方法。</target>
        </trans-unit>
        <trans-unit id="e26cc105695a67fdc5bfe3c315fee7de317615de" translate="yes" xml:space="preserve">
          <source>Useful helper method which handles resource management when executing a query which returns a result set. Derived classes of Sql can override &quot;createQueryCommand&quot; and then call this method to access the ResultSet returned from the provided query or alternatively can use the higher-level method of Sql which return result sets which are funnelled through this method, e.g. eachRow, query.</source>
          <target state="translated">当执行一个返回结果集的查询时,处理资源管理的有用辅助方法。Sql的派生类可以覆盖 &quot;createQueryCommand&quot;,然后调用这个方法来访问从提供的查询中返回的ResultSet,或者可以使用Sql的更高层次的方法来返回通过这个方法漏斗的结果集,例如eachRow,query。</target>
        </trans-unit>
        <trans-unit id="bd4296a216406c3fc55af6ea4c3c83405e244c10" translate="yes" xml:space="preserve">
          <source>Users wanting to customize the configuration process such as adding imports, restricting the language features or apply AST transformations by default should implement this class, then call the &lt;a href=&quot;../compilerconfiguration#addCompilationCustomizers(CompilationCustomizer...)&quot;&gt;CompilerConfiguration.addCompilationCustomizers&lt;/a&gt; method.</source>
          <target state="translated">想要自定义配置过程（例如添加导入，限制语言功能或默认情况下应用AST转换）的用户应实现此类，然后调用&lt;a href=&quot;../compilerconfiguration#addCompilationCustomizers(CompilationCustomizer...)&quot;&gt;CompilerConfiguration.addCompilationCustomizers&lt;/a&gt;方法。</target>
        </trans-unit>
        <trans-unit id="458d331b382cc1cc34d12d3a17c263868e9d2253" translate="yes" xml:space="preserve">
          <source>Uses a closure to filter lines from this InputStream and pass them to the given writer.</source>
          <target state="translated">使用一个闭包来过滤这个InputStream中的行,并将它们传递给给定的编写者。</target>
        </trans-unit>
        <trans-unit id="1a39e64d0e3cd88abdc6aebd97914dcdec5101ea" translate="yes" xml:space="preserve">
          <source>Uses a closure to filter lines from this InputStream and pass them to the given writer. The closure will be passed each line as a String, and it should return &lt;code&gt;true&lt;/code&gt; if the line should be passed to the writer.</source>
          <target state="translated">使用闭包从此InputStream过滤行并将它们传递给给定的编写器。闭包将作为字符串传递给每一行，如果该行应传递给编写器，则闭包应该返回 &lt;code&gt;true&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="54afbf320f2c8c98239f4c1d134aa2d5a4c79e0a" translate="yes" xml:space="preserve">
          <source>Uses a closure to filter lines from this URL and pass them to the given writer.</source>
          <target state="translated">使用一个闭合来过滤这个URL中的行,并将它们传递给给定的作者。</target>
        </trans-unit>
        <trans-unit id="11a632bffbee43442c8872df6a1cd45e77abe75a" translate="yes" xml:space="preserve">
          <source>Uses a closure to filter lines from this URL and pass them to the given writer. The closure will be passed each line as a String, and it should return &lt;code&gt;true&lt;/code&gt; if the line should be passed to the writer.</source>
          <target state="translated">使用闭包从此URL过滤行并将它们传递给给定的编写器。闭包将作为字符串传递给每一行，如果该行应传递给编写器，则闭包应该返回 &lt;code&gt;true&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="6e22b683ecd379e41b5796ea563d97e796a7f84a" translate="yes" xml:space="preserve">
          <source>Uses only cloning.</source>
          <target state="translated">只使用克隆。</target>
        </trans-unit>
        <trans-unit id="7974db1459792f1bf67c06059e3071462a1f396f" translate="yes" xml:space="preserve">
          <source>Uses serialization to clone.</source>
          <target state="translated">使用序列化来克隆。</target>
        </trans-unit>
        <trans-unit id="feb18d44119bf19b4c192ba0cb78e0193f285163" translate="yes" xml:space="preserve">
          <source>Uses the copy constructor pattern.</source>
          <target state="translated">使用复制构造函数模式。</target>
        </trans-unit>
        <trans-unit id="ce977f29b26b8917852c17980cc51f5d05ce78bc" translate="yes" xml:space="preserve">
          <source>Uses the no-arg constructor followed by property/field copying/cloning.</source>
          <target state="translated">使用无参数构造函数,然后进行属性/字段复制/克隆。</target>
        </trans-unit>
        <trans-unit id="e108c638feb0eaa352f100e7b622dac32b8aaa84" translate="yes" xml:space="preserve">
          <source>Using &lt;a href=&quot;delegatingscript&quot;&gt;DelegatingScript&lt;/a&gt; as the base class, the code will run as:</source>
          <target state="translated">使用&lt;a href=&quot;delegatingscript&quot;&gt;DelegatingScript&lt;/a&gt;作为基类，代码将运行为：</target>
        </trans-unit>
        <trans-unit id="58b0d92bf1fb000cf9252035b590f0bee9b79e86" translate="yes" xml:space="preserve">
          <source>Using add() and removeLast() is similar to push and pop on a Stack where the last item in the list represents the top of the stack.</source>
          <target state="translated">使用add()和removeLast()类似于Stack上的push和pop,列表中的最后一项代表堆栈的顶部。</target>
        </trans-unit>
        <trans-unit id="37c2dcb268343734205d5c60ca8405175fd92775" translate="yes" xml:space="preserve">
          <source>Utilities for configuring node positions</source>
          <target state="translated">配置节点位置的实用工具</target>
        </trans-unit>
        <trans-unit id="19df075076e8abeb3731cdde7ef2757acf1d2b13" translate="yes" xml:space="preserve">
          <source>Utilities for handling array types</source>
          <target state="translated">处理数组类型的工具</target>
        </trans-unit>
        <trans-unit id="9ac2346ff3c255fec60cd28b00f1652f9127f13e" translate="yes" xml:space="preserve">
          <source>Utilities for handling strings</source>
          <target state="translated">处理字符串的工具</target>
        </trans-unit>
        <trans-unit id="e8696b2c3bd8c45923377339859c6b2269a22414" translate="yes" xml:space="preserve">
          <source>Utility class for MissingMethodException, MissingPropertyException etc. This class contains methods assisting in ranking and listing probable intended methods/fields when a exception is thrown.</source>
          <target state="translated">MissingMethodException、MissingPropertyException等的实用类。这个类包含了一些方法,当一个异常被抛出时,这些方法可以帮助排列和列出可能的预期方法/字段。</target>
        </trans-unit>
        <trans-unit id="501281871293d57dc0902b0b45b9562b64ec03b5" translate="yes" xml:space="preserve">
          <source>Utility class for working with AnnotatedNodes</source>
          <target state="translated">用于处理AnnotatedNodes的实用类。</target>
        </trans-unit>
        <trans-unit id="f79e1848b337806904e174a1b2fd24d2d4af1d49" translate="yes" xml:space="preserve">
          <source>Utility class for working with ClassNodes</source>
          <target state="translated">用于处理ClassNodes的实用类</target>
        </trans-unit>
        <trans-unit id="16301db20442444355063d30a03c90d8e49515ea" translate="yes" xml:space="preserve">
          <source>Utility class for working with ConstructorNodes</source>
          <target state="translated">用于处理ConstructorNodes的实用类</target>
        </trans-unit>
        <trans-unit id="e7036ebe9ef24ccc6897c9eb73d9323cb1bdb99e" translate="yes" xml:space="preserve">
          <source>Utility class for working with MethodNodes</source>
          <target state="translated">用于处理MethodNodes的实用类</target>
        </trans-unit>
        <trans-unit id="a91e264474c4669549714595c47efcd4020fb867" translate="yes" xml:space="preserve">
          <source>Utility class to add return statements.</source>
          <target state="translated">实用类添加返回语句。</target>
        </trans-unit>
        <trans-unit id="ec5e3165f346f237a49411bbeb28d1ebabf80444" translate="yes" xml:space="preserve">
          <source>Utility class to call methods through reflection, and falls through using the &lt;code&gt;Invoker&lt;/code&gt; to call the method if it fails. The class is particularly useful for Groovy classes implementing &lt;code&gt;GroovyInterceptable&lt;/code&gt;, since it is not possible to call any method from this class, because it is intercepted by the &lt;code&gt;invokeMethod()&lt;/code&gt; method.</source>
          <target state="translated">实用程序类通过反射来调用方法，如果失败，则使用 &lt;code&gt;Invoker&lt;/code&gt; 调用该方法。该类对于实现 &lt;code&gt;GroovyInterceptable&lt;/code&gt; 的Groovy类特别有用，因为无法从此类调用任何方法，因为它被 &lt;code&gt;invokeMethod()&lt;/code&gt; 方法拦截。</target>
        </trans-unit>
        <trans-unit id="39c5853f6b3f39b44646d07e5f493b6c7a0ea241" translate="yes" xml:space="preserve">
          <source>Utility class to guess the encoding of a given text file.</source>
          <target state="translated">用于猜测给定文本文件编码的实用类。</target>
        </trans-unit>
        <trans-unit id="fd79c68ec1563fe831e10b080ebd3736614ea3de" translate="yes" xml:space="preserve">
          <source>Utility class used as delegate of closures representing JSON objects.</source>
          <target state="translated">作为表示JSON对象的闭包的代表的实用类。</target>
        </trans-unit>
        <trans-unit id="fc32073d56cfb59cb8d7527f0197c7c603db4501" translate="yes" xml:space="preserve">
          <source>Utility classes related to the Groovy Shell (aka.</source>
          <target state="translated">与Groovy Shell(又名:Groovy Shell)相关的实用类。</target>
        </trans-unit>
        <trans-unit id="f527255cf400ee6e3b67274759814551bf4593da" translate="yes" xml:space="preserve">
          <source>Utility method to check via reflection if the parsed class appears to be a JUnit5 test, i.e. checks whether it appears to be using the relevant annotations.</source>
          <target state="translated">通过反射检查解析的类是否是JUnit5测试的实用方法,即检查它是否使用了相关的注解。</target>
        </trans-unit>
        <trans-unit id="78ed81e57dbba8f82eb9b09aecda0a45640c7b63" translate="yes" xml:space="preserve">
          <source>Utility method to check via reflection if the parsed class appears to be a TestNG test, i.e. checks whether it appears to be using the relevant TestNG annotations.</source>
          <target state="translated">实用方法,通过反射检查解析后的类是否为TestNG测试,即检查它是否使用了相关的TestNG注解。</target>
        </trans-unit>
        <trans-unit id="a88be1ad8bbf17137108ec800e84acbdf58e7967" translate="yes" xml:space="preserve">
          <source>Utility method to run a JUnit 5 test.</source>
          <target state="translated">运行JUnit 5测试的实用方法。</target>
        </trans-unit>
        <trans-unit id="fd80e80a6d3b3d44ff57da33041471ebc81e0525" translate="yes" xml:space="preserve">
          <source>Utility method to run a TestNG test.</source>
          <target state="translated">运行TestNG测试的实用方法。</target>
        </trans-unit>
        <trans-unit id="951144c47ae96e9f3a82b4e0a11df3421c942fc1" translate="yes" xml:space="preserve">
          <source>Utility method to run a closure in EDT, using &lt;code&gt;SwingUtilities.invokeAndWait&lt;/code&gt;.</source>
          <target state="translated">使用 &lt;code&gt;SwingUtilities.invokeAndWait&lt;/code&gt; 在EDT中运行关闭的实用程序方法。</target>
        </trans-unit>
        <trans-unit id="82c789ce972b5fc8e855da4bfbcf70374ff7fcd9" translate="yes" xml:space="preserve">
          <source>Utility method to run a closure in EDT, using &lt;code&gt;SwingUtilities.invokeLater&lt;/code&gt;.</source>
          <target state="translated">使用 &lt;code&gt;SwingUtilities.invokeLater&lt;/code&gt; 在EDT中运行关闭的实用程序方法。</target>
        </trans-unit>
        <trans-unit id="f3df3f9973a1fb9377a19b49f8eb170407edae2e" translate="yes" xml:space="preserve">
          <source>Utility method to run a closure outside of the EDT.</source>
          <target state="translated">在EDT之外运行关闭的实用方法。</target>
        </trans-unit>
        <trans-unit id="0aa157934cbc105c91717df2fef4b12760d4ef67" translate="yes" xml:space="preserve">
          <source>Utility methods for working with Tokens.</source>
          <target state="translated">用于处理代币的实用方法。</target>
        </trans-unit>
        <trans-unit id="561a9b9bf97fe1548e3c976bb0447302bd324dfd" translate="yes" xml:space="preserve">
          <source>Utility methods to deal with generic types.</source>
          <target state="translated">处理通用类型的实用方法。</target>
        </trans-unit>
        <trans-unit id="dc31df86f496b9e72c613659c9af7a0bd3e15dec" translate="yes" xml:space="preserve">
          <source>VMPlugin</source>
          <target state="translated">VMPlugin</target>
        </trans-unit>
        <trans-unit id="8dce170de238b1feda2ecd9674ea3ca0d068fbcb" translate="yes" xml:space="preserve">
          <source>Value</source>
          <target state="translated">Value</target>
        </trans-unit>
        <trans-unit id="778d524d3ce39f4ec529de3a9711f14543d9506a" translate="yes" xml:space="preserve">
          <source>ValueMap</source>
          <target state="translated">ValueMap</target>
        </trans-unit>
        <trans-unit id="1d44e10c4aa2998a48b0f3042f59cc618df94af4" translate="yes" xml:space="preserve">
          <source>ValueModel</source>
          <target state="translated">ValueModel</target>
        </trans-unit>
        <trans-unit id="d4480a30f3d439a4b22940b2777869af8e2385fe" translate="yes" xml:space="preserve">
          <source>Varargs elements as arguments to the JSON builder create a root JSON array</source>
          <target state="translated">Varargs元素作为参数给JSON构建器创建一个根JSON数组。</target>
        </trans-unit>
        <trans-unit id="b6ccece2c5a4a2e000b148c7fb122e573a843085" translate="yes" xml:space="preserve">
          <source>Varargs elements as arguments to the YAML builder create a root YAML array</source>
          <target state="translated">Varargs元素作为参数给YAML构建器创建一个根YAML数组。</target>
        </trans-unit>
        <trans-unit id="19de69cb601f53a4ea7af22a65c71ae63251365c" translate="yes" xml:space="preserve">
          <source>Variable</source>
          <target state="translated">Variable</target>
        </trans-unit>
        <trans-unit id="2bc99defa0b62825ecf2aa232e2bb9ad8399bede" translate="yes" xml:space="preserve">
          <source>Variable annotation used for changing the base script class of the current script.</source>
          <target state="translated">变量注解,用于改变当前脚本的基础脚本类。</target>
        </trans-unit>
        <trans-unit id="fca1c7c85d1d7cf8bc8240bcf697138998705279" translate="yes" xml:space="preserve">
          <source>Variable annotation used for changing the scope of a variable within a script from being within the run method of the script to being at the class level for the script.</source>
          <target state="translated">变量注解用于改变脚本中变量的范围,从脚本的运行方法到脚本的类级。</target>
        </trans-unit>
        <trans-unit id="2817fc811de33fe259eb237e3b155f47d72b3ad8" translate="yes" xml:space="preserve">
          <source>Variable annotation used for getting the URI of the current script.</source>
          <target state="translated">用于获取当前脚本URI的变量注解。</target>
        </trans-unit>
        <trans-unit id="fb8af89841966f3b6aecf1d13aad9b9781e57ce6" translate="yes" xml:space="preserve">
          <source>Variable expressions - referencing constants</source>
          <target state="translated">变量表达式--引用常量</target>
        </trans-unit>
        <trans-unit id="22b363dacc0483ce3f4a79f71fcbb667ac7cc218" translate="yes" xml:space="preserve">
          <source>Various Groovy utilities for working with nodes, builders, logging, and other things.</source>
          <target state="translated">各种Groovy实用工具,用于处理节点、构建器、日志和其他事情。</target>
        </trans-unit>
        <trans-unit id="7b80a6ff5fadf3afbb63c8651e49dbd57b97243a" translate="yes" xml:space="preserve">
          <source>Verbosity for simple logging: QUIET, INFO, VERBOSE, DEBUG</source>
          <target state="translated">简单的日志记录的verbosity.QUIET,INFO,VERBOSE,DEBUG QUIET,INFO,VERBOSE,DEBUG。</target>
        </trans-unit>
        <trans-unit id="96ca9fefae52638a95720ef7c4267cfc30aea87c" translate="yes" xml:space="preserve">
          <source>Verifies the AST node and adds any default AST code before bytecode generation occurs.</source>
          <target state="translated">验证AST节点,并在字节码生成之前添加任何默认的AST代码。</target>
        </trans-unit>
        <trans-unit id="0569fb0265e986b76071225bfcc0e89fb7235e8c" translate="yes" xml:space="preserve">
          <source>Verify Class files. This task can take the following arguments:</source>
          <target state="translated">验证类文件。这个任务可以接受以下参数。</target>
        </trans-unit>
        <trans-unit id="04fe57cb36557b3055cca35d19b1fdda4f7fde4e" translate="yes" xml:space="preserve">
          <source>Verify correct usage of generics. This includes:</source>
          <target state="translated">核实通用名的正确用法。这包括:</target>
        </trans-unit>
        <trans-unit id="500599c29d5e9d1a7162a4a38e87d0a8116bcaf8" translate="yes" xml:space="preserve">
          <source>VetoableASTTransformation</source>
          <target state="translated">VetoableASTTransformation</target>
        </trans-unit>
        <trans-unit id="98fdb7698d228807d19f1147cc52f749593a4f89" translate="yes" xml:space="preserve">
          <source>Visibility.UNDEFINED</source>
          <target state="translated">Visibility.UNDEFINED</target>
        </trans-unit>
        <trans-unit id="50f13a67506dab51a7403cf165f189c048223df8" translate="yes" xml:space="preserve">
          <source>VisibilityOptions</source>
          <target state="translated">VisibilityOptions</target>
        </trans-unit>
        <trans-unit id="fee63137c7d60a93f6c66fe09529472dbaeea754" translate="yes" xml:space="preserve">
          <source>Visit a ClassNode.</source>
          <target state="translated">访问一个ClassNode。</target>
        </trans-unit>
        <trans-unit id="fbb560e8a0ebf70449ea859af860e92068a041ce" translate="yes" xml:space="preserve">
          <source>Visit a ConstructorNode.</source>
          <target state="translated">访问一个ConstructorNode。</target>
        </trans-unit>
        <trans-unit id="240e2795421a4d91dc82b8e50d97854aaa702f5a" translate="yes" xml:space="preserve">
          <source>Visit a FieldNode.</source>
          <target state="translated">访问一个FieldNode。</target>
        </trans-unit>
        <trans-unit id="ee4650a8a14a114e2e3ac785258fb95009b71e80" translate="yes" xml:space="preserve">
          <source>Visit a MethodNode.</source>
          <target state="translated">访问一个MethodNode。</target>
        </trans-unit>
        <trans-unit id="c8a8061983ebe9e3af13becc5e79ef812c6c0fb5" translate="yes" xml:space="preserve">
          <source>Visit a PropertyNode.</source>
          <target state="translated">访问一个PropertyNode。</target>
        </trans-unit>
        <trans-unit id="ad3de049e4aa04111b81ac823cb35f46bc12c174" translate="yes" xml:space="preserve">
          <source>Visit a parse tree produced by &lt;a href=&quot;groovyparser#annotatedQualifiedClassName&quot;&gt;GroovyParser.annotatedQualifiedClassName&lt;/a&gt;.</source>
          <target state="translated">访问由&lt;a href=&quot;groovyparser#annotatedQualifiedClassName&quot;&gt;GroovyParser.annotatedQualifiedClassName&lt;/a&gt;生成的解析树。</target>
        </trans-unit>
        <trans-unit id="a6a583555fc12a78b9978a3d1383849489a6d2da" translate="yes" xml:space="preserve">
          <source>Visit a parse tree produced by &lt;a href=&quot;groovyparser#annotation&quot;&gt;GroovyParser.annotation&lt;/a&gt;.</source>
          <target state="translated">访问由&lt;a href=&quot;groovyparser#annotation&quot;&gt;GroovyParser.annotation&lt;/a&gt;生成的解析树。</target>
        </trans-unit>
        <trans-unit id="a20b83117bbb403a8b6eb903e52fdcdcbf12808c" translate="yes" xml:space="preserve">
          <source>Visit a parse tree produced by &lt;a href=&quot;groovyparser#annotationName&quot;&gt;GroovyParser.annotationName&lt;/a&gt;.</source>
          <target state="translated">访问由&lt;a href=&quot;groovyparser#annotationName&quot;&gt;GroovyParser.annotationName&lt;/a&gt;生成的解析树。</target>
        </trans-unit>
        <trans-unit id="855a5cb7e59d5fc505b5f99465ed6df4c2e34be4" translate="yes" xml:space="preserve">
          <source>Visit a parse tree produced by &lt;a href=&quot;groovyparser#annotationsOpt&quot;&gt;GroovyParser.annotationsOpt&lt;/a&gt;.</source>
          <target state="translated">访问由&lt;a href=&quot;groovyparser#annotationsOpt&quot;&gt;GroovyParser.annotationsOpt&lt;/a&gt;生成的解析树。</target>
        </trans-unit>
        <trans-unit id="256d1a59c7a06f7add80da4c7dfbd39578c2a39c" translate="yes" xml:space="preserve">
          <source>Visit a parse tree produced by &lt;a href=&quot;groovyparser#anonymousInnerClassDeclaration&quot;&gt;GroovyParser.anonymousInnerClassDeclaration&lt;/a&gt;.</source>
          <target state="translated">访问由&lt;a href=&quot;groovyparser#anonymousInnerClassDeclaration&quot;&gt;GroovyParser.anonymousInnerClassDeclaration&lt;/a&gt;生成的解析树。</target>
        </trans-unit>
        <trans-unit id="f3ff954f322fe2162cba565286c6bafcd566087f" translate="yes" xml:space="preserve">
          <source>Visit a parse tree produced by &lt;a href=&quot;groovyparser#arguments&quot;&gt;GroovyParser.arguments&lt;/a&gt;.</source>
          <target state="translated">访问由&lt;a href=&quot;groovyparser#arguments&quot;&gt;GroovyParser.arguments&lt;/a&gt;生成的解析树。</target>
        </trans-unit>
        <trans-unit id="f5a0207626fe1e53808fd70ee3a5eda99175fc14" translate="yes" xml:space="preserve">
          <source>Visit a parse tree produced by &lt;a href=&quot;groovyparser#arrayInitializer&quot;&gt;GroovyParser.arrayInitializer&lt;/a&gt;.</source>
          <target state="translated">访问由&lt;a href=&quot;groovyparser#arrayInitializer&quot;&gt;GroovyParser.arrayInitializer&lt;/a&gt;生成的解析树。</target>
        </trans-unit>
        <trans-unit id="8f64afec04b9346a78ef3d6b8a7b1cd815133d0d" translate="yes" xml:space="preserve">
          <source>Visit a parse tree produced by &lt;a href=&quot;groovyparser#assertStatement&quot;&gt;GroovyParser.assertStatement&lt;/a&gt;.</source>
          <target state="translated">访问由&lt;a href=&quot;groovyparser#assertStatement&quot;&gt;GroovyParser.assertStatement&lt;/a&gt;生成的解析树。</target>
        </trans-unit>
        <trans-unit id="93e3474bdd111e2f7aec99bdf99eaf44e0c1759d" translate="yes" xml:space="preserve">
          <source>Visit a parse tree produced by &lt;a href=&quot;groovyparser#block&quot;&gt;GroovyParser.block&lt;/a&gt;.</source>
          <target state="translated">访问由&lt;a href=&quot;groovyparser#block&quot;&gt;GroovyParser.block&lt;/a&gt;生成的解析树。</target>
        </trans-unit>
        <trans-unit id="39388f9cc250cc263189a6791695d7544c8b373c" translate="yes" xml:space="preserve">
          <source>Visit a parse tree produced by &lt;a href=&quot;groovyparser#blockStatement&quot;&gt;GroovyParser.blockStatement&lt;/a&gt;.</source>
          <target state="translated">访问由&lt;a href=&quot;groovyparser#blockStatement&quot;&gt;GroovyParser.blockStatement&lt;/a&gt;生成的解析树。</target>
        </trans-unit>
        <trans-unit id="e5879b3d82bf6b3fd4c4a38f01332e405830e57b" translate="yes" xml:space="preserve">
          <source>Visit a parse tree produced by &lt;a href=&quot;groovyparser#blockStatements&quot;&gt;GroovyParser.blockStatements&lt;/a&gt;.</source>
          <target state="translated">访问由&lt;a href=&quot;groovyparser#blockStatements&quot;&gt;GroovyParser.blockStatements&lt;/a&gt;生成的解析树。</target>
        </trans-unit>
        <trans-unit id="fa124d2f7ccca44c12871b39ac41e28419f33d3b" translate="yes" xml:space="preserve">
          <source>Visit a parse tree produced by &lt;a href=&quot;groovyparser#blockStatementsOpt&quot;&gt;GroovyParser.blockStatementsOpt&lt;/a&gt;.</source>
          <target state="translated">访问由&lt;a href=&quot;groovyparser#blockStatementsOpt&quot;&gt;GroovyParser.blockStatementsOpt&lt;/a&gt;产生的解析树。</target>
        </trans-unit>
        <trans-unit id="aff832b0679b3e26e0d19ff0516ad281e29226bc" translate="yes" xml:space="preserve">
          <source>Visit a parse tree produced by &lt;a href=&quot;groovyparser#breakStatement&quot;&gt;GroovyParser.breakStatement&lt;/a&gt;.</source>
          <target state="translated">访问由&lt;a href=&quot;groovyparser#breakStatement&quot;&gt;GroovyParser.breakStatement&lt;/a&gt;生成的解析树。</target>
        </trans-unit>
        <trans-unit id="dbf8f67eaaeb3e7135da3fa4f6251ba2780da108" translate="yes" xml:space="preserve">
          <source>Visit a parse tree produced by &lt;a href=&quot;groovyparser#builtInType&quot;&gt;GroovyParser.builtInType&lt;/a&gt;.</source>
          <target state="translated">访问由&lt;a href=&quot;groovyparser#builtInType&quot;&gt;GroovyParser.builtInType&lt;/a&gt;生成的解析树。</target>
        </trans-unit>
        <trans-unit id="ed1754413357d7b1c7585ec7d1886772a6cd8bd9" translate="yes" xml:space="preserve">
          <source>Visit a parse tree produced by &lt;a href=&quot;groovyparser#castParExpression&quot;&gt;GroovyParser.castParExpression&lt;/a&gt;.</source>
          <target state="translated">访问&lt;a href=&quot;groovyparser#castParExpression&quot;&gt;GroovyParser.castParExpression&lt;/a&gt;产生的解析树。</target>
        </trans-unit>
        <trans-unit id="4d4d2427123a6434d5fab2c36eddafd7dcbc2371" translate="yes" xml:space="preserve">
          <source>Visit a parse tree produced by &lt;a href=&quot;groovyparser#catchClause&quot;&gt;GroovyParser.catchClause&lt;/a&gt;.</source>
          <target state="translated">访问&lt;a href=&quot;groovyparser#catchClause&quot;&gt;GroovyParser.catchClause&lt;/a&gt;产生的解析树。</target>
        </trans-unit>
        <trans-unit id="62d08eccd3db111fc5ced4b8b679c8dc8863dcc5" translate="yes" xml:space="preserve">
          <source>Visit a parse tree produced by &lt;a href=&quot;groovyparser#catchType&quot;&gt;GroovyParser.catchType&lt;/a&gt;.</source>
          <target state="translated">访问由&lt;a href=&quot;groovyparser#catchType&quot;&gt;GroovyParser.catchType&lt;/a&gt;生成的解析树。</target>
        </trans-unit>
        <trans-unit id="c0e05a82a9f7c2e2ec5110d640e57873d5b126bc" translate="yes" xml:space="preserve">
          <source>Visit a parse tree produced by &lt;a href=&quot;groovyparser#classBody&quot;&gt;GroovyParser.classBody&lt;/a&gt;.</source>
          <target state="translated">访问由&lt;a href=&quot;groovyparser#classBody&quot;&gt;GroovyParser.classBody&lt;/a&gt;生成的解析树。</target>
        </trans-unit>
        <trans-unit id="96fda8d072563ab608882c696895a19abc32f678" translate="yes" xml:space="preserve">
          <source>Visit a parse tree produced by &lt;a href=&quot;groovyparser#classBodyDeclaration&quot;&gt;GroovyParser.classBodyDeclaration&lt;/a&gt;.</source>
          <target state="translated">访问由&lt;a href=&quot;groovyparser#classBodyDeclaration&quot;&gt;GroovyParser.classBodyDeclaration&lt;/a&gt;生成的解析树。</target>
        </trans-unit>
        <trans-unit id="4005b4829662ea9f7a19daf6bcdda14a627c7db6" translate="yes" xml:space="preserve">
          <source>Visit a parse tree produced by &lt;a href=&quot;groovyparser#classDeclaration&quot;&gt;GroovyParser.classDeclaration&lt;/a&gt;.</source>
          <target state="translated">访问由&lt;a href=&quot;groovyparser#classDeclaration&quot;&gt;GroovyParser.classDeclaration&lt;/a&gt;生成的解析树。</target>
        </trans-unit>
        <trans-unit id="0135b837b9c4ac11ea1aa6dc0fac33e176b07f6b" translate="yes" xml:space="preserve">
          <source>Visit a parse tree produced by &lt;a href=&quot;groovyparser#className&quot;&gt;GroovyParser.className&lt;/a&gt;.</source>
          <target state="translated">访问由&lt;a href=&quot;groovyparser#className&quot;&gt;GroovyParser.className&lt;/a&gt;生成的解析树。</target>
        </trans-unit>
        <trans-unit id="f6a35c629794dfacea533f604f41bc384cd8ab1a" translate="yes" xml:space="preserve">
          <source>Visit a parse tree produced by &lt;a href=&quot;groovyparser#classOrInterfaceModifier&quot;&gt;GroovyParser.classOrInterfaceModifier&lt;/a&gt;.</source>
          <target state="translated">访问由&lt;a href=&quot;groovyparser#classOrInterfaceModifier&quot;&gt;GroovyParser.classOrInterfaceModifier&lt;/a&gt;生成的解析树。</target>
        </trans-unit>
        <trans-unit id="789009af1cbe13ef18c174014a97f17d2e8d3442" translate="yes" xml:space="preserve">
          <source>Visit a parse tree produced by &lt;a href=&quot;groovyparser#classOrInterfaceModifiers&quot;&gt;GroovyParser.classOrInterfaceModifiers&lt;/a&gt;.</source>
          <target state="translated">访问由&lt;a href=&quot;groovyparser#classOrInterfaceModifiers&quot;&gt;GroovyParser.classOrInterfaceModifiers&lt;/a&gt;生成的解析树。</target>
        </trans-unit>
        <trans-unit id="6edc08460e33e4df3f241ed04bdd680a7bd45b02" translate="yes" xml:space="preserve">
          <source>Visit a parse tree produced by &lt;a href=&quot;groovyparser#classOrInterfaceModifiersOpt&quot;&gt;GroovyParser.classOrInterfaceModifiersOpt&lt;/a&gt;.</source>
          <target state="translated">访问由&lt;a href=&quot;groovyparser#classOrInterfaceModifiersOpt&quot;&gt;GroovyParser.classOrInterfaceModifiersOpt&lt;/a&gt;产生的解析树。</target>
        </trans-unit>
        <trans-unit id="df9ad7a16a1f780426d75dd4ed7b2a89193827f9" translate="yes" xml:space="preserve">
          <source>Visit a parse tree produced by &lt;a href=&quot;groovyparser#classOrInterfaceType&quot;&gt;GroovyParser.classOrInterfaceType&lt;/a&gt;.</source>
          <target state="translated">访问由&lt;a href=&quot;groovyparser#classOrInterfaceType&quot;&gt;GroovyParser.classOrInterfaceType&lt;/a&gt;生成的解析树。</target>
        </trans-unit>
        <trans-unit id="4dca84e29544bb2b89868fec86745065ea73050a" translate="yes" xml:space="preserve">
          <source>Visit a parse tree produced by &lt;a href=&quot;groovyparser#classicalForControl&quot;&gt;GroovyParser.classicalForControl&lt;/a&gt;.</source>
          <target state="translated">访问由&lt;a href=&quot;groovyparser#classicalForControl&quot;&gt;GroovyParser.classicalForControl&lt;/a&gt;产生的解析树。</target>
        </trans-unit>
        <trans-unit id="7877ad22118c398bf6d63bfc30e6a1e88a2848b4" translate="yes" xml:space="preserve">
          <source>Visit a parse tree produced by &lt;a href=&quot;groovyparser#closure&quot;&gt;GroovyParser.closure&lt;/a&gt;.</source>
          <target state="translated">访问由&lt;a href=&quot;groovyparser#closure&quot;&gt;GroovyParser.closure&lt;/a&gt;生成的解析树。</target>
        </trans-unit>
        <trans-unit id="822da5e1effc17067925ae34734f18d42dcc604d" translate="yes" xml:space="preserve">
          <source>Visit a parse tree produced by &lt;a href=&quot;groovyparser#closureOrLambdaExpression&quot;&gt;GroovyParser.closureOrLambdaExpression&lt;/a&gt;.</source>
          <target state="translated">访问由&lt;a href=&quot;groovyparser#closureOrLambdaExpression&quot;&gt;GroovyParser.closureOrLambdaExpression&lt;/a&gt;生成的解析树。</target>
        </trans-unit>
        <trans-unit id="ab9b005a11c79ee1aa3d3b1e44fb4ca4af9cc76b" translate="yes" xml:space="preserve">
          <source>Visit a parse tree produced by &lt;a href=&quot;groovyparser#commandArgument&quot;&gt;GroovyParser.commandArgument&lt;/a&gt;.</source>
          <target state="translated">访问由&lt;a href=&quot;groovyparser#commandArgument&quot;&gt;GroovyParser.commandArgument&lt;/a&gt;生成的解析树。</target>
        </trans-unit>
        <trans-unit id="720272499decbb1e6c2004aca33158221815cd21" translate="yes" xml:space="preserve">
          <source>Visit a parse tree produced by &lt;a href=&quot;groovyparser#commandExpression&quot;&gt;GroovyParser.commandExpression&lt;/a&gt;.</source>
          <target state="translated">访问由&lt;a href=&quot;groovyparser#commandExpression&quot;&gt;GroovyParser.commandExpression&lt;/a&gt;生成的解析树。</target>
        </trans-unit>
        <trans-unit id="ef12b4c89df6b1bf78a26a9f4aecdd84d25a35ad" translate="yes" xml:space="preserve">
          <source>Visit a parse tree produced by &lt;a href=&quot;groovyparser#compilationUnit&quot;&gt;GroovyParser.compilationUnit&lt;/a&gt;.</source>
          <target state="translated">访问&lt;a href=&quot;groovyparser#compilationUnit&quot;&gt;GroovyParser.compilationUnit&lt;/a&gt;产生的解析树。</target>
        </trans-unit>
        <trans-unit id="c79ea91063be708bccfc6db3a2b9537ea1260d8a" translate="yes" xml:space="preserve">
          <source>Visit a parse tree produced by &lt;a href=&quot;groovyparser#conditionalStatement&quot;&gt;GroovyParser.conditionalStatement&lt;/a&gt;.</source>
          <target state="translated">访问由&lt;a href=&quot;groovyparser#conditionalStatement&quot;&gt;GroovyParser.conditionalStatement&lt;/a&gt;生成的解析树。</target>
        </trans-unit>
        <trans-unit id="7b1d8e980ee52347210c8177693c3c9398a8a83d" translate="yes" xml:space="preserve">
          <source>Visit a parse tree produced by &lt;a href=&quot;groovyparser#continueStatement&quot;&gt;GroovyParser.continueStatement&lt;/a&gt;.</source>
          <target state="translated">访问由&lt;a href=&quot;groovyparser#continueStatement&quot;&gt;GroovyParser.continueStatement&lt;/a&gt;生成的解析树。</target>
        </trans-unit>
        <trans-unit id="60c5a8f96c2a3a431642281003e4b99daf7ca8f3" translate="yes" xml:space="preserve">
          <source>Visit a parse tree produced by &lt;a href=&quot;groovyparser#createdName&quot;&gt;GroovyParser.createdName&lt;/a&gt;.</source>
          <target state="translated">访问由&lt;a href=&quot;groovyparser#createdName&quot;&gt;GroovyParser.createdName&lt;/a&gt;生成的解析树。</target>
        </trans-unit>
        <trans-unit id="ae351c5342b627564ed032ef5e47a7136165c7ea" translate="yes" xml:space="preserve">
          <source>Visit a parse tree produced by &lt;a href=&quot;groovyparser#creator&quot;&gt;GroovyParser.creator&lt;/a&gt;.</source>
          <target state="translated">访问&lt;a href=&quot;groovyparser#creator&quot;&gt;GroovyParser.creator&lt;/a&gt;产生的解析树。</target>
        </trans-unit>
        <trans-unit id="cbae5448199797519cc353fec6e64f05b39b0479" translate="yes" xml:space="preserve">
          <source>Visit a parse tree produced by &lt;a href=&quot;groovyparser#dim&quot;&gt;GroovyParser.dim&lt;/a&gt;.</source>
          <target state="translated">访问由&lt;a href=&quot;groovyparser#dim&quot;&gt;GroovyParser.dim&lt;/a&gt;生成的解析树。</target>
        </trans-unit>
        <trans-unit id="12b42604af65ecd1c25b5cc0a9d7cc3f78eec8a2" translate="yes" xml:space="preserve">
          <source>Visit a parse tree produced by &lt;a href=&quot;groovyparser#dynamicMemberName&quot;&gt;GroovyParser.dynamicMemberName&lt;/a&gt;.</source>
          <target state="translated">访问由&lt;a href=&quot;groovyparser#dynamicMemberName&quot;&gt;GroovyParser.dynamicMemberName&lt;/a&gt;生成的解析树。</target>
        </trans-unit>
        <trans-unit id="1777cb6e9cfe10042fc7e4336a90fbe2db9f279a" translate="yes" xml:space="preserve">
          <source>Visit a parse tree produced by &lt;a href=&quot;groovyparser#elementValue&quot;&gt;GroovyParser.elementValue&lt;/a&gt;.</source>
          <target state="translated">访问由&lt;a href=&quot;groovyparser#elementValue&quot;&gt;GroovyParser.elementValue&lt;/a&gt;生成的解析树。</target>
        </trans-unit>
        <trans-unit id="ce43be2b71beca49f4b82ada6041406828adcb45" translate="yes" xml:space="preserve">
          <source>Visit a parse tree produced by &lt;a href=&quot;groovyparser#elementValueArrayInitializer&quot;&gt;GroovyParser.elementValueArrayInitializer&lt;/a&gt;.</source>
          <target state="translated">访问由&lt;a href=&quot;groovyparser#elementValueArrayInitializer&quot;&gt;GroovyParser.elementValueArrayInitializer&lt;/a&gt;生成的解析树。</target>
        </trans-unit>
        <trans-unit id="a482fddcb0fa95e779304046d8b97db822856a25" translate="yes" xml:space="preserve">
          <source>Visit a parse tree produced by &lt;a href=&quot;groovyparser#elementValuePair&quot;&gt;GroovyParser.elementValuePair&lt;/a&gt;.</source>
          <target state="translated">访问由&lt;a href=&quot;groovyparser#elementValuePair&quot;&gt;GroovyParser.elementValuePair&lt;/a&gt;生成的解析树。</target>
        </trans-unit>
        <trans-unit id="6c9778b9c452190eb6fc0cd4f8e591d4b6f7cc01" translate="yes" xml:space="preserve">
          <source>Visit a parse tree produced by &lt;a href=&quot;groovyparser#elementValuePairName&quot;&gt;GroovyParser.elementValuePairName&lt;/a&gt;.</source>
          <target state="translated">访问由&lt;a href=&quot;groovyparser#elementValuePairName&quot;&gt;GroovyParser.elementValuePairName&lt;/a&gt;生成的解析树。</target>
        </trans-unit>
        <trans-unit id="548f4762d94775e3de125b3bd5cddc68303c070f" translate="yes" xml:space="preserve">
          <source>Visit a parse tree produced by &lt;a href=&quot;groovyparser#elementValuePairs&quot;&gt;GroovyParser.elementValuePairs&lt;/a&gt;.</source>
          <target state="translated">访问由&lt;a href=&quot;groovyparser#elementValuePairs&quot;&gt;GroovyParser.elementValuePairs&lt;/a&gt;生成的解析树。</target>
        </trans-unit>
        <trans-unit id="a0dde52702fa5108bf51094b2c404eb14e8232f3" translate="yes" xml:space="preserve">
          <source>Visit a parse tree produced by &lt;a href=&quot;groovyparser#elementValues&quot;&gt;GroovyParser.elementValues&lt;/a&gt;.</source>
          <target state="translated">访问由&lt;a href=&quot;groovyparser#elementValues&quot;&gt;GroovyParser.elementValues&lt;/a&gt;生成的解析树。</target>
        </trans-unit>
        <trans-unit id="41c712e1970050cf4176d2721246f14f1926e549" translate="yes" xml:space="preserve">
          <source>Visit a parse tree produced by &lt;a href=&quot;groovyparser#emptyDims&quot;&gt;GroovyParser.emptyDims&lt;/a&gt;.</source>
          <target state="translated">访问由&lt;a href=&quot;groovyparser#emptyDims&quot;&gt;GroovyParser.emptyDims&lt;/a&gt;生成的解析树。</target>
        </trans-unit>
        <trans-unit id="2ff1332496e846541d20c4626c0e4b5ec7335112" translate="yes" xml:space="preserve">
          <source>Visit a parse tree produced by &lt;a href=&quot;groovyparser#emptyDimsOpt&quot;&gt;GroovyParser.emptyDimsOpt&lt;/a&gt;.</source>
          <target state="translated">访问由&lt;a href=&quot;groovyparser#emptyDimsOpt&quot;&gt;GroovyParser.emptyDimsOpt&lt;/a&gt;生成的解析树。</target>
        </trans-unit>
        <trans-unit id="e8c421bf5fa0ed4186dca35395107c343c113bf0" translate="yes" xml:space="preserve">
          <source>Visit a parse tree produced by &lt;a href=&quot;groovyparser#enhancedArgumentListElement&quot;&gt;GroovyParser.enhancedArgumentListElement&lt;/a&gt;.</source>
          <target state="translated">访问由&lt;a href=&quot;groovyparser#enhancedArgumentListElement&quot;&gt;GroovyParser.enhancedArgumentListElement&lt;/a&gt;产生的解析树。</target>
        </trans-unit>
        <trans-unit id="af12fe5b3ca7e224dbd0a9c1f7156e21b9b53400" translate="yes" xml:space="preserve">
          <source>Visit a parse tree produced by &lt;a href=&quot;groovyparser#enhancedArgumentListInPar&quot;&gt;GroovyParser.enhancedArgumentListInPar&lt;/a&gt;.</source>
          <target state="translated">访问&lt;a href=&quot;groovyparser#enhancedArgumentListInPar&quot;&gt;GroovyParser.enhancedArgumentListInPar&lt;/a&gt;产生的解析树。</target>
        </trans-unit>
        <trans-unit id="d657b9900658e5cfc56710660aaf82d3ad03a5fa" translate="yes" xml:space="preserve">
          <source>Visit a parse tree produced by &lt;a href=&quot;groovyparser#enhancedForControl&quot;&gt;GroovyParser.enhancedForControl&lt;/a&gt;.</source>
          <target state="translated">访问由&lt;a href=&quot;groovyparser#enhancedForControl&quot;&gt;GroovyParser.enhancedForControl&lt;/a&gt;产生的解析树。</target>
        </trans-unit>
        <trans-unit id="73172f04b26e403e4d68760c915a166948b570cb" translate="yes" xml:space="preserve">
          <source>Visit a parse tree produced by &lt;a href=&quot;groovyparser#enhancedStatementExpression&quot;&gt;GroovyParser.enhancedStatementExpression&lt;/a&gt;.</source>
          <target state="translated">访问由&lt;a href=&quot;groovyparser#enhancedStatementExpression&quot;&gt;GroovyParser.enhancedStatementExpression&lt;/a&gt;生成的解析树。</target>
        </trans-unit>
        <trans-unit id="8da2f54fff261c5412efa3187b9379e7dad7ab46" translate="yes" xml:space="preserve">
          <source>Visit a parse tree produced by &lt;a href=&quot;groovyparser#enumConstant&quot;&gt;GroovyParser.enumConstant&lt;/a&gt;.</source>
          <target state="translated">访问由&lt;a href=&quot;groovyparser#enumConstant&quot;&gt;GroovyParser.enumConstant&lt;/a&gt;生成的解析树。</target>
        </trans-unit>
        <trans-unit id="7ade29e52afc64c36d3ee0a28459a82bb5cc1658" translate="yes" xml:space="preserve">
          <source>Visit a parse tree produced by &lt;a href=&quot;groovyparser#enumConstants&quot;&gt;GroovyParser.enumConstants&lt;/a&gt;.</source>
          <target state="translated">访问由&lt;a href=&quot;groovyparser#enumConstants&quot;&gt;GroovyParser.enumConstants&lt;/a&gt;生成的解析树。</target>
        </trans-unit>
        <trans-unit id="6eb3744ef4210a081d702e66972ab919ee697198" translate="yes" xml:space="preserve">
          <source>Visit a parse tree produced by &lt;a href=&quot;groovyparser#expression&quot;&gt;GroovyParser.expression&lt;/a&gt;.</source>
          <target state="translated">访问由&lt;a href=&quot;groovyparser#expression&quot;&gt;GroovyParser.expression&lt;/a&gt;生成的解析树。</target>
        </trans-unit>
        <trans-unit id="7a15d3af80d8106c5d3cd248f774fd4482c93f23" translate="yes" xml:space="preserve">
          <source>Visit a parse tree produced by &lt;a href=&quot;groovyparser#expressionInPar&quot;&gt;GroovyParser.expressionInPar&lt;/a&gt;.</source>
          <target state="translated">访问由&lt;a href=&quot;groovyparser#expressionInPar&quot;&gt;GroovyParser.expressionInPar&lt;/a&gt;生成的解析树。</target>
        </trans-unit>
        <trans-unit id="28963cfabe65b85da6a6f4dd7003e4a4230d6ad6" translate="yes" xml:space="preserve">
          <source>Visit a parse tree produced by &lt;a href=&quot;groovyparser#expressionList&quot;&gt;GroovyParser.expressionList&lt;/a&gt;.</source>
          <target state="translated">访问由&lt;a href=&quot;groovyparser#expressionList&quot;&gt;GroovyParser.expressionList&lt;/a&gt;生成的解析树。</target>
        </trans-unit>
        <trans-unit id="57512817467c1ac7d36e628d3f9b15652bc99238" translate="yes" xml:space="preserve">
          <source>Visit a parse tree produced by &lt;a href=&quot;groovyparser#expressionListElement&quot;&gt;GroovyParser.expressionListElement&lt;/a&gt;.</source>
          <target state="translated">访问由&lt;a href=&quot;groovyparser#expressionListElement&quot;&gt;GroovyParser.expressionListElement&lt;/a&gt;生成的解析树。</target>
        </trans-unit>
        <trans-unit id="e4c3df71a8f9546d843eb1e93d89d224d142a9cb" translate="yes" xml:space="preserve">
          <source>Visit a parse tree produced by &lt;a href=&quot;groovyparser#fieldDeclaration&quot;&gt;GroovyParser.fieldDeclaration&lt;/a&gt;.</source>
          <target state="translated">访问由&lt;a href=&quot;groovyparser#fieldDeclaration&quot;&gt;GroovyParser.fieldDeclaration&lt;/a&gt;生成的解析树。</target>
        </trans-unit>
        <trans-unit id="32e0c483c1debe2eb18ed319cb6f23c653dff534" translate="yes" xml:space="preserve">
          <source>Visit a parse tree produced by &lt;a href=&quot;groovyparser#finallyBlock&quot;&gt;GroovyParser.finallyBlock&lt;/a&gt;.</source>
          <target state="translated">访问&lt;a href=&quot;groovyparser#finallyBlock&quot;&gt;GroovyParser.finallyBlock&lt;/a&gt;产生的解析树。</target>
        </trans-unit>
        <trans-unit id="a8127c3f59f7a63722a314b751d7ebbfc45bb1a5" translate="yes" xml:space="preserve">
          <source>Visit a parse tree produced by &lt;a href=&quot;groovyparser#forControl&quot;&gt;GroovyParser.forControl&lt;/a&gt;.</source>
          <target state="translated">访问由&lt;a href=&quot;groovyparser#forControl&quot;&gt;GroovyParser.forControl&lt;/a&gt;生成的解析树。</target>
        </trans-unit>
        <trans-unit id="d5066f874a5d454a1c6a88e18cee91366dff4aef" translate="yes" xml:space="preserve">
          <source>Visit a parse tree produced by &lt;a href=&quot;groovyparser#forInit&quot;&gt;GroovyParser.forInit&lt;/a&gt;.</source>
          <target state="translated">访问由&lt;a href=&quot;groovyparser#forInit&quot;&gt;GroovyParser.forInit&lt;/a&gt;生成的解析树。</target>
        </trans-unit>
        <trans-unit id="7efd8943280f1c7393feea23077917aeb69c9b3f" translate="yes" xml:space="preserve">
          <source>Visit a parse tree produced by &lt;a href=&quot;groovyparser#forUpdate&quot;&gt;GroovyParser.forUpdate&lt;/a&gt;.</source>
          <target state="translated">访问由&lt;a href=&quot;groovyparser#forUpdate&quot;&gt;GroovyParser.forUpdate&lt;/a&gt;生成的解析树。</target>
        </trans-unit>
        <trans-unit id="ce44bbd657edbe83fb0e4e8a63496d84e7cdec20" translate="yes" xml:space="preserve">
          <source>Visit a parse tree produced by &lt;a href=&quot;groovyparser#formalParameter&quot;&gt;GroovyParser.formalParameter&lt;/a&gt;.</source>
          <target state="translated">访问由&lt;a href=&quot;groovyparser#formalParameter&quot;&gt;GroovyParser.formalParameter&lt;/a&gt;生成的解析树。</target>
        </trans-unit>
        <trans-unit id="eecd7253f0af12731c7b09a9394fec13bf59b5dd" translate="yes" xml:space="preserve">
          <source>Visit a parse tree produced by &lt;a href=&quot;groovyparser#formalParameterList&quot;&gt;GroovyParser.formalParameterList&lt;/a&gt;.</source>
          <target state="translated">访问由&lt;a href=&quot;groovyparser#formalParameterList&quot;&gt;GroovyParser.formalParameterList&lt;/a&gt;生成的解析树。</target>
        </trans-unit>
        <trans-unit id="c317c1ee6ee23015b788294df01fa4d3137863f7" translate="yes" xml:space="preserve">
          <source>Visit a parse tree produced by &lt;a href=&quot;groovyparser#formalParameters&quot;&gt;GroovyParser.formalParameters&lt;/a&gt;.</source>
          <target state="translated">访问由&lt;a href=&quot;groovyparser#formalParameters&quot;&gt;GroovyParser.formalParameters&lt;/a&gt;生成的解析树。</target>
        </trans-unit>
        <trans-unit id="720a04bdb9a49108bdc4ec5c3f9fac0901c7e823" translate="yes" xml:space="preserve">
          <source>Visit a parse tree produced by &lt;a href=&quot;groovyparser#gstring&quot;&gt;GroovyParser.gstring&lt;/a&gt;.</source>
          <target state="translated">访问由&lt;a href=&quot;groovyparser#gstring&quot;&gt;GroovyParser.gstring&lt;/a&gt;生成的解析树。</target>
        </trans-unit>
        <trans-unit id="df33d62dc08e48c2b80012baac720c3d7ba7408e" translate="yes" xml:space="preserve">
          <source>Visit a parse tree produced by &lt;a href=&quot;groovyparser#gstringPath&quot;&gt;GroovyParser.gstringPath&lt;/a&gt;.</source>
          <target state="translated">访问&lt;a href=&quot;groovyparser#gstringPath&quot;&gt;GroovyParser.gstringPath&lt;/a&gt;产生的解析树。</target>
        </trans-unit>
        <trans-unit id="1b18ccfa631a048e141f6ff7a7961bcbbad4dc44" translate="yes" xml:space="preserve">
          <source>Visit a parse tree produced by &lt;a href=&quot;groovyparser#gstringValue&quot;&gt;GroovyParser.gstringValue&lt;/a&gt;.</source>
          <target state="translated">访问由&lt;a href=&quot;groovyparser#gstringValue&quot;&gt;GroovyParser.gstringValue&lt;/a&gt;生成的解析树。</target>
        </trans-unit>
        <trans-unit id="657a31cc0621845e985f6cbb88b4bce029f7ef89" translate="yes" xml:space="preserve">
          <source>Visit a parse tree produced by &lt;a href=&quot;groovyparser#identifier&quot;&gt;GroovyParser.identifier&lt;/a&gt;.</source>
          <target state="translated">访问由&lt;a href=&quot;groovyparser#identifier&quot;&gt;GroovyParser.identifier&lt;/a&gt;生成的解析树。</target>
        </trans-unit>
        <trans-unit id="009341699991e45729dfa2d0ae3d34da4b7bcccf" translate="yes" xml:space="preserve">
          <source>Visit a parse tree produced by &lt;a href=&quot;groovyparser#ifElseStatement&quot;&gt;GroovyParser.ifElseStatement&lt;/a&gt;.</source>
          <target state="translated">访问由&lt;a href=&quot;groovyparser#ifElseStatement&quot;&gt;GroovyParser.ifElseStatement&lt;/a&gt;生成的解析树。</target>
        </trans-unit>
        <trans-unit id="cf332f550212f6655164890a4dc8f80ef8fa6935" translate="yes" xml:space="preserve">
          <source>Visit a parse tree produced by &lt;a href=&quot;groovyparser#importDeclaration&quot;&gt;GroovyParser.importDeclaration&lt;/a&gt;.</source>
          <target state="translated">访问由&lt;a href=&quot;groovyparser#importDeclaration&quot;&gt;GroovyParser.importDeclaration&lt;/a&gt;生成的解析树。</target>
        </trans-unit>
        <trans-unit id="1a4dd04c5c43d5b51b62585c98d6b7c10eb2f4a9" translate="yes" xml:space="preserve">
          <source>Visit a parse tree produced by &lt;a href=&quot;groovyparser#indexPropertyArgs&quot;&gt;GroovyParser.indexPropertyArgs&lt;/a&gt;.</source>
          <target state="translated">访问由&lt;a href=&quot;groovyparser#indexPropertyArgs&quot;&gt;GroovyParser.indexPropertyArgs&lt;/a&gt;生成的解析树。</target>
        </trans-unit>
        <trans-unit id="3f3cc82bebdad923e70b7f7797659709e56c365d" translate="yes" xml:space="preserve">
          <source>Visit a parse tree produced by &lt;a href=&quot;groovyparser#keywords&quot;&gt;GroovyParser.keywords&lt;/a&gt;.</source>
          <target state="translated">访问由&lt;a href=&quot;groovyparser#keywords&quot;&gt;GroovyParser.keywords&lt;/a&gt;生成的解析树。</target>
        </trans-unit>
        <trans-unit id="535d5d7119adcd797acf8f76e36ffa16e8a865a7" translate="yes" xml:space="preserve">
          <source>Visit a parse tree produced by &lt;a href=&quot;groovyparser#lambdaBody&quot;&gt;GroovyParser.lambdaBody&lt;/a&gt;.</source>
          <target state="translated">访问由&lt;a href=&quot;groovyparser#lambdaBody&quot;&gt;GroovyParser.lambdaBody&lt;/a&gt;生成的解析树。</target>
        </trans-unit>
        <trans-unit id="8f1627f39bf920d5c5f96e035b607929174565d5" translate="yes" xml:space="preserve">
          <source>Visit a parse tree produced by &lt;a href=&quot;groovyparser#list&quot;&gt;GroovyParser.list&lt;/a&gt;.</source>
          <target state="translated">访问由&lt;a href=&quot;groovyparser#list&quot;&gt;GroovyParser.list&lt;/a&gt;生成的解析树。</target>
        </trans-unit>
        <trans-unit id="c66e307e850fc0f4c750e1878967bced37230332" translate="yes" xml:space="preserve">
          <source>Visit a parse tree produced by &lt;a href=&quot;groovyparser#literal&quot;&gt;GroovyParser.literal&lt;/a&gt;.</source>
          <target state="translated">访问由&lt;a href=&quot;groovyparser#literal&quot;&gt;GroovyParser.literal&lt;/a&gt;生成的解析树。</target>
        </trans-unit>
        <trans-unit id="aa55fad9b99f415879cb2cb47123613b251f9b23" translate="yes" xml:space="preserve">
          <source>Visit a parse tree produced by &lt;a href=&quot;groovyparser#localVariableDeclaration&quot;&gt;GroovyParser.localVariableDeclaration&lt;/a&gt;.</source>
          <target state="translated">访问由&lt;a href=&quot;groovyparser#localVariableDeclaration&quot;&gt;GroovyParser.localVariableDeclaration&lt;/a&gt;生成的解析树。</target>
        </trans-unit>
        <trans-unit id="0503cb2338f50b6fc863b91dca15dbb1e14c2ccc" translate="yes" xml:space="preserve">
          <source>Visit a parse tree produced by &lt;a href=&quot;groovyparser#loopStatement&quot;&gt;GroovyParser.loopStatement&lt;/a&gt;.</source>
          <target state="translated">访问由&lt;a href=&quot;groovyparser#loopStatement&quot;&gt;GroovyParser.loopStatement&lt;/a&gt;生成的解析树。</target>
        </trans-unit>
        <trans-unit id="3d0323a214f0ae249241dab66fcb0b92b5d230fe" translate="yes" xml:space="preserve">
          <source>Visit a parse tree produced by &lt;a href=&quot;groovyparser#map&quot;&gt;GroovyParser.map&lt;/a&gt;.</source>
          <target state="translated">访问由&lt;a href=&quot;groovyparser#map&quot;&gt;GroovyParser.map&lt;/a&gt;生成的解析树。</target>
        </trans-unit>
        <trans-unit id="eccdc92d99a1db89f15d277ec3f319e7476a8391" translate="yes" xml:space="preserve">
          <source>Visit a parse tree produced by &lt;a href=&quot;groovyparser#mapEntry&quot;&gt;GroovyParser.mapEntry&lt;/a&gt;.</source>
          <target state="translated">访问由&lt;a href=&quot;groovyparser#mapEntry&quot;&gt;GroovyParser.mapEntry&lt;/a&gt;生成的解析树。</target>
        </trans-unit>
        <trans-unit id="6ff094d7376c91ab19ec34fe3dafeda69f5af816" translate="yes" xml:space="preserve">
          <source>Visit a parse tree produced by &lt;a href=&quot;groovyparser#mapEntryLabel&quot;&gt;GroovyParser.mapEntryLabel&lt;/a&gt;.</source>
          <target state="translated">访问由&lt;a href=&quot;groovyparser#mapEntryLabel&quot;&gt;GroovyParser.mapEntryLabel&lt;/a&gt;生成的解析树。</target>
        </trans-unit>
        <trans-unit id="e70b8e0c8a16d916dc8f4e6ec5aacb6f709b04d5" translate="yes" xml:space="preserve">
          <source>Visit a parse tree produced by &lt;a href=&quot;groovyparser#mapEntryList&quot;&gt;GroovyParser.mapEntryList&lt;/a&gt;.</source>
          <target state="translated">访问由&lt;a href=&quot;groovyparser#mapEntryList&quot;&gt;GroovyParser.mapEntryList&lt;/a&gt;生成的解析树。</target>
        </trans-unit>
        <trans-unit id="e0c10a1bb0823c55e8429998785b4d69314b06f1" translate="yes" xml:space="preserve">
          <source>Visit a parse tree produced by &lt;a href=&quot;groovyparser#memberDeclaration&quot;&gt;GroovyParser.memberDeclaration&lt;/a&gt;.</source>
          <target state="translated">访问由&lt;a href=&quot;groovyparser#memberDeclaration&quot;&gt;GroovyParser.memberDeclaration&lt;/a&gt;生成的解析树。</target>
        </trans-unit>
        <trans-unit id="7484ad822d429be10a0bb561a9a4d692dee5d884" translate="yes" xml:space="preserve">
          <source>Visit a parse tree produced by &lt;a href=&quot;groovyparser#methodBody&quot;&gt;GroovyParser.methodBody&lt;/a&gt;.</source>
          <target state="translated">访问由&lt;a href=&quot;groovyparser#methodBody&quot;&gt;GroovyParser.methodBody&lt;/a&gt;生成的解析树。</target>
        </trans-unit>
        <trans-unit id="d09a7009313e6b9e7730799cdb5e42595126f250" translate="yes" xml:space="preserve">
          <source>Visit a parse tree produced by &lt;a href=&quot;groovyparser#methodDeclaration&quot;&gt;GroovyParser.methodDeclaration&lt;/a&gt;.</source>
          <target state="translated">访问由&lt;a href=&quot;groovyparser#methodDeclaration&quot;&gt;GroovyParser.methodDeclaration&lt;/a&gt;生成的解析树。</target>
        </trans-unit>
        <trans-unit id="d01be8bb20b892579e175166654a3c119c684121" translate="yes" xml:space="preserve">
          <source>Visit a parse tree produced by &lt;a href=&quot;groovyparser#methodName&quot;&gt;GroovyParser.methodName&lt;/a&gt;.</source>
          <target state="translated">访问由&lt;a href=&quot;groovyparser#methodName&quot;&gt;GroovyParser.methodName&lt;/a&gt;生成的解析树。</target>
        </trans-unit>
        <trans-unit id="77a1574321241a5b29c71f52cddd328c945b2529" translate="yes" xml:space="preserve">
          <source>Visit a parse tree produced by &lt;a href=&quot;groovyparser#modifier&quot;&gt;GroovyParser.modifier&lt;/a&gt;.</source>
          <target state="translated">访问由&lt;a href=&quot;groovyparser#modifier&quot;&gt;GroovyParser.modifier&lt;/a&gt;生成的解析树。</target>
        </trans-unit>
        <trans-unit id="763a9b0ef0d882713753f8878a6779128fc1f797" translate="yes" xml:space="preserve">
          <source>Visit a parse tree produced by &lt;a href=&quot;groovyparser#modifiers&quot;&gt;GroovyParser.modifiers&lt;/a&gt;.</source>
          <target state="translated">访问由&lt;a href=&quot;groovyparser#modifiers&quot;&gt;GroovyParser.modifiers&lt;/a&gt;生成的解析树。</target>
        </trans-unit>
        <trans-unit id="0e05713df5a4fb89c1bbc780d31f60fc70d0659c" translate="yes" xml:space="preserve">
          <source>Visit a parse tree produced by &lt;a href=&quot;groovyparser#modifiersOpt&quot;&gt;GroovyParser.modifiersOpt&lt;/a&gt;.</source>
          <target state="translated">访问由&lt;a href=&quot;groovyparser#modifiersOpt&quot;&gt;GroovyParser.modifiersOpt&lt;/a&gt;产生的解析树。</target>
        </trans-unit>
        <trans-unit id="17be7e14597229d5f72c85581e081870a2528168" translate="yes" xml:space="preserve">
          <source>Visit a parse tree produced by &lt;a href=&quot;groovyparser#namePart&quot;&gt;GroovyParser.namePart&lt;/a&gt;.</source>
          <target state="translated">访问由&lt;a href=&quot;groovyparser#namePart&quot;&gt;GroovyParser.namePart&lt;/a&gt;产生的解析树。</target>
        </trans-unit>
        <trans-unit id="5e6b382229d4bf9488934e780f166351f9b317cc" translate="yes" xml:space="preserve">
          <source>Visit a parse tree produced by &lt;a href=&quot;groovyparser#namedPropertyArgs&quot;&gt;GroovyParser.namedPropertyArgs&lt;/a&gt;.</source>
          <target state="translated">访问由&lt;a href=&quot;groovyparser#namedPropertyArgs&quot;&gt;GroovyParser.namedPropertyArgs&lt;/a&gt;生成的解析树。</target>
        </trans-unit>
        <trans-unit id="30614b14379feda494ac05fb274da3c92e20dc31" translate="yes" xml:space="preserve">
          <source>Visit a parse tree produced by &lt;a href=&quot;groovyparser#nls&quot;&gt;GroovyParser.nls&lt;/a&gt;.</source>
          <target state="translated">访问由&lt;a href=&quot;groovyparser#nls&quot;&gt;GroovyParser.nls&lt;/a&gt;生成的解析树。</target>
        </trans-unit>
        <trans-unit id="88749372f47c0a1e7af0aa98b75283b99907ba77" translate="yes" xml:space="preserve">
          <source>Visit a parse tree produced by &lt;a href=&quot;groovyparser#nonWildcardTypeArguments&quot;&gt;GroovyParser.nonWildcardTypeArguments&lt;/a&gt;.</source>
          <target state="translated">访问由&lt;a href=&quot;groovyparser#nonWildcardTypeArguments&quot;&gt;GroovyParser.nonWildcardTypeArguments&lt;/a&gt;生成的解析树。</target>
        </trans-unit>
        <trans-unit id="8fdf26e579630633232910cf7b2d10dd697e2770" translate="yes" xml:space="preserve">
          <source>Visit a parse tree produced by &lt;a href=&quot;groovyparser#packageDeclaration&quot;&gt;GroovyParser.packageDeclaration&lt;/a&gt;.</source>
          <target state="translated">访问由&lt;a href=&quot;groovyparser#packageDeclaration&quot;&gt;GroovyParser.packageDeclaration&lt;/a&gt;生成的解析树。</target>
        </trans-unit>
        <trans-unit id="339638b9cb052bbfa37c103d8bed457bc594af43" translate="yes" xml:space="preserve">
          <source>Visit a parse tree produced by &lt;a href=&quot;groovyparser#parExpression&quot;&gt;GroovyParser.parExpression&lt;/a&gt;.</source>
          <target state="translated">访问由&lt;a href=&quot;groovyparser#parExpression&quot;&gt;GroovyParser.parExpression&lt;/a&gt;生成的解析树。</target>
        </trans-unit>
        <trans-unit id="f2b047f07d647829b172694954d575948a93bd22" translate="yes" xml:space="preserve">
          <source>Visit a parse tree produced by &lt;a href=&quot;groovyparser#pathElement&quot;&gt;GroovyParser.pathElement&lt;/a&gt;.</source>
          <target state="translated">访问由&lt;a href=&quot;groovyparser#pathElement&quot;&gt;GroovyParser.pathElement&lt;/a&gt;生成的解析树。</target>
        </trans-unit>
        <trans-unit id="63e8d9ceb457e7601c19f4bc77ffac39898b8882" translate="yes" xml:space="preserve">
          <source>Visit a parse tree produced by &lt;a href=&quot;groovyparser#pathExpression&quot;&gt;GroovyParser.pathExpression&lt;/a&gt;.</source>
          <target state="translated">访问由&lt;a href=&quot;groovyparser#pathExpression&quot;&gt;GroovyParser.pathExpression&lt;/a&gt;生成的解析树。</target>
        </trans-unit>
        <trans-unit id="a4238f7a9a929db47e70ed7a360462f318405235" translate="yes" xml:space="preserve">
          <source>Visit a parse tree produced by &lt;a href=&quot;groovyparser#postfixExpression&quot;&gt;GroovyParser.postfixExpression&lt;/a&gt;.</source>
          <target state="translated">访问由&lt;a href=&quot;groovyparser#postfixExpression&quot;&gt;GroovyParser.postfixExpression&lt;/a&gt;生成的解析树。</target>
        </trans-unit>
        <trans-unit id="e3a7044a8da58acfbe6970fe0547316922fea519" translate="yes" xml:space="preserve">
          <source>Visit a parse tree produced by &lt;a href=&quot;groovyparser#primary&quot;&gt;GroovyParser.primary&lt;/a&gt;.</source>
          <target state="translated">访问由&lt;a href=&quot;groovyparser#primary&quot;&gt;GroovyParser.primary&lt;/a&gt;生成的解析树。</target>
        </trans-unit>
        <trans-unit id="f69bd57c87b59bc50b92b14cbf2920a4516cbd6b" translate="yes" xml:space="preserve">
          <source>Visit a parse tree produced by &lt;a href=&quot;groovyparser#primitiveType&quot;&gt;GroovyParser.primitiveType&lt;/a&gt;.</source>
          <target state="translated">访问由&lt;a href=&quot;groovyparser#primitiveType&quot;&gt;GroovyParser.primitiveType&lt;/a&gt;生成的解析树。</target>
        </trans-unit>
        <trans-unit id="b8deb83875d4a2cad969c2657d9808b0a291cd50" translate="yes" xml:space="preserve">
          <source>Visit a parse tree produced by &lt;a href=&quot;groovyparser#qualifiedClassName&quot;&gt;GroovyParser.qualifiedClassName&lt;/a&gt;.</source>
          <target state="translated">访问由&lt;a href=&quot;groovyparser#qualifiedClassName&quot;&gt;GroovyParser.qualifiedClassName&lt;/a&gt;生成的解析树。</target>
        </trans-unit>
        <trans-unit id="726f9b63813dec088a4124e05e9565edb203944f" translate="yes" xml:space="preserve">
          <source>Visit a parse tree produced by &lt;a href=&quot;groovyparser#qualifiedClassNameList&quot;&gt;GroovyParser.qualifiedClassNameList&lt;/a&gt;.</source>
          <target state="translated">访问由&lt;a href=&quot;groovyparser#qualifiedClassNameList&quot;&gt;GroovyParser.qualifiedClassNameList&lt;/a&gt;产生的解析树。</target>
        </trans-unit>
        <trans-unit id="6471a54d499ff6d9eb67cadaef6a9768294a24cf" translate="yes" xml:space="preserve">
          <source>Visit a parse tree produced by &lt;a href=&quot;groovyparser#qualifiedName&quot;&gt;GroovyParser.qualifiedName&lt;/a&gt;.</source>
          <target state="translated">访问由&lt;a href=&quot;groovyparser#qualifiedName&quot;&gt;GroovyParser.qualifiedName&lt;/a&gt;生成的解析树。</target>
        </trans-unit>
        <trans-unit id="94a67624c4efcd7c956f65eaf358ba9617744825" translate="yes" xml:space="preserve">
          <source>Visit a parse tree produced by &lt;a href=&quot;groovyparser#qualifiedNameElement&quot;&gt;GroovyParser.qualifiedNameElement&lt;/a&gt;.</source>
          <target state="translated">访问由&lt;a href=&quot;groovyparser#qualifiedNameElement&quot;&gt;GroovyParser.qualifiedNameElement&lt;/a&gt;生成的解析树。</target>
        </trans-unit>
        <trans-unit id="43e1495065888896a17c4852c0aab367bf628f35" translate="yes" xml:space="preserve">
          <source>Visit a parse tree produced by &lt;a href=&quot;groovyparser#qualifiedNameElements&quot;&gt;GroovyParser.qualifiedNameElements&lt;/a&gt;.</source>
          <target state="translated">访问由&lt;a href=&quot;groovyparser#qualifiedNameElements&quot;&gt;GroovyParser.qualifiedNameElements&lt;/a&gt;生成的解析树。</target>
        </trans-unit>
        <trans-unit id="2fb9c39fa4d93ecb7b7bcfd744e4e3e3f141ad8a" translate="yes" xml:space="preserve">
          <source>Visit a parse tree produced by &lt;a href=&quot;groovyparser#qualifiedStandardClassName&quot;&gt;GroovyParser.qualifiedStandardClassName&lt;/a&gt;.</source>
          <target state="translated">访问由&lt;a href=&quot;groovyparser#qualifiedStandardClassName&quot;&gt;GroovyParser.qualifiedStandardClassName&lt;/a&gt;产生的解析树。</target>
        </trans-unit>
        <trans-unit id="f4a073359fbf9bad1f506bfc2f96f1b8bd75cdb2" translate="yes" xml:space="preserve">
          <source>Visit a parse tree produced by &lt;a href=&quot;groovyparser#resource&quot;&gt;GroovyParser.resource&lt;/a&gt;.</source>
          <target state="translated">访问由&lt;a href=&quot;groovyparser#resource&quot;&gt;GroovyParser.resource&lt;/a&gt;生成的解析树。</target>
        </trans-unit>
        <trans-unit id="f266a33b3ae87528e1a30b96548d406132516180" translate="yes" xml:space="preserve">
          <source>Visit a parse tree produced by &lt;a href=&quot;groovyparser#resourceList&quot;&gt;GroovyParser.resourceList&lt;/a&gt;.</source>
          <target state="translated">访问由&lt;a href=&quot;groovyparser#resourceList&quot;&gt;GroovyParser.resourceList&lt;/a&gt;生成的解析树。</target>
        </trans-unit>
        <trans-unit id="170f0fe1ef24f1fc540e5cea36749394828f9249" translate="yes" xml:space="preserve">
          <source>Visit a parse tree produced by &lt;a href=&quot;groovyparser#resources&quot;&gt;GroovyParser.resources&lt;/a&gt;.</source>
          <target state="translated">访问由&lt;a href=&quot;groovyparser#resources&quot;&gt;GroovyParser.resources&lt;/a&gt;生成的解析树。</target>
        </trans-unit>
        <trans-unit id="7096981e3a0b6ebbaea51e09776b2415ecca246a" translate="yes" xml:space="preserve">
          <source>Visit a parse tree produced by &lt;a href=&quot;groovyparser#returnType&quot;&gt;GroovyParser.returnType&lt;/a&gt;.</source>
          <target state="translated">访问由&lt;a href=&quot;groovyparser#returnType&quot;&gt;GroovyParser.returnType&lt;/a&gt;生成的解析树。</target>
        </trans-unit>
        <trans-unit id="6fddc1494ec4bdd1df1afff60b9c32a43acb378e" translate="yes" xml:space="preserve">
          <source>Visit a parse tree produced by &lt;a href=&quot;groovyparser#rparen&quot;&gt;GroovyParser.rparen&lt;/a&gt;.</source>
          <target state="translated">访问由&lt;a href=&quot;groovyparser#rparen&quot;&gt;GroovyParser.rparen&lt;/a&gt;生成的解析树。</target>
        </trans-unit>
        <trans-unit id="39a02b8a53f5e9b7b0dbff9f10d0fba3dd0a82f9" translate="yes" xml:space="preserve">
          <source>Visit a parse tree produced by &lt;a href=&quot;groovyparser#scriptStatement&quot;&gt;GroovyParser.scriptStatement&lt;/a&gt;.</source>
          <target state="translated">访问由&lt;a href=&quot;groovyparser#scriptStatement&quot;&gt;GroovyParser.scriptStatement&lt;/a&gt;生成的解析树。</target>
        </trans-unit>
        <trans-unit id="4cd542569808215bb499edc604ce715e4883f796" translate="yes" xml:space="preserve">
          <source>Visit a parse tree produced by &lt;a href=&quot;groovyparser#scriptStatements&quot;&gt;GroovyParser.scriptStatements&lt;/a&gt;.</source>
          <target state="translated">访问由&lt;a href=&quot;groovyparser#scriptStatements&quot;&gt;GroovyParser.scriptStatements&lt;/a&gt;生成的解析树。</target>
        </trans-unit>
        <trans-unit id="6d73d940d94e57d2ba8968a4a17214058bca69e1" translate="yes" xml:space="preserve">
          <source>Visit a parse tree produced by &lt;a href=&quot;groovyparser#sep&quot;&gt;GroovyParser.sep&lt;/a&gt;.</source>
          <target state="translated">访问由&lt;a href=&quot;groovyparser#sep&quot;&gt;GroovyParser.sep&lt;/a&gt;生成的解析树。</target>
        </trans-unit>
        <trans-unit id="54ea79ba0b18df42d3fb60cebb5569c22bee1344" translate="yes" xml:space="preserve">
          <source>Visit a parse tree produced by &lt;a href=&quot;groovyparser#standardLambdaExpression&quot;&gt;GroovyParser.standardLambdaExpression&lt;/a&gt;.</source>
          <target state="translated">访问由&lt;a href=&quot;groovyparser#standardLambdaExpression&quot;&gt;GroovyParser.standardLambdaExpression&lt;/a&gt;生成的解析树。</target>
        </trans-unit>
        <trans-unit id="21c48bcc6a8d75f802c03f5ff344e3eae9d5b048" translate="yes" xml:space="preserve">
          <source>Visit a parse tree produced by &lt;a href=&quot;groovyparser#standardLambdaParameters&quot;&gt;GroovyParser.standardLambdaParameters&lt;/a&gt;.</source>
          <target state="translated">访问由&lt;a href=&quot;groovyparser#standardLambdaParameters&quot;&gt;GroovyParser.standardLambdaParameters&lt;/a&gt;生成的解析树。</target>
        </trans-unit>
        <trans-unit id="55f7b022fe93a372d0d738a8b5c2c32a32c71689" translate="yes" xml:space="preserve">
          <source>Visit a parse tree produced by &lt;a href=&quot;groovyparser#statement&quot;&gt;GroovyParser.statement&lt;/a&gt;.</source>
          <target state="translated">访问由&lt;a href=&quot;groovyparser#statement&quot;&gt;GroovyParser.statement&lt;/a&gt;生成的解析树。</target>
        </trans-unit>
        <trans-unit id="765a1f66bae25ea68fe82360f1f0c66d67caef0c" translate="yes" xml:space="preserve">
          <source>Visit a parse tree produced by &lt;a href=&quot;groovyparser#statementExpression&quot;&gt;GroovyParser.statementExpression&lt;/a&gt;.</source>
          <target state="translated">访问由&lt;a href=&quot;groovyparser#statementExpression&quot;&gt;GroovyParser.statementExpression&lt;/a&gt;生成的解析树。</target>
        </trans-unit>
        <trans-unit id="cd1151edbda1cab3561448982a1357b880bbdc31" translate="yes" xml:space="preserve">
          <source>Visit a parse tree produced by &lt;a href=&quot;groovyparser#stringLiteral&quot;&gt;GroovyParser.stringLiteral&lt;/a&gt;.</source>
          <target state="translated">访问由&lt;a href=&quot;groovyparser#stringLiteral&quot;&gt;GroovyParser.stringLiteral&lt;/a&gt;生成的解析树。</target>
        </trans-unit>
        <trans-unit id="72659be5248a12f5559537ef9b64a530f5a62b25" translate="yes" xml:space="preserve">
          <source>Visit a parse tree produced by &lt;a href=&quot;groovyparser#switchBlockStatementGroup&quot;&gt;GroovyParser.switchBlockStatementGroup&lt;/a&gt;.</source>
          <target state="translated">访问由&lt;a href=&quot;groovyparser#switchBlockStatementGroup&quot;&gt;GroovyParser.switchBlockStatementGroup&lt;/a&gt;生成的解析树。</target>
        </trans-unit>
        <trans-unit id="13c54ff40bedee2730a3194523af78c0e1c1cf63" translate="yes" xml:space="preserve">
          <source>Visit a parse tree produced by &lt;a href=&quot;groovyparser#switchLabel&quot;&gt;GroovyParser.switchLabel&lt;/a&gt;.</source>
          <target state="translated">访问由&lt;a href=&quot;groovyparser#switchLabel&quot;&gt;GroovyParser.switchLabel&lt;/a&gt;生成的解析树。</target>
        </trans-unit>
        <trans-unit id="121002caa204b09fb78b226e403a639a5f4a3027" translate="yes" xml:space="preserve">
          <source>Visit a parse tree produced by &lt;a href=&quot;groovyparser#switchStatement&quot;&gt;GroovyParser.switchStatement&lt;/a&gt;.</source>
          <target state="translated">访问由&lt;a href=&quot;groovyparser#switchStatement&quot;&gt;GroovyParser.switchStatement&lt;/a&gt;生成的解析树。</target>
        </trans-unit>
        <trans-unit id="aabf818cd194db45613426d7172375e51772b7a6" translate="yes" xml:space="preserve">
          <source>Visit a parse tree produced by &lt;a href=&quot;groovyparser#thisFormalParameter&quot;&gt;GroovyParser.thisFormalParameter&lt;/a&gt;.</source>
          <target state="translated">访问由&lt;a href=&quot;groovyparser#thisFormalParameter&quot;&gt;GroovyParser.thisFormalParameter&lt;/a&gt;生成的解析树。</target>
        </trans-unit>
        <trans-unit id="dd0d1f73bd5462a82aa0bc595c7f1fc2806edae0" translate="yes" xml:space="preserve">
          <source>Visit a parse tree produced by &lt;a href=&quot;groovyparser#tryCatchStatement&quot;&gt;GroovyParser.tryCatchStatement&lt;/a&gt;.</source>
          <target state="translated">访问由&lt;a href=&quot;groovyparser#tryCatchStatement&quot;&gt;GroovyParser.tryCatchStatement&lt;/a&gt;生成的解析树。</target>
        </trans-unit>
        <trans-unit id="f6fbeb5aa8b8023b950178cd5da95df1cae1c769" translate="yes" xml:space="preserve">
          <source>Visit a parse tree produced by &lt;a href=&quot;groovyparser#type&quot;&gt;GroovyParser.type&lt;/a&gt;.</source>
          <target state="translated">访问由&lt;a href=&quot;groovyparser#type&quot;&gt;GroovyParser.type&lt;/a&gt;生成的解析树。</target>
        </trans-unit>
        <trans-unit id="efb2a6366923c4ff374f5d37329db7a98cb8d647" translate="yes" xml:space="preserve">
          <source>Visit a parse tree produced by &lt;a href=&quot;groovyparser#typeArgument&quot;&gt;GroovyParser.typeArgument&lt;/a&gt;.</source>
          <target state="translated">访问由&lt;a href=&quot;groovyparser#typeArgument&quot;&gt;GroovyParser.typeArgument&lt;/a&gt;生成的解析树。</target>
        </trans-unit>
        <trans-unit id="f1c1f4936943f44f7bf78c7aa696d65ce5873ceb" translate="yes" xml:space="preserve">
          <source>Visit a parse tree produced by &lt;a href=&quot;groovyparser#typeArguments&quot;&gt;GroovyParser.typeArguments&lt;/a&gt;.</source>
          <target state="translated">访问由&lt;a href=&quot;groovyparser#typeArguments&quot;&gt;GroovyParser.typeArguments&lt;/a&gt;生成的解析树。</target>
        </trans-unit>
        <trans-unit id="4d11f35c5f6f0ce4c2d930f8922a1ba9ad519e8d" translate="yes" xml:space="preserve">
          <source>Visit a parse tree produced by &lt;a href=&quot;groovyparser#typeArgumentsOrDiamond&quot;&gt;GroovyParser.typeArgumentsOrDiamond&lt;/a&gt;.</source>
          <target state="translated">访问由&lt;a href=&quot;groovyparser#typeArgumentsOrDiamond&quot;&gt;GroovyParser.typeArgumentsOrDiamond&lt;/a&gt;生成的解析树。</target>
        </trans-unit>
        <trans-unit id="cdb0054fd8caf217512a904ff54ae89fa75aa361" translate="yes" xml:space="preserve">
          <source>Visit a parse tree produced by &lt;a href=&quot;groovyparser#typeBound&quot;&gt;GroovyParser.typeBound&lt;/a&gt;.</source>
          <target state="translated">访问由&lt;a href=&quot;groovyparser#typeBound&quot;&gt;GroovyParser.typeBound&lt;/a&gt;生成的解析树。</target>
        </trans-unit>
        <trans-unit id="028de89bd0dc55b3477fcbeb05d224007168e395" translate="yes" xml:space="preserve">
          <source>Visit a parse tree produced by &lt;a href=&quot;groovyparser#typeDeclaration&quot;&gt;GroovyParser.typeDeclaration&lt;/a&gt;.</source>
          <target state="translated">访问由&lt;a href=&quot;groovyparser#typeDeclaration&quot;&gt;GroovyParser.typeDeclaration&lt;/a&gt;生成的解析树。</target>
        </trans-unit>
        <trans-unit id="a6a285d923fe968c2c61f3578f9686505ca80e0e" translate="yes" xml:space="preserve">
          <source>Visit a parse tree produced by &lt;a href=&quot;groovyparser#typeList&quot;&gt;GroovyParser.typeList&lt;/a&gt;.</source>
          <target state="translated">访问由&lt;a href=&quot;groovyparser#typeList&quot;&gt;GroovyParser.typeList&lt;/a&gt;生成的解析树。</target>
        </trans-unit>
        <trans-unit id="2a43b156060c0835909b001125035021406545ae" translate="yes" xml:space="preserve">
          <source>Visit a parse tree produced by &lt;a href=&quot;groovyparser#typeNamePair&quot;&gt;GroovyParser.typeNamePair&lt;/a&gt;.</source>
          <target state="translated">访问由&lt;a href=&quot;groovyparser#typeNamePair&quot;&gt;GroovyParser.typeNamePair&lt;/a&gt;生成的解析树。</target>
        </trans-unit>
        <trans-unit id="e5d9135be58d6d784f990253e315c61ee8c495aa" translate="yes" xml:space="preserve">
          <source>Visit a parse tree produced by &lt;a href=&quot;groovyparser#typeNamePairs&quot;&gt;GroovyParser.typeNamePairs&lt;/a&gt;.</source>
          <target state="translated">访问由&lt;a href=&quot;groovyparser#typeNamePairs&quot;&gt;GroovyParser.typeNamePairs&lt;/a&gt;生成的解析树。</target>
        </trans-unit>
        <trans-unit id="bce629672ed619a89e4aa7829aad9386151e653d" translate="yes" xml:space="preserve">
          <source>Visit a parse tree produced by &lt;a href=&quot;groovyparser#typeParameter&quot;&gt;GroovyParser.typeParameter&lt;/a&gt;.</source>
          <target state="translated">访问由&lt;a href=&quot;groovyparser#typeParameter&quot;&gt;GroovyParser.typeParameter&lt;/a&gt;生成的解析树。</target>
        </trans-unit>
        <trans-unit id="84c260ab72543ab5eb3f2d1b6527eb74f49352eb" translate="yes" xml:space="preserve">
          <source>Visit a parse tree produced by &lt;a href=&quot;groovyparser#typeParameters&quot;&gt;GroovyParser.typeParameters&lt;/a&gt;.</source>
          <target state="translated">访问由&lt;a href=&quot;groovyparser#typeParameters&quot;&gt;GroovyParser.typeParameters&lt;/a&gt;生成的解析树。</target>
        </trans-unit>
        <trans-unit id="acee740dd2400fa347f2dbdedd6443b62639c935" translate="yes" xml:space="preserve">
          <source>Visit a parse tree produced by &lt;a href=&quot;groovyparser#variableDeclaration&quot;&gt;GroovyParser.variableDeclaration&lt;/a&gt;.</source>
          <target state="translated">访问由&lt;a href=&quot;groovyparser#variableDeclaration&quot;&gt;GroovyParser.variableDeclaration&lt;/a&gt;生成的解析树。</target>
        </trans-unit>
        <trans-unit id="3e9ab79627b41838b6c9e3221b64a1f9b0f4d115" translate="yes" xml:space="preserve">
          <source>Visit a parse tree produced by &lt;a href=&quot;groovyparser#variableDeclarator&quot;&gt;GroovyParser.variableDeclarator&lt;/a&gt;.</source>
          <target state="translated">访问由&lt;a href=&quot;groovyparser#variableDeclarator&quot;&gt;GroovyParser.variableDeclarator&lt;/a&gt;生成的解析树。</target>
        </trans-unit>
        <trans-unit id="657e0f503d21f9ec2d37f9d8da456996d514ef32" translate="yes" xml:space="preserve">
          <source>Visit a parse tree produced by &lt;a href=&quot;groovyparser#variableDeclaratorId&quot;&gt;GroovyParser.variableDeclaratorId&lt;/a&gt;.</source>
          <target state="translated">访问由&lt;a href=&quot;groovyparser#variableDeclaratorId&quot;&gt;GroovyParser.variableDeclaratorId&lt;/a&gt;生成的解析树。</target>
        </trans-unit>
        <trans-unit id="d8fc5fb0f6d61655b48d7c9dbcb1e586ffae776e" translate="yes" xml:space="preserve">
          <source>Visit a parse tree produced by &lt;a href=&quot;groovyparser#variableDeclarators&quot;&gt;GroovyParser.variableDeclarators&lt;/a&gt;.</source>
          <target state="translated">访问由&lt;a href=&quot;groovyparser#variableDeclarators&quot;&gt;GroovyParser.variableDeclarators&lt;/a&gt;生成的解析树。</target>
        </trans-unit>
        <trans-unit id="de4ad02e679c7d50b36f985a724273ca4db84b01" translate="yes" xml:space="preserve">
          <source>Visit a parse tree produced by &lt;a href=&quot;groovyparser#variableInitializer&quot;&gt;GroovyParser.variableInitializer&lt;/a&gt;.</source>
          <target state="translated">访问由&lt;a href=&quot;groovyparser#variableInitializer&quot;&gt;GroovyParser.variableInitializer&lt;/a&gt;生成的解析树。</target>
        </trans-unit>
        <trans-unit id="e59f6898e1f9cd93ce3f2379b1912f250fd8a123" translate="yes" xml:space="preserve">
          <source>Visit a parse tree produced by &lt;a href=&quot;groovyparser#variableInitializers&quot;&gt;GroovyParser.variableInitializers&lt;/a&gt;.</source>
          <target state="translated">访问由&lt;a href=&quot;groovyparser#variableInitializers&quot;&gt;GroovyParser.variableInitializers&lt;/a&gt;生成的解析树。</target>
        </trans-unit>
        <trans-unit id="b85c2f5cdcc8a294fa70c195eb5e1aa9b032958e" translate="yes" xml:space="preserve">
          <source>Visit a parse tree produced by &lt;a href=&quot;groovyparser#variableModifier&quot;&gt;GroovyParser.variableModifier&lt;/a&gt;.</source>
          <target state="translated">访问由&lt;a href=&quot;groovyparser#variableModifier&quot;&gt;GroovyParser.variableModifier&lt;/a&gt;生成的解析树。</target>
        </trans-unit>
        <trans-unit id="40acbba47b7bbe8c6059e2a5e8e60b63b2d22327" translate="yes" xml:space="preserve">
          <source>Visit a parse tree produced by &lt;a href=&quot;groovyparser#variableModifiers&quot;&gt;GroovyParser.variableModifiers&lt;/a&gt;.</source>
          <target state="translated">访问由&lt;a href=&quot;groovyparser#variableModifiers&quot;&gt;GroovyParser.variableModifiers&lt;/a&gt;生成的解析树。</target>
        </trans-unit>
        <trans-unit id="4310625a0aa5fbf74f63b545aa6a40435251dfa4" translate="yes" xml:space="preserve">
          <source>Visit a parse tree produced by &lt;a href=&quot;groovyparser#variableModifiersOpt&quot;&gt;GroovyParser.variableModifiersOpt&lt;/a&gt;.</source>
          <target state="translated">访问由&lt;a href=&quot;groovyparser#variableModifiersOpt&quot;&gt;GroovyParser.variableModifiersOpt&lt;/a&gt;产生的解析树。</target>
        </trans-unit>
        <trans-unit id="66c355fbcf1b0460716644fcca1c4fbe69a3af1e" translate="yes" xml:space="preserve">
          <source>Visit a parse tree produced by &lt;a href=&quot;groovyparser#variableNames&quot;&gt;GroovyParser.variableNames&lt;/a&gt;.</source>
          <target state="translated">访问由&lt;a href=&quot;groovyparser#variableNames&quot;&gt;GroovyParser.variableNames&lt;/a&gt;生成的解析树。</target>
        </trans-unit>
        <trans-unit id="f9b1bb92a9784039d0e905902f1923d83c7825fb" translate="yes" xml:space="preserve">
          <source>Visit a parse tree produced by the &lt;code&gt;additiveExprAlt&lt;/code&gt; labeled alternative in &lt;a href=&quot;groovyparser#expression&quot;&gt;GroovyParser.expression&lt;/a&gt;.</source>
          <target state="translated">访问由&lt;a href=&quot;groovyparser#expression&quot;&gt;GroovyParser.expression中&lt;/a&gt;的 &lt;code&gt;additiveExprAlt&lt;/code&gt; 标记为Alternative的解析树。</target>
        </trans-unit>
        <trans-unit id="f7c77401128b3eb229a487ffb4af5f0d86c6e03e" translate="yes" xml:space="preserve">
          <source>Visit a parse tree produced by the &lt;code&gt;andExprAlt&lt;/code&gt; labeled alternative in &lt;a href=&quot;groovyparser#expression&quot;&gt;GroovyParser.expression&lt;/a&gt;.</source>
          <target state="translated">访问由所生成的解析树 &lt;code&gt;andExprAlt&lt;/code&gt; 在标替代&lt;a href=&quot;groovyparser#expression&quot;&gt;GroovyParser.expression&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="15588ab5cfffae4f864ad9515e9f53e232550469" translate="yes" xml:space="preserve">
          <source>Visit a parse tree produced by the &lt;code&gt;assertStmtAlt&lt;/code&gt; labeled alternative in &lt;a href=&quot;groovyparser#statement&quot;&gt;GroovyParser.statement&lt;/a&gt;.</source>
          <target state="translated">访问由所生成的解析树 &lt;code&gt;assertStmtAlt&lt;/code&gt; 在标替代&lt;a href=&quot;groovyparser#statement&quot;&gt;GroovyParser.statement&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="acb208927ac886067a86cb931a3e16b5c919c4bd" translate="yes" xml:space="preserve">
          <source>Visit a parse tree produced by the &lt;code&gt;assignmentExprAlt&lt;/code&gt; labeled alternative in &lt;a href=&quot;groovyparser#expression&quot;&gt;GroovyParser.expression&lt;/a&gt;.</source>
          <target state="translated">访问&lt;a href=&quot;groovyparser#expression&quot;&gt;GroovyParser.expression&lt;/a&gt;中标有alternateExprAlt的 &lt;code&gt;assignmentExprAlt&lt;/code&gt; 生成的解析树。</target>
        </trans-unit>
        <trans-unit id="21b66a60a9a65d39a4a17d19008d515b24f2ef30" translate="yes" xml:space="preserve">
          <source>Visit a parse tree produced by the &lt;code&gt;blockStmtAlt&lt;/code&gt; labeled alternative in &lt;a href=&quot;groovyparser#statement&quot;&gt;GroovyParser.statement&lt;/a&gt;.</source>
          <target state="translated">访问由所生成的解析树 &lt;code&gt;blockStmtAlt&lt;/code&gt; 在标替代&lt;a href=&quot;groovyparser#statement&quot;&gt;GroovyParser.statement&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="899023e3e7fc5af15a7fb8ff182b6a53a97595e5" translate="yes" xml:space="preserve">
          <source>Visit a parse tree produced by the &lt;code&gt;booleanLiteralAlt&lt;/code&gt; labeled alternative in &lt;a href=&quot;groovyparser#literal&quot;&gt;GroovyParser.literal&lt;/a&gt;.</source>
          <target state="translated">访问由所生成的解析树 &lt;code&gt;booleanLiteralAlt&lt;/code&gt; 在标替代&lt;a href=&quot;groovyparser#literal&quot;&gt;GroovyParser.literal&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="25fa557fbf4fda1d23d9678fa92a8937e4d937c2" translate="yes" xml:space="preserve">
          <source>Visit a parse tree produced by the &lt;code&gt;breakStmtAlt&lt;/code&gt; labeled alternative in &lt;a href=&quot;groovyparser#statement&quot;&gt;GroovyParser.statement&lt;/a&gt;.</source>
          <target state="translated">访问由所生成的解析树 &lt;code&gt;breakStmtAlt&lt;/code&gt; 在标替代&lt;a href=&quot;groovyparser#statement&quot;&gt;GroovyParser.statement&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="5f408f4c2533bf64a80483befd4aff808056941a" translate="yes" xml:space="preserve">
          <source>Visit a parse tree produced by the &lt;code&gt;builtInTypePrmrAlt&lt;/code&gt; labeled alternative in &lt;a href=&quot;groovyparser#primary&quot;&gt;GroovyParser.primary&lt;/a&gt;.</source>
          <target state="translated">访问由 &lt;code&gt;builtInTypePrmrAlt&lt;/code&gt; 中标为alternative的&lt;a href=&quot;groovyparser#primary&quot;&gt;builtInTypePrmrAlt&lt;/a&gt;生成的解析树。</target>
        </trans-unit>
        <trans-unit id="40ba89d352ddd173d0f363c9be8d29c722a6ceac" translate="yes" xml:space="preserve">
          <source>Visit a parse tree produced by the &lt;code&gt;castExprAlt&lt;/code&gt; labeled alternative in &lt;a href=&quot;groovyparser#castOperandExpression&quot;&gt;GroovyParser.castOperandExpression&lt;/a&gt;.</source>
          <target state="translated">访问由所生成的解析树 &lt;code&gt;castExprAlt&lt;/code&gt; 在标替代&lt;a href=&quot;groovyparser#castOperandExpression&quot;&gt;GroovyParser.castOperandExpression&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="fc4c7173f870fa7629e388d65a634f3ae20f5f67" translate="yes" xml:space="preserve">
          <source>Visit a parse tree produced by the &lt;code&gt;closureOrLambdaExpressionPrmrAlt&lt;/code&gt; labeled alternative in &lt;a href=&quot;groovyparser#primary&quot;&gt;GroovyParser.primary&lt;/a&gt;.</source>
          <target state="translated">访问由 &lt;code&gt;closureOrLambdaExpressionPrmrAlt&lt;/code&gt; 中标为alternate的&lt;a href=&quot;groovyparser#primary&quot;&gt;closureOrLambdaExpressionPrmrAlt&lt;/a&gt;生成的解析树。</target>
        </trans-unit>
        <trans-unit id="0f037e9781209e9b78ec008e47b5aa3d49483fef" translate="yes" xml:space="preserve">
          <source>Visit a parse tree produced by the &lt;code&gt;commandExprAlt&lt;/code&gt; labeled alternative in &lt;a href=&quot;groovyparser#statementExpression&quot;&gt;GroovyParser.statementExpression&lt;/a&gt;.</source>
          <target state="translated">访问由所生成的解析树 &lt;code&gt;commandExprAlt&lt;/code&gt; 在标替代&lt;a href=&quot;groovyparser#statementExpression&quot;&gt;GroovyParser.statementExpression&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="c202b49337971eb635aa7b0ccb4da93e80977776" translate="yes" xml:space="preserve">
          <source>Visit a parse tree produced by the &lt;code&gt;conditionalExprAlt&lt;/code&gt; labeled alternative in &lt;a href=&quot;groovyparser#expression&quot;&gt;GroovyParser.expression&lt;/a&gt;.</source>
          <target state="translated">访问由&lt;a href=&quot;groovyparser#expression&quot;&gt;GroovyParser.expression中&lt;/a&gt;的 &lt;code&gt;conditionalExprAlt&lt;/code&gt; 标记为Alternative的解析树。</target>
        </trans-unit>
        <trans-unit id="fccdd696637dac41ee43166651104118b7f7d0ae" translate="yes" xml:space="preserve">
          <source>Visit a parse tree produced by the &lt;code&gt;conditionalStmtAlt&lt;/code&gt; labeled alternative in &lt;a href=&quot;groovyparser#statement&quot;&gt;GroovyParser.statement&lt;/a&gt;.</source>
          <target state="translated">访问&lt;a href=&quot;groovyparser#statement&quot;&gt;GroovyParser.statement中&lt;/a&gt;由 &lt;code&gt;conditionalStmtAlt&lt;/code&gt; 标记为Alternative的解析树。</target>
        </trans-unit>
        <trans-unit id="faa7801654b6e5a5295545e7e26d93fe95c6c406" translate="yes" xml:space="preserve">
          <source>Visit a parse tree produced by the &lt;code&gt;continueStmtAlt&lt;/code&gt; labeled alternative in &lt;a href=&quot;groovyparser#statement&quot;&gt;GroovyParser.statement&lt;/a&gt;.</source>
          <target state="translated">访问由所生成的解析树 &lt;code&gt;continueStmtAlt&lt;/code&gt; 在标替代&lt;a href=&quot;groovyparser#statement&quot;&gt;GroovyParser.statement&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="39991c39dce91e91a0e3b8f8b79b71d918a63e02" translate="yes" xml:space="preserve">
          <source>Visit a parse tree produced by the &lt;code&gt;doWhileStmtAlt&lt;/code&gt; labeled alternative in &lt;a href=&quot;groovyparser#loopStatement&quot;&gt;GroovyParser.loopStatement&lt;/a&gt;.</source>
          <target state="translated">访问由 &lt;code&gt;doWhileStmtAlt&lt;/code&gt; 标记为&lt;a href=&quot;groovyparser#loopStatement&quot;&gt;option&lt;/a&gt;的doWhileStmtAlt生成的解析树。</target>
        </trans-unit>
        <trans-unit id="be5bf0756d707d56edc028ba7fdaed3ff68bc4cd" translate="yes" xml:space="preserve">
          <source>Visit a parse tree produced by the &lt;code&gt;emptyStmtAlt&lt;/code&gt; labeled alternative in &lt;a href=&quot;groovyparser#statement&quot;&gt;GroovyParser.statement&lt;/a&gt;.</source>
          <target state="translated">访问由所生成的解析树 &lt;code&gt;emptyStmtAlt&lt;/code&gt; 在标替代&lt;a href=&quot;groovyparser#statement&quot;&gt;GroovyParser.statement&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="5d2e01671a4ddba7b048c137a881c64a2fef8f6a" translate="yes" xml:space="preserve">
          <source>Visit a parse tree produced by the &lt;code&gt;equalityExprAlt&lt;/code&gt; labeled alternative in &lt;a href=&quot;groovyparser#expression&quot;&gt;GroovyParser.expression&lt;/a&gt;.</source>
          <target state="translated">访问由所生成的解析树 &lt;code&gt;equalityExprAlt&lt;/code&gt; 在标替代&lt;a href=&quot;groovyparser#expression&quot;&gt;GroovyParser.expression&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="7c8b842991694939544c348cc5e09543e3311d77" translate="yes" xml:space="preserve">
          <source>Visit a parse tree produced by the &lt;code&gt;exclusiveOrExprAlt&lt;/code&gt; labeled alternative in &lt;a href=&quot;groovyparser#expression&quot;&gt;GroovyParser.expression&lt;/a&gt;.</source>
          <target state="translated">访问由所生成的解析树 &lt;code&gt;exclusiveOrExprAlt&lt;/code&gt; 在标替代&lt;a href=&quot;groovyparser#expression&quot;&gt;GroovyParser.expression&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="fe644ab958926f2877e702f1e8ba9feb001189c8" translate="yes" xml:space="preserve">
          <source>Visit a parse tree produced by the &lt;code&gt;expressionStmtAlt&lt;/code&gt; labeled alternative in &lt;a href=&quot;groovyparser#statement&quot;&gt;GroovyParser.statement&lt;/a&gt;.</source>
          <target state="translated">访问&lt;a href=&quot;groovyparser#statement&quot;&gt;GroovyParser.statement中&lt;/a&gt;由 &lt;code&gt;expressionStmtAlt&lt;/code&gt; 标记为Alternative的解析树。</target>
        </trans-unit>
        <trans-unit id="94805cb8e5aa685c79aa1209ec25243106efcb21" translate="yes" xml:space="preserve">
          <source>Visit a parse tree produced by the &lt;code&gt;floatingPointLiteralAlt&lt;/code&gt; labeled alternative in &lt;a href=&quot;groovyparser#literal&quot;&gt;GroovyParser.literal&lt;/a&gt;.</source>
          <target state="translated">访问由所生成的解析树 &lt;code&gt;floatingPointLiteralAlt&lt;/code&gt; 在标替代&lt;a href=&quot;groovyparser#literal&quot;&gt;GroovyParser.literal&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="e4be403a839af6c89186be5460767cf8e06e0908" translate="yes" xml:space="preserve">
          <source>Visit a parse tree produced by the &lt;code&gt;forStmtAlt&lt;/code&gt; labeled alternative in &lt;a href=&quot;groovyparser#loopStatement&quot;&gt;GroovyParser.loopStatement&lt;/a&gt;.</source>
          <target state="translated">访问由所生成的解析树 &lt;code&gt;forStmtAlt&lt;/code&gt; 在标替代&lt;a href=&quot;groovyparser#loopStatement&quot;&gt;GroovyParser.loopStatement&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="bc04e3dfbea538394d668f4dbe9e4a4ff7675256" translate="yes" xml:space="preserve">
          <source>Visit a parse tree produced by the &lt;code&gt;gstringPrmrAlt&lt;/code&gt; labeled alternative in &lt;a href=&quot;groovyparser#commandPrimary&quot;&gt;GroovyParser.commandPrimary&lt;/a&gt;.</source>
          <target state="translated">访问由所生成的解析树 &lt;code&gt;gstringPrmrAlt&lt;/code&gt; 在标替代&lt;a href=&quot;groovyparser#commandPrimary&quot;&gt;GroovyParser.commandPrimary&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="0d9ae509c9effa4ff0dbf4288f1271a3a4db41b1" translate="yes" xml:space="preserve">
          <source>Visit a parse tree produced by the &lt;code&gt;identifierPrmrAlt&lt;/code&gt; labeled alternative in &lt;a href=&quot;groovyparser#commandPrimary&quot;&gt;GroovyParser.commandPrimary&lt;/a&gt;.</source>
          <target state="translated">访问&lt;a href=&quot;groovyparser#commandPrimary&quot;&gt;GroovyParser.commandPrimary中&lt;/a&gt;由 &lt;code&gt;identifierPrmrAlt&lt;/code&gt; 标记为Alternative的解析树。</target>
        </trans-unit>
        <trans-unit id="9689c8b6e00eb420809331a773c5de0b0719ed37" translate="yes" xml:space="preserve">
          <source>Visit a parse tree produced by the &lt;code&gt;inclusiveOrExprAlt&lt;/code&gt; labeled alternative in &lt;a href=&quot;groovyparser#expression&quot;&gt;GroovyParser.expression&lt;/a&gt;.</source>
          <target state="translated">请访问由&lt;a href=&quot;groovyparser#expression&quot;&gt;GroovyParser.expression中&lt;/a&gt; &lt;code&gt;inclusiveOrExprAlt&lt;/code&gt; 标记为Alternative的解析树。</target>
        </trans-unit>
        <trans-unit id="b1227097195e0c4ab1d3f48ebdf0b57053e28f70" translate="yes" xml:space="preserve">
          <source>Visit a parse tree produced by the &lt;code&gt;integerLiteralAlt&lt;/code&gt; labeled alternative in &lt;a href=&quot;groovyparser#literal&quot;&gt;GroovyParser.literal&lt;/a&gt;.</source>
          <target state="translated">访问由&lt;a href=&quot;groovyparser#literal&quot;&gt;GroovyParser.literal中&lt;/a&gt;的 &lt;code&gt;integerLiteralAlt&lt;/code&gt; 标记为Alternative的解析树。</target>
        </trans-unit>
        <trans-unit id="300daba6aa2658e731c4b250e6de5bbcfe060c15" translate="yes" xml:space="preserve">
          <source>Visit a parse tree produced by the &lt;code&gt;labeledStmtAlt&lt;/code&gt; labeled alternative in &lt;a href=&quot;groovyparser#statement&quot;&gt;GroovyParser.statement&lt;/a&gt;.</source>
          <target state="translated">访问由所生成的解析树 &lt;code&gt;labeledStmtAlt&lt;/code&gt; 在标替代&lt;a href=&quot;groovyparser#statement&quot;&gt;GroovyParser.statement&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="dfed6961503770e447b3b3adcb1658420af5160a" translate="yes" xml:space="preserve">
          <source>Visit a parse tree produced by the &lt;code&gt;listPrmrAlt&lt;/code&gt; labeled alternative in &lt;a href=&quot;groovyparser#primary&quot;&gt;GroovyParser.primary&lt;/a&gt;.</source>
          <target state="translated">访问由所生成的解析树 &lt;code&gt;listPrmrAlt&lt;/code&gt; 在标替代&lt;a href=&quot;groovyparser#primary&quot;&gt;GroovyParser.primary&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="5d667a4d7c2868c58a3c670b139b91a8cbd8459b" translate="yes" xml:space="preserve">
          <source>Visit a parse tree produced by the &lt;code&gt;literalPrmrAlt&lt;/code&gt; labeled alternative in &lt;a href=&quot;groovyparser#commandPrimary&quot;&gt;GroovyParser.commandPrimary&lt;/a&gt;.</source>
          <target state="translated">访问由所生成的解析树 &lt;code&gt;literalPrmrAlt&lt;/code&gt; 在标替代&lt;a href=&quot;groovyparser#commandPrimary&quot;&gt;GroovyParser.commandPrimary&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="840db04911d2705800cd148c67498acbcdfee527" translate="yes" xml:space="preserve">
          <source>Visit a parse tree produced by the &lt;code&gt;localVariableDeclarationStmtAlt&lt;/code&gt; labeled alternative in &lt;a href=&quot;groovyparser#statement&quot;&gt;GroovyParser.statement&lt;/a&gt;.</source>
          <target state="translated">访问由所生成的解析树 &lt;code&gt;localVariableDeclarationStmtAlt&lt;/code&gt; 在标替代&lt;a href=&quot;groovyparser#statement&quot;&gt;GroovyParser.statement&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="5ff408ce4c3144872861f0267f1ea4dff5ed48c3" translate="yes" xml:space="preserve">
          <source>Visit a parse tree produced by the &lt;code&gt;logicalAndExprAlt&lt;/code&gt; labeled alternative in &lt;a href=&quot;groovyparser#expression&quot;&gt;GroovyParser.expression&lt;/a&gt;.</source>
          <target state="translated">访问由所生成的解析树 &lt;code&gt;logicalAndExprAlt&lt;/code&gt; 在标替代&lt;a href=&quot;groovyparser#expression&quot;&gt;GroovyParser.expression&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="ee594ffe2774ee79c295efc4e663940e4252ec45" translate="yes" xml:space="preserve">
          <source>Visit a parse tree produced by the &lt;code&gt;logicalOrExprAlt&lt;/code&gt; labeled alternative in &lt;a href=&quot;groovyparser#expression&quot;&gt;GroovyParser.expression&lt;/a&gt;.</source>
          <target state="translated">访问由所生成的解析树 &lt;code&gt;logicalOrExprAlt&lt;/code&gt; 在标替代&lt;a href=&quot;groovyparser#expression&quot;&gt;GroovyParser.expression&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="d679c2fdadd4c195b6370237544b47689c2ed516" translate="yes" xml:space="preserve">
          <source>Visit a parse tree produced by the &lt;code&gt;loopStmtAlt&lt;/code&gt; labeled alternative in &lt;a href=&quot;groovyparser#statement&quot;&gt;GroovyParser.statement&lt;/a&gt;.</source>
          <target state="translated">访问由 &lt;code&gt;loopStmtAlt&lt;/code&gt; 标记为Alternative的&lt;a href=&quot;groovyparser#statement&quot;&gt;loopStmtAlt&lt;/a&gt;生成的解析树。</target>
        </trans-unit>
        <trans-unit id="da256a767556ce8e4297fac626d3eff38b3ef9ba" translate="yes" xml:space="preserve">
          <source>Visit a parse tree produced by the &lt;code&gt;mapPrmrAlt&lt;/code&gt; labeled alternative in &lt;a href=&quot;groovyparser#primary&quot;&gt;GroovyParser.primary&lt;/a&gt;.</source>
          <target state="translated">访问由所生成的解析树 &lt;code&gt;mapPrmrAlt&lt;/code&gt; 在标替代&lt;a href=&quot;groovyparser#primary&quot;&gt;GroovyParser.primary&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="84ebeec45476fb752fce24f587452071b77e461c" translate="yes" xml:space="preserve">
          <source>Visit a parse tree produced by the &lt;code&gt;multipleAssignmentExprAlt&lt;/code&gt; labeled alternative in &lt;a href=&quot;groovyparser#expression&quot;&gt;GroovyParser.expression&lt;/a&gt;.</source>
          <target state="translated">访问由&lt;a href=&quot;groovyparser#expression&quot;&gt;GroovyParser.expression中&lt;/a&gt;标记为Alternative的 &lt;code&gt;multipleAssignmentExprAlt&lt;/code&gt; 生成的解析树。</target>
        </trans-unit>
        <trans-unit id="b75aa39035b4f5826dda4dfde24946dc284df2d5" translate="yes" xml:space="preserve">
          <source>Visit a parse tree produced by the &lt;code&gt;multiplicativeExprAlt&lt;/code&gt; labeled alternative in &lt;a href=&quot;groovyparser#expression&quot;&gt;GroovyParser.expression&lt;/a&gt;.</source>
          <target state="translated">访问由所生成的解析树 &lt;code&gt;multiplicativeExprAlt&lt;/code&gt; 在标替代&lt;a href=&quot;groovyparser#expression&quot;&gt;GroovyParser.expression&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="a051ad08e06232a578e35660f6c9636bbd2322ba" translate="yes" xml:space="preserve">
          <source>Visit a parse tree produced by the &lt;code&gt;newPrmrAlt&lt;/code&gt; labeled alternative in &lt;a href=&quot;groovyparser#primary&quot;&gt;GroovyParser.primary&lt;/a&gt;.</source>
          <target state="translated">访问由 &lt;code&gt;newPrmrAlt&lt;/code&gt; 中&lt;a href=&quot;groovyparser#primary&quot;&gt;带有&lt;/a&gt;newPrmrAlt标记的Alternative生成的解析树。</target>
        </trans-unit>
        <trans-unit id="a66704d4877b4bfff9844af359708e31d9fef7cc" translate="yes" xml:space="preserve">
          <source>Visit a parse tree produced by the &lt;code&gt;nullLiteralAlt&lt;/code&gt; labeled alternative in &lt;a href=&quot;groovyparser#literal&quot;&gt;GroovyParser.literal&lt;/a&gt;.</source>
          <target state="translated">访问由所生成的解析树 &lt;code&gt;nullLiteralAlt&lt;/code&gt; 在标替代&lt;a href=&quot;groovyparser#literal&quot;&gt;GroovyParser.literal&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="d51db257b3edf6eb8c36cd435f731e039c290ff2" translate="yes" xml:space="preserve">
          <source>Visit a parse tree produced by the &lt;code&gt;parenPrmrAlt&lt;/code&gt; labeled alternative in &lt;a href=&quot;groovyparser#namedPropertyArgPrimary&quot;&gt;GroovyParser.namedPropertyArgPrimary&lt;/a&gt;.</source>
          <target state="translated">访问由所生成的解析树 &lt;code&gt;parenPrmrAlt&lt;/code&gt; 在标替代&lt;a href=&quot;groovyparser#namedPropertyArgPrimary&quot;&gt;GroovyParser.namedPropertyArgPrimary&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="f49e525d79df9ed568740b3e6c3588651d5c75b8" translate="yes" xml:space="preserve">
          <source>Visit a parse tree produced by the &lt;code&gt;postfixExprAlt&lt;/code&gt; labeled alternative in &lt;a href=&quot;groovyparser#castOperandExpression&quot;&gt;GroovyParser.castOperandExpression&lt;/a&gt;.</source>
          <target state="translated">访问由 &lt;code&gt;postfixExprAlt&lt;/code&gt; 标记为Alternative的&lt;a href=&quot;groovyparser#castOperandExpression&quot;&gt;postfixExprAlt&lt;/a&gt;产生的解析树。</target>
        </trans-unit>
        <trans-unit id="e6e968d6ab6a66c572673c5ae1cc6e5bec2368a3" translate="yes" xml:space="preserve">
          <source>Visit a parse tree produced by the &lt;code&gt;powerExprAlt&lt;/code&gt; labeled alternative in &lt;a href=&quot;groovyparser#expression&quot;&gt;GroovyParser.expression&lt;/a&gt;.</source>
          <target state="translated">访问由所生成的解析树 &lt;code&gt;powerExprAlt&lt;/code&gt; 在标替代&lt;a href=&quot;groovyparser#expression&quot;&gt;GroovyParser.expression&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="878040e8a12162d94559478958c14d69d4ef5e04" translate="yes" xml:space="preserve">
          <source>Visit a parse tree produced by the &lt;code&gt;regexExprAlt&lt;/code&gt; labeled alternative in &lt;a href=&quot;groovyparser#expression&quot;&gt;GroovyParser.expression&lt;/a&gt;.</source>
          <target state="translated">访问由 &lt;code&gt;regexExprAlt&lt;/code&gt; 标记为Alternative的&lt;a href=&quot;groovyparser#expression&quot;&gt;regexExprAlt&lt;/a&gt;产生的解析树。</target>
        </trans-unit>
        <trans-unit id="4821baaf864c978a2a7abb91faeb262c8c9ef272" translate="yes" xml:space="preserve">
          <source>Visit a parse tree produced by the &lt;code&gt;relationalExprAlt&lt;/code&gt; labeled alternative in &lt;a href=&quot;groovyparser#expression&quot;&gt;GroovyParser.expression&lt;/a&gt;.</source>
          <target state="translated">访问由所生成的解析树 &lt;code&gt;relationalExprAlt&lt;/code&gt; 在标替代&lt;a href=&quot;groovyparser#expression&quot;&gt;GroovyParser.expression&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="62dc9fbda2383818bac4aaac05c198f7d5c43167" translate="yes" xml:space="preserve">
          <source>Visit a parse tree produced by the &lt;code&gt;returnStmtAlt&lt;/code&gt; labeled alternative in &lt;a href=&quot;groovyparser#statement&quot;&gt;GroovyParser.statement&lt;/a&gt;.</source>
          <target state="translated">访问由所生成的解析树 &lt;code&gt;returnStmtAlt&lt;/code&gt; 在标替代&lt;a href=&quot;groovyparser#statement&quot;&gt;GroovyParser.statement&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="9eecdf78a2542e43f06a476b33e1172f1732562c" translate="yes" xml:space="preserve">
          <source>Visit a parse tree produced by the &lt;code&gt;shiftExprAlt&lt;/code&gt; labeled alternative in &lt;a href=&quot;groovyparser#expression&quot;&gt;GroovyParser.expression&lt;/a&gt;.</source>
          <target state="translated">访问 &lt;code&gt;shiftExprAlt&lt;/code&gt; 中&lt;a href=&quot;groovyparser#expression&quot;&gt;带有&lt;/a&gt;shiftExprAlt标记为Alternative的解析树。</target>
        </trans-unit>
        <trans-unit id="b83d50126734cc0de13e9a51bb280cdf23adf42e" translate="yes" xml:space="preserve">
          <source>Visit a parse tree produced by the &lt;code&gt;stringLiteralAlt&lt;/code&gt; labeled alternative in &lt;a href=&quot;groovyparser#literal&quot;&gt;GroovyParser.literal&lt;/a&gt;.</source>
          <target state="translated">访问由所生成的解析树 &lt;code&gt;stringLiteralAlt&lt;/code&gt; 在标替代&lt;a href=&quot;groovyparser#literal&quot;&gt;GroovyParser.literal&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="e01ac932ed79e153a905864b66f6a6672b87f1fc" translate="yes" xml:space="preserve">
          <source>Visit a parse tree produced by the &lt;code&gt;superPrmrAlt&lt;/code&gt; labeled alternative in &lt;a href=&quot;groovyparser#primary&quot;&gt;GroovyParser.primary&lt;/a&gt;.</source>
          <target state="translated">访问由 &lt;code&gt;superPrmrAlt&lt;/code&gt; 中&lt;a href=&quot;groovyparser#primary&quot;&gt;带有&lt;/a&gt;superPrmrAlt标记的Alternative生成的解析树。</target>
        </trans-unit>
        <trans-unit id="fa092d147c7fa4312baf65f052b403ea2146a21d" translate="yes" xml:space="preserve">
          <source>Visit a parse tree produced by the &lt;code&gt;synchronizedStmtAlt&lt;/code&gt; labeled alternative in &lt;a href=&quot;groovyparser#statement&quot;&gt;GroovyParser.statement&lt;/a&gt;.</source>
          <target state="translated">访问&lt;a href=&quot;groovyparser#statement&quot;&gt;GroovyParser.statement中&lt;/a&gt;标记为&amp;ldquo; alternated&amp;rdquo;的&amp;ldquo; &lt;code&gt;synchronizedStmtAlt&lt;/code&gt; &amp;rdquo;生成的解析树。</target>
        </trans-unit>
        <trans-unit id="f2405a64ec1ff8cff9b2e91aa3ff17d2856379c1" translate="yes" xml:space="preserve">
          <source>Visit a parse tree produced by the &lt;code&gt;thisPrmrAlt&lt;/code&gt; labeled alternative in &lt;a href=&quot;groovyparser#primary&quot;&gt;GroovyParser.primary&lt;/a&gt;.</source>
          <target state="translated">访问由所生成的解析树 &lt;code&gt;thisPrmrAlt&lt;/code&gt; 在标替代&lt;a href=&quot;groovyparser#primary&quot;&gt;GroovyParser.primary&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="5398a9b3fb4872607122403a46c4a9893f971578" translate="yes" xml:space="preserve">
          <source>Visit a parse tree produced by the &lt;code&gt;throwStmtAlt&lt;/code&gt; labeled alternative in &lt;a href=&quot;groovyparser#statement&quot;&gt;GroovyParser.statement&lt;/a&gt;.</source>
          <target state="translated">访问由所生成的解析树 &lt;code&gt;throwStmtAlt&lt;/code&gt; 在标替代&lt;a href=&quot;groovyparser#statement&quot;&gt;GroovyParser.statement&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="5e293a55be780b9395e22ed361791b365fc8ed89" translate="yes" xml:space="preserve">
          <source>Visit a parse tree produced by the &lt;code&gt;tryCatchStmtAlt&lt;/code&gt; labeled alternative in &lt;a href=&quot;groovyparser#statement&quot;&gt;GroovyParser.statement&lt;/a&gt;.</source>
          <target state="translated">访问由所生成的解析树 &lt;code&gt;tryCatchStmtAlt&lt;/code&gt; 在标替代&lt;a href=&quot;groovyparser#statement&quot;&gt;GroovyParser.statement&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="56b7bd77fc14d57c6cee94d57dd4f86f6803c325" translate="yes" xml:space="preserve">
          <source>Visit a parse tree produced by the &lt;code&gt;unaryAddExprAlt&lt;/code&gt; labeled alternative in &lt;a href=&quot;groovyparser#castOperandExpression&quot;&gt;GroovyParser.castOperandExpression&lt;/a&gt;.</source>
          <target state="translated">访问由所生成的解析树 &lt;code&gt;unaryAddExprAlt&lt;/code&gt; 在标替代&lt;a href=&quot;groovyparser#castOperandExpression&quot;&gt;GroovyParser.castOperandExpression&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="7109af3571575fbc019f4cb72055eafa4e40ca22" translate="yes" xml:space="preserve">
          <source>Visit a parse tree produced by the &lt;code&gt;unaryNotExprAlt&lt;/code&gt; labeled alternative in &lt;a href=&quot;groovyparser#castOperandExpression&quot;&gt;GroovyParser.castOperandExpression&lt;/a&gt;.</source>
          <target state="translated">访问由所生成的解析树 &lt;code&gt;unaryNotExprAlt&lt;/code&gt; 在标替代&lt;a href=&quot;groovyparser#castOperandExpression&quot;&gt;GroovyParser.castOperandExpression&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="98454cbf20a6ecdc5b95b4f5f40ffd99e8243c5a" translate="yes" xml:space="preserve">
          <source>Visit a parse tree produced by the &lt;code&gt;whileStmtAlt&lt;/code&gt; labeled alternative in &lt;a href=&quot;groovyparser#loopStatement&quot;&gt;GroovyParser.loopStatement&lt;/a&gt;.</source>
          <target state="translated">访问由所生成的解析树 &lt;code&gt;whileStmtAlt&lt;/code&gt; 在标替代&lt;a href=&quot;groovyparser#loopStatement&quot;&gt;GroovyParser.loopStatement&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="0d1b6b0dcf2eae8ae0c662130dad0c49198bd5d2" translate="yes" xml:space="preserve">
          <source>Visit tree safely, no NPE occurred when the tree is null.</source>
          <target state="translated">安全访问树,当树为空时,没有发生NPE。</target>
        </trans-unit>
        <trans-unit id="c909c1c780a1370ad7d8af0872b2d6635e819732" translate="yes" xml:space="preserve">
          <source>Visitor</source>
          <target state="translated">Visitor</target>
        </trans-unit>
        <trans-unit id="dc01d71e8557512caf8b75f9446c6c1431ec5f65" translate="yes" xml:space="preserve">
          <source>Visitor to produce several optimizations:</source>
          <target state="translated">游客要产生几个优化。</target>
        </trans-unit>
        <trans-unit id="8b838494cdcb4c191fef59a443f0bd1c7b3eb8a9" translate="yes" xml:space="preserve">
          <source>Visitor to resolve Types and convert VariableExpression to ClassExpressions if needed. The ResolveVisitor will try to find the Class for a ClassExpression and prints an error if it fails to do so. Constructions like C[], foo as C, (C) foo will force creation of a ClassExpression for C</source>
          <target state="translated">访问者来解析类型,并在需要时将VariableExpression转换为ClassExpressions。ResolveVisitor将尝试为ClassExpression查找Class,如果未能找到,则会打印一个错误。像C[]、foo作为C、(C)foo这样的构造将强制为C创建一个ClassExpression。</target>
        </trans-unit>
        <trans-unit id="fa343d48dd96f2251c5a70b4bc81878a60f5287d" translate="yes" xml:space="preserve">
          <source>Visitor to resolve constants and method calls from static imports.</source>
          <target state="translated">游客从静态导入中解析常量和方法调用。</target>
        </trans-unit>
        <trans-unit id="c92e59bebad73313756158727abdc0939e947870" translate="yes" xml:space="preserve">
          <source>Visitor to resolve constants in annotation definitions.</source>
          <target state="translated">游客在注释定义中解析常量。</target>
        </trans-unit>
        <trans-unit id="115492d1ac7461b08463909139f69e8671ddde84" translate="yes" xml:space="preserve">
          <source>Visits a class literal.</source>
          <target state="translated">访问一个类的文字。</target>
        </trans-unit>
        <trans-unit id="7cf2e7ebf11b15474a304edc128f1ccaeb79c7d1" translate="yes" xml:space="preserve">
          <source>Visits a class literal. If the type of the classnode is a primitive type, the generated bytecode will be a GETSTATIC Integer.TYPE. If the classnode is not a primitive type, we will generate a LDC instruction.</source>
          <target state="translated">访问一个类的文字。如果classnode的类型是基元类型,生成的字节码将是一个GETSTATIC Integer.TYPE。如果classnode的类型不是基元类型,我们将生成一条LDC指令。</target>
        </trans-unit>
        <trans-unit id="485f0bf61a62b198e2ea673bc86fceb0021f3c2e" translate="yes" xml:space="preserve">
          <source>Visits a method call target, to infer the type.</source>
          <target state="translated">访问方法调用目标,推断类型。</target>
        </trans-unit>
        <trans-unit id="91c6a2a54b158701d8352c81de6551af045c9b87" translate="yes" xml:space="preserve">
          <source>Visits a method call target, to infer the type. Don't report errors right away, that will be done by a later visitMethod call.</source>
          <target state="translated">访问一个方法调用目标,以推断其类型。不要立即报告错误,这将由稍后的 visitMethod 调用来完成。</target>
        </trans-unit>
        <trans-unit id="c15f2e9dc4559c51d2a674a0e26173bda5a36b8f" translate="yes" xml:space="preserve">
          <source>Visual representation of the last example above:</source>
          <target state="translated">以上最后一个例子的直观表现。</target>
        </trans-unit>
        <trans-unit id="429892d1f5e4de38079ccd855d748ffd3ac1f577" translate="yes" xml:space="preserve">
          <source>WARNING: Don't make n too large.</source>
          <target state="translated">警告:不要让n太大。</target>
        </trans-unit>
        <trans-unit id="fa03b95c814633818a3f2b0a24a718594d430d31" translate="yes" xml:space="preserve">
          <source>WARNING: Don't make n too large. Recall that the number of permutations is n! which can be very large, even when n is as small as 20 -- 20! = 2,432,902,008,176,640,000 and 21! is too big to fit into a Java long, which is why we use BigInteger instead.</source>
          <target state="translated">警告:不要让n太大。回想一下,排列组合的数量是n!,即使n小到20,也可能非常大--20!=2,432,902,008,176,640,000,而21!太大,无法装入一个Java长,这就是为什么我们使用BigInteger来代替。</target>
        </trans-unit>
        <trans-unit id="01cf536b76401a5e00e152a763173a69fc288e79" translate="yes" xml:space="preserve">
          <source>WARNING: For the Python style with class-name-matching pattern, the pattern should be chosen as to avoid matching method names if possible. If following Java/Groovy naming conventions, class names (contrary to method names) start with an uppercase letter. In this case &lt;code&gt;pattern=&quot;[A-Z].*&quot;&lt;/code&gt; (see &lt;a href=&quot;https://docs.oracle.com/javase/8/docs/api/java/util/regex/Pattern.html&quot;&gt;Pattern&lt;/a&gt; for supported Java pattern syntax) is the recommended pattern to allow all classes to be created without requiring a new keyword. Using a pattern that also matches method names (e.g. &quot;.+&quot;, &quot;.*&quot; or &quot;[a-zA-Z].*&quot;) might negatively impact build performance, since the Groovy compiler will have to match every class in context against any potential constructor call.</source>
          <target state="translated">警告：对于具有类名匹配模式的Python样式，应选择该模式以避免可能的方法名称匹配。如果遵循Java / Groovy命名约定，则类名（与方法名相反）以大写字母开头。在这种情况下，建议使用 &lt;code&gt;pattern=&quot;[A-Z].*&quot;&lt;/code&gt; （有关支持的Java模式语法，请参见&lt;a href=&quot;https://docs.oracle.com/javase/8/docs/api/java/util/regex/Pattern.html&quot;&gt;模式&lt;/a&gt;），以允许无需创建新关键字即可创建所有类。使用也与方法名称匹配的模式（例如&amp;ldquo;。+&amp;rdquo;，&amp;ldquo;。*&amp;rdquo;或&amp;ldquo; [a-zA-Z]。*&amp;rdquo;）可能会对构建性能产生负面影响，因为Groovy编译器必须在上下文中匹配每个类反对任何潜在的构造函数调用。</target>
        </trans-unit>
        <trans-unit id="66f7ee7293b7e46d6814b5536e2d3441339d61bf" translate="yes" xml:space="preserve">
          <source>WARNING: This class is for internal use only! We use this class to store information about if a default MetaClass is used for certain primitives.</source>
          <target state="translated">警告:该类仅供内部使用!我们使用该类来存储有关某些基元是否使用默认 MetaClass 的信息。我们使用该类来存储有关某些基元是否使用默认 MetaClass 的信息。</target>
        </trans-unit>
        <trans-unit id="11647799dd42e642f8d8d7c2de51445604fb7fa8" translate="yes" xml:space="preserve">
          <source>WARNING: This implementation of ProxyMetaClass is NOT thread-safe and hence should only be used for as a per-instance MetaClass running in a single thread. Do not place this MetaClass in the MetaClassRegistry as it will result in unpredictable behaviour</source>
          <target state="translated">警告:ProxyMetaClass的这个实现不是线程安全的,因此只能作为每个实例的MetaClass在单线程中运行。不要将该MetaClass放置在MetaClassRegistry中,因为它将导致不可预测的行为。</target>
        </trans-unit>
        <trans-unit id="042a3375575e982623fb464acebead4f0a8c8662" translate="yes" xml:space="preserve">
          <source>WARNING: this compilation is not synchronized</source>
          <target state="translated">警告:此汇编不同步。</target>
        </trans-unit>
        <trans-unit id="0622fa6f890900e6d4a1c7713b76bfddf5fc2f8c" translate="yes" xml:space="preserve">
          <source>Wait for the process to finish during a certain amount of time, otherwise stops the process.</source>
          <target state="translated">在一定时间内等待进程结束,否则停止进程。</target>
        </trans-unit>
        <trans-unit id="aad668a4d7ecead3a6b33d9af2fc546f674e4b29" translate="yes" xml:space="preserve">
          <source>Walks the AST and collects references to annotations that are annotated themselves by &lt;a href=&quot;groovyasttransformation&quot;&gt;GroovyASTTransformation&lt;/a&gt;. Each such annotation is added.</source>
          <target state="translated">&lt;a href=&quot;groovyasttransformation&quot;&gt;遍历&lt;/a&gt;AST并收集对GroovyASTTransformation自己注释的注释的引用。每个这样的注释都被添加。</target>
        </trans-unit>
        <trans-unit id="faeac8ce2363a5449dd093289770b9ea3a36992a" translate="yes" xml:space="preserve">
          <source>Warning: this method does not choose properly if multiple methods with the same distance are encountered</source>
          <target state="translated">警告:如果遇到多个相同距离的方法,本方法不能正确选择。</target>
        </trans-unit>
        <trans-unit id="a3fbc34363c1b282cb2a05e33b15897fd75f577d" translate="yes" xml:space="preserve">
          <source>WarningMessages collected during processing</source>
          <target state="translated">处理过程中收集的警告信息</target>
        </trans-unit>
        <trans-unit id="35e616144353150221815823cd693315fe34a539" translate="yes" xml:space="preserve">
          <source>We can also access stored functions with scalar return values where the return value will be treated as an OUT parameter. Here are examples for various databases for creating such a procedure:</source>
          <target state="translated">我们还可以访问带有标量返回值的存储函数,其中返回值将被视为OUT参数。下面是各种数据库创建这种存储过程的例子。</target>
        </trans-unit>
        <trans-unit id="93ca7454ee1ceff47bc9a7007384ce2feef0a8a2" translate="yes" xml:space="preserve">
          <source>We can also be a little more dynamic and not require the CollegeStudent class to be defined at all, e.g.:</source>
          <target state="translated">我们也可以更动态一点,完全不需要定义CollegeStudent类,例如:。</target>
        </trans-unit>
        <trans-unit id="846a65925494d661a00c1c1b53f021c94ae30c85" translate="yes" xml:space="preserve">
          <source>We can mimic a form of multiple inheritance as follows:</source>
          <target state="translated">我们可以模仿一种多继承的形式,如下。</target>
        </trans-unit>
        <trans-unit id="08f4ea41638986ed3b94e402ee85abf08b05ac7f" translate="yes" xml:space="preserve">
          <source>We don't want to return the node as created in &lt;a href=&quot;#createNode(java.lang.Object,%20java.util.Map,%20java.lang.Object)&quot;&gt;createNode(Object, Map, Object)&lt;/a&gt; but the one made ready by &lt;a href=&quot;#nodeCompleted(java.lang.Object,%20java.lang.Object)&quot;&gt;nodeCompleted(Object, Object)&lt;/a&gt;</source>
          <target state="translated">我们不想返回在&lt;a href=&quot;#createNode(java.lang.Object,%20java.util.Map,%20java.lang.Object)&quot;&gt;createNode（Object，Map，Object）中&lt;/a&gt;创建的节点，而是由&lt;a href=&quot;#nodeCompleted(java.lang.Object,%20java.lang.Object)&quot;&gt;nodeCompleted（Object，Object）&lt;/a&gt;准备的节点</target>
        </trans-unit>
        <trans-unit id="d9e48aa40dde42f72149ca3fa6c832656fbffdb5" translate="yes" xml:space="preserve">
          <source>We have an AST subclass so we can track source information. Very odd that ANTLR doesn't do this by default.</source>
          <target state="translated">我们有一个AST子类,所以我们可以跟踪源信息。非常奇怪的是,ANTLR默认不这样做。</target>
        </trans-unit>
        <trans-unit id="f64c03ed992234fa8e1221edf671b0b102c4fbe4" translate="yes" xml:space="preserve">
          <source>We parameterize the above interface as &lt;code&gt;Function&amp;lt;String, Integer&amp;gt;&lt;/code&gt;, then the abstract method will be</source>
          <target state="translated">我们将上面的接口参数化为 &lt;code&gt;Function&amp;lt;String, Integer&amp;gt;&lt;/code&gt; ，那么抽象方法将是</target>
        </trans-unit>
        <trans-unit id="2d25d3677760a9feed6d167625442ae5e9d3a29c" translate="yes" xml:space="preserve">
          <source>We then curry in the parentClass and stringSectionList arguments so that the StreamingTemplate instance returned from 'createTemplate' internally contains a template closure on the form:</source>
          <target state="translated">然后,我们在parentClass和stringSectionList参数中加入curry,这样从'createTemplate'返回的StreamingTemplate实例内部就包含了表单上的模板闭合。</target>
        </trans-unit>
        <trans-unit id="842bd279acd9aa8d1eff7402851f2156ec40f6fe" translate="yes" xml:space="preserve">
          <source>What this means is largely down to the MetaClass implementation, however the default case would result in an attempt to invoke a JavaBean getter, or if no such getter exists a public field of the instance.</source>
          <target state="translated">这意味着什么在很大程度上取决于MetaClass的实现,然而默认情况下会导致尝试调用一个JavaBean getter,或者如果不存在这样的getter,则调用实例的一个公共字段。</target>
        </trans-unit>
        <trans-unit id="34ee27b62c303b2054a006bbd51b20c05701975c" translate="yes" xml:space="preserve">
          <source>What this means is largely down to the MetaClass implementation, however the default case would result in an attempt to invoke a JavaBean setter, or if no such setter exists to set a public field of the instance.</source>
          <target state="translated">这意味着什么在很大程度上取决于MetaClass的实现,然而默认情况下会导致尝试调用JavaBean的setter,或者如果不存在这样的setter,则设置实例的公共字段。</target>
        </trans-unit>
        <trans-unit id="8f8b51b64510af7f5d2bb0ed2ee795a7c44feaed" translate="yes" xml:space="preserve">
          <source>What this means is largely down to the MetaClass implementation, however the default case would result in an attempt to set a field of the instance.</source>
          <target state="translated">这意味着什么在很大程度上取决于MetaClass的实现,然而默认情况下会导致尝试设置实例的一个字段。</target>
        </trans-unit>
        <trans-unit id="c23e0904add01a28ba3e1a513b98478bd8d1522d" translate="yes" xml:space="preserve">
          <source>What this means is largely down to the MetaClass implementation, however the default case would result in attempt to read a field of the instance.</source>
          <target state="translated">这意味着什么在很大程度上取决于MetaClass的实现,但是默认情况下会导致试图读取实例的一个字段。</target>
        </trans-unit>
        <trans-unit id="c4ee53615d249085a5e208815ccf5250be5afcb6" translate="yes" xml:space="preserve">
          <source>When a class is annotated, all methods, properties, files, inner classes, etc. of the annotated class will be type checked. When a method is annotated, static compilation applies only to items (closures and anonymous inner classes) within the method.</source>
          <target state="translated">当一个类被注解时,被注解类的所有方法、属性、文件、内部类等都将被类型检查。当一个方法被注释时,静态编译只适用于方法中的项目(闭包和匿名内类)。</target>
        </trans-unit>
        <trans-unit id="48d9a4820ca430fa39119888cbba12a08b52523c" translate="yes" xml:space="preserve">
          <source>When annotating a class it indicates that all groovy properties in that class should be bound as though each property had the annotation (even if it already has it explicitly).</source>
          <target state="translated">当对一个类进行注解时,它表示该类中的所有groovy属性都应该被绑定,就好像每个属性都有注解一样(即使它已经显式地有了)。</target>
        </trans-unit>
        <trans-unit id="14137c6ccfe581cd4629101cd66aba67f98cb9c6" translate="yes" xml:space="preserve">
          <source>When annotating a property it indicates that the property should be a constrained property according to the JavaBeans spec, subject to listeners vetoing the property change.</source>
          <target state="translated">当注释一个属性时,它表示根据JavaBeans规范,该属性应该是一个受约束的属性,受监听者否决该属性的改变。</target>
        </trans-unit>
        <trans-unit id="d2179b708b9ffd0262bafb5cb957964d26ff3fce" translate="yes" xml:space="preserve">
          <source>When constant expressions are created, the value is always wrapped to a non primitive type.</source>
          <target state="translated">当创建常量表达式时,值总是被包装成一个非基元类型。</target>
        </trans-unit>
        <trans-unit id="a7c3f960a5f1f1419dd0c7351bf336b2e89fd01a" translate="yes" xml:space="preserve">
          <source>When constant expressions are created, the value is always wrapped to a non primitive type. Some constant expressions are optimized to return primitive types, but not all primitives are handled. This method guarantees to return a similar constant expression but with a primitive type instead of a boxed type.</source>
          <target state="translated">当创建常量表达式时,值总是被封装为非基元类型。一些常量表达式被优化为返回基元类型,但并非所有的基元都会被处理。这个方法保证返回一个类似的常量表达式,但返回的是基元类型而不是框定类型。</target>
        </trans-unit>
        <trans-unit id="c3e27a5f17a7ab190dfa97efcf68f324c2eb71d7" translate="yes" xml:space="preserve">
          <source>When extracting the code for the test, single-line snippets of code without braces within a {&lt;code&gt;@code&lt;/code&gt; ...} tag will have the javadoc &lt;code&gt;code&lt;/code&gt; tag stripped. Similarly, html entities are converted back when extracting code, so &lt;code&gt;&amp;lt;&lt;/code&gt; and &lt;code&gt;&amp;gt;&lt;/code&gt; will be converted to &lt;code&gt;&amp;lt;&lt;/code&gt; and &lt;code&gt;&amp;gt;&lt;/code&gt;.</source>
          <target state="translated">提取测试代码时，{@ &lt;code&gt;@code&lt;/code&gt; ...}标签内没有花括号的单行代码片段将去除javadoc &lt;code&gt;code&lt;/code&gt; 标签。类似地，提取代码时html实体会转换回去，因此 &lt;code&gt;&amp;lt;&lt;/code&gt; 和 &lt;code&gt;&amp;gt;&lt;/code&gt; 将转换为 &lt;code&gt;&amp;lt;&lt;/code&gt; 和 &lt;code&gt;&amp;gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="be09708cb053c7d77b697f3abb6e2c2193508604" translate="yes" xml:space="preserve">
          <source>When instanceof checks are found in the code, we store temporary type information data in the &lt;a href=&quot;typecheckingcontext#temporaryIfBranchTypeInformation&quot;&gt;TypeCheckingContext.temporaryIfBranchTypeInformation&lt;/a&gt; table.</source>
          <target state="translated">当在代码中找到instanceof检查时，我们将临时类型信息数据存储在&lt;a href=&quot;typecheckingcontext#temporaryIfBranchTypeInformation&quot;&gt;TypeCheckingContext.temporaryIfBranchTypeInformation&lt;/a&gt;表中。</target>
        </trans-unit>
        <trans-unit id="9ba5113227fe977542d5e609ad80336059a7a4fa" translate="yes" xml:space="preserve">
          <source>When instanceof checks are found in the code, we store temporary type information data in the &lt;a href=&quot;typecheckingcontext#temporaryIfBranchTypeInformation&quot;&gt;TypeCheckingContext.temporaryIfBranchTypeInformation&lt;/a&gt; table. This method computes the key which must be used to store this type info.</source>
          <target state="translated">当在代码中找到instanceof检查时，我们将临时类型信息数据存储在&lt;a href=&quot;typecheckingcontext#temporaryIfBranchTypeInformation&quot;&gt;TypeCheckingContext.temporaryIfBranchTypeInformation&lt;/a&gt;表中。此方法计算必须用于存储此类型信息的密钥。</target>
        </trans-unit>
        <trans-unit id="0dd44ef2b125c990cff462a563afcd291c80c522" translate="yes" xml:space="preserve">
          <source>When setting the log level of this class to FINEST, all file loading will be logged.</source>
          <target state="translated">当将该类的日志级别设置为FINEST时,所有的文件加载都会被记录下来。</target>
        </trans-unit>
        <trans-unit id="ae9224762c3907245c4f646ef2204c9205c9fa2d" translate="yes" xml:space="preserve">
          <source>When the collector annotation is replaced, whether to check for duplicates between the replacement annotations and existing explicit annotations.</source>
          <target state="translated">当采集器注解被替换时,是否检查替换的注解和现有的显式注解之间是否有重复。</target>
        </trans-unit>
        <trans-unit id="53d5b8739e59a18422de27f026d039dca7ff4024" translate="yes" xml:space="preserve">
          <source>When the collector annotation is replaced, whether to check for duplicates between the replacement annotations and existing explicit annotations. If you use a custom processor, it is up to that processor whether it honors or ignores this parameter. The default processor honors the parameter.</source>
          <target state="translated">当采集器注解被替换时,是否要检查替换的注解和现有的显式注解之间是否有重复。如果您使用自定义处理器,则由该处理器决定是否尊重或忽略该参数。默认的处理器会尊重这个参数。</target>
        </trans-unit>
        <trans-unit id="c7cf59915b40893d989432ecbd85ed8267838ecf" translate="yes" xml:space="preserve">
          <source>When the delegate type is an interface, the &lt;code&gt;deprecated&lt;/code&gt; attribute will be ignored if the owner class implements that interface (i.e. you must set &lt;code&gt;interfaces=false&lt;/code&gt; if you want the &lt;code&gt;deprecated&lt;/code&gt; attribute to be used). Otherwise, the resulting class would not compile anyway without manually adding in any deprecated methods in the interface.</source>
          <target state="translated">当委托类型为接口时，如果所有者类实现该接口，则将忽略 &lt;code&gt;deprecated&lt;/code&gt; 属性（即，如果要 &lt;code&gt;deprecated&lt;/code&gt; 属性，则必须设置 &lt;code&gt;interfaces=false&lt;/code&gt; ）。否则，如果不在接口中手动添加任何不推荐使用的方法，则生成的类将无法编译。</target>
        </trans-unit>
        <trans-unit id="790fbd548672437ec8a5031dbb9def443c511c14" translate="yes" xml:space="preserve">
          <source>When the exceptions are not enough, it might sometimes be useful to view the actual script source generated by the template engine. This would conceptually be equivalent to viewing the .java file generated for a jsp page. The source is not currently very readable and until we get a built in groovy code pretty printer, we will probably continue to opt for compactness rather than readability.</source>
          <target state="translated">当异常情况还不够多的时候,有时可能需要查看模板引擎生成的实际脚本源。这在概念上相当于查看jsp页面生成的.java文件。目前源码的可读性并不高,在得到一个内置的groovy代码漂亮打印机之前,我们可能会继续选择紧凑性而不是可读性。</target>
        </trans-unit>
        <trans-unit id="2693c918b6357fdcafaf657a9d2d78f584021ea6" translate="yes" xml:space="preserve">
          <source>When this task executes, it will recursively scan srcdir and destdir looking for Groovy source files to compile. This task makes its compile decision based on timestamp.</source>
          <target state="translated">当这个任务执行时,它将循环扫描srcdir和destdir,寻找要编译的Groovy源文件。这个任务会根据时间戳做出编译决定。</target>
        </trans-unit>
        <trans-unit id="7a7297f53e49a0f8b3645198b2d9e245327664ba" translate="yes" xml:space="preserve">
          <source>When this task executes, it will recursively scan the dir and look for class files to verify.</source>
          <target state="translated">当这个任务执行时,它将递归扫描dir并寻找类文件进行验证。</target>
        </trans-unit>
        <trans-unit id="4d91123be67790374aa1e5d1158a37d2b96f5b98" translate="yes" xml:space="preserve">
          <source>When using GString SQL queries, allows a variable to be expanded in the Sql string rather than representing an sql parameter.</source>
          <target state="translated">当使用GString SQL查询时,允许在Sql字符串中展开一个变量,而不是代表一个sql参数。</target>
        </trans-unit>
        <trans-unit id="51215a4f333ecdd3998b20cabe9c1427ef7188b5" translate="yes" xml:space="preserve">
          <source>When using the default implementations of MetaClass, methods are only allowed to be added before initialize() is called. In other words you create a new MetaClass, add some methods and then call initialize(). If you attempt to add new methods after initialize() has been called, an error will be thrown. This is to ensure that the MetaClass can operate appropriately in multi-threaded environments as it forces you to do all method additions at the beginning, before using the MetaClass.</source>
          <target state="translated">当使用MetaClass的默认实现时,只允许在调用initialize()之前添加方法。换句话说,你创建一个新的MetaClass,添加一些方法,然后调用initialize()。如果您试图在调用initialize()之后再添加新方法,将抛出一个错误。这是为了确保MetaClass能够在多线程环境下正常运行,因为它迫使你在使用MetaClass之前,在一开始就完成所有方法的添加。</target>
        </trans-unit>
        <trans-unit id="e9e556a9d8d8ee9cf8b56d7196ed8aeb46540226" translate="yes" xml:space="preserve">
          <source>When using the default prefix of &quot;set&quot;, Groovy's normal setters will be replaced by the chained versions. When using a custom prefix, Groovy's unchained setters will still be available for use in the normal unchained fashion. The 'useSetters' annotation attribute can be used for writable properties as per the &lt;code&gt;Builder&lt;/code&gt; transform documentation. The other annotation attributes for the &lt;code&gt;@Builder&lt;/code&gt; transform for configuring the building process aren't applicable for this strategy.</source>
          <target state="translated">当使用默认前缀&amp;ldquo; set&amp;rdquo;时，Groovy的常规设置器将被链接的版本替换。当使用自定义前缀时，Groovy的未链接设置器仍将以常规的未链接方式使用。根据 &lt;code&gt;Builder&lt;/code&gt; 转换文档，&amp;ldquo; useSetters&amp;rdquo;注释属性可用于可写属性。 &lt;code&gt;@Builder&lt;/code&gt; 转换的其他注释属性（用于配置构建过程）不适用于此策略。</target>
        </trans-unit>
        <trans-unit id="d14b580ab39c9a99a7c3e9773fdbc7b19730c279" translate="yes" xml:space="preserve">
          <source>When we call &lt;code&gt;parameterizeSAM&lt;/code&gt; on the ClassNode &lt;code&gt;Function&amp;lt;String, Integer&amp;gt;&lt;/code&gt;, we can get parameter types and return type of the above abstract method, i.e. ClassNode &lt;code&gt;ClassHelper.STRING_TYPE&lt;/code&gt; and &lt;code&gt;ClassHelper.Integer_TYPE&lt;/code&gt;</source>
          <target state="translated">当我们在ClassNode &lt;code&gt;Function&amp;lt;String, Integer&amp;gt;&lt;/code&gt; 上调用 &lt;code&gt;parameterizeSAM&lt;/code&gt; 时，我们可以获取上述抽象方法的参数类型和返回类型，即ClassNode &lt;code&gt;ClassHelper.STRING_TYPE&lt;/code&gt; 和 &lt;code&gt;ClassHelper.Integer_TYPE&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="36ea8d0ef94b2ea3c86b83673c463dd584dc0573" translate="yes" xml:space="preserve">
          <source>Whenever a method using a closure as argument (typically, &quot;with&quot;) is detected, this list is updated with the receiver type of the with method.</source>
          <target state="translated">每当检测到一个使用闭包作为参数(通常是 &quot;with&quot;)的方法时,这个列表就会用with方法的接收方类型更新。</target>
        </trans-unit>
        <trans-unit id="48c52710f5f41d468ebcc78041788476ae465e12" translate="yes" xml:space="preserve">
          <source>Whenever the type checker encounters a method call that targets a method accepting a closure, it will search for the &lt;a href=&quot;closureparams&quot;&gt;ClosureParams&lt;/a&gt; annotation on the &lt;a href=&quot;../../lang/closure&quot;&gt;Closure&lt;/a&gt; argument. If it is found, then it creates an instance of the hint class and calls the &lt;a href=&quot;#getClosureSignatures(org.codehaus.groovy.ast.MethodNode,%20org.codehaus.groovy.control.SourceUnit,%20org.codehaus.groovy.control.CompilationUnit,%20java.lang.String,%20org.codehaus.groovy.ast.ASTNode)&quot;&gt;getClosureSignatures(org.codehaus.groovy.ast.MethodNode, org.codehaus.groovy.control.SourceUnit, org.codehaus.groovy.control.CompilationUnit, String[], org.codehaus.groovy.ast.ASTNode)&lt;/a&gt; method, which will in turn return the list of signatures.</source>
          <target state="translated">每当类型检查器遇到针对接受闭包的方法的方法调用时，它将在&lt;a href=&quot;../../lang/closure&quot;&gt;Closure&lt;/a&gt;参数上搜索&lt;a href=&quot;closureparams&quot;&gt;ClosureParams&lt;/a&gt;批注。如果找到，则创建提示类的实例并调用&lt;a href=&quot;#getClosureSignatures(org.codehaus.groovy.ast.MethodNode,%20org.codehaus.groovy.control.SourceUnit,%20org.codehaus.groovy.control.CompilationUnit,%20java.lang.String,%20org.codehaus.groovy.ast.ASTNode)&quot;&gt;getClosureSignatures（org.codehaus.groovy.ast.MethodNode，org.codehaus.groovy.control.SourceUnit，org.codehaus.groovy.control.CompilationUnit，String []，org.codehaus.groovy.ast.ASTNode）&lt;/a&gt;方法，该方法将依次返回签名列表。</target>
        </trans-unit>
        <trans-unit id="a80fd325a25971e25fd5860150a5571bd16cbadb" translate="yes" xml:space="preserve">
          <source>Where we can get Readers for our source unit</source>
          <target state="translated">我们在哪里可以获得源单元的读卡器?</target>
        </trans-unit>
        <trans-unit id="f1c48344d54a871af4514920b3c45ad4e1f8029b" translate="yes" xml:space="preserve">
          <source>Whether a MetaClass allows mutation is up to the MetaClass itself and considerations of Thread safety need to be taken into account when making a MetaClass mutable</source>
          <target state="translated">一个MetaClass是否允许突变是由MetaClass本身决定的,在使一个MetaClass可突变时,需要考虑到线程的安全性。</target>
        </trans-unit>
        <trans-unit id="a5cac7cacd4b101e695877e9a17bc173fdcc362c" translate="yes" xml:space="preserve">
          <source>Whether ansi support is available</source>
          <target state="translated">是否有安规支持</target>
        </trans-unit>
        <trans-unit id="ce3837b991b6317a280c956678feee16b399e128" translate="yes" xml:space="preserve">
          <source>Whether arguments of the form '&lt;code&gt;@&lt;/code&gt;</source>
          <target state="translated">是否为' &lt;code&gt;@&lt;/code&gt; 形式的参数</target>
        </trans-unit>
        <trans-unit id="6e4354efa1f9babd23c0eae1a94c7e3c909bf8ec" translate="yes" xml:space="preserve">
          <source>Whether empty elements are expanded from &amp;lt;tagName/&amp;gt; to &amp;lt;tagName&amp;gt;&amp;lt;/tagName&amp;gt;.</source>
          <target state="translated">空元素是否从&amp;lt;tagName /&amp;gt;扩展到&amp;lt;tagName&amp;gt; &amp;lt;/ tagName&amp;gt;。</target>
        </trans-unit>
        <trans-unit id="8c69583a20db26944cdd15e2d712ef5ab8965afb" translate="yes" xml:space="preserve">
          <source>Whether ignorable whitespace (e.g. whitespace between elements) is kept (default false).</source>
          <target state="translated">是否保留可忽略的空白(例如元素之间的空白)(默认为false)。</target>
        </trans-unit>
        <trans-unit id="26e0f5207dffb5a024e86d3beddf698d26d44d66" translate="yes" xml:space="preserve">
          <source>Whether ignorable whitespace (e.g. whitespace between elements) is kept (default false). WARNING: this is a global setting. Altering it will affect all DOMCategory usage within the current Java process.</source>
          <target state="translated">是否保留可忽略的空白(例如元素之间的空白)(默认为false)。警告:这是一个全局性的设置,改变它将影响当前Java进程中所有DOMCategory的使用。改变它将影响当前Java进程中所有DOMCategory的使用。</target>
        </trans-unit>
        <trans-unit id="1a7c077c1ff491e2271b1fbcc0d8c555b6b8cc8c" translate="yes" xml:space="preserve">
          <source>Whether or not the methods created should be synchronized at the method level.</source>
          <target state="translated">是否应该在方法层同步创建的方法。</target>
        </trans-unit>
        <trans-unit id="5e58cf6a4b5b7561ea2bf1a0342a0635b0e43b3e" translate="yes" xml:space="preserve">
          <source>Whether output should be appended to or overwrite an existing file.</source>
          <target state="translated">是否应该将输出附加到或覆盖现有文件。</target>
        </trans-unit>
        <trans-unit id="fb301632b05b7d93d74bf3478de5109258836a53" translate="yes" xml:space="preserve">
          <source>Whether output should be appended to or overwrite an existing file. Defaults to false.</source>
          <target state="translated">输出是否应附加到现有文件或覆盖现有文件。默认值为false。</target>
        </trans-unit>
        <trans-unit id="91e02ff9540a8689903c79ececd6b205574f648f" translate="yes" xml:space="preserve">
          <source>Whether stdin, stdout, stderr streams are saved.</source>
          <target state="translated">是否保存stdin、stdout、stderr流。</target>
        </trans-unit>
        <trans-unit id="635bee72462c72cb704dd30a3ebef8919f127f3f" translate="yes" xml:space="preserve">
          <source>Whether text content is trimmed (removing leading and trailing whitespace); default false.</source>
          <target state="translated">是否对文本内容进行修剪(删除前导空格和后导空格);默认为false。</target>
        </trans-unit>
        <trans-unit id="c7a8cc18334271ed0684f047e3a62acec4948035" translate="yes" xml:space="preserve">
          <source>Whether text content is trimmed (removing leading and trailing whitespace); default false. WARNING: this is a global setting. Altering it will affect all DOMCategory usage within the current Java process. It is not recommended that this is altered; instead call the trim() method on the returned text, but the flag is available to support legacy Groovy behavior.</source>
          <target state="translated">是否对文本内容进行修剪(去除前导空格和后导空格);默认为false。警告:这是一个全局性的设置,改变它将影响当前Java进程中所有DOMCategory的使用。改变它将影响当前Java进程中所有DOMCategory的使用。不建议改变它,而是在返回的文本上调用trim()方法,但该标志可用于支持传统的Groovy行为。</target>
        </trans-unit>
        <trans-unit id="9c76f259182087ce1950edc41f40cbe76920407b" translate="yes" xml:space="preserve">
          <source>Whether the bytecode version has preview features enabled (JEP 12)</source>
          <target state="translated">字节码版本是否启用了预览功能(JEP 12)</target>
        </trans-unit>
        <trans-unit id="9a47576a058ccb8913772ba6acfcb641b0eeb81c" translate="yes" xml:space="preserve">
          <source>Whether the generated builder should support all properties, including those with names that are considered internal.</source>
          <target state="translated">生成的生成器是否应该支持所有属性,包括那些名字被认为是内部的属性。</target>
        </trans-unit>
        <trans-unit id="2686867e06febea2b74c5e9099491e71a22e607d" translate="yes" xml:space="preserve">
          <source>Whether the method was called in a static way, i.e. on a class rather than an object.</source>
          <target state="translated">该方法是否是以静态方式调用的,即在一个类而不是对象上调用的。</target>
        </trans-unit>
        <trans-unit id="e2157cb644caa24acb522adfe3e7570317075ee2" translate="yes" xml:space="preserve">
          <source>Whether this option can have an optional argument.</source>
          <target state="translated">这个选项是否可以有一个可选的参数。</target>
        </trans-unit>
        <trans-unit id="c9f176fb404d63e0ec58fa1f9ac436f4b74e2697" translate="yes" xml:space="preserve">
          <source>Whether this option can have an optional argument. Only supported for array-typed arguments to indicate that the array may be empty.</source>
          <target state="translated">这个选项是否可以有一个可选的参数。只支持数组类型的参数,表示数组可能为空。</target>
        </trans-unit>
        <trans-unit id="c37a87563fe6b437927144f1d7cf7cbcdea816cd" translate="yes" xml:space="preserve">
          <source>Whether to always include helper constructors.</source>
          <target state="translated">是否总是包含辅助构造函数。</target>
        </trans-unit>
        <trans-unit id="cab010ea4df9112c407497042f512b4081ff61e1" translate="yes" xml:space="preserve">
          <source>Whether to always include helper constructors. Currently only supported by InitializerStrategy. By default, the InitializerStrategy only adds a needed helper tuple constructor if no &lt;code&gt;@TupleConstructor&lt;/code&gt; annotations are present. If such annotations are present, it is assumed they will provide the helper constructor that this strategy needs. If made true, the helper constructor will be generated and it is up to you to make sure this doesn't conflict with any other generated constructors.</source>
          <target state="translated">是否始终包含辅助构造函数。当前仅由InitializerStrategy支持。默认情况下，如果不存在 &lt;code&gt;@TupleConstructor&lt;/code&gt; 批注，则InitializerStrategy仅添加所需的辅助元组构造函数。如果存在此类注释，则假定它们将提供此策略所需的帮助程序构造函数。如果设置为true，将生成helper构造函数，您将确保与其他任何生成的构造函数不冲突。</target>
        </trans-unit>
        <trans-unit id="009a574c0af6a9a0dafd5145f7836e20199fca44" translate="yes" xml:space="preserve">
          <source>Whether to apply the delegate pattern to all methods, including those with names that are considered internal.</source>
          <target state="translated">是否将委托模式应用于所有方法,包括那些名称被认为是内部方法的方法。</target>
        </trans-unit>
        <trans-unit id="ac65eb26a58ded5f4e1660389a09faae716ed795" translate="yes" xml:space="preserve">
          <source>Whether to apply the delegate pattern to deprecated methods; to avoid compilation errors, this is ignored if the type of the delegate target is an interface and &lt;code&gt;interfaces=true&lt;/code&gt;.</source>
          <target state="translated">是否将委托模式应用于不推荐使用的方法；为了避免编译错误，如果委托目标的类型是interface并且 &lt;code&gt;interfaces=true&lt;/code&gt; ，则将忽略此错误。</target>
        </trans-unit>
        <trans-unit id="4799bf20eb66610946c709080bca3f7dca67294f" translate="yes" xml:space="preserve">
          <source>Whether to cache hashCode calculations.</source>
          <target state="translated">是否要缓存哈希码的计算结果。</target>
        </trans-unit>
        <trans-unit id="2615a140868ccfc2f07a8c6dd5b926867951f1a9" translate="yes" xml:space="preserve">
          <source>Whether to cache hashCode calculations. You should only set this to true if you know the object is immutable (or technically mutable but never changed).</source>
          <target state="translated">是否要缓存hashCode的计算。只有当你知道对象是不可变的(或者技术上是可变的,但永远不会改变)时,你才应该将其设置为true。</target>
        </trans-unit>
        <trans-unit id="410b9ad1a2a3a528e7e455abdfe304228c5e2c94" translate="yes" xml:space="preserve">
          <source>Whether to cache toString() calculations.</source>
          <target state="translated">是否缓存toString()计算结果。</target>
        </trans-unit>
        <trans-unit id="41a70a8c446e293e10be75a9e4bd033effd4209d" translate="yes" xml:space="preserve">
          <source>Whether to cache toString() calculations. You should only set this to true if you know the object is immutable (or technically mutable but never changed).</source>
          <target state="translated">是否要缓存toString()计算。只有当你知道对象是不可变的(或者技术上是可变的,但永远不会改变)时,你才应该将其设置为true。</target>
        </trans-unit>
        <trans-unit id="0729418f73a148560fc29acc0c304a7f9d4bf0f9" translate="yes" xml:space="preserve">
          <source>Whether to carry over annotations from the methods of the delegate to your delegating method.</source>
          <target state="translated">是否将委托方法中的注解带入你的委托方法中。</target>
        </trans-unit>
        <trans-unit id="f577e2da57ad358875b56e322fbc8bac4ceb4909" translate="yes" xml:space="preserve">
          <source>Whether to carry over annotations from the methods of the delegate to your delegating method. Currently Closure annotation members are not supported.</source>
          <target state="translated">是否将委托人的方法中的注解带入你的委托方法中。目前不支持Closure注解成员。</target>
        </trans-unit>
        <trans-unit id="7f8598887ff0bbb5222973f6e6c11d1e4ae73e6a" translate="yes" xml:space="preserve">
          <source>Whether to carry over annotations from the parameters of delegate methods to your delegating method.</source>
          <target state="translated">是否将委托方法参数中的注解带入到你的委托方法中。</target>
        </trans-unit>
        <trans-unit id="4ac2f36d68b0882eae46787a9b2906597e62b832" translate="yes" xml:space="preserve">
          <source>Whether to carry over annotations from the parameters of delegate methods to your delegating method. Currently Closure annotation members are not supported.</source>
          <target state="translated">是否将委托方法参数中的注解带入到你的委托方法中。目前不支持Closure注解成员。</target>
        </trans-unit>
        <trans-unit id="25d5e6b1bbf41735a5a39986bbce443f939e5a6c" translate="yes" xml:space="preserve">
          <source>Whether to carry over annotations on the copied constructors.</source>
          <target state="translated">是否在复制的构造函数上进行注解。</target>
        </trans-unit>
        <trans-unit id="43b5d7e71013dc953e4f6e5eb64f390a304fbd5f" translate="yes" xml:space="preserve">
          <source>Whether to carry over annotations on the copied constructors. Currently Closure annotation members are not supported.</source>
          <target state="translated">是否在复制的构造函数上携带注解。目前不支持Closure注解成员。</target>
        </trans-unit>
        <trans-unit id="12c733e40e1c9fcaccce5a7161f0bde0498c8cfe" translate="yes" xml:space="preserve">
          <source>Whether to carry over parameter annotations on the copied constructors.</source>
          <target state="translated">是否在复制的构造函数上携带参数注解。</target>
        </trans-unit>
        <trans-unit id="0597e28613a0810cd63bcb92e095c906e4a93ba7" translate="yes" xml:space="preserve">
          <source>Whether to carry over parameter annotations on the copied constructors. Currently Closure annotation members are not supported.</source>
          <target state="translated">是否在复制的构造函数上携带参数注解。目前不支持Closure注解成员。</target>
        </trans-unit>
        <trans-unit id="080f289b359f368abde929003ee3c59b5cf37973" translate="yes" xml:space="preserve">
          <source>Whether to include all fields and/or properties in equals and hashCode calculations, including those with names that are considered internal.</source>
          <target state="translated">是否将所有字段和/或属性包含在等式和哈希码计算中,包括那些名称被认为是内部的字段和/或属性。</target>
        </trans-unit>
        <trans-unit id="ba946cba51bff700e3d7c8ae58de552233cb06d9" translate="yes" xml:space="preserve">
          <source>Whether to include all fields and/or properties in the comparison algorithm, including those with names that are considered internal.</source>
          <target state="translated">是否将所有字段和/或属性包括在比较算法中,包括那些名字被认为是内部的字段和/或属性。</target>
        </trans-unit>
        <trans-unit id="a888b559d5c7ee3a9ea2ec3d6ff56f73c00ec343" translate="yes" xml:space="preserve">
          <source>Whether to include all fields and/or properties in the generated toString, including those with names that are considered internal.</source>
          <target state="translated">是否将所有的字段和/或属性包含在生成的toString中,包括那些被认为是内部的名称。</target>
        </trans-unit>
        <trans-unit id="f0e550c675820d7c187825e93a7a9269b0643fa1" translate="yes" xml:space="preserve">
          <source>Whether to include all fields and/or properties within the constructor, including those with names that are considered internal.</source>
          <target state="translated">是否在构造函数中包含所有字段和/或属性,包括那些名字被认为是内部的字段和/或属性。</target>
        </trans-unit>
        <trans-unit id="0bdf8381b60e979184861901b719fcb40fb87a89" translate="yes" xml:space="preserve">
          <source>Whether to include all properties (as per the JavaBean spec) in the comparison algorithm.</source>
          <target state="translated">是否在比较算法中包含所有属性(根据JavaBean规范)。</target>
        </trans-unit>
        <trans-unit id="a49444c55dcdeb12b816c93b01fe3bf2b85c4205" translate="yes" xml:space="preserve">
          <source>Whether to include all properties (as per the JavaBean spec) in the comparison algorithm. Groovy recognizes any field-like definitions with no explicit visibility as property definitions and always includes them in the comparison algorithm. Groovy also treats any explicitly created getXxx() or isYyy() methods as property getters as per the JavaBean specification. Set this flag to false explicitly exclude such properties. JavaBean properties come after any Groovy properties for a given class (unless 'includes' is used to determine the order).</source>
          <target state="translated">是否在比较算法中包含所有属性(根据JavaBean规范)。Groovy将任何没有显式可见性的类字段定义识别为属性定义,并总是将它们包含在比较算法中。根据JavaBean规范,Groovy还将任何显式创建的getXxx()或isYyy()方法视为属性获取器。将此标志设置为false则明确地排除了这些属性。JavaBean属性在给定类的任何Groovy属性之后(除非使用'includes'来确定顺序)。</target>
        </trans-unit>
        <trans-unit id="1bdb5120f75a9316b35b2fe3e24332a35883a1c5" translate="yes" xml:space="preserve">
          <source>Whether to include all properties (as per the JavaBean spec) in the generated builder.</source>
          <target state="translated">是否在生成的生成器中包含所有属性(根据JavaBean规范)。</target>
        </trans-unit>
        <trans-unit id="36c4c6305770c6c1e09a490f4e49191eae782744" translate="yes" xml:space="preserve">
          <source>Whether to include all properties (as per the JavaBean spec) in the generated builder. Groovy recognizes any field-like definitions with no explicit visibility as property definitions and always includes them in the &lt;code&gt;@Builder&lt;/code&gt; generated classes. Groovy also treats any explicitly created getXxx() or isYyy() methods as property getters as per the JavaBean specification. Old versions of Groovy did not. So set this flag to false for the old behavior or if you want to explicitly exclude such properties. Currently only supported by DefaultStrategy and ExternalStrategy.</source>
          <target state="translated">是否在生成的生成器中包括所有属性（按照JavaBean规范）。 Groovy会将没有明确可见性的任何类似于字段的定义识别为属性定义，并始终将其包含在 &lt;code&gt;@Builder&lt;/code&gt; 生成的类中。 Groovy还按照JavaBean规范将任何显式创建的getXxx（）或isYyy（）方法都视为属性获取器。 Groovy的旧版本没有。因此，对于旧的行为或要显式排除此类属性，请将此标志设置为false。当前仅由DefaultStrategy和ExternalStrategy支持。</target>
        </trans-unit>
        <trans-unit id="d15e3e39cf26fe3bfd6edb95db9c2b35a6f2c395" translate="yes" xml:space="preserve">
          <source>Whether to include all properties (as per the JavaBean spec) in the generated constructor.</source>
          <target state="translated">是否在生成的构造函数中包含所有属性(根据JavaBean规范)。</target>
        </trans-unit>
        <trans-unit id="4c37be046f95e582ebecdb3a9cd60829ea36c229" translate="yes" xml:space="preserve">
          <source>Whether to include all properties (as per the JavaBean spec) in the generated constructor. When true, Groovy treats any explicitly created setXxx() methods as property setters as per the JavaBean specification. JavaBean properties come after any Groovy properties but before any fields for a given class (unless 'includes' is used to determine the order).</source>
          <target state="translated">是否在生成的构造函数中包含所有属性(根据JavaBean规范)。当为 &quot;true &quot;时,Groovy根据JavaBean规范将任何明确创建的setXxx()方法视为属性设置器。JavaBean属性在任何Groovy属性之后,但在给定类的任何字段之前(除非使用'includes'来确定顺序)。</target>
        </trans-unit>
        <trans-unit id="e32ea0a1287af162b4ed136d08fa55a6762298dc" translate="yes" xml:space="preserve">
          <source>Whether to include all properties (as per the JavaBean spec) in the generated toString.</source>
          <target state="translated">是否在生成的toString中包含所有属性(根据JavaBean规范)。</target>
        </trans-unit>
        <trans-unit id="20e24a1007c6de8c0f3f3cbd955bdfdab189f0a0" translate="yes" xml:space="preserve">
          <source>Whether to include all properties (as per the JavaBean spec) in the generated toString. Groovy recognizes any field-like definitions with no explicit visibility as property definitions and always includes them in the &lt;code&gt;@ToString&lt;/code&gt; generated toString (as well as auto-generating the appropriate getters and setters). Groovy also treats any explicitly created getXxx() or isYyy() methods as property getters as per the JavaBean specification. Old versions of Groovy did not. So set this flag to false for the old behavior or if you want to explicitly exclude such properties. JavaBean properties come after any Groovy properties but before any fields for a given class (unless 'includes' is used to determine the order).</source>
          <target state="translated">是否在生成的toString中包括所有属性（按照JavaBean规范）。 Groovy会将没有明确可见性的任何类似于字段的定义识别为属性定义，并始终将其包含在 &lt;code&gt;@ToString&lt;/code&gt; 生成的toString中（以及自动生成适当的getter和setter）。 Groovy还按照JavaBean规范将任何显式创建的getXxx（）或isYyy（）方法都视为属性获取器。 Groovy的旧版本没有。因此，对于旧的行为或要显式排除此类属性，请将此标志设置为false。 JavaBean属性位于任何Groovy属性之后，但位于给定类的任何字段之前（除非使用&amp;ldquo; includes&amp;rdquo;确定顺序）。</target>
        </trans-unit>
        <trans-unit id="c086436c6f41156b227b1d4c2ea763fc7e27f6f4" translate="yes" xml:space="preserve">
          <source>Whether to include names of properties/fields in the generated toString.</source>
          <target state="translated">是否在生成的toString中包含属性/字段名。</target>
        </trans-unit>
        <trans-unit id="9ebab2d85a0c3f36404d92e55378701e03dc5ca0" translate="yes" xml:space="preserve">
          <source>Whether to include static properties in the constructor.</source>
          <target state="translated">是否在构造函数中包含静态属性。</target>
        </trans-unit>
        <trans-unit id="08dd071e87c40a5a0f1dcc997eaad6742cb93d88" translate="yes" xml:space="preserve">
          <source>Whether to include super in equals and hashCode calculations.</source>
          <target state="translated">是否在等式和hashCode计算中包含super。</target>
        </trans-unit>
        <trans-unit id="f69d5b64222a378fa112107c391dbea1a1224784" translate="yes" xml:space="preserve">
          <source>Whether to include super properties in the comparison algorithm.</source>
          <target state="translated">是否在比较算法中加入超级属性。</target>
        </trans-unit>
        <trans-unit id="38ae41eba607fc983787c70504dffd27f8a762e3" translate="yes" xml:space="preserve">
          <source>Whether to include super properties in the comparison algorithm. Groovy properties and potentially JavaBean properties (in that order) from superclasses come before the members from a subclass (unless 'includes' is used to determine the order).</source>
          <target state="translated">是否在比较算法中包含超级属性。来自超级类的Groovy属性和潜在的JavaBean属性(按顺序排列)排在来自子类的成员之前(除非使用 &quot;包括 &quot;来确定顺序)。</target>
        </trans-unit>
        <trans-unit id="cba0b093d64209fda0e29a5af6c1aeb87c51b3a6" translate="yes" xml:space="preserve">
          <source>Whether to include super properties in the generated toString.</source>
          <target state="translated">是否在生成的toString中包含超级属性。</target>
        </trans-unit>
        <trans-unit id="9d79025cb1a3cc055f307c6cde39ffa8ac00a4e8" translate="yes" xml:space="preserve">
          <source>Whether to include super properties in the generated toString. Groovy properties, JavaBean properties and fields (in that order) from superclasses come after the members from a subclass (unless 'includes' is used to determine the order).</source>
          <target state="translated">是否在生成的toString中包含超级属性。来自超级类的Groovy属性、JavaBean属性和字段(按顺序)排在子类的成员之后(除非使用'includes'来确定顺序)。</target>
        </trans-unit>
        <trans-unit id="eef4265d08c97d24b340bde866d1b3f36ce5b8fa" translate="yes" xml:space="preserve">
          <source>Whether to include the fully-qualified class name (i.e. including the package) or just the simple class name in the generated toString.</source>
          <target state="translated">在生成的toString中是包含完全限定的类名(即包括包)还是只包含简单的类名。</target>
        </trans-unit>
        <trans-unit id="2ac45c3ecd10278ef61b98741fbdc6fcce5aa7ab" translate="yes" xml:space="preserve">
          <source>Whether to include the toString() of super in the generated toString.</source>
          <target state="translated">是否将super的toString()包含在生成的toString中。</target>
        </trans-unit>
        <trans-unit id="f3c87dd365d306011d72186dd3d52b8d710d48b0" translate="yes" xml:space="preserve">
          <source>Whether to try to add null checking to generated methods/constructors such as those added by other transforms.</source>
          <target state="translated">是否尝试为生成的方法/构造函数添加空检查,比如那些由其他变换添加的方法。</target>
        </trans-unit>
        <trans-unit id="b2fb5171631c755d6b4fb113d85763aceee1c007" translate="yes" xml:space="preserve">
          <source>Whether to try to add null checking to generated methods/constructors such as those added by other transforms. Using this option may lead to surprising results, e.g. it will only apply to methods/constructors added prior to when the &lt;code&gt;NullCheck&lt;/code&gt; transformation is processed. Null checking is not enabled for constructors containing generated bytecode or generated constructors with calls to this(...) or super(...) regardless of this flag.</source>
          <target state="translated">是否尝试向生成的方法/构造函数（如其他转换添加的方法/构造函数）添加空检查。使用此选项可能会导致令人惊讶的结果，例如，它仅适用于在处理 &lt;code&gt;NullCheck&lt;/code&gt; 转换之前添加的方法/构造函数。对于包含生成的字节码的构造函数或具有对this（...）或super（...）的调用的生成的构造函数，无论此标志如何，都不会启用空检查。</target>
        </trans-unit>
        <trans-unit id="bba6f6430d507d859c79b497ee63ad92dcc8b313" translate="yes" xml:space="preserve">
          <source>Whether using the tab key indents the selected lines of code</source>
          <target state="translated">是否使用Tab键缩进选定的代码行。</target>
        </trans-unit>
        <trans-unit id="3809365c6a2d8d5ca0d35afc5c87cbae789823c6" translate="yes" xml:space="preserve">
          <source>Which can be used as follows:</source>
          <target state="translated">可用于以下方面:</target>
        </trans-unit>
        <trans-unit id="6f18c1ef7c6f0bbc2365d093087b069ca57301d8" translate="yes" xml:space="preserve">
          <source>Which has the following usage message:</source>
          <target state="translated">其中有以下使用信息。</target>
        </trans-unit>
        <trans-unit id="0561ec37fd346989d2cb7d7e0224955290645f7a" translate="yes" xml:space="preserve">
          <source>Which outputs these lines when run:</source>
          <target state="translated">运行时输出这些线路。</target>
        </trans-unit>
        <trans-unit id="ee75291399465af69411d08b1d380d5c35edef03" translate="yes" xml:space="preserve">
          <source>Which outputs this line when run:</source>
          <target state="translated">运行时输出这一行。</target>
        </trans-unit>
        <trans-unit id="626aef420940f208135252e54dc93f024b115178" translate="yes" xml:space="preserve">
          <source>Which produces the following output:</source>
          <target state="translated">这将产生以下输出。</target>
        </trans-unit>
        <trans-unit id="63b7fe3b15e589e4574746c859273baf93dfe406" translate="yes" xml:space="preserve">
          <source>Which results in the following code being generated (XXXXXX will be replaced with some runtime generated hashCode). Notice the checks and exceptions:</source>
          <target state="translated">这将导致生成以下代码(XXXXX将被一些运行时生成的hashCode替换)。注意检查和异常。</target>
        </trans-unit>
        <trans-unit id="7679321ce7f94c97a68e590b862fc20ae02cd1dd" translate="yes" xml:space="preserve">
          <source>Which results in the following code being generated. Notice the checks and exceptions:</source>
          <target state="translated">这就导致了以下代码的生成。注意检查和异常。</target>
        </trans-unit>
        <trans-unit id="03cf8506703c146751e4441674b6edcae1c3ca11" translate="yes" xml:space="preserve">
          <source>Which results in:</source>
          <target state="translated">其结果是:</target>
        </trans-unit>
        <trans-unit id="9875dfa6b084d6c6a9d4f67faf356e96d003e8a1" translate="yes" xml:space="preserve">
          <source>Which uses the FirstParam.FirstGenericType first generic type of the first argument</source>
          <target state="translated">其中使用FirstParam.FirstGenericType的第一个参数的第一个通用类型。</target>
        </trans-unit>
        <trans-unit id="5ce890b7a5689d483b4015e9d801c1197920e1d2" translate="yes" xml:space="preserve">
          <source>Which will create a class equivalent to the following:</source>
          <target state="translated">这将创建一个相当于以下的类。</target>
        </trans-unit>
        <trans-unit id="41cacac115ee937847eda6208b4f657f44e9c139" translate="yes" xml:space="preserve">
          <source>Which will create a class of the following form:</source>
          <target state="translated">这将创建一个如下形式的类。</target>
        </trans-unit>
        <trans-unit id="19eae023eb1842d12047db4f0a2cde2cdbc5dcad" translate="yes" xml:space="preserve">
          <source>Which will create classes equivalent to the following:</source>
          <target state="translated">这将创建相当于以下的类。</target>
        </trans-unit>
        <trans-unit id="6162866d88d8b256792507d592dc46fd0f976b8c" translate="yes" xml:space="preserve">
          <source>Which will have this output:</source>
          <target state="translated">其中会有这样的输出。</target>
        </trans-unit>
        <trans-unit id="0b31aa5ebb02a0ebb46f65121cb013496c197774" translate="yes" xml:space="preserve">
          <source>Which will produce something like this:</source>
          <target state="translated">这将产生这样的东西。</target>
        </trans-unit>
        <trans-unit id="2ebbe7d56252e0ba61045697d735783cbc09b561" translate="yes" xml:space="preserve">
          <source>Which will start at the second row and return a maximum of 2 rows. Here's an example result:</source>
          <target state="translated">这将从第二行开始,最多返回2行。下面是一个结果示例。</target>
        </trans-unit>
        <trans-unit id="1b874d5009302a33d51aeb0547b42138a960d985" translate="yes" xml:space="preserve">
          <source>While it isn't required to do so, the benefit of this builder strategy comes in conjunction with static type-checking or static compilation. Typical usage is as follows:</source>
          <target state="translated">虽然不需要这样做,但这种构建策略的好处是与静态类型检查或静态编译相结合。典型的用法如下。</target>
        </trans-unit>
        <trans-unit id="de2f93bc8c637e7066421ebfa8d5ad73cb4b8b8f" translate="yes" xml:space="preserve">
          <source>Wildcard regular expressions are not evaluated or replaced</source>
          <target state="translated">通配符正则表达式不被评估或替换。</target>
        </trans-unit>
        <trans-unit id="efe4dae04a146afa1211dcca09a9ef815fb61a91" translate="yes" xml:space="preserve">
          <source>Will output the following String, without newlines or indentation:</source>
          <target state="translated">将输出以下字符串,没有换行或缩进。</target>
        </trans-unit>
        <trans-unit id="1928758dfbbeef913ed4a54d74eabba75a9d6bbf" translate="yes" xml:space="preserve">
          <source>Will print the following to System.out:</source>
          <target state="translated">将以下内容打印到System.out。</target>
        </trans-unit>
        <trans-unit id="7255e19699d700d637ed37b5b642640e0ebd1eb9" translate="yes" xml:space="preserve">
          <source>Will succeed, because the x and y fields declared in the Test class shadow the variables in the delegate.</source>
          <target state="translated">将会成功,因为在Test类中声明的x和y字段会对委托中的变量产生阴影。</target>
        </trans-unit>
        <trans-unit id="27933e85bdabb80c9e3bc5dca7bd943cd77823e3" translate="yes" xml:space="preserve">
          <source>With AST transformation options:</source>
          <target state="translated">有AST转换选项。</target>
        </trans-unit>
        <trans-unit id="9105aafe1506fc971d2fc7f6d25f3aaabd4e56dc" translate="yes" xml:space="preserve">
          <source>With that being said, viewing the source might still have some value. For this reason the script source is accessible via the template.scriptSource property, i.e.:</source>
          <target state="translated">说到这里,查看源码可能还是有一定价值的。为此,可以通过template.scriptSource属性访问脚本源,即。</target>
        </trans-unit>
        <trans-unit id="3904d3dd93d0b2de4b91b6ce6589993a00fb9156" translate="yes" xml:space="preserve">
          <source>With that type information, the type checker can now infer that the type of</source>
          <target state="translated">有了这些类型信息,类型检查器现在可以推断出该类型为</target>
        </trans-unit>
        <trans-unit id="e04792322262cb9984db42e6143755633e88877f" translate="yes" xml:space="preserve">
          <source>With this resolveStrategy set the closure will attempt to resolve property references and methods to the delegate first then the owner.</source>
          <target state="translated">如果设置了这个resolveStrategy,闭包将尝试先解析委托人的属性引用和方法,然后再解析所有者。</target>
        </trans-unit>
        <trans-unit id="8907281aeba2595dd349c5367d9d93440e019773" translate="yes" xml:space="preserve">
          <source>With this resolveStrategy set the closure will attempt to resolve property references and methods to the delegate first then the owner. For example the following code:</source>
          <target state="translated">设置了这个resolveStrategy后,闭包将尝试先解析属性引用和方法到委托人,然后再解析所有者。例如下面的代码。</target>
        </trans-unit>
        <trans-unit id="1438376f97cf9f91fe3b4994d7e132423dc5389c" translate="yes" xml:space="preserve">
          <source>With this resolveStrategy set the closure will attempt to resolve property references and methods to the owner first, then the delegate (&lt;b&gt;this is the default strategy&lt;/b&gt;).</source>
          <target state="translated">设置了resolvesolveegy后，闭包将尝试首先解析所有者的属性引用和方法，然后再尝试委托（&lt;b&gt;这是默认策略&lt;/b&gt;）。</target>
        </trans-unit>
        <trans-unit id="56934fa2287f23dc1887d8bc8669885405dae129" translate="yes" xml:space="preserve">
          <source>With this resolveStrategy set the closure will attempt to resolve property references and methods to the owner first, then the delegate (&lt;b&gt;this is the default strategy&lt;/b&gt;). For example the following code:</source>
          <target state="translated">设置了resolvesolveegy后，闭包将尝试首先解析所有者的属性引用和方法，然后再尝试委托（&lt;b&gt;这是默认策略&lt;/b&gt;）。例如下面的代码：</target>
        </trans-unit>
        <trans-unit id="7debb47890df6b3afeaeb946acdcc07bf5c6a186" translate="yes" xml:space="preserve">
          <source>With this resolveStrategy set the closure will resolve property references and methods to the delegate only and entirely bypass the owner.</source>
          <target state="translated">如果设置了这个resolveStrategy,闭包将只对委托人的属性引用和方法进行解析,完全绕过所有者。</target>
        </trans-unit>
        <trans-unit id="03ff29c3169f75d6792694aad440c559a9c02b92" translate="yes" xml:space="preserve">
          <source>With this resolveStrategy set the closure will resolve property references and methods to the delegate only and entirely bypass the owner. For example the following code :</source>
          <target state="translated">设置了这个resolveStrategy后,闭包将只解析委托人的属性引用和方法,完全绕过所有者。例如下面的代码。</target>
        </trans-unit>
        <trans-unit id="b9a9ecebabd106198ac6b6acbb16e04a227f6d5b" translate="yes" xml:space="preserve">
          <source>With this resolveStrategy set the closure will resolve property references and methods to the owner only and not call the delegate at all.</source>
          <target state="translated">设置了这个resolveStrategy后,闭包将只对所有者的属性引用和方法进行解析,完全不调用委托人。</target>
        </trans-unit>
        <trans-unit id="adea1ad398a54254f85b2157cd5c1e1de644b7c0" translate="yes" xml:space="preserve">
          <source>With this resolveStrategy set the closure will resolve property references and methods to the owner only and not call the delegate at all. For example the following code :</source>
          <target state="translated">设置了这个resolveStrategy后,闭包将只对所有者的属性引用和方法进行解析,完全不调用委托人。例如下面的代码:</target>
        </trans-unit>
        <trans-unit id="d54f5a2a2699c3908ca1ebfa98f7de4731c709ae" translate="yes" xml:space="preserve">
          <source>With this resolveStrategy set the closure will resolve property references to itself and go through the usual MetaClass look-up process.</source>
          <target state="translated">如果设置了这个resolveStrategy,闭包将解析对自己的属性引用,并通过通常的MetaClass查找过程。</target>
        </trans-unit>
        <trans-unit id="57356a4d4eef33b0e4b71b0b1713c8b74e0cc8ce" translate="yes" xml:space="preserve">
          <source>With this resolveStrategy set the closure will resolve property references to itself and go through the usual MetaClass look-up process. This means that properties and methods are neither resolved from the owner nor the delegate, but only on the closure object itself. This allows the developer to override getProperty using ExpandoMetaClass of the closure itself.</source>
          <target state="translated">设置了这个resolveStrategy后,闭包将解析对自身的属性引用,并通过通常的MetaClass查找过程。这意味着属性和方法既不从所有者也不从委托人那里解析,而只在闭包对象本身上解析。这使得开发者可以使用闭包本身的ExpandoMetaClass来覆盖getProperty。</target>
        </trans-unit>
        <trans-unit id="695bb18bba1699cff42db1abf2a430029a2c5055" translate="yes" xml:space="preserve">
          <source>With this style a user-supplied instance is used. Annotations on that instance's class members (properties and setter methods) indicate how to set options and provide the option details using annotation attributes. It might look like this (again using the earlier 'ls' example):</source>
          <target state="translated">在这种风格下,使用了一个用户提供的实例。在该实例的类成员(属性和setter方法)上的注解指明了如何设置选项,并使用注解属性提供了选项细节。它可能看起来像这样(再次使用前面的'ls'例子)。</target>
        </trans-unit>
        <trans-unit id="9571ec5bc1662e6196d797bbcd7ccf8e80d45861" translate="yes" xml:space="preserve">
          <source>With this style an interface is defined containing an annotated method for each option. It might look like this (following roughly the earlier 'ls' example):</source>
          <target state="translated">用这种风格定义了一个接口,其中包含了每个选项的注解方法。它可能是这样的(大致沿用前面的'ls'例子)。</target>
        </trans-unit>
        <trans-unit id="5dd7e6ca10df7749f47b592d753d130e63bea364" translate="yes" xml:space="preserve">
          <source>Works exactly like ResourceBundle.getBundle(String).</source>
          <target state="translated">和ResourceBundle.getBundle(String)的工作原理一样。</target>
        </trans-unit>
        <trans-unit id="1403e99f2ef010fc0b0ff0bd6b58f29020ab683f" translate="yes" xml:space="preserve">
          <source>Works exactly like ResourceBundle.getBundle(String). This is needed because the java method depends on a particular stack configuration that is not guaranteed in Groovy when calling the Java method.</source>
          <target state="translated">与ResourceBundle.getBundle(String)的工作原理完全相同。之所以需要这样做,是因为java方法依赖于特定的堆栈配置,而在Groovy中调用Java方法时,该配置是没有保证的。</target>
        </trans-unit>
        <trans-unit id="73cc18526841bafb32ba069fe6f22dded21e5d4a" translate="yes" xml:space="preserve">
          <source>Works exactly like ResourceBundle.getBundle(String, Locale).</source>
          <target state="translated">与ResourceBundle.getBundle(String,Locale)的工作原理完全相同。</target>
        </trans-unit>
        <trans-unit id="4a21b7b9be36b7c51651c4162605674a9ee56206" translate="yes" xml:space="preserve">
          <source>Works exactly like ResourceBundle.getBundle(String, Locale). This is needed because the java method depends on a particular stack configuration that is not guaranteed in Groovy when calling the Java method.</source>
          <target state="translated">与ResourceBundle.getBundle(String,Locale)的工作原理完全相同。之所以需要这样做,是因为java方法依赖于特定的堆栈配置,而在Groovy中调用Java方法时,该配置是没有保证的。</target>
        </trans-unit>
        <trans-unit id="787cc64e1f8635c87e5a3248ea198b61b562d80c" translate="yes" xml:space="preserve">
          <source>Wrap the body of a method in a while loop, nested in a try-catch. This is the first step in making a tail recursive method iterative. There are two ways to invoke the next iteration step:</source>
          <target state="translated">将方法的主体包裹在一个while循环中,嵌套在try-catch中。这是使尾部递归方法迭代的第一步。有两种方法可以调用下一个迭代步骤。</target>
        </trans-unit>
        <trans-unit id="d73243bcf1cdf2c526b8a8f494af27bf5130b0b9" translate="yes" xml:space="preserve">
          <source>Wrapper for a method for a property get or set. WARNING: This class is for internal use only, don't use it for your APIs</source>
          <target state="translated">获取或设置属性的方法的封装器。警告:该类仅供内部使用,请不要将其用于你的API。</target>
        </trans-unit>
        <trans-unit id="ca23c0eda8265dc000bc651f70ee0b822b728803" translate="yes" xml:space="preserve">
          <source>Wrapper for a method realizing the property get.</source>
          <target state="translated">实现属性get的方法的封装器。</target>
        </trans-unit>
        <trans-unit id="44b25337e022f4a7d30413608a5d29b372b88d9a" translate="yes" xml:space="preserve">
          <source>Wrapper for a method realizing the property get. WARNING: This class is for internal use only, don't use it for your APIs</source>
          <target state="translated">实现属性get的方法的封装器。警告:该类仅供内部使用,请不要将其用于你的API。</target>
        </trans-unit>
        <trans-unit id="11471859253e333ddd95860e78a5e039d5c90e2b" translate="yes" xml:space="preserve">
          <source>Wrapper for a method realizing the property getter.</source>
          <target state="translated">实现属性获取器的方法的封装器。</target>
        </trans-unit>
        <trans-unit id="dc467bdb7818d2b61af336c3be3e888badf635b8" translate="yes" xml:space="preserve">
          <source>Wrapper for a method realizing the property getter. WARNING: This class is for internal use only, don't use it for your APIs</source>
          <target state="translated">一个实现属性获取器的方法的封装器。警告:该类仅供内部使用,不要用于你的API。</target>
        </trans-unit>
        <trans-unit id="3d88415cebb3435b5d7aed18cdcee3790b658f00" translate="yes" xml:space="preserve">
          <source>Wraps a closure so that it can be used as a prototype for inclusion in layouts.</source>
          <target state="translated">包裹一个闭合,以便它可以作为一个原型包含在布局中。</target>
        </trans-unit>
        <trans-unit id="d108314c8aea2e2fddbcca78857d62636ffe4662" translate="yes" xml:space="preserve">
          <source>Wraps a closure so that it can be used as a prototype for inclusion in layouts. This is useful when you want to use a closure in a model, but that you don't want to render the result of the closure but instead call it as if it was a specification of a template fragment.</source>
          <target state="translated">包裹一个闭包,这样它就可以作为一个原型来包含在布局中。当您想在模型中使用一个闭包,但又不想渲染闭包的结果,而是把它当作模板片段的规范来调用时,这就很有用了。</target>
        </trans-unit>
        <trans-unit id="1410d077651b73f79a1015492a6171adc84b7367" translate="yes" xml:space="preserve">
          <source>Wraps a map using the decorator pattern with a wrapper that intercepts all calls to &lt;code&gt;get(key)&lt;/code&gt;.</source>
          <target state="translated">使用带有包装器的装饰器模式包装地图，该包装器拦截对 &lt;code&gt;get(key)&lt;/code&gt; 的所有调用。</target>
        </trans-unit>
        <trans-unit id="4ff419ef3c8b45be3c79704c564fb5998204d260" translate="yes" xml:space="preserve">
          <source>Wraps a map using the decorator pattern with a wrapper that intercepts all calls to &lt;code&gt;get(key)&lt;/code&gt;. If an unknown key is found, a default value will be stored into the Map before being returned. The default value stored will be the result of calling the supplied Closure with the key as the parameter to the Closure. Example usage:</source>
          <target state="translated">使用带有包装器的装饰器模式包装地图，该包装器拦截对 &lt;code&gt;get(key)&lt;/code&gt; 的所有调用。如果找到未知密钥，则默认值将在返回之前存储到Map中。存储的默认值将是使用键作为Closure的参数调用提供的Closure的结果。用法示例：</target>
        </trans-unit>
        <trans-unit id="fd51dadd24d8e03f552460a6599ddfbe9d846046" translate="yes" xml:space="preserve">
          <source>Wraps up any pending operations for the current phase and switches to the given phase.</source>
          <target state="translated">结束当前阶段的所有待处理操作,并切换到指定阶段。</target>
        </trans-unit>
        <trans-unit id="dd35487a2eb7da40332f7fc41452378d92a72445" translate="yes" xml:space="preserve">
          <source>Writable</source>
          <target state="translated">Writable</target>
        </trans-unit>
        <trans-unit id="87534304f567927d43257586d016858eaa030918" translate="yes" xml:space="preserve">
          <source>Writable.writeTo</source>
          <target state="translated">Writable.writeTo</target>
        </trans-unit>
        <trans-unit id="5735f98eec3226a811dc68d6034258dc33f39dca" translate="yes" xml:space="preserve">
          <source>Write GroovyDoc resources to destination.</source>
          <target state="translated">将GroovyDoc资源写入目的地。</target>
        </trans-unit>
        <trans-unit id="4652631a628afd8a3f8a588fd0dbd737d2146884" translate="yes" xml:space="preserve">
          <source>Write a portion of a string.</source>
          <target state="translated">写一个字符串的一部分。</target>
        </trans-unit>
        <trans-unit id="354cde68fb6c2f936b7c59bf670319ba0dcf0ab7" translate="yes" xml:space="preserve">
          <source>Write a portion of an array of characters.</source>
          <target state="translated">写出一个数组中的部分字符。</target>
        </trans-unit>
        <trans-unit id="96cecf07d443a5851b1ef5b0ab1599f5fd94ef53" translate="yes" xml:space="preserve">
          <source>Write a pretty version of the Element to the OutputStream.</source>
          <target state="translated">将元素的漂亮版本写到OutputStream中。</target>
        </trans-unit>
        <trans-unit id="f5883e642bc4d6585b4b91c76f353f0c9597c506" translate="yes" xml:space="preserve">
          <source>Write a pretty version of the Element to the Writer.</source>
          <target state="translated">写一个漂亮版的《元素》给作家。</target>
        </trans-unit>
        <trans-unit id="5767f9248203b058e7ad52bdefb75a7d18603d15" translate="yes" xml:space="preserve">
          <source>Write a pretty version of the GPathResult to the OutputStream.</source>
          <target state="translated">将GPathResult的漂亮版本写到OutputStream中。</target>
        </trans-unit>
        <trans-unit id="39ce578d9073055598f43770c3337f690d7356e5" translate="yes" xml:space="preserve">
          <source>Write a pretty version of the GPathResult to the Writer.</source>
          <target state="translated">写一个漂亮的GPathResult版本给Writer。</target>
        </trans-unit>
        <trans-unit id="f10e0b4806a35879c043bc69da0f09635b142a51" translate="yes" xml:space="preserve">
          <source>Write a pretty version of the Node to the OutputStream.</source>
          <target state="translated">写一个漂亮版本的Node到OutputStream。</target>
        </trans-unit>
        <trans-unit id="03e638a319eeb6db50f2fbefae1a106a132dab17" translate="yes" xml:space="preserve">
          <source>Write a pretty version of the Node to the Writer.</source>
          <target state="translated">给写手写一个漂亮版的Node。</target>
        </trans-unit>
        <trans-unit id="f9e72900262aeca966974cd51f82575c18329895" translate="yes" xml:space="preserve">
          <source>Write a pretty version of the XML content produced by the Writable to the OutputStream.</source>
          <target state="translated">将Writable产生的XML内容的漂亮版本写入OutputStream。</target>
        </trans-unit>
        <trans-unit id="e697abbcd1510083c613809c6a93e664313cbe49" translate="yes" xml:space="preserve">
          <source>Write a pretty version of the XML content produced by the Writable to the Writer.</source>
          <target state="translated">将Writable产生的XML内容写一个漂亮的版本给Writer。</target>
        </trans-unit>
        <trans-unit id="09ef56179ad2f539e0edbfcd6940a4694e6c861d" translate="yes" xml:space="preserve">
          <source>Write a pretty version of the given XML string to the OutputStream.</source>
          <target state="translated">将给定的XML字符串写入一个漂亮的版本到OutputStream中。</target>
        </trans-unit>
        <trans-unit id="0574ba485e517ec712d583e8dcfe49aa131ffb59" translate="yes" xml:space="preserve">
          <source>Write a pretty version of the given XML string to the Writer.</source>
          <target state="translated">将给定的XML字符串写入一个漂亮的版本到Writer中。</target>
        </trans-unit>
        <trans-unit id="330fefb058de9e90d4a9120ede2b9e5d7c7923ca" translate="yes" xml:space="preserve">
          <source>Write a single character.</source>
          <target state="translated">写一个单字。</target>
        </trans-unit>
        <trans-unit id="f6e749d40ff493a236a023d30fb9fbee8148a6ef" translate="yes" xml:space="preserve">
          <source>Write a string.</source>
          <target state="translated">写一个字符串。</target>
        </trans-unit>
        <trans-unit id="5585114d09be91fef1cd855aac41a724e1615c48" translate="yes" xml:space="preserve">
          <source>Write bytes to a File.</source>
          <target state="translated">向文件写入字节。</target>
        </trans-unit>
        <trans-unit id="cf1b4b7287180be2a85085f8549e3473dfa7007d" translate="yes" xml:space="preserve">
          <source>Write bytes to a Path.</source>
          <target state="translated">向路径写入字节。</target>
        </trans-unit>
        <trans-unit id="a2b7b478f1c390316030a61f7715e228e4e2791d" translate="yes" xml:space="preserve">
          <source>Write shifting operations.</source>
          <target state="translated">编写移位操作。</target>
        </trans-unit>
        <trans-unit id="9619ac5c7a19d2dc42ea27ebe08ad420be29e3c4" translate="yes" xml:space="preserve">
          <source>Write shifting operations. Type is one of LEFT_SHIFT, RIGHT_SHIFT, or RIGHT_SHIFT_UNSIGNED</source>
          <target state="translated">写移位操作。类型为LEFT_SHIFT,RIGHT_SHIFT,或 RIGHT_SHIFT_UNSIGNED之一。</target>
        </trans-unit>
        <trans-unit id="4f9598dcd67600ae34dd1797a1b88d5968516ff7" translate="yes" xml:space="preserve">
          <source>Write the byte[] to the output stream.</source>
          <target state="translated">将字节[]写入输出流。</target>
        </trans-unit>
        <trans-unit id="274256b061f35d4bba14297927404d4d1c9c9260" translate="yes" xml:space="preserve">
          <source>Write the byte[] to the output stream. The stream is closed before this method returns.</source>
          <target state="translated">将字节[]写入输出流。在本方法返回之前,流是关闭的。</target>
        </trans-unit>
        <trans-unit id="b8ac34c969f93236f170aac6ecdc9cd9acce6f9a" translate="yes" xml:space="preserve">
          <source>Write the bytes from the byte array to the File.</source>
          <target state="translated">将字节数组中的字节写入文件。</target>
        </trans-unit>
        <trans-unit id="b0fb089052de00365d6c3ed944cf8c90fb8ff880" translate="yes" xml:space="preserve">
          <source>Write the bytes from the byte array to the Path.</source>
          <target state="translated">将字节数组中的字节写入路径。</target>
        </trans-unit>
        <trans-unit id="40ca2469dd695dfaeaf02691bca346558298d0c2" translate="yes" xml:space="preserve">
          <source>Write the text and append a newline (using the platform's line-ending).</source>
          <target state="translated">编写文本并附加一个新行(使用平台的行尾)。</target>
        </trans-unit>
        <trans-unit id="7bf7e66520004ebfcf76a4b78494d73df498c655" translate="yes" xml:space="preserve">
          <source>Write the text to the File without writing a BOM, using the specified encoding.</source>
          <target state="translated">使用指定的编码将文本写入文件,而不写BOM。</target>
        </trans-unit>
        <trans-unit id="d8d90c961c578dd0fde71f19b40ece570dcfe25f" translate="yes" xml:space="preserve">
          <source>Write the text to the File without writing a BOM.</source>
          <target state="translated">将文本写到文件中,而不需要写BOM。</target>
        </trans-unit>
        <trans-unit id="2e50138db3dd4f75b30957a88c3858a327cb2b6a" translate="yes" xml:space="preserve">
          <source>Write the text to the File, using the specified encoding.</source>
          <target state="translated">使用指定的编码将文本写入文件。</target>
        </trans-unit>
        <trans-unit id="00330a530af0fcae3e16053e1532c87e3bd3459d" translate="yes" xml:space="preserve">
          <source>Write the text to the File, using the specified encoding. If the given charset is &quot;UTF-16BE&quot; or &quot;UTF-16LE&quot; (or an equivalent alias) and &lt;code&gt;writeBom&lt;/code&gt; is &lt;code&gt;true&lt;/code&gt;, the requisite byte order mark is written to the file before the text.</source>
          <target state="translated">使用指定的编码将文本写入文件。如果给定的字符集为&amp;ldquo; UTF-16BE&amp;rdquo;或&amp;ldquo; UTF-16LE&amp;rdquo;（或等效别名）且 &lt;code&gt;writeBom&lt;/code&gt; 为 &lt;code&gt;true&lt;/code&gt; ，则必需的字节顺序标记将在文本之前写入文件中。</target>
        </trans-unit>
        <trans-unit id="6500d3c5d12ba66a9fb40d971f245d4c0ad0c023" translate="yes" xml:space="preserve">
          <source>Write the text to the File.</source>
          <target state="translated">将文本写到文件中。</target>
        </trans-unit>
        <trans-unit id="efc2a6a902244a910e1dec45fb7b45b0bb22065b" translate="yes" xml:space="preserve">
          <source>Write the text to the File. If the default charset is &quot;UTF-16BE&quot; or &quot;UTF-16LE&quot; (or an equivalent alias) and &lt;code&gt;writeBom&lt;/code&gt; is &lt;code&gt;true&lt;/code&gt;, the requisite byte order mark is written to the file before the text.</source>
          <target state="translated">将文本写入文件。如果默认字符集为&amp;ldquo; UTF-16BE&amp;rdquo;或&amp;ldquo; UTF-16LE&amp;rdquo;（或等效别名），并且 &lt;code&gt;writeBom&lt;/code&gt; 为 &lt;code&gt;true&lt;/code&gt; ，则在文本之前将必需的字节顺序标记写入文件。</target>
        </trans-unit>
        <trans-unit id="115c5e05a1c8dfe1dbf8210c484688145a13b06c" translate="yes" xml:space="preserve">
          <source>Write the text to the Path without writing a BOM .</source>
          <target state="translated">把文字写到Path上,而不用写BOM。</target>
        </trans-unit>
        <trans-unit id="b8e1d8edc29964a12ebcd4c669bd586b5e335ce0" translate="yes" xml:space="preserve">
          <source>Write the text to the Path without writing a BOM, using the specified encoding.</source>
          <target state="translated">使用指定的编码将文本写入路径,而不需要写入BOM。</target>
        </trans-unit>
        <trans-unit id="5b5b40a7a8c4e8619db1ba7ae6e8b3604b6add30" translate="yes" xml:space="preserve">
          <source>Write the text to the Path, using the specified encoding.</source>
          <target state="translated">使用指定的编码将文本写入路径。</target>
        </trans-unit>
        <trans-unit id="bc6c4aa7ffd1f13109cdab42385e8b4b79399b53" translate="yes" xml:space="preserve">
          <source>Write the text to the Path, using the specified encoding. If the given charset is &quot;UTF-16BE&quot; or &quot;UTF-16LE&quot; (or an equivalent alias) and &lt;code&gt;writeBom&lt;/code&gt; is &lt;code&gt;true&lt;/code&gt;, the requisite byte order mark is written to the file before the text.</source>
          <target state="translated">使用指定的编码将文本写入路径。如果给定的字符集为&amp;ldquo; UTF-16BE&amp;rdquo;或&amp;ldquo; UTF-16LE&amp;rdquo;（或等效别名）且 &lt;code&gt;writeBom&lt;/code&gt; 为 &lt;code&gt;true&lt;/code&gt; ，则必需的字节顺序标记将在文本之前写入文件中。</target>
        </trans-unit>
        <trans-unit id="8b9cfad3400b59e97176cb6d59776972ccecbb1d" translate="yes" xml:space="preserve">
          <source>Write the text to the Path.</source>
          <target state="translated">将文字写到路径上。</target>
        </trans-unit>
        <trans-unit id="6266463ae398d1877a555806b69997a3b00955d6" translate="yes" xml:space="preserve">
          <source>Write the text to the Path. If the default charset is &quot;UTF-16BE&quot; or &quot;UTF-16LE&quot; (or an equivalent alias) and &lt;code&gt;writeBom&lt;/code&gt; is &lt;code&gt;true&lt;/code&gt;, the requisite byte order mark is written to the file before the text.</source>
          <target state="translated">将文本写入路径。如果默认字符集为&amp;ldquo; UTF-16BE&amp;rdquo;或&amp;ldquo; UTF-16LE&amp;rdquo;（或等效别名），并且 &lt;code&gt;writeBom&lt;/code&gt; 为 &lt;code&gt;true&lt;/code&gt; ，则在文本之前将必需的字节顺序标记写入文件。</target>
        </trans-unit>
        <trans-unit id="9b0bb5200ff9e032b44c3f44d885d776514d1a58" translate="yes" xml:space="preserve">
          <source>Writer responsible for generating closure classes in statically compiled mode.</source>
          <target state="translated">编写者负责在静态编译模式下生成闭包类。</target>
        </trans-unit>
        <trans-unit id="4c186df384e63b28c1d20c3e37296ebe5dd6d295" translate="yes" xml:space="preserve">
          <source>Writer responsible for generating lambda classes in statically compiled mode.</source>
          <target state="translated">编写者负责在静态编译模式下生成lambda类。</target>
        </trans-unit>
        <trans-unit id="9f5e63d8ff37b89c95e8494f2623a1991cab3295" translate="yes" xml:space="preserve">
          <source>Writer responsible for generating method reference in statically compiled mode.</source>
          <target state="translated">负责在静态编译模式下生成方法引用的编写者。</target>
        </trans-unit>
        <trans-unit id="d1d4e150a8596834961f524ba7b862460f9b371c" translate="yes" xml:space="preserve">
          <source>WriterControllerFactory</source>
          <target state="translated">WriterControllerFactory</target>
        </trans-unit>
        <trans-unit id="b234738492d671b78c35d3acbd3e11556b4cd811" translate="yes" xml:space="preserve">
          <source>Writes a String to the &lt;a href=&quot;https://docs.oracle.com/javase/8/docs/api/java/lang/StringBuilder.html&quot;&gt;StringBuilder&lt;/a&gt;.</source>
          <target state="translated">将一个字符串写入&lt;a href=&quot;https://docs.oracle.com/javase/8/docs/api/java/lang/StringBuilder.html&quot;&gt;StringBuilder&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="f5500ac07f2cc1cb3f22e87d010a07b349ab41ea" translate="yes" xml:space="preserve">
          <source>Writes a portion of a character array to the &lt;a href=&quot;https://docs.oracle.com/javase/8/docs/api/java/lang/StringBuilder.html&quot;&gt;StringBuilder&lt;/a&gt;.</source>
          <target state="translated">将字符数组的一部分写入&lt;a href=&quot;https://docs.oracle.com/javase/8/docs/api/java/lang/StringBuilder.html&quot;&gt;StringBuilder&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="c6c5505a4254a82213465460cf7dc2e287240a7c" translate="yes" xml:space="preserve">
          <source>Writes an object to a Writer using Groovy's default representation for the object.</source>
          <target state="translated">使用Groovy对对象的默认表示法将对象写入Writer。</target>
        </trans-unit>
        <trans-unit id="b50e8f220fd429713b81f0a82459e245615f1340" translate="yes" xml:space="preserve">
          <source>Writes an unescaped value.</source>
          <target state="translated">写一个未封装的值。</target>
        </trans-unit>
        <trans-unit id="df02af0bd2d3065dd99e4bdd24877feefe6aa2c4" translate="yes" xml:space="preserve">
          <source>Writes an unescaped value. Note: can cause invalid JSON if passed JSON is invalid</source>
          <target state="translated">写一个未封装的值。注意:如果传递的JSON是无效的,可能会导致无效的JSON。</target>
        </trans-unit>
        <trans-unit id="e4b7fb98129ee2c0a6b9f494bb51fe088559e1bb" translate="yes" xml:space="preserve">
          <source>Writes error messages to the specified PrintWriter.</source>
          <target state="translated">将错误信息写入指定的PrintWriter。</target>
        </trans-unit>
        <trans-unit id="7b8c2fa0ac62e2efedd293becb5b2f44dde2c3fe" translate="yes" xml:space="preserve">
          <source>Writes out a nicely formatted summary of the exception.</source>
          <target state="translated">写出一个格式很好的异常总结。</target>
        </trans-unit>
        <trans-unit id="9f09beb17cecea5cc2e6ca93dcc1bfb45c3d7c17" translate="yes" xml:space="preserve">
          <source>Writes out a nicely formatted summary of the syntax error.</source>
          <target state="translated">写出语法错误的格式化摘要。</target>
        </trans-unit>
        <trans-unit id="639c6bcd5b64ee97c6b660b4f94fb5e5f981b98b" translate="yes" xml:space="preserve">
          <source>Writes the error to the specified &lt;code&gt;PrintStream&lt;/code&gt;.</source>
          <target state="translated">将错误写入指定的 &lt;code&gt;PrintStream&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="b3b330ce0b2834018481b6d2a890bab037254296" translate="yes" xml:space="preserve">
          <source>Writes the error to the specified &lt;code&gt;PrintWriter&lt;/code&gt;.</source>
          <target state="translated">将错误写入指定的 &lt;code&gt;PrintWriter&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="adf4b10707d72cd3246437c093bc159e0d2457fd" translate="yes" xml:space="preserve">
          <source>Writes the given Writable as the value of the given attribute name</source>
          <target state="translated">将给定的Writable写成给定属性名的值。</target>
        </trans-unit>
        <trans-unit id="0700c40c41c12f08a29546a228dec138c3a30749" translate="yes" xml:space="preserve">
          <source>Writes the message to the specified PrintWriter.</source>
          <target state="translated">将信息写入指定的PrintWriter。</target>
        </trans-unit>
        <trans-unit id="7a247b5cc56337dfc3cdd69df71257622ef161b8" translate="yes" xml:space="preserve">
          <source>Writes the message to the specified PrintWriter. The supplied ProcessingUnit is the unit that holds this Message.</source>
          <target state="translated">将消息写入指定的PrintWriter。所提供的ProcessingUnit是保存该消息的单位。</target>
        </trans-unit>
        <trans-unit id="ae0baae77d97c9c02d6c9705c5ce482f01f55e0a" translate="yes" xml:space="preserve">
          <source>Writes the name and a JSON array</source>
          <target state="translated">编写名称和JSON数组</target>
        </trans-unit>
        <trans-unit id="e61a6f24237d29a20abfd1ab2c2c4ab03dda6eea" translate="yes" xml:space="preserve">
          <source>Writes the name and another JSON object</source>
          <target state="translated">写入名称和另一个JSON对象</target>
        </trans-unit>
        <trans-unit id="9a628aaaff74825f09fd6cc70e0f73c0c9775dc3" translate="yes" xml:space="preserve">
          <source>Writes the name and value of a JSON attribute</source>
          <target state="translated">写一个JSON属性的名称和值。</target>
        </trans-unit>
        <trans-unit id="fa1e43266c7bd3d74ecafcaabbe9643fb564a055" translate="yes" xml:space="preserve">
          <source>Writes the node to the specified &lt;code&gt;PrintWriter&lt;/code&gt;.</source>
          <target state="translated">将节点写入指定的 &lt;code&gt;PrintWriter&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="32fe9a5f14a56dd90f57153f772ac708a6dd8dea" translate="yes" xml:space="preserve">
          <source>Writes the specified character into the buffer.</source>
          <target state="translated">将指定的字符写入缓冲区。</target>
        </trans-unit>
        <trans-unit id="eeaf26f5110e83b969c57811863f263444eedfcc" translate="yes" xml:space="preserve">
          <source>Writes this config object into a String serialized representation which can later be parsed back using the parse() method</source>
          <target state="translated">将此config对象写成一个字符串序列化的表示方式,稍后可以使用parse()方法将其解析回来。</target>
        </trans-unit>
        <trans-unit id="f012586de7f1481720aa810d76d5a609dfae4774" translate="yes" xml:space="preserve">
          <source>Writes this object to the given writer.</source>
          <target state="translated">将此对象写入给定的作者。</target>
        </trans-unit>
        <trans-unit id="b35d5c6e0894db5cfc23292801ddee2f7bda16ea" translate="yes" xml:space="preserve">
          <source>XML utilities such as for converting XML into Groovy scripts.</source>
          <target state="translated">XML实用程序,如将XML转换为Groovy脚本。</target>
        </trans-unit>
        <trans-unit id="04db21bc07fcb55d28e3b2b837648a42a65c85e0" translate="yes" xml:space="preserve">
          <source>XmlBuilder related classes to support streaming XML.</source>
          <target state="translated">支持流式XML的XmlBuilder相关类。</target>
        </trans-unit>
        <trans-unit id="9510186d59529f829afe19cc51a8be45be9d8a20" translate="yes" xml:space="preserve">
          <source>XmlUtil.serialize</source>
          <target state="translated">XmlUtil.serialize</target>
        </trans-unit>
        <trans-unit id="3f0cc0456e593d2518e5a1c70c1967dfaa1cc0b5" translate="yes" xml:space="preserve">
          <source>Year.parse</source>
          <target state="translated">Year.parse</target>
        </trans-unit>
        <trans-unit id="df0956a3d741b6ccbb8c783bdf658129ec4eb912" translate="yes" xml:space="preserve">
          <source>YearMonth.parse</source>
          <target state="translated">YearMonth.parse</target>
        </trans-unit>
        <trans-unit id="ea37e53955578466e655348b4d5a1435780c42bd" translate="yes" xml:space="preserve">
          <source>You can access the left hand side of a declaration using the &quot;&lt;code&gt;Expression getLeftExpression()&lt;/code&gt;&quot; method. In which case you might then use &lt;code&gt;instanceof&lt;/code&gt; and casting to perform operations specific to a single local variable (&lt;code&gt;VariableExpression&lt;/code&gt;) or for the multiple assignment case (&lt;code&gt;TupleExpression&lt;/code&gt;).</source>
          <target state="translated">您可以使用&amp;ldquo; &lt;code&gt;Expression getLeftExpression()&lt;/code&gt; &amp;rdquo;方法访问声明的左侧。在这种情况下，您然后可以使用 &lt;code&gt;instanceof&lt;/code&gt; 和强制转换来执行特定于单个局部变量（ &lt;code&gt;VariableExpression&lt;/code&gt; ）或针对多个分配情况（ &lt;code&gt;TupleExpression&lt;/code&gt; ）的操作。</target>
        </trans-unit>
        <trans-unit id="4921e4c97bf548e3febc11494ae84291e85e23bc" translate="yes" xml:space="preserve">
          <source>You can also add PhaseOperations to this compilation using the addPhaseOperation method. This is commonly used when you want to wire a new AST Transformation into the compilation.</source>
          <target state="translated">您也可以使用addPhaseOperation方法将PhaseOperations添加到这个编译中。当你想把一个新的AST转换连接到编译中时,通常会用到这个方法。</target>
        </trans-unit>
        <trans-unit id="42c71fdf0d673eb18559c6815b486bab57a6b82b" translate="yes" xml:space="preserve">
          <source>You can also mix and match the &lt;code&gt;@NamedParam&lt;/code&gt; and &lt;code&gt;@NamedDelegate&lt;/code&gt; annotations. Named arguments will be supplied via the map with their property name (configurable via annotation attributes within &lt;code&gt;@NamedParam&lt;/code&gt;) being the key and value being the argument value. For named delegates, any properties of the delegate can become map keys. Duplicate keys across delegate properties or named parameters are not allowed. The type of delegate parameters must be compatible with Groovy's &lt;code&gt;as&lt;/code&gt; cast operation from a &lt;code&gt;Map&lt;/code&gt;. Here is an example using implicit named parameters.</source>
          <target state="translated">您还可以混合并匹配 &lt;code&gt;@NamedParam&lt;/code&gt; 和 &lt;code&gt;@NamedDelegate&lt;/code&gt; 批注。命名参数将通过映射提供，其属性名称（可通过 &lt;code&gt;@NamedParam&lt;/code&gt; 中的批注属性配置）是键，值是参数值。对于命名的委托，委托的任何属性都可以成为映射键。不允许在委托属性或命名参数之间重复键。该类型的委托参数必须与Groovy的兼容 &lt;code&gt;as&lt;/code&gt; 由铸造操作 &lt;code&gt;Map&lt;/code&gt; 。这是一个使用隐式命名参数的示例。</target>
        </trans-unit>
        <trans-unit id="c9d3039e9a9498cb711ad8116091ee335b07f86e" translate="yes" xml:space="preserve">
          <source>You can also now do this:</source>
          <target state="translated">你现在也可以这样做。</target>
        </trans-unit>
        <trans-unit id="ce966a0ce5ab76a3a342193f8aca3e85173c2009" translate="yes" xml:space="preserve">
          <source>You can also remove transitive dependencies altogether (provided you know you don't need them) using &lt;code&gt;@GrabExclude&lt;/code&gt;. For example, here is how we would not grab the &lt;code&gt;logkit&lt;/code&gt; and &lt;code&gt;avalon-framework&lt;/code&gt; transitive dependencies for Apache POI:</source>
          <target state="translated">您还可以使用 &lt;code&gt;@GrabExclude&lt;/code&gt; 完全删除传递依赖项（前提是您知道不需要它们）。例如，这是我们如何不获取Apache POI的 &lt;code&gt;logkit&lt;/code&gt; 和 &lt;code&gt;avalon-framework&lt;/code&gt; 可传递依赖项的方法：</target>
        </trans-unit>
        <trans-unit id="694fdb3d78526c8a159aeb6cdf4135c1daa816c5" translate="yes" xml:space="preserve">
          <source>You can also use the &lt;code&gt;@Builder&lt;/code&gt; annotation in combination with this strategy on one or more constructor or static method instead of or in addition to using it at the class level. An example with a constructor follows:</source>
          <target state="translated">您也可以在一个或多个构造函数或静态方法 &lt;code&gt;@Builder&lt;/code&gt; 注释与此策略结合使用，以代替或在类级别上使用它。具有构造函数的示例如下：</target>
        </trans-unit>
        <trans-unit id="e941f0b8c2260c9a81a632889151c2b74abe11a6" translate="yes" xml:space="preserve">
          <source>You can choose either format but not mix-n-match:</source>
          <target state="translated">你可以选择任何一种格式,但不能混搭。</target>
        </trans-unit>
        <trans-unit id="4b0bdfc45bdeb6ef9629a1ec5e896f3ac9721a02" translate="yes" xml:space="preserve">
          <source>You can customise the toString() method provided for you by &lt;code&gt;@Immutable&lt;/code&gt; by also adding the &lt;code&gt;@ToString&lt;/code&gt; annotation to your class definition.</source>
          <target state="translated">您还可以在类定义中添加 &lt;code&gt;@ToString&lt;/code&gt; 批注，以自定义 &lt;code&gt;@Immutable&lt;/code&gt; 为您提供的toString（）方法。</target>
        </trans-unit>
        <trans-unit id="1c57137957954998e458a424e8d81dbffeb2112c" translate="yes" xml:space="preserve">
          <source>You can override an implicit transitive dependency by providing an explicit one. E.g. htmlunit 2.6 normally uses xerces 2.9.1 but you can get 2.9.0 as follows:</source>
          <target state="translated">您可以通过提供一个显式依赖关系来覆盖一个隐式的转义依赖关系。例如,htmlunit 2.6 通常使用 xerces 2.9.1,但您可以通过以下方式获得 2.9.0。</target>
        </trans-unit>
        <trans-unit id="4a2dc9b549b7bb2a47dcbceb24bd718a81f56ff9" translate="yes" xml:space="preserve">
          <source>You can specify the GroovyUnitTest to run by running this class as an application and specifying the script to run on the command line. &lt;code&gt;
 java groovy.test.GroovyTestSuite src/test/Foo.groovy
 &lt;/code&gt; Or to run the test suite as a unit test suite in an IDE you can use the 'test' system property to define the test script to run. e.g. pass this into the JVM when the unit test plugin runs... &lt;code&gt;
 -Dtest=src/test/Foo.groovy
 &lt;/code&gt;</source>
          <target state="translated">您可以通过将此类作为应用程序运行并指定要在命令行上运行的脚本来指定要运行的GroovyUnitTest。 &lt;code&gt; java groovy.test.GroovyTestSuite src/test/Foo.groovy &lt;/code&gt; 或将测试套件作为单元测试套件在IDE中运行，您可以使用&amp;ldquo; test&amp;rdquo;系统属性来定义要运行的测试脚本。例如，当单元测试插件运行时，将其传递给JVM ... &lt;code&gt; -Dtest=src/test/Foo.groovy &lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="ae04c9b7cfd1c068ef6d35e5a3500d5c921c1760" translate="yes" xml:space="preserve">
          <source>You can specify the GroovyUnitTest to run by running this class as an application and specifying the script to run on the command line. &lt;code&gt;
 java groovy.util.GroovyTestSuite src/test/Foo.groovy
 &lt;/code&gt; Or to run the test suite as a unit test suite in an IDE you can use the 'test' system property to define the test script to run. e.g. pass this into the JVM when the unit test plugin runs... &lt;code&gt;
 -Dtest=src/test/Foo.groovy
 &lt;/code&gt;</source>
          <target state="translated">您可以通过将此类作为应用程序运行并指定要在命令行上运行的脚本来指定要运行的GroovyUnitTest。 &lt;code&gt; java groovy.util.GroovyTestSuite src/test/Foo.groovy &lt;/code&gt; 或将测试套件作为单元测试套件在IDE中运行，您可以使用&amp;ldquo; test&amp;rdquo;系统属性来定义要运行的测试脚本。例如，当单元测试插件运行时，将其传递给JVM ... &lt;code&gt; -Dtest=src/test/Foo.groovy &lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="2a0299152e3fb49c8ed23cae8b5b00b7a2229c2f" translate="yes" xml:space="preserve">
          <source>You can write classes in this shortened form:</source>
          <target state="translated">你可以用这种简略的形式来写类。</target>
        </trans-unit>
        <trans-unit id="0dd5ad06e973582a0d5ca851bdd2b199f7733ae2" translate="yes" xml:space="preserve">
          <source>You can write code like this:</source>
          <target state="translated">你可以写这样的代码。</target>
        </trans-unit>
        <trans-unit id="a8a2405d380727871ece17ffd5b22f305daaeb11" translate="yes" xml:space="preserve">
          <source>You could create an AST transformation customizer and specify the &quot;value&quot; parameter thanks to this method:</source>
          <target state="translated">你可以创建一个AST转换自定义器,并指定 &quot;值 &quot;参数,感谢这个方法。</target>
        </trans-unit>
        <trans-unit id="fbd72dbfdce8a2381899f610f1966b88b23d1fcf" translate="yes" xml:space="preserve">
          <source>You don't have to follow Groovy's normal property conventions, e.g. you can create an explicit private field and then you can write explicit get and set methods. Such an approach, isn't currently prohibited (to give you some wiggle room to get around these conventions) but any fields created in this way are deemed not to be part of the significant state of the object and aren't factored into the &lt;code&gt;equals&lt;/code&gt; or &lt;code&gt;hashCode&lt;/code&gt; methods. Similarly, you may use static properties (though usually this is discouraged) and these too will be ignored as far as significant state is concerned. If you do break standard conventions, you do so at your own risk and your objects may no longer be immutable. It is up to you to ensure that your objects remain immutable at least to the extent expected in other parts of your program!</source>
          <target state="translated">您不必遵循Groovy的常规属性约定，例如，可以创建一个显式的私有字段，然后可以编写显式的get和set方法。这样的做法，目前尚未禁止（给你一些回旋余地绕过这些公约），但是以这种方式创建的任何字段都认为不为对象的显著状态的一部分，并且不计入 &lt;code&gt;equals&lt;/code&gt; 或 &lt;code&gt;hashCode&lt;/code&gt; 方法。同样，您可以使用静态属性（尽管通常不建议这样做），并且就重要状态而言，这些属性也将被忽略。如果您违反标准约定，则后果自负，并且对象可能不再是不变的。您有责任确保您的对象至少在程序其他部分所期望的范围内保持不变！</target>
        </trans-unit>
        <trans-unit id="924447f95f45e32e214f55af4a9166aa840a35f9" translate="yes" xml:space="preserve">
          <source>You don't need to provide all arguments in constructor calls. If using named parameters, any property names not referenced will be given their default value (as per Java's default unless an explicit initialization constant is provided when defining the property). If using a tuple constructor, parameters are supplied in the order in which the properties are defined. Supplied parameters fill the tuple from the left. Any parameters missing on the right are given their default value.</source>
          <target state="translated">你不需要在构造函数调用中提供所有的参数。如果使用命名参数,任何未被引用的属性名都会被赋予默认值(按照Java的默认值,除非在定义属性时提供了显式初始化常量)。如果使用元组构造函数,参数将按照定义属性的顺序提供。提供的参数从左边开始填充元组。右边缺少的任何参数都会被赋予默认值。</target>
        </trans-unit>
        <trans-unit id="0a9168dbea24e1385fcc9fb5b6fe585aec9f241f" translate="yes" xml:space="preserve">
          <source>You may add additional constructors in addition to inherited ones. If the argument types of a supplied constructor exactly match those of a parent constructor, then that constructor won't be inherited.</source>
          <target state="translated">除了继承的构造函数之外,你还可以添加额外的构造函数。如果提供的构造函数的参数类型与父构造函数的参数类型完全匹配,那么该构造函数将不会被继承。</target>
        </trans-unit>
        <trans-unit id="8ca2bff79d2dc8f802ab3892d2549f7a45f7c6d9" translate="yes" xml:space="preserve">
          <source>You must annotate this class with &lt;a href=&quot;groovyasttransformation&quot;&gt;GroovyASTTransformation&lt;/a&gt; so that Groovy knows which &lt;a href=&quot;../control/compilephase&quot;&gt;CompilePhase&lt;/a&gt; to run in.</source>
          <target state="translated">您必须使用&lt;a href=&quot;groovyasttransformation&quot;&gt;GroovyASTTransformation&lt;/a&gt;注释此类，以便Groovy知道要在哪个&lt;a href=&quot;../control/compilephase&quot;&gt;CompilePhase&lt;/a&gt;中运行。</target>
        </trans-unit>
        <trans-unit id="87c51f81eac2b37f8f18a538bff47f2eab457428" translate="yes" xml:space="preserve">
          <source>You shouldn't call this method because it is inherently unreliable</source>
          <target state="translated">你不应该调用这个方法,因为它本质上是不可靠的。</target>
        </trans-unit>
        <trans-unit id="6debf683f8c6e177d9475561435e9ec32fdbd965" translate="yes" xml:space="preserve">
          <source>You would typically use this style only for base classes where you didn't want the normal &lt;code&gt;Object&lt;/code&gt;&lt;code&gt;clone()&lt;/code&gt; method to be called and you would typically need to use the &lt;code&gt;SIMPLE&lt;/code&gt; style for any child classes.</source>
          <target state="translated">通常，只对不希望调用普通 &lt;code&gt;Object&lt;/code&gt; &lt;code&gt;clone()&lt;/code&gt; 方法的基类使用这种样式，并且对于任何子类，通常都需要使用 &lt;code&gt;SIMPLE&lt;/code&gt; 样式。</target>
        </trans-unit>
        <trans-unit id="8d4350ac417d871ad1b8b36f5ac8cd36c7636a5a" translate="yes" xml:space="preserve">
          <source>Your script sources can be placed either in your web application's normal web root (allows for subdirectories) or in /WEB-INF/groovy/* (also allows subdirectories).</source>
          <target state="translated">你的脚本源可以放在你的web应用程序的普通web根目录下(允许子目录),也可以放在/WEB-INF/groovy/*中(也允许子目录)。</target>
        </trans-unit>
        <trans-unit id="a4c7b1c8a9a34e7ded22775d447e30b322328a36" translate="yes" xml:space="preserve">
          <source>Zero or more insignificant newlines, all gobbled up and thrown away, but a warning message is left for the user, if there was a newline.</source>
          <target state="translated">零个或多个无关紧要的换行,全部吞噬扔掉,但如果有换行,会给用户留下警告信息。</target>
        </trans-unit>
        <trans-unit id="b25ef747af6ebc64888d15302c255bfcc69b6856" translate="yes" xml:space="preserve">
          <source>Zero or more insignificant newlines, all gobbled up and thrown away.</source>
          <target state="translated">零点或更多无关紧要的新线,都被吞噬扔掉了。</target>
        </trans-unit>
        <trans-unit id="35676acd2669d43b4c51005e45a63421633dd4a8" translate="yes" xml:space="preserve">
          <source>Zips an Iterable with indices in (index, value) order.</source>
          <target state="translated">以(index,value)为序压缩一个Iterable。</target>
        </trans-unit>
        <trans-unit id="d4a4d93ae90dd780c8c710cf836153df95bc421d" translate="yes" xml:space="preserve">
          <source>Zips an Iterable with indices in (value, index) order.</source>
          <target state="translated">以(value,index)为序压缩一个Iterable。</target>
        </trans-unit>
        <trans-unit id="dc82c2e107a78561564679249b66e78086a0db0e" translate="yes" xml:space="preserve">
          <source>Zips an iterator with indices in (index, value) order.</source>
          <target state="translated">按(index,value)顺序压缩一个索引的迭代器。</target>
        </trans-unit>
        <trans-unit id="a61d29f0c5dbdb3486d977011418bdd6dd33c37d" translate="yes" xml:space="preserve">
          <source>Zips an iterator with indices in (value, index) order.</source>
          <target state="translated">按(value,index)顺序压缩一个索引的迭代器。</target>
        </trans-unit>
        <trans-unit id="c3fe10e3021a337ca1335cf9695b1e322b28566c" translate="yes" xml:space="preserve">
          <source>ZoneId.systemDefault</source>
          <target state="translated">ZoneId.systemDefault</target>
        </trans-unit>
        <trans-unit id="6a66abbe0f7f8b6c064c277c2fedcf88593ccd21" translate="yes" xml:space="preserve">
          <source>ZonedDateTime.parse</source>
          <target state="translated">ZonedDateTime.parse</target>
        </trans-unit>
        <trans-unit id="1b1bbf233a88a2f42fe417619cc3c0f64821164f" translate="yes" xml:space="preserve">
          <source>[&lt;a href=&quot;http://gee.cs.oswego.edu/dl/classes/EDU/oswego/cs/dl/util/concurrent/intro.html&quot;&gt; Introduction to this package. &lt;/a&gt;]</source>
          <target state="translated">[&lt;a href=&quot;http://gee.cs.oswego.edu/dl/classes/EDU/oswego/cs/dl/util/concurrent/intro.html&quot;&gt;此软件包的简介。&lt;/a&gt;]</target>
        </trans-unit>
        <trans-unit id="71bc03185dfaa70d2ac782f6b8905a9883eb5442" translate="yes" xml:space="preserve">
          <source>[Groovy] Annotation Type AutoExternalize</source>
          <target state="translated">[Groovy]注释类型自动外部化</target>
        </trans-unit>
        <trans-unit id="c6ed5862efbe403c995b8311f6afe3af29f56806" translate="yes" xml:space="preserve">
          <source>[Groovy] Annotation Type Canonical</source>
          <target state="translated">[Groovy]注释类型规范</target>
        </trans-unit>
        <trans-unit id="2b77d6a0644f44815a4b2599002d87e9507a486b" translate="yes" xml:space="preserve">
          <source>[Groovy] Annotation Type CompileDynamic</source>
          <target state="translated">[Groovy]批注类型CompileDynamic</target>
        </trans-unit>
        <trans-unit id="fa4ae9c27af069279880925b11a130ceecd7496f" translate="yes" xml:space="preserve">
          <source>[Groovy] Annotation Type ConditionalInterrupt</source>
          <target state="translated">[Groovy]注释类型ConditionalInterrupt</target>
        </trans-unit>
        <trans-unit id="9b37db9ad05f0b3c1833cd886bd173c3143f2ac7" translate="yes" xml:space="preserve">
          <source>[Groovy] Annotation Type Immutable</source>
          <target state="translated">[Groovy]注释类型不可变</target>
        </trans-unit>
        <trans-unit id="51d3ce8f0fb8254e39dd885481b7e155b32bf25d" translate="yes" xml:space="preserve">
          <source>[Groovy] Annotation Type ListenerList</source>
          <target state="translated">[Groovy]批注类型ListenerList</target>
        </trans-unit>
        <trans-unit id="0c9e5184a6bf2570b94a47a2841d68460fbd577e" translate="yes" xml:space="preserve">
          <source>[Groovy] Annotation Type OptionField</source>
          <target state="translated">[Groovy]注释类型OptionField</target>
        </trans-unit>
        <trans-unit id="75a5933cc48d1bee6943da66a27158156477ee1e" translate="yes" xml:space="preserve">
          <source>[Groovy] Annotation Type TailRecursive</source>
          <target state="translated">[Groovy]注释类型TailRecursive</target>
        </trans-unit>
        <trans-unit id="46e74505fffc520c4f4f1d1fbfdbe13df6034dd1" translate="yes" xml:space="preserve">
          <source>[Groovy] Annotation Type ThreadInterrupt</source>
          <target state="translated">[Groovy]注释类型ThreadInterrupt</target>
        </trans-unit>
        <trans-unit id="8960b374f51e61d3e4f8ecc895c823e98626ff93" translate="yes" xml:space="preserve">
          <source>[Groovy] Annotation Type TimedInterrupt</source>
          <target state="translated">[Groovy]注释类型TimedInterrupt</target>
        </trans-unit>
        <trans-unit id="aa278324af657f04c75d43dabcf97b27972c091d" translate="yes" xml:space="preserve">
          <source>[Groovy] Annotation Type UnparsedField</source>
          <target state="translated">[Groovy]注释类型UnparsedField</target>
        </trans-unit>
        <trans-unit id="16a82d7d77734e46c18ffd5e6d78ca63e241757e" translate="yes" xml:space="preserve">
          <source>[Groovy] Class ASTMatcher</source>
          <target state="translated">[Groovy] Class ASTMatcher</target>
        </trans-unit>
        <trans-unit id="6c82fb17b7a75ab1218f3037ea30181deef7573d" translate="yes" xml:space="preserve">
          <source>[Groovy] Class ASTTestTransformation</source>
          <target state="translated">[Groovy] ASTTestTransformation类</target>
        </trans-unit>
        <trans-unit id="4bb51c926a0665f9fc1ef80155c99b8b7bd536df" translate="yes" xml:space="preserve">
          <source>[Groovy] Class ASTTestTransformation.1</source>
          <target state="translated">[Groovy] ASTTestTransformation.1类</target>
        </trans-unit>
        <trans-unit id="14b3dca2a1a3801a9f5ac40fd07a931bf8e16971" translate="yes" xml:space="preserve">
          <source>[Groovy] Class ASTTestTransformation.LabelFinder</source>
          <target state="translated">[Groovy]类ASTTestTransformation.LabelFinder</target>
        </trans-unit>
        <trans-unit id="a5e28cfd42c295689d38e4f0c686da95a3974bbe" translate="yes" xml:space="preserve">
          <source>[Groovy] Class ASTTransformationCustomizer</source>
          <target state="translated">[Groovy]类ASTTransformationCustomizer</target>
        </trans-unit>
        <trans-unit id="724c207795bc67d015c7542bc828706647005508" translate="yes" xml:space="preserve">
          <source>[Groovy] Class ASTTransformationCustomizerFactory</source>
          <target state="translated">[Groovy]类ASTTransformationCustomizerFactory</target>
        </trans-unit>
        <trans-unit id="cf03dc1373067e65d5167a035cc0e1222372fbed" translate="yes" xml:space="preserve">
          <source>[Groovy] Class AbstractStreamingBuilder</source>
          <target state="translated">[Groovy]类AbstractStreamingBuilder</target>
        </trans-unit>
        <trans-unit id="c36ab83a920028a7a9cd190586c5eb9dceff9d5d" translate="yes" xml:space="preserve">
          <source>[Groovy] Class AbstractSyntheticMetaMethods</source>
          <target state="translated">[Groovy]类AbstractSyntheticMetaMethods</target>
        </trans-unit>
        <trans-unit id="6eb6f2ec1e107f5dcfef2f456806b3a21e71b1e7" translate="yes" xml:space="preserve">
          <source>[Groovy] Class ActionFactory</source>
          <target state="translated">[Groovy]类ActionFactory</target>
        </trans-unit>
        <trans-unit id="22994fd09e1a1f0ae0393248b063587982edbfd1" translate="yes" xml:space="preserve">
          <source>[Groovy] Class AliasCommand</source>
          <target state="translated">[Groovy]类AliasCommand</target>
        </trans-unit>
        <trans-unit id="8e464b4fc1496d228d4e9fc8cc67cb148491504b" translate="yes" xml:space="preserve">
          <source>[Groovy] Class AnsiDetector</source>
          <target state="translated">[Groovy]类AnsiDetector</target>
        </trans-unit>
        <trans-unit id="74c9182235d3ef31c160b13e4d15a77555715bd3" translate="yes" xml:space="preserve">
          <source>[Groovy] Class AnyTokenMatch</source>
          <target state="translated">[Groovy]类AnyTokenMatch</target>
        </trans-unit>
        <trans-unit id="a0029c505982113019ec68548afe0a1047bb0758" translate="yes" xml:space="preserve">
          <source>[Groovy] Class AstBrowser</source>
          <target state="translated">[Groovy]类AstBrowser</target>
        </trans-unit>
        <trans-unit id="5f13ae1b2ec556e17ad94fb208a53abea4551378" translate="yes" xml:space="preserve">
          <source>[Groovy] Class AstBuilder</source>
          <target state="translated">[Groovy]类AstBuilder</target>
        </trans-unit>
        <trans-unit id="51c0707069c894fa934eae9cdf4119773d3c5410" translate="yes" xml:space="preserve">
          <source>[Groovy] Class AstHelper</source>
          <target state="translated">[Groovy]类AstHelper</target>
        </trans-unit>
        <trans-unit id="32129b2ca08d004d6c200268121d030426cdbcc1" translate="yes" xml:space="preserve">
          <source>[Groovy] Class AstNodeToScriptAdapter</source>
          <target state="translated">[Groovy]类AstNodeToScriptAdapter</target>
        </trans-unit>
        <trans-unit id="6a5ffb5fe20deb6782272b7cc39e51c13eddc5ad" translate="yes" xml:space="preserve">
          <source>[Groovy] Class AstSpecificationCompiler</source>
          <target state="translated">[Groovy]类AstSpecificationCompiler</target>
        </trans-unit>
        <trans-unit id="999e57a8b6827ec9a7813cd10b28fb75046034af" translate="yes" xml:space="preserve">
          <source>[Groovy] Class AutoIndentAction</source>
          <target state="translated">[Groovy]类AutoIndentAction</target>
        </trans-unit>
        <trans-unit id="ecf1bf3186b368cfa39800036f64286b530f44ce" translate="yes" xml:space="preserve">
          <source>[Groovy] Class BackslashEscapeCompleter</source>
          <target state="translated">[Groovy]类BackslashEscapeCompleter</target>
        </trans-unit>
        <trans-unit id="56c58b600916a803684bf74258bac42ca0dbd055" translate="yes" xml:space="preserve">
          <source>[Groovy] Class BeanFactory</source>
          <target state="translated">[Groovy] BeanFactory类</target>
        </trans-unit>
        <trans-unit id="4d3efaeda4b5bae28f32fd188fd63f99f3c79028" translate="yes" xml:space="preserve">
          <source>[Groovy] Class BevelBorderFactory</source>
          <target state="translated">[Groovy]类BevelBorderFactory</target>
        </trans-unit>
        <trans-unit id="42023d19faf1fbf178d23dd4d6cd9d36d3a2ddce" translate="yes" xml:space="preserve">
          <source>[Groovy] Class BindFactory</source>
          <target state="translated">[Groovy]类BindFactory</target>
        </trans-unit>
        <trans-unit id="cd5ab13a15d4ad66fcc6ed3fda5c5b80ad262e39" translate="yes" xml:space="preserve">
          <source>[Groovy] Class BindGroupFactory</source>
          <target state="translated">[Groovy]类BindGroupFactory</target>
        </trans-unit>
        <trans-unit id="0e42692536b1eeeb8f674341610d8092f6c1944e" translate="yes" xml:space="preserve">
          <source>[Groovy] Class BindProxyFactory</source>
          <target state="translated">[Groovy]类BindProxyFactory</target>
        </trans-unit>
        <trans-unit id="6f35b26f65a86d2e3359e5054ef71f50ca1615fd" translate="yes" xml:space="preserve">
          <source>[Groovy] Class BoxFactory</source>
          <target state="translated">[Groovy]类BoxFactory</target>
        </trans-unit>
        <trans-unit id="01d6cda9d2c3769e8d96219acd048809e3cbcfe1" translate="yes" xml:space="preserve">
          <source>[Groovy] Class BoxLayoutFactory</source>
          <target state="translated">[Groovy]类BoxLayoutFactory</target>
        </trans-unit>
        <trans-unit id="e0ab39c131f83769bd8bd88d449c57396550123d" translate="yes" xml:space="preserve">
          <source>[Groovy] Class BufferManager</source>
          <target state="translated">[Groovy]类BufferManager</target>
        </trans-unit>
        <trans-unit id="02cbeb6b259da9f3d2b38bd2ed083e114985b60d" translate="yes" xml:space="preserve">
          <source>[Groovy] Class ButtonGroupFactory</source>
          <target state="translated">[Groovy]类ButtonGroupFactory</target>
        </trans-unit>
        <trans-unit id="ee31d7a2f949957df5d31829ebbf4c888a0b6d99" translate="yes" xml:space="preserve">
          <source>[Groovy] Class ButtonOrDefaultRenderer</source>
          <target state="translated">[Groovy]类ButtonOrDefaultRenderer</target>
        </trans-unit>
        <trans-unit id="e2c949a9b8b26288a10c3284b02b0c46bb494429" translate="yes" xml:space="preserve">
          <source>[Groovy] Class ButtonOrTextEditor</source>
          <target state="translated">[Groovy]类ButtonOrTextEditor</target>
        </trans-unit>
        <trans-unit id="915bef689aec9c3e7850d19b57d2ae609d6720d3" translate="yes" xml:space="preserve">
          <source>[Groovy] Class CellEditorFactory</source>
          <target state="translated">[Groovy]类CellEditorFactory</target>
        </trans-unit>
        <trans-unit id="39eb1a8f929063a5fcc800908731ed8c0feb04b0" translate="yes" xml:space="preserve">
          <source>[Groovy] Class ClearCommand</source>
          <target state="translated">[Groovy]类ClearCommand</target>
        </trans-unit>
        <trans-unit id="8a0322144d5421a6e226c4a34b254d7dad9e9d10" translate="yes" xml:space="preserve">
          <source>[Groovy] Class CliBuilder</source>
          <target state="translated">[Groovy]类CliBuilder</target>
        </trans-unit>
        <trans-unit id="954a85e8ff9c5f41013dd803ba47fb32c4ac444a" translate="yes" xml:space="preserve">
          <source>[Groovy] Class CliBuilderException</source>
          <target state="translated">[Groovy]类CliBuilderException</target>
        </trans-unit>
        <trans-unit id="ac1517d83f25ef650705f5f036f8da6b95932c3d" translate="yes" xml:space="preserve">
          <source>[Groovy] Class CliBuilderInternal</source>
          <target state="translated">[Groovy]类CliBuilderInternal</target>
        </trans-unit>
        <trans-unit id="61a732e6dd6e1f0ad053887ca5fc66d7cb77a820" translate="yes" xml:space="preserve">
          <source>[Groovy] Class ClosureCellEditor</source>
          <target state="translated">[Groovy]类ClosureCellEditor</target>
        </trans-unit>
        <trans-unit id="1abb259a16e6cf0f2f5a1cd644d423482395e140" translate="yes" xml:space="preserve">
          <source>[Groovy] Class CollectRecursiveCalls</source>
          <target state="translated">[Groovy]类CollectRecursiveCalls</target>
        </trans-unit>
        <trans-unit id="b739887915bc6029875a256837a6df03052b49b7" translate="yes" xml:space="preserve">
          <source>[Groovy] Class CollectionFactory</source>
          <target state="translated">[Groovy]类CollectionFactory</target>
        </trans-unit>
        <trans-unit id="d6b0a1a3fbcde40a20213d934f305937124e407c" translate="yes" xml:space="preserve">
          <source>[Groovy] Class ColumnFactory</source>
          <target state="translated">[Groovy]类ColumnFactory</target>
        </trans-unit>
        <trans-unit id="4ba33ed422c3ce861b3bec619052c68e6a0cfba6" translate="yes" xml:space="preserve">
          <source>[Groovy] Class ColumnModelFactory</source>
          <target state="translated">[Groovy]类ColumnModelFactory</target>
        </trans-unit>
        <trans-unit id="83499ef384c3b74ffffe19a03f0ba36c905e3fa4" translate="yes" xml:space="preserve">
          <source>[Groovy] Class ComboBoxFactory</source>
          <target state="translated">[Groovy] ComboBoxFactory类</target>
        </trans-unit>
        <trans-unit id="09f7469f831bd436accad8c14ff17b18c2b20ee2" translate="yes" xml:space="preserve">
          <source>[Groovy] Class CommandAlias</source>
          <target state="translated">[Groovy]类CommandAlias</target>
        </trans-unit>
        <trans-unit id="5a8639403803615d565f6171b0182c64ff3fd2ab" translate="yes" xml:space="preserve">
          <source>[Groovy] Class CommandArgumentParser</source>
          <target state="translated">[Groovy]类CommandArgumentParser</target>
        </trans-unit>
        <trans-unit id="d848ec9f249d1c13c84738ff115c0b3bdcce2b5f" translate="yes" xml:space="preserve">
          <source>[Groovy] Class CommandException</source>
          <target state="translated">[Groovy]类CommandException</target>
        </trans-unit>
        <trans-unit id="1a99e3c1b4ceeb8db0159293ed29e6d6e1134eb5" translate="yes" xml:space="preserve">
          <source>[Groovy] Class CommandNameCompleter</source>
          <target state="translated">[Groovy]类CommandNameCompleter</target>
        </trans-unit>
        <trans-unit id="db4c0b9a04f028fdbcc38baee0d0ad78bd710056" translate="yes" xml:space="preserve">
          <source>[Groovy] Class CommandRegistry</source>
          <target state="translated">[Groovy]类CommandRegistry</target>
        </trans-unit>
        <trans-unit id="58b3a112d87fc3f45858a72e25d32beb56d05360" translate="yes" xml:space="preserve">
          <source>[Groovy] Class CommandSupport</source>
          <target state="translated">[Groovy]类CommandSupport</target>
        </trans-unit>
        <trans-unit id="c4bdd079251cd4294cd2493fdd856e4771469625" translate="yes" xml:space="preserve">
          <source>[Groovy] Class CompilerCustomizationBuilder</source>
          <target state="translated">[Groovy]类CompilerCustomizationBuilder</target>
        </trans-unit>
        <trans-unit id="43a8deadaab38e8bf246d665798acf62a95cc538" translate="yes" xml:space="preserve">
          <source>[Groovy] Class ComplexCommandSupport</source>
          <target state="translated">[Groovy]类ComplexCommandSupport</target>
        </trans-unit>
        <trans-unit id="8de48738f36b7aece509a5ba2085488e8053049f" translate="yes" xml:space="preserve">
          <source>[Groovy] Class ComponentFactory</source>
          <target state="translated">[Groovy]类ComponentFactory</target>
        </trans-unit>
        <trans-unit id="a7486a753b87273513dcf1276a7011d8c0d8303c" translate="yes" xml:space="preserve">
          <source>[Groovy] Class CompoundBorderFactory</source>
          <target state="translated">[Groovy]类CompoundBorderFactory</target>
        </trans-unit>
        <trans-unit id="ce0c84a62c57593e47d8d81c9768b098d454139c" translate="yes" xml:space="preserve">
          <source>[Groovy] Class ConditionalInterruptibleASTTransformation</source>
          <target state="translated">[Groovy]类ConditionalInterruptibleASTTransformation</target>
        </trans-unit>
        <trans-unit id="2da9a021913dc7a6d46723dafea8a54e4c5d4da0" translate="yes" xml:space="preserve">
          <source>[Groovy] Class ConfigSlurper</source>
          <target state="translated">[Groovy]类ConfigSlurper</target>
        </trans-unit>
        <trans-unit id="55c7f1f052fdb3ed641f39b297bbf05340126fbe" translate="yes" xml:space="preserve">
          <source>[Groovy] Class Console</source>
          <target state="translated">[Groovy]类控制台</target>
        </trans-unit>
        <trans-unit id="45df95aad2410526086788b6920ace8919692506" translate="yes" xml:space="preserve">
          <source>[Groovy] Class ConsoleApplet</source>
          <target state="translated">[Groovy]类ConsoleApplet</target>
        </trans-unit>
        <trans-unit id="71a27ed115916217bb249d48afb55bcfaef1f235" translate="yes" xml:space="preserve">
          <source>[Groovy] Class ConsoleIvyPlugin</source>
          <target state="translated">[Groovy]类ConsoleIvyPlugin</target>
        </trans-unit>
        <trans-unit id="4effeaf03d38ff119d86bfe83c2293644d1c7f0d" translate="yes" xml:space="preserve">
          <source>[Groovy] Class ConsolePreferences</source>
          <target state="translated">[Groovy]类ConsolePreferences</target>
        </trans-unit>
        <trans-unit id="dc33829dd3cb5d941bf4ef8035e8856a5667bace" translate="yes" xml:space="preserve">
          <source>[Groovy] Class CurlyCountingGroovyLexer</source>
          <target state="translated">[Groovy]类CurlyCountingGroovyLexer</target>
        </trans-unit>
        <trans-unit id="0a6ab88fa6a55da14aecb0cef8e06c16dff444dc" translate="yes" xml:space="preserve">
          <source>[Groovy] Class CustomClassSyntaxCompleter</source>
          <target state="translated">[Groovy]类CustomClassSyntaxCompleter</target>
        </trans-unit>
        <trans-unit id="05e151ca8f815dbbd1a903fe3a868c31898c985e" translate="yes" xml:space="preserve">
          <source>[Groovy] Class CustomClassSyntaxCompletor</source>
          <target state="translated">[Groovy]类CustomClassSyntaxCompletor</target>
        </trans-unit>
        <trans-unit id="f0df0441267baea9a8e8bbe181cd4166bf439637" translate="yes" xml:space="preserve">
          <source>[Groovy] Class DefaultCommandsRegistrar</source>
          <target state="translated">[Groovy]类DefaultCommandsRegistrar</target>
        </trans-unit>
        <trans-unit id="6182455ebe70ec5ddb1b20c6f9c571da68f96bd4" translate="yes" xml:space="preserve">
          <source>[Groovy] Class Demand</source>
          <target state="translated">[Groovy]班级需求</target>
        </trans-unit>
        <trans-unit id="770d9e5906dd257b18a596da172194502ff16a85" translate="yes" xml:space="preserve">
          <source>[Groovy] Class DialogFactory</source>
          <target state="translated">[Groovy] DialogFactory类</target>
        </trans-unit>
        <trans-unit id="84f845704724cb37b0be4b72c0722056deefff81" translate="yes" xml:space="preserve">
          <source>[Groovy] Class DisplayCommand</source>
          <target state="translated">[Groovy]类DisplayCommand</target>
        </trans-unit>
        <trans-unit id="7d7020dc99e33f3da11fa02036761b4cde3641e9" translate="yes" xml:space="preserve">
          <source>[Groovy] Class DocCommand</source>
          <target state="translated">[Groovy] DocCommand类</target>
        </trans-unit>
        <trans-unit id="5d52a5e6013301a3f402e1d1f66e0c8a5d909ec4" translate="yes" xml:space="preserve">
          <source>[Groovy] Class DocGenerator</source>
          <target state="translated">[Groovy]类DocGenerator</target>
        </trans-unit>
        <trans-unit id="1194cfd2621f5ee44f8d4c8baa8dbdc108933a5b" translate="yes" xml:space="preserve">
          <source>[Groovy] Class EditCommand</source>
          <target state="translated">[Groovy]类EditCommand</target>
        </trans-unit>
        <trans-unit id="33b0116f21291019e0915c1171a497d0bcd3272c" translate="yes" xml:space="preserve">
          <source>[Groovy] Class EmptyBorderFactory</source>
          <target state="translated">[Groovy]类EmptyBorderFactory</target>
        </trans-unit>
        <trans-unit id="40e78aff53f43a6be403001c1f694d97f5237fd8" translate="yes" xml:space="preserve">
          <source>[Groovy] Class Entity</source>
          <target state="translated">[Groovy]类实体</target>
        </trans-unit>
        <trans-unit id="bb3bf8e1ac00a67733fde84c904862bafe741502" translate="yes" xml:space="preserve">
          <source>[Groovy] Class EtchedBorderFactory</source>
          <target state="translated">[Groovy]类EtchedBorderFactory</target>
        </trans-unit>
        <trans-unit id="40124fad729fff3daf37fceafd3b1802210a1595" translate="yes" xml:space="preserve">
          <source>[Groovy] Class ExitCommand</source>
          <target state="translated">[Groovy]类ExitCommand</target>
        </trans-unit>
        <trans-unit id="610b5fe589eabd1d7be4d1db811e381a8e478203" translate="yes" xml:space="preserve">
          <source>[Groovy] Class ExitNotification</source>
          <target state="translated">[Groovy]类ExitNotification</target>
        </trans-unit>
        <trans-unit id="18b7f23cf19a4ef138551b9498a5f3178250c3ec" translate="yes" xml:space="preserve">
          <source>[Groovy] Class FileNameByRegexFinder</source>
          <target state="translated">[Groovy]类FileNameByRegexFinder</target>
        </trans-unit>
        <trans-unit id="567aab3c45dafafb9acc8cf90e2ac8f6a8a7db10" translate="yes" xml:space="preserve">
          <source>[Groovy] Class FileNameCompleter</source>
          <target state="translated">[Groovy]类FileNameCompleter</target>
        </trans-unit>
        <trans-unit id="6c3b16c82a77887a682d869b9ea5361d7aef4d61" translate="yes" xml:space="preserve">
          <source>[Groovy] Class FileNameFinder</source>
          <target state="translated">[Groovy]类FileNameFinder</target>
        </trans-unit>
        <trans-unit id="01b32ecac9f69e23bfa665dcea1d64b54d2cc84a" translate="yes" xml:space="preserve">
          <source>[Groovy] Class FileTreeBuilder</source>
          <target state="translated">[Groovy]类FileTreeBuilder</target>
        </trans-unit>
        <trans-unit id="54942243102eb608c7ccbe198f4528c6f0c6f50e" translate="yes" xml:space="preserve">
          <source>[Groovy] Class FormattedTextFactory</source>
          <target state="translated">[Groovy]类FormattedTextFactory</target>
        </trans-unit>
        <trans-unit id="cf68e404f82d72c9fdb2294ac8277ff64adf9c64" translate="yes" xml:space="preserve">
          <source>[Groovy] Class FrameFactory</source>
          <target state="translated">[Groovy]类FrameFactory</target>
        </trans-unit>
        <trans-unit id="cd52c702de13d91709a6701aef2aa09e978a0916" translate="yes" xml:space="preserve">
          <source>[Groovy] Class GrabCommand</source>
          <target state="translated">[Groovy]类GrabCommand</target>
        </trans-unit>
        <trans-unit id="a9acd7bb8b88bd92eaed41d875674fa328b56351" translate="yes" xml:space="preserve">
          <source>[Groovy] Class GrapeIvy</source>
          <target state="translated">[Groovy]类别GrapeIvy</target>
        </trans-unit>
        <trans-unit id="6d9e78a2ecaf022461d1ed0912081e41441507a4" translate="yes" xml:space="preserve">
          <source>[Groovy] Class GrapeMain</source>
          <target state="translated">[Groovy]类别GrapeMain</target>
        </trans-unit>
        <trans-unit id="b5963a102693e979745a942ac9ce6589ba7b6658" translate="yes" xml:space="preserve">
          <source>[Groovy] Class GridBagFactory</source>
          <target state="translated">[Groovy] GridBagFactory类</target>
        </trans-unit>
        <trans-unit id="8a10840eed511e90d5ca8a84b9a6a8bafb763509" translate="yes" xml:space="preserve">
          <source>[Groovy] Class GroovyJUnitRunnerHelper</source>
          <target state="translated">[Groovy]类GroovyJUnitRunnerHelper</target>
        </trans-unit>
        <trans-unit id="c49a6722176ef6f9536dc798c91d99225d5fb35b" translate="yes" xml:space="preserve">
          <source>[Groovy] Class GroovyLogTestCase</source>
          <target state="translated">[Groovy]类GroovyLogTestCase</target>
        </trans-unit>
        <trans-unit id="01ed5e78ec110f1f8dfdb0cb4b23e59eb19b086a" translate="yes" xml:space="preserve">
          <source>[Groovy] Class GroovyShellTestCase</source>
          <target state="translated">[Groovy]类GroovyShellTestCase</target>
        </trans-unit>
        <trans-unit id="258799141c72638211f803aa66370903d4c41c4d" translate="yes" xml:space="preserve">
          <source>[Groovy] Class GroovySyntaxCompleter</source>
          <target state="translated">[Groovy]类GroovySyntaxCompleter</target>
        </trans-unit>
        <trans-unit id="5025e3e8448b8c20d91581c9091292c77514f52f" translate="yes" xml:space="preserve">
          <source>[Groovy] Class GroovySyntaxCompleter.InStringException</source>
          <target state="translated">[Groovy]类GroovySyntaxCompleter.InStringException</target>
        </trans-unit>
        <trans-unit id="0d75bc601bbae8762b797d03909d443c4a6d0b60" translate="yes" xml:space="preserve">
          <source>[Groovy] Class GroovySyntaxCompletor</source>
          <target state="translated">[Groovy]类GroovySyntaxCompletor</target>
        </trans-unit>
        <trans-unit id="b853a3a8afed0368e4e31f40db89ed05dfec024e" translate="yes" xml:space="preserve">
          <source>[Groovy] Class GroovySyntaxCompletor.InStringException</source>
          <target state="translated">[Groovy]类GroovySyntaxCompletor.InStringException</target>
        </trans-unit>
        <trans-unit id="29f6e15201a8a3df353e9990e7130a3a54ab3cba" translate="yes" xml:space="preserve">
          <source>[Groovy] Class Groovysh</source>
          <target state="translated">[Groovy]类Groovysh</target>
        </trans-unit>
        <trans-unit id="22b05a67f762cd073220712adcea6649d366b062" translate="yes" xml:space="preserve">
          <source>[Groovy] Class HasRecursiveCalls</source>
          <target state="translated">[Groovy]类HasRecursiveCalls</target>
        </trans-unit>
        <trans-unit id="7086c4c6472114d6d4a00c360226e00f06262153" translate="yes" xml:space="preserve">
          <source>[Groovy] Class HelpCommand</source>
          <target state="translated">[Groovy]类HelpCommand</target>
        </trans-unit>
        <trans-unit id="f89ced6d3197a9b0308442b0717c50f375718c4c" translate="yes" xml:space="preserve">
          <source>[Groovy] Class HistoryCommand</source>
          <target state="translated">[Groovy]类HistoryCommand</target>
        </trans-unit>
        <trans-unit id="c33341365b035f546f349f7ea5f82ea3010872a3" translate="yes" xml:space="preserve">
          <source>[Groovy] Class HistoryRecord</source>
          <target state="translated">[Groovy]类HistoryRecord</target>
        </trans-unit>
        <trans-unit id="7f9dee5b8ad7225e6b2634c31740f20513a0211c" translate="yes" xml:space="preserve">
          <source>[Groovy] Class Ignore</source>
          <target state="translated">[Groovy]类忽略</target>
        </trans-unit>
        <trans-unit id="bbb395ceb750c5165a617585c8be3def7530edcd" translate="yes" xml:space="preserve">
          <source>[Groovy] Class ImageIconFactory</source>
          <target state="translated">[Groovy]类ImageIconFactory</target>
        </trans-unit>
        <trans-unit id="43eac7b86032da1d2c14959765bd0db591ad4294" translate="yes" xml:space="preserve">
          <source>[Groovy] Class ImportCommand</source>
          <target state="translated">[Groovy]类ImportCommand</target>
        </trans-unit>
        <trans-unit id="2b2442c0f3546d31b3b9e6728db97df00d60c302" translate="yes" xml:space="preserve">
          <source>[Groovy] Class ImportsSyntaxCompleter</source>
          <target state="translated">[Groovy]类ImportsSyntaxCompleter</target>
        </trans-unit>
        <trans-unit id="20b6c496bd458474e59194fa9eef40a4874cc168" translate="yes" xml:space="preserve">
          <source>[Groovy] Class ImportsSyntaxCompletor</source>
          <target state="translated">[Groovy]类ImportsSyntaxCompletor</target>
        </trans-unit>
        <trans-unit id="272fa5763d34639ba24ade8f32328c5a3dae88b7" translate="yes" xml:space="preserve">
          <source>[Groovy] Class InWhileLoopWrapper</source>
          <target state="translated">[Groovy]类InWhileLoopWrapper</target>
        </trans-unit>
        <trans-unit id="df246db0c7d9c41106afbed8c29cee352cc62537" translate="yes" xml:space="preserve">
          <source>[Groovy] Class InfixKeywordSyntaxCompleter</source>
          <target state="translated">[Groovy]类InfixKeywordSyntaxCompleter</target>
        </trans-unit>
        <trans-unit id="37b5924587d7ade383a35faeb4c96d75cd72d510" translate="yes" xml:space="preserve">
          <source>[Groovy] Class InfixKeywordSyntaxCompletor</source>
          <target state="translated">[Groovy]类InfixKeywordSyntaxCompletor</target>
        </trans-unit>
        <trans-unit id="6626d790cca03f34969d7e892614c0b7953b3c18" translate="yes" xml:space="preserve">
          <source>[Groovy] Class InspectCommand</source>
          <target state="translated">[Groovy]类InspectCommand</target>
        </trans-unit>
        <trans-unit id="8b376b8b823fea80f6e2b89b7c1b103272811fdf" translate="yes" xml:space="preserve">
          <source>[Groovy] Class InteractiveShellRunner</source>
          <target state="translated">[Groovy]类InteractiveShellRunner</target>
        </trans-unit>
        <trans-unit id="f9ef724139360e06a6e7b1937ca69c9caa261c36" translate="yes" xml:space="preserve">
          <source>[Groovy] Class InternalFrameFactory</source>
          <target state="translated">[Groovy]类InternalFrameFactory</target>
        </trans-unit>
        <trans-unit id="e495df3e8a2797b28da82075a54bdb3b453f28bc" translate="yes" xml:space="preserve">
          <source>[Groovy] Class Interpreter</source>
          <target state="translated">[Groovy]类口译员</target>
        </trans-unit>
        <trans-unit id="10d111d761d82b3fd60039fc19a542b1e2e698f7" translate="yes" xml:space="preserve">
          <source>[Groovy] Class JComboBoxMetaMethods</source>
          <target state="translated">[Groovy]类JComboBoxMetaMethods</target>
        </trans-unit>
        <trans-unit id="50d8c89b37b85ad164f994118a4204c4aeaca087" translate="yes" xml:space="preserve">
          <source>[Groovy] Class JListMetaMethods</source>
          <target state="translated">[Groovy]类JListMetaMethods</target>
        </trans-unit>
        <trans-unit id="f2bcc45bd17df377506479ed2b20b4f03111ba01" translate="yes" xml:space="preserve">
          <source>[Groovy] Class JListProperties</source>
          <target state="translated">[Groovy]类JListProperties</target>
        </trans-unit>
        <trans-unit id="49684d3a8a404aaa6f60ed162c79ec0163cb285b" translate="yes" xml:space="preserve">
          <source>[Groovy] Class JListProperties.1</source>
          <target state="translated">[Groovy]类JListProperties.1</target>
        </trans-unit>
        <trans-unit id="e250355a49237e47c47a4e128f41ff31413d2791" translate="yes" xml:space="preserve">
          <source>[Groovy] Class JListProperties.2</source>
          <target state="translated">[Groovy]类JListProperties.2</target>
        </trans-unit>
        <trans-unit id="c5123518c12c17101702bc4d71f0cc28f7c84fe2" translate="yes" xml:space="preserve">
          <source>[Groovy] Class JListProperties.3</source>
          <target state="translated">[Groovy]类JListProperties.3</target>
        </trans-unit>
        <trans-unit id="9834991035978da7668b3bca7dbf43a376e5a010" translate="yes" xml:space="preserve">
          <source>[Groovy] Class JListProperties.4</source>
          <target state="translated">[Groovy]类JListProperties.4</target>
        </trans-unit>
        <trans-unit id="1102d8527aec608c15c96044fc68ee47ed521b97" translate="yes" xml:space="preserve">
          <source>[Groovy] Class JListProperties.5</source>
          <target state="translated">[Groovy]类JListProperties.5</target>
        </trans-unit>
        <trans-unit id="458df372b06bc3850e846e93e4f08c190a5eb563" translate="yes" xml:space="preserve">
          <source>[Groovy] Class JListProperties.6</source>
          <target state="translated">[Groovy]类JListProperties.6</target>
        </trans-unit>
        <trans-unit id="328805d477fb51162350a628740756395deb2fa2" translate="yes" xml:space="preserve">
          <source>[Groovy] Class JListProperties.7</source>
          <target state="translated">[Groovy]类JListProperties.7</target>
        </trans-unit>
        <trans-unit id="530ff944491e833a4fb028460dba4356020f045c" translate="yes" xml:space="preserve">
          <source>[Groovy] Class JTableMetaMethods</source>
          <target state="translated">[Groovy]类JTableMetaMethods</target>
        </trans-unit>
        <trans-unit id="0b76c4ff662043f35663f36ce57b9260fafcbf00" translate="yes" xml:space="preserve">
          <source>[Groovy] Class JavadocAssertionTestBuilder</source>
          <target state="translated">[Groovy]类JavadocAssertionTestBuilder</target>
        </trans-unit>
        <trans-unit id="a9566d69325267343a7ef5084d09870019650c9b" translate="yes" xml:space="preserve">
          <source>[Groovy] Class JavadocAssertionTestSuite</source>
          <target state="translated">[Groovy]类JavadocAssertionTestSuite</target>
        </trans-unit>
        <trans-unit id="c72a7fc6acbc130c31b90cfba2e0e1fadd397adf" translate="yes" xml:space="preserve">
          <source>[Groovy] Class JmxAttributeInfoManager</source>
          <target state="translated">[Groovy]类JmxAttributeInfoManager</target>
        </trans-unit>
        <trans-unit id="f94a6c4406d69a6efe6389b499daf703a4f36752" translate="yes" xml:space="preserve">
          <source>[Groovy] Class JmxBeanExportFactory</source>
          <target state="translated">[Groovy]类JmxBeanExportFactory</target>
        </trans-unit>
        <trans-unit id="b5a1976aefa3ab75abcf17cebb8be0ef682d74ce" translate="yes" xml:space="preserve">
          <source>[Groovy] Class JmxBeanFactory</source>
          <target state="translated">[Groovy]类JmxBeanFactory</target>
        </trans-unit>
        <trans-unit id="dc353bd69913711042306ec80a9f23ff4c89a68e" translate="yes" xml:space="preserve">
          <source>[Groovy] Class JmxBeanInfoManager</source>
          <target state="translated">[Groovy]类JmxBeanInfoManager</target>
        </trans-unit>
        <trans-unit id="8e19406a01b9092f06ffdc05557392d3f7b14ee5" translate="yes" xml:space="preserve">
          <source>[Groovy] Class JmxBeansFactory</source>
          <target state="translated">[Groovy]类JmxBeansFactory</target>
        </trans-unit>
        <trans-unit id="5907cf882848ccba613a0206fc8472eef2e64664" translate="yes" xml:space="preserve">
          <source>[Groovy] Class JmxBuilder</source>
          <target state="translated">[Groovy]类JmxBuilder</target>
        </trans-unit>
        <trans-unit id="133f4dab1625211eadf5f42a9c424a7ad9f7717b" translate="yes" xml:space="preserve">
          <source>[Groovy] Class JmxBuilderTools</source>
          <target state="translated">[Groovy]类JmxBuilderTools</target>
        </trans-unit>
        <trans-unit id="2d74cff854bab1a74b519f3fb78c6a2d449adcb8" translate="yes" xml:space="preserve">
          <source>[Groovy] Class JmxClientConnectorFactory</source>
          <target state="translated">[Groovy]类JmxClientConnectorFactory</target>
        </trans-unit>
        <trans-unit id="29eb263b1790248fd1fb363689da168b32118244" translate="yes" xml:space="preserve">
          <source>[Groovy] Class JmxEmitterFactory</source>
          <target state="translated">[Groovy]类JmxEmitterFactory</target>
        </trans-unit>
        <trans-unit id="6b571b3afe497926a476bf5c9b5d1ad0fdf6e213" translate="yes" xml:space="preserve">
          <source>[Groovy] Class JmxListenerFactory</source>
          <target state="translated">[Groovy]类JmxListenerFactory</target>
        </trans-unit>
        <trans-unit id="fbe7d0e25089f293a6860e5b9d0ec747543cdb7e" translate="yes" xml:space="preserve">
          <source>[Groovy] Class JmxMetaMapBuilder</source>
          <target state="translated">[Groovy]类JmxMetaMapBuilder</target>
        </trans-unit>
        <trans-unit id="608d53ff195fcb5054efbd095cb248c72760eed4" translate="yes" xml:space="preserve">
          <source>[Groovy] Class JmxOperationInfoManager</source>
          <target state="translated">[Groovy]类JmxOperationInfoManager</target>
        </trans-unit>
        <trans-unit id="09c6fe54e47744f9f1fe54bad84dc3c07bb31055" translate="yes" xml:space="preserve">
          <source>[Groovy] Class JmxServerConnectorFactory</source>
          <target state="translated">[Groovy]类JmxServerConnectorFactory</target>
        </trans-unit>
        <trans-unit id="e173ccd2fc6ad97e376b6ac789d8a691f8a40cd7" translate="yes" xml:space="preserve">
          <source>[Groovy] Class JmxTimerFactory</source>
          <target state="translated">[Groovy]类JmxTimerFactory</target>
        </trans-unit>
        <trans-unit id="7fa67170d9c2fe33cdbf425cbe8edb025674c898" translate="yes" xml:space="preserve">
          <source>[Groovy] Class KeywordSyntaxCompleter</source>
          <target state="translated">[Groovy]类KeywordSyntaxCompleter</target>
        </trans-unit>
        <trans-unit id="3ac1a7830b4d188b9f765ee21629b23dde492ffc" translate="yes" xml:space="preserve">
          <source>[Groovy] Class KeywordSyntaxCompletor</source>
          <target state="translated">[Groovy]类KeywordSyntaxCompletor</target>
        </trans-unit>
        <trans-unit id="7289d44490d482cc3cf864df64b39494277cc6da" translate="yes" xml:space="preserve">
          <source>[Groovy] Class LayoutFactory</source>
          <target state="translated">[Groovy]类LayoutFactory</target>
        </trans-unit>
        <trans-unit id="66368c8142a94855f1fc5b3a9354c90a04126ef2" translate="yes" xml:space="preserve">
          <source>[Groovy] Class LineBorderFactory</source>
          <target state="translated">[Groovy] LineBorderFactory类</target>
        </trans-unit>
        <trans-unit id="15988484586d3c958dc0cd3112dfc6e54af43ad2" translate="yes" xml:space="preserve">
          <source>[Groovy] Class ListFactory</source>
          <target state="translated">[Groovy]类ListFactory</target>
        </trans-unit>
        <trans-unit id="4de17cb1f498647638bbb765fe3b022dbb908d73" translate="yes" xml:space="preserve">
          <source>[Groovy] Class ListenerListASTTransformation</source>
          <target state="translated">[Groovy]类ListenerListASTTransformation</target>
        </trans-unit>
        <trans-unit id="c38546f5d754d86228af34bd3360e0e7306ece43" translate="yes" xml:space="preserve">
          <source>[Groovy] Class LoadCommand</source>
          <target state="translated">[Groovy]类LoadCommand</target>
        </trans-unit>
        <trans-unit id="60b80a0d171da1e2889eee068f498c756683baea" translate="yes" xml:space="preserve">
          <source>[Groovy] Class LookAndFeelHelper</source>
          <target state="translated">[Groovy]类LookAndFeelHelper</target>
        </trans-unit>
        <trans-unit id="281c39bb249cbf29de438674aafb839ebd28c0b9" translate="yes" xml:space="preserve">
          <source>[Groovy] Class LooseExpectation</source>
          <target state="translated">[Groovy]类LooseExpectation</target>
        </trans-unit>
        <trans-unit id="3b1c002c9f6767fe109599e344cf4cc778a6d24c" translate="yes" xml:space="preserve">
          <source>[Groovy] Class Main</source>
          <target state="translated">[Groovy]班级主要</target>
        </trans-unit>
        <trans-unit id="97128e78c470faca4f6ab0f6e76e48975c4ae317" translate="yes" xml:space="preserve">
          <source>[Groovy] Class MapFactory</source>
          <target state="translated">[Groovy] MapFactory类</target>
        </trans-unit>
        <trans-unit id="39d104fc4e9713dd461d78f3526a52ed40948801" translate="yes" xml:space="preserve">
          <source>[Groovy] Class MarkupTemplateTypeCheckingExtension</source>
          <target state="translated">[Groovy]类MarkupTemplateTypeCheckingExtension</target>
        </trans-unit>
        <trans-unit id="da1bcf008562403ca3dc14e6ce4ea1ef548fbaec" translate="yes" xml:space="preserve">
          <source>[Groovy] Class MarkupTemplateTypeCheckingExtension.1</source>
          <target state="translated">[Groovy]类MarkupTemplateTypeCheckingExtension.1</target>
        </trans-unit>
        <trans-unit id="28fc976905b1c8531171e275b8c2d4b73a68197f" translate="yes" xml:space="preserve">
          <source>[Groovy] Class MatchingConstraints</source>
          <target state="translated">[Groovy]类MatchingConstraints</target>
        </trans-unit>
        <trans-unit id="4fa4ed241033f456058c35658431fee3f47450f0" translate="yes" xml:space="preserve">
          <source>[Groovy] Class MatchingConstraintsBuilder</source>
          <target state="translated">[Groovy]类MatchingConstraintsBuilder</target>
        </trans-unit>
        <trans-unit id="ebf4b2e109dffa937bb6905fe86e867eb9fa6203" translate="yes" xml:space="preserve">
          <source>[Groovy] Class MatchingConstraintsBuilder.1</source>
          <target state="translated">[Groovy]类MatchingConstraintsBuilder.1</target>
        </trans-unit>
        <trans-unit id="3466977a9b245f1f73f8b59ca96de12a40b9b20b" translate="yes" xml:space="preserve">
          <source>[Groovy] Class MatchingConstraintsBuilder.2</source>
          <target state="translated">[Groovy]类MatchingConstraintsBuilder.2</target>
        </trans-unit>
        <trans-unit id="922aeb8c4f188f8c71edeea173e0eabb6ddcd275" translate="yes" xml:space="preserve">
          <source>[Groovy] Class MatteBorderFactory</source>
          <target state="translated">[Groovy] MatteBorderFactory类</target>
        </trans-unit>
        <trans-unit id="283f7b4558f1284cfd0c982606be688f372b2e4e" translate="yes" xml:space="preserve">
          <source>[Groovy] Class MockFor</source>
          <target state="translated">[Groovy]类模拟</target>
        </trans-unit>
        <trans-unit id="baf54e68e231423ec17694565bc2323d8fe3a2ea" translate="yes" xml:space="preserve">
          <source>[Groovy] Class MockInterceptor</source>
          <target state="translated">[Groovy]类MockInterceptor</target>
        </trans-unit>
        <trans-unit id="73bec6f370b87b41eeb023ad71033bb606d4c1d4" translate="yes" xml:space="preserve">
          <source>[Groovy] Class NavigablePropertiesCompleter</source>
          <target state="translated">[Groovy]类NavigablePropertiesCompleter</target>
        </trans-unit>
        <trans-unit id="c17eab34463d0e3c03d26ee5711e74efc8ff2a80" translate="yes" xml:space="preserve">
          <source>[Groovy] Class NoExitSecurityManager</source>
          <target state="translated">[Groovy]类NoExitSecurityManager</target>
        </trans-unit>
        <trans-unit id="2902fbb299fc75769ca4ba4119efda9a3d22a391" translate="yes" xml:space="preserve">
          <source>[Groovy] Class ObjectBrowser</source>
          <target state="translated">[Groovy]类ObjectBrowser</target>
        </trans-unit>
        <trans-unit id="ec44819380ededd05df9762187aba284dd881b0f" translate="yes" xml:space="preserve">
          <source>[Groovy] Class OptionAccessor</source>
          <target state="translated">[Groovy]类OptionAccessor</target>
        </trans-unit>
        <trans-unit id="4c10b232ced87951a5d876b29694646bd4f2f720" translate="yes" xml:space="preserve">
          <source>[Groovy] Class OutputTransforms</source>
          <target state="translated">[Groovy]类OutputTransforms</target>
        </trans-unit>
        <trans-unit id="d58b26df6527668ccf1ae4410ccd4e507ec29691" translate="yes" xml:space="preserve">
          <source>[Groovy] Class PackageHelperImpl</source>
          <target state="translated">[Groovy]类PackageHelperImpl</target>
        </trans-unit>
        <trans-unit id="1cbac8a185c08121bc0029c8a21c8cb5c5ade0b7" translate="yes" xml:space="preserve">
          <source>[Groovy] Class PurgeCommand</source>
          <target state="translated">[Groovy]类PurgeCommand</target>
        </trans-unit>
        <trans-unit id="d251be5058ea6be9e34baa60d2f950398c52a1ea" translate="yes" xml:space="preserve">
          <source>[Groovy] Class RecordCommand</source>
          <target state="translated">[Groovy]类RecordCommand</target>
        </trans-unit>
        <trans-unit id="7eadde31984aa34651237d6879e2844046b88b1d" translate="yes" xml:space="preserve">
          <source>[Groovy] Class RecursivenessTester</source>
          <target state="translated">[Groovy]类递归测试器</target>
        </trans-unit>
        <trans-unit id="99b8f56960e8bc0f619f61975ebaf5dbb56b1ac1" translate="yes" xml:space="preserve">
          <source>[Groovy] Class ReflectionCompleter</source>
          <target state="translated">[Groovy]类ReflectionCompleter</target>
        </trans-unit>
        <trans-unit id="682705e060d16c9a2e1a035cc412e399306fa4f0" translate="yes" xml:space="preserve">
          <source>[Groovy] Class ReflectionCompletionCandidate</source>
          <target state="translated">[Groovy]类ReflectionCompletionCandidate</target>
        </trans-unit>
        <trans-unit id="c348da96b1000d372723e17bdcdc2f5bed76b7b0" translate="yes" xml:space="preserve">
          <source>[Groovy] Class ReflectionCompletor</source>
          <target state="translated">[Groovy]类ReflectionCompletor</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
