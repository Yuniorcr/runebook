<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="zh-CN" datatype="htmlbody" original="groovy">
    <body>
      <group id="groovy">
        <trans-unit id="6143b810c6efb3a66c2ac1d6c778519178b8c8b8" translate="yes" xml:space="preserve">
          <source>Invokes the closure without any parameters, returning any value if applicable.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="32e9161bd52e974ebd912cdd0d9202925784f3d1" translate="yes" xml:space="preserve">
          <source>Invokes the closure, returning any value if applicable.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5d711cba6711c37b5cb755ae370df0e0fbbbe9b4" translate="yes" xml:space="preserve">
          <source>Invokes the given method on the object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="af4cf3122e2caae956faba39199c440b0a368632" translate="yes" xml:space="preserve">
          <source>Invokes the given method.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0afa3542871595c68576ba6b179a8f9d167acc02" translate="yes" xml:space="preserve">
          <source>Invokes the method this object represents.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6889f2a8e7046fafe03cfd05489f1962e2a3618d" translate="yes" xml:space="preserve">
          <source>Invokes the method this object represents. This method is not final but it should be overloaded very carefully and only by generated methods there is no guarantee that it will be called</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e5a0340ba45540ac3a08390d40d74f0e4213c3a5" translate="yes" xml:space="preserve">
          <source>Invokes the propertyMissing method otherwise throws a MissingPropertyException</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="164b6bc9bf371dcf1822b3f750c5a459c8eebebb" translate="yes" xml:space="preserve">
          <source>Is it a static method?</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b990de086a6348d547aa219b52e1dcffd07bd15f" translate="yes" xml:space="preserve">
          <source>Is this class declared in a static method (such as a closure / inner class declared in a static method)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a56535fd15aace7f0e649bf5abb87c57f181c53b" translate="yes" xml:space="preserve">
          <source>It accepts a ChildPropertySetter instance or a Closure.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3c02faf2dc80c741135fb70175f866ecc777eef1" translate="yes" xml:space="preserve">
          <source>It accepts a ClassNameResolver instance, a String, a Closure or a Map.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ff1f16c361a09300c507fa93065b28e928d1a9b6" translate="yes" xml:space="preserve">
          <source>It accepts a IdentifierResolver instance, a String or a Closure.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="73a010f2be2a1bc00280f0a556ebe588dade4924" translate="yes" xml:space="preserve">
          <source>It accepts a NewInstanceResolver instance or a Closure.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="27bb545a17e2c892e3d52fea39a6384257b46bc5" translate="yes" xml:space="preserve">
          <source>It accepts a ReferenceResolver instance, a String or a Closure.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5bd82319035b1b857cc002b400919671420acbeb" translate="yes" xml:space="preserve">
          <source>It allows you to write a method like this:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f4024a59393aea95751f9a0615b4b0433bcbaaf0" translate="yes" xml:space="preserve">
          <source>It allows you to write classes in this shortened form:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1eba16c9dc262e28dde6e87e538e4a888881b97a" translate="yes" xml:space="preserve">
          <source>It also generates the setter and wires the setter through the PropertyChangeSupport.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a3b83af30adc41753f8fe1f8b6805fd6b3aa3e1f" translate="yes" xml:space="preserve">
          <source>It also generates the setter and wires the setter through the VetoableChangeSupport.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="75f9238ce4b1ed5628ca3158b02ff9365f113618" translate="yes" xml:space="preserve">
          <source>It delegates work to a &lt;code&gt;groovy.text.TemplateEngine&lt;/code&gt; implementation processing HTTP requests.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ed4e1af7bb6bc5b6a644aedcb0f49c5c5ef9d257" translate="yes" xml:space="preserve">
          <source>It is a compilation error to place this annotation on a field (that is not a property, i.e. has scope visibility modifiers).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d49942d2294ad7c031fdb3510e66ee940b57541c" translate="yes" xml:space="preserve">
          <source>It is advisable not to use this hint as a replacement for the various &lt;a href=&quot;firstparam&quot;&gt;FirstParam&lt;/a&gt;, &lt;a href=&quot;simpletype&quot;&gt;SimpleType&lt;/a&gt;, ... hints because it is actually much slower. Using this hint should therefore be limited to cases where it's not possible to express the signature using the existing hints.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3d6e84c53af57cc1b5eb98b7a03d86bf3bfe6bc0" translate="yes" xml:space="preserve">
          <source>It is advised to use a distinct template instance for each thread (or more simply, each rendered document) for thread safety and avoiding mixing models.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c2ede2fb1c6e3ade9e82c5a9faf1bb12af891915" translate="yes" xml:space="preserve">
          <source>It is also sometimes also useful to use &lt;code&gt;@GrabConfig&lt;/code&gt; to further adjust how dependencies are grabbed. See &lt;code&gt;@GrabConfig&lt;/code&gt; for further information.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="261f63051be47c5ee925538c8da66086315e5938" translate="yes" xml:space="preserve">
          <source>It is not necessary to override &lt;code&gt;hashCode&lt;/code&gt;, as &lt;a href=&quot;https://docs.oracle.com/javase/8/docs/api/java/util/AbstractList.html#hashCode()&quot;&gt;AbstractList.hashCode&lt;/a&gt; provides a suitable hash code.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2bfad3f9ba8b9fe0444eb85eefd838203a07b767" translate="yes" xml:space="preserve">
          <source>It is not safe to call this method without a &lt;code&gt;Class&lt;/code&gt; associated with this &lt;code&gt;ClassInfo&lt;/code&gt;. It is advisable to aways retrieve a ClassInfo instance from the cache by using the static factory method &lt;a href=&quot;classinfo#getClassInfo(java.lang.Class)&quot;&gt;ClassInfo.getClassInfo&lt;/a&gt; to ensure the referenced Class is strongly reachable.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a2c8c88171c698df977a1ff1a8262a323c3d4bbf" translate="yes" xml:space="preserve">
          <source>It is of a BigDecimal category, if the provided type is a BigInteger category or a BigDecimal.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f188a547a4742022a6cc2431bc8ffb1ece0df4d7" translate="yes" xml:space="preserve">
          <source>It is of a BigInteger category, if the provided type is a long category or a BigInteger.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="be444ff132ac19b03670f3d8807c4087792c1d36" translate="yes" xml:space="preserve">
          <source>It is of a double category, if the provided type is a BigDecimal, a float, double.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b048d7cb3bb5e680be1362ddc1b36edf1280a028" translate="yes" xml:space="preserve">
          <source>It is of a double category, if the provided type is a BigDecimal, a float, double. C(type)=double</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b7d2cd6a6490a56fcefeaeb6eb2a5f98ac5e410d" translate="yes" xml:space="preserve">
          <source>It is of a floating category, if the provided type is a a float, double.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2c3d971bb4fb58b8ee2b32828a13558f49fb6cd3" translate="yes" xml:space="preserve">
          <source>It is of a floating category, if the provided type is a a float, double. C(type)=float</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e61d68b0390d179a043d25b2e5ef7e166467b13e" translate="yes" xml:space="preserve">
          <source>It is of a long category, if the provided type is a long, its wrapper or if it is a long category.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="596472a7e9132e823cd8ecf5bbabfec4ae8317f5" translate="yes" xml:space="preserve">
          <source>It is of an int category, if the provided type is a byte, char, short, int.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aa0f20608b1af22064aac35c222b27185861cab3" translate="yes" xml:space="preserve">
          <source>It is worth noting that writable implementations often override their toString() implementation as well to allow rendering the same result directly to a String; however this is not required.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bcd59c4cf68fd8179e4bd57d059fa05c3c6064a8" translate="yes" xml:space="preserve">
          <source>It might seem strange writing your class/object enhancements using a succinct notation, then having &quot;noise&quot; added, then having the noise removed during category application. If this worries you, then you may also like to consider using Groovy's &lt;code&gt;ExpandoMetaClass&lt;/code&gt; mechanism which avoids the category definition altogether. If you already have an investment in categories or like some of the other features which categories currently give you, then read on.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5d0a88c6c677a5a62b61a2dd4b1f1e97a32aa3c0" translate="yes" xml:space="preserve">
          <source>It will assign DefaultChildPropertySetter if null.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="57bb520907774f65531ced98943d3d034f6e77d3" translate="yes" xml:space="preserve">
          <source>It will assign DefaultClassNameResolver if null.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8bd6f4174cced852dd15fb06a94baf9dc04a156e" translate="yes" xml:space="preserve">
          <source>It will assign DefaultIdentifierResolver if null.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0ea0edee7b66131cb3275efd227bf5df0fdfd5a9" translate="yes" xml:space="preserve">
          <source>It will assign DefaultNewInstanceResolver if null.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8782c289e99d816f8ed389553b3f8e6844ed804b" translate="yes" xml:space="preserve">
          <source>It will assign DefaultReferenceResolver if null.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="09ad431b9589d7dc00add282452d43775cd82b28" translate="yes" xml:space="preserve">
          <source>It will assign DefaultRelationNameResolver if null.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0641be14720286a6968465f64b94db8e74685075" translate="yes" xml:space="preserve">
          <source>It will call any registered postInstantiateDelegates, if you override this method be sure to call this impl somewhere in your code.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="898a93fff18dbc8bbcbbf82355c45c6d63de3a11" translate="yes" xml:space="preserve">
          <source>It will call any registered postNodeCompletionDelegates, if you override this method be sure to call this impl at the end of your code.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e9cc04bf8fb509476bc9285adac7503f4f28103b" translate="yes" xml:space="preserve">
          <source>It will call any registered preInstantiateDelegates, if you override this method be sure to call this impl somewhere in your code.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7debfaccbc8876f5e294036133e69a92477fed05" translate="yes" xml:space="preserve">
          <source>It will call attributeDelegates before passing control to the factory that built the node.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="578a420584af79344327f1fec0723bda8be6db7e" translate="yes" xml:space="preserve">
          <source>It's attached to MethodNodes and ClassNodes and is used to find fully qualified names of classes, resolve imports, and that sort of thing.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f3d232335f1cb1dac186ec8db4f3481391ee6356" translate="yes" xml:space="preserve">
          <source>It's inspired from the Jython engine</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="249021626b31ab0552137b83d7a6950e097235a3" translate="yes" xml:space="preserve">
          <source>It's possible to add urls to the classpath at runtime through &lt;a href=&quot;#addURL(java.net.URL)&quot;&gt;addURL(URL)&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="273499043233be1f3f5933377eea20cb9e29ec3d" translate="yes" xml:space="preserve">
          <source>It's the only Expression type in which replacing is considered.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fbc3d62fe2322bfc50f743fbdf0c10adbbd15463" translate="yes" xml:space="preserve">
          <source>It's the only Expression type in which replacing is considered. That's an abuse of the class, but I couldn't think of a better way.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="35c9b32e7e76de04973e8447139202ccab07dc82" translate="yes" xml:space="preserve">
          <source>Items in the given range are replaced with items from the collection.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="437382d4521b01b4dc0dea65494930c6f12e1073" translate="yes" xml:space="preserve">
          <source>Items in the given range are replaced with the operand. The &lt;code&gt;value&lt;/code&gt; operand is always treated as a single value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="08ca6a3da933ca6826a2f4d3fcc919af71d7e380" translate="yes" xml:space="preserve">
          <source>Iterable</source>
          <target state="translated">Iterable</target>
        </trans-unit>
        <trans-unit id="b089ba8db303879b75d7d0b1688263ae572af394" translate="yes" xml:space="preserve">
          <source>Iterate over each element of the array in the reverse order.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cfb2b3ccbc4359ff8bfbf023e7845049341bd21a" translate="yes" xml:space="preserve">
          <source>Iterate over each element of the list in the reverse order.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="410054be64e031d066f1ad249d6d8904f1ee3a4e" translate="yes" xml:space="preserve">
          <source>Iterates from the date represented by this calendar up to the date represented by the given calendar, inclusive, incrementing by one day each time.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="97db36f6d01cb79ceaf78751b918133639a1b1cf" translate="yes" xml:space="preserve">
          <source>Iterates from this date down to the given date, inclusive, decrementing by one day each time.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c9a4737c8c03a0eb6e53b801ba1b7a9fc33415ad" translate="yes" xml:space="preserve">
          <source>Iterates from this date up to the given date, inclusive, incrementing by one day each time.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ada072fafc63dc707bcb335d3543b2b5486dd8ba" translate="yes" xml:space="preserve">
          <source>Iterates from this number down to the given number, inclusive, decrementing by one each time.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1f51b8a877bf5b97db97f7306ae6334935c80819" translate="yes" xml:space="preserve">
          <source>Iterates from this number down to the given number, inclusive, decrementing by one each time. Each number is passed to the closure. Example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="170fb443f007ab7ef0e24a97807eb612e5442537" translate="yes" xml:space="preserve">
          <source>Iterates from this number up to the given number using a step increment.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="47ab93e45afbb40a907e3318d58f8ec3dd28e3d3" translate="yes" xml:space="preserve">
          <source>Iterates from this number up to the given number using a step increment. Each intermediate number is passed to the given closure. Example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="418b57896ccbb508c4a18bbd61018da78f03d807" translate="yes" xml:space="preserve">
          <source>Iterates from this number up to the given number, inclusive, incrementing by one each time.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d08c5d2aa525ed8c0518de9068811d206097d417" translate="yes" xml:space="preserve">
          <source>Iterates from this number up to the given number, inclusive, incrementing by one each time. Example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d1384ae597d8b786df484ca5393b12c4fb2c4ed3" translate="yes" xml:space="preserve">
          <source>Iterates from this to the &lt;code&gt;to&lt;/code&gt;&lt;a href=&quot;https://docs.oracle.com/javase/8/docs/api/java/time/temporal/Temporal.html&quot;&gt;Temporal&lt;/a&gt;, inclusive, decrementing by one &lt;code&gt;unit&lt;/code&gt; each iteration, calling the closure once per iteration.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cc6572c1def7ce6fee49623a5e067d4bde311154" translate="yes" xml:space="preserve">
          <source>Iterates from this to the &lt;code&gt;to&lt;/code&gt;&lt;a href=&quot;https://docs.oracle.com/javase/8/docs/api/java/time/temporal/Temporal.html&quot;&gt;Temporal&lt;/a&gt;, inclusive, decrementing by one &lt;code&gt;unit&lt;/code&gt; each iteration, calling the closure once per iteration. The closure may accept a single &lt;a href=&quot;https://docs.oracle.com/javase/8/docs/api/java/time/temporal/Temporal.html&quot;&gt;Temporal&lt;/a&gt; argument.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ae365e8c67b56df55db3b3312498dcedd5353b0e" translate="yes" xml:space="preserve">
          <source>Iterates from this to the &lt;code&gt;to&lt;/code&gt;&lt;a href=&quot;https://docs.oracle.com/javase/8/docs/api/java/time/temporal/Temporal.html&quot;&gt;Temporal&lt;/a&gt;, inclusive, decrementing by one unit each iteration, calling the closure once per iteration.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c8d8aba25ccc293b7cb66666ab01b3089aa08f72" translate="yes" xml:space="preserve">
          <source>Iterates from this to the &lt;code&gt;to&lt;/code&gt;&lt;a href=&quot;https://docs.oracle.com/javase/8/docs/api/java/time/temporal/Temporal.html&quot;&gt;Temporal&lt;/a&gt;, inclusive, decrementing by one unit each iteration, calling the closure once per iteration. The closure may accept a single &lt;a href=&quot;https://docs.oracle.com/javase/8/docs/api/java/time/temporal/Temporal.html&quot;&gt;Temporal&lt;/a&gt; argument.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="587368330d036d9b93db903000592c59ac7f7f09" translate="yes" xml:space="preserve">
          <source>Iterates from this to the &lt;code&gt;to&lt;/code&gt;&lt;a href=&quot;https://docs.oracle.com/javase/8/docs/api/java/time/temporal/Temporal.html&quot;&gt;Temporal&lt;/a&gt;, inclusive, incrementing by one &lt;code&gt;unit&lt;/code&gt; each iteration, calling the closure once per iteration.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bf4483c69f0848f5964dcbb93619f678d2a59cb1" translate="yes" xml:space="preserve">
          <source>Iterates from this to the &lt;code&gt;to&lt;/code&gt;&lt;a href=&quot;https://docs.oracle.com/javase/8/docs/api/java/time/temporal/Temporal.html&quot;&gt;Temporal&lt;/a&gt;, inclusive, incrementing by one &lt;code&gt;unit&lt;/code&gt; each iteration, calling the closure once per iteration. The closure may accept a single &lt;a href=&quot;https://docs.oracle.com/javase/8/docs/api/java/time/temporal/Temporal.html&quot;&gt;Temporal&lt;/a&gt; argument.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cf4c52d65c30eb04ee055328c1eb16f11c14d242" translate="yes" xml:space="preserve">
          <source>Iterates from this to the &lt;code&gt;to&lt;/code&gt;&lt;a href=&quot;https://docs.oracle.com/javase/8/docs/api/java/time/temporal/Temporal.html&quot;&gt;Temporal&lt;/a&gt;, inclusive, incrementing by one unit each iteration, calling the closure once per iteration.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="58d7b0342094989389dfa64ca2f2b207982dc7e4" translate="yes" xml:space="preserve">
          <source>Iterates from this to the &lt;code&gt;to&lt;/code&gt;&lt;a href=&quot;https://docs.oracle.com/javase/8/docs/api/java/time/temporal/Temporal.html&quot;&gt;Temporal&lt;/a&gt;, inclusive, incrementing by one unit each iteration, calling the closure once per iteration. The closure may accept a single &lt;a href=&quot;https://docs.oracle.com/javase/8/docs/api/java/time/temporal/Temporal.html&quot;&gt;Temporal&lt;/a&gt; argument.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="97bee5c578f16efd8c5ec975af41e9f9533591ae" translate="yes" xml:space="preserve">
          <source>Iterates over all permutations of a collection, running a closure for each iteration.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d40047ce3a786020ec1527b398dc9de87c3d29e7" translate="yes" xml:space="preserve">
          <source>Iterates over all values and returns true if one value matches.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="67f3dfe42b289eac3c5e5812752654f9f127d717" translate="yes" xml:space="preserve">
          <source>Iterates over every element of a collection, and checks whether all elements are &lt;code&gt;true&lt;/code&gt; according to the Groovy Truth.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bf5ff635e69bbc840e341e9ac0d37759bfe2741a" translate="yes" xml:space="preserve">
          <source>Iterates over every element of a collection, and checks whether all elements are &lt;code&gt;true&lt;/code&gt; according to the Groovy Truth. Equivalent to &lt;code&gt;self.every({element &lt;code&gt;-&amp;gt;&lt;/code&gt; element})&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ef5c5c47b30dd43d5acd60a66c12e23a4397de78" translate="yes" xml:space="preserve">
          <source>Iterates over the array of items and returns a collection of items that match the given filter - calling the &lt;code&gt;&lt;a href=&quot;#isCase(java.lang.Object,%20java.lang.Object)&quot;&gt;isCase(java.lang.Object, java.lang.Object)&lt;/a&gt;&lt;/code&gt; method used by switch statements.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d346384bad8fb98cfe0dfcdd5e01b64ea8de3808" translate="yes" xml:space="preserve">
          <source>Iterates over the array of items and returns a collection of items that match the given filter - calling the &lt;code&gt;&lt;a href=&quot;#isCase(java.lang.Object,%20java.lang.Object)&quot;&gt;isCase(java.lang.Object, java.lang.Object)&lt;/a&gt;&lt;/code&gt; method used by switch statements. This method can be used with different kinds of filters like regular expressions, classes, ranges etc. Example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bda29d57775ad87cac9550c97b81eb748feda935" translate="yes" xml:space="preserve">
          <source>Iterates over the array returning each element that matches using the IDENTITY Closure as a filter - effectively returning all elements which satisfy Groovy truth.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7bf2e9fd792b7caff8d5537cef4aca32cb645386" translate="yes" xml:space="preserve">
          <source>Iterates over the collection of items and returns each item that matches the given filter - calling the &lt;code&gt;&lt;a href=&quot;#isCase(java.lang.Object,%20java.lang.Object)&quot;&gt;isCase(java.lang.Object, java.lang.Object)&lt;/a&gt;&lt;/code&gt; method used by switch statements.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7a75a63137f6569e36cc51b47572ebb3c046b683" translate="yes" xml:space="preserve">
          <source>Iterates over the collection of items and returns each item that matches the given filter - calling the &lt;code&gt;&lt;a href=&quot;#isCase(java.lang.Object,%20java.lang.Object)&quot;&gt;isCase(java.lang.Object, java.lang.Object)&lt;/a&gt;&lt;/code&gt; method used by switch statements. This method can be used with different kinds of filters like regular expressions, classes, ranges etc. Example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="daa8ed48a53eb4d48cb9c90c83a0973c2807b176" translate="yes" xml:space="preserve">
          <source>Iterates over the collection of items and returns each item that matches the given filter - calling the &lt;code&gt;&lt;a href=&quot;#isCase(java.lang.Object,%20java.lang.Object)&quot;&gt;isCase(java.lang.Object, java.lang.Object)&lt;/a&gt;&lt;/code&gt; method used by switch statements. method can be used with different kinds of filters like regular expressions, classes, ranges etc.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ef9a6f72598e44a0e3eef660e357992e552b6938" translate="yes" xml:space="preserve">
          <source>Iterates over the collection of items and returns each item that matches the given filter - calling the &lt;code&gt;&lt;a href=&quot;#isCase(java.lang.Object,%20java.lang.Object)&quot;&gt;isCase(java.lang.Object, java.lang.Object)&lt;/a&gt;&lt;/code&gt; method used by switch statements. method can be used with different kinds of filters like regular expressions, classes, ranges etc. Example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="119b25f262491aeb583114cdd31bc4fd56ec20be" translate="yes" xml:space="preserve">
          <source>Iterates over the collection of items which this Object represents and returns each item that matches the given filter - calling the &lt;code&gt;&lt;a href=&quot;#isCase(java.lang.Object,%20java.lang.Object)&quot;&gt;isCase(java.lang.Object, java.lang.Object)&lt;/a&gt;&lt;/code&gt; method used by switch statements.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9d351e9750ced95d7692de784a56ef612f0cdd47" translate="yes" xml:space="preserve">
          <source>Iterates over the collection of items which this Object represents and returns each item that matches the given filter - calling the &lt;code&gt;&lt;a href=&quot;#isCase(java.lang.Object,%20java.lang.Object)&quot;&gt;isCase(java.lang.Object, java.lang.Object)&lt;/a&gt;&lt;/code&gt; method used by switch statements. This method can be used with different kinds of filters like regular expressions, classes, ranges etc. Example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="da4f64c1068c70754db3f217d92acde149117d07" translate="yes" xml:space="preserve">
          <source>Iterates over the collection of items which this Object represents and returns each item that matches using the IDENTITY Closure as a filter - effectively returning all elements which satisfy Groovy truth.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1068d7e4c40f1e1c89dac63a34cf491eaf245c48" translate="yes" xml:space="preserve">
          <source>Iterates over the collection returning each element that matches using the IDENTITY Closure as a filter - effectively returning all elements which satisfy Groovy truth.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="82662877d956d45b80c1c76962c660ad60c5935b" translate="yes" xml:space="preserve">
          <source>Iterates over the contents of an Array, and checks whether a predicate is valid for at least one element.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="74a569b8a2b7345b2ff20a017eca0e390ab64c29" translate="yes" xml:space="preserve">
          <source>Iterates over the contents of an iterable, and checks whether a predicate is valid for at least one element.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b8b64cdb2d0728e15556c9ecf2650794ef54b913" translate="yes" xml:space="preserve">
          <source>Iterates over the contents of an iterator, and checks whether a predicate is valid for at least one element.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ff1af45f52b70c83789d57b8144964b4ca0e7e85" translate="yes" xml:space="preserve">
          <source>Iterates over the contents of an object or collection, and checks whether a predicate is valid for at least one element.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="19bd5b1ae8bea2a8451e4cff26eeb75785e639af" translate="yes" xml:space="preserve">
          <source>Iterates over the elements of a collection, and checks whether at least one element is true according to the Groovy Truth.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ddef9cd91984140d84116e9bdcd22342e4ea05da" translate="yes" xml:space="preserve">
          <source>Iterates over the elements of a collection, and checks whether at least one element is true according to the Groovy Truth. Equivalent to self.any({element &lt;code&gt;-&amp;gt;&lt;/code&gt; element})</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8410ae91e8146910294c4079c38efb1bc91cd22c" translate="yes" xml:space="preserve">
          <source>Iterates over the elements of an Array and returns the index of the first item that satisfies the condition specified by the closure.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cbdc0089d10a050a94fe298ccd627c376a9c9667" translate="yes" xml:space="preserve">
          <source>Iterates over the elements of an Array and returns the index of the last item that matches the condition specified in the closure.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c2e39413c60ff725c8f6f401c12216444ee6e305" translate="yes" xml:space="preserve">
          <source>Iterates over the elements of an Array and returns the index values of the items that match the condition specified in the closure.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e07ddcc2d3f075f8aa9880030569ece2c05f7fe2" translate="yes" xml:space="preserve">
          <source>Iterates over the elements of an Array, starting from a specified startIndex, and returns the index of the first item that satisfies the condition specified by the closure.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b15eebe808421283dafde174ac8e038c3b233168" translate="yes" xml:space="preserve">
          <source>Iterates over the elements of an Array, starting from a specified startIndex, and returns the index of the last item that matches the condition specified in the closure.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="858aaa3a3eae2bf6e2f6f7cc8a31a120a9cb298b" translate="yes" xml:space="preserve">
          <source>Iterates over the elements of an Array, starting from a specified startIndex, and returns the index values of the items that match the condition specified in the closure.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9449d4c2c2adae5c6176dc53c06b14b1d3fb725e" translate="yes" xml:space="preserve">
          <source>Iterates over the elements of an Iterable and returns the index of the first item that satisfies the condition specified by the closure.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4aa0f88bc5f5485b88c11cfd85c7b0785a6c29bc" translate="yes" xml:space="preserve">
          <source>Iterates over the elements of an Iterable and returns the index of the last item that matches the condition specified in the closure.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4183a1d4f863bcbd968c4e4def3fb25977acdc26" translate="yes" xml:space="preserve">
          <source>Iterates over the elements of an Iterable and returns the index values of the items that match the condition specified in the closure.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b4dd38e8961cc94552f1d84e1048b625c02ab354" translate="yes" xml:space="preserve">
          <source>Iterates over the elements of an Iterable, starting from a specified startIndex, and returns the index of the first item that satisfies the condition specified by the closure.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6007b9fe0ecd53eb26706a712937727620580b92" translate="yes" xml:space="preserve">
          <source>Iterates over the elements of an Iterable, starting from a specified startIndex, and returns the index of the last item that matches the condition specified in the closure.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="240b99b0ec7a326077dc882ab7a6d91d93181b27" translate="yes" xml:space="preserve">
          <source>Iterates over the elements of an Iterable, starting from a specified startIndex, and returns the index values of the items that match the condition specified in the closure.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="253b6b2e28c93ea232822fac57869ade5f7206a8" translate="yes" xml:space="preserve">
          <source>Iterates over the elements of an Iterator and returns the index of the first item that satisfies the condition specified by the closure.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="599313ea8edb60deddad43319b665fd90bde0a44" translate="yes" xml:space="preserve">
          <source>Iterates over the elements of an Iterator and returns the index of the last item that matches the condition specified in the closure.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9d131d6cd34b7950802474ba7ebb739ed943b171" translate="yes" xml:space="preserve">
          <source>Iterates over the elements of an Iterator and returns the index values of the items that match the condition specified in the closure.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="802d61e633d444b77313c52625ac6293b530d0ee" translate="yes" xml:space="preserve">
          <source>Iterates over the elements of an Iterator, starting from a specified startIndex, and returns the index of the first item that satisfies the condition specified by the closure.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d5e10cadb60839e1f4df6901f3c39d4132759549" translate="yes" xml:space="preserve">
          <source>Iterates over the elements of an Iterator, starting from a specified startIndex, and returns the index of the last item that matches the condition specified in the closure.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4853026521b1671081bd878c1da9492295b4d7b2" translate="yes" xml:space="preserve">
          <source>Iterates over the elements of an Iterator, starting from a specified startIndex, and returns the index values of the items that match the condition specified in the closure.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f3887be5da83a8cd03bc6faab53e83ddedc20dc0" translate="yes" xml:space="preserve">
          <source>Iterates over the elements of an aggregate of items and returns the index of the first item that matches the condition specified in the closure.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="947d4fd8f71389ff5d81ad035f1ebea634b4b5f8" translate="yes" xml:space="preserve">
          <source>Iterates over the elements of an aggregate of items and returns the index of the last item that matches the condition specified in the closure.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c317e11a8fbb321b998bb3230a0b716f04318202" translate="yes" xml:space="preserve">
          <source>Iterates over the elements of an aggregate of items and returns the index of the last item that matches the condition specified in the closure. Example (aggregate is &lt;code&gt;ChronoUnit&lt;/code&gt; enum values):</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="489cc867e87591db76a6c6adf1fd417f38d60c57" translate="yes" xml:space="preserve">
          <source>Iterates over the elements of an aggregate of items and returns the index values of the items that match the condition specified in the closure.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f54dc363cdc6a1b2efa35f38284eaad6cfbb9eb1" translate="yes" xml:space="preserve">
          <source>Iterates over the elements of an aggregate of items, starting from a specified startIndex, and returns the index of the first item that matches the condition specified in the closure.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="79ce36173daca2976eb53932861cb5988452a31b" translate="yes" xml:space="preserve">
          <source>Iterates over the elements of an aggregate of items, starting from a specified startIndex, and returns the index of the first item that matches the condition specified in the closure. Example (aggregate is &lt;code&gt;ChronoUnit&lt;/code&gt; enum values):</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="923534068dc426f071144c5c8b6408b9729379a6" translate="yes" xml:space="preserve">
          <source>Iterates over the elements of an aggregate of items, starting from a specified startIndex, and returns the index of the last item that matches the condition specified in the closure.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1012ac301c05a09c0dfee8a168b30c357a595d21" translate="yes" xml:space="preserve">
          <source>Iterates over the elements of an aggregate of items, starting from a specified startIndex, and returns the index values of the items that match the condition specified in the closure.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b8ca4212f5ced48818b38ba8fced25d5fee4ca08" translate="yes" xml:space="preserve">
          <source>Iterates over the entries of a map, and checks whether a predicate is valid for all entries.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4296b39b6017b1cf12cd6359b0946bde354fdf7c" translate="yes" xml:space="preserve">
          <source>Iterates over the entries of a map, and checks whether a predicate is valid for all entries. If the closure takes one parameter then it will be passed the Map.Entry otherwise if the closure takes two parameters then it will be passed the key and the value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ff11b041d467eea87db6d4a6e05e8aa646768b39" translate="yes" xml:space="preserve">
          <source>Iterates over the entries of a map, and checks whether a predicate is valid for at least one entry.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8b951996a6dd774d25fbbf58f5c2f664e6bf4b6c" translate="yes" xml:space="preserve">
          <source>Iterates over the entries of a map, and checks whether a predicate is valid for at least one entry. If the closure takes one parameter then it will be passed the Map.Entry otherwise if the closure takes two parameters then it will be passed the key and the value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f387abe9b29f03ba4cb2fff3bb7c6343abd3f5ac" translate="yes" xml:space="preserve">
          <source>Iterates through a Collection, passing each item and the item's index (a counter starting at zero) to the given closure.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c408237c82d3c9229e26578b2aaae965221977d6" translate="yes" xml:space="preserve">
          <source>Iterates through a Collection, passing each item to the given closure.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="699403e1c87b18c791cf08aee60660ff58f22410" translate="yes" xml:space="preserve">
          <source>Iterates through a List, passing each item and the item's index (a counter starting at zero) to the given closure.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="959deea74a0ff56a75e9afdb0fa215ad45a7a58d" translate="yes" xml:space="preserve">
          <source>Iterates through a List, passing each item to the given closure.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0aed3b8e0e0fac9fbe343ad357aa1b091e5c266f" translate="yes" xml:space="preserve">
          <source>Iterates through a Set, passing each item and the item's index (a counter starting at zero) to the given closure.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7ffaa56fc764f34281b63f3ef1161b1f4e2d7dbd" translate="yes" xml:space="preserve">
          <source>Iterates through a Set, passing each item to the given closure.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fe8f535d39190b8c25a8b76215097f0e4e0eb0d6" translate="yes" xml:space="preserve">
          <source>Iterates through a SortedSet, passing each item and the item's index (a counter starting at zero) to the given closure.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="527059fbf4387032887bd1e5bd3877a0ac11ccb2" translate="yes" xml:space="preserve">
          <source>Iterates through a SortedSet, passing each item to the given closure.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8b08b2ced0a411e32162382c00f33fad409fd96a" translate="yes" xml:space="preserve">
          <source>Iterates through an Iterable, passing each item to the given closure.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9d8feba4a88dae763888003a4bbd80769eb5f848" translate="yes" xml:space="preserve">
          <source>Iterates through an Iterator, passing each item to the given closure.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="881b3751cc6868c5704c360aa5584d03941c11ec" translate="yes" xml:space="preserve">
          <source>Iterates through an aggregate type or data structure, passing each item and the item's index (a counter starting at zero) to the given closure.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9790e2db7272d1899ce7d0854878eb6e6a59a3c3" translate="yes" xml:space="preserve">
          <source>Iterates through an aggregate type or data structure, passing each item to the given closure.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8512a1ff40a6d172420238c9df45ca96336b6bc2" translate="yes" xml:space="preserve">
          <source>Iterates through an aggregate type or data structure, passing each item to the given closure. Custom types may utilize this method by simply providing an &quot;iterator()&quot; method. The items returned from the resulting iterator will be passed to the closure.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f0c925242cb8f87c47103d5b6afd16ea5b0093b0" translate="yes" xml:space="preserve">
          <source>Iterates through an array passing each array entry to the given closure.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0e77557104a99d7d94bc22f07b16a87e00dd5d77" translate="yes" xml:space="preserve">
          <source>Iterates through an array, passing each array element and the element's index (a counter starting at zero) to the given closure.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="64696d46090fb713135f1bcee5b448b9d31b2159" translate="yes" xml:space="preserve">
          <source>Iterates through an iterable type, passing each item and the item's index (a counter starting at zero) to the given closure.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fda3d3fdd66d23c0044651c94d7661194b2c3109" translate="yes" xml:space="preserve">
          <source>Iterates through an iterator type, passing each item and the item's index (a counter starting at zero) to the given closure.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="81b1695459d188eba8ab0b51c87465d6835bd9d1" translate="yes" xml:space="preserve">
          <source>Iterates through the Array calling the given closure condition for each item but stopping once the first non-null result is found and returning that result.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a50ee43c742ab5f74678289256ff8edabfaa5ef2" translate="yes" xml:space="preserve">
          <source>Iterates through the Array calling the given closure condition for each item but stopping once the first non-null result is found and returning that result. If all are null, the defaultResult is returned.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="de8356861e470f90735c0dd032ff132f865bcd97" translate="yes" xml:space="preserve">
          <source>Iterates through the Array calling the given closure condition for each item but stopping once the first non-null result is found and returning that result. If all results are null, null is returned.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="91a9b8e0269f917d4c8907b9721219dee5a0f1d0" translate="yes" xml:space="preserve">
          <source>Iterates through the Array transforming items using the supplied closure and collecting any non-null results.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3a943b00578e0ae0bc218ee3a021eed159a9be13" translate="yes" xml:space="preserve">
          <source>Iterates through the Iterable calling the given closure condition for each item but stopping once the first non-null result is found and returning that result.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3ed953839922afed1eefe38f35ce7df44dfbe11d" translate="yes" xml:space="preserve">
          <source>Iterates through the Iterable calling the given closure condition for each item but stopping once the first non-null result is found and returning that result. If all are null, the defaultResult is returned.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3478a79084e4fc2e340668aa3574e3dbf11baadf" translate="yes" xml:space="preserve">
          <source>Iterates through the Iterable calling the given closure condition for each item but stopping once the first non-null result is found and returning that result. If all results are null, null is returned.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6f997448db3c6d4d86e4d69b6615248577637572" translate="yes" xml:space="preserve">
          <source>Iterates through the Iterable transforming items using the supplied closure and collecting any non-null results.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9c056041532b081fb0162a0b44a589bdef7e1d57" translate="yes" xml:space="preserve">
          <source>Iterates through the Iterator calling the given closure condition for each item but stopping once the first non-null result is found and returning that result.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="54209f3c735601e6e81d865ca773d36add183306" translate="yes" xml:space="preserve">
          <source>Iterates through the Iterator calling the given closure condition for each item but stopping once the first non-null result is found and returning that result. If all are null, the defaultResult is returned.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f80dcc391891c097d41b1d646368be8fce4af5cd" translate="yes" xml:space="preserve">
          <source>Iterates through the Iterator calling the given closure condition for each item but stopping once the first non-null result is found and returning that result. If all results are null, null is returned.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2ad3a8fe7c3c8e87d6363ddb7492dda6477224f8" translate="yes" xml:space="preserve">
          <source>Iterates through the Iterator transforming items using the supplied closure and collecting any non-null results.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="22f9ef16d426acf2b255f153e3a22b9744433fff" translate="yes" xml:space="preserve">
          <source>Iterates through the classloader parents until it finds a loader with a class named &quot;org.codehaus.groovy.tools.RootLoader&quot;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b7241742a377f47bf65aebe53bd3a5f8516bd423" translate="yes" xml:space="preserve">
          <source>Iterates through the classloader parents until it finds a loader with a class named &quot;org.codehaus.groovy.tools.RootLoader&quot;. If there is no such class &lt;code&gt;null&lt;/code&gt; will be returned. The name is used for comparison because a direct comparison using == may fail as the class may be loaded through different classloaders.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d476197335a815891e29191ef115fe65bb792bc9" translate="yes" xml:space="preserve">
          <source>Iterates through the collection calling the given closure for each item but stopping once the first non-null result is found and returning that result.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fe81d80dbe4e3b6eee8788517f18ad9f14c8426b" translate="yes" xml:space="preserve">
          <source>Iterates through the collection calling the given closure for each item but stopping once the first non-null result is found and returning that result. If all are null, the defaultResult is returned.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c8308b85dcb68bf7e1dbc7546b7ae37d04cd668d" translate="yes" xml:space="preserve">
          <source>Iterates through the collection calling the given closure for each item but stopping once the first non-null result is found and returning that result. If all results are null, null is returned.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9fb9502522eb39b051f3b127480737d2cb292f04" translate="yes" xml:space="preserve">
          <source>Iterates through the given CharSequence line by line, splitting each line using the given regex delimiter.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e2241aa1a1c7188fda44257a9a9bd99aa9ed913a" translate="yes" xml:space="preserve">
          <source>Iterates through the given CharSequence line by line, splitting each line using the given regex delimiter. The list of tokens for each line is then passed to the given closure.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8eb9c5d6e154c87a8e7aab64e2bee783a94f611d" translate="yes" xml:space="preserve">
          <source>Iterates through the given CharSequence line by line, splitting each line using the given separator Pattern.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="05f94f0fbd17511c441f96396db339ca32b8ccf5" translate="yes" xml:space="preserve">
          <source>Iterates through the given CharSequence line by line, splitting each line using the given separator Pattern. The list of tokens for each line is then passed to the given closure.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6aa3d343b7efb3d8e7ac6768c5851fda39932d6b" translate="yes" xml:space="preserve">
          <source>Iterates through the given Collection, passing in the initial value to the 2-arg closure along with the first item.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d954305a688bf9a2c6864cb3b2bebb4209d551b0" translate="yes" xml:space="preserve">
          <source>Iterates through the given Collection, passing in the initial value to the 2-arg closure along with the first item. The result is passed back (injected) into the closure along with the second item. The new result is injected back into the closure along with the third item and so on until the entire collection has been used. Also known as</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ac0662d87e3695504f04883f7a5aa9161974f2b0" translate="yes" xml:space="preserve">
          <source>Iterates through the given InputStream line by line using the specified encoding, splitting each line using the given separator Pattern.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7a11f91c9fca4bedf7eaf72fbbe989a30e2af5b2" translate="yes" xml:space="preserve">
          <source>Iterates through the given InputStream line by line using the specified encoding, splitting each line using the given separator Pattern. The list of tokens for each line is then passed to the given closure. Finally, the stream is closed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c8004781a795b8ad2778264a4f7ea44169211a43" translate="yes" xml:space="preserve">
          <source>Iterates through the given InputStream line by line using the specified encoding, splitting each line using the given separator.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="10d3f2fd6327321080749ed9c43eb940f7cdeb8c" translate="yes" xml:space="preserve">
          <source>Iterates through the given InputStream line by line using the specified encoding, splitting each line using the given separator. The list of tokens for each line is then passed to the given closure. Finally, the stream is closed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="283c044066b7d85d65180f4a33204178c0bbeee9" translate="yes" xml:space="preserve">
          <source>Iterates through the given InputStream line by line, splitting each line using the given separator Pattern.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0b371fe84532edace0b955bc0c5660e1b89ec2ac" translate="yes" xml:space="preserve">
          <source>Iterates through the given InputStream line by line, splitting each line using the given separator Pattern. The list of tokens for each line is then passed to the given closure. The stream is closed before the method returns.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="84327ff905f3b18ea4d3c076330bd8e62696ba56" translate="yes" xml:space="preserve">
          <source>Iterates through the given InputStream line by line, splitting each line using the given separator.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1af5ec62a673af1614d365611bc8c21868b24849" translate="yes" xml:space="preserve">
          <source>Iterates through the given InputStream line by line, splitting each line using the given separator. The list of tokens for each line is then passed to the given closure. The stream is closed before the method returns.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ee45ab430e91b1c47c24a695d281a93177a7b333" translate="yes" xml:space="preserve">
          <source>Iterates through the given Iterator, passing in the initial value to the closure along with the first item.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0d638d25c93d5827b466dc74625b3ab6b3414a9d" translate="yes" xml:space="preserve">
          <source>Iterates through the given Iterator, passing in the initial value to the closure along with the first item. The result is passed back (injected) into the closure along with the second item. The new result is injected back into the closure along with the third item and so on until the Iterator has been expired of values. Also known as foldLeft in functional parlance.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aa1b7b81149cd92e555b81d973bae9d7937e8b3c" translate="yes" xml:space="preserve">
          <source>Iterates through the given Map, passing in the initial value to the 2-arg Closure along with the first item (or 3-arg Closure along with the first key and value).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="06c5b88713108642e82884d814f441ede10d7a00" translate="yes" xml:space="preserve">
          <source>Iterates through the given Map, passing in the initial value to the 2-arg Closure along with the first item (or 3-arg Closure along with the first key and value). The result is passed back (injected) into the closure along with the second item. The new result is injected back into the closure along with the third item and so on until the entire collection has been used. Also known as</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8ee331905521db1bdf6bdb2185c2faf9d1f19966" translate="yes" xml:space="preserve">
          <source>Iterates through the given Object, passing in the first value to the closure along with the first item.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b9b7507b152e4c659702bca649d1b8c961bc790b" translate="yes" xml:space="preserve">
          <source>Iterates through the given Object, passing in the first value to the closure along with the first item. The result is passed back (injected) into the closure along with the second item. The new result is injected back into the closure along with the third item and so on until further iteration of the object is not possible. Also known as foldLeft in functional parlance.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="13cf161810dd24a2b244c3252039c6aa7d515510" translate="yes" xml:space="preserve">
          <source>Iterates through the given Object, passing in the initial value to the closure along with the first item.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4a944474a4576fd7dcd3e06d8fa64ff88c5c0d93" translate="yes" xml:space="preserve">
          <source>Iterates through the given Object, passing in the initial value to the closure along with the first item. The result is passed back (injected) into the closure along with the second item. The new result is injected back into the closure along with the third item and so on until further iteration of the object is not possible. Also known as foldLeft in functional parlance.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="43c3d4bab6198446145f5902f0e5940677fe6b3e" translate="yes" xml:space="preserve">
          <source>Iterates through the given array as with inject(Object[],initialValue,closure), but using the first element of the array as the initialValue, and then iterating the remaining elements of the array.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3a6620996d71bfa3519ac79859ce7b0bf705247d" translate="yes" xml:space="preserve">
          <source>Iterates through the given array, passing in the initial value to the closure along with the first item.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7e36df317ada95ca6a5bd72a5df7dd6b66a8ae0f" translate="yes" xml:space="preserve">
          <source>Iterates through the given array, passing in the initial value to the closure along with the first item. The result is passed back (injected) into the closure along with the second item. The new result is injected back into the closure along with the third item and so on until all elements of the array have been used. Also known as foldLeft in functional parlance.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="747eda23bbf60195ff8726be5bc10137d3845168" translate="yes" xml:space="preserve">
          <source>Iterates through the given file object by object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a7bfbc8b805a96933c1a6fa9931f20f2ba8b33d4" translate="yes" xml:space="preserve">
          <source>Iterates through the given object stream object by object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8bd2abe093b443ed16b30f30a1b6144da17f4acd" translate="yes" xml:space="preserve">
          <source>Iterates through the given object stream object by object. The ObjectInputStream is closed afterwards.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="67e9ebe252b6cd1dd5b10258e8e543952914e0c7" translate="yes" xml:space="preserve">
          <source>Iterates through the given reader line by line, splitting each line using the given regex separator Pattern.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0720521924af6cf376bc3d76e30b3dd29ab4db0f" translate="yes" xml:space="preserve">
          <source>Iterates through the given reader line by line, splitting each line using the given regex separator Pattern. For each line, the given closure is called with a single parameter being the list of strings computed by splitting the line around matches of the given regular expression. The Reader is closed afterwards.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cf2fa12c4f8438b517199c2d6d9ba41bf6342c80" translate="yes" xml:space="preserve">
          <source>Iterates through the given reader line by line, splitting each line using the given regex separator.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c386d82d9ca8fc372eda28418b2965470a3a750e" translate="yes" xml:space="preserve">
          <source>Iterates through the given reader line by line, splitting each line using the given regex separator. For each line, the given closure is called with a single parameter being the list of strings computed by splitting the line around matches of the given regular expression. The Reader is closed afterwards.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="479356eb0e1dae9bb4d392b1e6cddfa73d60bb60" translate="yes" xml:space="preserve">
          <source>Iterates through the given reader line by line.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="27720e8f7a777c54c706f9df571b0ae6816b70e2" translate="yes" xml:space="preserve">
          <source>Iterates through the given reader line by line. Each line is passed to the given 1 or 2 arg closure. If the closure has two arguments, the line count is passed as the second argument. The Reader is closed before this method returns.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="df61bf569ae7ad116150f8c498ed7e8cfc6120d5" translate="yes" xml:space="preserve">
          <source>Iterates through the input stream associated with this URL line by line, splitting each line using the given regex separator Pattern.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="974692b6b235115de870009dd6eb7dab6cbfac69" translate="yes" xml:space="preserve">
          <source>Iterates through the input stream associated with this URL line by line, splitting each line using the given regex separator Pattern. For each line, the given closure is called with a single parameter being the list of strings computed by splitting the line around matches of the given regular expression. Finally the resources used for processing the URL are closed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="674c2eef3f2ab5e04a1810ba060890c3527fe0a8" translate="yes" xml:space="preserve">
          <source>Iterates through the input stream associated with this URL line by line, splitting each line using the given regex separator.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ff4010bbb77fefdf82085e1e034f96b7cfe02cf5" translate="yes" xml:space="preserve">
          <source>Iterates through the input stream associated with this URL line by line, splitting each line using the given regex separator. For each line, the given closure is called with a single parameter being the list of strings computed by splitting the line around matches of the given regular expression. Finally the resources used for processing the URL are closed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b4bc01a673d4ab8b96a3870a409d911a025872e0" translate="yes" xml:space="preserve">
          <source>Iterates through the lines read from the URL's associated input stream passing each line to the given 1 or 2 arg closure.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d84dbcd6661b2191cb6ad9789ff34e5a855d7f7a" translate="yes" xml:space="preserve">
          <source>Iterates through the lines read from the URL's associated input stream passing each line to the given 1 or 2 arg closure. The stream is closed before this method returns.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4387b81265321eafbdbaecc3b4971cf431f47894" translate="yes" xml:space="preserve">
          <source>Iterates through the map transforming items using the supplied closure and collecting any non-null results.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="90d72b0c1e6f9cce37aeeb4d328ae2dc49cfaed4" translate="yes" xml:space="preserve">
          <source>Iterates through the map transforming items using the supplied closure and collecting any non-null results. If the closure takes two parameters, the entry key and value are passed. If the closure takes one parameter, the Map.Entry object is passed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b9022540633a56430ac3ead57e8e63aecc63b02f" translate="yes" xml:space="preserve">
          <source>Iterates through this Array transforming each item into a new value using the &lt;code&gt;transform&lt;/code&gt; closure and adding it to the supplied &lt;code&gt;collector&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5a0e8f2ef53de038aa2a2d5560e00aa9b423bd2b" translate="yes" xml:space="preserve">
          <source>Iterates through this Array transforming each item into a new value using the &lt;code&gt;transform&lt;/code&gt; closure, returning a list of transformed values.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b425d7ef886f745793460b19cd427887105dc64c" translate="yes" xml:space="preserve">
          <source>Iterates through this CharSequence line by line.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9bb0751fa9e2a0d331c7c22d3c8bcc76241273a2" translate="yes" xml:space="preserve">
          <source>Iterates through this CharSequence line by line. Each line is passed to the given 1 or 2 arg closure. If a 2 arg closure is found the line count is passed as the second argument.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4185962ff2f52f6029d871cf15995e9dae8666bb" translate="yes" xml:space="preserve">
          <source>Iterates through this Iterable transforming each entry into a new value using the &lt;code&gt;transform&lt;/code&gt; closure returning a list of transformed values.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d5d0e36e24d83911a113e8d964adac00bdca351f" translate="yes" xml:space="preserve">
          <source>Iterates through this Iterable transforming each item using the &lt;code&gt;transform&lt;/code&gt; closure and returning a map of the resulting transformed entries.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ffc0ce712a0f1d9674626d006e72ed523cbddc28" translate="yes" xml:space="preserve">
          <source>Iterates through this Iterable transforming each item using the closure as a transformer into a map entry, returning the supplied map with all of the transformed entries added to it.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8cdb41fddeb9abe769aa54fb2214ac96a0cd0708" translate="yes" xml:space="preserve">
          <source>Iterates through this Iterator transforming each item into a new value using the &lt;code&gt;transform&lt;/code&gt; closure and adding it to the supplied &lt;code&gt;collector&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="be5891f2f3d0634b283ea62975f9a3c69abe4174" translate="yes" xml:space="preserve">
          <source>Iterates through this Iterator transforming each item into a new value using the &lt;code&gt;transform&lt;/code&gt; closure, returning a list of transformed values.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="91ff17c11df105bbaee7232dae33f57de7e2a5b3" translate="yes" xml:space="preserve">
          <source>Iterates through this Map transforming each entry using the &lt;code&gt;transform&lt;/code&gt; closure and returning a map of the transformed entries.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="51448bf0159c4257a920e33d54bdd23108fcc876" translate="yes" xml:space="preserve">
          <source>Iterates through this Map transforming each map entry into a new value using the &lt;code&gt;transform&lt;/code&gt; closure returning a list of transformed values.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2998c01eaaaa39c3ad02f73c7745bbf0c9d57370" translate="yes" xml:space="preserve">
          <source>Iterates through this Map transforming each map entry into a new value using the &lt;code&gt;transform&lt;/code&gt; closure returning the &lt;code&gt;collector&lt;/code&gt; with all transformed values added to it.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="74f2a7fc57c23890f7f7df6000800994273343aa" translate="yes" xml:space="preserve">
          <source>Iterates through this Map transforming each map entry using the &lt;code&gt;transform&lt;/code&gt; closure returning a map of the transformed entries.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="acb28465bc941155c7fac815ccc6d702358c4b34" translate="yes" xml:space="preserve">
          <source>Iterates through this String a character at a time collecting either the original character or a transformed replacement String.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a9c7dad8982f3e0a951bb84919f3089788b4df9c" translate="yes" xml:space="preserve">
          <source>Iterates through this String a character at a time collecting either the original character or a transformed replacement String. The &lt;code&gt;transform&lt;/code&gt; Closure should return &lt;code&gt;null&lt;/code&gt; to indicate that no transformation is required for the given character.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6943efa92d442e89cc9074407f7f31f6a4adbbe6" translate="yes" xml:space="preserve">
          <source>Iterates through this String a character at a time collecting either the original character or a transformed replacement String. The return value is an &lt;code&gt;Optional&lt;/code&gt; either having a value equal to the transformed replacement String or &lt;code&gt;empty()&lt;/code&gt; to indicate that no transformation is required.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d8d8c062dd448f9de5e5bfac9c73b0650c3d1af0" translate="yes" xml:space="preserve">
          <source>Iterates through this aggregate Object transforming each item into a new value using Closure.IDENTITY as a transformer, basically returning a list of items copied from the original object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d7832179b89637b087335b4afdce6b5eff2b598b" translate="yes" xml:space="preserve">
          <source>Iterates through this aggregate Object transforming each item into a new value using the &lt;code&gt;transform&lt;/code&gt; closure and adding it to the supplied &lt;code&gt;collector&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5c690625922ddf116d7049b9e12353f62eca0394" translate="yes" xml:space="preserve">
          <source>Iterates through this aggregate Object transforming each item into a new value using the &lt;code&gt;transform&lt;/code&gt; closure, returning a list of transformed values.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4a382565f816ce5542210cd502bb5f9064d5475e" translate="yes" xml:space="preserve">
          <source>Iterates through this aggregate Object transforming each item into a new value using the &lt;code&gt;transform&lt;/code&gt; closure, returning a list of transformed values. Example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cd54dae373f17aac320c5c8c4f47a7ba0b7f2d01" translate="yes" xml:space="preserve">
          <source>Iterates through this array transforming each item using the &lt;code&gt;transform&lt;/code&gt; closure and returning a map of the resulting transformed entries.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4f6fe6c084eecfdcd4948b7c8d340f38bc4852db" translate="yes" xml:space="preserve">
          <source>Iterates through this collection transforming each entry into a new value using Closure.IDENTITY as a transformer, basically returning a list of items copied from the original collection.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f173345cb7cff9e82b649d669b2ea6a6ca50fe03" translate="yes" xml:space="preserve">
          <source>Iterates through this collection transforming each entry into a new value using the &lt;code&gt;transform&lt;/code&gt; closure returning a list of transformed values.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9cdab43dba3f90c14d9dc2540871264119508b7e" translate="yes" xml:space="preserve">
          <source>Iterates through this collection transforming each value into a new value using the &lt;code&gt;transform&lt;/code&gt; closure and adding it to the supplied &lt;code&gt;collector&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="84b6e5da0718222805eb23352f9f2043dcc29166" translate="yes" xml:space="preserve">
          <source>Iterates through this file line by line, splitting each line using the given regex separator Pattern.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f25063a781c2c0a96b571dc5f03134a2f17d7f6f" translate="yes" xml:space="preserve">
          <source>Iterates through this file line by line, splitting each line using the given regex separator Pattern. For each line, the given closure is called with a single parameter being the list of strings computed by splitting the line around matches of the given regular expression. Finally the resources used for processing the file are closed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d1f08553097f98a110dfde43a2ad6142bf9c8272" translate="yes" xml:space="preserve">
          <source>Iterates through this file line by line, splitting each line using the given regex separator.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b1a16df4712d05177b7fc3c00216c981b8baf9fa" translate="yes" xml:space="preserve">
          <source>Iterates through this file line by line, splitting each line using the given regex separator. For each line, the given closure is called with a single parameter being the list of strings computed by splitting the line around matches of the given regular expression. Finally the resources used for processing the file are closed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5a707d244222e43976c27dbb32c6f6d40b2dfc57" translate="yes" xml:space="preserve">
          <source>Iterates through this file line by line, splitting each line using the given separator Pattern.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a3049dfdf68bfb4b4d61816d6aec6244c64f0fca" translate="yes" xml:space="preserve">
          <source>Iterates through this file line by line, splitting each line using the given separator Pattern. For each line, the given closure is called with a single parameter being the list of strings computed by splitting the line around matches of the given regular expression Pattern. Finally the resources used for processing the file are closed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a27b94d85c8556a4c65dd6c0d103e08acc7e6ffc" translate="yes" xml:space="preserve">
          <source>Iterates through this file line by line.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0db2b4d8c093b0e400b13e927afeda2e84953f7f" translate="yes" xml:space="preserve">
          <source>Iterates through this file line by line. Each line is passed to the given 1 or 2 arg closure. The file is read using a reader which is closed before this method returns.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bf2b76f9a1a06794a19d38ddc33d289d9b3faa21" translate="yes" xml:space="preserve">
          <source>Iterates through this path line by line.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8e520ab316037aad997e72f8448770a493ddd8ca" translate="yes" xml:space="preserve">
          <source>Iterates through this path line by line. Each line is passed to the given 1 or 2 arg closure. The file is read using a reader which is closed before this method returns.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1bba3e74a056814f779045c6d95a3a147ac2026a" translate="yes" xml:space="preserve">
          <source>Iterates through this stream reading with the provided charset, passing each line to the given 1 or 2 arg closure.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a28673ae70b10d68af94fd2866248966c051de41" translate="yes" xml:space="preserve">
          <source>Iterates through this stream reading with the provided charset, passing each line to the given 1 or 2 arg closure. The stream is closed after this method returns.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="013b53dc5fd91ae562cc3aa06d0f9440da24c70b" translate="yes" xml:space="preserve">
          <source>Iterates through this stream reading with the provided charset, passing each line to the given 1 or 2 arg closure. The stream is closed before this method returns.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ecf13e27ce1186dd6310f903e47e78efd573295b" translate="yes" xml:space="preserve">
          <source>Iterates through this stream, passing each line to the given 1 or 2 arg closure.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e895f94663829eb7a061f61f21899fed5ffcb590" translate="yes" xml:space="preserve">
          <source>Iterates through this stream, passing each line to the given 1 or 2 arg closure. The stream is closed before this method returns.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bae8809b2429231a50c28ba87cecc038aac88855" translate="yes" xml:space="preserve">
          <source>Iterator</source>
          <target state="translated">Iterator</target>
        </trans-unit>
        <trans-unit id="589df8d450d6c0600262092e6aa34226f8534444" translate="yes" xml:space="preserve">
          <source>Iterator for the constant meta classes</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f8ba90e8e2b3b1e1f2444c4695329c7cbbaf7c58" translate="yes" xml:space="preserve">
          <source>Iterator method to get the next token of the stream.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fa22ee3ea9ed7f2f9536dcee7910e90603fe3aed" translate="yes" xml:space="preserve">
          <source>Iterator method to know if another token follows, or if we've reached the end of the stream.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="66a88a2c2d5e689cf6e66d0ab0a1ca28ac6fe863" translate="yes" xml:space="preserve">
          <source>Iterator.remove</source>
          <target state="translated">Iterator.remove</target>
        </trans-unit>
        <trans-unit id="8177690c34a00639c423e172834828b457f66e89" translate="yes" xml:space="preserve">
          <source>Iterators and Enumerations (i.e., those returned by keySet().iterator(), entrySet().iterator(), values().iterator(), keys(), and elements()) return elements reflecting the state of the hash table at some point at or since the creation of the iterator/enumeration. They will return at most one instance of each element (via next()/nextElement()), but might or might not reflect puts and removes that have been processed since they were created. They do &lt;em&gt;not&lt;/em&gt; throw ConcurrentModificationException. However, these iterators are designed to be used by only one thread at a time. Sharing an iterator across multiple threads may lead to unpredictable results if the table is being concurrently modified. Again, you can ensure interference-free iteration by enclosing the iteration in a synchronized block.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cd54a6ec9fed00327d362a44b942aad8a5f3c2eb" translate="yes" xml:space="preserve">
          <source>Its always fatal.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2ccd1aafa8db2eb4fe873cf88bdd1a8650bd536b" translate="yes" xml:space="preserve">
          <source>JDK version to bytecode version mapping.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a52143241e0687f0e2ae929fc6d4f7203b9fedf8" translate="yes" xml:space="preserve">
          <source>JMXConnector</source>
          <target state="translated">JMXConnector</target>
        </trans-unit>
        <trans-unit id="031a4e76f0b39d0df073d934da5fc48da8d737e5" translate="yes" xml:space="preserve">
          <source>JSON</source>
          <target state="translated">JSON</target>
        </trans-unit>
        <trans-unit id="89dc68906d058b8477dac41edb0eccfd458a9ed7" translate="yes" xml:space="preserve">
          <source>JSON slurper parses text or reader content into a data structure of lists and maps.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d99ff47bab469e5ac8ce7ebb51f67c215ab7a4ab" translate="yes" xml:space="preserve">
          <source>JSR-223 Engine implementation. Adapted from original by Mike Grogan and A. Sundararajan</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9f4697f05d615aa4a1e92939bf37be93ebb0389c" translate="yes" xml:space="preserve">
          <source>JSR-241 Groovy Recognizer. Run 'java Main [-showtree] directory-full-of-groovy-files' [The -showtree option pops up a Swing frame that shows the AST constructed from the parser.] Contributing authors: John Mitchell johnm</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3a45213845886b26e8d341b10ec9b940c0073403" translate="yes" xml:space="preserve">
          <source>JVM version specific classes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2bda907625848a0765f4d6a9cdbe3736260f8aa5" translate="yes" xml:space="preserve">
          <source>James Strachan: The lovely name of this class was suggested by Jules Gosnell and was such a good idea, I couldn't resist :)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1a85ae744165a837a80313d4769cbf9768dcb12e" translate="yes" xml:space="preserve">
          <source>Janitor</source>
          <target state="translated">Janitor</target>
        </trans-unit>
        <trans-unit id="90cb69a3610625f5e5afdc89aecb3bcdd5832c23" translate="yes" xml:space="preserve">
          <source>Java 1.5 Recognizer Run 'java Main [-showtree] directory-full-of-java-files' [The -showtree option pops up a Swing frame that shows the AST constructed from the parser.] Run 'java Main</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3e9d4cf446b4ec58c1fa35b073c09d1c8a5014a9" translate="yes" xml:space="preserve">
          <source>Java 5 code for working with JUnit 4 tests.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c11616862ef7b0fd0981bc91dafe0f167bffe3fd" translate="yes" xml:space="preserve">
          <source>Java 5 specific classes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e45732beab1e081d2fa85b1237e3a3dfe4bbb7ee" translate="yes" xml:space="preserve">
          <source>Java 6 based functions. M12n moved these to modules.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4ed08c712eeabb20df116a51019ffdb5a2268dc6" translate="yes" xml:space="preserve">
          <source>Java 7 based functions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cb41d17167a9292fb245e8f2beabf3683ab04789" translate="yes" xml:space="preserve">
          <source>Java 8 based functions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f37c79d1b34781aa56cf76a1a880e59d55213d3d" translate="yes" xml:space="preserve">
          <source>Java Collections Framework</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9a58a01b7851ffa4039d5444cf6fa101b41bda71" translate="yes" xml:space="preserve">
          <source>Java doesn't allow you to have null as an attribute value. It wants you to indicate what you really mean by null, so that is what we do here - as ugly as it is.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="065f0d1e4c14400baa811e522ab4165e92039ff1" translate="yes" xml:space="preserve">
          <source>JavaCompiler</source>
          <target state="translated">JavaCompiler</target>
        </trans-unit>
        <trans-unit id="da83d229cf3ad273d7413cc713969b04a1a96968" translate="yes" xml:space="preserve">
          <source>JavaCompilerFactory</source>
          <target state="translated">JavaCompilerFactory</target>
        </trans-unit>
        <trans-unit id="c6bc3f485f5d38517d77e3cf75726340a1428e0d" translate="yes" xml:space="preserve">
          <source>JavaTokenTypes</source>
          <target state="translated">JavaTokenTypes</target>
        </trans-unit>
        <trans-unit id="4f2b619d4258dbda686dbdd98fdf674333db54bd" translate="yes" xml:space="preserve">
          <source>JavaUtilLoggingStrategy.class</source>
          <target state="translated">JavaUtilLoggingStrategy.class</target>
        </trans-unit>
        <trans-unit id="22f187c22b3a243df88f1c9a1f9e339e6fbf6af8" translate="yes" xml:space="preserve">
          <source>JmxBeanFactory</source>
          <target state="translated">JmxBeanFactory</target>
        </trans-unit>
        <trans-unit id="187f1eea34937c54e4bf90e22c9d5357fa634840" translate="yes" xml:space="preserve">
          <source>JmxEmitterFactory</source>
          <target state="translated">JmxEmitterFactory</target>
        </trans-unit>
        <trans-unit id="69c4b16dff1dfcd67e3f724bb09c710feb186802" translate="yes" xml:space="preserve">
          <source>JmxEventEmitter</source>
          <target state="translated">JmxEventEmitter</target>
        </trans-unit>
        <trans-unit id="b9e93f2957c1394ab2ad96d8a4ddccd6e5d38746" translate="yes" xml:space="preserve">
          <source>JmxEventEmitterMBean</source>
          <target state="translated">JmxEventEmitterMBean</target>
        </trans-unit>
        <trans-unit id="74243331af1b291d1d0a385b2cdb2eaabe9376bb" translate="yes" xml:space="preserve">
          <source>JmxEventListener</source>
          <target state="translated">JmxEventListener</target>
        </trans-unit>
        <trans-unit id="d9a62b568c72ca65ec7fa232c5d338735b220d0c" translate="yes" xml:space="preserve">
          <source>JmxMetaMapBuilder</source>
          <target state="translated">JmxMetaMapBuilder</target>
        </trans-unit>
        <trans-unit id="34ac028ad2f5c8a65a96bcb9d6441ce57aaab6fa" translate="yes" xml:space="preserve">
          <source>JmxMetaMapBuilder.createListenerMap</source>
          <target state="translated">JmxMetaMapBuilder.createListenerMap</target>
        </trans-unit>
        <trans-unit id="5d2e067b34ecb0aa711bc600735011e7a0ffb836" translate="yes" xml:space="preserve">
          <source>Joint Compilation Option for enabling generating stubs in memory.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c002dc05328ede204153702d2bbd84d43333724c" translate="yes" xml:space="preserve">
          <source>JsonException if the number is infinite or not a number.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="64e97b5feda4cda327442999b71d3f1ad3d237f0" translate="yes" xml:space="preserve">
          <source>JsonGenerator</source>
          <target state="translated">JsonGenerator</target>
        </trans-unit>
        <trans-unit id="042c186d8569b580c9ba6484bdf2c6cca1706cf2" translate="yes" xml:space="preserve">
          <source>JsonGenerator.Options#build()</source>
          <target state="translated">JsonGenerator.Options#build()</target>
        </trans-unit>
        <trans-unit id="effd5a759570a43edf1b2f9b97568c00121b8523" translate="yes" xml:space="preserve">
          <source>JsonParser</source>
          <target state="translated">JsonParser</target>
        </trans-unit>
        <trans-unit id="79329b8a35c8ef584f774cd19d391c996ac4b3b7" translate="yes" xml:space="preserve">
          <source>JsonParserType</source>
          <target state="translated">JsonParserType</target>
        </trans-unit>
        <trans-unit id="d9fa1681165a6353013c28d1159032ba1fc6ae9f" translate="yes" xml:space="preserve">
          <source>JsonSlurper</source>
          <target state="translated">JsonSlurper</target>
        </trans-unit>
        <trans-unit id="e98adb0c4e8150e5fc401eda8904cb4ca879a231" translate="yes" xml:space="preserve">
          <source>Just hold an object</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5afd4f1114270b579a019300c60487a2afd9f13d" translate="yes" xml:space="preserve">
          <source>Keep this constant in a separate file as it is troublesome for Antlr to parse for doc purposes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="247edca9e0d90636ea4e4fbd0341aba1c4cbb9ee" translate="yes" xml:space="preserve">
          <source>Known Limitations:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="253b7fa895c37fce81d2ed77b7e41d5b09919220" translate="yes" xml:space="preserve">
          <source>Known limitations/special cases:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="18dfb680bf8a01e72047de0b606647862af4e037" translate="yes" xml:space="preserve">
          <source>KnownImmutable</source>
          <target state="translated">KnownImmutable</target>
        </trans-unit>
        <trans-unit id="4afff44b75946cb8538f8a667c05522123992c44" translate="yes" xml:space="preserve">
          <source>LAX mode allows keys with no quotes, keys with single quotes, strings elements in JSON with no quotes or single quotes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="919d9bfb192ed45c841e0338ab0ec8f000743ddf" translate="yes" xml:space="preserve">
          <source>LAX mode allows keys with no quotes, keys with single quotes, strings elements in JSON with no quotes or single quotes. It also allows comments //, # and even multi-line /* comments. LAX is an INDEX_OVERLAY parser. Its speed is comparable to INDEX_OVERLAY. It is slightly slower than INDEX_OVERLAY, but faster than the other options.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f2064bba0a1c10b617f55b8c5a899c761d5b0073" translate="yes" xml:space="preserve">
          <source>LOOKUP constant used for for example unreflect calls</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="50d185c8630bd73c2041b5bc39a6e34680c050fa" translate="yes" xml:space="preserve">
          <source>Labels:</source>
          <target state="translated">Labels:</target>
        </trans-unit>
        <trans-unit id="67a2542294135a76c7dfc4b3ed9c578b74ab4f32" translate="yes" xml:space="preserve">
          <source>Lazily adds the specified Object to this GPathResult.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="527a5da8def1408a84965cffc12fedc548656cec" translate="yes" xml:space="preserve">
          <source>Lazy evaluated representation of a GPath expression returning no children. As this class represents a GPath expression with no results, all methods are either NOPs or return an empty result.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cdd99fddb27db150453e2c6499362fae6d85912b" translate="yes" xml:space="preserve">
          <source>Lazy evaluated representation of a child node.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6ffeb391790964ada4e3ebdd8b1939ef12e71c2c" translate="yes" xml:space="preserve">
          <source>Lazy evaluated representation of a node attribute.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="632c454ffb445238bfea8a7c724f02305381c30a" translate="yes" xml:space="preserve">
          <source>Lazy evaluated representation of a node's attributes filtered by a Closure.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d49e2c33f7622005be7c780aa54b0936c1b53663" translate="yes" xml:space="preserve">
          <source>Lazy evaluated representation of a node's attributes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9f551d2d356daa963b59f78100027a24fe748b69" translate="yes" xml:space="preserve">
          <source>Lazy evaluated representation of child nodes filtered by a Closure.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="39c3c05efea6e6e41278a51cbbf7d1e9d11c9ec0" translate="yes" xml:space="preserve">
          <source>Lazy evaluated representation of child nodes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d411ebdca9f27d8cc13e0a1548bc1a420e3fe059" translate="yes" xml:space="preserve">
          <source>Lazy evaluated representation of parent nodes without duplicates</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a1db35cbed88dea3374a257338a8bde227331a18" translate="yes" xml:space="preserve">
          <source>Lazy variables</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a71fc9c11108619ed55fba7180605d39a1f3cb70" translate="yes" xml:space="preserve">
          <source>Legacy alias for &lt;a href=&quot;#getAllowedExpressions()&quot;&gt;getAllowedExpressions()&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="edd91247b9a56ad03fad25c4d9db4c4d8d1c1280" translate="yes" xml:space="preserve">
          <source>Legacy alias for &lt;a href=&quot;#getAllowedImports()&quot;&gt;getAllowedImports()&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b000534a2e654cde3cade3e9d59807ff6e19e848" translate="yes" xml:space="preserve">
          <source>Legacy alias for &lt;a href=&quot;#getAllowedReceivers()&quot;&gt;getAllowedReceivers()&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="092b5bd4a74edee283e014118666f8b2b34fbb52" translate="yes" xml:space="preserve">
          <source>Legacy alias for &lt;a href=&quot;#getAllowedStarImports()&quot;&gt;getAllowedStarImports()&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="656a821fa64dc992dea678f906293dfc9d053dce" translate="yes" xml:space="preserve">
          <source>Legacy alias for &lt;a href=&quot;#getAllowedStatements()&quot;&gt;getAllowedStatements()&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e1c3a81e7d8f963bfe12f164ca6997a4ec854255" translate="yes" xml:space="preserve">
          <source>Legacy alias for &lt;a href=&quot;#getAllowedStaticImports()&quot;&gt;getAllowedStaticImports()&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5ffbc24faeb713c37624d78d9a60278552d06dbc" translate="yes" xml:space="preserve">
          <source>Legacy alias for &lt;a href=&quot;#getAllowedStaticStarImports()&quot;&gt;getAllowedStaticStarImports()&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="98f4ec91087f464fce542183ae42051fdb3c917c" translate="yes" xml:space="preserve">
          <source>Legacy alias for &lt;a href=&quot;#getAllowedTokens()&quot;&gt;getAllowedTokens()&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="af9838eb5b442df03580aad1c4e9e4c3acfa1621" translate="yes" xml:space="preserve">
          <source>Legacy alias for &lt;a href=&quot;#getDisallowedConstantTypes()&quot;&gt;getDisallowedConstantTypes()&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bfc75fa2d7b9fb25ceb02c01faf1b95a38838db6" translate="yes" xml:space="preserve">
          <source>Legacy alias for &lt;a href=&quot;#getDisallowedExpressions()&quot;&gt;getDisallowedExpressions()&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9cf6308a9be92b7462d8e171161159a171d42145" translate="yes" xml:space="preserve">
          <source>Legacy alias for &lt;a href=&quot;#getDisallowedImports()&quot;&gt;getDisallowedImports()&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="568028768fc5f9143a13035c75befbbc00179136" translate="yes" xml:space="preserve">
          <source>Legacy alias for &lt;a href=&quot;#getDisallowedReceivers()&quot;&gt;getDisallowedReceivers()&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2c2c9a9eaddcf1bd00d6844eb41aab30e5c76bc4" translate="yes" xml:space="preserve">
          <source>Legacy alias for &lt;a href=&quot;#getDisallowedStarImports()&quot;&gt;getDisallowedStarImports()&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fd50e8d1dfc69e553c7115f3615f7233deb4d73f" translate="yes" xml:space="preserve">
          <source>Legacy alias for &lt;a href=&quot;#getDisallowedStatements()&quot;&gt;getDisallowedStatements()&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="210886e84f5be866051291de427d817d44d549a0" translate="yes" xml:space="preserve">
          <source>Legacy alias for &lt;a href=&quot;#getDisallowedStaticImports()&quot;&gt;getDisallowedStaticImports()&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="493fd99e246bf3ac778c2d5762e418324fc30fbd" translate="yes" xml:space="preserve">
          <source>Legacy alias for &lt;a href=&quot;#getDisallowedStaticStarImports()&quot;&gt;getDisallowedStaticStarImports()&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="357e89370c5404aaa85cd0ab5c7765a0293a66eb" translate="yes" xml:space="preserve">
          <source>Legacy alias for &lt;a href=&quot;#getDisallowedTokens()&quot;&gt;getDisallowedTokens()&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cc8b26d090bf4e43a2193c1f46bdda58be8d93ef" translate="yes" xml:space="preserve">
          <source>Legacy alias for &lt;a href=&quot;#setAllowedConstantTypes(java.util.List)&quot;&gt;setAllowedConstantTypes(List)&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e254f6ef51ea1ed6dccac45695951d9febaba2a6" translate="yes" xml:space="preserve">
          <source>Legacy alias for &lt;a href=&quot;#setAllowedConstantTypesClasses(java.util.List)&quot;&gt;setAllowedConstantTypesClasses(List)&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e6d3acfc1095f109dbf94ae9099f7e4e58974a3a" translate="yes" xml:space="preserve">
          <source>Legacy alias for &lt;a href=&quot;#setAllowedExpressions(java.util.List)&quot;&gt;setAllowedExpressions(List)&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d03bfead5b2f671562ccdcefb037563ed8dc8e6d" translate="yes" xml:space="preserve">
          <source>Legacy alias for &lt;a href=&quot;#setAllowedImports(java.util.List)&quot;&gt;setAllowedImports(List)&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="50c5faa03c10f6bd9b2e99d659d9bdc5db250194" translate="yes" xml:space="preserve">
          <source>Legacy alias for &lt;a href=&quot;#setAllowedReceivers(java.util.List)&quot;&gt;setAllowedReceivers(List)&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="499f952deace0ea0a0b59618fc0f089f22513519" translate="yes" xml:space="preserve">
          <source>Legacy alias for &lt;a href=&quot;#setAllowedReceiversClasses(java.util.List)&quot;&gt;setAllowedReceiversClasses(List)&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="273b6b7524d472adda55f40eac921a9ba0a2d65b" translate="yes" xml:space="preserve">
          <source>Legacy alias for &lt;a href=&quot;#setAllowedStarImports(java.util.List)&quot;&gt;setAllowedStarImports(List)&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="944c58e9f5e5c7f63e540fa4810561c982a8703f" translate="yes" xml:space="preserve">
          <source>Legacy alias for &lt;a href=&quot;#setAllowedStatements(java.util.List)&quot;&gt;setAllowedStatements(List)&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c15b33ec7f221edc281ed4e3af067c08e2b6a72a" translate="yes" xml:space="preserve">
          <source>Legacy alias for &lt;a href=&quot;#setAllowedStaticImports(java.util.List)&quot;&gt;setAllowedStaticImports(List)&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3c5244624ade6c6384beab885d9c3f425ea39168" translate="yes" xml:space="preserve">
          <source>Legacy alias for &lt;a href=&quot;#setAllowedStaticStarImports(java.util.List)&quot;&gt;setAllowedStaticStarImports(List)&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ae40bdfc0caf9486254f34d695ac3ad12e63c9df" translate="yes" xml:space="preserve">
          <source>Legacy alias for &lt;a href=&quot;#setAllowedTokens(java.util.List)&quot;&gt;setAllowedTokens(List)&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c9b36b487317cee2403b337a02e5721f1bf3b4cc" translate="yes" xml:space="preserve">
          <source>Legacy alias for &lt;a href=&quot;#setDisallowedConstantTypesClasses(java.util.List)&quot;&gt;setDisallowedConstantTypesClasses(List)&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1672faa7d8497e6ae9d440f810730d629c20b15b" translate="yes" xml:space="preserve">
          <source>Legacy alias for &lt;a href=&quot;#setDisallowedExpressions(java.util.List)&quot;&gt;setDisallowedExpressions(List)&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c25f67c9589789d0cd01cea04b38876f2d1cfd4d" translate="yes" xml:space="preserve">
          <source>Legacy alias for &lt;a href=&quot;#setDisallowedImports(java.util.List)&quot;&gt;setDisallowedImports(List)&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0c97b730b93a429eac511ca3b77a2a30e619fde8" translate="yes" xml:space="preserve">
          <source>Legacy alias for &lt;a href=&quot;#setDisallowedReceivers(java.util.List)&quot;&gt;setDisallowedReceivers(List)&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e9eb363aa499ad80a980808eebe2288d8bb243aa" translate="yes" xml:space="preserve">
          <source>Legacy alias for &lt;a href=&quot;#setDisallowedReceiversClasses(java.util.List)&quot;&gt;setDisallowedReceiversClasses(List)&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b4d7bcbfbdf2b3a853efac38dc87421294d86eba" translate="yes" xml:space="preserve">
          <source>Legacy alias for &lt;a href=&quot;#setDisallowedStarImports(java.util.List)&quot;&gt;setDisallowedStarImports(List)&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1da2f24ae9140f1fe0af0585d211b54dce00d535" translate="yes" xml:space="preserve">
          <source>Legacy alias for &lt;a href=&quot;#setDisallowedStatements(java.util.List)&quot;&gt;setDisallowedStatements(List)&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2b2928a797152d42b62995ecd9b8a40f70ac06a3" translate="yes" xml:space="preserve">
          <source>Legacy alias for &lt;a href=&quot;#setDisallowedStaticImports(java.util.List)&quot;&gt;setDisallowedStaticImports(List)&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d736b5bb0689f43e690927f722a841d77727be15" translate="yes" xml:space="preserve">
          <source>Legacy alias for &lt;a href=&quot;#setDisallowedStaticStarImports(java.util.List)&quot;&gt;setDisallowedStaticStarImports(List)&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ed20c83ee245e6bf62abaeb27e95bd367ba7cf35" translate="yes" xml:space="preserve">
          <source>Legacy alias for copyWith.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5e9c67cce1b6e9ce7f93b0a2ad83fed43bc953e5" translate="yes" xml:space="preserve">
          <source>Legacy alias for copyWith. Will be deprecated and removed in future versions of Groovy.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d391286d64bdbd5596995d2b54d53db0a637e853" translate="yes" xml:space="preserve">
          <source>Lexer, parser and trees.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4e8b8f50db77bf56bd6bf16c6afc3bc15dbe2a63" translate="yes" xml:space="preserve">
          <source>Lexing, parsing, and AST building</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="383a2bd622db3120f661ca96d012edb6f63f9e41" translate="yes" xml:space="preserve">
          <source>Licensed under the Apache license.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="601e68e5b32eded66aa9e41eff8351228314cb17" translate="yes" xml:space="preserve">
          <source>Like &lt;a href=&quot;https://docs.oracle.com/javase/8/docs/api/java/util/Hashtable.html&quot;&gt;Hashtable&lt;/a&gt; but unlike &lt;a href=&quot;https://docs.oracle.com/javase/8/docs/api/java/util/HashMap.html&quot;&gt;HashMap&lt;/a&gt;, this class does &lt;em&gt;not&lt;/em&gt; allow</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="958d0c49ed79ca77cf6632a603ac383b0d714509" translate="yes" xml:space="preserve">
          <source>Limitation: Line comments within the assertion's source text are not handled.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="52c0a2f3a058b234bb1af57941e3f1c4df61c56c" translate="yes" xml:space="preserve">
          <source>Limitations:</source>
          <target state="translated">Limitations:</target>
        </trans-unit>
        <trans-unit id="a1fffaaafb7cc996685bceb829c053cc4f7de43d" translate="yes" xml:space="preserve">
          <source>List</source>
          <target state="translated">List</target>
        </trans-unit>
        <trans-unit id="844b8412e45ff6cf44167f714787dbb5424c55f8" translate="yes" xml:space="preserve">
          <source>List decorator that will trigger PropertyChangeEvents when a value changes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="196014e0dd4ec35a18478e68201f8aba17e942b4" translate="yes" xml:space="preserve">
          <source>List expressions - list of constants</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="203e5ad4b168d540b5407a5b33c5491d17dc754b" translate="yes" xml:space="preserve">
          <source>List of aliased annotations.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ecb316ee42c30511029e39fbdda61877057fc6c4" translate="yes" xml:space="preserve">
          <source>List of field and/or property names to exclude from generated builder methods.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b5810003819255da46314065ca2692786f82cbf6" translate="yes" xml:space="preserve">
          <source>List of field and/or property names to exclude from generated builder methods. Must not be used if 'includes' is used. For convenience, a String with comma separated names can be used in addition to an array (using Groovy's literal list notation) of String values.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3bd09637d2bb87bca68bdff703f4d0c5c571a897" translate="yes" xml:space="preserve">
          <source>List of field and/or property names to exclude from generated toString.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a9c9c83959e04f384a8d1d3f63b064267a55ba2c" translate="yes" xml:space="preserve">
          <source>List of field and/or property names to exclude from generated toString. Must not be used if 'includes' is used. For convenience, a String with comma separated names can be used in addition to an array (using Groovy's literal list notation) of String values.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="11d11725960a50d722108f8551e76bc9507f0d25" translate="yes" xml:space="preserve">
          <source>List of field and/or property names to exclude from the constructor.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c153f092c634f4bea7c4947f91c61d6fc6797ffe" translate="yes" xml:space="preserve">
          <source>List of field and/or property names to exclude from the constructor. Must not be used if 'includes' is used. For convenience, a String with comma separated names can be used in addition to an array (using Groovy's literal list notation) of String values.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7f9e258749730f94f6c146cc52c03c4d40078ce8" translate="yes" xml:space="preserve">
          <source>List of field and/or property names to include within the constructor.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ab13db6e0f74f7d8dc840554913020102b240171" translate="yes" xml:space="preserve">
          <source>List of field and/or property names to include within the constructor. Must not be used if 'excludes' is used. For convenience, a String with comma separated names can be used in addition to an array (using Groovy's literal list notation) of String values. The default value is a special marker value indicating that no includes are defined; all fields and/or properties are included if 'includes' remains undefined and 'excludes' is explicitly or implicitly an empty list.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4dd2704c30b9f4831a95e7c6c5af1bac90dcb218" translate="yes" xml:space="preserve">
          <source>List of field and/or property names to include within the constructor. The order of inclusion is determined by the order in which the names are specified. Must not be used if 'excludes' is used. For convenience, a String with comma separated names can be used in addition to an array (using Groovy's literal list notation) of String values. The default value is a special marker value indicating that no includes are defined; all fields are included if includes remains undefined and excludes is explicitly or implicitly an empty list.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="744f292194362dd221d37a32c01611609e0b4f55" translate="yes" xml:space="preserve">
          <source>List of field and/or property names to include within the generated builder methods.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3220c266f14898cc8f9412e91f97cfa2e609192b" translate="yes" xml:space="preserve">
          <source>List of field and/or property names to include within the generated builder methods. Must not be used if 'excludes' is used. For convenience, a String with comma separated names can be used in addition to an array (using Groovy's literal list notation) of String values. The default value is a special marker value indicating that no includes are defined; all fields are included if includes remains undefined and excludes is explicitly or implicitly an empty list.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6ca69d6ec11c1aaeb6f46acc4af4b6cf3666adf6" translate="yes" xml:space="preserve">
          <source>List of field and/or property names to include within the generated toString.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="610391ff825ecb9b39581ead7e04c30dc71d4bd1" translate="yes" xml:space="preserve">
          <source>List of field and/or property names to include within the generated toString. The order of inclusion is determined by the order in which the names are specified. Must not be used if 'excludes' is used. For convenience, a String with comma separated names can be used in addition to an array (using Groovy's literal list notation) of String values. The default value is a special marker value indicating that no includes are defined; all fields and/or properties are included if 'includes' remains undefined and 'excludes' is explicitly or implicitly an empty list. The special name 'super' can be used instead of using the 'includeSuper' flag.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f5076c075c3f2aacfe8ab22681698b3b339a46e0" translate="yes" xml:space="preserve">
          <source>List of interfaces containing method signatures to exclude when delegating.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="44122b40bc19f052a92c0035c4290783ddecd4bc" translate="yes" xml:space="preserve">
          <source>List of interfaces containing method signatures to exclude when delegating. Only one of 'includes', 'includeTypes', 'excludes', 'excludeTypes' should be used. If interfaces is true (the default), you will need to manually supply any methods excluded from delegation that are required for the interface.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3b7feee61578935e089a138645e18d1049469c81" translate="yes" xml:space="preserve">
          <source>List of interfaces containing method signatures to include when delegating.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b5c437bd04708bc7385a2648327255a76d130b77" translate="yes" xml:space="preserve">
          <source>List of interfaces containing method signatures to include when delegating. Only one of 'includes', 'includeTypes', 'excludes' or 'excludeTypes' should be used. The default value is a special marker value indicating that no includeTypes are defined. If interfaces is true (the default), you will need to manually supply any methods excluded from delegation that are required for the interface.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6226a1dad1208cec050c487681467f0fda7fcef7" translate="yes" xml:space="preserve">
          <source>List of method and/or property names to exclude when delegating.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="530edff66869c6fc89826b3280602512b5e05d45" translate="yes" xml:space="preserve">
          <source>List of method and/or property names to exclude when delegating. Only one of 'includes', 'includeTypes', 'excludes' or 'excludeTypes' should be used. For convenience, a String with comma separated names can be used in addition to an array (using Groovy's literal list notation) of String values. If interfaces is true (the default), you will need to manually supply any methods excluded from delegation that are required for the interface.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="da5776ebb90d75a2a8b9634f9ef10835af383e6e" translate="yes" xml:space="preserve">
          <source>List of method and/or property names to include when delegating.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="61813db0f473ee0404bc8d464d21348c82faf85a" translate="yes" xml:space="preserve">
          <source>List of method and/or property names to include when delegating. Only one of 'includes', 'includeTypes', 'excludes' or 'excludeTypes' should be used. For convenience, a String with comma separated names can be used in addition to an array (using Groovy's literal list notation) of String values. The default value is a special marker value indicating that no includes are defined; all fields are included if 'includes' remains undefined and 'excludes' is explicitly or implicitly an empty list. If interfaces is true (the default), you will need to manually supply any methods not included via delegation that are required for the interface.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7702a9fc8962a35fb035cea79aa26dd96fa6479a" translate="yes" xml:space="preserve">
          <source>List of property names (and field names if includeFields is true) to exclude from the equals and hashCode calculations.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cfbfab590dbe11ab6b08db19e2d0323771f99b43" translate="yes" xml:space="preserve">
          <source>List of property names (and field names if includeFields is true) to exclude from the equals and hashCode calculations. Must not be used if 'includes' is used. For convenience, a String with comma separated names can be used in addition to an array (using Groovy's literal list notation) of String values.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e18eade0452beb98e2f9a8606d2a53e18dee7e21" translate="yes" xml:space="preserve">
          <source>List of property names (and field names if includeFields is true) to include within the equals and hashCode calculations.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9e2c16568ed55a47e6427275560abc45fbf7056d" translate="yes" xml:space="preserve">
          <source>List of property names (and field names if includeFields is true) to include within the equals and hashCode calculations. Must not be used if 'excludes' is used. For convenience, a String with comma separated names can be used in addition to an array (using Groovy's literal list notation) of String values. The default value is a special marker value indicating that no includes are defined; all fields and/or properties are included if 'includes' remains undefined and 'excludes' is explicitly or implicitly an empty list.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="01ec1e6d95b047e80611a156ec30fa93442d76e3" translate="yes" xml:space="preserve">
          <source>List of string representations of all of the attributes on the MBean.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="da6034ac7d28f8a2569394865ed6caebbef55d1e" translate="yes" xml:space="preserve">
          <source>List of the names of each of the attributes on the MBean</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="938733a502ef69646a41959f1f77f3affa7adcec" translate="yes" xml:space="preserve">
          <source>List subscript assignment operator when given a range as the index and the assignment operand is a collection.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e20be27b60186a87e8e0c4a43f8ea89a5f456360" translate="yes" xml:space="preserve">
          <source>List subscript assignment operator when given a range as the index and the assignment operand is a collection. Example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="35a4722a0ab82b4f95c7330a0ddd10360ffc7f9f" translate="yes" xml:space="preserve">
          <source>List subscript assignment operator when given a range as the index.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1fef5dca00a6f3f54ca8f2e8148af67d4ba052e3" translate="yes" xml:space="preserve">
          <source>List subscript assignment operator when given a range as the index. Example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f2411738e6285e9bf89254a80315e2c3b5769e9c" translate="yes" xml:space="preserve">
          <source>List&amp;lt;String&amp;gt;</source>
          <target state="translated">List&amp;lt;String&amp;gt;</target>
        </trans-unit>
        <trans-unit id="f617ac45086ec405601bb40e9d99f10dd643314e" translate="yes" xml:space="preserve">
          <source>List.addAll</source>
          <target state="translated">List.addAll</target>
        </trans-unit>
        <trans-unit id="48fb7de1e7f4ec62a77ab4aa73ec82916ebe8c3e" translate="yes" xml:space="preserve">
          <source>ListIterator</source>
          <target state="translated">ListIterator</target>
        </trans-unit>
        <trans-unit id="d622a2b5a9ac98477076960328b0b194a8837b5c" translate="yes" xml:space="preserve">
          <source>ListenerListASTTransformation</source>
          <target state="translated">ListenerListASTTransformation</target>
        </trans-unit>
        <trans-unit id="651c4af8e8157e69639f32ea89f36eefde3274c2" translate="yes" xml:space="preserve">
          <source>Load the file and then execute it</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="57f5bab50ebc9f4767b19bc3bd6a35a74cd66d47" translate="yes" xml:space="preserve">
          <source>Loading paths with &lt;code&gt;load ./*.jar&lt;/code&gt; or &lt;code&gt;load *.jar&lt;/code&gt; are not supported.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="354e26e084204895da8b485b4f4bd2eb6ac438cb" translate="yes" xml:space="preserve">
          <source>Loads &lt;a href=&quot;groovyrunner&quot;&gt;GroovyRunner&lt;/a&gt; instances using the &lt;a href=&quot;https://docs.oracle.com/javase/8/docs/api/java/util/ServiceLoader.html&quot;&gt;ServiceLoader&lt;/a&gt; facility.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9db5cb9df3f80f7ab5d030cb4f59081020f5be40" translate="yes" xml:space="preserve">
          <source>Loads a Groovy source file given its name.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bec63b2d2ce7334ce6e78e172111001a32e94500" translate="yes" xml:space="preserve">
          <source>Loads a class per name.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1c4ead487e41a66d02fac8f9bee4159d69977ffa" translate="yes" xml:space="preserve">
          <source>Loads a class per name. Unlike a normal loadClass this version behaves different during a class definition. In that case it checks if the class we want to load is Reflector and returns class if the check is successful. If it is not during a class definition it just calls the super class version of loadClass.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b8344d20d8b4113f2934d614fb157180a3edf6c6" translate="yes" xml:space="preserve">
          <source>Loads either this object or if we're inside a closure then load the top level owner</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b73ad56c5dc5ce1c7a6cdfef5a4d1ff250b794ec" translate="yes" xml:space="preserve">
          <source>Loads file from within user groovy state directory</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2bdb2f139229f8bc927d76a364c721f42a99fac1" translate="yes" xml:space="preserve">
          <source>Loads the URL contents and parses them with ASM, producing a &lt;a href=&quot;classstub&quot;&gt;ClassStub&lt;/a&gt; object representing the structure of the corresponding class file.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c7103520076b24b0e8bbe188a5ed332d3d300704" translate="yes" xml:space="preserve">
          <source>Loads the URL contents and parses them with ASM, producing a &lt;a href=&quot;classstub&quot;&gt;ClassStub&lt;/a&gt; object representing the structure of the corresponding class file. Stubs are cached and reused if queried several times with equal URLs.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b64fed95c920b80368045ba8e9977a3e2c82b78f" translate="yes" xml:space="preserve">
          <source>Loads the given class node returning the implementation Class.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="49bf5b468a2f7ff9b5b0095d1df2030e2ab68eec" translate="yes" xml:space="preserve">
          <source>Local part</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1b2f3e376fcc208767e3654c5296dd57dd4ecb4e" translate="yes" xml:space="preserve">
          <source>LocalDate.parse</source>
          <target state="translated">LocalDate.parse</target>
        </trans-unit>
        <trans-unit id="cef8fee85304aaa039305fee1baf505648f49704" translate="yes" xml:space="preserve">
          <source>LocalDateTime.parse</source>
          <target state="translated">LocalDateTime.parse</target>
        </trans-unit>
        <trans-unit id="3ab355601fccab29a4ec25376e4fcef64bc2ad04" translate="yes" xml:space="preserve">
          <source>LocalTime.parse</source>
          <target state="translated">LocalTime.parse</target>
        </trans-unit>
        <trans-unit id="9933b5d93aadeec20be73055ce253b0fa2a64abd" translate="yes" xml:space="preserve">
          <source>Locates all nodes in the given AST which match the pattern AST.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e6863fb6d567cb3aef0645715e1e731a4b40251b" translate="yes" xml:space="preserve">
          <source>Locates all nodes in the given AST which match the pattern AST. This operation can cost a lot, because it tries to match a sub-tree to every node of the AST.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dfaa5a68d42263568a02f2229e80713a8fb846b7" translate="yes" xml:space="preserve">
          <source>Lock used only for its memory effects.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ab225082a29d20fc4b72c2d17853532d312e5ed4" translate="yes" xml:space="preserve">
          <source>Log4j2LoggingStrategy.class</source>
          <target state="translated">Log4j2LoggingStrategy.class</target>
        </trans-unit>
        <trans-unit id="6fe17a0a511e24d977851cee06db1b381254a3c1" translate="yes" xml:space="preserve">
          <source>Log4jLoggingStrategy.class</source>
          <target state="translated">Log4jLoggingStrategy.class</target>
        </trans-unit>
        <trans-unit id="85667de69cee4559a048e944cdd2673377ae1717" translate="yes" xml:space="preserve">
          <source>LogASTTransformation.DEFAULT_CATEGORY_NAME</source>
          <target state="translated">LogASTTransformation.DEFAULT_CATEGORY_NAME</target>
        </trans-unit>
        <trans-unit id="429599cea30bf4d60de1a60eb83410ae1d6efa6c" translate="yes" xml:space="preserve">
          <source>LogASTTransformation.LoggingStrategy</source>
          <target state="translated">LogASTTransformation.LoggingStrategy</target>
        </trans-unit>
        <trans-unit id="8432c24573f3f89fad60802fe8eddf1da6315768" translate="yes" xml:space="preserve">
          <source>Logger</source>
          <target state="translated">Logger</target>
        </trans-unit>
        <trans-unit id="d12a8e64ecb0180b7f7a5b0c7168a16857c8f1e8" translate="yes" xml:space="preserve">
          <source>Logging and bug-hunting options</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cd71fc6df0d57971b5413ae1b1e4ece74d4bc5e9" translate="yes" xml:space="preserve">
          <source>Logging and extra-output options</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="304ff2c9fe69826b8a01628cc64cfc0c67eea1ca" translate="yes" xml:space="preserve">
          <source>Logging bytecode generation, which can make debugging easy</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="078b174dd3a0c795c9bdf974aa4092b47f8ddd44" translate="yes" xml:space="preserve">
          <source>LoggingStrategyV2</source>
          <target state="translated">LoggingStrategyV2</target>
        </trans-unit>
        <trans-unit id="2f3c8de86e20ff5dcc8b9d990030cf4d03eeb063" translate="yes" xml:space="preserve">
          <source>Logical conjunction of two boolean operators.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ff89aa6f68c4c417476f93994845f505f93be6f2" translate="yes" xml:space="preserve">
          <source>Logical disjunction of two boolean operators</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cc3ff52bf47d2a7fd4456d1b14060a18205c235d" translate="yes" xml:space="preserve">
          <source>Logical implication of two boolean operators</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="11eda67f9b15a760342f8e98a3fc78d8d3ea9945" translate="yes" xml:space="preserve">
          <source>Long</source>
          <target state="translated">Long</target>
        </trans-unit>
        <trans-unit id="8cc6f485140af070adbca598b1a54b6cf282c281" translate="yes" xml:space="preserve">
          <source>Long NumberMath operations</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1ba0d91d42784833dcdb82328e744b351eec3088" translate="yes" xml:space="preserve">
          <source>Long name for the option, will be prefixed with two hyphens unless &lt;a href=&quot;clibuilder#acceptLongOptionsWithSingleHyphen&quot;&gt;acceptLongOptionsWithSingleHyphen&lt;/a&gt; is &lt;code&gt;true&lt;/code&gt;. An option must have either a long name or a short name (or both).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d9c57387c7af650d330545259537d3fa024900ad" translate="yes" xml:space="preserve">
          <source>Lookahead for suspicious statement warnings and errors.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fe8aa2cd292f879fab8ce09a49e38e2a5485acfe" translate="yes" xml:space="preserve">
          <source>Lookahead to check whether a block begins with explicit closure arguments.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a22cb16d71db939a71f7a65f5784ff5cb2658a85" translate="yes" xml:space="preserve">
          <source>Looks for source file extensions in META-INF/services/org.codehaus.groovy.source.Extensions</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="88adb8179b97bd7db43270bf5a729ca723913649" translate="yes" xml:space="preserve">
          <source>Looks up an existing MetaProperty by name</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a24d82daa52205929ac18aaeb2786f98605524d9" translate="yes" xml:space="preserve">
          <source>Looks up an item in a Map for the given key and returns the value - unless there is no entry for the given key in which case add the default value to the map and return that.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d81909ae5060481bc122da95806cab3e32551af1" translate="yes" xml:space="preserve">
          <source>Lookup a ClassNode by its name from the source unit</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b98c62edd19a6da5dc5f0bc6e12bc0e8bc094f71" translate="yes" xml:space="preserve">
          <source>LoopingStatement</source>
          <target state="translated">LoopingStatement</target>
        </trans-unit>
        <trans-unit id="a9d8667f689df52ed56a07744686040e77cd043b" translate="yes" xml:space="preserve">
          <source>LooseExpectation</source>
          <target state="translated">LooseExpectation</target>
        </trans-unit>
        <trans-unit id="e04994f821b6fa61ff8e6bf103799edb8ad73cec" translate="yes" xml:space="preserve">
          <source>Main CLI entry-point for</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="724aa85ad89eb9d4f889a62257d00f84408a16e8" translate="yes" xml:space="preserve">
          <source>Main CLI interface.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="574a5eb255bebef46b3d3db456ea25aad47ece4d" translate="yes" xml:space="preserve">
          <source>Main entry point.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="868f5c090ec74110bc40b630d8980cd4b0789840" translate="yes" xml:space="preserve">
          <source>Main loop entry.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4bea0f9e0f2a46a4c10f7f8d8270f02aaf7e8a30" translate="yes" xml:space="preserve">
          <source>Main method used to render a template.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="75f182a085ce691afeedc71722c70d3813423e80" translate="yes" xml:space="preserve">
          <source>Main purpose of processResultSets param is to retain original call() method performance when this is set to Sql.NO_RESULT_SETS</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bf94c16eadfeffb9ada345a42f258474fd7f3a7d" translate="yes" xml:space="preserve">
          <source>Make options accessible from command line args with parser.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d5e12c2c69c18a481b0a56e903d0ad715fa61a94" translate="yes" xml:space="preserve">
          <source>Make options accessible from command line args with parser. Returns null on bad command lines after displaying usage message.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4abcd2756b25ae08d14741c1e4ce2b2160e4190f" translate="yes" xml:space="preserve">
          <source>Make the Class constructors have package protected visibility.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1eb832b87a5473ea502b7b3077a3eadc1dbd3e4d" translate="yes" xml:space="preserve">
          <source>Make the Class fields have package protected visibility.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="12c1ac23bfcdb41eb655cf26d0d7c91e040d1c41" translate="yes" xml:space="preserve">
          <source>Make the Class have package protected visibility.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="54c1eef5fbff9947aacd71adf067f0d29dfb1d84" translate="yes" xml:space="preserve">
          <source>Make the Class methods have package protected visibility.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9f8173048f5095097e54c6aa359894f04c4f2ff9" translate="yes" xml:space="preserve">
          <source>Makes NodeList iterable by returning a read-only Iterator which traverses over each Node.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="88acffa773fbcc0baa94ab8c601e1ccfe660230c" translate="yes" xml:space="preserve">
          <source>Makes a fallback method for an invalidated method selection</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a52493bd1e4b44f6a6e452cee9fb2e578a381bd6" translate="yes" xml:space="preserve">
          <source>MalformedURLException is thrown if the URL is not well formed</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="821988206b230e858421ce007bf5ceba1410d04a" translate="yes" xml:space="preserve">
          <source>Manage ATN for lexer to avoid memory leak</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="52fed6c478a61a3c2d907fa050d029e00f92ca48" translate="yes" xml:space="preserve">
          <source>Manage ATN for parser to avoid memory leak</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b4d3002f56eb4fe8eef35b6032ba291bc6ede854" translate="yes" xml:space="preserve">
          <source>Manage ATN to avoid memory leak</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="47ddc2cffb0698314807079178a196fccf251af5" translate="yes" xml:space="preserve">
          <source>Manages different aspects of the code of a code block like handling labels, defining variables, and scopes. After a MethodNode is visited clear should be called, for initialization the method init should be used.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fadefd430e7f7c12a61f3fc3d1f8a44349cefbf8" translate="yes" xml:space="preserve">
          <source>Manages the shells buffers.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ab478f3efc840eebab919dff1b9512286f70c10c" translate="yes" xml:space="preserve">
          <source>Map</source>
          <target state="translated">Map</target>
        </trans-unit>
        <trans-unit id="a09c3f0d8671dd743b5b8017f49ccb144adfe51c" translate="yes" xml:space="preserve">
          <source>Map decorator that will trigger PropertyChangeEvents when a value changes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8e06b17b1aaa9bef4e9fb30f265b775f40c95c39" translate="yes" xml:space="preserve">
          <source>Map utilities.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3b54311e845e7e71a0902c20bf7d112a154ede70" translate="yes" xml:space="preserve">
          <source>Map.Entry</source>
          <target state="translated">Map.Entry</target>
        </trans-unit>
        <trans-unit id="b7e56bc18df32a2de9eb3fff3f1c192b5c627cc2" translate="yes" xml:space="preserve">
          <source>MapConstructor</source>
          <target state="translated">MapConstructor</target>
        </trans-unit>
        <trans-unit id="55ca961d07d8a9cd66bdd12b2c2f18df81968f10" translate="yes" xml:space="preserve">
          <source>MapEntry</source>
          <target state="translated">MapEntry</target>
        </trans-unit>
        <trans-unit id="566c618f352d4dd7149578deae575de5a0591c88" translate="yes" xml:space="preserve">
          <source>Maps attributes key/values to properties on node.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3bb18ece33bb249dc3150472dfc39e112115a1b2" translate="yes" xml:space="preserve">
          <source>Maps the specified &lt;code&gt;key&lt;/code&gt; to the specified &lt;code&gt;value&lt;/code&gt; in this table.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="94d10deb2a04e8a4a17e2ce25d24fdb1b8d5fb6e" translate="yes" xml:space="preserve">
          <source>Maps the specified &lt;code&gt;key&lt;/code&gt; to the specified &lt;code&gt;value&lt;/code&gt; in this table. Neither the key nor the value can be &lt;code&gt;null&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="404c88caea3fc0d46b0874321a1874ad8def8b7c" translate="yes" xml:space="preserve">
          <source>Mark a method as already processed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="379f968bcbebae2db803116fabdbb40ae0ef0964" translate="yes" xml:space="preserve">
          <source>Mark is supported (returns true).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3cfc109d21e5ceb09c2eb99583801dbeb98a1f2d" translate="yes" xml:space="preserve">
          <source>Mark the current position.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="138a6e09c7cc140c998174947b054c360e8257e1" translate="yes" xml:space="preserve">
          <source>Mark the object initialized.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a17046036b3df728221dbdce16b10e4f902f5d46" translate="yes" xml:space="preserve">
          <source>Marker annotation used in the context of AST transformations to provide a custom visibility.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9bfc9691e39ee8a0589c039a2ce329efaa083afc" translate="yes" xml:space="preserve">
          <source>Marker annotation used to indicate that special property handling code will be generated for this class.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ef66b6e2f4d19977ff4fc1299cb87b0738117571" translate="yes" xml:space="preserve">
          <source>Marker interface to identify closures generated by the groovy compiler. For internal use only!</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dd50aae5f8e935f1b2e5a8f4dd5a0c63b86b295b" translate="yes" xml:space="preserve">
          <source>Marker interface to identify lambda generated by the groovy compiler. For internal use only!</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="824b10822f553472c75bca51b76e069069735487" translate="yes" xml:space="preserve">
          <source>Marker interface used to indicate that the name of the annotated parameter (or specified optional name) is a valid key name when using named arguments and that the parameter type is applicable for type checking purposes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="21b000d50dd7848c5e8b4f4167a7262b28a201ea" translate="yes" xml:space="preserve">
          <source>Marker interface used to indicate that the property names of the annotated parameter represent valid key names when using named arguments and that the property types are applicable for type checking purposes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d00a0342ebcd871e3871bbd338abfe43b36ec0de" translate="yes" xml:space="preserve">
          <source>Marker interface used to notify that all methods should be intercepted through the &lt;code&gt;invokeMethod&lt;/code&gt; mechanism of &lt;code&gt;GroovyObject&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="925a2619521e1eb9e0e57e88c084582904acff85" translate="yes" xml:space="preserve">
          <source>Marks if the current class uses annotations or not.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dcb7b71c70e6ca81e7c08574168c8ecadb4e2136" translate="yes" xml:space="preserve">
          <source>Marks the current phase complete and processes any errors.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ac5d883e2ec73d5557f86016865a6165c09173da" translate="yes" xml:space="preserve">
          <source>Marks the node a complete expression.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1e2c17cce09ceb68f8af748db407ce429779a8de" translate="yes" xml:space="preserve">
          <source>Marks the node a complete expression. Not all nodes support this operation!</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5356ed485191ed62b4e3fe9362988281a1b417b3" translate="yes" xml:space="preserve">
          <source>Marks the present position in the stream.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e7e7f97c6ebf6347705e8eb7b99850575fde2c86" translate="yes" xml:space="preserve">
          <source>Marks the present position in the stream. Subsequent calls to reset() will attempt to reposition the stream to this point.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="45b9498e5825f74d83e2c88442d568a95b6323a4" translate="yes" xml:space="preserve">
          <source>Marshall an object to a xml &lt;code&gt;String&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b4b467825c544103f7d4e8b295aeaed39319276b" translate="yes" xml:space="preserve">
          <source>Match a, a.b.c refs, a.b.c(...) refs, a.b.c[], a.b.c[].class, and a.b.c.class refs.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cb7dd6423c9974b26af04d6763c863bd9ee4a0c6" translate="yes" xml:space="preserve">
          <source>Match a, a.b.c refs, a.b.c(...) refs, a.b.c[], a.b.c[].class, and a.b.c.class refs. Also this(...) and super(...). Match this or super.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8f668dca85932cb69188484c69ccdc5caf31841b" translate="yes" xml:space="preserve">
          <source>Match the requested method name against eligible demands.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d5a3b62f999feb399a59d9dbe2a7c6df505641c6" translate="yes" xml:space="preserve">
          <source>Match the requested method name against eligible demands. Fail early if no match possible. Return the demand's behavior closure on match. Also skips over names matching ignore filter, if any.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d39b10e8cd8d79340b8769e64e02eaf8ad951a4c" translate="yes" xml:space="preserve">
          <source>Matcher.group</source>
          <target state="translated">Matcher.group</target>
        </trans-unit>
        <trans-unit id="57d3ce70aa8885e70d8f5af1a93e3f3c182dbeca" translate="yes" xml:space="preserve">
          <source>Matcher.quoteReplacement</source>
          <target state="translated">Matcher.quoteReplacement</target>
        </trans-unit>
        <trans-unit id="83ec1dcefb7a1e62c4e03d7314b8bd083da7c9a1" translate="yes" xml:space="preserve">
          <source>Matches an AST with another AST (pattern).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a306382126cb10c2bb359116d1c5a26031859c60" translate="yes" xml:space="preserve">
          <source>Matches an AST with another AST (pattern). It will return true if the AST matches all the nodes from the pattern AST.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c9ed164dad4a0719db73709f2eb2fb3c38fa08ec" translate="yes" xml:space="preserve">
          <source>Max size before Slurper starts to use windowing buffer parser.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d140143a6144b0b5c4a43145a0365d601f022be0" translate="yes" xml:space="preserve">
          <source>Measures an entry's weight to determine how many units of capacity that the key and value consumes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4403dcfdd0becf57f003abd8caeebe2e90d2b4be" translate="yes" xml:space="preserve">
          <source>Measures an entry's weight to determine how many units of capacity that the key and value consumes. An entry must consume a minimum of one unit.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fda7a9ba353fbd4547b61a5efb23f03ddf1eb7cc" translate="yes" xml:space="preserve">
          <source>Measures an object's weight to determine how many units of capacity that the value consumes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f13a725d392e5a0da4dafa67d71e15acfc75fa64" translate="yes" xml:space="preserve">
          <source>Measures an object's weight to determine how many units of capacity that the value consumes. A value must consume a minimum of one unit.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="db495efd01e96a7af32c2a72bc8803aff686adab" translate="yes" xml:space="preserve">
          <source>MemoizeCache</source>
          <target state="translated">MemoizeCache</target>
        </trans-unit>
        <trans-unit id="b13b3c9ef3f863d8178a7a32e16bce859d0b0e8c" translate="yes" xml:space="preserve">
          <source>Merges the given map with this ConfigObject overriding any matching configuration entries in this ConfigObject</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="712abde013d0fb10d2a1db9319028efe3821f72c" translate="yes" xml:space="preserve">
          <source>Message source backed up by one or more &lt;a href=&quot;https://docs.oracle.com/javase/8/docs/api/java/util/ResourceBundle.html&quot;&gt;ResourceBundle&lt;/a&gt; instances for simple i18n support.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="90ae502b59d6363315098adf8258d90493892025" translate="yes" xml:space="preserve">
          <source>MessageDigest#getInstance(java.lang.String)</source>
          <target state="translated">MessageDigest#getInstance(java.lang.String)</target>
        </trans-unit>
        <trans-unit id="ab1c5296792b44cb701c0efb3881e66c4af15b11" translate="yes" xml:space="preserve">
          <source>Meta annotation used when defining immutable classes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4888a49007717b5daca02358cba1ac9faca4934b" translate="yes" xml:space="preserve">
          <source>MetaClass</source>
          <target state="translated">MetaClass</target>
        </trans-unit>
        <trans-unit id="419584c14f00a609acc971db8f77d95f39d1e1e0" translate="yes" xml:space="preserve">
          <source>MetaClassImpl</source>
          <target state="translated">MetaClassImpl</target>
        </trans-unit>
        <trans-unit id="38f5e48b98192fe27b965405a955f0d2a73991ba" translate="yes" xml:space="preserve">
          <source>MetaClassImpl.getProperty</source>
          <target state="translated">MetaClassImpl.getProperty</target>
        </trans-unit>
        <trans-unit id="2766270aee36a2f779e2f98a8974e8bf3b944f2d" translate="yes" xml:space="preserve">
          <source>MetaClassImpl.invokeMethod</source>
          <target state="translated">MetaClassImpl.invokeMethod</target>
        </trans-unit>
        <trans-unit id="ccb9de8646b7f78354b69adad97d5b90da10b5dc" translate="yes" xml:space="preserve">
          <source>MetaClassImpl.invokeStaticMethod</source>
          <target state="translated">MetaClassImpl.invokeStaticMethod</target>
        </trans-unit>
        <trans-unit id="59d3460322ed220011f83c9e8154253c5ae55a53" translate="yes" xml:space="preserve">
          <source>MetaClassImpl.isInitialized</source>
          <target state="translated">MetaClassImpl.isInitialized</target>
        </trans-unit>
        <trans-unit id="13359c2ed4ffc1c63fe230a24029207531f3f159" translate="yes" xml:space="preserve">
          <source>MetaClassRegistry</source>
          <target state="translated">MetaClassRegistry</target>
        </trans-unit>
        <trans-unit id="d4f5872ac11c12381a4ae7c34f8c78177544f34a" translate="yes" xml:space="preserve">
          <source>MetaClassRegistryChangeEvent</source>
          <target state="translated">MetaClassRegistryChangeEvent</target>
        </trans-unit>
        <trans-unit id="0e765496299fd1c91b33943313a369674f1d373f" translate="yes" xml:space="preserve">
          <source>MetaClassRegistryImpl.setMetaClassCreationHandle</source>
          <target state="translated">MetaClassRegistryImpl.setMetaClassCreationHandle</target>
        </trans-unit>
        <trans-unit id="51b53dfea1b3b576144e6b64484cd9e5a27f76d9" translate="yes" xml:space="preserve">
          <source>MetaMethod</source>
          <target state="translated">MetaMethod</target>
        </trans-unit>
        <trans-unit id="a22c0dcaa7b189b3a508db78fd9a51106bdf6971" translate="yes" xml:space="preserve">
          <source>MetaMethod for mixed in classes</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1e17e30bc22ca918db8937fe1634235f086fb51d" translate="yes" xml:space="preserve">
          <source>MetaObjectProtocol</source>
          <target state="translated">MetaObjectProtocol</target>
        </trans-unit>
        <trans-unit id="7af3effda3182e598efcc9448ae5f430f5197022" translate="yes" xml:space="preserve">
          <source>MetaObjectProtocol.getMetaMethod</source>
          <target state="translated">MetaObjectProtocol.getMetaMethod</target>
        </trans-unit>
        <trans-unit id="fd69e71ee95e01caafc4571ddc82d21ce888d470" translate="yes" xml:space="preserve">
          <source>MetaObjectProtocol.getMetaProperty</source>
          <target state="translated">MetaObjectProtocol.getMetaProperty</target>
        </trans-unit>
        <trans-unit id="0e1bae73c18589ce43b32e6f0ec5cb02eb7f7c3a" translate="yes" xml:space="preserve">
          <source>MetaObjectProtocol.getMethods</source>
          <target state="translated">MetaObjectProtocol.getMethods</target>
        </trans-unit>
        <trans-unit id="c3124663c881683ff9db1e5b6eaadfe94f3f46fa" translate="yes" xml:space="preserve">
          <source>MetaObjectProtocol.getStaticMetaMethod</source>
          <target state="translated">MetaObjectProtocol.getStaticMetaMethod</target>
        </trans-unit>
        <trans-unit id="a20ef3d0e26539ca3f1cccf18e34c2aeeb34a52e" translate="yes" xml:space="preserve">
          <source>MetaObjectProtocol.hasProperty</source>
          <target state="translated">MetaObjectProtocol.hasProperty</target>
        </trans-unit>
        <trans-unit id="b25c3c71cd945900773ee51f4a3a51d41a9d45b8" translate="yes" xml:space="preserve">
          <source>MetaObjectProtocol.respondsTo</source>
          <target state="translated">MetaObjectProtocol.respondsTo</target>
        </trans-unit>
        <trans-unit id="c81ee20f605e60ee5771e05dea2b05ec42dc73ed" translate="yes" xml:space="preserve">
          <source>MetaProperty</source>
          <target state="translated">MetaProperty</target>
        </trans-unit>
        <trans-unit id="ee2be8df0e44ef32f12929a6229dc63c0c7f01b5" translate="yes" xml:space="preserve">
          <source>MetaProperty for mixed in classes</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="10e4ca1976a5dec35046b8038b63b14e9548c032" translate="yes" xml:space="preserve">
          <source>Method Detail</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ec141cb89c69e5e3013d060a72752f4c340ae600" translate="yes" xml:space="preserve">
          <source>Method annotation that creates a cache for the results of the execution of the annotated method. Whenever the method is called, the mapping between the parameters and the return value is preserved in a cache making subsequent calls with the same arguments fast.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6788e8cc16e03aa1169497d9972304ec2d9f903d" translate="yes" xml:space="preserve">
          <source>Method annotation to make a method call synchronized for concurrency handling with some useful baked-in conventions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b89f8dadc53cacf6376eae73faf12f82399b6f0d" translate="yes" xml:space="preserve">
          <source>Method annotation used to invert test case results. If a JUnit 3/4 test case method is annotated with &lt;code&gt;@NotYetImplemented&lt;/code&gt; the test will fail if no test failure occurs and it will pass if a test failure occurs.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="277e922bcb6ae1fca53ff19a48641becde56f5bc" translate="yes" xml:space="preserve">
          <source>Method annotation used to invert test case results. If a JUnit 3/4/5 test case method is annotated with &lt;code&gt;@NotYetImplemented&lt;/code&gt;, the test will fail if no test failure occurs and it will pass if a test failure occurs.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e815a19e2700a56589e34132121c7fa90876df5e" translate="yes" xml:space="preserve">
          <source>Method annotation used to transform methods with tail recursive calls into iterative methods automagically since the JVM cannot do this itself. This works for both static and non-static methods.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="782219ffee1f826b0f7b4abf49494bad36740619" translate="yes" xml:space="preserve">
          <source>Method called to dispatch event on event bus.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6e9feb5a7c9c6313fa7ebdcb794e79aec27106b7" translate="yes" xml:space="preserve">
          <source>Method for overloading the behavior of the 'case' method in switch statements.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="baee14a543ea6ce593b9c6b1bfb41ad6ce8218d2" translate="yes" xml:space="preserve">
          <source>Method for overloading the behavior of the 'case' method in switch statements. The default implementation handles arrays types but otherwise simply delegates to Object#equals, but this may be overridden for other types. In this example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="79a25cf4deb2141db41f11b0d28994211d92fcc1" translate="yes" xml:space="preserve">
          <source>Method invocation type</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9a08358710427ef88a50851f66cb82a3182997a7" translate="yes" xml:space="preserve">
          <source>Method names via a GString are never considered to be recursive</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="380d330a20d2e4843e0aa59549ff06853143194e" translate="yes" xml:space="preserve">
          <source>Method not implemented.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5b86e4fcb19f025524d5318cf70bad9f81128f71" translate="yes" xml:space="preserve">
          <source>Method to configure a CompilerConfiguration by using Properties.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="17c6bbd95adec0e7579daf91789c86b7569a6be3" translate="yes" xml:space="preserve">
          <source>Method to configure a CompilerConfiguration by using Properties. For a list of available properties look at &lt;a href=&quot;#CompilerConfiguration(java.util.Properties)&quot;&gt;CompilerConfiguration(Properties)&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="123a78eb1cac6b45468421a739e53c2dbec2ecd7" translate="yes" xml:space="preserve">
          <source>Method to transform the given ClassNode, if it is annotated with &lt;a href=&quot;../../../../groovy/transform/annotationcollector&quot;&gt;AnnotationCollector&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="41cfee5c0aef9c7a0308dcd40e377c753f521531" translate="yes" xml:space="preserve">
          <source>Method to transform the given ClassNode, if it is annotated with &lt;a href=&quot;../../../../groovy/transform/annotationcollector&quot;&gt;AnnotationCollector&lt;/a&gt;. See class description for what the transformation includes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3e8000864b3b9fe2809941d72007d68401bbcc54" translate="yes" xml:space="preserve">
          <source>Method used for coercing an object to a boolean value, thanks to an &lt;code&gt;asBoolean()&lt;/code&gt; method added on types.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2c9649d9bed50b263b70e187025d4e87c03414a2" translate="yes" xml:space="preserve">
          <source>MethodCall</source>
          <target state="translated">MethodCall</target>
        </trans-unit>
        <trans-unit id="7e4ac6803c9159c694f63d089cb06b2519c16aba" translate="yes" xml:space="preserve">
          <source>Methods</source>
          <target state="translated">Methods</target>
        </trans-unit>
        <trans-unit id="06e937e1806dbd0696e7f501f75bb29fe709e670" translate="yes" xml:space="preserve">
          <source>Methods Summary</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="65008ac1869d888ae463c26ea7f4cc9831b688ca" translate="yes" xml:space="preserve">
          <source>Methods in generated aggregates not supplied in a closures map or base class are given 'default' implementations. The implementation will normally throw an &lt;code&gt;UnsupportedOperationException&lt;/code&gt; but setting this boolean will leave it empty.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="00c30d00f492988efb8ad95371a20497a49143c1" translate="yes" xml:space="preserve">
          <source>Methods inherited from class</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6e7c3a41f4fca676d289e8ba18d2ddabea016f83" translate="yes" xml:space="preserve">
          <source>Methods like equals and hashcode are called on the class itself instead of the delegate because they are considered fundamental methods that should not be overwritten. The toString() method gets special treatment as it is deemed to be a method that you might wish to override when called from Groovy. Interface default methods from Java 8 on the other hand are considered being default implementations you don't normally want to change. So they are called directly too</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c2bf02b957901fd0d0948c28488d00f6a6eee3f3" translate="yes" xml:space="preserve">
          <source>Methods needed to implement GroovyObject</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="efca9dad4baca68ea1514c145966dfef01c02dd5" translate="yes" xml:space="preserve">
          <source>Methods with duplicate signatures</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4497f52ccacce2fd0cbb01577abfb836237757ae" translate="yes" xml:space="preserve">
          <source>Minimal &lt;code&gt;web.xml&lt;/code&gt; example serving HTML-like templates</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="311ee3854be6a6496fe513db83e927190d652c68" translate="yes" xml:space="preserve">
          <source>Mirrors the static value of the reflection flag in MetaClass.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="607e1bc71147a13b113ee21329d931a0c5d2b077" translate="yes" xml:space="preserve">
          <source>Mirrors the static value of the reflection flag in MetaClass. See AbstractHttpServlet#logGROOVY861</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="03ec44d96126d28ad5d28dd6ad533f6e593d20d7" translate="yes" xml:space="preserve">
          <source>Mismatches in modifiers or return types between implementations and interfaces/abstract classes</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ebd66919f88c17d020b23a0868a013cde3b05895" translate="yes" xml:space="preserve">
          <source>MissingMethodException</source>
          <target state="translated">MissingMethodException</target>
        </trans-unit>
        <trans-unit id="ef9164bc0c9ade2b4195cc954569e2da00f28194" translate="yes" xml:space="preserve">
          <source>MissingPropertyException if an SQLException happens while getting the object</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8ab5076b2dc51a5698fa728c6b5c36073e5ba709" translate="yes" xml:space="preserve">
          <source>MissingPropertyException if an SQLException happens while setting the new value</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="90d57362619118c3625834d9619ecc3589e350dd" translate="yes" xml:space="preserve">
          <source>Mix of BuilderSupport and SwingBuilder's factory support. Warning: this implementation is not thread safe and should not be used across threads in a multi-threaded environment. A locking mechanism should be implemented by the subclass if use is expected across multiple threads.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="755d17ffc05624e0a81d5a45bf5349fd279b0f0a" translate="yes" xml:space="preserve">
          <source>Mixing of &lt;code&gt;@Delegate&lt;/code&gt; with default method arguments is known not to work in some cases. We recommend not using these features together.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e5596e647de0c08470e3e84271c704319c1c8278" translate="yes" xml:space="preserve">
          <source>Mixing of tail calls and non-tail calls is not possible. The compiler will complain if some recursive calls cannot be handled.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2d161af41f7a4cabfa833c87ad6e4c2cdccfa89f" translate="yes" xml:space="preserve">
          <source>MockFor supports (typically unit) testing of classes in isolation by allowing a strictly ordered expectation of the behavior of collaborators to be defined. A typical test scenario involves a class under test (CUT) and one or more collaborators. In such a scenario it is often desirable to just test the business logic of the CUT. One strategy for doing that is to replace the collaborator instances with simplified mock objects to help isolate out the logic in the CUT. MockFor allows such mocks to be created using meta-programming. The desired behavior of collaborators is defined as a behavior specification. The behavior is enforced and checked automatically. With MockFor, a mock's expectation is always sequence dependent and its use automatically ends with a verify(). Typical usage is as follows:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3086341333be34a85052bf77d23aef752aafbfdd" translate="yes" xml:space="preserve">
          <source>MockFor#ignore(Object, Closure)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c4874640c885eadc98e4931c1eff429ca75be1fa" translate="yes" xml:space="preserve">
          <source>MockFor#proxyDelegateInstance(Object)</source>
          <target state="translated">MockFor#proxyDelegateInstance(Object)</target>
        </trans-unit>
        <trans-unit id="d9c610a65b0622da1642023c77879adb843db7b1" translate="yes" xml:space="preserve">
          <source>MockFor#proxyInstance(Object)</source>
          <target state="translated">MockFor#proxyInstance(Object)</target>
        </trans-unit>
        <trans-unit id="3d53c4ec37a31c4835b4d76a45495e5e7d871f47" translate="yes" xml:space="preserve">
          <source>MockFor#use(Closure)</source>
          <target state="translated">MockFor#use(Closure)</target>
        </trans-unit>
        <trans-unit id="0932417938bca7da33b2ef0691290220105bb7b3" translate="yes" xml:space="preserve">
          <source>ModelMBeanAttributeInfo</source>
          <target state="translated">ModelMBeanAttributeInfo</target>
        </trans-unit>
        <trans-unit id="d11bebca54e790921ed4f60faae8cd6773ea8087" translate="yes" xml:space="preserve">
          <source>ModelMBeanInfo built from map</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="025edcc77482432b94d5876e68d74d4148df9cb9" translate="yes" xml:space="preserve">
          <source>Modified astNode.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7c2cbc27fa584ac57fd1bdb2642bf44da15d64aa" translate="yes" xml:space="preserve">
          <source>Modifier.PUBLIC</source>
          <target state="translated">Modifier.PUBLIC</target>
        </trans-unit>
        <trans-unit id="3a7ea294bf33134dce4b142b8b7182de29b978b2" translate="yes" xml:space="preserve">
          <source>Modifiers</source>
          <target state="translated">Modifiers</target>
        </trans-unit>
        <trans-unit id="bc156e03c410aa851b6a7a2bea0608ab97bc0cb8" translate="yes" xml:space="preserve">
          <source>Modifies the collection by adding all of the elements in the specified array to the collection.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="380207b9f553a150f5377ed9b7624c4a3e086bdc" translate="yes" xml:space="preserve">
          <source>Modifies the collection by adding all of the elements in the specified array to the collection. The behavior of this operation is undefined if the specified array is modified while the operation is in progress. See also &lt;code&gt;plus&lt;/code&gt; or the '+' operator if wanting to produce a new collection containing additional items but while leaving the original collection unchanged.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0708aa0db6ba529b92279801010d7ada0bdf68e7" translate="yes" xml:space="preserve">
          <source>Modifies this List to remove all duplicated items, using Groovy's default number-aware comparator.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9c080efc19ddd724523649f187a81010dbb882cc" translate="yes" xml:space="preserve">
          <source>Modifies this array so that its elements are in sorted order as determined by the given comparator.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="887b867017a9f56fa614e272588c82c05b50e7d1" translate="yes" xml:space="preserve">
          <source>Modifies this array so that its elements are in sorted order as determined by the given comparator. If mutate is true, the array is sorted in place and returned. Otherwise, a new sorted array is returned and the original array remains unchanged.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5cbdd86df0bf572f2008195e60949cc58e25b310" translate="yes" xml:space="preserve">
          <source>Modifies this array so that its elements are in sorted order using the Closure to determine the correct ordering.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e64fae19eadcf03aa731a0ab81a3a1b3b152047c" translate="yes" xml:space="preserve">
          <source>Modifies this array so that its elements are in sorted order using the Closure to determine the correct ordering. If mutate is false, a new array is returned and the original array remains unchanged. Otherwise, the original array is sorted in place and returned.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ce7fc52f8387f928f920c741fde77f37ddf03677" translate="yes" xml:space="preserve">
          <source>Modifies this array so that its elements are in sorted order.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7ceea0de2f5440c5c21e4ceb04dca9db88f42db7" translate="yes" xml:space="preserve">
          <source>Modifies this array so that its elements are in sorted order. The array items are assumed to be comparable.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6e1748849a9faef3f8bd44a19daf3a7baa2a7455" translate="yes" xml:space="preserve">
          <source>Modifies this collection by removing a single instance of the specified element from this collection, if it is present.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="47d593b2aab2f46fa9d4a7d6266a5d2d54e26d46" translate="yes" xml:space="preserve">
          <source>Modifies this collection by removing a single instance of the specified element from this collection, if it is present. Essentially an alias for &lt;a href=&quot;https://docs.oracle.com/javase/8/docs/api/java/util/Collection.html#remove(java.lang.Object)&quot;&gt;Collection.remove&lt;/a&gt; but with no ambiguity for Collection&amp;lt;Integer&amp;gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4e62ed999402c359f61d392feba28c109b9da0bd" translate="yes" xml:space="preserve">
          <source>Modifies this collection by removing its elements that are contained within the specified object array.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ac96a00848fe0255d7355d67d5b79ac968dd62d1" translate="yes" xml:space="preserve">
          <source>Modifies this collection by removing its elements that are contained within the specified object array. See also &lt;code&gt;findAll&lt;/code&gt; and &lt;code&gt;grep&lt;/code&gt; when wanting to produce a new list containing items which don't match some criteria while leaving the original collection unchanged.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fab3ece4a2481d7e4613dd9dd0bdc4e04d5e56ff" translate="yes" xml:space="preserve">
          <source>Modifies this collection by removing the elements that are matched according to the specified closure condition.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="46991dd634a84da465fa8c00dc8f0bf75ab3ce65" translate="yes" xml:space="preserve">
          <source>Modifies this collection so that it retains only its elements that are contained in the specified array.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e343eae9baa33c6562a0ecd400b40a2f8a857760" translate="yes" xml:space="preserve">
          <source>Modifies this collection so that it retains only its elements that are contained in the specified array. In other words, removes from this collection all of its elements that are not contained in the specified array. See also &lt;code&gt;grep&lt;/code&gt; and &lt;code&gt;findAll&lt;/code&gt; when wanting to produce a new list containing items which match some specified items but leaving the original collection unchanged.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7ade798a628fea45df8e34cba7d5303cd4a609b0" translate="yes" xml:space="preserve">
          <source>Modifies this collection so that it retains only its elements that are matched according to the specified closure condition.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f929316df70f8f1e2ffbd28158f473488713b810" translate="yes" xml:space="preserve">
          <source>Modifies this collection so that it retains only its elements that are matched according to the specified closure condition. In other words, removes from this collection all of its elements that don't match.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bd83a4bd4e8a3039560a2a8e30ffe3b0cc04fa6b" translate="yes" xml:space="preserve">
          <source>Modifies this collection to remove all duplicated items, using Groovy's default number-aware comparator.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5ef16fa7d38bbd887e37eddf4d7a889eab9f3cfc" translate="yes" xml:space="preserve">
          <source>Modifies this list by inserting all of the elements in the specified array into the list at the specified position.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cd2bcf67ae613c812b29003a13268cc881d1b847" translate="yes" xml:space="preserve">
          <source>Modifies this list by inserting all of the elements in the specified array into the list at the specified position. Shifts the element currently at that position (if any) and any subsequent elements to the right (increases their indices). The new elements will appear in this list in the order that they occur in the array. The behavior of this operation is undefined if the specified array is modified while the operation is in progress. See also &lt;code&gt;plus&lt;/code&gt; for similar functionality with copy semantics, i.e. which produces a new list after adding the additional items at the specified position but leaves the original list unchanged.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0134344d07c75b67e73fba4e2fb3130f7c9bf207" translate="yes" xml:space="preserve">
          <source>Modifies this list by removing the element at the specified position in this list.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fb14e1447a32a454fdb3408f6d06cde0e3e02355" translate="yes" xml:space="preserve">
          <source>Modifies this list by removing the element at the specified position in this list. Returns the removed element. Essentially an alias for &lt;a href=&quot;https://docs.oracle.com/javase/8/docs/api/java/util/List.html#remove(int)&quot;&gt;List.remove&lt;/a&gt; but with no ambiguity for List&amp;lt;Integer&amp;gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1c556e38abc6a1c232bc79ac962a96f51db97b53" translate="yes" xml:space="preserve">
          <source>Modifies this map by removing the elements that are matched according to the specified closure condition.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f0b149a15a632d675d5df4f0a795c87fb37296cd" translate="yes" xml:space="preserve">
          <source>Modifies this map by removing the elements that are matched according to the specified closure condition. If the closure takes one parameter then it will be passed the &lt;code&gt;Map.Entry&lt;/code&gt;. Otherwise the closure should take two parameters, which will be the key and the value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1709de54e47c4582311ba0cca486c3315dae76f5" translate="yes" xml:space="preserve">
          <source>Modifies this map so that it retains only its elements that are matched according to the specified closure condition.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="039770bf92c6b298931770f369178fff92750134" translate="yes" xml:space="preserve">
          <source>Modifies this map so that it retains only its elements that are matched according to the specified closure condition. In other words, removes from this map all of its elements that don't match. If the closure takes one parameter then it will be passed the &lt;code&gt;Map.Entry&lt;/code&gt;. Otherwise the closure should take two parameters, which will be the key and the value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cf24cbbe6440aa24720957a42176508de18bbbb9" translate="yes" xml:space="preserve">
          <source>ModuleNode.addClass</source>
          <target state="translated">ModuleNode.addClass</target>
        </trans-unit>
        <trans-unit id="9411aff826dbe5c84605a104736124bff65d636e" translate="yes" xml:space="preserve">
          <source>ModuleNode.createStatementsClass</source>
          <target state="translated">ModuleNode.createStatementsClass</target>
        </trans-unit>
        <trans-unit id="c35e03802dee87a6369229e9daa5e46ac909e81a" translate="yes" xml:space="preserve">
          <source>Modules are required to implement the &lt;a href=&quot;#getInstanceMethodsExtensionClasses&quot;&gt;getInstanceMethodsExtensionClasses&lt;/a&gt; for classes defining new instance methods, and &lt;a href=&quot;#getStaticMethodsExtensionClasses()&quot;&gt;getStaticMethodsExtensionClasses()&lt;/a&gt; for classes defining static methods.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="18c033c99550dd7c89fc985b6045aa0d08104dc9" translate="yes" xml:space="preserve">
          <source>MonthDay.parse</source>
          <target state="translated">MonthDay.parse</target>
        </trans-unit>
        <trans-unit id="473710d327804e484c1863690d91c3751e2c7c98" translate="yes" xml:space="preserve">
          <source>More details</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="08965269be31a1f77226663d4b16152886fa2985" translate="yes" xml:space="preserve">
          <source>More examples:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="66f208a9db8dc24fb6fd03618d492a7cafb85069" translate="yes" xml:space="preserve">
          <source>More formally speaking, given the following script:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3f3cc999267aa09a1ef39c1ab8e3bca8f845db4b" translate="yes" xml:space="preserve">
          <source>Most of the security customization options found in this class work with either</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="040a9c490652e6bd1a1e9fd85ff06c911792bc4b" translate="yes" xml:space="preserve">
          <source>Moves the cursor down one row from its current position.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="70b995ea060a8904e89f8c63d464f5023711818e" translate="yes" xml:space="preserve">
          <source>Moves the cursor down one row from its current position. A &lt;code&gt;getResultSet()&lt;/code&gt; cursor is initially positioned before the first row; the first call to the method &lt;code&gt;next&lt;/code&gt; makes the first row the current row; the second call makes the second row the current row, and so on.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2099b734e17e3c9c5dc48519842892a3bb81cd78" translate="yes" xml:space="preserve">
          <source>Moves the cursor to the previous row in this &lt;code&gt;getResultSet()&lt;/code&gt; object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="befbfb3a6c82c6f2db4620554f1a70575e419a55" translate="yes" xml:space="preserve">
          <source>Multi type dispatcher for binary expression backend combining indy and static compilation</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d3e4fddd2c6ead65bb836f5ac89ecd509b2b265a" translate="yes" xml:space="preserve">
          <source>Multi-catch(1..*) clause will be unpacked to several normal catch clauses, so the return type is List</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="37aeec9a1707c0af3b473e8f381a7ae8b7f8fdea" translate="yes" xml:space="preserve">
          <source>Multiply a BigDecimal and a BigInteger.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="04c05f8d87ad1214ce02a18ad34b3f14eb79b340" translate="yes" xml:space="preserve">
          <source>Multiply a BigDecimal and a BigInteger. Note: This method was added to enforce the Groovy rule of BigDecimal*long == long. Without this method, the multiply(BigDecimal) method in BigDecimal would respond and return a BigDecimal instead. Since BigDecimal is preferred over Number, the Number*Number method is not chosen as in older versions of Groovy. BigInteger is the fallback for all integer types in Groovy</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="550322ac490f6ca4e722f9957a1f85b148ff3641" translate="yes" xml:space="preserve">
          <source>Multiply a BigDecimal and a Double.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fd00228f0ca7519c56d2d4a9f98c0d9dd8f1a3c7" translate="yes" xml:space="preserve">
          <source>Multiply a BigDecimal and a Double. Note: This method was added to enforce the Groovy rule of BigDecimal*Double == Double. Without this method, the multiply(BigDecimal) method in BigDecimal would respond and return a BigDecimal instead. Since BigDecimal is preferred over Number, the Number*Number method is not chosen as in older versions of Groovy.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="baa29d6124c84e7aafe4ba7d9e6b984b3c544d8c" translate="yes" xml:space="preserve">
          <source>Multiply a Character by a Number.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1387a75e41f52b9b400b6cd6589dc126d5ed4794" translate="yes" xml:space="preserve">
          <source>Multiply a Character by a Number. The ordinal value of the Character is used in the multiplication (the ordinal value is the unicode value which for simple character sets is the ASCII value).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a9799badf27761ca271c7719351f699464cd0a55" translate="yes" xml:space="preserve">
          <source>Multiply a Number by a Character.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="795daf355df454aaa79ea9597695b18a78234211" translate="yes" xml:space="preserve">
          <source>Multiply a Number by a Character. The ordinal value of the Character is used in the multiplication (the ordinal value is the unicode value which for simple character sets is the ASCII value).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6f7c59e710f7be397c9ba882434ab1e14cf435a5" translate="yes" xml:space="preserve">
          <source>Multiply two Characters.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2362de1bb7f57832f2a8842002e4b1afdcd79423" translate="yes" xml:space="preserve">
          <source>Multiply two Characters. The ordinal values of the Characters are used in the multiplication (the ordinal value is the unicode value which for simple character sets is the ASCII value).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9b1af0bd9de87e00c47c5bfddffb364afc6dae27" translate="yes" xml:space="preserve">
          <source>MyParameterised() o Added typeArguments to postfixExpression productions for anonymous inner class super constructor invocation, e.g. new Outer().</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="69969e03b9fa72c43baabeaf94ee795920a145cc" translate="yes" xml:space="preserve">
          <source>NOP</source>
          <target state="translated">NOP</target>
        </trans-unit>
        <trans-unit id="9307d3b367982650c80bbb7e0be9555a8c15a8fc" translate="yes" xml:space="preserve">
          <source>NOP, because an attribute does not have a Body.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="834de248ec3ae51dfd5dc76ed29fb1f3ed7d0f5f" translate="yes" xml:space="preserve">
          <source>NOP, because an attribute does not have any Node to replace.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ffea5b1f18e58e3642897fb06fe24af85b7519c8" translate="yes" xml:space="preserve">
          <source>NOP, because an node can not be appended to an attribute.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4ae41fdb9ecc3532a65d80469b2b93db7fa0b09a" translate="yes" xml:space="preserve">
          <source>NOTE: First the parent loaders will be asked and only if they don't return a class the recompilation will happen. Recompilation also only happen if the source file is newer.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="84b1559f8b68ae1143b81024af5c55a24f36e4ce" translate="yes" xml:space="preserve">
          <source>NOTE: This doesn't affect field copying that might occur as part of serialization when using the &lt;code&gt;SERIALIZATION&lt;/code&gt; style, i.e. this flag is ignored; instead adjust your serialization code to include or exclude your fields.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="551669f57a9920341c704154f6a55935927cfba2" translate="yes" xml:space="preserve">
          <source>NOTE: This doesn't affect property (and/or field) copying that might occur as part of serialization when using the &lt;code&gt;SERIALIZATION&lt;/code&gt; style, i.e. this flag is ignored; instead adjust your serialization code to include or exclude the desired properties (and/or fields) which should carry over during cloning.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="167f64a2dfd5f08a22f2b877044d954894420b55" translate="yes" xml:space="preserve">
          <source>NOTE: This method changed in Lang version 2.0. It no longer trims the CharSequence. That functionality is available in isBlank().</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7756b7b63da76b2cc2e8bcdab41c9777da039ec1" translate="yes" xml:space="preserve">
          <source>NOTE: When using the &lt;code&gt;CLONE&lt;/code&gt; style, field copying might occur as part of calling &lt;code&gt;super.clone()&lt;/code&gt; and might be all you require; if you turn on this flag, the provided &lt;code&gt;clone()&lt;/code&gt; implementation will also subsequently call &lt;code&gt;clone()&lt;/code&gt; for each &lt;code&gt;Cloneable&lt;/code&gt; field which can be useful if you have mutable fields.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6f041d7c1198010518fd4e334e37fd261dc9d957" translate="yes" xml:space="preserve">
          <source>NOTE: When using the &lt;code&gt;CLONE&lt;/code&gt; style, property (and/or field) copying might occur as part of calling &lt;code&gt;super.clone()&lt;/code&gt; which will ignore this list. You can then use this list to streamline the provided &lt;code&gt;clone()&lt;/code&gt; implementation by selecting which Cloneable properties (and/or fields) will have a subsequent call to their &lt;code&gt;clone()&lt;/code&gt; method. If you have immutable properties (and/or fields) this can be useful as the extra &lt;code&gt;clone()&lt;/code&gt; will not be necessary and cloning will be more efficient.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5aadb31d208e3fc5d98ed0cc8990a41b8012a4a4" translate="yes" xml:space="preserve">
          <source>NOTE: While this class contains many 'public' static methods, it is primarily regarded as an internal class (its internal package name suggests this also). We value backwards compatibility of these methods when used within Groovy but value less backwards compatibility at the Java method call level. I.e. future versions of Groovy may remove or move a method call in this file but would normally aim to keep the method available from within Groovy.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="709a23220f2c3d64d1e1d6d18c4d5280f8d82fca" translate="yes" xml:space="preserve">
          <source>Name</source>
          <target state="translated">Name</target>
        </trans-unit>
        <trans-unit id="2b0336a1a8f0f7b6b93e4153e5e39ae262e2572e" translate="yes" xml:space="preserve">
          <source>Name and Description</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fa2fb5bca6276b72cfe7a17b8f0ed6854cc91ade" translate="yes" xml:space="preserve">
          <source>Name and description</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fc38631243437f82b798dca8723c6567970b5f33" translate="yes" xml:space="preserve">
          <source>Name of the annotation being referenced.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5012fa4db5522caadd2b18509ff525a14aa3eb10" translate="yes" xml:space="preserve">
          <source>Name of the annotation being referenced. Once resolved, equates to &lt;code&gt;type().typeName()&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c85a45c91647c50f218bc914160dd413a4294077" translate="yes" xml:space="preserve">
          <source>Named and named ordinal parameters</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0d7d032a431810ffd0542b7891b7c73c898301f9" translate="yes" xml:space="preserve">
          <source>Named arguments can be passed to the JSON builder instance to create a root JSON object</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7140c406a876871b8d640cbe8aa99f530a4ea69d" translate="yes" xml:space="preserve">
          <source>Named arguments can be passed to the YAML builder instance to create a root YAML object</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e4e74f925a5611d61f5f514415c43617c7f5c8e3" translate="yes" xml:space="preserve">
          <source>Named ordinal parameter queries have multiple model objects with the index number (starting at 1) also supplied in the placeholder. Only the question mark variation of placeholder is supported. Here are some examples:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a83272859d8ca4fa93ee5dbd8ddbfb3ebebb231d" translate="yes" xml:space="preserve">
          <source>Named ordinal parameters (into maps or domain objects) are also supported:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="feff364da34f4c85f98a814cd0b4dc5b7c6f6bd2" translate="yes" xml:space="preserve">
          <source>Named parameter queries use placeholder values in the query String. Two forms are supported ':propname1' and '?.propname2'. For these variations, a single &lt;em&gt;model&lt;/em&gt; object is supplied in the parameter list/array/map. The propname refers to a property of that model object. The model object could be a map, Expando or domain class instance. Here are some examples:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b13c6f9a05e98e8dab768bbc9e530cf3c5db175c" translate="yes" xml:space="preserve">
          <source>Named parameters (into maps or domain objects) are also supported:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bccaf40b8e10de9b1f91341cab486e73779cf746" translate="yes" xml:space="preserve">
          <source>Named-argument support:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b7a446f67e7e2b9edbb892ad2bdb7ed065e06ab6" translate="yes" xml:space="preserve">
          <source>NamedDelegate</source>
          <target state="translated">NamedDelegate</target>
        </trans-unit>
        <trans-unit id="73bad29026fccae0a29fddcafb884770b012fad2" translate="yes" xml:space="preserve">
          <source>NamedParam</source>
          <target state="translated">NamedParam</target>
        </trans-unit>
        <trans-unit id="a7dd8120b26eb7b0184ba0d20374dee897e78115" translate="yes" xml:space="preserve">
          <source>Names of all the operations available on the MBean.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="41946f3a7d133e5dc89631d2cc862c6b48bc5817" translate="yes" xml:space="preserve">
          <source>Namespace URI</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2ef73678584483635d02a836cb6d68f865b0892a" translate="yes" xml:space="preserve">
          <source>Negate a boolean on stack.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6193ab57330cb96f83ed43ff2b08579bd37fbe90" translate="yes" xml:space="preserve">
          <source>Negates the number.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="77c60b9a9794e03d8c974be73f914dae0f5207fb" translate="yes" xml:space="preserve">
          <source>Negates the number. Equivalent to the '-' operator when it preceeds a single operand, i.e. &lt;code&gt;-10&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6987d8c0c9b2ec544bc5ac83bdfc0309ece27463" translate="yes" xml:space="preserve">
          <source>Nested Class Summary</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="65046fcf73f5e6ac3773f70ea1badbd965d975c0" translate="yes" xml:space="preserve">
          <source>Nested classes</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="832189fbd4e86282461b3d88597c0c6ab0dcd8c7" translate="yes" xml:space="preserve">
          <source>Nested map of variable accesses to replace e.g.: [ 'varToReplace': [name: 'newVar', type: TypeOfVar], 'varToReplace2': [name: 'newVar2', type: TypeOfVar2], ]</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="539e69dc5d634880b9db0513a9e5dc9fb735afda" translate="yes" xml:space="preserve">
          <source>Never true for an empty range.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="85eb4b5d52c66db99f5939170fcb95d901759575" translate="yes" xml:space="preserve">
          <source>NewInstanceResolver</source>
          <target state="translated">NewInstanceResolver</target>
        </trans-unit>
        <trans-unit id="4a01d5377614eb29dd0accac17b53799b0632e65" translate="yes" xml:space="preserve">
          <source>No abstract methods appear in a non-abstract class</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="38b8a478045e35a7531e602b66811d13e461d5ac" translate="yes" xml:space="preserve">
          <source>No attempt has been made to optimize this class for speed or space.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f8747df5d76bd13ed636add092ad6f2bb90338c9" translate="yes" xml:space="preserve">
          <source>No longer used directly but instead collected from &lt;a href=&quot;immutablebase&quot;&gt;ImmutableBase&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d4f45dd8bad1feb300267ec49935c863b70a88dd" translate="yes" xml:space="preserve">
          <source>No longer used directly but instead collected from &lt;a href=&quot;immutablebase&quot;&gt;ImmutableBase&lt;/a&gt;. Remains for legacy handling only.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="15099a6ebe9973248812f295f78f6b95ac0b5b7f" translate="yes" xml:space="preserve">
          <source>No longer used directly but instead collected from &lt;a href=&quot;immutableoptions&quot;&gt;ImmutableOptions&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9bd971991a867218e6c85b352207d5883116ecfd" translate="yes" xml:space="preserve">
          <source>No longer used directly but instead collected from &lt;a href=&quot;immutableoptions&quot;&gt;ImmutableOptions&lt;/a&gt;. Remains for legacy handling only.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="56cfe2a49f780b98c0c078d81e7979aa367dbb9b" translate="yes" xml:space="preserve">
          <source>No use should be made of this instance after this method is invoked. Any classes that are already loaded are still accessible.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c930cd5c9c68b992c252a44a2e07651c3d60f0c9" translate="yes" xml:space="preserve">
          <source>NoSuchAlgorithmException if MD5 algorithm not found</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d7375cba39cce262b5f244aa740bb1d0ba3b39a0" translate="yes" xml:space="preserve">
          <source>NoSuchAlgorithmException if SHA-256 algorithm not found</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="73882d51ad7e76066b5b29126c45107fbafda8aa" translate="yes" xml:space="preserve">
          <source>NoSuchAlgorithmException if the algorithm not found</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="73c433054fd25c94b86c9e47c9d34d5c39d1f407" translate="yes" xml:space="preserve">
          <source>NoSuchElementException if the Iterable is empty and you try to access the first() item.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8dcb00fd76f469fda9100b45685752839fc99d6a" translate="yes" xml:space="preserve">
          <source>NoSuchElementException if the Iterable is empty and you try to access the head() item.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a82fec760c560832f7e7861dcd9c49d0cf3a6c23" translate="yes" xml:space="preserve">
          <source>NoSuchElementException if the Iterable is empty and you try to access the last() item.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6a146e157b24b7edbcbaf6586e8bccbf94d61d70" translate="yes" xml:space="preserve">
          <source>NoSuchElementException if the List is empty and you try to access init()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5c3b0de6d5e1acdbde586c3ec115ad1bc8740a5a" translate="yes" xml:space="preserve">
          <source>NoSuchElementException if the List is empty and you try to access the tail()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4ff096a4be24a8950c75aefff856f16e08266b24" translate="yes" xml:space="preserve">
          <source>NoSuchElementException if the SortedSet is empty and you try to access init()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="23d7e73efe9070dec90a1f986d5164001fd2eb45" translate="yes" xml:space="preserve">
          <source>NoSuchElementException if the SortedSet is empty and you try to access the tail()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="433b7b56bc42c1901d58d4108327f019c537fd0d" translate="yes" xml:space="preserve">
          <source>NoSuchElementException if the array is empty and you try to access the first() item.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2008d0501eb8110fbae96318fac6ba330322edf4" translate="yes" xml:space="preserve">
          <source>NoSuchElementException if the array is empty and you try to access the head() item.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d193e4b50dbe6feed4fb12ac3afbc85cc2b7feac" translate="yes" xml:space="preserve">
          <source>NoSuchElementException if the array is empty and you try to access the init() item.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1dce13d9930a9ff0769308539b71da41576f9667" translate="yes" xml:space="preserve">
          <source>NoSuchElementException if the array is empty and you try to access the last() item.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7b446a41928e6f5cc8b582a09528e9cfe6849e5b" translate="yes" xml:space="preserve">
          <source>NoSuchElementException if the array is empty and you try to access the tail()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="71a17f90b97bbea6bec580efc88c9e1d6e25c2d5" translate="yes" xml:space="preserve">
          <source>NoSuchElementException if the array is empty.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="abfda205470156cb7646fc01046d46814766aebb" translate="yes" xml:space="preserve">
          <source>NoSuchElementException if the collection is empty.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ca9a11cd0371d28ac50d53486892e2dffae8184c" translate="yes" xml:space="preserve">
          <source>NoSuchElementException if the iterable is empty and you try to access init()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dcdf5a228316d2314017c90dd2e493063616e674" translate="yes" xml:space="preserve">
          <source>NoSuchElementException if the iterable is empty and you try to access the tail()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fe3b8551d8a41ea285bef0d79e99e48c6bbb055d" translate="yes" xml:space="preserve">
          <source>NoSuchElementException if the iterator is empty and you try to access init()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3dd23c8c7581b229fa765db41618a9db58b54d0e" translate="yes" xml:space="preserve">
          <source>NoSuchElementException if the list is empty</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="22989b1d820cac885b44e3873b4d74fc5c1871a0" translate="yes" xml:space="preserve">
          <source>NoSuchElementException if the list is empty and you try to access the first() item.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="09633f2445ea805912d16b9916a89cea5f5e3dcf" translate="yes" xml:space="preserve">
          <source>NoSuchElementException if the list is empty and you try to access the head() item.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="608725cfd3772a385147b540228918bf969daf4b" translate="yes" xml:space="preserve">
          <source>NoSuchElementException if the list is empty and you try to access the last() item.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dcb0c064700e992c6b380aa24198d096603dc959" translate="yes" xml:space="preserve">
          <source>NodeMetaDataHandler</source>
          <target state="translated">NodeMetaDataHandler</target>
        </trans-unit>
        <trans-unit id="4924db1c29b1a65e41518ba818314b000fa652df" translate="yes" xml:space="preserve">
          <source>NodePrinter</source>
          <target state="translated">NodePrinter</target>
        </trans-unit>
        <trans-unit id="af67cb12dbd65b3a4445d87a4f31dce90c7b4254" translate="yes" xml:space="preserve">
          <source>Non trivial continuation passing style examples do not work.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="271c48a0661cb97750c95f985a06c80357f565d1" translate="yes" xml:space="preserve">
          <source>Non-abstract non-static methods defined in the owner class or its superclasses take precedence over methods with identical signatures from a &lt;code&gt;@Delegate&lt;/code&gt; target</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dd27de8b52de80dc6bd489d8b9aefbc5514112db" translate="yes" xml:space="preserve">
          <source>Non-null iff this scope corresponds to a class; as opposed to a method, &quot;if&quot; statement, block statement, etc.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4151340442c5d2b53fe711611c912743ec3ab80d" translate="yes" xml:space="preserve">
          <source>Normal Groovy visibility rules for properties apply (i.e. no &lt;code&gt;public&lt;/code&gt;, &lt;code&gt;private&lt;/code&gt; or &lt;code&gt;package&lt;/code&gt; visibility can be specified) or you will receive a compile-time error message. The normal Groovy property getters and setters will also be created.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9e7117fdf584e613b08c81b9e9507957f4d6c4f0" translate="yes" xml:space="preserve">
          <source>Normally for mocks, &lt;code&gt;verify()&lt;/code&gt; is call automatically at the end of the &quot;use&quot; Closure, but with this style, no &quot;use&quot; Closure is present, so &lt;code&gt;verify()&lt;/code&gt; must be called manually.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fd37e1746db6802aa4afd07973c3fbe54baf6f7c" translate="yes" xml:space="preserve">
          <source>Normally not required since leaving off the annotation will achieve the same affect. However, it can be useful for selectively disabling this annotation in just a small part of an otherwise annotated class. As an example, it would make sense to set this to &lt;code&gt;false&lt;/code&gt; on a method which altered parameters in a class already marked as &lt;code&gt;@AutoFinal&lt;/code&gt;. All nodes in the class except that single method would be processed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="065f1fa9581ed0b6cc49b8b4b4b874525a7da02c" translate="yes" xml:space="preserve">
          <source>Normally set internally but allows you full customisation of the underlying processing engine.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d0b966ce32d2e3f4f04ec828841e3123955ecee2" translate="yes" xml:space="preserve">
          <source>Normally set internally but can be overridden if you want to customise how the usage message is displayed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6b822ff1dc2e96b660fce4822d1a24ec216974b2" translate="yes" xml:space="preserve">
          <source>Normally, the template source will be in a file but here is a simple example providing the XML template as a string:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bf404cdb9018c26fbe4c00effdaaf9fbe9e51c11" translate="yes" xml:space="preserve">
          <source>Not advisable, but if you need to adjust the token's text, this will do it.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ce4742bc4b1faf4c2fee251d0e0d2a278de7b82c" translate="yes" xml:space="preserve">
          <source>Not implemented.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b5942ff1c47bb9ebe7120d66c4d0b2b3f93f506e" translate="yes" xml:space="preserve">
          <source>Not normally accessed directly but full access to underlying options if needed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ab8faaeda1a47999a2f349f051bdfd22cf5af7a0" translate="yes" xml:space="preserve">
          <source>NotYetImplemented</source>
          <target state="translated">NotYetImplemented</target>
        </trans-unit>
        <trans-unit id="d2d56a56e525ef52d02fa08e1443bfee8a71903d" translate="yes" xml:space="preserve">
          <source>Note that &lt;a href=&quot;https://docs.oracle.com/javase/8/docs/api/java/util/GregorianCalendar.html&quot;&gt;GregorianCalendar&lt;/a&gt; has a &lt;a href=&quot;https://docs.oracle.com/javase/8/docs/api/java/util/GregorianCalendar.html#toZonedDateTime&quot;&gt;GregorianCalendar.toZonedDateTime&lt;/a&gt; method, which is commonly the specific type of Calendar in use.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c1c877eb77f5e15810118eed2c131d72f171c6cc" translate="yes" xml:space="preserve">
          <source>Note that Calendar equivalents of &lt;code&gt;date.getDateString()&lt;/code&gt; and variants do not exist because those methods are Locale-dependent. Although a Calendar may be assigned a &lt;a href=&quot;https://docs.oracle.com/javase/8/docs/api/java/util/Locale.html&quot;&gt;Locale&lt;/a&gt;, that information is lost and therefore cannot be used to control the default date/time formats provided by these methods. Instead, the system Locale would always be used. The alternative is to simply call &lt;a href=&quot;https://docs.oracle.com/javase/8/docs/api/java/text/DateFormat.html#getDateInstance(int,%20java.util.Locale)&quot;&gt;DateFormat.getDateInstance&lt;/a&gt; and pass the same Locale that was used for the Calendar.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e55a6a9a33bebe1229a9d53fca301194306ec3a4" translate="yes" xml:space="preserve">
          <source>Note that Groovy provides other built-in mechanisms for easy creation of objects, e.g. the named-args constructor:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="84e4e9f362f7a6bed804716add4f38a9ecc6bd9c" translate="yes" xml:space="preserve">
          <source>Note that a new DateFormat instance is created for every invocation of this method (for thread safety).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="95747cfe2491e31b294ddfef6c465bf15334f5f2" translate="yes" xml:space="preserve">
          <source>Note that a new SimpleDateFormat instance is created for every invocation of this method (for thread safety).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5209ed31ea10e5fb74faf0d9c2896467c16166d3" translate="yes" xml:space="preserve">
          <source>Note that backslashes (&lt;code&gt;\&lt;/code&gt;) and dollar signs (&lt;code&gt;$&lt;/code&gt;) in the replacement string may cause the results to be different than if it were being treated as a literal replacement string; see &lt;a href=&quot;https://docs.oracle.com/javase/8/docs/api/java/util/regex/Matcher.html#replaceAll&quot;&gt;Matcher.replaceAll&lt;/a&gt;. Use &lt;a href=&quot;https://docs.oracle.com/javase/8/docs/api/java/util/regex/Matcher.html#quoteReplacement&quot;&gt;Matcher.quoteReplacement&lt;/a&gt; to suppress the special meaning of these characters, if desired.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="56ad2a192521d4291b3abf9cc271fe21050d306e" translate="yes" xml:space="preserve">
          <source>Note that backslashes (&lt;code&gt;\&lt;/code&gt;) and dollar signs (&lt;code&gt;$&lt;/code&gt;) in the replacement string may cause the results to be different than if it were being treated as a literal replacement string; see &lt;a href=&quot;https://docs.oracle.com/javase/8/docs/api/java/util/regex/Matcher.html#replaceFirst&quot;&gt;Matcher.replaceFirst&lt;/a&gt;. Use &lt;a href=&quot;https://docs.oracle.com/javase/8/docs/api/java/util/regex/Matcher.html#quoteReplacement&quot;&gt;Matcher.quoteReplacement&lt;/a&gt; to suppress the special meaning of these characters, if desired.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f3a1d0f0078d5c0a7777815fafc30ea72f26297a" translate="yes" xml:space="preserve">
          <source>Note that different database and JDBC driver implementations may work differently with respect to this method. Specifically, one should expect that &lt;code&gt;ResultSet.TYPE_FORWARD_ONLY&lt;/code&gt; may be less efficient than a &quot;scrollable&quot; type.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="406a50bef8e8db24be9404fbf6d10d27b7e80ec0" translate="yes" xml:space="preserve">
          <source>Note that equals is generally handled by &lt;a href=&quot;../../org/codehaus/groovy/runtime/defaultgroovymethods#equals(List,%20List)&quot;&gt;DefaultGroovyMethods.equals&lt;/a&gt; instead of this method.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="712aa319afe4031d83e9a26df3a66b3df8456302" translate="yes" xml:space="preserve">
          <source>Note that if you create any domain classes which don't have exactly the same contract as &lt;code&gt;IntPair&lt;/code&gt; then you should provide an appropriate &lt;code&gt;equals&lt;/code&gt; and &lt;code&gt;canEqual&lt;/code&gt; method. The easiest way to achieve this would be to use the &lt;code&gt;@Canonical&lt;/code&gt; or &lt;code&gt;@EqualsAndHashCode&lt;/code&gt; annotations as shown below:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="54417ead216d96627705dd635ae1d968fadb62e9" translate="yes" xml:space="preserve">
          <source>Note that if you explicitly set &lt;code&gt;useCanEqual=false&lt;/code&gt; for child nodes in a class hierarchy but have it &lt;code&gt;true&lt;/code&gt; for parent nodes and you also have &lt;code&gt;callSuper=true&lt;/code&gt; in the child, then your generated equals methods will not strictly follow the equals contract.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f159227de30150a0b22bef1155bec1273c9b2229" translate="yes" xml:space="preserve">
          <source>Note that in some cases, a 'selector' expression may not resolve to a single node. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0a9aec166e932166b845583d4b0b6e7e69dd400b" translate="yes" xml:space="preserve">
          <source>Note that local variables are always looked up first, independently of the resolution strategy.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="78f72856475006dfe51dd96b8bb01440619e7640" translate="yes" xml:space="preserve">
          <source>Note that tab, newline and carriage return characters are escaped within attributes, i.e. will become &amp;amp;#09;, &amp;amp;#10; and &amp;amp;#13; respectively</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="111b077f0c30ab3cc4efa26efec21f4c5f81683e" translate="yes" xml:space="preserve">
          <source>Note that tab, newline and carriage return characters are escaped within attributes, i.e. will become , and respectively</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7db4d13791c2610f650229798a640aa53248b617" translate="yes" xml:space="preserve">
          <source>Note that the Missing*Exception classes were named for consistency and to avoid conflicts with JDK exceptions of the same name.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="682c36063e1c73ed70093808cbaab0082c9b6417" translate="yes" xml:space="preserve">
          <source>Note that the scripting.dev.java.net engine had this backwards.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="632c372a41c9d428be553dcf501c2db3307254b9" translate="yes" xml:space="preserve">
          <source>Note that the scripting.dev.java.net engine had this backwards. The engine version refers to this engine implementation. Whereas language version refers to the groovy implementation (which is obtained from the runtime).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e6aa51217996c1fc11e8f520abfd2cfd88729ee6" translate="yes" xml:space="preserve">
          <source>Note that the signature concept here is used only to describe the parameter types, not the result type, which is found in the generic type argument of the &lt;a href=&quot;../../lang/closure&quot;&gt;Closure&lt;/a&gt; class.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6e0dbdb8e800143f20000c2d32f6f03cd09387b8" translate="yes" xml:space="preserve">
          <source>Note that the underlying implementation is based on either invoking &lt;code&gt;ResultSet.absolute()&lt;/code&gt;, or if the ResultSet type is &lt;code&gt;ResultSet.TYPE_FORWARD_ONLY&lt;/code&gt;, the &lt;code&gt;ResultSet.next()&lt;/code&gt; method is invoked equivalently. The first row of a ResultSet is 1, so passing in an offset of 1 or less has no effect on the initial positioning within the result set.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="430721f2c7a3024b727920ba7d3c40df77c1a1e9" translate="yes" xml:space="preserve">
          <source>Note that this method differs from &lt;a href=&quot;https://docs.oracle.com/javase/8/docs/api/java/math/BigDecimal.html#round(java.math.MathContext)&quot;&gt;BigDecimal.round&lt;/a&gt; which specifies the digits to retain starting from the leftmost nonzero digit. This method operates on the fractional part of the number and the precision argument specifies the number of digits to the right of the decimal point to retain.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7aaca7c147c30140fa49a869a0daa9b4c9a2eb1c" translate="yes" xml:space="preserve">
          <source>Note that this method differs from &lt;a href=&quot;https://docs.oracle.com/javase/8/docs/api/java/math/BigDecimal.html#round(java.math.MathContext)&quot;&gt;BigDecimal.round&lt;/a&gt; which specifies the digits to retain starting from the leftmost nonzero digit. This methods rounds the integral part to the nearest whole number.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="336e3445890a0f79ed9ac3de91e619449c9cfbe5" translate="yes" xml:space="preserve">
          <source>Note that this method is identical in functionality to containsValue, (which is part of the Map interface in the collections framework).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7bd7a35c7c4da827fbd226f3aac57f056a5353e8" translate="yes" xml:space="preserve">
          <source>Note that this method will only return true for realised properties and does not take into account implementation of getProperty or propertyMissing</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1dfa700682b029c17bc1a57d47638edc7174e260" translate="yes" xml:space="preserve">
          <source>Note that this method's return value is based on realised methods and does not take into account objects or classes that implement invokeMethod or methodMissing</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ea1bda815ac552ae4ae751940abb208baebd9233" translate="yes" xml:space="preserve">
          <source>Note that this returns &lt;code&gt;true&lt;/code&gt; for the case where both the 'switch' and 'case' operand is &lt;code&gt;null&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c5396abc1e49b2eef8447a982c69da978d9c0462" translate="yes" xml:space="preserve">
          <source>Note that this returns true for the case where both the pattern and the 'switch' values are &lt;code&gt;null&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ee257a5f064f33a2974456ce7beeeecf7560693d" translate="yes" xml:space="preserve">
          <source>Note that toSpreadMap() is not normally used explicitly but under the covers by Groovy.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dada626f075cc029c7c6a4d85ab122b0f62e1fa8" translate="yes" xml:space="preserve">
          <source>Note that unlike String.replaceAll(String regex, String replacement), where the replacement string treats '$' and '\' specially (for group substitution), the result of the closure is converted to a string and that value is used literally for the replacement.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f076b437845d38cd0aa539bf94884dc774854d13" translate="yes" xml:space="preserve">
          <source>Note that using this method will not provide the parser with any URI for which to find DTDs etc</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="63f199750acfa8fc2cb0d4e7bf62d0037b00b8b1" translate="yes" xml:space="preserve">
          <source>Note that when used in the recommended fashion, the two implementations supported adhere to the equals contract. You can provide your own equivalence relationships if you need, e.g. for comparing instances of the &lt;code&gt;IntPair&lt;/code&gt; and &lt;code&gt;IntTriple&lt;/code&gt; classes discussed earlier, you could provide the following method in &lt;code&gt;IntPair&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="480b000ed527e1a461145bde4ab52c2943a22ff2" translate="yes" xml:space="preserve">
          <source>Note that when you're annotating scripts, the variable scoping semantics are unchanged. Therefore, you must be careful about the variable scope you're using. Make sure that variables you reference in the closure parameter are in scope during script execution. The following example will throw a MissingPropertyException because counter is not in scope for a class:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c0095fa17f18d3867a42a49e034d738e29fcb855" translate="yes" xml:space="preserve">
          <source>Note that while you can declare arguments for the script body's method, as the AST is currently implemented they are not accessible in the script body code.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="339e09613cdadd20ff91baee3063ca2c9550dd33" translate="yes" xml:space="preserve">
          <source>Note the use of some special notation. By adding 's' onto an option that may appear multiple times and has an argument or as in this case uses a valueSeparator to separate multiple argument values causes the list of associated argument values to be returned.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1d9efb2af353657a1bed2f423e6a071f67f01122" translate="yes" xml:space="preserve">
          <source>Note: JUnit 3 users should use the optional &lt;code&gt;exception&lt;/code&gt; attribute, e.g. &lt;code&gt;@NotYetImplemented(exception=junit.framework.AssertionFailedError)&lt;/code&gt; or the legacy &lt;code&gt;groovy.transform.NotYetImplemented&lt;/code&gt; annotation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e4fcef0a7b347019c9f9a406bef3fe55f8a75608" translate="yes" xml:space="preserve">
          <source>Note: This Iterator may not used with multiple threads.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="41c498457ed0bd304fbff2a3a428185dce268b75" translate="yes" xml:space="preserve">
          <source>Note: This class is a copy of &lt;a href=&quot;objectrange&quot;&gt;ObjectRange&lt;/a&gt; optimized for &lt;code&gt;int&lt;/code&gt;. If you make any changes to this class, you might consider making parallel changes to &lt;a href=&quot;objectrange&quot;&gt;ObjectRange&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="08723740544102461da9cbd41cf5daf05bb5b9e7" translate="yes" xml:space="preserve">
          <source>Note: This class is similar to &lt;a href=&quot;intrange&quot;&gt;IntRange&lt;/a&gt;. If you make any changes to this class, you might consider making parallel changes to &lt;a href=&quot;intrange&quot;&gt;IntRange&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e48d22a8f017af5485210f1c2ac9152b869fc5eb" translate="yes" xml:space="preserve">
          <source>Note: When using the list-style of result, the behavior is '&lt;code&gt;def (key, value) = listResultFromClosure&lt;/code&gt;'. While we strongly discourage using a list of size other than 2, Groovy's normal semantics apply in this case; throwing away elements after the second one and using null for the key or value for the case of a shortened list.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="46f49515284949d5d1f5146daf6a0f3c8f0ad0d1" translate="yes" xml:space="preserve">
          <source>Note: When using the list-style of result, the behavior is '&lt;code&gt;def (key, value) = listResultFromClosure&lt;/code&gt;'. While we strongly discourage using a list of size other than 2, Groovy's normal semantics apply in this case; throwing away elements after the second one and using null for the key or value for the case of a shortened list. If your Map doesn't support null keys or values, you might get a runtime error, e.g. NullPointerException or IllegalArgumentException.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ab79d3d7b450216518a7b260ebd450490ffa5749" translate="yes" xml:space="preserve">
          <source>Note: When using the list-style of result, the behavior is '&lt;code&gt;def (key, value) = listResultFromClosure&lt;/code&gt;'. While we strongly discourage using a list of size other than 2, Groovy's normal semantics apply in this case; throwing away elements after the second one and using null for the key or value for the case of a shortened list. If your collector Map doesn't support null keys or values, you might get a runtime error, e.g. NullPointerException or IllegalArgumentException.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2fef609b68bed25236fca7f022c4ff2960f9e594" translate="yes" xml:space="preserve">
          <source>Note: if the Iterable happens to not support duplicates, e.g. a Set, then the method will effectively return a Collection with a single copy of the Iterable's items.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="67d70f62edaae3c4846e151c04c5a779db14b5e5" translate="yes" xml:space="preserve">
          <source>Note: if the Temporal is a ChronoLocalDate but not a &lt;a href=&quot;https://docs.oracle.com/javase/8/docs/api/java/time/LocalDate.html&quot;&gt;LocalDate&lt;/a&gt;, a general &lt;a href=&quot;https://docs.oracle.com/javase/8/docs/api/java/time/chrono/ChronoPeriod.html&quot;&gt;ChronoPeriod&lt;/a&gt; will be returned as per the return type of the method &lt;a href=&quot;https://docs.oracle.com/javase/8/docs/api/java/time/chrono/ChronoLocalDate.html#until(ChronoLocalDate)&quot;&gt;ChronoLocalDate.until&lt;/a&gt; .</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="858f50163353e622a08eefde3894b1f4650dedce" translate="yes" xml:space="preserve">
          <source>Note: special treatment is given to Closure vararg-style capability. If you curry a vararg parameter, you don't consume the entire vararg array but instead the first parameter of the vararg array as the following example shows:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8173d91b10c9f82a4a2752a6d8c97118716ec63e" translate="yes" xml:space="preserve">
          <source>Note: the design of this class might seem a little strange at first. It contains a Boolean field, &lt;code&gt;inclusive&lt;/code&gt;, which can be &lt;code&gt;true&lt;/code&gt;, &lt;code&gt;false&lt;/code&gt; or &lt;code&gt;null&lt;/code&gt;. This design is for backwards compatibility reasons. Groovy uses this class under the covers to represent range indexing, e.g. &lt;code&gt;someList[x..y]&lt;/code&gt; and &lt;code&gt;someString[x..&amp;lt;y]&lt;/code&gt;. In early versions of Groovy the ranges in these expressions were represented under the covers by the &lt;code&gt;new IntRange(x, y)&lt;/code&gt; and &lt;code&gt;new IntRange(x, y-1)&lt;/code&gt;. This turns out to be a lossy abstraction when x and/or y are negative values. Now the latter case is represented by &lt;code&gt;new IntRange(false, x, y)&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9208a5659d21726251a0a31b0f3b78bdc434ab07" translate="yes" xml:space="preserve">
          <source>Note: the method to start the resolving is startResolving(ClassNode, SourceUnit).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3d59fa7363b99981f7a9ab3547237f89b4de816e" translate="yes" xml:space="preserve">
          <source>Note: this does not mean a file is recompiled. If a SourceUnit has already passed a phase it is skipped until a higher phase is reached.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a80461a43102ef24c4f6e099cb0b357df55b5528" translate="yes" xml:space="preserve">
          <source>Note: this only works for ClassNodes created using a predefined ClassNode</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9c3befe7e22c8667bc957541f49b0ee79970b588" translate="yes" xml:space="preserve">
          <source>Notes:</source>
          <target state="translated">Notes:</target>
        </trans-unit>
        <trans-unit id="7cc23b4f2f4dc9ed7f7f43d2dbfa27ddbc558e79" translate="yes" xml:space="preserve">
          <source>Notification to signal the shell to exit.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a8d1748571ba5b340e75bc08de985d4d62e8966e" translate="yes" xml:space="preserve">
          <source>NotificationListener</source>
          <target state="translated">NotificationListener</target>
        </trans-unit>
        <trans-unit id="3a199d4da38a73c28995044b6d1726c0739b97b4" translate="yes" xml:space="preserve">
          <source>Now try a query using &lt;code&gt;eachRow&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="66aa4fca858653b4954c33e689087ee4bf36ef69" translate="yes" xml:space="preserve">
          <source>Now try a query using &lt;code&gt;rows&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2ca79db92459486b9a99a74a8378725e22691923" translate="yes" xml:space="preserve">
          <source>Now you can invoke sql, e.g. to create a table:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="87887767c675461144d323c7d203b4a7fac5e563" translate="yes" xml:space="preserve">
          <source>Now, the hint instance can return the list of expected parameters. Here, it would have to say that the collect method accepts a closure for which the only argument is of the type of the first generic type of the first argument.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3671dde8e264cf9eb21ba84023484906d7dc9e82" translate="yes" xml:space="preserve">
          <source>NullPointerException if config is null</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dfb443c3c414d2950f53a7e480c6f1c9599901eb" translate="yes" xml:space="preserve">
          <source>NullPointerException if either of the given nodes are null</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="97aba1c891c0436278127991feeac464a8995b98" translate="yes" xml:space="preserve">
          <source>NullPointerException if the argument is null</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e0bddcf059ee68566a9464cc9ff7f8286f2f5649" translate="yes" xml:space="preserve">
          <source>NullPointerException if the given Map is &lt;code&gt;null&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3760a0490dfc0fbf7f17b103c0ef30b09e37b483" translate="yes" xml:space="preserve">
          <source>NullPointerException if the given pattern is null</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="68bfe781068a838fb49d435a26230d593d498484" translate="yes" xml:space="preserve">
          <source>NullPointerException if the given timezone is null</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8356ce31a6335710ae8657229714848ca53d079f" translate="yes" xml:space="preserve">
          <source>NullPointerException if the given type or closure is null</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="613c95347e027daa158b74a054138c52c948ccfe" translate="yes" xml:space="preserve">
          <source>NullPointerException if the key is &lt;code&gt;null&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="db9689ea59d54cae5e3e769bb4879ed3685bf5ee" translate="yes" xml:space="preserve">
          <source>NullPointerException if the key or value is &lt;code&gt;null&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d078d36d30143be0a330e88fe0df0f7d9b3ddffc" translate="yes" xml:space="preserve">
          <source>NullPointerException if the listener is null</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a2c8bd8a271461e2f521c0bb7d96f7e13f1249f6" translate="yes" xml:space="preserve">
          <source>NullPointerException if the specified key is null</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4b111a93ec75c0a9d42f83dbe3a5a1b210d354fb" translate="yes" xml:space="preserve">
          <source>NullPointerException if the specified key or mappingFunction is null</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="22c613de2b0a5b89000463041668c306984aa482" translate="yes" xml:space="preserve">
          <source>NullPointerException if the value is &lt;code&gt;null&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bb3cc7d636c33448a28026aab41f68b2db8cf893" translate="yes" xml:space="preserve">
          <source>NullPointerException if the weigher is null</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6b867458bc5eeccc604cf316d36cc1e8570ca838" translate="yes" xml:space="preserve">
          <source>Number of cached return values to protect from garbage collection.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7ec0d693a512a05654bdc8037cdc0e34a4e91475" translate="yes" xml:space="preserve">
          <source>NumberFormatException If the string contains an odd number of characters or if the characters are not valid hexadecimal values.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cd7f23f8fe45e2b183fc2c67f1368b29268ffc99" translate="yes" xml:space="preserve">
          <source>NumberFormatException if the number does not fit within the type requested by the type specifier suffix (invalid numbers don't make it here)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="86474fe07b7828da2f9968b1ac2740da406b4576" translate="yes" xml:space="preserve">
          <source>Numeric constant.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="29a1fb84d379568fab745670d13f2a6d5e823ec9" translate="yes" xml:space="preserve">
          <source>Numeric, string, regexp, boolean, or null constant.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b7e9cdaf467408af36a018870ed964877f659e9f" translate="yes" xml:space="preserve">
          <source>Object.class</source>
          <target state="translated">Object.class</target>
        </trans-unit>
        <trans-unit id="8e0d6c0331a4dfe74e0726b4443d58f271ced995" translate="yes" xml:space="preserve">
          <source>Object.equals</source>
          <target state="translated">Object.equals</target>
        </trans-unit>
        <trans-unit id="9e01aa50f6ee714d80ff8eaea8f65592950a73f2" translate="yes" xml:space="preserve">
          <source>Object.hashCode</source>
          <target state="translated">Object.hashCode</target>
        </trans-unit>
        <trans-unit id="1031f872c6dd130ce275100a1d1eb32d3dc5e7db" translate="yes" xml:space="preserve">
          <source>Object.toString</source>
          <target state="translated">Object.toString</target>
        </trans-unit>
        <trans-unit id="de442a3a6e865382ec49a5a83fa5412937421d8e" translate="yes" xml:space="preserve">
          <source>ObjectGraphBuilder.ChildPropertySetter</source>
          <target state="translated">ObjectGraphBuilder.ChildPropertySetter</target>
        </trans-unit>
        <trans-unit id="178171112349ad303ae481582a19ef47ddebb9c9" translate="yes" xml:space="preserve">
          <source>ObjectGraphBuilder.IdentifierResolver</source>
          <target state="translated">ObjectGraphBuilder.IdentifierResolver</target>
        </trans-unit>
        <trans-unit id="07619ac5d57054a9ed8d5cf372143cd75bf5dda1" translate="yes" xml:space="preserve">
          <source>ObjectGraphBuilder.RelationNameResolver</source>
          <target state="translated">ObjectGraphBuilder.RelationNameResolver</target>
        </trans-unit>
        <trans-unit id="bbdb29568a02e408064a5c0380d9c088f23be503" translate="yes" xml:space="preserve">
          <source>ObservableList.ElementAddedEvent - a new element is added to the list</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f7176a52bc0b765ace3b3918c573b93bd178295b" translate="yes" xml:space="preserve">
          <source>ObservableList.ElementClearedEvent - all elements have been removed from the list</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ac1458338a9f69472e805130a34dd60d487819b8" translate="yes" xml:space="preserve">
          <source>ObservableList.ElementRemovedEvent - an element is removed from the list</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="487e79e2b72f016badd5e5fd9d089efe0c557937" translate="yes" xml:space="preserve">
          <source>ObservableList.ElementUpdatedEvent - an element changes value (same as regular PropertyChangeEvent)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ecce4e66e875907519df2b4b0bda390968c7e972" translate="yes" xml:space="preserve">
          <source>ObservableList.MultiElementAddedEvent - triggered by calling list.addAll()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="33165687cd2147cb0a0b1d03b52191ba59dfc637" translate="yes" xml:space="preserve">
          <source>ObservableList.MultiElementRemovedEvent - triggered by calling list.removeAll()/list.retainAll()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="99d3885ad697f390212dde4724b9fb90c950c05b" translate="yes" xml:space="preserve">
          <source>ObservableMap.MultiPropertyEvent - triggered by calling map.putAll(), contains Added|Updated events</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b28ceba7ec3ca0b388cbb7a2bf92245dcadd4cdf" translate="yes" xml:space="preserve">
          <source>ObservableMap.PropertyAddedEvent - a new property is added to the map</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a5647067cd8e266958145152495039adfc8e2ebf" translate="yes" xml:space="preserve">
          <source>ObservableMap.PropertyClearedEvent - all properties have been removed from the map</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bf6c7d67f8528c57d078bafc33a98393b1490d06" translate="yes" xml:space="preserve">
          <source>ObservableMap.PropertyRemovedEvent - a property is removed from the map</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c2fe1b72d3ef43d4bc0f3049ca5508006f3a2533" translate="yes" xml:space="preserve">
          <source>ObservableMap.PropertyUpdatedEvent - a property changes value (same as regular PropertyChangeEvent)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0a195c52d1975d1a5d0c513a6af55ca1769abcac" translate="yes" xml:space="preserve">
          <source>ObservableSet.ElementAddedEvent - a new element is added to the set</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bd262e4d2599a0c7e46deedd30577fbf66dc72fa" translate="yes" xml:space="preserve">
          <source>ObservableSet.ElementClearedEvent - all elements have been removed from the list</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f9f9d791ae13ad49b848f4d09e73127ead19a595" translate="yes" xml:space="preserve">
          <source>ObservableSet.ElementRemovedEvent - an element is removed from the set</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="02027ee846c4946b834c4b47454ba42fa6a4c8c4" translate="yes" xml:space="preserve">
          <source>ObservableSet.ElementUpdatedEvent - an element changes value (same as regular PropertyChangeEvent)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0e2713f43f68a7db51001d978366bd27d154db74" translate="yes" xml:space="preserve">
          <source>ObservableSet.MultiElementAddedEvent - triggered by calling set.addAll()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="96f74ea260fdf915b415d584485b39b5b2a8d7ef" translate="yes" xml:space="preserve">
          <source>ObservableSet.MultiElementRemovedEvent - triggered by calling set.removeAll()/set.retainAll()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="45ecf84ce23f3509003741a3a7c6297f83806d34" translate="yes" xml:space="preserve">
          <source>Obtain a list of all meta properties available on this meta class</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="25cabda4d8c9f86dcb0bfddd11a6394e8d7489ce" translate="yes" xml:space="preserve">
          <source>Obtain a list of all the meta methods available on this meta class</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a3708803e560e34cf0ac6bd90f9e0302289b0279" translate="yes" xml:space="preserve">
          <source>Obtains JSON unescaped text for the given text</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="399226d7a1444873daf7b5306301b144ce6e1873" translate="yes" xml:space="preserve">
          <source>Obtains a MetaClass for an object either from the registry or in the case of a GroovyObject from the object itself.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a3adca2c74e6aa715fb255000cc009dfa3e7aab0" translate="yes" xml:space="preserve">
          <source>Obtains a Period consisting of the number of years and months between two &lt;a href=&quot;https://docs.oracle.com/javase/8/docs/api/java/time/YearMonth.html&quot;&gt;YearMonth&lt;/a&gt; instances.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="48865655777564db156eeca07322afce74e28751" translate="yes" xml:space="preserve">
          <source>Obtains a Period consisting of the number of years and months between two &lt;a href=&quot;https://docs.oracle.com/javase/8/docs/api/java/time/YearMonth.html&quot;&gt;YearMonth&lt;/a&gt; instances. The days of the Period will be zero. The result of this method can be a negative period if the end is before the start.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2f7795c8b3177a5fa55936ad7147b75a3648cd1b" translate="yes" xml:space="preserve">
          <source>Obtains a Period consisting of the number of years between two &lt;a href=&quot;https://docs.oracle.com/javase/8/docs/api/java/time/Year.html&quot;&gt;Year&lt;/a&gt; instances.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="db5108b1b69dc6e93ff50b3abe54976b319ea3bb" translate="yes" xml:space="preserve">
          <source>Obtains a Period consisting of the number of years between two &lt;a href=&quot;https://docs.oracle.com/javase/8/docs/api/java/time/Year.html&quot;&gt;Year&lt;/a&gt; instances. The months and days of the Period will be zero. The result of this method can be a negative period if the end is before the start.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1f30f2afb507073d7c06a3c126b86f0f5bc39601" translate="yes" xml:space="preserve">
          <source>Obtains a reference to the original AST for the MetaClass if it is available at runtime</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f3bca1ca1de119830f00d0b0089a1fc6967de445" translate="yes" xml:space="preserve">
          <source>Obtains a snippet of the source code within the bounds specified.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b2fa3c36811fe4f3d2b26ac2ca6bca6b17562fde" translate="yes" xml:space="preserve">
          <source>Obtains the current writer</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c8ec64176759e4ed41141490796b1619a570c5bd" translate="yes" xml:space="preserve">
          <source>Obviously, only do this if you understand the consequences.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6f26d1a2444f91f468be9fde5354d50508f9fa09" translate="yes" xml:space="preserve">
          <source>Oct 24, 2005</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f83a6d3aca3bcaad7432e46742ccc6c40b30ced0" translate="yes" xml:space="preserve">
          <source>Of these arguments, the &lt;b&gt;srcdir&lt;/b&gt; and &lt;b&gt;destdir&lt;/b&gt; are required.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="73cc9f187c982aeffdb5fe838d97ecf83f70c25b" translate="yes" xml:space="preserve">
          <source>Of these, '&lt;code&gt;url&lt;/code&gt;' is required. Others may be needed depending on your database.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="86376b3f874ee3685e1c649c3857e8b25c4d0dbf" translate="yes" xml:space="preserve">
          <source>Offering all DefaultGroovyMethods on any object is too verbose, hiding all removes user-friendliness.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="91748cfab45a6d1c3d79003c45bfa300228fe9e2" translate="yes" xml:space="preserve">
          <source>Offering all DefaultGroovyMethods on any object is too verbose, hiding all removes user-friendliness. So here util methods will be added to candidates if the instance is of a suitable type. This does not need to be strictly complete, only the most useful functions may appear.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="40c9584f2d750cd973a23d51aadedc1a7c67d8fb" translate="yes" xml:space="preserve">
          <source>OffsetDateTime.parse</source>
          <target state="translated">OffsetDateTime.parse</target>
        </trans-unit>
        <trans-unit id="6bab43a258a46b7bd19525ca3edc9e7ec6de2714" translate="yes" xml:space="preserve">
          <source>OffsetTime.parse</source>
          <target state="translated">OffsetTime.parse</target>
        </trans-unit>
        <trans-unit id="2b67ca3727a03106e1615f6e8d457d551ed0571e" translate="yes" xml:space="preserve">
          <source>Old factory method static SwingBuilder.build(Closure).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="44713b9de52150b214241a3d6aa61d788bd599b7" translate="yes" xml:space="preserve">
          <source>Once created, the stored procedure can be called like this:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a7f23f5e71abf9e576d8379dc05c38418257f579" translate="yes" xml:space="preserve">
          <source>Only called if it isLeaf is false and isHandlesNodeChildren is true</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a565395824eddf6b0201d7d3e08f180fa48bc01d" translate="yes" xml:space="preserve">
          <source>Only direct recursion (calling the exact same method again) is supported.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="af8b64a1f1c7828dbf852de86592ae8756673103" translate="yes" xml:space="preserve">
          <source>Only non-void methods are currently being handled. Void methods will fail compilation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d79e0b0887e797cf5014f1c4b59ee6f2a47827c5" translate="yes" xml:space="preserve">
          <source>Only used for synthetic return statements emitted by the compiler.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f522524d4b340e39175d3340bd303cde20306fe5" translate="yes" xml:space="preserve">
          <source>Only used for synthetic return statements emitted by the compiler. For comparisons use isReturningNullOrVoid() instead.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9421f435c64d056f92c4df6e1011b9c53337c7af" translate="yes" xml:space="preserve">
          <source>Opening of files and such</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c670dd1060a99d9b135d8662256741d975bc740d" translate="yes" xml:space="preserve">
          <source>Opens an &lt;a href=&quot;https://docs.oracle.com/javase/8/docs/api/java/io/InputStream.html&quot;&gt;InputStream&lt;/a&gt; reading from the given URL without caching the stream.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6e7d3a25d53d9eef3a7707212988c3fd3462eb7e" translate="yes" xml:space="preserve">
          <source>Opens an &lt;a href=&quot;https://docs.oracle.com/javase/8/docs/api/java/io/InputStream.html&quot;&gt;InputStream&lt;/a&gt; reading from the given URL without caching the stream. This prevents file descriptor leaks when reading from file system URLs.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="85fb53e5ecb2f6f59736456857cd151936d18e59" translate="yes" xml:space="preserve">
          <source>Optimization Option for enabling &lt;code&gt;invokedynamic&lt;/code&gt; compilation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3c22e7db22c5d63dff286df92453c23782d6d3a4" translate="yes" xml:space="preserve">
          <source>Optimization Option for enabling attaching &lt;a href=&quot;../../../../groovy/lang/groovydoc&quot;&gt;Groovydoc&lt;/a&gt; annotation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8bf03c1a2afa95f199764f7ac7eb1be82f2ecc38" translate="yes" xml:space="preserve">
          <source>Optimization Option for enabling attaching groovydoc as AST node metadata.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1d16b40393902d1952222c709ace0fbdf5de4516" translate="yes" xml:space="preserve">
          <source>Optimization Option for enabling parallel parsing.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="87e0eb8884975ff048a69188fa33b58332d82525" translate="yes" xml:space="preserve">
          <source>Optimized Constructor avoiding initial computation of comparison.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="298fe6066460f82ee7ac48a51d1bc4e264d3ebdd" translate="yes" xml:space="preserve">
          <source>Option parameters are converted to this type. The underlying library has built-in converters for &lt;a href=&quot;http://picocli.info/#_built_in_types&quot;&gt;many types&lt;/a&gt;. A custom converter can be specified with the &lt;code&gt;convert&lt;/code&gt; property.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="35dfeb89683405beb4ab84d3bd1c4f5c265f2970" translate="yes" xml:space="preserve">
          <source>Optional Element Summary</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="31afa3cb358b8b0ca09e46af39646b8391544b7d" translate="yes" xml:space="preserve">
          <source>Optional additional message for usage; displayed after the options are displayed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aee56ed157edfe995bc6dc464930235e7e747c4c" translate="yes" xml:space="preserve">
          <source>Optional additional message for usage; displayed after the options.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d9d14ed5a9ef165cb262ff10ce2fba9b19db50ca" translate="yes" xml:space="preserve">
          <source>Optional additional message for usage; displayed after the usage summary but before the options are displayed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bc155edbfd5fd198840a5830ce7f3b3a9fbfadd2" translate="yes" xml:space="preserve">
          <source>Options#build()#build()</source>
          <target state="translated">Options#build()#build()</target>
        </trans-unit>
        <trans-unit id="186af792ce69214266130e0ee1e89d43bdd9e543" translate="yes" xml:space="preserve">
          <source>Or a row update:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="77d7d0a99dd271a0254bec2d7cb10de4bb18e54a" translate="yes" xml:space="preserve">
          <source>Or alternatively with a method call taking named arguments:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d68158a44e32e505ff9b88e27288bbd2d2a4dee5" translate="yes" xml:space="preserve">
          <source>Or an external library such as Jettison can be used as follows:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ad0b29808785e9296312f77a07691b06292c430e" translate="yes" xml:space="preserve">
          <source>Or if you change the first annotation to:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b8b922ea3fd5d784a13222126926ff0742ee3f73" translate="yes" xml:space="preserve">
          <source>Or insert a row using GString syntax:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8cbb148ee9ca71d8de2da54ee3d835e55a6245bd" translate="yes" xml:space="preserve">
          <source>Or insert a row using JDBC PreparedStatement inspired syntax:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4f2ba64086ce0b24426ebb25be04d3b530a61aa6" translate="yes" xml:space="preserve">
          <source>Or using the compact Gradle-inspired syntax:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="01ac39d3f2591021074fcb040a0654c92b767faf" translate="yes" xml:space="preserve">
          <source>Or, &quot;mixing in&quot; your methods at runtime:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="79132bff3ea425ae3de0b2ad5fefbdfee4855411" translate="yes" xml:space="preserve">
          <source>Original pattern throws the StackOverflowError for long strings with backslashes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f3f7d469568f7a40f00368bfdd43de41557927a5" translate="yes" xml:space="preserve">
          <source>Original pattern throws the StackOverflowError for long strings with backslashes. So it is replaced by a 2-step approach inspired from json2.js sources: https://github.com/douglascrockford/JSON-js/blob/master/json2.js#L462 See JsonTokenTypeTest#testMatchingLongStringWithBackslashes() for details.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="386e35d526d5747478d71a00af3fbee351881e40" translate="yes" xml:space="preserve">
          <source>Originally was grails.utils.GrailsUtils, removed some grails specific stuff. Utility methods removing internal lines from stack traces</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c83c1cc12cf66f1b8f650ebd81b730010f059803" translate="yes" xml:space="preserve">
          <source>Otherwise these lines produce a groovy.lang.MissingPropertyException or groovy.lang.MissingMethodException respectively as those two methods are &lt;code&gt;@Deprecated&lt;/code&gt; in &lt;code&gt;Date&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="19f9aaf226262bb7599cae3841deebb8a07f78b8" translate="yes" xml:space="preserve">
          <source>Otherwise, append 's'. For example, monkey to monkeys; employee to employees.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2b27dbe5012c20cd23e86fb2e9e9664dad505d47" translate="yes" xml:space="preserve">
          <source>OutParameter</source>
          <target state="translated">OutParameter</target>
        </trans-unit>
        <trans-unit id="f717225bd0c0ac84f15756f518fdde347cb91638" translate="yes" xml:space="preserve">
          <source>Output of class to disk</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c15cd900acccacaaafcc24779384c619bbe74b41" translate="yes" xml:space="preserve">
          <source>OutputStreamWriter.getEncoding</source>
          <target state="translated">OutputStreamWriter.getEncoding</target>
        </trans-unit>
        <trans-unit id="cd1293f38f34cefadd86645cb8c8fa4c40f5d423" translate="yes" xml:space="preserve">
          <source>OutputTool</source>
          <target state="translated">OutputTool</target>
        </trans-unit>
        <trans-unit id="5ae2186a789ce9a060c48066ddf6d9f55f821446" translate="yes" xml:space="preserve">
          <source>Overload the getName() method to make the test cases look more like AgileDox (thanks to Joe Walnes for this tip!)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5b408c54529bdfbb2a90eb43e6b6c970e6958e08" translate="yes" xml:space="preserve">
          <source>Overloaded to implement duck typing for Strings so that any method that can't be evaluated on this object will be forwarded to the toString() object instead.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2ec27edb34a1d17c9cd4e9d3089b057199811177" translate="yes" xml:space="preserve">
          <source>Overloaded to make variables appear as bean properties or via the subscript operator</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fb8cd81fc9cf8446582ff97652fe26cbb8178af0" translate="yes" xml:space="preserve">
          <source>Overloads the &lt;code&gt;++&lt;/code&gt; operator for enums.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bae96eee47b1c769856de590126489f58c31d046" translate="yes" xml:space="preserve">
          <source>Overloads the &lt;code&gt;++&lt;/code&gt; operator for enums. It will invoke Groovy's default next behaviour for enums that do not have their own next method.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ca5d00ccf554645686cd7187710cc0ea5e23ae5f" translate="yes" xml:space="preserve">
          <source>Overloads the &lt;code&gt;++&lt;/code&gt; operator for the class CharSequence.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="67f2017f30bee77f5dac18d5ab2381dfd718f744" translate="yes" xml:space="preserve">
          <source>Overloads the &lt;code&gt;++&lt;/code&gt; operator for the class CharSequence. It increments the last character in the given CharSequence. If the last character in the CharSequence is Character.MAX_VALUE a Character.MIN_VALUE will be appended. The empty CharSequence is incremented to a string consisting of the character Character.MIN_VALUE.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="69d27f9822bbc14a63dd0217c9431eb31e4aafd2" translate="yes" xml:space="preserve">
          <source>Overloads the &lt;code&gt;--&lt;/code&gt; operator for enums.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a07d57a8fd7ae75f99d341c2107882f2b7639266" translate="yes" xml:space="preserve">
          <source>Overloads the &lt;code&gt;--&lt;/code&gt; operator for enums. It will invoke Groovy's default previous behaviour for enums that do not have their own previous method.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ce1b697248097294aac66fa34a663c49ed075617" translate="yes" xml:space="preserve">
          <source>Overloads the &lt;code&gt;--&lt;/code&gt; operator for the class CharSequence.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="39938fcc927dfbd1c97c2c5ce1dbb310c6f4b12e" translate="yes" xml:space="preserve">
          <source>Overloads the &lt;code&gt;--&lt;/code&gt; operator for the class CharSequence. It decrements the last character in the given CharSequence. If the last character in the CharSequence is Character.MIN_VALUE it will be deleted. The empty CharSequence can't be decremented.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6e5c810fb1066866f5e37bd1352d1280efc5e799" translate="yes" xml:space="preserve">
          <source>Overloads the left shift operator (&amp;lt;&amp;lt;) to provide an append mechanism to pipe data to a Process.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="394c3e1fae26b0a183793e176805c93556ad61f0" translate="yes" xml:space="preserve">
          <source>Overloads the left shift operator to provide an append mechanism to add bytes to the output stream of a socket</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c76d9e72acc7c2f56c92c1f0a7d02f49f71a09b4" translate="yes" xml:space="preserve">
          <source>Overloads the left shift operator to provide an append mechanism to add things to the output stream of a socket</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="34fb14a5800284a41d9ca040f5e76dd57930cba5" translate="yes" xml:space="preserve">
          <source>Overloads the left shift operator to provide an append mechanism to pipe into a Process</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0412d3df8c4acb40fbc4e91d1113cc48f34b7676" translate="yes" xml:space="preserve">
          <source>Overloads the left shift operator to provide an easy way to add buttons to a ButtonGroup.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="66330bf90638e67c94b6bba92190942cc0348455" translate="yes" xml:space="preserve">
          <source>Overloads the left shift operator to provide an easy way to add columns to a TableColumnModel.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="260b82f024d317e020800f37cb101800136879ea" translate="yes" xml:space="preserve">
          <source>Overloads the left shift operator to provide an easy way to add components to a Container.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="de9e4245c1707ffdb2c460ac0266c81d42584cf6" translate="yes" xml:space="preserve">
          <source>Overloads the left shift operator to provide an easy way to add components to a menu.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6b4a54155a8cd129daf4cd329a480d8d2d2b58e9" translate="yes" xml:space="preserve">
          <source>Overloads the left shift operator to provide an easy way to add components to a popupMenu.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="605b14e78f9a31c7d60cdd01f3755bf07b3c9dcc" translate="yes" xml:space="preserve">
          <source>Overloads the left shift operator to provide an easy way to add components to a toolBar.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6c2683c98a01abc3c49150d19edbe8f78612d3dc" translate="yes" xml:space="preserve">
          <source>Overloads the left shift operator to provide an easy way to add elements to a DefaultListModel.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="423cae90c7359a32feea24c68fe6bb47e08c5bd3" translate="yes" xml:space="preserve">
          <source>Overloads the left shift operator to provide an easy way to add items to a JComboBox.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1d48a59c5cfbc3e201b2c4944215e847ac67ee11" translate="yes" xml:space="preserve">
          <source>Overloads the left shift operator to provide an easy way to add items to a MutableComboBoxModel.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="60828de5682d3f49d990683106f8f07890b5e9ea" translate="yes" xml:space="preserve">
          <source>Overloads the left shift operator to provide an easy way to add menus to a menuBar.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2c487dd0f68ad85a1baba3fd81243854fc02544a" translate="yes" xml:space="preserve">
          <source>Overloads the left shift operator to provide an easy way to add nodes to a DefaultMutableTreeNode.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="01f78f3bb0422b77e00bc911c2322ef98ec2d928" translate="yes" xml:space="preserve">
          <source>Overloads the left shift operator to provide an easy way to add nodes to a MutableTreeNode.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="46b31e69f0f97b960bb5ad1e22903e0fde28131c" translate="yes" xml:space="preserve">
          <source>Overloads the left shift operator to provide an easy way to add paths to a treePath.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="120ece4e7c9bdf018afab7adffb7ac2610720c61" translate="yes" xml:space="preserve">
          <source>Overloads the left shift operator to provide an easy way to add rows to a DefaultTableModel.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="29ece6a9a7a6feab6dcbbcac09385c4409639913" translate="yes" xml:space="preserve">
          <source>Overloads the left shift operator to provide an easy way to append Map.Entry values to a Map.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="00fed361c0ee4ea4b1b64a8e542d817a9f4dff23" translate="yes" xml:space="preserve">
          <source>Overloads the left shift operator to provide an easy way to append multiple objects as string representations to a CharSequence.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="63cb5a4cc76f03e34d7164fd915f678cf3cf5c6d" translate="yes" xml:space="preserve">
          <source>Overloads the left shift operator to provide an easy way to append multiple objects as string representations to a StringBuffer.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="07226a116af0bd7b334e4d713987ea2b822d5c8d" translate="yes" xml:space="preserve">
          <source>Overloads the left shift operator to provide an easy way to append multiple objects as string representations to a StringBuilder.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cbc8372d3603856a9fc39ebabac5ad29bfe5d91f" translate="yes" xml:space="preserve">
          <source>Overloads the left shift operator to provide an easy way to append objects to a BlockingQueue.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="704d5af4660c17512c2d5768d4e673cfdac2aded" translate="yes" xml:space="preserve">
          <source>Overloads the left shift operator to provide an easy way to append objects to a BlockingQueue. In case of bounded queue the method will block till space in the queue become available</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="970d33199c36162b52b2da0f68c06b888514b98a" translate="yes" xml:space="preserve">
          <source>Overloads the left shift operator to provide an easy way to append objects to a Collection.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bd6688621f066a1c5254d53944f2e8a5cce837f9" translate="yes" xml:space="preserve">
          <source>Overloads the left shift operator to provide an easy way to append objects to a List.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="188795a243a1d4a677fd87def49f551dfa1f9b4e" translate="yes" xml:space="preserve">
          <source>Overloads the left shift operator to provide an easy way to append objects to a Set.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="438d0d3662c6c4d745a9343e3d5791b8351ebdc4" translate="yes" xml:space="preserve">
          <source>Overloads the left shift operator to provide an easy way to append objects to a SortedSet.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7ca2a0a83b80d83cafc6ad06893b8e6fd90e226e" translate="yes" xml:space="preserve">
          <source>Overloads the left shift operator to provide an easy way to lazily append Objects to this GPathResult.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="251167e3cfc3c89f80f268d4d0842641bfea6b5a" translate="yes" xml:space="preserve">
          <source>Overloads the left shift operator to provide an easy way to put one maps entries into another map.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="672233d061a3322765e47a376a7af5efcfad1b9f" translate="yes" xml:space="preserve">
          <source>Overloads the left shift operator to provide an easy way to put one maps entries into another map. This allows the compact syntax &lt;code&gt;map1 &amp;lt;&amp;lt; map2&lt;/code&gt;; otherwise it's just a synonym for &lt;code&gt;putAll&lt;/code&gt; though it returns the original map rather than being a &lt;code&gt;void&lt;/code&gt; method. Example usage:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="03b4e295139fb55c917be91ddf8b70f8ee1db1d9" translate="yes" xml:space="preserve">
          <source>Overloads the left shift operator to provide syntactic sugar for appending to a StringBuilder.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9d8a4c8d1ddbfba5fd47bcfd70b8b610ad3819b9" translate="yes" xml:space="preserve">
          <source>Overloads the leftShift operator for Appendable to allow an object to be appended using Groovy's default representation for the object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d4924e72516bb21d0bde4acd5a64637525ac4b1f" translate="yes" xml:space="preserve">
          <source>Overloads the leftShift operator for Writer to allow an object to be written using Groovy's default representation for the object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="43f3b23d9762d60bb21800ba11ea70c5dfde6489" translate="yes" xml:space="preserve">
          <source>Overloads the leftShift operator to add objects to an ObjectOutputStream.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="73cec39c3790847f77c7742a07deab84df70d434" translate="yes" xml:space="preserve">
          <source>Overloads the leftShift operator to provide an append mechanism to add bytes to a stream.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a9e8a07dbe788ad051db9b55d27b743afc4ef820" translate="yes" xml:space="preserve">
          <source>Override this method to set your variables to the Groovy binding.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9e01363b82a4811c0d13f1099ea018b026846bf5" translate="yes" xml:space="preserve">
          <source>Override to provide custom completion semantics for the command.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8bda3856fc41d46281a63287639a11c19711b7d4" translate="yes" xml:space="preserve">
          <source>Overrides default implementation just in case a static invoke method has been set on ExpandoMetaClass</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5d1fa68f167104119194555a2c324214fe0a5421" translate="yes" xml:space="preserve">
          <source>Overrides default implementation just in case getProperty method has been overridden by ExpandoMetaClass</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d540169a23ef05633b3b1ad3aea070986837d4c6" translate="yes" xml:space="preserve">
          <source>Overrides default implementation just in case invokeMethod has been overridden by ExpandoMetaClass</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ff2d11865de135c27219dd0653d66cf40054ff64" translate="yes" xml:space="preserve">
          <source>Overrides the behavior of parent getMethods() method to make MetaClass aware of added Expando methods</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cef8643c151707e1b7be65a9c1b13868748ff13e" translate="yes" xml:space="preserve">
          <source>Overrides the default getProperty implementation to create nested ConfigObject instances on demand for non-existent keys</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1b5fa76c55d167ea0115c3a14b4f716c74c1ce48" translate="yes" xml:space="preserve">
          <source>Overrides the generic init method to set some debug flags.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="66a9365bfaf61b72078b21e5a86a027f5f98b01e" translate="yes" xml:space="preserve">
          <source>Overrides the or operator to allow one Process to asynchronously pipe data to another Process.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="31a3f8afd33b0701bb93c2ef47d5217ddc6a6ee6" translate="yes" xml:space="preserve">
          <source>Overwrites subscript operator handling by redirecting to &lt;a href=&quot;#get(int)&quot;&gt;get(int)&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e5503474b2e22cb976ff568c1b8c7003f6417a7c" translate="yes" xml:space="preserve">
          <source>POGO call site meta class - cached method - cached</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b3433aeb4a49cb409a4d8c3de5a2d6499c0b9ef6" translate="yes" xml:space="preserve">
          <source>POJO call site meta class - cached method - cached</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b38d45ebea0be29b3de6604dce93e4a6c0b35406" translate="yes" xml:space="preserve">
          <source>POJO call site meta class - cached method - not cached</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7431e3df243c5be33cffa0b28ca2a76b93f0538c" translate="yes" xml:space="preserve">
          <source>Package</source>
          <target state="translated">Package</target>
        </trans-unit>
        <trans-unit id="0a999012ffb87b3edac99adbdfc498b12831a1e2" translate="yes" xml:space="preserve">
          <source>Packages</source>
          <target state="translated">Packages</target>
        </trans-unit>
        <trans-unit id="1e5a9cd2aef15716e37dff5e6fff83df9042ec8d" translate="yes" xml:space="preserve">
          <source>Pad a CharSequence to a minimum length specified by &lt;code&gt;numberOfChars&lt;/code&gt;, appending the supplied padding CharSequence around the original as many times as needed keeping it centered.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e4e8a24dc3a685b16175418f4aee21b52bd2d740" translate="yes" xml:space="preserve">
          <source>Pad a CharSequence to a minimum length specified by &lt;code&gt;numberOfChars&lt;/code&gt;, appending the supplied padding CharSequence around the original as many times as needed keeping it centered. If the String is already the same size or bigger than the target &lt;code&gt;numberOfChars&lt;/code&gt;, then the original String is returned. An example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="174be2d58cd78ba6af489301bef5ce85840e17f0" translate="yes" xml:space="preserve">
          <source>Pads a CharSequence to a minimum length specified by &lt;code&gt;numberOfChars&lt;/code&gt; by adding the space character around it as many times as needed so that it remains centered.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f7f1510ab088f0f19feb6d1e6d5c31ed590e6773" translate="yes" xml:space="preserve">
          <source>Pads a CharSequence to a minimum length specified by &lt;code&gt;numberOfChars&lt;/code&gt; by adding the space character to the left as many times as needed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="72150772e88f184017d17b6360920b408bead7f4" translate="yes" xml:space="preserve">
          <source>Pads a CharSequence to a minimum length specified by &lt;code&gt;numberOfChars&lt;/code&gt; by adding the space character to the left as many times as needed. If the String is already the same size or bigger than the target &lt;code&gt;numberOfChars&lt;/code&gt;, then the original String is returned. An example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d020e661f60308a75f4dbb3bcbdd2a5a0aefd113" translate="yes" xml:space="preserve">
          <source>Pads a CharSequence to a minimum length specified by &lt;code&gt;numberOfChars&lt;/code&gt; by adding the space character to the right as many times as needed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f6f61eb707de350936235e6e64824d24babaaaf4" translate="yes" xml:space="preserve">
          <source>Pads a CharSequence to a minimum length specified by &lt;code&gt;numberOfChars&lt;/code&gt; by adding the space character to the right as many times as needed. If the CharSequence is already the same size or bigger than the target &lt;code&gt;numberOfChars&lt;/code&gt;, then the toString() of the original CharSequence is returned. An example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f406427f6a87b78a9c8894474289d5d160208710" translate="yes" xml:space="preserve">
          <source>Pads a CharSequence to a minimum length specified by &lt;code&gt;numberOfChars&lt;/code&gt;, adding the supplied padding CharSequence as many times as needed to the left.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c58cb50d9cc49aa777c1073dea3a922027a7f852" translate="yes" xml:space="preserve">
          <source>Pads a CharSequence to a minimum length specified by &lt;code&gt;numberOfChars&lt;/code&gt;, adding the supplied padding CharSequence as many times as needed to the left. If the CharSequence is already the same size or bigger than the target &lt;code&gt;numberOfChars&lt;/code&gt;, then the toString() of the original CharSequence is returned. An example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ac8f7cfdb298e9c84ab4c702654610d5d27e5a13" translate="yes" xml:space="preserve">
          <source>Pads a CharSequence to a minimum length specified by &lt;code&gt;numberOfChars&lt;/code&gt;, adding the supplied padding CharSequence as many times as needed to the right.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="65353c1b73c467fd103811c52b4ee62afac0e3ba" translate="yes" xml:space="preserve">
          <source>Pads a CharSequence to a minimum length specified by &lt;code&gt;numberOfChars&lt;/code&gt;, adding the supplied padding CharSequence as many times as needed to the right. If the CharSequence is already the same size or bigger than the target &lt;code&gt;numberOfChars&lt;/code&gt;, then the toString() of the original CharSequence is returned. An example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="032ef1061cb806752eec3b41dde1fb6e9ca1bb77" translate="yes" xml:space="preserve">
          <source>Parameter annotation aimed at helping IDEs or the static type checker to infer the parameter types of a closure. Without this annotation, a method signature may look like this:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a3a1a4f44f680eb8d4852cd1c4f96b1ddc484c6d" translate="yes" xml:space="preserve">
          <source>Parameter annotation used to specify the delegate for a &lt;code&gt;@DelegatesTo&lt;/code&gt; annotated parameter of the same method.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9a52395150f73178666ec5588a1a8f6d66acb033" translate="yes" xml:space="preserve">
          <source>Parameterized constructor.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8215d8687e387140617129d416d786066c150144" translate="yes" xml:space="preserve">
          <source>Parse XML into a document tree that may be traversed similar to XPath expressions. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="73094bc5e2bc70b39303a21f0cddf80896f5ad8c" translate="yes" xml:space="preserve">
          <source>Parse a JSON data structure from content at a given URL.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="db1dbc896cfa9f85e8c9f5172420acfd281648fb" translate="yes" xml:space="preserve">
          <source>Parse a JSON data structure from content at a given URL. Convenience variant when using Groovy named parameters for the connection params.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="10c9cf55420dcd3d27a0635efe9d26ee4f17a38d" translate="yes" xml:space="preserve">
          <source>Parse a JSON data structure from content from a byte array.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c631da96ad442ad07f317cc62f3e46b5bd73329a" translate="yes" xml:space="preserve">
          <source>Parse a JSON data structure from content from a char array.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="084f5fa557c7df995aa05557b0c2caa651017e59" translate="yes" xml:space="preserve">
          <source>Parse a JSON data structure from content from a reader</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5547ba7d2241bfbd0f7c522f2243ac1f0f5eb513" translate="yes" xml:space="preserve">
          <source>Parse a JSON data structure from content from an inputStream</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="422bdf15e4d080581cb67ada33a565d4271e87ad" translate="yes" xml:space="preserve">
          <source>Parse a JSON data structure from content within a given File.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a3cb514363079acd878706c3f39de32f4aad825d" translate="yes" xml:space="preserve">
          <source>Parse a JSON data structure from content within a given Path.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ec52921a177d37440245b4034f716ff764854801" translate="yes" xml:space="preserve">
          <source>Parse a String into a Date instance using the given pattern and TimeZone.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8e306cbb10cea6ba5fbed8cfc9b7a6a8dc14ad4b" translate="yes" xml:space="preserve">
          <source>Parse a String into a Date instance using the given pattern and TimeZone. This convenience method acts as a wrapper for &lt;a href=&quot;https://docs.oracle.com/javase/8/docs/api/java/text/SimpleDateFormat.html&quot;&gt;SimpleDateFormat&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b1d8c88f60dc79c964b8fec7c7285526a5f719ef" translate="yes" xml:space="preserve">
          <source>Parse a String into a Date instance using the given pattern.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bef93906aca5f79b0cf5c6a7631230e3f742395a" translate="yes" xml:space="preserve">
          <source>Parse a String into a Date instance using the given pattern. This convenience method acts as a wrapper for &lt;a href=&quot;https://docs.oracle.com/javase/8/docs/api/java/text/SimpleDateFormat.html&quot;&gt;SimpleDateFormat&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5f608af4d1e23804750478d79acd4835b4a8b179" translate="yes" xml:space="preserve">
          <source>Parse a String matching the pattern EEE MMM dd HH:mm:ss zzz yyyy containing US-locale-constants only (e.g.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="35dc1a7711aa1d43ef3445f61c11974e427df452" translate="yes" xml:space="preserve">
          <source>Parse a String matching the pattern EEE MMM dd HH:mm:ss zzz yyyy containing US-locale-constants only (e.g. Sat for Saturdays). Such a string is generated by the toString method of &lt;a href=&quot;https://docs.oracle.com/javase/8/docs/api/java/util/Date.html&quot;&gt;Date&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2bbacba4ab879c1771dfcd40d4b995177e83d2d6" translate="yes" xml:space="preserve">
          <source>Parse a text representation of a JSON data structure</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4d6b33410fa6915ba14fdeb37a6e6df0d8cde450" translate="yes" xml:space="preserve">
          <source>Parse text into a &lt;a href=&quot;https://docs.oracle.com/javase/8/docs/api/java/time/LocalDate.html&quot;&gt;LocalDate&lt;/a&gt; using the provided pattern.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="06f64206e26fa3a46a3b2958af7b9c3fa538280a" translate="yes" xml:space="preserve">
          <source>Parse text into a &lt;a href=&quot;https://docs.oracle.com/javase/8/docs/api/java/time/LocalDate.html&quot;&gt;LocalDate&lt;/a&gt; using the provided pattern. Note: the order of parameters differs from versions of this method for the legacy Date class.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eb9cc3b4d482c4bfdc845f1605fb75fe37444483" translate="yes" xml:space="preserve">
          <source>Parse text into a &lt;a href=&quot;https://docs.oracle.com/javase/8/docs/api/java/time/LocalDateTime.html&quot;&gt;LocalDateTime&lt;/a&gt; using the provided pattern.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bf1dcee73a4b9183ecfae8b723c08f5706a66125" translate="yes" xml:space="preserve">
          <source>Parse text into a &lt;a href=&quot;https://docs.oracle.com/javase/8/docs/api/java/time/LocalDateTime.html&quot;&gt;LocalDateTime&lt;/a&gt; using the provided pattern. Note: the order of parameters differs from versions of this method for the legacy Date class.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2fe0031b216c7054f61b697dcf3c49c52b77af92" translate="yes" xml:space="preserve">
          <source>Parse text into a &lt;a href=&quot;https://docs.oracle.com/javase/8/docs/api/java/time/LocalTime.html&quot;&gt;LocalTime&lt;/a&gt; using the provided pattern.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b5e5be417ae33bc173d83ff957355a41fa76fc49" translate="yes" xml:space="preserve">
          <source>Parse text into a &lt;a href=&quot;https://docs.oracle.com/javase/8/docs/api/java/time/MonthDay.html&quot;&gt;MonthDay&lt;/a&gt; using the provided pattern.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d3e7cebe055b5aa2282890986cfbeb81fc0faccb" translate="yes" xml:space="preserve">
          <source>Parse text into a &lt;a href=&quot;https://docs.oracle.com/javase/8/docs/api/java/time/Year.html&quot;&gt;Year&lt;/a&gt; using the provided pattern.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="04a3a503d678f1f169d964013dadf14dd725021a" translate="yes" xml:space="preserve">
          <source>Parse text into a &lt;a href=&quot;https://docs.oracle.com/javase/8/docs/api/java/time/YearMonth.html&quot;&gt;YearMonth&lt;/a&gt; using the provided pattern.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="136bc85a3e46e6394ae7d1a48fb51d4aaff147a6" translate="yes" xml:space="preserve">
          <source>Parse text into a &lt;a href=&quot;https://docs.oracle.com/javase/8/docs/api/java/time/ZonedDateTime.html&quot;&gt;ZonedDateTime&lt;/a&gt; using the provided pattern.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9787a5e5e4ee0367839d7c058cdd84e7ef98ece4" translate="yes" xml:space="preserve">
          <source>Parse text into an &lt;a href=&quot;https://docs.oracle.com/javase/8/docs/api/java/time/OffsetDateTime.html&quot;&gt;OffsetDateTime&lt;/a&gt; using the provided pattern.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cc374aa6d3b5659ff2ca1a3f4b464266f2d6cdaa" translate="yes" xml:space="preserve">
          <source>Parse text into an &lt;a href=&quot;https://docs.oracle.com/javase/8/docs/api/java/time/OffsetTime.html&quot;&gt;OffsetTime&lt;/a&gt; using the provided pattern.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3f7c576529d150a23620cf25335c6bdb2198c166" translate="yes" xml:space="preserve">
          <source>Parse the Document to update the character styles given an initial start position.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="16c4491283f58377c9aca2a8780034efb65f02b3" translate="yes" xml:space="preserve">
          <source>Parse the Document to update the character styles given an initial start position. Called by the filter after it has updated the text.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="95f6d25d44ce5ee25b72fb8508d4f184836e991b" translate="yes" xml:space="preserve">
          <source>Parse the content of the specified URI into a GPathResult Object</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="320f22f23874500066dc39cb3e7d4787c222ae6c" translate="yes" xml:space="preserve">
          <source>Parse the content of the specified URI into a tree of Nodes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="868f5ba9d4a117e731d7cafa1434811d380c1f96" translate="yes" xml:space="preserve">
          <source>Parse the content of the specified file into a tree of Nodes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="690d672b1278b0c9a343000f99d8e95d806c3dae" translate="yes" xml:space="preserve">
          <source>Parse the content of the specified input source into a GPathResult object</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="93261447b5921ec0bbafeeb19a067d476953cab1" translate="yes" xml:space="preserve">
          <source>Parse the content of the specified input source into a tree of Nodes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d3eaee7ee4fb8a90076c786a0cdc3a26a47e7b04" translate="yes" xml:space="preserve">
          <source>Parse the content of the specified input stream into a tree of Nodes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a7105a9392aec7da16f5b89a9e6419c7b91df3a3" translate="yes" xml:space="preserve">
          <source>Parse the content of the specified input stream into an GPathResult Object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ab79f72db15296a11619b73c39ded7ec032fb6a3" translate="yes" xml:space="preserve">
          <source>Parse the content of the specified input stream into an GPathResult Object. Note that using this method will not provide the parser with any URI for which to find DTDs etc. It is up to you to close the InputStream after parsing is complete (if required).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="11e298ef34a0d2d6d3cbccf482a58bcf6fdc8388" translate="yes" xml:space="preserve">
          <source>Parse the content of the specified path into a tree of Nodes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="77c83ddb576717cfbc74d9e02db5b726b90db0e7" translate="yes" xml:space="preserve">
          <source>Parse the content of the specified reader into a GPathResult Object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3c0f3cfb99ba068f8093a89b289c3e9143195d1f" translate="yes" xml:space="preserve">
          <source>Parse the content of the specified reader into a GPathResult Object. Note that using this method will not provide the parser with any URI for which to find DTDs etc. It is up to you to close the Reader after parsing is complete (if required).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a692df3f94b533ad58d7f943aa31b22551ef0fe9" translate="yes" xml:space="preserve">
          <source>Parse the content of the specified reader into a tree of Nodes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5c18692c866f21909c0cdc0180368ef7914943c9" translate="yes" xml:space="preserve">
          <source>Parse the content of the specified yaml into a tree of Nodes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6e88a7b132a83763581555b15ae4b33c691409ac" translate="yes" xml:space="preserve">
          <source>Parse the given script as a string and return the configuration object</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ac4bc4caa0b8c4e43a66bb975e611abaef7e1f09" translate="yes" xml:space="preserve">
          <source>Parse the given script into a configuration object (a Map) (This method creates a new class to parse the script each time it is called.)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c5e2239a6dd873dc3feb90b3d67ebf2d94aa60cb" translate="yes" xml:space="preserve">
          <source>ParseException if there is a parse error</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1b3cf5033ed01a4fcbff3f2957e66cfe44af45a9" translate="yes" xml:space="preserve">
          <source>Parser</source>
          <target state="translated">Parser</target>
        </trans-unit>
        <trans-unit id="80328a2be4683b89d674ecb243605aba666591a7" translate="yes" xml:space="preserve">
          <source>Parser related classes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f16c215b0cfe136ba855d538a59401b42865e9bf" translate="yes" xml:space="preserve">
          <source>Parser speed in order: INDEX_OVERLAY, LAX, CHAR_BUFFER, CHARACTER_SOURCE.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="101eda9c56598c58be4080c1d27710adba62e809" translate="yes" xml:space="preserve">
          <source>Parser type.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1929902dae376904b8ba3ad20ab32cb461956a34" translate="yes" xml:space="preserve">
          <source>Parser uses an abstraction that allows it to handle any size file by using a char [] windowing, built on top or Reader.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a15172071d1b0fa71b893428f03073c48c19b526" translate="yes" xml:space="preserve">
          <source>Parser uses an abstraction that allows it to handle any size file by using a char [] windowing, built on top or Reader. This parser is slower than INDEX_OVERLAY and CHAR_BUFFER, but can handle really large files without OOM exceptions. Although slower than other groovy parsers it is as fast as many common JSON parsers. Recommendation is to use this for JSON buffers over 2MB.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="51d6fa864de0c753c0691d196c8f61563eea6b4e" translate="yes" xml:space="preserve">
          <source>ParserConfigurationException</source>
          <target state="translated">ParserConfigurationException</target>
        </trans-unit>
        <trans-unit id="f05b029cd671d6d312d16bfa5ed56a118bd3bfca" translate="yes" xml:space="preserve">
          <source>ParserConfigurationException if a DocumentBuilder cannot be created which satisfies the configuration requested.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="02f8c814fe2090a9336dbfd735e06d676ef98cbc" translate="yes" xml:space="preserve">
          <source>ParserConfigurationException if no parser which satisfies the requested configuration can be created.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="75ce82fa4d4b9240ad0983da16b9258ec86f6c97" translate="yes" xml:space="preserve">
          <source>ParserPlugin</source>
          <target state="translated">ParserPlugin</target>
        </trans-unit>
        <trans-unit id="6b5fc96686cdfbe8159f2b348d936c0000f8fad9" translate="yes" xml:space="preserve">
          <source>Parses a CharSequence into a BigDecimal</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f2e5a1cfff1c14c2764afe03b09c3c1b20a278d9" translate="yes" xml:space="preserve">
          <source>Parses a CharSequence into a BigInteger</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a5ba8dd2b594de70b23b5ef2518a101cc35ed614" translate="yes" xml:space="preserve">
          <source>Parses a CharSequence into a Double.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c2687ba6f7edcaa01c7d127ed505b891f5d12e1d" translate="yes" xml:space="preserve">
          <source>Parses a CharSequence into a Float.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3270ecc24788b2f8cf39c1af9a1e634e050108b3" translate="yes" xml:space="preserve">
          <source>Parses a CharSequence into a Long</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7b6bd4d4ffb1e22fb6430eea391c248c56d56079" translate="yes" xml:space="preserve">
          <source>Parses a CharSequence into a Short.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bf9b4206d226ec6587e996ca51dd262f59b9e42a" translate="yes" xml:space="preserve">
          <source>Parses a CharSequence into an Integer.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9100729f3c4248b0e4a0958a2f41a7396ebf6aa0" translate="yes" xml:space="preserve">
          <source>Parses a ConfigObject instances from an instance of java.util.Properties</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8c81a97174bb7c53ddc3880f2d4ec7df2ce9b010" translate="yes" xml:space="preserve">
          <source>Parses a Script represented by the given URL into a ConfigObject</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bf00dfa7b3a6db9f623811035c30197146554bb2" translate="yes" xml:space="preserve">
          <source>Parses the content of the given file as XML turning it into a GPathResult object</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="88ab908a848fde708680a609344ba6c3e9a24eb7" translate="yes" xml:space="preserve">
          <source>Parses the content of the given file as XML turning it into a tree of Nodes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1d4a146b09c5e8640f8353af15ef1551002f5cce" translate="yes" xml:space="preserve">
          <source>Parses the given code source into a Java class.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0275a020c1eb394a3c6a2a579502d483a13ecf3f" translate="yes" xml:space="preserve">
          <source>Parses the given code source into a Java class. If there is a class file for the given code source, then no parsing is done, instead the cached class is returned.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f9b522971a257c6d355a4d9d3c85b5f906f72cd3" translate="yes" xml:space="preserve">
          <source>Parses the given file into a Java class capable of being run</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="40b5086591b6d3f05869db14054cb31a937dd58c" translate="yes" xml:space="preserve">
          <source>Parses the given text into a Java class capable of being run</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="db32d70c025a37facb4c4b27f0891fb96cabd3b3" translate="yes" xml:space="preserve">
          <source>Parses the http request for the real script or template source file.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a11c294ca8c4b70554f64da956223a9f15c21301" translate="yes" xml:space="preserve">
          <source>Parses the passed groovy.lang.Script instance using the second argument to allow the ConfigObject to retain an reference to the original location other Groovy script</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="64b7e9e935a2b7b91b9e05e787aead97f01002f0" translate="yes" xml:space="preserve">
          <source>Parses the source to a CST.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="610298b77c5a941c5598c81b50f05dd1c073041e" translate="yes" xml:space="preserve">
          <source>Parses the source to a CST. You can retrieve it with getCST().</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7294d33710169103141018bfcb0ee5ad3daa81e2" translate="yes" xml:space="preserve">
          <source>Parsing</source>
          <target state="translated">Parsing</target>
        </trans-unit>
        <trans-unit id="9e0dc38e2a8619fba6ba62c2478377cb5f031fe7" translate="yes" xml:space="preserve">
          <source>Passes the Socket's InputStream and OutputStream to the closure.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="adcad35681646a8939aa87caa9e151da9f671418" translate="yes" xml:space="preserve">
          <source>Passes the Socket's InputStream and OutputStream to the closure. The streams will be closed after the closure returns, even if an exception is thrown.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8fedbec564c3568bcc36b4d24caf0b44fc88e6be" translate="yes" xml:space="preserve">
          <source>Passes this OutputStream to the closure, ensuring that the stream is closed after the closure returns, regardless of errors.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ee5035333fca8956eb03b8eebbd4859625c3e3d9" translate="yes" xml:space="preserve">
          <source>Path which wraps the input file and which implements Writable</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6fbdc9ce9195f25c65e0d1c4e883b7e095a40c4e" translate="yes" xml:space="preserve">
          <source>Pattern for regular class names.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4ef6f34127745d908c91d4fb0b72646e990fb53d" translate="yes" xml:space="preserve">
          <source>Perform any last cleanup</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3c83beb00ed14ca93cea66925e3de117deb5b030" translate="yes" xml:space="preserve">
          <source>Perform the query.</source>
          <target state="new"/>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
