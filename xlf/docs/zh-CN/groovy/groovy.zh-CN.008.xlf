<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="zh-CN" datatype="htmlbody" original="groovy">
    <body>
      <group id="groovy">
        <trans-unit id="ce7f048ea536d34f5d1327988fe5e8a5e3d8ea1b" translate="yes" xml:space="preserve">
          <source>A Closure containing statements which will be prepended to the generated constructor. The first statement within the Closure may be &quot;super(someArgs)&quot; in which case the no-arg super constructor won't be called.</source>
          <target state="translated">一个包含语句的Closure,这些语句将被前置到生成的构造函数中。Closure中的第一条语句可能是 &quot;super(someArgs)&quot;,在这种情况下,无参数的超级构造函数不会被调用。</target>
        </trans-unit>
        <trans-unit id="2f6d78acbc0aeed01088d8b1b9426ee59fbb2c46" translate="yes" xml:space="preserve">
          <source>A Closure containing statements which will be prepended to the generated constructor. The first statement within the Closure may be &lt;code&gt;super(someArgs)&lt;/code&gt; in which case the no-arg super constructor won't be called.</source>
          <target state="translated">一个包含语句的闭包，该语句将添加到生成的构造函数之前。在Closure中的第一个语句可能是 &lt;code&gt;super(someArgs)&lt;/code&gt; ,在这种情况下，不会调用no-arg super构造函数。</target>
        </trans-unit>
        <trans-unit id="cd4659fcf3ffddd3493de79a99593c8a1b878296" translate="yes" xml:space="preserve">
          <source>A Collections utility class</source>
          <target state="translated">一个集合工具类</target>
        </trans-unit>
        <trans-unit id="9418de74a8c5c5084373fafc95d3c0111418901c" translate="yes" xml:space="preserve">
          <source>A Command line to execute groovy.</source>
          <target state="translated">执行groovy的命令行。</target>
        </trans-unit>
        <trans-unit id="83855d36697dc7f2bd5817a052d9107c5aac813a" translate="yes" xml:space="preserve">
          <source>A Comparator which uses a closure to compare 2 values being equal</source>
          <target state="translated">一个比较器,它使用闭合来比较2个值是否相等。</target>
        </trans-unit>
        <trans-unit id="414fb9415a65938777e156dc4974affa9cba06c8" translate="yes" xml:space="preserve">
          <source>A Concrete Syntax Tree of the source</source>
          <target state="translated">源的具体语法树</target>
        </trans-unit>
        <trans-unit id="d961611a21ba4b31e18ddbccf0cf91717f6ca34a" translate="yes" xml:space="preserve">
          <source>A ConfigObject at a simple level is a Map that creates configuration entries (other ConfigObjects) when referencing them. This means that navigating to foo.bar.stuff will not return null but nested ConfigObjects which are of course empty maps The Groovy truth can be used to check for the existence of &quot;real&quot; entries.</source>
          <target state="translated">ConfigObject在简单的层面上就是一个Map,在引用配置条目(其他ConfigObjects)的时候,会创建它们。这意味着,导航到foo.bar.stuff不会返回null,而是返回嵌套的ConfigObjects,当然,嵌套的ConfigObjects是空的Map Groovy truth可以用来检查是否存在 &quot;真实 &quot;条目。</target>
        </trans-unit>
        <trans-unit id="87060f0963c51b42a783ee24921e7a0629e2ffed" translate="yes" xml:space="preserve">
          <source>A ConfigObject is a tree structure consisting of nested maps.</source>
          <target state="translated">ConfigObject是一个由嵌套地图组成的树形结构。</target>
        </trans-unit>
        <trans-unit id="e9690d01421bf94eb0d5d2d78ae54c3ae5d0b9a2" translate="yes" xml:space="preserve">
          <source>A ConfigObject is a tree structure consisting of nested maps. This flattens the maps into a single level structure like a properties file</source>
          <target state="translated">ConfigObject是一个由嵌套地图组成的树形结构。这就将映射扁平化为像属性文件一样的单层结构。</target>
        </trans-unit>
        <trans-unit id="03a26e5bbda6d583c934ea6365fded9fd8353a69" translate="yes" xml:space="preserve">
          <source>A DGM-like class which adds support for method calls which are handled specifically by the Groovy compiler.</source>
          <target state="translated">一个类似于DGM的类,它增加了对方法调用的支持,这些方法调用由Groovy编译器专门处理。</target>
        </trans-unit>
        <trans-unit id="3c838959704688fe4023361f4af2d5c2f092cfb3" translate="yes" xml:space="preserve">
          <source>A GString containing a single empty String and no values.</source>
          <target state="translated">一个GString,包含一个空字符串,没有值。</target>
        </trans-unit>
        <trans-unit id="b6cdd59379fa4fe793d2bd731df39c6b3fb4f138" translate="yes" xml:space="preserve">
          <source>A GString variant of the equivalent CharSequence method &lt;a href=&quot;#dropRight(java.lang.CharSequence,%20int)&quot;&gt;dropRight(CharSequence,int)&lt;/a&gt;.</source>
          <target state="translated">等效CharSequence方法&lt;a href=&quot;#dropRight(java.lang.CharSequence,%20int)&quot;&gt;dropRight（CharSequence，int）的&lt;/a&gt;GString变体。</target>
        </trans-unit>
        <trans-unit id="acf3a25460d426dede483995050de64071c38744" translate="yes" xml:space="preserve">
          <source>A GString variant of the equivalent CharSequence method &lt;a href=&quot;#takeAfter(java.lang.CharSequence,%20java.lang.CharSequence)&quot;&gt;takeAfter(CharSequence,CharSequence)&lt;/a&gt;.</source>
          <target state="translated">等效CharSequence方法&lt;a href=&quot;#takeAfter(java.lang.CharSequence,%20java.lang.CharSequence)&quot;&gt;takeAfter（CharSequence，CharSequence）的&lt;/a&gt;GString变体。</target>
        </trans-unit>
        <trans-unit id="366720cc19b25c5f17ea28a061418ce932d98059" translate="yes" xml:space="preserve">
          <source>A GString variant of the equivalent CharSequence method &lt;a href=&quot;#takeBefore(java.lang.CharSequence,%20java.lang.CharSequence)&quot;&gt;takeBefore(CharSequence,CharSequence)&lt;/a&gt;.</source>
          <target state="translated">等效CharSequence方法&lt;a href=&quot;#takeBefore(java.lang.CharSequence,%20java.lang.CharSequence)&quot;&gt;takeBefore（CharSequence，CharSequence）的&lt;/a&gt;GString变体。</target>
        </trans-unit>
        <trans-unit id="d026ec33fec4933bc6632e1068cb4009383f91ef" translate="yes" xml:space="preserve">
          <source>A GString variant of the equivalent CharSequence method &lt;a href=&quot;#takeBetween(java.lang.CharSequence,%20java.lang.CharSequence)&quot;&gt;takeBetween(CharSequence,CharSequence)&lt;/a&gt;.</source>
          <target state="translated">等效CharSequence方法&lt;a href=&quot;#takeBetween(java.lang.CharSequence,%20java.lang.CharSequence)&quot;&gt;takeBetween（CharSequence，CharSequence）的&lt;/a&gt;GString变体。</target>
        </trans-unit>
        <trans-unit id="53661c8acbb1d718d6b26e495629ecd6e804e41f" translate="yes" xml:space="preserve">
          <source>A GString variant of the equivalent CharSequence method &lt;a href=&quot;#takeBetween(java.lang.CharSequence,%20java.lang.CharSequence,%20int)&quot;&gt;takeBetween(CharSequence,CharSequence,int)&lt;/a&gt;.</source>
          <target state="translated">等效CharSequence方法&lt;a href=&quot;#takeBetween(java.lang.CharSequence,%20java.lang.CharSequence,%20int)&quot;&gt;takeBetween（CharSequence，CharSequence，int）&lt;/a&gt;的GString变体。</target>
        </trans-unit>
        <trans-unit id="3986175a9d36a81123d672e3d4af6824ca08a2b3" translate="yes" xml:space="preserve">
          <source>A GString variant of the equivalent CharSequence method &lt;a href=&quot;#takeBetween(java.lang.CharSequence,%20java.lang.CharSequence,%20java.lang.CharSequence)&quot;&gt;takeBetween(CharSequence,CharSequence,CharSequence)&lt;/a&gt;.</source>
          <target state="translated">等效CharSequence方法&lt;a href=&quot;#takeBetween(java.lang.CharSequence,%20java.lang.CharSequence,%20java.lang.CharSequence)&quot;&gt;takeBetween（CharSequence，CharSequence，CharSequence）&lt;/a&gt;的GString变体。</target>
        </trans-unit>
        <trans-unit id="0b54d145ee7eb0ee85aa9abe01a77c5ba29676e7" translate="yes" xml:space="preserve">
          <source>A GString variant of the equivalent CharSequence method &lt;a href=&quot;#takeBetween(java.lang.CharSequence,%20java.lang.CharSequence,%20java.lang.CharSequence,%20int)&quot;&gt;takeBetween(CharSequence,CharSequence,CharSequence,int)&lt;/a&gt;.</source>
          <target state="translated">等效CharSequence方法&lt;a href=&quot;#takeBetween(java.lang.CharSequence,%20java.lang.CharSequence,%20java.lang.CharSequence,%20int)&quot;&gt;takeBetween（CharSequence，CharSequence，CharSequence，int）&lt;/a&gt;的GString变体。</target>
        </trans-unit>
        <trans-unit id="3d5a505269acc7d3f5f1d99106c78b40fa0e7626" translate="yes" xml:space="preserve">
          <source>A GString variant of the equivalent CharSequence method &lt;a href=&quot;#takeRight(java.lang.CharSequence,%20int)&quot;&gt;takeRight(CharSequence,int)&lt;/a&gt;.</source>
          <target state="translated">等效CharSequence方法&lt;a href=&quot;#takeRight(java.lang.CharSequence,%20int)&quot;&gt;takeRight（CharSequence，int）的&lt;/a&gt;GString变体。</target>
        </trans-unit>
        <trans-unit id="292098c58e042a8d51ac915bde47f9ef60e09e6c" translate="yes" xml:space="preserve">
          <source>A GString variant of the equivalent CharSequence method.</source>
          <target state="translated">等价的CharSequence方法的GString变体。</target>
        </trans-unit>
        <trans-unit id="0f43441603cf14d2fd96ceb949917b7f89e8d077" translate="yes" xml:space="preserve">
          <source>A GString variant of the equivalent GString method.</source>
          <target state="translated">等价GString方法的GString变体。</target>
        </trans-unit>
        <trans-unit id="03afd7990dd19999bbe813d9453a3d086d0871bd" translate="yes" xml:space="preserve">
          <source>A Groovy builder that works with Stax processors. A typical usage is as follows:</source>
          <target state="translated">一个与Stax处理器配合使用的Groovy构建器。典型的用法如下。</target>
        </trans-unit>
        <trans-unit id="b3d1484291258bc86af34f8ed3567917181185ca" translate="yes" xml:space="preserve">
          <source>A Groovy script or simple expression.</source>
          <target state="translated">一个Groovy脚本或简单的表达式。</target>
        </trans-unit>
        <trans-unit id="33c16f503ce1ee967656914faa1897ff07ed6ea1" translate="yes" xml:space="preserve">
          <source>A Groovy script or simple expression. Can be anything legal inside {...}.</source>
          <target state="translated">一个Groovy脚本或简单的表达式。可以是任何合法的{...}里面的东西。</target>
        </trans-unit>
        <trans-unit id="1267af36c412af6f5a5f0b00955918460c6323ad" translate="yes" xml:space="preserve">
          <source>A GroovyMarkup builder for creating Swing user interfaces</source>
          <target state="translated">一个用于创建Swing用户界面的GroovyMarkup构建器。</target>
        </trans-unit>
        <trans-unit id="156d761cb68241351a71c683ca3b76532c62e576" translate="yes" xml:space="preserve">
          <source>A GroovyObject facade for an underlying MBean which acts like a normal groovy object but which is actually implemented via an underlying JMX MBean. Properties and normal method invocations delegate to the MBeanServer to the actual MBean.</source>
          <target state="translated">一个用于底层MBean的GroovyObject门面,它的行为就像一个普通的groovy对象,但实际上是通过底层JMX MBean实现的。属性和正常的方法调用委托给MBeanServer,再委托给实际的MBean。</target>
        </trans-unit>
        <trans-unit id="7c4e690e9d4ee4d47b91f0213f7dbf3188d48713" translate="yes" xml:space="preserve">
          <source>A JSON token, with a type, line / column information, and the text of that token.</source>
          <target state="translated">一个JSON标记,包括类型、行/列信息和该标记的文本。</target>
        </trans-unit>
        <trans-unit id="1d410d9869d9bd3121cee2742e47c35c9f437b83" translate="yes" xml:space="preserve">
          <source>A JUnit 3 &lt;a href=&quot;https://junit.org/junit4/javadoc/latest/junit/framework/TestCase.html&quot;&gt;TestCase&lt;/a&gt; base class in Groovy. In case JUnit 4 is used, see &lt;a href=&quot;../test/groovyassert&quot;&gt;GroovyAssert&lt;/a&gt;.</source>
          <target state="translated">Groovy中的JUnit 3 &lt;a href=&quot;https://junit.org/junit4/javadoc/latest/junit/framework/TestCase.html&quot;&gt;TestCase&lt;/a&gt;基类。如果使用JUnit 4，请参见&lt;a href=&quot;../test/groovyassert&quot;&gt;GroovyAssert&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="638989d60ef6a9935147b24d7777c6273f074153" translate="yes" xml:space="preserve">
          <source>A JUnit 3 &lt;a href=&quot;https://junit.org/junit4/javadoc/latest/junit/framework/TestCase.html&quot;&gt;TestCase&lt;/a&gt; base class in Groovy. In case JUnit 4 is used, see &lt;a href=&quot;groovyassert&quot;&gt;GroovyAssert&lt;/a&gt;.</source>
          <target state="translated">Groovy中的JUnit 3 &lt;a href=&quot;https://junit.org/junit4/javadoc/latest/junit/framework/TestCase.html&quot;&gt;TestCase&lt;/a&gt;基类。如果使用JUnit 4，请参见&lt;a href=&quot;groovyassert&quot;&gt;GroovyAssert&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="ed490fad5788a7ac370e1249ff8eb7f4a338011d" translate="yes" xml:space="preserve">
          <source>A JsonGenerator that can be configured with various JsonGenerator.Options. If the default options are sufficient consider using the static &lt;code&gt;JsonOutput.toJson&lt;/code&gt; methods.</source>
          <target state="translated">可以使用各种JsonGenerator.Options配置的JsonGenerator。如果默认选项足够，请考虑使用静态 &lt;code&gt;JsonOutput.toJson&lt;/code&gt; 方法。</target>
        </trans-unit>
        <trans-unit id="f4a4a1e087b90acb1950d305de50de2f4995ab48" translate="yes" xml:space="preserve">
          <source>A List implementation which is returned by queries on a &lt;a href=&quot;node&quot;&gt;Node&lt;/a&gt; which provides some XPath like helper methods for GPath.</source>
          <target state="translated">一个List实现，该实现由&lt;a href=&quot;node&quot;&gt;Node&lt;/a&gt;上的查询返回，该Node为GPath提供了一些XPath之类的辅助方法。</target>
        </trans-unit>
        <trans-unit id="224123b8cb95902ddbec40cd873417bc357db2f2" translate="yes" xml:space="preserve">
          <source>A List of MetaMethods matching the argument types which will be empty if no matching methods exist</source>
          <target state="translated">匹配参数类型的MetaMethods列表,如果没有匹配的方法,则为空。</target>
        </trans-unit>
        <trans-unit id="34a59b5b75c93513acffd7b39c8c22ead0e789aa" translate="yes" xml:space="preserve">
          <source>A List of MetaMethods matching the given name or an empty list if no matching methods exist</source>
          <target state="translated">匹配给定名称的MetaMethods列表,如果没有匹配的方法,则为空列表。</target>
        </trans-unit>
        <trans-unit id="6acc970cba6ed529f8e9ebe111d5b698af46ec74" translate="yes" xml:space="preserve">
          <source>A List of MetaMethods which will be empty if no methods with the given name exist</source>
          <target state="translated">一个MetaMethods列表,如果没有指定名称的方法存在,则该列表为空。</target>
        </trans-unit>
        <trans-unit id="97a30e462497f5c6e319ae0e1b1e1d5ed32f93df" translate="yes" xml:space="preserve">
          <source>A LoggingStrategy defines how to wire a new logger instance into an existing class.</source>
          <target state="translated">LoggingStrategy 定义了如何将新的记录仪实例接入现有类中。</target>
        </trans-unit>
        <trans-unit id="df2607e244da71ae64ade8e09e26042aa1e915b3" translate="yes" xml:space="preserve">
          <source>A LoggingStrategy defines how to wire a new logger instance into an existing class. It is meant to be used with the</source>
          <target state="translated">LoggingStrategy 定义了如何将新的记录仪实例接入现有类。它旨在与</target>
        </trans-unit>
        <trans-unit id="dff317e957586d43dd64fc011140dcf501479a1b" translate="yes" xml:space="preserve">
          <source>A MOP Writer that skips the generation of MOP methods. This writer is used when a class is *fully* statically compiled. In mixed mode, MOP methods are still generated.</source>
          <target state="translated">一个跳过MOP方法生成的MOP写入器。当一个类被*完全*静态编译时,会使用这个写入器。在混合模式下,MOP方法仍然会被生成。</target>
        </trans-unit>
        <trans-unit id="f552e25ed80c5715dbd952e038038cd6e0ca6716" translate="yes" xml:space="preserve">
          <source>A Main instance has a Groovysh member representing the shell, and a startGroovysh() method to run an interactive shell. Subclasses should preferably extend createIO() or configure the shell via getShell prior to invoking startGroovysh. Clients may use configureAndStartGroovysh to provide the same CLI params but a different Groovysh implementation (implementing getIO() and run()). The class also has static utility methods to manipulate the static ansi state using the jAnsi library. Main CLI entry-point for</source>
          <target state="translated">一个Main实例有一个代表shell的Groovysh成员,以及一个用于运行交互式shell的startGroovysh()方法。子类最好扩展createIO()或在调用startGroovysh之前通过getShell配置shell。客户端可以使用configureAndStartGroovysh来提供相同的CLI参数,但不同的Groovysh实现(实现getIO()和run())。该类还拥有静态实用方法,以使用jAnsi库来操作静态ansi状态。CLI的主要入口点</target>
        </trans-unit>
        <trans-unit id="8a1bcb46fa2bbfaf8462496f7d2f18cf223a122a" translate="yes" xml:space="preserve">
          <source>A Map of maps that can be navigating with dot de-referencing syntax to obtain configuration entries</source>
          <target state="translated">可以用点状去引用语法来导航获取配置项的地图地图。</target>
        </trans-unit>
        <trans-unit id="80b6f976edca9bd0498348922485b0ed6f6c22ee" translate="yes" xml:space="preserve">
          <source>A Map.Entry implementation.</source>
          <target state="translated">一个Map.Entry的实现。</target>
        </trans-unit>
        <trans-unit id="d6bec4d0f9624f5f9f88e218056b2dceb3496c5d" translate="yes" xml:space="preserve">
          <source>A MetaClass within Groovy defines the behaviour of any given Groovy or Java class</source>
          <target state="translated">Groovy中的MetaClass定义了任何给定的Groovy或Java类的行为。</target>
        </trans-unit>
        <trans-unit id="4359d4338da210e4d2f96e65b6409c4703d99ab2" translate="yes" xml:space="preserve">
          <source>A MetaClass within Groovy defines the behaviour of any given Groovy or Java class. The MetaClass interface defines two parts. The client API, which is defined via the extend MetaObjectProtocol interface and the contract with the Groovy runtime system. In general the compiler and Groovy runtime engine interact with methods on this class whilst MetaClass clients interact with the method defined by the MetaObjectProtocol interface</source>
          <target state="translated">Groovy中的MetaClass定义了任何给定的Groovy或Java类的行为。MetaClass接口定义了两个部分。客户端API,它通过扩展MetaObjectProtocol接口和与Groovy运行时系统的合同来定义。一般来说,编译器和Groovy运行时引擎与该类上的方法交互,而MetaClass客户端与MetaObjectProtocol接口定义的方法交互。</target>
        </trans-unit>
        <trans-unit id="d831e36c0da29fd84eca3181710f80cc8cf7ff84" translate="yes" xml:space="preserve">
          <source>A MetaClassRegistry is an object that is responsible for managing the a cache of MetaClass instances. Each java.lang.Class instance has an associated MetaClass and client code can query this interface for the MetaClass for a given associated java.lang.Class</source>
          <target state="translated">MetaClassRegistry是一个负责管理MetaClass实例缓存的对象。每个java.lang.Class实例都有一个关联的MetaClass,客户端代码可以通过这个接口查询给定关联java.lang.Class的MetaClass。</target>
        </trans-unit>
        <trans-unit id="361c65cfd06f0b1e731bed406f5478a12f7903d3" translate="yes" xml:space="preserve">
          <source>A MetaMethod implementation useful for implementing coercion based invocations</source>
          <target state="translated">一个用于实现基于胁迫的调用的MetaMethod实现。</target>
        </trans-unit>
        <trans-unit id="5f8c606f398112236be5998214cb97cbf2e8cab0" translate="yes" xml:space="preserve">
          <source>A MetaMethod implementation where the underlying method is really a static helper method on some class but it appears to be an instance method on a class. This implementation is used to add new methods to the JDK writing them as normal static methods with the first parameter being the class on which the method is added.</source>
          <target state="translated">一个MetaMethod实现,其底层方法实际上是某个类上的静态帮助方法,但它看起来是某个类上的实例方法。这种实现用于向JDK中添加新方法,将它们写成普通的静态方法,第一个参数是添加方法的类。</target>
        </trans-unit>
        <trans-unit id="3b00ca6193a8b38d448a7c0f657f526c15300a1e" translate="yes" xml:space="preserve">
          <source>A MetaMethod implementation where the underlying method is really a static helper method on some class. This implementation is used to add new static methods to the JDK writing them as normal static methods with the first parameter being the class on which the method is added.</source>
          <target state="translated">一个MetaMethod实现,其底层方法实际上是某个类上的静态帮助方法。这个实现用于在JDK中添加新的静态方法,把它们写成普通的静态方法,第一个参数是添加方法的类。</target>
        </trans-unit>
        <trans-unit id="aeacbac7b43efd2e80f98775658d57983520b615" translate="yes" xml:space="preserve">
          <source>A MetaMethod or null if it doesn't exist</source>
          <target state="translated">一个MetaMethod,如果不存在则为空。</target>
        </trans-unit>
        <trans-unit id="84098d2706ab0e22e644220b88647da7b9200bff" translate="yes" xml:space="preserve">
          <source>A MetaMethod that accepts a closure in the constructor which is invoked when the MetaMethod is called. The delegate of the closure is set to the instance that the MetaMethod is invoked on when called.</source>
          <target state="translated">一个MetaMethod,在构造函数中接受一个闭包,当MetaMethod被调用时,闭包会被调用。闭包的委托人被设置为调用MetaMethod时被调用的实例。</target>
        </trans-unit>
        <trans-unit id="c6770a5e2228cde5ebccbee9f4f9786135964fc3" translate="yes" xml:space="preserve">
          <source>A MetaProperty or null</source>
          <target state="translated">一个MetaProperty或null</target>
        </trans-unit>
        <trans-unit id="fe769ed93c1ba1b97e7bed39376f487dd3e3c241" translate="yes" xml:space="preserve">
          <source>A NullObject pattern implementation for ProtectionStorage Doesn't protect any resources. Used when the user doesn't mind to eventually have the whole memoize cache emptied by gc.</source>
          <target state="translated">ProtectionStorage的一个NullObject模式实现,不保护任何资源。当用户不介意最终被gc清空整个memoize缓存时使用。</target>
        </trans-unit>
        <trans-unit id="84f4e03b6b87f31cd08e087e5e3b26f633fb5ba7" translate="yes" xml:space="preserve">
          <source>A NumberRange's hashCode is based on hashCode values of the discrete items it represents.</source>
          <target state="translated">NumberRange的hashCode是基于它所代表的离散项的hashCode值。</target>
        </trans-unit>
        <trans-unit id="d45bbcd1d4f63b9713650783b2f6e30ec100a505" translate="yes" xml:space="preserve">
          <source>A Period will be returned for types &lt;a href=&quot;https://docs.oracle.com/javase/8/docs/api/java/time/Year.html&quot;&gt;Year&lt;/a&gt;, &lt;a href=&quot;https://docs.oracle.com/javase/8/docs/api/java/time/YearMonth.html&quot;&gt;YearMonth&lt;/a&gt;, and &lt;a href=&quot;https://docs.oracle.com/javase/8/docs/api/java/time/chrono/ChronoLocalDate.html&quot;&gt;ChronoLocalDate&lt;/a&gt;; otherwise, a Duration will be returned.</source>
          <target state="translated">将返回类型为&lt;a href=&quot;https://docs.oracle.com/javase/8/docs/api/java/time/Year.html&quot;&gt;Year&lt;/a&gt;，&lt;a href=&quot;https://docs.oracle.com/javase/8/docs/api/java/time/YearMonth.html&quot;&gt;YearMonth&lt;/a&gt;和&lt;a href=&quot;https://docs.oracle.com/javase/8/docs/api/java/time/chrono/ChronoLocalDate.html&quot;&gt;ChronoLocalDate的&lt;/a&gt;Period ; 否则，将返回持续时间。</target>
        </trans-unit>
        <trans-unit id="94a87e628268e6d4abac604f4e0acb56e4307e52" translate="yes" xml:space="preserve">
          <source>A PrintStream that outputs objects in Groovy style. That means print(Object) uses InvokerHelper.toString(Object) to produce the same results as Writer.print(Object).</source>
          <target state="translated">一个以Groovy风格输出对象的PrintStream。这意味着print(Object)使用InvokerHelper.toString(Object)产生与Writer.print(Object)相同的结果。</target>
        </trans-unit>
        <trans-unit id="553919043e383ea1d7bef7b426c8eb375493c097" translate="yes" xml:space="preserve">
          <source>A PrintWriter that outputs objects in Groovy style. That means print(Object) uses InvokerHelper.toString(Object) to produce the same results as Writer.print(Object).</source>
          <target state="translated">一个以Groovy风格输出对象的PrintWriter。这意味着print(Object)使用InvokerHelper.toString(Object)来产生与Writer.print(Object)相同的结果。</target>
        </trans-unit>
        <trans-unit id="bd2c4e7a683d004dd3046fc5036353da247a8e70" translate="yes" xml:space="preserve">
          <source>A Range represents the list of discrete items between some starting (or &lt;code&gt;from&lt;/code&gt;) value and &lt;em&gt;working up&lt;/em&gt; towards some ending (or &lt;code&gt;to&lt;/code&gt;) value. For a reverse range, the list is obtained by starting at the &lt;code&gt;to&lt;/code&gt; value and &lt;em&gt;working down&lt;/em&gt; towards the &lt;code&gt;from&lt;/code&gt; value. The concept of &lt;em&gt;working up&lt;/em&gt; and &lt;em&gt;working down&lt;/em&gt; is dependent on the range implementation. In the general case, working up involves successive calls to the first item's &lt;code&gt;next()&lt;/code&gt; method while working down involves calling the &lt;code&gt;previous()&lt;/code&gt; method. Optimized numerical ranges may apply numeric addition or subtraction of some numerical step size. Particular range implementations may also support the notion of inclusivity and exclusivity with respect to the ending value in the range. E.g. &lt;code&gt;1..3 == [1, 2, 3]&lt;/code&gt;; but &lt;code&gt;1..&amp;lt;3 == [1, 2]&lt;/code&gt;. In general, the second boundary may not be contained in the range, and &lt;code&gt;a..b&lt;/code&gt; may produce a different set of elements than &lt;code&gt;(b..a).reversed()&lt;/code&gt;. E.g. &lt;code&gt;1..2.5 == [1, 2]&lt;/code&gt;; but &lt;code&gt;2.5..1 == [2.5, 1.5]&lt;/code&gt;. Implementations can be memory efficient by storing just the &lt;code&gt;from&lt;/code&gt; and &lt;code&gt;to&lt;/code&gt; boundary values rather than eagerly creating all discrete items in the conceptual list. The actual discrete items can be lazily calculated on an as needed basis (e.g. when calling methods from the &lt;code&gt;java.util.List&lt;/code&gt; interface or the additional &lt;code&gt;step&lt;/code&gt; methods in the &lt;code&gt;Range&lt;/code&gt; interface). In addition to the methods related to a Range's &quot;discrete items&quot; abstraction, there is a method, &lt;code&gt;containsWithinBounds&lt;/code&gt; which, for numerical ranges, allows checking within the continuous interval between the Range's boundary values.</source>
          <target state="translated">范围代表了一些启动（或之间的离散的项目列表 &lt;code&gt;from&lt;/code&gt; ）值和&lt;em&gt;工作了&lt;/em&gt;对某些结束（或者 &lt;code&gt;to&lt;/code&gt; ）值。对于反向范围，该列表是通过从 &lt;code&gt;to&lt;/code&gt; 值开始并向&lt;em&gt;下&lt;/em&gt;到 &lt;code&gt;from&lt;/code&gt; 值获得的。&lt;em&gt;向上&lt;/em&gt;和&lt;em&gt;向下&lt;/em&gt;&lt;em&gt;工作&lt;/em&gt;的概念取决于范围的实现。在一般情况下，处理涉及连续调用第一个项目的 &lt;code&gt;next()&lt;/code&gt; 方法，而处理涉及涉及调用 &lt;code&gt;previous()&lt;/code&gt; 方法。优化的数字范围可以应用某些数字步长的数字加法或减法。特定范围的实现方式还可以支持相对于该范围内的最终值的包容性和排他性的概念。例如 &lt;code&gt;1..3 == [1, 2, 3]&lt;/code&gt; ；但是 &lt;code&gt;1..&amp;lt;3 == [1, 2]&lt;/code&gt; 。通常，第二个边界可能不包含在该范围内，并且 &lt;code&gt;a..b&lt;/code&gt; 可能会生成与 &lt;code&gt;(b..a).reversed()&lt;/code&gt; 不同的元素集。例如 &lt;code&gt;1..2.5 == [1, 2]&lt;/code&gt; ;但是 &lt;code&gt;2.5..1 == [2.5, 1.5]&lt;/code&gt; 。通过仅存储 &lt;code&gt;from&lt;/code&gt; 和 &lt;code&gt;to&lt;/code&gt; ,实现可以提高内存效率。边界值，而不是急于在概念列表中创建所有离散项。可以根据需要延迟计算实际的离散项（例如，当从 &lt;code&gt;java.util.List&lt;/code&gt; 接口调用方法或 &lt;code&gt;Range&lt;/code&gt; 接口中的其他 &lt;code&gt;step&lt;/code&gt; 方法时）。除了与范围的&amp;ldquo;离散项&amp;rdquo;抽象相关的方法外，还有一个方法 &lt;code&gt;containsWithinBounds&lt;/code&gt; ，对于数字范围，该方法允许在范围的边界值之间的连续间隔内进行检查。</target>
        </trans-unit>
        <trans-unit id="4b4072014ebd12ec595b93e1d89adbb8defa6d5a" translate="yes" xml:space="preserve">
          <source>A ReaderSource for source files hosted at a URL.</source>
          <target state="translated">源文件的ReaderSource,托管在一个URL上。</target>
        </trans-unit>
        <trans-unit id="6f4f9cf62a9b35501175bba1b165af3be349f604" translate="yes" xml:space="preserve">
          <source>A ReaderSource for source files.</source>
          <target state="translated">一个源文件的ReaderSource。</target>
        </trans-unit>
        <trans-unit id="7e6ea701e1b097692e065d214feb25192f0c3cc5" translate="yes" xml:space="preserve">
          <source>A ReaderSource for source strings.</source>
          <target state="translated">源字符串的ReaderSource。</target>
        </trans-unit>
        <trans-unit id="4e53797486bce26e164a0b992606941c5b299e86" translate="yes" xml:space="preserve">
          <source>A Realm is the representation of a metaclass layer in a tree of realm objects.</source>
          <target state="translated">境界是境界对象树中元类层的表示。</target>
        </trans-unit>
        <trans-unit id="c4cefa9b21f4fce70debe432fada646f94874aca" translate="yes" xml:space="preserve">
          <source>A ResultSet out parameter.</source>
          <target state="translated">一个ResultSet输出参数。</target>
        </trans-unit>
        <trans-unit id="d84c9ee86ec2babca3643d79ce6802bdccbc14d8" translate="yes" xml:space="preserve">
          <source>A Runnable which waits for a process to complete together with a notification scheme allowing another thread to wait a maximum number of seconds for the process to complete before killing it.</source>
          <target state="translated">一个Runnable,它等待一个进程完成,同时有一个通知方案,允许另一个线程在杀死该进程之前等待该进程完成的最大秒数。</target>
        </trans-unit>
        <trans-unit id="0d11e5390941be1221e2781f372eb9a14a22882e" translate="yes" xml:space="preserve">
          <source>A SAX handler for turning XML into Groovy scripts</source>
          <target state="translated">用于将XML转化为Groovy脚本的SAX处理程序。</target>
        </trans-unit>
        <trans-unit id="3a7b8a6940dbefd3e48e086f5a7c72ee240f1f30" translate="yes" xml:space="preserve">
          <source>A Serializable class for barrier lock *</source>
          <target state="translated">障碍锁的可序列化类 *</target>
        </trans-unit>
        <trans-unit id="f0760b2f562dafa13f7175a6bf21fb839ea2683d" translate="yes" xml:space="preserve">
          <source>A String containing the capitalized toString() of the CharSequence</source>
          <target state="translated">一个包含CharSequence的大写toString()的字符串。</target>
        </trans-unit>
        <trans-unit id="db6d1021028e3cbf16df11dca2fd2f2666ebbd60" translate="yes" xml:space="preserve">
          <source>A String containing the contents of the line, not including any line-termination characters, or null if the end of the stream has been reached</source>
          <target state="translated">一个字符串,包含行的内容,不包括任何行结束符,如果已经到达流的末端,则为空。</target>
        </trans-unit>
        <trans-unit id="73534becd736698b4fef999cfdfef2f66e888fbb" translate="yes" xml:space="preserve">
          <source>A String containing the uncapitalized toString() of the CharSequence</source>
          <target state="translated">一个字符串,包含CharSequence的未大写的toString()。</target>
        </trans-unit>
        <trans-unit id="2adef6b2010f873ba900029df3e69c1423334620" translate="yes" xml:space="preserve">
          <source>A String variant of the equivalent CharSequence method &lt;a href=&quot;#dropRight(java.lang.CharSequence,%20int)&quot;&gt;dropRight(CharSequence,int)&lt;/a&gt;.</source>
          <target state="translated">等效CharSequence方法&lt;a href=&quot;#dropRight(java.lang.CharSequence,%20int)&quot;&gt;dropRight（CharSequence，int）的&lt;/a&gt;String变体。</target>
        </trans-unit>
        <trans-unit id="85e4088ede3d846e3e783631a3203efa057e1daf" translate="yes" xml:space="preserve">
          <source>A String variant of the equivalent CharSequence method &lt;a href=&quot;#takeAfter(java.lang.CharSequence,%20java.lang.CharSequence)&quot;&gt;takeAfter(CharSequence,CharSequence)&lt;/a&gt;.</source>
          <target state="translated">等效CharSequence方法&lt;a href=&quot;#takeAfter(java.lang.CharSequence,%20java.lang.CharSequence)&quot;&gt;takeAfter（CharSequence，CharSequence）的&lt;/a&gt;String变体。</target>
        </trans-unit>
        <trans-unit id="c06d71fab2df61a7ddfc325ec2617d4838f93183" translate="yes" xml:space="preserve">
          <source>A String variant of the equivalent CharSequence method &lt;a href=&quot;#takeBefore(java.lang.CharSequence,%20java.lang.CharSequence)&quot;&gt;takeBefore(CharSequence,CharSequence)&lt;/a&gt;.</source>
          <target state="translated">等效CharSequence方法&lt;a href=&quot;#takeBefore(java.lang.CharSequence,%20java.lang.CharSequence)&quot;&gt;takeBefore（CharSequence，CharSequence）的&lt;/a&gt;String变体。</target>
        </trans-unit>
        <trans-unit id="6e15b8a4294a9309b7a96d3880a5c27c1b8f8c6e" translate="yes" xml:space="preserve">
          <source>A String variant of the equivalent CharSequence method &lt;a href=&quot;#takeBetween(java.lang.CharSequence,%20java.lang.CharSequence)&quot;&gt;takeBetween(CharSequence,CharSequence)&lt;/a&gt;.</source>
          <target state="translated">等效CharSequence方法&lt;a href=&quot;#takeBetween(java.lang.CharSequence,%20java.lang.CharSequence)&quot;&gt;takeBetween（CharSequence，CharSequence）的&lt;/a&gt;String变体。</target>
        </trans-unit>
        <trans-unit id="bed43d79143f31cb37255e4d163e0cc57f904e98" translate="yes" xml:space="preserve">
          <source>A String variant of the equivalent CharSequence method &lt;a href=&quot;#takeBetween(java.lang.CharSequence,%20java.lang.CharSequence,%20int)&quot;&gt;takeBetween(CharSequence,CharSequence,int)&lt;/a&gt;.</source>
          <target state="translated">等效CharSequence方法的String变体&lt;a href=&quot;#takeBetween(java.lang.CharSequence,%20java.lang.CharSequence,%20int)&quot;&gt;takeBetween（CharSequence，CharSequence，int）&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="3896e44b2c02eb57787e0889aadd32f32797c3f4" translate="yes" xml:space="preserve">
          <source>A String variant of the equivalent CharSequence method &lt;a href=&quot;#takeBetween(java.lang.CharSequence,%20java.lang.CharSequence,%20java.lang.CharSequence)&quot;&gt;takeBetween(CharSequence,CharSequence,CharSequence)&lt;/a&gt;.</source>
          <target state="translated">等效CharSequence方法的String变体&lt;a href=&quot;#takeBetween(java.lang.CharSequence,%20java.lang.CharSequence,%20java.lang.CharSequence)&quot;&gt;takeBetween（CharSequence，CharSequence，CharSequence）&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="4b9abc50bc4ceb0f7599ed670c80cf61a06d7097" translate="yes" xml:space="preserve">
          <source>A String variant of the equivalent CharSequence method &lt;a href=&quot;#takeBetween(java.lang.CharSequence,%20java.lang.CharSequence,%20java.lang.CharSequence,%20int)&quot;&gt;takeBetween(CharSequence,CharSequence,CharSequence,int)&lt;/a&gt;.</source>
          <target state="translated">等效CharSequence方法的String变体&lt;a href=&quot;#takeBetween(java.lang.CharSequence,%20java.lang.CharSequence,%20java.lang.CharSequence,%20int)&quot;&gt;takeBetween（CharSequence，CharSequence，CharSequence，int）&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="3633f27c29c5a5f1b263d740f5816349d0ff99a4" translate="yes" xml:space="preserve">
          <source>A String variant of the equivalent CharSequence method &lt;a href=&quot;#takeRight(java.lang.CharSequence,%20int)&quot;&gt;takeRight(CharSequence,int)&lt;/a&gt;.</source>
          <target state="translated">等效CharSequence方法&lt;a href=&quot;#takeRight(java.lang.CharSequence,%20int)&quot;&gt;takeRight（CharSequence，int）的&lt;/a&gt;String变体。</target>
        </trans-unit>
        <trans-unit id="2627e9877b75b153bef89b9589139bbd1516517b" translate="yes" xml:space="preserve">
          <source>A String variant of the equivalent CharSequence method.</source>
          <target state="translated">等价的CharSequence方法的一个字符串变体。</target>
        </trans-unit>
        <trans-unit id="5867b64b069605865d51b149b234e9d2ce202ac1" translate="yes" xml:space="preserve">
          <source>A SyntaxErrorReportable is a recognizer that can report syntax error</source>
          <target state="translated">SyntaxErrorReportable是一个可以报告语法错误的识别器。</target>
        </trans-unit>
        <trans-unit id="4e523d33e65bb17eeaad2d74b6fdab440e1fa865" translate="yes" xml:space="preserve">
          <source>A TestSuite which will run a Groovy unit test case inside any Java IDE either as a unit test case or as an application.</source>
          <target state="translated">一个TestSuite,它可以在任何Java IDE中运行一个Groovy单元测试用例,无论是作为单元测试用例还是作为一个应用程序。</target>
        </trans-unit>
        <trans-unit id="582abba5f38bc8924dc696211bb7f91e12baa959" translate="yes" xml:space="preserve">
          <source>A Two-pass method is used. First all candidate annotations are added to a list then the transformations are called on those collected annotations. This is done to avoid concurrent modification exceptions during the AST tree walk and allows the transformations to alter any portion of the AST tree. Hence annotations that are added in this phase will not be processed as transformations. They will only be handled in later phases (and then only if the type was in the AST prior to any AST transformations being run against it).</source>
          <target state="translated">我们使用了一种双通方法。首先,所有的候选注解被添加到一个列表中,然后在这些收集到的注解上调用转换。这样做是为了避免在AST树行走过程中出现并发修改异常,并允许变换改变AST树的任何部分。因此,在这个阶段添加的注释将不会被处理为转换。它们只有在以后的阶段才会被处理(而且只有当类型在AST中被运行任何AST转换之前,才会被处理)。</target>
        </trans-unit>
        <trans-unit id="6063c10195a560fdaf2704af33da5eb22855f9cd" translate="yes" xml:space="preserve">
          <source>A Writable File.</source>
          <target state="translated">一个可写文件。</target>
        </trans-unit>
        <trans-unit id="493ebae6c449ea326b4fca8003d449531188e777" translate="yes" xml:space="preserve">
          <source>A Writable Path.</source>
          <target state="translated">一个可写的路径。</target>
        </trans-unit>
        <trans-unit id="71659e8f516b3bc7222fdfa2c2b82efd5abf6769" translate="yes" xml:space="preserve">
          <source>A base class dealing with common HTTP servlet API housekeeping aspects.</source>
          <target state="translated">一个处理常见HTTP servlet API内务方面的基类。</target>
        </trans-unit>
        <trans-unit id="0f03563be96acbb523f772611dec05bbaa761c16" translate="yes" xml:space="preserve">
          <source>A base class for collecting messages and errors during processing. Each CompilationUnit should have an ErrorCollector, and the SourceUnits should share their ErrorCollector with the CompilationUnit.</source>
          <target state="translated">一个用于收集处理过程中的消息和错误的基类。每个CompilationUnit都应该有一个ErrorCollector,而SourceUnits应该与CompilationUnit共享他们的ErrorCollector。</target>
        </trans-unit>
        <trans-unit id="023f6a7afed848535fff4f26bb69bf07e13ac89f" translate="yes" xml:space="preserve">
          <source>A base class for compilation messages.</source>
          <target state="translated">编译信息的基类。</target>
        </trans-unit>
        <trans-unit id="d6a3f2ed13c0c43d29da5e3900e3011d035b9f27" translate="yes" xml:space="preserve">
          <source>A base class for customizers which only have to be applied on specific source units. This is for example useful if you want a customizer to be applied only for files matching some extensions.</source>
          <target state="translated">一个只适用于特定源单元的自定义器的基类。例如,如果你想让自定义器只应用于某些扩展名相匹配的文件,这个类就很有用。</target>
        </trans-unit>
        <trans-unit id="daa954f3a47d51ec4539bf92693f034891f3a1f7" translate="yes" xml:space="preserve">
          <source>A base class for data structures that can collect messages and errors during processing.</source>
          <target state="translated">一个数据结构的基类,可以收集处理过程中的消息和错误。</target>
        </trans-unit>
        <trans-unit id="321fbdcacaf76c82506138569368d46588612958" translate="yes" xml:space="preserve">
          <source>A bit simplified lock designed to be inherited by.</source>
          <target state="translated">位简化的锁,旨在通过继承。</target>
        </trans-unit>
        <trans-unit id="1d42f3f3d6dafdab41f5f1e52ed9ecdf9a0f9b40" translate="yes" xml:space="preserve">
          <source>A block body is a parade of zero or more statements or expressions.</source>
          <target state="translated">块体是由零个或多个语句或表达式组成的列队。</target>
        </trans-unit>
        <trans-unit id="9dd6997a82011ac3a1e873a4afcfc4ecad666ee3" translate="yes" xml:space="preserve">
          <source>A block known to be a closure, but which omits its arguments, is given this placeholder.</source>
          <target state="translated">一个已知是闭包的块,但省略了它的参数,就会被赋予这个占位符。</target>
        </trans-unit>
        <trans-unit id="fb938f157bacc5fa580bd4bf214b2e5ba8978933" translate="yes" xml:space="preserve">
          <source>A block known to be a closure, but which omits its arguments, is given this placeholder. A subsequent pass is responsible for deciding if there is an implicit 'it' parameter, or if the parameter list should be empty.</source>
          <target state="translated">一个已知是闭包的块,但省略了它的参数,会被赋予这个占位符。后续的传递负责决定是否有一个隐含的 &quot;it &quot;参数,或者参数列表是否应该为空。</target>
        </trans-unit>
        <trans-unit id="5e7e177d0e4a44e781de4177c17add50be93f60b" translate="yes" xml:space="preserve">
          <source>A block which is known to be a closure, even if it has no apparent arguments.</source>
          <target state="translated">一个已知是闭合的块,即使它没有明显的参数。</target>
        </trans-unit>
        <trans-unit id="ce9c6083e0df0459f211e7fea14bc499d3713183" translate="yes" xml:space="preserve">
          <source>A block which is known to be a closure, even if it has no apparent arguments. A block inside an expression or after a method call is always assumed to be a closure. Only labeled, unparameterized blocks which occur directly as substatements are kept open.</source>
          <target state="translated">一个已知是闭包的块,即使它没有明显的参数。表达式中的块或方法调用后的块总是被认为是一个闭包。只有那些直接作为子语句出现的有标签的、无参数的块才会被打开。</target>
        </trans-unit>
        <trans-unit id="3debea91d4d8aa1001768022daabbdaeb69ff2fa" translate="yes" xml:space="preserve">
          <source>A boolean indicating that the 'postDir' closure should be applied at the root level</source>
          <target state="translated">表示'postDir'关闭应该在根级应用的布尔值。</target>
        </trans-unit>
        <trans-unit id="a4d177f6cd82fccf94d7b6d8c3b9047221c4e6be" translate="yes" xml:space="preserve">
          <source>A boolean indicating that the 'preDir' closure should be applied at the root level</source>
          <target state="translated">表示 &quot;preDir &quot;闭合应该在根级应用的布尔值。</target>
        </trans-unit>
        <trans-unit id="a578b275a5c139722151e0564e5115f94f8c403e" translate="yes" xml:space="preserve">
          <source>A boolean indicating that the given closure should be applied for the root dir (not applicable if the 'type' is set to &lt;a href=&quot;../../../../../groovy/io/filetype#FILES&quot;&gt;FileType.FILES&lt;/a&gt;)</source>
          <target state="translated">一个布尔值，指示应将给定的闭包应用于根目录（如果'type'设置为&lt;a href=&quot;../../../../../groovy/io/filetype#FILES&quot;&gt;FileType.FILES，&lt;/a&gt;则不适用）</target>
        </trans-unit>
        <trans-unit id="5328f178753d4310ec4d318e73ba1fbb92e83585" translate="yes" xml:space="preserve">
          <source>A boolean indicating that the given closure should be applied for the root dir (not applicable if the 'type' is set to &lt;a href=&quot;../../../../groovy/io/filetype#FILES&quot;&gt;FileType.FILES&lt;/a&gt;)</source>
          <target state="translated">一个布尔值，指示应将给定的闭包应用于根目录（如果'type'设置为&lt;a href=&quot;../../../../groovy/io/filetype#FILES&quot;&gt;FileType.FILES，&lt;/a&gt;则不适用）</target>
        </trans-unit>
        <trans-unit id="84ee8c24cc80e5e3a91a6ff9f6614bf6c39d00ed" translate="yes" xml:space="preserve">
          <source>A buffered writer only for OutputStreamWriter that is aware of the encoding of the OutputStreamWriter.</source>
          <target state="translated">一个只针对OutputStreamWriter的缓冲写入器,它知道OutputStreamWriter的编码。</target>
        </trans-unit>
        <trans-unit id="0dd21d2430d8af1b08f9a63961a95473e1aeacdf" translate="yes" xml:space="preserve">
          <source>A buffered writer that gobbles any \r characters and replaces every \n with a platform specific newline. In many places Groovy normalises streams to only have \n characters but when creating files that must be used by other platform-aware tools, you sometimes want the newlines to match what the platform expects.</source>
          <target state="translated">一个缓冲写入器,它可以吞噬所有的 \r字符,并将每一个 \n替换为一个平台特定的换行。在很多地方,Groovy都会将流的字符规范化,只有\n字符,但当创建的文件必须被其他平台感知工具使用时,你有时会希望换行符合平台的期望。</target>
        </trans-unit>
        <trans-unit id="37071e36361dd207b80ec80f4c631c9db0ba8e9b" translate="yes" xml:space="preserve">
          <source>A builder class for creating XML markup. This implementation uses a &lt;a href=&quot;streamingmarkupsupport/streamingmarkupwriter&quot;&gt;StreamingMarkupWriter&lt;/a&gt; to handle output.</source>
          <target state="translated">用于创建XML标记的构建器类。此实现使用&lt;a href=&quot;streamingmarkupsupport/streamingmarkupwriter&quot;&gt;StreamingMarkupWriter&lt;/a&gt;来处理输出。</target>
        </trans-unit>
        <trans-unit id="196704e265c29ef2ac1f7794c043f7f9d205f783" translate="yes" xml:space="preserve">
          <source>A builder dedicated at generating a file directory structure from a specification. For example, imagine that you want to create the following tree:</source>
          <target state="translated">一个专门用于从规范中生成文件目录结构的构建器。例如,想象一下,你想创建以下的树。</target>
        </trans-unit>
        <trans-unit id="375479847b2624413e0cd539283ac5d83acd4907" translate="yes" xml:space="preserve">
          <source>A builder for creating JSON payloads.</source>
          <target state="translated">一个用于创建JSON有效载荷的构建器。</target>
        </trans-unit>
        <trans-unit id="22bda7e88b9aa6053fe68668e4c3ae3c1551e12e" translate="yes" xml:space="preserve">
          <source>A builder for creating YAML payloads.</source>
          <target state="translated">一个用于创建YAML有效载荷的构建器。</target>
        </trans-unit>
        <trans-unit id="c8fd4f81972be3a185ba0e294f3b58b4dea7c2e3" translate="yes" xml:space="preserve">
          <source>A builder for creating object graphs.</source>
          <target state="translated">一个用于创建对象图的构建器。</target>
        </trans-unit>
        <trans-unit id="f5de7659976ba6471cdf7fc1182f63c9df8c945e" translate="yes" xml:space="preserve">
          <source>A builder for generating W3C SAX events. Use similar to MarkupBuilder.</source>
          <target state="translated">一个用于生成W3C SAX事件的构建器。使用类似于MarkupBuilder。</target>
        </trans-unit>
        <trans-unit id="2f57815a92a966f2712008f3675834dca3895962" translate="yes" xml:space="preserve">
          <source>A builder that creates &lt;a href=&quot;concurrentlinkedhashmap&quot;&gt;ConcurrentLinkedHashMap&lt;/a&gt; instances.</source>
          <target state="translated">一个创建&lt;a href=&quot;concurrentlinkedhashmap&quot;&gt;ConcurrentLinkedHashMap&lt;/a&gt;实例的生成器。</target>
        </trans-unit>
        <trans-unit id="2123d04e60e48402ec738ff707152866443653f4" translate="yes" xml:space="preserve">
          <source>A builder that creates &lt;a href=&quot;concurrentlinkedhashmap&quot;&gt;ConcurrentLinkedHashMap&lt;/a&gt; instances. It provides a flexible approach for constructing customized instances with a named parameter syntax. It can be used in the following manner:</source>
          <target state="translated">一个创建&lt;a href=&quot;concurrentlinkedhashmap&quot;&gt;ConcurrentLinkedHashMap&lt;/a&gt;实例的生成器。它为使用命名参数语法构造自定义实例提供了一种灵活的方法。可以按以下方式使用它：</target>
        </trans-unit>
        <trans-unit id="d7086f0d376b5977165946afd68e60a54af78baf" translate="yes" xml:space="preserve">
          <source>A builder used to construct a &lt;a href=&quot;jsongenerator&quot;&gt;JsonGenerator&lt;/a&gt; instance that allows control over the serialized JSON output.</source>
          <target state="translated">用于构建&lt;a href=&quot;jsongenerator&quot;&gt;JsonGenerator&lt;/a&gt;实例的构建器，该实例允许控制序列化的JSON输出。</target>
        </trans-unit>
        <trans-unit id="abe5c7c988db10802afe3415166036ee9f84951c" translate="yes" xml:space="preserve">
          <source>A builder used to construct a &lt;a href=&quot;jsongenerator&quot;&gt;JsonGenerator&lt;/a&gt; instance that allows control over the serialized JSON output. If you do not need to customize the output it is recommended to use the static &lt;code&gt;JsonOutput.toJson&lt;/code&gt; methods.</source>
          <target state="translated">用于构建&lt;a href=&quot;jsongenerator&quot;&gt;JsonGenerator&lt;/a&gt;实例的构建器，该实例允许控制序列化的JSON输出。如果不需要自定义输出，建议使用静态 &lt;code&gt;JsonOutput.toJson&lt;/code&gt; 方法。</target>
        </trans-unit>
        <trans-unit id="02debaca81049ecaec7f5e501ea8dfbf14115ca9" translate="yes" xml:space="preserve">
          <source>A builder which allows easy configuration of compilation customizers. Instead of creating various compilation customizers by hand, you may use this builder instead, which provides a shorter syntax and removes most of the verbosity.</source>
          <target state="translated">一个允许轻松配置编译自定义器的构建器。你可以使用这个构建器代替手工创建各种编译自定义器,它提供了一个更短的语法,并消除了大部分的啰嗦。</target>
        </trans-unit>
        <trans-unit id="9c4fbcaf0f1b873f500e728918c1ca7508542115" translate="yes" xml:space="preserve">
          <source>A byte buffer of 4KB is used to be able to guess the encoding.</source>
          <target state="translated">4KB的字节缓冲区用于能够猜测编码。</target>
        </trans-unit>
        <trans-unit id="12f8a1287471c3bc65b0f2e80645b0cafde34312" translate="yes" xml:space="preserve">
          <source>A cache backed by a ConcurrentHashMap</source>
          <target state="translated">一个由ConcurrentHashMap支持的缓存。</target>
        </trans-unit>
        <trans-unit id="854b4649f99354918b58d3cb8aa70c9af072f444" translate="yes" xml:space="preserve">
          <source>A cache backed by a ConcurrentLinkedHashMap</source>
          <target state="translated">一个由并发LinkedHashMap支持的缓存。</target>
        </trans-unit>
        <trans-unit id="3d0acbc6b9ed9f4bfe1fd949da2f9f8e5b9c5fe4" translate="yes" xml:space="preserve">
          <source>A call site writer which replaces call site caching with static calls. This means that the generated code looks more like Java code than dynamic Groovy code. Best effort is made to use JVM instructions instead of calls to helper methods.</source>
          <target state="translated">一个用静态调用代替调用站点缓存的调用站点编写器。这意味着生成的代码看起来更像Java代码,而不是动态Groovy代码。尽最大努力使用JVM指令,而不是调用助记方法。</target>
        </trans-unit>
        <trans-unit id="ea2c8bb5c597f9376baff57734bb71adc0b6c144" translate="yes" xml:space="preserve">
          <source>A call-back notification that the entry was evicted.</source>
          <target state="translated">回电通知该条目被驱逐。</target>
        </trans-unit>
        <trans-unit id="644874c9963d199cefe921b6c8846031fd98c485" translate="yes" xml:space="preserve">
          <source>A callback for use during &lt;a href=&quot;#classgen&quot;&gt;classgen&lt;/a&gt;</source>
          <target state="translated">在&lt;a href=&quot;#classgen&quot;&gt;classgen&lt;/a&gt;期间使用的回调</target>
        </trans-unit>
        <trans-unit id="7a2ebf8813642b6b3333996d45d6f16d4bbd40f0" translate="yes" xml:space="preserve">
          <source>A callback for use during &lt;a href=&quot;#compile()&quot;&gt;compile()&lt;/a&gt;</source>
          <target state="translated">在&lt;a href=&quot;#compile()&quot;&gt;compile（）中&lt;/a&gt;使用的回调</target>
        </trans-unit>
        <trans-unit id="9a54c8114e2bc142a9fbf71fdf7340c2a3930417" translate="yes" xml:space="preserve">
          <source>A callback interface you can use to &quot;accompany&quot; the classgen() code as it traverses the ClassNode tree.</source>
          <target state="translated">一个回调接口,你可以用它来 &quot;伴随 &quot;classgen()代码遍历ClassNode树。</target>
        </trans-unit>
        <trans-unit id="de71b888e5c52d859660038334ef3ad59c87ef68" translate="yes" xml:space="preserve">
          <source>A callback interface you can use to &quot;accompany&quot; the classgen() code as it traverses the ClassNode tree. You will be called-back for each primary and inner class. Use setClassgenCallback() before running compile() to set your callback.</source>
          <target state="translated">您可以使用回调接口来 &quot;伴随 &quot;classgen()代码遍历ClassNode树。你将为每个主类和内部类被回调。在运行编译()之前使用setClassgenCallback()来设置你的回调。</target>
        </trans-unit>
        <trans-unit id="88f7c07aeb48e979059dc8a6899a5baa06674f94" translate="yes" xml:space="preserve">
          <source>A callback interface you can use to get a callback after every unit of the compile process.</source>
          <target state="translated">一个回调接口,你可以用来在编译过程的每一个单元后获得一个回调。</target>
        </trans-unit>
        <trans-unit id="d4d98a3f5e07706f35330ba6e0e592bad7f828c4" translate="yes" xml:space="preserve">
          <source>A callback interface you can use to get a callback after every unit of the compile process. You will be called-back with a ProcessingUnit and a phase indicator. Use setProgressCallback() before running compile() to set your callback.</source>
          <target state="translated">一个回调接口,你可以用来在编译过程的每个单元之后获得一个回调。你将被回调一个ProcessingUnit和一个相位指示器。在运行compile()之前使用setProgressCallback()来设置你的回调。</target>
        </trans-unit>
        <trans-unit id="067d24d81479f807a1014375e849b0fc43f9fd21" translate="yes" xml:space="preserve">
          <source>A candidate as String with additional jansi formatting codes</source>
          <target state="translated">候选者为字符串,带有附加的jansi格式化代码。</target>
        </trans-unit>
        <trans-unit id="61ed5940f3224898a6105bd2be2e5e7f010a5d81" translate="yes" xml:space="preserve">
          <source>A character range using regex-style syntax can also be used, e.g. here is an example which converts a word from lower to uppercase:</source>
          <target state="translated">也可以使用 regex 风格的语法来确定字符范围,例如,这里的例子是将一个词从小写字母转换为大写字母。</target>
        </trans-unit>
        <trans-unit id="059044ec3bb5a6939464bea2ab4820ab7bcd105b" translate="yes" xml:space="preserve">
          <source>A class annotation used to make a class Comparable by (potentially) multiple Comparators. As an example, given this class:</source>
          <target state="translated">一个类注解,用于使一个类可以通过(潜在的)多个比较器进行比较。举个例子,给定这个类。</target>
        </trans-unit>
        <trans-unit id="d482b966db2a339120466d6a90e54f9ddacfa88a" translate="yes" xml:space="preserve">
          <source>A class capturing the builder strategy</source>
          <target state="translated">一个捕捉建造者策略的类</target>
        </trans-unit>
        <trans-unit id="ec6b4d6602a85224decd4c2fa49138768c5e96e4" translate="yes" xml:space="preserve">
          <source>A class code visitor which is capable of remembering the context of the current visit. This makes it easier for subclasses to perform context-dependent transformations, where for example it is necessary to check the parent nodes of an AST node before performing some operations.</source>
          <target state="translated">一个类代码访问者,它能够记住当前访问的上下文。这使得子类更容易执行与上下文相关的转换,例如在执行一些操作之前,需要检查AST节点的父节点。</target>
        </trans-unit>
        <trans-unit id="e421e80cc621ea7e2efbcf9a601ecbee03559d3f" translate="yes" xml:space="preserve">
          <source>A class created in this way has the following characteristics:</source>
          <target state="translated">以这种方式创建的类具有以下特征。</target>
        </trans-unit>
        <trans-unit id="f041af2949fc2dc6ca31093e82ad5dc9487602d9" translate="yes" xml:space="preserve">
          <source>A class created using &lt;code&gt;@Canonical&lt;/code&gt; has the following characteristics:</source>
          <target state="translated">使用 &lt;code&gt;@Canonical&lt;/code&gt; 创建的类具有以下特征：</target>
        </trans-unit>
        <trans-unit id="48d605b677136b279aa9574f053805b90628e3fe" translate="yes" xml:space="preserve">
          <source>A class for error messages produced by the parser system.</source>
          <target state="translated">解析器系统产生错误信息的类。</target>
        </trans-unit>
        <trans-unit id="2e808628828fa2bc8ab45c44ca17289994c34660" translate="yes" xml:space="preserve">
          <source>A class for warning messages.</source>
          <target state="translated">一个警告信息的类。</target>
        </trans-unit>
        <trans-unit id="1cc5d6a0e6cd81beff0d8c2780f17c319912a9e8" translate="yes" xml:space="preserve">
          <source>A class for which builder methods should be created.</source>
          <target state="translated">一个应该为其创建构建器方法的类。</target>
        </trans-unit>
        <trans-unit id="0a1e104c8712a2a0acc1a5ef59a9415236c252a3" translate="yes" xml:space="preserve">
          <source>A class for which builder methods should be created. It will be an error to leave this attribute with its default value for some strategies.</source>
          <target state="translated">一个应该为其创建构建方法的类。对于某些策略来说,如果将此属性的默认值保留,将是一个错误。</target>
        </trans-unit>
        <trans-unit id="940968f0ce94de3c0b3756a58c5d3e3c6cc29139" translate="yes" xml:space="preserve">
          <source>A class that can determine the weight of a value. The total weight threshold is used to determine when an eviction is required.</source>
          <target state="translated">一个可以确定数值权重的类。总权重阈值用于确定何时需要驱逐。</target>
        </trans-unit>
        <trans-unit id="4e2b3cbbc8ed3ef9ade05a9c7641dd6403d50631" translate="yes" xml:space="preserve">
          <source>A class that can determine the weight of an entry. The total weight threshold is used to determine when an eviction is required.</source>
          <target state="translated">一类可以决定一个条目的权重。总重量阈值用于确定何时需要驱逐。</target>
        </trans-unit>
        <trans-unit id="078fc19a5cb4c4896c0c4acd76c2f24b8006114f" translate="yes" xml:space="preserve">
          <source>A class to write out the optimized statements.</source>
          <target state="translated">一个写出优化语句的类。</target>
        </trans-unit>
        <trans-unit id="d26edf4a7eab2a2fc04dfbcc55ea8f18f539ab42" translate="yes" xml:space="preserve">
          <source>A closure hint class is responsible for generating the list of arguments that a closure accepts. Since closures may accept several signatures, &lt;a href=&quot;#getClosureSignatures(org.codehaus.groovy.ast.MethodNode,%20org.codehaus.groovy.control.SourceUnit,%20org.codehaus.groovy.control.CompilationUnit,%20java.lang.String,%20org.codehaus.groovy.ast.ASTNode)&quot;&gt;getClosureSignatures(org.codehaus.groovy.ast.MethodNode, org.codehaus.groovy.control.SourceUnit, org.codehaus.groovy.control.CompilationUnit, String[], org.codehaus.groovy.ast.ASTNode)&lt;/a&gt; should return a list.</source>
          <target state="translated">闭包提示类负责生成闭包接受的参数列表。由于闭包可以接受多个签名，因此&lt;a href=&quot;#getClosureSignatures(org.codehaus.groovy.ast.MethodNode,%20org.codehaus.groovy.control.SourceUnit,%20org.codehaus.groovy.control.CompilationUnit,%20java.lang.String,%20org.codehaus.groovy.ast.ASTNode)&quot;&gt;getClosureSignatures（org.codehaus.groovy.ast.MethodNode，org.codehaus.groovy.control.SourceUnit，org.codehaus.groovy.control.CompilationUnit，String []，org.codehaus.groovy.ast .ASTNode）&lt;/a&gt;应返回一个列表。</target>
        </trans-unit>
        <trans-unit id="cff63fd5f380f97ce837ee8dd95a813c5b3760fb" translate="yes" xml:space="preserve">
          <source>A closure parameter hint class that is convenient if you want to use a String representation of the signature. It makes use of the &lt;a href=&quot;closureparams#options()&quot;&gt;option strings&lt;/a&gt;, where each string corresponds to a single signature.</source>
          <target state="translated">一个闭包参数提示类，如果要使用签名的String表示形式，则很方便。它利用了&lt;a href=&quot;closureparams#options()&quot;&gt;选项字符串&lt;/a&gt;，其中每个字符串都对应一个签名。</target>
        </trans-unit>
        <trans-unit id="b94071c00924ccbd6cbd1898f7ce813d51c291c7" translate="yes" xml:space="preserve">
          <source>A closure passed to a JSON builder will create a root JSON object</source>
          <target state="translated">传递给JSON构建器的闭包将创建一个根JSON对象。</target>
        </trans-unit>
        <trans-unit id="7e0b5a3c5396eabc3c8a6e082178916100cae060" translate="yes" xml:space="preserve">
          <source>A closure passed to a YAML builder will create a root YAML object</source>
          <target state="translated">传递给YAML构建器的闭包将创建一个根YAML对象。</target>
        </trans-unit>
        <trans-unit id="4d5554976b4a729557fa907dd94fe3a9dfe14c9d" translate="yes" xml:space="preserve">
          <source>A closure signature hint class is always used in conjunction with the &lt;a href=&quot;closureparams&quot;&gt;ClosureParams&lt;/a&gt; annotation. It is called at compile time (or may be used by IDEs) to infer the types of the parameters of a &lt;a href=&quot;../../lang/closure&quot;&gt;Closure&lt;/a&gt;.</source>
          <target state="translated">闭包签名提示类始终与&lt;a href=&quot;closureparams&quot;&gt;ClosureParams&lt;/a&gt;批注结合使用。在编译时调用它（或可以由IDE使用）以推断&lt;a href=&quot;../../lang/closure&quot;&gt;Closure&lt;/a&gt;的参数类型。</target>
        </trans-unit>
        <trans-unit id="d4df2359d44e5af1c5e761acfa85bf7927d7ba22" translate="yes" xml:space="preserve">
          <source>A closure that takes a single String parameter and returns an object converted to the &lt;code&gt;type&lt;/code&gt; of this option. The picocli equivalent is the &lt;code&gt;&lt;a href=&quot;http://picocli.info/#_custom_type_converters&quot;&gt;ITypeConverter&lt;/a&gt;&lt;/code&gt; interface.</source>
          <target state="translated">一个采用单个String参数并返回一个转换为此选项 &lt;code&gt;type&lt;/code&gt; 的对象的闭包。与picocli等效的是 &lt;code&gt;&lt;a href=&quot;http://picocli.info/#_custom_type_converters&quot;&gt;ITypeConverter&lt;/a&gt;&lt;/code&gt; 接口。</target>
        </trans-unit>
        <trans-unit id="e6af97a4ec04c4dd66bb788eddff15eb498de448" translate="yes" xml:space="preserve">
          <source>A closure which is executed against the annotated node after the specified phase has completed.</source>
          <target state="translated">在指定阶段完成后,针对注释节点执行的闭合。</target>
        </trans-unit>
        <trans-unit id="563b840d5553c0f9fab7d8186fc13f31d7237534" translate="yes" xml:space="preserve">
          <source>A closure which stores calls in a List so that method calls can be iterated over in a 'yield' style way</source>
          <target state="translated">一个将调用存储在List中的闭包,这样方法调用就可以以'yield'的方式进行迭代。</target>
        </trans-unit>
        <trans-unit id="c1f5d6ca9918c4630bceceb50107b9806ba25cce" translate="yes" xml:space="preserve">
          <source>A closure, which will execute the original closure on a trampoline.</source>
          <target state="translated">闭合,会在蹦床上执行原始闭合。</target>
        </trans-unit>
        <trans-unit id="df413fa404270092b052f30f111cb0830fed3645" translate="yes" xml:space="preserve">
          <source>A collection and closure passed to a JSON builder will create a root JSON array applying the closure to each object in the collection</source>
          <target state="translated">传递给JSON构建器的集合和闭包将创建一个根JSON数组,并将闭包应用于集合中的每个对象。</target>
        </trans-unit>
        <trans-unit id="f1b011fdf8e346e11e590935a91934ae7823ede4" translate="yes" xml:space="preserve">
          <source>A collection and closure passed to a YAML builder will create a root YAML array applying the closure to each object in the collection</source>
          <target state="translated">传递给YAML构建器的集合和闭包将创建一个根YAML数组,将闭包应用于集合中的每个对象。</target>
        </trans-unit>
        <trans-unit id="dcfdfde3961f78ebf08a0db2ff9de1d891ed5d3b" translate="yes" xml:space="preserve">
          <source>A collection of utility methods used to deal with traits.</source>
          <target state="translated">用于处理特征的实用方法的集合。</target>
        </trans-unit>
        <trans-unit id="0d503c58ebfaf207a26b9e19cbb2c8d140ae9b38" translate="yes" xml:space="preserve">
          <source>A colon-separated list of filename extensions to look for when searching for files to process in a given directory.</source>
          <target state="translated">当在给定目录中搜索要处理的文件时,要查找的以冒号分隔的文件名扩展名列表。</target>
        </trans-unit>
        <trans-unit id="d3805c04fd9a5091d93fb4b4726882770ba99c70" translate="yes" xml:space="preserve">
          <source>A colon-separated list of filename extensions to look for when searching for files to process in a given directory. Default value: &lt;code&gt;.java:.groovy:.gv:.gvy:.gsh&lt;/code&gt;</source>
          <target state="translated">在搜索要在给定目录中处理的文件时要查找的文件名扩展名，以冒号分隔的列表。预设值： &lt;code&gt;.java:.groovy:.gv:.gvy:.gsh&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="b370c3389f462e46184d60293fba05f31fb24bc2" translate="yes" xml:space="preserve">
          <source>A common base class of AST helper methods which can be shared across the classic and new parsers</source>
          <target state="translated">可以在经典和新的解析器中共享的AST帮助方法的共同基础类。</target>
        </trans-unit>
        <trans-unit id="3f814b778381e7323260fdbd75e768829ede9a78" translate="yes" xml:space="preserve">
          <source>A common set of &lt;a href=&quot;weigher&quot;&gt;Weigher&lt;/a&gt; and &lt;a href=&quot;entryweigher&quot;&gt;EntryWeigher&lt;/a&gt; implementations.</source>
          <target state="translated">一组常见的&lt;a href=&quot;weigher&quot;&gt;Weigher&lt;/a&gt;和&lt;a href=&quot;entryweigher&quot;&gt;EntryWeigher&lt;/a&gt;实现。</target>
        </trans-unit>
        <trans-unit id="fb52df3c6e187dbbea466a817c82dfbd0713d61f" translate="yes" xml:space="preserve">
          <source>A completer within compatible strings (single/double quotes, single/double triple quotes) showing informational alternatives that can occur after the backslash escape character. No completion occurs and the cursor remains where it is.</source>
          <target state="translated">在兼容字符串(单引号/双引号,单引号/双引号三引号)中的补全器,显示了在反斜杠转义字符之后可能出现的信息选择。不发生补全,光标保持原样。</target>
        </trans-unit>
        <trans-unit id="40e56aff842cabfd79cd2de422fbf8843cc0a71f" translate="yes" xml:space="preserve">
          <source>A composite of the supplied list of antlr AST visitors.</source>
          <target state="translated">提供的antlr AST访客名单的综合。</target>
        </trans-unit>
        <trans-unit id="6f7561c90678f1159a480ccea2b59622d391b873" translate="yes" xml:space="preserve">
          <source>A constructor call.</source>
          <target state="translated">一个构造函数的调用。</target>
        </trans-unit>
        <trans-unit id="0c9f6f925d0b7e0e574913d5bfef63ff50107189" translate="yes" xml:space="preserve">
          <source>A context shared across generations of a class and its inner classes</source>
          <target state="translated">一个类及其内部类的各代人共享的上下文。</target>
        </trans-unit>
        <trans-unit id="e0ed530022b745739d66e33a7e6292627f936e74" translate="yes" xml:space="preserve">
          <source>A convenience for getting a default configuration.</source>
          <target state="translated">为获取默认配置提供方便。</target>
        </trans-unit>
        <trans-unit id="70121d7e5d5156cadb2495e7114ac985f146601b" translate="yes" xml:space="preserve">
          <source>A convenience for getting a default configuration. Do not modify it! See &lt;a href=&quot;#CompilerConfiguration(java.util.Properties)&quot;&gt;CompilerConfiguration(Properties)&lt;/a&gt; for an example on how to make a suitable copy to modify. But if you're really starting from a default context, then you probably just want &lt;code&gt;new CompilerConfiguration()&lt;/code&gt;.</source>
          <target state="translated">获得默认配置的便利。不要修改它！有关如何制作合适的副本进行修改的示例，请参见&lt;a href=&quot;#CompilerConfiguration(java.util.Properties)&quot;&gt;CompilerConfiguration（Properties）&lt;/a&gt;。但是，如果您实际上是从默认上下文开始的，那么您可能只需要 &lt;code&gt;new CompilerConfiguration()&lt;/code&gt; 即可。</target>
        </trans-unit>
        <trans-unit id="6120b337ca9056a57ecfd755785b3fa91bc9a3b8" translate="yes" xml:space="preserve">
          <source>A convenience front end for getting standard compilations done. All compile() routines generate classes to the filesystem.</source>
          <target state="translated">一个方便的前端,用于完成标准编译。所有的编译()例程都会生成类到文件系统中。</target>
        </trans-unit>
        <trans-unit id="88bc7fc40e07517fd61791abbdaa4f144102be6a" translate="yes" xml:space="preserve">
          <source>A convenience method for creating a synchronized Collection.</source>
          <target state="translated">一个创建同步Collection的方便方法。</target>
        </trans-unit>
        <trans-unit id="1ed10e3150852e021677b80e1e84b42c685f5e8f" translate="yes" xml:space="preserve">
          <source>A convenience method for creating a synchronized List.</source>
          <target state="translated">一个创建同步List的方便方法。</target>
        </trans-unit>
        <trans-unit id="82d4dfefd43edec63b5485ceb18e957059a3f4eb" translate="yes" xml:space="preserve">
          <source>A convenience method for creating a synchronized Map.</source>
          <target state="translated">一个创建同步Map的方便方法。</target>
        </trans-unit>
        <trans-unit id="1e94f4829d4dcd63e1c679bcb34187f4ca8ba0c1" translate="yes" xml:space="preserve">
          <source>A convenience method for creating a synchronized Set.</source>
          <target state="translated">一种创建同步Set的方便方法。</target>
        </trans-unit>
        <trans-unit id="c4e801b12f994764eb304c2f9c6abe12b22609ee" translate="yes" xml:space="preserve">
          <source>A convenience method for creating a synchronized SortedMap.</source>
          <target state="translated">一个创建同步SortedMap的方便方法。</target>
        </trans-unit>
        <trans-unit id="fed5927bc30ac8c98de179055e3d3f71391549d7" translate="yes" xml:space="preserve">
          <source>A convenience method for creating a synchronized SortedSet.</source>
          <target state="translated">一个用于创建同步SortedSet的方便方法。</target>
        </trans-unit>
        <trans-unit id="a713e87d51139260227ee98381677bb3e4ac1c2d" translate="yes" xml:space="preserve">
          <source>A convenience method for creating an immutable Collection.</source>
          <target state="translated">一个方便的方法,用于创建一个不可变的集合。</target>
        </trans-unit>
        <trans-unit id="664a6f846cb064ed39dabd14364cc6b447ce7d66" translate="yes" xml:space="preserve">
          <source>A convenience method for creating an immutable List.</source>
          <target state="translated">一个方便的方法,用于创建一个不可变的List。</target>
        </trans-unit>
        <trans-unit id="05d98c5b90b5b49432d3de1b3e3d08a0c5cc0f79" translate="yes" xml:space="preserve">
          <source>A convenience method for creating an immutable Map.</source>
          <target state="translated">一个方便的方法,用于创建一个不可变的Map。</target>
        </trans-unit>
        <trans-unit id="5cd220e19cd7507f820298e51e6fe49d094c07d6" translate="yes" xml:space="preserve">
          <source>A convenience method for creating an immutable Set.</source>
          <target state="translated">一个创建不可变集的方便方法。</target>
        </trans-unit>
        <trans-unit id="bdae694066e5935a0162ff468ecef4b4e4896dc6" translate="yes" xml:space="preserve">
          <source>A convenience method for creating an immutable SortedMap.</source>
          <target state="translated">用于创建一个不可变的SortedMap的方便方法。</target>
        </trans-unit>
        <trans-unit id="3019886ebe4a3cc3132b04150a9df2b6eaf37b4c" translate="yes" xml:space="preserve">
          <source>A convenience method for creating an immutable SortedSet.</source>
          <target state="translated">用于创建一个不可变的SortedSet的方便方法。</target>
        </trans-unit>
        <trans-unit id="f14fcdc5e8014c9b44e08bb36d6572cb9a20794b" translate="yes" xml:space="preserve">
          <source>A convenience method for making a List unique using a Closure to determine duplicate (equal) items.</source>
          <target state="translated">一个方便的方法,使用Closure来确定重复(相等)的项目,使List变得独一无二。</target>
        </trans-unit>
        <trans-unit id="6f9387902417cbe370094d68ddefabc841e2df9c" translate="yes" xml:space="preserve">
          <source>A convenience method for making a List unique using a Closure to determine duplicate (equal) items. If mutate is true, it works on the receiver object and returns it. If mutate is false, a new collection is returned.</source>
          <target state="translated">一个方便的方法,用于使用Closure来确定重复(相等)的项目,使List变得独一无二。如果mutate为真,它就会在接收器对象上工作并返回它。如果mutate为false,则返回一个新的集合。</target>
        </trans-unit>
        <trans-unit id="9380d5542f660c159911db19e127c6dd855dfdff" translate="yes" xml:space="preserve">
          <source>A convenience method for making a collection unique using a Closure to determine duplicate (equal) items.</source>
          <target state="translated">使用Closure来确定重复(相等)的项目,使一个集合成为唯一的方便方法。</target>
        </trans-unit>
        <trans-unit id="d69fd233db45496d6748e496a3eecd5527745f52" translate="yes" xml:space="preserve">
          <source>A convenience method for making a collection unique using a Closure to determine duplicate (equal) items. If mutate is true, it works on the receiver object and returns it. If mutate is false, a new collection is returned.</source>
          <target state="translated">一个方便的方法,用于使用Closure来确定重复(相等)的项目,使一个集合成为唯一。如果mutate为真,它就会在接收器对象上工作并返回它。如果mutate为false,则返回一个新的集合。</target>
        </trans-unit>
        <trans-unit id="b19ed6137086dcade9af394c0637d066771c35b8" translate="yes" xml:space="preserve">
          <source>A convenience routine to create a standalone SourceUnit on a String with defaults for almost everything that is configurable.</source>
          <target state="translated">一个方便的例程,用于在一个字符串上创建一个独立的SourceUnit,几乎所有的配置都是默认的。</target>
        </trans-unit>
        <trans-unit id="2476e5d547ee6ff3aedaf114a440db58f3200b7f" translate="yes" xml:space="preserve">
          <source>A conversion closure to convert the incoming String into the desired object</source>
          <target state="translated">一个转换闭环,用于将输入的String转换为所需对象。</target>
        </trans-unit>
        <trans-unit id="c1dc77d2d47613ba6d742e0c90d5669e1b6a7fce" translate="yes" xml:space="preserve">
          <source>A converter for converting YAML to JSON, vice versa</source>
          <target state="translated">一个将YAML转换为JSON的转换器,反之亦然。</target>
        </trans-unit>
        <trans-unit id="b0c1e4c37af3456fcac8586639fbdd350f0dd7d2" translate="yes" xml:space="preserve">
          <source>A converter that handles converting a given type using a closure.</source>
          <target state="translated">一个使用闭包处理转换给定类型的转换器。</target>
        </trans-unit>
        <trans-unit id="98b3a1922235c40f7f9b0175565038a158e66e4b" translate="yes" xml:space="preserve">
          <source>A custom exception class to flag template execution errors</source>
          <target state="translated">一个自定义的异常类,用于标记模板执行错误</target>
        </trans-unit>
        <trans-unit id="7a73f45add4cd30eb722b295c235ecf078e91088" translate="yes" xml:space="preserve">
          <source>A custom exception class to flag template parsing errors</source>
          <target state="translated">一个自定义的异常类,用于标记模板解析错误。</target>
        </trans-unit>
        <trans-unit id="00eee0a2c9ccb20310602adc0b278a83155fe20d" translate="yes" xml:space="preserve">
          <source>A declaration is the creation of a reference or primitive-type variable, or (if arguments are present) of a method.</source>
          <target state="translated">声明是创建一个引用或基元型变量,或者(如果有参数)一个方法。</target>
        </trans-unit>
        <trans-unit id="80ed451e75c5c0cdbf65f83560e22c1833daea5e" translate="yes" xml:space="preserve">
          <source>A declaration is the creation of a reference or primitive-type variable, or (if arguments are present) of a method. Generically, this is called a 'variable' definition, even in the case of a class field or method. It may start with the modifiers and/or a declaration keyword &quot;def&quot;. It may also start with the modifiers and a capitalized type name.</source>
          <target state="translated">声明是指创建一个引用或基元型变量,或者(如果有参数)一个方法。一般来说,这被称为 &quot;变量 &quot;定义,即使是在类字段或方法的情况下。它可以以修饰符和/或声明关键字 &quot;def &quot;开始。它也可以以修饰符和大写的类型名开始。</target>
        </trans-unit>
        <trans-unit id="b59a55812df24ebb2e0abda390b3902c61dcd63b" translate="yes" xml:space="preserve">
          <source>A declaration with one declarator and no initialization, like a parameterDeclaration.</source>
          <target state="translated">一个只有一个声明者,没有初始化的声明,就像一个参数声明。</target>
        </trans-unit>
        <trans-unit id="46ad78483e607986854284931bc2418644cf417d" translate="yes" xml:space="preserve">
          <source>A declaration with one declarator and no initialization, like a parameterDeclaration. Used to parse loops like &lt;code&gt;for (int x in y)&lt;/code&gt; (up to the &lt;code&gt;in&lt;/code&gt; keyword).</source>
          <target state="translated">带有一个声明符且没有初始化的声明，例如parameterDeclaration。用于解析 &lt;code&gt;for (int x in y)&lt;/code&gt; 类的循环（最多使用 &lt;code&gt;in&lt;/code&gt; 关键字）。</target>
        </trans-unit>
        <trans-unit id="c1ff4388f500955eeae3a9d8ab0e7a0829030996" translate="yes" xml:space="preserve">
          <source>A declaration with one declarator and optional initialization, like a parameterDeclaration.</source>
          <target state="translated">一个有一个声明者和可选的初始化的声明,就像一个参数声明。</target>
        </trans-unit>
        <trans-unit id="c93dbb4659ab7de7f3b9939bde8104ca1592ae57" translate="yes" xml:space="preserve">
          <source>A declaration with one declarator and optional initialization, like a parameterDeclaration. Used to parse declarations used for both binding and effect, in places like argument lists and &lt;code&gt;while&lt;/code&gt; statements.</source>
          <target state="translated">具有一个声明符和可选初始化的声明，例如parameterDeclaration。用于在参数列表和 &lt;code&gt;while&lt;/code&gt; 语句等地方解析用于绑定和效果的声明。</target>
        </trans-unit>
        <trans-unit id="ecc5bd05491c5684a05f77d659cf72ff7a408d74" translate="yes" xml:space="preserve">
          <source>A default action implementation</source>
          <target state="translated">默认行动执行</target>
        </trans-unit>
        <trans-unit id="57a1a035770cab782a9e711cfcc65ba33a1090cd" translate="yes" xml:space="preserve">
          <source>A default implementation of MethodKey</source>
          <target state="translated">MethodKey的默认实现</target>
        </trans-unit>
        <trans-unit id="ee26deb6edda438915ebe8f7fe1be6fcba8fb3ed" translate="yes" xml:space="preserve">
          <source>A default implementation of all visitor methods. If you extend this class, any un-overridden visit methods will call visitDefault.</source>
          <target state="translated">所有访问者方法的默认实现。如果你扩展这个类,任何未被重写的访问方法都会调用visitDefault。</target>
        </trans-unit>
        <trans-unit id="f31a9fa7f23a008b8efb327b5464caddf05f2cab" translate="yes" xml:space="preserve">
          <source>A default table model made up of PropertyModels on a Value model.</source>
          <target state="translated">在Value模型上由PropertyModels组成的默认表模型。</target>
        </trans-unit>
        <trans-unit id="656385d9b00802c05c25dc45bb5d7d42e6f259c1" translate="yes" xml:space="preserve">
          <source>A delimiter to use to qualify completions.</source>
          <target state="translated">用来限定完形的定界符。</target>
        </trans-unit>
        <trans-unit id="d301a0e039a758af5c427534a7e43ab7583fce35" translate="yes" xml:space="preserve">
          <source>A descriptive name of the source unit.</source>
          <target state="translated">源单位的描述性名称;</target>
        </trans-unit>
        <trans-unit id="1805e772b4325e3e34a4b81e23684da773789f6f" translate="yes" xml:space="preserve">
          <source>A descriptive name of the source unit. This name shouldn't be used for controlling the SourceUnit, it is only for error messages and to determine the name of the class for a script.</source>
          <target state="translated">源单元的描述性名称。这个名字不应该用于控制SourceUnit,它只用于错误信息和确定脚本的类名。</target>
        </trans-unit>
        <trans-unit id="28fc3ccf7160975f5e10f8757a09f74dca7e514a" translate="yes" xml:space="preserve">
          <source>A entry weigher backed by the specified weigher.</source>
          <target state="translated">由指定称重器支持的入口称重器。</target>
        </trans-unit>
        <trans-unit id="62a5cc0e5276e625203458d2a2f52e38abc52566" translate="yes" xml:space="preserve">
          <source>A entry weigher backed by the specified weigher. The weight of the value determines the weight of the entry.</source>
          <target state="translated">由指定的称重器支持的条目称重器。值的权重决定了条目的权重。</target>
        </trans-unit>
        <trans-unit id="50023fe5879adf02f50065bd34eb300e74589cf8" translate="yes" xml:space="preserve">
          <source>A entry weigher view of the specified weigher.</source>
          <target state="translated">指定称重器的入口称重器视图。</target>
        </trans-unit>
        <trans-unit id="777d8a3b149b83eb34cc5901b972e432bb2608cf" translate="yes" xml:space="preserve">
          <source>A facade over Java's normal JDBC APIs providing greatly simplified resource management and result set handling. Under the covers the facade hides away details associated with getting connections, constructing and configuring statements, interacting with the connection, closing resources and logging errors. Special features of the facade include using closures to iterate through result sets, a special GString syntax for representing prepared statements and treating result sets like collections of maps with the normal Groovy collection methods available.</source>
          <target state="translated">在Java的普通JDBC APIs上的一个门面,提供了大大简化的资源管理和结果集处理。在其外表下,该面板隐藏了与获取连接、构造和配置语句、与连接交互、关闭资源和记录错误相关的细节。该面板的特殊功能包括使用闭包来迭代结果集,使用特殊的GString语法来表示已准备好的语句,以及使用普通的Groovy集合方法将结果集视为地图的集合。</target>
        </trans-unit>
        <trans-unit id="70227a2d724ec8ef8243a9d6a678e8bbea91c5a7" translate="yes" xml:space="preserve">
          <source>A factory class conforming to JSR-223 which is used to instantiate Groovy &lt;code&gt;ScriptEngines&lt;/code&gt; and also exposes metadata describing Groovy's engine class. Adapted from original by Mike Grogan and A. Sundararajan</source>
          <target state="translated">符合JSR-223的工厂类，该类用于实例化Groovy &lt;code&gt;ScriptEngines&lt;/code&gt; ,并且还公开了描述Groovy引擎类的元数据。改编自Mike Grogan和A.Sundararajan的原著</target>
        </trans-unit>
        <trans-unit id="673613a12ff6982e89cde6a22c889b1f008e1b60" translate="yes" xml:space="preserve">
          <source>A factory of parser plugin instances.</source>
          <target state="translated">一个解析器插件实例的工厂。</target>
        </trans-unit>
        <trans-unit id="63e53ab72a5ce37b78ac4435291d8bd4286e7a85" translate="yes" xml:space="preserve">
          <source>A file name completer takes the buffer and issues a list of potential completions.</source>
          <target state="translated">一个文件名补全器接收缓冲区,并发出一个潜在的补全列表。</target>
        </trans-unit>
        <trans-unit id="ece5f5deadafb2635264d2d3d55d43ac056ccee9" translate="yes" xml:space="preserve">
          <source>A filter to perform on the name of traversed files/directories (using the &lt;a href=&quot;../../../../codehaus/groovy/runtime/defaultgroovymethods#isCase(java.lang.Object,%20java.lang.Object)&quot;&gt;DefaultGroovyMethods.isCase&lt;/a&gt; method). If set, only files/dirs which match are candidates for visiting. (Must not be set if 'filter' is set)</source>
          <target state="translated">对遍历文件/目录的名称执行的过滤器（使用&lt;a href=&quot;../../../../codehaus/groovy/runtime/defaultgroovymethods#isCase(java.lang.Object,%20java.lang.Object)&quot;&gt;DefaultGroovyMethods.isCase&lt;/a&gt;方法）。如果设置，则只有匹配的文件/目录才可以访问。（如果设置了&amp;ldquo;过滤器&amp;rdquo;，则不得设置）</target>
        </trans-unit>
        <trans-unit id="d2c488279760fd22739536b17813dd28876ac6fc" translate="yes" xml:space="preserve">
          <source>A filter to perform on the name of traversed files/directories (using the &lt;a href=&quot;defaultgroovymethods#isCase(java.lang.Object,%20java.lang.Object)&quot;&gt;DefaultGroovyMethods.isCase&lt;/a&gt; method). If set, only files/dirs which match are candidates for visiting. (Must not be set if 'filter' is set)</source>
          <target state="translated">对遍历文件/目录的名称执行的过滤器（使用&lt;a href=&quot;defaultgroovymethods#isCase(java.lang.Object,%20java.lang.Object)&quot;&gt;DefaultGroovyMethods.isCase&lt;/a&gt;方法）。如果设置，则只有匹配的文件/目录才可以访问。（如果设置了&amp;ldquo;过滤器&amp;rdquo;，则不得设置）</target>
        </trans-unit>
        <trans-unit id="6c7dbf40b0e5c0ec871086e7e6a01b397f972122" translate="yes" xml:space="preserve">
          <source>A filter to perform on the names of traversed files/directories (using the &lt;a href=&quot;../../../../codehaus/groovy/runtime/defaultgroovymethods#isCase(java.lang.Object,%20java.lang.Object)&quot;&gt;DefaultGroovyMethods.isCase&lt;/a&gt; method). If set, any candidates which match won't be visited. (Must not be set if 'excludeFilter' is set)</source>
          <target state="translated">一个过滤器，用于对遍历的文件/目录的名称执行（使用&lt;a href=&quot;../../../../codehaus/groovy/runtime/defaultgroovymethods#isCase(java.lang.Object,%20java.lang.Object)&quot;&gt;DefaultGroovyMethods.isCase&lt;/a&gt;方法）。如果设置，则不会访问任何匹配的候选人。（如果设置了&amp;ldquo; excludeFilter&amp;rdquo;，则不得设置）</target>
        </trans-unit>
        <trans-unit id="ad0a76b2769f248f990df087b8f5792f45d89c6e" translate="yes" xml:space="preserve">
          <source>A filter to perform on the names of traversed files/directories (using the &lt;a href=&quot;defaultgroovymethods#isCase(java.lang.Object,%20java.lang.Object)&quot;&gt;DefaultGroovyMethods.isCase&lt;/a&gt; method). If set, any candidates which match won't be visited. (Must not be set if 'excludeFilter' is set)</source>
          <target state="translated">一个过滤器，用于对遍历的文件/目录的名称执行（使用&lt;a href=&quot;defaultgroovymethods#isCase(java.lang.Object,%20java.lang.Object)&quot;&gt;DefaultGroovyMethods.isCase&lt;/a&gt;方法）。如果设置，则不会访问任何匹配的候选人。（如果设置了&amp;ldquo; excludeFilter&amp;rdquo;，则不得设置）</target>
        </trans-unit>
        <trans-unit id="214858a9e7487edd41d69e54c54dd93b1e145ab5" translate="yes" xml:space="preserve">
          <source>A filter to perform on traversed files/directories (using the &lt;a href=&quot;../../../../codehaus/groovy/runtime/defaultgroovymethods#isCase(java.lang.Object,%20java.lang.Object)&quot;&gt;DefaultGroovyMethods.isCase&lt;/a&gt; method). If set, any candidates which match won't be visited.</source>
          <target state="translated">对遍历的文件/目录执行的过滤器（使用&lt;a href=&quot;../../../../codehaus/groovy/runtime/defaultgroovymethods#isCase(java.lang.Object,%20java.lang.Object)&quot;&gt;DefaultGroovyMethods.isCase&lt;/a&gt;方法）。如果设置，则不会访问任何匹配的候选人。</target>
        </trans-unit>
        <trans-unit id="28536e7e06aebc7f874a7778fc6501949cd435ce" translate="yes" xml:space="preserve">
          <source>A filter to perform on traversed files/directories (using the &lt;a href=&quot;../../../../codehaus/groovy/runtime/defaultgroovymethods#isCase(java.lang.Object,%20java.lang.Object)&quot;&gt;DefaultGroovyMethods.isCase&lt;/a&gt; method). If set, only files/dirs which match are candidates for visiting.</source>
          <target state="translated">对遍历的文件/目录执行的过滤器（使用&lt;a href=&quot;../../../../codehaus/groovy/runtime/defaultgroovymethods#isCase(java.lang.Object,%20java.lang.Object)&quot;&gt;DefaultGroovyMethods.isCase&lt;/a&gt;方法）。如果设置，则只有匹配的文件/目录才可以访问。</target>
        </trans-unit>
        <trans-unit id="ec163ebb50ebade16a04ce89e8f9452dbc973800" translate="yes" xml:space="preserve">
          <source>A filter to perform on traversed files/directories (using the &lt;a href=&quot;defaultgroovymethods#isCase(java.lang.Object,%20java.lang.Object)&quot;&gt;DefaultGroovyMethods.isCase&lt;/a&gt; method). If set, any candidates which match won't be visited.</source>
          <target state="translated">对遍历的文件/目录执行的过滤器（使用&lt;a href=&quot;defaultgroovymethods#isCase(java.lang.Object,%20java.lang.Object)&quot;&gt;DefaultGroovyMethods.isCase&lt;/a&gt;方法）。如果设置，则不会访问任何匹配的候选人。</target>
        </trans-unit>
        <trans-unit id="886f57d612097ffc91dde66b6fdc6f6af313df00" translate="yes" xml:space="preserve">
          <source>A filter to perform on traversed files/directories (using the &lt;a href=&quot;defaultgroovymethods#isCase(java.lang.Object,%20java.lang.Object)&quot;&gt;DefaultGroovyMethods.isCase&lt;/a&gt; method). If set, only files/dirs which match are candidates for visiting.</source>
          <target state="translated">对遍历的文件/目录执行的过滤器（使用&lt;a href=&quot;defaultgroovymethods#isCase(java.lang.Object,%20java.lang.Object)&quot;&gt;DefaultGroovyMethods.isCase&lt;/a&gt;方法）。如果设置，则只有匹配的文件/目录才可以访问。</target>
        </trans-unit>
        <trans-unit id="a9175fa564b132eb44558707c3cfe366ecb98ec5" translate="yes" xml:space="preserve">
          <source>A fire method is created for each public method in the target class. In this case, ActionListener only has one method. For a four method interface, four fire methods would be created.</source>
          <target state="translated">为目标类中的每个公共方法创建一个fire方法。在本例中,ActionListener只有一个方法。对于一个四方法接口,将创建四个fire方法。</target>
        </trans-unit>
        <trans-unit id="2db385eead8036a69ca3b4b93e7cc0fa07498d80" translate="yes" xml:space="preserve">
          <source>A formal parameter for a method or closure.</source>
          <target state="translated">一个方法或封闭的形式参数。</target>
        </trans-unit>
        <trans-unit id="5e332bb31edde77e1eabb07df6daea00dd5e8c8b" translate="yes" xml:space="preserve">
          <source>A front-end class for &lt;a href=&quot;../../classgen/asm/expressionasvariableslot&quot;&gt;ExpressionAsVariableSlot&lt;/a&gt; which allows defining temporary variables loaded from variable slots directly at the AST level, without any knowledge of &lt;a href=&quot;../../classgen/asmclassgenerator&quot;&gt;AsmClassGenerator&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;../../classgen/asm/expressionasvariableslot&quot;&gt;ExpressionAsVariableSlot&lt;/a&gt;的前端类，它允许直接在AST级别定义从变量插槽加载的临时变量，而无需任何&lt;a href=&quot;../../classgen/asmclassgenerator&quot;&gt;AsmClassGenerator&lt;/a&gt;知识。</target>
        </trans-unit>
        <trans-unit id="56c8f33ce11d786ae0e1f3aa22278e14055ef1d1" translate="yes" xml:space="preserve">
          <source>A generic servlet for serving (mostly HTML) templates.</source>
          <target state="translated">一个用于服务(主要是HTML)模板的通用servlet。</target>
        </trans-unit>
        <trans-unit id="fb7052944c216d36a53641abd32960dd9fdb76a7" translate="yes" xml:space="preserve">
          <source>A handle for the MetaClassRegistry that changes all classes loaded into the Grails VM to use ExpandoMetaClass instances</source>
          <target state="translated">MetaClassRegistry的一个句柄,它将所有加载到Grails VM中的类改为使用ExpandoMetaClass实例。</target>
        </trans-unit>
        <trans-unit id="2b93c2fe4402d9dfc915b489be117eed7c89a29a" translate="yes" xml:space="preserve">
          <source>A hash table supporting full concurrency of retrievals, adjustable expected concurrency for updates, and a maximum capacity to bound the map by. This implementation differs from &lt;a href=&quot;https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ConcurrentHashMap.html&quot;&gt;ConcurrentHashMap&lt;/a&gt; in that it maintains a page replacement algorithm that is used to evict an entry when the map has exceeded its capacity. Unlike the</source>
          <target state="translated">哈希表支持检索的完全并发，可调整的预期更新并发以及最大绑定地图的能力。此实现与&lt;a href=&quot;https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ConcurrentHashMap.html&quot;&gt;ConcurrentHashMap的&lt;/a&gt;不同之处在于，它维护页面替换算法，该算法用于在地图超出其容量时逐出条目。不像</target>
        </trans-unit>
        <trans-unit id="3f24e19e7f727b8f15909919be6516b9f5e8e4db" translate="yes" xml:space="preserve">
          <source>A hash table that supports mostly-concurrent reading, but exclusive writing. Because reads are not limited to periods without writes, a concurrent reader policy is weaker than a classic reader/writer policy, but is generally faster and allows more concurrency. This class is a good choice especially for tables that are mainly created by one thread during the start-up phase of a program, and from then on, are mainly read (with perhaps occasional additions or removals) in many threads. If you also need concurrency among writes, consider instead using ConcurrentHashMap.</source>
          <target state="translated">一个支持大部分并发读取,但独占性写入的哈希表。因为读不限于没有写的时期,所以并发读策略比经典的读/写策略要弱,但一般来说速度更快,允许更多的并发性。特别是对于那些在程序启动阶段主要由一个线程创建,此后主要由多个线程读取(可能偶尔会有增删)的表,这个类是一个不错的选择。如果你也需要写入之间的并发性,可以考虑改用 ConcurrentHashMap。</target>
        </trans-unit>
        <trans-unit id="d1b0330bb6e02b7ea16bdfe9a86b3414332d7b08" translate="yes" xml:space="preserve">
          <source>A helper class for MarkupBuilder.</source>
          <target state="translated">MarkupBuilder的一个辅助类。</target>
        </trans-unit>
        <trans-unit id="7b6b88ea73f43583501233c928accb1302e79811" translate="yes" xml:space="preserve">
          <source>A helper class for bytecode generation with AsmClassGenerator.</source>
          <target state="translated">使用AsmClassGenerator生成字节码的辅助类。</target>
        </trans-unit>
        <trans-unit id="383832fb3a967c00668a7084b98117b2453fb543" translate="yes" xml:space="preserve">
          <source>A helper class for creating Swing widgets using GroovyMarkup</source>
          <target state="translated">一个使用GroovyMarkup创建Swing小部件的助手类。</target>
        </trans-unit>
        <trans-unit id="1ac258756e3852c95c826247610ee4419a813f37" translate="yes" xml:space="preserve">
          <source>A helper class for creating XML or HTML markup. The builder supports various 'pretty printed' formats.</source>
          <target state="translated">一个用于创建XML或HTML标记的助手类。该构建器支持各种 &quot;漂亮的打印 &quot;格式。</target>
        </trans-unit>
        <trans-unit id="8c738ab31782d2a9b2a749c575d130a68b367694" translate="yes" xml:space="preserve">
          <source>A helper class for creating a W3C DOM tree</source>
          <target state="translated">一个用于创建W3C DOM树的辅助类。</target>
        </trans-unit>
        <trans-unit id="9543d01ed8fe1436f1ce7257b40bf7c0486d6600" translate="yes" xml:space="preserve">
          <source>A helper class for creating namespaced GroovyMarkup</source>
          <target state="translated">一个用于创建命名空间的GroovyMarkup的帮助类。</target>
        </trans-unit>
        <trans-unit id="ec0f88810b56dd3174795b6f58a0ad2906945c73" translate="yes" xml:space="preserve">
          <source>A helper class for creating namespaces for GroovyMarkup</source>
          <target state="translated">一个为GroovyMarkup创建命名空间的助手类。</target>
        </trans-unit>
        <trans-unit id="04190600bbcd3f19f6ffbd27edf8a76306a1207f" translate="yes" xml:space="preserve">
          <source>A helper class for creating nested trees of Node objects for handling arbitrary data</source>
          <target state="translated">一个帮助类,用于创建嵌套的Node对象树,以处理任意数据。</target>
        </trans-unit>
        <trans-unit id="6a2a426dbd8d909b89fa2a8c12a11375f2de244e" translate="yes" xml:space="preserve">
          <source>A helper class for creating nested trees of data</source>
          <target state="translated">用于创建数据嵌套树的辅助类。</target>
        </trans-unit>
        <trans-unit id="1e07801545a723fc6f9eb641f0d618268b60bb88" translate="yes" xml:space="preserve">
          <source>A helper class for parsing XML into a tree of Node instances for a simple way of processing XML. This parser does not preserve the XML InfoSet - if that's what you need try using W3C DOM, dom4j, JDOM, XOM etc. This parser ignores comments and processing instructions and converts the XML into a Node for each element in the XML with attributes and child Nodes and Strings. This simple model is sufficient for most simple use cases of processing XML.</source>
          <target state="translated">一个辅助类,用于将XML解析成Node实例树,以简单的方式处理XML。这个解析器不保留XML信息集--如果你需要的话,可以尝试使用W3C DOM、dom4j、JDOM、XOM等。这个解析器忽略注释和处理指令,并将XML转换为XML中每个元素的Node,并带有属性和子Nodes和Strings。这个简单的模型足以应付大多数处理XML的简单用例。</target>
        </trans-unit>
        <trans-unit id="8c37ebfef1f601b113eeaef75a2164fd7cb2694c" translate="yes" xml:space="preserve">
          <source>A helper class for printing indented text. This can be used stand-alone or, more commonly, from Builders.</source>
          <target state="translated">一个用于打印缩进文本的辅助类。可以单独使用,也可以从Builders中使用。</target>
        </trans-unit>
        <trans-unit id="546c2664a1a30e402306acf350038050ef574563" translate="yes" xml:space="preserve">
          <source>A helper class for sorting objects via a closure to return the field or operation on which to sort.</source>
          <target state="translated">通过闭包返回要排序的字段或操作,对对象进行排序的辅助类。</target>
        </trans-unit>
        <trans-unit id="2ea8552ec77a2d9aa2a2542ba78c331ce83a006f" translate="yes" xml:space="preserve">
          <source>A helper class to allow parser exceptions to be thrown anywhere in the code. Should be replaced when no longer required.</source>
          <target state="translated">一个允许在代码中任何地方抛出解析器异常的辅助类。当不再需要时,应被替换。</target>
        </trans-unit>
        <trans-unit id="0f23bacbe522207d2cd4382803c3ded9260090b8" translate="yes" xml:space="preserve">
          <source>A helper class to invoke methods more easily in ASM</source>
          <target state="translated">一个在ASM中更容易调用方法的辅助类。</target>
        </trans-unit>
        <trans-unit id="4cd30db1ff2b01b7d1e1e613b88ab879da2eabf5" translate="yes" xml:space="preserve">
          <source>A helper class used to generate bytecode for method pointer expressions.</source>
          <target state="translated">一个用于为方法指针表达式生成字节码的辅助类。</target>
        </trans-unit>
        <trans-unit id="5f96d6d01238d35651c09ec502ae7f8541b5e02d" translate="yes" xml:space="preserve">
          <source>A helper class used to generate bytecode for method reference expressions.</source>
          <target state="translated">一个用于为方法引用表达式生成字节码的辅助类。</target>
        </trans-unit>
        <trans-unit id="bc075b8633c99d759315fd8a8d7414b363ef0c2d" translate="yes" xml:space="preserve">
          <source>A helper class used to generate bytecode for unary expressions. AST transformations willing to use a custom unary expression helper may set the &lt;a href=&quot;writercontrollerfactory&quot;&gt;WriterControllerFactory&lt;/a&gt; node metadata on a class node to provide a custom &lt;a href=&quot;writercontroller&quot;&gt;WriterController&lt;/a&gt; which would in turn use a custom expression helper.</source>
          <target state="translated">一个帮助程序类，用于为一元表达式生成字节码。愿意使用自定义一元表达式帮助器的AST转换可以在类节点上设置&lt;a href=&quot;writercontrollerfactory&quot;&gt;WriterControllerFactory&lt;/a&gt;节点元数据，以提供自定义&lt;a href=&quot;writercontroller&quot;&gt;WriterController&lt;/a&gt;，而后者将使用自定义表达式帮助器。</target>
        </trans-unit>
        <trans-unit id="b3c5476ba96261d0e1e771852aaf2d8cfa285ef7" translate="yes" xml:space="preserve">
          <source>A helper class used to resolve references found in ASM-decompiled classes.</source>
          <target state="translated">一个用于解析在ASM反编译类中发现的引用的辅助类。</target>
        </trans-unit>
        <trans-unit id="38ca23034a46f3810b748d5d1c38947aca1661fe" translate="yes" xml:space="preserve">
          <source>A helper constructor used in main(String[]) method calls</source>
          <target state="translated">在main(String[])方法调用中使用的辅助构造函数。</target>
        </trans-unit>
        <trans-unit id="be8b50a9a7032d331568035557985d1c82bef048" translate="yes" xml:space="preserve">
          <source>A helper interface for factories which require post processing of generated nodes.</source>
          <target state="translated">为需要对生成的节点进行后期处理的工厂提供一个辅助接口。</target>
        </trans-unit>
        <trans-unit id="8e23e085b655dc45f1aa42bfc4ebd9b91edbf7e2" translate="yes" xml:space="preserve">
          <source>A helper method so that dynamic dispatch of the writer.write(object) method will always use the more efficient Writable.writeTo(writer) mechanism if the object implements the Writable interface.</source>
          <target state="translated">一个辅助方法,如果对象实现了Writable接口,那么writer.write(object)方法的动态调度将始终使用更高效的Writable.writeTo(writer)机制。</target>
        </trans-unit>
        <trans-unit id="92b8c70aec7c18d9c704ed2ac9b07946362928c3" translate="yes" xml:space="preserve">
          <source>A helper method that can be used to evaluate expressions as found in annotation parameters.</source>
          <target state="translated">一个辅助方法,可用于评估注解参数中的表达式。</target>
        </trans-unit>
        <trans-unit id="24746b26f63c969b64972b6f72482c2038ae41b6" translate="yes" xml:space="preserve">
          <source>A helper method that can be used to evaluate expressions as found in annotation parameters. For example, it will evaluate a constant, be it referenced directly as an integer or as a reference to a field.</source>
          <target state="translated">一个辅助方法,可用于评估注解参数中的表达式。例如,它将评估一个常量,无论是直接作为整数引用还是作为字段引用。</target>
        </trans-unit>
        <trans-unit id="a6fa8c447b2705ac2690f9c28f3fe586950a4ad9" translate="yes" xml:space="preserve">
          <source>A helper method to allow GPathResults to work with subscript operators</source>
          <target state="translated">允许GPathResults与下标操作符一起使用的辅助方法。</target>
        </trans-unit>
        <trans-unit id="a86aedd91cee6c6fb9ace62c0f6745772bdca0d9" translate="yes" xml:space="preserve">
          <source>A helper method to allow lists to work with subscript operators.</source>
          <target state="translated">一个允许列表与下标操作符一起工作的辅助方法。</target>
        </trans-unit>
        <trans-unit id="d08155ea6a4402bc468e3748f311a97c85cbb2e8" translate="yes" xml:space="preserve">
          <source>A helper method to allow maps to work with subscript operators</source>
          <target state="translated">一个允许地图与下标运算符一起工作的辅助方法</target>
        </trans-unit>
        <trans-unit id="60e1c630db9f489019ae61431e6b954856e0692f" translate="yes" xml:space="preserve">
          <source>A helper method to allow scripts to be run taking command line arguments</source>
          <target state="translated">一个允许使用命令行参数运行脚本的辅助方法。</target>
        </trans-unit>
        <trans-unit id="6f06ad03f6413a84924c37a31b69a829cd37dca7" translate="yes" xml:space="preserve">
          <source>A helper method to allow the dynamic evaluation of groovy expressions using this scripts binding as the variable scope</source>
          <target state="translated">一个辅助方法,允许使用这个脚本绑定作为变量范围来动态评估groovy表达式。</target>
        </trans-unit>
        <trans-unit id="34d82f89a5ad5ac60cffc9420f8d3632d5ab4207" translate="yes" xml:space="preserve">
          <source>A helper method to format the arguments types as a comma-separated list.</source>
          <target state="translated">一个辅助方法,用于将参数类型格式化为一个逗号分隔的列表。</target>
        </trans-unit>
        <trans-unit id="eb622eebefc8a341546ee9f6c36121cd6f220629" translate="yes" xml:space="preserve">
          <source>A helper method to parse the given text as XML</source>
          <target state="translated">一个辅助方法,将给定的文本解析为XML。</target>
        </trans-unit>
        <trans-unit id="72447eea8bc4b4026a3073738c21c25c4c001a57" translate="yes" xml:space="preserve">
          <source>A helper method to parse the given text as XML.</source>
          <target state="translated">一个辅助方法,将给定的文本解析为XML。</target>
        </trans-unit>
        <trans-unit id="5fa052027018c857fb445645adfd448fd7543f91" translate="yes" xml:space="preserve">
          <source>A helper method to return the string representation of a list with bracket boundaries &quot;[&quot; and &quot;]&quot;.</source>
          <target state="translated">一个辅助方法,用于返回带括号边界&quot;[&quot;和&quot;]&quot;的列表的字符串表示。</target>
        </trans-unit>
        <trans-unit id="b363f4f9577d9a9a111029fa36a953d5da47f80e" translate="yes" xml:space="preserve">
          <source>A helper method to return the string representation of a map with bracket boundaries &quot;[&quot; and &quot;]&quot;.</source>
          <target state="translated">一个辅助方法,用于返回带括号边界&quot;[&quot;和&quot;]&quot;的地图的字符串表示。</target>
        </trans-unit>
        <trans-unit id="0076e37b531516c7e8519c622ba7e0cb0ed79609" translate="yes" xml:space="preserve">
          <source>A helper method to return the string representation of an array of objects with brace boundaries &quot;[&quot; and &quot;]&quot;.</source>
          <target state="translated">一个辅助方法,用于返回一个带括号边界&quot;[&quot;和&quot;]&quot;的对象数组的字符串表示。</target>
        </trans-unit>
        <trans-unit id="dc92d004528207f590124125ba9876f1c0461665" translate="yes" xml:space="preserve">
          <source>A helper method which determines which receiver class should be used in error messages when a field or attribute is not found.</source>
          <target state="translated">一个辅助方法,当一个字段或属性没有找到时,决定在错误信息中应该使用哪个接收器类。</target>
        </trans-unit>
        <trans-unit id="6a29662b470b5d10cb2498623c48bc9f57f0a1b8" translate="yes" xml:space="preserve">
          <source>A helper method which determines which receiver class should be used in error messages when a field or attribute is not found. The returned type class depends on whether we have temporary type information available (due to instanceof checks) and whether there is a single candidate in that case.</source>
          <target state="translated">一个辅助方法,当一个字段或属性没有找到时,决定在错误信息中应该使用哪个接收器类。返回的类型类取决于我们是否有临时的类型信息可用(由于instanceof检查),以及在这种情况下是否有单一的候选人。</target>
        </trans-unit>
        <trans-unit id="718dbbe4f31fcdaa75021f4fee09f3f145f2e5bd" translate="yes" xml:space="preserve">
          <source>A helper method which runs the given cl script with the given command line arguments</source>
          <target state="translated">一个辅助方法,通过给定的命令行参数运行给定的cl脚本。</target>
        </trans-unit>
        <trans-unit id="cb88f36b947274cdda095aeec79572c947f01f8c" translate="yes" xml:space="preserve">
          <source>A helper method which runs the given script file with the given command line arguments</source>
          <target state="translated">一个辅助方法,通过给定的命令行参数运行给定的脚本文件。</target>
        </trans-unit>
        <trans-unit id="3198f41213761751d28c72937f36acfd54b2eaff" translate="yes" xml:space="preserve">
          <source>A helper method which will extract the n-th generic type from a class node.</source>
          <target state="translated">从类节点中提取第n个通用类型的辅助方法。</target>
        </trans-unit>
        <trans-unit id="28ddd89a5d15de3a34b1e06cac9ff470ebb4d178" translate="yes" xml:space="preserve">
          <source>A helper method which will extract the n-th generic type from the n-th parameter of a method node.</source>
          <target state="translated">一个辅助方法,它将从方法节点的第n个参数中提取第n个通用类型。</target>
        </trans-unit>
        <trans-unit id="a4d2fe18222f52010efdc15b06030f2731cb5397" translate="yes" xml:space="preserve">
          <source>A hint used to instruct the type checker to pick the first generic type of the first parameter type. For example:</source>
          <target state="translated">用于指示类型检查器选择第一个参数类型的第一个通用类型的提示。例如:</target>
        </trans-unit>
        <trans-unit id="b6c3cc4c8db4a4774f08f38b71ba6bdee47ac68b" translate="yes" xml:space="preserve">
          <source>A hint used to instruct the type checker to pick the first generic type of the second parameter type. For example:</source>
          <target state="translated">用于指示类型检查器选择第二个参数类型的第一个通用类型的提示。例如:</target>
        </trans-unit>
        <trans-unit id="3966ac1e28662d2c187a3391ee5610d386d85dd1" translate="yes" xml:space="preserve">
          <source>A hint used to instruct the type checker to pick the first generic type of the third parameter type. For example:</source>
          <target state="translated">用于指示类型检查器选择第三个参数类型的第一个通用类型的提示。例如:</target>
        </trans-unit>
        <trans-unit id="6b8fe834307cc58e6b15a3dd308819d5799f283a" translate="yes" xml:space="preserve">
          <source>A hint used to instruct the type checker to pick the first parameter type. For example:</source>
          <target state="translated">用于指示类型检查器选择第一个参数类型的提示。例如:</target>
        </trans-unit>
        <trans-unit id="c9491b84294af2ffdced8238f03045c8ceb862fd" translate="yes" xml:space="preserve">
          <source>A hint used to instruct the type checker to pick the second generic type of the first parameter type. For example:</source>
          <target state="translated">用于指示类型检查器选择第一个参数类型的第二个通用类型的提示。例如:</target>
        </trans-unit>
        <trans-unit id="93d66101be0450edaec84541d773755f3171e64a" translate="yes" xml:space="preserve">
          <source>A hint used to instruct the type checker to pick the second generic type of the second parameter type. For example:</source>
          <target state="translated">用于指示类型检查器选择第二个参数类型的第二个通用类型的提示。例如:</target>
        </trans-unit>
        <trans-unit id="81b93933680b5d1b78bbd15014bf5eb2bfe9f7d9" translate="yes" xml:space="preserve">
          <source>A hint used to instruct the type checker to pick the second generic type of the third parameter type. For example:</source>
          <target state="translated">用于指示类型检查器选择第三个参数类型的第二个通用类型的提示。例如:</target>
        </trans-unit>
        <trans-unit id="ee5900695de2a7db36021fc97286bf6980da1af0" translate="yes" xml:space="preserve">
          <source>A hint used to instruct the type checker to pick the second parameter type. For example:</source>
          <target state="translated">用于指示类型检查器选择第二个参数类型的提示。例如:</target>
        </trans-unit>
        <trans-unit id="285248f5950ef1c4cbb947f9f6a138161e138b63" translate="yes" xml:space="preserve">
          <source>A hint used to instruct the type checker to pick the third generic type of the first parameter type. For example:</source>
          <target state="translated">用于指示类型检查器选择第一个参数类型的第三个通用类型的提示。例如:</target>
        </trans-unit>
        <trans-unit id="d3dee737e4b11703a623cae392e33d7dad4b4ee5" translate="yes" xml:space="preserve">
          <source>A hint used to instruct the type checker to pick the third parameter type. For example:</source>
          <target state="translated">用于指示类型检查器选择第三个参数类型的提示。例如:</target>
        </trans-unit>
        <trans-unit id="d546afc5c78f709e216ba217c1e3cb448e92d193" translate="yes" xml:space="preserve">
          <source>A hint used to instruct the type checker to pick the type of the component of the first parameter type, which is therefore expected to be an array, like in this example:</source>
          <target state="translated">用于指示类型检查器选择第一个参数类型的组件的类型的提示,因此预计是一个数组,就像在这个例子中。</target>
        </trans-unit>
        <trans-unit id="8ee53f82a8f2ac89d4319bf40f9c8347055f78a6" translate="yes" xml:space="preserve">
          <source>A hint used to instruct the type checker to pick the type of the component of the second parameter type, which is therefore expected to be an array, like in this example:</source>
          <target state="translated">用于指示类型检查器选择第二个参数类型的组件类型的提示,因此,预计是一个数组,就像在这个例子中。</target>
        </trans-unit>
        <trans-unit id="807f3643d42c99a8f8e8af4910cd1d1fca1441b9" translate="yes" xml:space="preserve">
          <source>A hint used to instruct the type checker to pick the type of the component of the third parameter type, which is therefore expected to be an array, like in this example:</source>
          <target state="translated">一个提示,用于指示类型检查器选择第三个参数类型的组件类型,因此,预计是一个数组,就像在这个例子中。</target>
        </trans-unit>
        <trans-unit id="4e62746af1851e2ea5732ed769a48bd085cb7d40" translate="yes" xml:space="preserve">
          <source>A hook after the factory creates the node and before attributes are set.</source>
          <target state="translated">工厂创建节点后,属性设置前的钩子。</target>
        </trans-unit>
        <trans-unit id="14c4570e6d85cb35df76e47e7ada7d1639f5cbe6" translate="yes" xml:space="preserve">
          <source>A hook before the factory creates the node.</source>
          <target state="translated">工厂创建节点前的一个钩子。</target>
        </trans-unit>
        <trans-unit id="76bb05085a1f72c43221442d5987702a65b92765" translate="yes" xml:space="preserve">
          <source>A hook to allow names to be converted into some other object such as a QName in XML or ObjectName in JMX.</source>
          <target state="translated">一个钩子,允许将名称转换为其他对象,如XML中的QName或JMX中的ObjectName。</target>
        </trans-unit>
        <trans-unit id="c9d164296acdcc27c1011ed81e619caea16c40a5" translate="yes" xml:space="preserve">
          <source>A hook to allow nodes to be processed once they have had all of their children applied and allows the actual node object that represents the Markup element to be changed.</source>
          <target state="translated">一个钩子,当节点的所有子节点被应用后,允许处理它们,并允许改变代表Markup元素的实际节点对象。</target>
        </trans-unit>
        <trans-unit id="caaf4964f485842a4188e32fb85c6d5fff92fdda" translate="yes" xml:space="preserve">
          <source>A hook to allow nodes to be processed once they have had all of their children applied.</source>
          <target state="translated">一个钩子,允许节点在应用了所有子节点后进行处理。</target>
        </trans-unit>
        <trans-unit id="54cf3a8607b16cb16c3437e803e15eff087a774c" translate="yes" xml:space="preserve">
          <source>A java.util.Properties instance</source>
          <target state="translated">一个java.util.Properties实例</target>
        </trans-unit>
        <trans-unit id="0172f03e800c543a900733523c8c1a6b6dbdc314" translate="yes" xml:space="preserve">
          <source>A label for an argument is of the form a:b, 'a':b, &quot;a&quot;:b, (a):b, etc..</source>
          <target state="translated">一个参数的标签是a:b、'a':b、&quot;a&quot;:b、(a):b等形式。</target>
        </trans-unit>
        <trans-unit id="e41d6356e837f238bafe7234863d7bd4e95d0573" translate="yes" xml:space="preserve">
          <source>A label for an argument is of the form a:b, 'a':b, &quot;a&quot;:b, (a):b, etc.. The labels in (a:b), ('a':b), and (&quot;a&quot;:b) are in all ways equivalent, except that the quotes allow more spellings. Equivalent dynamically computed labels are (('a'):b) and (&quot;${'a'}&quot;:b) but not ((a):b) or &quot;$a&quot;:b, since the latter cases evaluate (a) as a normal identifier. Bottom line: If you want a truly variable label, use parens and say ((a):b).</source>
          <target state="translated">一个参数的标签是a:b、'a':b、&quot;a&quot;:b、(a):b等形式。(a:b)、('a':b)和(&quot;a&quot;:b)中的标签在所有方面都是等价的,只是引号允许更多的拼写。等价的动态计算标签是(('a'):b)和(&quot;${'a'}&quot;:b),但不是((a):b)或&quot;$a&quot;:b,因为后者将(a)作为一个普通的标识符来计算。一句话。如果你想要一个真正的变量标签,请使用 parens 并说 ((a):b)。</target>
        </trans-unit>
        <trans-unit id="ebd4fe3592548ee9feb253ae90d387d0f47898a8" translate="yes" xml:space="preserve">
          <source>A labeled statement, consisting of a vanilla identifier followed by a colon.</source>
          <target state="translated">一个标注的语句,由香草标识符和冒号组成。</target>
        </trans-unit>
        <trans-unit id="7aabf00154960409248cac7e5ee25d4f6adc2935" translate="yes" xml:space="preserve">
          <source>A list constructor is a argument list enclosed in square brackets, without labels.</source>
          <target state="translated">列表构造函数是一个用方括号括起来的参数列表,没有标签。</target>
        </trans-unit>
        <trans-unit id="5acfe53d3ecb1d72b65b2c133d3b230ec0f35775" translate="yes" xml:space="preserve">
          <source>A list constructor is a argument list enclosed in square brackets, without labels. Any argument can be decorated with a spread operator (*x), but not a label (a:x). Examples: [], [1], [1,2], [1,*l1,2], [*l1,*l2]. (The l1, l2 must be a sequence or null.)</source>
          <target state="translated">列表构造函数是一个用方括号括起来的参数列表,没有标签。任何参数都可以用展开运算符(*x)来装饰,但不能用标签(a:x)来装饰。示例:[1],[2],[3]:[],[1],[1,2],[1,*l1,2],[*l1,*l2].(l1,l2必须是一个序列或空。)</target>
        </trans-unit>
        <trans-unit id="1505463a05cfe016b12b533c9b537ed5333fcdb5" translate="yes" xml:space="preserve">
          <source>A list of MetaMethod instances</source>
          <target state="translated">一个MetaMethod实例的列表</target>
        </trans-unit>
        <trans-unit id="1d61df2bfbfa8dc437b1aedcbd9955190d89417b" translate="yes" xml:space="preserve">
          <source>A list of MetaMethods</source>
          <target state="translated">MetaMethods列表</target>
        </trans-unit>
        <trans-unit id="5f6b20a47fc4cbb54f0bb519f29a9002fc9b7a04" translate="yes" xml:space="preserve">
          <source>A list of MetaProperty instances</source>
          <target state="translated">MetaProperty实例的列表</target>
        </trans-unit>
        <trans-unit id="1d1013d07e5c51d8bc2c5c69c989b67dac4f5725" translate="yes" xml:space="preserve">
          <source>A list of all of the registered commands.</source>
          <target state="translated">所有注册命令的列表。</target>
        </trans-unit>
        <trans-unit id="18897120f4ae9fc1436f410cb86c746be22bd3b5" translate="yes" xml:space="preserve">
          <source>A list of elements as arguments to the JSON builder creates a root JSON array</source>
          <target state="translated">作为JSON生成器参数的元素列表会创建一个根JSON数组。</target>
        </trans-unit>
        <trans-unit id="c32e2b0904e0b9e88ac1467de4c86cc4ec22ca69" translate="yes" xml:space="preserve">
          <source>A list of elements as arguments to the YAML builder creates a root YAML array</source>
          <target state="translated">作为参数的YAML构建器的元素列表创建一个根YAML数组。</target>
        </trans-unit>
        <trans-unit id="ed0990a4d24eeca4e87b9fa05fe46e0d24fc8e4b" translate="yes" xml:space="preserve">
          <source>A list of one or more modifier, annotation, or &quot;def&quot;.</source>
          <target state="translated">一个或多个修饰词、注释或 &quot;def &quot;的列表。</target>
        </trans-unit>
        <trans-unit id="5c4cceac80996861f28adea0c54fd27c8ad23071" translate="yes" xml:space="preserve">
          <source>A list of statements and a scope.</source>
          <target state="translated">一个声明列表和一个范围。</target>
        </trans-unit>
        <trans-unit id="a183936f2d934ec756c79ffb3318223e772a74f1" translate="yes" xml:space="preserve">
          <source>A list of the auto-generated column values for each inserted row (typically auto-generated keys)</source>
          <target state="translated">每个插入的行的自动生成的列值的列表(通常是自动生成的键)。</target>
        </trans-unit>
        <trans-unit id="c54a966cb184a24ef3f33dc80bdcf90fa85634e5" translate="yes" xml:space="preserve">
          <source>A list of the auto-generated row results for each inserted row (typically auto-generated keys)</source>
          <target state="translated">每条插入的记录(通常是自动生成的键)的自动生成行结果的列表。</target>
        </trans-unit>
        <trans-unit id="d436eb64e89470412c3196f502bc90952836cb2f" translate="yes" xml:space="preserve">
          <source>A list of zero or more formal parameters.</source>
          <target state="translated">零个或多个形式参数的列表。</target>
        </trans-unit>
        <trans-unit id="11a6f49bda5bb6e5cdb660b5b9e036520b189164" translate="yes" xml:space="preserve">
          <source>A list of zero or more formal parameters. If a parameter is variable length (e.g. String... myArg) it should be to the right of any other parameters of the same kind. General form: (req, ..., opt, ..., [rest], key, ..., [restKeys], [block] This must be sorted out after parsing, since the various declaration forms are impossible to tell apart without backtracking.</source>
          <target state="translated">零个或多个形式参数的列表。如果一个参数是可变长度的(例如String...myArg),它应该在任何其他同类参数的右边。一般形式:(req,...,opt,...,[rest],key,...,[restKeys],[block]这必须在解析后整理出来,因为各种声明形式不回溯是无法区分的。</target>
        </trans-unit>
        <trans-unit id="a4139f536882fa30bfa11a6d7cf8d26cdc1c7970" translate="yes" xml:space="preserve">
          <source>A list of zero or more modifiers, annotations, or &quot;def&quot;.</source>
          <target state="translated">零个或多个修饰符、注释或 &quot;def &quot;的列表。</target>
        </trans-unit>
        <trans-unit id="341c28f2b3d1cd5effad441d0e69a710cbe83bdf" translate="yes" xml:space="preserve">
          <source>A listener called whenever a constant MetaClass is set, removed or replaced.</source>
          <target state="translated">当一个常量MetaClass被设置、删除或替换时,一个监听器被调用。</target>
        </trans-unit>
        <trans-unit id="eb186514a78117854838bac901dd6b0280f69a11" translate="yes" xml:space="preserve">
          <source>A listener registered for notification when an entry is evicted. An instance may be called concurrently by multiple threads to process entries. An implementation should avoid performing blocking calls or synchronizing on shared resources.</source>
          <target state="translated">注册的监听器,用于在条目被驱逐时发出通知。一个实例可以被多个线程并发调用来处理条目。实现时应避免在共享资源上执行阻塞调用或同步。</target>
        </trans-unit>
        <trans-unit id="df950d2a3f6050eb16c1a16ad97613a15a58f8fd" translate="yes" xml:space="preserve">
          <source>A little GUI to show some of the Inspector capabilities. Starting this script opens the ObjectBrowser on &quot;some String&quot;. Use it in groovysh or groovyConsole to inspect your object of interest with: &lt;code&gt;
 ObjectBrowser.inspect(myObject)
 &lt;/code&gt;.</source>
          <target state="translated">一个小的GUI来显示某些Inspector功能。启动此脚本将在&amp;ldquo;某些字符串&amp;rdquo;上打开ObjectBrowser。在groovysh或groovyConsole中使用它可以通过以下方式检查您感兴趣的对象： &lt;code&gt; ObjectBrowser.inspect(myObject) &lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="3ac37f398dad707aa5c480f8a5753fa0b37f390d" translate="yes" xml:space="preserve">
          <source>A loop driver for applying operations to all SourceUnits.</source>
          <target state="translated">用于对所有SourceUnits进行操作的循环驱动。</target>
        </trans-unit>
        <trans-unit id="5f1ba4cb0eb2d9c51dcd8f7da17de68cda6320d1" translate="yes" xml:space="preserve">
          <source>A loop driver for applying operations to all SourceUnits. Automatically skips units that have already been processed through the current phase.</source>
          <target state="translated">用于对所有SourceUnits进行操作的循环驱动。自动跳过当前阶段已经处理过的单元。</target>
        </trans-unit>
        <trans-unit id="85b85d588cd9eebffcee0cfe2fdeca59579e6f4e" translate="yes" xml:space="preserve">
          <source>A loop driver for applying operations to all primary ClassNodes in our AST.</source>
          <target state="translated">一个循环驱动,用于对AST中的所有主ClassNodes进行操作。</target>
        </trans-unit>
        <trans-unit id="e972effbec9c0e4fce88292d574cf2bb9a1638be" translate="yes" xml:space="preserve">
          <source>A loop driver for applying operations to all primary ClassNodes in our AST. Automatically skips units that have already been processed through the current phase.</source>
          <target state="translated">一个循环驱动,用于将操作应用到我们AST中的所有主要ClassNodes。自动跳过当前阶段已经处理过的单元。</target>
        </trans-unit>
        <trans-unit id="d645bd8b785b218d1ce7a7bbf943130aa2470c84" translate="yes" xml:space="preserve">
          <source>A map constructor is an argument list enclosed in square brackets, with labels everywhere, except on spread arguments, which stand for whole maps spliced in. A colon alone between the brackets also forces the expression to be an empty map constructor. Examples: [:], [a:1], [a:1,b:2], [a:1,*:m1,b:2], [*:m1,*:m2] (The m1, m2 must be a map or null.) Values associated with identical keys overwrite from left to right: [a:1,a:2] === [a:2]</source>
          <target state="translated">地图构造函数是一个用方括号括起来的参数列表,除了铺展参数上,其他地方都有标签,代表整个地图拼接在一起。在方括号之间单独使用冒号也会迫使表达式成为一个空的地图构造函数。例如:[:],[a:1]:[:],[a:1],[a:1,b:2],[a:1,*:m1,b:2],[*:m1,*:m2](m1,m2必须是一个映射或空。)与相同键相关的值从左到右覆盖。[a:1,a:2]===[a:2]。</target>
        </trans-unit>
        <trans-unit id="b4fd44e837b72ba99199223f79ed649aae5a50d2" translate="yes" xml:space="preserve">
          <source>A map constructor is created which sets properties, and optionally fields and super properties if the property/field name is a key within the map.</source>
          <target state="translated">一个地图构造函数被创建,它可以设置属性,如果属性/字段名是地图中的一个键,还可以选择字段和超级属性。</target>
        </trans-unit>
        <trans-unit id="588880c2c3b5b86508c1aa8ea2568b1556469413" translate="yes" xml:space="preserve">
          <source>A map of methods</source>
          <target state="translated">方法图</target>
        </trans-unit>
        <trans-unit id="699fa6da8b702f43317ce1c37e6b555748d01340" translate="yes" xml:space="preserve">
          <source>A map used to store every type used in closure shared variable assignments.</source>
          <target state="translated">一个用于存储闭合共享变量赋值中使用的每个类型的映射。</target>
        </trans-unit>
        <trans-unit id="695f7f624dc05cd9897ce0cddfde7bed3020738c" translate="yes" xml:space="preserve">
          <source>A map used to store every type used in closure shared variable assignments. In a second pass, we will compute the LUB of each type and check that method calls on those variables are valid.</source>
          <target state="translated">一个用于存储闭合共享变量赋值中使用的每个类型的映射。在第二关,我们将计算每个类型的LUB,并检查这些变量上的方法调用是否有效。</target>
        </trans-unit>
        <trans-unit id="f8700238fd73fd8ba536b778e6231af28fc2f56e" translate="yes" xml:space="preserve">
          <source>A map-based constructor is provided which allows you to set properties by name.</source>
          <target state="translated">提供了一个基于地图的构造函数,允许你通过名称设置属性。</target>
        </trans-unit>
        <trans-unit id="3da7cd3ae77a52b61d819df2d781741f1562d5d4" translate="yes" xml:space="preserve">
          <source>A meaningful name for a repo containing the grape/artifact.</source>
          <target state="translated">含有葡萄/人工制品的回购站的一个有意义的名称。</target>
        </trans-unit>
        <trans-unit id="92114e2ef508aa91c31489584ddf046929d51fd9" translate="yes" xml:space="preserve">
          <source>A meaningful name for a repo containing the grape/artifact. A non-empty value is required unless value() is used.</source>
          <target state="translated">包含葡萄/人工制品的repo的有意义的名称。除非使用value(),否则需要一个非空值。</target>
        </trans-unit>
        <trans-unit id="bb092736c333116794978718dcf5ebed49452a22" translate="yes" xml:space="preserve">
          <source>A member name (x.y) or element name (x[y]) can serve as a command name, which may be followed by a list of arguments.</source>
          <target state="translated">成员名(x.y)或元素名(x[y])可以作为命令名,后面可以跟一个参数列表。</target>
        </trans-unit>
        <trans-unit id="30413befde5272f37dec5a786eddfdd1aa166216" translate="yes" xml:space="preserve">
          <source>A member name (x.y) or element name (x[y]) can serve as a command name, which may be followed by a list of arguments. Unlike parenthesized arguments, these must be plain expressions, without labels or spread operators.</source>
          <target state="translated">成员名(x.y)或元素名(x[y])可以作为命令名,后面可以跟一个参数列表。与括号内的参数不同,这些参数必须是纯表达式,没有标签或扩展运算符。</target>
        </trans-unit>
        <trans-unit id="b4c34c11691fe145d8e1cd1511d16f65dd66c417" translate="yes" xml:space="preserve">
          <source>A meta class for closures generated by the Groovy compiler. These classes have special characteristics this MetaClass uses. One of these is that a generated Closure has only additional doCall methods, all other methods are in the Closure class as well. To use this fact this MetaClass uses a MetaClass for Closure as static field And delegates calls to this MetaClass if needed. This allows a lean implementation for this MetaClass. Multiple generated closures will then use the same MetaClass for Closure. For static dispatching this class uses the MetaClass of Class, again all instances of this class will share that MetaClass. The Class MetaClass is initialized lazy, because most operations do not need this MetaClass.</source>
          <target state="translated">一个由Groovy编译器生成的闭包的元类。这些类有特殊的特性,这个MetaClass使用了。其中之一是生成的Closure只有额外的doCall方法,其他方法都在Closure类中。为了利用这个事实,这个MetaClass使用了Closure的MetaClass作为静态字段,并在需要时将调用委托给这个MetaClass。这样就可以对这个MetaClass进行精简的实现。多个生成的closure就会使用同一个MetaClass for Closure。对于静态调度,这个类使用Class的MetaClass,同样,这个类的所有实例将共享这个MetaClass。Class MetaClass的初始化很懒,因为大多数操作都不需要这个MetaClass。</target>
        </trans-unit>
        <trans-unit id="6c4db53dc723d2dce0bfd2858ebb171743881da5" translate="yes" xml:space="preserve">
          <source>A method call on an object or class.</source>
          <target state="translated">对象或类的方法调用。</target>
        </trans-unit>
        <trans-unit id="4e3e3cbb4217d459ac560d18b319fe3da0c899f8" translate="yes" xml:space="preserve">
          <source>A method call on the JSON builder instance will create a root object with only one key whose name is the name of the method being called.</source>
          <target state="translated">对JSON构建器实例的方法调用将创建一个只有一个键的根对象,其名称是被调用的方法的名称。</target>
        </trans-unit>
        <trans-unit id="f06e876add17ff2c91201edd8943a455268001c0" translate="yes" xml:space="preserve">
          <source>A method call on the JSON builder instance will create a root object with only one key whose name is the name of the method being called. This method takes as arguments:</source>
          <target state="translated">对JSON构建器实例的方法调用将创建一个只有一个键的根对象,其名称是被调用的方法的名称。这个方法将作为参数。</target>
        </trans-unit>
        <trans-unit id="8dd588471a00d979f47fc1253ebfa7f91f78bae6" translate="yes" xml:space="preserve">
          <source>A method call on the YAML builder instance will create a root object with only one key whose name is the name of the method being called.</source>
          <target state="translated">对YAML构建器实例的方法调用将创建一个只有一个键的根对象,其名称是被调用的方法的名称。</target>
        </trans-unit>
        <trans-unit id="7add00a90091eb734c3a41dacc792c3c6de511f6" translate="yes" xml:space="preserve">
          <source>A method call on the YAML builder instance will create a root object with only one key whose name is the name of the method being called. This method takes as arguments:</source>
          <target state="translated">对YAML构建器实例的方法调用将创建一个只有一个键的根对象,其名称是被调用的方法的名称。这个方法将作为参数。</target>
        </trans-unit>
        <trans-unit id="586f0e86be2c832ac915f3ee6f415ed8dc57ac53" translate="yes" xml:space="preserve">
          <source>A method for determining from and to information when using this IntRange to index an aggregate object of the specified size.</source>
          <target state="translated">当使用该IntRange对指定大小的集合对象进行索引时,确定从和到信息的方法。</target>
        </trans-unit>
        <trans-unit id="58d3b429deba731bd462df46779a46f2ec9f7810" translate="yes" xml:space="preserve">
          <source>A method for determining from and to information when using this IntRange to index an aggregate object of the specified size. Normally only used internally within Groovy but useful if adding range indexing support for your own aggregates.</source>
          <target state="translated">当使用该IntRange索引指定大小的集合对象时,用于确定从和到信息的方法。通常只在Groovy内部使用,但在为自己的聚合对象添加范围索引支持时,该方法非常有用。</target>
        </trans-unit>
        <trans-unit id="c1ff19125ea8078b0dd13c88d1bdd814e875e341" translate="yes" xml:space="preserve">
          <source>A module extension scanner is responsible for searching classpath modules, loading metadata from module descriptors, then perform custom tasks for each module. This class was introduced as a fix for GROOVY-6008</source>
          <target state="translated">模块扩展扫描器负责搜索classpath模块,从模块描述符中加载元数据,然后为每个模块执行自定义任务。这个类是作为GROOVY-6008的修正而引入的。</target>
        </trans-unit>
        <trans-unit id="bf43713199c973967bf1a5aa30ff2c008dbd9700" translate="yes" xml:space="preserve">
          <source>A more elaborate build file showing joint compilation:</source>
          <target state="translated">一个更详细的构建文件,显示联合编译。</target>
        </trans-unit>
        <trans-unit id="4547fbbf83b951c2c3dd9d41d551016ebf65b488" translate="yes" xml:space="preserve">
          <source>A more elaborate example:</source>
          <target state="translated">一个更详细的例子。</target>
        </trans-unit>
        <trans-unit id="e43dce03bd661b97fbc6f22679fad35af59ecc5e" translate="yes" xml:space="preserve">
          <source>A name and a closure passed to a JSON builder will create a key with a JSON object</source>
          <target state="translated">传递给JSON构建器的名称和闭合将创建一个带有JSON对象的键。</target>
        </trans-unit>
        <trans-unit id="876df8ab391f828a613294996a0189375adb09e0" translate="yes" xml:space="preserve">
          <source>A name, a collection and closure passed to a JSON builder will create a root JSON array applying the closure to each object in the collection</source>
          <target state="translated">传递给JSON生成器的名称、集合和闭包将创建一个根JSON数组,并将闭包应用于集合中的每个对象。</target>
        </trans-unit>
        <trans-unit id="f1bcd2f2c003993933522795b7f637b8f3885bf2" translate="yes" xml:space="preserve">
          <source>A new array containing elements from left with those from right appended.</source>
          <target state="translated">一个新的数组,包含从左到右的元素。</target>
        </trans-unit>
        <trans-unit id="261b3ec475aba3283d6bd797bca4d737eb19dc39" translate="yes" xml:space="preserve">
          <source>A new array containing left with right appended to it.</source>
          <target state="translated">一个新的数组,包含左与右的附加。</target>
        </trans-unit>
        <trans-unit id="3fb3f5032bc7fe592aa60679b6a493542ca2396a" translate="yes" xml:space="preserve">
          <source>A new array containing right appended to left.</source>
          <target state="translated">一个新的数组,包含左后缀的右。</target>
        </trans-unit>
        <trans-unit id="627dd4fb25f6fbed026d5db93626559e21dd0229" translate="yes" xml:space="preserve">
          <source>A new closure forwarding to the original one while caching the results</source>
          <target state="translated">一个新的闭合转发到原来的闭合,同时缓存结果。</target>
        </trans-unit>
        <trans-unit id="94019288aa7146589858c0d481be78ded186a3b5" translate="yes" xml:space="preserve">
          <source>A new function forwarding to the original one while caching the results</source>
          <target state="translated">一个新的函数转发到原来的函数,同时缓存结果。</target>
        </trans-unit>
        <trans-unit id="3e1885c34dc089e8a2f03f7edb106d97df61913b" translate="yes" xml:space="preserve">
          <source>A new memoized closure</source>
          <target state="translated">新的备忘录式结案</target>
        </trans-unit>
        <trans-unit id="8af4699237b13472929b868f3631cec1ddebf4a3" translate="yes" xml:space="preserve">
          <source>A new string in which all characters that require escaping have been replaced with the corresponding XML entities.</source>
          <target state="translated">一个新的字符串,其中所有需要转义的字符已经被相应的XML实体所取代。</target>
        </trans-unit>
        <trans-unit id="783a7e69fd60ce6f34238dbc1e78ddf4c5e6acd4" translate="yes" xml:space="preserve">
          <source>A new string in which all characters that require escaping have been replaced with the corresponding replacements as determined by the &lt;code&gt;transform&lt;/code&gt; Closure.</source>
          <target state="translated">一个新的字符串，其中所有需要转义的字符已由 &lt;code&gt;transform&lt;/code&gt; 闭包确定的相应替换替换。</target>
        </trans-unit>
        <trans-unit id="36accc556c4e5b88ae905ba49b3504b13e9b922d" translate="yes" xml:space="preserve">
          <source>A new string in which all characters that require escaping have been replaced with the corresponding replacements as determined by the &lt;code&gt;transform&lt;/code&gt; function.</source>
          <target state="translated">一个新字符串，其中所有需要转义的字符均已替换为由 &lt;code&gt;transform&lt;/code&gt; 函数确定的相应替换。</target>
        </trans-unit>
        <trans-unit id="547d568250563d9de313183f1a3f806eacd23713" translate="yes" xml:space="preserve">
          <source>A new unescaped &lt;code&gt;String&lt;/code&gt;, &lt;code&gt;null&lt;/code&gt; if null string input</source>
          <target state="translated">一个新的转义 &lt;code&gt;String&lt;/code&gt; ， &lt;code&gt;null&lt;/code&gt; 如果空字符串输入</target>
        </trans-unit>
        <trans-unit id="c87148a9e796115d09444a65c9528a96bc70c9ce" translate="yes" xml:space="preserve">
          <source>A no-arg constructor is provided which allows you to set properties by name using Groovy's normal bean conventions.</source>
          <target state="translated">我们提供了一个无参数的构造函数,允许你使用Groovy的普通Bean约定来设置属性。</target>
        </trans-unit>
        <trans-unit id="c689e4192457f647a68bdb4730f8964cbfc5fbb9" translate="yes" xml:space="preserve">
          <source>A non static factory to get alternative writer controller to be stored in the meta data</source>
          <target state="translated">一个非静态的工厂,以获得存储在元数据中的替代写入控制器。</target>
        </trans-unit>
        <trans-unit id="0d33803365b751a7cd2953ae62bc754dd574bba2" translate="yes" xml:space="preserve">
          <source>A null object always coerces to false.</source>
          <target state="translated">一个空对象总是胁迫为false。</target>
        </trans-unit>
        <trans-unit id="aa4cd78960531efc3c7c7b969916e35328dc1b21" translate="yes" xml:space="preserve">
          <source>A parameter to be returned from a CallableStatement.</source>
          <target state="translated">从CallableStatement返回的参数。</target>
        </trans-unit>
        <trans-unit id="6aa7352271e6ea2486027230328f5417321d3907" translate="yes" xml:space="preserve">
          <source>A parser plugin factory for the new parser.</source>
          <target state="translated">新解析器的解析器插件工厂。</target>
        </trans-unit>
        <trans-unit id="0edeb00803d936bcaa9f3342c7b706d58303914e" translate="yes" xml:space="preserve">
          <source>A parser plugin for the new parser.</source>
          <target state="translated">新解析器的解析器插件。</target>
        </trans-unit>
        <trans-unit id="2e04662defb7404b7feb2d61ed008372543c086d" translate="yes" xml:space="preserve">
          <source>A parser plugin which adapts the JSR Antlr Parser to the Groovy runtime.</source>
          <target state="translated">一个将JSR Antlr Parser适配到Groovy运行时的解析器插件。</target>
        </trans-unit>
        <trans-unit id="22e7fd1729aa9569bcd468ba52955566fe521451" translate="yes" xml:space="preserve">
          <source>A primary ClassNode is one where we have a source representation which is to be compiled by Groovy and which we have an AST for. The groovy compiler will output one class for each such ClassNode that passes through AsmBytecodeGenerator... not more, not less. That means for example Closures become such ClassNodes too at some point.</source>
          <target state="translated">一个主要的ClassNode是指我们有一个要被Groovy编译的源表示,并且我们有一个AST。groovy编译器将为每一个通过AsmBytecodeGenerator的ClassNode输出一个类......不多不少。这意味着例如Closures在某些时候也会成为这样的ClassNodes。</target>
        </trans-unit>
        <trans-unit id="425e16193c9515cb774e49f3d8bb8812bfa0322b" translate="yes" xml:space="preserve">
          <source>A property path full binding</source>
          <target state="translated">一个属性路径的完整绑定</target>
        </trans-unit>
        <trans-unit id="8633319a96e500ed93822944d04c72c19b07c39e" translate="yes" xml:space="preserve">
          <source>A proxy generator responsible for mapping a map of closures to a class implementing a list of interfaces. For example, the following code:</source>
          <target state="translated">一个代理生成器,负责将闭包的映射映射到实现接口列表的类。例如,下面的代码。</target>
        </trans-unit>
        <trans-unit id="d667db648696165e964b7c5698eebdec4515782a" translate="yes" xml:space="preserve">
          <source>A queue that stores values wrapped in a Reference, the type of which is determined by the provided &lt;a href=&quot;referencebundle&quot;&gt;ReferenceBundle&lt;/a&gt;. References stored in this queue will be removed when reference processing occurs.</source>
          <target state="translated">一个队列，用于存储包装在Reference中的值，该值的类型由所提供的&lt;a href=&quot;referencebundle&quot;&gt;ReferenceBundle&lt;/a&gt;确定。发生引用处理时，将删除此队列中存储的引用。</target>
        </trans-unit>
        <trans-unit id="b8439f74a09bfce41d0fc03491ebc77c63e3c3fd" translate="yes" xml:space="preserve">
          <source>A registry of MetaClass instances which caches introspection and reflection information and allows methods to be dynamically added to existing classes at runtime</source>
          <target state="translated">一个MetaClass实例的注册表,它可以缓存自省和反射信息,并允许在运行时将方法动态地添加到现有的类中。</target>
        </trans-unit>
        <trans-unit id="e0767988264bfc00a15c743d68b45399e56a44f3" translate="yes" xml:space="preserve">
          <source>A registry of shell &lt;a href=&quot;command&quot;&gt;Command&lt;/a&gt; instances which may be executed.</source>
          <target state="translated">可以执行的Shell &lt;a href=&quot;command&quot;&gt;Command&lt;/a&gt;实例的注册表。</target>
        </trans-unit>
        <trans-unit id="1627e3e332d410b95ebe7dac4c1ae44558168512" translate="yes" xml:space="preserve">
          <source>A relaxed parser, which tends to allow more, but won't really catch valid syntax errors.</source>
          <target state="translated">一个宽松的解析器,它往往允许更多,但不会真正抓住有效的语法错误。</target>
        </trans-unit>
        <trans-unit id="b78ef24fcd22f72704a792cfca1dd798262228a8" translate="yes" xml:space="preserve">
          <source>A return statement</source>
          <target state="translated">返回声明</target>
        </trans-unit>
        <trans-unit id="0e17fdeb37c62fab22b2ddeb7f1dc198fcfc9c47" translate="yes" xml:space="preserve">
          <source>A reverse iterator over a list. Utilizes the &lt;a href=&quot;https://docs.oracle.com/javase/8/docs/api/java/util/ListIterator.html&quot;&gt;ListIterator&lt;/a&gt; obtained from the provided &lt;a href=&quot;https://docs.oracle.com/javase/8/docs/api/java/util/List.html&quot;&gt;List&lt;/a&gt; and converts it to an &lt;a href=&quot;https://docs.oracle.com/javase/8/docs/api/java/util/Iterator.html&quot;&gt;Iterator&lt;/a&gt; that efficiently traverses the &lt;code&gt;List&lt;/code&gt; in reverse. The fail-fast semantics of this iterator are the same as the semantics of the underlying &lt;code&gt;ListIterator&lt;/code&gt;.</source>
          <target state="translated">列表上的反向迭代器。利用从提供的&lt;a href=&quot;https://docs.oracle.com/javase/8/docs/api/java/util/List.html&quot;&gt;List中&lt;/a&gt;获得的&lt;a href=&quot;https://docs.oracle.com/javase/8/docs/api/java/util/ListIterator.html&quot;&gt;ListIterator&lt;/a&gt;并将其转换为有效反向遍历 &lt;code&gt;List&lt;/code&gt; 的&lt;a href=&quot;https://docs.oracle.com/javase/8/docs/api/java/util/Iterator.html&quot;&gt;Iterator&lt;/a&gt;。此迭代器的快速失败语义与基础 &lt;code&gt;ListIterator&lt;/code&gt; 的语义相同。</target>
        </trans-unit>
        <trans-unit id="1c2217a6699e46870add8b383a7ad4a8b082f30c" translate="yes" xml:space="preserve">
          <source>A signature codec is responsible for encoding and decoding of inferred returned types as stored in bytecode. The signature must contain an appropriate version number so that future versions of Groovy remain capable of decoding previous versions.</source>
          <target state="translated">签名编解码器负责对存储在字节码中的推断返回类型进行编码和解码。签名必须包含一个适当的版本号,以便Groovy的未来版本仍然能够解码以前的版本。</target>
        </trans-unit>
        <trans-unit id="ea1441867159b516f742d798e84c7fa9fd876854" translate="yes" xml:space="preserve">
          <source>A simple ValueModel implementation which is a holder of an object value. Used to share local variables with closures</source>
          <target state="translated">一个简单的ValueModel实现,它是一个对象值的持有者。用于与闭包共享局部变量。</target>
        </trans-unit>
        <trans-unit id="fe7110e8e9240c465b4fb732c8a180c26681e66a" translate="yes" xml:space="preserve">
          <source>A simple antlr AST visitor that collects all nodes into a List.</source>
          <target state="translated">一个简单的antlr AST访问者,将所有节点收集到一个List中。</target>
        </trans-unit>
        <trans-unit id="3dcd6b25e851eba478b5a80c3f6404261124b882" translate="yes" xml:space="preserve">
          <source>A simple antlr AST visitor that outputs the tokenName of each node in a pseudo xml style.</source>
          <target state="translated">一个简单的antlr AST访问者,以伪xml风格输出每个节点的tokenName。</target>
        </trans-unit>
        <trans-unit id="cf87df90eff1d94a327aa351701732fd3d27bbe1" translate="yes" xml:space="preserve">
          <source>A simple buffer that provides line/col access to chunks of source code held within itself.</source>
          <target state="translated">一个简单的缓冲区,提供行/列访问自己的源代码块。</target>
        </trans-unit>
        <trans-unit id="b390538da1c7e66a131e806e3a18fc860183585d" translate="yes" xml:space="preserve">
          <source>A simple extension point to allow us to switch between the classic Groovy parser and the new Antlr based parser(s).</source>
          <target state="translated">一个简单的扩展点,让我们可以在经典的Groovy解析器和新的基于Antlr的解析器之间进行切换。</target>
        </trans-unit>
        <trans-unit id="a7ada20ac2427ea998486322b3d1508a18d63b0d" translate="yes" xml:space="preserve">
          <source>A simple helper class which acts as a factory of &lt;a href=&quot;../namespace/qname&quot;&gt;QName&lt;/a&gt; instances.</source>
          <target state="translated">一个简单的帮助程序类，它充当&lt;a href=&quot;../namespace/qname&quot;&gt;QName&lt;/a&gt;实例的工厂。</target>
        </trans-unit>
        <trans-unit id="ebf625b4651f39749cb980ee50d4ecf3f9fa77da" translate="yes" xml:space="preserve">
          <source>A simple iterator over an ordered (flat) List of the nodes of the AST.</source>
          <target state="translated">一个简单的迭代器,覆盖AST节点的有序(平坦)列表。</target>
        </trans-unit>
        <trans-unit id="505482f29bd948ad995a60a2e3d8fe57ab434be5" translate="yes" xml:space="preserve">
          <source>A simple preorder traversal over the supplied antlr AST.</source>
          <target state="translated">在所提供的antlr AST上进行简单的预排序遍历。</target>
        </trans-unit>
        <trans-unit id="865cb3ad64ecf0f41a4d25bb888853269231e2a3" translate="yes" xml:space="preserve">
          <source>A simple shell for invoking commands from a command-line.</source>
          <target state="translated">一个简单的shell,用于从命令行调用命令。</target>
        </trans-unit>
        <trans-unit id="33df7663ccecd9b1ccd6285e80b58c24fa7def13" translate="yes" xml:space="preserve">
          <source>A simple statement such as a method call where the return value is ignored</source>
          <target state="translated">一个简单的语句,如方法调用,返回值被忽略。</target>
        </trans-unit>
        <trans-unit id="fa7371771921e2147bea4478e745edcfec22da6d" translate="yes" xml:space="preserve">
          <source>A simple text pane that is printable and wrapping is optional.</source>
          <target state="translated">一个简单的文本窗格,可以打印,包装是可选的。</target>
        </trans-unit>
        <trans-unit id="4acbe07d7d4219d51c272a9a532f018b9d5f8c01" translate="yes" xml:space="preserve">
          <source>A simplified version of a &lt;a href=&quot;closuresignaturehint&quot;&gt;ClosureSignatureHint&lt;/a&gt; which is suitable for monomorphic closures, that is to say closures which only respond to a single signature.</source>
          <target state="translated">&lt;a href=&quot;closuresignaturehint&quot;&gt;ClosureSignatureHint的&lt;/a&gt;简化版本，适用于单态闭包，也就是说，仅响应单个签名的闭包。</target>
        </trans-unit>
        <trans-unit id="897b03120b46e9019b89390ed88423b968b6751a" translate="yes" xml:space="preserve">
          <source>A single argument in (...) or [...].</source>
          <target state="translated">(...)或[...]中的单个参数。</target>
        </trans-unit>
        <trans-unit id="13d3efe692186c54480561711a7eb521cc5106b7" translate="yes" xml:space="preserve">
          <source>A single argument in (...) or [...]. Corresponds to to a method or closure parameter. May be labeled. May be modified by the spread operator '*' ('*:' for keywords).</source>
          <target state="translated">(...)或[...]中的单个参数。对应于一个方法或闭包参数。可以被标记。可以用扩展运算符'*'('*:'表示关键字)来修改。</target>
        </trans-unit>
        <trans-unit id="ce0fbfbc9cf09097d825cc18f8d1900cecb0ac8e" translate="yes" xml:space="preserve">
          <source>A sorter for TableModels. The sorter has a model (conforming to TableModel) and itself implements TableModel. TableSorter does not store or copy the data in the TableModel, instead it maintains an array of integers which it keeps the same size as the number of rows in its model. When the model changes it notifies the sorter that something has changed eg. &quot;rowsAdded&quot; so that its internal array of integers can be reallocated. As requests are made of the sorter (like getValueAt(row, col) it redirects them to its model via the mapping array. That way the TableSorter appears to hold another copy of the table with the rows in a different order. The sorting algorithm used is stable which means that it does not move around rows when its comparison function returns 0 to denote that they are equivalent.</source>
          <target state="translated">TableModels的分拣器。分拣器有一个模型(符合TableModel),它本身也实现了TableModel。TableSorter不存储或复制TableModel中的数据,而是维护一个整数数组,它保持与模型中行数相同的大小。当模型发生变化时,它会通知分拣器有什么变化,例如 &quot;行数增加&quot;,这样它的内部整数数组就可以重新分配。当对分拣器提出请求时(如getValueAt(row,col)),它会通过映射数组将它们重定向到它的模型。这样一来,TableSorter看起来就像持有另一个表的副本,行的顺序不同。使用的排序算法是稳定的,这意味着当它的比较函数返回0来表示它们是等价的时候,它不会移动行。</target>
        </trans-unit>
        <trans-unit id="73d389510321d5877761a72a37063239e8053834" translate="yes" xml:space="preserve">
          <source>A special &quot;marker&quot; style interface allowing Groovy classes to implement both Runnable and Callable yet give preference to Runnable (for backwards compatibility) for APIs having both Runnable and Callable methods. You should generally NOT use this method in your own code.</source>
          <target state="translated">一个特殊的 &quot;标记 &quot;风格的接口,允许Groovy类同时实现Runnable和Callable,但对于同时拥有Runnable和Callable方法的API,优先选择Runnable(为了向后兼容)。一般来说,你不应该在自己的代码中使用这个方法。</target>
        </trans-unit>
        <trans-unit id="77409f949b5b774fc58be3a656321cc6b88cab62" translate="yes" xml:space="preserve">
          <source>A special hint which handles a common use case in the Groovy methods that work on maps. In case of an iteration on a list of map entries, you often want the user to be able to work either on a &lt;a href=&quot;https://docs.oracle.com/javase/8/docs/api/java/util/Map/Entry.html&quot;&gt;Entry&lt;/a&gt; map entry or on a key,value pair.</source>
          <target state="translated">一个特殊的提示，用于处理在地图上工作的Groovy方法中的常见用例。如果要在映射条目列表上进行迭代，则通常希望用户能够处理&lt;a href=&quot;https://docs.oracle.com/javase/8/docs/api/java/util/Map/Entry.html&quot;&gt;Entry&lt;/a&gt;映射条目或键，值对。</target>
        </trans-unit>
        <trans-unit id="8c400ef2997ffcf589032995199558963f290eb1" translate="yes" xml:space="preserve">
          <source>A special visitor for working with the structure of a class. In general, your will want to use the Abstract class based on this class &lt;a href=&quot;classcodevisitorsupport&quot;&gt;ClassCodeVisitorSupport&lt;/a&gt;.</source>
          <target state="translated">用于处理班级结构的特殊访问者。通常，您将要使用基于此类&lt;a href=&quot;classcodevisitorsupport&quot;&gt;ClassCodeVisitorSupport&lt;/a&gt;的Abstract类。</target>
        </trans-unit>
        <trans-unit id="0166a27d9097da9c19114e9021525ec47164cbc0" translate="yes" xml:space="preserve">
          <source>A specialized Groovy AST visitor meant to perform additional verifications upon the current AST. Currently it does checks on annotated nodes and annotations itself.</source>
          <target state="translated">一个专门的Groovy AST访问者,旨在对当前的AST进行额外的验证,目前它对注解节点和注解本身进行检查。目前,它对注解节点和注解本身进行检查。</target>
        </trans-unit>
        <trans-unit id="340ed005a3a16698c2df6053130761fdda7a028f" translate="yes" xml:space="preserve">
          <source>A specialized version of the multi type binary expression dispatcher which is aware of static compilation. It is able to generate optimized bytecode for some operations using JVM instructions when available.</source>
          <target state="translated">多类型二进制表达式调度器的专门版本,它能意识到静态编译。它能够在可用的情况下使用JVM指令为一些操作生成优化的字节码。</target>
        </trans-unit>
        <trans-unit id="1a7dc2707154ab6a70b0df111109330875485d53" translate="yes" xml:space="preserve">
          <source>A stack less exception used to indicate, that the execution of a missingMethod method failed with a MissingMethodException. This is used to prevent a call to invokeMethod for GroovyObject implementing classes.</source>
          <target state="translated">一个堆栈少异常,用于指示MissingMethod方法的执行失败,出现MissingMethodException。用于防止调用GroovyObject实现类的invokeMethod。</target>
        </trans-unit>
        <trans-unit id="1c2800edb74c84578c9b12f3adfc4a269a9d6f76" translate="yes" xml:space="preserve">
          <source>A statement is an element of a block.</source>
          <target state="translated">语句是一个块的元素。</target>
        </trans-unit>
        <trans-unit id="f481b1f5161e72308844da3e6fd2ee9560257c1a" translate="yes" xml:space="preserve">
          <source>A statement is an element of a block. Typical statements are declarations (which are scoped to the block) and expressions.</source>
          <target state="translated">语句是一个块的元素。典型的语句是声明(它的范围是块)和表达式。</target>
        </trans-unit>
        <trans-unit id="be742c65f535a7a13287b2b36877109b8cb5201e" translate="yes" xml:space="preserve">
          <source>A statement separator is either a semicolon or a significant newline.</source>
          <target state="translated">语句分隔符是分号或重要的换行符。</target>
        </trans-unit>
        <trans-unit id="c2cf1021cecca577d22453a41d95f3a5ced8b4ba" translate="yes" xml:space="preserve">
          <source>A statement separator is either a semicolon or a significant newline. Any number of additional (insignificant) newlines may accompany it.</source>
          <target state="translated">语句分隔符是分号或重要的换行符。可在其后面加上任何数量的(不重要的)换行符。</target>
        </trans-unit>
        <trans-unit id="147dd39ceeed2436f2b03de945b18110da20af27" translate="yes" xml:space="preserve">
          <source>A static compilation type checking extension, responsible for transforming unresolved method calls into direct calls to &lt;a href=&quot;basetemplate#methodMissing(java.lang.String,%20java.lang.Object)&quot;&gt;BaseTemplate.methodMissing&lt;/a&gt; for faster rendering.</source>
          <target state="translated">静态编译类型检查扩展，负责将未解决的方法调用转换为对&lt;a href=&quot;basetemplate#methodMissing(java.lang.String,%20java.lang.Object)&quot;&gt;BaseTemplate.methodMissing的&lt;/a&gt;直接调用，以加快呈现速度。</target>
        </trans-unit>
        <trans-unit id="4fe0d0dd6687f009bb2aae5cd63cec35e180c8d7" translate="yes" xml:space="preserve">
          <source>A static helper class to interface bytecode and runtime</source>
          <target state="translated">一个静态帮助类,用于连接字节码和运行时。</target>
        </trans-unit>
        <trans-unit id="c5210eae7ce0168eeb1037f2f3326e1359ff23af" translate="yes" xml:space="preserve">
          <source>A static helper class to make bytecode generation easier and act as a facade over the Invoker</source>
          <target state="translated">一个静态助手类,使字节码的生成更容易,并作为Invoker的门面。</target>
        </trans-unit>
        <trans-unit id="ecd0bf63df3e01e77841e34016568512e8d60607" translate="yes" xml:space="preserve">
          <source>A static method call on a class</source>
          <target state="translated">一个类的静态方法调用</target>
        </trans-unit>
        <trans-unit id="0f19cacad29d3003a5b5012f51deb2b5c0fcb519" translate="yes" xml:space="preserve">
          <source>A strategy method to allow derived builders to use builder-trees and switch in different kinds of builders.</source>
          <target state="translated">一种策略方法,允许派生建造者使用建造者树,并在不同种类的建造者中进行切换。</target>
        </trans-unit>
        <trans-unit id="ad737e2511fafbf53c01d065449202c463e7f184" translate="yes" xml:space="preserve">
          <source>A strategy method to allow derived builders to use builder-trees and switch in different kinds of builders. This method should call the setDelegate() method on the closure which by default passes in this but if node is-a builder we could pass that in instead (or do something wacky too)</source>
          <target state="translated">一个策略方法,允许派生的构建者使用构建者树,并在不同类型的构建者中进行切换。这个方法应该调用闭包上的setDelegate()方法,默认情况下,该方法会传入这个方法,但如果节点是一个构建器,我们可以传入这个方法来代替(或者做一些奇怪的事情)。</target>
        </trans-unit>
        <trans-unit id="68621365c26831acb2ff18dabe5c49f36cc5b1f8" translate="yes" xml:space="preserve">
          <source>A strategy method to allow derived builders to use builder-trees and switch in different kinds of builders. This method should call the setDelegate() method on the closure which by default passes in this but if node is-a builder we could pass that in instead (or do something wacky too).</source>
          <target state="translated">一个策略方法,允许派生的构建者使用构建者树,并在不同类型的构建者中进行切换。这个方法应该调用闭包上的setDelegate()方法,缺省情况下,该方法会传入这个方法,但是如果节点是一个构建器,我们可以传入这个方法来代替(或者做一些奇怪的事情)。</target>
        </trans-unit>
        <trans-unit id="78e7319db203c169b2fa7c2dde773c67ec981266" translate="yes" xml:space="preserve">
          <source>A sub-block of a block can be either open or closable.</source>
          <target state="translated">一个块的子块可以是开放的,也可以是封闭的。</target>
        </trans-unit>
        <trans-unit id="3c89d4049e244f6523e067677a1fee2210458d74" translate="yes" xml:space="preserve">
          <source>A sub-block of a block can be either open or closable. It is closable if and only if there are explicit closure arguments. Compare this to a block which is appended to a method call, which is given closure arguments, even if they are not explicit in the code.</source>
          <target state="translated">一个块的子块可以是开放的,也可以是封闭的。只有当有明确的闭包参数时,它才是可闭包的。这与附加在方法调用中的块相比,即使在代码中没有明确的闭合参数,也会被赋予闭合参数。</target>
        </trans-unit>
        <trans-unit id="28e4715718360e5f6e9527524ff4dc3e0524b375" translate="yes" xml:space="preserve">
          <source>A suffix for creating the add, remove, and get methods defaulting to the name of the listener type, e.g. if name is set to MyListener, then the class will have addMyListener, removeMyListener, and getMyListeners methods.</source>
          <target state="translated">后缀用于创建add、remove和get方法,默认为监听器类型的名称,例如,如果name被设置为MyListener,那么该类将有addMyListener、removeMyListener和getMyListeners方法。</target>
        </trans-unit>
        <trans-unit id="b5a7685dddd01b8fd4fd44560a95bc0338db96dd" translate="yes" xml:space="preserve">
          <source>A synonym for &lt;code&gt;dot( base, &quot;&quot; )&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;dot( base, &quot;&quot; )&lt;/code&gt; 同义词。</target>
        </trans-unit>
        <trans-unit id="4b89d0ccacafcee813d0b7f4ca6d5146ced5c0f1" translate="yes" xml:space="preserve">
          <source>A synonym for &lt;code&gt;gotoPhase(getPhase() + 1)&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;gotoPhase(getPhase() + 1)&lt;/code&gt; 同义词。</target>
        </trans-unit>
        <trans-unit id="122e25e2e11e7c63d4014d23aefa7f10031ce3d6" translate="yes" xml:space="preserve">
          <source>A synonym for write( writer, owner, null ).</source>
          <target state="translated">write(writer,owner,null )的同义词。</target>
        </trans-unit>
        <trans-unit id="1ac3a13af320dd989d573391821abd34cfb55677" translate="yes" xml:space="preserve">
          <source>A syntax reduction, produced by the &lt;code&gt;Parser&lt;/code&gt;.</source>
          <target state="translated">由 &lt;code&gt;Parser&lt;/code&gt; 产生的语法简化。</target>
        </trans-unit>
        <trans-unit id="3505c7b438e7b7652faee53528baedb5fe66842f" translate="yes" xml:space="preserve">
          <source>A table cell editor that will return a button automatically if it is the cell value, a text field if the value exists, or null otherwise (non editable cell). This hack allows to interact with buttons in a cell.</source>
          <target state="translated">一个表格单元格编辑器,如果它是单元格的值,它将自动返回一个按钮,如果值存在,则返回一个文本字段,否则返回null(不可编辑的单元格)。这个黑客允许与单元格中的按钮进行交互。</target>
        </trans-unit>
        <trans-unit id="c14646573b08fbd1a6ef8d62d4a59519ef6a2d41" translate="yes" xml:space="preserve">
          <source>A table cell renderer that will return a component instead of drawing it, or call the default in the case of a non component object. This hack allows to render a button shape in a table cell.</source>
          <target state="translated">一个表格单元格渲染器,它将返回一个组件而不是绘制它,或者在非组件对象的情况下调用默认值。这个黑客允许在表格单元格中渲染一个按钮形状。</target>
        </trans-unit>
        <trans-unit id="533326563f1b9847855f025db5693df07a576cde" translate="yes" xml:space="preserve">
          <source>A template engine is a factory for creating a Template instance for a given text input.</source>
          <target state="translated">模板引擎是一个工厂,用于为给定的文本输入创建一个模板实例。</target>
        </trans-unit>
        <trans-unit id="22a7eb9d381e98be9f6fe951ecfeb9d4c4eb49b2" translate="yes" xml:space="preserve">
          <source>A template engine which leverages &lt;a href=&quot;../../xml/streamingmarkupbuilder&quot;&gt;StreamingMarkupBuilder&lt;/a&gt; to generate XML/XHTML.</source>
          <target state="translated">利用&lt;a href=&quot;../../xml/streamingmarkupbuilder&quot;&gt;StreamingMarkupBuilder&lt;/a&gt;生成XML / XHTML的模板引擎。</target>
        </trans-unit>
        <trans-unit id="a46d6c1c67070b6d2ff777beac4a1fcf7570666e" translate="yes" xml:space="preserve">
          <source>A template is a block of text with an associated binding that can be output to a writer or evaluated to a string.</source>
          <target state="translated">模板是一个带有关联绑定的文本块,它可以被输出到写入器或评估为一个字符串。</target>
        </trans-unit>
        <trans-unit id="02c11f102b4f3bd84bbf951aaf2a0232d2590425" translate="yes" xml:space="preserve">
          <source>A template resolver which avoids calling &lt;a href=&quot;https://docs.oracle.com/javase/8/docs/api/java/lang/ClassLoader.html#getResource(java.lang.String)&quot;&gt;ClassLoader.getResource&lt;/a&gt; if a template path already has been queried before.</source>
          <target state="translated">一个模板解析器，如果以前已经查询过模板路径，则可以避免调用&lt;a href=&quot;https://docs.oracle.com/javase/8/docs/api/java/lang/ClassLoader.html#getResource(java.lang.String)&quot;&gt;ClassLoader.getResource&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="2b82a7dc43191688a0d67dde5432de4de191b494" translate="yes" xml:space="preserve">
          <source>A template resolver which avoids calling &lt;a href=&quot;https://docs.oracle.com/javase/8/docs/api/java/lang/ClassLoader.html#getResource(java.lang.String)&quot;&gt;ClassLoader.getResource&lt;/a&gt; if a template path already has been queried before. This improves performance if caching is enabled in the configuration.</source>
          <target state="translated">一个模板解析器，如果以前已经查询过模板路径，则可以避免调用&lt;a href=&quot;https://docs.oracle.com/javase/8/docs/api/java/lang/ClassLoader.html#getResource(java.lang.String)&quot;&gt;ClassLoader.getResource&lt;/a&gt;。如果在配置中启用了缓存，则可以提高性能。</target>
        </trans-unit>
        <trans-unit id="8c158fa08a347ae71e997206ebd8a60f5a097068" translate="yes" xml:space="preserve">
          <source>A temporary implementation of MethodKey used to perform a fast lookup for a method using a set of arguments to a method</source>
          <target state="translated">MethodKey的一个临时实现,用于使用方法的一组参数对方法进行快速查找。</target>
        </trans-unit>
        <trans-unit id="44f4af1ec481ce4ee16224c5dad16fe1d973300c" translate="yes" xml:space="preserve">
          <source>A treewalker for the antlr generated AST that attempts to visit the AST nodes in the order needed to generate valid groovy source code.</source>
          <target state="translated">一个针对antlr生成的AST的treewalker,它试图按照生成有效的groovy源代码所需的顺序访问AST节点。</target>
        </trans-unit>
        <trans-unit id="5de38746a21bed56578666bdd4417bca96b3d905" translate="yes" xml:space="preserve">
          <source>A tuple constructor is created with a parameter for each property (and optionally field and super properties). The default order is properties, pseudo/JavaBean properties and then fields for parent classes first (if includeSuperXxx annotation attributes are used). A default value is provided (using Java's default values) for all parameters in the constructor. Groovy's normal conventions then allows any number of parameters to be left off the end of the parameter list including all of the parameters - giving a no-arg constructor which can be used with the map-style naming conventions.</source>
          <target state="translated">创建了一个元组构造函数,每个属性都有一个参数(还可以选择字段和超级属性)。默认的顺序是属性、伪/JavaBean属性,然后先是父类的字段(如果使用了includeSuperXxx注解属性)。构造函数中的所有参数都会提供一个默认值(使用Java的默认值)。然后,Groovy的正常惯例允许在参数列表的最后留下任意数量的参数,包括所有的参数--给出一个无参数的构造函数,它可以与地图式的命名惯例一起使用。</target>
        </trans-unit>
        <trans-unit id="3882daa24ee487d0e09096053cb713d7d2ddacb7" translate="yes" xml:space="preserve">
          <source>A tuple-style constructor is provided which allows you to set properties in the same order as they are defined.</source>
          <target state="translated">提供了一个元组式的构造函数,允许你按照定义的相同顺序设置属性。</target>
        </trans-unit>
        <trans-unit id="bddc616a852b88b2a618253303a623bee2fac72b" translate="yes" xml:space="preserve">
          <source>A type checking extension that will take care of handling errors which are specific to enums. In particular, it will handle the enum constants within switch-case statement.</source>
          <target state="translated">一个类型检查扩展,它将负责处理enums特有的错误。特别是,它将处理switch-case语句中的枚举常量。</target>
        </trans-unit>
        <trans-unit id="70fd0f3f1bf3caf0a5db607ff3b0e4e1401e1fa6" translate="yes" xml:space="preserve">
          <source>A type checking extension that will take care of handling errors which are specific to traits. In particular, it will handle the &quot;super&quot; method calls within a trait.</source>
          <target state="translated">一个类型检查扩展,它将处理特质特有的错误。特别是,它将处理一个特质中的 &quot;超级 &quot;方法调用。</target>
        </trans-unit>
        <trans-unit id="7c3158f41fffa36ce2821217af0a9545e47bfa57" translate="yes" xml:space="preserve">
          <source>A typed parameter passed to, and returned from a CallableStatement.</source>
          <target state="translated">传递给CallableStatement的类型化参数,并从CallableStatement返回。</target>
        </trans-unit>
        <trans-unit id="3619fe4a23eff5a59a3fbc80c1156186391b9f00" translate="yes" xml:space="preserve">
          <source>A typed parameter to pass to a query</source>
          <target state="translated">一个传递给查询的类型化参数</target>
        </trans-unit>
        <trans-unit id="63479eeffe462af85ef146803099b04a6fa4e2ca" translate="yes" xml:space="preserve">
          <source>A utilities for managing groovydoc, e.g. 1) extracting groovydoc from groovy AST; 2) TODO extracting tags from groovydoc; 3) attach groovydoc to AST node as metadata</source>
          <target state="translated">一个管理groovydoc的工具,例如:1)从groovy AST中提取groovydoc;2)从groovydoc中提取标签的TODO;3)将groovydoc作为元数据附加到AST节点上。</target>
        </trans-unit>
        <trans-unit id="6f269a17587b1b972464d6fc25ad4b4436e39409" translate="yes" xml:space="preserve">
          <source>A utility class responsible for decompiling JVM class files and producing &lt;a href=&quot;classstub&quot;&gt;ClassStub&lt;/a&gt; objects reflecting their structure.</source>
          <target state="translated">一个实用程序类，负责反编译JVM类文件并生成反映其结构的&lt;a href=&quot;classstub&quot;&gt;ClassStub&lt;/a&gt;对象。</target>
        </trans-unit>
        <trans-unit id="8fb276d79f82edb20bef6f0a24353b8188626751" translate="yes" xml:space="preserve">
          <source>A utility class to help calculate hashcode values using an algorithm similar to that outlined in &quot;Effective Java, Joshua Bloch, 2nd Edition&quot;.</source>
          <target state="translated">一个帮助计算哈希码值的实用类,使用类似于 &quot;Effective Java,Joshua Bloch,2nd Edition &quot;中概述的算法。</target>
        </trans-unit>
        <trans-unit id="47ee2d87ef50c450c2ea841f692ae61092875ab5" translate="yes" xml:space="preserve">
          <source>A utility for getting information of types</source>
          <target state="translated">用于获取类型信息的工具</target>
        </trans-unit>
        <trans-unit id="429dafd17c115c98d42ba5e34e94b6b3e01f291d" translate="yes" xml:space="preserve">
          <source>A value recorded during evaluation of an assertion, along with the column it is associated with in the assertion's normalized source text.</source>
          <target state="translated">在评估断言期间记录的值,以及断言规范化源文本中与之相关的列。</target>
        </trans-unit>
        <trans-unit id="2594aa76a190025324a198bf688dd01d5e8c699c" translate="yes" xml:space="preserve">
          <source>A value supplied by the interceptor</source>
          <target state="translated">由拦截者提供的数值</target>
        </trans-unit>
        <trans-unit id="182cc242133cc39c8a3900a99903b390cbfaa4a7" translate="yes" xml:space="preserve">
          <source>A value with a weight of</source>
          <target state="translated">值的权重为</target>
        </trans-unit>
        <trans-unit id="0438c3e7210938d561e328d64a82318f749894f4" translate="yes" xml:space="preserve">
          <source>A variant of &lt;a href=&quot;#eachRow(java.lang.String,%20java.util.List,%20groovy.lang.Closure)&quot;&gt;eachRow(String, java.util.List, groovy.lang.Closure)&lt;/a&gt; useful when providing the named parameters as a map.</source>
          <target state="translated">在将命名参数作为地图提供时，&lt;a href=&quot;#eachRow(java.lang.String,%20java.util.List,%20groovy.lang.Closure)&quot;&gt;eachRow（String，java.util.List，groovy.lang.Closure）的&lt;/a&gt;一个变体。</target>
        </trans-unit>
        <trans-unit id="e0340fde4e85290646ec9d0396a20d9a2f737157" translate="yes" xml:space="preserve">
          <source>A variant of &lt;a href=&quot;#eachRow(java.lang.String,%20java.util.List,%20groovy.lang.Closure)&quot;&gt;eachRow(String, java.util.List, groovy.lang.Closure)&lt;/a&gt; useful when providing the named parameters as named arguments.</source>
          <target state="translated">提供命名参数作为命名实参时，&lt;a href=&quot;#eachRow(java.lang.String,%20java.util.List,%20groovy.lang.Closure)&quot;&gt;eachRow（String，java.util.List，groovy.lang.Closure）的&lt;/a&gt;一个变体。</target>
        </trans-unit>
        <trans-unit id="cd80b16000c9a7f3656faf840e7be83c24bf6e5f" translate="yes" xml:space="preserve">
          <source>A variant of &lt;a href=&quot;#eachRow(java.lang.String,%20java.util.List,%20groovy.lang.Closure,%20groovy.lang.Closure)&quot;&gt;eachRow(String, java.util.List, groovy.lang.Closure, groovy.lang.Closure)&lt;/a&gt; useful when providing the named parameters as a map.</source>
          <target state="translated">在将命名参数提供为地图时，&lt;a href=&quot;#eachRow(java.lang.String,%20java.util.List,%20groovy.lang.Closure,%20groovy.lang.Closure)&quot;&gt;eachRow（String，java.util.List，groovy.lang.Closure，groovy.lang.Closure）&lt;/a&gt;的变体很有用。</target>
        </trans-unit>
        <trans-unit id="d0d7978ae6b542da6b42d8f711bb3267294e0ec5" translate="yes" xml:space="preserve">
          <source>A variant of &lt;a href=&quot;#eachRow(java.lang.String,%20java.util.List,%20groovy.lang.Closure,%20groovy.lang.Closure)&quot;&gt;eachRow(String, java.util.List, groovy.lang.Closure, groovy.lang.Closure)&lt;/a&gt; useful when providing the named parameters as named arguments.</source>
          <target state="translated">当提供命名参数作为命名参数时，&lt;a href=&quot;#eachRow(java.lang.String,%20java.util.List,%20groovy.lang.Closure,%20groovy.lang.Closure)&quot;&gt;eachRow（String，java.util.List，groovy.lang.Closure，groovy.lang.Closure）&lt;/a&gt;的变体很有用。</target>
        </trans-unit>
        <trans-unit id="b2f48bbf72746eeb11597db79d3b78b50c1f73b6" translate="yes" xml:space="preserve">
          <source>A variant of &lt;a href=&quot;#eachRow(java.lang.String,%20java.util.List,%20groovy.lang.Closure,%20int,%20int,%20groovy.lang.Closure)&quot;&gt;eachRow(String, java.util.List, groovy.lang.Closure, int, int, groovy.lang.Closure)&lt;/a&gt; allowing the named parameters to be supplied as named arguments.</source>
          <target state="translated">&lt;a href=&quot;#eachRow(java.lang.String,%20java.util.List,%20groovy.lang.Closure,%20int,%20int,%20groovy.lang.Closure)&quot;&gt;eachRow（String，java.util.List，groovy.lang.Closure，int，int，groovy.lang.Closure）&lt;/a&gt;的变体，允许将命名参数作为命名参数提供。</target>
        </trans-unit>
        <trans-unit id="6a93f7f71cdfc484eb94b54be5b55c8f2e4752fc" translate="yes" xml:space="preserve">
          <source>A variant of &lt;a href=&quot;#eachRow(java.lang.String,%20java.util.List,%20groovy.lang.Closure,%20int,%20int,%20groovy.lang.Closure)&quot;&gt;eachRow(String, java.util.List, groovy.lang.Closure, int, int, groovy.lang.Closure)&lt;/a&gt; allowing the named parameters to be supplied in a map.</source>
          <target state="translated">&lt;a href=&quot;#eachRow(java.lang.String,%20java.util.List,%20groovy.lang.Closure,%20int,%20int,%20groovy.lang.Closure)&quot;&gt;eachRow（String，java.util.List，groovy.lang.Closure，int，int，groovy.lang.Closure）&lt;/a&gt;的变体，允许在映射中提供命名的参数。</target>
        </trans-unit>
        <trans-unit id="e2630606ce5149dbbe80761fabf590bba3f29ef3" translate="yes" xml:space="preserve">
          <source>A variant of &lt;a href=&quot;#eachRow(java.lang.String,%20java.util.List,%20int,%20int,%20groovy.lang.Closure)&quot;&gt;eachRow(String, java.util.List, int, int, groovy.lang.Closure)&lt;/a&gt; useful when providing the named parameters as a map.</source>
          <target state="translated">在将命名参数作为映射提供时，&lt;a href=&quot;#eachRow(java.lang.String,%20java.util.List,%20int,%20int,%20groovy.lang.Closure)&quot;&gt;eachRow（String，java.util.List，int，int，groovy.lang.Closure）的&lt;/a&gt;一个变体。</target>
        </trans-unit>
        <trans-unit id="06c059c442df0c6c79ea4dadf915a4f9507fc281" translate="yes" xml:space="preserve">
          <source>A variant of &lt;a href=&quot;#eachRow(java.lang.String,%20java.util.List,%20int,%20int,%20groovy.lang.Closure)&quot;&gt;eachRow(String, java.util.List, int, int, groovy.lang.Closure)&lt;/a&gt; useful when providing the named parameters as named arguments.</source>
          <target state="translated">提供命名参数作为命名参数时，&lt;a href=&quot;#eachRow(java.lang.String,%20java.util.List,%20int,%20int,%20groovy.lang.Closure)&quot;&gt;eachRow（String，java.util.List，int，int，groovy.lang.Closure）的变体&lt;/a&gt;很有用。</target>
        </trans-unit>
        <trans-unit id="22ae7e17c4afa27ed261b71c401949343c291e7d" translate="yes" xml:space="preserve">
          <source>A variant of &lt;a href=&quot;#execute(java.lang.String,%20java.util.List)&quot;&gt;execute(String, java.util.List)&lt;/a&gt; useful when providing the named parameters as named arguments.</source>
          <target state="translated">当提供命名参数作为命名参数时，&lt;a href=&quot;#execute(java.lang.String,%20java.util.List)&quot;&gt;execute（String，java.util.List）的&lt;/a&gt;变体很有用。</target>
        </trans-unit>
        <trans-unit id="d4b971396500373b0ffe72bb28f936e2f4601d1c" translate="yes" xml:space="preserve">
          <source>A variant of &lt;a href=&quot;#execute(java.lang.String,%20java.util.List,%20groovy.lang.Closure)&quot;&gt;execute(String, java.util.List, Closure)&lt;/a&gt; useful when providing the named parameters as named arguments.</source>
          <target state="translated">提供命名参数作为命名实参时，&lt;a href=&quot;#execute(java.lang.String,%20java.util.List,%20groovy.lang.Closure)&quot;&gt;execute（String，java.util.List，Closure）&lt;/a&gt;的变体很有用。</target>
        </trans-unit>
        <trans-unit id="cae1cc77786cbc50c17177c7538166d3830d67e8" translate="yes" xml:space="preserve">
          <source>A variant of &lt;a href=&quot;#executeInsert(java.lang.String,%20java.util.List)&quot;&gt;executeInsert(String, java.util.List)&lt;/a&gt; useful when providing the named parameters as named arguments.</source>
          <target state="translated">当提供命名参数作为命名参数时，&lt;a href=&quot;#executeInsert(java.lang.String,%20java.util.List)&quot;&gt;executeInsert（String，java.util.List）的&lt;/a&gt;变体很有用。</target>
        </trans-unit>
        <trans-unit id="24aa7d50922187efcd79a094a60797cc47f4d28e" translate="yes" xml:space="preserve">
          <source>A variant of &lt;a href=&quot;#executeInsert(java.lang.String,%20java.util.List,%20java.util.List)&quot;&gt;executeInsert(String, List, List)&lt;/a&gt; useful when providing the named parameters as named arguments.</source>
          <target state="translated">当提供命名参数作为命名参数时，&lt;a href=&quot;#executeInsert(java.lang.String,%20java.util.List,%20java.util.List)&quot;&gt;executeInsert（String，List，List）&lt;/a&gt;的变体很有用。</target>
        </trans-unit>
        <trans-unit id="0962f4039c5163a09096ab730190b10996f15975" translate="yes" xml:space="preserve">
          <source>A variant of &lt;a href=&quot;#executeInsert(java.lang.String,%20java.util.List,%20java.util.List)&quot;&gt;executeInsert(String, List, List)&lt;/a&gt; useful when providing the named parameters as named arguments. This variant allows you to receive the values of any auto-generated columns, such as an autoincrement ID field (or fields) when you know the column name(s) of the ID field(s).</source>
          <target state="translated">当提供命名参数作为命名参数时，&lt;a href=&quot;#executeInsert(java.lang.String,%20java.util.List,%20java.util.List)&quot;&gt;executeInsert（String，List，List）&lt;/a&gt;的变体很有用。使用此变体，您可以在知道ID字段的列名称的情况下接收任何自动生成的列的值，例如一个（或多个）自动增量ID字段。</target>
        </trans-unit>
        <trans-unit id="eed9df53d2156adabcf89fa51aaa0f1929226513" translate="yes" xml:space="preserve">
          <source>A variant of &lt;a href=&quot;#executeUpdate(java.lang.String,%20java.util.List)&quot;&gt;executeUpdate(String, java.util.List)&lt;/a&gt; useful when providing the named parameters as named arguments.</source>
          <target state="translated">提供命名参数作为命名参数时，&lt;a href=&quot;#executeUpdate(java.lang.String,%20java.util.List)&quot;&gt;executeUpdate（String，java.util.List）的&lt;/a&gt;变体很有用。</target>
        </trans-unit>
        <trans-unit id="0c151fb1016966b39e6c8e046fec4b1507f13d5a" translate="yes" xml:space="preserve">
          <source>A variant of &lt;a href=&quot;#firstRow(java.lang.String,%20java.util.List)&quot;&gt;firstRow(String, java.util.List)&lt;/a&gt; useful when providing the named parameters as named arguments.</source>
          <target state="translated">&lt;a href=&quot;#firstRow(java.lang.String,%20java.util.List)&quot;&gt;firstRow（String，java.util.List）的&lt;/a&gt;变体，在提供命名参数作为命名参数时很有用。</target>
        </trans-unit>
        <trans-unit id="8723ff5fcf0b2bfd303b4e5a4e787d094c63e5df" translate="yes" xml:space="preserve">
          <source>A variant of &lt;a href=&quot;#query(java.lang.String,%20java.util.List,%20groovy.lang.Closure)&quot;&gt;query(String, java.util.List, groovy.lang.Closure)&lt;/a&gt; useful when providing the named parameters as a map.</source>
          <target state="translated">&lt;a href=&quot;#query(java.lang.String,%20java.util.List,%20groovy.lang.Closure)&quot;&gt;query（String，java.util.List，groovy.lang.Closure）&lt;/a&gt;的变体，在提供命名参数作为映射时很有用。</target>
        </trans-unit>
        <trans-unit id="902b8d45fec1a0b2e57c86b5a37b7bb8945c58a4" translate="yes" xml:space="preserve">
          <source>A variant of &lt;a href=&quot;#query(java.lang.String,%20java.util.List,%20groovy.lang.Closure)&quot;&gt;query(String, java.util.List, groovy.lang.Closure)&lt;/a&gt; useful when providing the named parameters as named arguments.</source>
          <target state="translated">当提供命名参数作为命名参数时，&lt;a href=&quot;#query(java.lang.String,%20java.util.List,%20groovy.lang.Closure)&quot;&gt;query（String，java.util.List，groovy.lang.Closure）&lt;/a&gt;的变体很有用。</target>
        </trans-unit>
        <trans-unit id="d15f23d7d3c8fb9ac946bbaebddfadf65b3ab6a3" translate="yes" xml:space="preserve">
          <source>A variant of &lt;a href=&quot;#rows(java.lang.String,%20java.util.List)&quot;&gt;rows(String, java.util.List)&lt;/a&gt; useful when providing the named parameters as named arguments.</source>
          <target state="translated">当提供命名参数作为命名参数时&lt;a href=&quot;#rows(java.lang.String,%20java.util.List)&quot;&gt;，&lt;/a&gt;有用的rows（String，java.util.List）的变体。</target>
        </trans-unit>
        <trans-unit id="6365ea03d9b5842b2b398429cf7beb396ca8d6ba" translate="yes" xml:space="preserve">
          <source>A variant of &lt;a href=&quot;#rows(java.lang.String,%20java.util.List,%20groovy.lang.Closure)&quot;&gt;rows(String, java.util.List, groovy.lang.Closure)&lt;/a&gt; useful when providing the named parameters as a map.</source>
          <target state="translated">当提供命名参数作为映射时&lt;a href=&quot;#rows(java.lang.String,%20java.util.List,%20groovy.lang.Closure)&quot;&gt;，&lt;/a&gt;有用的rows（String，java.util.List，groovy.lang.Closure）的变体。</target>
        </trans-unit>
        <trans-unit id="33e0dec64892021e6736acb26e91fbd5ffc61eaf" translate="yes" xml:space="preserve">
          <source>A variant of &lt;a href=&quot;#rows(java.lang.String,%20java.util.List,%20groovy.lang.Closure)&quot;&gt;rows(String, java.util.List, groovy.lang.Closure)&lt;/a&gt; useful when providing the named parameters as named arguments.</source>
          <target state="translated">当提供命名参数作为命名参数时&lt;a href=&quot;#rows(java.lang.String,%20java.util.List,%20groovy.lang.Closure)&quot;&gt;，&lt;/a&gt;有用的rows（String，java.util.List，groovy.lang.Closure）的变体。</target>
        </trans-unit>
        <trans-unit id="8cb8eb13c9b2f8ada425b500bf1e859ce8094395" translate="yes" xml:space="preserve">
          <source>A variant of &lt;a href=&quot;#rows(java.lang.String,%20java.util.List,%20int,%20int)&quot;&gt;rows(String, java.util.List, int, int)&lt;/a&gt; useful when providing the named parameters as a map.</source>
          <target state="translated">当提供命名参数作为映射时&lt;a href=&quot;#rows(java.lang.String,%20java.util.List,%20int,%20int)&quot;&gt;，&lt;/a&gt;有用的rows（String，java.util.List，int，int）的变体。</target>
        </trans-unit>
        <trans-unit id="90b94128f5975e59c5e816c72f8e0e129d238857" translate="yes" xml:space="preserve">
          <source>A variant of &lt;a href=&quot;#rows(java.lang.String,%20java.util.List,%20int,%20int)&quot;&gt;rows(String, java.util.List, int, int)&lt;/a&gt; useful when providing the named parameters as named arguments.</source>
          <target state="translated">当提供命名参数作为命名参数时&lt;a href=&quot;#rows(java.lang.String,%20java.util.List,%20int,%20int)&quot;&gt;，&lt;/a&gt;有用的rows（String，java.util.List，int，int）的变体。</target>
        </trans-unit>
        <trans-unit id="842dad57fd8c8aac7efaf2a53d738bcc958de561" translate="yes" xml:space="preserve">
          <source>A variant of &lt;a href=&quot;#rows(java.lang.String,%20java.util.List,%20int,%20int,%20groovy.lang.Closure)&quot;&gt;rows(String, java.util.List, int, int, groovy.lang.Closure)&lt;/a&gt; useful when providing the named parameters as a map.</source>
          <target state="translated">当提供命名参数作为映射时，&lt;a href=&quot;#rows(java.lang.String,%20java.util.List,%20int,%20int,%20groovy.lang.Closure)&quot;&gt;行的&lt;/a&gt;一种变体（字符串，java.util.List，int，int，groovy.lang.Closure）很有用。</target>
        </trans-unit>
        <trans-unit id="b2db5bc551cbda7b94642b908b6f27ffb623af2b" translate="yes" xml:space="preserve">
          <source>A variant of &lt;a href=&quot;#rows(java.lang.String,%20java.util.List,%20int,%20int,%20groovy.lang.Closure)&quot;&gt;rows(String, java.util.List, int, int, groovy.lang.Closure)&lt;/a&gt; useful when providing the named parameters as named arguments.</source>
          <target state="translated">当提供命名参数作为命名参数时，&lt;a href=&quot;#rows(java.lang.String,%20java.util.List,%20int,%20int,%20groovy.lang.Closure)&quot;&gt;行的&lt;/a&gt;一种变体（字符串，java.util.List，int，int，groovy.lang.Closure）很有用。</target>
        </trans-unit>
        <trans-unit id="1cc780a42c269df9f167bcd87b2d5f77d7ffd224" translate="yes" xml:space="preserve">
          <source>A variant of collectEntries for Iterable objects using the identity closure as the transform.</source>
          <target state="translated">对Iterable对象使用身份闭包作为变换的collectEntries的变体。</target>
        </trans-unit>
        <trans-unit id="951ac163e309833cb5e057d8f60b9c5ac3b884ab" translate="yes" xml:space="preserve">
          <source>A variant of collectEntries for Iterable objects using the identity closure as the transform. The source Iterable should contain a list of &lt;code&gt;[key, value]&lt;/code&gt; tuples or &lt;code&gt;Map.Entry&lt;/code&gt; objects.</source>
          <target state="translated">使用身份闭包作为转换的Iterable对象的collectEntries的变体。源Iterable应包含 &lt;code&gt;[key, value]&lt;/code&gt; 元组或 &lt;code&gt;Map.Entry&lt;/code&gt; 对象的列表。</target>
        </trans-unit>
        <trans-unit id="7c4714caa90724091353f8de3448dd1b48a4fa65" translate="yes" xml:space="preserve">
          <source>A variant of collectEntries for Iterables using the identity closure as the transform and a supplied map as the destination of transformed entries.</source>
          <target state="translated">Iterables 的 collectEntries 的一个变体,使用身份闭包作为转换,并使用提供的映射作为转换后的条目的目标。</target>
        </trans-unit>
        <trans-unit id="187a884f1b0b54b49e917a436dafe393b4dbe242" translate="yes" xml:space="preserve">
          <source>A variant of collectEntries for Iterators using a supplied map as the destination of transformed entries.</source>
          <target state="translated">迭代器的 collectEntries 的一个变体,使用提供的地图作为转换条目的目标。</target>
        </trans-unit>
        <trans-unit id="23c84e9be13aceb564ae11ffb6ad2da2ce641e23" translate="yes" xml:space="preserve">
          <source>A variant of collectEntries for Iterators using the identity closure as the transform and a supplied map as the destination of transformed entries.</source>
          <target state="translated">collectEntries for Iterators 的变体,使用身份闭包作为转换,并使用所提供的映射作为转换后条目的目标。</target>
        </trans-unit>
        <trans-unit id="11b2a6bf9c01c9ce3a251150121318a631b29cb1" translate="yes" xml:space="preserve">
          <source>A variant of collectEntries for Iterators using the identity closure as the transform.</source>
          <target state="translated">Iterators 的 collectEntries 的一个变体,使用身份闭合作为变换。</target>
        </trans-unit>
        <trans-unit id="3290c9327e10ba9b0134c1f7d8929e97651cd8f2" translate="yes" xml:space="preserve">
          <source>A variant of collectEntries for Iterators.</source>
          <target state="translated">Iterators 的 collectEntries 的变种。</target>
        </trans-unit>
        <trans-unit id="e75133de41f537cc827f7b21e007b501bf68d8ce" translate="yes" xml:space="preserve">
          <source>A variant of collectEntries using the identity closure as the transform.</source>
          <target state="translated">使用身份闭合作为变换的 collectEntries 的一个变体。</target>
        </trans-unit>
        <trans-unit id="1f5b276258ec859c5cef69ccb0b1e745441354b5" translate="yes" xml:space="preserve">
          <source>A visitor that prints a html tags of each node to the supplied PrintStream</source>
          <target state="translated">将每个节点的html标签打印到所提供的PrintStream中的访问者。</target>
        </trans-unit>
        <trans-unit id="2d344a9d438b047ef05b8bd137236b12f5a324d7" translate="yes" xml:space="preserve">
          <source>A visitor that prints a html tags, for each node, to the supplied PrintStream.</source>
          <target state="translated">一个访问者,为每个节点打印html标签到提供的PrintStream。</target>
        </trans-unit>
        <trans-unit id="9d82ccf68f43c7945532dd4c082476d4e1dee65a" translate="yes" xml:space="preserve">
          <source>A visitor that prints a pseudo xml output to the supplied PrintStream</source>
          <target state="translated">打印一个伪xml输出到所提供的PrintStream的访问者。</target>
        </trans-unit>
        <trans-unit id="700e2a6c9d4978a0ebf617b57699748b445489ab" translate="yes" xml:space="preserve">
          <source>A visitor that prints groovy source code for each node visited.</source>
          <target state="translated">一个为每个被访问的节点打印groovy源代码的访问者。</target>
        </trans-unit>
        <trans-unit id="775af2cc27d2378fa3719655ed28ef9adac9b08b" translate="yes" xml:space="preserve">
          <source>A visitor which collects Groovydoc information.</source>
          <target state="translated">收集Groovydoc信息的访客。</target>
        </trans-unit>
        <trans-unit id="569c21853c206c9756ab9b5890ad117420efb618" translate="yes" xml:space="preserve">
          <source>A visitor which collects the list of variable expressions which are closure shared.</source>
          <target state="translated">一个收集闭联共享的变量表达式列表的访问者。</target>
        </trans-unit>
        <trans-unit id="93014f9dc4f3b287b8763047ec597506a17bc910" translate="yes" xml:space="preserve">
          <source>A weigher where a value has a weight of</source>
          <target state="translated">一个称重器,其中一个值的重量为</target>
        </trans-unit>
        <trans-unit id="cef7c48ae5b1d28190d744907d72cb9ac8c9a213" translate="yes" xml:space="preserve">
          <source>A weigher where a value takes one unit of capacity.</source>
          <target state="translated">称重机,一个数值取一个单位的容量。</target>
        </trans-unit>
        <trans-unit id="fb4c3b4795d1ef0081e7a37e97a8a2a1dc905047" translate="yes" xml:space="preserve">
          <source>A weigher where an entry has a weight of</source>
          <target state="translated">称重机,其中一个条目的重量为...。</target>
        </trans-unit>
        <trans-unit id="3365b3436c91ad65bead70d1efaf351033dc8d81" translate="yes" xml:space="preserve">
          <source>A weigher where each byte takes one unit of capacity.</source>
          <target state="translated">一个称重器,每个字节取一个单位的容量。</target>
        </trans-unit>
        <trans-unit id="4d0808a689b4c32e2d650b2e08adbbd248752425" translate="yes" xml:space="preserve">
          <source>A weigher where each element takes one unit of capacity.</source>
          <target state="translated">称重机,每个元件取一个单位的容量。</target>
        </trans-unit>
        <trans-unit id="d08333cb694a39f90a36bccfbe826468d749a8ad" translate="yes" xml:space="preserve">
          <source>A weigher where each entry takes one unit of capacity.</source>
          <target state="translated">称重机,每个条目取一个单位的容量。</target>
        </trans-unit>
        <trans-unit id="5e1297106801ba887052a139f19f213c30d1cd9f" translate="yes" xml:space="preserve">
          <source>A weigher where the value is a &lt;a href=&quot;https://docs.oracle.com/javase/8/docs/api/java/lang/Iterable.html&quot;&gt;Iterable&lt;/a&gt; and its weight is the number of elements.</source>
          <target state="translated">称量器，其中值是&lt;a href=&quot;https://docs.oracle.com/javase/8/docs/api/java/lang/Iterable.html&quot;&gt;Iterable&lt;/a&gt;，其权重是元素数。</target>
        </trans-unit>
        <trans-unit id="e80e0ddf684fd4f348717fc3863ffc81e0b23857" translate="yes" xml:space="preserve">
          <source>A weigher where the value is a &lt;a href=&quot;https://docs.oracle.com/javase/8/docs/api/java/lang/Iterable.html&quot;&gt;Iterable&lt;/a&gt; and its weight is the number of elements. This weigher only should be used when the alternative &lt;a href=&quot;#collection()&quot;&gt;collection()&lt;/a&gt; weigher cannot be, as evaluation takes O(n) time. A map bounded with this weigher will evict when the total number of elements exceeds the capacity rather than the number of key-value pairs in the map.</source>
          <target state="translated">称量器，其中值是&lt;a href=&quot;https://docs.oracle.com/javase/8/docs/api/java/lang/Iterable.html&quot;&gt;Iterable&lt;/a&gt;，其权重是元素数。仅当不能使用替代&lt;a href=&quot;#collection()&quot;&gt;collection（）&lt;/a&gt;称重器时才应使用此称重器，因为评估需要O（n）时间。当元素的总数超过容量而不是地图中的键/值对的数量时，以该称重器为边界的地图将被逐出。</target>
        </trans-unit>
        <trans-unit id="2c8f8dfead177d95cc7b29543ae56e20e4b130f5" translate="yes" xml:space="preserve">
          <source>A weigher where the value is a &lt;a href=&quot;https://docs.oracle.com/javase/8/docs/api/java/util/Collection.html&quot;&gt;Collection&lt;/a&gt; and its weight is the number of elements.</source>
          <target state="translated">称量器，其中值是&lt;a href=&quot;https://docs.oracle.com/javase/8/docs/api/java/util/Collection.html&quot;&gt;Collection&lt;/a&gt;，其权重是元素数。</target>
        </trans-unit>
        <trans-unit id="cb443d19e584091fe8deeab89d07fd58dfcd8f39" translate="yes" xml:space="preserve">
          <source>A weigher where the value is a &lt;a href=&quot;https://docs.oracle.com/javase/8/docs/api/java/util/Collection.html&quot;&gt;Collection&lt;/a&gt; and its weight is the number of elements. A map bounded with this weigher will evict when the total number of elements exceeds the capacity rather than the number of key-value pairs in the map.</source>
          <target state="translated">称量器，其中值是&lt;a href=&quot;https://docs.oracle.com/javase/8/docs/api/java/util/Collection.html&quot;&gt;Collection&lt;/a&gt;，其权重是元素数。当元素的总数超过容量而不是地图中的键/值对的数量时，以该称重器为边界的地图将被逐出。</target>
        </trans-unit>
        <trans-unit id="f0a4bafb6367f9b860366f2fae4536239e196352" translate="yes" xml:space="preserve">
          <source>A weigher where the value is a &lt;a href=&quot;https://docs.oracle.com/javase/8/docs/api/java/util/List.html&quot;&gt;List&lt;/a&gt; and its weight is the number of elements.</source>
          <target state="translated">称量器，其中值是&lt;a href=&quot;https://docs.oracle.com/javase/8/docs/api/java/util/List.html&quot;&gt;列表&lt;/a&gt;，其权重是元素数。</target>
        </trans-unit>
        <trans-unit id="3ed32aea01671919965375b25e823eb0ae3e5666" translate="yes" xml:space="preserve">
          <source>A weigher where the value is a &lt;a href=&quot;https://docs.oracle.com/javase/8/docs/api/java/util/List.html&quot;&gt;List&lt;/a&gt; and its weight is the number of elements. A map bounded with this weigher will evict when the total number of elements exceeds the capacity rather than the number of key-value pairs in the map.</source>
          <target state="translated">称量器，其中值是&lt;a href=&quot;https://docs.oracle.com/javase/8/docs/api/java/util/List.html&quot;&gt;列表&lt;/a&gt;，其权重是元素数。当元素的总数超过容量而不是地图中的键/值对的数量时，以该称重器为边界的地图将被逐出。</target>
        </trans-unit>
        <trans-unit id="59c3169db3bf09590e63e2f29ce2980949e41ccb" translate="yes" xml:space="preserve">
          <source>A weigher where the value is a &lt;a href=&quot;https://docs.oracle.com/javase/8/docs/api/java/util/Map.html&quot;&gt;Map&lt;/a&gt; and its weight is the number of entries.</source>
          <target state="translated">称量器，其中值是&lt;a href=&quot;https://docs.oracle.com/javase/8/docs/api/java/util/Map.html&quot;&gt;Map&lt;/a&gt;，其权重是条目数。</target>
        </trans-unit>
        <trans-unit id="78dedde5b830f98ea61ceeb68212e309cc8c6a5c" translate="yes" xml:space="preserve">
          <source>A weigher where the value is a &lt;a href=&quot;https://docs.oracle.com/javase/8/docs/api/java/util/Map.html&quot;&gt;Map&lt;/a&gt; and its weight is the number of entries. A map bounded with this weigher will evict when the total number of entries across all values exceeds the capacity rather than the number of key-value pairs in the map.</source>
          <target state="translated">称量器，其中值是&lt;a href=&quot;https://docs.oracle.com/javase/8/docs/api/java/util/Map.html&quot;&gt;Map&lt;/a&gt;，其权重是条目数。当所有值上的条目总数超过容量而不是映射中的键/值对数量时，以该称重器为边界的映射将被逐出。</target>
        </trans-unit>
        <trans-unit id="bc2c7984e1fc773e7cc98af45c4596804ea17c09" translate="yes" xml:space="preserve">
          <source>A weigher where the value is a &lt;a href=&quot;https://docs.oracle.com/javase/8/docs/api/java/util/Set.html&quot;&gt;Set&lt;/a&gt; and its weight is the number of elements.</source>
          <target state="translated">称重器，其中值是&lt;a href=&quot;https://docs.oracle.com/javase/8/docs/api/java/util/Set.html&quot;&gt;Set&lt;/a&gt;，其权重是元素数。</target>
        </trans-unit>
        <trans-unit id="313ba1f460ebcff6e76f040e10b87f5a177fcedd" translate="yes" xml:space="preserve">
          <source>A weigher where the value is a &lt;a href=&quot;https://docs.oracle.com/javase/8/docs/api/java/util/Set.html&quot;&gt;Set&lt;/a&gt; and its weight is the number of elements. A map bounded with this weigher will evict when the total number of elements exceeds the capacity rather than the number of key-value pairs in the map.</source>
          <target state="translated">称重器，其中值是&lt;a href=&quot;https://docs.oracle.com/javase/8/docs/api/java/util/Set.html&quot;&gt;Set&lt;/a&gt;，其权重是元素数。当元素的总数超过容量而不是地图中的键/值对的数量时，以该称重器为边界的地图将被逐出。</target>
        </trans-unit>
        <trans-unit id="affd766eb6b2a1f687236dd93ed2cf71eec2a4e3" translate="yes" xml:space="preserve">
          <source>A weigher where the value is a byte array and its weight is the number of bytes.</source>
          <target state="translated">一个称量器,其值是一个字节数组,其重量是字节数。</target>
        </trans-unit>
        <trans-unit id="6c8dc641a576c683037a7da1cc47d864c7dc261b" translate="yes" xml:space="preserve">
          <source>A weigher where the value is a byte array and its weight is the number of bytes. A map bounded with this weigher will evict when the number of bytes exceeds the capacity rather than the number of key-value pairs in the map. This allows for restricting the capacity based on the memory-consumption and is primarily for usage by dedicated caching servers that hold the serialized data.</source>
          <target state="translated">一个权重器,其值是一个字节数组,权重是字节数。当字节数超过容量而不是地图中键值对的数量时,使用该权重器绑定的地图将被驱逐。这就可以根据内存消耗来限制容量,主要用于存放序列化数据的专用缓存服务器。</target>
        </trans-unit>
        <trans-unit id="21f6ab40897d8a4e542925a0f5e01e11c71b2058" translate="yes" xml:space="preserve">
          <source>A wrapper for &lt;a href=&quot;https://docs.oracle.com/javase/8/docs/api/java/util/List.html&quot;&gt;List&lt;/a&gt; which automatically grows the list when either &lt;a href=&quot;#get(int)&quot;&gt;get(int)&lt;/a&gt; or &lt;a href=&quot;#getAt(int)&quot;&gt;getAt(int)&lt;/a&gt; is called with an index greater than or equal to &lt;code&gt;size()&lt;/code&gt;.</source>
          <target state="translated">&lt;a href=&quot;https://docs.oracle.com/javase/8/docs/api/java/util/List.html&quot;&gt;List&lt;/a&gt;的包装器，当使用大于或等于 &lt;code&gt;size()&lt;/code&gt; 的索引调用&lt;a href=&quot;#get(int)&quot;&gt;get（int）&lt;/a&gt;或&lt;a href=&quot;#getAt(int)&quot;&gt;getAt（int）&lt;/a&gt;时，该包装器将自动增长列表。</target>
        </trans-unit>
        <trans-unit id="7e4029ca47de5e3af5fb0fa3d6cf5faf70299741" translate="yes" xml:space="preserve">
          <source>A wrapper for Closure to support composition. Normally used only internally through the &lt;code&gt;rightShift()&lt;/code&gt; and &lt;code&gt;leftShift()&lt;/code&gt; methods on &lt;code&gt;Closure&lt;/code&gt;.</source>
          <target state="translated">一种用于封闭物的包装物，以支撑组合物。通常仅在内部使用通过 &lt;code&gt;rightShift()&lt;/code&gt; 和 &lt;code&gt;leftShift()&lt;/code&gt; 上的方法 &lt;code&gt;Closure&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="29c713118b23107659d2079441632ffded8a14fa" translate="yes" xml:space="preserve">
          <source>A wrapper for Closure to support currying. Normally used only internally through the &lt;code&gt;curry()&lt;/code&gt;, &lt;code&gt;rcurry()&lt;/code&gt; or &lt;code&gt;ncurry()&lt;/code&gt; methods on &lt;code&gt;Closure&lt;/code&gt;. Typical usages:</source>
          <target state="translated">Closure的包装器，用于支持currying。通常仅在 &lt;code&gt;Closure&lt;/code&gt; 上通过 &lt;code&gt;curry()&lt;/code&gt; ， &lt;code&gt;rcurry()&lt;/code&gt; 或 &lt;code&gt;ncurry()&lt;/code&gt; 方法在内部使用。典型用法：</target>
        </trans-unit>
        <trans-unit id="d62c991bc91a313f91eb2ec0623f215fd8d1b052" translate="yes" xml:space="preserve">
          <source>A wrapper for Map which allows a default value to be specified.</source>
          <target state="translated">Map的一个包装器,允许指定一个默认值。</target>
        </trans-unit>
        <trans-unit id="36f976ad7c7b4f99ca17011ebad8f3e8bcbafce2" translate="yes" xml:space="preserve">
          <source>A writer which delegates to another writer and supports an additional indenting level.</source>
          <target state="translated">委托给另一个作家,并支持额外的缩进级别的作家。</target>
        </trans-unit>
        <trans-unit id="edf676600d7dbd580b263209161163f8e5d54586" translate="yes" xml:space="preserve">
          <source>API.</source>
          <target state="translated">API.</target>
        </trans-unit>
        <trans-unit id="c217a1c77434398486565be4e0776cea1a75ee07" translate="yes" xml:space="preserve">
          <source>AST completion</source>
          <target state="translated">AST完成</target>
        </trans-unit>
        <trans-unit id="0f7e932cd6845d0f350d49f90570da50067150eb" translate="yes" xml:space="preserve">
          <source>AST effect: Create a separate Type/Var tree for each var in the var list. Must be guarded, as in (declarationStart) =&amp;gt; declaration.</source>
          <target state="translated">AST效果：为var列表中的每个var创建一个单独的Type / Var树。必须受到保护，如（declarationStart）=&amp;gt;声明中所述。</target>
        </trans-unit>
        <trans-unit id="2e5e8402f3b09d08e95812a2244c2de145a67850" translate="yes" xml:space="preserve">
          <source>AST nodes for Groovy expressions</source>
          <target state="translated">Groovy表达式的AST节点</target>
        </trans-unit>
        <trans-unit id="ec75671496c8e7774e06fb08c5812ecd728093bb" translate="yes" xml:space="preserve">
          <source>AST nodes for Groovy statements</source>
          <target state="translated">Groovy语句的AST节点</target>
        </trans-unit>
        <trans-unit id="83d2f83378581611a11cf2d8113977a393193d9f" translate="yes" xml:space="preserve">
          <source>AST semantic analysis and elucidation</source>
          <target state="translated">AST语义分析与阐释</target>
        </trans-unit>
        <trans-unit id="34079af8ec81c9e419ba24dd531f2913363db524" translate="yes" xml:space="preserve">
          <source>ASTTransformation</source>
          <target state="translated">ASTTransformation</target>
        </trans-unit>
        <trans-unit id="c7d3fe558f46cd2d321834af0cec41ec3735deb2" translate="yes" xml:space="preserve">
          <source>Abstract base class for any GroovyCodeVisitor which by default just walks the code and expression tree</source>
          <target state="translated">适用于任何GroovyCodeVisitor的抽象基类,默认情况下,它只是走动代码和表达式树。</target>
        </trans-unit>
        <trans-unit id="6b9096b433569b5730d098e76523fd5b54a00965" translate="yes" xml:space="preserve">
          <source>Abstract base class for generator of Java class versions of Groovy AST classes</source>
          <target state="translated">用于生成Groovy AST类的Java类版本的抽象基类。</target>
        </trans-unit>
        <trans-unit id="657152b4f3229039c7b6b2ef8e2885fbf55c18a6" translate="yes" xml:space="preserve">
          <source>AbstractConcurrentMapBaseEntry</source>
          <target state="translated">AbstractConcurrentMapBaseEntry</target>
        </trans-unit>
        <trans-unit id="eb957844acc156e1f473fcf3815a80d331d9e58d" translate="yes" xml:space="preserve">
          <source>AbstractConcurrentMapEntry</source>
          <target state="translated">AbstractConcurrentMapEntry</target>
        </trans-unit>
        <trans-unit id="27ac80297a33b13abf26e00ff51245665998944f" translate="yes" xml:space="preserve">
          <source>AbstractFunctionalInterfaceWriter</source>
          <target state="translated">AbstractFunctionalInterfaceWriter</target>
        </trans-unit>
        <trans-unit id="9db95a6438006f1577a3a34c3e5ca51f2b813d05" translate="yes" xml:space="preserve">
          <source>Abstraction for Java version dependent ClassValue implementations.</source>
          <target state="translated">Java版本依赖的ClassValue实现的抽象。</target>
        </trans-unit>
        <trans-unit id="a3096472fc4309d4545d7243ff1ebdb443cf0c34" translate="yes" xml:space="preserve">
          <source>Accepted Properties...</source>
          <target state="translated">接受的属性...</target>
        </trans-unit>
        <trans-unit id="3f7f88af3a8143a862663a17396bd1f21d7fb44c" translate="yes" xml:space="preserve">
          <source>Accepted Properties... group? source ((sourceProperty) | (sourceEvent sourceValue)) (target targetProperty)? (? use default javabeans property if targetProperty is not present?)</source>
          <target state="translated">接受的属性......组? 来源((sourceProperty)| (sourceEvent sourceValue))(target targetProperty)? (?如果targetProperty不存在,就使用默认的javabeans属性?)</target>
        </trans-unit>
        <trans-unit id="2fa4d2b71f9b36e0ec08477ae79a200aeda2dea4" translate="yes" xml:space="preserve">
          <source>Accepts a connection and passes the resulting Socket to the closure which runs in a new Thread or the calling thread, as needed.</source>
          <target state="translated">接受一个连接,并根据需要将产生的Socket传递给在新线程或调用线程中运行的闭包。</target>
        </trans-unit>
        <trans-unit id="2e4032d634920b2841b825ea6370cf5ed9b879bb" translate="yes" xml:space="preserve">
          <source>Accepts a connection and passes the resulting Socket to the closure which runs in a new Thread.</source>
          <target state="translated">接受一个连接,并将产生的Socket传递给在新线程中运行的闭包。</target>
        </trans-unit>
        <trans-unit id="29c58decf494e0250cba52549919cb4e9ae0f84d" translate="yes" xml:space="preserve">
          <source>Access the return type for this method</source>
          <target state="translated">访问本方法的返回类型</target>
        </trans-unit>
        <trans-unit id="85faed1d5df6c3365168b3db7c196c80dded0591" translate="yes" xml:space="preserve">
          <source>Access to the GroovyDoc tool from Ant.</source>
          <target state="translated">从Ant访问GroovyDoc工具。</target>
        </trans-unit>
        <trans-unit id="cd3d773db8248b8cf242eb75dafdd3ed0b6ebc14" translate="yes" xml:space="preserve">
          <source>According to the initial entry count, calculate the initial capacity of hash map, which is power of 2 (SEE https://stackoverflow.com/questions/8352378/why-does-hashmap-require-that-the-initial-capacity-be-a-power-of-two)</source>
          <target state="translated">根据初始录入数,计算出哈希图的初始容量,即2的幂。(SEE https://stackoverflow.com/questions/8352378/why-does-hashmap-require-that-the-initial-capacity-be-a-power-of-two)</target>
        </trans-unit>
        <trans-unit id="198a121a1937a7b234221a96faf83ed76c1555f5" translate="yes" xml:space="preserve">
          <source>Accumulates the elements of stream into a new List.</source>
          <target state="translated">将流的元素累加到一个新的List中。</target>
        </trans-unit>
        <trans-unit id="29e564eaba5209d86b74024711021340489f35a2" translate="yes" xml:space="preserve">
          <source>Accumulates the elements of stream into a new Set.</source>
          <target state="translated">将流的元素累加到一个新的Set中。</target>
        </trans-unit>
        <trans-unit id="c7341c99f5edf01729e1e0990500962c2dce957d" translate="yes" xml:space="preserve">
          <source>ActionListener</source>
          <target state="translated">ActionListener</target>
        </trans-unit>
        <trans-unit id="1ae1a45bd87aa1a40f027ca0d57bcbde6ede8763" translate="yes" xml:space="preserve">
          <source>Adapted from ConcurrentHashMap (Doug Lea)</source>
          <target state="translated">改编自 ConcurrentHashMap (Doug Lea)</target>
        </trans-unit>
        <trans-unit id="9ef4bad019492bab7685f6badc7ddccbdeaba4c4" translate="yes" xml:space="preserve">
          <source>AdaptingMetaClass</source>
          <target state="translated">AdaptingMetaClass</target>
        </trans-unit>
        <trans-unit id="34b98767738f3900382e3ba13e1f1232d2340a0a" translate="yes" xml:space="preserve">
          <source>Adapts Grails taglibs for use in the template engine. An adapter may be created like this:</source>
          <target state="translated">改编Grails的taglibs,以便在模板引擎中使用。可以像这样创建一个适配器。</target>
        </trans-unit>
        <trans-unit id="dd2d5398ed0110f6eb20d29713c1b0cfd8ae9097" translate="yes" xml:space="preserve">
          <source>Add a Character and a Number.</source>
          <target state="translated">添加一个字符和一个数字。</target>
        </trans-unit>
        <trans-unit id="971e11b4dfe87679ad6c69fadcd5ee74f7902b08" translate="yes" xml:space="preserve">
          <source>Add a Character and a Number. The ordinal value of the Character is used in the addition (the ordinal value is the unicode value which for simple character sets is the ASCII value). This operation will always create a new object for the result, while the operands remain unchanged.</source>
          <target state="translated">添加一个字符和一个数字。在加法中使用字符的序数值(序数值是unicode值,对于简单的字符集是ASCII值)。这个操作将始终为结果创建一个新的对象,而操作数保持不变。</target>
        </trans-unit>
        <trans-unit id="efdebe2ec0231c052bc36d0f533d20bf6b82afe4" translate="yes" xml:space="preserve">
          <source>Add a Number and a Character.</source>
          <target state="translated">添加一个数字和一个字符。</target>
        </trans-unit>
        <trans-unit id="87e4095a314431e0de2742ef5fd59c145c9145ce" translate="yes" xml:space="preserve">
          <source>Add a Number and a Character. The ordinal value of the Character is used in the addition (the ordinal value is the unicode value which for simple character sets is the ASCII value).</source>
          <target state="translated">添加一个数字和一个字符。在加法中使用字符的序数值(序数值是unicode值,对于简单的字符集是ASCII值)。</target>
        </trans-unit>
        <trans-unit id="ff0f5c63f03ae22c44cd3bef3f2fe229577da518" translate="yes" xml:space="preserve">
          <source>Add a PropertyChangeListener to the listener list.</source>
          <target state="translated">在列表中添加一个PropertyChangeListener。</target>
        </trans-unit>
        <trans-unit id="f3b2830c75ebdb5edf85d21ded9c3bf06d9ca348" translate="yes" xml:space="preserve">
          <source>Add a constructed class node as a placeholder to resolve outer nested class further.</source>
          <target state="translated">增加一个构造类节点作为占位符,以进一步解析外部嵌套类。</target>
        </trans-unit>
        <trans-unit id="e9d40252ec0609a021142d9288201078cb898bf4" translate="yes" xml:space="preserve">
          <source>Add a method and mark it as &lt;code&gt;@Generated&lt;/code&gt;.</source>
          <target state="translated">添加一个方法并将其标记为 &lt;code&gt;@Generated&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="26b52bf160b4606debb1d91d48d8d8d6cc26f2fc" translate="yes" xml:space="preserve">
          <source>Add a method that is marked as &lt;code&gt;@Generated&lt;/code&gt;.</source>
          <target state="translated">添加一个标记为 &lt;code&gt;@Generated&lt;/code&gt; 的方法。</target>
        </trans-unit>
        <trans-unit id="25a982d0e8b09cd90c2380a7a175f50c4bf085e7" translate="yes" xml:space="preserve">
          <source>Add a nodeCompletion delegate so it can intercept nodes after they done with building.</source>
          <target state="translated">增加一个nodeCompletion委托,这样它就可以在节点完成构建后拦截节点。</target>
        </trans-unit>
        <trans-unit id="9224663269d73dd9141326e8f6bed6cb908b4a10" translate="yes" xml:space="preserve">
          <source>Add a nodeCompletion delegate so it can intercept nodes after they done with building. NodeCompletion delegates are fired in a FILO pattern, so that nested delegates get first crack.</source>
          <target state="translated">增加一个nodeCompletion delegate,这样它就可以在节点完成构建后拦截节点。NodeCompletion委派是以FILO模式发射的,这样嵌套的委派就会被优先破解。</target>
        </trans-unit>
        <trans-unit id="c756c69ecf72f9c5cc4bbdb15a1b56d5a57bdcc8" translate="yes" xml:space="preserve">
          <source>Add a number of days to this date and returns the new date.</source>
          <target state="translated">在这个日期上增加一个天数,并返回新的日期。</target>
        </trans-unit>
        <trans-unit id="72f7f48be699ee0caacc4368359aa3739b814590" translate="yes" xml:space="preserve">
          <source>Add a postInstantiate delegate so it can intercept nodes after they are created.</source>
          <target state="translated">增加一个postInstantiate委托,这样就可以在节点创建后拦截节点。</target>
        </trans-unit>
        <trans-unit id="ae731944d2b4cb8f04921b135f1af71ec064d6fa" translate="yes" xml:space="preserve">
          <source>Add a postInstantiate delegate so it can intercept nodes after they are created. PostInstantiate delegates are fired in a FILO pattern, so that nested delegates get first crack.</source>
          <target state="translated">增加一个postInstantiate delegate,这样它就可以在节点创建后拦截节点。PostInstantiate委派以FILO模式发射,这样嵌套的委派就能得到优先破解。</target>
        </trans-unit>
        <trans-unit id="9414867aae63b1c3038d13cd5ea9d932eb2d9a5c" translate="yes" xml:space="preserve">
          <source>Add a preInstantiate delegate so it can intercept nodes before they are created.</source>
          <target state="translated">增加一个preInstantiate委托,这样它就可以在节点创建之前拦截节点。</target>
        </trans-unit>
        <trans-unit id="10f83f1c985c240651ea40286e484dd2b6a877da" translate="yes" xml:space="preserve">
          <source>Add a preInstantiate delegate so it can intercept nodes before they are created. PreInstantiate delegates are fired in a FILO pattern, so that nested delegates get first crack.</source>
          <target state="translated">增加一个preInstantiate delegate,这样它就可以在节点创建之前拦截节点。PreInstantiate委派以FILO模式发射,这样嵌套的委派就会得到第一道破解。</target>
        </trans-unit>
        <trans-unit id="0b24c5c6b8f61a592ce1ef96d1577d2a57fa8f34" translate="yes" xml:space="preserve">
          <source>Add an attribute delegate so it can intercept attributes being set.</source>
          <target state="translated">增加一个属性委托,这样就可以拦截正在设置的属性。</target>
        </trans-unit>
        <trans-unit id="9430cc1d509e1fafb92dc368af4b8db814410ff7" translate="yes" xml:space="preserve">
          <source>Add an attribute delegate so it can intercept attributes being set. Attribute delegates are fired in a FILO pattern, so that nested delegates get first crack.</source>
          <target state="translated">增加一个属性委托,这样它就可以拦截正在设置的属性。属性委托是以FILO模式发射的,所以嵌套的委托会被首先破解。</target>
        </trans-unit>
        <trans-unit id="b013efb40f4289af7e4cd1018ce50701234c7487" translate="yes" xml:space="preserve">
          <source>Add an inner class that is marked as &lt;code&gt;@Generated&lt;/code&gt;.</source>
          <target state="translated">添加一个标记为 &lt;code&gt;@Generated&lt;/code&gt; 的内部类。</target>
        </trans-unit>
        <trans-unit id="17c098e16b28af2fc64279c3b10cb0f261271d3a" translate="yes" xml:space="preserve">
          <source>Add another element to the initializer expressions</source>
          <target state="translated">在初始化表达式中添加另一个元素</target>
        </trans-unit>
        <trans-unit id="1f10ade6105a8b2a03b4d1593e3fc5c042036a71" translate="yes" xml:space="preserve">
          <source>Add listeners to a specific object.</source>
          <target state="translated">为特定对象添加监听器。</target>
        </trans-unit>
        <trans-unit id="45411891c3c88d7642e25dbbbcc21a4afaa8fe6d" translate="yes" xml:space="preserve">
          <source>Add listeners to a specific object. Updates the bould flags and update set</source>
          <target state="translated">为特定对象添加监听器。更新bould标志和更新设置</target>
        </trans-unit>
        <trans-unit id="a7396e86f052dd1f498968edbee8957d61aac1da" translate="yes" xml:space="preserve">
          <source>Add methods from the super class.</source>
          <target state="translated">增加超级类的方法。</target>
        </trans-unit>
        <trans-unit id="55b871a6a840cdb446acc6659ab88ab1b0f92b1a" translate="yes" xml:space="preserve">
          <source>Add number of days to this Timestamp and returns the new Timestamp object.</source>
          <target state="translated">在该时间戳上添加天数,并返回新的时间戳对象。</target>
        </trans-unit>
        <trans-unit id="4ea7e37a513f833e593139c9408cbb8cd0865a7a" translate="yes" xml:space="preserve">
          <source>Add one Character to another.</source>
          <target state="translated">将一个字符添加到另一个字符上。</target>
        </trans-unit>
        <trans-unit id="860157d69bab2298c4fe7b14e3cbd15007041bc4" translate="yes" xml:space="preserve">
          <source>Add one Character to another. The ordinal values of the Characters are used in the addition (the ordinal value is the unicode value which for simple character sets is the ASCII value). This operation will always create a new object for the result, while the operands remain unchanged.</source>
          <target state="translated">将一个字符加到另一个字符上。在加法中使用字符的序数值(序数值是unicode值,对于简单的字符集是ASCII值)。这个操作总是为结果创建一个新的对象,而操作数保持不变。</target>
        </trans-unit>
        <trans-unit id="5e7e099ea3de9feff1afdedae22b5d86e2147ce6" translate="yes" xml:space="preserve">
          <source>Add the FilterChain element.</source>
          <target state="translated">添加FilterChain元素。</target>
        </trans-unit>
        <trans-unit id="585de26ca09b1db132989a22ba92f62fad71445a" translate="yes" xml:space="preserve">
          <source>Add the configured nested javac task if present to initiate joint compilation.</source>
          <target state="translated">如果存在的话,添加配置的嵌套javac任务,启动联合编译。</target>
        </trans-unit>
        <trans-unit id="6b1509a5b2c62640e11dfe472c4725a03b939847" translate="yes" xml:space="preserve">
          <source>Add two numbers and return the result.</source>
          <target state="translated">将两个数字相加并返回结果。</target>
        </trans-unit>
        <trans-unit id="f07ff3c85ababa2b232c6e2b2c2aa9be95800dab" translate="yes" xml:space="preserve">
          <source>Added code includes:</source>
          <target state="translated">增加的代码包括:</target>
        </trans-unit>
        <trans-unit id="43d8de82f921f67b75e7f8e08253a39be78c388f" translate="yes" xml:space="preserve">
          <source>Additional Java 9 based functions will be added here as needed.</source>
          <target state="translated">其他基于Java 9的功能将根据需要在这里添加。</target>
        </trans-unit>
        <trans-unit id="6743184994ad7dc844a3688a662abbb51037bd8f" translate="yes" xml:space="preserve">
          <source>Additional methods/constructors as needed for default parameters</source>
          <target state="translated">根据需要为默认参数提供额外的方法/构造函数。</target>
        </trans-unit>
        <trans-unit id="9bdd71ccfad440561b1037e9c1a6b55ff165c795" translate="yes" xml:space="preserve">
          <source>Additional usage examples can be found in the unit test for this class.</source>
          <target state="translated">更多的使用例子可以在这个类的单元测试中找到。</target>
        </trans-unit>
        <trans-unit id="3d709ca49f43a930b4c18af06f476182c95b8982" translate="yes" xml:space="preserve">
          <source>Additionally it adds corresponding fire&amp;lt;Event&amp;gt; methods.</source>
          <target state="translated">另外，它添加了相应的fire &amp;lt;Event&amp;gt;方法。</target>
        </trans-unit>
        <trans-unit id="c21d3bd942e701cddbaedcb8f6328a219ec409a2" translate="yes" xml:space="preserve">
          <source>Additionally, closures are polymorphic. This means that a single closure can be used with different, valid, parameter signatures. A typical use case can be found when a closure accepts either a &lt;a href=&quot;https://docs.oracle.com/javase/8/docs/api/java/util/Map/Entry.html&quot;&gt;Entry&lt;/a&gt; or a (key,value) pair, like the &lt;a href=&quot;../../../org/codehaus/groovy/runtime/defaultgroovymethods#each(java.util.Map,%20groovy.lang.Closure)&quot;&gt;DefaultGroovyMethods.each&lt;/a&gt; method.</source>
          <target state="translated">另外，闭包是多态的。这意味着单个闭包可以与不同的有效参数签名一起使用。当闭包接受&lt;a href=&quot;https://docs.oracle.com/javase/8/docs/api/java/util/Map/Entry.html&quot;&gt;Entry&lt;/a&gt;或（键，值）对时，可以找到典型的用例，例如&lt;a href=&quot;../../../org/codehaus/groovy/runtime/defaultgroovymethods#each(java.util.Map,%20groovy.lang.Closure)&quot;&gt;DefaultGroovyMethods.each&lt;/a&gt;方法。</target>
        </trans-unit>
        <trans-unit id="0b9030d66dcea4e7a0756a4773c4c2285a635a78" translate="yes" xml:space="preserve">
          <source>Additionally, single char strings are converted to 'char' types.</source>
          <target state="translated">此外,单个char字符串被转换为'char'类型。</target>
        </trans-unit>
        <trans-unit id="32c22464bc5c9230cba83a8dad55e5b9bc21a9e8" translate="yes" xml:space="preserve">
          <source>Adds GroovyCollections#combinations(Iterable) as a method on Iterables.</source>
          <target state="translated">添加GroovyCollections#combinations(Iterable)作为Iterables的方法。</target>
        </trans-unit>
        <trans-unit id="622f36b50c41b13074ec524a74ab9a63ddfe8f53" translate="yes" xml:space="preserve">
          <source>Adds GroovyCollections#combinations(Iterable, Closure) as a method on collections.</source>
          <target state="translated">添加GroovyCollections#combinations(Iterable,Closure)作为集合的方法。</target>
        </trans-unit>
        <trans-unit id="8543cd300997d3a61fbc82c2d1dabd2424df6e9b" translate="yes" xml:space="preserve">
          <source>Adds GroovyCollections#transpose(List) as a method on lists.</source>
          <target state="translated">添加GroovyCollections#transpose(List)作为list的方法。</target>
        </trans-unit>
        <trans-unit id="affeb38fcb1ce41bc2ffcfeeb7c47d0d10bbb729" translate="yes" xml:space="preserve">
          <source>Adds GroovyCollections#transpose(List) as a method on lists. A Transpose Function takes a collection of columns and returns a collection of rows. The first row consists of the first element from each column. Successive rows are constructed similarly.</source>
          <target state="translated">添加GroovyCollections#transpose(List)作为列表的方法。一个Transpose函数接收一个列的集合,并返回一个行的集合。第一行由每列的第一个元素组成。连续的行也是类似的构造。</target>
        </trans-unit>
        <trans-unit id="3f333155336d240c70bc2c9256d79657ff86cc35" translate="yes" xml:space="preserve">
          <source>Adds a &quot;metaClass&quot; property to all class objects so you can use the syntax &lt;code&gt;String.metaClass.myMethod = { println &quot;foo&quot; }&lt;/code&gt;</source>
          <target state="translated">向所有类对象添加&amp;ldquo; metaClass&amp;rdquo;属性，以便可以使用语法 &lt;code&gt;String.metaClass.myMethod = { println &quot;foo&quot; }&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="6d37567280534f469fe3060dc41b81ef6bd9792e" translate="yes" xml:space="preserve">
          <source>Adds a ClassNode directly to the unit (ie. without source).</source>
          <target state="translated">直接在单元中添加一个ClassNode(即没有源)。</target>
        </trans-unit>
        <trans-unit id="7c0bd2537a1c7fee9a1b8644f75be4ba97a13afd" translate="yes" xml:space="preserve">
          <source>Adds a ClassNode directly to the unit (ie. without source). WARNING: the source is needed for error reporting, using this method without setting a SourceUnit will cause NullPinterExceptions</source>
          <target state="translated">直接在单元中添加一个ClassNode(即没有源)。警告:源是错误报告所需要的,在没有设置SourceUnit的情况下使用此方法将导致NullPinterExceptions。</target>
        </trans-unit>
        <trans-unit id="f07ef578fba1a1a57eb09f15aa263b8151776984" translate="yes" xml:space="preserve">
          <source>Adds a InputStream source to the unit.</source>
          <target state="translated">为单元添加一个输入流源。</target>
        </trans-unit>
        <trans-unit id="55c2dedeec4b45a3bee93ecf9586ccd6f773b0a5" translate="yes" xml:space="preserve">
          <source>Adds a SourceUnit to the unit.</source>
          <target state="translated">在单元中添加一个SourceUnit。</target>
        </trans-unit>
        <trans-unit id="4325ba7bbea3f8a1bb2605eac42b31c8da81c1c9" translate="yes" xml:space="preserve">
          <source>Adds a class to the unit.</source>
          <target state="translated">为单元添加一个类。</target>
        </trans-unit>
        <trans-unit id="15c397b088c3ae3939636b4075f32ab2abbac77e" translate="yes" xml:space="preserve">
          <source>Adds a classpath to this configuration.</source>
          <target state="translated">为这个配置添加一个classpath。</target>
        </trans-unit>
        <trans-unit id="de0a60e6a3a63e79727a0606a15f8c528baa87a7" translate="yes" xml:space="preserve">
          <source>Adds a classpath to this configuration. It expects a string with multiple paths, separated by the system dependent path separator. Expands wildcards, e.g. dir/* into all the jars in dir.</source>
          <target state="translated">为这个配置添加一个classpath。它需要一个包含多个路径的字符串,用系统相关的路径分隔符来分隔。展开通配符,例如:dir/*到dir中的所有jar。</target>
        </trans-unit>
        <trans-unit id="d6ec1a9bec8789dd9bfa1e20baad755a660cc399" translate="yes" xml:space="preserve">
          <source>Adds a closure based column to the table</source>
          <target state="translated">在表格中添加一个基于封闭的列</target>
        </trans-unit>
        <trans-unit id="e28c9855e1e9f8052ccd1ff3fb59953efaab2fa8" translate="yes" xml:space="preserve">
          <source>Adds a file to the classpath if it exists.</source>
          <target state="translated">在classpath中添加一个文件(如果存在)。</target>
        </trans-unit>
        <trans-unit id="077534ba208a87f4f806adaab8378cc410ee7ebc" translate="yes" xml:space="preserve">
          <source>Adds a fileset (nested fileset attribute) which should represent a single source file.</source>
          <target state="translated">添加一个文件集(嵌套的文件集属性),它应该代表一个单一的源文件。</target>
        </trans-unit>
        <trans-unit id="7f693b96e7c318c7f928add35c63bafbbc361124" translate="yes" xml:space="preserve">
          <source>Adds a groovy.lang.Closure to test whether the stack trace element should be added or not.</source>
          <target state="translated">添加一个groovy.lang.Closure来测试是否应该添加堆栈跟踪元素。</target>
        </trans-unit>
        <trans-unit id="2d115a47162fc60bc22d2615e4dd2dbc854b804c" translate="yes" xml:space="preserve">
          <source>Adds a listener for constant meta classes.</source>
          <target state="translated">为常量元类添加一个监听器。</target>
        </trans-unit>
        <trans-unit id="933ad0a810a7371d2f6470fe46c4aa5105bdd0f3" translate="yes" xml:space="preserve">
          <source>Adds a listener for constant meta classes. This listener cannot be removed!</source>
          <target state="translated">为常量元类添加一个监听器。这个监听器不能被删除</target>
        </trans-unit>
        <trans-unit id="77afc5cc9cefb60e10bc34080d825d1d59099514" translate="yes" xml:space="preserve">
          <source>Adds a meta class change listener for constant meta classes</source>
          <target state="translated">为常量元类添加一个元类变化监听器。</target>
        </trans-unit>
        <trans-unit id="e98f5c67718a98e9e120d79d612278af10ebea70" translate="yes" xml:space="preserve">
          <source>Adds a meta class change listener for constant meta classes.</source>
          <target state="translated">为常量元类添加一个元类变化监听器。</target>
        </trans-unit>
        <trans-unit id="9e18c21d2db3d7d94189e0601f56e96e23c5f91c" translate="yes" xml:space="preserve">
          <source>Adds a meta class change listener for constant meta classes. This listener cannot be removed!</source>
          <target state="translated">为常量元类添加一个元类变化监听器。这个监听器不能被删除</target>
        </trans-unit>
        <trans-unit id="c0c4c1e169a1914aa6d390234e2f2666e12f6034" translate="yes" xml:space="preserve">
          <source>Adds a metaclass to the registry for the given class</source>
          <target state="translated">为给定的类添加一个元类到注册表。</target>
        </trans-unit>
        <trans-unit id="99a868fc9b1a33548d48748e476174c30459d5de" translate="yes" xml:space="preserve">
          <source>Adds a new MapItemValue to the mapping.</source>
          <target state="translated">在映射中添加一个新的MapItemValue。</target>
        </trans-unit>
        <trans-unit id="b2ae5450b73f55c541be7e3983fef0b4ffa18242" translate="yes" xml:space="preserve">
          <source>Adds a new MetaBeanProperty to the MetaClass</source>
          <target state="translated">为MetaClass添加一个新的MetaBeanProperty。</target>
        </trans-unit>
        <trans-unit id="b6d707c67c54ef5c0e14f8140683a99c23f413c9" translate="yes" xml:space="preserve">
          <source>Adds a new MetaMethod to the MetaClass</source>
          <target state="translated">为MetaClass添加一个新的MetaMethod。</target>
        </trans-unit>
        <trans-unit id="1c9ceac8d1cfe96cb630d908cc4164335ad9c70a" translate="yes" xml:space="preserve">
          <source>Adds a new cell to the current grid</source>
          <target state="translated">在当前网格中添加一个新单元格。</target>
        </trans-unit>
        <trans-unit id="57c106f6ed87c3d07e323c0bb1554a89debbfd97" translate="yes" xml:space="preserve">
          <source>Adds a new cell to this row</source>
          <target state="translated">为这一行添加一个新单元格。</target>
        </trans-unit>
        <trans-unit id="862e49eb113e9c46ad5ecdb684673471614294d1" translate="yes" xml:space="preserve">
          <source>Adds a new column definition to the table</source>
          <target state="translated">为表添加新的列定义</target>
        </trans-unit>
        <trans-unit id="93a5b904f35f0867cbc98945fbee6ce2c1f9a78f" translate="yes" xml:space="preserve">
          <source>Adds a new field:</source>
          <target state="translated">增加一个新的领域:</target>
        </trans-unit>
        <trans-unit id="54ae8261db9ec4dab0bd6ea61ec384cacec870d7" translate="yes" xml:space="preserve">
          <source>Adds a new field: &lt;code&gt;&quot;protected final java.beans.VetoableChangeSupport this$vetoableChangeSupport = new java.beans.VetoableChangeSupport(this)&quot;&lt;/code&gt;</source>
          <target state="translated">添加一个新字段： &lt;code&gt;&quot;protected final java.beans.VetoableChangeSupport this$vetoableChangeSupport = new java.beans.VetoableChangeSupport(this)&quot;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="61bb71211a6955be3c0a6157c82208f71b35dbbf" translate="yes" xml:space="preserve">
          <source>Adds a new line to the output.</source>
          <target state="translated">在输出中添加新行。</target>
        </trans-unit>
        <trans-unit id="a9fc9150b7e57635cda6dadc1a5dae684e3e10e6" translate="yes" xml:space="preserve">
          <source>Adds a new line to the output. The new line string can be configured by &lt;a href=&quot;templateconfiguration#setNewLineString(String)&quot;&gt;TemplateConfiguration.setNewLineString&lt;/a&gt;</source>
          <target state="translated">在输出中添加新行。可以通过&lt;a href=&quot;templateconfiguration#setNewLineString(String)&quot;&gt;TemplateConfiguration.setNewLineString&lt;/a&gt;配置新行字符串</target>
        </trans-unit>
        <trans-unit id="4249c9fc66429a890eb5c12b170e791f6471af09" translate="yes" xml:space="preserve">
          <source>Adds a new row to the result set</source>
          <target state="translated">在结果集中添加一条新的记录</target>
        </trans-unit>
        <trans-unit id="9e1927e5bd68b45783f51a62459821c3aea13647" translate="yes" xml:space="preserve">
          <source>Adds a new row to this result set</source>
          <target state="translated">在这个结果集中添加一条新的记录。</target>
        </trans-unit>
        <trans-unit id="a68e103bc085d9f1c495be0fa275c332a77f419f" translate="yes" xml:space="preserve">
          <source>Adds a new syntax error to the source unit and then continues.</source>
          <target state="translated">在源单元中添加一个新的语法错误,然后继续。</target>
        </trans-unit>
        <trans-unit id="b74052825147a96e3fb369517254763029004481" translate="yes" xml:space="preserve">
          <source>Adds a non-fatal error to the message set, which may cause a failure if the error threshold is exceeded.</source>
          <target state="translated">向消息集添加一个非致命性错误,如果超过错误阈值,可能会导致失败。</target>
        </trans-unit>
        <trans-unit id="5174a7ed89449d41435f1eaa14004d17169cef7f" translate="yes" xml:space="preserve">
          <source>Adds a non-fatal error to the message set, which may cause a failure if the error threshold is exceeded. The message is not required to have a source line and column specified, but it is best practice to try and include that information.</source>
          <target state="translated">向消息集添加一个非致命性错误,如果超过错误阈值,可能会导致失败。消息不需要指定源行和列,但最好的做法是尝试包含该信息。</target>
        </trans-unit>
        <trans-unit id="a55880900bef2fd0eb484467d7a30f6468c61c8b" translate="yes" xml:space="preserve">
          <source>Adds a path for source compilation.</source>
          <target state="translated">增加一个源码编译的路径。</target>
        </trans-unit>
        <trans-unit id="89c2758992be4838224a0630279bf324a908cb50" translate="yes" xml:space="preserve">
          <source>Adds a path to sourcepath.</source>
          <target state="translated">为源路径添加一个路径。</target>
        </trans-unit>
        <trans-unit id="43072a1ac687237623935e80f4a099aa90546de5" translate="yes" xml:space="preserve">
          <source>Adds a path to the classpath.</source>
          <target state="translated">为classpath添加一条路径。</target>
        </trans-unit>
        <trans-unit id="ea460ac601da23815bf1dae9e185f9dd939a70e1" translate="yes" xml:space="preserve">
          <source>Adds a property model column to the table</source>
          <target state="translated">在表中添加属性模型列</target>
        </trans-unit>
        <trans-unit id="ab7e6c2ba7edd7282d6eefc645fa56727442cfc9" translate="yes" xml:space="preserve">
          <source>Adds a reference to a classpath defined elsewhere.</source>
          <target state="translated">添加对其他地方定义的classpath的引用。</target>
        </trans-unit>
        <trans-unit id="bd752faa06ef3efea25a0107e68d418900a91285" translate="yes" xml:space="preserve">
          <source>Adds a reference to a source path defined elsewhere.</source>
          <target state="translated">添加对其他地方定义的源路径的引用。</target>
        </trans-unit>
        <trans-unit id="8bd310bb74ee50d33a2d23081619210608e2058e" translate="yes" xml:space="preserve">
          <source>Adds a set of file paths to the unit.</source>
          <target state="translated">为单元添加一组文件路径。</target>
        </trans-unit>
        <trans-unit id="280ec9857814e18982183d36e42bebb6b3f882ae" translate="yes" xml:space="preserve">
          <source>Adds a set of files (nested fileset attribute).</source>
          <target state="translated">添加一组文件(嵌套文件集属性)。</target>
        </trans-unit>
        <trans-unit id="8eaedb0b1a761e9b0c51041eaa5f2d8464a6a35b" translate="yes" xml:space="preserve">
          <source>Adds a set of source files to the unit.</source>
          <target state="translated">将一组源文件添加到单元中。</target>
        </trans-unit>
        <trans-unit id="0cff1a367e2d80ad55141a27b7d67eed1ceff396" translate="yes" xml:space="preserve">
          <source>Adds a source file to the unit.</source>
          <target state="translated">添加一个源文件到单位。</target>
        </trans-unit>
        <trans-unit id="4488c0062d5d1c2eef0d286aee97b46b30b4f16a" translate="yes" xml:space="preserve">
          <source>Adds a statement to the object initializer.</source>
          <target state="translated">在对象初始化器中添加一条语句。</target>
        </trans-unit>
        <trans-unit id="6b09666e9af864b73f1b98ab2449eb6269b6f78e" translate="yes" xml:space="preserve">
          <source>Adds a synthetic method as part of the compilation process.</source>
          <target state="translated">增加一个合成方法作为编译过程的一部分。</target>
        </trans-unit>
        <trans-unit id="8ee466fb53224c4d1d330440518d1f7489ce7008" translate="yes" xml:space="preserve">
          <source>Adds a type checking error, which will be displayed to the user during compilation.</source>
          <target state="translated">增加一个类型检查错误,在编译过程中会显示给用户。</target>
        </trans-unit>
        <trans-unit id="5516b9e98cbe7d8f7ce982ce74c0d2558b7d086a" translate="yes" xml:space="preserve">
          <source>Adds a type transformer applied at runtime.</source>
          <target state="translated">添加一个在运行时应用的类型变换器。</target>
        </trans-unit>
        <trans-unit id="c8e37f34432046a2040d49af9fab77a2d56cc29b" translate="yes" xml:space="preserve">
          <source>Adds a type transformer applied at runtime. This method handles transformations to String from GString, array transformations and number based transformations</source>
          <target state="translated">添加一个在运行时应用的类型转换。本方法处理从GString到String的转换,数组转换和基于数字的转换。</target>
        </trans-unit>
        <trans-unit id="352c2a4dbe34873e888de860ff016cd6a7ea0c98" translate="yes" xml:space="preserve">
          <source>Adds a warning to the message set if it is relevant.</source>
          <target state="translated">如果相关,则在信息集上添加警告。</target>
        </trans-unit>
        <trans-unit id="a10adfc7e1a7598c21fca91117d008784c3b900c" translate="yes" xml:space="preserve">
          <source>Adds a warning to the message set.</source>
          <target state="translated">为信息集添加一个警告。</target>
        </trans-unit>
        <trans-unit id="923e07793c63842ed9ce7916150da9b3a1264270" translate="yes" xml:space="preserve">
          <source>Adds all children of the specified node to this one.</source>
          <target state="translated">将指定节点的所有子节点添加到这个节点上。</target>
        </trans-unit>
        <trans-unit id="970c33328bc111a88151145b9583ef5bc07db631" translate="yes" xml:space="preserve">
          <source>Adds all children of the specified node to this one. Not all nodes support this operation!</source>
          <target state="translated">将指定节点的所有子节点添加到这个节点上。并非所有节点都支持此操作</target>
        </trans-unit>
        <trans-unit id="c841bd3df0c87de44e418f0a639aad20dc1178d9" translate="yes" xml:space="preserve">
          <source>Adds all entries from the given Map to the registry.</source>
          <target state="translated">将指定地图中的所有条目添加到注册表中。</target>
        </trans-unit>
        <trans-unit id="e0f736114d0fa1435ed61b60b9b0b82abc7d62d8" translate="yes" xml:space="preserve">
          <source>Adds all entries from the given Map to the registry. Any entries in the provided Map that contain a &lt;code&gt;null&lt;/code&gt; key or value will be ignored.</source>
          <target state="translated">将给定Map中的所有条目添加到注册表中。提供的Map中包含 &lt;code&gt;null&lt;/code&gt; 键或值的所有条目都将被忽略。</target>
        </trans-unit>
        <trans-unit id="0553d55bdb2d31b7efc6e98a40e8dea74e710047" translate="yes" xml:space="preserve">
          <source>Adds all items from the iterable to the Collection.</source>
          <target state="translated">将所有iterable中的项目添加到收藏中。</target>
        </trans-unit>
        <trans-unit id="b5a558366d3b9a42034e3e1787e29b0b0eeadcd5" translate="yes" xml:space="preserve">
          <source>Adds all items from the iterator to the Collection.</source>
          <target state="translated">将迭代器中的所有项目添加到收藏中。</target>
        </trans-unit>
        <trans-unit id="6d367d408d24d93c1f3faaba3b98b0c9b817bbe3" translate="yes" xml:space="preserve">
          <source>Adds all the listeners to the objects in the bind path.</source>
          <target state="translated">将所有监听器添加到绑定路径中的对象。</target>
        </trans-unit>
        <trans-unit id="4636a043cd5febbd582b8a4e1785638046ae3503" translate="yes" xml:space="preserve">
          <source>Adds all the listeners to the objects in the bind path. This assumes that we are not added as listeners to any of them, hence it is not idempotent.</source>
          <target state="translated">将所有监听者添加到绑定路径中的对象上。这假定我们没有被添加为任何一个对象的监听者,因此它不是幂等的。</target>
        </trans-unit>
        <trans-unit id="f86946c13e935bc8bef2e91764f7aec3c4a856e2" translate="yes" xml:space="preserve">
          <source>Adds an element to the node.</source>
          <target state="translated">为节点添加一个元素。</target>
        </trans-unit>
        <trans-unit id="15155e5f874603299f71c8230b780b3449f24211" translate="yes" xml:space="preserve">
          <source>Adds an element to the node. Returns the element for convenience. Not all nodes support this operation!</source>
          <target state="translated">向节点添加一个元素。为方便起见,返回元素。并非所有节点都支持此操作</target>
        </trans-unit>
        <trans-unit id="f5e4a57a3faeaa02351b2faa3b470f3d325bb705" translate="yes" xml:space="preserve">
          <source>Adds an error to the message set and throws CompilationFailedException.</source>
          <target state="translated">向消息集添加一个错误并抛出CompilationFailedException。</target>
        </trans-unit>
        <trans-unit id="5971faeecd1cad7e41281dd45e73863696f6edc2" translate="yes" xml:space="preserve">
          <source>Adds an error to the message set, but does not cause a failure.</source>
          <target state="translated">在信息集上添加一个错误,但不会导致失败。</target>
        </trans-unit>
        <trans-unit id="1456c7879be83d236e03c2c10b952671f5bda60b" translate="yes" xml:space="preserve">
          <source>Adds an error to the message set, but does not cause a failure. The message is not required to have a source line and column specified, but it is best practice to try and include that information.</source>
          <target state="translated">将错误添加到消息集,但不会导致失败。消息不需要指定源行和列,但最好的做法是尝试并包含该信息。</target>
        </trans-unit>
        <trans-unit id="cc1b8cb2bf936ee9b2df4daeb160a324a856b41a" translate="yes" xml:space="preserve">
          <source>Adds an object as a new child to this Node.</source>
          <target state="translated">将一个对象作为新的子节点添加到这个节点。</target>
        </trans-unit>
        <trans-unit id="70ebb33118ee383fa9531be10a8005cb067af0fd" translate="yes" xml:space="preserve">
          <source>Adds an optionally-fatal error to the message set.</source>
          <target state="translated">向消息集添加一个可选的致命错误。</target>
        </trans-unit>
        <trans-unit id="abfd2ccd977a11e94d67e0e1dde28ffd00ed6343" translate="yes" xml:space="preserve">
          <source>Adds an optionally-fatal error to the message set. The message is not required to have a source line and column specified, but it is best practice to try and include that information.</source>
          <target state="translated">向消息集添加一个可选的致命错误。该消息不需要指定源行和列,但最好的做法是尝试并包含该信息。</target>
        </trans-unit>
        <trans-unit id="ade1bf40d64188aeb3ba13cdae490830ed2c2fc6" translate="yes" xml:space="preserve">
          <source>Adds compilation customizers to the compilation process.</source>
          <target state="translated">在编译过程中添加编译自定义器。</target>
        </trans-unit>
        <trans-unit id="a275b32bee77ab7572c17c184fc255aaeb7a86d6" translate="yes" xml:space="preserve">
          <source>Adds compilation customizers to the compilation process. A compilation customizer is a class node operation which performs various operations going from adding imports to access control.</source>
          <target state="translated">在编译过程中添加编译自定义器。编译自定义器是一个类节点操作,它执行从添加导入到访问控制的各种操作。</target>
        </trans-unit>
        <trans-unit id="f48103b99fc29aa0d3712d6c9be28f87445c4885" translate="yes" xml:space="preserve">
          <source>Adds explicit return statements to implicit return points in a closure. This is necessary since tail-recursion is detected by having the recursive call within the return statement.</source>
          <target state="translated">将显式返回语句添加到闭包中的隐式返回点。这是很有必要的,因为在返回语句中进行递归调用,可以检测到尾部递归。</target>
        </trans-unit>
        <trans-unit id="8b3195f00c501b596f89c34d2338666cd78b30b5" translate="yes" xml:space="preserve">
          <source>Adds max() method to Iterable objects.</source>
          <target state="translated">为Iterable对象添加max()方法。</target>
        </trans-unit>
        <trans-unit id="315a98a84d70841fb1c2e86f684d9ee53764e81d" translate="yes" xml:space="preserve">
          <source>Adds max() method to Iterator objects.</source>
          <target state="translated">为Iterator对象添加max()方法。</target>
        </trans-unit>
        <trans-unit id="8789b773ece07c50fb9828aef91c1a8f6652485e" translate="yes" xml:space="preserve">
          <source>Adds max() method to Iterator objects. The iterator will become exhausted of elements after determining the maximum value.</source>
          <target state="translated">为迭代器对象添加max()方法。在确定最大值后,迭代器将耗尽元素。</target>
        </trans-unit>
        <trans-unit id="b49877ad8d9fdc83dab4b878af3f42e9f36354b2" translate="yes" xml:space="preserve">
          <source>Adds max() method to Object arrays.</source>
          <target state="translated">为对象数组添加max()方法。</target>
        </trans-unit>
        <trans-unit id="c981e3e52b76fa5be7516bdd06754f59303593a4" translate="yes" xml:space="preserve">
          <source>Adds methods from all interfaces.</source>
          <target state="translated">添加所有接口的方法。</target>
        </trans-unit>
        <trans-unit id="3fb74562e389d58d851d1360aaff75c76bdf3598" translate="yes" xml:space="preserve">
          <source>Adds methods from all interfaces. Existing entries in the methods map take precedence. Methods from interfaces visited early take precedence over later ones.</source>
          <target state="translated">添加所有接口的方法。方法图中的现有条目优先。早期访问过的接口的方法优先于后期的方法。</target>
        </trans-unit>
        <trans-unit id="3e6d50e050ec147d89c4b1933fb99fc7e5e1a174" translate="yes" xml:space="preserve">
          <source>Adds methods from interfaces and parent interfaces.</source>
          <target state="translated">从接口和父接口添加方法。</target>
        </trans-unit>
        <trans-unit id="9ff95449b67529411428e381aeb98495847727a3" translate="yes" xml:space="preserve">
          <source>Adds methods from interfaces and parent interfaces. Existing entries in the methods map take precedence. Methods from interfaces visited early take precedence over later ones.</source>
          <target state="translated">从接口和父接口中添加方法。方法图中的现有条目优先。早期访问过的接口的方法优先于后期的方法。</target>
        </trans-unit>
        <trans-unit id="1df0d752b61fd2e8c1ec76861e593fe2a2a7a557" translate="yes" xml:space="preserve">
          <source>Adds min() method to Collection objects.</source>
          <target state="translated">为Collection对象添加min()方法。</target>
        </trans-unit>
        <trans-unit id="ff738258a94de9b97e42a38c7491f209642b403d" translate="yes" xml:space="preserve">
          <source>Adds min() method to Iterator objects.</source>
          <target state="translated">为Iterator对象添加min()方法。</target>
        </trans-unit>
        <trans-unit id="6c1dd453c577aa03ae72c31982ab04eaa6c31458" translate="yes" xml:space="preserve">
          <source>Adds min() method to Iterator objects. The iterator will become exhausted of elements after determining the minimum value.</source>
          <target state="translated">为迭代器对象添加min()方法。在确定最小值后,迭代器将用尽元素。</target>
        </trans-unit>
        <trans-unit id="f12cc233030e8f5ae5e9505ceb8a38eed6184f7a" translate="yes" xml:space="preserve">
          <source>Adds min() method to Object arrays.</source>
          <target state="translated">为对象数组添加min()方法。</target>
        </trans-unit>
        <trans-unit id="6b0364c0ab8ad54f83ea3536a0bb60e06a79b41a" translate="yes" xml:space="preserve">
          <source>Adds navigable properties to the list of candidates if they match the prefix</source>
          <target state="translated">将符合前缀的可导航属性添加到候选列表中。</target>
        </trans-unit>
        <trans-unit id="cf5ecf45abc8d41f7688c3333a110bf0618c0f81" translate="yes" xml:space="preserve">
          <source>Adds or replaces the parent of the node.</source>
          <target state="translated">添加或替换节点的父节点。</target>
        </trans-unit>
        <trans-unit id="2d891a97aad8bf935d483fc483a04d54a0571d4c" translate="yes" xml:space="preserve">
          <source>Adds or replaces the value of the node.</source>
          <target state="translated">添加或替换节点的值。</target>
        </trans-unit>
        <trans-unit id="d7213b817e5d46d8984308a84bd3fbd319a806e2" translate="yes" xml:space="preserve">
          <source>Adds return statements to given method whenever an implicit return is detected.</source>
          <target state="translated">每当检测到隐式返回时,将返回语句添加到给定方法中。</target>
        </trans-unit>
        <trans-unit id="2629c2b77a1b4215201be89223b536828b6167f9" translate="yes" xml:space="preserve">
          <source>Adds sibling nodes (defined using builder-style notation via a Closure) after the current node.</source>
          <target state="translated">在当前节点之后添加兄弟节点(通过Closure使用构建器式符号定义)。</target>
        </trans-unit>
        <trans-unit id="8b92579277858bb8dd28f3a2b9195a846f592d13" translate="yes" xml:space="preserve">
          <source>Adds the add&amp;lt;Listener&amp;gt; method like:</source>
          <target state="translated">添加add &amp;lt;Listener&amp;gt;方法，例如：</target>
        </trans-unit>
        <trans-unit id="e8699cfaac6b265ad6dd3cc3ea46a761e8972ad6" translate="yes" xml:space="preserve">
          <source>Adds the annotation to the internal target list if a match is found.</source>
          <target state="translated">如果发现匹配,则将注解添加到内部目标列表中。</target>
        </trans-unit>
        <trans-unit id="46943e448c9a4f86ea3887378cf0bb8c8cb201e7" translate="yes" xml:space="preserve">
          <source>Adds the class paths (if any)</source>
          <target state="translated">添加类的路径(如果有的话)。</target>
        </trans-unit>
        <trans-unit id="7d8d344dead564652a5308927671c33eb95371e5" translate="yes" xml:space="preserve">
          <source>Adds the fire&amp;lt;Event&amp;gt; methods like:</source>
          <target state="translated">添加fire &amp;lt;Event&amp;gt;方法，例如：</target>
        </trans-unit>
        <trans-unit id="b6c526912e23b665b2d18226e053b601abc4ad64" translate="yes" xml:space="preserve">
          <source>Adds the get&amp;lt;Listener&amp;gt;s method like:</source>
          <target state="translated">添加get &amp;lt;Listener&amp;gt; s方法，例如：</target>
        </trans-unit>
        <trans-unit id="daf5b60ed1d944638f0e4b6a64a49e1b6c5aeca4" translate="yes" xml:space="preserve">
          <source>Adds the necessary field and methods to support property change support.</source>
          <target state="translated">添加必要的字段和方法来支持属性变化支持。</target>
        </trans-unit>
        <trans-unit id="7856cca281003b001be6439903a31d9acb5eebd4" translate="yes" xml:space="preserve">
          <source>Adds the necessary field and methods to support vetoable change support.</source>
          <target state="translated">增加必要的字段和方法来支持可否决的变更支持。</target>
        </trans-unit>
        <trans-unit id="f0a56bc012b1aefe0ccad93ba734f94cfa1d5ac6" translate="yes" xml:space="preserve">
          <source>Adds the provided map of key-value pairs as a new row in the table represented by this DataSet.</source>
          <target state="translated">将所提供的键值对图作为新行添加到这个DataSet所代表的表中。</target>
        </trans-unit>
        <trans-unit id="205d2650ad8cfaa505d72e784a17d1518adc5386" translate="yes" xml:space="preserve">
          <source>Adds the remove&amp;lt;Listener&amp;gt; method like:</source>
          <target state="translated">添加remove &amp;lt;Listener&amp;gt;方法，例如：</target>
        </trans-unit>
        <trans-unit id="f9a47c563cd88d13e26482c51a7e48261248e7c8" translate="yes" xml:space="preserve">
          <source>Adds the specified map of prefix to namespace mappings to this GPathResult.</source>
          <target state="translated">将指定的前缀映射到命名空间映射中添加到这个GPathResult。</target>
        </trans-unit>
        <trans-unit id="bafbf09055b90bf367dc5e748128460a117820c6" translate="yes" xml:space="preserve">
          <source>Adds the specified map of prefix to namespace mappings to this GPathResult. Already existing prefixes are overwritten.</source>
          <target state="translated">将指定的前缀到命名空间的映射添加到这个GPathResult中。已经存在的前缀将被覆盖。</target>
        </trans-unit>
        <trans-unit id="8c64d983f54c3db5bbe1a12ee7852b93764ca279" translate="yes" xml:space="preserve">
          <source>Adds the specified value to the queue.</source>
          <target state="translated">将指定的值添加到队列中。</target>
        </trans-unit>
        <trans-unit id="22fa78f53e0c3cac1443c275e1ffd327ebd35a01" translate="yes" xml:space="preserve">
          <source>Adds to result the identified tokens for the bufferLines</source>
          <target state="translated">在结果中添加缓冲区线的标识符。</target>
        </trans-unit>
        <trans-unit id="d66eeda00ab3ed8777b4f45b95b55f5e3c509d1b" translate="yes" xml:space="preserve">
          <source>After every &lt;code&gt;batchSize&lt;/code&gt;&lt;code&gt;addBatch(params)&lt;/code&gt; operations, automatically calls an &lt;code&gt;executeBatch()&lt;/code&gt; operation to &quot;chunk&quot; up the database operations into partitions. Though not normally needed, you can also explicitly call &lt;code&gt;executeBatch()&lt;/code&gt; which after executing the current batch, resets the batch count back to zero.</source>
          <target state="translated">在每个 &lt;code&gt;batchSize&lt;/code&gt; &lt;code&gt;addBatch(params)&lt;/code&gt; 操作之后，自动调用 &lt;code&gt;executeBatch()&lt;/code&gt; 操作将数据库操作&amp;ldquo;分块&amp;rdquo;到分区中。尽管通常不需要，但您也可以显式调用 &lt;code&gt;executeBatch()&lt;/code&gt; ，该批处理在执行当前批次后将批次计数重置为零。</target>
        </trans-unit>
        <trans-unit id="78548303c193f021502f4535342824bc61362a3b" translate="yes" xml:space="preserve">
          <source>After every &lt;code&gt;batchSize&lt;/code&gt;&lt;code&gt;addBatch(sqlBatchOperation)&lt;/code&gt; operations, automatically calls an &lt;code&gt;executeBatch()&lt;/code&gt; operation to &quot;chunk&quot; up the database operations into partitions. Though not normally needed, you can also explicitly call &lt;code&gt;executeBatch()&lt;/code&gt; which after executing the current batch, resets the batch count back to zero.</source>
          <target state="translated">在每个 &lt;code&gt;batchSize&lt;/code&gt; &lt;code&gt;addBatch(sqlBatchOperation)&lt;/code&gt; 操作之后，自动调用 &lt;code&gt;executeBatch()&lt;/code&gt; 操作将数据库操作&amp;ldquo;分块&amp;rdquo;到分区中。尽管通常不需要，但您也可以显式调用 &lt;code&gt;executeBatch()&lt;/code&gt; ，该批处理在执行当前批次后将批次计数重置为零。</target>
        </trans-unit>
        <trans-unit id="63e70612889f8f630734b34c23a6c3bd9092da73" translate="yes" xml:space="preserve">
          <source>After performing the execute operation and making use of its return, it's necessary to free the resources allocated for the statement.</source>
          <target state="translated">在执行完执行操作并利用其返回后,需要释放为语句分配的资源。</target>
        </trans-unit>
        <trans-unit id="dce5b05b3c9f74aa330dfe30de1f89c36385e30b" translate="yes" xml:space="preserve">
          <source>After some type names, where zero or more empty bracket pairs are allowed.</source>
          <target state="translated">在一些类型名称之后,其中允许有零个或多个空括号对。</target>
        </trans-unit>
        <trans-unit id="ea28b341f60dc0fc78fe87fa7b060a9366b5f70d" translate="yes" xml:space="preserve">
          <source>After some type names, where zero or more empty bracket pairs are allowed. We use ARRAY_DECLARATOR to represent this.</source>
          <target state="translated">在一些类型名之后,其中允许有零个或多个空括号对。我们用ARRAY_DECLARATOR来表示。</target>
        </trans-unit>
        <trans-unit id="8a8855c7badbfce3b9a940f42cf2a15ea1f44e47" translate="yes" xml:space="preserve">
          <source>After the AST transformation, the following code is passed on for further compilation:</source>
          <target state="translated">AST转换后,下面的代码会被传递给进一步的编译。</target>
        </trans-unit>
        <trans-unit id="02b8d59b9d4b3f0f21ea21edf89b81e5d704f096" translate="yes" xml:space="preserve">
          <source>Alexander Day Chaffee</source>
          <target state="translated">Alexander Day Chaffee</target>
        </trans-unit>
        <trans-unit id="5df284f5cd3747df2bf87b9c4becc967d6c89ef6" translate="yes" xml:space="preserve">
          <source>Alias for &lt;a href=&quot;#equalsNullX(org.codehaus.groovy.ast.expr.Expression)&quot;&gt;equalsNullX(Expression)&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;#equalsNullX(org.codehaus.groovy.ast.expr.Expression)&quot;&gt;equalsNullX（Expression）的&lt;/a&gt;别名</target>
        </trans-unit>
        <trans-unit id="21d0844a01b17206e895d0139ce4129703416362" translate="yes" xml:space="preserve">
          <source>Alias for &lt;a href=&quot;#leftShift(groovy.lang.Closure)&quot;&gt;leftShift(Closure)&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;#leftShift(groovy.lang.Closure)&quot;&gt;leftShift的&lt;/a&gt;别名（关闭）</target>
        </trans-unit>
        <trans-unit id="f6b6a15e4ce07eb78e724466c079b10c4f61bc0c" translate="yes" xml:space="preserve">
          <source>Alias for &lt;a href=&quot;#rightShift(groovy.lang.Closure)&quot;&gt;rightShift(Closure)&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;#rightShift(groovy.lang.Closure)&quot;&gt;rightShift的&lt;/a&gt;别名（关闭）</target>
        </trans-unit>
        <trans-unit id="924ec4ae43876c6837b75d49a36a09cab18f4050" translate="yes" xml:space="preserve">
          <source>Alias for &lt;a href=&quot;#setDisallowedTokens(java.util.List)&quot;&gt;setDisallowedTokens(List)&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;#setDisallowedTokens(java.util.List)&quot;&gt;setDisallowedTokens（List）的&lt;/a&gt;别名。</target>
        </trans-unit>
        <trans-unit id="54e60131a969d50ec08d79ea8bf8be93bbc7bec3" translate="yes" xml:space="preserve">
          <source>Alias for calling a Closure for non-closure arguments.</source>
          <target state="translated">用于调用非closure参数的Closure的别名。</target>
        </trans-unit>
        <trans-unit id="74ea21f9c0331e528cf28a8b829bf0e8dffbaf8d" translate="yes" xml:space="preserve">
          <source>All &lt;code&gt;ResultSetMetaData&lt;/code&gt; column methods taking a column index are available on a column either as a no-arg getter or via a property.</source>
          <target state="translated">所有带有列索引的 &lt;code&gt;ResultSetMetaData&lt;/code&gt; 列方法都可以作为无参数的获取器或通过属性在列上使用。</target>
        </trans-unit>
        <trans-unit id="adbd2168487dab7b4ddbc2cfdb81c97b55b9f439" translate="yes" xml:space="preserve">
          <source>All Implemented Interfaces and Traits:</source>
          <target state="translated">所有已实现的接口和特征。</target>
        </trans-unit>
        <trans-unit id="ed0203d6946d7c14ba9bce96c8bed4953c201838" translate="yes" xml:space="preserve">
          <source>All Superinterfaces:</source>
          <target state="translated">所有超级接口。</target>
        </trans-unit>
        <trans-unit id="d4752340319a5a80a009d39ec91aaa5cc10c2cf4" translate="yes" xml:space="preserve">
          <source>All classes and interfaces in this package optionally limited to just the included ones.</source>
          <target state="translated">本包中的所有类和接口,可选择只限于包含的类和接口。</target>
        </trans-unit>
        <trans-unit id="dd8f0c9b02fcad264b60f88cb2af68a2abb0b6d1" translate="yes" xml:space="preserve">
          <source>All implemented methods will throw an instance of this exception constructed using its no-arg constructor. You can also supply a single &lt;code&gt;message&lt;/code&gt; annotation attribute in which case the message will be passed as an argument during exception construction as shown in the following example:</source>
          <target state="translated">所有实现的方法都将抛出使用其no-arg构造函数构造的此异常的实例。您还可以提供单个 &lt;code&gt;message&lt;/code&gt; 注释属性，在这种情况下，将在异常构造过程中将消息作为参数传递，如以下示例所示：</target>
        </trans-unit>
        <trans-unit id="a45f0ecda068e4ab25c217a981bf164448f9fc77" translate="yes" xml:space="preserve">
          <source>All included classes and interfaces in this package.</source>
          <target state="translated">本包中包含的所有类和接口。</target>
        </trans-unit>
        <trans-unit id="7194cd5b52d1d086dfc53e938b19b607c63b5eaf" translate="yes" xml:space="preserve">
          <source>All lines starting with &quot;#&quot; are ignored.</source>
          <target state="translated">所有以 &quot;#&quot;开头的行将被忽略。</target>
        </trans-unit>
        <trans-unit id="b2207a645d31589d307bc9c76fca55b9399871b3" translate="yes" xml:space="preserve">
          <source>All methods defined in the owner class (including static, abstract or private etc.) take precedence over methods with identical signatures from a &lt;code&gt;@Delegate&lt;/code&gt; target</source>
          <target state="translated">所有者类中定义的所有方法（包括静态，抽象或私有等）优先于来自 &lt;code&gt;@Delegate&lt;/code&gt; 目标的具有相同签名的方法</target>
        </trans-unit>
        <trans-unit id="80d5595485a0e9b821bd3e547179f7a6170b8a9e" translate="yes" xml:space="preserve">
          <source>All resources including the ResultSet are closed automatically after the closure is called.</source>
          <target state="translated">调用关闭后,包括ResultSet在内的所有资源都会自动关闭。</target>
        </trans-unit>
        <trans-unit id="f67acc4eb2dc208a52d283fd4976112adb17c716" translate="yes" xml:space="preserve">
          <source>All templates compiled through &lt;a href=&quot;markuptemplateengine&quot;&gt;MarkupTemplateEngine&lt;/a&gt; extend this abstract class, which provides a number of utility methods to generate markup. An instance of this class can be obtained after calling &lt;a href=&quot;../template#make()&quot;&gt;Template.make&lt;/a&gt; or &lt;a href=&quot;../template#make(java.util.Map)&quot;&gt;Template.make&lt;/a&gt;)} on a template generated by &lt;a href=&quot;markuptemplateengine#createTemplate(java.io.Reader)&quot;&gt;MarkupTemplateEngine.createTemplate&lt;/a&gt;.</source>
          <target state="translated">通过&lt;a href=&quot;markuptemplateengine&quot;&gt;MarkupTemplateEngine&lt;/a&gt;编译的所有模板都扩展了该抽象类，该类提供了许多实用的方法来生成标记。可以在由&lt;a href=&quot;markuptemplateengine#createTemplate(java.io.Reader)&quot;&gt;MarkupTemplateEngine.createTemplate&lt;/a&gt;生成的模板上调用&lt;a href=&quot;../template#make()&quot;&gt;Template.make&lt;/a&gt;或&lt;a href=&quot;../template#make(java.util.Map)&quot;&gt;Template.make&lt;/a&gt;）}后获得此类的实例。</target>
        </trans-unit>
        <trans-unit id="2a0b23a3a0a76b980d2bc4725ad97a3d71c3c013" translate="yes" xml:space="preserve">
          <source>All variables bound the binding are passed to the template source text, e.g. the HTML file, when the template is merged.</source>
          <target state="translated">当模板合并时,所有绑定的变量都会传递给模板源文本,例如HTML文件。</target>
        </trans-unit>
        <trans-unit id="41b13c4c07c1aca2b1158e8530db2da076e54102" translate="yes" xml:space="preserve">
          <source>AllTestSuite can be used in extension of GroovyTestSuite to execute TestCases written in Groovy from inside a Java IDE. AllTestSuite collects all files below a given directory that comply to a given pattern. From these files, a TestSuite is constructed that can be run via an IDE graphical Test runner. The files are assumed to be Groovy source files and be either a TestCase or a Script that can be wrapped transparently into a TestCase. The directory and the pattern can be set via System properties (see this classes' constants for details.)</source>
          <target state="translated">AllTestSuite可用于GroovyTestSuite的扩展,在Java IDE内部执行用Groovy编写的TestCases。AllTestSuite收集给定目录下所有符合给定模式的文件。从这些文件中,构建了一个可以通过IDE图形化测试运行器运行的TestSuite。这些文件被假定为Groovy源文件,并且可以是一个TestCase,也可以是一个可以透明地封装到TestCase中的Script。目录和模式可以通过系统属性来设置(详见本类的常量)。</target>
        </trans-unit>
        <trans-unit id="41876e13908c6cca5794d4d44f3da26ef34c3aba" translate="yes" xml:space="preserve">
          <source>Allow DefaultListModel to work with subscript operators.</source>
          <target state="translated">允许DefaultListModel与下标运算符一起工作。</target>
        </trans-unit>
        <trans-unit id="b085cdcd2b892d6f8579b365511607d2b4bd3d5e" translate="yes" xml:space="preserve">
          <source>Allow DefaultTableModel to work with subscript operators.</source>
          <target state="translated">允许DefaultTableModel与下标运算符一起工作。</target>
        </trans-unit>
        <trans-unit id="a26255ed21cfbaec57975e3ebdf24c2d620a6645" translate="yes" xml:space="preserve">
          <source>Allow MutableComboBoxModel to work with subscript operators.</source>
          <target state="translated">允许MutableComboBoxModel与下标运算符一起工作。</target>
        </trans-unit>
        <trans-unit id="43609ae75456d6c9b8a11d65a959d3eafaab875b" translate="yes" xml:space="preserve">
          <source>Allow MutableTreeNode to work with subscript operators.</source>
          <target state="translated">允许MutableTreeNode与下标操作符一起工作。</target>
        </trans-unit>
        <trans-unit id="1f6d4ec730cbfbe1da39a1c369f4a3deb15f5dab" translate="yes" xml:space="preserve">
          <source>Allow an anonymous function to be declared and invoked</source>
          <target state="translated">允许声明和调用匿名函数。</target>
        </trans-unit>
        <trans-unit id="76166bbfcd99b17e85ed0fb65687de68ab8d1737" translate="yes" xml:space="preserve">
          <source>Allow automatic detection of namespace declared in the attributes</source>
          <target state="translated">允许自动检测在属性中声明的命名空间。</target>
        </trans-unit>
        <trans-unit id="0cec0e878b4a1cb5c308661468007ed126166b67" translate="yes" xml:space="preserve">
          <source>Allows &quot;interrupt-safe&quot; executions of scripts by adding Thread.currentThread().isInterrupted() checks into loops (for, while) and at the start of closures and methods.</source>
          <target state="translated">通过将Thread.currentThread().isInterrupted()检查添加到循环(for,while)以及闭包和方法的开始处,允许脚本的 &quot;中断安全 &quot;执行。</target>
        </trans-unit>
        <trans-unit id="9ba7f583b1e87211c0be41617f91dc47a794b0bb" translate="yes" xml:space="preserve">
          <source>Allows &quot;interrupt-safe&quot; executions of scripts by adding Thread.currentThread().isInterrupted() checks on loops (for, while, do) and first statement of closures. By default, also adds an interrupt check statement on the beginning of method calls.</source>
          <target state="translated">通过在循环(for,while,do)和闭包的第一条语句上添加Thread.currentThread().isInterrupted()检查,允许脚本的 &quot;中断安全 &quot;执行。默认情况下,也会在方法调用的开头添加一个中断检查语句。</target>
        </trans-unit>
        <trans-unit id="eb25d4b822908c2d73b13caf1632f30bc4b61e89" translate="yes" xml:space="preserve">
          <source>Allows &quot;interrupt-safe&quot; executions of scripts by adding a custom check for interruption into loops (for, while, ...) and at the start of closures and methods.</source>
          <target state="translated">通过在循环(for,while,...)中以及在闭包和方法的开始处添加自定义的中断检查,允许 &quot;中断安全 &quot;地执行脚本。</target>
        </trans-unit>
        <trans-unit id="80bd685ffe7df40fb08a5830871d3e4e4fd5edb3" translate="yes" xml:space="preserve">
          <source>Allows &quot;interrupt-safe&quot; executions of scripts by adding a custom conditional check on loops (for, while, do) and first statement of closures. By default, also adds an interrupt check statement on the beginning of method calls.</source>
          <target state="translated">通过在循环(for,while,do)和闭包的第一条语句上添加自定义条件检查,允许 &quot;中断安全 &quot;地执行脚本。默认情况下,也会在方法调用的开头添加一个中断检查语句。</target>
        </trans-unit>
        <trans-unit id="e5c18feeb7bb3b33530b041edc6bbde66a4a3b90" translate="yes" xml:space="preserve">
          <source>Allows &quot;interrupt-safe&quot; executions of scripts by adding timer expiration checks on loops (for, while, do) and first statement of closures. By default, also adds an interrupt check statement on the beginning of method calls.</source>
          <target state="translated">通过在循环(for,while,do)和闭包的第一条语句上添加定时器过期检查,允许脚本的 &quot;中断安全 &quot;执行。默认情况下,也会在方法调用的开始处增加一个中断检查语句。</target>
        </trans-unit>
        <trans-unit id="2a60d2ecfa572667cc348354905e97eb06ce2897" translate="yes" xml:space="preserve">
          <source>Allows &lt;a href=&quot;http://ant.apache.org/manual/coretasklist.html&quot;&gt;Ant tasks&lt;/a&gt; to be used with a Groovy builder-style markup. Requires that {{ant.jar}} is on your classpath which will happen automatically if you are using the Groovy distribution but will be up to you to organize if you are embedding Groovy. If you wish to use the &lt;a href=&quot;http://ant.apache.org/manual/install#optionalTasks&quot;&gt;optional tasks&lt;/a&gt; you will need to add one or more additional jars from the ant distribution to your classpath - see the &lt;a href=&quot;http://ant.apache.org/manual/install.html#librarydependencies&quot;&gt;library dependencies&lt;/a&gt; for more details.</source>
          <target state="translated">允许将&lt;a href=&quot;http://ant.apache.org/manual/coretasklist.html&quot;&gt;Ant任务&lt;/a&gt;与Groovy构建器样式的标记一起使用。要求{{ant.jar}}在您的类路径上，如果您使用Groovy发行版，它将自动发生，但是如果您嵌入Groovy，则取决于您的组织。如果您希望使用&lt;a href=&quot;http://ant.apache.org/manual/install#optionalTasks&quot;&gt;可选任务&lt;/a&gt;，则需要从ant分发中添加一个或多个其他jar到您的类路径-有关更多详细信息，请参见&lt;a href=&quot;http://ant.apache.org/manual/install.html#librarydependencies&quot;&gt;库依赖项&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="274bbd77c911646455841cdb426975df421a9331" translate="yes" xml:space="preserve">
          <source>Allows &lt;a href=&quot;https://ant.apache.org/manual/coretasklist.html&quot;&gt;Ant tasks&lt;/a&gt; to be used with a Groovy builder-style markup. Requires that {{ant.jar}} is on your classpath which will happen automatically if you are using the Groovy distribution but will be up to you to organize if you are embedding Groovy. If you wish to use the &lt;a href=&quot;https://ant.apache.org/manual/install#optionalTasks&quot;&gt;optional tasks&lt;/a&gt; you will need to add one or more additional jars from the ant distribution to your classpath - see the &lt;a href=&quot;https://ant.apache.org/manual/install.html#librarydependencies&quot;&gt;library dependencies&lt;/a&gt; for more details.</source>
          <target state="translated">允许将&lt;a href=&quot;https://ant.apache.org/manual/coretasklist.html&quot;&gt;Ant任务&lt;/a&gt;与Groovy构建器样式的标记一起使用。要求{{ant.jar}}在您的类路径上，如果您使用Groovy发行版，它将自动发生，但是如果您嵌入Groovy，则取决于您的组织。如果您希望使用&lt;a href=&quot;https://ant.apache.org/manual/install#optionalTasks&quot;&gt;可选任务&lt;/a&gt;，则需要从ant分发中添加一个或多个其他jar到您的类路径-有关更多详细信息，请参见&lt;a href=&quot;https://ant.apache.org/manual/install.html#librarydependencies&quot;&gt;库依赖项&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="46c90576fe51deebc40afa5f54cf3c5758443274" translate="yes" xml:space="preserve">
          <source>Allows a Map to be iterated through in reverse order using a closure.</source>
          <target state="translated">允许使用闭包以反向顺序迭代一个Map。</target>
        </trans-unit>
        <trans-unit id="9ce956be3149abbccc14600c19678df58960857a" translate="yes" xml:space="preserve">
          <source>Allows a Map to be iterated through in reverse order using a closure. In general, the order in which the map contents are processed cannot be guaranteed. In practise, specialized forms of Map, e.g. a TreeMap will have its contents processed according to the reverse of the natural ordering of the map.</source>
          <target state="translated">允许使用闭包按反向顺序迭代一个地图。一般来说,地图内容的处理顺序不能保证。在实践中,特殊形式的Map,例如TreeMap将按照地图的自然顺序反向处理其内容。</target>
        </trans-unit>
        <trans-unit id="8376883f288876d3fc889af54a58c2d2315bb753" translate="yes" xml:space="preserve">
          <source>Allows a Map to be iterated through using a closure.</source>
          <target state="translated">允许使用闭包来迭代一个Map。</target>
        </trans-unit>
        <trans-unit id="876cdf629b188f6d94077397f3db52c2db5e1b64" translate="yes" xml:space="preserve">
          <source>Allows a Map to be iterated through using a closure. If the closure takes one parameter then it will be passed the Map.Entry otherwise if the closure takes two parameters then it will be passed the key and the value.</source>
          <target state="translated">允许使用一个闭包对Map进行迭代。如果闭包只有一个参数,那么将传递Map.Entry,否则如果闭包有两个参数,那么将传递key和value。</target>
        </trans-unit>
        <trans-unit id="6c0ea78903ba2b7557e13182cd2dbf0527b8d2ee" translate="yes" xml:space="preserve">
          <source>Allows a Map to be iterated through using a closure. If the closure takes two parameters then it will be passed the Map.Entry and the item's index (a counter starting at zero) otherwise if the closure takes three parameters then it will be passed the key, the value, and the index.</source>
          <target state="translated">允许使用一个闭包对Map进行迭代。如果闭包有两个参数,那么将传递Map.Entry和项目的索引(从零开始的计数器),否则如果闭包有三个参数,那么将传递key、value和index。</target>
        </trans-unit>
        <trans-unit id="711df1a717038418789c93654afc4f89aa7b9349" translate="yes" xml:space="preserve">
          <source>Allows a closure to be passed in to configure the JDBC statements before they are executed.</source>
          <target state="translated">允许在JDBC语句被执行之前传递一个闭包来配置它们。</target>
        </trans-unit>
        <trans-unit id="aad2b90ec9741e4465065723b7abc92ed2cea432" translate="yes" xml:space="preserve">
          <source>Allows a closure to be passed in to configure the JDBC statements before they are executed. It can be used to do things like set the query size etc. When this method is invoked, the supplied closure is saved. Statements subsequently created from other methods will then be configured using this closure. The statement being configured is passed into the closure as its single argument, e.g.:</source>
          <target state="translated">允许在JDBC语句被执行之前传递一个闭包来配置它们。它可以用来做一些事情,比如设置查询大小等。当这个方法被调用时,提供的闭包会被保存。随后通过其他方法创建的语句将使用这个闭包进行配置。被配置的语句作为它的单个参数被传递到闭包中,例如:。</target>
        </trans-unit>
        <trans-unit id="bc05e8e3141f1a2273469be6a061c3f2c1f43606" translate="yes" xml:space="preserve">
          <source>Allows a file to return a Writable implementation that can output itself to a Writer stream.</source>
          <target state="translated">允许文件返回一个可以将自己输出到Writer流的Writable实现。</target>
        </trans-unit>
        <trans-unit id="ed8d5d3bdf046fa1aefd67f238c062648b30defd" translate="yes" xml:space="preserve">
          <source>Allows a more compact convenience form in one of two formats with optional appended attributes.</source>
          <target state="translated">允许以两种格式之一的更紧凑的方便表格,并可选择附加属性。</target>
        </trans-unit>
        <trans-unit id="f4e973681bee50efd9cdc7d4418b5435a6f7b732" translate="yes" xml:space="preserve">
          <source>Allows a more compact convenience form in one of two formats with optional appended attributes. Must not be used if group(), module() or version() are used.</source>
          <target state="translated">允许使用两种格式之一的更紧凑的方便表格,并可选择附加属性。如果使用group()、module()或version(),则不得使用。</target>
        </trans-unit>
        <trans-unit id="6a5a51575c65df3e09223cc4c38eeb73dcf5f8c9" translate="yes" xml:space="preserve">
          <source>Allows a more traditional instance-style mocking paradigm.</source>
          <target state="translated">允许更传统的实例式嘲讽范式。</target>
        </trans-unit>
        <trans-unit id="12a522f8602e21d110870105cbae8b3c4916d96b" translate="yes" xml:space="preserve">
          <source>Allows a more traditional instance-style mocking paradigm. This is the recommended method to call to use the instance-style with Groovy classes. When mocking interfaces or abstract classes, a compatible proxy instance will be returned. When mocking Java classes, a compatible Groovy class will be generated and proxy instance returned. A MockProxyMetaClass will be instantiated for the original class. Typical example:</source>
          <target state="translated">允许使用更传统的实例式嘲讽范式。这是推荐调用的方法,以便在Groovy类中使用实例风格。当嘲弄接口或抽象类时,将返回一个兼容的代理实例。当嘲弄Java类时,将生成一个兼容的Groovy类并返回代理实例。将为原始类实例化一个MockProxyMetaClass。典型的例子。</target>
        </trans-unit>
        <trans-unit id="7d27716d6f9a0badd4f68302e35d60daa25fd665" translate="yes" xml:space="preserve">
          <source>Allows a more traditional instance-style mocking paradigm. This is the recommended method to call to use the instance-style with Java classes. When mocking interfaces or abstract classes, a compatible proxy instance will be returned. When mocking Java classes, a compatible Groovy class will be generated and proxy instance returned. A MockProxyMetaClass will be instantiated for the class of the instance (i.e. may be on the generated class not the original class).</source>
          <target state="translated">允许使用更传统的实例式嘲讽范式。这是推荐调用的方法,以使用Java类的实例风格。当嘲弄接口或抽象类时,将返回一个兼容的代理实例。当嘲弄Java类时,将生成一个兼容的Groovy类并返回代理实例。将为实例的类实例化一个MockProxyMetaClass(即可能是在生成的类上,而不是在原始类上)。</target>
        </trans-unit>
        <trans-unit id="9e0fa65ebf7738739c5f18062adac5f79a28bc03" translate="yes" xml:space="preserve">
          <source>Allows a more traditional instance-style stubbing paradigm.</source>
          <target state="translated">允许一个更传统的实例式的支点范式。</target>
        </trans-unit>
        <trans-unit id="8a84a12fe59f1b753703c06da0cf36fa9d1ad0bd" translate="yes" xml:space="preserve">
          <source>Allows a more traditional instance-style stubbing paradigm. This is the recommended method to call to use the instance-style with Groovy classes.</source>
          <target state="translated">允许使用更传统的实例风格的存根范式。这是推荐调用的方法,以便在Groovy类中使用实例风格。</target>
        </trans-unit>
        <trans-unit id="7be6ecdbbf2663f9e81ca1eb299282a85630df38" translate="yes" xml:space="preserve">
          <source>Allows a more traditional instance-style stubbing paradigm. This is the recommended method to call to use the instance-style with Java classes.</source>
          <target state="translated">允许使用更传统的实例风格的存根范式。这是推荐调用的方法,以使用Java类的实例风格。</target>
        </trans-unit>
        <trans-unit id="20b01c6ee4d6802b2cd415e7fe57c84090e3cc78" translate="yes" xml:space="preserve">
          <source>Allows a shorthand form which sets the name and root to this value.</source>
          <target state="translated">允许一个速记形式,将名称和根设置为这个值。</target>
        </trans-unit>
        <trans-unit id="7534dbc6d3298eb4d5547efaddb888e4bd95e666" translate="yes" xml:space="preserve">
          <source>Allows a shorthand form which sets the name and root to this value. Must not be used if name() or root() is non-empty.</source>
          <target state="translated">允许一个速记形式,将name和root设置为这个值。如果name()或root()是非空的,则不能使用。</target>
        </trans-unit>
        <trans-unit id="d6d1645e149607f9464acd02d1d709c3e122aada" translate="yes" xml:space="preserve">
          <source>Allows a simple syntax for using timers.</source>
          <target state="translated">允许使用定时器的简单语法。</target>
        </trans-unit>
        <trans-unit id="9da268c7fdc70be97a547cb1988841f04e9a8b99" translate="yes" xml:space="preserve">
          <source>Allows a simple syntax for using timers. This timer will execute the given closure after the given delay.</source>
          <target state="translated">允许使用定时器的简单语法。该定时器将在给定的延迟后执行给定的关闭。</target>
        </trans-unit>
        <trans-unit id="207c2dd9176be854457cb1c0c7c238d31d4cf7cb" translate="yes" xml:space="preserve">
          <source>Allows an Enumeration to behave like an Iterator.</source>
          <target state="translated">允许一个枚举的行为像一个迭代器。</target>
        </trans-unit>
        <trans-unit id="2161d0b0a5342b77fb0f0be75484287c481b22dd" translate="yes" xml:space="preserve">
          <source>Allows an Enumeration to behave like an Iterator. Note that the &lt;a href=&quot;https://docs.oracle.com/javase/8/docs/api/java/util/Iterator.html#remove()%20remove()&quot;&gt;Iterator.remove&lt;/a&gt; method is unsupported since the underlying Enumeration does not provide a mechanism for removing items.</source>
          <target state="translated">允许枚举的行为类似于迭代器。请注意，不支持&lt;a href=&quot;https://docs.oracle.com/javase/8/docs/api/java/util/Iterator.html#remove()%20remove()&quot;&gt;Iterator.remove&lt;/a&gt;方法，因为基础枚举不提供删除项目的机制。</target>
        </trans-unit>
        <trans-unit id="7703e9d266d2d7faefadd9eba1e85c7477858f69" translate="yes" xml:space="preserve">
          <source>Allows arrays to behave similar to collections.</source>
          <target state="translated">允许数组的行为类似于集合。</target>
        </trans-unit>
        <trans-unit id="57f44b07dc31b564b49de1edf1df2937d80ddc37" translate="yes" xml:space="preserve">
          <source>Allows construction of a named-arg equivalent method or constructor. The method or constructor will have at least a first argument of type &lt;code&gt;Map&lt;/code&gt; and may have more arguments. As such, it can be called using Groovy's named-arg syntax. The original method/constructor is retained and is called by the generated method/constructor. One benefit of this approach is the potential for improved type checking. The annotated &quot;tuple&quot; method/constructor can be type rich and will be checked as such during normal compilation. The generated method/constructor using the map argument will be named-argument friendly but the map also hides type information. The generated method however contains no business logic so the chance of errors is minimal. Any arguments identified as named arguments will be supplied as part of the map. Any additional arguments are supplied in the normal tuple style. Named parameters are identified in one of three ways:</source>
          <target state="translated">允许构造一个named-arg等效方法或构造函数。该方法或构造函数将至少具有 &lt;code&gt;Map&lt;/code&gt; 类型的第一个参数并可能有更多的论点。这样，可以使用Groovy的named-arg语法来调用它。原始方法/构造函数将保留并由生成的方法/构造函数调用。这种方法的一个好处是可以改进类型检查。带注释的&amp;ldquo;元组&amp;rdquo;方法/构造函数可以是类型丰富的，并且将在常规编译期间进行检查。使用map参数生成的方法/构造函数将是命名参数友好的，但是map也隐藏了类型信息。但是，生成的方法不包含业务逻辑，因此发生错误的可能性很小。标识为命名参数的所有参数都将作为映射的一部分提供。任何其他参数均以常规元组样式提供。命名参数通过以下三种方式之一进行标识：</target>
        </trans-unit>
        <trans-unit id="51a19624c2e564f32c6a6686e32bfe26a8bec271" translate="yes" xml:space="preserve">
          <source>Allows conversion of arrays into a mutable List</source>
          <target state="translated">允许将数组转换为一个可变更的列表。</target>
        </trans-unit>
        <trans-unit id="d01aa34e18f07df4816cdb692256f9d6a084b151" translate="yes" xml:space="preserve">
          <source>Allows conversion of arrays into a mutable List.</source>
          <target state="translated">允许将数组转换为一个可变的List。</target>
        </trans-unit>
        <trans-unit id="c3b07c5c1c007a892b2e710b4ff157648250ba14" translate="yes" xml:space="preserve">
          <source>Allows customisation of the usage message width.</source>
          <target state="translated">允许自定义使用信息的宽度。</target>
        </trans-unit>
        <trans-unit id="f9092b0eba07aa0bac26c02cd8c6bf6b975bb044" translate="yes" xml:space="preserve">
          <source>Allows empty attributes to be removed from the generated markup.</source>
          <target state="translated">允许从生成的标记中删除空属性。</target>
        </trans-unit>
        <trans-unit id="a5a8c64503e8085887f6642e2225681982efebe8" translate="yes" xml:space="preserve">
          <source>Allows frameworks that integrate with Groovy to determine how Groovy files are resolved.</source>
          <target state="translated">允许与Groovy集成的框架决定如何解析Groovy文件。</target>
        </trans-unit>
        <trans-unit id="8ae54b9e82f12b5ba2e0d95d633321da06a22091" translate="yes" xml:space="preserve">
          <source>Allows methods to be dynamically added to existing classes at runtime</source>
          <target state="translated">允许在运行时将方法动态地添加到现有的类中。</target>
        </trans-unit>
        <trans-unit id="e01939a4a728b28227ee02f04bf8df4b234f4ed6" translate="yes" xml:space="preserve">
          <source>Allows null attributes to be removed from the generated markup.</source>
          <target state="translated">允许从生成的标记中删除空属性。</target>
        </trans-unit>
        <trans-unit id="a0c151d07faa8136719194c53afb0bdd8ba8f382" translate="yes" xml:space="preserve">
          <source>Allows one Process to asynchronously pipe data to another Process.</source>
          <target state="translated">允许一个进程异步地将数据管道到另一个进程。</target>
        </trans-unit>
        <trans-unit id="0ab530a344b85cbc2b62b0d5ae6c13bf3f7482ae" translate="yes" xml:space="preserve">
          <source>Allows particular method calls to be ignored and not treated as part of the required behavior specification.</source>
          <target state="translated">允许忽略特定的方法调用,不将其作为所需行为规范的一部分。</target>
        </trans-unit>
        <trans-unit id="447d1c802ca66356bc1177ada83aae8e8fe5ba1c" translate="yes" xml:space="preserve">
          <source>Allows particular method calls to be ignored and not treated as part of the required behavior specification. If you don't specify a return closure the method call will fall through to the underlying instance, i.e. half-mock style. The &lt;code&gt;filter&lt;/code&gt; object is invoked using the normal Groovy &lt;code&gt;isCase()&lt;/code&gt; semantics.</source>
          <target state="translated">允许忽略特定的方法调用，而不将其视为必需的行为规范的一部分。如果不指定返回闭包，则方法调用将落入基础实例，即半模拟样式。该 &lt;code&gt;filter&lt;/code&gt; 对象使用正常的Groovy调用 &lt;code&gt;isCase()&lt;/code&gt; 语义。</target>
        </trans-unit>
        <trans-unit id="3d6b620d528eed7b6bd2ccdfc235bfe9b46a6b8b" translate="yes" xml:space="preserve">
          <source>Allows particular method calls to be ignored and not treated as part of the required behavior specification. If you don't specify a return closure the method call will fall through to the underlying instance, i.e. half-mock style. The &lt;code&gt;filter&lt;/code&gt; object is invoked using the normal Groovy &lt;code&gt;isCase()&lt;/code&gt; semantics. Here are some examples:</source>
          <target state="translated">允许忽略特定的方法调用，而不将其视为必需的行为规范的一部分。如果不指定返回闭包，则方法调用将落入基础实例，即半模拟样式。该 &lt;code&gt;filter&lt;/code&gt; 对象使用正常的Groovy调用 &lt;code&gt;isCase()&lt;/code&gt; 语义。这里有些例子：</target>
        </trans-unit>
        <trans-unit id="a3a6ff4ca96edcaa7d55e6702ec17f3750cccd8f" translate="yes" xml:space="preserve">
          <source>Allows safe timed executions of scripts by adding elapsed time checks into loops (for, while) and at the start of closures and methods and throwing an exception if a timeout occurs.</source>
          <target state="translated">通过在循环(for,while)、闭包和方法的开始处添加经过时间检查,并在发生超时时抛出异常,允许脚本的安全定时执行。</target>
        </trans-unit>
        <trans-unit id="da3ea58fa6dc03c1091fd6bf63de66365931be43" translate="yes" xml:space="preserve">
          <source>Allows selection of parser type for new new JsonSlurper.</source>
          <target state="translated">允许为新的JsonSlurper选择解析器类型。</target>
        </trans-unit>
        <trans-unit id="329f1fadf989fd43fd15718f2154d16bcc86107d" translate="yes" xml:space="preserve">
          <source>Allows subclasses to provide their own visitor.</source>
          <target state="translated">允许子类提供自己的访问者。</target>
        </trans-unit>
        <trans-unit id="8a594e61f3baa6f644b6f7e646f7b9550675ad17" translate="yes" xml:space="preserve">
          <source>Allows subclasses to provide their own visitor. This is useful for example for transformations relying on the static type checker.</source>
          <target state="translated">允许子类提供自己的访问者。这对于依赖静态类型检查器的转换很有用。</target>
        </trans-unit>
        <trans-unit id="450f2e863d2b363c0b032198e4b3e11d60fed76b" translate="yes" xml:space="preserve">
          <source>Allows the MetaClass to be replaced with a derived implementation.</source>
          <target state="translated">允许用派生的实现来替换MetaClass。</target>
        </trans-unit>
        <trans-unit id="4b1333e12b2fb7bd534da8dd88d2368c2c967297" translate="yes" xml:space="preserve">
          <source>Allows the closure to be called for NullObject</source>
          <target state="translated">允许为NullObject调用闭包。</target>
        </trans-unit>
        <trans-unit id="6d596990fba1ef230ec19d02bf74cfbcb13c620e" translate="yes" xml:space="preserve">
          <source>Allows the closure to be called for the object reference self (similar to &lt;code&gt;with&lt;/code&gt; and always returns self.</source>
          <target state="translated">允许为对象引用self调用闭包（类似于 &lt;code&gt;with&lt;/code&gt; 并始终返回self。</target>
        </trans-unit>
        <trans-unit id="516361e5ee9c735d2e1e89bef04037ae02fd4e0b" translate="yes" xml:space="preserve">
          <source>Allows the closure to be called for the object reference self.</source>
          <target state="translated">允许为对象引用self调用闭包。</target>
        </trans-unit>
        <trans-unit id="621acf6cf2fbb085b155543d41e3d417d3eaf8cb" translate="yes" xml:space="preserve">
          <source>Allows the closure to be called for the object reference self. Synonym for 'with()'.</source>
          <target state="translated">允许为对象引用self调用闭包。with()'的同义词。</target>
        </trans-unit>
        <trans-unit id="8c8c40709e434026d026f1e7069d725a7d817b8c" translate="yes" xml:space="preserve">
          <source>Allows the delegate to be changed such as when performing markup building</source>
          <target state="translated">允许改变委托人,例如在进行标记构建时。</target>
        </trans-unit>
        <trans-unit id="50f9cdffe69a3d23cb2579ff3004bea9e666de3e" translate="yes" xml:space="preserve">
          <source>Allows the extension to catch incompatible return types.</source>
          <target state="translated">允许扩展捕获不兼容的返回类型。</target>
        </trans-unit>
        <trans-unit id="706d09d4a3b97d275f1a5d7d161ecbb7ee9dc029" translate="yes" xml:space="preserve">
          <source>Allows the extension to catch incompatible return types. This event is called whenever the type checker finds that an inferred return type is incompatible with the declared return type of a method.</source>
          <target state="translated">允许扩展捕获不兼容的返回类型。每当类型检查器发现推断的返回类型与方法的声明返回类型不兼容时,就会调用该事件。</target>
        </trans-unit>
        <trans-unit id="4f6988aae4dfc82c9256787faf5bee190294fd72" translate="yes" xml:space="preserve">
          <source>Allows the extension to listen to method selection events.</source>
          <target state="translated">允许扩展监听方法选择事件。</target>
        </trans-unit>
        <trans-unit id="0141f0b4a772c8bcb5cbf0e23390becfeff8a92c" translate="yes" xml:space="preserve">
          <source>Allows the extension to listen to method selection events. Given an expression, which may be a method call expression, a static method call expression, a pre/postfix expression, ..., if a corresponding method is found, this method is called.</source>
          <target state="translated">允许扩展监听方法选择事件。给定一个表达式,可以是方法调用表达式、静态方法调用表达式、前/后缀表达式,......,如果找到对应的方法,就会调用这个方法。</target>
        </trans-unit>
        <trans-unit id="0e1ef4c9e092dd59497aa869467e7fbb46a1edbd" translate="yes" xml:space="preserve">
          <source>Allows the extension to perform additional tasks after the type checker actually visited a class node.</source>
          <target state="translated">允许扩展在类型检查器实际访问一个类节点后执行额外的任务。</target>
        </trans-unit>
        <trans-unit id="025c2fd2ebc54a828c20fdb6705bd8128a65c2a5" translate="yes" xml:space="preserve">
          <source>Allows the extension to perform additional tasks after the type checker actually visited a class node. Compared to a custom visitor, this method ensures that the node being visited is a node which would have been visited by the type checker. This is in particular important for nodes which are marked with &lt;a href=&quot;../../../../../groovy/transform/typecheckingmode#SKIP&quot;&gt;TypeCheckingMode.SKIP&lt;/a&gt;.</source>
          <target state="translated">在类型检查器实际访问类节点之后，允许扩展执行其他任务。与自定义访问者相比，此方法可确保被访问的节点是类型检查器将访问的节点。这对于标记有&lt;a href=&quot;../../../../../groovy/transform/typecheckingmode#SKIP&quot;&gt;TypeCheckingMode.SKIP的&lt;/a&gt;节点尤其重要。</target>
        </trans-unit>
        <trans-unit id="91a9bd2dbe004d85ee8ca09d7f68335a999389d1" translate="yes" xml:space="preserve">
          <source>Allows the extension to perform additional tasks after the type checker actually visited a method node.</source>
          <target state="translated">允许扩展在类型检查器实际访问方法节点后执行附加任务。</target>
        </trans-unit>
        <trans-unit id="efb9bc7a2e101d66bd3d1550ee2c852e5f6bf34e" translate="yes" xml:space="preserve">
          <source>Allows the extension to perform additional tasks after the type checker actually visited a method node. Compared to a custom visitor, this method ensures that the node being visited is a node which would have been visited by the type checker. This is in particular important for nodes which are marked with &lt;a href=&quot;../../../../../groovy/transform/typecheckingmode#SKIP&quot;&gt;TypeCheckingMode.SKIP&lt;/a&gt;.</source>
          <target state="translated">在类型检查器实际访问方法节点之后，允许扩展执行其他任务。与自定义访问者相比，此方法可确保被访问的节点是类型检查器将访问的节点。这对于标记有&lt;a href=&quot;../../../../../groovy/transform/typecheckingmode#SKIP&quot;&gt;TypeCheckingMode.SKIP的&lt;/a&gt;节点尤其重要。</target>
        </trans-unit>
        <trans-unit id="577721e583140c944601421891215c585112b492" translate="yes" xml:space="preserve">
          <source>Allows the extension to perform additional tasks after the type checker actually visits a method call.</source>
          <target state="translated">允许扩展在类型检查器实际访问方法调用后执行附加任务。</target>
        </trans-unit>
        <trans-unit id="9dabcdbba4e3089744ac1ff34ebf4f6e91e77d0c" translate="yes" xml:space="preserve">
          <source>Allows the extension to perform additional tasks after the type checker actually visits a method call. Compared to a custom visitor, this method ensures that the node being visited is a node which would have been visited by the type checker. This is in particular important for nodes which are marked with &lt;a href=&quot;../../../../../groovy/transform/typecheckingmode#SKIP&quot;&gt;TypeCheckingMode.SKIP&lt;/a&gt;.</source>
          <target state="translated">在类型检查器实际访问方法调用之后，允许扩展执行其他任务。与自定义访问者相比，此方法可确保被访问的节点是类型检查器将访问的节点。这对于标记有&lt;a href=&quot;../../../../../groovy/transform/typecheckingmode#SKIP&quot;&gt;TypeCheckingMode.SKIP的&lt;/a&gt;节点尤其重要。</target>
        </trans-unit>
        <trans-unit id="2a0bf7a2c9f3069dde843fa6505d9b42cff5dbee" translate="yes" xml:space="preserve">
          <source>Allows the extension to perform additional tasks before the type checker actually visits a class node.</source>
          <target state="translated">允许扩展在类型检查器实际访问类节点之前执行附加任务。</target>
        </trans-unit>
        <trans-unit id="7f4f99f6f382500efb80de6f43491850d9858fb4" translate="yes" xml:space="preserve">
          <source>Allows the extension to perform additional tasks before the type checker actually visits a class node. Compared to a custom visitor, this method ensures that the node being visited is a node which would have been visited by the type checker. This is in particular important for nodes which are marked with &lt;a href=&quot;../../../../../groovy/transform/typecheckingmode#SKIP&quot;&gt;TypeCheckingMode.SKIP&lt;/a&gt;.</source>
          <target state="translated">允许扩展在类型检查器实际访问类节点之前执行其他任务。与自定义访问者相比，此方法可确保被访问的节点是类型检查器将访问的节点。这对于标记有&lt;a href=&quot;../../../../../groovy/transform/typecheckingmode#SKIP&quot;&gt;TypeCheckingMode.SKIP的&lt;/a&gt;节点尤其重要。</target>
        </trans-unit>
        <trans-unit id="e936bc0c783eb37bfca3d7672a7a96b8493c1ec4" translate="yes" xml:space="preserve">
          <source>Allows the extension to perform additional tasks before the type checker actually visits a method call.</source>
          <target state="translated">允许扩展在类型检查器实际访问方法调用之前执行附加任务。</target>
        </trans-unit>
        <trans-unit id="2cdd944e5ee067618f72ae2e7cb1cdf34bbee0b3" translate="yes" xml:space="preserve">
          <source>Allows the extension to perform additional tasks before the type checker actually visits a method call. Compared to a custom visitor, this method ensures that the node being visited is a node which would have been visited by the type checker. This is in particular important for nodes which are marked with &lt;a href=&quot;../../../../../groovy/transform/typecheckingmode#SKIP&quot;&gt;TypeCheckingMode.SKIP&lt;/a&gt;.</source>
          <target state="translated">允许扩展在类型检查器实际访问方法调用之前执行其他任务。与自定义访问者相比，此方法可确保被访问的节点是类型检查器将访问的节点。这对于标记有&lt;a href=&quot;../../../../../groovy/transform/typecheckingmode#SKIP&quot;&gt;TypeCheckingMode.SKIP的&lt;/a&gt;节点尤其重要。</target>
        </trans-unit>
        <trans-unit id="49827dbc8730bf8d46021f59664828fd0f9641fe" translate="yes" xml:space="preserve">
          <source>Allows the extension to perform additional tasks before the type checker actually visits a method node.</source>
          <target state="translated">允许扩展在类型检查器实际访问方法节点之前执行附加任务。</target>
        </trans-unit>
        <trans-unit id="2aa7ba86cf901453e690d6c2a6e502e882cf4941" translate="yes" xml:space="preserve">
          <source>Allows the extension to perform additional tasks before the type checker actually visits a method node. Compared to a custom visitor, this method ensures that the node being visited is a node which would have been visited by the type checker. This is in particular important for nodes which are marked with &lt;a href=&quot;../../../../../groovy/transform/typecheckingmode#SKIP&quot;&gt;TypeCheckingMode.SKIP&lt;/a&gt;.</source>
          <target state="translated">允许扩展在类型检查器实际访问方法节点之前执行其他任务。与自定义访问者相比，此方法可确保被访问的节点是类型检查器将访问的节点。这对于标记有&lt;a href=&quot;../../../../../groovy/transform/typecheckingmode#SKIP&quot;&gt;TypeCheckingMode.SKIP的&lt;/a&gt;节点尤其重要。</target>
        </trans-unit>
        <trans-unit id="54aff03b63af3b07b6b078a278ba34ce5f595304" translate="yes" xml:space="preserve">
          <source>Allows the subscript operator to be used to lookup dynamic property values.</source>
          <target state="translated">允许使用下标操作符来查找动态属性值。</target>
        </trans-unit>
        <trans-unit id="dcebe11b9ed08f4071c1faeacafd366ece886fe9" translate="yes" xml:space="preserve">
          <source>Allows the subscript operator to be used to lookup dynamic property values. &lt;code&gt;bean[somePropertyNameExpression]&lt;/code&gt;. The normal property notation of groovy is neater and more concise but only works with compile-time known property names.</source>
          <target state="translated">允许下标运算符用于查找动态属性值。 &lt;code&gt;bean[somePropertyNameExpression]&lt;/code&gt; 。groovy的常规属性表示法更简洁，更简洁，但仅适用于编译时已知的属性名。</target>
        </trans-unit>
        <trans-unit id="307aa543dab66b1bbf95bcd6b94aae4376111c5b" translate="yes" xml:space="preserve">
          <source>Allows the subscript operator to be used to set dynamically named property values.</source>
          <target state="translated">允许使用下标操作符来设置动态命名的属性值。</target>
        </trans-unit>
        <trans-unit id="402b095bb6db211deb3f8ce0ead18e948e5aeb7e" translate="yes" xml:space="preserve">
          <source>Allows the subscript operator to be used to set dynamically named property values. &lt;code&gt;bean[somePropertyNameExpression] = foo&lt;/code&gt;. The normal property notation of groovy is neater and more concise but only works with property names which are known at compile time.</source>
          <target state="translated">允许下标运算符用于设置动态命名的属性值。 &lt;code&gt;bean[somePropertyNameExpression] = foo&lt;/code&gt; 。groovy的常规属性表示法更简洁，更简洁，但仅适用于在编译时已知的属性名。</target>
        </trans-unit>
        <trans-unit id="66d10fbefda364d2c1e74d92d6145f80bb3488c8" translate="yes" xml:space="preserve">
          <source>Allows the usage of a one-element string for a mnemonic</source>
          <target state="translated">允许使用一个单元素的字符串作为标记。</target>
        </trans-unit>
        <trans-unit id="84d48b24727204cb6d7dd2f526299a3bdbf8c225" translate="yes" xml:space="preserve">
          <source>Allows the usage of addShutdownHook without getting the runtime first.</source>
          <target state="translated">允许使用addShutdownHook而不需要先获得运行时。</target>
        </trans-unit>
        <trans-unit id="cc4bb1e4cd59538dd1832f3a1ac4f5eca7afcb4b" translate="yes" xml:space="preserve">
          <source>Allows this AutoCloseable to be used within the closure, ensuring that it is closed once the closure has been executed and before this method returns.</source>
          <target state="translated">允许在闭包中使用这个AutoCloseable,确保一旦闭包被执行,在这个方法返回之前,它就被关闭。</target>
        </trans-unit>
        <trans-unit id="67ed6e06741b1e062d2dd31e9d1db03ffac6106a" translate="yes" xml:space="preserve">
          <source>Allows this closeable to be used within the closure, ensuring that it is closed once the closure has been executed and before this method returns.</source>
          <target state="translated">允许在闭包中使用这个closeable,确保一旦闭包被执行,在这个方法返回之前,它就被关闭。</target>
        </trans-unit>
        <trans-unit id="1eb7ab0445363d8344d8bd1499632612c108580a" translate="yes" xml:space="preserve">
          <source>Allows this input stream to be used within the closure, ensuring that it is flushed and closed before this method returns.</source>
          <target state="translated">允许在闭包内使用此输入流,确保在此方法返回之前对其进行冲洗和关闭。</target>
        </trans-unit>
        <trans-unit id="143d63d055ba2c9da6bb6a4f8642448bd4169cec" translate="yes" xml:space="preserve">
          <source>Allows this reader to be used within the closure, ensuring that it is closed before this method returns.</source>
          <target state="translated">允许在闭合中使用这个阅读器,确保在这个方法返回之前,它已经被关闭。</target>
        </trans-unit>
        <trans-unit id="19722b54c6ba4000f30c726b202d7d173cd80eb7" translate="yes" xml:space="preserve">
          <source>Allows this writer to be used within the closure, ensuring that it is flushed and closed before this method returns.</source>
          <target state="translated">允许在闭包内使用这个写入器,确保在这个方法返回之前,这个写入器被刷新和关闭。</target>
        </trans-unit>
        <trans-unit id="5a0fb620be9e71bc59f234ded82951e64fc6aeee" translate="yes" xml:space="preserve">
          <source>Allows to add a String to null.</source>
          <target state="translated">允许添加一个字符串到null。</target>
        </trans-unit>
        <trans-unit id="b6f5968d3c04de9f008d7a8def20518db3ed1e30" translate="yes" xml:space="preserve">
          <source>Allows to add a String to null. The result is concatenated String of the result of calling toString() on this object and the String in the parameter.</source>
          <target state="translated">允许在null上添加一个字符串。结果是在此对象上调用toString()的结果和参数中的String的连接。</target>
        </trans-unit>
        <trans-unit id="7a8c294b5d2d5065b6e9978b37be869afd7cf31b" translate="yes" xml:space="preserve">
          <source>Allows to throw a checked exception unchecked. INTERNAL USE ONLY.</source>
          <target state="translated">允许抛出一个未选中的异常。仅供内部使用。</target>
        </trans-unit>
        <trans-unit id="ccd822cf4ef0368b7c450d1712785b6336580d95" translate="yes" xml:space="preserve">
          <source>Allows you to provide &lt;code&gt;@Immutable&lt;/code&gt; with a list of classes which are deemed immutable.</source>
          <target state="translated">允许您为 &lt;code&gt;@Immutable&lt;/code&gt; 提供被视为不可变的类的列表。</target>
        </trans-unit>
        <trans-unit id="b2e003ed877f0e85c60b6675784dae8c9e8be642" translate="yes" xml:space="preserve">
          <source>Allows you to provide &lt;code&gt;@Immutable&lt;/code&gt; with a list of classes which are deemed immutable. By supplying a class in this list, you are vouching for its immutability and &lt;code&gt;@Immutable&lt;/code&gt; will do no further checks. Example:</source>
          <target state="translated">允许您为 &lt;code&gt;@Immutable&lt;/code&gt; 提供被视为不可变的类的列表。通过在此列表中提供一个类，您可以保证它的不变性， &lt;code&gt;@Immutable&lt;/code&gt; 将不做进一步的检查。例子：</target>
        </trans-unit>
        <trans-unit id="37831816e7994d3a3bc25fade097d8fd9b3f6dfa" translate="yes" xml:space="preserve">
          <source>Allows you to provide &lt;code&gt;@Immutable&lt;/code&gt; with a list of property names which are deemed immutable.</source>
          <target state="translated">允许您为 &lt;code&gt;@Immutable&lt;/code&gt; 提供被视为不可变的属性名称列表。</target>
        </trans-unit>
        <trans-unit id="15e7d6d5dce974e6b3fe7813cfc94faa15b760b1" translate="yes" xml:space="preserve">
          <source>Allows you to provide &lt;code&gt;@Immutable&lt;/code&gt; with a list of property names which are deemed immutable. By supplying a property's name in this list, you are vouching for its immutability and &lt;code&gt;@Immutable&lt;/code&gt; will do no further checks. Example:</source>
          <target state="translated">允许您为 &lt;code&gt;@Immutable&lt;/code&gt; 提供被视为不可变的属性名称列表。通过在此列表中提供属性名称，您可以保证其不可变， &lt;code&gt;@Immutable&lt;/code&gt; 将不做进一步检查。例子：</target>
        </trans-unit>
        <trans-unit id="4120c9da6cf775a295ed92f50baba87c48407a55" translate="yes" xml:space="preserve">
          <source>Allows you to specify the group (organisation) and the module (artifact) in one of two compact convenience formats, e.g.: &lt;code&gt;@GrabExclude('org.apache.ant:ant-junit')&lt;/code&gt; or &lt;code&gt;@GrabExclude('org.apache.ant#ant-junit')&lt;/code&gt;</source>
          <target state="translated">允许您以两种紧凑的便捷格式之一指定组（组织）和模块（工件），例如： &lt;code&gt;@GrabExclude('org.apache.ant:ant-junit')&lt;/code&gt; 或 &lt;code&gt;@GrabExclude('org.apache.ant#ant-junit')&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="7210b0bce8fe606682a56490bb5f7fb9d38abfb7" translate="yes" xml:space="preserve">
          <source>Allows you to use a list of categories, specifying the list as varargs.</source>
          <target state="translated">允许你使用类别列表,将列表指定为varargs。</target>
        </trans-unit>
        <trans-unit id="2bc82574b9b3b109de7e6f8b15ba915a20d8b8de" translate="yes" xml:space="preserve">
          <source>Allows you to use a list of categories, specifying the list as varargs. &lt;code&gt;use(CategoryClass1, CategoryClass2) { ... }&lt;/code&gt; This method saves having to wrap the category classes in a list.</source>
          <target state="translated">允许您使用类别列表，将列表指定为varargs。 &lt;code&gt;use(CategoryClass1, CategoryClass2) { ... }&lt;/code&gt; 此方法省去了将类别类包装在列表中的麻烦。</target>
        </trans-unit>
        <trans-unit id="2abd3867d48f6c136827682dfd381ea7c61394a2" translate="yes" xml:space="preserve">
          <source>Also adds support methods:</source>
          <target state="translated">还增加了支持方法。</target>
        </trans-unit>
        <trans-unit id="94d491fc6f2035c8e8c0279b6dd241bfe57b1672" translate="yes" xml:space="preserve">
          <source>Also adds support methods: &lt;code&gt;public void addVetoableChangeListener(java.beans.VetoableChangeListener)&lt;/code&gt;&lt;code&gt;public void addVetoableChangeListener(String, java.beans.VetoableChangeListener)&lt;/code&gt;&lt;code&gt;public void removeVetoableChangeListener(java.beans.VetoableChangeListener)&lt;/code&gt;&lt;code&gt;public void removeVetoableChangeListener(String, java.beans.VetoableChangeListener)&lt;/code&gt;&lt;code&gt;public java.beans.VetoableChangeListener[] getVetoableChangeListeners()&lt;/code&gt;</source>
          <target state="translated">还增加了支持的方法： &lt;code&gt;public void addVetoableChangeListener(java.beans.VetoableChangeListener)&lt;/code&gt; &lt;code&gt;public void addVetoableChangeListener(String, java.beans.VetoableChangeListener)&lt;/code&gt; &lt;code&gt;public void removeVetoableChangeListener(java.beans.VetoableChangeListener)&lt;/code&gt; &lt;code&gt;public void removeVetoableChangeListener(String, java.beans.VetoableChangeListener)&lt;/code&gt; &lt;code&gt;public java.beans.VetoableChangeListener[] getVetoableChangeListeners()&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="ab6daa89397b81dacc8ad5af71db5999868b835b" translate="yes" xml:space="preserve">
          <source>Also implements Groovy's &lt;a href=&quot;../util/resourceconnector&quot;&gt;ResourceConnector&lt;/a&gt; in a dynamic manner. It allows you to modify the resource name that is searched for with a</source>
          <target state="translated">还以动态方式实现Groovy的&lt;a href=&quot;../util/resourceconnector&quot;&gt;ResourceConnector&lt;/a&gt;。它允许您修改使用名称搜索的资源名称。</target>
        </trans-unit>
        <trans-unit id="83de9e179bdc30c3d9d2cab3aed08b8338628d69" translate="yes" xml:space="preserve">
          <source>Also note that '_' was used multiple times. This is supported but if any other shortOpt or any longOpt is repeated, then the behavior is undefined.</source>
          <target state="translated">同时注意,'_'被多次使用。这是被支持的,但如果重复使用任何其他的shortOpt或任何longOpt,那么行为是未定义的。</target>
        </trans-unit>
        <trans-unit id="c07d1cb709f691bcd04d18a5299f080a5d00d044" translate="yes" xml:space="preserve">
          <source>Also note that '_' was used multiple times. This is supported but if any other shortOpt or any longOpt is repeated, then the underlying library throws an exception.</source>
          <target state="translated">同时注意,'_'被多次使用。这是被支持的,但如果重复使用任何其他的shortOpt或任何longOpt,那么底层库就会抛出一个异常。</target>
        </trans-unit>
        <trans-unit id="8c0e38c29865f1a11e0913e051c73f10050804ba" translate="yes" xml:space="preserve">
          <source>Also, &lt;code&gt;eachRow&lt;/code&gt; and &lt;code&gt;rows&lt;/code&gt; support paging. Here's an example:</source>
          <target state="translated">另外， &lt;code&gt;eachRow&lt;/code&gt; 和 &lt;code&gt;rows&lt;/code&gt; 支持分页。这是一个例子：</target>
        </trans-unit>
        <trans-unit id="116ee6a478f2ddf6edfd15615afd49337a61cae5" translate="yes" xml:space="preserve">
          <source>Also, if the expression starts with a closure, it needs to have an explicit parameter list, in order to avoid the appearance of a compound statement. This is a hard error.</source>
          <target state="translated">另外,如果表达式以闭包开头,需要有一个显式的参数列表,以避免出现复合语句。这是个硬性错误。</target>
        </trans-unit>
        <trans-unit id="597630bfb1bea84fe74e0339f15c77d132560898" translate="yes" xml:space="preserve">
          <source>Alternatively, 'tap' is an alias for 'with(true)', so that method can be used instead. The other main use case for with is when returning a value calculated using self as shown here:</source>
          <target state="translated">另外,'tap'是'with(true)'的别名,所以可以用该方法代替。with的另一个主要用例是返回一个用self计算的值,如这里所示。</target>
        </trans-unit>
        <trans-unit id="434771c8cf6014219bac5b3cc81c19a02bf8f09c" translate="yes" xml:space="preserve">
          <source>Alternatively, 'with' is an alias for 'with(false)', so the boolean parameter can be omitted instead.</source>
          <target state="translated">另外,'with'是'with(false)'的别名,所以布尔参数可以省略。</target>
        </trans-unit>
        <trans-unit id="e454f936bdf7a78e7d21c31cf7ec1e8d7d95f6f8" translate="yes" xml:space="preserve">
          <source>Alternatively, if &lt;code&gt;isMultipleAssignmentDeclaration()&lt;/code&gt; is &lt;code&gt;false&lt;/code&gt; you can use the method &quot;&lt;code&gt;VariableExpression getVariableExpression()&lt;/code&gt;&quot; method. Similarly, if &lt;code&gt;isMultipleAssignmentDeclaration()&lt;/code&gt; is &lt;code&gt;true&lt;/code&gt; you can use the method &quot;&lt;code&gt;TupleExpression getTupleExpression()&lt;/code&gt;&quot; method. Calling either of these expression getters when the &quot;isMultipleAssignment&quot; condition is not appropriate is unsafe and will result in a &lt;code&gt;ClassCastException&lt;/code&gt;.</source>
          <target state="translated">或者，如果 &lt;code&gt;isMultipleAssignmentDeclaration()&lt;/code&gt; 为 &lt;code&gt;false&lt;/code&gt; ，则可以使用方法&amp;ldquo; &lt;code&gt;VariableExpression getVariableExpression()&lt;/code&gt; &amp;rdquo;方法。同样，如果 &lt;code&gt;isMultipleAssignmentDeclaration()&lt;/code&gt; 为 &lt;code&gt;true&lt;/code&gt; ，则可以使用方法&amp;ldquo; &lt;code&gt;TupleExpression getTupleExpression()&lt;/code&gt; &amp;rdquo;方法。在&amp;ldquo; isMultipleAssignment&amp;rdquo;条件不合适的情况下调用这些表达式获取器中的一个是不安全的，并且将导致 &lt;code&gt;ClassCastException&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="e20392dc5ce21457dbd3d3348040b9b50b5f1acf" translate="yes" xml:space="preserve">
          <source>Alternatively, the method may look like this:</source>
          <target state="translated">或者,这个方法可能是这样的。</target>
        </trans-unit>
        <trans-unit id="9f261559c8a581638abcc4c70069ff784e46bf93" translate="yes" xml:space="preserve">
          <source>Although CliBuilder on the whole hides away the underlying library used for processing the arguments, it does provide some hooks which let you make use of the underlying library directly should the need arise. For example, the last two lines of the 'curl' example above could be replaced with the following:</source>
          <target state="translated">虽然CliBuilder总体上隐藏了用于处理参数的底层库,但它确实提供了一些钩子,让你在需要时直接使用底层库。例如,上面 &quot;curl &quot;例子的最后两行可以替换为以下内容。</target>
        </trans-unit>
        <trans-unit id="8204d604e9950c0ce44837c669e0a0911f64256c" translate="yes" xml:space="preserve">
          <source>Always 0 for an empty range.</source>
          <target state="translated">对于一个空的范围,总是0。</target>
        </trans-unit>
        <trans-unit id="58849f5cb590e833734090ce086224eaa31aa520" translate="yes" xml:space="preserve">
          <source>Always does nothing for an empty range.</source>
          <target state="translated">对于一个空的范围,总是什么都不做。</target>
        </trans-unit>
        <trans-unit id="ca89a48309fa11cf6445def870eb88c910432e1c" translate="yes" xml:space="preserve">
          <source>Always returns an empty list for an empty range.</source>
          <target state="translated">对于一个空范围,总是返回一个空列表。</target>
        </trans-unit>
        <trans-unit id="28f38d6013729c82924114f1c091d3050cb53f34" translate="yes" xml:space="preserve">
          <source>Always throws &lt;a href=&quot;https://docs.oracle.com/javase/8/docs/api/java/lang/SecurityException.html&quot;&gt;SecurityException&lt;/a&gt;.</source>
          <target state="translated">总是抛出&lt;a href=&quot;https://docs.oracle.com/javase/8/docs/api/java/lang/SecurityException.html&quot;&gt;SecurityException&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="4e7086efb60d5bbadf5dc2cec95243e7620ac955" translate="yes" xml:space="preserve">
          <source>Always throws &lt;code&gt;IndexOutOfBoundsException&lt;/code&gt; for an empty range.</source>
          <target state="translated">始终为空范围抛出 &lt;code&gt;IndexOutOfBoundsException&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="949b210e9d2954dd75704428d63a6a6bb8453d69" translate="yes" xml:space="preserve">
          <source>Always throws &lt;code&gt;UnsupportedOperationException&lt;/code&gt; for an empty range.</source>
          <target state="translated">对于空范围始终抛出 &lt;code&gt;UnsupportedOperationException&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="9e984526c670dfd887f53126414ad84bb5648d91" translate="yes" xml:space="preserve">
          <source>An &lt;a href=&quot;evictionlistener&quot;&gt;EvictionListener&lt;/a&gt; may be supplied for notification when an entry is evicted from the map. This listener is invoked on a caller's thread and will not block other threads from operating on the map. An implementation should be aware that the caller's thread will not expect long execution times or failures as a side effect of the listener being notified. Execution safety and a fast turn around time can be achieved by performing the operation asynchronously, such as by submitting a task to an &lt;a href=&quot;https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ExecutorService.html&quot;&gt;ExecutorService&lt;/a&gt;.</source>
          <target state="translated">一个&lt;a href=&quot;evictionlistener&quot;&gt;EvictionListener&lt;/a&gt;可用于通知当一个条目被从地图逐出提供。该侦听器在调用者的线程上被调用，并且不会阻止其他线程在映射上进行操作。一个实现应该意识到，调用者的线程不会期望较长的执行时间或失败，这是通知监听者的副作用。通过异步执行操作（例如，将任务提交给&lt;a href=&quot;https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ExecutorService.html&quot;&gt;ExecutorService）&lt;/a&gt;，可以实现执行安全性和快速的周转时间。</target>
        </trans-unit>
        <trans-unit id="b9d7de633c0c08a318c5e0b16af0e1a215e68116" translate="yes" xml:space="preserve">
          <source>An AST transform with the ability to report errors.</source>
          <target state="translated">一个AST变换,具有报告错误的能力。</target>
        </trans-unit>
        <trans-unit id="39aec4a8379deb02fa1d759f535d177546b9b45a" translate="yes" xml:space="preserve">
          <source>An Annotation visitor responsible for:</source>
          <target state="translated">负责以下工作的注释访问者:</target>
        </trans-unit>
        <trans-unit id="c04e66499c6e6408829804408c70f57b14338d06" translate="yes" xml:space="preserve">
          <source>An IDENT token whose spelling is required to start with an uppercase letter.</source>
          <target state="translated">一个IDENT标记,其拼写必须以大写字母开头。</target>
        </trans-unit>
        <trans-unit id="7d0a670ccbde4835ccf4ec6452f94517c5ebb2a8" translate="yes" xml:space="preserve">
          <source>An IDENT token whose spelling is required to start with an uppercase letter. In the case of a simple statement {UpperID name} the identifier is taken to be a type name, not a command name.</source>
          <target state="translated">一个IDENT标记,其拼写必须以大写字母开头。在简单语句{UpperID name}的情况下,标识符是类型名,而不是命令名。</target>
        </trans-unit>
        <trans-unit id="669ed57d9c4deac4a1891c9131f30f14a5d1430e" translate="yes" xml:space="preserve">
          <source>An IO exception occurred trying to append to a StringWriter which should never happen.</source>
          <target state="translated">在尝试追加到StringWriter时发生了一个不应该发生的IO异常。</target>
        </trans-unit>
        <trans-unit id="e923950f1559538a6578d073fbdd185b29fa17f7" translate="yes" xml:space="preserve">
          <source>An MVC model package for working with user interfaces and data structures and arbitrary Java and Groovy objects</source>
          <target state="translated">一个MVC模型包,用于处理用户界面和数据结构以及任意的Java和Groovy对象。</target>
        </trans-unit>
        <trans-unit id="bde3aa303d9791b611b7dce06109f09ade29a22f" translate="yes" xml:space="preserve">
          <source>An MetaClass instance</source>
          <target state="translated">一个MetaClass实例</target>
        </trans-unit>
        <trans-unit id="836f83c12727d3995ba98943f8add7b6fa7c3efa" translate="yes" xml:space="preserve">
          <source>An Object array variant of &lt;a href=&quot;#call(java.lang.String,%20java.util.List)&quot;&gt;call(String, List)&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;#call(java.lang.String,%20java.util.List)&quot;&gt;call（String，List）&lt;/a&gt;的Object数组变体。</target>
        </trans-unit>
        <trans-unit id="65f0cb3657ef737e4fa8e530cbc08d1355541c48" translate="yes" xml:space="preserve">
          <source>An Object array variant of &lt;a href=&quot;#execute(java.lang.String,%20java.util.List)&quot;&gt;execute(String, List)&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;#execute(java.lang.String,%20java.util.List)&quot;&gt;execute（String，List）&lt;/a&gt;的Object数组变体。</target>
        </trans-unit>
        <trans-unit id="e1de4e3ff480b9cf6f14c81959d1ed6459ed34a7" translate="yes" xml:space="preserve">
          <source>An Object array variant of &lt;a href=&quot;#execute(java.lang.String,%20java.util.List,%20groovy.lang.Closure)&quot;&gt;execute(String, List, Closure)&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;#execute(java.lang.String,%20java.util.List,%20groovy.lang.Closure)&quot;&gt;execute（String，List，Closure）&lt;/a&gt;的Object数组变体。</target>
        </trans-unit>
        <trans-unit id="8ddfb31ec6fdb40598a28b6707f2bbd44dffbec0" translate="yes" xml:space="preserve">
          <source>An Object array variant of &lt;a href=&quot;#executeInsert(java.lang.String,%20java.util.List)&quot;&gt;executeInsert(String, List)&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;#executeInsert(java.lang.String,%20java.util.List)&quot;&gt;executeInsert（String，List）&lt;/a&gt;的Object数组变体。</target>
        </trans-unit>
        <trans-unit id="12ff017e846f27cf9a191fe8ba5c74bd253a6cc8" translate="yes" xml:space="preserve">
          <source>An Object array variant of &lt;a href=&quot;#executeUpdate(java.lang.String,%20java.util.List)&quot;&gt;executeUpdate(String, List)&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;#executeUpdate(java.lang.String,%20java.util.List)&quot;&gt;executeUpdate（String，List）&lt;/a&gt;的Object数组变体。</target>
        </trans-unit>
        <trans-unit id="09d7ab17cd78952b24da19141af7dc1bf614135f" translate="yes" xml:space="preserve">
          <source>An Object array variant of &lt;a href=&quot;#firstRow(java.lang.String,%20java.util.List)&quot;&gt;firstRow(String, List)&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;#firstRow(java.lang.String,%20java.util.List)&quot;&gt;firstRow（String，List）&lt;/a&gt;的Object数组变体。</target>
        </trans-unit>
        <trans-unit id="e40d5bd45bd608faf93e57dbaab2ac3e17d9eb7e" translate="yes" xml:space="preserve">
          <source>An Object array variant of &lt;a href=&quot;#rows(java.lang.String,%20java.util.List)&quot;&gt;rows(String, List)&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;#rows(java.lang.String,%20java.util.List)&quot;&gt;rows（String，List）&lt;/a&gt;的Object数组变体。</target>
        </trans-unit>
        <trans-unit id="58db654b5cbbfc543db657a1a9fbcfa84ede0bee" translate="yes" xml:space="preserve">
          <source>An Object array variant of &lt;a href=&quot;#rows(java.lang.String,%20java.util.List,%20int,%20int)&quot;&gt;rows(String, List, int, int)&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;#rows(java.lang.String,%20java.util.List,%20int,%20int)&quot;&gt;行（字符串，列表，整数，整数）&lt;/a&gt;的对象数组变体。</target>
        </trans-unit>
        <trans-unit id="92f4f54d02197791688420a22f2582a623f9e1c3" translate="yes" xml:space="preserve">
          <source>An Writer than eats its input.</source>
          <target state="translated">一个作家比吃它的输入。</target>
        </trans-unit>
        <trans-unit id="7fc6727b617fbd3b4adf4cf188f000732a75874b" translate="yes" xml:space="preserve">
          <source>An abstract base class for a key used for comparators and Map keys to lookup a method by name and parameter types</source>
          <target state="translated">一个用于比较器和Map键的抽象基类,用于通过名称和参数类型查找方法。</target>
        </trans-unit>
        <trans-unit id="b03413d6922fdbcef06e5b6eeb1400dedc69cfae" translate="yes" xml:space="preserve">
          <source>An abstract base class for nodes in the concrete syntax tree that is the result of parsing. Note that the CSTNode is inextricably linked with the Token in that every CSTNode has a Token as its root.</source>
          <target state="translated">一个抽象的基类,用于解析具体语法树中的节点。请注意,CSTNode与Token有着千丝万缕的联系,因为每个CSTNode都有一个Token作为其根。</target>
        </trans-unit>
        <trans-unit id="9064340a2ca7e25b093653d6e391fb57828ae977" translate="yes" xml:space="preserve">
          <source>An abstract syntax tree (AST) is created from token trees</source>
          <target state="translated">抽象语法树(AST)是由标记树创建的。</target>
        </trans-unit>
        <trans-unit id="4443e9de2c8c72e64c734883cffa38d09bc42e42" translate="yes" xml:space="preserve">
          <source>An adapter to make any Groovy Script class an instance of a JUnit Test</source>
          <target state="translated">适配器,使任何Groovy Script类成为JUnit Test的实例。</target>
        </trans-unit>
        <trans-unit id="0236910808eb246b3e4384427527ada795847d0a" translate="yes" xml:space="preserve">
          <source>An agent that can be used to defer cleanup operations to a later time. Users much implement the HasCleanup interface.</source>
          <target state="translated">一个可以用来将清理操作推迟到以后进行的代理。用户多实现HasCleanup接口。</target>
        </trans-unit>
        <trans-unit id="f2fe84c7815f324cc7eee5cd16de968427a5f8ad" translate="yes" xml:space="preserve">
          <source>An aggregation of multiple bindings</source>
          <target state="translated">多个绑定的集合</target>
        </trans-unit>
        <trans-unit id="3482dcd525c901f4b80ba4001eda21d2ca0bf7be" translate="yes" xml:space="preserve">
          <source>An alias for &lt;code&gt;withLazyDefault&lt;/code&gt; which decorates a list allowing it to grow when called with index values outside the normal list bounds.</source>
          <target state="translated">&lt;code&gt;withLazyDefault&lt;/code&gt; 的别名，用于装饰列表，使其在正常列表范围之外的索引值调用时可以增长。</target>
        </trans-unit>
        <trans-unit id="f25c69d47f0a852aecaaec7b32781f4e2518fb18" translate="yes" xml:space="preserve">
          <source>An alias method so that a process appears similar to System.out, System.in, System.err; you can use process.in, process.out, process.err in a similar fashion.</source>
          <target state="translated">一种别名方法,这样一个进程就会出现类似于System.out、System.in、System.err;你可以用类似于process.in、process.out、process.err的方式。</target>
        </trans-unit>
        <trans-unit id="b14b1afa639f1c113ee03af3175dd31501a37397" translate="yes" xml:space="preserve">
          <source>An alternative &lt;a href=&quot;../writercontroller&quot;&gt;WriterController&lt;/a&gt; which handles static types and method dispatch. In case of a &quot;mixed mode&quot; where only some methods are annotated with &lt;a href=&quot;../../../../../../groovy/transform/typechecked&quot;&gt;TypeChecked&lt;/a&gt; then this writer will delegate to the classic writer controller.</source>
          <target state="translated">一个替代的&lt;a href=&quot;../writercontroller&quot;&gt;WriterController&lt;/a&gt;，用于处理静态类型和方法分派。在&amp;ldquo;混合模式&amp;rdquo;的情况下，仅使用&lt;a href=&quot;../../../../../../groovy/transform/typechecked&quot;&gt;TypeChecked&lt;/a&gt;注释某些方法，然后该编写器将委派给经典的编写器控制器。</target>
        </trans-unit>
        <trans-unit id="15ed613138bb69cb85e7e6f334e9498ed510ebe8" translate="yes" xml:space="preserve">
          <source>An alternative way of setting &lt;a href=&quot;#setDisallowedReceivers(java.util.List)&quot;&gt;receiver classes&lt;/a&gt;.</source>
          <target state="translated">设置&lt;a href=&quot;#setDisallowedReceivers(java.util.List)&quot;&gt;接收器类&lt;/a&gt;的另一种方法。</target>
        </trans-unit>
        <trans-unit id="249d07974f50c5c3dc917962ca9e4dba4e0319db" translate="yes" xml:space="preserve">
          <source>An alternative way of setting &lt;a href=&quot;#setReceiversWhiteList(java.util.List)&quot;&gt;receiver classes&lt;/a&gt;.</source>
          <target state="translated">设置&lt;a href=&quot;#setReceiversWhiteList(java.util.List)&quot;&gt;接收器类&lt;/a&gt;的另一种方法。</target>
        </trans-unit>
        <trans-unit id="e1282668406b8f0451fb3655385a215bf4c869e5" translate="yes" xml:space="preserve">
          <source>An alternative way of setting constant types.</source>
          <target state="translated">设置常量类型的另一种方式。</target>
        </trans-unit>
        <trans-unit id="b1ec7ca3feb0a851c4da31a34ab16d9a1cd4d87e" translate="yes" xml:space="preserve">
          <source>An annotation to hold the groovydoc for the annotated element at runtime, we call it &quot;Runtime Groovydoc&quot;. Runtime Groovydoc is a bit like Python's Documentation Strings and will be useful for IDE and developers who set a high value on documentations. The usage is very simple, just place @ at the beginning of the content of groovydoc, i.e. starts with /**@, then the new parser Parrot will attach the annotation Groovydoc automatically</source>
          <target state="translated">一个注解,用于在运行时为被注解的元素保存groovydoc,我们称之为 &quot;Runtime Groovydoc&quot;。Runtime Groovydoc有点像Python的Documentation Strings,对于那些对文档设置很高的IDE和开发者来说会很有用。使用方法非常简单,只要在groovydoc内容的开头加上@,即以/**@开头,那么新的解析器Parrot就会自动附加Groovydoc注释。</target>
        </trans-unit>
        <trans-unit id="ba7064d0f480d7ea101f70395a8db69d95b9a1b3" translate="yes" xml:space="preserve">
          <source>An annotation which is just a shortcut for @CompileStatic(TypeCheckingMode.SKIP). This can be used for example if you statically compile a full class but you want to skip some methods without having to use the full annotation.</source>
          <target state="translated">一个注解,它只是@CompileStatic(TypeCheckingMode.SKIP)的快捷方式。例如,如果你静态编译一个完整的类,但你想跳过一些方法,而不必使用完整的注解,就可以使用这个注解。</target>
        </trans-unit>
        <trans-unit id="e5a7bbee03811e3eb769d307b65a7451fa2ae677" translate="yes" xml:space="preserve">
          <source>An antlr AST visitor that prints groovy source code for each visited node to the supplied PrintStream.</source>
          <target state="translated">一个antlr AST访问者,可以将每个被访问的节点的groovy源代码打印到提供的PrintStream中。</target>
        </trans-unit>
        <trans-unit id="69be16927afbae1449e7197a40a882927b9205f9" translate="yes" xml:space="preserve">
          <source>An appended block follows any expression.</source>
          <target state="translated">任何表达式后面都有一个附加块。</target>
        </trans-unit>
        <trans-unit id="9fbb1e2147349baf166ec2353ccaf1f5de4c0df7" translate="yes" xml:space="preserve">
          <source>An appended block follows any expression. If the expression is not a method call, it is given an empty argument list.</source>
          <target state="translated">任何表达式后面都会有一个附加块。如果表达式不是方法调用,则给它一个空参数列表。</target>
        </trans-unit>
        <trans-unit id="447880cdc2430e1a0e43573d2b889e755ca392a7" translate="yes" xml:space="preserve">
          <source>An array variant of &lt;a href=&quot;#executeInsert(java.lang.String,%20java.util.List,%20java.util.List)&quot;&gt;executeInsert(String, List, List)&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;#executeInsert(java.lang.String,%20java.util.List,%20java.util.List)&quot;&gt;executeInsert（String，List，List）&lt;/a&gt;的数组变量。</target>
        </trans-unit>
        <trans-unit id="1846eda4259af175f9ee3ca4a48d8ca5d3d777ce" translate="yes" xml:space="preserve">
          <source>An assignment operator '=' followed by an expression.</source>
          <target state="translated">一个赋值运算符'=',后面跟着一个表达式。</target>
        </trans-unit>
        <trans-unit id="4784ff64dcfa0d508c85ecbaee9906102e9235e2" translate="yes" xml:space="preserve">
          <source>An assignment operator '=' followed by an expression. (Never empty.)</source>
          <target state="translated">一个赋值运算符'=',后面是一个表达式。(绝不为空。)</target>
        </trans-unit>
        <trans-unit id="7cf270d0a4d33a43ee3aa0865f9bf4820e98ecea" translate="yes" xml:space="preserve">
          <source>An encoded type information.</source>
          <target state="translated">编码的类型信息。</target>
        </trans-unit>
        <trans-unit id="71e3211690c8dd3f19ab2e7e73e452c6001f7181" translate="yes" xml:space="preserve">
          <source>An enhancement of Groovy's Sql class providing support for accessing and querying databases using POGO fields and operators rather than JDBC-level API calls and RDBMS column names. So, instead of a query like:</source>
          <target state="translated">增强了Groovy的Sql类,支持使用POGO字段和操作符而不是JDBC级别的API调用和RDBMS列名来访问和查询数据库。因此,与其说是像这样的查询,不如说是</target>
        </trans-unit>
        <trans-unit id="bb5fc16761351896d078b6b93da579f8e554b5fb" translate="yes" xml:space="preserve">
          <source>An entry is evicted from the map when the</source>
          <target state="translated">当出现以下情况时,一个条目就会从地图上消失。</target>
        </trans-unit>
        <trans-unit id="7e58d326039a4258587d27f8bbf696cfba7a7c3d" translate="yes" xml:space="preserve">
          <source>An event used to propagate meta class updates</source>
          <target state="translated">用于传播元类更新的事件。</target>
        </trans-unit>
        <trans-unit id="cd0135d2482f6d8f331846633602c6fbc34651f9" translate="yes" xml:space="preserve">
          <source>An example involving databases:</source>
          <target state="translated">一个涉及数据库的例子。</target>
        </trans-unit>
        <trans-unit id="1de9e0c53e8c586fa3cab8353b44c341ef57230d" translate="yes" xml:space="preserve">
          <source>An example of this copy constructor at work:</source>
          <target state="translated">这个复制构造函数工作的一个例子。</target>
        </trans-unit>
        <trans-unit id="1d486b1757b0482acffcaad369e263caaed820f8" translate="yes" xml:space="preserve">
          <source>An example showing a &lt;code&gt;use&lt;/code&gt; statement (allowing fine-grained application of the category methods):</source>
          <target state="translated">显示 &lt;code&gt;use&lt;/code&gt; 语句的示例（允许细类应用category方法）：</target>
        </trans-unit>
        <trans-unit id="68ddb73be0db75aa193ec568486003e28365ef5c" translate="yes" xml:space="preserve">
          <source>An example showing how to use the annotation at different levels:</source>
          <target state="translated">一个例子展示了如何在不同层次上使用注释。</target>
        </trans-unit>
        <trans-unit id="f481ad49809e7c27b79d2e6d830283b22c04c1f7" translate="yes" xml:space="preserve">
          <source>An example:</source>
          <target state="translated">一个例子:</target>
        </trans-unit>
        <trans-unit id="8dd9f66a7012d632b0656e2809561b9b654b1d1b" translate="yes" xml:space="preserve">
          <source>An exception occurred if a dynamic field dispatch fails with an unknown field. Note that the Missing*Exception classes were named for consistency and to avoid conflicts with JDK exceptions of the same name.</source>
          <target state="translated">如果动态字段调度失败,出现了一个未知字段的异常。请注意,Missing*Exception类的命名是为了保持一致性,避免与同名的JDK异常发生冲突。</target>
        </trans-unit>
        <trans-unit id="baa39f78e4ac034bc737a8791647da347a5e2e3b" translate="yes" xml:space="preserve">
          <source>An exception occurred if a dynamic method dispatch fails with an unknown class. Note that the Missing*Exception classes were named for consistency and to avoid conflicts with JDK exceptions of the same name.</source>
          <target state="translated">如果一个动态方法派遣失败,发生了一个未知类的异常。请注意,Missing*Exception类的命名是为了保持一致性,避免与同名的JDK异常发生冲突。</target>
        </trans-unit>
        <trans-unit id="bb0595e6018cd452290a402973cc67eba94d3d35" translate="yes" xml:space="preserve">
          <source>An exception occurred if a dynamic method dispatch fails with an unknown method.</source>
          <target state="translated">如果动态方法调度失败,出现了一个未知方法的异常。</target>
        </trans-unit>
        <trans-unit id="2a4c6180069f06150e35225a79f168de0348a87d" translate="yes" xml:space="preserve">
          <source>An exception occurred if a dynamic property dispatch fails with a field not accessible.</source>
          <target state="translated">如果动态属性调度失败,字段不可访问,则发生异常。</target>
        </trans-unit>
        <trans-unit id="396972bf8057d1110e71986e8bdf780bec896c80" translate="yes" xml:space="preserve">
          <source>An exception occurred if a dynamic property dispatch fails with an unknown property. Note that the Missing*Exception classes were named for consistency and to avoid conflicts with JDK exceptions of the same name.</source>
          <target state="translated">如果动态属性调度失败,出现了一个未知属性的异常。请注意,Missing*Exception类的命名是为了保持一致性,避免与同名的JDK异常发生冲突。</target>
        </trans-unit>
        <trans-unit id="ceb1dfc4dfbe75237e2b96645b62c886e4324c35" translate="yes" xml:space="preserve">
          <source>An exception occurred when invoking a Closure with the wrong number and/or types of arguments</source>
          <target state="translated">当使用错误的参数数量和/或类型调用Closure时,发生异常。</target>
        </trans-unit>
        <trans-unit id="82b43e0c798dfb1e1f7676733e1fd9e2d6fd5700" translate="yes" xml:space="preserve">
          <source>An exception thrown by a closure invocation</source>
          <target state="translated">一个由闭包调用引发的异常</target>
        </trans-unit>
        <trans-unit id="345498a4bb8a2134879bc3bac1cb1647374d19fa" translate="yes" xml:space="preserve">
          <source>An exception thrown by the class generator</source>
          <target state="translated">类生成器抛出的异常</target>
        </trans-unit>
        <trans-unit id="b29c9169229b5b6888eb10ad74474da930f2d251" translate="yes" xml:space="preserve">
          <source>An exception thrown by the interpreter</source>
          <target state="translated">解释器引发的异常</target>
        </trans-unit>
        <trans-unit id="0fb65b774536d52b51d0a7eb9624ffd24a622abe" translate="yes" xml:space="preserve">
          <source>An exception thrown if a method is called and an exception occurred</source>
          <target state="translated">如果一个方法被调用并发生了异常,就会抛出一个异常。</target>
        </trans-unit>
        <trans-unit id="12442562193e09b14bdf2499761f36367b68a886" translate="yes" xml:space="preserve">
          <source>An expression helper which generates optimized bytecode depending on the current type on top of the operand stack.</source>
          <target state="translated">一个表达式帮助程序,它根据操作数栈上的当前类型生成优化的字节码。</target>
        </trans-unit>
        <trans-unit id="d90cdabb132ee8f5d627e9429df63369688c5cc8" translate="yes" xml:space="preserve">
          <source>An expression may be followed by [...].</source>
          <target state="translated">表达式后面可以加[...]。</target>
        </trans-unit>
        <trans-unit id="5acc44b610971c828ae1d033e3648eaf9d47708c" translate="yes" xml:space="preserve">
          <source>An expression may be followed by [...]. Unlike Java, these brackets may contain a general argument list, which is passed to the array element operator, which can make of it what it wants. The brackets may also be empty, as in T[]. This is how Groovy names array types.</source>
          <target state="translated">一个表达式后面可以跟上[...]。与Java不同的是,这些括号中可以包含一个通用参数列表,这个参数列表被传递给数组元素运算符,运算符可以根据自己的需要对其进行处理。这些括号也可以是空的,就像T[]一样。Groovy就是这样命名数组类型的。</target>
        </trans-unit>
        <trans-unit id="e2e07a487e58cd131f3df1951c23356ef84cff3e" translate="yes" xml:space="preserve">
          <source>An expression may be followed by one or both of (...) and {...}.</source>
          <target state="translated">表达式后面可以有(...)和{...}中的一个或两个。</target>
        </trans-unit>
        <trans-unit id="eddc75426281b96ccf920c7acb499e18451bd9f3" translate="yes" xml:space="preserve">
          <source>An expression may be followed by one or both of (...) and {...}. Note: If either is (...) or {...} present, it is a method call. The {...} is appended to the argument list, and matches a formal of type Closure. If there is no method member, a property (or field) is used instead, and must itself be callable.</source>
          <target state="translated">一个表达式的后面可以是(...)和{...}中的一个或两个。注意:如果(...)或{...}中的任何一个存在,它就是一个方法调用。{...}被附加到参数列表中,并匹配一个Closure类型的形式。如果没有方法成员,则使用一个属性(或字段)来代替,并且本身必须是可调用的。</target>
        </trans-unit>
        <trans-unit id="042cc8d2306a6b6aec7132ca852708135dccb173" translate="yes" xml:space="preserve">
          <source>An expression statement can also be a &lt;em&gt;command&lt;/em&gt;, which is a simple method call in which the outermost parentheses are omitted.</source>
          <target state="translated">表达式语句也可以是&lt;em&gt;command&lt;/em&gt;，这是一个简单的方法调用，其中省略了最外面的括号。</target>
        </trans-unit>
        <trans-unit id="93d0501133ae82c62aa6f80f42a9be1747b20a89" translate="yes" xml:space="preserve">
          <source>An expression statement can be any general expression.</source>
          <target state="translated">表达式语句可以是任何一般表达式。</target>
        </trans-unit>
        <trans-unit id="1c52e2cf701a01ae8ba3dc424512c377267f189b" translate="yes" xml:space="preserve">
          <source>An expression transformer used in the process of replacing the access to variables</source>
          <target state="translated">在替换对变量的访问过程中使用的表达式变换器。</target>
        </trans-unit>
        <trans-unit id="9b22fe3870ff9f294fe67cf112c94be02be876fd" translate="yes" xml:space="preserve">
          <source>An extension module is a class responsible for providing a list of &lt;a href=&quot;../../../../../groovy/lang/metamethod&quot;&gt;meta methods&lt;/a&gt; to the Groovy compiler and runtime. Those methods are use to &quot;dynamically extend&quot; existing classes by adding methods to existing classes.</source>
          <target state="translated">扩展模块是一个类，负责向Groovy编译器和运行时提供&lt;a href=&quot;../../../../../groovy/lang/metamethod&quot;&gt;元方法&lt;/a&gt;列表。这些方法用于通过向现有类中添加方法来&amp;ldquo;动态扩展&amp;rdquo;现有类。</target>
        </trans-unit>
        <trans-unit id="6670b06ae4503c43fbbf1f1c95bb0e30f9b9b771" translate="yes" xml:space="preserve">
          <source>An extension module which provides extension methods using a &lt;a href=&quot;../defaultgroovymethods&quot;&gt;DefaultGroovyMethods&lt;/a&gt;-like implementation, that is to say using static methods defined in an &quot;extension class&quot;.</source>
          <target state="translated">一个扩展模块，使用&lt;a href=&quot;../defaultgroovymethods&quot;&gt;类似于DefaultGroovyMethods&lt;/a&gt;的实现提供扩展方法，也就是说，使用在&amp;ldquo;扩展类&amp;rdquo;中定义的静态方法。</target>
        </trans-unit>
        <trans-unit id="b3ec255e06dde7921225fe404d4ca17b2071bbc0" translate="yes" xml:space="preserve">
          <source>An extension point allowing derived classes to change the behavior of connection creation.</source>
          <target state="translated">一个允许派生类改变连接创建行为的扩展点。</target>
        </trans-unit>
        <trans-unit id="7593217609d7d5334ad064d1653effaa8188966c" translate="yes" xml:space="preserve">
          <source>An extension point allowing derived classes to change the behavior of connection creation. The default behavior is to either use the supplied connection or obtain it from the supplied datasource.</source>
          <target state="translated">一个扩展点,允许派生类改变创建连接的行为。默认的行为是使用所提供的连接或从所提供的数据源中获取连接。</target>
        </trans-unit>
        <trans-unit id="2222d1d352aa79812cdfbb723af409de2ee5a140" translate="yes" xml:space="preserve">
          <source>An extension point allowing derived classes to change the behavior of resource closing.</source>
          <target state="translated">一个允许派生类改变资源关闭行为的扩展点。</target>
        </trans-unit>
        <trans-unit id="dfab41e3ac5af0fded2ceda7ed5d81f1b8fd13aa" translate="yes" xml:space="preserve">
          <source>An extension point allowing the behavior of resource closing to be overridden in derived classes.</source>
          <target state="translated">允许在派生类中覆盖资源关闭行为的扩展点。</target>
        </trans-unit>
        <trans-unit id="abfac0adc6d23d1039c7113ef317699df390da6b" translate="yes" xml:space="preserve">
          <source>An identifier that should be used to disambiguate targets when there are multiple &lt;code&gt;@DelegatesTo.Target&lt;/code&gt; annotated parameters.</source>
          <target state="translated">当有多个 &lt;code&gt;@DelegatesTo.Target&lt;/code&gt; 注释的参数时，应使用该标识符来消除目标的歧义。</target>
        </trans-unit>
        <trans-unit id="dde9b6195dfaa9c21f80e9ac599040bb294f977b" translate="yes" xml:space="preserve">
          <source>An identity function for iterators, supporting 'duck-typing' when trying to get an iterator for each object within a collection, some of which may already be iterators.</source>
          <target state="translated">迭代器的标识函数,当试图为集合中的每个对象(其中一些可能已经是迭代器)获取迭代器时,支持 &quot;鸭型&quot;。</target>
        </trans-unit>
        <trans-unit id="dd2603ea1540ce23d60ea20ee550bcd379c7ef37" translate="yes" xml:space="preserve">
          <source>An implementation for BufferedIterator wraps Iterator.</source>
          <target state="translated">BufferedIterator封装Iterator的实现。</target>
        </trans-unit>
        <trans-unit id="49cc77433f46213685fde1673e3ba605669f4524" translate="yes" xml:space="preserve">
          <source>An implementation for BufferedIterator wraps ListIterator. This version provides an implementation for remove().</source>
          <target state="translated">BufferedIterator包装ListIterator的实现。这个版本提供了 remove()的实现。</target>
        </trans-unit>
        <trans-unit id="725b2f343c1cf619ad90fcb4f685f34d7d46a46f" translate="yes" xml:space="preserve">
          <source>An implementation of the visitor pattern for working with ASTNodes.</source>
          <target state="translated">用于ASTNodes的访客模式的实现。</target>
        </trans-unit>
        <trans-unit id="d52961cb76cd4860ed28fccc6b23eeb6efa99251" translate="yes" xml:space="preserve">
          <source>An import of a single type, i.e. &lt;code&gt;import pack.Type&lt;/code&gt; or &lt;code&gt;import pack.Type as Alias&lt;/code&gt;</source>
          <target state="translated">单一类型的导入，即 &lt;code&gt;import pack.Type&lt;/code&gt; 或 &lt;code&gt;import pack.Type as Alias&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="41f708432dec96ac86ae9978bda7d48e1dcf063c" translate="yes" xml:space="preserve">
          <source>An import of a static field or method of a type, i.e. &lt;code&gt;import static pack.Type.name&lt;/code&gt; or &lt;code&gt;import static pack.Type.name as alias&lt;/code&gt;</source>
          <target state="translated">导入类型的静态字段或方法，即， &lt;code&gt;import static pack.Type.name&lt;/code&gt; 或 &lt;code&gt;import static pack.Type.name as alias&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="655ba261dcf136265be9c34f2ba650181eda9b81" translate="yes" xml:space="preserve">
          <source>An import of all static members of a type, i.e. &lt;code&gt;import static pack.Type.*&lt;/code&gt;</source>
          <target state="translated">导入类型的所有静态成员，即， &lt;code&gt;import static pack.Type.*&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="136570a8b03bf1e6a0d823fefc4fad793e3725c6" translate="yes" xml:space="preserve">
          <source>An import of all types in a package, i.e. &lt;code&gt;import pack.*&lt;/code&gt;</source>
          <target state="translated">包中所有类型的导入，即 &lt;code&gt;import pack.*&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="6fa788e5b4da82cdfeca0ff1034e5d73a1b63ebf" translate="yes" xml:space="preserve">
          <source>An instance of the java.lang.Class that this MetaObjectProtocol object applies to</source>
          <target state="translated">这个MetaObjectProtocol对象所应用的java.lang.Class的一个实例。</target>
        </trans-unit>
        <trans-unit id="7da9f9d4d4340d8710760513b2d06eccfcb4516f" translate="yes" xml:space="preserve">
          <source>An interactive command line terminal along with a Swing console for evaluating Groovy scripts and inspecting objects, AST and bytecode information.</source>
          <target state="translated">一个交互式的命令行终端和一个Swing控制台,用于评估Groovy脚本和检查对象、AST和字节码信息。</target>
        </trans-unit>
        <trans-unit id="ff3c52785adf1154b1c87e4139bf1ae652236a25" translate="yes" xml:space="preserve">
          <source>An interactive command line terminal along with a Swing console for evaluating Groovy scripts.</source>
          <target state="translated">一个交互式的命令行终端和一个用于评估Groovy脚本的Swing控制台。</target>
        </trans-unit>
        <trans-unit id="c2d24e06e9c9ed48271c85b931996f1452a91516" translate="yes" xml:space="preserve">
          <source>An interactive shell for evaluating Groovy code from the command-line (aka. groovysh). The set of available commands can be modified by placing a file in the classpath named &lt;code&gt;org/codehaus/groovy/tools/shell/commands.xml&lt;/code&gt; See &lt;a href=&quot;util/xmlcommandregistrar&quot;&gt;XmlCommandRegistrar&lt;/a&gt;</source>
          <target state="translated">用于从命令行评估Groovy代码的交互式外壳程序（又名groovysh）。该组可用的命令可以通过将一个文件中指定的类路径进行修改 &lt;code&gt;org/codehaus/groovy/tools/shell/commands.xml&lt;/code&gt; 见&lt;a href=&quot;util/xmlcommandregistrar&quot;&gt;XmlCommandRegistrar&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="149ec0e58f50b91b7dbad17c891a791e7290cd5a" translate="yes" xml:space="preserve">
          <source>An interface for MetaClass instances that &quot;adapt&quot; other MetaClass instances such as a proxy or delegating MetaClass.</source>
          <target state="translated">用于 &quot;适应 &quot;其他MetaClass实例(如代理或委托MetaClass)的接口。</target>
        </trans-unit>
        <trans-unit id="63e1c9cd7b27e1ac089a836b73d6506b846c0174" translate="yes" xml:space="preserve">
          <source>An interface for MetaMethods that invoke closures to implements. Used by ExpandoMetaClass</source>
          <target state="translated">用于调用闭包实现的MetaMethods的接口。由ExpandoMetaClass使用。</target>
        </trans-unit>
        <trans-unit id="d508b08ff93fe66a2762a135f27dbfdd6fb38284" translate="yes" xml:space="preserve">
          <source>An interface for processing antlr AST objects</source>
          <target state="translated">一个处理antlr AST对象的接口</target>
        </trans-unit>
        <trans-unit id="d61ee9aae1cf6aaff2a1bee799ad2b0030959d8f" translate="yes" xml:space="preserve">
          <source>An interface for things that can supply (and potentially resupply) a Reader on a source stream.</source>
          <target state="translated">一个可以为源流上的Reader供给(可能是补给)的东西接口。</target>
        </trans-unit>
        <trans-unit id="0979b7c1be06cf9e5dfed9a3b26406a5e62c12d6" translate="yes" xml:space="preserve">
          <source>An interface for things that need to be cleaned up after operations complete.</source>
          <target state="translated">操作完成后需要清理的东西的接口。</target>
        </trans-unit>
        <trans-unit id="4921d5d5c4b5a0a9a6c1c751be6f06cfa85bd3b6" translate="yes" xml:space="preserve">
          <source>An interface for visiting a GroovySourceAST node.</source>
          <target state="translated">用于访问GroovySourceAST节点的接口。</target>
        </trans-unit>
        <trans-unit id="72b33ef35193d6cfb5341eb2ed573472baf40277" translate="yes" xml:space="preserve">
          <source>An interface implemented by some Groovy proxies which gives access to the proxied object. In particular, dynamically generated proxies that implement traits will implement this interface in order to give access to the proxied instance.</source>
          <target state="translated">由一些Groovy代理实现的接口,可以访问代理对象。特别是,动态生成的、实现了特质的代理将实现这个接口,以便对代理的实例进行访问。</target>
        </trans-unit>
        <trans-unit id="fe46a8e9f6b65f0fa51edab069fa67eec6e8bf86" translate="yes" xml:space="preserve">
          <source>An interface that adds the ability to intercept property getters/setters</source>
          <target state="translated">一个增加了拦截属性获取者/设置者能力的接口。</target>
        </trans-unit>
        <trans-unit id="39f08ce3019139dd1216deaaee16022b8df7c677" translate="yes" xml:space="preserve">
          <source>An interface that defines methods that implementers of mutable Meta classes should specify. It provides operations to perform mutations on the MetaClass instance.</source>
          <target state="translated">一个接口,定义了可突变的Meta类的实现者应该指定的方法。它提供了对MetaClass实例进行突变的操作。</target>
        </trans-unit>
        <trans-unit id="5d57a4c4b7f42fa6852ab5b04649d7ba38c1806c" translate="yes" xml:space="preserve">
          <source>An interface that defines the API usable by clients of Groovy's Meta Object Protocol (MOP). These methods are implemented by the reference implementation of the &lt;a href=&quot;metaclass&quot;&gt;MetaClass&lt;/a&gt; interface.</source>
          <target state="translated">定义可由Groovy的元对象协议（MOP）的客户端使用的API的接口。这些方法由&lt;a href=&quot;metaclass&quot;&gt;MetaClass&lt;/a&gt;接口的参考实现来实现。</target>
        </trans-unit>
        <trans-unit id="7fdd0f31e1a8dd7fa42106d5c84f101bde178e18" translate="yes" xml:space="preserve">
          <source>An interface to mark a node being able to handle metadata.</source>
          <target state="translated">用于标记一个节点能够处理元数据的接口。</target>
        </trans-unit>
        <trans-unit id="93f0276093b80d863208015f9bfd26c706f61fe7" translate="yes" xml:space="preserve">
          <source>An iterator that allows examining the next element without consuming it.</source>
          <target state="translated">一个迭代器,允许检查下一个元素而不消耗它。</target>
        </trans-unit>
        <trans-unit id="6587a50469f24cc063e384fb1825b23eaf615f7d" translate="yes" xml:space="preserve">
          <source>An object is deemed equal to this NumberRange if it represents a List of items and those items equal the list of discrete items represented by this NumberRange.</source>
          <target state="translated">如果一个对象代表一个项目列表,并且这些项目等于这个NumberRange所代表的离散项目列表,那么这个对象被认为等于这个NumberRange。</target>
        </trans-unit>
        <trans-unit id="ad785d93ad147c4f5d2dc326dd3e11b7c24b277b" translate="yes" xml:space="preserve">
          <source>An object representing a line and column position</source>
          <target state="translated">一个代表线和列位置的对象</target>
        </trans-unit>
        <trans-unit id="2d9404a512533e77273353f99d2c3835a1bc7ebd" translate="yes" xml:space="preserve">
          <source>An object which supports GPath expressions</source>
          <target state="translated">一个支持GPath表达式的对象</target>
        </trans-unit>
        <trans-unit id="ddfff4ea58d7ba6b87d025e6aa923fdfae7fc71f" translate="yes" xml:space="preserve">
          <source>An open block is not allowed to have closure arguments.</source>
          <target state="translated">一个开放的块不允许有闭合参数。</target>
        </trans-unit>
        <trans-unit id="ac6af64a7c6d623f71c7dfecb686dbb283ec499e" translate="yes" xml:space="preserve">
          <source>An optional &lt;code&gt;visibilityId&lt;/code&gt; attribute can be specified. If present, it must match the optional &lt;code&gt;id&lt;/code&gt; attribute of an applicable &lt;code&gt;VisibilityOptions&lt;/code&gt; annotation. This can be useful if multiple &lt;code&gt;VisibilityOptions&lt;/code&gt; annotations are needed.</source>
          <target state="translated">可以指定一个可选的 &lt;code&gt;visibilityId&lt;/code&gt; 属性。如果存在，则它必须与适用的 &lt;code&gt;VisibilityOptions&lt;/code&gt; 批注的可选 &lt;code&gt;id&lt;/code&gt; 属性匹配。如果需要多个 &lt;code&gt;VisibilityOptions&lt;/code&gt; 批注，这将很有用。</target>
        </trans-unit>
        <trans-unit id="b0108543a71e82876406b6350df0c0a4ac28cf83" translate="yes" xml:space="preserve">
          <source>An optional Closure may be specified and will work as a filter, if it returns true the property will trigger an event (if the value indeed changed), otherwise it won't. The Closure may receive 1 or 2 parameters, the single one being the value, the other one both the key and value, for example:</source>
          <target state="translated">可以指定一个可选的Closure,它将作为一个过滤器工作,如果它返回true,该属性将触发一个事件(如果值确实改变了),否则它不会。Closure可以接收1个或2个参数,单个参数是值,另一个参数是键和值,例如。</target>
        </trans-unit>
        <trans-unit id="361f0e65ae2e905732baf1f27254576e76c5dba9" translate="yes" xml:space="preserve">
          <source>An underlying parser that supports what is called argument 'bursting' is used by default. Bursting would convert '-alt' into '-a -l -t' provided no long option exists with value 'alt' and provided that none of 'a', 'l' or 't' takes an argument (in fact the last one is allowed to take an argument). The bursting behavior can be turned off by configuring the underlying parser. The simplest way to achieve this is by setting the posix property on the CliBuilder to false, i.e. include &lt;code&gt;posix: false&lt;/code&gt; in the constructor call.</source>
          <target state="translated">默认情况下，使用支持所谓的参数&amp;ldquo;突发&amp;rdquo;的基础解析器。如果不存在带有'alt'值的长选项，并且'a'，'l'或't'中的任何一个都不接受参数，则突发处理会将'-alt'转换为'-a -l -t'允许一个参数）。可以通过配置基础解析器来关闭突发行为。实现此目的的最简单方法是将CliBuilder上的posix属性设置为false，即在构造函数调用中包含 &lt;code&gt;posix: false&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="5d417e0092154a30a82d618a2fa68b2169ed2fe1" translate="yes" xml:space="preserve">
          <source>An underlying parser that supports what is called argument 'bursting' is used by default. Bursting would convert '-alt' into '-a -l -t' provided no long option exists with value 'alt' and provided that none of 'a', 'l' or 't' takes an argument (in fact the last one is allowed to take an argument). The bursting behavior can be turned off by using an alternate underlying parser. The simplest way to achieve this is by using the deprecated GnuParser from Commons CLI with the parser property on the CliBuilder, i.e. include &lt;code&gt;parser: new GnuParser()&lt;/code&gt; in the constructor call.</source>
          <target state="translated">默认情况下，使用支持所谓的参数&amp;ldquo;突发&amp;rdquo;的基础解析器。如果不存在带有'alt'值的长选项，并且'a'，'l'或't'中的任何一个都不接受参数，则突发处理会将'-alt'转换为'-a -l -t'允许一个参数）。可以通过使用备用基础解析器来关闭突发行为。最简单的方法是使用Commons CLI中已弃用的GnuParser，并将其与CliBuilder上的parser属性一起使用，即在构造函数调用中包含 &lt;code&gt;parser: new GnuParser()&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="946708df4de50bf4ab15310e00caaf56cf30f708" translate="yes" xml:space="preserve">
          <source>An utility class which can be used in test cases to dump generated bytecode.</source>
          <target state="translated">一个实用的类,它可以在测试案例中用于转储生成的字节码。</target>
        </trans-unit>
        <trans-unit id="b99a39cc3ba0dde646dbbf624abead7a7e338ec6" translate="yes" xml:space="preserve">
          <source>And after normal default parameter processing takes place, the following overloaded methods will exist:</source>
          <target state="translated">而在进行正常的默认参数处理后,将存在以下重载方法。</target>
        </trans-unit>
        <trans-unit id="31100864e4bca9061d66be89d21e7b597d33a35f" translate="yes" xml:space="preserve">
          <source>And if called with the following arguments '-logfile foo -Dbar=baz -lib=/tmp,/usr/lib,~/libs target' then the following assertions would be true:</source>
          <target state="translated">如果用下面的参数'-logfile foo -Dbar=baz -lib=/tmp,/usr/lib,~/libs target'来调用,那么下面的断言将为真。</target>
        </trans-unit>
        <trans-unit id="0a1b902883cba83627357533ce7a06f444452e39" translate="yes" xml:space="preserve">
          <source>And if called with the following arguments '-logfile foo -Dbar=baz target' then the following assertions would be true:</source>
          <target state="translated">如果用下面的参数'-logfile foo -Dbar=baz target'来调用,那么下面的断言将为真。</target>
        </trans-unit>
        <trans-unit id="ef1687099b5e72342f7b6d7222a8af7322427097" translate="yes" xml:space="preserve">
          <source>And these nested tasks:</source>
          <target state="translated">而这些嵌套的任务。</target>
        </trans-unit>
        <trans-unit id="62db03f1c30c83748bc98a8c21af6a37e8739371" translate="yes" xml:space="preserve">
          <source>And via implicit hard-coded keywords:</source>
          <target state="translated">并通过隐性硬编码关键词。</target>
        </trans-unit>
        <trans-unit id="e1060ddb882a373584a09180888ccacaed217a42" translate="yes" xml:space="preserve">
          <source>And you also have to contend with a possible &lt;code&gt;SecurityException&lt;/code&gt; when getting the system properties (See &lt;a href=&quot;https://docs.oracle.com/javase/8/docs/api/java/lang/System.html#getProperties()&quot;&gt;System.getProperties&lt;/a&gt;). A safer approach would be to copy a default &lt;code&gt;CompilerConfiguration&lt;/code&gt; and make your changes there using the setter:</source>
          <target state="translated">而且，在获取系统属性时，您还必须应对可能的 &lt;code&gt;SecurityException&lt;/code&gt; （请参阅&lt;a href=&quot;https://docs.oracle.com/javase/8/docs/api/java/lang/System.html#getProperties()&quot;&gt;System.getProperties&lt;/a&gt;）。一种更安全的方法是复制默认的 &lt;code&gt;CompilerConfiguration&lt;/code&gt; 并使用设置器在此处进行更改：</target>
        </trans-unit>
        <trans-unit id="feb0f5ed0ed2780340132eee761f316fa9ce7bf4" translate="yes" xml:space="preserve">
          <source>Annotates a groovy property or a class.</source>
          <target state="translated">注释一个groovy属性或类。</target>
        </trans-unit>
        <trans-unit id="18a29dbf803be2522bf37d4c26e4311bd6194c51" translate="yes" xml:space="preserve">
          <source>Annotates a groovy property or a class. When annotating a property it indicates that the property should be a bound property according to the JavaBeans spec, announcing to listeners that the value has changed.</source>
          <target state="translated">对一个groovy属性或类进行注解。当对一个属性进行注解时,它表明该属性应该是一个符合JavaBeans规范的绑定属性,向监听者宣布该值已经发生了变化。</target>
        </trans-unit>
        <trans-unit id="73e4d41262a615051e78a930a713101d193fc99e" translate="yes" xml:space="preserve">
          <source>Annotating anything in a script will cause for loops, while loops, methods, and closures to make a check against the specified closure. If the closure yields true (according to GroovyTruth), then the script will throw an InterruptedException. The annotation by default applies to any classes defined in the script as well. Annotated a class will cause (by default) all classes in the entire file ('Compilation Unit') to be enhanced. You can fine tune what is enhanced using the annotation parameters.</source>
          <target state="translated">注释脚本中的任何东西都会导致for循环、while循环、方法和闭包对指定的闭包进行检查。如果闭包产生了true(根据GroovyTruth),那么脚本将抛出一个InterruptedException。默认情况下,该注解也适用于脚本中定义的任何类。注解一个类将导致(默认情况下)整个文件(&quot;编译单元&quot;)中的所有类被增强。你可以使用注解参数对增强的内容进行微调。</target>
        </trans-unit>
        <trans-unit id="a51115cd32549d9d8074a93d2249af8dd040afff" translate="yes" xml:space="preserve">
          <source>Annotating anything in a script will cause for loops, while loops, methods, and closures to make an elapsed time check and throw a TimeoutException if the check yields true. The annotation by default will apply to any classes defined in the script as well. Annotating a class will cause (by default) all classes in the entire file ('Compilation Unit') to be enhanced. You can fine tune what is enhanced using the annotation parameters. Static methods and static fields are ignored.</source>
          <target state="translated">注解脚本中的任何东西都会导致for循环、while循环、方法和闭包进行耗时检查,并在检查结果为真时抛出一个TimeoutException。默认情况下,注解也会应用于脚本中定义的任何类。注释一个类会导致(默认情况下)整个文件(&quot;编译单元&quot;)中的所有类被增强。您可以使用注释参数对增强的内容进行微调。静态方法和静态字段会被忽略。</target>
        </trans-unit>
        <trans-unit id="9fbbbe6655e23b1f935f3e3a9f096fe7b42766aa" translate="yes" xml:space="preserve">
          <source>Annotating anything in a script will cause for loops, while loops, methods, and closures to make an isInterruptedCheck and throw a InterruptedException if the check yields true. The annotation by default will apply to any classes defined in the script as well. Annotated a class will cause (by default) all classes in the entire file ('Compilation Unit') to be enhanced. You can fine tune what is enhanced using the annotation parameters.</source>
          <target state="translated">注解脚本中的任何内容都会导致循环、循环、方法和闭包进行isInterruptedCheck,并在检查结果为真时抛出一个InterruptedException。默认情况下,注解也将适用于脚本中定义的任何类。注释一个类会导致(默认情况下)整个文件('编译单元')中的所有类被增强。你可以使用注释参数对增强的内容进行微调。</target>
        </trans-unit>
        <trans-unit id="de3b78b64190965365f72568ffbe049d4ba32c22" translate="yes" xml:space="preserve">
          <source>Annotation</source>
          <target state="translated">Annotation</target>
        </trans-unit>
        <trans-unit id="3bd2ae4bd4853126b72b32664fbc95c556c37a66" translate="yes" xml:space="preserve">
          <source>Annotation that supports writing constructor call expressions without the 'new' keyword. Instead they can be written &quot;Ruby-style&quot; as a method call to a 'new' method or &quot;Python-style&quot; by just omitting the 'new' keyword.</source>
          <target state="translated">注解,支持不使用'new'关键字来编写构造函数调用表达式。它们可以被写成 &quot;Ruby风格 &quot;的方法调用 &quot;new &quot;方法,或者 &quot;Python风格 &quot;的省略 &quot;new &quot;关键字。</target>
        </trans-unit>
        <trans-unit id="4096cd9b027c657a5e7d97844010020f67ac89be" translate="yes" xml:space="preserve">
          <source>Annotation to automatically add the final qualifier to method, constructor, and closure parameters.</source>
          <target state="translated">注解用于自动将最后的限定符添加到方法、构造函数和关闭参数中。</target>
        </trans-unit>
        <trans-unit id="106111539f1c83706b8831f53c2b23e41bd0c3f6" translate="yes" xml:space="preserve">
          <source>Annotation to automatically delegate part of the functionality of an owner class to the annotated delegation target. The target can be a field (or property) or a method's return value.</source>
          <target state="translated">注解用于自动将所有者类的部分功能委托给注解的委托目标。目标可以是一个字段(或属性)或一个方法的返回值。</target>
        </trans-unit>
        <trans-unit id="32e5b99987de4a53d5e4800a718596c542dd5273" translate="yes" xml:space="preserve">
          <source>Annotation to indicate experimental and still to be refined API, which may change at any time</source>
          <target state="translated">注释表示实验性和有待完善的API,可能会随时改变。</target>
        </trans-unit>
        <trans-unit id="628916cfdb6a1d3bf1782011f1fd7d59375ec9f6" translate="yes" xml:space="preserve">
          <source>Annotation used for turning off Groovy's auto visibility conventions. By default, Groovy automatically turns package protected fields into properties and makes package protected methods, constructors and classes public. This annotation allows this feature to be turned off and revert back to Java behavior if needed. Place it on classes, fields, constructors or methods of interest as follows:</source>
          <target state="translated">用于关闭Groovy的自动可见性约定的注解。默认情况下,Groovy会自动将包保护的字段转为属性,并将包保护的方法、构造函数和类公开。该注解允许关闭该功能,并在需要时恢复到Java行为。将其放在感兴趣的类、字段、构造函数或方法上,如下所示。</target>
        </trans-unit>
        <trans-unit id="deb49c12844bdde0681de09dfb9c7074626d4e63" translate="yes" xml:space="preserve">
          <source>AnnotationCollector</source>
          <target state="translated">AnnotationCollector</target>
        </trans-unit>
        <trans-unit id="e38bdf70a194edb101cc7fa00c749c22ea2c2906" translate="yes" xml:space="preserve">
          <source>AnnotationCollectorMode.DUPLICATE</source>
          <target state="translated">AnnotationCollectorMode.DUPLICATE</target>
        </trans-unit>
        <trans-unit id="bba8527e63248d9280c9192eb1f3030178320255" translate="yes" xml:space="preserve">
          <source>AnnotationCollectorTransform</source>
          <target state="translated">AnnotationCollectorTransform</target>
        </trans-unit>
        <trans-unit id="79edee40f276c7eba97545c42f45abac2cd48f79" translate="yes" xml:space="preserve">
          <source>AnnotationCollectorTransform.visit</source>
          <target state="translated">AnnotationCollectorTransform.visit</target>
        </trans-unit>
        <trans-unit id="4ba4b7f2791ac2aa4c80109d535fbfb13d73d36f" translate="yes" xml:space="preserve">
          <source>Annotations from the annotation collection will always be inserted.</source>
          <target state="translated">注释集合中的注释将始终被插入。</target>
        </trans-unit>
        <trans-unit id="3f4336d76b091e123652532142e19af4499712fd" translate="yes" xml:space="preserve">
          <source>Annotations from the annotation collection will always be inserted. After all transforms have been run, it will be an error if multiple annotations (excluding those with SOURCE retention) exist.</source>
          <target state="translated">注释集合中的注释将始终被插入。在所有的变换运行后,如果存在多个注释(不包括那些有SOURCE保留的注释),将是一个错误。</target>
        </trans-unit>
        <trans-unit id="5de36616705f2e389180b9498b6b1ab0c7a8fbc9" translate="yes" xml:space="preserve">
          <source>Annotations from the collector will be added and any existing annotations with the same name will be removed but any new parameters found within existing annotations will be merged into the added annotation.</source>
          <target state="translated">来自收集器的注解将被添加,任何同名的现有注解将被删除,但在现有注解中发现的任何新参数将被合并到添加的注解中。</target>
        </trans-unit>
        <trans-unit id="082f52885597923998442bf595f2313f72d502e0" translate="yes" xml:space="preserve">
          <source>Annotations from the collector will be added and any existing annotations with the same name will be removed.</source>
          <target state="translated">来自收集器的注释将被添加,任何现有的同名注释将被删除。</target>
        </trans-unit>
        <trans-unit id="2da74bf2e8e6d09f35515442bf09f5b8f02527a9" translate="yes" xml:space="preserve">
          <source>Annotations from the collector will be ignored if any existing annotations with the same name are found but any new parameters on the collector annotation will be added to existing annotations.</source>
          <target state="translated">如果发现任何现有的同名注解,来自收集器的注解将被忽略,但收集器注解上的任何新参数将被添加到现有注解中。</target>
        </trans-unit>
        <trans-unit id="5a9a0199226016d5b1b18d7d912b26efeef64d52" translate="yes" xml:space="preserve">
          <source>Annotations from the collector will be ignored if any existing annotations with the same name are found.</source>
          <target state="translated">如果发现任何现有的同名注释,来自收集器的注释将被忽略。</target>
        </trans-unit>
        <trans-unit id="1b528c18044c72ae7fe8abebdfa61d1a41bf02f6" translate="yes" xml:space="preserve">
          <source>Annotations with &lt;a href=&quot;../../runtime/generatedclosure&quot;&gt;GeneratedClosure&lt;/a&gt; members are not supported at present.</source>
          <target state="translated">目前不支持带有&lt;a href=&quot;../../runtime/generatedclosure&quot;&gt;GeneratedClosure&lt;/a&gt;成员的注释。</target>
        </trans-unit>
        <trans-unit id="74ab3d024375e18ccfacabaf502d9b35ec855e6f" translate="yes" xml:space="preserve">
          <source>Annotations with &lt;a href=&quot;../runtime/generatedclosure&quot;&gt;GeneratedClosure&lt;/a&gt; members are not supported for now.</source>
          <target state="translated">目前不支持带有&lt;a href=&quot;../runtime/generatedclosure&quot;&gt;GeneratedClosure&lt;/a&gt;成员的注释。</target>
        </trans-unit>
        <trans-unit id="7a974c8eff5cff7b5c43b5fa88878cb32de387a3" translate="yes" xml:space="preserve">
          <source>Another example (partial emulation of arg processing for 'ant' command line):</source>
          <target state="translated">另一个例子(部分模拟'ant'命令行的arg处理)。</target>
        </trans-unit>
        <trans-unit id="9a40fa4b45ca995e58556903f036267951fa9d14" translate="yes" xml:space="preserve">
          <source>Another example involving XStream:</source>
          <target state="translated">另一个涉及XStream的例子。</target>
        </trans-unit>
        <trans-unit id="2d069dc51ac9f6061526017dda463400ab1cdb15" translate="yes" xml:space="preserve">
          <source>Another example showing long options (partial emulation of arg processing for 'curl' command line):</source>
          <target state="translated">另一个显示长选项的例子(部分模拟'curl'命令行的arg处理)。</target>
        </trans-unit>
        <trans-unit id="dedf5ccdeb6bf446ef7cfb01d8db4c4b042b2078" translate="yes" xml:space="preserve">
          <source>Another example:</source>
          <target state="translated">另一个例子:</target>
        </trans-unit>
        <trans-unit id="cd48c6280554d20fdd43c23eea44d262ee2b8cd2" translate="yes" xml:space="preserve">
          <source>Another popular cloning strategy is known as the copy constructor pattern. If any of your fields are &lt;code&gt;final&lt;/code&gt; and &lt;code&gt;Cloneable&lt;/code&gt; you should set &lt;code&gt;style=COPY_CONSTRUCTOR&lt;/code&gt; which will then use the copy constructor pattern. Here is an example making use of the copy constructor pattern:</source>
          <target state="translated">另一种流行的克隆策略称为复制构造器模式。如果你的任何领域都 &lt;code&gt;final&lt;/code&gt; 和 &lt;code&gt;Cloneable&lt;/code&gt; 的你应该设置 &lt;code&gt;style=COPY_CONSTRUCTOR&lt;/code&gt; 然后将使用拷贝构造格局。这是一个使用复制构造函数模式的示例：</target>
        </trans-unit>
        <trans-unit id="f86cfc49ec4d81202737f953eea5fa57fb586c8a" translate="yes" xml:space="preserve">
          <source>Ant tasks for working with Groovy - such as groovyc for compiling Groovy source code to Java bytecode</source>
          <target state="translated">用于Groovy工作的蚂蚁任务--例如将Groovy源代码编译成Java字节码的groovyc。</target>
        </trans-unit>
        <trans-unit id="9f66a95960f2966786a81cb9e800a0e4b10717d0" translate="yes" xml:space="preserve">
          <source>AntlrASTProcessor</source>
          <target state="translated">AntlrASTProcessor</target>
        </trans-unit>
        <trans-unit id="2908aff1680b0629928812356c928991240dc5ab" translate="yes" xml:space="preserve">
          <source>Antony Riley</source>
          <target state="translated">Antony Riley</target>
        </trans-unit>
        <trans-unit id="fe08285a7402bf91e62292bfd94155f068e60b77" translate="yes" xml:space="preserve">
          <source>Any method annotated with &lt;code&gt;@&lt;/code&gt;WithReadLock will obtain a read lock and release it in a finally block.</source>
          <target state="translated">带注释的任何方法 &lt;code&gt;@&lt;/code&gt; WithReadLock将获得的读锁和在最后块松开。</target>
        </trans-unit>
        <trans-unit id="ab81fd5f531cd65baea5ab73bb7bcf9f44198bf6" translate="yes" xml:space="preserve">
          <source>Any method annotated with &lt;code&gt;@&lt;/code&gt;WithWriteLock will obtain a write lock and release it in a finally block.</source>
          <target state="translated">带注释的任何方法 &lt;code&gt;@&lt;/code&gt; WithWriteLock将获得一个写锁定，并在最后块松开。</target>
        </trans-unit>
        <trans-unit id="8a783ed15740c3826664477498103047d4aacf0f" translate="yes" xml:space="preserve">
          <source>Any method invoked inside the closure will first be invoked on the self reference. For example, the following method calls to the append() method are invoked on the StringBuilder instance and then, because 'returning' is true, the self instance is returned:</source>
          <target state="translated">在闭包内部调用的任何方法都会首先在self引用上被调用。例如,下面对append()方法的调用是在StringBuilder实例上调用的,然后,因为'return'为真,所以返回self实例。</target>
        </trans-unit>
        <trans-unit id="b67714d41e37f1b15e7d89200544d6d41a984451" translate="yes" xml:space="preserve">
          <source>Any method invoked inside the closure will first be invoked on the self reference. For instance, the following method calls to the append() method are invoked on the StringBuilder instance:</source>
          <target state="translated">在闭包内部调用的任何方法都将首先在self引用上被调用。例如,下面对append()方法的调用都是在StringBuilder实例上调用的。</target>
        </trans-unit>
        <trans-unit id="03243dc9d4207588c8cad00c322142551fdcd237" translate="yes" xml:space="preserve">
          <source>Any regular expression matches are passed to the closure, if there are no capture groups, there will be one parameter for the match:</source>
          <target state="translated">任何正则表达式匹配都会传递给闭包,如果没有捕获组,则会有一个匹配的参数。</target>
        </trans-unit>
        <trans-unit id="5571423cfc2ec42711dee62376228de30693781a" translate="yes" xml:space="preserve">
          <source>Any regular expression matches are returned in a list, and all regex capture groupings are ignored, only the full match is returned:</source>
          <target state="translated">任何正则表达式匹配都会以列表形式返回,所有的regex捕获分组都会被忽略,只返回完整的匹配。</target>
        </trans-unit>
        <trans-unit id="cfcffb25034a47ebc022d21da6755be4e6a3d17e" translate="yes" xml:space="preserve">
          <source>Any two Converter instances registered for the same type are considered to be equal.</source>
          <target state="translated">任何两个为同一类型注册的转换器实例被认为是相等的。</target>
        </trans-unit>
        <trans-unit id="ff7f33bd66215965b64304530414110c62ae3d51" translate="yes" xml:space="preserve">
          <source>Any two Converter instances registered for the same type are considered to be equal. This comparison makes managing instances in a Set easier; since there is no chaining of Converters it makes sense to only allow one per type.</source>
          <target state="translated">为同一类型注册的任何两个转换器实例被认为是相等的。这种比较使Set中的实例管理变得更容易;由于转换器没有连锁,因此每个类型只允许一个实例是合理的。</target>
        </trans-unit>
        <trans-unit id="cec7965f9160369e2cc29488469a86d264e6979c" translate="yes" xml:space="preserve">
          <source>Apache Jakarta Turbine</source>
          <target state="translated">Apache Jakarta涡轮机</target>
        </trans-unit>
        <trans-unit id="7dc2013ffd126c7fac496ea878c004c70c256a3b" translate="yes" xml:space="preserve">
          <source>Apache Software Foundation</source>
          <target state="translated">Apache软件基金会</target>
        </trans-unit>
        <trans-unit id="3117e9499ec693715c12e56d8b7b41fb305eb428" translate="yes" xml:space="preserve">
          <source>Append binary data to the file.</source>
          <target state="translated">将二进制数据添加到文件中。</target>
        </trans-unit>
        <trans-unit id="36ffc6d4db82515ab25d27983cc26a65790dc5f3" translate="yes" xml:space="preserve">
          <source>Append binary data to the file. It &lt;strong&gt;will not&lt;/strong&gt; be interpreted as text.</source>
          <target state="translated">将二进制数据附加到文件。它&lt;strong&gt;不会&lt;/strong&gt;被解释为文本。</target>
        </trans-unit>
        <trans-unit id="6eb7e55a134470a05109863ebffc28b8938f5f70" translate="yes" xml:space="preserve">
          <source>Append binary data to the file. See &lt;a href=&quot;#append(java.io.File,%20java.io.InputStream)&quot;&gt;append(java.io.File, java.io.InputStream)&lt;/a&gt;</source>
          <target state="translated">将二进制数据附加到文件。参见&lt;a href=&quot;#append(java.io.File,%20java.io.InputStream)&quot;&gt;append（java.io.File，java.io.InputStream）&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="6ed15ed08c94aa719618e719c3de9dd649a2480d" translate="yes" xml:space="preserve">
          <source>Append binary data to the file. See &lt;a href=&quot;#append(java.nio.file.Path,%20java.io.InputStream)&quot;&gt;append(Path, java.io.InputStream)&lt;/a&gt;</source>
          <target state="translated">将二进制数据附加到文件。参见&lt;a href=&quot;#append(java.nio.file.Path,%20java.io.InputStream)&quot;&gt;append（Path，java.io.InputStream）&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="52dd5a699da45bb83aee8ce8b8479e12cb6fe696" translate="yes" xml:space="preserve">
          <source>Append bytes to the end of a File.</source>
          <target state="translated">在文件末尾添加字节。</target>
        </trans-unit>
        <trans-unit id="fa93b165bd55a1af44497909723a836ae7883dd9" translate="yes" xml:space="preserve">
          <source>Append bytes to the end of a File. It &lt;strong&gt;will not&lt;/strong&gt; be interpreted as text.</source>
          <target state="translated">将字节追加到文件末尾。它&lt;strong&gt;不会&lt;/strong&gt;被解释为文本。</target>
        </trans-unit>
        <trans-unit id="655f2059c99e7f7c74c9da5ee8c2cd5ddfd4b698" translate="yes" xml:space="preserve">
          <source>Append bytes to the end of a Path.</source>
          <target state="translated">将字节添加到路径的末尾。</target>
        </trans-unit>
        <trans-unit id="48ccac7bbec8e5a392d6fb4d151cdc9700462e36" translate="yes" xml:space="preserve">
          <source>Append bytes to the end of a Path. It &lt;strong&gt;will not&lt;/strong&gt; be interpreted as text.</source>
          <target state="translated">将字节追加到路径的末尾。它&lt;strong&gt;不会&lt;/strong&gt;被解释为文本。</target>
        </trans-unit>
        <trans-unit id="8e3a81ed18bb533a3dba37d05ab2cf10f8b96a59" translate="yes" xml:space="preserve">
          <source>Append the text at the end of the File without writing a BOM, using a specified encoding.</source>
          <target state="translated">使用指定的编码,在文件末尾添加文本,而不写BOM。</target>
        </trans-unit>
        <trans-unit id="fed092b941b7392979e4b913890bd6121a7dd7e7" translate="yes" xml:space="preserve">
          <source>Append the text at the end of the File without writing a BOM.</source>
          <target state="translated">在文件末尾添加文本,而不写BOM。</target>
        </trans-unit>
        <trans-unit id="0a8ec98fca7ce0946f0d6db8898583f8a65a25a7" translate="yes" xml:space="preserve">
          <source>Append the text at the end of the File, using a specified encoding.</source>
          <target state="translated">使用指定的编码,在文件末尾添加文本。</target>
        </trans-unit>
        <trans-unit id="d7629b6391efc921d708783c6b1d1abbdfb3aa00" translate="yes" xml:space="preserve">
          <source>Append the text at the end of the File, using a specified encoding. If the given charset is &quot;UTF-16BE&quot; or &quot;UTF-16LE&quot; (or an equivalent alias), &lt;code&gt;writeBom&lt;/code&gt; is &lt;code&gt;true&lt;/code&gt;, and the file doesn't already exist, the requisite byte order mark is written to the file before the text is appended.</source>
          <target state="translated">使用指定的编码在文件末尾附加文本。如果给定的字符集为&amp;ldquo; UTF-16BE&amp;rdquo;或&amp;ldquo; UTF-16LE&amp;rdquo;（或等效别名）， &lt;code&gt;writeBom&lt;/code&gt; 为 &lt;code&gt;true&lt;/code&gt; ，并且文件不存在，则在文本为附加。</target>
        </trans-unit>
        <trans-unit id="146dedbd95debeeee6bf4ed558648d465acf36d0" translate="yes" xml:space="preserve">
          <source>Append the text at the end of the File.</source>
          <target state="translated">在 &quot;文件 &quot;结尾处附加文字。</target>
        </trans-unit>
        <trans-unit id="05451ee0ebec6a5cd7d3e3f17222d2398bfa04f4" translate="yes" xml:space="preserve">
          <source>Append the text at the end of the File. If the default charset is &quot;UTF-16BE&quot; or &quot;UTF-16LE&quot; (or an equivalent alias) and &lt;code&gt;writeBom&lt;/code&gt; is &lt;code&gt;true&lt;/code&gt;, the requisite byte order mark is written to the file before the text.</source>
          <target state="translated">在文件末尾附加文本。如果默认字符集为&amp;ldquo; UTF-16BE&amp;rdquo;或&amp;ldquo; UTF-16LE&amp;rdquo;（或等效别名），并且 &lt;code&gt;writeBom&lt;/code&gt; 为 &lt;code&gt;true&lt;/code&gt; ，则在文本之前将必需的字节顺序标记写入文件。</target>
        </trans-unit>
        <trans-unit id="9737fbdf8e26a129ced8e30ea1d2f02756a3abfe" translate="yes" xml:space="preserve">
          <source>Append the text at the end of the Path without writing a BOM, using a specified encoding.</source>
          <target state="translated">使用指定的编码,在Path的末尾添加文本,而不写BOM。</target>
        </trans-unit>
        <trans-unit id="6985342498ff9cc013798e67251e8ed139de4eb1" translate="yes" xml:space="preserve">
          <source>Append the text at the end of the Path without writing a BOM.</source>
          <target state="translated">在Path的结尾处添加文本,而不需要编写BOM。</target>
        </trans-unit>
        <trans-unit id="297c739710d07ced61439301b807037de5041200" translate="yes" xml:space="preserve">
          <source>Append the text at the end of the Path, using a specified encoding.</source>
          <target state="translated">使用指定的编码,在路径末尾添加文本。</target>
        </trans-unit>
        <trans-unit id="21375aa3a02a1357dd34e852adf9ee09e1f0dc4e" translate="yes" xml:space="preserve">
          <source>Append the text at the end of the Path, using a specified encoding. If the given charset is &quot;UTF-16BE&quot; or &quot;UTF-16LE&quot; (or an equivalent alias), &lt;code&gt;writeBom&lt;/code&gt; is &lt;code&gt;true&lt;/code&gt;, and the file doesn't already exist, the requisite byte order mark is written to the file before the text is appended.</source>
          <target state="translated">使用指定的编码在路径末尾添加文本。如果给定的字符集为&amp;ldquo; UTF-16BE&amp;rdquo;或&amp;ldquo; UTF-16LE&amp;rdquo;（或等效别名）， &lt;code&gt;writeBom&lt;/code&gt; 为 &lt;code&gt;true&lt;/code&gt; ，并且文件不存在，则在文本为附加。</target>
        </trans-unit>
        <trans-unit id="c32d029cfdd148c244fddd48fea77ee594fe746e" translate="yes" xml:space="preserve">
          <source>Append the text at the end of the Path.</source>
          <target state="translated">在 &quot;路径 &quot;结尾处添加文字。</target>
        </trans-unit>
        <trans-unit id="bdfb9d38a9c069d9a4cfbf4edd7b036b51d04756" translate="yes" xml:space="preserve">
          <source>Append the text at the end of the Path. If the default charset is &quot;UTF-16BE&quot; or &quot;UTF-16LE&quot; (or an equivalent alias) and &lt;code&gt;writeBom&lt;/code&gt; is &lt;code&gt;true&lt;/code&gt;, the requisite byte order mark is written to the file before the text.</source>
          <target state="translated">在路径末尾添加文本。如果默认字符集为&amp;ldquo; UTF-16BE&amp;rdquo;或&amp;ldquo; UTF-16LE&amp;rdquo;（或等效别名），并且 &lt;code&gt;writeBom&lt;/code&gt; 为 &lt;code&gt;true&lt;/code&gt; ，则在文本之前将必需的字节顺序标记写入文件。</target>
        </trans-unit>
        <trans-unit id="2f0368d2b969ad8882e89e7093d8065880c69a27" translate="yes" xml:space="preserve">
          <source>Append the text supplied by the Reader at the end of the File without writing a BOM, using a specified encoding.</source>
          <target state="translated">使用指定的编码,将阅读器提供的文本附加在文件的末尾,而不写BOM。</target>
        </trans-unit>
        <trans-unit id="4995ff10e11b0269196aa840375cf071fe4ef588" translate="yes" xml:space="preserve">
          <source>Append the text supplied by the Reader at the end of the File, using a specified encoding.</source>
          <target state="translated">使用指定的编码,将阅读器提供的文本附加在文件的末尾。</target>
        </trans-unit>
        <trans-unit id="966577dc99ce2ef27a719544dcc5429fc699bb12" translate="yes" xml:space="preserve">
          <source>Append the text supplied by the Reader at the end of the File, using a specified encoding. If the given charset is &quot;UTF-16BE&quot; or &quot;UTF-16LE&quot; (or an equivalent alias), &lt;code&gt;writeBom&lt;/code&gt; is &lt;code&gt;true&lt;/code&gt;, and the file doesn't already exist, the requisite byte order mark is written to the file before the text is appended.</source>
          <target state="translated">使用指定的编码在文件末尾附加阅读器提供的文本。如果给定的字符集为&amp;ldquo; UTF-16BE&amp;rdquo;或&amp;ldquo; UTF-16LE&amp;rdquo;（或等效别名）， &lt;code&gt;writeBom&lt;/code&gt; 为 &lt;code&gt;true&lt;/code&gt; ，并且文件不存在，则在文本为附加。</target>
        </trans-unit>
        <trans-unit id="fb146cbf6859bffe3c255ba0f73dc0f690c90abd" translate="yes" xml:space="preserve">
          <source>Append the text supplied by the Writer at the end of the File without writing a BOM, using a specified encoding.</source>
          <target state="translated">使用指定的编码,在文件末尾附加由写入者提供的文本,而不写BOM。</target>
        </trans-unit>
        <trans-unit id="e0292ca1746be34f00bf6d89364de22069d471ad" translate="yes" xml:space="preserve">
          <source>Append the text supplied by the Writer at the end of the File without writing a BOM.</source>
          <target state="translated">在文件末尾添加由编写者提供的文本,而不编写BOM。</target>
        </trans-unit>
        <trans-unit id="7b23adb7f1833987b2ffbf44bf3ae6296df8804f" translate="yes" xml:space="preserve">
          <source>Append the text supplied by the Writer at the end of the File, using a specified encoding.</source>
          <target state="translated">使用指定的编码,在文件末尾添加由写入者提供的文本。</target>
        </trans-unit>
        <trans-unit id="01c55b2b842cb17c8d894820872394bf69c844f8" translate="yes" xml:space="preserve">
          <source>Append the text supplied by the Writer at the end of the File, using a specified encoding. If the given charset is &quot;UTF-16BE&quot; or &quot;UTF-16LE&quot; (or an equivalent alias), &lt;code&gt;writeBom&lt;/code&gt; is &lt;code&gt;true&lt;/code&gt;, and the file doesn't already exist, the requisite byte order mark is written to the file before the text is appended.</source>
          <target state="translated">使用指定的编码在文件末尾附加Writer提供的文本。如果给定的字符集为&amp;ldquo; UTF-16BE&amp;rdquo;或&amp;ldquo; UTF-16LE&amp;rdquo;（或等效别名）， &lt;code&gt;writeBom&lt;/code&gt; 为 &lt;code&gt;true&lt;/code&gt; ，并且文件不存在，则在文本为附加。</target>
        </trans-unit>
        <trans-unit id="a3eced28558d7e6ad510e4e5f792c3988d9ce078" translate="yes" xml:space="preserve">
          <source>Append the text supplied by the Writer at the end of the File.</source>
          <target state="translated">在 &quot;文件 &quot;的末尾添加由编写者提供的文本。</target>
        </trans-unit>
        <trans-unit id="7171caeeaae97345c474f199b9d4d4d456fd0e9e" translate="yes" xml:space="preserve">
          <source>Append the text supplied by the Writer at the end of the File. If the default charset is &quot;UTF-16BE&quot; or &quot;UTF-16LE&quot; (or an equivalent alias) and &lt;code&gt;writeBom&lt;/code&gt; is &lt;code&gt;true&lt;/code&gt;, the requisite byte order mark is written to the file before the text.</source>
          <target state="translated">在文件末尾附加Writer提供的文本。如果默认字符集为&amp;ldquo; UTF-16BE&amp;rdquo;或&amp;ldquo; UTF-16LE&amp;rdquo;（或等效别名），并且 &lt;code&gt;writeBom&lt;/code&gt; 为 &lt;code&gt;true&lt;/code&gt; ，则在文本之前将必需的字节顺序标记写入文件。</target>
        </trans-unit>
        <trans-unit id="a206d68287f9fc8c21f70a7080aeb15ee4beb64e" translate="yes" xml:space="preserve">
          <source>Appends a String to the string representation of this number.</source>
          <target state="translated">将一个字符串添加到这个数字的字符串表示中。</target>
        </trans-unit>
        <trans-unit id="68a52dbab4bdda0f883548bdb4781f60014e93e5" translate="yes" xml:space="preserve">
          <source>Appends a String to this StringBuffer.</source>
          <target state="translated">将一个字符串添加到这个StringBuffer中。</target>
        </trans-unit>
        <trans-unit id="953951d55707df238a92b56f27419a478454b6fa" translate="yes" xml:space="preserve">
          <source>Appends a String to this StringBuilder.</source>
          <target state="translated">将一个字符串添加到这个StringBuilder中。</target>
        </trans-unit>
        <trans-unit id="d70572efa2ddde8480a0883f8d05973841fc48e5" translate="yes" xml:space="preserve">
          <source>Appends a character sequence to this Writer.</source>
          <target state="translated">将一个字符序列添加到这个Writer中。</target>
        </trans-unit>
        <trans-unit id="43a182e4344e119c6c431c06b73d413b05e35781" translate="yes" xml:space="preserve">
          <source>Appends a child to the current node.</source>
          <target state="translated">在当前节点上添加一个子节点。</target>
        </trans-unit>
        <trans-unit id="f6087e382a65ba20dbe7fffcf6a050563d27924c" translate="yes" xml:space="preserve">
          <source>Appends a portion of a character sequence to the &lt;a href=&quot;https://docs.oracle.com/javase/8/docs/api/java/lang/StringBuilder.html&quot;&gt;StringBuilder&lt;/a&gt;.</source>
          <target state="translated">将字符序列的一部分追加到&lt;a href=&quot;https://docs.oracle.com/javase/8/docs/api/java/lang/StringBuilder.html&quot;&gt;StringBuilder&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="8e1b6dc512c5a1577fb5e0fb5bac25e1d5319974" translate="yes" xml:space="preserve">
          <source>Appends a single character to this Writer.</source>
          <target state="translated">给这个Writer添加一个字符。</target>
        </trans-unit>
        <trans-unit id="9363d3fa15c260fa89b766d9dec292067fed6700" translate="yes" xml:space="preserve">
          <source>Appends an object to an Appendable using Groovy's default representation for the object.</source>
          <target state="translated">使用Groovy对对象的默认表示方式将对象追加到Appendable中。</target>
        </trans-unit>
        <trans-unit id="3e4b49055e720c793680be4f23d71e599ca36e4a" translate="yes" xml:space="preserve">
          <source>Appends the String representation of the given operand to this CharSequence.</source>
          <target state="translated">将给定操作数的字符串表示法添加到这个CharSequence中。</target>
        </trans-unit>
        <trans-unit id="9590f0b6dd98c0e34d7e9eb9f1aee0ee0b5df00a" translate="yes" xml:space="preserve">
          <source>Appends the String representation of the given operand to this string.</source>
          <target state="translated">将给定操作数的字符串表示法添加到这个字符串中。</target>
        </trans-unit>
        <trans-unit id="7b7f43193d2ceb1993fd4d9256a6b72551d21303" translate="yes" xml:space="preserve">
          <source>Applies a function on each combination of the input lists.</source>
          <target state="translated">对每个输入列表的组合应用一个函数。</target>
        </trans-unit>
        <trans-unit id="9426828b74186a29130c137066f1d7ddc92ff0b7" translate="yes" xml:space="preserve">
          <source>Apply a number of methods to allow convenient Date/Time manipulation,such as:</source>
          <target state="translated">应用一些方法来实现方便的日期/时间操作,例如:1:</target>
        </trans-unit>
        <trans-unit id="c2326a83c26d515fb26d05f4e78f2cca339a0771" translate="yes" xml:space="preserve">
          <source>Apply a transformer as filter.</source>
          <target state="translated">应用变压器作为过滤器。</target>
        </trans-unit>
        <trans-unit id="434d7948db20089de086f297ab4f8c8bc14e34d0" translate="yes" xml:space="preserve">
          <source>Apply a transformer as filter. The filter may not match exactly in the types. In this case needed additional type transformations are done by &lt;a href=&quot;https://docs.oracle.com/javase/8/docs/api/java/lang/invoke/MethodHandle.html#asType(java.lang.invoke.MethodType)&quot;&gt;MethodHandle.asType&lt;/a&gt;</source>
          <target state="translated">应用变压器作为滤波器。过滤器的类型可能不完全匹配。在这种情况下，需要通过&lt;a href=&quot;https://docs.oracle.com/javase/8/docs/api/java/lang/invoke/MethodHandle.html#asType(java.lang.invoke.MethodType)&quot;&gt;MethodHandle.asType&lt;/a&gt;完成其他类型的转换</target>
        </trans-unit>
        <trans-unit id="5445225d06fce4ee4f98447e409d923244cfb18a" translate="yes" xml:space="preserve">
          <source>Are whitespace tokens included?</source>
          <target state="translated">是否包括空白代币?</target>
        </trans-unit>
        <trans-unit id="155e47d740dd65562329d8aefc415c57f481e93d" translate="yes" xml:space="preserve">
          <source>Argument type matching could be more specific in case of static compilation</source>
          <target state="translated">在静态编译的情况下,参数类型匹配可以更加具体化</target>
        </trans-unit>
        <trans-unit id="194ad3ae168c46e97f030c78e2fe99a8bc0c7448" translate="yes" xml:space="preserve">
          <source>Arguments in the (...) can be labeled, and the appended block can be labeled also. If there is a mix of unlabeled and labeled arguments, all the labeled arguments must follow the unlabeled arguments, except that the closure (labeled or not) is always a separate final argument. Labeled arguments are collected up and passed as a single argument to a formal of type Map.</source>
          <target state="translated">(...)中的参数可以被标记,附加的块也可以被标记。如果有未标注的参数和标注的参数混合在一起,所有标注的参数都必须跟在未标注的参数后面,只是闭包(标注与否)总是一个单独的最终参数。标注的参数被收集起来,并作为一个单一的参数传递给Map类型的形式。</target>
        </trans-unit>
        <trans-unit id="ed00b010c5288389ea668919bf8a469628bf9575" translate="yes" xml:space="preserve">
          <source>ArithmeticException if numeric overflow occurs</source>
          <target state="translated">如果发生数字溢出,则出现算术异常。</target>
        </trans-unit>
        <trans-unit id="f060f507760bdfacf2746176d5da136e24896d36" translate="yes" xml:space="preserve">
          <source>Array of StringArrays that can be indexed with the MEMBER_xxx_IDX constants</source>
          <target state="translated">可以用MEMBER_xxx_IDX常量进行索引的StringArrays数组。</target>
        </trans-unit>
        <trans-unit id="17f3d834c909f91543323d2da6d7e392df7fc04d" translate="yes" xml:space="preserve">
          <source>Array utilities.</source>
          <target state="translated">阵列实用程序。</target>
        </trans-unit>
        <trans-unit id="5f933d48639cdd786246bd2cebf2ce954876e4d2" translate="yes" xml:space="preserve">
          <source>Array.getLength</source>
          <target state="translated">Array.getLength</target>
        </trans-unit>
        <trans-unit id="06e91bca6460b35d08e2a1e9e90aedb7d62b4820" translate="yes" xml:space="preserve">
          <source>As a final example, if your class already implements the &lt;code&gt;Serializable&lt;/code&gt; or &lt;code&gt;Externalizable&lt;/code&gt; interface, you can choose the following cloning style:</source>
          <target state="translated">作为最后一个示例，如果您的类已经实现了 &lt;code&gt;Serializable&lt;/code&gt; 或 &lt;code&gt;Externalizable&lt;/code&gt; 接口，则可以选择以下克隆样式：</target>
        </trans-unit>
        <trans-unit id="be3818908b9a99e4821d431f7d86fae59ff20121" translate="yes" xml:space="preserve">
          <source>As a final example, we sometimes need to pass such mixed in classes or objects into Java methods which require a given static type but the ExpandoMetaClass mixin approach uses a very dynamic approach based on duck typing rather than static interface definitions, so doesn't by default produce objects matching the required static type. Luckily, there is a mixins capability within ExpandoMetaClass which supports the use of Groovy's common 'as StaticType' notation to produce an object having the correct static type so that it can be passed to the Java method call in question. A slightly contrived example illustrating this feature:</source>
          <target state="translated">最后一个例子,我们有时需要将这种混合进来的类或对象传递到需要给定静态类型的Java方法中,但是ExpandoMetaClass mixin方法使用了一种非常动态的方法,基于鸭式类型而不是静态接口定义,因此默认情况下不会产生与所需静态类型相匹配的对象。幸运的是,ExpandoMetaClass中的mixins功能支持使用Groovy常用的 &quot;as StaticType &quot;符号来生成一个具有正确静态类型的对象,以便将其传递给相关的Java方法调用。一个略显拙劣的例子说明了这个功能。</target>
        </trans-unit>
        <trans-unit id="3879e95a2519889c33cbeb8c2620bed416d52612" translate="yes" xml:space="preserve">
          <source>As a result, the previous signature can be written like this:</source>
          <target state="translated">因此,之前的签名可以这样写。</target>
        </trans-unit>
        <trans-unit id="cdb30e19c53961a6c300903fe784879b09eb3f4b" translate="yes" xml:space="preserve">
          <source>As a variation of the last two styles, if you set &lt;code&gt;style=SIMPLE&lt;/code&gt; then the no-arg constructor will be called followed by setting the individual properties (and/or fields) calling &lt;code&gt;clone()&lt;/code&gt; if the property/field implements &lt;code&gt;Cloneable&lt;/code&gt;. Here is an example:</source>
          <target state="translated">作为最后两种样式的变体，如果设置 &lt;code&gt;style=SIMPLE&lt;/code&gt; ,则将调用no-arg构造函数，然后设置单个属性（和/或字段 &lt;code&gt;clone()&lt;/code&gt; 如果该属性/字段实现 &lt;code&gt;Cloneable&lt;/code&gt; ,则调用clone（）。这是一个例子：</target>
        </trans-unit>
        <trans-unit id="b1efad073decde291a99ffbb9b86883d27785234" translate="yes" xml:space="preserve">
          <source>As an example, consider this code:</source>
          <target state="translated">举个例子,看看这段代码。</target>
        </trans-unit>
        <trans-unit id="944df76a58bd4ab514570139bdaa563c5e80eed5" translate="yes" xml:space="preserve">
          <source>As another example, consider the following class definitions:</source>
          <target state="translated">作为另一个例子,考虑以下的类定义。</target>
        </trans-unit>
        <trans-unit id="26b4220eac2bb0f252a48212360c29f7ea305f57" translate="yes" xml:space="preserve">
          <source>As another example, see &lt;a href=&quot;#call(java.lang.String,%20java.util.List,%20groovy.lang.Closure)&quot;&gt;call(String, List, Closure)&lt;/a&gt; for more details about creating a &lt;code&gt;FullName(IN first)&lt;/code&gt; stored function. Once created, it can be called like this:</source>
          <target state="translated">作为另一个示例，请参见&lt;a href=&quot;#call(java.lang.String,%20java.util.List,%20groovy.lang.Closure)&quot;&gt;call（String，List，Closure），&lt;/a&gt;以获取有关创建 &lt;code&gt;FullName(IN first)&lt;/code&gt; 存储函数的更多详细信息。创建后，可以这样称呼它：</target>
        </trans-unit>
        <trans-unit id="a9831a597b8c211d7db55125d3887a2114d2137e" translate="yes" xml:space="preserve">
          <source>As another example, the &lt;code&gt;usageMessage&lt;/code&gt; property gives fine-grained control over the usage help message (see the &lt;a href=&quot;http://picocli.info/#_usage_help_with_styles_and_colors&quot;&gt;picocli user manual&lt;/a&gt; for details):</source>
          <target state="translated">再举一个例子， &lt;code&gt;usageMessage&lt;/code&gt; 属性可以对使用帮助消息进行细粒度的控制（有关详细信息，请参见&lt;a href=&quot;http://picocli.info/#_usage_help_with_styles_and_colors&quot;&gt;picocli用户手册&lt;/a&gt;）：</target>
        </trans-unit>
        <trans-unit id="4c62da74d16372e8a480c2f1cb0373f6a5e33f77" translate="yes" xml:space="preserve">
          <source>As another example, this:</source>
          <target state="translated">再举个例子,这。</target>
        </trans-unit>
        <trans-unit id="4f674346eb25550b8d1ca11237dfe8d88a3936d4" translate="yes" xml:space="preserve">
          <source>As another example, we can also define a no dup queue by mixing in some Queue and Set functionality as follows:</source>
          <target state="translated">作为另一个例子,我们也可以通过混合一些Queue和Set功能来定义一个无重复队列,如下所示。</target>
        </trans-unit>
        <trans-unit id="ef97035b57036ee22c850b3c2917d10d3ab7e512" translate="yes" xml:space="preserve">
          <source>As outlined above, &lt;code&gt;Collection&lt;/code&gt;s and &lt;code&gt;Map&lt;/code&gt;s are wrapped by immutable wrapper classes (but not deeply cloned!).</source>
          <target state="translated">如上所述， &lt;code&gt;Collection&lt;/code&gt; 和 &lt;code&gt;Map&lt;/code&gt; 是由不可变的包装器类包装的（但不深克隆！）。</target>
        </trans-unit>
        <trans-unit id="32bbc8a21a875d446389c3b9e88f5ab7890ad6b4" translate="yes" xml:space="preserve">
          <source>As outlined above, Arrays and &lt;code&gt;Cloneable&lt;/code&gt; objects use the &lt;code&gt;clone&lt;/code&gt; method. For your own classes, it is up to you to define this method and use deep cloning if appropriate.</source>
          <target state="translated">如上文所概述，数组和 &lt;code&gt;Cloneable&lt;/code&gt; 的对象使用 &lt;code&gt;clone&lt;/code&gt; 方法。对于您自己的类，您可以定义此方法并在适当时使用深度克隆。</target>
        </trans-unit>
        <trans-unit id="a45e117f5c18eb3b5415b62b221097ceb258f6e3" translate="yes" xml:space="preserve">
          <source>As part of the Groovy compiler, code resembling this is produced:</source>
          <target state="translated">作为Groovy编译器的一部分,会产生类似这样的代码。</target>
        </trans-unit>
        <trans-unit id="ab2dea72cff45f736a46dce1639ad7051dd1e1d7" translate="yes" xml:space="preserve">
          <source>As per the Servlet specification, a call to &lt;code&gt;response.getWriter()&lt;/code&gt; should not be done if a call to &lt;code&gt;response.getOutputStream()&lt;/code&gt; has already occurred or the other way around. You may wonder then how the above lazy variables can possibly be provided - since setting them up would involve calling both of the above methods. The trick is catered for behind the scenes using lazy variables. Lazy bound variables can be requested without side effects; under the covers the writer and stream are wrapped. That means &lt;code&gt;response.getWriter()&lt;/code&gt; is never directly called until some output is done using 'out' or 'html'. Once a write method call is done using either of these variable, then an attempt to write using 'sout' will cause an &lt;code&gt;IllegalStateException&lt;/code&gt;. Similarly, if a write method call on 'sout' has been done already, then any further write method call on 'out' or 'html' will cause an &lt;code&gt;IllegalStateException&lt;/code&gt;.</source>
          <target state="translated">按照Servlet规范，将呼叫 &lt;code&gt;response.getWriter()&lt;/code&gt; 不应该，如果一个调用来完成 &lt;code&gt;response.getOutputStream()&lt;/code&gt; 已经发生或周围的其他方法。您可能会想知道如何才能提供上述惰性变量-因为设置它们会涉及到上述两种方法的调用。这个技巧是在后台使用惰性变量来解决的。可以请求延迟绑定变量而没有副作用；在封面下，作家和流被包裹着。这意味着从不直接调用 &lt;code&gt;response.getWriter()&lt;/code&gt; ,直到使用'out'或'html'完成某些输出为止。一旦使用这些变量之一完成写方法调用，则尝试使用'sout'进行写操作将导致 &lt;code&gt;IllegalStateException&lt;/code&gt; 。类似地，如果已经完成了对'sout'的write方法调用，那么任何对'out'或'html'的write方法调用都会导致 &lt;code&gt;IllegalStateException&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="2a67fc2a8f8f48c8963e6bc9c7ae44b94dceb6d8" translate="yes" xml:space="preserve">
          <source>As subclass of MetaClass, ProxyMetaClass manages calls from Groovy Objects to POJOs. It enriches MetaClass with the feature of making method invocations interceptable by an Interceptor. To this end, it acts as a decorator (decorator pattern) allowing to add or withdraw this feature at runtime. See groovy/lang/InterceptorTest.groovy for details.</source>
          <target state="translated">作为MetaClass的子类,ProxyMetaClass管理从Groovy对象到POJOs的调用。它丰富了MetaClass的功能,使方法调用可以被拦截器拦截。为此,它作为一个装饰器(装饰器模式),允许在运行时添加或撤销该功能。详情请参见 groovy/lang/InterceptorTest.groovy。</target>
        </trans-unit>
        <trans-unit id="5b2d2f926a6789b94e551ad89bc5e260c5e99772" translate="yes" xml:space="preserve">
          <source>As with the try-with-resources statement, if multiple exceptions are thrown the exception from the closure will be returned and the exception from closing will be added as a suppressed exception.</source>
          <target state="translated">与 try-with-resources 语句一样,如果抛出多个异常,将返回来自闭合的异常,并将闭合的异常作为抑制的异常添加。</target>
        </trans-unit>
        <trans-unit id="4e200f4208238bd977e7a3addaac97e6ab11786d" translate="yes" xml:space="preserve">
          <source>Ask the nodes to be registered</source>
          <target state="translated">要求对节点进行登记</target>
        </trans-unit>
        <trans-unit id="921eee5aa1fc39775ba4eea8a5233bc5232cb81e" translate="yes" xml:space="preserve">
          <source>AsmClassGenerator</source>
          <target state="translated">AsmClassGenerator</target>
        </trans-unit>
        <trans-unit id="01069e3629b24fc3d02bd0f97757dd77eb92662e" translate="yes" xml:space="preserve">
          <source>AsmDecompiler</source>
          <target state="translated">AsmDecompiler</target>
        </trans-unit>
        <trans-unit id="dd7f78aca7f63e87d033921c90bd6e27a6ae50d6" translate="yes" xml:space="preserve">
          <source>AssertionError.class</source>
          <target state="translated">AssertionError.class</target>
        </trans-unit>
        <trans-unit id="5729966da77859e1dfab9575ee7274db64bcf947" translate="yes" xml:space="preserve">
          <source>Asserts that the array of characters contains a given char</source>
          <target state="translated">断言字符数组包含一个给定的字符。</target>
        </trans-unit>
        <trans-unit id="88e7b5ad638bf379637fd371207c37f05252e3f1" translate="yes" xml:space="preserve">
          <source>Asserts that the array of characters has a given length</source>
          <target state="translated">断言字符数组有一个给定的长度。</target>
        </trans-unit>
        <trans-unit id="5eca372a9b35cfb618243246b1b319d1775c1342" translate="yes" xml:space="preserve">
          <source>Asserts that the array of ints contains a given int</source>
          <target state="translated">断言ints数组中包含了一个给定的int</target>
        </trans-unit>
        <trans-unit id="14d7de0b2e2e56c1adf008d88d2e449d927c0289" translate="yes" xml:space="preserve">
          <source>Asserts that the array of ints has a given length</source>
          <target state="translated">断言ints数组有一个给定的长度。</target>
        </trans-unit>
        <trans-unit id="7751a3b9485b15e61cf772e3ee8e4b9907186b9b" translate="yes" xml:space="preserve">
          <source>Asserts that the array of objects has a given length</source>
          <target state="translated">断言对象数组有一个给定的长度。</target>
        </trans-unit>
        <trans-unit id="4ff254bdfdbf26604e1f9739383783cd263ade94" translate="yes" xml:space="preserve">
          <source>Asserts that the arrays are equivalent and contain the same values</source>
          <target state="translated">申明这些数组是等价的,并且包含相同的值。</target>
        </trans-unit>
        <trans-unit id="5a180a510cdf3f0cb7af1a9dd8981130eb70ac1e" translate="yes" xml:space="preserve">
          <source>Asserts that the given code closure fails when it is evaluated</source>
          <target state="translated">断言给定的代码闭包在被评估时失败了</target>
        </trans-unit>
        <trans-unit id="1197f1622e698e5ce6794f602a979b803e173a8f" translate="yes" xml:space="preserve">
          <source>Asserts that the given code closure fails when it is evaluated and that a particular Exception type can be attributed to the cause.</source>
          <target state="translated">断言给定的代码闭包在评估时失败,并且可以将特定的Exception类型归结为原因。</target>
        </trans-unit>
        <trans-unit id="d7257b7b04b8a63c45d75ad7f7b4e76523a101be" translate="yes" xml:space="preserve">
          <source>Asserts that the given code closure fails when it is evaluated and that a particular Exception type can be attributed to the cause. The expected exception class is compared recursively with any nested exceptions using getCause() until either a match is found or no more nested exceptions exist.</source>
          <target state="translated">断言给定的代码闭包在评估时失败,并且可以将特定的Exception类型归结为原因。使用getCause()将预期的异常类与任何嵌套的异常进行递归比较,直到找到匹配的异常或不再存在嵌套的异常。</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
