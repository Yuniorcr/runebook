<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="zh-CN" datatype="htmlbody" original="enzyme">
    <body>
      <group id="enzyme">
        <trans-unit id="2032cdf17b8018da9f8cc49308ff18d8fc308475" translate="yes" xml:space="preserve">
          <source>&amp;copy; 2015 Airbnb, Inc.</source>
          <target state="translated">&amp;copy;2015 Airbnb，Inc.</target>
        </trans-unit>
        <trans-unit id="cadc5a9164aea9cfc91b89869b14ad15896f7640" translate="yes" xml:space="preserve">
          <source>(stable)</source>
          <target state="translated">(stable)</target>
        </trans-unit>
        <trans-unit id="dea338f658cd127bb84339a8fd24fd8a6d5f1c75" translate="yes" xml:space="preserve">
          <source>(work in progress)</source>
          <target state="translated">（工作正在进行中）</target>
        </trans-unit>
        <trans-unit id="7931517f2bed5ba697980abc193bc4576c1eb259" translate="yes" xml:space="preserve">
          <source>); wrapper.find('a').invoke('onClick')().then(() =&amp;gt; { // expect() });</source>
          <target state="translated">）; wrapper.find（'a'）。invoke（'onClick'）（）。then（（）=&amp;gt; {// Expect（）}）;</target>
        </trans-unit>
        <trans-unit id="d74a519f9c8d1785ce841389d36e6cad6f9ce5c8" translate="yes" xml:space="preserve">
          <source>); } } const wrapper = shallow(</source>
          <target state="translated">）; } const包装=浅（</target>
        </trans-unit>
        <trans-unit id="53d66e0d7660118af4f654aecb299d5535c3e001" translate="yes" xml:space="preserve">
          <source>.at()</source>
          <target state="translated">.at()</target>
        </trans-unit>
        <trans-unit id="0b34c104a2a9447cc032af561ae1a51fd5608fe8" translate="yes" xml:space="preserve">
          <source>.at(index) =&amp;gt; ReactWrapper</source>
          <target state="translated">.at（index）=&amp;gt; ReactWrapper</target>
        </trans-unit>
        <trans-unit id="c263257445e73f24b8cc5450ae7bf6a29f79807f" translate="yes" xml:space="preserve">
          <source>.at(index) =&amp;gt; ShallowWrapper</source>
          <target state="translated">.at（index）=&amp;gt;浅包装</target>
        </trans-unit>
        <trans-unit id="0f29c0f00260f9811b0f5d1099817b063224f845" translate="yes" xml:space="preserve">
          <source>.childAt()</source>
          <target state="translated">.childAt()</target>
        </trans-unit>
        <trans-unit id="cdb40a448c5ad608249d34dc266e0b9880f5936e" translate="yes" xml:space="preserve">
          <source>.childAt(index) =&amp;gt; ReactWrapper</source>
          <target state="translated">.childAt（index）=&amp;gt; ReactWrapper</target>
        </trans-unit>
        <trans-unit id="de3421722a83707ad020d15c7e1cbc982f6c6314" translate="yes" xml:space="preserve">
          <source>.childAt(index) =&amp;gt; ShallowWrapper</source>
          <target state="translated">.childAt（index）=&amp;gt;浅包装</target>
        </trans-unit>
        <trans-unit id="a786e420d44f025ee4ea716195aea605a3e3e331" translate="yes" xml:space="preserve">
          <source>.children()</source>
          <target state="translated">.children()</target>
        </trans-unit>
        <trans-unit id="91b0bee07af525b47fc7182dda3afeef124070cc" translate="yes" xml:space="preserve">
          <source>.children([selector]) =&amp;gt; ReactWrapper</source>
          <target state="translated">.children（[selector]）=&amp;gt; ReactWrapper</target>
        </trans-unit>
        <trans-unit id="61000711b862434c29bee3dd9b44ae6dd29fd626" translate="yes" xml:space="preserve">
          <source>.children([selector]) =&amp;gt; ShallowWrapper</source>
          <target state="translated">.children（[selector]）=&amp;gt;浅包装</target>
        </trans-unit>
        <trans-unit id="48611064085dc9936fb466d2efb9718789da5b0f" translate="yes" xml:space="preserve">
          <source>.closest()</source>
          <target state="translated">.closest()</target>
        </trans-unit>
        <trans-unit id="802dbbc09e4669a26120f854c6e2aad8ea625b00" translate="yes" xml:space="preserve">
          <source>.closest(selector) =&amp;gt; ReactWrapper</source>
          <target state="translated">.closest（selector）=&amp;gt; ReactWrapper</target>
        </trans-unit>
        <trans-unit id="92176522bee605c47e13923244a0618c7c69efa3" translate="yes" xml:space="preserve">
          <source>.closest(selector) =&amp;gt; ShallowWrapper</source>
          <target state="translated">.closest（selector）=&amp;gt;浅包装</target>
        </trans-unit>
        <trans-unit id="36aa70864077b7df29e3a8a46823a49e07c6ea6e" translate="yes" xml:space="preserve">
          <source>.contains()</source>
          <target state="translated">.contains()</target>
        </trans-unit>
        <trans-unit id="37e898b462aaec5e7cbe6f204df374e02e68e3ce" translate="yes" xml:space="preserve">
          <source>.contains(nodeOrNodes) =&amp;gt; Boolean</source>
          <target state="translated">.contains（nodeOrNodes）=&amp;gt;布尔值</target>
        </trans-unit>
        <trans-unit id="c4cfe77bfc469304d67354fad2d251b0f6f367c1" translate="yes" xml:space="preserve">
          <source>.containsAllMatchingElements()</source>
          <target state="translated">.containsAllMatchingElements()</target>
        </trans-unit>
        <trans-unit id="80304978dce6d2b1b4fa50a98513a0c50b8dfdbc" translate="yes" xml:space="preserve">
          <source>.containsAllMatchingElements(patternNodes) =&amp;gt; Boolean</source>
          <target state="translated">.containsAllMatchingElements（patternNodes）=&amp;gt;布尔值</target>
        </trans-unit>
        <trans-unit id="36c6f54f680386ac5b1505caec1b6b993ca6831b" translate="yes" xml:space="preserve">
          <source>.containsAnyMatchingElements()</source>
          <target state="translated">.containsAnyMatchingElements()</target>
        </trans-unit>
        <trans-unit id="eb111a4e7dd1e0174280b80cbf5319e13fe27a00" translate="yes" xml:space="preserve">
          <source>.containsAnyMatchingElements(patternNodes) =&amp;gt; Boolean</source>
          <target state="translated">.containsAnyMatchingElements（patternNodes）=&amp;gt;布尔值</target>
        </trans-unit>
        <trans-unit id="534feff6faf088563474620cea82f4aaea7e5289" translate="yes" xml:space="preserve">
          <source>.containsMatchingElement()</source>
          <target state="translated">.containsMatchingElement()</target>
        </trans-unit>
        <trans-unit id="5f8676c8f0e043646dbb88e91aeb0f82b8036131" translate="yes" xml:space="preserve">
          <source>.containsMatchingElement(patternNode) =&amp;gt; Boolean</source>
          <target state="translated">.containsMatchingElement（patternNode）=&amp;gt;布尔值</target>
        </trans-unit>
        <trans-unit id="5390b492c200f9bc9d8ca82a99cb8e8ee22173ac" translate="yes" xml:space="preserve">
          <source>.context()</source>
          <target state="translated">.context()</target>
        </trans-unit>
        <trans-unit id="1d4714c41ab23fa4661aeae5889745358a64538a" translate="yes" xml:space="preserve">
          <source>.context([key]) =&amp;gt; Any</source>
          <target state="translated">.context（[key]）=&amp;gt;任何</target>
        </trans-unit>
        <trans-unit id="45cd57a7a40b4bdf7697e22f5ac4e03e13e68bf3" translate="yes" xml:space="preserve">
          <source>.debug()</source>
          <target state="translated">.debug()</target>
        </trans-unit>
        <trans-unit id="2d1ea8e4d1a538c2a93c82d5cd08aa5963d02893" translate="yes" xml:space="preserve">
          <source>.debug([options]) =&amp;gt; String</source>
          <target state="translated">.debug（[options]）=&amp;gt;字符串</target>
        </trans-unit>
        <trans-unit id="dc533af2ffaf3e7082e18033dd4326061e252995" translate="yes" xml:space="preserve">
          <source>.detach()</source>
          <target state="translated">.detach()</target>
        </trans-unit>
        <trans-unit id="057ba754cd8b7b3865bd7cdb204389450df4bb44" translate="yes" xml:space="preserve">
          <source>.detach() =&amp;gt; void</source>
          <target state="translated">.detach（）=&amp;gt;无效</target>
        </trans-unit>
        <trans-unit id="ec19cef49c8347e22e2ebe30e5fcf46d38a4625d" translate="yes" xml:space="preserve">
          <source>.dive()</source>
          <target state="translated">.dive()</target>
        </trans-unit>
        <trans-unit id="86843d52501cb9ccf8a04ec087bb18bed269f684" translate="yes" xml:space="preserve">
          <source>.dive([options]) =&amp;gt; ShallowWrapper</source>
          <target state="translated">.dive（[options]）=&amp;gt;浅包装</target>
        </trans-unit>
        <trans-unit id="21f8e36738a2165e31b4ebb61a08953aa2c35fac" translate="yes" xml:space="preserve">
          <source>.equals()</source>
          <target state="translated">.equals()</target>
        </trans-unit>
        <trans-unit id="e02a0f57f0c635dc001657815d66d0eb539532a9" translate="yes" xml:space="preserve">
          <source>.equals(node) =&amp;gt; Boolean</source>
          <target state="translated">.equals（node）=&amp;gt;布尔值</target>
        </trans-unit>
        <trans-unit id="ca50fef1c86f80ecac1245e21788e4a5584ac738" translate="yes" xml:space="preserve">
          <source>.every()</source>
          <target state="translated">.every()</target>
        </trans-unit>
        <trans-unit id="4f2636aaa4ae31aa951517d315cf088fd24500a5" translate="yes" xml:space="preserve">
          <source>.every(selector) =&amp;gt; Boolean</source>
          <target state="translated">.every（selector）=&amp;gt;布尔值</target>
        </trans-unit>
        <trans-unit id="3ab1a3ec7be4299006dcdaac98b75236782ba572" translate="yes" xml:space="preserve">
          <source>.everyWhere()</source>
          <target state="translated">.everyWhere()</target>
        </trans-unit>
        <trans-unit id="7f83620423e5555bf3fb3819ce861bf7b824e8eb" translate="yes" xml:space="preserve">
          <source>.everyWhere(fn) =&amp;gt; Boolean</source>
          <target state="translated">.everyWhere（fn）=&amp;gt;布尔值</target>
        </trans-unit>
        <trans-unit id="fd80251f038b3e506519cba3204e2a5073109ce8" translate="yes" xml:space="preserve">
          <source>.exists()</source>
          <target state="translated">.exists()</target>
        </trans-unit>
        <trans-unit id="f84416a1f2a7ce452f7d0443c760082e3ed70a33" translate="yes" xml:space="preserve">
          <source>.exists([selector]) =&amp;gt; Boolean</source>
          <target state="translated">.exists（[selector]）=&amp;gt;布尔值</target>
        </trans-unit>
        <trans-unit id="0b55f75d20e84ea4218ae334a687431d8b584627" translate="yes" xml:space="preserve">
          <source>.filter()</source>
          <target state="translated">.filter()</target>
        </trans-unit>
        <trans-unit id="29faa2e721032dcd210cba4e24c12e6ce3a08301" translate="yes" xml:space="preserve">
          <source>.filter(selector) =&amp;gt; ReactWrapper</source>
          <target state="translated">.filter（selector）=&amp;gt; ReactWrapper</target>
        </trans-unit>
        <trans-unit id="8bef3a7e7f8bba1b235334765d5391d3b1a93843" translate="yes" xml:space="preserve">
          <source>.filter(selector) =&amp;gt; ShallowWrapper</source>
          <target state="translated">.filter（selector）=&amp;gt;浅包装</target>
        </trans-unit>
        <trans-unit id="0769a90c91e56a682799c8f50377f470b45f2ce6" translate="yes" xml:space="preserve">
          <source>.filterWhere()</source>
          <target state="translated">.filterWhere()</target>
        </trans-unit>
        <trans-unit id="f81fab64a06c696b861a96e443a7da0b316449ba" translate="yes" xml:space="preserve">
          <source>.filterWhere(fn) =&amp;gt; ReactWrapper</source>
          <target state="translated">.filterWhere（fn）=&amp;gt; ReactWrapper</target>
        </trans-unit>
        <trans-unit id="8fe3b7d79081909c3f3aa6e6bf925d8067338fc2" translate="yes" xml:space="preserve">
          <source>.filterWhere(fn) =&amp;gt; ShallowWrapper</source>
          <target state="translated">.filterWhere（fn）=&amp;gt;浅包装</target>
        </trans-unit>
        <trans-unit id="d25980948b24cf9ba73d9afbc5d63be60b6e77fb" translate="yes" xml:space="preserve">
          <source>.find()</source>
          <target state="translated">.find()</target>
        </trans-unit>
        <trans-unit id="02b22a88fba3ca639cda77a3738bfd5a083616be" translate="yes" xml:space="preserve">
          <source>.find(selector) =&amp;gt; ReactWrapper</source>
          <target state="translated">.find（selector）=&amp;gt; ReactWrapper</target>
        </trans-unit>
        <trans-unit id="b5b2cdeedbddb2b9e0dd339e704fdc15f7ee48b0" translate="yes" xml:space="preserve">
          <source>.find(selector) =&amp;gt; ShallowWrapper</source>
          <target state="translated">.find（selector）=&amp;gt;浅包装</target>
        </trans-unit>
        <trans-unit id="fe4cef07185b34ef5a1edd1f59f6bdc340e2f14d" translate="yes" xml:space="preserve">
          <source>.findWhere()</source>
          <target state="translated">.findWhere()</target>
        </trans-unit>
        <trans-unit id="4522f664ea70e96c04493b4c2421b6fbc341edff" translate="yes" xml:space="preserve">
          <source>.findWhere(fn) =&amp;gt; ReactWrapper</source>
          <target state="translated">.findWhere（fn）=&amp;gt; ReactWrapper</target>
        </trans-unit>
        <trans-unit id="f9361e3664c8d186281641bf5b33ac6968f699cd" translate="yes" xml:space="preserve">
          <source>.findWhere(fn) =&amp;gt; ShallowWrapper</source>
          <target state="translated">.findWhere（fn）=&amp;gt;浅包装</target>
        </trans-unit>
        <trans-unit id="3019bf6f4baaced1f2405ef293a2e70aa8e6b35f" translate="yes" xml:space="preserve">
          <source>.first()</source>
          <target state="translated">.first()</target>
        </trans-unit>
        <trans-unit id="504403670f4cfbe627bf49f986521d609bccc10d" translate="yes" xml:space="preserve">
          <source>.first() =&amp;gt; ReactWrapper</source>
          <target state="translated">.first（）=&amp;gt; ReactWrapper</target>
        </trans-unit>
        <trans-unit id="1266e12ca3fcbff49b9153936d1cbdd464b16583" translate="yes" xml:space="preserve">
          <source>.first() =&amp;gt; ShallowWrapper</source>
          <target state="translated">.first（）=&amp;gt; ShallowWrapper</target>
        </trans-unit>
        <trans-unit id="fe5a1f4be45a725a6f693d5215c88479571204be" translate="yes" xml:space="preserve">
          <source>.forEach()</source>
          <target state="translated">.forEach()</target>
        </trans-unit>
        <trans-unit id="816bb6531a6e51f14c34c08e89889d61404e4b1a" translate="yes" xml:space="preserve">
          <source>.forEach(fn) =&amp;gt; Self</source>
          <target state="translated">.forEach（fn）=&amp;gt;自我</target>
        </trans-unit>
        <trans-unit id="f8035b07e5bf0d30eb4314a6e83a9c9012930836" translate="yes" xml:space="preserve">
          <source>.get()</source>
          <target state="translated">.get()</target>
        </trans-unit>
        <trans-unit id="abf3e5898200ee797859cabf6eb8c6d5e3ca78e2" translate="yes" xml:space="preserve">
          <source>.get(index) =&amp;gt; ReactElement</source>
          <target state="translated">.get（index）=&amp;gt; ReactElement</target>
        </trans-unit>
        <trans-unit id="a826ca3897f1b51db136e6f06bac7bd2f2725c57" translate="yes" xml:space="preserve">
          <source>.getDOMNode()</source>
          <target state="translated">.getDOMNode()</target>
        </trans-unit>
        <trans-unit id="670587dc1da12bb542378b048260839f68e78055" translate="yes" xml:space="preserve">
          <source>.getDOMNode() =&amp;gt; DOMComponent</source>
          <target state="translated">.getDOMNode（）=&amp;gt; DOMComponent</target>
        </trans-unit>
        <trans-unit id="fa3c68d6722d39cbe280342bdac7c1374ec80ea6" translate="yes" xml:space="preserve">
          <source>.getElement()</source>
          <target state="translated">.getElement()</target>
        </trans-unit>
        <trans-unit id="a9277cf38fdd9903e0448bbaaccd49cdec485c25" translate="yes" xml:space="preserve">
          <source>.getElement() =&amp;gt; ReactElement</source>
          <target state="translated">.getElement（）=&amp;gt; ReactElement</target>
        </trans-unit>
        <trans-unit id="39c84e44774d70ee1ff406bb0d8d525a9bbbb168" translate="yes" xml:space="preserve">
          <source>.getElements()</source>
          <target state="translated">.getElements()</target>
        </trans-unit>
        <trans-unit id="2eb44e54e302031bd767cb041ac1892539521033" translate="yes" xml:space="preserve">
          <source>.getElements() =&amp;gt; Array&amp;lt;ReactElement&amp;gt;</source>
          <target state="translated">.getElements（）=&amp;gt; Array &amp;lt;ReactElement&amp;gt;</target>
        </trans-unit>
        <trans-unit id="e1e4aa6ee3239f436aba07c1b34245bd955bb721" translate="yes" xml:space="preserve">
          <source>.getWrappingComponent()</source>
          <target state="translated">.getWrappingComponent()</target>
        </trans-unit>
        <trans-unit id="91cd8c7a91da5e0badd42941b890ac37a25cca14" translate="yes" xml:space="preserve">
          <source>.getWrappingComponent() =&amp;gt; ReactWrapper</source>
          <target state="translated">.getWrappingComponent（）=&amp;gt; ReactWrapper</target>
        </trans-unit>
        <trans-unit id="83a4c345b5ced26ef736327504882247ed8e00ff" translate="yes" xml:space="preserve">
          <source>.getWrappingComponent() =&amp;gt; ShallowWrapper</source>
          <target state="translated">.getWrappingComponent（）=&amp;gt; ShallowWrapper</target>
        </trans-unit>
        <trans-unit id="96124e5fb1d7cbc90c498505fdd9504eeca52dc0" translate="yes" xml:space="preserve">
          <source>.hasClass()</source>
          <target state="translated">.hasClass()</target>
        </trans-unit>
        <trans-unit id="fce92fe27ebcd4f05f230d9f2ddf912b7e11fa47" translate="yes" xml:space="preserve">
          <source>.hasClass(className) =&amp;gt; Boolean</source>
          <target state="translated">.hasClass（className）=&amp;gt;布尔值</target>
        </trans-unit>
        <trans-unit id="69989229c5af2f1ca4fda8d2af39b3a0caf1b912" translate="yes" xml:space="preserve">
          <source>.hostNodes()</source>
          <target state="translated">.hostNodes()</target>
        </trans-unit>
        <trans-unit id="bcf96420ac4419075504f3bf23811b7ed71814d8" translate="yes" xml:space="preserve">
          <source>.hostNodes() =&amp;gt; ReactWrapper</source>
          <target state="translated">.hostNodes（）=&amp;gt; ReactWrapper</target>
        </trans-unit>
        <trans-unit id="8586889897289bf28f49342f8acd773dab787d87" translate="yes" xml:space="preserve">
          <source>.hostNodes() =&amp;gt; ShallowWrapper</source>
          <target state="translated">.hostNodes（）=&amp;gt;浅包装</target>
        </trans-unit>
        <trans-unit id="f8a162560934b258b9bf667f9ed261d5ab062168" translate="yes" xml:space="preserve">
          <source>.html()</source>
          <target state="translated">.html()</target>
        </trans-unit>
        <trans-unit id="383e56fa39edd2e88842e29cc73c446186ee713d" translate="yes" xml:space="preserve">
          <source>.html() =&amp;gt; String</source>
          <target state="translated">.html（）=&amp;gt;字符串</target>
        </trans-unit>
        <trans-unit id="5c1cae81e92716725038ef8ff005330a2be999cd" translate="yes" xml:space="preserve">
          <source>.instance()</source>
          <target state="translated">.instance()</target>
        </trans-unit>
        <trans-unit id="5b32cce58776e6ca9e5244d5c58a2d5f7b5e57e7" translate="yes" xml:space="preserve">
          <source>.instance() =&amp;gt; ReactComponent</source>
          <target state="translated">.instance（）=&amp;gt; ReactComponent</target>
        </trans-unit>
        <trans-unit id="40fc0a74dacf15f75cb9f89cf88ae4d893036b67" translate="yes" xml:space="preserve">
          <source>.invoke()</source>
          <target state="translated">.invoke()</target>
        </trans-unit>
        <trans-unit id="44b0d7d0b56149929fb968729a83b4a59ab9b54d" translate="yes" xml:space="preserve">
          <source>.invoke(invokePropName)(...args) =&amp;gt; Any</source>
          <target state="translated">.invoke（invokePropName）（... args）=&amp;gt;任何</target>
        </trans-unit>
        <trans-unit id="9c88f00c33b931df9c0dadce4b821d223b509078" translate="yes" xml:space="preserve">
          <source>.invoke(propName)(...args) =&amp;gt; Any</source>
          <target state="translated">.invoke（propName）（... args）=&amp;gt;任何</target>
        </trans-unit>
        <trans-unit id="efa9cbe5b501feebb73d3f581c22f3f9623d6901" translate="yes" xml:space="preserve">
          <source>.is()</source>
          <target state="translated">.is()</target>
        </trans-unit>
        <trans-unit id="98ea7cd832986b42fd7ed641390f1ef7429d7ff5" translate="yes" xml:space="preserve">
          <source>.is(selector) =&amp;gt; Boolean</source>
          <target state="translated">.is（选择器）=&amp;gt;布尔值</target>
        </trans-unit>
        <trans-unit id="b13bdfefb4929bf201197f3fe6779be602e64f6f" translate="yes" xml:space="preserve">
          <source>.isEmpty()</source>
          <target state="translated">.isEmpty()</target>
        </trans-unit>
        <trans-unit id="9d83c5885a258aa1fd96fa45e7ddcd047d2cd6c0" translate="yes" xml:space="preserve">
          <source>.isEmpty() =&amp;gt; Boolean</source>
          <target state="translated">.isEmpty（）=&amp;gt;布尔值</target>
        </trans-unit>
        <trans-unit id="227fda682c609959f3a8e305093428ff300cc889" translate="yes" xml:space="preserve">
          <source>.isEmptyRender()</source>
          <target state="translated">.isEmptyRender()</target>
        </trans-unit>
        <trans-unit id="12a17da79b6466b01d697e5abf7fcb73f0b4ff6d" translate="yes" xml:space="preserve">
          <source>.isEmptyRender() =&amp;gt; Boolean</source>
          <target state="translated">.isEmptyRender（）=&amp;gt;布尔值</target>
        </trans-unit>
        <trans-unit id="0c1c680b54198b881b9b79fe1154835d63194e2b" translate="yes" xml:space="preserve">
          <source>.key()</source>
          <target state="translated">.key()</target>
        </trans-unit>
        <trans-unit id="7238d01202ba3a2f08c1553efc4c6e14b957efe4" translate="yes" xml:space="preserve">
          <source>.key() =&amp;gt; String</source>
          <target state="translated">.key（）=&amp;gt;字符串</target>
        </trans-unit>
        <trans-unit id="4e4ab3cdd4f7b5e0d93df5067004e69bdd8ee5e6" translate="yes" xml:space="preserve">
          <source>.last()</source>
          <target state="translated">.last()</target>
        </trans-unit>
        <trans-unit id="2c1c0f2b70ed563c9efc8e9d0349ce614101f56f" translate="yes" xml:space="preserve">
          <source>.last() =&amp;gt; ReactWrapper</source>
          <target state="translated">.last（）=&amp;gt; ReactWrapper</target>
        </trans-unit>
        <trans-unit id="deb51db40536307a023e05a60dabd9c8c8402f59" translate="yes" xml:space="preserve">
          <source>.last() =&amp;gt; ShallowWrapper</source>
          <target state="translated">.last（）=&amp;gt; ShallowWrapper</target>
        </trans-unit>
        <trans-unit id="3185d17866a519bedb219fdba7b49006d6c86ef6" translate="yes" xml:space="preserve">
          <source>.map()</source>
          <target state="translated">.map()</target>
        </trans-unit>
        <trans-unit id="5b523bc1eef378558ad363f467bffe2184386a65" translate="yes" xml:space="preserve">
          <source>.map(fn) =&amp;gt; Array&amp;lt;Any&amp;gt;</source>
          <target state="translated">.map（fn）=&amp;gt;数组&amp;lt;任何&amp;gt;</target>
        </trans-unit>
        <trans-unit id="83aa89b3aa70798bcaf77b9d08564b9cbed0bce0" translate="yes" xml:space="preserve">
          <source>.matchesElement()</source>
          <target state="translated">.matchesElement()</target>
        </trans-unit>
        <trans-unit id="fec3c1d0b642f316fb11adfd7308990d1aca275c" translate="yes" xml:space="preserve">
          <source>.matchesElement(patternNode) =&amp;gt; Boolean</source>
          <target state="translated">.matchesElement（patternNode）=&amp;gt;布尔值</target>
        </trans-unit>
        <trans-unit id="8c90cb77e8dbf9f300dc0f8f7482b18a4d3bb6ee" translate="yes" xml:space="preserve">
          <source>.mount()</source>
          <target state="translated">.mount()</target>
        </trans-unit>
        <trans-unit id="6f375214d6aa98e8643f30818c02a8340fe5c2e9" translate="yes" xml:space="preserve">
          <source>.mount() =&amp;gt; Self</source>
          <target state="translated">.mount（）=&amp;gt;自我</target>
        </trans-unit>
        <trans-unit id="4fc14749d33e7880cd7245d6a5aad8f3db40214b" translate="yes" xml:space="preserve">
          <source>.name()</source>
          <target state="translated">.name()</target>
        </trans-unit>
        <trans-unit id="398669416f081dfe7e17e4a60f707220f932cb66" translate="yes" xml:space="preserve">
          <source>.name() =&amp;gt; String|null</source>
          <target state="translated">.name（）=&amp;gt;字符串|空</target>
        </trans-unit>
        <trans-unit id="31bffc417e9e69c3c4257c87226e3d355237fc02" translate="yes" xml:space="preserve">
          <source>.not()</source>
          <target state="translated">.not()</target>
        </trans-unit>
        <trans-unit id="09d056f13f599eb2cb50c6e31bdb360e84ada0aa" translate="yes" xml:space="preserve">
          <source>.not(selector) =&amp;gt; ReactWrapper</source>
          <target state="translated">.not（selector）=&amp;gt; ReactWrapper</target>
        </trans-unit>
        <trans-unit id="296ca420d1340afa5c6c1110333e6bc779ab1799" translate="yes" xml:space="preserve">
          <source>.not(selector) =&amp;gt; ShallowWrapper</source>
          <target state="translated">.not（选择器）=&amp;gt; ShallowWrapper</target>
        </trans-unit>
        <trans-unit id="9a6644c290f123044e7fc356a4a38b24950a4b84" translate="yes" xml:space="preserve">
          <source>.parent()</source>
          <target state="translated">.parent()</target>
        </trans-unit>
        <trans-unit id="157c10297175a91760c6698dfbbfcef62d8d8509" translate="yes" xml:space="preserve">
          <source>.parent() =&amp;gt; ReactWrapper</source>
          <target state="translated">.parent（）=&amp;gt; ReactWrapper</target>
        </trans-unit>
        <trans-unit id="3388f58890019e4fbf073601b1f39120d2659c0c" translate="yes" xml:space="preserve">
          <source>.parent() =&amp;gt; ShallowWrapper</source>
          <target state="translated">.parent（）=&amp;gt; ShallowWrapper</target>
        </trans-unit>
        <trans-unit id="b0f343cf54dddc7e306aa70004c350ac5ab3d359" translate="yes" xml:space="preserve">
          <source>.parents()</source>
          <target state="translated">.parents()</target>
        </trans-unit>
        <trans-unit id="a7a23f28f538d184d310aa4ad2bce84c9b521f6f" translate="yes" xml:space="preserve">
          <source>.parents([selector]) =&amp;gt; ReactWrapper</source>
          <target state="translated">.parents（[selector]）=&amp;gt; ReactWrapper</target>
        </trans-unit>
        <trans-unit id="affcfae973ca424b560910186f15acc2debd8124" translate="yes" xml:space="preserve">
          <source>.parents([selector]) =&amp;gt; ShallowWrapper</source>
          <target state="translated">.parents（[selector]）=&amp;gt; ShallowWrapper</target>
        </trans-unit>
        <trans-unit id="ce38a626c733ea5a44689d8d9d6e57d62e5e3143" translate="yes" xml:space="preserve">
          <source>.prop()</source>
          <target state="translated">.prop()</target>
        </trans-unit>
        <trans-unit id="bd88d06ae2ed8f126cb099b54da1e1fa783a6bfc" translate="yes" xml:space="preserve">
          <source>.prop(key) =&amp;gt; Any</source>
          <target state="translated">.prop（key）=&amp;gt;任何</target>
        </trans-unit>
        <trans-unit id="2754e5782485dadee6f6cdc682297c0245c652dd" translate="yes" xml:space="preserve">
          <source>.props()</source>
          <target state="translated">.props()</target>
        </trans-unit>
        <trans-unit id="8f7e831ebbc9064e895998b5e76d957d8bfd1910" translate="yes" xml:space="preserve">
          <source>.props() =&amp;gt; Object</source>
          <target state="translated">.props（）=&amp;gt;对象</target>
        </trans-unit>
        <trans-unit id="d0f4b4460b8db067171b431083b80dc1bb7de9b4" translate="yes" xml:space="preserve">
          <source>.reduce()</source>
          <target state="translated">.reduce()</target>
        </trans-unit>
        <trans-unit id="d79683073d4de7675b25a146fa5ab15d54805013" translate="yes" xml:space="preserve">
          <source>.reduce(fn[, initialValue]) =&amp;gt; Any</source>
          <target state="translated">.reduce（fn [，initialValue]）=&amp;gt;任何</target>
        </trans-unit>
        <trans-unit id="a98dabe2456633c8c3140e65a41fab916ad295f1" translate="yes" xml:space="preserve">
          <source>.reduceRight()</source>
          <target state="translated">.reduceRight()</target>
        </trans-unit>
        <trans-unit id="b1621478e672d323f9dc11df5468705525e6b02f" translate="yes" xml:space="preserve">
          <source>.reduceRight(fn[, initialValue]) =&amp;gt; Any</source>
          <target state="translated">.reduceRight（fn [，initialValue]）=&amp;gt;任意</target>
        </trans-unit>
        <trans-unit id="08bc4d97c3fd194ed0ec7fb4de15a2af94513c87" translate="yes" xml:space="preserve">
          <source>.ref()</source>
          <target state="translated">.ref()</target>
        </trans-unit>
        <trans-unit id="e7acd1711a9c4243c13f81f3fe3f2b7ba73e1856" translate="yes" xml:space="preserve">
          <source>.ref(refName) =&amp;gt; ReactComponent | HTMLElement</source>
          <target state="translated">.ref（refName）=&amp;gt; ReactComponent | HTMLElement</target>
        </trans-unit>
        <trans-unit id="1a388604a7dd5ecab37a223d2c0246def5b8740b" translate="yes" xml:space="preserve">
          <source>.render()</source>
          <target state="translated">.render()</target>
        </trans-unit>
        <trans-unit id="23ba699ed33caf422f0c7e0e965b8f673d6ec074" translate="yes" xml:space="preserve">
          <source>.render() =&amp;gt; CheerioWrapper</source>
          <target state="translated">.render（）=&amp;gt; CheerioWrapper</target>
        </trans-unit>
        <trans-unit id="78980199f2448e570e8b61a439a689bbca20beaa" translate="yes" xml:space="preserve">
          <source>.renderProp()</source>
          <target state="translated">.renderProp()</target>
        </trans-unit>
        <trans-unit id="f1eda17f39fa1e19903d68c3a9466ff8347e10cd" translate="yes" xml:space="preserve">
          <source>.renderProp(propName)(...args) =&amp;gt; ReactWrapper</source>
          <target state="translated">.renderProp（propName）（... args）=&amp;gt; ReactWrapper</target>
        </trans-unit>
        <trans-unit id="c216e53c7e5c23d915000858905661fc723b33b5" translate="yes" xml:space="preserve">
          <source>.renderProp(propName)(...args) =&amp;gt; ShallowWrapper</source>
          <target state="translated">.renderProp（propName）（... args）=&amp;gt;浅包装</target>
        </trans-unit>
        <trans-unit id="118f901db477623cab89e5d732b1e96b850f79f4" translate="yes" xml:space="preserve">
          <source>.setContext()</source>
          <target state="translated">.setContext()</target>
        </trans-unit>
        <trans-unit id="0f68594a4f9e414a580a9f8791e81173ab0260e8" translate="yes" xml:space="preserve">
          <source>.setContext(context) =&amp;gt; Self</source>
          <target state="translated">.setContext（context）=&amp;gt;自我</target>
        </trans-unit>
        <trans-unit id="a16f7316d578f41213bb2b50c4143a7b4e924706" translate="yes" xml:space="preserve">
          <source>.setProps()</source>
          <target state="translated">.setProps()</target>
        </trans-unit>
        <trans-unit id="ec172a403f07851eaf439bb2959a3181071ed93f" translate="yes" xml:space="preserve">
          <source>.setProps(nextProps[, callback]) =&amp;gt; Self</source>
          <target state="translated">.setProps（nextProps [，callback]）=&amp;gt;自我</target>
        </trans-unit>
        <trans-unit id="f38e67f9c6b8ce2a71b0ad56d1cf4e00852ab269" translate="yes" xml:space="preserve">
          <source>.setState()</source>
          <target state="translated">.setState()</target>
        </trans-unit>
        <trans-unit id="c6f0d961b61e15edbe7d4711a89e4de36e69ea7c" translate="yes" xml:space="preserve">
          <source>.setState(nextState[, callback]) =&amp;gt; Self</source>
          <target state="translated">.setState（nextState [，callback]）=&amp;gt;自我</target>
        </trans-unit>
        <trans-unit id="0d16ffaaa4298d300567e9d0fcd258630879ff12" translate="yes" xml:space="preserve">
          <source>.shallow()</source>
          <target state="translated">.shallow()</target>
        </trans-unit>
        <trans-unit id="04f8eea8f4e957826ff131c127f89d2a7b11d903" translate="yes" xml:space="preserve">
          <source>.shallow([options]) =&amp;gt; ShallowWrapper</source>
          <target state="translated">.shallow（[options]）=&amp;gt; ShallowWrapper</target>
        </trans-unit>
        <trans-unit id="ef687395a5a18042048d3f16eb111db9b0b67d03" translate="yes" xml:space="preserve">
          <source>.simulate()</source>
          <target state="translated">.simulate()</target>
        </trans-unit>
        <trans-unit id="bc132935223f8667ec7b2eb415d11fb3e011e485" translate="yes" xml:space="preserve">
          <source>.simulate(event[, ...args]) =&amp;gt; Self</source>
          <target state="translated">.simulate（event [，... args]）=&amp;gt;自我</target>
        </trans-unit>
        <trans-unit id="d2b5ce446417baaf5d35ec54daef1adc93b4673d" translate="yes" xml:space="preserve">
          <source>.simulate(event[, mock]) =&amp;gt; Self</source>
          <target state="translated">.simulate（event [，模拟]）=&amp;gt;自我</target>
        </trans-unit>
        <trans-unit id="6005ec4af456bd12d9dfe9c089bbd4a731800a82" translate="yes" xml:space="preserve">
          <source>.simulateError()</source>
          <target state="translated">.simulateError()</target>
        </trans-unit>
        <trans-unit id="ae43b3030032e64a12b11112a7d6ffdfbfe50a69" translate="yes" xml:space="preserve">
          <source>.simulateError(error) =&amp;gt; Self</source>
          <target state="translated">.simulateError（错误）=&amp;gt;自我</target>
        </trans-unit>
        <trans-unit id="6be3698ab08268d63e0d30c335775d92e26f8a1f" translate="yes" xml:space="preserve">
          <source>.slice()</source>
          <target state="translated">.slice()</target>
        </trans-unit>
        <trans-unit id="27bcc7ab9f4eef5bc0d4e720e26ecfa0f35a7f06" translate="yes" xml:space="preserve">
          <source>.slice([begin[, end]]) =&amp;gt; ReactWrapper</source>
          <target state="translated">.slice（[begin [，end]]）=&amp;gt; ReactWrapper</target>
        </trans-unit>
        <trans-unit id="795077cf5e5e39a93e2da187dd91e6aa21847a4c" translate="yes" xml:space="preserve">
          <source>.slice([begin[, end]]) =&amp;gt; ShallowWrapper</source>
          <target state="translated">.slice（[begin [，end]]）=&amp;gt; ShallowWrapper</target>
        </trans-unit>
        <trans-unit id="a406c6b94f2b02818d5564224a8e92c8e6769bef" translate="yes" xml:space="preserve">
          <source>.some()</source>
          <target state="translated">.some()</target>
        </trans-unit>
        <trans-unit id="4d1e9a7d650c3a971b8ce20309b371d8ed6e80d3" translate="yes" xml:space="preserve">
          <source>.some(selector) =&amp;gt; Boolean</source>
          <target state="translated">.some（selector）=&amp;gt;布尔值</target>
        </trans-unit>
        <trans-unit id="db91b0a5466b23ca1703fc6b3dfc2f9efd7815ab" translate="yes" xml:space="preserve">
          <source>.someWhere()</source>
          <target state="translated">.someWhere()</target>
        </trans-unit>
        <trans-unit id="7021962ac940244958d17872c43766529128d9f5" translate="yes" xml:space="preserve">
          <source>.someWhere(fn) =&amp;gt; Boolean</source>
          <target state="translated">.someWhere（fn）=&amp;gt;布尔值</target>
        </trans-unit>
        <trans-unit id="d7f5f58a8b1d480731118e6a8c59f39a5b784602" translate="yes" xml:space="preserve">
          <source>.state()</source>
          <target state="translated">.state()</target>
        </trans-unit>
        <trans-unit id="b0ee6903c2b704f6ed99f2b8821786ca1ec7ecd9" translate="yes" xml:space="preserve">
          <source>.state([key]) =&amp;gt; Any</source>
          <target state="translated">.state（[key]）=&amp;gt;任何</target>
        </trans-unit>
        <trans-unit id="8ec03b5ff19bd2d8ace9844302870026c8848ddf" translate="yes" xml:space="preserve">
          <source>.tap()</source>
          <target state="translated">.tap()</target>
        </trans-unit>
        <trans-unit id="04b7081cd8a623b41cb7527c545d3960d7c3cfdc" translate="yes" xml:space="preserve">
          <source>.tap(intercepter) =&amp;gt; Self</source>
          <target state="translated">.tap（拦截器）=&amp;gt;自我</target>
        </trans-unit>
        <trans-unit id="a6e2a5dac461b86fb479ea7d0eac6d40bb267b05" translate="yes" xml:space="preserve">
          <source>.text()</source>
          <target state="translated">.text()</target>
        </trans-unit>
        <trans-unit id="d36646b5bf94f76416b5820ad0940c22212f7a2e" translate="yes" xml:space="preserve">
          <source>.text() =&amp;gt; String</source>
          <target state="translated">.text（）=&amp;gt;字符串</target>
        </trans-unit>
        <trans-unit id="f5fb766a24e15073c66504e0601b39744e6a61ce" translate="yes" xml:space="preserve">
          <source>.type()</source>
          <target state="translated">.type()</target>
        </trans-unit>
        <trans-unit id="0b8d2c430807f68da74898f1f4cfa44484d47fc5" translate="yes" xml:space="preserve">
          <source>.type() =&amp;gt; String | Function | null</source>
          <target state="translated">.type（）=&amp;gt;字符串| 功能介绍 空值</target>
        </trans-unit>
        <trans-unit id="32ed84e20fddb945f562e9c1fe8c9794b1468d6f" translate="yes" xml:space="preserve">
          <source>.unmount()</source>
          <target state="translated">.unmount()</target>
        </trans-unit>
        <trans-unit id="a258de79d8d9d49c02609976ddcc2228895be173" translate="yes" xml:space="preserve">
          <source>.unmount() =&amp;gt; Self</source>
          <target state="translated">.unmount（）=&amp;gt;自我</target>
        </trans-unit>
        <trans-unit id="586e51964c7545b834914728b8253d36ec546cb3" translate="yes" xml:space="preserve">
          <source>.update()</source>
          <target state="translated">.update()</target>
        </trans-unit>
        <trans-unit id="2856b9d7b79be0c2de2cdd07199f94e619fb5a67" translate="yes" xml:space="preserve">
          <source>.update() =&amp;gt; Self</source>
          <target state="translated">.update（）=&amp;gt;自我</target>
        </trans-unit>
        <trans-unit id="ee8a90ef4fe3af3dd1dd1ea4967de66ce9d5abcc" translate="yes" xml:space="preserve">
          <source>1. A Valid CSS Selector</source>
          <target state="translated">1.一个有效的CSS选择器</target>
        </trans-unit>
        <trans-unit id="16cc99d3aeb4219b6b9e231273a866610cdd72b9" translate="yes" xml:space="preserve">
          <source>2. A React Component Constructor</source>
          <target state="translated">2.一个React组件构造函数</target>
        </trans-unit>
        <trans-unit id="2a41214233a248a59f5e53c8b00f3134c3359c56" translate="yes" xml:space="preserve">
          <source>3. A React Component&amp;rsquo;s displayName</source>
          <target state="translated">3. React组件的displayName</target>
        </trans-unit>
        <trans-unit id="93c810769c6beb69d94c8f5bb36123fc05c7bf4b" translate="yes" xml:space="preserve">
          <source>3rd Party Adapters</source>
          <target state="translated">第三方适配器</target>
        </trans-unit>
        <trans-unit id="65240fc1a8746cd417ff1070cb3328300500aa5e" translate="yes" xml:space="preserve">
          <source>4. Object Property Selector</source>
          <target state="translated">4.对象属性选择器</target>
        </trans-unit>
        <trans-unit id="2811c42d39d2139383e3b6c619e111ba4f94f664" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;at&quot;&gt;&lt;code&gt;.at(index) =&amp;gt; ReactWrapper&lt;/code&gt;&lt;/a&gt; - retrieve a wrapper node by index</source>
          <target state="translated">&lt;a href=&quot;at&quot;&gt; &lt;code&gt;.at(index) =&amp;gt; ReactWrapper&lt;/code&gt; &lt;/a&gt;通过索引检索包装器节点</target>
        </trans-unit>
        <trans-unit id="97d33cb61e97fa7293d2efe426189962f015888a" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;at&quot;&gt;&lt;code&gt;.at(index) =&amp;gt; ReactWrapper&lt;/code&gt;&lt;/a&gt; - retrieve any wrapper node</source>
          <target state="translated">&lt;a href=&quot;at&quot;&gt; &lt;code&gt;.at(index) =&amp;gt; ReactWrapper&lt;/code&gt; &lt;/a&gt;检索任何包装器节点</target>
        </trans-unit>
        <trans-unit id="f055a7f21c03264d3d09b4ed70eab2c6ca410dab" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;at&quot;&gt;&lt;code&gt;.at(index) =&amp;gt; ReactWrapper&lt;/code&gt;&lt;/a&gt; - same, but returns the React node in a single-node wrapper.</source>
          <target state="translated">&lt;a href=&quot;at&quot;&gt; &lt;code&gt;.at(index) =&amp;gt; ReactWrapper&lt;/code&gt; &lt;/a&gt;相同，但是在单节点包装器中返回React节点。</target>
        </trans-unit>
        <trans-unit id="ea85b86cc9dabebc9cd18bb816a7486eae910ca8" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;at&quot;&gt;&lt;code&gt;.at(index) =&amp;gt; ShallowWrapper&lt;/code&gt;&lt;/a&gt; - retrieve a wrapper node by index</source>
          <target state="translated">&lt;a href=&quot;at&quot;&gt; &lt;code&gt;.at(index) =&amp;gt; ShallowWrapper&lt;/code&gt; &lt;/a&gt;通过索引检索包装节点</target>
        </trans-unit>
        <trans-unit id="6cb2a53541705f018753c33c49a7b3d9d60eb9e3" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;at&quot;&gt;&lt;code&gt;.at(index) =&amp;gt; ShallowWrapper&lt;/code&gt;&lt;/a&gt; - retrieve any wrapper node</source>
          <target state="translated">&lt;a href=&quot;at&quot;&gt; &lt;code&gt;.at(index) =&amp;gt; ShallowWrapper&lt;/code&gt; &lt;/a&gt;检索任何包装器节点</target>
        </trans-unit>
        <trans-unit id="e0a229af785f3d2f31cb235f6d4e4c646e64c584" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;at&quot;&gt;&lt;code&gt;.at(index) =&amp;gt; ShallowWrapper&lt;/code&gt;&lt;/a&gt; - same, but returns the React node in a single-node wrapper.</source>
          <target state="translated">&lt;a href=&quot;at&quot;&gt; &lt;code&gt;.at(index) =&amp;gt; ShallowWrapper&lt;/code&gt; &lt;/a&gt;相同，但是在单节点包装器中返回React节点。</target>
        </trans-unit>
        <trans-unit id="c098b77005a58c62d20e9b80e78b8a86bf083119" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;containsallmatchingelements&quot;&gt;&lt;code&gt;.containsAllMatchingElements() =&amp;gt; ReactWrapper&lt;/code&gt;&lt;/a&gt; - must match all nodes in patternNodes</source>
          <target state="translated">&lt;a href=&quot;containsallmatchingelements&quot;&gt; &lt;code&gt;.containsAllMatchingElements() =&amp;gt; ReactWrapper&lt;/code&gt; &lt;/a&gt;必须匹配 patternNodes中的所有节点</target>
        </trans-unit>
        <trans-unit id="b90900c070bc136bb30b1bab9ca6afe269398d8c" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;containsallmatchingelements&quot;&gt;&lt;code&gt;.containsAllMatchingElements() =&amp;gt; ShallowWrapper&lt;/code&gt;&lt;/a&gt; - must match all nodes in patternNodes</source>
          <target state="translated">&lt;a href=&quot;containsallmatchingelements&quot;&gt; &lt;code&gt;.containsAllMatchingElements() =&amp;gt; ShallowWrapper&lt;/code&gt; &lt;/a&gt;必须与 patternNodes中的所有节点匹配</target>
        </trans-unit>
        <trans-unit id="57143c41e7ec9831c361364cc352c636ec1569d6" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;containsanymatchingelements&quot;&gt;&lt;code&gt;.containsAnyMatchingElements() =&amp;gt; ReactWrapper&lt;/code&gt;&lt;/a&gt; - must match at least one in patternNodes</source>
          <target state="translated">&lt;a href=&quot;containsanymatchingelements&quot;&gt; &lt;code&gt;.containsAnyMatchingElements() =&amp;gt; ReactWrapper&lt;/code&gt; &lt;/a&gt;必须与 patternNodes中的至少一个匹配</target>
        </trans-unit>
        <trans-unit id="21f87e6f4a073e8abcaf89fa5a7ecaf30bffe817" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;containsanymatchingelements&quot;&gt;&lt;code&gt;.containsAnyMatchingElements() =&amp;gt; ShallowWrapper&lt;/code&gt;&lt;/a&gt; - must match at least one in patternNodes</source>
          <target state="translated">&lt;a href=&quot;containsanymatchingelements&quot;&gt; &lt;code&gt;.containsAnyMatchingElements() =&amp;gt; ShallowWrapper&lt;/code&gt; &lt;/a&gt;必须与 patternNodes中的至少一个匹配</target>
        </trans-unit>
        <trans-unit id="e405a63e31346faed48cc03d4275a1fb9df2fbe9" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;containsmatchingelement&quot;&gt;&lt;code&gt;.containsMatchingElement() =&amp;gt; ReactWrapper&lt;/code&gt;&lt;/a&gt; - rules for matching whole wrapper</source>
          <target state="translated">&lt;a href=&quot;containsmatchingelement&quot;&gt; &lt;code&gt;.containsMatchingElement() =&amp;gt; ReactWrapper&lt;/code&gt; &lt;/a&gt;用于匹配整个包装器的规则</target>
        </trans-unit>
        <trans-unit id="82107449427e29a570ef58fd9025741f5b3b80ca" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;containsmatchingelement&quot;&gt;&lt;code&gt;.containsMatchingElement() =&amp;gt; ReactWrapper&lt;/code&gt;&lt;/a&gt; - searches all nodes in the wrapper, and searches their entire depth</source>
          <target state="translated">&lt;a href=&quot;containsmatchingelement&quot;&gt; &lt;code&gt;.containsMatchingElement() =&amp;gt; ReactWrapper&lt;/code&gt; &lt;/a&gt;搜索包装器中的所有节点，并搜索其整个深度</target>
        </trans-unit>
        <trans-unit id="ac5471c9df08f4ba7d05b00faac756734698f6a9" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;containsmatchingelement&quot;&gt;&lt;code&gt;.containsMatchingElement() =&amp;gt; ShallowWrapper&lt;/code&gt;&lt;/a&gt; - rules for matching whole wrapper</source>
          <target state="translated">&lt;a href=&quot;containsmatchingelement&quot;&gt; &lt;code&gt;.containsMatchingElement() =&amp;gt; ShallowWrapper&lt;/code&gt; &lt;/a&gt;用于匹配整个包装器的规则</target>
        </trans-unit>
        <trans-unit id="2fa63d229bade8fedd2767d09578d817030d0f69" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;containsmatchingelement&quot;&gt;&lt;code&gt;.containsMatchingElement() =&amp;gt; ShallowWrapper&lt;/code&gt;&lt;/a&gt; - searches all nodes in the wrapper, and searches their entire depth</source>
          <target state="translated">&lt;a href=&quot;containsmatchingelement&quot;&gt; &lt;code&gt;.containsMatchingElement() =&amp;gt; ShallowWrapper&lt;/code&gt; &lt;/a&gt;搜索包装器中的所有节点，并搜索其整个深度</target>
        </trans-unit>
        <trans-unit id="8bd3e5211fe400842292b6882c53e41f80e1ac2d" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;first&quot;&gt;&lt;code&gt;.first() =&amp;gt; ReactWrapper&lt;/code&gt;&lt;/a&gt; - same as at(0)</source>
          <target state="translated">&lt;a href=&quot;first&quot;&gt; &lt;code&gt;.first() =&amp;gt; ReactWrapper&lt;/code&gt; &lt;/a&gt;与at（0）相同</target>
        </trans-unit>
        <trans-unit id="a502bb38d5ef3203f1a4af58d72b938822aaebb6" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;first&quot;&gt;&lt;code&gt;.first() =&amp;gt; ShallowWrapper&lt;/code&gt;&lt;/a&gt; - same as at(0)</source>
          <target state="translated">&lt;a href=&quot;first&quot;&gt; &lt;code&gt;.first() =&amp;gt; ShallowWrapper&lt;/code&gt; &lt;/a&gt;与at（0）相同</target>
        </trans-unit>
        <trans-unit id="f551e8f0dd857a7874e38ab851f40663dfde9e3e" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;get&quot;&gt;&lt;code&gt;.get(index) =&amp;gt; ReactElement&lt;/code&gt;&lt;/a&gt; - same, but returns the React node itself, with no wrapper.</source>
          <target state="translated">&lt;a href=&quot;get&quot;&gt; &lt;code&gt;.get(index) =&amp;gt; ReactElement&lt;/code&gt; &lt;/a&gt;相同，但是返回React节点本身，没有包装。</target>
        </trans-unit>
        <trans-unit id="edf02a111175028c4817932702793334973423cb" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://github.com/FormidableLabs/enzyme-matchers/tree/master/packages/jasmine-enzyme&quot;&gt;&lt;code&gt;jasmine-enzyme&lt;/code&gt;&lt;/a&gt; with Jasmine.</source>
          <target state="translated">&lt;a href=&quot;https://github.com/FormidableLabs/enzyme-matchers/tree/master/packages/jasmine-enzyme&quot;&gt; &lt;code&gt;jasmine-enzyme&lt;/code&gt; &lt;/a&gt;与茉莉花。</target>
        </trans-unit>
        <trans-unit id="f0d88e0aae00969587db2115975c3185ef4e01a6" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://github.com/FormidableLabs/enzyme-matchers/tree/master/packages/jest-enzyme&quot;&gt;&lt;code&gt;jest-enzyme&lt;/code&gt;&lt;/a&gt; with Jest.</source>
          <target state="translated">&lt;a href=&quot;https://github.com/FormidableLabs/enzyme-matchers/tree/master/packages/jest-enzyme&quot;&gt; &lt;code&gt;jest-enzyme&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="507e02a6ff283804bde03960448e32f3957d56f7" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://github.com/PsychoLlama/expect-enzyme&quot;&gt;&lt;code&gt;expect-enzyme&lt;/code&gt;&lt;/a&gt; for expect.</source>
          <target state="translated">&lt;a href=&quot;https://github.com/PsychoLlama/expect-enzyme&quot;&gt; &lt;code&gt;expect-enzyme&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="66287bce8deb635bb10c10ca9a6e419d20301434" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://github.com/hapijs/lab&quot;&gt;Lab&lt;/a&gt; is a simple test utility for node &amp;amp; part of the &lt;a href=&quot;https://github.com/hapijs/hapi&quot;&gt;Hapi.js&lt;/a&gt; framework universe. Lab's initial code borrowed heavily from &lt;a href=&quot;https://github.com/mochajs/mocha&quot;&gt;Mocha&lt;/a&gt;. &lt;a href=&quot;https://github.com/hapijs/code&quot;&gt;Code&lt;/a&gt; is Lab's standard assertion library and was created as a direct rewrite of &lt;a href=&quot;https://github.com/chaijs&quot;&gt;Chai&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;https://github.com/hapijs/lab&quot;&gt;Lab&lt;/a&gt;是一个简单的测试实用程序，用于节点和&lt;a href=&quot;https://github.com/hapijs/hapi&quot;&gt;Hapi.js&lt;/a&gt;框架世界的一部分。Lab的初始代码是从&lt;a href=&quot;https://github.com/mochajs/mocha&quot;&gt;Mocha&lt;/a&gt;大量借用的。&lt;a href=&quot;https://github.com/hapijs/code&quot;&gt;代码&lt;/a&gt;是Lab的标准断言库，被创建为&lt;a href=&quot;https://github.com/chaijs&quot;&gt;Chai&lt;/a&gt;的直接重写。</target>
        </trans-unit>
        <trans-unit id="0f71c6509842acaf3858442f7d0147b2bd583c82" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://github.com/producthunt/chai-enzyme&quot;&gt;&lt;code&gt;chai-enzyme&lt;/code&gt;&lt;/a&gt; with Mocha/Chai.</source>
          <target state="translated">&lt;a href=&quot;https://github.com/producthunt/chai-enzyme&quot;&gt; &lt;code&gt;chai-enzyme&lt;/code&gt; &lt;/a&gt;摩卡/柴的柴酶。</target>
        </trans-unit>
        <trans-unit id="a475de9491ea22e21762d015fa9a7c08c5ae3b94" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://github.com/rkotze/should-enzyme&quot;&gt;&lt;code&gt;should-enzyme&lt;/code&gt;&lt;/a&gt; for should.js.</source>
          <target state="translated">&lt;a href=&quot;https://github.com/rkotze/should-enzyme&quot;&gt; &lt;code&gt;should-enzyme&lt;/code&gt; &lt;/a&gt;为should.js。</target>
        </trans-unit>
        <trans-unit id="92b334c66f661b1de1d164add2481d534e81b875" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://github.com/tmpvar/jsdom&quot;&gt;JSDOM&lt;/a&gt; is a JavaScript based headless browser that can be used to create a realistic testing environment.</source>
          <target state="translated">&lt;a href=&quot;https://github.com/tmpvar/jsdom&quot;&gt;JSDOM&lt;/a&gt;是基于JavaScript的无头浏览器，可用于创建实际的测试环境。</target>
        </trans-unit>
        <trans-unit id="ed267375bf43a3c8ce0c62924922e6e2d6df8946" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://reactjs.org/docs/test-utils.html#act&quot;&gt;&lt;code&gt;ReactTestUtils.act()&lt;/code&gt;&lt;/a&gt; wrap</source>
          <target state="translated">&lt;a href=&quot;https://reactjs.org/docs/test-utils.html#act&quot;&gt; &lt;code&gt;ReactTestUtils.act()&lt;/code&gt; &lt;/a&gt;包装</target>
        </trans-unit>
        <trans-unit id="94a4b06c863c7a5313a1f50dd48ca9cbece2ff47" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;matcheselement&quot;&gt;&lt;code&gt;.matchesElement() =&amp;gt; ReactWrapper&lt;/code&gt;&lt;/a&gt; - rules for matching each node</source>
          <target state="translated">&lt;a href=&quot;matcheselement&quot;&gt; &lt;code&gt;.matchesElement() =&amp;gt; ReactWrapper&lt;/code&gt; &lt;/a&gt;匹配每个节点的规则</target>
        </trans-unit>
        <trans-unit id="e5f8ceef7f672cbc69690b12c5a54bbe4a52ca5f" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;matcheselement&quot;&gt;&lt;code&gt;.matchesElement() =&amp;gt; ShallowWrapper&lt;/code&gt;&lt;/a&gt; - rules for matching each node</source>
          <target state="translated">&lt;a href=&quot;matcheselement&quot;&gt; &lt;code&gt;.matchesElement() =&amp;gt; ShallowWrapper&lt;/code&gt; &lt;/a&gt;匹配每个节点的规则</target>
        </trans-unit>
        <trans-unit id="4c3182f3b05e39517a65acc469503b1b62285158" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;...args&lt;/code&gt; (&lt;code&gt;Any&lt;/code&gt; [optional]): A mock event object that will get passed through to the event handlers.</source>
          <target state="translated">&lt;code&gt;...args&lt;/code&gt; （ &lt;code&gt;Any&lt;/code&gt; [可选]）：一个模拟事件对象，该对象将传递给事件处理程序。</target>
        </trans-unit>
        <trans-unit id="7d5acc4ca66b815f01b08610b04a1d41733cfbec" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;...args&lt;/code&gt; (&lt;code&gt;Any&lt;/code&gt; [optional]): Arguments that is passed to the prop function</source>
          <target state="translated">&lt;code&gt;...args&lt;/code&gt; （ &lt;code&gt;Any&lt;/code&gt; [可选]）：传递给prop函数的参数</target>
        </trans-unit>
        <trans-unit id="481edbe5311b140f23ae39ad44738b021c51bfbf" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;...args&lt;/code&gt; (&lt;code&gt;Array&amp;lt;Any&amp;gt;&lt;/code&gt;):</source>
          <target state="translated">&lt;code&gt;...args&lt;/code&gt; （ &lt;code&gt;Array&amp;lt;Any&amp;gt;&lt;/code&gt; ）：</target>
        </trans-unit>
        <trans-unit id="3a0f1cbd92a9648a21322fb1caef4c03222f0248" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;.contains()&lt;/code&gt; expects a ReactElement, not a selector (like many other methods). Make sure that when you are calling it you are calling it with a ReactElement or a JSX expression.</source>
          <target state="translated">&lt;code&gt;.contains()&lt;/code&gt; 需要一个ReactElement，而不是选择器（就像许多其他方法一样）。确保在调用它时使用ReactElement或JSX表达式来调用它。</target>
        </trans-unit>
        <trans-unit id="4ce995a9da83f1ed08cbe8802542ceead4a76c4e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;.containsAllMatchingElements()&lt;/code&gt; expects an array of ReactElement, not a selector (like many other methods). Make sure that when you are calling it you are calling it with an array of ReactElement or a JSX expression.</source>
          <target state="translated">&lt;code&gt;.containsAllMatchingElements()&lt;/code&gt; 需要一个ReactElement数组，而不是选择器（就像许多其他方法一样）。确保在调用它时使用的是ReactElement数组或JSX表达式。</target>
        </trans-unit>
        <trans-unit id="bfb0adc0d4f2949949d8c576392cd9e9b3444975" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;.containsAnyMatchingElements()&lt;/code&gt; expects an array of ReactElement, not a selector (like many other methods). Make sure that when you are calling it you are calling it with an array ReactElement or a JSX expression.</source>
          <target state="translated">&lt;code&gt;.containsAnyMatchingElements()&lt;/code&gt; 需要一个ReactElement数组，而不是选择器（就像许多其他方法一样）。确保在调用它时使用数组ReactElement或JSX表达式来调用它。</target>
        </trans-unit>
        <trans-unit id="e06dbaae32f0ec98c69252fc4a13797a958808a1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;.containsMatchingElement()&lt;/code&gt; expects a ReactElement, not a selector (like many other methods). Make sure that when you are calling it you are calling it with a ReactElement or a JSX expression.</source>
          <target state="translated">&lt;code&gt;.containsMatchingElement()&lt;/code&gt; 需要一个ReactElement，而不是选择器（就像许多其他方法一样）。确保在调用它时使用ReactElement或JSX表达式来调用它。</target>
        </trans-unit>
        <trans-unit id="1c9dce95e5dde7f3ec4c843eb0e40f4eddb93428" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;.equals()&lt;/code&gt; expects a ReactElement, not a selector (like many other methods). Make sure that when you are calling it you are calling it with a ReactElement or a JSX expression.</source>
          <target state="translated">&lt;code&gt;.equals()&lt;/code&gt; 需要一个ReactElement，而不是选择器（就像许多其他方法一样）。确保在调用它时使用ReactElement或JSX表达式来调用它。</target>
        </trans-unit>
        <trans-unit id="6ceb9442c1571ab6874956a4d4e19fd3d260d8b9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;.hasClass()&lt;/code&gt; expects a class name, NOT a CSS selector. &lt;code&gt;.hasClass('.foo')&lt;/code&gt; should be &lt;code&gt;.hasClass('foo')&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;.hasClass()&lt;/code&gt; 需要一个类名，而不是CSS选择器。 &lt;code&gt;.hasClass('.foo')&lt;/code&gt; 应该是 &lt;code&gt;.hasClass('foo')&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="05c149be1e957ecc67ff6c8f266eb85f316d65aa" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;.matchesElement()&lt;/code&gt; expects a ReactElement, not a selector (like many other methods). Make sure that when you are calling it you are calling it with a ReactElement or a JSX expression.</source>
          <target state="translated">&lt;code&gt;.matchesElement()&lt;/code&gt; 需要一个ReactElement，而不是选择器（就像许多其他方法一样）。确保在调用它时使用ReactElement或JSX表达式来调用它。</target>
        </trans-unit>
        <trans-unit id="dadc7392eaff93a6f151dec5ffa53c57a3d6ba85" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;.setContext()&lt;/code&gt; can only be used on a wrapper that was initially created with a call to &lt;code&gt;mount()&lt;/code&gt; that includes a &lt;code&gt;context&lt;/code&gt; specified in the options argument.</source>
          <target state="translated">&lt;code&gt;.setContext()&lt;/code&gt; 只能在最初通过调用 &lt;code&gt;mount()&lt;/code&gt; 创建的包装器上使用，该包装包括options参数 &lt;code&gt;context&lt;/code&gt; 指定的上下文。</target>
        </trans-unit>
        <trans-unit id="f5b0ede9933d09f7cce305efd68bcb38ee0c70f2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;.setContext()&lt;/code&gt; can only be used on a wrapper that was initially created with a call to &lt;code&gt;shallow()&lt;/code&gt; that includes a &lt;code&gt;context&lt;/code&gt; specified in the options argument.</source>
          <target state="translated">&lt;code&gt;.setContext()&lt;/code&gt; 仅可用于最初通过调用 &lt;code&gt;shallow()&lt;/code&gt; 创建的包装器，该包装包括在options参数 &lt;code&gt;context&lt;/code&gt; 指定的上下文。</target>
        </trans-unit>
        <trans-unit id="47f20b479e690ad91d4ce690604c96cc0811c5e5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Any&lt;/code&gt;: Returns the value from the prop function</source>
          <target state="translated">&lt;code&gt;Any&lt;/code&gt; ：从prop函数返回值</target>
        </trans-unit>
        <trans-unit id="ca3956b3f471852ac0595865a375e56804bdfa9f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Array&amp;lt;Any&amp;gt;&lt;/code&gt;: Returns an array of the returned values from the mapping function..</source>
          <target state="translated">&lt;code&gt;Array&amp;lt;Any&amp;gt;&lt;/code&gt; ：从映射函数返回返回值的数组。</target>
        </trans-unit>
        <trans-unit id="f168e046ce164dd340e724959de67593e765834f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Array&amp;lt;ReactElement&amp;gt;&lt;/code&gt;: The retrieved ReactElements.</source>
          <target state="translated">&lt;code&gt;Array&amp;lt;ReactElement&amp;gt;&lt;/code&gt; ：检索到的ReactElements。</target>
        </trans-unit>
        <trans-unit id="8d8fa0ac39d5ff39c167bc6e34da84502a153613" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Boolean&lt;/code&gt;: True if at least one of the nodes in the current wrapper matched the provided selector.</source>
          <target state="translated">&lt;code&gt;Boolean&lt;/code&gt; ：如果当前包装器中的至少一个节点与提供的选择器匹配，则为true。</target>
        </trans-unit>
        <trans-unit id="68916001eb3670694fd336110a1eee869a3d74ce" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Boolean&lt;/code&gt;: True if at least one of the nodes in the current wrapper passed the predicate function.</source>
          <target state="translated">&lt;code&gt;Boolean&lt;/code&gt; ：如果当前包装器中的至少一个节点通过谓词函数，则为true。</target>
        </trans-unit>
        <trans-unit id="034499982ca2d0c2b0eada854113e064e7974855" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Boolean&lt;/code&gt;: True if every node in the current wrapper matched the provided selector.</source>
          <target state="translated">&lt;code&gt;Boolean&lt;/code&gt; ：如果当前包装器中的每个节点都与提供的选择器匹配，则为True。</target>
        </trans-unit>
        <trans-unit id="9ded831b0f7642ca360462b388659a86d4da5bed" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Boolean&lt;/code&gt;: True if every node in the current wrapper passed the predicate function.</source>
          <target state="translated">&lt;code&gt;Boolean&lt;/code&gt; ：如果当前包装器中的每个节点都通过谓词函数，则为True。</target>
        </trans-unit>
        <trans-unit id="38a2e1c6e280f64f5c5dac519af48ee0fd1cd3ed" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Boolean&lt;/code&gt;: whether or not any nodes are on the list, or the selector had any matches.</source>
          <target state="translated">&lt;code&gt;Boolean&lt;/code&gt; ：列表中是否有任何节点，或者选择器是否匹配。</target>
        </trans-unit>
        <trans-unit id="f303e83a882a967ca1eed448cd8d046d10be2780" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Boolean&lt;/code&gt;: whether or not the current wrapper has a node anywhere in it's render tree that looks like the one passed in.</source>
          <target state="translated">&lt;code&gt;Boolean&lt;/code&gt; ：当前包装器的渲染树中是否有一个节点看起来像传入的节点。</target>
        </trans-unit>
        <trans-unit id="71b466b0a8ca3edac4a38cdbf3245ec92d786f67" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Boolean&lt;/code&gt;: whether or not the current wrapper has a node anywhere in its render tree that looks like one of the array passed in.</source>
          <target state="translated">&lt;code&gt;Boolean&lt;/code&gt; ：当前包装器的渲染树中是否有一个节点看起来像传入的数组之一。</target>
        </trans-unit>
        <trans-unit id="236ec5d642683b85b46e88e1db6bdad79903875c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Boolean&lt;/code&gt;: whether or not the current wrapper has a node anywhere in its render tree that matches the one passed in.</source>
          <target state="translated">&lt;code&gt;Boolean&lt;/code&gt; ：当前包装器的渲染树中是否有一个节点与传入的节点相匹配。</target>
        </trans-unit>
        <trans-unit id="0ccc1e8a3d9793f772fd21f3fba3831e5675a530" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Boolean&lt;/code&gt;: whether or not the current wrapper has nodes anywhere in its render tree that looks like the nodes passed in.</source>
          <target state="translated">&lt;code&gt;Boolean&lt;/code&gt; ：当前包装器是否在其渲染树中的任何地方都具有看起来像传入的节点的节点。</target>
        </trans-unit>
        <trans-unit id="958f67d6d2f85c6f8417036e625b304f1e380e31" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Boolean&lt;/code&gt;: whether or not the current wrapper has nodes anywhere in its render tree that match the ones passed in.</source>
          <target state="translated">&lt;code&gt;Boolean&lt;/code&gt; ：当前包装器的渲染树中是否有与传入的匹配的节点。</target>
        </trans-unit>
        <trans-unit id="91bc1cbe19a6ec078ba2548f6effd2b47f881555" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Boolean&lt;/code&gt;: whether or not the current wrapper match the one passed in.</source>
          <target state="translated">&lt;code&gt;Boolean&lt;/code&gt; ：当前包装器是否与传入的包装器匹配。</target>
        </trans-unit>
        <trans-unit id="58b0077e8da603b9d29b08d3976d69bb664e499c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Boolean&lt;/code&gt;: whether or not the wrapped node has found the class name.</source>
          <target state="translated">&lt;code&gt;Boolean&lt;/code&gt; ：包装的节点是否找到了类名。</target>
        </trans-unit>
        <trans-unit id="0db8bb128f280f6d5b52aa168b78dbae42f27fd1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Boolean&lt;/code&gt;: whether or not the wrapped node has the class.</source>
          <target state="translated">&lt;code&gt;Boolean&lt;/code&gt; ：包装的节点是否具有类。</target>
        </trans-unit>
        <trans-unit id="18de4c125481f7ccc7c0e0566f2f62fc5ae58fd7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Boolean&lt;/code&gt;: whether or not the wrapped node matches the provided selector.</source>
          <target state="translated">&lt;code&gt;Boolean&lt;/code&gt; ：包装的节点是否与提供的选择器匹配。</target>
        </trans-unit>
        <trans-unit id="1b3548c2141ec045588698098e7b1fd84103ff8d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Boolean&lt;/code&gt;: whether or not the wrapper is empty.</source>
          <target state="translated">&lt;code&gt;Boolean&lt;/code&gt; ：包装器是否为空。</target>
        </trans-unit>
        <trans-unit id="498d1a37e3f4cf065b3ef21ca665393c32237377" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Boolean&lt;/code&gt;: whether the return is falsy</source>
          <target state="translated">&lt;code&gt;Boolean&lt;/code&gt; ：返回是否为假</target>
        </trans-unit>
        <trans-unit id="9f5a040d30516b99825141c42c2c9c4b3a3b9d2f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;CheerioWrapper&lt;/code&gt;: The resulting Cheerio object</source>
          <target state="translated">&lt;code&gt;CheerioWrapper&lt;/code&gt; ：生成的Cheerio对象</target>
        </trans-unit>
        <trans-unit id="f47ef7bd46a1e31dcf7f7f178479ca895447473e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;DOMComponent&lt;/code&gt;: The retrieved DOM component.</source>
          <target state="translated">&lt;code&gt;DOMComponent&lt;/code&gt; ：检索到的DOM组件。</target>
        </trans-unit>
        <trans-unit id="f375a60bde526ef53aac5699a209193c6dd57849" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ReactComponent | HTMLElement&lt;/code&gt;: The node that matches the provided reference name. This can be a react component instance, or an HTML element instance.</source>
          <target state="translated">&lt;code&gt;ReactComponent | HTMLElement&lt;/code&gt; ：与提供的引用名称匹配的节点。这可以是React组件实例，也可以是HTML元素实例。</target>
        </trans-unit>
        <trans-unit id="7c3540897075b2d39d8e77a725d0e126b5f1cc6a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ReactComponent|DOMComponent&lt;/code&gt;: The retrieved instance.</source>
          <target state="translated">&lt;code&gt;ReactComponent|DOMComponent&lt;/code&gt; ：检索到的实例。</target>
        </trans-unit>
        <trans-unit id="7222f070164ef0d99fceef41c6dea3f592b5dbfb" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ReactElement&lt;/code&gt;: The retrieved ReactElement.</source>
          <target state="translated">&lt;code&gt;ReactElement&lt;/code&gt; ：检索到的ReactElement。</target>
        </trans-unit>
        <trans-unit id="bee0e230f218bb7b2c4bef843a163084e6fe0176" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ReactElement&lt;/code&gt;: The retrieved node.</source>
          <target state="translated">&lt;code&gt;ReactElement&lt;/code&gt; ：检索到的节点。</target>
        </trans-unit>
        <trans-unit id="a9de663eb7f4d7f105b692f04136babca07c27bc" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ReactWrapper&lt;/code&gt;: A &lt;code&gt;ReactWrapper&lt;/code&gt; around the rendered &lt;code&gt;wrappingComponent&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;ReactWrapper&lt;/code&gt; ：一个 &lt;code&gt;ReactWrapper&lt;/code&gt; 周围呈现 &lt;code&gt;wrappingComponent&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="4582655aa8310eb0905688aeb53705236ef6c6cc" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ReactWrapper&lt;/code&gt;: A new wrapper that wraps the filtered nodes.</source>
          <target state="translated">&lt;code&gt;ReactWrapper&lt;/code&gt; ：一个新的包装器，用于包装已过滤的节点。</target>
        </trans-unit>
        <trans-unit id="7948b094fa1017eea2b906fb9745dea27b8d12ac" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ReactWrapper&lt;/code&gt;: A new wrapper that wraps the first node in the set.</source>
          <target state="translated">&lt;code&gt;ReactWrapper&lt;/code&gt; ：一个新的包装器，用于包装集合中的第一个节点。</target>
        </trans-unit>
        <trans-unit id="5896531c0043f13e1a5d16dc81e963199c62c918" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ReactWrapper&lt;/code&gt;: A new wrapper that wraps the found nodes.</source>
          <target state="translated">&lt;code&gt;ReactWrapper&lt;/code&gt; ：一个新的包装器，用于包装找到的节点。</target>
        </trans-unit>
        <trans-unit id="9b5d2c552250fd8635f8c28e8126a3fa9ad30a05" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ReactWrapper&lt;/code&gt;: A new wrapper that wraps the last node in the set.</source>
          <target state="translated">&lt;code&gt;ReactWrapper&lt;/code&gt; ：一个新的包装器，用于包装集合中的最后一个节点。</target>
        </trans-unit>
        <trans-unit id="2298744b854c643d921bbc0267fa204312a0491a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ReactWrapper&lt;/code&gt;: A new wrapper that wraps the node returned from the render prop.</source>
          <target state="translated">&lt;code&gt;ReactWrapper&lt;/code&gt; ：一个新的包装器，用于包装从渲染道具返回的节点。</target>
        </trans-unit>
        <trans-unit id="3c5328135437b61732739752f0411a8da54dec60" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ReactWrapper&lt;/code&gt;: A new wrapper that wraps the resulting node.</source>
          <target state="translated">&lt;code&gt;ReactWrapper&lt;/code&gt; ：一个新的包装器，包装结果节点。</target>
        </trans-unit>
        <trans-unit id="18723bb069d9d8466478c97704c6bdbfbf9f1a53" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ReactWrapper&lt;/code&gt;: A new wrapper that wraps the resulting nodes.</source>
          <target state="translated">&lt;code&gt;ReactWrapper&lt;/code&gt; ：一个新的包装器，用于包装生成的节点。</target>
        </trans-unit>
        <trans-unit id="bfef3b5efd51436e162c16f650d1ad9cca5aa849" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ReactWrapper&lt;/code&gt;: A new wrapper that wraps the retrieved node.</source>
          <target state="translated">&lt;code&gt;ReactWrapper&lt;/code&gt; ：一个新的包装器，用于包装检索到的节点。</target>
        </trans-unit>
        <trans-unit id="0387b02a2276159fd756a0680643a62f69e7fd29" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ReactWrapper&lt;/code&gt;: A new wrapper with the subset of nodes specified.</source>
          <target state="translated">&lt;code&gt;ReactWrapper&lt;/code&gt; ：一个带有指定节点子集的新包装器。</target>
        </trans-unit>
        <trans-unit id="635c9dee7b5a17e29fbced7b656168241183b1e6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ReactWrapper&lt;/code&gt;: Returns itself.</source>
          <target state="translated">&lt;code&gt;ReactWrapper&lt;/code&gt; ：返回自身。</target>
        </trans-unit>
        <trans-unit id="3960d95a0f3461b72fbca66cd1b92ed9e1b796b4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ReactWrapper&lt;/code&gt;: The wrapper instance around the rendered output.</source>
          <target state="translated">&lt;code&gt;ReactWrapper&lt;/code&gt; ：渲染输出周围的包装实例。</target>
        </trans-unit>
        <trans-unit id="13395029eb6e2c6c58159f092944811c70e98cac" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Self&lt;/code&gt;: the current ReactWrapper instance.</source>
          <target state="translated">&lt;code&gt;Self&lt;/code&gt; ：当前的ReactWrapper实例。</target>
        </trans-unit>
        <trans-unit id="137a951ef8933ef3a343dcac318858d1149002c3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Self&lt;/code&gt;: the current ShallowWrapper instance.</source>
          <target state="translated">&lt;code&gt;Self&lt;/code&gt; ：当前的ShallowWrapper实例。</target>
        </trans-unit>
        <trans-unit id="6bd3125828de07e4479a1b06cfacbe8ba857c4e4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ShallowWrapper&lt;/code&gt;: A &lt;code&gt;ShallowWrapper&lt;/code&gt; around the rendered &lt;code&gt;wrappingComponent&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;ShallowWrapper&lt;/code&gt; ：围绕呈现的 &lt;code&gt;wrappingComponent&lt;/code&gt; 的 &lt;code&gt;ShallowWrapper&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="d1ae118af6da7710b58e8c4a35b0dcccb8494fb9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ShallowWrapper&lt;/code&gt;: A new wrapper that wraps the current node after it's been shallow rendered.</source>
          <target state="translated">&lt;code&gt;ShallowWrapper&lt;/code&gt; ：一个新的包装器，用于在浅显示后包装当前节点。</target>
        </trans-unit>
        <trans-unit id="65bf94eec1fc0a1ce1b1b57bf9def5048f16e8fc" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ShallowWrapper&lt;/code&gt;: A new wrapper that wraps the filtered nodes.</source>
          <target state="translated">&lt;code&gt;ShallowWrapper&lt;/code&gt; ：一个新的包装器，用于包装已过滤的节点。</target>
        </trans-unit>
        <trans-unit id="5919deb5fa2351558423c0b98ed7c99363334d27" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ShallowWrapper&lt;/code&gt;: A new wrapper that wraps the first node in the set.</source>
          <target state="translated">&lt;code&gt;ShallowWrapper&lt;/code&gt; ：一个新包装器，用于包装集合中的第一个节点。</target>
        </trans-unit>
        <trans-unit id="7fd69cc86902d52e50a641ed92ba6854cb482b2b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ShallowWrapper&lt;/code&gt;: A new wrapper that wraps the found nodes.</source>
          <target state="translated">&lt;code&gt;ShallowWrapper&lt;/code&gt; ：一个新的包装器，用于包装找到的节点。</target>
        </trans-unit>
        <trans-unit id="1e3e2a103936d5fb0feb471845cb9997d6cfb481" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ShallowWrapper&lt;/code&gt;: A new wrapper that wraps the last node in the set.</source>
          <target state="translated">&lt;code&gt;ShallowWrapper&lt;/code&gt; ：一个新包装器，用于包装集合中的最后一个节点。</target>
        </trans-unit>
        <trans-unit id="95ae11db2a27f7dd025e961b483f5710f72cff13" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ShallowWrapper&lt;/code&gt;: A new wrapper that wraps the node after it's been shallow rendered.</source>
          <target state="translated">&lt;code&gt;ShallowWrapper&lt;/code&gt; ：一个新的包装器，用于在浅显示节点后包装该节点。</target>
        </trans-unit>
        <trans-unit id="524045ff86fb59eef0e5c783652e8681e8a4b355" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ShallowWrapper&lt;/code&gt;: A new wrapper that wraps the node returned from the render prop.</source>
          <target state="translated">&lt;code&gt;ShallowWrapper&lt;/code&gt; ：一个新的包装器，用于包装从渲染道具返回的节点。</target>
        </trans-unit>
        <trans-unit id="9c30187e5d79821ecfed0f8facce088d04280ede" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ShallowWrapper&lt;/code&gt;: A new wrapper that wraps the resulting node.</source>
          <target state="translated">&lt;code&gt;ShallowWrapper&lt;/code&gt; ：包装结果节点的新包装器。</target>
        </trans-unit>
        <trans-unit id="39981da15ae70d4dc702652730943fa20833f05f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ShallowWrapper&lt;/code&gt;: A new wrapper that wraps the resulting nodes.</source>
          <target state="translated">&lt;code&gt;ShallowWrapper&lt;/code&gt; ：包装结果节点的新包装器。</target>
        </trans-unit>
        <trans-unit id="3c133c4ae8eaa3da8d5f3721e3dfc5742a1a75aa" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ShallowWrapper&lt;/code&gt;: A new wrapper that wraps the retrieved node.</source>
          <target state="translated">&lt;code&gt;ShallowWrapper&lt;/code&gt; ：一个新的包装器，用于包装检索到的节点。</target>
        </trans-unit>
        <trans-unit id="75e41093f079ea2fb04d42b54ba700faf9523ea1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ShallowWrapper&lt;/code&gt;: A new wrapper with the subset of nodes specified.</source>
          <target state="translated">&lt;code&gt;ShallowWrapper&lt;/code&gt; ：指定了节点子集的新包装器。</target>
        </trans-unit>
        <trans-unit id="3cb41a47b5c296e4977c96de68f04d09330170ad" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ShallowWrapper&lt;/code&gt;: Returns itself.</source>
          <target state="translated">&lt;code&gt;ShallowWrapper&lt;/code&gt; ：返回自身。</target>
        </trans-unit>
        <trans-unit id="0f790f7e3f43dcac8008ccaba58ae318cc55a726" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ShallowWrapper&lt;/code&gt;: The wrapper instance around the rendered output.</source>
          <target state="translated">&lt;code&gt;ShallowWrapper&lt;/code&gt; ：渲染输出周围的包装实例。</target>
        </trans-unit>
        <trans-unit id="ae40a0692ce974c58dc08f75bcde053d39d3e600" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;String | Function | null&lt;/code&gt;: The type of the node</source>
          <target state="translated">&lt;code&gt;String | Function | null&lt;/code&gt; ：节点的类型</target>
        </trans-unit>
        <trans-unit id="4c378f8d810dbe6d084fa26cc3911a793dd2bcb9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;String&lt;/code&gt;: The resulting HTML string</source>
          <target state="translated">&lt;code&gt;String&lt;/code&gt; ：结果HTML字符串</target>
        </trans-unit>
        <trans-unit id="bed3376a1c3652a7d4d40b046a61f31538c91843" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;String&lt;/code&gt;: The resulting string</source>
          <target state="translated">&lt;code&gt;String&lt;/code&gt; ：结果字符串</target>
        </trans-unit>
        <trans-unit id="49f34d2a1ae2aab2874a59fe6b160e08e295e1c6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;String&lt;/code&gt;: The resulting string.</source>
          <target state="translated">&lt;code&gt;String&lt;/code&gt; ：结果字符串。</target>
        </trans-unit>
        <trans-unit id="44b96b7f35ce54b11453c132a7c6a6632fefa7bf" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;String|null&lt;/code&gt;: The name of the current node</source>
          <target state="translated">&lt;code&gt;String|null&lt;/code&gt; ：当前节点的名称</target>
        </trans-unit>
        <trans-unit id="5dcfe11dd468d02b2c1f362e60b5f1962c874959" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;T&lt;/code&gt;: Returns an array of the returned values from the mapping function...</source>
          <target state="translated">&lt;code&gt;T&lt;/code&gt; ：返回映射函数返回值的数组...</target>
        </trans-unit>
        <trans-unit id="c05784dd80bcb2effcbffae71b29e01f0179e16d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;begin&lt;/code&gt; (&lt;code&gt;Number&lt;/code&gt; [optional]): Index from which to slice (defaults to &lt;code&gt;0&lt;/code&gt;). If negative, this is treated as &lt;code&gt;length+begin&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;begin&lt;/code&gt; （ &lt;code&gt;Number&lt;/code&gt; [可选]）：要从其进行切片的索引（默认为 &lt;code&gt;0&lt;/code&gt; ）。如果为负，则将其视为 &lt;code&gt;length+begin&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="52d867156356dc473edcaa854460eb821bedaa59" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;callback&lt;/code&gt; (&lt;code&gt;Function&lt;/code&gt; [optional]): If provided, the callback function will be executed once setProps has completed</source>
          <target state="translated">&lt;code&gt;callback&lt;/code&gt; （ &lt;code&gt;Function&lt;/code&gt; [可选]）：如果提供，则setProps完成后将执行回调函数</target>
        </trans-unit>
        <trans-unit id="8436ec5686c59273394c9544f37871a46d3c2aee" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;callback&lt;/code&gt; (&lt;code&gt;Function&lt;/code&gt; [optional]): If provided, the callback function will be executed once setState has completed</source>
          <target state="translated">&lt;code&gt;callback&lt;/code&gt; （ &lt;code&gt;Function&lt;/code&gt; [可选]）：如果提供，则setState完成后将执行回调函数</target>
        </trans-unit>
        <trans-unit id="52e1d0430ed2861e5fe25a9177807877c039c44f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;children()&lt;/code&gt; now has slightly different meaning</source>
          <target state="translated">&lt;code&gt;children()&lt;/code&gt; 现在的含义略有不同</target>
        </trans-unit>
        <trans-unit id="4798061ed40099bd5949736a23c519cc6d7d276c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;className&lt;/code&gt; (&lt;code&gt;String&lt;/code&gt; | &lt;code&gt;RegExp&lt;/code&gt;): A single class name or a regex expression.</source>
          <target state="translated">&lt;code&gt;className&lt;/code&gt; （ &lt;code&gt;String&lt;/code&gt; | &lt;code&gt;RegExp&lt;/code&gt; ）：单个类名或正则表达式。</target>
        </trans-unit>
        <trans-unit id="9834bdfa66c0ae1a1140ec5de43232406a69f27f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;context&lt;/code&gt; (&lt;code&gt;Object&lt;/code&gt;): An object containing new props to merge in with the current state</source>
          <target state="translated">&lt;code&gt;context&lt;/code&gt; （ &lt;code&gt;Object&lt;/code&gt; ）：包含要与当前状态合并的新道具的对象</target>
        </trans-unit>
        <trans-unit id="852000135a1c2bb932006aab87e9cdfc3b9fd29f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;describeWithDOM&lt;/code&gt; API and clearing the document after every test</source>
          <target state="translated">&lt;code&gt;describeWithDOM&lt;/code&gt; API并在每次测试后清除文档</target>
        </trans-unit>
        <trans-unit id="31c0419a77ac69c34a8b81c81f85eb42ba6ad605" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;end&lt;/code&gt; (&lt;code&gt;Number&lt;/code&gt; [optional]): Index at which to end slicing (defaults to &lt;code&gt;length&lt;/code&gt;). If negative, this is treated as &lt;code&gt;length+end&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;end&lt;/code&gt; （ &lt;code&gt;Number&lt;/code&gt; [可选]）：结束切片的索引（默认为 &lt;code&gt;length&lt;/code&gt; ）。如果为负，则将其视为 &lt;code&gt;length+end&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="94944f198e337aacfd7a6dfa7c67caa21dc5853a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;error&lt;/code&gt; (&lt;code&gt;Any&lt;/code&gt;): The error to throw.</source>
          <target state="translated">&lt;code&gt;error&lt;/code&gt; （ &lt;code&gt;Any&lt;/code&gt; ）：引发错误。</target>
        </trans-unit>
        <trans-unit id="3161c8c0aa99735c9fbfe4765fb3ba540d8491ab" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;event&lt;/code&gt; (&lt;code&gt;String&lt;/code&gt;): The event name to be simulated</source>
          <target state="translated">&lt;code&gt;event&lt;/code&gt; （ &lt;code&gt;String&lt;/code&gt; ）：要模拟的事件名称</target>
        </trans-unit>
        <trans-unit id="356127c657abcd44596ea44ede55d20205dd51d0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;find()&lt;/code&gt; now returns host nodes and DOM nodes</source>
          <target state="translated">&lt;code&gt;find()&lt;/code&gt; 现在返回主机节点和DOM节点</target>
        </trans-unit>
        <trans-unit id="4a83e4dc978aad4cf0d57eb0532274923b179784" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fn&lt;/code&gt; (&lt;code&gt;Function ( ReactWrapper node, Number index ) =&amp;gt; Any&lt;/code&gt;): A mapping function to be run for every node in the collection, the results of which will be mapped to the returned array. Should expect a ReactWrapper as the first argument, and will be run with a context of the original instance.</source>
          <target state="translated">&lt;code&gt;fn&lt;/code&gt; （ &lt;code&gt;Function ( ReactWrapper node, Number index ) =&amp;gt; Any&lt;/code&gt; ）：一个针对集合中每个节点运行的映射函数，其结果将映射到返回的数组。应该期望将ReactWrapper作为第一个参数，并将在原始实例的上下文中运行。</target>
        </trans-unit>
        <trans-unit id="869ad92e40b6938742688fdc09f539acefcfe8ca" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fn&lt;/code&gt; (&lt;code&gt;Function ( ReactWrapper node, Number index )&lt;/code&gt;): A callback to be run for every node in the collection. Should expect a ReactWrapper as the first argument, and will be run with a context of the original instance.</source>
          <target state="translated">&lt;code&gt;fn&lt;/code&gt; （ &lt;code&gt;Function ( ReactWrapper node, Number index )&lt;/code&gt; ）：为集合中的每个节点运行的回调。应该期望将ReactWrapper作为第一个参数，并将在原始实例的上下文中运行。</target>
        </trans-unit>
        <trans-unit id="bc51a6fb1a6fb2a1a61f7a64a88b2777d138dec6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fn&lt;/code&gt; (&lt;code&gt;Function ( ShallowWrapper node, Number index ) =&amp;gt; Any&lt;/code&gt;): A mapping function to be run for every node in the collection, the results of which will be mapped to the returned array. Should expect a ShallowWrapper as the first argument, and will be run with a context of the original instance.</source>
          <target state="translated">&lt;code&gt;fn&lt;/code&gt; （ &lt;code&gt;Function ( ShallowWrapper node, Number index ) =&amp;gt; Any&lt;/code&gt; ）：集合中每个节点要运行的映射函数，其结果将映射到返回的数组。应该将ShallowWrapper作为第一个参数，并将在原始实例的上下文中运行。</target>
        </trans-unit>
        <trans-unit id="ad66642de3e8d047a5f3d7475a5abb87def9d126" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fn&lt;/code&gt; (&lt;code&gt;Function ( ShallowWrapper node, Number index )&lt;/code&gt;): A callback to be run for every node in the collection. Should expect a ShallowWrapper as the first argument, and will be run with a context of the original instance.</source>
          <target state="translated">&lt;code&gt;fn&lt;/code&gt; （ &lt;code&gt;Function ( ShallowWrapper node, Number index )&lt;/code&gt; ）：将对集合中的每个节点运行的回调。应该将ShallowWrapper作为第一个参数，并将在原始实例的上下文中运行。</target>
        </trans-unit>
        <trans-unit id="00c44962fc68d5c563425d2085bfc9f5d01fa2d0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fn&lt;/code&gt; (&lt;code&gt;Function&lt;/code&gt;): A reducing function to be run for every node in the collection, with the following arguments:</source>
          <target state="translated">&lt;code&gt;fn&lt;/code&gt; （ &lt;code&gt;Function&lt;/code&gt; ）：一个归约函数，将针对集合中的每个节点运行，并带有以下参数：</target>
        </trans-unit>
        <trans-unit id="12ffa40a82b243408fc4d0bc6f5b3193129b4d49" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;index&lt;/code&gt; (&lt;code&gt;Number&lt;/code&gt;): A zero-based integer indicating which node to retrieve.</source>
          <target state="translated">&lt;code&gt;index&lt;/code&gt; （ &lt;code&gt;Number&lt;/code&gt; ）：从零开始的整数，指示要检索的节点。</target>
        </trans-unit>
        <trans-unit id="3681d764c6ae6c8cddae773f2d0dbcb9d11b5466" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;index&lt;/code&gt; (&lt;code&gt;Number&lt;/code&gt;): The index of the node being processed</source>
          <target state="translated">&lt;code&gt;index&lt;/code&gt; （ &lt;code&gt;Number&lt;/code&gt; ）：正在处理的节点的索引</target>
        </trans-unit>
        <trans-unit id="6f7dd04a7bec56153a7cc7c4e23ab299bd2a2167" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;index&lt;/code&gt; (&lt;code&gt;number&lt;/code&gt;): A zero-based integer indicating which node to retrieve.</source>
          <target state="translated">&lt;code&gt;index&lt;/code&gt; （ &lt;code&gt;number&lt;/code&gt; ）：从零开始的整数，指示要检索的节点。</target>
        </trans-unit>
        <trans-unit id="03287835c45577eb41b738243bb2a7b05c3698b1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;initialValue&lt;/code&gt; (&lt;code&gt;T&lt;/code&gt; [optional]): If provided, this will be passed in as the first argument to the first invocation of the reducing function. If omitted, the first &lt;code&gt;node&lt;/code&gt; will be provided and the iteration will begin on the second node in the collection.</source>
          <target state="translated">&lt;code&gt;initialValue&lt;/code&gt; （ &lt;code&gt;T&lt;/code&gt; [可选]）：如果提供，它将作为第一个参数传递给reduce函数的第一次调用。如果省略，将提供第一个 &lt;code&gt;node&lt;/code&gt; ，并且迭代将从集合中的第二个节点开始。</target>
        </trans-unit>
        <trans-unit id="94c2d2c9b862989a1013139909943aa4c914654a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;intercepter&lt;/code&gt; (&lt;code&gt;Self&lt;/code&gt;): the current ReactWrapper instance.</source>
          <target state="translated">&lt;code&gt;intercepter&lt;/code&gt; （ &lt;code&gt;Self&lt;/code&gt; ）：当前的ReactWrapper实例。</target>
        </trans-unit>
        <trans-unit id="d647244e2d61821c17c748abdc11860408165e49" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;intercepter&lt;/code&gt; (&lt;code&gt;Self&lt;/code&gt;): the current ShallowWrapper instance.</source>
          <target state="translated">&lt;code&gt;intercepter&lt;/code&gt; （ &lt;code&gt;Self&lt;/code&gt; ）：当前的ShallowWrapper实例。</target>
        </trans-unit>
        <trans-unit id="861ca36d2296a15e45d73970988cc6d58f7dc0e1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;jsdom v10~&lt;/code&gt;:</source>
          <target state="translated">&lt;code&gt;jsdom v10~&lt;/code&gt; ：</target>
        </trans-unit>
        <trans-unit id="8fce60f3e87f2ddad5dcbef179b187e1f547382c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;jsdom ~&amp;lt;v10&lt;/code&gt;:</source>
          <target state="translated">&lt;code&gt;jsdom ~&amp;lt;v10&lt;/code&gt; ：</target>
        </trans-unit>
        <trans-unit id="98f98aad30dfbe2bb2b1cb83fcfbfb4ad42a8b0a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;key&lt;/code&gt; (&lt;code&gt;String&lt;/code&gt; [optional]): If provided, the return value will be the &lt;code&gt;this.context[key]&lt;/code&gt; of the root component instance.</source>
          <target state="translated">&lt;code&gt;key&lt;/code&gt; （ &lt;code&gt;String&lt;/code&gt; [可选]）：如果提供，则返回值将为根组件实例的 &lt;code&gt;this.context[key]&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="0223a0a2029819b616cd556032a83aab20a69af0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;key&lt;/code&gt; (&lt;code&gt;String&lt;/code&gt; [optional]): If provided, the return value will be the &lt;code&gt;this.state[key]&lt;/code&gt; of the root component instance.</source>
          <target state="translated">&lt;code&gt;key&lt;/code&gt; （ &lt;code&gt;String&lt;/code&gt; [可选]）：如果提供，则返回值将为根组件实例的 &lt;code&gt;this.state[key]&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="195adf515abef5dfdebcb742fa2bf341badf4b7b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;key&lt;/code&gt; (&lt;code&gt;String&lt;/code&gt;): The prop name, that is, &lt;code&gt;this.props[key]&lt;/code&gt; or &lt;code&gt;props[key]&lt;/code&gt; for the root node of the wrapper.</source>
          <target state="translated">&lt;code&gt;key&lt;/code&gt; （ &lt;code&gt;String&lt;/code&gt; ）： &lt;code&gt;this.props[key]&lt;/code&gt; 名称，即包装器根节点的this.props [key]或 &lt;code&gt;props[key]&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="c670cda1f21b8ff37130b0127ea2ece4ce4b93e0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;mock&lt;/code&gt; (&lt;code&gt;Object&lt;/code&gt; [optional]): A mock event object that will be merged with the event object passed to the handlers.</source>
          <target state="translated">&lt;code&gt;mock&lt;/code&gt; （ &lt;code&gt;Object&lt;/code&gt; [可选]）：模拟事件对象，它将与传递给处理程序的事件对象合并。</target>
        </trans-unit>
        <trans-unit id="707d58fd86bd2f39d703ce996971f314a37fe4d0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;nextProps&lt;/code&gt; (&lt;code&gt;Object&lt;/code&gt;): An object containing new props to merge in with the current props</source>
          <target state="translated">&lt;code&gt;nextProps&lt;/code&gt; （ &lt;code&gt;Object&lt;/code&gt; ）：包含要与当前道具合并的新道具的对象</target>
        </trans-unit>
        <trans-unit id="5a359ee87e420e93cd82b9a40ddfd8c488fc1463" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;nextState&lt;/code&gt; (&lt;code&gt;Object&lt;/code&gt;): An object containing new state to merge in with the current state</source>
          <target state="translated">&lt;code&gt;nextState&lt;/code&gt; （ &lt;code&gt;Object&lt;/code&gt; ）：包含要与当前状态合并的新状态的对象</target>
        </trans-unit>
        <trans-unit id="fde5bdac4170a98d04a3fbfedc6a819b7912c735" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;node&lt;/code&gt; (&lt;code&gt;ReactElement&lt;/code&gt;): The node to render</source>
          <target state="translated">&lt;code&gt;node&lt;/code&gt; （ &lt;code&gt;ReactElement&lt;/code&gt; ）：要渲染的节点</target>
        </trans-unit>
        <trans-unit id="ef191301d1201ec4a725054605fb78d76a720c82" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;node&lt;/code&gt; (&lt;code&gt;ReactElement&lt;/code&gt;): The node whose presence you are detecting in the current instance's render tree.</source>
          <target state="translated">&lt;code&gt;node&lt;/code&gt; （ &lt;code&gt;ReactElement&lt;/code&gt; ）：要在当前实例的渲染树中检测到其存在的节点。</target>
        </trans-unit>
        <trans-unit id="8fda72b722db144d711a736a4caa59511439a3b0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;node&lt;/code&gt; (&lt;code&gt;ReactWrapper&lt;/code&gt;): A single-node wrapper around the node being processed</source>
          <target state="translated">&lt;code&gt;node&lt;/code&gt; （ &lt;code&gt;ReactWrapper&lt;/code&gt; ）：正在处理的节点周围的单节点包装器</target>
        </trans-unit>
        <trans-unit id="352ba4db1610271097ce9c88df91b079b78d72ba" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;node&lt;/code&gt; (&lt;code&gt;ReactWrapper&lt;/code&gt;): A wrapper around the node being processed</source>
          <target state="translated">&lt;code&gt;node&lt;/code&gt; （ &lt;code&gt;ReactWrapper&lt;/code&gt; ）：正在处理的节点周围的包装器</target>
        </trans-unit>
        <trans-unit id="46e8a68302a273dda03b4c56d13b53055434a478" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;node&lt;/code&gt; (&lt;code&gt;ShallowWrapper&lt;/code&gt;): A single-node wrapper around the node being processed</source>
          <target state="translated">&lt;code&gt;node&lt;/code&gt; （ &lt;code&gt;ShallowWrapper&lt;/code&gt; ）：围绕正在处理的节点的单节点包装器</target>
        </trans-unit>
        <trans-unit id="66786179b50f3117e247364c2721a3db158bf91b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;node&lt;/code&gt; (&lt;code&gt;ShallowWrapper&lt;/code&gt;): A wrapper around the node being processed</source>
          <target state="translated">&lt;code&gt;node&lt;/code&gt; （ &lt;code&gt;ShallowWrapper&lt;/code&gt; ）：正在处理的节点周围的包装器</target>
        </trans-unit>
        <trans-unit id="85657b57ea657261a1bcbdbe8b37dcaefceb0864" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;nodeOrNodes&lt;/code&gt; (&lt;code&gt;ReactElement|Array&amp;lt;ReactElement&amp;gt;&lt;/code&gt;): The node or array of nodes whose presence you are detecting in the current instance's render tree.</source>
          <target state="translated">&lt;code&gt;nodeOrNodes&lt;/code&gt; （ &lt;code&gt;ReactElement|Array&amp;lt;ReactElement&amp;gt;&lt;/code&gt; ）：您正在当前实例的渲染树中检测到其存在的节点或节点阵列。</target>
        </trans-unit>
        <trans-unit id="88d58aa31147364a4efdc9f2e8271ac0112d5de1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;options.attachTo&lt;/code&gt;: (&lt;code&gt;DOMElement&lt;/code&gt; [optional]): DOM Element to attach the component to.</source>
          <target state="translated">&lt;code&gt;options.attachTo&lt;/code&gt; ：（ &lt;code&gt;DOMElement&lt;/code&gt; [可选]）：将组件附加到的DOM元素。</target>
        </trans-unit>
        <trans-unit id="21105959a5a83ca5cbf39e801aada72956dcd327" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;options.childContextTypes&lt;/code&gt;: (&lt;code&gt;Object&lt;/code&gt; [optional]): Merged contextTypes for all children of the wrapper.</source>
          <target state="translated">&lt;code&gt;options.childContextTypes&lt;/code&gt; ：（ &lt;code&gt;Object&lt;/code&gt; [可选]）：包装器所有子级的合并contextTypes。</target>
        </trans-unit>
        <trans-unit id="46aa0cc5da3f5b35ed4475d10f57c4f1068231a2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;options.context&lt;/code&gt;: (&lt;code&gt;Object&lt;/code&gt; [optional]): Context to be passed into the component</source>
          <target state="translated">&lt;code&gt;options.context&lt;/code&gt; ：（ &lt;code&gt;Object&lt;/code&gt; [可选]）：要传递到组件中的上下文</target>
        </trans-unit>
        <trans-unit id="54de248eafdd73dd648d1590b64acca824dc0267" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;options.disableLifecycleMethods&lt;/code&gt;: (&lt;code&gt;Boolean&lt;/code&gt; [optional]): If set to true, &lt;code&gt;componentDidMount&lt;/code&gt; is not called on the component, and &lt;code&gt;componentDidUpdate&lt;/code&gt; is not called after &lt;a href=&quot;shallowwrapper/setprops&quot;&gt;&lt;code&gt;setProps&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;shallowwrapper/setcontext&quot;&gt;&lt;code&gt;setContext&lt;/code&gt;&lt;/a&gt;. Default to &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;options.disableLifecycleMethods&lt;/code&gt; ：（ &lt;code&gt;Boolean&lt;/code&gt; [可选]）：如果设置为true， &lt;code&gt;componentDidMount&lt;/code&gt; 不叫部件上，和 &lt;code&gt;componentDidUpdate&lt;/code&gt; 后不叫&lt;a href=&quot;shallowwrapper/setprops&quot;&gt; &lt;code&gt;setProps&lt;/code&gt; &lt;/a&gt;和&lt;a href=&quot;shallowwrapper/setcontext&quot;&gt; &lt;code&gt;setContext&lt;/code&gt; &lt;/a&gt;。默认为 &lt;code&gt;false&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="b47ead2b8f1ef58c820f89396f3bccd1dcaf4798" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;options.disableLifecycleMethods&lt;/code&gt;: (&lt;code&gt;Boolean&lt;/code&gt; [optional]): If set to true, &lt;code&gt;componentDidMount&lt;/code&gt; is not called on the component, and &lt;code&gt;componentDidUpdate&lt;/code&gt; is not called after &lt;a href=&quot;shallowwrapper/setprops.md&quot;&gt;&lt;code&gt;setProps&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;shallowwrapper/setcontext.md&quot;&gt;&lt;code&gt;setContext&lt;/code&gt;&lt;/a&gt;. Default to &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;options.disableLifecycleMethods&lt;/code&gt; ：（ &lt;code&gt;Boolean&lt;/code&gt; [可选]）：如果设置为true， &lt;code&gt;componentDidMount&lt;/code&gt; 不叫部件上，和 &lt;code&gt;componentDidUpdate&lt;/code&gt; 后不叫&lt;a href=&quot;shallowwrapper/setprops.md&quot;&gt; &lt;code&gt;setProps&lt;/code&gt; &lt;/a&gt;和&lt;a href=&quot;shallowwrapper/setcontext.md&quot;&gt; &lt;code&gt;setContext&lt;/code&gt; &lt;/a&gt;。默认为 &lt;code&gt;false&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="ab2d0bf7e9271d65eafbb2d539d39017bc206987" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;options.ignoreProps&lt;/code&gt;: (&lt;code&gt;Boolean&lt;/code&gt; [optional]): Whether props should be omitted in the resulting string. Props are included by default.</source>
          <target state="translated">&lt;code&gt;options.ignoreProps&lt;/code&gt; ：（ &lt;code&gt;Boolean&lt;/code&gt; [可选]）：是否在结果字符串中省略props。默认情况下包括道具。</target>
        </trans-unit>
        <trans-unit id="713511aace894a39a7e50bb3bc6f46fbc52e8a13" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;options.suspenseFallback&lt;/code&gt;: (&lt;code&gt;Boolean&lt;/code&gt; [optional]): If set to true, when rendering &lt;code&gt;Suspense&lt;/code&gt; enzyme will replace all the lazy components in children with &lt;code&gt;fallback&lt;/code&gt; element prop. Otherwise it won't handle fallback of lazy component. Default to &lt;code&gt;true&lt;/code&gt;. Note: not supported in React &amp;lt; 16.6.</source>
          <target state="translated">&lt;code&gt;options.suspenseFallback&lt;/code&gt; ：（ &lt;code&gt;Boolean&lt;/code&gt; [可选]）：如果设置为true，则在渲染时， &lt;code&gt;Suspense&lt;/code&gt; 酶将使用 &lt;code&gt;fallback&lt;/code&gt; 元素prop 替换子级中的所有惰性组件。否则，它将无法处理惰性组件的后备。默认为 &lt;code&gt;true&lt;/code&gt; 。注意：React &amp;lt;16.6不支持。</target>
        </trans-unit>
        <trans-unit id="f9fc9fbd5c216378f66962101e19eef1391fc83b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;options.verbose&lt;/code&gt;: (&lt;code&gt;Boolean&lt;/code&gt; [optional]): Whether arrays and objects passed as props should be verbosely printed.</source>
          <target state="translated">&lt;code&gt;options.verbose&lt;/code&gt; ：（ &lt;code&gt;Boolean&lt;/code&gt; [可选]）：是否应详细打印作为prop传递的数组和对象。</target>
        </trans-unit>
        <trans-unit id="b30bdf889ef9ae1f20e5141dd0b1d3c3e09b59ef" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;options.wrappingComponent&lt;/code&gt;: (&lt;code&gt;ComponentType&lt;/code&gt; [optional]): A component that will render as a parent of the &lt;code&gt;node&lt;/code&gt;. It can be used to provide context to the &lt;code&gt;node&lt;/code&gt;, among other things. See the &lt;a href=&quot;reactwrapper/getwrappingcomponent&quot;&gt;&lt;code&gt;getWrappingComponent()&lt;/code&gt; docs&lt;/a&gt; for an example. &lt;strong&gt;Note&lt;/strong&gt;: &lt;code&gt;wrappingComponent&lt;/code&gt;&lt;em&gt;must&lt;/em&gt; render its children.</source>
          <target state="translated">&lt;code&gt;options.wrappingComponent&lt;/code&gt; ：（ &lt;code&gt;ComponentType&lt;/code&gt; [可选]）：一个将作为 &lt;code&gt;node&lt;/code&gt; 的父级呈现的组件。除其他事项外，它可用于为 &lt;code&gt;node&lt;/code&gt; 提供上下文。有关示例，请参见&lt;a href=&quot;reactwrapper/getwrappingcomponent&quot;&gt; &lt;code&gt;getWrappingComponent()&lt;/code&gt; 文档&lt;/a&gt;。&lt;strong&gt;注意&lt;/strong&gt;： &lt;code&gt;wrappingComponent&lt;/code&gt; &lt;em&gt;必须&lt;/em&gt;呈现其子级。</target>
        </trans-unit>
        <trans-unit id="5e884ee05317f5e52d6e5df4025573aa27bf567d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;options.wrappingComponent&lt;/code&gt;: (&lt;code&gt;ComponentType&lt;/code&gt; [optional]): A component that will render as a parent of the &lt;code&gt;node&lt;/code&gt;. It can be used to provide context to the &lt;code&gt;node&lt;/code&gt;, among other things. See the &lt;a href=&quot;shallowwrapper/getwrappingcomponent&quot;&gt;&lt;code&gt;getWrappingComponent()&lt;/code&gt; docs&lt;/a&gt; for an example. &lt;strong&gt;Note&lt;/strong&gt;: &lt;code&gt;wrappingComponent&lt;/code&gt;&lt;em&gt;must&lt;/em&gt; render its children.</source>
          <target state="translated">&lt;code&gt;options.wrappingComponent&lt;/code&gt; ：（ &lt;code&gt;ComponentType&lt;/code&gt; [可选]）：一个将作为 &lt;code&gt;node&lt;/code&gt; 的父级呈现的组件。除其他事项外，它可用于为 &lt;code&gt;node&lt;/code&gt; 提供上下文。有关示例，请参见&lt;a href=&quot;shallowwrapper/getwrappingcomponent&quot;&gt; &lt;code&gt;getWrappingComponent()&lt;/code&gt; 文档&lt;/a&gt;。&lt;strong&gt;注意&lt;/strong&gt;： &lt;code&gt;wrappingComponent&lt;/code&gt; &lt;em&gt;必须&lt;/em&gt;呈现其子级。</target>
        </trans-unit>
        <trans-unit id="207a8f915b5a348e98394db0a4b65855bc3a0487" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;options.wrappingComponentProps&lt;/code&gt;: (&lt;code&gt;Object&lt;/code&gt; [optional]): Initial props to pass to the &lt;code&gt;wrappingComponent&lt;/code&gt; if it is specified.</source>
          <target state="translated">&lt;code&gt;options.wrappingComponentProps&lt;/code&gt; ：（ &lt;code&gt;Object&lt;/code&gt; [可选]）：传递到 &lt;code&gt;wrappingComponent&lt;/code&gt; 的初始道具（如果已指定）。</target>
        </trans-unit>
        <trans-unit id="96fd4a86a0652392a4812bfa38e393e6f64d00a2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;options&lt;/code&gt; (&lt;code&gt;Object&lt;/code&gt; [optional]):</source>
          <target state="translated">&lt;code&gt;options&lt;/code&gt; （ &lt;code&gt;Object&lt;/code&gt; [可选]）：</target>
        </trans-unit>
        <trans-unit id="5bd7b98a27a4702fa5a0108392d734a6739e5269" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;package.json&lt;/code&gt;:</source>
          <target state="translated">&lt;code&gt;package.json&lt;/code&gt;:</target>
        </trans-unit>
        <trans-unit id="39d0c1de3671005e48fd7dbe7527754743620249" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;patternNode&lt;/code&gt; (&lt;code&gt;ReactElement&lt;/code&gt;): The node whose presence you are detecting in the current instance's render tree.</source>
          <target state="translated">&lt;code&gt;patternNode&lt;/code&gt; （ &lt;code&gt;ReactElement&lt;/code&gt; ）：要在当前实例的渲染树中检测到其存在的节点。</target>
        </trans-unit>
        <trans-unit id="d8f5ab70132bbf3c5ad219893fd366597fe2ef74" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;patternNode&lt;/code&gt; (&lt;code&gt;ReactElement&lt;/code&gt;): The node whose presence you are detecting in the wrapper's single node.</source>
          <target state="translated">&lt;code&gt;patternNode&lt;/code&gt; （ &lt;code&gt;ReactElement&lt;/code&gt; ）：在包装器的单个节点中要检测其存在的节点。</target>
        </trans-unit>
        <trans-unit id="52e1a94f17e1cf5675e110941ecb2eeba9ec4abb" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;patternNode&lt;/code&gt; props (attributes) must appear in the wrapper's nodes, but not the other way around. Their values must match if they do appear.</source>
          <target state="translated">&lt;code&gt;patternNode&lt;/code&gt; 道具（属性）必须出现在包装器的节点中，而不是相反。如果确实出现，则它们的值必须匹配。</target>
        </trans-unit>
        <trans-unit id="a8b5e74a8eb7042b70e01772c9b5a6c64e8a012f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;patternNode&lt;/code&gt; style CSS properties must appear in the wrapper's node's style, but not the other way around. Their values must match if they do appear.</source>
          <target state="translated">&lt;code&gt;patternNode&lt;/code&gt; 样式CSS属性必须出现在包装器节点的样式中，但不能相反。如果确实出现，则它们的值必须匹配。</target>
        </trans-unit>
        <trans-unit id="7c319efecd2d4e183045af98f2ee8a46cce656ac" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;patternNodes&lt;/code&gt; (&lt;code&gt;Array&amp;lt;ReactElement&amp;gt;&lt;/code&gt;): The array of nodes whose presence you are detecting in the current instance's render tree.</source>
          <target state="translated">&lt;code&gt;patternNodes&lt;/code&gt; （ &lt;code&gt;Array&amp;lt;ReactElement&amp;gt;&lt;/code&gt; ）：您正在当前实例的渲染树中检测到的节点的数组。</target>
        </trans-unit>
        <trans-unit id="ff064cea1fe62f97dff4ab8aa6de120874f2acf3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;predicate&lt;/code&gt; (&lt;code&gt;ReactWrapper =&amp;gt; Boolean&lt;/code&gt;): A predicate function called with the passed in wrapped nodes.</source>
          <target state="translated">&lt;code&gt;predicate&lt;/code&gt; （ &lt;code&gt;ReactWrapper =&amp;gt; Boolean&lt;/code&gt; ）：谓词函数，该函数通过传入的包装节点进行调用。</target>
        </trans-unit>
        <trans-unit id="1381e08635e951a15b5dc5065da41dbaf09a84f5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;predicate&lt;/code&gt; (&lt;code&gt;ReactWrapper =&amp;gt; Boolean&lt;/code&gt;): A predicate function that is passed a wrapped node.</source>
          <target state="translated">&lt;code&gt;predicate&lt;/code&gt; （ &lt;code&gt;ReactWrapper =&amp;gt; Boolean&lt;/code&gt; ）：传递给包装节点的谓词函数。</target>
        </trans-unit>
        <trans-unit id="23d94fca768b70ea968aa2ff011bdf36ad677b57" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;predicate&lt;/code&gt; (&lt;code&gt;ReactWrapper =&amp;gt; Boolean&lt;/code&gt;): A predicate function to match the nodes.</source>
          <target state="translated">&lt;code&gt;predicate&lt;/code&gt; （ &lt;code&gt;ReactWrapper =&amp;gt; Boolean&lt;/code&gt; ）：匹配节点的谓词函数。</target>
        </trans-unit>
        <trans-unit id="9eba376a99562cf2fd8e1f9761b52469a15a20bf" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;predicate&lt;/code&gt; (&lt;code&gt;ShallowWrapper =&amp;gt; Boolean&lt;/code&gt;): A predicate function called with the passed in wrapped nodes.</source>
          <target state="translated">&lt;code&gt;predicate&lt;/code&gt; （ &lt;code&gt;ShallowWrapper =&amp;gt; Boolean&lt;/code&gt; ）：谓词函数，该函数通过传入的包装节点进行调用。</target>
        </trans-unit>
        <trans-unit id="24c99ee9f5c400eb01fbbf0e738e85084da7617e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;predicate&lt;/code&gt; (&lt;code&gt;ShallowWrapper =&amp;gt; Boolean&lt;/code&gt;): A predicate function that is passed a wrapped node.</source>
          <target state="translated">&lt;code&gt;predicate&lt;/code&gt; （ &lt;code&gt;ShallowWrapper =&amp;gt; Boolean&lt;/code&gt; ）：传递包装节点的谓词函数。</target>
        </trans-unit>
        <trans-unit id="353ba39a7e7f75b033f0d15cf13d20e7f617beee" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;predicate&lt;/code&gt; (&lt;code&gt;ShallowWrapper =&amp;gt; Boolean&lt;/code&gt;): A predicate function to match the nodes.</source>
          <target state="translated">&lt;code&gt;predicate&lt;/code&gt; （ &lt;code&gt;ShallowWrapper =&amp;gt; Boolean&lt;/code&gt; ）：谓词函数，用于匹配节点。</target>
        </trans-unit>
        <trans-unit id="b19124f5da19ec85fafcfe4191d2a4aca844b157" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;propName&lt;/code&gt; (&lt;code&gt;String&lt;/code&gt;):</source>
          <target state="translated">&lt;code&gt;propName&lt;/code&gt; （ &lt;code&gt;String&lt;/code&gt; ）：</target>
        </trans-unit>
        <trans-unit id="b9d53d50d39762fb00034ac8e268afa1c47ca3a1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;propName&lt;/code&gt; (&lt;code&gt;String&lt;/code&gt;): The function prop that is invoked</source>
          <target state="translated">&lt;code&gt;propName&lt;/code&gt; （ &lt;code&gt;String&lt;/code&gt; ）：调用的函数prop</target>
        </trans-unit>
        <trans-unit id="7377e51f83571f606874ec97b031777e7d0fe48e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ref(refName)&lt;/code&gt; now returns the actual ref instead of a wrapper</source>
          <target state="translated">&lt;code&gt;ref(refName)&lt;/code&gt; 现在返回实际的ref而不是包装器</target>
        </trans-unit>
        <trans-unit id="6b60ea309a93d1a6a7d4b4804005f2e041d49b1f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;refName&lt;/code&gt; (&lt;code&gt;String&lt;/code&gt;): The ref attribute of the node</source>
          <target state="translated">&lt;code&gt;refName&lt;/code&gt; （ &lt;code&gt;String&lt;/code&gt; ）：节点的ref属性</target>
        </trans-unit>
        <trans-unit id="8088759753471c6338f1fda056547b0d8d4dfeb4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;render&lt;/code&gt; returns a wrapper very similar to the other renderers in enzyme, &lt;a href=&quot;mount&quot;&gt;&lt;code&gt;mount&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;shallow&quot;&gt;&lt;code&gt;shallow&lt;/code&gt;&lt;/a&gt;; however, &lt;code&gt;render&lt;/code&gt; uses a third party HTML parsing and traversal library &lt;a href=&quot;http://cheeriojs.github.io/cheerio/&quot;&gt;Cheerio&lt;/a&gt;. We believe that Cheerio handles parsing and traversing HTML extremely well, and duplicating this functionality ourselves would be a disservice.</source>
          <target state="translated">&lt;code&gt;render&lt;/code&gt; 返回一个包装器，该包装器与酶，&lt;a href=&quot;mount&quot;&gt; &lt;code&gt;mount&lt;/code&gt; &lt;/a&gt;和&lt;a href=&quot;shallow&quot;&gt; &lt;code&gt;shallow&lt;/code&gt; 中&lt;/a&gt;的其他渲染器非常相似；但是， &lt;code&gt;render&lt;/code&gt; 使用第三方HTML解析和遍历库&lt;a href=&quot;http://cheeriojs.github.io/cheerio/&quot;&gt;Cheerio&lt;/a&gt;。我们认为，Che​​erio能够很好地处理HTML的解析和遍历，而我们自己复制此功能将是不利的。</target>
        </trans-unit>
        <trans-unit id="3a7ebda3f5307394e7389dacf06a2eca1775be66" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;selector&lt;/code&gt; (&lt;a href=&quot;../selector&quot;&gt;&lt;code&gt;EnzymeSelector&lt;/code&gt;&lt;/a&gt; [optional]): A selector to filter the children by.</source>
          <target state="translated">&lt;code&gt;selector&lt;/code&gt; （&lt;a href=&quot;../selector&quot;&gt; &lt;code&gt;EnzymeSelector&lt;/code&gt; &lt;/a&gt; [可选]）：用于筛选子项的选择器。</target>
        </trans-unit>
        <trans-unit id="7135a335a7c1d8a07d43e307c6d7115960c91a77" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;selector&lt;/code&gt; (&lt;a href=&quot;../selector&quot;&gt;&lt;code&gt;EnzymeSelector&lt;/code&gt;&lt;/a&gt; [optional]): The selector to check existence for.</source>
          <target state="translated">&lt;code&gt;selector&lt;/code&gt; （&lt;a href=&quot;../selector&quot;&gt; &lt;code&gt;EnzymeSelector&lt;/code&gt; &lt;/a&gt; [可选]）：用于检查是否存在的选择器。</target>
        </trans-unit>
        <trans-unit id="320957adeb511542dbee13c625460427a584d9b9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;selector&lt;/code&gt; (&lt;a href=&quot;../selector&quot;&gt;&lt;code&gt;EnzymeSelector&lt;/code&gt;&lt;/a&gt; [optional]): The selector to filter the parents by.</source>
          <target state="translated">&lt;code&gt;selector&lt;/code&gt; （&lt;a href=&quot;../selector&quot;&gt; &lt;code&gt;EnzymeSelector&lt;/code&gt; &lt;/a&gt; [可选]）：用于过滤父项的选择器。</target>
        </trans-unit>
        <trans-unit id="8b0098a13d72047d1035d780e50464fbe31bc17e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;selector&lt;/code&gt; (&lt;a href=&quot;../selector&quot;&gt;&lt;code&gt;EnzymeSelector&lt;/code&gt;&lt;/a&gt;): The selector to match.</source>
          <target state="translated">&lt;code&gt;selector&lt;/code&gt; （&lt;a href=&quot;../selector&quot;&gt; &lt;code&gt;EnzymeSelector&lt;/code&gt; &lt;/a&gt;）：要匹配的选择器。</target>
        </trans-unit>
        <trans-unit id="b35550fe8a37629aae47924f22fc6dedc5770cd6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;useCallback()&lt;/code&gt; doesn't memoize callback in React shallow renderer. &lt;a href=&quot;https://github.com/facebook/react/issues/15774&quot;&gt;Related issue&lt;/a&gt;</source>
          <target state="translated">&lt;code&gt;useCallback()&lt;/code&gt; 不会在React浅层渲染器中记录回调。&lt;a href=&quot;https://github.com/facebook/react/issues/15774&quot;&gt;相关问题&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="3d27842f4149cc132e58854e51f27eb6baea0d18" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;useEffect()&lt;/code&gt; and &lt;code&gt;useLayoutEffect()&lt;/code&gt; don't get called in the React shallow renderer. &lt;a href=&quot;https://github.com/facebook/react/issues/15275&quot;&gt;Related issue&lt;/a&gt;</source>
          <target state="translated">&lt;code&gt;useEffect()&lt;/code&gt; 在React浅层渲染器中不会调用useEffect（）和 &lt;code&gt;useLayoutEffect()&lt;/code&gt; 。&lt;a href=&quot;https://github.com/facebook/react/issues/15275&quot;&gt;相关问题&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="f543ae24bb2a91ffe140390a6b5fc3b47c4a22fd" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;value&lt;/code&gt; (&lt;code&gt;T&lt;/code&gt;): The value returned by the previous invocation of this function</source>
          <target state="translated">&lt;code&gt;value&lt;/code&gt; （ &lt;code&gt;T&lt;/code&gt; ）：上一次调用此函数返回的值</target>
        </trans-unit>
        <trans-unit id="42bcff12a0041b7cf0871c4aab2096b36ea04632" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;wrapper.find(&quot;[aria-expanded=true]&quot;).hostNodes().debug()&lt;/code&gt; will now return:</source>
          <target state="translated">&lt;code&gt;wrapper.find(&quot;[aria-expanded=true]&quot;).hostNodes().debug()&lt;/code&gt; 现在将返回：</target>
        </trans-unit>
        <trans-unit id="ad0eebe14cabf68c723be7978864b8d00134d781" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Deprecated&lt;/em&gt;: Use &lt;a href=&quot;reactwrapper/exists&quot;&gt;.exists()&lt;/a&gt; instead.</source>
          <target state="translated">&lt;em&gt;不推荐使用&lt;/em&gt;：改用&lt;a href=&quot;reactwrapper/exists&quot;&gt;.exists（）&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="b5e189bdcbbfeacc821f6dc558916906f91c9b65" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Deprecated&lt;/em&gt;: Use &lt;a href=&quot;reactwrapper/exists&quot;&gt;&lt;code&gt;.exists()&lt;/code&gt;&lt;/a&gt; instead.</source>
          <target state="translated">&lt;em&gt;不推荐使用&lt;/em&gt;：改用&lt;a href=&quot;reactwrapper/exists&quot;&gt; &lt;code&gt;.exists()&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="30ac4d71f8e0c5c5c51fd0f5e5b149fad5c2c55f" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Deprecated&lt;/em&gt;: Use &lt;a href=&quot;shallowwrapper/exists&quot;&gt;.exists()&lt;/a&gt; instead.</source>
          <target state="translated">&lt;em&gt;不推荐使用&lt;/em&gt;：改用&lt;a href=&quot;shallowwrapper/exists&quot;&gt;.exists（）&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="71060dac6eac9584cedbd0b9e07c8bdfc7f22c43" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Deprecated&lt;/em&gt;: Use &lt;a href=&quot;shallowwrapper/exists&quot;&gt;&lt;code&gt;.exists()&lt;/code&gt;&lt;/a&gt; instead.</source>
          <target state="translated">&lt;em&gt;不推荐使用&lt;/em&gt;：改用&lt;a href=&quot;shallowwrapper/exists&quot;&gt; &lt;code&gt;.exists()&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="a6ee636dd6ecbf3a519deccd73795beb3caf504d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Deprecated&lt;/strong&gt;: Use &lt;a href=&quot;exists&quot;&gt;.exists()&lt;/a&gt; instead.</source>
          <target state="translated">&lt;strong&gt;不推荐使用&lt;/strong&gt;：改用&lt;a href=&quot;exists&quot;&gt;.exists（）&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="47ae20f3ed55947635a1d9e6779fce8af7fba2a7" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Deprecated&lt;/strong&gt;: Use &lt;a href=&quot;exists&quot;&gt;&lt;code&gt;.exists()&lt;/code&gt;&lt;/a&gt; instead.</source>
          <target state="translated">&lt;strong&gt;不推荐使用&lt;/strong&gt;：改用&lt;a href=&quot;exists&quot;&gt; &lt;code&gt;.exists()&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="c347ab0c6038705e55b13eaed3ba526ceaf04f57" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: unlike shallow or static rendering, full rendering actually mounts the component in the DOM, which means that tests can affect each other if they are all using the same DOM. Keep that in mind while writing your tests and, if necessary, use &lt;a href=&quot;reactwrapper/unmount&quot;&gt;&lt;code&gt;.unmount()&lt;/code&gt;&lt;/a&gt; or something similar as cleanup.</source>
          <target state="translated">&lt;strong&gt;注意&lt;/strong&gt;：与浅呈现或静态呈现不同，完全呈现实际上将组件安装在DOM中，这意味着如果测试全部使用相同的DOM，则它们可能会相互影响。在编写测试时，请记住这一点，并在必要时使用&lt;a href=&quot;reactwrapper/unmount&quot;&gt; &lt;code&gt;.unmount()&lt;/code&gt; &lt;/a&gt;或类似清理的内容。</target>
        </trans-unit>
        <trans-unit id="9495eaa8e29f02c1d8fea95beb914a3d1ea34ee6" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;React Key and Ref Props&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;反应关键和参考道具&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="d24b3e543fedbb0fd4488bf72392857e2adc1f62" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;The Key and Ref Props&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;关键和参考道具&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="fb3182f387b23f7c3b2cc9a112697edd81a7772c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;The most important part is to ensure that the test runs with the &lt;code&gt;jestEnvironment&lt;/code&gt; set to &lt;code&gt;jsdom&lt;/code&gt;&lt;/strong&gt; - one way is to include a &lt;code&gt;/* @jest-environment jsdom */&lt;/code&gt; comment at the top of the file.</source>
          <target state="translated">&lt;strong&gt;最重要的部分是确保在 &lt;code&gt;jestEnvironment&lt;/code&gt; 设置为 &lt;code&gt;jsdom&lt;/code&gt; 的情况下&lt;/strong&gt;&lt;strong&gt;运行测试&lt;/strong&gt; -一种方法是在文件顶部包含 &lt;code&gt;/* @jest-environment jsdom */&lt;/code&gt; 注释。</target>
        </trans-unit>
        <trans-unit id="807097e186ec0348c982acfd4d6d87b289b22eb6" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Undefined Properties&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;未定义的属性&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="21f5e794a28924461e65e65b06d3500058399a6b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Want more CSS support?&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;需要更多CSS支持吗？&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="38f525a1f877f57133c35a298271b482a4c54493" translate="yes" xml:space="preserve">
          <source>A common pattern to trigger handlers with &lt;code&gt;.act()&lt;/code&gt; and assert is:</source>
          <target state="translated">使用 &lt;code&gt;.act()&lt;/code&gt; 和assert触发处理程序的常见模式是：</target>
        </trans-unit>
        <trans-unit id="2a64b0b3a0c1bc433e5b98a310aa3329540b2030" translate="yes" xml:space="preserve">
          <source>A method that re-mounts the component, if it is not currently mounted. This can be used to simulate a component going through an unmount/mount lifecycle.</source>
          <target state="translated">如果当前没有安装,则重新安装组件的方法。该方法可用于模拟组件的卸载/挂载生命周期。</target>
        </trans-unit>
        <trans-unit id="be508415d82e8959a3016eebe3438478c8f03124" translate="yes" xml:space="preserve">
          <source>A method that re-mounts the component.</source>
          <target state="translated">一种重新安装组件的方法。</target>
        </trans-unit>
        <trans-unit id="91720ae87da99eb05f6d35949b98d8fcd154dfd2" translate="yes" xml:space="preserve">
          <source>A method that sets the context of the root component, and re-renders. Useful for when you are wanting to test how the component behaves over time with changing contexts.</source>
          <target state="translated">一个设置根组件的上下文并重新渲染的方法。当你想测试组件在改变上下文的情况下如何表现时,该方法很有用。</target>
        </trans-unit>
        <trans-unit id="065b13a13ff98e5367c23638fd31c488c8135ee7" translate="yes" xml:space="preserve">
          <source>A method that sets the props of the root component, and re-renders. Useful for when you are wanting to test how the component behaves over time with changing props. Calling this, for instance, will call the &lt;code&gt;componentWillReceiveProps&lt;/code&gt; lifecycle method.</source>
          <target state="translated">设置根组件的props并重新渲染的方法。当您想通过更改道具来测试组件随时间的行为时很有用。例如，调用此方法将调用 &lt;code&gt;componentWillReceiveProps&lt;/code&gt; 生命周期方法。</target>
        </trans-unit>
        <trans-unit id="132b786abf7a5429f20b8d9c66b3d60ce0b64a04" translate="yes" xml:space="preserve">
          <source>A method that un-mounts the component.</source>
          <target state="translated">一种解除组件安装的方法。</target>
        </trans-unit>
        <trans-unit id="ad4ef4d88128bca8b5e2ad7ebe46ad30c8a5a8bc" translate="yes" xml:space="preserve">
          <source>A method that unmounts the component. This can be used to simulate a component going through an unmount/mount lifecycle.</source>
          <target state="translated">一个卸载组件的方法。它可以用来模拟一个组件的卸载/挂载生命周期。</target>
        </trans-unit>
        <trans-unit id="06b119d9f4dd7e0d79d0eae4e22435eb2301678f" translate="yes" xml:space="preserve">
          <source>A method to invoke &lt;code&gt;setState()&lt;/code&gt; on the root component instance, similar to how you might in the methods of the component, and re-renders. This method is useful for testing your component in hard-to-achieve states, however should be used sparingly. If possible, you should utilize your component's external API (which is often accessible via &lt;a href=&quot;instance&quot;&gt;&lt;code&gt;.instance()&lt;/code&gt;&lt;/a&gt;) in order to get it into whatever state you want to test, in order to be as accurate of a test as possible. This is not always practical, however.</source>
          <target state="translated">一种在根组件实例上调用 &lt;code&gt;setState()&lt;/code&gt; 的方法，类似于您可以在组件的方法中进行重新渲染的方法。此方法对于在难以实现的状态下测试组件很有用，但是应谨慎使用。如果可能的话，您应该利用组件的外部API（通常可以通过&lt;a href=&quot;instance&quot;&gt; &lt;code&gt;.instance()&lt;/code&gt; 进行&lt;/a&gt;访问），以使其进入要测试的任何状态，从而尽可能地提高测试的准确性。但是，这并不总是可行的。</target>
        </trans-unit>
        <trans-unit id="b276f94cd8d0e74a21de6e5939b8c10ca9a975d6" translate="yes" xml:space="preserve">
          <source>API Reference</source>
          <target state="translated">API参考</target>
        </trans-unit>
        <trans-unit id="d0fbf0f0ea3852d4c9207721953a3f8b296a7c7a" translate="yes" xml:space="preserve">
          <source>AVA</source>
          <target state="translated">AVA</target>
        </trans-unit>
        <trans-unit id="adba83d0f299b6ad8ce15ef730a1aa3a129c36b4" translate="yes" xml:space="preserve">
          <source>Adapter Package</source>
          <target state="translated">适配器包</target>
        </trans-unit>
        <trans-unit id="2a6850da08a924da1eaf0364654b085408ec9dea" translate="yes" xml:space="preserve">
          <source>Airbnb has one of the largest enzyme test suites, coming in at around 30,000 enzyme unit tests. After upgrading enzyme to v3.x in Airbnb's code base, 99.6% of these tests succeeded with no modifications at all. Most of the tests that broke we found to be easy to fix, and some we found to actually depend on what could arguably be considered a bug in v2.x, and the breakage was actually desired.</source>
          <target state="translated">Airbnb拥有最大的enzyme测试套件之一,大约有3万个enzyme单元测试。在Airbnb的代码库中,将enzyme升级到v3.x后,99.6%的测试在完全没有修改的情况下成功了。大部分中断的测试我们发现很容易修复,有些测试我们发现其实取决于v2.x中可以说是一个bug,而中断的测试其实是想要的。</target>
        </trans-unit>
        <trans-unit id="678cb01863c9335e9e6de08cd501949bc020ec93" translate="yes" xml:space="preserve">
          <source>Alternative karma-webpack setup</source>
          <target state="translated">备用的因果报应-webpack设置</target>
        </trans-unit>
        <trans-unit id="81a8eac680be5e51aaf3f3f43c448405e7ae64f2" translate="yes" xml:space="preserve">
          <source>Although this is a breaking change, I believe the new behavior is closer to what people would actually expect and want. Having enzyme wrappers be immutable results in more deterministic tests that are less prone to flakiness from external factors.</source>
          <target state="translated">虽然这是一个突破性的变化,但我相信新的行为更接近人们的实际期望和需求。让酶包体成为不可改变的结果,会导致更多确定性的测试,不容易受到外部因素的影响。</target>
        </trans-unit>
        <trans-unit id="4483a3bbbf76d1cd1062ad90129336541849e816" translate="yes" xml:space="preserve">
          <source>And then you're ready to go! In your test files you can simply &lt;code&gt;require&lt;/code&gt; or &lt;code&gt;import&lt;/code&gt; enzyme:</source>
          <target state="translated">然后您就可以开始了！在您的测试文件，您可以简单地 &lt;code&gt;require&lt;/code&gt; 或 &lt;code&gt;import&lt;/code&gt; 酶：</target>
        </trans-unit>
        <trans-unit id="d7599d196da39e6e2f3491b423ae99a3fcf06f87" translate="yes" xml:space="preserve">
          <source>Anywhere you want to use Enzyme, import the Enzyme setup file just as you would Enzyme itself.</source>
          <target state="translated">在任何你想使用酵素的地方,导入酵素设置文件,就像导入酵素本身一样。</target>
        </trans-unit>
        <trans-unit id="b41a3cead6f4d75a22a23c4237c12c8d8bf7c92c" translate="yes" xml:space="preserve">
          <source>Applies the provided reducing function to every node in the wrapper to reduce to a single value. Each node is passed in as a &lt;code&gt;ReactWrapper&lt;/code&gt;, and is processed from left to right.</source>
          <target state="translated">将提供的缩减函数应用于包装器中的每个节点，以缩减为单个值。每个节点都作为 &lt;code&gt;ReactWrapper&lt;/code&gt; 传入，并从左到右进行处理。</target>
        </trans-unit>
        <trans-unit id="fde9c1cb97e8f5ce30030d414512774f7424fa66" translate="yes" xml:space="preserve">
          <source>Applies the provided reducing function to every node in the wrapper to reduce to a single value. Each node is passed in as a &lt;code&gt;ReactWrapper&lt;/code&gt;, and is processed from right to left.</source>
          <target state="translated">将提供的reduce函数应用于包装器中的每个节点，以简化为单个值。每个节点都作为 &lt;code&gt;ReactWrapper&lt;/code&gt; 传入，并从右到左进行处理。</target>
        </trans-unit>
        <trans-unit id="b6ad060ba1737f9c06e22179778882627b9f798d" translate="yes" xml:space="preserve">
          <source>Applies the provided reducing function to every node in the wrapper to reduce to a single value. Each node is passed in as a &lt;code&gt;ShallowWrapper&lt;/code&gt;, and is processed from left to right.</source>
          <target state="translated">将提供的缩减函数应用于包装器中的每个节点，以缩减为单个值。每个节点作为 &lt;code&gt;ShallowWrapper&lt;/code&gt; 传入，并从左到右进行处理。</target>
        </trans-unit>
        <trans-unit id="9314b70da5d0eddf7985e6c6b2925475d087c171" translate="yes" xml:space="preserve">
          <source>Applies the provided reducing function to every node in the wrapper to reduce to a single value. Each node is passed in as a &lt;code&gt;ShallowWrapper&lt;/code&gt;, and is processed from right to left.</source>
          <target state="translated">将提供的缩减函数应用于包装器中的每个节点，以缩减为单个值。每个节点作为 &lt;code&gt;ShallowWrapper&lt;/code&gt; 传入，并从右到左进行处理。</target>
        </trans-unit>
        <trans-unit id="99c41fbcb3006b15ff9086cdd6105d300104215c" translate="yes" xml:space="preserve">
          <source>Are you here to check whether or not Enzyme is compatible with React 16? Are you currently using Enzyme 2.x? Great! Check out our &lt;a href=&quot;docs/guides/migration-from-2-to-3&quot;&gt;migration guide&lt;/a&gt; for help moving on to Enzyme v3 where React 16 is supported.</source>
          <target state="translated">您是在这里检查酶是否与React 16兼容吗？您当前正在使用酶2.x吗？大！请查看我们的&lt;a href=&quot;docs/guides/migration-from-2-to-3&quot;&gt;迁移指南，&lt;/a&gt;以获取继续支持Enzyme v3（支持React 16）的帮助。</target>
        </trans-unit>
        <trans-unit id="cbb9fa252e60809efa55a7ad83aea5438ef56753" translate="yes" xml:space="preserve">
          <source>Arguments</source>
          <target state="translated">Arguments</target>
        </trans-unit>
        <trans-unit id="f6971b937ddf14b8f0076da118da58f9ad7760fb" translate="yes" xml:space="preserve">
          <source>As a result, a standalone script like the one below is generally a good approach:</source>
          <target state="translated">因此,像下面这样的独立脚本一般是个好办法。</target>
        </trans-unit>
        <trans-unit id="3c3b8180d983e8fde485964450481680b95dd8f7" translate="yes" xml:space="preserve">
          <source>As noted in the function signature above passing a mock event is optional. It is worth noting that &lt;code&gt;ReactWrapper&lt;/code&gt; will pass a &lt;code&gt;SyntheticEvent&lt;/code&gt; object to the event handler in your code. Keep in mind that if the code you are testing uses properties that are not included in the &lt;code&gt;SyntheticEvent&lt;/code&gt;, for instance &lt;code&gt;event.target.value&lt;/code&gt;, you will need to provide a mock event like so &lt;code&gt;.simulate(&quot;change&quot;, { target: { value: &quot;foo&quot; }})&lt;/code&gt; for it to work.</source>
          <target state="translated">如上面的函数签名所述，传递模拟事件是可选的。值得注意的是， &lt;code&gt;ReactWrapper&lt;/code&gt; 会将 &lt;code&gt;SyntheticEvent&lt;/code&gt; 对象传递给代码中的事件处理程序。请记住，如果要测试的代码使用的是 &lt;code&gt;SyntheticEvent&lt;/code&gt; 中未包含的属性，例如 &lt;code&gt;event.target.value&lt;/code&gt; ，则需要提供一个模拟事件，例如 &lt;code&gt;.simulate(&quot;change&quot;, { target: { value: &quot;foo&quot; }})&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="678c27c52881376a9093cf7b5e15e7585f1f0a72" translate="yes" xml:space="preserve">
          <source>As noted in the function signature above passing a mock event is optional. Keep in mind that if the code you are testing uses the event for something like, calling &lt;code&gt;event.preventDefault()&lt;/code&gt; or accessing any of its properties you must provide a mock event object with the properties your code requires.</source>
          <target state="translated">如上面的函数签名所述，传递模拟事件是可选的。请记住，如果要测试的代码将事件用于类似事件，例如调用 &lt;code&gt;event.preventDefault()&lt;/code&gt; 或访问其任何属性，则必须为模拟事件对象提供代码所需的属性。</target>
        </trans-unit>
        <trans-unit id="ad8757bc7723651624f9093d901f156595153317" translate="yes" xml:space="preserve">
          <source>As of Enzyme v3, the &lt;code&gt;shallow&lt;/code&gt; API does call React lifecycle methods such as &lt;code&gt;componentDidMount&lt;/code&gt; and &lt;code&gt;componentDidUpdate&lt;/code&gt;. You can read more about this in the &lt;a href=&quot;../guides/migration-from-2-to-3#lifecycle-methods&quot;&gt;version 3 migration guide&lt;/a&gt;.</source>
          <target state="translated">从Enzyme v3开始， &lt;code&gt;shallow&lt;/code&gt; API确实会调用React生命周期方法，例如 &lt;code&gt;componentDidMount&lt;/code&gt; 和 &lt;code&gt;componentDidUpdate&lt;/code&gt; 。您可以在&lt;a href=&quot;../guides/migration-from-2-to-3#lifecycle-methods&quot;&gt;版本3迁移指南中&lt;/a&gt;了解有关此内容的更多信息。</target>
        </trans-unit>
        <trans-unit id="cfb7b8ce7bddcbdb66fc0d77fd4fe1c9e2c699a4" translate="yes" xml:space="preserve">
          <source>As of v0.18, React Native uses React as a dependency rather than a forked version of the library, which means it is now possible to use enzyme's &lt;code&gt;shallow&lt;/code&gt; with React Native components.</source>
          <target state="translated">从v0.18开始，React Native使用React作为依赖关系，而不是该库的分叉版本，这意味着现在可以在React Native组件中使用酶的 &lt;code&gt;shallow&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="e15b63ed6a239a36c9a34b938df893a7540c2f98" translate="yes" xml:space="preserve">
          <source>As we can see, we can easily assert on the text and the count of this component. But we haven't caused any state changes yet. Let's see what it looks like when we simulate a &lt;code&gt;click&lt;/code&gt; event on the increment and decrement buttons:</source>
          <target state="translated">如我们所见，我们可以轻松地对该组件的文本和数量进行断言。但是我们还没有引起任何状态更改。让我们看看在递增和递减按钮上模拟 &lt;code&gt;click&lt;/code&gt; 事件时的外观：</target>
        </trans-unit>
        <trans-unit id="d59e1c17e2626f04e427fc226ea0f35285b25d27" translate="yes" xml:space="preserve">
          <source>At the moment, Enzyme has adapters that provide compatibility with &lt;code&gt;React 16.x&lt;/code&gt;, &lt;code&gt;React 15.x&lt;/code&gt;, &lt;code&gt;React 0.14.x&lt;/code&gt; and &lt;code&gt;React 0.13.x&lt;/code&gt;.</source>
          <target state="translated">目前，Enzyme具有可与 &lt;code&gt;React 16.x&lt;/code&gt; ， &lt;code&gt;React 15.x&lt;/code&gt; ， &lt;code&gt;React 0.14.x&lt;/code&gt; 和 &lt;code&gt;React 0.13.x&lt;/code&gt; 兼容的适配器。</target>
        </trans-unit>
        <trans-unit id="03c6f277e5a749aaf16196ccaea9e0be64eef201" translate="yes" xml:space="preserve">
          <source>At the time of writing this, enzyme publishes &quot;officially supported&quot; adapters for React 0.13.x, 0.14.x, 15.x, and 16.x. These adapters are npm packages of the form &lt;code&gt;enzyme-adapter-react-{{version}}&lt;/code&gt;.</source>
          <target state="translated">在撰写本文时，酶为React 0.13.x，0.14.x，15.x和16.x发布了&amp;ldquo;官方支持&amp;rdquo;的适配器。这些适配器是npm软件包，形式为 &lt;code&gt;enzyme-adapter-react-{{version}}&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="da5a001a877099e1eeed13e42a6b6a99e7927978" translate="yes" xml:space="preserve">
          <source>At this point, there is an ambiguity about what &lt;code&gt;wrapper.find(Box).children()&lt;/code&gt; should return. Although the &lt;code&gt;&amp;lt;Box ... /&amp;gt;&lt;/code&gt; element has a &lt;code&gt;children&lt;/code&gt; prop of &lt;code&gt;&amp;lt;div className=&quot;div&quot; /&amp;gt;&lt;/code&gt;, the actual rendered children of the element that the box component renders is a &lt;code&gt;&amp;lt;div className=&quot;box&quot;&amp;gt;...&amp;lt;/div&amp;gt;&lt;/code&gt; element.</source>
          <target state="translated">在这一点上，对于 &lt;code&gt;wrapper.find(Box).children()&lt;/code&gt; 应该返回什么是模棱两可的。尽管 &lt;code&gt;&amp;lt;Box ... /&amp;gt;&lt;/code&gt; 元素的 &lt;code&gt;children&lt;/code&gt; 属性为 &lt;code&gt;&amp;lt;div className=&quot;div&quot; /&amp;gt;&lt;/code&gt; ，但box组件呈现的元素的实际呈现的子元素是 &lt;code&gt;&amp;lt;div className=&quot;box&quot;&amp;gt;...&amp;lt;/div&amp;gt;&lt;/code&gt; 元素。</target>
        </trans-unit>
        <trans-unit id="5811997356e555a7062092490e6cdfb3c2bab657" translate="yes" xml:space="preserve">
          <source>Basic Enzyme setup with Karma</source>
          <target state="translated">Karma的基本酵素设置</target>
        </trans-unit>
        <trans-unit id="b20cbc384159fd820ed034fd3615298ec09f5902" translate="yes" xml:space="preserve">
          <source>Basic Usage</source>
          <target state="translated">基本使用方法</target>
        </trans-unit>
        <trans-unit id="fd4679572c2a75d69074d5dce995284cb1546cdd" translate="yes" xml:space="preserve">
          <source>CSS Selector</source>
          <target state="translated">CSS选择器</target>
        </trans-unit>
        <trans-unit id="d3756b0ae68bbc9d47fa5f4daada451319ed08ab" translate="yes" xml:space="preserve">
          <source>CSS Selector results and &lt;code&gt;hostNodes()&lt;/code&gt;</source>
          <target state="translated">CSS选择器结果和 &lt;code&gt;hostNodes()&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="d1d4d66a2ab99f965a1c9835a511daf661b0d51f" translate="yes" xml:space="preserve">
          <source>CSS Selectors:</source>
          <target state="translated">CSS选择器。</target>
        </trans-unit>
        <trans-unit id="268eabfb4175fc0090951c35b5d5fa8d9ce2de7a" translate="yes" xml:space="preserve">
          <source>Calling &lt;code&gt;props()&lt;/code&gt; after a state change</source>
          <target state="translated">状态更改后调用 &lt;code&gt;props()&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="287d8cdd722d558cd3fe3587323eac06d457af3b" translate="yes" xml:space="preserve">
          <source>Calls &lt;code&gt;.forceUpdate()&lt;/code&gt; on the root component instance.</source>
          <target state="translated">在根组件实例上调用 &lt;code&gt;.forceUpdate()&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="17235702ae1f63bceb977ea0236680fd89435d13" translate="yes" xml:space="preserve">
          <source>Cheerio has been updated, thus &lt;code&gt;render(...)&lt;/code&gt; has been updated as well</source>
          <target state="translated">Cheerio已更新，因此 &lt;code&gt;render(...)&lt;/code&gt; 也已更新</target>
        </trans-unit>
        <trans-unit id="86e54558a727f34642f8027f0919c63723bd2740" translate="yes" xml:space="preserve">
          <source>Common Gotchas</source>
          <target state="translated">常见的Gotchas</target>
        </trans-unit>
        <trans-unit id="0691f3aadb9f444736a4a6807d958628c9b6c003" translate="yes" xml:space="preserve">
          <source>Component Constructors:</source>
          <target state="translated">组件构造器。</target>
        </trans-unit>
        <trans-unit id="6cdf67e78fe3fc309046b6cb42a38025a05f8c56" translate="yes" xml:space="preserve">
          <source>Component Display Name:</source>
          <target state="translated">组件显示名称。</target>
        </trans-unit>
        <trans-unit id="5a7283632e9f0f972a91ad4fde1fcda959cd0028" translate="yes" xml:space="preserve">
          <source>Configure Enzyme</source>
          <target state="translated">酶的配置</target>
        </trans-unit>
        <trans-unit id="d7edce30a0f780a1fd04fa1de2b5559aa8b7fb82" translate="yes" xml:space="preserve">
          <source>Configure enzyme with other test libraries and include JSDOM on the fly</source>
          <target state="translated">用其他测试库配置酶,并在飞行中加入JSDOM。</target>
        </trans-unit>
        <trans-unit id="00fc6493d8e585ad15cc6acfedf12476ec058f0f" translate="yes" xml:space="preserve">
          <source>Configure with Jest</source>
          <target state="translated">使用Jest进行配置</target>
        </trans-unit>
        <trans-unit id="bf435256ca2679ca437b5835568c416eb16f8708" translate="yes" xml:space="preserve">
          <source>Configuring an Adapter</source>
          <target state="translated">配置适配器</target>
        </trans-unit>
        <trans-unit id="761174dc2bc4ccb22cf00d8cce9f0c420b66dd65" translate="yes" xml:space="preserve">
          <source>Configuring your Adapter</source>
          <target state="translated">配置您的适配器</target>
        </trans-unit>
        <trans-unit id="2eed0c1e594b080862ea4398d7b2e0bd6e8900dc" translate="yes" xml:space="preserve">
          <source>Consider the following simple react component:</source>
          <target state="translated">考虑以下简单的反应组件。</target>
        </trans-unit>
        <trans-unit id="2d82a4b27a4b305690d5ac612046a955778a9fa5" translate="yes" xml:space="preserve">
          <source>Contributing</source>
          <target state="translated">Contributing</target>
        </trans-unit>
        <trans-unit id="fad2797569bbffc15d93e080ac0714e2df9e3e01" translate="yes" xml:space="preserve">
          <source>Create a file prefixed with enzyme.test.ts for example &lt;code&gt;component.enzyme.test.js&lt;/code&gt;:</source>
          <target state="translated">创建一个以酶.test.ts为前缀的文件，例如 &lt;code&gt;component.enzyme.test.js&lt;/code&gt; ：</target>
        </trans-unit>
        <trans-unit id="170e413c978b725737646772adb70eac1f05f394" translate="yes" xml:space="preserve">
          <source>Create a separate test file</source>
          <target state="translated">创建一个单独的测试文件</target>
        </trans-unit>
        <trans-unit id="0d651fdaca48f800a1c3940cff87bf6383cb9c5e" translate="yes" xml:space="preserve">
          <source>Create an Enzyme setup file. This file will configure Enzyme with the appropriate React adapter. It can also be used to initialize any that you'd like available for all tests. To avoid having to import this file and Enzyme, you can re-export all Enzyme exports from this file and just import it.</source>
          <target state="translated">创建一个Enzyme设置文件。这个文件将用适当的React适配器配置Enzyme。它也可以用来初始化任何你想为所有测试提供的。为了避免必须导入这个文件和Enzyme,你可以从这个文件重新导出所有Enzyme导出,然后只需导入它。</target>
        </trans-unit>
        <trans-unit id="203704e612b15fd6235feea182a8d35117f77f72" translate="yes" xml:space="preserve">
          <source>Create or update a &lt;code&gt;jest.config.js&lt;/code&gt; file at the root of your project to include the &lt;code&gt;setupFilesAfterEnv&lt;/code&gt; setting:</source>
          <target state="translated">在项目的根目录中创建或更新 &lt;code&gt;jest.config.js&lt;/code&gt; 文件，以包含 &lt;code&gt;setupFilesAfterEnv&lt;/code&gt; 设置：</target>
        </trans-unit>
        <trans-unit id="8357168650fe2b93cbc3b4fc12c67f9d373f3401" translate="yes" xml:space="preserve">
          <source>Currently, event simulation for the shallow renderer does not propagate as one would normally expect in a real environment. As a result, one must call &lt;code&gt;.simulate()&lt;/code&gt; on the actual node that has the event handler set.</source>
          <target state="translated">当前，浅层渲染器的事件模拟没有像在实际环境中通常期望的那样传播。结果，必须在设置了事件处理程序的实际节点上调用 &lt;code&gt;.simulate()&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="cc09bbc77f2b6d17035370a6c8fbdd6cd54942fa" translate="yes" xml:space="preserve">
          <source>Default example configuration for Jest and JSDOM replacement</source>
          <target state="translated">Jest和JSDOM替换的默认示例配置。</target>
        </trans-unit>
        <trans-unit id="b05a4217286b9d708c8fe326a27dc6d564a24844" translate="yes" xml:space="preserve">
          <source>Detaches the react tree from the DOM. Runs &lt;code&gt;ReactDOM.unmountComponentAtNode()&lt;/code&gt; under the hood.</source>
          <target state="translated">从DOM分离反应树。在 &lt;code&gt;ReactDOM.unmountComponentAtNode()&lt;/code&gt; 运行ReactDOM.unmountComponentAtNode（）。</target>
        </trans-unit>
        <trans-unit id="23a2649c982fb9f04442ca32f85ab606907a24c5" translate="yes" xml:space="preserve">
          <source>ES5:</source>
          <target state="translated">ES5:</target>
        </trans-unit>
        <trans-unit id="f5041e09f7258cafa9baa37f0a577cc3cafdd1c5" translate="yes" xml:space="preserve">
          <source>ES6:</source>
          <target state="translated">ES6:</target>
        </trans-unit>
        <trans-unit id="ca295a5986f0f91a44191ce05c61a8025fc02fe8" translate="yes" xml:space="preserve">
          <source>Each adapter may have additional peer dependencies which you will need to install as well. For instance, &lt;code&gt;enzyme-adapter-react-16&lt;/code&gt; has peer dependencies on &lt;code&gt;react&lt;/code&gt; and &lt;code&gt;react-dom&lt;/code&gt;.</source>
          <target state="translated">每个适配器可能还具有其他对等依赖性，您也需要安装它们。例如， &lt;code&gt;enzyme-adapter-react-16&lt;/code&gt; 具有对 &lt;code&gt;react&lt;/code&gt; 和 &lt;code&gt;react-dom&lt;/code&gt; 的同级依赖。</target>
        </trans-unit>
        <trans-unit id="ab29fa8a56ff145087da27a089e58c2eca6b159a" translate="yes" xml:space="preserve">
          <source>Element referential identity is no longer preserved</source>
          <target state="translated">元素引用身份不再保留</target>
        </trans-unit>
        <trans-unit id="9d818071488cd0fd15915face926b0ea26228d9d" translate="yes" xml:space="preserve">
          <source>Enzyme</source>
          <target state="translated">Enzyme</target>
        </trans-unit>
        <trans-unit id="51355837d75578bfd096bb738a13105d30be552e" translate="yes" xml:space="preserve">
          <source>Enzyme Adapter Package</source>
          <target state="translated">酵素适配器包装</target>
        </trans-unit>
        <trans-unit id="ad23adcd497d068a319e4afbdaf0da5eab7f86cb" translate="yes" xml:space="preserve">
          <source>Enzyme Future</source>
          <target state="translated">酶的未来</target>
        </trans-unit>
        <trans-unit id="1c5e09957340a9598a75b16c615131644d8a7629" translate="yes" xml:space="preserve">
          <source>Enzyme is a JavaScript Testing utility for React that makes it easier to test your React Components' output. You can also manipulate, traverse, and in some ways simulate runtime given the output.</source>
          <target state="translated">Enzyme是一个针对React的JavaScript测试工具,它可以更容易地测试你的React组件的输出。您还可以对输出进行操作、遍历,并在某些方面模拟运行时给定的输出。</target>
        </trans-unit>
        <trans-unit id="029c2f4444a98371a6b3a4bc4a7dd1d6fc2ae0d1" translate="yes" xml:space="preserve">
          <source>Enzyme is unopinionated regarding which test runner or assertion library you use, and should be compatible with all major test runners and assertion libraries out there. The documentation and examples for enzyme use &lt;a href=&quot;https://mochajs.org/&quot;&gt;mocha&lt;/a&gt; and &lt;a href=&quot;http://chaijs.com/&quot;&gt;chai&lt;/a&gt;, but you should be able to extrapolate to your framework of choice.</source>
          <target state="translated">对于您使用哪个测试运行程序或断言库，酶是不受限制的，并且应该与那里的所有主要测试运行程序和断言库兼容。酶的文档和示例使用&lt;a href=&quot;https://mochajs.org/&quot;&gt;mocha&lt;/a&gt;和&lt;a href=&quot;http://chaijs.com/&quot;&gt;chai&lt;/a&gt;，但是您应该可以推断出所选择的框架。</target>
        </trans-unit>
        <trans-unit id="6a414dbbbf682b5322546cb7359fe381bf11a255" translate="yes" xml:space="preserve">
          <source>Enzyme supports &lt;a href=&quot;https://reactjs.org/docs/hooks-intro.html&quot;&gt;react hooks&lt;/a&gt; with some limitations in &lt;a href=&quot;https://airbnb.io/enzyme/docs/api/shallow.html&quot;&gt;&lt;code&gt;.shallow()&lt;/code&gt;&lt;/a&gt; due to upstream issues in React's shallow renderer:</source>
          <target state="translated">由于React的浅层渲染器中存在上游问题，因此Enzyme支持&lt;a href=&quot;https://airbnb.io/enzyme/docs/api/shallow.html&quot;&gt; &lt;code&gt;.shallow()&lt;/code&gt; 中&lt;/a&gt;有一些限制的&lt;a href=&quot;https://reactjs.org/docs/hooks-intro.html&quot;&gt;react钩子&lt;/a&gt;：</target>
        </trans-unit>
        <trans-unit id="332ef742bd38fad48236491c83da6947ff66ab4d" translate="yes" xml:space="preserve">
          <source>Enzyme's API is meant to be intuitive and flexible by mimicking jQuery's API for DOM manipulation and traversal.</source>
          <target state="translated">Enzyme的API旨在通过模仿jQuery的API来实现直观和灵活的DOM操作和遍历。</target>
        </trans-unit>
        <trans-unit id="46ed75648787ff4b317851f8f9c38e938fe80dd0" translate="yes" xml:space="preserve">
          <source>Even though the name would imply this simulates an actual event, &lt;code&gt;.simulate()&lt;/code&gt; will in fact target the component's prop based on the event you give it. For example, &lt;code&gt;.simulate('click')&lt;/code&gt; will actually get the &lt;code&gt;onClick&lt;/code&gt; prop and call it.</source>
          <target state="translated">尽管名称暗示这将模拟实际事件，但 &lt;code&gt;.simulate()&lt;/code&gt; 实际上将根据您提供的事件将组件的prop作为目标。例如， &lt;code&gt;.simulate('click')&lt;/code&gt; 实际上将获取 &lt;code&gt;onClick&lt;/code&gt; 道具并对其进行调用。</target>
        </trans-unit>
        <trans-unit id="4818e3faca46f86be35832baf58ad68961fdb525" translate="yes" xml:space="preserve">
          <source>Every attribute of the wrapped element must be matched by the element you're checking. To permit (and ignore) additional attributes on the wrapped element, use containsMatchingElement() instead.</source>
          <target state="translated">封装元素的每个属性都必须与你要检查的元素相匹配,如果要允许(并忽略)被封装元素上的额外属性,可以使用 containsMatchingElement()来代替。要允许(并忽略)包装元素上的附加属性,可以使用 containsMatchingElement()来代替。</target>
        </trans-unit>
        <trans-unit id="0f01ed56a1e32a05e5ef96e4d779f34784af9a96" translate="yes" xml:space="preserve">
          <source>Example</source>
          <target state="translated">Example</target>
        </trans-unit>
        <trans-unit id="9cf87e7b85f81825622eb49cf420110a9ba45d55" translate="yes" xml:space="preserve">
          <source>Example &lt;code&gt;class component&lt;/code&gt;</source>
          <target state="translated">示例 &lt;code&gt;class component&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="ba9ec891d2dd56dd8d24f6d7d96a4db9ffd1a644" translate="yes" xml:space="preserve">
          <source>Example &lt;code&gt;functional component&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;functional component&lt;/code&gt; 示例</target>
        </trans-unit>
        <trans-unit id="38e2ace057c2d9491137c471958a51c0e1163604" translate="yes" xml:space="preserve">
          <source>Example Project for Jest version 15+</source>
          <target state="translated">Jest 15+版本的示例项目</target>
        </trans-unit>
        <trans-unit id="ab858fbecacbb162fe9006ca94bc02b81d92156e" translate="yes" xml:space="preserve">
          <source>Example Projects</source>
          <target state="translated">示例项目</target>
        </trans-unit>
        <trans-unit id="4f55a6b0c05587d1df38c1ecc27eaa3ea003dca1" translate="yes" xml:space="preserve">
          <source>Example Test: enzyme + Lab + Code</source>
          <target state="translated">测试示例:酶+实验室+代码</target>
        </trans-unit>
        <trans-unit id="654d7a479004b2b26e7de7b5ed9cd79a331ded80" translate="yes" xml:space="preserve">
          <source>Example Usage</source>
          <target state="translated">使用实例</target>
        </trans-unit>
        <trans-unit id="5215cd1d5ac2d102ec4bfa415d61da891dba6be0" translate="yes" xml:space="preserve">
          <source>Example test for Jest 15+</source>
          <target state="translated">Jest 15+的测试示例</target>
        </trans-unit>
        <trans-unit id="eb01bf04c9a0e8a71c45816513df424f1c7ffedb" translate="yes" xml:space="preserve">
          <source>Examples</source>
          <target state="translated">Examples</target>
        </trans-unit>
        <trans-unit id="9a9a9ce32412b7a5db5abed278e3d9dea69c3313" translate="yes" xml:space="preserve">
          <source>Finally, you need to configure enzyme to use the adapter you want it to use. To do this, you can use the top level &lt;code&gt;configure(...)&lt;/code&gt; API.</source>
          <target state="translated">最后，您需要配置酶以使用您要使用的适配器。为此，您可以使用顶级 &lt;code&gt;configure(...)&lt;/code&gt; API。</target>
        </trans-unit>
        <trans-unit id="926639caa1b21fa8457f87d7096534efe12b003c" translate="yes" xml:space="preserve">
          <source>Find every node in the render tree that matches the provided selector.</source>
          <target state="translated">在渲染树中找到与提供的选择器相匹配的每个节点。</target>
        </trans-unit>
        <trans-unit id="4d91043a3187d510ab72a61c5f21b438ede28285" translate="yes" xml:space="preserve">
          <source>Find every node in the render tree that returns true for the provided predicate function.</source>
          <target state="translated">在渲染树中找到每个对所提供的谓词函数返回真的节点。</target>
        </trans-unit>
        <trans-unit id="117c96a6e071cb6d3a5137a0259f3117349d2d2a" translate="yes" xml:space="preserve">
          <source>Finds every node in the render tree of the current wrapper that matches the provided selector.</source>
          <target state="translated">在当前封装器的渲染树中查找与所提供的选择器匹配的每个节点。</target>
        </trans-unit>
        <trans-unit id="ff3d35b29e52a4434a3abfb9627527e8da5c745f" translate="yes" xml:space="preserve">
          <source>Finds every node in the render tree that returns true for the provided predicate function.</source>
          <target state="translated">在render tree中查找所有对所提供的谓词函数返回true的节点。</target>
        </trans-unit>
        <trans-unit id="4f93a275f75fed40467930d3bbe437bba9d7ecd6" translate="yes" xml:space="preserve">
          <source>Following React's behavior, &lt;code&gt;.equals()&lt;/code&gt; ignores properties whose values are &lt;code&gt;undefined&lt;/code&gt;.</source>
          <target state="translated">按照React的行为， &lt;code&gt;.equals()&lt;/code&gt; 会忽略其值 &lt;code&gt;undefined&lt;/code&gt; 属性。</target>
        </trans-unit>
        <trans-unit id="69b90b3a854d0427166bdc10d865b89fefdcc4c3" translate="yes" xml:space="preserve">
          <source>For &lt;code&gt;mount&lt;/code&gt; wrappers, the &lt;code&gt;.getNode()&lt;/code&gt; method used to return the actual component instance. This method no longer exists, but &lt;code&gt;.instance()&lt;/code&gt; is functionally equivalent to what &lt;code&gt;.getNode()&lt;/code&gt; used to be.</source>
          <target state="translated">对于 &lt;code&gt;mount&lt;/code&gt; 包装， &lt;code&gt;.getNode()&lt;/code&gt; 方法用于返回实际的组件实例。此方法不再存在，但是 &lt;code&gt;.instance()&lt;/code&gt; 在功能上等效于 &lt;code&gt;.getNode()&lt;/code&gt; 以前的名称。</target>
        </trans-unit>
        <trans-unit id="d0b0bb561bb23d4c4f7a3834a6e5c9fa2ff28df5" translate="yes" xml:space="preserve">
          <source>For &lt;code&gt;mount&lt;/code&gt;, updates are sometimes required when they weren't before</source>
          <target state="translated">对于 &lt;code&gt;mount&lt;/code&gt; ，有时有时不需要更新</target>
        </trans-unit>
        <trans-unit id="09bc7ee5b6a668d25e805ff6efa077979462493c" translate="yes" xml:space="preserve">
          <source>For Library</source>
          <target state="translated">图书馆</target>
        </trans-unit>
        <trans-unit id="ac01306a20857038c2ac22e97c91b721922733f5" translate="yes" xml:space="preserve">
          <source>For example, consider the following example:</source>
          <target state="translated">例如,考虑下面的例子。</target>
        </trans-unit>
        <trans-unit id="cd003f8c7138c25c1d0217d87a75a97b62b34819" translate="yes" xml:space="preserve">
          <source>For instance, consider the following contrived example:</source>
          <target state="translated">例如,考虑到下面这个人为的例子。</target>
        </trans-unit>
        <trans-unit id="8e0ad3f7772ae403b24d8e656ac8c6e4cdb4ba6c" translate="yes" xml:space="preserve">
          <source>For shallow wrappers, if you were previously using &lt;code&gt;.getNode()&lt;/code&gt;, you will want to replace those calls with &lt;code&gt;.getElement()&lt;/code&gt;, which is now functionally equivalent to what &lt;code&gt;.getNode()&lt;/code&gt; used to do. One caveat is that previously &lt;code&gt;.getNode()&lt;/code&gt; would return the actual element instance that was created in the &lt;code&gt;render&lt;/code&gt; function of the component you were testing, but now it will be a structurally equal react element, but not referentially equal. Your tests will need to be updated to account for this.</source>
          <target state="translated">对于浅层包装，如果您以前使用过 &lt;code&gt;.getNode()&lt;/code&gt; ，则需要将这些调用替换为 &lt;code&gt;.getElement()&lt;/code&gt; ，该功能现在等效于 &lt;code&gt;.getNode()&lt;/code&gt; 过去所做的工作。一个警告是，以前 &lt;code&gt;.getNode()&lt;/code&gt; 将返回在您正在测试的组件的 &lt;code&gt;render&lt;/code&gt; 函数中创建的实际元素实例，但是现在它将是结构上相等的react元素，但不是引用相等的。您的测试将需要更新以解决此问题。</target>
        </trans-unit>
        <trans-unit id="72beab796ee156401548f8526bc361d972a34a93" translate="yes" xml:space="preserve">
          <source>For the best experience with enzyme, it is recommended that you load a document into the global scope &lt;em&gt;before&lt;/em&gt; requiring React for the first time. It is very important that the below script gets run &lt;em&gt;before&lt;/em&gt; React's code is run.</source>
          <target state="translated">为了获得酶的最佳体验，建议您在第一次需要React &lt;em&gt;之前&lt;/em&gt;将文档加载到全局范围中。在运行React的代码&lt;em&gt;之前&lt;/em&gt;运行以下脚本非常重要。</target>
        </trans-unit>
        <trans-unit id="4014ea7935efc652541982b622530de60f606492" translate="yes" xml:space="preserve">
          <source>For the purposes of this documentation, we will refer to Cheerio's constructor as &lt;code&gt;CheerioWrapper&lt;/code&gt;, which is to say that it is analogous to our &lt;code&gt;ReactWrapper&lt;/code&gt; and &lt;code&gt;ShallowWrapper&lt;/code&gt; constructors. You can reference the &lt;a href=&quot;https://github.com/cheeriojs/cheerio#api&quot;&gt;Cheerio API docs&lt;/a&gt; for methods available on a &lt;code&gt;CheerioWrapper&lt;/code&gt; instance.</source>
          <target state="translated">在本文档中，我们将 &lt;code&gt;CheerioWrapper&lt;/code&gt; 的构造函数称为CheerioWrapper，也就是说，它类似于我们的 &lt;code&gt;ReactWrapper&lt;/code&gt; 和 &lt;code&gt;ShallowWrapper&lt;/code&gt; 构造函数。您可以参考&lt;a href=&quot;https://github.com/cheeriojs/cheerio#api&quot;&gt;Cheerio API文档，&lt;/a&gt;了解 &lt;code&gt;CheerioWrapper&lt;/code&gt; 实例上可用的方法。</target>
        </trans-unit>
        <trans-unit id="06d6633fa0bd7e83f10bae95c3414091f4bfa305" translate="yes" xml:space="preserve">
          <source>Forces a re-render. Useful to run before checking the render output if something external may be updating the state of the component somewhere.</source>
          <target state="translated">强制重新渲染。在检查渲染输出之前,如果有外部的东西可能在更新组件的某个地方的状态,那么运行该命令是有用的。</target>
        </trans-unit>
        <trans-unit id="4e6c05afa7d596722328e81bdef2831f35817f9e" translate="yes" xml:space="preserve">
          <source>Full DOM Rendering</source>
          <target state="translated">全DOM渲染</target>
        </trans-unit>
        <trans-unit id="570a629cefd9707d7a3fd0666f5a1df6847deb98" translate="yes" xml:space="preserve">
          <source>Full DOM rendering is ideal for use cases where you have components that may interact with DOM APIs or need to test components that are wrapped in higher order components.</source>
          <target state="translated">完全的DOM渲染是理想的用例,在这些用例中,你有可能与DOM APIs交互的组件,或者需要测试被高阶组件包装的组件。</target>
        </trans-unit>
        <trans-unit id="79c676ffd703a9503c4628cafa5ed681170a3ff9" translate="yes" xml:space="preserve">
          <source>Full DOM rendering requires that a full DOM API be available at the global scope. This means that it must be run in an environment that at least &amp;ldquo;looks like&amp;rdquo; a browser environment. If you do not want to run your tests inside of a browser, the recommended approach to using &lt;code&gt;mount&lt;/code&gt; is to depend on a library called &lt;a href=&quot;https://github.com/tmpvar/jsdom&quot;&gt;jsdom&lt;/a&gt; which is essentially a headless browser implemented completely in JS.</source>
          <target state="translated">完整的DOM呈现要求在全局范围内提供完整的DOM API。这意味着它必须在至少&amp;ldquo;看起来&amp;rdquo;像浏览器环境的环境中运行。如果您不想在浏览器中运行测试，建议的使用 &lt;code&gt;mount&lt;/code&gt; 的方法是依赖于称为&lt;a href=&quot;https://github.com/tmpvar/jsdom&quot;&gt;jsdom&lt;/a&gt;的库，该库本质上是完全用JS实现的无头浏览器。</target>
        </trans-unit>
        <trans-unit id="7d7fc3e9d020cf229dd7fe8cb296c0487b5676f3" translate="yes" xml:space="preserve">
          <source>Full Rendering API</source>
          <target state="translated">完整的渲染API</target>
        </trans-unit>
        <trans-unit id="1e2f18bbd2cd56eb4eb5216936b1c3a7fb95f62b" translate="yes" xml:space="preserve">
          <source>Full Rendering API (mount(...))</source>
          <target state="translated">完整的渲染API(mount(...))</target>
        </trans-unit>
        <trans-unit id="623cd81f510f4da18c7d51e491936ee4bbfcf0af" translate="yes" xml:space="preserve">
          <source>Further, enzyme requires the test utilities addon be installed:</source>
          <target state="translated">此外,酵素需要安装测试工具插件。</target>
        </trans-unit>
        <trans-unit id="8e32a626681dc1c85c62f706ba8a29b2c8662dae" translate="yes" xml:space="preserve">
          <source>Further, enzyme supports combining any of those supported syntaxes together, as with CSS:</source>
          <target state="translated">此外,酶支持将这些支持的语法中的任何一种组合在一起,就像CSS一样。</target>
        </trans-unit>
        <trans-unit id="58c198c1797fd0e9bac60db7c1630abfbf85567c" translate="yes" xml:space="preserve">
          <source>Further, enzyme with React 0.14 requires the test utilities addon be installed:</source>
          <target state="translated">此外,使用React 0.14的酶需要安装测试实用程序插件。</target>
        </trans-unit>
        <trans-unit id="047ca54032a1756c098d3bc1a941a0ed8e583df8" translate="yes" xml:space="preserve">
          <source>Future</source>
          <target state="translated">Future</target>
        </trans-unit>
        <trans-unit id="0fe5c0df09b7c8d3085b32420b2c803b718de6ce" translate="yes" xml:space="preserve">
          <source>Get a wrapper with all of the children nodes of the current wrapper.</source>
          <target state="translated">获取一个包含当前包装器所有子节点的包装器。</target>
        </trans-unit>
        <trans-unit id="71f93ae601b006b1edfa697f30633edaff282734" translate="yes" xml:space="preserve">
          <source>Get a wrapper with all of the parents (ancestors) of the current node.</source>
          <target state="translated">获取一个包含当前节点的所有父节点(祖先)的封装器。</target>
        </trans-unit>
        <trans-unit id="bcc338b4ccaa03442427c4bc6320f42c435786d9" translate="yes" xml:space="preserve">
          <source>Get a wrapper with the direct parent of the current node.</source>
          <target state="translated">获取当前节点的直接父节点的包装器。</target>
        </trans-unit>
        <trans-unit id="e3d99edbac0f4f049eca23adc2829e569716d83f" translate="yes" xml:space="preserve">
          <source>Get a wrapper with the first ancestor of the current node to match the provided selector.</source>
          <target state="translated">获取当前节点的第一个祖先的包装器,以匹配提供的选择器。</target>
        </trans-unit>
        <trans-unit id="929a28d261428029e61c0f81c6161fd71ba0b2fe" translate="yes" xml:space="preserve">
          <source>Guides</source>
          <target state="translated">Guides</target>
        </trans-unit>
        <trans-unit id="eeffe19337aa7b2a08bd4bf51147350bd9fb4750" translate="yes" xml:space="preserve">
          <source>Here is the sample of &lt;a href=&quot;https://github.com/tmpvar/jsdom/blob/master/lib/old-api.md&quot;&gt;jsdom old API&lt;/a&gt; as well.</source>
          <target state="translated">这也是&lt;a href=&quot;https://github.com/tmpvar/jsdom/blob/master/lib/old-api.md&quot;&gt;jsdom旧API&lt;/a&gt;的示例。</target>
        </trans-unit>
        <trans-unit id="67ddd9c8373dc32fd2e1b07b4592d833fecdba21" translate="yes" xml:space="preserve">
          <source>If a &lt;code&gt;wrappingComponent&lt;/code&gt; was passed in &lt;code&gt;options&lt;/code&gt;, this methods returns a &lt;code&gt;ReactWrapper&lt;/code&gt; around the rendered &lt;code&gt;wrappingComponent&lt;/code&gt;. This &lt;code&gt;ReactWrapper&lt;/code&gt; can be used to update the &lt;code&gt;wrappingComponent&lt;/code&gt;'s props, state, etc.</source>
          <target state="translated">如果 &lt;code&gt;wrappingComponent&lt;/code&gt; 中传递 &lt;code&gt;options&lt;/code&gt; ，这个方法返回一个 &lt;code&gt;ReactWrapper&lt;/code&gt; 周围呈现 &lt;code&gt;wrappingComponent&lt;/code&gt; 。这个 &lt;code&gt;ReactWrapper&lt;/code&gt; 可以用来更新 &lt;code&gt;wrappingComponent&lt;/code&gt; 的道具，状态等。</target>
        </trans-unit>
        <trans-unit id="6d196d5cbe18d2626402589bbcbd087f16a192cb" translate="yes" xml:space="preserve">
          <source>If a &lt;code&gt;wrappingComponent&lt;/code&gt; was passed in &lt;code&gt;options&lt;/code&gt;, this methods returns a &lt;code&gt;ShallowWrapper&lt;/code&gt; around the rendered &lt;code&gt;wrappingComponent&lt;/code&gt;. This &lt;code&gt;ShallowWrapper&lt;/code&gt; can be used to update the &lt;code&gt;wrappingComponent&lt;/code&gt;'s props, state, etc.</source>
          <target state="translated">如果 &lt;code&gt;wrappingComponent&lt;/code&gt; 中传递 &lt;code&gt;options&lt;/code&gt; ，这个方法返回一个 &lt;code&gt;ShallowWrapper&lt;/code&gt; 周围呈现 &lt;code&gt;wrappingComponent&lt;/code&gt; 。此 &lt;code&gt;ShallowWrapper&lt;/code&gt; 可用于更新 &lt;code&gt;wrappingComponent&lt;/code&gt; 的道具，状态等。</target>
        </trans-unit>
        <trans-unit id="8d8b27059ba58e27f5bb57845056194fd5d95d56" translate="yes" xml:space="preserve">
          <source>If the current wrapper is wrapping the root component, returns the root component's latest render output wrapped in an array.</source>
          <target state="translated">如果当前包装器正在包装根组件,则返回根组件最新的渲染输出,包装在一个数组中。</target>
        </trans-unit>
        <trans-unit id="cd3aa8d900efbd925f70d3751f828629cc3b730b" translate="yes" xml:space="preserve">
          <source>If the current wrapper is wrapping the root component, returns the root component's latest render output.</source>
          <target state="translated">如果当前封装器正在封装根组件,则返回根组件的最新渲染输出。</target>
        </trans-unit>
        <trans-unit id="29c24082476175f3e2a25b93ef8cac1a6fd8d5cf" translate="yes" xml:space="preserve">
          <source>If you are interested in using enzyme with custom assertions and convenience functions for testing your React components, you can consider using:</source>
          <target state="translated">如果你有兴趣使用带有自定义断言和方便功能的酶来测试你的React组件,你可以考虑使用。</target>
        </trans-unit>
        <trans-unit id="057985eec7bb7033f7d7c21429768d3f59cdf7cd" translate="yes" xml:space="preserve">
          <source>If you are using Jest 0.9 &amp;ndash; 14.0 with enzyme and using Jest's automocking feature, you will need to mark react and enzyme to be unmocked in your &lt;code&gt;package.json&lt;/code&gt;:</source>
          <target state="translated">如果您将Jest 0.9 &amp;ndash; 14.0与酶一起使用，并使用Jest的自动模拟功能，则需要在 &lt;code&gt;package.json&lt;/code&gt; 中标记出react和asemock待模拟的：</target>
        </trans-unit>
        <trans-unit id="d04ddabda3cbb8f7f456df1c505f3cde873778be" translate="yes" xml:space="preserve">
          <source>If you are using a previous version of Jest together with npm3, you may need to unmock &lt;a href=&quot;https://github.com/airbnb/enzyme/blob/78febd90fe2fb184771b8b0356b0fcffbdad386e/docs/guides/jest.md&quot;&gt;more modules&lt;/a&gt;.</source>
          <target state="translated">如果将Jest的早期版本与npm3一起使用，则可能需要取消模拟&lt;a href=&quot;https://github.com/airbnb/enzyme/blob/78febd90fe2fb184771b8b0356b0fcffbdad386e/docs/guides/jest.md&quot;&gt;更多模块&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="270536b82199933750f62ff68306325ea479a6f1" translate="yes" xml:space="preserve">
          <source>If you are using a previous version of Jest together with npm3, you may need to unmock &lt;a href=&quot;https://github.com/enzymejs/enzyme/blob/78febd90fe2fb184771b8b0356b0fcffbdad386e/docs/guides/jest.md&quot;&gt;more modules&lt;/a&gt;.</source>
          <target state="translated">如果您将Jest的早期版本与npm3一起使用，则可能需要取消模拟&lt;a href=&quot;https://github.com/enzymejs/enzyme/blob/78febd90fe2fb184771b8b0356b0fcffbdad386e/docs/guides/jest.md&quot;&gt;更多模块&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="9606c84ad8105d871263f864aa2162ff83fbc52e" translate="yes" xml:space="preserve">
          <source>If you are using a test runner that runs code in a browser-based environment, you may be using &lt;a href=&quot;http://browserify.org/&quot;&gt;browserify&lt;/a&gt; in order to bundle your React code.</source>
          <target state="translated">如果您正在使用在基于浏览器的环境中运行代码的测试运行程序，则可能正在使用&lt;a href=&quot;http://browserify.org/&quot;&gt;browserify&lt;/a&gt;来捆绑您的React代码。</target>
        </trans-unit>
        <trans-unit id="6c126ce3622e3cfcee72895a39395e916cfe9361" translate="yes" xml:space="preserve">
          <source>If you are using a test runner that runs code in a browser-based environment, you may be using &lt;a href=&quot;https://webpack.js.org/&quot;&gt;webpack&lt;/a&gt; in order to bundle your React code.</source>
          <target state="translated">如果您正在使用在基于浏览器的环境中运行代码的测试运行程序，则可能正在使用&lt;a href=&quot;https://webpack.js.org/&quot;&gt;webpack&lt;/a&gt;来捆绑您的React代码。</target>
        </trans-unit>
        <trans-unit id="9cc4a58bea32ac205d3a00921b20de266fabfc15" translate="yes" xml:space="preserve">
          <source>If you are using a test runner that runs code in a browser-based environment, you may be using &lt;a href=&quot;systemjs&quot;&gt;SystemJS&lt;/a&gt; in order to bundle your React code.</source>
          <target state="translated">如果您正在使用在基于浏览器的环境中运行代码的测试运行程序，则可能使用&lt;a href=&quot;systemjs&quot;&gt;SystemJS&lt;/a&gt;来捆绑您的React代码。</target>
        </trans-unit>
        <trans-unit id="1853254371b2bb13ae7828811f3d9d37d32c5a38" translate="yes" xml:space="preserve">
          <source>If you are wanting to use Enzyme with React 0.14, but don't already have React 0.14 and react-dom installed, you should do so:</source>
          <target state="translated">如果你想在React 0.14中使用Enzyme,但还没有安装React 0.14和react-dom,你应该这样做。</target>
        </trans-unit>
        <trans-unit id="30edf39c7c70b4c577f3900f6b1309b68b544ca7" translate="yes" xml:space="preserve">
          <source>If you are wanting to use Enzyme with React 15, but don't already have React 15 and react-dom installed, you should do so:</source>
          <target state="translated">如果你想在React 15中使用Enzyme,但还没有安装React 15和react-dom,你应该这样做。</target>
        </trans-unit>
        <trans-unit id="63eead382a162c12f6a8f99e50ce4ab4ab1183b4" translate="yes" xml:space="preserve">
          <source>If you are wanting to use enzyme with React 0.13, but don't already have React 0.13 installed, you should do so:</source>
          <target state="translated">如果你想在React 0.13中使用酶,但还没有安装React 0.13,你应该这样做。</target>
        </trans-unit>
        <trans-unit id="85f0e12d899c36f88f8a4d84a42a4a5cb7a7260d" translate="yes" xml:space="preserve">
          <source>If you are wanting to use enzyme with React 16, but don't already have React 16 and react-dom installed, you should do so:</source>
          <target state="translated">如果你想在React 16中使用酶,但还没有安装React 16和react-dom,你应该这样做。</target>
        </trans-unit>
        <trans-unit id="6cc090f0a2bd29811b8593bdde596c3c54d9d2b6" translate="yes" xml:space="preserve">
          <source>If you have to search by &lt;code&gt;undefined&lt;/code&gt; property value, use &lt;a href=&quot;shallowwrapper/findwhere&quot;&gt;.findWhere()&lt;/a&gt;.</source>
          <target state="translated">如果必须按 &lt;code&gt;undefined&lt;/code&gt; 属性值搜索，请使用&lt;a href=&quot;shallowwrapper/findwhere&quot;&gt;.findWhere（）&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="cf09485d31fa6e716abb9f06b062eaea56bd9e31" translate="yes" xml:space="preserve">
          <source>If you have to search by &lt;code&gt;undefined&lt;/code&gt; property value, use &lt;a href=&quot;shallowwrapper/findwhere&quot;&gt;&lt;code&gt;.findWhere()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">如果必须按 &lt;code&gt;undefined&lt;/code&gt; 属性值搜索，请使用&lt;a href=&quot;shallowwrapper/findwhere&quot;&gt; &lt;code&gt;.findWhere()&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="71da1115a8b12af6134f4a43327ebe0700a0168d" translate="yes" xml:space="preserve">
          <source>If you'd like to opt out globally, you can run the following:</source>
          <target state="translated">如果你想在全球范围内选择退出,你可以执行以下步骤。</target>
        </trans-unit>
        <trans-unit id="bd4d4e6bd37eed79fec5edeb5f16a3b54e0ce351" translate="yes" xml:space="preserve">
          <source>If you're using Karma and Webpack using &lt;a href=&quot;https://github.com/webpack-contrib/karma-webpack#alternative-usage&quot;&gt;karma-webpack's alternative setup&lt;/a&gt;, you can configure enzyme in your test entry file and import Enzyme directly in individual tests.</source>
          <target state="translated">如果您使用&lt;a href=&quot;https://github.com/webpack-contrib/karma-webpack#alternative-usage&quot;&gt;karma-webpack的替代设置&lt;/a&gt;来使用Karma和Webpack ，则可以在测试条目文件中配置酶，然后直接在各个测试中导入酶。</target>
        </trans-unit>
        <trans-unit id="c652b51ddd487136ed859565f1a0bd0a962942a2" translate="yes" xml:space="preserve">
          <source>If you're using React 16.8+ and &lt;code&gt;.mount()&lt;/code&gt;, Enzyme will wrap apis including &lt;a href=&quot;https://airbnb.io/enzyme/docs/api/ReactWrapper/simulate.html&quot;&gt;&lt;code&gt;.simulate()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://airbnb.io/enzyme/docs/api/ReactWrapper/setProps.html&quot;&gt;&lt;code&gt;.setProps()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://airbnb.io/enzyme/docs/api/ReactWrapper/setContext.html&quot;&gt;&lt;code&gt;.setContext()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://airbnb.io/enzyme/docs/api/ReactWrapper/invoke.html&quot;&gt;&lt;code&gt;.invoke()&lt;/code&gt;&lt;/a&gt; with &lt;a href=&quot;https://reactjs.org/docs/test-utils.html#act&quot;&gt;&lt;code&gt;ReactTestUtils.act()&lt;/code&gt;&lt;/a&gt; so you don't need to manually wrap it.</source>
          <target state="translated">如果您使用阵营16.8+和 &lt;code&gt;.mount()&lt;/code&gt; ，酶将包裹的API包括&lt;a href=&quot;https://airbnb.io/enzyme/docs/api/ReactWrapper/simulate.html&quot;&gt; &lt;code&gt;.simulate()&lt;/code&gt; &lt;/a&gt;，&lt;a href=&quot;https://airbnb.io/enzyme/docs/api/ReactWrapper/setProps.html&quot;&gt; &lt;code&gt;.setProps()&lt;/code&gt; &lt;/a&gt;，&lt;a href=&quot;https://airbnb.io/enzyme/docs/api/ReactWrapper/setContext.html&quot;&gt; &lt;code&gt;.setContext()&lt;/code&gt; &lt;/a&gt;，&lt;a href=&quot;https://airbnb.io/enzyme/docs/api/ReactWrapper/invoke.html&quot;&gt; &lt;code&gt;.invoke()&lt;/code&gt; &lt;/a&gt;与&lt;a href=&quot;https://reactjs.org/docs/test-utils.html#act&quot;&gt; &lt;code&gt;ReactTestUtils.act()&lt;/code&gt; &lt;/a&gt;，所以你不需要手动包裹它。</target>
        </trans-unit>
        <trans-unit id="bfd4ca4971f2b471c0171d60bb4669c0595e5ef6" translate="yes" xml:space="preserve">
          <source>Import Enzyme from the Enzyme setup file</source>
          <target state="translated">从酵素设置文件中导入酵素。</target>
        </trans-unit>
        <trans-unit id="414fe52537e1abe93f8c234cc6a8c2e2c9cad7a8" translate="yes" xml:space="preserve">
          <source>In &lt;code&gt;enzyme&lt;/code&gt; v2, executing an event that would change a component state (and in turn update props) would return those updated props via the &lt;code&gt;.props&lt;/code&gt; method.</source>
          <target state="translated">在 &lt;code&gt;enzyme&lt;/code&gt; v2中，执行将更改组件状态（进而更新 &lt;code&gt;.props&lt;/code&gt; ）的事件将通过.props方法返回那些更新的prop。</target>
        </trans-unit>
        <trans-unit id="b920dbd0b5a5c8c88b853f096ab28398b03daddd" translate="yes" xml:space="preserve">
          <source>In enzyme v2, the wrapper returned from &lt;code&gt;mount(...)&lt;/code&gt; had a prototype method on it &lt;code&gt;ref(refName)&lt;/code&gt; that returned a wrapper around the actual element of that ref. This has now been changed to return the actual ref, which we believe is a more intuitive API.</source>
          <target state="translated">在酶v2中，从 &lt;code&gt;mount(...)&lt;/code&gt; 返回的包装器上具有 &lt;code&gt;ref(refName)&lt;/code&gt; 的原型方法，该方法返回围绕该引用的实际元素的包装器。现在已更改为返回实际引用，我们认为这是更直观的API。</target>
        </trans-unit>
        <trans-unit id="e59fed93b0ffe503c0d370ba36565168ade3efc7" translate="yes" xml:space="preserve">
          <source>In enzyme v3, the expression &lt;code&gt;wrapper.find(&quot;[aria-expanded=true]&quot;).length)&lt;/code&gt; will return 3 and not 1 as in previous versions. A closer look using &lt;a href=&quot;../api/reactwrapper/debug&quot;&gt;&lt;code&gt;debug&lt;/code&gt;&lt;/a&gt; reveals:</source>
          <target state="translated">在酶v3中，表达式 &lt;code&gt;wrapper.find(&quot;[aria-expanded=true]&quot;).length)&lt;/code&gt; 将返回3，而不是以前的版本中的1。使用&lt;a href=&quot;../api/reactwrapper/debug&quot;&gt; &lt;code&gt;debug&lt;/code&gt; &lt;/a&gt;仔细观察发现：</target>
        </trans-unit>
        <trans-unit id="bb8f78f6abd15e723b3e6c9d55577cdf4b9149eb" translate="yes" xml:space="preserve">
          <source>In enzyme v3, we now have &lt;code&gt;.children()&lt;/code&gt; return the &lt;em&gt;rendered&lt;/em&gt; children. In other words, it returns the element that is returned from that component's &lt;code&gt;render&lt;/code&gt; function.</source>
          <target state="translated">在酶v3中，我们现在有了 &lt;code&gt;.children()&lt;/code&gt; 返回&lt;em&gt;渲染的&lt;/em&gt;子代。换句话说，它返回从该组件的 &lt;code&gt;render&lt;/code&gt; 函数返回的元素。</target>
        </trans-unit>
        <trans-unit id="f2ebecba11006afe5e6dab26c6ed914444836617" translate="yes" xml:space="preserve">
          <source>In our experience, this is most often what people would actually want and expect out of the &lt;code&gt;.ref(...)&lt;/code&gt; method.</source>
          <target state="translated">根据我们的经验，这通常是人们实际上希望从 &lt;code&gt;.ref(...)&lt;/code&gt; 方法中获得的期望。</target>
        </trans-unit>
        <trans-unit id="9e7544a425d557cd505e3e4433205f4ce687ebf7" translate="yes" xml:space="preserve">
          <source>In practice we have found that this isn't actually needed that often, and when it is it is not difficult to add. Additionally, having the enzyme wrapper automatically update alongside the real render tree can result in flaky tests when writing asynchronous tests. This breaking change was worth the architectural benefits of the new adapter system in v3, and we believe is a better choice for an assertion library to take.</source>
          <target state="translated">在实践中,我们发现这其实并不经常需要,如果需要的话,添加起来也不难。此外,在编写异步测试时,让酶包装器与真实的渲染树一起自动更新会导致片状测试。这个突破性的变化值得V3中新的适配器系统带来的架构上的好处,我们相信是一个断言库采取的更好的选择。</target>
        </trans-unit>
        <trans-unit id="616b5bdc368799c2dfb5c2d1cb34c9dea3939bfb" translate="yes" xml:space="preserve">
          <source>In previous versions of enzyme, there was a public &lt;code&gt;describeWithDOM&lt;/code&gt; API which loaded in a new JSDOM document into the global namespace before every test, ensuring that tests were deterministic and did not have side-effects.</source>
          <target state="translated">在酶的早期版本中，有一个公共的 &lt;code&gt;describeWithDOM&lt;/code&gt; API，该API在每次测试之前都将一个新的JSDOM文档加载到全局名称空间中，以确保测试是确定性的并且没有副作用。</target>
        </trans-unit>
        <trans-unit id="dd73fc327272bc89685bbefe838a813d810b42c0" translate="yes" xml:space="preserve">
          <source>In some cases find will return a host node and DOM node. Take the following for example:</source>
          <target state="translated">在某些情况下,find会返回一个主机节点和DOM节点。以下面的例子为例。</target>
        </trans-unit>
        <trans-unit id="248ea40b051f5f11da5a8f53f0484c850adeb065" translate="yes" xml:space="preserve">
          <source>In the wild</source>
          <target state="translated">在野外</target>
        </trans-unit>
        <trans-unit id="d9567956e626bedb02b6e08f4c9decf994522429" translate="yes" xml:space="preserve">
          <source>In this case enzyme will automatically check for updates after an event simulation takes place, as it knows that this is a very common place for state changes to occur. In this case there is no difference between v2 and v3.</source>
          <target state="translated">在这种情况下,酶会在事件模拟发生后自动检查更新,因为它知道这是一个非常常见的状态变化发生的地方。在这种情况下,v2和v3没有区别。</target>
        </trans-unit>
        <trans-unit id="3b55c784ca97d77dddd46fa97b6eadf82c781403" translate="yes" xml:space="preserve">
          <source>In this case we can call &lt;code&gt;.ref('abc')&lt;/code&gt; on a wrapper of &lt;code&gt;Box&lt;/code&gt;. In this case it will return a wrapper around the rendered div. To demonstrate, we can see that both &lt;code&gt;wrapper&lt;/code&gt; and the result of &lt;code&gt;ref(...)&lt;/code&gt; share the same constructor:</source>
          <target state="translated">在这种情况下，我们可以在 &lt;code&gt;Box&lt;/code&gt; 的包装上调用 &lt;code&gt;.ref('abc')&lt;/code&gt; 。在这种情况下，它将返回渲染的div周围的包装器。为了演示，我们可以看到 &lt;code&gt;wrapper&lt;/code&gt; 和 &lt;code&gt;ref(...)&lt;/code&gt; 的结果共享相同的构造函数：</target>
        </trans-unit>
        <trans-unit id="de4b77a31baedac39ae98781534fedafe76ee659" translate="yes" xml:space="preserve">
          <source>In this case, running:</source>
          <target state="translated">在这种情况下,跑。</target>
        </trans-unit>
        <trans-unit id="3d40855065a318f6c6a1c4c13ed160647897911e" translate="yes" xml:space="preserve">
          <source>In this code, there is a timer that continuously changes the rendered output of this component. This might be a reasonable thing to do in your application. The thing is, enzyme has no way of knowing that these changes are taking place, and no way to automatically update the render tree. In enzyme v2, enzyme operated &lt;em&gt;directly&lt;/em&gt; on the in-memory representation of the render tree that React itself had. This means that even though enzyme couldn't know when the render tree was updated, updates would be reflected anyway, since React &lt;em&gt;does&lt;/em&gt; know.</source>
          <target state="translated">在此代码中，有一个计时器可以连续更改此组件的渲染输出。在您的应用程序中这样做可能是合理的事情。问题是，酶无法知道这些变化正在发生，也无法自动更新渲染树。在酶v2中，酶&lt;em&gt;直接&lt;/em&gt;在React本身具有的渲染树的内存中表示上运行。这意味着，即使当渲染树被更新酶不可能知道，更新将反正反映，因为阵营&lt;em&gt;确实&lt;/em&gt;知道。</target>
        </trans-unit>
        <trans-unit id="a7a8929f7586abdc1d58901d3607abbc81cf925c" translate="yes" xml:space="preserve">
          <source>In this guide, we will go over a couple of the most common breakages that we ran into, and how to fix them. Hopefully this will make your upgrade path that much easier. If during your upgrade you find a breakage that doesn't seem to make sense to you, feel free to file an issue.</source>
          <target state="translated">在本篇指南中,我们将介绍我们遇到的几个最常见的破绽,以及如何修复它们。希望这能让你的升级之路变得更加轻松。如果在升级过程中,你发现了一个在你看来不合理的破绽,请随时提出问题。</target>
        </trans-unit>
        <trans-unit id="cbb27be4606666081259d9e675c3f0f11e1c6a89" translate="yes" xml:space="preserve">
          <source>In v2.x, &lt;code&gt;iconCount&lt;/code&gt; would be 1. In v3.x, it will be 2. This is because in v2.x it would find all of the elements matching the selector, and then remove any duplicates. Since &lt;code&gt;ICONS.success&lt;/code&gt; is included twice in the render tree, but it's a constant that's reused, it would show up as a duplicate in the eyes of enzyme v2.x. In enzyme v3, the elements that are traversed are transformations of the underlying react elements, and are thus different references, resulting in two elements being found.</source>
          <target state="translated">在v2.x中， &lt;code&gt;iconCount&lt;/code&gt; 为1。在v3.x中，iconCount为2。这是因为在v2.x中，它将找到与选择器匹配的所有元素，然后删除所有重复项。由于 &lt;code&gt;ICONS.success&lt;/code&gt; 在渲染树中包含两次，但是它是一个重复使用的常量，因此在v2.x酶的眼中它会显示为重复项。在酶v3中，遍历的元素是基础反应元素的转化，因此是不同的参考，导致找到两个元素。</target>
        </trans-unit>
        <trans-unit id="ce61da6ddc6890af865bbcbf35ba320338b29f18" translate="yes" xml:space="preserve">
          <source>In v3, the contract is slightly changed. The ref is exactly what React would assign as the ref. In this case, it would be a DOM Element:</source>
          <target state="translated">在V3中,合同略有变化。ref正是React会分配的ref。在这种情况下,它将是一个DOM元素。</target>
        </trans-unit>
        <trans-unit id="627ab7a298f17fec8e38bccc1d91af9eed291718" translate="yes" xml:space="preserve">
          <source>Install Jest, and its Babel integrations, as recommended in the &lt;a href=&quot;https://facebook.github.io/jest/docs/en/getting-started.html&quot;&gt;Jest docs&lt;/a&gt;. Install enzyme. Then, simply require/import React, enzyme functions, and your module at the top of a test file.</source>
          <target state="translated">按照&lt;a href=&quot;https://facebook.github.io/jest/docs/en/getting-started.html&quot;&gt;Jest docs中的&lt;/a&gt;建议安装Jest及其Babel集成。安装酶。然后，只需要/导入React，酶功能以及您的模块在测试文件的顶部即可。</target>
        </trans-unit>
        <trans-unit id="c81b79df3c6448eae7c4f80428b54cd5692a17d7" translate="yes" xml:space="preserve">
          <source>Installation</source>
          <target state="translated">Installation</target>
        </trans-unit>
        <trans-unit id="3d23465ae441d7d0798b0dc5121cc754d9d4e3e0" translate="yes" xml:space="preserve">
          <source>Invokes a function prop.</source>
          <target state="translated">调用一个函数道具。</target>
        </trans-unit>
        <trans-unit id="2d9901d3fdea33b982eca1070d3aa1e07f9faeb0" translate="yes" xml:space="preserve">
          <source>Invokes a function prop. Note that in React 16.8+, &lt;code&gt;.invoke&lt;/code&gt; will wrap your handler with &lt;a href=&quot;https://reactjs.org/docs/test-utils.html#act&quot;&gt;&lt;code&gt;ReactTestUtils.act&lt;/code&gt;&lt;/a&gt; and call &lt;code&gt;.update()&lt;/code&gt; automatically.</source>
          <target state="translated">调用功能道具。请注意，在React 16.8+中， &lt;code&gt;.invoke&lt;/code&gt; 将用&lt;a href=&quot;https://reactjs.org/docs/test-utils.html#act&quot;&gt; &lt;code&gt;ReactTestUtils.act&lt;/code&gt; &lt;/a&gt;包装您的处理程序，并自动调用 &lt;code&gt;.update()&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="ad61420b504be96b444a70a45fa7e33753784475" translate="yes" xml:space="preserve">
          <source>Invokes a prop function on the current node and returns the function's return value.</source>
          <target state="translated">在当前节点上调用一个道具函数,并返回函数的返回值。</target>
        </trans-unit>
        <trans-unit id="7d94b03802e935d9f9898bbbe3dced624f97b08e" translate="yes" xml:space="preserve">
          <source>Invokes intercepter and returns itself. intercepter is called with itself. This is helpful when debugging nodes in method chains.</source>
          <target state="translated">调用intercepter并返回自己。intercepter与自己一起被调用。这在调试方法链中的节点时很有帮助。</target>
        </trans-unit>
        <trans-unit id="b000c316b86cd8474dab118e70ad9dd058811ab0" translate="yes" xml:space="preserve">
          <source>It is important, however, to make sure that your tests using the global DOM APIs do not have leaky side-effects which could change the results of other tests. Until there is a better option, this is left to you to ensure.</source>
          <target state="translated">然而,重要的是要确保你使用全局DOM APIs的测试不会出现泄漏的副作用,从而改变其他测试的结果。在没有更好的选择之前,这要靠你自己来确保。</target>
        </trans-unit>
        <trans-unit id="085fcf8b8477ab40d0335545176b5fae273d1620" translate="yes" xml:space="preserve">
          <source>It is possible for the community to create additional (non-official) adapters that will make enzyme work with other libraries. If you have made one and it's not included in the list below, feel free to make a PR to this README and add a link to it! The known 3rd party adapters are:</source>
          <target state="translated">社区可以创建额外的(非官方的)适配器,使酶与其他库一起工作。如果你已经创建了一个,但不在下面的列表中,请随时给这个README做一个PR,并添加一个链接。已知的第三方适配器有</target>
        </trans-unit>
        <trans-unit id="1d49b77ab61fd0ff7eac41f9a863a80dd8231fce" translate="yes" xml:space="preserve">
          <source>It is worth noting that React Native allows for a &lt;a href=&quot;https://facebook.github.io/react-native/docs/view#testid&quot;&gt;testID&lt;/a&gt; prop, that can be used a selector similar to &lt;code&gt;className&lt;/code&gt; in standard React:</source>
          <target state="translated">值得注意的是，React Native允许使用&lt;a href=&quot;https://facebook.github.io/react-native/docs/view#testid&quot;&gt;testID属性&lt;/a&gt;，可以将其用作类似于标准React中的 &lt;code&gt;className&lt;/code&gt; 的选择器：</target>
        </trans-unit>
        <trans-unit id="3f0c2f2f9fc38f2b55d14066f74088f9a46e1873" translate="yes" xml:space="preserve">
          <source>Iterates through each node of the current wrapper and executes the provided function</source>
          <target state="translated">遍历当前包装器的每个节点,并执行所提供的函数。</target>
        </trans-unit>
        <trans-unit id="87f1ccf9e2b97ed25667075bb0738812f0e3b73c" translate="yes" xml:space="preserve">
          <source>Iterates through each node of the current wrapper and executes the provided function with a wrapper around the corresponding node passed in as the first argument.</source>
          <target state="translated">遍历当前包装器的每一个节点,并围绕作为第一个参数传入的相应节点执行提供的包装器函数。</target>
        </trans-unit>
        <trans-unit id="760e0d80faf9972d0a62dcc783d08213ddfc2594" translate="yes" xml:space="preserve">
          <source>JSDOM + Mocha</source>
          <target state="translated">JSDOM+摩卡</target>
        </trans-unit>
        <trans-unit id="3fdfc3ef8d8dda0eb4ebd3789240cc3f6a2a32a1" translate="yes" xml:space="preserve">
          <source>JSDOM will allow all of the &lt;code&gt;enzyme&lt;/code&gt; behavior you would expect. While Jest snapshot testing can be used with this approach as well, it isn't encouraged and is only supported through &lt;code&gt;wrapper.debug()&lt;/code&gt;.</source>
          <target state="translated">JSDOM将允许您期望的所有 &lt;code&gt;enzyme&lt;/code&gt; 行为。尽管Jest快照测试也可以与这种方法一起使用，但不建议这样做，并且仅通过 &lt;code&gt;wrapper.debug()&lt;/code&gt; 支持。</target>
        </trans-unit>
        <trans-unit id="908edefadd774242003862b325fb4429970a887e" translate="yes" xml:space="preserve">
          <source>Jest prior to version 15</source>
          <target state="translated">15版之前的Jest</target>
        </trans-unit>
        <trans-unit id="af11460c5b2533513024763a5dce7c599baa852b" translate="yes" xml:space="preserve">
          <source>Jest version 15 and up</source>
          <target state="translated">Jest 15及以上版本</target>
        </trans-unit>
        <trans-unit id="7b0de0d8f92e4d7d6abaf8a05621c7069d1267df" translate="yes" xml:space="preserve">
          <source>Jsdom requires node 4 or above. As a result, if you want to use it with &lt;code&gt;mount&lt;/code&gt;, you will need to make sure node 4 or iojs is on your machine. If you are stuck using an older version of Node, you may want to try using a browser-based test runner such as &lt;a href=&quot;karma&quot;&gt;Karma&lt;/a&gt;.</source>
          <target state="translated">Jsdom需要节点4或更高。因此，如果要与 &lt;code&gt;mount&lt;/code&gt; 一起使用，则需要确保节点4或iojs在您的计算机上。如果您被困在使用旧版本的Node上，则可能需要尝试使用基于浏览器的测试运行程序，例如&lt;a href=&quot;karma&quot;&gt;Karma&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="6641ccb6316ab92d471a682166ba02a5febd1742" translate="yes" xml:space="preserve">
          <source>Karma is a popular test runner that can run tests in multiple browser environments. Depending on your Karma setup, you may have a number of options for configuring Enzyme.</source>
          <target state="translated">Karma是一个流行的测试运行器,可以在多个浏览器环境下运行测试。根据你的Karma设置,你可能有很多配置Enzyme的选项。</target>
        </trans-unit>
        <trans-unit id="97184cc3c547f78e18c2ae30dd18b0ec7f313288" translate="yes" xml:space="preserve">
          <source>Keep in mind that this method determines equality based on the equality of the node's children as well.</source>
          <target state="translated">请记住,这个方法也是根据节点的子节点的平等来确定平等。</target>
        </trans-unit>
        <trans-unit id="2f7de45577c15861c57b74d4f29a80707b7d62cb" translate="yes" xml:space="preserve">
          <source>Keep in mind that this method determines matching based on the matching of the node's children as well.</source>
          <target state="translated">请记住,这个方法也是根据节点的子节点的匹配来确定匹配度。</target>
        </trans-unit>
        <trans-unit id="4e83763d491228050caf3b9085b7cd5cdfae127c" translate="yes" xml:space="preserve">
          <source>Let's consider a different way this test could have been written.</source>
          <target state="translated">让我们考虑一下这个测试的另一种写法。</target>
        </trans-unit>
        <trans-unit id="3229609e15436ec51bcf00818a69a84dbc58a0c2" translate="yes" xml:space="preserve">
          <source>License</source>
          <target state="translated">License</target>
        </trans-unit>
        <trans-unit id="58fd3b1b83cc7fc933d72fe934bdb6e534441281" translate="yes" xml:space="preserve">
          <source>Licensed under the MIT License.</source>
          <target state="translated">根据麻省理工学院许可证授权。</target>
        </trans-unit>
        <trans-unit id="e4019f353fefb585ea7232aefc6176fd777d36e8" translate="yes" xml:space="preserve">
          <source>Lifecycle methods</source>
          <target state="translated">生命周期方法</target>
        </trans-unit>
        <trans-unit id="2c029f2cd3dfcc80cba5c52d625c37340f57b0d7" translate="yes" xml:space="preserve">
          <source>Likewise, running:</source>
          <target state="translated">同样,跑。</target>
        </trans-unit>
        <trans-unit id="e50b4426bd02c7ead34ce6dfbdd183a17560f687" translate="yes" xml:space="preserve">
          <source>Loading an emulated DOM with JSDOM</source>
          <target state="translated">用JSDOM加载一个仿真DOM</target>
        </trans-unit>
        <trans-unit id="89690ac571dcf4c9c40c842efed3f11171d07b29" translate="yes" xml:space="preserve">
          <source>MIT</source>
          <target state="translated">MIT</target>
        </trans-unit>
        <trans-unit id="62eb4beb7d3cb76291ea799476d021bd545e371e" translate="yes" xml:space="preserve">
          <source>Manually sets context of the root component.</source>
          <target state="translated">手动设置根组件的上下文。</target>
        </trans-unit>
        <trans-unit id="5a000ec9f61914d788405467c930c0970794b471" translate="yes" xml:space="preserve">
          <source>Manually sets props of the root component.</source>
          <target state="translated">手动设置根组件的道具。</target>
        </trans-unit>
        <trans-unit id="375788bd47f3004cfbd30ac5285c7133351a9c5e" translate="yes" xml:space="preserve">
          <source>Manually sets state of the root component.</source>
          <target state="translated">手动设置根组件的状态。</target>
        </trans-unit>
        <trans-unit id="1760ace6059945af8f8dc55f7b3325fe7bcb82bb" translate="yes" xml:space="preserve">
          <source>Many methods in enzyme&amp;rsquo;s API accept a &lt;em&gt;selector&lt;/em&gt; as an argument. You can select several different ways:</source>
          <target state="translated">酶的API中的许多方法都接受&lt;em&gt;选择器&lt;/em&gt;作为参数。您可以选择几种不同的方式：</target>
        </trans-unit>
        <trans-unit id="df26848d0a9e8defbee11ca591066a00ca8d692e" translate="yes" xml:space="preserve">
          <source>Maps the current array of nodes to another array.</source>
          <target state="translated">将当前的节点数组映射到另一个数组。</target>
        </trans-unit>
        <trans-unit id="6056340ca8e72eb72f1a630a109266836d8878ff" translate="yes" xml:space="preserve">
          <source>Maps the current array of nodes to another array. Each node is passed in as a &lt;code&gt;ReactWrapper&lt;/code&gt; to the map function.</source>
          <target state="translated">将当前节点数组映射到另一个数组。每个节点作为 &lt;code&gt;ReactWrapper&lt;/code&gt; 传递到map函数。</target>
        </trans-unit>
        <trans-unit id="612a11947deccda12d116eebd4b0928282141eb5" translate="yes" xml:space="preserve">
          <source>Maps the current array of nodes to another array. Each node is passed in as a &lt;code&gt;ShallowWrapper&lt;/code&gt; to the map function.</source>
          <target state="translated">将当前节点数组映射到另一个数组。每个节点都作为 &lt;code&gt;ShallowWrapper&lt;/code&gt; 传递给map函数。</target>
        </trans-unit>
        <trans-unit id="8cb0efde29500617f2164324f6809ca33a506183" translate="yes" xml:space="preserve">
          <source>Migration Guide for enzyme v2.x to v3.x</source>
          <target state="translated">酶制剂v2.x到v3.x迁移指南</target>
        </trans-unit>
        <trans-unit id="75b00d6edbc3a669a907ae86dfebaade6de3979e" translate="yes" xml:space="preserve">
          <source>NOTE: Prior to v3.8.0 of enzyme, can only be called on a wrapper instance that is also the root instance.</source>
          <target state="translated">注意:在酶的v3.8.0之前,只能在同时是根实例的包装器实例上调用。</target>
        </trans-unit>
        <trans-unit id="091883a74253162ebd02d902e5e2aaa1b8c3e201" translate="yes" xml:space="preserve">
          <source>NOTE: This will &lt;em&gt;only&lt;/em&gt; work if the selector (and thus the component&amp;rsquo;s &lt;code&gt;displayName&lt;/code&gt;) is a string starting with a capital letter. Strings starting with lower case letters will be assumed to be a CSS selector (therefore a tag name).</source>
          <target state="translated">注意：&lt;em&gt;仅&lt;/em&gt;当选择器（以及组件的 &lt;code&gt;displayName&lt;/code&gt; ）为以大写字母开头的字符串时，此方法&lt;em&gt;才&lt;/em&gt;有效。以小写字母开头的字符串将被认为是CSS选择器（因此标记名称）。</target>
        </trans-unit>
        <trans-unit id="cee5733958af2cdd18c6c589b40534524869b31b" translate="yes" xml:space="preserve">
          <source>NOTE: When called on a shallow wrapper, &lt;code&gt;.prop(key)&lt;/code&gt; will return values for props on the root node that the component &lt;em&gt;renders&lt;/em&gt;, not the component itself. To return the props for the entire React component, use &lt;code&gt;wrapper.instance().props&lt;/code&gt;. See &lt;a href=&quot;instance&quot;&gt;&lt;code&gt;.instance() =&amp;gt; ReactComponent&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">注意：在浅层包装上调用时， &lt;code&gt;.prop(key)&lt;/code&gt; 将返回组件&lt;em&gt;呈现&lt;/em&gt;的根节点上的props值，而不是组件本身。要返回整个React组件的道具，请使用 &lt;code&gt;wrapper.instance().props&lt;/code&gt; 。参见&lt;a href=&quot;instance&quot;&gt; &lt;code&gt;.instance() =&amp;gt; ReactComponent&lt;/code&gt; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="cc7fd9fb0e55497ff9e90e4203fe1f63a815717f" translate="yes" xml:space="preserve">
          <source>NOTE: When called on a shallow wrapper, &lt;code&gt;.props()&lt;/code&gt; will return values for props on the root node that the component &lt;em&gt;renders&lt;/em&gt;, not the component itself.</source>
          <target state="translated">注意：在浅层包装上调用时， &lt;code&gt;.props()&lt;/code&gt; 将在组件&lt;em&gt;渲染&lt;/em&gt;的根节点上返回props的值，而不是组件本身。</target>
        </trans-unit>
        <trans-unit id="3b2c20adfa111ce2a4510a086d82c1ca018ce3f7" translate="yes" xml:space="preserve">
          <source>NOTE: With React &lt;code&gt;16&lt;/code&gt; and above, &lt;code&gt;instance()&lt;/code&gt; returns &lt;code&gt;null&lt;/code&gt; for stateless functional components.</source>
          <target state="translated">注意：对于React &lt;code&gt;16&lt;/code&gt; 及更高版本，无状态功能组件的 &lt;code&gt;instance()&lt;/code&gt; 返回 &lt;code&gt;null&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="9377463d2cd2bd6eecda0f0f4d7bd2318e601cf0" translate="yes" xml:space="preserve">
          <source>NOTE: can only be called on a wrapper instance that is also the root instance.</source>
          <target state="translated">注意:只能在同时是根实例的包装器实例上调用。</target>
        </trans-unit>
        <trans-unit id="6a5d0f356c889a19393869bcd716092b80b8c090" translate="yes" xml:space="preserve">
          <source>NOTE: can only be called on a wrapper instance that is also the root instance. With React &lt;code&gt;16&lt;/code&gt; and above, &lt;code&gt;instance()&lt;/code&gt; returns &lt;code&gt;null&lt;/code&gt; for stateless functional components.</source>
          <target state="translated">注意：只能在也是根实例的包装实例上调用。在React &lt;code&gt;16&lt;/code&gt; 及更高版本中， &lt;code&gt;instance()&lt;/code&gt; 对于无状态功能组件返回 &lt;code&gt;null&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="184bdeb1df9ab3c2c26b6e34611bf393cc609426" translate="yes" xml:space="preserve">
          <source>NOTE: can only be called on a wrapper of a single non-DOM component element node, otherwise it will throw an error. If you have to shallow-wrap a wrapper with multiple child nodes, use &lt;a href=&quot;shallow&quot;&gt;.shallow()&lt;/a&gt;.</source>
          <target state="translated">注意：只能在单个非DOM组件元素节点的包装上调用，否则它将引发错误。如果必须使用多个子节点将包装器浅层包装，请使用&lt;a href=&quot;shallow&quot;&gt;.shallow（）&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="bc7593074e1e4415c564110b1eb4b512716f2ae6" translate="yes" xml:space="preserve">
          <source>NOTE: can only be called on a wrapper of a single non-DOM component element node, otherwise it will throw an error. If you have to shallow-wrap a wrapper with multiple child nodes, use &lt;a href=&quot;shallow&quot;&gt;&lt;code&gt;.shallow()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">注意：只能在单个非DOM组件元素节点的包装上调用，否则它将引发错误。如果必须使用多个子节点将包装器浅层包装，请使用&lt;a href=&quot;shallow&quot;&gt; &lt;code&gt;.shallow()&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="b54342ac5b9696d06e43174ee44cb1ed6620fe75" translate="yes" xml:space="preserve">
          <source>NOTE: can only be called on wrapper of a single non-DOM component element node.</source>
          <target state="translated">注意:只能在单个非DOM组件元素节点的封装器上调用。</target>
        </trans-unit>
        <trans-unit id="4192d93255f2037a90abeab85c29964838a0216a" translate="yes" xml:space="preserve">
          <source>NOTE: this does not force a re-render. Use &lt;code&gt;wrapper.setProps({})&lt;/code&gt; to force a re-render.</source>
          <target state="translated">注意：这不会强制重新渲染。使用 &lt;code&gt;wrapper.setProps({})&lt;/code&gt; 强制重新渲染。</target>
        </trans-unit>
        <trans-unit id="3f87372ba39a517dab878178b973a97633cbb7ee" translate="yes" xml:space="preserve">
          <source>Next, to get started with enzyme, you can simply install it with npm:</source>
          <target state="translated">接下来,要开始使用enzyme,你可以简单地用npm安装它。</target>
        </trans-unit>
        <trans-unit id="2704597f00ed5a5902967202bcfa1d6ea3f64d6a" translate="yes" xml:space="preserve">
          <source>No equivalent for ShallowWrappers.</source>
          <target state="translated">ShallowWrappers没有对应的功能。</target>
        </trans-unit>
        <trans-unit id="99beda9bdbf16ea128f48de9615baa92e1fc423f" translate="yes" xml:space="preserve">
          <source>Node Equality now ignores &lt;code&gt;undefined&lt;/code&gt; values</source>
          <target state="translated">节点平等现在忽略 &lt;code&gt;undefined&lt;/code&gt; 值</target>
        </trans-unit>
        <trans-unit id="56d834da4c41891a65d5df126eb0fbfe1f3cc32b" translate="yes" xml:space="preserve">
          <source>Node.js Compatibility</source>
          <target state="translated">Node.js的兼容性</target>
        </trans-unit>
        <trans-unit id="272938fbe94aac2ec7943900b4bf021951c11f66" translate="yes" xml:space="preserve">
          <source>Note that you may want to perform some additional mocking around native components, or if you want to perform snapshot testing against React Native components. Notice how you may need to mock React Navigation's &lt;code&gt;KeyGenerator&lt;/code&gt; in this case, to avoid random React keys that will cause snapshots to always fail.</source>
          <target state="translated">请注意，您可能想要围绕本机组件执行一些附加的模拟，或者要对React Native组件执行快照测试。请注意，在这种情况下，您可能需要模拟React Navigation的 &lt;code&gt;KeyGenerator&lt;/code&gt; ，以避免会导致快照始终失败的随机React密钥。</target>
        </trans-unit>
        <trans-unit id="90cdfd42358142e9efe45e1e609a88f48ba1a20f" translate="yes" xml:space="preserve">
          <source>Note: can only be called on a wrapper of a single node.</source>
          <target state="translated">注意:只能在单个节点的封装器上调用。</target>
        </trans-unit>
        <trans-unit id="9c3befe7e22c8667bc957541f49b0ee79970b588" translate="yes" xml:space="preserve">
          <source>Notes:</source>
          <target state="translated">Notes:</target>
        </trans-unit>
        <trans-unit id="f382a6e547ea25cdaf30f6ad5ce1543438e301d6" translate="yes" xml:space="preserve">
          <source>Now lets say we have a test which does something like:</source>
          <target state="translated">现在让我们假设我们有一个测试,它可以做这样的事情。</target>
        </trans-unit>
        <trans-unit id="2cfb9ba9bf9b69ab7fc66cced8726e4a627e7d80" translate="yes" xml:space="preserve">
          <source>Now your machine will be running Node 4. You can use the &lt;code&gt;nvm use&lt;/code&gt; command to switch between the two environments:</source>
          <target state="translated">现在，您的计算机将运行节点4。您可以使用 &lt;code&gt;nvm use&lt;/code&gt; 命令在两种环境之间切换：</target>
        </trans-unit>
        <trans-unit id="97c1d68b25dd96a3c4a614d86470040b5990b3ea" translate="yes" xml:space="preserve">
          <source>Now, in &lt;code&gt;enzyme&lt;/code&gt; v3, you are required to re-find the component; for example:</source>
          <target state="translated">现在，在 &lt;code&gt;enzyme&lt;/code&gt; v3中，您需要重新查找组件。例如：</target>
        </trans-unit>
        <trans-unit id="8b0da8b37bc549db749506873bfc235153e1e2dd" translate="yes" xml:space="preserve">
          <source>Object Property Selector:</source>
          <target state="translated">对象属性选择器。</target>
        </trans-unit>
        <trans-unit id="ce9fe6e31bd56d2cf57ca3b1310629b0ad41fd50" translate="yes" xml:space="preserve">
          <source>Organizations and projects using &lt;code&gt;enzyme&lt;/code&gt; can list themselves &lt;a href=&quot;inthewild.md&quot;&gt;here&lt;/a&gt;.</source>
          <target state="translated">使用 &lt;code&gt;enzyme&lt;/code&gt; 组织和项目可以&lt;a href=&quot;inthewild.md&quot;&gt;在这里&lt;/a&gt;列出。</target>
        </trans-unit>
        <trans-unit id="34922b3a1dbc65072f9fb6d34e4f30220d790567" translate="yes" xml:space="preserve">
          <source>Otherwise, the match follows the same rules as &lt;code&gt;matchesElement&lt;/code&gt;.</source>
          <target state="translated">否则，匹配遵循与 &lt;code&gt;matchesElement&lt;/code&gt; 相同的规则。</target>
        </trans-unit>
        <trans-unit id="02846c59f34916dfd16f0ebc7108b1d3e5075e6b" translate="yes" xml:space="preserve">
          <source>Outputs to console:</source>
          <target state="translated">输出到控制台。</target>
        </trans-unit>
        <trans-unit id="5dd8ea410cd3d83335c738b3dbe1715d6b34d7c3" translate="yes" xml:space="preserve">
          <source>PRs implementing more support for CSS selectors will be accepted and is an area of development for enzyme that will likely be focused on in the future.</source>
          <target state="translated">实现更多支持CSS选择器的PR将被接受,也是酶的一个发展领域,未来可能会被重点关注。</target>
        </trans-unit>
        <trans-unit id="98ea62a6316d0d39d8e64c6b697fbabe4c5dd85b" translate="yes" xml:space="preserve">
          <source>Prior enzyme v3, we would observe the following behavior:</source>
          <target state="translated">在酶v3之前,我们会观察到以下行为。</target>
        </trans-unit>
        <trans-unit id="42e3b001dfd21e6e374f0eb92c81d737957e7aa2" translate="yes" xml:space="preserve">
          <source>Prior to enzyme 3.0 there were some issues with conditional requires that were used to maintain backwards compatibility with React versions. With enzyme 3.0+, this should no longer be an issue. If it is, please file a GitHub issue or make a PR to this documentation with instructions on how to set it up.</source>
          <target state="translated">在enzyme 3.0之前,有一些条件要求的问题,这些条件要求被用来保持与React版本的向后兼容性。在enzyme 3.0+中,这应该不再是一个问题。如果是的话,请在GitHub上提交一个问题,或者给这个文档做一个PR,说明如何设置。</target>
        </trans-unit>
        <trans-unit id="33e746bee15045e6936cee4dda087dc811a98eee" translate="yes" xml:space="preserve">
          <source>Private properties and methods have been removed</source>
          <target state="translated">私人属性和方法已被删除</target>
        </trans-unit>
        <trans-unit id="6a82f0c78db8dd669093e7c34f08489657bce49c" translate="yes" xml:space="preserve">
          <source>React 15.x</source>
          <target state="translated">React 15.x</target>
        </trans-unit>
        <trans-unit id="33fcf725f773361bab8954d00597f1d0ba35e5d6" translate="yes" xml:space="preserve">
          <source>React 16.x</source>
          <target state="translated">React 16.x</target>
        </trans-unit>
        <trans-unit id="ae1d789a7d86f41c5df32df65a68ab5844aed037" translate="yes" xml:space="preserve">
          <source>React Hooks support</source>
          <target state="translated">支持React Hooks</target>
        </trans-unit>
        <trans-unit id="5512f2ed79478256d4e306d08aec989819adea91" translate="yes" xml:space="preserve">
          <source>React applications are dynamic. When testing your react components, you often want to test them before &lt;em&gt;and after&lt;/em&gt; certain state changes take place. When using &lt;code&gt;mount&lt;/code&gt;, any react component instance in the entire render tree could register code to initiate a state change at any time.</source>
          <target state="translated">React应用程序是动态的。测试反应组件时，您通常希望&lt;em&gt;在&lt;/em&gt;某些状态发生更改之前&lt;em&gt;和之后&lt;/em&gt;进行测试。使用 &lt;code&gt;mount&lt;/code&gt; 时，整个渲染树中的任何react组件实例都可以注册代码以随时启动状态更改。</target>
        </trans-unit>
        <trans-unit id="0498f2e51c0775ecb158dd2dfe9ffc1e737be5d7" translate="yes" xml:space="preserve">
          <source>React component name and props (&lt;code&gt;Button&lt;/code&gt;, &lt;code&gt;Button[type=&quot;submit&quot;]&lt;/code&gt;, etc) - however, please note that it is strongly encouraged to find by component constructor/function and not by display name.</source>
          <target state="translated">React组件名称和属性（ &lt;code&gt;Button&lt;/code&gt; ，Button， &lt;code&gt;Button[type=&quot;submit&quot;]&lt;/code&gt; 等）-但是，请注意，强烈建议按组件构造函数/函数而不是显示名称进行查找。</target>
        </trans-unit>
        <trans-unit id="48647bc40e8da265ad3f0daad6f311438928fa27" translate="yes" xml:space="preserve">
          <source>React semver compatibility</source>
          <target state="translated">React semver兼容性</target>
        </trans-unit>
        <trans-unit id="1afbe1c92bade3c5195cbe87245c9338e8f78a02" translate="yes" xml:space="preserve">
          <source>ReactWrapper API</source>
          <target state="translated">ReactWrapper API</target>
        </trans-unit>
        <trans-unit id="06a4296daa13605b50738dfe50fbaae79395f5de" translate="yes" xml:space="preserve">
          <source>Read the full &lt;a href=&quot;docs/api/mount&quot;&gt;API Documentation&lt;/a&gt;</source>
          <target state="translated">阅读完整的&lt;a href=&quot;docs/api/mount&quot;&gt;API文档&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="83b786401cfb568d37b3f75b3245caf5357c262e" translate="yes" xml:space="preserve">
          <source>Read the full &lt;a href=&quot;docs/api/render&quot;&gt;API Documentation&lt;/a&gt;</source>
          <target state="translated">阅读完整的&lt;a href=&quot;docs/api/render&quot;&gt;API文档&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="532f6afe18f113880d94f23a77e7ccab93f1deb8" translate="yes" xml:space="preserve">
          <source>Read the full &lt;a href=&quot;docs/api/shallow&quot;&gt;API Documentation&lt;/a&gt;</source>
          <target state="translated">阅读完整的&lt;a href=&quot;docs/api/shallow&quot;&gt;API文档&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="ae5ddb000e590fc6ab648cc3ae9e151edcdfdd30" translate="yes" xml:space="preserve">
          <source>Reduce the set of matched nodes to the first in the set, just like &lt;code&gt;.at(0)&lt;/code&gt;.</source>
          <target state="translated">将匹配节点的集合减少到集合中的第一个，就像 &lt;code&gt;.at(0)&lt;/code&gt; 一样。</target>
        </trans-unit>
        <trans-unit id="2d9c1c1b3dab2786b576c8e732536e59553a495d" translate="yes" xml:space="preserve">
          <source>Reduce the set of matched nodes to the last in the set, just like &lt;code&gt;.at(length - 1)&lt;/code&gt;.</source>
          <target state="translated">将匹配节点的集合减少到集合中的最后一个节点，就像 &lt;code&gt;.at(length - 1)&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="8ccff428899c967a3d55f3fc0f93235dc1bc5819" translate="yes" xml:space="preserve">
          <source>Reduces the current array of nodes to a value</source>
          <target state="translated">将当前数组中的节点减少到一个值。</target>
        </trans-unit>
        <trans-unit id="dd1ea7efe5e373a144f50e06ea911ba50b2ebee0" translate="yes" xml:space="preserve">
          <source>Reduces the current array of nodes to a value, from right to left.</source>
          <target state="translated">将当前数组中的节点从右到左还原为一个值。</target>
        </trans-unit>
        <trans-unit id="06c51f535be0284f47142bee741d11a92bae0aef" translate="yes" xml:space="preserve">
          <source>Related Methods</source>
          <target state="translated">相关方法</target>
        </trans-unit>
        <trans-unit id="ce21c301aba7b19e79e040426adc0bb673795029" translate="yes" xml:space="preserve">
          <source>Remove nodes in the current wrapper that do not match the provided selector.</source>
          <target state="translated">删除当前封装器中不符合所提供选择器的节点。</target>
        </trans-unit>
        <trans-unit id="ff2a8b984309013c5d79723ecf4d7e85ed3ec2d7" translate="yes" xml:space="preserve">
          <source>Remove nodes in the current wrapper that do not return true for the provided predicate function.</source>
          <target state="translated">删除当前包装器中对所提供的谓词函数不返回真的节点。</target>
        </trans-unit>
        <trans-unit id="32f3f76b91e6bb31e23e6471239bbbf0bbcd31a1" translate="yes" xml:space="preserve">
          <source>Remove nodes in the current wrapper that match the provided selector. (inverse of &lt;code&gt;.filter()&lt;/code&gt;)</source>
          <target state="translated">在当前包装器中删除与提供的选择器匹配的节点。（ &lt;code&gt;.filter()&lt;/code&gt; 的逆函数）</target>
        </trans-unit>
        <trans-unit id="f2d4f296845c93235dc62dbb5b8c6c9ce6c66870" translate="yes" xml:space="preserve">
          <source>Removes nodes that are not host nodes; e.g., this will only return HTML nodes.</source>
          <target state="translated">移除不是主机节点的节点;例如,这将只返回HTML节点。</target>
        </trans-unit>
        <trans-unit id="9582a02f141fc4b345b2936eba691cd0654efebc" translate="yes" xml:space="preserve">
          <source>Returns</source>
          <target state="translated">Returns</target>
        </trans-unit>
        <trans-unit id="86474c2255e8e4ff4875e3d79aede85f053698c6" translate="yes" xml:space="preserve">
          <source>Returns a CheerioWrapper around the rendered HTML of the single node's subtree. It must be a single-node wrapper.</source>
          <target state="translated">Returns a CheerioWrapper around the rendered HTML of the single node's subree.它必须是一个单节点包装器。</target>
        </trans-unit>
        <trans-unit id="211f494c0a568d444559814ce3694a88c8f9ce24" translate="yes" xml:space="preserve">
          <source>Returns a CheerioWrapper of the current node's subtree.</source>
          <target state="translated">返回当前节点的子树的CheerioWrapper。</target>
        </trans-unit>
        <trans-unit id="d48f90d7e389e762bae92e61487e1612ed651cf6" translate="yes" xml:space="preserve">
          <source>Returns a function that, when called with arguments &lt;code&gt;args&lt;/code&gt;, will return a new wrapper based on the render prop in the original wrapper's prop &lt;code&gt;propName&lt;/code&gt;.</source>
          <target state="translated">返回一个函数，当使用参数 &lt;code&gt;args&lt;/code&gt; 调用该函数时，该函数将基于原始包装器的prop &lt;code&gt;propName&lt;/code&gt; 中的render属性返回一个新的包装器。</target>
        </trans-unit>
        <trans-unit id="b208d8e1ea6a1d1381c2ea60572548597c2e70b0" translate="yes" xml:space="preserve">
          <source>Returns a new wrapper with a subset of the nodes of the original wrapper, according to the rules of &lt;code&gt;Array#slice&lt;/code&gt;.</source>
          <target state="translated">根据 &lt;code&gt;Array#slice&lt;/code&gt; 的规则，返回一个具有原始包装器节点子集的新包装器。</target>
        </trans-unit>
        <trans-unit id="84b3eb8ab39a479977153d2360384a085515a55c" translate="yes" xml:space="preserve">
          <source>Returns a new wrapper with all of the children of the node(s) in the current wrapper. Optionally, a selector can be provided and it will filter the children by this selector</source>
          <target state="translated">返回一个新的包装器,其中包含当前包装器中所有节点的子节点。也可以提供一个选择器,它将通过这个选择器过滤子节点。</target>
        </trans-unit>
        <trans-unit id="5d96cebed6958dafb15f68ca3b871c5a4401ac12" translate="yes" xml:space="preserve">
          <source>Returns a new wrapper with child at the specified index.</source>
          <target state="translated">返回一个新的包装器,其子代位于指定的索引处。</target>
        </trans-unit>
        <trans-unit id="53dac4bb028547104237df7cad647ac790c3cf91" translate="yes" xml:space="preserve">
          <source>Returns a new wrapper with only host nodes. When using &lt;code&gt;react-dom&lt;/code&gt;, host nodes are HTML elements rather than custom React components, e.g. &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; versus &lt;code&gt;&amp;lt;MyComponent&amp;gt;&lt;/code&gt;.</source>
          <target state="translated">返回仅包含主机节点的新包装器。使用 &lt;code&gt;react-dom&lt;/code&gt; 时，主机节点是HTML元素，而不是自定义的React组件，例如 &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; 与 &lt;code&gt;&amp;lt;MyComponent&amp;gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="27c03b12897cdad0c688c7a86bc370312159c4c9" translate="yes" xml:space="preserve">
          <source>Returns a new wrapper with only the nodes of the current wrapper that don't match the provided selector.</source>
          <target state="translated">返回一个新的wrapper,只包含当前wrapper中不匹配选择器的节点。</target>
        </trans-unit>
        <trans-unit id="aae1712e7b83fc8bc756489e56950ccd84d1e15b" translate="yes" xml:space="preserve">
          <source>Returns a new wrapper with only the nodes of the current wrapper that match the provided selector.</source>
          <target state="translated">返回一个新的包装器,只包含当前包装器中与所提供的选择器匹配的节点。</target>
        </trans-unit>
        <trans-unit id="7c08cd5e05f57b1784e102f649ce960d691e09d3" translate="yes" xml:space="preserve">
          <source>Returns a new wrapper with only the nodes of the current wrapper that, when passed into the provided predicate function, return true.</source>
          <target state="translated">返回一个新的包装器,只包含当前包装器的节点,当传递到提供的谓词函数中时,返回true。</target>
        </trans-unit>
        <trans-unit id="51aab425482762c72b05a0dff6c4459464d9e82f" translate="yes" xml:space="preserve">
          <source>Returns a static HTML rendering of the current node.</source>
          <target state="translated">返回当前节点的静态HTML渲染。</target>
        </trans-unit>
        <trans-unit id="8eb82b4477a1feba11f0c279f4d4d7bb95db7329" translate="yes" xml:space="preserve">
          <source>Returns a string of the rendered HTML markup of the current render tree. See also &lt;a href=&quot;debug&quot;&gt;.debug()&lt;/a&gt;</source>
          <target state="translated">返回当前渲染树的渲染HTML标记的字符串。另请参见&lt;a href=&quot;debug&quot;&gt;.debug（）&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="bca84c1c2845bcc3f755b016779891fcfed37dc2" translate="yes" xml:space="preserve">
          <source>Returns a string of the rendered HTML markup of the current render tree. See also &lt;a href=&quot;debug&quot;&gt;&lt;code&gt;.debug()&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">返回当前渲染树的渲染HTML标记的字符串。另请参见&lt;a href=&quot;debug&quot;&gt; &lt;code&gt;.debug()&lt;/code&gt; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="127ca02451a822a26a76eda473030fac6a21e3b5" translate="yes" xml:space="preserve">
          <source>Returns a string of the rendered HTML markup of the entire current render tree (not just the shallow-rendered part). It uses &lt;a href=&quot;../render&quot;&gt;static rendering&lt;/a&gt; internally. To see only the shallow-rendered part use &lt;a href=&quot;debug&quot;&gt;&lt;code&gt;.debug()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">返回整个当前渲染树（不仅仅是浅渲染的部分）的渲染HTML标记的字符串。它在内部使用&lt;a href=&quot;../render&quot;&gt;静态渲染&lt;/a&gt;。要仅查看浅显的部分，请使用&lt;a href=&quot;debug&quot;&gt; &lt;code&gt;.debug()&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="4a223563f29c59cea67266939a3d3ac5e488f509" translate="yes" xml:space="preserve">
          <source>Returns a string of the rendered text of the current render tree. This function should be looked at with skepticism if being used to test what the actual HTML output of the component will be. If that is what you would like to test, use enzyme's &lt;code&gt;render&lt;/code&gt; function instead.</source>
          <target state="translated">返回当前渲染树的渲染文本的字符串。如果此功能用于测试组件的实际HTML输出是什么，则应对此表示怀疑。如果这是您要测试的内容，请改为使用酶的 &lt;code&gt;render&lt;/code&gt; 函数。</target>
        </trans-unit>
        <trans-unit id="4843e6ccc4589e08813463b7d2d9e025dc98a35f" translate="yes" xml:space="preserve">
          <source>Returns a string representation of the current render tree for debugging purposes.</source>
          <target state="translated">返回当前渲染树的字符串表示,用于调试。</target>
        </trans-unit>
        <trans-unit id="c63c229f44fa6b7610dd366f82cf22267b3335c7" translate="yes" xml:space="preserve">
          <source>Returns a string representation of the current shallow render tree for debugging purposes.</source>
          <target state="translated">返回当前浅层渲染树的字符串表示,用于调试。</target>
        </trans-unit>
        <trans-unit id="4681ee9b89e70349c8dc415ac91a984a52520b16" translate="yes" xml:space="preserve">
          <source>Returns a string representation of the text nodes in the current render tree.</source>
          <target state="translated">返回当前渲染树中文本节点的字符串表示。</target>
        </trans-unit>
        <trans-unit id="6024b791fa3fccd05adaf11bb2782533526cf507" translate="yes" xml:space="preserve">
          <source>Returns a wrapper around all of the parents/ancestors of the single node in the wrapper. Does not include the node itself. Optionally, a selector can be provided and it will filter the parents by this selector. It must be a single-node wrapper.</source>
          <target state="translated">返回包裹器中单个节点的所有父节点/祖节点的包裹器。不包括节点本身。也可以提供一个选择器,它将通过这个选择器过滤父节点。它必须是一个单节点包装器。</target>
        </trans-unit>
        <trans-unit id="47743cf1c7aa4154d6a5e0de9efc8139e113256c" translate="yes" xml:space="preserve">
          <source>Returns a wrapper around the node at a given index of the current wrapper.</source>
          <target state="translated">返回当前包装器给定索引处的节点的包装器。</target>
        </trans-unit>
        <trans-unit id="c93c139f81b3a1a8bf11c0337060399fc54ce7f8" translate="yes" xml:space="preserve">
          <source>Returns a wrapper of the first element that matches the selector by traversing up through the wrapped node's ancestors in the tree, starting with itself. It must be a single-node wrapper.</source>
          <target state="translated">返回与选择器相匹配的第一个元素的包装器,包装器从自己开始向上遍历被包装节点的祖先。它必须是一个单节点包装器。</target>
        </trans-unit>
        <trans-unit id="868df0bf326d063f31eb0dd560c03b713601a0df" translate="yes" xml:space="preserve">
          <source>Returns a wrapper of the first node of the current wrapper.</source>
          <target state="translated">返回当前包装器的第一个节点的包装器。</target>
        </trans-unit>
        <trans-unit id="63aed6ecb0ed15101e6b22d9cfb3cc695b4a6c34" translate="yes" xml:space="preserve">
          <source>Returns a wrapper of the last node of the current wrapper.</source>
          <target state="translated">返回当前包装器的最后一个节点的包装器。</target>
        </trans-unit>
        <trans-unit id="17850ccab13167414365a4b05ff0fff1f73fb17a" translate="yes" xml:space="preserve">
          <source>Returns a wrapper of the node at the provided index of the current wrapper.</source>
          <target state="translated">返回当前包装器的索引处的节点的包装器。</target>
        </trans-unit>
        <trans-unit id="e1a2d0a4328ea8c0ecf7a3fa158e0bcc21a46f4b" translate="yes" xml:space="preserve">
          <source>Returns a wrapper of the node rendered by the provided render prop.</source>
          <target state="translated">返回由提供的渲染道具渲染的节点的包装器。</target>
        </trans-unit>
        <trans-unit id="f0d2faea5b4935c7b9202273f5ff0f32be1c8dbf" translate="yes" xml:space="preserve">
          <source>Returns a wrapper representing the &lt;code&gt;wrappingComponent&lt;/code&gt;, if one was passed.</source>
          <target state="translated">返回一个代表的包装 &lt;code&gt;wrappingComponent&lt;/code&gt; ，如果获得通过。</target>
        </trans-unit>
        <trans-unit id="04c5da6aa8b4c608b9f5ddc72caa8bfc6e369eda" translate="yes" xml:space="preserve">
          <source>Returns a wrapper with the direct parent of the node in the current wrapper.</source>
          <target state="translated">返回当前包装器中节点的直接父节点的包装器。</target>
        </trans-unit>
        <trans-unit id="f595703da6e83d34c82d5b1b7dd507c6e3074eba" translate="yes" xml:space="preserve">
          <source>Returns an HTML-like string of the wrapper for debugging purposes. Useful to print out to the console when tests are not passing when you expect them to.</source>
          <target state="translated">返回一个类似HTML的包装器字符串,用于调试。当测试在你期望的时候没有通过时,可以有用的打印出来到控制台。</target>
        </trans-unit>
        <trans-unit id="4271154becfe0b19fa840b1121e6684e2570ded5" translate="yes" xml:space="preserve">
          <source>Returns the context hash for the root node of the wrapper. Optionally pass in a prop name and it will return just that value.</source>
          <target state="translated">返回包装器根节点的上下文哈希值。也可以传入一个道具名,它将只返回该值。</target>
        </trans-unit>
        <trans-unit id="c912b2655423dd33fa8ad3fcbc594c43b6b68010" translate="yes" xml:space="preserve">
          <source>Returns the context of the root component.</source>
          <target state="translated">返回根组件的上下文。</target>
        </trans-unit>
        <trans-unit id="78f15630eb3ff36a32821f65f8d5bac419c1419d" translate="yes" xml:space="preserve">
          <source>Returns the instance of the root component.</source>
          <target state="translated">返回根组件的实例。</target>
        </trans-unit>
        <trans-unit id="447c8420b99aa12995505934f0bf0010780fb813" translate="yes" xml:space="preserve">
          <source>Returns the key of the current node.</source>
          <target state="translated">返回当前节点的键。</target>
        </trans-unit>
        <trans-unit id="37be156c308403fe9c4b077210d1335623b52b6a" translate="yes" xml:space="preserve">
          <source>Returns the key of the root component.</source>
          <target state="translated">返回根组件的键。</target>
        </trans-unit>
        <trans-unit id="e47376a68934a2ac36c571d2396005363e200a37" translate="yes" xml:space="preserve">
          <source>Returns the key value for the node of the current wrapper. It must be a single-node wrapper.</source>
          <target state="translated">返回当前包装器的节点的键值,必须是单节点包装器。必须是单节点包装器。</target>
        </trans-unit>
        <trans-unit id="cb24a58637ebb8e0960878f4adaead76c7c809de" translate="yes" xml:space="preserve">
          <source>Returns the name of the current node of the wrapper.</source>
          <target state="translated">返回包装器当前节点的名称。</target>
        </trans-unit>
        <trans-unit id="84ee32cf6b18bbe3b330b63424397e5669ac0398" translate="yes" xml:space="preserve">
          <source>Returns the name of the current node of this wrapper. If it's a composite component, this will be the name of the component. If it's a native DOM node, it will be a string of the tag name. If it's &lt;code&gt;null&lt;/code&gt;, it will be &lt;code&gt;null&lt;/code&gt;.</source>
          <target state="translated">返回此包装的当前节点的名称。如果是复合组件，则这将是组件的名称。如果它是本地DOM节点，则它将是标记名称的字符串。如果为 &lt;code&gt;null&lt;/code&gt; ， &lt;code&gt;null&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="846143e8df1dd2a6b2e571661528144644fffaa4" translate="yes" xml:space="preserve">
          <source>Returns the name of the current node of this wrapper. If it's a composite component, this will be the name of the top-most rendered component. If it's a native DOM node, it will be a string of the tag name. If it's &lt;code&gt;null&lt;/code&gt;, it will be &lt;code&gt;null&lt;/code&gt;.</source>
          <target state="translated">返回此包装的当前节点的名称。如果是复合组件，则这将是最顶部呈现的组件的名称。如果它是本地DOM节点，则它将是标记名称的字符串。如果为 &lt;code&gt;null&lt;/code&gt; ， &lt;code&gt;null&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="5400340ec1f7ab7bd7a0473ef35352961dff0a8c" translate="yes" xml:space="preserve">
          <source>Returns the named prop of the current node.</source>
          <target state="translated">返回当前节点的命名道具。</target>
        </trans-unit>
        <trans-unit id="06c2cc816d79f19530781a952587937db44f244d" translate="yes" xml:space="preserve">
          <source>Returns the named prop of the root component.</source>
          <target state="translated">返回根组件的命名道具。</target>
        </trans-unit>
        <trans-unit id="8287b58f3bfb5736e1ffa964ff5354fb0f5fd82a" translate="yes" xml:space="preserve">
          <source>Returns the node at a given index of the current wrapper.</source>
          <target state="translated">返回当前包装器给定索引处的节点。</target>
        </trans-unit>
        <trans-unit id="3653e5310b59cf8e8bf0833ab9ed374e2ae0b95f" translate="yes" xml:space="preserve">
          <source>Returns the node at the provided index of the current wrapper.</source>
          <target state="translated">返回当前wrapper提供的索引处的节点。</target>
        </trans-unit>
        <trans-unit id="5e8480c2078249ec45e2369935f2a91e33fc89ad" translate="yes" xml:space="preserve">
          <source>Returns the node that matches the provided reference name.</source>
          <target state="translated">返回与所提供的引用名称相匹配的节点。</target>
        </trans-unit>
        <trans-unit id="8fdac4394f2315ef6d7f99c1b7ced80cbe77ef4a" translate="yes" xml:space="preserve">
          <source>Returns the outer most DOMComponent of the current wrapper.</source>
          <target state="translated">返回当前包装器的最外层DOMComponent。</target>
        </trans-unit>
        <trans-unit id="01a22f1bc3dae6b4a4af6fdca4454020f6b9a974" translate="yes" xml:space="preserve">
          <source>Returns the prop value for the root node of the wrapper with the provided key. It must be a single-node wrapper.</source>
          <target state="translated">返回所提供的key的包装器根节点的prop值,必须是单节点包装器。必须是单节点包装器。</target>
        </trans-unit>
        <trans-unit id="33e6052badc784dd5909fa432085955c791f1501" translate="yes" xml:space="preserve">
          <source>Returns the props object for the root node of the wrapper. It must be a single-node wrapper.</source>
          <target state="translated">返回包装器根节点的props对象。它必须是一个单节点的包装器。</target>
        </trans-unit>
        <trans-unit id="9785f2f026dd9329db363ea5fe1dbff1d78b74d0" translate="yes" xml:space="preserve">
          <source>Returns the props of the current node.</source>
          <target state="translated">返回当前节点的道具。</target>
        </trans-unit>
        <trans-unit id="5cefd55129c5acf7625014f28e5df67c28f941af" translate="yes" xml:space="preserve">
          <source>Returns the props of the root component.</source>
          <target state="translated">返回根组件的道具。</target>
        </trans-unit>
        <trans-unit id="3d263f5896e4560d55620aad0ec5d79d0f92e7fb" translate="yes" xml:space="preserve">
          <source>Returns the single-node wrapper's node's underlying class instance; &lt;code&gt;this&lt;/code&gt; in its methods.</source>
          <target state="translated">返回单节点包装器的节点的基础类实例； &lt;code&gt;this&lt;/code&gt; 在其方法上。</target>
        </trans-unit>
        <trans-unit id="e13463ff83395c203ef765d79d9ffe0f2d2fa47e" translate="yes" xml:space="preserve">
          <source>Returns the single-node wrapper's node's underlying class instance; &lt;code&gt;this&lt;/code&gt; in its methods. It must be a single-node wrapper.</source>
          <target state="translated">返回单节点包装器的节点的基础类实例； &lt;code&gt;this&lt;/code&gt; 在其方法上。它必须是单节点包装。</target>
        </trans-unit>
        <trans-unit id="b58e3d2886171b4d60e046e9ba158eb3ed65e604" translate="yes" xml:space="preserve">
          <source>Returns the state hash for the root node of the wrapper. Optionally pass in a prop name and it will return just that value.</source>
          <target state="translated">返回包装器根节点的状态哈希值。也可以传入一个道具名,它将只返回该值。</target>
        </trans-unit>
        <trans-unit id="4edc0f249bfdbd3d391e3151f66c380ba92b38f9" translate="yes" xml:space="preserve">
          <source>Returns the state of the root component.</source>
          <target state="translated">返回根组件的状态。</target>
        </trans-unit>
        <trans-unit id="e3dc6352b2247fdf6114634bdb91d35890b51d74" translate="yes" xml:space="preserve">
          <source>Returns the type of the current node of the wrapper.</source>
          <target state="translated">返回包装器当前节点的类型。</target>
        </trans-unit>
        <trans-unit id="432a423434b7d94b9844d12ae49c0ebc5e2e3381" translate="yes" xml:space="preserve">
          <source>Returns the type of the only node of this wrapper. If it's a React component, this will be the component constructor. If it's a native DOM node, it will be a string with the tag name. If it's &lt;code&gt;null&lt;/code&gt;, it will be &lt;code&gt;null&lt;/code&gt;. It must be a single-node wrapper.</source>
          <target state="translated">返回此包装器的唯一节点的类型。如果它是一个React组件，那么它将是组件的构造函数。如果它是本机DOM节点，则它将是带有标签名称的字符串。如果为 &lt;code&gt;null&lt;/code&gt; ， &lt;code&gt;null&lt;/code&gt; 。它必须是单节点包装。</target>
        </trans-unit>
        <trans-unit id="cf98fccc9ebd9e81478403223bfb43953b7c80c9" translate="yes" xml:space="preserve">
          <source>Returns the wrapped ReactElement.</source>
          <target state="translated">Returns the wrapped ReactElement.</target>
        </trans-unit>
        <trans-unit id="823e779b7f9e397ed81174292fa167f83f68d1a7" translate="yes" xml:space="preserve">
          <source>Returns the wrapped ReactElements</source>
          <target state="translated">Returns the wrapped ReactElements</target>
        </trans-unit>
        <trans-unit id="83a0716520da4b65eaa8f5b9b6cd5221d5e7fe27" translate="yes" xml:space="preserve">
          <source>Returns the wrapped ReactElements.</source>
          <target state="translated">Returns the wrapped ReactElements.</target>
        </trans-unit>
        <trans-unit id="b70c97509718f3bdb9af7f24520cbd34c19940f6" translate="yes" xml:space="preserve">
          <source>Returns the wrapper's underlying instance.</source>
          <target state="translated">返回包装器的底层实例。</target>
        </trans-unit>
        <trans-unit id="e52b57c814f329a48c32fac61942677c7a5dfec5" translate="yes" xml:space="preserve">
          <source>Returns whether or not a &lt;code&gt;patternNode&lt;/code&gt; react element matches any element in the render tree.</source>
          <target state="translated">返回 &lt;code&gt;patternNode&lt;/code&gt; react元素是否与渲染树中的任何元素匹配。</target>
        </trans-unit>
        <trans-unit id="58f7301ace8af3d7cca1914747061834d401b706" translate="yes" xml:space="preserve">
          <source>Returns whether or not a given node or array of nodes exists in the render tree.</source>
          <target state="translated">返回渲染树中是否存在给定节点或节点数组。</target>
        </trans-unit>
        <trans-unit id="3e0adf31212e3add50555c683b374fdfd7898fb6" translate="yes" xml:space="preserve">
          <source>Returns whether or not a given node or array of nodes is somewhere in the render tree.</source>
          <target state="translated">返回给定节点或节点数组是否在渲染树中的某个位置。</target>
        </trans-unit>
        <trans-unit id="0e9d9dcb61d20f7298f07aaa2590068f62aa56a3" translate="yes" xml:space="preserve">
          <source>Returns whether or not a given react element &lt;code&gt;patternNode&lt;/code&gt; matches the wrapper's render tree. It must be a single-node wrapper, and only the root node is checked.</source>
          <target state="translated">返回给定的react元素 &lt;code&gt;patternNode&lt;/code&gt; 是否与包装器的渲染树匹配。它必须是单节点包装程序，并且仅检查根节点。</target>
        </trans-unit>
        <trans-unit id="24f4f3cadaf232e04552c4725b309909f84f6c9e" translate="yes" xml:space="preserve">
          <source>Returns whether or not a given react element exists in the render tree.</source>
          <target state="translated">返回给定的react元素是否存在于渲染树中。</target>
        </trans-unit>
        <trans-unit id="2a764d093854729f4270fb088e83b83240afe16e" translate="yes" xml:space="preserve">
          <source>Returns whether or not a given react element exists in the shallow render tree.</source>
          <target state="translated">返回给定的react元素是否存在于浅层渲染树中。</target>
        </trans-unit>
        <trans-unit id="15f2233e6f94e07999edbad8efe6cfbbdaf6bbd0" translate="yes" xml:space="preserve">
          <source>Returns whether or not a given react element is somewhere in the render tree.</source>
          <target state="translated">返回给定的react元素是否在渲染树的某个位置。</target>
        </trans-unit>
        <trans-unit id="0f172b634d571b5a98761a45aca05f000e20dbce" translate="yes" xml:space="preserve">
          <source>Returns whether or not a given react element matches the current render tree.</source>
          <target state="translated">返回给定的react元素是否匹配当前的渲染树。</target>
        </trans-unit>
        <trans-unit id="baf851fdc1725427d5c5090b54c13e5f052926b8" translate="yes" xml:space="preserve">
          <source>Returns whether or not a given react element matches the shallow render tree.</source>
          <target state="translated">返回给定的react元素是否匹配浅层渲染树。</target>
        </trans-unit>
        <trans-unit id="867c910192c0675c2819c4cef528319c3b040533" translate="yes" xml:space="preserve">
          <source>Returns whether or not all given react elements match elements in the render tree. It will determine if an element in the wrapper matches the expected element by checking if the expected element has the same props as the wrapper's element and share the same values.</source>
          <target state="translated">返回是否所有给定的react元素都匹配渲染树中的元素。它将通过检查预期元素是否与包装器中的元素具有相同的道具和共享相同的值来判断包装器中的元素是否与预期元素匹配。</target>
        </trans-unit>
        <trans-unit id="eb31d8464b8592701130dcccf6f18bcc194ea4e3" translate="yes" xml:space="preserve">
          <source>Returns whether or not all of the given react elements in &lt;code&gt;patternNodes&lt;/code&gt; match an element in the wrapper's render tree. Every single element of &lt;code&gt;patternNodes&lt;/code&gt; must be matched one or more times. Matching follows the rules for &lt;code&gt;containsMatchingElement&lt;/code&gt;.</source>
          <target state="translated">返回 &lt;code&gt;patternNodes&lt;/code&gt; 中所有给定的react元素是否与包装的渲染树中的元素匹配。 &lt;code&gt;patternNodes&lt;/code&gt; 的每个元素都必须匹配一次或多次。匹配遵循 &lt;code&gt;containsMatchingElement&lt;/code&gt; 的规则。</target>
        </trans-unit>
        <trans-unit id="659a816db7009c87b4d02990c9dd936eab34f08d" translate="yes" xml:space="preserve">
          <source>Returns whether or not all of the nodes in the wrapper match the provided selector.</source>
          <target state="translated">返回包装器中的所有节点是否与提供的选择器匹配。</target>
        </trans-unit>
        <trans-unit id="4de88389c5396b6d1696d30923dd0f7c55bb6092" translate="yes" xml:space="preserve">
          <source>Returns whether or not all of the nodes in the wrapper pass the provided predicate function.</source>
          <target state="translated">返回包装器中是否所有节点都通过了提供的谓词函数。</target>
        </trans-unit>
        <trans-unit id="a862739a2d7cd7d0852eb3b7376a61b0a79a3a8e" translate="yes" xml:space="preserve">
          <source>Returns whether or not all the given react elements are somewhere in the render tree.</source>
          <target state="translated">返回是否所有给定的react元素都在渲染树的某个地方。</target>
        </trans-unit>
        <trans-unit id="a6b869c7ede2cf7289b6a5bcca7bf1a1ba482fa6" translate="yes" xml:space="preserve">
          <source>Returns whether or not all the given react elements exist in the render tree.</source>
          <target state="translated">返回render树中是否存在所有给定的react元素。</target>
        </trans-unit>
        <trans-unit id="091dc61a59619ce541bd13cb51fe13e812a4193b" translate="yes" xml:space="preserve">
          <source>Returns whether or not all the given react elements exist in the shallow render tree.</source>
          <target state="translated">返回浅层渲染树中是否存在所有给定的反应元素。</target>
        </trans-unit>
        <trans-unit id="469bc49dd70c04b970ce01a1d419808c041d1ead" translate="yes" xml:space="preserve">
          <source>Returns whether or not all the given react elements exists in the shallow render tree.</source>
          <target state="translated">返回浅层渲染树中是否存在所有给定的react元素。</target>
        </trans-unit>
        <trans-unit id="85c615a8c10e6c9a349e979e529af0c2fb80dd21" translate="yes" xml:space="preserve">
          <source>Returns whether or not any nodes exist in the wrapper. Or, if a selector is passed in, whether that selector has any matches in the wrapper.</source>
          <target state="translated">返回包装器中是否存在任何节点。或者,如果传递了一个选择器,则返回包装器中是否有匹配的选择器。</target>
        </trans-unit>
        <trans-unit id="eb1b857e32b078c3d1cb47c6bbf88828f70fdf19" translate="yes" xml:space="preserve">
          <source>Returns whether or not any of the nodes in the wrapper match the provided selector.</source>
          <target state="translated">返回包装器中是否有任何节点符合所提供的选择器。</target>
        </trans-unit>
        <trans-unit id="575f789b9c8a3dc4c75029c0f7974d41af83656c" translate="yes" xml:space="preserve">
          <source>Returns whether or not any of the nodes in the wrapper pass the provided predicate function.</source>
          <target state="translated">返回包装器中是否有节点通过了提供的谓词函数。</target>
        </trans-unit>
        <trans-unit id="06654358298453abadf1b8310b716cfff7d64c17" translate="yes" xml:space="preserve">
          <source>Returns whether or not at least one of the given react elements in &lt;code&gt;patternNodes&lt;/code&gt; matches an element in the wrapper's render tree. One or more elements of &lt;code&gt;patternNodes&lt;/code&gt; must be matched one or more times. Matching follows the rules for &lt;code&gt;containsMatchingElement&lt;/code&gt;.</source>
          <target state="translated">返回 &lt;code&gt;patternNodes&lt;/code&gt; 中至少给定的react元素之一是否与包装的渲染树中的元素匹配。 &lt;code&gt;patternNodes&lt;/code&gt; 的一个或多个元素必须匹配一次或多次。匹配遵循 &lt;code&gt;containsMatchingElement&lt;/code&gt; 的规则。</target>
        </trans-unit>
        <trans-unit id="8cf4cb4a4aa0c8ea7e078bd1c228a9cee0618513" translate="yes" xml:space="preserve">
          <source>Returns whether or not one of the given react elements exist in the render tree.</source>
          <target state="translated">返回给定的react元素是否存在于渲染树中。</target>
        </trans-unit>
        <trans-unit id="11254dc672b909ace4b040c6801d74a726ca2335" translate="yes" xml:space="preserve">
          <source>Returns whether or not one of the given react elements exists in the shallow render tree.</source>
          <target state="translated">返回给定的反应元素是否存在于浅层渲染树中。</target>
        </trans-unit>
        <trans-unit id="4504c0f423a02b4218abd7114857d447704ea406" translate="yes" xml:space="preserve">
          <source>Returns whether or not one of the given react elements is somewhere in the render tree.</source>
          <target state="translated">Returns whether or not one of given react elements is somewhere in the render tree.</target>
        </trans-unit>
        <trans-unit id="c38f9643e7f3e984a233f21ee2274973725a4391" translate="yes" xml:space="preserve">
          <source>Returns whether or not the current component returns a falsy value.</source>
          <target state="translated">返回当前组件是否返回虚值。</target>
        </trans-unit>
        <trans-unit id="369ad60091e721a22c782c44b65ae885f4acdb02" translate="yes" xml:space="preserve">
          <source>Returns whether or not the current node exists, or, if given a selector, whether that selector has any matching results.</source>
          <target state="translated">返回当前节点是否存在,如果给定一个选择器,则返回该选择器是否有任何匹配结果。</target>
        </trans-unit>
        <trans-unit id="a771e8f191285f6aa463c3ad3eed1378818b2624" translate="yes" xml:space="preserve">
          <source>Returns whether or not the current node has the given class name or not.</source>
          <target state="translated">返回当前节点是否有给定的类名。</target>
        </trans-unit>
        <trans-unit id="fc98d0069f457f71a48b5e980101db65c37f6661" translate="yes" xml:space="preserve">
          <source>Returns whether or not the current node matches a provided selector.</source>
          <target state="translated">返回当前节点是否与提供的选择器匹配。</target>
        </trans-unit>
        <trans-unit id="b49059fd6c85ecbe02125b8a19f26e14d5517f0e" translate="yes" xml:space="preserve">
          <source>Returns whether or not the current render tree is equal to the given node, based on the expected value.</source>
          <target state="translated">根据预期值,返回当前渲染树是否等于给定节点。</target>
        </trans-unit>
        <trans-unit id="d2e8d5064c09eeaaec10ddc518d8e3dede463cc0" translate="yes" xml:space="preserve">
          <source>Returns whether or not the current root node has the given class name or not.</source>
          <target state="translated">返回当前根节点是否有给定的类名。</target>
        </trans-unit>
        <trans-unit id="233392cbe7671a782ef0a549a58bc2deb01c09a1" translate="yes" xml:space="preserve">
          <source>Returns whether or not the current wrapper root node render tree looks like the one passed in.</source>
          <target state="translated">返回当前wrapper根节点的渲染树是否和传入的树一样。</target>
        </trans-unit>
        <trans-unit id="ab7e06314b68985a4dca47ac41336bbe48e98e25" translate="yes" xml:space="preserve">
          <source>Returns whether or not the single wrapped node matches the provided selector. It must be a single-node wrapper.</source>
          <target state="translated">返回单个封装节点是否与提供的选择器匹配。它必须是一个单节点封装器。</target>
        </trans-unit>
        <trans-unit id="a87b82ec0344eaff42fa814dc9e2944bff0d1c65" translate="yes" xml:space="preserve">
          <source>Returns whether or not the wrapped node has a &lt;code&gt;className&lt;/code&gt; prop including the passed in class name. It must be a single-node wrapper.</source>
          <target state="translated">返回包装的节点是否具有包含传入的类名称的 &lt;code&gt;className&lt;/code&gt; 属性。它必须是单节点包装。</target>
        </trans-unit>
        <trans-unit id="1e04aaa9e6cfef881c53425f11070af35bc03dca" translate="yes" xml:space="preserve">
          <source>Returns whether or not the wrapper is empty.</source>
          <target state="translated">返回包装器是否为空。</target>
        </trans-unit>
        <trans-unit id="68b5c859ac067125cfa1e0f2016660b97de40ffa" translate="yes" xml:space="preserve">
          <source>Returns whether or not the wrapper would ultimately render only the allowed falsy values: &lt;code&gt;false&lt;/code&gt; or &lt;code&gt;null&lt;/code&gt;.</source>
          <target state="translated">返回包装器最终是否只会渲染允许的伪造值： &lt;code&gt;false&lt;/code&gt; 或 &lt;code&gt;null&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="16ba610be171c837303028031a6a2fd55ab391ba" translate="yes" xml:space="preserve">
          <source>Running Enzyme Tests</source>
          <target state="translated">运行酶测试</target>
        </trans-unit>
        <trans-unit id="fcea4287c8724fcee16957ab6009c4b2b945b7e4" translate="yes" xml:space="preserve">
          <source>Say we have the following components:</source>
          <target state="translated">假设我们有以下组件。</target>
        </trans-unit>
        <trans-unit id="b27bc3b0a50b31cdf4a7d272648bf3c4d5bd05c3" translate="yes" xml:space="preserve">
          <source>See the &lt;a href=&quot;https://airbnb.io/enzyme/CONTRIBUTING.html&quot;&gt;Contributors Guide&lt;/a&gt;</source>
          <target state="translated">请参阅&lt;a href=&quot;https://airbnb.io/enzyme/CONTRIBUTING.html&quot;&gt;贡献者指南&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="83e8689ff526f9176c1d4258734909901000c766" translate="yes" xml:space="preserve">
          <source>See the &lt;a href=&quot;https://enzymejs.github.io/enzyme/CONTRIBUTING.html&quot;&gt;Contributors Guide&lt;/a&gt;</source>
          <target state="translated">请参阅&lt;a href=&quot;https://enzymejs.github.io/enzyme/CONTRIBUTING.html&quot;&gt;贡献者指南&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="f33135b2be3829032e957a12a0f1841528f96ad5" translate="yes" xml:space="preserve">
          <source>Selecting a HOC-wrapped component, or a component with a custom &lt;code&gt;displayName&lt;/code&gt;, even with lowercase letters (for example, &lt;code&gt;withHOC(MyComponent)&lt;/code&gt;) will work as well.</source>
          <target state="translated">选择一个HOC包裹的组件，或者选择一个具有自定义 &lt;code&gt;displayName&lt;/code&gt; 的组件，甚至使用小写字母（例如， &lt;code&gt;withHOC(MyComponent)&lt;/code&gt; ），也可以使用。</target>
        </trans-unit>
        <trans-unit id="6584488e7e848b728586926b3453232076a5973f" translate="yes" xml:space="preserve">
          <source>Shallow Rendering</source>
          <target state="translated">浅层渲染</target>
        </trans-unit>
        <trans-unit id="0c98f7d21505cddcac91bc78829889e4c4c8e4be" translate="yes" xml:space="preserve">
          <source>Shallow Rendering API</source>
          <target state="translated">浅层渲染API</target>
        </trans-unit>
        <trans-unit id="f97189e2777bb733d6529ed43422826c350ef594" translate="yes" xml:space="preserve">
          <source>Shallow render the one non-DOM child of the current wrapper, and return a wrapper around the result.</source>
          <target state="translated">浅析渲染当前包装器的一个非DOM子代,并返回一个围绕结果的包装器。</target>
        </trans-unit>
        <trans-unit id="c3c554f004d13b70d82552d2faa5192f10ab6ed6" translate="yes" xml:space="preserve">
          <source>Shallow render the one non-DOM child of the current wrapper, and return a wrapper around the result. It must be a single-node wrapper, and the node must be a React component.</source>
          <target state="translated">浅析渲染当前包装器的一个非DOM子节点,并返回一个围绕结果的包装器。它必须是一个单节点包装器,而且节点必须是一个React组件。</target>
        </trans-unit>
        <trans-unit id="29775febdd3aacedecb05e7c6370e98d0ace312c" translate="yes" xml:space="preserve">
          <source>Shallow rendering is useful to constrain yourself to testing a component as a unit, and to ensure that your tests aren't indirectly asserting on behavior of child components.</source>
          <target state="translated">浅层渲染很有用,它可以约束自己将一个组件作为一个单元进行测试,并确保你的测试不会间接断言子组件的行为。</target>
        </trans-unit>
        <trans-unit id="6fcf3ec45dade6e18e24e9a546d7a39ae274a32d" translate="yes" xml:space="preserve">
          <source>Shallow renders the current node and returns a shallow wrapper around it.</source>
          <target state="translated">Shallow 渲染当前节点,并返回一个围绕它的浅层包装。</target>
        </trans-unit>
        <trans-unit id="65678f72629e87f46025249a398b3e8b418c67d8" translate="yes" xml:space="preserve">
          <source>Shallow renders the root node and returns a shallow wrapper around it. It must be a single-node wrapper.</source>
          <target state="translated">Shallow 会渲染根节点,并返回一个围绕根节点的浅层包装器,它必须是单节点包装器。它必须是一个单节点封装器。</target>
        </trans-unit>
        <trans-unit id="560e58be4b35a3a4b6fbcd0759163a10d81df23e" translate="yes" xml:space="preserve">
          <source>ShallowWrapper API</source>
          <target state="translated">ShallowWrapper API</target>
        </trans-unit>
        <trans-unit id="8ff4ce86898e61c7e721a7c7c1ab809d753ce8e1" translate="yes" xml:space="preserve">
          <source>Similar to &lt;code&gt;setState&lt;/code&gt;, this method accepts a props object and will merge it in with the already existing props.</source>
          <target state="translated">与 &lt;code&gt;setState&lt;/code&gt; 相似，此方法接受一个props对象，并将其与已经存在的props合并。</target>
        </trans-unit>
        <trans-unit id="b9aad7fb1da5a5c866c5852d99771055afd37ad4" translate="yes" xml:space="preserve">
          <source>Similarly, if you have a ref on a composite component, the &lt;code&gt;ref(...)&lt;/code&gt; method will return an instance of that element:</source>
          <target state="translated">同样，如果您在复合组件上有一个ref，则 &lt;code&gt;ref(...)&lt;/code&gt; 方法将返回该元素的一个实例：</target>
        </trans-unit>
        <trans-unit id="0a2796687259fb731a09b73a24df1ba2becd8fd1" translate="yes" xml:space="preserve">
          <source>Similarly, if you want to create some one-off elements for your test to mount into:</source>
          <target state="translated">同样,如果你想为你的测试创建一些一次性的元素来装入。</target>
        </trans-unit>
        <trans-unit id="9d954c92a3aa5e77fc739d63f50f276bad17d58d" translate="yes" xml:space="preserve">
          <source>Simulate a component throwing an error as part of its rendering lifecycle.</source>
          <target state="translated">模拟一个组件在其渲染生命周期中抛出一个错误。</target>
        </trans-unit>
        <trans-unit id="702ee90247c3bf17eb2caf76e1ca1508ac106c40" translate="yes" xml:space="preserve">
          <source>Simulate events on the root node in the wrapper. It must be a single-node wrapper.</source>
          <target state="translated">在包装器的根节点上模拟事件。它必须是一个单节点包装器。</target>
        </trans-unit>
        <trans-unit id="e9ef863d8d64208d4d7b89d35c6e5d4391ca972d" translate="yes" xml:space="preserve">
          <source>Simulates an event on the current node.</source>
          <target state="translated">模拟当前节点上的事件。</target>
        </trans-unit>
        <trans-unit id="3f5f1d9d76dae330858a85c6b06f4bb96cc20fd8" translate="yes" xml:space="preserve">
          <source>Since &lt;code&gt;&amp;lt;Foo/&amp;gt;&lt;/code&gt; has the className &lt;code&gt;bar&lt;/code&gt; it is returned as the &lt;em&gt;hostNode&lt;/em&gt;. As expected the &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; with the className &lt;code&gt;bar&lt;/code&gt; is also returned</source>
          <target state="translated">由于 &lt;code&gt;&amp;lt;Foo/&amp;gt;&lt;/code&gt; 具有className &lt;code&gt;bar&lt;/code&gt; ，因此将其作为&lt;em&gt;hostNode&lt;/em&gt;返回。如预期的那样，还会返回带有className &lt;code&gt;bar&lt;/code&gt; 的 &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="c21d763dbbb03a35ee7d68c75a0fb54014d00ec5" translate="yes" xml:space="preserve">
          <source>Since enzyme's &lt;a href=&quot;../api/mount&quot;&gt;&lt;code&gt;mount&lt;/code&gt;&lt;/a&gt; API requires a DOM, JSDOM is required in order to use &lt;code&gt;mount&lt;/code&gt; if you are not already in a browser environment (ie, a Node environment).</source>
          <target state="translated">因为asen 的&lt;a href=&quot;../api/mount&quot;&gt; &lt;code&gt;mount&lt;/code&gt; &lt;/a&gt; API需要一个DOM，所以如果您还没有处于浏览器环境（即Node环境）中，则必须使用JSDOM才能使用 &lt;code&gt;mount&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="3dd0fdaa1df48bfebe63ca70acca30e2fce76103" translate="yes" xml:space="preserve">
          <source>Some times you may need to switch between different versions of node, you can use a CLI tool called &lt;code&gt;nvm&lt;/code&gt; to quickly switch between node versions.</source>
          <target state="translated">有时您可能需要在不同版本的节点之间切换，可以使用称为 &lt;code&gt;nvm&lt;/code&gt; 的CLI工具在节点版本之间快速切换。</target>
        </trans-unit>
        <trans-unit id="9cd0cfcdfd36362b796ce8d68ef122d71e59f347" translate="yes" xml:space="preserve">
          <source>Starting with version 15, Jest &lt;a href=&quot;https://facebook.github.io/jest/blog/2016/09/01/jest-15.html&quot;&gt;no longer mocks modules by default&lt;/a&gt;. Because of this, you no longer have to add &lt;em&gt;any&lt;/em&gt; special configuration for Jest to use it with enzyme.</source>
          <target state="translated">从版本15开始，Jest &lt;a href=&quot;https://facebook.github.io/jest/blog/2016/09/01/jest-15.html&quot;&gt;默认不再模拟模块&lt;/a&gt;。因此，您不再需要为Jest 添加&lt;em&gt;任何&lt;/em&gt;特殊配置即可将其与酶一起使用。</target>
        </trans-unit>
        <trans-unit id="509cd62dd60a50e7b4735e094e0210d9b1134894" translate="yes" xml:space="preserve">
          <source>Static Rendered Markup</source>
          <target state="translated">静态渲染的标记</target>
        </trans-unit>
        <trans-unit id="54b46dfae6b94679cde8e3d5c3ad73422be95285" translate="yes" xml:space="preserve">
          <source>Static Rendering API</source>
          <target state="translated">静态渲染API</target>
        </trans-unit>
        <trans-unit id="bae7d5be70820ed56467bd9a63744e23b47bd711" translate="yes" xml:space="preserve">
          <source>Status</source>
          <target state="translated">Status</target>
        </trans-unit>
        <trans-unit id="98d508d41cffafb39fa02f701f8248db8f343f3f" translate="yes" xml:space="preserve">
          <source>Switching between node versions</source>
          <target state="translated">节点版本之间的切换</target>
        </trans-unit>
        <trans-unit id="b7b7dfe68350053e905721a37a75f592238c9f42" translate="yes" xml:space="preserve">
          <source>Syncs the enzyme component tree snapshot with the react component tree.</source>
          <target state="translated">将酶组分树快照与反应组分树同步。</target>
        </trans-unit>
        <trans-unit id="1f2b436067b73c2052fbbb3531c9f1145b976bda" translate="yes" xml:space="preserve">
          <source>Syncs the enzyme component tree snapshot with the react component tree. Useful to run before checking the render output if something external may be updating the state of the component somewhere.</source>
          <target state="translated">同步酶组件树与反应组件树的快照。在检查渲染输出之前,如果有外部的东西可能在某个地方更新了组件的状态,那么这个功能很有用。</target>
        </trans-unit>
        <trans-unit id="c51c55b719457118a73f5732f4dd4772aaba2e20" translate="yes" xml:space="preserve">
          <source>Tape</source>
          <target state="translated">Tape</target>
        </trans-unit>
        <trans-unit id="1c5ef51f8905605261054da7b74533748fbc136f" translate="yes" xml:space="preserve">
          <source>Taps into the wrapper method chain. Helpful for debugging.</source>
          <target state="translated">攻克封装方法链。对调试有帮助。</target>
        </trans-unit>
        <trans-unit id="b4934060bbb12a64f293f08202886d0057aae9eb" translate="yes" xml:space="preserve">
          <source>Test Setup</source>
          <target state="translated">测试设置</target>
        </trans-unit>
        <trans-unit id="4f5ad4e784253de531dcc73476c842aa79752de1" translate="yes" xml:space="preserve">
          <source>Testing with multiple arguments</source>
          <target state="translated">多参数测试</target>
        </trans-unit>
        <trans-unit id="69f05200ad02c73438325a9f97edf3a3d6dfa554" translate="yes" xml:space="preserve">
          <source>Testing with no arguments</source>
          <target state="translated">无参数测试</target>
        </trans-unit>
        <trans-unit id="1417a3fe84f02d7fda06589765ae6d626c0c86db" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;patternNode&lt;/code&gt; acts like a wildcard. For it to match a node in the wrapper:</source>
          <target state="translated">该 &lt;code&gt;patternNode&lt;/code&gt; 就像一个通配符。为了使其与包装器中的节点匹配：</target>
        </trans-unit>
        <trans-unit id="cd7675006da936cebc148177240a5e66648ae315" translate="yes" xml:space="preserve">
          <source>The attribute syntax also works by value, rather than by string. Strings, numbers, and boolean property values are supported. Example:</source>
          <target state="translated">属性语法也是按值而不是按字符串工作的。支持字符串、数字和布尔属性值。例如</target>
        </trans-unit>
        <trans-unit id="fd58be381bfe23b0165c7806ae67160d0e04ea8c" translate="yes" xml:space="preserve">
          <source>The change from enzyme v2.x to v3.x is a more significant change than in previous major releases, due to the fact that the internal implementation of enzyme has been almost completely rewritten.</source>
          <target state="translated">从酶v2.x到v3.x的变化比以前的主要版本有更大的变化,这是因为酶的内部实现几乎被完全重写了。</target>
        </trans-unit>
        <trans-unit id="14448a0e0377e480b7ddc7124808d01c9039a9bd" translate="yes" xml:space="preserve">
          <source>The fix here is to use enzyme's &lt;code&gt;wrapper.update()&lt;/code&gt; method after a state change has occurred:</source>
          <target state="translated">解决方法是在状态更改发生后使用酶的 &lt;code&gt;wrapper.update()&lt;/code&gt; 方法：</target>
        </trans-unit>
        <trans-unit id="e9f19186d396c6168a387208aba2109004664e70" translate="yes" xml:space="preserve">
          <source>The following adapters are officially provided by enzyme, and have the following compatibility with React:</source>
          <target state="translated">以下是酶官方提供的适配器,对React有以下兼容性。</target>
        </trans-unit>
        <trans-unit id="fe9f3fd382924a7e8731b5719a699030b506dfe2" translate="yes" xml:space="preserve">
          <source>The following code takes a wrapper with two nodes, one a &lt;code&gt;&amp;lt;MyComponent&amp;gt;&lt;/code&gt; React component, and the other a &lt;code&gt;&amp;lt;span&amp;gt;&lt;/code&gt;, and filters out the React component.</source>
          <target state="translated">以下代码使用具有两个节点的包装器，一个为 &lt;code&gt;&amp;lt;MyComponent&amp;gt;&lt;/code&gt; React组件，另一个为 &lt;code&gt;&amp;lt;span&amp;gt;&lt;/code&gt; ，并过滤掉React组件。</target>
        </trans-unit>
        <trans-unit id="0b82c6558c979a69a42d165552fb8dcad890488f" translate="yes" xml:space="preserve">
          <source>The goal of this rewrite was to address a lot of the major issues that have plagued enzyme since its initial release. It was also to simultaneously remove a lot of the dependencies that enzyme has on React internals, and to make enzyme more &quot;pluggable&quot;, paving the way for enzyme to be used with &quot;React-like&quot; libraries such as Preact and Inferno.</source>
          <target state="translated">这次重写的目标是解决自enzyme最初发布以来一直困扰它的许多主要问题,同时也删除了enzyme对React内部的许多依赖性,使enzyme更加 &quot;可插拔&quot;,为使用 &quot;React &quot;铺平道路。同时也是为了去除enzyme对React内部的许多依赖性,并使enzyme更加 &quot;可插拔&quot;,为enzyme与 &quot;类似React &quot;的库(如Preact和Inferno)一起使用铺平道路。</target>
        </trans-unit>
        <trans-unit id="f0a8eaf54af7dfb1510e599e33714d6695659e2d" translate="yes" xml:space="preserve">
          <source>The list of adapter npm packages for React semver ranges are as follows:</source>
          <target state="translated">React semver范围的适配器npm包列表如下。</target>
        </trans-unit>
        <trans-unit id="04b45de707ab95f373326a79b052ae2b05363038" translate="yes" xml:space="preserve">
          <source>The method is intentionally not &quot;fluent&quot; (in that it doesn't return &lt;code&gt;this&lt;/code&gt;) because you should not be doing anything with this wrapper after this method is called.</source>
          <target state="translated">该方法故意不是&amp;ldquo;流畅的&amp;rdquo;（因为它不会返回 &lt;code&gt;this&lt;/code&gt; ），因为在调用此方法之后，您不应对此包装器执行任何操作。</target>
        </trans-unit>
        <trans-unit id="54b41bd79d0396c5810d85957c4174e7cd1ce85e" translate="yes" xml:space="preserve">
          <source>The most common manifestation of this problem can be shown with the following example:</source>
          <target state="translated">这个问题最常见的表现形式可以用下面的例子来说明。</target>
        </trans-unit>
        <trans-unit id="de7f705e7f07d5fbad8e80d7cfb73f792af8f048" translate="yes" xml:space="preserve">
          <source>The order of precedence on returning the name is: &lt;code&gt;type.displayName&lt;/code&gt; -&amp;gt; &lt;code&gt;type.name&lt;/code&gt; -&amp;gt; &lt;code&gt;type&lt;/code&gt;.</source>
          <target state="translated">返回名称的优先顺序为： &lt;code&gt;type.displayName&lt;/code&gt; - &amp;gt; &lt;code&gt;type.name&lt;/code&gt; - &amp;gt; &lt;code&gt;type&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="fa5bafa4d729eb6a990261728a5428c58659dd37" translate="yes" xml:space="preserve">
          <source>The problem here is that once we grab the instance using &lt;code&gt;wrapper.instance()&lt;/code&gt;, enzyme has no way of knowing if you are going to execute something that will cause a state transition, and thus does not know when to ask for an updated render tree from React. As a result, &lt;code&gt;.text()&lt;/code&gt; never changes value.</source>
          <target state="translated">这里的问题是，一旦我们使用 &lt;code&gt;wrapper.instance()&lt;/code&gt; 来获取实例，asen便无法知道您是否要执行会导致状态转换的事情，因此不知道何时请求更新的渲染树来自React。因此， &lt;code&gt;.text()&lt;/code&gt; 永远不会更改值。</target>
        </trans-unit>
        <trans-unit id="daf0b4f3030360830d4073aeca63f4d54cd2a60a" translate="yes" xml:space="preserve">
          <source>The root component you are rendering must have a &lt;code&gt;contextTypes&lt;/code&gt; static property.</source>
          <target state="translated">您要呈现的根组件必须具有 &lt;code&gt;contextTypes&lt;/code&gt; 静态属性。</target>
        </trans-unit>
        <trans-unit id="bf48627746bdf49edc54d5941c5bc3a73c5877ea" translate="yes" xml:space="preserve">
          <source>The selector &lt;code&gt;[anum=3]&lt;/code&gt; will select the first  but not the second, because there's no quotes surrounding the 3. The selector &lt;code&gt;[anum=&quot;3&quot;]&lt;/code&gt; will select the second, because it's explicitly looking for a string because of the quotes surrounding 3. The same goes for the boolean; [abool=false] will select the first but not the second, etc.</source>
          <target state="translated">选择器 &lt;code&gt;[anum=3]&lt;/code&gt; 将选择第一个，而不是第二个，因为在3号周围没有引号。选择器 &lt;code&gt;[anum=&quot;3&quot;]&lt;/code&gt; 将选择第二个，因为由于引号引起来它显式地查找字符串3.布尔值也是如此；[abool = false]将选择第一个，而不是第二个，依此类推。</target>
        </trans-unit>
        <trans-unit id="ae6aad03a4ca9495db1eb566aad13da43dc3f967" translate="yes" xml:space="preserve">
          <source>Then create or update the file specified in &lt;code&gt;setupFilesAfterEnv&lt;/code&gt;, in this case &lt;code&gt;setup-tests.js&lt;/code&gt; in the project root:</source>
          <target state="translated">然后创建或更新 &lt;code&gt;setupFilesAfterEnv&lt;/code&gt; 中指定的文件，在本例中为项目根目录中的 &lt;code&gt;setup-tests.js&lt;/code&gt; ：</target>
        </trans-unit>
        <trans-unit id="9ce43c0103f6d00da73685f37f07ed1168ee5266" translate="yes" xml:space="preserve">
          <source>Then you should then be able to start writing tests!</source>
          <target state="translated">然后你就应该可以开始写测试了!</target>
        </trans-unit>
        <trans-unit id="98c43d6f3379ce74ae886cdbf7846f995e0be32b" translate="yes" xml:space="preserve">
          <source>There are several properties that are on an enzyme &quot;wrapper&quot; that were considered to be private and were undocumented as a result. Despite being undocumented, people may have been relying on them. In an effort to make making changes less likely to be accidentally breaking in the future, we have decided to make these properties properly &quot;private&quot;. The following properties will no longer be accessible on enzyme &lt;code&gt;shallow&lt;/code&gt; or &lt;code&gt;mount&lt;/code&gt; instances:</source>
          <target state="translated">酶&amp;ldquo;包装纸&amp;rdquo;上有几种特性，被认为是私有的，因此没有记载。尽管没有记录，但人们可能一直在依赖它们。为了使更改在将来不太可能意外中断，我们决定将这些属性适当地设置为&amp;ldquo;私有&amp;rdquo;。在酶 &lt;code&gt;shallow&lt;/code&gt; 或 &lt;code&gt;mount&lt;/code&gt; 实例上，以下属性将不再可用：</target>
        </trans-unit>
        <trans-unit id="21ff270d6ed5af4091bd8d63f9d33b0d47397de3" translate="yes" xml:space="preserve">
          <source>There is no corresponding &lt;code&gt;dive&lt;/code&gt; method for ReactWrappers.</source>
          <target state="translated">ReactWrappers 没有相应的 &lt;code&gt;dive&lt;/code&gt; 方法。</target>
        </trans-unit>
        <trans-unit id="c88108e486651421b0890c1a2eb70f3dfa36b6d3" translate="yes" xml:space="preserve">
          <source>This approach is no longer recommended. React's source code makes several assumptions about the environment it is running in, and one of them is that the &lt;code&gt;global.document&lt;/code&gt; that is found at &quot;require time&quot; is going to be the one and only document it ever needs to worry about. As a result, this type of &quot;reloading&quot; ends up causing more pain than it prevents.</source>
          <target state="translated">不再推荐这种方法。React的源代码对它所运行的环境做出了一些假设，其中之一是，在&amp;ldquo;需求时间&amp;rdquo;发现的 &lt;code&gt;global.document&lt;/code&gt; 将成为唯一需要担心的文档。结果，这种类型的&amp;ldquo;重新加载&amp;rdquo;最终导致了比其无法避免的更多的痛苦。</target>
        </trans-unit>
        <trans-unit id="e89acafb45f9dadda31505ee9a95c6403476ae32" translate="yes" xml:space="preserve">
          <source>This can be difficult when you want your test suite to run with typical Continuous Integration servers such as Travis.</source>
          <target state="translated">当你想让你的测试套件用典型的持续集成服务器(如Travis)运行时,这可能会很困难。</target>
        </trans-unit>
        <trans-unit id="34cc70b8d4de39a16fe4daa9d8c9996a91daf6d2" translate="yes" xml:space="preserve">
          <source>This essentially calls &lt;code&gt;wrapper.prop(propName)(...args)&lt;/code&gt;.</source>
          <target state="translated">这实际上调用 &lt;code&gt;wrapper.prop(propName)(...args)&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="1a1f5370c420b51072fdf41a91fd5d714e33f747" translate="yes" xml:space="preserve">
          <source>This essentially calls wrapper.prop(propName)(...args).</source>
          <target state="translated">这本质上是调用wrapper.prop(propName)(...args)。</target>
        </trans-unit>
        <trans-unit id="67aae79eb216ddb5f494e83c6f8b9a55d3413bf6" translate="yes" xml:space="preserve">
          <source>This is a basic &quot;counter&quot; component in React. Here our resulting markup is a function of &lt;code&gt;this.state.count&lt;/code&gt;, which can get updated by the &lt;code&gt;increment&lt;/code&gt; and &lt;code&gt;decrement&lt;/code&gt; functions. Let's take a look at what some enzyme tests with this component might look like, and when we do or don't have to call &lt;code&gt;update()&lt;/code&gt;.</source>
          <target state="translated">这是React中的基本&amp;ldquo;计数器&amp;rdquo;组件。在这里，我们生成的标记是 &lt;code&gt;this.state.count&lt;/code&gt; 的函数，可以通过 &lt;code&gt;increment&lt;/code&gt; 和 &lt;code&gt;decrement&lt;/code&gt; 函数进行更新。让我们看一下用此组件进行的某些酶测试的外观，以及何时需要或不必调用 &lt;code&gt;update()&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="6d650cd97f511118f65ca455db78526fcfd92098" translate="yes" xml:space="preserve">
          <source>This is particularly useful in combination with React 16 error boundaries (ie, the &lt;code&gt;componentDidCatch&lt;/code&gt; and &lt;code&gt;static getDerivedStateFromError&lt;/code&gt; lifecycle methods).</source>
          <target state="translated">与React 16错误边界（即 &lt;code&gt;componentDidCatch&lt;/code&gt; 和 &lt;code&gt;static getDerivedStateFromError&lt;/code&gt; 生命周期方法）结合使用时，这特别有用。</target>
        </trans-unit>
        <trans-unit id="64c18eea6d76734fa603733d5e714fa9b4672148" translate="yes" xml:space="preserve">
          <source>This may seem like a subtle difference, but making this change will be important for future APIs we would like to introduce.</source>
          <target state="translated">这看起来可能是一个微妙的区别,但做出这个改变对于我们未来想要引入的API来说是很重要的。</target>
        </trans-unit>
        <trans-unit id="75928e7051878916146451cc7237f402c24a0099" translate="yes" xml:space="preserve">
          <source>This method is a reliable way of accessing the props of a node; &lt;code&gt;wrapper.instance().props&lt;/code&gt; will work as well, but in React 16+, stateless functional components do not have an instance. See &lt;a href=&quot;instance&quot;&gt;&lt;code&gt;.instance() =&amp;gt; ReactComponent&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">这种方法是访问节点道具的可靠方法。 &lt;code&gt;wrapper.instance().props&lt;/code&gt; 也可以正常工作，但是在React 16+中，无状态功能组件没有实例。参见&lt;a href=&quot;instance&quot;&gt; &lt;code&gt;.instance() =&amp;gt; ReactComponent&lt;/code&gt; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="9bb60f0d371e9140329e7106af453bcc2adfc770" translate="yes" xml:space="preserve">
          <source>This method is effectively the negation or inverse of &lt;a href=&quot;filter&quot;&gt;&lt;code&gt;filter&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">该方法实际上是&lt;a href=&quot;filter&quot;&gt; &lt;code&gt;filter&lt;/code&gt; 的&lt;/a&gt;求反或求逆。</target>
        </trans-unit>
        <trans-unit id="a751a0351ca228167b0712384eb843c978bc775c" translate="yes" xml:space="preserve">
          <source>This method will most commonly be used as a &quot;cleanup&quot; method if you decide to use the &lt;code&gt;attachTo&lt;/code&gt; or &lt;code&gt;hydrateIn&lt;/code&gt; option in &lt;code&gt;mount(node, options)&lt;/code&gt;.</source>
          <target state="translated">如果您决定在 &lt;code&gt;mount(node, options)&lt;/code&gt; 使用 &lt;code&gt;attachTo&lt;/code&gt; 或 &lt;code&gt;hydrateIn&lt;/code&gt; 选项，则此方法通常用作&amp;ldquo;清除&amp;rdquo;方法。</target>
        </trans-unit>
        <trans-unit id="a8930ecb739db424d5d0df6ef8621a1747943499" translate="yes" xml:space="preserve">
          <source>This will default enzyme back to the previous behavior globally. If instead you'd only like to opt enzyme to the previous behavior for a specific test, you can do the following:</source>
          <target state="translated">这将使酶在全局范围内默认回到以前的行为。如果您只想为特定的测试选择酶回到以前的行为,您可以做以下操作。</target>
        </trans-unit>
        <trans-unit id="48b2fc5945e0eb50da2da8d67f030dbbbcc32fc4" translate="yes" xml:space="preserve">
          <source>To avoid this you can explicity query for the DOM node: &lt;code&gt;wrapper.find('div.bar')&lt;/code&gt;. Alternatively if you would like to only find host nodes use &lt;a href=&quot;../api/shallowwrapper/hostnodes&quot;&gt;hostNodes()&lt;/a&gt;</source>
          <target state="translated">为了避免这种情况，您可以显式查询DOM节点： &lt;code&gt;wrapper.find('div.bar')&lt;/code&gt; 。或者，如果您只想查找主机节点，请使用&lt;a href=&quot;../api/shallowwrapper/hostnodes&quot;&gt;hostNodes（）&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="001847f6373fc4264e1397f1aa89d57b25d36091" translate="yes" xml:space="preserve">
          <source>To avoid this you can explicity query for the DOM node: &lt;code&gt;wrapper.find('div.bar')&lt;/code&gt;. Alternatively if you would like to only find host nodes use &lt;a href=&quot;https://airbnb.io/enzyme/docs/api/ShallowWrapper/hostNodes.html&quot;&gt;hostNodes()&lt;/a&gt;</source>
          <target state="translated">为了避免这种情况，您可以显式查询DOM节点： &lt;code&gt;wrapper.find('div.bar')&lt;/code&gt; 。或者，如果您只想查找主机节点，请使用&lt;a href=&quot;https://airbnb.io/enzyme/docs/api/ShallowWrapper/hostNodes.html&quot;&gt;hostNodes（）&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="c4fe06b9f13303c023a6e17d9b5abe4845548672" translate="yes" xml:space="preserve">
          <source>To get started with enzyme, you can simply install it via npm. You will need to install enzyme along with an Adapter corresponding to the version of react (or other UI Component library) you are using. For instance, if you are using enzyme with React 16, you can run:</source>
          <target state="translated">要开始使用enzyme,你可以通过npm安装它。你需要在安装enzyme的同时,安装一个与你使用的react版本(或其他UI组件库)相对应的适配器。例如,如果你正在使用enzyme和React 16,你可以运行。</target>
        </trans-unit>
        <trans-unit id="bbfaea96cbbd16eac96f1a9da34bed2aea33eca1" translate="yes" xml:space="preserve">
          <source>To get the wrapper that was returned by enzyme 2:</source>
          <target state="translated">要得到被酶2返回的包装物。</target>
        </trans-unit>
        <trans-unit id="5961dfea7a46501ec6cf9bf7395b4402a4294c33" translate="yes" xml:space="preserve">
          <source>To install &lt;code&gt;nvm&lt;/code&gt;, use the curl script from &lt;a href=&quot;http://nvm.sh&quot;&gt;http://nvm.sh&lt;/a&gt;, and then:</source>
          <target state="translated">要安装 &lt;code&gt;nvm&lt;/code&gt; ，请使用&lt;a href=&quot;http://nvm.sh&quot;&gt;http://nvm.sh中&lt;/a&gt;的curl脚本，然后：</target>
        </trans-unit>
        <trans-unit id="39adb7d2e820059a12833b6307237676b58ad269" translate="yes" xml:space="preserve">
          <source>To perform the necessary configuration in your testing framework, it is recommended to use a setup script, such as with Jest's &lt;code&gt;setupFilesAfterEnv&lt;/code&gt; setting.</source>
          <target state="translated">要在测试框架中执行必要的配置，建议使用安装脚本，例如Jest的 &lt;code&gt;setupFilesAfterEnv&lt;/code&gt; 设置。</target>
        </trans-unit>
        <trans-unit id="02055a86dabb06d94de1b614c374ef4adb0e93a6" translate="yes" xml:space="preserve">
          <source>To return only the html nodes use the &lt;a href=&quot;../api/reactwrapper/hostnodes&quot;&gt;&lt;code&gt;hostNodes()&lt;/code&gt;&lt;/a&gt; function.</source>
          <target state="translated">要仅返回html节点，请使用&lt;a href=&quot;../api/reactwrapper/hostnodes&quot;&gt; &lt;code&gt;hostNodes()&lt;/code&gt; &lt;/a&gt;函数。</target>
        </trans-unit>
        <trans-unit id="743ee74d065812e1b161964495ad0fd662d1b837" translate="yes" xml:space="preserve">
          <source>To run the setup file to configure Enzyme and the Adapter (as shown in the &lt;a href=&quot;http://airbnb.io/enzyme/docs/installation/&quot;&gt;Installation docs&lt;/a&gt;) with Jest, set &lt;code&gt;setupFilesAfterEnv&lt;/code&gt; (previously &lt;code&gt;setupTestFrameworkScriptFile&lt;/code&gt;) in your config file (check &lt;a href=&quot;http://jestjs.io/docs/en/configuration&quot;&gt;Jest's documentation&lt;/a&gt; for the possible locations of that config file) to literally the string &lt;code&gt;&amp;lt;rootDir&amp;gt;&lt;/code&gt; and the path to your setup file.</source>
          <target state="translated">要运行安装文件以使用Jest 配置酶和适配器（如&lt;a href=&quot;http://airbnb.io/enzyme/docs/installation/&quot;&gt;Installation docs中&lt;/a&gt;所示），请在配置文件中设置 &lt;code&gt;setupFilesAfterEnv&lt;/code&gt; （以前 &lt;code&gt;setupTestFrameworkScriptFile&lt;/code&gt; ）（请查看&lt;a href=&quot;http://jestjs.io/docs/en/configuration&quot;&gt;Jest文档&lt;/a&gt;中该配置文件的可能位置），以字面意义上的字符串 &lt;code&gt;&amp;lt;rootDir&amp;gt;&lt;/code&gt; 以及安装文件的路径。</target>
        </trans-unit>
        <trans-unit id="8abe2630a27a301a3f4e96394604310b6ad79e86" translate="yes" xml:space="preserve">
          <source>To run the setup file to configure Enzyme and the Adapter (as shown in the &lt;a href=&quot;https://airbnb.io/enzyme/docs/installation/&quot;&gt;Installation docs&lt;/a&gt;) with Jest, set &lt;code&gt;setupFilesAfterEnv&lt;/code&gt; (previously &lt;code&gt;setupTestFrameworkScriptFile&lt;/code&gt;) in your config file (check &lt;a href=&quot;http://jestjs.io/docs/en/configuration&quot;&gt;Jest's documentation&lt;/a&gt; for the possible locations of that config file) to literally the string &lt;code&gt;&amp;lt;rootDir&amp;gt;&lt;/code&gt; and the path to your setup file.</source>
          <target state="translated">要运行安装文件以使用Jest配置酶和适配器（如&lt;a href=&quot;https://airbnb.io/enzyme/docs/installation/&quot;&gt;Installation docs中&lt;/a&gt;所示），请在配置文件中设置 &lt;code&gt;setupFilesAfterEnv&lt;/code&gt; （以前是 &lt;code&gt;setupTestFrameworkScriptFile&lt;/code&gt; ）（请查看&lt;a href=&quot;http://jestjs.io/docs/en/configuration&quot;&gt;Jest文档&lt;/a&gt;中该配置文件的可能位置），以字面意义上的字符串 &lt;code&gt;&amp;lt;rootDir&amp;gt;&lt;/code&gt; 以及安装文件的路径。</target>
        </trans-unit>
        <trans-unit id="ea1932b2cc7181ad1d6f37471665485061105e0f" translate="yes" xml:space="preserve">
          <source>To use enzyme to test React Native, you currently need to configure an adapter, and load an emulated DOM.</source>
          <target state="translated">要使用酶来测试React Native,你目前需要配置一个适配器,并加载一个模拟的DOM。</target>
        </trans-unit>
        <trans-unit id="8e76f50b0c0070c13bd3575482a1b3e02694ad16" translate="yes" xml:space="preserve">
          <source>To use enzyme's &lt;code&gt;mount&lt;/code&gt; until a React Native adapter exists, an emulated DOM must be loaded.</source>
          <target state="translated">要在存在React Native适配器之前使用酶的 &lt;code&gt;mount&lt;/code&gt; ，必须加载模拟的DOM。</target>
        </trans-unit>
        <trans-unit id="da0531f7a776bc0f9ed3a79eacdfebaf95626b7d" translate="yes" xml:space="preserve">
          <source>Undefined properties are not allowed in the object property selector and will cause an error:</source>
          <target state="translated">在对象属性选择器中不允许有未定义的属性,并将导致错误。</target>
        </trans-unit>
        <trans-unit id="37b86a1e4083a8c9826e8d440741608d49956214" translate="yes" xml:space="preserve">
          <source>Unfortunately, React Native has many environmental dependencies that can be hard to simulate without a host device.</source>
          <target state="translated">不幸的是,React Native有很多环境依赖性,在没有主机设备的情况下很难模拟。</target>
        </trans-unit>
        <trans-unit id="4c7d75a7398deaec8f1a682012bc2fd84deb68d7" translate="yes" xml:space="preserve">
          <source>Unmount the component from the DOM node it's attached to.</source>
          <target state="translated">将组件从它所连接的DOM节点上卸载。</target>
        </trans-unit>
        <trans-unit id="29b86486c6061ee8d73c218e760634322dd772ce" translate="yes" xml:space="preserve">
          <source>Update the file specified in &lt;code&gt;setupFilesAfterEnv&lt;/code&gt;, in this case &lt;code&gt;setup-tests.js&lt;/code&gt; in the project root:</source>
          <target state="translated">更新 &lt;code&gt;setupFilesAfterEnv&lt;/code&gt; 中指定的文件，在本例中为项目根目录中的 &lt;code&gt;setup-tests.js&lt;/code&gt; ：</target>
        </trans-unit>
        <trans-unit id="83af9e201878ffcd919622639a3ba1112fd7c590" translate="yes" xml:space="preserve">
          <source>Upgrading from Enzyme 2.x or React &amp;lt; 16</source>
          <target state="translated">从Enzyme 2.x或React &amp;lt;16升级</target>
        </trans-unit>
        <trans-unit id="07ee91c3dd1340b2baa75b84b491e60df34adbb3" translate="yes" xml:space="preserve">
          <source>Use enzyme's &lt;code&gt;render&lt;/code&gt; function to generate HTML from your React tree, and analyze the resulting HTML structure.</source>
          <target state="translated">使用酶的 &lt;code&gt;render&lt;/code&gt; 功能从您的React树生成HTML，并分析生成的HTML结构。</target>
        </trans-unit>
        <trans-unit id="d07c7d0b47ab66dd05249f29c311cd658e060249" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;attachTo&lt;/code&gt;/&lt;code&gt;hydrateIn&lt;/code&gt; is not generally recommended unless it is absolutely necessary to test something. It is your responsibility to clean up after yourself at the end of the test if you do decide to use it, though.</source>
          <target state="translated">通常不建议使用 &lt;code&gt;attachTo&lt;/code&gt; / &lt;code&gt;hydrateIn&lt;/code&gt; 除非绝对有必要进行测试。但是，如果您决定使用它，则有责任在测试结束后自行清理。</target>
        </trans-unit>
        <trans-unit id="41e058e858bd4ed3b80e851b7a30551e8bc75069" translate="yes" xml:space="preserve">
          <source>Using Enzyme with Browserify</source>
          <target state="translated">使用Enzyme与Browserify</target>
        </trans-unit>
        <trans-unit id="cc33a99cf933ab3d901eb190abc5f99de3eb073e" translate="yes" xml:space="preserve">
          <source>Using Enzyme with JSDOM</source>
          <target state="translated">使用JSDOM的Enzyme</target>
        </trans-unit>
        <trans-unit id="70aad13579c3cb82c61b0b92be9709298cbff923" translate="yes" xml:space="preserve">
          <source>Using Enzyme with Jest</source>
          <target state="translated">使用Enzyme与Jest</target>
        </trans-unit>
        <trans-unit id="f97a80adbb3eb7910e89f83dc11f24ece1d7cb71" translate="yes" xml:space="preserve">
          <source>Using Enzyme with Karma</source>
          <target state="translated">使用酵素与业力</target>
        </trans-unit>
        <trans-unit id="77dc5fa66b5652fc9f919dd5ab5712ac873b565c" translate="yes" xml:space="preserve">
          <source>Using Enzyme with Lab</source>
          <target state="translated">酶的使用与实验室</target>
        </trans-unit>
        <trans-unit id="c31d93ec44aa0b749cab6d2946a785b361489375" translate="yes" xml:space="preserve">
          <source>Using Enzyme with Mocha</source>
          <target state="translated">酵素与摩卡一起使用</target>
        </trans-unit>
        <trans-unit id="4f85a912e88bcf5ff0f68d2fc9ccb04020d78ccb" translate="yes" xml:space="preserve">
          <source>Using Enzyme with React Native</source>
          <target state="translated">使用Enzyme与React Native</target>
        </trans-unit>
        <trans-unit id="a2ceb38f6b6815d454600793c1a521ab176b2180" translate="yes" xml:space="preserve">
          <source>Using Enzyme with SystemJS</source>
          <target state="translated">使用SystemJS的Enzyme</target>
        </trans-unit>
        <trans-unit id="eaf2297bf406ec31163e3bf93da6422c489c4304" translate="yes" xml:space="preserve">
          <source>Using Enzyme with Tape and AVA</source>
          <target state="translated">酵素与胶带和AVA的使用</target>
        </trans-unit>
        <trans-unit id="a50cf433650b00ab493913826707ec4a409ae7f7" translate="yes" xml:space="preserve">
          <source>Using Enzyme with Webpack</source>
          <target state="translated">使用Webpack的Enzyme</target>
        </trans-unit>
        <trans-unit id="9b2d830d7ef60eb1a65e1a40a5e8c4f85901f164" translate="yes" xml:space="preserve">
          <source>Using enzyme to Test Components in React Native</source>
          <target state="translated">使用酶来测试React Native中的组件。</target>
        </trans-unit>
        <trans-unit id="4aaae5aebd6cbd791ccb02b2508ee98248313e57" translate="yes" xml:space="preserve">
          <source>Using enzyme with Browserify</source>
          <target state="translated">使用酶与Browserify</target>
        </trans-unit>
        <trans-unit id="5045d278bae4d4ff0767d8bbb6a3be6b9fbf5aeb" translate="yes" xml:space="preserve">
          <source>Using enzyme with JSDOM</source>
          <target state="translated">使用JSDOM的酶</target>
        </trans-unit>
        <trans-unit id="2942b954c19bb0c12528f8a8fcaecdd06878ce93" translate="yes" xml:space="preserve">
          <source>Using enzyme with Jest</source>
          <target state="translated">使用Jest的酶</target>
        </trans-unit>
        <trans-unit id="7353ec4635e60485bbdfb3822f8c4a8c8ae5fad7" translate="yes" xml:space="preserve">
          <source>Using enzyme with Karma</source>
          <target state="translated">使用酵素与业力</target>
        </trans-unit>
        <trans-unit id="ba620a3c4d64a4bdb6abdf93acad50a9b3a9e006" translate="yes" xml:space="preserve">
          <source>Using enzyme with Lab and Code</source>
          <target state="translated">使用酶与实验室和代码</target>
        </trans-unit>
        <trans-unit id="88a5dfbe94f0c84de2f4841c5b99b1623e9f66de" translate="yes" xml:space="preserve">
          <source>Using enzyme with Mocha</source>
          <target state="translated">酵素与摩卡一起使用</target>
        </trans-unit>
        <trans-unit id="46e24cb51a67486a23b220c1a235c2993a1eca34" translate="yes" xml:space="preserve">
          <source>Using enzyme with SystemJS</source>
          <target state="translated">使用SystemJS的酶</target>
        </trans-unit>
        <trans-unit id="da4cca9d9ee15098e126dc264764294dcbc0e6fd" translate="yes" xml:space="preserve">
          <source>Using enzyme with Tape and AVA</source>
          <target state="translated">酶与胶带和AVA的使用</target>
        </trans-unit>
        <trans-unit id="46aba284c0474bd028d07590fa8994e57585d8d9" translate="yes" xml:space="preserve">
          <source>Using enzyme with Webpack</source>
          <target state="translated">使用Webpack的酶</target>
        </trans-unit>
        <trans-unit id="800df7d9b3f30ccc9f103f81ee28e14499d8d5a6" translate="yes" xml:space="preserve">
          <source>Using enzyme's find when lacking className props</source>
          <target state="translated">当缺少className道具时,使用酶的find。</target>
        </trans-unit>
        <trans-unit id="a3d8e64699058d041f162da1a528e800b95d840c" translate="yes" xml:space="preserve">
          <source>We cannot wrap the result of &lt;code&gt;.prop()&lt;/code&gt; (or &lt;code&gt;.props()&lt;/code&gt;) with &lt;code&gt;.act()&lt;/code&gt; in Enzyme internally since it will break the equality of the returned value. However, you could use &lt;code&gt;.invoke()&lt;/code&gt; to simplify the code:</source>
          <target state="translated">我们无法在内部将 &lt;code&gt;.prop()&lt;/code&gt; （或 &lt;code&gt;.props()&lt;/code&gt; ）的结果与 &lt;code&gt;.act()&lt;/code&gt; 一起包装在Enzyme中，因为它会破坏返回值的相等性。但是，您可以使用 &lt;code&gt;.invoke()&lt;/code&gt; 简化代码：</target>
        </trans-unit>
        <trans-unit id="833c594d16af3b2019f5bdaae9cc31697bf1593d" translate="yes" xml:space="preserve">
          <source>We have done our best to make enzyme v3 as API compatible with v2.x as possible, however there are a handful of breaking changes that we decided we needed to make, intentionally, in order to support this new architecture and also improve the usability of the library long-term.</source>
          <target state="translated">我们已经尽了最大努力使enzyme v3尽可能与v2.x的API兼容,然而,为了支持这个新的架构,同时也为了长期改善库的可用性,我们决定故意做一些突破性的改变。</target>
        </trans-unit>
        <trans-unit id="dc82f9686cb576529576cc72416ae2a606c6a033" translate="yes" xml:space="preserve">
          <source>We have updated enzyme to consider node &quot;equality&quot; in a semantically identical way to how react treats nodes. More specifically, we've updated enzyme's algorithms to treat &lt;code&gt;undefined&lt;/code&gt; props as equivalent to the absence of a prop. Consider the following example:</source>
          <target state="translated">我们更新了酶，以语义上与反应如何对待节点相同的方式考虑节点&amp;ldquo;平等&amp;rdquo;。更具体地说，我们更新了酶的算法，将 &lt;code&gt;undefined&lt;/code&gt; 道具等同于缺少道具。考虑以下示例：</target>
        </trans-unit>
        <trans-unit id="48372456a13e09aaeffe6f55f876b7155bd4ed17" translate="yes" xml:space="preserve">
          <source>When testing with JSDOM, the &lt;code&gt;setup.js&lt;/code&gt; file above needs to be run before the test suite runs. If you are using mocha, this can be done from the command line using the &lt;code&gt;--require&lt;/code&gt; option:</source>
          <target state="translated">使用JSDOM进行测试时，需要在运行测试套件之前运行上面的 &lt;code&gt;setup.js&lt;/code&gt; 文件。如果您使用的是mocha，则可以使用 &lt;code&gt;--require&lt;/code&gt; 选项从命令行完成：</target>
        </trans-unit>
        <trans-unit id="231adeefefc497660e81253b358378a54b95e47a" translate="yes" xml:space="preserve">
          <source>When using &lt;code&gt;mount(...)&lt;/code&gt;, it can sometimes be unclear exactly what this would mean. Consider for example the following react components:</source>
          <target state="translated">使用 &lt;code&gt;mount(...)&lt;/code&gt; 时，有时可能不清楚其确切含义。例如，考虑以下反应组件：</target>
        </trans-unit>
        <trans-unit id="7926bb34bfe1e79abf68acd6b5481d7bbbec0554" translate="yes" xml:space="preserve">
          <source>While a React Native adapter is &lt;a href=&quot;https://github.com/airbnb/enzyme/issues/1436&quot;&gt;in discussion&lt;/a&gt;, a standard adapter may be used, such as 'enzyme-adapter-react-16':</source>
          <target state="translated">&lt;a href=&quot;https://github.com/airbnb/enzyme/issues/1436&quot;&gt;在讨论&lt;/a&gt; React Native适配器时，可以使用标准适配器，例如'enzyme-adapter-react-16'：</target>
        </trans-unit>
        <trans-unit id="9212a316627564bb41a9d16e9af1d5059f16bb33" translate="yes" xml:space="preserve">
          <source>While a React Native adapter is &lt;a href=&quot;https://github.com/enzymejs/enzyme/issues/1436&quot;&gt;in discussion&lt;/a&gt;, a standard adapter may be used, such as 'enzyme-adapter-react-16':</source>
          <target state="translated">&lt;a href=&quot;https://github.com/enzymejs/enzyme/issues/1436&quot;&gt;在讨论&lt;/a&gt;React Native适配器时，可以使用标准适配器，例如'enzyme-adapter-react-16'：</target>
        </trans-unit>
        <trans-unit id="323d44d40bb0208cbd64f39a204e7427bcf3f689" translate="yes" xml:space="preserve">
          <source>While in most cases, any React prop can be used, there are exceptions. The &lt;code&gt;key&lt;/code&gt; and &lt;code&gt;ref&lt;/code&gt; props will never work; React uses these props internally.</source>
          <target state="translated">虽然在大多数情况下，可以使用任何React属性，但也有例外。该 &lt;code&gt;key&lt;/code&gt; 和 &lt;code&gt;ref&lt;/code&gt; 道具行不通; React在内部使用这些道具。</target>
        </trans-unit>
        <trans-unit id="1d8cf09aecdbf661705a42803de583da4b89e293" translate="yes" xml:space="preserve">
          <source>While some have had success with &lt;a href=&quot;https://github.com/Root-App/react-native-mock-render&quot;&gt;react-native-mock-renderer&lt;/a&gt;, the recommended approach is to use &lt;a href=&quot;jsdom&quot;&gt;https://github.com/tmpvar/jsdom&lt;/a&gt;, as documented for enzyme at the &lt;a href=&quot;https://airbnb.io/enzyme/docs/guides/jsdom.html&quot;&gt;JSDOM&lt;/a&gt; documentation page.</source>
          <target state="translated">尽管有些人在&lt;a href=&quot;https://github.com/Root-App/react-native-mock-render&quot;&gt;react-native-mock-renderer上&lt;/a&gt;取得了成功，但推荐的方法是使用&lt;a href=&quot;jsdom&quot;&gt;https://github.com/tmpvar/jsdom&lt;/a&gt;，如&lt;a href=&quot;https://airbnb.io/enzyme/docs/guides/jsdom.html&quot;&gt;JSDOM&lt;/a&gt;文档页面上有关酶的记录所示。</target>
        </trans-unit>
        <trans-unit id="0c09a79d280b069ff8ab8cdc35a71f2a8742e178" translate="yes" xml:space="preserve">
          <source>While some have had success with &lt;a href=&quot;https://github.com/Root-App/react-native-mock-render&quot;&gt;react-native-mock-renderer&lt;/a&gt;, the recommended approach is to use &lt;a href=&quot;jsdom&quot;&gt;https://github.com/tmpvar/jsdom&lt;/a&gt;, as documented for enzyme at the &lt;a href=&quot;jsdom&quot;&gt;JSDOM&lt;/a&gt; documentation page.</source>
          <target state="translated">尽管有些人在&lt;a href=&quot;https://github.com/Root-App/react-native-mock-render&quot;&gt;react-native-mock-renderer上&lt;/a&gt;取得了成功，但推荐的方法是使用&lt;a href=&quot;jsdom&quot;&gt;https://github.com/tmpvar/jsdom&lt;/a&gt;，如&lt;a href=&quot;jsdom&quot;&gt;JSDOM&lt;/a&gt;文档页面上有关酶的记录所示。</target>
        </trans-unit>
        <trans-unit id="6155b89fdcebcd6746d57c5c8f50f6a46e98fca7" translate="yes" xml:space="preserve">
          <source>With &lt;code&gt;mount&lt;/code&gt;, &lt;code&gt;.getNode()&lt;/code&gt; should not be used. &lt;code&gt;.instance()&lt;/code&gt; does what it used to.</source>
          <target state="translated">对于 &lt;code&gt;mount&lt;/code&gt; ，不应使用 &lt;code&gt;.getNode()&lt;/code&gt; 。 &lt;code&gt;.instance()&lt;/code&gt; 照常做。</target>
        </trans-unit>
        <trans-unit id="1c16049db5e88ea160998ae2fd7f7715c71de685" translate="yes" xml:space="preserve">
          <source>With &lt;code&gt;mount&lt;/code&gt;, &lt;code&gt;.instance()&lt;/code&gt; can be called at any level of the tree</source>
          <target state="translated">使用 &lt;code&gt;mount&lt;/code&gt; ，可以在树的任何级别调用 &lt;code&gt;.instance()&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="260f3e7b5b4457d3b4fb0af050704a6685d9dfe7" translate="yes" xml:space="preserve">
          <source>With &lt;code&gt;shallow&lt;/code&gt;, &lt;code&gt;.getNode()&lt;/code&gt; should be replaced with &lt;code&gt;getElement()&lt;/code&gt;</source>
          <target state="translated">对于 &lt;code&gt;shallow&lt;/code&gt; ， &lt;code&gt;.getNode()&lt;/code&gt; 应替换为 &lt;code&gt;getElement()&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="ff822aab78c2e81bf29aea31a895f96ed84eb953" translate="yes" xml:space="preserve">
          <source>With enzyme v3, the behavior is now as follows:</source>
          <target state="translated">使用酶V3,现在的行为如下。</target>
        </trans-unit>
        <trans-unit id="14efcdf8f931b396c14844226be86319b7297dd6" translate="yes" xml:space="preserve">
          <source>With enzyme v3, we have now turned on this mode by default, instead of making it opt-in. It is now possible to &lt;em&gt;opt-out&lt;/em&gt; instead. Additionally, you can now opt-out at a global level.</source>
          <target state="translated">对于酶v3，我们现在默认情况下启用了此模式，而不是选择启用。现在可以&lt;em&gt;选择退出&lt;/em&gt;。此外，您现在可以在全局级别退出。</target>
        </trans-unit>
        <trans-unit id="2c940185a89fe9757b6d95e50233e3b1343117c5" translate="yes" xml:space="preserve">
          <source>With the &lt;code&gt;attachTo&lt;/code&gt; option, you can mount components to attached DOM elements:</source>
          <target state="translated">使用 &lt;code&gt;attachTo&lt;/code&gt; 选项，可以将组件安装到附加的DOM元素上：</target>
        </trans-unit>
        <trans-unit id="14c6e38867d97cf194b082f906dfe97190afab8f" translate="yes" xml:space="preserve">
          <source>With this component, the behavior in enzyme v2.x the behavior would have been like:</source>
          <target state="translated">有了这个组件,在酶v2.x中的行为就会变成这样。</target>
        </trans-unit>
        <trans-unit id="3fe9f6e2b74549c19b39bfd8943a434201f39136" translate="yes" xml:space="preserve">
          <source>Working with React 0.13</source>
          <target state="translated">使用React 0.13</target>
        </trans-unit>
        <trans-unit id="7cd51920910f9f8cc47419f838ab5d724fa49299" translate="yes" xml:space="preserve">
          <source>Working with React 0.14</source>
          <target state="translated">使用React 0.14</target>
        </trans-unit>
        <trans-unit id="45c628ac483f54a92454527b4a3563cd4cb489d8" translate="yes" xml:space="preserve">
          <source>Working with React 15</source>
          <target state="translated">与React 15合作</target>
        </trans-unit>
        <trans-unit id="e689ffad9cbe73673591e2d1a617835a229ac48e" translate="yes" xml:space="preserve">
          <source>Working with React 16</source>
          <target state="translated">与React 16合作</target>
        </trans-unit>
        <trans-unit id="322870eca2189db563a6cf101db9e659b54b8f12" translate="yes" xml:space="preserve">
          <source>Would output the following to the console:</source>
          <target state="translated">会向控制台输出以下内容。</target>
        </trans-unit>
        <trans-unit id="0c955332935b16f4093e9c21950145bf7c6b6c67" translate="yes" xml:space="preserve">
          <source>You do &lt;strong&gt;not&lt;/strong&gt; need to include Jest's own renderer, unless you want to use it &lt;em&gt;only&lt;/em&gt; for Jest snapshot testing.</source>
          <target state="translated">你&lt;strong&gt;不会&lt;/strong&gt;需要包括玩笑自己的渲染器，除非你想用它&lt;em&gt;仅仅&lt;/em&gt;当作笑柄快照测试。</target>
        </trans-unit>
        <trans-unit id="8da7a369f8f700fcf2a51cc169b4d961ca7135cf" translate="yes" xml:space="preserve">
          <source>You will want to configure enzyme with the adapter you'd like to use before using enzyme in your tests. The way to do this is with &lt;code&gt;enzyme.configure(...)&lt;/code&gt;. For example, if your project depends on React 16, you would want to configure enzyme this way:</source>
          <target state="translated">在测试中使用酶之前，您将需要使用要使用的适配器配置酶。做到这一点的方法是 &lt;code&gt;enzyme.configure(...)&lt;/code&gt; 。例如，如果您的项目依赖于React 16，则您希望通过以下方式配置酶：</target>
        </trans-unit>
        <trans-unit id="08534f33c201a45017b502e90a800f1b708ebcb3" translate="yes" xml:space="preserve">
          <source>\</source>
          <target state="translated">\</target>
        </trans-unit>
        <trans-unit id="b1eba0d72cb54fcab444479f482326f49ab59b53" translate="yes" xml:space="preserve">
          <source>```jsx class Foo extends React.Component { loadData() { return fetch(); }</source>
          <target state="translated">jsx类Foo扩展了React.Component {loadData（）{return fetch（）; }</target>
        </trans-unit>
        <trans-unit id="3767869448827e8662a5e49ec8bbfcccac68b4b1" translate="yes" xml:space="preserve">
          <source>`~16.0.0-0 \</source>
          <target state="translated">`〜16.0.0-0 \</target>
        </trans-unit>
        <trans-unit id="a5230bf3ac1fc697c044aa12dc9e2fb2c6ea3dcf" translate="yes" xml:space="preserve">
          <source>and:</source>
          <target state="translated">and:</target>
        </trans-unit>
        <trans-unit id="66db218ac1be48949dc358f42ad507231a1a06e5" translate="yes" xml:space="preserve">
          <source>attribute syntax (&lt;code&gt;[href=&quot;foo&quot;]&lt;/code&gt;, &lt;code&gt;[type=&quot;text&quot;]&lt;/code&gt;, and the other attribute selectors listed &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Learn/CSS/Introduction_to_CSS/Attribute_selectors&quot;&gt;here&lt;/a&gt;.)</source>
          <target state="translated">属性语法（ &lt;code&gt;[href=&quot;foo&quot;]&lt;/code&gt; ， &lt;code&gt;[type=&quot;text&quot;]&lt;/code&gt; 以及&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Learn/CSS/Introduction_to_CSS/Attribute_selectors&quot;&gt;此处&lt;/a&gt;列出的其他属性选择器。）</target>
        </trans-unit>
        <trans-unit id="a6212920c6b99515f550c31cdb7631b05146adb6" translate="yes" xml:space="preserve">
          <source>can only be called on a wrapper of a single node.</source>
          <target state="translated">只能在单个节点的封装器上调用。</target>
        </trans-unit>
        <trans-unit id="2f3a15ba2c6dee0fd37d7d4bc043fbb66d61f2a8" translate="yes" xml:space="preserve">
          <source>class syntax (&lt;code&gt;.foo&lt;/code&gt;, &lt;code&gt;.foo-bar&lt;/code&gt;, etc.)</source>
          <target state="translated">类语法（ &lt;code&gt;.foo&lt;/code&gt; ， &lt;code&gt;.foo-bar&lt;/code&gt; 等）</target>
        </trans-unit>
        <trans-unit id="b04d34bf9a3923ac70eae738d5cfe3c676602665" translate="yes" xml:space="preserve">
          <source>contents must match: In text nodes, leading and trailing spaces are ignored, but not space in the middle. Child elements must match according to these rules, recursively.</source>
          <target state="translated">内容必须匹配。在文本节点中,前导和尾部的空格会被忽略,但中间的空格不会被忽略。子元素必须根据这些规则,递归地匹配。</target>
        </trans-unit>
        <trans-unit id="ca02a16f691cd4050929388ed56bc9b5169d1434" translate="yes" xml:space="preserve">
          <source>element tag name syntax (&lt;code&gt;input&lt;/code&gt;, &lt;code&gt;div&lt;/code&gt;, &lt;code&gt;span&lt;/code&gt;, etc.)</source>
          <target state="translated">元素标签名称语法（ &lt;code&gt;input&lt;/code&gt; ， &lt;code&gt;div&lt;/code&gt; ， &lt;code&gt;span&lt;/code&gt; 等）</target>
        </trans-unit>
        <trans-unit id="57627a5faa485a8c3ffa55c5fc06940b5ffdc130" translate="yes" xml:space="preserve">
          <source>enzyme Adapter Package</source>
          <target state="translated">酵素适配器包</target>
        </trans-unit>
        <trans-unit id="bebc90c6446be7ac51485dd181d38fd95704e77a" translate="yes" xml:space="preserve">
          <source>enzyme Selectors</source>
          <target state="translated">酶选择器</target>
        </trans-unit>
        <trans-unit id="bd22188d38d53380e66ef2fa196267e11ac6136d" translate="yes" xml:space="preserve">
          <source>enzyme allows you to find React components based on their constructor. You can pass in the reference to the component&amp;rsquo;s constructor. Of course, this kind of selector only checks the component type; it ignores props and children.</source>
          <target state="translated">酶使您可以根据其构造函数查找React组件。您可以将引用传递给组件的构造函数。当然，这种选择器仅检查组件类型。它忽略了道具和孩子。</target>
        </trans-unit>
        <trans-unit id="f4c9435c285533437145c82e4355e7155a5a75cb" translate="yes" xml:space="preserve">
          <source>enzyme allows you to find components and nodes based on a subset of their properties:</source>
          <target state="translated">酶允许您根据其属性的子集找到组件和节点。</target>
        </trans-unit>
        <trans-unit id="c7a49c8d40895e1de1ad068a46d2dde86b02818b" translate="yes" xml:space="preserve">
          <source>enzyme allows you to find components based on a component&amp;rsquo;s &lt;code&gt;displayName&lt;/code&gt;. If a component exists in a render tree where its &lt;code&gt;displayName&lt;/code&gt; is set and has its first character as a capital letter, you can use a string to find it:</source>
          <target state="translated">酶允许您根据组件的 &lt;code&gt;displayName&lt;/code&gt; 查找组件。如果组件存在于设置了 &lt;code&gt;displayName&lt;/code&gt; 的渲染树中，并且其第一个字符为大写字母，则可以使用字符串来查找它：</target>
        </trans-unit>
        <trans-unit id="1727dacac8b65ff0b5cc6197d3dc59638aeaa114" translate="yes" xml:space="preserve">
          <source>enzyme can be used with your test runner of choice. All examples in the documentation will be provided using &lt;a href=&quot;https://mochajs.org/&quot;&gt;mocha&lt;/a&gt; and &lt;a href=&quot;http://chaijs.com/api/bdd/&quot;&gt;BDD style chai&lt;/a&gt;, although neither library is a dependency of enzyme.</source>
          <target state="translated">酶可以与您选择的测试跑步者一起使用。文档中的所有示例都将使用&lt;a href=&quot;https://mochajs.org/&quot;&gt;mocha&lt;/a&gt;和&lt;a href=&quot;http://chaijs.com/api/bdd/&quot;&gt;BDD样式的chai提供&lt;/a&gt;，尽管这两个库都不是酶的依赖项。</target>
        </trans-unit>
        <trans-unit id="58650e89adab3718dbfc17c7698f152b34d563b6" translate="yes" xml:space="preserve">
          <source>enzyme does attempt to automatically &quot;update&quot; the root wrapper in most common scenarios, but these are only the state changes that it knows about. For all other state changes, you may need to call &lt;code&gt;wrapper.update()&lt;/code&gt; yourself.</source>
          <target state="translated">在大多数常见情况下，ase确实会尝试自动&amp;ldquo;更新&amp;rdquo;根包装，但这只是它知道的状态更改。对于所有其他状态更改，您可能需要自己调用 &lt;code&gt;wrapper.update()&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="d4ad07fb25faae64edd9a193629eb98ce33eae2d" translate="yes" xml:space="preserve">
          <source>enzyme has a &lt;code&gt;.children()&lt;/code&gt; method which is intended to return the rendered children of a wrapper.</source>
          <target state="translated">酶具有 &lt;code&gt;.children()&lt;/code&gt; 方法，该方法旨在返回包装器的渲染子级。</target>
        </trans-unit>
        <trans-unit id="3cb0e38a9de9b049940e161c6afcfc2f0a91c247" translate="yes" xml:space="preserve">
          <source>enzyme now allows for you to grab the &lt;code&gt;instance()&lt;/code&gt; of a wrapper at any level of the render tree, not just at the root. This means that you can &lt;code&gt;.find(...)&lt;/code&gt; a specific component, then grab its instance and call &lt;code&gt;.setState(...)&lt;/code&gt; or any other methods on the instance that you'd like.</source>
          <target state="translated">现在，asen允许您在渲染树的任何级别上获取包装器的 &lt;code&gt;instance()&lt;/code&gt; ，而不仅仅是在根目录。这意味着您可以 &lt;code&gt;.find(...)&lt;/code&gt; 特定组件，然后获取其实例并在您想要的实例上调用 &lt;code&gt;.setState(...)&lt;/code&gt; 或任何其他方法。</target>
        </trans-unit>
        <trans-unit id="2a3a8361bdc11cefc24487bbead71eac312e49db" translate="yes" xml:space="preserve">
          <source>enzyme now has an &quot;Adapter&quot; system. This means that you now need to install enzyme along with another module that provides the Adapter that tells enzyme how to work with your version of React (or whatever other React-like library you are using).</source>
          <target state="translated">enzyme现在有一个 &quot;适配器 &quot;系统。这意味着你现在需要在安装enzyme的同时安装另一个模块,该模块提供了Adapter,告诉enzyme如何与你的React版本(或你正在使用的任何其他React类库)一起工作。</target>
        </trans-unit>
        <trans-unit id="8cb422dc1c29aa7c57ff5f85e58bf99f207017fe" translate="yes" xml:space="preserve">
          <source>enzyme should be installed using npm:</source>
          <target state="translated">酶应该使用npm安装。</target>
        </trans-unit>
        <trans-unit id="c047ea42f89ccb9d0bdd4bceea9936d6253edb0f" translate="yes" xml:space="preserve">
          <source>enzyme supports a subset of valid CSS selectors to find nodes inside a render tree. Support is as follows:</source>
          <target state="translated">enzyme支持一个有效的CSS选择器子集来寻找渲染树内的节点。支持的内容如下:</target>
        </trans-unit>
        <trans-unit id="6247f0cf9590fd3104bdea103f149226162f9ff5" translate="yes" xml:space="preserve">
          <source>enzyme v2.x had an optional flag that could be passed in to all &lt;code&gt;shallow&lt;/code&gt; calls which would make it so that more of the component's lifecycle methods were called (such as &lt;code&gt;componentDidMount&lt;/code&gt; and &lt;code&gt;componentDidUpdate&lt;/code&gt;).</source>
          <target state="translated">Enzyme v2.x有一个可选标志，可以将其传递给所有 &lt;code&gt;shallow&lt;/code&gt; 调用，这样就可以调用它，以便调用更多组件的生命周期方法（例如 &lt;code&gt;componentDidMount&lt;/code&gt; 和 &lt;code&gt;componentDidUpdate&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="329777629264c5dc51e8658636a7416405f5fc19" translate="yes" xml:space="preserve">
          <source>enzyme v3 architecturally created a layer where React would create an intermediate representation of the render tree at an instance in time and pass that to enzyme to traverse and inspect. This has many advantages, but one of the side effects is that now the intermediate representation does not receive automatic updates.</source>
          <target state="translated">enzyme v3在架构上创建了一个层,React会在某个时间点上创建渲染树的中间表示,并将其传递给enzyme来遍历和检查。这有很多优点,但其中一个副作用是,现在中间表示不会收到自动更新。</target>
        </trans-unit>
        <trans-unit id="5ec9142dd4da758484bc5a90769d17cb0af0299f" translate="yes" xml:space="preserve">
          <source>enzyme v3 now returns &lt;strong&gt;all&lt;/strong&gt; nodes in the result set and not just html nodes. Consider this example:</source>
          <target state="translated">现在，酶v3返回结果集中的&lt;strong&gt;所有&lt;/strong&gt;节点，而不仅仅是html节点。考虑以下示例：</target>
        </trans-unit>
        <trans-unit id="329f8e2ace5e0281fdaeb096478b603e3ff76abb" translate="yes" xml:space="preserve">
          <source>enzyme v3 now uses a real CSS selector parser rather than its own incomplete parser implementation. This is done with &lt;a href=&quot;https://github.com/aweary/rst-selector-parser&quot;&gt;rst-selector-parser&lt;/a&gt; a fork of &lt;a href=&quot;https://github.com/gajus/scalpel/&quot;&gt;scalpel&lt;/a&gt; which is a CSS parser implemented with &lt;a href=&quot;https://nearley.js.org/&quot;&gt;nearley&lt;/a&gt;. We don't think this should cause any breakages across enzyme v2.x to v3.x, but if you believe you have found something that did indeed break, please file an issue with us. Thank you to &lt;a href=&quot;https://github.com/aweary&quot;&gt;Brandon Dail&lt;/a&gt; for making this happen!</source>
          <target state="translated">Enzyme v3现在使用真正的CSS选择器解析器，而不是其自己的不完整解析器实现。这是通过&lt;a href=&quot;https://github.com/aweary/rst-selector-parser&quot;&gt;rst-selector-parser &lt;/a&gt;&lt;a href=&quot;https://github.com/gajus/scalpel/&quot;&gt;解剖刀&lt;/a&gt;的叉子完成的，这是一个用&lt;a href=&quot;https://nearley.js.org/&quot;&gt;Nearley&lt;/a&gt;实现的CSS解析器。我们认为这不会导致酶v2.x到v3.x发生任何破损，但是如果您认为发现确实确实破损的东西，请向我们提出问题。感谢&lt;a href=&quot;https://github.com/aweary&quot;&gt;Brandon Dail&lt;/a&gt;做到这一点！</target>
        </trans-unit>
        <trans-unit id="49a6279db019421a80af977cbd378222f9c22919" translate="yes" xml:space="preserve">
          <source>enzyme was originally designed to work with Mocha, so getting it up and running with Mocha should be no problem at all. Simply install it and start using it:</source>
          <target state="translated">酵素最初是为Mocha设计的,所以让它与Mocha一起运行应该是没有问题的。只需安装并开始使用它。</target>
        </trans-unit>
        <trans-unit id="861cac19ff766a1d2b8dcec4e4e51021cfb9c109" translate="yes" xml:space="preserve">
          <source>enzyme works well with &lt;a href=&quot;https://github.com/substack/tape&quot;&gt;Tape&lt;/a&gt; and &lt;a href=&quot;https://github.com/avajs/ava&quot;&gt;AVA&lt;/a&gt;. Simply install it and start using it:</source>
          <target state="translated">这种酶与&lt;a href=&quot;https://github.com/substack/tape&quot;&gt;Tape&lt;/a&gt;和&lt;a href=&quot;https://github.com/avajs/ava&quot;&gt;AVA配合良好&lt;/a&gt;。只需安装并开始使用它：</target>
        </trans-unit>
        <trans-unit id="ea1a7e23ed6e705398bf2e57cda9ab04f3cee2ab" translate="yes" xml:space="preserve">
          <source>enzyme's new architecture means that the react &quot;render tree&quot; is transformed into an intermediate representation that is common across all react versions so that enzyme can properly traverse it independent of React's internal representations. A side effect of this is that enzyme no longer has access to the actual object references that were returned from &lt;code&gt;render&lt;/code&gt; in your React components. This normally isn't much of a problem, but can manifest as a test failure in some cases.</source>
          <target state="translated">酶的新架构意味着将反应&amp;ldquo;渲染树&amp;rdquo;转换为所有反应版本共有的中间表示，以便酶可以独立于反应的内部表示正确遍历它。这样做的副作用是，酶不再有权访问从React组件中的 &lt;code&gt;render&lt;/code&gt; 返回的实际对象引用。通常这不是什么大问题，但在某些情况下可能会显示为测试失败。</target>
        </trans-unit>
        <trans-unit id="404ba72417d031a1fff28f4a52246b60557a5a9d" translate="yes" xml:space="preserve">
          <source>enzyme's top level &lt;code&gt;render&lt;/code&gt; API returns a &lt;a href=&quot;https://github.com/cheeriojs/cheerio&quot;&gt;Cheerio&lt;/a&gt; object. The version of Cheerio that we use has been upgraded to 1.0.0. For debugging issues across enzyme v2.x and v3.x with the &lt;code&gt;render&lt;/code&gt; API, we recommend checking out &lt;a href=&quot;https://github.com/cheeriojs/cheerio/blob/48eae25c93702a29b8cd0d09c4a2dce2f912d1f4/History.md&quot;&gt;Cheerio's Changelog&lt;/a&gt; and posting an issue on that repo instead of enzyme's unless you believe it is a bug in enzyme's use of the library.</source>
          <target state="translated">酶的顶级 &lt;code&gt;render&lt;/code&gt; API返回&lt;a href=&quot;https://github.com/cheeriojs/cheerio&quot;&gt;Cheerio&lt;/a&gt;对象。我们使用的Cheerio版本已升级到1.0.0。对于使用 &lt;code&gt;render&lt;/code&gt; API 调试酶v2.x和v3.x的问题，我们建议检出&lt;a href=&quot;https://github.com/cheeriojs/cheerio/blob/48eae25c93702a29b8cd0d09c4a2dce2f912d1f4/History.md&quot;&gt;Cheerio的Changelog，&lt;/a&gt;并在该存储库（而不是酶）上发布问题，除非您认为这是酶对库使用的错误。</target>
        </trans-unit>
        <trans-unit id="72134973984f004638cd5211623660df9b803f81" translate="yes" xml:space="preserve">
          <source>enzyme-example-ava</source>
          <target state="translated">enzyme-example-ava</target>
        </trans-unit>
        <trans-unit id="2c6a5270d365493d9f9139910e3fc1db42148318" translate="yes" xml:space="preserve">
          <source>enzyme-example-lab</source>
          <target state="translated">enzyme-example-lab</target>
        </trans-unit>
        <trans-unit id="a8982146d25e1dd316ed4d87a3da5e89b5fe0162" translate="yes" xml:space="preserve">
          <source>enzyme-example-tape</source>
          <target state="translated">enzyme-example-tape</target>
        </trans-unit>
        <trans-unit id="92e44b83f3ce3b200577ca9541d1d71c808465be" translate="yes" xml:space="preserve">
          <source>id syntax (&lt;code&gt;#foo&lt;/code&gt;, &lt;code&gt;#foo-bar&lt;/code&gt;, etc.)</source>
          <target state="translated">ID语法（ &lt;code&gt;#foo&lt;/code&gt; ， &lt;code&gt;#foo-bar&lt;/code&gt; 等）</target>
        </trans-unit>
        <trans-unit id="bc3cfada8917c301d1871c7c86923823b6e7a1b9" translate="yes" xml:space="preserve">
          <source>render() { return (</source>
          <target state="translated">render(){return (</target>
        </trans-unit>
        <trans-unit id="2b40a53d1bcfa81f78e3a74832a3301fc46e7207" translate="yes" xml:space="preserve">
          <source>tag names must match</source>
          <target state="translated">标签名称必须与</target>
        </trans-unit>
        <trans-unit id="3f337d978c8964f02a8810f4c527f4f84a505ccc" translate="yes" xml:space="preserve">
          <source>the matches can happen anywhere in the wrapper's contents</source>
          <target state="translated">匹配可以发生在包装盒内容的任何地方。</target>
        </trans-unit>
        <trans-unit id="be2c51820bdcc2f4574523d7e0376a44ad483c6f" translate="yes" xml:space="preserve">
          <source>the wrapper can contain more than one node; all are searched</source>
          <target state="translated">封装器可以包含多个节点,所有节点都会被搜索到。</target>
        </trans-unit>
        <trans-unit id="e65077566bcb3ed3f85e55b91f1e9cf9ab2d942c" translate="yes" xml:space="preserve">
          <source>universal syntax (&lt;code&gt;*&lt;/code&gt;)</source>
          <target state="translated">通用语法（ &lt;code&gt;*&lt;/code&gt; ）</target>
        </trans-unit>
        <trans-unit id="7baa41c34cb8fb63ce8e4b4c7a7508b49fb9e6d6" translate="yes" xml:space="preserve">
          <source>will raise if called on a wrapper of a stateless functional component.</source>
          <target state="translated">如果在无状态功能组件的封装器上被调用,将引发。</target>
        </trans-unit>
        <trans-unit id="349bec450cbafbec44cdaf1061fd9dcf13cec0bc" translate="yes" xml:space="preserve">
          <source>~16.1`</source>
          <target state="translated">~16.1`</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
