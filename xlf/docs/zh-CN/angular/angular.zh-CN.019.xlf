<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="zh-CN" datatype="htmlbody" original="angular">
    <body>
      <group id="angular">
        <trans-unit id="6eedc5b4078ec5038cac8e2b9d65aa8e2af22115" translate="yes" xml:space="preserve">
          <source>Using Bazel with the Angular CLI</source>
          <target state="translated">在Angular CLI中使用Bazel的方法</target>
        </trans-unit>
        <trans-unit id="c8043476b24c21372dff83314cac228b720e7e28" translate="yes" xml:space="preserve">
          <source>Using Component Directives</source>
          <target state="translated">使用组件指令</target>
        </trans-unit>
        <trans-unit id="5a929294f1668f68b734694e2f6b28e39e561245" translate="yes" xml:space="preserve">
          <source>Using Components and Injectables</source>
          <target state="translated">使用组件和注射剂</target>
        </trans-unit>
        <trans-unit id="8560edfb2496478ddf9a15a34d1f1a4eea8ae268" translate="yes" xml:space="preserve">
          <source>Using Ivy in a new project</source>
          <target state="translated">在新项目中使用Ivy</target>
        </trans-unit>
        <trans-unit id="cf8265992d20fc1bd54761a66691a09bc3fa959c" translate="yes" xml:space="preserve">
          <source>Using Ivy in an existing project</source>
          <target state="translated">在现有项目中使用Ivy</target>
        </trans-unit>
        <trans-unit id="bd58271391a20dd5989d94d3502323887e683ca7" translate="yes" xml:space="preserve">
          <source>Using Published Libraries</source>
          <target state="translated">使用已发布的图书馆</target>
        </trans-unit>
        <trans-unit id="6ca8f7e641df5bbedfdd4e9bb52d03e5ec749ff9" translate="yes" xml:space="preserve">
          <source>Using SSR without Ivy</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="85890bb2deccf4180db150068e3ca159756d5544" translate="yes" xml:space="preserve">
          <source>Using UpgradeModule with Angular &lt;code&gt;NgModules&lt;/code&gt;</source>
          <target state="translated">将UpgradeModule与Angular &lt;code&gt;NgModules&lt;/code&gt; 一起使用</target>
        </trans-unit>
        <trans-unit id="26f2d58b409e22020a26e1496a62efdcfdf36b19" translate="yes" xml:space="preserve">
          <source>Using Web Workers with Angular CLI</source>
          <target state="translated">用Angular CLI使用Web Workers</target>
        </trans-unit>
        <trans-unit id="25a7a129fc73369732e5d055709e4cf9d964e38c" translate="yes" xml:space="preserve">
          <source>Using a Module Loader</source>
          <target state="translated">使用模块加载器</target>
        </trans-unit>
        <trans-unit id="1bb470f1f27338d27d105cf1de41569b72b27987" translate="yes" xml:space="preserve">
          <source>Using a checkbox with a reactive form.</source>
          <target state="translated">使用带有反应式的复选框。</target>
        </trans-unit>
        <trans-unit id="31590c1417cdeb82cd1f78154e9df03671bd0ac5" translate="yes" xml:space="preserve">
          <source>Using a class as an interface gives you the characteristics of an interface in a real JavaScript object. To minimize memory cost, however, the class should have &lt;em&gt;no implementation&lt;/em&gt;. The &lt;code&gt;MinimalLogger&lt;/code&gt; transpiles to this unoptimized, pre-minified JavaScript for a constructor function.</source>
          <target state="translated">使用类作为接口，可以为您提供真实JavaScript对象中接口的特征。但是，为了最大程度地减少内存开销，该类不应&lt;em&gt;实现&lt;/em&gt;。该 &lt;code&gt;MinimalLogger&lt;/code&gt; transpiles这种未优化，预精缩的JavaScript构造函数。</target>
        </trans-unit>
        <trans-unit id="4d9d664f928769890dab78d8b2d3d0c3e2b54a9f" translate="yes" xml:space="preserve">
          <source>Using a custom provider allows you to provide a concrete implementation for implicit dependencies, such as built-in browser APIs. The following example uses an &lt;code&gt;&lt;a href=&quot;../api/core/injectiontoken&quot;&gt;InjectionToken&lt;/a&gt;&lt;/code&gt; to provide the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Window/localStorage&quot;&gt;localStorage&lt;/a&gt; browser API as a dependency in the &lt;code&gt;BrowserStorageService&lt;/code&gt;.</source>
          <target state="translated">使用自定义提供程序可以使您为隐式依赖项（例如内置浏览器API）提供具体的实现。下面的示例使用 &lt;code&gt;&lt;a href=&quot;../api/core/injectiontoken&quot;&gt;InjectionToken&lt;/a&gt;&lt;/code&gt; 来提供&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Window/localStorage&quot;&gt;localStorage&lt;/a&gt;浏览器API，作为 &lt;code&gt;BrowserStorageService&lt;/code&gt; 中的依赖项。</target>
        </trans-unit>
        <trans-unit id="02aeb5cb190c15997bab2a850739e9d394f7fa3c" translate="yes" xml:space="preserve">
          <source>Using a module loader such as &lt;a href=&quot;https://github.com/systemjs/systemjs&quot;&gt;SystemJS&lt;/a&gt;, &lt;a href=&quot;http://webpack.github.io/&quot;&gt;Webpack&lt;/a&gt;, or &lt;a href=&quot;http://browserify.org/&quot;&gt;Browserify&lt;/a&gt; allows us to use the built-in module systems of TypeScript or ES2015. You can use the &lt;code&gt;import&lt;/code&gt; and &lt;code&gt;export&lt;/code&gt; features that explicitly specify what code can and will be shared between different parts of the application. For ES5 applications you can use CommonJS style &lt;code&gt;require&lt;/code&gt; and &lt;code&gt;module.exports&lt;/code&gt; features. In both cases, the module loader will then take care of loading all the code the application needs in the correct order.</source>
          <target state="translated">通过使用模块加载器（例如&lt;a href=&quot;https://github.com/systemjs/systemjs&quot;&gt;SystemJS&lt;/a&gt;，&lt;a href=&quot;http://webpack.github.io/&quot;&gt;Webpack&lt;/a&gt;或&lt;a href=&quot;http://browserify.org/&quot;&gt;Browserify）&lt;/a&gt;，我们可以使用TypeScript或ES2015的内置模块系统。您可以使用 &lt;code&gt;import&lt;/code&gt; 和 &lt;code&gt;export&lt;/code&gt; 功能来明确指定可以在应用程序的不同部分之间共享的代码。对于ES5应用程序，您可以使用CommonJS样式的 &lt;code&gt;require&lt;/code&gt; 和 &lt;code&gt;module.exports&lt;/code&gt; 功能。在这两种情况下，模块加载器都将负责按照正确的顺序加载应用程序所需的所有代码。</target>
        </trans-unit>
        <trans-unit id="f25102a62964a05eaec1c93977c505a046e3af36" translate="yes" xml:space="preserve">
          <source>Using a multi-select control</source>
          <target state="translated">使用多选择控制</target>
        </trans-unit>
        <trans-unit id="f0463c4ad562556ca75b5685c437f035005a3898" translate="yes" xml:space="preserve">
          <source>Using a number input with a reactive form.</source>
          <target state="translated">使用具有反应式的数字输入。</target>
        </trans-unit>
        <trans-unit id="362ae0d4a6f11b3ccd18f788e1fc131f19e64607" translate="yes" xml:space="preserve">
          <source>Using a pipe in a template</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="43277715c244dfa655936028d9803ebc04d819da" translate="yes" xml:space="preserve">
          <source>Using a range input with a reactive form</source>
          <target state="translated">使用反应式的范围输入</target>
        </trans-unit>
        <trans-unit id="0bc00d2438413210675960c941e89d3aaad3f65b" translate="yes" xml:space="preserve">
          <source>Using a standalone ngModel within a group</source>
          <target state="translated">在组内使用独立的ngModel。</target>
        </trans-unit>
        <trans-unit id="9a199801aa6b4cc01c80b73b2888fdf63af4478e" translate="yes" xml:space="preserve">
          <source>Using absolute URLs for HTTP (data) requests on the server</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2339a60fcda21d90b519800c5c237255868c84d4" translate="yes" xml:space="preserve">
          <source>Using absolute URLs for server requests</source>
          <target state="translated">在服务器请求中使用绝对URL</target>
        </trans-unit>
        <trans-unit id="838f5332e38c0970cd6624c40ba4f576025a9c67" translate="yes" xml:space="preserve">
          <source>Using ahead-of-time compilation with hybrid apps</source>
          <target state="translated">在混合应用程序中使用超前编译</target>
        </trans-unit>
        <trans-unit id="3fb461289e6b21adcc3eeca9c5745cff8590fa02" translate="yes" xml:space="preserve">
          <source>Using an &lt;code&gt;&lt;a href=&quot;../api/core/ngmodulefactory&quot;&gt;NgModuleFactory&lt;/a&gt;&lt;/code&gt; requires less boilerplate and is a good default option as it supports AOT out-of-the-box. Using a custom function requires slightly more code, but gives you greater flexibility.</source>
          <target state="translated">使用 &lt;code&gt;&lt;a href=&quot;../api/core/ngmodulefactory&quot;&gt;NgModuleFactory&lt;/a&gt;&lt;/code&gt; 需要更少的样板，并且是一个很好的默认选项，因为它支持开箱即用的AOT。使用自定义函数需要更多的代码，但可以提供更大的灵活性。</target>
        </trans-unit>
        <trans-unit id="225b30fb1178e65060dad8d2124424365a8f210e" translate="yes" xml:space="preserve">
          <source>Using an Angular custom element makes the process much simpler and more transparent, by providing all of the infrastructure and framework automatically&amp;mdash;all you have to do is define the kind of event handling you want. (You do still have to exclude the component from compilation, if you are not going to use it in your app.)</source>
          <target state="translated">通过自动提供所有基础结构和框架，使用Angular自定义元素可以使过程变得更加简单和透明，您所要做的就是定义所需的事件处理类型。（如果您不打算在应用程序中使用该组件，则仍然必须将该组件从编译中排除。）</target>
        </trans-unit>
        <trans-unit id="b770296ed0960ba4e0adf200d5857757fb6ba30c" translate="yes" xml:space="preserve">
          <source>Using an external &lt;code&gt;then&lt;/code&gt; template</source>
          <target state="translated">使用外部 &lt;code&gt;then&lt;/code&gt; 模板</target>
        </trans-unit>
        <trans-unit id="6551ed39890875715b3cd0878168d51e0620c7b7" translate="yes" xml:space="preserve">
          <source>Using an inline function</source>
          <target state="translated">使用内联函数</target>
        </trans-unit>
        <trans-unit id="5b549f5ecc437dc9b61f4e3a7e36dddae8771675" translate="yes" xml:space="preserve">
          <source>Using change detection hooks</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1f00ba280ffbec54abe918ad286a8c43241f37e6" translate="yes" xml:space="preserve">
          <source>Using component styles</source>
          <target state="translated">使用组件样式</target>
        </trans-unit>
        <trans-unit id="326e590dcb9985b96603eaad2f203133d3ba3bbb" translate="yes" xml:space="preserve">
          <source>Using components vs services from other modules</source>
          <target state="translated">使用组件与其他模块的服务</target>
        </trans-unit>
        <trans-unit id="a5d277d826e502273f12e8b03216771a9c8b14ca" translate="yes" xml:space="preserve">
          <source>Using containers for native elements</source>
          <target state="translated">为本地元素使用容器</target>
        </trans-unit>
        <trans-unit id="dcca472daafb75114b08b61eb39f9ca73d6a3a8d" translate="yes" xml:space="preserve">
          <source>Using corporate proxy</source>
          <target state="translated">使用公司代理</target>
        </trans-unit>
        <trans-unit id="c2a6531054ec097e5ed70a832394e057ca205e4a" translate="yes" xml:space="preserve">
          <source>Using custom elements</source>
          <target state="translated">使用自定义元素</target>
        </trans-unit>
        <trans-unit id="d9d0d750c5305782eba2c313f6df5f97406ecfca" translate="yes" xml:space="preserve">
          <source>Using directives with &lt;code&gt;@&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">在 &lt;code&gt;@&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt; &lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule中&lt;/a&gt;使用指令</target>
        </trans-unit>
        <trans-unit id="59731cbdea4e70d97215a2a24c9617e473f8ae07" translate="yes" xml:space="preserve">
          <source>Using environment-specific variables in your app</source>
          <target state="translated">在您的应用程序中使用特定环境变量</target>
        </trans-unit>
        <trans-unit id="854d21a23d274223f8cf25d100b4b8cae3bc20bf" translate="yes" xml:space="preserve">
          <source>Using forms for user input</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4873a934571edcf42946734a7ed9212bf08a37e0" translate="yes" xml:space="preserve">
          <source>Using interceptors for caching</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="93444e1d8dd4bd38294a6a666ceb5eff59c328d4" translate="yes" xml:space="preserve">
          <source>Using interceptors for logging</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1562913bd8ac2c70ecf103143f1b8b29b4713652" translate="yes" xml:space="preserve">
          <source>Using interceptors to request multiple values</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2321b7fbd5c1912c8bada99aaf80b8238becba61" translate="yes" xml:space="preserve">
          <source>Using lightweight injection tokens</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="45700a967ebb7988c1385c71666cbbbe1b4d5004" translate="yes" xml:space="preserve">
          <source>Using named outlets and secondary routes, you can target multiple outlets in the same &lt;code&gt;&lt;a href=&quot;routerlink&quot;&gt;RouterLink&lt;/a&gt;&lt;/code&gt; directive.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dbf5a34485d6afcadda2f26d6136cf55d8a92517" translate="yes" xml:space="preserve">
          <source>Using ngModel on a standalone control</source>
          <target state="translated">在独立控件上使用ngModel。</target>
        </trans-unit>
        <trans-unit id="9a7f37dd828f83348b0672d7bb9204b26a305b1d" translate="yes" xml:space="preserve">
          <source>Using ngModel within a form</source>
          <target state="translated">在表单中使用ngModel</target>
        </trans-unit>
        <trans-unit id="767134f57267e4073023d69bfe85a0ae385d07cf" translate="yes" xml:space="preserve">
          <source>Using observables to handle events and asynchronous operations can have the advantage of greater consistency in contexts such as HTTP requests.</source>
          <target state="translated">使用观测值来处理事件和异步操作,可以在HTTP请求等上下文中具有更大的一致性。</target>
        </trans-unit>
        <trans-unit id="d8d68344b86e6ce83ecfc8f50f23c50bc2c3acc6" translate="yes" xml:space="preserve">
          <source>Using observables to pass values</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="525cb205ecf77ef26071eabcc120a080cdae4b66" translate="yes" xml:space="preserve">
          <source>Using one of our &lt;code&gt;options&lt;/code&gt; is very straightforward, we did this in the previous section when we accessed &lt;code&gt;options.command&lt;/code&gt;.</source>
          <target state="translated">使用我们的一个 &lt;code&gt;options&lt;/code&gt; 非常简单，我们在上一节中访问 &lt;code&gt;options.command&lt;/code&gt; 时就做到了。</target>
        </trans-unit>
        <trans-unit id="54dca9e5d7f69c01aedf3f75ceb5a7cb672bb0ac" translate="yes" xml:space="preserve">
          <source>Using pipes</source>
          <target state="translated">使用管道</target>
        </trans-unit>
        <trans-unit id="0448273d89913b3c36897d03a9d34e53b74149a2" translate="yes" xml:space="preserve">
          <source>Using published libraries</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="89ebc794fed95d63f9561d0bda00bb5d55f1a0f8" translate="yes" xml:space="preserve">
          <source>Using radio buttons with reactive form directives</source>
          <target state="translated">使用反应式表单指令的单选按钮</target>
        </trans-unit>
        <trans-unit id="0185928d3f2103e7a9ea7951c3279ef10646ca73" translate="yes" xml:space="preserve">
          <source>Using relative paths</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2e5b826e5d221359e0500389d0018c9bdd597f16" translate="yes" xml:space="preserve">
          <source>Using route information</source>
          <target state="translated">使用途径信息</target>
        </trans-unit>
        <trans-unit id="881f18e8deeb52c2a18dfc164af0a161e22b725b" translate="yes" xml:space="preserve">
          <source>Using runtime-global libraries inside your app</source>
          <target state="translated">在应用程序中使用运行时全局库</target>
        </trans-unit>
        <trans-unit id="9bd2ff97908a0c09c2d63474c3cfcc5434417451" translate="yes" xml:space="preserve">
          <source>Using select controls in a reactive form</source>
          <target state="translated">在反应式表单中使用选择控件</target>
        </trans-unit>
        <trans-unit id="832a53e426313323000169f37f744b9b7aa99d81" translate="yes" xml:space="preserve">
          <source>Using select controls in a template-driven form</source>
          <target state="translated">在模板驱动的表单中使用选择控件。</target>
        </trans-unit>
        <trans-unit id="99548dcfaafec32c93c0b36f56b0b0574761c0ed" translate="yes" xml:space="preserve">
          <source>Using the &lt;code&gt;&lt;a href=&quot;../api/common/asyncpipe&quot;&gt;async&lt;/a&gt;&lt;/code&gt; pipe with an Observable which you know will emit synchronously.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="88275c4f479097c72fb4415e38dc5583792a3082" translate="yes" xml:space="preserve">
          <source>Using the &lt;code&gt;&lt;a href=&quot;../api/core/component#viewProviders&quot;&gt;viewProviders&lt;/a&gt;&lt;/code&gt; array</source>
          <target state="translated">使用 &lt;code&gt;&lt;a href=&quot;../api/core/component#viewProviders&quot;&gt;viewProviders&lt;/a&gt;&lt;/code&gt; 数组</target>
        </trans-unit>
        <trans-unit id="8cd2ad1f42cec0fd44d2b578a1a5e65f273ee4d6" translate="yes" xml:space="preserve">
          <source>Using the &lt;code&gt;@&lt;a href=&quot;../api/core/injectable&quot;&gt;Injectable&lt;/a&gt;()&lt;/code&gt;&lt;code&gt;&lt;a href=&quot;../api/core/injectable#providedIn&quot;&gt;providedIn&lt;/a&gt;&lt;/code&gt; property is preferable to the &lt;code&gt;@&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;()&lt;/code&gt;&lt;code&gt;providers&lt;/code&gt; array because with &lt;code&gt;@&lt;a href=&quot;../api/core/injectable&quot;&gt;Injectable&lt;/a&gt;()&lt;/code&gt;&lt;code&gt;&lt;a href=&quot;../api/core/injectable#providedIn&quot;&gt;providedIn&lt;/a&gt;&lt;/code&gt;, optimization tools can perform tree-shaking, which removes services that your app isn't using and results in smaller bundle sizes.</source>
          <target state="translated">使用 &lt;code&gt;@&lt;a href=&quot;../api/core/injectable&quot;&gt;Injectable&lt;/a&gt;()&lt;/code&gt; &lt;code&gt;&lt;a href=&quot;../api/core/injectable#providedIn&quot;&gt;providedIn&lt;/a&gt;&lt;/code&gt; 属性比 &lt;code&gt;@&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;()&lt;/code&gt; &lt;code&gt;providers&lt;/code&gt; 数组更可取，因为使用 &lt;code&gt;@&lt;a href=&quot;../api/core/injectable&quot;&gt;Injectable&lt;/a&gt;()&lt;/code&gt; &lt;code&gt;&lt;a href=&quot;../api/core/injectable#providedIn&quot;&gt;providedIn&lt;/a&gt;&lt;/code&gt; ，优化工具可以进行树状摇动，从而删除您的应用程序未使用的服务，从而减小捆绑包的大小。 。</target>
        </trans-unit>
        <trans-unit id="8e7ac3035137317853416afbb770970d2510fd53" translate="yes" xml:space="preserve">
          <source>Using the &lt;code&gt;@&lt;a href=&quot;../api/core/injectable&quot;&gt;Injectable&lt;/a&gt;()&lt;/code&gt;&lt;code&gt;&lt;a href=&quot;../api/core/injectable#providedIn&quot;&gt;providedIn&lt;/a&gt;&lt;/code&gt; property to refer to &lt;code&gt;@&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;()&lt;/code&gt;, or &lt;code&gt;root&lt;/code&gt;.</source>
          <target state="translated">使用 &lt;code&gt;@&lt;a href=&quot;../api/core/injectable&quot;&gt;Injectable&lt;/a&gt;()&lt;/code&gt; &lt;code&gt;&lt;a href=&quot;../api/core/injectable#providedIn&quot;&gt;providedIn&lt;/a&gt;&lt;/code&gt; 属性来指代 &lt;code&gt;@&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;()&lt;/code&gt; ，或 &lt;code&gt;root&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="c88e88f6d2f3c47b9d51e8a3ed253e6a553321dd" translate="yes" xml:space="preserve">
          <source>Using the &lt;code&gt;@&lt;a href=&quot;../api/core/injectable&quot;&gt;Injectable&lt;/a&gt;()&lt;/code&gt;&lt;code&gt;providedIn&lt;/code&gt; property is preferable to the &lt;code&gt;@&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;()&lt;/code&gt;&lt;code&gt;providers&lt;/code&gt; array because with &lt;code&gt;@&lt;a href=&quot;../api/core/injectable&quot;&gt;Injectable&lt;/a&gt;()&lt;/code&gt;&lt;code&gt;providedIn&lt;/code&gt;, optimization tools can perform tree-shaking, which removes services that your app isn't using and results in smaller bundle sizes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="44e4420ee01a69107b179c7db81fbdead7af3869" translate="yes" xml:space="preserve">
          <source>Using the &lt;code&gt;@&lt;a href=&quot;../api/core/injectable&quot;&gt;Injectable&lt;/a&gt;()&lt;/code&gt;&lt;code&gt;providedIn&lt;/code&gt; property to refer to &lt;code&gt;@&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;()&lt;/code&gt;, or &lt;code&gt;root&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e75e4bed92d2b5bcba6a93626663647ccf1ee802" translate="yes" xml:space="preserve">
          <source>Using the &lt;code&gt;@&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;()&lt;/code&gt;&lt;code&gt;providers&lt;/code&gt; array.</source>
          <target state="translated">使用 &lt;code&gt;@&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;()&lt;/code&gt; &lt;code&gt;providers&lt;/code&gt; 数组。</target>
        </trans-unit>
        <trans-unit id="0c704679875decd7bc5e10cd52d8163394039311" translate="yes" xml:space="preserve">
          <source>Using the &lt;code&gt;@&lt;a href=&quot;../api/core/self&quot;&gt;Self&lt;/a&gt;&lt;/code&gt; decorator, the injector only looks at the component's injector for its providers. The &lt;code&gt;@&lt;a href=&quot;../api/core/skipself&quot;&gt;SkipSelf&lt;/a&gt;&lt;/code&gt; decorator allows you to skip the local injector and look up in the hierarchy to find a provider that satisfies this dependency. The &lt;code&gt;sessionStorageService&lt;/code&gt; instance interacts with the &lt;code&gt;BrowserStorageService&lt;/code&gt; using the &lt;code&gt;sessionStorage&lt;/code&gt; browser API, while the &lt;code&gt;localStorageService&lt;/code&gt; skips the local injector and uses the root &lt;code&gt;BrowserStorageService&lt;/code&gt; that uses the &lt;code&gt;localStorage&lt;/code&gt; browser API.</source>
          <target state="translated">使用 &lt;code&gt;@&lt;a href=&quot;../api/core/self&quot;&gt;Self&lt;/a&gt;&lt;/code&gt; 装饰器，注入器仅为其提供者查看组件的注入器。该 &lt;code&gt;@&lt;a href=&quot;../api/core/skipself&quot;&gt;SkipSelf&lt;/a&gt;&lt;/code&gt; 装饰让你跳过本地喷油器和层次结构中查找找到一个供应商，满足这种依赖性。该 &lt;code&gt;sessionStorageService&lt;/code&gt; 用实例进行交互 &lt;code&gt;BrowserStorageService&lt;/code&gt; 使用 &lt;code&gt;sessionStorage&lt;/code&gt; 的浏览器API，而 &lt;code&gt;localStorageService&lt;/code&gt; 跳过本地喷射器和使用根 &lt;code&gt;BrowserStorageService&lt;/code&gt; 一个使用 &lt;code&gt;localStorage&lt;/code&gt; 的浏览器API。</target>
        </trans-unit>
        <trans-unit id="9c2ddaa9a4477a0d280fe7ff4b0889ca96f1260c" translate="yes" xml:space="preserve">
          <source>Using the &lt;code&gt;providers&lt;/code&gt; array</source>
          <target state="translated">使用 &lt;code&gt;providers&lt;/code&gt; 数组</target>
        </trans-unit>
        <trans-unit id="b84bc590592c2922688e55ff9faad9cfa8594559" translate="yes" xml:space="preserve">
          <source>Using the &lt;code&gt;switchMap()&lt;/code&gt; operator</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2a5de5cdedb36b49f976c8433065aae5da357c2e" translate="yes" xml:space="preserve">
          <source>Using the &lt;code&gt;viewProviders&lt;/code&gt; array</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="87db3d87246b0ba7b1f6a1e65402304267c078f0" translate="yes" xml:space="preserve">
          <source>Using the Angular CLI command &lt;a href=&quot;cli/generate&quot;&gt;&lt;code&gt;ng generate class&lt;/code&gt;&lt;/a&gt;, generate a new class named &lt;code&gt;Hero&lt;/code&gt;:</source>
          <target state="translated">使用Angular CLI命令&lt;a href=&quot;cli/generate&quot;&gt; &lt;code&gt;ng generate class&lt;/code&gt; &lt;/a&gt;，生成一个名为 &lt;code&gt;Hero&lt;/code&gt; 的新类：</target>
        </trans-unit>
        <trans-unit id="24653eb83b101fbb344fe1dd41060b459319c087" translate="yes" xml:space="preserve">
          <source>Using the Angular CLI command &lt;a href=&quot;cli/generate&quot;&gt;&lt;code&gt;ng generate component&lt;/code&gt;&lt;/a&gt;, generate a new component named &lt;code&gt;HeroForm&lt;/code&gt;:</source>
          <target state="translated">使用Angular CLI命令&lt;a href=&quot;cli/generate&quot;&gt; &lt;code&gt;ng generate component&lt;/code&gt; &lt;/a&gt;，生成一个名为 &lt;code&gt;HeroForm&lt;/code&gt; 的新组件：</target>
        </trans-unit>
        <trans-unit id="26e8c88a445901a9d701f6c7f1ed54859622fdd3" translate="yes" xml:space="preserve">
          <source>Using the Angular CLI, create a new application, &lt;em&gt;angular-router-sample&lt;/em&gt;. This application will have two components: &lt;em&gt;crisis-list&lt;/em&gt; and &lt;em&gt;heroes-list&lt;/em&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="81efa0d631504c35459bdd579b8b05a652508d3a" translate="yes" xml:space="preserve">
          <source>Using the Angular CLI, create a service called &lt;code&gt;hero&lt;/code&gt;.</source>
          <target state="translated">使用Angular CLI创建名为 &lt;code&gt;hero&lt;/code&gt; 的服务。</target>
        </trans-unit>
        <trans-unit id="0965eb7867ed11aa022c0e42434572bd02fabfa4" translate="yes" xml:space="preserve">
          <source>Using the Angular CLI, generate a new component named &lt;code&gt;heroes&lt;/code&gt;.</source>
          <target state="translated">使用Angular CLI生成一个名为 &lt;code&gt;heroes&lt;/code&gt; 的新组件。</target>
        </trans-unit>
        <trans-unit id="a5adb7aa313a235cb09657ba564b95feb23f9777" translate="yes" xml:space="preserve">
          <source>Using the Angular Unified Location Service</source>
          <target state="translated">使用Angular统一位置服务</target>
        </trans-unit>
        <trans-unit id="db51f3d7c0cef2b92ca0e1df1396750373f38a91" translate="yes" xml:space="preserve">
          <source>Using the FormBuilder service to generate controls</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3385d7778ed34c624bab677d8b93113048ea3d70" translate="yes" xml:space="preserve">
          <source>Using the Hero class</source>
          <target state="translated">使用英雄类</target>
        </trans-unit>
        <trans-unit id="ff417e4e743dbd8b56962f81a4ee9bfd8fb96040" translate="yes" xml:space="preserve">
          <source>Using the PipeTransform interface</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="78f7880d324d4d6b362277b5293f7d5e81175744" translate="yes" xml:space="preserve">
          <source>Using the RxJS scheduler inside fakeAsync()</source>
          <target state="translated">在fakeAsync()中使用RxJS调度器。</target>
        </trans-unit>
        <trans-unit id="460ffdb79528b543b65d0023597d166efc0e6187" translate="yes" xml:space="preserve">
          <source>Using the Unified Angular Location Service</source>
          <target state="translated">使用统一的Angular位置服务</target>
        </trans-unit>
        <trans-unit id="0eaa4a821d12f646f3302fe044d9cd570a2e3fdd" translate="yes" xml:space="preserve">
          <source>Using the default (&quot;CheckAlways&quot;) change-detection strategy, the change detector goes through the &lt;a href=&quot;glossary#view-tree&quot;&gt;view hierarchy&lt;/a&gt; on each VM turn to check every &lt;a href=&quot;glossary#data-binding&quot;&gt;data-bound property&lt;/a&gt; in the template. In the first phase, it compares the current state of the dependent data with the previous state, and collects changes. In the second phase, it updates the page DOM to reflect any new data values.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9a66563e1975c2187a0773744f035412c7a0c811" translate="yes" xml:space="preserve">
          <source>Using the default value accessor</source>
          <target state="translated">使用默认值访问器</target>
        </trans-unit>
        <trans-unit id="d8d0dd351b925abe0013872e2187d3ac63a5f4b4" translate="yes" xml:space="preserve">
          <source>Using the graphviz optional dependency, you'll have a program &lt;code&gt;dot&lt;/code&gt;, which you can use with &lt;code&gt;bazel &lt;a href=&quot;../api/animations/query&quot;&gt;query&lt;/a&gt;&lt;/code&gt;:</source>
          <target state="translated">使用graphviz可选依赖项，您将拥有一个程序 &lt;code&gt;dot&lt;/code&gt; ，可以将其与 &lt;code&gt;bazel &lt;a href=&quot;../api/animations/query&quot;&gt;query&lt;/a&gt;&lt;/code&gt; 使用：</target>
        </trans-unit>
        <trans-unit id="701a7ae767b31ad4b44a0cd1aae2842c56741ee2" translate="yes" xml:space="preserve">
          <source>Using the key &lt;code&gt;$implicit&lt;/code&gt; in the context object will set its value as default.</source>
          <target state="translated">在上下文对象中使用键 &lt;code&gt;$implicit&lt;/code&gt; 将其值设置为默认值。</target>
        </trans-unit>
        <trans-unit id="97fd999fe0f9f9e0225af291a35e80bbf1a2a5cb" translate="yes" xml:space="preserve">
          <source>Using the template binding syntax, the form control is now registered to the &lt;code&gt;name&lt;/code&gt; input element in the template. The form control and DOM element communicate with each other: the view reflects changes in the model, and the model reflects changes in the view.</source>
          <target state="translated">使用模板绑定语法，现在将表单控件注册到模板中的 &lt;code&gt;name&lt;/code&gt; 输入元素。表单控件和DOM元素相互通信：视图反映了模型中的更改，而模型反映了视图中的更改。</target>
        </trans-unit>
        <trans-unit id="a73267180af548e33b36453222ddbcd0a9cd7a26" translate="yes" xml:space="preserve">
          <source>Using wildcard state with multiple transition states</source>
          <target state="translated">使用具有多个过渡状态的通配符状态</target>
        </trans-unit>
        <trans-unit id="f5248445a88890c526dc548b5736616908228cef" translate="yes" xml:space="preserve">
          <source>Using wildcards with styles</source>
          <target state="translated">使用通配符与样式</target>
        </trans-unit>
        <trans-unit id="713259890f138e39aa90aa5677e5e633bd9c843b" translate="yes" xml:space="preserve">
          <source>Using your browser's developer tools, find the &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; element that corresponds to the &lt;strong&gt;Name&lt;/strong&gt; input box. You can see that the element has multiple CSS classes in addition to &quot;form-control&quot;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3732652b5c565611a56c0e8b0ff175f176f6e899" translate="yes" xml:space="preserve">
          <source>Using your own library in apps</source>
          <target state="translated">在应用程序中使用自己的库</target>
        </trans-unit>
        <trans-unit id="36b3c5921b9dbb0818575770f742474b0a62f5c5" translate="yes" xml:space="preserve">
          <source>Usually there's only one component in this list, the &lt;em&gt;root component&lt;/em&gt; of the application.</source>
          <target state="translated">通常，此列表中只有一个&lt;em&gt;组件&lt;/em&gt;，即应用程序的&lt;em&gt;根组件&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="0a319f5c807a99dec0b4916cda29f6050d992dd8" translate="yes" xml:space="preserve">
          <source>Usually, setting an element property with a &lt;a href=&quot;template-syntax#property-binding&quot;&gt;property binding&lt;/a&gt; is preferable to setting the attribute with a string. However, sometimes there is no element property to bind, so attribute binding is the solution.</source>
          <target state="translated">通常，使用&lt;a href=&quot;template-syntax#property-binding&quot;&gt;属性绑定&lt;/a&gt;设置元素属性优于使用字符串设置属性。但是，有时没有要绑定的元素属性，因此解决方案是属性绑定。</target>
        </trans-unit>
        <trans-unit id="89189507b2a074e98b2e877227343a6e1f27b3ab" translate="yes" xml:space="preserve">
          <source>Utility</source>
          <target state="translated">Utility</target>
        </trans-unit>
        <trans-unit id="0da3a16df4f1cfe00ccae4cb470106238ee3f50d" translate="yes" xml:space="preserve">
          <source>Validate against a maximum of 15</source>
          <target state="translated">最多可验证15个</target>
        </trans-unit>
        <trans-unit id="b626a91102f28dde09ef4feac857a53784030579" translate="yes" xml:space="preserve">
          <source>Validate against a minimum of 3</source>
          <target state="translated">至少验证3个</target>
        </trans-unit>
        <trans-unit id="818e53027490cae519ac5ae2b2578a57bb9dce8d" translate="yes" xml:space="preserve">
          <source>Validate reactive or template-based form input based on the values of two sibling controls,</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5f2d339a1d7ad3e7b42679e5d838c4f7db0e2db1" translate="yes" xml:space="preserve">
          <source>Validate that the field has a minimum of 3 characters</source>
          <target state="translated">验证该字段至少有3个字符。</target>
        </trans-unit>
        <trans-unit id="365af241d710fd38bb8fc6a89e93b90b0d1db454" translate="yes" xml:space="preserve">
          <source>Validate that the field has maximum of 5 characters</source>
          <target state="translated">验证该字段最多只能有5个字符。</target>
        </trans-unit>
        <trans-unit id="0506ee2af8e063c56ec116feb2754facf42c90d0" translate="yes" xml:space="preserve">
          <source>Validate that the field is non-empty</source>
          <target state="translated">验证该字段是否为非空</target>
        </trans-unit>
        <trans-unit id="a3381e343a3617a4bb231a512be6fc59fa34d569" translate="yes" xml:space="preserve">
          <source>Validate that the field matches a valid email pattern</source>
          <target state="translated">验证该字段是否与有效的电子邮件模式相匹配。</target>
        </trans-unit>
        <trans-unit id="403d97dc000145ae46f642bb7353f29a0deade7a" translate="yes" xml:space="preserve">
          <source>Validate that the field only contains letters or spaces</source>
          <target state="translated">验证该字段是否只包含字母或空格。</target>
        </trans-unit>
        <trans-unit id="b1d42fbeab767bb81064a062ffe20d0f69ea59f2" translate="yes" xml:space="preserve">
          <source>Validate that the field value is true</source>
          <target state="translated">验证字段值为真</target>
        </trans-unit>
        <trans-unit id="23b8880400d5deddab1250ea0a0ef87bbdae38db" translate="yes" xml:space="preserve">
          <source>Validate the correctness of user input.</source>
          <target state="translated">验证用户输入的正确性。</target>
        </trans-unit>
        <trans-unit id="629f392f5c719cd17bd7372a7645ad93e4ee77d2" translate="yes" xml:space="preserve">
          <source>Validating form input</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9f6ed5d2f1e694bb85cf23568e42b7be586d5cd2" translate="yes" xml:space="preserve">
          <source>Validating input in reactive forms</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a3e093fcafa07fb1831865ee6052cc74c5d95600" translate="yes" xml:space="preserve">
          <source>Validating input in template-driven forms</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f43a0dc6633797adf7396b6cf232151d02e24338" translate="yes" xml:space="preserve">
          <source>Validation is an integral part of managing any set of forms. Whether you're checking for required fields or querying an external API for an existing username, Angular provides a set of built-in validators as well as the ability to create custom validators.</source>
          <target state="translated">验证是管理任何一组表单不可或缺的一部分。无论是检查必填字段还是查询外部API的现有用户名,Angular都提供了一套内置的验证器,同时也可以创建自定义验证器。</target>
        </trans-unit>
        <trans-unit id="70933a459fa1beb4c3976a98043f612aca8bc6ae" translate="yes" xml:space="preserve">
          <source>Validation is set up through validation functions rather than valdation directives.</source>
          <target state="translated">验证是通过验证函数而不是valdation指令设置的。</target>
        </trans-unit>
        <trans-unit id="c3a95fd1fee387e96c0fc007cd033a377fee988e" translate="yes" xml:space="preserve">
          <source>Validation is set up through validation functions rather than validation directives.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="42b88cee0411df854ab9ab8680b74f241740fc3c" translate="yes" xml:space="preserve">
          <source>ValidationErrors</source>
          <target state="translated">ValidationErrors</target>
        </trans-unit>
        <trans-unit id="6e5b7a60980482ab39ae77b25489457b817517cd" translate="yes" xml:space="preserve">
          <source>Validator</source>
          <target state="translated">Validator</target>
        </trans-unit>
        <trans-unit id="e37939a31ae2f93a355efd2e41823a0ccd0104e8" translate="yes" xml:space="preserve">
          <source>Validator functions</source>
          <target state="translated">验证器功能</target>
        </trans-unit>
        <trans-unit id="47054a0db6bc91d732240bd2a683d17e62e078f1" translate="yes" xml:space="preserve">
          <source>Validator functions can be either synchronous or asynchronous.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0b6adf9f43ac26d416c0fe91c7ae74d404335f9c" translate="yes" xml:space="preserve">
          <source>Validator that performs no operation.</source>
          <target state="translated">验证器,不执行任何操作。</target>
        </trans-unit>
        <trans-unit id="bf6a47ff451c3b9d71ebb71124e408131e842715" translate="yes" xml:space="preserve">
          <source>Validator that requires the control have a non-empty value.</source>
          <target state="translated">要求控件具有非空值的验证器。</target>
        </trans-unit>
        <trans-unit id="9b247107c6248f97a52d72465eaa594dac9f871b" translate="yes" xml:space="preserve">
          <source>Validator that requires the control's value be true. This validator is commonly used for required checkboxes.</source>
          <target state="translated">验证器,要求控件的值为真。这个验证器通常用于必填的复选框。</target>
        </trans-unit>
        <trans-unit id="2ae1c5182294db9a183f7aa482d9d8a206c1d386" translate="yes" xml:space="preserve">
          <source>Validator that requires the control's value pass an email validation test.</source>
          <target state="translated">验证器,要求控件的值通过电子邮件验证测试。</target>
        </trans-unit>
        <trans-unit id="0106b5809c999beadaacdf16e65d183947be2d35" translate="yes" xml:space="preserve">
          <source>Validator that requires the control's value to be greater than or equal to the provided number. The validator exists only as a function and not as a directive.</source>
          <target state="translated">验证器,要求控件的值大于或等于提供的数字。该验证器只作为一个函数而不是指令存在。</target>
        </trans-unit>
        <trans-unit id="162dfec38e764abc2921d5b06f86d1bcbeadf02b" translate="yes" xml:space="preserve">
          <source>Validator that requires the control's value to be less than or equal to the provided number. The validator exists only as a function and not as a directive.</source>
          <target state="translated">验证器,要求控件的值小于或等于提供的数字。该验证器只作为一个函数而不是指令存在。</target>
        </trans-unit>
        <trans-unit id="52c39a07c7e7121efa3eaeb3fbe77b7575251296" translate="yes" xml:space="preserve">
          <source>Validator that requires the control's value to match a regex pattern. This validator is also provided by default if you use the HTML5 &lt;code&gt;&lt;a href=&quot;patternvalidator&quot;&gt;pattern&lt;/a&gt;&lt;/code&gt; attribute.</source>
          <target state="translated">要求控件值与正则表达式模式匹配的验证器。如果您使用HTML5 &lt;code&gt;&lt;a href=&quot;patternvalidator&quot;&gt;pattern&lt;/a&gt;&lt;/code&gt; 属性，则默认情况下也会提供此验证器。</target>
        </trans-unit>
        <trans-unit id="76256d2b6665f1a3f3640f2890572f05710a20d7" translate="yes" xml:space="preserve">
          <source>Validator that requires the length of the control's value to be greater than or equal to the provided minimum length. This validator is also provided by default if you use the the HTML5 &lt;code&gt;&lt;a href=&quot;minlengthvalidator&quot;&gt;minlength&lt;/a&gt;&lt;/code&gt; attribute.</source>
          <target state="translated">验证程序，要求控件值的长度大于或等于提供的最小长度。如果您使用HTML5 &lt;code&gt;&lt;a href=&quot;minlengthvalidator&quot;&gt;minlength&lt;/a&gt;&lt;/code&gt; 属性，则默认情况下也会提供此验证器。</target>
        </trans-unit>
        <trans-unit id="4a0867d5adea8f066810bd656c7ccd470cc1ce76" translate="yes" xml:space="preserve">
          <source>Validator that requires the length of the control's value to be greater than or equal to the provided minimum length. This validator is also provided by default if you use the the HTML5 &lt;code&gt;&lt;a href=&quot;minlengthvalidator&quot;&gt;minlength&lt;/a&gt;&lt;/code&gt; attribute. Note that the &lt;code&gt;minLength&lt;/code&gt; validator is intended to be used only for types that have a numeric &lt;code&gt;length&lt;/code&gt; property, such as strings or arrays. The &lt;code&gt;minLength&lt;/code&gt; validator logic is also not invoked for values when their &lt;code&gt;length&lt;/code&gt; property is 0 (for example in case of an empty string or an empty array), to support optional controls. You can use the standard &lt;code&gt;required&lt;/code&gt; validator if empty values should not be considered valid.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f9d855798656a116c1182141d94fad28454e4e72" translate="yes" xml:space="preserve">
          <source>Validator that requires the length of the control's value to be less than or equal to the provided maximum length. This validator is also provided by default if you use the the HTML5 &lt;code&gt;&lt;a href=&quot;maxlengthvalidator&quot;&gt;maxlength&lt;/a&gt;&lt;/code&gt; attribute.</source>
          <target state="translated">验证程序，要求控件值的长度小于或等于提供的最大长度。如果您使用HTML5 &lt;code&gt;&lt;a href=&quot;maxlengthvalidator&quot;&gt;maxlength&lt;/a&gt;&lt;/code&gt; 属性，则默认情况下也会提供此验证器。</target>
        </trans-unit>
        <trans-unit id="487df83e2693925e041f945b95d30190bfa4f832" translate="yes" xml:space="preserve">
          <source>Validator that requires the length of the control's value to be less than or equal to the provided maximum length. This validator is also provided by default if you use the the HTML5 &lt;code&gt;&lt;a href=&quot;maxlengthvalidator&quot;&gt;maxlength&lt;/a&gt;&lt;/code&gt; attribute. Note that the &lt;code&gt;maxLength&lt;/code&gt; validator is intended to be used only for types that have a numeric &lt;code&gt;length&lt;/code&gt; property, such as strings or arrays.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d29f76e695670cc31b55309fdad4de99247e6232" translate="yes" xml:space="preserve">
          <source>ValidatorFn</source>
          <target state="translated">ValidatorFn</target>
        </trans-unit>
        <trans-unit id="762f13c2259b5fbab6d8f1bdbab081fc48bc558f" translate="yes" xml:space="preserve">
          <source>Validators</source>
          <target state="translated">Validators</target>
        </trans-unit>
        <trans-unit id="8dce170de238b1feda2ecd9674ea3ca0d068fbcb" translate="yes" xml:space="preserve">
          <source>Value</source>
          <target state="translated">Value</target>
        </trans-unit>
        <trans-unit id="d2f1e7eaab356f70c51f6149188803cfa1f41bd2" translate="yes" xml:space="preserve">
          <source>Value providers</source>
          <target state="translated">价值提供者</target>
        </trans-unit>
        <trans-unit id="20f9ff3e7294e59511661cc02c6349a3f6b1ebb7" translate="yes" xml:space="preserve">
          <source>Value providers: &lt;code&gt;&lt;a href=&quot;../api/core/valuesansprovider#useValue&quot;&gt;useValue&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">价值提供者： &lt;code&gt;&lt;a href=&quot;../api/core/valuesansprovider#useValue&quot;&gt;useValue&lt;/a&gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="25f9d5bb9c9dd4305a271cfc44d983bba614126f" translate="yes" xml:space="preserve">
          <source>Value providers: &lt;code&gt;useValue&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8fe3282b947225da293afc6b4fd0512f85bae210" translate="yes" xml:space="preserve">
          <source>ValueProvider</source>
          <target state="translated">ValueProvider</target>
        </trans-unit>
        <trans-unit id="e16f3c18243dc608a013837c5a79a4d00bdb7bc7" translate="yes" xml:space="preserve">
          <source>ValueSansProvider</source>
          <target state="translated">ValueSansProvider</target>
        </trans-unit>
        <trans-unit id="79e81c362d5847056b9ba6e53d829959e1399f27" translate="yes" xml:space="preserve">
          <source>Verifies that component/directive bindings are assignable to their &lt;code&gt;@&lt;a href=&quot;../api/core/input&quot;&gt;Input&lt;/a&gt;()&lt;/code&gt;s.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b9d5ce313e72eaec1313ad42fb993ad994a915f5" translate="yes" xml:space="preserve">
          <source>Verify lazy loading</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5d5c6b67c9db0e498e790e883c5de52f385275d8" translate="yes" xml:space="preserve">
          <source>Verify that no unmatched requests are outstanding.</source>
          <target state="translated">核实是否有未匹配的请求。</target>
        </trans-unit>
        <trans-unit id="433043efcea8c296c2c86998af2610b61eb1bd31" translate="yes" xml:space="preserve">
          <source>Verify that the components and &lt;code&gt;NgModules&lt;/code&gt; that you want to be lazy loaded are only imported in lazy modules. Anything that you import outside lazy modules can end up in the main bundle. See more details in the original issue &lt;a href=&quot;https://github.com/angular/angular-cli/issues/16146#issuecomment-557559287&quot;&gt;here&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6b66631d951d23c25649362aeacc4bfae2223488" translate="yes" xml:space="preserve">
          <source>Verify that your new application runs as expected by running the &lt;code&gt;ng serve&lt;/code&gt; command.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2da600bf9404843107a9531694f654e5662959e0" translate="yes" xml:space="preserve">
          <source>Version</source>
          <target state="translated">Version</target>
        </trans-unit>
        <trans-unit id="81c258b63dad449560a58fedcf568dc6b8a49576" translate="yes" xml:space="preserve">
          <source>Version from which to migrate from. Only available with a single package being updated, and only on migration only.</source>
          <target state="translated">要从哪个版本迁移。只有在更新单个软件包时才可使用,并且只在迁移时使用。</target>
        </trans-unit>
        <trans-unit id="fc66ec0d0963a90667a2ecf160141fe6e6b47961" translate="yes" xml:space="preserve">
          <source>Version up to which to apply migrations. Only available with a single package being updated, and only on migrations only. Requires from to be specified. Default to the installed version detected.</source>
          <target state="translated">应用迁移的最高版本。只有在更新单个软件包时才可用,并且只适用于迁移。需要指定from。默认为检测到的安装版本。</target>
        </trans-unit>
        <trans-unit id="ad05dbfb7d147c73816ab1fecdddddf16429566f" translate="yes" xml:space="preserve">
          <source>Versioning, release, support, and deprecation practices: &lt;a href=&quot;releases&quot;&gt;Angular versioning and releases&lt;/a&gt;</source>
          <target state="translated">版本控制，发行，支持和弃用实践：&lt;a href=&quot;releases&quot;&gt;角度版本控制和发行&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="d61d71eba7579e925f6872e472a203aa245cb90c" translate="yes" xml:space="preserve">
          <source>View Engine</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="40e309254a1c09b7db3fd4b9af2fa9ecaa53129a" translate="yes" xml:space="preserve">
          <source>View encapsulation</source>
          <target state="translated">查看封装</target>
        </trans-unit>
        <trans-unit id="63a105276cb081db80a13c002ab391c84407745d" translate="yes" xml:space="preserve">
          <source>View hierarchies can be loaded and unloaded dynamically as the user navigates through the application, typically under the control of a &lt;a href=&quot;glossary#router&quot;&gt;router&lt;/a&gt;.</source>
          <target state="translated">当用户在应用程序中导航时，通常可以在&lt;a href=&quot;glossary#router&quot;&gt;路由器&lt;/a&gt;的控制下动态地加载和卸载视图层次结构。</target>
        </trans-unit>
        <trans-unit id="ced146390f04d6176a1c9baafe3663557cd5bb9c" translate="yes" xml:space="preserve">
          <source>View queries are set before the &lt;code&gt;ngAfterViewInit&lt;/code&gt; callback is called.</source>
          <target state="translated">视图查询是在调用 &lt;code&gt;ngAfterViewInit&lt;/code&gt; 回调之前设置的。</target>
        </trans-unit>
        <trans-unit id="ebeb1f94b601a60ee19af9034a126d23b7c58415" translate="yes" xml:space="preserve">
          <source>View your application again. As you click one of the buttons, the style for that button updates automatically, identifying the active component to the user. By adding the &lt;code&gt;&lt;a href=&quot;../api/router/routerlinkactive&quot;&gt;routerLinkActive&lt;/a&gt;&lt;/code&gt; directive, you inform your application to apply a specific CSS class to the active route. In this tutorial, that CSS class is &lt;code&gt;activebutton&lt;/code&gt;, but you could use any class that you want.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="308ca7e0a726c37fbdc046355cce21f2ff308ab7" translate="yes" xml:space="preserve">
          <source>View your updated application in your browser. You should see only the application title. To view the &lt;code&gt;crisis-list&lt;/code&gt; component, add &lt;code&gt;crisis-list&lt;/code&gt; to the end of the path in your browser's address bar. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="70b22bdcbbd499b2cd172768582a04965d178285" translate="yes" xml:space="preserve">
          <source>ViewChild</source>
          <target state="translated">ViewChild</target>
        </trans-unit>
        <trans-unit id="731e75cc493e2b3f0e1520064261281cd209667b" translate="yes" xml:space="preserve">
          <source>ViewChildren</source>
          <target state="translated">ViewChildren</target>
        </trans-unit>
        <trans-unit id="c0b27cd972ffd1977642761def1f7be9a42f5afa" translate="yes" xml:space="preserve">
          <source>ViewContainerRef</source>
          <target state="translated">ViewContainerRef</target>
        </trans-unit>
        <trans-unit id="e5240a7ff11b6693e9588a24feef5960dd5495b8" translate="yes" xml:space="preserve">
          <source>ViewEncapsulation</source>
          <target state="translated">ViewEncapsulation</target>
        </trans-unit>
        <trans-unit id="bb27c41c6081cf7c9006a0c2e01017e596206e38" translate="yes" xml:space="preserve">
          <source>ViewRef</source>
          <target state="translated">ViewRef</target>
        </trans-unit>
        <trans-unit id="85787f7a1fbf5317a97c6316e18e928d4f590507" translate="yes" xml:space="preserve">
          <source>ViewportScroller</source>
          <target state="translated">ViewportScroller</target>
        </trans-unit>
        <trans-unit id="aa8824d0dbe6def19d33585bef0db1c629139af5" translate="yes" xml:space="preserve">
          <source>Views are typically arranged hierarchically, allowing you to modify or show and hide entire UI sections or pages as a unit. The template immediately associated with a component defines that component's &lt;em&gt;host view&lt;/em&gt;. The component can also define a &lt;em&gt;view hierarchy&lt;/em&gt;, which contains &lt;em&gt;embedded views&lt;/em&gt;, hosted by other components.</source>
          <target state="translated">视图通常按层次结构排列，使您可以作为一个单元修改或显示和隐藏整个UI部分或页面。立即与组件关联的模板定义了该组件的&lt;em&gt;宿主视图&lt;/em&gt;。该组件还可以定义&lt;em&gt;视图层次结构&lt;/em&gt;，其中包含由其他组件托管的&lt;em&gt;嵌入式视图&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="f1386eabb408835f08cb05d409256f611a521fdc" translate="yes" xml:space="preserve">
          <source>Visibility decorators influence where the search for the injection token begins and ends in the logic tree. To do this, place visibility decorators at the point of injection, that is, the &lt;code&gt;constructor()&lt;/code&gt;, rather than at a point of declaration.</source>
          <target state="translated">可见性装饰器影响对注入令牌的搜索在逻辑树中开始和结束的位置。为此，将可见性装饰器放置在注入点，即 &lt;code&gt;constructor()&lt;/code&gt; ，而不是在声明点。</target>
        </trans-unit>
        <trans-unit id="01354e09c47bfba10344c316d3973dd8d8c0c124" translate="yes" xml:space="preserve">
          <source>Visibility of provided tokens</source>
          <target state="translated">所提供代币的可见性</target>
        </trans-unit>
        <trans-unit id="423f1f3d80c4d824ca917e13649a5c584a13ec87" translate="yes" xml:space="preserve">
          <source>Visual Studio Code</source>
          <target state="translated">Visual Studio代码</target>
        </trans-unit>
        <trans-unit id="5bd87aebeff1926fd4da28c306978ef7e958002f" translate="yes" xml:space="preserve">
          <source>Visual Studio now looks first for external tools in the current workspace and if it doesn't find them, it looks in the global path. If Visual Studio doesn't find them in either location, it will use its own versions of the tools.</source>
          <target state="translated">Visual Studio现在首先在当前工作区中查找外部工具,如果找不到,就在全局路径中查找。如果Visual Studio在这两个位置都没有找到它们,它将使用自己版本的工具。</target>
        </trans-unit>
        <trans-unit id="cf912685bcd3b8695b78564cf9cc45a83ef11075" translate="yes" xml:space="preserve">
          <source>Visual Studio ships with IIS Express, which has the rewrite module baked in. However, if you're using regular IIS you'll have to install the rewrite module.</source>
          <target state="translated">Visual Studio在IIS Express中内置了重写模块,如果你使用普通的IIS,你必须安装重写模块。然而,如果你使用普通的IIS,你必须安装重写模块。</target>
        </trans-unit>
        <trans-unit id="1a00dd5a3fe4b1a6a174763f1ccc3255c559d786" translate="yes" xml:space="preserve">
          <source>Visualize a &lt;em&gt;banana in a box&lt;/em&gt; to remember that the parentheses go &lt;em&gt;inside&lt;/em&gt; the brackets.</source>
          <target state="translated">可视化&lt;em&gt;框中&lt;/em&gt;的&lt;em&gt;香蕉，&lt;/em&gt;以记住括号&lt;em&gt;放在&lt;/em&gt;括号内。</target>
        </trans-unit>
        <trans-unit id="ae20d0dcd36854dd9c33ee0729b11a0b952fd48f" translate="yes" xml:space="preserve">
          <source>Void state</source>
          <target state="translated">虚无状态</target>
        </trans-unit>
        <trans-unit id="363d01361c13e93cb5c5849c62cc7a9e5fb2a36f" translate="yes" xml:space="preserve">
          <source>Voil&amp;agrave;! &lt;code&gt;['/crisis-center']&lt;/code&gt;.</source>
          <target state="translated">瞧！ &lt;code&gt;['/crisis-center']&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="e2415cb7f63df0c9de23362326ad3c37a9adfc96" translate="yes" xml:space="preserve">
          <source>W</source>
          <target state="translated">W</target>
        </trans-unit>
        <trans-unit id="7d863250597b39573e59f2dd5bbdb466dcefa3eb" translate="yes" xml:space="preserve">
          <source>W3C - Web Accessibility Initiative</source>
          <target state="translated">W3C-网络无障碍倡议</target>
        </trans-unit>
        <trans-unit id="a8973c4ad76d66d81020d94041af9480559aca02" translate="yes" xml:space="preserve">
          <source>WARNING: this pipe uses the Internationalization API which is not yet available in all browsers and may require a polyfill. See &lt;a href=&quot;../../guide/browser-support&quot;&gt;Browser Support&lt;/a&gt; for details.</source>
          <target state="translated">警告：此管道使用的国际化API尚未在所有浏览器中提供，并且可能需要使用polyfill。有关详细信息，请参见&lt;a href=&quot;../../guide/browser-support&quot;&gt;浏览器支持&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="c07ec44ed7c7c12105929adc7842d7938752526a" translate="yes" xml:space="preserve">
          <source>WARNINGS:</source>
          <target state="translated">WARNINGS:</target>
        </trans-unit>
        <trans-unit id="6c1d5662bd95a1bc248614055dd45cd2c7c74fae" translate="yes" xml:space="preserve">
          <source>WORKER_APP_LOCATION_PROVIDERS</source>
          <target state="translated">WORKER_APP_LOCATION_PROVIDERS</target>
        </trans-unit>
        <trans-unit id="82986323ee9a26fe8f93325355793336b70d0475" translate="yes" xml:space="preserve">
          <source>WORKER_UI_LOCATION_PROVIDERS</source>
          <target state="translated">WORKER_UI_LOCATION_PROVIDERS</target>
        </trans-unit>
        <trans-unit id="fc298440e65c9e288e74a2aa8c9b6a8c4ae86157" translate="yes" xml:space="preserve">
          <source>WORKSPACE CONFIG FILES</source>
          <target state="translated">工作区配置文件</target>
        </trans-unit>
        <trans-unit id="7f50a90ea501723c024e4ce68214dc33c2125cb6" translate="yes" xml:space="preserve">
          <source>Wait before updating the view</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9ecaf9bcefceb097a640b14a0a1ef2fe6fb7fab4" translate="yes" xml:space="preserve">
          <source>Wait for 100ms and then run for 200ms: &lt;code&gt;'0.2s 100ms'&lt;/code&gt;</source>
          <target state="translated">等待100毫秒，然后运行 &lt;code&gt;'0.2s 100ms'&lt;/code&gt; ：&amp;ldquo; 0.2秒100毫秒&amp;rdquo;</target>
        </trans-unit>
        <trans-unit id="7bc78e562cbe874c8773d19cf4be97f0463bbc5e" translate="yes" xml:space="preserve">
          <source>Wait for 100ms, run for 200ms. Use a deceleration curve to start out fast and slowly decelerate to a resting point: &lt;code&gt;'0.2s 100ms ease-out'&lt;/code&gt;</source>
          <target state="translated">等待100毫秒，运行200毫秒。使用减速曲线快速开始并缓慢减速至静止点： &lt;code&gt;'0.2s 100ms ease-out'&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="5b5586b3bb95ca7c31cb3c22819d08ba3bebb1c3" translate="yes" xml:space="preserve">
          <source>Wait for the application to be stable with a timeout. If the timeout is reached before that happens, the callback receives a list of the macro tasks that were pending, otherwise null.</source>
          <target state="translated">等待应用程序稳定,并出现超时。如果在超时之前达到了超时,回调就会收到一个待处理的宏任务列表,否则为空。</target>
        </trans-unit>
        <trans-unit id="5397416bedc6dd6eb062cf6b283a2ffe2c518c96" translate="yes" xml:space="preserve">
          <source>Warning (default): show a 'Missing translation' warning in the console or shell.</source>
          <target state="translated">Warning(默认):在控制台或shell中显示 &quot;Missing translation &quot;警告。</target>
        </trans-unit>
        <trans-unit id="05c345e4ec19aba46a5943dc0f547f62c9342ec1" translate="yes" xml:space="preserve">
          <source>Warning (default): show a warning in the console and/or shell.</source>
          <target state="translated">Warning(默认):在控制台和/或shell中显示一个警告。</target>
        </trans-unit>
        <trans-unit id="88b85d9988679e4293fa4ac6a48242d90d816934" translate="yes" xml:space="preserve">
          <source>Watch mode</source>
          <target state="translated">观看模式</target>
        </trans-unit>
        <trans-unit id="49da60e0fd25a9b16323dc060a6723765664b496" translate="yes" xml:space="preserve">
          <source>Watching for &lt;code&gt;@&lt;a href=&quot;../api/core/input&quot;&gt;Input&lt;/a&gt;()&lt;/code&gt; changes</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="049327f20280160e2798ffbfea9f0196b9c52a75" translate="yes" xml:space="preserve">
          <source>We also share with you the desire for Angular to keep evolving. We strive to ensure that the foundation on top of which you are building is continuously improving and enabling you to stay up-to-date with the rest of the web ecosystem and your user needs.</source>
          <target state="translated">我们也和您一样,希望Angular能够不断发展。我们努力确保您正在构建的基础不断改进,并使您能够与其他网络生态系统和用户需求保持同步。</target>
        </trans-unit>
        <trans-unit id="8ec69b5a41d9bbdbb14b7cb006054942a18c5599" translate="yes" xml:space="preserve">
          <source>We are going to design and implement a plan to make Zone.js optional from Angular applications. This way, we will simplify the framework, improve debugging, and reduce application bundle size. Additionally, this will allow us to take advantage of native async/await syntax, which currently Zone.js does not support.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="367ba1138b6b56e08c59f2f66d2ac44e4a858807" translate="yes" xml:space="preserve">
          <source>We are working on custom elements that can be used by web apps built on other frameworks. A minimal, self-contained version of the Angular framework will be injected as a service to support the component's change-detection and data-binding functionality. For more about the direction of development, check out this &lt;a href=&quot;https://www.youtube.com/watch?v=Z1gLFPLVJjY&amp;amp;t=4s&quot;&gt;video presentation&lt;/a&gt;.</source>
          <target state="translated">我们正在研究可在其他框架上构建的Web应用程序使用的自定义元素。Angular框架的一个最小的独立版本将作为一项服务注入，以支持组件的更改检测和数据绑定功能。有关发展方向的更多信息，请查看此&lt;a href=&quot;https://www.youtube.com/watch?v=Z1gLFPLVJjY&amp;amp;t=4s&quot;&gt;视频演示&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="27a7cc470628aa2d92ef4427542447f20ef42c23" translate="yes" xml:space="preserve">
          <source>We are working on development tooling for Angular that will provide utilities for debugging and performance profiling. This project aims to help developers understand the component structure and the change detection in an Angular application.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e6a5c87a2d5a877756756b0475d44bae01c02874" translate="yes" xml:space="preserve">
          <source>We ask all contributing authors to adhere to three aspects of style:</source>
          <target state="translated">我们要求所有投稿作者坚持三个方面的风格。</target>
        </trans-unit>
        <trans-unit id="ec11a33a55c211bc5d98f96df3c7c4a5d0617287" translate="yes" xml:space="preserve">
          <source>We can delay updating the form validity by changing the &lt;code&gt;updateOn&lt;/code&gt; property from &lt;code&gt;change&lt;/code&gt; (default) to &lt;code&gt;submit&lt;/code&gt; or &lt;code&gt;blur&lt;/code&gt;.</source>
          <target state="translated">我们可以推迟通过改变更新的形式有效性 &lt;code&gt;updateOn&lt;/code&gt; 从属性 &lt;code&gt;change&lt;/code&gt; （默认值）， &lt;code&gt;submit&lt;/code&gt; 或 &lt;code&gt;blur&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="fd8e866ad285f0dc9892217e61259175ebd3fd46" translate="yes" xml:space="preserve">
          <source>We can provide the following schema for type validation of these values.</source>
          <target state="translated">我们可以为这些值的类型验证提供以下模式。</target>
        </trans-unit>
        <trans-unit id="2931f0896f596ff16cc12f410c35306a64670a62" translate="yes" xml:space="preserve">
          <source>We can publish the builder to npm (see &lt;a href=&quot;creating-libraries#publishing-your-library&quot;&gt;Publishing your Library&lt;/a&gt;), and install it using the following command:</source>
          <target state="translated">我们可以将构建器发布到npm（请参阅&lt;a href=&quot;creating-libraries#publishing-your-library&quot;&gt;发布您的库&lt;/a&gt;），并使用以下命令进行安装：</target>
        </trans-unit>
        <trans-unit id="ee14b2f048236515de09f569a5537a505db84ddc" translate="yes" xml:space="preserve">
          <source>We can retrieve a Logger instance from the context.</source>
          <target state="translated">我们可以从上下文中检索一个Logger实例。</target>
        </trans-unit>
        <trans-unit id="38e9796d2bd43c6954316dd93675d676d438006d" translate="yes" xml:space="preserve">
          <source>We changed the default value for &lt;code&gt;relativeLinkResolution&lt;/code&gt; from &lt;code&gt;'legacy'&lt;/code&gt; to &lt;code&gt;'corrected'&lt;/code&gt; so that new applications are automatically opted-in to the corrected behavior from &lt;a href=&quot;https://github.com/angular/angular/pull/22394&quot;&gt;PR 22394&lt;/a&gt;. Applications which use the current default are updated by a migration to specify &lt;code&gt;'legacy'&lt;/code&gt; to ensure the current behavior is maintained when the default is updated. See &lt;a href=&quot;https://github.com/angular/angular/pull/25609&quot;&gt;PR 25609&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ed979d867401216782d14206d29678b5df7afa90" translate="yes" xml:space="preserve">
          <source>We follow the deprecation policy described here, so you have time to update your apps to the latest APIs and best practices.</source>
          <target state="translated">我们遵循这里描述的弃用政策,因此您有时间更新您的应用程序以适应最新的API和最佳实践。</target>
        </trans-unit>
        <trans-unit id="72290b6faa8277fff5d3a8e9271b1ec87738226e" translate="yes" xml:space="preserve">
          <source>We have a set of benchmarks that we run against every code change to ensure Angular aligns with our performance standards. To ensure the framework&amp;rsquo;s runtime does not regress after a code change, we need to refine some of the existing infrastructure the dashboards step on.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e9b76a51b7a99c79ff1cc0f3f2bebb68cb9f17f8" translate="yes" xml:space="preserve">
          <source>We have discussed the basic HTTP functionality in &lt;code&gt;@angular/common/&lt;a href=&quot;../api/common/http&quot;&gt;http&lt;/a&gt;&lt;/code&gt;, but sometimes you need to do more than make simple requests and get data back.</source>
          <target state="translated">我们已经在 &lt;code&gt;@angular/common/&lt;a href=&quot;../api/common/http&quot;&gt;http&lt;/a&gt;&lt;/code&gt; 讨论了基本的HTTP功能，但是有时您需要做的不仅仅是发出简单的请求并取回数据。</target>
        </trans-unit>
        <trans-unit id="66c4f344bcf7591de9ea36041b341b78c75479da" translate="yes" xml:space="preserve">
          <source>We let you preview what's coming by providing &quot;Next&quot; and Release Candidates (&lt;code&gt;rc&lt;/code&gt;) pre-releases for each major and minor release:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f3da62ac46ab52ae87815d94ca4d56bf01a862f1" translate="yes" xml:space="preserve">
          <source>We let you preview what's coming by providing Beta releases and Release Candidates (&lt;code&gt;rc&lt;/code&gt;) for each major and minor release:</source>
          <target state="translated">我们通过为每个主要和次要版本提供Beta版本和候选版本（ &lt;code&gt;rc&lt;/code&gt; ），让您预览即将发布的内容：</target>
        </trans-unit>
        <trans-unit id="b91a3f18bcf41bca5f95939f116cf6e3d59216ba" translate="yes" xml:space="preserve">
          <source>We meet this goal by displaying code snippets that are derived directly from standalone code samples, written specifically for these guide pages.</source>
          <target state="translated">我们通过显示直接从独立的代码示例中衍生出来的代码片段来实现这一目标,这些代码片段是专门为这些指导页面编写的。</target>
        </trans-unit>
        <trans-unit id="3137f17ffcf69ea0fc771d5e9d7c10273ff1f4f9" translate="yes" xml:space="preserve">
          <source>We must create a &lt;code&gt;&lt;a href=&quot;../../core/directive&quot;&gt;Directive&lt;/a&gt;&lt;/code&gt; that will make this AngularJS component available inside Angular templates.</source>
          <target state="translated">我们必须创建一个 &lt;code&gt;&lt;a href=&quot;../../core/directive&quot;&gt;Directive&lt;/a&gt;&lt;/code&gt; ，使该AngularJS组件在Angular模板中可用。</target>
        </trans-unit>
        <trans-unit id="cf1fc25d3116f8dea78230e2816ca8675a89a9fe" translate="yes" xml:space="preserve">
          <source>We must create an AngularJS &lt;a href=&quot;https://docs.angularjs.org/guide/directive&quot;&gt;directive&lt;/a&gt; that will make this Angular component available inside AngularJS templates. The &lt;code&gt;&lt;a href=&quot;downgradecomponent&quot;&gt;downgradeComponent&lt;/a&gt;()&lt;/code&gt; function returns a factory function that we can use to define the AngularJS directive that wraps the &quot;downgraded&quot; component.</source>
          <target state="translated">我们必须创建一个AngularJS &lt;a href=&quot;https://docs.angularjs.org/guide/directive&quot;&gt;指令&lt;/a&gt;，使该Angular组件在AngularJS模板中可用。该 &lt;code&gt;&lt;a href=&quot;downgradecomponent&quot;&gt;downgradeComponent&lt;/a&gt;()&lt;/code&gt; 函数返回一个工厂函数，我们可以用它来定义AngularJS指令，包装了&amp;ldquo;降级&amp;rdquo;的组成部分。</target>
        </trans-unit>
        <trans-unit id="4f0b3a7bbc11be9ec5f1d0d0772101f30b20afa5" translate="yes" xml:space="preserve">
          <source>We need to update the &lt;code&gt;angular.json&lt;/code&gt; file to add a target for this builder to the &quot;architect&quot; section of our new project.</source>
          <target state="translated">我们需要更新 &lt;code&gt;angular.json&lt;/code&gt; 文件，以将该构建器的目标添加到新项目的&amp;ldquo;建筑师&amp;rdquo;部分。</target>
        </trans-unit>
        <trans-unit id="7f07def30e46276be4e20aec308dade0a77d9924" translate="yes" xml:space="preserve">
          <source>We now have the framework in place for creating the code that actually modifies the user's application to set it up for the service defined in your library.</source>
          <target state="translated">我们现在有了一个框架,可以创建代码,实际修改用户的应用程序,为你的库中定义的服务进行设置。</target>
        </trans-unit>
        <trans-unit id="fdfba83206c23f3c099770c464e3ad4b48b0dbb9" translate="yes" xml:space="preserve">
          <source>We recognize that you need stability from the Angular framework. Stability ensures that reusable components and libraries, tutorials, tools, and learned practices don't become obsolete unexpectedly. Stability is essential for the ecosystem around Angular to thrive.</source>
          <target state="translated">我们认识到,你需要Angular框架的稳定性。稳定性可以确保可重用的组件和库、教程、工具和学习实践不会意外地过时。稳定性对于围绕Angular的生态系统的发展至关重要。</target>
        </trans-unit>
        <trans-unit id="81f1aefebd400f644100c7e391b9ffa63bfd67c9" translate="yes" xml:space="preserve">
          <source>We recommend that you always update to the latest patch version, as it contains fixes we released since the initial major release. For example, use the following command to take the latest 10.x.x version and use that to update.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="77d09fc97147b2ef90d76928341a69ca7bde154c" translate="yes" xml:space="preserve">
          <source>We recommend that you always update to the latest patch version, as it contains fixes we released since the initial major release. For example, use the following command to take the latest 7.x.x version and use that to update.</source>
          <target state="translated">我们建议您总是更新到最新的补丁版本,因为它包含了我们在最初的主要版本发布后所发布的修正。例如,使用以下命令获取最新的7.x.x版本,并使用该版本进行更新。</target>
        </trans-unit>
        <trans-unit id="775687186195b9a3e24a2f53506fea1a527d8ea0" translate="yes" xml:space="preserve">
          <source>We recommend that you do not force an update of all dependencies by default. Try updating specific dependencies first.</source>
          <target state="translated">我们建议你不要强制更新所有的依赖关系。请先尝试更新特定的依赖关系。</target>
        </trans-unit>
        <trans-unit id="80be1bb38ec0ca675a20185b65c4dba9e98272bb" translate="yes" xml:space="preserve">
          <source>We recommend that you use integration tests to test Architect builders. You can use unit tests to validate the logic that the builder executes.</source>
          <target state="translated">我们建议你使用集成测试来测试Architect构建器。你可以使用单元测试来验证构建器执行的逻辑。</target>
        </trans-unit>
        <trans-unit id="310cfdcf5af5f6be333c6538a69706c32e03c366" translate="yes" xml:space="preserve">
          <source>We want the user to click a product name to display the details for that product.</source>
          <target state="translated">我们希望用户点击一个产品名称来显示该产品的详细信息。</target>
        </trans-unit>
        <trans-unit id="694477aae6323c7aef0646862fb1b7d445cc1fd9" translate="yes" xml:space="preserve">
          <source>We want to consolidate release management tooling between Angular's multiple GitHub repositories (&lt;a href=&quot;https://github.com/angular/angular&quot;&gt;angular/angular&lt;/a&gt;, &lt;a href=&quot;https://github.com/angular/angular-cli&quot;&gt;angular/angular-cli&lt;/a&gt;, and &lt;a href=&quot;https://github.com/angular/components&quot;&gt;angular/components&lt;/a&gt;). This effort will allow us to reuse infrastructure, unify and simplify processes, and improve our release process's reliability.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c281f6d14cab33a840c42011f9bdf5c0cf84d8ff" translate="yes" xml:space="preserve">
          <source>We want to ensure Angular developers are taking advantage of the latest capabilities of RxJS and have a smooth transition to the next major releases of the framework. For this purpose, we will explore and document the scope of the changes in v7 and beyond of RxJS and plan an update strategy.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="963319a4bbeb2a266dbe49a9dbba7d16c6c97bad" translate="yes" xml:space="preserve">
          <source>We want to hear from you. &lt;a href=&quot;https://github.com/angular/angular/issues/new/choose&quot;&gt;Report problems or submit suggestions for future docs.&lt;/a&gt;</source>
          <target state="translated">我们希望收到你的来信。&lt;a href=&quot;https://github.com/angular/angular/issues/new/choose&quot;&gt;报告问题或为将来的文档提出建议。&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="cdfa864a5f131ff38ec02671e103f454912d4e8f" translate="yes" xml:space="preserve">
          <source>We want to hear from you. &lt;a href=&quot;https://github.com/angular/angular/issues/new/choose&quot;&gt;Report problems or submit suggestions for future docs&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="75a1ee0c723a64b8d89f14da0c05fdaf2316016f" translate="yes" xml:space="preserve">
          <source>We want to unify commit message requirements and conformance across Angular repositories (&lt;a href=&quot;https://github.com/angular/angular&quot;&gt;angular/angular&lt;/a&gt;, &lt;a href=&quot;https://github.com/angular/components&quot;&gt;angular/components&lt;/a&gt;, &lt;a href=&quot;https://github.com/angular/angular-cli&quot;&gt;angular/angular-cli&lt;/a&gt;) to bring consistency to our development process and reuse infrastructure tooling.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e5da26ddb38c8d5f891d4d9115d7b2c0845ef29a" translate="yes" xml:space="preserve">
          <source>We will redefine the user learning journeys and refresh the introductory documentation. We will clearly state the benefits of Angular, how to explore its capabilities and provide guidance so developers can become proficient with the framework in as little time as possible.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="03e48ed186e1bd1b4af5363a6a8f174374449a43" translate="yes" xml:space="preserve">
          <source>We will work on implementing stricter type checking for reactive forms. This way, we will allow developers to catch more issues during development time, enable better text editor and IDE support, and improve the type checking for reactive forms.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="08ccad7003f1e35885c0a7207dc4655e386f189a" translate="yes" xml:space="preserve">
          <source>We work hard to minimize the number of breaking changes and to provide migration tools when possible.</source>
          <target state="translated">我们努力将中断更改的次数降到最低,并尽可能提供迁移工具。</target>
        </trans-unit>
        <trans-unit id="80ef513b5b64fa187df26f2b88bdd0df53b470f9" translate="yes" xml:space="preserve">
          <source>We work toward a regular schedule of releases, so that you can plan and coordinate your updates with the continuing evolution of Angular.</source>
          <target state="translated">我们朝着定期发布的时间表努力,这样你就可以计划和协调你的更新与Angular的持续发展。</target>
        </trans-unit>
        <trans-unit id="4f7ca8850d7d3e95260cdb1a36e87b1bd5a2f9ab" translate="yes" xml:space="preserve">
          <source>We'll add a new target section to the &quot;architect&quot; object for our project.</source>
          <target state="translated">我们将为项目的 &quot;架构师 &quot;对象添加一个新的目标部分。</target>
        </trans-unit>
        <trans-unit id="1f0e521cbcb2ebaba4d1dd2e5a53e9662e8db9ca" translate="yes" xml:space="preserve">
          <source>We'll assume that your library defines a service, &lt;code&gt;my-service&lt;/code&gt;, that requires some setup. You want your users to be able to generate it using the following CLI command.</source>
          <target state="translated">我们假设您的库定义了一项服务 &lt;code&gt;my-service&lt;/code&gt; ，需要进行一些设置。您希望您的用户能够使用以下CLI命令生成它。</target>
        </trans-unit>
        <trans-unit id="455855d6e204ab91263b75701fa13e1551077ff1" translate="yes" xml:space="preserve">
          <source>We'll be using &lt;a href=&quot;https://developers.google.com/web/updates/2017/04/headless-chrome#cli&quot;&gt;Headless Chrome&lt;/a&gt; in these examples.</source>
          <target state="translated">我们将使用&lt;a href=&quot;https://developers.google.com/web/updates/2017/04/headless-chrome#cli&quot;&gt;无头Chrome&lt;/a&gt;在这些示例中，。</target>
        </trans-unit>
        <trans-unit id="0023425c9a40172e734cbb5e99d9df3d9f24d37a" translate="yes" xml:space="preserve">
          <source>We'll create the cart page in two steps:</source>
          <target state="translated">我们将分两步创建购物车页面。</target>
        </trans-unit>
        <trans-unit id="9c13304de9fb7403344d19d9edc7669863094bb9" translate="yes" xml:space="preserve">
          <source>We've added a &lt;code&gt;builders.json&lt;/code&gt; file next to the builder's &lt;a href=&quot;https://github.com/mgechev/cli-builders-demo/blob/master/command-builder/builders.json&quot;&gt;&lt;code&gt;package.json&lt;/code&gt; file&lt;/a&gt;, and modified the package file to point to it.</source>
          <target state="translated">我们增加了一个 &lt;code&gt;builders.json&lt;/code&gt; 文件旁边建筑工地&lt;a href=&quot;https://github.com/mgechev/cli-builders-demo/blob/master/command-builder/builders.json&quot;&gt; &lt;code&gt;package.json&lt;/code&gt; 文件&lt;/a&gt;，并修改了包文件指向它。</target>
        </trans-unit>
        <trans-unit id="229504c90b2ed36005a13f0891c6ea34dd49cee8" translate="yes" xml:space="preserve">
          <source>Web Animations</source>
          <target state="translated">网络动画</target>
        </trans-unit>
        <trans-unit id="c689af566e60edb050fba04883329a2b969d41aa" translate="yes" xml:space="preserve">
          <source>Web Tracing Framework integration</source>
          <target state="translated">网络跟踪框架集成</target>
        </trans-unit>
        <trans-unit id="c5b6d6d89517eff4ce180cea4ab387ae48e094cb" translate="yes" xml:space="preserve">
          <source>WebStorm</source>
          <target state="translated">WebStorm</target>
        </trans-unit>
        <trans-unit id="96c7816359b06d625431375d1cbdc07ed4556d66" translate="yes" xml:space="preserve">
          <source>Week day</source>
          <target state="translated">工作日</target>
        </trans-unit>
        <trans-unit id="6cb4f0e33b17b0f52c241793df12a1dd4d39da62" translate="yes" xml:space="preserve">
          <source>Week of month</source>
          <target state="translated">月份星期</target>
        </trans-unit>
        <trans-unit id="b634011cda59925fcb33d601d8b1227879d65bbc" translate="yes" xml:space="preserve">
          <source>Week of year</source>
          <target state="translated">年份的星期</target>
        </trans-unit>
        <trans-unit id="5d648c134f4812220981594455e9efb88e207e9e" translate="yes" xml:space="preserve">
          <source>Week-numbering year</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="09cfafc979eda38b81da9ec21690558d2edcbfd0" translate="yes" xml:space="preserve">
          <source>WeekDay</source>
          <target state="translated">WeekDay</target>
        </trans-unit>
        <trans-unit id="ec1d4a2eb821d65b5f91f9b7b510a0c9033552d6" translate="yes" xml:space="preserve">
          <source>Welcome to Angular!</source>
          <target state="translated">欢迎来到Angular!</target>
        </trans-unit>
        <trans-unit id="f31d5caf28c1c07d1ee03f259600799b9c986539" translate="yes" xml:space="preserve">
          <source>What &lt;code&gt;&lt;a href=&quot;../api/forms/ngform&quot;&gt;NgForm&lt;/a&gt;&lt;/code&gt; directive? You didn't add an &lt;a href=&quot;../api/forms/ngform&quot;&gt;NgForm&lt;/a&gt; directive.</source>
          <target state="translated">什么 &lt;code&gt;&lt;a href=&quot;../api/forms/ngform&quot;&gt;NgForm&lt;/a&gt;&lt;/code&gt; 指令？您没有添加&lt;a href=&quot;../api/forms/ngform&quot;&gt;NgForm&lt;/a&gt;指令。</target>
        </trans-unit>
        <trans-unit id="550389c79bd6aad13b8b970d4d70593adcb978c0" translate="yes" xml:space="preserve">
          <source>What are structural directives?</source>
          <target state="translated">什么是结构指令?</target>
        </trans-unit>
        <trans-unit id="f9f442481556abfd102cc7155daba690e1a9a733" translate="yes" xml:space="preserve">
          <source>What changed?</source>
          <target state="translated">是什么改变了?</target>
        </trans-unit>
        <trans-unit id="f8328397c60c8af6da98225a51e8980b05f6b4e4" translate="yes" xml:space="preserve">
          <source>What classes should I &lt;code&gt;not&lt;/code&gt; add to &lt;code&gt;declarations&lt;/code&gt;?</source>
          <target state="translated">我 &lt;code&gt;not&lt;/code&gt; 应该在 &lt;code&gt;declarations&lt;/code&gt; 添加哪些类？</target>
        </trans-unit>
        <trans-unit id="6d27e0d2fc8a84f6cbfebe6fe7c1d1ca3170ab86" translate="yes" xml:space="preserve">
          <source>What classes should I add to the &lt;code&gt;declarations&lt;/code&gt; array?</source>
          <target state="translated">我应该在 &lt;code&gt;declarations&lt;/code&gt; 数组中添加哪些类？</target>
        </trans-unit>
        <trans-unit id="057eaac6f0deedde6be1f19bfebd7864c77aaaea" translate="yes" xml:space="preserve">
          <source>What do you do about unapproved, unsaved changes when the user navigates away? You can't just leave and risk losing the user's changes; that would be a terrible experience.</source>
          <target state="translated">当用户导航离开时,你该如何处理未批准、未保存的更改?你不能就这样离开,冒着失去用户修改的风险,那将是一种糟糕的体验。</target>
        </trans-unit>
        <trans-unit id="473d6c927a1e922bb838df64558b20be71bcb2f4" translate="yes" xml:space="preserve">
          <source>What does &quot;Can't bind to 'x' since it isn't a known property of 'y'&quot; mean?</source>
          <target state="translated">&quot;因为不是'y'的已知属性,所以不能绑定到'x'&quot;是什么意思?</target>
        </trans-unit>
        <trans-unit id="2a4d6e81b7048543cdc7f0bf6420334628995a10" translate="yes" xml:space="preserve">
          <source>What good are these tests?</source>
          <target state="translated">这些测试有什么用?</target>
        </trans-unit>
        <trans-unit id="e9ef659a9f0dd7f7a57fd0812697b64f3b70b6ea" translate="yes" xml:space="preserve">
          <source>What happened?</source>
          <target state="translated">怎么了?</target>
        </trans-unit>
        <trans-unit id="a8ce06e7c8801f5352d9b466e0f76fb6c3c8a84b" translate="yes" xml:space="preserve">
          <source>What happens if the request fails on the server, or if a poor network connection prevents it from even reaching the server? &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclient&quot;&gt;HttpClient&lt;/a&gt;&lt;/code&gt; will return an &lt;em&gt;error&lt;/em&gt; object instead of a successful response.</source>
          <target state="translated">如果请求在服务器上失败，或者不良的网络连接阻止了请求到达服务器，将会发生什么？ &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclient&quot;&gt;HttpClient&lt;/a&gt;&lt;/code&gt; 将返回&lt;em&gt;错误&lt;/em&gt;对象，而不是成功的响应。</target>
        </trans-unit>
        <trans-unit id="10d9fbb31e05693074cbd05ef7c4fa4b5d4cc854" translate="yes" xml:space="preserve">
          <source>What happens on top of this is that components and services managed by one framework can interoperate with those from the other framework. This happens in three main areas: Dependency injection, the DOM, and change detection.</source>
          <target state="translated">在此之上发生的事情是,由一个框架管理的组件和服务可以与另一个框架的组件和服务互操作。这主要发生在三个方面。依赖注入,DOM,和变化检测。</target>
        </trans-unit>
        <trans-unit id="15d57a03ad72e64e2f967c9b58b84e47c42f4e56" translate="yes" xml:space="preserve">
          <source>What if I import the same module twice?</source>
          <target state="translated">如果我两次导入同一个模块怎么办?</target>
        </trans-unit>
        <trans-unit id="67698516018294ce714cfa0910ed88df86860dcc" translate="yes" xml:space="preserve">
          <source>What if the service is optional?</source>
          <target state="translated">如果服务是可选的呢?</target>
        </trans-unit>
        <trans-unit id="fdf373766dbd491f797bd75ad9a27bc85492ffa5" translate="yes" xml:space="preserve">
          <source>What if the user tries to navigate away without saving or canceling? The user could push the browser back button or click the heroes link. Both actions trigger a navigation. Should the app save or cancel automatically?</source>
          <target state="translated">如果用户没有保存或取消就试图导航离开怎么办?用户可以按下浏览器返回按钮或点击英雄链接。这两个动作都会触发导航。应用是否应该自动保存或取消?</target>
        </trans-unit>
        <trans-unit id="3fc3074fd43e313b68435dd9d3eccbad57fbacca" translate="yes" xml:space="preserve">
          <source>What if two modules provide the same service?</source>
          <target state="translated">如果两个模块提供相同的服务怎么办?</target>
        </trans-unit>
        <trans-unit id="84612cf3c8dbe22a08e1d681d1e151867a37c306" translate="yes" xml:space="preserve">
          <source>What if you &lt;em&gt;don't&lt;/em&gt; know the concrete parent component class?</source>
          <target state="translated">如果您&lt;em&gt;不&lt;/em&gt;知道具体的父组件类怎么办？</target>
        </trans-unit>
        <trans-unit id="9571231b9a6513e5bda3f63b2546e2f10a6caf27" translate="yes" xml:space="preserve">
          <source>What if you aren't so lucky. What if faking the &lt;code&gt;HeroService&lt;/code&gt; is hard? What if &lt;code&gt;HeroDetailService&lt;/code&gt; makes its own server requests?</source>
          <target state="translated">如果您不那么幸运怎么办。如果很难伪造 &lt;code&gt;HeroService&lt;/code&gt; 怎么办？如果 &lt;code&gt;HeroDetailService&lt;/code&gt; 发出自己的服务器请求怎么办？</target>
        </trans-unit>
        <trans-unit id="2af22762107db85dc423fbbae7b2defe8142ea5a" translate="yes" xml:space="preserve">
          <source>What is a &lt;code&gt;declarable&lt;/code&gt;?</source>
          <target state="translated">什么是 &lt;code&gt;declarable&lt;/code&gt; ？</target>
        </trans-unit>
        <trans-unit id="f22c2deef328e587dff4aa9d84977cb40974b2b3" translate="yes" xml:space="preserve">
          <source>What is an &lt;code&gt;entry component&lt;/code&gt;?</source>
          <target state="translated">什么是 &lt;code&gt;entry component&lt;/code&gt; ？</target>
        </trans-unit>
        <trans-unit id="42a60fa4661b031df7525d26e30ae45290feeb4f" translate="yes" xml:space="preserve">
          <source>What is the &lt;code&gt;&lt;a href=&quot;../api/router/routermodule#forRoot&quot;&gt;forRoot()&lt;/a&gt;&lt;/code&gt; method?</source>
          <target state="translated">什么是 &lt;code&gt;&lt;a href=&quot;../api/router/routermodule#forRoot&quot;&gt;forRoot()&lt;/a&gt;&lt;/code&gt; 方法？</target>
        </trans-unit>
        <trans-unit id="a0f27c8023b0ac7bd64253716b7d1e8a3115268b" translate="yes" xml:space="preserve">
          <source>What is the &lt;code&gt;forRoot()&lt;/code&gt; method?</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="393dcffc17ce162eb4715e7887f6986bef77f253" translate="yes" xml:space="preserve">
          <source>What is the Angular compiler?</source>
          <target state="translated">什么是Angular编译器?</target>
        </trans-unit>
        <trans-unit id="ca032b5844df22ede2117e0697547ac14af77ed3" translate="yes" xml:space="preserve">
          <source>What it does</source>
          <target state="translated">它的作用</target>
        </trans-unit>
        <trans-unit id="ce3efec53dfa7b3f17d8b379e8bb6f5b1fe81172" translate="yes" xml:space="preserve">
          <source>What kinds of modules should I have and how should I use them?</source>
          <target state="translated">应该有什么样的模块,应该如何使用?</target>
        </trans-unit>
        <trans-unit id="8492f572f03fd01c98f764f87b2ecfafaba6438b" translate="yes" xml:space="preserve">
          <source>What should I &lt;code&gt;not&lt;/code&gt; export?</source>
          <target state="translated">我 &lt;code&gt;not&lt;/code&gt; 应该出口什么？</target>
        </trans-unit>
        <trans-unit id="272547099bb1eafdb8c114cedd1c025f49babd8d" translate="yes" xml:space="preserve">
          <source>What should I export?</source>
          <target state="translated">我应该输出什么?</target>
        </trans-unit>
        <trans-unit id="2fba818e3c12cdfea661b9e5031ad159d26edea6" translate="yes" xml:space="preserve">
          <source>What should I import?</source>
          <target state="translated">我应该如何导入?</target>
        </trans-unit>
        <trans-unit id="f56cc84fec0aec96345c31e5e364bd0bf53c27f7" translate="yes" xml:space="preserve">
          <source>What this means is that applications using &lt;code&gt;&lt;a href=&quot;upgrademodule&quot;&gt;UpgradeModule&lt;/a&gt;&lt;/code&gt; will run change detection more frequently in order to ensure that both frameworks are properly notified about possible changes. This will inevitably result in more change detection runs than necessary.</source>
          <target state="translated">这意味着使用 &lt;code&gt;&lt;a href=&quot;upgrademodule&quot;&gt;UpgradeModule&lt;/a&gt;&lt;/code&gt; 的应用程序将更频繁地运行更改检测，以确保正确通知两个框架有关可能的更改。这将不可避免地导致不必要的变更检测运行。</target>
        </trans-unit>
        <trans-unit id="8e748865fabf06ac85d0efb3686d535f7edbe194" translate="yes" xml:space="preserve">
          <source>What to do if Angular doesn't find what you're looking for, that is &lt;code&gt;@&lt;a href=&quot;../api/core/optional&quot;&gt;Optional&lt;/a&gt;()&lt;/code&gt;</source>
          <target state="translated">如果Angular找不到您要的东西怎么办，那就是 &lt;code&gt;@&lt;a href=&quot;../api/core/optional&quot;&gt;Optional&lt;/a&gt;()&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="3e88cb973cd5369993be64ec9b2cc3ad10b9b55a" translate="yes" xml:space="preserve">
          <source>What was previously done in the controller function is now done in the class constructor function. The dependency injection annotations are attached to the class using a static property &lt;code&gt;$inject&lt;/code&gt;. At runtime this becomes the &lt;code&gt;PhoneListController.$inject&lt;/code&gt; property.</source>
          <target state="translated">以前在控制器函数中执行的操作现在在类构造函数中完成。依赖项注入批注使用静态属性 &lt;code&gt;$inject&lt;/code&gt; 附加到类。在运行时， &lt;code&gt;PhoneListController.$inject&lt;/code&gt; 成为PhoneListController。$ inject属性。</target>
        </trans-unit>
        <trans-unit id="36bcf3cf57500860c4fe2fa7525f4f11a0d1ee9c" translate="yes" xml:space="preserve">
          <source>What went wrong? Nothing, actually. The Angular service worker is doing its job and serving the version of the application that it has &lt;strong&gt;installed&lt;/strong&gt;, even though there is an update available. In the interest of speed, the service worker doesn't wait to check for updates before it serves the application that it has cached.</source>
          <target state="translated">什么地方出了错？没事，实际上。即使有可用的更新，Angular Service Worker仍在工作并提供已&lt;strong&gt;安装&lt;/strong&gt;的应用程序的版本。为了提高速度，服务工作者在为已缓存的应用程序提供服务之前，不等检查更新。</target>
        </trans-unit>
        <trans-unit id="a604bb3c719d03268bdbbb785f2f34dc6c481a0f" translate="yes" xml:space="preserve">
          <source>What you include in your library depends on your task. For example, you could define a schematic to create a dropdown that is pre-populated with canned data to show how to add it to an app. If you want a dropdown that would contain different passed-in values each time, your library could define a schematic to create it with a given configuration. Developers could then use &lt;code&gt;ng generate&lt;/code&gt; to configure an instance for their own app.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3f165c8fe830c74b722cf3c40b0f1a6351cc255e" translate="yes" xml:space="preserve">
          <source>What you include in your library is determined by the kind of task you are trying to accomplish. For example, if you want a dropdown with some canned data to show how to add it to your app, your library could define a schematic to create it. For a component like a dropdown that would contain different passed-in values each time, you could provide it as a component in a shared library.</source>
          <target state="translated">你在库中包含的内容是由你试图完成的任务种类决定的。例如,如果你想要一个带有一些罐装数据的下拉菜单来展示如何将其添加到你的应用程序中,你的库可以定义一个示意图来创建它。对于像下拉菜单这样的组件,每次都会包含不同的传入值,你可以把它作为一个组件提供在共享库中。</target>
        </trans-unit>
        <trans-unit id="7efedb21f9cc31360041f1387aa92e01cf8751ea" translate="yes" xml:space="preserve">
          <source>What you'll build</source>
          <target state="translated">你将建立什么</target>
        </trans-unit>
        <trans-unit id="206c37a11b4ea4cf13bb051d8b88deddea5ec07c" translate="yes" xml:space="preserve">
          <source>What's being cached?</source>
          <target state="translated">缓存的是什么?</target>
        </trans-unit>
        <trans-unit id="b0da2957891f63fe85f0b681e42bc7c99353b6ac" translate="yes" xml:space="preserve">
          <source>What's in the QuickStart seed?</source>
          <target state="translated">快速启动种子有什么用?</target>
        </trans-unit>
        <trans-unit id="bbe4cab88394b14ba3632e2b2dcf364b507a5fba" translate="yes" xml:space="preserve">
          <source>What's new? What's changed? We share the most important things you need to know on the Angular blog in &lt;a href=&quot;https://blog.angular.io/tagged/release%20notes&quot;&gt;release announcements&lt;/a&gt;.</source>
          <target state="translated">什么是新的？有什么变化？在&lt;a href=&quot;https://blog.angular.io/tagged/release%20notes&quot;&gt;发布公告中&lt;/a&gt;，我们在Angular博客上分享您需要了解的最重要的信息。</target>
        </trans-unit>
        <trans-unit id="46fdeff62267a834862780ae0326b4c1aaa4483d" translate="yes" xml:space="preserve">
          <source>What's next</source>
          <target state="translated">下一步是什么?</target>
        </trans-unit>
        <trans-unit id="c9d5de0ac54b4a1d6831c0c5c8cc8b083df30290" translate="yes" xml:space="preserve">
          <source>What's the difference between NgModules and JavaScript Modules?</source>
          <target state="translated">NgModules和JavaScript模块有什么区别?</target>
        </trans-unit>
        <trans-unit id="df4456b644d2af7318557209dc4f1b5237c4e5d9" translate="yes" xml:space="preserve">
          <source>What's the difference between a &lt;code&gt;bootstrap&lt;/code&gt; component and an &lt;code&gt;entry component&lt;/code&gt;?</source>
          <target state="translated">&lt;code&gt;bootstrap&lt;/code&gt; 组件和 &lt;code&gt;entry component&lt;/code&gt; 之间有什么区别？</target>
        </trans-unit>
        <trans-unit id="a2003b1e0230fe60f289921936009ec90172775d" translate="yes" xml:space="preserve">
          <source>Whatever the source, the doc viewer renders them as &quot;code snippets&quot;, either individually with the &lt;a href=&quot;docs-style-guide#code-example&quot;&gt;&lt;em&gt;code-example&lt;/em&gt;&lt;/a&gt; component or as a tabbed collection with the &lt;a href=&quot;docs-style-guide#code-tabs&quot;&gt;&lt;em&gt;code-tabs&lt;/em&gt;&lt;/a&gt; component.</source>
          <target state="translated">无论来源如何，文档查看器都将其作为&amp;ldquo;代码段&amp;rdquo;呈现，或者通过&lt;a href=&quot;docs-style-guide#code-example&quot;&gt;&lt;em&gt;代码示例&lt;/em&gt;&lt;/a&gt;组件单独呈现，或者将其呈现为使用&lt;a href=&quot;docs-style-guide#code-tabs&quot;&gt;&lt;em&gt;代码标签&lt;/em&gt;&lt;/a&gt;组件的选项卡式集合。</target>
        </trans-unit>
        <trans-unit id="d40735da03c29f6121c2a672d8e066562771fdbb" translate="yes" xml:space="preserve">
          <source>When &lt;a href=&quot;glossary#server-side-rendering&quot;&gt;server-side rendering&lt;/a&gt; (SSR) is used, the &lt;a href=&quot;../api/platform-server&quot;&gt;&lt;code&gt;platform-server&lt;/code&gt;&lt;/a&gt; package provides web server implementations of the &lt;code&gt;DOM&lt;/code&gt;, &lt;code&gt;XMLHttpRequest&lt;/code&gt;, and other low-level features that don't rely on a browser.</source>
          <target state="translated">使用&lt;a href=&quot;glossary#server-side-rendering&quot;&gt;服务器端呈现&lt;/a&gt;（SSR）时，&lt;a href=&quot;../api/platform-server&quot;&gt; &lt;code&gt;platform-server&lt;/code&gt; &lt;/a&gt;包将提供 &lt;code&gt;DOM&lt;/code&gt; ， &lt;code&gt;XMLHttpRequest&lt;/code&gt; 和其他不依赖浏览器的其他低级功能的Web服务器实现。</target>
        </trans-unit>
        <trans-unit id="8914c537808edf1a7a626676a069039b9f296c22" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;&amp;lt;app-child&amp;gt;&lt;/code&gt; requests the &lt;code&gt;FlowerService&lt;/code&gt;, the injector begins its search at the &lt;code&gt;&amp;lt;#VIEW&amp;gt;&lt;/code&gt; belonging to &lt;code&gt;&amp;lt;app-child&amp;gt;&lt;/code&gt; (&lt;code&gt;&amp;lt;#VIEW&amp;gt;&lt;/code&gt; is included because it is injected from &lt;code&gt;@&lt;a href=&quot;../api/core/component&quot;&gt;Component&lt;/a&gt;()&lt;/code&gt;) and ends with &lt;code&gt;&amp;lt;app-child&amp;gt;&lt;/code&gt;. In this case, the &lt;code&gt;FlowerService&lt;/code&gt; is resolved in the &lt;code&gt;&amp;lt;app-child&amp;gt;&lt;/code&gt;'s &lt;code&gt;providers&lt;/code&gt; array with sunflower 🌻. The injector doesn't have to look any further in the injector tree. It stops as soon as it finds the &lt;code&gt;FlowerService&lt;/code&gt; and never sees the 🌺 (red hibiscus).</source>
          <target state="translated">当 &lt;code&gt;&amp;lt;app-child&amp;gt;&lt;/code&gt; 请求 &lt;code&gt;FlowerService&lt;/code&gt; 时，注入器从属于 &lt;code&gt;&amp;lt;app-child&amp;gt;&lt;/code&gt; 的 &lt;code&gt;&amp;lt;#VIEW&amp;gt;&lt;/code&gt; 开始搜索（包括 &lt;code&gt;&amp;lt;#VIEW&amp;gt;&lt;/code&gt; ，因为它是从 &lt;code&gt;@&lt;a href=&quot;../api/core/component&quot;&gt;Component&lt;/a&gt;()&lt;/code&gt; &lt;a href=&quot;../api/core/component&quot;&gt;Component&lt;/a&gt;（）注入的），并以 &lt;code&gt;&amp;lt;app-child&amp;gt;&lt;/code&gt; 结尾-child&amp;gt;。在这种情况下， &lt;code&gt;FlowerService&lt;/code&gt; 在 &lt;code&gt;&amp;lt;app-child&amp;gt;&lt;/code&gt; 的 &lt;code&gt;providers&lt;/code&gt; 数组中解析为向日葵🌻。注入器不必在注入器树中进一步查找。一旦找到 &lt;code&gt;FlowerService&lt;/code&gt; ，它便停止，再也看不到🌺（红芙蓉）。</target>
        </trans-unit>
        <trans-unit id="3a290ab7d29486d5dec0940d7942415d6fab40d8" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;&amp;lt;app-root&amp;gt;&lt;/code&gt; requests the &lt;code&gt;FlowerService&lt;/code&gt;, it is the injector's job to resolve the &lt;code&gt;FlowerService&lt;/code&gt; token. The resolution of the token happens in two phases:</source>
          <target state="translated">当 &lt;code&gt;&amp;lt;app-root&amp;gt;&lt;/code&gt; 请求 &lt;code&gt;FlowerService&lt;/code&gt; 时，注入器的工作就是解析 &lt;code&gt;FlowerService&lt;/code&gt; 令牌。令牌的解析分为两个阶段：</target>
        </trans-unit>
        <trans-unit id="21374804442ed472300ccdecb64c9e08c0ae1478" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;&lt;a href=&quot;../upgrade/static&quot;&gt;static&lt;/a&gt;&lt;/code&gt; is not provided, uses query results to determine the timing of query resolution. If any query results are inside a nested view (such as &lt;code&gt;*&lt;a href=&quot;../common/ngif&quot;&gt;ngIf&lt;/a&gt;&lt;/code&gt;), the query is resolved after change detection runs. Otherwise, it is resolved before change detection runs.</source>
          <target state="translated">如果未提供 &lt;code&gt;&lt;a href=&quot;../upgrade/static&quot;&gt;static&lt;/a&gt;&lt;/code&gt; ，则使用查询结果来确定查询解决的时间。如果任何查询结果在嵌套视图内（例如 &lt;code&gt;*&lt;a href=&quot;../common/ngif&quot;&gt;ngIf&lt;/a&gt;&lt;/code&gt; ），则在运行更改检测后解析查询。否则，将在运行更改检测之前解决该问题。</target>
        </trans-unit>
        <trans-unit id="53e5281d1686a6ec68990211a7fd328735128905" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;&lt;a href=&quot;../upgrade/static&quot;&gt;static&lt;/a&gt;&lt;/code&gt; is not provided, uses the query results to determine the timing of query resolution. If any query results are inside a nested view (such as &lt;code&gt;*&lt;a href=&quot;../common/ngif&quot;&gt;ngIf&lt;/a&gt;&lt;/code&gt;), the query is resolved after change detection runs. Otherwise, it is resolved before change detection runs.</source>
          <target state="translated">如果未提供 &lt;code&gt;&lt;a href=&quot;../upgrade/static&quot;&gt;static&lt;/a&gt;&lt;/code&gt; ，则使用查询结果来确定查询解决的时间。如果有任何查询结果在嵌套视图内（例如 &lt;code&gt;*&lt;a href=&quot;../common/ngif&quot;&gt;ngIf&lt;/a&gt;&lt;/code&gt; ），则在运行更改检测后解析查询。否则，将在运行更改检测之前解决该问题。</target>
        </trans-unit>
        <trans-unit id="9f2951b5265473e47083f23251a243f2533334e7" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;@.disabled&lt;/code&gt; is true, it prevents the &lt;code&gt;@childAnimation&lt;/code&gt; trigger from animating, along with any inner animations.</source>
          <target state="translated">当 &lt;code&gt;@.disabled&lt;/code&gt; 为true时，它将阻止 &lt;code&gt;@childAnimation&lt;/code&gt; 触发器以及任何内部动画进行动画处理。</target>
        </trans-unit>
        <trans-unit id="aae654a850870dc683e195d0d86f434df815ab22" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;@&lt;a href=&quot;../api/core/host&quot;&gt;Host&lt;/a&gt;()&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;../api/core/skipself&quot;&gt;SkipSelf&lt;/a&gt;()&lt;/code&gt; were applied to the &lt;code&gt;FlowerService&lt;/code&gt;, which is in the &lt;code&gt;providers&lt;/code&gt; array, the result was &lt;code&gt;null&lt;/code&gt; because &lt;code&gt;@&lt;a href=&quot;../api/core/skipself&quot;&gt;SkipSelf&lt;/a&gt;()&lt;/code&gt; starts its search in the &lt;code&gt;&amp;lt;app-child&amp;gt;&lt;/code&gt; injector, but &lt;code&gt;@&lt;a href=&quot;../api/core/host&quot;&gt;Host&lt;/a&gt;()&lt;/code&gt; stops searching at &lt;code&gt;&amp;lt;#VIEW&amp;gt;&lt;/code&gt;&amp;mdash;where there is no &lt;code&gt;FlowerService&lt;/code&gt;. In the logical tree, you can see that the &lt;code&gt;FlowerService&lt;/code&gt; is visible in &lt;code&gt;&amp;lt;app-child&amp;gt;&lt;/code&gt;, not its &lt;code&gt;&amp;lt;#VIEW&amp;gt;&lt;/code&gt;.</source>
          <target state="translated">将 &lt;code&gt;@&lt;a href=&quot;../api/core/host&quot;&gt;Host&lt;/a&gt;()&lt;/code&gt; 和 &lt;code&gt;&lt;a href=&quot;../api/core/skipself&quot;&gt;SkipSelf&lt;/a&gt;()&lt;/code&gt; 应用于 &lt;code&gt;providers&lt;/code&gt; 数组中的 &lt;code&gt;FlowerService&lt;/code&gt; 时，结果为 &lt;code&gt;null&lt;/code&gt; 因为 &lt;code&gt;@&lt;a href=&quot;../api/core/skipself&quot;&gt;SkipSelf&lt;/a&gt;()&lt;/code&gt; &lt;a href=&quot;../api/core/skipself&quot;&gt;SkipSelf&lt;/a&gt;（）在 &lt;code&gt;&amp;lt;app-child&amp;gt;&lt;/code&gt; 注入器中开始搜索，但是 &lt;code&gt;@&lt;a href=&quot;../api/core/host&quot;&gt;Host&lt;/a&gt;()&lt;/code&gt; &lt;a href=&quot;../api/core/host&quot;&gt;Host&lt;/a&gt;（）停止搜索在 &lt;code&gt;&amp;lt;#VIEW&amp;gt;&lt;/code&gt; 上 -没有 &lt;code&gt;FlowerService&lt;/code&gt; 的地方。在逻辑树中，您可以看到 &lt;code&gt;FlowerService&lt;/code&gt; 在 &lt;code&gt;&amp;lt;app-child&amp;gt;&lt;/code&gt; 中可见，而不是在 &lt;code&gt;&amp;lt;#VIEW&amp;gt;&lt;/code&gt; 中可见。</target>
        </trans-unit>
        <trans-unit id="5f26326afa93adb0e0f9cbfa39d9dbe32a7dbdac" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;@&lt;a href=&quot;inject&quot;&gt;Inject&lt;/a&gt;()&lt;/code&gt; is not present, the injector uses the type annotation of the parameter as the provider.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2bdf758a1a9690d4ad83702a2aa70dc21cb575b3" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;addHero()&lt;/code&gt; saves successfully, the &lt;code&gt;subscribe()&lt;/code&gt; callback receives the new hero and pushes it into to the &lt;code&gt;heroes&lt;/code&gt; list for display.</source>
          <target state="translated">当 &lt;code&gt;addHero()&lt;/code&gt; 成功保存，该 &lt;code&gt;subscribe()&lt;/code&gt; 回调接收新的英雄和它推入到 &lt;code&gt;heroes&lt;/code&gt; 列表中显示。</target>
        </trans-unit>
        <trans-unit id="f10aac19bd7597b8018bacfe0f5ef7081c6eb8a1" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;bindingProperty&lt;/code&gt; is not provided, it is assumed to be equal to &lt;code&gt;directiveProperty&lt;/code&gt;.</source>
          <target state="translated">如果未提供 &lt;code&gt;bindingProperty&lt;/code&gt; ，则假定它等于 &lt;code&gt;directiveProperty&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="f035065ead707a891990c140cba8292f7c7750c8" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;false&lt;/code&gt; (the default), removes blank text nodes from compiled templates, which results in smaller emitted template factory modules. Set to &lt;code&gt;true&lt;/code&gt; to preserve blank text nodes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ed12b19518c977a855a7af5f7bcbb3780eb478a3" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;false&lt;/code&gt;, disables this rewriting, requiring the rewriting to be done manually.</source>
          <target state="translated">如果为 &lt;code&gt;false&lt;/code&gt; ，则禁用此重写，要求手动进行重写。</target>
        </trans-unit>
        <trans-unit id="017d855b6c49b2c6a35221e4a06e560f0e54e376" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;false&lt;/code&gt;, factory files are generated only for &lt;code&gt;.ts&lt;/code&gt; files. Do this when using factory summaries.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a0a78206a1f0896e2816ea253bc9930ac1c56dfe" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;ngc&lt;/code&gt; runs, it compiles &lt;code&gt;AppModule&lt;/code&gt; into a module factory, which contains definitions for all the providers declared in all the modules it includes. At runtime, this factory becomes an injector that instantiates these services.</source>
          <target state="translated">当 &lt;code&gt;ngc&lt;/code&gt; 运行时，它编译 &lt;code&gt;AppModule&lt;/code&gt; 到一个模块工厂，它包含了所有的一切，它包括的模块声明的提供者定义。在运行时，该工厂成为实例化这些服务的注入器。</target>
        </trans-unit>
        <trans-unit id="c6b2139d05d2a8c8f3fc1f7405ee8a5d8b302144" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;selectedHero&lt;/code&gt; is undefined, the &lt;code&gt;&lt;a href=&quot;../api/common/ngif&quot;&gt;ngIf&lt;/a&gt;&lt;/code&gt; removes the hero detail from the DOM. There are no &lt;code&gt;selectedHero&lt;/code&gt; bindings to consider.</source>
          <target state="translated">当 &lt;code&gt;selectedHero&lt;/code&gt; 没有定义， &lt;code&gt;&lt;a href=&quot;../api/common/ngif&quot;&gt;ngIf&lt;/a&gt;&lt;/code&gt; 将删除DOM英雄细节。没有要考虑的 &lt;code&gt;selectedHero&lt;/code&gt; Hero绑定。</target>
        </trans-unit>
        <trans-unit id="657a451b51d175e64cf9315ba370f13157827231" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;strictTemplates&lt;/code&gt; is enabled, it is still possible to disable certain aspects of type checking. Setting the option &lt;code&gt;strictNullInputTypes&lt;/code&gt; to &lt;code&gt;false&lt;/code&gt; disables strict null checks within Angular templates. This flag applies for all components that are part of the application.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8c0f82f5a3d1f42f3589033e4da5b7c233fdf6b3" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;true&lt;/code&gt; (recommended), enables the &lt;a href=&quot;aot-compiler#binding-expression-validation&quot;&gt;binding expression validation&lt;/a&gt; phase of the template compiler, which uses TypeScript to validate binding expressions. For more information, see &lt;a href=&quot;template-typecheck&quot;&gt;Template type checking&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6b6e0d659c9c6611b42ffdd8b564ed7650d25d3b" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;true&lt;/code&gt; (recommended), reports an error for a supplied parameter whose injection type cannot be determined. When &lt;code&gt;false&lt;/code&gt; (currently the default), constructor parameters of classes marked with &lt;code&gt;@&lt;a href=&quot;../api/core/injectable&quot;&gt;Injectable&lt;/a&gt;&lt;/code&gt; whose type cannot be resolved produce a warning.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ef4fcc09d6fb22fdf69874d9f54a814115c092ec" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;true&lt;/code&gt; (the default), generates factory files (&lt;code&gt;.ngfactory.js&lt;/code&gt; and &lt;code&gt;.ngstyle.js&lt;/code&gt;) for &lt;code&gt;.d.ts&lt;/code&gt; files with a corresponding &lt;code&gt;.metadata.json&lt;/code&gt; file.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="35857c992711f66bc9264c14418549220b43d7bb" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;true&lt;/code&gt; (the default), transforms code that is or could be used in an annotation, to allow it to be imported from template factory modules. See &lt;a href=&quot;aot-compiler#metadata-rewriting&quot;&gt;metadata rewriting&lt;/a&gt; for more information.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2f5278ded619599ce70b6c60289ab8fa9dd9207e" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;true&lt;/code&gt;, does not emit &lt;code&gt;.ngfactory.js&lt;/code&gt; and &lt;code&gt;.ngstyle.js&lt;/code&gt; files. This turns off most of the template compiler and disables the reporting of template diagnostics.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c9665f94608d5d80d1f67169ba46a0b7e00b8ae3" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;true&lt;/code&gt;, does not produce &lt;code&gt;.metadata.json&lt;/code&gt; files. Default is &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="95b36df6783ff17039e5de66ab5e24a3f592a3f0" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;true&lt;/code&gt;, enables &lt;a href=&quot;template-typecheck#strict-mode&quot;&gt;strict template type checking&lt;/a&gt; in Angular version 9. Strict mode is only available when using &lt;a href=&quot;ivy&quot;&gt;Ivy&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bcf00297cfbafb28fc19845594f4c48f02c45597" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;true&lt;/code&gt;, enables use of the &lt;code&gt;&amp;lt;template&amp;gt;&lt;/code&gt; element, which was deprecated in Angular 4.0, in favor of &lt;code&gt;&amp;lt;ng-template&amp;gt;&lt;/code&gt; (to avoid colliding with the DOM's element of the same name). Default is &lt;code&gt;false&lt;/code&gt;. Might be required by some third-party Angular libraries.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="56e831076fbb13304c174dd4f4f401001e893101" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;true&lt;/code&gt;, generate all possible files even if they are empty. Default is &lt;code&gt;false&lt;/code&gt;. Used by the Bazel build rules to simplify how Bazel rules track file dependencies. Do not use this option outside of the Bazel rules.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="28fe72bab6640e479e79ce07a22289f8e316ed2e" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;true&lt;/code&gt;, generates a flat module index of the given file name and the corresponding flat module metadata. Use to create flat modules that are packaged similarly to &lt;code&gt;@angular/core&lt;/code&gt; and &lt;code&gt;@angular/common&lt;/code&gt;. When this option is used, the &lt;code&gt;package.json&lt;/code&gt; for the library should refer to the generated flat module index instead of the library index file.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5965f43ade662037029b52c576bebdf4200e293f" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;true&lt;/code&gt;, prints extra information while compiling templates. Default is &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d4a6c8928a8873b74dd81fec0a55c3a18d235824" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;true&lt;/code&gt;, replaces the &lt;code&gt;templateUrl&lt;/code&gt; and &lt;code&gt;styleUrls&lt;/code&gt; property in all &lt;code&gt;@&lt;a href=&quot;../api/core/component&quot;&gt;Component&lt;/a&gt;&lt;/code&gt; decorators with inlined contents in &lt;code&gt;template&lt;/code&gt; and &lt;code&gt;styles&lt;/code&gt; properties.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="987899c0968d3b4f33119bd6dd9fcc2cf4bf5417" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;true&lt;/code&gt;, reports an error to the &lt;code&gt;.metadata.json&lt;/code&gt; file if &lt;code&gt;&quot;skipMetadataEmit&quot;&lt;/code&gt; is &lt;code&gt;false&lt;/code&gt;. Default is &lt;code&gt;false&lt;/code&gt;. Use only when &lt;code&gt;&quot;skipMetadataEmit&quot;&lt;/code&gt; is &lt;code&gt;false&lt;/code&gt; and &lt;code&gt;&quot;skipTemplateCodeGen&quot;&lt;/code&gt; is &lt;code&gt;true&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a9ff5d97e4f3421875057eca5cefa3c3f3de301d" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;true&lt;/code&gt;, the compiler does not check the TypeScript version and does not report an error when an unsupported version of TypeScript is used. Not recommended, as unsupported versions of TypeScript might have undefined behavior. Default is &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e05e0539b42ad79b46d59d705a37b7a3d0c21c93" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;true&lt;/code&gt;, the compiler does not check the TypeScript version and does not report an error when an unsupported version of TypeScript is used. Not recommended, as unsupported versions of TypeScript might have undefined behavior. Default is false.</source>
          <target state="translated">如果为 &lt;code&gt;true&lt;/code&gt; ，则在使用不受支持的TypeScript版本时，编译器不会检查TypeScript版本，并且不会报告错误。不建议使用，因为不受支持的TypeScript版本可能具有未定义的行为。默认为false。</target>
        </trans-unit>
        <trans-unit id="8670765a2a8b2049c5a1f397dfffea5db6c1ba9a" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;true&lt;/code&gt;, use &lt;a href=&quot;https://github.com/angular/tsickle&quot;&gt;Tsickle&lt;/a&gt; to annotate the emitted JavaScript with &lt;a href=&quot;http://usejsdoc.org/&quot;&gt;JSDoc&lt;/a&gt; comments needed by the &lt;a href=&quot;https://github.com/google/closure-compiler&quot;&gt;Closure Compiler&lt;/a&gt;. Default is &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="548c1033b7a8da41ee5f0961ac1576b4e9faa14a" translate="yes" xml:space="preserve">
          <source>When Angular creates &lt;code&gt;AppComponent&lt;/code&gt;, the DI framework creates an instance of &lt;code&gt;LoggerService&lt;/code&gt; and starts to create &lt;code&gt;UserContextService&lt;/code&gt;. &lt;code&gt;UserContextService&lt;/code&gt; also needs &lt;code&gt;LoggerService&lt;/code&gt;, which the framework already has, so the framework can provide the same instance. &lt;code&gt;UserContextService&lt;/code&gt; also needs &lt;code&gt;UserService&lt;/code&gt;, which the framework has yet to create. &lt;code&gt;UserService&lt;/code&gt; has no further dependencies, so the framework can simply use &lt;code&gt;new&lt;/code&gt; to instantiate the class and provide the instance to the &lt;code&gt;UserContextService&lt;/code&gt; constructor.</source>
          <target state="translated">当Angular创建 &lt;code&gt;AppComponent&lt;/code&gt; 时，DI框架将创建 &lt;code&gt;LoggerService&lt;/code&gt; 的实例并开始创建 &lt;code&gt;UserContextService&lt;/code&gt; 。 &lt;code&gt;UserContextService&lt;/code&gt; 还需要框架已经具有的 &lt;code&gt;LoggerService&lt;/code&gt; ，因此框架可以提供相同的实例。 &lt;code&gt;UserContextService&lt;/code&gt; 还需要 &lt;code&gt;UserService&lt;/code&gt; ，该框架尚未创建。 &lt;code&gt;UserService&lt;/code&gt; 没有进一步的依赖关系，因此框架可以简单地使用 &lt;code&gt;new&lt;/code&gt; 实例化该类并将实例提供给 &lt;code&gt;UserContextService&lt;/code&gt; 构造函数。</target>
        </trans-unit>
        <trans-unit id="9c46546530ec2305526bbe60f113e24d64bb2ea5" translate="yes" xml:space="preserve">
          <source>When Angular creates &lt;code&gt;HeroesBaseComponent&lt;/code&gt;, it also creates a new instance of &lt;code&gt;HeroService&lt;/code&gt; that is visible only to that component and its children, if any.</source>
          <target state="translated">当Angular创建 &lt;code&gt;HeroesBaseComponent&lt;/code&gt; 时，它还会创建一个 &lt;code&gt;HeroService&lt;/code&gt; 的新实例，该实例仅对该组件及其子代（如果有）可见。</target>
        </trans-unit>
        <trans-unit id="d75141e96ff6cc6af5c2f22e153bb8b7726c8439" translate="yes" xml:space="preserve">
          <source>When Angular creates a &lt;code&gt;HeroesComponent&lt;/code&gt;, the &lt;a href=&quot;../guide/dependency-injection&quot;&gt;Dependency Injection&lt;/a&gt; system sets the &lt;code&gt;heroService&lt;/code&gt; parameter to the singleton instance of &lt;code&gt;HeroService&lt;/code&gt;.</source>
          <target state="translated">当角创建 &lt;code&gt;HeroesComponent&lt;/code&gt; 的&lt;a href=&quot;../guide/dependency-injection&quot;&gt;依赖注入&lt;/a&gt;系统将 &lt;code&gt;heroService&lt;/code&gt; 参数的单一实例 &lt;code&gt;HeroService&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="edfe45fd7cd5a3d35587c22b5138369ceba935e9" translate="yes" xml:space="preserve">
          <source>When Angular creates a class whose constructor has parameters, it looks for type and injection metadata about those parameters so that it can inject the correct service. If Angular can't find that parameter information, it throws an error. Angular can only find the parameter information &lt;em&gt;if the class has a decorator of some kind&lt;/em&gt;. The &lt;code&gt;@&lt;a href=&quot;../api/core/injectable&quot;&gt;Injectable&lt;/a&gt;()&lt;/code&gt; decorator is the standard decorator for service classes.</source>
          <target state="translated">当Angular创建一个其构造函数具有参数的类时，它将查找有关这些参数的类型和注入元数据，以便可以注入正确的服务。如果Angular找不到该参数信息，则会引发错误。&lt;em&gt;如果该类具有某种装饰器，则&lt;/em&gt; Angular只能找到参数信息。该 &lt;code&gt;@&lt;a href=&quot;../api/core/injectable&quot;&gt;Injectable&lt;/a&gt;()&lt;/code&gt; 装饰是服务类的标准装饰。</target>
        </trans-unit>
        <trans-unit id="b60a04b551961ac33eb89dab15ee5fc3d96de088" translate="yes" xml:space="preserve">
          <source>When Angular creates a lazy component for that module and injects &lt;code&gt;UserService&lt;/code&gt;, it finds a &lt;code&gt;UserService&lt;/code&gt; provider in the lazy module's &lt;em&gt;child injector&lt;/em&gt; and creates a &lt;em&gt;new&lt;/em&gt; instance of the &lt;code&gt;UserService&lt;/code&gt;. This is an entirely different &lt;code&gt;UserService&lt;/code&gt; instance than the app-wide singleton version that Angular injected in one of the eagerly loaded components.</source>
          <target state="translated">当Angular为该模块创建一个惰性组件并注入 &lt;code&gt;UserService&lt;/code&gt; 时，它将在惰性模块的&lt;em&gt;子注入器中&lt;/em&gt;找到 &lt;code&gt;UserService&lt;/code&gt; 提供程序，并创建 &lt;code&gt;UserService&lt;/code&gt; 的&lt;em&gt;新&lt;/em&gt;实例。这是与Angular在急切加载的组件之一中注入的应用程序范围内的单例版本完全不同的 &lt;code&gt;UserService&lt;/code&gt; 实例。&lt;em&gt;&lt;/em&gt;&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="dc69520190e3c83c55a291c33fca092b47e14bd0" translate="yes" xml:space="preserve">
          <source>When Angular creates a new instance of a component class, it determines which services or other dependencies that component needs by looking at the constructor parameter types. For example, the constructor of &lt;code&gt;HeroListComponent&lt;/code&gt; needs &lt;code&gt;HeroService&lt;/code&gt;.</source>
          <target state="translated">当Angular创建组件类的新实例时，它通过查看构造函数参数类型来确定组件需要哪些服务或其他依赖项。例如， &lt;code&gt;HeroListComponent&lt;/code&gt; 的构造函数需要 &lt;code&gt;HeroService&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="daa80d0bedfc508acd3e345644f12519bac5df05" translate="yes" xml:space="preserve">
          <source>When Angular discovers that a component depends on a service, it first checks if the injector has any existing instances of that service. If a requested service instance doesn't yet exist, the injector makes one using the registered provider, and adds it to the injector before returning the service to Angular.</source>
          <target state="translated">当Angular发现一个组件依赖于一个服务时,它首先检查注入器是否有该服务的任何现有实例。如果请求的服务实例还不存在,注入器就会使用注册的提供者创建一个实例,并在将服务返回给Angular之前将其添加到注入器中。</target>
        </trans-unit>
        <trans-unit id="15fbac2ad05bb1b878e9b6aaaddf5c2a92440c52" translate="yes" xml:space="preserve">
          <source>When Angular first introduced lazy routes, there wasn't browser support for dynamically loading additional JavaScript. Angular created our own scheme using the syntax &lt;code&gt;&lt;a href=&quot;../api/router/route#loadChildren&quot;&gt;loadChildren&lt;/a&gt;: './lazy/lazy.module#LazyModule'&lt;/code&gt; and built tooling to support it. Now that ECMAScript dynamic import is supported in many browsers, Angular is moving toward this new syntax.</source>
          <target state="translated">当Angular首次引入惰性路由时，浏览器不支持动态加载其他JavaScript。Angular使用语法 &lt;code&gt;&lt;a href=&quot;../api/router/route#loadChildren&quot;&gt;loadChildren&lt;/a&gt;: './lazy/lazy.module#LazyModule'&lt;/code&gt; 创建了我们自己的方案，并构建了工具来支持它。现在许多浏览器都支持ECMAScript动态导入，Angular正在朝着这种新语法发展。</target>
        </trans-unit>
        <trans-unit id="e9706bf78195978fa29fcaec311b2c1db9963924" translate="yes" xml:space="preserve">
          <source>When Angular first introduced lazy routes, there wasn't browser support for dynamically loading additional JavaScript. Angular created our own scheme using the syntax &lt;code&gt;loadChildren: './lazy/lazy.module#LazyModule'&lt;/code&gt; and built tooling to support it. Now that ECMAScript dynamic import is supported in many browsers, Angular is moving toward this new syntax.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c532a909b137883ff1cc53d2b0c6b4c9086b273e" translate="yes" xml:space="preserve">
          <source>When Angular looks to inject a service for that token, it creates and delivers the instance created by the second provider.</source>
          <target state="translated">当Angular寻找为该token注入服务时,它会创建并交付第二个提供者创建的实例。</target>
        </trans-unit>
        <trans-unit id="0a3b387e0d7ce6256900c30fd7083a52d270aa24" translate="yes" xml:space="preserve">
          <source>When Angular sees this dev dependency, it provides the language service in the WebStorm environment. WebStorm then gives you colorization inside the template and autocomplete in addition to the Angular Language Service.</source>
          <target state="translated">当Angular看到这个开发依赖的时候,就会在WebStorm环境中提供语言服务。然后,WebStorm除了提供Angular语言服务外,还为你提供了模板内部的着色和自动完成。</target>
        </trans-unit>
        <trans-unit id="33dad2f9fbf951339a3296d3326f729bb3e085c0" translate="yes" xml:space="preserve">
          <source>When AngularJS content gets projected inside an Angular component, it still remains in &quot;AngularJS land&quot; and is managed by the AngularJS framework.</source>
          <target state="translated">当AngularJS内容被投射到Angular组件内部时,它仍然停留在 &quot;AngularJS土地 &quot;上,由AngularJS框架管理。</target>
        </trans-unit>
        <trans-unit id="5ed767ca456340b0d66612ee5b397caf978c20ac" translate="yes" xml:space="preserve">
          <source>When a &lt;code&gt;&lt;a href=&quot;../api/core/testing/fakeasync&quot;&gt;fakeAsync&lt;/a&gt;()&lt;/code&gt; test ends with pending &lt;em&gt;micro-tasks&lt;/em&gt; such as unresolved promises, the test fails with a clear error message.</source>
          <target state="translated">当 &lt;code&gt;&lt;a href=&quot;../api/core/testing/fakeasync&quot;&gt;fakeAsync&lt;/a&gt;()&lt;/code&gt; 测试以未决的&lt;em&gt;微任务（&lt;/em&gt;例如未解决的promise ）结束时，测试将失败，并显示一条清晰的错误消息。</target>
        </trans-unit>
        <trans-unit id="706c0acd77c834e1aad2b340fca6016f1fa6d670" translate="yes" xml:space="preserve">
          <source>When a &lt;code&gt;&lt;a href=&quot;../api/core/testing/fakeasync&quot;&gt;fakeAsync&lt;/a&gt;()&lt;/code&gt; test ends with pending timer event &lt;em&gt;tasks&lt;/em&gt; (queued &lt;code&gt;setTimeOut&lt;/code&gt; and &lt;code&gt;setInterval&lt;/code&gt; callbacks), the test fails with a clear error message.</source>
          <target state="translated">当 &lt;code&gt;&lt;a href=&quot;../api/core/testing/fakeasync&quot;&gt;fakeAsync&lt;/a&gt;()&lt;/code&gt; 测试以暂挂的计时器事件&lt;em&gt;任务&lt;/em&gt;（排队的 &lt;code&gt;setTimeOut&lt;/code&gt; 和 &lt;code&gt;setInterval&lt;/code&gt; 回调）结束时，该测试将失败，并显示一条明确的错误消息。</target>
        </trans-unit>
        <trans-unit id="5c0f510f249ea7d1ebc16b4ca9b7274ea4dccefc" translate="yes" xml:space="preserve">
          <source>When a child of this component asks for the &lt;code&gt;&lt;a href=&quot;../api/common/http/httpbackend&quot;&gt;HttpBackend&lt;/a&gt;&lt;/code&gt; service, Angular provides the local &lt;code&gt;&lt;a href=&quot;../api/common/http/httpbackend&quot;&gt;HttpBackend&lt;/a&gt;&lt;/code&gt; service, not the version provided in the application root injector. Child components make proper HTTP requests no matter what other modules do to &lt;code&gt;&lt;a href=&quot;../api/common/http/httpbackend&quot;&gt;HttpBackend&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">当该组件的子级要求 &lt;code&gt;&lt;a href=&quot;../api/common/http/httpbackend&quot;&gt;HttpBackend&lt;/a&gt;&lt;/code&gt; 服务时，Angular提供本地 &lt;code&gt;&lt;a href=&quot;../api/common/http/httpbackend&quot;&gt;HttpBackend&lt;/a&gt;&lt;/code&gt; 服务，而不是应用程序根注入器中提供的版本。无论其他模块对 &lt;code&gt;&lt;a href=&quot;../api/common/http/httpbackend&quot;&gt;HttpBackend&lt;/a&gt;&lt;/code&gt; 执行什么操作，子组件都将发出正确的HTTP请求。</target>
        </trans-unit>
        <trans-unit id="2f50727eaded505f27a2039589063405b5098511" translate="yes" xml:space="preserve">
          <source>When a class requires a dependency, that dependency is added to the constructor as a parameter. When Angular needs to instantiate the class, it calls upon the DI framework to supply the dependency. By default, the DI framework searches for a provider in the injector hierarchy, starting at the component's local injector of the component, and if necessary bubbling up through the injector tree until it reaches the root injector.</source>
          <target state="translated">当一个类需要一个依赖关系时,这个依赖关系会作为一个参数添加到构造函数中。当Angular需要实例化这个类时,它就会调用DI框架来提供依赖关系。默认情况下,DI框架会在注入器层级中搜索一个提供者,从组件的本地注入器开始,必要时在注入器树中冒泡,直到到达根注入器。</target>
        </trans-unit>
        <trans-unit id="cdcac278185f690641e0973ca2f176befc8267b8" translate="yes" xml:space="preserve">
          <source>When a component declares a dependency, Angular tries to satisfy that dependency with its own &lt;code&gt;ElementInjector&lt;/code&gt;. If the component's injector lacks the provider, it passes the request up to its parent component's &lt;code&gt;ElementInjector&lt;/code&gt;.</source>
          <target state="translated">当组件声明依赖项时，Angular会尝试使用其自己的 &lt;code&gt;ElementInjector&lt;/code&gt; 来满足该依赖项。如果组件的注入器缺少提供程序，它将把请求传递到其父组件的 &lt;code&gt;ElementInjector&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="fa934dc7384f20c5899aeb7143c3e042d42bada1" translate="yes" xml:space="preserve">
          <source>When a component has dependencies, you may wish to use the &lt;code&gt;&lt;a href=&quot;../api/core/testing/testbed&quot;&gt;TestBed&lt;/a&gt;&lt;/code&gt; to both create the component and its dependencies.</source>
          <target state="translated">当组件具有依赖项时，您可能希望使用 &lt;code&gt;&lt;a href=&quot;../api/core/testing/testbed&quot;&gt;TestBed&lt;/a&gt;&lt;/code&gt; 来创建组件及其依赖项。</target>
        </trans-unit>
        <trans-unit id="80c0d48aa6b194f35fb1a95277c8c0e3c66d70a2" translate="yes" xml:space="preserve">
          <source>When a component is instantiated, Angular creates a change detector, which is responsible for propagating the component's bindings. The strategy is one of:</source>
          <target state="translated">当一个组件被实例化时,Angular会创建一个变化检测器,它负责传播组件的绑定。该策略是其中之一。</target>
        </trans-unit>
        <trans-unit id="cc7c94e41269c2b8dc0737122e64dd38c738de77" translate="yes" xml:space="preserve">
          <source>When a component or service declares a dependency, the class constructor takes that dependency as a parameter. You can tell Angular that the dependency is optional by annotating the constructor parameter with &lt;code&gt;@&lt;a href=&quot;../api/core/optional&quot;&gt;Optional&lt;/a&gt;()&lt;/code&gt;.</source>
          <target state="translated">当组件或服务声明依赖项时，类构造函数将该依赖项作为参数。你可以告诉角度的依赖是通过注释的构造函数的参数可选 &lt;code&gt;@&lt;a href=&quot;../api/core/optional&quot;&gt;Optional&lt;/a&gt;()&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="897bc1098dfadc2e0641ad4a0a44d85138b5526f" translate="yes" xml:space="preserve">
          <source>When a library's input types are too narrow and the library hasn't added appropriate metadata for Angular to figure this out. This usually occurs with disabled or other common Boolean inputs used as attributes, for example, &lt;code&gt;&amp;lt;input disabled&amp;gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6dc930c78d57112ce62f728430bda27a0ee3f50d" translate="yes" xml:space="preserve">
          <source>When a library's typings are wrong or incomplete (for example, missing &lt;code&gt;null | undefined&lt;/code&gt; if the library was not written with &lt;code&gt;strictNullChecks&lt;/code&gt; in mind).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c92f91e13ec5352ca2d9208b3c8260e92af91884" translate="yes" xml:space="preserve">
          <source>When a module is loaded at application launch, its &lt;code&gt;@&lt;a href=&quot;../api/core/ngmodule#providers&quot;&gt;NgModule.providers&lt;/a&gt;&lt;/code&gt; have &lt;em&gt;application-wide scope&lt;/em&gt;; that is, they are available for injection throughout the application.</source>
          <target state="translated">在应用程序启动时加载模块时，其 &lt;code&gt;@&lt;a href=&quot;../api/core/ngmodule#providers&quot;&gt;NgModule.providers&lt;/a&gt;&lt;/code&gt; 具有&lt;em&gt;应用程序范围的范围&lt;/em&gt;；也就是说，它们可在整个应用程序中注入。</target>
        </trans-unit>
        <trans-unit id="3bd443c478a3d09a5355445d040100b60dfaf9ca" translate="yes" xml:space="preserve">
          <source>When a published library is used in an Ivy app, the Angular CLI will automatically convert it to Ivy using a tool known as the Angular compatibility compiler (&lt;code&gt;ngcc&lt;/code&gt;). Thus, publishing your libraries using the View Engine compiler ensures that they can be transparently consumed by both View Engine and Ivy apps.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6422ede5f8ed58042863b6f652f29c592c282af7" translate="yes" xml:space="preserve">
          <source>When a sequence is used within a &lt;code&gt;&lt;a href=&quot;group&quot;&gt;group()&lt;/a&gt;&lt;/code&gt; or a &lt;code&gt;&lt;a href=&quot;transition&quot;&gt;transition&lt;/a&gt;()&lt;/code&gt; call, execution continues to the next instruction only after each of the inner animation steps have completed.</source>
          <target state="translated">当在 &lt;code&gt;&lt;a href=&quot;group&quot;&gt;group()&lt;/a&gt;&lt;/code&gt; 或 &lt;code&gt;&lt;a href=&quot;transition&quot;&gt;transition&lt;/a&gt;()&lt;/code&gt; 调用中使用序列时，仅在每个内部动画步骤完成后才继续执行下一条指令。</target>
        </trans-unit>
        <trans-unit id="f7f49ac27e9c43d7f3eccbab41e653302c0fdad0" translate="yes" xml:space="preserve">
          <source>When a translation is missing, the build succeeds but generates a warning such as &lt;code&gt;Missing translation for message &quot;foo&quot;&lt;/code&gt;. You can configure the level of warning that is generated by the Angular compiler:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c3cbb8c4d353fced8240d3f69c79bebf4d68b840" translate="yes" xml:space="preserve">
          <source>When a user clicks a &lt;em&gt;Dashboard&lt;/em&gt; hero, the &lt;code&gt;DashboardComponent&lt;/code&gt; tells the &lt;code&gt;&lt;a href=&quot;../api/router/router&quot;&gt;Router&lt;/a&gt;&lt;/code&gt; to navigate to &lt;code&gt;heroes/:id&lt;/code&gt;. The &lt;code&gt;:id&lt;/code&gt; is a route parameter whose value is the &lt;code&gt;id&lt;/code&gt; of the hero to edit.</source>
          <target state="translated">当用户单击&lt;em&gt;仪表板&lt;/em&gt;英雄时， &lt;code&gt;DashboardComponent&lt;/code&gt; 告诉 &lt;code&gt;&lt;a href=&quot;../api/router/router&quot;&gt;Router&lt;/a&gt;&lt;/code&gt; 导航至 &lt;code&gt;heroes/:id&lt;/code&gt; 。的 &lt;code&gt;:id&lt;/code&gt; 是一个路由参数，其值是 &lt;code&gt;id&lt;/code&gt; 英雄编辑。</target>
        </trans-unit>
        <trans-unit id="72ff44014ef60a516903197c78b674811bdbbea1" translate="yes" xml:space="preserve">
          <source>When a user clicks the button, the &lt;code&gt;profileForm&lt;/code&gt; model is updated with new values for &lt;code&gt;firstName&lt;/code&gt; and &lt;code&gt;street&lt;/code&gt;. Notice that &lt;code&gt;street&lt;/code&gt; is provided in an object inside the &lt;code&gt;address&lt;/code&gt; property. This is necessary because the &lt;code&gt;patchValue()&lt;/code&gt; method applies the update against the model structure. &lt;code&gt;PatchValue()&lt;/code&gt; only updates properties that the form model defines.</source>
          <target state="translated">当用户单击按钮时， &lt;code&gt;profileForm&lt;/code&gt; 模型将使用 &lt;code&gt;firstName&lt;/code&gt; 和 &lt;code&gt;street&lt;/code&gt; 的新值进行更新。请注意， &lt;code&gt;address&lt;/code&gt; 属性内的对象中提供了 &lt;code&gt;street&lt;/code&gt; 。这是必需的，因为 &lt;code&gt;patchValue()&lt;/code&gt; 方法对模型结构应用更新。 &lt;code&gt;PatchValue()&lt;/code&gt; 仅更新表单模型定义的属性。</target>
        </trans-unit>
        <trans-unit id="5e7904f8fa1f1502df6bd3b94de8f69ab0c6c02d" translate="yes" xml:space="preserve">
          <source>When a user presses and releases a key, the &lt;code&gt;keyup&lt;/code&gt; event occurs, and Angular provides a corresponding DOM event object in the &lt;code&gt;$event&lt;/code&gt; variable which this code passes as a parameter to the component's &lt;code&gt;onKey()&lt;/code&gt; method.</source>
          <target state="translated">当用户按下并释放一个键时，会发生 &lt;code&gt;keyup&lt;/code&gt; 事件，并且Angular在 &lt;code&gt;$event&lt;/code&gt; 变量中提供一个相应的DOM事件对象，此代码作为参数传递给组件的 &lt;code&gt;onKey()&lt;/code&gt; 方法。</target>
        </trans-unit>
        <trans-unit id="d3234f0499ea9f65642e43dacff906896c520058" translate="yes" xml:space="preserve">
          <source>When a view uses the &lt;a href=&quot;changedetectionstrategy#OnPush&quot;&gt;OnPush&lt;/a&gt; (checkOnce) change detection strategy, explicitly marks the view as changed so that it can be checked again.</source>
          <target state="translated">当视图使用&lt;a href=&quot;changedetectionstrategy#OnPush&quot;&gt;OnPush&lt;/a&gt;（checkOnce）更改检测策略时，显式将视图标记为已更改，以便可以再次对其进行检查。</target>
        </trans-unit>
        <trans-unit id="92afbe4a7f59dc1d10742cbb3b2bd915712f7d27" translate="yes" xml:space="preserve">
          <source>When accessing multiple local refs with the same name in template bindings, the first is matched (previously, the last instance was matched).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f2a58965900b52ff44960aeb5d3b1ab8663f125a" translate="yes" xml:space="preserve">
          <source>When all dependencies are in place, &lt;code&gt;AppComponent&lt;/code&gt; displays the user information.</source>
          <target state="translated">当所有依赖项都就绪后， &lt;code&gt;AppComponent&lt;/code&gt; 将显示用户信息。</target>
        </trans-unit>
        <trans-unit id="bd8f6d53233742cc77fab54767b182e5f57eee9a" translate="yes" xml:space="preserve">
          <source>When all requested services have been resolved and returned, Angular can call the component's constructor with those services as arguments.</source>
          <target state="translated">当所有请求的服务都被解析并返回后,Angular可以用这些服务作为参数调用组件的构造函数。</target>
        </trans-unit>
        <trans-unit id="b42dedf76e9162b85f232959c900f4d227b64bc8" translate="yes" xml:space="preserve">
          <source>When all routes were in one &lt;code&gt;AppRoutingModule&lt;/code&gt;, you put the default and &lt;a href=&quot;router#wildcard&quot;&gt;wildcard&lt;/a&gt; routes last, after the &lt;code&gt;/heroes&lt;/code&gt; route, so that the router had a chance to match a URL to the &lt;code&gt;/heroes&lt;/code&gt; route &lt;em&gt;before&lt;/em&gt; hitting the wildcard route and navigating to &quot;Page not found&quot;.</source>
          <target state="translated">当所有路由都在一个 &lt;code&gt;AppRoutingModule&lt;/code&gt; 中时，您将默认路由和&lt;a href=&quot;router#wildcard&quot;&gt;通配符&lt;/a&gt;路由放在 &lt;code&gt;/heroes&lt;/code&gt; 路由之后，以便路由器有机会将URL匹配到 &lt;code&gt;/heroes&lt;/code&gt; 路由，&lt;em&gt;然后&lt;/em&gt;点击通配符路由并导航到&amp;ldquo; Page not找到&amp;rdquo;。</target>
        </trans-unit>
        <trans-unit id="53aa78629efc3a0d160c3e30a269ba4457193e3c" translate="yes" xml:space="preserve">
          <source>When all routes were in one &lt;code&gt;AppRoutingModule&lt;/code&gt;, you put the default and &lt;a href=&quot;router-tutorial-toh#wildcard&quot;&gt;wildcard&lt;/a&gt; routes last, after the &lt;code&gt;/heroes&lt;/code&gt; route, so that the router had a chance to match a URL to the &lt;code&gt;/heroes&lt;/code&gt; route &lt;em&gt;before&lt;/em&gt; hitting the wildcard route and navigating to &quot;Page not found&quot;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6d84e128eb398288da3157378d60b0938fa2d8fd" translate="yes" xml:space="preserve">
          <source>When an AngularJS component directive supports transclusion, it may use the &lt;code&gt;ng-transclude&lt;/code&gt; directive in its template to mark the transclusion point:</source>
          <target state="translated">当AngularJS组件指令支持插入时，它可以在其模板中使用 &lt;code&gt;ng-transclude&lt;/code&gt; 指令标记插入点：</target>
        </trans-unit>
        <trans-unit id="0886c40024cc25c975acccf0b4cfdae9f2e72493" translate="yes" xml:space="preserve">
          <source>When an application contains a form, Angular must keep the view in sync with the component model and the component model in sync with the view. As users change values and make selections through the view, the new values must be reflected in the data model. Similarly, when the program logic changes values in the data model, those values must be reflected in the view.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3b810ca0a0152d462508ed51e0332b20030ce21c" translate="yes" xml:space="preserve">
          <source>When an application is laid out feature per feature in this way, it can also be migrated one feature at a time. For applications that don't already look like this, applying the rules in the AngularJS style guide is a highly recommended preparation step. And this is not just for the sake of the upgrade - it is just solid advice in general!</source>
          <target state="translated">当一个应用以这种方式按功能进行布局时,也可以一个功能一个功能地进行迁移。对于那些还不是这样的应用,应用AngularJS样式指南中的规则是一个强烈推荐的准备步骤。这不仅仅是为了升级,这只是一般的可靠建议!</target>
        </trans-unit>
        <trans-unit id="fb7971a77be20ffccf8add017ec31580e42caf7e" translate="yes" xml:space="preserve">
          <source>When an application uses your library, there might be some services that your library supplies which the client app doesn't use. In this case, the app developer should expect that service to be tree-shaken, and not contribute to the size of the compiled app. Because the application developer cannot know about or remedy a tree-shaking problem in the library, it is the responsibility of the library developer to do so. To prevent the retention of unused components, your library should use the lightweight injection token design pattern.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="47d77d1d4a7d81017ab7a88f89771a6bc5639dd4" translate="yes" xml:space="preserve">
          <source>When an applications starts, Angular first configures the root injector with the providers of all eagerly loaded NgModules &lt;em&gt;before&lt;/em&gt; creating its first component and injecting any of the provided services. Once the application begins, the app root injector is closed to new providers.</source>
          <target state="translated">当应用程序启动时，Angular首先使用所有急切加载的NgModule的提供程序配置根注入器，&lt;em&gt;然后再&lt;/em&gt;创建其第一个组件并注入任何提供的服务。一旦应用程序开始，应用程序根注入器将对新的提供者关闭。</target>
        </trans-unit>
        <trans-unit id="de05fecb69b29988cfd38b015be38ee5c1e10d06" translate="yes" xml:space="preserve">
          <source>When an area of the template is set to have animations disabled, &lt;strong&gt;all&lt;/strong&gt; inner components have their animations disabled as well. This means that you can disable all animations for an app by placing a host binding set on &lt;code&gt;@.disabled&lt;/code&gt; on the topmost Angular component.</source>
          <target state="translated">当模板的某个区域设置为禁用动画时，&lt;strong&gt;所有&lt;/strong&gt;内部组件也会禁用其动画。这意味着您可以通过将主机绑定集放置在最顶部的Angular组件上的 &lt;code&gt;@.disabled&lt;/code&gt; 上来禁用应用程序的所有动画。</target>
        </trans-unit>
        <trans-unit id="2158e7ac2d535c8a0d73be64130946207704b5dd" translate="yes" xml:space="preserve">
          <source>When an eagerly loaded module provides a service, for example a &lt;code&gt;UserService&lt;/code&gt;, that service is available application-wide. If the root module provides &lt;code&gt;UserService&lt;/code&gt; and imports another module that provides the same &lt;code&gt;UserService&lt;/code&gt;, Angular registers one of them in the root app injector (see &lt;a href=&quot;ngmodule-faq#q-reimport&quot;&gt;What if I import the same module twice?&lt;/a&gt;).</source>
          <target state="translated">当热切加载的模块提供服务（例如 &lt;code&gt;UserService&lt;/code&gt; )时，该服务将在整个应用程序范围内可用。如果根模块提供 &lt;code&gt;UserService&lt;/code&gt; 并导入另一个提供相同 &lt;code&gt;UserService&lt;/code&gt; 的模块，则Angular将其中一个注册到根应用程序注入器中（请参阅&lt;a href=&quot;ngmodule-faq#q-reimport&quot;&gt;如果两次导入相同的模块该怎么办？&lt;/a&gt;）。</target>
        </trans-unit>
        <trans-unit id="05aae7978db62e7e7c9429220e2ca190a4d0d35e" translate="yes" xml:space="preserve">
          <source>When an element is repeated within &lt;code&gt;*&lt;a href=&quot;../api/common/ngforof&quot;&gt;ngFor&lt;/a&gt;&lt;/code&gt;, the context is an &lt;code&gt;NgForRow&lt;/code&gt; whose &lt;code&gt;$implicit&lt;/code&gt; property is the value of the row instance value. For example, the &lt;code&gt;hero&lt;/code&gt; in &lt;code&gt;*&lt;a href=&quot;../api/common/ngforof&quot;&gt;ngFor&lt;/a&gt;=&quot;let hero of heroes&quot;&lt;/code&gt;.</source>
          <target state="translated">当元素在 &lt;code&gt;*&lt;a href=&quot;../api/common/ngforof&quot;&gt;ngFor&lt;/a&gt;&lt;/code&gt; 中重复时，上下文是 &lt;code&gt;NgForRow&lt;/code&gt; ,其 &lt;code&gt;$implicit&lt;/code&gt; 属性是行实例值的值。例如， &lt;code&gt;hero&lt;/code&gt; 在 &lt;code&gt;*&lt;a href=&quot;../api/common/ngforof&quot;&gt;ngFor&lt;/a&gt;=&quot;let hero of heroes&quot;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="2c546d06df1559440a1db83b4e5c1db73f342fce" translate="yes" xml:space="preserve">
          <source>When an element within an HTML template has animations disabled using the &lt;code&gt;@.disabled&lt;/code&gt; host binding, animations are disabled on all inner elements as well. You can't selectively disable multiple animations on a single element.</source>
          <target state="translated">当HTML模板中的元素使用 &lt;code&gt;@.disabled&lt;/code&gt; 主机绑定禁用了动画时，所有内部元素也将禁用动画。您不能选择性地在单个元素上禁用多个动画。</target>
        </trans-unit>
        <trans-unit id="cf49456ce12909b793be4a1b5a0118ed11f90553" translate="yes" xml:space="preserve">
          <source>When an error occurs, you can obtain details of what failed in order to inform your user. In some cases, you might also automatically &lt;a href=&quot;http#retry&quot;&gt;retry the request&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d91d5acbcb6e8adb1db7278d2b85940b8c059799" translate="yes" xml:space="preserve">
          <source>When an item is added, a new instance of the template is added to the DOM.</source>
          <target state="translated">当一个项目被添加时,一个新的模板实例被添加到DOM中。</target>
        </trans-unit>
        <trans-unit id="6812fd0a944e938e939802bbf208e98821182752" translate="yes" xml:space="preserve">
          <source>When an item is removed, its template instance is removed from the DOM.</source>
          <target state="translated">当一个项目被移除时,它的模板实例将从DOM中移除。</target>
        </trans-unit>
        <trans-unit id="5a9a8569048e0b049afa4c46c8590c8fbf5d8867" translate="yes" xml:space="preserve">
          <source>When an output property emits an event, an event handler attached to that event in the template is invoked.</source>
          <target state="translated">当一个输出属性发出事件时,模板中附加到该事件的事件处理程序被调用。</target>
        </trans-unit>
        <trans-unit id="48be3c6780f2769a1c858ad1d1455b0a6aff02d0" translate="yes" xml:space="preserve">
          <source>When animations are disabled, &lt;code&gt;&lt;a href=&quot;../api/animations/transition&quot;&gt;transition&lt;/a&gt;()&lt;/code&gt; styles can be skipped, but &lt;code&gt;&lt;a href=&quot;../api/animations/state&quot;&gt;state&lt;/a&gt;()&lt;/code&gt; styles can't.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e7a21063df73c511a2f56f2ef1bf9a8ff345822c" translate="yes" xml:space="preserve">
          <source>When animations are disabled, &lt;code&gt;&lt;a href=&quot;../api/animations/transition&quot;&gt;transition&lt;/a&gt;()&lt;/code&gt; styles can be skipped, but &lt;code&gt;&lt;a href=&quot;../api/common/upgrade/%24locationshim#state&quot;&gt;state()&lt;/a&gt;&lt;/code&gt; styles can't.</source>
          <target state="translated">禁用动画时，可以跳过 &lt;code&gt;&lt;a href=&quot;../api/animations/transition&quot;&gt;transition&lt;/a&gt;()&lt;/code&gt; 样式，但不能跳过 &lt;code&gt;&lt;a href=&quot;../api/common/upgrade/%24locationshim#state&quot;&gt;state()&lt;/a&gt;&lt;/code&gt; 样式。</target>
        </trans-unit>
        <trans-unit id="ac94510c5d5464b64237bd0b1d59b22bf0887771" translate="yes" xml:space="preserve">
          <source>When applied to an element in a template, makes that element a link that initiates navigation to a route. Navigation opens one or more routed components in one or more &lt;code&gt;&amp;lt;&lt;a href=&quot;router/routeroutlet&quot;&gt;router-outlet&lt;/a&gt;&amp;gt;&lt;/code&gt; locations on the page.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="436ea258a3a19f4814ff3c058ec982f98f3481d0" translate="yes" xml:space="preserve">
          <source>When applied to an element in a template, makes that element a link that initiates navigation to a route. Navigation opens one or more routed components in one or more &lt;code&gt;&amp;lt;&lt;a href=&quot;routeroutlet&quot;&gt;router-outlet&lt;/a&gt;&amp;gt;&lt;/code&gt; locations on the page.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="29c152c927172bc42277bd311cf9c51039c351e7" translate="yes" xml:space="preserve">
          <source>When autodetect is &lt;code&gt;true&lt;/code&gt;, the test fixture calls &lt;code&gt;detectChanges&lt;/code&gt; immediately after creating the component. Then it listens for pertinent zone events and calls &lt;code&gt;detectChanges&lt;/code&gt; accordingly. When your test code modifies component property values directly, you probably still have to call &lt;code&gt;fixture.detectChanges&lt;/code&gt; to trigger data binding updates.</source>
          <target state="translated">当 &lt;code&gt;detectChanges&lt;/code&gt; 为 &lt;code&gt;true&lt;/code&gt; 时，测试装置在创建组件后立即调用detectChanges。然后，它侦听相关的区域事件，并相应地调用 &lt;code&gt;detectChanges&lt;/code&gt; 。当您的测试代码直接修改组件属性值时，您可能仍然必须调用 &lt;code&gt;fixture.detectChanges&lt;/code&gt; 来触发数据绑定更新。</target>
        </trans-unit>
        <trans-unit id="1ecd519d8a9d8489a70ac8222bf8f59f12cfdafb" translate="yes" xml:space="preserve">
          <source>When binding to ARIA attributes in Angular, you must use the &lt;code&gt;attr.&lt;/code&gt; prefix, as the ARIA specification depends specifically on HTML attributes rather than properties of DOM elements.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a2068eaf5a2c701ccbfce60b3646bbea4685601e" translate="yes" xml:space="preserve">
          <source>When binding to ARIA attributes in Angular, you must use the &lt;code&gt;attr.&lt;/code&gt; prefix, as the ARIA specification depends specifically on HTML attributes rather than properties on DOM elements.</source>
          <target state="translated">在Angular中绑定到ARIA属性时，必须使用 &lt;code&gt;attr.&lt;/code&gt; 前缀，因为ARIA规范特别取决于HTML属性，而不是DOM元素的属性。</target>
        </trans-unit>
        <trans-unit id="1d403c7f0a15567441991f43194df4dfc6f894d3" translate="yes" xml:space="preserve">
          <source>When bootstrapping a new root component into an application, Angular mounts the specified application component onto DOM elements identified by the componentType's selector and kicks off automatic change detection to finish initializing the component.</source>
          <target state="translated">当将一个新的根组件引导到应用程序中时,Angular会将指定的应用程序组件挂载到由componentType的选择器识别的DOM元素上,并启动自动变化检测来完成组件的初始化。</target>
        </trans-unit>
        <trans-unit id="0d4d47affb8c464a81063c15c40e841a06125813" translate="yes" xml:space="preserve">
          <source>When both guard and resolvers are specified, the resolvers are not executed until all guards have run and succeeded. For example, consider the following route configuration:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2b86c2426923dc82f318377489363981eae2a0e1" translate="yes" xml:space="preserve">
          <source>When building Angular applications you can take advantage of sophisticated first-party libraries, such as &lt;a href=&quot;https://material.angular.io/&quot;&gt;Angular Material&lt;/a&gt;, as well as rich ecosystem of third-party libraries. See the &lt;a href=&quot;https://angular.io/resources&quot;&gt;Angular Resources&lt;/a&gt; page for links to the most popular ones.</source>
          <target state="translated">在构建Angular应用程序时，您可以利用复杂的第一方库（例如&lt;a href=&quot;https://material.angular.io/&quot;&gt;Angular Material&lt;/a&gt;）以及丰富的第三方库生态系统。请参阅&lt;a href=&quot;https://angular.io/resources&quot;&gt;Angular Resources&lt;/a&gt;页面，以获取最受欢迎的链接。</target>
        </trans-unit>
        <trans-unit id="3538cbab0f3099d8265f02d7a64fc66ea5ca6d1e" translate="yes" xml:space="preserve">
          <source>When building Angular applications you can take advantage of sophisticated first-party libraries, such as &lt;a href=&quot;https://material.angular.io/&quot;&gt;Angular Material&lt;/a&gt;, as well as rich ecosystem of third-party libraries. See the &lt;a href=&quot;resources&quot;&gt;Angular Resources&lt;/a&gt; page for links to the most popular ones.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="89bb95bbe2563b71f388aa0a0055510166a2c680" translate="yes" xml:space="preserve">
          <source>When building applications, you want to ensure that only the required resources are loaded when necessary. Whether that be loading of assets or code, making sure everything that can be deferred until needed keeps your application running efficiently. This is especially true when running different frameworks in the same application.</source>
          <target state="translated">在构建应用程序时,你要确保只在必要时加载所需的资源。无论是加载资产还是代码,确保所有可以推迟到需要时才加载的东西都能让你的应用程序高效运行。当在同一个应用程序中运行不同的框架时,尤其如此。</target>
        </trans-unit>
        <trans-unit id="9386092cd495cfdab016752500f432eb023edc15" translate="yes" xml:space="preserve">
          <source>When building complex forms, managing the different areas of information is easier in smaller sections, and some groups of information naturally fall into the same group. Using a nested form group instance allows you to break large forms groups into smaller, more manageable ones.</source>
          <target state="translated">在构建复杂的表单时,用较小的部分来管理不同区域的信息更容易,一些信息组自然而然地归入同一组。使用嵌套的表单组实例可以将大型表单组分解成更小的、更容易管理的表单组。</target>
        </trans-unit>
        <trans-unit id="c507192c860dccde88e0964befd1399320d26903" translate="yes" xml:space="preserve">
          <source>When building complex forms, managing the different areas of information is easier in smaller sections. Using a nested form group instance allows you to break large forms groups into smaller, more manageable ones.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0fc20bd4d6affd513b7a83567c797dc2341e8f77" translate="yes" xml:space="preserve">
          <source>When building forms in Angular, it's important to understand how the framework handles data flowing from the user or from programmatic changes. Reactive and template-driven forms follow two different strategies when handling form input. The data flow examples below begin with the favorite color input field example from above, and then show how changes to favorite color are handled in reactive forms compared to template-driven forms.</source>
          <target state="translated">在Angular中构建表单时,了解该框架如何处理来自用户或程序变更的数据流非常重要。反应式和模板驱动的表单在处理表单输入时遵循两种不同的策略。下面的数据流示例从上面的喜爱的颜色输入字段示例开始,然后展示与模板驱动的表单相比,反应式表单如何处理喜爱颜色的变化。</target>
        </trans-unit>
        <trans-unit id="6fc9bc402f56e1c96af7199e1d509f4661b9855c" translate="yes" xml:space="preserve">
          <source>When building web applications, making sure your application is compatible with the majority of browsers is a goal. Even as JavaScript continues to evolve, with new features being introduced, not all browsers are updated with support for these new features at the same pace.</source>
          <target state="translated">在构建Web应用程序时,确保你的应用程序与大多数浏览器兼容是一个目标。即使JavaScript不断发展,不断推出新的功能,但并不是所有的浏览器都会以同样的速度更新对这些新功能的支持。</target>
        </trans-unit>
        <trans-unit id="5b742400e1e277930228a0191e1a7a39fe26b49a" translate="yes" xml:space="preserve">
          <source>When building web applications, you want to make sure your application is compatible with the majority of browsers. Even as JavaScript continues to evolve, with new features being introduced, not all browsers are updated with support for these new features at the same pace.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f8b8eff21bbd0f8e5d36d2990adb2865268b95d6" translate="yes" xml:space="preserve">
          <source>When building with the CLI, be sure to include the linked style file among the assets to be copied to the server as described in the &lt;a href=&quot;https://github.com/angular/angular-cli/wiki/stories-asset-configuration&quot;&gt;CLI wiki&lt;/a&gt;.</source>
          <target state="translated">使用CLI进行构建时，请确保将要链接的样式文件包括在要复制到服务器的资产中，如&lt;a href=&quot;https://github.com/angular/angular-cli/wiki/stories-asset-configuration&quot;&gt;CLI Wiki中所述&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="bab6d7c828b83308f18a53ca8a90ddce5abb3f87" translate="yes" xml:space="preserve">
          <source>When building with the CLI, you must configure the &lt;code&gt;angular.json&lt;/code&gt; to include &lt;em&gt;all external assets&lt;/em&gt;, including external style files.</source>
          <target state="translated">使用CLI进行构建时，必须将 &lt;code&gt;angular.json&lt;/code&gt; 配置为包括&lt;em&gt;所有外部资产&lt;/em&gt;，包括外部样式文件。</target>
        </trans-unit>
        <trans-unit id="1bf2af4af56d10c85356870b1e312679a109012f" translate="yes" xml:space="preserve">
          <source>When called with unknown elements, such as a custom element name (&lt;code&gt;popup-element&lt;/code&gt; in our example), the methods will return a generic type, such as &lt;code&gt;HTMLElement&lt;/code&gt;, since TypeScript can't infer the correct type of the returned element.</source>
          <target state="translated">当使用未知元素（例如自定义元素名称（在我们的示例中为 &lt;code&gt;popup-element&lt;/code&gt; ））调用时，这些方法将返回通用类型，例如 &lt;code&gt;HTMLElement&lt;/code&gt; ，因为TypeScript无法推断返回元素的正确类型。</target>
        </trans-unit>
        <trans-unit id="63d51b615b5761b9b503679d40bc888ba4267a20" translate="yes" xml:space="preserve">
          <source>When called within a &lt;code&gt;&lt;a href=&quot;sequence&quot;&gt;sequence&lt;/a&gt;()&lt;/code&gt; or a &lt;code&gt;&lt;a href=&quot;transition&quot;&gt;transition&lt;/a&gt;()&lt;/code&gt; call, does not continue to the next instruction until all of the inner animation steps have completed.</source>
          <target state="translated">在 &lt;code&gt;&lt;a href=&quot;sequence&quot;&gt;sequence&lt;/a&gt;()&lt;/code&gt; 或 &lt;code&gt;&lt;a href=&quot;transition&quot;&gt;transition&lt;/a&gt;()&lt;/code&gt; 调用中调用时，直到所有内部动画步骤都已完成才继续执行下一条指令。</target>
        </trans-unit>
        <trans-unit id="dc86cf8f39cfd1795f74b2f88d47a1dafd6a033a" translate="yes" xml:space="preserve">
          <source>When compiling a template, you need to determine a set of selectors which should be used for triggering their corresponding directives.</source>
          <target state="translated">在编译模板时,你需要确定一组选择器,这些选择器应该用于触发它们相应的指令。</target>
        </trans-unit>
        <trans-unit id="eff0e89b5209a2cd9fe83f63b8126db2c132d8ea" translate="yes" xml:space="preserve">
          <source>When creating an &lt;code&gt;&lt;a href=&quot;injectiontoken&quot;&gt;InjectionToken&lt;/a&gt;&lt;/code&gt;, you can optionally specify a factory function which returns (possibly by creating) a default value of the parameterized type &lt;code&gt;T&lt;/code&gt;. This sets up the &lt;code&gt;&lt;a href=&quot;injectiontoken&quot;&gt;InjectionToken&lt;/a&gt;&lt;/code&gt; using this factory as a provider as if it was defined explicitly in the application's root injector. If the factory function, which takes zero arguments, needs to inject dependencies, it can do so using the &lt;code&gt;inject&lt;/code&gt; function. See below for an example.</source>
          <target state="translated">创建 &lt;code&gt;&lt;a href=&quot;injectiontoken&quot;&gt;InjectionToken&lt;/a&gt;&lt;/code&gt; 时，可以有选择地指定一个工厂函数，该函数返回（可能通过创建）参数化类型 &lt;code&gt;T&lt;/code&gt; 的默认值。这将使用该工厂作为提供者来设置 &lt;code&gt;&lt;a href=&quot;injectiontoken&quot;&gt;InjectionToken&lt;/a&gt;&lt;/code&gt; ，就好像它是在应用程序的根注入器中明确定义的一样。如果使用零参数的工厂函数需要注入依赖项，则可以使用 &lt;code&gt;inject&lt;/code&gt; 函数来这样做。请参阅下面的示例。</target>
        </trans-unit>
        <trans-unit id="a06654762cbf15c6a7d824d62d5f3ff30f8cd430" translate="yes" xml:space="preserve">
          <source>When creating an observable you should determine how you want that observable to be used and whether or not you want to multicast its values.</source>
          <target state="translated">当创建一个观测值时,您应该确定如何使用该观测值,以及是否要多播其值。</target>
        </trans-unit>
        <trans-unit id="d1e3e29636aebc1983bfce61a744145fc07ef5de" translate="yes" xml:space="preserve">
          <source>When defining a &lt;a href=&quot;glossary#directive&quot;&gt;directive&lt;/a&gt;, the &lt;code&gt;@&lt;a href=&quot;../api/core/input&quot;&gt;Input&lt;/a&gt;()&lt;/code&gt; decorator on a directive property makes that property available as a &lt;em&gt;target&lt;/em&gt; of a &lt;a href=&quot;property-binding&quot;&gt;property binding&lt;/a&gt;. Data values flow into an input property from the data source identified in the &lt;a href=&quot;glossary#template-expression&quot;&gt;template expression&lt;/a&gt; to the right of the equal sign.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="749c6b45f20c32758d29b06fe77e09e8859f0280" translate="yes" xml:space="preserve">
          <source>When defining a &lt;a href=&quot;glossary#directive&quot;&gt;directive&lt;/a&gt;, the &lt;code&gt;@&lt;a href=&quot;../api/core/input&quot;&gt;Input&lt;/a&gt;()&lt;/code&gt; decorator on a directive property makes that property available as a &lt;em&gt;target&lt;/em&gt; of a &lt;a href=&quot;template-syntax#property-binding&quot;&gt;property binding&lt;/a&gt;. Data values flow into an input property from the data source identified in the &lt;a href=&quot;glossary#template-expression&quot;&gt;template expression&lt;/a&gt; to the right of the equal sign.</source>
          <target state="translated">当定义一个&lt;a href=&quot;glossary#directive&quot;&gt;指令&lt;/a&gt;中， &lt;code&gt;@&lt;a href=&quot;../api/core/input&quot;&gt;Input&lt;/a&gt;()&lt;/code&gt; 在指向性装饰使得可以作为一个该属性&lt;em&gt;目标&lt;/em&gt;一个的&lt;a href=&quot;template-syntax#property-binding&quot;&gt;属性绑定&lt;/a&gt;。数据值从&lt;a href=&quot;glossary#template-expression&quot;&gt;等式&lt;/a&gt;右边的模板表达式中标识的数据源流入输入属性。</target>
        </trans-unit>
        <trans-unit id="2801c378bff57f04aaa6ea04537d4ba004eea0d8" translate="yes" xml:space="preserve">
          <source>When defining a &lt;a href=&quot;glossary#directive&quot;&gt;directive&lt;/a&gt;, the &lt;code&gt;@&lt;a href=&quot;../api/core/output&quot;&gt;Output&lt;/a&gt;{}&lt;/code&gt; decorator on a directive property makes that property available as a &lt;em&gt;target&lt;/em&gt; of &lt;a href=&quot;event-binding&quot;&gt;event binding&lt;/a&gt;. Events stream &lt;em&gt;out&lt;/em&gt; of this property to the receiver identified in the &lt;a href=&quot;glossary#template-expression&quot;&gt;template expression&lt;/a&gt; to the right of the equal sign.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4307d2cc44bc7a97d4a4418574bb1547f7624e08" translate="yes" xml:space="preserve">
          <source>When defining a &lt;a href=&quot;glossary#directive&quot;&gt;directive&lt;/a&gt;, the &lt;code&gt;@&lt;a href=&quot;../api/core/output&quot;&gt;Output&lt;/a&gt;{}&lt;/code&gt; decorator on a directive property makes that property available as a &lt;em&gt;target&lt;/em&gt; of &lt;a href=&quot;template-syntax#event-binding&quot;&gt;event binding&lt;/a&gt;. Events stream &lt;em&gt;out&lt;/em&gt; of this property to the receiver identified in the &lt;a href=&quot;glossary#template-expression&quot;&gt;template expression&lt;/a&gt; to the right of the equal sign.</source>
          <target state="translated">当定义一个&lt;a href=&quot;glossary#directive&quot;&gt;指令&lt;/a&gt;中， &lt;code&gt;@&lt;a href=&quot;../api/core/output&quot;&gt;Output&lt;/a&gt;{}&lt;/code&gt; 上的指向性装饰使得可用的属性作为&lt;em&gt;目标&lt;/em&gt;的&lt;a href=&quot;template-syntax#event-binding&quot;&gt;事件绑定&lt;/a&gt;。事件&lt;em&gt;从&lt;/em&gt;该属性&lt;em&gt;流出&lt;/em&gt;到等号右边的&lt;a href=&quot;glossary#template-expression&quot;&gt;模板表达式中&lt;/a&gt;标识的接收者。</target>
        </trans-unit>
        <trans-unit id="3cef3cb91c2c647878c9cddaa3fa8393736c0a9d" translate="yes" xml:space="preserve">
          <source>When do I add components to &lt;code&gt;entryComponents&lt;/code&gt;?</source>
          <target state="translated">何时将组件添加到 &lt;code&gt;entryComponents&lt;/code&gt; ？</target>
        </trans-unit>
        <trans-unit id="e4be4307e52967d21c990d182cfe4e0ac164bd6d" translate="yes" xml:space="preserve">
          <source>When enabled, the &lt;code&gt;.js&lt;/code&gt; output of &lt;code&gt;ngc&lt;/code&gt; does not include any lazy-loaded template or style URLs.</source>
          <target state="translated">启用后， &lt;code&gt;ngc&lt;/code&gt; 的 &lt;code&gt;.js&lt;/code&gt; 输出不包含任何延迟加载的模板或样式URL。</target>
        </trans-unit>
        <trans-unit id="9fc91b10b4c2892fce952b0e57b529770411dad7" translate="yes" xml:space="preserve">
          <source>When enabling the new strict mode in version 9, you might encounter template errors that didn't arise in either of the previous modes. These errors often represent genuine type mismatches in the templates that were not caught by the previous tooling. If this is the case, the error message should make it clear where in the template the problem occurs.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="78cfd68dc9b0bf523c79b28df0b08d4cf40e6063" translate="yes" xml:space="preserve">
          <source>When false (the default), removes blank text nodes from compiled templates, which results in smaller emitted template factory modules. Set to true to preserve blank text nodes.</source>
          <target state="translated">设为false(默认值)时,从编译的模板中删除空白文本节点,从而使发出的模板工厂模块更小。设为true时,保留空白文本节点。</target>
        </trans-unit>
        <trans-unit id="a48aec62988f1ccca24b1925a6fcfd92ea3a485f" translate="yes" xml:space="preserve">
          <source>When false, disables interactive input prompts.</source>
          <target state="translated">当为假时,禁用交互式输入提示。</target>
        </trans-unit>
        <trans-unit id="187407e31db6569d8a862bbe786d50251332d665" translate="yes" xml:space="preserve">
          <source>When false, factory files are generated only for &lt;code&gt;.ts&lt;/code&gt; files. Do this when using factory summaries.</source>
          <target state="translated">如果为false，则仅为 &lt;code&gt;.ts&lt;/code&gt; 文件生成工厂文件。使用工厂摘要时，请执行此操作。</target>
        </trans-unit>
        <trans-unit id="ef603dd1a4473adca892b6e5005cb3af75201392" translate="yes" xml:space="preserve">
          <source>When generating a component file with &lt;code&gt;ng generate component&lt;/code&gt;, the CLI emits an empty CSS styles file (&lt;code&gt;.css&lt;/code&gt;) by default. You can configure the CLI to default to your preferred CSS preprocessor as explained in the &lt;a href=&quot;https://github.com/angular/angular-cli/wiki/stories-css-preprocessors&quot;&gt;CLI wiki&lt;/a&gt;.</source>
          <target state="translated">当使用 &lt;code&gt;ng generate component&lt;/code&gt; 生成组件文件时，默认情况下，CLI会生成一个空的CSS样式文件（ &lt;code&gt;.css&lt;/code&gt; ）。您可以将CLI配置为默认使用首选的CSS预处理器，如&lt;a href=&quot;https://github.com/angular/angular-cli/wiki/stories-css-preprocessors&quot;&gt;CLI Wiki中所述&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="9f8b7dce71874522c7e0f1d98b7e48a92163a09b" translate="yes" xml:space="preserve">
          <source>When generating a new app, the CLI prompts you to select CSS or a CSS preprocessor. For this example, accept the default of &lt;code&gt;CSS&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e66e299f045744162ddfe45522dbce7add492b38" translate="yes" xml:space="preserve">
          <source>When given a tuple with x and y position value, the router uses that offset each time it scrolls. When given a function, the router invokes the function every time it restores scroll position.</source>
          <target state="translated">当给定一个带有x和y位置值的元组时,路由器在每次滚动时使用该偏移量。当给定一个函数时,路由器每次恢复滚动位置时都会调用该函数。</target>
        </trans-unit>
        <trans-unit id="7ef92686417b75b5cbea84d910778edba78cd2a4" translate="yes" xml:space="preserve">
          <source>When given an activated route, applies the given commands starting from the route. Otherwise, applies the given command starting from the root.</source>
          <target state="translated">给定激活的路由时,从路由开始应用给定的命令。否则,从根节点开始执行指定的命令。</target>
        </trans-unit>
        <trans-unit id="53849b6fde8d2206f676efc5f57c1bff53663e80" translate="yes" xml:space="preserve">
          <source>When implementing &lt;code&gt;registerOnTouched&lt;/code&gt; in your own value accessor, save the given function so your class calls it when the control should be considered blurred or &quot;touched&quot;.</source>
          <target state="translated">在您自己的值访问器中实现 &lt;code&gt;registerOnTouched&lt;/code&gt; 时，保存给定函数，以便您的类在应将控件视为模糊或&amp;ldquo;触摸&amp;rdquo;时调用它。</target>
        </trans-unit>
        <trans-unit id="6659f36f8906d9b6df663ed12a7ea8edf531eaf8" translate="yes" xml:space="preserve">
          <source>When implementing the &lt;code&gt;registerOnChange&lt;/code&gt; method in your own value accessor, save the given function so your class calls it at the appropriate time.</source>
          <target state="translated">在您自己的值访问器中实现 &lt;code&gt;registerOnChange&lt;/code&gt; 方法时，请保存给定的函数，以便您的类在适当的时间调用它。</target>
        </trans-unit>
        <trans-unit id="e24b1f3a3c5786e4d0e0b368b389c36801747d1a" translate="yes" xml:space="preserve">
          <source>When injected, &lt;code&gt;&lt;a href=&quot;httpbackend&quot;&gt;HttpBackend&lt;/a&gt;&lt;/code&gt; dispatches requests directly to the backend, without going through the interceptor chain.</source>
          <target state="translated">注入后， &lt;code&gt;&lt;a href=&quot;httpbackend&quot;&gt;HttpBackend&lt;/a&gt;&lt;/code&gt; 直接将请求调度到后端，而无需通过拦截器链。</target>
        </trans-unit>
        <trans-unit id="580455f83a9bed03f0a9761dbfac0d9fa7233a45" translate="yes" xml:space="preserve">
          <source>When instantiating a &lt;code&gt;&lt;a href=&quot;formgroup&quot;&gt;FormGroup&lt;/a&gt;&lt;/code&gt;, pass in a collection of child controls as the first argument. The key for each child registers the name for the control.</source>
          <target state="translated">实例化 &lt;code&gt;&lt;a href=&quot;formgroup&quot;&gt;FormGroup&lt;/a&gt;&lt;/code&gt; 时，传入子控件的集合作为第一个参数。每个子项的键都会注册控件的名称。</target>
        </trans-unit>
        <trans-unit id="1dd82c5d8059bec900275dede8a10d9747aa6216" translate="yes" xml:space="preserve">
          <source>When it appears in &lt;strong&gt;square brackets&lt;/strong&gt; ([ ]) to the &lt;strong&gt;left&lt;/strong&gt; of the equals (=), the property belongs to some &lt;em&gt;other&lt;/em&gt; component or directive; that property must be adorned with the &lt;code&gt;@&lt;a href=&quot;../api/core/input&quot;&gt;Input&lt;/a&gt;&lt;/code&gt; decorator.</source>
          <target state="translated">当它出现在等号（=）&lt;strong&gt;左侧&lt;/strong&gt;的&lt;strong&gt;方括号&lt;/strong&gt;（[]）中时，该属性属于某些&lt;em&gt;其他&lt;/em&gt;组件或指令。该属性必须使用 &lt;code&gt;@&lt;a href=&quot;../api/core/input&quot;&gt;Input&lt;/a&gt;&lt;/code&gt; &lt;a href=&quot;../api/core/input&quot;&gt;Input&lt;/a&gt;装饰器进行装饰。&lt;strong&gt;&lt;/strong&gt;&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="c9f1c7ae270dcf8ed2fb36e356720b2282a2234b" translate="yes" xml:space="preserve">
          <source>When it appears in the template expression to the &lt;strong&gt;&lt;em&gt;right&lt;/em&gt;&lt;/strong&gt; of the equals (=), it belongs to the template's component and does not require the &lt;code&gt;@&lt;a href=&quot;../api/core/input&quot;&gt;Input&lt;/a&gt;&lt;/code&gt; decorator.</source>
          <target state="translated">当它出现在等号（=）&lt;strong&gt;&lt;em&gt;右侧&lt;/em&gt;&lt;/strong&gt;的模板表达式中时，它属于模板的组件，并且不需要 &lt;code&gt;@&lt;a href=&quot;../api/core/input&quot;&gt;Input&lt;/a&gt;&lt;/code&gt; 装饰器。</target>
        </trans-unit>
        <trans-unit id="726cccf06c149c75e2bcbaec1213fc068eb64d58" translate="yes" xml:space="preserve">
          <source>When it returns true, the router will execute the regular navigation. When it returns false, the router will set the router state to an empty state. As a result, all the active components will be destroyed.</source>
          <target state="translated">当它返回true时,路由器将执行常规导航。当它返回false时,路由器将把路由器状态设置为空状态。因此,所有的活动组件将被销毁。</target>
        </trans-unit>
        <trans-unit id="65bc0e8f54c69a39293ba4c95d5c5b7ea95eb9e8" translate="yes" xml:space="preserve">
          <source>When items are added, moved, or removed in the iterable, the directive must re-render the appropriate DOM nodes. To minimize churn in the DOM, only nodes that have changed are re-rendered.</source>
          <target state="translated">当Iterable中的项目被添加、移动或删除时,该指令必须重新渲染相应的DOM节点。为了减少DOM中的变化,只有改变了的节点才会被重新渲染。</target>
        </trans-unit>
        <trans-unit id="3383a24d31d85f720ecee22674153dda0032675f" translate="yes" xml:space="preserve">
          <source>When items are reordered, their respective templates are reordered in the DOM.</source>
          <target state="translated">当项目被重新排序时,它们各自的模板会在DOM中重新排序。</target>
        </trans-unit>
        <trans-unit id="4e46635cb6851d2c8daac2e8a56141906f6c0a57" translate="yes" xml:space="preserve">
          <source>When migrating large applications from AngularJS to Angular using a hybrid approach, you want to migrate some of the most commonly used features first, and only use the less commonly used features if needed. Doing so helps you ensure that the application is still providing a seamless experience for your users while you are migrating.</source>
          <target state="translated">当使用混合方法将大型应用从AngularJS迁移到Angular时,你要先迁移一些最常用的功能,只有在需要时才使用不常用的功能。这样做可以帮助你确保应用在迁移的同时,仍然为用户提供无缝体验。</target>
        </trans-unit>
        <trans-unit id="f693ef9f80d346bdc6a2cb671a6ac073cf6c8c15" translate="yes" xml:space="preserve">
          <source>When moving applications into production, module loaders also make it easier to package them all up into production bundles with batteries included.</source>
          <target state="translated">当将应用转移到生产中时,模块装载机还可以更容易地将它们全部打包成包含电池的生产捆绑。</target>
        </trans-unit>
        <trans-unit id="974ce48422781e5e8f141c93cec08580c47ded29" translate="yes" xml:space="preserve">
          <source>When navigating to '/team/11/legacy/user/jim', the router changes the URL segment '/team/11/legacy/user/jim' to '/team/11/user/jim', and then instantiates the Team component with the User child component in it.</source>
          <target state="translated">当导航到'/team/11/legacy/user/jim'时,路由器将URL段'/team/11/legacy/user/jim'改为'/team/11/user/jim',然后将Team组件实例化,其中包含User子组件。</target>
        </trans-unit>
        <trans-unit id="4dabd38c86ae8f6fd64bd5a719e2864ff58a5263" translate="yes" xml:space="preserve">
          <source>When navigating to the &lt;code&gt;HeroDetailComponent&lt;/code&gt; you specified the &lt;em&gt;required&lt;/em&gt;&lt;code&gt;id&lt;/code&gt; of the hero-to-edit in the &lt;em&gt;route parameter&lt;/em&gt; and made it the second item of the &lt;a href=&quot;router#link-parameters-array&quot;&gt;&lt;em&gt;link parameters array&lt;/em&gt;&lt;/a&gt;.</source>
          <target state="translated">导航到 &lt;code&gt;HeroDetailComponent&lt;/code&gt; 时,您在&lt;em&gt;route参数中&lt;/em&gt;指定了&lt;em&gt;要&lt;/em&gt;编辑的hero 的&lt;em&gt;必需&lt;/em&gt; &lt;code&gt;id&lt;/code&gt; ，并将其作为&lt;a href=&quot;router#link-parameters-array&quot;&gt;&lt;em&gt;链接参数array&lt;/em&gt;&lt;/a&gt;的第二项。&lt;em&gt;&lt;/em&gt;&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="d4f490523f0905f447f19a9e5f19c51771307795" translate="yes" xml:space="preserve">
          <source>When navigating to the &lt;code&gt;HeroDetailComponent&lt;/code&gt; you specified the required &lt;code&gt;id&lt;/code&gt; of the hero-to-edit in the route parameter and made it the second item of the &lt;a href=&quot;router-tutorial-toh#link-parameters-array&quot;&gt;&lt;em&gt;link parameters array&lt;/em&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b596202b93519fa83ba3e0636fbd745a12579c58" translate="yes" xml:space="preserve">
          <source>When navigating within the page, you can omit the page URL when specifying the link that &lt;a href=&quot;docs-style-guide#anchors&quot;&gt;scrolls up&lt;/a&gt; to the beginning of this section.</source>
          <target state="translated">在页面中导航时，当指定&lt;a href=&quot;docs-style-guide#anchors&quot;&gt;向上滚动&lt;/a&gt;到本节开头的链接时，可以省略页面URL 。</target>
        </trans-unit>
        <trans-unit id="47e71f5eac56adacb97cdaa135062c7be281d29c" translate="yes" xml:space="preserve">
          <source>When operating on a blank value, the pipe returns the blank value.</source>
          <target state="translated">当对空白值进行操作时,管道返回空白值。</target>
        </trans-unit>
        <trans-unit id="9470fc75d4f16eb75457c7c0701e316180391ae8" translate="yes" xml:space="preserve">
          <source>When operating on an &lt;code&gt;Array&lt;/code&gt;, the returned &lt;code&gt;Array&lt;/code&gt; is always a copy even when all the elements are being returned.</source>
          <target state="translated">在对 &lt;code&gt;Array&lt;/code&gt; 进行操作时，即使返回所有元素，返回的 &lt;code&gt;Array&lt;/code&gt; 也始终是副本。</target>
        </trans-unit>
        <trans-unit id="af8a1731fb61ac75119cbee0bc7096781d75858e" translate="yes" xml:space="preserve">
          <source>When possible, every snippet of code on a guide page should be derived from a code sample file. You tell the Angular documentation engine which code file - or fragment of a code file - to display by configuring &lt;code&gt;&amp;lt;code-example&amp;gt;&lt;/code&gt; attributes.</source>
          <target state="translated">可能的话，指南页面上的每个代码段都应来自代码示例文件。您可以通过配置 &lt;code&gt;&amp;lt;code-example&amp;gt;&lt;/code&gt; 属性来告诉Angular文档引擎要显示哪个代码文件（或代码文件的片段）。</target>
        </trans-unit>
        <trans-unit id="81522af4b0c86ada0dcec0dca8396f6ec26055fe" translate="yes" xml:space="preserve">
          <source>When present, this directive/component is ignored by the AOT compiler. It remains in distributed code, and the JIT compiler attempts to compile it at run time, in the browser. To ensure the correct behavior, the app must import &lt;code&gt;@angular/compiler&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a5b961604f0d23587371ae93a940e91559d21115" translate="yes" xml:space="preserve">
          <source>When present, this module is ignored by the AOT compiler. It remains in distributed code, and the JIT compiler attempts to compile it at run time, in the browser. To ensure the correct behavior, the app must import &lt;code&gt;@angular/compiler&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="00f63586288bea23dcaec8ea63ddf7ac7e1aa5a7" translate="yes" xml:space="preserve">
          <source>When prompted with &lt;code&gt;Which stylesheet format would you like to use?&lt;/code&gt;, select &lt;code&gt;CSS&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="77d185254b99b0e6f27ad2e5b35d1d77632227bb" translate="yes" xml:space="preserve">
          <source>When prompted with &lt;code&gt;Would you like to add Angular routing?&lt;/code&gt;, select &lt;code&gt;N&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4b1e14412852555d0dead8387cd5e4230c5c2210" translate="yes" xml:space="preserve">
          <source>When reasoning about how a hybrid application works it is useful to have a mental model which describes what is happening and explains what is happening at the lowest level.</source>
          <target state="translated">当推理混合应用如何工作时,有一个心理模型是很有用的,它可以描述正在发生的事情,并解释正在发生的最低水平。</target>
        </trans-unit>
        <trans-unit id="910d857793129df45ce010da90a7c320c1e97758" translate="yes" xml:space="preserve">
          <source>When registered at the root, the module should be used as follows</source>
          <target state="translated">在根目录下注册时,该模块的使用方法如下</target>
        </trans-unit>
        <trans-unit id="2ab8eb9f66e9c33880450da52086157c8e225499" translate="yes" xml:space="preserve">
          <source>When registering the NgModule at the root, import as follows:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3a43104f732ee923f94742e9dafb4569962350fe" translate="yes" xml:space="preserve">
          <source>When resolving a token for a component/directive, Angular resolves it in two phases:</source>
          <target state="translated">当解析组件/指令的token时,Angular会分两个阶段进行解析。</target>
        </trans-unit>
        <trans-unit id="c2ae9e9637b2b33a1688e28b8fbf98ba2ef54d5d" translate="yes" xml:space="preserve">
          <source>When running a hybrid app, you may encounter situations where you need to inject some AngularJS dependencies into your Angular code. Maybe you have some business logic still in AngularJS services. Maybe you want access to AngularJS's built-in services like &lt;code&gt;$location&lt;/code&gt; or &lt;code&gt;$timeout&lt;/code&gt;.</source>
          <target state="translated">运行混合应用程序时，可能会遇到需要将一些AngularJS依赖项注入Angular代码的情况。也许您在AngularJS服务中仍有一些业务逻辑。也许您想访问AngularJS的内置服务，例如 &lt;code&gt;$location&lt;/code&gt; 或 &lt;code&gt;$timeout&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="3bed0140c9176f2a5f051b579d76e69efbabf955" translate="yes" xml:space="preserve">
          <source>When running in a web browser, &lt;a href=&quot;../api/platform-browser/browsermodule&quot;&gt;&lt;code&gt;BrowserModule&lt;/code&gt;&lt;/a&gt; is imported from the &lt;code&gt;platform-browser&lt;/code&gt; package, and supports services that simplify security and event processing, and allows applications to access browser-specific features, such as interpreting keyboard input and controlling the title of the document being displayed. All applications running in the browser use the same platform service.</source>
          <target state="translated">在Web浏览器中运行时，&lt;a href=&quot;../api/platform-browser/browsermodule&quot;&gt; &lt;code&gt;BrowserModule&lt;/code&gt; &lt;/a&gt;是从 &lt;code&gt;platform-browser&lt;/code&gt; 软件包中导入的，并支持简化安全性和事件处理的服务，并允许应用程序访问特定于浏览器的功能，例如解释键盘输入和控制所要文档的标题。显示。浏览器中运行的所有应用程序都使用相同的平台服务。</target>
        </trans-unit>
        <trans-unit id="d3b9496755bdbefbc04d83cf169903cd6a85e935" translate="yes" xml:space="preserve">
          <source>When running this test in your repo, you need the &lt;a href=&quot;https://github.com/TypeStrong/ts-node&quot;&gt;&lt;code&gt;ts-node&lt;/code&gt;&lt;/a&gt; package. You can avoid this by renaming &lt;code&gt;index.spec.ts&lt;/code&gt; to &lt;code&gt;index.spec.js&lt;/code&gt;.</source>
          <target state="translated">在仓库中运行此测试时，需要&lt;a href=&quot;https://github.com/TypeStrong/ts-node&quot;&gt; &lt;code&gt;ts-node&lt;/code&gt; &lt;/a&gt;软件包。您可以通过将 &lt;code&gt;index.spec.ts&lt;/code&gt; 重命名为index.spec.js来避免这种 &lt;code&gt;index.spec.js&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="07e991503049cbbac50ec7899e8632ccd8a050c1" translate="yes" xml:space="preserve">
          <source>When running this test in your repo, you need the &lt;a href=&quot;https://github.com/TypeStrong/ts-node&quot;&gt;&lt;code&gt;ts-node&lt;/code&gt;&lt;/a&gt; package. You can avoid this by renaming &lt;code&gt;my-builder.spec.ts&lt;/code&gt; to &lt;code&gt;my-builder.spec.js&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ca1e00f7ccb695467c2c1c8bdcb6dc3a59945ddf" translate="yes" xml:space="preserve">
          <source>When set to 'enabled', scrolls to the anchor element when the URL has a fragment. Anchor scrolling is disabled by default.</source>
          <target state="translated">当设置为 &quot;启用 &quot;时,当URL有一个片段时,会滚动到锚元素。默认情况下,锚点滚动是禁用的。</target>
        </trans-unit>
        <trans-unit id="df46a80b7b23d043f67f6a3e6c0f76498ecbceda" translate="yes" xml:space="preserve">
          <source>When steps are defined by &lt;code&gt;&lt;a href=&quot;style&quot;&gt;style&lt;/a&gt;()&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;animate&quot;&gt;animate&lt;/a&gt;()&lt;/code&gt; function calls, each call within the group is executed instantly.</source>
          <target state="translated">通过 &lt;code&gt;&lt;a href=&quot;style&quot;&gt;style&lt;/a&gt;()&lt;/code&gt; 或 &lt;code&gt;&lt;a href=&quot;animate&quot;&gt;animate&lt;/a&gt;()&lt;/code&gt; 函数调用定义步骤时，组中的每个调用都会立即执行。</target>
        </trans-unit>
        <trans-unit id="ec7e8de6c9a711c3fd504943c4759732a87b530d" translate="yes" xml:space="preserve">
          <source>When subscribing to an observable in a component, you almost always arrange to unsubscribe when the component is destroyed.</source>
          <target state="translated">当在组件中订阅一个可观察的对象时,你几乎总是安排在组件被销毁时取消订阅。</target>
        </trans-unit>
        <trans-unit id="45e5a628edb20ff84e443e611d2349ab61054cc7" translate="yes" xml:space="preserve">
          <source>When subscribing to an observable in a component, you almost always unsubscribe when the component is destroyed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c84a9e640ad95d9f4b83e468d1eed71718bb7381" translate="yes" xml:space="preserve">
          <source>When supplied, a custom handler for a completion notification from this emitter.</source>
          <target state="translated">当提供时,为来自该发射器的完成通知提供一个自定义处理程序。</target>
        </trans-unit>
        <trans-unit id="4df8413e1037a7ffe9bd25f1c95460fff8733865" translate="yes" xml:space="preserve">
          <source>When supplied, a custom handler for an error notification from this emitter.</source>
          <target state="translated">当提供时,为来自该发射器的错误通知提供一个自定义处理程序。</target>
        </trans-unit>
        <trans-unit id="00c39ac45b462ecb37bcc3a021a4360c58c40852" translate="yes" xml:space="preserve">
          <source>When supplied, a custom handler for emitted events.</source>
          <target state="translated">当提供时,为发射的事件提供一个自定义的处理程序。</target>
        </trans-unit>
        <trans-unit id="9cd3ac9350a3fd4b3d68c6da3292aed9974b8459" translate="yes" xml:space="preserve">
          <source>When switching between the two routes, the &lt;code&gt;HeroDetailComponent&lt;/code&gt; and &lt;code&gt;HeroListComponent&lt;/code&gt; now ease in from the left when routed to and will slide to the right when navigating away.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9e9d2f5c611c356028dee0d50c203b929a7a14e8" translate="yes" xml:space="preserve">
          <source>When switching between the two routes, the &lt;code&gt;HeroDetailComponent&lt;/code&gt; and &lt;code&gt;HeroListComponent&lt;/code&gt; will ease in from the left when routed to and will slide to the right when navigating away.</source>
          <target state="translated">当在两条路线之间切换时， &lt;code&gt;HeroDetailComponent&lt;/code&gt; 和 &lt;code&gt;HeroListComponent&lt;/code&gt; 在路由时会从左侧缓入，而在导航时会向右滑动。</target>
        </trans-unit>
        <trans-unit id="6d869f89c0032b7d502684b0c42e737ad757a361" translate="yes" xml:space="preserve">
          <source>When testing a component, only the service's public API should matter. In general, tests themselves should not make calls to remote servers. They should emulate such calls. The setup in this &lt;code&gt;app/twain/twain.component.spec.ts&lt;/code&gt; shows one way to do that:</source>
          <target state="translated">在测试组件时，仅服务的公共API应该很重要。通常，测试本身不应调用远程服务器。他们应该模仿这样的呼叫。此 &lt;code&gt;app/twain/twain.component.spec.ts&lt;/code&gt; 中的设置显示了一种执行此操作的方法：</target>
        </trans-unit>
        <trans-unit id="ef0f0acd351b519e1bdbe282aaf9c197ad051fd4" translate="yes" xml:space="preserve">
          <source>When testing a service with a dependency, provide the mock in the &lt;code&gt;providers&lt;/code&gt; array.</source>
          <target state="translated">在测试具有依赖项的服务时，请在 &lt;code&gt;providers&lt;/code&gt; 数组中提供模拟。</target>
        </trans-unit>
        <trans-unit id="0860f03444a0fc7aa7e1b3fb17143a54bae674bc" translate="yes" xml:space="preserve">
          <source>When the &lt;code&gt;&lt;a href=&quot;../api/router/routerlinkactive#isActive&quot;&gt;isActive&lt;/a&gt;&lt;/code&gt; expression returns a truthy value, &lt;code&gt;&lt;a href=&quot;../api/common/ngif&quot;&gt;NgIf&lt;/a&gt;&lt;/code&gt; adds the &lt;code&gt;ItemDetailComponent&lt;/code&gt; to the DOM. When the expression is falsy, &lt;code&gt;&lt;a href=&quot;../api/common/ngif&quot;&gt;NgIf&lt;/a&gt;&lt;/code&gt; removes the &lt;code&gt;ItemDetailComponent&lt;/code&gt; from the DOM, destroying that component and all of its sub-components.</source>
          <target state="translated">当 &lt;code&gt;&lt;a href=&quot;../api/router/routerlinkactive#isActive&quot;&gt;isActive&lt;/a&gt;&lt;/code&gt; 表达式返回truthy值， &lt;code&gt;&lt;a href=&quot;../api/common/ngif&quot;&gt;NgIf&lt;/a&gt;&lt;/code&gt; 添加 &lt;code&gt;ItemDetailComponent&lt;/code&gt; 到DOM。当表达式错误时， &lt;code&gt;&lt;a href=&quot;../api/common/ngif&quot;&gt;NgIf&lt;/a&gt;&lt;/code&gt; 将从DOM中删除 &lt;code&gt;ItemDetailComponent&lt;/code&gt; ，从而破坏该组件及其所有子组件。</target>
        </trans-unit>
        <trans-unit id="7210ba167993f8f770531f5c2b064669c209d5dc" translate="yes" xml:space="preserve">
          <source>When the &lt;code&gt;@.disabled&lt;/code&gt; binding is true, the &lt;code&gt;@childAnimation&lt;/code&gt; trigger doesn't kick off.</source>
          <target state="translated">当 &lt;code&gt;@.disabled&lt;/code&gt; 结合为真， &lt;code&gt;@childAnimation&lt;/code&gt; 触发器不揭开序幕。</target>
        </trans-unit>
        <trans-unit id="8caa4e29d9b4d974dd5d9041992426ba9ac8a426" translate="yes" xml:space="preserve">
          <source>When the &lt;code&gt;base&lt;/code&gt; tag is mis-configured, the app fails to load and the browser console displays &lt;code&gt;404 - Not Found&lt;/code&gt; errors for the missing files. Look at where it &lt;em&gt;tried&lt;/em&gt; to find those files and adjust the base tag appropriately.</source>
          <target state="translated">当 &lt;code&gt;base&lt;/code&gt; 标签是错误配置，应用程序未能加载，并且浏览器控制台显示 &lt;code&gt;404 - Not Found&lt;/code&gt; 为丢失的文件的错误。查看它在哪里&lt;em&gt;尝试&lt;/em&gt;找到那些文件并适当调整基本标记。</target>
        </trans-unit>
        <trans-unit id="e75c241922935cbd3ea5df02a84d5245d7cf9eba" translate="yes" xml:space="preserve">
          <source>When the &lt;code&gt;condition&lt;/code&gt; is falsy, the top (A) paragraph appears and the bottom (B) paragraph disappears. When the &lt;code&gt;condition&lt;/code&gt; is truthy, the top (A) paragraph is removed and the bottom (B) paragraph appears.</source>
          <target state="translated">当 &lt;code&gt;condition&lt;/code&gt; 为假时，顶部（A）段落出现，而底部（B）段落消失。当 &lt;code&gt;condition&lt;/code&gt; 为真时，删除顶部（A）段落，并显示底部（B）段落。</target>
        </trans-unit>
        <trans-unit id="2c58fb3492f3f8aca3da2461c1f89c6f93c0a079" translate="yes" xml:space="preserve">
          <source>When the &lt;code&gt;deleteRequest&lt;/code&gt; event fires, Angular calls the parent component's &lt;code&gt;deleteItem()&lt;/code&gt; method with the item.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3dc1efd9593828d0e01af36e18c84dde19f4956e" translate="yes" xml:space="preserve">
          <source>When the &lt;code&gt;deleteRequest&lt;/code&gt; event fires, Angular calls the parent component's &lt;code&gt;deleteItem()&lt;/code&gt; method, passing the &lt;em&gt;item-to-delete&lt;/em&gt; (emitted by &lt;code&gt;ItemDetail&lt;/code&gt;) in the &lt;code&gt;$event&lt;/code&gt; variable.</source>
          <target state="translated">当 &lt;code&gt;deleteRequest&lt;/code&gt; 事件触发时，Angular调用父组件的 &lt;code&gt;deleteItem()&lt;/code&gt; 方法，在 &lt;code&gt;$event&lt;/code&gt; 变量中传递&lt;em&gt;要删除&lt;/em&gt;的&lt;em&gt;项&lt;/em&gt;（由 &lt;code&gt;ItemDetail&lt;/code&gt; 发出）。</target>
        </trans-unit>
        <trans-unit id="c9a2b3437891fb18901b8b21686790b30e088379" translate="yes" xml:space="preserve">
          <source>When the &lt;code&gt;id&lt;/code&gt; cannot be found, the component should re-route to the &lt;code&gt;HeroListComponent&lt;/code&gt;.</source>
          <target state="translated">如果找不到 &lt;code&gt;id&lt;/code&gt; ，则组件应重新路由到 &lt;code&gt;HeroListComponent&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="2920e2be687da84b4c5aca2ceda07ce8afeb62cf" translate="yes" xml:space="preserve">
          <source>When the &lt;code&gt;isActive&lt;/code&gt; expression returns a truthy value, &lt;code&gt;&lt;a href=&quot;../api/common/ngif&quot;&gt;NgIf&lt;/a&gt;&lt;/code&gt; adds the &lt;code&gt;ItemDetailComponent&lt;/code&gt; to the DOM. When the expression is falsy, &lt;code&gt;&lt;a href=&quot;../api/common/ngif&quot;&gt;NgIf&lt;/a&gt;&lt;/code&gt; removes the &lt;code&gt;ItemDetailComponent&lt;/code&gt; from the DOM, destroying that component and all of its sub-components.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d2e3d77dbe8594275e223d51b36cd1f3be8ab17c" translate="yes" xml:space="preserve">
          <source>When the &lt;code&gt;noImplicitAny&lt;/code&gt; flag is &lt;code&gt;false&lt;/code&gt; (the default), and if the compiler cannot infer the variable type based on how it's used, the compiler silently defaults the type to &lt;code&gt;any&lt;/code&gt;. That's what is meant by &lt;em&gt;implicit &lt;code&gt;any&lt;/code&gt;&lt;/em&gt;.</source>
          <target state="translated">当 &lt;code&gt;noImplicitAny&lt;/code&gt; 标志为 &lt;code&gt;false&lt;/code&gt; （默认值），并且如果编译器无法根据使用方式推断变量类型时，编译器将默认将类型默认为 &lt;code&gt;any&lt;/code&gt; 。这就是&lt;em&gt;隐式 &lt;code&gt;any&lt;/code&gt; 的&lt;/em&gt;意思。</target>
        </trans-unit>
        <trans-unit id="1d4a388447e5472702495919fcaedf96a0b5cef4" translate="yes" xml:space="preserve">
          <source>When the &lt;code&gt;noImplicitAny&lt;/code&gt; flag is &lt;code&gt;true&lt;/code&gt; and the TypeScript compiler cannot infer the type, it still generates the JavaScript files, but it also &lt;strong&gt;reports an error&lt;/strong&gt;. Many seasoned developers prefer this stricter setting because type checking catches more unintentional errors at compile time.</source>
          <target state="translated">当 &lt;code&gt;noImplicitAny&lt;/code&gt; 标志为 &lt;code&gt;true&lt;/code&gt; 并且TypeScript编译器无法推断类型时，它仍会生成JavaScript文件，但还会&lt;strong&gt;报告一个错误&lt;/strong&gt;。许多经验丰富的开发人员更喜欢这种更严格的设置，因为类型检查会在编译时捕获更多意外错误。</target>
        </trans-unit>
        <trans-unit id="acd1794f17ea94afe9bc086e9963108f4a25ba69" translate="yes" xml:space="preserve">
          <source>When the &lt;code&gt;noImplicitAny&lt;/code&gt; flag is &lt;code&gt;true&lt;/code&gt;, you may get &lt;em&gt;implicit index errors&lt;/em&gt; as well. Most developers feel that &lt;em&gt;this particular error&lt;/em&gt; is more annoying than helpful. You can suppress them with the following additional flag:</source>
          <target state="translated">当 &lt;code&gt;noImplicitAny&lt;/code&gt; 标志为 &lt;code&gt;true&lt;/code&gt; 时，您也可能会得到&lt;em&gt;隐式索引错误&lt;/em&gt;。大多数开发人员认为&lt;em&gt;此特定错误&lt;/em&gt;令人讨厌，没有帮助。您可以使用以下附加标志隐藏它们：</target>
        </trans-unit>
        <trans-unit id="0b4dd32657c06b2d7d1495c105ae99f00c1a5a39" translate="yes" xml:space="preserve">
          <source>When the Angular CLI generates a new component, it includes an empty constructor, the &lt;code&gt;&lt;a href=&quot;api/core/oninit&quot;&gt;OnInit&lt;/a&gt;&lt;/code&gt; interface, and the &lt;code&gt;ngOnInit()&lt;/code&gt; method. Since the following example isn't using them, they are omitted here for brevity.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1221ec7078025cb9fbeced33a7c810ee121599ea" translate="yes" xml:space="preserve">
          <source>When the Angular Router matches a route that uses AngularJS, the &lt;code&gt;AngularJSComponent&lt;/code&gt; is rendered, and the content is rendered within the AngularJS &lt;a href=&quot;https://docs.angularjs.org/api/ngRoute/directive/ngView&quot;&gt;&lt;code&gt;ng-view&lt;/code&gt;&lt;/a&gt; directive. When the user navigates away from the route, the &lt;code&gt;$rootScope&lt;/code&gt; is destroyed on the AngularJS application.</source>
          <target state="translated">当Angular Router匹配使用AngularJS的路由时，将渲染 &lt;code&gt;AngularJSComponent&lt;/code&gt; ，并在AngularJS &lt;a href=&quot;https://docs.angularjs.org/api/ngRoute/directive/ngView&quot;&gt; &lt;code&gt;ng-view&lt;/code&gt; &lt;/a&gt;指令中渲染内容。当用户离开路线时，AngularJS应用程序上的 &lt;code&gt;$rootScope&lt;/code&gt; 被破坏。</target>
        </trans-unit>
        <trans-unit id="080f2859f1d13e16f7fe1af393eea801d31826ab" translate="yes" xml:space="preserve">
          <source>When the Angular compiler turns this template into TypeScript code, it prevents TypeScript from reporting that &lt;code&gt;bestByDate&lt;/code&gt; is not a member of the &lt;code&gt;&lt;a href=&quot;../api/core/iterablechangerecord#item&quot;&gt;item&lt;/a&gt;&lt;/code&gt; object when it runs type checking on the template.</source>
          <target state="translated">当Angular编译器将此模板转换为TypeScript代码时，它将阻止TypeScript 在对模板运行类型检查时报告 &lt;code&gt;bestByDate&lt;/code&gt; 不是 &lt;code&gt;&lt;a href=&quot;../api/core/iterablechangerecord#item&quot;&gt;item&lt;/a&gt;&lt;/code&gt; 对象的成员。</target>
        </trans-unit>
        <trans-unit id="e2ec197551b2b4f0c2054507141a1116bbd98183" translate="yes" xml:space="preserve">
          <source>When the Angular compiler turns this template into TypeScript code, it prevents TypeScript from reporting that &lt;code&gt;bestByDate&lt;/code&gt; is not a member of the &lt;code&gt;item&lt;/code&gt; object when it runs type checking on the template.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e0289ecc8b0efe9a3b03fd5c608e586c950afcad" translate="yes" xml:space="preserve">
          <source>When the Angular compiler turns your template into TypeScript code, it prevents TypeScript from reporting that &lt;code&gt;&lt;a href=&quot;../api/core/iterablechangerecord#item&quot;&gt;item&lt;/a&gt;&lt;/code&gt; might be &lt;code&gt;null&lt;/code&gt; or &lt;code&gt;undefined&lt;/code&gt;.</source>
          <target state="translated">当Angular编译器将模板转换为TypeScript代码时，它将阻止TypeScript报告该 &lt;code&gt;&lt;a href=&quot;../api/core/iterablechangerecord#item&quot;&gt;item&lt;/a&gt;&lt;/code&gt; 可能为 &lt;code&gt;null&lt;/code&gt; 或 &lt;code&gt;undefined&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="3a21ca739168a6ca957e545449932277c2c48d4e" translate="yes" xml:space="preserve">
          <source>When the Angular compiler turns your template into TypeScript code, it prevents TypeScript from reporting that &lt;code&gt;item.color&lt;/code&gt; might be &lt;code&gt;null&lt;/code&gt; or &lt;code&gt;undefined&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7b523d4946336137aa2dbed657d1c4be4adcefae" translate="yes" xml:space="preserve">
          <source>When the Angular router lazy-loads a module, it creates a new execution context. That &lt;a href=&quot;ngmodule-faq#q-why-child-injector&quot;&gt;context has its own injector&lt;/a&gt;, which is a direct child of the application injector.</source>
          <target state="translated">当Angular路由器延迟加载模块时，它将创建一个新的执行上下文。该&lt;a href=&quot;ngmodule-faq#q-why-child-injector&quot;&gt;上下文具有自己的注入器&lt;/a&gt;，它是应用注入器的直接子代。</target>
        </trans-unit>
        <trans-unit id="2cf28989035e8b08a947a71d640454a09e99a9b3" translate="yes" xml:space="preserve">
          <source>When the Angular router lazy-loads a module, it creates a new injector. This injector is a child of the root application injector. Imagine a tree of injectors; there is a single root injector and then a child injector for each lazy loaded module. The router adds all of the providers from the root injector to the child injector. When the router creates a component within the lazy-loaded context, Angular prefers service instances created from these providers to the service instances of the application root injector.</source>
          <target state="translated">当Angular路由器懒加载一个模块时,它会创建一个新的注入器。这个注入器是根应用注入器的一个子注入器。想象一下注入器的树;有一个单一的根注入器,然后为每个懒加载模块创建一个子注入器。路由器将根注入器的所有提供者添加到子注入器中。当路由器在懒加载上下文中创建组件时,Angular会优先选择从这些提供者创建的服务实例,而不是应用根注入器的服务实例。</target>
        </trans-unit>
        <trans-unit id="a59c1220766a1692e2ac330d5b21be92fc1db6a9" translate="yes" xml:space="preserve">
          <source>When the CLI commands &lt;code&gt;ng test&lt;/code&gt; and &lt;code&gt;ng e2e&lt;/code&gt; are generally running the CI tests in your environment, you might still need to adjust your configuration to run the Chrome browser tests.</source>
          <target state="translated">当CLI命令 &lt;code&gt;ng test&lt;/code&gt; 和 &lt;code&gt;ng e2e&lt;/code&gt; 通常在您的环境中运行CI测试时，您可能仍需要调整配置以运行Chrome浏览器测试。</target>
        </trans-unit>
        <trans-unit id="d88b7c40f460e73c24fa3f0de74d16ad21ad9d2c" translate="yes" xml:space="preserve">
          <source>When the CLI generated the &lt;code&gt;CustomerDashboardComponent&lt;/code&gt; for the feature module, it included a template, &lt;code&gt;customer-dashboard.component.html&lt;/code&gt;, with the following markup:</source>
          <target state="translated">CLI 为功能模块生成 &lt;code&gt;CustomerDashboardComponent&lt;/code&gt; 时，它包括带有以下标记的模板 &lt;code&gt;customer-dashboard.component.html&lt;/code&gt; ：</target>
        </trans-unit>
        <trans-unit id="59925ab392dd758a0d023368a837b4147d92ef54" translate="yes" xml:space="preserve">
          <source>When the CLI generated the &lt;code&gt;HeroesComponent&lt;/code&gt;, it created an empty &lt;code&gt;heroes.component.css&lt;/code&gt; stylesheet for the &lt;code&gt;HeroesComponent&lt;/code&gt; and pointed to it in &lt;code&gt;@&lt;a href=&quot;../api/core/component#styleUrls&quot;&gt;Component.styleUrls&lt;/a&gt;&lt;/code&gt; like this.</source>
          <target state="translated">当CLI产生的 &lt;code&gt;HeroesComponent&lt;/code&gt; ，它创建了一个空 &lt;code&gt;heroes.component.css&lt;/code&gt; 的样式表 &lt;code&gt;HeroesComponent&lt;/code&gt; ，并指出它在 &lt;code&gt;@&lt;a href=&quot;../api/core/component#styleUrls&quot;&gt;Component.styleUrls&lt;/a&gt;&lt;/code&gt; 这样。</target>
        </trans-unit>
        <trans-unit id="aa5fd6c00e755291fcd1e8dfd434052f8247fbca" translate="yes" xml:space="preserve">
          <source>When the ES5 Browserslist result is &lt;code&gt;disabled&lt;/code&gt;, then ES5 browser support is not required. Otherwise, ES5 browser support is required.</source>
          <target state="translated">如果 &lt;code&gt;disabled&lt;/code&gt; 了ES5 Browserslist结果，则不需要ES5浏览器支持。否则，需要ES5浏览器支持。</target>
        </trans-unit>
        <trans-unit id="eb6eeefc118f7aefbc0dab17c4da18ab107fad46" translate="yes" xml:space="preserve">
          <source>When the ServiceWorker handles a request, it checks asset groups in the order in which they appear in &lt;code&gt;ngsw-config.json&lt;/code&gt;. The first asset group that matches the requested resource handles the request.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e51a5be86a741ecadf68b5ad073e6275afa8ec50" translate="yes" xml:space="preserve">
          <source>When the ServiceWorker handles a request, it checks data groups in the order in which they appear in &lt;code&gt;ngsw-config.json&lt;/code&gt;. The first data group that matches the requested resource handles the request.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d409951125980096e2daa76599fa79723877f3d7" translate="yes" xml:space="preserve">
          <source>When the app starts, the &lt;code&gt;selectedHero&lt;/code&gt; is &lt;code&gt;undefined&lt;/code&gt;&lt;em&gt;by design&lt;/em&gt;.</source>
          <target state="translated">当应用程序启动时， &lt;code&gt;selectedHero&lt;/code&gt; 是 &lt;code&gt;undefined&lt;/code&gt; &lt;em&gt;设计&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="85cce31634dd108961a3fd7d6540d6c70f895fff" translate="yes" xml:space="preserve">
          <source>When the app starts, the browser's address bar points to the web site's root. That doesn't match any existing route so the router doesn't navigate anywhere. The space below the &lt;code&gt;&amp;lt;&lt;a href=&quot;../api/router/routeroutlet&quot;&gt;router-outlet&lt;/a&gt;&amp;gt;&lt;/code&gt; is blank.</source>
          <target state="translated">应用启动时，浏览器的地址栏指向网站的根目录。这与任何现有路线都不匹配，因此路由器无法在任何地方导航。 &lt;code&gt;&amp;lt;&lt;a href=&quot;../api/router/routeroutlet&quot;&gt;router-outlet&lt;/a&gt;&amp;gt;&lt;/code&gt; 下面的空间为空白。</target>
        </trans-unit>
        <trans-unit id="d48436f6f4591ea9777a854da3f01fc9b76faf2c" translate="yes" xml:space="preserve">
          <source>When the application launches, the initial URL in the browser bar is by default:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2bea55775588ba5cf5d20de8360b1abd2270286d" translate="yes" xml:space="preserve">
          <source>When the application launches, the initial URL in the browser bar is something like:</source>
          <target state="translated">当应用程序启动时,浏览器栏中的初始URL是这样的。</target>
        </trans-unit>
        <trans-unit id="229415848028c721168bbcfe230abe07e6e4c7d2" translate="yes" xml:space="preserve">
          <source>When the application requests navigation to the path &lt;code&gt;/crisis-center&lt;/code&gt;, the router activates an instance of &lt;code&gt;CrisisListComponent&lt;/code&gt;, displays its view, and updates the browser's address location and history with the URL for that path.</source>
          <target state="translated">当应用程序请求导航到路径 &lt;code&gt;/crisis-center&lt;/code&gt; 时，路由器将激活 &lt;code&gt;CrisisListComponent&lt;/code&gt; 实例，显示其视图，并使用该路径的URL更新浏览器的地址位置和历史记录。</target>
        </trans-unit>
        <trans-unit id="c361606b02a6340c1440983835104942a028a4c0" translate="yes" xml:space="preserve">
          <source>When the bootstrap method is switched from that of &lt;code&gt;&lt;a href=&quot;../api/upgrade/static/upgrademodule&quot;&gt;UpgradeModule&lt;/a&gt;&lt;/code&gt; to pure Angular, AngularJS ceases to exist on the page completely. At this point, you need to tell Protractor that it should not be looking for an AngularJS app anymore, but instead it should find &lt;em&gt;Angular apps&lt;/em&gt; from the page.</source>
          <target state="translated">当引导方法从 &lt;code&gt;&lt;a href=&quot;../api/upgrade/static/upgrademodule&quot;&gt;UpgradeModule&lt;/a&gt;&lt;/code&gt; 切换到纯Angular时，AngularJS将完全不存在于页面上。此时，您需要告诉Protractor，它不再应该再寻找AngularJS应用，而应该从页面中找到&lt;em&gt;Angular应用&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="390621ac2e07fd3b6f4546222f0b4c3bdc079e78" translate="yes" xml:space="preserve">
          <source>When the browser refreshes, the app should work again. You can edit the hero's name and see the changes reflected immediately in the &lt;code&gt;&amp;lt;h2&amp;gt;&lt;/code&gt; above the textbox.</source>
          <target state="translated">浏览器刷新后，该应用应该可以再次运行。您可以编辑英雄的名字，并在文本框上方的 &lt;code&gt;&amp;lt;h2&amp;gt;&lt;/code&gt; 中立即看到更改。</target>
        </trans-unit>
        <trans-unit id="7f7fdc0a3d021ba9aefb9ebd7e31adbe1a20f6b3" translate="yes" xml:space="preserve">
          <source>When the browser renders &lt;code&gt;&amp;lt;input type=&quot;text&quot; value=&quot;Sarah&quot;&amp;gt;&lt;/code&gt;, it creates a corresponding DOM node with a &lt;code&gt;value&lt;/code&gt; property initialized to &quot;Sarah&quot;.</source>
          <target state="translated">当浏览器呈现 &lt;code&gt;&amp;lt;input type=&quot;text&quot; value=&quot;Sarah&quot;&amp;gt;&lt;/code&gt; ，它将创建一个对应的DOM节点，其 &lt;code&gt;value&lt;/code&gt; 属性初始化为&amp;ldquo; Sarah&amp;rdquo;。</target>
        </trans-unit>
        <trans-unit id="df2233bf5455bd5715e7600e6f1195db0c477e2f" translate="yes" xml:space="preserve">
          <source>When the browser's location URL changes to match the path segment &lt;code&gt;/crisis-center&lt;/code&gt;, then the router activates an instance of the &lt;code&gt;CrisisListComponent&lt;/code&gt; and displays its view.</source>
          <target state="translated">当浏览器的位置URL更改为与路径段 &lt;code&gt;/crisis-center&lt;/code&gt; 匹配时，路由器将激活 &lt;code&gt;CrisisListComponent&lt;/code&gt; 的实例并显示其视图。</target>
        </trans-unit>
        <trans-unit id="6169562d3c2a62b330d6c334a1f65f9b57448074" translate="yes" xml:space="preserve">
          <source>When the build is complete, make a copy of &lt;code&gt;docs/index.html&lt;/code&gt; and name it &lt;code&gt;docs/404.html&lt;/code&gt;.</source>
          <target state="translated">构建完成后，请复制 &lt;code&gt;docs/index.html&lt;/code&gt; 并将其命名为 &lt;code&gt;docs/404.html&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="f89de102a1abb74769837f142272c4ff2f6b0f07" translate="yes" xml:space="preserve">
          <source>When the component instance is destroyed, so is that service instance.</source>
          <target state="translated">当组件实例被销毁时,该服务实例也会被销毁。</target>
        </trans-unit>
        <trans-unit id="e835758236f115ab87e2ed9d80388fafb705e96e" translate="yes" xml:space="preserve">
          <source>When the component or directive raises the event, the handler executes the template statement. The template statement performs an action in response to the event.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2311871b7205a5129ce3ee5c983030b3867b7bc9" translate="yes" xml:space="preserve">
          <source>When the condition is false, &lt;code&gt;&lt;a href=&quot;../api/common/ngif&quot;&gt;NgIf&lt;/a&gt;&lt;/code&gt; removes its host element from the DOM, detaches it from DOM events (the attachments that it made), detaches the component from Angular change detection, and destroys it. The component and DOM nodes can be garbage-collected and free up memory.</source>
          <target state="translated">当条件为false时， &lt;code&gt;&lt;a href=&quot;../api/common/ngif&quot;&gt;NgIf&lt;/a&gt;&lt;/code&gt; 从DOM中删除其宿主元素，将其与DOM事件（它所创建的附件）分离，将组件与Angular更改检测分离，并销毁它。组件和DOM节点可以被垃圾收集并释放内存。</target>
        </trans-unit>
        <trans-unit id="4524392797b14c325b60bac95b96ec334a2b3e1a" translate="yes" xml:space="preserve">
          <source>When the contents of the iterator changes, &lt;code&gt;&lt;a href=&quot;ngforof&quot;&gt;NgForOf&lt;/a&gt;&lt;/code&gt; makes the corresponding changes to the DOM:</source>
          <target state="translated">当迭代器的内容更改时， &lt;code&gt;&lt;a href=&quot;ngforof&quot;&gt;NgForOf&lt;/a&gt;&lt;/code&gt; 对DOM进行相应的更改：</target>
        </trans-unit>
        <trans-unit id="0e5038380ebb787d300a2c9eb39551f139a04fd3" translate="yes" xml:space="preserve">
          <source>When the current row hero is the same as the &lt;code&gt;selectedHero&lt;/code&gt;, Angular adds the &lt;code&gt;selected&lt;/code&gt; CSS class. When the two heroes are different, Angular removes the class.</source>
          <target state="translated">当当前行的英雄与 &lt;code&gt;selectedHero&lt;/code&gt; 相同时，Angular将添加 &lt;code&gt;selected&lt;/code&gt; CSS类。当两个英雄不同时，Angular会删除该类。</target>
        </trans-unit>
        <trans-unit id="88f7dc097723856c6451253157ead9cee3d512b4" translate="yes" xml:space="preserve">
          <source>When the default change detector detects changes, it invokes &lt;code&gt;ngOnChanges()&lt;/code&gt; if supplied, regardless of whether you perform additional change detection. Typically, you should not use both &lt;code&gt;&lt;a href=&quot;docheck&quot;&gt;DoCheck&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;onchanges&quot;&gt;OnChanges&lt;/a&gt;&lt;/code&gt; to respond to changes on the same input.</source>
          <target state="translated">当默认更改检测器检测到更改时，无论是否执行其他更改检测，它都会调用 &lt;code&gt;ngOnChanges()&lt;/code&gt; (如果提供）。通常，您不应同时使用 &lt;code&gt;&lt;a href=&quot;docheck&quot;&gt;DoCheck&lt;/a&gt;&lt;/code&gt; 和 &lt;code&gt;&lt;a href=&quot;onchanges&quot;&gt;OnChanges&lt;/a&gt;&lt;/code&gt; 来响应同一输入上的更改。</target>
        </trans-unit>
        <trans-unit id="87eced2ba76fd26a75fedaeb26d1a231925e3980" translate="yes" xml:space="preserve">
          <source>When the event is raised, the handler executes the template statement. The template statement typically involves a receiver, which performs an action in response to the event, such as storing a value from the HTML control into a model.</source>
          <target state="translated">当事件发生时,处理程序会执行模板语句。模板语句通常涉及到一个接收器,该接收器执行响应事件的操作,例如将HTML控件中的一个值存储到一个模型中。</target>
        </trans-unit>
        <trans-unit id="e6dde887a621ed7d8cda22827f17a6b04470ac49" translate="yes" xml:space="preserve">
          <source>When the expression is a ISO string without time (e.g. 2016-09-19) the time zone offset is not applied and the formatted text will have the same day, month and year of the expression.</source>
          <target state="translated">当表达式是不含时间的ISO字符串时(如2016-09-19),不应用时区偏移,格式化后的文本将与表达式的日、月、年相同。</target>
        </trans-unit>
        <trans-unit id="12f73a5faaa5d63601053af7fd32cddd3d869aa6" translate="yes" xml:space="preserve">
          <source>When the expression resolves to &lt;code&gt;null&lt;/code&gt;, Angular removes the attribute altogether.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="37ece522a490a41d305f59b9d00b58e362fecb66" translate="yes" xml:space="preserve">
          <source>When the given name is non-blank, the handler creates a &lt;code&gt;Hero&lt;/code&gt;-like object from the name (it's only missing the &lt;code&gt;id&lt;/code&gt;) and passes it to the services &lt;code&gt;addHero()&lt;/code&gt; method.</source>
          <target state="translated">当给定名称为非空白时，处理程序将根据名称创建一个类似 &lt;code&gt;Hero&lt;/code&gt; 的对象（仅缺少 &lt;code&gt;id&lt;/code&gt; ），并将其传递给服务 &lt;code&gt;addHero()&lt;/code&gt; 方法。</target>
        </trans-unit>
        <trans-unit id="15483efa7611420de43a81a7b88feacee6eacb09" translate="yes" xml:space="preserve">
          <source>When the key is a property of the host element, the property value is the propagated to the specified DOM property.</source>
          <target state="translated">当key是host元素的属性时,属性值会传播到指定的DOM属性。</target>
        </trans-unit>
        <trans-unit id="8b2b2a15239650c80bd61cf3a7c4a6838674078b" translate="yes" xml:space="preserve">
          <source>When the key is a static attribute in the DOM, the attribute value is propagated to the specified property in the host element.</source>
          <target state="translated">当键是DOM中的静态属性时,属性值会传播到宿主元素中的指定属性。</target>
        </trans-unit>
        <trans-unit id="b14c86a118a766de120313191bb99bc5d8d541fc" translate="yes" xml:space="preserve">
          <source>When the map changes, &lt;code&gt;paramMap&lt;/code&gt; gets the &lt;code&gt;id&lt;/code&gt; parameter from the changed parameters.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d3a68099d4829af5c295f8308c3e9d58baf906ee" translate="yes" xml:space="preserve">
          <source>When the old component logs a message with &lt;code&gt;OldLogger&lt;/code&gt;, you want the singleton instance of &lt;code&gt;NewLogger&lt;/code&gt; to handle it instead. In this case, the dependency injector should inject that singleton instance when a component asks for either the new or the old logger. &lt;code&gt;OldLogger&lt;/code&gt; should be an &lt;em&gt;alias&lt;/em&gt; for &lt;code&gt;NewLogger&lt;/code&gt;.</source>
          <target state="translated">当旧组件使用 &lt;code&gt;OldLogger&lt;/code&gt; 记录消息时，您希望由 &lt;code&gt;NewLogger&lt;/code&gt; 的单例实例来处理它。在这种情况下，当组件要求新的或旧的记录器时，依赖项注入器应注入该单例实例。 &lt;code&gt;OldLogger&lt;/code&gt; 应该是一个&lt;em&gt;别名&lt;/em&gt;为 &lt;code&gt;NewLogger&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="8ff128e54a9e6628bf482f076b33ee1b1b627b6f" translate="yes" xml:space="preserve">
          <source>When the parent component &lt;em&gt;class&lt;/em&gt; requires that kind of access, &lt;strong&gt;&lt;em&gt;inject&lt;/em&gt;&lt;/strong&gt; the child component into the parent as a &lt;em&gt;ViewChild&lt;/em&gt;.</source>
          <target state="translated">当父组件&lt;em&gt;类&lt;/em&gt;需要这种访问时，&lt;strong&gt;&lt;em&gt;将&lt;/em&gt;&lt;/strong&gt;子组件作为&lt;em&gt;ViewChild &lt;/em&gt;&lt;strong&gt;&lt;em&gt;注入&lt;/em&gt;&lt;/strong&gt;到父组件中。</target>
        </trans-unit>
        <trans-unit id="b9900aa1ed0b5e38fbcd32f4da40c0c5d962adb0" translate="yes" xml:space="preserve">
          <source>When the restore is finished, a message in the bottom message bar of Visual Studio should say: &lt;code&gt;Installing packages complete&lt;/code&gt;. Be patient. This could take a while.</source>
          <target state="translated">还原完成后，Visual Studio底部消息栏中的消息应显示： &lt;code&gt;Installing packages complete&lt;/code&gt; 。耐心一点。这可能需要一段时间。</target>
        </trans-unit>
        <trans-unit id="6c1050711c1fd12fb5b6f194938f3e8579a393e6" translate="yes" xml:space="preserve">
          <source>When the router lazy loads a module, it creates a child injector and registers the &lt;code&gt;UserService&lt;/code&gt; provider with that child injector. The child injector is &lt;em&gt;not&lt;/em&gt; the root injector.</source>
          <target state="translated">当路由器延迟加载模块时，它将创建一个子注入器并向该子注入器注册 &lt;code&gt;UserService&lt;/code&gt; 提供程序。子注入器&lt;em&gt;不是&lt;/em&gt;根注入器。</target>
        </trans-unit>
        <trans-unit id="b0025e37841d7f66b91ac2c6b9bdbcd09b55618f" translate="yes" xml:space="preserve">
          <source>When the router navigates to a new component view, it updates the browser's location and history with a URL for that view. As this is a strictly local URL the browser won't send this URL to the server and will not reload the page.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bec743e0774188316c4607e7d48359e06eca207a" translate="yes" xml:space="preserve">
          <source>When the router navigates to a new component view, it updates the browser's location and history with a URL for that view. This is a strictly local URL. The browser shouldn't send this URL to the server and should not reload the page.</source>
          <target state="translated">当路由器导航到一个新的组件视图时,它会用该视图的URL更新浏览器的位置和历史记录。这是一个严格的本地URL。浏览器不应该将此URL发送到服务器,也不应该重新加载页面。</target>
        </trans-unit>
        <trans-unit id="90b902ee771a51ea4c2789f717ed041922a6f1b5" translate="yes" xml:space="preserve">
          <source>When the router navigates to this route, it uses the &lt;code&gt;&lt;a href=&quot;../api/router/route#loadChildren&quot;&gt;loadChildren&lt;/a&gt;&lt;/code&gt; string to dynamically load the &lt;code&gt;AdminModule&lt;/code&gt;. Then it adds the &lt;code&gt;AdminModule&lt;/code&gt; routes to its current route configuration. Finally, it loads the requested route to the destination admin component.</source>
          <target state="translated">当路由器导航到此路由时，它将使用 &lt;code&gt;&lt;a href=&quot;../api/router/route#loadChildren&quot;&gt;loadChildren&lt;/a&gt;&lt;/code&gt; 字符串动态加载 &lt;code&gt;AdminModule&lt;/code&gt; 。然后，将 &lt;code&gt;AdminModule&lt;/code&gt; 路由添加到其当前路由配置。最后，它将请求的路由加载到目标管理组件。</target>
        </trans-unit>
        <trans-unit id="e3ce36dc52085de43eccd961e83d2d4a5764f0c6" translate="yes" xml:space="preserve">
          <source>When the router navigates to this route, it uses the &lt;code&gt;loadChildren&lt;/code&gt; string to dynamically load the &lt;code&gt;AdminModule&lt;/code&gt;. Then it adds the &lt;code&gt;AdminModule&lt;/code&gt; routes to its current route configuration. Finally, it loads the requested route to the destination admin component.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c4793c657e648cd962d6756a48cf39fb9572cc40" translate="yes" xml:space="preserve">
          <source>When the server is ready, you'll detach the In-memory Web API, and the app's requests will go through to the server.</source>
          <target state="translated">当服务器准备好后,你将分离内存中的Web API,应用程序的请求将通过服务器。</target>
        </trans-unit>
        <trans-unit id="8c5e1c6cb471ba84681d4eec768f8daf9aee7300" translate="yes" xml:space="preserve">
          <source>When the server responds successfully with the newly added hero, the component adds that hero to the displayed &lt;code&gt;heroes&lt;/code&gt; list.</source>
          <target state="translated">服务器成功响应新添加的英雄后，该组件将该英雄添加到显示的 &lt;code&gt;heroes&lt;/code&gt; 列表中。</target>
        </trans-unit>
        <trans-unit id="7f5488c0527bdc65788bef91441700006f51550b" translate="yes" xml:space="preserve">
          <source>When the tests are complete, the command creates a new &lt;code&gt;/coverage&lt;/code&gt; folder in the project. Open the &lt;code&gt;index.html&lt;/code&gt; file to see a report with your source code and code coverage values.</source>
          <target state="translated">测试完成后，该命令将在项目中创建一个新的 &lt;code&gt;/coverage&lt;/code&gt; 文件夹。打开 &lt;code&gt;index.html&lt;/code&gt; 文件以查看包含源代码和代码覆盖率值的报告。</target>
        </trans-unit>
        <trans-unit id="cc433f6ebd5153ea48b6acb9758c8f35454ca692" translate="yes" xml:space="preserve">
          <source>When the url is either '/user' or '/user/bob', the active-link class will be added to the &lt;code&gt;&lt;a href=&quot;routerlinkwithhref&quot;&gt;a&lt;/a&gt;&lt;/code&gt; tag. If the url changes, the class will be removed.</source>
          <target state="translated">当URL可以是&amp;ldquo;/用户&amp;rdquo;或&amp;ldquo;/用户/鲍勃&amp;rdquo;，有源链接类将被添加到 &lt;code&gt;&lt;a href=&quot;routerlinkwithhref&quot;&gt;a&lt;/a&gt;&lt;/code&gt; 标签。如果网址更改，则该类将被删除。</target>
        </trans-unit>
        <trans-unit id="3e60d76cafe61069c609990d884f74076646d020" translate="yes" xml:space="preserve">
          <source>When the user blurs the form control element, the control is marked as &quot;touched&quot;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="668fc76cc653d1cf74fa997aa61a6d6a3d5490f4" translate="yes" xml:space="preserve">
          <source>When the user changes the value in the watched field, the control is marked as &quot;dirty&quot;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="56e24b86fc8dc4eb7c05899793fc749916e2d93a" translate="yes" xml:space="preserve">
          <source>When the user clicks a hero in the &lt;strong&gt;master&lt;/strong&gt; list, the component should display the selected hero's &lt;strong&gt;details&lt;/strong&gt; at the bottom of the page.</source>
          <target state="translated">当用户单击&lt;strong&gt;母版&lt;/strong&gt;列表中的英雄时，组件应在页面底部显示所选英雄的&lt;strong&gt;详细信息&lt;/strong&gt;。</target>
        </trans-unit>
        <trans-unit id="0da528ae2bbf4606a802931b278d60a04b127084" translate="yes" xml:space="preserve">
          <source>When the user clicks a hero item in the &lt;code&gt;HeroesComponent&lt;/code&gt;, the app should navigate to the &lt;code&gt;HeroDetailComponent&lt;/code&gt;, replacing the heroes list view with the hero detail view. The heroes list view should no longer show hero details as it does now.</source>
          <target state="translated">当用户单击 &lt;code&gt;HeroesComponent&lt;/code&gt; 中的英雄项时，应用程序应导航到 &lt;code&gt;HeroDetailComponent&lt;/code&gt; ，将英雄列表视图替换为英雄详细信息视图。英雄列表视图应该不再像现在那样显示英雄详细信息。</target>
        </trans-unit>
        <trans-unit id="1bfbf5227f0c5acc162274df4182ff4308452c9e" translate="yes" xml:space="preserve">
          <source>When the user clicks the &lt;strong&gt;Delete hero&lt;/strong&gt; button, Angular calls the &lt;code&gt;deleteHero()&lt;/code&gt; method in the component class.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="965cc4386347869f8766b8bd6c03a51c94b256a1" translate="yes" xml:space="preserve">
          <source>When the user clicks the back button, the &lt;code&gt;HeroDetailComponent&lt;/code&gt; constructs another &lt;em&gt;link parameters array&lt;/em&gt; which it uses to navigate back to the &lt;code&gt;HeroListComponent&lt;/code&gt;.</source>
          <target state="translated">当用户单击&amp;ldquo;后退&amp;rdquo;按钮时， &lt;code&gt;HeroDetailComponent&lt;/code&gt; 构造另一个&lt;em&gt;链接参数数组&lt;/em&gt;，它用于导航回到 &lt;code&gt;HeroListComponent&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="b5381f2dbc392678bc72803a41a04f59cc4b7028" translate="yes" xml:space="preserve">
          <source>When the user clicks the button, Angular calls the &lt;code&gt;onClickMe&lt;/code&gt; method from &lt;code&gt;ClickMeComponent&lt;/code&gt;.</source>
          <target state="translated">当用户单击按钮时，Angular 从 &lt;code&gt;ClickMeComponent&lt;/code&gt; 调用 &lt;code&gt;onClickMe&lt;/code&gt; 方法。</target>
        </trans-unit>
        <trans-unit id="09f436cef939df335d96f2d5d3fa0d239641f9a3" translate="yes" xml:space="preserve">
          <source>When the user deletes the name, the form should look like this:</source>
          <target state="translated">当用户删除名称时,表单应该是这样的。</target>
        </trans-unit>
        <trans-unit id="60767066f8c768e0937e2414770db47911b50141" translate="yes" xml:space="preserve">
          <source>When the user enters &quot;Sally&quot; into the &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt;, the DOM element &lt;code&gt;value&lt;/code&gt;&lt;em&gt;property&lt;/em&gt; becomes &quot;Sally&quot;. However, if you look at the HTML attribute &lt;code&gt;value&lt;/code&gt; using &lt;code&gt;input.getAttribute('value')&lt;/code&gt;, you can see that the &lt;em&gt;attribute&lt;/em&gt; remains unchanged&amp;mdash;it returns &quot;Sarah&quot;.</source>
          <target state="translated">当用户在 &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; 中输入&amp;ldquo; Sally&amp;rdquo;时，DOM元素的 &lt;code&gt;value&lt;/code&gt; &lt;em&gt;属性&lt;/em&gt;将变为&amp;ldquo; Sally&amp;rdquo;。但是，如果使用 &lt;code&gt;input.getAttribute('value')&lt;/code&gt; 查看HTML属性 &lt;code&gt;value&lt;/code&gt; ，则可以看到该&lt;em&gt;属性&lt;/em&gt;保持不变-它返回&amp;ldquo; Sarah&amp;rdquo;。&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="45684a41a52534dc3a21a13492006994cdd3ce14" translate="yes" xml:space="preserve">
          <source>When the user enters a name in a search-box, the &lt;code&gt;PackageSearchComponent&lt;/code&gt; sends a search request for a package with that name to the NPM web API.</source>
          <target state="translated">当用户在搜索框中输入名称时， &lt;code&gt;PackageSearchComponent&lt;/code&gt; 会将具有该名称的软件包的搜索请求发送到NPM Web API。</target>
        </trans-unit>
        <trans-unit id="9ace1fef581dffc80280ad525aed16d3b2efed3b" translate="yes" xml:space="preserve">
          <source>When the user makes changes, the component raises the &lt;code&gt;input&lt;/code&gt; event.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="77b1e2ebde77a69768e8f8ec443b80048a531b16" translate="yes" xml:space="preserve">
          <source>When the user navigates away, you can let the user decide what to do with unsaved changes. If the user cancels, you'll stay put and allow more changes. If the user approves, the app can save.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="24612cfd1409a4d5460abc7f2935bcce9977ee3f" translate="yes" xml:space="preserve">
          <source>When the user navigates from the heroes list to the &quot;Magneta&quot; hero and back, &quot;Magneta&quot; appears selected:</source>
          <target state="translated">当用户从英雄列表导航到 &quot;Magneta &quot;英雄并返回时,&quot;Magneta &quot;会出现被选中。</target>
        </trans-unit>
        <trans-unit id="20759cd95c7b4ee15d25a5ac38dd65f7086028c9" translate="yes" xml:space="preserve">
          <source>When the user picks a hero, &lt;code&gt;selectedHero&lt;/code&gt; has a value and &lt;code&gt;&lt;a href=&quot;../api/common/ngif&quot;&gt;ngIf&lt;/a&gt;&lt;/code&gt; puts the hero detail into the DOM.</source>
          <target state="translated">当用户选择英雄时， &lt;code&gt;selectedHero&lt;/code&gt; 具有值，并且 &lt;code&gt;&lt;a href=&quot;../api/common/ngif&quot;&gt;ngIf&lt;/a&gt;&lt;/code&gt; 将英雄详细信息放入DOM中。</target>
        </trans-unit>
        <trans-unit id="d3a252aba875b8f256c6decf33f58be856151e22" translate="yes" xml:space="preserve">
          <source>When the user selects a hero from the list, the app should navigate to the detail view and show that hero. You tell the detail view which hero to display by including the selected hero's id in the route URL.</source>
          <target state="translated">当用户从列表中选择一个英雄时,应用程序应该导航到详细视图并显示该英雄。你可以通过在路径URL中包含所选英雄的id来告诉详细视图要显示哪个英雄。</target>
        </trans-unit>
        <trans-unit id="a510d7fcc215eca3c7dadb10daf2bda07de4c2f2" translate="yes" xml:space="preserve">
          <source>When the value changes in the UI, call the registered function to allow the forms API to update itself:</source>
          <target state="translated">当UI中的值发生变化时,调用注册的函数,让表单API自行更新。</target>
        </trans-unit>
        <trans-unit id="8f3a890a779d79ad9661c7749d679f59723a6996" translate="yes" xml:space="preserve">
          <source>When the workspace file structure is in place, you can use the &lt;code&gt;ng generate&lt;/code&gt; command on the command line to add functionality and data to the application. This initial root-level application is the &lt;em&gt;default app&lt;/em&gt; for CLI commands (unless you change the default after creating &lt;a href=&quot;file-structure#multiple-projects&quot;&gt;additional apps&lt;/a&gt;).</source>
          <target state="translated">当工作空间文件结构到位后，可以在命令行上使用 &lt;code&gt;ng generate&lt;/code&gt; 命令向应用程序添加功能和数据。此初始的根级应用程序是CLI命令的&lt;em&gt;默认应用程序&lt;/em&gt;（除非您在创建&lt;a href=&quot;file-structure#multiple-projects&quot;&gt;其他应用程序&lt;/a&gt;后更改了默认设置）。</target>
        </trans-unit>
        <trans-unit id="3732bd2e415ded41d84e9da700bfbe65d89ef57d" translate="yes" xml:space="preserve">
          <source>When there isn't a host element, you can usually wrap the content in a native HTML container element, such as a &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt;, and attach the directive to that wrapper.</source>
          <target state="translated">当没有host元素时，通常可以将内容包装在本地HTML容器元素（例如 &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; )中，并将指令附加到该包装器。</target>
        </trans-unit>
        <trans-unit id="f7317e6f21341edc26f7b439b83e9178a3a04032" translate="yes" xml:space="preserve">
          <source>When to use the lightweight injection token pattern</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="83997d9f88d048b1fdd10042c4c30cc032f0c0c2" translate="yes" xml:space="preserve">
          <source>When tokens are retained</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c5db41bbc82cfe3fbe2cd98e813bc5da1625b039" translate="yes" xml:space="preserve">
          <source>When translating the text, you can move the placeholder if necessary, but don't remove it. If you remove the placeholder, the ICU expression will not appear in your translated app.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1fc8a283755738e86c35338fd89146a3972eeed2" translate="yes" xml:space="preserve">
          <source>When true (recommended), enables the &lt;a href=&quot;aot-compiler#binding-expression-validation&quot;&gt;binding expression validation&lt;/a&gt; phase of the template compiler, which uses TypeScript to validate binding expressions.</source>
          <target state="translated">为true（推荐）时，启用模板编译器的&lt;a href=&quot;aot-compiler#binding-expression-validation&quot;&gt;绑定表达式验证&lt;/a&gt;阶段，该阶段使用TypeScript验证绑定表达式。</target>
        </trans-unit>
        <trans-unit id="878269276c4b94291dba5557e0c330a0c66c6fb8" translate="yes" xml:space="preserve">
          <source>When true (recommended), reports an error for a supplied parameter whose injection type cannot be determined. When false (currently the default), constructor parameters of classes marked with &lt;code&gt;@&lt;a href=&quot;../api/core/injectable&quot;&gt;Injectable&lt;/a&gt;&lt;/code&gt; whose type cannot be resolved produce a warning.</source>
          <target state="translated">如果为true（推荐），则报告无法确定其喷射类型的所提供参数的错误。如果为false（当前为默认值），则标记为 &lt;code&gt;@&lt;a href=&quot;../api/core/injectable&quot;&gt;Injectable&lt;/a&gt;&lt;/code&gt; 其类型无法解析的类的构造函数参数会产生警告。</target>
        </trans-unit>
        <trans-unit id="b212849a159920cad7420629011f7a9864bdde5b" translate="yes" xml:space="preserve">
          <source>When true (the default) creates files at the top level of the project.</source>
          <target state="translated">当为 &quot;true&quot;(默认)时,在项目的顶层创建文件。</target>
        </trans-unit>
        <trans-unit id="b398aee58d8c1adc60ea74f0c726ecef38afbcac" translate="yes" xml:space="preserve">
          <source>When true (the default), creates a new initial app project in the src folder of the new workspace. When false, creates an empty workspace with no initial app. You can then use the generate application command so that all apps are created in the projects folder.</source>
          <target state="translated">当为真(默认)时,在新工作区的 src 文件夹中创建一个新的初始 app 项目。当为假时,创建一个没有初始应用程序的空工作区。然后,您可以使用生成应用程序命令,以便在projects文件夹中创建所有应用程序。</target>
        </trans-unit>
        <trans-unit id="f663af0bc7e20b3f486914ba507c814d922aa1c9" translate="yes" xml:space="preserve">
          <source>When true (the default), creates a new initial application project in the src folder of the new workspace. When false, creates an empty workspace with no initial app. You can then use the generate application command so that all apps are created in the projects folder.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="604d90449f9af601695e42adb4b369217d014677" translate="yes" xml:space="preserve">
          <source>When true (the default), creates files at the top level of the project.</source>
          <target state="translated">当为 &quot;true&quot;(默认)时,在项目的顶层创建文件。</target>
        </trans-unit>
        <trans-unit id="7dcf5b75b56e6b05b97927c0c576164a022fcc31" translate="yes" xml:space="preserve">
          <source>When true (the default), creates the new files at the top level of the current project.</source>
          <target state="translated">当为 &quot;true&quot;(默认)时,在当前项目的顶层创建新文件。</target>
        </trans-unit>
        <trans-unit id="c73f51ee5cd9b796be53e6056b6cf273b83aea52" translate="yes" xml:space="preserve">
          <source>When true (the default), generates a &quot;spec.ts&quot; test file for the new class.</source>
          <target state="translated">当为true(默认)时,为新类生成一个 &quot;spec.ts &quot;测试文件。</target>
        </trans-unit>
        <trans-unit id="ee4fe2980cd47d4b732694bd3792325d274c7180" translate="yes" xml:space="preserve">
          <source>When true (the default), generates a &quot;spec.ts&quot; test file for the new component.</source>
          <target state="translated">当为true(默认)时,为新组件生成一个 &quot;spec.ts &quot;测试文件。</target>
        </trans-unit>
        <trans-unit id="d9eb4be401f613f74c8a47c2093669fd19d2a62c" translate="yes" xml:space="preserve">
          <source>When true (the default), generates a &quot;spec.ts&quot; test file for the new directive.</source>
          <target state="translated">当为 &quot;true&quot;(默认值)时,为新指令生成一个 &quot;spec.ts &quot;测试文件。</target>
        </trans-unit>
        <trans-unit id="6481d790b1dddc693cad7c9e147a4da0a6eb5138" translate="yes" xml:space="preserve">
          <source>When true (the default), generates a &quot;spec.ts&quot; test file for the new guard.</source>
          <target state="translated">当为 &quot;true&quot;(默认值)时,为新卫士生成 &quot;spec.ts &quot;测试文件。</target>
        </trans-unit>
        <trans-unit id="a7a7c6e8767122c13c74f42b5133e29df9ca038a" translate="yes" xml:space="preserve">
          <source>When true (the default), generates a &quot;spec.ts&quot; test file for the new pipe.</source>
          <target state="translated">当为 &quot;true&quot;(默认值)时,为新管道生成一个 &quot;spec.ts &quot;测试文件。</target>
        </trans-unit>
        <trans-unit id="67bfaa3ef25e8db2f0c7f855a6f34e4bb636d36e" translate="yes" xml:space="preserve">
          <source>When true (the default), generates a &quot;spec.ts&quot; test file for the new service.</source>
          <target state="translated">当为 &quot;true&quot;(默认)时,为新服务生成 &quot;spec.ts &quot;测试文件。</target>
        </trans-unit>
        <trans-unit id="13601450e9623940a233839335f1507064324df7" translate="yes" xml:space="preserve">
          <source>When true (the default), generates factory files (&lt;code&gt;.ngfactory.js&lt;/code&gt; and &lt;code&gt;.ngstyle.js&lt;/code&gt;) for &lt;code&gt;.d.ts&lt;/code&gt; files with a corresponding &lt;code&gt;.metadata.json&lt;/code&gt; file.</source>
          <target state="translated">如果为true（默认值）， &lt;code&gt;.d.ts&lt;/code&gt; 带有相应 &lt;code&gt;.metadata.json&lt;/code&gt; 文件的.d.ts文件生成工厂文件（ &lt;code&gt;.ngfactory.js&lt;/code&gt; 和 &lt;code&gt;.ngstyle.js&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="2a9112845e3cd524c5442bdae74800c9bc5fcdd4" translate="yes" xml:space="preserve">
          <source>When true (the default), transforms code that is or could be used in an annotation, to allow it to be imported from template factory modules. See &lt;a href=&quot;aot-compiler#metadata-rewriting&quot;&gt;metadata rewriting&lt;/a&gt; for more information.</source>
          <target state="translated">如果为true（默认值），则转换在注释中使用或可以在注释中使用的代码，以允许将其从模板工厂模块导入。有关更多信息，请参见&lt;a href=&quot;aot-compiler#metadata-rewriting&quot;&gt;元数据重写&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="c8e2eb7a4ced22adde9d0624fe6eddd94fe05b5f" translate="yes" xml:space="preserve">
          <source>When true, accesses the global configuration in the caller's home directory.</source>
          <target state="translated">当为 &quot;true &quot;时,访问呼叫者主目录中的全局配置。</target>
        </trans-unit>
        <trans-unit id="bb60a760b14a85a1bcf7a224a79ad3a0f0de50f6" translate="yes" xml:space="preserve">
          <source>When true, adds more details to output logging.</source>
          <target state="translated">当为 &quot;true &quot;时,为输出日志添加更多细节。</target>
        </trans-unit>
        <trans-unit id="ab5469a20d0799c4f5bb3006c5ea578a0eca87e5" translate="yes" xml:space="preserve">
          <source>When true, applies lint fixes after generating the application.</source>
          <target state="translated">当为 &quot;true &quot;时,在生成应用程序后应用lint修复。</target>
        </trans-unit>
        <trans-unit id="65e6119dd752e0e555791a9d0884d1adaeeefb3e" translate="yes" xml:space="preserve">
          <source>When true, applies lint fixes after generating the class.</source>
          <target state="translated">当为真时,在生成类后应用lint修复。</target>
        </trans-unit>
        <trans-unit id="0adb7edc861426173459ea0ac523eb007f0c6759" translate="yes" xml:space="preserve">
          <source>When true, applies lint fixes after generating the component.</source>
          <target state="translated">当为 &quot;true &quot;时,在生成组件后应用lint修复。</target>
        </trans-unit>
        <trans-unit id="7a95d82cb423357b0496282514270de200f32d94" translate="yes" xml:space="preserve">
          <source>When true, applies lint fixes after generating the directive.</source>
          <target state="translated">当为真时,在生成指令后应用lint修复。</target>
        </trans-unit>
        <trans-unit id="6ef7b46aab6c8559b742e340fc987833a15211ca" translate="yes" xml:space="preserve">
          <source>When true, applies lint fixes after generating the enum.</source>
          <target state="translated">当为 &quot;true &quot;时,在生成枚举后应用lint修复。</target>
        </trans-unit>
        <trans-unit id="0c51368d0aa738deb6b05772bdbedf82c36e2946" translate="yes" xml:space="preserve">
          <source>When true, applies lint fixes after generating the guard.</source>
          <target state="translated">当为 &quot;true &quot;时,在生成防护罩后应用lint修复。</target>
        </trans-unit>
        <trans-unit id="fc80788537b3a3ec52f8e8f2b6f05267ea52752b" translate="yes" xml:space="preserve">
          <source>When true, applies lint fixes after generating the interceptor.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3c7d56418b815742975279a27504721340d37164" translate="yes" xml:space="preserve">
          <source>When true, applies lint fixes after generating the interface.</source>
          <target state="translated">当为 &quot;true &quot;时,在生成接口后应用lint修复。</target>
        </trans-unit>
        <trans-unit id="9df5ce1e8f7684c6a8dc523cf880a5980072d9b1" translate="yes" xml:space="preserve">
          <source>When true, applies lint fixes after generating the library.</source>
          <target state="translated">当为 &quot;true &quot;时,在生成库后应用lint修复。</target>
        </trans-unit>
        <trans-unit id="ea80c5d299d07258dde76aab64937de197bfd6f4" translate="yes" xml:space="preserve">
          <source>When true, applies lint fixes after generating the module.</source>
          <target state="translated">当为 &quot;true &quot;时,在生成模块后应用lint修复。</target>
        </trans-unit>
        <trans-unit id="d3ea9a477728c77e2d1847ebc54f96051234cae6" translate="yes" xml:space="preserve">
          <source>When true, applies lint fixes after generating the pipe.</source>
          <target state="translated">当为 &quot;true &quot;时,在生成管道后应用lint修复。</target>
        </trans-unit>
        <trans-unit id="568d7e9013f771f110a76cdd6a84b6900cb5a879" translate="yes" xml:space="preserve">
          <source>When true, applies lint fixes after generating the service.</source>
          <target state="translated">当为 &quot;true &quot;时,在生成服务后应用lint修复。</target>
        </trans-unit>
        <trans-unit id="3a45da43566e855927acf38adb2c984647ee7977" translate="yes" xml:space="preserve">
          <source>When true, creates a bare-bones project without any testing frameworks. (Use for learning purposes only.)</source>
          <target state="translated">当为真时,创建一个没有任何测试框架的裸体项目。(仅用于学习目的。)</target>
        </trans-unit>
        <trans-unit id="6003cdbbdfe68bec3d9470eff199fcd83c109def" translate="yes" xml:space="preserve">
          <source>When true, creates a new app that uses the Ivy rendering engine.</source>
          <target state="translated">当为真时,创建一个使用Ivy渲染引擎的新应用。</target>
        </trans-unit>
        <trans-unit id="2cd0a15167f0e4812f706fd666aae705c50d746b" translate="yes" xml:space="preserve">
          <source>When true, creates a project without any testing frameworks. (Use for learning purposes only.)</source>
          <target state="translated">当为真时,创建一个没有任何测试框架的项目。(仅用于学习目的。)</target>
        </trans-unit>
        <trans-unit id="cbf6fb323dee4d1c82a080508b0dc4b0f8607fed" translate="yes" xml:space="preserve">
          <source>When true, creates a routing NgModule.</source>
          <target state="translated">当为 &quot;true &quot;时,创建一个路由NgModule。</target>
        </trans-unit>
        <trans-unit id="56dbc63b0ec51cd8cb74b3a1a9ad4fe8e0e83b50" translate="yes" xml:space="preserve">
          <source>When true, creates a routing module.</source>
          <target state="translated">当为 &quot;true &quot;时,创建一个路由模块。</target>
        </trans-unit>
        <trans-unit id="580233c10f5dcbb1225384186d03c9828f27f54c" translate="yes" xml:space="preserve">
          <source>When true, creates a workspace without any testing frameworks. (Use for learning purposes only.)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c2ec0ae9d8c5507501033cd46944cba3283bfeae" translate="yes" xml:space="preserve">
          <source>When true, creates the new files at the top level of the current project root.</source>
          <target state="translated">当为 &quot;true &quot;时,在当前项目根的顶层创建新文件。</target>
        </trans-unit>
        <trans-unit id="2e8e353066e54d59ddc751dbc9d0c297d8b85adb" translate="yes" xml:space="preserve">
          <source>When true, creates the new files at the top level of the current project.</source>
          <target state="translated">当为 &quot;true &quot;时,在当前项目的顶层创建新文件。</target>
        </trans-unit>
        <trans-unit id="f5a93a3117cd8f1514feec73f24850b724350d92" translate="yes" xml:space="preserve">
          <source>When true, deliver events asynchronously.</source>
          <target state="translated">当为真时,异步传递事件。</target>
        </trans-unit>
        <trans-unit id="18f021c0fe33a328d88b865734d1717e7626889b" translate="yes" xml:space="preserve">
          <source>When true, disables interactive input prompts for options with a default.</source>
          <target state="translated">当为 &quot;true &quot;时,禁用默认选项的交互式输入提示。</target>
        </trans-unit>
        <trans-unit id="f6ada5bdef828fa760b365e6b7b776cf6b17adb4" translate="yes" xml:space="preserve">
          <source>When true, does not add dependencies to the &quot;package.json&quot; file.</source>
          <target state="translated">当为真时,不向 &quot;package.json &quot;文件添加依赖关系。</target>
        </trans-unit>
        <trans-unit id="f8d98eca32aeaddff19b79ab0b97e3b4f44f897f" translate="yes" xml:space="preserve">
          <source>When true, does not create &quot;spec.ts&quot; test files for the app.</source>
          <target state="translated">当为真时,不为应用程序创建 &quot;spec.ts &quot;测试文件。</target>
        </trans-unit>
        <trans-unit id="ad9dfb140ef99c5cc049b7e2fb5cd3f4028d8921" translate="yes" xml:space="preserve">
          <source>When true, does not create &quot;spec.ts&quot; test files for the application.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6e5f0ff4b1329f81e381ce2feefd91e48e03360c" translate="yes" xml:space="preserve">
          <source>When true, does not create &quot;spec.ts&quot; test files for the new class.</source>
          <target state="translated">当为真时,不为新类创建 &quot;spec.ts &quot;测试文件。</target>
        </trans-unit>
        <trans-unit id="787db2ebf3b6d9a9cfcb5d65d02ca9380b758bf7" translate="yes" xml:space="preserve">
          <source>When true, does not create &quot;spec.ts&quot; test files for the new component.</source>
          <target state="translated">当为真时,不为新组件创建 &quot;spec.ts &quot;测试文件。</target>
        </trans-unit>
        <trans-unit id="1a05daffc1a3871cce336c9e222772d0c5768aeb" translate="yes" xml:space="preserve">
          <source>When true, does not create &quot;spec.ts&quot; test files for the new guard.</source>
          <target state="translated">当为真时,不为新卫士创建 &quot;spec.ts &quot;测试文件。</target>
        </trans-unit>
        <trans-unit id="9e5fb12992a47534fd457e096d7be9954e441067" translate="yes" xml:space="preserve">
          <source>When true, does not create &quot;spec.ts&quot; test files for the new interceptor.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0ec16b43282885c383a356226cf0f90b2d403309" translate="yes" xml:space="preserve">
          <source>When true, does not create &quot;spec.ts&quot; test files for the new pipe.</source>
          <target state="translated">当为真时,不为新管道创建 &quot;spec.ts &quot;测试文件。</target>
        </trans-unit>
        <trans-unit id="8dca9f2d6a2bcf883e9dfe335c0e95142163fb93" translate="yes" xml:space="preserve">
          <source>When true, does not create &quot;spec.ts&quot; test files for the new resolver.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="84d13244f42f45e24f366a7c34846f7ff3ad9285" translate="yes" xml:space="preserve">
          <source>When true, does not create &quot;spec.ts&quot; test files for the new service.</source>
          <target state="translated">当为真时,不为新服务创建 &quot;spec.ts &quot;测试文件。</target>
        </trans-unit>
        <trans-unit id="ff22a4e958e901d487c01fddcd1c261ea77d1f94" translate="yes" xml:space="preserve">
          <source>When true, does not emit &lt;code&gt;.ngfactory.js&lt;/code&gt; and &lt;code&gt;.ngstyle.js&lt;/code&gt; files. This turns off most of the template compiler and disables the reporting of template diagnostics.</source>
          <target state="translated">为true时，不发出 &lt;code&gt;.ngfactory.js&lt;/code&gt; 和 &lt;code&gt;.ngstyle.js&lt;/code&gt; 文件。这将关闭大多数模板编译器，并禁用模板诊断报告。</target>
        </trans-unit>
        <trans-unit id="85d57e2a3768528616abacc66eeeda04f86cb197" translate="yes" xml:space="preserve">
          <source>When true, does not generate &quot;spec.ts&quot; test files for the new project.</source>
          <target state="translated">当为真时,不为新项目生成 &quot;spec.ts &quot;测试文件。</target>
        </trans-unit>
        <trans-unit id="021531593a5857b6b634ffa7110b7e09677de92f" translate="yes" xml:space="preserve">
          <source>When true, does not import this component into the owning NgModule.</source>
          <target state="translated">当为 &quot;true &quot;时,不把这个组件导入到自己的NgModule中。</target>
        </trans-unit>
        <trans-unit id="9dce1aa639bae69ca39cbea2281f5ab52e2f5810" translate="yes" xml:space="preserve">
          <source>When true, does not import this directive into the owning NgModule.</source>
          <target state="translated">当为 &quot;true &quot;时,不将此指令导入到自己的NgModule中。</target>
        </trans-unit>
        <trans-unit id="e39a45636deab57166780dec3288520cc3551132" translate="yes" xml:space="preserve">
          <source>When true, does not import this pipe into the owning NgModule.</source>
          <target state="translated">当为 &quot;true &quot;时,不将此管道导入到自己的NgModule中。</target>
        </trans-unit>
        <trans-unit id="541c18226ee8c59f40f232cd042028e33b0de587" translate="yes" xml:space="preserve">
          <source>When true, does not initialize a git repository.</source>
          <target state="translated">当为 &quot;true &quot;时,不初始化git仓库。</target>
        </trans-unit>
        <trans-unit id="521a0120a95b14866025640c398ce8f7ff310fa4" translate="yes" xml:space="preserve">
          <source>When true, does not install dependency packages.</source>
          <target state="translated">当为 &quot;true &quot;时,不安装依赖包。</target>
        </trans-unit>
        <trans-unit id="f3578b18def83dc2da16f045d899e718695cd50d" translate="yes" xml:space="preserve">
          <source>When true, does not install packages for dependencies.</source>
          <target state="translated">当为 &quot;true &quot;时,不为依赖关系安装包。</target>
        </trans-unit>
        <trans-unit id="0646ee7c8071d504a9e696eab789659e9bc1e696" translate="yes" xml:space="preserve">
          <source>When true, does not to produce &lt;code&gt;.metadata.json&lt;/code&gt; files. Default is &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">为true时，不生成 &lt;code&gt;.metadata.json&lt;/code&gt; 文件。默认值为 &lt;code&gt;false&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="9c9ab2f848c6e3f1274c18107fe7541116d4de99" translate="yes" xml:space="preserve">
          <source>When true, does not update &quot;tsconfig.json&quot; to add a path mapping for the new library. The path mapping is needed to use the library in an app, but can be disabled here to simplify development.</source>
          <target state="translated">当为 &quot;true &quot;时,不更新 &quot;tsconfig.json &quot;来为新库添加路径映射。路径映射是在应用程序中使用库所需要的,但可以在这里禁用,以简化开发。</target>
        </trans-unit>
        <trans-unit id="62c6bdc8aeeb938a24e46cc58eb1bf0b651c1bf5" translate="yes" xml:space="preserve">
          <source>When true, enable the location strategy that uses the URL fragment instead of the history API.</source>
          <target state="translated">当为真时,启用使用URL片段而非历史API的位置策略。</target>
        </trans-unit>
        <trans-unit id="261fe77e1b294ce4d3a98b31adb772ddea771256" translate="yes" xml:space="preserve">
          <source>When true, enables use of the &lt;code&gt;&amp;lt;template&amp;gt;&lt;/code&gt; element, which was deprecated in Angular 4.0, in favor of &lt;code&gt;&amp;lt;ng-template&amp;gt;&lt;/code&gt; (to avoid colliding with the DOM's element of the same name). Default is false. Might be required by some third-party Angular libraries.</source>
          <target state="translated">如果为true，则启用Angular 4.0中不推荐使用的 &lt;code&gt;&amp;lt;template&amp;gt;&lt;/code&gt; 元素，而推荐使用 &lt;code&gt;&amp;lt;ng-template&amp;gt;&lt;/code&gt; （以避免与同名的DOM元素冲突）。默认为false。某些第三方Angular库可能需要。</target>
        </trans-unit>
        <trans-unit id="7c0d541d696d1f15840d7575ea4f510c48c941cb" translate="yes" xml:space="preserve">
          <source>When true, forces overwriting of existing files.</source>
          <target state="translated">当为 &quot;true &quot;时,强制覆盖现有文件。</target>
        </trans-unit>
        <trans-unit id="1aaf874ced3ebb154b21f8167d3778c1794023b3" translate="yes" xml:space="preserve">
          <source>When true, generate all possible files even if they are empty. Default is false. Used by the Bazel build rules to simplify how Bazel rules track file dependencies. Do not use this option outside of the Bazel rules.</source>
          <target state="translated">当为 &quot;true &quot;时,生成所有可能的文件,即使它们是空的。默认为false。由Bazel构建规则使用,以简化Bazel规则跟踪文件依赖关系的方式。不要在Bazel规则之外使用这个选项。</target>
        </trans-unit>
        <trans-unit id="5b7e7bf350c9fcf27596aa20973b3db4fd6e8bb1" translate="yes" xml:space="preserve">
          <source>When true, generates a flat module index of the given file name and the corresponding flat module metadata. Use to create flat modules that are packaged similarly to &lt;code&gt;@angular/core&lt;/code&gt; and &lt;code&gt;@angular/common&lt;/code&gt;. When this option is used, the &lt;code&gt;package.json&lt;/code&gt; for the library should refer to the generated flat module index instead of the library index file.</source>
          <target state="translated">如果为true，则生成给定文件名的平面模块索引和相应的平面模块元数据。用于创建类似于 &lt;code&gt;@angular/core&lt;/code&gt; 和 &lt;code&gt;@angular/common&lt;/code&gt; 打包的平面模块。使用此选项时，库的 &lt;code&gt;package.json&lt;/code&gt; 应引用生成的平面模块索引而不是库索引文件。</target>
        </trans-unit>
        <trans-unit id="b9b819323f8f18793bab01506d1b5f14bbec5acf" translate="yes" xml:space="preserve">
          <source>When true, generates a routing module for the initial project.</source>
          <target state="translated">当为 &quot;true &quot;时,为初始项目生成一个路由模块。</target>
        </trans-unit>
        <trans-unit id="ae14fe320ea896a875f632dbc4bff5abbda0c2a2" translate="yes" xml:space="preserve">
          <source>When true, includes styles inline in the component TS file. By default, an external styles file is created and referenced in the component TS file.</source>
          <target state="translated">当为 &quot;true &quot;时,在组件的TS文件中内嵌样式。默认情况下,会创建一个外部样式文件并在组件TS文件中引用。</target>
        </trans-unit>
        <trans-unit id="3b3beaf924cf679384a2ed4d3854a933a4318a5b" translate="yes" xml:space="preserve">
          <source>When true, includes styles inline in the component.ts file. Only CSS styles can be included inline. By default, an external styles file is created and referenced in the component.ts file.</source>
          <target state="translated">当为 &quot;true &quot;时,在components.ts文件中内嵌样式。只有CSS样式可以被内联包含。默认情况下,会创建一个外部样式文件并在component.ts文件中引用。</target>
        </trans-unit>
        <trans-unit id="1fc4893016b862f1f6cb51410f367ec8369a5e97" translate="yes" xml:space="preserve">
          <source>When true, includes styles inline in the root component.ts file. Only CSS styles can be included inline. Default is false, meaning that an external styles file is created and referenced in the root component.ts file.</source>
          <target state="translated">当为 &quot;true &quot;时,在根组件.ts文件中内嵌样式。只有CSS样式可以被内联包含。默认值为false,这意味着会创建一个外部样式文件,并在根组件.ts文件中引用。</target>
        </trans-unit>
        <trans-unit id="33247607dda0b14efd7380854b7d1b95cb8b707e" translate="yes" xml:space="preserve">
          <source>When true, includes template inline in the component TS file. By default, an external template file is created and referenced in the component TS file.</source>
          <target state="translated">当为 &quot;true &quot;时,在组件的TS文件中内联包含模板。默认情况下,创建一个外部模板文件并在组件TS文件中引用。</target>
        </trans-unit>
        <trans-unit id="d5899d892e6bf561e02447910478d247955babab" translate="yes" xml:space="preserve">
          <source>When true, includes template inline in the component.ts file. By default, an external template file is created and referenced in the component.ts file.</source>
          <target state="translated">当为 &quot;true &quot;时,在component.ts文件中内嵌模板。默认情况下,会创建一个外部模板文件并在component.ts文件中引用。</target>
        </trans-unit>
        <trans-unit id="9ddaf69f17ee1d461ed6364788294b2a4b709ebc" translate="yes" xml:space="preserve">
          <source>When true, includes template inline in the root component.ts file. Default is false, meaning that an external template file is created and referenced in the root component.ts file.</source>
          <target state="translated">当为true时,在根组件.ts文件中内嵌模板。默认值为false,表示创建一个外部模板文件并在root component.ts文件中引用。</target>
        </trans-unit>
        <trans-unit id="9fe87a52ceeabbe44e5c515a3228147cbc64b6f3" translate="yes" xml:space="preserve">
          <source>When true, injector returns an array of instances. This is useful to allow multiple providers spread across many files to provide configuration information to a common token.</source>
          <target state="translated">当为真时,injector 返回一个实例数组。这对于允许分布在多个文件中的多个提供者向一个共同的令牌提供配置信息非常有用。</target>
        </trans-unit>
        <trans-unit id="f2bf503a52e77886a9df9b3b721629b7bdd83f5d" translate="yes" xml:space="preserve">
          <source>When true, log all internal navigation events to the console. Use for debugging.</source>
          <target state="translated">当为真时,将所有内部导航事件记录到控制台。用于调试。</target>
        </trans-unit>
        <trans-unit id="0ba98b8ba818a019d7726ea3cd743749164694e0" translate="yes" xml:space="preserve">
          <source>When true, navigates while replacing the current state in history.</source>
          <target state="translated">当为真时,一边导航一边替换历史中的当前状态。</target>
        </trans-unit>
        <trans-unit id="100b728dbc5957ef91ab9a8121d4653d7ee51209" translate="yes" xml:space="preserve">
          <source>When true, navigates without pushing a new state into history.</source>
          <target state="translated">当真,导航不推陈出新,进入历史状态。</target>
        </trans-unit>
        <trans-unit id="008db015d7015b6513b946d13e89a45905cf3dd3" translate="yes" xml:space="preserve">
          <source>When true, preserves the URL fragment for the next navigation</source>
          <target state="translated">当为 &quot;true &quot;时,为下一次导航保留URL片段。</target>
        </trans-unit>
        <trans-unit id="e7053f3ec9579533ad57553df2fc44aae15cfd47" translate="yes" xml:space="preserve">
          <source>When true, prints extra information while compiling templates. Default is false.</source>
          <target state="translated">当为 &quot;true &quot;时,在编译模板时打印额外的信息。默认为false。</target>
        </trans-unit>
        <trans-unit id="470599a91818785c5ee58a0f113cae7c96500252" translate="yes" xml:space="preserve">
          <source>When true, replaces the &lt;code&gt;templateUrl&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;../api/core/component#styleUrls&quot;&gt;styleUrls&lt;/a&gt;&lt;/code&gt; property in all &lt;code&gt;@&lt;a href=&quot;../api/core/component&quot;&gt;Component&lt;/a&gt;&lt;/code&gt; decorators with inlined contents in &lt;code&gt;template&lt;/code&gt; and &lt;code&gt;styles&lt;/code&gt; properties.</source>
          <target state="translated">为true时，将所有 &lt;code&gt;@&lt;a href=&quot;../api/core/component&quot;&gt;Component&lt;/a&gt;&lt;/code&gt; &lt;a href=&quot;../api/core/component&quot;&gt;Component&lt;/a&gt;装饰器中的 &lt;code&gt;templateUrl&lt;/code&gt; 和 &lt;code&gt;&lt;a href=&quot;../api/core/component#styleUrls&quot;&gt;styleUrls&lt;/a&gt;&lt;/code&gt; 属性替换为 &lt;code&gt;template&lt;/code&gt; 和 &lt;code&gt;styles&lt;/code&gt; 属性中的内联内容。</target>
        </trans-unit>
        <trans-unit id="1a4f8c074303da2d063c77492f8e15e05b86f00c" translate="yes" xml:space="preserve">
          <source>When true, reports an error to the &lt;code&gt;.metadata.json&lt;/code&gt; file if &lt;code&gt;&quot;skipMetadataEmit&quot;&lt;/code&gt; is &lt;code&gt;false&lt;/code&gt;. Default is false. Use only when &lt;code&gt;&quot;skipMetadataEmit&quot;&lt;/code&gt; is false and &lt;code&gt;&quot;skipTemplateCodeGen&quot;&lt;/code&gt; is true.</source>
          <target state="translated">为true时，如果 &lt;code&gt;&quot;skipMetadataEmit&quot;&lt;/code&gt; 为 &lt;code&gt;false&lt;/code&gt; ,则向 &lt;code&gt;.metadata.json&lt;/code&gt; 文件报告错误。默认为false。仅在 &lt;code&gt;&quot;skipMetadataEmit&quot;&lt;/code&gt; 为false且 &lt;code&gt;&quot;skipTemplateCodeGen&quot;&lt;/code&gt; 为true时使用。</target>
        </trans-unit>
        <trans-unit id="fee2c0f9c227cd936e7e0ec7fde35afd7a82fa14" translate="yes" xml:space="preserve">
          <source>When true, runs through and reports activity without writing out results.</source>
          <target state="translated">当为真时,跑完并报告活动,不写出结果。</target>
        </trans-unit>
        <trans-unit id="248e093ad4093bf849e9a2bb8ea6c61115311429" translate="yes" xml:space="preserve">
          <source>When true, searches all of angular.io. Otherwise, searches only API reference documentation.</source>
          <target state="translated">当为 &quot;true &quot;时,搜索所有的angular.io。否则,只搜索API参考文档。</target>
        </trans-unit>
        <trans-unit id="d2052aabfdb00eb60b3def41e228c021090d18cd" translate="yes" xml:space="preserve">
          <source>When true, the declaring NgModule exports this component.</source>
          <target state="translated">当为 &quot;true &quot;时,声明NgModule导出这个组件。</target>
        </trans-unit>
        <trans-unit id="474f66dc7056c6ae634ff04631017e86490c737b" translate="yes" xml:space="preserve">
          <source>When true, the declaring NgModule exports this directive.</source>
          <target state="translated">当为 &quot;true &quot;时,声明NgModule导出此指令。</target>
        </trans-unit>
        <trans-unit id="89179c30c022a69730027b86caf1462ba77a87db" translate="yes" xml:space="preserve">
          <source>When true, the declaring NgModule exports this pipe.</source>
          <target state="translated">当为真时,声明NgModule导出这个管道。</target>
        </trans-unit>
        <trans-unit id="04e0e74efef0d3f502332b17196bd16fef5f0f39" translate="yes" xml:space="preserve">
          <source>When true, the new component is the entry component of the declaring NgModule.</source>
          <target state="translated">当为真时,新组件是声明NgModule的入口组件。</target>
        </trans-unit>
        <trans-unit id="6fbefb81d5660c920378ce16f4fcf3f36378b0ac" translate="yes" xml:space="preserve">
          <source>When true, the pipe is pure, meaning that the &lt;code&gt;transform()&lt;/code&gt; method is invoked only when its input arguments change. Pipes are pure by default.</source>
          <target state="translated">如果为true，则管道为纯管道，这意味着仅当其输入参数更改时才调用 &lt;code&gt;transform()&lt;/code&gt; 方法。默认情况下，管道是纯管道。</target>
        </trans-unit>
        <trans-unit id="56b0467d9b50fc15e1b147ea8d738c249762a269" translate="yes" xml:space="preserve">
          <source>When true, the special animation control binding &lt;code&gt;@.disabled&lt;/code&gt; binding prevents all animations from rendering. Place the &lt;code&gt;@.disabled&lt;/code&gt; binding on an element to disable animations on the element itself, as well as any inner animation triggers within the element.</source>
          <target state="translated">设置为true时，特殊的动画控件绑定 &lt;code&gt;@.disabled&lt;/code&gt; 绑定可防止渲染所有动画。将 &lt;code&gt;@.disabled&lt;/code&gt; 绑定放置在元素上以禁用元素本身上的动画以及元素内的所有内部动画触发器。</target>
        </trans-unit>
        <trans-unit id="685f4a008223a0507d20fd336655976d7b7efaea" translate="yes" xml:space="preserve">
          <source>When true, use &lt;a href=&quot;https://github.com/angular/tsickle&quot;&gt;Tsickle&lt;/a&gt; to annotate the emitted JavaScript with &lt;a href=&quot;http://usejsdoc.org/&quot;&gt;JSDoc&lt;/a&gt; comments needed by the &lt;a href=&quot;https://github.com/google/closure-compiler&quot;&gt;Closure Compiler&lt;/a&gt;. Default is false.</source>
          <target state="translated">如果为true，则使用&lt;a href=&quot;https://github.com/angular/tsickle&quot;&gt;Tsickle&lt;/a&gt;使用&lt;a href=&quot;https://github.com/google/closure-compiler&quot;&gt;Closure Compiler&lt;/a&gt;所需的&lt;a href=&quot;http://usejsdoc.org/&quot;&gt;JSDoc&lt;/a&gt;注释对发出的JavaScript进行注释。默认为false。</target>
        </trans-unit>
        <trans-unit id="8fc2c813522ec25fd67580fe8ed8634f057ad051" translate="yes" xml:space="preserve">
          <source>When two imported modules, loaded at the same time, list a provider with the same token, the second module's provider &quot;wins&quot;. That's because both providers are added to the same injector.</source>
          <target state="translated">当两个导入的模块,同时加载时,列出一个具有相同标记的提供者时,第二个模块的提供者 &quot;获胜&quot;。这是因为两个提供者都被添加到同一个注入器中。</target>
        </trans-unit>
        <trans-unit id="8a38590f055a7be9417ecb7107a61245f38e62ba" translate="yes" xml:space="preserve">
          <source>When updating the value for a form group instance that contains multiple controls, you may only want to update parts of the model. This section covers how to update specific parts of a form control data model.</source>
          <target state="translated">更新包含多个控件的表单组实例的值时,可能只想更新模型的部分内容。本节介绍如何更新表单控件数据模型的特定部分。</target>
        </trans-unit>
        <trans-unit id="0cb80c294f2ac7a6f549a1f6b747ec2a760b7c8e" translate="yes" xml:space="preserve">
          <source>When users click a &lt;em&gt;deep link&lt;/em&gt; in an email, open the detail view for a particular hero.</source>
          <target state="translated">当用户单击电子邮件中的&lt;em&gt;深层链接&lt;/em&gt;时，打开特定英雄的详细信息视图。</target>
        </trans-unit>
        <trans-unit id="06df6a1b0b43e2a627825e02e4d731eb142a9abd" translate="yes" xml:space="preserve">
          <source>When users click a hero name in either view, navigate to a detail view of the selected hero.</source>
          <target state="translated">当用户点击任一视图中的英雄名称时,导航到所选英雄的详细视图。</target>
        </trans-unit>
        <trans-unit id="d2720a13b038e3604df3e775da3153607bd18d08" translate="yes" xml:space="preserve">
          <source>When users refresh the application, they see the latest fully cached version. New tabs load the latest cached code.</source>
          <target state="translated">当用户刷新应用时,他们看到的是最新的完全缓存版本。新的标签页会加载最新的缓存代码。</target>
        </trans-unit>
        <trans-unit id="89ee168cd559f7f8ec103bc580870b5f544559ab" translate="yes" xml:space="preserve">
          <source>When using &lt;a href=&quot;../../core/platformref#bootstrapmodule&quot;&gt;`bootstrapModule()`&lt;/a&gt; or &lt;a href=&quot;../../core/platformref#bootstrapmodulefactory&quot;&gt;`bootstrapModuleFactory()`&lt;/a&gt; to bootstrap the downgraded modules, each one is considered a &quot;root&quot; module. As a consequence, a new instance will be created for every injectable provided in &lt;code&gt;&quot;root&quot;&lt;/code&gt; (via &lt;a href=&quot;../../core/injectable#providedIn&quot;&gt;`providedIn`&lt;/a&gt;). If this is not your intention, you can have a shared module (that will act as act as the &quot;root&quot; module) and create all downgraded modules using that module's injector:</source>
          <target state="translated">当使用&lt;a href=&quot;../../core/platformref#bootstrapmodule&quot;&gt;bootstrapModule（）&lt;/a&gt;或&lt;a href=&quot;../../core/platformref#bootstrapmodulefactory&quot;&gt;bootstrapModuleFactory（）&lt;/a&gt;引导降级的模块时，每个模块都被视为&amp;ldquo;根&amp;rdquo;模块。结果，将为 &lt;code&gt;&quot;root&quot;&lt;/code&gt; 提供的每个可注射对象创建一个新实例（通过&lt;a href=&quot;../../core/injectable#providedIn&quot;&gt;`providedIn`&lt;/a&gt;）。如果这不是您的意图，那么您可以拥有一个共享模块（将充当&amp;ldquo;根&amp;rdquo;模块）并使用该模块的注入器创建所有降级的模块：</target>
        </trans-unit>
        <trans-unit id="2ded6d3e9bc80e46e3525defd91a7c6252307962" translate="yes" xml:space="preserve">
          <source>When using &lt;a href=&quot;../api/common/http/httpclient#request&quot;&gt;&lt;code&gt;HttpClient#request()&lt;/code&gt;&lt;/a&gt; with an HTTP method, configure with &lt;a href=&quot;../api/common/http/httpclient#request&quot;&gt;&lt;code&gt;observe: 'events'&lt;/code&gt;&lt;/a&gt; to see all events, including the progress of transfers.</source>
          <target state="translated">当将&lt;a href=&quot;../api/common/http/httpclient#request&quot;&gt; &lt;code&gt;HttpClient#request()&lt;/code&gt; &lt;/a&gt;与HTTP方法一起使用时，请使用&lt;a href=&quot;../api/common/http/httpclient#request&quot;&gt; &lt;code&gt;observe: 'events'&lt;/code&gt; &lt;/a&gt;进行配置以查看所有事件，包括传输进度。</target>
        </trans-unit>
        <trans-unit id="6991172ddb2922b4845f9e0833f99ccb5df9980b" translate="yes" xml:space="preserve">
          <source>When using &lt;a href=&quot;../api/common/http/httpclient#request&quot;&gt;&lt;code&gt;HttpClient.request()&lt;/code&gt;&lt;/a&gt; with an HTTP method, configure the method with &lt;a href=&quot;../api/common/http/httpclient#request&quot;&gt;&lt;code&gt;observe: 'events'&lt;/code&gt;&lt;/a&gt; to see all events, including the progress of transfers.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c69f633c581d7efc3b0e3be27a1a0f2399964d92" translate="yes" xml:space="preserve">
          <source>When using &lt;code&gt;$event.target&lt;/code&gt; for DOM events (because of the possibility of event bubbling, &lt;code&gt;$event.target&lt;/code&gt; in the DOM typings doesn't have the type you might expect).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e8e9cb3c6b273bb12f381bfd95b5afdab0eb5729" translate="yes" xml:space="preserve">
          <source>When using &lt;code&gt;&lt;a href=&quot;downgrademodule&quot;&gt;downgradeModule&lt;/a&gt;()&lt;/code&gt;, downgraded injectables will not be available until the Angular module that provides them is instantiated. In order to be safe, you need to ensure that the downgraded injectables are not used anywhere &lt;em&gt;outside&lt;/em&gt; the part of the app where it is guaranteed that their module has been instantiated.</source>
          <target state="translated">当使用 &lt;code&gt;&lt;a href=&quot;downgrademodule&quot;&gt;downgradeModule&lt;/a&gt;()&lt;/code&gt; 时，降级的可注入对象在实例化提供它们的Angular模块之前将不可用。为了安全起见，您需要确保在应用程序部分&lt;em&gt;之外&lt;/em&gt;的任何可确保实例化其模块的地方都不会使用降级的注射剂。</target>
        </trans-unit>
        <trans-unit id="75f082f4a2a9292bee0a6ec7fcdcf08c245efeae" translate="yes" xml:space="preserve">
          <source>When using &lt;code&gt;@&lt;a href=&quot;../api/core/optional&quot;&gt;Optional&lt;/a&gt;()&lt;/code&gt;, your code must be prepared for a null value. If you don't register a logger provider anywhere, the injector sets the value of &lt;code&gt;logger&lt;/code&gt; to null.</source>
          <target state="translated">使用 &lt;code&gt;@&lt;a href=&quot;../api/core/optional&quot;&gt;Optional&lt;/a&gt;()&lt;/code&gt; ，您的代码必须准备为空值。如果您未在任何地方注册记录器提供程序，则注入器将 &lt;code&gt;logger&lt;/code&gt; 器的值设置为null。</target>
        </trans-unit>
        <trans-unit id="20476825f82847cd1a9f8b625992073f31914a1b" translate="yes" xml:space="preserve">
          <source>When using &lt;code&gt;bypassSecurityTrust...&lt;/code&gt;, make sure to call the method as early as possible and as close as possible to the source of the value, to make it easy to verify no security bug is created by its use.</source>
          <target state="translated">当使用 &lt;code&gt;bypassSecurityTrust...&lt;/code&gt; ，请确保尽早调用该方法，并使其尽可能靠近该值的来源，以使其易于验证使用该方法不会造成安全漏洞。</target>
        </trans-unit>
        <trans-unit id="1b0737e35a4e2a89a802c7501f9bcde999f119f8" translate="yes" xml:space="preserve">
          <source>When using a &lt;code&gt;&lt;a href=&quot;../api/router/routerlink&quot;&gt;RouterLink&lt;/a&gt;&lt;/code&gt; to navigate instead of the &lt;code&gt;&lt;a href=&quot;../api/router/router&quot;&gt;Router&lt;/a&gt;&lt;/code&gt; service, you'd use the &lt;em&gt;same&lt;/em&gt; link parameters array, but you wouldn't provide the object with the &lt;code&gt;&lt;a href=&quot;../api/router/navigationextras#relativeTo&quot;&gt;relativeTo&lt;/a&gt;&lt;/code&gt; property. The &lt;code&gt;&lt;a href=&quot;../api/router/activatedroute&quot;&gt;ActivatedRoute&lt;/a&gt;&lt;/code&gt; is implicit in a &lt;code&gt;&lt;a href=&quot;../api/router/routerlink&quot;&gt;RouterLink&lt;/a&gt;&lt;/code&gt; directive.</source>
          <target state="translated">当使用 &lt;code&gt;&lt;a href=&quot;../api/router/routerlink&quot;&gt;RouterLink&lt;/a&gt;&lt;/code&gt; 而不是 &lt;code&gt;&lt;a href=&quot;../api/router/router&quot;&gt;Router&lt;/a&gt;&lt;/code&gt; 服务进行导航时，您将使用&lt;em&gt;相同的&lt;/em&gt;链接参数数组，但不会为对象提供 &lt;code&gt;&lt;a href=&quot;../api/router/navigationextras#relativeTo&quot;&gt;relativeTo&lt;/a&gt;&lt;/code&gt; 属性。该 &lt;code&gt;&lt;a href=&quot;../api/router/activatedroute&quot;&gt;ActivatedRoute&lt;/a&gt;&lt;/code&gt; 处于隐性 &lt;code&gt;&lt;a href=&quot;../api/router/routerlink&quot;&gt;RouterLink&lt;/a&gt;&lt;/code&gt; 指令。</target>
        </trans-unit>
        <trans-unit id="0a811dcb555e2b511e7286f846a7606bfaba1d87" translate="yes" xml:space="preserve">
          <source>When using a &lt;code&gt;&lt;a href=&quot;../api/router/routerlink&quot;&gt;RouterLink&lt;/a&gt;&lt;/code&gt; to navigate instead of the &lt;code&gt;&lt;a href=&quot;../api/router/router&quot;&gt;Router&lt;/a&gt;&lt;/code&gt; service, you'd use the same link parameters array, but you wouldn't provide the object with the &lt;code&gt;relativeTo&lt;/code&gt; property. The &lt;code&gt;&lt;a href=&quot;../api/router/activatedroute&quot;&gt;ActivatedRoute&lt;/a&gt;&lt;/code&gt; is implicit in a &lt;code&gt;&lt;a href=&quot;../api/router/routerlink&quot;&gt;RouterLink&lt;/a&gt;&lt;/code&gt; directive.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7e193170cfcf2c61d6cccc9238988d857864d00f" translate="yes" xml:space="preserve">
          <source>When using absolute redirects, the &lt;code&gt;&lt;a href=&quot;../api/router/router&quot;&gt;Router&lt;/a&gt;&lt;/code&gt; will use the query parameters and the fragment from the &lt;code&gt;redirectTo&lt;/code&gt; in the route config.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c1b489e199dd0f47c8d42b6e961935b6f956c657" translate="yes" xml:space="preserve">
          <source>When using absolute redirects, the &lt;code&gt;&lt;a href=&quot;../api/router/router&quot;&gt;Router&lt;/a&gt;&lt;/code&gt; will use the query parameters and the fragment from the redirectTo in the route config.</source>
          <target state="translated">使用绝对重定向时， &lt;code&gt;&lt;a href=&quot;../api/router/router&quot;&gt;Router&lt;/a&gt;&lt;/code&gt; 将在路由配置中使用查询参数和来自redirectTo的片段。</target>
        </trans-unit>
        <trans-unit id="26ed9b82d17457df64013b9eb1fbbaccf7274474" translate="yes" xml:space="preserve">
          <source>When using an &lt;code&gt;intervalTimer()&lt;/code&gt; such as &lt;code&gt;setInterval()&lt;/code&gt; in &lt;code&gt;&lt;a href=&quot;../api/core/testing/async&quot;&gt;async&lt;/a&gt;()&lt;/code&gt;, remember to cancel the timer with &lt;code&gt;clearInterval()&lt;/code&gt; after the test, otherwise the &lt;code&gt;&lt;a href=&quot;../api/core/testing/async&quot;&gt;async&lt;/a&gt;()&lt;/code&gt; never ends.</source>
          <target state="translated">在 &lt;code&gt;&lt;a href=&quot;../api/core/testing/async&quot;&gt;async&lt;/a&gt;()&lt;/code&gt; （）中使用诸如 &lt;code&gt;setInterval()&lt;/code&gt; &lt;code&gt;intervalTimer()&lt;/code&gt; 类的intervalTimer（）时，请记住在测试后使用 &lt;code&gt;clearInterval()&lt;/code&gt; 取消计时器，否则 &lt;code&gt;&lt;a href=&quot;../api/core/testing/async&quot;&gt;async&lt;/a&gt;()&lt;/code&gt; （）永远不会结束。</target>
        </trans-unit>
        <trans-unit id="0913755b7a1f7c285fbf6bb8b2526ee9e83ffe74" translate="yes" xml:space="preserve">
          <source>When using an &lt;code&gt;intervalTimer()&lt;/code&gt; such as &lt;code&gt;setInterval()&lt;/code&gt; in &lt;code&gt;&lt;a href=&quot;../api/core/testing/waitforasync&quot;&gt;waitForAsync&lt;/a&gt;()&lt;/code&gt;, remember to cancel the timer with &lt;code&gt;clearInterval()&lt;/code&gt; after the test, otherwise the &lt;code&gt;&lt;a href=&quot;../api/core/testing/waitforasync&quot;&gt;waitForAsync&lt;/a&gt;()&lt;/code&gt; never ends.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="134ada82c1bf109630654ad3274d0beaed098194" translate="yes" xml:space="preserve">
          <source>When using developer tools, the service worker is kept running in the background and never restarts. This can cause behavior with Dev Tools open to differ from behavior a user might experience.</source>
          <target state="translated">当使用开发者工具时,服务工作者一直在后台运行,从未重新启动。这可能会导致开发工具打开时的行为与用户可能体验到的行为不同。</target>
        </trans-unit>
        <trans-unit id="86d7701f04dbf3278e6bca7d61dec82d10b279c4" translate="yes" xml:space="preserve">
          <source>When using emulated view encapsulation, Angular preprocesses all component styles so that they approximate the standard shadow CSS scoping rules.</source>
          <target state="translated">当使用模拟视图封装时,Angular会对所有组件样式进行预处理,使其接近标准的阴影CSS范围规则。</target>
        </trans-unit>
        <trans-unit id="f476c990cc992dd16e94e4d7fcc49cfd01a3387d" translate="yes" xml:space="preserve">
          <source>When using hidden source maps, source maps will not be referenced in the bundle. These are useful if you only want source maps to map error stack traces in error reporting tools, but don't want to expose your source maps in the browser developer tools.</source>
          <target state="translated">当使用隐藏的源码图时,源码图将不会在捆绑包中被引用。如果你只想让源码图在错误报告工具中映射错误堆栈痕迹,但又不想在浏览器开发者工具中暴露你的源码图,这些都是有用的。</target>
        </trans-unit>
        <trans-unit id="054db0ee1823c84752e38fc7a84cd6430df5dfe9" translate="yes" xml:space="preserve">
          <source>When using reactive forms:</source>
          <target state="translated">在使用反应形式时。</target>
        </trans-unit>
        <trans-unit id="a828cec6b58e6cb53d2d46a10e8a8e3c000ea7e3" translate="yes" xml:space="preserve">
          <source>When using relative redirects, the &lt;code&gt;&lt;a href=&quot;../api/router/router&quot;&gt;Router&lt;/a&gt;&lt;/code&gt; use the query params and the fragment from the source URL.</source>
          <target state="translated">使用相对重定向时， &lt;code&gt;&lt;a href=&quot;../api/router/router&quot;&gt;Router&lt;/a&gt;&lt;/code&gt; 使用查询参数和源URL中的片段。</target>
        </trans-unit>
        <trans-unit id="4bf6376b9afea8589f45d2366477e10bd15c8b4c" translate="yes" xml:space="preserve">
          <source>When using template expressions follow these guidelines:</source>
          <target state="translated">当使用模板表达式时,请遵循这些准则。</target>
        </trans-unit>
        <trans-unit id="fd4419420c68cdc2d776a0c6bc7ea6c5c98b6a97" translate="yes" xml:space="preserve">
          <source>When using template-driven forms:</source>
          <target state="translated">当使用模板驱动的表单时。</target>
        </trans-unit>
        <trans-unit id="bb75301a3f57d2766a42cb47b657dd6174d1abe3" translate="yes" xml:space="preserve">
          <source>When using the &lt;code&gt;&lt;a href=&quot;ngmodel&quot;&gt;ngModel&lt;/a&gt;&lt;/code&gt; within &lt;code&gt;&amp;lt;form&amp;gt;&lt;/code&gt; tags, you'll also need to supply a &lt;code&gt;name&lt;/code&gt; attribute so that the control can be registered with the parent form under that name.</source>
          <target state="translated">在 &lt;code&gt;&amp;lt;form&amp;gt;&lt;/code&gt; 标记内使用 &lt;code&gt;&lt;a href=&quot;ngmodel&quot;&gt;ngModel&lt;/a&gt;&lt;/code&gt; 时，还需要提供一个 &lt;code&gt;name&lt;/code&gt; 属性，以便可以使用该名称在父表单中注册控件。</target>
        </trans-unit>
        <trans-unit id="2ffcf1c257cc809ebc12f8b82bc6e12b17f71b98" translate="yes" xml:space="preserve">
          <source>When using the &lt;code&gt;controller as&lt;/code&gt; syntax, the binding is prefixed with the controller alias (&lt;code&gt;vm&lt;/code&gt; or &lt;code&gt;$ctrl&lt;/code&gt;) because you have to be specific about the source of the binding.</source>
          <target state="translated">在将 &lt;code&gt;controller as&lt;/code&gt; 语法时，绑定必须以控制器别名（ &lt;code&gt;vm&lt;/code&gt; 或 &lt;code&gt;$ctrl&lt;/code&gt; ）为前缀，因为您必须具体说明绑定的来源。</target>
        </trans-unit>
        <trans-unit id="c56383a8e88adb805d2997bbc9ee6587fb9288df" translate="yes" xml:space="preserve">
          <source>When using the component from AngularJS, you can supply contents for it. Just like they would be transcluded in AngularJS, they get projected to the location of the &lt;code&gt;&amp;lt;ng-content&amp;gt;&lt;/code&gt; tag in Angular:</source>
          <target state="translated">使用AngularJS的组件时，可以为其提供内容。就像将它们在AngularJS中嵌入一样，它们被投影到Angular中 &lt;code&gt;&amp;lt;ng-content&amp;gt;&lt;/code&gt; 标记的位置：</target>
        </trans-unit>
        <trans-unit id="af40b2a4b9fbeccafb0fb2865807c495201f126f" translate="yes" xml:space="preserve">
          <source>When using the shorthand syntax, Angular allows only &lt;a href=&quot;../../guide/structural-directives#one-structural-directive-per-host-element&quot;&gt;one structural directive on an element&lt;/a&gt;. If you want to iterate conditionally, for example, put the &lt;code&gt;*&lt;a href=&quot;ngif&quot;&gt;ngIf&lt;/a&gt;&lt;/code&gt; on a container element that wraps the &lt;code&gt;*&lt;a href=&quot;ngforof&quot;&gt;ngFor&lt;/a&gt;&lt;/code&gt; element. For futher discussion, see &lt;a href=&quot;../../guide/structural-directives#one-per-element&quot;&gt;Structural Directives&lt;/a&gt;.</source>
          <target state="translated">使用简写语法时，Angular &lt;a href=&quot;../../guide/structural-directives#one-structural-directive-per-host-element&quot;&gt;在element上&lt;/a&gt;只允许一个结构指令。例如，如果要有条件地进行迭代，请将 &lt;code&gt;*&lt;a href=&quot;ngif&quot;&gt;ngIf&lt;/a&gt;&lt;/code&gt; 放在包装 &lt;code&gt;*&lt;a href=&quot;ngforof&quot;&gt;ngFor&lt;/a&gt;&lt;/code&gt; 元素的容器元素上。有关进一步的讨论，请参见《&lt;a href=&quot;../../guide/structural-directives#one-per-element&quot;&gt;结构指令》&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="6535dd674dcfb46d5113fb884e93a5283000217b" translate="yes" xml:space="preserve">
          <source>When would I put specs in a test folder?</source>
          <target state="translated">我什么时候会把规格放在测试文件夹里?</target>
        </trans-unit>
        <trans-unit id="1c89837031479519507a2b713b0588a162366ed7" translate="yes" xml:space="preserve">
          <source>When writing a binding, be aware of a template statement's &lt;strong&gt;execution context&lt;/strong&gt;. The identifiers in a template statement belong to a specific context object, usually the Angular component controlling the template. The example above shows a single line of HTML, but that HTML belongs to a larger component:</source>
          <target state="translated">编写绑定时，请注意模板语句的&lt;strong&gt;执行上下文&lt;/strong&gt;。模板语句中的标识符属于特定的上下文对象，通常是控制模板的Angular组件。上面的示例显示了一行HTML，但是HTML属于更大的组件：</target>
        </trans-unit>
        <trans-unit id="0f96cd01fd00c2449a0dbebceeb658bd4c59c3e1" translate="yes" xml:space="preserve">
          <source>When you add a hero to the list of heroes, it appears to fly onto the page from the left.</source>
          <target state="translated">当你将一个英雄添加到英雄列表中时,它会出现从左边飞到页面上。</target>
        </trans-unit>
        <trans-unit id="482aa2abe869c9716a8cb6d5ccd25b994760f22c" translate="yes" xml:space="preserve">
          <source>When you add a package with deployment capability, it'll automatically update your workspace configuration (&lt;code&gt;angular.json&lt;/code&gt; file) with a &lt;code&gt;deploy&lt;/code&gt; section for the selected project. You can then use the &lt;code&gt;ng deploy&lt;/code&gt; command to deploy that project.</source>
          <target state="translated">添加具有部署功能的程序包时，它将使用所选项目的&amp;ldquo; &lt;code&gt;deploy&lt;/code&gt; 部分自动更新工作区配置（ &lt;code&gt;angular.json&lt;/code&gt; 文件）。然后，您可以使用 &lt;code&gt;ng deploy&lt;/code&gt; 命令来部署该项目。</target>
        </trans-unit>
        <trans-unit id="3a2441d7ee90ea32ef89ecf67cc9c5bacf216961" translate="yes" xml:space="preserve">
          <source>When you add a required field to the form control, its initial status is invalid. This invalid status propagates to the parent form group element, making its status invalid. Access the current status of the form group instance through its &lt;code&gt;status&lt;/code&gt; property.</source>
          <target state="translated">当您向表单控件添加必填字段时，其初始状态无效。此无效状态传播到父表单组元素，从而使其状态无效。通过其 &lt;code&gt;status&lt;/code&gt; 属性访问表单组实例的当前状态。</target>
        </trans-unit>
        <trans-unit id="72131c2667f7d78aa1a158277222438a08f970ea" translate="yes" xml:space="preserve">
          <source>When you add a schematic to the collection, you have to point to it in the collection's schema, and provide configuration files to define options that a user can pass to the command.</source>
          <target state="translated">当你向集合添加一个原理图时,你必须在集合的原理图中指向它,并提供配置文件来定义用户可以传递给命令的选项。</target>
        </trans-unit>
        <trans-unit id="0b5fd936cf7003790ec725548e5e7c1c4a0a8937" translate="yes" xml:space="preserve">
          <source>When you add a service provider to the root application injector, it&amp;rsquo;s available throughout the app. Additionally, these providers are also available to all the classes in the app as long they have the lookup token.</source>
          <target state="translated">当您将服务提供商添加到根应用程序注入器时，它在整个应用程序中都可用。此外，这些提供程序只要具有查找令牌，也可用于应用程序中的所有类。</target>
        </trans-unit>
        <trans-unit id="792a549ee7899276b88f55470bc47a22c686cdb5" translate="yes" xml:space="preserve">
          <source>When you add or remove a validator at run time, you must call &lt;code&gt;&lt;a href=&quot;abstractcontrol#updateValueAndValidity&quot;&gt;updateValueAndValidity()&lt;/a&gt;&lt;/code&gt; for the new validation to take effect.</source>
          <target state="translated">在运行时添加或删除验证器时，必须调用 &lt;code&gt;&lt;a href=&quot;abstractcontrol#updateValueAndValidity&quot;&gt;updateValueAndValidity()&lt;/a&gt;&lt;/code&gt; 才能使新验证生效。</target>
        </trans-unit>
        <trans-unit id="649fdfd3c25943311b75704030eb1ba2ba9d0a77" translate="yes" xml:space="preserve">
          <source>When you add or remove a validator at run time, you must call &lt;code&gt;updateValueAndValidity()&lt;/code&gt; for the new validation to take effect.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d7cbfc37168ba6757c88e3fb4728e2529d6a7c3c" translate="yes" xml:space="preserve">
          <source>When you add the &lt;code&gt;disabled&lt;/code&gt;&lt;em&gt;attribute&lt;/em&gt;, its presence alone initializes the button's &lt;code&gt;disabled&lt;/code&gt;&lt;em&gt;property&lt;/em&gt; to &lt;code&gt;true&lt;/code&gt; so the button is disabled.</source>
          <target state="translated">当您添加 &lt;code&gt;disabled&lt;/code&gt; &lt;em&gt;属性时&lt;/em&gt;，仅它的存在会将该按钮的 &lt;code&gt;disabled&lt;/code&gt; &lt;em&gt;属性&lt;/em&gt;初始化为 &lt;code&gt;true&lt;/code&gt; ,因此该按钮将被禁用。</target>
        </trans-unit>
        <trans-unit id="c0a5c3f1765a8d85f609278eb91d784b7c5f3577" translate="yes" xml:space="preserve">
          <source>When you are ready to deploy your Angular application to a remote server, you have various options for deployment.</source>
          <target state="translated">当你准备好将你的Angular应用部署到远程服务器上时,你有多种部署选项。</target>
        </trans-unit>
        <trans-unit id="a6b03ce57cce7fb1d00de43901f7939bfd562588" translate="yes" xml:space="preserve">
          <source>When you are using a downgraded Angular component from an AngularJS template, the need may arise to &lt;em&gt;transclude&lt;/em&gt; some content into it. This is also possible. While there is no such thing as transclusion in Angular, there is a very similar concept called &lt;em&gt;content projection&lt;/em&gt;. &lt;code&gt;&lt;a href=&quot;../api/upgrade/static&quot;&gt;upgrade/static&lt;/a&gt;&lt;/code&gt; is able to make these two features interoperate.</source>
          <target state="translated">当您使用AngularJS模板中降级的Angular组件时，可能需要将一些内容&lt;em&gt;包含&lt;/em&gt;进去。这也是可能的。虽然在Angular中没有包含在内的东西，但有一个非常相似的概念称为&lt;em&gt;content projection&lt;/em&gt;。 &lt;code&gt;&lt;a href=&quot;../api/upgrade/static&quot;&gt;upgrade/static&lt;/a&gt;&lt;/code&gt; 功能可以使这两个功能互操作。</target>
        </trans-unit>
        <trans-unit id="d2d88d2533db99d9ce2333dbaed8801d8f09a063" translate="yes" xml:space="preserve">
          <source>When you bootstrap with the &lt;code&gt;AppComponent&lt;/code&gt; class (in &lt;code&gt;main.ts&lt;/code&gt;), Angular looks for a &lt;code&gt;&amp;lt;app-root&amp;gt;&lt;/code&gt; in the &lt;code&gt;index.html&lt;/code&gt;, finds it, instantiates an instance of &lt;code&gt;AppComponent&lt;/code&gt;, and renders it inside the &lt;code&gt;&amp;lt;app-root&amp;gt;&lt;/code&gt; tag.</source>
          <target state="translated">When you bootstrap with the &lt;code&gt;AppComponent&lt;/code&gt; class (in &lt;code&gt;main.ts&lt;/code&gt; ), Angular looks for a &lt;code&gt;&amp;lt;app-root&amp;gt;&lt;/code&gt; in the &lt;code&gt;index.html&lt;/code&gt; , finds it, instantiates an instance of &lt;code&gt;AppComponent&lt;/code&gt; , and renders it inside the &lt;code&gt;&amp;lt;app-root&amp;gt;&lt;/code&gt; tag.</target>
        </trans-unit>
        <trans-unit id="45bcb2f61ee4422957ba07b063ee711b3fe965bf" translate="yes" xml:space="preserve">
          <source>When you break application code down into one component per file, you often end up with a project structure with a large number of relatively small files. This is a much neater way to organize things than a small number of large files, but it doesn't work that well if you have to load all those files to the HTML page with &amp;lt;script&amp;gt; tags. Especially when you also have to maintain those tags in the correct order. That's why it's a good idea to start using a &lt;em&gt;module loader&lt;/em&gt;.</source>
          <target state="translated">当您将应用程序代码分解为每个文件一个组件时，通常最终会得到一个包含大量相对较小文件的项目结构。与少量大文件相比，这是一种组织事情的更整洁的方法，但是如果必须将所有这些文件都装载到带有&amp;lt;script&amp;gt;标记的HTML页面中，这种方法就不能很好地工作。特别是当您还必须以正确的顺序维护这些标签时。这就是为什么开始使用&lt;em&gt;模块加载器&lt;/em&gt;是个好主意的原因。</target>
        </trans-unit>
        <trans-unit id="647d09b43375a7fb70c8eae68df84ef79563f63a" translate="yes" xml:space="preserve">
          <source>When you change the translatable text, the extractor generates a new ID for that translation unit. In most cases a text change would also require a change to the translation. Therefore, using a new ID keeps the text change in sync with translations.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ce8f1b7eb5f289aae723194ecf63f4999761d3d5" translate="yes" xml:space="preserve">
          <source>When you change the translatable text, the extractor tool generates a new id for that translation unit. You must then update the translation file with the new id.</source>
          <target state="translated">当您更改可翻译文本时,提取工具会为该翻译单元生成一个新的id。然后您必须用新的id更新翻译文件。</target>
        </trans-unit>
        <trans-unit id="6f39ca9d36c3ca35868c2a4c88abbba55a005690" translate="yes" xml:space="preserve">
          <source>When you click a different hero name, the read-only mini detail beneath the list reflects the new choice.</source>
          <target state="translated">当你点击不同的英雄名字时,列表下方的只读小细节会反映出新的选择。</target>
        </trans-unit>
        <trans-unit id="617f657be9899b52fe5f49ef3b6d85c4d25fd73f" translate="yes" xml:space="preserve">
          <source>When you click the &lt;em&gt;Edit&lt;/em&gt; button, this block disappears and the editable form reappears.</source>
          <target state="translated">当您单击&amp;ldquo; &lt;em&gt;编辑&amp;rdquo;&lt;/em&gt;按钮时，此框消失，并且重新出现可编辑的表单。</target>
        </trans-unit>
        <trans-unit id="37af15b64770c912fc52e08bb3cce469c7b29f47" translate="yes" xml:space="preserve">
          <source>When you click the &lt;em&gt;Submit&lt;/em&gt; button, the &lt;code&gt;submitted&lt;/code&gt; flag becomes true and the form disappears as planned.</source>
          <target state="translated">当您单击&lt;em&gt;Submit&lt;/em&gt;按钮时， &lt;code&gt;submitted&lt;/code&gt; 标志变为true，并且表单按计划消失。</target>
        </trans-unit>
        <trans-unit id="179fcf3f9adb197fc99841183b5bfb1796369cdc" translate="yes" xml:space="preserve">
          <source>When you click the &lt;strong&gt;Submit&lt;/strong&gt; button, the &lt;code&gt;submitted&lt;/code&gt; flag becomes true and the form disappears.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="706ebc53dfab50fb06336852da92a5c4919861b5" translate="yes" xml:space="preserve">
          <source>When you configure a budget, the build system warns or reports an error when a given part of the app reaches or exceeds a boundary size that you set.</source>
          <target state="translated">当您配置预算时,当应用程序的某个部分达到或超过您设置的边界大小时,构建系统会发出警告或报告错误。</target>
        </trans-unit>
        <trans-unit id="869269037e3115c244f09bd94306aa003338c106" translate="yes" xml:space="preserve">
          <source>When you configure an injector with a provider, you associate that provider with a &lt;a href=&quot;glossary#di-token&quot;&gt;DI token&lt;/a&gt;. The injector maintains an internal &lt;em&gt;token-provider&lt;/em&gt; map that it references when asked for a dependency. The token is the key to the map.</source>
          <target state="translated">在使用提供程序配置注入器时，您可以将该提供程序与&lt;a href=&quot;glossary#di-token&quot;&gt;DI令牌&lt;/a&gt;相关联。注入程序维护一个内部&lt;em&gt;令牌提供者&lt;/em&gt;映射，在被要求依赖时会引用该映射。令牌是地图的钥匙。</target>
        </trans-unit>
        <trans-unit id="bb138bee1b4372f1119c751a572188b350f1deaa" translate="yes" xml:space="preserve">
          <source>When you create a component, it's associated directly with a single view, called the &lt;em&gt;host view&lt;/em&gt;. The host view can be the root of a view hierarchy, which can contain &lt;em&gt;embedded views&lt;/em&gt;, which are in turn the host views of other components. Those components can be in the same NgModule, or can be imported from other NgModules. Views in the tree can be nested to any depth.</source>
          <target state="translated">创建组件时，它直接与单个视图（称为&lt;em&gt;主机视图）&lt;/em&gt;关联。宿主视图可以是视图层次结构的根，该视图层次结构可以包含&lt;em&gt;嵌入式视图&lt;/em&gt;，而&lt;em&gt;嵌入式视图&lt;/em&gt;又是其他组件的宿主视图。这些组件可以在同一NgModule中，也可以从其他NgModule中导入。树中的视图可以嵌套到任何深度。</target>
        </trans-unit>
        <trans-unit id="b86bbfff494f9e2b0676f3988b1ce5be5ce2704e" translate="yes" xml:space="preserve">
          <source>When you create a new blank schematic with the &lt;a href=&quot;schematics-authoring#cli&quot;&gt;Schematics CLI&lt;/a&gt;, the generated entry function is a &lt;em&gt;rule factory&lt;/em&gt;. A &lt;code&gt;RuleFactory&lt;/code&gt; object defines a higher-order function that creates a &lt;code&gt;Rule&lt;/code&gt;.</source>
          <target state="translated">使用&lt;a href=&quot;schematics-authoring#cli&quot;&gt;Schematics CLI&lt;/a&gt;创建新的空白逻辑示意图时，生成的输入功能是&lt;em&gt;规则工厂&lt;/em&gt;。甲 &lt;code&gt;RuleFactory&lt;/code&gt; 对象定义创建一个高阶函数 &lt;code&gt;Rule&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="3a0a0a014fd1121943e6dc450ee300f900c50eba" translate="yes" xml:space="preserve">
          <source>When you create a new workspace or an application you have an option to create them in a strict mode using the &lt;code&gt;--strict&lt;/code&gt; flag.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="77925d78fe0fa613a0f65a6981a75a2da4ed2cd4" translate="yes" xml:space="preserve">
          <source>When you create a project with the &lt;code&gt;ng new&lt;/code&gt; command, a &lt;code&gt;src/polyfills.ts&lt;/code&gt; configuration file is created as part of your project folder. This file incorporates the mandatory and many of the optional polyfills as JavaScript &lt;code&gt;import&lt;/code&gt; statements.</source>
          <target state="translated">使用 &lt;code&gt;ng new&lt;/code&gt; 命令创建项目时，将在项目文件夹中创建一个 &lt;code&gt;src/polyfills.ts&lt;/code&gt; 配置文件。该文件将强制性和许多可选的polyfill合并为JavaScript &lt;code&gt;import&lt;/code&gt; 语句。</target>
        </trans-unit>
        <trans-unit id="17999f2ec47c4715e77d4f497e7d7048405a374d" translate="yes" xml:space="preserve">
          <source>When you create an Angular library, you can provide and package it with schematics that integrate it with the Angular CLI. With your schematics, your users can use &lt;code&gt;ng add&lt;/code&gt; to install an initial version of your library, &lt;code&gt;ng generate&lt;/code&gt; to create artifacts defined in your library, and &lt;code&gt;ng &lt;a href=&quot;../api/forms/ngmodel#update&quot;&gt;update&lt;/a&gt;&lt;/code&gt; to adjust their project for a new version of your library that introduces breaking changes.</source>
          <target state="translated">创建Angular库时，可以提供并将其打包为与Angular CLI集成在一起的示意图。使用原理图，用户可以使用 &lt;code&gt;ng add&lt;/code&gt; 来安装库的初始版本，使用 &lt;code&gt;ng generate&lt;/code&gt; 来创建库中定义的工件，并使用 &lt;code&gt;ng &lt;a href=&quot;../api/forms/ngmodel#update&quot;&gt;update&lt;/a&gt;&lt;/code&gt; 来调整其项目以适应引入了重大更改的新版本的库。</target>
        </trans-unit>
        <trans-unit id="9fe095f0ae4d4033c7fa3ca8fbd24511377ff5da" translate="yes" xml:space="preserve">
          <source>When you create an Angular library, you can provide and package it with schematics that integrate it with the Angular CLI. With your schematics, your users can use &lt;code&gt;ng add&lt;/code&gt; to install an initial version of your library, &lt;code&gt;ng generate&lt;/code&gt; to create artifacts defined in your library, and &lt;code&gt;ng update&lt;/code&gt; to adjust their project for a new version of your library that introduces breaking changes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="47a9e3bd6a09d48157c28f5e392746f1d86da022" translate="yes" xml:space="preserve">
          <source>When you create new workspaces and projects, you have the option to use Angular's strict mode, which can help you write better, more maintainable code. For more information, see &lt;a href=&quot;strict-mode&quot;&gt;Strict mode&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c68ffb1e77a004109cf43f654a0f69c5e05d92ae" translate="yes" xml:space="preserve">
          <source>When you declare the variable on an &lt;code&gt;&amp;lt;ng-template&amp;gt;&lt;/code&gt;, the variable refers to a &lt;code&gt;&lt;a href=&quot;../api/core/templateref&quot;&gt;TemplateRef&lt;/a&gt;&lt;/code&gt; instance, which represents the template.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0ed0a480cce150ae491407a6f681a39b6dcf0a9e" translate="yes" xml:space="preserve">
          <source>When you define an environment variable &lt;code&gt;http_proxy&lt;/code&gt; or &lt;code&gt;HTTP_PROXY&lt;/code&gt;, an agent is automatically added to pass calls through your corporate proxy when running &lt;code&gt;npm start&lt;/code&gt;.</source>
          <target state="translated">当您定义环境变量 &lt;code&gt;http_proxy&lt;/code&gt; 或 &lt;code&gt;HTTP_PROXY&lt;/code&gt; 时，将在运行 &lt;code&gt;npm start&lt;/code&gt; 时自动添加一个代理以通过您的公司代理传递呼叫。</target>
        </trans-unit>
        <trans-unit id="e9e188035d7f17a49c423fc87a612d3f244a912c" translate="yes" xml:space="preserve">
          <source>When you deploy using the Angular CLI build process, you can choose how and when to support differential loading. The &lt;a href=&quot;cli/build&quot;&gt;&lt;code&gt;ng build&lt;/code&gt; CLI command&lt;/a&gt; queries the browser configuration and the configured build target to determine if support for legacy browsers is required, and whether the build should produce the necessary bundles used for differential loading.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e26780ada0ccc3b637f4b01f21aad05ca8123bc7" translate="yes" xml:space="preserve">
          <source>When you do, set the &lt;code&gt;class&lt;/code&gt; to &lt;code&gt;avoid&lt;/code&gt;. The code snippet will be framed in bright red to grab the reader's attention.</source>
          <target state="translated">这样做时，将 &lt;code&gt;class&lt;/code&gt; 设置为 &lt;code&gt;avoid&lt;/code&gt; 。该代码段将以鲜红色框起来，以引起读者的注意。</target>
        </trans-unit>
        <trans-unit id="ea188763675648ea90f96f233e7a9e4f9446785b" translate="yes" xml:space="preserve">
          <source>When you downgrade an Angular component and then use it from AngularJS, the component's inputs will be watched using AngularJS change detection. When those inputs change, the corresponding properties in the component are set. You can also hook into the changes by implementing the &lt;a href=&quot;../api/core/onchanges&quot;&gt;OnChanges&lt;/a&gt; interface in the component, just like you could if it hadn't been downgraded.</source>
          <target state="translated">当您降级Angular组件并从AngularJS中使用它时，将使用AngularJS更改检测来监视该组件的输入。当这些输入更改时，将设置组件中的相应属性。您也可以通过在组件中实现&lt;a href=&quot;../api/core/onchanges&quot;&gt;OnChanges&lt;/a&gt;接口来加入更改，就像没有降级时一样。</target>
        </trans-unit>
        <trans-unit id="41408c48441c9f26930f9bc3ddb54582bdabcc94" translate="yes" xml:space="preserve">
          <source>When you enable &lt;code&gt;strictTemplates&lt;/code&gt; and the TypeScript flag &lt;code&gt;strictNullChecks&lt;/code&gt;, typecheck errors may occur for certain situations that may not easily be avoided. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4453dc4621733c6328eda35ed3ad7fa789798ece" translate="yes" xml:space="preserve">
          <source>When you enable production builds via &lt;code&gt;--prod&lt;/code&gt; command line flag, the runtime production mode is enabled as well.</source>
          <target state="translated">通过 &lt;code&gt;--prod&lt;/code&gt; 命令行标志启用生产构建时，也会启用运行时生产模式。</target>
        </trans-unit>
        <trans-unit id="ecd81edef99e4127623ea133242d8979bb3861fc" translate="yes" xml:space="preserve">
          <source>When you enable the &lt;code&gt;enableTracing&lt;/code&gt; option, Angular logs these events to the console. For an example of filtering router navigation events, see the &lt;a href=&quot;observables-in-angular#router&quot;&gt;router section&lt;/a&gt; of the &lt;a href=&quot;observables-in-angular&quot;&gt;Observables in Angular&lt;/a&gt; guide.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="15be4fefbe5b03a93674980ad70988d4378dda38" translate="yes" xml:space="preserve">
          <source>When you first bring it up, the classes indicate that it has a valid value, that the value has not been changed since initialization or reset, and that the control has not been visited since initialization or reset.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ec9b4238aa6d95593d6729819db45182901c2e3e" translate="yes" xml:space="preserve">
          <source>When you generate a library using the CLI (with a command such as &lt;code&gt;ng generate library my-lib&lt;/code&gt;), the generated files go into the projects/ folder of the workspace. For more information about creating your own libraries, see &lt;a href=&quot;creating-libraries&quot;&gt;Creating Libraries&lt;/a&gt;.</source>
          <target state="translated">使用CLI生成库时（使用 &lt;code&gt;ng generate library my-lib&lt;/code&gt; 之类的命令），生成的文件将进入工作空间的projects /文件夹中。有关创建自己的库的更多信息，请参见&lt;a href=&quot;creating-libraries&quot;&gt;创建库&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="21ca8467ebf84648be93bc0fe65dea51105c81bc" translate="yes" xml:space="preserve">
          <source>When you generate a new library, the workspace configuration file, &lt;code&gt;angular.json&lt;/code&gt;, is updated with a project of type &lt;code&gt;library&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7079e1112b4fbb0c4d85e377cb94f0248ab2af7a" translate="yes" xml:space="preserve">
          <source>When you generate an Angular app with the Angular CLI, the &lt;code&gt;app.component.html&lt;/code&gt; file is the default template containing placeholder HTML.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="08d3c63af033a63e4f9ede8b61e4f47f231216f5" translate="yes" xml:space="preserve">
          <source>When you generate the StackBlitz example apps that accompany the tutorials, StackBlitz creates the starter files and mock data for you. The files you'll use throughout the tutorials are in the &lt;code&gt;src&lt;/code&gt; folder of the StackBlitz example apps.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1e1c9f5c28d7a54853707acbe257fcdd9a4515d0" translate="yes" xml:space="preserve">
          <source>When you have observed the effects, you can delete the &lt;code&gt;{{diagnostic}}&lt;/code&gt; binding.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3c3de61ed943055bf0458f7d0abfbe8083dac68f" translate="yes" xml:space="preserve">
          <source>When you hide an element, that element and all of its descendants remain in the DOM. All components for those elements stay in memory and Angular may continue to check for changes. You could be holding onto considerable computing resources and degrading performance unnecessarily.</source>
          <target state="translated">当你隐藏一个元素时,该元素和它的所有子代都会留在DOM中。这些元素的所有组件都会留在内存中,Angular可能会继续检查变化。你可能会保留相当多的计算资源,并不必要地降低性能。</target>
        </trans-unit>
        <trans-unit id="410ecc95479ff5928d45d83d664c30ac0fed7800" translate="yes" xml:space="preserve">
          <source>When you import an NgModule, Angular adds the module's service providers (the contents of its &lt;code&gt;providers&lt;/code&gt; list) to the application root injector.</source>
          <target state="translated">导入NgModule时，Angular将模块的服务提供程序（其 &lt;code&gt;providers&lt;/code&gt; 列表的内容）添加到应用程序根注入程序。</target>
        </trans-unit>
        <trans-unit id="d8644a4f230a744f101351dd00d0bf4a1e1125a5" translate="yes" xml:space="preserve">
          <source>When you import something from a library in an Angular app, Angular looks for a mapping between the library name and a location on disk. When you install a library package, the mapping is in the &lt;code&gt;node_modules&lt;/code&gt; folder. When you build your own library, it has to find the mapping in your &lt;code&gt;tsconfig&lt;/code&gt; paths.</source>
          <target state="translated">当您从Angular应用程序中的库中导入某些内容时，Angular会在库名称和磁盘上的位置之间寻找映射。安装库软件包时，映射位于 &lt;code&gt;node_modules&lt;/code&gt; 文件夹中。当您构建自己的库时，它必须在 &lt;code&gt;tsconfig&lt;/code&gt; 路径中找到映射。</target>
        </trans-unit>
        <trans-unit id="d289d612e8342acce13b442e36b3c7c30d1c6461" translate="yes" xml:space="preserve">
          <source>When you imported the &lt;code&gt;&lt;a href=&quot;../api/forms/formsmodule&quot;&gt;FormsModule&lt;/a&gt;&lt;/code&gt; in your component, Angular automatically created and attached an &lt;a href=&quot;../api/forms/ngform&quot;&gt;NgForm&lt;/a&gt; directive to the &lt;code&gt;&amp;lt;form&amp;gt;&lt;/code&gt; tag in the template (because &lt;code&gt;&lt;a href=&quot;../api/forms/ngform&quot;&gt;NgForm&lt;/a&gt;&lt;/code&gt; has the selector &lt;code&gt;form&lt;/code&gt; that matches &lt;code&gt;&amp;lt;form&amp;gt;&lt;/code&gt; elements).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5d0bf5343123ad54489af22b2a94d022755e308e" translate="yes" xml:space="preserve">
          <source>When you internationalize with the AOT compiler, you must pre-build a separate application package for each language and serve the appropriate package based on either server-side language detection or URL parameters.</source>
          <target state="translated">当您使用AOT编译器进行国际化时,您必须为每种语言预先构建一个单独的应用程序包,并根据服务器端语言检测或URL参数提供适当的包。</target>
        </trans-unit>
        <trans-unit id="362d06f664aaa8348af755e5fbfb12b4e2256623" translate="yes" xml:space="preserve">
          <source>When you know for certain that a &lt;code&gt;HeroDetailComponent&lt;/code&gt; instance will &lt;em&gt;never, never, ever&lt;/em&gt; be re-used, you can simplify the code with the &lt;em&gt;snapshot&lt;/em&gt;.</source>
          <target state="translated">当您确定 &lt;code&gt;HeroDetailComponent&lt;/code&gt; 实例将&lt;em&gt;永远不会&lt;/em&gt;被重复使用时，可以使用&lt;em&gt;快照&lt;/em&gt;简化代码。</target>
        </trans-unit>
        <trans-unit id="be208372c1c3aafed8ae3aa23894046a805dca25" translate="yes" xml:space="preserve">
          <source>When you know for certain that a &lt;code&gt;HeroDetailComponent&lt;/code&gt; instance will never be re-used, you can use &lt;code&gt;snapshot&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b5fecd6f95f828bcccda31df86790f8c129c7ea0" translate="yes" xml:space="preserve">
          <source>When you migrate from AngularJS to Angular you will want to move as much responsibility as possible to Angular, so that you can take advantage of new APIs. To help with the transition, Angular provides the &lt;code&gt;&lt;a href=&quot;../api/common/upgrade/locationupgrademodule&quot;&gt;LocationUpgradeModule&lt;/a&gt;&lt;/code&gt;. This module enables a &lt;em&gt;unified&lt;/em&gt; location service that shifts responsibilities from the AngularJS &lt;code&gt;$location&lt;/code&gt; service to the Angular &lt;code&gt;&lt;a href=&quot;../api/common/location&quot;&gt;Location&lt;/a&gt;&lt;/code&gt; service.</source>
          <target state="translated">当您从AngularJS迁移到Angular时，您将需要将更多的责任转移到Angular，以便可以利用新的API。为了帮助进行过渡，Angular提供了 &lt;code&gt;&lt;a href=&quot;../api/common/upgrade/locationupgrademodule&quot;&gt;LocationUpgradeModule&lt;/a&gt;&lt;/code&gt; 。此模块启用&lt;em&gt;统一的&lt;/em&gt;位置服务，该服务将职责从AngularJS &lt;code&gt;$location&lt;/code&gt; 服务转移到Angular &lt;code&gt;&lt;a href=&quot;../api/common/location&quot;&gt;Location&lt;/a&gt;&lt;/code&gt; 服务。</target>
        </trans-unit>
        <trans-unit id="e14e60be15cfb3e29e23e3adf7c79ee29e0d7947" translate="yes" xml:space="preserve">
          <source>When you move the source (inevitable), you remember to move the test.</source>
          <target state="translated">当你移动源头(不可避免),你记得移动测试。</target>
        </trans-unit>
        <trans-unit id="bf36cbc1f993165efdb0e64fe01fb194b2a20a39" translate="yes" xml:space="preserve">
          <source>When you need that module&amp;rsquo;s code in another module, use an &lt;code&gt;import&lt;/code&gt; statement as follows:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fe438ebbcd8a35cf245928a1c983b9efddf4900e" translate="yes" xml:space="preserve">
          <source>When you pass an &lt;code&gt;&lt;a href=&quot;../api/core/ngmodulefactory&quot;&gt;NgModuleFactory&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;../api/upgrade/static/downgrademodule&quot;&gt;downgradeModule&lt;/a&gt;()&lt;/code&gt; uses it to instantiate the module using &lt;a href=&quot;../api/platform-browser/platformbrowser&quot;&gt;platformBrowser&lt;/a&gt;'s &lt;a href=&quot;../api/core/platformref#bootstrapModuleFactory&quot;&gt;bootstrapModuleFactory()&lt;/a&gt;, which is compatible with ahead-of-time (AOT) compilation. AOT compilation helps make your apps load faster. For more about AOT and how to create an &lt;code&gt;&lt;a href=&quot;../api/core/ngmodulefactory&quot;&gt;NgModuleFactory&lt;/a&gt;&lt;/code&gt;, see the &lt;a href=&quot;aot-compiler&quot;&gt;Ahead-of-Time Compilation&lt;/a&gt; guide.</source>
          <target state="translated">传递 &lt;code&gt;&lt;a href=&quot;../api/core/ngmodulefactory&quot;&gt;NgModuleFactory&lt;/a&gt;&lt;/code&gt; 时， &lt;code&gt;&lt;a href=&quot;../api/upgrade/static/downgrademodule&quot;&gt;downgradeModule&lt;/a&gt;()&lt;/code&gt; 使用它通过&lt;a href=&quot;../api/platform-browser/platformbrowser&quot;&gt;platformBrowser&lt;/a&gt;的&lt;a href=&quot;../api/core/platformref#bootstrapModuleFactory&quot;&gt;bootstrapModuleFactory（）&lt;/a&gt;实例化模块，该模块与提前（AOT）编译兼容。AOT编译有助于使您的应用程序加载更快。有关AOT以及如何创建 &lt;code&gt;&lt;a href=&quot;../api/core/ngmodulefactory&quot;&gt;NgModuleFactory&lt;/a&gt;&lt;/code&gt; 的更多信息，请参见《&lt;a href=&quot;aot-compiler&quot;&gt;提前编译》&lt;/a&gt;指南。</target>
        </trans-unit>
        <trans-unit id="21d13688782c8b5894b32af1b23cd5c8e43f6163" translate="yes" xml:space="preserve">
          <source>When you pass an array of steps to a &lt;code&gt;&lt;a href=&quot;transition&quot;&gt;transition&lt;/a&gt;()&lt;/code&gt; call, the steps run sequentially by default. Compare this to the &lt;code&gt;&lt;a href=&quot;group&quot;&gt;group()&lt;/a&gt;&lt;/code&gt; call, which runs animation steps in parallel.</source>
          <target state="translated">当您将一系列步骤传递给 &lt;code&gt;&lt;a href=&quot;transition&quot;&gt;transition&lt;/a&gt;()&lt;/code&gt; 调用时，默认情况下，这些步骤将按顺序运行。将此与 &lt;code&gt;&lt;a href=&quot;group&quot;&gt;group()&lt;/a&gt;&lt;/code&gt; 调用进行比较，后者将并行运行动画步骤。</target>
        </trans-unit>
        <trans-unit id="5ad1c2e84d6f136b6a8a42ad3ccb44378641d0aa" translate="yes" xml:space="preserve">
          <source>When you pass an interface as a type parameter to the &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclient#get&quot;&gt;HttpClient.get()&lt;/a&gt;&lt;/code&gt; method, use the RxJS &lt;code&gt;map&lt;/code&gt; operator to transform the response data as needed by the UI. You can then pass the transformed data to the &lt;a href=&quot;../api/common/asyncpipe&quot;&gt;async pipe&lt;/a&gt;.</source>
          <target state="translated">当将接口作为类型参数传递给 &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclient#get&quot;&gt;HttpClient.get()&lt;/a&gt;&lt;/code&gt; 方法时，请使用RxJS &lt;code&gt;map&lt;/code&gt; 运算符根据UI的需要转换响应数据。然后，您可以将转换后的数据传递到&lt;a href=&quot;../api/common/asyncpipe&quot;&gt;异步管道&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="0b27000fba626df657879cafff92fc4e854adb82" translate="yes" xml:space="preserve">
          <source>When you pass an interface as a type parameter to the &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclient#get&quot;&gt;HttpClient.get()&lt;/a&gt;&lt;/code&gt; method, you can use the &lt;a href=&quot;rx-library#operators&quot;&gt;RxJS &lt;code&gt;map&lt;/code&gt; operator&lt;/a&gt; to transform the response data as needed by the UI. You can then pass the transformed data to the &lt;a href=&quot;../api/common/asyncpipe&quot;&gt;async pipe&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c2307ff4288c2d124a3fdc1efa06e1678b46c8e2" translate="yes" xml:space="preserve">
          <source>When you provide services in a component, that service is available via the &lt;code&gt;ElementInjector&lt;/code&gt; at that component instance. It may also be visible at child component/directives based on visibility rules described in the &lt;a href=&quot;hierarchical-dependency-injection#resolution-rules&quot;&gt;resolution rules&lt;/a&gt; section.</source>
          <target state="translated">当您在组件中提供服务时，可以通过 &lt;code&gt;ElementInjector&lt;/code&gt; 在该组件实例处使用该服务。根据&lt;a href=&quot;hierarchical-dependency-injection#resolution-rules&quot;&gt;解析规则&lt;/a&gt;部分中描述的可见性规则，它也可能在子组件/指令处可见。</target>
        </trans-unit>
        <trans-unit id="56f91c3af039a87e2e5b1894a0d410dde809e81e" translate="yes" xml:space="preserve">
          <source>When you provide services in the component class, services are visible within the &lt;code&gt;ElementInjector&lt;/code&gt; tree relative to where and how you provide those services.</source>
          <target state="translated">在组件类中提供服务时，相对于您在何处以及如何提供这些服务，服务在 &lt;code&gt;ElementInjector&lt;/code&gt; 树中可见。</target>
        </trans-unit>
        <trans-unit id="8852b03eafeb6d489c8a0d7dc06b14852ad1e11c" translate="yes" xml:space="preserve">
          <source>When you provide the service at the root level, Angular creates a single, shared instance of &lt;code&gt;HeroService&lt;/code&gt; and injects into any class that asks for it. Registering the provider in the &lt;code&gt;@&lt;a href=&quot;../api/core/injectable&quot;&gt;Injectable&lt;/a&gt;&lt;/code&gt; metadata also allows Angular to optimize an app by removing the service if it turns out not to be used after all.</source>
          <target state="translated">当您在根级别提供服务时，Angular会创建一个单个的 &lt;code&gt;HeroService&lt;/code&gt; 共享实例，并将其插入任何需要它的类中。注册在提供商 &lt;code&gt;@&lt;a href=&quot;../api/core/injectable&quot;&gt;Injectable&lt;/a&gt;&lt;/code&gt; 元数据还允许角通过删除服务，如果它原来不毕竟被用来优化的应用程序。</target>
        </trans-unit>
        <trans-unit id="f953905bda44980a6a9f0d5b1b3e121019580b78" translate="yes" xml:space="preserve">
          <source>When you provide the service at the root level, Angular creates a single, shared instance of &lt;code&gt;HeroService&lt;/code&gt; and injects it into any class that asks for it. Registering the provider in the &lt;code&gt;@&lt;a href=&quot;../api/core/injectable&quot;&gt;Injectable&lt;/a&gt;()&lt;/code&gt; metadata also allows Angular to optimize an app by removing the service from the compiled app if it isn't used.</source>
          <target state="translated">当您在根级别提供服务时，Angular会创建一个单个的 &lt;code&gt;HeroService&lt;/code&gt; 共享实例，并将其注入任何需要它的类中。在 &lt;code&gt;@&lt;a href=&quot;../api/core/injectable&quot;&gt;Injectable&lt;/a&gt;()&lt;/code&gt; 元数据中注册提供程序还允许Angular通过从未编译的应用程序中删除服务来优化应用程序。</target>
        </trans-unit>
        <trans-unit id="b343fcf4d13bc8d991f156872899c3099cdb142c" translate="yes" xml:space="preserve">
          <source>When you register a provider at the component level, you get a new instance of the service with each new instance of that component. At the component level, register a service provider in the &lt;code&gt;providers&lt;/code&gt; property of the &lt;code&gt;@&lt;a href=&quot;../api/core/component&quot;&gt;Component&lt;/a&gt;()&lt;/code&gt; metadata.</source>
          <target state="translated">在组件级别注册提供程序时，将获得该组件的每个新实例的服务新实例。在组件级别，在 &lt;code&gt;@&lt;a href=&quot;../api/core/component&quot;&gt;Component&lt;/a&gt;()&lt;/code&gt; &lt;a href=&quot;../api/core/component&quot;&gt;Component&lt;/a&gt;（）元数据的 &lt;code&gt;providers&lt;/code&gt; 属性中注册服务提供者。</target>
        </trans-unit>
        <trans-unit id="46450f6e014a67295680762b08aaaf21e1fc79bc" translate="yes" xml:space="preserve">
          <source>When you register a provider with a &lt;a href=&quot;architecture-modules&quot;&gt;specific NgModule&lt;/a&gt;, the same instance of a service is available to all components in that NgModule. To register at this level, use the &lt;code&gt;providers&lt;/code&gt; property of the &lt;code&gt;@&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;()&lt;/code&gt; decorator,</source>
          <target state="translated">当您使用&lt;a href=&quot;architecture-modules&quot;&gt;特定的NgModule&lt;/a&gt;注册提供程序时，该NgModule中的所有组件都可以使用服务的相同实例。要在此级别进行注册，请使用 &lt;code&gt;@&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;()&lt;/code&gt; &lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;（）装饰器的 &lt;code&gt;providers&lt;/code&gt; 属性，</target>
        </trans-unit>
        <trans-unit id="dc9b91912b8770f2ea04045401c1cd3c11fd358d" translate="yes" xml:space="preserve">
          <source>When you register a provider with a &lt;a href=&quot;architecture-modules&quot;&gt;specific NgModule&lt;/a&gt;, the same instance of a service is available to all components in that NgModule. To register at this level, use the &lt;code&gt;providers&lt;/code&gt; property of the &lt;code&gt;@&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;()&lt;/code&gt; decorator.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="162521642a27b1e5827c9301cf0ed78f5244aa15" translate="yes" xml:space="preserve">
          <source>When you remove a hero from the list, it appears to fly out to the right.</source>
          <target state="translated">当你从列表中删除一个英雄时,它会出现在右边飞出。</target>
        </trans-unit>
        <trans-unit id="4f1ba5f6a26ffaff14e70574d6d3162b35b43f43" translate="yes" xml:space="preserve">
          <source>When you rename the source file (inevitable), you remember to rename the test file.</source>
          <target state="translated">当你重命名源文件时(不可避免),你记得重命名测试文件。</target>
        </trans-unit>
        <trans-unit id="76143769b73c5f43fc6f3a3c4f5be082f00a281f" translate="yes" xml:space="preserve">
          <source>When you resolve an instance of &lt;code&gt;Car&lt;/code&gt; at the deepest component (C), its injector produces an instance of &lt;code&gt;Car&lt;/code&gt; resolved by injector (C) with an &lt;code&gt;Engine&lt;/code&gt; resolved by injector (B) and &lt;code&gt;Tires&lt;/code&gt; resolved by the root injector (A).</source>
          <target state="translated">当您在最深的零部件（C）处解析 &lt;code&gt;Car&lt;/code&gt; 实例时，其喷射器将生成由喷射器（C）分解为 &lt;code&gt;Car&lt;/code&gt; 的实例，其 &lt;code&gt;Engine&lt;/code&gt; 由喷射器（B）分解为引擎，而 &lt;code&gt;Tires&lt;/code&gt; 由根喷射器（A）分解。</target>
        </trans-unit>
        <trans-unit id="c7af032d22de01c80130fb9a41ddd3718e7e974c" translate="yes" xml:space="preserve">
          <source>When you run &lt;code&gt;ng new my-first-project&lt;/code&gt; a new folder, named &lt;code&gt;my-first-project&lt;/code&gt;, will be created in the current working directory. Since you want to be able to create files inside that folder, make sure you have sufficient rights in the current working directory before running the command.</source>
          <target state="translated">当您运行 &lt;code&gt;ng new my-first-project&lt;/code&gt; &lt;code&gt;my-first-project&lt;/code&gt; ，将在当前工作目录中创建一个名为my-first-project的新文件夹。由于您希望能够在该文件夹中创建文件，因此在运行命令之前，请确保您在当前工作目录中具有足够的权限。</target>
        </trans-unit>
        <trans-unit id="83e295e43de72a208244365d9e3ac5fc39b98c0d" translate="yes" xml:space="preserve">
          <source>When you run the &lt;a href=&quot;cli/build&quot;&gt;&lt;code&gt;ng build&lt;/code&gt;&lt;/a&gt; (build only) or &lt;a href=&quot;cli/serve&quot;&gt;&lt;code&gt;ng serve&lt;/code&gt;&lt;/a&gt; (build and serve locally) CLI commands, the type of compilation (JIT or AOT) depends on the value of the &lt;code&gt;aot&lt;/code&gt; property in your build configuration specified in &lt;code&gt;angular.json&lt;/code&gt;. By default, &lt;code&gt;aot&lt;/code&gt; is set to &lt;code&gt;true&lt;/code&gt; for new CLI apps.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="948f7a7d608dac5f777ed3899bcfbc54038d306b" translate="yes" xml:space="preserve">
          <source>When you run the &lt;em&gt;AfterView&lt;/em&gt; sample, notice how frequently Angular calls &lt;code&gt;&lt;a href=&quot;../api/core/afterviewchecked&quot;&gt;AfterViewChecked&lt;/a&gt;()&lt;/code&gt;-often when there are no changes of interest. Be very careful about how much logic or computation you put into one of these methods.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5ede23bce1607d06e6f4c7d8342b9df484546033" translate="yes" xml:space="preserve">
          <source>When you run this command, the CLI installs the necessary Angular npm packages and other dependencies in a new workspace, with a root-level application named &lt;em&gt;my-project&lt;/em&gt;. The workspace root folder contains various support and configuration files, and a README file with generated descriptive text that you can customize.</source>
          <target state="translated">运行此命令时，CLI将使用名为&lt;em&gt;my-project&lt;/em&gt;的根级应用程序在新的工作空间中安装必要的Angular npm软件包和其他依赖项。工作区根文件夹包含各种支持和配置文件，以及一个自定义文件，其中包含可自定义的生成描述性文本。</target>
        </trans-unit>
        <trans-unit id="8a6793cd65bbd67485fe71ef010251834a34604e" translate="yes" xml:space="preserve">
          <source>When you specify a custom ID, the extractor generates a translation unit with the custom ID:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3f89db8d780edd6ff5fede7d7a2e6d3d19f61f83" translate="yes" xml:space="preserve">
          <source>When you specify a custom id, the extractor tool and compiler generate a translation unit with that custom id.</source>
          <target state="translated">当你指定一个自定义id时,提取工具和编译器会生成一个带有该自定义id的翻译单元。</target>
        </trans-unit>
        <trans-unit id="8ff5318340747063c6cfc4c93e9fb64e1d986e7b" translate="yes" xml:space="preserve">
          <source>When you start to upgrade components and their templates to Angular, you'll make more changes because the E2E tests have matchers that are specific to AngularJS. For PhoneCat you need to make the following changes in order to make things work with Angular:</source>
          <target state="translated">当你开始将组件和它们的模板升级到Angular时,你会做更多的改变,因为E2E测试有针对AngularJS的匹配器。对于PhoneCat,你需要做以下的改变,以使事情与Angular一起工作。</target>
        </trans-unit>
        <trans-unit id="6527e816afc32aa43b4cbfafcff471db1bf82256" translate="yes" xml:space="preserve">
          <source>When you trigger a completion list within a template, the editor first parses the template into an HTML &lt;a href=&quot;https://en.wikipedia.org/wiki/Abstract_syntax_tree&quot;&gt;abstract syntax tree (AST)&lt;/a&gt;. The Angular compiler interprets that tree to determine the context: which module the template is part of, the current scope, the component selector, and where your cursor is in the template AST. It can then determine the symbols that could potentially be at that position..</source>
          <target state="translated">当您触发模板中的完成列表时，编辑器首先将模板解析为HTML &lt;a href=&quot;https://en.wikipedia.org/wiki/Abstract_syntax_tree&quot;&gt;抽象语法树（AST）&lt;/a&gt;。Angular编译器解释该树以确定上下文：模板属于哪个模块，当前作用域，组件选择器以及光标在模板AST中的位置。然后，它可以确定可能在该位置的符号。</target>
        </trans-unit>
        <trans-unit id="ab73fe04628483ac0b3d2a9834dda0390777b014" translate="yes" xml:space="preserve">
          <source>When you try this,</source>
          <target state="translated">当你尝试这个。</target>
        </trans-unit>
        <trans-unit id="caa532613dfbcc5fb88bd71c451bea3780c7f5bb" translate="yes" xml:space="preserve">
          <source>When you update Angular to a new version, you need to make sure that any libraries you are using are current. If libraries have interdependencies, you might have to update them in a particular order. See the &lt;a href=&quot;https://update.angular.io/&quot;&gt;Angular Update Guide&lt;/a&gt; for help.</source>
          <target state="translated">将Angular更新到新版本时，需要确保所使用的任何库都是最新的。如果库具有相互依赖性，则可能必须按特定顺序进行更新。请参阅《&lt;a href=&quot;https://update.angular.io/&quot;&gt;Angular更新指南》&lt;/a&gt;以获取帮助。</target>
        </trans-unit>
        <trans-unit id="fa18a12f3c0ee4bf831ccbbc34f0186668397d03" translate="yes" xml:space="preserve">
          <source>When you use &lt;a href=&quot;aot-compiler&quot;&gt;AOT compilation&lt;/a&gt;, you can control how your application is compiled by specifying &lt;em&gt;template&lt;/em&gt; compiler options in the &lt;a href=&quot;typescript-configuration&quot;&gt;TypeScript configuration file&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="427748cf35ba8629915556d00d80d9456785d7fd" translate="yes" xml:space="preserve">
          <source>When you use &lt;a href=&quot;aot-compiler&quot;&gt;AoT compilation&lt;/a&gt;, you can control how your application is compiled by specifying &lt;em&gt;template&lt;/em&gt; compiler options in the &lt;code&gt;tsconfig.json&lt;/code&gt;&lt;a href=&quot;typescript-configuration&quot;&gt;TypeScript configuration file&lt;/a&gt;.</source>
          <target state="translated">使用&lt;a href=&quot;aot-compiler&quot;&gt;AoT编译时&lt;/a&gt;，可以通过在 &lt;code&gt;tsconfig.json&lt;/code&gt; &lt;a href=&quot;typescript-configuration&quot;&gt;TypeScript配置文件中&lt;/a&gt;指定&lt;em&gt;模板&lt;/em&gt;编译器选项来控制如何编译应用程序。</target>
        </trans-unit>
        <trans-unit id="1d76d4cdd08e8ca0fc27a2d6c81a99fd7dd8f163" translate="yes" xml:space="preserve">
          <source>When you use &lt;code&gt;@&lt;a href=&quot;../api/core/output&quot;&gt;Output&lt;/a&gt;()&lt;/code&gt;, edit these parts of your app:</source>
          <target state="translated">使用 &lt;code&gt;@&lt;a href=&quot;../api/core/output&quot;&gt;Output&lt;/a&gt;()&lt;/code&gt; ，请编辑应用程序的以下部分：</target>
        </trans-unit>
        <trans-unit id="a1d14249763aab18fdb2a4c4fab31db25f9743c4" translate="yes" xml:space="preserve">
          <source>When you use &lt;code&gt;[(&lt;a href=&quot;../api/forms/ngmodel&quot;&gt;ngModel&lt;/a&gt;)]&lt;/code&gt; on an element, you must define a &lt;code&gt;name&lt;/code&gt; attribute for that element. Angular uses the assigned name to register the element with the &lt;code&gt;&lt;a href=&quot;../api/forms/ngform&quot;&gt;NgForm&lt;/a&gt;&lt;/code&gt; directive attached to the parent &lt;code&gt;&amp;lt;form&amp;gt;&lt;/code&gt; element.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4580e5ffc3fd526fbaef265fb610c52859c60f63" translate="yes" xml:space="preserve">
          <source>When you use a class this way, it's called a &lt;em&gt;class interface&lt;/em&gt;.</source>
          <target state="translated">当您以这种方式使用类时，它称为&lt;em&gt;类接口&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="f94a253b102233220fd281a30bb6f39b56a66d5a" translate="yes" xml:space="preserve">
          <source>When you use an SVG as the template, you are able to use directives and bindings just like with HTML templates. This means that you will be able to dynamically generate interactive graphics.</source>
          <target state="translated">当您使用SVG作为模板时,您能够像使用HTML模板一样使用指令和绑定。这意味着您将能够动态地生成交互式图形。</target>
        </trans-unit>
        <trans-unit id="7b5db936a4f10347d77d439673f77743a5c795d4" translate="yes" xml:space="preserve">
          <source>When you use an editor with a language service, the editor starts a separate language-service process and communicates with it through an &lt;a href=&quot;https://en.wikipedia.org/wiki/Remote_procedure_call&quot;&gt;RPC&lt;/a&gt;, using the &lt;a href=&quot;https://microsoft.github.io/language-server-protocol/&quot;&gt;Language Server Protocol&lt;/a&gt;. When you type into the editor, the editor sends information to the language-service process to track the state of your project.</source>
          <target state="translated">当您将编辑器与语言服务一起使用时，该编辑器将启动一个单独的语言服务过程，并使用&lt;a href=&quot;https://microsoft.github.io/language-server-protocol/&quot;&gt;Language Server Protocol&lt;/a&gt;通过&lt;a href=&quot;https://en.wikipedia.org/wiki/Remote_procedure_call&quot;&gt;RPC&lt;/a&gt;与之通信。当您输入编辑器时，编辑器会将信息发送到语言服务流程以跟踪项目的状态。</target>
        </trans-unit>
        <trans-unit id="7091693d92ad9fcbdbcc9479803eb8ea1f9c1565" translate="yes" xml:space="preserve">
          <source>When you use ngUpgrade, what you're really doing is &lt;em&gt;running both AngularJS and Angular at the same time&lt;/em&gt;. All Angular code is running in the Angular framework, and AngularJS code in the AngularJS framework. Both of these are the actual, fully featured versions of the frameworks. There is no emulation going on, so you can expect to have all the features and natural behavior of both frameworks.</source>
          <target state="translated">当您使用ngUpgrade时，您真正要做的是同时&lt;em&gt;运行AngularJS和Angular&lt;/em&gt;。所有Angular代码都在Angular框架中运行，而AngularJS代码在AngularJS框架中运行。这两个都是框架的实际，功能齐全的版本。没有正在进行的仿真，因此您可以期望拥有两个框架的所有功能和自然行为。</target>
        </trans-unit>
        <trans-unit id="1273337c88d3f5d1fda2d87de160020bcfd831bc" translate="yes" xml:space="preserve">
          <source>When you use the &lt;a href=&quot;cli&quot;&gt;Angular CLI&lt;/a&gt; command &lt;code&gt;ng new&lt;/code&gt; to generate an app, the default &lt;code&gt;AppModule&lt;/code&gt; looks like the following:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a2eec843f1d023d68567197d0f57ed566b9116ea" translate="yes" xml:space="preserve">
          <source>When you use the Angular CLI command &lt;a href=&quot;cli/generate&quot;&gt;&lt;code&gt;ng generate component&lt;/code&gt;&lt;/a&gt; without the &lt;code&gt;--inline-style&lt;/code&gt; flag, it creates an empty styles file for you and references that file in the component's generated &lt;code&gt;&lt;a href=&quot;../api/core/component#styleUrls&quot;&gt;styleUrls&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">当您使用不带 &lt;code&gt;--inline-style&lt;/code&gt; 标志的Angular CLI命令&lt;a href=&quot;cli/generate&quot;&gt; &lt;code&gt;ng generate component&lt;/code&gt; 时&lt;/a&gt;，它将为您创建一个空样式文件，并在组件的生成的 &lt;code&gt;&lt;a href=&quot;../api/core/component#styleUrls&quot;&gt;styleUrls&lt;/a&gt;&lt;/code&gt; 中引用该文件。</target>
        </trans-unit>
        <trans-unit id="897e950b7b7b7944725b907f18f2c240e2dd97f3" translate="yes" xml:space="preserve">
          <source>When you use the Angular CLI command &lt;a href=&quot;cli/generate&quot;&gt;&lt;code&gt;ng generate component&lt;/code&gt;&lt;/a&gt; without the &lt;code&gt;--inline-style&lt;/code&gt; flag, it creates an empty styles file for you and references that file in the component's generated &lt;code&gt;styleUrls&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="247bac8024638798cef5c1812110dc811b6aae31" translate="yes" xml:space="preserve">
          <source>When you use the CLI &lt;code&gt;build&lt;/code&gt; or &lt;code&gt;serve&lt;/code&gt; command to build your application for different locales, change the output path using the &lt;code&gt;--outputPath&lt;/code&gt; command option (along with the i18n-specific command options), so that the translation files are saved to different locations. When you are serving a locale-specific version from a subdirectory, you can also change the base URL used by your app by specifying the &lt;code&gt;--baseHref&lt;/code&gt; option.</source>
          <target state="translated">当您使用CLI &lt;code&gt;build&lt;/code&gt; 或 &lt;code&gt;serve&lt;/code&gt; 命令针对不同的语言环境构建应用程序时，请使用 &lt;code&gt;--outputPath&lt;/code&gt; 命令选项（以及特定于i18n的命令选项）更改输出路径，以便将翻译文件保存到其他位置。从子目录提供特定于语言环境的版本时，还可以通过指定 &lt;code&gt;--baseHref&lt;/code&gt; 选项来更改应用程序使用的基本URL 。</target>
        </trans-unit>
        <trans-unit id="51cfdc22d2284f7c687631623cd1f1d8f4a0ab01" translate="yes" xml:space="preserve">
          <source>When you use the CLI command &lt;code&gt;ng new --strict&lt;/code&gt;, it is set to &lt;code&gt;true&lt;/code&gt; in the generated project's configuration.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f2e97de1383d763b5d6a77c6e6a143039f881b94" translate="yes" xml:space="preserve">
          <source>When you use the Schematics CLI to create a blank schematics project, the new blank schematic is the first member of the collection, and has the same name as the collection. When you add a new named schematic to this collection, it is automatically added to the &lt;code&gt;collection.json&lt;/code&gt; schema.</source>
          <target state="translated">使用Schematics CLI创建空白逻辑示意图项目时，新的空白逻辑示意图是集合的第一个成员，并且与集合具有相同的名称。将新的命名逻辑示意图添加到此集合时，该逻辑示意图将自动添加到 &lt;code&gt;collection.json&lt;/code&gt; 模式。</target>
        </trans-unit>
        <trans-unit id="c8e927f93087617fa5e2ad0d1654b43c538c0e7e" translate="yes" xml:space="preserve">
          <source>When you use these Angular modules, import them in &lt;code&gt;AppModule&lt;/code&gt;, or your feature module as appropriate, and list them in the &lt;code&gt;@&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt;&lt;code&gt;imports&lt;/code&gt; array. For example, in the basic app generated by the &lt;a href=&quot;cli&quot;&gt;Angular CLI&lt;/a&gt;, &lt;code&gt;&lt;a href=&quot;../api/platform-browser/browsermodule&quot;&gt;BrowserModule&lt;/a&gt;&lt;/code&gt; is the first import at the top of the &lt;code&gt;AppModule&lt;/code&gt;, &lt;code&gt;app.module.ts&lt;/code&gt;.</source>
          <target state="translated">使用这些Angular模块时，请将它们导入 &lt;code&gt;AppModule&lt;/code&gt; 或相应的功能模块中，然后在 &lt;code&gt;@&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt; &lt;code&gt;imports&lt;/code&gt; 数组中列出它们。例如，在由生成的基本应用&lt;a href=&quot;cli&quot;&gt;角CLI&lt;/a&gt;， &lt;code&gt;&lt;a href=&quot;../api/platform-browser/browsermodule&quot;&gt;BrowserModule&lt;/a&gt;&lt;/code&gt; 位于顶端的第一进口 &lt;code&gt;AppModule&lt;/code&gt; ， &lt;code&gt;app.module.ts&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="080cd8e0ffd40797678bd6db1b07ecb17508c1bf" translate="yes" xml:space="preserve">
          <source>When you visit &lt;code&gt;http://localhost:4200&lt;/code&gt;, the &lt;code&gt;/heroes&lt;/code&gt; route loads immediately upon launch and the router starts loading the &lt;code&gt;CrisisCenterModule&lt;/code&gt; right after the &lt;code&gt;HeroesModule&lt;/code&gt; loads.</source>
          <target state="translated">当您访问 &lt;code&gt;http://localhost:4200&lt;/code&gt; ，在 &lt;code&gt;/heroes&lt;/code&gt; 路线负荷一经推出立即在路由器启动加载 &lt;code&gt;CrisisCenterModule&lt;/code&gt; 后右 &lt;code&gt;HeroesModule&lt;/code&gt; 负荷。</target>
        </trans-unit>
        <trans-unit id="44c77ca06e436ba06a76204c91665ded53e10a97" translate="yes" xml:space="preserve">
          <source>When you want to build reactive forms</source>
          <target state="translated">当你想建立反应式表单时</target>
        </trans-unit>
        <trans-unit id="48f76a44e44194717a9e946c5feb9c2e6b0b52cd" translate="yes" xml:space="preserve">
          <source>When you want to build template driven forms (includes &lt;code&gt;&lt;a href=&quot;../api/forms/ngmodel&quot;&gt;NgModel&lt;/a&gt;&lt;/code&gt;)</source>
          <target state="translated">当您要构建模板驱动的表单（包括 &lt;code&gt;&lt;a href=&quot;../api/forms/ngmodel&quot;&gt;NgModel&lt;/a&gt;&lt;/code&gt; ）时</target>
        </trans-unit>
        <trans-unit id="4e5214feaf2e0f2b028e9529ca13429a1279a360" translate="yes" xml:space="preserve">
          <source>When you want to run your app in a browser</source>
          <target state="translated">当你想在浏览器中运行你的应用程序时</target>
        </trans-unit>
        <trans-unit id="79cd32fcf10e349cacf13610bd6576229e1c2cc5" translate="yes" xml:space="preserve">
          <source>When you want to talk to a server</source>
          <target state="translated">当你想与服务器对话时</target>
        </trans-unit>
        <trans-unit id="9b1b99eea8d22a5434f0d6b37e29a9e079c7a914" translate="yes" xml:space="preserve">
          <source>When you want to use &lt;code&gt;&lt;a href=&quot;../api/common/ngif&quot;&gt;NgIf&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;NgFor&lt;/code&gt;</source>
          <target state="translated">当您想使用 &lt;code&gt;&lt;a href=&quot;../api/common/ngif&quot;&gt;NgIf&lt;/a&gt;&lt;/code&gt; 时， &lt;code&gt;NgFor&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="896f69bcc45a08c492c179d02b221484e8842f42" translate="yes" xml:space="preserve">
          <source>When you want to use &lt;code&gt;&lt;a href=&quot;../api/router/routerlink&quot;&gt;RouterLink&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;.forRoot()&lt;/code&gt;, and &lt;code&gt;.forChild()&lt;/code&gt;</source>
          <target state="translated">当您想使用 &lt;code&gt;&lt;a href=&quot;../api/router/routerlink&quot;&gt;RouterLink&lt;/a&gt;&lt;/code&gt; ， &lt;code&gt;.forRoot()&lt;/code&gt; 和 &lt;code&gt;.forChild()&lt;/code&gt; 时</target>
        </trans-unit>
        <trans-unit id="dfa0b324bbeaa7902d962fb62864b60a9b21dc09" translate="yes" xml:space="preserve">
          <source>When you write a data-binding, you're dealing exclusively with the &lt;em&gt;DOM properties&lt;/em&gt; and &lt;em&gt;events&lt;/em&gt; of the target object.</source>
          <target state="translated">编写数据绑定时，您仅在处理&lt;em&gt;DOM属性&lt;/em&gt;和目标对象的&lt;em&gt;事件&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="4bb0f31a361efec853e39b49bafb65056beed48a" translate="yes" xml:space="preserve">
          <source>When you write your own structural directives, use the following grammar:</source>
          <target state="translated">当你写自己的结构指令时,请使用以下语法。</target>
        </trans-unit>
        <trans-unit id="b4e579e2078171bbeaf4e91de26fcbce3bcc959d" translate="yes" xml:space="preserve">
          <source>When you&amp;rsquo;re done, users will be able to navigate the app like this:</source>
          <target state="translated">完成后，用户将能够像这样导航应用程序：</target>
        </trans-unit>
        <trans-unit id="17951df2c8400929e977efa4744c0c861fc58da2" translate="yes" xml:space="preserve">
          <source>When you're done it looks like this.</source>
          <target state="translated">当你完成后,它看起来像这样。</target>
        </trans-unit>
        <trans-unit id="ef010cb6e75978e36467b31a7285fb58053efd7b" translate="yes" xml:space="preserve">
          <source>When you're done with this page, the app should look like this live example.</source>
          <target state="translated">当你完成这个页面后,应用程序应该看起来像这个现场示例。</target>
        </trans-unit>
        <trans-unit id="e6a96be9b1ba1110aa029cf80016d7fb5e9e1068" translate="yes" xml:space="preserve">
          <source>When you're done, it should look like this:</source>
          <target state="translated">当你完成后,它应该像这样。</target>
        </trans-unit>
        <trans-unit id="30a40655f733f6e41e3030f2d31ddd6f2dbe644f" translate="yes" xml:space="preserve">
          <source>When you're done, the &lt;code&gt;HeroDetailComponent&lt;/code&gt; template should look like this:</source>
          <target state="translated">完成后， &lt;code&gt;HeroDetailComponent&lt;/code&gt; 模板应如下所示：</target>
        </trans-unit>
        <trans-unit id="ea335dad3c01c816d9ed76f23c43e1124bac391a" translate="yes" xml:space="preserve">
          <source>When you're done, you'll have these &lt;em&gt;hero management&lt;/em&gt; files:</source>
          <target state="translated">完成后，您将拥有以下&lt;em&gt;英雄管理&lt;/em&gt;文件：</target>
        </trans-unit>
        <trans-unit id="503695908e0b2be5d18ab6d1e3b8706361e129c4" translate="yes" xml:space="preserve">
          <source>When you're familiar with these fundamental building blocks, you can explore them in more detail in the documentation. To learn about more tools and techniques that are available to help you build and deploy Angular applications, see &lt;a href=&quot;architecture-next-steps&quot;&gt;Next steps: tools and techniques&lt;/a&gt;.</source>
          <target state="translated">当您熟悉这些基本构建块时，可以在文档中对其进行更详细的研究。要了解更多可用于帮助您构建和部署Angular应用程序的&lt;a href=&quot;architecture-next-steps&quot;&gt;工具和技术&lt;/a&gt;，请参阅下一步：工具和技术。</target>
        </trans-unit>
        <trans-unit id="3c0dae56146bb8eee79b34c8c03a03fc066445b7" translate="yes" xml:space="preserve">
          <source>When you're filtering by CSS selector and only testing properties of a browser's &lt;em&gt;native element&lt;/em&gt;, the &lt;code&gt;By.css&lt;/code&gt; approach may be overkill.</source>
          <target state="translated">当您通过CSS选择器进行过滤并且仅测试浏览器的&lt;em&gt;本机元素的&lt;/em&gt;属性时， &lt;code&gt;By.css&lt;/code&gt; 方法可能会过大。</target>
        </trans-unit>
        <trans-unit id="e6dec613091e0293026f13a73d50239981c86f57" translate="yes" xml:space="preserve">
          <source>When you're ready to activate the marble observables, you tell the &lt;code&gt;TestScheduler&lt;/code&gt; to &lt;em&gt;flush&lt;/em&gt; its queue of prepared tasks like this.</source>
          <target state="translated">当你准备好激活大理石可观，你告诉 &lt;code&gt;TestScheduler&lt;/code&gt; 以&lt;em&gt;刷新&lt;/em&gt;其像这样的准备任务队列。</target>
        </trans-unit>
        <trans-unit id="7661aa2fca4df31ccc337d89f54c6916141df825" translate="yes" xml:space="preserve">
          <source>When you've defined an animation trigger for a component, you can attach it to an element in that component's template by wrapping the trigger name in brackets and preceding it with an &lt;code&gt;@&lt;/code&gt; symbol. Then, you can bind the trigger to a template expression using standard Angular property binding syntax as shown below, where &lt;code&gt;&lt;a href=&quot;../api/animations/animationevent#triggerName&quot;&gt;triggerName&lt;/a&gt;&lt;/code&gt; is the name of the trigger, and &lt;code&gt;expression&lt;/code&gt; evaluates to a defined animation state.</source>
          <target state="translated">为组件定义动画触发器后，可以通过将触发器名称包装在方括号中并在其前面加上 &lt;code&gt;@&lt;/code&gt; 符号，将其附加到该组件模板中的元素。然后，您可以使用标准的Angular属性绑定语法将触发器绑定到模板表达式，如下所示，其中 &lt;code&gt;&lt;a href=&quot;../api/animations/animationevent#triggerName&quot;&gt;triggerName&lt;/a&gt;&lt;/code&gt; 是触发器的名称，并且 &lt;code&gt;expression&lt;/code&gt; 求值为定义的动画状态。</target>
        </trans-unit>
        <trans-unit id="f196d6a018456796c02b3eb21de694c56f582388" translate="yes" xml:space="preserve">
          <source>When you've defined an animation trigger for a component, you can attach it to an element in that component's template by wrapping the trigger name in brackets and preceding it with an &lt;code&gt;@&lt;/code&gt; symbol. Then, you can bind the trigger to a template expression using standard Angular property binding syntax as shown below, where &lt;code&gt;triggerName&lt;/code&gt; is the name of the trigger, and &lt;code&gt;expression&lt;/code&gt; evaluates to a defined animation state.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="06d0715c9e5e8fde1b326bf82fa7f414cd43a882" translate="yes" xml:space="preserve">
          <source>When your app is ready, you can use the Angular CLI to extract the text messages marked with &lt;code&gt;i18n&lt;/code&gt; and attributes marked with &lt;code&gt;i18n-x&lt;/code&gt; into a translation source file. Open a terminal window at the root of the app project and run the CLI command &lt;code&gt;xi18n&lt;/code&gt;.</source>
          <target state="translated">应用就绪后，可以使用Angular CLI将标有 &lt;code&gt;i18n&lt;/code&gt; 的文本消息和标有 &lt;code&gt;i18n-x&lt;/code&gt; 的属性提取到翻译源文件中。在应用程序项目的根目录中打开一个终端窗口，然后运行CLI命令 &lt;code&gt;xi18n&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="155587edb5946e5b07a5f26004e5f36b972bf50e" translate="yes" xml:space="preserve">
          <source>When your application matches a route that needs AngularJS, the AngularJS app is loaded and bootstrapped, the AngularJS routes match the necessary URL to render their content, and your application continues to run with both AngularJS and Angular frameworks.</source>
          <target state="translated">当你的应用匹配到一个需要AngularJS的路由时,AngularJS应用就会被加载和引导,AngularJS路由匹配到必要的URL来渲染其内容,你的应用就会继续使用AngularJS和Angular框架运行。</target>
        </trans-unit>
        <trans-unit id="1112737823346d69526849d251d05ee8229526b6" translate="yes" xml:space="preserve">
          <source>When your builder calls &lt;code&gt;BuilderRun.stop()&lt;/code&gt; to exit watch mode, Architect unsubscribes from the builder&amp;rsquo;s Observable and calls the builder&amp;rsquo;s teardown logic to clean up. (This behavior also allows for long running builds to be stopped and cleaned up.)</source>
          <target state="translated">当您的构建器调用 &lt;code&gt;BuilderRun.stop()&lt;/code&gt; 退出监视模式时，Architect取消订阅该构建器的Observable，并调用该构建器的拆解逻辑进行清理。（此行为还允许停止长期运行的构建并进行清理。）</target>
        </trans-unit>
        <trans-unit id="40126e45c19e856e37cb61d50f01cae678591e52" translate="yes" xml:space="preserve">
          <source>When your custom element is placed on a page, the browser creates an instance of the registered class and adds it to the DOM. The content is provided by the component's template, which uses Angular template syntax, and is rendered using the component and DOM data. Input properties in the component correspond to input attributes for the element.</source>
          <target state="translated">当你的自定义元素放在页面上时,浏览器会创建一个注册类的实例,并将其添加到DOM中。内容由组件的模板提供,模板使用Angular模板语法,并使用组件和DOM数据进行渲染。组件中的输入属性对应元素的输入属性。</target>
        </trans-unit>
        <trans-unit id="b8a317fa05b7d048a76b55b7cf3677a9fa2860a5" translate="yes" xml:space="preserve">
          <source>Whenever an &quot;upgraded&quot;/&quot;downgraded&quot; component is instantiated the host element is owned by the framework doing the instantiation. The other framework then instantiates and owns the view for that component.</source>
          <target state="translated">每当 &quot;升级&quot;/&quot;降级 &quot;组件被实例化时,主机元素由进行实例化的框架拥有。然后,其他框架将实例化并拥有该组件的视图。</target>
        </trans-unit>
        <trans-unit id="c4fef1a1adbf1c56b8cc3ecbb53a52b91dc97ae7" translate="yes" xml:space="preserve">
          <source>Whenever an adapter component is instantiated the host element is owned by the framework doing the instantiation. The other framework then instantiates and owns the view for that component. This implies that component bindings will always follow the semantics of the instantiation framework. The syntax is always that of Angular syntax.</source>
          <target state="translated">每当一个适配器组件被实例化时,主机元素由进行实例化的框架拥有。然后,其他框架将实例化并拥有该组件的视图。这意味着组件绑定将始终遵循实例化框架的语义。语法始终是Angular语法的语法。</target>
        </trans-unit>
        <trans-unit id="8ae58a1b05f2395f014006fe21deb943e33d2361" translate="yes" xml:space="preserve">
          <source>Whenever the URL is either '/user' or '/user/bob', the &quot;active-link&quot; class is added to the anchor tag. If the URL changes, the class is removed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bb18456bba2c2a76c99b73d09dd270a2142bfc64" translate="yes" xml:space="preserve">
          <source>Whenever you use a component that belongs to the other framework, a switch between framework boundaries occurs. However, that switch only happens to the elements in the template of that component. Consider a situation where you use an Angular component from AngularJS like this:</source>
          <target state="translated">每当你使用一个属于其他框架的组件时,就会发生框架边界之间的切换。但是,这种切换只发生在该组件的模板中的元素上。考虑这样一种情况:你使用一个来自AngularJS的Angular组件。</target>
        </trans-unit>
        <trans-unit id="4f1b08932a636904e6d51136ac6d5569fe2a8d1a" translate="yes" xml:space="preserve">
          <source>Where &lt;code&gt;&amp;lt;component-name&amp;gt;&lt;/code&gt; is the name of your component.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="37c5edffc9d8dd9268e9bb4d3e92e12fb900ef58" translate="yes" xml:space="preserve">
          <source>Where the &lt;code&gt;catchError&lt;/code&gt; operator provides a simple path of recovery, the &lt;code&gt;retry&lt;/code&gt; operator lets you retry a failed request.</source>
          <target state="translated">在 &lt;code&gt;catchError&lt;/code&gt; 运算符提供简单的恢复路径的地方， &lt;code&gt;retry&lt;/code&gt; 运算符使您可以重试失败的请求。</target>
        </trans-unit>
        <trans-unit id="d3e42f4f2adbf1be1d8f547f899caad64fb9b8c9" translate="yes" xml:space="preserve">
          <source>Where to find this element in the source component template.</source>
          <target state="translated">在源组件模板中哪里可以找到这个元素。</target>
        </trans-unit>
        <trans-unit id="899e84e9c1a23f3a65ea931518f5051ef6f15a09" translate="yes" xml:space="preserve">
          <source>Where to start looking, that is &lt;code&gt;@&lt;a href=&quot;../api/core/skipself&quot;&gt;SkipSelf&lt;/a&gt;()&lt;/code&gt;</source>
          <target state="translated">从哪里开始寻找，那就是 &lt;code&gt;@&lt;a href=&quot;../api/core/skipself&quot;&gt;SkipSelf&lt;/a&gt;()&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="dbc3168449a7edc3ef42f05f473e45c12862c64f" translate="yes" xml:space="preserve">
          <source>Where to stop looking, &lt;code&gt;@&lt;a href=&quot;../api/core/host&quot;&gt;Host&lt;/a&gt;()&lt;/code&gt; and &lt;code&gt;@&lt;a href=&quot;../api/core/self&quot;&gt;Self&lt;/a&gt;()&lt;/code&gt;</source>
          <target state="translated">在哪里停止寻找， &lt;code&gt;@&lt;a href=&quot;../api/core/host&quot;&gt;Host&lt;/a&gt;()&lt;/code&gt; 和 &lt;code&gt;@&lt;a href=&quot;../api/core/self&quot;&gt;Self&lt;/a&gt;()&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="7e741bc3dcef0123eeda11543758853be2aac149" translate="yes" xml:space="preserve">
          <source>Where:</source>
          <target state="translated">Where:</target>
        </trans-unit>
        <trans-unit id="2e0c2208909a09359c375b3d5aeecc93e7a44f87" translate="yes" xml:space="preserve">
          <source>Whether &lt;code&gt;$event&lt;/code&gt; will have the correct type for event bindings to DOM events. If disabled, it will be &lt;code&gt;any&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4eac539be36df779c3551d604f39edbed339477e" translate="yes" xml:space="preserve">
          <source>Whether &lt;code&gt;$event&lt;/code&gt; will have the correct type for event bindings to component/directive an &lt;code&gt;@&lt;a href=&quot;../api/core/output&quot;&gt;Output&lt;/a&gt;()&lt;/code&gt;, or to animation events. If disabled, it will be &lt;code&gt;any&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e937161658fda0f59055fdaec47bde9945c0ff55" translate="yes" xml:space="preserve">
          <source>Whether &lt;code&gt;strictNullChecks&lt;/code&gt; is honored when checking &lt;code&gt;@&lt;a href=&quot;../api/core/input&quot;&gt;Input&lt;/a&gt;()&lt;/code&gt; bindings (per &lt;code&gt;strictInputTypes&lt;/code&gt;). Turning this off can be useful when using a library that was not built with &lt;code&gt;strictNullChecks&lt;/code&gt; in mind.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="37f1d496f29e5eb73daa8902f0325d27e32761df" translate="yes" xml:space="preserve">
          <source>Whether access modifiers such as &lt;code&gt;private&lt;/code&gt;/&lt;code&gt;protected&lt;/code&gt;/&lt;code&gt;readonly&lt;/code&gt; are honored when assigning a binding expression to an &lt;code&gt;@&lt;a href=&quot;../api/core/input&quot;&gt;Input&lt;/a&gt;()&lt;/code&gt;. If disabled, the access modifiers of the &lt;code&gt;@&lt;a href=&quot;../api/core/input&quot;&gt;Input&lt;/a&gt;&lt;/code&gt; are ignored; only the type is checked.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2e665d9a41999f37f1f7c2d3f4a29a44a6cd8103" translate="yes" xml:space="preserve">
          <source>Whether an associated application is stable</source>
          <target state="translated">相关应用程序是否稳定</target>
        </trans-unit>
        <trans-unit id="cc7b410bfd6fba439e9b1baa4aec1653ebd2f4ec" translate="yes" xml:space="preserve">
          <source>Whether local references to DOM elements will have the correct type. If disabled &lt;code&gt;ref&lt;/code&gt; will be of type &lt;code&gt;any&lt;/code&gt; for &lt;code&gt;&amp;lt;input #ref&amp;gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c1714ccb44042ca5ff4cc3d25ca89d6c4d82eaa5" translate="yes" xml:space="preserve">
          <source>Whether object and array literals declared in the template will have their type inferred. If disabled, the type of such literals will be &lt;code&gt;any&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eb474db37cd039fcdb74ad381d29c8362cc8e3e8" translate="yes" xml:space="preserve">
          <source>Whether the ServiceWorker will be registered and the related services (such as &lt;code&gt;&lt;a href=&quot;swpush&quot;&gt;SwPush&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;swupdate&quot;&gt;SwUpdate&lt;/a&gt;&lt;/code&gt;) will attempt to communicate and interact with it.</source>
          <target state="translated">ServiceWorker是否将被注册以及相关服务（例如 &lt;code&gt;&lt;a href=&quot;swpush&quot;&gt;SwPush&lt;/a&gt;&lt;/code&gt; 和 &lt;code&gt;&lt;a href=&quot;swupdate&quot;&gt;SwUpdate&lt;/a&gt;&lt;/code&gt; ）将尝试与其通信和交互。</target>
        </trans-unit>
        <trans-unit id="01d480a254eac0f05046b9ed0e18f9c8ded8044e" translate="yes" xml:space="preserve">
          <source>Whether the assignability of a binding expression to the &lt;code&gt;@&lt;a href=&quot;../api/core/input&quot;&gt;Input&lt;/a&gt;()&lt;/code&gt; field is checked. Also affects the inference of directive generic types.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2efc288f3df18953bf9fb23fadb91dbc28bef3db" translate="yes" xml:space="preserve">
          <source>Whether the contents of the root element should be preserved, or cleared upon bootstrap (default behavior). Use with &lt;code&gt;&lt;a href=&quot;viewencapsulation#ShadowDom&quot;&gt;ViewEncapsulation.ShadowDom&lt;/a&gt;&lt;/code&gt; to allow simple native content projection via &lt;code&gt;&amp;lt;slot&amp;gt;&lt;/code&gt; elements.</source>
          <target state="translated">根元素的内容是应保留还是在引导时清除（默认行为）。与 &lt;code&gt;&lt;a href=&quot;viewencapsulation#ShadowDom&quot;&gt;ViewEncapsulation.ShadowDom&lt;/a&gt;&lt;/code&gt; 一起使用，以允许通过 &lt;code&gt;&amp;lt;slot&amp;gt;&lt;/code&gt; 元素进行简单的本机内容投影。</target>
        </trans-unit>
        <trans-unit id="679fd56c58f755345be6f286028f36ab6f697b0c" translate="yes" xml:space="preserve">
          <source>Whether the given route should detach for later reuse. Always returns false for &lt;code&gt;&lt;a href=&quot;baseroutereusestrategy&quot;&gt;BaseRouteReuseStrategy&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7a82aeecbb6452e4ec659c4ab75f78d16e34f84a" translate="yes" xml:space="preserve">
          <source>Whether the listener is using event capturing.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="50cfde31657c9b1fe2fdf40030fe9a96ff38a3c3" translate="yes" xml:space="preserve">
          <source>Whether the request was cancelled after it was sent.</source>
          <target state="translated">请求发出后是否被取消。</target>
        </trans-unit>
        <trans-unit id="7f113e0ba3142ea06015cd8f51bcf988db639b1f" translate="yes" xml:space="preserve">
          <source>Whether the return type of safe navigation operations (for example, &lt;code&gt;user?.name&lt;/code&gt;) will be correctly inferred based on the type of &lt;code&gt;user&lt;/code&gt;). If disabled, &lt;code&gt;user?.name&lt;/code&gt; will be of type &lt;code&gt;any&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4bd45560b76a4dce3c8ea0111cc1f62d210247d6" translate="yes" xml:space="preserve">
          <source>Whether the router is configured properly to navigate with that route definition is a question for a separate set of tests.</source>
          <target state="translated">路由器是否正确地配置了该路由定义的导航,这是一个单独测试的问题。</target>
        </trans-unit>
        <trans-unit id="a4ae306143b886081b256a0cf1522d64a7dc41b4" translate="yes" xml:space="preserve">
          <source>Whether the segment has child segments</source>
          <target state="translated">该段是否有子段</target>
        </trans-unit>
        <trans-unit id="456355a8ff33ce384c5db09a8d5dcfc2098e26a3" translate="yes" xml:space="preserve">
          <source>Whether the status code falls in the 2xx range.</source>
          <target state="translated">状态码是否属于2xx范围。</target>
        </trans-unit>
        <trans-unit id="c6e9743720182bd06b19205d978e8d09ab6cf7b8" translate="yes" xml:space="preserve">
          <source>Whether the type parameters of generic components will be inferred correctly (including any generic bounds). If disabled, any type parameters will be &lt;code&gt;any&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c1e28eb611de2479c2121cff8123da6d11a13577" translate="yes" xml:space="preserve">
          <source>Whether there are no outstanding microtasks or macrotasks.</source>
          <target state="translated">是否没有突出的微观任务或宏观任务。</target>
        </trans-unit>
        <trans-unit id="8c95f88ef6319a806a46dcf12f9b346039ef053e" translate="yes" xml:space="preserve">
          <source>Whether this request should be made in a way that exposes progress events.</source>
          <target state="translated">这个请求是否应该以暴露进度事件的方式进行。</target>
        </trans-unit>
        <trans-unit id="98f2e0d781390a03ccdfde20254e6c9d4fb73bb1" translate="yes" xml:space="preserve">
          <source>Whether this request should be sent with outgoing credentials (cookies).</source>
          <target state="translated">此请求是否应与外发凭证(cookies)一起发送。</target>
        </trans-unit>
        <trans-unit id="e67c5849260e2c1b0ff2264f25feeb3c55f8f10c" translate="yes" xml:space="preserve">
          <source>Whether to allow updating when the repository contains modified or untracked files.</source>
          <target state="translated">是否允许在版本库包含修改过的或未跟踪的文件时进行更新。</target>
        </trans-unit>
        <trans-unit id="f0483717f7b4a8d01396eafecce1a5ccc5693967" translate="yes" xml:space="preserve">
          <source>Whether to append the absolute URL to any relative HTTP requests. If set to true, this logic executes prior to any HTTP interceptors that may run later on in the request. &lt;code&gt;baseUrl&lt;/code&gt; must be supplied if this flag is enabled.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d1accf922b230f17dfe9dad34c4a8560fc1606e5" translate="yes" xml:space="preserve">
          <source>Whether to check &lt;code&gt;@&lt;a href=&quot;../api/core/input&quot;&gt;Input&lt;/a&gt;()&lt;/code&gt; bindings that are made using text attributes (for example, &lt;code&gt;&amp;lt;mat-tab label=&quot;Step 1&quot;&amp;gt;&lt;/code&gt; vs &lt;code&gt;&amp;lt;mat-tab [label]=&quot;'Step 1'&quot;&amp;gt;&lt;/code&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="70687b848d56f420e192e687505aa7a7298367bc" translate="yes" xml:space="preserve">
          <source>Whether to reload the page on change, using live-reload.</source>
          <target state="translated">变更时是否重载页面,使用live-reload。</target>
        </trans-unit>
        <trans-unit id="432f58be7461d276173b0b45a590420621ebf868" translate="yes" xml:space="preserve">
          <source>Whether to update all packages in package.json.</source>
          <target state="translated">是否更新package.json中的所有包。</target>
        </trans-unit>
        <trans-unit id="1de26d1834040d0a83cfb31ff38330472c5f00df" translate="yes" xml:space="preserve">
          <source>Whether using exactMatch</source>
          <target state="translated">无论是使用exactMatch</target>
        </trans-unit>
        <trans-unit id="de1472a6ec96dc9dffba793cead39fdbd17ce5cb" translate="yes" xml:space="preserve">
          <source>Whether you came here directly from &lt;a href=&quot;https://angular.io/start/start&quot;&gt;Part 1&lt;/a&gt;, or completed the entire online store application through the &lt;a href=&quot;https://angular.io/start/start/start-routing&quot;&gt;In-app navigation&lt;/a&gt;, &lt;a href=&quot;https://angular.io/start/start/start-data&quot;&gt;Manage data&lt;/a&gt;, and &lt;a href=&quot;https://angular.io/start/start/start-forms&quot;&gt;Forms for user input&lt;/a&gt; sections, you have an application that you can deploy by following the instructions in this section.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4c0616b2607e4abaa27bed4b0ad642dc7df038cf" translate="yes" xml:space="preserve">
          <source>Whether you came here directly from &lt;a href=&quot;https://angular.io/start/start&quot;&gt;Your First App&lt;/a&gt;, or completed the entire online store application through the &lt;a href=&quot;https://angular.io/start/start/routing&quot;&gt;Routing&lt;/a&gt;, &lt;a href=&quot;https://angular.io/start/start/data&quot;&gt;Managing Data&lt;/a&gt;, and &lt;a href=&quot;https://angular.io/start/start/forms&quot;&gt;Forms&lt;/a&gt; sections, you have an application that you can deploy by following the instructions in this section.</source>
          <target state="translated">不管您是直接从&lt;a href=&quot;https://angular.io/start/start&quot;&gt;First App&lt;/a&gt;来到这里，还是通过&amp;ldquo; &lt;a href=&quot;https://angular.io/start/start/routing&quot;&gt;路由&amp;rdquo;&lt;/a&gt;，&amp;ldquo; &lt;a href=&quot;https://angular.io/start/start/data&quot;&gt;管理数据&lt;/a&gt; &amp;rdquo;和&amp;ldquo; &lt;a href=&quot;https://angular.io/start/start/forms&quot;&gt;表单&amp;rdquo;&lt;/a&gt;部分完成了整个在线商店应用程序，都可以按照本节中的说明进行部署。</target>
        </trans-unit>
        <trans-unit id="f6730e737d171af53aac08d450ed36cf222714c7" translate="yes" xml:space="preserve">
          <source>Whether you decide to package functionality as a library is an architectural decision, similar to deciding whether a piece of functionality is a component or a service, or deciding on the scope of a component.</source>
          <target state="translated">是否决定将功能打包成库是一个架构上的决定,类似于决定一个功能是一个组件还是一个服务,或者决定一个组件的范围。</target>
        </trans-unit>
        <trans-unit id="2038878dfc5e4e17b17bfe1516c1eeefe95f5b86" translate="yes" xml:space="preserve">
          <source>Which strategy is best?</source>
          <target state="translated">哪种策略最好?</target>
        </trans-unit>
        <trans-unit id="5dfd5deece18b3254cac9f524fac29bd76a83d05" translate="yes" xml:space="preserve">
          <source>While Visual Studio Update 3 ships with TypeScript support out of the box, it currently doesn&amp;rsquo;t ship with more recent versions of TypeScript, which you need to develop Angular applications.</source>
          <target state="translated">尽管Visual Studio Update 3附带了TypeScript支持，但目前还没有附带TypeScript的较新版本，您需要开发Angular应用程序。</target>
        </trans-unit>
        <trans-unit id="2f1154cb47e7f3f095cf5a680d8c709aaf901f86" translate="yes" xml:space="preserve">
          <source>While a list of items exists in another file, &lt;code&gt;mock-items.ts&lt;/code&gt;, you can specify a different item in &lt;code&gt;app.component.ts&lt;/code&gt; so that the new item will render:</source>
          <target state="translated">当另一个文件 &lt;code&gt;mock-items.ts&lt;/code&gt; 中存在一个项目列表时，您可以在 &lt;code&gt;app.component.ts&lt;/code&gt; 中指定另一个项目，以便新项目将呈现：</target>
        </trans-unit>
        <trans-unit id="7aaf540a86b02d7ab5f5ad8d445e241cd8492b75" translate="yes" xml:space="preserve">
          <source>While a small application might have only one NgModule, most apps have many more &lt;em&gt;feature modules&lt;/em&gt;. The &lt;em&gt;root&lt;/em&gt; NgModule for an app is so named because it can include child NgModules in a hierarchy of any depth.</source>
          <target state="translated">虽然一个小型应用程序可能只有一个NgModule，但大多数应用程序都具有更多&lt;em&gt;功能模块&lt;/em&gt;。应用程序的&lt;em&gt;根&lt;/em&gt; NgModule之所以这样命名是因为它可以在任何深度的层次结构中包含子NgModule。</target>
        </trans-unit>
        <trans-unit id="c9d9d4e125467027b326dad11b4db7cf192e4292" translate="yes" xml:space="preserve">
          <source>While an impure pipe can be useful, be careful using one. A long-running impure pipe could dramatically slow down your app.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="de3a579f287c79f1f8e62ef5741cd82572da8246" translate="yes" xml:space="preserve">
          <source>While building out the crisis center feature, you navigated to the crisis detail route using an &lt;strong&gt;absolute path&lt;/strong&gt; that begins with a &lt;em&gt;slash&lt;/em&gt;.</source>
          <target state="translated">构建危机中心功能时，您使用以&lt;em&gt;斜杠&lt;/em&gt;开头的&lt;strong&gt;绝对路径&lt;/strong&gt;导航到危机详细信息路线。&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="b994fa5ad6a0df57005672f1bc36799b782ce013" translate="yes" xml:space="preserve">
          <source>While building out the crisis center feature, you navigated to the crisis detail route using an absolute path that begins with a slash.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="af0f9bfe35490be85414a0791401df3fcf8622a8" translate="yes" xml:space="preserve">
          <source>While components in dedicated folders are widely preferred, another option for small apps is to keep components flat (not in a dedicated folder). This adds up to four files to the existing folder, but also reduces the folder nesting. Whatever you choose, be consistent.</source>
          <target state="translated">虽然专用文件夹中的组件被广泛青睐,但对于小型应用程序来说,另一种选择是保持组件的扁平化(不在专用文件夹中)。这样做最多可以在现有的文件夹中增加四个文件,但也减少了文件夹的嵌套。无论你选择什么,都要保持一致。</target>
        </trans-unit>
        <trans-unit id="af144108b7f59db013ae2561d54c81a42f70f29c" translate="yes" xml:space="preserve">
          <source>While declaring &lt;code&gt;inputs&lt;/code&gt; and &lt;code&gt;outputs&lt;/code&gt; in the &lt;code&gt;@&lt;a href=&quot;../api/core/directive&quot;&gt;Directive&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;@&lt;a href=&quot;../api/core/component&quot;&gt;Component&lt;/a&gt;&lt;/code&gt; metadata is possible, it is a better practice to use the &lt;code&gt;@&lt;a href=&quot;../api/core/input&quot;&gt;Input&lt;/a&gt;()&lt;/code&gt; and &lt;code&gt;@&lt;a href=&quot;../api/core/output&quot;&gt;Output&lt;/a&gt;()&lt;/code&gt; class decorators instead, as follows:</source>
          <target state="translated">虽然可以在 &lt;code&gt;@&lt;a href=&quot;../api/core/directive&quot;&gt;Directive&lt;/a&gt;&lt;/code&gt; &lt;a href=&quot;../api/core/directive&quot;&gt;指令&lt;/a&gt;和 &lt;code&gt;@&lt;a href=&quot;../api/core/component&quot;&gt;Component&lt;/a&gt;&lt;/code&gt; &lt;a href=&quot;../api/core/component&quot;&gt;Component&lt;/a&gt;元数据中声明 &lt;code&gt;inputs&lt;/code&gt; 和 &lt;code&gt;outputs&lt;/code&gt; ，但更好的做法是改为使用 &lt;code&gt;@&lt;a href=&quot;../api/core/input&quot;&gt;Input&lt;/a&gt;()&lt;/code&gt; &lt;a href=&quot;../api/core/input&quot;&gt;Input&lt;/a&gt;（）和 &lt;code&gt;@&lt;a href=&quot;../api/core/output&quot;&gt;Output&lt;/a&gt;()&lt;/code&gt; &lt;a href=&quot;../api/core/output&quot;&gt;Output&lt;/a&gt;（）类修饰符，如下所示：</target>
        </trans-unit>
        <trans-unit id="2bed2bf619f46d9561a69d126f76aa9c4fcbbd5e" translate="yes" xml:space="preserve">
          <source>While developing a library, you must install all peer dependencies through &lt;code&gt;devDependencies&lt;/code&gt; to ensure that the library compiles properly. A linked library will then have its own set of Angular libraries that it uses for building, located in its &lt;code&gt;node_modules&lt;/code&gt; folder. However, this can cause problems while building or running your application.</source>
          <target state="translated">开发库时，必须通过 &lt;code&gt;devDependencies&lt;/code&gt; 安装所有对等依赖关系，以确保正确编译该库。链接的库将在其 &lt;code&gt;node_modules&lt;/code&gt; 文件夹中具有其自己的用于构建的Angular库集。但是，这可能会在构建或运行应用程序时引起问题。</target>
        </trans-unit>
        <trans-unit id="a1a0bf45b753eb2788a0f144fc1399ff08d7a339" translate="yes" xml:space="preserve">
          <source>While documentation guide pages ultimately render as HTML, almost all of them are written in &lt;a href=&quot;https://daringfireball.net/projects/markdown/syntax&quot;&gt;markdown&lt;/a&gt;.</source>
          <target state="translated">尽管文档指南页面最终呈现为HTML，但几乎所有页面都是以&lt;a href=&quot;https://daringfireball.net/projects/markdown/syntax&quot;&gt;markdown&lt;/a&gt;编写的。</target>
        </trans-unit>
        <trans-unit id="c100e548b1e727c46d786c6921d9f15548b92d9d" translate="yes" xml:space="preserve">
          <source>While following these steps, you can &lt;a href=&quot;i18n#app-pre-translation&quot;&gt;explore the translated example app&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2bb660e2b074f370e7dfa660e9e07c484771bd07" translate="yes" xml:space="preserve">
          <source>While invisible, the element remains in the DOM.</source>
          <target state="translated">虽然不可见,但该元素仍然在DOM中。</target>
        </trans-unit>
        <trans-unit id="16ee0811bb131e7a95292c475b6b02aee8293f49" translate="yes" xml:space="preserve">
          <source>While it is possible to downgrade injectables, downgraded injectables will not be available until the Angular module that provides them is instantiated. In order to be safe, you need to ensure that the downgraded injectables are not used anywhere &lt;em&gt;outside&lt;/em&gt; the part of the app where it is guaranteed that their module has been instantiated.</source>
          <target state="translated">虽然可以降级可注射物，但是降级后的可注射物只有在实例化提供它们的Angular模块后才可用。为了安全起见，您需要确保在应用程序部分&lt;em&gt;之外&lt;/em&gt;的任何可确保实例化其模块的地方都不会使用降级的注射剂。</target>
        </trans-unit>
        <trans-unit id="b21f1ae1393795395e1d8727d35b23f3416670eb" translate="yes" xml:space="preserve">
          <source>While some may not care to minify this aggressively, the Angular product shouldn't prevent anyone from minifying aggressively. Therefore, the Angular team decided that everything Angular provides will minify safely.</source>
          <target state="translated">虽然有些人可能并不在意这种激进的迷你化,但Angular产品不应该阻止任何人激进的迷你化。因此,Angular团队决定,Angular提供的所有东西都会安全地进行最小化。</target>
        </trans-unit>
        <trans-unit id="9deda132ffe29c742d81e186d165961fa24ce75f" translate="yes" xml:space="preserve">
          <source>While testing a component this simple has little intrinsic value, it's worth knowing how. You can use one of these approaches:</source>
          <target state="translated">虽然测试一个如此简单的组件没有什么内在价值,但值得知道如何测试。你可以使用这些方法中的一种。</target>
        </trans-unit>
        <trans-unit id="922eaf22cdef6cf248a96c62535e56e742dd60f1" translate="yes" xml:space="preserve">
          <source>While that seems redundant, these properties have different functions. Membership in one list doesn't imply membership in another list.</source>
          <target state="translated">虽然这似乎是多余的,但这些属性具有不同的功能。一个列表中的成员资格并不意味着另一个列表中的成员资格。</target>
        </trans-unit>
        <trans-unit id="dbaae74b0ebf41a6f36354e5583ce138e38a4b27" translate="yes" xml:space="preserve">
          <source>While the &lt;code&gt;&lt;a href=&quot;../api/core/testing/async&quot;&gt;async&lt;/a&gt;()&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;../api/core/testing/fakeasync&quot;&gt;fakeAsync&lt;/a&gt;()&lt;/code&gt; functions greatly simplify Angular asynchronous testing, you can still fall back to the traditional technique and pass &lt;code&gt;it&lt;/code&gt; a function that takes a &lt;a href=&quot;https://jasmine.github.io/2.0/introduction.html#section-Asynchronous_Support&quot;&gt;&lt;code&gt;done&lt;/code&gt; callback&lt;/a&gt;.</source>
          <target state="translated">虽然 &lt;code&gt;&lt;a href=&quot;../api/core/testing/async&quot;&gt;async&lt;/a&gt;()&lt;/code&gt; 和 &lt;code&gt;&lt;a href=&quot;../api/core/testing/fakeasync&quot;&gt;fakeAsync&lt;/a&gt;()&lt;/code&gt; 功能大大简化异步角测试，您仍然可以回落到传统的技术，并通过 &lt;code&gt;it&lt;/code&gt; 的功能，需要一个&lt;a href=&quot;https://jasmine.github.io/2.0/introduction.html#section-Asynchronous_Support&quot;&gt; &lt;code&gt;done&lt;/code&gt; 回调&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="6438d422db5d5c83a1b6b3842605b3bf58e4d47f" translate="yes" xml:space="preserve">
          <source>While the &lt;code&gt;&lt;a href=&quot;../api/core/testing/waitforasync&quot;&gt;waitForAsync&lt;/a&gt;()&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;../api/core/testing/fakeasync&quot;&gt;fakeAsync&lt;/a&gt;()&lt;/code&gt; functions greatly simplify Angular asynchronous testing, you can still fall back to the traditional technique and pass &lt;code&gt;it&lt;/code&gt; a function that takes a &lt;a href=&quot;https://jasmine.github.io/2.0/introduction.html#section-Asynchronous_Support&quot;&gt;&lt;code&gt;done&lt;/code&gt; callback&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="94a171d6c589715e1067bf2483ed94b5ae7d39ea" translate="yes" xml:space="preserve">
          <source>While the &lt;code&gt;AppComponent&lt;/code&gt;&lt;em&gt;class&lt;/em&gt; is empty, you may want to write unit tests to confirm that the links are wired properly to the &lt;code&gt;&lt;a href=&quot;../api/router/routerlink&quot;&gt;RouterLink&lt;/a&gt;&lt;/code&gt; directives, perhaps for the reasons &lt;a href=&quot;testing#why-stubbed-routerlink-tests&quot;&gt;explained below&lt;/a&gt;.</source>
          <target state="translated">虽然 &lt;code&gt;AppComponent&lt;/code&gt; &lt;em&gt;类&lt;/em&gt;是空的，你可能需要编写单元测试，以确认该链接是正确接线到 &lt;code&gt;&lt;a href=&quot;../api/router/routerlink&quot;&gt;RouterLink&lt;/a&gt;&lt;/code&gt; 指令，也许是原因&lt;a href=&quot;testing#why-stubbed-routerlink-tests&quot;&gt;解释如下&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="8d75a0ea7e49d05900484224fa6f44b2f9035ba6" translate="yes" xml:space="preserve">
          <source>While the &lt;code&gt;AppComponent&lt;/code&gt;&lt;em&gt;class&lt;/em&gt; is empty, you may want to write unit tests to confirm that the links are wired properly to the &lt;code&gt;&lt;a href=&quot;../api/router/routerlink&quot;&gt;RouterLink&lt;/a&gt;&lt;/code&gt; directives, perhaps for the reasons &lt;a href=&quot;testing-components-scenarios#why-stubbed-routerlink-tests&quot;&gt;explained below&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5d3223a994c3c8a4823a7603409c5fb5030bcfbb" translate="yes" xml:space="preserve">
          <source>While the &lt;code&gt;HeroesComponent&lt;/code&gt; class still works, the &lt;code&gt;onSelect()&lt;/code&gt; method and &lt;code&gt;selectedHero&lt;/code&gt; property are no longer used.</source>
          <target state="translated">尽管 &lt;code&gt;HeroesComponent&lt;/code&gt; 类仍然有效，但不再使用 &lt;code&gt;onSelect()&lt;/code&gt; 方法和 &lt;code&gt;selectedHero&lt;/code&gt; 属性。</target>
        </trans-unit>
        <trans-unit id="7bfa741a35ff4ba4dd3d245eeb234b8097b7ea83" translate="yes" xml:space="preserve">
          <source>While the &lt;code&gt;ngDoCheck()&lt;/code&gt; hook can detect when the hero's &lt;code&gt;name&lt;/code&gt; has changed, it has a frightful cost. This hook is called with enormous frequency&amp;mdash;after &lt;em&gt;every&lt;/em&gt; change detection cycle no matter where the change occurred. It's called over twenty times in this example before the user can do anything.</source>
          <target state="translated">尽管 &lt;code&gt;ngDoCheck()&lt;/code&gt; 挂钩可以检测到英雄的 &lt;code&gt;name&lt;/code&gt; 何时更改，但代价却是惊人的。在&lt;em&gt;每个&lt;/em&gt;更改检测周期之后，无论更改发生在何处，&lt;em&gt;都会&lt;/em&gt;以极大的频率调用此钩子。在此示例中，它被调用了二十次，用户才能执行任何操作。</target>
        </trans-unit>
        <trans-unit id="a027b3d587afc8003cb6783d750fb4124670a3aa" translate="yes" xml:space="preserve">
          <source>While the &lt;code&gt;ngDoCheck()&lt;/code&gt; hook can detect when the hero's &lt;code&gt;name&lt;/code&gt; has changed, it is very expensive. This hook is called with enormous frequency&amp;mdash;after &lt;em&gt;every&lt;/em&gt; change detection cycle no matter where the change occurred. It's called over twenty times in this example before the user can do anything.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a55beda27c00248790e49417c4dcaaa586bb7541" translate="yes" xml:space="preserve">
          <source>While the &lt;em&gt;code sample&lt;/em&gt; accompanying this guide demonstrates &lt;code&gt;&lt;a href=&quot;../api/common/http/testing/httpclienttestingmodule&quot;&gt;HttpClientTestingModule&lt;/a&gt;&lt;/code&gt;, this page defers to the &lt;a href=&quot;http#testing-http-requests&quot;&gt;Http guide&lt;/a&gt;, which covers testing with the &lt;code&gt;&lt;a href=&quot;../api/common/http/testing/httpclienttestingmodule&quot;&gt;HttpClientTestingModule&lt;/a&gt;&lt;/code&gt; in detail.</source>
          <target state="translated">尽管本指南随附的&lt;em&gt;代码示例&lt;/em&gt;演示了 &lt;code&gt;&lt;a href=&quot;../api/common/http/testing/httpclienttestingmodule&quot;&gt;HttpClientTestingModule&lt;/a&gt;&lt;/code&gt; ，但本页面还是遵循&lt;a href=&quot;http#testing-http-requests&quot;&gt;Http指南&lt;/a&gt;，该指南详细介绍了使用 &lt;code&gt;&lt;a href=&quot;../api/common/http/testing/httpclienttestingmodule&quot;&gt;HttpClientTestingModule&lt;/a&gt;&lt;/code&gt; 进行测试。</target>
        </trans-unit>
        <trans-unit id="e236f6fd7d6a981d056dc092480c2d9f7cd0493a" translate="yes" xml:space="preserve">
          <source>While the bootstrapped and routed components are &lt;em&gt;entry components&lt;/em&gt;, you don't have to add them to a module's &lt;code&gt;entryComponents&lt;/code&gt; list, as they are added implicitly.</source>
          <target state="translated">尽管自举组件和路由组件是&lt;em&gt;入口组件&lt;/em&gt;，但您不必将它们添加到模块的 &lt;code&gt;entryComponents&lt;/code&gt; 列表中，因为它们是隐式添加的。</target>
        </trans-unit>
        <trans-unit id="7b948c3298099054af5c43499c67fd799579eafd" translate="yes" xml:space="preserve">
          <source>While the following guidelines describe the use of each type and their typical characteristics, in real world apps, you may see hybrids.</source>
          <target state="translated">虽然以下指南描述了每种类型的使用及其典型特征,但在现实世界的应用程序中,您可能会看到混合型。</target>
        </trans-unit>
        <trans-unit id="eedac9919ab146128bc64496dc8509fb9883c9f9" translate="yes" xml:space="preserve">
          <source>While the guard doesn't have to know which component has a deactivate method, it can detect that the &lt;code&gt;CrisisDetailComponent&lt;/code&gt; component has the &lt;code&gt;canDeactivate()&lt;/code&gt; method and call it. The guard not knowing the details of any component's deactivation method makes the guard reusable.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="322f024cb227e4947bae54501a104f55a7646140" translate="yes" xml:space="preserve">
          <source>While the name &lt;code&gt;root&lt;/code&gt; is a special alias, other &lt;code&gt;ModuleInjector&lt;/code&gt;s don't have aliases. You have the option to create &lt;code&gt;ModuleInjector&lt;/code&gt;s whenever a dynamically loaded component is created, such as with the Router, which will create child &lt;code&gt;ModuleInjector&lt;/code&gt;s.</source>
          <target state="translated">虽然名称 &lt;code&gt;root&lt;/code&gt; 是一个特殊的别名，但其他 &lt;code&gt;ModuleInjector&lt;/code&gt; 却没有别名。你必须创建选项 &lt;code&gt;ModuleInjector&lt;/code&gt; 小号每当动态加载的组件被创建，如与路由器，这将创造孩子 &lt;code&gt;ModuleInjector&lt;/code&gt; 秒。</target>
        </trans-unit>
        <trans-unit id="1d767a5a85783201556264a61318d016cc2125ea" translate="yes" xml:space="preserve">
          <source>While the router uses the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/History_API#Adding_and_modifying_history_entries&quot;&gt;HTML5 pushState&lt;/a&gt; style by default, you &lt;em&gt;must&lt;/em&gt; configure that strategy with a &lt;strong&gt;base href&lt;/strong&gt;.</source>
          <target state="translated">当路由器默认使用&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/History_API#Adding_and_modifying_history_entries&quot;&gt;HTML5 pushState&lt;/a&gt;样式时，您&lt;em&gt;必须&lt;/em&gt;使用&lt;strong&gt;基本href&lt;/strong&gt;配置该策略。</target>
        </trans-unit>
        <trans-unit id="37bd273b858b7de999c7d31f5f1d63976a206878" translate="yes" xml:space="preserve">
          <source>While the router uses the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/History_API#Adding_and_modifying_history_entries&quot;&gt;HTML5 pushState&lt;/a&gt; style by default, you must configure that strategy with a &lt;code&gt;&amp;lt;base href&amp;gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="01d95e9caebba56bfe90c85d978bfaab15d3c180" translate="yes" xml:space="preserve">
          <source>While the subscription is active, Service Worker listens for &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/PushEvent&quot;&gt;PushEvent&lt;/a&gt; occurrences and creates &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Notification&quot;&gt;Notification&lt;/a&gt; instances in response.</source>
          <target state="translated">订阅处于活动状态时，Service Worker侦听&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/PushEvent&quot;&gt;PushEvent的&lt;/a&gt;出现并创建&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Notification&quot;&gt;Notification&lt;/a&gt;实例作为响应。</target>
        </trans-unit>
        <trans-unit id="e91af09c132542b901dc969980ed9ae882ac1705" translate="yes" xml:space="preserve">
          <source>While there's rarely a good reason to apply a structural directive in template &lt;em&gt;attribute&lt;/em&gt; or &lt;em&gt;element&lt;/em&gt; form, it's still important to know that Angular creates a &lt;code&gt;&amp;lt;ng-template&amp;gt;&lt;/code&gt; and to understand how it works. You'll refer to the &lt;code&gt;&amp;lt;ng-template&amp;gt;&lt;/code&gt; when you &lt;a href=&quot;structural-directives#unless&quot;&gt;write your own structural directive&lt;/a&gt;.</source>
          <target state="translated">尽管很少有很好的理由以模板&lt;em&gt;属性&lt;/em&gt;或&lt;em&gt;元素&lt;/em&gt;形式应用结构指令，但了解Angular创建 &lt;code&gt;&amp;lt;ng-template&amp;gt;&lt;/code&gt; 并了解其工作原理仍然很重要。&lt;a href=&quot;structural-directives#unless&quot;&gt;编写自己的结构指令&lt;/a&gt;时，将引用 &lt;code&gt;&amp;lt;ng-template&amp;gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="13ac445e8a260522faf3df163997d45a5d55783f" translate="yes" xml:space="preserve">
          <source>While these default criteria are fine in most cases, it is sometimes desirable to configure different rules. For example, you may want to ignore specific routes (that are not part of the Angular app) and pass them through to the server.</source>
          <target state="translated">虽然这些默认标准在大多数情况下都没有问题,但有时配置不同的规则是可取的。例如,您可能希望忽略特定的路由(不属于Angular应用程序的一部分),并将其传递给服务器。</target>
        </trans-unit>
        <trans-unit id="0f9227406655f727bc3b335fbb57e7ecad4435de" translate="yes" xml:space="preserve">
          <source>While this app doesn't have a route to the &lt;code&gt;HeroDetailComponent&lt;/code&gt; that omits the &lt;code&gt;id&lt;/code&gt; parameter, it might add such a route someday. The component should do something reasonable when there is no &lt;code&gt;id&lt;/code&gt;.</source>
          <target state="translated">虽然这个程序没有一个路线 &lt;code&gt;HeroDetailComponent&lt;/code&gt; 省略了 &lt;code&gt;id&lt;/code&gt; 参数，它可能会增加这样的路线一天。没有 &lt;code&gt;id&lt;/code&gt; 时，组件应执行合理的操作。</target>
        </trans-unit>
        <trans-unit id="3db01e5de077841c6ee63df60c8eb095a471b993" translate="yes" xml:space="preserve">
          <source>While this is a base class that NgClass extends from, the class itself acts as a container for non-VE code to setup a link to the &lt;code&gt;[class]&lt;/code&gt; host binding (via the static &lt;code&gt;ngDirectiveDef&lt;/code&gt; property on the class).</source>
          <target state="translated">尽管这是NgClass扩展的基类，但该类本身充当非VE代码的容器，以建立到 &lt;code&gt;[class]&lt;/code&gt; 主机绑定的链接（通过该类上的静态 &lt;code&gt;ngDirectiveDef&lt;/code&gt; 属性）。</target>
        </trans-unit>
        <trans-unit id="40a33dd6773969d82d18d1f0e4b8284401f3f3fa" translate="yes" xml:space="preserve">
          <source>While this is a base class that NgStyle extends from, the class itself acts as a container for non-VE code to setup a link to the &lt;code&gt;[&lt;a href=&quot;../animations/style&quot;&gt;style&lt;/a&gt;]&lt;/code&gt; host binding (via the static &lt;code&gt;ngDirectiveDef&lt;/code&gt; property on the class).</source>
          <target state="translated">尽管这是NgStyle扩展的基类，但该类本身充当非VE代码的容器，以建立指向 &lt;code&gt;[&lt;a href=&quot;../animations/style&quot;&gt;style&lt;/a&gt;]&lt;/code&gt; 主机绑定的链接（通过 &lt;code&gt;ngDirectiveDef&lt;/code&gt; 上的静态ngDirectiveDef属性）。</target>
        </trans-unit>
        <trans-unit id="1557d255fa555f2461a9fc1ea6d89f6d4f9550b5" translate="yes" xml:space="preserve">
          <source>While this technique is suitable for toggling a single class name, consider the &lt;a href=&quot;template-syntax#ngClass&quot;&gt;&lt;code&gt;NgClass&lt;/code&gt;&lt;/a&gt; directive when managing multiple class names at the same time.</source>
          <target state="translated">尽管此技术适用于切换单个类名，但&lt;a href=&quot;template-syntax#ngClass&quot;&gt; &lt;code&gt;NgClass&lt;/code&gt; &lt;/a&gt;管理多个类名时请考虑使用NgClass指令。</target>
        </trans-unit>
        <trans-unit id="f03df879982808cab6e039552bc7f433d15c9f09" translate="yes" xml:space="preserve">
          <source>While users can navigate your application using the links you added in the previous section, they don't have an easy way to identify what the active route is. You can add this functionality using Angular's &lt;code&gt;&lt;a href=&quot;../api/router/routerlinkactive&quot;&gt;routerLinkActive&lt;/a&gt;&lt;/code&gt; directive.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d971e439874c00bf97336a91204c83d31c4d88b7" translate="yes" xml:space="preserve">
          <source>While working on a published library, you can use &lt;a href=&quot;https://docs.npmjs.com/cli/link&quot;&gt;npm link&lt;/a&gt; to avoid reinstalling the library on every build.</source>
          <target state="translated">在处理已发布的库时，可以使用&lt;a href=&quot;https://docs.npmjs.com/cli/link&quot;&gt;npm链接&lt;/a&gt;来避免在每个版本上重新安装该库。</target>
        </trans-unit>
        <trans-unit id="b24ca2e39219949e690787fe118cba513f0fcb23" translate="yes" xml:space="preserve">
          <source>While you can put more than one component tree on a host web page, most applications have only one component tree and bootstrap a single root component.</source>
          <target state="translated">虽然你可以在一个主机网页上放多个组件树,但大多数应用程序只有一个组件树,并引导一个单一的根组件。</target>
        </trans-unit>
        <trans-unit id="2995520f0730c6fe7aaf62a242e0e3198f2ff20b" translate="yes" xml:space="preserve">
          <source>While you can translate non-displayed text using a &lt;code&gt;&amp;lt;span&amp;gt;&lt;/code&gt; tag, you are creating a new DOM element. To avoid doing so, wrap the text in an &lt;code&gt;&amp;lt;ng-container&amp;gt;&lt;/code&gt; element, which is transformed into a non-displayed HTML comment as shown in this example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7e225fb4c7e87b7b1778b247651d232843aa3aba" translate="yes" xml:space="preserve">
          <source>While you could call &lt;code&gt;getHeroes()&lt;/code&gt; in the constructor, that's not the best practice.</source>
          <target state="translated">虽然可以在构造函数中调用 &lt;code&gt;getHeroes()&lt;/code&gt; ，但这不是最佳实践。</target>
        </trans-unit>
        <trans-unit id="a0fae3fec8db9b133701c092b5757d24ffb7e3ae" translate="yes" xml:space="preserve">
          <source>While you could continue to add files to the &lt;code&gt;src/app/&lt;/code&gt; folder, that is unrealistic and ultimately not maintainable. Most developers prefer to put each feature area in its own folder.</source>
          <target state="translated">尽管您可以继续将文件添加到 &lt;code&gt;src/app/&lt;/code&gt; 文件夹，但这是不现实的，并且最终是无法维护的。大多数开发人员更喜欢将每个功能区域放在自己的文件夹中。</target>
        </trans-unit>
        <trans-unit id="ab6a43c0bf8f0d40672e23efd7b8429687eb1e22" translate="yes" xml:space="preserve">
          <source>Why &quot;ngModel&quot;? A directive's &lt;a href=&quot;../api/core/directive&quot;&gt;exportAs&lt;/a&gt; property tells Angular how to link the reference variable to the directive. You set &lt;code&gt;name&lt;/code&gt; to &lt;code&gt;&lt;a href=&quot;../api/forms/ngmodel&quot;&gt;ngModel&lt;/a&gt;&lt;/code&gt; because the &lt;code&gt;&lt;a href=&quot;../api/forms/ngmodel&quot;&gt;ngModel&lt;/a&gt;&lt;/code&gt; directive's &lt;code&gt;exportAs&lt;/code&gt; property happens to be &quot;ngModel&quot;.</source>
          <target state="translated">为什么是&amp;ldquo; ngModel&amp;rdquo;？指令的&lt;a href=&quot;../api/core/directive&quot;&gt;exportAs&lt;/a&gt;属性告诉Angular如何将引用变量链接到指令。您将 &lt;code&gt;name&lt;/code&gt; 设置为 &lt;code&gt;&lt;a href=&quot;../api/forms/ngmodel&quot;&gt;ngModel&lt;/a&gt;&lt;/code&gt; ,因为 &lt;code&gt;&lt;a href=&quot;../api/forms/ngmodel&quot;&gt;ngModel&lt;/a&gt;&lt;/code&gt; 指令的 &lt;code&gt;exportAs&lt;/code&gt; 属性恰好是&amp;ldquo; ngModel&amp;rdquo;。</target>
        </trans-unit>
        <trans-unit id="d318f1063bfb5cd9dacbb5931bfa402cc527970e" translate="yes" xml:space="preserve">
          <source>Why &lt;code&gt;remove&lt;/code&gt; rather than &lt;code&gt;hide&lt;/code&gt;?</source>
          <target state="translated">为什么要 &lt;code&gt;remove&lt;/code&gt; 而不是 &lt;code&gt;hide&lt;/code&gt; ？</target>
        </trans-unit>
        <trans-unit id="5e5069bc0dde0d06f00638f22a1b23e5b6061f68" translate="yes" xml:space="preserve">
          <source>Why check &lt;em&gt;dirty&lt;/em&gt; and &lt;em&gt;touched&lt;/em&gt;?</source>
          <target state="translated">为什么检查&lt;em&gt;脏&lt;/em&gt;和&lt;em&gt;感动&lt;/em&gt;？</target>
        </trans-unit>
        <trans-unit id="cdde1e44b5df9e7b5ee6f951fb7ffd01c1fe5ee3" translate="yes" xml:space="preserve">
          <source>Why declare &lt;em&gt;angular&lt;/em&gt; as &lt;em&gt;angular.IAngularStatic&lt;/em&gt;?</source>
          <target state="translated">为什么将&lt;em&gt;angular&lt;/em&gt;声明为&lt;em&gt;angular.IAngularStatic&lt;/em&gt;？</target>
        </trans-unit>
        <trans-unit id="77edc57f32ccba69520fd34fd76f444ba728688a" translate="yes" xml:space="preserve">
          <source>Why does Angular need &lt;code&gt;entryComponents&lt;/code&gt;?</source>
          <target state="translated">为什么Angular需要 &lt;code&gt;entryComponents&lt;/code&gt; ？</target>
        </trans-unit>
        <trans-unit id="51611ead610693f8035df03d882f55fdb9029100" translate="yes" xml:space="preserve">
          <source>Why does lazy loading create a child injector?</source>
          <target state="translated">为什么懒惰加载会创建一个子注入器?</target>
        </trans-unit>
        <trans-unit id="4eec386f35248e79e61fc00c25f2064798d6b68d" translate="yes" xml:space="preserve">
          <source>Why does the &lt;code&gt;doSomething()&lt;/code&gt; method wait a tick before updating &lt;code&gt;comment&lt;/code&gt;?</source>
          <target state="translated">为什么 &lt;code&gt;doSomething()&lt;/code&gt; 方法在更新 &lt;code&gt;comment&lt;/code&gt; 之前要等待一会儿呢？</target>
        </trans-unit>
        <trans-unit id="eb31703be46c50bbc7eaa00a5535907610777ee9" translate="yes" xml:space="preserve">
          <source>Why doesn't Angular add lazy-loaded providers to the app root injector as it does for eagerly loaded NgModules?</source>
          <target state="translated">为什么Angular不像对急于加载的NgModules那样,将懒惰加载的提供者添加到应用根注入器中?</target>
        </trans-unit>
        <trans-unit id="1854ce5e4b6793b5d1ae83050374ba97c6c3c00c" translate="yes" xml:space="preserve">
          <source>Why is a service provided in a feature module visible everywhere?</source>
          <target state="translated">为什么功能模块中提供的服务到处可见?</target>
        </trans-unit>
        <trans-unit id="7f854e990dd8ef12c3bfdefa6688b2c3721f6c5b" translate="yes" xml:space="preserve">
          <source>Why is a service provided in a lazy-loaded module visible only to that module?</source>
          <target state="translated">为什么在一个懒加载模块中提供的服务只有该模块可见?</target>
        </trans-unit>
        <trans-unit id="8c6b2ade23fd30b08eb34573829d5d3555214a81" translate="yes" xml:space="preserve">
          <source>Why is it bad if a shared module provides a service to a lazy-loaded module?</source>
          <target state="translated">如果一个共享模块为一个懒人模块提供服务,为什么不好?</target>
        </trans-unit>
        <trans-unit id="2e4580536b0f2359910adb76e50ba348f206ca0a" translate="yes" xml:space="preserve">
          <source>Why it works</source>
          <target state="translated">为什么它能发挥作用</target>
        </trans-unit>
        <trans-unit id="c61aec305e608a6380d5ef5d9610794a4acd19c7" translate="yes" xml:space="preserve">
          <source>Why list the same component in multiple &lt;code&gt;&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt; properties?</source>
          <target state="translated">为什么要在多个 &lt;code&gt;&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt; 属性中列出同一组件？</target>
        </trans-unit>
        <trans-unit id="4b4def911c2cbfb92404d9a60708df645ca4036b" translate="yes" xml:space="preserve">
          <source>Why not &quot;highlight&quot;?</source>
          <target state="translated">为什么不 &quot;突出&quot;?</target>
        </trans-unit>
        <trans-unit id="9e9f3c21f34bc99e2a0bc838edaf643242816b11" translate="yes" xml:space="preserve">
          <source>Why not defer DOM integration tests to end-to-end (E2E) testing?</source>
          <target state="translated">为什么不把DOM集成测试推迟到端到端(E2E)测试?</target>
        </trans-unit>
        <trans-unit id="f0c9e7d2fbfbc176f66d88e4130920bb0d8e5e6d" translate="yes" xml:space="preserve">
          <source>Why not rely on E2E tests of DOM integration?</source>
          <target state="translated">为什么不依靠E2E测试DOM的集成?</target>
        </trans-unit>
        <trans-unit id="ba6cd6fa33a570d67aedda554c42dca77ff31e43" translate="yes" xml:space="preserve">
          <source>Why put spec file next to the file it tests?</source>
          <target state="translated">为什么把规范文件放在它测试的文件旁边?</target>
        </trans-unit>
        <trans-unit id="12078275c72479f3331dcc17b12caa18d03a9c98" translate="yes" xml:space="preserve">
          <source>Why services</source>
          <target state="translated">为什么服务</target>
        </trans-unit>
        <trans-unit id="430ea9adf8d91815946ba4f13ebf65a6528dc6b9" translate="yes" xml:space="preserve">
          <source>Why use server-side rendering?</source>
          <target state="translated">为什么要使用服务器端渲染?</target>
        </trans-unit>
        <trans-unit id="58eb6efb5ee2ce76380afc566adebeb87b29c2a6" translate="yes" xml:space="preserve">
          <source>Why would you use SVG as template, instead of simply adding it as image to your application?</source>
          <target state="translated">为什么您要使用SVG作为模板,而不是简单地将其作为图片添加到您的应用程序中?</target>
        </trans-unit>
        <trans-unit id="5e348a70aa9504ebb9cd2767488ed852755a1934" translate="yes" xml:space="preserve">
          <source>Why write a service?</source>
          <target state="translated">为什么要写服务?</target>
        </trans-unit>
        <trans-unit id="c4581c9bfa8088ce1bd486ec378845ae6496a3c3" translate="yes" xml:space="preserve">
          <source>Why you &lt;a href=&quot;structural-directives#one-per-element&quot;&gt;can only apply one structural directive&lt;/a&gt; to an element.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7320f16356458f846b9605ef64b13b7ecdd83423" translate="yes" xml:space="preserve">
          <source>Why you &lt;a href=&quot;structural-directives#the-asterisk--prefix&quot;&gt;prefix the directive name with an asterisk (*)&lt;/a&gt;.</source>
          <target state="translated">为什么&lt;a href=&quot;structural-directives#the-asterisk--prefix&quot;&gt;在指令名称前加上星号（*）&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="58c5b9f3361fe794e0551a73d476d4c73d87a3a4" translate="yes" xml:space="preserve">
          <source>Why you use it</source>
          <target state="translated">为什么使用它</target>
        </trans-unit>
        <trans-unit id="9ec4d86f6bc5dfade050672f98a8b077a3af7db8" translate="yes" xml:space="preserve">
          <source>Wide</source>
          <target state="translated">Wide</target>
        </trans-unit>
        <trans-unit id="b920e278db060d5132eb85b067e6489cd9df8c17" translate="yes" xml:space="preserve">
          <source>Wide (fallback to &lt;code&gt;&lt;a href=&quot;../router/routerlinkwithhref&quot;&gt;a&lt;/a&gt;&lt;/code&gt; when missing)</source>
          <target state="translated">宽（丢失时回退到 &lt;code&gt;&lt;a href=&quot;../router/routerlinkwithhref&quot;&gt;a&lt;/a&gt;&lt;/code&gt; ）</target>
        </trans-unit>
        <trans-unit id="be7eb77ab67a75bdfd5c6e1433e701036125c95c" translate="yes" xml:space="preserve">
          <source>Wide images can be a problem. Most browsers try to rescale the image but wide images may overflow the document in certain viewports.</source>
          <target state="translated">宽大的图像可能是一个问题。大多数浏览器会尝试重新调整图像的大小,但在某些视口中,宽大的图像可能会溢出文档。</target>
        </trans-unit>
        <trans-unit id="df15305cc141d8294713eba43aaee44d1edfe3bd" translate="yes" xml:space="preserve">
          <source>Widget</source>
          <target state="translated">Widget</target>
        </trans-unit>
        <trans-unit id="6059a174fbd7360217d1f1806783371e4f423161" translate="yes" xml:space="preserve">
          <source>Widget NgModules</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e5ea2dcd242e9e2f7f8046f8332e2e4f97aa61fc" translate="yes" xml:space="preserve">
          <source>Widget feature modules.</source>
          <target state="translated">小工具功能模块。</target>
        </trans-unit>
        <trans-unit id="4b22636bf684877a2ca0fddff96647d96827436c" translate="yes" xml:space="preserve">
          <source>Wild Cards</source>
          <target state="translated">野外牌</target>
        </trans-unit>
        <trans-unit id="e7838d3e850762e34afbc40f2627be6c7bd374b2" translate="yes" xml:space="preserve">
          <source>Wildcard state</source>
          <target state="translated">通配符状态</target>
        </trans-unit>
        <trans-unit id="019592ebc26ebe6bf40f0c3a3d02f90af2815eb4" translate="yes" xml:space="preserve">
          <source>Will be called for every request, so the token may change between requests.</source>
          <target state="translated">每一个请求都会被调用,所以token可能会在请求之间改变。</target>
        </trans-unit>
        <trans-unit id="26d9c28d789c254f71ea99a3463b99a7ccc2f4fa" translate="yes" xml:space="preserve">
          <source>Windows</source>
          <target state="translated">Windows</target>
        </trans-unit>
        <trans-unit id="0fdc144c92056ab7d5f102c3d50ea2cefa690d68" translate="yes" xml:space="preserve">
          <source>With &lt;a href=&quot;i18n#merge-aot&quot;&gt;AOT&lt;/a&gt;, you pass the information as configuration settings.</source>
          <target state="translated">使用&lt;a href=&quot;i18n#merge-aot&quot;&gt;AOT&lt;/a&gt;，您可以将信息作为配置设置进行传递。</target>
        </trans-unit>
        <trans-unit id="1d09f298abe9a7fc875ef158d461d408d20664a6" translate="yes" xml:space="preserve">
          <source>With &lt;a href=&quot;i18n#merge-jit&quot;&gt;JIT&lt;/a&gt;, you provide the information at bootstrap time.</source>
          <target state="translated">使用&lt;a href=&quot;i18n#merge-jit&quot;&gt;JIT&lt;/a&gt;，您可以在引导时提供信息。</target>
        </trans-unit>
        <trans-unit id="200c19c0c9f56cf91684c9502f9b1d3d09288928" translate="yes" xml:space="preserve">
          <source>With &lt;code&gt;*&lt;a href=&quot;api/common/ngforof&quot;&gt;ngFor&lt;/a&gt;&lt;/code&gt;, the &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; repeats for each product in the list.</source>
          <target state="translated">使用 &lt;code&gt;*&lt;a href=&quot;api/common/ngforof&quot;&gt;ngFor&lt;/a&gt;&lt;/code&gt; ，对于列表中的每个产品， &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; 重复。</target>
        </trans-unit>
        <trans-unit id="ede514d5069525070eaec694f407a46910806109" translate="yes" xml:space="preserve">
          <source>With &lt;code&gt;&lt;a href=&quot;../api/forms/ngform&quot;&gt;NgForm&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;itemForm&lt;/code&gt; is a reference to the &lt;a href=&quot;../api/forms/ngform&quot;&gt;NgForm&lt;/a&gt; directive with the ability to track the value and validity of every control in the form.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0ecc3b0f037e8e08430e46acd7c70c807c3b3ffb" translate="yes" xml:space="preserve">
          <source>With &lt;code&gt;&lt;a href=&quot;../api/upgrade/static/upgrademodule&quot;&gt;UpgradeModule&lt;/a&gt;&lt;/code&gt;, the two change detection systems are tied together more tightly. Whenever something happens in the AngularJS part of the app, change detection is automatically triggered on the Angular part and vice versa. This is convenient as it ensures that neither framework misses an important change. Most of the time, though, these extra change detection runs are unnecessary.</source>
          <target state="translated">使用 &lt;code&gt;&lt;a href=&quot;../api/upgrade/static/upgrademodule&quot;&gt;UpgradeModule&lt;/a&gt;&lt;/code&gt; ，两个变更检测系统可以更紧密地结合在一起。每当应用程序的AngularJS部分发生任何事情时，更改检测都会在Angular部分自动触发，反之亦然。这很方便，因为它可以确保两个框架都不会错过重要的更改。但是，在大多数情况下，这些额外的更改检测运行是不必要的。</target>
        </trans-unit>
        <trans-unit id="0ab2c912f60573267ca8c0c610d5904df837d8b8" translate="yes" xml:space="preserve">
          <source>With &lt;code&gt;@&lt;a href=&quot;../api/core/input&quot;&gt;Input&lt;/a&gt;()&lt;/code&gt;, Angular passes the value for &lt;code&gt;currentItem&lt;/code&gt; to the child so that &lt;code&gt;&lt;a href=&quot;../api/core/iterablechangerecord#item&quot;&gt;item&lt;/a&gt;&lt;/code&gt; renders as &lt;code&gt;Television&lt;/code&gt;.</source>
          <target state="translated">使用 &lt;code&gt;@&lt;a href=&quot;../api/core/input&quot;&gt;Input&lt;/a&gt;()&lt;/code&gt; ，Angular将 &lt;code&gt;currentItem&lt;/code&gt; 的值传递给子级，以便该 &lt;code&gt;&lt;a href=&quot;../api/core/iterablechangerecord#item&quot;&gt;item&lt;/a&gt;&lt;/code&gt; 呈现为 &lt;code&gt;Television&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="b21a2ef9baf43478ec5a0b30cbfdc6df0f9a348e" translate="yes" xml:space="preserve">
          <source>With &lt;code&gt;@&lt;a href=&quot;../api/core/input&quot;&gt;Input&lt;/a&gt;()&lt;/code&gt;, Angular passes the value for &lt;code&gt;currentItem&lt;/code&gt; to the child so that &lt;code&gt;item&lt;/code&gt; renders as &lt;code&gt;Television&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1571093943d515929c4d2ad37e20dc85fb0cb242" translate="yes" xml:space="preserve">
          <source>With &lt;code&gt;@&lt;a href=&quot;../api/core/skipself&quot;&gt;SkipSelf&lt;/a&gt;()&lt;/code&gt; in the &lt;code&gt;&amp;lt;app-child&amp;gt;&lt;/code&gt;, the injector begins its search for the &lt;code&gt;AnimalService&lt;/code&gt; in the &lt;code&gt;&amp;lt;app-root&amp;gt;&lt;/code&gt;&lt;code&gt;ElementInjector&lt;/code&gt; and finds 🐳 (whale).</source>
          <target state="translated">通过 &lt;code&gt;&amp;lt;app-child&amp;gt;&lt;/code&gt; 中的 &lt;code&gt;@&lt;a href=&quot;../api/core/skipself&quot;&gt;SkipSelf&lt;/a&gt;()&lt;/code&gt; ，注入器开始在 &lt;code&gt;&amp;lt;app-root&amp;gt;&lt;/code&gt; &lt;code&gt;ElementInjector&lt;/code&gt; 中搜索 &lt;code&gt;AnimalService&lt;/code&gt; ，并找到🐳（鲸鱼）。</target>
        </trans-unit>
        <trans-unit id="514263be0a675439b526ac2db882f2028e8a6caa" translate="yes" xml:space="preserve">
          <source>With &lt;code&gt;@&lt;a href=&quot;../api/core/skipself&quot;&gt;SkipSelf&lt;/a&gt;()&lt;/code&gt;, the &lt;code&gt;&amp;lt;app-child&amp;gt;&lt;/code&gt; injector doesn't look to itself for the &lt;code&gt;FlowerService&lt;/code&gt;. Instead, the injector starts looking for the &lt;code&gt;FlowerService&lt;/code&gt; at the &lt;code&gt;&amp;lt;app-root&amp;gt;&lt;/code&gt;'s &lt;code&gt;ElementInjector&lt;/code&gt;, where it finds nothing. Then, it goes back to the &lt;code&gt;&amp;lt;app-child&amp;gt;&lt;/code&gt;&lt;code&gt;ModuleInjector&lt;/code&gt; and finds the 🌺 (red hibiscus) value, which is available because the &lt;code&gt;&amp;lt;app-child&amp;gt;&lt;/code&gt;&lt;code&gt;ModuleInjector&lt;/code&gt; and the &lt;code&gt;&amp;lt;app-root&amp;gt;&lt;/code&gt;&lt;code&gt;ModuleInjector&lt;/code&gt; are flattened into one &lt;code&gt;ModuleInjector&lt;/code&gt;. Thus, the UI renders the following:</source>
          <target state="translated">使用 &lt;code&gt;@&lt;a href=&quot;../api/core/skipself&quot;&gt;SkipSelf&lt;/a&gt;()&lt;/code&gt; ， &lt;code&gt;&amp;lt;app-child&amp;gt;&lt;/code&gt; 注入器不会针对 &lt;code&gt;FlowerService&lt;/code&gt; 自身。相反，喷射器开始寻找 &lt;code&gt;FlowerService&lt;/code&gt; 在 &lt;code&gt;&amp;lt;app-root&amp;gt;&lt;/code&gt; 的 &lt;code&gt;ElementInjector&lt;/code&gt; ，在那里它发现什么。然后，它返回到 &lt;code&gt;&amp;lt;app-child&amp;gt;&lt;/code&gt; &lt;code&gt;ModuleInjector&lt;/code&gt; 并找到🌺（红芙蓉）值，这是可用的，因为 &lt;code&gt;&amp;lt;app-child&amp;gt;&lt;/code&gt; &lt;code&gt;ModuleInjector&lt;/code&gt; 和 &lt;code&gt;&amp;lt;app-root&amp;gt;&lt;/code&gt; &lt;code&gt;ModuleInjector&lt;/code&gt; 被展平为一个 &lt;code&gt;ModuleInjector&lt;/code&gt; 。因此，UI呈现以下内容：</target>
        </trans-unit>
        <trans-unit id="fb338d53ab27a026f259345ae4de8e033045fa9e" translate="yes" xml:space="preserve">
          <source>With &lt;code&gt;providedIn: 'any'&lt;/code&gt;, all eagerly loaded modules share a singleton instance; however, lazy loaded modules each get their own unique instance, as shown in the following diagram.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6aa81c5fc739583ab2d3afe1487e3a1975b85894" translate="yes" xml:space="preserve">
          <source>With &lt;code&gt;trackBy&lt;/code&gt;, only changing the &lt;code&gt;id&lt;/code&gt; triggers element replacement.</source>
          <target state="translated">使用 &lt;code&gt;trackBy&lt;/code&gt; 时，仅更改 &lt;code&gt;id&lt;/code&gt; 会触发元素替换。</target>
        </trans-unit>
        <trans-unit id="2b2022ad5e54a76cb4f206c08caf298b2a25eec7" translate="yes" xml:space="preserve">
          <source>With Angular Universal, you can generate landing pages for the app that look like the complete app. The pages are pure HTML, and can display even if JavaScript is disabled. The pages don't handle browser events, but they &lt;em&gt;do&lt;/em&gt; support navigation through the site using &lt;a href=&quot;router#router-link&quot;&gt;&lt;code&gt;routerLink&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">使用Angular Universal，您可以为应用程序生成看上去像整个应用程序的登录页面。这些页面是纯HTML，即使禁用了JavaScript也可以显示。这些页面不处理浏览器事件，但它们&lt;em&gt;确实&lt;/em&gt;支持使用&lt;a href=&quot;router#router-link&quot;&gt; &lt;code&gt;routerLink&lt;/code&gt; &lt;/a&gt;在站点中导航。</target>
        </trans-unit>
        <trans-unit id="9f8fe2ab51d493e8db841e87168ff2a0ac6f0c3e" translate="yes" xml:space="preserve">
          <source>With Angular version 8, the CLI Builder API is stable and available to developers who want to customize the Angular CLI by adding or modifying commands. For example, you could supply a builder to perform an entirely new task, or to change which third-party tool is used by an existing command.</source>
          <target state="translated">随着Angular版本8的发布,CLI生成器API已经稳定,可供那些想要通过添加或修改命令来定制Angular CLI的开发者使用。例如,你可以提供一个构建器来执行一个全新的任务,或者改变现有命令使用的第三方工具。</target>
        </trans-unit>
        <trans-unit id="c2a88e1a0148b4a6869805a7a6ac97dde9e0ff28" translate="yes" xml:space="preserve">
          <source>With CSS imports.</source>
          <target state="translated">随着CSS的导入。</target>
        </trans-unit>
        <trans-unit id="04ef0a6078a8aea6fbe95f9747112cfdcf3328a3" translate="yes" xml:space="preserve">
          <source>With a pure pipe, Angular ignores changes within composite objects, such as a newly added element of an existing array, because checking a primitive value or object reference is much faster than performing a deep check for differences within objects. Angular can quickly determine if it can skip executing the pipe and updating the view.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="28c19341986c17ccc8e81e83b8da588a7aa5dbaa" translate="yes" xml:space="preserve">
          <source>With any object-like expression&amp;mdash;such as &lt;code&gt;object&lt;/code&gt;, &lt;code&gt;Array&lt;/code&gt;, &lt;code&gt;Map&lt;/code&gt;, or &lt;code&gt;Set&lt;/code&gt;&amp;mdash;the identity of the object must change for Angular to update the class list. Updating the property without changing object identity has no effect.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bf0a79766c3bc1ba070745fe39181ae5fe7be150" translate="yes" xml:space="preserve">
          <source>With data-binding, you can control things like the state of a button:</source>
          <target state="translated">通过数据绑定,你可以控制诸如按钮的状态。</target>
        </trans-unit>
        <trans-unit id="ea72b360c242124f4790aba963e3f3a802795bd4" translate="yes" xml:space="preserve">
          <source>With interception, you declare &lt;em&gt;interceptors&lt;/em&gt; that inspect and transform HTTP requests from your application to a server. The same interceptors can also inspect and transform a server's responses on their way back to the application. Multiple interceptors form a &lt;em&gt;forward-and-backward&lt;/em&gt; chain of request/response handlers.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a3e8732f285a06169348c283028ee3640fff4b7a" translate="yes" xml:space="preserve">
          <source>With its &lt;code&gt;getAds()&lt;/code&gt; method, &lt;code&gt;AdBannerComponent&lt;/code&gt; cycles through the array of &lt;code&gt;AdItems&lt;/code&gt; and loads a new component every 3 seconds by calling &lt;code&gt;loadComponent()&lt;/code&gt;.</source>
          <target state="translated">凭借其 &lt;code&gt;getAds()&lt;/code&gt; 方法， &lt;code&gt;AdBannerComponent&lt;/code&gt; 通过阵列周期 &lt;code&gt;AdItems&lt;/code&gt; 和负载的新组件每3秒通过调用 &lt;code&gt;loadComponent()&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="6ceb2407ccef6b0bf3e482eb7d304bbdcd717820" translate="yes" xml:space="preserve">
          <source>With no &lt;code&gt;trackBy&lt;/code&gt;, both buttons trigger complete DOM element replacement.</source>
          <target state="translated">如果没有 &lt;code&gt;trackBy&lt;/code&gt; ，则两个按钮都将触发完整的DOM元素替换。</target>
        </trans-unit>
        <trans-unit id="79ef6a65be0e36c1f90e385b3612665ea585aa49" translate="yes" xml:space="preserve">
          <source>With reactive forms, set the property in the &lt;code&gt;&lt;a href=&quot;../api/forms/formcontrol&quot;&gt;FormControl&lt;/a&gt;&lt;/code&gt; instance.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="536e3572a460f32cd6bdb3410223e623acf76f40" translate="yes" xml:space="preserve">
          <source>With reactive forms, the &lt;strong&gt;&lt;code&gt;&lt;a href=&quot;../api/forms/formcontrol&quot;&gt;FormControl&lt;/a&gt;&lt;/code&gt; instance&lt;/strong&gt; always returns a new value when the control's value is updated.</source>
          <target state="translated">对于反应形式，当控件的值更新时，&lt;strong&gt; &lt;code&gt;&lt;a href=&quot;../api/forms/formcontrol&quot;&gt;FormControl&lt;/a&gt;&lt;/code&gt; 实例&lt;/strong&gt;始终返回新值。</target>
        </trans-unit>
        <trans-unit id="5e2c684a98820d22704c39326e7146086ace1878" translate="yes" xml:space="preserve">
          <source>With reactive forms, the form model is explicitly defined in the component class. The reactive form directive (in this case, &lt;code&gt;&lt;a href=&quot;../api/forms/formcontroldirective&quot;&gt;FormControlDirective&lt;/a&gt;&lt;/code&gt;) then links the existing &lt;code&gt;&lt;a href=&quot;../api/forms/formcontrol&quot;&gt;FormControl&lt;/a&gt;&lt;/code&gt; instance to a specific form element in the view using a value accessor (&lt;code&gt;&lt;a href=&quot;../api/forms/controlvalueaccessor&quot;&gt;ControlValueAccessor&lt;/a&gt;&lt;/code&gt; instance).</source>
          <target state="translated">对于反应形式，表单模型是在组件类中明确定义的。然后，反应式表单指令（在本例中为 &lt;code&gt;&lt;a href=&quot;../api/forms/formcontroldirective&quot;&gt;FormControlDirective&lt;/a&gt;&lt;/code&gt; ）使用值访问器（ &lt;code&gt;&lt;a href=&quot;../api/forms/controlvalueaccessor&quot;&gt;ControlValueAccessor&lt;/a&gt;&lt;/code&gt; 实例）将现有 &lt;code&gt;&lt;a href=&quot;../api/forms/formcontrol&quot;&gt;FormControl&lt;/a&gt;&lt;/code&gt; 实例链接到视图中的特定表单元素。</target>
        </trans-unit>
        <trans-unit id="97cec0a9ecc4f71051165d4067c1a202dd87fd6b" translate="yes" xml:space="preserve">
          <source>With reactive forms, you define the form model directly in the component class. The &lt;code&gt;[formControl]&lt;/code&gt; directive links the explicitly created &lt;code&gt;&lt;a href=&quot;../api/forms/formcontrol&quot;&gt;FormControl&lt;/a&gt;&lt;/code&gt; instance to a specific form element in the view, using an internal value accessor.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2d05e69e43f92be76d996dab286009e2290f7866" translate="yes" xml:space="preserve">
          <source>With reactive forms:</source>
          <target state="translated">与反应形式。</target>
        </trans-unit>
        <trans-unit id="37d58d7c1f47e889b4dc2776053c30fac3a08f9a" translate="yes" xml:space="preserve">
          <source>With special Angular syntax in your templates, you can extend the HTML vocabulary of your apps. For example, Angular helps you get and set DOM (Document Object Model) values dynamically with features such as built-in template functions, variables, event listening, and data binding.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="702e65afd28c65f60593357a4ee2316aa7e23b85" translate="yes" xml:space="preserve">
          <source>With structural directives, such as &lt;code&gt;*&lt;a href=&quot;../api/common/ngforof&quot;&gt;ngFor&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;*&lt;a href=&quot;../api/common/ngif&quot;&gt;ngIf&lt;/a&gt;&lt;/code&gt;, there is no way for Angular to know if a template is ever instantiated.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d0daff6f8a2fee3b6ac59882c4f8ae95cb2c91b5" translate="yes" xml:space="preserve">
          <source>With template-driven forms, set the property in the template.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="019eb643284aded107e069dd6344db97a92357fe" translate="yes" xml:space="preserve">
          <source>With template-driven forms, the &lt;strong&gt;favorite color property&lt;/strong&gt; is always modified to its new value.</source>
          <target state="translated">使用模板驱动的表单，&lt;strong&gt;收藏夹颜色属性&lt;/strong&gt;始终会修改为其新值。</target>
        </trans-unit>
        <trans-unit id="19e073dfecca90c0a9f77a20bb44682814b67a82" translate="yes" xml:space="preserve">
          <source>With template-driven forms:</source>
          <target state="translated">具有模板驱动的形式。</target>
        </trans-unit>
        <trans-unit id="be8d82817001ae7961e2f4110b21a1426c5b5835" translate="yes" xml:space="preserve">
          <source>With that concern in mind, implement an impure pipe with great care. An expensive, long-running pipe could destroy the user experience.</source>
          <target state="translated">考虑到这一点,要非常谨慎地实施不纯管道。一个昂贵的、长期运行的管道可能会破坏用户体验。</target>
        </trans-unit>
        <trans-unit id="08f5cfc92b9e57c5269817cc98d1f5ea4a41a524" translate="yes" xml:space="preserve">
          <source>With the &lt;a href=&quot;http://www.learnrxjs.io/operators/transformation/switchmap.html&quot;&gt;switchMap operator&lt;/a&gt;, every qualifying key event can trigger an &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclient#get&quot;&gt;HttpClient.get()&lt;/a&gt;&lt;/code&gt; method call. Even with a 300ms pause between requests, you could have multiple HTTP requests in flight and they may not return in the order sent.</source>
          <target state="translated">使用&lt;a href=&quot;http://www.learnrxjs.io/operators/transformation/switchmap.html&quot;&gt;switchMap运算符&lt;/a&gt;，每个合格的键事件都可以触发 &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclient#get&quot;&gt;HttpClient.get()&lt;/a&gt;&lt;/code&gt; 方法调用。即使请求之间有300ms的暂停，您可能仍在运行多个HTTP请求，并且它们可能不会按发送顺序返回。</target>
        </trans-unit>
        <trans-unit id="2352f11932b7bff23ba7057bd735b9f485a4af13" translate="yes" xml:space="preserve">
          <source>With the &lt;code&gt;ngUpgrade&lt;/code&gt; library in Angular you can upgrade an existing AngularJS app incrementally by building a hybrid app where you can run both frameworks side-by-side. In these hybrid apps you can mix and match AngularJS and Angular components and services and have them interoperate seamlessly. That means you don't have to do the upgrade work all at once as there is a natural coexistence between the two frameworks during the transition period.</source>
          <target state="translated">使用Angular中的 &lt;code&gt;ngUpgrade&lt;/code&gt; 库，您可以通过构建可同时运行两个框架的混合应用程序来增量升级现有的AngularJS应用程序。在这些混合应用程序中，您可以混合并匹配AngularJS和Angular组件和服务，并使它们无缝互操作。这意味着您不必一次完成升级工作，因为过渡期间两个框架之间自然而然地共存。</target>
        </trans-unit>
        <trans-unit id="e49fed6a774119cf64d353ad3c70df3051c5887f" translate="yes" xml:space="preserve">
          <source>With the &lt;code&gt;value&lt;/code&gt; property, which gives you a snapshot of the current value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="074ab19623556f09735ac122589456a92b46c9ef" translate="yes" xml:space="preserve">
          <source>With the &lt;code&gt;value&lt;/code&gt; property. which gives you a snapshot of the current value.</source>
          <target state="translated">具有 &lt;code&gt;value&lt;/code&gt; 属性。给您当前值的快照。</target>
        </trans-unit>
        <trans-unit id="c3e2859d149c00a8c70f651753088ada705938fd" translate="yes" xml:space="preserve">
          <source>With the Angular CLI, you can configure your global styles in the &lt;code&gt;angular.json&lt;/code&gt; file. You can rename the extension to &lt;code&gt;.scss&lt;/code&gt; to use sass.</source>
          <target state="translated">使用Angular CLI，您可以在 &lt;code&gt;angular.json&lt;/code&gt; 文件中配置全局样式。您可以将扩展名重命名为 &lt;code&gt;.scss&lt;/code&gt; 以使用sass。</target>
        </trans-unit>
        <trans-unit id="4cc1b5658039f71e373c05a8c2d298408717f4a9" translate="yes" xml:space="preserve">
          <source>With the addition of an Angular service worker, the application behavior changes. On a refresh, the page loads normally.</source>
          <target state="translated">增加了一个Angular服务工作者后,应用程序的行为发生了变化。在刷新时,页面加载正常。</target>
        </trans-unit>
        <trans-unit id="1ed3fd9bd4c1f256dcc104023a64d45285ef0146" translate="yes" xml:space="preserve">
          <source>With the following code:</source>
          <target state="translated">用以下代码:</target>
        </trans-unit>
        <trans-unit id="e4ba2bf51920e50ddd76d0b8ce235609e5ca3f00" translate="yes" xml:space="preserve">
          <source>With the redirects setup, all previous routes now point to their new destinations and both URLs still function as intended.</source>
          <target state="translated">在设置了重定向之后,所有之前的路由现在都指向了新的目的地,而且两个URL仍然可以正常使用。</target>
        </trans-unit>
        <trans-unit id="7b7e14ba85f043cc2153d669ef641d59ce2ba6dc" translate="yes" xml:space="preserve">
          <source>With the safe navigation operator, &lt;code&gt;?&lt;/code&gt;, Angular stops evaluating the expression when it hits the first &lt;code&gt;null&lt;/code&gt; value and renders the view without errors.</source>
          <target state="translated">随着安全导航操作， &lt;code&gt;?&lt;/code&gt; ，当Angular表达式到达第一个 &lt;code&gt;null&lt;/code&gt; 值并呈现视图而没有错误时，它将停止对表达式的求值。</target>
        </trans-unit>
        <trans-unit id="e6501ec771a7fc4bae077d3c02ffac0e8b32870f" translate="yes" xml:space="preserve">
          <source>With the server running, you can point your browser at &lt;a href=&quot;http://localhost:8080/&quot;&gt;http://localhost:8080/&lt;/a&gt;. Your application should load normally.</source>
          <target state="translated">在服务器运行的情况下，您可以将浏览器指向&lt;a href=&quot;http://localhost:8080/&quot;&gt;http：// localhost：8080 /&lt;/a&gt;。您的应用程序应正常加载。</target>
        </trans-unit>
        <trans-unit id="8fe7cf705023fd1c89ebb3c647e04c69d1bb4ec3" translate="yes" xml:space="preserve">
          <source>With the versioning behavior of the Angular service worker, an application server can ensure that the Angular app always has a consistent set of files.</source>
          <target state="translated">通过Angular服务工作者的版本行为,应用服务器可以确保Angular应用始终拥有一套一致的文件。</target>
        </trans-unit>
        <trans-unit id="7bb71e2cbafb7fa82e357e6678fde6dcf2a3a792" translate="yes" xml:space="preserve">
          <source>With this configuration, the view of &lt;code&gt;&amp;lt;app-item-detail&amp;gt;&lt;/code&gt; uses the value of &lt;code&gt;lamp&lt;/code&gt; for &lt;code&gt;childItem&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2849f0172ab7aa7e6a7d8293fb4ce2777526ea4a" translate="yes" xml:space="preserve">
          <source>With this content:</source>
          <target state="translated">有了这些内容。</target>
        </trans-unit>
        <trans-unit id="b8b31dcf9cc7c0459f402b08f8978242705682a6" translate="yes" xml:space="preserve">
          <source>With this example, the following actions occur:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="089eb5172d3965ed3cdbcf88655204f69aa78b7a" translate="yes" xml:space="preserve">
          <source>WithProperties</source>
          <target state="translated">WithProperties</target>
        </trans-unit>
        <trans-unit id="9bda55462ad09ef63ca623f6eb47fb05236ec79c" translate="yes" xml:space="preserve">
          <source>Within a switch container, &lt;code&gt;*&lt;a href=&quot;ngswitchcase&quot;&gt;ngSwitchCase&lt;/a&gt;&lt;/code&gt; statements specify the match expressions as attributes. Include &lt;code&gt;*&lt;a href=&quot;ngswitchdefault&quot;&gt;ngSwitchDefault&lt;/a&gt;&lt;/code&gt; as the final case.</source>
          <target state="translated">在开关容器中， &lt;code&gt;*&lt;a href=&quot;ngswitchcase&quot;&gt;ngSwitchCase&lt;/a&gt;&lt;/code&gt; 语句将匹配表达式指定为属性。包括 &lt;code&gt;*&lt;a href=&quot;ngswitchdefault&quot;&gt;ngSwitchDefault&lt;/a&gt;&lt;/code&gt; 作为最后一种情况。</target>
        </trans-unit>
        <trans-unit id="5e7fc2910f937115866b1508ba85cfd25173fbfe" translate="yes" xml:space="preserve">
          <source>Within such a factory function, using this function to request injection of a dependency is faster and more type-safe than providing an additional array of dependencies (as has been common with &lt;code&gt;&lt;a href=&quot;factorysansprovider#useFactory&quot;&gt;useFactory&lt;/a&gt;&lt;/code&gt; providers).</source>
          <target state="translated">在这种工厂功能中，使用此功能来请求注入依赖项比提供附加的依赖项数组（在 &lt;code&gt;&lt;a href=&quot;factorysansprovider#useFactory&quot;&gt;useFactory&lt;/a&gt;&lt;/code&gt; 提供程序中很常见）要快得多，并且类型安全性更高。</target>
        </trans-unit>
        <trans-unit id="22803a3b39417d3e155ecdc540584686725394b8" translate="yes" xml:space="preserve">
          <source>Within the &lt;code&gt;&lt;a href=&quot;../api/forms/formbuilder#group&quot;&gt;group()&lt;/a&gt;&lt;/code&gt; function:</source>
          <target state="translated">在 &lt;code&gt;&lt;a href=&quot;../api/forms/formbuilder#group&quot;&gt;group()&lt;/a&gt;&lt;/code&gt; 函数中：</target>
        </trans-unit>
        <trans-unit id="5bfefa8920f5ed2b5462ebc174898aa7207d9f5f" translate="yes" xml:space="preserve">
          <source>Within the &lt;code&gt;group()&lt;/code&gt; function:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7d1d21894554520cbe70ca3161889946066e8693" translate="yes" xml:space="preserve">
          <source>Within the container, &lt;code&gt;*&lt;a href=&quot;ngswitchcase&quot;&gt;ngSwitchCase&lt;/a&gt;&lt;/code&gt; statements specify the match expressions as attributes. Include &lt;code&gt;*&lt;a href=&quot;ngswitchdefault&quot;&gt;ngSwitchDefault&lt;/a&gt;&lt;/code&gt; as the final case.</source>
          <target state="translated">在容器内， &lt;code&gt;*&lt;a href=&quot;ngswitchcase&quot;&gt;ngSwitchCase&lt;/a&gt;&lt;/code&gt; 语句将匹配表达式指定为属性。包括 &lt;code&gt;*&lt;a href=&quot;ngswitchdefault&quot;&gt;ngSwitchDefault&lt;/a&gt;&lt;/code&gt; 作为最后一种情况。</target>
        </trans-unit>
        <trans-unit id="a7276b58b727c6c410427f99bc15652f439a152d" translate="yes" xml:space="preserve">
          <source>Without &lt;code&gt;&lt;a href=&quot;../api/common/ngstyle&quot;&gt;NgStyle&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">没有 &lt;code&gt;&lt;a href=&quot;../api/common/ngstyle&quot;&gt;NgStyle&lt;/a&gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="7fcf4d2f6736413b0fdde7ba35c562ec2b3ed296" translate="yes" xml:space="preserve">
          <source>Without a framework, you would be responsible for pushing data values into the HTML controls and turning user responses into actions and value updates. Writing such push and pull logic by hand is tedious, error-prone, and a nightmare to read, as any experienced front-end JavaScript programmer can attest.</source>
          <target state="translated">如果没有框架,您将负责将数据值推送到HTML控件中,并将用户响应转化为动作和值更新。手工编写这样的推拉逻辑是很乏味的,容易出错,而且是阅读的噩梦,任何有经验的前端JavaScript程序员都可以证明这一点。</target>
        </trans-unit>
        <trans-unit id="43acf4885e6d5e8186042e70023c71257f30d8b8" translate="yes" xml:space="preserve">
          <source>Without animations, web page transitions can seem abrupt and jarring.</source>
          <target state="translated">如果没有动画,网页的过渡会显得很突兀和刺眼。</target>
        </trans-unit>
        <trans-unit id="3cb1b66992897f9d72d43a66457c712e7332958e" translate="yes" xml:space="preserve">
          <source>Without interception, developers would have to implement these tasks &lt;em&gt;explicitly&lt;/em&gt; for each &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclient&quot;&gt;HttpClient&lt;/a&gt;&lt;/code&gt; method call.</source>
          <target state="translated">如果没有拦截，开发人员将必须为每个 &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclient&quot;&gt;HttpClient&lt;/a&gt;&lt;/code&gt; 方法调用&lt;em&gt;显式&lt;/em&gt;实现这些任务。</target>
        </trans-unit>
        <trans-unit id="d8159db5355a8ad440e87c125107146e2f6c4bc2" translate="yes" xml:space="preserve">
          <source>Without rewriting, this would be invalid because lambdas are not supported and &lt;code&gt;TypicalServer&lt;/code&gt; is not exported. To allow this, the compiler automatically rewrites this to something like:</source>
          <target state="translated">如果不重写，这将是无效的，因为不支持lambda，并且不会导出 &lt;code&gt;TypicalServer&lt;/code&gt; 。为此，编译器会自动将其重写为如下形式：</target>
        </trans-unit>
        <trans-unit id="2e3ffa4d3a6e4aed13f90e17c4b731f4eab7541d" translate="yes" xml:space="preserve">
          <source>Without that tag, the browser may not be able to load resources (images, CSS, scripts) when &quot;deep linking&quot; into the app.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1929ccbff6f54303435c9d6a6e88229d090523b4" translate="yes" xml:space="preserve">
          <source>Without that tag, the browser may not be able to load resources (images, CSS, scripts) when &quot;deep linking&quot; into the app. Bad things could happen when someone pastes an application link into the browser's address bar or clicks such a link in an email.</source>
          <target state="translated">如果没有这个标签,当 &quot;深度链接 &quot;到应用程序时,浏览器可能无法加载资源(图像、CSS、脚本)。当有人将应用链接粘贴到浏览器的地址栏或点击电子邮件中的此类链接时,可能会发生不好的事情。</target>
        </trans-unit>
        <trans-unit id="4c1228232946e2951f5383bc12ebcef8a71981bd" translate="yes" xml:space="preserve">
          <source>Without the &lt;code&gt;&lt;a href=&quot;../api/forms/ngform&quot;&gt;ngForm&lt;/a&gt;&lt;/code&gt; attribute value, the reference value of &lt;code&gt;itemForm&lt;/code&gt; would be the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/HTMLFormElement&quot;&gt;HTMLFormElement&lt;/a&gt;, &lt;code&gt;&amp;lt;form&amp;gt;&lt;/code&gt;. There is, however, a difference between a &lt;code&gt;&lt;a href=&quot;../api/core/component&quot;&gt;Component&lt;/a&gt;&lt;/code&gt; and a &lt;code&gt;&lt;a href=&quot;../api/core/directive&quot;&gt;Directive&lt;/a&gt;&lt;/code&gt; in that Angular references a &lt;code&gt;&lt;a href=&quot;../api/core/component&quot;&gt;Component&lt;/a&gt;&lt;/code&gt; without specifying the attribute value, and a &lt;code&gt;&lt;a href=&quot;../api/core/directive&quot;&gt;Directive&lt;/a&gt;&lt;/code&gt; does not change the implicit reference, or the element.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="010c5880bd6415296c88290b8d4aadcb9cfb803c" translate="yes" xml:space="preserve">
          <source>Without those braces, JavaScript would only execute the first statement when you intend to conditionally execute all of them as a single block. The &lt;code&gt;&amp;lt;ng-container&amp;gt;&lt;/code&gt; satisfies a similar need in Angular templates.</source>
          <target state="translated">没有这些花括号，JavaScript仅在您打算有条件地将它们全部作为一个块执行时才执行第一条语句。所述 &lt;code&gt;&amp;lt;ng-container&amp;gt;&lt;/code&gt; 满足在角模板类似的需要。</target>
        </trans-unit>
        <trans-unit id="aadc0ad5cc4c5793a614ff5b3c7e25171fbbb440" translate="yes" xml:space="preserve">
          <source>Work through the &lt;a href=&quot;tutorial&quot;&gt;Tour of Heroes Tutorial&lt;/a&gt;, a complete hands-on exercise that introduces you to the app development process using the Angular CLI and walks through important subsystems.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6e222b598a7d48d0d0b644e8596e4232c84210cd" translate="yes" xml:space="preserve">
          <source>Work through the &lt;a href=&quot;tutorial&quot;&gt;Tour of Heroes&lt;/a&gt; tutorial to get a feel for how to fit the basic building blocks together to create a well-designed application.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aadd3af5807af48641989be57a49f65d1e8f1577" translate="yes" xml:space="preserve">
          <source>Work with translation files</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="76958a0cd41a3ca4e5779435c35a550beb1958a9" translate="yes" xml:space="preserve">
          <source>WorkerAppModule</source>
          <target state="translated">WorkerAppModule</target>
        </trans-unit>
        <trans-unit id="d7a484140f5f9f7f5427e1f2c44dbfc1d3ad9eea" translate="yes" xml:space="preserve">
          <source>Workflow</source>
          <target state="translated">Workflow</target>
        </trans-unit>
        <trans-unit id="01b0947f98451f2111dec9ae4e4392144c3513b4" translate="yes" xml:space="preserve">
          <source>Working around the browser APIs</source>
          <target state="translated">围绕浏览器的API工作</target>
        </trans-unit>
        <trans-unit id="2eb34458f36c3030ba79d7147278dcb7f42f56ba" translate="yes" xml:space="preserve">
          <source>Working on an implementation.</source>
          <target state="translated">正在开展执行工作。</target>
        </trans-unit>
        <trans-unit id="d6da71aec46b15c632d7d6fb6b59018bb75a210a" translate="yes" xml:space="preserve">
          <source>Working with components</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7167bf283c330d509f13471db85b942b02d9c51f" translate="yes" xml:space="preserve">
          <source>Working with templates</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6268699d3bbeb1ad3dd8fe27d8c8cd586c39fb67" translate="yes" xml:space="preserve">
          <source>Workspace and project configuration</source>
          <target state="translated">工作空间和项目配置</target>
        </trans-unit>
        <trans-unit id="753540644098b968997d9756ca9f709602fc348a" translate="yes" xml:space="preserve">
          <source>Workspace and project file structure</source>
          <target state="translated">工作区和项目文件结构</target>
        </trans-unit>
        <trans-unit id="c352c45f9dfd8d810dc06724fc085c520f1ecafa" translate="yes" xml:space="preserve">
          <source>Workspace configuration files</source>
          <target state="translated">工作区配置文件</target>
        </trans-unit>
        <trans-unit id="85aa6b445eca0c0cf6c798a83ec5dedaa7b66a19" translate="yes" xml:space="preserve">
          <source>Workspace npm dependencies</source>
          <target state="translated">工作区npm依赖性</target>
        </trans-unit>
        <trans-unit id="5a0d418778672b7618a4ff2f76ab69dd1900780f" translate="yes" xml:space="preserve">
          <source>Workspaces and project files</source>
          <target state="translated">工作空间和项目文件</target>
        </trans-unit>
        <trans-unit id="271c9d6d538b3bca13093c6cf8b704359cdcd783" translate="yes" xml:space="preserve">
          <source>Wrap the entire form in a &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; and bind its &lt;code&gt;hidden&lt;/code&gt; property to the &lt;code&gt;HeroFormComponent.submitted&lt;/code&gt; property.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c4758386676c54543b72740b050edd6b5164b8d6" translate="yes" xml:space="preserve">
          <source>Wrap the form in a &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; and bind its &lt;code&gt;hidden&lt;/code&gt; property to the &lt;code&gt;HeroFormComponent.submitted&lt;/code&gt; property.</source>
          <target state="translated">将表单包装在 &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; 中,并将其 &lt;code&gt;hidden&lt;/code&gt; 属性绑定到 &lt;code&gt;HeroFormComponent.submitted&lt;/code&gt; 属性。</target>
        </trans-unit>
        <trans-unit id="16d56174bd7b0125fea2dcc2c06879628dc61f7b" translate="yes" xml:space="preserve">
          <source>Wrap the hero detail HTML in a &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt;. Add Angular's &lt;code&gt;*&lt;a href=&quot;../api/common/ngif&quot;&gt;ngIf&lt;/a&gt;&lt;/code&gt; directive to the &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; and set it to &lt;code&gt;selectedHero&lt;/code&gt;.</source>
          <target state="translated">将英雄详细信息HTML包装在 &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; 中。将Angular的 &lt;code&gt;*&lt;a href=&quot;../api/common/ngif&quot;&gt;ngIf&lt;/a&gt;&lt;/code&gt; 指令添加到 &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; 并将其设置为 &lt;code&gt;selectedHero&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="80af69bfe43ca69dcb3f2fb2aa59e64fa426c886" translate="yes" xml:space="preserve">
          <source>Wrap up and final app</source>
          <target state="translated">总结和最后的应用程序</target>
        </trans-unit>
        <trans-unit id="27cf5d4683d47a0de40a3f27346a5f855469b310" translate="yes" xml:space="preserve">
          <source>Wrapped values are unwrapped automatically during the change detection, and the unwrapped value is stored.</source>
          <target state="translated">包裹值在变化检测过程中会自动解包,解包后的值会被存储。</target>
        </trans-unit>
        <trans-unit id="b618e5b1103fc5a7e8d976cd3a42fcb09070c8d7" translate="yes" xml:space="preserve">
          <source>WrappedValue</source>
          <target state="translated">WrappedValue</target>
        </trans-unit>
        <trans-unit id="57b9cb2cebc443cd6088f1e833e85368057ca6eb" translate="yes" xml:space="preserve">
          <source>Wraps a function to be executed in the fakeAsync zone:</source>
          <target state="translated">封装一个要在 fakeAsync 区域执行的函数。</target>
        </trans-unit>
        <trans-unit id="22a50d995cd4156654361cd37c38f681e8d33b3b" translate="yes" xml:space="preserve">
          <source>Wraps a test function in an asynchronous test zone. The test will automatically complete when all asynchronous calls within this zone are done. Can be used to wrap an &lt;a href=&quot;inject&quot;&gt;&lt;code&gt;inject&lt;/code&gt;&lt;/a&gt; call.</source>
          <target state="translated">在异步测试区域中包装测试功能。完成该区域内的所有异步调用后，测试将自动完成。可用于包装&lt;a href=&quot;inject&quot;&gt; &lt;code&gt;inject&lt;/code&gt; &lt;/a&gt;调用。</target>
        </trans-unit>
        <trans-unit id="100b402dceaf296612af0eb5e4e6515e25039258" translate="yes" xml:space="preserve">
          <source>Wraps a test function in an asynchronous test zone. The test will automatically complete when all asynchronous calls within this zone are done. Can be used to wrap an &lt;a href=&quot;testing/inject&quot;&gt;&lt;code&gt;inject&lt;/code&gt;&lt;/a&gt; call.</source>
          <target state="translated">在异步测试区域中包装测试功能。完成该区域内的所有异步调用后，测试将自动完成。可用于包装&lt;a href=&quot;testing/inject&quot;&gt; &lt;code&gt;inject&lt;/code&gt; &lt;/a&gt;调用。</target>
        </trans-unit>
        <trans-unit id="ea8f25d1acfd326e0dad7d7c32fcc318bdf66542" translate="yes" xml:space="preserve">
          <source>Write DOM tests too</source>
          <target state="translated">也写DOM测试</target>
        </trans-unit>
        <trans-unit id="bbb1518b0ffd4a7ea062b980c53ed31798fec5f2" translate="yes" xml:space="preserve">
          <source>Write a &lt;code&gt;canActivate()&lt;/code&gt; guard method to redirect anonymous users to the login page when they try to enter the admin area.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a20cce9d728aa06f528fda67055ff0c86a09b2b3" translate="yes" xml:space="preserve">
          <source>Write a harness to try it</source>
          <target state="translated">写个线束试试</target>
        </trans-unit>
        <trans-unit id="a8d0c494c88477774037634897be250615132ba0" translate="yes" xml:space="preserve">
          <source>Write a second component that &lt;em&gt;binds&lt;/em&gt; the pipe's format parameter to the component's &lt;code&gt;format&lt;/code&gt; property. Here's the template for that component:</source>
          <target state="translated">编写另一个组件，该组件&lt;em&gt;将&lt;/em&gt;管道的format参数&lt;em&gt;绑定&lt;/em&gt;到该组件的 &lt;code&gt;format&lt;/code&gt; 属性。这是该组件的模板：</target>
        </trans-unit>
        <trans-unit id="c475564c93474169eccff5a8c6fbbae81a32d868" translate="yes" xml:space="preserve">
          <source>Write a structural directive</source>
          <target state="translated">写一个结构指令</target>
        </trans-unit>
        <trans-unit id="0b5b915cb79464c96b638b4b04076ae4512fcc2b" translate="yes" xml:space="preserve">
          <source>Write a value to the element</source>
          <target state="translated">写一个值给元素</target>
        </trans-unit>
        <trans-unit id="50ab6e47b6478470b9f03185206a16d9f0dcd98d" translate="yes" xml:space="preserve">
          <source>Write an &lt;a href=&quot;dependency-injection-in-action#useexisting&quot;&gt;&lt;em&gt;alias provider&lt;/em&gt;&lt;/a&gt;&amp;mdash;a &lt;code&gt;provide&lt;/code&gt; object literal with a &lt;code&gt;&lt;a href=&quot;../api/core/existingsansprovider#useExisting&quot;&gt;useExisting&lt;/a&gt;&lt;/code&gt; definition&amp;mdash;that creates an &lt;em&gt;alternative&lt;/em&gt; way to inject the same component instance and add that provider to the &lt;code&gt;providers&lt;/code&gt; array of the &lt;code&gt;@&lt;a href=&quot;../api/core/component&quot;&gt;Component&lt;/a&gt;()&lt;/code&gt; metadata for the &lt;code&gt;AlexComponent&lt;/code&gt;.</source>
          <target state="translated">编写一个&lt;a href=&quot;dependency-injection-in-action#useexisting&quot;&gt;&lt;em&gt;别名提供程序（&lt;/em&gt;&lt;/a&gt;一种使用 &lt;code&gt;&lt;a href=&quot;../api/core/existingsansprovider#useExisting&quot;&gt;useExisting&lt;/a&gt;&lt;/code&gt; 定义的 &lt;code&gt;provide&lt;/code&gt; 对象文字），它创建一种&lt;em&gt;替代&lt;/em&gt;方法来注入相同的组件实例，并将该提供程序添加到 &lt;code&gt;AlexComponent&lt;/code&gt; 的 &lt;code&gt;@&lt;a href=&quot;../api/core/component&quot;&gt;Component&lt;/a&gt;()&lt;/code&gt; &lt;a href=&quot;../api/core/component&quot;&gt;Component&lt;/a&gt;（）元数据的 &lt;code&gt;providers&lt;/code&gt; 数组中。&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="f03d8a78e9142ec11fa984d17b5bba0431278bdc" translate="yes" xml:space="preserve">
          <source>Write an interceptor</source>
          <target state="translated">编写一个拦截器</target>
        </trans-unit>
        <trans-unit id="5104c2e3791c124e2d7f0aee44b134ee5d40b302" translate="yes" xml:space="preserve">
          <source>Write lean hook methods to avoid performance problems</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="11f4e18a688e5fb137dcbb0b8fc5b283a82a6f5a" translate="yes" xml:space="preserve">
          <source>Write one more impure pipe, a pipe that makes an HTTP request.</source>
          <target state="translated">再写一个不纯的管道,一个进行HTTP请求的管道。</target>
        </trans-unit>
        <trans-unit id="98d4c2f5112b9165b3d77fe1bbc4810bdb11e157" translate="yes" xml:space="preserve">
          <source>Write the directive code</source>
          <target state="translated">编写指令代码</target>
        </trans-unit>
        <trans-unit id="328305f528e33187a05ed913c4cdfd6835ff639a" translate="yes" xml:space="preserve">
          <source>Write the first async &lt;code&gt;beforeEach&lt;/code&gt; like this.</source>
          <target state="translated">写第一异步 &lt;code&gt;beforeEach&lt;/code&gt; 这样。</target>
        </trans-unit>
        <trans-unit id="4a8c5b07a378d0e9997a7ab9a6bc9d3eb9fe12c2" translate="yes" xml:space="preserve">
          <source>Write the template</source>
          <target state="translated">编写模板</target>
        </trans-unit>
        <trans-unit id="3460c1b32f74351fdabb7b72f175001fb3641df8" translate="yes" xml:space="preserve">
          <source>Write-Only</source>
          <target state="translated">Write-Only</target>
        </trans-unit>
        <trans-unit id="db8bc67982568e392f688d4f65b76786016e30fa" translate="yes" xml:space="preserve">
          <source>Writes a new value to the element.</source>
          <target state="translated">向元素写入一个新的值。</target>
        </trans-unit>
        <trans-unit id="a0212190c31c9111ccc96747fc494e7786d20b68" translate="yes" xml:space="preserve">
          <source>Writing DOM tests to support a pipe test</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a2cee97467095242641dce6e6e2e22f7a3d2d50a" translate="yes" xml:space="preserve">
          <source>Writing test functions with &lt;code&gt;&lt;a href=&quot;../api/core/applicationinitstatus#done&quot;&gt;done&lt;/a&gt;()&lt;/code&gt;, is more cumbersome than &lt;code&gt;&lt;a href=&quot;../api/core/testing/async&quot;&gt;async&lt;/a&gt;()&lt;/code&gt;and &lt;code&gt;&lt;a href=&quot;../api/core/testing/fakeasync&quot;&gt;fakeAsync&lt;/a&gt;()&lt;/code&gt;, but it is occasionally necessary when code involves the &lt;code&gt;intervalTimer()&lt;/code&gt; like &lt;code&gt;setInterval&lt;/code&gt;.</source>
          <target state="translated">使用 &lt;code&gt;&lt;a href=&quot;../api/core/applicationinitstatus#done&quot;&gt;done&lt;/a&gt;()&lt;/code&gt; 编写测试函数比 &lt;code&gt;&lt;a href=&quot;../api/core/testing/async&quot;&gt;async&lt;/a&gt;()&lt;/code&gt; 和 &lt;code&gt;&lt;a href=&quot;../api/core/testing/fakeasync&quot;&gt;fakeAsync&lt;/a&gt;()&lt;/code&gt; 更为麻烦，但是有时在代码涉及诸如 &lt;code&gt;setInterval&lt;/code&gt; 之类的 &lt;code&gt;intervalTimer()&lt;/code&gt; 时，这有时是必要的。</target>
        </trans-unit>
        <trans-unit id="9287ece53332183a6f3584ff3e2083d2cff0c416" translate="yes" xml:space="preserve">
          <source>Writing test functions with &lt;code&gt;done()&lt;/code&gt;, is more cumbersome than &lt;code&gt;&lt;a href=&quot;../api/core/testing/waitforasync&quot;&gt;waitForAsync&lt;/a&gt;()&lt;/code&gt;and &lt;code&gt;&lt;a href=&quot;../api/core/testing/fakeasync&quot;&gt;fakeAsync&lt;/a&gt;()&lt;/code&gt;, but it is occasionally necessary when code involves the &lt;code&gt;intervalTimer()&lt;/code&gt; like &lt;code&gt;setInterval&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="869fbcd2d8f7216089e804c7e02a4532a37cae00" translate="yes" xml:space="preserve">
          <source>Writing tests with template-driven forms requires a detailed knowledge of the change detection process and an understanding of how directives run on each cycle to ensure that elements are queried, tested, or changed at the correct time.</source>
          <target state="translated">使用模板驱动的表单编写测试,需要详细了解变更检测过程,了解指令如何在每个周期上运行,以确保元素在正确的时间被查询、测试或变更。</target>
        </trans-unit>
        <trans-unit id="fba633555fbdefb41b26b54e2d1ae5197e6018a8" translate="yes" xml:space="preserve">
          <source>Writing this in full JavaScript can be quite involved. With observables, you can use a simple series of RxJS operators:</source>
          <target state="translated">用完整的JavaScript来写这个东西可能会相当复杂。对于观测值,你可以使用一系列简单的RxJS操作符。</target>
        </trans-unit>
        <trans-unit id="5d7b693cbfc10c6be0691f24671f3dea15cd67fa" translate="yes" xml:space="preserve">
          <source>Writing variations of the same parent &lt;em&gt;alias provider&lt;/em&gt; gets old quickly, especially this awful mouthful with a &lt;a href=&quot;dependency-injection-in-action#forwardref&quot;&gt;&lt;em&gt;forwardRef&lt;/em&gt;&lt;/a&gt;.</source>
          <target state="translated">同一父&lt;em&gt;别名提供程序的各种&lt;/em&gt;变体很快就会变老，尤其是在使用&lt;a href=&quot;dependency-injection-in-action#forwardref&quot;&gt;&lt;em&gt;forwardRef的情况下&lt;/em&gt;&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="6615fce0f673668cfcbf040e610b3f243f6a5f0f" translate="yes" xml:space="preserve">
          <source>Writing your own structural directives</source>
          <target state="translated">编写自己的结构指令</target>
        </trans-unit>
        <trans-unit id="bda3d503ab6e71da4ecdc7ba9799876a869c7f5d" translate="yes" xml:space="preserve">
          <source>WtfScopeFn</source>
          <target state="translated">WtfScopeFn</target>
        </trans-unit>
        <trans-unit id="0bedb6a0b3ee1a4586748a1afd482fdab6cd810e" translate="yes" xml:space="preserve">
          <source>XLIFF 1.2 (default)</source>
          <target state="translated">XLIFF 1.2 (默认)</target>
        </trans-unit>
        <trans-unit id="7ac17d1faac505f349f9755e05f6be22993a3065" translate="yes" xml:space="preserve">
          <source>XLIFF 2</source>
          <target state="translated">XLIFF 2</target>
        </trans-unit>
        <trans-unit id="09d92a1a0c75cee4b1621a6ca1a7fc5f5e596627" translate="yes" xml:space="preserve">
          <source>XLIFF files have the extension .xlf. The XMB format generates .xmb source files but uses .xtb (XML Translation Bundle: XTB) translation files.</source>
          <target state="translated">XLIFF文件的扩展名为.xlf。XMB格式生成.xmb源文件,但使用.xtb(XML翻译包:XTB)翻译文件。</target>
        </trans-unit>
        <trans-unit id="f16fd21c83aaacaec3bd77b0e3973fdcf1cd7ce2" translate="yes" xml:space="preserve">
          <source>XLIFF files use the extension &lt;code&gt;.xlf&lt;/code&gt;. The XMB format generates &lt;code&gt;.xmb&lt;/code&gt; source language files but uses&lt;code&gt;.xtb&lt;/code&gt; (XML Translation Bundle: XTB) translation files.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0d6931c6ae08210e1032ff16fc8dc25545ff4dd5" translate="yes" xml:space="preserve">
          <source>XML Message Bundle (XMB)</source>
          <target state="translated">XML信息包(XMB)</target>
        </trans-unit>
        <trans-unit id="599e87f8ed02dd15253f65e02b7486f06eafc4c7" translate="yes" xml:space="preserve">
          <source>XSRF protection</source>
          <target state="translated">XSRF保护</target>
        </trans-unit>
        <trans-unit id="6fd5227911e073f0f3b8abbe36af4c0966e7d31e" translate="yes" xml:space="preserve">
          <source>XhrFactory</source>
          <target state="translated">XhrFactory</target>
        </trans-unit>
        <trans-unit id="23eb4d3f4155395a74e9d534f97ff4c1908f5aac" translate="yes" xml:space="preserve">
          <source>Y</source>
          <target state="translated">Y</target>
        </trans-unit>
        <trans-unit id="e62cdb27a61e20b0f30f4ff403473fde4485a9ba" translate="yes" xml:space="preserve">
          <source>YY</source>
          <target state="translated">YY</target>
        </trans-unit>
        <trans-unit id="e8725db7648f38866a932387e695c9b199a8d638" translate="yes" xml:space="preserve">
          <source>YYY</source>
          <target state="translated">YYY</target>
        </trans-unit>
        <trans-unit id="2857a6a7d922a20f4e8b76ba0339ead374f1165d" translate="yes" xml:space="preserve">
          <source>YYYY</source>
          <target state="translated">YYYY</target>
        </trans-unit>
        <trans-unit id="879e32326c5217968ac8e3a14e4a8a5214957264" translate="yes" xml:space="preserve">
          <source>Year</source>
          <target state="translated">Year</target>
        </trans-unit>
        <trans-unit id="5397e0583f14f6c88de06b1ef28f460a1fb5b0ae" translate="yes" xml:space="preserve">
          <source>Yes</source>
          <target state="translated">Yes</target>
        </trans-unit>
        <trans-unit id="d7d90dedbe56729ff46d489e7ed07371a54fa88f" translate="yes" xml:space="preserve">
          <source>Yes (Guards)</source>
          <target state="translated">是(警卫)</target>
        </trans-unit>
        <trans-unit id="507cb15cae91e9b102e4c4639f56689d54efb2b2" translate="yes" xml:space="preserve">
          <source>Yet another is setting the model property of a custom component&amp;mdash;a great way for parent and child components to communicate:</source>
          <target state="translated">另一个是设置自定义组件的模型属性，这是父组件和子组件进行通信的好方法：</target>
        </trans-unit>
        <trans-unit id="5184f834d5e61356c1186f5476ca3e95650f0f36" translate="yes" xml:space="preserve">
          <source>Yet any test that creates the &lt;code&gt;AppComponent&lt;/code&gt; in the DOM will also create instances of these three components and, if you let that happen, you'll have to configure the &lt;code&gt;&lt;a href=&quot;../api/core/testing/testbed&quot;&gt;TestBed&lt;/a&gt;&lt;/code&gt; to create them.</source>
          <target state="translated">但是，任何在DOM 中创建 &lt;code&gt;AppComponent&lt;/code&gt; 的测试也将创建这三个组件的实例，并且如果您允许这样做，则必须配置 &lt;code&gt;&lt;a href=&quot;../api/core/testing/testbed&quot;&gt;TestBed&lt;/a&gt;&lt;/code&gt; 才能创建它们。</target>
        </trans-unit>
        <trans-unit id="09c5b3c020b8419aa1859d0421105d3bc9f79c89" translate="yes" xml:space="preserve">
          <source>You &lt;a href=&quot;dependency-injection-in-action#class-interface&quot;&gt;learned earlier&lt;/a&gt; that a class interface is an abstract class used as an interface rather than as a base class.</source>
          <target state="translated">您&lt;a href=&quot;dependency-injection-in-action#class-interface&quot;&gt;之前了解到&lt;/a&gt;，类接口是用作接口而不是基类的抽象类。</target>
        </trans-unit>
        <trans-unit id="9eb8bdd95a2a0842fc38fcf43de28230ccdaaa64" translate="yes" xml:space="preserve">
          <source>You &lt;em&gt;can&lt;/em&gt; export any declarable class&amp;mdash;components, directives, and pipes&amp;mdash;whether it's declared in this NgModule or in an imported NgModule.</source>
          <target state="translated">您&lt;em&gt;可以&lt;/em&gt;导出任何&lt;em&gt;可声明的&lt;/em&gt;类-组件，指令和管道-无论是在此NgModule中还是在导入的NgModule中声明的。</target>
        </trans-unit>
        <trans-unit id="83c617dbbb4da668af611e323939842d71fb45d6" translate="yes" xml:space="preserve">
          <source>You &lt;em&gt;can&lt;/em&gt; re-export entire imported NgModules, which effectively re-export all of their exported classes. An NgModule can even export a module that it doesn't import.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="787ea929d005d74a273414ae116216e5df9c88b8" translate="yes" xml:space="preserve">
          <source>You &lt;em&gt;can&lt;/em&gt; re-export entire imported NgModules, which effectively re-exports all of their exported classes. An NgModule can even export a module that it doesn't import.</source>
          <target state="translated">您&lt;em&gt;可以&lt;/em&gt;重新导出整个导入的NgModule，从而有效地重新导出其所有导出的类。NgModule甚至可以导出不导入的模块。</target>
        </trans-unit>
        <trans-unit id="53efccf4d2256507a396e122e4b6a85b6cb4087d" translate="yes" xml:space="preserve">
          <source>You &lt;em&gt;could&lt;/em&gt; add this provider directly to the providers array of the &lt;code&gt;AppModule&lt;/code&gt;. However, it's rather verbose and there's a good chance that you'll create more interceptors and provide them in the same way. You must also pay &lt;a href=&quot;http#interceptor-order&quot;&gt;close attention to the order&lt;/a&gt; in which you provide these interceptors.</source>
          <target state="translated">您&lt;em&gt;可以&lt;/em&gt;将此提供程序直接添加到 &lt;code&gt;AppModule&lt;/code&gt; 的providers数组中。但是，它相当冗长，很有可能您将创建更多拦截器并以相同方式提供它们。您还必须&lt;a href=&quot;http#interceptor-order&quot;&gt;密切注意&lt;/a&gt;提供这些拦截器的顺序。</target>
        </trans-unit>
        <trans-unit id="b85a893fd767c61c0814c4709da16cc28cf81f13" translate="yes" xml:space="preserve">
          <source>You &lt;em&gt;could&lt;/em&gt; handle in the component by adding a second callback to the &lt;code&gt;.subscribe()&lt;/code&gt;:</source>
          <target state="translated">您&lt;em&gt;可以&lt;/em&gt;通过向 &lt;code&gt;.subscribe()&lt;/code&gt; 添加第二个回调来处理组件：</target>
        </trans-unit>
        <trans-unit id="83686f5d76aa5b58d68b9684ddb16975afa647d0" translate="yes" xml:space="preserve">
          <source>You &lt;em&gt;import&lt;/em&gt; other NgModules so you can use their exported classes in component templates. You &lt;em&gt;export&lt;/em&gt; this NgModule's classes so they can be imported and used by components of &lt;em&gt;other&lt;/em&gt; NgModules.</source>
          <target state="translated">您可以&lt;em&gt;导入&lt;/em&gt;其他NgModule，以便可以在组件模板中使用其导出的类。您可以&lt;em&gt;导出&lt;/em&gt;此NgModule的类，以便&lt;em&gt;其他&lt;/em&gt; NgModules 的组件可以导入和使用它们。</target>
        </trans-unit>
        <trans-unit id="09c14240b7508350608a5ba18e2c5814bd0a661d" translate="yes" xml:space="preserve">
          <source>You &lt;em&gt;may&lt;/em&gt; also be able to get the service from the root injector via &lt;code&gt;TestBed.get()&lt;/code&gt;. This is easier to remember and less verbose. But it only works when Angular injects the component with the service instance in the test's root injector.</source>
          <target state="translated">您&lt;em&gt;可能&lt;/em&gt;还能够通过从根注射器获得服务 &lt;code&gt;TestBed.get()&lt;/code&gt; 。这更容易记住，也不太冗长。但是，只有当Angular在测试的根注入器中将带有服务实例的组件注入组件时，它才起作用。</target>
        </trans-unit>
        <trans-unit id="abc55413f28b2ee583c4de9e64107f57a80624a6" translate="yes" xml:space="preserve">
          <source>You &lt;em&gt;may&lt;/em&gt; also be able to get the service from the root injector via &lt;code&gt;TestBed.inject()&lt;/code&gt;. This is easier to remember and less verbose. But it only works when Angular injects the component with the service instance in the test's root injector.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8602a4c4173ea23f45ba3fcc342dec01b1dabf44" translate="yes" xml:space="preserve">
          <source>You &lt;em&gt;should&lt;/em&gt; omit the brackets when all of the following are true:</source>
          <target state="translated">如果满足以下所有条件，&lt;em&gt;则应&lt;/em&gt;省略括号：</target>
        </trans-unit>
        <trans-unit id="e6278239350d29c6aa9b279ad51935f18b8320d6" translate="yes" xml:space="preserve">
          <source>You achieve this effect by adding these class definitions to a new &lt;code&gt;forms.css&lt;/code&gt; file that you add to the project as a sibling to &lt;code&gt;index.html&lt;/code&gt;:</source>
          <target state="translated">通过将这些类定义添加到新的 &lt;code&gt;forms.css&lt;/code&gt; 文件（作为 &lt;code&gt;index.html&lt;/code&gt; 的同级文件添加到项目中）中，可以实现此效果：</target>
        </trans-unit>
        <trans-unit id="ca6798fadac41315d6be90467029b23c51b0bdf9" translate="yes" xml:space="preserve">
          <source>You add &lt;em&gt;guards&lt;/em&gt; to the route configuration to handle these scenarios.</source>
          <target state="translated">您将&lt;em&gt;防护&lt;/em&gt;添加到路由配置中以处理这些情况。</target>
        </trans-unit>
        <trans-unit id="8d6bbb540bb935e899c2208f09a1d394e5d0ac6c" translate="yes" xml:space="preserve">
          <source>You add context by beginning the &lt;code&gt;i18n&lt;/code&gt; attribute value with the &lt;em&gt;meaning&lt;/em&gt; and separating it from the &lt;em&gt;description&lt;/em&gt; with the &lt;code&gt;|&lt;/code&gt; character: &lt;code&gt;&amp;lt;meaning&amp;gt;|&amp;lt;description&amp;gt;&lt;/code&gt;</source>
          <target state="translated">通过以&lt;em&gt;含义&lt;/em&gt;开始 &lt;code&gt;i18n&lt;/code&gt; 属性值并使用 &lt;code&gt;|&lt;/code&gt; 将其与&lt;em&gt;描述&lt;/em&gt;分开来添加上下文。字符： &lt;code&gt;&amp;lt;meaning&amp;gt;|&amp;lt;description&amp;gt;&lt;/code&gt; &lt;em&gt;&lt;/em&gt;&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="ac0635ff20f5d6391e79b5e1baba99af350c5a20" translate="yes" xml:space="preserve">
          <source>You add guards to the route configuration to handle these scenarios.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e3430c566917b8b85e306dc99e17ab8c6aa42b22" translate="yes" xml:space="preserve">
          <source>You add the &lt;code&gt;&lt;a href=&quot;../api/forms/formsmodule&quot;&gt;FormsModule&lt;/a&gt;&lt;/code&gt; to the list of &lt;code&gt;imports&lt;/code&gt; defined in the &lt;code&gt;@&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt; decorator. This gives the application access to all of the template-driven forms features, including &lt;code&gt;&lt;a href=&quot;../api/forms/ngmodel&quot;&gt;ngModel&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">您将 &lt;code&gt;&lt;a href=&quot;../api/forms/formsmodule&quot;&gt;FormsModule&lt;/a&gt;&lt;/code&gt; 添加到 &lt;code&gt;@&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt; &lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;装饰器中定义的 &lt;code&gt;imports&lt;/code&gt; 列表中。这使应用程序可以访问所有模板驱动的表单功能，包括 &lt;code&gt;&lt;a href=&quot;../api/forms/ngmodel&quot;&gt;ngModel&lt;/a&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="438bdad8fdf45e3082ebef8f1d0b53feb1474fc0" translate="yes" xml:space="preserve">
          <source>You add the hero into the &lt;code&gt;heroes&lt;/code&gt; array. The reference to the array hasn't changed. It's the same array. That's all Angular cares about. From its perspective, &lt;em&gt;same array, no change, no display update&lt;/em&gt;.</source>
          <target state="translated">您将英雄添加到 &lt;code&gt;heroes&lt;/code&gt; 数组中。对数组的引用未更改。这是相同的数组。这就是Angular所关心的。从它的角度看，&lt;em&gt;相同的数组，没有变化，没有显示更新&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="7ca70762d285d9a3feb0f42adf3ad26cf94a9f1b" translate="yes" xml:space="preserve">
          <source>You added a &lt;code&gt;&lt;a href=&quot;../api/router/canload&quot;&gt;CanLoad&lt;/a&gt;&lt;/code&gt; guard to the route in the &lt;code&gt;AdminModule&lt;/code&gt; a few steps back to block loading of that module until the user is authorized. That &lt;code&gt;&lt;a href=&quot;../api/router/canload&quot;&gt;CanLoad&lt;/a&gt;&lt;/code&gt; guard takes precedence over the preload strategy.</source>
          <target state="translated">您在 &lt;code&gt;AdminModule&lt;/code&gt; 中的路由上添加了一个 &lt;code&gt;&lt;a href=&quot;../api/router/canload&quot;&gt;CanLoad&lt;/a&gt;&lt;/code&gt; 防护，向后退了几步以阻止该模块的加载，直到授权用户为止。这 &lt;code&gt;&lt;a href=&quot;../api/router/canload&quot;&gt;CanLoad&lt;/a&gt;&lt;/code&gt; 后卫优先预载的策略。</target>
        </trans-unit>
        <trans-unit id="c7f1f5fee6b108edd5d8482048cf967be2ffe741" translate="yes" xml:space="preserve">
          <source>You added a &lt;code&gt;diagnostic&lt;/code&gt; property to return a JSON representation of the model. It'll help you see what you're doing during development; you've left yourself a cleanup note to discard it later.</source>
          <target state="translated">您添加了 &lt;code&gt;diagnostic&lt;/code&gt; 属性以返回模型的JSON表示形式。它可以帮助您了解开发过程中的工作；您已经给自己留下了清理笔记，以后再丢弃。</target>
        </trans-unit>
        <trans-unit id="6b2cd77924cadb7ab1174142cd5459f8db5909c1" translate="yes" xml:space="preserve">
          <source>You added a &lt;em&gt;Submit&lt;/em&gt; button at the bottom with some classes on it for styling.</source>
          <target state="translated">您在底部添加了一个&amp;ldquo; &lt;em&gt;提交&amp;rdquo;&lt;/em&gt;按钮，上面有一些用于样式设置的类。</target>
        </trans-unit>
        <trans-unit id="361569c7fe3d5fe1eec3f680494febf8867dddc2" translate="yes" xml:space="preserve">
          <source>You added a diagnostic interpolation after the input tag so you can see what you're doing. You left yourself a note to throw it away when you're done.</source>
          <target state="translated">你在输入标签后面加了一个诊断插值,这样你就可以看到你在做什么。你给自己留了一张纸条,让自己做完后扔掉。</target>
        </trans-unit>
        <trans-unit id="cad9e1c57dbea9ac68e5f90137a78136490ac8aa" translate="yes" xml:space="preserve">
          <source>You added a header to tell the reader where to find the file by setting the &lt;code&gt;header&lt;/code&gt; attribute. Following convention, you set the &lt;code&gt;header&lt;/code&gt; attribute to the file's location within the sample's root folder.</source>
          <target state="translated">您添加了标题，以通过设置 &lt;code&gt;header&lt;/code&gt; 属性告诉读者在哪里可以找到文件。按照约定，将 &lt;code&gt;header&lt;/code&gt; 属性设置为样本的根文件夹中文件的位置。</target>
        </trans-unit>
        <trans-unit id="7797833099f6da73568d1a71b02ca4c623672629" translate="yes" xml:space="preserve">
          <source>You added the &lt;code&gt;id&lt;/code&gt; of the &lt;em&gt;Dragon Crisis&lt;/em&gt; as the second item in the array (&lt;code&gt;1&lt;/code&gt;).</source>
          <target state="translated">添加的 &lt;code&gt;id&lt;/code&gt; 的的&lt;em&gt;龙危机&lt;/em&gt;作为阵列（在第二项 &lt;code&gt;1&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="41d41f1ef3e0433129a6fd29ab1dd6d2be122a34" translate="yes" xml:space="preserve">
          <source>You added the &lt;code&gt;id&lt;/code&gt; of the Dragon Crisis as the second item in the array (&lt;code&gt;1&lt;/code&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="70027f72129f3cc67318ed5489214e1c09ac777e" translate="yes" xml:space="preserve">
          <source>You added the Angular router to navigate among different components.</source>
          <target state="translated">你添加了Angular路由器来在不同的组件之间导航。</target>
        </trans-unit>
        <trans-unit id="55e3767f013032dca85f37dcfbbb03f3c20ed728" translate="yes" xml:space="preserve">
          <source>You added the necessary dependencies to use HTTP in the app.</source>
          <target state="translated">你添加了必要的依赖关系,以便在应用程序中使用HTTP。</target>
        </trans-unit>
        <trans-unit id="b80bca51135e569f2275ee3e366cf402ec3c1fd9" translate="yes" xml:space="preserve">
          <source>You added two properties to the formerly empty component: &lt;code&gt;title&lt;/code&gt; and &lt;code&gt;myHero&lt;/code&gt;.</source>
          <target state="translated">您向以前为空的组件添加了两个属性： &lt;code&gt;title&lt;/code&gt; 和 &lt;code&gt;myHero&lt;/code&gt; 。</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
